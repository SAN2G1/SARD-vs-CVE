command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1383031	File	data/converged/CVE-2015-8617_php-src/ext_opcache_Optimizer_zend_optimizer.c								
ANR	1383032	Function	zend_optimizer_zval_dtor_wrapper	30:0:1575:1656							
ANR	1383033	FunctionDef	zend_optimizer_zval_dtor_wrapper (zval * zvalue)		1383032	0					
ANR	1383034	CompoundStatement		31:0:1634:1656	1383032	0					
ANR	1383035	ExpressionStatement	zval_dtor ( zvalue )	32:1:1637:1654	1383032	0	True				
ANR	1383036	CallExpression	zval_dtor ( zvalue )		1383032	0					
ANR	1383037	Callee	zval_dtor		1383032	0					
ANR	1383038	Identifier	zval_dtor		1383032	0					
ANR	1383039	ArgumentList	zvalue		1383032	1					
ANR	1383040	Argument	zvalue		1383032	0					
ANR	1383041	Identifier	zvalue		1383032	0					
ANR	1383042	ReturnType	static void		1383032	1					
ANR	1383043	Identifier	zend_optimizer_zval_dtor_wrapper		1383032	2					
ANR	1383044	ParameterList	zval * zvalue		1383032	3					
ANR	1383045	Parameter	zval * zvalue	30:45:1620:1631	1383032	0	True				
ANR	1383046	ParameterType	zval *		1383032	0					
ANR	1383047	Identifier	zvalue		1383032	1					
ANR	1383048	CFGEntryNode	ENTRY		1383032		True				
ANR	1383049	CFGExitNode	EXIT		1383032		True				
ANR	1383050	Symbol	zvalue		1383032						
ANR	1383051	Function	zend_optimizer_collect_constant	35:0:1659:2014							
ANR	1383052	FunctionDef	"zend_optimizer_collect_constant (zend_optimizer_ctx * ctx , zval * name , zval * value)"		1383051	0					
ANR	1383053	CompoundStatement		36:0:1746:2014	1383051	0					
ANR	1383054	IdentifierDeclStatement	zval val ;	37:1:1749:1757	1383051	0	True				
ANR	1383055	IdentifierDecl	val		1383051	0					
ANR	1383056	IdentifierDeclType	zval		1383051	0					
ANR	1383057	Identifier	val		1383051	1					
ANR	1383058	IfStatement	if ( ! ctx -> constants )		1383051	1					
ANR	1383059	Condition	! ctx -> constants	39:5:1765:1779	1383051	0	True				
ANR	1383060	UnaryOperationExpression	! ctx -> constants		1383051	0					
ANR	1383061	UnaryOperator	!		1383051	0					
ANR	1383062	PtrMemberAccess	ctx -> constants		1383051	1					
ANR	1383063	Identifier	ctx		1383051	0					
ANR	1383064	Identifier	constants		1383051	1					
ANR	1383065	CompoundStatement		4:22:35:35	1383051	1					
ANR	1383066	ExpressionStatement	"ctx -> constants = zend_arena_alloc ( & ctx -> arena , sizeof ( HashTable ) )"	40:2:1786:1851	1383051	0	True				
ANR	1383067	AssignmentExpression	"ctx -> constants = zend_arena_alloc ( & ctx -> arena , sizeof ( HashTable ) )"		1383051	0		=			
ANR	1383068	PtrMemberAccess	ctx -> constants		1383051	0					
ANR	1383069	Identifier	ctx		1383051	0					
ANR	1383070	Identifier	constants		1383051	1					
ANR	1383071	CallExpression	"zend_arena_alloc ( & ctx -> arena , sizeof ( HashTable ) )"		1383051	1					
ANR	1383072	Callee	zend_arena_alloc		1383051	0					
ANR	1383073	Identifier	zend_arena_alloc		1383051	0					
ANR	1383074	ArgumentList	& ctx -> arena		1383051	1					
ANR	1383075	Argument	& ctx -> arena		1383051	0					
ANR	1383076	UnaryOperationExpression	& ctx -> arena		1383051	0					
ANR	1383077	UnaryOperator	&		1383051	0					
ANR	1383078	PtrMemberAccess	ctx -> arena		1383051	1					
ANR	1383079	Identifier	ctx		1383051	0					
ANR	1383080	Identifier	arena		1383051	1					
ANR	1383081	Argument	sizeof ( HashTable )		1383051	1					
ANR	1383082	SizeofExpression	sizeof ( HashTable )		1383051	0					
ANR	1383083	Sizeof	sizeof		1383051	0					
ANR	1383084	SizeofOperand	HashTable		1383051	1					
ANR	1383085	ExpressionStatement	"zend_hash_init ( ctx -> constants , 16 , NULL , zend_optimizer_zval_dtor_wrapper , 0 )"	41:2:1855:1932	1383051	1	True				
ANR	1383086	CallExpression	"zend_hash_init ( ctx -> constants , 16 , NULL , zend_optimizer_zval_dtor_wrapper , 0 )"		1383051	0					
ANR	1383087	Callee	zend_hash_init		1383051	0					
ANR	1383088	Identifier	zend_hash_init		1383051	0					
ANR	1383089	ArgumentList	ctx -> constants		1383051	1					
ANR	1383090	Argument	ctx -> constants		1383051	0					
ANR	1383091	PtrMemberAccess	ctx -> constants		1383051	0					
ANR	1383092	Identifier	ctx		1383051	0					
ANR	1383093	Identifier	constants		1383051	1					
ANR	1383094	Argument	16		1383051	1					
ANR	1383095	PrimaryExpression	16		1383051	0					
ANR	1383096	Argument	NULL		1383051	2					
ANR	1383097	Identifier	NULL		1383051	0					
ANR	1383098	Argument	zend_optimizer_zval_dtor_wrapper		1383051	3					
ANR	1383099	Identifier	zend_optimizer_zval_dtor_wrapper		1383051	0					
ANR	1383100	Argument	0		1383051	4					
ANR	1383101	PrimaryExpression	0		1383051	0					
ANR	1383102	ExpressionStatement	"ZVAL_DUP ( & val , value )"	43:1:1938:1959	1383051	2	True				
ANR	1383103	CallExpression	"ZVAL_DUP ( & val , value )"		1383051	0					
ANR	1383104	Callee	ZVAL_DUP		1383051	0					
ANR	1383105	Identifier	ZVAL_DUP		1383051	0					
ANR	1383106	ArgumentList	& val		1383051	1					
ANR	1383107	Argument	& val		1383051	0					
ANR	1383108	UnaryOperationExpression	& val		1383051	0					
ANR	1383109	UnaryOperator	&		1383051	0					
ANR	1383110	Identifier	val		1383051	1					
ANR	1383111	Argument	value		1383051	1					
ANR	1383112	Identifier	value		1383051	0					
ANR	1383113	ExpressionStatement	"zend_hash_add ( ctx -> constants , Z_STR_P ( name ) , & val )"	44:1:1962:2012	1383051	3	True				
ANR	1383114	CallExpression	"zend_hash_add ( ctx -> constants , Z_STR_P ( name ) , & val )"		1383051	0					
ANR	1383115	Callee	zend_hash_add		1383051	0					
ANR	1383116	Identifier	zend_hash_add		1383051	0					
ANR	1383117	ArgumentList	ctx -> constants		1383051	1					
ANR	1383118	Argument	ctx -> constants		1383051	0					
ANR	1383119	PtrMemberAccess	ctx -> constants		1383051	0					
ANR	1383120	Identifier	ctx		1383051	0					
ANR	1383121	Identifier	constants		1383051	1					
ANR	1383122	Argument	Z_STR_P ( name )		1383051	1					
ANR	1383123	CallExpression	Z_STR_P ( name )		1383051	0					
ANR	1383124	Callee	Z_STR_P		1383051	0					
ANR	1383125	Identifier	Z_STR_P		1383051	0					
ANR	1383126	ArgumentList	name		1383051	1					
ANR	1383127	Argument	name		1383051	0					
ANR	1383128	Identifier	name		1383051	0					
ANR	1383129	Argument	& val		1383051	2					
ANR	1383130	UnaryOperationExpression	& val		1383051	0					
ANR	1383131	UnaryOperator	&		1383051	0					
ANR	1383132	Identifier	val		1383051	1					
ANR	1383133	ReturnType	void		1383051	1					
ANR	1383134	Identifier	zend_optimizer_collect_constant		1383051	2					
ANR	1383135	ParameterList	"zend_optimizer_ctx * ctx , zval * name , zval * value"		1383051	3					
ANR	1383136	Parameter	zend_optimizer_ctx * ctx	35:37:1696:1718	1383051	0	True				
ANR	1383137	ParameterType	zend_optimizer_ctx *		1383051	0					
ANR	1383138	Identifier	ctx		1383051	1					
ANR	1383139	Parameter	zval * name	35:62:1721:1730	1383051	1	True				
ANR	1383140	ParameterType	zval *		1383051	0					
ANR	1383141	Identifier	name		1383051	1					
ANR	1383142	Parameter	zval * value	35:74:1733:1743	1383051	2	True				
ANR	1383143	ParameterType	zval *		1383051	0					
ANR	1383144	Identifier	value		1383051	1					
ANR	1383145	CFGEntryNode	ENTRY		1383051		True				
ANR	1383146	CFGExitNode	EXIT		1383051		True				
ANR	1383147	Symbol	val		1383051						
ANR	1383148	Symbol	& val		1383051						
ANR	1383149	Symbol	& ctx -> arena		1383051						
ANR	1383150	Symbol	NULL		1383051						
ANR	1383151	Symbol	zend_arena_alloc		1383051						
ANR	1383152	Symbol	ctx -> constants		1383051						
ANR	1383153	Symbol	ctx		1383051						
ANR	1383154	Symbol	name		1383051						
ANR	1383155	Symbol	zend_optimizer_zval_dtor_wrapper		1383051						
ANR	1383156	Symbol	Z_STR_P		1383051						
ANR	1383157	Symbol	value		1383051						
ANR	1383158	Symbol	* ctx		1383051						
ANR	1383159	Function	zend_optimizer_get_collected_constant	47:0:2017:2236							
ANR	1383160	FunctionDef	"zend_optimizer_get_collected_constant (HashTable * constants , zval * name , zval * value)"		1383159	0					
ANR	1383161	CompoundStatement		48:0:2106:2236	1383159	0					
ANR	1383162	IdentifierDeclStatement	zval * val ;	49:1:2109:2118	1383159	0	True				
ANR	1383163	IdentifierDecl	* val		1383159	0					
ANR	1383164	IdentifierDeclType	zval *		1383159	0					
ANR	1383165	Identifier	val		1383159	1					
ANR	1383166	IfStatement	"if ( ( val = zend_hash_find ( constants , Z_STR_P ( name ) ) ) != NULL )"		1383159	1					
ANR	1383167	Condition	"( val = zend_hash_find ( constants , Z_STR_P ( name ) ) ) != NULL"	51:5:2126:2181	1383159	0	True				
ANR	1383168	EqualityExpression	"( val = zend_hash_find ( constants , Z_STR_P ( name ) ) ) != NULL"		1383159	0		!=			
ANR	1383169	AssignmentExpression	"val = zend_hash_find ( constants , Z_STR_P ( name ) )"		1383159	0		=			
ANR	1383170	Identifier	val		1383159	0					
ANR	1383171	CallExpression	"zend_hash_find ( constants , Z_STR_P ( name ) )"		1383159	1					
ANR	1383172	Callee	zend_hash_find		1383159	0					
ANR	1383173	Identifier	zend_hash_find		1383159	0					
ANR	1383174	ArgumentList	constants		1383159	1					
ANR	1383175	Argument	constants		1383159	0					
ANR	1383176	Identifier	constants		1383159	0					
ANR	1383177	Argument	Z_STR_P ( name )		1383159	1					
ANR	1383178	CallExpression	Z_STR_P ( name )		1383159	0					
ANR	1383179	Callee	Z_STR_P		1383159	0					
ANR	1383180	Identifier	Z_STR_P		1383159	0					
ANR	1383181	ArgumentList	name		1383159	1					
ANR	1383182	Argument	name		1383159	0					
ANR	1383183	Identifier	name		1383159	0					
ANR	1383184	Identifier	NULL		1383159	1					
ANR	1383185	CompoundStatement		4:63:77:77	1383159	1					
ANR	1383186	ExpressionStatement	"ZVAL_DUP ( value , val )"	52:2:2188:2208	1383159	0	True				
ANR	1383187	CallExpression	"ZVAL_DUP ( value , val )"		1383159	0					
ANR	1383188	Callee	ZVAL_DUP		1383159	0					
ANR	1383189	Identifier	ZVAL_DUP		1383159	0					
ANR	1383190	ArgumentList	value		1383159	1					
ANR	1383191	Argument	value		1383159	0					
ANR	1383192	Identifier	value		1383159	0					
ANR	1383193	Argument	val		1383159	1					
ANR	1383194	Identifier	val		1383159	0					
ANR	1383195	ReturnStatement	return 1 ;	53:2:2212:2220	1383159	1	True				
ANR	1383196	PrimaryExpression	1		1383159	0					
ANR	1383197	ReturnStatement	return 0 ;	55:1:2226:2234	1383159	2	True				
ANR	1383198	PrimaryExpression	0		1383159	0					
ANR	1383199	ReturnType	int		1383159	1					
ANR	1383200	Identifier	zend_optimizer_get_collected_constant		1383159	2					
ANR	1383201	ParameterList	"HashTable * constants , zval * name , zval * value"		1383159	3					
ANR	1383202	Parameter	HashTable * constants	47:42:2059:2078	1383159	0	True				
ANR	1383203	ParameterType	HashTable *		1383159	0					
ANR	1383204	Identifier	constants		1383159	1					
ANR	1383205	Parameter	zval * name	47:64:2081:2090	1383159	1	True				
ANR	1383206	ParameterType	zval *		1383159	0					
ANR	1383207	Identifier	name		1383159	1					
ANR	1383208	Parameter	zval * value	47:76:2093:2103	1383159	2	True				
ANR	1383209	ParameterType	zval *		1383159	0					
ANR	1383210	Identifier	value		1383159	1					
ANR	1383211	CFGEntryNode	ENTRY		1383159		True				
ANR	1383212	CFGExitNode	EXIT		1383159		True				
ANR	1383213	Symbol	val		1383159						
ANR	1383214	Symbol	zend_hash_find		1383159						
ANR	1383215	Symbol	NULL		1383159						
ANR	1383216	Symbol	name		1383159						
ANR	1383217	Symbol	constants		1383159						
ANR	1383218	Symbol	Z_STR_P		1383159						
ANR	1383219	Symbol	value		1383159						
ANR	1383220	Function	zend_optimizer_lookup_cv	58:0:2239:3662							
ANR	1383221	FunctionDef	"zend_optimizer_lookup_cv (zend_op_array * op_array , zend_string * name)"		1383220	0					
ANR	1383222	CompoundStatement		59:0:2312:3662	1383220	0					
ANR	1383223	IdentifierDeclStatement	int i = 0 ;	60:1:2315:2324	1383220	0	True				
ANR	1383224	IdentifierDecl	i = 0		1383220	0					
ANR	1383225	IdentifierDeclType	int		1383220	0					
ANR	1383226	Identifier	i		1383220	1					
ANR	1383227	AssignmentExpression	i = 0		1383220	2		=			
ANR	1383228	Identifier	i		1383220	0					
ANR	1383229	PrimaryExpression	0		1383220	1					
ANR	1383230	IdentifierDeclStatement	zend_ulong hash_value = zend_string_hash_val ( name ) ;	61:1:2327:2377	1383220	1	True				
ANR	1383231	IdentifierDecl	hash_value = zend_string_hash_val ( name )		1383220	0					
ANR	1383232	IdentifierDeclType	zend_ulong		1383220	0					
ANR	1383233	Identifier	hash_value		1383220	1					
ANR	1383234	AssignmentExpression	hash_value = zend_string_hash_val ( name )		1383220	2		=			
ANR	1383235	Identifier	hash_value		1383220	0					
ANR	1383236	CallExpression	zend_string_hash_val ( name )		1383220	1					
ANR	1383237	Callee	zend_string_hash_val		1383220	0					
ANR	1383238	Identifier	zend_string_hash_val		1383220	0					
ANR	1383239	ArgumentList	name		1383220	1					
ANR	1383240	Argument	name		1383220	0					
ANR	1383241	Identifier	name		1383220	0					
ANR	1383242	WhileStatement	while ( i < op_array -> last_var )		1383220	2					
ANR	1383243	Condition	i < op_array -> last_var	63:8:2388:2409	1383220	0	True				
ANR	1383244	RelationalExpression	i < op_array -> last_var		1383220	0		<			
ANR	1383245	Identifier	i		1383220	0					
ANR	1383246	PtrMemberAccess	op_array -> last_var		1383220	1					
ANR	1383247	Identifier	op_array		1383220	0					
ANR	1383248	Identifier	last_var		1383220	1					
ANR	1383249	CompoundStatement		5:32:99:99	1383220	1					
ANR	1383250	IfStatement	"if ( op_array -> vars [ i ] == name || ( ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0 ) )"		1383220	0					
ANR	1383251	Condition	"op_array -> vars [ i ] == name || ( ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0 )"	64:6:2420:2634	1383220	0	True				
ANR	1383252	OrExpression	"op_array -> vars [ i ] == name || ( ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0 )"		1383220	0		||			
ANR	1383253	EqualityExpression	op_array -> vars [ i ] == name		1383220	0		==			
ANR	1383254	ArrayIndexing	op_array -> vars [ i ]		1383220	0					
ANR	1383255	PtrMemberAccess	op_array -> vars		1383220	0					
ANR	1383256	Identifier	op_array		1383220	0					
ANR	1383257	Identifier	vars		1383220	1					
ANR	1383258	Identifier	i		1383220	1					
ANR	1383259	Identifier	name		1383220	1					
ANR	1383260	AndExpression	"ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0"		1383220	1		&&			
ANR	1383261	EqualityExpression	ZSTR_H ( op_array -> vars [ i ] ) == hash_value		1383220	0		==			
ANR	1383262	CallExpression	ZSTR_H ( op_array -> vars [ i ] )		1383220	0					
ANR	1383263	Callee	ZSTR_H		1383220	0					
ANR	1383264	Identifier	ZSTR_H		1383220	0					
ANR	1383265	ArgumentList	op_array -> vars [ i ]		1383220	1					
ANR	1383266	Argument	op_array -> vars [ i ]		1383220	0					
ANR	1383267	ArrayIndexing	op_array -> vars [ i ]		1383220	0					
ANR	1383268	PtrMemberAccess	op_array -> vars		1383220	0					
ANR	1383269	Identifier	op_array		1383220	0					
ANR	1383270	Identifier	vars		1383220	1					
ANR	1383271	Identifier	i		1383220	1					
ANR	1383272	Identifier	hash_value		1383220	1					
ANR	1383273	AndExpression	"ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0"		1383220	1		&&			
ANR	1383274	EqualityExpression	ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name )		1383220	0		==			
ANR	1383275	CallExpression	ZSTR_LEN ( op_array -> vars [ i ] )		1383220	0					
ANR	1383276	Callee	ZSTR_LEN		1383220	0					
ANR	1383277	Identifier	ZSTR_LEN		1383220	0					
ANR	1383278	ArgumentList	op_array -> vars [ i ]		1383220	1					
ANR	1383279	Argument	op_array -> vars [ i ]		1383220	0					
ANR	1383280	ArrayIndexing	op_array -> vars [ i ]		1383220	0					
ANR	1383281	PtrMemberAccess	op_array -> vars		1383220	0					
ANR	1383282	Identifier	op_array		1383220	0					
ANR	1383283	Identifier	vars		1383220	1					
ANR	1383284	Identifier	i		1383220	1					
ANR	1383285	CallExpression	ZSTR_LEN ( name )		1383220	1					
ANR	1383286	Callee	ZSTR_LEN		1383220	0					
ANR	1383287	Identifier	ZSTR_LEN		1383220	0					
ANR	1383288	ArgumentList	name		1383220	1					
ANR	1383289	Argument	name		1383220	0					
ANR	1383290	Identifier	name		1383220	0					
ANR	1383291	EqualityExpression	"memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0"		1383220	1		==			
ANR	1383292	CallExpression	"memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		1383220	0					
ANR	1383293	Callee	memcmp		1383220	0					
ANR	1383294	Identifier	memcmp		1383220	0					
ANR	1383295	ArgumentList	ZSTR_VAL ( op_array -> vars [ i ] )		1383220	1					
ANR	1383296	Argument	ZSTR_VAL ( op_array -> vars [ i ] )		1383220	0					
ANR	1383297	CallExpression	ZSTR_VAL ( op_array -> vars [ i ] )		1383220	0					
ANR	1383298	Callee	ZSTR_VAL		1383220	0					
ANR	1383299	Identifier	ZSTR_VAL		1383220	0					
ANR	1383300	ArgumentList	op_array -> vars [ i ]		1383220	1					
ANR	1383301	Argument	op_array -> vars [ i ]		1383220	0					
ANR	1383302	ArrayIndexing	op_array -> vars [ i ]		1383220	0					
ANR	1383303	PtrMemberAccess	op_array -> vars		1383220	0					
ANR	1383304	Identifier	op_array		1383220	0					
ANR	1383305	Identifier	vars		1383220	1					
ANR	1383306	Identifier	i		1383220	1					
ANR	1383307	Argument	ZSTR_VAL ( name )		1383220	1					
ANR	1383308	CallExpression	ZSTR_VAL ( name )		1383220	0					
ANR	1383309	Callee	ZSTR_VAL		1383220	0					
ANR	1383310	Identifier	ZSTR_VAL		1383220	0					
ANR	1383311	ArgumentList	name		1383220	1					
ANR	1383312	Argument	name		1383220	0					
ANR	1383313	Identifier	name		1383220	0					
ANR	1383314	Argument	ZSTR_LEN ( name )		1383220	2					
ANR	1383315	CallExpression	ZSTR_LEN ( name )		1383220	0					
ANR	1383316	Callee	ZSTR_LEN		1383220	0					
ANR	1383317	Identifier	ZSTR_LEN		1383220	0					
ANR	1383318	ArgumentList	name		1383220	1					
ANR	1383319	Argument	name		1383220	0					
ANR	1383320	Identifier	name		1383220	0					
ANR	1383321	PrimaryExpression	0		1383220	1					
ANR	1383322	CompoundStatement		9:82:324:324	1383220	1					
ANR	1383323	ReturnStatement	"return ( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i ) ;"	68:3:2642:2695	1383220	0	True				
ANR	1383324	CastExpression	"( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		1383220	0					
ANR	1383325	CastTarget	int		1383220	0					
ANR	1383326	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		1383220	1					
ANR	1383327	CastTarget	zend_intptr_t		1383220	0					
ANR	1383328	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , i )"		1383220	1					
ANR	1383329	Callee	ZEND_CALL_VAR_NUM		1383220	0					
ANR	1383330	Identifier	ZEND_CALL_VAR_NUM		1383220	0					
ANR	1383331	ArgumentList	NULL		1383220	1					
ANR	1383332	Argument	NULL		1383220	0					
ANR	1383333	Identifier	NULL		1383220	0					
ANR	1383334	Argument	i		1383220	1					
ANR	1383335	Identifier	i		1383220	0					
ANR	1383336	ExpressionStatement	i ++	70:2:2703:2706	1383220	1	True				
ANR	1383337	PostIncDecOperationExpression	i ++		1383220	0					
ANR	1383338	Identifier	i		1383220	0					
ANR	1383339	IncDec	++		1383220	1					
ANR	1383340	ExpressionStatement	i = op_array -> last_var	72:1:2712:2734	1383220	3	True				
ANR	1383341	AssignmentExpression	i = op_array -> last_var		1383220	0		=			
ANR	1383342	Identifier	i		1383220	0					
ANR	1383343	PtrMemberAccess	op_array -> last_var		1383220	1					
ANR	1383344	Identifier	op_array		1383220	0					
ANR	1383345	Identifier	last_var		1383220	1					
ANR	1383346	ExpressionStatement	op_array -> last_var ++	73:1:2737:2757	1383220	4	True				
ANR	1383347	PostIncDecOperationExpression	op_array -> last_var ++		1383220	0					
ANR	1383348	PtrMemberAccess	op_array -> last_var		1383220	0					
ANR	1383349	Identifier	op_array		1383220	0					
ANR	1383350	Identifier	last_var		1383220	1					
ANR	1383351	IncDec	++		1383220	1					
ANR	1383352	ExpressionStatement	"op_array -> vars = erealloc ( op_array -> vars , op_array -> last_var * sizeof ( zend_string * ) )"	74:1:2760:2844	1383220	5	True				
ANR	1383353	AssignmentExpression	"op_array -> vars = erealloc ( op_array -> vars , op_array -> last_var * sizeof ( zend_string * ) )"		1383220	0		=			
ANR	1383354	PtrMemberAccess	op_array -> vars		1383220	0					
ANR	1383355	Identifier	op_array		1383220	0					
ANR	1383356	Identifier	vars		1383220	1					
ANR	1383357	CallExpression	"erealloc ( op_array -> vars , op_array -> last_var * sizeof ( zend_string * ) )"		1383220	1					
ANR	1383358	Callee	erealloc		1383220	0					
ANR	1383359	Identifier	erealloc		1383220	0					
ANR	1383360	ArgumentList	op_array -> vars		1383220	1					
ANR	1383361	Argument	op_array -> vars		1383220	0					
ANR	1383362	PtrMemberAccess	op_array -> vars		1383220	0					
ANR	1383363	Identifier	op_array		1383220	0					
ANR	1383364	Identifier	vars		1383220	1					
ANR	1383365	Argument	op_array -> last_var * sizeof ( zend_string * )		1383220	1					
ANR	1383366	MultiplicativeExpression	op_array -> last_var * sizeof ( zend_string * )		1383220	0		*			
ANR	1383367	PtrMemberAccess	op_array -> last_var		1383220	0					
ANR	1383368	Identifier	op_array		1383220	0					
ANR	1383369	Identifier	last_var		1383220	1					
ANR	1383370	SizeofExpression	sizeof ( zend_string * )		1383220	1					
ANR	1383371	Sizeof	sizeof		1383220	0					
ANR	1383372	SizeofOperand	zend_string *		1383220	1					
ANR	1383373	ExpressionStatement	"op_array -> vars [ i ] = zend_string_dup ( name , 0 )"	75:1:2847:2891	1383220	6	True				
ANR	1383374	AssignmentExpression	"op_array -> vars [ i ] = zend_string_dup ( name , 0 )"		1383220	0		=			
ANR	1383375	ArrayIndexing	op_array -> vars [ i ]		1383220	0					
ANR	1383376	PtrMemberAccess	op_array -> vars		1383220	0					
ANR	1383377	Identifier	op_array		1383220	0					
ANR	1383378	Identifier	vars		1383220	1					
ANR	1383379	Identifier	i		1383220	1					
ANR	1383380	CallExpression	"zend_string_dup ( name , 0 )"		1383220	1					
ANR	1383381	Callee	zend_string_dup		1383220	0					
ANR	1383382	Identifier	zend_string_dup		1383220	0					
ANR	1383383	ArgumentList	name		1383220	1					
ANR	1383384	Argument	name		1383220	0					
ANR	1383385	Identifier	name		1383220	0					
ANR	1383386	Argument	0		1383220	1					
ANR	1383387	PrimaryExpression	0		1383220	0					
ANR	1383388	CompoundStatement		22:2:695:733	1383220	7					
ANR	1383389	IdentifierDeclStatement	zend_op * opline = op_array -> opcodes ;	79:2:2969:3004	1383220	0	True				
ANR	1383390	IdentifierDecl	* opline = op_array -> opcodes		1383220	0					
ANR	1383391	IdentifierDeclType	zend_op *		1383220	0					
ANR	1383392	Identifier	opline		1383220	1					
ANR	1383393	AssignmentExpression	* opline = op_array -> opcodes		1383220	2		=			
ANR	1383394	Identifier	opline		1383220	0					
ANR	1383395	PtrMemberAccess	op_array -> opcodes		1383220	1					
ANR	1383396	Identifier	op_array		1383220	0					
ANR	1383397	Identifier	opcodes		1383220	1					
ANR	1383398	IdentifierDeclStatement	zend_op * end = opline + op_array -> last ;	80:2:3008:3046	1383220	1	True				
ANR	1383399	IdentifierDecl	* end = opline + op_array -> last		1383220	0					
ANR	1383400	IdentifierDeclType	zend_op *		1383220	0					
ANR	1383401	Identifier	end		1383220	1					
ANR	1383402	AssignmentExpression	* end = opline + op_array -> last		1383220	2		=			
ANR	1383403	Identifier	end		1383220	0					
ANR	1383404	AdditiveExpression	opline + op_array -> last		1383220	1		+			
ANR	1383405	Identifier	opline		1383220	0					
ANR	1383406	PtrMemberAccess	op_array -> last		1383220	1					
ANR	1383407	Identifier	op_array		1383220	0					
ANR	1383408	Identifier	last		1383220	1					
ANR	1383409	WhileStatement	while ( opline < end )		1383220	2					
ANR	1383410	Condition	opline < end	81:9:3057:3068	1383220	0	True				
ANR	1383411	RelationalExpression	opline < end		1383220	0		<			
ANR	1383412	Identifier	opline		1383220	0					
ANR	1383413	Identifier	end		1383220	1					
ANR	1383414	CompoundStatement		23:23:758:758	1383220	1					
ANR	1383415	IfStatement	if ( opline -> op1_type & ( IS_TMP_VAR | IS_VAR ) )		1383220	0					
ANR	1383416	Condition	opline -> op1_type & ( IS_TMP_VAR | IS_VAR )	82:7:3080:3117	1383220	0	True				
ANR	1383417	BitAndExpression	opline -> op1_type & ( IS_TMP_VAR | IS_VAR )		1383220	0		&			
ANR	1383418	PtrMemberAccess	opline -> op1_type		1383220	0					
ANR	1383419	Identifier	opline		1383220	0					
ANR	1383420	Identifier	op1_type		1383220	1					
ANR	1383421	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1383220	1		|			
ANR	1383422	Identifier	IS_TMP_VAR		1383220	0					
ANR	1383423	Identifier	IS_VAR		1383220	1					
ANR	1383424	CompoundStatement		24:47:807:807	1383220	1					
ANR	1383425	ExpressionStatement	opline -> op1 . var += sizeof ( zval )	83:4:3126:3157	1383220	0	True				
ANR	1383426	AssignmentExpression	opline -> op1 . var += sizeof ( zval )		1383220	0		+=			
ANR	1383427	MemberAccess	opline -> op1 . var		1383220	0					
ANR	1383428	PtrMemberAccess	opline -> op1		1383220	0					
ANR	1383429	Identifier	opline		1383220	0					
ANR	1383430	Identifier	op1		1383220	1					
ANR	1383431	Identifier	var		1383220	1					
ANR	1383432	SizeofExpression	sizeof ( zval )		1383220	1					
ANR	1383433	Sizeof	sizeof		1383220	0					
ANR	1383434	SizeofOperand	zval		1383220	1					
ANR	1383435	IfStatement	if ( opline -> op2_type & ( IS_TMP_VAR | IS_VAR ) )		1383220	1					
ANR	1383436	Condition	opline -> op2_type & ( IS_TMP_VAR | IS_VAR )	85:7:3171:3208	1383220	0	True				
ANR	1383437	BitAndExpression	opline -> op2_type & ( IS_TMP_VAR | IS_VAR )		1383220	0		&			
ANR	1383438	PtrMemberAccess	opline -> op2_type		1383220	0					
ANR	1383439	Identifier	opline		1383220	0					
ANR	1383440	Identifier	op2_type		1383220	1					
ANR	1383441	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1383220	1		|			
ANR	1383442	Identifier	IS_TMP_VAR		1383220	0					
ANR	1383443	Identifier	IS_VAR		1383220	1					
ANR	1383444	CompoundStatement		27:47:898:898	1383220	1					
ANR	1383445	ExpressionStatement	opline -> op2 . var += sizeof ( zval )	86:4:3217:3248	1383220	0	True				
ANR	1383446	AssignmentExpression	opline -> op2 . var += sizeof ( zval )		1383220	0		+=			
ANR	1383447	MemberAccess	opline -> op2 . var		1383220	0					
ANR	1383448	PtrMemberAccess	opline -> op2		1383220	0					
ANR	1383449	Identifier	opline		1383220	0					
ANR	1383450	Identifier	op2		1383220	1					
ANR	1383451	Identifier	var		1383220	1					
ANR	1383452	SizeofExpression	sizeof ( zval )		1383220	1					
ANR	1383453	Sizeof	sizeof		1383220	0					
ANR	1383454	SizeofOperand	zval		1383220	1					
ANR	1383455	IfStatement	if ( opline -> result_type & ( IS_TMP_VAR | IS_VAR ) )		1383220	2					
ANR	1383456	Condition	opline -> result_type & ( IS_TMP_VAR | IS_VAR )	88:7:3262:3302	1383220	0	True				
ANR	1383457	BitAndExpression	opline -> result_type & ( IS_TMP_VAR | IS_VAR )		1383220	0		&			
ANR	1383458	PtrMemberAccess	opline -> result_type		1383220	0					
ANR	1383459	Identifier	opline		1383220	0					
ANR	1383460	Identifier	result_type		1383220	1					
ANR	1383461	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1383220	1		|			
ANR	1383462	Identifier	IS_TMP_VAR		1383220	0					
ANR	1383463	Identifier	IS_VAR		1383220	1					
ANR	1383464	CompoundStatement		30:50:992:992	1383220	1					
ANR	1383465	ExpressionStatement	opline -> result . var += sizeof ( zval )	89:4:3311:3345	1383220	0	True				
ANR	1383466	AssignmentExpression	opline -> result . var += sizeof ( zval )		1383220	0		+=			
ANR	1383467	MemberAccess	opline -> result . var		1383220	0					
ANR	1383468	PtrMemberAccess	opline -> result		1383220	0					
ANR	1383469	Identifier	opline		1383220	0					
ANR	1383470	Identifier	result		1383220	1					
ANR	1383471	Identifier	var		1383220	1					
ANR	1383472	SizeofExpression	sizeof ( zval )		1383220	1					
ANR	1383473	Sizeof	sizeof		1383220	0					
ANR	1383474	SizeofOperand	zval		1383220	1					
ANR	1383475	IfStatement	if ( opline -> opcode == ZEND_DECLARE_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED )		1383220	3					
ANR	1383476	Condition	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED	91:7:3359:3531	1383220	0	True				
ANR	1383477	OrExpression	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED		1383220	0		||			
ANR	1383478	EqualityExpression	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS		1383220	0		==			
ANR	1383479	PtrMemberAccess	opline -> opcode		1383220	0					
ANR	1383480	Identifier	opline		1383220	0					
ANR	1383481	Identifier	opcode		1383220	1					
ANR	1383482	Identifier	ZEND_DECLARE_INHERITED_CLASS		1383220	1					
ANR	1383483	OrExpression	opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED		1383220	1		||			
ANR	1383484	EqualityExpression	opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS		1383220	0		==			
ANR	1383485	PtrMemberAccess	opline -> opcode		1383220	0					
ANR	1383486	Identifier	opline		1383220	0					
ANR	1383487	Identifier	opcode		1383220	1					
ANR	1383488	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		1383220	1					
ANR	1383489	EqualityExpression	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED		1383220	1		==			
ANR	1383490	PtrMemberAccess	opline -> opcode		1383220	0					
ANR	1383491	Identifier	opline		1383220	0					
ANR	1383492	Identifier	opcode		1383220	1					
ANR	1383493	Identifier	ZEND_DECLARE_INHERITED_CLASS_DELAYED		1383220	1					
ANR	1383494	CompoundStatement		35:63:1221:1221	1383220	1					
ANR	1383495	ExpressionStatement	opline -> extended_value += sizeof ( zval )	94:4:3540:3578	1383220	0	True				
ANR	1383496	AssignmentExpression	opline -> extended_value += sizeof ( zval )		1383220	0		+=			
ANR	1383497	PtrMemberAccess	opline -> extended_value		1383220	0					
ANR	1383498	Identifier	opline		1383220	0					
ANR	1383499	Identifier	extended_value		1383220	1					
ANR	1383500	SizeofExpression	sizeof ( zval )		1383220	1					
ANR	1383501	Sizeof	sizeof		1383220	0					
ANR	1383502	SizeofOperand	zval		1383220	1					
ANR	1383503	ExpressionStatement	opline ++	96:3:3588:3596	1383220	4	True				
ANR	1383504	PostIncDecOperationExpression	opline ++		1383220	0					
ANR	1383505	Identifier	opline		1383220	0					
ANR	1383506	IncDec	++		1383220	1					
ANR	1383507	ReturnStatement	"return ( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i ) ;"	100:1:3607:3660	1383220	8	True				
ANR	1383508	CastExpression	"( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		1383220	0					
ANR	1383509	CastTarget	int		1383220	0					
ANR	1383510	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		1383220	1					
ANR	1383511	CastTarget	zend_intptr_t		1383220	0					
ANR	1383512	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , i )"		1383220	1					
ANR	1383513	Callee	ZEND_CALL_VAR_NUM		1383220	0					
ANR	1383514	Identifier	ZEND_CALL_VAR_NUM		1383220	0					
ANR	1383515	ArgumentList	NULL		1383220	1					
ANR	1383516	Argument	NULL		1383220	0					
ANR	1383517	Identifier	NULL		1383220	0					
ANR	1383518	Argument	i		1383220	1					
ANR	1383519	Identifier	i		1383220	0					
ANR	1383520	ReturnType	int		1383220	1					
ANR	1383521	Identifier	zend_optimizer_lookup_cv		1383220	2					
ANR	1383522	ParameterList	"zend_op_array * op_array , zend_string * name"		1383220	3					
ANR	1383523	Parameter	zend_op_array * op_array	58:29:2268:2290	1383220	0	True				
ANR	1383524	ParameterType	zend_op_array *		1383220	0					
ANR	1383525	Identifier	op_array		1383220	1					
ANR	1383526	Parameter	zend_string * name	58:54:2293:2309	1383220	1	True				
ANR	1383527	ParameterType	zend_string *		1383220	0					
ANR	1383528	Identifier	name		1383220	1					
ANR	1383529	CFGEntryNode	ENTRY		1383220		True				
ANR	1383530	CFGExitNode	EXIT		1383220		True				
ANR	1383531	Symbol	opline -> op1		1383220						
ANR	1383532	Symbol	opline -> op2		1383220						
ANR	1383533	Symbol	opline -> op2 . var		1383220						
ANR	1383534	Symbol	op_array -> last_var		1383220						
ANR	1383535	Symbol	ZSTR_H		1383220						
ANR	1383536	Symbol	zend_string_dup		1383220						
ANR	1383537	Symbol	opline -> result		1383220						
ANR	1383538	Symbol	opline -> extended_value		1383220						
ANR	1383539	Symbol	* op_array -> vars		1383220						
ANR	1383540	Symbol	memcmp		1383220						
ANR	1383541	Symbol	opline		1383220						
ANR	1383542	Symbol	op_array -> opcodes		1383220						
ANR	1383543	Symbol	zend_string_hash_val		1383220						
ANR	1383544	Symbol	end		1383220						
ANR	1383545	Symbol	opline -> op1 . var		1383220						
ANR	1383546	Symbol	erealloc		1383220						
ANR	1383547	Symbol	ZEND_DECLARE_INHERITED_CLASS_DELAYED		1383220						
ANR	1383548	Symbol	IS_TMP_VAR		1383220						
ANR	1383549	Symbol	opline -> result_type		1383220						
ANR	1383550	Symbol	op_array -> vars		1383220						
ANR	1383551	Symbol	NULL		1383220						
ANR	1383552	Symbol	ZEND_DECLARE_ANON_INHERITED_CLASS		1383220						
ANR	1383553	Symbol	i		1383220						
ANR	1383554	Symbol	* op_array		1383220						
ANR	1383555	Symbol	opline -> op1_type		1383220						
ANR	1383556	Symbol	ZSTR_VAL		1383220						
ANR	1383557	Symbol	op_array -> last		1383220						
ANR	1383558	Symbol	* i		1383220						
ANR	1383559	Symbol	* opline		1383220						
ANR	1383560	Symbol	opline -> opcode		1383220						
ANR	1383561	Symbol	ZEND_CALL_VAR_NUM		1383220						
ANR	1383562	Symbol	name		1383220						
ANR	1383563	Symbol	ZSTR_LEN		1383220						
ANR	1383564	Symbol	ZEND_DECLARE_INHERITED_CLASS		1383220						
ANR	1383565	Symbol	opline -> op2_type		1383220						
ANR	1383566	Symbol	hash_value		1383220						
ANR	1383567	Symbol	* * op_array		1383220						
ANR	1383568	Symbol	IS_VAR		1383220						
ANR	1383569	Symbol	op_array		1383220						
ANR	1383570	Symbol	opline -> result . var		1383220						
ANR	1383571	Function	zend_optimizer_add_literal	103:0:3665:3991							
ANR	1383572	FunctionDef	"zend_optimizer_add_literal (zend_op_array * op_array , zval * zv)"		1383571	0					
ANR	1383573	CompoundStatement		104:0:3731:3991	1383571	0					
ANR	1383574	IdentifierDeclStatement	int i = op_array -> last_literal ;	105:1:3734:3764	1383571	0	True				
ANR	1383575	IdentifierDecl	i = op_array -> last_literal		1383571	0					
ANR	1383576	IdentifierDeclType	int		1383571	0					
ANR	1383577	Identifier	i		1383571	1					
ANR	1383578	AssignmentExpression	i = op_array -> last_literal		1383571	2		=			
ANR	1383579	Identifier	i		1383571	0					
ANR	1383580	PtrMemberAccess	op_array -> last_literal		1383571	1					
ANR	1383581	Identifier	op_array		1383571	0					
ANR	1383582	Identifier	last_literal		1383571	1					
ANR	1383583	ExpressionStatement	op_array -> last_literal ++	106:1:3767:3791	1383571	1	True				
ANR	1383584	PostIncDecOperationExpression	op_array -> last_literal ++		1383571	0					
ANR	1383585	PtrMemberAccess	op_array -> last_literal		1383571	0					
ANR	1383586	Identifier	op_array		1383571	0					
ANR	1383587	Identifier	last_literal		1383571	1					
ANR	1383588	IncDec	++		1383571	1					
ANR	1383589	ExpressionStatement	"op_array -> literals = ( zval * ) erealloc ( op_array -> literals , op_array -> last_literal * sizeof ( zval ) )"	107:1:3794:3889	1383571	2	True				
ANR	1383590	AssignmentExpression	"op_array -> literals = ( zval * ) erealloc ( op_array -> literals , op_array -> last_literal * sizeof ( zval ) )"		1383571	0		=			
ANR	1383591	PtrMemberAccess	op_array -> literals		1383571	0					
ANR	1383592	Identifier	op_array		1383571	0					
ANR	1383593	Identifier	literals		1383571	1					
ANR	1383594	CastExpression	"( zval * ) erealloc ( op_array -> literals , op_array -> last_literal * sizeof ( zval ) )"		1383571	1					
ANR	1383595	CastTarget	zval *		1383571	0					
ANR	1383596	CallExpression	"erealloc ( op_array -> literals , op_array -> last_literal * sizeof ( zval ) )"		1383571	1					
ANR	1383597	Callee	erealloc		1383571	0					
ANR	1383598	Identifier	erealloc		1383571	0					
ANR	1383599	ArgumentList	op_array -> literals		1383571	1					
ANR	1383600	Argument	op_array -> literals		1383571	0					
ANR	1383601	PtrMemberAccess	op_array -> literals		1383571	0					
ANR	1383602	Identifier	op_array		1383571	0					
ANR	1383603	Identifier	literals		1383571	1					
ANR	1383604	Argument	op_array -> last_literal * sizeof ( zval )		1383571	1					
ANR	1383605	MultiplicativeExpression	op_array -> last_literal * sizeof ( zval )		1383571	0		*			
ANR	1383606	PtrMemberAccess	op_array -> last_literal		1383571	0					
ANR	1383607	Identifier	op_array		1383571	0					
ANR	1383608	Identifier	last_literal		1383571	1					
ANR	1383609	SizeofExpression	sizeof ( zval )		1383571	1					
ANR	1383610	Sizeof	sizeof		1383571	0					
ANR	1383611	SizeofOperand	zval		1383571	1					
ANR	1383612	ExpressionStatement	"ZVAL_COPY_VALUE ( & op_array -> literals [ i ] , zv )"	108:1:3892:3935	1383571	3	True				
ANR	1383613	CallExpression	"ZVAL_COPY_VALUE ( & op_array -> literals [ i ] , zv )"		1383571	0					
ANR	1383614	Callee	ZVAL_COPY_VALUE		1383571	0					
ANR	1383615	Identifier	ZVAL_COPY_VALUE		1383571	0					
ANR	1383616	ArgumentList	& op_array -> literals [ i ]		1383571	1					
ANR	1383617	Argument	& op_array -> literals [ i ]		1383571	0					
ANR	1383618	UnaryOperationExpression	& op_array -> literals [ i ]		1383571	0					
ANR	1383619	UnaryOperator	&		1383571	0					
ANR	1383620	ArrayIndexing	op_array -> literals [ i ]		1383571	1					
ANR	1383621	PtrMemberAccess	op_array -> literals		1383571	0					
ANR	1383622	Identifier	op_array		1383571	0					
ANR	1383623	Identifier	literals		1383571	1					
ANR	1383624	Identifier	i		1383571	1					
ANR	1383625	Argument	zv		1383571	1					
ANR	1383626	Identifier	zv		1383571	0					
ANR	1383627	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ i ] ) = - 1	109:1:3938:3978	1383571	4	True				
ANR	1383628	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ i ] ) = - 1		1383571	0		=			
ANR	1383629	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ i ] )		1383571	0					
ANR	1383630	Callee	Z_CACHE_SLOT		1383571	0					
ANR	1383631	Identifier	Z_CACHE_SLOT		1383571	0					
ANR	1383632	ArgumentList	op_array -> literals [ i ]		1383571	1					
ANR	1383633	Argument	op_array -> literals [ i ]		1383571	0					
ANR	1383634	ArrayIndexing	op_array -> literals [ i ]		1383571	0					
ANR	1383635	PtrMemberAccess	op_array -> literals		1383571	0					
ANR	1383636	Identifier	op_array		1383571	0					
ANR	1383637	Identifier	literals		1383571	1					
ANR	1383638	Identifier	i		1383571	1					
ANR	1383639	UnaryOperationExpression	- 1		1383571	1					
ANR	1383640	UnaryOperator	-		1383571	0					
ANR	1383641	PrimaryExpression	1		1383571	1					
ANR	1383642	ReturnStatement	return i ;	110:1:3981:3989	1383571	5	True				
ANR	1383643	Identifier	i		1383571	0					
ANR	1383644	ReturnType	int		1383571	1					
ANR	1383645	Identifier	zend_optimizer_add_literal		1383571	2					
ANR	1383646	ParameterList	"zend_op_array * op_array , zval * zv"		1383571	3					
ANR	1383647	Parameter	zend_op_array * op_array	103:31:3696:3718	1383571	0	True				
ANR	1383648	ParameterType	zend_op_array *		1383571	0					
ANR	1383649	Identifier	op_array		1383571	1					
ANR	1383650	Parameter	zval * zv	103:56:3721:3728	1383571	1	True				
ANR	1383651	ParameterType	zval *		1383571	0					
ANR	1383652	Identifier	zv		1383571	1					
ANR	1383653	CFGEntryNode	ENTRY		1383571		True				
ANR	1383654	CFGExitNode	EXIT		1383571		True				
ANR	1383655	Symbol	* i		1383571						
ANR	1383656	Symbol	op_array -> last_literal		1383571						
ANR	1383657	Symbol	op_array -> literals		1383571						
ANR	1383658	Symbol	i		1383571						
ANR	1383659	Symbol	Z_CACHE_SLOT		1383571						
ANR	1383660	Symbol	zv		1383571						
ANR	1383661	Symbol	* * op_array		1383571						
ANR	1383662	Symbol	erealloc		1383571						
ANR	1383663	Symbol	op_array		1383571						
ANR	1383664	Symbol	* op_array		1383571						
ANR	1383665	Symbol	* op_array -> literals		1383571						
ANR	1383666	Function	zend_optimizer_add_literal_string	113:0:3994:4201							
ANR	1383667	FunctionDef	"zend_optimizer_add_literal_string (zend_op_array * op_array , zend_string * str)"		1383666	0					
ANR	1383668	CompoundStatement		113:95:4089:4201	1383666	0					
ANR	1383669	IdentifierDeclStatement	zval zv ;	114:1:4092:4099	1383666	0	True				
ANR	1383670	IdentifierDecl	zv		1383666	0					
ANR	1383671	IdentifierDeclType	zval		1383666	0					
ANR	1383672	Identifier	zv		1383666	1					
ANR	1383673	ExpressionStatement	"ZVAL_STR ( & zv , str )"	115:1:4102:4120	1383666	1	True				
ANR	1383674	CallExpression	"ZVAL_STR ( & zv , str )"		1383666	0					
ANR	1383675	Callee	ZVAL_STR		1383666	0					
ANR	1383676	Identifier	ZVAL_STR		1383666	0					
ANR	1383677	ArgumentList	& zv		1383666	1					
ANR	1383678	Argument	& zv		1383666	0					
ANR	1383679	UnaryOperationExpression	& zv		1383666	0					
ANR	1383680	UnaryOperator	&		1383666	0					
ANR	1383681	Identifier	zv		1383666	1					
ANR	1383682	Argument	str		1383666	1					
ANR	1383683	Identifier	str		1383666	0					
ANR	1383684	ExpressionStatement	zend_string_hash_val ( str )	116:1:4123:4148	1383666	2	True				
ANR	1383685	CallExpression	zend_string_hash_val ( str )		1383666	0					
ANR	1383686	Callee	zend_string_hash_val		1383666	0					
ANR	1383687	Identifier	zend_string_hash_val		1383666	0					
ANR	1383688	ArgumentList	str		1383666	1					
ANR	1383689	Argument	str		1383666	0					
ANR	1383690	Identifier	str		1383666	0					
ANR	1383691	ReturnStatement	"return zend_optimizer_add_literal ( op_array , & zv ) ;"	117:1:4151:4199	1383666	3	True				
ANR	1383692	CallExpression	"zend_optimizer_add_literal ( op_array , & zv )"		1383666	0					
ANR	1383693	Callee	zend_optimizer_add_literal		1383666	0					
ANR	1383694	Identifier	zend_optimizer_add_literal		1383666	0					
ANR	1383695	ArgumentList	op_array		1383666	1					
ANR	1383696	Argument	op_array		1383666	0					
ANR	1383697	Identifier	op_array		1383666	0					
ANR	1383698	Argument	& zv		1383666	1					
ANR	1383699	UnaryOperationExpression	& zv		1383666	0					
ANR	1383700	UnaryOperator	&		1383666	0					
ANR	1383701	Identifier	zv		1383666	1					
ANR	1383702	ReturnType	static inline int		1383666	1					
ANR	1383703	Identifier	zend_optimizer_add_literal_string		1383666	2					
ANR	1383704	ParameterList	"zend_op_array * op_array , zend_string * str"		1383666	3					
ANR	1383705	Parameter	zend_op_array * op_array	113:52:4046:4068	1383666	0	True				
ANR	1383706	ParameterType	zend_op_array *		1383666	0					
ANR	1383707	Identifier	op_array		1383666	1					
ANR	1383708	Parameter	zend_string * str	113:77:4071:4086	1383666	1	True				
ANR	1383709	ParameterType	zend_string *		1383666	0					
ANR	1383710	Identifier	str		1383666	1					
ANR	1383711	CFGEntryNode	ENTRY		1383666		True				
ANR	1383712	CFGExitNode	EXIT		1383666		True				
ANR	1383713	Symbol	str		1383666						
ANR	1383714	Symbol	& zv		1383666						
ANR	1383715	Symbol	zv		1383666						
ANR	1383716	Symbol	op_array		1383666						
ANR	1383717	Symbol	zend_optimizer_add_literal		1383666						
ANR	1383718	Function	zend_optimizer_is_disabled_func	120:0:4204:4496							
ANR	1383719	FunctionDef	"zend_optimizer_is_disabled_func (const char * name , size_t len)"		1383718	0					
ANR	1383720	CompoundStatement		120:66:4270:4496	1383718	0					
ANR	1383721	IdentifierDeclStatement	"zend_function * fbc = ( zend_function * ) zend_hash_str_find_ptr ( EG ( function_table ) , name , len ) ;"	121:1:4273:4364	1383718	0	True				
ANR	1383722	IdentifierDecl	"* fbc = ( zend_function * ) zend_hash_str_find_ptr ( EG ( function_table ) , name , len )"		1383718	0					
ANR	1383723	IdentifierDeclType	zend_function *		1383718	0					
ANR	1383724	Identifier	fbc		1383718	1					
ANR	1383725	AssignmentExpression	"* fbc = ( zend_function * ) zend_hash_str_find_ptr ( EG ( function_table ) , name , len )"		1383718	2		=			
ANR	1383726	Identifier	fbc		1383718	0					
ANR	1383727	CastExpression	"( zend_function * ) zend_hash_str_find_ptr ( EG ( function_table ) , name , len )"		1383718	1					
ANR	1383728	CastTarget	zend_function *		1383718	0					
ANR	1383729	CallExpression	"zend_hash_str_find_ptr ( EG ( function_table ) , name , len )"		1383718	1					
ANR	1383730	Callee	zend_hash_str_find_ptr		1383718	0					
ANR	1383731	Identifier	zend_hash_str_find_ptr		1383718	0					
ANR	1383732	ArgumentList	EG ( function_table )		1383718	1					
ANR	1383733	Argument	EG ( function_table )		1383718	0					
ANR	1383734	CallExpression	EG ( function_table )		1383718	0					
ANR	1383735	Callee	EG		1383718	0					
ANR	1383736	Identifier	EG		1383718	0					
ANR	1383737	ArgumentList	function_table		1383718	1					
ANR	1383738	Argument	function_table		1383718	0					
ANR	1383739	Identifier	function_table		1383718	0					
ANR	1383740	Argument	name		1383718	1					
ANR	1383741	Identifier	name		1383718	0					
ANR	1383742	Argument	len		1383718	2					
ANR	1383743	Identifier	len		1383718	0					
ANR	1383744	ReturnStatement	return ( fbc && fbc -> type == ZEND_INTERNAL_FUNCTION && fbc -> internal_function . handler == ZEND_FN ( display_disabled_function ) ) ;	123:1:4368:4494	1383718	1	True				
ANR	1383745	AndExpression	fbc && fbc -> type == ZEND_INTERNAL_FUNCTION && fbc -> internal_function . handler == ZEND_FN ( display_disabled_function )		1383718	0		&&			
ANR	1383746	Identifier	fbc		1383718	0					
ANR	1383747	AndExpression	fbc -> type == ZEND_INTERNAL_FUNCTION && fbc -> internal_function . handler == ZEND_FN ( display_disabled_function )		1383718	1		&&			
ANR	1383748	EqualityExpression	fbc -> type == ZEND_INTERNAL_FUNCTION		1383718	0		==			
ANR	1383749	PtrMemberAccess	fbc -> type		1383718	0					
ANR	1383750	Identifier	fbc		1383718	0					
ANR	1383751	Identifier	type		1383718	1					
ANR	1383752	Identifier	ZEND_INTERNAL_FUNCTION		1383718	1					
ANR	1383753	EqualityExpression	fbc -> internal_function . handler == ZEND_FN ( display_disabled_function )		1383718	1		==			
ANR	1383754	MemberAccess	fbc -> internal_function . handler		1383718	0					
ANR	1383755	PtrMemberAccess	fbc -> internal_function		1383718	0					
ANR	1383756	Identifier	fbc		1383718	0					
ANR	1383757	Identifier	internal_function		1383718	1					
ANR	1383758	Identifier	handler		1383718	1					
ANR	1383759	CallExpression	ZEND_FN ( display_disabled_function )		1383718	1					
ANR	1383760	Callee	ZEND_FN		1383718	0					
ANR	1383761	Identifier	ZEND_FN		1383718	0					
ANR	1383762	ArgumentList	display_disabled_function		1383718	1					
ANR	1383763	Argument	display_disabled_function		1383718	0					
ANR	1383764	Identifier	display_disabled_function		1383718	0					
ANR	1383765	ReturnType	int		1383718	1					
ANR	1383766	Identifier	zend_optimizer_is_disabled_func		1383718	2					
ANR	1383767	ParameterList	"const char * name , size_t len"		1383718	3					
ANR	1383768	Parameter	const char * name	120:36:4240:4255	1383718	0	True				
ANR	1383769	ParameterType	const char *		1383718	0					
ANR	1383770	Identifier	name		1383718	1					
ANR	1383771	Parameter	size_t len	120:54:4258:4267	1383718	1	True				
ANR	1383772	ParameterType	size_t		1383718	0					
ANR	1383773	Identifier	len		1383718	1					
ANR	1383774	CFGEntryNode	ENTRY		1383718		True				
ANR	1383775	CFGExitNode	EXIT		1383718		True				
ANR	1383776	Symbol	EG		1383718						
ANR	1383777	Symbol	fbc		1383718						
ANR	1383778	Symbol	fbc -> type		1383718						
ANR	1383779	Symbol	fbc -> internal_function . handler		1383718						
ANR	1383780	Symbol	display_disabled_function		1383718						
ANR	1383781	Symbol	* fbc		1383718						
ANR	1383782	Symbol	ZEND_INTERNAL_FUNCTION		1383718						
ANR	1383783	Symbol	len		1383718						
ANR	1383784	Symbol	fbc -> internal_function		1383718						
ANR	1383785	Symbol	name		1383718						
ANR	1383786	Symbol	zend_hash_str_find_ptr		1383718						
ANR	1383787	Symbol	function_table		1383718						
ANR	1383788	Symbol	ZEND_FN		1383718						
ANR	1383789	Function	drop_leading_backslash	127:0:4499:4716							
ANR	1383790	FunctionDef	drop_leading_backslash (zval * val)		1383789	0					
ANR	1383791	CompoundStatement		127:53:4552:4716	1383789	0					
ANR	1383792	IfStatement	if ( Z_STRVAL_P ( val ) [ 0 ] == '\\\\' )		1383789	0					
ANR	1383793	Condition	Z_STRVAL_P ( val ) [ 0 ] == '\\\\'	128:5:4559:4584	1383789	0	True				
ANR	1383794	EqualityExpression	Z_STRVAL_P ( val ) [ 0 ] == '\\\\'		1383789	0		==			
ANR	1383795	ArrayIndexing	Z_STRVAL_P ( val ) [ 0 ]		1383789	0					
ANR	1383796	CallExpression	Z_STRVAL_P ( val )		1383789	0					
ANR	1383797	Callee	Z_STRVAL_P		1383789	0					
ANR	1383798	Identifier	Z_STRVAL_P		1383789	0					
ANR	1383799	ArgumentList	val		1383789	1					
ANR	1383800	Argument	val		1383789	0					
ANR	1383801	Identifier	val		1383789	0					
ANR	1383802	PrimaryExpression	0		1383789	1					
ANR	1383803	PrimaryExpression	'\\\\'		1383789	1					
ANR	1383804	CompoundStatement		3:2:38:118	1383789	1					
ANR	1383805	IdentifierDeclStatement	"zend_string * str = zend_string_init ( Z_STRVAL_P ( val ) + 1 , Z_STRLEN_P ( val ) - 1 , 0 ) ;"	129:2:4591:4671	1383789	0	True				
ANR	1383806	IdentifierDecl	"* str = zend_string_init ( Z_STRVAL_P ( val ) + 1 , Z_STRLEN_P ( val ) - 1 , 0 )"		1383789	0					
ANR	1383807	IdentifierDeclType	zend_string *		1383789	0					
ANR	1383808	Identifier	str		1383789	1					
ANR	1383809	AssignmentExpression	"* str = zend_string_init ( Z_STRVAL_P ( val ) + 1 , Z_STRLEN_P ( val ) - 1 , 0 )"		1383789	2		=			
ANR	1383810	Identifier	str		1383789	0					
ANR	1383811	CallExpression	"zend_string_init ( Z_STRVAL_P ( val ) + 1 , Z_STRLEN_P ( val ) - 1 , 0 )"		1383789	1					
ANR	1383812	Callee	zend_string_init		1383789	0					
ANR	1383813	Identifier	zend_string_init		1383789	0					
ANR	1383814	ArgumentList	Z_STRVAL_P ( val ) + 1		1383789	1					
ANR	1383815	Argument	Z_STRVAL_P ( val ) + 1		1383789	0					
ANR	1383816	AdditiveExpression	Z_STRVAL_P ( val ) + 1		1383789	0		+			
ANR	1383817	CallExpression	Z_STRVAL_P ( val )		1383789	0					
ANR	1383818	Callee	Z_STRVAL_P		1383789	0					
ANR	1383819	Identifier	Z_STRVAL_P		1383789	0					
ANR	1383820	ArgumentList	val		1383789	1					
ANR	1383821	Argument	val		1383789	0					
ANR	1383822	Identifier	val		1383789	0					
ANR	1383823	PrimaryExpression	1		1383789	1					
ANR	1383824	Argument	Z_STRLEN_P ( val ) - 1		1383789	1					
ANR	1383825	AdditiveExpression	Z_STRLEN_P ( val ) - 1		1383789	0		-			
ANR	1383826	CallExpression	Z_STRLEN_P ( val )		1383789	0					
ANR	1383827	Callee	Z_STRLEN_P		1383789	0					
ANR	1383828	Identifier	Z_STRLEN_P		1383789	0					
ANR	1383829	ArgumentList	val		1383789	1					
ANR	1383830	Argument	val		1383789	0					
ANR	1383831	Identifier	val		1383789	0					
ANR	1383832	PrimaryExpression	1		1383789	1					
ANR	1383833	Argument	0		1383789	2					
ANR	1383834	PrimaryExpression	0		1383789	0					
ANR	1383835	ExpressionStatement	zval_dtor ( val )	130:2:4675:4689	1383789	1	True				
ANR	1383836	CallExpression	zval_dtor ( val )		1383789	0					
ANR	1383837	Callee	zval_dtor		1383789	0					
ANR	1383838	Identifier	zval_dtor		1383789	0					
ANR	1383839	ArgumentList	val		1383789	1					
ANR	1383840	Argument	val		1383789	0					
ANR	1383841	Identifier	val		1383789	0					
ANR	1383842	ExpressionStatement	"ZVAL_STR ( val , str )"	131:2:4693:4711	1383789	2	True				
ANR	1383843	CallExpression	"ZVAL_STR ( val , str )"		1383789	0					
ANR	1383844	Callee	ZVAL_STR		1383789	0					
ANR	1383845	Identifier	ZVAL_STR		1383789	0					
ANR	1383846	ArgumentList	val		1383789	1					
ANR	1383847	Argument	val		1383789	0					
ANR	1383848	Identifier	val		1383789	0					
ANR	1383849	Argument	str		1383789	1					
ANR	1383850	Identifier	str		1383789	0					
ANR	1383851	ReturnType	static inline void		1383789	1					
ANR	1383852	Identifier	drop_leading_backslash		1383789	2					
ANR	1383853	ParameterList	zval * val		1383789	3					
ANR	1383854	Parameter	zval * val	127:42:4541:4549	1383789	0	True				
ANR	1383855	ParameterType	zval *		1383789	0					
ANR	1383856	Identifier	val		1383789	1					
ANR	1383857	CFGEntryNode	ENTRY		1383789		True				
ANR	1383858	CFGExitNode	EXIT		1383789		True				
ANR	1383859	Symbol	val		1383789						
ANR	1383860	Symbol	str		1383789						
ANR	1383861	Symbol	zend_string_init		1383789						
ANR	1383862	Symbol	Z_STRLEN_P		1383789						
ANR	1383863	Symbol	* Z_STRVAL_P		1383789						
ANR	1383864	Symbol	Z_STRVAL_P		1383789						
ANR	1383865	Function	alloc_cache_slots_op1	135:0:4719:4945							
ANR	1383866	FunctionDef	"alloc_cache_slots_op1 (zend_op_array * op_array , zend_op * opline , uint32_t num)"		1383865	0					
ANR	1383867	CompoundStatement		135:97:4816:4945	1383865	0					
ANR	1383868	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ opline -> op1 . constant ] ) = op_array -> cache_size	136:1:4819:4896	1383865	0	True				
ANR	1383869	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op1 . constant ] ) = op_array -> cache_size		1383865	0		=			
ANR	1383870	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op1 . constant ] )		1383865	0					
ANR	1383871	Callee	Z_CACHE_SLOT		1383865	0					
ANR	1383872	Identifier	Z_CACHE_SLOT		1383865	0					
ANR	1383873	ArgumentList	op_array -> literals [ opline -> op1 . constant ]		1383865	1					
ANR	1383874	Argument	op_array -> literals [ opline -> op1 . constant ]		1383865	0					
ANR	1383875	ArrayIndexing	op_array -> literals [ opline -> op1 . constant ]		1383865	0					
ANR	1383876	PtrMemberAccess	op_array -> literals		1383865	0					
ANR	1383877	Identifier	op_array		1383865	0					
ANR	1383878	Identifier	literals		1383865	1					
ANR	1383879	MemberAccess	opline -> op1 . constant		1383865	1					
ANR	1383880	PtrMemberAccess	opline -> op1		1383865	0					
ANR	1383881	Identifier	opline		1383865	0					
ANR	1383882	Identifier	op1		1383865	1					
ANR	1383883	Identifier	constant		1383865	1					
ANR	1383884	PtrMemberAccess	op_array -> cache_size		1383865	1					
ANR	1383885	Identifier	op_array		1383865	0					
ANR	1383886	Identifier	cache_size		1383865	1					
ANR	1383887	ExpressionStatement	op_array -> cache_size += num * sizeof ( void * )	137:1:4899:4943	1383865	1	True				
ANR	1383888	AssignmentExpression	op_array -> cache_size += num * sizeof ( void * )		1383865	0		+=			
ANR	1383889	PtrMemberAccess	op_array -> cache_size		1383865	0					
ANR	1383890	Identifier	op_array		1383865	0					
ANR	1383891	Identifier	cache_size		1383865	1					
ANR	1383892	MultiplicativeExpression	num * sizeof ( void * )		1383865	1		*			
ANR	1383893	Identifier	num		1383865	0					
ANR	1383894	SizeofExpression	sizeof ( void * )		1383865	1					
ANR	1383895	Sizeof	sizeof		1383865	0					
ANR	1383896	SizeofOperand	void *		1383865	1					
ANR	1383897	ReturnType	static inline void		1383865	1					
ANR	1383898	Identifier	alloc_cache_slots_op1		1383865	2					
ANR	1383899	ParameterList	"zend_op_array * op_array , zend_op * opline , uint32_t num"		1383865	3					
ANR	1383900	Parameter	zend_op_array * op_array	135:41:4760:4782	1383865	0	True				
ANR	1383901	ParameterType	zend_op_array *		1383865	0					
ANR	1383902	Identifier	op_array		1383865	1					
ANR	1383903	Parameter	zend_op * opline	135:66:4785:4799	1383865	1	True				
ANR	1383904	ParameterType	zend_op *		1383865	0					
ANR	1383905	Identifier	opline		1383865	1					
ANR	1383906	Parameter	uint32_t num	135:83:4802:4813	1383865	2	True				
ANR	1383907	ParameterType	uint32_t		1383865	0					
ANR	1383908	Identifier	num		1383865	1					
ANR	1383909	CFGEntryNode	ENTRY		1383865		True				
ANR	1383910	CFGExitNode	EXIT		1383865		True				
ANR	1383911	Symbol	opline -> op1		1383865						
ANR	1383912	Symbol	num		1383865						
ANR	1383913	Symbol	* op_array		1383865						
ANR	1383914	Symbol	* op_array -> literals		1383865						
ANR	1383915	Symbol	* opline -> op1 . constant		1383865						
ANR	1383916	Symbol	opline		1383865						
ANR	1383917	Symbol	* opline -> op1		1383865						
ANR	1383918	Symbol	* opline		1383865						
ANR	1383919	Symbol	op_array -> literals		1383865						
ANR	1383920	Symbol	opline -> op1 . constant		1383865						
ANR	1383921	Symbol	Z_CACHE_SLOT		1383865						
ANR	1383922	Symbol	* * opline		1383865						
ANR	1383923	Symbol	op_array -> cache_size		1383865						
ANR	1383924	Symbol	* * op_array		1383865						
ANR	1383925	Symbol	op_array		1383865						
ANR	1383926	Function	alloc_cache_slots_op2	139:0:4947:5173							
ANR	1383927	FunctionDef	"alloc_cache_slots_op2 (zend_op_array * op_array , zend_op * opline , uint32_t num)"		1383926	0					
ANR	1383928	CompoundStatement		139:97:5044:5173	1383926	0					
ANR	1383929	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] ) = op_array -> cache_size	140:1:5047:5124	1383926	0	True				
ANR	1383930	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] ) = op_array -> cache_size		1383926	0		=			
ANR	1383931	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] )		1383926	0					
ANR	1383932	Callee	Z_CACHE_SLOT		1383926	0					
ANR	1383933	Identifier	Z_CACHE_SLOT		1383926	0					
ANR	1383934	ArgumentList	op_array -> literals [ opline -> op2 . constant ]		1383926	1					
ANR	1383935	Argument	op_array -> literals [ opline -> op2 . constant ]		1383926	0					
ANR	1383936	ArrayIndexing	op_array -> literals [ opline -> op2 . constant ]		1383926	0					
ANR	1383937	PtrMemberAccess	op_array -> literals		1383926	0					
ANR	1383938	Identifier	op_array		1383926	0					
ANR	1383939	Identifier	literals		1383926	1					
ANR	1383940	MemberAccess	opline -> op2 . constant		1383926	1					
ANR	1383941	PtrMemberAccess	opline -> op2		1383926	0					
ANR	1383942	Identifier	opline		1383926	0					
ANR	1383943	Identifier	op2		1383926	1					
ANR	1383944	Identifier	constant		1383926	1					
ANR	1383945	PtrMemberAccess	op_array -> cache_size		1383926	1					
ANR	1383946	Identifier	op_array		1383926	0					
ANR	1383947	Identifier	cache_size		1383926	1					
ANR	1383948	ExpressionStatement	op_array -> cache_size += num * sizeof ( void * )	141:1:5127:5171	1383926	1	True				
ANR	1383949	AssignmentExpression	op_array -> cache_size += num * sizeof ( void * )		1383926	0		+=			
ANR	1383950	PtrMemberAccess	op_array -> cache_size		1383926	0					
ANR	1383951	Identifier	op_array		1383926	0					
ANR	1383952	Identifier	cache_size		1383926	1					
ANR	1383953	MultiplicativeExpression	num * sizeof ( void * )		1383926	1		*			
ANR	1383954	Identifier	num		1383926	0					
ANR	1383955	SizeofExpression	sizeof ( void * )		1383926	1					
ANR	1383956	Sizeof	sizeof		1383926	0					
ANR	1383957	SizeofOperand	void *		1383926	1					
ANR	1383958	ReturnType	static inline void		1383926	1					
ANR	1383959	Identifier	alloc_cache_slots_op2		1383926	2					
ANR	1383960	ParameterList	"zend_op_array * op_array , zend_op * opline , uint32_t num"		1383926	3					
ANR	1383961	Parameter	zend_op_array * op_array	139:41:4988:5010	1383926	0	True				
ANR	1383962	ParameterType	zend_op_array *		1383926	0					
ANR	1383963	Identifier	op_array		1383926	1					
ANR	1383964	Parameter	zend_op * opline	139:66:5013:5027	1383926	1	True				
ANR	1383965	ParameterType	zend_op *		1383926	0					
ANR	1383966	Identifier	opline		1383926	1					
ANR	1383967	Parameter	uint32_t num	139:83:5030:5041	1383926	2	True				
ANR	1383968	ParameterType	uint32_t		1383926	0					
ANR	1383969	Identifier	num		1383926	1					
ANR	1383970	CFGEntryNode	ENTRY		1383926		True				
ANR	1383971	CFGExitNode	EXIT		1383926		True				
ANR	1383972	Symbol	opline -> op2		1383926						
ANR	1383973	Symbol	num		1383926						
ANR	1383974	Symbol	* op_array -> literals		1383926						
ANR	1383975	Symbol	* op_array		1383926						
ANR	1383976	Symbol	* opline -> op2		1383926						
ANR	1383977	Symbol	opline		1383926						
ANR	1383978	Symbol	* opline		1383926						
ANR	1383979	Symbol	op_array -> literals		1383926						
ANR	1383980	Symbol	opline -> op2 . constant		1383926						
ANR	1383981	Symbol	Z_CACHE_SLOT		1383926						
ANR	1383982	Symbol	op_array -> cache_size		1383926						
ANR	1383983	Symbol	* * opline		1383926						
ANR	1383984	Symbol	* * op_array		1383926						
ANR	1383985	Symbol	* opline -> op2 . constant		1383926						
ANR	1383986	Symbol	op_array		1383926						
ANR	1383987	Function	zend_optimizer_update_op1_const	159:0:5453:6837							
ANR	1383988	FunctionDef	"zend_optimizer_update_op1_const (zend_op_array * op_array , zend_op * opline , zval * val)"		1383987	0					
ANR	1383989	CompoundStatement		162:0:5629:6837	1383987	0					
ANR	1383990	SwitchStatement	switch ( opline -> opcode )		1383987	0					
ANR	1383991	Condition	opline -> opcode	163:9:5640:5653	1383987	0	True				
ANR	1383992	PtrMemberAccess	opline -> opcode		1383987	0					
ANR	1383993	Identifier	opline		1383987	0					
ANR	1383994	Identifier	opcode		1383987	1					
ANR	1383995	CompoundStatement		2:25:26:26	1383987	1					
ANR	1383996	Label	case ZEND_FREE :	164:2:5660:5674	1383987	0	True				
ANR	1383997	Identifier	ZEND_FREE		1383987	0					
ANR	1383998	ExpressionStatement	MAKE_NOP ( opline )	165:3:5679:5695	1383987	1	True				
ANR	1383999	CallExpression	MAKE_NOP ( opline )		1383987	0					
ANR	1384000	Callee	MAKE_NOP		1383987	0					
ANR	1384001	Identifier	MAKE_NOP		1383987	0					
ANR	1384002	ArgumentList	opline		1383987	1					
ANR	1384003	Argument	opline		1383987	0					
ANR	1384004	Identifier	opline		1383987	0					
ANR	1384005	ExpressionStatement	zval_dtor ( val )	166:3:5700:5714	1383987	2	True				
ANR	1384006	CallExpression	zval_dtor ( val )		1383987	0					
ANR	1384007	Callee	zval_dtor		1383987	0					
ANR	1384008	Identifier	zval_dtor		1383987	0					
ANR	1384009	ArgumentList	val		1383987	1					
ANR	1384010	Argument	val		1383987	0					
ANR	1384011	Identifier	val		1383987	0					
ANR	1384012	ReturnStatement	return 1 ;	167:3:5719:5727	1383987	3	True				
ANR	1384013	PrimaryExpression	1		1383987	0					
ANR	1384014	Label	case ZEND_INIT_STATIC_METHOD_CALL :	168:2:5731:5764	1383987	4	True				
ANR	1384015	Identifier	ZEND_INIT_STATIC_METHOD_CALL		1383987	0					
ANR	1384016	Label	case ZEND_CATCH :	169:2:5768:5783	1383987	5	True				
ANR	1384017	Identifier	ZEND_CATCH		1383987	0					
ANR	1384018	Label	case ZEND_FETCH_CONSTANT :	170:2:5787:5811	1383987	6	True				
ANR	1384019	Identifier	ZEND_FETCH_CONSTANT		1383987	0					
ANR	1384020	Label	case ZEND_DEFINED :	171:2:5815:5832	1383987	7	True				
ANR	1384021	Identifier	ZEND_DEFINED		1383987	0					
ANR	1384022	Label	case ZEND_NEW :	172:2:5836:5849	1383987	8	True				
ANR	1384023	Identifier	ZEND_NEW		1383987	0					
ANR	1384024	ExpressionStatement	REQUIRES_STRING ( val )	173:3:5854:5874	1383987	9	True				
ANR	1384025	CallExpression	REQUIRES_STRING ( val )		1383987	0					
ANR	1384026	Callee	REQUIRES_STRING		1383987	0					
ANR	1384027	Identifier	REQUIRES_STRING		1383987	0					
ANR	1384028	ArgumentList	val		1383987	1					
ANR	1384029	Argument	val		1383987	0					
ANR	1384030	Identifier	val		1383987	0					
ANR	1384031	ExpressionStatement	drop_leading_backslash ( val )	174:3:5879:5906	1383987	10	True				
ANR	1384032	CallExpression	drop_leading_backslash ( val )		1383987	0					
ANR	1384033	Callee	drop_leading_backslash		1383987	0					
ANR	1384034	Identifier	drop_leading_backslash		1383987	0					
ANR	1384035	ArgumentList	val		1383987	1					
ANR	1384036	Argument	val		1383987	0					
ANR	1384037	Identifier	val		1383987	0					
ANR	1384038	ExpressionStatement	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"	175:3:5911:5975	1383987	11	True				
ANR	1384039	AssignmentExpression	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"		1383987	0		=			
ANR	1384040	MemberAccess	opline -> op1 . constant		1383987	0					
ANR	1384041	PtrMemberAccess	opline -> op1		1383987	0					
ANR	1384042	Identifier	opline		1383987	0					
ANR	1384043	Identifier	op1		1383987	1					
ANR	1384044	Identifier	constant		1383987	1					
ANR	1384045	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1383987	1					
ANR	1384046	Callee	zend_optimizer_add_literal		1383987	0					
ANR	1384047	Identifier	zend_optimizer_add_literal		1383987	0					
ANR	1384048	ArgumentList	op_array		1383987	1					
ANR	1384049	Argument	op_array		1383987	0					
ANR	1384050	Identifier	op_array		1383987	0					
ANR	1384051	Argument	val		1383987	1					
ANR	1384052	Identifier	val		1383987	0					
ANR	1384053	ExpressionStatement	"alloc_cache_slots_op1 ( op_array , opline , 1 )"	176:3:5980:6022	1383987	12	True				
ANR	1384054	CallExpression	"alloc_cache_slots_op1 ( op_array , opline , 1 )"		1383987	0					
ANR	1384055	Callee	alloc_cache_slots_op1		1383987	0					
ANR	1384056	Identifier	alloc_cache_slots_op1		1383987	0					
ANR	1384057	ArgumentList	op_array		1383987	1					
ANR	1384058	Argument	op_array		1383987	0					
ANR	1384059	Identifier	op_array		1383987	0					
ANR	1384060	Argument	opline		1383987	1					
ANR	1384061	Identifier	opline		1383987	0					
ANR	1384062	Argument	1		1383987	2					
ANR	1384063	PrimaryExpression	1		1383987	0					
ANR	1384064	ExpressionStatement	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"	177:3:6027:6105	1383987	13	True				
ANR	1384065	CallExpression	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"		1383987	0					
ANR	1384066	Callee	zend_optimizer_add_literal_string		1383987	0					
ANR	1384067	Identifier	zend_optimizer_add_literal_string		1383987	0					
ANR	1384068	ArgumentList	op_array		1383987	1					
ANR	1384069	Argument	op_array		1383987	0					
ANR	1384070	Identifier	op_array		1383987	0					
ANR	1384071	Argument	zend_string_tolower ( Z_STR_P ( val ) )		1383987	1					
ANR	1384072	CallExpression	zend_string_tolower ( Z_STR_P ( val ) )		1383987	0					
ANR	1384073	Callee	zend_string_tolower		1383987	0					
ANR	1384074	Identifier	zend_string_tolower		1383987	0					
ANR	1384075	ArgumentList	Z_STR_P ( val )		1383987	1					
ANR	1384076	Argument	Z_STR_P ( val )		1383987	0					
ANR	1384077	CallExpression	Z_STR_P ( val )		1383987	0					
ANR	1384078	Callee	Z_STR_P		1383987	0					
ANR	1384079	Identifier	Z_STR_P		1383987	0					
ANR	1384080	ArgumentList	val		1383987	1					
ANR	1384081	Argument	val		1383987	0					
ANR	1384082	Identifier	val		1383987	0					
ANR	1384083	BreakStatement	break ;	178:3:6110:6115	1383987	14	True				
ANR	1384084	Label	case ZEND_FETCH_R :	179:2:6119:6136	1383987	15	True				
ANR	1384085	Identifier	ZEND_FETCH_R		1383987	0					
ANR	1384086	Label	case ZEND_FETCH_W :	180:2:6140:6157	1383987	16	True				
ANR	1384087	Identifier	ZEND_FETCH_W		1383987	0					
ANR	1384088	Label	case ZEND_FETCH_RW :	181:2:6161:6179	1383987	17	True				
ANR	1384089	Identifier	ZEND_FETCH_RW		1383987	0					
ANR	1384090	Label	case ZEND_FETCH_IS :	182:2:6183:6201	1383987	18	True				
ANR	1384091	Identifier	ZEND_FETCH_IS		1383987	0					
ANR	1384092	Label	case ZEND_FETCH_UNSET :	183:2:6205:6226	1383987	19	True				
ANR	1384093	Identifier	ZEND_FETCH_UNSET		1383987	0					
ANR	1384094	Label	case ZEND_FETCH_FUNC_ARG :	184:2:6230:6254	1383987	20	True				
ANR	1384095	Identifier	ZEND_FETCH_FUNC_ARG		1383987	0					
ANR	1384096	ExpressionStatement	TO_STRING_NOWARN ( val )	185:3:6259:6280	1383987	21	True				
ANR	1384097	CallExpression	TO_STRING_NOWARN ( val )		1383987	0					
ANR	1384098	Callee	TO_STRING_NOWARN		1383987	0					
ANR	1384099	Identifier	TO_STRING_NOWARN		1383987	0					
ANR	1384100	ArgumentList	val		1383987	1					
ANR	1384101	Argument	val		1383987	0					
ANR	1384102	Identifier	val		1383987	0					
ANR	1384103	ExpressionStatement	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"	186:3:6285:6349	1383987	22	True				
ANR	1384104	AssignmentExpression	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"		1383987	0		=			
ANR	1384105	MemberAccess	opline -> op1 . constant		1383987	0					
ANR	1384106	PtrMemberAccess	opline -> op1		1383987	0					
ANR	1384107	Identifier	opline		1383987	0					
ANR	1384108	Identifier	op1		1383987	1					
ANR	1384109	Identifier	constant		1383987	1					
ANR	1384110	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1383987	1					
ANR	1384111	Callee	zend_optimizer_add_literal		1383987	0					
ANR	1384112	Identifier	zend_optimizer_add_literal		1383987	0					
ANR	1384113	ArgumentList	op_array		1383987	1					
ANR	1384114	Argument	op_array		1383987	0					
ANR	1384115	Identifier	op_array		1383987	0					
ANR	1384116	Argument	val		1383987	1					
ANR	1384117	Identifier	val		1383987	0					
ANR	1384118	IfStatement	if ( opline -> extended_value == ZEND_FETCH_STATIC_MEMBER )		1383987	23					
ANR	1384119	Condition	opline -> extended_value == ZEND_FETCH_STATIC_MEMBER	187:7:6358:6407	1383987	0	True				
ANR	1384120	EqualityExpression	opline -> extended_value == ZEND_FETCH_STATIC_MEMBER		1383987	0		==			
ANR	1384121	PtrMemberAccess	opline -> extended_value		1383987	0					
ANR	1384122	Identifier	opline		1383987	0					
ANR	1384123	Identifier	extended_value		1383987	1					
ANR	1384124	Identifier	ZEND_FETCH_STATIC_MEMBER		1383987	1					
ANR	1384125	CompoundStatement		26:59:780:780	1383987	1					
ANR	1384126	ExpressionStatement	"alloc_cache_slots_op1 ( op_array , opline , 2 )"	188:4:6416:6458	1383987	0	True				
ANR	1384127	CallExpression	"alloc_cache_slots_op1 ( op_array , opline , 2 )"		1383987	0					
ANR	1384128	Callee	alloc_cache_slots_op1		1383987	0					
ANR	1384129	Identifier	alloc_cache_slots_op1		1383987	0					
ANR	1384130	ArgumentList	op_array		1383987	1					
ANR	1384131	Argument	op_array		1383987	0					
ANR	1384132	Identifier	op_array		1383987	0					
ANR	1384133	Argument	opline		1383987	1					
ANR	1384134	Identifier	opline		1383987	0					
ANR	1384135	Argument	2		1383987	2					
ANR	1384136	PrimaryExpression	2		1383987	0					
ANR	1384137	BreakStatement	break ;	190:3:6468:6473	1383987	24	True				
ANR	1384138	Label	case ZEND_CONCAT :	191:2:6477:6493	1383987	25	True				
ANR	1384139	Identifier	ZEND_CONCAT		1383987	0					
ANR	1384140	Label	case ZEND_FAST_CONCAT :	192:2:6497:6518	1383987	26	True				
ANR	1384141	Identifier	ZEND_FAST_CONCAT		1383987	0					
ANR	1384142	ExpressionStatement	TO_STRING_NOWARN ( val )	193:3:6523:6544	1383987	27	True				
ANR	1384143	CallExpression	TO_STRING_NOWARN ( val )		1383987	0					
ANR	1384144	Callee	TO_STRING_NOWARN		1383987	0					
ANR	1384145	Identifier	TO_STRING_NOWARN		1383987	0					
ANR	1384146	ArgumentList	val		1383987	1					
ANR	1384147	Argument	val		1383987	0					
ANR	1384148	Identifier	val		1383987	0					
ANR	1384149	Label	default :	195:2:6585:6592	1383987	28	True				
ANR	1384150	Identifier	default		1383987	0					
ANR	1384151	ExpressionStatement	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"	196:3:6597:6661	1383987	29	True				
ANR	1384152	AssignmentExpression	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"		1383987	0		=			
ANR	1384153	MemberAccess	opline -> op1 . constant		1383987	0					
ANR	1384154	PtrMemberAccess	opline -> op1		1383987	0					
ANR	1384155	Identifier	opline		1383987	0					
ANR	1384156	Identifier	op1		1383987	1					
ANR	1384157	Identifier	constant		1383987	1					
ANR	1384158	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1383987	1					
ANR	1384159	Callee	zend_optimizer_add_literal		1383987	0					
ANR	1384160	Identifier	zend_optimizer_add_literal		1383987	0					
ANR	1384161	ArgumentList	op_array		1383987	1					
ANR	1384162	Argument	op_array		1383987	0					
ANR	1384163	Identifier	op_array		1383987	0					
ANR	1384164	Argument	val		1383987	1					
ANR	1384165	Identifier	val		1383987	0					
ANR	1384166	BreakStatement	break ;	197:3:6666:6671	1383987	30	True				
ANR	1384167	ExpressionStatement	ZEND_OP1_TYPE ( opline ) = IS_CONST	200:1:6678:6710	1383987	1	True				
ANR	1384168	AssignmentExpression	ZEND_OP1_TYPE ( opline ) = IS_CONST		1383987	0		=			
ANR	1384169	CallExpression	ZEND_OP1_TYPE ( opline )		1383987	0					
ANR	1384170	Callee	ZEND_OP1_TYPE		1383987	0					
ANR	1384171	Identifier	ZEND_OP1_TYPE		1383987	0					
ANR	1384172	ArgumentList	opline		1383987	1					
ANR	1384173	Argument	opline		1383987	0					
ANR	1384174	Identifier	opline		1383987	0					
ANR	1384175	Identifier	IS_CONST		1383987	1					
ANR	1384176	IfStatement	if ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING )		1383987	2					
ANR	1384177	Condition	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING	201:5:6717:6761	1383987	0	True				
ANR	1384178	EqualityExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING		1383987	0		==			
ANR	1384179	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) )		1383987	0					
ANR	1384180	Callee	Z_TYPE		1383987	0					
ANR	1384181	Identifier	Z_TYPE		1383987	0					
ANR	1384182	ArgumentList	ZEND_OP1_LITERAL ( opline )		1383987	1					
ANR	1384183	Argument	ZEND_OP1_LITERAL ( opline )		1383987	0					
ANR	1384184	CallExpression	ZEND_OP1_LITERAL ( opline )		1383987	0					
ANR	1384185	Callee	ZEND_OP1_LITERAL		1383987	0					
ANR	1384186	Identifier	ZEND_OP1_LITERAL		1383987	0					
ANR	1384187	ArgumentList	opline		1383987	1					
ANR	1384188	Argument	opline		1383987	0					
ANR	1384189	Identifier	opline		1383987	0					
ANR	1384190	Identifier	IS_STRING		1383987	1					
ANR	1384191	CompoundStatement		40:52:1134:1134	1383987	1					
ANR	1384192	ExpressionStatement	zend_string_hash_val ( Z_STR ( ZEND_OP1_LITERAL ( opline ) ) )	202:2:6768:6821	1383987	0	True				
ANR	1384193	CallExpression	zend_string_hash_val ( Z_STR ( ZEND_OP1_LITERAL ( opline ) ) )		1383987	0					
ANR	1384194	Callee	zend_string_hash_val		1383987	0					
ANR	1384195	Identifier	zend_string_hash_val		1383987	0					
ANR	1384196	ArgumentList	Z_STR ( ZEND_OP1_LITERAL ( opline ) )		1383987	1					
ANR	1384197	Argument	Z_STR ( ZEND_OP1_LITERAL ( opline ) )		1383987	0					
ANR	1384198	CallExpression	Z_STR ( ZEND_OP1_LITERAL ( opline ) )		1383987	0					
ANR	1384199	Callee	Z_STR		1383987	0					
ANR	1384200	Identifier	Z_STR		1383987	0					
ANR	1384201	ArgumentList	ZEND_OP1_LITERAL ( opline )		1383987	1					
ANR	1384202	Argument	ZEND_OP1_LITERAL ( opline )		1383987	0					
ANR	1384203	CallExpression	ZEND_OP1_LITERAL ( opline )		1383987	0					
ANR	1384204	Callee	ZEND_OP1_LITERAL		1383987	0					
ANR	1384205	Identifier	ZEND_OP1_LITERAL		1383987	0					
ANR	1384206	ArgumentList	opline		1383987	1					
ANR	1384207	Argument	opline		1383987	0					
ANR	1384208	Identifier	opline		1383987	0					
ANR	1384209	ReturnStatement	return 1 ;	204:1:6827:6835	1383987	3	True				
ANR	1384210	PrimaryExpression	1		1383987	0					
ANR	1384211	ReturnType	int		1383987	1					
ANR	1384212	Identifier	zend_optimizer_update_op1_const		1383987	2					
ANR	1384213	ParameterList	"zend_op_array * op_array , zend_op * opline , zval * val"		1383987	3					
ANR	1384214	Parameter	zend_op_array * op_array	159:36:5489:5511	1383987	0	True				
ANR	1384215	ParameterType	zend_op_array *		1383987	0					
ANR	1384216	Identifier	op_array		1383987	1					
ANR	1384217	Parameter	zend_op * opline	160:36:5550:5570	1383987	1	True				
ANR	1384218	ParameterType	zend_op *		1383987	0					
ANR	1384219	Identifier	opline		1383987	1					
ANR	1384220	Parameter	zval * val	161:36:5609:5626	1383987	2	True				
ANR	1384221	ParameterType	zval *		1383987	0					
ANR	1384222	Identifier	val		1383987	1					
ANR	1384223	CFGEntryNode	ENTRY		1383987		True				
ANR	1384224	CFGExitNode	EXIT		1383987		True				
ANR	1384225	Symbol	val		1383987						
ANR	1384226	Symbol	opline -> op1		1383987						
ANR	1384227	Symbol	IS_CONST		1383987						
ANR	1384228	Symbol	Z_TYPE		1383987						
ANR	1384229	Symbol	Z_STR		1383987						
ANR	1384230	Symbol	zend_string_tolower		1383987						
ANR	1384231	Symbol	opline -> extended_value		1383987						
ANR	1384232	Symbol	ZEND_OP1_TYPE		1383987						
ANR	1384233	Symbol	opline		1383987						
ANR	1384234	Symbol	* opline		1383987						
ANR	1384235	Symbol	opline -> op1 . constant		1383987						
ANR	1384236	Symbol	opline -> opcode		1383987						
ANR	1384237	Symbol	ZEND_OP1_LITERAL		1383987						
ANR	1384238	Symbol	Z_STR_P		1383987						
ANR	1384239	Symbol	IS_STRING		1383987						
ANR	1384240	Symbol	op_array		1383987						
ANR	1384241	Symbol	zend_optimizer_add_literal		1383987						
ANR	1384242	Symbol	ZEND_FETCH_STATIC_MEMBER		1383987						
ANR	1384243	Function	zend_optimizer_update_op2_const	207:0:6840:11753							
ANR	1384244	FunctionDef	"zend_optimizer_update_op2_const (zend_op_array * op_array , zend_op * opline , zval * val)"		1384243	0					
ANR	1384245	CompoundStatement		210:0:7016:11753	1384243	0					
ANR	1384246	SwitchStatement	switch ( opline -> opcode )		1384243	0					
ANR	1384247	Condition	opline -> opcode	211:9:7027:7040	1384243	0	True				
ANR	1384248	PtrMemberAccess	opline -> opcode		1384243	0					
ANR	1384249	Identifier	opline		1384243	0					
ANR	1384250	Identifier	opcode		1384243	1					
ANR	1384251	CompoundStatement		2:25:26:26	1384243	1					
ANR	1384252	Label	case ZEND_ASSIGN_REF :	212:2:7047:7067	1384243	0	True				
ANR	1384253	Identifier	ZEND_ASSIGN_REF		1384243	0					
ANR	1384254	ExpressionStatement	zval_dtor ( val )	213:3:7072:7086	1384243	1	True				
ANR	1384255	CallExpression	zval_dtor ( val )		1384243	0					
ANR	1384256	Callee	zval_dtor		1384243	0					
ANR	1384257	Identifier	zval_dtor		1384243	0					
ANR	1384258	ArgumentList	val		1384243	1					
ANR	1384259	Argument	val		1384243	0					
ANR	1384260	Identifier	val		1384243	0					
ANR	1384261	ReturnStatement	return 0 ;	214:3:7091:7099	1384243	2	True				
ANR	1384262	PrimaryExpression	0		1384243	0					
ANR	1384263	Label	case ZEND_FETCH_R :	215:2:7103:7120	1384243	3	True				
ANR	1384264	Identifier	ZEND_FETCH_R		1384243	0					
ANR	1384265	Label	case ZEND_FETCH_W :	216:2:7124:7141	1384243	4	True				
ANR	1384266	Identifier	ZEND_FETCH_W		1384243	0					
ANR	1384267	Label	case ZEND_FETCH_RW :	217:2:7145:7163	1384243	5	True				
ANR	1384268	Identifier	ZEND_FETCH_RW		1384243	0					
ANR	1384269	Label	case ZEND_FETCH_IS :	218:2:7167:7185	1384243	6	True				
ANR	1384270	Identifier	ZEND_FETCH_IS		1384243	0					
ANR	1384271	Label	case ZEND_FETCH_UNSET :	219:2:7189:7210	1384243	7	True				
ANR	1384272	Identifier	ZEND_FETCH_UNSET		1384243	0					
ANR	1384273	Label	case ZEND_FETCH_FUNC_ARG :	220:2:7214:7238	1384243	8	True				
ANR	1384274	Identifier	ZEND_FETCH_FUNC_ARG		1384243	0					
ANR	1384275	Label	case ZEND_FETCH_CLASS :	221:2:7242:7263	1384243	9	True				
ANR	1384276	Identifier	ZEND_FETCH_CLASS		1384243	0					
ANR	1384277	Label	case ZEND_INIT_FCALL_BY_NAME :	222:2:7267:7295	1384243	10	True				
ANR	1384278	Identifier	ZEND_INIT_FCALL_BY_NAME		1384243	0					
ANR	1384279	Label	case ZEND_UNSET_VAR :	224:2:7338:7357	1384243	11	True				
ANR	1384280	Identifier	ZEND_UNSET_VAR		1384243	0					
ANR	1384281	Label	case ZEND_ISSET_ISEMPTY_VAR :	225:2:7361:7388	1384243	12	True				
ANR	1384282	Identifier	ZEND_ISSET_ISEMPTY_VAR		1384243	0					
ANR	1384283	Label	case ZEND_ADD_INTERFACE :	226:2:7392:7415	1384243	13	True				
ANR	1384284	Identifier	ZEND_ADD_INTERFACE		1384243	0					
ANR	1384285	Label	case ZEND_ADD_TRAIT :	227:2:7419:7438	1384243	14	True				
ANR	1384286	Identifier	ZEND_ADD_TRAIT		1384243	0					
ANR	1384287	Label	case ZEND_INSTANCEOF :	228:2:7442:7462	1384243	15	True				
ANR	1384288	Identifier	ZEND_INSTANCEOF		1384243	0					
ANR	1384289	ExpressionStatement	REQUIRES_STRING ( val )	229:3:7467:7487	1384243	16	True				
ANR	1384290	CallExpression	REQUIRES_STRING ( val )		1384243	0					
ANR	1384291	Callee	REQUIRES_STRING		1384243	0					
ANR	1384292	Identifier	REQUIRES_STRING		1384243	0					
ANR	1384293	ArgumentList	val		1384243	1					
ANR	1384294	Argument	val		1384243	0					
ANR	1384295	Identifier	val		1384243	0					
ANR	1384296	ExpressionStatement	drop_leading_backslash ( val )	230:3:7492:7519	1384243	17	True				
ANR	1384297	CallExpression	drop_leading_backslash ( val )		1384243	0					
ANR	1384298	Callee	drop_leading_backslash		1384243	0					
ANR	1384299	Identifier	drop_leading_backslash		1384243	0					
ANR	1384300	ArgumentList	val		1384243	1					
ANR	1384301	Argument	val		1384243	0					
ANR	1384302	Identifier	val		1384243	0					
ANR	1384303	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	231:3:7524:7588	1384243	18	True				
ANR	1384304	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384305	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384306	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384307	Identifier	opline		1384243	0					
ANR	1384308	Identifier	op2		1384243	1					
ANR	1384309	Identifier	constant		1384243	1					
ANR	1384310	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384311	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384312	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384313	ArgumentList	op_array		1384243	1					
ANR	1384314	Argument	op_array		1384243	0					
ANR	1384315	Identifier	op_array		1384243	0					
ANR	1384316	Argument	val		1384243	1					
ANR	1384317	Identifier	val		1384243	0					
ANR	1384318	ExpressionStatement	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"	232:3:7593:7671	1384243	19	True				
ANR	1384319	CallExpression	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"		1384243	0					
ANR	1384320	Callee	zend_optimizer_add_literal_string		1384243	0					
ANR	1384321	Identifier	zend_optimizer_add_literal_string		1384243	0					
ANR	1384322	ArgumentList	op_array		1384243	1					
ANR	1384323	Argument	op_array		1384243	0					
ANR	1384324	Identifier	op_array		1384243	0					
ANR	1384325	Argument	zend_string_tolower ( Z_STR_P ( val ) )		1384243	1					
ANR	1384326	CallExpression	zend_string_tolower ( Z_STR_P ( val ) )		1384243	0					
ANR	1384327	Callee	zend_string_tolower		1384243	0					
ANR	1384328	Identifier	zend_string_tolower		1384243	0					
ANR	1384329	ArgumentList	Z_STR_P ( val )		1384243	1					
ANR	1384330	Argument	Z_STR_P ( val )		1384243	0					
ANR	1384331	CallExpression	Z_STR_P ( val )		1384243	0					
ANR	1384332	Callee	Z_STR_P		1384243	0					
ANR	1384333	Identifier	Z_STR_P		1384243	0					
ANR	1384334	ArgumentList	val		1384243	1					
ANR	1384335	Argument	val		1384243	0					
ANR	1384336	Identifier	val		1384243	0					
ANR	1384337	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 1 )"	233:3:7676:7718	1384243	20	True				
ANR	1384338	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 1 )"		1384243	0					
ANR	1384339	Callee	alloc_cache_slots_op2		1384243	0					
ANR	1384340	Identifier	alloc_cache_slots_op2		1384243	0					
ANR	1384341	ArgumentList	op_array		1384243	1					
ANR	1384342	Argument	op_array		1384243	0					
ANR	1384343	Identifier	op_array		1384243	0					
ANR	1384344	Argument	opline		1384243	1					
ANR	1384345	Identifier	opline		1384243	0					
ANR	1384346	Argument	1		1384243	2					
ANR	1384347	PrimaryExpression	1		1384243	0					
ANR	1384348	BreakStatement	break ;	234:3:7723:7728	1384243	21	True				
ANR	1384349	Label	case ZEND_INIT_FCALL :	235:2:7732:7752	1384243	22	True				
ANR	1384350	Identifier	ZEND_INIT_FCALL		1384243	0					
ANR	1384351	ExpressionStatement	REQUIRES_STRING ( val )	236:3:7757:7777	1384243	23	True				
ANR	1384352	CallExpression	REQUIRES_STRING ( val )		1384243	0					
ANR	1384353	Callee	REQUIRES_STRING		1384243	0					
ANR	1384354	Identifier	REQUIRES_STRING		1384243	0					
ANR	1384355	ArgumentList	val		1384243	1					
ANR	1384356	Argument	val		1384243	0					
ANR	1384357	Identifier	val		1384243	0					
ANR	1384358	ExpressionStatement	"zend_str_tolower ( Z_STRVAL_P ( val ) , Z_STRLEN_P ( val ) )"	237:3:7782:7832	1384243	24	True				
ANR	1384359	CallExpression	"zend_str_tolower ( Z_STRVAL_P ( val ) , Z_STRLEN_P ( val ) )"		1384243	0					
ANR	1384360	Callee	zend_str_tolower		1384243	0					
ANR	1384361	Identifier	zend_str_tolower		1384243	0					
ANR	1384362	ArgumentList	Z_STRVAL_P ( val )		1384243	1					
ANR	1384363	Argument	Z_STRVAL_P ( val )		1384243	0					
ANR	1384364	CallExpression	Z_STRVAL_P ( val )		1384243	0					
ANR	1384365	Callee	Z_STRVAL_P		1384243	0					
ANR	1384366	Identifier	Z_STRVAL_P		1384243	0					
ANR	1384367	ArgumentList	val		1384243	1					
ANR	1384368	Argument	val		1384243	0					
ANR	1384369	Identifier	val		1384243	0					
ANR	1384370	Argument	Z_STRLEN_P ( val )		1384243	1					
ANR	1384371	CallExpression	Z_STRLEN_P ( val )		1384243	0					
ANR	1384372	Callee	Z_STRLEN_P		1384243	0					
ANR	1384373	Identifier	Z_STRLEN_P		1384243	0					
ANR	1384374	ArgumentList	val		1384243	1					
ANR	1384375	Argument	val		1384243	0					
ANR	1384376	Identifier	val		1384243	0					
ANR	1384377	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	238:3:7837:7901	1384243	25	True				
ANR	1384378	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384379	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384380	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384381	Identifier	opline		1384243	0					
ANR	1384382	Identifier	op2		1384243	1					
ANR	1384383	Identifier	constant		1384243	1					
ANR	1384384	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384385	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384386	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384387	ArgumentList	op_array		1384243	1					
ANR	1384388	Argument	op_array		1384243	0					
ANR	1384389	Identifier	op_array		1384243	0					
ANR	1384390	Argument	val		1384243	1					
ANR	1384391	Identifier	val		1384243	0					
ANR	1384392	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 1 )"	239:3:7906:7948	1384243	26	True				
ANR	1384393	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 1 )"		1384243	0					
ANR	1384394	Callee	alloc_cache_slots_op2		1384243	0					
ANR	1384395	Identifier	alloc_cache_slots_op2		1384243	0					
ANR	1384396	ArgumentList	op_array		1384243	1					
ANR	1384397	Argument	op_array		1384243	0					
ANR	1384398	Identifier	op_array		1384243	0					
ANR	1384399	Argument	opline		1384243	1					
ANR	1384400	Identifier	opline		1384243	0					
ANR	1384401	Argument	1		1384243	2					
ANR	1384402	PrimaryExpression	1		1384243	0					
ANR	1384403	BreakStatement	break ;	240:3:7953:7958	1384243	27	True				
ANR	1384404	Label	case ZEND_INIT_DYNAMIC_CALL :	241:2:7962:7989	1384243	28	True				
ANR	1384405	Identifier	ZEND_INIT_DYNAMIC_CALL		1384243	0					
ANR	1384406	IfStatement	if ( Z_TYPE_P ( val ) == IS_STRING )		1384243	29					
ANR	1384407	Condition	Z_TYPE_P ( val ) == IS_STRING	242:7:7998:8023	1384243	0	True				
ANR	1384408	EqualityExpression	Z_TYPE_P ( val ) == IS_STRING		1384243	0		==			
ANR	1384409	CallExpression	Z_TYPE_P ( val )		1384243	0					
ANR	1384410	Callee	Z_TYPE_P		1384243	0					
ANR	1384411	Identifier	Z_TYPE_P		1384243	0					
ANR	1384412	ArgumentList	val		1384243	1					
ANR	1384413	Argument	val		1384243	0					
ANR	1384414	Identifier	val		1384243	0					
ANR	1384415	Identifier	IS_STRING		1384243	1					
ANR	1384416	CompoundStatement		33:35:1009:1009	1384243	1					
ANR	1384417	IfStatement	"if ( zend_memrchr ( Z_STRVAL_P ( val ) , ':' , Z_STRLEN_P ( val ) ) )"		1384243	0					
ANR	1384418	Condition	"zend_memrchr ( Z_STRVAL_P ( val ) , ':' , Z_STRLEN_P ( val ) )"	243:8:8036:8086	1384243	0	True				
ANR	1384419	CallExpression	"zend_memrchr ( Z_STRVAL_P ( val ) , ':' , Z_STRLEN_P ( val ) )"		1384243	0					
ANR	1384420	Callee	zend_memrchr		1384243	0					
ANR	1384421	Identifier	zend_memrchr		1384243	0					
ANR	1384422	ArgumentList	Z_STRVAL_P ( val )		1384243	1					
ANR	1384423	Argument	Z_STRVAL_P ( val )		1384243	0					
ANR	1384424	CallExpression	Z_STRVAL_P ( val )		1384243	0					
ANR	1384425	Callee	Z_STRVAL_P		1384243	0					
ANR	1384426	Identifier	Z_STRVAL_P		1384243	0					
ANR	1384427	ArgumentList	val		1384243	1					
ANR	1384428	Argument	val		1384243	0					
ANR	1384429	Identifier	val		1384243	0					
ANR	1384430	Argument	':'		1384243	1					
ANR	1384431	PrimaryExpression	':'		1384243	0					
ANR	1384432	Argument	Z_STRLEN_P ( val )		1384243	2					
ANR	1384433	CallExpression	Z_STRLEN_P ( val )		1384243	0					
ANR	1384434	Callee	Z_STRLEN_P		1384243	0					
ANR	1384435	Identifier	Z_STRLEN_P		1384243	0					
ANR	1384436	ArgumentList	val		1384243	1					
ANR	1384437	Argument	val		1384243	0					
ANR	1384438	Identifier	val		1384243	0					
ANR	1384439	CompoundStatement		34:61:1072:1072	1384243	1					
ANR	1384440	ExpressionStatement	zval_dtor ( val )	244:5:8096:8110	1384243	0	True				
ANR	1384441	CallExpression	zval_dtor ( val )		1384243	0					
ANR	1384442	Callee	zval_dtor		1384243	0					
ANR	1384443	Identifier	zval_dtor		1384243	0					
ANR	1384444	ArgumentList	val		1384243	1					
ANR	1384445	Argument	val		1384243	0					
ANR	1384446	Identifier	val		1384243	0					
ANR	1384447	ReturnStatement	return 0 ;	245:5:8117:8125	1384243	1	True				
ANR	1384448	PrimaryExpression	0		1384243	0					
ANR	1384449	ExpressionStatement	opline -> opcode = ZEND_INIT_FCALL_BY_NAME	248:4:8138:8178	1384243	1	True				
ANR	1384450	AssignmentExpression	opline -> opcode = ZEND_INIT_FCALL_BY_NAME		1384243	0		=			
ANR	1384451	PtrMemberAccess	opline -> opcode		1384243	0					
ANR	1384452	Identifier	opline		1384243	0					
ANR	1384453	Identifier	opcode		1384243	1					
ANR	1384454	Identifier	ZEND_INIT_FCALL_BY_NAME		1384243	1					
ANR	1384455	ExpressionStatement	drop_leading_backslash ( val )	249:4:8184:8211	1384243	2	True				
ANR	1384456	CallExpression	drop_leading_backslash ( val )		1384243	0					
ANR	1384457	Callee	drop_leading_backslash		1384243	0					
ANR	1384458	Identifier	drop_leading_backslash		1384243	0					
ANR	1384459	ArgumentList	val		1384243	1					
ANR	1384460	Argument	val		1384243	0					
ANR	1384461	Identifier	val		1384243	0					
ANR	1384462	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	250:4:8217:8281	1384243	3	True				
ANR	1384463	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384464	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384465	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384466	Identifier	opline		1384243	0					
ANR	1384467	Identifier	op2		1384243	1					
ANR	1384468	Identifier	constant		1384243	1					
ANR	1384469	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384470	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384471	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384472	ArgumentList	op_array		1384243	1					
ANR	1384473	Argument	op_array		1384243	0					
ANR	1384474	Identifier	op_array		1384243	0					
ANR	1384475	Argument	val		1384243	1					
ANR	1384476	Identifier	val		1384243	0					
ANR	1384477	ExpressionStatement	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"	251:4:8287:8365	1384243	4	True				
ANR	1384478	CallExpression	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"		1384243	0					
ANR	1384479	Callee	zend_optimizer_add_literal_string		1384243	0					
ANR	1384480	Identifier	zend_optimizer_add_literal_string		1384243	0					
ANR	1384481	ArgumentList	op_array		1384243	1					
ANR	1384482	Argument	op_array		1384243	0					
ANR	1384483	Identifier	op_array		1384243	0					
ANR	1384484	Argument	zend_string_tolower ( Z_STR_P ( val ) )		1384243	1					
ANR	1384485	CallExpression	zend_string_tolower ( Z_STR_P ( val ) )		1384243	0					
ANR	1384486	Callee	zend_string_tolower		1384243	0					
ANR	1384487	Identifier	zend_string_tolower		1384243	0					
ANR	1384488	ArgumentList	Z_STR_P ( val )		1384243	1					
ANR	1384489	Argument	Z_STR_P ( val )		1384243	0					
ANR	1384490	CallExpression	Z_STR_P ( val )		1384243	0					
ANR	1384491	Callee	Z_STR_P		1384243	0					
ANR	1384492	Identifier	Z_STR_P		1384243	0					
ANR	1384493	ArgumentList	val		1384243	1					
ANR	1384494	Argument	val		1384243	0					
ANR	1384495	Identifier	val		1384243	0					
ANR	1384496	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 1 )"	252:4:8371:8413	1384243	5	True				
ANR	1384497	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 1 )"		1384243	0					
ANR	1384498	Callee	alloc_cache_slots_op2		1384243	0					
ANR	1384499	Identifier	alloc_cache_slots_op2		1384243	0					
ANR	1384500	ArgumentList	op_array		1384243	1					
ANR	1384501	Argument	op_array		1384243	0					
ANR	1384502	Identifier	op_array		1384243	0					
ANR	1384503	Argument	opline		1384243	1					
ANR	1384504	Identifier	opline		1384243	0					
ANR	1384505	Argument	1		1384243	2					
ANR	1384506	PrimaryExpression	1		1384243	0					
ANR	1384507	ElseStatement	else		1384243	0					
ANR	1384508	CompoundStatement		44:10:1408:1408	1384243	0					
ANR	1384509	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	254:4:8431:8495	1384243	0	True				
ANR	1384510	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384511	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384512	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384513	Identifier	opline		1384243	0					
ANR	1384514	Identifier	op2		1384243	1					
ANR	1384515	Identifier	constant		1384243	1					
ANR	1384516	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384517	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384518	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384519	ArgumentList	op_array		1384243	1					
ANR	1384520	Argument	op_array		1384243	0					
ANR	1384521	Identifier	op_array		1384243	0					
ANR	1384522	Argument	val		1384243	1					
ANR	1384523	Identifier	val		1384243	0					
ANR	1384524	BreakStatement	break ;	256:3:8505:8510	1384243	30	True				
ANR	1384525	Label	case ZEND_INIT_METHOD_CALL :	257:2:8514:8540	1384243	31	True				
ANR	1384526	Identifier	ZEND_INIT_METHOD_CALL		1384243	0					
ANR	1384527	Label	case ZEND_INIT_STATIC_METHOD_CALL :	258:2:8544:8577	1384243	32	True				
ANR	1384528	Identifier	ZEND_INIT_STATIC_METHOD_CALL		1384243	0					
ANR	1384529	ExpressionStatement	REQUIRES_STRING ( val )	259:3:8582:8602	1384243	33	True				
ANR	1384530	CallExpression	REQUIRES_STRING ( val )		1384243	0					
ANR	1384531	Callee	REQUIRES_STRING		1384243	0					
ANR	1384532	Identifier	REQUIRES_STRING		1384243	0					
ANR	1384533	ArgumentList	val		1384243	1					
ANR	1384534	Argument	val		1384243	0					
ANR	1384535	Identifier	val		1384243	0					
ANR	1384536	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	260:3:8607:8671	1384243	34	True				
ANR	1384537	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384538	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384539	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384540	Identifier	opline		1384243	0					
ANR	1384541	Identifier	op2		1384243	1					
ANR	1384542	Identifier	constant		1384243	1					
ANR	1384543	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384544	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384545	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384546	ArgumentList	op_array		1384243	1					
ANR	1384547	Argument	op_array		1384243	0					
ANR	1384548	Identifier	op_array		1384243	0					
ANR	1384549	Argument	val		1384243	1					
ANR	1384550	Identifier	val		1384243	0					
ANR	1384551	ExpressionStatement	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"	261:3:8676:8754	1384243	35	True				
ANR	1384552	CallExpression	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"		1384243	0					
ANR	1384553	Callee	zend_optimizer_add_literal_string		1384243	0					
ANR	1384554	Identifier	zend_optimizer_add_literal_string		1384243	0					
ANR	1384555	ArgumentList	op_array		1384243	1					
ANR	1384556	Argument	op_array		1384243	0					
ANR	1384557	Identifier	op_array		1384243	0					
ANR	1384558	Argument	zend_string_tolower ( Z_STR_P ( val ) )		1384243	1					
ANR	1384559	CallExpression	zend_string_tolower ( Z_STR_P ( val ) )		1384243	0					
ANR	1384560	Callee	zend_string_tolower		1384243	0					
ANR	1384561	Identifier	zend_string_tolower		1384243	0					
ANR	1384562	ArgumentList	Z_STR_P ( val )		1384243	1					
ANR	1384563	Argument	Z_STR_P ( val )		1384243	0					
ANR	1384564	CallExpression	Z_STR_P ( val )		1384243	0					
ANR	1384565	Callee	Z_STR_P		1384243	0					
ANR	1384566	Identifier	Z_STR_P		1384243	0					
ANR	1384567	ArgumentList	val		1384243	1					
ANR	1384568	Argument	val		1384243	0					
ANR	1384569	Identifier	val		1384243	0					
ANR	1384570	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 2 )"	262:3:8759:8801	1384243	36	True				
ANR	1384571	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 2 )"		1384243	0					
ANR	1384572	Callee	alloc_cache_slots_op2		1384243	0					
ANR	1384573	Identifier	alloc_cache_slots_op2		1384243	0					
ANR	1384574	ArgumentList	op_array		1384243	1					
ANR	1384575	Argument	op_array		1384243	0					
ANR	1384576	Identifier	op_array		1384243	0					
ANR	1384577	Argument	opline		1384243	1					
ANR	1384578	Identifier	opline		1384243	0					
ANR	1384579	Argument	2		1384243	2					
ANR	1384580	PrimaryExpression	2		1384243	0					
ANR	1384581	BreakStatement	break ;	263:3:8806:8811	1384243	37	True				
ANR	1384582	Label	case ZEND_ASSIGN_OBJ :	265:2:8847:8867	1384243	38	True				
ANR	1384583	Identifier	ZEND_ASSIGN_OBJ		1384243	0					
ANR	1384584	Label	case ZEND_FETCH_OBJ_R :	266:2:8871:8892	1384243	39	True				
ANR	1384585	Identifier	ZEND_FETCH_OBJ_R		1384243	0					
ANR	1384586	Label	case ZEND_FETCH_OBJ_W :	267:2:8896:8917	1384243	40	True				
ANR	1384587	Identifier	ZEND_FETCH_OBJ_W		1384243	0					
ANR	1384588	Label	case ZEND_FETCH_OBJ_RW :	268:2:8921:8943	1384243	41	True				
ANR	1384589	Identifier	ZEND_FETCH_OBJ_RW		1384243	0					
ANR	1384590	Label	case ZEND_FETCH_OBJ_IS :	269:2:8947:8969	1384243	42	True				
ANR	1384591	Identifier	ZEND_FETCH_OBJ_IS		1384243	0					
ANR	1384592	Label	case ZEND_FETCH_OBJ_UNSET :	270:2:8973:8998	1384243	43	True				
ANR	1384593	Identifier	ZEND_FETCH_OBJ_UNSET		1384243	0					
ANR	1384594	Label	case ZEND_FETCH_OBJ_FUNC_ARG :	271:2:9002:9030	1384243	44	True				
ANR	1384595	Identifier	ZEND_FETCH_OBJ_FUNC_ARG		1384243	0					
ANR	1384596	Label	case ZEND_UNSET_OBJ :	272:2:9034:9053	1384243	45	True				
ANR	1384597	Identifier	ZEND_UNSET_OBJ		1384243	0					
ANR	1384598	Label	case ZEND_PRE_INC_OBJ :	273:2:9057:9078	1384243	46	True				
ANR	1384599	Identifier	ZEND_PRE_INC_OBJ		1384243	0					
ANR	1384600	Label	case ZEND_PRE_DEC_OBJ :	274:2:9082:9103	1384243	47	True				
ANR	1384601	Identifier	ZEND_PRE_DEC_OBJ		1384243	0					
ANR	1384602	Label	case ZEND_POST_INC_OBJ :	275:2:9107:9129	1384243	48	True				
ANR	1384603	Identifier	ZEND_POST_INC_OBJ		1384243	0					
ANR	1384604	Label	case ZEND_POST_DEC_OBJ :	276:2:9133:9155	1384243	49	True				
ANR	1384605	Identifier	ZEND_POST_DEC_OBJ		1384243	0					
ANR	1384606	Label	case ZEND_ISSET_ISEMPTY_PROP_OBJ :	277:2:9159:9191	1384243	50	True				
ANR	1384607	Identifier	ZEND_ISSET_ISEMPTY_PROP_OBJ		1384243	0					
ANR	1384608	ExpressionStatement	TO_STRING_NOWARN ( val )	278:3:9196:9217	1384243	51	True				
ANR	1384609	CallExpression	TO_STRING_NOWARN ( val )		1384243	0					
ANR	1384610	Callee	TO_STRING_NOWARN		1384243	0					
ANR	1384611	Identifier	TO_STRING_NOWARN		1384243	0					
ANR	1384612	ArgumentList	val		1384243	1					
ANR	1384613	Argument	val		1384243	0					
ANR	1384614	Identifier	val		1384243	0					
ANR	1384615	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	279:3:9222:9286	1384243	52	True				
ANR	1384616	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384617	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384618	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384619	Identifier	opline		1384243	0					
ANR	1384620	Identifier	op2		1384243	1					
ANR	1384621	Identifier	constant		1384243	1					
ANR	1384622	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384623	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384624	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384625	ArgumentList	op_array		1384243	1					
ANR	1384626	Argument	op_array		1384243	0					
ANR	1384627	Identifier	op_array		1384243	0					
ANR	1384628	Argument	val		1384243	1					
ANR	1384629	Identifier	val		1384243	0					
ANR	1384630	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 2 )"	280:3:9291:9333	1384243	53	True				
ANR	1384631	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 2 )"		1384243	0					
ANR	1384632	Callee	alloc_cache_slots_op2		1384243	0					
ANR	1384633	Identifier	alloc_cache_slots_op2		1384243	0					
ANR	1384634	ArgumentList	op_array		1384243	1					
ANR	1384635	Argument	op_array		1384243	0					
ANR	1384636	Identifier	op_array		1384243	0					
ANR	1384637	Argument	opline		1384243	1					
ANR	1384638	Identifier	opline		1384243	0					
ANR	1384639	Argument	2		1384243	2					
ANR	1384640	PrimaryExpression	2		1384243	0					
ANR	1384641	BreakStatement	break ;	281:3:9338:9343	1384243	54	True				
ANR	1384642	Label	case ZEND_ASSIGN_ADD :	282:2:9347:9367	1384243	55	True				
ANR	1384643	Identifier	ZEND_ASSIGN_ADD		1384243	0					
ANR	1384644	Label	case ZEND_ASSIGN_SUB :	283:2:9371:9391	1384243	56	True				
ANR	1384645	Identifier	ZEND_ASSIGN_SUB		1384243	0					
ANR	1384646	Label	case ZEND_ASSIGN_MUL :	284:2:9395:9415	1384243	57	True				
ANR	1384647	Identifier	ZEND_ASSIGN_MUL		1384243	0					
ANR	1384648	Label	case ZEND_ASSIGN_DIV :	285:2:9419:9439	1384243	58	True				
ANR	1384649	Identifier	ZEND_ASSIGN_DIV		1384243	0					
ANR	1384650	Label	case ZEND_ASSIGN_POW :	286:2:9443:9463	1384243	59	True				
ANR	1384651	Identifier	ZEND_ASSIGN_POW		1384243	0					
ANR	1384652	Label	case ZEND_ASSIGN_MOD :	287:2:9467:9487	1384243	60	True				
ANR	1384653	Identifier	ZEND_ASSIGN_MOD		1384243	0					
ANR	1384654	Label	case ZEND_ASSIGN_SL :	288:2:9491:9510	1384243	61	True				
ANR	1384655	Identifier	ZEND_ASSIGN_SL		1384243	0					
ANR	1384656	Label	case ZEND_ASSIGN_SR :	289:2:9514:9533	1384243	62	True				
ANR	1384657	Identifier	ZEND_ASSIGN_SR		1384243	0					
ANR	1384658	Label	case ZEND_ASSIGN_CONCAT :	290:2:9537:9560	1384243	63	True				
ANR	1384659	Identifier	ZEND_ASSIGN_CONCAT		1384243	0					
ANR	1384660	Label	case ZEND_ASSIGN_BW_OR :	291:2:9564:9586	1384243	64	True				
ANR	1384661	Identifier	ZEND_ASSIGN_BW_OR		1384243	0					
ANR	1384662	Label	case ZEND_ASSIGN_BW_AND :	292:2:9590:9613	1384243	65	True				
ANR	1384663	Identifier	ZEND_ASSIGN_BW_AND		1384243	0					
ANR	1384664	Label	case ZEND_ASSIGN_BW_XOR :	293:2:9617:9640	1384243	66	True				
ANR	1384665	Identifier	ZEND_ASSIGN_BW_XOR		1384243	0					
ANR	1384666	IfStatement	if ( opline -> extended_value == ZEND_ASSIGN_OBJ )		1384243	67					
ANR	1384667	Condition	opline -> extended_value == ZEND_ASSIGN_OBJ	294:7:9649:9689	1384243	0	True				
ANR	1384668	EqualityExpression	opline -> extended_value == ZEND_ASSIGN_OBJ		1384243	0		==			
ANR	1384669	PtrMemberAccess	opline -> extended_value		1384243	0					
ANR	1384670	Identifier	opline		1384243	0					
ANR	1384671	Identifier	extended_value		1384243	1					
ANR	1384672	Identifier	ZEND_ASSIGN_OBJ		1384243	1					
ANR	1384673	CompoundStatement		85:50:2675:2675	1384243	1					
ANR	1384674	ExpressionStatement	TO_STRING_NOWARN ( val )	295:4:9698:9719	1384243	0	True				
ANR	1384675	CallExpression	TO_STRING_NOWARN ( val )		1384243	0					
ANR	1384676	Callee	TO_STRING_NOWARN		1384243	0					
ANR	1384677	Identifier	TO_STRING_NOWARN		1384243	0					
ANR	1384678	ArgumentList	val		1384243	1					
ANR	1384679	Argument	val		1384243	0					
ANR	1384680	Identifier	val		1384243	0					
ANR	1384681	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	296:4:9725:9789	1384243	1	True				
ANR	1384682	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384683	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384684	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384685	Identifier	opline		1384243	0					
ANR	1384686	Identifier	op2		1384243	1					
ANR	1384687	Identifier	constant		1384243	1					
ANR	1384688	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384689	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384690	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384691	ArgumentList	op_array		1384243	1					
ANR	1384692	Argument	op_array		1384243	0					
ANR	1384693	Identifier	op_array		1384243	0					
ANR	1384694	Argument	val		1384243	1					
ANR	1384695	Identifier	val		1384243	0					
ANR	1384696	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 2 )"	297:4:9795:9837	1384243	2	True				
ANR	1384697	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 2 )"		1384243	0					
ANR	1384698	Callee	alloc_cache_slots_op2		1384243	0					
ANR	1384699	Identifier	alloc_cache_slots_op2		1384243	0					
ANR	1384700	ArgumentList	op_array		1384243	1					
ANR	1384701	Argument	op_array		1384243	0					
ANR	1384702	Identifier	op_array		1384243	0					
ANR	1384703	Argument	opline		1384243	1					
ANR	1384704	Identifier	opline		1384243	0					
ANR	1384705	Argument	2		1384243	2					
ANR	1384706	PrimaryExpression	2		1384243	0					
ANR	1384707	ElseStatement	else		1384243	0					
ANR	1384708	CompoundStatement		89:10:2832:2832	1384243	0					
ANR	1384709	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	299:4:9855:9919	1384243	0	True				
ANR	1384710	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384711	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384712	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384713	Identifier	opline		1384243	0					
ANR	1384714	Identifier	op2		1384243	1					
ANR	1384715	Identifier	constant		1384243	1					
ANR	1384716	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384717	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384718	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384719	ArgumentList	op_array		1384243	1					
ANR	1384720	Argument	op_array		1384243	0					
ANR	1384721	Identifier	op_array		1384243	0					
ANR	1384722	Argument	val		1384243	1					
ANR	1384723	Identifier	val		1384243	0					
ANR	1384724	BreakStatement	break ;	301:3:9929:9934	1384243	68	True				
ANR	1384725	Label	case ZEND_OP_DATA :	302:2:9938:9955	1384243	69	True				
ANR	1384726	Identifier	ZEND_OP_DATA		1384243	0					
ANR	1384727	IfStatement	if ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIM && ( ( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM || ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR ) ) )		1384243	70					
ANR	1384728	Condition	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIM && ( ( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM || ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR ) )	303:7:9964:10618	1384243	0	True				
ANR	1384729	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIM && ( ( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM || ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR ) )		1384243	0		&&			
ANR	1384730	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIM		1384243	0		!=			
ANR	1384731	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384732	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384733	Identifier	opline		1384243	0					
ANR	1384734	PrimaryExpression	1		1384243	1					
ANR	1384735	Identifier	opcode		1384243	1					
ANR	1384736	Identifier	ZEND_ASSIGN_DIM		1384243	1					
ANR	1384737	OrExpression	( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM || ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR )		1384243	1		||			
ANR	1384738	EqualityExpression	( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM		1384243	0		!=			
ANR	1384739	PtrMemberAccess	( opline - 1 ) -> extended_value		1384243	0					
ANR	1384740	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384741	Identifier	opline		1384243	0					
ANR	1384742	PrimaryExpression	1		1384243	1					
ANR	1384743	Identifier	extended_value		1384243	1					
ANR	1384744	Identifier	ZEND_ASSIGN_DIM		1384243	1					
ANR	1384745	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384746	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD		1384243	0		!=			
ANR	1384747	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384748	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384749	Identifier	opline		1384243	0					
ANR	1384750	PrimaryExpression	1		1384243	1					
ANR	1384751	Identifier	opcode		1384243	1					
ANR	1384752	Identifier	ZEND_ASSIGN_ADD		1384243	1					
ANR	1384753	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384754	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB		1384243	0		!=			
ANR	1384755	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384756	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384757	Identifier	opline		1384243	0					
ANR	1384758	PrimaryExpression	1		1384243	1					
ANR	1384759	Identifier	opcode		1384243	1					
ANR	1384760	Identifier	ZEND_ASSIGN_SUB		1384243	1					
ANR	1384761	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384762	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL		1384243	0		!=			
ANR	1384763	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384764	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384765	Identifier	opline		1384243	0					
ANR	1384766	PrimaryExpression	1		1384243	1					
ANR	1384767	Identifier	opcode		1384243	1					
ANR	1384768	Identifier	ZEND_ASSIGN_MUL		1384243	1					
ANR	1384769	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384770	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV		1384243	0		!=			
ANR	1384771	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384772	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384773	Identifier	opline		1384243	0					
ANR	1384774	PrimaryExpression	1		1384243	1					
ANR	1384775	Identifier	opcode		1384243	1					
ANR	1384776	Identifier	ZEND_ASSIGN_DIV		1384243	1					
ANR	1384777	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384778	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_POW		1384243	0		!=			
ANR	1384779	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384780	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384781	Identifier	opline		1384243	0					
ANR	1384782	PrimaryExpression	1		1384243	1					
ANR	1384783	Identifier	opcode		1384243	1					
ANR	1384784	Identifier	ZEND_ASSIGN_POW		1384243	1					
ANR	1384785	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384786	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD		1384243	0		!=			
ANR	1384787	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384788	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384789	Identifier	opline		1384243	0					
ANR	1384790	PrimaryExpression	1		1384243	1					
ANR	1384791	Identifier	opcode		1384243	1					
ANR	1384792	Identifier	ZEND_ASSIGN_MOD		1384243	1					
ANR	1384793	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384794	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SL		1384243	0		!=			
ANR	1384795	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384796	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384797	Identifier	opline		1384243	0					
ANR	1384798	PrimaryExpression	1		1384243	1					
ANR	1384799	Identifier	opcode		1384243	1					
ANR	1384800	Identifier	ZEND_ASSIGN_SL		1384243	1					
ANR	1384801	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384802	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SR		1384243	0		!=			
ANR	1384803	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384804	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384805	Identifier	opline		1384243	0					
ANR	1384806	PrimaryExpression	1		1384243	1					
ANR	1384807	Identifier	opcode		1384243	1					
ANR	1384808	Identifier	ZEND_ASSIGN_SR		1384243	1					
ANR	1384809	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384810	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT		1384243	0		!=			
ANR	1384811	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384812	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384813	Identifier	opline		1384243	0					
ANR	1384814	PrimaryExpression	1		1384243	1					
ANR	1384815	Identifier	opcode		1384243	1					
ANR	1384816	Identifier	ZEND_ASSIGN_CONCAT		1384243	1					
ANR	1384817	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384818	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR		1384243	0		!=			
ANR	1384819	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384820	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384821	Identifier	opline		1384243	0					
ANR	1384822	PrimaryExpression	1		1384243	1					
ANR	1384823	Identifier	opcode		1384243	1					
ANR	1384824	Identifier	ZEND_ASSIGN_BW_OR		1384243	1					
ANR	1384825	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		&&			
ANR	1384826	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND		1384243	0		!=			
ANR	1384827	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384828	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384829	Identifier	opline		1384243	0					
ANR	1384830	PrimaryExpression	1		1384243	1					
ANR	1384831	Identifier	opcode		1384243	1					
ANR	1384832	Identifier	ZEND_ASSIGN_BW_AND		1384243	1					
ANR	1384833	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		1384243	1		!=			
ANR	1384834	PtrMemberAccess	( opline - 1 ) -> opcode		1384243	0					
ANR	1384835	AdditiveExpression	opline - 1		1384243	0		-			
ANR	1384836	Identifier	opline		1384243	0					
ANR	1384837	PrimaryExpression	1		1384243	1					
ANR	1384838	Identifier	opcode		1384243	1					
ANR	1384839	Identifier	ZEND_ASSIGN_BW_XOR		1384243	1					
ANR	1384840	CompoundStatement		108:5:3608:3608	1384243	1					
ANR	1384841	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	318:4:10631:10695	1384243	0	True				
ANR	1384842	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384843	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384844	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384845	Identifier	opline		1384243	0					
ANR	1384846	Identifier	op2		1384243	1					
ANR	1384847	Identifier	constant		1384243	1					
ANR	1384848	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384849	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384850	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384851	ArgumentList	op_array		1384243	1					
ANR	1384852	Argument	op_array		1384243	0					
ANR	1384853	Identifier	op_array		1384243	0					
ANR	1384854	Argument	val		1384243	1					
ANR	1384855	Identifier	val		1384243	0					
ANR	1384856	BreakStatement	break ;	319:4:10701:10706	1384243	1	True				
ANR	1384857	Label	case ZEND_ISSET_ISEMPTY_DIM_OBJ :	322:2:10752:10783	1384243	71	True				
ANR	1384858	Identifier	ZEND_ISSET_ISEMPTY_DIM_OBJ		1384243	0					
ANR	1384859	Label	case ZEND_ADD_ARRAY_ELEMENT :	323:2:10787:10814	1384243	72	True				
ANR	1384860	Identifier	ZEND_ADD_ARRAY_ELEMENT		1384243	0					
ANR	1384861	Label	case ZEND_INIT_ARRAY :	324:2:10818:10838	1384243	73	True				
ANR	1384862	Identifier	ZEND_INIT_ARRAY		1384243	0					
ANR	1384863	Label	case ZEND_ASSIGN_DIM :	325:2:10842:10862	1384243	74	True				
ANR	1384864	Identifier	ZEND_ASSIGN_DIM		1384243	0					
ANR	1384865	Label	case ZEND_UNSET_DIM :	326:2:10866:10885	1384243	75	True				
ANR	1384866	Identifier	ZEND_UNSET_DIM		1384243	0					
ANR	1384867	Label	case ZEND_FETCH_DIM_R :	327:2:10889:10910	1384243	76	True				
ANR	1384868	Identifier	ZEND_FETCH_DIM_R		1384243	0					
ANR	1384869	Label	case ZEND_FETCH_DIM_W :	328:2:10914:10935	1384243	77	True				
ANR	1384870	Identifier	ZEND_FETCH_DIM_W		1384243	0					
ANR	1384871	Label	case ZEND_FETCH_DIM_RW :	329:2:10939:10961	1384243	78	True				
ANR	1384872	Identifier	ZEND_FETCH_DIM_RW		1384243	0					
ANR	1384873	Label	case ZEND_FETCH_DIM_IS :	330:2:10965:10987	1384243	79	True				
ANR	1384874	Identifier	ZEND_FETCH_DIM_IS		1384243	0					
ANR	1384875	Label	case ZEND_FETCH_DIM_FUNC_ARG :	331:2:10991:11019	1384243	80	True				
ANR	1384876	Identifier	ZEND_FETCH_DIM_FUNC_ARG		1384243	0					
ANR	1384877	Label	case ZEND_FETCH_DIM_UNSET :	332:2:11023:11048	1384243	81	True				
ANR	1384878	Identifier	ZEND_FETCH_DIM_UNSET		1384243	0					
ANR	1384879	Label	case ZEND_FETCH_LIST :	333:2:11052:11072	1384243	82	True				
ANR	1384880	Identifier	ZEND_FETCH_LIST		1384243	0					
ANR	1384881	IfStatement	if ( Z_TYPE_P ( val ) == IS_STRING )		1384243	83					
ANR	1384882	Condition	Z_TYPE_P ( val ) == IS_STRING	334:7:11081:11106	1384243	0	True				
ANR	1384883	EqualityExpression	Z_TYPE_P ( val ) == IS_STRING		1384243	0		==			
ANR	1384884	CallExpression	Z_TYPE_P ( val )		1384243	0					
ANR	1384885	Callee	Z_TYPE_P		1384243	0					
ANR	1384886	Identifier	Z_TYPE_P		1384243	0					
ANR	1384887	ArgumentList	val		1384243	1					
ANR	1384888	Argument	val		1384243	0					
ANR	1384889	Identifier	val		1384243	0					
ANR	1384890	Identifier	IS_STRING		1384243	1					
ANR	1384891	CompoundStatement		126:4:4098:4114	1384243	1					
ANR	1384892	IdentifierDeclStatement	zend_ulong index ;	335:4:11115:11131	1384243	0	True				
ANR	1384893	IdentifierDecl	index		1384243	0					
ANR	1384894	IdentifierDeclType	zend_ulong		1384243	0					
ANR	1384895	Identifier	index		1384243	1					
ANR	1384896	IfStatement	"if ( ZEND_HANDLE_NUMERIC ( Z_STR_P ( val ) , index ) )"		1384243	1					
ANR	1384897	Condition	"ZEND_HANDLE_NUMERIC ( Z_STR_P ( val ) , index )"	336:8:11141:11180	1384243	0	True				
ANR	1384898	CallExpression	"ZEND_HANDLE_NUMERIC ( Z_STR_P ( val ) , index )"		1384243	0					
ANR	1384899	Callee	ZEND_HANDLE_NUMERIC		1384243	0					
ANR	1384900	Identifier	ZEND_HANDLE_NUMERIC		1384243	0					
ANR	1384901	ArgumentList	Z_STR_P ( val )		1384243	1					
ANR	1384902	Argument	Z_STR_P ( val )		1384243	0					
ANR	1384903	CallExpression	Z_STR_P ( val )		1384243	0					
ANR	1384904	Callee	Z_STR_P		1384243	0					
ANR	1384905	Identifier	Z_STR_P		1384243	0					
ANR	1384906	ArgumentList	val		1384243	1					
ANR	1384907	Argument	val		1384243	0					
ANR	1384908	Identifier	val		1384243	0					
ANR	1384909	Argument	index		1384243	1					
ANR	1384910	Identifier	index		1384243	0					
ANR	1384911	CompoundStatement		127:50:4166:4166	1384243	1					
ANR	1384912	ExpressionStatement	zval_dtor ( val )	337:5:11190:11204	1384243	0	True				
ANR	1384913	CallExpression	zval_dtor ( val )		1384243	0					
ANR	1384914	Callee	zval_dtor		1384243	0					
ANR	1384915	Identifier	zval_dtor		1384243	0					
ANR	1384916	ArgumentList	val		1384243	1					
ANR	1384917	Argument	val		1384243	0					
ANR	1384918	Identifier	val		1384243	0					
ANR	1384919	ExpressionStatement	"ZVAL_LONG ( val , index )"	338:5:11211:11232	1384243	1	True				
ANR	1384920	CallExpression	"ZVAL_LONG ( val , index )"		1384243	0					
ANR	1384921	Callee	ZVAL_LONG		1384243	0					
ANR	1384922	Identifier	ZVAL_LONG		1384243	0					
ANR	1384923	ArgumentList	val		1384243	1					
ANR	1384924	Argument	val		1384243	0					
ANR	1384925	Identifier	val		1384243	0					
ANR	1384926	Argument	index		1384243	1					
ANR	1384927	Identifier	index		1384243	0					
ANR	1384928	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	341:3:11248:11312	1384243	84	True				
ANR	1384929	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384930	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384931	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384932	Identifier	opline		1384243	0					
ANR	1384933	Identifier	op2		1384243	1					
ANR	1384934	Identifier	constant		1384243	1					
ANR	1384935	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384936	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384937	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384938	ArgumentList	op_array		1384243	1					
ANR	1384939	Argument	op_array		1384243	0					
ANR	1384940	Identifier	op_array		1384243	0					
ANR	1384941	Argument	val		1384243	1					
ANR	1384942	Identifier	val		1384243	0					
ANR	1384943	BreakStatement	break ;	342:3:11317:11322	1384243	85	True				
ANR	1384944	Label	case ZEND_ROPE_INIT :	343:2:11326:11345	1384243	86	True				
ANR	1384945	Identifier	ZEND_ROPE_INIT		1384243	0					
ANR	1384946	Label	case ZEND_ROPE_ADD :	344:2:11349:11367	1384243	87	True				
ANR	1384947	Identifier	ZEND_ROPE_ADD		1384243	0					
ANR	1384948	Label	case ZEND_ROPE_END :	345:2:11371:11389	1384243	88	True				
ANR	1384949	Identifier	ZEND_ROPE_END		1384243	0					
ANR	1384950	Label	case ZEND_CONCAT :	346:2:11393:11409	1384243	89	True				
ANR	1384951	Identifier	ZEND_CONCAT		1384243	0					
ANR	1384952	Label	case ZEND_FAST_CONCAT :	347:2:11413:11434	1384243	90	True				
ANR	1384953	Identifier	ZEND_FAST_CONCAT		1384243	0					
ANR	1384954	ExpressionStatement	TO_STRING_NOWARN ( val )	348:3:11439:11460	1384243	91	True				
ANR	1384955	CallExpression	TO_STRING_NOWARN ( val )		1384243	0					
ANR	1384956	Callee	TO_STRING_NOWARN		1384243	0					
ANR	1384957	Identifier	TO_STRING_NOWARN		1384243	0					
ANR	1384958	ArgumentList	val		1384243	1					
ANR	1384959	Argument	val		1384243	0					
ANR	1384960	Identifier	val		1384243	0					
ANR	1384961	Label	default :	350:2:11501:11508	1384243	92	True				
ANR	1384962	Identifier	default		1384243	0					
ANR	1384963	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	351:3:11513:11577	1384243	93	True				
ANR	1384964	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		1384243	0		=			
ANR	1384965	MemberAccess	opline -> op2 . constant		1384243	0					
ANR	1384966	PtrMemberAccess	opline -> op2		1384243	0					
ANR	1384967	Identifier	opline		1384243	0					
ANR	1384968	Identifier	op2		1384243	1					
ANR	1384969	Identifier	constant		1384243	1					
ANR	1384970	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		1384243	1					
ANR	1384971	Callee	zend_optimizer_add_literal		1384243	0					
ANR	1384972	Identifier	zend_optimizer_add_literal		1384243	0					
ANR	1384973	ArgumentList	op_array		1384243	1					
ANR	1384974	Argument	op_array		1384243	0					
ANR	1384975	Identifier	op_array		1384243	0					
ANR	1384976	Argument	val		1384243	1					
ANR	1384977	Identifier	val		1384243	0					
ANR	1384978	BreakStatement	break ;	352:3:11582:11587	1384243	94	True				
ANR	1384979	ExpressionStatement	ZEND_OP2_TYPE ( opline ) = IS_CONST	355:1:11594:11626	1384243	1	True				
ANR	1384980	AssignmentExpression	ZEND_OP2_TYPE ( opline ) = IS_CONST		1384243	0		=			
ANR	1384981	CallExpression	ZEND_OP2_TYPE ( opline )		1384243	0					
ANR	1384982	Callee	ZEND_OP2_TYPE		1384243	0					
ANR	1384983	Identifier	ZEND_OP2_TYPE		1384243	0					
ANR	1384984	ArgumentList	opline		1384243	1					
ANR	1384985	Argument	opline		1384243	0					
ANR	1384986	Identifier	opline		1384243	0					
ANR	1384987	Identifier	IS_CONST		1384243	1					
ANR	1384988	IfStatement	if ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING )		1384243	2					
ANR	1384989	Condition	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING	356:5:11633:11677	1384243	0	True				
ANR	1384990	EqualityExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING		1384243	0		==			
ANR	1384991	CallExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) )		1384243	0					
ANR	1384992	Callee	Z_TYPE		1384243	0					
ANR	1384993	Identifier	Z_TYPE		1384243	0					
ANR	1384994	ArgumentList	ZEND_OP2_LITERAL ( opline )		1384243	1					
ANR	1384995	Argument	ZEND_OP2_LITERAL ( opline )		1384243	0					
ANR	1384996	CallExpression	ZEND_OP2_LITERAL ( opline )		1384243	0					
ANR	1384997	Callee	ZEND_OP2_LITERAL		1384243	0					
ANR	1384998	Identifier	ZEND_OP2_LITERAL		1384243	0					
ANR	1384999	ArgumentList	opline		1384243	1					
ANR	1385000	Argument	opline		1384243	0					
ANR	1385001	Identifier	opline		1384243	0					
ANR	1385002	Identifier	IS_STRING		1384243	1					
ANR	1385003	CompoundStatement		147:52:4663:4663	1384243	1					
ANR	1385004	ExpressionStatement	zend_string_hash_val ( Z_STR ( ZEND_OP2_LITERAL ( opline ) ) )	357:2:11684:11737	1384243	0	True				
ANR	1385005	CallExpression	zend_string_hash_val ( Z_STR ( ZEND_OP2_LITERAL ( opline ) ) )		1384243	0					
ANR	1385006	Callee	zend_string_hash_val		1384243	0					
ANR	1385007	Identifier	zend_string_hash_val		1384243	0					
ANR	1385008	ArgumentList	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		1384243	1					
ANR	1385009	Argument	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		1384243	0					
ANR	1385010	CallExpression	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		1384243	0					
ANR	1385011	Callee	Z_STR		1384243	0					
ANR	1385012	Identifier	Z_STR		1384243	0					
ANR	1385013	ArgumentList	ZEND_OP2_LITERAL ( opline )		1384243	1					
ANR	1385014	Argument	ZEND_OP2_LITERAL ( opline )		1384243	0					
ANR	1385015	CallExpression	ZEND_OP2_LITERAL ( opline )		1384243	0					
ANR	1385016	Callee	ZEND_OP2_LITERAL		1384243	0					
ANR	1385017	Identifier	ZEND_OP2_LITERAL		1384243	0					
ANR	1385018	ArgumentList	opline		1384243	1					
ANR	1385019	Argument	opline		1384243	0					
ANR	1385020	Identifier	opline		1384243	0					
ANR	1385021	ReturnStatement	return 1 ;	359:1:11743:11751	1384243	3	True				
ANR	1385022	PrimaryExpression	1		1384243	0					
ANR	1385023	ReturnType	int		1384243	1					
ANR	1385024	Identifier	zend_optimizer_update_op2_const		1384243	2					
ANR	1385025	ParameterList	"zend_op_array * op_array , zend_op * opline , zval * val"		1384243	3					
ANR	1385026	Parameter	zend_op_array * op_array	207:36:6876:6898	1384243	0	True				
ANR	1385027	ParameterType	zend_op_array *		1384243	0					
ANR	1385028	Identifier	op_array		1384243	1					
ANR	1385029	Parameter	zend_op * opline	208:36:6937:6957	1384243	1	True				
ANR	1385030	ParameterType	zend_op *		1384243	0					
ANR	1385031	Identifier	opline		1384243	1					
ANR	1385032	Parameter	zval * val	209:36:6996:7013	1384243	2	True				
ANR	1385033	ParameterType	zval *		1384243	0					
ANR	1385034	Identifier	val		1384243	1					
ANR	1385035	CFGEntryNode	ENTRY		1384243		True				
ANR	1385036	CFGExitNode	EXIT		1384243		True				
ANR	1385037	Symbol	opline -> op2		1384243						
ANR	1385038	Symbol	ZEND_ASSIGN_SR		1384243						
ANR	1385039	Symbol	ZEND_ASSIGN_POW		1384243						
ANR	1385040	Symbol	Z_TYPE		1384243						
ANR	1385041	Symbol	Z_STR		1384243						
ANR	1385042	Symbol	ZEND_ASSIGN_ADD		1384243						
ANR	1385043	Symbol	ZEND_OP2_TYPE		1384243						
ANR	1385044	Symbol	zend_string_tolower		1384243						
ANR	1385045	Symbol	opline -> extended_value		1384243						
ANR	1385046	Symbol	opline		1384243						
ANR	1385047	Symbol	ZEND_ASSIGN_BW_AND		1384243						
ANR	1385048	Symbol	( opline - 1 ) -> extended_value		1384243						
ANR	1385049	Symbol	Z_STRLEN_P		1384243						
ANR	1385050	Symbol	ZEND_ASSIGN_BW_OR		1384243						
ANR	1385051	Symbol	IS_STRING		1384243						
ANR	1385052	Symbol	ZEND_ASSIGN_SL		1384243						
ANR	1385053	Symbol	zend_optimizer_add_literal		1384243						
ANR	1385054	Symbol	( opline - 1 ) -> opcode		1384243						
ANR	1385055	Symbol	val		1384243						
ANR	1385056	Symbol	zend_memrchr		1384243						
ANR	1385057	Symbol	ZEND_ASSIGN_CONCAT		1384243						
ANR	1385058	Symbol	IS_CONST		1384243						
ANR	1385059	Symbol	ZEND_ASSIGN_OBJ		1384243						
ANR	1385060	Symbol	ZEND_ASSIGN_BW_XOR		1384243						
ANR	1385061	Symbol	index		1384243						
ANR	1385062	Symbol	Z_TYPE_P		1384243						
ANR	1385063	Symbol	ZEND_ASSIGN_SUB		1384243						
ANR	1385064	Symbol	Z_STRVAL_P		1384243						
ANR	1385065	Symbol	ZEND_ASSIGN_MUL		1384243						
ANR	1385066	Symbol	ZEND_ASSIGN_MOD		1384243						
ANR	1385067	Symbol	* opline		1384243						
ANR	1385068	Symbol	ZEND_ASSIGN_DIM		1384243						
ANR	1385069	Symbol	opline -> opcode		1384243						
ANR	1385070	Symbol	opline -> op2 . constant		1384243						
ANR	1385071	Symbol	Z_STR_P		1384243						
ANR	1385072	Symbol	ZEND_OP2_LITERAL		1384243						
ANR	1385073	Symbol	ZEND_ASSIGN_DIV		1384243						
ANR	1385074	Symbol	ZEND_HANDLE_NUMERIC		1384243						
ANR	1385075	Symbol	op_array		1384243						
ANR	1385076	Symbol	ZEND_INIT_FCALL_BY_NAME		1384243						
ANR	1385077	Function	zend_optimizer_replace_by_const	362:0:11756:15385							
ANR	1385078	FunctionDef	"zend_optimizer_replace_by_const (zend_op_array * op_array , zend_op * opline , zend_uchar type , uint32_t var , zval * val)"		1385077	0					
ANR	1385079	CompoundStatement		367:0:12045:15385	1385077	0					
ANR	1385080	IdentifierDeclStatement	zend_op * end = op_array -> opcodes + op_array -> last ;	368:1:12048:12097	1385077	0	True				
ANR	1385081	IdentifierDecl	* end = op_array -> opcodes + op_array -> last		1385077	0					
ANR	1385082	IdentifierDeclType	zend_op *		1385077	0					
ANR	1385083	Identifier	end		1385077	1					
ANR	1385084	AssignmentExpression	* end = op_array -> opcodes + op_array -> last		1385077	2		=			
ANR	1385085	Identifier	end		1385077	0					
ANR	1385086	AdditiveExpression	op_array -> opcodes + op_array -> last		1385077	1		+			
ANR	1385087	PtrMemberAccess	op_array -> opcodes		1385077	0					
ANR	1385088	Identifier	op_array		1385077	0					
ANR	1385089	Identifier	opcodes		1385077	1					
ANR	1385090	PtrMemberAccess	op_array -> last		1385077	1					
ANR	1385091	Identifier	op_array		1385077	0					
ANR	1385092	Identifier	last		1385077	1					
ANR	1385093	WhileStatement	while ( opline < end )		1385077	1					
ANR	1385094	Condition	opline < end	370:8:12108:12119	1385077	0	True				
ANR	1385095	RelationalExpression	opline < end		1385077	0		<			
ANR	1385096	Identifier	opline		1385077	0					
ANR	1385097	Identifier	end		1385077	1					
ANR	1385098	CompoundStatement		4:22:76:76	1385077	1					
ANR	1385099	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == type && ZEND_OP1 ( opline ) . var == var )		1385077	0					
ANR	1385100	Condition	ZEND_OP1_TYPE ( opline ) == type && ZEND_OP1 ( opline ) . var == var	371:6:12130:12192	1385077	0	True				
ANR	1385101	AndExpression	ZEND_OP1_TYPE ( opline ) == type && ZEND_OP1 ( opline ) . var == var		1385077	0		&&			
ANR	1385102	EqualityExpression	ZEND_OP1_TYPE ( opline ) == type		1385077	0		==			
ANR	1385103	CallExpression	ZEND_OP1_TYPE ( opline )		1385077	0					
ANR	1385104	Callee	ZEND_OP1_TYPE		1385077	0					
ANR	1385105	Identifier	ZEND_OP1_TYPE		1385077	0					
ANR	1385106	ArgumentList	opline		1385077	1					
ANR	1385107	Argument	opline		1385077	0					
ANR	1385108	Identifier	opline		1385077	0					
ANR	1385109	Identifier	type		1385077	1					
ANR	1385110	EqualityExpression	ZEND_OP1 ( opline ) . var == var		1385077	1		==			
ANR	1385111	MemberAccess	ZEND_OP1 ( opline ) . var		1385077	0					
ANR	1385112	CallExpression	ZEND_OP1 ( opline )		1385077	0					
ANR	1385113	Callee	ZEND_OP1		1385077	0					
ANR	1385114	Identifier	ZEND_OP1		1385077	0					
ANR	1385115	ArgumentList	opline		1385077	1					
ANR	1385116	Argument	opline		1385077	0					
ANR	1385117	Identifier	opline		1385077	0					
ANR	1385118	Identifier	var		1385077	1					
ANR	1385119	Identifier	var		1385077	1					
ANR	1385120	CompoundStatement		6:32:149:149	1385077	1					
ANR	1385121	SwitchStatement	switch ( opline -> opcode )		1385077	0					
ANR	1385122	Condition	opline -> opcode	373:11:12208:12221	1385077	0	True				
ANR	1385123	PtrMemberAccess	opline -> opcode		1385077	0					
ANR	1385124	Identifier	opline		1385077	0					
ANR	1385125	Identifier	opcode		1385077	1					
ANR	1385126	CompoundStatement		7:27:178:178	1385077	1					
ANR	1385127	Label	case ZEND_FETCH_DIM_W :	374:4:12230:12251	1385077	0	True				
ANR	1385128	Identifier	ZEND_FETCH_DIM_W		1385077	0					
ANR	1385129	Label	case ZEND_FETCH_DIM_RW :	375:4:12257:12279	1385077	1	True				
ANR	1385130	Identifier	ZEND_FETCH_DIM_RW		1385077	0					
ANR	1385131	Label	case ZEND_FETCH_DIM_FUNC_ARG :	376:4:12285:12313	1385077	2	True				
ANR	1385132	Identifier	ZEND_FETCH_DIM_FUNC_ARG		1385077	0					
ANR	1385133	Label	case ZEND_FETCH_DIM_UNSET :	377:4:12319:12344	1385077	3	True				
ANR	1385134	Identifier	ZEND_FETCH_DIM_UNSET		1385077	0					
ANR	1385135	Label	case ZEND_ASSIGN_DIM :	378:4:12350:12370	1385077	4	True				
ANR	1385136	Identifier	ZEND_ASSIGN_DIM		1385077	0					
ANR	1385137	Label	case ZEND_SEPARATE :	379:4:12376:12394	1385077	5	True				
ANR	1385138	Identifier	ZEND_SEPARATE		1385077	0					
ANR	1385139	Label	case ZEND_RETURN_BY_REF :	380:4:12400:12423	1385077	6	True				
ANR	1385140	Identifier	ZEND_RETURN_BY_REF		1385077	0					
ANR	1385141	ExpressionStatement	zval_dtor ( val )	381:5:12430:12444	1385077	7	True				
ANR	1385142	CallExpression	zval_dtor ( val )		1385077	0					
ANR	1385143	Callee	zval_dtor		1385077	0					
ANR	1385144	Identifier	zval_dtor		1385077	0					
ANR	1385145	ArgumentList	val		1385077	1					
ANR	1385146	Argument	val		1385077	0					
ANR	1385147	Identifier	val		1385077	0					
ANR	1385148	ReturnStatement	return 0 ;	382:5:12451:12459	1385077	8	True				
ANR	1385149	PrimaryExpression	0		1385077	0					
ANR	1385150	Label	case ZEND_SEND_VAR :	383:4:12465:12483	1385077	9	True				
ANR	1385151	Identifier	ZEND_SEND_VAR		1385077	0					
ANR	1385152	ExpressionStatement	opline -> extended_value = 0	384:5:12490:12516	1385077	10	True				
ANR	1385153	AssignmentExpression	opline -> extended_value = 0		1385077	0		=			
ANR	1385154	PtrMemberAccess	opline -> extended_value		1385077	0					
ANR	1385155	Identifier	opline		1385077	0					
ANR	1385156	Identifier	extended_value		1385077	1					
ANR	1385157	PrimaryExpression	0		1385077	1					
ANR	1385158	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL	385:5:12523:12553	1385077	11	True				
ANR	1385159	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL		1385077	0		=			
ANR	1385160	PtrMemberAccess	opline -> opcode		1385077	0					
ANR	1385161	Identifier	opline		1385077	0					
ANR	1385162	Identifier	opcode		1385077	1					
ANR	1385163	Identifier	ZEND_SEND_VAL		1385077	1					
ANR	1385164	BreakStatement	break ;	386:5:12560:12565	1385077	12	True				
ANR	1385165	Label	case ZEND_SEND_VAR_EX :	387:4:12571:12592	1385077	13	True				
ANR	1385166	Identifier	ZEND_SEND_VAR_EX		1385077	0					
ANR	1385167	ExpressionStatement	opline -> extended_value = 0	388:5:12599:12625	1385077	14	True				
ANR	1385168	AssignmentExpression	opline -> extended_value = 0		1385077	0		=			
ANR	1385169	PtrMemberAccess	opline -> extended_value		1385077	0					
ANR	1385170	Identifier	opline		1385077	0					
ANR	1385171	Identifier	extended_value		1385077	1					
ANR	1385172	PrimaryExpression	0		1385077	1					
ANR	1385173	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL_EX	389:5:12632:12665	1385077	15	True				
ANR	1385174	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL_EX		1385077	0		=			
ANR	1385175	PtrMemberAccess	opline -> opcode		1385077	0					
ANR	1385176	Identifier	opline		1385077	0					
ANR	1385177	Identifier	opcode		1385077	1					
ANR	1385178	Identifier	ZEND_SEND_VAL_EX		1385077	1					
ANR	1385179	BreakStatement	break ;	390:5:12672:12677	1385077	16	True				
ANR	1385180	Label	case ZEND_SEND_VAR_NO_REF :	391:4:12683:12708	1385077	17	True				
ANR	1385181	Identifier	ZEND_SEND_VAR_NO_REF		1385077	0					
ANR	1385182	IfStatement	if ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND )		1385077	18					
ANR	1385183	Condition	opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND	392:9:12719:12770	1385077	0	True				
ANR	1385184	BitAndExpression	opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND		1385077	0		&			
ANR	1385185	PtrMemberAccess	opline -> extended_value		1385077	0					
ANR	1385186	Identifier	opline		1385077	0					
ANR	1385187	Identifier	extended_value		1385077	1					
ANR	1385188	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		1385077	1					
ANR	1385189	CompoundStatement		26:63:727:727	1385077	1					
ANR	1385190	IfStatement	if ( opline -> extended_value & ZEND_ARG_SEND_BY_REF )		1385077	0					
ANR	1385191	Condition	opline -> extended_value & ZEND_ARG_SEND_BY_REF	393:10:12785:12829	1385077	0	True				
ANR	1385192	BitAndExpression	opline -> extended_value & ZEND_ARG_SEND_BY_REF		1385077	0		&			
ANR	1385193	PtrMemberAccess	opline -> extended_value		1385077	0					
ANR	1385194	Identifier	opline		1385077	0					
ANR	1385195	Identifier	extended_value		1385077	1					
ANR	1385196	Identifier	ZEND_ARG_SEND_BY_REF		1385077	1					
ANR	1385197	CompoundStatement		27:57:786:786	1385077	1					
ANR	1385198	ExpressionStatement	zval_dtor ( val )	394:7:12841:12855	1385077	0	True				
ANR	1385199	CallExpression	zval_dtor ( val )		1385077	0					
ANR	1385200	Callee	zval_dtor		1385077	0					
ANR	1385201	Identifier	zval_dtor		1385077	0					
ANR	1385202	ArgumentList	val		1385077	1					
ANR	1385203	Argument	val		1385077	0					
ANR	1385204	Identifier	val		1385077	0					
ANR	1385205	ReturnStatement	return 0 ;	395:7:12864:12872	1385077	1	True				
ANR	1385206	PrimaryExpression	0		1385077	0					
ANR	1385207	ExpressionStatement	opline -> extended_value = 0	397:6:12888:12914	1385077	1	True				
ANR	1385208	AssignmentExpression	opline -> extended_value = 0		1385077	0		=			
ANR	1385209	PtrMemberAccess	opline -> extended_value		1385077	0					
ANR	1385210	Identifier	opline		1385077	0					
ANR	1385211	Identifier	extended_value		1385077	1					
ANR	1385212	PrimaryExpression	0		1385077	1					
ANR	1385213	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL_EX	398:6:12922:12955	1385077	2	True				
ANR	1385214	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL_EX		1385077	0		=			
ANR	1385215	PtrMemberAccess	opline -> opcode		1385077	0					
ANR	1385216	Identifier	opline		1385077	0					
ANR	1385217	Identifier	opcode		1385077	1					
ANR	1385218	Identifier	ZEND_SEND_VAL_EX		1385077	1					
ANR	1385219	ElseStatement	else		1385077	0					
ANR	1385220	CompoundStatement		33:12:923:923	1385077	0					
ANR	1385221	ExpressionStatement	opline -> extended_value = 0	400:6:12977:13003	1385077	0	True				
ANR	1385222	AssignmentExpression	opline -> extended_value = 0		1385077	0		=			
ANR	1385223	PtrMemberAccess	opline -> extended_value		1385077	0					
ANR	1385224	Identifier	opline		1385077	0					
ANR	1385225	Identifier	extended_value		1385077	1					
ANR	1385226	PrimaryExpression	0		1385077	1					
ANR	1385227	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL	401:6:13011:13041	1385077	1	True				
ANR	1385228	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL		1385077	0		=			
ANR	1385229	PtrMemberAccess	opline -> opcode		1385077	0					
ANR	1385230	Identifier	opline		1385077	0					
ANR	1385231	Identifier	opcode		1385077	1					
ANR	1385232	Identifier	ZEND_SEND_VAL		1385077	1					
ANR	1385233	BreakStatement	break ;	403:5:13055:13060	1385077	19	True				
ANR	1385234	Label	case ZEND_SEND_USER :	404:4:13066:13085	1385077	20	True				
ANR	1385235	Identifier	ZEND_SEND_USER		1385077	0					
ANR	1385236	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL_EX	405:5:13092:13125	1385077	21	True				
ANR	1385237	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL_EX		1385077	0		=			
ANR	1385238	PtrMemberAccess	opline -> opcode		1385077	0					
ANR	1385239	Identifier	opline		1385077	0					
ANR	1385240	Identifier	opcode		1385077	1					
ANR	1385241	Identifier	ZEND_SEND_VAL_EX		1385077	1					
ANR	1385242	BreakStatement	break ;	406:5:13132:13137	1385077	22	True				
ANR	1385243	Label	case ZEND_FREE :	413:4:13478:13492	1385077	23	True				
ANR	1385244	Identifier	ZEND_FREE		1385077	0					
ANR	1385245	Label	case ZEND_CASE :	414:4:13498:13512	1385077	24	True				
ANR	1385246	Identifier	ZEND_CASE		1385077	0					
ANR	1385247	CompoundStatement		51:5:1536:1559	1385077	25					
ANR	1385248	IdentifierDeclStatement	"zend_op * m , * n ;"	415:5:13521:13535	1385077	0	True				
ANR	1385249	IdentifierDecl	* m		1385077	0					
ANR	1385250	IdentifierDeclType	zend_op *		1385077	0					
ANR	1385251	Identifier	m		1385077	1					
ANR	1385252	IdentifierDecl	* n		1385077	1					
ANR	1385253	IdentifierDeclType	zend_op *		1385077	0					
ANR	1385254	Identifier	n		1385077	1					
ANR	1385255	IdentifierDeclStatement	int brk = op_array -> last_brk_cont ;	416:5:13542:13575	1385077	1	True				
ANR	1385256	IdentifierDecl	brk = op_array -> last_brk_cont		1385077	0					
ANR	1385257	IdentifierDeclType	int		1385077	0					
ANR	1385258	Identifier	brk		1385077	1					
ANR	1385259	AssignmentExpression	brk = op_array -> last_brk_cont		1385077	2		=			
ANR	1385260	Identifier	brk		1385077	0					
ANR	1385261	PtrMemberAccess	op_array -> last_brk_cont		1385077	1					
ANR	1385262	Identifier	op_array		1385077	0					
ANR	1385263	Identifier	last_brk_cont		1385077	1					
ANR	1385264	IdentifierDeclStatement	zend_bool in_switch = 0 ;	417:5:13582:13605	1385077	2	True				
ANR	1385265	IdentifierDecl	in_switch = 0		1385077	0					
ANR	1385266	IdentifierDeclType	zend_bool		1385077	0					
ANR	1385267	Identifier	in_switch		1385077	1					
ANR	1385268	AssignmentExpression	in_switch = 0		1385077	2		=			
ANR	1385269	Identifier	in_switch		1385077	0					
ANR	1385270	PrimaryExpression	0		1385077	1					
ANR	1385271	WhileStatement	while ( brk -- )		1385077	3					
ANR	1385272	Condition	brk --	418:12:13619:13623	1385077	0	True				
ANR	1385273	PostIncDecOperationExpression	brk --		1385077	0					
ANR	1385274	Identifier	brk		1385077	0					
ANR	1385275	IncDec	--		1385077	1					
ANR	1385276	CompoundStatement		52:19:1580:1580	1385077	1					
ANR	1385277	IfStatement	if ( op_array -> brk_cont_array [ brk ] . start <= ( opline - op_array -> opcodes ) && op_array -> brk_cont_array [ brk ] . brk > ( opline - op_array -> opcodes ) )		1385077	0					
ANR	1385278	Condition	op_array -> brk_cont_array [ brk ] . start <= ( opline - op_array -> opcodes ) && op_array -> brk_cont_array [ brk ] . brk > ( opline - op_array -> opcodes )	419:10:13638:13780	1385077	0	True				
ANR	1385279	AndExpression	op_array -> brk_cont_array [ brk ] . start <= ( opline - op_array -> opcodes ) && op_array -> brk_cont_array [ brk ] . brk > ( opline - op_array -> opcodes )		1385077	0		&&			
ANR	1385280	RelationalExpression	op_array -> brk_cont_array [ brk ] . start <= ( opline - op_array -> opcodes )		1385077	0		<=			
ANR	1385281	MemberAccess	op_array -> brk_cont_array [ brk ] . start		1385077	0					
ANR	1385282	ArrayIndexing	op_array -> brk_cont_array [ brk ]		1385077	0					
ANR	1385283	PtrMemberAccess	op_array -> brk_cont_array		1385077	0					
ANR	1385284	Identifier	op_array		1385077	0					
ANR	1385285	Identifier	brk_cont_array		1385077	1					
ANR	1385286	Identifier	brk		1385077	1					
ANR	1385287	Identifier	start		1385077	1					
ANR	1385288	AdditiveExpression	opline - op_array -> opcodes		1385077	1		-			
ANR	1385289	Identifier	opline		1385077	0					
ANR	1385290	PtrMemberAccess	op_array -> opcodes		1385077	1					
ANR	1385291	Identifier	op_array		1385077	0					
ANR	1385292	Identifier	opcodes		1385077	1					
ANR	1385293	RelationalExpression	op_array -> brk_cont_array [ brk ] . brk > ( opline - op_array -> opcodes )		1385077	1		>			
ANR	1385294	MemberAccess	op_array -> brk_cont_array [ brk ] . brk		1385077	0					
ANR	1385295	ArrayIndexing	op_array -> brk_cont_array [ brk ]		1385077	0					
ANR	1385296	PtrMemberAccess	op_array -> brk_cont_array		1385077	0					
ANR	1385297	Identifier	op_array		1385077	0					
ANR	1385298	Identifier	brk_cont_array		1385077	1					
ANR	1385299	Identifier	brk		1385077	1					
ANR	1385300	Identifier	brk		1385077	1					
ANR	1385301	AdditiveExpression	opline - op_array -> opcodes		1385077	1		-			
ANR	1385302	Identifier	opline		1385077	0					
ANR	1385303	PtrMemberAccess	op_array -> opcodes		1385077	1					
ANR	1385304	Identifier	op_array		1385077	0					
ANR	1385305	Identifier	opcodes		1385077	1					
ANR	1385306	CompoundStatement		54:74:1737:1737	1385077	1					
ANR	1385307	ExpressionStatement	in_switch = 1	421:7:13792:13805	1385077	0	True				
ANR	1385308	AssignmentExpression	in_switch = 1		1385077	0		=			
ANR	1385309	Identifier	in_switch		1385077	0					
ANR	1385310	PrimaryExpression	1		1385077	1					
ANR	1385311	BreakStatement	break ;	422:7:13814:13819	1385077	1	True				
ANR	1385312	IfStatement	if ( ! in_switch )		1385077	4					
ANR	1385313	Condition	! in_switch	426:9:13846:13855	1385077	0	True				
ANR	1385314	UnaryOperationExpression	! in_switch		1385077	0					
ANR	1385315	UnaryOperator	!		1385077	0					
ANR	1385316	Identifier	in_switch		1385077	1					
ANR	1385317	CompoundStatement		60:21:1812:1812	1385077	1					
ANR	1385318	ExpressionStatement	ZEND_ASSERT ( opline -> opcode == ZEND_FREE )	427:6:13866:13906	1385077	0	True				
ANR	1385319	CallExpression	ZEND_ASSERT ( opline -> opcode == ZEND_FREE )		1385077	0					
ANR	1385320	Callee	ZEND_ASSERT		1385077	0					
ANR	1385321	Identifier	ZEND_ASSERT		1385077	0					
ANR	1385322	ArgumentList	opline -> opcode == ZEND_FREE		1385077	1					
ANR	1385323	Argument	opline -> opcode == ZEND_FREE		1385077	0					
ANR	1385324	EqualityExpression	opline -> opcode == ZEND_FREE		1385077	0		==			
ANR	1385325	PtrMemberAccess	opline -> opcode		1385077	0					
ANR	1385326	Identifier	opline		1385077	0					
ANR	1385327	Identifier	opcode		1385077	1					
ANR	1385328	Identifier	ZEND_FREE		1385077	1					
ANR	1385329	ExpressionStatement	MAKE_NOP ( opline )	428:6:13914:13930	1385077	1	True				
ANR	1385330	CallExpression	MAKE_NOP ( opline )		1385077	0					
ANR	1385331	Callee	MAKE_NOP		1385077	0					
ANR	1385332	Identifier	MAKE_NOP		1385077	0					
ANR	1385333	ArgumentList	opline		1385077	1					
ANR	1385334	Argument	opline		1385077	0					
ANR	1385335	Identifier	opline		1385077	0					
ANR	1385336	ExpressionStatement	zval_dtor ( val )	429:6:13938:13952	1385077	2	True				
ANR	1385337	CallExpression	zval_dtor ( val )		1385077	0					
ANR	1385338	Callee	zval_dtor		1385077	0					
ANR	1385339	Identifier	zval_dtor		1385077	0					
ANR	1385340	ArgumentList	val		1385077	1					
ANR	1385341	Argument	val		1385077	0					
ANR	1385342	Identifier	val		1385077	0					
ANR	1385343	ReturnStatement	return 1 ;	430:6:13960:13968	1385077	3	True				
ANR	1385344	PrimaryExpression	1		1385077	0					
ANR	1385345	ExpressionStatement	m = opline	433:5:13983:13993	1385077	5	True				
ANR	1385346	AssignmentExpression	m = opline		1385077	0		=			
ANR	1385347	Identifier	m		1385077	0					
ANR	1385348	Identifier	opline		1385077	1					
ANR	1385349	ExpressionStatement	n = op_array -> opcodes + op_array -> brk_cont_array [ brk ] . brk + 1	434:5:14000:14061	1385077	6	True				
ANR	1385350	AssignmentExpression	n = op_array -> opcodes + op_array -> brk_cont_array [ brk ] . brk + 1		1385077	0		=			
ANR	1385351	Identifier	n		1385077	0					
ANR	1385352	AdditiveExpression	op_array -> opcodes + op_array -> brk_cont_array [ brk ] . brk + 1		1385077	1		+			
ANR	1385353	PtrMemberAccess	op_array -> opcodes		1385077	0					
ANR	1385354	Identifier	op_array		1385077	0					
ANR	1385355	Identifier	opcodes		1385077	1					
ANR	1385356	AdditiveExpression	op_array -> brk_cont_array [ brk ] . brk + 1		1385077	1		+			
ANR	1385357	MemberAccess	op_array -> brk_cont_array [ brk ] . brk		1385077	0					
ANR	1385358	ArrayIndexing	op_array -> brk_cont_array [ brk ]		1385077	0					
ANR	1385359	PtrMemberAccess	op_array -> brk_cont_array		1385077	0					
ANR	1385360	Identifier	op_array		1385077	0					
ANR	1385361	Identifier	brk_cont_array		1385077	1					
ANR	1385362	Identifier	brk		1385077	1					
ANR	1385363	Identifier	brk		1385077	1					
ANR	1385364	PrimaryExpression	1		1385077	1					
ANR	1385365	WhileStatement	while ( m < n )		1385077	7					
ANR	1385366	Condition	m < n	435:12:14075:14079	1385077	0	True				
ANR	1385367	RelationalExpression	m < n		1385077	0		<			
ANR	1385368	Identifier	m		1385077	0					
ANR	1385369	Identifier	n		1385077	1					
ANR	1385370	CompoundStatement		69:19:2036:2036	1385077	1					
ANR	1385371	IfStatement	if ( ZEND_OP1_TYPE ( m ) == type && ZEND_OP1 ( m ) . var == var )		1385077	0					
ANR	1385372	Condition	ZEND_OP1_TYPE ( m ) == type && ZEND_OP1 ( m ) . var == var	436:10:14094:14151	1385077	0	True				
ANR	1385373	AndExpression	ZEND_OP1_TYPE ( m ) == type && ZEND_OP1 ( m ) . var == var		1385077	0		&&			
ANR	1385374	EqualityExpression	ZEND_OP1_TYPE ( m ) == type		1385077	0		==			
ANR	1385375	CallExpression	ZEND_OP1_TYPE ( m )		1385077	0					
ANR	1385376	Callee	ZEND_OP1_TYPE		1385077	0					
ANR	1385377	Identifier	ZEND_OP1_TYPE		1385077	0					
ANR	1385378	ArgumentList	m		1385077	1					
ANR	1385379	Argument	m		1385077	0					
ANR	1385380	Identifier	m		1385077	0					
ANR	1385381	Identifier	type		1385077	1					
ANR	1385382	EqualityExpression	ZEND_OP1 ( m ) . var == var		1385077	1		==			
ANR	1385383	MemberAccess	ZEND_OP1 ( m ) . var		1385077	0					
ANR	1385384	CallExpression	ZEND_OP1 ( m )		1385077	0					
ANR	1385385	Callee	ZEND_OP1		1385077	0					
ANR	1385386	Identifier	ZEND_OP1		1385077	0					
ANR	1385387	ArgumentList	m		1385077	1					
ANR	1385388	Argument	m		1385077	0					
ANR	1385389	Identifier	m		1385077	0					
ANR	1385390	Identifier	var		1385077	1					
ANR	1385391	Identifier	var		1385077	1					
ANR	1385392	CompoundStatement		71:32:2108:2108	1385077	1					
ANR	1385393	IfStatement	if ( m -> opcode == ZEND_CASE )		1385077	0					
ANR	1385394	Condition	m -> opcode == ZEND_CASE	438:11:14167:14188	1385077	0	True				
ANR	1385395	EqualityExpression	m -> opcode == ZEND_CASE		1385077	0		==			
ANR	1385396	PtrMemberAccess	m -> opcode		1385077	0					
ANR	1385397	Identifier	m		1385077	0					
ANR	1385398	Identifier	opcode		1385077	1					
ANR	1385399	Identifier	ZEND_CASE		1385077	1					
ANR	1385400	CompoundStatement		73:8:2155:2167	1385077	1					
ANR	1385401	IdentifierDeclStatement	zval old_val ;	439:8:14201:14213	1385077	0	True				
ANR	1385402	IdentifierDecl	old_val		1385077	0					
ANR	1385403	IdentifierDeclType	zval		1385077	0					
ANR	1385404	Identifier	old_val		1385077	1					
ANR	1385405	ExpressionStatement	"ZVAL_COPY_VALUE ( & old_val , val )"	440:8:14223:14253	1385077	1	True				
ANR	1385406	CallExpression	"ZVAL_COPY_VALUE ( & old_val , val )"		1385077	0					
ANR	1385407	Callee	ZVAL_COPY_VALUE		1385077	0					
ANR	1385408	Identifier	ZVAL_COPY_VALUE		1385077	0					
ANR	1385409	ArgumentList	& old_val		1385077	1					
ANR	1385410	Argument	& old_val		1385077	0					
ANR	1385411	UnaryOperationExpression	& old_val		1385077	0					
ANR	1385412	UnaryOperator	&		1385077	0					
ANR	1385413	Identifier	old_val		1385077	1					
ANR	1385414	Argument	val		1385077	1					
ANR	1385415	Identifier	val		1385077	0					
ANR	1385416	ExpressionStatement	zval_copy_ctor ( val )	441:8:14263:14282	1385077	2	True				
ANR	1385417	CallExpression	zval_copy_ctor ( val )		1385077	0					
ANR	1385418	Callee	zval_copy_ctor		1385077	0					
ANR	1385419	Identifier	zval_copy_ctor		1385077	0					
ANR	1385420	ArgumentList	val		1385077	1					
ANR	1385421	Argument	val		1385077	0					
ANR	1385422	Identifier	val		1385077	0					
ANR	1385423	ExpressionStatement	"zend_optimizer_update_op1_const ( op_array , m , val )"	442:8:14292:14341	1385077	3	True				
ANR	1385424	CallExpression	"zend_optimizer_update_op1_const ( op_array , m , val )"		1385077	0					
ANR	1385425	Callee	zend_optimizer_update_op1_const		1385077	0					
ANR	1385426	Identifier	zend_optimizer_update_op1_const		1385077	0					
ANR	1385427	ArgumentList	op_array		1385077	1					
ANR	1385428	Argument	op_array		1385077	0					
ANR	1385429	Identifier	op_array		1385077	0					
ANR	1385430	Argument	m		1385077	1					
ANR	1385431	Identifier	m		1385077	0					
ANR	1385432	Argument	val		1385077	2					
ANR	1385433	Identifier	val		1385077	0					
ANR	1385434	ExpressionStatement	"ZVAL_COPY_VALUE ( val , & old_val )"	443:8:14351:14381	1385077	4	True				
ANR	1385435	CallExpression	"ZVAL_COPY_VALUE ( val , & old_val )"		1385077	0					
ANR	1385436	Callee	ZVAL_COPY_VALUE		1385077	0					
ANR	1385437	Identifier	ZVAL_COPY_VALUE		1385077	0					
ANR	1385438	ArgumentList	val		1385077	1					
ANR	1385439	Argument	val		1385077	0					
ANR	1385440	Identifier	val		1385077	0					
ANR	1385441	Argument	& old_val		1385077	1					
ANR	1385442	UnaryOperationExpression	& old_val		1385077	0					
ANR	1385443	UnaryOperator	&		1385077	0					
ANR	1385444	Identifier	old_val		1385077	1					
ANR	1385445	ElseStatement	else		1385077	0					
ANR	1385446	IfStatement	if ( m -> opcode == ZEND_FREE )		1385077	0					
ANR	1385447	Condition	m -> opcode == ZEND_FREE	444:18:14401:14422	1385077	0	True				
ANR	1385448	EqualityExpression	m -> opcode == ZEND_FREE		1385077	0		==			
ANR	1385449	PtrMemberAccess	m -> opcode		1385077	0					
ANR	1385450	Identifier	m		1385077	0					
ANR	1385451	Identifier	opcode		1385077	1					
ANR	1385452	Identifier	ZEND_FREE		1385077	1					
ANR	1385453	CompoundStatement		78:42:2379:2379	1385077	1					
ANR	1385454	ExpressionStatement	MAKE_NOP ( m )	445:8:14435:14446	1385077	0	True				
ANR	1385455	CallExpression	MAKE_NOP ( m )		1385077	0					
ANR	1385456	Callee	MAKE_NOP		1385077	0					
ANR	1385457	Identifier	MAKE_NOP		1385077	0					
ANR	1385458	ArgumentList	m		1385077	1					
ANR	1385459	Argument	m		1385077	0					
ANR	1385460	Identifier	m		1385077	0					
ANR	1385461	ElseStatement	else		1385077	0					
ANR	1385462	CompoundStatement		80:14:2416:2416	1385077	0					
ANR	1385463	ExpressionStatement	ZEND_ASSERT ( 0 )	447:8:14472:14486	1385077	0	True				
ANR	1385464	CallExpression	ZEND_ASSERT ( 0 )		1385077	0					
ANR	1385465	Callee	ZEND_ASSERT		1385077	0					
ANR	1385466	Identifier	ZEND_ASSERT		1385077	0					
ANR	1385467	ArgumentList	0		1385077	1					
ANR	1385468	Argument	0		1385077	0					
ANR	1385469	PrimaryExpression	0		1385077	0					
ANR	1385470	ExpressionStatement	m ++	450:6:14511:14514	1385077	1	True				
ANR	1385471	PostIncDecOperationExpression	m ++		1385077	0					
ANR	1385472	Identifier	m		1385077	0					
ANR	1385473	IncDec	++		1385077	1					
ANR	1385474	ExpressionStatement	zval_dtor ( val )	452:5:14528:14542	1385077	8	True				
ANR	1385475	CallExpression	zval_dtor ( val )		1385077	0					
ANR	1385476	Callee	zval_dtor		1385077	0					
ANR	1385477	Identifier	zval_dtor		1385077	0					
ANR	1385478	ArgumentList	val		1385077	1					
ANR	1385479	Argument	val		1385077	0					
ANR	1385480	Identifier	val		1385077	0					
ANR	1385481	ReturnStatement	return 1 ;	453:5:14549:14557	1385077	9	True				
ANR	1385482	PrimaryExpression	1		1385077	0					
ANR	1385483	Label	case ZEND_VERIFY_RETURN_TYPE :	455:4:14569:14597	1385077	26	True				
ANR	1385484	Identifier	ZEND_VERIFY_RETURN_TYPE		1385077	0					
ANR	1385485	CompoundStatement		90:5:2560:2608	1385077	27					
ANR	1385486	IdentifierDeclStatement	zend_arg_info * ret_info = op_array -> arg_info - 1 ;	456:5:14606:14654	1385077	0	True				
ANR	1385487	IdentifierDecl	* ret_info = op_array -> arg_info - 1		1385077	0					
ANR	1385488	IdentifierDeclType	zend_arg_info *		1385077	0					
ANR	1385489	Identifier	ret_info		1385077	1					
ANR	1385490	AssignmentExpression	* ret_info = op_array -> arg_info - 1		1385077	2		=			
ANR	1385491	Identifier	ret_info		1385077	0					
ANR	1385492	AdditiveExpression	op_array -> arg_info - 1		1385077	1		-			
ANR	1385493	PtrMemberAccess	op_array -> arg_info		1385077	0					
ANR	1385494	Identifier	op_array		1385077	0					
ANR	1385495	Identifier	arg_info		1385077	1					
ANR	1385496	PrimaryExpression	1		1385077	1					
ANR	1385497	ExpressionStatement	ZEND_ASSERT ( ( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF )	457:5:14661:14755	1385077	1	True				
ANR	1385498	CallExpression	ZEND_ASSERT ( ( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF )		1385077	0					
ANR	1385499	Callee	ZEND_ASSERT		1385077	0					
ANR	1385500	Identifier	ZEND_ASSERT		1385077	0					
ANR	1385501	ArgumentList	( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF		1385077	1					
ANR	1385502	Argument	( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF		1385077	0					
ANR	1385503	OrExpression	( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF		1385077	0		||			
ANR	1385504	EqualityExpression	( opline + 1 ) -> opcode == ZEND_RETURN		1385077	0		==			
ANR	1385505	PtrMemberAccess	( opline + 1 ) -> opcode		1385077	0					
ANR	1385506	AdditiveExpression	opline + 1		1385077	0		+			
ANR	1385507	Identifier	opline		1385077	0					
ANR	1385508	PrimaryExpression	1		1385077	1					
ANR	1385509	Identifier	opcode		1385077	1					
ANR	1385510	Identifier	ZEND_RETURN		1385077	1					
ANR	1385511	EqualityExpression	( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF		1385077	1		==			
ANR	1385512	PtrMemberAccess	( opline + 1 ) -> opcode		1385077	0					
ANR	1385513	AdditiveExpression	opline + 1		1385077	0		+			
ANR	1385514	Identifier	opline		1385077	0					
ANR	1385515	PrimaryExpression	1		1385077	1					
ANR	1385516	Identifier	opcode		1385077	1					
ANR	1385517	Identifier	ZEND_RETURN_BY_REF		1385077	1					
ANR	1385518	IfStatement	"if ( ret_info -> class_name || ret_info -> type_hint == IS_CALLABLE || ! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) )"		1385077	2					
ANR	1385519	Condition	"ret_info -> class_name || ret_info -> type_hint == IS_CALLABLE || ! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE )"	458:9:14766:14953	1385077	0	True				
ANR	1385520	OrExpression	"ret_info -> class_name || ret_info -> type_hint == IS_CALLABLE || ! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE )"		1385077	0		||			
ANR	1385521	PtrMemberAccess	ret_info -> class_name		1385077	0					
ANR	1385522	Identifier	ret_info		1385077	0					
ANR	1385523	Identifier	class_name		1385077	1					
ANR	1385524	OrExpression	"ret_info -> type_hint == IS_CALLABLE || ! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE )"		1385077	1		||			
ANR	1385525	EqualityExpression	ret_info -> type_hint == IS_CALLABLE		1385077	0		==			
ANR	1385526	PtrMemberAccess	ret_info -> type_hint		1385077	0					
ANR	1385527	Identifier	ret_info		1385077	0					
ANR	1385528	Identifier	type_hint		1385077	1					
ANR	1385529	Identifier	IS_CALLABLE		1385077	1					
ANR	1385530	OrExpression	"! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE )"		1385077	1		||			
ANR	1385531	UnaryOperationExpression	"! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) )"		1385077	0					
ANR	1385532	UnaryOperator	!		1385077	0					
ANR	1385533	CallExpression	"ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) )"		1385077	1					
ANR	1385534	Callee	ZEND_SAME_FAKE_TYPE		1385077	0					
ANR	1385535	Identifier	ZEND_SAME_FAKE_TYPE		1385077	0					
ANR	1385536	ArgumentList	ret_info -> type_hint		1385077	1					
ANR	1385537	Argument	ret_info -> type_hint		1385077	0					
ANR	1385538	PtrMemberAccess	ret_info -> type_hint		1385077	0					
ANR	1385539	Identifier	ret_info		1385077	0					
ANR	1385540	Identifier	type_hint		1385077	1					
ANR	1385541	Argument	Z_TYPE_P ( val )		1385077	1					
ANR	1385542	CallExpression	Z_TYPE_P ( val )		1385077	0					
ANR	1385543	Callee	Z_TYPE_P		1385077	0					
ANR	1385544	Identifier	Z_TYPE_P		1385077	0					
ANR	1385545	ArgumentList	val		1385077	1					
ANR	1385546	Argument	val		1385077	0					
ANR	1385547	Identifier	val		1385077	0					
ANR	1385548	BitAndExpression	op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE		1385077	1		&			
ANR	1385549	PtrMemberAccess	op_array -> fn_flags		1385077	0					
ANR	1385550	Identifier	op_array		1385077	0					
ANR	1385551	Identifier	fn_flags		1385077	1					
ANR	1385552	Identifier	ZEND_ACC_RETURN_REFERENCE		1385077	1					
ANR	1385553	CompoundStatement		95:59:2910:2910	1385077	1					
ANR	1385554	ExpressionStatement	zval_dtor ( val )	462:6:14964:14978	1385077	0	True				
ANR	1385555	CallExpression	zval_dtor ( val )		1385077	0					
ANR	1385556	Callee	zval_dtor		1385077	0					
ANR	1385557	Identifier	zval_dtor		1385077	0					
ANR	1385558	ArgumentList	val		1385077	1					
ANR	1385559	Argument	val		1385077	0					
ANR	1385560	Identifier	val		1385077	0					
ANR	1385561	ReturnStatement	return 0 ;	463:6:14986:14994	1385077	1	True				
ANR	1385562	PrimaryExpression	0		1385077	0					
ANR	1385563	ExpressionStatement	MAKE_NOP ( opline )	465:5:15008:15024	1385077	3	True				
ANR	1385564	CallExpression	MAKE_NOP ( opline )		1385077	0					
ANR	1385565	Callee	MAKE_NOP		1385077	0					
ANR	1385566	Identifier	MAKE_NOP		1385077	0					
ANR	1385567	ArgumentList	opline		1385077	1					
ANR	1385568	Argument	opline		1385077	0					
ANR	1385569	Identifier	opline		1385077	0					
ANR	1385570	ExpressionStatement	"zend_optimizer_update_op1_const ( op_array , opline + 1 , val )"	466:5:15031:15089	1385077	4	True				
ANR	1385571	CallExpression	"zend_optimizer_update_op1_const ( op_array , opline + 1 , val )"		1385077	0					
ANR	1385572	Callee	zend_optimizer_update_op1_const		1385077	0					
ANR	1385573	Identifier	zend_optimizer_update_op1_const		1385077	0					
ANR	1385574	ArgumentList	op_array		1385077	1					
ANR	1385575	Argument	op_array		1385077	0					
ANR	1385576	Identifier	op_array		1385077	0					
ANR	1385577	Argument	opline + 1		1385077	1					
ANR	1385578	AdditiveExpression	opline + 1		1385077	0		+			
ANR	1385579	Identifier	opline		1385077	0					
ANR	1385580	PrimaryExpression	1		1385077	1					
ANR	1385581	Argument	val		1385077	2					
ANR	1385582	Identifier	val		1385077	0					
ANR	1385583	ReturnStatement	return 1 ;	467:5:15096:15104	1385077	5	True				
ANR	1385584	PrimaryExpression	1		1385077	0					
ANR	1385585	Label	default :	469:4:15118:15125	1385077	28	True				
ANR	1385586	Identifier	default		1385077	0					
ANR	1385587	BreakStatement	break ;	470:5:15132:15137	1385077	29	True				
ANR	1385588	ReturnStatement	"return zend_optimizer_update_op1_const ( op_array , opline , val ) ;"	472:3:15147:15208	1385077	1	True				
ANR	1385589	CallExpression	"zend_optimizer_update_op1_const ( op_array , opline , val )"		1385077	0					
ANR	1385590	Callee	zend_optimizer_update_op1_const		1385077	0					
ANR	1385591	Identifier	zend_optimizer_update_op1_const		1385077	0					
ANR	1385592	ArgumentList	op_array		1385077	1					
ANR	1385593	Argument	op_array		1385077	0					
ANR	1385594	Identifier	op_array		1385077	0					
ANR	1385595	Argument	opline		1385077	1					
ANR	1385596	Identifier	opline		1385077	0					
ANR	1385597	Argument	val		1385077	2					
ANR	1385598	Identifier	val		1385077	0					
ANR	1385599	IfStatement	if ( ZEND_OP2_TYPE ( opline ) == type && ZEND_OP2 ( opline ) . var == var )		1385077	1					
ANR	1385600	Condition	ZEND_OP2_TYPE ( opline ) == type && ZEND_OP2 ( opline ) . var == var	475:6:15221:15283	1385077	0	True				
ANR	1385601	AndExpression	ZEND_OP2_TYPE ( opline ) == type && ZEND_OP2 ( opline ) . var == var		1385077	0		&&			
ANR	1385602	EqualityExpression	ZEND_OP2_TYPE ( opline ) == type		1385077	0		==			
ANR	1385603	CallExpression	ZEND_OP2_TYPE ( opline )		1385077	0					
ANR	1385604	Callee	ZEND_OP2_TYPE		1385077	0					
ANR	1385605	Identifier	ZEND_OP2_TYPE		1385077	0					
ANR	1385606	ArgumentList	opline		1385077	1					
ANR	1385607	Argument	opline		1385077	0					
ANR	1385608	Identifier	opline		1385077	0					
ANR	1385609	Identifier	type		1385077	1					
ANR	1385610	EqualityExpression	ZEND_OP2 ( opline ) . var == var		1385077	1		==			
ANR	1385611	MemberAccess	ZEND_OP2 ( opline ) . var		1385077	0					
ANR	1385612	CallExpression	ZEND_OP2 ( opline )		1385077	0					
ANR	1385613	Callee	ZEND_OP2		1385077	0					
ANR	1385614	Identifier	ZEND_OP2		1385077	0					
ANR	1385615	ArgumentList	opline		1385077	1					
ANR	1385616	Argument	opline		1385077	0					
ANR	1385617	Identifier	opline		1385077	0					
ANR	1385618	Identifier	var		1385077	1					
ANR	1385619	Identifier	var		1385077	1					
ANR	1385620	CompoundStatement		110:32:3240:3240	1385077	1					
ANR	1385621	ReturnStatement	"return zend_optimizer_update_op2_const ( op_array , opline , val ) ;"	477:3:15291:15352	1385077	0	True				
ANR	1385622	CallExpression	"zend_optimizer_update_op2_const ( op_array , opline , val )"		1385077	0					
ANR	1385623	Callee	zend_optimizer_update_op2_const		1385077	0					
ANR	1385624	Identifier	zend_optimizer_update_op2_const		1385077	0					
ANR	1385625	ArgumentList	op_array		1385077	1					
ANR	1385626	Argument	op_array		1385077	0					
ANR	1385627	Identifier	op_array		1385077	0					
ANR	1385628	Argument	opline		1385077	1					
ANR	1385629	Identifier	opline		1385077	0					
ANR	1385630	Argument	val		1385077	2					
ANR	1385631	Identifier	val		1385077	0					
ANR	1385632	ExpressionStatement	opline ++	479:2:15360:15368	1385077	2	True				
ANR	1385633	PostIncDecOperationExpression	opline ++		1385077	0					
ANR	1385634	Identifier	opline		1385077	0					
ANR	1385635	IncDec	++		1385077	1					
ANR	1385636	ReturnStatement	return 1 ;	482:1:15375:15383	1385077	2	True				
ANR	1385637	PrimaryExpression	1		1385077	0					
ANR	1385638	ReturnType	int		1385077	1					
ANR	1385639	Identifier	zend_optimizer_replace_by_const		1385077	2					
ANR	1385640	ParameterList	"zend_op_array * op_array , zend_op * opline , zend_uchar type , uint32_t var , zval * val"		1385077	3					
ANR	1385641	Parameter	zend_op_array * op_array	362:36:11792:11814	1385077	0	True				
ANR	1385642	ParameterType	zend_op_array *		1385077	0					
ANR	1385643	Identifier	op_array		1385077	1					
ANR	1385644	Parameter	zend_op * opline	363:36:11853:11873	1385077	1	True				
ANR	1385645	ParameterType	zend_op *		1385077	0					
ANR	1385646	Identifier	opline		1385077	1					
ANR	1385647	Parameter	zend_uchar type	364:36:11912:11930	1385077	2	True				
ANR	1385648	ParameterType	zend_uchar		1385077	0					
ANR	1385649	Identifier	type		1385077	1					
ANR	1385650	Parameter	uint32_t var	365:36:11969:11986	1385077	3	True				
ANR	1385651	ParameterType	uint32_t		1385077	0					
ANR	1385652	Identifier	var		1385077	1					
ANR	1385653	Parameter	zval * val	366:36:12025:12042	1385077	4	True				
ANR	1385654	ParameterType	zval *		1385077	0					
ANR	1385655	Identifier	val		1385077	1					
ANR	1385656	CFGEntryNode	ENTRY		1385077		True				
ANR	1385657	CFGExitNode	EXIT		1385077		True				
ANR	1385658	Symbol	ZEND_FREE		1385077						
ANR	1385659	Symbol	m -> opcode		1385077						
ANR	1385660	Symbol	ret_info -> type_hint		1385077						
ANR	1385661	Symbol	type		1385077						
ANR	1385662	Symbol	ZEND_OP2_TYPE		1385077						
ANR	1385663	Symbol	opline -> extended_value		1385077						
ANR	1385664	Symbol	opline		1385077						
ANR	1385665	Symbol	op_array -> fn_flags		1385077						
ANR	1385666	Symbol	& old_val		1385077						
ANR	1385667	Symbol	ZEND_SEND_VAL_EX		1385077						
ANR	1385668	Symbol	brk		1385077						
ANR	1385669	Symbol	ZEND_OP1 ( m ) . var		1385077						
ANR	1385670	Symbol	val		1385077						
ANR	1385671	Symbol	zend_optimizer_update_op2_const		1385077						
ANR	1385672	Symbol	ZEND_RETURN		1385077						
ANR	1385673	Symbol	var		1385077						
ANR	1385674	Symbol	ZEND_OP2 ( opline ) . var		1385077						
ANR	1385675	Symbol	* op_array		1385077						
ANR	1385676	Symbol	op_array -> last		1385077						
ANR	1385677	Symbol	in_switch		1385077						
ANR	1385678	Symbol	ZEND_SEND_VAL		1385077						
ANR	1385679	Symbol	op_array -> brk_cont_array [ brk ] . brk		1385077						
ANR	1385680	Symbol	ZEND_SAME_FAKE_TYPE		1385077						
ANR	1385681	Symbol	op_array -> brk_cont_array [ brk ] . start		1385077						
ANR	1385682	Symbol	ret_info -> class_name		1385077						
ANR	1385683	Symbol	* * op_array		1385077						
ANR	1385684	Symbol	ZEND_ARG_SEND_BY_REF		1385077						
ANR	1385685	Symbol	old_val		1385077						
ANR	1385686	Symbol	ZEND_CASE		1385077						
ANR	1385687	Symbol	op_array -> brk_cont_array		1385077						
ANR	1385688	Symbol	op_array -> opcodes		1385077						
ANR	1385689	Symbol	ZEND_RETURN_BY_REF		1385077						
ANR	1385690	Symbol	* ret_info		1385077						
ANR	1385691	Symbol	( opline + 1 ) -> opcode		1385077						
ANR	1385692	Symbol	end		1385077						
ANR	1385693	Symbol	IS_CALLABLE		1385077						
ANR	1385694	Symbol	* op_array -> brk_cont_array		1385077						
ANR	1385695	Symbol	ZEND_OP1 ( opline ) . var		1385077						
ANR	1385696	Symbol	Z_TYPE_P		1385077						
ANR	1385697	Symbol	m		1385077						
ANR	1385698	Symbol	ZEND_OP1		1385077						
ANR	1385699	Symbol	n		1385077						
ANR	1385700	Symbol	op_array -> last_brk_cont		1385077						
ANR	1385701	Symbol	ZEND_OP2		1385077						
ANR	1385702	Symbol	ZEND_OP1_TYPE		1385077						
ANR	1385703	Symbol	* opline		1385077						
ANR	1385704	Symbol	ret_info		1385077						
ANR	1385705	Symbol	opline -> opcode		1385077						
ANR	1385706	Symbol	* m		1385077						
ANR	1385707	Symbol	ZEND_ACC_RETURN_REFERENCE		1385077						
ANR	1385708	Symbol	zend_optimizer_update_op1_const		1385077						
ANR	1385709	Symbol	* brk		1385077						
ANR	1385710	Symbol	ZEND_ARG_COMPILE_TIME_BOUND		1385077						
ANR	1385711	Symbol	op_array		1385077						
ANR	1385712	Symbol	op_array -> arg_info		1385077						
ANR	1385713	Function	zend_optimize	485:0:15388:17184							
ANR	1385714	FunctionDef	"zend_optimize (zend_op_array * op_array , zend_optimizer_ctx * ctx)"		1385713	0					
ANR	1385715	CompoundStatement		487:0:15495:17184	1385713	0					
ANR	1385716	IfStatement	if ( op_array -> type == ZEND_EVAL_CODE )		1385713	0					
ANR	1385717	Condition	op_array -> type == ZEND_EVAL_CODE	488:5:15502:15533	1385713	0	True				
ANR	1385718	EqualityExpression	op_array -> type == ZEND_EVAL_CODE		1385713	0		==			
ANR	1385719	PtrMemberAccess	op_array -> type		1385713	0					
ANR	1385720	Identifier	op_array		1385713	0					
ANR	1385721	Identifier	type		1385713	1					
ANR	1385722	Identifier	ZEND_EVAL_CODE		1385713	1					
ANR	1385723	CompoundStatement		2:39:40:40	1385713	1					
ANR	1385724	ReturnStatement	return ;	489:2:15540:15546	1385713	0	True				
ANR	1385725	IfStatement	if ( ZEND_OPTIMIZER_PASS_1 & OPTIMIZATION_LEVEL )		1385713	1					
ANR	1385726	Condition	ZEND_OPTIMIZER_PASS_1 & OPTIMIZATION_LEVEL	498:5:15809:15850	1385713	0	True				
ANR	1385727	BitAndExpression	ZEND_OPTIMIZER_PASS_1 & OPTIMIZATION_LEVEL		1385713	0		&			
ANR	1385728	Identifier	ZEND_OPTIMIZER_PASS_1		1385713	0					
ANR	1385729	Identifier	OPTIMIZATION_LEVEL		1385713	1					
ANR	1385730	CompoundStatement		12:49:357:357	1385713	1					
ANR	1385731	ExpressionStatement	"zend_optimizer_pass1 ( op_array , ctx )"	499:2:15857:15892	1385713	0	True				
ANR	1385732	CallExpression	"zend_optimizer_pass1 ( op_array , ctx )"		1385713	0					
ANR	1385733	Callee	zend_optimizer_pass1		1385713	0					
ANR	1385734	Identifier	zend_optimizer_pass1		1385713	0					
ANR	1385735	ArgumentList	op_array		1385713	1					
ANR	1385736	Argument	op_array		1385713	0					
ANR	1385737	Identifier	op_array		1385713	0					
ANR	1385738	Argument	ctx		1385713	1					
ANR	1385739	Identifier	ctx		1385713	0					
ANR	1385740	IfStatement	if ( ZEND_OPTIMIZER_PASS_2 & OPTIMIZATION_LEVEL )		1385713	2					
ANR	1385741	Condition	ZEND_OPTIMIZER_PASS_2 & OPTIMIZATION_LEVEL	508:5:16119:16160	1385713	0	True				
ANR	1385742	BitAndExpression	ZEND_OPTIMIZER_PASS_2 & OPTIMIZATION_LEVEL		1385713	0		&			
ANR	1385743	Identifier	ZEND_OPTIMIZER_PASS_2		1385713	0					
ANR	1385744	Identifier	OPTIMIZATION_LEVEL		1385713	1					
ANR	1385745	CompoundStatement		22:49:667:667	1385713	1					
ANR	1385746	ExpressionStatement	zend_optimizer_pass2 ( op_array )	509:2:16167:16197	1385713	0	True				
ANR	1385747	CallExpression	zend_optimizer_pass2 ( op_array )		1385713	0					
ANR	1385748	Callee	zend_optimizer_pass2		1385713	0					
ANR	1385749	Identifier	zend_optimizer_pass2		1385713	0					
ANR	1385750	ArgumentList	op_array		1385713	1					
ANR	1385751	Argument	op_array		1385713	0					
ANR	1385752	Identifier	op_array		1385713	0					
ANR	1385753	IfStatement	if ( ZEND_OPTIMIZER_PASS_3 & OPTIMIZATION_LEVEL )		1385713	3					
ANR	1385754	Condition	ZEND_OPTIMIZER_PASS_3 & OPTIMIZATION_LEVEL	517:5:16336:16377	1385713	0	True				
ANR	1385755	BitAndExpression	ZEND_OPTIMIZER_PASS_3 & OPTIMIZATION_LEVEL		1385713	0		&			
ANR	1385756	Identifier	ZEND_OPTIMIZER_PASS_3		1385713	0					
ANR	1385757	Identifier	OPTIMIZATION_LEVEL		1385713	1					
ANR	1385758	CompoundStatement		31:49:884:884	1385713	1					
ANR	1385759	ExpressionStatement	zend_optimizer_pass3 ( op_array )	518:2:16384:16414	1385713	0	True				
ANR	1385760	CallExpression	zend_optimizer_pass3 ( op_array )		1385713	0					
ANR	1385761	Callee	zend_optimizer_pass3		1385713	0					
ANR	1385762	Identifier	zend_optimizer_pass3		1385713	0					
ANR	1385763	ArgumentList	op_array		1385713	1					
ANR	1385764	Argument	op_array		1385713	0					
ANR	1385765	Identifier	op_array		1385713	0					
ANR	1385766	IfStatement	if ( ZEND_OPTIMIZER_PASS_4 & OPTIMIZATION_LEVEL )		1385713	4					
ANR	1385767	Condition	ZEND_OPTIMIZER_PASS_4 & OPTIMIZATION_LEVEL	524:5:16479:16520	1385713	0	True				
ANR	1385768	BitAndExpression	ZEND_OPTIMIZER_PASS_4 & OPTIMIZATION_LEVEL		1385713	0		&			
ANR	1385769	Identifier	ZEND_OPTIMIZER_PASS_4		1385713	0					
ANR	1385770	Identifier	OPTIMIZATION_LEVEL		1385713	1					
ANR	1385771	CompoundStatement		38:49:1027:1027	1385713	1					
ANR	1385772	ExpressionStatement	"optimize_func_calls ( op_array , ctx )"	525:2:16527:16561	1385713	0	True				
ANR	1385773	CallExpression	"optimize_func_calls ( op_array , ctx )"		1385713	0					
ANR	1385774	Callee	optimize_func_calls		1385713	0					
ANR	1385775	Identifier	optimize_func_calls		1385713	0					
ANR	1385776	ArgumentList	op_array		1385713	1					
ANR	1385777	Argument	op_array		1385713	0					
ANR	1385778	Identifier	op_array		1385713	0					
ANR	1385779	Argument	ctx		1385713	1					
ANR	1385780	Identifier	ctx		1385713	0					
ANR	1385781	IfStatement	if ( ZEND_OPTIMIZER_PASS_5 & OPTIMIZATION_LEVEL )		1385713	5					
ANR	1385782	Condition	ZEND_OPTIMIZER_PASS_5 & OPTIMIZATION_LEVEL	531:5:16612:16653	1385713	0	True				
ANR	1385783	BitAndExpression	ZEND_OPTIMIZER_PASS_5 & OPTIMIZATION_LEVEL		1385713	0		&			
ANR	1385784	Identifier	ZEND_OPTIMIZER_PASS_5		1385713	0					
ANR	1385785	Identifier	OPTIMIZATION_LEVEL		1385713	1					
ANR	1385786	CompoundStatement		45:49:1160:1160	1385713	1					
ANR	1385787	ExpressionStatement	"optimize_cfg ( op_array , ctx )"	532:2:16660:16687	1385713	0	True				
ANR	1385788	CallExpression	"optimize_cfg ( op_array , ctx )"		1385713	0					
ANR	1385789	Callee	optimize_cfg		1385713	0					
ANR	1385790	Identifier	optimize_cfg		1385713	0					
ANR	1385791	ArgumentList	op_array		1385713	1					
ANR	1385792	Argument	op_array		1385713	0					
ANR	1385793	Identifier	op_array		1385713	0					
ANR	1385794	Argument	ctx		1385713	1					
ANR	1385795	Identifier	ctx		1385713	0					
ANR	1385796	IfStatement	if ( ZEND_OPTIMIZER_PASS_9 & OPTIMIZATION_LEVEL )		1385713	6					
ANR	1385797	Condition	ZEND_OPTIMIZER_PASS_9 & OPTIMIZATION_LEVEL	538:5:16751:16792	1385713	0	True				
ANR	1385798	BitAndExpression	ZEND_OPTIMIZER_PASS_9 & OPTIMIZATION_LEVEL		1385713	0		&			
ANR	1385799	Identifier	ZEND_OPTIMIZER_PASS_9		1385713	0					
ANR	1385800	Identifier	OPTIMIZATION_LEVEL		1385713	1					
ANR	1385801	CompoundStatement		52:49:1299:1299	1385713	1					
ANR	1385802	ExpressionStatement	"optimize_temporary_variables ( op_array , ctx )"	539:2:16799:16842	1385713	0	True				
ANR	1385803	CallExpression	"optimize_temporary_variables ( op_array , ctx )"		1385713	0					
ANR	1385804	Callee	optimize_temporary_variables		1385713	0					
ANR	1385805	Identifier	optimize_temporary_variables		1385713	0					
ANR	1385806	ArgumentList	op_array		1385713	1					
ANR	1385807	Argument	op_array		1385713	0					
ANR	1385808	Identifier	op_array		1385713	0					
ANR	1385809	Argument	ctx		1385713	1					
ANR	1385810	Identifier	ctx		1385713	0					
ANR	1385811	IfStatement	if ( ( ( ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5 ) & OPTIMIZATION_LEVEL ) == ZEND_OPTIMIZER_PASS_10 )		1385713	7					
ANR	1385812	Condition	( ( ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5 ) & OPTIMIZATION_LEVEL ) == ZEND_OPTIMIZER_PASS_10	545:5:16889:16983	1385713	0	True				
ANR	1385813	EqualityExpression	( ( ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5 ) & OPTIMIZATION_LEVEL ) == ZEND_OPTIMIZER_PASS_10		1385713	0		==			
ANR	1385814	BitAndExpression	( ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5 ) & OPTIMIZATION_LEVEL		1385713	0		&			
ANR	1385815	InclusiveOrExpression	ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5		1385713	0		|			
ANR	1385816	Identifier	ZEND_OPTIMIZER_PASS_10		1385713	0					
ANR	1385817	Identifier	ZEND_OPTIMIZER_PASS_5		1385713	1					
ANR	1385818	Identifier	OPTIMIZATION_LEVEL		1385713	1					
ANR	1385819	Identifier	ZEND_OPTIMIZER_PASS_10		1385713	1					
ANR	1385820	CompoundStatement		59:102:1490:1490	1385713	1					
ANR	1385821	ExpressionStatement	zend_optimizer_nop_removal ( op_array )	546:2:16990:17026	1385713	0	True				
ANR	1385822	CallExpression	zend_optimizer_nop_removal ( op_array )		1385713	0					
ANR	1385823	Callee	zend_optimizer_nop_removal		1385713	0					
ANR	1385824	Identifier	zend_optimizer_nop_removal		1385713	0					
ANR	1385825	ArgumentList	op_array		1385713	1					
ANR	1385826	Argument	op_array		1385713	0					
ANR	1385827	Identifier	op_array		1385713	0					
ANR	1385828	IfStatement	if ( ZEND_OPTIMIZER_PASS_11 & OPTIMIZATION_LEVEL )		1385713	8					
ANR	1385829	Condition	ZEND_OPTIMIZER_PASS_11 & OPTIMIZATION_LEVEL	552:5:17084:17126	1385713	0	True				
ANR	1385830	BitAndExpression	ZEND_OPTIMIZER_PASS_11 & OPTIMIZATION_LEVEL		1385713	0		&			
ANR	1385831	Identifier	ZEND_OPTIMIZER_PASS_11		1385713	0					
ANR	1385832	Identifier	OPTIMIZATION_LEVEL		1385713	1					
ANR	1385833	CompoundStatement		66:50:1633:1633	1385713	1					
ANR	1385834	ExpressionStatement	"zend_optimizer_compact_literals ( op_array , ctx )"	553:2:17133:17179	1385713	0	True				
ANR	1385835	CallExpression	"zend_optimizer_compact_literals ( op_array , ctx )"		1385713	0					
ANR	1385836	Callee	zend_optimizer_compact_literals		1385713	0					
ANR	1385837	Identifier	zend_optimizer_compact_literals		1385713	0					
ANR	1385838	ArgumentList	op_array		1385713	1					
ANR	1385839	Argument	op_array		1385713	0					
ANR	1385840	Identifier	op_array		1385713	0					
ANR	1385841	Argument	ctx		1385713	1					
ANR	1385842	Identifier	ctx		1385713	0					
ANR	1385843	ReturnType	static void		1385713	1					
ANR	1385844	Identifier	zend_optimize		1385713	2					
ANR	1385845	ParameterList	"zend_op_array * op_array , zend_optimizer_ctx * ctx"		1385713	3					
ANR	1385846	Parameter	zend_op_array * op_array	485:26:15414:15441	1385713	0	True				
ANR	1385847	ParameterType	zend_op_array *		1385713	0					
ANR	1385848	Identifier	op_array		1385713	1					
ANR	1385849	Parameter	zend_optimizer_ctx * ctx	486:26:15470:15492	1385713	1	True				
ANR	1385850	ParameterType	zend_optimizer_ctx *		1385713	0					
ANR	1385851	Identifier	ctx		1385713	1					
ANR	1385852	CFGEntryNode	ENTRY		1385713		True				
ANR	1385853	CFGExitNode	EXIT		1385713		True				
ANR	1385854	Symbol	ZEND_OPTIMIZER_PASS_10		1385713						
ANR	1385855	Symbol	ZEND_OPTIMIZER_PASS_1		1385713						
ANR	1385856	Symbol	ZEND_OPTIMIZER_PASS_11		1385713						
ANR	1385857	Symbol	ZEND_OPTIMIZER_PASS_2		1385713						
ANR	1385858	Symbol	ZEND_OPTIMIZER_PASS_3		1385713						
ANR	1385859	Symbol	ctx		1385713						
ANR	1385860	Symbol	ZEND_OPTIMIZER_PASS_4		1385713						
ANR	1385861	Symbol	ZEND_OPTIMIZER_PASS_5		1385713						
ANR	1385862	Symbol	* op_array		1385713						
ANR	1385863	Symbol	op_array -> type		1385713						
ANR	1385864	Symbol	ZEND_EVAL_CODE		1385713						
ANR	1385865	Symbol	OPTIMIZATION_LEVEL		1385713						
ANR	1385866	Symbol	ZEND_OPTIMIZER_PASS_9		1385713						
ANR	1385867	Symbol	op_array		1385713						
ANR	1385868	Function	zend_accel_optimize	557:0:17187:19881							
ANR	1385869	FunctionDef	"zend_accel_optimize (zend_op_array * op_array , zend_optimizer_ctx * ctx)"		1385868	0					
ANR	1385870	CompoundStatement		559:0:17306:19881	1385868	0					
ANR	1385871	IdentifierDeclStatement	"zend_op * opline , * end ;"	560:1:17309:17330	1385868	0	True				
ANR	1385872	IdentifierDecl	* opline		1385868	0					
ANR	1385873	IdentifierDeclType	zend_op *		1385868	0					
ANR	1385874	Identifier	opline		1385868	1					
ANR	1385875	IdentifierDecl	* end		1385868	1					
ANR	1385876	IdentifierDeclType	zend_op *		1385868	0					
ANR	1385877	Identifier	end		1385868	1					
ANR	1385878	ExpressionStatement	opline = op_array -> opcodes	563:1:17359:17385	1385868	1	True				
ANR	1385879	AssignmentExpression	opline = op_array -> opcodes		1385868	0		=			
ANR	1385880	Identifier	opline		1385868	0					
ANR	1385881	PtrMemberAccess	op_array -> opcodes		1385868	1					
ANR	1385882	Identifier	op_array		1385868	0					
ANR	1385883	Identifier	opcodes		1385868	1					
ANR	1385884	ExpressionStatement	end = opline + op_array -> last	564:1:17388:17417	1385868	2	True				
ANR	1385885	AssignmentExpression	end = opline + op_array -> last		1385868	0		=			
ANR	1385886	Identifier	end		1385868	0					
ANR	1385887	AdditiveExpression	opline + op_array -> last		1385868	1		+			
ANR	1385888	Identifier	opline		1385868	0					
ANR	1385889	PtrMemberAccess	op_array -> last		1385868	1					
ANR	1385890	Identifier	op_array		1385868	0					
ANR	1385891	Identifier	last		1385868	1					
ANR	1385892	WhileStatement	while ( opline < end )		1385868	3					
ANR	1385893	Condition	opline < end	565:8:17427:17438	1385868	0	True				
ANR	1385894	RelationalExpression	opline < end		1385868	0		<			
ANR	1385895	Identifier	opline		1385868	0					
ANR	1385896	Identifier	end		1385868	1					
ANR	1385897	CompoundStatement		7:22:134:134	1385868	1					
ANR	1385898	IfStatement	if ( opline -> op1_type == IS_CONST )		1385868	0					
ANR	1385899	Condition	opline -> op1_type == IS_CONST	566:6:17449:17476	1385868	0	True				
ANR	1385900	EqualityExpression	opline -> op1_type == IS_CONST		1385868	0		==			
ANR	1385901	PtrMemberAccess	opline -> op1_type		1385868	0					
ANR	1385902	Identifier	opline		1385868	0					
ANR	1385903	Identifier	op1_type		1385868	1					
ANR	1385904	Identifier	IS_CONST		1385868	1					
ANR	1385905	CompoundStatement		8:36:172:172	1385868	1					
ANR	1385906	ExpressionStatement	"ZEND_PASS_TWO_UNDO_CONSTANT ( op_array , opline -> op1 )"	567:3:17484:17534	1385868	0	True				
ANR	1385907	CallExpression	"ZEND_PASS_TWO_UNDO_CONSTANT ( op_array , opline -> op1 )"		1385868	0					
ANR	1385908	Callee	ZEND_PASS_TWO_UNDO_CONSTANT		1385868	0					
ANR	1385909	Identifier	ZEND_PASS_TWO_UNDO_CONSTANT		1385868	0					
ANR	1385910	ArgumentList	op_array		1385868	1					
ANR	1385911	Argument	op_array		1385868	0					
ANR	1385912	Identifier	op_array		1385868	0					
ANR	1385913	Argument	opline -> op1		1385868	1					
ANR	1385914	PtrMemberAccess	opline -> op1		1385868	0					
ANR	1385915	Identifier	opline		1385868	0					
ANR	1385916	Identifier	op1		1385868	1					
ANR	1385917	IfStatement	if ( opline -> op2_type == IS_CONST )		1385868	1					
ANR	1385918	Condition	opline -> op2_type == IS_CONST	569:6:17546:17573	1385868	0	True				
ANR	1385919	EqualityExpression	opline -> op2_type == IS_CONST		1385868	0		==			
ANR	1385920	PtrMemberAccess	opline -> op2_type		1385868	0					
ANR	1385921	Identifier	opline		1385868	0					
ANR	1385922	Identifier	op2_type		1385868	1					
ANR	1385923	Identifier	IS_CONST		1385868	1					
ANR	1385924	CompoundStatement		11:36:269:269	1385868	1					
ANR	1385925	ExpressionStatement	"ZEND_PASS_TWO_UNDO_CONSTANT ( op_array , opline -> op2 )"	570:3:17581:17631	1385868	0	True				
ANR	1385926	CallExpression	"ZEND_PASS_TWO_UNDO_CONSTANT ( op_array , opline -> op2 )"		1385868	0					
ANR	1385927	Callee	ZEND_PASS_TWO_UNDO_CONSTANT		1385868	0					
ANR	1385928	Identifier	ZEND_PASS_TWO_UNDO_CONSTANT		1385868	0					
ANR	1385929	ArgumentList	op_array		1385868	1					
ANR	1385930	Argument	op_array		1385868	0					
ANR	1385931	Identifier	op_array		1385868	0					
ANR	1385932	Argument	opline -> op2		1385868	1					
ANR	1385933	PtrMemberAccess	opline -> op2		1385868	0					
ANR	1385934	Identifier	opline		1385868	0					
ANR	1385935	Identifier	op2		1385868	1					
ANR	1385936	SwitchStatement	switch ( opline -> opcode )		1385868	2					
ANR	1385937	Condition	opline -> opcode	572:10:17647:17660	1385868	0	True				
ANR	1385938	PtrMemberAccess	opline -> opcode		1385868	0					
ANR	1385939	Identifier	opline		1385868	0					
ANR	1385940	Identifier	opcode		1385868	1					
ANR	1385941	CompoundStatement		14:26:356:356	1385868	1					
ANR	1385942	Label	case ZEND_JMP :	573:3:17668:17681	1385868	0	True				
ANR	1385943	Identifier	ZEND_JMP		1385868	0					
ANR	1385944	Label	case ZEND_FAST_CALL :	574:3:17686:17705	1385868	1	True				
ANR	1385945	Identifier	ZEND_FAST_CALL		1385868	0					
ANR	1385946	Label	case ZEND_DECLARE_ANON_CLASS :	575:3:17710:17738	1385868	2	True				
ANR	1385947	Identifier	ZEND_DECLARE_ANON_CLASS		1385868	0					
ANR	1385948	Label	case ZEND_DECLARE_ANON_INHERITED_CLASS :	576:3:17743:17781	1385868	3	True				
ANR	1385949	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		1385868	0					
ANR	1385950	ExpressionStatement	"ZEND_PASS_TWO_UNDO_JMP_TARGET ( op_array , opline , ZEND_OP1 ( opline ) )"	577:4:17787:17852	1385868	4	True				
ANR	1385951	CallExpression	"ZEND_PASS_TWO_UNDO_JMP_TARGET ( op_array , opline , ZEND_OP1 ( opline ) )"		1385868	0					
ANR	1385952	Callee	ZEND_PASS_TWO_UNDO_JMP_TARGET		1385868	0					
ANR	1385953	Identifier	ZEND_PASS_TWO_UNDO_JMP_TARGET		1385868	0					
ANR	1385954	ArgumentList	op_array		1385868	1					
ANR	1385955	Argument	op_array		1385868	0					
ANR	1385956	Identifier	op_array		1385868	0					
ANR	1385957	Argument	opline		1385868	1					
ANR	1385958	Identifier	opline		1385868	0					
ANR	1385959	Argument	ZEND_OP1 ( opline )		1385868	2					
ANR	1385960	CallExpression	ZEND_OP1 ( opline )		1385868	0					
ANR	1385961	Callee	ZEND_OP1		1385868	0					
ANR	1385962	Identifier	ZEND_OP1		1385868	0					
ANR	1385963	ArgumentList	opline		1385868	1					
ANR	1385964	Argument	opline		1385868	0					
ANR	1385965	Identifier	opline		1385868	0					
ANR	1385966	BreakStatement	break ;	578:4:17858:17863	1385868	5	True				
ANR	1385967	Label	case ZEND_JMPZNZ :	579:3:17868:17884	1385868	6	True				
ANR	1385968	Identifier	ZEND_JMPZNZ		1385868	0					
ANR	1385969	ExpressionStatement	"opline -> extended_value = ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"	581:4:17936:18028	1385868	7	True				
ANR	1385970	AssignmentExpression	"opline -> extended_value = ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"		1385868	0		=			
ANR	1385971	PtrMemberAccess	opline -> extended_value		1385868	0					
ANR	1385972	Identifier	opline		1385868	0					
ANR	1385973	Identifier	extended_value		1385868	1					
ANR	1385974	CallExpression	"ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"		1385868	1					
ANR	1385975	Callee	ZEND_OFFSET_TO_OPLINE_NUM		1385868	0					
ANR	1385976	Identifier	ZEND_OFFSET_TO_OPLINE_NUM		1385868	0					
ANR	1385977	ArgumentList	op_array		1385868	1					
ANR	1385978	Argument	op_array		1385868	0					
ANR	1385979	Identifier	op_array		1385868	0					
ANR	1385980	Argument	opline		1385868	1					
ANR	1385981	Identifier	opline		1385868	0					
ANR	1385982	Argument	opline -> extended_value		1385868	2					
ANR	1385983	PtrMemberAccess	opline -> extended_value		1385868	0					
ANR	1385984	Identifier	opline		1385868	0					
ANR	1385985	Identifier	extended_value		1385868	1					
ANR	1385986	Label	case ZEND_JMPZ :	583:3:18071:18085	1385868	8	True				
ANR	1385987	Identifier	ZEND_JMPZ		1385868	0					
ANR	1385988	Label	case ZEND_JMPNZ :	584:3:18090:18105	1385868	9	True				
ANR	1385989	Identifier	ZEND_JMPNZ		1385868	0					
ANR	1385990	Label	case ZEND_JMPZ_EX :	585:3:18110:18127	1385868	10	True				
ANR	1385991	Identifier	ZEND_JMPZ_EX		1385868	0					
ANR	1385992	Label	case ZEND_JMPNZ_EX :	586:3:18132:18150	1385868	11	True				
ANR	1385993	Identifier	ZEND_JMPNZ_EX		1385868	0					
ANR	1385994	Label	case ZEND_JMP_SET :	587:3:18155:18172	1385868	12	True				
ANR	1385995	Identifier	ZEND_JMP_SET		1385868	0					
ANR	1385996	Label	case ZEND_COALESCE :	588:3:18177:18195	1385868	13	True				
ANR	1385997	Identifier	ZEND_COALESCE		1385868	0					
ANR	1385998	Label	case ZEND_NEW :	589:3:18200:18213	1385868	14	True				
ANR	1385999	Identifier	ZEND_NEW		1385868	0					
ANR	1386000	Label	case ZEND_FE_RESET_R :	590:3:18218:18238	1385868	15	True				
ANR	1386001	Identifier	ZEND_FE_RESET_R		1385868	0					
ANR	1386002	Label	case ZEND_FE_RESET_RW :	591:3:18243:18264	1385868	16	True				
ANR	1386003	Identifier	ZEND_FE_RESET_RW		1385868	0					
ANR	1386004	Label	case ZEND_ASSERT_CHECK :	592:3:18269:18291	1385868	17	True				
ANR	1386005	Identifier	ZEND_ASSERT_CHECK		1385868	0					
ANR	1386006	ExpressionStatement	"ZEND_PASS_TWO_UNDO_JMP_TARGET ( op_array , opline , ZEND_OP2 ( opline ) )"	593:4:18297:18362	1385868	18	True				
ANR	1386007	CallExpression	"ZEND_PASS_TWO_UNDO_JMP_TARGET ( op_array , opline , ZEND_OP2 ( opline ) )"		1385868	0					
ANR	1386008	Callee	ZEND_PASS_TWO_UNDO_JMP_TARGET		1385868	0					
ANR	1386009	Identifier	ZEND_PASS_TWO_UNDO_JMP_TARGET		1385868	0					
ANR	1386010	ArgumentList	op_array		1385868	1					
ANR	1386011	Argument	op_array		1385868	0					
ANR	1386012	Identifier	op_array		1385868	0					
ANR	1386013	Argument	opline		1385868	1					
ANR	1386014	Identifier	opline		1385868	0					
ANR	1386015	Argument	ZEND_OP2 ( opline )		1385868	2					
ANR	1386016	CallExpression	ZEND_OP2 ( opline )		1385868	0					
ANR	1386017	Callee	ZEND_OP2		1385868	0					
ANR	1386018	Identifier	ZEND_OP2		1385868	0					
ANR	1386019	ArgumentList	opline		1385868	1					
ANR	1386020	Argument	opline		1385868	0					
ANR	1386021	Identifier	opline		1385868	0					
ANR	1386022	BreakStatement	break ;	594:4:18368:18373	1385868	19	True				
ANR	1386023	Label	case ZEND_FE_FETCH_R :	595:3:18378:18398	1385868	20	True				
ANR	1386024	Identifier	ZEND_FE_FETCH_R		1385868	0					
ANR	1386025	Label	case ZEND_FE_FETCH_RW :	596:3:18403:18424	1385868	21	True				
ANR	1386026	Identifier	ZEND_FE_FETCH_RW		1385868	0					
ANR	1386027	ExpressionStatement	"opline -> extended_value = ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"	597:4:18430:18522	1385868	22	True				
ANR	1386028	AssignmentExpression	"opline -> extended_value = ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"		1385868	0		=			
ANR	1386029	PtrMemberAccess	opline -> extended_value		1385868	0					
ANR	1386030	Identifier	opline		1385868	0					
ANR	1386031	Identifier	extended_value		1385868	1					
ANR	1386032	CallExpression	"ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"		1385868	1					
ANR	1386033	Callee	ZEND_OFFSET_TO_OPLINE_NUM		1385868	0					
ANR	1386034	Identifier	ZEND_OFFSET_TO_OPLINE_NUM		1385868	0					
ANR	1386035	ArgumentList	op_array		1385868	1					
ANR	1386036	Argument	op_array		1385868	0					
ANR	1386037	Identifier	op_array		1385868	0					
ANR	1386038	Argument	opline		1385868	1					
ANR	1386039	Identifier	opline		1385868	0					
ANR	1386040	Argument	opline -> extended_value		1385868	2					
ANR	1386041	PtrMemberAccess	opline -> extended_value		1385868	0					
ANR	1386042	Identifier	opline		1385868	0					
ANR	1386043	Identifier	extended_value		1385868	1					
ANR	1386044	BreakStatement	break ;	598:4:18528:18533	1385868	23	True				
ANR	1386045	ExpressionStatement	opline ++	600:2:18541:18549	1385868	3	True				
ANR	1386046	PostIncDecOperationExpression	opline ++		1385868	0					
ANR	1386047	Identifier	opline		1385868	0					
ANR	1386048	IncDec	++		1385868	1					
ANR	1386049	ExpressionStatement	"zend_optimize ( op_array , ctx )"	604:1:18587:18615	1385868	4	True				
ANR	1386050	CallExpression	"zend_optimize ( op_array , ctx )"		1385868	0					
ANR	1386051	Callee	zend_optimize		1385868	0					
ANR	1386052	Identifier	zend_optimize		1385868	0					
ANR	1386053	ArgumentList	op_array		1385868	1					
ANR	1386054	Argument	op_array		1385868	0					
ANR	1386055	Identifier	op_array		1385868	0					
ANR	1386056	Argument	ctx		1385868	1					
ANR	1386057	Identifier	ctx		1385868	0					
ANR	1386058	ExpressionStatement	opline = op_array -> opcodes	607:1:18642:18668	1385868	5	True				
ANR	1386059	AssignmentExpression	opline = op_array -> opcodes		1385868	0		=			
ANR	1386060	Identifier	opline		1385868	0					
ANR	1386061	PtrMemberAccess	op_array -> opcodes		1385868	1					
ANR	1386062	Identifier	op_array		1385868	0					
ANR	1386063	Identifier	opcodes		1385868	1					
ANR	1386064	ExpressionStatement	end = opline + op_array -> last	608:1:18671:18700	1385868	6	True				
ANR	1386065	AssignmentExpression	end = opline + op_array -> last		1385868	0		=			
ANR	1386066	Identifier	end		1385868	0					
ANR	1386067	AdditiveExpression	opline + op_array -> last		1385868	1		+			
ANR	1386068	Identifier	opline		1385868	0					
ANR	1386069	PtrMemberAccess	op_array -> last		1385868	1					
ANR	1386070	Identifier	op_array		1385868	0					
ANR	1386071	Identifier	last		1385868	1					
ANR	1386072	WhileStatement	while ( opline < end )		1385868	7					
ANR	1386073	Condition	opline < end	609:8:18710:18721	1385868	0	True				
ANR	1386074	RelationalExpression	opline < end		1385868	0		<			
ANR	1386075	Identifier	opline		1385868	0					
ANR	1386076	Identifier	end		1385868	1					
ANR	1386077	CompoundStatement		51:22:1417:1417	1385868	1					
ANR	1386078	IfStatement	if ( opline -> op1_type == IS_CONST )		1385868	0					
ANR	1386079	Condition	opline -> op1_type == IS_CONST	610:6:18732:18759	1385868	0	True				
ANR	1386080	EqualityExpression	opline -> op1_type == IS_CONST		1385868	0		==			
ANR	1386081	PtrMemberAccess	opline -> op1_type		1385868	0					
ANR	1386082	Identifier	opline		1385868	0					
ANR	1386083	Identifier	op1_type		1385868	1					
ANR	1386084	Identifier	IS_CONST		1385868	1					
ANR	1386085	CompoundStatement		52:36:1455:1455	1385868	1					
ANR	1386086	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op1 )"	611:3:18767:18819	1385868	0	True				
ANR	1386087	CallExpression	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op1 )"		1385868	0					
ANR	1386088	Callee	ZEND_PASS_TWO_UPDATE_CONSTANT		1385868	0					
ANR	1386089	Identifier	ZEND_PASS_TWO_UPDATE_CONSTANT		1385868	0					
ANR	1386090	ArgumentList	op_array		1385868	1					
ANR	1386091	Argument	op_array		1385868	0					
ANR	1386092	Identifier	op_array		1385868	0					
ANR	1386093	Argument	opline -> op1		1385868	1					
ANR	1386094	PtrMemberAccess	opline -> op1		1385868	0					
ANR	1386095	Identifier	opline		1385868	0					
ANR	1386096	Identifier	op1		1385868	1					
ANR	1386097	IfStatement	if ( opline -> op2_type == IS_CONST )		1385868	1					
ANR	1386098	Condition	opline -> op2_type == IS_CONST	613:6:18831:18858	1385868	0	True				
ANR	1386099	EqualityExpression	opline -> op2_type == IS_CONST		1385868	0		==			
ANR	1386100	PtrMemberAccess	opline -> op2_type		1385868	0					
ANR	1386101	Identifier	opline		1385868	0					
ANR	1386102	Identifier	op2_type		1385868	1					
ANR	1386103	Identifier	IS_CONST		1385868	1					
ANR	1386104	CompoundStatement		55:36:1554:1554	1385868	1					
ANR	1386105	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op2 )"	614:3:18866:18918	1385868	0	True				
ANR	1386106	CallExpression	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op2 )"		1385868	0					
ANR	1386107	Callee	ZEND_PASS_TWO_UPDATE_CONSTANT		1385868	0					
ANR	1386108	Identifier	ZEND_PASS_TWO_UPDATE_CONSTANT		1385868	0					
ANR	1386109	ArgumentList	op_array		1385868	1					
ANR	1386110	Argument	op_array		1385868	0					
ANR	1386111	Identifier	op_array		1385868	0					
ANR	1386112	Argument	opline -> op2		1385868	1					
ANR	1386113	PtrMemberAccess	opline -> op2		1385868	0					
ANR	1386114	Identifier	opline		1385868	0					
ANR	1386115	Identifier	op2		1385868	1					
ANR	1386116	SwitchStatement	switch ( opline -> opcode )		1385868	2					
ANR	1386117	Condition	opline -> opcode	616:10:18934:18947	1385868	0	True				
ANR	1386118	PtrMemberAccess	opline -> opcode		1385868	0					
ANR	1386119	Identifier	opline		1385868	0					
ANR	1386120	Identifier	opcode		1385868	1					
ANR	1386121	CompoundStatement		58:26:1643:1643	1385868	1					
ANR	1386122	Label	case ZEND_JMP :	617:3:18955:18968	1385868	0	True				
ANR	1386123	Identifier	ZEND_JMP		1385868	0					
ANR	1386124	Label	case ZEND_FAST_CALL :	618:3:18973:18992	1385868	1	True				
ANR	1386125	Identifier	ZEND_FAST_CALL		1385868	0					
ANR	1386126	Label	case ZEND_DECLARE_ANON_CLASS :	619:3:18997:19025	1385868	2	True				
ANR	1386127	Identifier	ZEND_DECLARE_ANON_CLASS		1385868	0					
ANR	1386128	Label	case ZEND_DECLARE_ANON_INHERITED_CLASS :	620:3:19030:19068	1385868	3	True				
ANR	1386129	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		1385868	0					
ANR	1386130	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , ZEND_OP1 ( opline ) )"	621:4:19074:19141	1385868	4	True				
ANR	1386131	CallExpression	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , ZEND_OP1 ( opline ) )"		1385868	0					
ANR	1386132	Callee	ZEND_PASS_TWO_UPDATE_JMP_TARGET		1385868	0					
ANR	1386133	Identifier	ZEND_PASS_TWO_UPDATE_JMP_TARGET		1385868	0					
ANR	1386134	ArgumentList	op_array		1385868	1					
ANR	1386135	Argument	op_array		1385868	0					
ANR	1386136	Identifier	op_array		1385868	0					
ANR	1386137	Argument	opline		1385868	1					
ANR	1386138	Identifier	opline		1385868	0					
ANR	1386139	Argument	ZEND_OP1 ( opline )		1385868	2					
ANR	1386140	CallExpression	ZEND_OP1 ( opline )		1385868	0					
ANR	1386141	Callee	ZEND_OP1		1385868	0					
ANR	1386142	Identifier	ZEND_OP1		1385868	0					
ANR	1386143	ArgumentList	opline		1385868	1					
ANR	1386144	Argument	opline		1385868	0					
ANR	1386145	Identifier	opline		1385868	0					
ANR	1386146	BreakStatement	break ;	622:4:19147:19152	1385868	5	True				
ANR	1386147	Label	case ZEND_JMPZNZ :	623:3:19157:19173	1385868	6	True				
ANR	1386148	Identifier	ZEND_JMPZNZ		1385868	0					
ANR	1386149	ExpressionStatement	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"	625:4:19223:19315	1385868	7	True				
ANR	1386150	AssignmentExpression	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		1385868	0		=			
ANR	1386151	PtrMemberAccess	opline -> extended_value		1385868	0					
ANR	1386152	Identifier	opline		1385868	0					
ANR	1386153	Identifier	extended_value		1385868	1					
ANR	1386154	CallExpression	"ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		1385868	1					
ANR	1386155	Callee	ZEND_OPLINE_NUM_TO_OFFSET		1385868	0					
ANR	1386156	Identifier	ZEND_OPLINE_NUM_TO_OFFSET		1385868	0					
ANR	1386157	ArgumentList	op_array		1385868	1					
ANR	1386158	Argument	op_array		1385868	0					
ANR	1386159	Identifier	op_array		1385868	0					
ANR	1386160	Argument	opline		1385868	1					
ANR	1386161	Identifier	opline		1385868	0					
ANR	1386162	Argument	opline -> extended_value		1385868	2					
ANR	1386163	PtrMemberAccess	opline -> extended_value		1385868	0					
ANR	1386164	Identifier	opline		1385868	0					
ANR	1386165	Identifier	extended_value		1385868	1					
ANR	1386166	Label	case ZEND_JMPZ :	627:3:19358:19372	1385868	8	True				
ANR	1386167	Identifier	ZEND_JMPZ		1385868	0					
ANR	1386168	Label	case ZEND_JMPNZ :	628:3:19377:19392	1385868	9	True				
ANR	1386169	Identifier	ZEND_JMPNZ		1385868	0					
ANR	1386170	Label	case ZEND_JMPZ_EX :	629:3:19397:19414	1385868	10	True				
ANR	1386171	Identifier	ZEND_JMPZ_EX		1385868	0					
ANR	1386172	Label	case ZEND_JMPNZ_EX :	630:3:19419:19437	1385868	11	True				
ANR	1386173	Identifier	ZEND_JMPNZ_EX		1385868	0					
ANR	1386174	Label	case ZEND_JMP_SET :	631:3:19442:19459	1385868	12	True				
ANR	1386175	Identifier	ZEND_JMP_SET		1385868	0					
ANR	1386176	Label	case ZEND_COALESCE :	632:3:19464:19482	1385868	13	True				
ANR	1386177	Identifier	ZEND_COALESCE		1385868	0					
ANR	1386178	Label	case ZEND_NEW :	633:3:19487:19500	1385868	14	True				
ANR	1386179	Identifier	ZEND_NEW		1385868	0					
ANR	1386180	Label	case ZEND_FE_RESET_R :	634:3:19505:19525	1385868	15	True				
ANR	1386181	Identifier	ZEND_FE_RESET_R		1385868	0					
ANR	1386182	Label	case ZEND_FE_RESET_RW :	635:3:19530:19551	1385868	16	True				
ANR	1386183	Identifier	ZEND_FE_RESET_RW		1385868	0					
ANR	1386184	Label	case ZEND_ASSERT_CHECK :	636:3:19556:19578	1385868	17	True				
ANR	1386185	Identifier	ZEND_ASSERT_CHECK		1385868	0					
ANR	1386186	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , ZEND_OP2 ( opline ) )"	637:4:19584:19651	1385868	18	True				
ANR	1386187	CallExpression	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , ZEND_OP2 ( opline ) )"		1385868	0					
ANR	1386188	Callee	ZEND_PASS_TWO_UPDATE_JMP_TARGET		1385868	0					
ANR	1386189	Identifier	ZEND_PASS_TWO_UPDATE_JMP_TARGET		1385868	0					
ANR	1386190	ArgumentList	op_array		1385868	1					
ANR	1386191	Argument	op_array		1385868	0					
ANR	1386192	Identifier	op_array		1385868	0					
ANR	1386193	Argument	opline		1385868	1					
ANR	1386194	Identifier	opline		1385868	0					
ANR	1386195	Argument	ZEND_OP2 ( opline )		1385868	2					
ANR	1386196	CallExpression	ZEND_OP2 ( opline )		1385868	0					
ANR	1386197	Callee	ZEND_OP2		1385868	0					
ANR	1386198	Identifier	ZEND_OP2		1385868	0					
ANR	1386199	ArgumentList	opline		1385868	1					
ANR	1386200	Argument	opline		1385868	0					
ANR	1386201	Identifier	opline		1385868	0					
ANR	1386202	BreakStatement	break ;	638:4:19657:19662	1385868	19	True				
ANR	1386203	Label	case ZEND_FE_FETCH_R :	639:3:19667:19687	1385868	20	True				
ANR	1386204	Identifier	ZEND_FE_FETCH_R		1385868	0					
ANR	1386205	Label	case ZEND_FE_FETCH_RW :	640:3:19692:19713	1385868	21	True				
ANR	1386206	Identifier	ZEND_FE_FETCH_RW		1385868	0					
ANR	1386207	ExpressionStatement	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"	641:4:19719:19811	1385868	22	True				
ANR	1386208	AssignmentExpression	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		1385868	0		=			
ANR	1386209	PtrMemberAccess	opline -> extended_value		1385868	0					
ANR	1386210	Identifier	opline		1385868	0					
ANR	1386211	Identifier	extended_value		1385868	1					
ANR	1386212	CallExpression	"ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		1385868	1					
ANR	1386213	Callee	ZEND_OPLINE_NUM_TO_OFFSET		1385868	0					
ANR	1386214	Identifier	ZEND_OPLINE_NUM_TO_OFFSET		1385868	0					
ANR	1386215	ArgumentList	op_array		1385868	1					
ANR	1386216	Argument	op_array		1385868	0					
ANR	1386217	Identifier	op_array		1385868	0					
ANR	1386218	Argument	opline		1385868	1					
ANR	1386219	Identifier	opline		1385868	0					
ANR	1386220	Argument	opline -> extended_value		1385868	2					
ANR	1386221	PtrMemberAccess	opline -> extended_value		1385868	0					
ANR	1386222	Identifier	opline		1385868	0					
ANR	1386223	Identifier	extended_value		1385868	1					
ANR	1386224	BreakStatement	break ;	642:4:19817:19822	1385868	23	True				
ANR	1386225	ExpressionStatement	ZEND_VM_SET_OPCODE_HANDLER ( opline )	644:2:19830:19864	1385868	3	True				
ANR	1386226	CallExpression	ZEND_VM_SET_OPCODE_HANDLER ( opline )		1385868	0					
ANR	1386227	Callee	ZEND_VM_SET_OPCODE_HANDLER		1385868	0					
ANR	1386228	Identifier	ZEND_VM_SET_OPCODE_HANDLER		1385868	0					
ANR	1386229	ArgumentList	opline		1385868	1					
ANR	1386230	Argument	opline		1385868	0					
ANR	1386231	Identifier	opline		1385868	0					
ANR	1386232	ExpressionStatement	opline ++	645:2:19868:19876	1385868	4	True				
ANR	1386233	PostIncDecOperationExpression	opline ++		1385868	0					
ANR	1386234	Identifier	opline		1385868	0					
ANR	1386235	IncDec	++		1385868	1					
ANR	1386236	ReturnType	static void		1385868	1					
ANR	1386237	Identifier	zend_accel_optimize		1385868	2					
ANR	1386238	ParameterList	"zend_op_array * op_array , zend_optimizer_ctx * ctx"		1385868	3					
ANR	1386239	Parameter	zend_op_array * op_array	557:32:17219:17246	1385868	0	True				
ANR	1386240	ParameterType	zend_op_array *		1385868	0					
ANR	1386241	Identifier	op_array		1385868	1					
ANR	1386242	Parameter	zend_optimizer_ctx * ctx	558:32:17281:17303	1385868	1	True				
ANR	1386243	ParameterType	zend_optimizer_ctx *		1385868	0					
ANR	1386244	Identifier	ctx		1385868	1					
ANR	1386245	CFGEntryNode	ENTRY		1385868		True				
ANR	1386246	CFGExitNode	EXIT		1385868		True				
ANR	1386247	Symbol	opline -> op1		1385868						
ANR	1386248	Symbol	opline -> op2		1385868						
ANR	1386249	Symbol	IS_CONST		1385868						
ANR	1386250	Symbol	ZEND_OFFSET_TO_OPLINE_NUM		1385868						
ANR	1386251	Symbol	ctx		1385868						
ANR	1386252	Symbol	* op_array		1385868						
ANR	1386253	Symbol	opline -> op1_type		1385868						
ANR	1386254	Symbol	ZEND_OP1		1385868						
ANR	1386255	Symbol	opline -> extended_value		1385868						
ANR	1386256	Symbol	ZEND_OPLINE_NUM_TO_OFFSET		1385868						
ANR	1386257	Symbol	ZEND_OP2		1385868						
ANR	1386258	Symbol	op_array -> last		1385868						
ANR	1386259	Symbol	opline		1385868						
ANR	1386260	Symbol	op_array -> opcodes		1385868						
ANR	1386261	Symbol	* opline		1385868						
ANR	1386262	Symbol	opline -> opcode		1385868						
ANR	1386263	Symbol	end		1385868						
ANR	1386264	Symbol	opline -> op2_type		1385868						
ANR	1386265	Symbol	op_array		1385868						
ANR	1386266	Function	zend_accel_adjust_fcall_stack_size	649:0:19884:20388							
ANR	1386267	FunctionDef	"zend_accel_adjust_fcall_stack_size (zend_op_array * op_array , zend_optimizer_ctx * ctx)"		1386266	0					
ANR	1386268	CompoundStatement		650:0:19981:20388	1386266	0					
ANR	1386269	IdentifierDeclStatement	zend_function * func ;	651:1:19984:20003	1386266	0	True				
ANR	1386270	IdentifierDecl	* func		1386266	0					
ANR	1386271	IdentifierDeclType	zend_function *		1386266	0					
ANR	1386272	Identifier	func		1386266	1					
ANR	1386273	IdentifierDeclStatement	"zend_op * opline , * end ;"	652:1:20006:20027	1386266	1	True				
ANR	1386274	IdentifierDecl	* opline		1386266	0					
ANR	1386275	IdentifierDeclType	zend_op *		1386266	0					
ANR	1386276	Identifier	opline		1386266	1					
ANR	1386277	IdentifierDecl	* end		1386266	1					
ANR	1386278	IdentifierDeclType	zend_op *		1386266	0					
ANR	1386279	Identifier	end		1386266	1					
ANR	1386280	ExpressionStatement	opline = op_array -> opcodes	654:1:20031:20057	1386266	2	True				
ANR	1386281	AssignmentExpression	opline = op_array -> opcodes		1386266	0		=			
ANR	1386282	Identifier	opline		1386266	0					
ANR	1386283	PtrMemberAccess	op_array -> opcodes		1386266	1					
ANR	1386284	Identifier	op_array		1386266	0					
ANR	1386285	Identifier	opcodes		1386266	1					
ANR	1386286	ExpressionStatement	end = opline + op_array -> last	655:1:20060:20089	1386266	3	True				
ANR	1386287	AssignmentExpression	end = opline + op_array -> last		1386266	0		=			
ANR	1386288	Identifier	end		1386266	0					
ANR	1386289	AdditiveExpression	opline + op_array -> last		1386266	1		+			
ANR	1386290	Identifier	opline		1386266	0					
ANR	1386291	PtrMemberAccess	op_array -> last		1386266	1					
ANR	1386292	Identifier	op_array		1386266	0					
ANR	1386293	Identifier	last		1386266	1					
ANR	1386294	WhileStatement	while ( opline < end )		1386266	4					
ANR	1386295	Condition	opline < end	656:8:20099:20110	1386266	0	True				
ANR	1386296	RelationalExpression	opline < end		1386266	0		<			
ANR	1386297	Identifier	opline		1386266	0					
ANR	1386298	Identifier	end		1386266	1					
ANR	1386299	CompoundStatement		7:22:131:131	1386266	1					
ANR	1386300	IfStatement	if ( opline -> opcode == ZEND_INIT_FCALL )		1386266	0					
ANR	1386301	Condition	opline -> opcode == ZEND_INIT_FCALL	657:6:20121:20153	1386266	0	True				
ANR	1386302	EqualityExpression	opline -> opcode == ZEND_INIT_FCALL		1386266	0		==			
ANR	1386303	PtrMemberAccess	opline -> opcode		1386266	0					
ANR	1386304	Identifier	opline		1386266	0					
ANR	1386305	Identifier	opcode		1386266	1					
ANR	1386306	Identifier	ZEND_INIT_FCALL		1386266	1					
ANR	1386307	CompoundStatement		8:41:174:174	1386266	1					
ANR	1386308	ExpressionStatement	"func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) ) )"	658:3:20161:20270	1386266	0	True				
ANR	1386309	AssignmentExpression	"func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) ) )"		1386266	0		=			
ANR	1386310	Identifier	func		1386266	0					
ANR	1386311	CallExpression	"zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) ) )"		1386266	1					
ANR	1386312	Callee	zend_hash_find_ptr		1386266	0					
ANR	1386313	Identifier	zend_hash_find_ptr		1386266	0					
ANR	1386314	ArgumentList	& ctx -> script -> function_table		1386266	1					
ANR	1386315	Argument	& ctx -> script -> function_table		1386266	0					
ANR	1386316	UnaryOperationExpression	& ctx -> script -> function_table		1386266	0					
ANR	1386317	UnaryOperator	&		1386266	0					
ANR	1386318	PtrMemberAccess	ctx -> script -> function_table		1386266	1					
ANR	1386319	PtrMemberAccess	ctx -> script		1386266	0					
ANR	1386320	Identifier	ctx		1386266	0					
ANR	1386321	Identifier	script		1386266	1					
ANR	1386322	Identifier	function_table		1386266	1					
ANR	1386323	Argument	"Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) )"		1386266	1					
ANR	1386324	CallExpression	"Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) )"		1386266	0					
ANR	1386325	Callee	Z_STR_P		1386266	0					
ANR	1386326	Identifier	Z_STR_P		1386266	0					
ANR	1386327	ArgumentList	"RT_CONSTANT ( op_array , opline -> op2 )"		1386266	1					
ANR	1386328	Argument	"RT_CONSTANT ( op_array , opline -> op2 )"		1386266	0					
ANR	1386329	CallExpression	"RT_CONSTANT ( op_array , opline -> op2 )"		1386266	0					
ANR	1386330	Callee	RT_CONSTANT		1386266	0					
ANR	1386331	Identifier	RT_CONSTANT		1386266	0					
ANR	1386332	ArgumentList	op_array		1386266	1					
ANR	1386333	Argument	op_array		1386266	0					
ANR	1386334	Identifier	op_array		1386266	0					
ANR	1386335	Argument	opline -> op2		1386266	1					
ANR	1386336	PtrMemberAccess	opline -> op2		1386266	0					
ANR	1386337	Identifier	opline		1386266	0					
ANR	1386338	Identifier	op2		1386266	1					
ANR	1386339	IfStatement	if ( func )		1386266	1					
ANR	1386340	Condition	func	661:7:20279:20282	1386266	0	True				
ANR	1386341	Identifier	func		1386266	0					
ANR	1386342	CompoundStatement		12:13:303:303	1386266	1					
ANR	1386343	ExpressionStatement	"opline -> op1 . num = zend_vm_calc_used_stack ( opline -> extended_value , func )"	662:4:20291:20362	1386266	0	True				
ANR	1386344	AssignmentExpression	"opline -> op1 . num = zend_vm_calc_used_stack ( opline -> extended_value , func )"		1386266	0		=			
ANR	1386345	MemberAccess	opline -> op1 . num		1386266	0					
ANR	1386346	PtrMemberAccess	opline -> op1		1386266	0					
ANR	1386347	Identifier	opline		1386266	0					
ANR	1386348	Identifier	op1		1386266	1					
ANR	1386349	Identifier	num		1386266	1					
ANR	1386350	CallExpression	"zend_vm_calc_used_stack ( opline -> extended_value , func )"		1386266	1					
ANR	1386351	Callee	zend_vm_calc_used_stack		1386266	0					
ANR	1386352	Identifier	zend_vm_calc_used_stack		1386266	0					
ANR	1386353	ArgumentList	opline -> extended_value		1386266	1					
ANR	1386354	Argument	opline -> extended_value		1386266	0					
ANR	1386355	PtrMemberAccess	opline -> extended_value		1386266	0					
ANR	1386356	Identifier	opline		1386266	0					
ANR	1386357	Identifier	extended_value		1386266	1					
ANR	1386358	Argument	func		1386266	1					
ANR	1386359	Identifier	func		1386266	0					
ANR	1386360	ExpressionStatement	opline ++	665:2:20375:20383	1386266	1	True				
ANR	1386361	PostIncDecOperationExpression	opline ++		1386266	0					
ANR	1386362	Identifier	opline		1386266	0					
ANR	1386363	IncDec	++		1386266	1					
ANR	1386364	ReturnType	static void		1386266	1					
ANR	1386365	Identifier	zend_accel_adjust_fcall_stack_size		1386266	2					
ANR	1386366	ParameterList	"zend_op_array * op_array , zend_optimizer_ctx * ctx"		1386266	3					
ANR	1386367	Parameter	zend_op_array * op_array	649:47:19931:19953	1386266	0	True				
ANR	1386368	ParameterType	zend_op_array *		1386266	0					
ANR	1386369	Identifier	op_array		1386266	1					
ANR	1386370	Parameter	zend_optimizer_ctx * ctx	649:72:19956:19978	1386266	1	True				
ANR	1386371	ParameterType	zend_optimizer_ctx *		1386266	0					
ANR	1386372	Identifier	ctx		1386266	1					
ANR	1386373	CFGEntryNode	ENTRY		1386266		True				
ANR	1386374	CFGExitNode	EXIT		1386266		True				
ANR	1386375	Symbol	opline -> op1		1386266						
ANR	1386376	Symbol	opline -> op2		1386266						
ANR	1386377	Symbol	ctx		1386266						
ANR	1386378	Symbol	ctx -> script		1386266						
ANR	1386379	Symbol	RT_CONSTANT		1386266						
ANR	1386380	Symbol	* op_array		1386266						
ANR	1386381	Symbol	* ctx		1386266						
ANR	1386382	Symbol	& ctx -> script -> function_table		1386266						
ANR	1386383	Symbol	opline -> extended_value		1386266						
ANR	1386384	Symbol	op_array -> last		1386266						
ANR	1386385	Symbol	opline		1386266						
ANR	1386386	Symbol	op_array -> opcodes		1386266						
ANR	1386387	Symbol	func		1386266						
ANR	1386388	Symbol	* opline		1386266						
ANR	1386389	Symbol	ZEND_INIT_FCALL		1386266						
ANR	1386390	Symbol	opline -> opcode		1386266						
ANR	1386391	Symbol	end		1386266						
ANR	1386392	Symbol	opline -> op1 . num		1386266						
ANR	1386393	Symbol	Z_STR_P		1386266						
ANR	1386394	Symbol	zend_hash_find_ptr		1386266						
ANR	1386395	Symbol	zend_vm_calc_used_stack		1386266						
ANR	1386396	Symbol	op_array		1386266						
ANR	1386397	Function	zend_accel_script_optimize	669:0:20391:22992							
ANR	1386398	FunctionDef	zend_accel_script_optimize (zend_persistent_script * script)		1386397	0					
ANR	1386399	CompoundStatement		670:0:20454:22992	1386397	0					
ANR	1386400	IdentifierDeclStatement	"uint idx , j ;"	671:1:20457:20468	1386397	0	True				
ANR	1386401	IdentifierDecl	idx		1386397	0					
ANR	1386402	IdentifierDeclType	uint		1386397	0					
ANR	1386403	Identifier	idx		1386397	1					
ANR	1386404	IdentifierDecl	j		1386397	1					
ANR	1386405	IdentifierDeclType	uint		1386397	0					
ANR	1386406	Identifier	j		1386397	1					
ANR	1386407	IdentifierDeclStatement	"Bucket * p , * q ;"	672:1:20471:20484	1386397	1	True				
ANR	1386408	IdentifierDecl	* p		1386397	0					
ANR	1386409	IdentifierDeclType	Bucket *		1386397	0					
ANR	1386410	Identifier	p		1386397	1					
ANR	1386411	IdentifierDecl	* q		1386397	1					
ANR	1386412	IdentifierDeclType	Bucket *		1386397	0					
ANR	1386413	Identifier	q		1386397	1					
ANR	1386414	IdentifierDeclStatement	zend_class_entry * ce ;	673:1:20487:20507	1386397	2	True				
ANR	1386415	IdentifierDecl	* ce		1386397	0					
ANR	1386416	IdentifierDeclType	zend_class_entry *		1386397	0					
ANR	1386417	Identifier	ce		1386397	1					
ANR	1386418	IdentifierDeclStatement	zend_op_array * op_array ;	674:1:20510:20533	1386397	3	True				
ANR	1386419	IdentifierDecl	* op_array		1386397	0					
ANR	1386420	IdentifierDeclType	zend_op_array *		1386397	0					
ANR	1386421	Identifier	op_array		1386397	1					
ANR	1386422	IdentifierDeclStatement	zend_optimizer_ctx ctx ;	675:1:20536:20558	1386397	4	True				
ANR	1386423	IdentifierDecl	ctx		1386397	0					
ANR	1386424	IdentifierDeclType	zend_optimizer_ctx		1386397	0					
ANR	1386425	Identifier	ctx		1386397	1					
ANR	1386426	ExpressionStatement	ctx . arena = zend_arena_create ( 64 * 1024 )	677:1:20562:20602	1386397	5	True				
ANR	1386427	AssignmentExpression	ctx . arena = zend_arena_create ( 64 * 1024 )		1386397	0		=			
ANR	1386428	MemberAccess	ctx . arena		1386397	0					
ANR	1386429	Identifier	ctx		1386397	0					
ANR	1386430	Identifier	arena		1386397	1					
ANR	1386431	CallExpression	zend_arena_create ( 64 * 1024 )		1386397	1					
ANR	1386432	Callee	zend_arena_create		1386397	0					
ANR	1386433	Identifier	zend_arena_create		1386397	0					
ANR	1386434	ArgumentList	64 * 1024		1386397	1					
ANR	1386435	Argument	64 * 1024		1386397	0					
ANR	1386436	MultiplicativeExpression	64 * 1024		1386397	0		*			
ANR	1386437	PrimaryExpression	64		1386397	0					
ANR	1386438	PrimaryExpression	1024		1386397	1					
ANR	1386439	ExpressionStatement	ctx . script = script	678:1:20605:20624	1386397	6	True				
ANR	1386440	AssignmentExpression	ctx . script = script		1386397	0		=			
ANR	1386441	MemberAccess	ctx . script		1386397	0					
ANR	1386442	Identifier	ctx		1386397	0					
ANR	1386443	Identifier	script		1386397	1					
ANR	1386444	Identifier	script		1386397	1					
ANR	1386445	ExpressionStatement	ctx . constants = NULL	679:1:20627:20647	1386397	7	True				
ANR	1386446	AssignmentExpression	ctx . constants = NULL		1386397	0		=			
ANR	1386447	MemberAccess	ctx . constants		1386397	0					
ANR	1386448	Identifier	ctx		1386397	0					
ANR	1386449	Identifier	constants		1386397	1					
ANR	1386450	Identifier	NULL		1386397	1					
ANR	1386451	ExpressionStatement	"zend_accel_optimize ( & script -> main_op_array , & ctx )"	681:1:20651:20700	1386397	8	True				
ANR	1386452	CallExpression	"zend_accel_optimize ( & script -> main_op_array , & ctx )"		1386397	0					
ANR	1386453	Callee	zend_accel_optimize		1386397	0					
ANR	1386454	Identifier	zend_accel_optimize		1386397	0					
ANR	1386455	ArgumentList	& script -> main_op_array		1386397	1					
ANR	1386456	Argument	& script -> main_op_array		1386397	0					
ANR	1386457	UnaryOperationExpression	& script -> main_op_array		1386397	0					
ANR	1386458	UnaryOperator	&		1386397	0					
ANR	1386459	PtrMemberAccess	script -> main_op_array		1386397	1					
ANR	1386460	Identifier	script		1386397	0					
ANR	1386461	Identifier	main_op_array		1386397	1					
ANR	1386462	Argument	& ctx		1386397	1					
ANR	1386463	UnaryOperationExpression	& ctx		1386397	0					
ANR	1386464	UnaryOperator	&		1386397	0					
ANR	1386465	Identifier	ctx		1386397	1					
ANR	1386466	ForStatement	for ( idx = 0 ; idx < script -> function_table . nNumUsed ; idx ++ )		1386397	9					
ANR	1386467	ForInit	idx = 0 ;	683:6:20709:20716	1386397	0	True				
ANR	1386468	AssignmentExpression	idx = 0		1386397	0		=			
ANR	1386469	Identifier	idx		1386397	0					
ANR	1386470	PrimaryExpression	0		1386397	1					
ANR	1386471	Condition	idx < script -> function_table . nNumUsed	683:15:20718:20754	1386397	1	True				
ANR	1386472	RelationalExpression	idx < script -> function_table . nNumUsed		1386397	0		<			
ANR	1386473	Identifier	idx		1386397	0					
ANR	1386474	MemberAccess	script -> function_table . nNumUsed		1386397	1					
ANR	1386475	PtrMemberAccess	script -> function_table		1386397	0					
ANR	1386476	Identifier	script		1386397	0					
ANR	1386477	Identifier	function_table		1386397	1					
ANR	1386478	Identifier	nNumUsed		1386397	1					
ANR	1386479	PostIncDecOperationExpression	idx ++	683:54:20757:20761	1386397	2	True				
ANR	1386480	Identifier	idx		1386397	0					
ANR	1386481	IncDec	++		1386397	1					
ANR	1386482	CompoundStatement		14:61:309:309	1386397	3					
ANR	1386483	ExpressionStatement	p = script -> function_table . arData + idx	684:2:20768:20807	1386397	0	True				
ANR	1386484	AssignmentExpression	p = script -> function_table . arData + idx		1386397	0		=			
ANR	1386485	Identifier	p		1386397	0					
ANR	1386486	AdditiveExpression	script -> function_table . arData + idx		1386397	1		+			
ANR	1386487	MemberAccess	script -> function_table . arData		1386397	0					
ANR	1386488	PtrMemberAccess	script -> function_table		1386397	0					
ANR	1386489	Identifier	script		1386397	0					
ANR	1386490	Identifier	function_table		1386397	1					
ANR	1386491	Identifier	arData		1386397	1					
ANR	1386492	Identifier	idx		1386397	1					
ANR	1386493	IfStatement	if ( Z_TYPE ( p -> val ) == IS_UNDEF )		1386397	1					
ANR	1386494	Condition	Z_TYPE ( p -> val ) == IS_UNDEF	685:6:20815:20840	1386397	0	True				
ANR	1386495	EqualityExpression	Z_TYPE ( p -> val ) == IS_UNDEF		1386397	0		==			
ANR	1386496	CallExpression	Z_TYPE ( p -> val )		1386397	0					
ANR	1386497	Callee	Z_TYPE		1386397	0					
ANR	1386498	Identifier	Z_TYPE		1386397	0					
ANR	1386499	ArgumentList	p -> val		1386397	1					
ANR	1386500	Argument	p -> val		1386397	0					
ANR	1386501	PtrMemberAccess	p -> val		1386397	0					
ANR	1386502	Identifier	p		1386397	0					
ANR	1386503	Identifier	val		1386397	1					
ANR	1386504	Identifier	IS_UNDEF		1386397	1					
ANR	1386505	ContinueStatement	continue ;	685:34:20843:20851	1386397	1	True				
ANR	1386506	ExpressionStatement	op_array = ( zend_op_array * ) Z_PTR ( p -> val )	686:2:20855:20895	1386397	2	True				
ANR	1386507	AssignmentExpression	op_array = ( zend_op_array * ) Z_PTR ( p -> val )		1386397	0		=			
ANR	1386508	Identifier	op_array		1386397	0					
ANR	1386509	CastExpression	( zend_op_array * ) Z_PTR ( p -> val )		1386397	1					
ANR	1386510	CastTarget	zend_op_array *		1386397	0					
ANR	1386511	CallExpression	Z_PTR ( p -> val )		1386397	1					
ANR	1386512	Callee	Z_PTR		1386397	0					
ANR	1386513	Identifier	Z_PTR		1386397	0					
ANR	1386514	ArgumentList	p -> val		1386397	1					
ANR	1386515	Argument	p -> val		1386397	0					
ANR	1386516	PtrMemberAccess	p -> val		1386397	0					
ANR	1386517	Identifier	p		1386397	0					
ANR	1386518	Identifier	val		1386397	1					
ANR	1386519	ExpressionStatement	"zend_accel_optimize ( op_array , & ctx )"	687:2:20899:20934	1386397	3	True				
ANR	1386520	CallExpression	"zend_accel_optimize ( op_array , & ctx )"		1386397	0					
ANR	1386521	Callee	zend_accel_optimize		1386397	0					
ANR	1386522	Identifier	zend_accel_optimize		1386397	0					
ANR	1386523	ArgumentList	op_array		1386397	1					
ANR	1386524	Argument	op_array		1386397	0					
ANR	1386525	Identifier	op_array		1386397	0					
ANR	1386526	Argument	& ctx		1386397	1					
ANR	1386527	UnaryOperationExpression	& ctx		1386397	0					
ANR	1386528	UnaryOperator	&		1386397	0					
ANR	1386529	Identifier	ctx		1386397	1					
ANR	1386530	ForStatement	for ( idx = 0 ; idx < script -> class_table . nNumUsed ; idx ++ )		1386397	10					
ANR	1386531	ForInit	idx = 0 ;	690:6:20946:20953	1386397	0	True				
ANR	1386532	AssignmentExpression	idx = 0		1386397	0		=			
ANR	1386533	Identifier	idx		1386397	0					
ANR	1386534	PrimaryExpression	0		1386397	1					
ANR	1386535	Condition	idx < script -> class_table . nNumUsed	690:15:20955:20988	1386397	1	True				
ANR	1386536	RelationalExpression	idx < script -> class_table . nNumUsed		1386397	0		<			
ANR	1386537	Identifier	idx		1386397	0					
ANR	1386538	MemberAccess	script -> class_table . nNumUsed		1386397	1					
ANR	1386539	PtrMemberAccess	script -> class_table		1386397	0					
ANR	1386540	Identifier	script		1386397	0					
ANR	1386541	Identifier	class_table		1386397	1					
ANR	1386542	Identifier	nNumUsed		1386397	1					
ANR	1386543	PostIncDecOperationExpression	idx ++	690:51:20991:20995	1386397	2	True				
ANR	1386544	Identifier	idx		1386397	0					
ANR	1386545	IncDec	++		1386397	1					
ANR	1386546	CompoundStatement		21:58:543:543	1386397	3					
ANR	1386547	ExpressionStatement	p = script -> class_table . arData + idx	691:2:21002:21038	1386397	0	True				
ANR	1386548	AssignmentExpression	p = script -> class_table . arData + idx		1386397	0		=			
ANR	1386549	Identifier	p		1386397	0					
ANR	1386550	AdditiveExpression	script -> class_table . arData + idx		1386397	1		+			
ANR	1386551	MemberAccess	script -> class_table . arData		1386397	0					
ANR	1386552	PtrMemberAccess	script -> class_table		1386397	0					
ANR	1386553	Identifier	script		1386397	0					
ANR	1386554	Identifier	class_table		1386397	1					
ANR	1386555	Identifier	arData		1386397	1					
ANR	1386556	Identifier	idx		1386397	1					
ANR	1386557	IfStatement	if ( Z_TYPE ( p -> val ) == IS_UNDEF )		1386397	1					
ANR	1386558	Condition	Z_TYPE ( p -> val ) == IS_UNDEF	692:6:21046:21071	1386397	0	True				
ANR	1386559	EqualityExpression	Z_TYPE ( p -> val ) == IS_UNDEF		1386397	0		==			
ANR	1386560	CallExpression	Z_TYPE ( p -> val )		1386397	0					
ANR	1386561	Callee	Z_TYPE		1386397	0					
ANR	1386562	Identifier	Z_TYPE		1386397	0					
ANR	1386563	ArgumentList	p -> val		1386397	1					
ANR	1386564	Argument	p -> val		1386397	0					
ANR	1386565	PtrMemberAccess	p -> val		1386397	0					
ANR	1386566	Identifier	p		1386397	0					
ANR	1386567	Identifier	val		1386397	1					
ANR	1386568	Identifier	IS_UNDEF		1386397	1					
ANR	1386569	ContinueStatement	continue ;	692:34:21074:21082	1386397	1	True				
ANR	1386570	ExpressionStatement	ce = ( zend_class_entry * ) Z_PTR ( p -> val )	693:2:21086:21123	1386397	2	True				
ANR	1386571	AssignmentExpression	ce = ( zend_class_entry * ) Z_PTR ( p -> val )		1386397	0		=			
ANR	1386572	Identifier	ce		1386397	0					
ANR	1386573	CastExpression	( zend_class_entry * ) Z_PTR ( p -> val )		1386397	1					
ANR	1386574	CastTarget	zend_class_entry *		1386397	0					
ANR	1386575	CallExpression	Z_PTR ( p -> val )		1386397	1					
ANR	1386576	Callee	Z_PTR		1386397	0					
ANR	1386577	Identifier	Z_PTR		1386397	0					
ANR	1386578	ArgumentList	p -> val		1386397	1					
ANR	1386579	Argument	p -> val		1386397	0					
ANR	1386580	PtrMemberAccess	p -> val		1386397	0					
ANR	1386581	Identifier	p		1386397	0					
ANR	1386582	Identifier	val		1386397	1					
ANR	1386583	ForStatement	for ( j = 0 ; j < ce -> function_table . nNumUsed ; j ++ )		1386397	3					
ANR	1386584	ForInit	j = 0 ;	694:7:21132:21137	1386397	0	True				
ANR	1386585	AssignmentExpression	j = 0		1386397	0		=			
ANR	1386586	Identifier	j		1386397	0					
ANR	1386587	PrimaryExpression	0		1386397	1					
ANR	1386588	Condition	j < ce -> function_table . nNumUsed	694:14:21139:21169	1386397	1	True				
ANR	1386589	RelationalExpression	j < ce -> function_table . nNumUsed		1386397	0		<			
ANR	1386590	Identifier	j		1386397	0					
ANR	1386591	MemberAccess	ce -> function_table . nNumUsed		1386397	1					
ANR	1386592	PtrMemberAccess	ce -> function_table		1386397	0					
ANR	1386593	Identifier	ce		1386397	0					
ANR	1386594	Identifier	function_table		1386397	1					
ANR	1386595	Identifier	nNumUsed		1386397	1					
ANR	1386596	PostIncDecOperationExpression	j ++	694:47:21172:21174	1386397	2	True				
ANR	1386597	Identifier	j		1386397	0					
ANR	1386598	IncDec	++		1386397	1					
ANR	1386599	CompoundStatement		25:52:722:722	1386397	3					
ANR	1386600	ExpressionStatement	q = ce -> function_table . arData + j	695:3:21182:21215	1386397	0	True				
ANR	1386601	AssignmentExpression	q = ce -> function_table . arData + j		1386397	0		=			
ANR	1386602	Identifier	q		1386397	0					
ANR	1386603	AdditiveExpression	ce -> function_table . arData + j		1386397	1		+			
ANR	1386604	MemberAccess	ce -> function_table . arData		1386397	0					
ANR	1386605	PtrMemberAccess	ce -> function_table		1386397	0					
ANR	1386606	Identifier	ce		1386397	0					
ANR	1386607	Identifier	function_table		1386397	1					
ANR	1386608	Identifier	arData		1386397	1					
ANR	1386609	Identifier	j		1386397	1					
ANR	1386610	IfStatement	if ( Z_TYPE ( q -> val ) == IS_UNDEF )		1386397	1					
ANR	1386611	Condition	Z_TYPE ( q -> val ) == IS_UNDEF	696:7:21224:21249	1386397	0	True				
ANR	1386612	EqualityExpression	Z_TYPE ( q -> val ) == IS_UNDEF		1386397	0		==			
ANR	1386613	CallExpression	Z_TYPE ( q -> val )		1386397	0					
ANR	1386614	Callee	Z_TYPE		1386397	0					
ANR	1386615	Identifier	Z_TYPE		1386397	0					
ANR	1386616	ArgumentList	q -> val		1386397	1					
ANR	1386617	Argument	q -> val		1386397	0					
ANR	1386618	PtrMemberAccess	q -> val		1386397	0					
ANR	1386619	Identifier	q		1386397	0					
ANR	1386620	Identifier	val		1386397	1					
ANR	1386621	Identifier	IS_UNDEF		1386397	1					
ANR	1386622	ContinueStatement	continue ;	696:35:21252:21260	1386397	1	True				
ANR	1386623	ExpressionStatement	op_array = ( zend_op_array * ) Z_PTR ( q -> val )	697:3:21265:21305	1386397	2	True				
ANR	1386624	AssignmentExpression	op_array = ( zend_op_array * ) Z_PTR ( q -> val )		1386397	0		=			
ANR	1386625	Identifier	op_array		1386397	0					
ANR	1386626	CastExpression	( zend_op_array * ) Z_PTR ( q -> val )		1386397	1					
ANR	1386627	CastTarget	zend_op_array *		1386397	0					
ANR	1386628	CallExpression	Z_PTR ( q -> val )		1386397	1					
ANR	1386629	Callee	Z_PTR		1386397	0					
ANR	1386630	Identifier	Z_PTR		1386397	0					
ANR	1386631	ArgumentList	q -> val		1386397	1					
ANR	1386632	Argument	q -> val		1386397	0					
ANR	1386633	PtrMemberAccess	q -> val		1386397	0					
ANR	1386634	Identifier	q		1386397	0					
ANR	1386635	Identifier	val		1386397	1					
ANR	1386636	IfStatement	if ( op_array -> scope == ce )		1386397	3					
ANR	1386637	Condition	op_array -> scope == ce	698:7:21314:21334	1386397	0	True				
ANR	1386638	EqualityExpression	op_array -> scope == ce		1386397	0		==			
ANR	1386639	PtrMemberAccess	op_array -> scope		1386397	0					
ANR	1386640	Identifier	op_array		1386397	0					
ANR	1386641	Identifier	scope		1386397	1					
ANR	1386642	Identifier	ce		1386397	1					
ANR	1386643	CompoundStatement		29:30:882:882	1386397	1					
ANR	1386644	ExpressionStatement	"zend_accel_optimize ( op_array , & ctx )"	699:4:21343:21378	1386397	0	True				
ANR	1386645	CallExpression	"zend_accel_optimize ( op_array , & ctx )"		1386397	0					
ANR	1386646	Callee	zend_accel_optimize		1386397	0					
ANR	1386647	Identifier	zend_accel_optimize		1386397	0					
ANR	1386648	ArgumentList	op_array		1386397	1					
ANR	1386649	Argument	op_array		1386397	0					
ANR	1386650	Identifier	op_array		1386397	0					
ANR	1386651	Argument	& ctx		1386397	1					
ANR	1386652	UnaryOperationExpression	& ctx		1386397	0					
ANR	1386653	UnaryOperator	&		1386397	0					
ANR	1386654	Identifier	ctx		1386397	1					
ANR	1386655	ElseStatement	else		1386397	0					
ANR	1386656	IfStatement	if ( op_array -> type == ZEND_USER_FUNCTION )		1386397	0					
ANR	1386657	Condition	op_array -> type == ZEND_USER_FUNCTION	700:14:21394:21429	1386397	0	True				
ANR	1386658	EqualityExpression	op_array -> type == ZEND_USER_FUNCTION		1386397	0		==			
ANR	1386659	PtrMemberAccess	op_array -> type		1386397	0					
ANR	1386660	Identifier	op_array		1386397	0					
ANR	1386661	Identifier	type		1386397	1					
ANR	1386662	Identifier	ZEND_USER_FUNCTION		1386397	1					
ANR	1386663	CompoundStatement		32:4:983:1011	1386397	1					
ANR	1386664	IdentifierDeclStatement	zend_op_array * orig_op_array ;	701:4:21438:21466	1386397	0	True				
ANR	1386665	IdentifierDecl	* orig_op_array		1386397	0					
ANR	1386666	IdentifierDeclType	zend_op_array *		1386397	0					
ANR	1386667	Identifier	orig_op_array		1386397	1					
ANR	1386668	IfStatement	"if ( ( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL )"		1386397	1					
ANR	1386669	Condition	"( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL"	702:8:21476:21561	1386397	0	True				
ANR	1386670	EqualityExpression	"( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL"		1386397	0		!=			
ANR	1386671	AssignmentExpression	"orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key )"		1386397	0		=			
ANR	1386672	Identifier	orig_op_array		1386397	0					
ANR	1386673	CallExpression	"zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key )"		1386397	1					
ANR	1386674	Callee	zend_hash_find_ptr		1386397	0					
ANR	1386675	Identifier	zend_hash_find_ptr		1386397	0					
ANR	1386676	ArgumentList	& op_array -> scope -> function_table		1386397	1					
ANR	1386677	Argument	& op_array -> scope -> function_table		1386397	0					
ANR	1386678	UnaryOperationExpression	& op_array -> scope -> function_table		1386397	0					
ANR	1386679	UnaryOperator	&		1386397	0					
ANR	1386680	PtrMemberAccess	op_array -> scope -> function_table		1386397	1					
ANR	1386681	PtrMemberAccess	op_array -> scope		1386397	0					
ANR	1386682	Identifier	op_array		1386397	0					
ANR	1386683	Identifier	scope		1386397	1					
ANR	1386684	Identifier	function_table		1386397	1					
ANR	1386685	Argument	q -> key		1386397	1					
ANR	1386686	PtrMemberAccess	q -> key		1386397	0					
ANR	1386687	Identifier	q		1386397	0					
ANR	1386688	Identifier	key		1386397	1					
ANR	1386689	Identifier	NULL		1386397	1					
ANR	1386690	CompoundStatement		34:5:1116:1158	1386397	1					
ANR	1386691	IdentifierDeclStatement	HashTable * ht = op_array -> static_variables ;	703:5:21571:21613	1386397	0	True				
ANR	1386692	IdentifierDecl	* ht = op_array -> static_variables		1386397	0					
ANR	1386693	IdentifierDeclType	HashTable *		1386397	0					
ANR	1386694	Identifier	ht		1386397	1					
ANR	1386695	AssignmentExpression	* ht = op_array -> static_variables		1386397	2		=			
ANR	1386696	Identifier	ht		1386397	0					
ANR	1386697	PtrMemberAccess	op_array -> static_variables		1386397	1					
ANR	1386698	Identifier	op_array		1386397	0					
ANR	1386699	Identifier	static_variables		1386397	1					
ANR	1386700	ExpressionStatement	* op_array = * orig_op_array	704:5:21620:21646	1386397	1	True				
ANR	1386701	AssignmentExpression	* op_array = * orig_op_array		1386397	0		=			
ANR	1386702	UnaryOperationExpression	* op_array		1386397	0					
ANR	1386703	UnaryOperator	*		1386397	0					
ANR	1386704	Identifier	op_array		1386397	1					
ANR	1386705	UnaryOperationExpression	* orig_op_array		1386397	1					
ANR	1386706	UnaryOperator	*		1386397	0					
ANR	1386707	Identifier	orig_op_array		1386397	1					
ANR	1386708	ExpressionStatement	op_array -> static_variables = ht	705:5:21653:21684	1386397	2	True				
ANR	1386709	AssignmentExpression	op_array -> static_variables = ht		1386397	0		=			
ANR	1386710	PtrMemberAccess	op_array -> static_variables		1386397	0					
ANR	1386711	Identifier	op_array		1386397	0					
ANR	1386712	Identifier	static_variables		1386397	1					
ANR	1386713	Identifier	ht		1386397	1					
ANR	1386714	IfStatement	if ( ZEND_OPTIMIZER_PASS_12 & OPTIMIZATION_LEVEL )		1386397	11					
ANR	1386715	Condition	ZEND_OPTIMIZER_PASS_12 & OPTIMIZATION_LEVEL	711:5:21710:21752	1386397	0	True				
ANR	1386716	BitAndExpression	ZEND_OPTIMIZER_PASS_12 & OPTIMIZATION_LEVEL		1386397	0		&			
ANR	1386717	Identifier	ZEND_OPTIMIZER_PASS_12		1386397	0					
ANR	1386718	Identifier	OPTIMIZATION_LEVEL		1386397	1					
ANR	1386719	CompoundStatement		42:50:1300:1300	1386397	1					
ANR	1386720	ExpressionStatement	"zend_accel_adjust_fcall_stack_size ( & script -> main_op_array , & ctx )"	712:2:21759:21823	1386397	0	True				
ANR	1386721	CallExpression	"zend_accel_adjust_fcall_stack_size ( & script -> main_op_array , & ctx )"		1386397	0					
ANR	1386722	Callee	zend_accel_adjust_fcall_stack_size		1386397	0					
ANR	1386723	Identifier	zend_accel_adjust_fcall_stack_size		1386397	0					
ANR	1386724	ArgumentList	& script -> main_op_array		1386397	1					
ANR	1386725	Argument	& script -> main_op_array		1386397	0					
ANR	1386726	UnaryOperationExpression	& script -> main_op_array		1386397	0					
ANR	1386727	UnaryOperator	&		1386397	0					
ANR	1386728	PtrMemberAccess	script -> main_op_array		1386397	1					
ANR	1386729	Identifier	script		1386397	0					
ANR	1386730	Identifier	main_op_array		1386397	1					
ANR	1386731	Argument	& ctx		1386397	1					
ANR	1386732	UnaryOperationExpression	& ctx		1386397	0					
ANR	1386733	UnaryOperator	&		1386397	0					
ANR	1386734	Identifier	ctx		1386397	1					
ANR	1386735	ForStatement	for ( idx = 0 ; idx < script -> function_table . nNumUsed ; idx ++ )		1386397	1					
ANR	1386736	ForInit	idx = 0 ;	714:7:21833:21840	1386397	0	True				
ANR	1386737	AssignmentExpression	idx = 0		1386397	0		=			
ANR	1386738	Identifier	idx		1386397	0					
ANR	1386739	PrimaryExpression	0		1386397	1					
ANR	1386740	Condition	idx < script -> function_table . nNumUsed	714:16:21842:21878	1386397	1	True				
ANR	1386741	RelationalExpression	idx < script -> function_table . nNumUsed		1386397	0		<			
ANR	1386742	Identifier	idx		1386397	0					
ANR	1386743	MemberAccess	script -> function_table . nNumUsed		1386397	1					
ANR	1386744	PtrMemberAccess	script -> function_table		1386397	0					
ANR	1386745	Identifier	script		1386397	0					
ANR	1386746	Identifier	function_table		1386397	1					
ANR	1386747	Identifier	nNumUsed		1386397	1					
ANR	1386748	PostIncDecOperationExpression	idx ++	714:55:21881:21885	1386397	2	True				
ANR	1386749	Identifier	idx		1386397	0					
ANR	1386750	IncDec	++		1386397	1					
ANR	1386751	CompoundStatement		45:62:1433:1433	1386397	3					
ANR	1386752	ExpressionStatement	p = script -> function_table . arData + idx	715:3:21893:21932	1386397	0	True				
ANR	1386753	AssignmentExpression	p = script -> function_table . arData + idx		1386397	0		=			
ANR	1386754	Identifier	p		1386397	0					
ANR	1386755	AdditiveExpression	script -> function_table . arData + idx		1386397	1		+			
ANR	1386756	MemberAccess	script -> function_table . arData		1386397	0					
ANR	1386757	PtrMemberAccess	script -> function_table		1386397	0					
ANR	1386758	Identifier	script		1386397	0					
ANR	1386759	Identifier	function_table		1386397	1					
ANR	1386760	Identifier	arData		1386397	1					
ANR	1386761	Identifier	idx		1386397	1					
ANR	1386762	IfStatement	if ( Z_TYPE ( p -> val ) == IS_UNDEF )		1386397	1					
ANR	1386763	Condition	Z_TYPE ( p -> val ) == IS_UNDEF	716:7:21941:21966	1386397	0	True				
ANR	1386764	EqualityExpression	Z_TYPE ( p -> val ) == IS_UNDEF		1386397	0		==			
ANR	1386765	CallExpression	Z_TYPE ( p -> val )		1386397	0					
ANR	1386766	Callee	Z_TYPE		1386397	0					
ANR	1386767	Identifier	Z_TYPE		1386397	0					
ANR	1386768	ArgumentList	p -> val		1386397	1					
ANR	1386769	Argument	p -> val		1386397	0					
ANR	1386770	PtrMemberAccess	p -> val		1386397	0					
ANR	1386771	Identifier	p		1386397	0					
ANR	1386772	Identifier	val		1386397	1					
ANR	1386773	Identifier	IS_UNDEF		1386397	1					
ANR	1386774	ContinueStatement	continue ;	716:35:21969:21977	1386397	1	True				
ANR	1386775	ExpressionStatement	op_array = ( zend_op_array * ) Z_PTR ( p -> val )	717:3:21982:22022	1386397	2	True				
ANR	1386776	AssignmentExpression	op_array = ( zend_op_array * ) Z_PTR ( p -> val )		1386397	0		=			
ANR	1386777	Identifier	op_array		1386397	0					
ANR	1386778	CastExpression	( zend_op_array * ) Z_PTR ( p -> val )		1386397	1					
ANR	1386779	CastTarget	zend_op_array *		1386397	0					
ANR	1386780	CallExpression	Z_PTR ( p -> val )		1386397	1					
ANR	1386781	Callee	Z_PTR		1386397	0					
ANR	1386782	Identifier	Z_PTR		1386397	0					
ANR	1386783	ArgumentList	p -> val		1386397	1					
ANR	1386784	Argument	p -> val		1386397	0					
ANR	1386785	PtrMemberAccess	p -> val		1386397	0					
ANR	1386786	Identifier	p		1386397	0					
ANR	1386787	Identifier	val		1386397	1					
ANR	1386788	ExpressionStatement	"zend_accel_adjust_fcall_stack_size ( op_array , & ctx )"	718:3:22027:22077	1386397	3	True				
ANR	1386789	CallExpression	"zend_accel_adjust_fcall_stack_size ( op_array , & ctx )"		1386397	0					
ANR	1386790	Callee	zend_accel_adjust_fcall_stack_size		1386397	0					
ANR	1386791	Identifier	zend_accel_adjust_fcall_stack_size		1386397	0					
ANR	1386792	ArgumentList	op_array		1386397	1					
ANR	1386793	Argument	op_array		1386397	0					
ANR	1386794	Identifier	op_array		1386397	0					
ANR	1386795	Argument	& ctx		1386397	1					
ANR	1386796	UnaryOperationExpression	& ctx		1386397	0					
ANR	1386797	UnaryOperator	&		1386397	0					
ANR	1386798	Identifier	ctx		1386397	1					
ANR	1386799	ForStatement	for ( idx = 0 ; idx < script -> class_table . nNumUsed ; idx ++ )		1386397	2					
ANR	1386800	ForInit	idx = 0 ;	721:7:22091:22098	1386397	0	True				
ANR	1386801	AssignmentExpression	idx = 0		1386397	0		=			
ANR	1386802	Identifier	idx		1386397	0					
ANR	1386803	PrimaryExpression	0		1386397	1					
ANR	1386804	Condition	idx < script -> class_table . nNumUsed	721:16:22100:22133	1386397	1	True				
ANR	1386805	RelationalExpression	idx < script -> class_table . nNumUsed		1386397	0		<			
ANR	1386806	Identifier	idx		1386397	0					
ANR	1386807	MemberAccess	script -> class_table . nNumUsed		1386397	1					
ANR	1386808	PtrMemberAccess	script -> class_table		1386397	0					
ANR	1386809	Identifier	script		1386397	0					
ANR	1386810	Identifier	class_table		1386397	1					
ANR	1386811	Identifier	nNumUsed		1386397	1					
ANR	1386812	PostIncDecOperationExpression	idx ++	721:52:22136:22140	1386397	2	True				
ANR	1386813	Identifier	idx		1386397	0					
ANR	1386814	IncDec	++		1386397	1					
ANR	1386815	CompoundStatement		52:59:1688:1688	1386397	3					
ANR	1386816	ExpressionStatement	p = script -> class_table . arData + idx	722:3:22148:22184	1386397	0	True				
ANR	1386817	AssignmentExpression	p = script -> class_table . arData + idx		1386397	0		=			
ANR	1386818	Identifier	p		1386397	0					
ANR	1386819	AdditiveExpression	script -> class_table . arData + idx		1386397	1		+			
ANR	1386820	MemberAccess	script -> class_table . arData		1386397	0					
ANR	1386821	PtrMemberAccess	script -> class_table		1386397	0					
ANR	1386822	Identifier	script		1386397	0					
ANR	1386823	Identifier	class_table		1386397	1					
ANR	1386824	Identifier	arData		1386397	1					
ANR	1386825	Identifier	idx		1386397	1					
ANR	1386826	IfStatement	if ( Z_TYPE ( p -> val ) == IS_UNDEF )		1386397	1					
ANR	1386827	Condition	Z_TYPE ( p -> val ) == IS_UNDEF	723:7:22193:22218	1386397	0	True				
ANR	1386828	EqualityExpression	Z_TYPE ( p -> val ) == IS_UNDEF		1386397	0		==			
ANR	1386829	CallExpression	Z_TYPE ( p -> val )		1386397	0					
ANR	1386830	Callee	Z_TYPE		1386397	0					
ANR	1386831	Identifier	Z_TYPE		1386397	0					
ANR	1386832	ArgumentList	p -> val		1386397	1					
ANR	1386833	Argument	p -> val		1386397	0					
ANR	1386834	PtrMemberAccess	p -> val		1386397	0					
ANR	1386835	Identifier	p		1386397	0					
ANR	1386836	Identifier	val		1386397	1					
ANR	1386837	Identifier	IS_UNDEF		1386397	1					
ANR	1386838	ContinueStatement	continue ;	723:35:22221:22229	1386397	1	True				
ANR	1386839	ExpressionStatement	ce = ( zend_class_entry * ) Z_PTR ( p -> val )	724:3:22234:22271	1386397	2	True				
ANR	1386840	AssignmentExpression	ce = ( zend_class_entry * ) Z_PTR ( p -> val )		1386397	0		=			
ANR	1386841	Identifier	ce		1386397	0					
ANR	1386842	CastExpression	( zend_class_entry * ) Z_PTR ( p -> val )		1386397	1					
ANR	1386843	CastTarget	zend_class_entry *		1386397	0					
ANR	1386844	CallExpression	Z_PTR ( p -> val )		1386397	1					
ANR	1386845	Callee	Z_PTR		1386397	0					
ANR	1386846	Identifier	Z_PTR		1386397	0					
ANR	1386847	ArgumentList	p -> val		1386397	1					
ANR	1386848	Argument	p -> val		1386397	0					
ANR	1386849	PtrMemberAccess	p -> val		1386397	0					
ANR	1386850	Identifier	p		1386397	0					
ANR	1386851	Identifier	val		1386397	1					
ANR	1386852	ForStatement	for ( j = 0 ; j < ce -> function_table . nNumUsed ; j ++ )		1386397	3					
ANR	1386853	ForInit	j = 0 ;	725:8:22281:22286	1386397	0	True				
ANR	1386854	AssignmentExpression	j = 0		1386397	0		=			
ANR	1386855	Identifier	j		1386397	0					
ANR	1386856	PrimaryExpression	0		1386397	1					
ANR	1386857	Condition	j < ce -> function_table . nNumUsed	725:15:22288:22318	1386397	1	True				
ANR	1386858	RelationalExpression	j < ce -> function_table . nNumUsed		1386397	0		<			
ANR	1386859	Identifier	j		1386397	0					
ANR	1386860	MemberAccess	ce -> function_table . nNumUsed		1386397	1					
ANR	1386861	PtrMemberAccess	ce -> function_table		1386397	0					
ANR	1386862	Identifier	ce		1386397	0					
ANR	1386863	Identifier	function_table		1386397	1					
ANR	1386864	Identifier	nNumUsed		1386397	1					
ANR	1386865	PostIncDecOperationExpression	j ++	725:48:22321:22323	1386397	2	True				
ANR	1386866	Identifier	j		1386397	0					
ANR	1386867	IncDec	++		1386397	1					
ANR	1386868	CompoundStatement		56:53:1871:1871	1386397	3					
ANR	1386869	ExpressionStatement	q = ce -> function_table . arData + j	726:4:22332:22365	1386397	0	True				
ANR	1386870	AssignmentExpression	q = ce -> function_table . arData + j		1386397	0		=			
ANR	1386871	Identifier	q		1386397	0					
ANR	1386872	AdditiveExpression	ce -> function_table . arData + j		1386397	1		+			
ANR	1386873	MemberAccess	ce -> function_table . arData		1386397	0					
ANR	1386874	PtrMemberAccess	ce -> function_table		1386397	0					
ANR	1386875	Identifier	ce		1386397	0					
ANR	1386876	Identifier	function_table		1386397	1					
ANR	1386877	Identifier	arData		1386397	1					
ANR	1386878	Identifier	j		1386397	1					
ANR	1386879	IfStatement	if ( Z_TYPE ( q -> val ) == IS_UNDEF )		1386397	1					
ANR	1386880	Condition	Z_TYPE ( q -> val ) == IS_UNDEF	727:8:22375:22400	1386397	0	True				
ANR	1386881	EqualityExpression	Z_TYPE ( q -> val ) == IS_UNDEF		1386397	0		==			
ANR	1386882	CallExpression	Z_TYPE ( q -> val )		1386397	0					
ANR	1386883	Callee	Z_TYPE		1386397	0					
ANR	1386884	Identifier	Z_TYPE		1386397	0					
ANR	1386885	ArgumentList	q -> val		1386397	1					
ANR	1386886	Argument	q -> val		1386397	0					
ANR	1386887	PtrMemberAccess	q -> val		1386397	0					
ANR	1386888	Identifier	q		1386397	0					
ANR	1386889	Identifier	val		1386397	1					
ANR	1386890	Identifier	IS_UNDEF		1386397	1					
ANR	1386891	ContinueStatement	continue ;	727:36:22403:22411	1386397	1	True				
ANR	1386892	ExpressionStatement	op_array = ( zend_op_array * ) Z_PTR ( q -> val )	728:4:22417:22457	1386397	2	True				
ANR	1386893	AssignmentExpression	op_array = ( zend_op_array * ) Z_PTR ( q -> val )		1386397	0		=			
ANR	1386894	Identifier	op_array		1386397	0					
ANR	1386895	CastExpression	( zend_op_array * ) Z_PTR ( q -> val )		1386397	1					
ANR	1386896	CastTarget	zend_op_array *		1386397	0					
ANR	1386897	CallExpression	Z_PTR ( q -> val )		1386397	1					
ANR	1386898	Callee	Z_PTR		1386397	0					
ANR	1386899	Identifier	Z_PTR		1386397	0					
ANR	1386900	ArgumentList	q -> val		1386397	1					
ANR	1386901	Argument	q -> val		1386397	0					
ANR	1386902	PtrMemberAccess	q -> val		1386397	0					
ANR	1386903	Identifier	q		1386397	0					
ANR	1386904	Identifier	val		1386397	1					
ANR	1386905	IfStatement	if ( op_array -> scope == ce )		1386397	3					
ANR	1386906	Condition	op_array -> scope == ce	729:8:22467:22487	1386397	0	True				
ANR	1386907	EqualityExpression	op_array -> scope == ce		1386397	0		==			
ANR	1386908	PtrMemberAccess	op_array -> scope		1386397	0					
ANR	1386909	Identifier	op_array		1386397	0					
ANR	1386910	Identifier	scope		1386397	1					
ANR	1386911	Identifier	ce		1386397	1					
ANR	1386912	CompoundStatement		60:31:2035:2035	1386397	1					
ANR	1386913	ExpressionStatement	"zend_accel_adjust_fcall_stack_size ( op_array , & ctx )"	730:5:22497:22547	1386397	0	True				
ANR	1386914	CallExpression	"zend_accel_adjust_fcall_stack_size ( op_array , & ctx )"		1386397	0					
ANR	1386915	Callee	zend_accel_adjust_fcall_stack_size		1386397	0					
ANR	1386916	Identifier	zend_accel_adjust_fcall_stack_size		1386397	0					
ANR	1386917	ArgumentList	op_array		1386397	1					
ANR	1386918	Argument	op_array		1386397	0					
ANR	1386919	Identifier	op_array		1386397	0					
ANR	1386920	Argument	& ctx		1386397	1					
ANR	1386921	UnaryOperationExpression	& ctx		1386397	0					
ANR	1386922	UnaryOperator	&		1386397	0					
ANR	1386923	Identifier	ctx		1386397	1					
ANR	1386924	ElseStatement	else		1386397	0					
ANR	1386925	IfStatement	if ( op_array -> type == ZEND_USER_FUNCTION )		1386397	0					
ANR	1386926	Condition	op_array -> type == ZEND_USER_FUNCTION	731:15:22564:22599	1386397	0	True				
ANR	1386927	EqualityExpression	op_array -> type == ZEND_USER_FUNCTION		1386397	0		==			
ANR	1386928	PtrMemberAccess	op_array -> type		1386397	0					
ANR	1386929	Identifier	op_array		1386397	0					
ANR	1386930	Identifier	type		1386397	1					
ANR	1386931	Identifier	ZEND_USER_FUNCTION		1386397	1					
ANR	1386932	CompoundStatement		63:5:2154:2182	1386397	1					
ANR	1386933	IdentifierDeclStatement	zend_op_array * orig_op_array ;	732:5:22609:22637	1386397	0	True				
ANR	1386934	IdentifierDecl	* orig_op_array		1386397	0					
ANR	1386935	IdentifierDeclType	zend_op_array *		1386397	0					
ANR	1386936	Identifier	orig_op_array		1386397	1					
ANR	1386937	IfStatement	"if ( ( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL )"		1386397	1					
ANR	1386938	Condition	"( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL"	733:9:22648:22733	1386397	0	True				
ANR	1386939	EqualityExpression	"( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL"		1386397	0		!=			
ANR	1386940	AssignmentExpression	"orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key )"		1386397	0		=			
ANR	1386941	Identifier	orig_op_array		1386397	0					
ANR	1386942	CallExpression	"zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key )"		1386397	1					
ANR	1386943	Callee	zend_hash_find_ptr		1386397	0					
ANR	1386944	Identifier	zend_hash_find_ptr		1386397	0					
ANR	1386945	ArgumentList	& op_array -> scope -> function_table		1386397	1					
ANR	1386946	Argument	& op_array -> scope -> function_table		1386397	0					
ANR	1386947	UnaryOperationExpression	& op_array -> scope -> function_table		1386397	0					
ANR	1386948	UnaryOperator	&		1386397	0					
ANR	1386949	PtrMemberAccess	op_array -> scope -> function_table		1386397	1					
ANR	1386950	PtrMemberAccess	op_array -> scope		1386397	0					
ANR	1386951	Identifier	op_array		1386397	0					
ANR	1386952	Identifier	scope		1386397	1					
ANR	1386953	Identifier	function_table		1386397	1					
ANR	1386954	Argument	q -> key		1386397	1					
ANR	1386955	PtrMemberAccess	q -> key		1386397	0					
ANR	1386956	Identifier	q		1386397	0					
ANR	1386957	Identifier	key		1386397	1					
ANR	1386958	Identifier	NULL		1386397	1					
ANR	1386959	CompoundStatement		65:6:2289:2331	1386397	1					
ANR	1386960	IdentifierDeclStatement	HashTable * ht = op_array -> static_variables ;	734:6:22744:22786	1386397	0	True				
ANR	1386961	IdentifierDecl	* ht = op_array -> static_variables		1386397	0					
ANR	1386962	IdentifierDeclType	HashTable *		1386397	0					
ANR	1386963	Identifier	ht		1386397	1					
ANR	1386964	AssignmentExpression	* ht = op_array -> static_variables		1386397	2		=			
ANR	1386965	Identifier	ht		1386397	0					
ANR	1386966	PtrMemberAccess	op_array -> static_variables		1386397	1					
ANR	1386967	Identifier	op_array		1386397	0					
ANR	1386968	Identifier	static_variables		1386397	1					
ANR	1386969	ExpressionStatement	* op_array = * orig_op_array	735:6:22794:22820	1386397	1	True				
ANR	1386970	AssignmentExpression	* op_array = * orig_op_array		1386397	0		=			
ANR	1386971	UnaryOperationExpression	* op_array		1386397	0					
ANR	1386972	UnaryOperator	*		1386397	0					
ANR	1386973	Identifier	op_array		1386397	1					
ANR	1386974	UnaryOperationExpression	* orig_op_array		1386397	1					
ANR	1386975	UnaryOperator	*		1386397	0					
ANR	1386976	Identifier	orig_op_array		1386397	1					
ANR	1386977	ExpressionStatement	op_array -> static_variables = ht	736:6:22828:22859	1386397	2	True				
ANR	1386978	AssignmentExpression	op_array -> static_variables = ht		1386397	0		=			
ANR	1386979	PtrMemberAccess	op_array -> static_variables		1386397	0					
ANR	1386980	Identifier	op_array		1386397	0					
ANR	1386981	Identifier	static_variables		1386397	1					
ANR	1386982	Identifier	ht		1386397	1					
ANR	1386983	IfStatement	if ( ctx . constants )		1386397	12					
ANR	1386984	Condition	ctx . constants	743:5:22892:22904	1386397	0	True				
ANR	1386985	MemberAccess	ctx . constants		1386397	0					
ANR	1386986	Identifier	ctx		1386397	0					
ANR	1386987	Identifier	constants		1386397	1					
ANR	1386988	CompoundStatement		74:20:2452:2452	1386397	1					
ANR	1386989	ExpressionStatement	zend_hash_destroy ( ctx . constants )	744:2:22911:22943	1386397	0	True				
ANR	1386990	CallExpression	zend_hash_destroy ( ctx . constants )		1386397	0					
ANR	1386991	Callee	zend_hash_destroy		1386397	0					
ANR	1386992	Identifier	zend_hash_destroy		1386397	0					
ANR	1386993	ArgumentList	ctx . constants		1386397	1					
ANR	1386994	Argument	ctx . constants		1386397	0					
ANR	1386995	MemberAccess	ctx . constants		1386397	0					
ANR	1386996	Identifier	ctx		1386397	0					
ANR	1386997	Identifier	constants		1386397	1					
ANR	1386998	ExpressionStatement	zend_arena_destroy ( ctx . arena )	746:1:22949:22978	1386397	13	True				
ANR	1386999	CallExpression	zend_arena_destroy ( ctx . arena )		1386397	0					
ANR	1387000	Callee	zend_arena_destroy		1386397	0					
ANR	1387001	Identifier	zend_arena_destroy		1386397	0					
ANR	1387002	ArgumentList	ctx . arena		1386397	1					
ANR	1387003	Argument	ctx . arena		1386397	0					
ANR	1387004	MemberAccess	ctx . arena		1386397	0					
ANR	1387005	Identifier	ctx		1386397	0					
ANR	1387006	Identifier	arena		1386397	1					
ANR	1387007	ReturnStatement	return 1 ;	748:1:22982:22990	1386397	14	True				
ANR	1387008	PrimaryExpression	1		1386397	0					
ANR	1387009	ReturnType	int		1386397	1					
ANR	1387010	Identifier	zend_accel_script_optimize		1386397	2					
ANR	1387011	ParameterList	zend_persistent_script * script		1386397	3					
ANR	1387012	Parameter	zend_persistent_script * script	669:31:20422:20451	1386397	0	True				
ANR	1387013	ParameterType	zend_persistent_script *		1386397	0					
ANR	1387014	Identifier	script		1386397	1					
ANR	1387015	CFGEntryNode	ENTRY		1386397		True				
ANR	1387016	CFGExitNode	EXIT		1386397		True				
ANR	1387017	Symbol	ZEND_OPTIMIZER_PASS_12		1386397						
ANR	1387018	Symbol	script -> function_table		1386397						
ANR	1387019	Symbol	script -> class_table . nNumUsed		1386397						
ANR	1387020	Symbol	Z_TYPE		1386397						
ANR	1387021	Symbol	Z_PTR		1386397						
ANR	1387022	Symbol	& ctx		1386397						
ANR	1387023	Symbol	* ce		1386397						
ANR	1387024	Symbol	ht		1386397						
ANR	1387025	Symbol	script -> function_table . arData		1386397						
ANR	1387026	Symbol	q -> key		1386397						
ANR	1387027	Symbol	op_array -> type		1386397						
ANR	1387028	Symbol	& script -> main_op_array		1386397						
ANR	1387029	Symbol	ce -> function_table . nNumUsed		1386397						
ANR	1387030	Symbol	ZEND_USER_FUNCTION		1386397						
ANR	1387031	Symbol	orig_op_array		1386397						
ANR	1387032	Symbol	script -> function_table . nNumUsed		1386397						
ANR	1387033	Symbol	OPTIMIZATION_LEVEL		1386397						
ANR	1387034	Symbol	op_array -> static_variables		1386397						
ANR	1387035	Symbol	zend_hash_find_ptr		1386397						
ANR	1387036	Symbol	IS_UNDEF		1386397						
ANR	1387037	Symbol	* script		1386397						
ANR	1387038	Symbol	script -> class_table . arData		1386397						
ANR	1387039	Symbol	ce		1386397						
ANR	1387040	Symbol	NULL		1386397						
ANR	1387041	Symbol	ctx . arena		1386397						
ANR	1387042	Symbol	ctx . script		1386397						
ANR	1387043	Symbol	ctx		1386397						
ANR	1387044	Symbol	zend_arena_create		1386397						
ANR	1387045	Symbol	& op_array -> scope -> function_table		1386397						
ANR	1387046	Symbol	j		1386397						
ANR	1387047	Symbol	* orig_op_array		1386397						
ANR	1387048	Symbol	p -> val		1386397						
ANR	1387049	Symbol	script -> class_table		1386397						
ANR	1387050	Symbol	script		1386397						
ANR	1387051	Symbol	op_array -> scope		1386397						
ANR	1387052	Symbol	* op_array		1386397						
ANR	1387053	Symbol	p		1386397						
ANR	1387054	Symbol	q		1386397						
ANR	1387055	Symbol	q -> val		1386397						
ANR	1387056	Symbol	ce -> function_table . arData		1386397						
ANR	1387057	Symbol	ctx . constants		1386397						
ANR	1387058	Symbol	* p		1386397						
ANR	1387059	Symbol	ce -> function_table		1386397						
ANR	1387060	Symbol	* q		1386397						
ANR	1387061	Symbol	idx		1386397						
ANR	1387062	Symbol	op_array		1386397						
