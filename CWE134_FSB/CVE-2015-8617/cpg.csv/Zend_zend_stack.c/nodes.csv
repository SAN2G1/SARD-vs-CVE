command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	344013	File	data/converged/CVE-2015-8617_php-src/Zend_zend_stack.c								
ANR	344014	Function	zend_stack_init	27:0:1377:1534							
ANR	344015	FunctionDef	"zend_stack_init (zend_stack * stack , int size)"		344014	0					
ANR	344016	CompoundStatement		28:0:1435:1534	344014	0					
ANR	344017	ExpressionStatement	stack -> size = size	29:1:1438:1456	344014	0	True				
ANR	344018	AssignmentExpression	stack -> size = size		344014	0		=			
ANR	344019	PtrMemberAccess	stack -> size		344014	0					
ANR	344020	Identifier	stack		344014	0					
ANR	344021	Identifier	size		344014	1					
ANR	344022	Identifier	size		344014	1					
ANR	344023	ExpressionStatement	stack -> top = 0	30:1:1459:1473	344014	1	True				
ANR	344024	AssignmentExpression	stack -> top = 0		344014	0		=			
ANR	344025	PtrMemberAccess	stack -> top		344014	0					
ANR	344026	Identifier	stack		344014	0					
ANR	344027	Identifier	top		344014	1					
ANR	344028	PrimaryExpression	0		344014	1					
ANR	344029	ExpressionStatement	stack -> max = 0	31:1:1476:1490	344014	2	True				
ANR	344030	AssignmentExpression	stack -> max = 0		344014	0		=			
ANR	344031	PtrMemberAccess	stack -> max		344014	0					
ANR	344032	Identifier	stack		344014	0					
ANR	344033	Identifier	max		344014	1					
ANR	344034	PrimaryExpression	0		344014	1					
ANR	344035	ExpressionStatement	stack -> elements = NULL	32:1:1493:1515	344014	3	True				
ANR	344036	AssignmentExpression	stack -> elements = NULL		344014	0		=			
ANR	344037	PtrMemberAccess	stack -> elements		344014	0					
ANR	344038	Identifier	stack		344014	0					
ANR	344039	Identifier	elements		344014	1					
ANR	344040	Identifier	NULL		344014	1					
ANR	344041	ReturnStatement	return SUCCESS ;	33:1:1518:1532	344014	4	True				
ANR	344042	Identifier	SUCCESS		344014	0					
ANR	344043	ReturnType	ZEND_API int		344014	1					
ANR	344044	Identifier	zend_stack_init		344014	2					
ANR	344045	ParameterList	"zend_stack * stack , int size"		344014	3					
ANR	344046	Parameter	zend_stack * stack	27:29:1406:1422	344014	0	True				
ANR	344047	ParameterType	zend_stack *		344014	0					
ANR	344048	Identifier	stack		344014	1					
ANR	344049	Parameter	int size	27:48:1425:1432	344014	1	True				
ANR	344050	ParameterType	int		344014	0					
ANR	344051	Identifier	size		344014	1					
ANR	344052	CFGEntryNode	ENTRY		344014		True				
ANR	344053	CFGExitNode	EXIT		344014		True				
ANR	344054	Symbol	stack		344014						
ANR	344055	Symbol	NULL		344014						
ANR	344056	Symbol	SUCCESS		344014						
ANR	344057	Symbol	size		344014						
ANR	344058	Symbol	* stack		344014						
ANR	344059	Symbol	stack -> top		344014						
ANR	344060	Symbol	stack -> elements		344014						
ANR	344061	Symbol	stack -> size		344014						
ANR	344062	Symbol	stack -> max		344014						
ANR	344063	Function	zend_stack_push	36:0:1537:1889							
ANR	344064	FunctionDef	"zend_stack_push (zend_stack * stack , const void * element)"		344063	0					
ANR	344065	CompoundStatement		37:0:1606:1889	344063	0					
ANR	344066	IfStatement	if ( stack -> top >= stack -> max )		344063	0					
ANR	344067	Condition	stack -> top >= stack -> max	39:5:1652:1675	344063	0	True				
ANR	344068	RelationalExpression	stack -> top >= stack -> max		344063	0		>=			
ANR	344069	PtrMemberAccess	stack -> top		344063	0					
ANR	344070	Identifier	stack		344063	0					
ANR	344071	Identifier	top		344063	1					
ANR	344072	PtrMemberAccess	stack -> max		344063	1					
ANR	344073	Identifier	stack		344063	0					
ANR	344074	Identifier	max		344063	1					
ANR	344075	CompoundStatement		3:31:71:71	344063	1					
ANR	344076	ExpressionStatement	stack -> max += STACK_BLOCK_SIZE	40:2:1682:1712	344063	0	True				
ANR	344077	AssignmentExpression	stack -> max += STACK_BLOCK_SIZE		344063	0		+=			
ANR	344078	PtrMemberAccess	stack -> max		344063	0					
ANR	344079	Identifier	stack		344063	0					
ANR	344080	Identifier	max		344063	1					
ANR	344081	Identifier	STACK_BLOCK_SIZE		344063	1					
ANR	344082	ExpressionStatement	"stack -> elements = safe_erealloc ( stack -> elements , stack -> size , stack -> max , 0 )"	41:2:1716:1792	344063	1	True				
ANR	344083	AssignmentExpression	"stack -> elements = safe_erealloc ( stack -> elements , stack -> size , stack -> max , 0 )"		344063	0		=			
ANR	344084	PtrMemberAccess	stack -> elements		344063	0					
ANR	344085	Identifier	stack		344063	0					
ANR	344086	Identifier	elements		344063	1					
ANR	344087	CallExpression	"safe_erealloc ( stack -> elements , stack -> size , stack -> max , 0 )"		344063	1					
ANR	344088	Callee	safe_erealloc		344063	0					
ANR	344089	Identifier	safe_erealloc		344063	0					
ANR	344090	ArgumentList	stack -> elements		344063	1					
ANR	344091	Argument	stack -> elements		344063	0					
ANR	344092	PtrMemberAccess	stack -> elements		344063	0					
ANR	344093	Identifier	stack		344063	0					
ANR	344094	Identifier	elements		344063	1					
ANR	344095	Argument	stack -> size		344063	1					
ANR	344096	PtrMemberAccess	stack -> size		344063	0					
ANR	344097	Identifier	stack		344063	0					
ANR	344098	Identifier	size		344063	1					
ANR	344099	Argument	stack -> max		344063	2					
ANR	344100	PtrMemberAccess	stack -> max		344063	0					
ANR	344101	Identifier	stack		344063	0					
ANR	344102	Identifier	max		344063	1					
ANR	344103	Argument	0		344063	3					
ANR	344104	PrimaryExpression	0		344063	0					
ANR	344105	ExpressionStatement	"memcpy ( ZEND_STACK_ELEMENT ( stack , stack -> top ) , element , stack -> size )"	43:1:1798:1865	344063	1	True				
ANR	344106	CallExpression	"memcpy ( ZEND_STACK_ELEMENT ( stack , stack -> top ) , element , stack -> size )"		344063	0					
ANR	344107	Callee	memcpy		344063	0					
ANR	344108	Identifier	memcpy		344063	0					
ANR	344109	ArgumentList	"ZEND_STACK_ELEMENT ( stack , stack -> top )"		344063	1					
ANR	344110	Argument	"ZEND_STACK_ELEMENT ( stack , stack -> top )"		344063	0					
ANR	344111	CallExpression	"ZEND_STACK_ELEMENT ( stack , stack -> top )"		344063	0					
ANR	344112	Callee	ZEND_STACK_ELEMENT		344063	0					
ANR	344113	Identifier	ZEND_STACK_ELEMENT		344063	0					
ANR	344114	ArgumentList	stack		344063	1					
ANR	344115	Argument	stack		344063	0					
ANR	344116	Identifier	stack		344063	0					
ANR	344117	Argument	stack -> top		344063	1					
ANR	344118	PtrMemberAccess	stack -> top		344063	0					
ANR	344119	Identifier	stack		344063	0					
ANR	344120	Identifier	top		344063	1					
ANR	344121	Argument	element		344063	1					
ANR	344122	Identifier	element		344063	0					
ANR	344123	Argument	stack -> size		344063	2					
ANR	344124	PtrMemberAccess	stack -> size		344063	0					
ANR	344125	Identifier	stack		344063	0					
ANR	344126	Identifier	size		344063	1					
ANR	344127	ReturnStatement	return stack -> top ++ ;	44:1:1868:1887	344063	2	True				
ANR	344128	PostIncDecOperationExpression	stack -> top ++		344063	0					
ANR	344129	PtrMemberAccess	stack -> top		344063	0					
ANR	344130	Identifier	stack		344063	0					
ANR	344131	Identifier	top		344063	1					
ANR	344132	IncDec	++		344063	1					
ANR	344133	ReturnType	ZEND_API int		344063	1					
ANR	344134	Identifier	zend_stack_push		344063	2					
ANR	344135	ParameterList	"zend_stack * stack , const void * element"		344063	3					
ANR	344136	Parameter	zend_stack * stack	36:29:1566:1582	344063	0	True				
ANR	344137	ParameterType	zend_stack *		344063	0					
ANR	344138	Identifier	stack		344063	1					
ANR	344139	Parameter	const void * element	36:48:1585:1603	344063	1	True				
ANR	344140	ParameterType	const void *		344063	0					
ANR	344141	Identifier	element		344063	1					
ANR	344142	CFGEntryNode	ENTRY		344063		True				
ANR	344143	CFGExitNode	EXIT		344063		True				
ANR	344144	Symbol	stack		344063						
ANR	344145	Symbol	STACK_BLOCK_SIZE		344063						
ANR	344146	Symbol	ZEND_STACK_ELEMENT		344063						
ANR	344147	Symbol	safe_erealloc		344063						
ANR	344148	Symbol	* stack		344063						
ANR	344149	Symbol	stack -> top		344063						
ANR	344150	Symbol	stack -> elements		344063						
ANR	344151	Symbol	element		344063						
ANR	344152	Symbol	stack -> max		344063						
ANR	344153	Symbol	stack -> size		344063						
ANR	344154	Function	zend_stack_top	48:0:1893:2053							
ANR	344155	FunctionDef	zend_stack_top (const zend_stack * stack)		344154	0					
ANR	344156	CompoundStatement		49:0:1948:2053	344154	0					
ANR	344157	IfStatement	if ( stack -> top > 0 )		344154	0					
ANR	344158	Condition	stack -> top > 0	50:5:1955:1968	344154	0	True				
ANR	344159	RelationalExpression	stack -> top > 0		344154	0		>			
ANR	344160	PtrMemberAccess	stack -> top		344154	0					
ANR	344161	Identifier	stack		344154	0					
ANR	344162	Identifier	top		344154	1					
ANR	344163	PrimaryExpression	0		344154	1					
ANR	344164	CompoundStatement		2:21:22:22	344154	1					
ANR	344165	ReturnStatement	"return ZEND_STACK_ELEMENT ( stack , stack -> top - 1 ) ;"	51:2:1975:2023	344154	0	True				
ANR	344166	CallExpression	"ZEND_STACK_ELEMENT ( stack , stack -> top - 1 )"		344154	0					
ANR	344167	Callee	ZEND_STACK_ELEMENT		344154	0					
ANR	344168	Identifier	ZEND_STACK_ELEMENT		344154	0					
ANR	344169	ArgumentList	stack		344154	1					
ANR	344170	Argument	stack		344154	0					
ANR	344171	Identifier	stack		344154	0					
ANR	344172	Argument	stack -> top - 1		344154	1					
ANR	344173	AdditiveExpression	stack -> top - 1		344154	0		-			
ANR	344174	PtrMemberAccess	stack -> top		344154	0					
ANR	344175	Identifier	stack		344154	0					
ANR	344176	Identifier	top		344154	1					
ANR	344177	PrimaryExpression	1		344154	1					
ANR	344178	ElseStatement	else		344154	0					
ANR	344179	CompoundStatement		4:8:84:84	344154	0					
ANR	344180	ReturnStatement	return NULL ;	53:2:2037:2048	344154	0	True				
ANR	344181	Identifier	NULL		344154	0					
ANR	344182	ReturnType	ZEND_API void *		344154	1					
ANR	344183	Identifier	zend_stack_top		344154	2					
ANR	344184	ParameterList	const zend_stack * stack		344154	3					
ANR	344185	Parameter	const zend_stack * stack	48:30:1923:1945	344154	0	True				
ANR	344186	ParameterType	const zend_stack *		344154	0					
ANR	344187	Identifier	stack		344154	1					
ANR	344188	CFGEntryNode	ENTRY		344154		True				
ANR	344189	CFGExitNode	EXIT		344154		True				
ANR	344190	Symbol	stack		344154						
ANR	344191	Symbol	ZEND_STACK_ELEMENT		344154						
ANR	344192	Symbol	NULL		344154						
ANR	344193	Symbol	* stack		344154						
ANR	344194	Symbol	stack -> top		344154						
ANR	344195	Function	zend_stack_del_top	58:0:2057:2142							
ANR	344196	FunctionDef	zend_stack_del_top (zend_stack * stack)		344195	0					
ANR	344197	CompoundStatement		59:0:2108:2142	344195	0					
ANR	344198	ExpressionStatement	-- stack -> top	60:1:2111:2123	344195	0	True				
ANR	344199	UnaryExpression	-- stack -> top		344195	0					
ANR	344200	IncDec	--		344195	0					
ANR	344201	PtrMemberAccess	stack -> top		344195	1					
ANR	344202	Identifier	stack		344195	0					
ANR	344203	Identifier	top		344195	1					
ANR	344204	ReturnStatement	return SUCCESS ;	61:1:2126:2140	344195	1	True				
ANR	344205	Identifier	SUCCESS		344195	0					
ANR	344206	ReturnType	ZEND_API int		344195	1					
ANR	344207	Identifier	zend_stack_del_top		344195	2					
ANR	344208	ParameterList	zend_stack * stack		344195	3					
ANR	344209	Parameter	zend_stack * stack	58:32:2089:2105	344195	0	True				
ANR	344210	ParameterType	zend_stack *		344195	0					
ANR	344211	Identifier	stack		344195	1					
ANR	344212	CFGEntryNode	ENTRY		344195		True				
ANR	344213	CFGExitNode	EXIT		344195		True				
ANR	344214	Symbol	stack		344195						
ANR	344215	Symbol	SUCCESS		344195						
ANR	344216	Function	zend_stack_int_top	65:0:2146:2292							
ANR	344217	FunctionDef	zend_stack_int_top (const zend_stack * stack)		344216	0					
ANR	344218	CompoundStatement		66:0:2203:2292	344216	0					
ANR	344219	IdentifierDeclStatement	int * e = zend_stack_top ( stack ) ;	67:1:2206:2236	344216	0	True				
ANR	344220	IdentifierDecl	* e = zend_stack_top ( stack )		344216	0					
ANR	344221	IdentifierDeclType	int *		344216	0					
ANR	344222	Identifier	e		344216	1					
ANR	344223	AssignmentExpression	* e = zend_stack_top ( stack )		344216	2		=			
ANR	344224	Identifier	e		344216	0					
ANR	344225	CallExpression	zend_stack_top ( stack )		344216	1					
ANR	344226	Callee	zend_stack_top		344216	0					
ANR	344227	Identifier	zend_stack_top		344216	0					
ANR	344228	ArgumentList	stack		344216	1					
ANR	344229	Argument	stack		344216	0					
ANR	344230	Identifier	stack		344216	0					
ANR	344231	IfStatement	if ( e )		344216	1					
ANR	344232	Condition	e	68:5:2243:2243	344216	0	True				
ANR	344233	Identifier	e		344216	0					
ANR	344234	CompoundStatement		3:8:42:42	344216	1					
ANR	344235	ReturnStatement	return * e ;	69:2:2250:2259	344216	0	True				
ANR	344236	UnaryOperationExpression	* e		344216	0					
ANR	344237	UnaryOperator	*		344216	0					
ANR	344238	Identifier	e		344216	1					
ANR	344239	ElseStatement	else		344216	0					
ANR	344240	CompoundStatement		5:8:65:65	344216	0					
ANR	344241	ReturnStatement	return FAILURE ;	71:2:2273:2287	344216	0	True				
ANR	344242	Identifier	FAILURE		344216	0					
ANR	344243	ReturnType	ZEND_API int		344216	1					
ANR	344244	Identifier	zend_stack_int_top		344216	2					
ANR	344245	ParameterList	const zend_stack * stack		344216	3					
ANR	344246	Parameter	const zend_stack * stack	65:32:2178:2200	344216	0	True				
ANR	344247	ParameterType	const zend_stack *		344216	0					
ANR	344248	Identifier	stack		344216	1					
ANR	344249	CFGEntryNode	ENTRY		344216		True				
ANR	344250	CFGExitNode	EXIT		344216		True				
ANR	344251	Symbol	stack		344216						
ANR	344252	Symbol	zend_stack_top		344216						
ANR	344253	Symbol	e		344216						
ANR	344254	Symbol	FAILURE		344216						
ANR	344255	Symbol	* e		344216						
ANR	344256	Function	zend_stack_is_empty	76:0:2296:2381							
ANR	344257	FunctionDef	zend_stack_is_empty (const zend_stack * stack)		344256	0					
ANR	344258	CompoundStatement		77:0:2354:2381	344256	0					
ANR	344259	ReturnStatement	return stack -> top == 0 ;	78:1:2357:2379	344256	0	True				
ANR	344260	EqualityExpression	stack -> top == 0		344256	0		==			
ANR	344261	PtrMemberAccess	stack -> top		344256	0					
ANR	344262	Identifier	stack		344256	0					
ANR	344263	Identifier	top		344256	1					
ANR	344264	PrimaryExpression	0		344256	1					
ANR	344265	ReturnType	ZEND_API int		344256	1					
ANR	344266	Identifier	zend_stack_is_empty		344256	2					
ANR	344267	ParameterList	const zend_stack * stack		344256	3					
ANR	344268	Parameter	const zend_stack * stack	76:33:2329:2351	344256	0	True				
ANR	344269	ParameterType	const zend_stack *		344256	0					
ANR	344270	Identifier	stack		344256	1					
ANR	344271	CFGEntryNode	ENTRY		344256		True				
ANR	344272	CFGExitNode	EXIT		344256		True				
ANR	344273	Symbol	stack		344256						
ANR	344274	Symbol	* stack		344256						
ANR	344275	Symbol	stack -> top		344256						
ANR	344276	Function	zend_stack_destroy	82:0:2385:2535							
ANR	344277	FunctionDef	zend_stack_destroy (zend_stack * stack)		344276	0					
ANR	344278	CompoundStatement		83:0:2436:2535	344276	0					
ANR	344279	IfStatement	if ( stack -> elements )		344276	0					
ANR	344280	Condition	stack -> elements	84:5:2443:2457	344276	0	True				
ANR	344281	PtrMemberAccess	stack -> elements		344276	0					
ANR	344282	Identifier	stack		344276	0					
ANR	344283	Identifier	elements		344276	1					
ANR	344284	CompoundStatement		2:22:23:23	344276	1					
ANR	344285	ExpressionStatement	efree ( stack -> elements )	85:2:2464:2486	344276	0	True				
ANR	344286	CallExpression	efree ( stack -> elements )		344276	0					
ANR	344287	Callee	efree		344276	0					
ANR	344288	Identifier	efree		344276	0					
ANR	344289	ArgumentList	stack -> elements		344276	1					
ANR	344290	Argument	stack -> elements		344276	0					
ANR	344291	PtrMemberAccess	stack -> elements		344276	0					
ANR	344292	Identifier	stack		344276	0					
ANR	344293	Identifier	elements		344276	1					
ANR	344294	ExpressionStatement	stack -> elements = NULL	86:2:2490:2512	344276	1	True				
ANR	344295	AssignmentExpression	stack -> elements = NULL		344276	0		=			
ANR	344296	PtrMemberAccess	stack -> elements		344276	0					
ANR	344297	Identifier	stack		344276	0					
ANR	344298	Identifier	elements		344276	1					
ANR	344299	Identifier	NULL		344276	1					
ANR	344300	ReturnStatement	return SUCCESS ;	89:1:2519:2533	344276	1	True				
ANR	344301	Identifier	SUCCESS		344276	0					
ANR	344302	ReturnType	ZEND_API int		344276	1					
ANR	344303	Identifier	zend_stack_destroy		344276	2					
ANR	344304	ParameterList	zend_stack * stack		344276	3					
ANR	344305	Parameter	zend_stack * stack	82:32:2417:2433	344276	0	True				
ANR	344306	ParameterType	zend_stack *		344276	0					
ANR	344307	Identifier	stack		344276	1					
ANR	344308	CFGEntryNode	ENTRY		344276		True				
ANR	344309	CFGExitNode	EXIT		344276		True				
ANR	344310	Symbol	stack		344276						
ANR	344311	Symbol	NULL		344276						
ANR	344312	Symbol	SUCCESS		344276						
ANR	344313	Symbol	* stack		344276						
ANR	344314	Symbol	stack -> elements		344276						
ANR	344315	Function	zend_stack_base	93:0:2539:2622							
ANR	344316	FunctionDef	zend_stack_base (const zend_stack * stack)		344315	0					
ANR	344317	CompoundStatement		94:0:2595:2622	344315	0					
ANR	344318	ReturnStatement	return stack -> elements ;	95:1:2598:2620	344315	0	True				
ANR	344319	PtrMemberAccess	stack -> elements		344315	0					
ANR	344320	Identifier	stack		344315	0					
ANR	344321	Identifier	elements		344315	1					
ANR	344322	ReturnType	ZEND_API void *		344315	1					
ANR	344323	Identifier	zend_stack_base		344315	2					
ANR	344324	ParameterList	const zend_stack * stack		344315	3					
ANR	344325	Parameter	const zend_stack * stack	93:31:2570:2592	344315	0	True				
ANR	344326	ParameterType	const zend_stack *		344315	0					
ANR	344327	Identifier	stack		344315	1					
ANR	344328	CFGEntryNode	ENTRY		344315		True				
ANR	344329	CFGExitNode	EXIT		344315		True				
ANR	344330	Symbol	stack		344315						
ANR	344331	Symbol	* stack		344315						
ANR	344332	Symbol	stack -> elements		344315						
ANR	344333	Function	zend_stack_count	99:0:2626:2703							
ANR	344334	FunctionDef	zend_stack_count (const zend_stack * stack)		344333	0					
ANR	344335	CompoundStatement		100:0:2681:2703	344333	0					
ANR	344336	ReturnStatement	return stack -> top ;	101:1:2684:2701	344333	0	True				
ANR	344337	PtrMemberAccess	stack -> top		344333	0					
ANR	344338	Identifier	stack		344333	0					
ANR	344339	Identifier	top		344333	1					
ANR	344340	ReturnType	ZEND_API int		344333	1					
ANR	344341	Identifier	zend_stack_count		344333	2					
ANR	344342	ParameterList	const zend_stack * stack		344333	3					
ANR	344343	Parameter	const zend_stack * stack	99:30:2656:2678	344333	0	True				
ANR	344344	ParameterType	const zend_stack *		344333	0					
ANR	344345	Identifier	stack		344333	1					
ANR	344346	CFGEntryNode	ENTRY		344333		True				
ANR	344347	CFGExitNode	EXIT		344333		True				
ANR	344348	Symbol	stack		344333						
ANR	344349	Symbol	* stack		344333						
ANR	344350	Symbol	stack -> top		344333						
ANR	344351	Function	zend_stack_apply	105:0:2707:3152							
ANR	344352	FunctionDef	"zend_stack_apply (zend_stack * stack , int type , int ( * apply_function ) ( void * element ))"		344351	0					
ANR	344353	CompoundStatement		106:0:2805:3152	344351	0					
ANR	344354	IdentifierDeclStatement	int i ;	107:1:2808:2813	344351	0	True				
ANR	344355	IdentifierDecl	i		344351	0					
ANR	344356	IdentifierDeclType	int		344351	0					
ANR	344357	Identifier	i		344351	1					
ANR	344358	SwitchStatement	switch ( type )		344351	1					
ANR	344359	Condition	type	109:9:2825:2828	344351	0	True				
ANR	344360	Identifier	type		344351	0					
ANR	344361	CompoundStatement		4:15:25:25	344351	1					
ANR	344362	Label	case ZEND_STACK_APPLY_TOPDOWN :	110:2:2835:2864	344351	0	True				
ANR	344363	Identifier	ZEND_STACK_APPLY_TOPDOWN		344351	0					
ANR	344364	ForStatement	for ( i = stack -> top - 1 ; i >= 0 ; i -- )		344351	1					
ANR	344365	ForInit	i = stack -> top - 1 ;	111:8:2874:2888	344351	0	True				
ANR	344366	AssignmentExpression	i = stack -> top - 1		344351	0		=			
ANR	344367	Identifier	i		344351	0					
ANR	344368	AdditiveExpression	stack -> top - 1		344351	1		-			
ANR	344369	PtrMemberAccess	stack -> top		344351	0					
ANR	344370	Identifier	stack		344351	0					
ANR	344371	Identifier	top		344351	1					
ANR	344372	PrimaryExpression	1		344351	1					
ANR	344373	Condition	i >= 0	111:24:2890:2893	344351	1	True				
ANR	344374	RelationalExpression	i >= 0		344351	0		>=			
ANR	344375	Identifier	i		344351	0					
ANR	344376	PrimaryExpression	0		344351	1					
ANR	344377	PostIncDecOperationExpression	i --	111:30:2896:2898	344351	2	True				
ANR	344378	Identifier	i		344351	0					
ANR	344379	IncDec	--		344351	1					
ANR	344380	CompoundStatement		6:35:95:95	344351	3					
ANR	344381	IfStatement	"if ( apply_function ( ZEND_STACK_ELEMENT ( stack , i ) ) )"		344351	0					
ANR	344382	Condition	"apply_function ( ZEND_STACK_ELEMENT ( stack , i ) )"	112:8:2911:2954	344351	0	True				
ANR	344383	CallExpression	"apply_function ( ZEND_STACK_ELEMENT ( stack , i ) )"		344351	0					
ANR	344384	Callee	apply_function		344351	0					
ANR	344385	Identifier	apply_function		344351	0					
ANR	344386	ArgumentList	"ZEND_STACK_ELEMENT ( stack , i )"		344351	1					
ANR	344387	Argument	"ZEND_STACK_ELEMENT ( stack , i )"		344351	0					
ANR	344388	CallExpression	"ZEND_STACK_ELEMENT ( stack , i )"		344351	0					
ANR	344389	Callee	ZEND_STACK_ELEMENT		344351	0					
ANR	344390	Identifier	ZEND_STACK_ELEMENT		344351	0					
ANR	344391	ArgumentList	stack		344351	1					
ANR	344392	Argument	stack		344351	0					
ANR	344393	Identifier	stack		344351	0					
ANR	344394	Argument	i		344351	1					
ANR	344395	Identifier	i		344351	0					
ANR	344396	CompoundStatement		7:54:151:151	344351	1					
ANR	344397	BreakStatement	break ;	113:5:2964:2969	344351	0	True				
ANR	344398	BreakStatement	break ;	116:3:2985:2990	344351	2	True				
ANR	344399	Label	case ZEND_STACK_APPLY_BOTTOMUP :	117:2:2994:3024	344351	3	True				
ANR	344400	Identifier	ZEND_STACK_APPLY_BOTTOMUP		344351	0					
ANR	344401	ForStatement	for ( i = 0 ; i < stack -> top ; i ++ )		344351	4					
ANR	344402	ForInit	i = 0 ;	118:8:3034:3037	344351	0	True				
ANR	344403	AssignmentExpression	i = 0		344351	0		=			
ANR	344404	Identifier	i		344351	0					
ANR	344405	PrimaryExpression	0		344351	1					
ANR	344406	Condition	i < stack -> top	118:13:3039:3050	344351	1	True				
ANR	344407	RelationalExpression	i < stack -> top		344351	0		<			
ANR	344408	Identifier	i		344351	0					
ANR	344409	PtrMemberAccess	stack -> top		344351	1					
ANR	344410	Identifier	stack		344351	0					
ANR	344411	Identifier	top		344351	1					
ANR	344412	PostIncDecOperationExpression	i ++	118:27:3053:3055	344351	2	True				
ANR	344413	Identifier	i		344351	0					
ANR	344414	IncDec	++		344351	1					
ANR	344415	CompoundStatement		13:32:252:252	344351	3					
ANR	344416	IfStatement	"if ( apply_function ( ZEND_STACK_ELEMENT ( stack , i ) ) )"		344351	0					
ANR	344417	Condition	"apply_function ( ZEND_STACK_ELEMENT ( stack , i ) )"	119:8:3068:3111	344351	0	True				
ANR	344418	CallExpression	"apply_function ( ZEND_STACK_ELEMENT ( stack , i ) )"		344351	0					
ANR	344419	Callee	apply_function		344351	0					
ANR	344420	Identifier	apply_function		344351	0					
ANR	344421	ArgumentList	"ZEND_STACK_ELEMENT ( stack , i )"		344351	1					
ANR	344422	Argument	"ZEND_STACK_ELEMENT ( stack , i )"		344351	0					
ANR	344423	CallExpression	"ZEND_STACK_ELEMENT ( stack , i )"		344351	0					
ANR	344424	Callee	ZEND_STACK_ELEMENT		344351	0					
ANR	344425	Identifier	ZEND_STACK_ELEMENT		344351	0					
ANR	344426	ArgumentList	stack		344351	1					
ANR	344427	Argument	stack		344351	0					
ANR	344428	Identifier	stack		344351	0					
ANR	344429	Argument	i		344351	1					
ANR	344430	Identifier	i		344351	0					
ANR	344431	CompoundStatement		14:54:308:308	344351	1					
ANR	344432	BreakStatement	break ;	120:5:3121:3126	344351	0	True				
ANR	344433	BreakStatement	break ;	123:3:3142:3147	344351	5	True				
ANR	344434	ReturnType	ZEND_API void		344351	1					
ANR	344435	Identifier	zend_stack_apply		344351	2					
ANR	344436	ParameterList	"zend_stack * stack , int type , int ( * apply_function ) ( void * element )"		344351	3					
ANR	344437	Parameter	zend_stack * stack	105:31:2738:2754	344351	0	True				
ANR	344438	ParameterType	zend_stack *		344351	0					
ANR	344439	Identifier	stack		344351	1					
ANR	344440	Parameter	int type	105:50:2757:2764	344351	1	True				
ANR	344441	ParameterType	int		344351	0					
ANR	344442	Identifier	type		344351	1					
ANR	344443	Parameter	int ( * apply_function ) ( void * element )	105:60:2767:2802	344351	2	True				
ANR	344444	ParameterType	(( void * element ) int) *		344351	0					
ANR	344445	Identifier	apply_function		344351	1					
ANR	344446	CFGEntryNode	ENTRY		344351		True				
ANR	344447	CFGExitNode	EXIT		344351		True				
ANR	344448	Symbol	stack		344351						
ANR	344449	Symbol	apply_function		344351						
ANR	344450	Symbol	ZEND_STACK_ELEMENT		344351						
ANR	344451	Symbol	i		344351						
ANR	344452	Symbol	* stack		344351						
ANR	344453	Symbol	type		344351						
ANR	344454	Symbol	stack -> top		344351						
ANR	344455	Function	zend_stack_apply_with_argument	128:0:3156:3647							
ANR	344456	FunctionDef	"zend_stack_apply_with_argument (zend_stack * stack , int type , int ( * apply_function ) ( void * element , void * arg ) , void * arg)"		344455	0					
ANR	344457	CompoundStatement		129:0:3290:3647	344455	0					
ANR	344458	IdentifierDeclStatement	int i ;	130:1:3293:3298	344455	0	True				
ANR	344459	IdentifierDecl	i		344455	0					
ANR	344460	IdentifierDeclType	int		344455	0					
ANR	344461	Identifier	i		344455	1					
ANR	344462	SwitchStatement	switch ( type )		344455	1					
ANR	344463	Condition	type	132:9:3310:3313	344455	0	True				
ANR	344464	Identifier	type		344455	0					
ANR	344465	CompoundStatement		4:15:25:25	344455	1					
ANR	344466	Label	case ZEND_STACK_APPLY_TOPDOWN :	133:2:3320:3349	344455	0	True				
ANR	344467	Identifier	ZEND_STACK_APPLY_TOPDOWN		344455	0					
ANR	344468	ForStatement	for ( i = stack -> top - 1 ; i >= 0 ; i -- )		344455	1					
ANR	344469	ForInit	i = stack -> top - 1 ;	134:8:3359:3373	344455	0	True				
ANR	344470	AssignmentExpression	i = stack -> top - 1		344455	0		=			
ANR	344471	Identifier	i		344455	0					
ANR	344472	AdditiveExpression	stack -> top - 1		344455	1		-			
ANR	344473	PtrMemberAccess	stack -> top		344455	0					
ANR	344474	Identifier	stack		344455	0					
ANR	344475	Identifier	top		344455	1					
ANR	344476	PrimaryExpression	1		344455	1					
ANR	344477	Condition	i >= 0	134:24:3375:3378	344455	1	True				
ANR	344478	RelationalExpression	i >= 0		344455	0		>=			
ANR	344479	Identifier	i		344455	0					
ANR	344480	PrimaryExpression	0		344455	1					
ANR	344481	PostIncDecOperationExpression	i --	134:30:3381:3383	344455	2	True				
ANR	344482	Identifier	i		344455	0					
ANR	344483	IncDec	--		344455	1					
ANR	344484	CompoundStatement		6:35:95:95	344455	3					
ANR	344485	IfStatement	"if ( apply_function ( ZEND_STACK_ELEMENT ( stack , i ) , arg ) )"		344455	0					
ANR	344486	Condition	"apply_function ( ZEND_STACK_ELEMENT ( stack , i ) , arg )"	135:8:3396:3444	344455	0	True				
ANR	344487	CallExpression	"apply_function ( ZEND_STACK_ELEMENT ( stack , i ) , arg )"		344455	0					
ANR	344488	Callee	apply_function		344455	0					
ANR	344489	Identifier	apply_function		344455	0					
ANR	344490	ArgumentList	"ZEND_STACK_ELEMENT ( stack , i )"		344455	1					
ANR	344491	Argument	"ZEND_STACK_ELEMENT ( stack , i )"		344455	0					
ANR	344492	CallExpression	"ZEND_STACK_ELEMENT ( stack , i )"		344455	0					
ANR	344493	Callee	ZEND_STACK_ELEMENT		344455	0					
ANR	344494	Identifier	ZEND_STACK_ELEMENT		344455	0					
ANR	344495	ArgumentList	stack		344455	1					
ANR	344496	Argument	stack		344455	0					
ANR	344497	Identifier	stack		344455	0					
ANR	344498	Argument	i		344455	1					
ANR	344499	Identifier	i		344455	0					
ANR	344500	Argument	arg		344455	1					
ANR	344501	Identifier	arg		344455	0					
ANR	344502	CompoundStatement		7:59:156:156	344455	1					
ANR	344503	BreakStatement	break ;	136:5:3454:3459	344455	0	True				
ANR	344504	BreakStatement	break ;	139:3:3475:3480	344455	2	True				
ANR	344505	Label	case ZEND_STACK_APPLY_BOTTOMUP :	140:2:3484:3514	344455	3	True				
ANR	344506	Identifier	ZEND_STACK_APPLY_BOTTOMUP		344455	0					
ANR	344507	ForStatement	for ( i = 0 ; i < stack -> top ; i ++ )		344455	4					
ANR	344508	ForInit	i = 0 ;	141:8:3524:3527	344455	0	True				
ANR	344509	AssignmentExpression	i = 0		344455	0		=			
ANR	344510	Identifier	i		344455	0					
ANR	344511	PrimaryExpression	0		344455	1					
ANR	344512	Condition	i < stack -> top	141:13:3529:3540	344455	1	True				
ANR	344513	RelationalExpression	i < stack -> top		344455	0		<			
ANR	344514	Identifier	i		344455	0					
ANR	344515	PtrMemberAccess	stack -> top		344455	1					
ANR	344516	Identifier	stack		344455	0					
ANR	344517	Identifier	top		344455	1					
ANR	344518	PostIncDecOperationExpression	i ++	141:27:3543:3545	344455	2	True				
ANR	344519	Identifier	i		344455	0					
ANR	344520	IncDec	++		344455	1					
ANR	344521	CompoundStatement		13:32:257:257	344455	3					
ANR	344522	IfStatement	"if ( apply_function ( ZEND_STACK_ELEMENT ( stack , i ) , arg ) )"		344455	0					
ANR	344523	Condition	"apply_function ( ZEND_STACK_ELEMENT ( stack , i ) , arg )"	142:8:3558:3606	344455	0	True				
ANR	344524	CallExpression	"apply_function ( ZEND_STACK_ELEMENT ( stack , i ) , arg )"		344455	0					
ANR	344525	Callee	apply_function		344455	0					
ANR	344526	Identifier	apply_function		344455	0					
ANR	344527	ArgumentList	"ZEND_STACK_ELEMENT ( stack , i )"		344455	1					
ANR	344528	Argument	"ZEND_STACK_ELEMENT ( stack , i )"		344455	0					
ANR	344529	CallExpression	"ZEND_STACK_ELEMENT ( stack , i )"		344455	0					
ANR	344530	Callee	ZEND_STACK_ELEMENT		344455	0					
ANR	344531	Identifier	ZEND_STACK_ELEMENT		344455	0					
ANR	344532	ArgumentList	stack		344455	1					
ANR	344533	Argument	stack		344455	0					
ANR	344534	Identifier	stack		344455	0					
ANR	344535	Argument	i		344455	1					
ANR	344536	Identifier	i		344455	0					
ANR	344537	Argument	arg		344455	1					
ANR	344538	Identifier	arg		344455	0					
ANR	344539	CompoundStatement		14:59:318:318	344455	1					
ANR	344540	BreakStatement	break ;	143:5:3616:3621	344455	0	True				
ANR	344541	BreakStatement	break ;	146:3:3637:3642	344455	5	True				
ANR	344542	ReturnType	ZEND_API void		344455	1					
ANR	344543	Identifier	zend_stack_apply_with_argument		344455	2					
ANR	344544	ParameterList	"zend_stack * stack , int type , int ( * apply_function ) ( void * element , void * arg ) , void * arg"		344455	3					
ANR	344545	Parameter	zend_stack * stack	128:45:3201:3217	344455	0	True				
ANR	344546	ParameterType	zend_stack *		344455	0					
ANR	344547	Identifier	stack		344455	1					
ANR	344548	Parameter	int type	128:64:3220:3227	344455	1	True				
ANR	344549	ParameterType	int		344455	0					
ANR	344550	Identifier	type		344455	1					
ANR	344551	Parameter	"int ( * apply_function ) ( void * element , void * arg )"	128:74:3230:3276	344455	2	True				
ANR	344552	ParameterType	"(( void * element , void * arg ) int) *"		344455	0					
ANR	344553	Identifier	apply_function		344455	1					
ANR	344554	Parameter	void * arg	128:123:3279:3287	344455	3	True				
ANR	344555	ParameterType	void *		344455	0					
ANR	344556	Identifier	arg		344455	1					
ANR	344557	CFGEntryNode	ENTRY		344455		True				
ANR	344558	CFGExitNode	EXIT		344455		True				
ANR	344559	Symbol	stack		344455						
ANR	344560	Symbol	apply_function		344455						
ANR	344561	Symbol	ZEND_STACK_ELEMENT		344455						
ANR	344562	Symbol	arg		344455						
ANR	344563	Symbol	i		344455						
ANR	344564	Symbol	* stack		344455						
ANR	344565	Symbol	type		344455						
ANR	344566	Symbol	stack -> top		344455						
ANR	344567	Function	zend_stack_clean	150:0:3650:3993							
ANR	344568	FunctionDef	"zend_stack_clean (zend_stack * stack , void ( * func ) ( void * ) , zend_bool free_elements)"		344567	0					
ANR	344569	CompoundStatement		151:0:3747:3993	344567	0					
ANR	344570	IdentifierDeclStatement	int i ;	152:1:3750:3755	344567	0	True				
ANR	344571	IdentifierDecl	i		344567	0					
ANR	344572	IdentifierDeclType	int		344567	0					
ANR	344573	Identifier	i		344567	1					
ANR	344574	IfStatement	if ( func )		344567	1					
ANR	344575	Condition	func	154:5:3763:3766	344567	0	True				
ANR	344576	Identifier	func		344567	0					
ANR	344577	CompoundStatement		4:11:21:21	344567	1					
ANR	344578	ForStatement	for ( i = 0 ; i < stack -> top ; i ++ )		344567	0					
ANR	344579	ForInit	i = 0 ;	155:7:3778:3783	344567	0	True				
ANR	344580	AssignmentExpression	i = 0		344567	0		=			
ANR	344581	Identifier	i		344567	0					
ANR	344582	PrimaryExpression	0		344567	1					
ANR	344583	Condition	i < stack -> top	155:14:3785:3798	344567	1	True				
ANR	344584	RelationalExpression	i < stack -> top		344567	0		<			
ANR	344585	Identifier	i		344567	0					
ANR	344586	PtrMemberAccess	stack -> top		344567	1					
ANR	344587	Identifier	stack		344567	0					
ANR	344588	Identifier	top		344567	1					
ANR	344589	PostIncDecOperationExpression	i ++	155:30:3801:3803	344567	2	True				
ANR	344590	Identifier	i		344567	0					
ANR	344591	IncDec	++		344567	1					
ANR	344592	CompoundStatement		5:35:58:58	344567	3					
ANR	344593	ExpressionStatement	"func ( ZEND_STACK_ELEMENT ( stack , i ) )"	156:3:3811:3845	344567	0	True				
ANR	344594	CallExpression	"func ( ZEND_STACK_ELEMENT ( stack , i ) )"		344567	0					
ANR	344595	Callee	func		344567	0					
ANR	344596	Identifier	func		344567	0					
ANR	344597	ArgumentList	"ZEND_STACK_ELEMENT ( stack , i )"		344567	1					
ANR	344598	Argument	"ZEND_STACK_ELEMENT ( stack , i )"		344567	0					
ANR	344599	CallExpression	"ZEND_STACK_ELEMENT ( stack , i )"		344567	0					
ANR	344600	Callee	ZEND_STACK_ELEMENT		344567	0					
ANR	344601	Identifier	ZEND_STACK_ELEMENT		344567	0					
ANR	344602	ArgumentList	stack		344567	1					
ANR	344603	Argument	stack		344567	0					
ANR	344604	Identifier	stack		344567	0					
ANR	344605	Argument	i		344567	1					
ANR	344606	Identifier	i		344567	0					
ANR	344607	IfStatement	if ( free_elements )		344567	2					
ANR	344608	Condition	free_elements	159:5:3859:3871	344567	0	True				
ANR	344609	Identifier	free_elements		344567	0					
ANR	344610	CompoundStatement		9:20:126:126	344567	1					
ANR	344611	IfStatement	if ( stack -> elements )		344567	0					
ANR	344612	Condition	stack -> elements	160:6:3882:3896	344567	0	True				
ANR	344613	PtrMemberAccess	stack -> elements		344567	0					
ANR	344614	Identifier	stack		344567	0					
ANR	344615	Identifier	elements		344567	1					
ANR	344616	CompoundStatement		10:23:151:151	344567	1					
ANR	344617	ExpressionStatement	efree ( stack -> elements )	161:3:3904:3926	344567	0	True				
ANR	344618	CallExpression	efree ( stack -> elements )		344567	0					
ANR	344619	Callee	efree		344567	0					
ANR	344620	Identifier	efree		344567	0					
ANR	344621	ArgumentList	stack -> elements		344567	1					
ANR	344622	Argument	stack -> elements		344567	0					
ANR	344623	PtrMemberAccess	stack -> elements		344567	0					
ANR	344624	Identifier	stack		344567	0					
ANR	344625	Identifier	elements		344567	1					
ANR	344626	ExpressionStatement	stack -> elements = NULL	162:3:3931:3953	344567	1	True				
ANR	344627	AssignmentExpression	stack -> elements = NULL		344567	0		=			
ANR	344628	PtrMemberAccess	stack -> elements		344567	0					
ANR	344629	Identifier	stack		344567	0					
ANR	344630	Identifier	elements		344567	1					
ANR	344631	Identifier	NULL		344567	1					
ANR	344632	ExpressionStatement	stack -> top = stack -> max = 0	164:2:3961:3988	344567	1	True				
ANR	344633	AssignmentExpression	stack -> top = stack -> max = 0		344567	0		=			
ANR	344634	PtrMemberAccess	stack -> top		344567	0					
ANR	344635	Identifier	stack		344567	0					
ANR	344636	Identifier	top		344567	1					
ANR	344637	AssignmentExpression	stack -> max = 0		344567	1		=			
ANR	344638	PtrMemberAccess	stack -> max		344567	0					
ANR	344639	Identifier	stack		344567	0					
ANR	344640	Identifier	max		344567	1					
ANR	344641	PrimaryExpression	0		344567	1					
ANR	344642	ReturnType	ZEND_API void		344567	1					
ANR	344643	Identifier	zend_stack_clean		344567	2					
ANR	344644	ParameterList	"zend_stack * stack , void ( * func ) ( void * ) , zend_bool free_elements"		344567	3					
ANR	344645	Parameter	zend_stack * stack	150:31:3681:3697	344567	0	True				
ANR	344646	ParameterType	zend_stack *		344567	0					
ANR	344647	Identifier	stack		344567	1					
ANR	344648	Parameter	void ( * func ) ( void * )	150:50:3700:3719	344567	1	True				
ANR	344649	ParameterType	(( void * ) void) *		344567	0					
ANR	344650	Identifier	func		344567	1					
ANR	344651	Parameter	zend_bool free_elements	150:72:3722:3744	344567	2	True				
ANR	344652	ParameterType	zend_bool		344567	0					
ANR	344653	Identifier	free_elements		344567	1					
ANR	344654	CFGEntryNode	ENTRY		344567		True				
ANR	344655	CFGExitNode	EXIT		344567		True				
ANR	344656	Symbol	free_elements		344567						
ANR	344657	Symbol	stack		344567						
ANR	344658	Symbol	ZEND_STACK_ELEMENT		344567						
ANR	344659	Symbol	NULL		344567						
ANR	344660	Symbol	func		344567						
ANR	344661	Symbol	i		344567						
ANR	344662	Symbol	* stack		344567						
ANR	344663	Symbol	stack -> top		344567						
ANR	344664	Symbol	stack -> elements		344567						
ANR	344665	Symbol	stack -> max		344567						
