command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3002097	File	data/converged/CVE-2015-8617_php-src/main_mergesort.c								
ANR	3002098	DeclStmt									
ANR	3002099	Decl							char	char [ ]	sccsid
ANR	3002100	DeclStmt									
ANR	3002101	Decl							void	"void ( u_char * list1 , u_char * list2 , size_t n , size_t size , int ( * cmp ) ( const void * , const void * ) )"	setup
ANR	3002102	DeclStmt									
ANR	3002103	Decl							void	"void ( u_char * a , size_t n , size_t size , int ( * cmp ) ( const void * , const void * ) )"	insertionsort
ANR	3002104	Function	php_mergesort	105:0:3777:6832							
ANR	3002105	FunctionDef	"php_mergesort (void * base , size_t nmemb , size_t size , int ( * cmp ) ( const void * , const void * ))"		3002104	0					
ANR	3002106	CompoundStatement		106:0:3881:6832	3002104	0					
ANR	3002107	Statement	register	107:1:3884:3891	3002104	0	True				
ANR	3002108	IdentifierDeclStatement	size_t i ;	107:10:3893:3901	3002104	1	True				
ANR	3002109	IdentifierDecl	i		3002104	0					
ANR	3002110	IdentifierDeclType	size_t		3002104	0					
ANR	3002111	Identifier	i		3002104	1					
ANR	3002112	Statement	register	108:1:3904:3911	3002104	2	True				
ANR	3002113	IdentifierDeclStatement	int sense ;	108:10:3913:3922	3002104	3	True				
ANR	3002114	IdentifierDecl	sense		3002104	0					
ANR	3002115	IdentifierDeclType	int		3002104	0					
ANR	3002116	Identifier	sense		3002104	1					
ANR	3002117	IdentifierDeclStatement	"int big , iflag ;"	109:1:3925:3939	3002104	4	True				
ANR	3002118	IdentifierDecl	big		3002104	0					
ANR	3002119	IdentifierDeclType	int		3002104	0					
ANR	3002120	Identifier	big		3002104	1					
ANR	3002121	IdentifierDecl	iflag		3002104	1					
ANR	3002122	IdentifierDeclType	int		3002104	0					
ANR	3002123	Identifier	iflag		3002104	1					
ANR	3002124	Statement	register	110:1:3942:3949	3002104	5	True				
ANR	3002125	IdentifierDeclStatement	"u_char * f1 , * f2 , * t , * b , * tp2 , * q , * l1 , * l2 ;"	110:10:3951:3994	3002104	6	True				
ANR	3002126	IdentifierDecl	* f1		3002104	0					
ANR	3002127	IdentifierDeclType	u_char *		3002104	0					
ANR	3002128	Identifier	f1		3002104	1					
ANR	3002129	IdentifierDecl	* f2		3002104	1					
ANR	3002130	IdentifierDeclType	u_char *		3002104	0					
ANR	3002131	Identifier	f2		3002104	1					
ANR	3002132	IdentifierDecl	* t		3002104	2					
ANR	3002133	IdentifierDeclType	u_char *		3002104	0					
ANR	3002134	Identifier	t		3002104	1					
ANR	3002135	IdentifierDecl	* b		3002104	3					
ANR	3002136	IdentifierDeclType	u_char *		3002104	0					
ANR	3002137	Identifier	b		3002104	1					
ANR	3002138	IdentifierDecl	* tp2		3002104	4					
ANR	3002139	IdentifierDeclType	u_char *		3002104	0					
ANR	3002140	Identifier	tp2		3002104	1					
ANR	3002141	IdentifierDecl	* q		3002104	5					
ANR	3002142	IdentifierDeclType	u_char *		3002104	0					
ANR	3002143	Identifier	q		3002104	1					
ANR	3002144	IdentifierDecl	* l1		3002104	6					
ANR	3002145	IdentifierDeclType	u_char *		3002104	0					
ANR	3002146	Identifier	l1		3002104	1					
ANR	3002147	IdentifierDecl	* l2		3002104	7					
ANR	3002148	IdentifierDeclType	u_char *		3002104	0					
ANR	3002149	Identifier	l2		3002104	1					
ANR	3002150	IdentifierDeclStatement	"u_char * list2 , * list1 , * p2 , * p , * last , * * p1 ;"	111:1:3997:4040	3002104	7	True				
ANR	3002151	IdentifierDecl	* list2		3002104	0					
ANR	3002152	IdentifierDeclType	u_char *		3002104	0					
ANR	3002153	Identifier	list2		3002104	1					
ANR	3002154	IdentifierDecl	* list1		3002104	1					
ANR	3002155	IdentifierDeclType	u_char *		3002104	0					
ANR	3002156	Identifier	list1		3002104	1					
ANR	3002157	IdentifierDecl	* p2		3002104	2					
ANR	3002158	IdentifierDeclType	u_char *		3002104	0					
ANR	3002159	Identifier	p2		3002104	1					
ANR	3002160	IdentifierDecl	* p		3002104	3					
ANR	3002161	IdentifierDeclType	u_char *		3002104	0					
ANR	3002162	Identifier	p		3002104	1					
ANR	3002163	IdentifierDecl	* last		3002104	4					
ANR	3002164	IdentifierDeclType	u_char *		3002104	0					
ANR	3002165	Identifier	last		3002104	1					
ANR	3002166	IdentifierDecl	* * p1		3002104	5					
ANR	3002167	IdentifierDeclType	u_char * *		3002104	0					
ANR	3002168	Identifier	p1		3002104	1					
ANR	3002169	IfStatement	if ( size < PSIZE / 2 )		3002104	8					
ANR	3002170	Condition	size < PSIZE / 2	113:5:4048:4063	3002104	0	True				
ANR	3002171	RelationalExpression	size < PSIZE / 2		3002104	0		<			
ANR	3002172	Identifier	size		3002104	0					
ANR	3002173	MultiplicativeExpression	PSIZE / 2		3002104	1		/			
ANR	3002174	Identifier	PSIZE		3002104	0					
ANR	3002175	PrimaryExpression	2		3002104	1					
ANR	3002176	CompoundStatement		8:23:184:184	3002104	1					
ANR	3002177	ExpressionStatement	errno = EINVAL	114:2:4110:4124	3002104	0	True				
ANR	3002178	AssignmentExpression	errno = EINVAL		3002104	0		=			
ANR	3002179	Identifier	errno		3002104	0					
ANR	3002180	Identifier	EINVAL		3002104	1					
ANR	3002181	ReturnStatement	return ( - 1 ) ;	115:2:4128:4139	3002104	1	True				
ANR	3002182	UnaryOperationExpression	- 1		3002104	0					
ANR	3002183	UnaryOperator	-		3002104	0					
ANR	3002184	PrimaryExpression	1		3002104	1					
ANR	3002185	IfStatement	if ( nmemb == 0 )		3002104	9					
ANR	3002186	Condition	nmemb == 0	118:5:4150:4159	3002104	0	True				
ANR	3002187	EqualityExpression	nmemb == 0		3002104	0		==			
ANR	3002188	Identifier	nmemb		3002104	0					
ANR	3002189	PrimaryExpression	0		3002104	1					
ANR	3002190	ReturnStatement	return ( 0 ) ;	119:2:4164:4174	3002104	1	True				
ANR	3002191	PrimaryExpression	0		3002104	0					
ANR	3002192	ExpressionStatement	iflag = 0	125:1:4232:4241	3002104	10	True				
ANR	3002193	AssignmentExpression	iflag = 0		3002104	0		=			
ANR	3002194	Identifier	iflag		3002104	0					
ANR	3002195	PrimaryExpression	0		3002104	1					
ANR	3002196	IfStatement	if ( ! ( size % ISIZE ) && ! ( ( ( char * ) base - ( char * ) 0 ) % ISIZE ) )		3002104	11					
ANR	3002197	Condition	! ( size % ISIZE ) && ! ( ( ( char * ) base - ( char * ) 0 ) % ISIZE )	126:5:4248:4303	3002104	0	True				
ANR	3002198	AndExpression	! ( size % ISIZE ) && ! ( ( ( char * ) base - ( char * ) 0 ) % ISIZE )		3002104	0		&&			
ANR	3002199	UnaryOperationExpression	! ( size % ISIZE )		3002104	0					
ANR	3002200	UnaryOperator	!		3002104	0					
ANR	3002201	MultiplicativeExpression	size % ISIZE		3002104	1		%			
ANR	3002202	Identifier	size		3002104	0					
ANR	3002203	Identifier	ISIZE		3002104	1					
ANR	3002204	UnaryOperationExpression	! ( ( ( char * ) base - ( char * ) 0 ) % ISIZE )		3002104	1					
ANR	3002205	UnaryOperator	!		3002104	0					
ANR	3002206	MultiplicativeExpression	( ( char * ) base - ( char * ) 0 ) % ISIZE		3002104	1		%			
ANR	3002207	AdditiveExpression	( char * ) base - ( char * ) 0		3002104	0		-			
ANR	3002208	CastExpression	( char * ) base		3002104	0					
ANR	3002209	CastTarget	char *		3002104	0					
ANR	3002210	Identifier	base		3002104	1					
ANR	3002211	CastExpression	( char * ) 0		3002104	1					
ANR	3002212	CastTarget	char *		3002104	0					
ANR	3002213	PrimaryExpression	0		3002104	1					
ANR	3002214	Identifier	ISIZE		3002104	1					
ANR	3002215	ExpressionStatement	iflag = 1	127:2:4308:4317	3002104	1	True				
ANR	3002216	AssignmentExpression	iflag = 1		3002104	0		=			
ANR	3002217	Identifier	iflag		3002104	0					
ANR	3002218	PrimaryExpression	1		3002104	1					
ANR	3002219	IfStatement	if ( ( list2 = malloc ( nmemb * size + PSIZE ) ) == NULL )		3002104	12					
ANR	3002220	Condition	( list2 = malloc ( nmemb * size + PSIZE ) ) == NULL	129:5:4325:4370	3002104	0	True				
ANR	3002221	EqualityExpression	( list2 = malloc ( nmemb * size + PSIZE ) ) == NULL		3002104	0		==			
ANR	3002222	AssignmentExpression	list2 = malloc ( nmemb * size + PSIZE )		3002104	0		=			
ANR	3002223	Identifier	list2		3002104	0					
ANR	3002224	CallExpression	malloc ( nmemb * size + PSIZE )		3002104	1					
ANR	3002225	Callee	malloc		3002104	0					
ANR	3002226	Identifier	malloc		3002104	0					
ANR	3002227	ArgumentList	nmemb * size + PSIZE		3002104	1					
ANR	3002228	Argument	nmemb * size + PSIZE		3002104	0					
ANR	3002229	AdditiveExpression	nmemb * size + PSIZE		3002104	0		+			
ANR	3002230	MultiplicativeExpression	nmemb * size		3002104	0		*			
ANR	3002231	Identifier	nmemb		3002104	0					
ANR	3002232	Identifier	size		3002104	1					
ANR	3002233	Identifier	PSIZE		3002104	1					
ANR	3002234	Identifier	NULL		3002104	1					
ANR	3002235	ReturnStatement	return ( - 1 ) ;	130:2:4375:4386	3002104	1	True				
ANR	3002236	UnaryOperationExpression	- 1		3002104	0					
ANR	3002237	UnaryOperator	-		3002104	0					
ANR	3002238	PrimaryExpression	1		3002104	1					
ANR	3002239	ExpressionStatement	list1 = base	132:1:4390:4402	3002104	13	True				
ANR	3002240	AssignmentExpression	list1 = base		3002104	0		=			
ANR	3002241	Identifier	list1		3002104	0					
ANR	3002242	Identifier	base		3002104	1					
ANR	3002243	ExpressionStatement	"setup ( list1 , list2 , nmemb , size , cmp )"	133:1:4405:4442	3002104	14	True				
ANR	3002244	CallExpression	"setup ( list1 , list2 , nmemb , size , cmp )"		3002104	0					
ANR	3002245	Callee	setup		3002104	0					
ANR	3002246	Identifier	setup		3002104	0					
ANR	3002247	ArgumentList	list1		3002104	1					
ANR	3002248	Argument	list1		3002104	0					
ANR	3002249	Identifier	list1		3002104	0					
ANR	3002250	Argument	list2		3002104	1					
ANR	3002251	Identifier	list2		3002104	0					
ANR	3002252	Argument	nmemb		3002104	2					
ANR	3002253	Identifier	nmemb		3002104	0					
ANR	3002254	Argument	size		3002104	3					
ANR	3002255	Identifier	size		3002104	0					
ANR	3002256	Argument	cmp		3002104	4					
ANR	3002257	Identifier	cmp		3002104	0					
ANR	3002258	ExpressionStatement	last = list2 + nmemb * size	134:1:4445:4472	3002104	15	True				
ANR	3002259	AssignmentExpression	last = list2 + nmemb * size		3002104	0		=			
ANR	3002260	Identifier	last		3002104	0					
ANR	3002261	AdditiveExpression	list2 + nmemb * size		3002104	1		+			
ANR	3002262	Identifier	list2		3002104	0					
ANR	3002263	MultiplicativeExpression	nmemb * size		3002104	1		*			
ANR	3002264	Identifier	nmemb		3002104	0					
ANR	3002265	Identifier	size		3002104	1					
ANR	3002266	ExpressionStatement	i = big = 0	135:1:4475:4486	3002104	16	True				
ANR	3002267	AssignmentExpression	i = big = 0		3002104	0		=			
ANR	3002268	Identifier	i		3002104	0					
ANR	3002269	AssignmentExpression	big = 0		3002104	1		=			
ANR	3002270	Identifier	big		3002104	0					
ANR	3002271	PrimaryExpression	0		3002104	1					
ANR	3002272	WhileStatement	while ( * EVAL ( list2 ) != last )		3002104	17					
ANR	3002273	Condition	* EVAL ( list2 ) != last	136:8:4496:4515	3002104	0	True				
ANR	3002274	EqualityExpression	* EVAL ( list2 ) != last		3002104	0		!=			
ANR	3002275	UnaryOperationExpression	* EVAL ( list2 )		3002104	0					
ANR	3002276	UnaryOperator	*		3002104	0					
ANR	3002277	CallExpression	EVAL ( list2 )		3002104	1					
ANR	3002278	Callee	EVAL		3002104	0					
ANR	3002279	Identifier	EVAL		3002104	0					
ANR	3002280	ArgumentList	list2		3002104	1					
ANR	3002281	Argument	list2		3002104	0					
ANR	3002282	Identifier	list2		3002104	0					
ANR	3002283	Identifier	last		3002104	1					
ANR	3002284	CompoundStatement		31:30:636:636	3002104	1					
ANR	3002285	ExpressionStatement	l2 = list1	137:5:4525:4535	3002104	0	True				
ANR	3002286	AssignmentExpression	l2 = list1		3002104	0		=			
ANR	3002287	Identifier	l2		3002104	0					
ANR	3002288	Identifier	list1		3002104	1					
ANR	3002289	ExpressionStatement	p1 = EVAL ( list1 )	138:5:4542:4558	3002104	1	True				
ANR	3002290	AssignmentExpression	p1 = EVAL ( list1 )		3002104	0		=			
ANR	3002291	Identifier	p1		3002104	0					
ANR	3002292	CallExpression	EVAL ( list1 )		3002104	1					
ANR	3002293	Callee	EVAL		3002104	0					
ANR	3002294	Identifier	EVAL		3002104	0					
ANR	3002295	ArgumentList	list1		3002104	1					
ANR	3002296	Argument	list1		3002104	0					
ANR	3002297	Identifier	list1		3002104	0					
ANR	3002298	ForStatement	for ( tp2 = p2 = list2 ; p2 != last ; p1 = EVAL ( l2 ) )		3002104	2					
ANR	3002299	ForInit	tp2 = p2 = list2 ;	139:10:4570:4586	3002104	0	True				
ANR	3002300	AssignmentExpression	tp2 = p2 = list2		3002104	0		=			
ANR	3002301	Identifier	tp2		3002104	0					
ANR	3002302	AssignmentExpression	p2 = list2		3002104	1		=			
ANR	3002303	Identifier	p2		3002104	0					
ANR	3002304	Identifier	list2		3002104	1					
ANR	3002305	Condition	p2 != last	139:28:4588:4597	3002104	1	True				
ANR	3002306	EqualityExpression	p2 != last		3002104	0		!=			
ANR	3002307	Identifier	p2		3002104	0					
ANR	3002308	Identifier	last		3002104	1					
ANR	3002309	AssignmentExpression	p1 = EVAL ( l2 )	139:40:4600:4612	3002104	2	True	=			
ANR	3002310	Identifier	p1		3002104	0					
ANR	3002311	CallExpression	EVAL ( l2 )		3002104	1					
ANR	3002312	Callee	EVAL		3002104	0					
ANR	3002313	Identifier	EVAL		3002104	0					
ANR	3002314	ArgumentList	l2		3002104	1					
ANR	3002315	Argument	l2		3002104	0					
ANR	3002316	Identifier	l2		3002104	0					
ANR	3002317	CompoundStatement		34:55:733:733	3002104	3					
ANR	3002318	ExpressionStatement	p2 = * EVAL ( p2 )	140:6:4623:4637	3002104	0	True				
ANR	3002319	AssignmentExpression	p2 = * EVAL ( p2 )		3002104	0		=			
ANR	3002320	Identifier	p2		3002104	0					
ANR	3002321	UnaryOperationExpression	* EVAL ( p2 )		3002104	1					
ANR	3002322	UnaryOperator	*		3002104	0					
ANR	3002323	CallExpression	EVAL ( p2 )		3002104	1					
ANR	3002324	Callee	EVAL		3002104	0					
ANR	3002325	Identifier	EVAL		3002104	0					
ANR	3002326	ArgumentList	p2		3002104	1					
ANR	3002327	Argument	p2		3002104	0					
ANR	3002328	Identifier	p2		3002104	0					
ANR	3002329	ExpressionStatement	f1 = l2	141:6:4645:4652	3002104	1	True				
ANR	3002330	AssignmentExpression	f1 = l2		3002104	0		=			
ANR	3002331	Identifier	f1		3002104	0					
ANR	3002332	Identifier	l2		3002104	1					
ANR	3002333	ExpressionStatement	f2 = l1 = list1 + ( p2 - list2 )	142:6:4660:4690	3002104	2	True				
ANR	3002334	AssignmentExpression	f2 = l1 = list1 + ( p2 - list2 )		3002104	0		=			
ANR	3002335	Identifier	f2		3002104	0					
ANR	3002336	AssignmentExpression	l1 = list1 + ( p2 - list2 )		3002104	1		=			
ANR	3002337	Identifier	l1		3002104	0					
ANR	3002338	AdditiveExpression	list1 + ( p2 - list2 )		3002104	1		+			
ANR	3002339	Identifier	list1		3002104	0					
ANR	3002340	AdditiveExpression	p2 - list2		3002104	1		-			
ANR	3002341	Identifier	p2		3002104	0					
ANR	3002342	Identifier	list2		3002104	1					
ANR	3002343	IfStatement	if ( p2 != last )		3002104	3					
ANR	3002344	Condition	p2 != last	143:10:4702:4711	3002104	0	True				
ANR	3002345	EqualityExpression	p2 != last		3002104	0		!=			
ANR	3002346	Identifier	p2		3002104	0					
ANR	3002347	Identifier	last		3002104	1					
ANR	3002348	ExpressionStatement	p2 = * EVAL ( p2 )	144:7:4721:4735	3002104	1	True				
ANR	3002349	AssignmentExpression	p2 = * EVAL ( p2 )		3002104	0		=			
ANR	3002350	Identifier	p2		3002104	0					
ANR	3002351	UnaryOperationExpression	* EVAL ( p2 )		3002104	1					
ANR	3002352	UnaryOperator	*		3002104	0					
ANR	3002353	CallExpression	EVAL ( p2 )		3002104	1					
ANR	3002354	Callee	EVAL		3002104	0					
ANR	3002355	Identifier	EVAL		3002104	0					
ANR	3002356	ArgumentList	p2		3002104	1					
ANR	3002357	Argument	p2		3002104	0					
ANR	3002358	Identifier	p2		3002104	0					
ANR	3002359	ExpressionStatement	l2 = list1 + ( p2 - list2 )	145:6:4743:4768	3002104	4	True				
ANR	3002360	AssignmentExpression	l2 = list1 + ( p2 - list2 )		3002104	0		=			
ANR	3002361	Identifier	l2		3002104	0					
ANR	3002362	AdditiveExpression	list1 + ( p2 - list2 )		3002104	1		+			
ANR	3002363	Identifier	list1		3002104	0					
ANR	3002364	AdditiveExpression	p2 - list2		3002104	1		-			
ANR	3002365	Identifier	p2		3002104	0					
ANR	3002366	Identifier	list2		3002104	1					
ANR	3002367	WhileStatement	while ( f1 < l1 && f2 < l2 )		3002104	5					
ANR	3002368	Condition	f1 < l1 && f2 < l2	146:13:4783:4800	3002104	0	True				
ANR	3002369	AndExpression	f1 < l1 && f2 < l2		3002104	0		&&			
ANR	3002370	RelationalExpression	f1 < l1		3002104	0		<			
ANR	3002371	Identifier	f1		3002104	0					
ANR	3002372	Identifier	l1		3002104	1					
ANR	3002373	RelationalExpression	f2 < l2		3002104	1		<			
ANR	3002374	Identifier	f2		3002104	0					
ANR	3002375	Identifier	l2		3002104	1					
ANR	3002376	CompoundStatement		41:33:921:921	3002104	1					
ANR	3002377	IfStatement	"if ( ( * cmp ) ( f1 , f2 ) <= 0 )"		3002104	0					
ANR	3002378	Condition	"( * cmp ) ( f1 , f2 ) <= 0"	147:11:4816:4834	3002104	0	True				
ANR	3002379	RelationalExpression	"( * cmp ) ( f1 , f2 ) <= 0"		3002104	0		<=			
ANR	3002380	CallExpression	"( * cmp ) ( f1 , f2 )"		3002104	0					
ANR	3002381	Callee	* cmp		3002104	0					
ANR	3002382	UnaryOperationExpression	* cmp		3002104	0					
ANR	3002383	UnaryOperator	*		3002104	0					
ANR	3002384	Identifier	cmp		3002104	1					
ANR	3002385	ArgumentList	f1		3002104	1					
ANR	3002386	Argument	f1		3002104	0					
ANR	3002387	Identifier	f1		3002104	0					
ANR	3002388	Argument	f2		3002104	1					
ANR	3002389	Identifier	f2		3002104	0					
ANR	3002390	PrimaryExpression	0		3002104	1					
ANR	3002391	CompoundStatement		42:32:955:955	3002104	1					
ANR	3002392	ExpressionStatement	q = f2	148:8:4847:4853	3002104	0	True				
ANR	3002393	AssignmentExpression	q = f2		3002104	0		=			
ANR	3002394	Identifier	q		3002104	0					
ANR	3002395	Identifier	f2		3002104	1					
ANR	3002396	ExpressionStatement	"b = f1 , t = l1"	149:8:4863:4877	3002104	1	True				
ANR	3002397	Expression	"b = f1 , t = l1"		3002104	0					
ANR	3002398	AssignmentExpression	b = f1		3002104	0		=			
ANR	3002399	Identifier	b		3002104	0					
ANR	3002400	Identifier	f1		3002104	1					
ANR	3002401	AssignmentExpression	t = l1		3002104	1		=			
ANR	3002402	Identifier	t		3002104	0					
ANR	3002403	Identifier	l1		3002104	1					
ANR	3002404	ExpressionStatement	sense = - 1	150:8:4887:4897	3002104	2	True				
ANR	3002405	AssignmentExpression	sense = - 1		3002104	0		=			
ANR	3002406	Identifier	sense		3002104	0					
ANR	3002407	UnaryOperationExpression	- 1		3002104	1					
ANR	3002408	UnaryOperator	-		3002104	0					
ANR	3002409	PrimaryExpression	1		3002104	1					
ANR	3002410	ElseStatement	else		3002104	0					
ANR	3002411	CompoundStatement		46:14:1031:1031	3002104	0					
ANR	3002412	ExpressionStatement	q = f1	152:8:4923:4929	3002104	0	True				
ANR	3002413	AssignmentExpression	q = f1		3002104	0		=			
ANR	3002414	Identifier	q		3002104	0					
ANR	3002415	Identifier	f1		3002104	1					
ANR	3002416	ExpressionStatement	"b = f2 , t = l2"	153:8:4939:4953	3002104	1	True				
ANR	3002417	Expression	"b = f2 , t = l2"		3002104	0					
ANR	3002418	AssignmentExpression	b = f2		3002104	0		=			
ANR	3002419	Identifier	b		3002104	0					
ANR	3002420	Identifier	f2		3002104	1					
ANR	3002421	AssignmentExpression	t = l2		3002104	1		=			
ANR	3002422	Identifier	t		3002104	0					
ANR	3002423	Identifier	l2		3002104	1					
ANR	3002424	ExpressionStatement	sense = 0	154:8:4963:4972	3002104	2	True				
ANR	3002425	AssignmentExpression	sense = 0		3002104	0		=			
ANR	3002426	Identifier	sense		3002104	0					
ANR	3002427	PrimaryExpression	0		3002104	1					
ANR	3002428	IfStatement	if ( ! big )		3002104	1					
ANR	3002429	Condition	! big	156:11:4994:4997	3002104	0	True				
ANR	3002430	UnaryOperationExpression	! big		3002104	0					
ANR	3002431	UnaryOperator	!		3002104	0					
ANR	3002432	Identifier	big		3002104	1					
ANR	3002433	CompoundStatement		51:17:1118:1118	3002104	1					
ANR	3002434	WhileStatement	"while ( ( b += size ) < t && cmp ( q , b ) > sense )"		3002104	0					
ANR	3002435	Condition	"( b += size ) < t && cmp ( q , b ) > sense"	157:11:5030:5064	3002104	0	True				
ANR	3002436	AndExpression	"( b += size ) < t && cmp ( q , b ) > sense"		3002104	0		&&			
ANR	3002437	RelationalExpression	( b += size ) < t		3002104	0		<			
ANR	3002438	AssignmentExpression	b += size		3002104	0		+=			
ANR	3002439	Identifier	b		3002104	0					
ANR	3002440	Identifier	size		3002104	1					
ANR	3002441	Identifier	t		3002104	1					
ANR	3002442	RelationalExpression	"cmp ( q , b ) > sense"		3002104	1		>			
ANR	3002443	CallExpression	"cmp ( q , b )"		3002104	0					
ANR	3002444	Callee	cmp		3002104	0					
ANR	3002445	Identifier	cmp		3002104	0					
ANR	3002446	ArgumentList	q		3002104	1					
ANR	3002447	Argument	q		3002104	0					
ANR	3002448	Identifier	q		3002104	0					
ANR	3002449	Argument	b		3002104	1					
ANR	3002450	Identifier	b		3002104	0					
ANR	3002451	Identifier	sense		3002104	1					
ANR	3002452	IfStatement	if ( ++ i == 6 )		3002104	1					
ANR	3002453	Condition	++ i == 6	158:13:5080:5087	3002104	0	True				
ANR	3002454	EqualityExpression	++ i == 6		3002104	0		==			
ANR	3002455	UnaryExpression	++ i		3002104	0					
ANR	3002456	IncDec	++		3002104	0					
ANR	3002457	Identifier	i		3002104	1					
ANR	3002458	PrimaryExpression	6		3002104	1					
ANR	3002459	CompoundStatement		53:23:1208:1208	3002104	1					
ANR	3002460	ExpressionStatement	big = 1	159:10:5102:5109	3002104	0	True				
ANR	3002461	AssignmentExpression	big = 1		3002104	0		=			
ANR	3002462	Identifier	big		3002104	0					
ANR	3002463	PrimaryExpression	1		3002104	1					
ANR	3002464	GotoStatement	goto EXPONENTIAL ;	160:10:5121:5137	3002104	1	True				
ANR	3002465	Identifier	EXPONENTIAL		3002104	0					
ANR	3002466	ElseStatement	else		3002104	0					
ANR	3002467	CompoundStatement		57:14:1282:1282	3002104	0					
ANR	3002468	Label	EXPONENTIAL :	163:0:5166:5177	3002104	0	True				
ANR	3002469	Identifier	EXPONENTIAL		3002104	0					
ANR	3002470	ForStatement	for ( i = size ; ; i <<= 1 )		3002104	1					
ANR	3002471	ForInit	i = size ;	163:24:5190:5198	3002104	0	True				
ANR	3002472	AssignmentExpression	i = size		3002104	0		=			
ANR	3002473	Identifier	i		3002104	0					
ANR	3002474	Identifier	size		3002104	1					
ANR	3002475	AssignmentExpression	i <<= 1	163:36:5202:5208	3002104	1	True	<<=			
ANR	3002476	Identifier	i		3002104	0					
ANR	3002477	PrimaryExpression	1		3002104	1					
ANR	3002478	IfStatement	if ( ( p = ( b + i ) ) >= t )		3002104	2					
ANR	3002479	Condition	( p = ( b + i ) ) >= t	164:13:5224:5241	3002104	0	True				
ANR	3002480	RelationalExpression	( p = ( b + i ) ) >= t		3002104	0		>=			
ANR	3002481	AssignmentExpression	p = ( b + i )		3002104	0		=			
ANR	3002482	Identifier	p		3002104	0					
ANR	3002483	AdditiveExpression	b + i		3002104	1		+			
ANR	3002484	Identifier	b		3002104	0					
ANR	3002485	Identifier	i		3002104	1					
ANR	3002486	Identifier	t		3002104	1					
ANR	3002487	CompoundStatement		59:33:1362:1362	3002104	1					
ANR	3002488	IfStatement	"if ( ( p = t - size ) > b && ( * cmp ) ( q , p ) <= sense )"		3002104	0					
ANR	3002489	Condition	"( p = t - size ) > b && ( * cmp ) ( q , p ) <= sense"	165:14:5260:5312	3002104	0	True				
ANR	3002490	AndExpression	"( p = t - size ) > b && ( * cmp ) ( q , p ) <= sense"		3002104	0		&&			
ANR	3002491	RelationalExpression	( p = t - size ) > b		3002104	0		>			
ANR	3002492	AssignmentExpression	p = t - size		3002104	0		=			
ANR	3002493	Identifier	p		3002104	0					
ANR	3002494	AdditiveExpression	t - size		3002104	1		-			
ANR	3002495	Identifier	t		3002104	0					
ANR	3002496	Identifier	size		3002104	1					
ANR	3002497	Identifier	b		3002104	1					
ANR	3002498	RelationalExpression	"( * cmp ) ( q , p ) <= sense"		3002104	1		<=			
ANR	3002499	CallExpression	"( * cmp ) ( q , p )"		3002104	0					
ANR	3002500	Callee	* cmp		3002104	0					
ANR	3002501	UnaryOperationExpression	* cmp		3002104	0					
ANR	3002502	UnaryOperator	*		3002104	0					
ANR	3002503	Identifier	cmp		3002104	1					
ANR	3002504	ArgumentList	q		3002104	1					
ANR	3002505	Argument	q		3002104	0					
ANR	3002506	Identifier	q		3002104	0					
ANR	3002507	Argument	p		3002104	1					
ANR	3002508	Identifier	p		3002104	0					
ANR	3002509	Identifier	sense		3002104	1					
ANR	3002510	ExpressionStatement	t = p	167:11:5326:5331	3002104	1	True				
ANR	3002511	AssignmentExpression	t = p		3002104	0		=			
ANR	3002512	Identifier	t		3002104	0					
ANR	3002513	Identifier	p		3002104	1					
ANR	3002514	ElseStatement	else		3002104	0					
ANR	3002515	ExpressionStatement	b = p	169:11:5359:5364	3002104	0	True				
ANR	3002516	AssignmentExpression	b = p		3002104	0		=			
ANR	3002517	Identifier	b		3002104	0					
ANR	3002518	Identifier	p		3002104	1					
ANR	3002519	BreakStatement	break ;	170:10:5376:5381	3002104	1	True				
ANR	3002520	ElseStatement	else		3002104	0					
ANR	3002521	IfStatement	"if ( ( * cmp ) ( q , p ) <= sense )"		3002104	0					
ANR	3002522	Condition	"( * cmp ) ( q , p ) <= sense"	171:20:5403:5423	3002104	0	True				
ANR	3002523	RelationalExpression	"( * cmp ) ( q , p ) <= sense"		3002104	0		<=			
ANR	3002524	CallExpression	"( * cmp ) ( q , p )"		3002104	0					
ANR	3002525	Callee	* cmp		3002104	0					
ANR	3002526	UnaryOperationExpression	* cmp		3002104	0					
ANR	3002527	UnaryOperator	*		3002104	0					
ANR	3002528	Identifier	cmp		3002104	1					
ANR	3002529	ArgumentList	q		3002104	1					
ANR	3002530	Argument	q		3002104	0					
ANR	3002531	Identifier	q		3002104	0					
ANR	3002532	Argument	p		3002104	1					
ANR	3002533	Identifier	p		3002104	0					
ANR	3002534	Identifier	sense		3002104	1					
ANR	3002535	CompoundStatement		66:43:1544:1544	3002104	1					
ANR	3002536	ExpressionStatement	t = p	172:10:5438:5443	3002104	0	True				
ANR	3002537	AssignmentExpression	t = p		3002104	0		=			
ANR	3002538	Identifier	t		3002104	0					
ANR	3002539	Identifier	p		3002104	1					
ANR	3002540	IfStatement	if ( i == size )		3002104	1					
ANR	3002541	Condition	i == size	173:14:5459:5467	3002104	0	True				
ANR	3002542	EqualityExpression	i == size		3002104	0		==			
ANR	3002543	Identifier	i		3002104	0					
ANR	3002544	Identifier	size		3002104	1					
ANR	3002545	ExpressionStatement	big = 0	174:11:5481:5488	3002104	1	True				
ANR	3002546	AssignmentExpression	big = 0		3002104	0		=			
ANR	3002547	Identifier	big		3002104	0					
ANR	3002548	PrimaryExpression	0		3002104	1					
ANR	3002549	GotoStatement	goto FASTCASE ;	175:10:5500:5513	3002104	2	True				
ANR	3002550	Identifier	FASTCASE		3002104	0					
ANR	3002551	ElseStatement	else		3002104	0					
ANR	3002552	ExpressionStatement	b = p	177:10:5541:5546	3002104	0	True				
ANR	3002553	AssignmentExpression	b = p		3002104	0		=			
ANR	3002554	Identifier	b		3002104	0					
ANR	3002555	Identifier	p		3002104	1					
ANR	3002556	WhileStatement	while ( t > b + size )		3002104	2					
ANR	3002557	Condition	t > b + size	178:11:5559:5568	3002104	0	True				
ANR	3002558	RelationalExpression	t > b + size		3002104	0		>			
ANR	3002559	Identifier	t		3002104	0					
ANR	3002560	AdditiveExpression	b + size		3002104	1		+			
ANR	3002561	Identifier	b		3002104	0					
ANR	3002562	Identifier	size		3002104	1					
ANR	3002563	CompoundStatement		73:23:1689:1689	3002104	1					
ANR	3002564	ExpressionStatement	i = ( ( ( t - b ) / size ) >> 1 ) * size	179:9:5582:5616	3002104	0	True				
ANR	3002565	AssignmentExpression	i = ( ( ( t - b ) / size ) >> 1 ) * size		3002104	0		=			
ANR	3002566	Identifier	i		3002104	0					
ANR	3002567	MultiplicativeExpression	( ( ( t - b ) / size ) >> 1 ) * size		3002104	1		*			
ANR	3002568	ShiftExpression	( ( t - b ) / size ) >> 1		3002104	0		>>			
ANR	3002569	MultiplicativeExpression	( t - b ) / size		3002104	0		/			
ANR	3002570	AdditiveExpression	t - b		3002104	0		-			
ANR	3002571	Identifier	t		3002104	0					
ANR	3002572	Identifier	b		3002104	1					
ANR	3002573	Identifier	size		3002104	1					
ANR	3002574	PrimaryExpression	1		3002104	1					
ANR	3002575	Identifier	size		3002104	1					
ANR	3002576	IfStatement	"if ( ( * cmp ) ( q , p = b + i ) <= sense )"		3002104	1					
ANR	3002577	Condition	"( * cmp ) ( q , p = b + i ) <= sense"	180:13:5631:5659	3002104	0	True				
ANR	3002578	RelationalExpression	"( * cmp ) ( q , p = b + i ) <= sense"		3002104	0		<=			
ANR	3002579	CallExpression	"( * cmp ) ( q , p = b + i )"		3002104	0					
ANR	3002580	Callee	* cmp		3002104	0					
ANR	3002581	UnaryOperationExpression	* cmp		3002104	0					
ANR	3002582	UnaryOperator	*		3002104	0					
ANR	3002583	Identifier	cmp		3002104	1					
ANR	3002584	ArgumentList	q		3002104	1					
ANR	3002585	Argument	q		3002104	0					
ANR	3002586	Identifier	q		3002104	0					
ANR	3002587	Argument	p = b + i		3002104	1					
ANR	3002588	AssignmentExpression	p = b + i		3002104	0		=			
ANR	3002589	Identifier	p		3002104	0					
ANR	3002590	AdditiveExpression	b + i		3002104	1		+			
ANR	3002591	Identifier	b		3002104	0					
ANR	3002592	Identifier	i		3002104	1					
ANR	3002593	Identifier	sense		3002104	1					
ANR	3002594	ExpressionStatement	t = p	181:10:5672:5677	3002104	1	True				
ANR	3002595	AssignmentExpression	t = p		3002104	0		=			
ANR	3002596	Identifier	t		3002104	0					
ANR	3002597	Identifier	p		3002104	1					
ANR	3002598	ElseStatement	else		3002104	0					
ANR	3002599	ExpressionStatement	b = p	183:10:5703:5708	3002104	0	True				
ANR	3002600	AssignmentExpression	b = p		3002104	0		=			
ANR	3002601	Identifier	b		3002104	0					
ANR	3002602	Identifier	p		3002104	1					
ANR	3002603	GotoStatement	goto COPY ;	185:8:5728:5737	3002104	3	True				
ANR	3002604	Identifier	COPY		3002104	0					
ANR	3002605	Label	FASTCASE :	186:0:5739:5747	3002104	4	True				
ANR	3002606	Identifier	FASTCASE		3002104	0					
ANR	3002607	WhileStatement	while ( i > size )		3002104	5					
ANR	3002608	Condition	i > size	186:23:5762:5769	3002104	0	True				
ANR	3002609	RelationalExpression	i > size		3002104	0		>			
ANR	3002610	Identifier	i		3002104	0					
ANR	3002611	Identifier	size		3002104	1					
ANR	3002612	IfStatement	"if ( ( * cmp ) ( q , p = b + ( i >>= 1 ) ) <= sense )"		3002104	1					
ANR	3002613	Condition	"( * cmp ) ( q , p = b + ( i >>= 1 ) ) <= sense"	187:13:5785:5831	3002104	0	True				
ANR	3002614	RelationalExpression	"( * cmp ) ( q , p = b + ( i >>= 1 ) ) <= sense"		3002104	0		<=			
ANR	3002615	CallExpression	"( * cmp ) ( q , p = b + ( i >>= 1 ) )"		3002104	0					
ANR	3002616	Callee	* cmp		3002104	0					
ANR	3002617	UnaryOperationExpression	* cmp		3002104	0					
ANR	3002618	UnaryOperator	*		3002104	0					
ANR	3002619	Identifier	cmp		3002104	1					
ANR	3002620	ArgumentList	q		3002104	1					
ANR	3002621	Argument	q		3002104	0					
ANR	3002622	Identifier	q		3002104	0					
ANR	3002623	Argument	p = b + ( i >>= 1 )		3002104	1					
ANR	3002624	AssignmentExpression	p = b + ( i >>= 1 )		3002104	0		=			
ANR	3002625	Identifier	p		3002104	0					
ANR	3002626	AdditiveExpression	b + ( i >>= 1 )		3002104	1		+			
ANR	3002627	Identifier	b		3002104	0					
ANR	3002628	AssignmentExpression	i >>= 1		3002104	1		>>=			
ANR	3002629	Identifier	i		3002104	0					
ANR	3002630	PrimaryExpression	1		3002104	1					
ANR	3002631	Identifier	sense		3002104	1					
ANR	3002632	ExpressionStatement	t = p	189:10:5844:5849	3002104	1	True				
ANR	3002633	AssignmentExpression	t = p		3002104	0		=			
ANR	3002634	Identifier	t		3002104	0					
ANR	3002635	Identifier	p		3002104	1					
ANR	3002636	ElseStatement	else		3002104	0					
ANR	3002637	ExpressionStatement	b = p	191:10:5875:5880	3002104	0	True				
ANR	3002638	AssignmentExpression	b = p		3002104	0		=			
ANR	3002639	Identifier	b		3002104	0					
ANR	3002640	Identifier	p		3002104	1					
ANR	3002641	Label	COPY :	192:0:5882:5886	3002104	6	True				
ANR	3002642	Identifier	COPY		3002104	0					
ANR	3002643	ExpressionStatement	b = t	192:13:5895:5900	3002104	7	True				
ANR	3002644	AssignmentExpression	b = t		3002104	0		=			
ANR	3002645	Identifier	b		3002104	0					
ANR	3002646	Identifier	t		3002104	1					
ANR	3002647	ExpressionStatement	i = size	194:7:5918:5926	3002104	2	True				
ANR	3002648	AssignmentExpression	i = size		3002104	0		=			
ANR	3002649	Identifier	i		3002104	0					
ANR	3002650	Identifier	size		3002104	1					
ANR	3002651	IfStatement	if ( q == f1 )		3002104	3					
ANR	3002652	Condition	q == f1	195:11:5939:5945	3002104	0	True				
ANR	3002653	EqualityExpression	q == f1		3002104	0		==			
ANR	3002654	Identifier	q		3002104	0					
ANR	3002655	Identifier	f1		3002104	1					
ANR	3002656	CompoundStatement		90:20:2066:2066	3002104	1					
ANR	3002657	IfStatement	if ( iflag )		3002104	0					
ANR	3002658	Condition	iflag	196:12:5962:5966	3002104	0	True				
ANR	3002659	Identifier	iflag		3002104	0					
ANR	3002660	CompoundStatement		91:19:2087:2087	3002104	1					
ANR	3002661	ExpressionStatement	"ICOPY_LIST ( f2 , tp2 , b )"	197:9:5980:6002	3002104	0	True				
ANR	3002662	CallExpression	"ICOPY_LIST ( f2 , tp2 , b )"		3002104	0					
ANR	3002663	Callee	ICOPY_LIST		3002104	0					
ANR	3002664	Identifier	ICOPY_LIST		3002104	0					
ANR	3002665	ArgumentList	f2		3002104	1					
ANR	3002666	Argument	f2		3002104	0					
ANR	3002667	Identifier	f2		3002104	0					
ANR	3002668	Argument	tp2		3002104	1					
ANR	3002669	Identifier	tp2		3002104	0					
ANR	3002670	Argument	b		3002104	2					
ANR	3002671	Identifier	b		3002104	0					
ANR	3002672	ExpressionStatement	"ICOPY_ELT ( f1 , tp2 , i )"	198:9:6013:6034	3002104	1	True				
ANR	3002673	CallExpression	"ICOPY_ELT ( f1 , tp2 , i )"		3002104	0					
ANR	3002674	Callee	ICOPY_ELT		3002104	0					
ANR	3002675	Identifier	ICOPY_ELT		3002104	0					
ANR	3002676	ArgumentList	f1		3002104	1					
ANR	3002677	Argument	f1		3002104	0					
ANR	3002678	Identifier	f1		3002104	0					
ANR	3002679	Argument	tp2		3002104	1					
ANR	3002680	Identifier	tp2		3002104	0					
ANR	3002681	Argument	i		3002104	2					
ANR	3002682	Identifier	i		3002104	0					
ANR	3002683	ElseStatement	else		3002104	0					
ANR	3002684	CompoundStatement		94:15:2169:2169	3002104	0					
ANR	3002685	ExpressionStatement	"CCOPY_LIST ( f2 , tp2 , b )"	200:9:6062:6084	3002104	0	True				
ANR	3002686	CallExpression	"CCOPY_LIST ( f2 , tp2 , b )"		3002104	0					
ANR	3002687	Callee	CCOPY_LIST		3002104	0					
ANR	3002688	Identifier	CCOPY_LIST		3002104	0					
ANR	3002689	ArgumentList	f2		3002104	1					
ANR	3002690	Argument	f2		3002104	0					
ANR	3002691	Identifier	f2		3002104	0					
ANR	3002692	Argument	tp2		3002104	1					
ANR	3002693	Identifier	tp2		3002104	0					
ANR	3002694	Argument	b		3002104	2					
ANR	3002695	Identifier	b		3002104	0					
ANR	3002696	ExpressionStatement	"CCOPY_ELT ( f1 , tp2 , i )"	201:9:6095:6116	3002104	1	True				
ANR	3002697	CallExpression	"CCOPY_ELT ( f1 , tp2 , i )"		3002104	0					
ANR	3002698	Callee	CCOPY_ELT		3002104	0					
ANR	3002699	Identifier	CCOPY_ELT		3002104	0					
ANR	3002700	ArgumentList	f1		3002104	1					
ANR	3002701	Argument	f1		3002104	0					
ANR	3002702	Identifier	f1		3002104	0					
ANR	3002703	Argument	tp2		3002104	1					
ANR	3002704	Identifier	tp2		3002104	0					
ANR	3002705	Argument	i		3002104	2					
ANR	3002706	Identifier	i		3002104	0					
ANR	3002707	ElseStatement	else		3002104	0					
ANR	3002708	CompoundStatement		98:14:2260:2260	3002104	0					
ANR	3002709	IfStatement	if ( iflag )		3002104	0					
ANR	3002710	Condition	iflag	204:12:6156:6160	3002104	0	True				
ANR	3002711	Identifier	iflag		3002104	0					
ANR	3002712	CompoundStatement		99:19:2281:2281	3002104	1					
ANR	3002713	ExpressionStatement	"ICOPY_LIST ( f1 , tp2 , b )"	205:9:6174:6196	3002104	0	True				
ANR	3002714	CallExpression	"ICOPY_LIST ( f1 , tp2 , b )"		3002104	0					
ANR	3002715	Callee	ICOPY_LIST		3002104	0					
ANR	3002716	Identifier	ICOPY_LIST		3002104	0					
ANR	3002717	ArgumentList	f1		3002104	1					
ANR	3002718	Argument	f1		3002104	0					
ANR	3002719	Identifier	f1		3002104	0					
ANR	3002720	Argument	tp2		3002104	1					
ANR	3002721	Identifier	tp2		3002104	0					
ANR	3002722	Argument	b		3002104	2					
ANR	3002723	Identifier	b		3002104	0					
ANR	3002724	ExpressionStatement	"ICOPY_ELT ( f2 , tp2 , i )"	206:9:6207:6228	3002104	1	True				
ANR	3002725	CallExpression	"ICOPY_ELT ( f2 , tp2 , i )"		3002104	0					
ANR	3002726	Callee	ICOPY_ELT		3002104	0					
ANR	3002727	Identifier	ICOPY_ELT		3002104	0					
ANR	3002728	ArgumentList	f2		3002104	1					
ANR	3002729	Argument	f2		3002104	0					
ANR	3002730	Identifier	f2		3002104	0					
ANR	3002731	Argument	tp2		3002104	1					
ANR	3002732	Identifier	tp2		3002104	0					
ANR	3002733	Argument	i		3002104	2					
ANR	3002734	Identifier	i		3002104	0					
ANR	3002735	ElseStatement	else		3002104	0					
ANR	3002736	CompoundStatement		102:15:2363:2363	3002104	0					
ANR	3002737	ExpressionStatement	"CCOPY_LIST ( f1 , tp2 , b )"	208:9:6256:6278	3002104	0	True				
ANR	3002738	CallExpression	"CCOPY_LIST ( f1 , tp2 , b )"		3002104	0					
ANR	3002739	Callee	CCOPY_LIST		3002104	0					
ANR	3002740	Identifier	CCOPY_LIST		3002104	0					
ANR	3002741	ArgumentList	f1		3002104	1					
ANR	3002742	Argument	f1		3002104	0					
ANR	3002743	Identifier	f1		3002104	0					
ANR	3002744	Argument	tp2		3002104	1					
ANR	3002745	Identifier	tp2		3002104	0					
ANR	3002746	Argument	b		3002104	2					
ANR	3002747	Identifier	b		3002104	0					
ANR	3002748	ExpressionStatement	"CCOPY_ELT ( f2 , tp2 , i )"	209:9:6289:6310	3002104	1	True				
ANR	3002749	CallExpression	"CCOPY_ELT ( f2 , tp2 , i )"		3002104	0					
ANR	3002750	Callee	CCOPY_ELT		3002104	0					
ANR	3002751	Identifier	CCOPY_ELT		3002104	0					
ANR	3002752	ArgumentList	f2		3002104	1					
ANR	3002753	Argument	f2		3002104	0					
ANR	3002754	Identifier	f2		3002104	0					
ANR	3002755	Argument	tp2		3002104	1					
ANR	3002756	Identifier	tp2		3002104	0					
ANR	3002757	Argument	i		3002104	2					
ANR	3002758	Identifier	i		3002104	0					
ANR	3002759	IfStatement	if ( f2 < l2 )		3002104	6					
ANR	3002760	Condition	f2 < l2	213:10:6349:6355	3002104	0	True				
ANR	3002761	RelationalExpression	f2 < l2		3002104	0		<			
ANR	3002762	Identifier	f2		3002104	0					
ANR	3002763	Identifier	l2		3002104	1					
ANR	3002764	CompoundStatement		108:19:2476:2476	3002104	1					
ANR	3002765	IfStatement	if ( iflag )		3002104	0					
ANR	3002766	Condition	iflag	214:11:6371:6375	3002104	0	True				
ANR	3002767	Identifier	iflag		3002104	0					
ANR	3002768	ExpressionStatement	"ICOPY_LIST ( f2 , tp2 , l2 )"	215:8:6386:6409	3002104	1	True				
ANR	3002769	CallExpression	"ICOPY_LIST ( f2 , tp2 , l2 )"		3002104	0					
ANR	3002770	Callee	ICOPY_LIST		3002104	0					
ANR	3002771	Identifier	ICOPY_LIST		3002104	0					
ANR	3002772	ArgumentList	f2		3002104	1					
ANR	3002773	Argument	f2		3002104	0					
ANR	3002774	Identifier	f2		3002104	0					
ANR	3002775	Argument	tp2		3002104	1					
ANR	3002776	Identifier	tp2		3002104	0					
ANR	3002777	Argument	l2		3002104	2					
ANR	3002778	Identifier	l2		3002104	0					
ANR	3002779	ElseStatement	else		3002104	0					
ANR	3002780	ExpressionStatement	"CCOPY_LIST ( f2 , tp2 , l2 )"	217:8:6431:6454	3002104	0	True				
ANR	3002781	CallExpression	"CCOPY_LIST ( f2 , tp2 , l2 )"		3002104	0					
ANR	3002782	Callee	CCOPY_LIST		3002104	0					
ANR	3002783	Identifier	CCOPY_LIST		3002104	0					
ANR	3002784	ArgumentList	f2		3002104	1					
ANR	3002785	Argument	f2		3002104	0					
ANR	3002786	Identifier	f2		3002104	0					
ANR	3002787	Argument	tp2		3002104	1					
ANR	3002788	Identifier	tp2		3002104	0					
ANR	3002789	Argument	l2		3002104	2					
ANR	3002790	Identifier	l2		3002104	0					
ANR	3002791	ElseStatement	else		3002104	0					
ANR	3002792	IfStatement	if ( f1 < l1 )		3002104	0					
ANR	3002793	Condition	f1 < l1	218:17:6473:6479	3002104	0	True				
ANR	3002794	RelationalExpression	f1 < l1		3002104	0		<			
ANR	3002795	Identifier	f1		3002104	0					
ANR	3002796	Identifier	l1		3002104	1					
ANR	3002797	CompoundStatement		113:26:2600:2600	3002104	1					
ANR	3002798	IfStatement	if ( iflag )		3002104	0					
ANR	3002799	Condition	iflag	219:11:6495:6499	3002104	0	True				
ANR	3002800	Identifier	iflag		3002104	0					
ANR	3002801	ExpressionStatement	"ICOPY_LIST ( f1 , tp2 , l1 )"	220:8:6510:6533	3002104	1	True				
ANR	3002802	CallExpression	"ICOPY_LIST ( f1 , tp2 , l1 )"		3002104	0					
ANR	3002803	Callee	ICOPY_LIST		3002104	0					
ANR	3002804	Identifier	ICOPY_LIST		3002104	0					
ANR	3002805	ArgumentList	f1		3002104	1					
ANR	3002806	Argument	f1		3002104	0					
ANR	3002807	Identifier	f1		3002104	0					
ANR	3002808	Argument	tp2		3002104	1					
ANR	3002809	Identifier	tp2		3002104	0					
ANR	3002810	Argument	l1		3002104	2					
ANR	3002811	Identifier	l1		3002104	0					
ANR	3002812	ElseStatement	else		3002104	0					
ANR	3002813	ExpressionStatement	"CCOPY_LIST ( f1 , tp2 , l1 )"	222:8:6555:6578	3002104	0	True				
ANR	3002814	CallExpression	"CCOPY_LIST ( f1 , tp2 , l1 )"		3002104	0					
ANR	3002815	Callee	CCOPY_LIST		3002104	0					
ANR	3002816	Identifier	CCOPY_LIST		3002104	0					
ANR	3002817	ArgumentList	f1		3002104	1					
ANR	3002818	Argument	f1		3002104	0					
ANR	3002819	Identifier	f1		3002104	0					
ANR	3002820	Argument	tp2		3002104	1					
ANR	3002821	Identifier	tp2		3002104	0					
ANR	3002822	Argument	l1		3002104	2					
ANR	3002823	Identifier	l1		3002104	0					
ANR	3002824	ExpressionStatement	* p1 = l2	224:6:6594:6602	3002104	7	True				
ANR	3002825	AssignmentExpression	* p1 = l2		3002104	0		=			
ANR	3002826	UnaryOperationExpression	* p1		3002104	0					
ANR	3002827	UnaryOperator	*		3002104	0					
ANR	3002828	Identifier	p1		3002104	1					
ANR	3002829	Identifier	l2		3002104	1					
ANR	3002830	ExpressionStatement	tp2 = list1	226:5:6616:6627	3002104	3	True				
ANR	3002831	AssignmentExpression	tp2 = list1		3002104	0		=			
ANR	3002832	Identifier	tp2		3002104	0					
ANR	3002833	Identifier	list1		3002104	1					
ANR	3002834	ExpressionStatement	list1 = list2	227:5:6658:6671	3002104	4	True				
ANR	3002835	AssignmentExpression	list1 = list2		3002104	0		=			
ANR	3002836	Identifier	list1		3002104	0					
ANR	3002837	Identifier	list2		3002104	1					
ANR	3002838	ExpressionStatement	list2 = tp2	228:5:6678:6689	3002104	5	True				
ANR	3002839	AssignmentExpression	list2 = tp2		3002104	0		=			
ANR	3002840	Identifier	list2		3002104	0					
ANR	3002841	Identifier	tp2		3002104	1					
ANR	3002842	ExpressionStatement	last = list2 + nmemb * size	229:5:6696:6721	3002104	6	True				
ANR	3002843	AssignmentExpression	last = list2 + nmemb * size		3002104	0		=			
ANR	3002844	Identifier	last		3002104	0					
ANR	3002845	AdditiveExpression	list2 + nmemb * size		3002104	1		+			
ANR	3002846	Identifier	list2		3002104	0					
ANR	3002847	MultiplicativeExpression	nmemb * size		3002104	1		*			
ANR	3002848	Identifier	nmemb		3002104	0					
ANR	3002849	Identifier	size		3002104	1					
ANR	3002850	IfStatement	if ( base == list2 )		3002104	18					
ANR	3002851	Condition	base == list2	231:5:6731:6743	3002104	0	True				
ANR	3002852	EqualityExpression	base == list2		3002104	0		==			
ANR	3002853	Identifier	base		3002104	0					
ANR	3002854	Identifier	list2		3002104	1					
ANR	3002855	CompoundStatement		126:20:2864:2864	3002104	1					
ANR	3002856	ExpressionStatement	"memmove ( list2 , list1 , nmemb * size )"	232:2:6750:6783	3002104	0	True				
ANR	3002857	CallExpression	"memmove ( list2 , list1 , nmemb * size )"		3002104	0					
ANR	3002858	Callee	memmove		3002104	0					
ANR	3002859	Identifier	memmove		3002104	0					
ANR	3002860	ArgumentList	list2		3002104	1					
ANR	3002861	Argument	list2		3002104	0					
ANR	3002862	Identifier	list2		3002104	0					
ANR	3002863	Argument	list1		3002104	1					
ANR	3002864	Identifier	list1		3002104	0					
ANR	3002865	Argument	nmemb * size		3002104	2					
ANR	3002866	MultiplicativeExpression	nmemb * size		3002104	0		*			
ANR	3002867	Identifier	nmemb		3002104	0					
ANR	3002868	Identifier	size		3002104	1					
ANR	3002869	ExpressionStatement	list2 = list1	233:2:6787:6800	3002104	1	True				
ANR	3002870	AssignmentExpression	list2 = list1		3002104	0		=			
ANR	3002871	Identifier	list2		3002104	0					
ANR	3002872	Identifier	list1		3002104	1					
ANR	3002873	ExpressionStatement	free ( list2 )	235:1:6806:6817	3002104	19	True				
ANR	3002874	CallExpression	free ( list2 )		3002104	0					
ANR	3002875	Callee	free		3002104	0					
ANR	3002876	Identifier	free		3002104	0					
ANR	3002877	ArgumentList	list2		3002104	1					
ANR	3002878	Argument	list2		3002104	0					
ANR	3002879	Identifier	list2		3002104	0					
ANR	3002880	ReturnStatement	return ( 0 ) ;	236:1:6820:6830	3002104	20	True				
ANR	3002881	PrimaryExpression	0		3002104	0					
ANR	3002882	ReturnType	PHPAPI int		3002104	1					
ANR	3002883	Identifier	php_mergesort		3002104	2					
ANR	3002884	ParameterList	"void * base , size_t nmemb , size_t size , int ( * cmp ) ( const void * , const void * )"		3002104	3					
ANR	3002885	Parameter	void * base	105:25:3802:3811	3002104	0	True				
ANR	3002886	ParameterType	void *		3002104	0					
ANR	3002887	Identifier	base		3002104	1					
ANR	3002888	Parameter	size_t nmemb	105:37:3814:3825	3002104	1	True				
ANR	3002889	ParameterType	size_t		3002104	0					
ANR	3002890	Identifier	nmemb		3002104	1					
ANR	3002891	Parameter	size_t size	105:51:3828:3838	3002104	2	True				
ANR	3002892	ParameterType	size_t		3002104	0					
ANR	3002893	Identifier	size		3002104	1					
ANR	3002894	Parameter	"int ( * cmp ) ( const void * , const void * )"	105:64:3841:3878	3002104	3	True				
ANR	3002895	ParameterType	"(( const void * , const void * ) int) *"		3002104	0					
ANR	3002896	Identifier	cmp		3002104	1					
ANR	3002897	CFGEntryNode	ENTRY		3002104		True				
ANR	3002898	CFGExitNode	EXIT		3002104		True				
ANR	3002899	InfiniteForNode	true		3002104		True				
ANR	3002900	Symbol	big		3002104						
ANR	3002901	Symbol	p1		3002104						
ANR	3002902	Symbol	p2		3002104						
ANR	3002903	Symbol	l1		3002104						
ANR	3002904	Symbol	l2		3002104						
ANR	3002905	Symbol	cmp		3002104						
ANR	3002906	Symbol	f1		3002104						
ANR	3002907	Symbol	f2		3002104						
ANR	3002908	Symbol	* cmp		3002104						
ANR	3002909	Symbol	* EVAL ( list2 )		3002104						
ANR	3002910	Symbol	nmemb		3002104						
ANR	3002911	Symbol	* EVAL		3002104						
ANR	3002912	Symbol	PSIZE		3002104						
ANR	3002913	Symbol	ISIZE		3002104						
ANR	3002914	Symbol	malloc		3002104						
ANR	3002915	Symbol	iflag		3002104						
ANR	3002916	Symbol	b		3002104						
ANR	3002917	Symbol	errno		3002104						
ANR	3002918	Symbol	NULL		3002104						
ANR	3002919	Symbol	last		3002104						
ANR	3002920	Symbol	* p1		3002104						
ANR	3002921	Symbol	i		3002104						
ANR	3002922	Symbol	sense		3002104						
ANR	3002923	Symbol	* EVAL ( p2 )		3002104						
ANR	3002924	Symbol	list1		3002104						
ANR	3002925	Symbol	p		3002104						
ANR	3002926	Symbol	EINVAL		3002104						
ANR	3002927	Symbol	q		3002104						
ANR	3002928	Symbol	size		3002104						
ANR	3002929	Symbol	t		3002104						
ANR	3002930	Symbol	tp2		3002104						
ANR	3002931	Symbol	list2		3002104						
ANR	3002932	Symbol	EVAL		3002104						
ANR	3002933	Symbol	base		3002104						
ANR	3002934	Function	setup	265:0:7503:9185							
ANR	3002935	FunctionDef	"setup (u_char * list1 , u_char * list2 , size_t n , size_t size , int ( * cmp ) ( const void * , const void * ))"		3002934	0					
ANR	3002936	CompoundStatement		266:0:7614:9185	3002934	0					
ANR	3002937	IdentifierDeclStatement	"size_t i , length , size2 , sense ;"	267:1:7617:7647	3002934	0	True				
ANR	3002938	IdentifierDecl	i		3002934	0					
ANR	3002939	IdentifierDeclType	size_t		3002934	0					
ANR	3002940	Identifier	i		3002934	1					
ANR	3002941	IdentifierDecl	length		3002934	1					
ANR	3002942	IdentifierDeclType	size_t		3002934	0					
ANR	3002943	Identifier	length		3002934	1					
ANR	3002944	IdentifierDecl	size2		3002934	2					
ANR	3002945	IdentifierDeclType	size_t		3002934	0					
ANR	3002946	Identifier	size2		3002934	1					
ANR	3002947	IdentifierDecl	sense		3002934	3					
ANR	3002948	IdentifierDeclType	size_t		3002934	0					
ANR	3002949	Identifier	sense		3002934	1					
ANR	3002950	IdentifierDeclStatement	"u_char * f1 , * f2 , * s , * l2 , * last , * p2 , tmp ;"	268:1:7650:7691	3002934	1	True				
ANR	3002951	IdentifierDecl	* f1		3002934	0					
ANR	3002952	IdentifierDeclType	u_char *		3002934	0					
ANR	3002953	Identifier	f1		3002934	1					
ANR	3002954	IdentifierDecl	* f2		3002934	1					
ANR	3002955	IdentifierDeclType	u_char *		3002934	0					
ANR	3002956	Identifier	f2		3002934	1					
ANR	3002957	IdentifierDecl	* s		3002934	2					
ANR	3002958	IdentifierDeclType	u_char *		3002934	0					
ANR	3002959	Identifier	s		3002934	1					
ANR	3002960	IdentifierDecl	* l2		3002934	3					
ANR	3002961	IdentifierDeclType	u_char *		3002934	0					
ANR	3002962	Identifier	l2		3002934	1					
ANR	3002963	IdentifierDecl	* last		3002934	4					
ANR	3002964	IdentifierDeclType	u_char *		3002934	0					
ANR	3002965	Identifier	last		3002934	1					
ANR	3002966	IdentifierDecl	* p2		3002934	5					
ANR	3002967	IdentifierDeclType	u_char *		3002934	0					
ANR	3002968	Identifier	p2		3002934	1					
ANR	3002969	IdentifierDecl	tmp		3002934	6					
ANR	3002970	IdentifierDeclType	u_char		3002934	0					
ANR	3002971	Identifier	tmp		3002934	1					
ANR	3002972	ExpressionStatement	size2 = size * 2	270:1:7695:7709	3002934	2	True				
ANR	3002973	AssignmentExpression	size2 = size * 2		3002934	0		=			
ANR	3002974	Identifier	size2		3002934	0					
ANR	3002975	MultiplicativeExpression	size * 2		3002934	1		*			
ANR	3002976	Identifier	size		3002934	0					
ANR	3002977	PrimaryExpression	2		3002934	1					
ANR	3002978	IfStatement	if ( n <= 5 )		3002934	3					
ANR	3002979	Condition	n <= 5	271:5:7716:7721	3002934	0	True				
ANR	3002980	RelationalExpression	n <= 5		3002934	0		<=			
ANR	3002981	Identifier	n		3002934	0					
ANR	3002982	PrimaryExpression	5		3002934	1					
ANR	3002983	CompoundStatement		6:13:109:109	3002934	1					
ANR	3002984	ExpressionStatement	"insertionsort ( list1 , n , size , cmp )"	272:2:7728:7762	3002934	0	True				
ANR	3002985	CallExpression	"insertionsort ( list1 , n , size , cmp )"		3002934	0					
ANR	3002986	Callee	insertionsort		3002934	0					
ANR	3002987	Identifier	insertionsort		3002934	0					
ANR	3002988	ArgumentList	list1		3002934	1					
ANR	3002989	Argument	list1		3002934	0					
ANR	3002990	Identifier	list1		3002934	0					
ANR	3002991	Argument	n		3002934	1					
ANR	3002992	Identifier	n		3002934	0					
ANR	3002993	Argument	size		3002934	2					
ANR	3002994	Identifier	size		3002934	0					
ANR	3002995	Argument	cmp		3002934	3					
ANR	3002996	Identifier	cmp		3002934	0					
ANR	3002997	ExpressionStatement	* EVAL ( list2 ) = ( u_char * ) list2 + n * size	273:2:7766:7805	3002934	1	True				
ANR	3002998	AssignmentExpression	* EVAL ( list2 ) = ( u_char * ) list2 + n * size		3002934	0		=			
ANR	3002999	UnaryOperationExpression	* EVAL ( list2 )		3002934	0					
ANR	3003000	UnaryOperator	*		3002934	0					
ANR	3003001	CallExpression	EVAL ( list2 )		3002934	1					
ANR	3003002	Callee	EVAL		3002934	0					
ANR	3003003	Identifier	EVAL		3002934	0					
ANR	3003004	ArgumentList	list2		3002934	1					
ANR	3003005	Argument	list2		3002934	0					
ANR	3003006	Identifier	list2		3002934	0					
ANR	3003007	AdditiveExpression	( u_char * ) list2 + n * size		3002934	1		+			
ANR	3003008	CastExpression	( u_char * ) list2		3002934	0					
ANR	3003009	CastTarget	u_char *		3002934	0					
ANR	3003010	Identifier	list2		3002934	1					
ANR	3003011	MultiplicativeExpression	n * size		3002934	1		*			
ANR	3003012	Identifier	n		3002934	0					
ANR	3003013	Identifier	size		3002934	1					
ANR	3003014	ReturnStatement	return ;	274:2:7809:7815	3002934	2	True				
ANR	3003015	ExpressionStatement	i = 4 + ( n & 1 )	280:1:7909:7924	3002934	4	True				
ANR	3003016	AssignmentExpression	i = 4 + ( n & 1 )		3002934	0		=			
ANR	3003017	Identifier	i		3002934	0					
ANR	3003018	AdditiveExpression	4 + ( n & 1 )		3002934	1		+			
ANR	3003019	PrimaryExpression	4		3002934	0					
ANR	3003020	BitAndExpression	n & 1		3002934	1		&			
ANR	3003021	Identifier	n		3002934	0					
ANR	3003022	PrimaryExpression	1		3002934	1					
ANR	3003023	ExpressionStatement	"insertionsort ( list1 + ( n - i ) * size , i , size , cmp )"	281:1:7927:7978	3002934	5	True				
ANR	3003024	CallExpression	"insertionsort ( list1 + ( n - i ) * size , i , size , cmp )"		3002934	0					
ANR	3003025	Callee	insertionsort		3002934	0					
ANR	3003026	Identifier	insertionsort		3002934	0					
ANR	3003027	ArgumentList	list1 + ( n - i ) * size		3002934	1					
ANR	3003028	Argument	list1 + ( n - i ) * size		3002934	0					
ANR	3003029	AdditiveExpression	list1 + ( n - i ) * size		3002934	0		+			
ANR	3003030	Identifier	list1		3002934	0					
ANR	3003031	MultiplicativeExpression	( n - i ) * size		3002934	1		*			
ANR	3003032	AdditiveExpression	n - i		3002934	0		-			
ANR	3003033	Identifier	n		3002934	0					
ANR	3003034	Identifier	i		3002934	1					
ANR	3003035	Identifier	size		3002934	1					
ANR	3003036	Argument	i		3002934	1					
ANR	3003037	Identifier	i		3002934	0					
ANR	3003038	Argument	size		3002934	2					
ANR	3003039	Identifier	size		3002934	0					
ANR	3003040	Argument	cmp		3002934	3					
ANR	3003041	Identifier	cmp		3002934	0					
ANR	3003042	ExpressionStatement	last = list1 + size * ( n - i )	282:1:7981:8010	3002934	6	True				
ANR	3003043	AssignmentExpression	last = list1 + size * ( n - i )		3002934	0		=			
ANR	3003044	Identifier	last		3002934	0					
ANR	3003045	AdditiveExpression	list1 + size * ( n - i )		3002934	1		+			
ANR	3003046	Identifier	list1		3002934	0					
ANR	3003047	MultiplicativeExpression	size * ( n - i )		3002934	1		*			
ANR	3003048	Identifier	size		3002934	0					
ANR	3003049	AdditiveExpression	n - i		3002934	1		-			
ANR	3003050	Identifier	n		3002934	0					
ANR	3003051	Identifier	i		3002934	1					
ANR	3003052	ExpressionStatement	* EVAL ( list2 + ( last - list1 ) ) = list2 + n * size	283:1:8013:8061	3002934	7	True				
ANR	3003053	AssignmentExpression	* EVAL ( list2 + ( last - list1 ) ) = list2 + n * size		3002934	0		=			
ANR	3003054	UnaryOperationExpression	* EVAL ( list2 + ( last - list1 ) )		3002934	0					
ANR	3003055	UnaryOperator	*		3002934	0					
ANR	3003056	CallExpression	EVAL ( list2 + ( last - list1 ) )		3002934	1					
ANR	3003057	Callee	EVAL		3002934	0					
ANR	3003058	Identifier	EVAL		3002934	0					
ANR	3003059	ArgumentList	list2 + ( last - list1 )		3002934	1					
ANR	3003060	Argument	list2 + ( last - list1 )		3002934	0					
ANR	3003061	AdditiveExpression	list2 + ( last - list1 )		3002934	0		+			
ANR	3003062	Identifier	list2		3002934	0					
ANR	3003063	AdditiveExpression	last - list1		3002934	1		-			
ANR	3003064	Identifier	last		3002934	0					
ANR	3003065	Identifier	list1		3002934	1					
ANR	3003066	AdditiveExpression	list2 + n * size		3002934	1		+			
ANR	3003067	Identifier	list2		3002934	0					
ANR	3003068	MultiplicativeExpression	n * size		3002934	1		*			
ANR	3003069	Identifier	n		3002934	0					
ANR	3003070	Identifier	size		3002934	1					
ANR	3003071	ExpressionStatement	p2 = list2	286:1:8080:8090	3002934	8	True				
ANR	3003072	AssignmentExpression	p2 = list2		3002934	0		=			
ANR	3003073	Identifier	p2		3002934	0					
ANR	3003074	Identifier	list2		3002934	1					
ANR	3003075	ExpressionStatement	f1 = list1	287:1:8093:8103	3002934	9	True				
ANR	3003076	AssignmentExpression	f1 = list1		3002934	0		=			
ANR	3003077	Identifier	f1		3002934	0					
ANR	3003078	Identifier	list1		3002934	1					
ANR	3003079	ExpressionStatement	"sense = ( cmp ( f1 , f1 + size ) > 0 )"	288:1:8106:8138	3002934	10	True				
ANR	3003080	AssignmentExpression	"sense = ( cmp ( f1 , f1 + size ) > 0 )"		3002934	0		=			
ANR	3003081	Identifier	sense		3002934	0					
ANR	3003082	RelationalExpression	"cmp ( f1 , f1 + size ) > 0"		3002934	1		>			
ANR	3003083	CallExpression	"cmp ( f1 , f1 + size )"		3002934	0					
ANR	3003084	Callee	cmp		3002934	0					
ANR	3003085	Identifier	cmp		3002934	0					
ANR	3003086	ArgumentList	f1		3002934	1					
ANR	3003087	Argument	f1		3002934	0					
ANR	3003088	Identifier	f1		3002934	0					
ANR	3003089	Argument	f1 + size		3002934	1					
ANR	3003090	AdditiveExpression	f1 + size		3002934	0		+			
ANR	3003091	Identifier	f1		3002934	0					
ANR	3003092	Identifier	size		3002934	1					
ANR	3003093	PrimaryExpression	0		3002934	1					
ANR	3003094	ForStatement	for ( ; f1 < last ; sense = ! sense )		3002934	11					
ANR	3003095	Condition	f1 < last	289:8:8148:8156	3002934	0	True				
ANR	3003096	RelationalExpression	f1 < last		3002934	0		<			
ANR	3003097	Identifier	f1		3002934	0					
ANR	3003098	Identifier	last		3002934	1					
ANR	3003099	AssignmentExpression	sense = ! sense	289:19:8159:8172	3002934	1	True	=			
ANR	3003100	Identifier	sense		3002934	0					
ANR	3003101	UnaryOperationExpression	! sense		3002934	1					
ANR	3003102	UnaryOperator	!		3002934	0					
ANR	3003103	Identifier	sense		3002934	1					
ANR	3003104	CompoundStatement		24:35:560:560	3002934	2					
ANR	3003105	ExpressionStatement	length = 2	290:2:8179:8189	3002934	0	True				
ANR	3003106	AssignmentExpression	length = 2		3002934	0		=			
ANR	3003107	Identifier	length		3002934	0					
ANR	3003108	PrimaryExpression	2		3002934	1					
ANR	3003109	ForStatement	for ( f2 = f1 + size2 ; f2 < last ; f2 += size2 )		3002934	1					
ANR	3003110	ForInit	f2 = f1 + size2 ;	292:7:8237:8252	3002934	0	True				
ANR	3003111	AssignmentExpression	f2 = f1 + size2		3002934	0		=			
ANR	3003112	Identifier	f2		3002934	0					
ANR	3003113	AdditiveExpression	f1 + size2		3002934	1		+			
ANR	3003114	Identifier	f1		3002934	0					
ANR	3003115	Identifier	size2		3002934	1					
ANR	3003116	Condition	f2 < last	292:24:8254:8262	3002934	1	True				
ANR	3003117	RelationalExpression	f2 < last		3002934	0		<			
ANR	3003118	Identifier	f2		3002934	0					
ANR	3003119	Identifier	last		3002934	1					
ANR	3003120	AssignmentExpression	f2 += size2	292:35:8265:8275	3002934	2	True	+=			
ANR	3003121	Identifier	f2		3002934	0					
ANR	3003122	Identifier	size2		3002934	1					
ANR	3003123	CompoundStatement		27:48:663:663	3002934	3					
ANR	3003124	IfStatement	"if ( ( cmp ( f2 , f2 + size ) > 0 ) != sense )"		3002934	0					
ANR	3003125	Condition	"( cmp ( f2 , f2 + size ) > 0 ) != sense"	293:7:8287:8318	3002934	0	True				
ANR	3003126	EqualityExpression	"( cmp ( f2 , f2 + size ) > 0 ) != sense"		3002934	0		!=			
ANR	3003127	RelationalExpression	"cmp ( f2 , f2 + size ) > 0"		3002934	0		>			
ANR	3003128	CallExpression	"cmp ( f2 , f2 + size )"		3002934	0					
ANR	3003129	Callee	cmp		3002934	0					
ANR	3003130	Identifier	cmp		3002934	0					
ANR	3003131	ArgumentList	f2		3002934	1					
ANR	3003132	Argument	f2		3002934	0					
ANR	3003133	Identifier	f2		3002934	0					
ANR	3003134	Argument	f2 + size		3002934	1					
ANR	3003135	AdditiveExpression	f2 + size		3002934	0		+			
ANR	3003136	Identifier	f2		3002934	0					
ANR	3003137	Identifier	size		3002934	1					
ANR	3003138	PrimaryExpression	0		3002934	1					
ANR	3003139	Identifier	sense		3002934	1					
ANR	3003140	BreakStatement	break ;	294:4:8325:8330	3002934	1	True				
ANR	3003141	ExpressionStatement	length += 2	295:3:8335:8346	3002934	1	True				
ANR	3003142	AssignmentExpression	length += 2		3002934	0		+=			
ANR	3003143	Identifier	length		3002934	0					
ANR	3003144	PrimaryExpression	2		3002934	1					
ANR	3003145	IfStatement	if ( length < THRESHOLD )		3002934	2					
ANR	3003146	Condition	length < THRESHOLD	297:6:8358:8375	3002934	0	True				
ANR	3003147	RelationalExpression	length < THRESHOLD		3002934	0		<			
ANR	3003148	Identifier	length		3002934	0					
ANR	3003149	Identifier	THRESHOLD		3002934	1					
ANR	3003150	CompoundStatement		32:26:763:763	3002934	1					
ANR	3003151	DoStatement	do		3002934	0					
ANR	3003152	CompoundStatement		33:6:793:793	3002934	0					
ANR	3003153	ExpressionStatement	p2 = * EVAL ( p2 ) = f1 + size2 - list1 + list2	299:4:8414:8457	3002934	0	True				
ANR	3003154	AssignmentExpression	p2 = * EVAL ( p2 ) = f1 + size2 - list1 + list2		3002934	0		=			
ANR	3003155	Identifier	p2		3002934	0					
ANR	3003156	AssignmentExpression	* EVAL ( p2 ) = f1 + size2 - list1 + list2		3002934	1		=			
ANR	3003157	UnaryOperationExpression	* EVAL ( p2 )		3002934	0					
ANR	3003158	UnaryOperator	*		3002934	0					
ANR	3003159	CallExpression	EVAL ( p2 )		3002934	1					
ANR	3003160	Callee	EVAL		3002934	0					
ANR	3003161	Identifier	EVAL		3002934	0					
ANR	3003162	ArgumentList	p2		3002934	1					
ANR	3003163	Argument	p2		3002934	0					
ANR	3003164	Identifier	p2		3002934	0					
ANR	3003165	AdditiveExpression	f1 + size2 - list1 + list2		3002934	1		+			
ANR	3003166	Identifier	f1		3002934	0					
ANR	3003167	AdditiveExpression	size2 - list1 + list2		3002934	1		-			
ANR	3003168	Identifier	size2		3002934	0					
ANR	3003169	AdditiveExpression	list1 + list2		3002934	1		+			
ANR	3003170	Identifier	list1		3002934	0					
ANR	3003171	Identifier	list2		3002934	1					
ANR	3003172	IfStatement	if ( sense > 0 )		3002934	1					
ANR	3003173	Condition	sense > 0	300:8:8467:8475	3002934	0	True				
ANR	3003174	RelationalExpression	sense > 0		3002934	0		>			
ANR	3003175	Identifier	sense		3002934	0					
ANR	3003176	PrimaryExpression	0		3002934	1					
ANR	3003177	ExpressionStatement	"swap ( f1 , f1 + size )"	301:5:8483:8503	3002934	1	True				
ANR	3003178	CallExpression	"swap ( f1 , f1 + size )"		3002934	0					
ANR	3003179	Callee	swap		3002934	0					
ANR	3003180	Identifier	swap		3002934	0					
ANR	3003181	ArgumentList	f1		3002934	1					
ANR	3003182	Argument	f1		3002934	0					
ANR	3003183	Identifier	f1		3002934	0					
ANR	3003184	Argument	f1 + size		3002934	1					
ANR	3003185	AdditiveExpression	f1 + size		3002934	0		+			
ANR	3003186	Identifier	f1		3002934	0					
ANR	3003187	Identifier	size		3002934	1					
ANR	3003188	Condition	( f1 += size2 ) < f2	302:12:8517:8534	3002934	1	True				
ANR	3003189	RelationalExpression	( f1 += size2 ) < f2		3002934	0		<			
ANR	3003190	AssignmentExpression	f1 += size2		3002934	0		+=			
ANR	3003191	Identifier	f1		3002934	0					
ANR	3003192	Identifier	size2		3002934	1					
ANR	3003193	Identifier	f2		3002934	1					
ANR	3003194	ElseStatement	else		3002934	0					
ANR	3003195	CompoundStatement		38:9:932:932	3002934	0					
ANR	3003196	ExpressionStatement	l2 = f2	304:3:8575:8582	3002934	0	True				
ANR	3003197	AssignmentExpression	l2 = f2		3002934	0		=			
ANR	3003198	Identifier	l2		3002934	0					
ANR	3003199	Identifier	f2		3002934	1					
ANR	3003200	ForStatement	for ( f2 = f1 + size2 ; f2 < l2 ; f2 += size2 )		3002934	1					
ANR	3003201	ForInit	f2 = f1 + size2 ;	305:8:8592:8607	3002934	0	True				
ANR	3003202	AssignmentExpression	f2 = f1 + size2		3002934	0		=			
ANR	3003203	Identifier	f2		3002934	0					
ANR	3003204	AdditiveExpression	f1 + size2		3002934	1		+			
ANR	3003205	Identifier	f1		3002934	0					
ANR	3003206	Identifier	size2		3002934	1					
ANR	3003207	Condition	f2 < l2	305:25:8609:8615	3002934	1	True				
ANR	3003208	RelationalExpression	f2 < l2		3002934	0		<			
ANR	3003209	Identifier	f2		3002934	0					
ANR	3003210	Identifier	l2		3002934	1					
ANR	3003211	AssignmentExpression	f2 += size2	305:34:8618:8628	3002934	2	True	+=			
ANR	3003212	Identifier	f2		3002934	0					
ANR	3003213	Identifier	size2		3002934	1					
ANR	3003214	CompoundStatement		40:47:1016:1016	3002934	3					
ANR	3003215	IfStatement	"if ( ( cmp ( f2 - size , f2 ) > 0 ) != sense )"		3002934	0					
ANR	3003216	Condition	"( cmp ( f2 - size , f2 ) > 0 ) != sense"	306:8:8641:8671	3002934	0	True				
ANR	3003217	EqualityExpression	"( cmp ( f2 - size , f2 ) > 0 ) != sense"		3002934	0		!=			
ANR	3003218	RelationalExpression	"cmp ( f2 - size , f2 ) > 0"		3002934	0		>			
ANR	3003219	CallExpression	"cmp ( f2 - size , f2 )"		3002934	0					
ANR	3003220	Callee	cmp		3002934	0					
ANR	3003221	Identifier	cmp		3002934	0					
ANR	3003222	ArgumentList	f2 - size		3002934	1					
ANR	3003223	Argument	f2 - size		3002934	0					
ANR	3003224	AdditiveExpression	f2 - size		3002934	0		-			
ANR	3003225	Identifier	f2		3002934	0					
ANR	3003226	Identifier	size		3002934	1					
ANR	3003227	Argument	f2		3002934	1					
ANR	3003228	Identifier	f2		3002934	0					
ANR	3003229	PrimaryExpression	0		3002934	1					
ANR	3003230	Identifier	sense		3002934	1					
ANR	3003231	CompoundStatement		41:41:1059:1059	3002934	1					
ANR	3003232	ExpressionStatement	p2 = * EVAL ( p2 ) = f2 - list1 + list2	307:5:8681:8716	3002934	0	True				
ANR	3003233	AssignmentExpression	p2 = * EVAL ( p2 ) = f2 - list1 + list2		3002934	0		=			
ANR	3003234	Identifier	p2		3002934	0					
ANR	3003235	AssignmentExpression	* EVAL ( p2 ) = f2 - list1 + list2		3002934	1		=			
ANR	3003236	UnaryOperationExpression	* EVAL ( p2 )		3002934	0					
ANR	3003237	UnaryOperator	*		3002934	0					
ANR	3003238	CallExpression	EVAL ( p2 )		3002934	1					
ANR	3003239	Callee	EVAL		3002934	0					
ANR	3003240	Identifier	EVAL		3002934	0					
ANR	3003241	ArgumentList	p2		3002934	1					
ANR	3003242	Argument	p2		3002934	0					
ANR	3003243	Identifier	p2		3002934	0					
ANR	3003244	AdditiveExpression	f2 - list1 + list2		3002934	1		-			
ANR	3003245	Identifier	f2		3002934	0					
ANR	3003246	AdditiveExpression	list1 + list2		3002934	1		+			
ANR	3003247	Identifier	list1		3002934	0					
ANR	3003248	Identifier	list2		3002934	1					
ANR	3003249	IfStatement	if ( sense > 0 )		3002934	1					
ANR	3003250	Condition	sense > 0	308:9:8727:8735	3002934	0	True				
ANR	3003251	RelationalExpression	sense > 0		3002934	0		>			
ANR	3003252	Identifier	sense		3002934	0					
ANR	3003253	PrimaryExpression	0		3002934	1					
ANR	3003254	ExpressionStatement	"reverse ( f1 , f2 - size )"	309:6:8744:8764	3002934	1	True				
ANR	3003255	CallExpression	"reverse ( f1 , f2 - size )"		3002934	0					
ANR	3003256	Callee	reverse		3002934	0					
ANR	3003257	Identifier	reverse		3002934	0					
ANR	3003258	ArgumentList	f1		3002934	1					
ANR	3003259	Argument	f1		3002934	0					
ANR	3003260	Identifier	f1		3002934	0					
ANR	3003261	Argument	f2 - size		3002934	1					
ANR	3003262	AdditiveExpression	f2 - size		3002934	0		-			
ANR	3003263	Identifier	f2		3002934	0					
ANR	3003264	Identifier	size		3002934	1					
ANR	3003265	ExpressionStatement	f1 = f2	310:5:8771:8778	3002934	2	True				
ANR	3003266	AssignmentExpression	f1 = f2		3002934	0		=			
ANR	3003267	Identifier	f1		3002934	0					
ANR	3003268	Identifier	f2		3002934	1					
ANR	3003269	IfStatement	if ( sense > 0 )		3002934	2					
ANR	3003270	Condition	sense > 0	313:7:8798:8806	3002934	0	True				
ANR	3003271	RelationalExpression	sense > 0		3002934	0		>			
ANR	3003272	Identifier	sense		3002934	0					
ANR	3003273	PrimaryExpression	0		3002934	1					
ANR	3003274	ExpressionStatement	"reverse ( f1 , f2 - size )"	314:4:8813:8834	3002934	1	True				
ANR	3003275	CallExpression	"reverse ( f1 , f2 - size )"		3002934	0					
ANR	3003276	Callee	reverse		3002934	0					
ANR	3003277	Identifier	reverse		3002934	0					
ANR	3003278	ArgumentList	f1		3002934	1					
ANR	3003279	Argument	f1		3002934	0					
ANR	3003280	Identifier	f1		3002934	0					
ANR	3003281	Argument	f2 - size		3002934	1					
ANR	3003282	AdditiveExpression	f2 - size		3002934	0		-			
ANR	3003283	Identifier	f2		3002934	0					
ANR	3003284	Identifier	size		3002934	1					
ANR	3003285	ExpressionStatement	f1 = f2	315:3:8839:8846	3002934	3	True				
ANR	3003286	AssignmentExpression	f1 = f2		3002934	0		=			
ANR	3003287	Identifier	f1		3002934	0					
ANR	3003288	Identifier	f2		3002934	1					
ANR	3003289	IfStatement	"if ( f2 < last || cmp ( f2 - size , f2 ) > 0 )"		3002934	4					
ANR	3003290	Condition	"f2 < last || cmp ( f2 - size , f2 ) > 0"	316:7:8855:8889	3002934	0	True				
ANR	3003291	OrExpression	"f2 < last || cmp ( f2 - size , f2 ) > 0"		3002934	0		||			
ANR	3003292	RelationalExpression	f2 < last		3002934	0		<			
ANR	3003293	Identifier	f2		3002934	0					
ANR	3003294	Identifier	last		3002934	1					
ANR	3003295	RelationalExpression	"cmp ( f2 - size , f2 ) > 0"		3002934	1		>			
ANR	3003296	CallExpression	"cmp ( f2 - size , f2 )"		3002934	0					
ANR	3003297	Callee	cmp		3002934	0					
ANR	3003298	Identifier	cmp		3002934	0					
ANR	3003299	ArgumentList	f2 - size		3002934	1					
ANR	3003300	Argument	f2 - size		3002934	0					
ANR	3003301	AdditiveExpression	f2 - size		3002934	0		-			
ANR	3003302	Identifier	f2		3002934	0					
ANR	3003303	Identifier	size		3002934	1					
ANR	3003304	Argument	f2		3002934	1					
ANR	3003305	Identifier	f2		3002934	0					
ANR	3003306	PrimaryExpression	0		3002934	1					
ANR	3003307	ExpressionStatement	p2 = * EVAL ( p2 ) = f2 - list1 + list2	317:4:8896:8931	3002934	1	True				
ANR	3003308	AssignmentExpression	p2 = * EVAL ( p2 ) = f2 - list1 + list2		3002934	0		=			
ANR	3003309	Identifier	p2		3002934	0					
ANR	3003310	AssignmentExpression	* EVAL ( p2 ) = f2 - list1 + list2		3002934	1		=			
ANR	3003311	UnaryOperationExpression	* EVAL ( p2 )		3002934	0					
ANR	3003312	UnaryOperator	*		3002934	0					
ANR	3003313	CallExpression	EVAL ( p2 )		3002934	1					
ANR	3003314	Callee	EVAL		3002934	0					
ANR	3003315	Identifier	EVAL		3002934	0					
ANR	3003316	ArgumentList	p2		3002934	1					
ANR	3003317	Argument	p2		3002934	0					
ANR	3003318	Identifier	p2		3002934	0					
ANR	3003319	AdditiveExpression	f2 - list1 + list2		3002934	1		-			
ANR	3003320	Identifier	f2		3002934	0					
ANR	3003321	AdditiveExpression	list1 + list2		3002934	1		+			
ANR	3003322	Identifier	list1		3002934	0					
ANR	3003323	Identifier	list2		3002934	1					
ANR	3003324	ElseStatement	else		3002934	0					
ANR	3003325	ExpressionStatement	p2 = * EVAL ( p2 ) = list2 + n * size	319:4:8945:8976	3002934	0	True				
ANR	3003326	AssignmentExpression	p2 = * EVAL ( p2 ) = list2 + n * size		3002934	0		=			
ANR	3003327	Identifier	p2		3002934	0					
ANR	3003328	AssignmentExpression	* EVAL ( p2 ) = list2 + n * size		3002934	1		=			
ANR	3003329	UnaryOperationExpression	* EVAL ( p2 )		3002934	0					
ANR	3003330	UnaryOperator	*		3002934	0					
ANR	3003331	CallExpression	EVAL ( p2 )		3002934	1					
ANR	3003332	Callee	EVAL		3002934	0					
ANR	3003333	Identifier	EVAL		3002934	0					
ANR	3003334	ArgumentList	p2		3002934	1					
ANR	3003335	Argument	p2		3002934	0					
ANR	3003336	Identifier	p2		3002934	0					
ANR	3003337	AdditiveExpression	list2 + n * size		3002934	1		+			
ANR	3003338	Identifier	list2		3002934	0					
ANR	3003339	MultiplicativeExpression	n * size		3002934	1		*			
ANR	3003340	Identifier	n		3002934	0					
ANR	3003341	Identifier	size		3002934	1					
ANR	3003342	ReturnType	static void		3002934	1					
ANR	3003343	Identifier	setup		3002934	2					
ANR	3003344	ParameterList	"u_char * list1 , u_char * list2 , size_t n , size_t size , int ( * cmp ) ( const void * , const void * )"		3002934	3					
ANR	3003345	Parameter	u_char * list1	265:18:7521:7533	3002934	0	True				
ANR	3003346	ParameterType	u_char *		3002934	0					
ANR	3003347	Identifier	list1		3002934	1					
ANR	3003348	Parameter	u_char * list2	265:33:7536:7548	3002934	1	True				
ANR	3003349	ParameterType	u_char *		3002934	0					
ANR	3003350	Identifier	list2		3002934	1					
ANR	3003351	Parameter	size_t n	265:48:7551:7558	3002934	2	True				
ANR	3003352	ParameterType	size_t		3002934	0					
ANR	3003353	Identifier	n		3002934	1					
ANR	3003354	Parameter	size_t size	265:58:7561:7571	3002934	3	True				
ANR	3003355	ParameterType	size_t		3002934	0					
ANR	3003356	Identifier	size		3002934	1					
ANR	3003357	Parameter	"int ( * cmp ) ( const void * , const void * )"	265:71:7574:7611	3002934	4	True				
ANR	3003358	ParameterType	"(( const void * , const void * ) int) *"		3002934	0					
ANR	3003359	Identifier	cmp		3002934	1					
ANR	3003360	CFGEntryNode	ENTRY		3002934		True				
ANR	3003361	CFGExitNode	EXIT		3002934		True				
ANR	3003362	Symbol	p2		3002934						
ANR	3003363	Symbol	last		3002934						
ANR	3003364	Symbol	l2		3002934						
ANR	3003365	Symbol	cmp		3002934						
ANR	3003366	Symbol	length		3002934						
ANR	3003367	Symbol	i		3002934						
ANR	3003368	Symbol	sense		3002934						
ANR	3003369	Symbol	f1		3002934						
ANR	3003370	Symbol	f2		3002934						
ANR	3003371	Symbol	* EVAL ( p2 )		3002934						
ANR	3003372	Symbol	n		3002934						
ANR	3003373	Symbol	list1		3002934						
ANR	3003374	Symbol	THRESHOLD		3002934						
ANR	3003375	Symbol	s		3002934						
ANR	3003376	Symbol	* EVAL ( list2 )		3002934						
ANR	3003377	Symbol	size		3002934						
ANR	3003378	Symbol	tmp		3002934						
ANR	3003379	Symbol	* EVAL ( list2 + ( last - list1 ) )		3002934						
ANR	3003380	Symbol	list2		3002934						
ANR	3003381	Symbol	size2		3002934						
ANR	3003382	Symbol	EVAL		3002934						
ANR	3003383	Symbol	* EVAL		3002934						
ANR	3003384	Function	insertionsort	336:0:9302:9592							
ANR	3003385	FunctionDef	"insertionsort (u_char * a , size_t n , size_t size , int ( * cmp ) ( const void * , const void * ))"		3003384	0					
ANR	3003386	CompoundStatement		337:0:9402:9592	3003384	0					
ANR	3003387	IdentifierDeclStatement	"u_char * ai , * s , * t , * u , tmp ;"	338:1:9405:9432	3003384	0	True				
ANR	3003388	IdentifierDecl	* ai		3003384	0					
ANR	3003389	IdentifierDeclType	u_char *		3003384	0					
ANR	3003390	Identifier	ai		3003384	1					
ANR	3003391	IdentifierDecl	* s		3003384	1					
ANR	3003392	IdentifierDeclType	u_char *		3003384	0					
ANR	3003393	Identifier	s		3003384	1					
ANR	3003394	IdentifierDecl	* t		3003384	2					
ANR	3003395	IdentifierDeclType	u_char *		3003384	0					
ANR	3003396	Identifier	t		3003384	1					
ANR	3003397	IdentifierDecl	* u		3003384	3					
ANR	3003398	IdentifierDeclType	u_char *		3003384	0					
ANR	3003399	Identifier	u		3003384	1					
ANR	3003400	IdentifierDecl	tmp		3003384	4					
ANR	3003401	IdentifierDeclType	u_char		3003384	0					
ANR	3003402	Identifier	tmp		3003384	1					
ANR	3003403	IdentifierDeclStatement	size_t i ;	339:1:9435:9443	3003384	1	True				
ANR	3003404	IdentifierDecl	i		3003384	0					
ANR	3003405	IdentifierDeclType	size_t		3003384	0					
ANR	3003406	Identifier	i		3003384	1					
ANR	3003407	ForStatement	for ( ai = a + size ; -- n >= 1 ; ai += size )		3003384	2					
ANR	3003408	ForInit	ai = a + size ;	341:6:9452:9463	3003384	0	True				
ANR	3003409	AssignmentExpression	ai = a + size		3003384	0		=			
ANR	3003410	Identifier	ai		3003384	0					
ANR	3003411	AdditiveExpression	a + size		3003384	1		+			
ANR	3003412	Identifier	a		3003384	0					
ANR	3003413	Identifier	size		3003384	1					
ANR	3003414	Condition	-- n >= 1	341:19:9465:9472	3003384	1	True				
ANR	3003415	RelationalExpression	-- n >= 1		3003384	0		>=			
ANR	3003416	UnaryExpression	-- n		3003384	0					
ANR	3003417	IncDec	--		3003384	0					
ANR	3003418	Identifier	n		3003384	1					
ANR	3003419	PrimaryExpression	1		3003384	1					
ANR	3003420	AssignmentExpression	ai += size	341:29:9475:9484	3003384	2	True	+=			
ANR	3003421	Identifier	ai		3003384	0					
ANR	3003422	Identifier	size		3003384	1					
ANR	3003423	ForStatement	for ( t = ai ; t > a ; t -= size )		3003384	3					
ANR	3003424	ForInit	t = ai ;	342:7:9494:9500	3003384	0	True				
ANR	3003425	AssignmentExpression	t = ai		3003384	0		=			
ANR	3003426	Identifier	t		3003384	0					
ANR	3003427	Identifier	ai		3003384	1					
ANR	3003428	Condition	t > a	342:15:9502:9506	3003384	1	True				
ANR	3003429	RelationalExpression	t > a		3003384	0		>			
ANR	3003430	Identifier	t		3003384	0					
ANR	3003431	Identifier	a		3003384	1					
ANR	3003432	AssignmentExpression	t -= size	342:22:9509:9517	3003384	2	True	-=			
ANR	3003433	Identifier	t		3003384	0					
ANR	3003434	Identifier	size		3003384	1					
ANR	3003435	CompoundStatement		6:33:117:117	3003384	3					
ANR	3003436	ExpressionStatement	u = t - size	343:3:9525:9537	3003384	0	True				
ANR	3003437	AssignmentExpression	u = t - size		3003384	0		=			
ANR	3003438	Identifier	u		3003384	0					
ANR	3003439	AdditiveExpression	t - size		3003384	1		-			
ANR	3003440	Identifier	t		3003384	0					
ANR	3003441	Identifier	size		3003384	1					
ANR	3003442	IfStatement	"if ( cmp ( u , t ) <= 0 )"		3003384	1					
ANR	3003443	Condition	"cmp ( u , t ) <= 0"	344:7:9546:9559	3003384	0	True				
ANR	3003444	RelationalExpression	"cmp ( u , t ) <= 0"		3003384	0		<=			
ANR	3003445	CallExpression	"cmp ( u , t )"		3003384	0					
ANR	3003446	Callee	cmp		3003384	0					
ANR	3003447	Identifier	cmp		3003384	0					
ANR	3003448	ArgumentList	u		3003384	1					
ANR	3003449	Argument	u		3003384	0					
ANR	3003450	Identifier	u		3003384	0					
ANR	3003451	Argument	t		3003384	1					
ANR	3003452	Identifier	t		3003384	0					
ANR	3003453	PrimaryExpression	0		3003384	1					
ANR	3003454	BreakStatement	break ;	345:4:9566:9571	3003384	1	True				
ANR	3003455	ExpressionStatement	"swap ( u , t )"	346:3:9576:9586	3003384	2	True				
ANR	3003456	CallExpression	"swap ( u , t )"		3003384	0					
ANR	3003457	Callee	swap		3003384	0					
ANR	3003458	Identifier	swap		3003384	0					
ANR	3003459	ArgumentList	u		3003384	1					
ANR	3003460	Argument	u		3003384	0					
ANR	3003461	Identifier	u		3003384	0					
ANR	3003462	Argument	t		3003384	1					
ANR	3003463	Identifier	t		3003384	0					
ANR	3003464	ReturnType	static void		3003384	1					
ANR	3003465	Identifier	insertionsort		3003384	2					
ANR	3003466	ParameterList	"u_char * a , size_t n , size_t size , int ( * cmp ) ( const void * , const void * )"		3003384	3					
ANR	3003467	Parameter	u_char * a	336:26:9328:9336	3003384	0	True				
ANR	3003468	ParameterType	u_char *		3003384	0					
ANR	3003469	Identifier	a		3003384	1					
ANR	3003470	Parameter	size_t n	336:37:9339:9346	3003384	1	True				
ANR	3003471	ParameterType	size_t		3003384	0					
ANR	3003472	Identifier	n		3003384	1					
ANR	3003473	Parameter	size_t size	336:47:9349:9359	3003384	2	True				
ANR	3003474	ParameterType	size_t		3003384	0					
ANR	3003475	Identifier	size		3003384	1					
ANR	3003476	Parameter	"int ( * cmp ) ( const void * , const void * )"	336:60:9362:9399	3003384	3	True				
ANR	3003477	ParameterType	"(( const void * , const void * ) int) *"		3003384	0					
ANR	3003478	Identifier	cmp		3003384	1					
ANR	3003479	CFGEntryNode	ENTRY		3003384		True				
ANR	3003480	CFGExitNode	EXIT		3003384		True				
ANR	3003481	Symbol	a		3003384						
ANR	3003482	Symbol	s		3003384						
ANR	3003483	Symbol	size		3003384						
ANR	3003484	Symbol	t		3003384						
ANR	3003485	Symbol	u		3003384						
ANR	3003486	Symbol	tmp		3003384						
ANR	3003487	Symbol	cmp		3003384						
ANR	3003488	Symbol	ai		3003384						
ANR	3003489	Symbol	i		3003384						
ANR	3003490	Symbol	n		3003384						
