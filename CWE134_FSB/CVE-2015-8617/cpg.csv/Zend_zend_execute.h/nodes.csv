command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	164948	File	data/converged/CVE-2015-8617_php-src/Zend_zend_execute.h								
ANR	164949	DeclStmt									
ANR	164950	Decl							ZEND_API extern void ( * ) ( zend_execute_data * execute_data )	ZEND_API extern void ( * ) ( zend_execute_data * execute_data )	zend_execute_ex
ANR	164951	DeclStmt									
ANR	164952	Decl							"ZEND_API extern void ( * ) ( zend_execute_data * execute_data , zval * return_value )"	"ZEND_API extern void ( * ) ( zend_execute_data * execute_data , zval * return_value )"	zend_execute_internal
ANR	164953	DeclStmt									
ANR	164954	Decl							void	void ( void )	init_executor
ANR	164955	DeclStmt									
ANR	164956	Decl							void	void ( void )	shutdown_executor
ANR	164957	DeclStmt									
ANR	164958	Decl							void	void ( void )	shutdown_destructors
ANR	164959	DeclStmt									
ANR	164960	Decl							ZEND_API void	"ZEND_API void ( zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value )"	zend_init_execute_data
ANR	164961	DeclStmt									
ANR	164962	Decl							ZEND_API zend_execute_data	"ZEND_API zend_execute_data * ( zend_execute_data * call , zend_op_array * op_array , zval * return_value )"	zend_create_generator_execute_data
ANR	164963	DeclStmt									
ANR	164964	Decl							ZEND_API void	"ZEND_API void ( zend_op_array * op_array , zval * return_value )"	zend_execute
ANR	164965	DeclStmt									
ANR	164966	Decl							ZEND_API void	ZEND_API void ( zend_execute_data * execute_data )	execute_ex
ANR	164967	DeclStmt									
ANR	164968	Decl							ZEND_API void	"ZEND_API void ( zend_execute_data * execute_data , zval * return_value )"	execute_internal
ANR	164969	DeclStmt									
ANR	164970	Decl							ZEND_API zend_class_entry	ZEND_API zend_class_entry * ( zend_string * name )	zend_lookup_class
ANR	164971	DeclStmt									
ANR	164972	Decl							ZEND_API zend_class_entry	"ZEND_API zend_class_entry * ( zend_string * name , const zval * key , int use_autoload )"	zend_lookup_class_ex
ANR	164973	DeclStmt									
ANR	164974	Decl							ZEND_API zend_class_entry	ZEND_API zend_class_entry * ( zend_execute_data * ex )	zend_get_called_scope
ANR	164975	DeclStmt									
ANR	164976	Decl							ZEND_API zend_object	ZEND_API zend_object * ( zend_execute_data * ex )	zend_get_this_object
ANR	164977	DeclStmt									
ANR	164978	Decl							ZEND_API int	"ZEND_API int ( char * str , zval * retval_ptr , char * string_name )"	zend_eval_string
ANR	164979	DeclStmt									
ANR	164980	Decl							ZEND_API int	"ZEND_API int ( char * str , size_t str_len , zval * retval_ptr , char * string_name )"	zend_eval_stringl
ANR	164981	DeclStmt									
ANR	164982	Decl							ZEND_API int	"ZEND_API int ( char * str , zval * retval_ptr , char * string_name , int handle_exceptions )"	zend_eval_string_ex
ANR	164983	DeclStmt									
ANR	164984	Decl							ZEND_API int	"ZEND_API int ( char * str , size_t str_len , zval * retval_ptr , char * string_name , int handle_exceptions )"	zend_eval_stringl_ex
ANR	164985	DeclStmt									
ANR	164986	Decl							ZEND_API void ZEND_FASTCALL	"ZEND_API void ZEND_FASTCALL ( zend_function * zf , uint32_t arg_num , zval * arg )"	zend_check_internal_arg_type
ANR	164987	DeclStmt									
ANR	164988	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zend_function * zf , uint32_t arg_num , zval * arg , zval * default_value , void * * cache_slot )"	zend_check_arg_type
ANR	164989	DeclStmt									
ANR	164990	Decl							ZEND_API void ZEND_FASTCALL	"ZEND_API void ZEND_FASTCALL ( zend_execute_data * execute_data , uint32_t arg_num , void * * cache_slot )"	zend_check_missing_arg
ANR	164991	Function	zend_assign_to_variable	57:0:3314:5817							
ANR	164992	FunctionDef	"zend_assign_to_variable (zval * variable_ptr , zval * value , zend_uchar value_type)"		164991	0					
ANR	164993	CompoundStatement		58:0:3426:5817	164991	0					
ANR	164994	IdentifierDeclStatement	zend_refcounted * ref = NULL ;	59:1:3429:3456	164991	0	True				
ANR	164995	IdentifierDecl	* ref = NULL		164991	0					
ANR	164996	IdentifierDeclType	zend_refcounted *		164991	0					
ANR	164997	Identifier	ref		164991	1					
ANR	164998	AssignmentExpression	* ref = NULL		164991	2		=			
ANR	164999	Identifier	NULL		164991	0					
ANR	165000	Identifier	NULL		164991	1					
ANR	165001	IfStatement	"if ( ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && Z_ISREF_P ( value ) )"		164991	1					
ANR	165002	Condition	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && Z_ISREF_P ( value )"	61:5:3464:3530	164991	0	True				
ANR	165003	AndExpression	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && Z_ISREF_P ( value )"		164991	0		&&			
ANR	165004	CallExpression	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 )"		164991	0					
ANR	165005	Callee	ZEND_CONST_COND		164991	0					
ANR	165006	Identifier	ZEND_CONST_COND		164991	0					
ANR	165007	ArgumentList	value_type & ( IS_VAR | IS_CV )		164991	1					
ANR	165008	Argument	value_type & ( IS_VAR | IS_CV )		164991	0					
ANR	165009	BitAndExpression	value_type & ( IS_VAR | IS_CV )		164991	0		&			
ANR	165010	Identifier	value_type		164991	0					
ANR	165011	InclusiveOrExpression	IS_VAR | IS_CV		164991	1		|			
ANR	165012	Identifier	IS_VAR		164991	0					
ANR	165013	Identifier	IS_CV		164991	1					
ANR	165014	Argument	1		164991	1					
ANR	165015	PrimaryExpression	1		164991	0					
ANR	165016	CallExpression	Z_ISREF_P ( value )		164991	1					
ANR	165017	Callee	Z_ISREF_P		164991	0					
ANR	165018	Identifier	Z_ISREF_P		164991	0					
ANR	165019	ArgumentList	value		164991	1					
ANR	165020	Argument	value		164991	0					
ANR	165021	Identifier	value		164991	0					
ANR	165022	CompoundStatement		4:74:106:106	164991	1					
ANR	165023	ExpressionStatement	ref = Z_COUNTED_P ( value )	62:2:3537:3561	164991	0	True				
ANR	165024	AssignmentExpression	ref = Z_COUNTED_P ( value )		164991	0		=			
ANR	165025	Identifier	ref		164991	0					
ANR	165026	CallExpression	Z_COUNTED_P ( value )		164991	1					
ANR	165027	Callee	Z_COUNTED_P		164991	0					
ANR	165028	Identifier	Z_COUNTED_P		164991	0					
ANR	165029	ArgumentList	value		164991	1					
ANR	165030	Argument	value		164991	0					
ANR	165031	Identifier	value		164991	0					
ANR	165032	ExpressionStatement	value = Z_REFVAL_P ( value )	63:2:3565:3590	164991	1	True				
ANR	165033	AssignmentExpression	value = Z_REFVAL_P ( value )		164991	0		=			
ANR	165034	Identifier	value		164991	0					
ANR	165035	CallExpression	Z_REFVAL_P ( value )		164991	1					
ANR	165036	Callee	Z_REFVAL_P		164991	0					
ANR	165037	Identifier	Z_REFVAL_P		164991	0					
ANR	165038	ArgumentList	value		164991	1					
ANR	165039	Argument	value		164991	0					
ANR	165040	Identifier	value		164991	0					
ANR	165041	DoStatement	do		164991	2					
ANR	165042	CompoundStatement		9:4:173:173	164991	0					
ANR	165043	IfStatement	if ( UNEXPECTED ( Z_REFCOUNTED_P ( variable_ptr ) ) )		164991	0					
ANR	165044	Condition	UNEXPECTED ( Z_REFCOUNTED_P ( variable_ptr ) )	67:6:3608:3647	164991	0	True				
ANR	165045	CallExpression	UNEXPECTED ( Z_REFCOUNTED_P ( variable_ptr ) )		164991	0					
ANR	165046	Callee	UNEXPECTED		164991	0					
ANR	165047	Identifier	UNEXPECTED		164991	0					
ANR	165048	ArgumentList	Z_REFCOUNTED_P ( variable_ptr )		164991	1					
ANR	165049	Argument	Z_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165050	CallExpression	Z_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165051	Callee	Z_REFCOUNTED_P		164991	0					
ANR	165052	Identifier	Z_REFCOUNTED_P		164991	0					
ANR	165053	ArgumentList	variable_ptr		164991	1					
ANR	165054	Argument	variable_ptr		164991	0					
ANR	165055	Identifier	variable_ptr		164991	0					
ANR	165056	CompoundStatement		11:3:228:252	164991	1					
ANR	165057	IdentifierDeclStatement	zend_refcounted * garbage ;	68:3:3655:3679	164991	0	True				
ANR	165058	IdentifierDecl	* garbage		164991	0					
ANR	165059	IdentifierDeclType	zend_refcounted *		164991	0					
ANR	165060	Identifier	garbage		164991	1					
ANR	165061	IfStatement	if ( Z_ISREF_P ( variable_ptr ) )		164991	1					
ANR	165062	Condition	Z_ISREF_P ( variable_ptr )	70:7:3689:3711	164991	0	True				
ANR	165063	CallExpression	Z_ISREF_P ( variable_ptr )		164991	0					
ANR	165064	Callee	Z_ISREF_P		164991	0					
ANR	165065	Identifier	Z_ISREF_P		164991	0					
ANR	165066	ArgumentList	variable_ptr		164991	1					
ANR	165067	Argument	variable_ptr		164991	0					
ANR	165068	Identifier	variable_ptr		164991	0					
ANR	165069	CompoundStatement		13:32:287:287	164991	1					
ANR	165070	ExpressionStatement	variable_ptr = Z_REFVAL_P ( variable_ptr )	71:4:3720:3759	164991	0	True				
ANR	165071	AssignmentExpression	variable_ptr = Z_REFVAL_P ( variable_ptr )		164991	0		=			
ANR	165072	Identifier	variable_ptr		164991	0					
ANR	165073	CallExpression	Z_REFVAL_P ( variable_ptr )		164991	1					
ANR	165074	Callee	Z_REFVAL_P		164991	0					
ANR	165075	Identifier	Z_REFVAL_P		164991	0					
ANR	165076	ArgumentList	variable_ptr		164991	1					
ANR	165077	Argument	variable_ptr		164991	0					
ANR	165078	Identifier	variable_ptr		164991	0					
ANR	165079	IfStatement	if ( EXPECTED ( ! Z_REFCOUNTED_P ( variable_ptr ) ) )		164991	1					
ANR	165080	Condition	EXPECTED ( ! Z_REFCOUNTED_P ( variable_ptr ) )	72:8:3769:3807	164991	0	True				
ANR	165081	CallExpression	EXPECTED ( ! Z_REFCOUNTED_P ( variable_ptr ) )		164991	0					
ANR	165082	Callee	EXPECTED		164991	0					
ANR	165083	Identifier	EXPECTED		164991	0					
ANR	165084	ArgumentList	! Z_REFCOUNTED_P ( variable_ptr )		164991	1					
ANR	165085	Argument	! Z_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165086	UnaryOperationExpression	! Z_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165087	UnaryOperator	!		164991	0					
ANR	165088	CallExpression	Z_REFCOUNTED_P ( variable_ptr )		164991	1					
ANR	165089	Callee	Z_REFCOUNTED_P		164991	0					
ANR	165090	Identifier	Z_REFCOUNTED_P		164991	0					
ANR	165091	ArgumentList	variable_ptr		164991	1					
ANR	165092	Argument	variable_ptr		164991	0					
ANR	165093	Identifier	variable_ptr		164991	0					
ANR	165094	CompoundStatement		15:49:383:383	164991	1					
ANR	165095	BreakStatement	break ;	73:5:3817:3822	164991	0	True				
ANR	165096	IfStatement	"if ( Z_TYPE_P ( variable_ptr ) == IS_OBJECT && UNEXPECTED ( Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL ) )"		164991	2					
ANR	165097	Condition	"Z_TYPE_P ( variable_ptr ) == IS_OBJECT && UNEXPECTED ( Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL )"	76:7:3842:3941	164991	0	True				
ANR	165098	AndExpression	"Z_TYPE_P ( variable_ptr ) == IS_OBJECT && UNEXPECTED ( Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL )"		164991	0		&&			
ANR	165099	EqualityExpression	Z_TYPE_P ( variable_ptr ) == IS_OBJECT		164991	0		==			
ANR	165100	CallExpression	Z_TYPE_P ( variable_ptr )		164991	0					
ANR	165101	Callee	Z_TYPE_P		164991	0					
ANR	165102	Identifier	Z_TYPE_P		164991	0					
ANR	165103	ArgumentList	variable_ptr		164991	1					
ANR	165104	Argument	variable_ptr		164991	0					
ANR	165105	Identifier	variable_ptr		164991	0					
ANR	165106	Identifier	IS_OBJECT		164991	1					
ANR	165107	CallExpression	"UNEXPECTED ( Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL )"		164991	1					
ANR	165108	Callee	UNEXPECTED		164991	0					
ANR	165109	Identifier	UNEXPECTED		164991	0					
ANR	165110	ArgumentList	"Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL"		164991	1					
ANR	165111	Argument	"Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL"		164991	0					
ANR	165112	EqualityExpression	"Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL"		164991	0		!=			
ANR	165113	CallExpression	"Z_OBJ_HANDLER_P ( variable_ptr , set )"		164991	0					
ANR	165114	Callee	Z_OBJ_HANDLER_P		164991	0					
ANR	165115	Identifier	Z_OBJ_HANDLER_P		164991	0					
ANR	165116	ArgumentList	variable_ptr		164991	1					
ANR	165117	Argument	variable_ptr		164991	0					
ANR	165118	Identifier	variable_ptr		164991	0					
ANR	165119	Argument	set		164991	1					
ANR	165120	Identifier	set		164991	0					
ANR	165121	Identifier	NULL		164991	1					
ANR	165122	CompoundStatement		20:63:517:517	164991	1					
ANR	165123	ExpressionStatement	"Z_OBJ_HANDLER_P ( variable_ptr , set ) ( variable_ptr , value )"	78:4:3950:4005	164991	0	True				
ANR	165124	CallExpression	"Z_OBJ_HANDLER_P ( variable_ptr , set ) ( variable_ptr , value )"		164991	0					
ANR	165125	Callee	"Z_OBJ_HANDLER_P ( variable_ptr , set )"		164991	0					
ANR	165126	CallExpression	"Z_OBJ_HANDLER_P ( variable_ptr , set )"		164991	0					
ANR	165127	Callee	Z_OBJ_HANDLER_P		164991	0					
ANR	165128	Identifier	Z_OBJ_HANDLER_P		164991	0					
ANR	165129	ArgumentList	variable_ptr		164991	1					
ANR	165130	Argument	variable_ptr		164991	0					
ANR	165131	Identifier	variable_ptr		164991	0					
ANR	165132	Argument	set		164991	1					
ANR	165133	Identifier	set		164991	0					
ANR	165134	ArgumentList	variable_ptr		164991	1					
ANR	165135	Argument	variable_ptr		164991	0					
ANR	165136	Identifier	variable_ptr		164991	0					
ANR	165137	Argument	value		164991	1					
ANR	165138	Identifier	value		164991	0					
ANR	165139	ReturnStatement	return variable_ptr ;	79:4:4011:4030	164991	1	True				
ANR	165140	Identifier	variable_ptr		164991	0					
ANR	165141	IfStatement	"if ( ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && variable_ptr == value )"		164991	3					
ANR	165142	Condition	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && variable_ptr == value"	81:7:4044:4115	164991	0	True				
ANR	165143	AndExpression	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && variable_ptr == value"		164991	0		&&			
ANR	165144	CallExpression	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 )"		164991	0					
ANR	165145	Callee	ZEND_CONST_COND		164991	0					
ANR	165146	Identifier	ZEND_CONST_COND		164991	0					
ANR	165147	ArgumentList	value_type & ( IS_VAR | IS_CV )		164991	1					
ANR	165148	Argument	value_type & ( IS_VAR | IS_CV )		164991	0					
ANR	165149	BitAndExpression	value_type & ( IS_VAR | IS_CV )		164991	0		&			
ANR	165150	Identifier	value_type		164991	0					
ANR	165151	InclusiveOrExpression	IS_VAR | IS_CV		164991	1		|			
ANR	165152	Identifier	IS_VAR		164991	0					
ANR	165153	Identifier	IS_CV		164991	1					
ANR	165154	Argument	1		164991	1					
ANR	165155	PrimaryExpression	1		164991	0					
ANR	165156	EqualityExpression	variable_ptr == value		164991	1		==			
ANR	165157	Identifier	variable_ptr		164991	0					
ANR	165158	Identifier	value		164991	1					
ANR	165159	CompoundStatement		24:81:691:691	164991	1					
ANR	165160	ReturnStatement	return variable_ptr ;	82:4:4124:4143	164991	0	True				
ANR	165161	Identifier	variable_ptr		164991	0					
ANR	165162	ExpressionStatement	garbage = Z_COUNTED_P ( variable_ptr )	84:3:4153:4188	164991	4	True				
ANR	165163	AssignmentExpression	garbage = Z_COUNTED_P ( variable_ptr )		164991	0		=			
ANR	165164	Identifier	garbage		164991	0					
ANR	165165	CallExpression	Z_COUNTED_P ( variable_ptr )		164991	1					
ANR	165166	Callee	Z_COUNTED_P		164991	0					
ANR	165167	Identifier	Z_COUNTED_P		164991	0					
ANR	165168	ArgumentList	variable_ptr		164991	1					
ANR	165169	Argument	variable_ptr		164991	0					
ANR	165170	Identifier	variable_ptr		164991	0					
ANR	165171	IfStatement	if ( -- GC_REFCOUNT ( garbage ) == 0 )		164991	5					
ANR	165172	Condition	-- GC_REFCOUNT ( garbage ) == 0	85:7:4197:4223	164991	0	True				
ANR	165173	EqualityExpression	-- GC_REFCOUNT ( garbage ) == 0		164991	0		==			
ANR	165174	UnaryExpression	-- GC_REFCOUNT ( garbage )		164991	0					
ANR	165175	IncDec	--		164991	0					
ANR	165176	CallExpression	GC_REFCOUNT ( garbage )		164991	1					
ANR	165177	Callee	GC_REFCOUNT		164991	0					
ANR	165178	Identifier	GC_REFCOUNT		164991	0					
ANR	165179	ArgumentList	garbage		164991	1					
ANR	165180	Argument	garbage		164991	0					
ANR	165181	Identifier	garbage		164991	0					
ANR	165182	PrimaryExpression	0		164991	1					
ANR	165183	CompoundStatement		28:36:799:799	164991	1					
ANR	165184	ExpressionStatement	"ZVAL_COPY_VALUE ( variable_ptr , value )"	86:4:4232:4268	164991	0	True				
ANR	165185	CallExpression	"ZVAL_COPY_VALUE ( variable_ptr , value )"		164991	0					
ANR	165186	Callee	ZVAL_COPY_VALUE		164991	0					
ANR	165187	Identifier	ZVAL_COPY_VALUE		164991	0					
ANR	165188	ArgumentList	variable_ptr		164991	1					
ANR	165189	Argument	variable_ptr		164991	0					
ANR	165190	Identifier	variable_ptr		164991	0					
ANR	165191	Argument	value		164991	1					
ANR	165192	Identifier	value		164991	0					
ANR	165193	IfStatement	if ( value_type == IS_CONST )		164991	1					
ANR	165194	Condition	value_type == IS_CONST	87:8:4278:4299	164991	0	True				
ANR	165195	EqualityExpression	value_type == IS_CONST		164991	0		==			
ANR	165196	Identifier	value_type		164991	0					
ANR	165197	Identifier	IS_CONST		164991	1					
ANR	165198	CompoundStatement		30:32:875:875	164991	1					
ANR	165199	IfStatement	if ( UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) ) )		164991	0					
ANR	165200	Condition	UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) )	89:9:4381:4422	164991	0	True				
ANR	165201	CallExpression	UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) )		164991	0					
ANR	165202	Callee	UNEXPECTED		164991	0					
ANR	165203	Identifier	UNEXPECTED		164991	0					
ANR	165204	ArgumentList	Z_OPT_COPYABLE_P ( variable_ptr )		164991	1					
ANR	165205	Argument	Z_OPT_COPYABLE_P ( variable_ptr )		164991	0					
ANR	165206	CallExpression	Z_OPT_COPYABLE_P ( variable_ptr )		164991	0					
ANR	165207	Callee	Z_OPT_COPYABLE_P		164991	0					
ANR	165208	Identifier	Z_OPT_COPYABLE_P		164991	0					
ANR	165209	ArgumentList	variable_ptr		164991	1					
ANR	165210	Argument	variable_ptr		164991	0					
ANR	165211	Identifier	variable_ptr		164991	0					
ANR	165212	CompoundStatement		32:53:998:998	164991	1					
ANR	165213	ExpressionStatement	zval_copy_ctor_func ( variable_ptr )	90:6:4433:4466	164991	0	True				
ANR	165214	CallExpression	zval_copy_ctor_func ( variable_ptr )		164991	0					
ANR	165215	Callee	zval_copy_ctor_func		164991	0					
ANR	165216	Identifier	zval_copy_ctor_func		164991	0					
ANR	165217	ArgumentList	variable_ptr		164991	1					
ANR	165218	Argument	variable_ptr		164991	0					
ANR	165219	Identifier	variable_ptr		164991	0					
ANR	165220	ElseStatement	else		164991	0					
ANR	165221	IfStatement	if ( value_type == IS_CV )		164991	0					
ANR	165222	Condition	value_type == IS_CV	92:15:4490:4508	164991	0	True				
ANR	165223	EqualityExpression	value_type == IS_CV		164991	0		==			
ANR	165224	Identifier	value_type		164991	0					
ANR	165225	Identifier	IS_CV		164991	1					
ANR	165226	CompoundStatement		35:36:1084:1084	164991	1					
ANR	165227	IfStatement	if ( UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) ) )		164991	0					
ANR	165228	Condition	UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )	93:9:4522:4565	164991	0	True				
ANR	165229	CallExpression	UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )		164991	0					
ANR	165230	Callee	UNEXPECTED		164991	0					
ANR	165231	Identifier	UNEXPECTED		164991	0					
ANR	165232	ArgumentList	Z_OPT_REFCOUNTED_P ( variable_ptr )		164991	1					
ANR	165233	Argument	Z_OPT_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165234	CallExpression	Z_OPT_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165235	Callee	Z_OPT_REFCOUNTED_P		164991	0					
ANR	165236	Identifier	Z_OPT_REFCOUNTED_P		164991	0					
ANR	165237	ArgumentList	variable_ptr		164991	1					
ANR	165238	Argument	variable_ptr		164991	0					
ANR	165239	Identifier	variable_ptr		164991	0					
ANR	165240	CompoundStatement		36:55:1141:1141	164991	1					
ANR	165241	ExpressionStatement	Z_ADDREF_P ( variable_ptr )	94:6:4576:4600	164991	0	True				
ANR	165242	CallExpression	Z_ADDREF_P ( variable_ptr )		164991	0					
ANR	165243	Callee	Z_ADDREF_P		164991	0					
ANR	165244	Identifier	Z_ADDREF_P		164991	0					
ANR	165245	ArgumentList	variable_ptr		164991	1					
ANR	165246	Argument	variable_ptr		164991	0					
ANR	165247	Identifier	variable_ptr		164991	0					
ANR	165248	ElseStatement	else		164991	0					
ANR	165249	IfStatement	"if ( ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref ) )"		164991	0					
ANR	165250	Condition	"ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref )"	96:15:4624:4682	164991	0	True				
ANR	165251	AndExpression	"ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref )"		164991	0		&&			
ANR	165252	CallExpression	"ZEND_CONST_COND ( value_type == IS_VAR , 1 )"		164991	0					
ANR	165253	Callee	ZEND_CONST_COND		164991	0					
ANR	165254	Identifier	ZEND_CONST_COND		164991	0					
ANR	165255	ArgumentList	value_type == IS_VAR		164991	1					
ANR	165256	Argument	value_type == IS_VAR		164991	0					
ANR	165257	EqualityExpression	value_type == IS_VAR		164991	0		==			
ANR	165258	Identifier	value_type		164991	0					
ANR	165259	Identifier	IS_VAR		164991	1					
ANR	165260	Argument	1		164991	1					
ANR	165261	PrimaryExpression	1		164991	0					
ANR	165262	CallExpression	UNEXPECTED ( ref )		164991	1					
ANR	165263	Callee	UNEXPECTED		164991	0					
ANR	165264	Identifier	UNEXPECTED		164991	0					
ANR	165265	ArgumentList	ref		164991	1					
ANR	165266	Argument	ref		164991	0					
ANR	165267	Identifier	ref		164991	0					
ANR	165268	CompoundStatement		39:76:1258:1258	164991	1					
ANR	165269	IfStatement	if ( UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 ) )		164991	0					
ANR	165270	Condition	UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 )	97:9:4696:4730	164991	0	True				
ANR	165271	CallExpression	UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 )		164991	0					
ANR	165272	Callee	UNEXPECTED		164991	0					
ANR	165273	Identifier	UNEXPECTED		164991	0					
ANR	165274	ArgumentList	-- GC_REFCOUNT ( ref ) == 0		164991	1					
ANR	165275	Argument	-- GC_REFCOUNT ( ref ) == 0		164991	0					
ANR	165276	EqualityExpression	-- GC_REFCOUNT ( ref ) == 0		164991	0		==			
ANR	165277	UnaryExpression	-- GC_REFCOUNT ( ref )		164991	0					
ANR	165278	IncDec	--		164991	0					
ANR	165279	CallExpression	GC_REFCOUNT ( ref )		164991	1					
ANR	165280	Callee	GC_REFCOUNT		164991	0					
ANR	165281	Identifier	GC_REFCOUNT		164991	0					
ANR	165282	ArgumentList	ref		164991	1					
ANR	165283	Argument	ref		164991	0					
ANR	165284	Identifier	ref		164991	0					
ANR	165285	PrimaryExpression	0		164991	1					
ANR	165286	CompoundStatement		40:46:1306:1306	164991	1					
ANR	165287	ExpressionStatement	"efree_size ( ref , sizeof ( zend_reference ) )"	98:6:4741:4780	164991	0	True				
ANR	165288	CallExpression	"efree_size ( ref , sizeof ( zend_reference ) )"		164991	0					
ANR	165289	Callee	efree_size		164991	0					
ANR	165290	Identifier	efree_size		164991	0					
ANR	165291	ArgumentList	ref		164991	1					
ANR	165292	Argument	ref		164991	0					
ANR	165293	Identifier	ref		164991	0					
ANR	165294	Argument	sizeof ( zend_reference )		164991	1					
ANR	165295	SizeofExpression	sizeof ( zend_reference )		164991	0					
ANR	165296	Sizeof	sizeof		164991	0					
ANR	165297	SizeofOperand	zend_reference		164991	1					
ANR	165298	ElseStatement	else		164991	0					
ANR	165299	IfStatement	if ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )		164991	0					
ANR	165300	Condition	Z_OPT_REFCOUNTED_P ( variable_ptr )	99:16:4798:4829	164991	0	True				
ANR	165301	CallExpression	Z_OPT_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165302	Callee	Z_OPT_REFCOUNTED_P		164991	0					
ANR	165303	Identifier	Z_OPT_REFCOUNTED_P		164991	0					
ANR	165304	ArgumentList	variable_ptr		164991	1					
ANR	165305	Argument	variable_ptr		164991	0					
ANR	165306	Identifier	variable_ptr		164991	0					
ANR	165307	CompoundStatement		42:50:1405:1405	164991	1					
ANR	165308	ExpressionStatement	Z_ADDREF_P ( variable_ptr )	100:6:4840:4864	164991	0	True				
ANR	165309	CallExpression	Z_ADDREF_P ( variable_ptr )		164991	0					
ANR	165310	Callee	Z_ADDREF_P		164991	0					
ANR	165311	Identifier	Z_ADDREF_P		164991	0					
ANR	165312	ArgumentList	variable_ptr		164991	1					
ANR	165313	Argument	variable_ptr		164991	0					
ANR	165314	Identifier	variable_ptr		164991	0					
ANR	165315	ExpressionStatement	zval_dtor_func_for_ptr ( garbage )	103:4:4883:4914	164991	2	True				
ANR	165316	CallExpression	zval_dtor_func_for_ptr ( garbage )		164991	0					
ANR	165317	Callee	zval_dtor_func_for_ptr		164991	0					
ANR	165318	Identifier	zval_dtor_func_for_ptr		164991	0					
ANR	165319	ArgumentList	garbage		164991	1					
ANR	165320	Argument	garbage		164991	0					
ANR	165321	Identifier	garbage		164991	0					
ANR	165322	ReturnStatement	return variable_ptr ;	104:4:4920:4939	164991	3	True				
ANR	165323	Identifier	variable_ptr		164991	0					
ANR	165324	ElseStatement	else		164991	0					
ANR	165325	CompoundStatement		48:10:1524:1524	164991	0					
ANR	165326	IfStatement	if ( ( Z_COLLECTABLE_P ( variable_ptr ) ) && UNEXPECTED ( ! GC_INFO ( garbage ) ) )		164991	0					
ANR	165327	Condition	( Z_COLLECTABLE_P ( variable_ptr ) ) && UNEXPECTED ( ! GC_INFO ( garbage ) )	107:8:5057:5128	164991	0	True				
ANR	165328	AndExpression	( Z_COLLECTABLE_P ( variable_ptr ) ) && UNEXPECTED ( ! GC_INFO ( garbage ) )		164991	0		&&			
ANR	165329	CallExpression	Z_COLLECTABLE_P ( variable_ptr )		164991	0					
ANR	165330	Callee	Z_COLLECTABLE_P		164991	0					
ANR	165331	Identifier	Z_COLLECTABLE_P		164991	0					
ANR	165332	ArgumentList	variable_ptr		164991	1					
ANR	165333	Argument	variable_ptr		164991	0					
ANR	165334	Identifier	variable_ptr		164991	0					
ANR	165335	CallExpression	UNEXPECTED ( ! GC_INFO ( garbage ) )		164991	1					
ANR	165336	Callee	UNEXPECTED		164991	0					
ANR	165337	Identifier	UNEXPECTED		164991	0					
ANR	165338	ArgumentList	! GC_INFO ( garbage )		164991	1					
ANR	165339	Argument	! GC_INFO ( garbage )		164991	0					
ANR	165340	UnaryOperationExpression	! GC_INFO ( garbage )		164991	0					
ANR	165341	UnaryOperator	!		164991	0					
ANR	165342	CallExpression	GC_INFO ( garbage )		164991	1					
ANR	165343	Callee	GC_INFO		164991	0					
ANR	165344	Identifier	GC_INFO		164991	0					
ANR	165345	ArgumentList	garbage		164991	1					
ANR	165346	Argument	garbage		164991	0					
ANR	165347	Identifier	garbage		164991	0					
ANR	165348	CompoundStatement		51:39:1704:1704	164991	1					
ANR	165349	ExpressionStatement	gc_possible_root ( garbage )	109:5:5138:5163	164991	0	True				
ANR	165350	CallExpression	gc_possible_root ( garbage )		164991	0					
ANR	165351	Callee	gc_possible_root		164991	0					
ANR	165352	Identifier	gc_possible_root		164991	0					
ANR	165353	ArgumentList	garbage		164991	1					
ANR	165354	Argument	garbage		164991	0					
ANR	165355	Identifier	garbage		164991	0					
ANR	165356	Condition	0	113:10:5190:5190	164991	1	True				
ANR	165357	PrimaryExpression	0		164991	0					
ANR	165358	ExpressionStatement	"ZVAL_COPY_VALUE ( variable_ptr , value )"	115:1:5196:5232	164991	3	True				
ANR	165359	CallExpression	"ZVAL_COPY_VALUE ( variable_ptr , value )"		164991	0					
ANR	165360	Callee	ZVAL_COPY_VALUE		164991	0					
ANR	165361	Identifier	ZVAL_COPY_VALUE		164991	0					
ANR	165362	ArgumentList	variable_ptr		164991	1					
ANR	165363	Argument	variable_ptr		164991	0					
ANR	165364	Identifier	variable_ptr		164991	0					
ANR	165365	Argument	value		164991	1					
ANR	165366	Identifier	value		164991	0					
ANR	165367	IfStatement	if ( value_type == IS_CONST )		164991	4					
ANR	165368	Condition	value_type == IS_CONST	116:5:5239:5260	164991	0	True				
ANR	165369	EqualityExpression	value_type == IS_CONST		164991	0		==			
ANR	165370	Identifier	value_type		164991	0					
ANR	165371	Identifier	IS_CONST		164991	1					
ANR	165372	CompoundStatement		59:29:1836:1836	164991	1					
ANR	165373	IfStatement	if ( UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) ) )		164991	0					
ANR	165374	Condition	UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) )	118:6:5336:5377	164991	0	True				
ANR	165375	CallExpression	UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) )		164991	0					
ANR	165376	Callee	UNEXPECTED		164991	0					
ANR	165377	Identifier	UNEXPECTED		164991	0					
ANR	165378	ArgumentList	Z_OPT_COPYABLE_P ( variable_ptr )		164991	1					
ANR	165379	Argument	Z_OPT_COPYABLE_P ( variable_ptr )		164991	0					
ANR	165380	CallExpression	Z_OPT_COPYABLE_P ( variable_ptr )		164991	0					
ANR	165381	Callee	Z_OPT_COPYABLE_P		164991	0					
ANR	165382	Identifier	Z_OPT_COPYABLE_P		164991	0					
ANR	165383	ArgumentList	variable_ptr		164991	1					
ANR	165384	Argument	variable_ptr		164991	0					
ANR	165385	Identifier	variable_ptr		164991	0					
ANR	165386	CompoundStatement		61:50:1953:1953	164991	1					
ANR	165387	ExpressionStatement	zval_copy_ctor_func ( variable_ptr )	119:3:5385:5418	164991	0	True				
ANR	165388	CallExpression	zval_copy_ctor_func ( variable_ptr )		164991	0					
ANR	165389	Callee	zval_copy_ctor_func		164991	0					
ANR	165390	Identifier	zval_copy_ctor_func		164991	0					
ANR	165391	ArgumentList	variable_ptr		164991	1					
ANR	165392	Argument	variable_ptr		164991	0					
ANR	165393	Identifier	variable_ptr		164991	0					
ANR	165394	ElseStatement	else		164991	0					
ANR	165395	IfStatement	if ( value_type == IS_CV )		164991	0					
ANR	165396	Condition	value_type == IS_CV	121:12:5436:5454	164991	0	True				
ANR	165397	EqualityExpression	value_type == IS_CV		164991	0		==			
ANR	165398	Identifier	value_type		164991	0					
ANR	165399	Identifier	IS_CV		164991	1					
ANR	165400	CompoundStatement		64:33:2030:2030	164991	1					
ANR	165401	IfStatement	if ( UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) ) )		164991	0					
ANR	165402	Condition	UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )	122:6:5465:5508	164991	0	True				
ANR	165403	CallExpression	UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )		164991	0					
ANR	165404	Callee	UNEXPECTED		164991	0					
ANR	165405	Identifier	UNEXPECTED		164991	0					
ANR	165406	ArgumentList	Z_OPT_REFCOUNTED_P ( variable_ptr )		164991	1					
ANR	165407	Argument	Z_OPT_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165408	CallExpression	Z_OPT_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165409	Callee	Z_OPT_REFCOUNTED_P		164991	0					
ANR	165410	Identifier	Z_OPT_REFCOUNTED_P		164991	0					
ANR	165411	ArgumentList	variable_ptr		164991	1					
ANR	165412	Argument	variable_ptr		164991	0					
ANR	165413	Identifier	variable_ptr		164991	0					
ANR	165414	CompoundStatement		65:52:2084:2084	164991	1					
ANR	165415	ExpressionStatement	Z_ADDREF_P ( variable_ptr )	123:3:5516:5540	164991	0	True				
ANR	165416	CallExpression	Z_ADDREF_P ( variable_ptr )		164991	0					
ANR	165417	Callee	Z_ADDREF_P		164991	0					
ANR	165418	Identifier	Z_ADDREF_P		164991	0					
ANR	165419	ArgumentList	variable_ptr		164991	1					
ANR	165420	Argument	variable_ptr		164991	0					
ANR	165421	Identifier	variable_ptr		164991	0					
ANR	165422	ElseStatement	else		164991	0					
ANR	165423	IfStatement	"if ( ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref ) )"		164991	0					
ANR	165424	Condition	"ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref )"	125:12:5558:5616	164991	0	True				
ANR	165425	AndExpression	"ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref )"		164991	0		&&			
ANR	165426	CallExpression	"ZEND_CONST_COND ( value_type == IS_VAR , 1 )"		164991	0					
ANR	165427	Callee	ZEND_CONST_COND		164991	0					
ANR	165428	Identifier	ZEND_CONST_COND		164991	0					
ANR	165429	ArgumentList	value_type == IS_VAR		164991	1					
ANR	165430	Argument	value_type == IS_VAR		164991	0					
ANR	165431	EqualityExpression	value_type == IS_VAR		164991	0		==			
ANR	165432	Identifier	value_type		164991	0					
ANR	165433	Identifier	IS_VAR		164991	1					
ANR	165434	Argument	1		164991	1					
ANR	165435	PrimaryExpression	1		164991	0					
ANR	165436	CallExpression	UNEXPECTED ( ref )		164991	1					
ANR	165437	Callee	UNEXPECTED		164991	0					
ANR	165438	Identifier	UNEXPECTED		164991	0					
ANR	165439	ArgumentList	ref		164991	1					
ANR	165440	Argument	ref		164991	0					
ANR	165441	Identifier	ref		164991	0					
ANR	165442	CompoundStatement		68:73:2192:2192	164991	1					
ANR	165443	IfStatement	if ( UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 ) )		164991	0					
ANR	165444	Condition	UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 )	126:6:5627:5661	164991	0	True				
ANR	165445	CallExpression	UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 )		164991	0					
ANR	165446	Callee	UNEXPECTED		164991	0					
ANR	165447	Identifier	UNEXPECTED		164991	0					
ANR	165448	ArgumentList	-- GC_REFCOUNT ( ref ) == 0		164991	1					
ANR	165449	Argument	-- GC_REFCOUNT ( ref ) == 0		164991	0					
ANR	165450	EqualityExpression	-- GC_REFCOUNT ( ref ) == 0		164991	0		==			
ANR	165451	UnaryExpression	-- GC_REFCOUNT ( ref )		164991	0					
ANR	165452	IncDec	--		164991	0					
ANR	165453	CallExpression	GC_REFCOUNT ( ref )		164991	1					
ANR	165454	Callee	GC_REFCOUNT		164991	0					
ANR	165455	Identifier	GC_REFCOUNT		164991	0					
ANR	165456	ArgumentList	ref		164991	1					
ANR	165457	Argument	ref		164991	0					
ANR	165458	Identifier	ref		164991	0					
ANR	165459	PrimaryExpression	0		164991	1					
ANR	165460	CompoundStatement		69:43:2237:2237	164991	1					
ANR	165461	ExpressionStatement	"efree_size ( ref , sizeof ( zend_reference ) )"	127:3:5669:5708	164991	0	True				
ANR	165462	CallExpression	"efree_size ( ref , sizeof ( zend_reference ) )"		164991	0					
ANR	165463	Callee	efree_size		164991	0					
ANR	165464	Identifier	efree_size		164991	0					
ANR	165465	ArgumentList	ref		164991	1					
ANR	165466	Argument	ref		164991	0					
ANR	165467	Identifier	ref		164991	0					
ANR	165468	Argument	sizeof ( zend_reference )		164991	1					
ANR	165469	SizeofExpression	sizeof ( zend_reference )		164991	0					
ANR	165470	Sizeof	sizeof		164991	0					
ANR	165471	SizeofOperand	zend_reference		164991	1					
ANR	165472	ElseStatement	else		164991	0					
ANR	165473	IfStatement	if ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )		164991	0					
ANR	165474	Condition	Z_OPT_REFCOUNTED_P ( variable_ptr )	128:13:5723:5754	164991	0	True				
ANR	165475	CallExpression	Z_OPT_REFCOUNTED_P ( variable_ptr )		164991	0					
ANR	165476	Callee	Z_OPT_REFCOUNTED_P		164991	0					
ANR	165477	Identifier	Z_OPT_REFCOUNTED_P		164991	0					
ANR	165478	ArgumentList	variable_ptr		164991	1					
ANR	165479	Argument	variable_ptr		164991	0					
ANR	165480	Identifier	variable_ptr		164991	0					
ANR	165481	CompoundStatement		71:47:2330:2330	164991	1					
ANR	165482	ExpressionStatement	Z_ADDREF_P ( variable_ptr )	129:3:5762:5786	164991	0	True				
ANR	165483	CallExpression	Z_ADDREF_P ( variable_ptr )		164991	0					
ANR	165484	Callee	Z_ADDREF_P		164991	0					
ANR	165485	Identifier	Z_ADDREF_P		164991	0					
ANR	165486	ArgumentList	variable_ptr		164991	1					
ANR	165487	Argument	variable_ptr		164991	0					
ANR	165488	Identifier	variable_ptr		164991	0					
ANR	165489	ReturnStatement	return variable_ptr ;	132:1:5796:5815	164991	5	True				
ANR	165490	Identifier	variable_ptr		164991	0					
ANR	165491	ReturnType	static zend_always_inline zval *		164991	1					
ANR	165492	Identifier	zend_assign_to_variable		164991	2					
ANR	165493	ParameterList	"zval * variable_ptr , zval * value , zend_uchar value_type"		164991	3					
ANR	165494	Parameter	zval * variable_ptr	57:56:3370:3387	164991	0	True				
ANR	165495	ParameterType	zval *		164991	0					
ANR	165496	Identifier	variable_ptr		164991	1					
ANR	165497	Parameter	zval * value	57:76:3390:3400	164991	1	True				
ANR	165498	ParameterType	zval *		164991	0					
ANR	165499	Identifier	value		164991	1					
ANR	165500	Parameter	zend_uchar value_type	57:89:3403:3423	164991	2	True				
ANR	165501	ParameterType	zend_uchar		164991	0					
ANR	165502	Identifier	value_type		164991	1					
ANR	165503	CFGEntryNode	ENTRY		164991		True				
ANR	165504	CFGExitNode	EXIT		164991		True				
ANR	165505	Symbol	value_type		164991						
ANR	165506	Symbol	IS_CV		164991						
ANR	165507	Symbol	Z_COLLECTABLE_P		164991						
ANR	165508	Symbol	UNEXPECTED		164991						
ANR	165509	Symbol	ref		164991						
ANR	165510	Symbol	ZEND_CONST_COND		164991						
ANR	165511	Symbol	Z_OBJ_HANDLER_P		164991						
ANR	165512	Symbol	value		164991						
ANR	165513	Symbol	GC_REFCOUNT		164991						
ANR	165514	Symbol	Z_OPT_COPYABLE_P		164991						
ANR	165515	Symbol	IS_CONST		164991						
ANR	165516	Symbol	NULL		164991						
ANR	165517	Symbol	Z_COUNTED_P		164991						
ANR	165518	Symbol	set		164991						
ANR	165519	Symbol	Z_OPT_REFCOUNTED_P		164991						
ANR	165520	Symbol	variable_ptr		164991						
ANR	165521	Symbol	garbage		164991						
ANR	165522	Symbol	Z_TYPE_P		164991						
ANR	165523	Symbol	Z_REFVAL_P		164991						
ANR	165524	Symbol	Z_REFCOUNTED_P		164991						
ANR	165525	Symbol	IS_OBJECT		164991						
ANR	165526	Symbol	IS_VAR		164991						
ANR	165527	Symbol	EXPECTED		164991						
ANR	165528	Symbol	GC_INFO		164991						
ANR	165529	Symbol	Z_ISREF_P		164991						
ANR	165530	DeclStmt									
ANR	165531	Decl							ZEND_API int	"ZEND_API int ( zval * pp , zend_bool inline_change )"	zval_update_constant
ANR	165532	DeclStmt									
ANR	165533	Decl							ZEND_API int	"ZEND_API int ( zval * pp , zend_bool inline_change , zend_class_entry * scope )"	zval_update_constant_ex
ANR	165534	ClassDef	_zend_vm_stack	139:0:6043:6112							
ANR	165535	DeclStmt									
ANR	165536	Decl							zval	zval *	top
ANR	165537	DeclStmt									
ANR	165538	Decl							zval	zval *	end
ANR	165539	DeclStmt									
ANR	165540	Decl							zend_vm_stack	zend_vm_stack	prev
ANR	165541	DeclStmt									
ANR	165542	Decl							ZEND_API void	ZEND_API void ( void )	zend_vm_stack_init
ANR	165543	DeclStmt									
ANR	165544	Decl							ZEND_API void	ZEND_API void ( void )	zend_vm_stack_destroy
ANR	165545	DeclStmt									
ANR	165546	Decl							ZEND_API void	ZEND_API void * ( size_t size )	zend_vm_stack_extend
ANR	165547	Function	zend_vm_stack_push_call_frame_ex	170:0:7277:8072							
ANR	165548	FunctionDef	"zend_vm_stack_push_call_frame_ex (uint32_t used_stack , uint32_t call_info , zend_function * func , uint32_t num_args , zend_class_entry * called_scope , zend_object * object)"		165547	0					
ANR	165549	CompoundStatement		171:0:7489:8072	165547	0					
ANR	165550	IdentifierDeclStatement	zend_execute_data * call = ( zend_execute_data * ) EG ( vm_stack_top ) ;	172:1:7492:7554	165547	0	True				
ANR	165551	IdentifierDecl	* call = ( zend_execute_data * ) EG ( vm_stack_top )		165547	0					
ANR	165552	IdentifierDeclType	zend_execute_data *		165547	0					
ANR	165553	Identifier	call		165547	1					
ANR	165554	AssignmentExpression	* call = ( zend_execute_data * ) EG ( vm_stack_top )		165547	2		=			
ANR	165555	Identifier	call		165547	0					
ANR	165556	CastExpression	( zend_execute_data * ) EG ( vm_stack_top )		165547	1					
ANR	165557	CastTarget	zend_execute_data *		165547	0					
ANR	165558	CallExpression	EG ( vm_stack_top )		165547	1					
ANR	165559	Callee	EG		165547	0					
ANR	165560	Identifier	EG		165547	0					
ANR	165561	ArgumentList	vm_stack_top		165547	1					
ANR	165562	Argument	vm_stack_top		165547	0					
ANR	165563	Identifier	vm_stack_top		165547	0					
ANR	165564	ExpressionStatement	ZEND_ASSERT_VM_STACK_GLOBAL	174:1:7558:7585	165547	1	True				
ANR	165565	Identifier	ZEND_ASSERT_VM_STACK_GLOBAL		165547	0					
ANR	165566	IfStatement	if ( UNEXPECTED ( used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call ) ) )		165547	2					
ANR	165567	Condition	UNEXPECTED ( used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call ) )	176:5:7593:7666	165547	0	True				
ANR	165568	CallExpression	UNEXPECTED ( used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call ) )		165547	0					
ANR	165569	Callee	UNEXPECTED		165547	0					
ANR	165570	Identifier	UNEXPECTED		165547	0					
ANR	165571	ArgumentList	used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call )		165547	1					
ANR	165572	Argument	used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call )		165547	0					
ANR	165573	RelationalExpression	used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call )		165547	0		>			
ANR	165574	Identifier	used_stack		165547	0					
ANR	165575	CastExpression	( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call )		165547	1					
ANR	165576	CastTarget	size_t		165547	0					
ANR	165577	AdditiveExpression	( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call		165547	1		-			
ANR	165578	CastExpression	( char * ) EG ( vm_stack_end )		165547	0					
ANR	165579	CastTarget	char *		165547	0					
ANR	165580	CallExpression	EG ( vm_stack_end )		165547	1					
ANR	165581	Callee	EG		165547	0					
ANR	165582	Identifier	EG		165547	0					
ANR	165583	ArgumentList	vm_stack_end		165547	1					
ANR	165584	Argument	vm_stack_end		165547	0					
ANR	165585	Identifier	vm_stack_end		165547	0					
ANR	165586	CastExpression	( char * ) call		165547	1					
ANR	165587	CastTarget	char *		165547	0					
ANR	165588	Identifier	call		165547	1					
ANR	165589	CompoundStatement		6:81:179:179	165547	1					
ANR	165590	ExpressionStatement	call = ( zend_execute_data * ) zend_vm_stack_extend ( used_stack )	177:2:7673:7732	165547	0	True				
ANR	165591	AssignmentExpression	call = ( zend_execute_data * ) zend_vm_stack_extend ( used_stack )		165547	0		=			
ANR	165592	Identifier	call		165547	0					
ANR	165593	CastExpression	( zend_execute_data * ) zend_vm_stack_extend ( used_stack )		165547	1					
ANR	165594	CastTarget	zend_execute_data *		165547	0					
ANR	165595	CallExpression	zend_vm_stack_extend ( used_stack )		165547	1					
ANR	165596	Callee	zend_vm_stack_extend		165547	0					
ANR	165597	Identifier	zend_vm_stack_extend		165547	0					
ANR	165598	ArgumentList	used_stack		165547	1					
ANR	165599	Argument	used_stack		165547	0					
ANR	165600	Identifier	used_stack		165547	0					
ANR	165601	ExpressionStatement	"ZEND_SET_CALL_INFO ( call , call_info | ZEND_CALL_ALLOCATED )"	178:2:7736:7793	165547	1	True				
ANR	165602	CallExpression	"ZEND_SET_CALL_INFO ( call , call_info | ZEND_CALL_ALLOCATED )"		165547	0					
ANR	165603	Callee	ZEND_SET_CALL_INFO		165547	0					
ANR	165604	Identifier	ZEND_SET_CALL_INFO		165547	0					
ANR	165605	ArgumentList	call		165547	1					
ANR	165606	Argument	call		165547	0					
ANR	165607	Identifier	call		165547	0					
ANR	165608	Argument	call_info | ZEND_CALL_ALLOCATED		165547	1					
ANR	165609	InclusiveOrExpression	call_info | ZEND_CALL_ALLOCATED		165547	0		|			
ANR	165610	Identifier	call_info		165547	0					
ANR	165611	Identifier	ZEND_CALL_ALLOCATED		165547	1					
ANR	165612	ElseStatement	else		165547	0					
ANR	165613	CompoundStatement		9:8:313:313	165547	0					
ANR	165614	ExpressionStatement	EG ( vm_stack_top ) = ( zval * ) ( ( char * ) call + used_stack )	180:2:7807:7859	165547	0	True				
ANR	165615	AssignmentExpression	EG ( vm_stack_top ) = ( zval * ) ( ( char * ) call + used_stack )		165547	0		=			
ANR	165616	CallExpression	EG ( vm_stack_top )		165547	0					
ANR	165617	Callee	EG		165547	0					
ANR	165618	Identifier	EG		165547	0					
ANR	165619	ArgumentList	vm_stack_top		165547	1					
ANR	165620	Argument	vm_stack_top		165547	0					
ANR	165621	Identifier	vm_stack_top		165547	0					
ANR	165622	CastExpression	( zval * ) ( ( char * ) call + used_stack )		165547	1					
ANR	165623	CastTarget	zval *		165547	0					
ANR	165624	AdditiveExpression	( char * ) call + used_stack		165547	1		+			
ANR	165625	CastExpression	( char * ) call		165547	0					
ANR	165626	CastTarget	char *		165547	0					
ANR	165627	Identifier	call		165547	1					
ANR	165628	Identifier	used_stack		165547	1					
ANR	165629	ExpressionStatement	"ZEND_SET_CALL_INFO ( call , call_info )"	181:2:7863:7898	165547	1	True				
ANR	165630	CallExpression	"ZEND_SET_CALL_INFO ( call , call_info )"		165547	0					
ANR	165631	Callee	ZEND_SET_CALL_INFO		165547	0					
ANR	165632	Identifier	ZEND_SET_CALL_INFO		165547	0					
ANR	165633	ArgumentList	call		165547	1					
ANR	165634	Argument	call		165547	0					
ANR	165635	Identifier	call		165547	0					
ANR	165636	Argument	call_info		165547	1					
ANR	165637	Identifier	call_info		165547	0					
ANR	165638	ExpressionStatement	ZEND_ASSERT_VM_STACK_GLOBAL	184:1:7905:7932	165547	3	True				
ANR	165639	Identifier	ZEND_ASSERT_VM_STACK_GLOBAL		165547	0					
ANR	165640	ExpressionStatement	call -> func = func	186:1:7936:7953	165547	4	True				
ANR	165641	AssignmentExpression	call -> func = func		165547	0		=			
ANR	165642	PtrMemberAccess	call -> func		165547	0					
ANR	165643	Identifier	call		165547	0					
ANR	165644	Identifier	func		165547	1					
ANR	165645	Identifier	func		165547	1					
ANR	165646	ExpressionStatement	Z_OBJ ( call -> This ) = object	187:1:7956:7982	165547	5	True				
ANR	165647	AssignmentExpression	Z_OBJ ( call -> This ) = object		165547	0		=			
ANR	165648	CallExpression	Z_OBJ ( call -> This )		165547	0					
ANR	165649	Callee	Z_OBJ		165547	0					
ANR	165650	Identifier	Z_OBJ		165547	0					
ANR	165651	ArgumentList	call -> This		165547	1					
ANR	165652	Argument	call -> This		165547	0					
ANR	165653	PtrMemberAccess	call -> This		165547	0					
ANR	165654	Identifier	call		165547	0					
ANR	165655	Identifier	This		165547	1					
ANR	165656	Identifier	object		165547	1					
ANR	165657	ExpressionStatement	ZEND_CALL_NUM_ARGS ( call ) = num_args	188:1:7985:8020	165547	6	True				
ANR	165658	AssignmentExpression	ZEND_CALL_NUM_ARGS ( call ) = num_args		165547	0		=			
ANR	165659	CallExpression	ZEND_CALL_NUM_ARGS ( call )		165547	0					
ANR	165660	Callee	ZEND_CALL_NUM_ARGS		165547	0					
ANR	165661	Identifier	ZEND_CALL_NUM_ARGS		165547	0					
ANR	165662	ArgumentList	call		165547	1					
ANR	165663	Argument	call		165547	0					
ANR	165664	Identifier	call		165547	0					
ANR	165665	Identifier	num_args		165547	1					
ANR	165666	ExpressionStatement	call -> called_scope = called_scope	189:1:8023:8056	165547	7	True				
ANR	165667	AssignmentExpression	call -> called_scope = called_scope		165547	0		=			
ANR	165668	PtrMemberAccess	call -> called_scope		165547	0					
ANR	165669	Identifier	call		165547	0					
ANR	165670	Identifier	called_scope		165547	1					
ANR	165671	Identifier	called_scope		165547	1					
ANR	165672	ReturnStatement	return call ;	190:1:8059:8070	165547	8	True				
ANR	165673	Identifier	call		165547	0					
ANR	165674	ReturnType	static zend_always_inline zend_execute_data *		165547	1					
ANR	165675	Identifier	zend_vm_stack_push_call_frame_ex		165547	2					
ANR	165676	ParameterList	"uint32_t used_stack , uint32_t call_info , zend_function * func , uint32_t num_args , zend_class_entry * called_scope , zend_object * object"		165547	3					
ANR	165677	Parameter	uint32_t used_stack	170:78:7355:7373	165547	0	True				
ANR	165678	ParameterType	uint32_t		165547	0					
ANR	165679	Identifier	used_stack		165547	1					
ANR	165680	Parameter	uint32_t call_info	170:99:7376:7393	165547	1	True				
ANR	165681	ParameterType	uint32_t		165547	0					
ANR	165682	Identifier	call_info		165547	1					
ANR	165683	Parameter	zend_function * func	170:119:7396:7414	165547	2	True				
ANR	165684	ParameterType	zend_function *		165547	0					
ANR	165685	Identifier	func		165547	1					
ANR	165686	Parameter	uint32_t num_args	170:140:7417:7433	165547	3	True				
ANR	165687	ParameterType	uint32_t		165547	0					
ANR	165688	Identifier	num_args		165547	1					
ANR	165689	Parameter	zend_class_entry * called_scope	170:159:7436:7465	165547	4	True				
ANR	165690	ParameterType	zend_class_entry *		165547	0					
ANR	165691	Identifier	called_scope		165547	1					
ANR	165692	Parameter	zend_object * object	170:191:7468:7486	165547	5	True				
ANR	165693	ParameterType	zend_object *		165547	0					
ANR	165694	Identifier	object		165547	1					
ANR	165695	CFGEntryNode	ENTRY		165547		True				
ANR	165696	CFGExitNode	EXIT		165547		True				
ANR	165697	Symbol	call -> This		165547						
ANR	165698	Symbol	EG		165547						
ANR	165699	Symbol	call -> func		165547						
ANR	165700	Symbol	call -> called_scope		165547						
ANR	165701	Symbol	called_scope		165547						
ANR	165702	Symbol	* call		165547						
ANR	165703	Symbol	ZEND_CALL_ALLOCATED		165547						
ANR	165704	Symbol	call_info		165547						
ANR	165705	Symbol	call		165547						
ANR	165706	Symbol	vm_stack_top		165547						
ANR	165707	Symbol	UNEXPECTED		165547						
ANR	165708	Symbol	Z_OBJ		165547						
ANR	165709	Symbol	func		165547						
ANR	165710	Symbol	num_args		165547						
ANR	165711	Symbol	vm_stack_end		165547						
ANR	165712	Symbol	ZEND_CALL_NUM_ARGS		165547						
ANR	165713	Symbol	used_stack		165547						
ANR	165714	Symbol	zend_vm_stack_extend		165547						
ANR	165715	Symbol	object		165547						
ANR	165716	Function	zend_vm_calc_used_stack	193:0:8075:8417							
ANR	165717	FunctionDef	"zend_vm_calc_used_stack (uint32_t num_args , zend_function * func)"		165716	0					
ANR	165718	CompoundStatement		194:0:8174:8417	165716	0					
ANR	165719	IdentifierDeclStatement	uint32_t used_stack = ZEND_CALL_FRAME_SLOT + num_args ;	195:1:8177:8230	165716	0	True				
ANR	165720	IdentifierDecl	used_stack = ZEND_CALL_FRAME_SLOT + num_args		165716	0					
ANR	165721	IdentifierDeclType	uint32_t		165716	0					
ANR	165722	Identifier	used_stack		165716	1					
ANR	165723	AssignmentExpression	used_stack = ZEND_CALL_FRAME_SLOT + num_args		165716	2		=			
ANR	165724	Identifier	used_stack		165716	0					
ANR	165725	AdditiveExpression	ZEND_CALL_FRAME_SLOT + num_args		165716	1		+			
ANR	165726	Identifier	ZEND_CALL_FRAME_SLOT		165716	0					
ANR	165727	Identifier	num_args		165716	1					
ANR	165728	IfStatement	if ( EXPECTED ( ZEND_USER_CODE ( func -> type ) ) )		165716	1					
ANR	165729	Condition	EXPECTED ( ZEND_USER_CODE ( func -> type ) )	197:5:8238:8273	165716	0	True				
ANR	165730	CallExpression	EXPECTED ( ZEND_USER_CODE ( func -> type ) )		165716	0					
ANR	165731	Callee	EXPECTED		165716	0					
ANR	165732	Identifier	EXPECTED		165716	0					
ANR	165733	ArgumentList	ZEND_USER_CODE ( func -> type )		165716	1					
ANR	165734	Argument	ZEND_USER_CODE ( func -> type )		165716	0					
ANR	165735	CallExpression	ZEND_USER_CODE ( func -> type )		165716	0					
ANR	165736	Callee	ZEND_USER_CODE		165716	0					
ANR	165737	Identifier	ZEND_USER_CODE		165716	0					
ANR	165738	ArgumentList	func -> type		165716	1					
ANR	165739	Argument	func -> type		165716	0					
ANR	165740	PtrMemberAccess	func -> type		165716	0					
ANR	165741	Identifier	func		165716	0					
ANR	165742	Identifier	type		165716	1					
ANR	165743	CompoundStatement		4:43:101:101	165716	1					
ANR	165744	ExpressionStatement	"used_stack += func -> op_array . last_var + func -> op_array . T - MIN ( func -> op_array . num_args , num_args )"	198:2:8280:8377	165716	0	True				
ANR	165745	AssignmentExpression	"used_stack += func -> op_array . last_var + func -> op_array . T - MIN ( func -> op_array . num_args , num_args )"		165716	0		+=			
ANR	165746	Identifier	used_stack		165716	0					
ANR	165747	AdditiveExpression	"func -> op_array . last_var + func -> op_array . T - MIN ( func -> op_array . num_args , num_args )"		165716	1		+			
ANR	165748	MemberAccess	func -> op_array . last_var		165716	0					
ANR	165749	PtrMemberAccess	func -> op_array		165716	0					
ANR	165750	Identifier	func		165716	0					
ANR	165751	Identifier	op_array		165716	1					
ANR	165752	Identifier	last_var		165716	1					
ANR	165753	AdditiveExpression	"func -> op_array . T - MIN ( func -> op_array . num_args , num_args )"		165716	1		-			
ANR	165754	MemberAccess	func -> op_array . T		165716	0					
ANR	165755	PtrMemberAccess	func -> op_array		165716	0					
ANR	165756	Identifier	func		165716	0					
ANR	165757	Identifier	op_array		165716	1					
ANR	165758	Identifier	T		165716	1					
ANR	165759	CallExpression	"MIN ( func -> op_array . num_args , num_args )"		165716	1					
ANR	165760	Callee	MIN		165716	0					
ANR	165761	Identifier	MIN		165716	0					
ANR	165762	ArgumentList	func -> op_array . num_args		165716	1					
ANR	165763	Argument	func -> op_array . num_args		165716	0					
ANR	165764	MemberAccess	func -> op_array . num_args		165716	0					
ANR	165765	PtrMemberAccess	func -> op_array		165716	0					
ANR	165766	Identifier	func		165716	0					
ANR	165767	Identifier	op_array		165716	1					
ANR	165768	Identifier	num_args		165716	1					
ANR	165769	Argument	num_args		165716	1					
ANR	165770	Identifier	num_args		165716	0					
ANR	165771	ReturnStatement	return used_stack * sizeof ( zval ) ;	200:1:8383:8415	165716	2	True				
ANR	165772	MultiplicativeExpression	used_stack * sizeof ( zval )		165716	0		*			
ANR	165773	Identifier	used_stack		165716	0					
ANR	165774	SizeofExpression	sizeof ( zval )		165716	1					
ANR	165775	Sizeof	sizeof		165716	0					
ANR	165776	SizeofOperand	zval		165716	1					
ANR	165777	ReturnType	static zend_always_inline uint32_t		165716	1					
ANR	165778	Identifier	zend_vm_calc_used_stack		165716	2					
ANR	165779	ParameterList	"uint32_t num_args , zend_function * func"		165716	3					
ANR	165780	Parameter	uint32_t num_args	193:59:8134:8150	165716	0	True				
ANR	165781	ParameterType	uint32_t		165716	0					
ANR	165782	Identifier	num_args		165716	1					
ANR	165783	Parameter	zend_function * func	193:78:8153:8171	165716	1	True				
ANR	165784	ParameterType	zend_function *		165716	0					
ANR	165785	Identifier	func		165716	1					
ANR	165786	CFGEntryNode	ENTRY		165716		True				
ANR	165787	CFGExitNode	EXIT		165716		True				
ANR	165788	Symbol	* func		165716						
ANR	165789	Symbol	func -> op_array		165716						
ANR	165790	Symbol	func -> op_array . last_var		165716						
ANR	165791	Symbol	MIN		165716						
ANR	165792	Symbol	func		165716						
ANR	165793	Symbol	num_args		165716						
ANR	165794	Symbol	ZEND_USER_CODE		165716						
ANR	165795	Symbol	func -> type		165716						
ANR	165796	Symbol	ZEND_CALL_FRAME_SLOT		165716						
ANR	165797	Symbol	used_stack		165716						
ANR	165798	Symbol	EXPECTED		165716						
ANR	165799	Symbol	func -> op_array . T		165716						
ANR	165800	Symbol	func -> op_array . num_args		165716						
ANR	165801	Function	zend_vm_stack_push_call_frame	203:0:8420:8780							
ANR	165802	FunctionDef	"zend_vm_stack_push_call_frame (uint32_t call_info , zend_function * func , uint32_t num_args , zend_class_entry * called_scope , zend_object * object)"		165801	0					
ANR	165803	CompoundStatement		204:0:8608:8780	165801	0					
ANR	165804	IdentifierDeclStatement	"uint32_t used_stack = zend_vm_calc_used_stack ( num_args , func ) ;"	205:1:8611:8672	165801	0	True				
ANR	165805	IdentifierDecl	"used_stack = zend_vm_calc_used_stack ( num_args , func )"		165801	0					
ANR	165806	IdentifierDeclType	uint32_t		165801	0					
ANR	165807	Identifier	used_stack		165801	1					
ANR	165808	AssignmentExpression	"used_stack = zend_vm_calc_used_stack ( num_args , func )"		165801	2		=			
ANR	165809	Identifier	used_stack		165801	0					
ANR	165810	CallExpression	"zend_vm_calc_used_stack ( num_args , func )"		165801	1					
ANR	165811	Callee	zend_vm_calc_used_stack		165801	0					
ANR	165812	Identifier	zend_vm_calc_used_stack		165801	0					
ANR	165813	ArgumentList	num_args		165801	1					
ANR	165814	Argument	num_args		165801	0					
ANR	165815	Identifier	num_args		165801	0					
ANR	165816	Argument	func		165801	1					
ANR	165817	Identifier	func		165801	0					
ANR	165818	ReturnStatement	"return zend_vm_stack_push_call_frame_ex ( used_stack , call_info , func , num_args , called_scope , object ) ;"	207:1:8676:8778	165801	1	True				
ANR	165819	CallExpression	"zend_vm_stack_push_call_frame_ex ( used_stack , call_info , func , num_args , called_scope , object )"		165801	0					
ANR	165820	Callee	zend_vm_stack_push_call_frame_ex		165801	0					
ANR	165821	Identifier	zend_vm_stack_push_call_frame_ex		165801	0					
ANR	165822	ArgumentList	used_stack		165801	1					
ANR	165823	Argument	used_stack		165801	0					
ANR	165824	Identifier	used_stack		165801	0					
ANR	165825	Argument	call_info		165801	1					
ANR	165826	Identifier	call_info		165801	0					
ANR	165827	Argument	func		165801	2					
ANR	165828	Identifier	func		165801	0					
ANR	165829	Argument	num_args		165801	3					
ANR	165830	Identifier	num_args		165801	0					
ANR	165831	Argument	called_scope		165801	4					
ANR	165832	Identifier	called_scope		165801	0					
ANR	165833	Argument	object		165801	5					
ANR	165834	Identifier	object		165801	0					
ANR	165835	ReturnType	static zend_always_inline zend_execute_data *		165801	1					
ANR	165836	Identifier	zend_vm_stack_push_call_frame		165801	2					
ANR	165837	ParameterList	"uint32_t call_info , zend_function * func , uint32_t num_args , zend_class_entry * called_scope , zend_object * object"		165801	3					
ANR	165838	Parameter	uint32_t call_info	203:75:8495:8512	165801	0	True				
ANR	165839	ParameterType	uint32_t		165801	0					
ANR	165840	Identifier	call_info		165801	1					
ANR	165841	Parameter	zend_function * func	203:95:8515:8533	165801	1	True				
ANR	165842	ParameterType	zend_function *		165801	0					
ANR	165843	Identifier	func		165801	1					
ANR	165844	Parameter	uint32_t num_args	203:116:8536:8552	165801	2	True				
ANR	165845	ParameterType	uint32_t		165801	0					
ANR	165846	Identifier	num_args		165801	1					
ANR	165847	Parameter	zend_class_entry * called_scope	203:135:8555:8584	165801	3	True				
ANR	165848	ParameterType	zend_class_entry *		165801	0					
ANR	165849	Identifier	called_scope		165801	1					
ANR	165850	Parameter	zend_object * object	203:167:8587:8605	165801	4	True				
ANR	165851	ParameterType	zend_object *		165801	0					
ANR	165852	Identifier	object		165801	1					
ANR	165853	CFGEntryNode	ENTRY		165801		True				
ANR	165854	CFGExitNode	EXIT		165801		True				
ANR	165855	Symbol	func		165801						
ANR	165856	Symbol	num_args		165801						
ANR	165857	Symbol	zend_vm_stack_push_call_frame_ex		165801						
ANR	165858	Symbol	called_scope		165801						
ANR	165859	Symbol	zend_vm_calc_used_stack		165801						
ANR	165860	Symbol	used_stack		165801						
ANR	165861	Symbol	call_info		165801						
ANR	165862	Symbol	object		165801						
ANR	165863	Function	zend_vm_stack_free_extra_args_ex	211:0:8783:9375							
ANR	165864	FunctionDef	"zend_vm_stack_free_extra_args_ex (uint32_t call_info , zend_execute_data * call)"		165863	0					
ANR	165865	CompoundStatement		212:0:8892:9375	165863	0					
ANR	165866	IfStatement	if ( UNEXPECTED ( call_info & ZEND_CALL_FREE_EXTRA_ARGS ) )		165863	0					
ANR	165867	Condition	UNEXPECTED ( call_info & ZEND_CALL_FREE_EXTRA_ARGS )	213:5:8899:8947	165863	0	True				
ANR	165868	CallExpression	UNEXPECTED ( call_info & ZEND_CALL_FREE_EXTRA_ARGS )		165863	0					
ANR	165869	Callee	UNEXPECTED		165863	0					
ANR	165870	Identifier	UNEXPECTED		165863	0					
ANR	165871	ArgumentList	call_info & ZEND_CALL_FREE_EXTRA_ARGS		165863	1					
ANR	165872	Argument	call_info & ZEND_CALL_FREE_EXTRA_ARGS		165863	0					
ANR	165873	BitAndExpression	call_info & ZEND_CALL_FREE_EXTRA_ARGS		165863	0		&			
ANR	165874	Identifier	call_info		165863	0					
ANR	165875	Identifier	ZEND_CALL_FREE_EXTRA_ARGS		165863	1					
ANR	165876	CompoundStatement		4:3:157:231	165863	1					
ANR	165877	IdentifierDeclStatement	"zval * end = ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T ) ;"	214:2:8954:9045	165863	0	True				
ANR	165878	IdentifierDecl	"* end = ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T )"		165863	0					
ANR	165879	IdentifierDeclType	zval *		165863	0					
ANR	165880	Identifier	end		165863	1					
ANR	165881	AssignmentExpression	"* end = ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T )"		165863	2		=			
ANR	165882	Identifier	end		165863	0					
ANR	165883	CallExpression	"ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T )"		165863	1					
ANR	165884	Callee	ZEND_CALL_VAR_NUM		165863	0					
ANR	165885	Identifier	ZEND_CALL_VAR_NUM		165863	0					
ANR	165886	ArgumentList	call		165863	1					
ANR	165887	Argument	call		165863	0					
ANR	165888	Identifier	call		165863	0					
ANR	165889	Argument	call -> func -> op_array . last_var + call -> func -> op_array . T		165863	1					
ANR	165890	AdditiveExpression	call -> func -> op_array . last_var + call -> func -> op_array . T		165863	0		+			
ANR	165891	MemberAccess	call -> func -> op_array . last_var		165863	0					
ANR	165892	PtrMemberAccess	call -> func -> op_array		165863	0					
ANR	165893	PtrMemberAccess	call -> func		165863	0					
ANR	165894	Identifier	call		165863	0					
ANR	165895	Identifier	func		165863	1					
ANR	165896	Identifier	op_array		165863	1					
ANR	165897	Identifier	last_var		165863	1					
ANR	165898	MemberAccess	call -> func -> op_array . T		165863	1					
ANR	165899	PtrMemberAccess	call -> func -> op_array		165863	0					
ANR	165900	PtrMemberAccess	call -> func		165863	0					
ANR	165901	Identifier	call		165863	0					
ANR	165902	Identifier	func		165863	1					
ANR	165903	Identifier	op_array		165863	1					
ANR	165904	Identifier	T		165863	1					
ANR	165905	IdentifierDeclStatement	zval * p = end + ( ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args ) ;	215:3:9050:9124	165863	1	True				
ANR	165906	IdentifierDecl	* p = end + ( ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args )		165863	0					
ANR	165907	IdentifierDeclType	zval *		165863	0					
ANR	165908	Identifier	p		165863	1					
ANR	165909	AssignmentExpression	* p = end + ( ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args )		165863	2		=			
ANR	165910	Identifier	p		165863	0					
ANR	165911	AdditiveExpression	end + ( ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args )		165863	1		+			
ANR	165912	Identifier	end		165863	0					
ANR	165913	AdditiveExpression	ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args		165863	1		-			
ANR	165914	CallExpression	ZEND_CALL_NUM_ARGS ( call )		165863	0					
ANR	165915	Callee	ZEND_CALL_NUM_ARGS		165863	0					
ANR	165916	Identifier	ZEND_CALL_NUM_ARGS		165863	0					
ANR	165917	ArgumentList	call		165863	1					
ANR	165918	Argument	call		165863	0					
ANR	165919	Identifier	call		165863	0					
ANR	165920	MemberAccess	call -> func -> op_array . num_args		165863	1					
ANR	165921	PtrMemberAccess	call -> func -> op_array		165863	0					
ANR	165922	PtrMemberAccess	call -> func		165863	0					
ANR	165923	Identifier	call		165863	0					
ANR	165924	Identifier	func		165863	1					
ANR	165925	Identifier	op_array		165863	1					
ANR	165926	Identifier	num_args		165863	1					
ANR	165927	DoStatement	do		165863	2					
ANR	165928	CompoundStatement		5:5:238:238	165863	0					
ANR	165929	ExpressionStatement	p --	217:3:9136:9139	165863	0	True				
ANR	165930	PostIncDecOperationExpression	p --		165863	0					
ANR	165931	Identifier	p		165863	0					
ANR	165932	IncDec	--		165863	1					
ANR	165933	IfStatement	if ( Z_REFCOUNTED_P ( p ) )		165863	1					
ANR	165934	Condition	Z_REFCOUNTED_P ( p )	218:7:9148:9164	165863	0	True				
ANR	165935	CallExpression	Z_REFCOUNTED_P ( p )		165863	0					
ANR	165936	Callee	Z_REFCOUNTED_P		165863	0					
ANR	165937	Identifier	Z_REFCOUNTED_P		165863	0					
ANR	165938	ArgumentList	p		165863	1					
ANR	165939	Argument	p		165863	0					
ANR	165940	Identifier	p		165863	0					
ANR	165941	CompoundStatement		7:26:274:274	165863	1					
ANR	165942	IfStatement	if ( ! Z_DELREF_P ( p ) )		165863	0					
ANR	165943	Condition	! Z_DELREF_P ( p )	219:8:9177:9190	165863	0	True				
ANR	165944	UnaryOperationExpression	! Z_DELREF_P ( p )		165863	0					
ANR	165945	UnaryOperator	!		165863	0					
ANR	165946	CallExpression	Z_DELREF_P ( p )		165863	1					
ANR	165947	Callee	Z_DELREF_P		165863	0					
ANR	165948	Identifier	Z_DELREF_P		165863	0					
ANR	165949	ArgumentList	p		165863	1					
ANR	165950	Argument	p		165863	0					
ANR	165951	Identifier	p		165863	0					
ANR	165952	CompoundStatement		9:5:307:342	165863	1					
ANR	165953	IdentifierDeclStatement	zend_refcounted * r = Z_COUNTED_P ( p ) ;	220:5:9200:9235	165863	0	True				
ANR	165954	IdentifierDecl	* r = Z_COUNTED_P ( p )		165863	0					
ANR	165955	IdentifierDeclType	zend_refcounted *		165863	0					
ANR	165956	Identifier	r		165863	1					
ANR	165957	AssignmentExpression	* r = Z_COUNTED_P ( p )		165863	2		=			
ANR	165958	Identifier	r		165863	0					
ANR	165959	CallExpression	Z_COUNTED_P ( p )		165863	1					
ANR	165960	Callee	Z_COUNTED_P		165863	0					
ANR	165961	Identifier	Z_COUNTED_P		165863	0					
ANR	165962	ArgumentList	p		165863	1					
ANR	165963	Argument	p		165863	0					
ANR	165964	Identifier	p		165863	0					
ANR	165965	ExpressionStatement	ZVAL_NULL ( p )	221:5:9242:9254	165863	1	True				
ANR	165966	CallExpression	ZVAL_NULL ( p )		165863	0					
ANR	165967	Callee	ZVAL_NULL		165863	0					
ANR	165968	Identifier	ZVAL_NULL		165863	0					
ANR	165969	ArgumentList	p		165863	1					
ANR	165970	Argument	p		165863	0					
ANR	165971	Identifier	p		165863	0					
ANR	165972	ExpressionStatement	zval_dtor_func_for_ptr ( r )	222:5:9261:9286	165863	2	True				
ANR	165973	CallExpression	zval_dtor_func_for_ptr ( r )		165863	0					
ANR	165974	Callee	zval_dtor_func_for_ptr		165863	0					
ANR	165975	Identifier	zval_dtor_func_for_ptr		165863	0					
ANR	165976	ArgumentList	r		165863	1					
ANR	165977	Argument	r		165863	0					
ANR	165978	Identifier	r		165863	0					
ANR	165979	ElseStatement	else		165863	0					
ANR	165980	CompoundStatement		12:11:406:406	165863	0					
ANR	165981	ExpressionStatement	GC_ZVAL_CHECK_POSSIBLE_ROOT ( p )	224:5:9306:9336	165863	0	True				
ANR	165982	CallExpression	GC_ZVAL_CHECK_POSSIBLE_ROOT ( p )		165863	0					
ANR	165983	Callee	GC_ZVAL_CHECK_POSSIBLE_ROOT		165863	0					
ANR	165984	Identifier	GC_ZVAL_CHECK_POSSIBLE_ROOT		165863	0					
ANR	165985	ArgumentList	p		165863	1					
ANR	165986	Argument	p		165863	0					
ANR	165987	Identifier	p		165863	0					
ANR	165988	Condition	p != end	227:11:9360:9367	165863	1	True				
ANR	165989	EqualityExpression	p != end		165863	0		!=			
ANR	165990	Identifier	p		165863	0					
ANR	165991	Identifier	end		165863	1					
ANR	165992	ReturnType	static zend_always_inline void		165863	1					
ANR	165993	Identifier	zend_vm_stack_free_extra_args_ex		165863	2					
ANR	165994	ParameterList	"uint32_t call_info , zend_execute_data * call"		165863	3					
ANR	165995	Parameter	uint32_t call_info	211:64:8847:8864	165863	0	True				
ANR	165996	ParameterType	uint32_t		165863	0					
ANR	165997	Identifier	call_info		165863	1					
ANR	165998	Parameter	zend_execute_data * call	211:84:8867:8889	165863	1	True				
ANR	165999	ParameterType	zend_execute_data *		165863	0					
ANR	166000	Identifier	call		165863	1					
ANR	166001	CFGEntryNode	ENTRY		165863		True				
ANR	166002	CFGExitNode	EXIT		165863		True				
ANR	166003	Symbol	call -> func		165863						
ANR	166004	Symbol	call -> func -> op_array		165863						
ANR	166005	Symbol	call -> func -> op_array . num_args		165863						
ANR	166006	Symbol	Z_COUNTED_P		165863						
ANR	166007	Symbol	ZEND_CALL_FREE_EXTRA_ARGS		165863						
ANR	166008	Symbol	call -> func -> op_array . last_var		165863						
ANR	166009	Symbol	* call		165863						
ANR	166010	Symbol	call -> func -> op_array . T		165863						
ANR	166011	Symbol	call_info		165863						
ANR	166012	Symbol	call		165863						
ANR	166013	Symbol	UNEXPECTED		165863						
ANR	166014	Symbol	p		165863						
ANR	166015	Symbol	* call -> func		165863						
ANR	166016	Symbol	r		165863						
ANR	166017	Symbol	ZEND_CALL_VAR_NUM		165863						
ANR	166018	Symbol	Z_DELREF_P		165863						
ANR	166019	Symbol	end		165863						
ANR	166020	Symbol	ZEND_CALL_NUM_ARGS		165863						
ANR	166021	Symbol	Z_REFCOUNTED_P		165863						
ANR	166022	Symbol	* * call		165863						
ANR	166023	Function	zend_vm_stack_free_extra_args	231:0:9378:9529							
ANR	166024	FunctionDef	zend_vm_stack_free_extra_args (zend_execute_data * call)		166023	0					
ANR	166025	CompoundStatement		232:0:9464:9529	166023	0					
ANR	166026	ExpressionStatement	"zend_vm_stack_free_extra_args_ex ( ZEND_CALL_INFO ( call ) , call )"	233:1:9467:9527	166023	0	True				
ANR	166027	CallExpression	"zend_vm_stack_free_extra_args_ex ( ZEND_CALL_INFO ( call ) , call )"		166023	0					
ANR	166028	Callee	zend_vm_stack_free_extra_args_ex		166023	0					
ANR	166029	Identifier	zend_vm_stack_free_extra_args_ex		166023	0					
ANR	166030	ArgumentList	ZEND_CALL_INFO ( call )		166023	1					
ANR	166031	Argument	ZEND_CALL_INFO ( call )		166023	0					
ANR	166032	CallExpression	ZEND_CALL_INFO ( call )		166023	0					
ANR	166033	Callee	ZEND_CALL_INFO		166023	0					
ANR	166034	Identifier	ZEND_CALL_INFO		166023	0					
ANR	166035	ArgumentList	call		166023	1					
ANR	166036	Argument	call		166023	0					
ANR	166037	Identifier	call		166023	0					
ANR	166038	Argument	call		166023	1					
ANR	166039	Identifier	call		166023	0					
ANR	166040	ReturnType	static zend_always_inline void		166023	1					
ANR	166041	Identifier	zend_vm_stack_free_extra_args		166023	2					
ANR	166042	ParameterList	zend_execute_data * call		166023	3					
ANR	166043	Parameter	zend_execute_data * call	231:61:9439:9461	166023	0	True				
ANR	166044	ParameterType	zend_execute_data *		166023	0					
ANR	166045	Identifier	call		166023	1					
ANR	166046	CFGEntryNode	ENTRY		166023		True				
ANR	166047	CFGExitNode	EXIT		166023		True				
ANR	166048	Symbol	call		166023						
ANR	166049	Symbol	ZEND_CALL_INFO		166023						
ANR	166050	Function	zend_vm_stack_free_args	236:0:9532:9958							
ANR	166051	FunctionDef	zend_vm_stack_free_args (zend_execute_data * call)		166050	0					
ANR	166052	CompoundStatement		237:0:9612:9958	166050	0					
ANR	166053	IdentifierDeclStatement	uint32_t num_args = ZEND_CALL_NUM_ARGS ( call ) ;	238:1:9615:9659	166050	0	True				
ANR	166054	IdentifierDecl	num_args = ZEND_CALL_NUM_ARGS ( call )		166050	0					
ANR	166055	IdentifierDeclType	uint32_t		166050	0					
ANR	166056	Identifier	num_args		166050	1					
ANR	166057	AssignmentExpression	num_args = ZEND_CALL_NUM_ARGS ( call )		166050	2		=			
ANR	166058	Identifier	num_args		166050	0					
ANR	166059	CallExpression	ZEND_CALL_NUM_ARGS ( call )		166050	1					
ANR	166060	Callee	ZEND_CALL_NUM_ARGS		166050	0					
ANR	166061	Identifier	ZEND_CALL_NUM_ARGS		166050	0					
ANR	166062	ArgumentList	call		166050	1					
ANR	166063	Argument	call		166050	0					
ANR	166064	Identifier	call		166050	0					
ANR	166065	IfStatement	if ( EXPECTED ( num_args > 0 ) )		166050	1					
ANR	166066	Condition	EXPECTED ( num_args > 0 )	240:5:9667:9688	166050	0	True				
ANR	166067	CallExpression	EXPECTED ( num_args > 0 )		166050	0					
ANR	166068	Callee	EXPECTED		166050	0					
ANR	166069	Identifier	EXPECTED		166050	0					
ANR	166070	ArgumentList	num_args > 0		166050	1					
ANR	166071	Argument	num_args > 0		166050	0					
ANR	166072	RelationalExpression	num_args > 0		166050	0		>			
ANR	166073	Identifier	num_args		166050	0					
ANR	166074	PrimaryExpression	0		166050	1					
ANR	166075	CompoundStatement		6:2:120:144	166050	1					
ANR	166076	IdentifierDeclStatement	"zval * end = ZEND_CALL_ARG ( call , 1 ) ;"	241:2:9695:9729	166050	0	True				
ANR	166077	IdentifierDecl	"* end = ZEND_CALL_ARG ( call , 1 )"		166050	0					
ANR	166078	IdentifierDeclType	zval *		166050	0					
ANR	166079	Identifier	end		166050	1					
ANR	166080	AssignmentExpression	"* end = ZEND_CALL_ARG ( call , 1 )"		166050	2		=			
ANR	166081	Identifier	end		166050	0					
ANR	166082	CallExpression	"ZEND_CALL_ARG ( call , 1 )"		166050	1					
ANR	166083	Callee	ZEND_CALL_ARG		166050	0					
ANR	166084	Identifier	ZEND_CALL_ARG		166050	0					
ANR	166085	ArgumentList	call		166050	1					
ANR	166086	Argument	call		166050	0					
ANR	166087	Identifier	call		166050	0					
ANR	166088	Argument	1		166050	1					
ANR	166089	PrimaryExpression	1		166050	0					
ANR	166090	IdentifierDeclStatement	zval * p = end + num_args ;	242:2:9733:9757	166050	1	True				
ANR	166091	IdentifierDecl	* p = end + num_args		166050	0					
ANR	166092	IdentifierDeclType	zval *		166050	0					
ANR	166093	Identifier	p		166050	1					
ANR	166094	AssignmentExpression	* p = end + num_args		166050	2		=			
ANR	166095	Identifier	p		166050	0					
ANR	166096	AdditiveExpression	end + num_args		166050	1		+			
ANR	166097	Identifier	end		166050	0					
ANR	166098	Identifier	num_args		166050	1					
ANR	166099	DoStatement	do		166050	2					
ANR	166100	CompoundStatement		8:5:152:152	166050	0					
ANR	166101	ExpressionStatement	p --	245:3:9770:9773	166050	0	True				
ANR	166102	PostIncDecOperationExpression	p --		166050	0					
ANR	166103	Identifier	p		166050	0					
ANR	166104	IncDec	--		166050	1					
ANR	166105	IfStatement	if ( Z_REFCOUNTED_P ( p ) )		166050	1					
ANR	166106	Condition	Z_REFCOUNTED_P ( p )	246:7:9782:9798	166050	0	True				
ANR	166107	CallExpression	Z_REFCOUNTED_P ( p )		166050	0					
ANR	166108	Callee	Z_REFCOUNTED_P		166050	0					
ANR	166109	Identifier	Z_REFCOUNTED_P		166050	0					
ANR	166110	ArgumentList	p		166050	1					
ANR	166111	Argument	p		166050	0					
ANR	166112	Identifier	p		166050	0					
ANR	166113	CompoundStatement		10:26:188:188	166050	1					
ANR	166114	IfStatement	if ( ! Z_DELREF_P ( p ) )		166050	0					
ANR	166115	Condition	! Z_DELREF_P ( p )	247:8:9811:9824	166050	0	True				
ANR	166116	UnaryOperationExpression	! Z_DELREF_P ( p )		166050	0					
ANR	166117	UnaryOperator	!		166050	0					
ANR	166118	CallExpression	Z_DELREF_P ( p )		166050	1					
ANR	166119	Callee	Z_DELREF_P		166050	0					
ANR	166120	Identifier	Z_DELREF_P		166050	0					
ANR	166121	ArgumentList	p		166050	1					
ANR	166122	Argument	p		166050	0					
ANR	166123	Identifier	p		166050	0					
ANR	166124	CompoundStatement		12:5:221:256	166050	1					
ANR	166125	IdentifierDeclStatement	zend_refcounted * r = Z_COUNTED_P ( p ) ;	248:5:9834:9869	166050	0	True				
ANR	166126	IdentifierDecl	* r = Z_COUNTED_P ( p )		166050	0					
ANR	166127	IdentifierDeclType	zend_refcounted *		166050	0					
ANR	166128	Identifier	r		166050	1					
ANR	166129	AssignmentExpression	* r = Z_COUNTED_P ( p )		166050	2		=			
ANR	166130	Identifier	r		166050	0					
ANR	166131	CallExpression	Z_COUNTED_P ( p )		166050	1					
ANR	166132	Callee	Z_COUNTED_P		166050	0					
ANR	166133	Identifier	Z_COUNTED_P		166050	0					
ANR	166134	ArgumentList	p		166050	1					
ANR	166135	Argument	p		166050	0					
ANR	166136	Identifier	p		166050	0					
ANR	166137	ExpressionStatement	ZVAL_NULL ( p )	249:5:9876:9888	166050	1	True				
ANR	166138	CallExpression	ZVAL_NULL ( p )		166050	0					
ANR	166139	Callee	ZVAL_NULL		166050	0					
ANR	166140	Identifier	ZVAL_NULL		166050	0					
ANR	166141	ArgumentList	p		166050	1					
ANR	166142	Argument	p		166050	0					
ANR	166143	Identifier	p		166050	0					
ANR	166144	ExpressionStatement	zval_dtor_func_for_ptr ( r )	250:5:9895:9920	166050	2	True				
ANR	166145	CallExpression	zval_dtor_func_for_ptr ( r )		166050	0					
ANR	166146	Callee	zval_dtor_func_for_ptr		166050	0					
ANR	166147	Identifier	zval_dtor_func_for_ptr		166050	0					
ANR	166148	ArgumentList	r		166050	1					
ANR	166149	Argument	r		166050	0					
ANR	166150	Identifier	r		166050	0					
ANR	166151	Condition	p != end	253:11:9944:9951	166050	1	True				
ANR	166152	EqualityExpression	p != end		166050	0		!=			
ANR	166153	Identifier	p		166050	0					
ANR	166154	Identifier	end		166050	1					
ANR	166155	ReturnType	static zend_always_inline void		166050	1					
ANR	166156	Identifier	zend_vm_stack_free_args		166050	2					
ANR	166157	ParameterList	zend_execute_data * call		166050	3					
ANR	166158	Parameter	zend_execute_data * call	236:55:9587:9609	166050	0	True				
ANR	166159	ParameterType	zend_execute_data *		166050	0					
ANR	166160	Identifier	call		166050	1					
ANR	166161	CFGEntryNode	ENTRY		166050		True				
ANR	166162	CFGExitNode	EXIT		166050		True				
ANR	166163	Symbol	call		166050						
ANR	166164	Symbol	p		166050						
ANR	166165	Symbol	r		166050						
ANR	166166	Symbol	Z_COUNTED_P		166050						
ANR	166167	Symbol	num_args		166050						
ANR	166168	Symbol	ZEND_CALL_ARG		166050						
ANR	166169	Symbol	Z_DELREF_P		166050						
ANR	166170	Symbol	ZEND_CALL_NUM_ARGS		166050						
ANR	166171	Symbol	end		166050						
ANR	166172	Symbol	Z_REFCOUNTED_P		166050						
ANR	166173	Symbol	EXPECTED		166050						
ANR	166174	Function	zend_vm_stack_free_call_frame_ex	257:0:9961:10401							
ANR	166175	FunctionDef	"zend_vm_stack_free_call_frame_ex (uint32_t call_info , zend_execute_data * call)"		166174	0					
ANR	166176	CompoundStatement		258:0:10070:10401	166174	0					
ANR	166177	ExpressionStatement	ZEND_ASSERT_VM_STACK_GLOBAL	259:1:10073:10100	166174	0	True				
ANR	166178	Identifier	ZEND_ASSERT_VM_STACK_GLOBAL		166174	0					
ANR	166179	IfStatement	if ( UNEXPECTED ( call_info & ZEND_CALL_ALLOCATED ) )		166174	1					
ANR	166180	Condition	UNEXPECTED ( call_info & ZEND_CALL_ALLOCATED )	261:5:10108:10150	166174	0	True				
ANR	166181	CallExpression	UNEXPECTED ( call_info & ZEND_CALL_ALLOCATED )		166174	0					
ANR	166182	Callee	UNEXPECTED		166174	0					
ANR	166183	Identifier	UNEXPECTED		166174	0					
ANR	166184	ArgumentList	call_info & ZEND_CALL_ALLOCATED		166174	1					
ANR	166185	Argument	call_info & ZEND_CALL_ALLOCATED		166174	0					
ANR	166186	BitAndExpression	call_info & ZEND_CALL_ALLOCATED		166174	0		&			
ANR	166187	Identifier	call_info		166174	0					
ANR	166188	Identifier	ZEND_CALL_ALLOCATED		166174	1					
ANR	166189	CompoundStatement		7:2:121:149	166174	1					
ANR	166190	IdentifierDeclStatement	zend_vm_stack p = EG ( vm_stack ) ;	262:2:10157:10187	166174	0	True				
ANR	166191	IdentifierDecl	p = EG ( vm_stack )		166174	0					
ANR	166192	IdentifierDeclType	zend_vm_stack		166174	0					
ANR	166193	Identifier	p		166174	1					
ANR	166194	AssignmentExpression	p = EG ( vm_stack )		166174	2		=			
ANR	166195	Identifier	p		166174	0					
ANR	166196	CallExpression	EG ( vm_stack )		166174	1					
ANR	166197	Callee	EG		166174	0					
ANR	166198	Identifier	EG		166174	0					
ANR	166199	ArgumentList	vm_stack		166174	1					
ANR	166200	Argument	vm_stack		166174	0					
ANR	166201	Identifier	vm_stack		166174	0					
ANR	166202	IdentifierDeclStatement	zend_vm_stack prev = p -> prev ;	264:2:10192:10220	166174	1	True				
ANR	166203	IdentifierDecl	prev = p -> prev		166174	0					
ANR	166204	IdentifierDeclType	zend_vm_stack		166174	0					
ANR	166205	Identifier	prev		166174	1					
ANR	166206	AssignmentExpression	prev = p -> prev		166174	2		=			
ANR	166207	Identifier	prev		166174	0					
ANR	166208	PtrMemberAccess	p -> prev		166174	1					
ANR	166209	Identifier	p		166174	0					
ANR	166210	Identifier	prev		166174	1					
ANR	166211	ExpressionStatement	EG ( vm_stack_top ) = prev -> top	266:2:10225:10253	166174	2	True				
ANR	166212	AssignmentExpression	EG ( vm_stack_top ) = prev -> top		166174	0		=			
ANR	166213	CallExpression	EG ( vm_stack_top )		166174	0					
ANR	166214	Callee	EG		166174	0					
ANR	166215	Identifier	EG		166174	0					
ANR	166216	ArgumentList	vm_stack_top		166174	1					
ANR	166217	Argument	vm_stack_top		166174	0					
ANR	166218	Identifier	vm_stack_top		166174	0					
ANR	166219	PtrMemberAccess	prev -> top		166174	1					
ANR	166220	Identifier	prev		166174	0					
ANR	166221	Identifier	top		166174	1					
ANR	166222	ExpressionStatement	EG ( vm_stack_end ) = prev -> end	267:2:10257:10285	166174	3	True				
ANR	166223	AssignmentExpression	EG ( vm_stack_end ) = prev -> end		166174	0		=			
ANR	166224	CallExpression	EG ( vm_stack_end )		166174	0					
ANR	166225	Callee	EG		166174	0					
ANR	166226	Identifier	EG		166174	0					
ANR	166227	ArgumentList	vm_stack_end		166174	1					
ANR	166228	Argument	vm_stack_end		166174	0					
ANR	166229	Identifier	vm_stack_end		166174	0					
ANR	166230	PtrMemberAccess	prev -> end		166174	1					
ANR	166231	Identifier	prev		166174	0					
ANR	166232	Identifier	end		166174	1					
ANR	166233	ExpressionStatement	EG ( vm_stack ) = prev	268:2:10289:10308	166174	4	True				
ANR	166234	AssignmentExpression	EG ( vm_stack ) = prev		166174	0		=			
ANR	166235	CallExpression	EG ( vm_stack )		166174	0					
ANR	166236	Callee	EG		166174	0					
ANR	166237	Identifier	EG		166174	0					
ANR	166238	ArgumentList	vm_stack		166174	1					
ANR	166239	Argument	vm_stack		166174	0					
ANR	166240	Identifier	vm_stack		166174	0					
ANR	166241	Identifier	prev		166174	1					
ANR	166242	ExpressionStatement	efree ( p )	269:2:10312:10320	166174	5	True				
ANR	166243	CallExpression	efree ( p )		166174	0					
ANR	166244	Callee	efree		166174	0					
ANR	166245	Identifier	efree		166174	0					
ANR	166246	ArgumentList	p		166174	1					
ANR	166247	Argument	p		166174	0					
ANR	166248	Identifier	p		166174	0					
ANR	166249	ElseStatement	else		166174	0					
ANR	166250	CompoundStatement		14:8:260:260	166174	0					
ANR	166251	ExpressionStatement	EG ( vm_stack_top ) = ( zval * ) call	272:2:10335:10365	166174	0	True				
ANR	166252	AssignmentExpression	EG ( vm_stack_top ) = ( zval * ) call		166174	0		=			
ANR	166253	CallExpression	EG ( vm_stack_top )		166174	0					
ANR	166254	Callee	EG		166174	0					
ANR	166255	Identifier	EG		166174	0					
ANR	166256	ArgumentList	vm_stack_top		166174	1					
ANR	166257	Argument	vm_stack_top		166174	0					
ANR	166258	Identifier	vm_stack_top		166174	0					
ANR	166259	CastExpression	( zval * ) call		166174	1					
ANR	166260	CastTarget	zval *		166174	0					
ANR	166261	Identifier	call		166174	1					
ANR	166262	ExpressionStatement	ZEND_ASSERT_VM_STACK_GLOBAL	275:1:10372:10399	166174	2	True				
ANR	166263	Identifier	ZEND_ASSERT_VM_STACK_GLOBAL		166174	0					
ANR	166264	ReturnType	static zend_always_inline void		166174	1					
ANR	166265	Identifier	zend_vm_stack_free_call_frame_ex		166174	2					
ANR	166266	ParameterList	"uint32_t call_info , zend_execute_data * call"		166174	3					
ANR	166267	Parameter	uint32_t call_info	257:64:10025:10042	166174	0	True				
ANR	166268	ParameterType	uint32_t		166174	0					
ANR	166269	Identifier	call_info		166174	1					
ANR	166270	Parameter	zend_execute_data * call	257:84:10045:10067	166174	1	True				
ANR	166271	ParameterType	zend_execute_data *		166174	0					
ANR	166272	Identifier	call		166174	1					
ANR	166273	CFGEntryNode	ENTRY		166174		True				
ANR	166274	CFGExitNode	EXIT		166174		True				
ANR	166275	Symbol	p -> prev		166174						
ANR	166276	Symbol	prev -> end		166174						
ANR	166277	Symbol	EG		166174						
ANR	166278	Symbol	prev		166174						
ANR	166279	Symbol	* prev		166174						
ANR	166280	Symbol	prev -> top		166174						
ANR	166281	Symbol	ZEND_CALL_ALLOCATED		166174						
ANR	166282	Symbol	call_info		166174						
ANR	166283	Symbol	call		166174						
ANR	166284	Symbol	UNEXPECTED		166174						
ANR	166285	Symbol	p		166174						
ANR	166286	Symbol	vm_stack_top		166174						
ANR	166287	Symbol	vm_stack		166174						
ANR	166288	Symbol	* p		166174						
ANR	166289	Symbol	vm_stack_end		166174						
ANR	166290	Function	zend_vm_stack_free_call_frame	278:0:10404:10555							
ANR	166291	FunctionDef	zend_vm_stack_free_call_frame (zend_execute_data * call)		166290	0					
ANR	166292	CompoundStatement		279:0:10490:10555	166290	0					
ANR	166293	ExpressionStatement	"zend_vm_stack_free_call_frame_ex ( ZEND_CALL_INFO ( call ) , call )"	280:1:10493:10553	166290	0	True				
ANR	166294	CallExpression	"zend_vm_stack_free_call_frame_ex ( ZEND_CALL_INFO ( call ) , call )"		166290	0					
ANR	166295	Callee	zend_vm_stack_free_call_frame_ex		166290	0					
ANR	166296	Identifier	zend_vm_stack_free_call_frame_ex		166290	0					
ANR	166297	ArgumentList	ZEND_CALL_INFO ( call )		166290	1					
ANR	166298	Argument	ZEND_CALL_INFO ( call )		166290	0					
ANR	166299	CallExpression	ZEND_CALL_INFO ( call )		166290	0					
ANR	166300	Callee	ZEND_CALL_INFO		166290	0					
ANR	166301	Identifier	ZEND_CALL_INFO		166290	0					
ANR	166302	ArgumentList	call		166290	1					
ANR	166303	Argument	call		166290	0					
ANR	166304	Identifier	call		166290	0					
ANR	166305	Argument	call		166290	1					
ANR	166306	Identifier	call		166290	0					
ANR	166307	ReturnType	static zend_always_inline void		166290	1					
ANR	166308	Identifier	zend_vm_stack_free_call_frame		166290	2					
ANR	166309	ParameterList	zend_execute_data * call		166290	3					
ANR	166310	Parameter	zend_execute_data * call	278:61:10465:10487	166290	0	True				
ANR	166311	ParameterType	zend_execute_data *		166290	0					
ANR	166312	Identifier	call		166290	1					
ANR	166313	CFGEntryNode	ENTRY		166290		True				
ANR	166314	CFGExitNode	EXIT		166290		True				
ANR	166315	Symbol	call		166290						
ANR	166316	Symbol	ZEND_CALL_INFO		166290						
ANR	166317	DeclStmt									
ANR	166318	Decl							const char	const char * ( const char * * space )	get_active_class_name
ANR	166319	DeclStmt									
ANR	166320	Decl							const char	const char * ( void )	get_active_function_name
ANR	166321	DeclStmt									
ANR	166322	Decl							const char	const char * ( void )	zend_get_executed_filename
ANR	166323	DeclStmt									
ANR	166324	Decl							ZEND_API zend_string	ZEND_API zend_string * ( void )	zend_get_executed_filename_ex
ANR	166325	DeclStmt									
ANR	166326	Decl							ZEND_API uint	ZEND_API uint ( void )	zend_get_executed_lineno
ANR	166327	DeclStmt									
ANR	166328	Decl							ZEND_API zend_bool	ZEND_API zend_bool ( void )	zend_is_executing
ANR	166329	DeclStmt									
ANR	166330	Decl							ZEND_API void	"ZEND_API void ( zend_long seconds , int reset_signals )"	zend_set_timeout
ANR	166331	DeclStmt									
ANR	166332	Decl							ZEND_API void	ZEND_API void ( void )	zend_unset_timeout
ANR	166333	DeclStmt									
ANR	166334	Decl							ZEND_API void	ZEND_API void ( int dummy )	zend_timeout
ANR	166335	DeclStmt									
ANR	166336	Decl							ZEND_API zend_class_entry	"ZEND_API zend_class_entry * ( zend_string * class_name , int fetch_type )"	zend_fetch_class
ANR	166337	DeclStmt									
ANR	166338	Decl							ZEND_API zend_class_entry	"ZEND_API zend_class_entry * ( zend_string * class_name , const zval * key , int fetch_type )"	zend_fetch_class_by_name
ANR	166339	DeclStmt									
ANR	166340	Decl							void	void ( zend_class_entry * ce )	zend_verify_abstract_class
ANR	166341	DeclStmt									
ANR	166342	Decl							ZEND_API void	"ZEND_API void ( zval * result , zval * container , zval * dim )"	zend_fetch_dimension_by_zval
ANR	166343	DeclStmt									
ANR	166344	Decl							ZEND_API zval	"ZEND_API zval * ( const zend_execute_data * execute_data_ptr , uint32_t var )"	zend_get_compiled_variable_value
ANR	166345	DeclStmt									
ANR	166346	Decl							ZEND_API int	"ZEND_API int ( zend_uchar opcode , user_opcode_handler_t handler )"	zend_set_user_opcode_handler
ANR	166347	DeclStmt									
ANR	166348	Decl							ZEND_API user_opcode_handler_t	ZEND_API user_opcode_handler_t ( zend_uchar opcode )	zend_get_user_opcode_handler
ANR	166349	DeclStmt									
ANR	166350	Decl							zval	zval *	zend_free_op
ANR	166351	DeclStmt									
ANR	166352	Decl							ZEND_API zval	"ZEND_API zval * ( int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type )"	zend_get_zval_ptr
ANR	166353	DeclStmt									
ANR	166354	Decl							ZEND_API void	ZEND_API void ( zend_array * symbol_table )	zend_clean_and_cache_symbol_table
ANR	166355	DeclStmt									
ANR	166356	Decl							void	void ( zend_execute_data * execute_data )	zend_free_compiled_variables
ANR	166357	DeclStmt									
ANR	166358	Decl							void	"void ( zend_execute_data * execute_data , uint32_t op_num , uint32_t catch_op_num )"	zend_cleanup_unfinished_execution
ANR	166359	DeclStmt									
ANR	166360	Decl							void	void * *	slot
