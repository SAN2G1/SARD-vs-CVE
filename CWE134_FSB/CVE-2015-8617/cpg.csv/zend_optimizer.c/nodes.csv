command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4166975	File	data/converged/CVE-2015-8617_php-src/zend_optimizer.c								
ANR	4166976	Function	zend_optimizer_zval_dtor_wrapper	30:0:1575:1656							
ANR	4166977	FunctionDef	zend_optimizer_zval_dtor_wrapper (zval * zvalue)		4166976	0					
ANR	4166978	CompoundStatement		31:0:1634:1656	4166976	0					
ANR	4166979	ExpressionStatement	zval_dtor ( zvalue )	32:1:1637:1654	4166976	0	True				
ANR	4166980	CallExpression	zval_dtor ( zvalue )		4166976	0					
ANR	4166981	Callee	zval_dtor		4166976	0					
ANR	4166982	Identifier	zval_dtor		4166976	0					
ANR	4166983	ArgumentList	zvalue		4166976	1					
ANR	4166984	Argument	zvalue		4166976	0					
ANR	4166985	Identifier	zvalue		4166976	0					
ANR	4166986	ReturnType	static void		4166976	1					
ANR	4166987	Identifier	zend_optimizer_zval_dtor_wrapper		4166976	2					
ANR	4166988	ParameterList	zval * zvalue		4166976	3					
ANR	4166989	Parameter	zval * zvalue	30:45:1620:1631	4166976	0	True				
ANR	4166990	ParameterType	zval *		4166976	0					
ANR	4166991	Identifier	zvalue		4166976	1					
ANR	4166992	CFGEntryNode	ENTRY		4166976		True				
ANR	4166993	CFGExitNode	EXIT		4166976		True				
ANR	4166994	Symbol	zvalue		4166976						
ANR	4166995	Function	zend_optimizer_collect_constant	35:0:1659:2014							
ANR	4166996	FunctionDef	"zend_optimizer_collect_constant (zend_optimizer_ctx * ctx , zval * name , zval * value)"		4166995	0					
ANR	4166997	CompoundStatement		36:0:1746:2014	4166995	0					
ANR	4166998	IdentifierDeclStatement	zval val ;	37:1:1749:1757	4166995	0	True				
ANR	4166999	IdentifierDecl	val		4166995	0					
ANR	4167000	IdentifierDeclType	zval		4166995	0					
ANR	4167001	Identifier	val		4166995	1					
ANR	4167002	IfStatement	if ( ! ctx -> constants )		4166995	1					
ANR	4167003	Condition	! ctx -> constants	39:5:1765:1779	4166995	0	True				
ANR	4167004	UnaryOperationExpression	! ctx -> constants		4166995	0					
ANR	4167005	UnaryOperator	!		4166995	0					
ANR	4167006	PtrMemberAccess	ctx -> constants		4166995	1					
ANR	4167007	Identifier	ctx		4166995	0					
ANR	4167008	Identifier	constants		4166995	1					
ANR	4167009	CompoundStatement		4:22:35:35	4166995	1					
ANR	4167010	ExpressionStatement	"ctx -> constants = zend_arena_alloc ( & ctx -> arena , sizeof ( HashTable ) )"	40:2:1786:1851	4166995	0	True				
ANR	4167011	AssignmentExpression	"ctx -> constants = zend_arena_alloc ( & ctx -> arena , sizeof ( HashTable ) )"		4166995	0		=			
ANR	4167012	PtrMemberAccess	ctx -> constants		4166995	0					
ANR	4167013	Identifier	ctx		4166995	0					
ANR	4167014	Identifier	constants		4166995	1					
ANR	4167015	CallExpression	"zend_arena_alloc ( & ctx -> arena , sizeof ( HashTable ) )"		4166995	1					
ANR	4167016	Callee	zend_arena_alloc		4166995	0					
ANR	4167017	Identifier	zend_arena_alloc		4166995	0					
ANR	4167018	ArgumentList	& ctx -> arena		4166995	1					
ANR	4167019	Argument	& ctx -> arena		4166995	0					
ANR	4167020	UnaryOperationExpression	& ctx -> arena		4166995	0					
ANR	4167021	UnaryOperator	&		4166995	0					
ANR	4167022	PtrMemberAccess	ctx -> arena		4166995	1					
ANR	4167023	Identifier	ctx		4166995	0					
ANR	4167024	Identifier	arena		4166995	1					
ANR	4167025	Argument	sizeof ( HashTable )		4166995	1					
ANR	4167026	SizeofExpression	sizeof ( HashTable )		4166995	0					
ANR	4167027	Sizeof	sizeof		4166995	0					
ANR	4167028	SizeofOperand	HashTable		4166995	1					
ANR	4167029	ExpressionStatement	"zend_hash_init ( ctx -> constants , 16 , NULL , zend_optimizer_zval_dtor_wrapper , 0 )"	41:2:1855:1932	4166995	1	True				
ANR	4167030	CallExpression	"zend_hash_init ( ctx -> constants , 16 , NULL , zend_optimizer_zval_dtor_wrapper , 0 )"		4166995	0					
ANR	4167031	Callee	zend_hash_init		4166995	0					
ANR	4167032	Identifier	zend_hash_init		4166995	0					
ANR	4167033	ArgumentList	ctx -> constants		4166995	1					
ANR	4167034	Argument	ctx -> constants		4166995	0					
ANR	4167035	PtrMemberAccess	ctx -> constants		4166995	0					
ANR	4167036	Identifier	ctx		4166995	0					
ANR	4167037	Identifier	constants		4166995	1					
ANR	4167038	Argument	16		4166995	1					
ANR	4167039	PrimaryExpression	16		4166995	0					
ANR	4167040	Argument	NULL		4166995	2					
ANR	4167041	Identifier	NULL		4166995	0					
ANR	4167042	Argument	zend_optimizer_zval_dtor_wrapper		4166995	3					
ANR	4167043	Identifier	zend_optimizer_zval_dtor_wrapper		4166995	0					
ANR	4167044	Argument	0		4166995	4					
ANR	4167045	PrimaryExpression	0		4166995	0					
ANR	4167046	ExpressionStatement	"ZVAL_DUP ( & val , value )"	43:1:1938:1959	4166995	2	True				
ANR	4167047	CallExpression	"ZVAL_DUP ( & val , value )"		4166995	0					
ANR	4167048	Callee	ZVAL_DUP		4166995	0					
ANR	4167049	Identifier	ZVAL_DUP		4166995	0					
ANR	4167050	ArgumentList	& val		4166995	1					
ANR	4167051	Argument	& val		4166995	0					
ANR	4167052	UnaryOperationExpression	& val		4166995	0					
ANR	4167053	UnaryOperator	&		4166995	0					
ANR	4167054	Identifier	val		4166995	1					
ANR	4167055	Argument	value		4166995	1					
ANR	4167056	Identifier	value		4166995	0					
ANR	4167057	ExpressionStatement	"zend_hash_add ( ctx -> constants , Z_STR_P ( name ) , & val )"	44:1:1962:2012	4166995	3	True				
ANR	4167058	CallExpression	"zend_hash_add ( ctx -> constants , Z_STR_P ( name ) , & val )"		4166995	0					
ANR	4167059	Callee	zend_hash_add		4166995	0					
ANR	4167060	Identifier	zend_hash_add		4166995	0					
ANR	4167061	ArgumentList	ctx -> constants		4166995	1					
ANR	4167062	Argument	ctx -> constants		4166995	0					
ANR	4167063	PtrMemberAccess	ctx -> constants		4166995	0					
ANR	4167064	Identifier	ctx		4166995	0					
ANR	4167065	Identifier	constants		4166995	1					
ANR	4167066	Argument	Z_STR_P ( name )		4166995	1					
ANR	4167067	CallExpression	Z_STR_P ( name )		4166995	0					
ANR	4167068	Callee	Z_STR_P		4166995	0					
ANR	4167069	Identifier	Z_STR_P		4166995	0					
ANR	4167070	ArgumentList	name		4166995	1					
ANR	4167071	Argument	name		4166995	0					
ANR	4167072	Identifier	name		4166995	0					
ANR	4167073	Argument	& val		4166995	2					
ANR	4167074	UnaryOperationExpression	& val		4166995	0					
ANR	4167075	UnaryOperator	&		4166995	0					
ANR	4167076	Identifier	val		4166995	1					
ANR	4167077	ReturnType	void		4166995	1					
ANR	4167078	Identifier	zend_optimizer_collect_constant		4166995	2					
ANR	4167079	ParameterList	"zend_optimizer_ctx * ctx , zval * name , zval * value"		4166995	3					
ANR	4167080	Parameter	zend_optimizer_ctx * ctx	35:37:1696:1718	4166995	0	True				
ANR	4167081	ParameterType	zend_optimizer_ctx *		4166995	0					
ANR	4167082	Identifier	ctx		4166995	1					
ANR	4167083	Parameter	zval * name	35:62:1721:1730	4166995	1	True				
ANR	4167084	ParameterType	zval *		4166995	0					
ANR	4167085	Identifier	name		4166995	1					
ANR	4167086	Parameter	zval * value	35:74:1733:1743	4166995	2	True				
ANR	4167087	ParameterType	zval *		4166995	0					
ANR	4167088	Identifier	value		4166995	1					
ANR	4167089	CFGEntryNode	ENTRY		4166995		True				
ANR	4167090	CFGExitNode	EXIT		4166995		True				
ANR	4167091	Symbol	val		4166995						
ANR	4167092	Symbol	& val		4166995						
ANR	4167093	Symbol	& ctx -> arena		4166995						
ANR	4167094	Symbol	NULL		4166995						
ANR	4167095	Symbol	zend_arena_alloc		4166995						
ANR	4167096	Symbol	ctx -> constants		4166995						
ANR	4167097	Symbol	ctx		4166995						
ANR	4167098	Symbol	name		4166995						
ANR	4167099	Symbol	zend_optimizer_zval_dtor_wrapper		4166995						
ANR	4167100	Symbol	Z_STR_P		4166995						
ANR	4167101	Symbol	value		4166995						
ANR	4167102	Symbol	* ctx		4166995						
ANR	4167103	Function	zend_optimizer_get_collected_constant	47:0:2017:2236							
ANR	4167104	FunctionDef	"zend_optimizer_get_collected_constant (HashTable * constants , zval * name , zval * value)"		4167103	0					
ANR	4167105	CompoundStatement		48:0:2106:2236	4167103	0					
ANR	4167106	IdentifierDeclStatement	zval * val ;	49:1:2109:2118	4167103	0	True				
ANR	4167107	IdentifierDecl	* val		4167103	0					
ANR	4167108	IdentifierDeclType	zval *		4167103	0					
ANR	4167109	Identifier	val		4167103	1					
ANR	4167110	IfStatement	"if ( ( val = zend_hash_find ( constants , Z_STR_P ( name ) ) ) != NULL )"		4167103	1					
ANR	4167111	Condition	"( val = zend_hash_find ( constants , Z_STR_P ( name ) ) ) != NULL"	51:5:2126:2181	4167103	0	True				
ANR	4167112	EqualityExpression	"( val = zend_hash_find ( constants , Z_STR_P ( name ) ) ) != NULL"		4167103	0		!=			
ANR	4167113	AssignmentExpression	"val = zend_hash_find ( constants , Z_STR_P ( name ) )"		4167103	0		=			
ANR	4167114	Identifier	val		4167103	0					
ANR	4167115	CallExpression	"zend_hash_find ( constants , Z_STR_P ( name ) )"		4167103	1					
ANR	4167116	Callee	zend_hash_find		4167103	0					
ANR	4167117	Identifier	zend_hash_find		4167103	0					
ANR	4167118	ArgumentList	constants		4167103	1					
ANR	4167119	Argument	constants		4167103	0					
ANR	4167120	Identifier	constants		4167103	0					
ANR	4167121	Argument	Z_STR_P ( name )		4167103	1					
ANR	4167122	CallExpression	Z_STR_P ( name )		4167103	0					
ANR	4167123	Callee	Z_STR_P		4167103	0					
ANR	4167124	Identifier	Z_STR_P		4167103	0					
ANR	4167125	ArgumentList	name		4167103	1					
ANR	4167126	Argument	name		4167103	0					
ANR	4167127	Identifier	name		4167103	0					
ANR	4167128	Identifier	NULL		4167103	1					
ANR	4167129	CompoundStatement		4:63:77:77	4167103	1					
ANR	4167130	ExpressionStatement	"ZVAL_DUP ( value , val )"	52:2:2188:2208	4167103	0	True				
ANR	4167131	CallExpression	"ZVAL_DUP ( value , val )"		4167103	0					
ANR	4167132	Callee	ZVAL_DUP		4167103	0					
ANR	4167133	Identifier	ZVAL_DUP		4167103	0					
ANR	4167134	ArgumentList	value		4167103	1					
ANR	4167135	Argument	value		4167103	0					
ANR	4167136	Identifier	value		4167103	0					
ANR	4167137	Argument	val		4167103	1					
ANR	4167138	Identifier	val		4167103	0					
ANR	4167139	ReturnStatement	return 1 ;	53:2:2212:2220	4167103	1	True				
ANR	4167140	PrimaryExpression	1		4167103	0					
ANR	4167141	ReturnStatement	return 0 ;	55:1:2226:2234	4167103	2	True				
ANR	4167142	PrimaryExpression	0		4167103	0					
ANR	4167143	ReturnType	int		4167103	1					
ANR	4167144	Identifier	zend_optimizer_get_collected_constant		4167103	2					
ANR	4167145	ParameterList	"HashTable * constants , zval * name , zval * value"		4167103	3					
ANR	4167146	Parameter	HashTable * constants	47:42:2059:2078	4167103	0	True				
ANR	4167147	ParameterType	HashTable *		4167103	0					
ANR	4167148	Identifier	constants		4167103	1					
ANR	4167149	Parameter	zval * name	47:64:2081:2090	4167103	1	True				
ANR	4167150	ParameterType	zval *		4167103	0					
ANR	4167151	Identifier	name		4167103	1					
ANR	4167152	Parameter	zval * value	47:76:2093:2103	4167103	2	True				
ANR	4167153	ParameterType	zval *		4167103	0					
ANR	4167154	Identifier	value		4167103	1					
ANR	4167155	CFGEntryNode	ENTRY		4167103		True				
ANR	4167156	CFGExitNode	EXIT		4167103		True				
ANR	4167157	Symbol	val		4167103						
ANR	4167158	Symbol	zend_hash_find		4167103						
ANR	4167159	Symbol	NULL		4167103						
ANR	4167160	Symbol	name		4167103						
ANR	4167161	Symbol	constants		4167103						
ANR	4167162	Symbol	Z_STR_P		4167103						
ANR	4167163	Symbol	value		4167103						
ANR	4167164	Function	zend_optimizer_lookup_cv	58:0:2239:3662							
ANR	4167165	FunctionDef	"zend_optimizer_lookup_cv (zend_op_array * op_array , zend_string * name)"		4167164	0					
ANR	4167166	CompoundStatement		59:0:2312:3662	4167164	0					
ANR	4167167	IdentifierDeclStatement	int i = 0 ;	60:1:2315:2324	4167164	0	True				
ANR	4167168	IdentifierDecl	i = 0		4167164	0					
ANR	4167169	IdentifierDeclType	int		4167164	0					
ANR	4167170	Identifier	i		4167164	1					
ANR	4167171	AssignmentExpression	i = 0		4167164	2		=			
ANR	4167172	Identifier	i		4167164	0					
ANR	4167173	PrimaryExpression	0		4167164	1					
ANR	4167174	IdentifierDeclStatement	zend_ulong hash_value = zend_string_hash_val ( name ) ;	61:1:2327:2377	4167164	1	True				
ANR	4167175	IdentifierDecl	hash_value = zend_string_hash_val ( name )		4167164	0					
ANR	4167176	IdentifierDeclType	zend_ulong		4167164	0					
ANR	4167177	Identifier	hash_value		4167164	1					
ANR	4167178	AssignmentExpression	hash_value = zend_string_hash_val ( name )		4167164	2		=			
ANR	4167179	Identifier	hash_value		4167164	0					
ANR	4167180	CallExpression	zend_string_hash_val ( name )		4167164	1					
ANR	4167181	Callee	zend_string_hash_val		4167164	0					
ANR	4167182	Identifier	zend_string_hash_val		4167164	0					
ANR	4167183	ArgumentList	name		4167164	1					
ANR	4167184	Argument	name		4167164	0					
ANR	4167185	Identifier	name		4167164	0					
ANR	4167186	WhileStatement	while ( i < op_array -> last_var )		4167164	2					
ANR	4167187	Condition	i < op_array -> last_var	63:8:2388:2409	4167164	0	True				
ANR	4167188	RelationalExpression	i < op_array -> last_var		4167164	0		<			
ANR	4167189	Identifier	i		4167164	0					
ANR	4167190	PtrMemberAccess	op_array -> last_var		4167164	1					
ANR	4167191	Identifier	op_array		4167164	0					
ANR	4167192	Identifier	last_var		4167164	1					
ANR	4167193	CompoundStatement		5:32:99:99	4167164	1					
ANR	4167194	IfStatement	"if ( op_array -> vars [ i ] == name || ( ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0 ) )"		4167164	0					
ANR	4167195	Condition	"op_array -> vars [ i ] == name || ( ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0 )"	64:6:2420:2634	4167164	0	True				
ANR	4167196	OrExpression	"op_array -> vars [ i ] == name || ( ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0 )"		4167164	0		||			
ANR	4167197	EqualityExpression	op_array -> vars [ i ] == name		4167164	0		==			
ANR	4167198	ArrayIndexing	op_array -> vars [ i ]		4167164	0					
ANR	4167199	PtrMemberAccess	op_array -> vars		4167164	0					
ANR	4167200	Identifier	op_array		4167164	0					
ANR	4167201	Identifier	vars		4167164	1					
ANR	4167202	Identifier	i		4167164	1					
ANR	4167203	Identifier	name		4167164	1					
ANR	4167204	AndExpression	"ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0"		4167164	1		&&			
ANR	4167205	EqualityExpression	ZSTR_H ( op_array -> vars [ i ] ) == hash_value		4167164	0		==			
ANR	4167206	CallExpression	ZSTR_H ( op_array -> vars [ i ] )		4167164	0					
ANR	4167207	Callee	ZSTR_H		4167164	0					
ANR	4167208	Identifier	ZSTR_H		4167164	0					
ANR	4167209	ArgumentList	op_array -> vars [ i ]		4167164	1					
ANR	4167210	Argument	op_array -> vars [ i ]		4167164	0					
ANR	4167211	ArrayIndexing	op_array -> vars [ i ]		4167164	0					
ANR	4167212	PtrMemberAccess	op_array -> vars		4167164	0					
ANR	4167213	Identifier	op_array		4167164	0					
ANR	4167214	Identifier	vars		4167164	1					
ANR	4167215	Identifier	i		4167164	1					
ANR	4167216	Identifier	hash_value		4167164	1					
ANR	4167217	AndExpression	"ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0"		4167164	1		&&			
ANR	4167218	EqualityExpression	ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name )		4167164	0		==			
ANR	4167219	CallExpression	ZSTR_LEN ( op_array -> vars [ i ] )		4167164	0					
ANR	4167220	Callee	ZSTR_LEN		4167164	0					
ANR	4167221	Identifier	ZSTR_LEN		4167164	0					
ANR	4167222	ArgumentList	op_array -> vars [ i ]		4167164	1					
ANR	4167223	Argument	op_array -> vars [ i ]		4167164	0					
ANR	4167224	ArrayIndexing	op_array -> vars [ i ]		4167164	0					
ANR	4167225	PtrMemberAccess	op_array -> vars		4167164	0					
ANR	4167226	Identifier	op_array		4167164	0					
ANR	4167227	Identifier	vars		4167164	1					
ANR	4167228	Identifier	i		4167164	1					
ANR	4167229	CallExpression	ZSTR_LEN ( name )		4167164	1					
ANR	4167230	Callee	ZSTR_LEN		4167164	0					
ANR	4167231	Identifier	ZSTR_LEN		4167164	0					
ANR	4167232	ArgumentList	name		4167164	1					
ANR	4167233	Argument	name		4167164	0					
ANR	4167234	Identifier	name		4167164	0					
ANR	4167235	EqualityExpression	"memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0"		4167164	1		==			
ANR	4167236	CallExpression	"memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		4167164	0					
ANR	4167237	Callee	memcmp		4167164	0					
ANR	4167238	Identifier	memcmp		4167164	0					
ANR	4167239	ArgumentList	ZSTR_VAL ( op_array -> vars [ i ] )		4167164	1					
ANR	4167240	Argument	ZSTR_VAL ( op_array -> vars [ i ] )		4167164	0					
ANR	4167241	CallExpression	ZSTR_VAL ( op_array -> vars [ i ] )		4167164	0					
ANR	4167242	Callee	ZSTR_VAL		4167164	0					
ANR	4167243	Identifier	ZSTR_VAL		4167164	0					
ANR	4167244	ArgumentList	op_array -> vars [ i ]		4167164	1					
ANR	4167245	Argument	op_array -> vars [ i ]		4167164	0					
ANR	4167246	ArrayIndexing	op_array -> vars [ i ]		4167164	0					
ANR	4167247	PtrMemberAccess	op_array -> vars		4167164	0					
ANR	4167248	Identifier	op_array		4167164	0					
ANR	4167249	Identifier	vars		4167164	1					
ANR	4167250	Identifier	i		4167164	1					
ANR	4167251	Argument	ZSTR_VAL ( name )		4167164	1					
ANR	4167252	CallExpression	ZSTR_VAL ( name )		4167164	0					
ANR	4167253	Callee	ZSTR_VAL		4167164	0					
ANR	4167254	Identifier	ZSTR_VAL		4167164	0					
ANR	4167255	ArgumentList	name		4167164	1					
ANR	4167256	Argument	name		4167164	0					
ANR	4167257	Identifier	name		4167164	0					
ANR	4167258	Argument	ZSTR_LEN ( name )		4167164	2					
ANR	4167259	CallExpression	ZSTR_LEN ( name )		4167164	0					
ANR	4167260	Callee	ZSTR_LEN		4167164	0					
ANR	4167261	Identifier	ZSTR_LEN		4167164	0					
ANR	4167262	ArgumentList	name		4167164	1					
ANR	4167263	Argument	name		4167164	0					
ANR	4167264	Identifier	name		4167164	0					
ANR	4167265	PrimaryExpression	0		4167164	1					
ANR	4167266	CompoundStatement		9:82:324:324	4167164	1					
ANR	4167267	ReturnStatement	"return ( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i ) ;"	68:3:2642:2695	4167164	0	True				
ANR	4167268	CastExpression	"( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		4167164	0					
ANR	4167269	CastTarget	int		4167164	0					
ANR	4167270	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		4167164	1					
ANR	4167271	CastTarget	zend_intptr_t		4167164	0					
ANR	4167272	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , i )"		4167164	1					
ANR	4167273	Callee	ZEND_CALL_VAR_NUM		4167164	0					
ANR	4167274	Identifier	ZEND_CALL_VAR_NUM		4167164	0					
ANR	4167275	ArgumentList	NULL		4167164	1					
ANR	4167276	Argument	NULL		4167164	0					
ANR	4167277	Identifier	NULL		4167164	0					
ANR	4167278	Argument	i		4167164	1					
ANR	4167279	Identifier	i		4167164	0					
ANR	4167280	ExpressionStatement	i ++	70:2:2703:2706	4167164	1	True				
ANR	4167281	PostIncDecOperationExpression	i ++		4167164	0					
ANR	4167282	Identifier	i		4167164	0					
ANR	4167283	IncDec	++		4167164	1					
ANR	4167284	ExpressionStatement	i = op_array -> last_var	72:1:2712:2734	4167164	3	True				
ANR	4167285	AssignmentExpression	i = op_array -> last_var		4167164	0		=			
ANR	4167286	Identifier	i		4167164	0					
ANR	4167287	PtrMemberAccess	op_array -> last_var		4167164	1					
ANR	4167288	Identifier	op_array		4167164	0					
ANR	4167289	Identifier	last_var		4167164	1					
ANR	4167290	ExpressionStatement	op_array -> last_var ++	73:1:2737:2757	4167164	4	True				
ANR	4167291	PostIncDecOperationExpression	op_array -> last_var ++		4167164	0					
ANR	4167292	PtrMemberAccess	op_array -> last_var		4167164	0					
ANR	4167293	Identifier	op_array		4167164	0					
ANR	4167294	Identifier	last_var		4167164	1					
ANR	4167295	IncDec	++		4167164	1					
ANR	4167296	ExpressionStatement	"op_array -> vars = erealloc ( op_array -> vars , op_array -> last_var * sizeof ( zend_string * ) )"	74:1:2760:2844	4167164	5	True				
ANR	4167297	AssignmentExpression	"op_array -> vars = erealloc ( op_array -> vars , op_array -> last_var * sizeof ( zend_string * ) )"		4167164	0		=			
ANR	4167298	PtrMemberAccess	op_array -> vars		4167164	0					
ANR	4167299	Identifier	op_array		4167164	0					
ANR	4167300	Identifier	vars		4167164	1					
ANR	4167301	CallExpression	"erealloc ( op_array -> vars , op_array -> last_var * sizeof ( zend_string * ) )"		4167164	1					
ANR	4167302	Callee	erealloc		4167164	0					
ANR	4167303	Identifier	erealloc		4167164	0					
ANR	4167304	ArgumentList	op_array -> vars		4167164	1					
ANR	4167305	Argument	op_array -> vars		4167164	0					
ANR	4167306	PtrMemberAccess	op_array -> vars		4167164	0					
ANR	4167307	Identifier	op_array		4167164	0					
ANR	4167308	Identifier	vars		4167164	1					
ANR	4167309	Argument	op_array -> last_var * sizeof ( zend_string * )		4167164	1					
ANR	4167310	MultiplicativeExpression	op_array -> last_var * sizeof ( zend_string * )		4167164	0		*			
ANR	4167311	PtrMemberAccess	op_array -> last_var		4167164	0					
ANR	4167312	Identifier	op_array		4167164	0					
ANR	4167313	Identifier	last_var		4167164	1					
ANR	4167314	SizeofExpression	sizeof ( zend_string * )		4167164	1					
ANR	4167315	Sizeof	sizeof		4167164	0					
ANR	4167316	SizeofOperand	zend_string *		4167164	1					
ANR	4167317	ExpressionStatement	"op_array -> vars [ i ] = zend_string_dup ( name , 0 )"	75:1:2847:2891	4167164	6	True				
ANR	4167318	AssignmentExpression	"op_array -> vars [ i ] = zend_string_dup ( name , 0 )"		4167164	0		=			
ANR	4167319	ArrayIndexing	op_array -> vars [ i ]		4167164	0					
ANR	4167320	PtrMemberAccess	op_array -> vars		4167164	0					
ANR	4167321	Identifier	op_array		4167164	0					
ANR	4167322	Identifier	vars		4167164	1					
ANR	4167323	Identifier	i		4167164	1					
ANR	4167324	CallExpression	"zend_string_dup ( name , 0 )"		4167164	1					
ANR	4167325	Callee	zend_string_dup		4167164	0					
ANR	4167326	Identifier	zend_string_dup		4167164	0					
ANR	4167327	ArgumentList	name		4167164	1					
ANR	4167328	Argument	name		4167164	0					
ANR	4167329	Identifier	name		4167164	0					
ANR	4167330	Argument	0		4167164	1					
ANR	4167331	PrimaryExpression	0		4167164	0					
ANR	4167332	CompoundStatement		22:2:695:733	4167164	7					
ANR	4167333	IdentifierDeclStatement	zend_op * opline = op_array -> opcodes ;	79:2:2969:3004	4167164	0	True				
ANR	4167334	IdentifierDecl	* opline = op_array -> opcodes		4167164	0					
ANR	4167335	IdentifierDeclType	zend_op *		4167164	0					
ANR	4167336	Identifier	opline		4167164	1					
ANR	4167337	AssignmentExpression	* opline = op_array -> opcodes		4167164	2		=			
ANR	4167338	Identifier	opline		4167164	0					
ANR	4167339	PtrMemberAccess	op_array -> opcodes		4167164	1					
ANR	4167340	Identifier	op_array		4167164	0					
ANR	4167341	Identifier	opcodes		4167164	1					
ANR	4167342	IdentifierDeclStatement	zend_op * end = opline + op_array -> last ;	80:2:3008:3046	4167164	1	True				
ANR	4167343	IdentifierDecl	* end = opline + op_array -> last		4167164	0					
ANR	4167344	IdentifierDeclType	zend_op *		4167164	0					
ANR	4167345	Identifier	end		4167164	1					
ANR	4167346	AssignmentExpression	* end = opline + op_array -> last		4167164	2		=			
ANR	4167347	Identifier	end		4167164	0					
ANR	4167348	AdditiveExpression	opline + op_array -> last		4167164	1		+			
ANR	4167349	Identifier	opline		4167164	0					
ANR	4167350	PtrMemberAccess	op_array -> last		4167164	1					
ANR	4167351	Identifier	op_array		4167164	0					
ANR	4167352	Identifier	last		4167164	1					
ANR	4167353	WhileStatement	while ( opline < end )		4167164	2					
ANR	4167354	Condition	opline < end	81:9:3057:3068	4167164	0	True				
ANR	4167355	RelationalExpression	opline < end		4167164	0		<			
ANR	4167356	Identifier	opline		4167164	0					
ANR	4167357	Identifier	end		4167164	1					
ANR	4167358	CompoundStatement		23:23:758:758	4167164	1					
ANR	4167359	IfStatement	if ( opline -> op1_type & ( IS_TMP_VAR | IS_VAR ) )		4167164	0					
ANR	4167360	Condition	opline -> op1_type & ( IS_TMP_VAR | IS_VAR )	82:7:3080:3117	4167164	0	True				
ANR	4167361	BitAndExpression	opline -> op1_type & ( IS_TMP_VAR | IS_VAR )		4167164	0		&			
ANR	4167362	PtrMemberAccess	opline -> op1_type		4167164	0					
ANR	4167363	Identifier	opline		4167164	0					
ANR	4167364	Identifier	op1_type		4167164	1					
ANR	4167365	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		4167164	1		|			
ANR	4167366	Identifier	IS_TMP_VAR		4167164	0					
ANR	4167367	Identifier	IS_VAR		4167164	1					
ANR	4167368	CompoundStatement		24:47:807:807	4167164	1					
ANR	4167369	ExpressionStatement	opline -> op1 . var += sizeof ( zval )	83:4:3126:3157	4167164	0	True				
ANR	4167370	AssignmentExpression	opline -> op1 . var += sizeof ( zval )		4167164	0		+=			
ANR	4167371	MemberAccess	opline -> op1 . var		4167164	0					
ANR	4167372	PtrMemberAccess	opline -> op1		4167164	0					
ANR	4167373	Identifier	opline		4167164	0					
ANR	4167374	Identifier	op1		4167164	1					
ANR	4167375	Identifier	var		4167164	1					
ANR	4167376	SizeofExpression	sizeof ( zval )		4167164	1					
ANR	4167377	Sizeof	sizeof		4167164	0					
ANR	4167378	SizeofOperand	zval		4167164	1					
ANR	4167379	IfStatement	if ( opline -> op2_type & ( IS_TMP_VAR | IS_VAR ) )		4167164	1					
ANR	4167380	Condition	opline -> op2_type & ( IS_TMP_VAR | IS_VAR )	85:7:3171:3208	4167164	0	True				
ANR	4167381	BitAndExpression	opline -> op2_type & ( IS_TMP_VAR | IS_VAR )		4167164	0		&			
ANR	4167382	PtrMemberAccess	opline -> op2_type		4167164	0					
ANR	4167383	Identifier	opline		4167164	0					
ANR	4167384	Identifier	op2_type		4167164	1					
ANR	4167385	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		4167164	1		|			
ANR	4167386	Identifier	IS_TMP_VAR		4167164	0					
ANR	4167387	Identifier	IS_VAR		4167164	1					
ANR	4167388	CompoundStatement		27:47:898:898	4167164	1					
ANR	4167389	ExpressionStatement	opline -> op2 . var += sizeof ( zval )	86:4:3217:3248	4167164	0	True				
ANR	4167390	AssignmentExpression	opline -> op2 . var += sizeof ( zval )		4167164	0		+=			
ANR	4167391	MemberAccess	opline -> op2 . var		4167164	0					
ANR	4167392	PtrMemberAccess	opline -> op2		4167164	0					
ANR	4167393	Identifier	opline		4167164	0					
ANR	4167394	Identifier	op2		4167164	1					
ANR	4167395	Identifier	var		4167164	1					
ANR	4167396	SizeofExpression	sizeof ( zval )		4167164	1					
ANR	4167397	Sizeof	sizeof		4167164	0					
ANR	4167398	SizeofOperand	zval		4167164	1					
ANR	4167399	IfStatement	if ( opline -> result_type & ( IS_TMP_VAR | IS_VAR ) )		4167164	2					
ANR	4167400	Condition	opline -> result_type & ( IS_TMP_VAR | IS_VAR )	88:7:3262:3302	4167164	0	True				
ANR	4167401	BitAndExpression	opline -> result_type & ( IS_TMP_VAR | IS_VAR )		4167164	0		&			
ANR	4167402	PtrMemberAccess	opline -> result_type		4167164	0					
ANR	4167403	Identifier	opline		4167164	0					
ANR	4167404	Identifier	result_type		4167164	1					
ANR	4167405	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		4167164	1		|			
ANR	4167406	Identifier	IS_TMP_VAR		4167164	0					
ANR	4167407	Identifier	IS_VAR		4167164	1					
ANR	4167408	CompoundStatement		30:50:992:992	4167164	1					
ANR	4167409	ExpressionStatement	opline -> result . var += sizeof ( zval )	89:4:3311:3345	4167164	0	True				
ANR	4167410	AssignmentExpression	opline -> result . var += sizeof ( zval )		4167164	0		+=			
ANR	4167411	MemberAccess	opline -> result . var		4167164	0					
ANR	4167412	PtrMemberAccess	opline -> result		4167164	0					
ANR	4167413	Identifier	opline		4167164	0					
ANR	4167414	Identifier	result		4167164	1					
ANR	4167415	Identifier	var		4167164	1					
ANR	4167416	SizeofExpression	sizeof ( zval )		4167164	1					
ANR	4167417	Sizeof	sizeof		4167164	0					
ANR	4167418	SizeofOperand	zval		4167164	1					
ANR	4167419	IfStatement	if ( opline -> opcode == ZEND_DECLARE_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED )		4167164	3					
ANR	4167420	Condition	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED	91:7:3359:3531	4167164	0	True				
ANR	4167421	OrExpression	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED		4167164	0		||			
ANR	4167422	EqualityExpression	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS		4167164	0		==			
ANR	4167423	PtrMemberAccess	opline -> opcode		4167164	0					
ANR	4167424	Identifier	opline		4167164	0					
ANR	4167425	Identifier	opcode		4167164	1					
ANR	4167426	Identifier	ZEND_DECLARE_INHERITED_CLASS		4167164	1					
ANR	4167427	OrExpression	opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS || opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED		4167164	1		||			
ANR	4167428	EqualityExpression	opline -> opcode == ZEND_DECLARE_ANON_INHERITED_CLASS		4167164	0		==			
ANR	4167429	PtrMemberAccess	opline -> opcode		4167164	0					
ANR	4167430	Identifier	opline		4167164	0					
ANR	4167431	Identifier	opcode		4167164	1					
ANR	4167432	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		4167164	1					
ANR	4167433	EqualityExpression	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED		4167164	1		==			
ANR	4167434	PtrMemberAccess	opline -> opcode		4167164	0					
ANR	4167435	Identifier	opline		4167164	0					
ANR	4167436	Identifier	opcode		4167164	1					
ANR	4167437	Identifier	ZEND_DECLARE_INHERITED_CLASS_DELAYED		4167164	1					
ANR	4167438	CompoundStatement		35:63:1221:1221	4167164	1					
ANR	4167439	ExpressionStatement	opline -> extended_value += sizeof ( zval )	94:4:3540:3578	4167164	0	True				
ANR	4167440	AssignmentExpression	opline -> extended_value += sizeof ( zval )		4167164	0		+=			
ANR	4167441	PtrMemberAccess	opline -> extended_value		4167164	0					
ANR	4167442	Identifier	opline		4167164	0					
ANR	4167443	Identifier	extended_value		4167164	1					
ANR	4167444	SizeofExpression	sizeof ( zval )		4167164	1					
ANR	4167445	Sizeof	sizeof		4167164	0					
ANR	4167446	SizeofOperand	zval		4167164	1					
ANR	4167447	ExpressionStatement	opline ++	96:3:3588:3596	4167164	4	True				
ANR	4167448	PostIncDecOperationExpression	opline ++		4167164	0					
ANR	4167449	Identifier	opline		4167164	0					
ANR	4167450	IncDec	++		4167164	1					
ANR	4167451	ReturnStatement	"return ( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i ) ;"	100:1:3607:3660	4167164	8	True				
ANR	4167452	CastExpression	"( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		4167164	0					
ANR	4167453	CastTarget	int		4167164	0					
ANR	4167454	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		4167164	1					
ANR	4167455	CastTarget	zend_intptr_t		4167164	0					
ANR	4167456	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , i )"		4167164	1					
ANR	4167457	Callee	ZEND_CALL_VAR_NUM		4167164	0					
ANR	4167458	Identifier	ZEND_CALL_VAR_NUM		4167164	0					
ANR	4167459	ArgumentList	NULL		4167164	1					
ANR	4167460	Argument	NULL		4167164	0					
ANR	4167461	Identifier	NULL		4167164	0					
ANR	4167462	Argument	i		4167164	1					
ANR	4167463	Identifier	i		4167164	0					
ANR	4167464	ReturnType	int		4167164	1					
ANR	4167465	Identifier	zend_optimizer_lookup_cv		4167164	2					
ANR	4167466	ParameterList	"zend_op_array * op_array , zend_string * name"		4167164	3					
ANR	4167467	Parameter	zend_op_array * op_array	58:29:2268:2290	4167164	0	True				
ANR	4167468	ParameterType	zend_op_array *		4167164	0					
ANR	4167469	Identifier	op_array		4167164	1					
ANR	4167470	Parameter	zend_string * name	58:54:2293:2309	4167164	1	True				
ANR	4167471	ParameterType	zend_string *		4167164	0					
ANR	4167472	Identifier	name		4167164	1					
ANR	4167473	CFGEntryNode	ENTRY		4167164		True				
ANR	4167474	CFGExitNode	EXIT		4167164		True				
ANR	4167475	Symbol	opline -> op1		4167164						
ANR	4167476	Symbol	opline -> op2		4167164						
ANR	4167477	Symbol	opline -> op2 . var		4167164						
ANR	4167478	Symbol	op_array -> last_var		4167164						
ANR	4167479	Symbol	ZSTR_H		4167164						
ANR	4167480	Symbol	zend_string_dup		4167164						
ANR	4167481	Symbol	opline -> result		4167164						
ANR	4167482	Symbol	opline -> extended_value		4167164						
ANR	4167483	Symbol	* op_array -> vars		4167164						
ANR	4167484	Symbol	memcmp		4167164						
ANR	4167485	Symbol	opline		4167164						
ANR	4167486	Symbol	op_array -> opcodes		4167164						
ANR	4167487	Symbol	zend_string_hash_val		4167164						
ANR	4167488	Symbol	end		4167164						
ANR	4167489	Symbol	opline -> op1 . var		4167164						
ANR	4167490	Symbol	erealloc		4167164						
ANR	4167491	Symbol	ZEND_DECLARE_INHERITED_CLASS_DELAYED		4167164						
ANR	4167492	Symbol	IS_TMP_VAR		4167164						
ANR	4167493	Symbol	opline -> result_type		4167164						
ANR	4167494	Symbol	op_array -> vars		4167164						
ANR	4167495	Symbol	NULL		4167164						
ANR	4167496	Symbol	ZEND_DECLARE_ANON_INHERITED_CLASS		4167164						
ANR	4167497	Symbol	i		4167164						
ANR	4167498	Symbol	* op_array		4167164						
ANR	4167499	Symbol	opline -> op1_type		4167164						
ANR	4167500	Symbol	ZSTR_VAL		4167164						
ANR	4167501	Symbol	op_array -> last		4167164						
ANR	4167502	Symbol	* i		4167164						
ANR	4167503	Symbol	* opline		4167164						
ANR	4167504	Symbol	opline -> opcode		4167164						
ANR	4167505	Symbol	ZEND_CALL_VAR_NUM		4167164						
ANR	4167506	Symbol	name		4167164						
ANR	4167507	Symbol	ZSTR_LEN		4167164						
ANR	4167508	Symbol	ZEND_DECLARE_INHERITED_CLASS		4167164						
ANR	4167509	Symbol	opline -> op2_type		4167164						
ANR	4167510	Symbol	hash_value		4167164						
ANR	4167511	Symbol	* * op_array		4167164						
ANR	4167512	Symbol	IS_VAR		4167164						
ANR	4167513	Symbol	op_array		4167164						
ANR	4167514	Symbol	opline -> result . var		4167164						
ANR	4167515	Function	zend_optimizer_add_literal	103:0:3665:3991							
ANR	4167516	FunctionDef	"zend_optimizer_add_literal (zend_op_array * op_array , zval * zv)"		4167515	0					
ANR	4167517	CompoundStatement		104:0:3731:3991	4167515	0					
ANR	4167518	IdentifierDeclStatement	int i = op_array -> last_literal ;	105:1:3734:3764	4167515	0	True				
ANR	4167519	IdentifierDecl	i = op_array -> last_literal		4167515	0					
ANR	4167520	IdentifierDeclType	int		4167515	0					
ANR	4167521	Identifier	i		4167515	1					
ANR	4167522	AssignmentExpression	i = op_array -> last_literal		4167515	2		=			
ANR	4167523	Identifier	i		4167515	0					
ANR	4167524	PtrMemberAccess	op_array -> last_literal		4167515	1					
ANR	4167525	Identifier	op_array		4167515	0					
ANR	4167526	Identifier	last_literal		4167515	1					
ANR	4167527	ExpressionStatement	op_array -> last_literal ++	106:1:3767:3791	4167515	1	True				
ANR	4167528	PostIncDecOperationExpression	op_array -> last_literal ++		4167515	0					
ANR	4167529	PtrMemberAccess	op_array -> last_literal		4167515	0					
ANR	4167530	Identifier	op_array		4167515	0					
ANR	4167531	Identifier	last_literal		4167515	1					
ANR	4167532	IncDec	++		4167515	1					
ANR	4167533	ExpressionStatement	"op_array -> literals = ( zval * ) erealloc ( op_array -> literals , op_array -> last_literal * sizeof ( zval ) )"	107:1:3794:3889	4167515	2	True				
ANR	4167534	AssignmentExpression	"op_array -> literals = ( zval * ) erealloc ( op_array -> literals , op_array -> last_literal * sizeof ( zval ) )"		4167515	0		=			
ANR	4167535	PtrMemberAccess	op_array -> literals		4167515	0					
ANR	4167536	Identifier	op_array		4167515	0					
ANR	4167537	Identifier	literals		4167515	1					
ANR	4167538	CastExpression	"( zval * ) erealloc ( op_array -> literals , op_array -> last_literal * sizeof ( zval ) )"		4167515	1					
ANR	4167539	CastTarget	zval *		4167515	0					
ANR	4167540	CallExpression	"erealloc ( op_array -> literals , op_array -> last_literal * sizeof ( zval ) )"		4167515	1					
ANR	4167541	Callee	erealloc		4167515	0					
ANR	4167542	Identifier	erealloc		4167515	0					
ANR	4167543	ArgumentList	op_array -> literals		4167515	1					
ANR	4167544	Argument	op_array -> literals		4167515	0					
ANR	4167545	PtrMemberAccess	op_array -> literals		4167515	0					
ANR	4167546	Identifier	op_array		4167515	0					
ANR	4167547	Identifier	literals		4167515	1					
ANR	4167548	Argument	op_array -> last_literal * sizeof ( zval )		4167515	1					
ANR	4167549	MultiplicativeExpression	op_array -> last_literal * sizeof ( zval )		4167515	0		*			
ANR	4167550	PtrMemberAccess	op_array -> last_literal		4167515	0					
ANR	4167551	Identifier	op_array		4167515	0					
ANR	4167552	Identifier	last_literal		4167515	1					
ANR	4167553	SizeofExpression	sizeof ( zval )		4167515	1					
ANR	4167554	Sizeof	sizeof		4167515	0					
ANR	4167555	SizeofOperand	zval		4167515	1					
ANR	4167556	ExpressionStatement	"ZVAL_COPY_VALUE ( & op_array -> literals [ i ] , zv )"	108:1:3892:3935	4167515	3	True				
ANR	4167557	CallExpression	"ZVAL_COPY_VALUE ( & op_array -> literals [ i ] , zv )"		4167515	0					
ANR	4167558	Callee	ZVAL_COPY_VALUE		4167515	0					
ANR	4167559	Identifier	ZVAL_COPY_VALUE		4167515	0					
ANR	4167560	ArgumentList	& op_array -> literals [ i ]		4167515	1					
ANR	4167561	Argument	& op_array -> literals [ i ]		4167515	0					
ANR	4167562	UnaryOperationExpression	& op_array -> literals [ i ]		4167515	0					
ANR	4167563	UnaryOperator	&		4167515	0					
ANR	4167564	ArrayIndexing	op_array -> literals [ i ]		4167515	1					
ANR	4167565	PtrMemberAccess	op_array -> literals		4167515	0					
ANR	4167566	Identifier	op_array		4167515	0					
ANR	4167567	Identifier	literals		4167515	1					
ANR	4167568	Identifier	i		4167515	1					
ANR	4167569	Argument	zv		4167515	1					
ANR	4167570	Identifier	zv		4167515	0					
ANR	4167571	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ i ] ) = - 1	109:1:3938:3978	4167515	4	True				
ANR	4167572	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ i ] ) = - 1		4167515	0		=			
ANR	4167573	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ i ] )		4167515	0					
ANR	4167574	Callee	Z_CACHE_SLOT		4167515	0					
ANR	4167575	Identifier	Z_CACHE_SLOT		4167515	0					
ANR	4167576	ArgumentList	op_array -> literals [ i ]		4167515	1					
ANR	4167577	Argument	op_array -> literals [ i ]		4167515	0					
ANR	4167578	ArrayIndexing	op_array -> literals [ i ]		4167515	0					
ANR	4167579	PtrMemberAccess	op_array -> literals		4167515	0					
ANR	4167580	Identifier	op_array		4167515	0					
ANR	4167581	Identifier	literals		4167515	1					
ANR	4167582	Identifier	i		4167515	1					
ANR	4167583	UnaryOperationExpression	- 1		4167515	1					
ANR	4167584	UnaryOperator	-		4167515	0					
ANR	4167585	PrimaryExpression	1		4167515	1					
ANR	4167586	ReturnStatement	return i ;	110:1:3981:3989	4167515	5	True				
ANR	4167587	Identifier	i		4167515	0					
ANR	4167588	ReturnType	int		4167515	1					
ANR	4167589	Identifier	zend_optimizer_add_literal		4167515	2					
ANR	4167590	ParameterList	"zend_op_array * op_array , zval * zv"		4167515	3					
ANR	4167591	Parameter	zend_op_array * op_array	103:31:3696:3718	4167515	0	True				
ANR	4167592	ParameterType	zend_op_array *		4167515	0					
ANR	4167593	Identifier	op_array		4167515	1					
ANR	4167594	Parameter	zval * zv	103:56:3721:3728	4167515	1	True				
ANR	4167595	ParameterType	zval *		4167515	0					
ANR	4167596	Identifier	zv		4167515	1					
ANR	4167597	CFGEntryNode	ENTRY		4167515		True				
ANR	4167598	CFGExitNode	EXIT		4167515		True				
ANR	4167599	Symbol	* i		4167515						
ANR	4167600	Symbol	op_array -> last_literal		4167515						
ANR	4167601	Symbol	op_array -> literals		4167515						
ANR	4167602	Symbol	i		4167515						
ANR	4167603	Symbol	Z_CACHE_SLOT		4167515						
ANR	4167604	Symbol	zv		4167515						
ANR	4167605	Symbol	* * op_array		4167515						
ANR	4167606	Symbol	erealloc		4167515						
ANR	4167607	Symbol	op_array		4167515						
ANR	4167608	Symbol	* op_array		4167515						
ANR	4167609	Symbol	* op_array -> literals		4167515						
ANR	4167610	Function	zend_optimizer_add_literal_string	113:0:3994:4201							
ANR	4167611	FunctionDef	"zend_optimizer_add_literal_string (zend_op_array * op_array , zend_string * str)"		4167610	0					
ANR	4167612	CompoundStatement		113:95:4089:4201	4167610	0					
ANR	4167613	IdentifierDeclStatement	zval zv ;	114:1:4092:4099	4167610	0	True				
ANR	4167614	IdentifierDecl	zv		4167610	0					
ANR	4167615	IdentifierDeclType	zval		4167610	0					
ANR	4167616	Identifier	zv		4167610	1					
ANR	4167617	ExpressionStatement	"ZVAL_STR ( & zv , str )"	115:1:4102:4120	4167610	1	True				
ANR	4167618	CallExpression	"ZVAL_STR ( & zv , str )"		4167610	0					
ANR	4167619	Callee	ZVAL_STR		4167610	0					
ANR	4167620	Identifier	ZVAL_STR		4167610	0					
ANR	4167621	ArgumentList	& zv		4167610	1					
ANR	4167622	Argument	& zv		4167610	0					
ANR	4167623	UnaryOperationExpression	& zv		4167610	0					
ANR	4167624	UnaryOperator	&		4167610	0					
ANR	4167625	Identifier	zv		4167610	1					
ANR	4167626	Argument	str		4167610	1					
ANR	4167627	Identifier	str		4167610	0					
ANR	4167628	ExpressionStatement	zend_string_hash_val ( str )	116:1:4123:4148	4167610	2	True				
ANR	4167629	CallExpression	zend_string_hash_val ( str )		4167610	0					
ANR	4167630	Callee	zend_string_hash_val		4167610	0					
ANR	4167631	Identifier	zend_string_hash_val		4167610	0					
ANR	4167632	ArgumentList	str		4167610	1					
ANR	4167633	Argument	str		4167610	0					
ANR	4167634	Identifier	str		4167610	0					
ANR	4167635	ReturnStatement	"return zend_optimizer_add_literal ( op_array , & zv ) ;"	117:1:4151:4199	4167610	3	True				
ANR	4167636	CallExpression	"zend_optimizer_add_literal ( op_array , & zv )"		4167610	0					
ANR	4167637	Callee	zend_optimizer_add_literal		4167610	0					
ANR	4167638	Identifier	zend_optimizer_add_literal		4167610	0					
ANR	4167639	ArgumentList	op_array		4167610	1					
ANR	4167640	Argument	op_array		4167610	0					
ANR	4167641	Identifier	op_array		4167610	0					
ANR	4167642	Argument	& zv		4167610	1					
ANR	4167643	UnaryOperationExpression	& zv		4167610	0					
ANR	4167644	UnaryOperator	&		4167610	0					
ANR	4167645	Identifier	zv		4167610	1					
ANR	4167646	ReturnType	static inline int		4167610	1					
ANR	4167647	Identifier	zend_optimizer_add_literal_string		4167610	2					
ANR	4167648	ParameterList	"zend_op_array * op_array , zend_string * str"		4167610	3					
ANR	4167649	Parameter	zend_op_array * op_array	113:52:4046:4068	4167610	0	True				
ANR	4167650	ParameterType	zend_op_array *		4167610	0					
ANR	4167651	Identifier	op_array		4167610	1					
ANR	4167652	Parameter	zend_string * str	113:77:4071:4086	4167610	1	True				
ANR	4167653	ParameterType	zend_string *		4167610	0					
ANR	4167654	Identifier	str		4167610	1					
ANR	4167655	CFGEntryNode	ENTRY		4167610		True				
ANR	4167656	CFGExitNode	EXIT		4167610		True				
ANR	4167657	Symbol	str		4167610						
ANR	4167658	Symbol	& zv		4167610						
ANR	4167659	Symbol	zv		4167610						
ANR	4167660	Symbol	op_array		4167610						
ANR	4167661	Symbol	zend_optimizer_add_literal		4167610						
ANR	4167662	Function	zend_optimizer_is_disabled_func	120:0:4204:4496							
ANR	4167663	FunctionDef	"zend_optimizer_is_disabled_func (const char * name , size_t len)"		4167662	0					
ANR	4167664	CompoundStatement		120:66:4270:4496	4167662	0					
ANR	4167665	IdentifierDeclStatement	"zend_function * fbc = ( zend_function * ) zend_hash_str_find_ptr ( EG ( function_table ) , name , len ) ;"	121:1:4273:4364	4167662	0	True				
ANR	4167666	IdentifierDecl	"* fbc = ( zend_function * ) zend_hash_str_find_ptr ( EG ( function_table ) , name , len )"		4167662	0					
ANR	4167667	IdentifierDeclType	zend_function *		4167662	0					
ANR	4167668	Identifier	fbc		4167662	1					
ANR	4167669	AssignmentExpression	"* fbc = ( zend_function * ) zend_hash_str_find_ptr ( EG ( function_table ) , name , len )"		4167662	2		=			
ANR	4167670	Identifier	fbc		4167662	0					
ANR	4167671	CastExpression	"( zend_function * ) zend_hash_str_find_ptr ( EG ( function_table ) , name , len )"		4167662	1					
ANR	4167672	CastTarget	zend_function *		4167662	0					
ANR	4167673	CallExpression	"zend_hash_str_find_ptr ( EG ( function_table ) , name , len )"		4167662	1					
ANR	4167674	Callee	zend_hash_str_find_ptr		4167662	0					
ANR	4167675	Identifier	zend_hash_str_find_ptr		4167662	0					
ANR	4167676	ArgumentList	EG ( function_table )		4167662	1					
ANR	4167677	Argument	EG ( function_table )		4167662	0					
ANR	4167678	CallExpression	EG ( function_table )		4167662	0					
ANR	4167679	Callee	EG		4167662	0					
ANR	4167680	Identifier	EG		4167662	0					
ANR	4167681	ArgumentList	function_table		4167662	1					
ANR	4167682	Argument	function_table		4167662	0					
ANR	4167683	Identifier	function_table		4167662	0					
ANR	4167684	Argument	name		4167662	1					
ANR	4167685	Identifier	name		4167662	0					
ANR	4167686	Argument	len		4167662	2					
ANR	4167687	Identifier	len		4167662	0					
ANR	4167688	ReturnStatement	return ( fbc && fbc -> type == ZEND_INTERNAL_FUNCTION && fbc -> internal_function . handler == ZEND_FN ( display_disabled_function ) ) ;	123:1:4368:4494	4167662	1	True				
ANR	4167689	AndExpression	fbc && fbc -> type == ZEND_INTERNAL_FUNCTION && fbc -> internal_function . handler == ZEND_FN ( display_disabled_function )		4167662	0		&&			
ANR	4167690	Identifier	fbc		4167662	0					
ANR	4167691	AndExpression	fbc -> type == ZEND_INTERNAL_FUNCTION && fbc -> internal_function . handler == ZEND_FN ( display_disabled_function )		4167662	1		&&			
ANR	4167692	EqualityExpression	fbc -> type == ZEND_INTERNAL_FUNCTION		4167662	0		==			
ANR	4167693	PtrMemberAccess	fbc -> type		4167662	0					
ANR	4167694	Identifier	fbc		4167662	0					
ANR	4167695	Identifier	type		4167662	1					
ANR	4167696	Identifier	ZEND_INTERNAL_FUNCTION		4167662	1					
ANR	4167697	EqualityExpression	fbc -> internal_function . handler == ZEND_FN ( display_disabled_function )		4167662	1		==			
ANR	4167698	MemberAccess	fbc -> internal_function . handler		4167662	0					
ANR	4167699	PtrMemberAccess	fbc -> internal_function		4167662	0					
ANR	4167700	Identifier	fbc		4167662	0					
ANR	4167701	Identifier	internal_function		4167662	1					
ANR	4167702	Identifier	handler		4167662	1					
ANR	4167703	CallExpression	ZEND_FN ( display_disabled_function )		4167662	1					
ANR	4167704	Callee	ZEND_FN		4167662	0					
ANR	4167705	Identifier	ZEND_FN		4167662	0					
ANR	4167706	ArgumentList	display_disabled_function		4167662	1					
ANR	4167707	Argument	display_disabled_function		4167662	0					
ANR	4167708	Identifier	display_disabled_function		4167662	0					
ANR	4167709	ReturnType	int		4167662	1					
ANR	4167710	Identifier	zend_optimizer_is_disabled_func		4167662	2					
ANR	4167711	ParameterList	"const char * name , size_t len"		4167662	3					
ANR	4167712	Parameter	const char * name	120:36:4240:4255	4167662	0	True				
ANR	4167713	ParameterType	const char *		4167662	0					
ANR	4167714	Identifier	name		4167662	1					
ANR	4167715	Parameter	size_t len	120:54:4258:4267	4167662	1	True				
ANR	4167716	ParameterType	size_t		4167662	0					
ANR	4167717	Identifier	len		4167662	1					
ANR	4167718	CFGEntryNode	ENTRY		4167662		True				
ANR	4167719	CFGExitNode	EXIT		4167662		True				
ANR	4167720	Symbol	EG		4167662						
ANR	4167721	Symbol	fbc		4167662						
ANR	4167722	Symbol	fbc -> type		4167662						
ANR	4167723	Symbol	fbc -> internal_function . handler		4167662						
ANR	4167724	Symbol	display_disabled_function		4167662						
ANR	4167725	Symbol	* fbc		4167662						
ANR	4167726	Symbol	ZEND_INTERNAL_FUNCTION		4167662						
ANR	4167727	Symbol	len		4167662						
ANR	4167728	Symbol	fbc -> internal_function		4167662						
ANR	4167729	Symbol	name		4167662						
ANR	4167730	Symbol	zend_hash_str_find_ptr		4167662						
ANR	4167731	Symbol	function_table		4167662						
ANR	4167732	Symbol	ZEND_FN		4167662						
ANR	4167733	Function	drop_leading_backslash	127:0:4499:4716							
ANR	4167734	FunctionDef	drop_leading_backslash (zval * val)		4167733	0					
ANR	4167735	CompoundStatement		127:53:4552:4716	4167733	0					
ANR	4167736	IfStatement	if ( Z_STRVAL_P ( val ) [ 0 ] == '\\\\' )		4167733	0					
ANR	4167737	Condition	Z_STRVAL_P ( val ) [ 0 ] == '\\\\'	128:5:4559:4584	4167733	0	True				
ANR	4167738	EqualityExpression	Z_STRVAL_P ( val ) [ 0 ] == '\\\\'		4167733	0		==			
ANR	4167739	ArrayIndexing	Z_STRVAL_P ( val ) [ 0 ]		4167733	0					
ANR	4167740	CallExpression	Z_STRVAL_P ( val )		4167733	0					
ANR	4167741	Callee	Z_STRVAL_P		4167733	0					
ANR	4167742	Identifier	Z_STRVAL_P		4167733	0					
ANR	4167743	ArgumentList	val		4167733	1					
ANR	4167744	Argument	val		4167733	0					
ANR	4167745	Identifier	val		4167733	0					
ANR	4167746	PrimaryExpression	0		4167733	1					
ANR	4167747	PrimaryExpression	'\\\\'		4167733	1					
ANR	4167748	CompoundStatement		3:2:38:118	4167733	1					
ANR	4167749	IdentifierDeclStatement	"zend_string * str = zend_string_init ( Z_STRVAL_P ( val ) + 1 , Z_STRLEN_P ( val ) - 1 , 0 ) ;"	129:2:4591:4671	4167733	0	True				
ANR	4167750	IdentifierDecl	"* str = zend_string_init ( Z_STRVAL_P ( val ) + 1 , Z_STRLEN_P ( val ) - 1 , 0 )"		4167733	0					
ANR	4167751	IdentifierDeclType	zend_string *		4167733	0					
ANR	4167752	Identifier	str		4167733	1					
ANR	4167753	AssignmentExpression	"* str = zend_string_init ( Z_STRVAL_P ( val ) + 1 , Z_STRLEN_P ( val ) - 1 , 0 )"		4167733	2		=			
ANR	4167754	Identifier	str		4167733	0					
ANR	4167755	CallExpression	"zend_string_init ( Z_STRVAL_P ( val ) + 1 , Z_STRLEN_P ( val ) - 1 , 0 )"		4167733	1					
ANR	4167756	Callee	zend_string_init		4167733	0					
ANR	4167757	Identifier	zend_string_init		4167733	0					
ANR	4167758	ArgumentList	Z_STRVAL_P ( val ) + 1		4167733	1					
ANR	4167759	Argument	Z_STRVAL_P ( val ) + 1		4167733	0					
ANR	4167760	AdditiveExpression	Z_STRVAL_P ( val ) + 1		4167733	0		+			
ANR	4167761	CallExpression	Z_STRVAL_P ( val )		4167733	0					
ANR	4167762	Callee	Z_STRVAL_P		4167733	0					
ANR	4167763	Identifier	Z_STRVAL_P		4167733	0					
ANR	4167764	ArgumentList	val		4167733	1					
ANR	4167765	Argument	val		4167733	0					
ANR	4167766	Identifier	val		4167733	0					
ANR	4167767	PrimaryExpression	1		4167733	1					
ANR	4167768	Argument	Z_STRLEN_P ( val ) - 1		4167733	1					
ANR	4167769	AdditiveExpression	Z_STRLEN_P ( val ) - 1		4167733	0		-			
ANR	4167770	CallExpression	Z_STRLEN_P ( val )		4167733	0					
ANR	4167771	Callee	Z_STRLEN_P		4167733	0					
ANR	4167772	Identifier	Z_STRLEN_P		4167733	0					
ANR	4167773	ArgumentList	val		4167733	1					
ANR	4167774	Argument	val		4167733	0					
ANR	4167775	Identifier	val		4167733	0					
ANR	4167776	PrimaryExpression	1		4167733	1					
ANR	4167777	Argument	0		4167733	2					
ANR	4167778	PrimaryExpression	0		4167733	0					
ANR	4167779	ExpressionStatement	zval_dtor ( val )	130:2:4675:4689	4167733	1	True				
ANR	4167780	CallExpression	zval_dtor ( val )		4167733	0					
ANR	4167781	Callee	zval_dtor		4167733	0					
ANR	4167782	Identifier	zval_dtor		4167733	0					
ANR	4167783	ArgumentList	val		4167733	1					
ANR	4167784	Argument	val		4167733	0					
ANR	4167785	Identifier	val		4167733	0					
ANR	4167786	ExpressionStatement	"ZVAL_STR ( val , str )"	131:2:4693:4711	4167733	2	True				
ANR	4167787	CallExpression	"ZVAL_STR ( val , str )"		4167733	0					
ANR	4167788	Callee	ZVAL_STR		4167733	0					
ANR	4167789	Identifier	ZVAL_STR		4167733	0					
ANR	4167790	ArgumentList	val		4167733	1					
ANR	4167791	Argument	val		4167733	0					
ANR	4167792	Identifier	val		4167733	0					
ANR	4167793	Argument	str		4167733	1					
ANR	4167794	Identifier	str		4167733	0					
ANR	4167795	ReturnType	static inline void		4167733	1					
ANR	4167796	Identifier	drop_leading_backslash		4167733	2					
ANR	4167797	ParameterList	zval * val		4167733	3					
ANR	4167798	Parameter	zval * val	127:42:4541:4549	4167733	0	True				
ANR	4167799	ParameterType	zval *		4167733	0					
ANR	4167800	Identifier	val		4167733	1					
ANR	4167801	CFGEntryNode	ENTRY		4167733		True				
ANR	4167802	CFGExitNode	EXIT		4167733		True				
ANR	4167803	Symbol	val		4167733						
ANR	4167804	Symbol	str		4167733						
ANR	4167805	Symbol	zend_string_init		4167733						
ANR	4167806	Symbol	Z_STRLEN_P		4167733						
ANR	4167807	Symbol	* Z_STRVAL_P		4167733						
ANR	4167808	Symbol	Z_STRVAL_P		4167733						
ANR	4167809	Function	alloc_cache_slots_op1	135:0:4719:4945							
ANR	4167810	FunctionDef	"alloc_cache_slots_op1 (zend_op_array * op_array , zend_op * opline , uint32_t num)"		4167809	0					
ANR	4167811	CompoundStatement		135:97:4816:4945	4167809	0					
ANR	4167812	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ opline -> op1 . constant ] ) = op_array -> cache_size	136:1:4819:4896	4167809	0	True				
ANR	4167813	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op1 . constant ] ) = op_array -> cache_size		4167809	0		=			
ANR	4167814	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op1 . constant ] )		4167809	0					
ANR	4167815	Callee	Z_CACHE_SLOT		4167809	0					
ANR	4167816	Identifier	Z_CACHE_SLOT		4167809	0					
ANR	4167817	ArgumentList	op_array -> literals [ opline -> op1 . constant ]		4167809	1					
ANR	4167818	Argument	op_array -> literals [ opline -> op1 . constant ]		4167809	0					
ANR	4167819	ArrayIndexing	op_array -> literals [ opline -> op1 . constant ]		4167809	0					
ANR	4167820	PtrMemberAccess	op_array -> literals		4167809	0					
ANR	4167821	Identifier	op_array		4167809	0					
ANR	4167822	Identifier	literals		4167809	1					
ANR	4167823	MemberAccess	opline -> op1 . constant		4167809	1					
ANR	4167824	PtrMemberAccess	opline -> op1		4167809	0					
ANR	4167825	Identifier	opline		4167809	0					
ANR	4167826	Identifier	op1		4167809	1					
ANR	4167827	Identifier	constant		4167809	1					
ANR	4167828	PtrMemberAccess	op_array -> cache_size		4167809	1					
ANR	4167829	Identifier	op_array		4167809	0					
ANR	4167830	Identifier	cache_size		4167809	1					
ANR	4167831	ExpressionStatement	op_array -> cache_size += num * sizeof ( void * )	137:1:4899:4943	4167809	1	True				
ANR	4167832	AssignmentExpression	op_array -> cache_size += num * sizeof ( void * )		4167809	0		+=			
ANR	4167833	PtrMemberAccess	op_array -> cache_size		4167809	0					
ANR	4167834	Identifier	op_array		4167809	0					
ANR	4167835	Identifier	cache_size		4167809	1					
ANR	4167836	MultiplicativeExpression	num * sizeof ( void * )		4167809	1		*			
ANR	4167837	Identifier	num		4167809	0					
ANR	4167838	SizeofExpression	sizeof ( void * )		4167809	1					
ANR	4167839	Sizeof	sizeof		4167809	0					
ANR	4167840	SizeofOperand	void *		4167809	1					
ANR	4167841	ReturnType	static inline void		4167809	1					
ANR	4167842	Identifier	alloc_cache_slots_op1		4167809	2					
ANR	4167843	ParameterList	"zend_op_array * op_array , zend_op * opline , uint32_t num"		4167809	3					
ANR	4167844	Parameter	zend_op_array * op_array	135:41:4760:4782	4167809	0	True				
ANR	4167845	ParameterType	zend_op_array *		4167809	0					
ANR	4167846	Identifier	op_array		4167809	1					
ANR	4167847	Parameter	zend_op * opline	135:66:4785:4799	4167809	1	True				
ANR	4167848	ParameterType	zend_op *		4167809	0					
ANR	4167849	Identifier	opline		4167809	1					
ANR	4167850	Parameter	uint32_t num	135:83:4802:4813	4167809	2	True				
ANR	4167851	ParameterType	uint32_t		4167809	0					
ANR	4167852	Identifier	num		4167809	1					
ANR	4167853	CFGEntryNode	ENTRY		4167809		True				
ANR	4167854	CFGExitNode	EXIT		4167809		True				
ANR	4167855	Symbol	opline -> op1		4167809						
ANR	4167856	Symbol	num		4167809						
ANR	4167857	Symbol	* op_array		4167809						
ANR	4167858	Symbol	* op_array -> literals		4167809						
ANR	4167859	Symbol	* opline -> op1 . constant		4167809						
ANR	4167860	Symbol	opline		4167809						
ANR	4167861	Symbol	* opline -> op1		4167809						
ANR	4167862	Symbol	* opline		4167809						
ANR	4167863	Symbol	op_array -> literals		4167809						
ANR	4167864	Symbol	opline -> op1 . constant		4167809						
ANR	4167865	Symbol	Z_CACHE_SLOT		4167809						
ANR	4167866	Symbol	op_array -> cache_size		4167809						
ANR	4167867	Symbol	* * opline		4167809						
ANR	4167868	Symbol	* * op_array		4167809						
ANR	4167869	Symbol	op_array		4167809						
ANR	4167870	Function	alloc_cache_slots_op2	139:0:4947:5173							
ANR	4167871	FunctionDef	"alloc_cache_slots_op2 (zend_op_array * op_array , zend_op * opline , uint32_t num)"		4167870	0					
ANR	4167872	CompoundStatement		139:97:5044:5173	4167870	0					
ANR	4167873	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] ) = op_array -> cache_size	140:1:5047:5124	4167870	0	True				
ANR	4167874	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] ) = op_array -> cache_size		4167870	0		=			
ANR	4167875	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] )		4167870	0					
ANR	4167876	Callee	Z_CACHE_SLOT		4167870	0					
ANR	4167877	Identifier	Z_CACHE_SLOT		4167870	0					
ANR	4167878	ArgumentList	op_array -> literals [ opline -> op2 . constant ]		4167870	1					
ANR	4167879	Argument	op_array -> literals [ opline -> op2 . constant ]		4167870	0					
ANR	4167880	ArrayIndexing	op_array -> literals [ opline -> op2 . constant ]		4167870	0					
ANR	4167881	PtrMemberAccess	op_array -> literals		4167870	0					
ANR	4167882	Identifier	op_array		4167870	0					
ANR	4167883	Identifier	literals		4167870	1					
ANR	4167884	MemberAccess	opline -> op2 . constant		4167870	1					
ANR	4167885	PtrMemberAccess	opline -> op2		4167870	0					
ANR	4167886	Identifier	opline		4167870	0					
ANR	4167887	Identifier	op2		4167870	1					
ANR	4167888	Identifier	constant		4167870	1					
ANR	4167889	PtrMemberAccess	op_array -> cache_size		4167870	1					
ANR	4167890	Identifier	op_array		4167870	0					
ANR	4167891	Identifier	cache_size		4167870	1					
ANR	4167892	ExpressionStatement	op_array -> cache_size += num * sizeof ( void * )	141:1:5127:5171	4167870	1	True				
ANR	4167893	AssignmentExpression	op_array -> cache_size += num * sizeof ( void * )		4167870	0		+=			
ANR	4167894	PtrMemberAccess	op_array -> cache_size		4167870	0					
ANR	4167895	Identifier	op_array		4167870	0					
ANR	4167896	Identifier	cache_size		4167870	1					
ANR	4167897	MultiplicativeExpression	num * sizeof ( void * )		4167870	1		*			
ANR	4167898	Identifier	num		4167870	0					
ANR	4167899	SizeofExpression	sizeof ( void * )		4167870	1					
ANR	4167900	Sizeof	sizeof		4167870	0					
ANR	4167901	SizeofOperand	void *		4167870	1					
ANR	4167902	ReturnType	static inline void		4167870	1					
ANR	4167903	Identifier	alloc_cache_slots_op2		4167870	2					
ANR	4167904	ParameterList	"zend_op_array * op_array , zend_op * opline , uint32_t num"		4167870	3					
ANR	4167905	Parameter	zend_op_array * op_array	139:41:4988:5010	4167870	0	True				
ANR	4167906	ParameterType	zend_op_array *		4167870	0					
ANR	4167907	Identifier	op_array		4167870	1					
ANR	4167908	Parameter	zend_op * opline	139:66:5013:5027	4167870	1	True				
ANR	4167909	ParameterType	zend_op *		4167870	0					
ANR	4167910	Identifier	opline		4167870	1					
ANR	4167911	Parameter	uint32_t num	139:83:5030:5041	4167870	2	True				
ANR	4167912	ParameterType	uint32_t		4167870	0					
ANR	4167913	Identifier	num		4167870	1					
ANR	4167914	CFGEntryNode	ENTRY		4167870		True				
ANR	4167915	CFGExitNode	EXIT		4167870		True				
ANR	4167916	Symbol	opline -> op2		4167870						
ANR	4167917	Symbol	num		4167870						
ANR	4167918	Symbol	* op_array -> literals		4167870						
ANR	4167919	Symbol	* op_array		4167870						
ANR	4167920	Symbol	* opline -> op2		4167870						
ANR	4167921	Symbol	opline		4167870						
ANR	4167922	Symbol	* opline		4167870						
ANR	4167923	Symbol	op_array -> literals		4167870						
ANR	4167924	Symbol	opline -> op2 . constant		4167870						
ANR	4167925	Symbol	Z_CACHE_SLOT		4167870						
ANR	4167926	Symbol	op_array -> cache_size		4167870						
ANR	4167927	Symbol	* * opline		4167870						
ANR	4167928	Symbol	* * op_array		4167870						
ANR	4167929	Symbol	* opline -> op2 . constant		4167870						
ANR	4167930	Symbol	op_array		4167870						
ANR	4167931	Function	zend_optimizer_update_op1_const	159:0:5453:6837							
ANR	4167932	FunctionDef	"zend_optimizer_update_op1_const (zend_op_array * op_array , zend_op * opline , zval * val)"		4167931	0					
ANR	4167933	CompoundStatement		162:0:5629:6837	4167931	0					
ANR	4167934	SwitchStatement	switch ( opline -> opcode )		4167931	0					
ANR	4167935	Condition	opline -> opcode	163:9:5640:5653	4167931	0	True				
ANR	4167936	PtrMemberAccess	opline -> opcode		4167931	0					
ANR	4167937	Identifier	opline		4167931	0					
ANR	4167938	Identifier	opcode		4167931	1					
ANR	4167939	CompoundStatement		2:25:26:26	4167931	1					
ANR	4167940	Label	case ZEND_FREE :	164:2:5660:5674	4167931	0	True				
ANR	4167941	Identifier	ZEND_FREE		4167931	0					
ANR	4167942	ExpressionStatement	MAKE_NOP ( opline )	165:3:5679:5695	4167931	1	True				
ANR	4167943	CallExpression	MAKE_NOP ( opline )		4167931	0					
ANR	4167944	Callee	MAKE_NOP		4167931	0					
ANR	4167945	Identifier	MAKE_NOP		4167931	0					
ANR	4167946	ArgumentList	opline		4167931	1					
ANR	4167947	Argument	opline		4167931	0					
ANR	4167948	Identifier	opline		4167931	0					
ANR	4167949	ExpressionStatement	zval_dtor ( val )	166:3:5700:5714	4167931	2	True				
ANR	4167950	CallExpression	zval_dtor ( val )		4167931	0					
ANR	4167951	Callee	zval_dtor		4167931	0					
ANR	4167952	Identifier	zval_dtor		4167931	0					
ANR	4167953	ArgumentList	val		4167931	1					
ANR	4167954	Argument	val		4167931	0					
ANR	4167955	Identifier	val		4167931	0					
ANR	4167956	ReturnStatement	return 1 ;	167:3:5719:5727	4167931	3	True				
ANR	4167957	PrimaryExpression	1		4167931	0					
ANR	4167958	Label	case ZEND_INIT_STATIC_METHOD_CALL :	168:2:5731:5764	4167931	4	True				
ANR	4167959	Identifier	ZEND_INIT_STATIC_METHOD_CALL		4167931	0					
ANR	4167960	Label	case ZEND_CATCH :	169:2:5768:5783	4167931	5	True				
ANR	4167961	Identifier	ZEND_CATCH		4167931	0					
ANR	4167962	Label	case ZEND_FETCH_CONSTANT :	170:2:5787:5811	4167931	6	True				
ANR	4167963	Identifier	ZEND_FETCH_CONSTANT		4167931	0					
ANR	4167964	Label	case ZEND_DEFINED :	171:2:5815:5832	4167931	7	True				
ANR	4167965	Identifier	ZEND_DEFINED		4167931	0					
ANR	4167966	Label	case ZEND_NEW :	172:2:5836:5849	4167931	8	True				
ANR	4167967	Identifier	ZEND_NEW		4167931	0					
ANR	4167968	ExpressionStatement	REQUIRES_STRING ( val )	173:3:5854:5874	4167931	9	True				
ANR	4167969	CallExpression	REQUIRES_STRING ( val )		4167931	0					
ANR	4167970	Callee	REQUIRES_STRING		4167931	0					
ANR	4167971	Identifier	REQUIRES_STRING		4167931	0					
ANR	4167972	ArgumentList	val		4167931	1					
ANR	4167973	Argument	val		4167931	0					
ANR	4167974	Identifier	val		4167931	0					
ANR	4167975	ExpressionStatement	drop_leading_backslash ( val )	174:3:5879:5906	4167931	10	True				
ANR	4167976	CallExpression	drop_leading_backslash ( val )		4167931	0					
ANR	4167977	Callee	drop_leading_backslash		4167931	0					
ANR	4167978	Identifier	drop_leading_backslash		4167931	0					
ANR	4167979	ArgumentList	val		4167931	1					
ANR	4167980	Argument	val		4167931	0					
ANR	4167981	Identifier	val		4167931	0					
ANR	4167982	ExpressionStatement	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"	175:3:5911:5975	4167931	11	True				
ANR	4167983	AssignmentExpression	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"		4167931	0		=			
ANR	4167984	MemberAccess	opline -> op1 . constant		4167931	0					
ANR	4167985	PtrMemberAccess	opline -> op1		4167931	0					
ANR	4167986	Identifier	opline		4167931	0					
ANR	4167987	Identifier	op1		4167931	1					
ANR	4167988	Identifier	constant		4167931	1					
ANR	4167989	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4167931	1					
ANR	4167990	Callee	zend_optimizer_add_literal		4167931	0					
ANR	4167991	Identifier	zend_optimizer_add_literal		4167931	0					
ANR	4167992	ArgumentList	op_array		4167931	1					
ANR	4167993	Argument	op_array		4167931	0					
ANR	4167994	Identifier	op_array		4167931	0					
ANR	4167995	Argument	val		4167931	1					
ANR	4167996	Identifier	val		4167931	0					
ANR	4167997	ExpressionStatement	"alloc_cache_slots_op1 ( op_array , opline , 1 )"	176:3:5980:6022	4167931	12	True				
ANR	4167998	CallExpression	"alloc_cache_slots_op1 ( op_array , opline , 1 )"		4167931	0					
ANR	4167999	Callee	alloc_cache_slots_op1		4167931	0					
ANR	4168000	Identifier	alloc_cache_slots_op1		4167931	0					
ANR	4168001	ArgumentList	op_array		4167931	1					
ANR	4168002	Argument	op_array		4167931	0					
ANR	4168003	Identifier	op_array		4167931	0					
ANR	4168004	Argument	opline		4167931	1					
ANR	4168005	Identifier	opline		4167931	0					
ANR	4168006	Argument	1		4167931	2					
ANR	4168007	PrimaryExpression	1		4167931	0					
ANR	4168008	ExpressionStatement	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"	177:3:6027:6105	4167931	13	True				
ANR	4168009	CallExpression	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"		4167931	0					
ANR	4168010	Callee	zend_optimizer_add_literal_string		4167931	0					
ANR	4168011	Identifier	zend_optimizer_add_literal_string		4167931	0					
ANR	4168012	ArgumentList	op_array		4167931	1					
ANR	4168013	Argument	op_array		4167931	0					
ANR	4168014	Identifier	op_array		4167931	0					
ANR	4168015	Argument	zend_string_tolower ( Z_STR_P ( val ) )		4167931	1					
ANR	4168016	CallExpression	zend_string_tolower ( Z_STR_P ( val ) )		4167931	0					
ANR	4168017	Callee	zend_string_tolower		4167931	0					
ANR	4168018	Identifier	zend_string_tolower		4167931	0					
ANR	4168019	ArgumentList	Z_STR_P ( val )		4167931	1					
ANR	4168020	Argument	Z_STR_P ( val )		4167931	0					
ANR	4168021	CallExpression	Z_STR_P ( val )		4167931	0					
ANR	4168022	Callee	Z_STR_P		4167931	0					
ANR	4168023	Identifier	Z_STR_P		4167931	0					
ANR	4168024	ArgumentList	val		4167931	1					
ANR	4168025	Argument	val		4167931	0					
ANR	4168026	Identifier	val		4167931	0					
ANR	4168027	BreakStatement	break ;	178:3:6110:6115	4167931	14	True				
ANR	4168028	Label	case ZEND_FETCH_R :	179:2:6119:6136	4167931	15	True				
ANR	4168029	Identifier	ZEND_FETCH_R		4167931	0					
ANR	4168030	Label	case ZEND_FETCH_W :	180:2:6140:6157	4167931	16	True				
ANR	4168031	Identifier	ZEND_FETCH_W		4167931	0					
ANR	4168032	Label	case ZEND_FETCH_RW :	181:2:6161:6179	4167931	17	True				
ANR	4168033	Identifier	ZEND_FETCH_RW		4167931	0					
ANR	4168034	Label	case ZEND_FETCH_IS :	182:2:6183:6201	4167931	18	True				
ANR	4168035	Identifier	ZEND_FETCH_IS		4167931	0					
ANR	4168036	Label	case ZEND_FETCH_UNSET :	183:2:6205:6226	4167931	19	True				
ANR	4168037	Identifier	ZEND_FETCH_UNSET		4167931	0					
ANR	4168038	Label	case ZEND_FETCH_FUNC_ARG :	184:2:6230:6254	4167931	20	True				
ANR	4168039	Identifier	ZEND_FETCH_FUNC_ARG		4167931	0					
ANR	4168040	ExpressionStatement	TO_STRING_NOWARN ( val )	185:3:6259:6280	4167931	21	True				
ANR	4168041	CallExpression	TO_STRING_NOWARN ( val )		4167931	0					
ANR	4168042	Callee	TO_STRING_NOWARN		4167931	0					
ANR	4168043	Identifier	TO_STRING_NOWARN		4167931	0					
ANR	4168044	ArgumentList	val		4167931	1					
ANR	4168045	Argument	val		4167931	0					
ANR	4168046	Identifier	val		4167931	0					
ANR	4168047	ExpressionStatement	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"	186:3:6285:6349	4167931	22	True				
ANR	4168048	AssignmentExpression	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"		4167931	0		=			
ANR	4168049	MemberAccess	opline -> op1 . constant		4167931	0					
ANR	4168050	PtrMemberAccess	opline -> op1		4167931	0					
ANR	4168051	Identifier	opline		4167931	0					
ANR	4168052	Identifier	op1		4167931	1					
ANR	4168053	Identifier	constant		4167931	1					
ANR	4168054	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4167931	1					
ANR	4168055	Callee	zend_optimizer_add_literal		4167931	0					
ANR	4168056	Identifier	zend_optimizer_add_literal		4167931	0					
ANR	4168057	ArgumentList	op_array		4167931	1					
ANR	4168058	Argument	op_array		4167931	0					
ANR	4168059	Identifier	op_array		4167931	0					
ANR	4168060	Argument	val		4167931	1					
ANR	4168061	Identifier	val		4167931	0					
ANR	4168062	IfStatement	if ( opline -> extended_value == ZEND_FETCH_STATIC_MEMBER )		4167931	23					
ANR	4168063	Condition	opline -> extended_value == ZEND_FETCH_STATIC_MEMBER	187:7:6358:6407	4167931	0	True				
ANR	4168064	EqualityExpression	opline -> extended_value == ZEND_FETCH_STATIC_MEMBER		4167931	0		==			
ANR	4168065	PtrMemberAccess	opline -> extended_value		4167931	0					
ANR	4168066	Identifier	opline		4167931	0					
ANR	4168067	Identifier	extended_value		4167931	1					
ANR	4168068	Identifier	ZEND_FETCH_STATIC_MEMBER		4167931	1					
ANR	4168069	CompoundStatement		26:59:780:780	4167931	1					
ANR	4168070	ExpressionStatement	"alloc_cache_slots_op1 ( op_array , opline , 2 )"	188:4:6416:6458	4167931	0	True				
ANR	4168071	CallExpression	"alloc_cache_slots_op1 ( op_array , opline , 2 )"		4167931	0					
ANR	4168072	Callee	alloc_cache_slots_op1		4167931	0					
ANR	4168073	Identifier	alloc_cache_slots_op1		4167931	0					
ANR	4168074	ArgumentList	op_array		4167931	1					
ANR	4168075	Argument	op_array		4167931	0					
ANR	4168076	Identifier	op_array		4167931	0					
ANR	4168077	Argument	opline		4167931	1					
ANR	4168078	Identifier	opline		4167931	0					
ANR	4168079	Argument	2		4167931	2					
ANR	4168080	PrimaryExpression	2		4167931	0					
ANR	4168081	BreakStatement	break ;	190:3:6468:6473	4167931	24	True				
ANR	4168082	Label	case ZEND_CONCAT :	191:2:6477:6493	4167931	25	True				
ANR	4168083	Identifier	ZEND_CONCAT		4167931	0					
ANR	4168084	Label	case ZEND_FAST_CONCAT :	192:2:6497:6518	4167931	26	True				
ANR	4168085	Identifier	ZEND_FAST_CONCAT		4167931	0					
ANR	4168086	ExpressionStatement	TO_STRING_NOWARN ( val )	193:3:6523:6544	4167931	27	True				
ANR	4168087	CallExpression	TO_STRING_NOWARN ( val )		4167931	0					
ANR	4168088	Callee	TO_STRING_NOWARN		4167931	0					
ANR	4168089	Identifier	TO_STRING_NOWARN		4167931	0					
ANR	4168090	ArgumentList	val		4167931	1					
ANR	4168091	Argument	val		4167931	0					
ANR	4168092	Identifier	val		4167931	0					
ANR	4168093	Label	default :	195:2:6585:6592	4167931	28	True				
ANR	4168094	Identifier	default		4167931	0					
ANR	4168095	ExpressionStatement	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"	196:3:6597:6661	4167931	29	True				
ANR	4168096	AssignmentExpression	"opline -> op1 . constant = zend_optimizer_add_literal ( op_array , val )"		4167931	0		=			
ANR	4168097	MemberAccess	opline -> op1 . constant		4167931	0					
ANR	4168098	PtrMemberAccess	opline -> op1		4167931	0					
ANR	4168099	Identifier	opline		4167931	0					
ANR	4168100	Identifier	op1		4167931	1					
ANR	4168101	Identifier	constant		4167931	1					
ANR	4168102	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4167931	1					
ANR	4168103	Callee	zend_optimizer_add_literal		4167931	0					
ANR	4168104	Identifier	zend_optimizer_add_literal		4167931	0					
ANR	4168105	ArgumentList	op_array		4167931	1					
ANR	4168106	Argument	op_array		4167931	0					
ANR	4168107	Identifier	op_array		4167931	0					
ANR	4168108	Argument	val		4167931	1					
ANR	4168109	Identifier	val		4167931	0					
ANR	4168110	BreakStatement	break ;	197:3:6666:6671	4167931	30	True				
ANR	4168111	ExpressionStatement	ZEND_OP1_TYPE ( opline ) = IS_CONST	200:1:6678:6710	4167931	1	True				
ANR	4168112	AssignmentExpression	ZEND_OP1_TYPE ( opline ) = IS_CONST		4167931	0		=			
ANR	4168113	CallExpression	ZEND_OP1_TYPE ( opline )		4167931	0					
ANR	4168114	Callee	ZEND_OP1_TYPE		4167931	0					
ANR	4168115	Identifier	ZEND_OP1_TYPE		4167931	0					
ANR	4168116	ArgumentList	opline		4167931	1					
ANR	4168117	Argument	opline		4167931	0					
ANR	4168118	Identifier	opline		4167931	0					
ANR	4168119	Identifier	IS_CONST		4167931	1					
ANR	4168120	IfStatement	if ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING )		4167931	2					
ANR	4168121	Condition	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING	201:5:6717:6761	4167931	0	True				
ANR	4168122	EqualityExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING		4167931	0		==			
ANR	4168123	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) )		4167931	0					
ANR	4168124	Callee	Z_TYPE		4167931	0					
ANR	4168125	Identifier	Z_TYPE		4167931	0					
ANR	4168126	ArgumentList	ZEND_OP1_LITERAL ( opline )		4167931	1					
ANR	4168127	Argument	ZEND_OP1_LITERAL ( opline )		4167931	0					
ANR	4168128	CallExpression	ZEND_OP1_LITERAL ( opline )		4167931	0					
ANR	4168129	Callee	ZEND_OP1_LITERAL		4167931	0					
ANR	4168130	Identifier	ZEND_OP1_LITERAL		4167931	0					
ANR	4168131	ArgumentList	opline		4167931	1					
ANR	4168132	Argument	opline		4167931	0					
ANR	4168133	Identifier	opline		4167931	0					
ANR	4168134	Identifier	IS_STRING		4167931	1					
ANR	4168135	CompoundStatement		40:52:1134:1134	4167931	1					
ANR	4168136	ExpressionStatement	zend_string_hash_val ( Z_STR ( ZEND_OP1_LITERAL ( opline ) ) )	202:2:6768:6821	4167931	0	True				
ANR	4168137	CallExpression	zend_string_hash_val ( Z_STR ( ZEND_OP1_LITERAL ( opline ) ) )		4167931	0					
ANR	4168138	Callee	zend_string_hash_val		4167931	0					
ANR	4168139	Identifier	zend_string_hash_val		4167931	0					
ANR	4168140	ArgumentList	Z_STR ( ZEND_OP1_LITERAL ( opline ) )		4167931	1					
ANR	4168141	Argument	Z_STR ( ZEND_OP1_LITERAL ( opline ) )		4167931	0					
ANR	4168142	CallExpression	Z_STR ( ZEND_OP1_LITERAL ( opline ) )		4167931	0					
ANR	4168143	Callee	Z_STR		4167931	0					
ANR	4168144	Identifier	Z_STR		4167931	0					
ANR	4168145	ArgumentList	ZEND_OP1_LITERAL ( opline )		4167931	1					
ANR	4168146	Argument	ZEND_OP1_LITERAL ( opline )		4167931	0					
ANR	4168147	CallExpression	ZEND_OP1_LITERAL ( opline )		4167931	0					
ANR	4168148	Callee	ZEND_OP1_LITERAL		4167931	0					
ANR	4168149	Identifier	ZEND_OP1_LITERAL		4167931	0					
ANR	4168150	ArgumentList	opline		4167931	1					
ANR	4168151	Argument	opline		4167931	0					
ANR	4168152	Identifier	opline		4167931	0					
ANR	4168153	ReturnStatement	return 1 ;	204:1:6827:6835	4167931	3	True				
ANR	4168154	PrimaryExpression	1		4167931	0					
ANR	4168155	ReturnType	int		4167931	1					
ANR	4168156	Identifier	zend_optimizer_update_op1_const		4167931	2					
ANR	4168157	ParameterList	"zend_op_array * op_array , zend_op * opline , zval * val"		4167931	3					
ANR	4168158	Parameter	zend_op_array * op_array	159:36:5489:5511	4167931	0	True				
ANR	4168159	ParameterType	zend_op_array *		4167931	0					
ANR	4168160	Identifier	op_array		4167931	1					
ANR	4168161	Parameter	zend_op * opline	160:36:5550:5570	4167931	1	True				
ANR	4168162	ParameterType	zend_op *		4167931	0					
ANR	4168163	Identifier	opline		4167931	1					
ANR	4168164	Parameter	zval * val	161:36:5609:5626	4167931	2	True				
ANR	4168165	ParameterType	zval *		4167931	0					
ANR	4168166	Identifier	val		4167931	1					
ANR	4168167	CFGEntryNode	ENTRY		4167931		True				
ANR	4168168	CFGExitNode	EXIT		4167931		True				
ANR	4168169	Symbol	val		4167931						
ANR	4168170	Symbol	opline -> op1		4167931						
ANR	4168171	Symbol	IS_CONST		4167931						
ANR	4168172	Symbol	Z_TYPE		4167931						
ANR	4168173	Symbol	Z_STR		4167931						
ANR	4168174	Symbol	zend_string_tolower		4167931						
ANR	4168175	Symbol	opline -> extended_value		4167931						
ANR	4168176	Symbol	ZEND_OP1_TYPE		4167931						
ANR	4168177	Symbol	opline		4167931						
ANR	4168178	Symbol	* opline		4167931						
ANR	4168179	Symbol	opline -> op1 . constant		4167931						
ANR	4168180	Symbol	opline -> opcode		4167931						
ANR	4168181	Symbol	ZEND_OP1_LITERAL		4167931						
ANR	4168182	Symbol	Z_STR_P		4167931						
ANR	4168183	Symbol	IS_STRING		4167931						
ANR	4168184	Symbol	op_array		4167931						
ANR	4168185	Symbol	zend_optimizer_add_literal		4167931						
ANR	4168186	Symbol	ZEND_FETCH_STATIC_MEMBER		4167931						
ANR	4168187	Function	zend_optimizer_update_op2_const	207:0:6840:11753							
ANR	4168188	FunctionDef	"zend_optimizer_update_op2_const (zend_op_array * op_array , zend_op * opline , zval * val)"		4168187	0					
ANR	4168189	CompoundStatement		210:0:7016:11753	4168187	0					
ANR	4168190	SwitchStatement	switch ( opline -> opcode )		4168187	0					
ANR	4168191	Condition	opline -> opcode	211:9:7027:7040	4168187	0	True				
ANR	4168192	PtrMemberAccess	opline -> opcode		4168187	0					
ANR	4168193	Identifier	opline		4168187	0					
ANR	4168194	Identifier	opcode		4168187	1					
ANR	4168195	CompoundStatement		2:25:26:26	4168187	1					
ANR	4168196	Label	case ZEND_ASSIGN_REF :	212:2:7047:7067	4168187	0	True				
ANR	4168197	Identifier	ZEND_ASSIGN_REF		4168187	0					
ANR	4168198	ExpressionStatement	zval_dtor ( val )	213:3:7072:7086	4168187	1	True				
ANR	4168199	CallExpression	zval_dtor ( val )		4168187	0					
ANR	4168200	Callee	zval_dtor		4168187	0					
ANR	4168201	Identifier	zval_dtor		4168187	0					
ANR	4168202	ArgumentList	val		4168187	1					
ANR	4168203	Argument	val		4168187	0					
ANR	4168204	Identifier	val		4168187	0					
ANR	4168205	ReturnStatement	return 0 ;	214:3:7091:7099	4168187	2	True				
ANR	4168206	PrimaryExpression	0		4168187	0					
ANR	4168207	Label	case ZEND_FETCH_R :	215:2:7103:7120	4168187	3	True				
ANR	4168208	Identifier	ZEND_FETCH_R		4168187	0					
ANR	4168209	Label	case ZEND_FETCH_W :	216:2:7124:7141	4168187	4	True				
ANR	4168210	Identifier	ZEND_FETCH_W		4168187	0					
ANR	4168211	Label	case ZEND_FETCH_RW :	217:2:7145:7163	4168187	5	True				
ANR	4168212	Identifier	ZEND_FETCH_RW		4168187	0					
ANR	4168213	Label	case ZEND_FETCH_IS :	218:2:7167:7185	4168187	6	True				
ANR	4168214	Identifier	ZEND_FETCH_IS		4168187	0					
ANR	4168215	Label	case ZEND_FETCH_UNSET :	219:2:7189:7210	4168187	7	True				
ANR	4168216	Identifier	ZEND_FETCH_UNSET		4168187	0					
ANR	4168217	Label	case ZEND_FETCH_FUNC_ARG :	220:2:7214:7238	4168187	8	True				
ANR	4168218	Identifier	ZEND_FETCH_FUNC_ARG		4168187	0					
ANR	4168219	Label	case ZEND_FETCH_CLASS :	221:2:7242:7263	4168187	9	True				
ANR	4168220	Identifier	ZEND_FETCH_CLASS		4168187	0					
ANR	4168221	Label	case ZEND_INIT_FCALL_BY_NAME :	222:2:7267:7295	4168187	10	True				
ANR	4168222	Identifier	ZEND_INIT_FCALL_BY_NAME		4168187	0					
ANR	4168223	Label	case ZEND_UNSET_VAR :	224:2:7338:7357	4168187	11	True				
ANR	4168224	Identifier	ZEND_UNSET_VAR		4168187	0					
ANR	4168225	Label	case ZEND_ISSET_ISEMPTY_VAR :	225:2:7361:7388	4168187	12	True				
ANR	4168226	Identifier	ZEND_ISSET_ISEMPTY_VAR		4168187	0					
ANR	4168227	Label	case ZEND_ADD_INTERFACE :	226:2:7392:7415	4168187	13	True				
ANR	4168228	Identifier	ZEND_ADD_INTERFACE		4168187	0					
ANR	4168229	Label	case ZEND_ADD_TRAIT :	227:2:7419:7438	4168187	14	True				
ANR	4168230	Identifier	ZEND_ADD_TRAIT		4168187	0					
ANR	4168231	Label	case ZEND_INSTANCEOF :	228:2:7442:7462	4168187	15	True				
ANR	4168232	Identifier	ZEND_INSTANCEOF		4168187	0					
ANR	4168233	ExpressionStatement	REQUIRES_STRING ( val )	229:3:7467:7487	4168187	16	True				
ANR	4168234	CallExpression	REQUIRES_STRING ( val )		4168187	0					
ANR	4168235	Callee	REQUIRES_STRING		4168187	0					
ANR	4168236	Identifier	REQUIRES_STRING		4168187	0					
ANR	4168237	ArgumentList	val		4168187	1					
ANR	4168238	Argument	val		4168187	0					
ANR	4168239	Identifier	val		4168187	0					
ANR	4168240	ExpressionStatement	drop_leading_backslash ( val )	230:3:7492:7519	4168187	17	True				
ANR	4168241	CallExpression	drop_leading_backslash ( val )		4168187	0					
ANR	4168242	Callee	drop_leading_backslash		4168187	0					
ANR	4168243	Identifier	drop_leading_backslash		4168187	0					
ANR	4168244	ArgumentList	val		4168187	1					
ANR	4168245	Argument	val		4168187	0					
ANR	4168246	Identifier	val		4168187	0					
ANR	4168247	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	231:3:7524:7588	4168187	18	True				
ANR	4168248	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168249	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168250	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168251	Identifier	opline		4168187	0					
ANR	4168252	Identifier	op2		4168187	1					
ANR	4168253	Identifier	constant		4168187	1					
ANR	4168254	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168255	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168256	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168257	ArgumentList	op_array		4168187	1					
ANR	4168258	Argument	op_array		4168187	0					
ANR	4168259	Identifier	op_array		4168187	0					
ANR	4168260	Argument	val		4168187	1					
ANR	4168261	Identifier	val		4168187	0					
ANR	4168262	ExpressionStatement	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"	232:3:7593:7671	4168187	19	True				
ANR	4168263	CallExpression	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"		4168187	0					
ANR	4168264	Callee	zend_optimizer_add_literal_string		4168187	0					
ANR	4168265	Identifier	zend_optimizer_add_literal_string		4168187	0					
ANR	4168266	ArgumentList	op_array		4168187	1					
ANR	4168267	Argument	op_array		4168187	0					
ANR	4168268	Identifier	op_array		4168187	0					
ANR	4168269	Argument	zend_string_tolower ( Z_STR_P ( val ) )		4168187	1					
ANR	4168270	CallExpression	zend_string_tolower ( Z_STR_P ( val ) )		4168187	0					
ANR	4168271	Callee	zend_string_tolower		4168187	0					
ANR	4168272	Identifier	zend_string_tolower		4168187	0					
ANR	4168273	ArgumentList	Z_STR_P ( val )		4168187	1					
ANR	4168274	Argument	Z_STR_P ( val )		4168187	0					
ANR	4168275	CallExpression	Z_STR_P ( val )		4168187	0					
ANR	4168276	Callee	Z_STR_P		4168187	0					
ANR	4168277	Identifier	Z_STR_P		4168187	0					
ANR	4168278	ArgumentList	val		4168187	1					
ANR	4168279	Argument	val		4168187	0					
ANR	4168280	Identifier	val		4168187	0					
ANR	4168281	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 1 )"	233:3:7676:7718	4168187	20	True				
ANR	4168282	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 1 )"		4168187	0					
ANR	4168283	Callee	alloc_cache_slots_op2		4168187	0					
ANR	4168284	Identifier	alloc_cache_slots_op2		4168187	0					
ANR	4168285	ArgumentList	op_array		4168187	1					
ANR	4168286	Argument	op_array		4168187	0					
ANR	4168287	Identifier	op_array		4168187	0					
ANR	4168288	Argument	opline		4168187	1					
ANR	4168289	Identifier	opline		4168187	0					
ANR	4168290	Argument	1		4168187	2					
ANR	4168291	PrimaryExpression	1		4168187	0					
ANR	4168292	BreakStatement	break ;	234:3:7723:7728	4168187	21	True				
ANR	4168293	Label	case ZEND_INIT_FCALL :	235:2:7732:7752	4168187	22	True				
ANR	4168294	Identifier	ZEND_INIT_FCALL		4168187	0					
ANR	4168295	ExpressionStatement	REQUIRES_STRING ( val )	236:3:7757:7777	4168187	23	True				
ANR	4168296	CallExpression	REQUIRES_STRING ( val )		4168187	0					
ANR	4168297	Callee	REQUIRES_STRING		4168187	0					
ANR	4168298	Identifier	REQUIRES_STRING		4168187	0					
ANR	4168299	ArgumentList	val		4168187	1					
ANR	4168300	Argument	val		4168187	0					
ANR	4168301	Identifier	val		4168187	0					
ANR	4168302	ExpressionStatement	"zend_str_tolower ( Z_STRVAL_P ( val ) , Z_STRLEN_P ( val ) )"	237:3:7782:7832	4168187	24	True				
ANR	4168303	CallExpression	"zend_str_tolower ( Z_STRVAL_P ( val ) , Z_STRLEN_P ( val ) )"		4168187	0					
ANR	4168304	Callee	zend_str_tolower		4168187	0					
ANR	4168305	Identifier	zend_str_tolower		4168187	0					
ANR	4168306	ArgumentList	Z_STRVAL_P ( val )		4168187	1					
ANR	4168307	Argument	Z_STRVAL_P ( val )		4168187	0					
ANR	4168308	CallExpression	Z_STRVAL_P ( val )		4168187	0					
ANR	4168309	Callee	Z_STRVAL_P		4168187	0					
ANR	4168310	Identifier	Z_STRVAL_P		4168187	0					
ANR	4168311	ArgumentList	val		4168187	1					
ANR	4168312	Argument	val		4168187	0					
ANR	4168313	Identifier	val		4168187	0					
ANR	4168314	Argument	Z_STRLEN_P ( val )		4168187	1					
ANR	4168315	CallExpression	Z_STRLEN_P ( val )		4168187	0					
ANR	4168316	Callee	Z_STRLEN_P		4168187	0					
ANR	4168317	Identifier	Z_STRLEN_P		4168187	0					
ANR	4168318	ArgumentList	val		4168187	1					
ANR	4168319	Argument	val		4168187	0					
ANR	4168320	Identifier	val		4168187	0					
ANR	4168321	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	238:3:7837:7901	4168187	25	True				
ANR	4168322	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168323	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168324	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168325	Identifier	opline		4168187	0					
ANR	4168326	Identifier	op2		4168187	1					
ANR	4168327	Identifier	constant		4168187	1					
ANR	4168328	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168329	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168330	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168331	ArgumentList	op_array		4168187	1					
ANR	4168332	Argument	op_array		4168187	0					
ANR	4168333	Identifier	op_array		4168187	0					
ANR	4168334	Argument	val		4168187	1					
ANR	4168335	Identifier	val		4168187	0					
ANR	4168336	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 1 )"	239:3:7906:7948	4168187	26	True				
ANR	4168337	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 1 )"		4168187	0					
ANR	4168338	Callee	alloc_cache_slots_op2		4168187	0					
ANR	4168339	Identifier	alloc_cache_slots_op2		4168187	0					
ANR	4168340	ArgumentList	op_array		4168187	1					
ANR	4168341	Argument	op_array		4168187	0					
ANR	4168342	Identifier	op_array		4168187	0					
ANR	4168343	Argument	opline		4168187	1					
ANR	4168344	Identifier	opline		4168187	0					
ANR	4168345	Argument	1		4168187	2					
ANR	4168346	PrimaryExpression	1		4168187	0					
ANR	4168347	BreakStatement	break ;	240:3:7953:7958	4168187	27	True				
ANR	4168348	Label	case ZEND_INIT_DYNAMIC_CALL :	241:2:7962:7989	4168187	28	True				
ANR	4168349	Identifier	ZEND_INIT_DYNAMIC_CALL		4168187	0					
ANR	4168350	IfStatement	if ( Z_TYPE_P ( val ) == IS_STRING )		4168187	29					
ANR	4168351	Condition	Z_TYPE_P ( val ) == IS_STRING	242:7:7998:8023	4168187	0	True				
ANR	4168352	EqualityExpression	Z_TYPE_P ( val ) == IS_STRING		4168187	0		==			
ANR	4168353	CallExpression	Z_TYPE_P ( val )		4168187	0					
ANR	4168354	Callee	Z_TYPE_P		4168187	0					
ANR	4168355	Identifier	Z_TYPE_P		4168187	0					
ANR	4168356	ArgumentList	val		4168187	1					
ANR	4168357	Argument	val		4168187	0					
ANR	4168358	Identifier	val		4168187	0					
ANR	4168359	Identifier	IS_STRING		4168187	1					
ANR	4168360	CompoundStatement		33:35:1009:1009	4168187	1					
ANR	4168361	IfStatement	"if ( zend_memrchr ( Z_STRVAL_P ( val ) , ':' , Z_STRLEN_P ( val ) ) )"		4168187	0					
ANR	4168362	Condition	"zend_memrchr ( Z_STRVAL_P ( val ) , ':' , Z_STRLEN_P ( val ) )"	243:8:8036:8086	4168187	0	True				
ANR	4168363	CallExpression	"zend_memrchr ( Z_STRVAL_P ( val ) , ':' , Z_STRLEN_P ( val ) )"		4168187	0					
ANR	4168364	Callee	zend_memrchr		4168187	0					
ANR	4168365	Identifier	zend_memrchr		4168187	0					
ANR	4168366	ArgumentList	Z_STRVAL_P ( val )		4168187	1					
ANR	4168367	Argument	Z_STRVAL_P ( val )		4168187	0					
ANR	4168368	CallExpression	Z_STRVAL_P ( val )		4168187	0					
ANR	4168369	Callee	Z_STRVAL_P		4168187	0					
ANR	4168370	Identifier	Z_STRVAL_P		4168187	0					
ANR	4168371	ArgumentList	val		4168187	1					
ANR	4168372	Argument	val		4168187	0					
ANR	4168373	Identifier	val		4168187	0					
ANR	4168374	Argument	':'		4168187	1					
ANR	4168375	PrimaryExpression	':'		4168187	0					
ANR	4168376	Argument	Z_STRLEN_P ( val )		4168187	2					
ANR	4168377	CallExpression	Z_STRLEN_P ( val )		4168187	0					
ANR	4168378	Callee	Z_STRLEN_P		4168187	0					
ANR	4168379	Identifier	Z_STRLEN_P		4168187	0					
ANR	4168380	ArgumentList	val		4168187	1					
ANR	4168381	Argument	val		4168187	0					
ANR	4168382	Identifier	val		4168187	0					
ANR	4168383	CompoundStatement		34:61:1072:1072	4168187	1					
ANR	4168384	ExpressionStatement	zval_dtor ( val )	244:5:8096:8110	4168187	0	True				
ANR	4168385	CallExpression	zval_dtor ( val )		4168187	0					
ANR	4168386	Callee	zval_dtor		4168187	0					
ANR	4168387	Identifier	zval_dtor		4168187	0					
ANR	4168388	ArgumentList	val		4168187	1					
ANR	4168389	Argument	val		4168187	0					
ANR	4168390	Identifier	val		4168187	0					
ANR	4168391	ReturnStatement	return 0 ;	245:5:8117:8125	4168187	1	True				
ANR	4168392	PrimaryExpression	0		4168187	0					
ANR	4168393	ExpressionStatement	opline -> opcode = ZEND_INIT_FCALL_BY_NAME	248:4:8138:8178	4168187	1	True				
ANR	4168394	AssignmentExpression	opline -> opcode = ZEND_INIT_FCALL_BY_NAME		4168187	0		=			
ANR	4168395	PtrMemberAccess	opline -> opcode		4168187	0					
ANR	4168396	Identifier	opline		4168187	0					
ANR	4168397	Identifier	opcode		4168187	1					
ANR	4168398	Identifier	ZEND_INIT_FCALL_BY_NAME		4168187	1					
ANR	4168399	ExpressionStatement	drop_leading_backslash ( val )	249:4:8184:8211	4168187	2	True				
ANR	4168400	CallExpression	drop_leading_backslash ( val )		4168187	0					
ANR	4168401	Callee	drop_leading_backslash		4168187	0					
ANR	4168402	Identifier	drop_leading_backslash		4168187	0					
ANR	4168403	ArgumentList	val		4168187	1					
ANR	4168404	Argument	val		4168187	0					
ANR	4168405	Identifier	val		4168187	0					
ANR	4168406	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	250:4:8217:8281	4168187	3	True				
ANR	4168407	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168408	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168409	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168410	Identifier	opline		4168187	0					
ANR	4168411	Identifier	op2		4168187	1					
ANR	4168412	Identifier	constant		4168187	1					
ANR	4168413	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168414	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168415	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168416	ArgumentList	op_array		4168187	1					
ANR	4168417	Argument	op_array		4168187	0					
ANR	4168418	Identifier	op_array		4168187	0					
ANR	4168419	Argument	val		4168187	1					
ANR	4168420	Identifier	val		4168187	0					
ANR	4168421	ExpressionStatement	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"	251:4:8287:8365	4168187	4	True				
ANR	4168422	CallExpression	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"		4168187	0					
ANR	4168423	Callee	zend_optimizer_add_literal_string		4168187	0					
ANR	4168424	Identifier	zend_optimizer_add_literal_string		4168187	0					
ANR	4168425	ArgumentList	op_array		4168187	1					
ANR	4168426	Argument	op_array		4168187	0					
ANR	4168427	Identifier	op_array		4168187	0					
ANR	4168428	Argument	zend_string_tolower ( Z_STR_P ( val ) )		4168187	1					
ANR	4168429	CallExpression	zend_string_tolower ( Z_STR_P ( val ) )		4168187	0					
ANR	4168430	Callee	zend_string_tolower		4168187	0					
ANR	4168431	Identifier	zend_string_tolower		4168187	0					
ANR	4168432	ArgumentList	Z_STR_P ( val )		4168187	1					
ANR	4168433	Argument	Z_STR_P ( val )		4168187	0					
ANR	4168434	CallExpression	Z_STR_P ( val )		4168187	0					
ANR	4168435	Callee	Z_STR_P		4168187	0					
ANR	4168436	Identifier	Z_STR_P		4168187	0					
ANR	4168437	ArgumentList	val		4168187	1					
ANR	4168438	Argument	val		4168187	0					
ANR	4168439	Identifier	val		4168187	0					
ANR	4168440	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 1 )"	252:4:8371:8413	4168187	5	True				
ANR	4168441	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 1 )"		4168187	0					
ANR	4168442	Callee	alloc_cache_slots_op2		4168187	0					
ANR	4168443	Identifier	alloc_cache_slots_op2		4168187	0					
ANR	4168444	ArgumentList	op_array		4168187	1					
ANR	4168445	Argument	op_array		4168187	0					
ANR	4168446	Identifier	op_array		4168187	0					
ANR	4168447	Argument	opline		4168187	1					
ANR	4168448	Identifier	opline		4168187	0					
ANR	4168449	Argument	1		4168187	2					
ANR	4168450	PrimaryExpression	1		4168187	0					
ANR	4168451	ElseStatement	else		4168187	0					
ANR	4168452	CompoundStatement		44:10:1408:1408	4168187	0					
ANR	4168453	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	254:4:8431:8495	4168187	0	True				
ANR	4168454	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168455	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168456	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168457	Identifier	opline		4168187	0					
ANR	4168458	Identifier	op2		4168187	1					
ANR	4168459	Identifier	constant		4168187	1					
ANR	4168460	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168461	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168462	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168463	ArgumentList	op_array		4168187	1					
ANR	4168464	Argument	op_array		4168187	0					
ANR	4168465	Identifier	op_array		4168187	0					
ANR	4168466	Argument	val		4168187	1					
ANR	4168467	Identifier	val		4168187	0					
ANR	4168468	BreakStatement	break ;	256:3:8505:8510	4168187	30	True				
ANR	4168469	Label	case ZEND_INIT_METHOD_CALL :	257:2:8514:8540	4168187	31	True				
ANR	4168470	Identifier	ZEND_INIT_METHOD_CALL		4168187	0					
ANR	4168471	Label	case ZEND_INIT_STATIC_METHOD_CALL :	258:2:8544:8577	4168187	32	True				
ANR	4168472	Identifier	ZEND_INIT_STATIC_METHOD_CALL		4168187	0					
ANR	4168473	ExpressionStatement	REQUIRES_STRING ( val )	259:3:8582:8602	4168187	33	True				
ANR	4168474	CallExpression	REQUIRES_STRING ( val )		4168187	0					
ANR	4168475	Callee	REQUIRES_STRING		4168187	0					
ANR	4168476	Identifier	REQUIRES_STRING		4168187	0					
ANR	4168477	ArgumentList	val		4168187	1					
ANR	4168478	Argument	val		4168187	0					
ANR	4168479	Identifier	val		4168187	0					
ANR	4168480	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	260:3:8607:8671	4168187	34	True				
ANR	4168481	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168482	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168483	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168484	Identifier	opline		4168187	0					
ANR	4168485	Identifier	op2		4168187	1					
ANR	4168486	Identifier	constant		4168187	1					
ANR	4168487	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168488	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168489	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168490	ArgumentList	op_array		4168187	1					
ANR	4168491	Argument	op_array		4168187	0					
ANR	4168492	Identifier	op_array		4168187	0					
ANR	4168493	Argument	val		4168187	1					
ANR	4168494	Identifier	val		4168187	0					
ANR	4168495	ExpressionStatement	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"	261:3:8676:8754	4168187	35	True				
ANR	4168496	CallExpression	"zend_optimizer_add_literal_string ( op_array , zend_string_tolower ( Z_STR_P ( val ) ) )"		4168187	0					
ANR	4168497	Callee	zend_optimizer_add_literal_string		4168187	0					
ANR	4168498	Identifier	zend_optimizer_add_literal_string		4168187	0					
ANR	4168499	ArgumentList	op_array		4168187	1					
ANR	4168500	Argument	op_array		4168187	0					
ANR	4168501	Identifier	op_array		4168187	0					
ANR	4168502	Argument	zend_string_tolower ( Z_STR_P ( val ) )		4168187	1					
ANR	4168503	CallExpression	zend_string_tolower ( Z_STR_P ( val ) )		4168187	0					
ANR	4168504	Callee	zend_string_tolower		4168187	0					
ANR	4168505	Identifier	zend_string_tolower		4168187	0					
ANR	4168506	ArgumentList	Z_STR_P ( val )		4168187	1					
ANR	4168507	Argument	Z_STR_P ( val )		4168187	0					
ANR	4168508	CallExpression	Z_STR_P ( val )		4168187	0					
ANR	4168509	Callee	Z_STR_P		4168187	0					
ANR	4168510	Identifier	Z_STR_P		4168187	0					
ANR	4168511	ArgumentList	val		4168187	1					
ANR	4168512	Argument	val		4168187	0					
ANR	4168513	Identifier	val		4168187	0					
ANR	4168514	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 2 )"	262:3:8759:8801	4168187	36	True				
ANR	4168515	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 2 )"		4168187	0					
ANR	4168516	Callee	alloc_cache_slots_op2		4168187	0					
ANR	4168517	Identifier	alloc_cache_slots_op2		4168187	0					
ANR	4168518	ArgumentList	op_array		4168187	1					
ANR	4168519	Argument	op_array		4168187	0					
ANR	4168520	Identifier	op_array		4168187	0					
ANR	4168521	Argument	opline		4168187	1					
ANR	4168522	Identifier	opline		4168187	0					
ANR	4168523	Argument	2		4168187	2					
ANR	4168524	PrimaryExpression	2		4168187	0					
ANR	4168525	BreakStatement	break ;	263:3:8806:8811	4168187	37	True				
ANR	4168526	Label	case ZEND_ASSIGN_OBJ :	265:2:8847:8867	4168187	38	True				
ANR	4168527	Identifier	ZEND_ASSIGN_OBJ		4168187	0					
ANR	4168528	Label	case ZEND_FETCH_OBJ_R :	266:2:8871:8892	4168187	39	True				
ANR	4168529	Identifier	ZEND_FETCH_OBJ_R		4168187	0					
ANR	4168530	Label	case ZEND_FETCH_OBJ_W :	267:2:8896:8917	4168187	40	True				
ANR	4168531	Identifier	ZEND_FETCH_OBJ_W		4168187	0					
ANR	4168532	Label	case ZEND_FETCH_OBJ_RW :	268:2:8921:8943	4168187	41	True				
ANR	4168533	Identifier	ZEND_FETCH_OBJ_RW		4168187	0					
ANR	4168534	Label	case ZEND_FETCH_OBJ_IS :	269:2:8947:8969	4168187	42	True				
ANR	4168535	Identifier	ZEND_FETCH_OBJ_IS		4168187	0					
ANR	4168536	Label	case ZEND_FETCH_OBJ_UNSET :	270:2:8973:8998	4168187	43	True				
ANR	4168537	Identifier	ZEND_FETCH_OBJ_UNSET		4168187	0					
ANR	4168538	Label	case ZEND_FETCH_OBJ_FUNC_ARG :	271:2:9002:9030	4168187	44	True				
ANR	4168539	Identifier	ZEND_FETCH_OBJ_FUNC_ARG		4168187	0					
ANR	4168540	Label	case ZEND_UNSET_OBJ :	272:2:9034:9053	4168187	45	True				
ANR	4168541	Identifier	ZEND_UNSET_OBJ		4168187	0					
ANR	4168542	Label	case ZEND_PRE_INC_OBJ :	273:2:9057:9078	4168187	46	True				
ANR	4168543	Identifier	ZEND_PRE_INC_OBJ		4168187	0					
ANR	4168544	Label	case ZEND_PRE_DEC_OBJ :	274:2:9082:9103	4168187	47	True				
ANR	4168545	Identifier	ZEND_PRE_DEC_OBJ		4168187	0					
ANR	4168546	Label	case ZEND_POST_INC_OBJ :	275:2:9107:9129	4168187	48	True				
ANR	4168547	Identifier	ZEND_POST_INC_OBJ		4168187	0					
ANR	4168548	Label	case ZEND_POST_DEC_OBJ :	276:2:9133:9155	4168187	49	True				
ANR	4168549	Identifier	ZEND_POST_DEC_OBJ		4168187	0					
ANR	4168550	Label	case ZEND_ISSET_ISEMPTY_PROP_OBJ :	277:2:9159:9191	4168187	50	True				
ANR	4168551	Identifier	ZEND_ISSET_ISEMPTY_PROP_OBJ		4168187	0					
ANR	4168552	ExpressionStatement	TO_STRING_NOWARN ( val )	278:3:9196:9217	4168187	51	True				
ANR	4168553	CallExpression	TO_STRING_NOWARN ( val )		4168187	0					
ANR	4168554	Callee	TO_STRING_NOWARN		4168187	0					
ANR	4168555	Identifier	TO_STRING_NOWARN		4168187	0					
ANR	4168556	ArgumentList	val		4168187	1					
ANR	4168557	Argument	val		4168187	0					
ANR	4168558	Identifier	val		4168187	0					
ANR	4168559	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	279:3:9222:9286	4168187	52	True				
ANR	4168560	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168561	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168562	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168563	Identifier	opline		4168187	0					
ANR	4168564	Identifier	op2		4168187	1					
ANR	4168565	Identifier	constant		4168187	1					
ANR	4168566	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168567	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168568	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168569	ArgumentList	op_array		4168187	1					
ANR	4168570	Argument	op_array		4168187	0					
ANR	4168571	Identifier	op_array		4168187	0					
ANR	4168572	Argument	val		4168187	1					
ANR	4168573	Identifier	val		4168187	0					
ANR	4168574	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 2 )"	280:3:9291:9333	4168187	53	True				
ANR	4168575	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 2 )"		4168187	0					
ANR	4168576	Callee	alloc_cache_slots_op2		4168187	0					
ANR	4168577	Identifier	alloc_cache_slots_op2		4168187	0					
ANR	4168578	ArgumentList	op_array		4168187	1					
ANR	4168579	Argument	op_array		4168187	0					
ANR	4168580	Identifier	op_array		4168187	0					
ANR	4168581	Argument	opline		4168187	1					
ANR	4168582	Identifier	opline		4168187	0					
ANR	4168583	Argument	2		4168187	2					
ANR	4168584	PrimaryExpression	2		4168187	0					
ANR	4168585	BreakStatement	break ;	281:3:9338:9343	4168187	54	True				
ANR	4168586	Label	case ZEND_ASSIGN_ADD :	282:2:9347:9367	4168187	55	True				
ANR	4168587	Identifier	ZEND_ASSIGN_ADD		4168187	0					
ANR	4168588	Label	case ZEND_ASSIGN_SUB :	283:2:9371:9391	4168187	56	True				
ANR	4168589	Identifier	ZEND_ASSIGN_SUB		4168187	0					
ANR	4168590	Label	case ZEND_ASSIGN_MUL :	284:2:9395:9415	4168187	57	True				
ANR	4168591	Identifier	ZEND_ASSIGN_MUL		4168187	0					
ANR	4168592	Label	case ZEND_ASSIGN_DIV :	285:2:9419:9439	4168187	58	True				
ANR	4168593	Identifier	ZEND_ASSIGN_DIV		4168187	0					
ANR	4168594	Label	case ZEND_ASSIGN_POW :	286:2:9443:9463	4168187	59	True				
ANR	4168595	Identifier	ZEND_ASSIGN_POW		4168187	0					
ANR	4168596	Label	case ZEND_ASSIGN_MOD :	287:2:9467:9487	4168187	60	True				
ANR	4168597	Identifier	ZEND_ASSIGN_MOD		4168187	0					
ANR	4168598	Label	case ZEND_ASSIGN_SL :	288:2:9491:9510	4168187	61	True				
ANR	4168599	Identifier	ZEND_ASSIGN_SL		4168187	0					
ANR	4168600	Label	case ZEND_ASSIGN_SR :	289:2:9514:9533	4168187	62	True				
ANR	4168601	Identifier	ZEND_ASSIGN_SR		4168187	0					
ANR	4168602	Label	case ZEND_ASSIGN_CONCAT :	290:2:9537:9560	4168187	63	True				
ANR	4168603	Identifier	ZEND_ASSIGN_CONCAT		4168187	0					
ANR	4168604	Label	case ZEND_ASSIGN_BW_OR :	291:2:9564:9586	4168187	64	True				
ANR	4168605	Identifier	ZEND_ASSIGN_BW_OR		4168187	0					
ANR	4168606	Label	case ZEND_ASSIGN_BW_AND :	292:2:9590:9613	4168187	65	True				
ANR	4168607	Identifier	ZEND_ASSIGN_BW_AND		4168187	0					
ANR	4168608	Label	case ZEND_ASSIGN_BW_XOR :	293:2:9617:9640	4168187	66	True				
ANR	4168609	Identifier	ZEND_ASSIGN_BW_XOR		4168187	0					
ANR	4168610	IfStatement	if ( opline -> extended_value == ZEND_ASSIGN_OBJ )		4168187	67					
ANR	4168611	Condition	opline -> extended_value == ZEND_ASSIGN_OBJ	294:7:9649:9689	4168187	0	True				
ANR	4168612	EqualityExpression	opline -> extended_value == ZEND_ASSIGN_OBJ		4168187	0		==			
ANR	4168613	PtrMemberAccess	opline -> extended_value		4168187	0					
ANR	4168614	Identifier	opline		4168187	0					
ANR	4168615	Identifier	extended_value		4168187	1					
ANR	4168616	Identifier	ZEND_ASSIGN_OBJ		4168187	1					
ANR	4168617	CompoundStatement		85:50:2675:2675	4168187	1					
ANR	4168618	ExpressionStatement	TO_STRING_NOWARN ( val )	295:4:9698:9719	4168187	0	True				
ANR	4168619	CallExpression	TO_STRING_NOWARN ( val )		4168187	0					
ANR	4168620	Callee	TO_STRING_NOWARN		4168187	0					
ANR	4168621	Identifier	TO_STRING_NOWARN		4168187	0					
ANR	4168622	ArgumentList	val		4168187	1					
ANR	4168623	Argument	val		4168187	0					
ANR	4168624	Identifier	val		4168187	0					
ANR	4168625	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	296:4:9725:9789	4168187	1	True				
ANR	4168626	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168627	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168628	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168629	Identifier	opline		4168187	0					
ANR	4168630	Identifier	op2		4168187	1					
ANR	4168631	Identifier	constant		4168187	1					
ANR	4168632	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168633	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168634	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168635	ArgumentList	op_array		4168187	1					
ANR	4168636	Argument	op_array		4168187	0					
ANR	4168637	Identifier	op_array		4168187	0					
ANR	4168638	Argument	val		4168187	1					
ANR	4168639	Identifier	val		4168187	0					
ANR	4168640	ExpressionStatement	"alloc_cache_slots_op2 ( op_array , opline , 2 )"	297:4:9795:9837	4168187	2	True				
ANR	4168641	CallExpression	"alloc_cache_slots_op2 ( op_array , opline , 2 )"		4168187	0					
ANR	4168642	Callee	alloc_cache_slots_op2		4168187	0					
ANR	4168643	Identifier	alloc_cache_slots_op2		4168187	0					
ANR	4168644	ArgumentList	op_array		4168187	1					
ANR	4168645	Argument	op_array		4168187	0					
ANR	4168646	Identifier	op_array		4168187	0					
ANR	4168647	Argument	opline		4168187	1					
ANR	4168648	Identifier	opline		4168187	0					
ANR	4168649	Argument	2		4168187	2					
ANR	4168650	PrimaryExpression	2		4168187	0					
ANR	4168651	ElseStatement	else		4168187	0					
ANR	4168652	CompoundStatement		89:10:2832:2832	4168187	0					
ANR	4168653	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	299:4:9855:9919	4168187	0	True				
ANR	4168654	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168655	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168656	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168657	Identifier	opline		4168187	0					
ANR	4168658	Identifier	op2		4168187	1					
ANR	4168659	Identifier	constant		4168187	1					
ANR	4168660	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168661	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168662	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168663	ArgumentList	op_array		4168187	1					
ANR	4168664	Argument	op_array		4168187	0					
ANR	4168665	Identifier	op_array		4168187	0					
ANR	4168666	Argument	val		4168187	1					
ANR	4168667	Identifier	val		4168187	0					
ANR	4168668	BreakStatement	break ;	301:3:9929:9934	4168187	68	True				
ANR	4168669	Label	case ZEND_OP_DATA :	302:2:9938:9955	4168187	69	True				
ANR	4168670	Identifier	ZEND_OP_DATA		4168187	0					
ANR	4168671	IfStatement	if ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIM && ( ( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM || ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR ) ) )		4168187	70					
ANR	4168672	Condition	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIM && ( ( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM || ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR ) )	303:7:9964:10618	4168187	0	True				
ANR	4168673	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIM && ( ( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM || ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR ) )		4168187	0		&&			
ANR	4168674	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIM		4168187	0		!=			
ANR	4168675	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168676	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168677	Identifier	opline		4168187	0					
ANR	4168678	PrimaryExpression	1		4168187	1					
ANR	4168679	Identifier	opcode		4168187	1					
ANR	4168680	Identifier	ZEND_ASSIGN_DIM		4168187	1					
ANR	4168681	OrExpression	( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM || ( ( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR )		4168187	1		||			
ANR	4168682	EqualityExpression	( opline - 1 ) -> extended_value != ZEND_ASSIGN_DIM		4168187	0		!=			
ANR	4168683	PtrMemberAccess	( opline - 1 ) -> extended_value		4168187	0					
ANR	4168684	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168685	Identifier	opline		4168187	0					
ANR	4168686	PrimaryExpression	1		4168187	1					
ANR	4168687	Identifier	extended_value		4168187	1					
ANR	4168688	Identifier	ZEND_ASSIGN_DIM		4168187	1					
ANR	4168689	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168690	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_ADD		4168187	0		!=			
ANR	4168691	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168692	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168693	Identifier	opline		4168187	0					
ANR	4168694	PrimaryExpression	1		4168187	1					
ANR	4168695	Identifier	opcode		4168187	1					
ANR	4168696	Identifier	ZEND_ASSIGN_ADD		4168187	1					
ANR	4168697	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168698	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SUB		4168187	0		!=			
ANR	4168699	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168700	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168701	Identifier	opline		4168187	0					
ANR	4168702	PrimaryExpression	1		4168187	1					
ANR	4168703	Identifier	opcode		4168187	1					
ANR	4168704	Identifier	ZEND_ASSIGN_SUB		4168187	1					
ANR	4168705	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168706	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_MUL		4168187	0		!=			
ANR	4168707	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168708	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168709	Identifier	opline		4168187	0					
ANR	4168710	PrimaryExpression	1		4168187	1					
ANR	4168711	Identifier	opcode		4168187	1					
ANR	4168712	Identifier	ZEND_ASSIGN_MUL		4168187	1					
ANR	4168713	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV && ( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168714	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_DIV		4168187	0		!=			
ANR	4168715	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168716	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168717	Identifier	opline		4168187	0					
ANR	4168718	PrimaryExpression	1		4168187	1					
ANR	4168719	Identifier	opcode		4168187	1					
ANR	4168720	Identifier	ZEND_ASSIGN_DIV		4168187	1					
ANR	4168721	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_POW && ( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168722	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_POW		4168187	0		!=			
ANR	4168723	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168724	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168725	Identifier	opline		4168187	0					
ANR	4168726	PrimaryExpression	1		4168187	1					
ANR	4168727	Identifier	opcode		4168187	1					
ANR	4168728	Identifier	ZEND_ASSIGN_POW		4168187	1					
ANR	4168729	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168730	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_MOD		4168187	0		!=			
ANR	4168731	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168732	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168733	Identifier	opline		4168187	0					
ANR	4168734	PrimaryExpression	1		4168187	1					
ANR	4168735	Identifier	opcode		4168187	1					
ANR	4168736	Identifier	ZEND_ASSIGN_MOD		4168187	1					
ANR	4168737	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SL && ( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168738	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SL		4168187	0		!=			
ANR	4168739	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168740	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168741	Identifier	opline		4168187	0					
ANR	4168742	PrimaryExpression	1		4168187	1					
ANR	4168743	Identifier	opcode		4168187	1					
ANR	4168744	Identifier	ZEND_ASSIGN_SL		4168187	1					
ANR	4168745	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168746	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_SR		4168187	0		!=			
ANR	4168747	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168748	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168749	Identifier	opline		4168187	0					
ANR	4168750	PrimaryExpression	1		4168187	1					
ANR	4168751	Identifier	opcode		4168187	1					
ANR	4168752	Identifier	ZEND_ASSIGN_SR		4168187	1					
ANR	4168753	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168754	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_CONCAT		4168187	0		!=			
ANR	4168755	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168756	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168757	Identifier	opline		4168187	0					
ANR	4168758	PrimaryExpression	1		4168187	1					
ANR	4168759	Identifier	opcode		4168187	1					
ANR	4168760	Identifier	ZEND_ASSIGN_CONCAT		4168187	1					
ANR	4168761	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168762	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_OR		4168187	0		!=			
ANR	4168763	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168764	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168765	Identifier	opline		4168187	0					
ANR	4168766	PrimaryExpression	1		4168187	1					
ANR	4168767	Identifier	opcode		4168187	1					
ANR	4168768	Identifier	ZEND_ASSIGN_BW_OR		4168187	1					
ANR	4168769	AndExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND && ( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		&&			
ANR	4168770	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_AND		4168187	0		!=			
ANR	4168771	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168772	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168773	Identifier	opline		4168187	0					
ANR	4168774	PrimaryExpression	1		4168187	1					
ANR	4168775	Identifier	opcode		4168187	1					
ANR	4168776	Identifier	ZEND_ASSIGN_BW_AND		4168187	1					
ANR	4168777	EqualityExpression	( opline - 1 ) -> opcode != ZEND_ASSIGN_BW_XOR		4168187	1		!=			
ANR	4168778	PtrMemberAccess	( opline - 1 ) -> opcode		4168187	0					
ANR	4168779	AdditiveExpression	opline - 1		4168187	0		-			
ANR	4168780	Identifier	opline		4168187	0					
ANR	4168781	PrimaryExpression	1		4168187	1					
ANR	4168782	Identifier	opcode		4168187	1					
ANR	4168783	Identifier	ZEND_ASSIGN_BW_XOR		4168187	1					
ANR	4168784	CompoundStatement		108:5:3608:3608	4168187	1					
ANR	4168785	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	318:4:10631:10695	4168187	0	True				
ANR	4168786	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168787	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168788	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168789	Identifier	opline		4168187	0					
ANR	4168790	Identifier	op2		4168187	1					
ANR	4168791	Identifier	constant		4168187	1					
ANR	4168792	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168793	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168794	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168795	ArgumentList	op_array		4168187	1					
ANR	4168796	Argument	op_array		4168187	0					
ANR	4168797	Identifier	op_array		4168187	0					
ANR	4168798	Argument	val		4168187	1					
ANR	4168799	Identifier	val		4168187	0					
ANR	4168800	BreakStatement	break ;	319:4:10701:10706	4168187	1	True				
ANR	4168801	Label	case ZEND_ISSET_ISEMPTY_DIM_OBJ :	322:2:10752:10783	4168187	71	True				
ANR	4168802	Identifier	ZEND_ISSET_ISEMPTY_DIM_OBJ		4168187	0					
ANR	4168803	Label	case ZEND_ADD_ARRAY_ELEMENT :	323:2:10787:10814	4168187	72	True				
ANR	4168804	Identifier	ZEND_ADD_ARRAY_ELEMENT		4168187	0					
ANR	4168805	Label	case ZEND_INIT_ARRAY :	324:2:10818:10838	4168187	73	True				
ANR	4168806	Identifier	ZEND_INIT_ARRAY		4168187	0					
ANR	4168807	Label	case ZEND_ASSIGN_DIM :	325:2:10842:10862	4168187	74	True				
ANR	4168808	Identifier	ZEND_ASSIGN_DIM		4168187	0					
ANR	4168809	Label	case ZEND_UNSET_DIM :	326:2:10866:10885	4168187	75	True				
ANR	4168810	Identifier	ZEND_UNSET_DIM		4168187	0					
ANR	4168811	Label	case ZEND_FETCH_DIM_R :	327:2:10889:10910	4168187	76	True				
ANR	4168812	Identifier	ZEND_FETCH_DIM_R		4168187	0					
ANR	4168813	Label	case ZEND_FETCH_DIM_W :	328:2:10914:10935	4168187	77	True				
ANR	4168814	Identifier	ZEND_FETCH_DIM_W		4168187	0					
ANR	4168815	Label	case ZEND_FETCH_DIM_RW :	329:2:10939:10961	4168187	78	True				
ANR	4168816	Identifier	ZEND_FETCH_DIM_RW		4168187	0					
ANR	4168817	Label	case ZEND_FETCH_DIM_IS :	330:2:10965:10987	4168187	79	True				
ANR	4168818	Identifier	ZEND_FETCH_DIM_IS		4168187	0					
ANR	4168819	Label	case ZEND_FETCH_DIM_FUNC_ARG :	331:2:10991:11019	4168187	80	True				
ANR	4168820	Identifier	ZEND_FETCH_DIM_FUNC_ARG		4168187	0					
ANR	4168821	Label	case ZEND_FETCH_DIM_UNSET :	332:2:11023:11048	4168187	81	True				
ANR	4168822	Identifier	ZEND_FETCH_DIM_UNSET		4168187	0					
ANR	4168823	Label	case ZEND_FETCH_LIST :	333:2:11052:11072	4168187	82	True				
ANR	4168824	Identifier	ZEND_FETCH_LIST		4168187	0					
ANR	4168825	IfStatement	if ( Z_TYPE_P ( val ) == IS_STRING )		4168187	83					
ANR	4168826	Condition	Z_TYPE_P ( val ) == IS_STRING	334:7:11081:11106	4168187	0	True				
ANR	4168827	EqualityExpression	Z_TYPE_P ( val ) == IS_STRING		4168187	0		==			
ANR	4168828	CallExpression	Z_TYPE_P ( val )		4168187	0					
ANR	4168829	Callee	Z_TYPE_P		4168187	0					
ANR	4168830	Identifier	Z_TYPE_P		4168187	0					
ANR	4168831	ArgumentList	val		4168187	1					
ANR	4168832	Argument	val		4168187	0					
ANR	4168833	Identifier	val		4168187	0					
ANR	4168834	Identifier	IS_STRING		4168187	1					
ANR	4168835	CompoundStatement		126:4:4098:4114	4168187	1					
ANR	4168836	IdentifierDeclStatement	zend_ulong index ;	335:4:11115:11131	4168187	0	True				
ANR	4168837	IdentifierDecl	index		4168187	0					
ANR	4168838	IdentifierDeclType	zend_ulong		4168187	0					
ANR	4168839	Identifier	index		4168187	1					
ANR	4168840	IfStatement	"if ( ZEND_HANDLE_NUMERIC ( Z_STR_P ( val ) , index ) )"		4168187	1					
ANR	4168841	Condition	"ZEND_HANDLE_NUMERIC ( Z_STR_P ( val ) , index )"	336:8:11141:11180	4168187	0	True				
ANR	4168842	CallExpression	"ZEND_HANDLE_NUMERIC ( Z_STR_P ( val ) , index )"		4168187	0					
ANR	4168843	Callee	ZEND_HANDLE_NUMERIC		4168187	0					
ANR	4168844	Identifier	ZEND_HANDLE_NUMERIC		4168187	0					
ANR	4168845	ArgumentList	Z_STR_P ( val )		4168187	1					
ANR	4168846	Argument	Z_STR_P ( val )		4168187	0					
ANR	4168847	CallExpression	Z_STR_P ( val )		4168187	0					
ANR	4168848	Callee	Z_STR_P		4168187	0					
ANR	4168849	Identifier	Z_STR_P		4168187	0					
ANR	4168850	ArgumentList	val		4168187	1					
ANR	4168851	Argument	val		4168187	0					
ANR	4168852	Identifier	val		4168187	0					
ANR	4168853	Argument	index		4168187	1					
ANR	4168854	Identifier	index		4168187	0					
ANR	4168855	CompoundStatement		127:50:4166:4166	4168187	1					
ANR	4168856	ExpressionStatement	zval_dtor ( val )	337:5:11190:11204	4168187	0	True				
ANR	4168857	CallExpression	zval_dtor ( val )		4168187	0					
ANR	4168858	Callee	zval_dtor		4168187	0					
ANR	4168859	Identifier	zval_dtor		4168187	0					
ANR	4168860	ArgumentList	val		4168187	1					
ANR	4168861	Argument	val		4168187	0					
ANR	4168862	Identifier	val		4168187	0					
ANR	4168863	ExpressionStatement	"ZVAL_LONG ( val , index )"	338:5:11211:11232	4168187	1	True				
ANR	4168864	CallExpression	"ZVAL_LONG ( val , index )"		4168187	0					
ANR	4168865	Callee	ZVAL_LONG		4168187	0					
ANR	4168866	Identifier	ZVAL_LONG		4168187	0					
ANR	4168867	ArgumentList	val		4168187	1					
ANR	4168868	Argument	val		4168187	0					
ANR	4168869	Identifier	val		4168187	0					
ANR	4168870	Argument	index		4168187	1					
ANR	4168871	Identifier	index		4168187	0					
ANR	4168872	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	341:3:11248:11312	4168187	84	True				
ANR	4168873	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168874	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168875	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168876	Identifier	opline		4168187	0					
ANR	4168877	Identifier	op2		4168187	1					
ANR	4168878	Identifier	constant		4168187	1					
ANR	4168879	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168880	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168881	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168882	ArgumentList	op_array		4168187	1					
ANR	4168883	Argument	op_array		4168187	0					
ANR	4168884	Identifier	op_array		4168187	0					
ANR	4168885	Argument	val		4168187	1					
ANR	4168886	Identifier	val		4168187	0					
ANR	4168887	BreakStatement	break ;	342:3:11317:11322	4168187	85	True				
ANR	4168888	Label	case ZEND_ROPE_INIT :	343:2:11326:11345	4168187	86	True				
ANR	4168889	Identifier	ZEND_ROPE_INIT		4168187	0					
ANR	4168890	Label	case ZEND_ROPE_ADD :	344:2:11349:11367	4168187	87	True				
ANR	4168891	Identifier	ZEND_ROPE_ADD		4168187	0					
ANR	4168892	Label	case ZEND_ROPE_END :	345:2:11371:11389	4168187	88	True				
ANR	4168893	Identifier	ZEND_ROPE_END		4168187	0					
ANR	4168894	Label	case ZEND_CONCAT :	346:2:11393:11409	4168187	89	True				
ANR	4168895	Identifier	ZEND_CONCAT		4168187	0					
ANR	4168896	Label	case ZEND_FAST_CONCAT :	347:2:11413:11434	4168187	90	True				
ANR	4168897	Identifier	ZEND_FAST_CONCAT		4168187	0					
ANR	4168898	ExpressionStatement	TO_STRING_NOWARN ( val )	348:3:11439:11460	4168187	91	True				
ANR	4168899	CallExpression	TO_STRING_NOWARN ( val )		4168187	0					
ANR	4168900	Callee	TO_STRING_NOWARN		4168187	0					
ANR	4168901	Identifier	TO_STRING_NOWARN		4168187	0					
ANR	4168902	ArgumentList	val		4168187	1					
ANR	4168903	Argument	val		4168187	0					
ANR	4168904	Identifier	val		4168187	0					
ANR	4168905	Label	default :	350:2:11501:11508	4168187	92	True				
ANR	4168906	Identifier	default		4168187	0					
ANR	4168907	ExpressionStatement	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"	351:3:11513:11577	4168187	93	True				
ANR	4168908	AssignmentExpression	"opline -> op2 . constant = zend_optimizer_add_literal ( op_array , val )"		4168187	0		=			
ANR	4168909	MemberAccess	opline -> op2 . constant		4168187	0					
ANR	4168910	PtrMemberAccess	opline -> op2		4168187	0					
ANR	4168911	Identifier	opline		4168187	0					
ANR	4168912	Identifier	op2		4168187	1					
ANR	4168913	Identifier	constant		4168187	1					
ANR	4168914	CallExpression	"zend_optimizer_add_literal ( op_array , val )"		4168187	1					
ANR	4168915	Callee	zend_optimizer_add_literal		4168187	0					
ANR	4168916	Identifier	zend_optimizer_add_literal		4168187	0					
ANR	4168917	ArgumentList	op_array		4168187	1					
ANR	4168918	Argument	op_array		4168187	0					
ANR	4168919	Identifier	op_array		4168187	0					
ANR	4168920	Argument	val		4168187	1					
ANR	4168921	Identifier	val		4168187	0					
ANR	4168922	BreakStatement	break ;	352:3:11582:11587	4168187	94	True				
ANR	4168923	ExpressionStatement	ZEND_OP2_TYPE ( opline ) = IS_CONST	355:1:11594:11626	4168187	1	True				
ANR	4168924	AssignmentExpression	ZEND_OP2_TYPE ( opline ) = IS_CONST		4168187	0		=			
ANR	4168925	CallExpression	ZEND_OP2_TYPE ( opline )		4168187	0					
ANR	4168926	Callee	ZEND_OP2_TYPE		4168187	0					
ANR	4168927	Identifier	ZEND_OP2_TYPE		4168187	0					
ANR	4168928	ArgumentList	opline		4168187	1					
ANR	4168929	Argument	opline		4168187	0					
ANR	4168930	Identifier	opline		4168187	0					
ANR	4168931	Identifier	IS_CONST		4168187	1					
ANR	4168932	IfStatement	if ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING )		4168187	2					
ANR	4168933	Condition	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING	356:5:11633:11677	4168187	0	True				
ANR	4168934	EqualityExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING		4168187	0		==			
ANR	4168935	CallExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) )		4168187	0					
ANR	4168936	Callee	Z_TYPE		4168187	0					
ANR	4168937	Identifier	Z_TYPE		4168187	0					
ANR	4168938	ArgumentList	ZEND_OP2_LITERAL ( opline )		4168187	1					
ANR	4168939	Argument	ZEND_OP2_LITERAL ( opline )		4168187	0					
ANR	4168940	CallExpression	ZEND_OP2_LITERAL ( opline )		4168187	0					
ANR	4168941	Callee	ZEND_OP2_LITERAL		4168187	0					
ANR	4168942	Identifier	ZEND_OP2_LITERAL		4168187	0					
ANR	4168943	ArgumentList	opline		4168187	1					
ANR	4168944	Argument	opline		4168187	0					
ANR	4168945	Identifier	opline		4168187	0					
ANR	4168946	Identifier	IS_STRING		4168187	1					
ANR	4168947	CompoundStatement		147:52:4663:4663	4168187	1					
ANR	4168948	ExpressionStatement	zend_string_hash_val ( Z_STR ( ZEND_OP2_LITERAL ( opline ) ) )	357:2:11684:11737	4168187	0	True				
ANR	4168949	CallExpression	zend_string_hash_val ( Z_STR ( ZEND_OP2_LITERAL ( opline ) ) )		4168187	0					
ANR	4168950	Callee	zend_string_hash_val		4168187	0					
ANR	4168951	Identifier	zend_string_hash_val		4168187	0					
ANR	4168952	ArgumentList	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		4168187	1					
ANR	4168953	Argument	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		4168187	0					
ANR	4168954	CallExpression	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		4168187	0					
ANR	4168955	Callee	Z_STR		4168187	0					
ANR	4168956	Identifier	Z_STR		4168187	0					
ANR	4168957	ArgumentList	ZEND_OP2_LITERAL ( opline )		4168187	1					
ANR	4168958	Argument	ZEND_OP2_LITERAL ( opline )		4168187	0					
ANR	4168959	CallExpression	ZEND_OP2_LITERAL ( opline )		4168187	0					
ANR	4168960	Callee	ZEND_OP2_LITERAL		4168187	0					
ANR	4168961	Identifier	ZEND_OP2_LITERAL		4168187	0					
ANR	4168962	ArgumentList	opline		4168187	1					
ANR	4168963	Argument	opline		4168187	0					
ANR	4168964	Identifier	opline		4168187	0					
ANR	4168965	ReturnStatement	return 1 ;	359:1:11743:11751	4168187	3	True				
ANR	4168966	PrimaryExpression	1		4168187	0					
ANR	4168967	ReturnType	int		4168187	1					
ANR	4168968	Identifier	zend_optimizer_update_op2_const		4168187	2					
ANR	4168969	ParameterList	"zend_op_array * op_array , zend_op * opline , zval * val"		4168187	3					
ANR	4168970	Parameter	zend_op_array * op_array	207:36:6876:6898	4168187	0	True				
ANR	4168971	ParameterType	zend_op_array *		4168187	0					
ANR	4168972	Identifier	op_array		4168187	1					
ANR	4168973	Parameter	zend_op * opline	208:36:6937:6957	4168187	1	True				
ANR	4168974	ParameterType	zend_op *		4168187	0					
ANR	4168975	Identifier	opline		4168187	1					
ANR	4168976	Parameter	zval * val	209:36:6996:7013	4168187	2	True				
ANR	4168977	ParameterType	zval *		4168187	0					
ANR	4168978	Identifier	val		4168187	1					
ANR	4168979	CFGEntryNode	ENTRY		4168187		True				
ANR	4168980	CFGExitNode	EXIT		4168187		True				
ANR	4168981	Symbol	opline -> op2		4168187						
ANR	4168982	Symbol	ZEND_ASSIGN_SR		4168187						
ANR	4168983	Symbol	ZEND_ASSIGN_POW		4168187						
ANR	4168984	Symbol	Z_TYPE		4168187						
ANR	4168985	Symbol	Z_STR		4168187						
ANR	4168986	Symbol	ZEND_ASSIGN_ADD		4168187						
ANR	4168987	Symbol	ZEND_OP2_TYPE		4168187						
ANR	4168988	Symbol	zend_string_tolower		4168187						
ANR	4168989	Symbol	opline -> extended_value		4168187						
ANR	4168990	Symbol	opline		4168187						
ANR	4168991	Symbol	ZEND_ASSIGN_BW_AND		4168187						
ANR	4168992	Symbol	( opline - 1 ) -> extended_value		4168187						
ANR	4168993	Symbol	Z_STRLEN_P		4168187						
ANR	4168994	Symbol	ZEND_ASSIGN_BW_OR		4168187						
ANR	4168995	Symbol	IS_STRING		4168187						
ANR	4168996	Symbol	ZEND_ASSIGN_SL		4168187						
ANR	4168997	Symbol	zend_optimizer_add_literal		4168187						
ANR	4168998	Symbol	( opline - 1 ) -> opcode		4168187						
ANR	4168999	Symbol	val		4168187						
ANR	4169000	Symbol	zend_memrchr		4168187						
ANR	4169001	Symbol	ZEND_ASSIGN_CONCAT		4168187						
ANR	4169002	Symbol	IS_CONST		4168187						
ANR	4169003	Symbol	ZEND_ASSIGN_OBJ		4168187						
ANR	4169004	Symbol	ZEND_ASSIGN_BW_XOR		4168187						
ANR	4169005	Symbol	index		4168187						
ANR	4169006	Symbol	Z_TYPE_P		4168187						
ANR	4169007	Symbol	ZEND_ASSIGN_SUB		4168187						
ANR	4169008	Symbol	Z_STRVAL_P		4168187						
ANR	4169009	Symbol	ZEND_ASSIGN_MUL		4168187						
ANR	4169010	Symbol	ZEND_ASSIGN_MOD		4168187						
ANR	4169011	Symbol	* opline		4168187						
ANR	4169012	Symbol	ZEND_ASSIGN_DIM		4168187						
ANR	4169013	Symbol	opline -> opcode		4168187						
ANR	4169014	Symbol	opline -> op2 . constant		4168187						
ANR	4169015	Symbol	Z_STR_P		4168187						
ANR	4169016	Symbol	ZEND_OP2_LITERAL		4168187						
ANR	4169017	Symbol	ZEND_ASSIGN_DIV		4168187						
ANR	4169018	Symbol	ZEND_HANDLE_NUMERIC		4168187						
ANR	4169019	Symbol	op_array		4168187						
ANR	4169020	Symbol	ZEND_INIT_FCALL_BY_NAME		4168187						
ANR	4169021	Function	zend_optimizer_replace_by_const	362:0:11756:15385							
ANR	4169022	FunctionDef	"zend_optimizer_replace_by_const (zend_op_array * op_array , zend_op * opline , zend_uchar type , uint32_t var , zval * val)"		4169021	0					
ANR	4169023	CompoundStatement		367:0:12045:15385	4169021	0					
ANR	4169024	IdentifierDeclStatement	zend_op * end = op_array -> opcodes + op_array -> last ;	368:1:12048:12097	4169021	0	True				
ANR	4169025	IdentifierDecl	* end = op_array -> opcodes + op_array -> last		4169021	0					
ANR	4169026	IdentifierDeclType	zend_op *		4169021	0					
ANR	4169027	Identifier	end		4169021	1					
ANR	4169028	AssignmentExpression	* end = op_array -> opcodes + op_array -> last		4169021	2		=			
ANR	4169029	Identifier	end		4169021	0					
ANR	4169030	AdditiveExpression	op_array -> opcodes + op_array -> last		4169021	1		+			
ANR	4169031	PtrMemberAccess	op_array -> opcodes		4169021	0					
ANR	4169032	Identifier	op_array		4169021	0					
ANR	4169033	Identifier	opcodes		4169021	1					
ANR	4169034	PtrMemberAccess	op_array -> last		4169021	1					
ANR	4169035	Identifier	op_array		4169021	0					
ANR	4169036	Identifier	last		4169021	1					
ANR	4169037	WhileStatement	while ( opline < end )		4169021	1					
ANR	4169038	Condition	opline < end	370:8:12108:12119	4169021	0	True				
ANR	4169039	RelationalExpression	opline < end		4169021	0		<			
ANR	4169040	Identifier	opline		4169021	0					
ANR	4169041	Identifier	end		4169021	1					
ANR	4169042	CompoundStatement		4:22:76:76	4169021	1					
ANR	4169043	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == type && ZEND_OP1 ( opline ) . var == var )		4169021	0					
ANR	4169044	Condition	ZEND_OP1_TYPE ( opline ) == type && ZEND_OP1 ( opline ) . var == var	371:6:12130:12192	4169021	0	True				
ANR	4169045	AndExpression	ZEND_OP1_TYPE ( opline ) == type && ZEND_OP1 ( opline ) . var == var		4169021	0		&&			
ANR	4169046	EqualityExpression	ZEND_OP1_TYPE ( opline ) == type		4169021	0		==			
ANR	4169047	CallExpression	ZEND_OP1_TYPE ( opline )		4169021	0					
ANR	4169048	Callee	ZEND_OP1_TYPE		4169021	0					
ANR	4169049	Identifier	ZEND_OP1_TYPE		4169021	0					
ANR	4169050	ArgumentList	opline		4169021	1					
ANR	4169051	Argument	opline		4169021	0					
ANR	4169052	Identifier	opline		4169021	0					
ANR	4169053	Identifier	type		4169021	1					
ANR	4169054	EqualityExpression	ZEND_OP1 ( opline ) . var == var		4169021	1		==			
ANR	4169055	MemberAccess	ZEND_OP1 ( opline ) . var		4169021	0					
ANR	4169056	CallExpression	ZEND_OP1 ( opline )		4169021	0					
ANR	4169057	Callee	ZEND_OP1		4169021	0					
ANR	4169058	Identifier	ZEND_OP1		4169021	0					
ANR	4169059	ArgumentList	opline		4169021	1					
ANR	4169060	Argument	opline		4169021	0					
ANR	4169061	Identifier	opline		4169021	0					
ANR	4169062	Identifier	var		4169021	1					
ANR	4169063	Identifier	var		4169021	1					
ANR	4169064	CompoundStatement		6:32:149:149	4169021	1					
ANR	4169065	SwitchStatement	switch ( opline -> opcode )		4169021	0					
ANR	4169066	Condition	opline -> opcode	373:11:12208:12221	4169021	0	True				
ANR	4169067	PtrMemberAccess	opline -> opcode		4169021	0					
ANR	4169068	Identifier	opline		4169021	0					
ANR	4169069	Identifier	opcode		4169021	1					
ANR	4169070	CompoundStatement		7:27:178:178	4169021	1					
ANR	4169071	Label	case ZEND_FETCH_DIM_W :	374:4:12230:12251	4169021	0	True				
ANR	4169072	Identifier	ZEND_FETCH_DIM_W		4169021	0					
ANR	4169073	Label	case ZEND_FETCH_DIM_RW :	375:4:12257:12279	4169021	1	True				
ANR	4169074	Identifier	ZEND_FETCH_DIM_RW		4169021	0					
ANR	4169075	Label	case ZEND_FETCH_DIM_FUNC_ARG :	376:4:12285:12313	4169021	2	True				
ANR	4169076	Identifier	ZEND_FETCH_DIM_FUNC_ARG		4169021	0					
ANR	4169077	Label	case ZEND_FETCH_DIM_UNSET :	377:4:12319:12344	4169021	3	True				
ANR	4169078	Identifier	ZEND_FETCH_DIM_UNSET		4169021	0					
ANR	4169079	Label	case ZEND_ASSIGN_DIM :	378:4:12350:12370	4169021	4	True				
ANR	4169080	Identifier	ZEND_ASSIGN_DIM		4169021	0					
ANR	4169081	Label	case ZEND_SEPARATE :	379:4:12376:12394	4169021	5	True				
ANR	4169082	Identifier	ZEND_SEPARATE		4169021	0					
ANR	4169083	Label	case ZEND_RETURN_BY_REF :	380:4:12400:12423	4169021	6	True				
ANR	4169084	Identifier	ZEND_RETURN_BY_REF		4169021	0					
ANR	4169085	ExpressionStatement	zval_dtor ( val )	381:5:12430:12444	4169021	7	True				
ANR	4169086	CallExpression	zval_dtor ( val )		4169021	0					
ANR	4169087	Callee	zval_dtor		4169021	0					
ANR	4169088	Identifier	zval_dtor		4169021	0					
ANR	4169089	ArgumentList	val		4169021	1					
ANR	4169090	Argument	val		4169021	0					
ANR	4169091	Identifier	val		4169021	0					
ANR	4169092	ReturnStatement	return 0 ;	382:5:12451:12459	4169021	8	True				
ANR	4169093	PrimaryExpression	0		4169021	0					
ANR	4169094	Label	case ZEND_SEND_VAR :	383:4:12465:12483	4169021	9	True				
ANR	4169095	Identifier	ZEND_SEND_VAR		4169021	0					
ANR	4169096	ExpressionStatement	opline -> extended_value = 0	384:5:12490:12516	4169021	10	True				
ANR	4169097	AssignmentExpression	opline -> extended_value = 0		4169021	0		=			
ANR	4169098	PtrMemberAccess	opline -> extended_value		4169021	0					
ANR	4169099	Identifier	opline		4169021	0					
ANR	4169100	Identifier	extended_value		4169021	1					
ANR	4169101	PrimaryExpression	0		4169021	1					
ANR	4169102	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL	385:5:12523:12553	4169021	11	True				
ANR	4169103	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL		4169021	0		=			
ANR	4169104	PtrMemberAccess	opline -> opcode		4169021	0					
ANR	4169105	Identifier	opline		4169021	0					
ANR	4169106	Identifier	opcode		4169021	1					
ANR	4169107	Identifier	ZEND_SEND_VAL		4169021	1					
ANR	4169108	BreakStatement	break ;	386:5:12560:12565	4169021	12	True				
ANR	4169109	Label	case ZEND_SEND_VAR_EX :	387:4:12571:12592	4169021	13	True				
ANR	4169110	Identifier	ZEND_SEND_VAR_EX		4169021	0					
ANR	4169111	ExpressionStatement	opline -> extended_value = 0	388:5:12599:12625	4169021	14	True				
ANR	4169112	AssignmentExpression	opline -> extended_value = 0		4169021	0		=			
ANR	4169113	PtrMemberAccess	opline -> extended_value		4169021	0					
ANR	4169114	Identifier	opline		4169021	0					
ANR	4169115	Identifier	extended_value		4169021	1					
ANR	4169116	PrimaryExpression	0		4169021	1					
ANR	4169117	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL_EX	389:5:12632:12665	4169021	15	True				
ANR	4169118	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL_EX		4169021	0		=			
ANR	4169119	PtrMemberAccess	opline -> opcode		4169021	0					
ANR	4169120	Identifier	opline		4169021	0					
ANR	4169121	Identifier	opcode		4169021	1					
ANR	4169122	Identifier	ZEND_SEND_VAL_EX		4169021	1					
ANR	4169123	BreakStatement	break ;	390:5:12672:12677	4169021	16	True				
ANR	4169124	Label	case ZEND_SEND_VAR_NO_REF :	391:4:12683:12708	4169021	17	True				
ANR	4169125	Identifier	ZEND_SEND_VAR_NO_REF		4169021	0					
ANR	4169126	IfStatement	if ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND )		4169021	18					
ANR	4169127	Condition	opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND	392:9:12719:12770	4169021	0	True				
ANR	4169128	BitAndExpression	opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND		4169021	0		&			
ANR	4169129	PtrMemberAccess	opline -> extended_value		4169021	0					
ANR	4169130	Identifier	opline		4169021	0					
ANR	4169131	Identifier	extended_value		4169021	1					
ANR	4169132	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		4169021	1					
ANR	4169133	CompoundStatement		26:63:727:727	4169021	1					
ANR	4169134	IfStatement	if ( opline -> extended_value & ZEND_ARG_SEND_BY_REF )		4169021	0					
ANR	4169135	Condition	opline -> extended_value & ZEND_ARG_SEND_BY_REF	393:10:12785:12829	4169021	0	True				
ANR	4169136	BitAndExpression	opline -> extended_value & ZEND_ARG_SEND_BY_REF		4169021	0		&			
ANR	4169137	PtrMemberAccess	opline -> extended_value		4169021	0					
ANR	4169138	Identifier	opline		4169021	0					
ANR	4169139	Identifier	extended_value		4169021	1					
ANR	4169140	Identifier	ZEND_ARG_SEND_BY_REF		4169021	1					
ANR	4169141	CompoundStatement		27:57:786:786	4169021	1					
ANR	4169142	ExpressionStatement	zval_dtor ( val )	394:7:12841:12855	4169021	0	True				
ANR	4169143	CallExpression	zval_dtor ( val )		4169021	0					
ANR	4169144	Callee	zval_dtor		4169021	0					
ANR	4169145	Identifier	zval_dtor		4169021	0					
ANR	4169146	ArgumentList	val		4169021	1					
ANR	4169147	Argument	val		4169021	0					
ANR	4169148	Identifier	val		4169021	0					
ANR	4169149	ReturnStatement	return 0 ;	395:7:12864:12872	4169021	1	True				
ANR	4169150	PrimaryExpression	0		4169021	0					
ANR	4169151	ExpressionStatement	opline -> extended_value = 0	397:6:12888:12914	4169021	1	True				
ANR	4169152	AssignmentExpression	opline -> extended_value = 0		4169021	0		=			
ANR	4169153	PtrMemberAccess	opline -> extended_value		4169021	0					
ANR	4169154	Identifier	opline		4169021	0					
ANR	4169155	Identifier	extended_value		4169021	1					
ANR	4169156	PrimaryExpression	0		4169021	1					
ANR	4169157	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL_EX	398:6:12922:12955	4169021	2	True				
ANR	4169158	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL_EX		4169021	0		=			
ANR	4169159	PtrMemberAccess	opline -> opcode		4169021	0					
ANR	4169160	Identifier	opline		4169021	0					
ANR	4169161	Identifier	opcode		4169021	1					
ANR	4169162	Identifier	ZEND_SEND_VAL_EX		4169021	1					
ANR	4169163	ElseStatement	else		4169021	0					
ANR	4169164	CompoundStatement		33:12:923:923	4169021	0					
ANR	4169165	ExpressionStatement	opline -> extended_value = 0	400:6:12977:13003	4169021	0	True				
ANR	4169166	AssignmentExpression	opline -> extended_value = 0		4169021	0		=			
ANR	4169167	PtrMemberAccess	opline -> extended_value		4169021	0					
ANR	4169168	Identifier	opline		4169021	0					
ANR	4169169	Identifier	extended_value		4169021	1					
ANR	4169170	PrimaryExpression	0		4169021	1					
ANR	4169171	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL	401:6:13011:13041	4169021	1	True				
ANR	4169172	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL		4169021	0		=			
ANR	4169173	PtrMemberAccess	opline -> opcode		4169021	0					
ANR	4169174	Identifier	opline		4169021	0					
ANR	4169175	Identifier	opcode		4169021	1					
ANR	4169176	Identifier	ZEND_SEND_VAL		4169021	1					
ANR	4169177	BreakStatement	break ;	403:5:13055:13060	4169021	19	True				
ANR	4169178	Label	case ZEND_SEND_USER :	404:4:13066:13085	4169021	20	True				
ANR	4169179	Identifier	ZEND_SEND_USER		4169021	0					
ANR	4169180	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL_EX	405:5:13092:13125	4169021	21	True				
ANR	4169181	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL_EX		4169021	0		=			
ANR	4169182	PtrMemberAccess	opline -> opcode		4169021	0					
ANR	4169183	Identifier	opline		4169021	0					
ANR	4169184	Identifier	opcode		4169021	1					
ANR	4169185	Identifier	ZEND_SEND_VAL_EX		4169021	1					
ANR	4169186	BreakStatement	break ;	406:5:13132:13137	4169021	22	True				
ANR	4169187	Label	case ZEND_FREE :	413:4:13478:13492	4169021	23	True				
ANR	4169188	Identifier	ZEND_FREE		4169021	0					
ANR	4169189	Label	case ZEND_CASE :	414:4:13498:13512	4169021	24	True				
ANR	4169190	Identifier	ZEND_CASE		4169021	0					
ANR	4169191	CompoundStatement		51:5:1536:1559	4169021	25					
ANR	4169192	IdentifierDeclStatement	"zend_op * m , * n ;"	415:5:13521:13535	4169021	0	True				
ANR	4169193	IdentifierDecl	* m		4169021	0					
ANR	4169194	IdentifierDeclType	zend_op *		4169021	0					
ANR	4169195	Identifier	m		4169021	1					
ANR	4169196	IdentifierDecl	* n		4169021	1					
ANR	4169197	IdentifierDeclType	zend_op *		4169021	0					
ANR	4169198	Identifier	n		4169021	1					
ANR	4169199	IdentifierDeclStatement	int brk = op_array -> last_brk_cont ;	416:5:13542:13575	4169021	1	True				
ANR	4169200	IdentifierDecl	brk = op_array -> last_brk_cont		4169021	0					
ANR	4169201	IdentifierDeclType	int		4169021	0					
ANR	4169202	Identifier	brk		4169021	1					
ANR	4169203	AssignmentExpression	brk = op_array -> last_brk_cont		4169021	2		=			
ANR	4169204	Identifier	brk		4169021	0					
ANR	4169205	PtrMemberAccess	op_array -> last_brk_cont		4169021	1					
ANR	4169206	Identifier	op_array		4169021	0					
ANR	4169207	Identifier	last_brk_cont		4169021	1					
ANR	4169208	IdentifierDeclStatement	zend_bool in_switch = 0 ;	417:5:13582:13605	4169021	2	True				
ANR	4169209	IdentifierDecl	in_switch = 0		4169021	0					
ANR	4169210	IdentifierDeclType	zend_bool		4169021	0					
ANR	4169211	Identifier	in_switch		4169021	1					
ANR	4169212	AssignmentExpression	in_switch = 0		4169021	2		=			
ANR	4169213	Identifier	in_switch		4169021	0					
ANR	4169214	PrimaryExpression	0		4169021	1					
ANR	4169215	WhileStatement	while ( brk -- )		4169021	3					
ANR	4169216	Condition	brk --	418:12:13619:13623	4169021	0	True				
ANR	4169217	PostIncDecOperationExpression	brk --		4169021	0					
ANR	4169218	Identifier	brk		4169021	0					
ANR	4169219	IncDec	--		4169021	1					
ANR	4169220	CompoundStatement		52:19:1580:1580	4169021	1					
ANR	4169221	IfStatement	if ( op_array -> brk_cont_array [ brk ] . start <= ( opline - op_array -> opcodes ) && op_array -> brk_cont_array [ brk ] . brk > ( opline - op_array -> opcodes ) )		4169021	0					
ANR	4169222	Condition	op_array -> brk_cont_array [ brk ] . start <= ( opline - op_array -> opcodes ) && op_array -> brk_cont_array [ brk ] . brk > ( opline - op_array -> opcodes )	419:10:13638:13780	4169021	0	True				
ANR	4169223	AndExpression	op_array -> brk_cont_array [ brk ] . start <= ( opline - op_array -> opcodes ) && op_array -> brk_cont_array [ brk ] . brk > ( opline - op_array -> opcodes )		4169021	0		&&			
ANR	4169224	RelationalExpression	op_array -> brk_cont_array [ brk ] . start <= ( opline - op_array -> opcodes )		4169021	0		<=			
ANR	4169225	MemberAccess	op_array -> brk_cont_array [ brk ] . start		4169021	0					
ANR	4169226	ArrayIndexing	op_array -> brk_cont_array [ brk ]		4169021	0					
ANR	4169227	PtrMemberAccess	op_array -> brk_cont_array		4169021	0					
ANR	4169228	Identifier	op_array		4169021	0					
ANR	4169229	Identifier	brk_cont_array		4169021	1					
ANR	4169230	Identifier	brk		4169021	1					
ANR	4169231	Identifier	start		4169021	1					
ANR	4169232	AdditiveExpression	opline - op_array -> opcodes		4169021	1		-			
ANR	4169233	Identifier	opline		4169021	0					
ANR	4169234	PtrMemberAccess	op_array -> opcodes		4169021	1					
ANR	4169235	Identifier	op_array		4169021	0					
ANR	4169236	Identifier	opcodes		4169021	1					
ANR	4169237	RelationalExpression	op_array -> brk_cont_array [ brk ] . brk > ( opline - op_array -> opcodes )		4169021	1		>			
ANR	4169238	MemberAccess	op_array -> brk_cont_array [ brk ] . brk		4169021	0					
ANR	4169239	ArrayIndexing	op_array -> brk_cont_array [ brk ]		4169021	0					
ANR	4169240	PtrMemberAccess	op_array -> brk_cont_array		4169021	0					
ANR	4169241	Identifier	op_array		4169021	0					
ANR	4169242	Identifier	brk_cont_array		4169021	1					
ANR	4169243	Identifier	brk		4169021	1					
ANR	4169244	Identifier	brk		4169021	1					
ANR	4169245	AdditiveExpression	opline - op_array -> opcodes		4169021	1		-			
ANR	4169246	Identifier	opline		4169021	0					
ANR	4169247	PtrMemberAccess	op_array -> opcodes		4169021	1					
ANR	4169248	Identifier	op_array		4169021	0					
ANR	4169249	Identifier	opcodes		4169021	1					
ANR	4169250	CompoundStatement		54:74:1737:1737	4169021	1					
ANR	4169251	ExpressionStatement	in_switch = 1	421:7:13792:13805	4169021	0	True				
ANR	4169252	AssignmentExpression	in_switch = 1		4169021	0		=			
ANR	4169253	Identifier	in_switch		4169021	0					
ANR	4169254	PrimaryExpression	1		4169021	1					
ANR	4169255	BreakStatement	break ;	422:7:13814:13819	4169021	1	True				
ANR	4169256	IfStatement	if ( ! in_switch )		4169021	4					
ANR	4169257	Condition	! in_switch	426:9:13846:13855	4169021	0	True				
ANR	4169258	UnaryOperationExpression	! in_switch		4169021	0					
ANR	4169259	UnaryOperator	!		4169021	0					
ANR	4169260	Identifier	in_switch		4169021	1					
ANR	4169261	CompoundStatement		60:21:1812:1812	4169021	1					
ANR	4169262	ExpressionStatement	ZEND_ASSERT ( opline -> opcode == ZEND_FREE )	427:6:13866:13906	4169021	0	True				
ANR	4169263	CallExpression	ZEND_ASSERT ( opline -> opcode == ZEND_FREE )		4169021	0					
ANR	4169264	Callee	ZEND_ASSERT		4169021	0					
ANR	4169265	Identifier	ZEND_ASSERT		4169021	0					
ANR	4169266	ArgumentList	opline -> opcode == ZEND_FREE		4169021	1					
ANR	4169267	Argument	opline -> opcode == ZEND_FREE		4169021	0					
ANR	4169268	EqualityExpression	opline -> opcode == ZEND_FREE		4169021	0		==			
ANR	4169269	PtrMemberAccess	opline -> opcode		4169021	0					
ANR	4169270	Identifier	opline		4169021	0					
ANR	4169271	Identifier	opcode		4169021	1					
ANR	4169272	Identifier	ZEND_FREE		4169021	1					
ANR	4169273	ExpressionStatement	MAKE_NOP ( opline )	428:6:13914:13930	4169021	1	True				
ANR	4169274	CallExpression	MAKE_NOP ( opline )		4169021	0					
ANR	4169275	Callee	MAKE_NOP		4169021	0					
ANR	4169276	Identifier	MAKE_NOP		4169021	0					
ANR	4169277	ArgumentList	opline		4169021	1					
ANR	4169278	Argument	opline		4169021	0					
ANR	4169279	Identifier	opline		4169021	0					
ANR	4169280	ExpressionStatement	zval_dtor ( val )	429:6:13938:13952	4169021	2	True				
ANR	4169281	CallExpression	zval_dtor ( val )		4169021	0					
ANR	4169282	Callee	zval_dtor		4169021	0					
ANR	4169283	Identifier	zval_dtor		4169021	0					
ANR	4169284	ArgumentList	val		4169021	1					
ANR	4169285	Argument	val		4169021	0					
ANR	4169286	Identifier	val		4169021	0					
ANR	4169287	ReturnStatement	return 1 ;	430:6:13960:13968	4169021	3	True				
ANR	4169288	PrimaryExpression	1		4169021	0					
ANR	4169289	ExpressionStatement	m = opline	433:5:13983:13993	4169021	5	True				
ANR	4169290	AssignmentExpression	m = opline		4169021	0		=			
ANR	4169291	Identifier	m		4169021	0					
ANR	4169292	Identifier	opline		4169021	1					
ANR	4169293	ExpressionStatement	n = op_array -> opcodes + op_array -> brk_cont_array [ brk ] . brk + 1	434:5:14000:14061	4169021	6	True				
ANR	4169294	AssignmentExpression	n = op_array -> opcodes + op_array -> brk_cont_array [ brk ] . brk + 1		4169021	0		=			
ANR	4169295	Identifier	n		4169021	0					
ANR	4169296	AdditiveExpression	op_array -> opcodes + op_array -> brk_cont_array [ brk ] . brk + 1		4169021	1		+			
ANR	4169297	PtrMemberAccess	op_array -> opcodes		4169021	0					
ANR	4169298	Identifier	op_array		4169021	0					
ANR	4169299	Identifier	opcodes		4169021	1					
ANR	4169300	AdditiveExpression	op_array -> brk_cont_array [ brk ] . brk + 1		4169021	1		+			
ANR	4169301	MemberAccess	op_array -> brk_cont_array [ brk ] . brk		4169021	0					
ANR	4169302	ArrayIndexing	op_array -> brk_cont_array [ brk ]		4169021	0					
ANR	4169303	PtrMemberAccess	op_array -> brk_cont_array		4169021	0					
ANR	4169304	Identifier	op_array		4169021	0					
ANR	4169305	Identifier	brk_cont_array		4169021	1					
ANR	4169306	Identifier	brk		4169021	1					
ANR	4169307	Identifier	brk		4169021	1					
ANR	4169308	PrimaryExpression	1		4169021	1					
ANR	4169309	WhileStatement	while ( m < n )		4169021	7					
ANR	4169310	Condition	m < n	435:12:14075:14079	4169021	0	True				
ANR	4169311	RelationalExpression	m < n		4169021	0		<			
ANR	4169312	Identifier	m		4169021	0					
ANR	4169313	Identifier	n		4169021	1					
ANR	4169314	CompoundStatement		69:19:2036:2036	4169021	1					
ANR	4169315	IfStatement	if ( ZEND_OP1_TYPE ( m ) == type && ZEND_OP1 ( m ) . var == var )		4169021	0					
ANR	4169316	Condition	ZEND_OP1_TYPE ( m ) == type && ZEND_OP1 ( m ) . var == var	436:10:14094:14151	4169021	0	True				
ANR	4169317	AndExpression	ZEND_OP1_TYPE ( m ) == type && ZEND_OP1 ( m ) . var == var		4169021	0		&&			
ANR	4169318	EqualityExpression	ZEND_OP1_TYPE ( m ) == type		4169021	0		==			
ANR	4169319	CallExpression	ZEND_OP1_TYPE ( m )		4169021	0					
ANR	4169320	Callee	ZEND_OP1_TYPE		4169021	0					
ANR	4169321	Identifier	ZEND_OP1_TYPE		4169021	0					
ANR	4169322	ArgumentList	m		4169021	1					
ANR	4169323	Argument	m		4169021	0					
ANR	4169324	Identifier	m		4169021	0					
ANR	4169325	Identifier	type		4169021	1					
ANR	4169326	EqualityExpression	ZEND_OP1 ( m ) . var == var		4169021	1		==			
ANR	4169327	MemberAccess	ZEND_OP1 ( m ) . var		4169021	0					
ANR	4169328	CallExpression	ZEND_OP1 ( m )		4169021	0					
ANR	4169329	Callee	ZEND_OP1		4169021	0					
ANR	4169330	Identifier	ZEND_OP1		4169021	0					
ANR	4169331	ArgumentList	m		4169021	1					
ANR	4169332	Argument	m		4169021	0					
ANR	4169333	Identifier	m		4169021	0					
ANR	4169334	Identifier	var		4169021	1					
ANR	4169335	Identifier	var		4169021	1					
ANR	4169336	CompoundStatement		71:32:2108:2108	4169021	1					
ANR	4169337	IfStatement	if ( m -> opcode == ZEND_CASE )		4169021	0					
ANR	4169338	Condition	m -> opcode == ZEND_CASE	438:11:14167:14188	4169021	0	True				
ANR	4169339	EqualityExpression	m -> opcode == ZEND_CASE		4169021	0		==			
ANR	4169340	PtrMemberAccess	m -> opcode		4169021	0					
ANR	4169341	Identifier	m		4169021	0					
ANR	4169342	Identifier	opcode		4169021	1					
ANR	4169343	Identifier	ZEND_CASE		4169021	1					
ANR	4169344	CompoundStatement		73:8:2155:2167	4169021	1					
ANR	4169345	IdentifierDeclStatement	zval old_val ;	439:8:14201:14213	4169021	0	True				
ANR	4169346	IdentifierDecl	old_val		4169021	0					
ANR	4169347	IdentifierDeclType	zval		4169021	0					
ANR	4169348	Identifier	old_val		4169021	1					
ANR	4169349	ExpressionStatement	"ZVAL_COPY_VALUE ( & old_val , val )"	440:8:14223:14253	4169021	1	True				
ANR	4169350	CallExpression	"ZVAL_COPY_VALUE ( & old_val , val )"		4169021	0					
ANR	4169351	Callee	ZVAL_COPY_VALUE		4169021	0					
ANR	4169352	Identifier	ZVAL_COPY_VALUE		4169021	0					
ANR	4169353	ArgumentList	& old_val		4169021	1					
ANR	4169354	Argument	& old_val		4169021	0					
ANR	4169355	UnaryOperationExpression	& old_val		4169021	0					
ANR	4169356	UnaryOperator	&		4169021	0					
ANR	4169357	Identifier	old_val		4169021	1					
ANR	4169358	Argument	val		4169021	1					
ANR	4169359	Identifier	val		4169021	0					
ANR	4169360	ExpressionStatement	zval_copy_ctor ( val )	441:8:14263:14282	4169021	2	True				
ANR	4169361	CallExpression	zval_copy_ctor ( val )		4169021	0					
ANR	4169362	Callee	zval_copy_ctor		4169021	0					
ANR	4169363	Identifier	zval_copy_ctor		4169021	0					
ANR	4169364	ArgumentList	val		4169021	1					
ANR	4169365	Argument	val		4169021	0					
ANR	4169366	Identifier	val		4169021	0					
ANR	4169367	ExpressionStatement	"zend_optimizer_update_op1_const ( op_array , m , val )"	442:8:14292:14341	4169021	3	True				
ANR	4169368	CallExpression	"zend_optimizer_update_op1_const ( op_array , m , val )"		4169021	0					
ANR	4169369	Callee	zend_optimizer_update_op1_const		4169021	0					
ANR	4169370	Identifier	zend_optimizer_update_op1_const		4169021	0					
ANR	4169371	ArgumentList	op_array		4169021	1					
ANR	4169372	Argument	op_array		4169021	0					
ANR	4169373	Identifier	op_array		4169021	0					
ANR	4169374	Argument	m		4169021	1					
ANR	4169375	Identifier	m		4169021	0					
ANR	4169376	Argument	val		4169021	2					
ANR	4169377	Identifier	val		4169021	0					
ANR	4169378	ExpressionStatement	"ZVAL_COPY_VALUE ( val , & old_val )"	443:8:14351:14381	4169021	4	True				
ANR	4169379	CallExpression	"ZVAL_COPY_VALUE ( val , & old_val )"		4169021	0					
ANR	4169380	Callee	ZVAL_COPY_VALUE		4169021	0					
ANR	4169381	Identifier	ZVAL_COPY_VALUE		4169021	0					
ANR	4169382	ArgumentList	val		4169021	1					
ANR	4169383	Argument	val		4169021	0					
ANR	4169384	Identifier	val		4169021	0					
ANR	4169385	Argument	& old_val		4169021	1					
ANR	4169386	UnaryOperationExpression	& old_val		4169021	0					
ANR	4169387	UnaryOperator	&		4169021	0					
ANR	4169388	Identifier	old_val		4169021	1					
ANR	4169389	ElseStatement	else		4169021	0					
ANR	4169390	IfStatement	if ( m -> opcode == ZEND_FREE )		4169021	0					
ANR	4169391	Condition	m -> opcode == ZEND_FREE	444:18:14401:14422	4169021	0	True				
ANR	4169392	EqualityExpression	m -> opcode == ZEND_FREE		4169021	0		==			
ANR	4169393	PtrMemberAccess	m -> opcode		4169021	0					
ANR	4169394	Identifier	m		4169021	0					
ANR	4169395	Identifier	opcode		4169021	1					
ANR	4169396	Identifier	ZEND_FREE		4169021	1					
ANR	4169397	CompoundStatement		78:42:2379:2379	4169021	1					
ANR	4169398	ExpressionStatement	MAKE_NOP ( m )	445:8:14435:14446	4169021	0	True				
ANR	4169399	CallExpression	MAKE_NOP ( m )		4169021	0					
ANR	4169400	Callee	MAKE_NOP		4169021	0					
ANR	4169401	Identifier	MAKE_NOP		4169021	0					
ANR	4169402	ArgumentList	m		4169021	1					
ANR	4169403	Argument	m		4169021	0					
ANR	4169404	Identifier	m		4169021	0					
ANR	4169405	ElseStatement	else		4169021	0					
ANR	4169406	CompoundStatement		80:14:2416:2416	4169021	0					
ANR	4169407	ExpressionStatement	ZEND_ASSERT ( 0 )	447:8:14472:14486	4169021	0	True				
ANR	4169408	CallExpression	ZEND_ASSERT ( 0 )		4169021	0					
ANR	4169409	Callee	ZEND_ASSERT		4169021	0					
ANR	4169410	Identifier	ZEND_ASSERT		4169021	0					
ANR	4169411	ArgumentList	0		4169021	1					
ANR	4169412	Argument	0		4169021	0					
ANR	4169413	PrimaryExpression	0		4169021	0					
ANR	4169414	ExpressionStatement	m ++	450:6:14511:14514	4169021	1	True				
ANR	4169415	PostIncDecOperationExpression	m ++		4169021	0					
ANR	4169416	Identifier	m		4169021	0					
ANR	4169417	IncDec	++		4169021	1					
ANR	4169418	ExpressionStatement	zval_dtor ( val )	452:5:14528:14542	4169021	8	True				
ANR	4169419	CallExpression	zval_dtor ( val )		4169021	0					
ANR	4169420	Callee	zval_dtor		4169021	0					
ANR	4169421	Identifier	zval_dtor		4169021	0					
ANR	4169422	ArgumentList	val		4169021	1					
ANR	4169423	Argument	val		4169021	0					
ANR	4169424	Identifier	val		4169021	0					
ANR	4169425	ReturnStatement	return 1 ;	453:5:14549:14557	4169021	9	True				
ANR	4169426	PrimaryExpression	1		4169021	0					
ANR	4169427	Label	case ZEND_VERIFY_RETURN_TYPE :	455:4:14569:14597	4169021	26	True				
ANR	4169428	Identifier	ZEND_VERIFY_RETURN_TYPE		4169021	0					
ANR	4169429	CompoundStatement		90:5:2560:2608	4169021	27					
ANR	4169430	IdentifierDeclStatement	zend_arg_info * ret_info = op_array -> arg_info - 1 ;	456:5:14606:14654	4169021	0	True				
ANR	4169431	IdentifierDecl	* ret_info = op_array -> arg_info - 1		4169021	0					
ANR	4169432	IdentifierDeclType	zend_arg_info *		4169021	0					
ANR	4169433	Identifier	ret_info		4169021	1					
ANR	4169434	AssignmentExpression	* ret_info = op_array -> arg_info - 1		4169021	2		=			
ANR	4169435	Identifier	ret_info		4169021	0					
ANR	4169436	AdditiveExpression	op_array -> arg_info - 1		4169021	1		-			
ANR	4169437	PtrMemberAccess	op_array -> arg_info		4169021	0					
ANR	4169438	Identifier	op_array		4169021	0					
ANR	4169439	Identifier	arg_info		4169021	1					
ANR	4169440	PrimaryExpression	1		4169021	1					
ANR	4169441	ExpressionStatement	ZEND_ASSERT ( ( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF )	457:5:14661:14755	4169021	1	True				
ANR	4169442	CallExpression	ZEND_ASSERT ( ( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF )		4169021	0					
ANR	4169443	Callee	ZEND_ASSERT		4169021	0					
ANR	4169444	Identifier	ZEND_ASSERT		4169021	0					
ANR	4169445	ArgumentList	( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF		4169021	1					
ANR	4169446	Argument	( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF		4169021	0					
ANR	4169447	OrExpression	( opline + 1 ) -> opcode == ZEND_RETURN || ( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF		4169021	0		||			
ANR	4169448	EqualityExpression	( opline + 1 ) -> opcode == ZEND_RETURN		4169021	0		==			
ANR	4169449	PtrMemberAccess	( opline + 1 ) -> opcode		4169021	0					
ANR	4169450	AdditiveExpression	opline + 1		4169021	0		+			
ANR	4169451	Identifier	opline		4169021	0					
ANR	4169452	PrimaryExpression	1		4169021	1					
ANR	4169453	Identifier	opcode		4169021	1					
ANR	4169454	Identifier	ZEND_RETURN		4169021	1					
ANR	4169455	EqualityExpression	( opline + 1 ) -> opcode == ZEND_RETURN_BY_REF		4169021	1		==			
ANR	4169456	PtrMemberAccess	( opline + 1 ) -> opcode		4169021	0					
ANR	4169457	AdditiveExpression	opline + 1		4169021	0		+			
ANR	4169458	Identifier	opline		4169021	0					
ANR	4169459	PrimaryExpression	1		4169021	1					
ANR	4169460	Identifier	opcode		4169021	1					
ANR	4169461	Identifier	ZEND_RETURN_BY_REF		4169021	1					
ANR	4169462	IfStatement	"if ( ret_info -> class_name || ret_info -> type_hint == IS_CALLABLE || ! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) )"		4169021	2					
ANR	4169463	Condition	"ret_info -> class_name || ret_info -> type_hint == IS_CALLABLE || ! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE )"	458:9:14766:14953	4169021	0	True				
ANR	4169464	OrExpression	"ret_info -> class_name || ret_info -> type_hint == IS_CALLABLE || ! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE )"		4169021	0		||			
ANR	4169465	PtrMemberAccess	ret_info -> class_name		4169021	0					
ANR	4169466	Identifier	ret_info		4169021	0					
ANR	4169467	Identifier	class_name		4169021	1					
ANR	4169468	OrExpression	"ret_info -> type_hint == IS_CALLABLE || ! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE )"		4169021	1		||			
ANR	4169469	EqualityExpression	ret_info -> type_hint == IS_CALLABLE		4169021	0		==			
ANR	4169470	PtrMemberAccess	ret_info -> type_hint		4169021	0					
ANR	4169471	Identifier	ret_info		4169021	0					
ANR	4169472	Identifier	type_hint		4169021	1					
ANR	4169473	Identifier	IS_CALLABLE		4169021	1					
ANR	4169474	OrExpression	"! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) ) || ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE )"		4169021	1		||			
ANR	4169475	UnaryOperationExpression	"! ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) )"		4169021	0					
ANR	4169476	UnaryOperator	!		4169021	0					
ANR	4169477	CallExpression	"ZEND_SAME_FAKE_TYPE ( ret_info -> type_hint , Z_TYPE_P ( val ) )"		4169021	1					
ANR	4169478	Callee	ZEND_SAME_FAKE_TYPE		4169021	0					
ANR	4169479	Identifier	ZEND_SAME_FAKE_TYPE		4169021	0					
ANR	4169480	ArgumentList	ret_info -> type_hint		4169021	1					
ANR	4169481	Argument	ret_info -> type_hint		4169021	0					
ANR	4169482	PtrMemberAccess	ret_info -> type_hint		4169021	0					
ANR	4169483	Identifier	ret_info		4169021	0					
ANR	4169484	Identifier	type_hint		4169021	1					
ANR	4169485	Argument	Z_TYPE_P ( val )		4169021	1					
ANR	4169486	CallExpression	Z_TYPE_P ( val )		4169021	0					
ANR	4169487	Callee	Z_TYPE_P		4169021	0					
ANR	4169488	Identifier	Z_TYPE_P		4169021	0					
ANR	4169489	ArgumentList	val		4169021	1					
ANR	4169490	Argument	val		4169021	0					
ANR	4169491	Identifier	val		4169021	0					
ANR	4169492	BitAndExpression	op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE		4169021	1		&			
ANR	4169493	PtrMemberAccess	op_array -> fn_flags		4169021	0					
ANR	4169494	Identifier	op_array		4169021	0					
ANR	4169495	Identifier	fn_flags		4169021	1					
ANR	4169496	Identifier	ZEND_ACC_RETURN_REFERENCE		4169021	1					
ANR	4169497	CompoundStatement		95:59:2910:2910	4169021	1					
ANR	4169498	ExpressionStatement	zval_dtor ( val )	462:6:14964:14978	4169021	0	True				
ANR	4169499	CallExpression	zval_dtor ( val )		4169021	0					
ANR	4169500	Callee	zval_dtor		4169021	0					
ANR	4169501	Identifier	zval_dtor		4169021	0					
ANR	4169502	ArgumentList	val		4169021	1					
ANR	4169503	Argument	val		4169021	0					
ANR	4169504	Identifier	val		4169021	0					
ANR	4169505	ReturnStatement	return 0 ;	463:6:14986:14994	4169021	1	True				
ANR	4169506	PrimaryExpression	0		4169021	0					
ANR	4169507	ExpressionStatement	MAKE_NOP ( opline )	465:5:15008:15024	4169021	3	True				
ANR	4169508	CallExpression	MAKE_NOP ( opline )		4169021	0					
ANR	4169509	Callee	MAKE_NOP		4169021	0					
ANR	4169510	Identifier	MAKE_NOP		4169021	0					
ANR	4169511	ArgumentList	opline		4169021	1					
ANR	4169512	Argument	opline		4169021	0					
ANR	4169513	Identifier	opline		4169021	0					
ANR	4169514	ExpressionStatement	"zend_optimizer_update_op1_const ( op_array , opline + 1 , val )"	466:5:15031:15089	4169021	4	True				
ANR	4169515	CallExpression	"zend_optimizer_update_op1_const ( op_array , opline + 1 , val )"		4169021	0					
ANR	4169516	Callee	zend_optimizer_update_op1_const		4169021	0					
ANR	4169517	Identifier	zend_optimizer_update_op1_const		4169021	0					
ANR	4169518	ArgumentList	op_array		4169021	1					
ANR	4169519	Argument	op_array		4169021	0					
ANR	4169520	Identifier	op_array		4169021	0					
ANR	4169521	Argument	opline + 1		4169021	1					
ANR	4169522	AdditiveExpression	opline + 1		4169021	0		+			
ANR	4169523	Identifier	opline		4169021	0					
ANR	4169524	PrimaryExpression	1		4169021	1					
ANR	4169525	Argument	val		4169021	2					
ANR	4169526	Identifier	val		4169021	0					
ANR	4169527	ReturnStatement	return 1 ;	467:5:15096:15104	4169021	5	True				
ANR	4169528	PrimaryExpression	1		4169021	0					
ANR	4169529	Label	default :	469:4:15118:15125	4169021	28	True				
ANR	4169530	Identifier	default		4169021	0					
ANR	4169531	BreakStatement	break ;	470:5:15132:15137	4169021	29	True				
ANR	4169532	ReturnStatement	"return zend_optimizer_update_op1_const ( op_array , opline , val ) ;"	472:3:15147:15208	4169021	1	True				
ANR	4169533	CallExpression	"zend_optimizer_update_op1_const ( op_array , opline , val )"		4169021	0					
ANR	4169534	Callee	zend_optimizer_update_op1_const		4169021	0					
ANR	4169535	Identifier	zend_optimizer_update_op1_const		4169021	0					
ANR	4169536	ArgumentList	op_array		4169021	1					
ANR	4169537	Argument	op_array		4169021	0					
ANR	4169538	Identifier	op_array		4169021	0					
ANR	4169539	Argument	opline		4169021	1					
ANR	4169540	Identifier	opline		4169021	0					
ANR	4169541	Argument	val		4169021	2					
ANR	4169542	Identifier	val		4169021	0					
ANR	4169543	IfStatement	if ( ZEND_OP2_TYPE ( opline ) == type && ZEND_OP2 ( opline ) . var == var )		4169021	1					
ANR	4169544	Condition	ZEND_OP2_TYPE ( opline ) == type && ZEND_OP2 ( opline ) . var == var	475:6:15221:15283	4169021	0	True				
ANR	4169545	AndExpression	ZEND_OP2_TYPE ( opline ) == type && ZEND_OP2 ( opline ) . var == var		4169021	0		&&			
ANR	4169546	EqualityExpression	ZEND_OP2_TYPE ( opline ) == type		4169021	0		==			
ANR	4169547	CallExpression	ZEND_OP2_TYPE ( opline )		4169021	0					
ANR	4169548	Callee	ZEND_OP2_TYPE		4169021	0					
ANR	4169549	Identifier	ZEND_OP2_TYPE		4169021	0					
ANR	4169550	ArgumentList	opline		4169021	1					
ANR	4169551	Argument	opline		4169021	0					
ANR	4169552	Identifier	opline		4169021	0					
ANR	4169553	Identifier	type		4169021	1					
ANR	4169554	EqualityExpression	ZEND_OP2 ( opline ) . var == var		4169021	1		==			
ANR	4169555	MemberAccess	ZEND_OP2 ( opline ) . var		4169021	0					
ANR	4169556	CallExpression	ZEND_OP2 ( opline )		4169021	0					
ANR	4169557	Callee	ZEND_OP2		4169021	0					
ANR	4169558	Identifier	ZEND_OP2		4169021	0					
ANR	4169559	ArgumentList	opline		4169021	1					
ANR	4169560	Argument	opline		4169021	0					
ANR	4169561	Identifier	opline		4169021	0					
ANR	4169562	Identifier	var		4169021	1					
ANR	4169563	Identifier	var		4169021	1					
ANR	4169564	CompoundStatement		110:32:3240:3240	4169021	1					
ANR	4169565	ReturnStatement	"return zend_optimizer_update_op2_const ( op_array , opline , val ) ;"	477:3:15291:15352	4169021	0	True				
ANR	4169566	CallExpression	"zend_optimizer_update_op2_const ( op_array , opline , val )"		4169021	0					
ANR	4169567	Callee	zend_optimizer_update_op2_const		4169021	0					
ANR	4169568	Identifier	zend_optimizer_update_op2_const		4169021	0					
ANR	4169569	ArgumentList	op_array		4169021	1					
ANR	4169570	Argument	op_array		4169021	0					
ANR	4169571	Identifier	op_array		4169021	0					
ANR	4169572	Argument	opline		4169021	1					
ANR	4169573	Identifier	opline		4169021	0					
ANR	4169574	Argument	val		4169021	2					
ANR	4169575	Identifier	val		4169021	0					
ANR	4169576	ExpressionStatement	opline ++	479:2:15360:15368	4169021	2	True				
ANR	4169577	PostIncDecOperationExpression	opline ++		4169021	0					
ANR	4169578	Identifier	opline		4169021	0					
ANR	4169579	IncDec	++		4169021	1					
ANR	4169580	ReturnStatement	return 1 ;	482:1:15375:15383	4169021	2	True				
ANR	4169581	PrimaryExpression	1		4169021	0					
ANR	4169582	ReturnType	int		4169021	1					
ANR	4169583	Identifier	zend_optimizer_replace_by_const		4169021	2					
ANR	4169584	ParameterList	"zend_op_array * op_array , zend_op * opline , zend_uchar type , uint32_t var , zval * val"		4169021	3					
ANR	4169585	Parameter	zend_op_array * op_array	362:36:11792:11814	4169021	0	True				
ANR	4169586	ParameterType	zend_op_array *		4169021	0					
ANR	4169587	Identifier	op_array		4169021	1					
ANR	4169588	Parameter	zend_op * opline	363:36:11853:11873	4169021	1	True				
ANR	4169589	ParameterType	zend_op *		4169021	0					
ANR	4169590	Identifier	opline		4169021	1					
ANR	4169591	Parameter	zend_uchar type	364:36:11912:11930	4169021	2	True				
ANR	4169592	ParameterType	zend_uchar		4169021	0					
ANR	4169593	Identifier	type		4169021	1					
ANR	4169594	Parameter	uint32_t var	365:36:11969:11986	4169021	3	True				
ANR	4169595	ParameterType	uint32_t		4169021	0					
ANR	4169596	Identifier	var		4169021	1					
ANR	4169597	Parameter	zval * val	366:36:12025:12042	4169021	4	True				
ANR	4169598	ParameterType	zval *		4169021	0					
ANR	4169599	Identifier	val		4169021	1					
ANR	4169600	CFGEntryNode	ENTRY		4169021		True				
ANR	4169601	CFGExitNode	EXIT		4169021		True				
ANR	4169602	Symbol	ZEND_FREE		4169021						
ANR	4169603	Symbol	m -> opcode		4169021						
ANR	4169604	Symbol	ret_info -> type_hint		4169021						
ANR	4169605	Symbol	type		4169021						
ANR	4169606	Symbol	ZEND_OP2_TYPE		4169021						
ANR	4169607	Symbol	opline -> extended_value		4169021						
ANR	4169608	Symbol	opline		4169021						
ANR	4169609	Symbol	op_array -> fn_flags		4169021						
ANR	4169610	Symbol	& old_val		4169021						
ANR	4169611	Symbol	ZEND_SEND_VAL_EX		4169021						
ANR	4169612	Symbol	brk		4169021						
ANR	4169613	Symbol	ZEND_OP1 ( m ) . var		4169021						
ANR	4169614	Symbol	val		4169021						
ANR	4169615	Symbol	zend_optimizer_update_op2_const		4169021						
ANR	4169616	Symbol	ZEND_RETURN		4169021						
ANR	4169617	Symbol	var		4169021						
ANR	4169618	Symbol	ZEND_OP2 ( opline ) . var		4169021						
ANR	4169619	Symbol	* op_array		4169021						
ANR	4169620	Symbol	op_array -> last		4169021						
ANR	4169621	Symbol	in_switch		4169021						
ANR	4169622	Symbol	ZEND_SEND_VAL		4169021						
ANR	4169623	Symbol	op_array -> brk_cont_array [ brk ] . brk		4169021						
ANR	4169624	Symbol	ZEND_SAME_FAKE_TYPE		4169021						
ANR	4169625	Symbol	op_array -> brk_cont_array [ brk ] . start		4169021						
ANR	4169626	Symbol	ret_info -> class_name		4169021						
ANR	4169627	Symbol	* * op_array		4169021						
ANR	4169628	Symbol	ZEND_ARG_SEND_BY_REF		4169021						
ANR	4169629	Symbol	old_val		4169021						
ANR	4169630	Symbol	ZEND_CASE		4169021						
ANR	4169631	Symbol	op_array -> brk_cont_array		4169021						
ANR	4169632	Symbol	op_array -> opcodes		4169021						
ANR	4169633	Symbol	ZEND_RETURN_BY_REF		4169021						
ANR	4169634	Symbol	* ret_info		4169021						
ANR	4169635	Symbol	( opline + 1 ) -> opcode		4169021						
ANR	4169636	Symbol	end		4169021						
ANR	4169637	Symbol	IS_CALLABLE		4169021						
ANR	4169638	Symbol	* op_array -> brk_cont_array		4169021						
ANR	4169639	Symbol	ZEND_OP1 ( opline ) . var		4169021						
ANR	4169640	Symbol	Z_TYPE_P		4169021						
ANR	4169641	Symbol	m		4169021						
ANR	4169642	Symbol	ZEND_OP1		4169021						
ANR	4169643	Symbol	n		4169021						
ANR	4169644	Symbol	op_array -> last_brk_cont		4169021						
ANR	4169645	Symbol	ZEND_OP2		4169021						
ANR	4169646	Symbol	ZEND_OP1_TYPE		4169021						
ANR	4169647	Symbol	* opline		4169021						
ANR	4169648	Symbol	ret_info		4169021						
ANR	4169649	Symbol	opline -> opcode		4169021						
ANR	4169650	Symbol	* m		4169021						
ANR	4169651	Symbol	ZEND_ACC_RETURN_REFERENCE		4169021						
ANR	4169652	Symbol	zend_optimizer_update_op1_const		4169021						
ANR	4169653	Symbol	* brk		4169021						
ANR	4169654	Symbol	ZEND_ARG_COMPILE_TIME_BOUND		4169021						
ANR	4169655	Symbol	op_array		4169021						
ANR	4169656	Symbol	op_array -> arg_info		4169021						
ANR	4169657	Function	zend_optimize	485:0:15388:17184							
ANR	4169658	FunctionDef	"zend_optimize (zend_op_array * op_array , zend_optimizer_ctx * ctx)"		4169657	0					
ANR	4169659	CompoundStatement		487:0:15495:17184	4169657	0					
ANR	4169660	IfStatement	if ( op_array -> type == ZEND_EVAL_CODE )		4169657	0					
ANR	4169661	Condition	op_array -> type == ZEND_EVAL_CODE	488:5:15502:15533	4169657	0	True				
ANR	4169662	EqualityExpression	op_array -> type == ZEND_EVAL_CODE		4169657	0		==			
ANR	4169663	PtrMemberAccess	op_array -> type		4169657	0					
ANR	4169664	Identifier	op_array		4169657	0					
ANR	4169665	Identifier	type		4169657	1					
ANR	4169666	Identifier	ZEND_EVAL_CODE		4169657	1					
ANR	4169667	CompoundStatement		2:39:40:40	4169657	1					
ANR	4169668	ReturnStatement	return ;	489:2:15540:15546	4169657	0	True				
ANR	4169669	IfStatement	if ( ZEND_OPTIMIZER_PASS_1 & OPTIMIZATION_LEVEL )		4169657	1					
ANR	4169670	Condition	ZEND_OPTIMIZER_PASS_1 & OPTIMIZATION_LEVEL	498:5:15809:15850	4169657	0	True				
ANR	4169671	BitAndExpression	ZEND_OPTIMIZER_PASS_1 & OPTIMIZATION_LEVEL		4169657	0		&			
ANR	4169672	Identifier	ZEND_OPTIMIZER_PASS_1		4169657	0					
ANR	4169673	Identifier	OPTIMIZATION_LEVEL		4169657	1					
ANR	4169674	CompoundStatement		12:49:357:357	4169657	1					
ANR	4169675	ExpressionStatement	"zend_optimizer_pass1 ( op_array , ctx )"	499:2:15857:15892	4169657	0	True				
ANR	4169676	CallExpression	"zend_optimizer_pass1 ( op_array , ctx )"		4169657	0					
ANR	4169677	Callee	zend_optimizer_pass1		4169657	0					
ANR	4169678	Identifier	zend_optimizer_pass1		4169657	0					
ANR	4169679	ArgumentList	op_array		4169657	1					
ANR	4169680	Argument	op_array		4169657	0					
ANR	4169681	Identifier	op_array		4169657	0					
ANR	4169682	Argument	ctx		4169657	1					
ANR	4169683	Identifier	ctx		4169657	0					
ANR	4169684	IfStatement	if ( ZEND_OPTIMIZER_PASS_2 & OPTIMIZATION_LEVEL )		4169657	2					
ANR	4169685	Condition	ZEND_OPTIMIZER_PASS_2 & OPTIMIZATION_LEVEL	508:5:16119:16160	4169657	0	True				
ANR	4169686	BitAndExpression	ZEND_OPTIMIZER_PASS_2 & OPTIMIZATION_LEVEL		4169657	0		&			
ANR	4169687	Identifier	ZEND_OPTIMIZER_PASS_2		4169657	0					
ANR	4169688	Identifier	OPTIMIZATION_LEVEL		4169657	1					
ANR	4169689	CompoundStatement		22:49:667:667	4169657	1					
ANR	4169690	ExpressionStatement	zend_optimizer_pass2 ( op_array )	509:2:16167:16197	4169657	0	True				
ANR	4169691	CallExpression	zend_optimizer_pass2 ( op_array )		4169657	0					
ANR	4169692	Callee	zend_optimizer_pass2		4169657	0					
ANR	4169693	Identifier	zend_optimizer_pass2		4169657	0					
ANR	4169694	ArgumentList	op_array		4169657	1					
ANR	4169695	Argument	op_array		4169657	0					
ANR	4169696	Identifier	op_array		4169657	0					
ANR	4169697	IfStatement	if ( ZEND_OPTIMIZER_PASS_3 & OPTIMIZATION_LEVEL )		4169657	3					
ANR	4169698	Condition	ZEND_OPTIMIZER_PASS_3 & OPTIMIZATION_LEVEL	517:5:16336:16377	4169657	0	True				
ANR	4169699	BitAndExpression	ZEND_OPTIMIZER_PASS_3 & OPTIMIZATION_LEVEL		4169657	0		&			
ANR	4169700	Identifier	ZEND_OPTIMIZER_PASS_3		4169657	0					
ANR	4169701	Identifier	OPTIMIZATION_LEVEL		4169657	1					
ANR	4169702	CompoundStatement		31:49:884:884	4169657	1					
ANR	4169703	ExpressionStatement	zend_optimizer_pass3 ( op_array )	518:2:16384:16414	4169657	0	True				
ANR	4169704	CallExpression	zend_optimizer_pass3 ( op_array )		4169657	0					
ANR	4169705	Callee	zend_optimizer_pass3		4169657	0					
ANR	4169706	Identifier	zend_optimizer_pass3		4169657	0					
ANR	4169707	ArgumentList	op_array		4169657	1					
ANR	4169708	Argument	op_array		4169657	0					
ANR	4169709	Identifier	op_array		4169657	0					
ANR	4169710	IfStatement	if ( ZEND_OPTIMIZER_PASS_4 & OPTIMIZATION_LEVEL )		4169657	4					
ANR	4169711	Condition	ZEND_OPTIMIZER_PASS_4 & OPTIMIZATION_LEVEL	524:5:16479:16520	4169657	0	True				
ANR	4169712	BitAndExpression	ZEND_OPTIMIZER_PASS_4 & OPTIMIZATION_LEVEL		4169657	0		&			
ANR	4169713	Identifier	ZEND_OPTIMIZER_PASS_4		4169657	0					
ANR	4169714	Identifier	OPTIMIZATION_LEVEL		4169657	1					
ANR	4169715	CompoundStatement		38:49:1027:1027	4169657	1					
ANR	4169716	ExpressionStatement	"optimize_func_calls ( op_array , ctx )"	525:2:16527:16561	4169657	0	True				
ANR	4169717	CallExpression	"optimize_func_calls ( op_array , ctx )"		4169657	0					
ANR	4169718	Callee	optimize_func_calls		4169657	0					
ANR	4169719	Identifier	optimize_func_calls		4169657	0					
ANR	4169720	ArgumentList	op_array		4169657	1					
ANR	4169721	Argument	op_array		4169657	0					
ANR	4169722	Identifier	op_array		4169657	0					
ANR	4169723	Argument	ctx		4169657	1					
ANR	4169724	Identifier	ctx		4169657	0					
ANR	4169725	IfStatement	if ( ZEND_OPTIMIZER_PASS_5 & OPTIMIZATION_LEVEL )		4169657	5					
ANR	4169726	Condition	ZEND_OPTIMIZER_PASS_5 & OPTIMIZATION_LEVEL	531:5:16612:16653	4169657	0	True				
ANR	4169727	BitAndExpression	ZEND_OPTIMIZER_PASS_5 & OPTIMIZATION_LEVEL		4169657	0		&			
ANR	4169728	Identifier	ZEND_OPTIMIZER_PASS_5		4169657	0					
ANR	4169729	Identifier	OPTIMIZATION_LEVEL		4169657	1					
ANR	4169730	CompoundStatement		45:49:1160:1160	4169657	1					
ANR	4169731	ExpressionStatement	"optimize_cfg ( op_array , ctx )"	532:2:16660:16687	4169657	0	True				
ANR	4169732	CallExpression	"optimize_cfg ( op_array , ctx )"		4169657	0					
ANR	4169733	Callee	optimize_cfg		4169657	0					
ANR	4169734	Identifier	optimize_cfg		4169657	0					
ANR	4169735	ArgumentList	op_array		4169657	1					
ANR	4169736	Argument	op_array		4169657	0					
ANR	4169737	Identifier	op_array		4169657	0					
ANR	4169738	Argument	ctx		4169657	1					
ANR	4169739	Identifier	ctx		4169657	0					
ANR	4169740	IfStatement	if ( ZEND_OPTIMIZER_PASS_9 & OPTIMIZATION_LEVEL )		4169657	6					
ANR	4169741	Condition	ZEND_OPTIMIZER_PASS_9 & OPTIMIZATION_LEVEL	538:5:16751:16792	4169657	0	True				
ANR	4169742	BitAndExpression	ZEND_OPTIMIZER_PASS_9 & OPTIMIZATION_LEVEL		4169657	0		&			
ANR	4169743	Identifier	ZEND_OPTIMIZER_PASS_9		4169657	0					
ANR	4169744	Identifier	OPTIMIZATION_LEVEL		4169657	1					
ANR	4169745	CompoundStatement		52:49:1299:1299	4169657	1					
ANR	4169746	ExpressionStatement	"optimize_temporary_variables ( op_array , ctx )"	539:2:16799:16842	4169657	0	True				
ANR	4169747	CallExpression	"optimize_temporary_variables ( op_array , ctx )"		4169657	0					
ANR	4169748	Callee	optimize_temporary_variables		4169657	0					
ANR	4169749	Identifier	optimize_temporary_variables		4169657	0					
ANR	4169750	ArgumentList	op_array		4169657	1					
ANR	4169751	Argument	op_array		4169657	0					
ANR	4169752	Identifier	op_array		4169657	0					
ANR	4169753	Argument	ctx		4169657	1					
ANR	4169754	Identifier	ctx		4169657	0					
ANR	4169755	IfStatement	if ( ( ( ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5 ) & OPTIMIZATION_LEVEL ) == ZEND_OPTIMIZER_PASS_10 )		4169657	7					
ANR	4169756	Condition	( ( ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5 ) & OPTIMIZATION_LEVEL ) == ZEND_OPTIMIZER_PASS_10	545:5:16889:16983	4169657	0	True				
ANR	4169757	EqualityExpression	( ( ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5 ) & OPTIMIZATION_LEVEL ) == ZEND_OPTIMIZER_PASS_10		4169657	0		==			
ANR	4169758	BitAndExpression	( ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5 ) & OPTIMIZATION_LEVEL		4169657	0		&			
ANR	4169759	InclusiveOrExpression	ZEND_OPTIMIZER_PASS_10 | ZEND_OPTIMIZER_PASS_5		4169657	0		|			
ANR	4169760	Identifier	ZEND_OPTIMIZER_PASS_10		4169657	0					
ANR	4169761	Identifier	ZEND_OPTIMIZER_PASS_5		4169657	1					
ANR	4169762	Identifier	OPTIMIZATION_LEVEL		4169657	1					
ANR	4169763	Identifier	ZEND_OPTIMIZER_PASS_10		4169657	1					
ANR	4169764	CompoundStatement		59:102:1490:1490	4169657	1					
ANR	4169765	ExpressionStatement	zend_optimizer_nop_removal ( op_array )	546:2:16990:17026	4169657	0	True				
ANR	4169766	CallExpression	zend_optimizer_nop_removal ( op_array )		4169657	0					
ANR	4169767	Callee	zend_optimizer_nop_removal		4169657	0					
ANR	4169768	Identifier	zend_optimizer_nop_removal		4169657	0					
ANR	4169769	ArgumentList	op_array		4169657	1					
ANR	4169770	Argument	op_array		4169657	0					
ANR	4169771	Identifier	op_array		4169657	0					
ANR	4169772	IfStatement	if ( ZEND_OPTIMIZER_PASS_11 & OPTIMIZATION_LEVEL )		4169657	8					
ANR	4169773	Condition	ZEND_OPTIMIZER_PASS_11 & OPTIMIZATION_LEVEL	552:5:17084:17126	4169657	0	True				
ANR	4169774	BitAndExpression	ZEND_OPTIMIZER_PASS_11 & OPTIMIZATION_LEVEL		4169657	0		&			
ANR	4169775	Identifier	ZEND_OPTIMIZER_PASS_11		4169657	0					
ANR	4169776	Identifier	OPTIMIZATION_LEVEL		4169657	1					
ANR	4169777	CompoundStatement		66:50:1633:1633	4169657	1					
ANR	4169778	ExpressionStatement	"zend_optimizer_compact_literals ( op_array , ctx )"	553:2:17133:17179	4169657	0	True				
ANR	4169779	CallExpression	"zend_optimizer_compact_literals ( op_array , ctx )"		4169657	0					
ANR	4169780	Callee	zend_optimizer_compact_literals		4169657	0					
ANR	4169781	Identifier	zend_optimizer_compact_literals		4169657	0					
ANR	4169782	ArgumentList	op_array		4169657	1					
ANR	4169783	Argument	op_array		4169657	0					
ANR	4169784	Identifier	op_array		4169657	0					
ANR	4169785	Argument	ctx		4169657	1					
ANR	4169786	Identifier	ctx		4169657	0					
ANR	4169787	ReturnType	static void		4169657	1					
ANR	4169788	Identifier	zend_optimize		4169657	2					
ANR	4169789	ParameterList	"zend_op_array * op_array , zend_optimizer_ctx * ctx"		4169657	3					
ANR	4169790	Parameter	zend_op_array * op_array	485:26:15414:15441	4169657	0	True				
ANR	4169791	ParameterType	zend_op_array *		4169657	0					
ANR	4169792	Identifier	op_array		4169657	1					
ANR	4169793	Parameter	zend_optimizer_ctx * ctx	486:26:15470:15492	4169657	1	True				
ANR	4169794	ParameterType	zend_optimizer_ctx *		4169657	0					
ANR	4169795	Identifier	ctx		4169657	1					
ANR	4169796	CFGEntryNode	ENTRY		4169657		True				
ANR	4169797	CFGExitNode	EXIT		4169657		True				
ANR	4169798	Symbol	ZEND_OPTIMIZER_PASS_10		4169657						
ANR	4169799	Symbol	ZEND_OPTIMIZER_PASS_1		4169657						
ANR	4169800	Symbol	ZEND_OPTIMIZER_PASS_11		4169657						
ANR	4169801	Symbol	ZEND_OPTIMIZER_PASS_2		4169657						
ANR	4169802	Symbol	ZEND_OPTIMIZER_PASS_3		4169657						
ANR	4169803	Symbol	ctx		4169657						
ANR	4169804	Symbol	ZEND_OPTIMIZER_PASS_4		4169657						
ANR	4169805	Symbol	ZEND_OPTIMIZER_PASS_5		4169657						
ANR	4169806	Symbol	* op_array		4169657						
ANR	4169807	Symbol	op_array -> type		4169657						
ANR	4169808	Symbol	ZEND_EVAL_CODE		4169657						
ANR	4169809	Symbol	OPTIMIZATION_LEVEL		4169657						
ANR	4169810	Symbol	ZEND_OPTIMIZER_PASS_9		4169657						
ANR	4169811	Symbol	op_array		4169657						
ANR	4169812	Function	zend_accel_optimize	557:0:17187:19881							
ANR	4169813	FunctionDef	"zend_accel_optimize (zend_op_array * op_array , zend_optimizer_ctx * ctx)"		4169812	0					
ANR	4169814	CompoundStatement		559:0:17306:19881	4169812	0					
ANR	4169815	IdentifierDeclStatement	"zend_op * opline , * end ;"	560:1:17309:17330	4169812	0	True				
ANR	4169816	IdentifierDecl	* opline		4169812	0					
ANR	4169817	IdentifierDeclType	zend_op *		4169812	0					
ANR	4169818	Identifier	opline		4169812	1					
ANR	4169819	IdentifierDecl	* end		4169812	1					
ANR	4169820	IdentifierDeclType	zend_op *		4169812	0					
ANR	4169821	Identifier	end		4169812	1					
ANR	4169822	ExpressionStatement	opline = op_array -> opcodes	563:1:17359:17385	4169812	1	True				
ANR	4169823	AssignmentExpression	opline = op_array -> opcodes		4169812	0		=			
ANR	4169824	Identifier	opline		4169812	0					
ANR	4169825	PtrMemberAccess	op_array -> opcodes		4169812	1					
ANR	4169826	Identifier	op_array		4169812	0					
ANR	4169827	Identifier	opcodes		4169812	1					
ANR	4169828	ExpressionStatement	end = opline + op_array -> last	564:1:17388:17417	4169812	2	True				
ANR	4169829	AssignmentExpression	end = opline + op_array -> last		4169812	0		=			
ANR	4169830	Identifier	end		4169812	0					
ANR	4169831	AdditiveExpression	opline + op_array -> last		4169812	1		+			
ANR	4169832	Identifier	opline		4169812	0					
ANR	4169833	PtrMemberAccess	op_array -> last		4169812	1					
ANR	4169834	Identifier	op_array		4169812	0					
ANR	4169835	Identifier	last		4169812	1					
ANR	4169836	WhileStatement	while ( opline < end )		4169812	3					
ANR	4169837	Condition	opline < end	565:8:17427:17438	4169812	0	True				
ANR	4169838	RelationalExpression	opline < end		4169812	0		<			
ANR	4169839	Identifier	opline		4169812	0					
ANR	4169840	Identifier	end		4169812	1					
ANR	4169841	CompoundStatement		7:22:134:134	4169812	1					
ANR	4169842	IfStatement	if ( opline -> op1_type == IS_CONST )		4169812	0					
ANR	4169843	Condition	opline -> op1_type == IS_CONST	566:6:17449:17476	4169812	0	True				
ANR	4169844	EqualityExpression	opline -> op1_type == IS_CONST		4169812	0		==			
ANR	4169845	PtrMemberAccess	opline -> op1_type		4169812	0					
ANR	4169846	Identifier	opline		4169812	0					
ANR	4169847	Identifier	op1_type		4169812	1					
ANR	4169848	Identifier	IS_CONST		4169812	1					
ANR	4169849	CompoundStatement		8:36:172:172	4169812	1					
ANR	4169850	ExpressionStatement	"ZEND_PASS_TWO_UNDO_CONSTANT ( op_array , opline -> op1 )"	567:3:17484:17534	4169812	0	True				
ANR	4169851	CallExpression	"ZEND_PASS_TWO_UNDO_CONSTANT ( op_array , opline -> op1 )"		4169812	0					
ANR	4169852	Callee	ZEND_PASS_TWO_UNDO_CONSTANT		4169812	0					
ANR	4169853	Identifier	ZEND_PASS_TWO_UNDO_CONSTANT		4169812	0					
ANR	4169854	ArgumentList	op_array		4169812	1					
ANR	4169855	Argument	op_array		4169812	0					
ANR	4169856	Identifier	op_array		4169812	0					
ANR	4169857	Argument	opline -> op1		4169812	1					
ANR	4169858	PtrMemberAccess	opline -> op1		4169812	0					
ANR	4169859	Identifier	opline		4169812	0					
ANR	4169860	Identifier	op1		4169812	1					
ANR	4169861	IfStatement	if ( opline -> op2_type == IS_CONST )		4169812	1					
ANR	4169862	Condition	opline -> op2_type == IS_CONST	569:6:17546:17573	4169812	0	True				
ANR	4169863	EqualityExpression	opline -> op2_type == IS_CONST		4169812	0		==			
ANR	4169864	PtrMemberAccess	opline -> op2_type		4169812	0					
ANR	4169865	Identifier	opline		4169812	0					
ANR	4169866	Identifier	op2_type		4169812	1					
ANR	4169867	Identifier	IS_CONST		4169812	1					
ANR	4169868	CompoundStatement		11:36:269:269	4169812	1					
ANR	4169869	ExpressionStatement	"ZEND_PASS_TWO_UNDO_CONSTANT ( op_array , opline -> op2 )"	570:3:17581:17631	4169812	0	True				
ANR	4169870	CallExpression	"ZEND_PASS_TWO_UNDO_CONSTANT ( op_array , opline -> op2 )"		4169812	0					
ANR	4169871	Callee	ZEND_PASS_TWO_UNDO_CONSTANT		4169812	0					
ANR	4169872	Identifier	ZEND_PASS_TWO_UNDO_CONSTANT		4169812	0					
ANR	4169873	ArgumentList	op_array		4169812	1					
ANR	4169874	Argument	op_array		4169812	0					
ANR	4169875	Identifier	op_array		4169812	0					
ANR	4169876	Argument	opline -> op2		4169812	1					
ANR	4169877	PtrMemberAccess	opline -> op2		4169812	0					
ANR	4169878	Identifier	opline		4169812	0					
ANR	4169879	Identifier	op2		4169812	1					
ANR	4169880	SwitchStatement	switch ( opline -> opcode )		4169812	2					
ANR	4169881	Condition	opline -> opcode	572:10:17647:17660	4169812	0	True				
ANR	4169882	PtrMemberAccess	opline -> opcode		4169812	0					
ANR	4169883	Identifier	opline		4169812	0					
ANR	4169884	Identifier	opcode		4169812	1					
ANR	4169885	CompoundStatement		14:26:356:356	4169812	1					
ANR	4169886	Label	case ZEND_JMP :	573:3:17668:17681	4169812	0	True				
ANR	4169887	Identifier	ZEND_JMP		4169812	0					
ANR	4169888	Label	case ZEND_FAST_CALL :	574:3:17686:17705	4169812	1	True				
ANR	4169889	Identifier	ZEND_FAST_CALL		4169812	0					
ANR	4169890	Label	case ZEND_DECLARE_ANON_CLASS :	575:3:17710:17738	4169812	2	True				
ANR	4169891	Identifier	ZEND_DECLARE_ANON_CLASS		4169812	0					
ANR	4169892	Label	case ZEND_DECLARE_ANON_INHERITED_CLASS :	576:3:17743:17781	4169812	3	True				
ANR	4169893	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		4169812	0					
ANR	4169894	ExpressionStatement	"ZEND_PASS_TWO_UNDO_JMP_TARGET ( op_array , opline , ZEND_OP1 ( opline ) )"	577:4:17787:17852	4169812	4	True				
ANR	4169895	CallExpression	"ZEND_PASS_TWO_UNDO_JMP_TARGET ( op_array , opline , ZEND_OP1 ( opline ) )"		4169812	0					
ANR	4169896	Callee	ZEND_PASS_TWO_UNDO_JMP_TARGET		4169812	0					
ANR	4169897	Identifier	ZEND_PASS_TWO_UNDO_JMP_TARGET		4169812	0					
ANR	4169898	ArgumentList	op_array		4169812	1					
ANR	4169899	Argument	op_array		4169812	0					
ANR	4169900	Identifier	op_array		4169812	0					
ANR	4169901	Argument	opline		4169812	1					
ANR	4169902	Identifier	opline		4169812	0					
ANR	4169903	Argument	ZEND_OP1 ( opline )		4169812	2					
ANR	4169904	CallExpression	ZEND_OP1 ( opline )		4169812	0					
ANR	4169905	Callee	ZEND_OP1		4169812	0					
ANR	4169906	Identifier	ZEND_OP1		4169812	0					
ANR	4169907	ArgumentList	opline		4169812	1					
ANR	4169908	Argument	opline		4169812	0					
ANR	4169909	Identifier	opline		4169812	0					
ANR	4169910	BreakStatement	break ;	578:4:17858:17863	4169812	5	True				
ANR	4169911	Label	case ZEND_JMPZNZ :	579:3:17868:17884	4169812	6	True				
ANR	4169912	Identifier	ZEND_JMPZNZ		4169812	0					
ANR	4169913	ExpressionStatement	"opline -> extended_value = ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"	581:4:17936:18028	4169812	7	True				
ANR	4169914	AssignmentExpression	"opline -> extended_value = ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"		4169812	0		=			
ANR	4169915	PtrMemberAccess	opline -> extended_value		4169812	0					
ANR	4169916	Identifier	opline		4169812	0					
ANR	4169917	Identifier	extended_value		4169812	1					
ANR	4169918	CallExpression	"ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"		4169812	1					
ANR	4169919	Callee	ZEND_OFFSET_TO_OPLINE_NUM		4169812	0					
ANR	4169920	Identifier	ZEND_OFFSET_TO_OPLINE_NUM		4169812	0					
ANR	4169921	ArgumentList	op_array		4169812	1					
ANR	4169922	Argument	op_array		4169812	0					
ANR	4169923	Identifier	op_array		4169812	0					
ANR	4169924	Argument	opline		4169812	1					
ANR	4169925	Identifier	opline		4169812	0					
ANR	4169926	Argument	opline -> extended_value		4169812	2					
ANR	4169927	PtrMemberAccess	opline -> extended_value		4169812	0					
ANR	4169928	Identifier	opline		4169812	0					
ANR	4169929	Identifier	extended_value		4169812	1					
ANR	4169930	Label	case ZEND_JMPZ :	583:3:18071:18085	4169812	8	True				
ANR	4169931	Identifier	ZEND_JMPZ		4169812	0					
ANR	4169932	Label	case ZEND_JMPNZ :	584:3:18090:18105	4169812	9	True				
ANR	4169933	Identifier	ZEND_JMPNZ		4169812	0					
ANR	4169934	Label	case ZEND_JMPZ_EX :	585:3:18110:18127	4169812	10	True				
ANR	4169935	Identifier	ZEND_JMPZ_EX		4169812	0					
ANR	4169936	Label	case ZEND_JMPNZ_EX :	586:3:18132:18150	4169812	11	True				
ANR	4169937	Identifier	ZEND_JMPNZ_EX		4169812	0					
ANR	4169938	Label	case ZEND_JMP_SET :	587:3:18155:18172	4169812	12	True				
ANR	4169939	Identifier	ZEND_JMP_SET		4169812	0					
ANR	4169940	Label	case ZEND_COALESCE :	588:3:18177:18195	4169812	13	True				
ANR	4169941	Identifier	ZEND_COALESCE		4169812	0					
ANR	4169942	Label	case ZEND_NEW :	589:3:18200:18213	4169812	14	True				
ANR	4169943	Identifier	ZEND_NEW		4169812	0					
ANR	4169944	Label	case ZEND_FE_RESET_R :	590:3:18218:18238	4169812	15	True				
ANR	4169945	Identifier	ZEND_FE_RESET_R		4169812	0					
ANR	4169946	Label	case ZEND_FE_RESET_RW :	591:3:18243:18264	4169812	16	True				
ANR	4169947	Identifier	ZEND_FE_RESET_RW		4169812	0					
ANR	4169948	Label	case ZEND_ASSERT_CHECK :	592:3:18269:18291	4169812	17	True				
ANR	4169949	Identifier	ZEND_ASSERT_CHECK		4169812	0					
ANR	4169950	ExpressionStatement	"ZEND_PASS_TWO_UNDO_JMP_TARGET ( op_array , opline , ZEND_OP2 ( opline ) )"	593:4:18297:18362	4169812	18	True				
ANR	4169951	CallExpression	"ZEND_PASS_TWO_UNDO_JMP_TARGET ( op_array , opline , ZEND_OP2 ( opline ) )"		4169812	0					
ANR	4169952	Callee	ZEND_PASS_TWO_UNDO_JMP_TARGET		4169812	0					
ANR	4169953	Identifier	ZEND_PASS_TWO_UNDO_JMP_TARGET		4169812	0					
ANR	4169954	ArgumentList	op_array		4169812	1					
ANR	4169955	Argument	op_array		4169812	0					
ANR	4169956	Identifier	op_array		4169812	0					
ANR	4169957	Argument	opline		4169812	1					
ANR	4169958	Identifier	opline		4169812	0					
ANR	4169959	Argument	ZEND_OP2 ( opline )		4169812	2					
ANR	4169960	CallExpression	ZEND_OP2 ( opline )		4169812	0					
ANR	4169961	Callee	ZEND_OP2		4169812	0					
ANR	4169962	Identifier	ZEND_OP2		4169812	0					
ANR	4169963	ArgumentList	opline		4169812	1					
ANR	4169964	Argument	opline		4169812	0					
ANR	4169965	Identifier	opline		4169812	0					
ANR	4169966	BreakStatement	break ;	594:4:18368:18373	4169812	19	True				
ANR	4169967	Label	case ZEND_FE_FETCH_R :	595:3:18378:18398	4169812	20	True				
ANR	4169968	Identifier	ZEND_FE_FETCH_R		4169812	0					
ANR	4169969	Label	case ZEND_FE_FETCH_RW :	596:3:18403:18424	4169812	21	True				
ANR	4169970	Identifier	ZEND_FE_FETCH_RW		4169812	0					
ANR	4169971	ExpressionStatement	"opline -> extended_value = ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"	597:4:18430:18522	4169812	22	True				
ANR	4169972	AssignmentExpression	"opline -> extended_value = ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"		4169812	0		=			
ANR	4169973	PtrMemberAccess	opline -> extended_value		4169812	0					
ANR	4169974	Identifier	opline		4169812	0					
ANR	4169975	Identifier	extended_value		4169812	1					
ANR	4169976	CallExpression	"ZEND_OFFSET_TO_OPLINE_NUM ( op_array , opline , opline -> extended_value )"		4169812	1					
ANR	4169977	Callee	ZEND_OFFSET_TO_OPLINE_NUM		4169812	0					
ANR	4169978	Identifier	ZEND_OFFSET_TO_OPLINE_NUM		4169812	0					
ANR	4169979	ArgumentList	op_array		4169812	1					
ANR	4169980	Argument	op_array		4169812	0					
ANR	4169981	Identifier	op_array		4169812	0					
ANR	4169982	Argument	opline		4169812	1					
ANR	4169983	Identifier	opline		4169812	0					
ANR	4169984	Argument	opline -> extended_value		4169812	2					
ANR	4169985	PtrMemberAccess	opline -> extended_value		4169812	0					
ANR	4169986	Identifier	opline		4169812	0					
ANR	4169987	Identifier	extended_value		4169812	1					
ANR	4169988	BreakStatement	break ;	598:4:18528:18533	4169812	23	True				
ANR	4169989	ExpressionStatement	opline ++	600:2:18541:18549	4169812	3	True				
ANR	4169990	PostIncDecOperationExpression	opline ++		4169812	0					
ANR	4169991	Identifier	opline		4169812	0					
ANR	4169992	IncDec	++		4169812	1					
ANR	4169993	ExpressionStatement	"zend_optimize ( op_array , ctx )"	604:1:18587:18615	4169812	4	True				
ANR	4169994	CallExpression	"zend_optimize ( op_array , ctx )"		4169812	0					
ANR	4169995	Callee	zend_optimize		4169812	0					
ANR	4169996	Identifier	zend_optimize		4169812	0					
ANR	4169997	ArgumentList	op_array		4169812	1					
ANR	4169998	Argument	op_array		4169812	0					
ANR	4169999	Identifier	op_array		4169812	0					
ANR	4170000	Argument	ctx		4169812	1					
ANR	4170001	Identifier	ctx		4169812	0					
ANR	4170002	ExpressionStatement	opline = op_array -> opcodes	607:1:18642:18668	4169812	5	True				
ANR	4170003	AssignmentExpression	opline = op_array -> opcodes		4169812	0		=			
ANR	4170004	Identifier	opline		4169812	0					
ANR	4170005	PtrMemberAccess	op_array -> opcodes		4169812	1					
ANR	4170006	Identifier	op_array		4169812	0					
ANR	4170007	Identifier	opcodes		4169812	1					
ANR	4170008	ExpressionStatement	end = opline + op_array -> last	608:1:18671:18700	4169812	6	True				
ANR	4170009	AssignmentExpression	end = opline + op_array -> last		4169812	0		=			
ANR	4170010	Identifier	end		4169812	0					
ANR	4170011	AdditiveExpression	opline + op_array -> last		4169812	1		+			
ANR	4170012	Identifier	opline		4169812	0					
ANR	4170013	PtrMemberAccess	op_array -> last		4169812	1					
ANR	4170014	Identifier	op_array		4169812	0					
ANR	4170015	Identifier	last		4169812	1					
ANR	4170016	WhileStatement	while ( opline < end )		4169812	7					
ANR	4170017	Condition	opline < end	609:8:18710:18721	4169812	0	True				
ANR	4170018	RelationalExpression	opline < end		4169812	0		<			
ANR	4170019	Identifier	opline		4169812	0					
ANR	4170020	Identifier	end		4169812	1					
ANR	4170021	CompoundStatement		51:22:1417:1417	4169812	1					
ANR	4170022	IfStatement	if ( opline -> op1_type == IS_CONST )		4169812	0					
ANR	4170023	Condition	opline -> op1_type == IS_CONST	610:6:18732:18759	4169812	0	True				
ANR	4170024	EqualityExpression	opline -> op1_type == IS_CONST		4169812	0		==			
ANR	4170025	PtrMemberAccess	opline -> op1_type		4169812	0					
ANR	4170026	Identifier	opline		4169812	0					
ANR	4170027	Identifier	op1_type		4169812	1					
ANR	4170028	Identifier	IS_CONST		4169812	1					
ANR	4170029	CompoundStatement		52:36:1455:1455	4169812	1					
ANR	4170030	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op1 )"	611:3:18767:18819	4169812	0	True				
ANR	4170031	CallExpression	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op1 )"		4169812	0					
ANR	4170032	Callee	ZEND_PASS_TWO_UPDATE_CONSTANT		4169812	0					
ANR	4170033	Identifier	ZEND_PASS_TWO_UPDATE_CONSTANT		4169812	0					
ANR	4170034	ArgumentList	op_array		4169812	1					
ANR	4170035	Argument	op_array		4169812	0					
ANR	4170036	Identifier	op_array		4169812	0					
ANR	4170037	Argument	opline -> op1		4169812	1					
ANR	4170038	PtrMemberAccess	opline -> op1		4169812	0					
ANR	4170039	Identifier	opline		4169812	0					
ANR	4170040	Identifier	op1		4169812	1					
ANR	4170041	IfStatement	if ( opline -> op2_type == IS_CONST )		4169812	1					
ANR	4170042	Condition	opline -> op2_type == IS_CONST	613:6:18831:18858	4169812	0	True				
ANR	4170043	EqualityExpression	opline -> op2_type == IS_CONST		4169812	0		==			
ANR	4170044	PtrMemberAccess	opline -> op2_type		4169812	0					
ANR	4170045	Identifier	opline		4169812	0					
ANR	4170046	Identifier	op2_type		4169812	1					
ANR	4170047	Identifier	IS_CONST		4169812	1					
ANR	4170048	CompoundStatement		55:36:1554:1554	4169812	1					
ANR	4170049	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op2 )"	614:3:18866:18918	4169812	0	True				
ANR	4170050	CallExpression	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op2 )"		4169812	0					
ANR	4170051	Callee	ZEND_PASS_TWO_UPDATE_CONSTANT		4169812	0					
ANR	4170052	Identifier	ZEND_PASS_TWO_UPDATE_CONSTANT		4169812	0					
ANR	4170053	ArgumentList	op_array		4169812	1					
ANR	4170054	Argument	op_array		4169812	0					
ANR	4170055	Identifier	op_array		4169812	0					
ANR	4170056	Argument	opline -> op2		4169812	1					
ANR	4170057	PtrMemberAccess	opline -> op2		4169812	0					
ANR	4170058	Identifier	opline		4169812	0					
ANR	4170059	Identifier	op2		4169812	1					
ANR	4170060	SwitchStatement	switch ( opline -> opcode )		4169812	2					
ANR	4170061	Condition	opline -> opcode	616:10:18934:18947	4169812	0	True				
ANR	4170062	PtrMemberAccess	opline -> opcode		4169812	0					
ANR	4170063	Identifier	opline		4169812	0					
ANR	4170064	Identifier	opcode		4169812	1					
ANR	4170065	CompoundStatement		58:26:1643:1643	4169812	1					
ANR	4170066	Label	case ZEND_JMP :	617:3:18955:18968	4169812	0	True				
ANR	4170067	Identifier	ZEND_JMP		4169812	0					
ANR	4170068	Label	case ZEND_FAST_CALL :	618:3:18973:18992	4169812	1	True				
ANR	4170069	Identifier	ZEND_FAST_CALL		4169812	0					
ANR	4170070	Label	case ZEND_DECLARE_ANON_CLASS :	619:3:18997:19025	4169812	2	True				
ANR	4170071	Identifier	ZEND_DECLARE_ANON_CLASS		4169812	0					
ANR	4170072	Label	case ZEND_DECLARE_ANON_INHERITED_CLASS :	620:3:19030:19068	4169812	3	True				
ANR	4170073	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		4169812	0					
ANR	4170074	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , ZEND_OP1 ( opline ) )"	621:4:19074:19141	4169812	4	True				
ANR	4170075	CallExpression	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , ZEND_OP1 ( opline ) )"		4169812	0					
ANR	4170076	Callee	ZEND_PASS_TWO_UPDATE_JMP_TARGET		4169812	0					
ANR	4170077	Identifier	ZEND_PASS_TWO_UPDATE_JMP_TARGET		4169812	0					
ANR	4170078	ArgumentList	op_array		4169812	1					
ANR	4170079	Argument	op_array		4169812	0					
ANR	4170080	Identifier	op_array		4169812	0					
ANR	4170081	Argument	opline		4169812	1					
ANR	4170082	Identifier	opline		4169812	0					
ANR	4170083	Argument	ZEND_OP1 ( opline )		4169812	2					
ANR	4170084	CallExpression	ZEND_OP1 ( opline )		4169812	0					
ANR	4170085	Callee	ZEND_OP1		4169812	0					
ANR	4170086	Identifier	ZEND_OP1		4169812	0					
ANR	4170087	ArgumentList	opline		4169812	1					
ANR	4170088	Argument	opline		4169812	0					
ANR	4170089	Identifier	opline		4169812	0					
ANR	4170090	BreakStatement	break ;	622:4:19147:19152	4169812	5	True				
ANR	4170091	Label	case ZEND_JMPZNZ :	623:3:19157:19173	4169812	6	True				
ANR	4170092	Identifier	ZEND_JMPZNZ		4169812	0					
ANR	4170093	ExpressionStatement	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"	625:4:19223:19315	4169812	7	True				
ANR	4170094	AssignmentExpression	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		4169812	0		=			
ANR	4170095	PtrMemberAccess	opline -> extended_value		4169812	0					
ANR	4170096	Identifier	opline		4169812	0					
ANR	4170097	Identifier	extended_value		4169812	1					
ANR	4170098	CallExpression	"ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		4169812	1					
ANR	4170099	Callee	ZEND_OPLINE_NUM_TO_OFFSET		4169812	0					
ANR	4170100	Identifier	ZEND_OPLINE_NUM_TO_OFFSET		4169812	0					
ANR	4170101	ArgumentList	op_array		4169812	1					
ANR	4170102	Argument	op_array		4169812	0					
ANR	4170103	Identifier	op_array		4169812	0					
ANR	4170104	Argument	opline		4169812	1					
ANR	4170105	Identifier	opline		4169812	0					
ANR	4170106	Argument	opline -> extended_value		4169812	2					
ANR	4170107	PtrMemberAccess	opline -> extended_value		4169812	0					
ANR	4170108	Identifier	opline		4169812	0					
ANR	4170109	Identifier	extended_value		4169812	1					
ANR	4170110	Label	case ZEND_JMPZ :	627:3:19358:19372	4169812	8	True				
ANR	4170111	Identifier	ZEND_JMPZ		4169812	0					
ANR	4170112	Label	case ZEND_JMPNZ :	628:3:19377:19392	4169812	9	True				
ANR	4170113	Identifier	ZEND_JMPNZ		4169812	0					
ANR	4170114	Label	case ZEND_JMPZ_EX :	629:3:19397:19414	4169812	10	True				
ANR	4170115	Identifier	ZEND_JMPZ_EX		4169812	0					
ANR	4170116	Label	case ZEND_JMPNZ_EX :	630:3:19419:19437	4169812	11	True				
ANR	4170117	Identifier	ZEND_JMPNZ_EX		4169812	0					
ANR	4170118	Label	case ZEND_JMP_SET :	631:3:19442:19459	4169812	12	True				
ANR	4170119	Identifier	ZEND_JMP_SET		4169812	0					
ANR	4170120	Label	case ZEND_COALESCE :	632:3:19464:19482	4169812	13	True				
ANR	4170121	Identifier	ZEND_COALESCE		4169812	0					
ANR	4170122	Label	case ZEND_NEW :	633:3:19487:19500	4169812	14	True				
ANR	4170123	Identifier	ZEND_NEW		4169812	0					
ANR	4170124	Label	case ZEND_FE_RESET_R :	634:3:19505:19525	4169812	15	True				
ANR	4170125	Identifier	ZEND_FE_RESET_R		4169812	0					
ANR	4170126	Label	case ZEND_FE_RESET_RW :	635:3:19530:19551	4169812	16	True				
ANR	4170127	Identifier	ZEND_FE_RESET_RW		4169812	0					
ANR	4170128	Label	case ZEND_ASSERT_CHECK :	636:3:19556:19578	4169812	17	True				
ANR	4170129	Identifier	ZEND_ASSERT_CHECK		4169812	0					
ANR	4170130	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , ZEND_OP2 ( opline ) )"	637:4:19584:19651	4169812	18	True				
ANR	4170131	CallExpression	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , ZEND_OP2 ( opline ) )"		4169812	0					
ANR	4170132	Callee	ZEND_PASS_TWO_UPDATE_JMP_TARGET		4169812	0					
ANR	4170133	Identifier	ZEND_PASS_TWO_UPDATE_JMP_TARGET		4169812	0					
ANR	4170134	ArgumentList	op_array		4169812	1					
ANR	4170135	Argument	op_array		4169812	0					
ANR	4170136	Identifier	op_array		4169812	0					
ANR	4170137	Argument	opline		4169812	1					
ANR	4170138	Identifier	opline		4169812	0					
ANR	4170139	Argument	ZEND_OP2 ( opline )		4169812	2					
ANR	4170140	CallExpression	ZEND_OP2 ( opline )		4169812	0					
ANR	4170141	Callee	ZEND_OP2		4169812	0					
ANR	4170142	Identifier	ZEND_OP2		4169812	0					
ANR	4170143	ArgumentList	opline		4169812	1					
ANR	4170144	Argument	opline		4169812	0					
ANR	4170145	Identifier	opline		4169812	0					
ANR	4170146	BreakStatement	break ;	638:4:19657:19662	4169812	19	True				
ANR	4170147	Label	case ZEND_FE_FETCH_R :	639:3:19667:19687	4169812	20	True				
ANR	4170148	Identifier	ZEND_FE_FETCH_R		4169812	0					
ANR	4170149	Label	case ZEND_FE_FETCH_RW :	640:3:19692:19713	4169812	21	True				
ANR	4170150	Identifier	ZEND_FE_FETCH_RW		4169812	0					
ANR	4170151	ExpressionStatement	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"	641:4:19719:19811	4169812	22	True				
ANR	4170152	AssignmentExpression	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		4169812	0		=			
ANR	4170153	PtrMemberAccess	opline -> extended_value		4169812	0					
ANR	4170154	Identifier	opline		4169812	0					
ANR	4170155	Identifier	extended_value		4169812	1					
ANR	4170156	CallExpression	"ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		4169812	1					
ANR	4170157	Callee	ZEND_OPLINE_NUM_TO_OFFSET		4169812	0					
ANR	4170158	Identifier	ZEND_OPLINE_NUM_TO_OFFSET		4169812	0					
ANR	4170159	ArgumentList	op_array		4169812	1					
ANR	4170160	Argument	op_array		4169812	0					
ANR	4170161	Identifier	op_array		4169812	0					
ANR	4170162	Argument	opline		4169812	1					
ANR	4170163	Identifier	opline		4169812	0					
ANR	4170164	Argument	opline -> extended_value		4169812	2					
ANR	4170165	PtrMemberAccess	opline -> extended_value		4169812	0					
ANR	4170166	Identifier	opline		4169812	0					
ANR	4170167	Identifier	extended_value		4169812	1					
ANR	4170168	BreakStatement	break ;	642:4:19817:19822	4169812	23	True				
ANR	4170169	ExpressionStatement	ZEND_VM_SET_OPCODE_HANDLER ( opline )	644:2:19830:19864	4169812	3	True				
ANR	4170170	CallExpression	ZEND_VM_SET_OPCODE_HANDLER ( opline )		4169812	0					
ANR	4170171	Callee	ZEND_VM_SET_OPCODE_HANDLER		4169812	0					
ANR	4170172	Identifier	ZEND_VM_SET_OPCODE_HANDLER		4169812	0					
ANR	4170173	ArgumentList	opline		4169812	1					
ANR	4170174	Argument	opline		4169812	0					
ANR	4170175	Identifier	opline		4169812	0					
ANR	4170176	ExpressionStatement	opline ++	645:2:19868:19876	4169812	4	True				
ANR	4170177	PostIncDecOperationExpression	opline ++		4169812	0					
ANR	4170178	Identifier	opline		4169812	0					
ANR	4170179	IncDec	++		4169812	1					
ANR	4170180	ReturnType	static void		4169812	1					
ANR	4170181	Identifier	zend_accel_optimize		4169812	2					
ANR	4170182	ParameterList	"zend_op_array * op_array , zend_optimizer_ctx * ctx"		4169812	3					
ANR	4170183	Parameter	zend_op_array * op_array	557:32:17219:17246	4169812	0	True				
ANR	4170184	ParameterType	zend_op_array *		4169812	0					
ANR	4170185	Identifier	op_array		4169812	1					
ANR	4170186	Parameter	zend_optimizer_ctx * ctx	558:32:17281:17303	4169812	1	True				
ANR	4170187	ParameterType	zend_optimizer_ctx *		4169812	0					
ANR	4170188	Identifier	ctx		4169812	1					
ANR	4170189	CFGEntryNode	ENTRY		4169812		True				
ANR	4170190	CFGExitNode	EXIT		4169812		True				
ANR	4170191	Symbol	opline -> op1		4169812						
ANR	4170192	Symbol	opline -> op2		4169812						
ANR	4170193	Symbol	IS_CONST		4169812						
ANR	4170194	Symbol	ZEND_OFFSET_TO_OPLINE_NUM		4169812						
ANR	4170195	Symbol	ctx		4169812						
ANR	4170196	Symbol	* op_array		4169812						
ANR	4170197	Symbol	opline -> op1_type		4169812						
ANR	4170198	Symbol	ZEND_OP1		4169812						
ANR	4170199	Symbol	opline -> extended_value		4169812						
ANR	4170200	Symbol	ZEND_OPLINE_NUM_TO_OFFSET		4169812						
ANR	4170201	Symbol	ZEND_OP2		4169812						
ANR	4170202	Symbol	op_array -> last		4169812						
ANR	4170203	Symbol	opline		4169812						
ANR	4170204	Symbol	op_array -> opcodes		4169812						
ANR	4170205	Symbol	* opline		4169812						
ANR	4170206	Symbol	opline -> opcode		4169812						
ANR	4170207	Symbol	end		4169812						
ANR	4170208	Symbol	opline -> op2_type		4169812						
ANR	4170209	Symbol	op_array		4169812						
ANR	4170210	Function	zend_accel_adjust_fcall_stack_size	649:0:19884:20388							
ANR	4170211	FunctionDef	"zend_accel_adjust_fcall_stack_size (zend_op_array * op_array , zend_optimizer_ctx * ctx)"		4170210	0					
ANR	4170212	CompoundStatement		650:0:19981:20388	4170210	0					
ANR	4170213	IdentifierDeclStatement	zend_function * func ;	651:1:19984:20003	4170210	0	True				
ANR	4170214	IdentifierDecl	* func		4170210	0					
ANR	4170215	IdentifierDeclType	zend_function *		4170210	0					
ANR	4170216	Identifier	func		4170210	1					
ANR	4170217	IdentifierDeclStatement	"zend_op * opline , * end ;"	652:1:20006:20027	4170210	1	True				
ANR	4170218	IdentifierDecl	* opline		4170210	0					
ANR	4170219	IdentifierDeclType	zend_op *		4170210	0					
ANR	4170220	Identifier	opline		4170210	1					
ANR	4170221	IdentifierDecl	* end		4170210	1					
ANR	4170222	IdentifierDeclType	zend_op *		4170210	0					
ANR	4170223	Identifier	end		4170210	1					
ANR	4170224	ExpressionStatement	opline = op_array -> opcodes	654:1:20031:20057	4170210	2	True				
ANR	4170225	AssignmentExpression	opline = op_array -> opcodes		4170210	0		=			
ANR	4170226	Identifier	opline		4170210	0					
ANR	4170227	PtrMemberAccess	op_array -> opcodes		4170210	1					
ANR	4170228	Identifier	op_array		4170210	0					
ANR	4170229	Identifier	opcodes		4170210	1					
ANR	4170230	ExpressionStatement	end = opline + op_array -> last	655:1:20060:20089	4170210	3	True				
ANR	4170231	AssignmentExpression	end = opline + op_array -> last		4170210	0		=			
ANR	4170232	Identifier	end		4170210	0					
ANR	4170233	AdditiveExpression	opline + op_array -> last		4170210	1		+			
ANR	4170234	Identifier	opline		4170210	0					
ANR	4170235	PtrMemberAccess	op_array -> last		4170210	1					
ANR	4170236	Identifier	op_array		4170210	0					
ANR	4170237	Identifier	last		4170210	1					
ANR	4170238	WhileStatement	while ( opline < end )		4170210	4					
ANR	4170239	Condition	opline < end	656:8:20099:20110	4170210	0	True				
ANR	4170240	RelationalExpression	opline < end		4170210	0		<			
ANR	4170241	Identifier	opline		4170210	0					
ANR	4170242	Identifier	end		4170210	1					
ANR	4170243	CompoundStatement		7:22:131:131	4170210	1					
ANR	4170244	IfStatement	if ( opline -> opcode == ZEND_INIT_FCALL )		4170210	0					
ANR	4170245	Condition	opline -> opcode == ZEND_INIT_FCALL	657:6:20121:20153	4170210	0	True				
ANR	4170246	EqualityExpression	opline -> opcode == ZEND_INIT_FCALL		4170210	0		==			
ANR	4170247	PtrMemberAccess	opline -> opcode		4170210	0					
ANR	4170248	Identifier	opline		4170210	0					
ANR	4170249	Identifier	opcode		4170210	1					
ANR	4170250	Identifier	ZEND_INIT_FCALL		4170210	1					
ANR	4170251	CompoundStatement		8:41:174:174	4170210	1					
ANR	4170252	ExpressionStatement	"func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) ) )"	658:3:20161:20270	4170210	0	True				
ANR	4170253	AssignmentExpression	"func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) ) )"		4170210	0		=			
ANR	4170254	Identifier	func		4170210	0					
ANR	4170255	CallExpression	"zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) ) )"		4170210	1					
ANR	4170256	Callee	zend_hash_find_ptr		4170210	0					
ANR	4170257	Identifier	zend_hash_find_ptr		4170210	0					
ANR	4170258	ArgumentList	& ctx -> script -> function_table		4170210	1					
ANR	4170259	Argument	& ctx -> script -> function_table		4170210	0					
ANR	4170260	UnaryOperationExpression	& ctx -> script -> function_table		4170210	0					
ANR	4170261	UnaryOperator	&		4170210	0					
ANR	4170262	PtrMemberAccess	ctx -> script -> function_table		4170210	1					
ANR	4170263	PtrMemberAccess	ctx -> script		4170210	0					
ANR	4170264	Identifier	ctx		4170210	0					
ANR	4170265	Identifier	script		4170210	1					
ANR	4170266	Identifier	function_table		4170210	1					
ANR	4170267	Argument	"Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) )"		4170210	1					
ANR	4170268	CallExpression	"Z_STR_P ( RT_CONSTANT ( op_array , opline -> op2 ) )"		4170210	0					
ANR	4170269	Callee	Z_STR_P		4170210	0					
ANR	4170270	Identifier	Z_STR_P		4170210	0					
ANR	4170271	ArgumentList	"RT_CONSTANT ( op_array , opline -> op2 )"		4170210	1					
ANR	4170272	Argument	"RT_CONSTANT ( op_array , opline -> op2 )"		4170210	0					
ANR	4170273	CallExpression	"RT_CONSTANT ( op_array , opline -> op2 )"		4170210	0					
ANR	4170274	Callee	RT_CONSTANT		4170210	0					
ANR	4170275	Identifier	RT_CONSTANT		4170210	0					
ANR	4170276	ArgumentList	op_array		4170210	1					
ANR	4170277	Argument	op_array		4170210	0					
ANR	4170278	Identifier	op_array		4170210	0					
ANR	4170279	Argument	opline -> op2		4170210	1					
ANR	4170280	PtrMemberAccess	opline -> op2		4170210	0					
ANR	4170281	Identifier	opline		4170210	0					
ANR	4170282	Identifier	op2		4170210	1					
ANR	4170283	IfStatement	if ( func )		4170210	1					
ANR	4170284	Condition	func	661:7:20279:20282	4170210	0	True				
ANR	4170285	Identifier	func		4170210	0					
ANR	4170286	CompoundStatement		12:13:303:303	4170210	1					
ANR	4170287	ExpressionStatement	"opline -> op1 . num = zend_vm_calc_used_stack ( opline -> extended_value , func )"	662:4:20291:20362	4170210	0	True				
ANR	4170288	AssignmentExpression	"opline -> op1 . num = zend_vm_calc_used_stack ( opline -> extended_value , func )"		4170210	0		=			
ANR	4170289	MemberAccess	opline -> op1 . num		4170210	0					
ANR	4170290	PtrMemberAccess	opline -> op1		4170210	0					
ANR	4170291	Identifier	opline		4170210	0					
ANR	4170292	Identifier	op1		4170210	1					
ANR	4170293	Identifier	num		4170210	1					
ANR	4170294	CallExpression	"zend_vm_calc_used_stack ( opline -> extended_value , func )"		4170210	1					
ANR	4170295	Callee	zend_vm_calc_used_stack		4170210	0					
ANR	4170296	Identifier	zend_vm_calc_used_stack		4170210	0					
ANR	4170297	ArgumentList	opline -> extended_value		4170210	1					
ANR	4170298	Argument	opline -> extended_value		4170210	0					
ANR	4170299	PtrMemberAccess	opline -> extended_value		4170210	0					
ANR	4170300	Identifier	opline		4170210	0					
ANR	4170301	Identifier	extended_value		4170210	1					
ANR	4170302	Argument	func		4170210	1					
ANR	4170303	Identifier	func		4170210	0					
ANR	4170304	ExpressionStatement	opline ++	665:2:20375:20383	4170210	1	True				
ANR	4170305	PostIncDecOperationExpression	opline ++		4170210	0					
ANR	4170306	Identifier	opline		4170210	0					
ANR	4170307	IncDec	++		4170210	1					
ANR	4170308	ReturnType	static void		4170210	1					
ANR	4170309	Identifier	zend_accel_adjust_fcall_stack_size		4170210	2					
ANR	4170310	ParameterList	"zend_op_array * op_array , zend_optimizer_ctx * ctx"		4170210	3					
ANR	4170311	Parameter	zend_op_array * op_array	649:47:19931:19953	4170210	0	True				
ANR	4170312	ParameterType	zend_op_array *		4170210	0					
ANR	4170313	Identifier	op_array		4170210	1					
ANR	4170314	Parameter	zend_optimizer_ctx * ctx	649:72:19956:19978	4170210	1	True				
ANR	4170315	ParameterType	zend_optimizer_ctx *		4170210	0					
ANR	4170316	Identifier	ctx		4170210	1					
ANR	4170317	CFGEntryNode	ENTRY		4170210		True				
ANR	4170318	CFGExitNode	EXIT		4170210		True				
ANR	4170319	Symbol	opline -> op1		4170210						
ANR	4170320	Symbol	opline -> op2		4170210						
ANR	4170321	Symbol	ctx		4170210						
ANR	4170322	Symbol	ctx -> script		4170210						
ANR	4170323	Symbol	RT_CONSTANT		4170210						
ANR	4170324	Symbol	* op_array		4170210						
ANR	4170325	Symbol	* ctx		4170210						
ANR	4170326	Symbol	& ctx -> script -> function_table		4170210						
ANR	4170327	Symbol	opline -> extended_value		4170210						
ANR	4170328	Symbol	op_array -> last		4170210						
ANR	4170329	Symbol	opline		4170210						
ANR	4170330	Symbol	op_array -> opcodes		4170210						
ANR	4170331	Symbol	func		4170210						
ANR	4170332	Symbol	* opline		4170210						
ANR	4170333	Symbol	ZEND_INIT_FCALL		4170210						
ANR	4170334	Symbol	opline -> opcode		4170210						
ANR	4170335	Symbol	end		4170210						
ANR	4170336	Symbol	opline -> op1 . num		4170210						
ANR	4170337	Symbol	Z_STR_P		4170210						
ANR	4170338	Symbol	zend_hash_find_ptr		4170210						
ANR	4170339	Symbol	zend_vm_calc_used_stack		4170210						
ANR	4170340	Symbol	op_array		4170210						
ANR	4170341	Function	zend_accel_script_optimize	669:0:20391:22992							
ANR	4170342	FunctionDef	zend_accel_script_optimize (zend_persistent_script * script)		4170341	0					
ANR	4170343	CompoundStatement		670:0:20454:22992	4170341	0					
ANR	4170344	IdentifierDeclStatement	"uint idx , j ;"	671:1:20457:20468	4170341	0	True				
ANR	4170345	IdentifierDecl	idx		4170341	0					
ANR	4170346	IdentifierDeclType	uint		4170341	0					
ANR	4170347	Identifier	idx		4170341	1					
ANR	4170348	IdentifierDecl	j		4170341	1					
ANR	4170349	IdentifierDeclType	uint		4170341	0					
ANR	4170350	Identifier	j		4170341	1					
ANR	4170351	IdentifierDeclStatement	"Bucket * p , * q ;"	672:1:20471:20484	4170341	1	True				
ANR	4170352	IdentifierDecl	* p		4170341	0					
ANR	4170353	IdentifierDeclType	Bucket *		4170341	0					
ANR	4170354	Identifier	p		4170341	1					
ANR	4170355	IdentifierDecl	* q		4170341	1					
ANR	4170356	IdentifierDeclType	Bucket *		4170341	0					
ANR	4170357	Identifier	q		4170341	1					
ANR	4170358	IdentifierDeclStatement	zend_class_entry * ce ;	673:1:20487:20507	4170341	2	True				
ANR	4170359	IdentifierDecl	* ce		4170341	0					
ANR	4170360	IdentifierDeclType	zend_class_entry *		4170341	0					
ANR	4170361	Identifier	ce		4170341	1					
ANR	4170362	IdentifierDeclStatement	zend_op_array * op_array ;	674:1:20510:20533	4170341	3	True				
ANR	4170363	IdentifierDecl	* op_array		4170341	0					
ANR	4170364	IdentifierDeclType	zend_op_array *		4170341	0					
ANR	4170365	Identifier	op_array		4170341	1					
ANR	4170366	IdentifierDeclStatement	zend_optimizer_ctx ctx ;	675:1:20536:20558	4170341	4	True				
ANR	4170367	IdentifierDecl	ctx		4170341	0					
ANR	4170368	IdentifierDeclType	zend_optimizer_ctx		4170341	0					
ANR	4170369	Identifier	ctx		4170341	1					
ANR	4170370	ExpressionStatement	ctx . arena = zend_arena_create ( 64 * 1024 )	677:1:20562:20602	4170341	5	True				
ANR	4170371	AssignmentExpression	ctx . arena = zend_arena_create ( 64 * 1024 )		4170341	0		=			
ANR	4170372	MemberAccess	ctx . arena		4170341	0					
ANR	4170373	Identifier	ctx		4170341	0					
ANR	4170374	Identifier	arena		4170341	1					
ANR	4170375	CallExpression	zend_arena_create ( 64 * 1024 )		4170341	1					
ANR	4170376	Callee	zend_arena_create		4170341	0					
ANR	4170377	Identifier	zend_arena_create		4170341	0					
ANR	4170378	ArgumentList	64 * 1024		4170341	1					
ANR	4170379	Argument	64 * 1024		4170341	0					
ANR	4170380	MultiplicativeExpression	64 * 1024		4170341	0		*			
ANR	4170381	PrimaryExpression	64		4170341	0					
ANR	4170382	PrimaryExpression	1024		4170341	1					
ANR	4170383	ExpressionStatement	ctx . script = script	678:1:20605:20624	4170341	6	True				
ANR	4170384	AssignmentExpression	ctx . script = script		4170341	0		=			
ANR	4170385	MemberAccess	ctx . script		4170341	0					
ANR	4170386	Identifier	ctx		4170341	0					
ANR	4170387	Identifier	script		4170341	1					
ANR	4170388	Identifier	script		4170341	1					
ANR	4170389	ExpressionStatement	ctx . constants = NULL	679:1:20627:20647	4170341	7	True				
ANR	4170390	AssignmentExpression	ctx . constants = NULL		4170341	0		=			
ANR	4170391	MemberAccess	ctx . constants		4170341	0					
ANR	4170392	Identifier	ctx		4170341	0					
ANR	4170393	Identifier	constants		4170341	1					
ANR	4170394	Identifier	NULL		4170341	1					
ANR	4170395	ExpressionStatement	"zend_accel_optimize ( & script -> main_op_array , & ctx )"	681:1:20651:20700	4170341	8	True				
ANR	4170396	CallExpression	"zend_accel_optimize ( & script -> main_op_array , & ctx )"		4170341	0					
ANR	4170397	Callee	zend_accel_optimize		4170341	0					
ANR	4170398	Identifier	zend_accel_optimize		4170341	0					
ANR	4170399	ArgumentList	& script -> main_op_array		4170341	1					
ANR	4170400	Argument	& script -> main_op_array		4170341	0					
ANR	4170401	UnaryOperationExpression	& script -> main_op_array		4170341	0					
ANR	4170402	UnaryOperator	&		4170341	0					
ANR	4170403	PtrMemberAccess	script -> main_op_array		4170341	1					
ANR	4170404	Identifier	script		4170341	0					
ANR	4170405	Identifier	main_op_array		4170341	1					
ANR	4170406	Argument	& ctx		4170341	1					
ANR	4170407	UnaryOperationExpression	& ctx		4170341	0					
ANR	4170408	UnaryOperator	&		4170341	0					
ANR	4170409	Identifier	ctx		4170341	1					
ANR	4170410	ForStatement	for ( idx = 0 ; idx < script -> function_table . nNumUsed ; idx ++ )		4170341	9					
ANR	4170411	ForInit	idx = 0 ;	683:6:20709:20716	4170341	0	True				
ANR	4170412	AssignmentExpression	idx = 0		4170341	0		=			
ANR	4170413	Identifier	idx		4170341	0					
ANR	4170414	PrimaryExpression	0		4170341	1					
ANR	4170415	Condition	idx < script -> function_table . nNumUsed	683:15:20718:20754	4170341	1	True				
ANR	4170416	RelationalExpression	idx < script -> function_table . nNumUsed		4170341	0		<			
ANR	4170417	Identifier	idx		4170341	0					
ANR	4170418	MemberAccess	script -> function_table . nNumUsed		4170341	1					
ANR	4170419	PtrMemberAccess	script -> function_table		4170341	0					
ANR	4170420	Identifier	script		4170341	0					
ANR	4170421	Identifier	function_table		4170341	1					
ANR	4170422	Identifier	nNumUsed		4170341	1					
ANR	4170423	PostIncDecOperationExpression	idx ++	683:54:20757:20761	4170341	2	True				
ANR	4170424	Identifier	idx		4170341	0					
ANR	4170425	IncDec	++		4170341	1					
ANR	4170426	CompoundStatement		14:61:309:309	4170341	3					
ANR	4170427	ExpressionStatement	p = script -> function_table . arData + idx	684:2:20768:20807	4170341	0	True				
ANR	4170428	AssignmentExpression	p = script -> function_table . arData + idx		4170341	0		=			
ANR	4170429	Identifier	p		4170341	0					
ANR	4170430	AdditiveExpression	script -> function_table . arData + idx		4170341	1		+			
ANR	4170431	MemberAccess	script -> function_table . arData		4170341	0					
ANR	4170432	PtrMemberAccess	script -> function_table		4170341	0					
ANR	4170433	Identifier	script		4170341	0					
ANR	4170434	Identifier	function_table		4170341	1					
ANR	4170435	Identifier	arData		4170341	1					
ANR	4170436	Identifier	idx		4170341	1					
ANR	4170437	IfStatement	if ( Z_TYPE ( p -> val ) == IS_UNDEF )		4170341	1					
ANR	4170438	Condition	Z_TYPE ( p -> val ) == IS_UNDEF	685:6:20815:20840	4170341	0	True				
ANR	4170439	EqualityExpression	Z_TYPE ( p -> val ) == IS_UNDEF		4170341	0		==			
ANR	4170440	CallExpression	Z_TYPE ( p -> val )		4170341	0					
ANR	4170441	Callee	Z_TYPE		4170341	0					
ANR	4170442	Identifier	Z_TYPE		4170341	0					
ANR	4170443	ArgumentList	p -> val		4170341	1					
ANR	4170444	Argument	p -> val		4170341	0					
ANR	4170445	PtrMemberAccess	p -> val		4170341	0					
ANR	4170446	Identifier	p		4170341	0					
ANR	4170447	Identifier	val		4170341	1					
ANR	4170448	Identifier	IS_UNDEF		4170341	1					
ANR	4170449	ContinueStatement	continue ;	685:34:20843:20851	4170341	1	True				
ANR	4170450	ExpressionStatement	op_array = ( zend_op_array * ) Z_PTR ( p -> val )	686:2:20855:20895	4170341	2	True				
ANR	4170451	AssignmentExpression	op_array = ( zend_op_array * ) Z_PTR ( p -> val )		4170341	0		=			
ANR	4170452	Identifier	op_array		4170341	0					
ANR	4170453	CastExpression	( zend_op_array * ) Z_PTR ( p -> val )		4170341	1					
ANR	4170454	CastTarget	zend_op_array *		4170341	0					
ANR	4170455	CallExpression	Z_PTR ( p -> val )		4170341	1					
ANR	4170456	Callee	Z_PTR		4170341	0					
ANR	4170457	Identifier	Z_PTR		4170341	0					
ANR	4170458	ArgumentList	p -> val		4170341	1					
ANR	4170459	Argument	p -> val		4170341	0					
ANR	4170460	PtrMemberAccess	p -> val		4170341	0					
ANR	4170461	Identifier	p		4170341	0					
ANR	4170462	Identifier	val		4170341	1					
ANR	4170463	ExpressionStatement	"zend_accel_optimize ( op_array , & ctx )"	687:2:20899:20934	4170341	3	True				
ANR	4170464	CallExpression	"zend_accel_optimize ( op_array , & ctx )"		4170341	0					
ANR	4170465	Callee	zend_accel_optimize		4170341	0					
ANR	4170466	Identifier	zend_accel_optimize		4170341	0					
ANR	4170467	ArgumentList	op_array		4170341	1					
ANR	4170468	Argument	op_array		4170341	0					
ANR	4170469	Identifier	op_array		4170341	0					
ANR	4170470	Argument	& ctx		4170341	1					
ANR	4170471	UnaryOperationExpression	& ctx		4170341	0					
ANR	4170472	UnaryOperator	&		4170341	0					
ANR	4170473	Identifier	ctx		4170341	1					
ANR	4170474	ForStatement	for ( idx = 0 ; idx < script -> class_table . nNumUsed ; idx ++ )		4170341	10					
ANR	4170475	ForInit	idx = 0 ;	690:6:20946:20953	4170341	0	True				
ANR	4170476	AssignmentExpression	idx = 0		4170341	0		=			
ANR	4170477	Identifier	idx		4170341	0					
ANR	4170478	PrimaryExpression	0		4170341	1					
ANR	4170479	Condition	idx < script -> class_table . nNumUsed	690:15:20955:20988	4170341	1	True				
ANR	4170480	RelationalExpression	idx < script -> class_table . nNumUsed		4170341	0		<			
ANR	4170481	Identifier	idx		4170341	0					
ANR	4170482	MemberAccess	script -> class_table . nNumUsed		4170341	1					
ANR	4170483	PtrMemberAccess	script -> class_table		4170341	0					
ANR	4170484	Identifier	script		4170341	0					
ANR	4170485	Identifier	class_table		4170341	1					
ANR	4170486	Identifier	nNumUsed		4170341	1					
ANR	4170487	PostIncDecOperationExpression	idx ++	690:51:20991:20995	4170341	2	True				
ANR	4170488	Identifier	idx		4170341	0					
ANR	4170489	IncDec	++		4170341	1					
ANR	4170490	CompoundStatement		21:58:543:543	4170341	3					
ANR	4170491	ExpressionStatement	p = script -> class_table . arData + idx	691:2:21002:21038	4170341	0	True				
ANR	4170492	AssignmentExpression	p = script -> class_table . arData + idx		4170341	0		=			
ANR	4170493	Identifier	p		4170341	0					
ANR	4170494	AdditiveExpression	script -> class_table . arData + idx		4170341	1		+			
ANR	4170495	MemberAccess	script -> class_table . arData		4170341	0					
ANR	4170496	PtrMemberAccess	script -> class_table		4170341	0					
ANR	4170497	Identifier	script		4170341	0					
ANR	4170498	Identifier	class_table		4170341	1					
ANR	4170499	Identifier	arData		4170341	1					
ANR	4170500	Identifier	idx		4170341	1					
ANR	4170501	IfStatement	if ( Z_TYPE ( p -> val ) == IS_UNDEF )		4170341	1					
ANR	4170502	Condition	Z_TYPE ( p -> val ) == IS_UNDEF	692:6:21046:21071	4170341	0	True				
ANR	4170503	EqualityExpression	Z_TYPE ( p -> val ) == IS_UNDEF		4170341	0		==			
ANR	4170504	CallExpression	Z_TYPE ( p -> val )		4170341	0					
ANR	4170505	Callee	Z_TYPE		4170341	0					
ANR	4170506	Identifier	Z_TYPE		4170341	0					
ANR	4170507	ArgumentList	p -> val		4170341	1					
ANR	4170508	Argument	p -> val		4170341	0					
ANR	4170509	PtrMemberAccess	p -> val		4170341	0					
ANR	4170510	Identifier	p		4170341	0					
ANR	4170511	Identifier	val		4170341	1					
ANR	4170512	Identifier	IS_UNDEF		4170341	1					
ANR	4170513	ContinueStatement	continue ;	692:34:21074:21082	4170341	1	True				
ANR	4170514	ExpressionStatement	ce = ( zend_class_entry * ) Z_PTR ( p -> val )	693:2:21086:21123	4170341	2	True				
ANR	4170515	AssignmentExpression	ce = ( zend_class_entry * ) Z_PTR ( p -> val )		4170341	0		=			
ANR	4170516	Identifier	ce		4170341	0					
ANR	4170517	CastExpression	( zend_class_entry * ) Z_PTR ( p -> val )		4170341	1					
ANR	4170518	CastTarget	zend_class_entry *		4170341	0					
ANR	4170519	CallExpression	Z_PTR ( p -> val )		4170341	1					
ANR	4170520	Callee	Z_PTR		4170341	0					
ANR	4170521	Identifier	Z_PTR		4170341	0					
ANR	4170522	ArgumentList	p -> val		4170341	1					
ANR	4170523	Argument	p -> val		4170341	0					
ANR	4170524	PtrMemberAccess	p -> val		4170341	0					
ANR	4170525	Identifier	p		4170341	0					
ANR	4170526	Identifier	val		4170341	1					
ANR	4170527	ForStatement	for ( j = 0 ; j < ce -> function_table . nNumUsed ; j ++ )		4170341	3					
ANR	4170528	ForInit	j = 0 ;	694:7:21132:21137	4170341	0	True				
ANR	4170529	AssignmentExpression	j = 0		4170341	0		=			
ANR	4170530	Identifier	j		4170341	0					
ANR	4170531	PrimaryExpression	0		4170341	1					
ANR	4170532	Condition	j < ce -> function_table . nNumUsed	694:14:21139:21169	4170341	1	True				
ANR	4170533	RelationalExpression	j < ce -> function_table . nNumUsed		4170341	0		<			
ANR	4170534	Identifier	j		4170341	0					
ANR	4170535	MemberAccess	ce -> function_table . nNumUsed		4170341	1					
ANR	4170536	PtrMemberAccess	ce -> function_table		4170341	0					
ANR	4170537	Identifier	ce		4170341	0					
ANR	4170538	Identifier	function_table		4170341	1					
ANR	4170539	Identifier	nNumUsed		4170341	1					
ANR	4170540	PostIncDecOperationExpression	j ++	694:47:21172:21174	4170341	2	True				
ANR	4170541	Identifier	j		4170341	0					
ANR	4170542	IncDec	++		4170341	1					
ANR	4170543	CompoundStatement		25:52:722:722	4170341	3					
ANR	4170544	ExpressionStatement	q = ce -> function_table . arData + j	695:3:21182:21215	4170341	0	True				
ANR	4170545	AssignmentExpression	q = ce -> function_table . arData + j		4170341	0		=			
ANR	4170546	Identifier	q		4170341	0					
ANR	4170547	AdditiveExpression	ce -> function_table . arData + j		4170341	1		+			
ANR	4170548	MemberAccess	ce -> function_table . arData		4170341	0					
ANR	4170549	PtrMemberAccess	ce -> function_table		4170341	0					
ANR	4170550	Identifier	ce		4170341	0					
ANR	4170551	Identifier	function_table		4170341	1					
ANR	4170552	Identifier	arData		4170341	1					
ANR	4170553	Identifier	j		4170341	1					
ANR	4170554	IfStatement	if ( Z_TYPE ( q -> val ) == IS_UNDEF )		4170341	1					
ANR	4170555	Condition	Z_TYPE ( q -> val ) == IS_UNDEF	696:7:21224:21249	4170341	0	True				
ANR	4170556	EqualityExpression	Z_TYPE ( q -> val ) == IS_UNDEF		4170341	0		==			
ANR	4170557	CallExpression	Z_TYPE ( q -> val )		4170341	0					
ANR	4170558	Callee	Z_TYPE		4170341	0					
ANR	4170559	Identifier	Z_TYPE		4170341	0					
ANR	4170560	ArgumentList	q -> val		4170341	1					
ANR	4170561	Argument	q -> val		4170341	0					
ANR	4170562	PtrMemberAccess	q -> val		4170341	0					
ANR	4170563	Identifier	q		4170341	0					
ANR	4170564	Identifier	val		4170341	1					
ANR	4170565	Identifier	IS_UNDEF		4170341	1					
ANR	4170566	ContinueStatement	continue ;	696:35:21252:21260	4170341	1	True				
ANR	4170567	ExpressionStatement	op_array = ( zend_op_array * ) Z_PTR ( q -> val )	697:3:21265:21305	4170341	2	True				
ANR	4170568	AssignmentExpression	op_array = ( zend_op_array * ) Z_PTR ( q -> val )		4170341	0		=			
ANR	4170569	Identifier	op_array		4170341	0					
ANR	4170570	CastExpression	( zend_op_array * ) Z_PTR ( q -> val )		4170341	1					
ANR	4170571	CastTarget	zend_op_array *		4170341	0					
ANR	4170572	CallExpression	Z_PTR ( q -> val )		4170341	1					
ANR	4170573	Callee	Z_PTR		4170341	0					
ANR	4170574	Identifier	Z_PTR		4170341	0					
ANR	4170575	ArgumentList	q -> val		4170341	1					
ANR	4170576	Argument	q -> val		4170341	0					
ANR	4170577	PtrMemberAccess	q -> val		4170341	0					
ANR	4170578	Identifier	q		4170341	0					
ANR	4170579	Identifier	val		4170341	1					
ANR	4170580	IfStatement	if ( op_array -> scope == ce )		4170341	3					
ANR	4170581	Condition	op_array -> scope == ce	698:7:21314:21334	4170341	0	True				
ANR	4170582	EqualityExpression	op_array -> scope == ce		4170341	0		==			
ANR	4170583	PtrMemberAccess	op_array -> scope		4170341	0					
ANR	4170584	Identifier	op_array		4170341	0					
ANR	4170585	Identifier	scope		4170341	1					
ANR	4170586	Identifier	ce		4170341	1					
ANR	4170587	CompoundStatement		29:30:882:882	4170341	1					
ANR	4170588	ExpressionStatement	"zend_accel_optimize ( op_array , & ctx )"	699:4:21343:21378	4170341	0	True				
ANR	4170589	CallExpression	"zend_accel_optimize ( op_array , & ctx )"		4170341	0					
ANR	4170590	Callee	zend_accel_optimize		4170341	0					
ANR	4170591	Identifier	zend_accel_optimize		4170341	0					
ANR	4170592	ArgumentList	op_array		4170341	1					
ANR	4170593	Argument	op_array		4170341	0					
ANR	4170594	Identifier	op_array		4170341	0					
ANR	4170595	Argument	& ctx		4170341	1					
ANR	4170596	UnaryOperationExpression	& ctx		4170341	0					
ANR	4170597	UnaryOperator	&		4170341	0					
ANR	4170598	Identifier	ctx		4170341	1					
ANR	4170599	ElseStatement	else		4170341	0					
ANR	4170600	IfStatement	if ( op_array -> type == ZEND_USER_FUNCTION )		4170341	0					
ANR	4170601	Condition	op_array -> type == ZEND_USER_FUNCTION	700:14:21394:21429	4170341	0	True				
ANR	4170602	EqualityExpression	op_array -> type == ZEND_USER_FUNCTION		4170341	0		==			
ANR	4170603	PtrMemberAccess	op_array -> type		4170341	0					
ANR	4170604	Identifier	op_array		4170341	0					
ANR	4170605	Identifier	type		4170341	1					
ANR	4170606	Identifier	ZEND_USER_FUNCTION		4170341	1					
ANR	4170607	CompoundStatement		32:4:983:1011	4170341	1					
ANR	4170608	IdentifierDeclStatement	zend_op_array * orig_op_array ;	701:4:21438:21466	4170341	0	True				
ANR	4170609	IdentifierDecl	* orig_op_array		4170341	0					
ANR	4170610	IdentifierDeclType	zend_op_array *		4170341	0					
ANR	4170611	Identifier	orig_op_array		4170341	1					
ANR	4170612	IfStatement	"if ( ( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL )"		4170341	1					
ANR	4170613	Condition	"( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL"	702:8:21476:21561	4170341	0	True				
ANR	4170614	EqualityExpression	"( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL"		4170341	0		!=			
ANR	4170615	AssignmentExpression	"orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key )"		4170341	0		=			
ANR	4170616	Identifier	orig_op_array		4170341	0					
ANR	4170617	CallExpression	"zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key )"		4170341	1					
ANR	4170618	Callee	zend_hash_find_ptr		4170341	0					
ANR	4170619	Identifier	zend_hash_find_ptr		4170341	0					
ANR	4170620	ArgumentList	& op_array -> scope -> function_table		4170341	1					
ANR	4170621	Argument	& op_array -> scope -> function_table		4170341	0					
ANR	4170622	UnaryOperationExpression	& op_array -> scope -> function_table		4170341	0					
ANR	4170623	UnaryOperator	&		4170341	0					
ANR	4170624	PtrMemberAccess	op_array -> scope -> function_table		4170341	1					
ANR	4170625	PtrMemberAccess	op_array -> scope		4170341	0					
ANR	4170626	Identifier	op_array		4170341	0					
ANR	4170627	Identifier	scope		4170341	1					
ANR	4170628	Identifier	function_table		4170341	1					
ANR	4170629	Argument	q -> key		4170341	1					
ANR	4170630	PtrMemberAccess	q -> key		4170341	0					
ANR	4170631	Identifier	q		4170341	0					
ANR	4170632	Identifier	key		4170341	1					
ANR	4170633	Identifier	NULL		4170341	1					
ANR	4170634	CompoundStatement		34:5:1116:1158	4170341	1					
ANR	4170635	IdentifierDeclStatement	HashTable * ht = op_array -> static_variables ;	703:5:21571:21613	4170341	0	True				
ANR	4170636	IdentifierDecl	* ht = op_array -> static_variables		4170341	0					
ANR	4170637	IdentifierDeclType	HashTable *		4170341	0					
ANR	4170638	Identifier	ht		4170341	1					
ANR	4170639	AssignmentExpression	* ht = op_array -> static_variables		4170341	2		=			
ANR	4170640	Identifier	ht		4170341	0					
ANR	4170641	PtrMemberAccess	op_array -> static_variables		4170341	1					
ANR	4170642	Identifier	op_array		4170341	0					
ANR	4170643	Identifier	static_variables		4170341	1					
ANR	4170644	ExpressionStatement	* op_array = * orig_op_array	704:5:21620:21646	4170341	1	True				
ANR	4170645	AssignmentExpression	* op_array = * orig_op_array		4170341	0		=			
ANR	4170646	UnaryOperationExpression	* op_array		4170341	0					
ANR	4170647	UnaryOperator	*		4170341	0					
ANR	4170648	Identifier	op_array		4170341	1					
ANR	4170649	UnaryOperationExpression	* orig_op_array		4170341	1					
ANR	4170650	UnaryOperator	*		4170341	0					
ANR	4170651	Identifier	orig_op_array		4170341	1					
ANR	4170652	ExpressionStatement	op_array -> static_variables = ht	705:5:21653:21684	4170341	2	True				
ANR	4170653	AssignmentExpression	op_array -> static_variables = ht		4170341	0		=			
ANR	4170654	PtrMemberAccess	op_array -> static_variables		4170341	0					
ANR	4170655	Identifier	op_array		4170341	0					
ANR	4170656	Identifier	static_variables		4170341	1					
ANR	4170657	Identifier	ht		4170341	1					
ANR	4170658	IfStatement	if ( ZEND_OPTIMIZER_PASS_12 & OPTIMIZATION_LEVEL )		4170341	11					
ANR	4170659	Condition	ZEND_OPTIMIZER_PASS_12 & OPTIMIZATION_LEVEL	711:5:21710:21752	4170341	0	True				
ANR	4170660	BitAndExpression	ZEND_OPTIMIZER_PASS_12 & OPTIMIZATION_LEVEL		4170341	0		&			
ANR	4170661	Identifier	ZEND_OPTIMIZER_PASS_12		4170341	0					
ANR	4170662	Identifier	OPTIMIZATION_LEVEL		4170341	1					
ANR	4170663	CompoundStatement		42:50:1300:1300	4170341	1					
ANR	4170664	ExpressionStatement	"zend_accel_adjust_fcall_stack_size ( & script -> main_op_array , & ctx )"	712:2:21759:21823	4170341	0	True				
ANR	4170665	CallExpression	"zend_accel_adjust_fcall_stack_size ( & script -> main_op_array , & ctx )"		4170341	0					
ANR	4170666	Callee	zend_accel_adjust_fcall_stack_size		4170341	0					
ANR	4170667	Identifier	zend_accel_adjust_fcall_stack_size		4170341	0					
ANR	4170668	ArgumentList	& script -> main_op_array		4170341	1					
ANR	4170669	Argument	& script -> main_op_array		4170341	0					
ANR	4170670	UnaryOperationExpression	& script -> main_op_array		4170341	0					
ANR	4170671	UnaryOperator	&		4170341	0					
ANR	4170672	PtrMemberAccess	script -> main_op_array		4170341	1					
ANR	4170673	Identifier	script		4170341	0					
ANR	4170674	Identifier	main_op_array		4170341	1					
ANR	4170675	Argument	& ctx		4170341	1					
ANR	4170676	UnaryOperationExpression	& ctx		4170341	0					
ANR	4170677	UnaryOperator	&		4170341	0					
ANR	4170678	Identifier	ctx		4170341	1					
ANR	4170679	ForStatement	for ( idx = 0 ; idx < script -> function_table . nNumUsed ; idx ++ )		4170341	1					
ANR	4170680	ForInit	idx = 0 ;	714:7:21833:21840	4170341	0	True				
ANR	4170681	AssignmentExpression	idx = 0		4170341	0		=			
ANR	4170682	Identifier	idx		4170341	0					
ANR	4170683	PrimaryExpression	0		4170341	1					
ANR	4170684	Condition	idx < script -> function_table . nNumUsed	714:16:21842:21878	4170341	1	True				
ANR	4170685	RelationalExpression	idx < script -> function_table . nNumUsed		4170341	0		<			
ANR	4170686	Identifier	idx		4170341	0					
ANR	4170687	MemberAccess	script -> function_table . nNumUsed		4170341	1					
ANR	4170688	PtrMemberAccess	script -> function_table		4170341	0					
ANR	4170689	Identifier	script		4170341	0					
ANR	4170690	Identifier	function_table		4170341	1					
ANR	4170691	Identifier	nNumUsed		4170341	1					
ANR	4170692	PostIncDecOperationExpression	idx ++	714:55:21881:21885	4170341	2	True				
ANR	4170693	Identifier	idx		4170341	0					
ANR	4170694	IncDec	++		4170341	1					
ANR	4170695	CompoundStatement		45:62:1433:1433	4170341	3					
ANR	4170696	ExpressionStatement	p = script -> function_table . arData + idx	715:3:21893:21932	4170341	0	True				
ANR	4170697	AssignmentExpression	p = script -> function_table . arData + idx		4170341	0		=			
ANR	4170698	Identifier	p		4170341	0					
ANR	4170699	AdditiveExpression	script -> function_table . arData + idx		4170341	1		+			
ANR	4170700	MemberAccess	script -> function_table . arData		4170341	0					
ANR	4170701	PtrMemberAccess	script -> function_table		4170341	0					
ANR	4170702	Identifier	script		4170341	0					
ANR	4170703	Identifier	function_table		4170341	1					
ANR	4170704	Identifier	arData		4170341	1					
ANR	4170705	Identifier	idx		4170341	1					
ANR	4170706	IfStatement	if ( Z_TYPE ( p -> val ) == IS_UNDEF )		4170341	1					
ANR	4170707	Condition	Z_TYPE ( p -> val ) == IS_UNDEF	716:7:21941:21966	4170341	0	True				
ANR	4170708	EqualityExpression	Z_TYPE ( p -> val ) == IS_UNDEF		4170341	0		==			
ANR	4170709	CallExpression	Z_TYPE ( p -> val )		4170341	0					
ANR	4170710	Callee	Z_TYPE		4170341	0					
ANR	4170711	Identifier	Z_TYPE		4170341	0					
ANR	4170712	ArgumentList	p -> val		4170341	1					
ANR	4170713	Argument	p -> val		4170341	0					
ANR	4170714	PtrMemberAccess	p -> val		4170341	0					
ANR	4170715	Identifier	p		4170341	0					
ANR	4170716	Identifier	val		4170341	1					
ANR	4170717	Identifier	IS_UNDEF		4170341	1					
ANR	4170718	ContinueStatement	continue ;	716:35:21969:21977	4170341	1	True				
ANR	4170719	ExpressionStatement	op_array = ( zend_op_array * ) Z_PTR ( p -> val )	717:3:21982:22022	4170341	2	True				
ANR	4170720	AssignmentExpression	op_array = ( zend_op_array * ) Z_PTR ( p -> val )		4170341	0		=			
ANR	4170721	Identifier	op_array		4170341	0					
ANR	4170722	CastExpression	( zend_op_array * ) Z_PTR ( p -> val )		4170341	1					
ANR	4170723	CastTarget	zend_op_array *		4170341	0					
ANR	4170724	CallExpression	Z_PTR ( p -> val )		4170341	1					
ANR	4170725	Callee	Z_PTR		4170341	0					
ANR	4170726	Identifier	Z_PTR		4170341	0					
ANR	4170727	ArgumentList	p -> val		4170341	1					
ANR	4170728	Argument	p -> val		4170341	0					
ANR	4170729	PtrMemberAccess	p -> val		4170341	0					
ANR	4170730	Identifier	p		4170341	0					
ANR	4170731	Identifier	val		4170341	1					
ANR	4170732	ExpressionStatement	"zend_accel_adjust_fcall_stack_size ( op_array , & ctx )"	718:3:22027:22077	4170341	3	True				
ANR	4170733	CallExpression	"zend_accel_adjust_fcall_stack_size ( op_array , & ctx )"		4170341	0					
ANR	4170734	Callee	zend_accel_adjust_fcall_stack_size		4170341	0					
ANR	4170735	Identifier	zend_accel_adjust_fcall_stack_size		4170341	0					
ANR	4170736	ArgumentList	op_array		4170341	1					
ANR	4170737	Argument	op_array		4170341	0					
ANR	4170738	Identifier	op_array		4170341	0					
ANR	4170739	Argument	& ctx		4170341	1					
ANR	4170740	UnaryOperationExpression	& ctx		4170341	0					
ANR	4170741	UnaryOperator	&		4170341	0					
ANR	4170742	Identifier	ctx		4170341	1					
ANR	4170743	ForStatement	for ( idx = 0 ; idx < script -> class_table . nNumUsed ; idx ++ )		4170341	2					
ANR	4170744	ForInit	idx = 0 ;	721:7:22091:22098	4170341	0	True				
ANR	4170745	AssignmentExpression	idx = 0		4170341	0		=			
ANR	4170746	Identifier	idx		4170341	0					
ANR	4170747	PrimaryExpression	0		4170341	1					
ANR	4170748	Condition	idx < script -> class_table . nNumUsed	721:16:22100:22133	4170341	1	True				
ANR	4170749	RelationalExpression	idx < script -> class_table . nNumUsed		4170341	0		<			
ANR	4170750	Identifier	idx		4170341	0					
ANR	4170751	MemberAccess	script -> class_table . nNumUsed		4170341	1					
ANR	4170752	PtrMemberAccess	script -> class_table		4170341	0					
ANR	4170753	Identifier	script		4170341	0					
ANR	4170754	Identifier	class_table		4170341	1					
ANR	4170755	Identifier	nNumUsed		4170341	1					
ANR	4170756	PostIncDecOperationExpression	idx ++	721:52:22136:22140	4170341	2	True				
ANR	4170757	Identifier	idx		4170341	0					
ANR	4170758	IncDec	++		4170341	1					
ANR	4170759	CompoundStatement		52:59:1688:1688	4170341	3					
ANR	4170760	ExpressionStatement	p = script -> class_table . arData + idx	722:3:22148:22184	4170341	0	True				
ANR	4170761	AssignmentExpression	p = script -> class_table . arData + idx		4170341	0		=			
ANR	4170762	Identifier	p		4170341	0					
ANR	4170763	AdditiveExpression	script -> class_table . arData + idx		4170341	1		+			
ANR	4170764	MemberAccess	script -> class_table . arData		4170341	0					
ANR	4170765	PtrMemberAccess	script -> class_table		4170341	0					
ANR	4170766	Identifier	script		4170341	0					
ANR	4170767	Identifier	class_table		4170341	1					
ANR	4170768	Identifier	arData		4170341	1					
ANR	4170769	Identifier	idx		4170341	1					
ANR	4170770	IfStatement	if ( Z_TYPE ( p -> val ) == IS_UNDEF )		4170341	1					
ANR	4170771	Condition	Z_TYPE ( p -> val ) == IS_UNDEF	723:7:22193:22218	4170341	0	True				
ANR	4170772	EqualityExpression	Z_TYPE ( p -> val ) == IS_UNDEF		4170341	0		==			
ANR	4170773	CallExpression	Z_TYPE ( p -> val )		4170341	0					
ANR	4170774	Callee	Z_TYPE		4170341	0					
ANR	4170775	Identifier	Z_TYPE		4170341	0					
ANR	4170776	ArgumentList	p -> val		4170341	1					
ANR	4170777	Argument	p -> val		4170341	0					
ANR	4170778	PtrMemberAccess	p -> val		4170341	0					
ANR	4170779	Identifier	p		4170341	0					
ANR	4170780	Identifier	val		4170341	1					
ANR	4170781	Identifier	IS_UNDEF		4170341	1					
ANR	4170782	ContinueStatement	continue ;	723:35:22221:22229	4170341	1	True				
ANR	4170783	ExpressionStatement	ce = ( zend_class_entry * ) Z_PTR ( p -> val )	724:3:22234:22271	4170341	2	True				
ANR	4170784	AssignmentExpression	ce = ( zend_class_entry * ) Z_PTR ( p -> val )		4170341	0		=			
ANR	4170785	Identifier	ce		4170341	0					
ANR	4170786	CastExpression	( zend_class_entry * ) Z_PTR ( p -> val )		4170341	1					
ANR	4170787	CastTarget	zend_class_entry *		4170341	0					
ANR	4170788	CallExpression	Z_PTR ( p -> val )		4170341	1					
ANR	4170789	Callee	Z_PTR		4170341	0					
ANR	4170790	Identifier	Z_PTR		4170341	0					
ANR	4170791	ArgumentList	p -> val		4170341	1					
ANR	4170792	Argument	p -> val		4170341	0					
ANR	4170793	PtrMemberAccess	p -> val		4170341	0					
ANR	4170794	Identifier	p		4170341	0					
ANR	4170795	Identifier	val		4170341	1					
ANR	4170796	ForStatement	for ( j = 0 ; j < ce -> function_table . nNumUsed ; j ++ )		4170341	3					
ANR	4170797	ForInit	j = 0 ;	725:8:22281:22286	4170341	0	True				
ANR	4170798	AssignmentExpression	j = 0		4170341	0		=			
ANR	4170799	Identifier	j		4170341	0					
ANR	4170800	PrimaryExpression	0		4170341	1					
ANR	4170801	Condition	j < ce -> function_table . nNumUsed	725:15:22288:22318	4170341	1	True				
ANR	4170802	RelationalExpression	j < ce -> function_table . nNumUsed		4170341	0		<			
ANR	4170803	Identifier	j		4170341	0					
ANR	4170804	MemberAccess	ce -> function_table . nNumUsed		4170341	1					
ANR	4170805	PtrMemberAccess	ce -> function_table		4170341	0					
ANR	4170806	Identifier	ce		4170341	0					
ANR	4170807	Identifier	function_table		4170341	1					
ANR	4170808	Identifier	nNumUsed		4170341	1					
ANR	4170809	PostIncDecOperationExpression	j ++	725:48:22321:22323	4170341	2	True				
ANR	4170810	Identifier	j		4170341	0					
ANR	4170811	IncDec	++		4170341	1					
ANR	4170812	CompoundStatement		56:53:1871:1871	4170341	3					
ANR	4170813	ExpressionStatement	q = ce -> function_table . arData + j	726:4:22332:22365	4170341	0	True				
ANR	4170814	AssignmentExpression	q = ce -> function_table . arData + j		4170341	0		=			
ANR	4170815	Identifier	q		4170341	0					
ANR	4170816	AdditiveExpression	ce -> function_table . arData + j		4170341	1		+			
ANR	4170817	MemberAccess	ce -> function_table . arData		4170341	0					
ANR	4170818	PtrMemberAccess	ce -> function_table		4170341	0					
ANR	4170819	Identifier	ce		4170341	0					
ANR	4170820	Identifier	function_table		4170341	1					
ANR	4170821	Identifier	arData		4170341	1					
ANR	4170822	Identifier	j		4170341	1					
ANR	4170823	IfStatement	if ( Z_TYPE ( q -> val ) == IS_UNDEF )		4170341	1					
ANR	4170824	Condition	Z_TYPE ( q -> val ) == IS_UNDEF	727:8:22375:22400	4170341	0	True				
ANR	4170825	EqualityExpression	Z_TYPE ( q -> val ) == IS_UNDEF		4170341	0		==			
ANR	4170826	CallExpression	Z_TYPE ( q -> val )		4170341	0					
ANR	4170827	Callee	Z_TYPE		4170341	0					
ANR	4170828	Identifier	Z_TYPE		4170341	0					
ANR	4170829	ArgumentList	q -> val		4170341	1					
ANR	4170830	Argument	q -> val		4170341	0					
ANR	4170831	PtrMemberAccess	q -> val		4170341	0					
ANR	4170832	Identifier	q		4170341	0					
ANR	4170833	Identifier	val		4170341	1					
ANR	4170834	Identifier	IS_UNDEF		4170341	1					
ANR	4170835	ContinueStatement	continue ;	727:36:22403:22411	4170341	1	True				
ANR	4170836	ExpressionStatement	op_array = ( zend_op_array * ) Z_PTR ( q -> val )	728:4:22417:22457	4170341	2	True				
ANR	4170837	AssignmentExpression	op_array = ( zend_op_array * ) Z_PTR ( q -> val )		4170341	0		=			
ANR	4170838	Identifier	op_array		4170341	0					
ANR	4170839	CastExpression	( zend_op_array * ) Z_PTR ( q -> val )		4170341	1					
ANR	4170840	CastTarget	zend_op_array *		4170341	0					
ANR	4170841	CallExpression	Z_PTR ( q -> val )		4170341	1					
ANR	4170842	Callee	Z_PTR		4170341	0					
ANR	4170843	Identifier	Z_PTR		4170341	0					
ANR	4170844	ArgumentList	q -> val		4170341	1					
ANR	4170845	Argument	q -> val		4170341	0					
ANR	4170846	PtrMemberAccess	q -> val		4170341	0					
ANR	4170847	Identifier	q		4170341	0					
ANR	4170848	Identifier	val		4170341	1					
ANR	4170849	IfStatement	if ( op_array -> scope == ce )		4170341	3					
ANR	4170850	Condition	op_array -> scope == ce	729:8:22467:22487	4170341	0	True				
ANR	4170851	EqualityExpression	op_array -> scope == ce		4170341	0		==			
ANR	4170852	PtrMemberAccess	op_array -> scope		4170341	0					
ANR	4170853	Identifier	op_array		4170341	0					
ANR	4170854	Identifier	scope		4170341	1					
ANR	4170855	Identifier	ce		4170341	1					
ANR	4170856	CompoundStatement		60:31:2035:2035	4170341	1					
ANR	4170857	ExpressionStatement	"zend_accel_adjust_fcall_stack_size ( op_array , & ctx )"	730:5:22497:22547	4170341	0	True				
ANR	4170858	CallExpression	"zend_accel_adjust_fcall_stack_size ( op_array , & ctx )"		4170341	0					
ANR	4170859	Callee	zend_accel_adjust_fcall_stack_size		4170341	0					
ANR	4170860	Identifier	zend_accel_adjust_fcall_stack_size		4170341	0					
ANR	4170861	ArgumentList	op_array		4170341	1					
ANR	4170862	Argument	op_array		4170341	0					
ANR	4170863	Identifier	op_array		4170341	0					
ANR	4170864	Argument	& ctx		4170341	1					
ANR	4170865	UnaryOperationExpression	& ctx		4170341	0					
ANR	4170866	UnaryOperator	&		4170341	0					
ANR	4170867	Identifier	ctx		4170341	1					
ANR	4170868	ElseStatement	else		4170341	0					
ANR	4170869	IfStatement	if ( op_array -> type == ZEND_USER_FUNCTION )		4170341	0					
ANR	4170870	Condition	op_array -> type == ZEND_USER_FUNCTION	731:15:22564:22599	4170341	0	True				
ANR	4170871	EqualityExpression	op_array -> type == ZEND_USER_FUNCTION		4170341	0		==			
ANR	4170872	PtrMemberAccess	op_array -> type		4170341	0					
ANR	4170873	Identifier	op_array		4170341	0					
ANR	4170874	Identifier	type		4170341	1					
ANR	4170875	Identifier	ZEND_USER_FUNCTION		4170341	1					
ANR	4170876	CompoundStatement		63:5:2154:2182	4170341	1					
ANR	4170877	IdentifierDeclStatement	zend_op_array * orig_op_array ;	732:5:22609:22637	4170341	0	True				
ANR	4170878	IdentifierDecl	* orig_op_array		4170341	0					
ANR	4170879	IdentifierDeclType	zend_op_array *		4170341	0					
ANR	4170880	Identifier	orig_op_array		4170341	1					
ANR	4170881	IfStatement	"if ( ( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL )"		4170341	1					
ANR	4170882	Condition	"( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL"	733:9:22648:22733	4170341	0	True				
ANR	4170883	EqualityExpression	"( orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key ) ) != NULL"		4170341	0		!=			
ANR	4170884	AssignmentExpression	"orig_op_array = zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key )"		4170341	0		=			
ANR	4170885	Identifier	orig_op_array		4170341	0					
ANR	4170886	CallExpression	"zend_hash_find_ptr ( & op_array -> scope -> function_table , q -> key )"		4170341	1					
ANR	4170887	Callee	zend_hash_find_ptr		4170341	0					
ANR	4170888	Identifier	zend_hash_find_ptr		4170341	0					
ANR	4170889	ArgumentList	& op_array -> scope -> function_table		4170341	1					
ANR	4170890	Argument	& op_array -> scope -> function_table		4170341	0					
ANR	4170891	UnaryOperationExpression	& op_array -> scope -> function_table		4170341	0					
ANR	4170892	UnaryOperator	&		4170341	0					
ANR	4170893	PtrMemberAccess	op_array -> scope -> function_table		4170341	1					
ANR	4170894	PtrMemberAccess	op_array -> scope		4170341	0					
ANR	4170895	Identifier	op_array		4170341	0					
ANR	4170896	Identifier	scope		4170341	1					
ANR	4170897	Identifier	function_table		4170341	1					
ANR	4170898	Argument	q -> key		4170341	1					
ANR	4170899	PtrMemberAccess	q -> key		4170341	0					
ANR	4170900	Identifier	q		4170341	0					
ANR	4170901	Identifier	key		4170341	1					
ANR	4170902	Identifier	NULL		4170341	1					
ANR	4170903	CompoundStatement		65:6:2289:2331	4170341	1					
ANR	4170904	IdentifierDeclStatement	HashTable * ht = op_array -> static_variables ;	734:6:22744:22786	4170341	0	True				
ANR	4170905	IdentifierDecl	* ht = op_array -> static_variables		4170341	0					
ANR	4170906	IdentifierDeclType	HashTable *		4170341	0					
ANR	4170907	Identifier	ht		4170341	1					
ANR	4170908	AssignmentExpression	* ht = op_array -> static_variables		4170341	2		=			
ANR	4170909	Identifier	ht		4170341	0					
ANR	4170910	PtrMemberAccess	op_array -> static_variables		4170341	1					
ANR	4170911	Identifier	op_array		4170341	0					
ANR	4170912	Identifier	static_variables		4170341	1					
ANR	4170913	ExpressionStatement	* op_array = * orig_op_array	735:6:22794:22820	4170341	1	True				
ANR	4170914	AssignmentExpression	* op_array = * orig_op_array		4170341	0		=			
ANR	4170915	UnaryOperationExpression	* op_array		4170341	0					
ANR	4170916	UnaryOperator	*		4170341	0					
ANR	4170917	Identifier	op_array		4170341	1					
ANR	4170918	UnaryOperationExpression	* orig_op_array		4170341	1					
ANR	4170919	UnaryOperator	*		4170341	0					
ANR	4170920	Identifier	orig_op_array		4170341	1					
ANR	4170921	ExpressionStatement	op_array -> static_variables = ht	736:6:22828:22859	4170341	2	True				
ANR	4170922	AssignmentExpression	op_array -> static_variables = ht		4170341	0		=			
ANR	4170923	PtrMemberAccess	op_array -> static_variables		4170341	0					
ANR	4170924	Identifier	op_array		4170341	0					
ANR	4170925	Identifier	static_variables		4170341	1					
ANR	4170926	Identifier	ht		4170341	1					
ANR	4170927	IfStatement	if ( ctx . constants )		4170341	12					
ANR	4170928	Condition	ctx . constants	743:5:22892:22904	4170341	0	True				
ANR	4170929	MemberAccess	ctx . constants		4170341	0					
ANR	4170930	Identifier	ctx		4170341	0					
ANR	4170931	Identifier	constants		4170341	1					
ANR	4170932	CompoundStatement		74:20:2452:2452	4170341	1					
ANR	4170933	ExpressionStatement	zend_hash_destroy ( ctx . constants )	744:2:22911:22943	4170341	0	True				
ANR	4170934	CallExpression	zend_hash_destroy ( ctx . constants )		4170341	0					
ANR	4170935	Callee	zend_hash_destroy		4170341	0					
ANR	4170936	Identifier	zend_hash_destroy		4170341	0					
ANR	4170937	ArgumentList	ctx . constants		4170341	1					
ANR	4170938	Argument	ctx . constants		4170341	0					
ANR	4170939	MemberAccess	ctx . constants		4170341	0					
ANR	4170940	Identifier	ctx		4170341	0					
ANR	4170941	Identifier	constants		4170341	1					
ANR	4170942	ExpressionStatement	zend_arena_destroy ( ctx . arena )	746:1:22949:22978	4170341	13	True				
ANR	4170943	CallExpression	zend_arena_destroy ( ctx . arena )		4170341	0					
ANR	4170944	Callee	zend_arena_destroy		4170341	0					
ANR	4170945	Identifier	zend_arena_destroy		4170341	0					
ANR	4170946	ArgumentList	ctx . arena		4170341	1					
ANR	4170947	Argument	ctx . arena		4170341	0					
ANR	4170948	MemberAccess	ctx . arena		4170341	0					
ANR	4170949	Identifier	ctx		4170341	0					
ANR	4170950	Identifier	arena		4170341	1					
ANR	4170951	ReturnStatement	return 1 ;	748:1:22982:22990	4170341	14	True				
ANR	4170952	PrimaryExpression	1		4170341	0					
ANR	4170953	ReturnType	int		4170341	1					
ANR	4170954	Identifier	zend_accel_script_optimize		4170341	2					
ANR	4170955	ParameterList	zend_persistent_script * script		4170341	3					
ANR	4170956	Parameter	zend_persistent_script * script	669:31:20422:20451	4170341	0	True				
ANR	4170957	ParameterType	zend_persistent_script *		4170341	0					
ANR	4170958	Identifier	script		4170341	1					
ANR	4170959	CFGEntryNode	ENTRY		4170341		True				
ANR	4170960	CFGExitNode	EXIT		4170341		True				
ANR	4170961	Symbol	ZEND_OPTIMIZER_PASS_12		4170341						
ANR	4170962	Symbol	script -> function_table		4170341						
ANR	4170963	Symbol	script -> class_table . nNumUsed		4170341						
ANR	4170964	Symbol	Z_TYPE		4170341						
ANR	4170965	Symbol	Z_PTR		4170341						
ANR	4170966	Symbol	& ctx		4170341						
ANR	4170967	Symbol	* ce		4170341						
ANR	4170968	Symbol	ht		4170341						
ANR	4170969	Symbol	script -> function_table . arData		4170341						
ANR	4170970	Symbol	q -> key		4170341						
ANR	4170971	Symbol	op_array -> type		4170341						
ANR	4170972	Symbol	& script -> main_op_array		4170341						
ANR	4170973	Symbol	ce -> function_table . nNumUsed		4170341						
ANR	4170974	Symbol	ZEND_USER_FUNCTION		4170341						
ANR	4170975	Symbol	orig_op_array		4170341						
ANR	4170976	Symbol	script -> function_table . nNumUsed		4170341						
ANR	4170977	Symbol	OPTIMIZATION_LEVEL		4170341						
ANR	4170978	Symbol	op_array -> static_variables		4170341						
ANR	4170979	Symbol	zend_hash_find_ptr		4170341						
ANR	4170980	Symbol	IS_UNDEF		4170341						
ANR	4170981	Symbol	* script		4170341						
ANR	4170982	Symbol	script -> class_table . arData		4170341						
ANR	4170983	Symbol	ce		4170341						
ANR	4170984	Symbol	NULL		4170341						
ANR	4170985	Symbol	ctx . arena		4170341						
ANR	4170986	Symbol	ctx . script		4170341						
ANR	4170987	Symbol	ctx		4170341						
ANR	4170988	Symbol	zend_arena_create		4170341						
ANR	4170989	Symbol	& op_array -> scope -> function_table		4170341						
ANR	4170990	Symbol	j		4170341						
ANR	4170991	Symbol	* orig_op_array		4170341						
ANR	4170992	Symbol	p -> val		4170341						
ANR	4170993	Symbol	script -> class_table		4170341						
ANR	4170994	Symbol	script		4170341						
ANR	4170995	Symbol	op_array -> scope		4170341						
ANR	4170996	Symbol	* op_array		4170341						
ANR	4170997	Symbol	p		4170341						
ANR	4170998	Symbol	q		4170341						
ANR	4170999	Symbol	q -> val		4170341						
ANR	4171000	Symbol	ce -> function_table . arData		4170341						
ANR	4171001	Symbol	ctx . constants		4170341						
ANR	4171002	Symbol	* p		4170341						
ANR	4171003	Symbol	ce -> function_table		4170341						
ANR	4171004	Symbol	* q		4170341						
ANR	4171005	Symbol	idx		4170341						
ANR	4171006	Symbol	op_array		4170341						
