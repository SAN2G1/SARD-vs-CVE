command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3217265	File	data/converged/CVE-2015-8617_php-src/optimize_func_calls.c								
ANR	3217266	ClassDef	_optimizer_call_info	36:8:1642:1739							
ANR	3217267	DeclStmt									
ANR	3217268	Decl							zend_function	zend_function *	func
ANR	3217269	DeclStmt									
ANR	3217270	Decl							zend_op	zend_op *	opline
ANR	3217271	DeclStmt									
ANR	3217272	Decl							_optimizer_call_info	_optimizer_call_info	optimizer_call_info
ANR	3217273	Function	optimize_func_calls	41:0:1742:6149							
ANR	3217274	FunctionDef	"optimize_func_calls (zend_op_array * op_array , zend_optimizer_ctx * ctx)"		3217273	0					
ANR	3217275	CompoundStatement		42:0:1817:6149	3217273	0					
ANR	3217276	IdentifierDeclStatement	zend_op * opline = op_array -> opcodes ;	43:1:1820:1855	3217273	0	True				
ANR	3217277	IdentifierDecl	* opline = op_array -> opcodes		3217273	0					
ANR	3217278	IdentifierDeclType	zend_op *		3217273	0					
ANR	3217279	Identifier	opline		3217273	1					
ANR	3217280	AssignmentExpression	* opline = op_array -> opcodes		3217273	2		=			
ANR	3217281	Identifier	opline		3217273	0					
ANR	3217282	PtrMemberAccess	op_array -> opcodes		3217273	1					
ANR	3217283	Identifier	op_array		3217273	0					
ANR	3217284	Identifier	opcodes		3217273	1					
ANR	3217285	IdentifierDeclStatement	zend_op * end = opline + op_array -> last ;	44:1:1858:1896	3217273	1	True				
ANR	3217286	IdentifierDecl	* end = opline + op_array -> last		3217273	0					
ANR	3217287	IdentifierDeclType	zend_op *		3217273	0					
ANR	3217288	Identifier	end		3217273	1					
ANR	3217289	AssignmentExpression	* end = opline + op_array -> last		3217273	2		=			
ANR	3217290	Identifier	end		3217273	0					
ANR	3217291	AdditiveExpression	opline + op_array -> last		3217273	1		+			
ANR	3217292	Identifier	opline		3217273	0					
ANR	3217293	PtrMemberAccess	op_array -> last		3217273	1					
ANR	3217294	Identifier	op_array		3217273	0					
ANR	3217295	Identifier	last		3217273	1					
ANR	3217296	IdentifierDeclStatement	int call = 0 ;	45:1:1899:1911	3217273	2	True				
ANR	3217297	IdentifierDecl	call = 0		3217273	0					
ANR	3217298	IdentifierDeclType	int		3217273	0					
ANR	3217299	Identifier	call		3217273	1					
ANR	3217300	AssignmentExpression	call = 0		3217273	2		=			
ANR	3217301	Identifier	call		3217273	0					
ANR	3217302	PrimaryExpression	0		3217273	1					
ANR	3217303	IdentifierDeclStatement	void * checkpoint ;	46:1:1914:1930	3217273	3	True				
ANR	3217304	IdentifierDecl	* checkpoint		3217273	0					
ANR	3217305	IdentifierDeclType	void *		3217273	0					
ANR	3217306	Identifier	checkpoint		3217273	1					
ANR	3217307	IdentifierDeclStatement	optimizer_call_info * call_stack ;	47:1:1933:1964	3217273	4	True				
ANR	3217308	IdentifierDecl	* call_stack		3217273	0					
ANR	3217309	IdentifierDeclType	optimizer_call_info *		3217273	0					
ANR	3217310	Identifier	call_stack		3217273	1					
ANR	3217311	IfStatement	if ( op_array -> last < 2 )		3217273	5					
ANR	3217312	Condition	op_array -> last < 2	49:5:1972:1989	3217273	0	True				
ANR	3217313	RelationalExpression	op_array -> last < 2		3217273	0		<			
ANR	3217314	PtrMemberAccess	op_array -> last		3217273	0					
ANR	3217315	Identifier	op_array		3217273	0					
ANR	3217316	Identifier	last		3217273	1					
ANR	3217317	PrimaryExpression	2		3217273	1					
ANR	3217318	CompoundStatement		8:25:174:174	3217273	1					
ANR	3217319	ReturnStatement	return ;	50:2:1996:2002	3217273	0	True				
ANR	3217320	ExpressionStatement	checkpoint = zend_arena_checkpoint ( ctx -> arena )	53:1:2009:2055	3217273	6	True				
ANR	3217321	AssignmentExpression	checkpoint = zend_arena_checkpoint ( ctx -> arena )		3217273	0		=			
ANR	3217322	Identifier	checkpoint		3217273	0					
ANR	3217323	CallExpression	zend_arena_checkpoint ( ctx -> arena )		3217273	1					
ANR	3217324	Callee	zend_arena_checkpoint		3217273	0					
ANR	3217325	Identifier	zend_arena_checkpoint		3217273	0					
ANR	3217326	ArgumentList	ctx -> arena		3217273	1					
ANR	3217327	Argument	ctx -> arena		3217273	0					
ANR	3217328	PtrMemberAccess	ctx -> arena		3217273	0					
ANR	3217329	Identifier	ctx		3217273	0					
ANR	3217330	Identifier	arena		3217273	1					
ANR	3217331	ExpressionStatement	"call_stack = zend_arena_calloc ( & ctx -> arena , op_array -> last / 2 , sizeof ( optimizer_call_info ) )"	54:1:2058:2150	3217273	7	True				
ANR	3217332	AssignmentExpression	"call_stack = zend_arena_calloc ( & ctx -> arena , op_array -> last / 2 , sizeof ( optimizer_call_info ) )"		3217273	0		=			
ANR	3217333	Identifier	call_stack		3217273	0					
ANR	3217334	CallExpression	"zend_arena_calloc ( & ctx -> arena , op_array -> last / 2 , sizeof ( optimizer_call_info ) )"		3217273	1					
ANR	3217335	Callee	zend_arena_calloc		3217273	0					
ANR	3217336	Identifier	zend_arena_calloc		3217273	0					
ANR	3217337	ArgumentList	& ctx -> arena		3217273	1					
ANR	3217338	Argument	& ctx -> arena		3217273	0					
ANR	3217339	UnaryOperationExpression	& ctx -> arena		3217273	0					
ANR	3217340	UnaryOperator	&		3217273	0					
ANR	3217341	PtrMemberAccess	ctx -> arena		3217273	1					
ANR	3217342	Identifier	ctx		3217273	0					
ANR	3217343	Identifier	arena		3217273	1					
ANR	3217344	Argument	op_array -> last / 2		3217273	1					
ANR	3217345	MultiplicativeExpression	op_array -> last / 2		3217273	0		/			
ANR	3217346	PtrMemberAccess	op_array -> last		3217273	0					
ANR	3217347	Identifier	op_array		3217273	0					
ANR	3217348	Identifier	last		3217273	1					
ANR	3217349	PrimaryExpression	2		3217273	1					
ANR	3217350	Argument	sizeof ( optimizer_call_info )		3217273	2					
ANR	3217351	SizeofExpression	sizeof ( optimizer_call_info )		3217273	0					
ANR	3217352	Sizeof	sizeof		3217273	0					
ANR	3217353	SizeofOperand	optimizer_call_info		3217273	1					
ANR	3217354	WhileStatement	while ( opline < end )		3217273	8					
ANR	3217355	Condition	opline < end	55:8:2160:2171	3217273	0	True				
ANR	3217356	RelationalExpression	opline < end		3217273	0		<			
ANR	3217357	Identifier	opline		3217273	0					
ANR	3217358	Identifier	end		3217273	1					
ANR	3217359	CompoundStatement		14:22:356:356	3217273	1					
ANR	3217360	SwitchStatement	switch ( opline -> opcode )		3217273	0					
ANR	3217361	Condition	opline -> opcode	56:10:2186:2199	3217273	0	True				
ANR	3217362	PtrMemberAccess	opline -> opcode		3217273	0					
ANR	3217363	Identifier	opline		3217273	0					
ANR	3217364	Identifier	opcode		3217273	1					
ANR	3217365	CompoundStatement		15:26:384:384	3217273	1					
ANR	3217366	Label	case ZEND_INIT_FCALL_BY_NAME :	57:3:2207:2235	3217273	0	True				
ANR	3217367	Identifier	ZEND_INIT_FCALL_BY_NAME		3217273	0					
ANR	3217368	Label	case ZEND_INIT_NS_FCALL_BY_NAME :	58:3:2240:2271	3217273	1	True				
ANR	3217369	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		3217273	0					
ANR	3217370	IfStatement	if ( ZEND_OP2_IS_CONST_STRING ( opline ) )		3217273	2					
ANR	3217371	Condition	ZEND_OP2_IS_CONST_STRING ( opline )	59:8:2281:2312	3217273	0	True				
ANR	3217372	CallExpression	ZEND_OP2_IS_CONST_STRING ( opline )		3217273	0					
ANR	3217373	Callee	ZEND_OP2_IS_CONST_STRING		3217273	0					
ANR	3217374	Identifier	ZEND_OP2_IS_CONST_STRING		3217273	0					
ANR	3217375	ArgumentList	opline		3217273	1					
ANR	3217376	Argument	opline		3217273	0					
ANR	3217377	Identifier	opline		3217273	0					
ANR	3217378	CompoundStatement		20:5:530:597	3217273	1					
ANR	3217379	IdentifierDeclStatement	zend_function * func ;	60:5:2322:2341	3217273	0	True				
ANR	3217380	IdentifierDecl	* func		3217273	0					
ANR	3217381	IdentifierDeclType	zend_function *		3217273	0					
ANR	3217382	Identifier	func		3217273	1					
ANR	3217383	IdentifierDeclStatement	zval * function_name = & op_array -> literals [ opline -> op2 . constant + 1 ] ;	61:5:2348:2415	3217273	1	True				
ANR	3217384	IdentifierDecl	* function_name = & op_array -> literals [ opline -> op2 . constant + 1 ]		3217273	0					
ANR	3217385	IdentifierDeclType	zval *		3217273	0					
ANR	3217386	Identifier	function_name		3217273	1					
ANR	3217387	AssignmentExpression	* function_name = & op_array -> literals [ opline -> op2 . constant + 1 ]		3217273	2		=			
ANR	3217388	Identifier	function_name		3217273	0					
ANR	3217389	UnaryOperationExpression	& op_array -> literals [ opline -> op2 . constant + 1 ]		3217273	1					
ANR	3217390	UnaryOperator	&		3217273	0					
ANR	3217391	ArrayIndexing	op_array -> literals [ opline -> op2 . constant + 1 ]		3217273	1					
ANR	3217392	PtrMemberAccess	op_array -> literals		3217273	0					
ANR	3217393	Identifier	op_array		3217273	0					
ANR	3217394	Identifier	literals		3217273	1					
ANR	3217395	AdditiveExpression	opline -> op2 . constant + 1		3217273	1		+			
ANR	3217396	MemberAccess	opline -> op2 . constant		3217273	0					
ANR	3217397	PtrMemberAccess	opline -> op2		3217273	0					
ANR	3217398	Identifier	opline		3217273	0					
ANR	3217399	Identifier	op2		3217273	1					
ANR	3217400	Identifier	constant		3217273	1					
ANR	3217401	PrimaryExpression	1		3217273	1					
ANR	3217402	IfStatement	"if ( ( func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) ) ) != NULL )"		3217273	2					
ANR	3217403	Condition	"( func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) ) ) != NULL"	62:9:2426:2521	3217273	0	True				
ANR	3217404	EqualityExpression	"( func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) ) ) != NULL"		3217273	0		!=			
ANR	3217405	AssignmentExpression	"func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) )"		3217273	0		=			
ANR	3217406	Identifier	func		3217273	0					
ANR	3217407	CallExpression	"zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) )"		3217273	1					
ANR	3217408	Callee	zend_hash_find_ptr		3217273	0					
ANR	3217409	Identifier	zend_hash_find_ptr		3217273	0					
ANR	3217410	ArgumentList	& ctx -> script -> function_table		3217273	1					
ANR	3217411	Argument	& ctx -> script -> function_table		3217273	0					
ANR	3217412	UnaryOperationExpression	& ctx -> script -> function_table		3217273	0					
ANR	3217413	UnaryOperator	&		3217273	0					
ANR	3217414	PtrMemberAccess	ctx -> script -> function_table		3217273	1					
ANR	3217415	PtrMemberAccess	ctx -> script		3217273	0					
ANR	3217416	Identifier	ctx		3217273	0					
ANR	3217417	Identifier	script		3217273	1					
ANR	3217418	Identifier	function_table		3217273	1					
ANR	3217419	Argument	Z_STR_P ( function_name )		3217273	1					
ANR	3217420	CallExpression	Z_STR_P ( function_name )		3217273	0					
ANR	3217421	Callee	Z_STR_P		3217273	0					
ANR	3217422	Identifier	Z_STR_P		3217273	0					
ANR	3217423	ArgumentList	function_name		3217273	1					
ANR	3217424	Argument	function_name		3217273	0					
ANR	3217425	Identifier	function_name		3217273	0					
ANR	3217426	Identifier	NULL		3217273	1					
ANR	3217427	CompoundStatement		22:41:706:706	3217273	1					
ANR	3217428	ExpressionStatement	call_stack [ call ] . func = func	64:6:2532:2560	3217273	0	True				
ANR	3217429	AssignmentExpression	call_stack [ call ] . func = func		3217273	0		=			
ANR	3217430	MemberAccess	call_stack [ call ] . func		3217273	0					
ANR	3217431	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217432	Identifier	call_stack		3217273	0					
ANR	3217433	Identifier	call		3217273	1					
ANR	3217434	Identifier	func		3217273	1					
ANR	3217435	Identifier	func		3217273	1					
ANR	3217436	Label	case ZEND_NEW :	68:3:2616:2629	3217273	3	True				
ANR	3217437	Identifier	ZEND_NEW		3217273	0					
ANR	3217438	Label	case ZEND_INIT_DYNAMIC_CALL :	69:3:2634:2661	3217273	4	True				
ANR	3217439	Identifier	ZEND_INIT_DYNAMIC_CALL		3217273	0					
ANR	3217440	Label	case ZEND_INIT_METHOD_CALL :	70:3:2666:2692	3217273	5	True				
ANR	3217441	Identifier	ZEND_INIT_METHOD_CALL		3217273	0					
ANR	3217442	Label	case ZEND_INIT_STATIC_METHOD_CALL :	71:3:2697:2730	3217273	6	True				
ANR	3217443	Identifier	ZEND_INIT_STATIC_METHOD_CALL		3217273	0					
ANR	3217444	Label	case ZEND_INIT_FCALL :	72:3:2735:2755	3217273	7	True				
ANR	3217445	Identifier	ZEND_INIT_FCALL		3217273	0					
ANR	3217446	Label	case ZEND_INIT_USER_CALL :	73:3:2760:2784	3217273	8	True				
ANR	3217447	Identifier	ZEND_INIT_USER_CALL		3217273	0					
ANR	3217448	ExpressionStatement	call_stack [ call ] . opline = opline	74:4:2790:2822	3217273	9	True				
ANR	3217449	AssignmentExpression	call_stack [ call ] . opline = opline		3217273	0		=			
ANR	3217450	MemberAccess	call_stack [ call ] . opline		3217273	0					
ANR	3217451	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217452	Identifier	call_stack		3217273	0					
ANR	3217453	Identifier	call		3217273	1					
ANR	3217454	Identifier	opline		3217273	1					
ANR	3217455	Identifier	opline		3217273	1					
ANR	3217456	ExpressionStatement	call ++	75:4:2828:2834	3217273	10	True				
ANR	3217457	PostIncDecOperationExpression	call ++		3217273	0					
ANR	3217458	Identifier	call		3217273	0					
ANR	3217459	IncDec	++		3217273	1					
ANR	3217460	BreakStatement	break ;	76:4:2840:2845	3217273	11	True				
ANR	3217461	Label	case ZEND_DO_FCALL :	77:3:2850:2868	3217273	12	True				
ANR	3217462	Identifier	ZEND_DO_FCALL		3217273	0					
ANR	3217463	Label	case ZEND_DO_ICALL :	78:3:2873:2891	3217273	13	True				
ANR	3217464	Identifier	ZEND_DO_ICALL		3217273	0					
ANR	3217465	Label	case ZEND_DO_UCALL :	79:3:2896:2914	3217273	14	True				
ANR	3217466	Identifier	ZEND_DO_UCALL		3217273	0					
ANR	3217467	Label	case ZEND_DO_FCALL_BY_NAME :	80:3:2919:2945	3217273	15	True				
ANR	3217468	Identifier	ZEND_DO_FCALL_BY_NAME		3217273	0					
ANR	3217469	ExpressionStatement	call --	81:4:2951:2957	3217273	16	True				
ANR	3217470	PostIncDecOperationExpression	call --		3217273	0					
ANR	3217471	Identifier	call		3217273	0					
ANR	3217472	IncDec	--		3217273	1					
ANR	3217473	IfStatement	if ( call_stack [ call ] . func && call_stack [ call ] . opline )		3217273	17					
ANR	3217474	Condition	call_stack [ call ] . func && call_stack [ call ] . opline	82:8:2967:3014	3217273	0	True				
ANR	3217475	AndExpression	call_stack [ call ] . func && call_stack [ call ] . opline		3217273	0		&&			
ANR	3217476	MemberAccess	call_stack [ call ] . func		3217273	0					
ANR	3217477	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217478	Identifier	call_stack		3217273	0					
ANR	3217479	Identifier	call		3217273	1					
ANR	3217480	Identifier	func		3217273	1					
ANR	3217481	MemberAccess	call_stack [ call ] . opline		3217273	1					
ANR	3217482	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217483	Identifier	call_stack		3217273	0					
ANR	3217484	Identifier	call		3217273	1					
ANR	3217485	Identifier	opline		3217273	1					
ANR	3217486	CompoundStatement		42:5:1206:1246	3217273	1					
ANR	3217487	IdentifierDeclStatement	zend_op * fcall = call_stack [ call ] . opline ;	83:5:3024:3064	3217273	0	True				
ANR	3217488	IdentifierDecl	* fcall = call_stack [ call ] . opline		3217273	0					
ANR	3217489	IdentifierDeclType	zend_op *		3217273	0					
ANR	3217490	Identifier	fcall		3217273	1					
ANR	3217491	AssignmentExpression	* fcall = call_stack [ call ] . opline		3217273	2		=			
ANR	3217492	Identifier	fcall		3217273	0					
ANR	3217493	MemberAccess	call_stack [ call ] . opline		3217273	1					
ANR	3217494	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217495	Identifier	call_stack		3217273	0					
ANR	3217496	Identifier	call		3217273	1					
ANR	3217497	Identifier	opline		3217273	1					
ANR	3217498	IfStatement	if ( fcall -> opcode == ZEND_INIT_FCALL_BY_NAME )		3217273	1					
ANR	3217499	Condition	fcall -> opcode == ZEND_INIT_FCALL_BY_NAME	85:9:3076:3115	3217273	0	True				
ANR	3217500	EqualityExpression	fcall -> opcode == ZEND_INIT_FCALL_BY_NAME		3217273	0		==			
ANR	3217501	PtrMemberAccess	fcall -> opcode		3217273	0					
ANR	3217502	Identifier	fcall		3217273	0					
ANR	3217503	Identifier	opcode		3217273	1					
ANR	3217504	Identifier	ZEND_INIT_FCALL_BY_NAME		3217273	1					
ANR	3217505	CompoundStatement		44:51:1300:1300	3217273	1					
ANR	3217506	ExpressionStatement	fcall -> opcode = ZEND_INIT_FCALL	86:6:3126:3157	3217273	0	True				
ANR	3217507	AssignmentExpression	fcall -> opcode = ZEND_INIT_FCALL		3217273	0		=			
ANR	3217508	PtrMemberAccess	fcall -> opcode		3217273	0					
ANR	3217509	Identifier	fcall		3217273	0					
ANR	3217510	Identifier	opcode		3217273	1					
ANR	3217511	Identifier	ZEND_INIT_FCALL		3217273	1					
ANR	3217512	ExpressionStatement	"fcall -> op1 . num = zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"	87:6:3165:3251	3217273	1	True				
ANR	3217513	AssignmentExpression	"fcall -> op1 . num = zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"		3217273	0		=			
ANR	3217514	MemberAccess	fcall -> op1 . num		3217273	0					
ANR	3217515	PtrMemberAccess	fcall -> op1		3217273	0					
ANR	3217516	Identifier	fcall		3217273	0					
ANR	3217517	Identifier	op1		3217273	1					
ANR	3217518	Identifier	num		3217273	1					
ANR	3217519	CallExpression	"zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"		3217273	1					
ANR	3217520	Callee	zend_vm_calc_used_stack		3217273	0					
ANR	3217521	Identifier	zend_vm_calc_used_stack		3217273	0					
ANR	3217522	ArgumentList	fcall -> extended_value		3217273	1					
ANR	3217523	Argument	fcall -> extended_value		3217273	0					
ANR	3217524	PtrMemberAccess	fcall -> extended_value		3217273	0					
ANR	3217525	Identifier	fcall		3217273	0					
ANR	3217526	Identifier	extended_value		3217273	1					
ANR	3217527	Argument	call_stack [ call ] . func		3217273	1					
ANR	3217528	MemberAccess	call_stack [ call ] . func		3217273	0					
ANR	3217529	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217530	Identifier	call_stack		3217273	0					
ANR	3217531	Identifier	call		3217273	1					
ANR	3217532	Identifier	func		3217273	1					
ANR	3217533	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] ) = Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )	88:6:3259:3372	3217273	2	True				
ANR	3217534	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] ) = Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )		3217273	0		=			
ANR	3217535	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] )		3217273	0					
ANR	3217536	Callee	Z_CACHE_SLOT		3217273	0					
ANR	3217537	Identifier	Z_CACHE_SLOT		3217273	0					
ANR	3217538	ArgumentList	op_array -> literals [ fcall -> op2 . constant + 1 ]		3217273	1					
ANR	3217539	Argument	op_array -> literals [ fcall -> op2 . constant + 1 ]		3217273	0					
ANR	3217540	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant + 1 ]		3217273	0					
ANR	3217541	PtrMemberAccess	op_array -> literals		3217273	0					
ANR	3217542	Identifier	op_array		3217273	0					
ANR	3217543	Identifier	literals		3217273	1					
ANR	3217544	AdditiveExpression	fcall -> op2 . constant + 1		3217273	1		+			
ANR	3217545	MemberAccess	fcall -> op2 . constant		3217273	0					
ANR	3217546	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217547	Identifier	fcall		3217273	0					
ANR	3217548	Identifier	op2		3217273	1					
ANR	3217549	Identifier	constant		3217273	1					
ANR	3217550	PrimaryExpression	1		3217273	1					
ANR	3217551	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )		3217273	1					
ANR	3217552	Callee	Z_CACHE_SLOT		3217273	0					
ANR	3217553	Identifier	Z_CACHE_SLOT		3217273	0					
ANR	3217554	ArgumentList	op_array -> literals [ fcall -> op2 . constant ]		3217273	1					
ANR	3217555	Argument	op_array -> literals [ fcall -> op2 . constant ]		3217273	0					
ANR	3217556	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant ]		3217273	0					
ANR	3217557	PtrMemberAccess	op_array -> literals		3217273	0					
ANR	3217558	Identifier	op_array		3217273	0					
ANR	3217559	Identifier	literals		3217273	1					
ANR	3217560	MemberAccess	fcall -> op2 . constant		3217273	1					
ANR	3217561	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217562	Identifier	fcall		3217273	0					
ANR	3217563	Identifier	op2		3217273	1					
ANR	3217564	Identifier	constant		3217273	1					
ANR	3217565	ExpressionStatement	literal_dtor ( & ZEND_OP2_LITERAL ( fcall ) )	89:6:3380:3418	3217273	3	True				
ANR	3217566	CallExpression	literal_dtor ( & ZEND_OP2_LITERAL ( fcall ) )		3217273	0					
ANR	3217567	Callee	literal_dtor		3217273	0					
ANR	3217568	Identifier	literal_dtor		3217273	0					
ANR	3217569	ArgumentList	& ZEND_OP2_LITERAL ( fcall )		3217273	1					
ANR	3217570	Argument	& ZEND_OP2_LITERAL ( fcall )		3217273	0					
ANR	3217571	UnaryOperationExpression	& ZEND_OP2_LITERAL ( fcall )		3217273	0					
ANR	3217572	UnaryOperator	&		3217273	0					
ANR	3217573	CallExpression	ZEND_OP2_LITERAL ( fcall )		3217273	1					
ANR	3217574	Callee	ZEND_OP2_LITERAL		3217273	0					
ANR	3217575	Identifier	ZEND_OP2_LITERAL		3217273	0					
ANR	3217576	ArgumentList	fcall		3217273	1					
ANR	3217577	Argument	fcall		3217273	0					
ANR	3217578	Identifier	fcall		3217273	0					
ANR	3217579	ExpressionStatement	fcall -> op2 . constant = fcall -> op2 . constant + 1	90:6:3426:3471	3217273	4	True				
ANR	3217580	AssignmentExpression	fcall -> op2 . constant = fcall -> op2 . constant + 1		3217273	0		=			
ANR	3217581	MemberAccess	fcall -> op2 . constant		3217273	0					
ANR	3217582	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217583	Identifier	fcall		3217273	0					
ANR	3217584	Identifier	op2		3217273	1					
ANR	3217585	Identifier	constant		3217273	1					
ANR	3217586	AdditiveExpression	fcall -> op2 . constant + 1		3217273	1		+			
ANR	3217587	MemberAccess	fcall -> op2 . constant		3217273	0					
ANR	3217588	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217589	Identifier	fcall		3217273	0					
ANR	3217590	Identifier	op2		3217273	1					
ANR	3217591	Identifier	constant		3217273	1					
ANR	3217592	PrimaryExpression	1		3217273	1					
ANR	3217593	ExpressionStatement	"opline -> opcode = zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"	91:6:3479:3552	3217273	5	True				
ANR	3217594	AssignmentExpression	"opline -> opcode = zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"		3217273	0		=			
ANR	3217595	PtrMemberAccess	opline -> opcode		3217273	0					
ANR	3217596	Identifier	opline		3217273	0					
ANR	3217597	Identifier	opcode		3217273	1					
ANR	3217598	CallExpression	"zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"		3217273	1					
ANR	3217599	Callee	zend_get_call_op		3217273	0					
ANR	3217600	Identifier	zend_get_call_op		3217273	0					
ANR	3217601	ArgumentList	ZEND_INIT_FCALL		3217273	1					
ANR	3217602	Argument	ZEND_INIT_FCALL		3217273	0					
ANR	3217603	Identifier	ZEND_INIT_FCALL		3217273	0					
ANR	3217604	Argument	call_stack [ call ] . func		3217273	1					
ANR	3217605	MemberAccess	call_stack [ call ] . func		3217273	0					
ANR	3217606	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217607	Identifier	call_stack		3217273	0					
ANR	3217608	Identifier	call		3217273	1					
ANR	3217609	Identifier	func		3217273	1					
ANR	3217610	ElseStatement	else		3217273	0					
ANR	3217611	IfStatement	if ( fcall -> opcode == ZEND_INIT_NS_FCALL_BY_NAME )		3217273	0					
ANR	3217612	Condition	fcall -> opcode == ZEND_INIT_NS_FCALL_BY_NAME	92:16:3570:3612	3217273	0	True				
ANR	3217613	EqualityExpression	fcall -> opcode == ZEND_INIT_NS_FCALL_BY_NAME		3217273	0		==			
ANR	3217614	PtrMemberAccess	fcall -> opcode		3217273	0					
ANR	3217615	Identifier	fcall		3217273	0					
ANR	3217616	Identifier	opcode		3217273	1					
ANR	3217617	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		3217273	1					
ANR	3217618	CompoundStatement		51:61:1797:1797	3217273	1					
ANR	3217619	ExpressionStatement	fcall -> opcode = ZEND_INIT_FCALL	93:6:3623:3654	3217273	0	True				
ANR	3217620	AssignmentExpression	fcall -> opcode = ZEND_INIT_FCALL		3217273	0		=			
ANR	3217621	PtrMemberAccess	fcall -> opcode		3217273	0					
ANR	3217622	Identifier	fcall		3217273	0					
ANR	3217623	Identifier	opcode		3217273	1					
ANR	3217624	Identifier	ZEND_INIT_FCALL		3217273	1					
ANR	3217625	ExpressionStatement	"fcall -> op1 . num = zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"	94:6:3662:3748	3217273	1	True				
ANR	3217626	AssignmentExpression	"fcall -> op1 . num = zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"		3217273	0		=			
ANR	3217627	MemberAccess	fcall -> op1 . num		3217273	0					
ANR	3217628	PtrMemberAccess	fcall -> op1		3217273	0					
ANR	3217629	Identifier	fcall		3217273	0					
ANR	3217630	Identifier	op1		3217273	1					
ANR	3217631	Identifier	num		3217273	1					
ANR	3217632	CallExpression	"zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"		3217273	1					
ANR	3217633	Callee	zend_vm_calc_used_stack		3217273	0					
ANR	3217634	Identifier	zend_vm_calc_used_stack		3217273	0					
ANR	3217635	ArgumentList	fcall -> extended_value		3217273	1					
ANR	3217636	Argument	fcall -> extended_value		3217273	0					
ANR	3217637	PtrMemberAccess	fcall -> extended_value		3217273	0					
ANR	3217638	Identifier	fcall		3217273	0					
ANR	3217639	Identifier	extended_value		3217273	1					
ANR	3217640	Argument	call_stack [ call ] . func		3217273	1					
ANR	3217641	MemberAccess	call_stack [ call ] . func		3217273	0					
ANR	3217642	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217643	Identifier	call_stack		3217273	0					
ANR	3217644	Identifier	call		3217273	1					
ANR	3217645	Identifier	func		3217273	1					
ANR	3217646	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] ) = Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )	95:6:3756:3869	3217273	2	True				
ANR	3217647	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] ) = Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )		3217273	0		=			
ANR	3217648	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] )		3217273	0					
ANR	3217649	Callee	Z_CACHE_SLOT		3217273	0					
ANR	3217650	Identifier	Z_CACHE_SLOT		3217273	0					
ANR	3217651	ArgumentList	op_array -> literals [ fcall -> op2 . constant + 1 ]		3217273	1					
ANR	3217652	Argument	op_array -> literals [ fcall -> op2 . constant + 1 ]		3217273	0					
ANR	3217653	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant + 1 ]		3217273	0					
ANR	3217654	PtrMemberAccess	op_array -> literals		3217273	0					
ANR	3217655	Identifier	op_array		3217273	0					
ANR	3217656	Identifier	literals		3217273	1					
ANR	3217657	AdditiveExpression	fcall -> op2 . constant + 1		3217273	1		+			
ANR	3217658	MemberAccess	fcall -> op2 . constant		3217273	0					
ANR	3217659	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217660	Identifier	fcall		3217273	0					
ANR	3217661	Identifier	op2		3217273	1					
ANR	3217662	Identifier	constant		3217273	1					
ANR	3217663	PrimaryExpression	1		3217273	1					
ANR	3217664	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )		3217273	1					
ANR	3217665	Callee	Z_CACHE_SLOT		3217273	0					
ANR	3217666	Identifier	Z_CACHE_SLOT		3217273	0					
ANR	3217667	ArgumentList	op_array -> literals [ fcall -> op2 . constant ]		3217273	1					
ANR	3217668	Argument	op_array -> literals [ fcall -> op2 . constant ]		3217273	0					
ANR	3217669	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant ]		3217273	0					
ANR	3217670	PtrMemberAccess	op_array -> literals		3217273	0					
ANR	3217671	Identifier	op_array		3217273	0					
ANR	3217672	Identifier	literals		3217273	1					
ANR	3217673	MemberAccess	fcall -> op2 . constant		3217273	1					
ANR	3217674	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217675	Identifier	fcall		3217273	0					
ANR	3217676	Identifier	op2		3217273	1					
ANR	3217677	Identifier	constant		3217273	1					
ANR	3217678	ExpressionStatement	literal_dtor ( & op_array -> literals [ fcall -> op2 . constant ] )	96:6:3877:3931	3217273	3	True				
ANR	3217679	CallExpression	literal_dtor ( & op_array -> literals [ fcall -> op2 . constant ] )		3217273	0					
ANR	3217680	Callee	literal_dtor		3217273	0					
ANR	3217681	Identifier	literal_dtor		3217273	0					
ANR	3217682	ArgumentList	& op_array -> literals [ fcall -> op2 . constant ]		3217273	1					
ANR	3217683	Argument	& op_array -> literals [ fcall -> op2 . constant ]		3217273	0					
ANR	3217684	UnaryOperationExpression	& op_array -> literals [ fcall -> op2 . constant ]		3217273	0					
ANR	3217685	UnaryOperator	&		3217273	0					
ANR	3217686	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant ]		3217273	1					
ANR	3217687	PtrMemberAccess	op_array -> literals		3217273	0					
ANR	3217688	Identifier	op_array		3217273	0					
ANR	3217689	Identifier	literals		3217273	1					
ANR	3217690	MemberAccess	fcall -> op2 . constant		3217273	1					
ANR	3217691	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217692	Identifier	fcall		3217273	0					
ANR	3217693	Identifier	op2		3217273	1					
ANR	3217694	Identifier	constant		3217273	1					
ANR	3217695	ExpressionStatement	literal_dtor ( & op_array -> literals [ fcall -> op2 . constant + 2 ] )	97:6:3939:3997	3217273	4	True				
ANR	3217696	CallExpression	literal_dtor ( & op_array -> literals [ fcall -> op2 . constant + 2 ] )		3217273	0					
ANR	3217697	Callee	literal_dtor		3217273	0					
ANR	3217698	Identifier	literal_dtor		3217273	0					
ANR	3217699	ArgumentList	& op_array -> literals [ fcall -> op2 . constant + 2 ]		3217273	1					
ANR	3217700	Argument	& op_array -> literals [ fcall -> op2 . constant + 2 ]		3217273	0					
ANR	3217701	UnaryOperationExpression	& op_array -> literals [ fcall -> op2 . constant + 2 ]		3217273	0					
ANR	3217702	UnaryOperator	&		3217273	0					
ANR	3217703	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant + 2 ]		3217273	1					
ANR	3217704	PtrMemberAccess	op_array -> literals		3217273	0					
ANR	3217705	Identifier	op_array		3217273	0					
ANR	3217706	Identifier	literals		3217273	1					
ANR	3217707	AdditiveExpression	fcall -> op2 . constant + 2		3217273	1		+			
ANR	3217708	MemberAccess	fcall -> op2 . constant		3217273	0					
ANR	3217709	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217710	Identifier	fcall		3217273	0					
ANR	3217711	Identifier	op2		3217273	1					
ANR	3217712	Identifier	constant		3217273	1					
ANR	3217713	PrimaryExpression	2		3217273	1					
ANR	3217714	ExpressionStatement	fcall -> op2 . constant = fcall -> op2 . constant + 1	98:6:4005:4050	3217273	5	True				
ANR	3217715	AssignmentExpression	fcall -> op2 . constant = fcall -> op2 . constant + 1		3217273	0		=			
ANR	3217716	MemberAccess	fcall -> op2 . constant		3217273	0					
ANR	3217717	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217718	Identifier	fcall		3217273	0					
ANR	3217719	Identifier	op2		3217273	1					
ANR	3217720	Identifier	constant		3217273	1					
ANR	3217721	AdditiveExpression	fcall -> op2 . constant + 1		3217273	1		+			
ANR	3217722	MemberAccess	fcall -> op2 . constant		3217273	0					
ANR	3217723	PtrMemberAccess	fcall -> op2		3217273	0					
ANR	3217724	Identifier	fcall		3217273	0					
ANR	3217725	Identifier	op2		3217273	1					
ANR	3217726	Identifier	constant		3217273	1					
ANR	3217727	PrimaryExpression	1		3217273	1					
ANR	3217728	ExpressionStatement	"opline -> opcode = zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"	99:6:4058:4131	3217273	6	True				
ANR	3217729	AssignmentExpression	"opline -> opcode = zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"		3217273	0		=			
ANR	3217730	PtrMemberAccess	opline -> opcode		3217273	0					
ANR	3217731	Identifier	opline		3217273	0					
ANR	3217732	Identifier	opcode		3217273	1					
ANR	3217733	CallExpression	"zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"		3217273	1					
ANR	3217734	Callee	zend_get_call_op		3217273	0					
ANR	3217735	Identifier	zend_get_call_op		3217273	0					
ANR	3217736	ArgumentList	ZEND_INIT_FCALL		3217273	1					
ANR	3217737	Argument	ZEND_INIT_FCALL		3217273	0					
ANR	3217738	Identifier	ZEND_INIT_FCALL		3217273	0					
ANR	3217739	Argument	call_stack [ call ] . func		3217273	1					
ANR	3217740	MemberAccess	call_stack [ call ] . func		3217273	0					
ANR	3217741	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217742	Identifier	call_stack		3217273	0					
ANR	3217743	Identifier	call		3217273	1					
ANR	3217744	Identifier	func		3217273	1					
ANR	3217745	ElseStatement	else		3217273	0					
ANR	3217746	CompoundStatement		59:12:2327:2327	3217273	0					
ANR	3217747	ExpressionStatement	ZEND_ASSERT ( 0 )	101:6:4153:4167	3217273	0	True				
ANR	3217748	CallExpression	ZEND_ASSERT ( 0 )		3217273	0					
ANR	3217749	Callee	ZEND_ASSERT		3217273	0					
ANR	3217750	Identifier	ZEND_ASSERT		3217273	0					
ANR	3217751	ArgumentList	0		3217273	1					
ANR	3217752	Argument	0		3217273	0					
ANR	3217753	PrimaryExpression	0		3217273	0					
ANR	3217754	ExpressionStatement	call_stack [ call ] . func = NULL	104:4:4186:4214	3217273	18	True				
ANR	3217755	AssignmentExpression	call_stack [ call ] . func = NULL		3217273	0		=			
ANR	3217756	MemberAccess	call_stack [ call ] . func		3217273	0					
ANR	3217757	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217758	Identifier	call_stack		3217273	0					
ANR	3217759	Identifier	call		3217273	1					
ANR	3217760	Identifier	func		3217273	1					
ANR	3217761	Identifier	NULL		3217273	1					
ANR	3217762	ExpressionStatement	call_stack [ call ] . opline = NULL	105:4:4220:4250	3217273	19	True				
ANR	3217763	AssignmentExpression	call_stack [ call ] . opline = NULL		3217273	0		=			
ANR	3217764	MemberAccess	call_stack [ call ] . opline		3217273	0					
ANR	3217765	ArrayIndexing	call_stack [ call ]		3217273	0					
ANR	3217766	Identifier	call_stack		3217273	0					
ANR	3217767	Identifier	call		3217273	1					
ANR	3217768	Identifier	opline		3217273	1					
ANR	3217769	Identifier	NULL		3217273	1					
ANR	3217770	BreakStatement	break ;	106:4:4256:4261	3217273	20	True				
ANR	3217771	Label	case ZEND_FETCH_FUNC_ARG :	107:3:4266:4290	3217273	21	True				
ANR	3217772	Identifier	ZEND_FETCH_FUNC_ARG		3217273	0					
ANR	3217773	Label	case ZEND_FETCH_OBJ_FUNC_ARG :	108:3:4295:4323	3217273	22	True				
ANR	3217774	Identifier	ZEND_FETCH_OBJ_FUNC_ARG		3217273	0					
ANR	3217775	Label	case ZEND_FETCH_DIM_FUNC_ARG :	109:3:4328:4356	3217273	23	True				
ANR	3217776	Identifier	ZEND_FETCH_DIM_FUNC_ARG		3217273	0					
ANR	3217777	IfStatement	if ( call_stack [ call - 1 ] . func )		3217273	24					
ANR	3217778	Condition	call_stack [ call - 1 ] . func	110:8:4366:4390	3217273	0	True				
ANR	3217779	MemberAccess	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217780	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3217781	Identifier	call_stack		3217273	0					
ANR	3217782	AdditiveExpression	call - 1		3217273	1		-			
ANR	3217783	Identifier	call		3217273	0					
ANR	3217784	PrimaryExpression	1		3217273	1					
ANR	3217785	Identifier	func		3217273	1					
ANR	3217786	CompoundStatement		69:35:2575:2575	3217273	1					
ANR	3217787	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , ( opline -> extended_value & ZEND_FETCH_ARG_MASK ) ) )"		3217273	0					
ANR	3217788	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , ( opline -> extended_value & ZEND_FETCH_ARG_MASK ) )"	111:9:4404:4503	3217273	0	True				
ANR	3217789	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , ( opline -> extended_value & ZEND_FETCH_ARG_MASK ) )"		3217273	0					
ANR	3217790	Callee	ARG_SHOULD_BE_SENT_BY_REF		3217273	0					
ANR	3217791	Identifier	ARG_SHOULD_BE_SENT_BY_REF		3217273	0					
ANR	3217792	ArgumentList	call_stack [ call - 1 ] . func		3217273	1					
ANR	3217793	Argument	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217794	MemberAccess	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217795	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3217796	Identifier	call_stack		3217273	0					
ANR	3217797	AdditiveExpression	call - 1		3217273	1		-			
ANR	3217798	Identifier	call		3217273	0					
ANR	3217799	PrimaryExpression	1		3217273	1					
ANR	3217800	Identifier	func		3217273	1					
ANR	3217801	Argument	opline -> extended_value & ZEND_FETCH_ARG_MASK		3217273	1					
ANR	3217802	BitAndExpression	opline -> extended_value & ZEND_FETCH_ARG_MASK		3217273	0		&			
ANR	3217803	PtrMemberAccess	opline -> extended_value		3217273	0					
ANR	3217804	Identifier	opline		3217273	0					
ANR	3217805	Identifier	extended_value		3217273	1					
ANR	3217806	Identifier	ZEND_FETCH_ARG_MASK		3217273	1					
ANR	3217807	CompoundStatement		70:111:2688:2688	3217273	1					
ANR	3217808	ExpressionStatement	opline -> extended_value &= ZEND_FETCH_TYPE_MASK	112:6:4514:4560	3217273	0	True				
ANR	3217809	AssignmentExpression	opline -> extended_value &= ZEND_FETCH_TYPE_MASK		3217273	0		&=			
ANR	3217810	PtrMemberAccess	opline -> extended_value		3217273	0					
ANR	3217811	Identifier	opline		3217273	0					
ANR	3217812	Identifier	extended_value		3217273	1					
ANR	3217813	Identifier	ZEND_FETCH_TYPE_MASK		3217273	1					
ANR	3217814	ExpressionStatement	opline -> opcode -= 9	113:6:4568:4587	3217273	1	True				
ANR	3217815	AssignmentExpression	opline -> opcode -= 9		3217273	0		-=			
ANR	3217816	PtrMemberAccess	opline -> opcode		3217273	0					
ANR	3217817	Identifier	opline		3217273	0					
ANR	3217818	Identifier	opcode		3217273	1					
ANR	3217819	PrimaryExpression	9		3217273	1					
ANR	3217820	ElseStatement	else		3217273	0					
ANR	3217821	CompoundStatement		73:12:2783:2783	3217273	0					
ANR	3217822	ExpressionStatement	opline -> extended_value &= ZEND_FETCH_TYPE_MASK	115:6:4609:4655	3217273	0	True				
ANR	3217823	AssignmentExpression	opline -> extended_value &= ZEND_FETCH_TYPE_MASK		3217273	0		&=			
ANR	3217824	PtrMemberAccess	opline -> extended_value		3217273	0					
ANR	3217825	Identifier	opline		3217273	0					
ANR	3217826	Identifier	extended_value		3217273	1					
ANR	3217827	Identifier	ZEND_FETCH_TYPE_MASK		3217273	1					
ANR	3217828	ExpressionStatement	opline -> opcode -= 12	116:6:4663:4683	3217273	1	True				
ANR	3217829	AssignmentExpression	opline -> opcode -= 12		3217273	0		-=			
ANR	3217830	PtrMemberAccess	opline -> opcode		3217273	0					
ANR	3217831	Identifier	opline		3217273	0					
ANR	3217832	Identifier	opcode		3217273	1					
ANR	3217833	PrimaryExpression	12		3217273	1					
ANR	3217834	BreakStatement	break ;	119:4:4702:4707	3217273	25	True				
ANR	3217835	Label	case ZEND_SEND_VAL_EX :	120:3:4712:4733	3217273	26	True				
ANR	3217836	Identifier	ZEND_SEND_VAL_EX		3217273	0					
ANR	3217837	IfStatement	if ( call_stack [ call - 1 ] . func )		3217273	27					
ANR	3217838	Condition	call_stack [ call - 1 ] . func	121:8:4743:4767	3217273	0	True				
ANR	3217839	MemberAccess	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217840	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3217841	Identifier	call_stack		3217273	0					
ANR	3217842	AdditiveExpression	call - 1		3217273	1		-			
ANR	3217843	Identifier	call		3217273	0					
ANR	3217844	PrimaryExpression	1		3217273	1					
ANR	3217845	Identifier	func		3217273	1					
ANR	3217846	CompoundStatement		80:35:2952:2952	3217273	1					
ANR	3217847	IfStatement	"if ( ARG_MUST_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num ) )"		3217273	0					
ANR	3217848	Condition	"ARG_MUST_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"	122:9:4781:4847	3217273	0	True				
ANR	3217849	CallExpression	"ARG_MUST_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"		3217273	0					
ANR	3217850	Callee	ARG_MUST_BE_SENT_BY_REF		3217273	0					
ANR	3217851	Identifier	ARG_MUST_BE_SENT_BY_REF		3217273	0					
ANR	3217852	ArgumentList	call_stack [ call - 1 ] . func		3217273	1					
ANR	3217853	Argument	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217854	MemberAccess	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217855	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3217856	Identifier	call_stack		3217273	0					
ANR	3217857	AdditiveExpression	call - 1		3217273	1		-			
ANR	3217858	Identifier	call		3217273	0					
ANR	3217859	PrimaryExpression	1		3217273	1					
ANR	3217860	Identifier	func		3217273	1					
ANR	3217861	Argument	opline -> op2 . num		3217273	1					
ANR	3217862	MemberAccess	opline -> op2 . num		3217273	0					
ANR	3217863	PtrMemberAccess	opline -> op2		3217273	0					
ANR	3217864	Identifier	opline		3217273	0					
ANR	3217865	Identifier	op2		3217273	1					
ANR	3217866	Identifier	num		3217273	1					
ANR	3217867	CompoundStatement		81:78:3032:3032	3217273	1					
ANR	3217868	ExpressionStatement	call_stack [ call - 1 ] . opline = NULL	124:6:4930:4964	3217273	0	True				
ANR	3217869	AssignmentExpression	call_stack [ call - 1 ] . opline = NULL		3217273	0		=			
ANR	3217870	MemberAccess	call_stack [ call - 1 ] . opline		3217273	0					
ANR	3217871	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3217872	Identifier	call_stack		3217273	0					
ANR	3217873	AdditiveExpression	call - 1		3217273	1		-			
ANR	3217874	Identifier	call		3217273	0					
ANR	3217875	PrimaryExpression	1		3217273	1					
ANR	3217876	Identifier	opline		3217273	1					
ANR	3217877	Identifier	NULL		3217273	1					
ANR	3217878	ElseStatement	else		3217273	0					
ANR	3217879	CompoundStatement		84:12:3160:3160	3217273	0					
ANR	3217880	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL	126:6:4986:5016	3217273	0	True				
ANR	3217881	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL		3217273	0		=			
ANR	3217882	PtrMemberAccess	opline -> opcode		3217273	0					
ANR	3217883	Identifier	opline		3217273	0					
ANR	3217884	Identifier	opcode		3217273	1					
ANR	3217885	Identifier	ZEND_SEND_VAL		3217273	1					
ANR	3217886	BreakStatement	break ;	129:4:5035:5040	3217273	28	True				
ANR	3217887	Label	case ZEND_SEND_VAR_EX :	130:3:5045:5066	3217273	29	True				
ANR	3217888	Identifier	ZEND_SEND_VAR_EX		3217273	0					
ANR	3217889	IfStatement	if ( call_stack [ call - 1 ] . func )		3217273	30					
ANR	3217890	Condition	call_stack [ call - 1 ] . func	131:8:5076:5100	3217273	0	True				
ANR	3217891	MemberAccess	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217892	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3217893	Identifier	call_stack		3217273	0					
ANR	3217894	AdditiveExpression	call - 1		3217273	1		-			
ANR	3217895	Identifier	call		3217273	0					
ANR	3217896	PrimaryExpression	1		3217273	1					
ANR	3217897	Identifier	func		3217273	1					
ANR	3217898	CompoundStatement		90:35:3285:3285	3217273	1					
ANR	3217899	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num ) )"		3217273	0					
ANR	3217900	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"	132:9:5114:5182	3217273	0	True				
ANR	3217901	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"		3217273	0					
ANR	3217902	Callee	ARG_SHOULD_BE_SENT_BY_REF		3217273	0					
ANR	3217903	Identifier	ARG_SHOULD_BE_SENT_BY_REF		3217273	0					
ANR	3217904	ArgumentList	call_stack [ call - 1 ] . func		3217273	1					
ANR	3217905	Argument	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217906	MemberAccess	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217907	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3217908	Identifier	call_stack		3217273	0					
ANR	3217909	AdditiveExpression	call - 1		3217273	1		-			
ANR	3217910	Identifier	call		3217273	0					
ANR	3217911	PrimaryExpression	1		3217273	1					
ANR	3217912	Identifier	func		3217273	1					
ANR	3217913	Argument	opline -> op2 . num		3217273	1					
ANR	3217914	MemberAccess	opline -> op2 . num		3217273	0					
ANR	3217915	PtrMemberAccess	opline -> op2		3217273	0					
ANR	3217916	Identifier	opline		3217273	0					
ANR	3217917	Identifier	op2		3217273	1					
ANR	3217918	Identifier	num		3217273	1					
ANR	3217919	CompoundStatement		91:80:3367:3367	3217273	1					
ANR	3217920	ExpressionStatement	opline -> opcode = ZEND_SEND_REF	133:6:5193:5223	3217273	0	True				
ANR	3217921	AssignmentExpression	opline -> opcode = ZEND_SEND_REF		3217273	0		=			
ANR	3217922	PtrMemberAccess	opline -> opcode		3217273	0					
ANR	3217923	Identifier	opline		3217273	0					
ANR	3217924	Identifier	opcode		3217273	1					
ANR	3217925	Identifier	ZEND_SEND_REF		3217273	1					
ANR	3217926	ElseStatement	else		3217273	0					
ANR	3217927	CompoundStatement		93:12:3419:3419	3217273	0					
ANR	3217928	ExpressionStatement	opline -> opcode = ZEND_SEND_VAR	135:6:5245:5275	3217273	0	True				
ANR	3217929	AssignmentExpression	opline -> opcode = ZEND_SEND_VAR		3217273	0		=			
ANR	3217930	PtrMemberAccess	opline -> opcode		3217273	0					
ANR	3217931	Identifier	opline		3217273	0					
ANR	3217932	Identifier	opcode		3217273	1					
ANR	3217933	Identifier	ZEND_SEND_VAR		3217273	1					
ANR	3217934	BreakStatement	break ;	138:4:5294:5299	3217273	31	True				
ANR	3217935	Label	case ZEND_SEND_VAR_NO_REF :	139:3:5304:5329	3217273	32	True				
ANR	3217936	Identifier	ZEND_SEND_VAR_NO_REF		3217273	0					
ANR	3217937	IfStatement	if ( ! ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND ) && call_stack [ call - 1 ] . func )		3217273	33					
ANR	3217938	Condition	! ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND ) && call_stack [ call - 1 ] . func	140:8:5339:5422	3217273	0	True				
ANR	3217939	AndExpression	! ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND ) && call_stack [ call - 1 ] . func		3217273	0		&&			
ANR	3217940	UnaryOperationExpression	! ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND )		3217273	0					
ANR	3217941	UnaryOperator	!		3217273	0					
ANR	3217942	BitAndExpression	opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND		3217273	1		&			
ANR	3217943	PtrMemberAccess	opline -> extended_value		3217273	0					
ANR	3217944	Identifier	opline		3217273	0					
ANR	3217945	Identifier	extended_value		3217273	1					
ANR	3217946	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		3217273	1					
ANR	3217947	MemberAccess	call_stack [ call - 1 ] . func		3217273	1					
ANR	3217948	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3217949	Identifier	call_stack		3217273	0					
ANR	3217950	AdditiveExpression	call - 1		3217273	1		-			
ANR	3217951	Identifier	call		3217273	0					
ANR	3217952	PrimaryExpression	1		3217273	1					
ANR	3217953	Identifier	func		3217273	1					
ANR	3217954	CompoundStatement		99:94:3607:3607	3217273	1					
ANR	3217955	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num ) )"		3217273	0					
ANR	3217956	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"	141:9:5436:5504	3217273	0	True				
ANR	3217957	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"		3217273	0					
ANR	3217958	Callee	ARG_SHOULD_BE_SENT_BY_REF		3217273	0					
ANR	3217959	Identifier	ARG_SHOULD_BE_SENT_BY_REF		3217273	0					
ANR	3217960	ArgumentList	call_stack [ call - 1 ] . func		3217273	1					
ANR	3217961	Argument	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217962	MemberAccess	call_stack [ call - 1 ] . func		3217273	0					
ANR	3217963	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3217964	Identifier	call_stack		3217273	0					
ANR	3217965	AdditiveExpression	call - 1		3217273	1		-			
ANR	3217966	Identifier	call		3217273	0					
ANR	3217967	PrimaryExpression	1		3217273	1					
ANR	3217968	Identifier	func		3217273	1					
ANR	3217969	Argument	opline -> op2 . num		3217273	1					
ANR	3217970	MemberAccess	opline -> op2 . num		3217273	0					
ANR	3217971	PtrMemberAccess	opline -> op2		3217273	0					
ANR	3217972	Identifier	opline		3217273	0					
ANR	3217973	Identifier	op2		3217273	1					
ANR	3217974	Identifier	num		3217273	1					
ANR	3217975	CompoundStatement		100:80:3689:3689	3217273	1					
ANR	3217976	ExpressionStatement	opline -> extended_value |= ZEND_ARG_COMPILE_TIME_BOUND | ZEND_ARG_SEND_BY_REF	142:6:5515:5591	3217273	0	True				
ANR	3217977	AssignmentExpression	opline -> extended_value |= ZEND_ARG_COMPILE_TIME_BOUND | ZEND_ARG_SEND_BY_REF		3217273	0		|=			
ANR	3217978	PtrMemberAccess	opline -> extended_value		3217273	0					
ANR	3217979	Identifier	opline		3217273	0					
ANR	3217980	Identifier	extended_value		3217273	1					
ANR	3217981	InclusiveOrExpression	ZEND_ARG_COMPILE_TIME_BOUND | ZEND_ARG_SEND_BY_REF		3217273	1		|			
ANR	3217982	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		3217273	0					
ANR	3217983	Identifier	ZEND_ARG_SEND_BY_REF		3217273	1					
ANR	3217984	ElseStatement	else		3217273	0					
ANR	3217985	CompoundStatement		102:12:3787:3787	3217273	0					
ANR	3217986	ExpressionStatement	opline -> opcode = ZEND_SEND_VAR	144:6:5613:5643	3217273	0	True				
ANR	3217987	AssignmentExpression	opline -> opcode = ZEND_SEND_VAR		3217273	0		=			
ANR	3217988	PtrMemberAccess	opline -> opcode		3217273	0					
ANR	3217989	Identifier	opline		3217273	0					
ANR	3217990	Identifier	opcode		3217273	1					
ANR	3217991	Identifier	ZEND_SEND_VAR		3217273	1					
ANR	3217992	ExpressionStatement	opline -> extended_value = 0	145:6:5651:5677	3217273	1	True				
ANR	3217993	AssignmentExpression	opline -> extended_value = 0		3217273	0		=			
ANR	3217994	PtrMemberAccess	opline -> extended_value		3217273	0					
ANR	3217995	Identifier	opline		3217273	0					
ANR	3217996	Identifier	extended_value		3217273	1					
ANR	3217997	PrimaryExpression	0		3217273	1					
ANR	3217998	BreakStatement	break ;	148:4:5696:5701	3217273	34	True				
ANR	3217999	Label	case ZEND_SEND_REF :	150:3:5712:5730	3217273	35	True				
ANR	3218000	Identifier	ZEND_SEND_REF		3217273	0					
ANR	3218001	IfStatement	if ( opline -> extended_value != ZEND_ARG_COMPILE_TIME_BOUND && call_stack [ call - 1 ] . func )		3217273	36					
ANR	3218002	Condition	opline -> extended_value != ZEND_ARG_COMPILE_TIME_BOUND && call_stack [ call - 1 ] . func	151:8:5740:5821	3217273	0	True				
ANR	3218003	AndExpression	opline -> extended_value != ZEND_ARG_COMPILE_TIME_BOUND && call_stack [ call - 1 ] . func		3217273	0		&&			
ANR	3218004	EqualityExpression	opline -> extended_value != ZEND_ARG_COMPILE_TIME_BOUND		3217273	0		!=			
ANR	3218005	PtrMemberAccess	opline -> extended_value		3217273	0					
ANR	3218006	Identifier	opline		3217273	0					
ANR	3218007	Identifier	extended_value		3217273	1					
ANR	3218008	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		3217273	1					
ANR	3218009	MemberAccess	call_stack [ call - 1 ] . func		3217273	1					
ANR	3218010	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3218011	Identifier	call_stack		3217273	0					
ANR	3218012	AdditiveExpression	call - 1		3217273	1		-			
ANR	3218013	Identifier	call		3217273	0					
ANR	3218014	PrimaryExpression	1		3217273	1					
ANR	3218015	Identifier	func		3217273	1					
ANR	3218016	CompoundStatement		110:92:4006:4006	3217273	1					
ANR	3218017	ExpressionStatement	call_stack [ call - 1 ] . opline = NULL	153:5:5885:5919	3217273	0	True				
ANR	3218018	AssignmentExpression	call_stack [ call - 1 ] . opline = NULL		3217273	0		=			
ANR	3218019	MemberAccess	call_stack [ call - 1 ] . opline		3217273	0					
ANR	3218020	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3218021	Identifier	call_stack		3217273	0					
ANR	3218022	AdditiveExpression	call - 1		3217273	1		-			
ANR	3218023	Identifier	call		3217273	0					
ANR	3218024	PrimaryExpression	1		3217273	1					
ANR	3218025	Identifier	opline		3217273	1					
ANR	3218026	Identifier	NULL		3217273	1					
ANR	3218027	BreakStatement	break ;	155:4:5931:5936	3217273	37	True				
ANR	3218028	Label	case ZEND_SEND_UNPACK :	157:3:5948:5969	3217273	38	True				
ANR	3218029	Identifier	ZEND_SEND_UNPACK		3217273	0					
ANR	3218030	ExpressionStatement	call_stack [ call - 1 ] . func = NULL	158:4:5975:6007	3217273	39	True				
ANR	3218031	AssignmentExpression	call_stack [ call - 1 ] . func = NULL		3217273	0		=			
ANR	3218032	MemberAccess	call_stack [ call - 1 ] . func		3217273	0					
ANR	3218033	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3218034	Identifier	call_stack		3217273	0					
ANR	3218035	AdditiveExpression	call - 1		3217273	1		-			
ANR	3218036	Identifier	call		3217273	0					
ANR	3218037	PrimaryExpression	1		3217273	1					
ANR	3218038	Identifier	func		3217273	1					
ANR	3218039	Identifier	NULL		3217273	1					
ANR	3218040	ExpressionStatement	call_stack [ call - 1 ] . opline = NULL	159:4:6013:6047	3217273	40	True				
ANR	3218041	AssignmentExpression	call_stack [ call - 1 ] . opline = NULL		3217273	0		=			
ANR	3218042	MemberAccess	call_stack [ call - 1 ] . opline		3217273	0					
ANR	3218043	ArrayIndexing	call_stack [ call - 1 ]		3217273	0					
ANR	3218044	Identifier	call_stack		3217273	0					
ANR	3218045	AdditiveExpression	call - 1		3217273	1		-			
ANR	3218046	Identifier	call		3217273	0					
ANR	3218047	PrimaryExpression	1		3217273	1					
ANR	3218048	Identifier	opline		3217273	1					
ANR	3218049	Identifier	NULL		3217273	1					
ANR	3218050	BreakStatement	break ;	160:4:6053:6058	3217273	41	True				
ANR	3218051	Label	default :	161:3:6063:6070	3217273	42	True				
ANR	3218052	Identifier	default		3217273	0					
ANR	3218053	BreakStatement	break ;	162:4:6076:6081	3217273	43	True				
ANR	3218054	ExpressionStatement	opline ++	164:2:6089:6097	3217273	1	True				
ANR	3218055	PostIncDecOperationExpression	opline ++		3217273	0					
ANR	3218056	Identifier	opline		3217273	0					
ANR	3218057	IncDec	++		3217273	1					
ANR	3218058	ExpressionStatement	"zend_arena_release ( & ctx -> arena , checkpoint )"	167:1:6104:6147	3217273	9	True				
ANR	3218059	CallExpression	"zend_arena_release ( & ctx -> arena , checkpoint )"		3217273	0					
ANR	3218060	Callee	zend_arena_release		3217273	0					
ANR	3218061	Identifier	zend_arena_release		3217273	0					
ANR	3218062	ArgumentList	& ctx -> arena		3217273	1					
ANR	3218063	Argument	& ctx -> arena		3217273	0					
ANR	3218064	UnaryOperationExpression	& ctx -> arena		3217273	0					
ANR	3218065	UnaryOperator	&		3217273	0					
ANR	3218066	PtrMemberAccess	ctx -> arena		3217273	1					
ANR	3218067	Identifier	ctx		3217273	0					
ANR	3218068	Identifier	arena		3217273	1					
ANR	3218069	Argument	checkpoint		3217273	1					
ANR	3218070	Identifier	checkpoint		3217273	0					
ANR	3218071	ReturnType	void		3217273	1					
ANR	3218072	Identifier	optimize_func_calls		3217273	2					
ANR	3218073	ParameterList	"zend_op_array * op_array , zend_optimizer_ctx * ctx"		3217273	3					
ANR	3218074	Parameter	zend_op_array * op_array	41:25:1767:1789	3217273	0	True				
ANR	3218075	ParameterType	zend_op_array *		3217273	0					
ANR	3218076	Identifier	op_array		3217273	1					
ANR	3218077	Parameter	zend_optimizer_ctx * ctx	41:50:1792:1814	3217273	1	True				
ANR	3218078	ParameterType	zend_optimizer_ctx *		3217273	0					
ANR	3218079	Identifier	ctx		3217273	1					
ANR	3218080	CFGEntryNode	ENTRY		3217273		True				
ANR	3218081	CFGExitNode	EXIT		3217273		True				
ANR	3218082	Symbol	checkpoint		3217273						
ANR	3218083	Symbol	ZEND_SEND_REF		3217273						
ANR	3218084	Symbol	zend_arena_calloc		3217273						
ANR	3218085	Symbol	ZEND_FETCH_ARG_MASK		3217273						
ANR	3218086	Symbol	* call		3217273						
ANR	3218087	Symbol	& ctx -> script -> function_table		3217273						
ANR	3218088	Symbol	* op_array -> literals		3217273						
ANR	3218089	Symbol	opline -> extended_value		3217273						
ANR	3218090	Symbol	fcall		3217273						
ANR	3218091	Symbol	opline		3217273						
ANR	3218092	Symbol	ZEND_INIT_FCALL		3217273						
ANR	3218093	Symbol	zend_hash_find_ptr		3217273						
ANR	3218094	Symbol	NULL		3217273						
ANR	3218095	Symbol	ZEND_INIT_NS_FCALL_BY_NAME		3217273						
ANR	3218096	Symbol	ctx		3217273						
ANR	3218097	Symbol	ctx -> script		3217273						
ANR	3218098	Symbol	fcall -> op2		3217273						
ANR	3218099	Symbol	fcall -> op1		3217273						
ANR	3218100	Symbol	ARG_MUST_BE_SENT_BY_REF		3217273						
ANR	3218101	Symbol	* fcall -> op2		3217273						
ANR	3218102	Symbol	* op_array		3217273						
ANR	3218103	Symbol	op_array -> last		3217273						
ANR	3218104	Symbol	fcall -> extended_value		3217273						
ANR	3218105	Symbol	call_stack [ call ] . opline		3217273						
ANR	3218106	Symbol	ZEND_SEND_VAL		3217273						
ANR	3218107	Symbol	op_array -> literals		3217273						
ANR	3218108	Symbol	ZEND_SEND_VAR		3217273						
ANR	3218109	Symbol	Z_STR_P		3217273						
ANR	3218110	Symbol	* * op_array		3217273						
ANR	3218111	Symbol	zend_vm_calc_used_stack		3217273						
ANR	3218112	Symbol	ZEND_ARG_SEND_BY_REF		3217273						
ANR	3218113	Symbol	ARG_SHOULD_BE_SENT_BY_REF		3217273						
ANR	3218114	Symbol	opline -> op2		3217273						
ANR	3218115	Symbol	call_stack [ call - 1 ] . opline		3217273						
ANR	3218116	Symbol	fcall -> op2 . constant		3217273						
ANR	3218117	Symbol	fcall -> op1 . num		3217273						
ANR	3218118	Symbol	* call_stack		3217273						
ANR	3218119	Symbol	fcall -> opcode		3217273						
ANR	3218120	Symbol	call_stack [ call ] . func		3217273						
ANR	3218121	Symbol	op_array -> opcodes		3217273						
ANR	3218122	Symbol	* * fcall		3217273						
ANR	3218123	Symbol	end		3217273						
ANR	3218124	Symbol	ZEND_OP2_IS_CONST_STRING		3217273						
ANR	3218125	Symbol	* fcall -> op2 . constant		3217273						
ANR	3218126	Symbol	call_stack [ call - 1 ] . func		3217273						
ANR	3218127	Symbol	& ZEND_OP2_LITERAL		3217273						
ANR	3218128	Symbol	opline -> op2 . num		3217273						
ANR	3218129	Symbol	* fcall		3217273						
ANR	3218130	Symbol	zend_get_call_op		3217273						
ANR	3218131	Symbol	zend_arena_checkpoint		3217273						
ANR	3218132	Symbol	ZEND_FETCH_TYPE_MASK		3217273						
ANR	3218133	Symbol	* ctx		3217273						
ANR	3218134	Symbol	call		3217273						
ANR	3218135	Symbol	& ctx -> arena		3217273						
ANR	3218136	Symbol	* opline		3217273						
ANR	3218137	Symbol	func		3217273						
ANR	3218138	Symbol	opline -> opcode		3217273						
ANR	3218139	Symbol	function_name		3217273						
ANR	3218140	Symbol	opline -> op2 . constant		3217273						
ANR	3218141	Symbol	Z_CACHE_SLOT		3217273						
ANR	3218142	Symbol	ZEND_ARG_COMPILE_TIME_BOUND		3217273						
ANR	3218143	Symbol	call_stack		3217273						
ANR	3218144	Symbol	ctx -> arena		3217273						
ANR	3218145	Symbol	op_array		3217273						
ANR	3218146	Symbol	ZEND_INIT_FCALL_BY_NAME		3217273						
