command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1156395	File	data/converged/CVE-2015-8617_php-src/ext_mbstring_oniguruma_enc_utf16_be.c								
ANR	1156396	DeclStmt									
ANR	1156397	Decl							const int	const int [ ]	EncLen_UTF16
ANR	1156398	Function	utf16be_mbc_enc_len	51:0:2449:2525							
ANR	1156399	FunctionDef	utf16be_mbc_enc_len (const UChar * p)		1156398	0					
ANR	1156400	CompoundStatement		53:0:2496:2525	1156398	0					
ANR	1156401	ReturnStatement	return EncLen_UTF16 [ * p ] ;	54:2:2500:2523	1156398	0	True				
ANR	1156402	ArrayIndexing	EncLen_UTF16 [ * p ]		1156398	0					
ANR	1156403	Identifier	EncLen_UTF16		1156398	0					
ANR	1156404	UnaryOperationExpression	* p		1156398	1					
ANR	1156405	UnaryOperator	*		1156398	0					
ANR	1156406	Identifier	p		1156398	1					
ANR	1156407	ReturnType	static int		1156398	1					
ANR	1156408	Identifier	utf16be_mbc_enc_len		1156398	2					
ANR	1156409	ParameterList	const UChar * p		1156398	3					
ANR	1156410	Parameter	const UChar * p	52:20:2480:2493	1156398	0	True				
ANR	1156411	ParameterType	const UChar *		1156398	0					
ANR	1156412	Identifier	p		1156398	1					
ANR	1156413	CFGEntryNode	ENTRY		1156398		True				
ANR	1156414	CFGExitNode	EXIT		1156398		True				
ANR	1156415	Symbol	p		1156398						
ANR	1156416	Symbol	* EncLen_UTF16		1156398						
ANR	1156417	Symbol	* p		1156398						
ANR	1156418	Symbol	* * p		1156398						
ANR	1156419	Symbol	EncLen_UTF16		1156398						
ANR	1156420	Function	utf16be_is_mbc_newline	57:0:2528:2932							
ANR	1156421	FunctionDef	"utf16be_is_mbc_newline (const UChar * p , const UChar * end)"		1156420	0					
ANR	1156422	CompoundStatement		59:0:2596:2932	1156420	0					
ANR	1156423	IfStatement	if ( p + 1 < end )		1156420	0					
ANR	1156424	Condition	p + 1 < end	60:6:2604:2614	1156420	0	True				
ANR	1156425	RelationalExpression	p + 1 < end		1156420	0		<			
ANR	1156426	AdditiveExpression	p + 1		1156420	0		+			
ANR	1156427	Identifier	p		1156420	0					
ANR	1156428	PrimaryExpression	1		1156420	1					
ANR	1156429	Identifier	end		1156420	1					
ANR	1156430	CompoundStatement		2:19:20:20	1156420	1					
ANR	1156431	IfStatement	if ( * ( p + 1 ) == 0x0a && * p == 0x00 )		1156420	0					
ANR	1156432	Condition	* ( p + 1 ) == 0x0a && * p == 0x00	61:8:2627:2654	1156420	0	True				
ANR	1156433	AndExpression	* ( p + 1 ) == 0x0a && * p == 0x00		1156420	0		&&			
ANR	1156434	EqualityExpression	* ( p + 1 ) == 0x0a		1156420	0		==			
ANR	1156435	UnaryOperationExpression	* ( p + 1 )		1156420	0					
ANR	1156436	UnaryOperator	*		1156420	0					
ANR	1156437	AdditiveExpression	p + 1		1156420	1		+			
ANR	1156438	Identifier	p		1156420	0					
ANR	1156439	PrimaryExpression	1		1156420	1					
ANR	1156440	PrimaryExpression	0x0a		1156420	1					
ANR	1156441	EqualityExpression	* p == 0x00		1156420	1		==			
ANR	1156442	UnaryOperationExpression	* p		1156420	0					
ANR	1156443	UnaryOperator	*		1156420	0					
ANR	1156444	Identifier	p		1156420	1					
ANR	1156445	PrimaryExpression	0x00		1156420	1					
ANR	1156446	ReturnStatement	return 1 ;	62:6:2663:2671	1156420	1	True				
ANR	1156447	PrimaryExpression	1		1156420	0					
ANR	1156448	Statement	if	64:4:2717:2718	1156420	1	True				
ANR	1156449	Statement	(	64:7:2720:2720	1156420	2	True				
ANR	1156450	Statement	(	64:8:2721:2721	1156420	3	True				
ANR	1156451	Statement	*	66:2:2761:2761	1156420	4	True				
ANR	1156452	Statement	(	66:3:2762:2762	1156420	5	True				
ANR	1156453	Statement	p	66:4:2763:2763	1156420	6	True				
ANR	1156454	Statement	+	66:5:2764:2764	1156420	7	True				
ANR	1156455	Statement	1	66:6:2765:2765	1156420	8	True				
ANR	1156456	Statement	)	66:7:2766:2766	1156420	9	True				
ANR	1156457	Statement	==	66:9:2768:2769	1156420	10	True				
ANR	1156458	Statement	0x0d	66:12:2771:2774	1156420	11	True				
ANR	1156459	Statement	||	66:17:2776:2777	1156420	12	True				
ANR	1156460	Statement	*	68:2:2788:2788	1156420	13	True				
ANR	1156461	Statement	(	68:3:2789:2789	1156420	14	True				
ANR	1156462	Statement	p	68:4:2790:2790	1156420	15	True				
ANR	1156463	Statement	+	68:5:2791:2791	1156420	16	True				
ANR	1156464	Statement	1	68:6:2792:2792	1156420	17	True				
ANR	1156465	Statement	)	68:7:2793:2793	1156420	18	True				
ANR	1156466	Statement	==	68:9:2795:2796	1156420	19	True				
ANR	1156467	Statement	0x85	68:12:2798:2801	1156420	20	True				
ANR	1156468	Statement	)	68:16:2802:2802	1156420	21	True				
ANR	1156469	Statement	&&	68:18:2804:2805	1156420	22	True				
ANR	1156470	Statement	*	68:21:2807:2807	1156420	23	True				
ANR	1156471	Statement	p	68:22:2808:2808	1156420	24	True				
ANR	1156472	Statement	==	68:24:2810:2811	1156420	25	True				
ANR	1156473	Statement	0x00	68:27:2813:2816	1156420	26	True				
ANR	1156474	Statement	)	68:31:2817:2817	1156420	27	True				
ANR	1156475	ReturnStatement	return 1 ;	69:6:2825:2833	1156420	28	True				
ANR	1156476	PrimaryExpression	1		1156420	0					
ANR	1156477	IfStatement	if ( * p == 0x20 && ( * ( p + 1 ) == 0x29 || * ( p + 1 ) == 0x28 ) )		1156420	29					
ANR	1156478	Condition	* p == 0x20 && ( * ( p + 1 ) == 0x29 || * ( p + 1 ) == 0x28 )	70:8:2843:2890	1156420	0	True				
ANR	1156479	AndExpression	* p == 0x20 && ( * ( p + 1 ) == 0x29 || * ( p + 1 ) == 0x28 )		1156420	0		&&			
ANR	1156480	EqualityExpression	* p == 0x20		1156420	0		==			
ANR	1156481	UnaryOperationExpression	* p		1156420	0					
ANR	1156482	UnaryOperator	*		1156420	0					
ANR	1156483	Identifier	p		1156420	1					
ANR	1156484	PrimaryExpression	0x20		1156420	1					
ANR	1156485	OrExpression	* ( p + 1 ) == 0x29 || * ( p + 1 ) == 0x28		1156420	1		||			
ANR	1156486	EqualityExpression	* ( p + 1 ) == 0x29		1156420	0		==			
ANR	1156487	UnaryOperationExpression	* ( p + 1 )		1156420	0					
ANR	1156488	UnaryOperator	*		1156420	0					
ANR	1156489	AdditiveExpression	p + 1		1156420	1		+			
ANR	1156490	Identifier	p		1156420	0					
ANR	1156491	PrimaryExpression	1		1156420	1					
ANR	1156492	PrimaryExpression	0x29		1156420	1					
ANR	1156493	EqualityExpression	* ( p + 1 ) == 0x28		1156420	1		==			
ANR	1156494	UnaryOperationExpression	* ( p + 1 )		1156420	0					
ANR	1156495	UnaryOperator	*		1156420	0					
ANR	1156496	AdditiveExpression	p + 1		1156420	1		+			
ANR	1156497	Identifier	p		1156420	0					
ANR	1156498	PrimaryExpression	1		1156420	1					
ANR	1156499	PrimaryExpression	0x28		1156420	1					
ANR	1156500	ReturnStatement	return 1 ;	71:6:2899:2907	1156420	1	True				
ANR	1156501	PrimaryExpression	1		1156420	0					
ANR	1156502	ReturnStatement	return 0 ;	74:2:2922:2930	1156420	1	True				
ANR	1156503	PrimaryExpression	0		1156420	0					
ANR	1156504	ReturnType	static int		1156420	1					
ANR	1156505	Identifier	utf16be_is_mbc_newline		1156420	2					
ANR	1156506	ParameterList	"const UChar * p , const UChar * end"		1156420	3					
ANR	1156507	Parameter	const UChar * p	58:23:2562:2575	1156420	0	True				
ANR	1156508	ParameterType	const UChar *		1156420	0					
ANR	1156509	Identifier	p		1156420	1					
ANR	1156510	Parameter	const UChar * end	58:39:2578:2593	1156420	1	True				
ANR	1156511	ParameterType	const UChar *		1156420	0					
ANR	1156512	Identifier	end		1156420	1					
ANR	1156513	CFGEntryNode	ENTRY		1156420		True				
ANR	1156514	CFGExitNode	EXIT		1156420		True				
ANR	1156515	Symbol	p		1156420						
ANR	1156516	Symbol	end		1156420						
ANR	1156517	Symbol	* p		1156420						
ANR	1156518	Symbol	* ( p + 1 )		1156420						
ANR	1156519	DeclStmt									
ANR	1156520	Decl							OnigCodePoint	OnigCodePoint	code
ANR	1156521	Function	utf16be_code_to_mbclen	93:0:3292:3382							
ANR	1156522	FunctionDef	utf16be_code_to_mbclen (OnigCodePoint code)		1156521	0					
ANR	1156523	CompoundStatement		95:0:3346:3382	1156521	0					
ANR	1156524	ReturnStatement	return ( code > 0xffff ? 4 : 2 ) ;	96:2:3350:3380	1156521	0	True				
ANR	1156525	ConditionalExpression	code > 0xffff ? 4 : 2		1156521	0					
ANR	1156526	Condition	code > 0xffff		1156521	0					
ANR	1156527	RelationalExpression	code > 0xffff		1156521	0		>			
ANR	1156528	Identifier	code		1156521	0					
ANR	1156529	PrimaryExpression	0xffff		1156521	1					
ANR	1156530	PrimaryExpression	4		1156521	1					
ANR	1156531	PrimaryExpression	2		1156521	2					
ANR	1156532	ReturnType	static int		1156521	1					
ANR	1156533	Identifier	utf16be_code_to_mbclen		1156521	2					
ANR	1156534	ParameterList	OnigCodePoint code		1156521	3					
ANR	1156535	Parameter	OnigCodePoint code	94:23:3326:3343	1156521	0	True				
ANR	1156536	ParameterType	OnigCodePoint		1156521	0					
ANR	1156537	Identifier	code		1156521	1					
ANR	1156538	CFGEntryNode	ENTRY		1156521		True				
ANR	1156539	CFGExitNode	EXIT		1156521		True				
ANR	1156540	Symbol	code		1156521						
ANR	1156541	Function	utf16be_code_to_mbc	99:0:3385:3855							
ANR	1156542	FunctionDef	"utf16be_code_to_mbc (OnigCodePoint code , UChar * buf)"		1156541	0					
ANR	1156543	CompoundStatement		101:0:3448:3855	1156541	0					
ANR	1156544	IdentifierDeclStatement	UChar * p = buf ;	102:2:3452:3466	1156541	0	True				
ANR	1156545	IdentifierDecl	* p = buf		1156541	0					
ANR	1156546	IdentifierDeclType	UChar *		1156541	0					
ANR	1156547	Identifier	p		1156541	1					
ANR	1156548	AssignmentExpression	* p = buf		1156541	2		=			
ANR	1156549	Identifier	buf		1156541	0					
ANR	1156550	Identifier	buf		1156541	1					
ANR	1156551	IfStatement	if ( code > 0xffff )		1156541	1					
ANR	1156552	Condition	code > 0xffff	104:6:3475:3487	1156541	0	True				
ANR	1156553	RelationalExpression	code > 0xffff		1156541	0		>			
ANR	1156554	Identifier	code		1156541	0					
ANR	1156555	PrimaryExpression	0xffff		1156541	1					
ANR	1156556	CompoundStatement		5:4:47:71	1156541	1					
ANR	1156557	IdentifierDeclStatement	"unsigned int plane , high ;"	105:4:3496:3520	1156541	0	True				
ANR	1156558	IdentifierDecl	plane		1156541	0					
ANR	1156559	IdentifierDeclType	unsigned int		1156541	0					
ANR	1156560	Identifier	plane		1156541	1					
ANR	1156561	IdentifierDecl	high		1156541	1					
ANR	1156562	IdentifierDeclType	unsigned int		1156541	0					
ANR	1156563	Identifier	high		1156541	1					
ANR	1156564	ExpressionStatement	plane = ( code >> 16 ) - 1	107:4:3527:3551	1156541	1	True				
ANR	1156565	AssignmentExpression	plane = ( code >> 16 ) - 1		1156541	0		=			
ANR	1156566	Identifier	plane		1156541	0					
ANR	1156567	AdditiveExpression	( code >> 16 ) - 1		1156541	1		-			
ANR	1156568	ShiftExpression	code >> 16		1156541	0		>>			
ANR	1156569	Identifier	code		1156541	0					
ANR	1156570	PrimaryExpression	16		1156541	1					
ANR	1156571	PrimaryExpression	1		1156541	1					
ANR	1156572	ExpressionStatement	* p ++ = ( plane >> 2 ) + 0xd8	108:4:3557:3583	1156541	2	True				
ANR	1156573	AssignmentExpression	* p ++ = ( plane >> 2 ) + 0xd8		1156541	0		=			
ANR	1156574	UnaryOperationExpression	* p ++		1156541	0					
ANR	1156575	UnaryOperator	*		1156541	0					
ANR	1156576	PostIncDecOperationExpression	p ++		1156541	1					
ANR	1156577	Identifier	p		1156541	0					
ANR	1156578	IncDec	++		1156541	1					
ANR	1156579	AdditiveExpression	( plane >> 2 ) + 0xd8		1156541	1		+			
ANR	1156580	ShiftExpression	plane >> 2		1156541	0		>>			
ANR	1156581	Identifier	plane		1156541	0					
ANR	1156582	PrimaryExpression	2		1156541	1					
ANR	1156583	PrimaryExpression	0xd8		1156541	1					
ANR	1156584	ExpressionStatement	high = ( code & 0xff00 ) >> 8	109:4:3589:3616	1156541	3	True				
ANR	1156585	AssignmentExpression	high = ( code & 0xff00 ) >> 8		1156541	0		=			
ANR	1156586	Identifier	high		1156541	0					
ANR	1156587	ShiftExpression	( code & 0xff00 ) >> 8		1156541	1		>>			
ANR	1156588	BitAndExpression	code & 0xff00		1156541	0		&			
ANR	1156589	Identifier	code		1156541	0					
ANR	1156590	PrimaryExpression	0xff00		1156541	1					
ANR	1156591	PrimaryExpression	8		1156541	1					
ANR	1156592	ExpressionStatement	* p ++ = ( ( plane & 0x03 ) << 6 ) + ( high >> 2 )	110:4:3622:3664	1156541	4	True				
ANR	1156593	AssignmentExpression	* p ++ = ( ( plane & 0x03 ) << 6 ) + ( high >> 2 )		1156541	0		=			
ANR	1156594	UnaryOperationExpression	* p ++		1156541	0					
ANR	1156595	UnaryOperator	*		1156541	0					
ANR	1156596	PostIncDecOperationExpression	p ++		1156541	1					
ANR	1156597	Identifier	p		1156541	0					
ANR	1156598	IncDec	++		1156541	1					
ANR	1156599	AdditiveExpression	( ( plane & 0x03 ) << 6 ) + ( high >> 2 )		1156541	1		+			
ANR	1156600	ShiftExpression	( plane & 0x03 ) << 6		1156541	0		<<			
ANR	1156601	BitAndExpression	plane & 0x03		1156541	0		&			
ANR	1156602	Identifier	plane		1156541	0					
ANR	1156603	PrimaryExpression	0x03		1156541	1					
ANR	1156604	PrimaryExpression	6		1156541	1					
ANR	1156605	ShiftExpression	high >> 2		1156541	1		>>			
ANR	1156606	Identifier	high		1156541	0					
ANR	1156607	PrimaryExpression	2		1156541	1					
ANR	1156608	ExpressionStatement	* p ++ = ( high & 0x03 ) + 0xdc	111:4:3670:3697	1156541	5	True				
ANR	1156609	AssignmentExpression	* p ++ = ( high & 0x03 ) + 0xdc		1156541	0		=			
ANR	1156610	UnaryOperationExpression	* p ++		1156541	0					
ANR	1156611	UnaryOperator	*		1156541	0					
ANR	1156612	PostIncDecOperationExpression	p ++		1156541	1					
ANR	1156613	Identifier	p		1156541	0					
ANR	1156614	IncDec	++		1156541	1					
ANR	1156615	AdditiveExpression	( high & 0x03 ) + 0xdc		1156541	1		+			
ANR	1156616	BitAndExpression	high & 0x03		1156541	0		&			
ANR	1156617	Identifier	high		1156541	0					
ANR	1156618	PrimaryExpression	0x03		1156541	1					
ANR	1156619	PrimaryExpression	0xdc		1156541	1					
ANR	1156620	ExpressionStatement	* p = ( UChar ) ( code & 0xff )	112:4:3703:3731	1156541	6	True				
ANR	1156621	AssignmentExpression	* p = ( UChar ) ( code & 0xff )		1156541	0		=			
ANR	1156622	UnaryOperationExpression	* p		1156541	0					
ANR	1156623	UnaryOperator	*		1156541	0					
ANR	1156624	Identifier	p		1156541	1					
ANR	1156625	CastExpression	( UChar ) ( code & 0xff )		1156541	1					
ANR	1156626	CastTarget	UChar		1156541	0					
ANR	1156627	BitAndExpression	code & 0xff		1156541	1		&			
ANR	1156628	Identifier	code		1156541	0					
ANR	1156629	PrimaryExpression	0xff		1156541	1					
ANR	1156630	ReturnStatement	return 4 ;	113:4:3737:3745	1156541	7	True				
ANR	1156631	PrimaryExpression	4		1156541	0					
ANR	1156632	ElseStatement	else		1156541	0					
ANR	1156633	CompoundStatement		15:7:309:309	1156541	0					
ANR	1156634	ExpressionStatement	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )	116:4:3764:3801	1156541	0	True				
ANR	1156635	AssignmentExpression	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )		1156541	0		=			
ANR	1156636	UnaryOperationExpression	* p ++		1156541	0					
ANR	1156637	UnaryOperator	*		1156541	0					
ANR	1156638	PostIncDecOperationExpression	p ++		1156541	1					
ANR	1156639	Identifier	p		1156541	0					
ANR	1156640	IncDec	++		1156541	1					
ANR	1156641	CastExpression	( UChar ) ( ( code & 0xff00 ) >> 8 )		1156541	1					
ANR	1156642	CastTarget	UChar		1156541	0					
ANR	1156643	ShiftExpression	( code & 0xff00 ) >> 8		1156541	1		>>			
ANR	1156644	BitAndExpression	code & 0xff00		1156541	0		&			
ANR	1156645	Identifier	code		1156541	0					
ANR	1156646	PrimaryExpression	0xff00		1156541	1					
ANR	1156647	PrimaryExpression	8		1156541	1					
ANR	1156648	ExpressionStatement	* p ++ = ( UChar ) ( code & 0xff )	117:4:3807:3835	1156541	1	True				
ANR	1156649	AssignmentExpression	* p ++ = ( UChar ) ( code & 0xff )		1156541	0		=			
ANR	1156650	UnaryOperationExpression	* p ++		1156541	0					
ANR	1156651	UnaryOperator	*		1156541	0					
ANR	1156652	PostIncDecOperationExpression	p ++		1156541	1					
ANR	1156653	Identifier	p		1156541	0					
ANR	1156654	IncDec	++		1156541	1					
ANR	1156655	CastExpression	( UChar ) ( code & 0xff )		1156541	1					
ANR	1156656	CastTarget	UChar		1156541	0					
ANR	1156657	BitAndExpression	code & 0xff		1156541	1		&			
ANR	1156658	Identifier	code		1156541	0					
ANR	1156659	PrimaryExpression	0xff		1156541	1					
ANR	1156660	ReturnStatement	return 2 ;	118:4:3841:3849	1156541	2	True				
ANR	1156661	PrimaryExpression	2		1156541	0					
ANR	1156662	ReturnType	static int		1156541	1					
ANR	1156663	Identifier	utf16be_code_to_mbc		1156541	2					
ANR	1156664	ParameterList	"OnigCodePoint code , UChar * buf"		1156541	3					
ANR	1156665	Parameter	OnigCodePoint code	100:20:3416:3433	1156541	0	True				
ANR	1156666	ParameterType	OnigCodePoint		1156541	0					
ANR	1156667	Identifier	code		1156541	1					
ANR	1156668	Parameter	UChar * buf	100:40:3436:3445	1156541	1	True				
ANR	1156669	ParameterType	UChar *		1156541	0					
ANR	1156670	Identifier	buf		1156541	1					
ANR	1156671	CFGEntryNode	ENTRY		1156541		True				
ANR	1156672	CFGExitNode	EXIT		1156541		True				
ANR	1156673	Symbol	p		1156541						
ANR	1156674	Symbol	plane		1156541						
ANR	1156675	Symbol	buf		1156541						
ANR	1156676	Symbol	high		1156541						
ANR	1156677	Symbol	code		1156541						
ANR	1156678	Symbol	* p ++		1156541						
ANR	1156679	Symbol	* p		1156541						
ANR	1156680	Function	utf16be_mbc_case_fold	122:0:3858:4462							
ANR	1156681	FunctionDef	"utf16be_mbc_case_fold (OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold)"		1156680	0					
ANR	1156682	CompoundStatement		125:0:3971:4462	1156680	0					
ANR	1156683	IdentifierDeclStatement	const UChar * p = * pp ;	126:2:3975:3995	1156680	0	True				
ANR	1156684	IdentifierDecl	* p = * pp		1156680	0					
ANR	1156685	IdentifierDeclType	const UChar *		1156680	0					
ANR	1156686	Identifier	p		1156680	1					
ANR	1156687	AssignmentExpression	* p = * pp		1156680	2		=			
ANR	1156688	Identifier	p		1156680	0					
ANR	1156689	UnaryOperationExpression	* pp		1156680	1					
ANR	1156690	UnaryOperator	*		1156680	0					
ANR	1156691	Identifier	pp		1156680	1					
ANR	1156692	IfStatement	if ( ONIGENC_IS_ASCII_CODE ( * ( p + 1 ) ) && * p == 0 )		1156680	1					
ANR	1156693	Condition	ONIGENC_IS_ASCII_CODE ( * ( p + 1 ) ) && * p == 0	128:6:4004:4043	1156680	0	True				
ANR	1156694	AndExpression	ONIGENC_IS_ASCII_CODE ( * ( p + 1 ) ) && * p == 0		1156680	0		&&			
ANR	1156695	CallExpression	ONIGENC_IS_ASCII_CODE ( * ( p + 1 ) )		1156680	0					
ANR	1156696	Callee	ONIGENC_IS_ASCII_CODE		1156680	0					
ANR	1156697	Identifier	ONIGENC_IS_ASCII_CODE		1156680	0					
ANR	1156698	ArgumentList	* ( p + 1 )		1156680	1					
ANR	1156699	Argument	* ( p + 1 )		1156680	0					
ANR	1156700	UnaryOperationExpression	* ( p + 1 )		1156680	0					
ANR	1156701	UnaryOperator	*		1156680	0					
ANR	1156702	AdditiveExpression	p + 1		1156680	1		+			
ANR	1156703	Identifier	p		1156680	0					
ANR	1156704	PrimaryExpression	1		1156680	1					
ANR	1156705	EqualityExpression	* p == 0		1156680	1		==			
ANR	1156706	UnaryOperationExpression	* p		1156680	0					
ANR	1156707	UnaryOperator	*		1156680	0					
ANR	1156708	Identifier	p		1156680	1					
ANR	1156709	PrimaryExpression	0		1156680	1					
ANR	1156710	CompoundStatement		4:48:74:74	1156680	1					
ANR	1156711	ExpressionStatement	p ++	129:4:4052:4055	1156680	0	True				
ANR	1156712	PostIncDecOperationExpression	p ++		1156680	0					
ANR	1156713	Identifier	p		1156680	0					
ANR	1156714	IncDec	++		1156680	1					
ANR	1156715	IfStatement	if ( ( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0 )		1156680	1					
ANR	1156716	Condition	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0	131:8:4108:4152	1156680	0	True				
ANR	1156717	EqualityExpression	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0		1156680	0		!=			
ANR	1156718	BitAndExpression	flag & ONIGENC_CASE_FOLD_TURKISH_AZERI		1156680	0		&			
ANR	1156719	Identifier	flag		1156680	0					
ANR	1156720	Identifier	ONIGENC_CASE_FOLD_TURKISH_AZERI		1156680	1					
ANR	1156721	PrimaryExpression	0		1156680	1					
ANR	1156722	CompoundStatement		7:55:183:183	1156680	1					
ANR	1156723	IfStatement	if ( * p == 0x49 )		1156680	0					
ANR	1156724	Condition	* p == 0x49	132:10:4167:4176	1156680	0	True				
ANR	1156725	EqualityExpression	* p == 0x49		1156680	0		==			
ANR	1156726	UnaryOperationExpression	* p		1156680	0					
ANR	1156727	UnaryOperator	*		1156680	0					
ANR	1156728	Identifier	p		1156680	1					
ANR	1156729	PrimaryExpression	0x49		1156680	1					
ANR	1156730	CompoundStatement		8:22:207:207	1156680	1					
ANR	1156731	ExpressionStatement	* fold ++ = 0x01	133:1:4182:4196	1156680	0	True				
ANR	1156732	AssignmentExpression	* fold ++ = 0x01		1156680	0		=			
ANR	1156733	UnaryOperationExpression	* fold ++		1156680	0					
ANR	1156734	UnaryOperator	*		1156680	0					
ANR	1156735	PostIncDecOperationExpression	fold ++		1156680	1					
ANR	1156736	Identifier	fold		1156680	0					
ANR	1156737	IncDec	++		1156680	1					
ANR	1156738	PrimaryExpression	0x01		1156680	1					
ANR	1156739	ExpressionStatement	* fold = 0x31	134:1:4199:4213	1156680	1	True				
ANR	1156740	AssignmentExpression	* fold = 0x31		1156680	0		=			
ANR	1156741	UnaryOperationExpression	* fold		1156680	0					
ANR	1156742	UnaryOperator	*		1156680	0					
ANR	1156743	Identifier	fold		1156680	1					
ANR	1156744	PrimaryExpression	0x31		1156680	1					
ANR	1156745	ExpressionStatement	( * pp ) += 2	135:1:4216:4226	1156680	2	True				
ANR	1156746	AssignmentExpression	( * pp ) += 2		1156680	0		+=			
ANR	1156747	UnaryOperationExpression	* pp		1156680	0					
ANR	1156748	UnaryOperator	*		1156680	0					
ANR	1156749	Identifier	pp		1156680	1					
ANR	1156750	PrimaryExpression	2		1156680	1					
ANR	1156751	ReturnStatement	return 2 ;	136:1:4229:4237	1156680	3	True				
ANR	1156752	PrimaryExpression	2		1156680	0					
ANR	1156753	ExpressionStatement	* fold ++ = 0	141:4:4265:4276	1156680	2	True				
ANR	1156754	AssignmentExpression	* fold ++ = 0		1156680	0		=			
ANR	1156755	UnaryOperationExpression	* fold ++		1156680	0					
ANR	1156756	UnaryOperator	*		1156680	0					
ANR	1156757	PostIncDecOperationExpression	fold ++		1156680	1					
ANR	1156758	Identifier	fold		1156680	0					
ANR	1156759	IncDec	++		1156680	1					
ANR	1156760	PrimaryExpression	0		1156680	1					
ANR	1156761	ExpressionStatement	* fold = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )	142:4:4282:4328	1156680	3	True				
ANR	1156762	AssignmentExpression	* fold = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )		1156680	0		=			
ANR	1156763	UnaryOperationExpression	* fold		1156680	0					
ANR	1156764	UnaryOperator	*		1156680	0					
ANR	1156765	Identifier	fold		1156680	1					
ANR	1156766	CallExpression	ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * p )		1156680	1					
ANR	1156767	Callee	ONIGENC_ASCII_CODE_TO_LOWER_CASE		1156680	0					
ANR	1156768	Identifier	ONIGENC_ASCII_CODE_TO_LOWER_CASE		1156680	0					
ANR	1156769	ArgumentList	* p		1156680	1					
ANR	1156770	Argument	* p		1156680	0					
ANR	1156771	UnaryOperationExpression	* p		1156680	0					
ANR	1156772	UnaryOperator	*		1156680	0					
ANR	1156773	Identifier	p		1156680	1					
ANR	1156774	ExpressionStatement	* pp += 2	143:4:4334:4342	1156680	4	True				
ANR	1156775	AssignmentExpression	* pp += 2		1156680	0		+=			
ANR	1156776	UnaryOperationExpression	* pp		1156680	0					
ANR	1156777	UnaryOperator	*		1156680	0					
ANR	1156778	Identifier	pp		1156680	1					
ANR	1156779	PrimaryExpression	2		1156680	1					
ANR	1156780	ReturnStatement	return 2 ;	144:4:4348:4356	1156680	5	True				
ANR	1156781	PrimaryExpression	2		1156680	0					
ANR	1156782	ElseStatement	else		1156680	0					
ANR	1156783	ReturnStatement	"return onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF16_BE , flag , pp , end , fold ) ;"	147:4:4373:4460	1156680	0	True				
ANR	1156784	CallExpression	"onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF16_BE , flag , pp , end , fold )"		1156680	0					
ANR	1156785	Callee	onigenc_unicode_mbc_case_fold		1156680	0					
ANR	1156786	Identifier	onigenc_unicode_mbc_case_fold		1156680	0					
ANR	1156787	ArgumentList	ONIG_ENCODING_UTF16_BE		1156680	1					
ANR	1156788	Argument	ONIG_ENCODING_UTF16_BE		1156680	0					
ANR	1156789	Identifier	ONIG_ENCODING_UTF16_BE		1156680	0					
ANR	1156790	Argument	flag		1156680	1					
ANR	1156791	Identifier	flag		1156680	0					
ANR	1156792	Argument	pp		1156680	2					
ANR	1156793	Identifier	pp		1156680	0					
ANR	1156794	Argument	end		1156680	3					
ANR	1156795	Identifier	end		1156680	0					
ANR	1156796	Argument	fold		1156680	4					
ANR	1156797	Identifier	fold		1156680	0					
ANR	1156798	ReturnType	static int		1156680	1					
ANR	1156799	Identifier	utf16be_mbc_case_fold		1156680	2					
ANR	1156800	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold"		1156680	3					
ANR	1156801	Parameter	OnigCaseFoldType flag	123:22:3891:3911	1156680	0	True				
ANR	1156802	ParameterType	OnigCaseFoldType		1156680	0					
ANR	1156803	Identifier	flag		1156680	1					
ANR	1156804	Parameter	const UChar * * pp	124:8:3922:3937	1156680	1	True				
ANR	1156805	ParameterType	const UChar * *		1156680	0					
ANR	1156806	Identifier	pp		1156680	1					
ANR	1156807	Parameter	const UChar * end	124:26:3940:3955	1156680	2	True				
ANR	1156808	ParameterType	const UChar *		1156680	0					
ANR	1156809	Identifier	end		1156680	1					
ANR	1156810	Parameter	UChar * fold	124:44:3958:3968	1156680	3	True				
ANR	1156811	ParameterType	UChar *		1156680	0					
ANR	1156812	Identifier	fold		1156680	1					
ANR	1156813	CFGEntryNode	ENTRY		1156680		True				
ANR	1156814	CFGExitNode	EXIT		1156680		True				
ANR	1156815	Symbol	pp		1156680						
ANR	1156816	Symbol	ONIGENC_IS_ASCII_CODE		1156680						
ANR	1156817	Symbol	flag		1156680						
ANR	1156818	Symbol	* pp		1156680						
ANR	1156819	Symbol	* fold		1156680						
ANR	1156820	Symbol	* ( p + 1 )		1156680						
ANR	1156821	Symbol	* fold ++		1156680						
ANR	1156822	Symbol	p		1156680						
ANR	1156823	Symbol	fold		1156680						
ANR	1156824	Symbol	ONIGENC_ASCII_CODE_TO_LOWER_CASE		1156680						
ANR	1156825	Symbol	ONIGENC_CASE_FOLD_TURKISH_AZERI		1156680						
ANR	1156826	Symbol	ONIG_ENCODING_UTF16_BE		1156680						
ANR	1156827	Symbol	end		1156680						
ANR	1156828	Symbol	* p		1156680						
ANR	1156829	Symbol	onigenc_unicode_mbc_case_fold		1156680						
ANR	1156830	Function	utf16be_is_mbc_ambiguous	152:0:4471:5117							
ANR	1156831	FunctionDef	"utf16be_is_mbc_ambiguous (OnigCaseFoldType flag , const UChar * * pp , const UChar * end)"		1156830	0					
ANR	1156832	CompoundStatement		154:0:4566:5117	1156830	0					
ANR	1156833	IdentifierDeclStatement	const UChar * p = * pp ;	155:2:4570:4590	1156830	0	True				
ANR	1156834	IdentifierDecl	* p = * pp		1156830	0					
ANR	1156835	IdentifierDeclType	const UChar *		1156830	0					
ANR	1156836	Identifier	p		1156830	1					
ANR	1156837	AssignmentExpression	* p = * pp		1156830	2		=			
ANR	1156838	Identifier	p		1156830	0					
ANR	1156839	UnaryOperationExpression	* pp		1156830	1					
ANR	1156840	UnaryOperator	*		1156830	0					
ANR	1156841	Identifier	pp		1156830	1					
ANR	1156842	ExpressionStatement	( * pp ) += EncLen_UTF16 [ * p ]	157:2:4595:4620	1156830	1	True				
ANR	1156843	AssignmentExpression	( * pp ) += EncLen_UTF16 [ * p ]		1156830	0		+=			
ANR	1156844	UnaryOperationExpression	* pp		1156830	0					
ANR	1156845	UnaryOperator	*		1156830	0					
ANR	1156846	Identifier	pp		1156830	1					
ANR	1156847	ArrayIndexing	EncLen_UTF16 [ * p ]		1156830	1					
ANR	1156848	Identifier	EncLen_UTF16		1156830	0					
ANR	1156849	UnaryOperationExpression	* p		1156830	1					
ANR	1156850	UnaryOperator	*		1156830	0					
ANR	1156851	Identifier	p		1156830	1					
ANR	1156852	IfStatement	if ( * p == 0 )		1156830	2					
ANR	1156853	Condition	* p == 0	159:6:4629:4635	1156830	0	True				
ANR	1156854	EqualityExpression	* p == 0		1156830	0		==			
ANR	1156855	UnaryOperationExpression	* p		1156830	0					
ANR	1156856	UnaryOperator	*		1156830	0					
ANR	1156857	Identifier	p		1156830	1					
ANR	1156858	PrimaryExpression	0		1156830	1					
ANR	1156859	CompoundStatement		7:4:77:85	1156830	1					
ANR	1156860	IdentifierDeclStatement	"int c , v ;"	160:4:4644:4652	1156830	0	True				
ANR	1156861	IdentifierDecl	c		1156830	0					
ANR	1156862	IdentifierDeclType	int		1156830	0					
ANR	1156863	Identifier	c		1156830	1					
ANR	1156864	IdentifierDecl	v		1156830	1					
ANR	1156865	IdentifierDeclType	int		1156830	0					
ANR	1156866	Identifier	v		1156830	1					
ANR	1156867	ExpressionStatement	p ++	162:4:4659:4662	1156830	1	True				
ANR	1156868	PostIncDecOperationExpression	p ++		1156830	0					
ANR	1156869	Identifier	p		1156830	0					
ANR	1156870	IncDec	++		1156830	1					
ANR	1156871	IfStatement	if ( * p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0 )		1156830	2					
ANR	1156872	Condition	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0	163:8:4672:4736	1156830	0	True				
ANR	1156873	AndExpression	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		1156830	0		&&			
ANR	1156874	EqualityExpression	* p == 0xdf		1156830	0		==			
ANR	1156875	UnaryOperationExpression	* p		1156830	0					
ANR	1156876	UnaryOperator	*		1156830	0					
ANR	1156877	Identifier	p		1156830	1					
ANR	1156878	PrimaryExpression	0xdf		1156830	1					
ANR	1156879	EqualityExpression	( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		1156830	1		!=			
ANR	1156880	BitAndExpression	flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		1156830	0		&			
ANR	1156881	Identifier	flag		1156830	0					
ANR	1156882	Identifier	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		1156830	1					
ANR	1156883	PrimaryExpression	0		1156830	1					
ANR	1156884	CompoundStatement		10:75:172:172	1156830	1					
ANR	1156885	ReturnStatement	return TRUE ;	164:6:4747:4758	1156830	0	True				
ANR	1156886	Identifier	TRUE		1156830	0					
ANR	1156887	ExpressionStatement	c = * p	167:4:4771:4777	1156830	3	True				
ANR	1156888	AssignmentExpression	c = * p		1156830	0		=			
ANR	1156889	Identifier	c		1156830	0					
ANR	1156890	UnaryOperationExpression	* p		1156830	1					
ANR	1156891	UnaryOperator	*		1156830	0					
ANR	1156892	Identifier	p		1156830	1					
ANR	1156893	ExpressionStatement	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"	168:4:4783:4868	1156830	4	True				
ANR	1156894	AssignmentExpression	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		1156830	0		=			
ANR	1156895	Identifier	v		1156830	0					
ANR	1156896	CallExpression	"ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		1156830	1					
ANR	1156897	Callee	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		1156830	0					
ANR	1156898	Identifier	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		1156830	0					
ANR	1156899	ArgumentList	c		1156830	1					
ANR	1156900	Argument	c		1156830	0					
ANR	1156901	Identifier	c		1156830	0					
ANR	1156902	Argument	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		1156830	1					
ANR	1156903	InclusiveOrExpression	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		1156830	0		|			
ANR	1156904	Identifier	BIT_CTYPE_UPPER		1156830	0					
ANR	1156905	Identifier	BIT_CTYPE_LOWER		1156830	1					
ANR	1156906	IfStatement	if ( ( v | BIT_CTYPE_LOWER ) != 0 )		1156830	5					
ANR	1156907	Condition	( v | BIT_CTYPE_LOWER ) != 0	171:8:4879:4904	1156830	0	True				
ANR	1156908	EqualityExpression	( v | BIT_CTYPE_LOWER ) != 0		1156830	0		!=			
ANR	1156909	InclusiveOrExpression	v | BIT_CTYPE_LOWER		1156830	0		|			
ANR	1156910	Identifier	v		1156830	0					
ANR	1156911	Identifier	BIT_CTYPE_LOWER		1156830	1					
ANR	1156912	PrimaryExpression	0		1156830	1					
ANR	1156913	CompoundStatement		18:36:340:340	1156830	1					
ANR	1156914	IfStatement	if ( c >= 0xaa && c <= 0xba )		1156830	0					
ANR	1156915	Condition	c >= 0xaa && c <= 0xba	173:10:4990:5011	1156830	0	True				
ANR	1156916	AndExpression	c >= 0xaa && c <= 0xba		1156830	0		&&			
ANR	1156917	RelationalExpression	c >= 0xaa		1156830	0		>=			
ANR	1156918	Identifier	c		1156830	0					
ANR	1156919	PrimaryExpression	0xaa		1156830	1					
ANR	1156920	RelationalExpression	c <= 0xba		1156830	1		<=			
ANR	1156921	Identifier	c		1156830	0					
ANR	1156922	PrimaryExpression	0xba		1156830	1					
ANR	1156923	ReturnStatement	return FALSE ;	174:1:5015:5027	1156830	1	True				
ANR	1156924	Identifier	FALSE		1156830	0					
ANR	1156925	ElseStatement	else		1156830	0					
ANR	1156926	ReturnStatement	return TRUE ;	176:1:5041:5052	1156830	0	True				
ANR	1156927	Identifier	TRUE		1156830	0					
ANR	1156928	ReturnStatement	return ( v != 0 ? TRUE : FALSE ) ;	178:4:5064:5094	1156830	6	True				
ANR	1156929	ConditionalExpression	v != 0 ? TRUE : FALSE		1156830	0					
ANR	1156930	Condition	v != 0		1156830	0					
ANR	1156931	EqualityExpression	v != 0		1156830	0		!=			
ANR	1156932	Identifier	v		1156830	0					
ANR	1156933	PrimaryExpression	0		1156830	1					
ANR	1156934	Identifier	TRUE		1156830	1					
ANR	1156935	Identifier	FALSE		1156830	2					
ANR	1156936	ReturnStatement	return FALSE ;	181:2:5103:5115	1156830	3	True				
ANR	1156937	Identifier	FALSE		1156830	0					
ANR	1156938	ReturnType	static int		1156830	1					
ANR	1156939	Identifier	utf16be_is_mbc_ambiguous		1156830	2					
ANR	1156940	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end"		1156830	3					
ANR	1156941	Parameter	OnigCaseFoldType flag	153:25:4507:4527	1156830	0	True				
ANR	1156942	ParameterType	OnigCaseFoldType		1156830	0					
ANR	1156943	Identifier	flag		1156830	1					
ANR	1156944	Parameter	const UChar * * pp	153:48:4530:4545	1156830	1	True				
ANR	1156945	ParameterType	const UChar * *		1156830	0					
ANR	1156946	Identifier	pp		1156830	1					
ANR	1156947	Parameter	const UChar * end	153:66:4548:4563	1156830	2	True				
ANR	1156948	ParameterType	const UChar *		1156830	0					
ANR	1156949	Identifier	end		1156830	1					
ANR	1156950	CFGEntryNode	ENTRY		1156830		True				
ANR	1156951	CFGExitNode	EXIT		1156830		True				
ANR	1156952	Symbol	pp		1156830						
ANR	1156953	Symbol	flag		1156830						
ANR	1156954	Symbol	c		1156830						
ANR	1156955	Symbol	* pp		1156830						
ANR	1156956	Symbol	* EncLen_UTF16		1156830						
ANR	1156957	Symbol	TRUE		1156830						
ANR	1156958	Symbol	p		1156830						
ANR	1156959	Symbol	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		1156830						
ANR	1156960	Symbol	v		1156830						
ANR	1156961	Symbol	BIT_CTYPE_LOWER		1156830						
ANR	1156962	Symbol	end		1156830						
ANR	1156963	Symbol	* p		1156830						
ANR	1156964	Symbol	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		1156830						
ANR	1156965	Symbol	BIT_CTYPE_UPPER		1156830						
ANR	1156966	Symbol	FALSE		1156830						
ANR	1156967	Symbol	EncLen_UTF16		1156830						
ANR	1156968	Symbol	* * p		1156830						
ANR	1156969	Function	utf16be_left_adjust_char_head	185:0:5127:5379							
ANR	1156970	FunctionDef	"utf16be_left_adjust_char_head (const UChar * start , const UChar * s)"		1156969	0					
ANR	1156971	CompoundStatement		187:0:5207:5379	1156969	0					
ANR	1156972	IfStatement	if ( s <= start )		1156969	0					
ANR	1156973	Condition	s <= start	188:6:5215:5224	1156969	0	True				
ANR	1156974	RelationalExpression	s <= start		1156969	0		<=			
ANR	1156975	Identifier	s		1156969	0					
ANR	1156976	Identifier	start		1156969	1					
ANR	1156977	ReturnStatement	return ( UChar * ) s ;	188:18:5227:5244	1156969	1	True				
ANR	1156978	CastExpression	( UChar * ) s		1156969	0					
ANR	1156979	CastTarget	UChar *		1156969	0					
ANR	1156980	Identifier	s		1156969	1					
ANR	1156981	IfStatement	if ( ( s - start ) % 2 == 1 )		1156969	1					
ANR	1156982	Condition	( s - start ) % 2 == 1	190:6:5253:5272	1156969	0	True				
ANR	1156983	EqualityExpression	( s - start ) % 2 == 1		1156969	0		==			
ANR	1156984	MultiplicativeExpression	( s - start ) % 2		1156969	0		%			
ANR	1156985	AdditiveExpression	s - start		1156969	0		-			
ANR	1156986	Identifier	s		1156969	0					
ANR	1156987	Identifier	start		1156969	1					
ANR	1156988	PrimaryExpression	2		1156969	1					
ANR	1156989	PrimaryExpression	1		1156969	1					
ANR	1156990	CompoundStatement		4:28:67:67	1156969	1					
ANR	1156991	ExpressionStatement	s --	191:4:5281:5284	1156969	0	True				
ANR	1156992	PostIncDecOperationExpression	s --		1156969	0					
ANR	1156993	Identifier	s		1156969	0					
ANR	1156994	IncDec	--		1156969	1					
ANR	1156995	IfStatement	if ( UTF16_IS_SURROGATE_SECOND ( * s ) && s > start + 1 )		1156969	2					
ANR	1156996	Condition	UTF16_IS_SURROGATE_SECOND ( * s ) && s > start + 1	194:6:5297:5342	1156969	0	True				
ANR	1156997	AndExpression	UTF16_IS_SURROGATE_SECOND ( * s ) && s > start + 1		1156969	0		&&			
ANR	1156998	CallExpression	UTF16_IS_SURROGATE_SECOND ( * s )		1156969	0					
ANR	1156999	Callee	UTF16_IS_SURROGATE_SECOND		1156969	0					
ANR	1157000	Identifier	UTF16_IS_SURROGATE_SECOND		1156969	0					
ANR	1157001	ArgumentList	* s		1156969	1					
ANR	1157002	Argument	* s		1156969	0					
ANR	1157003	UnaryOperationExpression	* s		1156969	0					
ANR	1157004	UnaryOperator	*		1156969	0					
ANR	1157005	Identifier	s		1156969	1					
ANR	1157006	RelationalExpression	s > start + 1		1156969	1		>			
ANR	1157007	Identifier	s		1156969	0					
ANR	1157008	AdditiveExpression	start + 1		1156969	1		+			
ANR	1157009	Identifier	start		1156969	0					
ANR	1157010	PrimaryExpression	1		1156969	1					
ANR	1157011	ExpressionStatement	s -= 2	195:4:5349:5355	1156969	1	True				
ANR	1157012	AssignmentExpression	s -= 2		1156969	0		-=			
ANR	1157013	Identifier	s		1156969	0					
ANR	1157014	PrimaryExpression	2		1156969	1					
ANR	1157015	ReturnStatement	return ( UChar * ) s ;	197:2:5360:5377	1156969	3	True				
ANR	1157016	CastExpression	( UChar * ) s		1156969	0					
ANR	1157017	CastTarget	UChar *		1156969	0					
ANR	1157018	Identifier	s		1156969	1					
ANR	1157019	ReturnType	static UChar *		1156969	1					
ANR	1157020	Identifier	utf16be_left_adjust_char_head		1156969	2					
ANR	1157021	ParameterList	"const UChar * start , const UChar * s"		1156969	3					
ANR	1157022	Parameter	const UChar * start	186:30:5171:5188	1156969	0	True				
ANR	1157023	ParameterType	const UChar *		1156969	0					
ANR	1157024	Identifier	start		1156969	1					
ANR	1157025	Parameter	const UChar * s	186:50:5191:5204	1156969	1	True				
ANR	1157026	ParameterType	const UChar *		1156969	0					
ANR	1157027	Identifier	s		1156969	1					
ANR	1157028	CFGEntryNode	ENTRY		1156969		True				
ANR	1157029	CFGExitNode	EXIT		1156969		True				
ANR	1157030	Symbol	s		1156969						
ANR	1157031	Symbol	start		1156969						
ANR	1157032	Symbol	* s		1156969						
ANR	1157033	Symbol	UTF16_IS_SURROGATE_SECOND		1156969						
ANR	1157034	Function	utf16be_get_case_fold_codes_by_str	200:0:5382:5637							
ANR	1157035	FunctionDef	"utf16be_get_case_fold_codes_by_str (OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ])"		1157034	0					
ANR	1157036	CompoundStatement		203:0:5527:5637	1157034	0					
ANR	1157037	ReturnStatement	"return onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF16_BE , flag , p , end , items ) ;"	204:2:5531:5635	1157034	0	True				
ANR	1157038	CallExpression	"onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF16_BE , flag , p , end , items )"		1157034	0					
ANR	1157039	Callee	onigenc_unicode_get_case_fold_codes_by_str		1157034	0					
ANR	1157040	Identifier	onigenc_unicode_get_case_fold_codes_by_str		1157034	0					
ANR	1157041	ArgumentList	ONIG_ENCODING_UTF16_BE		1157034	1					
ANR	1157042	Argument	ONIG_ENCODING_UTF16_BE		1157034	0					
ANR	1157043	Identifier	ONIG_ENCODING_UTF16_BE		1157034	0					
ANR	1157044	Argument	flag		1157034	1					
ANR	1157045	Identifier	flag		1157034	0					
ANR	1157046	Argument	p		1157034	2					
ANR	1157047	Identifier	p		1157034	0					
ANR	1157048	Argument	end		1157034	3					
ANR	1157049	Identifier	end		1157034	0					
ANR	1157050	Argument	items		1157034	4					
ANR	1157051	Identifier	items		1157034	0					
ANR	1157052	ReturnType	static int		1157034	1					
ANR	1157053	Identifier	utf16be_get_case_fold_codes_by_str		1157034	2					
ANR	1157054	ParameterList	"OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ]"		1157034	3					
ANR	1157055	Parameter	OnigCaseFoldType flag	201:35:5428:5448	1157034	0	True				
ANR	1157056	ParameterType	OnigCaseFoldType		1157034	0					
ANR	1157057	Identifier	flag		1157034	1					
ANR	1157058	Parameter	const OnigUChar * p	202:4:5455:5472	1157034	1	True				
ANR	1157059	ParameterType	const OnigUChar *		1157034	0					
ANR	1157060	Identifier	p		1157034	1					
ANR	1157061	Parameter	const OnigUChar * end	202:24:5475:5494	1157034	2	True				
ANR	1157062	ParameterType	const OnigUChar *		1157034	0					
ANR	1157063	Identifier	end		1157034	1					
ANR	1157064	Parameter	OnigCaseFoldCodeItem items [ ]	202:46:5497:5524	1157034	3	True				
ANR	1157065	ParameterType	OnigCaseFoldCodeItem [ ]		1157034	0					
ANR	1157066	Identifier	items		1157034	1					
ANR	1157067	CFGEntryNode	ENTRY		1157034		True				
ANR	1157068	CFGExitNode	EXIT		1157034		True				
ANR	1157069	Symbol	p		1157034						
ANR	1157070	Symbol	flag		1157034						
ANR	1157071	Symbol	onigenc_unicode_get_case_fold_codes_by_str		1157034						
ANR	1157072	Symbol	ONIG_ENCODING_UTF16_BE		1157034						
ANR	1157073	Symbol	end		1157034						
ANR	1157074	Symbol	items		1157034						
ANR	1157075	DeclStmt									
ANR	1157076	Decl							OnigEncodingType	OnigEncodingType	OnigEncodingUTF16_BE
