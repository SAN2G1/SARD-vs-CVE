command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3034800	File	data/converged/CVE-2015-8617_php-src/main_spprintf.c								
ANR	3034801	DeclStmt									
ANR	3034802	Decl							size_t	size_t	newlen
ANR	3034803	Function	strnlen	194:0:6940:7056							
ANR	3034804	FunctionDef	"strnlen (const char * s , size_t maxlen)"		3034803	0					
ANR	3034805	CompoundStatement		194:52:6992:7056	3034803	0					
ANR	3034806	IdentifierDeclStatement	"char * r = memchr ( s , '\\0' , maxlen ) ;"	195:1:6995:7028	3034803	0	True				
ANR	3034807	IdentifierDecl	"* r = memchr ( s , '\\0' , maxlen )"		3034803	0					
ANR	3034808	IdentifierDeclType	char *		3034803	0					
ANR	3034809	Identifier	r		3034803	1					
ANR	3034810	AssignmentExpression	"* r = memchr ( s , '\\0' , maxlen )"		3034803	2		=			
ANR	3034811	Identifier	r		3034803	0					
ANR	3034812	CallExpression	"memchr ( s , '\\0' , maxlen )"		3034803	1					
ANR	3034813	Callee	memchr		3034803	0					
ANR	3034814	Identifier	memchr		3034803	0					
ANR	3034815	ArgumentList	s		3034803	1					
ANR	3034816	Argument	s		3034803	0					
ANR	3034817	Identifier	s		3034803	0					
ANR	3034818	Argument	'\\0'		3034803	1					
ANR	3034819	PrimaryExpression	'\\0'		3034803	0					
ANR	3034820	Argument	maxlen		3034803	2					
ANR	3034821	Identifier	maxlen		3034803	0					
ANR	3034822	ReturnStatement	return r ? r - s : maxlen ;	196:1:7031:7054	3034803	1	True				
ANR	3034823	ConditionalExpression	r ? r - s : maxlen		3034803	0					
ANR	3034824	Condition	r		3034803	0					
ANR	3034825	Identifier	r		3034803	0					
ANR	3034826	AdditiveExpression	r - s		3034803	1		-			
ANR	3034827	Identifier	r		3034803	0					
ANR	3034828	Identifier	s		3034803	1					
ANR	3034829	Identifier	maxlen		3034803	2					
ANR	3034830	ReturnType	static size_t		3034803	1					
ANR	3034831	Identifier	strnlen		3034803	2					
ANR	3034832	ParameterList	"const char * s , size_t maxlen"		3034803	3					
ANR	3034833	Parameter	const char * s	194:22:6962:6974	3034803	0	True				
ANR	3034834	ParameterType	const char *		3034803	0					
ANR	3034835	Identifier	s		3034803	1					
ANR	3034836	Parameter	size_t maxlen	194:37:6977:6989	3034803	1	True				
ANR	3034837	ParameterType	size_t		3034803	0					
ANR	3034838	Identifier	maxlen		3034803	1					
ANR	3034839	CFGEntryNode	ENTRY		3034803		True				
ANR	3034840	CFGExitNode	EXIT		3034803		True				
ANR	3034841	Symbol	r		3034803						
ANR	3034842	Symbol	s		3034803						
ANR	3034843	Symbol	memchr		3034803						
ANR	3034844	Symbol	maxlen		3034803						
ANR	3034845	Function	xbuf_format_converter	203:0:7126:21232							
ANR	3034846	FunctionDef	"xbuf_format_converter (void * xbuf , zend_bool is_char , const char * fmt , va_list ap)"		3034845	0					
ANR	3034847	CompoundStatement		204:0:7230:21232	3034845	0					
ANR	3034848	IdentifierDeclStatement	char * s = NULL ;	205:1:7233:7247	3034845	0	True				
ANR	3034849	IdentifierDecl	* s = NULL		3034845	0					
ANR	3034850	IdentifierDeclType	char *		3034845	0					
ANR	3034851	Identifier	s		3034845	1					
ANR	3034852	AssignmentExpression	* s = NULL		3034845	2		=			
ANR	3034853	Identifier	NULL		3034845	0					
ANR	3034854	Identifier	NULL		3034845	1					
ANR	3034855	IdentifierDeclStatement	size_t s_len ;	206:1:7250:7262	3034845	1	True				
ANR	3034856	IdentifierDecl	s_len		3034845	0					
ANR	3034857	IdentifierDeclType	size_t		3034845	0					
ANR	3034858	Identifier	s_len		3034845	1					
ANR	3034859	IdentifierDeclStatement	int free_zcopy ;	207:1:7265:7279	3034845	2	True				
ANR	3034860	IdentifierDecl	free_zcopy		3034845	0					
ANR	3034861	IdentifierDeclType	int		3034845	0					
ANR	3034862	Identifier	free_zcopy		3034845	1					
ANR	3034863	IdentifierDeclStatement	"zval * zvp , zcopy ;"	208:1:7282:7298	3034845	3	True				
ANR	3034864	IdentifierDecl	* zvp		3034845	0					
ANR	3034865	IdentifierDeclType	zval *		3034845	0					
ANR	3034866	Identifier	zvp		3034845	1					
ANR	3034867	IdentifierDecl	zcopy		3034845	1					
ANR	3034868	IdentifierDeclType	zval		3034845	0					
ANR	3034869	Identifier	zcopy		3034845	1					
ANR	3034870	IdentifierDeclStatement	int min_width = 0 ;	210:1:7302:7319	3034845	4	True				
ANR	3034871	IdentifierDecl	min_width = 0		3034845	0					
ANR	3034872	IdentifierDeclType	int		3034845	0					
ANR	3034873	Identifier	min_width		3034845	1					
ANR	3034874	AssignmentExpression	min_width = 0		3034845	2		=			
ANR	3034875	Identifier	min_width		3034845	0					
ANR	3034876	PrimaryExpression	0		3034845	1					
ANR	3034877	IdentifierDeclStatement	int precision = 0 ;	211:1:7322:7339	3034845	5	True				
ANR	3034878	IdentifierDecl	precision = 0		3034845	0					
ANR	3034879	IdentifierDeclType	int		3034845	0					
ANR	3034880	Identifier	precision		3034845	1					
ANR	3034881	AssignmentExpression	precision = 0		3034845	2		=			
ANR	3034882	Identifier	precision		3034845	0					
ANR	3034883	PrimaryExpression	0		3034845	1					
ANR	3034884	ClassDefStatement	"enum { LEFT , RIGHT } adjust ;"	212:1:7342:7372	3034845	6	True				
ANR	3034885	IdentifierDecl	adjust		3034845	0					
ANR	3034886	IdentifierDeclType			3034845	0					
ANR	3034887	Identifier	adjust		3034845	1					
ANR	3034888	IdentifierDeclStatement	char pad_char ;	215:1:7375:7388	3034845	7	True				
ANR	3034889	IdentifierDecl	pad_char		3034845	0					
ANR	3034890	IdentifierDeclType	char		3034845	0					
ANR	3034891	Identifier	pad_char		3034845	1					
ANR	3034892	IdentifierDeclStatement	char prefix_char ;	216:1:7391:7407	3034845	8	True				
ANR	3034893	IdentifierDecl	prefix_char		3034845	0					
ANR	3034894	IdentifierDeclType	char		3034845	0					
ANR	3034895	Identifier	prefix_char		3034845	1					
ANR	3034896	IdentifierDeclStatement	double fp_num ;	218:1:7411:7424	3034845	9	True				
ANR	3034897	IdentifierDecl	fp_num		3034845	0					
ANR	3034898	IdentifierDeclType	double		3034845	0					
ANR	3034899	Identifier	fp_num		3034845	1					
ANR	3034900	IdentifierDeclStatement	wide_int i_num = ( wide_int ) 0 ;	219:1:7427:7456	3034845	10	True				
ANR	3034901	IdentifierDecl	i_num = ( wide_int ) 0		3034845	0					
ANR	3034902	IdentifierDeclType	wide_int		3034845	0					
ANR	3034903	Identifier	i_num		3034845	1					
ANR	3034904	AssignmentExpression	i_num = ( wide_int ) 0		3034845	2		=			
ANR	3034905	Identifier	i_num		3034845	0					
ANR	3034906	CastExpression	( wide_int ) 0		3034845	1					
ANR	3034907	CastTarget	wide_int		3034845	0					
ANR	3034908	PrimaryExpression	0		3034845	1					
ANR	3034909	IdentifierDeclStatement	u_wide_int ui_num = ( u_wide_int ) 0 ;	220:1:7459:7493	3034845	11	True				
ANR	3034910	IdentifierDecl	ui_num = ( u_wide_int ) 0		3034845	0					
ANR	3034911	IdentifierDeclType	u_wide_int		3034845	0					
ANR	3034912	Identifier	ui_num		3034845	1					
ANR	3034913	AssignmentExpression	ui_num = ( u_wide_int ) 0		3034845	2		=			
ANR	3034914	Identifier	ui_num		3034845	0					
ANR	3034915	CastExpression	( u_wide_int ) 0		3034845	1					
ANR	3034916	CastTarget	u_wide_int		3034845	0					
ANR	3034917	PrimaryExpression	0		3034845	1					
ANR	3034918	IdentifierDeclStatement	char num_buf [ NUM_BUF_SIZE ] ;	222:1:7497:7523	3034845	12	True				
ANR	3034919	IdentifierDecl	num_buf [ NUM_BUF_SIZE ]		3034845	0					
ANR	3034920	IdentifierDeclType	char [ NUM_BUF_SIZE ]		3034845	0					
ANR	3034921	Identifier	num_buf		3034845	1					
ANR	3034922	Identifier	NUM_BUF_SIZE		3034845	2					
ANR	3034923	IdentifierDeclStatement	char char_buf [ 2 ] ;	223:1:7526:7542	3034845	13	True				
ANR	3034924	IdentifierDecl	char_buf [ 2 ]		3034845	0					
ANR	3034925	IdentifierDeclType	char [ 2 ]		3034845	0					
ANR	3034926	Identifier	char_buf		3034845	1					
ANR	3034927	PrimaryExpression	2		3034845	2					
ANR	3034928	IdentifierDeclStatement	struct lconv lconv ;	227:1:7617:7635	3034845	14	True				
ANR	3034929	IdentifierDecl	lconv		3034845	0					
ANR	3034930	IdentifierDeclType	struct lconv		3034845	0					
ANR	3034931	Identifier	lconv		3034845	1					
ANR	3034932	IdentifierDeclStatement	length_modifier_e modifier ;	236:1:7716:7742	3034845	15	True				
ANR	3034933	IdentifierDecl	modifier		3034845	0					
ANR	3034934	IdentifierDeclType	length_modifier_e		3034845	0					
ANR	3034935	Identifier	modifier		3034845	1					
ANR	3034936	IdentifierDeclStatement	boolean_e alternate_form ;	237:1:7745:7769	3034845	16	True				
ANR	3034937	IdentifierDecl	alternate_form		3034845	0					
ANR	3034938	IdentifierDeclType	boolean_e		3034845	0					
ANR	3034939	Identifier	alternate_form		3034845	1					
ANR	3034940	IdentifierDeclStatement	boolean_e print_sign ;	238:1:7772:7792	3034845	17	True				
ANR	3034941	IdentifierDecl	print_sign		3034845	0					
ANR	3034942	IdentifierDeclType	boolean_e		3034845	0					
ANR	3034943	Identifier	print_sign		3034845	1					
ANR	3034944	IdentifierDeclStatement	boolean_e print_blank ;	239:1:7795:7816	3034845	18	True				
ANR	3034945	IdentifierDecl	print_blank		3034845	0					
ANR	3034946	IdentifierDeclType	boolean_e		3034845	0					
ANR	3034947	Identifier	print_blank		3034845	1					
ANR	3034948	IdentifierDeclStatement	boolean_e adjust_precision ;	240:1:7819:7845	3034845	19	True				
ANR	3034949	IdentifierDecl	adjust_precision		3034845	0					
ANR	3034950	IdentifierDeclType	boolean_e		3034845	0					
ANR	3034951	Identifier	adjust_precision		3034845	1					
ANR	3034952	IdentifierDeclStatement	boolean_e adjust_width ;	241:1:7848:7870	3034845	20	True				
ANR	3034953	IdentifierDecl	adjust_width		3034845	0					
ANR	3034954	IdentifierDeclType	boolean_e		3034845	0					
ANR	3034955	Identifier	adjust_width		3034845	1					
ANR	3034956	IdentifierDeclStatement	bool_int is_negative ;	242:1:7873:7893	3034845	21	True				
ANR	3034957	IdentifierDecl	is_negative		3034845	0					
ANR	3034958	IdentifierDeclType	bool_int		3034845	0					
ANR	3034959	Identifier	is_negative		3034845	1					
ANR	3034960	WhileStatement	while ( * fmt )		3034845	22					
ANR	3034961	Condition	* fmt	244:8:7904:7907	3034845	0	True				
ANR	3034962	UnaryOperationExpression	* fmt		3034845	0					
ANR	3034963	UnaryOperator	*		3034845	0					
ANR	3034964	Identifier	fmt		3034845	1					
ANR	3034965	CompoundStatement		41:14:679:679	3034845	1					
ANR	3034966	IfStatement	if ( * fmt != '%' )		3034845	0					
ANR	3034967	Condition	* fmt != '%'	245:6:7918:7928	3034845	0	True				
ANR	3034968	EqualityExpression	* fmt != '%'		3034845	0		!=			
ANR	3034969	UnaryOperationExpression	* fmt		3034845	0					
ANR	3034970	UnaryOperator	*		3034845	0					
ANR	3034971	Identifier	fmt		3034845	1					
ANR	3034972	PrimaryExpression	'%'		3034845	1					
ANR	3034973	CompoundStatement		42:19:700:700	3034845	1					
ANR	3034974	ExpressionStatement	"INS_CHAR ( xbuf , * fmt , is_char )"	246:3:7936:7965	3034845	0	True				
ANR	3034975	CallExpression	"INS_CHAR ( xbuf , * fmt , is_char )"		3034845	0					
ANR	3034976	Callee	INS_CHAR		3034845	0					
ANR	3034977	Identifier	INS_CHAR		3034845	0					
ANR	3034978	ArgumentList	xbuf		3034845	1					
ANR	3034979	Argument	xbuf		3034845	0					
ANR	3034980	Identifier	xbuf		3034845	0					
ANR	3034981	Argument	* fmt		3034845	1					
ANR	3034982	UnaryOperationExpression	* fmt		3034845	0					
ANR	3034983	UnaryOperator	*		3034845	0					
ANR	3034984	Identifier	fmt		3034845	1					
ANR	3034985	Argument	is_char		3034845	2					
ANR	3034986	Identifier	is_char		3034845	0					
ANR	3034987	ElseStatement	else		3034845	0					
ANR	3034988	CompoundStatement		44:9:745:745	3034845	0					
ANR	3034989	ExpressionStatement	adjust = RIGHT	251:3:8026:8040	3034845	0	True				
ANR	3034990	AssignmentExpression	adjust = RIGHT		3034845	0		=			
ANR	3034991	Identifier	adjust		3034845	0					
ANR	3034992	Identifier	RIGHT		3034845	1					
ANR	3034993	ExpressionStatement	alternate_form = print_sign = print_blank = NO	252:3:8045:8091	3034845	1	True				
ANR	3034994	AssignmentExpression	alternate_form = print_sign = print_blank = NO		3034845	0		=			
ANR	3034995	Identifier	alternate_form		3034845	0					
ANR	3034996	AssignmentExpression	print_sign = print_blank = NO		3034845	1		=			
ANR	3034997	Identifier	print_sign		3034845	0					
ANR	3034998	AssignmentExpression	print_blank = NO		3034845	1		=			
ANR	3034999	Identifier	print_blank		3034845	0					
ANR	3035000	Identifier	NO		3034845	1					
ANR	3035001	ExpressionStatement	pad_char = ' '	253:3:8096:8110	3034845	2	True				
ANR	3035002	AssignmentExpression	pad_char = ' '		3034845	0		=			
ANR	3035003	Identifier	pad_char		3034845	0					
ANR	3035004	PrimaryExpression	' '		3034845	1					
ANR	3035005	ExpressionStatement	prefix_char = NUL	254:3:8115:8132	3034845	3	True				
ANR	3035006	AssignmentExpression	prefix_char = NUL		3034845	0		=			
ANR	3035007	Identifier	prefix_char		3034845	0					
ANR	3035008	Identifier	NUL		3034845	1					
ANR	3035009	ExpressionStatement	free_zcopy = 0	255:3:8137:8151	3034845	4	True				
ANR	3035010	AssignmentExpression	free_zcopy = 0		3034845	0		=			
ANR	3035011	Identifier	free_zcopy		3034845	0					
ANR	3035012	PrimaryExpression	0		3034845	1					
ANR	3035013	ExpressionStatement	fmt ++	257:3:8157:8162	3034845	5	True				
ANR	3035014	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035015	Identifier	fmt		3034845	0					
ANR	3035016	IncDec	++		3034845	1					
ANR	3035017	IfStatement	if ( isascii ( ( int ) * fmt ) && ! islower ( ( int ) * fmt ) )		3034845	6					
ANR	3035018	Condition	isascii ( ( int ) * fmt ) && ! islower ( ( int ) * fmt )	262:7:8243:8283	3034845	0	True				
ANR	3035019	AndExpression	isascii ( ( int ) * fmt ) && ! islower ( ( int ) * fmt )		3034845	0		&&			
ANR	3035020	CallExpression	isascii ( ( int ) * fmt )		3034845	0					
ANR	3035021	Callee	isascii		3034845	0					
ANR	3035022	Identifier	isascii		3034845	0					
ANR	3035023	ArgumentList	( int ) * fmt		3034845	1					
ANR	3035024	Argument	( int ) * fmt		3034845	0					
ANR	3035025	CastExpression	( int ) * fmt		3034845	0					
ANR	3035026	CastTarget	int		3034845	0					
ANR	3035027	UnaryOperationExpression	* fmt		3034845	1					
ANR	3035028	UnaryOperator	*		3034845	0					
ANR	3035029	Identifier	fmt		3034845	1					
ANR	3035030	UnaryOperationExpression	! islower ( ( int ) * fmt )		3034845	1					
ANR	3035031	UnaryOperator	!		3034845	0					
ANR	3035032	CallExpression	islower ( ( int ) * fmt )		3034845	1					
ANR	3035033	Callee	islower		3034845	0					
ANR	3035034	Identifier	islower		3034845	0					
ANR	3035035	ArgumentList	( int ) * fmt		3034845	1					
ANR	3035036	Argument	( int ) * fmt		3034845	0					
ANR	3035037	CastExpression	( int ) * fmt		3034845	0					
ANR	3035038	CastTarget	int		3034845	0					
ANR	3035039	UnaryOperationExpression	* fmt		3034845	1					
ANR	3035040	UnaryOperator	*		3034845	0					
ANR	3035041	Identifier	fmt		3034845	1					
ANR	3035042	CompoundStatement		59:50:1055:1055	3034845	1					
ANR	3035043	ForStatement	for ( ; ; fmt ++ )		3034845	0					
ANR	3035044	PostIncDecOperationExpression	fmt ++	266:12:8354:8358	3034845	0	True				
ANR	3035045	Identifier	fmt		3034845	0					
ANR	3035046	IncDec	++		3034845	1					
ANR	3035047	CompoundStatement		63:19:1130:1130	3034845	1					
ANR	3035048	IfStatement	if ( * fmt == '-' )		3034845	0					
ANR	3035049	Condition	* fmt == '-'	267:9:8372:8382	3034845	0	True				
ANR	3035050	EqualityExpression	* fmt == '-'		3034845	0		==			
ANR	3035051	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035052	UnaryOperator	*		3034845	0					
ANR	3035053	Identifier	fmt		3034845	1					
ANR	3035054	PrimaryExpression	'-'		3034845	1					
ANR	3035055	ExpressionStatement	adjust = LEFT	268:6:8391:8404	3034845	1	True				
ANR	3035056	AssignmentExpression	adjust = LEFT		3034845	0		=			
ANR	3035057	Identifier	adjust		3034845	0					
ANR	3035058	Identifier	LEFT		3034845	1					
ANR	3035059	ElseStatement	else		3034845	0					
ANR	3035060	IfStatement	if ( * fmt == '+' )		3034845	0					
ANR	3035061	Condition	* fmt == '+'	269:14:8420:8430	3034845	0	True				
ANR	3035062	EqualityExpression	* fmt == '+'		3034845	0		==			
ANR	3035063	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035064	UnaryOperator	*		3034845	0					
ANR	3035065	Identifier	fmt		3034845	1					
ANR	3035066	PrimaryExpression	'+'		3034845	1					
ANR	3035067	ExpressionStatement	print_sign = YES	270:6:8439:8455	3034845	1	True				
ANR	3035068	AssignmentExpression	print_sign = YES		3034845	0		=			
ANR	3035069	Identifier	print_sign		3034845	0					
ANR	3035070	Identifier	YES		3034845	1					
ANR	3035071	ElseStatement	else		3034845	0					
ANR	3035072	IfStatement	if ( * fmt == '#' )		3034845	0					
ANR	3035073	Condition	* fmt == '#'	271:14:8471:8481	3034845	0	True				
ANR	3035074	EqualityExpression	* fmt == '#'		3034845	0		==			
ANR	3035075	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035076	UnaryOperator	*		3034845	0					
ANR	3035077	Identifier	fmt		3034845	1					
ANR	3035078	PrimaryExpression	'#'		3034845	1					
ANR	3035079	ExpressionStatement	alternate_form = YES	272:6:8490:8510	3034845	1	True				
ANR	3035080	AssignmentExpression	alternate_form = YES		3034845	0		=			
ANR	3035081	Identifier	alternate_form		3034845	0					
ANR	3035082	Identifier	YES		3034845	1					
ANR	3035083	ElseStatement	else		3034845	0					
ANR	3035084	IfStatement	if ( * fmt == ' ' )		3034845	0					
ANR	3035085	Condition	* fmt == ' '	273:14:8526:8536	3034845	0	True				
ANR	3035086	EqualityExpression	* fmt == ' '		3034845	0		==			
ANR	3035087	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035088	UnaryOperator	*		3034845	0					
ANR	3035089	Identifier	fmt		3034845	1					
ANR	3035090	PrimaryExpression	' '		3034845	1					
ANR	3035091	ExpressionStatement	print_blank = YES	274:6:8545:8562	3034845	1	True				
ANR	3035092	AssignmentExpression	print_blank = YES		3034845	0		=			
ANR	3035093	Identifier	print_blank		3034845	0					
ANR	3035094	Identifier	YES		3034845	1					
ANR	3035095	ElseStatement	else		3034845	0					
ANR	3035096	IfStatement	if ( * fmt == '0' )		3034845	0					
ANR	3035097	Condition	* fmt == '0'	275:14:8578:8588	3034845	0	True				
ANR	3035098	EqualityExpression	* fmt == '0'		3034845	0		==			
ANR	3035099	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035100	UnaryOperator	*		3034845	0					
ANR	3035101	Identifier	fmt		3034845	1					
ANR	3035102	PrimaryExpression	'0'		3034845	1					
ANR	3035103	ExpressionStatement	pad_char = '0'	276:6:8597:8611	3034845	1	True				
ANR	3035104	AssignmentExpression	pad_char = '0'		3034845	0		=			
ANR	3035105	Identifier	pad_char		3034845	0					
ANR	3035106	PrimaryExpression	'0'		3034845	1					
ANR	3035107	ElseStatement	else		3034845	0					
ANR	3035108	BreakStatement	break ;	278:6:8629:8634	3034845	0	True				
ANR	3035109	IfStatement	if ( isdigit ( ( int ) * fmt ) )		3034845	1					
ANR	3035110	Condition	isdigit ( ( int ) * fmt )	284:8:8704:8721	3034845	0	True				
ANR	3035111	CallExpression	isdigit ( ( int ) * fmt )		3034845	0					
ANR	3035112	Callee	isdigit		3034845	0					
ANR	3035113	Identifier	isdigit		3034845	0					
ANR	3035114	ArgumentList	( int ) * fmt		3034845	1					
ANR	3035115	Argument	( int ) * fmt		3034845	0					
ANR	3035116	CastExpression	( int ) * fmt		3034845	0					
ANR	3035117	CastTarget	int		3034845	0					
ANR	3035118	UnaryOperationExpression	* fmt		3034845	1					
ANR	3035119	UnaryOperator	*		3034845	0					
ANR	3035120	Identifier	fmt		3034845	1					
ANR	3035121	CompoundStatement		81:28:1493:1493	3034845	1					
ANR	3035122	ExpressionStatement	"STR_TO_DEC ( fmt , min_width )"	285:5:8731:8757	3034845	0	True				
ANR	3035123	CallExpression	"STR_TO_DEC ( fmt , min_width )"		3034845	0					
ANR	3035124	Callee	STR_TO_DEC		3034845	0					
ANR	3035125	Identifier	STR_TO_DEC		3034845	0					
ANR	3035126	ArgumentList	fmt		3034845	1					
ANR	3035127	Argument	fmt		3034845	0					
ANR	3035128	Identifier	fmt		3034845	0					
ANR	3035129	Argument	min_width		3034845	1					
ANR	3035130	Identifier	min_width		3034845	0					
ANR	3035131	ExpressionStatement	adjust_width = YES	286:5:8764:8782	3034845	1	True				
ANR	3035132	AssignmentExpression	adjust_width = YES		3034845	0		=			
ANR	3035133	Identifier	adjust_width		3034845	0					
ANR	3035134	Identifier	YES		3034845	1					
ANR	3035135	ElseStatement	else		3034845	0					
ANR	3035136	IfStatement	if ( * fmt == '*' )		3034845	0					
ANR	3035137	Condition	* fmt == '*'	287:15:8799:8809	3034845	0	True				
ANR	3035138	EqualityExpression	* fmt == '*'		3034845	0		==			
ANR	3035139	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035140	UnaryOperator	*		3034845	0					
ANR	3035141	Identifier	fmt		3034845	1					
ANR	3035142	PrimaryExpression	'*'		3034845	1					
ANR	3035143	CompoundStatement		84:28:1581:1581	3034845	1					
ANR	3035144	ExpressionStatement	"min_width = va_arg ( ap , int )"	288:5:8819:8846	3034845	0	True				
ANR	3035145	AssignmentExpression	"min_width = va_arg ( ap , int )"		3034845	0		=			
ANR	3035146	Identifier	min_width		3034845	0					
ANR	3035147	CallExpression	"va_arg ( ap , int )"		3034845	1					
ANR	3035148	Callee	va_arg		3034845	0					
ANR	3035149	Identifier	va_arg		3034845	0					
ANR	3035150	ArgumentList	ap		3034845	1					
ANR	3035151	Argument	ap		3034845	0					
ANR	3035152	Identifier	ap		3034845	0					
ANR	3035153	Argument	int		3034845	1					
ANR	3035154	Identifier	int		3034845	0					
ANR	3035155	ExpressionStatement	fmt ++	289:5:8853:8858	3034845	1	True				
ANR	3035156	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035157	Identifier	fmt		3034845	0					
ANR	3035158	IncDec	++		3034845	1					
ANR	3035159	ExpressionStatement	adjust_width = YES	290:5:8865:8883	3034845	2	True				
ANR	3035160	AssignmentExpression	adjust_width = YES		3034845	0		=			
ANR	3035161	Identifier	adjust_width		3034845	0					
ANR	3035162	Identifier	YES		3034845	1					
ANR	3035163	IfStatement	if ( min_width < 0 )		3034845	3					
ANR	3035164	Condition	min_width < 0	291:9:8894:8906	3034845	0	True				
ANR	3035165	RelationalExpression	min_width < 0		3034845	0		<			
ANR	3035166	Identifier	min_width		3034845	0					
ANR	3035167	PrimaryExpression	0		3034845	1					
ANR	3035168	CompoundStatement		88:24:1678:1678	3034845	1					
ANR	3035169	ExpressionStatement	adjust = LEFT	292:6:8917:8930	3034845	0	True				
ANR	3035170	AssignmentExpression	adjust = LEFT		3034845	0		=			
ANR	3035171	Identifier	adjust		3034845	0					
ANR	3035172	Identifier	LEFT		3034845	1					
ANR	3035173	ExpressionStatement	min_width = - min_width	293:6:8938:8960	3034845	1	True				
ANR	3035174	AssignmentExpression	min_width = - min_width		3034845	0		=			
ANR	3035175	Identifier	min_width		3034845	0					
ANR	3035176	UnaryOperationExpression	- min_width		3034845	1					
ANR	3035177	UnaryOperator	-		3034845	0					
ANR	3035178	Identifier	min_width		3034845	1					
ANR	3035179	ElseStatement	else		3034845	0					
ANR	3035180	ExpressionStatement	adjust_width = NO	296:5:8985:9002	3034845	0	True				
ANR	3035181	AssignmentExpression	adjust_width = NO		3034845	0		=			
ANR	3035182	Identifier	adjust_width		3034845	0					
ANR	3035183	Identifier	NO		3034845	1					
ANR	3035184	IfStatement	if ( * fmt == '.' )		3034845	2					
ANR	3035185	Condition	* fmt == '.'	301:8:9070:9080	3034845	0	True				
ANR	3035186	EqualityExpression	* fmt == '.'		3034845	0		==			
ANR	3035187	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035188	UnaryOperator	*		3034845	0					
ANR	3035189	Identifier	fmt		3034845	1					
ANR	3035190	PrimaryExpression	'.'		3034845	1					
ANR	3035191	CompoundStatement		98:21:1852:1852	3034845	1					
ANR	3035192	ExpressionStatement	adjust_precision = YES	302:5:9090:9112	3034845	0	True				
ANR	3035193	AssignmentExpression	adjust_precision = YES		3034845	0		=			
ANR	3035194	Identifier	adjust_precision		3034845	0					
ANR	3035195	Identifier	YES		3034845	1					
ANR	3035196	ExpressionStatement	fmt ++	303:5:9119:9124	3034845	1	True				
ANR	3035197	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035198	Identifier	fmt		3034845	0					
ANR	3035199	IncDec	++		3034845	1					
ANR	3035200	IfStatement	if ( isdigit ( ( int ) * fmt ) )		3034845	2					
ANR	3035201	Condition	isdigit ( ( int ) * fmt )	304:9:9135:9152	3034845	0	True				
ANR	3035202	CallExpression	isdigit ( ( int ) * fmt )		3034845	0					
ANR	3035203	Callee	isdigit		3034845	0					
ANR	3035204	Identifier	isdigit		3034845	0					
ANR	3035205	ArgumentList	( int ) * fmt		3034845	1					
ANR	3035206	Argument	( int ) * fmt		3034845	0					
ANR	3035207	CastExpression	( int ) * fmt		3034845	0					
ANR	3035208	CastTarget	int		3034845	0					
ANR	3035209	UnaryOperationExpression	* fmt		3034845	1					
ANR	3035210	UnaryOperator	*		3034845	0					
ANR	3035211	Identifier	fmt		3034845	1					
ANR	3035212	CompoundStatement		101:29:1924:1924	3034845	1					
ANR	3035213	ExpressionStatement	"STR_TO_DEC ( fmt , precision )"	305:6:9163:9189	3034845	0	True				
ANR	3035214	CallExpression	"STR_TO_DEC ( fmt , precision )"		3034845	0					
ANR	3035215	Callee	STR_TO_DEC		3034845	0					
ANR	3035216	Identifier	STR_TO_DEC		3034845	0					
ANR	3035217	ArgumentList	fmt		3034845	1					
ANR	3035218	Argument	fmt		3034845	0					
ANR	3035219	Identifier	fmt		3034845	0					
ANR	3035220	Argument	precision		3034845	1					
ANR	3035221	Identifier	precision		3034845	0					
ANR	3035222	ElseStatement	else		3034845	0					
ANR	3035223	IfStatement	if ( * fmt == '*' )		3034845	0					
ANR	3035224	Condition	* fmt == '*'	306:16:9207:9217	3034845	0	True				
ANR	3035225	EqualityExpression	* fmt == '*'		3034845	0		==			
ANR	3035226	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035227	UnaryOperator	*		3034845	0					
ANR	3035228	Identifier	fmt		3034845	1					
ANR	3035229	PrimaryExpression	'*'		3034845	1					
ANR	3035230	CompoundStatement		103:29:1989:1989	3034845	1					
ANR	3035231	ExpressionStatement	"precision = va_arg ( ap , int )"	307:6:9228:9255	3034845	0	True				
ANR	3035232	AssignmentExpression	"precision = va_arg ( ap , int )"		3034845	0		=			
ANR	3035233	Identifier	precision		3034845	0					
ANR	3035234	CallExpression	"va_arg ( ap , int )"		3034845	1					
ANR	3035235	Callee	va_arg		3034845	0					
ANR	3035236	Identifier	va_arg		3034845	0					
ANR	3035237	ArgumentList	ap		3034845	1					
ANR	3035238	Argument	ap		3034845	0					
ANR	3035239	Identifier	ap		3034845	0					
ANR	3035240	Argument	int		3034845	1					
ANR	3035241	Identifier	int		3034845	0					
ANR	3035242	ExpressionStatement	fmt ++	308:6:9263:9268	3034845	1	True				
ANR	3035243	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035244	Identifier	fmt		3034845	0					
ANR	3035245	IncDec	++		3034845	1					
ANR	3035246	IfStatement	if ( precision < 0 )		3034845	2					
ANR	3035247	Condition	precision < 0	309:10:9280:9292	3034845	0	True				
ANR	3035248	RelationalExpression	precision < 0		3034845	0		<			
ANR	3035249	Identifier	precision		3034845	0					
ANR	3035250	PrimaryExpression	0		3034845	1					
ANR	3035251	ExpressionStatement	precision = 0	310:7:9302:9315	3034845	1	True				
ANR	3035252	AssignmentExpression	precision = 0		3034845	0		=			
ANR	3035253	Identifier	precision		3034845	0					
ANR	3035254	PrimaryExpression	0		3034845	1					
ANR	3035255	ElseStatement	else		3034845	0					
ANR	3035256	ExpressionStatement	precision = 0	312:6:9335:9348	3034845	0	True				
ANR	3035257	AssignmentExpression	precision = 0		3034845	0		=			
ANR	3035258	Identifier	precision		3034845	0					
ANR	3035259	PrimaryExpression	0		3034845	1					
ANR	3035260	IfStatement	if ( precision > FORMAT_CONV_MAX_PRECISION )		3034845	3					
ANR	3035261	Condition	precision > FORMAT_CONV_MAX_PRECISION	314:9:9360:9396	3034845	0	True				
ANR	3035262	RelationalExpression	precision > FORMAT_CONV_MAX_PRECISION		3034845	0		>			
ANR	3035263	Identifier	precision		3034845	0					
ANR	3035264	Identifier	FORMAT_CONV_MAX_PRECISION		3034845	1					
ANR	3035265	CompoundStatement		111:48:2168:2168	3034845	1					
ANR	3035266	ExpressionStatement	precision = FORMAT_CONV_MAX_PRECISION	315:6:9407:9444	3034845	0	True				
ANR	3035267	AssignmentExpression	precision = FORMAT_CONV_MAX_PRECISION		3034845	0		=			
ANR	3035268	Identifier	precision		3034845	0					
ANR	3035269	Identifier	FORMAT_CONV_MAX_PRECISION		3034845	1					
ANR	3035270	ElseStatement	else		3034845	0					
ANR	3035271	ExpressionStatement	adjust_precision = NO	318:5:9469:9490	3034845	0	True				
ANR	3035272	AssignmentExpression	adjust_precision = NO		3034845	0		=			
ANR	3035273	Identifier	adjust_precision		3034845	0					
ANR	3035274	Identifier	NO		3034845	1					
ANR	3035275	ElseStatement	else		3034845	0					
ANR	3035276	ExpressionStatement	adjust_precision = adjust_width = NO	320:4:9506:9542	3034845	0	True				
ANR	3035277	AssignmentExpression	adjust_precision = adjust_width = NO		3034845	0		=			
ANR	3035278	Identifier	adjust_precision		3034845	0					
ANR	3035279	AssignmentExpression	adjust_width = NO		3034845	1		=			
ANR	3035280	Identifier	adjust_width		3034845	0					
ANR	3035281	Identifier	NO		3034845	1					
ANR	3035282	SwitchStatement	switch ( * fmt )		3034845	7					
ANR	3035283	Condition	* fmt	325:11:9590:9593	3034845	0	True				
ANR	3035284	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035285	UnaryOperator	*		3034845	0					
ANR	3035286	Identifier	fmt		3034845	1					
ANR	3035287	CompoundStatement		122:17:2365:2365	3034845	1					
ANR	3035288	Label	case 'L' :	326:4:9602:9610	3034845	0	True				
ANR	3035289	ExpressionStatement	fmt ++	327:5:9617:9622	3034845	1	True				
ANR	3035290	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035291	Identifier	fmt		3034845	0					
ANR	3035292	IncDec	++		3034845	1					
ANR	3035293	ExpressionStatement	modifier = LM_LONG_DOUBLE	328:5:9629:9654	3034845	2	True				
ANR	3035294	AssignmentExpression	modifier = LM_LONG_DOUBLE		3034845	0		=			
ANR	3035295	Identifier	modifier		3034845	0					
ANR	3035296	Identifier	LM_LONG_DOUBLE		3034845	1					
ANR	3035297	BreakStatement	break ;	329:5:9661:9666	3034845	3	True				
ANR	3035298	Label	case 'I' :	330:4:9672:9680	3034845	4	True				
ANR	3035299	ExpressionStatement	fmt ++	331:5:9687:9692	3034845	5	True				
ANR	3035300	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035301	Identifier	fmt		3034845	0					
ANR	3035302	IncDec	++		3034845	1					
ANR	3035303	IfStatement	if ( * fmt == '6' && * ( fmt + 1 ) == '4' )		3034845	6					
ANR	3035304	Condition	* fmt == '6' && * ( fmt + 1 ) == '4'	333:9:9724:9753	3034845	0	True				
ANR	3035305	AndExpression	* fmt == '6' && * ( fmt + 1 ) == '4'		3034845	0		&&			
ANR	3035306	EqualityExpression	* fmt == '6'		3034845	0		==			
ANR	3035307	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035308	UnaryOperator	*		3034845	0					
ANR	3035309	Identifier	fmt		3034845	1					
ANR	3035310	PrimaryExpression	'6'		3034845	1					
ANR	3035311	EqualityExpression	* ( fmt + 1 ) == '4'		3034845	1		==			
ANR	3035312	UnaryOperationExpression	* ( fmt + 1 )		3034845	0					
ANR	3035313	UnaryOperator	*		3034845	0					
ANR	3035314	AdditiveExpression	fmt + 1		3034845	1		+			
ANR	3035315	Identifier	fmt		3034845	0					
ANR	3035316	PrimaryExpression	1		3034845	1					
ANR	3035317	PrimaryExpression	'4'		3034845	1					
ANR	3035318	CompoundStatement		130:41:2525:2525	3034845	1					
ANR	3035319	ExpressionStatement	fmt += 2	334:6:9764:9772	3034845	0	True				
ANR	3035320	AssignmentExpression	fmt += 2		3034845	0		+=			
ANR	3035321	Identifier	fmt		3034845	0					
ANR	3035322	PrimaryExpression	2		3034845	1					
ANR	3035323	ExpressionStatement	modifier = LM_LONG_LONG	335:6:9780:9803	3034845	1	True				
ANR	3035324	AssignmentExpression	modifier = LM_LONG_LONG		3034845	0		=			
ANR	3035325	Identifier	modifier		3034845	0					
ANR	3035326	Identifier	LM_LONG_LONG		3034845	1					
ANR	3035327	ElseStatement	else		3034845	0					
ANR	3035328	IfStatement	if ( * fmt == '3' && * ( fmt + 1 ) == '2' )		3034845	0					
ANR	3035329	Condition	* fmt == '3' && * ( fmt + 1 ) == '2'	338:10:9834:9863	3034845	0	True				
ANR	3035330	AndExpression	* fmt == '3' && * ( fmt + 1 ) == '2'		3034845	0		&&			
ANR	3035331	EqualityExpression	* fmt == '3'		3034845	0		==			
ANR	3035332	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035333	UnaryOperator	*		3034845	0					
ANR	3035334	Identifier	fmt		3034845	1					
ANR	3035335	PrimaryExpression	'3'		3034845	1					
ANR	3035336	EqualityExpression	* ( fmt + 1 ) == '2'		3034845	1		==			
ANR	3035337	UnaryOperationExpression	* ( fmt + 1 )		3034845	0					
ANR	3035338	UnaryOperator	*		3034845	0					
ANR	3035339	AdditiveExpression	fmt + 1		3034845	1		+			
ANR	3035340	Identifier	fmt		3034845	0					
ANR	3035341	PrimaryExpression	1		3034845	1					
ANR	3035342	PrimaryExpression	'2'		3034845	1					
ANR	3035343	CompoundStatement		135:42:2635:2635	3034845	1					
ANR	3035344	ExpressionStatement	fmt += 2	339:7:9875:9883	3034845	0	True				
ANR	3035345	AssignmentExpression	fmt += 2		3034845	0		+=			
ANR	3035346	Identifier	fmt		3034845	0					
ANR	3035347	PrimaryExpression	2		3034845	1					
ANR	3035348	ExpressionStatement	modifier = LM_LONG	340:7:9892:9910	3034845	1	True				
ANR	3035349	AssignmentExpression	modifier = LM_LONG		3034845	0		=			
ANR	3035350	Identifier	modifier		3034845	0					
ANR	3035351	Identifier	LM_LONG		3034845	1					
ANR	3035352	ElseStatement	else		3034845	0					
ANR	3035353	CompoundStatement		138:13:2694:2694	3034845	0					
ANR	3035354	ExpressionStatement	modifier = LM_LONG_LONG	343:7:9948:9971	3034845	0	True				
ANR	3035355	AssignmentExpression	modifier = LM_LONG_LONG		3034845	0		=			
ANR	3035356	Identifier	modifier		3034845	0					
ANR	3035357	Identifier	LM_LONG_LONG		3034845	1					
ANR	3035358	BreakStatement	break ;	348:5:10026:10031	3034845	7	True				
ANR	3035359	Label	case 'l' :	349:4:10037:10045	3034845	8	True				
ANR	3035360	ExpressionStatement	fmt ++	350:5:10052:10057	3034845	9	True				
ANR	3035361	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035362	Identifier	fmt		3034845	0					
ANR	3035363	IncDec	++		3034845	1					
ANR	3035364	IfStatement	if ( * fmt == 'l' )		3034845	10					
ANR	3035365	Condition	* fmt == 'l'	352:9:10089:10099	3034845	0	True				
ANR	3035366	EqualityExpression	* fmt == 'l'		3034845	0		==			
ANR	3035367	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035368	UnaryOperator	*		3034845	0					
ANR	3035369	Identifier	fmt		3034845	1					
ANR	3035370	PrimaryExpression	'l'		3034845	1					
ANR	3035371	CompoundStatement		149:22:2871:2871	3034845	1					
ANR	3035372	ExpressionStatement	fmt ++	353:6:10110:10115	3034845	0	True				
ANR	3035373	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035374	Identifier	fmt		3034845	0					
ANR	3035375	IncDec	++		3034845	1					
ANR	3035376	ExpressionStatement	modifier = LM_LONG_LONG	354:6:10123:10146	3034845	1	True				
ANR	3035377	AssignmentExpression	modifier = LM_LONG_LONG		3034845	0		=			
ANR	3035378	Identifier	modifier		3034845	0					
ANR	3035379	Identifier	LM_LONG_LONG		3034845	1					
ANR	3035380	ElseStatement	else		3034845	0					
ANR	3035381	ExpressionStatement	modifier = LM_LONG	357:6:10173:10191	3034845	0	True				
ANR	3035382	AssignmentExpression	modifier = LM_LONG		3034845	0		=			
ANR	3035383	Identifier	modifier		3034845	0					
ANR	3035384	Identifier	LM_LONG		3034845	1					
ANR	3035385	BreakStatement	break ;	358:5:10198:10203	3034845	11	True				
ANR	3035386	Label	case 'z' :	359:4:10209:10217	3034845	12	True				
ANR	3035387	ExpressionStatement	fmt ++	360:5:10224:10229	3034845	13	True				
ANR	3035388	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035389	Identifier	fmt		3034845	0					
ANR	3035390	IncDec	++		3034845	1					
ANR	3035391	ExpressionStatement	modifier = LM_SIZE_T	361:5:10236:10256	3034845	14	True				
ANR	3035392	AssignmentExpression	modifier = LM_SIZE_T		3034845	0		=			
ANR	3035393	Identifier	modifier		3034845	0					
ANR	3035394	Identifier	LM_SIZE_T		3034845	1					
ANR	3035395	BreakStatement	break ;	362:5:10263:10268	3034845	15	True				
ANR	3035396	Label	case 'j' :	363:4:10274:10282	3034845	16	True				
ANR	3035397	ExpressionStatement	fmt ++	364:5:10289:10294	3034845	17	True				
ANR	3035398	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035399	Identifier	fmt		3034845	0					
ANR	3035400	IncDec	++		3034845	1					
ANR	3035401	ExpressionStatement	modifier = LM_INTMAX_T	366:5:10321:10343	3034845	18	True				
ANR	3035402	AssignmentExpression	modifier = LM_INTMAX_T		3034845	0		=			
ANR	3035403	Identifier	modifier		3034845	0					
ANR	3035404	Identifier	LM_INTMAX_T		3034845	1					
ANR	3035405	BreakStatement	break ;	370:5:10390:10395	3034845	19	True				
ANR	3035406	Label	case 't' :	371:4:10401:10409	3034845	20	True				
ANR	3035407	ExpressionStatement	fmt ++	372:5:10416:10421	3034845	21	True				
ANR	3035408	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035409	Identifier	fmt		3034845	0					
ANR	3035410	IncDec	++		3034845	1					
ANR	3035411	ExpressionStatement	modifier = LM_PTRDIFF_T	374:5:10449:10472	3034845	22	True				
ANR	3035412	AssignmentExpression	modifier = LM_PTRDIFF_T		3034845	0		=			
ANR	3035413	Identifier	modifier		3034845	0					
ANR	3035414	Identifier	LM_PTRDIFF_T		3034845	1					
ANR	3035415	BreakStatement	break ;	378:5:10519:10524	3034845	23	True				
ANR	3035416	Label	case 'p' :	379:4:10530:10538	3034845	24	True				
ANR	3035417	CompoundStatement		177:6:3317:3339	3034845	25					
ANR	3035418	IdentifierDeclStatement	char __next = * ( fmt + 1 ) ;	380:6:10548:10570	3034845	0	True				
ANR	3035419	IdentifierDecl	__next = * ( fmt + 1 )		3034845	0					
ANR	3035420	IdentifierDeclType	char		3034845	0					
ANR	3035421	Identifier	__next		3034845	1					
ANR	3035422	AssignmentExpression	__next = * ( fmt + 1 )		3034845	2		=			
ANR	3035423	Identifier	__next		3034845	0					
ANR	3035424	UnaryOperationExpression	* ( fmt + 1 )		3034845	1					
ANR	3035425	UnaryOperator	*		3034845	0					
ANR	3035426	AdditiveExpression	fmt + 1		3034845	1		+			
ANR	3035427	Identifier	fmt		3034845	0					
ANR	3035428	PrimaryExpression	1		3034845	1					
ANR	3035429	IfStatement	if ( 'd' == __next || 'u' == __next || 'x' == __next || 'o' == __next )		3034845	1					
ANR	3035430	Condition	'd' == __next || 'u' == __next || 'x' == __next || 'o' == __next	381:10:10582:10645	3034845	0	True				
ANR	3035431	OrExpression	'd' == __next || 'u' == __next || 'x' == __next || 'o' == __next		3034845	0		||			
ANR	3035432	EqualityExpression	'd' == __next		3034845	0		==			
ANR	3035433	PrimaryExpression	'd'		3034845	0					
ANR	3035434	Identifier	__next		3034845	1					
ANR	3035435	OrExpression	'u' == __next || 'x' == __next || 'o' == __next		3034845	1		||			
ANR	3035436	EqualityExpression	'u' == __next		3034845	0		==			
ANR	3035437	PrimaryExpression	'u'		3034845	0					
ANR	3035438	Identifier	__next		3034845	1					
ANR	3035439	OrExpression	'x' == __next || 'o' == __next		3034845	1		||			
ANR	3035440	EqualityExpression	'x' == __next		3034845	0		==			
ANR	3035441	PrimaryExpression	'x'		3034845	0					
ANR	3035442	Identifier	__next		3034845	1					
ANR	3035443	EqualityExpression	'o' == __next		3034845	1		==			
ANR	3035444	PrimaryExpression	'o'		3034845	0					
ANR	3035445	Identifier	__next		3034845	1					
ANR	3035446	CompoundStatement		178:76:3417:3417	3034845	1					
ANR	3035447	ExpressionStatement	fmt ++	382:7:10657:10662	3034845	0	True				
ANR	3035448	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035449	Identifier	fmt		3034845	0					
ANR	3035450	IncDec	++		3034845	1					
ANR	3035451	ExpressionStatement	modifier = LM_PHP_INT_T	383:7:10671:10694	3034845	1	True				
ANR	3035452	AssignmentExpression	modifier = LM_PHP_INT_T		3034845	0		=			
ANR	3035453	Identifier	modifier		3034845	0					
ANR	3035454	Identifier	LM_PHP_INT_T		3034845	1					
ANR	3035455	ElseStatement	else		3034845	0					
ANR	3035456	CompoundStatement		181:13:3478:3478	3034845	0					
ANR	3035457	ExpressionStatement	modifier = LM_STD	385:7:10718:10735	3034845	0	True				
ANR	3035458	AssignmentExpression	modifier = LM_STD		3034845	0		=			
ANR	3035459	Identifier	modifier		3034845	0					
ANR	3035460	Identifier	LM_STD		3034845	1					
ANR	3035461	BreakStatement	break ;	388:5:10757:10762	3034845	26	True				
ANR	3035462	Label	case 'h' :	389:4:10768:10776	3034845	27	True				
ANR	3035463	ExpressionStatement	fmt ++	390:5:10783:10788	3034845	28	True				
ANR	3035464	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035465	Identifier	fmt		3034845	0					
ANR	3035466	IncDec	++		3034845	1					
ANR	3035467	IfStatement	if ( * fmt == 'h' )		3034845	29					
ANR	3035468	Condition	* fmt == 'h'	391:9:10799:10809	3034845	0	True				
ANR	3035469	EqualityExpression	* fmt == 'h'		3034845	0		==			
ANR	3035470	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035471	UnaryOperator	*		3034845	0					
ANR	3035472	Identifier	fmt		3034845	1					
ANR	3035473	PrimaryExpression	'h'		3034845	1					
ANR	3035474	CompoundStatement		188:22:3581:3581	3034845	1					
ANR	3035475	ExpressionStatement	fmt ++	392:6:10820:10825	3034845	0	True				
ANR	3035476	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3035477	Identifier	fmt		3034845	0					
ANR	3035478	IncDec	++		3034845	1					
ANR	3035479	Label	default :	395:4:10888:10895	3034845	30	True				
ANR	3035480	Identifier	default		3034845	0					
ANR	3035481	ExpressionStatement	modifier = LM_STD	396:5:10902:10919	3034845	31	True				
ANR	3035482	AssignmentExpression	modifier = LM_STD		3034845	0		=			
ANR	3035483	Identifier	modifier		3034845	0					
ANR	3035484	Identifier	LM_STD		3034845	1					
ANR	3035485	BreakStatement	break ;	397:5:10926:10931	3034845	32	True				
ANR	3035486	SwitchStatement	switch ( * fmt )		3034845	8					
ANR	3035487	Condition	* fmt	411:11:11397:11400	3034845	0	True				
ANR	3035488	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035489	UnaryOperator	*		3034845	0					
ANR	3035490	Identifier	fmt		3034845	1					
ANR	3035491	CompoundStatement		208:17:4172:4172	3034845	1					
ANR	3035492	Label	case 'Z' :	412:4:11409:11417	3034845	0	True				
ANR	3035493	CompoundStatement		209:14:4188:4188	3034845	1					
ANR	3035494	Statement	zvp	413:9:11430:11432	3034845	0	True				
ANR	3035495	Statement	=	413:13:11434:11434	3034845	1	True				
ANR	3035496	Statement	(	413:15:11436:11436	3034845	2	True				
ANR	3035497	Statement	zval	413:16:11437:11440	3034845	3	True				
ANR	3035498	Statement	*	413:20:11441:11441	3034845	4	True				
ANR	3035499	Statement	)	413:21:11442:11442	3034845	5	True				
ANR	3035500	Statement	va_arg	413:23:11444:11449	3034845	6	True				
ANR	3035501	Statement	(	413:29:11450:11450	3034845	7	True				
ANR	3035502	Statement	ap	413:30:11451:11452	3034845	8	True				
ANR	3035503	Statement	","	413:32:11453:11453	3034845	9	True				
ANR	3035504	Statement	zval	413:34:11455:11458	3034845	10	True				
ANR	3035505	Statement	*	413:38:11459:11459	3034845	11	True				
ANR	3035506	Statement	)	413:39:11460:11460	3034845	12	True				
ANR	3035507	ExpressionStatement		413:40:11461:11461	3034845	13	True				
ANR	3035508	ExpressionStatement	"free_zcopy = zend_make_printable_zval ( zvp , & zcopy )"	414:5:11468:11518	3034845	14	True				
ANR	3035509	AssignmentExpression	"free_zcopy = zend_make_printable_zval ( zvp , & zcopy )"		3034845	0		=			
ANR	3035510	Identifier	free_zcopy		3034845	0					
ANR	3035511	CallExpression	"zend_make_printable_zval ( zvp , & zcopy )"		3034845	1					
ANR	3035512	Callee	zend_make_printable_zval		3034845	0					
ANR	3035513	Identifier	zend_make_printable_zval		3034845	0					
ANR	3035514	ArgumentList	zvp		3034845	1					
ANR	3035515	Argument	zvp		3034845	0					
ANR	3035516	Identifier	zvp		3034845	0					
ANR	3035517	Argument	& zcopy		3034845	1					
ANR	3035518	UnaryOperationExpression	& zcopy		3034845	0					
ANR	3035519	UnaryOperator	&		3034845	0					
ANR	3035520	Identifier	zcopy		3034845	1					
ANR	3035521	IfStatement	if ( free_zcopy )		3034845	15					
ANR	3035522	Condition	free_zcopy	415:9:11529:11538	3034845	0	True				
ANR	3035523	Identifier	free_zcopy		3034845	0					
ANR	3035524	CompoundStatement		212:21:4310:4310	3034845	1					
ANR	3035525	ExpressionStatement	zvp = & zcopy	416:6:11549:11561	3034845	0	True				
ANR	3035526	AssignmentExpression	zvp = & zcopy		3034845	0		=			
ANR	3035527	Identifier	zvp		3034845	0					
ANR	3035528	UnaryOperationExpression	& zcopy		3034845	1					
ANR	3035529	UnaryOperator	&		3034845	0					
ANR	3035530	Identifier	zcopy		3034845	1					
ANR	3035531	ExpressionStatement	s_len = Z_STRLEN_P ( zvp )	418:5:11575:11598	3034845	16	True				
ANR	3035532	AssignmentExpression	s_len = Z_STRLEN_P ( zvp )		3034845	0		=			
ANR	3035533	Identifier	s_len		3034845	0					
ANR	3035534	CallExpression	Z_STRLEN_P ( zvp )		3034845	1					
ANR	3035535	Callee	Z_STRLEN_P		3034845	0					
ANR	3035536	Identifier	Z_STRLEN_P		3034845	0					
ANR	3035537	ArgumentList	zvp		3034845	1					
ANR	3035538	Argument	zvp		3034845	0					
ANR	3035539	Identifier	zvp		3034845	0					
ANR	3035540	ExpressionStatement	s = Z_STRVAL_P ( zvp )	419:5:11605:11624	3034845	17	True				
ANR	3035541	AssignmentExpression	s = Z_STRVAL_P ( zvp )		3034845	0		=			
ANR	3035542	Identifier	s		3034845	0					
ANR	3035543	CallExpression	Z_STRVAL_P ( zvp )		3034845	1					
ANR	3035544	Callee	Z_STRVAL_P		3034845	0					
ANR	3035545	Identifier	Z_STRVAL_P		3034845	0					
ANR	3035546	ArgumentList	zvp		3034845	1					
ANR	3035547	Argument	zvp		3034845	0					
ANR	3035548	Identifier	zvp		3034845	0					
ANR	3035549	IfStatement	if ( adjust_precision && precision < s_len )		3034845	18					
ANR	3035550	Condition	adjust_precision && precision < s_len	420:9:11635:11671	3034845	0	True				
ANR	3035551	AndExpression	adjust_precision && precision < s_len		3034845	0		&&			
ANR	3035552	Identifier	adjust_precision		3034845	0					
ANR	3035553	RelationalExpression	precision < s_len		3034845	1		<			
ANR	3035554	Identifier	precision		3034845	0					
ANR	3035555	Identifier	s_len		3034845	1					
ANR	3035556	CompoundStatement		217:48:4443:4443	3034845	1					
ANR	3035557	ExpressionStatement	s_len = precision	421:6:11682:11699	3034845	0	True				
ANR	3035558	AssignmentExpression	s_len = precision		3034845	0		=			
ANR	3035559	Identifier	s_len		3034845	0					
ANR	3035560	Identifier	precision		3034845	1					
ANR	3035561	BreakStatement	break ;	423:5:11713:11718	3034845	19	True				
ANR	3035562	Label	case 'u' :	425:4:11730:11738	3034845	2	True				
ANR	3035563	SwitchStatement	switch ( modifier )		3034845	3					
ANR	3035564	Condition	modifier	426:12:11752:11759	3034845	0	True				
ANR	3035565	Identifier	modifier		3034845	0					
ANR	3035566	CompoundStatement		223:22:4531:4531	3034845	1					
ANR	3035567	Label	default :	427:6:11770:11777	3034845	0	True				
ANR	3035568	Identifier	default		3034845	0					
ANR	3035569	Statement	i_num	428:7:11786:11790	3034845	1	True				
ANR	3035570	Statement	=	428:13:11792:11792	3034845	2	True				
ANR	3035571	Statement	(	428:15:11794:11794	3034845	3	True				
ANR	3035572	Statement	wide_int	428:16:11795:11802	3034845	4	True				
ANR	3035573	Statement	)	428:24:11803:11803	3034845	5	True				
ANR	3035574	Statement	va_arg	428:26:11805:11810	3034845	6	True				
ANR	3035575	Statement	(	428:32:11811:11811	3034845	7	True				
ANR	3035576	Statement	ap	428:33:11812:11813	3034845	8	True				
ANR	3035577	Statement	","	428:35:11814:11814	3034845	9	True				
ANR	3035578	Statement	unsigned	428:37:11816:11823	3034845	10	True				
ANR	3035579	Statement	int	428:46:11825:11827	3034845	11	True				
ANR	3035580	Statement	)	428:49:11828:11828	3034845	12	True				
ANR	3035581	ExpressionStatement		428:50:11829:11829	3034845	13	True				
ANR	3035582	BreakStatement	break ;	429:7:11838:11843	3034845	14	True				
ANR	3035583	Label	case LM_LONG_DOUBLE :	430:6:11851:11870	3034845	15	True				
ANR	3035584	Identifier	LM_LONG_DOUBLE		3034845	0					
ANR	3035585	GotoStatement	goto fmt_error ;	431:7:11879:11893	3034845	16	True				
ANR	3035586	Identifier	fmt_error		3034845	0					
ANR	3035587	Label	case LM_LONG :	432:6:11901:11913	3034845	17	True				
ANR	3035588	Identifier	LM_LONG		3034845	0					
ANR	3035589	Statement	i_num	433:7:11922:11926	3034845	18	True				
ANR	3035590	Statement	=	433:13:11928:11928	3034845	19	True				
ANR	3035591	Statement	(	433:15:11930:11930	3034845	20	True				
ANR	3035592	Statement	wide_int	433:16:11931:11938	3034845	21	True				
ANR	3035593	Statement	)	433:24:11939:11939	3034845	22	True				
ANR	3035594	Statement	va_arg	433:26:11941:11946	3034845	23	True				
ANR	3035595	Statement	(	433:32:11947:11947	3034845	24	True				
ANR	3035596	Statement	ap	433:33:11948:11949	3034845	25	True				
ANR	3035597	Statement	","	433:35:11950:11950	3034845	26	True				
ANR	3035598	Statement	unsigned	433:37:11952:11959	3034845	27	True				
ANR	3035599	Statement	long	433:46:11961:11964	3034845	28	True				
ANR	3035600	Statement	int	433:51:11966:11968	3034845	29	True				
ANR	3035601	Statement	)	433:54:11969:11969	3034845	30	True				
ANR	3035602	ExpressionStatement		433:55:11970:11970	3034845	31	True				
ANR	3035603	BreakStatement	break ;	434:7:11979:11984	3034845	32	True				
ANR	3035604	Label	case LM_SIZE_T :	435:6:11992:12006	3034845	33	True				
ANR	3035605	Identifier	LM_SIZE_T		3034845	0					
ANR	3035606	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , size_t )"	436:7:12015:12052	3034845	34	True				
ANR	3035607	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , size_t )"		3034845	0		=			
ANR	3035608	Identifier	i_num		3034845	0					
ANR	3035609	CastExpression	"( wide_int ) va_arg ( ap , size_t )"		3034845	1					
ANR	3035610	CastTarget	wide_int		3034845	0					
ANR	3035611	CallExpression	"va_arg ( ap , size_t )"		3034845	1					
ANR	3035612	Callee	va_arg		3034845	0					
ANR	3035613	Identifier	va_arg		3034845	0					
ANR	3035614	ArgumentList	ap		3034845	1					
ANR	3035615	Argument	ap		3034845	0					
ANR	3035616	Identifier	ap		3034845	0					
ANR	3035617	Argument	size_t		3034845	1					
ANR	3035618	Identifier	size_t		3034845	0					
ANR	3035619	BreakStatement	break ;	437:7:12061:12066	3034845	35	True				
ANR	3035620	Label	case LM_LONG_LONG :	439:6:12095:12112	3034845	36	True				
ANR	3035621	Identifier	LM_LONG_LONG		3034845	0					
ANR	3035622	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , u_wide_int )"	440:7:12121:12162	3034845	37	True				
ANR	3035623	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , u_wide_int )"		3034845	0		=			
ANR	3035624	Identifier	i_num		3034845	0					
ANR	3035625	CastExpression	"( wide_int ) va_arg ( ap , u_wide_int )"		3034845	1					
ANR	3035626	CastTarget	wide_int		3034845	0					
ANR	3035627	CallExpression	"va_arg ( ap , u_wide_int )"		3034845	1					
ANR	3035628	Callee	va_arg		3034845	0					
ANR	3035629	Identifier	va_arg		3034845	0					
ANR	3035630	ArgumentList	ap		3034845	1					
ANR	3035631	Argument	ap		3034845	0					
ANR	3035632	Identifier	ap		3034845	0					
ANR	3035633	Argument	u_wide_int		3034845	1					
ANR	3035634	Identifier	u_wide_int		3034845	0					
ANR	3035635	BreakStatement	break ;	441:7:12171:12176	3034845	38	True				
ANR	3035636	Label	case LM_INTMAX_T :	444:6:12211:12227	3034845	39	True				
ANR	3035637	Identifier	LM_INTMAX_T		3034845	0					
ANR	3035638	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , uintmax_t )"	445:7:12236:12276	3034845	40	True				
ANR	3035639	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , uintmax_t )"		3034845	0		=			
ANR	3035640	Identifier	i_num		3034845	0					
ANR	3035641	CastExpression	"( wide_int ) va_arg ( ap , uintmax_t )"		3034845	1					
ANR	3035642	CastTarget	wide_int		3034845	0					
ANR	3035643	CallExpression	"va_arg ( ap , uintmax_t )"		3034845	1					
ANR	3035644	Callee	va_arg		3034845	0					
ANR	3035645	Identifier	va_arg		3034845	0					
ANR	3035646	ArgumentList	ap		3034845	1					
ANR	3035647	Argument	ap		3034845	0					
ANR	3035648	Identifier	ap		3034845	0					
ANR	3035649	Argument	uintmax_t		3034845	1					
ANR	3035650	Identifier	uintmax_t		3034845	0					
ANR	3035651	BreakStatement	break ;	446:7:12285:12290	3034845	41	True				
ANR	3035652	Label	case LM_PTRDIFF_T :	449:6:12326:12343	3034845	42	True				
ANR	3035653	Identifier	LM_PTRDIFF_T		3034845	0					
ANR	3035654	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , ptrdiff_t )"	450:7:12352:12392	3034845	43	True				
ANR	3035655	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , ptrdiff_t )"		3034845	0		=			
ANR	3035656	Identifier	i_num		3034845	0					
ANR	3035657	CastExpression	"( wide_int ) va_arg ( ap , ptrdiff_t )"		3034845	1					
ANR	3035658	CastTarget	wide_int		3034845	0					
ANR	3035659	CallExpression	"va_arg ( ap , ptrdiff_t )"		3034845	1					
ANR	3035660	Callee	va_arg		3034845	0					
ANR	3035661	Identifier	va_arg		3034845	0					
ANR	3035662	ArgumentList	ap		3034845	1					
ANR	3035663	Argument	ap		3034845	0					
ANR	3035664	Identifier	ap		3034845	0					
ANR	3035665	Argument	ptrdiff_t		3034845	1					
ANR	3035666	Identifier	ptrdiff_t		3034845	0					
ANR	3035667	BreakStatement	break ;	451:7:12401:12406	3034845	44	True				
ANR	3035668	Label	case LM_PHP_INT_T :	453:6:12421:12438	3034845	45	True				
ANR	3035669	Identifier	LM_PHP_INT_T		3034845	0					
ANR	3035670	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , zend_ulong )"	454:7:12447:12488	3034845	46	True				
ANR	3035671	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , zend_ulong )"		3034845	0		=			
ANR	3035672	Identifier	i_num		3034845	0					
ANR	3035673	CastExpression	"( wide_int ) va_arg ( ap , zend_ulong )"		3034845	1					
ANR	3035674	CastTarget	wide_int		3034845	0					
ANR	3035675	CallExpression	"va_arg ( ap , zend_ulong )"		3034845	1					
ANR	3035676	Callee	va_arg		3034845	0					
ANR	3035677	Identifier	va_arg		3034845	0					
ANR	3035678	ArgumentList	ap		3034845	1					
ANR	3035679	Argument	ap		3034845	0					
ANR	3035680	Identifier	ap		3034845	0					
ANR	3035681	Argument	zend_ulong		3034845	1					
ANR	3035682	Identifier	zend_ulong		3034845	0					
ANR	3035683	BreakStatement	break ;	455:7:12497:12502	3034845	47	True				
ANR	3035684	Label	case 'd' :	461:4:12620:12628	3034845	4	True				
ANR	3035685	Label	case 'i' :	462:4:12634:12642	3034845	5	True				
ANR	3035686	IfStatement	if ( ( * fmt ) != 'u' )		3034845	6					
ANR	3035687	Condition	( * fmt ) != 'u'	466:9:12713:12725	3034845	0	True				
ANR	3035688	EqualityExpression	( * fmt ) != 'u'		3034845	0		!=			
ANR	3035689	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035690	UnaryOperator	*		3034845	0					
ANR	3035691	Identifier	fmt		3034845	1					
ANR	3035692	PrimaryExpression	'u'		3034845	1					
ANR	3035693	CompoundStatement		263:24:5497:5497	3034845	1					
ANR	3035694	SwitchStatement	switch ( modifier )		3034845	0					
ANR	3035695	Condition	modifier	467:13:12743:12750	3034845	0	True				
ANR	3035696	Identifier	modifier		3034845	0					
ANR	3035697	CompoundStatement		264:23:5522:5522	3034845	1					
ANR	3035698	Label	default :	468:7:12762:12769	3034845	0	True				
ANR	3035699	Identifier	default		3034845	0					
ANR	3035700	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , int )"	469:8:12779:12813	3034845	1	True				
ANR	3035701	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , int )"		3034845	0		=			
ANR	3035702	Identifier	i_num		3034845	0					
ANR	3035703	CastExpression	"( wide_int ) va_arg ( ap , int )"		3034845	1					
ANR	3035704	CastTarget	wide_int		3034845	0					
ANR	3035705	CallExpression	"va_arg ( ap , int )"		3034845	1					
ANR	3035706	Callee	va_arg		3034845	0					
ANR	3035707	Identifier	va_arg		3034845	0					
ANR	3035708	ArgumentList	ap		3034845	1					
ANR	3035709	Argument	ap		3034845	0					
ANR	3035710	Identifier	ap		3034845	0					
ANR	3035711	Argument	int		3034845	1					
ANR	3035712	Identifier	int		3034845	0					
ANR	3035713	BreakStatement	break ;	470:8:12823:12828	3034845	2	True				
ANR	3035714	Label	case LM_LONG_DOUBLE :	471:7:12837:12856	3034845	3	True				
ANR	3035715	Identifier	LM_LONG_DOUBLE		3034845	0					
ANR	3035716	GotoStatement	goto fmt_error ;	472:8:12866:12880	3034845	4	True				
ANR	3035717	Identifier	fmt_error		3034845	0					
ANR	3035718	Label	case LM_LONG :	473:7:12889:12901	3034845	5	True				
ANR	3035719	Identifier	LM_LONG		3034845	0					
ANR	3035720	Statement	i_num	474:8:12911:12915	3034845	6	True				
ANR	3035721	Statement	=	474:14:12917:12917	3034845	7	True				
ANR	3035722	Statement	(	474:16:12919:12919	3034845	8	True				
ANR	3035723	Statement	wide_int	474:17:12920:12927	3034845	9	True				
ANR	3035724	Statement	)	474:25:12928:12928	3034845	10	True				
ANR	3035725	Statement	va_arg	474:27:12930:12935	3034845	11	True				
ANR	3035726	Statement	(	474:33:12936:12936	3034845	12	True				
ANR	3035727	Statement	ap	474:34:12937:12938	3034845	13	True				
ANR	3035728	Statement	","	474:36:12939:12939	3034845	14	True				
ANR	3035729	Statement	long	474:38:12941:12944	3034845	15	True				
ANR	3035730	Statement	int	474:43:12946:12948	3034845	16	True				
ANR	3035731	Statement	)	474:46:12949:12949	3034845	17	True				
ANR	3035732	ExpressionStatement		474:47:12950:12950	3034845	18	True				
ANR	3035733	BreakStatement	break ;	475:8:12960:12965	3034845	19	True				
ANR	3035734	Label	case LM_SIZE_T :	476:7:12974:12988	3034845	20	True				
ANR	3035735	Identifier	LM_SIZE_T		3034845	0					
ANR	3035736	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , ssize_t )"	478:8:13017:13055	3034845	21	True				
ANR	3035737	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , ssize_t )"		3034845	0		=			
ANR	3035738	Identifier	i_num		3034845	0					
ANR	3035739	CastExpression	"( wide_int ) va_arg ( ap , ssize_t )"		3034845	1					
ANR	3035740	CastTarget	wide_int		3034845	0					
ANR	3035741	CallExpression	"va_arg ( ap , ssize_t )"		3034845	1					
ANR	3035742	Callee	va_arg		3034845	0					
ANR	3035743	Identifier	va_arg		3034845	0					
ANR	3035744	ArgumentList	ap		3034845	1					
ANR	3035745	Argument	ap		3034845	0					
ANR	3035746	Identifier	ap		3034845	0					
ANR	3035747	Argument	ssize_t		3034845	1					
ANR	3035748	Identifier	ssize_t		3034845	0					
ANR	3035749	BreakStatement	break ;	482:8:13125:13130	3034845	22	True				
ANR	3035750	Label	case LM_LONG_LONG :	484:7:13160:13177	3034845	23	True				
ANR	3035751	Identifier	LM_LONG_LONG		3034845	0					
ANR	3035752	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , wide_int )"	485:8:13187:13226	3034845	24	True				
ANR	3035753	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , wide_int )"		3034845	0		=			
ANR	3035754	Identifier	i_num		3034845	0					
ANR	3035755	CastExpression	"( wide_int ) va_arg ( ap , wide_int )"		3034845	1					
ANR	3035756	CastTarget	wide_int		3034845	0					
ANR	3035757	CallExpression	"va_arg ( ap , wide_int )"		3034845	1					
ANR	3035758	Callee	va_arg		3034845	0					
ANR	3035759	Identifier	va_arg		3034845	0					
ANR	3035760	ArgumentList	ap		3034845	1					
ANR	3035761	Argument	ap		3034845	0					
ANR	3035762	Identifier	ap		3034845	0					
ANR	3035763	Argument	wide_int		3034845	1					
ANR	3035764	Identifier	wide_int		3034845	0					
ANR	3035765	BreakStatement	break ;	486:8:13236:13241	3034845	25	True				
ANR	3035766	Label	case LM_INTMAX_T :	489:7:13277:13293	3034845	26	True				
ANR	3035767	Identifier	LM_INTMAX_T		3034845	0					
ANR	3035768	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , intmax_t )"	490:8:13303:13342	3034845	27	True				
ANR	3035769	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , intmax_t )"		3034845	0		=			
ANR	3035770	Identifier	i_num		3034845	0					
ANR	3035771	CastExpression	"( wide_int ) va_arg ( ap , intmax_t )"		3034845	1					
ANR	3035772	CastTarget	wide_int		3034845	0					
ANR	3035773	CallExpression	"va_arg ( ap , intmax_t )"		3034845	1					
ANR	3035774	Callee	va_arg		3034845	0					
ANR	3035775	Identifier	va_arg		3034845	0					
ANR	3035776	ArgumentList	ap		3034845	1					
ANR	3035777	Argument	ap		3034845	0					
ANR	3035778	Identifier	ap		3034845	0					
ANR	3035779	Argument	intmax_t		3034845	1					
ANR	3035780	Identifier	intmax_t		3034845	0					
ANR	3035781	BreakStatement	break ;	491:8:13352:13357	3034845	28	True				
ANR	3035782	Label	case LM_PTRDIFF_T :	494:7:13394:13411	3034845	29	True				
ANR	3035783	Identifier	LM_PTRDIFF_T		3034845	0					
ANR	3035784	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , ptrdiff_t )"	495:8:13421:13461	3034845	30	True				
ANR	3035785	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , ptrdiff_t )"		3034845	0		=			
ANR	3035786	Identifier	i_num		3034845	0					
ANR	3035787	CastExpression	"( wide_int ) va_arg ( ap , ptrdiff_t )"		3034845	1					
ANR	3035788	CastTarget	wide_int		3034845	0					
ANR	3035789	CallExpression	"va_arg ( ap , ptrdiff_t )"		3034845	1					
ANR	3035790	Callee	va_arg		3034845	0					
ANR	3035791	Identifier	va_arg		3034845	0					
ANR	3035792	ArgumentList	ap		3034845	1					
ANR	3035793	Argument	ap		3034845	0					
ANR	3035794	Identifier	ap		3034845	0					
ANR	3035795	Argument	ptrdiff_t		3034845	1					
ANR	3035796	Identifier	ptrdiff_t		3034845	0					
ANR	3035797	BreakStatement	break ;	496:8:13471:13476	3034845	31	True				
ANR	3035798	Label	case LM_PHP_INT_T :	498:7:13492:13509	3034845	32	True				
ANR	3035799	Identifier	LM_PHP_INT_T		3034845	0					
ANR	3035800	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , zend_long )"	499:8:13519:13559	3034845	33	True				
ANR	3035801	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , zend_long )"		3034845	0		=			
ANR	3035802	Identifier	i_num		3034845	0					
ANR	3035803	CastExpression	"( wide_int ) va_arg ( ap , zend_long )"		3034845	1					
ANR	3035804	CastTarget	wide_int		3034845	0					
ANR	3035805	CallExpression	"va_arg ( ap , zend_long )"		3034845	1					
ANR	3035806	Callee	va_arg		3034845	0					
ANR	3035807	Identifier	va_arg		3034845	0					
ANR	3035808	ArgumentList	ap		3034845	1					
ANR	3035809	Argument	ap		3034845	0					
ANR	3035810	Identifier	ap		3034845	0					
ANR	3035811	Argument	zend_long		3034845	1					
ANR	3035812	Identifier	zend_long		3034845	0					
ANR	3035813	BreakStatement	break ;	500:8:13569:13574	3034845	34	True				
ANR	3035814	ExpressionStatement	"s = ap_php_conv_10 ( i_num , ( * fmt ) == 'u' , & is_negative , & num_buf [ NUM_BUF_SIZE ] , & s_len )"	503:5:13596:13690	3034845	7	True				
ANR	3035815	AssignmentExpression	"s = ap_php_conv_10 ( i_num , ( * fmt ) == 'u' , & is_negative , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3034845	0		=			
ANR	3035816	Identifier	s		3034845	0					
ANR	3035817	CallExpression	"ap_php_conv_10 ( i_num , ( * fmt ) == 'u' , & is_negative , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3034845	1					
ANR	3035818	Callee	ap_php_conv_10		3034845	0					
ANR	3035819	Identifier	ap_php_conv_10		3034845	0					
ANR	3035820	ArgumentList	i_num		3034845	1					
ANR	3035821	Argument	i_num		3034845	0					
ANR	3035822	Identifier	i_num		3034845	0					
ANR	3035823	Argument	( * fmt ) == 'u'		3034845	1					
ANR	3035824	EqualityExpression	( * fmt ) == 'u'		3034845	0		==			
ANR	3035825	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035826	UnaryOperator	*		3034845	0					
ANR	3035827	Identifier	fmt		3034845	1					
ANR	3035828	PrimaryExpression	'u'		3034845	1					
ANR	3035829	Argument	& is_negative		3034845	2					
ANR	3035830	UnaryOperationExpression	& is_negative		3034845	0					
ANR	3035831	UnaryOperator	&		3034845	0					
ANR	3035832	Identifier	is_negative		3034845	1					
ANR	3035833	Argument	& num_buf [ NUM_BUF_SIZE ]		3034845	3					
ANR	3035834	UnaryOperationExpression	& num_buf [ NUM_BUF_SIZE ]		3034845	0					
ANR	3035835	UnaryOperator	&		3034845	0					
ANR	3035836	ArrayIndexing	num_buf [ NUM_BUF_SIZE ]		3034845	1					
ANR	3035837	Identifier	num_buf		3034845	0					
ANR	3035838	Identifier	NUM_BUF_SIZE		3034845	1					
ANR	3035839	Argument	& s_len		3034845	4					
ANR	3035840	UnaryOperationExpression	& s_len		3034845	0					
ANR	3035841	UnaryOperator	&		3034845	0					
ANR	3035842	Identifier	s_len		3034845	1					
ANR	3035843	ExpressionStatement	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"	505:5:13697:13749	3034845	8	True				
ANR	3035844	CallExpression	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"		3034845	0					
ANR	3035845	Callee	FIX_PRECISION		3034845	0					
ANR	3035846	Identifier	FIX_PRECISION		3034845	0					
ANR	3035847	ArgumentList	adjust_precision		3034845	1					
ANR	3035848	Argument	adjust_precision		3034845	0					
ANR	3035849	Identifier	adjust_precision		3034845	0					
ANR	3035850	Argument	precision		3034845	1					
ANR	3035851	Identifier	precision		3034845	0					
ANR	3035852	Argument	s		3034845	2					
ANR	3035853	Identifier	s		3034845	0					
ANR	3035854	Argument	s_len		3034845	3					
ANR	3035855	Identifier	s_len		3034845	0					
ANR	3035856	IfStatement	if ( * fmt != 'u' )		3034845	9					
ANR	3035857	Condition	* fmt != 'u'	507:9:13761:13771	3034845	0	True				
ANR	3035858	EqualityExpression	* fmt != 'u'		3034845	0		!=			
ANR	3035859	UnaryOperationExpression	* fmt		3034845	0					
ANR	3035860	UnaryOperator	*		3034845	0					
ANR	3035861	Identifier	fmt		3034845	1					
ANR	3035862	PrimaryExpression	'u'		3034845	1					
ANR	3035863	CompoundStatement		304:22:6543:6543	3034845	1					
ANR	3035864	IfStatement	if ( is_negative )		3034845	0					
ANR	3035865	Condition	is_negative	508:10:13786:13796	3034845	0	True				
ANR	3035866	Identifier	is_negative		3034845	0					
ANR	3035867	ExpressionStatement	prefix_char = '-'	509:7:13806:13823	3034845	1	True				
ANR	3035868	AssignmentExpression	prefix_char = '-'		3034845	0		=			
ANR	3035869	Identifier	prefix_char		3034845	0					
ANR	3035870	PrimaryExpression	'-'		3034845	1					
ANR	3035871	ElseStatement	else		3034845	0					
ANR	3035872	IfStatement	if ( print_sign )		3034845	0					
ANR	3035873	Condition	print_sign	510:15:13840:13849	3034845	0	True				
ANR	3035874	Identifier	print_sign		3034845	0					
ANR	3035875	ExpressionStatement	prefix_char = '+'	511:7:13859:13876	3034845	1	True				
ANR	3035876	AssignmentExpression	prefix_char = '+'		3034845	0		=			
ANR	3035877	Identifier	prefix_char		3034845	0					
ANR	3035878	PrimaryExpression	'+'		3034845	1					
ANR	3035879	ElseStatement	else		3034845	0					
ANR	3035880	IfStatement	if ( print_blank )		3034845	0					
ANR	3035881	Condition	print_blank	512:15:13893:13903	3034845	0	True				
ANR	3035882	Identifier	print_blank		3034845	0					
ANR	3035883	ExpressionStatement	prefix_char = ' '	513:7:13913:13930	3034845	1	True				
ANR	3035884	AssignmentExpression	prefix_char = ' '		3034845	0		=			
ANR	3035885	Identifier	prefix_char		3034845	0					
ANR	3035886	PrimaryExpression	' '		3034845	1					
ANR	3035887	BreakStatement	break ;	515:5:13944:13949	3034845	10	True				
ANR	3035888	Label	case 'o' :	518:4:13957:13965	3034845	11	True				
ANR	3035889	SwitchStatement	switch ( modifier )		3034845	12					
ANR	3035890	Condition	modifier	519:12:13979:13986	3034845	0	True				
ANR	3035891	Identifier	modifier		3034845	0					
ANR	3035892	CompoundStatement		316:22:6758:6758	3034845	1					
ANR	3035893	Label	default :	520:6:13997:14004	3034845	0	True				
ANR	3035894	Identifier	default		3034845	0					
ANR	3035895	Statement	ui_num	521:7:14013:14018	3034845	1	True				
ANR	3035896	Statement	=	521:14:14020:14020	3034845	2	True				
ANR	3035897	Statement	(	521:16:14022:14022	3034845	3	True				
ANR	3035898	Statement	u_wide_int	521:17:14023:14032	3034845	4	True				
ANR	3035899	Statement	)	521:27:14033:14033	3034845	5	True				
ANR	3035900	Statement	va_arg	521:29:14035:14040	3034845	6	True				
ANR	3035901	Statement	(	521:35:14041:14041	3034845	7	True				
ANR	3035902	Statement	ap	521:36:14042:14043	3034845	8	True				
ANR	3035903	Statement	","	521:38:14044:14044	3034845	9	True				
ANR	3035904	Statement	unsigned	521:40:14046:14053	3034845	10	True				
ANR	3035905	Statement	int	521:49:14055:14057	3034845	11	True				
ANR	3035906	Statement	)	521:52:14058:14058	3034845	12	True				
ANR	3035907	ExpressionStatement		521:53:14059:14059	3034845	13	True				
ANR	3035908	BreakStatement	break ;	522:7:14068:14073	3034845	14	True				
ANR	3035909	Label	case LM_LONG_DOUBLE :	523:6:14081:14100	3034845	15	True				
ANR	3035910	Identifier	LM_LONG_DOUBLE		3034845	0					
ANR	3035911	GotoStatement	goto fmt_error ;	524:7:14109:14123	3034845	16	True				
ANR	3035912	Identifier	fmt_error		3034845	0					
ANR	3035913	Label	case LM_LONG :	525:6:14131:14143	3034845	17	True				
ANR	3035914	Identifier	LM_LONG		3034845	0					
ANR	3035915	Statement	ui_num	526:7:14152:14157	3034845	18	True				
ANR	3035916	Statement	=	526:14:14159:14159	3034845	19	True				
ANR	3035917	Statement	(	526:16:14161:14161	3034845	20	True				
ANR	3035918	Statement	u_wide_int	526:17:14162:14171	3034845	21	True				
ANR	3035919	Statement	)	526:27:14172:14172	3034845	22	True				
ANR	3035920	Statement	va_arg	526:29:14174:14179	3034845	23	True				
ANR	3035921	Statement	(	526:35:14180:14180	3034845	24	True				
ANR	3035922	Statement	ap	526:36:14181:14182	3034845	25	True				
ANR	3035923	Statement	","	526:38:14183:14183	3034845	26	True				
ANR	3035924	Statement	unsigned	526:40:14185:14192	3034845	27	True				
ANR	3035925	Statement	long	526:49:14194:14197	3034845	28	True				
ANR	3035926	Statement	int	526:54:14199:14201	3034845	29	True				
ANR	3035927	Statement	)	526:57:14202:14202	3034845	30	True				
ANR	3035928	ExpressionStatement		526:58:14203:14203	3034845	31	True				
ANR	3035929	BreakStatement	break ;	527:7:14212:14217	3034845	32	True				
ANR	3035930	Label	case LM_SIZE_T :	528:6:14225:14239	3034845	33	True				
ANR	3035931	Identifier	LM_SIZE_T		3034845	0					
ANR	3035932	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , size_t )"	529:7:14248:14288	3034845	34	True				
ANR	3035933	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , size_t )"		3034845	0		=			
ANR	3035934	Identifier	ui_num		3034845	0					
ANR	3035935	CastExpression	"( u_wide_int ) va_arg ( ap , size_t )"		3034845	1					
ANR	3035936	CastTarget	u_wide_int		3034845	0					
ANR	3035937	CallExpression	"va_arg ( ap , size_t )"		3034845	1					
ANR	3035938	Callee	va_arg		3034845	0					
ANR	3035939	Identifier	va_arg		3034845	0					
ANR	3035940	ArgumentList	ap		3034845	1					
ANR	3035941	Argument	ap		3034845	0					
ANR	3035942	Identifier	ap		3034845	0					
ANR	3035943	Argument	size_t		3034845	1					
ANR	3035944	Identifier	size_t		3034845	0					
ANR	3035945	BreakStatement	break ;	530:7:14297:14302	3034845	35	True				
ANR	3035946	Label	case LM_LONG_LONG :	532:6:14331:14348	3034845	36	True				
ANR	3035947	Identifier	LM_LONG_LONG		3034845	0					
ANR	3035948	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , u_wide_int )"	533:7:14357:14401	3034845	37	True				
ANR	3035949	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , u_wide_int )"		3034845	0		=			
ANR	3035950	Identifier	ui_num		3034845	0					
ANR	3035951	CastExpression	"( u_wide_int ) va_arg ( ap , u_wide_int )"		3034845	1					
ANR	3035952	CastTarget	u_wide_int		3034845	0					
ANR	3035953	CallExpression	"va_arg ( ap , u_wide_int )"		3034845	1					
ANR	3035954	Callee	va_arg		3034845	0					
ANR	3035955	Identifier	va_arg		3034845	0					
ANR	3035956	ArgumentList	ap		3034845	1					
ANR	3035957	Argument	ap		3034845	0					
ANR	3035958	Identifier	ap		3034845	0					
ANR	3035959	Argument	u_wide_int		3034845	1					
ANR	3035960	Identifier	u_wide_int		3034845	0					
ANR	3035961	BreakStatement	break ;	534:7:14410:14415	3034845	38	True				
ANR	3035962	Label	case LM_INTMAX_T :	537:6:14450:14466	3034845	39	True				
ANR	3035963	Identifier	LM_INTMAX_T		3034845	0					
ANR	3035964	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , uintmax_t )"	538:7:14475:14518	3034845	40	True				
ANR	3035965	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , uintmax_t )"		3034845	0		=			
ANR	3035966	Identifier	ui_num		3034845	0					
ANR	3035967	CastExpression	"( u_wide_int ) va_arg ( ap , uintmax_t )"		3034845	1					
ANR	3035968	CastTarget	u_wide_int		3034845	0					
ANR	3035969	CallExpression	"va_arg ( ap , uintmax_t )"		3034845	1					
ANR	3035970	Callee	va_arg		3034845	0					
ANR	3035971	Identifier	va_arg		3034845	0					
ANR	3035972	ArgumentList	ap		3034845	1					
ANR	3035973	Argument	ap		3034845	0					
ANR	3035974	Identifier	ap		3034845	0					
ANR	3035975	Argument	uintmax_t		3034845	1					
ANR	3035976	Identifier	uintmax_t		3034845	0					
ANR	3035977	BreakStatement	break ;	539:7:14527:14532	3034845	41	True				
ANR	3035978	Label	case LM_PTRDIFF_T :	542:6:14568:14585	3034845	42	True				
ANR	3035979	Identifier	LM_PTRDIFF_T		3034845	0					
ANR	3035980	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , ptrdiff_t )"	543:7:14594:14637	3034845	43	True				
ANR	3035981	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , ptrdiff_t )"		3034845	0		=			
ANR	3035982	Identifier	ui_num		3034845	0					
ANR	3035983	CastExpression	"( u_wide_int ) va_arg ( ap , ptrdiff_t )"		3034845	1					
ANR	3035984	CastTarget	u_wide_int		3034845	0					
ANR	3035985	CallExpression	"va_arg ( ap , ptrdiff_t )"		3034845	1					
ANR	3035986	Callee	va_arg		3034845	0					
ANR	3035987	Identifier	va_arg		3034845	0					
ANR	3035988	ArgumentList	ap		3034845	1					
ANR	3035989	Argument	ap		3034845	0					
ANR	3035990	Identifier	ap		3034845	0					
ANR	3035991	Argument	ptrdiff_t		3034845	1					
ANR	3035992	Identifier	ptrdiff_t		3034845	0					
ANR	3035993	BreakStatement	break ;	544:7:14646:14651	3034845	44	True				
ANR	3035994	Label	case LM_PHP_INT_T :	546:6:14666:14683	3034845	45	True				
ANR	3035995	Identifier	LM_PHP_INT_T		3034845	0					
ANR	3035996	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , zend_ulong )"	547:7:14692:14736	3034845	46	True				
ANR	3035997	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , zend_ulong )"		3034845	0		=			
ANR	3035998	Identifier	ui_num		3034845	0					
ANR	3035999	CastExpression	"( u_wide_int ) va_arg ( ap , zend_ulong )"		3034845	1					
ANR	3036000	CastTarget	u_wide_int		3034845	0					
ANR	3036001	CallExpression	"va_arg ( ap , zend_ulong )"		3034845	1					
ANR	3036002	Callee	va_arg		3034845	0					
ANR	3036003	Identifier	va_arg		3034845	0					
ANR	3036004	ArgumentList	ap		3034845	1					
ANR	3036005	Argument	ap		3034845	0					
ANR	3036006	Identifier	ap		3034845	0					
ANR	3036007	Argument	zend_ulong		3034845	1					
ANR	3036008	Identifier	zend_ulong		3034845	0					
ANR	3036009	BreakStatement	break ;	548:7:14745:14750	3034845	47	True				
ANR	3036010	ExpressionStatement	"s = ap_php_conv_p2 ( ui_num , 3 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"	550:5:14764:14839	3034845	13	True				
ANR	3036011	AssignmentExpression	"s = ap_php_conv_p2 ( ui_num , 3 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3034845	0		=			
ANR	3036012	Identifier	s		3034845	0					
ANR	3036013	CallExpression	"ap_php_conv_p2 ( ui_num , 3 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3034845	1					
ANR	3036014	Callee	ap_php_conv_p2		3034845	0					
ANR	3036015	Identifier	ap_php_conv_p2		3034845	0					
ANR	3036016	ArgumentList	ui_num		3034845	1					
ANR	3036017	Argument	ui_num		3034845	0					
ANR	3036018	Identifier	ui_num		3034845	0					
ANR	3036019	Argument	3		3034845	1					
ANR	3036020	PrimaryExpression	3		3034845	0					
ANR	3036021	Argument	* fmt		3034845	2					
ANR	3036022	UnaryOperationExpression	* fmt		3034845	0					
ANR	3036023	UnaryOperator	*		3034845	0					
ANR	3036024	Identifier	fmt		3034845	1					
ANR	3036025	Argument	& num_buf [ NUM_BUF_SIZE ]		3034845	3					
ANR	3036026	UnaryOperationExpression	& num_buf [ NUM_BUF_SIZE ]		3034845	0					
ANR	3036027	UnaryOperator	&		3034845	0					
ANR	3036028	ArrayIndexing	num_buf [ NUM_BUF_SIZE ]		3034845	1					
ANR	3036029	Identifier	num_buf		3034845	0					
ANR	3036030	Identifier	NUM_BUF_SIZE		3034845	1					
ANR	3036031	Argument	& s_len		3034845	4					
ANR	3036032	UnaryOperationExpression	& s_len		3034845	0					
ANR	3036033	UnaryOperator	&		3034845	0					
ANR	3036034	Identifier	s_len		3034845	1					
ANR	3036035	ExpressionStatement	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"	552:5:14846:14898	3034845	14	True				
ANR	3036036	CallExpression	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"		3034845	0					
ANR	3036037	Callee	FIX_PRECISION		3034845	0					
ANR	3036038	Identifier	FIX_PRECISION		3034845	0					
ANR	3036039	ArgumentList	adjust_precision		3034845	1					
ANR	3036040	Argument	adjust_precision		3034845	0					
ANR	3036041	Identifier	adjust_precision		3034845	0					
ANR	3036042	Argument	precision		3034845	1					
ANR	3036043	Identifier	precision		3034845	0					
ANR	3036044	Argument	s		3034845	2					
ANR	3036045	Identifier	s		3034845	0					
ANR	3036046	Argument	s_len		3034845	3					
ANR	3036047	Identifier	s_len		3034845	0					
ANR	3036048	IfStatement	if ( alternate_form && * s != '0' )		3034845	15					
ANR	3036049	Condition	alternate_form && * s != '0'	553:9:14909:14935	3034845	0	True				
ANR	3036050	AndExpression	alternate_form && * s != '0'		3034845	0		&&			
ANR	3036051	Identifier	alternate_form		3034845	0					
ANR	3036052	EqualityExpression	* s != '0'		3034845	1		!=			
ANR	3036053	UnaryOperationExpression	* s		3034845	0					
ANR	3036054	UnaryOperator	*		3034845	0					
ANR	3036055	Identifier	s		3034845	1					
ANR	3036056	PrimaryExpression	'0'		3034845	1					
ANR	3036057	CompoundStatement		350:38:7707:7707	3034845	1					
ANR	3036058	ExpressionStatement	* -- s = '0'	554:6:14946:14956	3034845	0	True				
ANR	3036059	AssignmentExpression	* -- s = '0'		3034845	0		=			
ANR	3036060	UnaryOperationExpression	* -- s		3034845	0					
ANR	3036061	UnaryOperator	*		3034845	0					
ANR	3036062	UnaryExpression	-- s		3034845	1					
ANR	3036063	IncDec	--		3034845	0					
ANR	3036064	Identifier	s		3034845	1					
ANR	3036065	PrimaryExpression	'0'		3034845	1					
ANR	3036066	ExpressionStatement	s_len ++	555:6:14964:14971	3034845	1	True				
ANR	3036067	PostIncDecOperationExpression	s_len ++		3034845	0					
ANR	3036068	Identifier	s_len		3034845	0					
ANR	3036069	IncDec	++		3034845	1					
ANR	3036070	BreakStatement	break ;	557:5:14985:14990	3034845	16	True				
ANR	3036071	Label	case 'x' :	560:4:14998:15006	3034845	17	True				
ANR	3036072	Label	case 'X' :	561:4:15012:15020	3034845	18	True				
ANR	3036073	SwitchStatement	switch ( modifier )		3034845	19					
ANR	3036074	Condition	modifier	562:12:15034:15041	3034845	0	True				
ANR	3036075	Identifier	modifier		3034845	0					
ANR	3036076	CompoundStatement		359:22:7813:7813	3034845	1					
ANR	3036077	Label	default :	563:6:15052:15059	3034845	0	True				
ANR	3036078	Identifier	default		3034845	0					
ANR	3036079	Statement	ui_num	564:7:15068:15073	3034845	1	True				
ANR	3036080	Statement	=	564:14:15075:15075	3034845	2	True				
ANR	3036081	Statement	(	564:16:15077:15077	3034845	3	True				
ANR	3036082	Statement	u_wide_int	564:17:15078:15087	3034845	4	True				
ANR	3036083	Statement	)	564:27:15088:15088	3034845	5	True				
ANR	3036084	Statement	va_arg	564:29:15090:15095	3034845	6	True				
ANR	3036085	Statement	(	564:35:15096:15096	3034845	7	True				
ANR	3036086	Statement	ap	564:36:15097:15098	3034845	8	True				
ANR	3036087	Statement	","	564:38:15099:15099	3034845	9	True				
ANR	3036088	Statement	unsigned	564:40:15101:15108	3034845	10	True				
ANR	3036089	Statement	int	564:49:15110:15112	3034845	11	True				
ANR	3036090	Statement	)	564:52:15113:15113	3034845	12	True				
ANR	3036091	ExpressionStatement		564:53:15114:15114	3034845	13	True				
ANR	3036092	BreakStatement	break ;	565:7:15123:15128	3034845	14	True				
ANR	3036093	Label	case LM_LONG_DOUBLE :	566:6:15136:15155	3034845	15	True				
ANR	3036094	Identifier	LM_LONG_DOUBLE		3034845	0					
ANR	3036095	GotoStatement	goto fmt_error ;	567:7:15164:15178	3034845	16	True				
ANR	3036096	Identifier	fmt_error		3034845	0					
ANR	3036097	Label	case LM_LONG :	568:6:15186:15198	3034845	17	True				
ANR	3036098	Identifier	LM_LONG		3034845	0					
ANR	3036099	Statement	ui_num	569:7:15207:15212	3034845	18	True				
ANR	3036100	Statement	=	569:14:15214:15214	3034845	19	True				
ANR	3036101	Statement	(	569:16:15216:15216	3034845	20	True				
ANR	3036102	Statement	u_wide_int	569:17:15217:15226	3034845	21	True				
ANR	3036103	Statement	)	569:27:15227:15227	3034845	22	True				
ANR	3036104	Statement	va_arg	569:29:15229:15234	3034845	23	True				
ANR	3036105	Statement	(	569:35:15235:15235	3034845	24	True				
ANR	3036106	Statement	ap	569:36:15236:15237	3034845	25	True				
ANR	3036107	Statement	","	569:38:15238:15238	3034845	26	True				
ANR	3036108	Statement	unsigned	569:40:15240:15247	3034845	27	True				
ANR	3036109	Statement	long	569:49:15249:15252	3034845	28	True				
ANR	3036110	Statement	int	569:54:15254:15256	3034845	29	True				
ANR	3036111	Statement	)	569:57:15257:15257	3034845	30	True				
ANR	3036112	ExpressionStatement		569:58:15258:15258	3034845	31	True				
ANR	3036113	BreakStatement	break ;	570:7:15267:15272	3034845	32	True				
ANR	3036114	Label	case LM_SIZE_T :	571:6:15280:15294	3034845	33	True				
ANR	3036115	Identifier	LM_SIZE_T		3034845	0					
ANR	3036116	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , size_t )"	572:7:15303:15343	3034845	34	True				
ANR	3036117	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , size_t )"		3034845	0		=			
ANR	3036118	Identifier	ui_num		3034845	0					
ANR	3036119	CastExpression	"( u_wide_int ) va_arg ( ap , size_t )"		3034845	1					
ANR	3036120	CastTarget	u_wide_int		3034845	0					
ANR	3036121	CallExpression	"va_arg ( ap , size_t )"		3034845	1					
ANR	3036122	Callee	va_arg		3034845	0					
ANR	3036123	Identifier	va_arg		3034845	0					
ANR	3036124	ArgumentList	ap		3034845	1					
ANR	3036125	Argument	ap		3034845	0					
ANR	3036126	Identifier	ap		3034845	0					
ANR	3036127	Argument	size_t		3034845	1					
ANR	3036128	Identifier	size_t		3034845	0					
ANR	3036129	BreakStatement	break ;	573:7:15352:15357	3034845	35	True				
ANR	3036130	Label	case LM_LONG_LONG :	575:6:15386:15403	3034845	36	True				
ANR	3036131	Identifier	LM_LONG_LONG		3034845	0					
ANR	3036132	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , u_wide_int )"	576:7:15412:15456	3034845	37	True				
ANR	3036133	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , u_wide_int )"		3034845	0		=			
ANR	3036134	Identifier	ui_num		3034845	0					
ANR	3036135	CastExpression	"( u_wide_int ) va_arg ( ap , u_wide_int )"		3034845	1					
ANR	3036136	CastTarget	u_wide_int		3034845	0					
ANR	3036137	CallExpression	"va_arg ( ap , u_wide_int )"		3034845	1					
ANR	3036138	Callee	va_arg		3034845	0					
ANR	3036139	Identifier	va_arg		3034845	0					
ANR	3036140	ArgumentList	ap		3034845	1					
ANR	3036141	Argument	ap		3034845	0					
ANR	3036142	Identifier	ap		3034845	0					
ANR	3036143	Argument	u_wide_int		3034845	1					
ANR	3036144	Identifier	u_wide_int		3034845	0					
ANR	3036145	BreakStatement	break ;	577:7:15465:15470	3034845	38	True				
ANR	3036146	Label	case LM_INTMAX_T :	580:6:15505:15521	3034845	39	True				
ANR	3036147	Identifier	LM_INTMAX_T		3034845	0					
ANR	3036148	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , uintmax_t )"	581:7:15530:15573	3034845	40	True				
ANR	3036149	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , uintmax_t )"		3034845	0		=			
ANR	3036150	Identifier	ui_num		3034845	0					
ANR	3036151	CastExpression	"( u_wide_int ) va_arg ( ap , uintmax_t )"		3034845	1					
ANR	3036152	CastTarget	u_wide_int		3034845	0					
ANR	3036153	CallExpression	"va_arg ( ap , uintmax_t )"		3034845	1					
ANR	3036154	Callee	va_arg		3034845	0					
ANR	3036155	Identifier	va_arg		3034845	0					
ANR	3036156	ArgumentList	ap		3034845	1					
ANR	3036157	Argument	ap		3034845	0					
ANR	3036158	Identifier	ap		3034845	0					
ANR	3036159	Argument	uintmax_t		3034845	1					
ANR	3036160	Identifier	uintmax_t		3034845	0					
ANR	3036161	BreakStatement	break ;	582:7:15582:15587	3034845	41	True				
ANR	3036162	Label	case LM_PTRDIFF_T :	585:6:15623:15640	3034845	42	True				
ANR	3036163	Identifier	LM_PTRDIFF_T		3034845	0					
ANR	3036164	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , ptrdiff_t )"	586:7:15649:15692	3034845	43	True				
ANR	3036165	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , ptrdiff_t )"		3034845	0		=			
ANR	3036166	Identifier	ui_num		3034845	0					
ANR	3036167	CastExpression	"( u_wide_int ) va_arg ( ap , ptrdiff_t )"		3034845	1					
ANR	3036168	CastTarget	u_wide_int		3034845	0					
ANR	3036169	CallExpression	"va_arg ( ap , ptrdiff_t )"		3034845	1					
ANR	3036170	Callee	va_arg		3034845	0					
ANR	3036171	Identifier	va_arg		3034845	0					
ANR	3036172	ArgumentList	ap		3034845	1					
ANR	3036173	Argument	ap		3034845	0					
ANR	3036174	Identifier	ap		3034845	0					
ANR	3036175	Argument	ptrdiff_t		3034845	1					
ANR	3036176	Identifier	ptrdiff_t		3034845	0					
ANR	3036177	BreakStatement	break ;	587:7:15701:15706	3034845	44	True				
ANR	3036178	Label	case LM_PHP_INT_T :	589:6:15721:15738	3034845	45	True				
ANR	3036179	Identifier	LM_PHP_INT_T		3034845	0					
ANR	3036180	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , zend_ulong )"	590:7:15747:15791	3034845	46	True				
ANR	3036181	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , zend_ulong )"		3034845	0		=			
ANR	3036182	Identifier	ui_num		3034845	0					
ANR	3036183	CastExpression	"( u_wide_int ) va_arg ( ap , zend_ulong )"		3034845	1					
ANR	3036184	CastTarget	u_wide_int		3034845	0					
ANR	3036185	CallExpression	"va_arg ( ap , zend_ulong )"		3034845	1					
ANR	3036186	Callee	va_arg		3034845	0					
ANR	3036187	Identifier	va_arg		3034845	0					
ANR	3036188	ArgumentList	ap		3034845	1					
ANR	3036189	Argument	ap		3034845	0					
ANR	3036190	Identifier	ap		3034845	0					
ANR	3036191	Argument	zend_ulong		3034845	1					
ANR	3036192	Identifier	zend_ulong		3034845	0					
ANR	3036193	BreakStatement	break ;	591:7:15800:15805	3034845	47	True				
ANR	3036194	ExpressionStatement	"s = ap_php_conv_p2 ( ui_num , 4 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"	593:5:15819:15894	3034845	20	True				
ANR	3036195	AssignmentExpression	"s = ap_php_conv_p2 ( ui_num , 4 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3034845	0		=			
ANR	3036196	Identifier	s		3034845	0					
ANR	3036197	CallExpression	"ap_php_conv_p2 ( ui_num , 4 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3034845	1					
ANR	3036198	Callee	ap_php_conv_p2		3034845	0					
ANR	3036199	Identifier	ap_php_conv_p2		3034845	0					
ANR	3036200	ArgumentList	ui_num		3034845	1					
ANR	3036201	Argument	ui_num		3034845	0					
ANR	3036202	Identifier	ui_num		3034845	0					
ANR	3036203	Argument	4		3034845	1					
ANR	3036204	PrimaryExpression	4		3034845	0					
ANR	3036205	Argument	* fmt		3034845	2					
ANR	3036206	UnaryOperationExpression	* fmt		3034845	0					
ANR	3036207	UnaryOperator	*		3034845	0					
ANR	3036208	Identifier	fmt		3034845	1					
ANR	3036209	Argument	& num_buf [ NUM_BUF_SIZE ]		3034845	3					
ANR	3036210	UnaryOperationExpression	& num_buf [ NUM_BUF_SIZE ]		3034845	0					
ANR	3036211	UnaryOperator	&		3034845	0					
ANR	3036212	ArrayIndexing	num_buf [ NUM_BUF_SIZE ]		3034845	1					
ANR	3036213	Identifier	num_buf		3034845	0					
ANR	3036214	Identifier	NUM_BUF_SIZE		3034845	1					
ANR	3036215	Argument	& s_len		3034845	4					
ANR	3036216	UnaryOperationExpression	& s_len		3034845	0					
ANR	3036217	UnaryOperator	&		3034845	0					
ANR	3036218	Identifier	s_len		3034845	1					
ANR	3036219	ExpressionStatement	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"	595:5:15901:15953	3034845	21	True				
ANR	3036220	CallExpression	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"		3034845	0					
ANR	3036221	Callee	FIX_PRECISION		3034845	0					
ANR	3036222	Identifier	FIX_PRECISION		3034845	0					
ANR	3036223	ArgumentList	adjust_precision		3034845	1					
ANR	3036224	Argument	adjust_precision		3034845	0					
ANR	3036225	Identifier	adjust_precision		3034845	0					
ANR	3036226	Argument	precision		3034845	1					
ANR	3036227	Identifier	precision		3034845	0					
ANR	3036228	Argument	s		3034845	2					
ANR	3036229	Identifier	s		3034845	0					
ANR	3036230	Argument	s_len		3034845	3					
ANR	3036231	Identifier	s_len		3034845	0					
ANR	3036232	IfStatement	if ( alternate_form && ui_num != 0 )		3034845	22					
ANR	3036233	Condition	alternate_form && ui_num != 0	596:9:15964:15992	3034845	0	True				
ANR	3036234	AndExpression	alternate_form && ui_num != 0		3034845	0		&&			
ANR	3036235	Identifier	alternate_form		3034845	0					
ANR	3036236	EqualityExpression	ui_num != 0		3034845	1		!=			
ANR	3036237	Identifier	ui_num		3034845	0					
ANR	3036238	PrimaryExpression	0		3034845	1					
ANR	3036239	CompoundStatement		393:40:8764:8764	3034845	1					
ANR	3036240	ExpressionStatement	* -- s = * fmt	597:6:16003:16014	3034845	0	True				
ANR	3036241	AssignmentExpression	* -- s = * fmt		3034845	0		=			
ANR	3036242	UnaryOperationExpression	* -- s		3034845	0					
ANR	3036243	UnaryOperator	*		3034845	0					
ANR	3036244	UnaryExpression	-- s		3034845	1					
ANR	3036245	IncDec	--		3034845	0					
ANR	3036246	Identifier	s		3034845	1					
ANR	3036247	UnaryOperationExpression	* fmt		3034845	1					
ANR	3036248	UnaryOperator	*		3034845	0					
ANR	3036249	Identifier	fmt		3034845	1					
ANR	3036250	ExpressionStatement	* -- s = '0'	598:6:16039:16049	3034845	1	True				
ANR	3036251	AssignmentExpression	* -- s = '0'		3034845	0		=			
ANR	3036252	UnaryOperationExpression	* -- s		3034845	0					
ANR	3036253	UnaryOperator	*		3034845	0					
ANR	3036254	UnaryExpression	-- s		3034845	1					
ANR	3036255	IncDec	--		3034845	0					
ANR	3036256	Identifier	s		3034845	1					
ANR	3036257	PrimaryExpression	'0'		3034845	1					
ANR	3036258	ExpressionStatement	s_len += 2	599:6:16057:16067	3034845	2	True				
ANR	3036259	AssignmentExpression	s_len += 2		3034845	0		+=			
ANR	3036260	Identifier	s_len		3034845	0					
ANR	3036261	PrimaryExpression	2		3034845	1					
ANR	3036262	BreakStatement	break ;	601:5:16081:16086	3034845	23	True				
ANR	3036263	Label	case 's' :	604:4:16094:16102	3034845	24	True				
ANR	3036264	Label	case 'v' :	605:4:16108:16116	3034845	25	True				
ANR	3036265	Statement	s	606:5:16123:16123	3034845	26	True				
ANR	3036266	Statement	=	606:7:16125:16125	3034845	27	True				
ANR	3036267	Statement	va_arg	606:9:16127:16132	3034845	28	True				
ANR	3036268	Statement	(	606:15:16133:16133	3034845	29	True				
ANR	3036269	Statement	ap	606:16:16134:16135	3034845	30	True				
ANR	3036270	Statement	","	606:18:16136:16136	3034845	31	True				
ANR	3036271	Statement	char	606:20:16138:16141	3034845	32	True				
ANR	3036272	Statement	*	606:25:16143:16143	3034845	33	True				
ANR	3036273	Statement	)	606:26:16144:16144	3034845	34	True				
ANR	3036274	ExpressionStatement		606:27:16145:16145	3034845	35	True				
ANR	3036275	IfStatement	if ( s != NULL )		3034845	36					
ANR	3036276	Condition	s != NULL	607:9:16156:16164	3034845	0	True				
ANR	3036277	EqualityExpression	s != NULL		3034845	0		!=			
ANR	3036278	Identifier	s		3034845	0					
ANR	3036279	Identifier	NULL		3034845	1					
ANR	3036280	CompoundStatement		404:20:8936:8936	3034845	1					
ANR	3036281	IfStatement	if ( ! adjust_precision )		3034845	0					
ANR	3036282	Condition	! adjust_precision	608:10:16179:16195	3034845	0	True				
ANR	3036283	UnaryOperationExpression	! adjust_precision		3034845	0					
ANR	3036284	UnaryOperator	!		3034845	0					
ANR	3036285	Identifier	adjust_precision		3034845	1					
ANR	3036286	CompoundStatement		405:29:8967:8967	3034845	1					
ANR	3036287	ExpressionStatement	s_len = strlen ( s )	609:7:16207:16224	3034845	0	True				
ANR	3036288	AssignmentExpression	s_len = strlen ( s )		3034845	0		=			
ANR	3036289	Identifier	s_len		3034845	0					
ANR	3036290	CallExpression	strlen ( s )		3034845	1					
ANR	3036291	Callee	strlen		3034845	0					
ANR	3036292	Identifier	strlen		3034845	0					
ANR	3036293	ArgumentList	s		3034845	1					
ANR	3036294	Argument	s		3034845	0					
ANR	3036295	Identifier	s		3034845	0					
ANR	3036296	ElseStatement	else		3034845	0					
ANR	3036297	CompoundStatement		407:13:9008:9008	3034845	0					
ANR	3036298	ExpressionStatement	"s_len = strnlen ( s , precision )"	611:7:16248:16277	3034845	0	True				
ANR	3036299	AssignmentExpression	"s_len = strnlen ( s , precision )"		3034845	0		=			
ANR	3036300	Identifier	s_len		3034845	0					
ANR	3036301	CallExpression	"strnlen ( s , precision )"		3034845	1					
ANR	3036302	Callee	strnlen		3034845	0					
ANR	3036303	Identifier	strnlen		3034845	0					
ANR	3036304	ArgumentList	s		3034845	1					
ANR	3036305	Argument	s		3034845	0					
ANR	3036306	Identifier	s		3034845	0					
ANR	3036307	Argument	precision		3034845	1					
ANR	3036308	Identifier	precision		3034845	0					
ANR	3036309	ElseStatement	else		3034845	0					
ANR	3036310	CompoundStatement		410:12:9068:9068	3034845	0					
ANR	3036311	ExpressionStatement	s = S_NULL	614:6:16307:16317	3034845	0	True				
ANR	3036312	AssignmentExpression	s = S_NULL		3034845	0		=			
ANR	3036313	Identifier	s		3034845	0					
ANR	3036314	Identifier	S_NULL		3034845	1					
ANR	3036315	ExpressionStatement	s_len = S_NULL_LEN	615:6:16325:16343	3034845	1	True				
ANR	3036316	AssignmentExpression	s_len = S_NULL_LEN		3034845	0		=			
ANR	3036317	Identifier	s_len		3034845	0					
ANR	3036318	Identifier	S_NULL_LEN		3034845	1					
ANR	3036319	ExpressionStatement	pad_char = ' '	617:5:16357:16371	3034845	37	True				
ANR	3036320	AssignmentExpression	pad_char = ' '		3034845	0		=			
ANR	3036321	Identifier	pad_char		3034845	0					
ANR	3036322	PrimaryExpression	' '		3034845	1					
ANR	3036323	BreakStatement	break ;	618:5:16378:16383	3034845	38	True				
ANR	3036324	Label	case 'f' :	621:4:16391:16399	3034845	39	True				
ANR	3036325	Label	case 'F' :	622:4:16405:16413	3034845	40	True				
ANR	3036326	Label	case 'e' :	623:4:16419:16427	3034845	41	True				
ANR	3036327	Label	case 'E' :	624:4:16433:16441	3034845	42	True				
ANR	3036328	SwitchStatement	switch ( modifier )		3034845	43					
ANR	3036329	Condition	modifier	625:12:16455:16462	3034845	0	True				
ANR	3036330	Identifier	modifier		3034845	0					
ANR	3036331	CompoundStatement		422:22:9234:9234	3034845	1					
ANR	3036332	Label	case LM_LONG_DOUBLE :	626:6:16473:16492	3034845	0	True				
ANR	3036333	Identifier	LM_LONG_DOUBLE		3034845	0					
ANR	3036334	Statement	fp_num	627:7:16501:16506	3034845	1	True				
ANR	3036335	Statement	=	627:14:16508:16508	3034845	2	True				
ANR	3036336	Statement	(	627:16:16510:16510	3034845	3	True				
ANR	3036337	Statement	double	627:17:16511:16516	3034845	4	True				
ANR	3036338	Statement	)	627:23:16517:16517	3034845	5	True				
ANR	3036339	Statement	va_arg	627:25:16519:16524	3034845	6	True				
ANR	3036340	Statement	(	627:31:16525:16525	3034845	7	True				
ANR	3036341	Statement	ap	627:32:16526:16527	3034845	8	True				
ANR	3036342	Statement	","	627:34:16528:16528	3034845	9	True				
ANR	3036343	Statement	long	627:36:16530:16533	3034845	10	True				
ANR	3036344	Statement	double	627:41:16535:16540	3034845	11	True				
ANR	3036345	Statement	)	627:47:16541:16541	3034845	12	True				
ANR	3036346	ExpressionStatement		627:48:16542:16542	3034845	13	True				
ANR	3036347	BreakStatement	break ;	628:7:16551:16556	3034845	14	True				
ANR	3036348	Label	case LM_STD :	629:6:16564:16575	3034845	15	True				
ANR	3036349	Identifier	LM_STD		3034845	0					
ANR	3036350	ExpressionStatement	"fp_num = va_arg ( ap , double )"	630:7:16584:16611	3034845	16	True				
ANR	3036351	AssignmentExpression	"fp_num = va_arg ( ap , double )"		3034845	0		=			
ANR	3036352	Identifier	fp_num		3034845	0					
ANR	3036353	CallExpression	"va_arg ( ap , double )"		3034845	1					
ANR	3036354	Callee	va_arg		3034845	0					
ANR	3036355	Identifier	va_arg		3034845	0					
ANR	3036356	ArgumentList	ap		3034845	1					
ANR	3036357	Argument	ap		3034845	0					
ANR	3036358	Identifier	ap		3034845	0					
ANR	3036359	Argument	double		3034845	1					
ANR	3036360	Identifier	double		3034845	0					
ANR	3036361	BreakStatement	break ;	631:7:16620:16625	3034845	17	True				
ANR	3036362	Label	default :	632:6:16633:16640	3034845	18	True				
ANR	3036363	Identifier	default		3034845	0					
ANR	3036364	GotoStatement	goto fmt_error ;	633:7:16649:16663	3034845	19	True				
ANR	3036365	Identifier	fmt_error		3034845	0					
ANR	3036366	IfStatement	if ( zend_isnan ( fp_num ) )		3034845	44					
ANR	3036367	Condition	zend_isnan ( fp_num )	636:9:16682:16699	3034845	0	True				
ANR	3036368	CallExpression	zend_isnan ( fp_num )		3034845	0					
ANR	3036369	Callee	zend_isnan		3034845	0					
ANR	3036370	Identifier	zend_isnan		3034845	0					
ANR	3036371	ArgumentList	fp_num		3034845	1					
ANR	3036372	Argument	fp_num		3034845	0					
ANR	3036373	Identifier	fp_num		3034845	0					
ANR	3036374	CompoundStatement		433:29:9471:9471	3034845	1					
ANR	3036375	ExpressionStatement	"s = ""nan"""	637:6:16710:16719	3034845	0	True				
ANR	3036376	AssignmentExpression	"s = ""nan"""		3034845	0		=			
ANR	3036377	Identifier	s		3034845	0					
ANR	3036378	PrimaryExpression	"""nan"""		3034845	1					
ANR	3036379	ExpressionStatement	s_len = 3	638:6:16727:16736	3034845	1	True				
ANR	3036380	AssignmentExpression	s_len = 3		3034845	0		=			
ANR	3036381	Identifier	s_len		3034845	0					
ANR	3036382	PrimaryExpression	3		3034845	1					
ANR	3036383	ElseStatement	else		3034845	0					
ANR	3036384	IfStatement	if ( zend_isinf ( fp_num ) )		3034845	0					
ANR	3036385	Condition	zend_isinf ( fp_num )	639:16:16754:16771	3034845	0	True				
ANR	3036386	CallExpression	zend_isinf ( fp_num )		3034845	0					
ANR	3036387	Callee	zend_isinf		3034845	0					
ANR	3036388	Identifier	zend_isinf		3034845	0					
ANR	3036389	ArgumentList	fp_num		3034845	1					
ANR	3036390	Argument	fp_num		3034845	0					
ANR	3036391	Identifier	fp_num		3034845	0					
ANR	3036392	CompoundStatement		436:36:9543:9543	3034845	1					
ANR	3036393	ExpressionStatement	"s = ""inf"""	640:6:16782:16791	3034845	0	True				
ANR	3036394	AssignmentExpression	"s = ""inf"""		3034845	0		=			
ANR	3036395	Identifier	s		3034845	0					
ANR	3036396	PrimaryExpression	"""inf"""		3034845	1					
ANR	3036397	ExpressionStatement	s_len = 3	641:6:16799:16808	3034845	1	True				
ANR	3036398	AssignmentExpression	s_len = 3		3034845	0		=			
ANR	3036399	Identifier	s_len		3034845	0					
ANR	3036400	PrimaryExpression	3		3034845	1					
ANR	3036401	ElseStatement	else		3034845	0					
ANR	3036402	CompoundStatement		439:12:9591:9591	3034845	0					
ANR	3036403	ExpressionStatement	localeconv_r ( & lconv )	645:6:16862:16882	3034845	0	True				
ANR	3036404	CallExpression	localeconv_r ( & lconv )		3034845	0					
ANR	3036405	Callee	localeconv_r		3034845	0					
ANR	3036406	Identifier	localeconv_r		3034845	0					
ANR	3036407	ArgumentList	& lconv		3034845	1					
ANR	3036408	Argument	& lconv		3034845	0					
ANR	3036409	UnaryOperationExpression	& lconv		3034845	0					
ANR	3036410	UnaryOperator	&		3034845	0					
ANR	3036411	Identifier	lconv		3034845	1					
ANR	3036412	ExpressionStatement	"s = php_conv_fp ( ( * fmt == 'f' ) ? 'F' : * fmt , fp_num , alternate_form , ( adjust_precision == NO ) ? FLOAT_DIGITS : precision , ( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.' , & is_negative , & num_buf [ 1 ] , & s_len )"	652:6:16967:17180	3034845	1	True				
ANR	3036413	AssignmentExpression	"s = php_conv_fp ( ( * fmt == 'f' ) ? 'F' : * fmt , fp_num , alternate_form , ( adjust_precision == NO ) ? FLOAT_DIGITS : precision , ( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.' , & is_negative , & num_buf [ 1 ] , & s_len )"		3034845	0		=			
ANR	3036414	Identifier	s		3034845	0					
ANR	3036415	CallExpression	"php_conv_fp ( ( * fmt == 'f' ) ? 'F' : * fmt , fp_num , alternate_form , ( adjust_precision == NO ) ? FLOAT_DIGITS : precision , ( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.' , & is_negative , & num_buf [ 1 ] , & s_len )"		3034845	1					
ANR	3036416	Callee	php_conv_fp		3034845	0					
ANR	3036417	Identifier	php_conv_fp		3034845	0					
ANR	3036418	ArgumentList	( * fmt == 'f' ) ? 'F' : * fmt		3034845	1					
ANR	3036419	Argument	( * fmt == 'f' ) ? 'F' : * fmt		3034845	0					
ANR	3036420	ConditionalExpression	( * fmt == 'f' ) ? 'F' : * fmt		3034845	0					
ANR	3036421	Condition	* fmt == 'f'		3034845	0					
ANR	3036422	EqualityExpression	* fmt == 'f'		3034845	0		==			
ANR	3036423	UnaryOperationExpression	* fmt		3034845	0					
ANR	3036424	UnaryOperator	*		3034845	0					
ANR	3036425	Identifier	fmt		3034845	1					
ANR	3036426	PrimaryExpression	'f'		3034845	1					
ANR	3036427	PrimaryExpression	'F'		3034845	1					
ANR	3036428	UnaryOperationExpression	* fmt		3034845	2					
ANR	3036429	UnaryOperator	*		3034845	0					
ANR	3036430	Identifier	fmt		3034845	1					
ANR	3036431	Argument	fp_num		3034845	1					
ANR	3036432	Identifier	fp_num		3034845	0					
ANR	3036433	Argument	alternate_form		3034845	2					
ANR	3036434	Identifier	alternate_form		3034845	0					
ANR	3036435	Argument	( adjust_precision == NO ) ? FLOAT_DIGITS : precision		3034845	3					
ANR	3036436	ConditionalExpression	( adjust_precision == NO ) ? FLOAT_DIGITS : precision		3034845	0					
ANR	3036437	Condition	adjust_precision == NO		3034845	0					
ANR	3036438	EqualityExpression	adjust_precision == NO		3034845	0		==			
ANR	3036439	Identifier	adjust_precision		3034845	0					
ANR	3036440	Identifier	NO		3034845	1					
ANR	3036441	Identifier	FLOAT_DIGITS		3034845	1					
ANR	3036442	Identifier	precision		3034845	2					
ANR	3036443	Argument	( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.'		3034845	4					
ANR	3036444	ConditionalExpression	( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.'		3034845	0					
ANR	3036445	Condition	* fmt == 'f'		3034845	0					
ANR	3036446	EqualityExpression	* fmt == 'f'		3034845	0		==			
ANR	3036447	UnaryOperationExpression	* fmt		3034845	0					
ANR	3036448	UnaryOperator	*		3034845	0					
ANR	3036449	Identifier	fmt		3034845	1					
ANR	3036450	PrimaryExpression	'f'		3034845	1					
ANR	3036451	Identifier	LCONV_DECIMAL_POINT		3034845	1					
ANR	3036452	PrimaryExpression	'.'		3034845	2					
ANR	3036453	Argument	& is_negative		3034845	5					
ANR	3036454	UnaryOperationExpression	& is_negative		3034845	0					
ANR	3036455	UnaryOperator	&		3034845	0					
ANR	3036456	Identifier	is_negative		3034845	1					
ANR	3036457	Argument	& num_buf [ 1 ]		3034845	6					
ANR	3036458	UnaryOperationExpression	& num_buf [ 1 ]		3034845	0					
ANR	3036459	UnaryOperator	&		3034845	0					
ANR	3036460	ArrayIndexing	num_buf [ 1 ]		3034845	1					
ANR	3036461	Identifier	num_buf		3034845	0					
ANR	3036462	PrimaryExpression	1		3034845	1					
ANR	3036463	Argument	& s_len		3034845	7					
ANR	3036464	UnaryOperationExpression	& s_len		3034845	0					
ANR	3036465	UnaryOperator	&		3034845	0					
ANR	3036466	Identifier	s_len		3034845	1					
ANR	3036467	IfStatement	if ( is_negative )		3034845	2					
ANR	3036468	Condition	is_negative	656:10:17192:17202	3034845	0	True				
ANR	3036469	Identifier	is_negative		3034845	0					
ANR	3036470	ExpressionStatement	prefix_char = '-'	657:7:17212:17229	3034845	1	True				
ANR	3036471	AssignmentExpression	prefix_char = '-'		3034845	0		=			
ANR	3036472	Identifier	prefix_char		3034845	0					
ANR	3036473	PrimaryExpression	'-'		3034845	1					
ANR	3036474	ElseStatement	else		3034845	0					
ANR	3036475	IfStatement	if ( print_sign )		3034845	0					
ANR	3036476	Condition	print_sign	658:15:17246:17255	3034845	0	True				
ANR	3036477	Identifier	print_sign		3034845	0					
ANR	3036478	ExpressionStatement	prefix_char = '+'	659:7:17265:17282	3034845	1	True				
ANR	3036479	AssignmentExpression	prefix_char = '+'		3034845	0		=			
ANR	3036480	Identifier	prefix_char		3034845	0					
ANR	3036481	PrimaryExpression	'+'		3034845	1					
ANR	3036482	ElseStatement	else		3034845	0					
ANR	3036483	IfStatement	if ( print_blank )		3034845	0					
ANR	3036484	Condition	print_blank	660:15:17299:17309	3034845	0	True				
ANR	3036485	Identifier	print_blank		3034845	0					
ANR	3036486	ExpressionStatement	prefix_char = ' '	661:7:17319:17336	3034845	1	True				
ANR	3036487	AssignmentExpression	prefix_char = ' '		3034845	0		=			
ANR	3036488	Identifier	prefix_char		3034845	0					
ANR	3036489	PrimaryExpression	' '		3034845	1					
ANR	3036490	BreakStatement	break ;	663:5:17350:17355	3034845	45	True				
ANR	3036491	Label	case 'g' :	666:4:17363:17371	3034845	46	True				
ANR	3036492	Label	case 'k' :	667:4:17377:17385	3034845	47	True				
ANR	3036493	Label	case 'G' :	668:4:17391:17399	3034845	48	True				
ANR	3036494	Label	case 'H' :	669:4:17405:17413	3034845	49	True				
ANR	3036495	SwitchStatement	switch ( modifier )		3034845	50					
ANR	3036496	Condition	modifier	670:12:17427:17434	3034845	0	True				
ANR	3036497	Identifier	modifier		3034845	0					
ANR	3036498	CompoundStatement		467:22:10206:10206	3034845	1					
ANR	3036499	Label	case LM_LONG_DOUBLE :	671:6:17445:17464	3034845	0	True				
ANR	3036500	Identifier	LM_LONG_DOUBLE		3034845	0					
ANR	3036501	Statement	fp_num	672:7:17473:17478	3034845	1	True				
ANR	3036502	Statement	=	672:14:17480:17480	3034845	2	True				
ANR	3036503	Statement	(	672:16:17482:17482	3034845	3	True				
ANR	3036504	Statement	double	672:17:17483:17488	3034845	4	True				
ANR	3036505	Statement	)	672:23:17489:17489	3034845	5	True				
ANR	3036506	Statement	va_arg	672:25:17491:17496	3034845	6	True				
ANR	3036507	Statement	(	672:31:17497:17497	3034845	7	True				
ANR	3036508	Statement	ap	672:32:17498:17499	3034845	8	True				
ANR	3036509	Statement	","	672:34:17500:17500	3034845	9	True				
ANR	3036510	Statement	long	672:36:17502:17505	3034845	10	True				
ANR	3036511	Statement	double	672:41:17507:17512	3034845	11	True				
ANR	3036512	Statement	)	672:47:17513:17513	3034845	12	True				
ANR	3036513	ExpressionStatement		672:48:17514:17514	3034845	13	True				
ANR	3036514	BreakStatement	break ;	673:7:17523:17528	3034845	14	True				
ANR	3036515	Label	case LM_STD :	674:6:17536:17547	3034845	15	True				
ANR	3036516	Identifier	LM_STD		3034845	0					
ANR	3036517	ExpressionStatement	"fp_num = va_arg ( ap , double )"	675:7:17556:17583	3034845	16	True				
ANR	3036518	AssignmentExpression	"fp_num = va_arg ( ap , double )"		3034845	0		=			
ANR	3036519	Identifier	fp_num		3034845	0					
ANR	3036520	CallExpression	"va_arg ( ap , double )"		3034845	1					
ANR	3036521	Callee	va_arg		3034845	0					
ANR	3036522	Identifier	va_arg		3034845	0					
ANR	3036523	ArgumentList	ap		3034845	1					
ANR	3036524	Argument	ap		3034845	0					
ANR	3036525	Identifier	ap		3034845	0					
ANR	3036526	Argument	double		3034845	1					
ANR	3036527	Identifier	double		3034845	0					
ANR	3036528	BreakStatement	break ;	676:7:17592:17597	3034845	17	True				
ANR	3036529	Label	default :	677:6:17605:17612	3034845	18	True				
ANR	3036530	Identifier	default		3034845	0					
ANR	3036531	GotoStatement	goto fmt_error ;	678:7:17621:17635	3034845	19	True				
ANR	3036532	Identifier	fmt_error		3034845	0					
ANR	3036533	IfStatement	if ( zend_isnan ( fp_num ) )		3034845	51					
ANR	3036534	Condition	zend_isnan ( fp_num )	681:9:17654:17671	3034845	0	True				
ANR	3036535	CallExpression	zend_isnan ( fp_num )		3034845	0					
ANR	3036536	Callee	zend_isnan		3034845	0					
ANR	3036537	Identifier	zend_isnan		3034845	0					
ANR	3036538	ArgumentList	fp_num		3034845	1					
ANR	3036539	Argument	fp_num		3034845	0					
ANR	3036540	Identifier	fp_num		3034845	0					
ANR	3036541	CompoundStatement		478:29:10443:10443	3034845	1					
ANR	3036542	ExpressionStatement	"s = ""NAN"""	682:7:17683:17692	3034845	0	True				
ANR	3036543	AssignmentExpression	"s = ""NAN"""		3034845	0		=			
ANR	3036544	Identifier	s		3034845	0					
ANR	3036545	PrimaryExpression	"""NAN"""		3034845	1					
ANR	3036546	ExpressionStatement	s_len = 3	683:7:17701:17710	3034845	1	True				
ANR	3036547	AssignmentExpression	s_len = 3		3034845	0		=			
ANR	3036548	Identifier	s_len		3034845	0					
ANR	3036549	PrimaryExpression	3		3034845	1					
ANR	3036550	BreakStatement	break ;	684:7:17719:17724	3034845	2	True				
ANR	3036551	ElseStatement	else		3034845	0					
ANR	3036552	IfStatement	if ( zend_isinf ( fp_num ) )		3034845	0					
ANR	3036553	Condition	zend_isinf ( fp_num )	685:17:17743:17760	3034845	0	True				
ANR	3036554	CallExpression	zend_isinf ( fp_num )		3034845	0					
ANR	3036555	Callee	zend_isinf		3034845	0					
ANR	3036556	Identifier	zend_isinf		3034845	0					
ANR	3036557	ArgumentList	fp_num		3034845	1					
ANR	3036558	Argument	fp_num		3034845	0					
ANR	3036559	Identifier	fp_num		3034845	0					
ANR	3036560	CompoundStatement		482:37:10532:10532	3034845	1					
ANR	3036561	IfStatement	if ( fp_num > 0 )		3034845	0					
ANR	3036562	Condition	fp_num > 0	686:11:17776:17785	3034845	0	True				
ANR	3036563	RelationalExpression	fp_num > 0		3034845	0		>			
ANR	3036564	Identifier	fp_num		3034845	0					
ANR	3036565	PrimaryExpression	0		3034845	1					
ANR	3036566	CompoundStatement		483:23:10557:10557	3034845	1					
ANR	3036567	ExpressionStatement	"s = ""INF"""	687:8:17798:17807	3034845	0	True				
ANR	3036568	AssignmentExpression	"s = ""INF"""		3034845	0		=			
ANR	3036569	Identifier	s		3034845	0					
ANR	3036570	PrimaryExpression	"""INF"""		3034845	1					
ANR	3036571	ExpressionStatement	s_len = 3	688:8:17817:17826	3034845	1	True				
ANR	3036572	AssignmentExpression	s_len = 3		3034845	0		=			
ANR	3036573	Identifier	s_len		3034845	0					
ANR	3036574	PrimaryExpression	3		3034845	1					
ANR	3036575	ElseStatement	else		3034845	0					
ANR	3036576	CompoundStatement		486:14:10611:10611	3034845	0					
ANR	3036577	ExpressionStatement	"s = ""-INF"""	690:8:17852:17862	3034845	0	True				
ANR	3036578	AssignmentExpression	"s = ""-INF"""		3034845	0		=			
ANR	3036579	Identifier	s		3034845	0					
ANR	3036580	PrimaryExpression	"""-INF"""		3034845	1					
ANR	3036581	ExpressionStatement	s_len = 4	691:8:17872:17881	3034845	1	True				
ANR	3036582	AssignmentExpression	s_len = 4		3034845	0		=			
ANR	3036583	Identifier	s_len		3034845	0					
ANR	3036584	PrimaryExpression	4		3034845	1					
ANR	3036585	BreakStatement	break ;	693:7:17899:17904	3034845	1	True				
ANR	3036586	IfStatement	if ( adjust_precision == NO )		3034845	52					
ANR	3036587	Condition	adjust_precision == NO	696:9:17924:17945	3034845	0	True				
ANR	3036588	EqualityExpression	adjust_precision == NO		3034845	0		==			
ANR	3036589	Identifier	adjust_precision		3034845	0					
ANR	3036590	Identifier	NO		3034845	1					
ANR	3036591	ExpressionStatement	precision = FLOAT_DIGITS	697:6:17954:17978	3034845	1	True				
ANR	3036592	AssignmentExpression	precision = FLOAT_DIGITS		3034845	0		=			
ANR	3036593	Identifier	precision		3034845	0					
ANR	3036594	Identifier	FLOAT_DIGITS		3034845	1					
ANR	3036595	ElseStatement	else		3034845	0					
ANR	3036596	IfStatement	if ( precision == 0 )		3034845	0					
ANR	3036597	Condition	precision == 0	698:14:17994:18007	3034845	0	True				
ANR	3036598	EqualityExpression	precision == 0		3034845	0		==			
ANR	3036599	Identifier	precision		3034845	0					
ANR	3036600	PrimaryExpression	0		3034845	1					
ANR	3036601	ExpressionStatement	precision = 1	699:6:18016:18029	3034845	1	True				
ANR	3036602	AssignmentExpression	precision = 1		3034845	0		=			
ANR	3036603	Identifier	precision		3034845	0					
ANR	3036604	PrimaryExpression	1		3034845	1					
ANR	3036605	ExpressionStatement	localeconv_r ( & lconv )	705:5:18151:18171	3034845	53	True				
ANR	3036606	CallExpression	localeconv_r ( & lconv )		3034845	0					
ANR	3036607	Callee	localeconv_r		3034845	0					
ANR	3036608	Identifier	localeconv_r		3034845	0					
ANR	3036609	ArgumentList	& lconv		3034845	1					
ANR	3036610	Argument	& lconv		3034845	0					
ANR	3036611	UnaryOperationExpression	& lconv		3034845	0					
ANR	3036612	UnaryOperator	&		3034845	0					
ANR	3036613	Identifier	lconv		3034845	1					
ANR	3036614	ExpressionStatement	"s = php_gcvt ( fp_num , precision , ( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT , ( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e' , & num_buf [ 1 ] )"	712:5:18252:18390	3034845	54	True				
ANR	3036615	AssignmentExpression	"s = php_gcvt ( fp_num , precision , ( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT , ( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e' , & num_buf [ 1 ] )"		3034845	0		=			
ANR	3036616	Identifier	s		3034845	0					
ANR	3036617	CallExpression	"php_gcvt ( fp_num , precision , ( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT , ( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e' , & num_buf [ 1 ] )"		3034845	1					
ANR	3036618	Callee	php_gcvt		3034845	0					
ANR	3036619	Identifier	php_gcvt		3034845	0					
ANR	3036620	ArgumentList	fp_num		3034845	1					
ANR	3036621	Argument	fp_num		3034845	0					
ANR	3036622	Identifier	fp_num		3034845	0					
ANR	3036623	Argument	precision		3034845	1					
ANR	3036624	Identifier	precision		3034845	0					
ANR	3036625	Argument	( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT		3034845	2					
ANR	3036626	ConditionalExpression	( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT		3034845	0					
ANR	3036627	Condition	* fmt == 'H' || * fmt == 'k'		3034845	0					
ANR	3036628	OrExpression	* fmt == 'H' || * fmt == 'k'		3034845	0		||			
ANR	3036629	EqualityExpression	* fmt == 'H'		3034845	0		==			
ANR	3036630	UnaryOperationExpression	* fmt		3034845	0					
ANR	3036631	UnaryOperator	*		3034845	0					
ANR	3036632	Identifier	fmt		3034845	1					
ANR	3036633	PrimaryExpression	'H'		3034845	1					
ANR	3036634	EqualityExpression	* fmt == 'k'		3034845	1		==			
ANR	3036635	UnaryOperationExpression	* fmt		3034845	0					
ANR	3036636	UnaryOperator	*		3034845	0					
ANR	3036637	Identifier	fmt		3034845	1					
ANR	3036638	PrimaryExpression	'k'		3034845	1					
ANR	3036639	PrimaryExpression	'.'		3034845	1					
ANR	3036640	Identifier	LCONV_DECIMAL_POINT		3034845	2					
ANR	3036641	Argument	( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e'		3034845	3					
ANR	3036642	ConditionalExpression	( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e'		3034845	0					
ANR	3036643	Condition	* fmt == 'G' || * fmt == 'H'		3034845	0					
ANR	3036644	OrExpression	* fmt == 'G' || * fmt == 'H'		3034845	0		||			
ANR	3036645	EqualityExpression	* fmt == 'G'		3034845	0		==			
ANR	3036646	UnaryOperationExpression	* fmt		3034845	0					
ANR	3036647	UnaryOperator	*		3034845	0					
ANR	3036648	Identifier	fmt		3034845	1					
ANR	3036649	PrimaryExpression	'G'		3034845	1					
ANR	3036650	EqualityExpression	* fmt == 'H'		3034845	1		==			
ANR	3036651	UnaryOperationExpression	* fmt		3034845	0					
ANR	3036652	UnaryOperator	*		3034845	0					
ANR	3036653	Identifier	fmt		3034845	1					
ANR	3036654	PrimaryExpression	'H'		3034845	1					
ANR	3036655	PrimaryExpression	'E'		3034845	1					
ANR	3036656	PrimaryExpression	'e'		3034845	2					
ANR	3036657	Argument	& num_buf [ 1 ]		3034845	4					
ANR	3036658	UnaryOperationExpression	& num_buf [ 1 ]		3034845	0					
ANR	3036659	UnaryOperator	&		3034845	0					
ANR	3036660	ArrayIndexing	num_buf [ 1 ]		3034845	1					
ANR	3036661	Identifier	num_buf		3034845	0					
ANR	3036662	PrimaryExpression	1		3034845	1					
ANR	3036663	IfStatement	if ( * s == '-' )		3034845	55					
ANR	3036664	Condition	* s == '-'	713:9:18401:18409	3034845	0	True				
ANR	3036665	EqualityExpression	* s == '-'		3034845	0		==			
ANR	3036666	UnaryOperationExpression	* s		3034845	0					
ANR	3036667	UnaryOperator	*		3034845	0					
ANR	3036668	Identifier	s		3034845	1					
ANR	3036669	PrimaryExpression	'-'		3034845	1					
ANR	3036670	ExpressionStatement	prefix_char = * s ++	714:6:18418:18436	3034845	1	True				
ANR	3036671	AssignmentExpression	prefix_char = * s ++		3034845	0		=			
ANR	3036672	Identifier	prefix_char		3034845	0					
ANR	3036673	UnaryOperationExpression	* s ++		3034845	1					
ANR	3036674	UnaryOperator	*		3034845	0					
ANR	3036675	PostIncDecOperationExpression	s ++		3034845	1					
ANR	3036676	Identifier	s		3034845	0					
ANR	3036677	IncDec	++		3034845	1					
ANR	3036678	ElseStatement	else		3034845	0					
ANR	3036679	IfStatement	if ( print_sign )		3034845	0					
ANR	3036680	Condition	print_sign	715:14:18452:18461	3034845	0	True				
ANR	3036681	Identifier	print_sign		3034845	0					
ANR	3036682	ExpressionStatement	prefix_char = '+'	716:6:18470:18487	3034845	1	True				
ANR	3036683	AssignmentExpression	prefix_char = '+'		3034845	0		=			
ANR	3036684	Identifier	prefix_char		3034845	0					
ANR	3036685	PrimaryExpression	'+'		3034845	1					
ANR	3036686	ElseStatement	else		3034845	0					
ANR	3036687	IfStatement	if ( print_blank )		3034845	0					
ANR	3036688	Condition	print_blank	717:14:18503:18513	3034845	0	True				
ANR	3036689	Identifier	print_blank		3034845	0					
ANR	3036690	ExpressionStatement	prefix_char = ' '	718:6:18522:18539	3034845	1	True				
ANR	3036691	AssignmentExpression	prefix_char = ' '		3034845	0		=			
ANR	3036692	Identifier	prefix_char		3034845	0					
ANR	3036693	PrimaryExpression	' '		3034845	1					
ANR	3036694	ExpressionStatement	s_len = strlen ( s )	720:5:18547:18564	3034845	56	True				
ANR	3036695	AssignmentExpression	s_len = strlen ( s )		3034845	0		=			
ANR	3036696	Identifier	s_len		3034845	0					
ANR	3036697	CallExpression	strlen ( s )		3034845	1					
ANR	3036698	Callee	strlen		3034845	0					
ANR	3036699	Identifier	strlen		3034845	0					
ANR	3036700	ArgumentList	s		3034845	1					
ANR	3036701	Argument	s		3034845	0					
ANR	3036702	Identifier	s		3034845	0					
ANR	3036703	IfStatement	"if ( alternate_form && ( strchr ( s , '.' ) ) == NULL )"		3034845	57					
ANR	3036704	Condition	"alternate_form && ( strchr ( s , '.' ) ) == NULL"	722:9:18576:18617	3034845	0	True				
ANR	3036705	AndExpression	"alternate_form && ( strchr ( s , '.' ) ) == NULL"		3034845	0		&&			
ANR	3036706	Identifier	alternate_form		3034845	0					
ANR	3036707	EqualityExpression	"( strchr ( s , '.' ) ) == NULL"		3034845	1		==			
ANR	3036708	CallExpression	"strchr ( s , '.' )"		3034845	0					
ANR	3036709	Callee	strchr		3034845	0					
ANR	3036710	Identifier	strchr		3034845	0					
ANR	3036711	ArgumentList	s		3034845	1					
ANR	3036712	Argument	s		3034845	0					
ANR	3036713	Identifier	s		3034845	0					
ANR	3036714	Argument	'.'		3034845	1					
ANR	3036715	PrimaryExpression	'.'		3034845	0					
ANR	3036716	Identifier	NULL		3034845	1					
ANR	3036717	ExpressionStatement	s [ s_len ++ ] = '.'	723:6:18626:18642	3034845	1	True				
ANR	3036718	AssignmentExpression	s [ s_len ++ ] = '.'		3034845	0		=			
ANR	3036719	ArrayIndexing	s [ s_len ++ ]		3034845	0					
ANR	3036720	Identifier	s		3034845	0					
ANR	3036721	PostIncDecOperationExpression	s_len ++		3034845	1					
ANR	3036722	Identifier	s_len		3034845	0					
ANR	3036723	IncDec	++		3034845	1					
ANR	3036724	PrimaryExpression	'.'		3034845	1					
ANR	3036725	BreakStatement	break ;	724:5:18649:18654	3034845	58	True				
ANR	3036726	Label	case 'c' :	727:4:18662:18670	3034845	59	True				
ANR	3036727	ExpressionStatement	"char_buf [ 0 ] = ( char ) ( va_arg ( ap , int ) )"	728:5:18677:18715	3034845	60	True				
ANR	3036728	AssignmentExpression	"char_buf [ 0 ] = ( char ) ( va_arg ( ap , int ) )"		3034845	0		=			
ANR	3036729	ArrayIndexing	char_buf [ 0 ]		3034845	0					
ANR	3036730	Identifier	char_buf		3034845	0					
ANR	3036731	PrimaryExpression	0		3034845	1					
ANR	3036732	CastExpression	"( char ) ( va_arg ( ap , int ) )"		3034845	1					
ANR	3036733	CastTarget	char		3034845	0					
ANR	3036734	CallExpression	"va_arg ( ap , int )"		3034845	1					
ANR	3036735	Callee	va_arg		3034845	0					
ANR	3036736	Identifier	va_arg		3034845	0					
ANR	3036737	ArgumentList	ap		3034845	1					
ANR	3036738	Argument	ap		3034845	0					
ANR	3036739	Identifier	ap		3034845	0					
ANR	3036740	Argument	int		3034845	1					
ANR	3036741	Identifier	int		3034845	0					
ANR	3036742	ExpressionStatement	s = & char_buf [ 0 ]	729:5:18722:18738	3034845	61	True				
ANR	3036743	AssignmentExpression	s = & char_buf [ 0 ]		3034845	0		=			
ANR	3036744	Identifier	s		3034845	0					
ANR	3036745	UnaryOperationExpression	& char_buf [ 0 ]		3034845	1					
ANR	3036746	UnaryOperator	&		3034845	0					
ANR	3036747	ArrayIndexing	char_buf [ 0 ]		3034845	1					
ANR	3036748	Identifier	char_buf		3034845	0					
ANR	3036749	PrimaryExpression	0		3034845	1					
ANR	3036750	ExpressionStatement	s_len = 1	730:5:18745:18754	3034845	62	True				
ANR	3036751	AssignmentExpression	s_len = 1		3034845	0		=			
ANR	3036752	Identifier	s_len		3034845	0					
ANR	3036753	PrimaryExpression	1		3034845	1					
ANR	3036754	ExpressionStatement	pad_char = ' '	731:5:18761:18775	3034845	63	True				
ANR	3036755	AssignmentExpression	pad_char = ' '		3034845	0		=			
ANR	3036756	Identifier	pad_char		3034845	0					
ANR	3036757	PrimaryExpression	' '		3034845	1					
ANR	3036758	BreakStatement	break ;	732:5:18782:18787	3034845	64	True				
ANR	3036759	Label	case '%' :	735:4:18795:18803	3034845	65	True				
ANR	3036760	ExpressionStatement	char_buf [ 0 ] = '%'	736:5:18810:18827	3034845	66	True				
ANR	3036761	AssignmentExpression	char_buf [ 0 ] = '%'		3034845	0		=			
ANR	3036762	ArrayIndexing	char_buf [ 0 ]		3034845	0					
ANR	3036763	Identifier	char_buf		3034845	0					
ANR	3036764	PrimaryExpression	0		3034845	1					
ANR	3036765	PrimaryExpression	'%'		3034845	1					
ANR	3036766	ExpressionStatement	s = & char_buf [ 0 ]	737:5:18834:18850	3034845	67	True				
ANR	3036767	AssignmentExpression	s = & char_buf [ 0 ]		3034845	0		=			
ANR	3036768	Identifier	s		3034845	0					
ANR	3036769	UnaryOperationExpression	& char_buf [ 0 ]		3034845	1					
ANR	3036770	UnaryOperator	&		3034845	0					
ANR	3036771	ArrayIndexing	char_buf [ 0 ]		3034845	1					
ANR	3036772	Identifier	char_buf		3034845	0					
ANR	3036773	PrimaryExpression	0		3034845	1					
ANR	3036774	ExpressionStatement	s_len = 1	738:5:18857:18866	3034845	68	True				
ANR	3036775	AssignmentExpression	s_len = 1		3034845	0		=			
ANR	3036776	Identifier	s_len		3034845	0					
ANR	3036777	PrimaryExpression	1		3034845	1					
ANR	3036778	ExpressionStatement	pad_char = ' '	739:5:18873:18887	3034845	69	True				
ANR	3036779	AssignmentExpression	pad_char = ' '		3034845	0		=			
ANR	3036780	Identifier	pad_char		3034845	0					
ANR	3036781	PrimaryExpression	' '		3034845	1					
ANR	3036782	BreakStatement	break ;	740:5:18894:18899	3034845	70	True				
ANR	3036783	Label	case 'n' :	743:4:18907:18915	3034845	71	True				
ANR	3036784	Statement	*	744:5:18922:18922	3034845	72	True				
ANR	3036785	Statement	(	744:6:18923:18923	3034845	73	True				
ANR	3036786	Statement	va_arg	744:7:18924:18929	3034845	74	True				
ANR	3036787	Statement	(	744:13:18930:18930	3034845	75	True				
ANR	3036788	Statement	ap	744:14:18931:18932	3034845	76	True				
ANR	3036789	Statement	","	744:16:18933:18933	3034845	77	True				
ANR	3036790	Statement	int	744:18:18935:18937	3034845	78	True				
ANR	3036791	Statement	*	744:22:18939:18939	3034845	79	True				
ANR	3036792	Statement	)	744:23:18940:18940	3034845	80	True				
ANR	3036793	Statement	)	744:24:18941:18941	3034845	81	True				
ANR	3036794	Statement	=	744:26:18943:18943	3034845	82	True				
ANR	3036795	ExpressionStatement	is_char ? ( int ) ( ( smart_string * ) xbuf ) -> len : ( int ) ZSTR_LEN ( ( ( smart_str * ) xbuf ) -> s )	744:28:18945:19026	3034845	83	True				
ANR	3036796	ConditionalExpression	is_char ? ( int ) ( ( smart_string * ) xbuf ) -> len : ( int ) ZSTR_LEN ( ( ( smart_str * ) xbuf ) -> s )		3034845	0					
ANR	3036797	Condition	is_char		3034845	0					
ANR	3036798	Identifier	is_char		3034845	0					
ANR	3036799	CastExpression	( int ) ( ( smart_string * ) xbuf ) -> len		3034845	1					
ANR	3036800	CastTarget	int		3034845	0					
ANR	3036801	PtrMemberAccess	( ( smart_string * ) xbuf ) -> len		3034845	1					
ANR	3036802	CastExpression	( smart_string * ) xbuf		3034845	0					
ANR	3036803	CastTarget	smart_string *		3034845	0					
ANR	3036804	Identifier	xbuf		3034845	1					
ANR	3036805	Identifier	len		3034845	1					
ANR	3036806	CastExpression	( int ) ZSTR_LEN ( ( ( smart_str * ) xbuf ) -> s )		3034845	2					
ANR	3036807	CastTarget	int		3034845	0					
ANR	3036808	CallExpression	ZSTR_LEN ( ( ( smart_str * ) xbuf ) -> s )		3034845	1					
ANR	3036809	Callee	ZSTR_LEN		3034845	0					
ANR	3036810	Identifier	ZSTR_LEN		3034845	0					
ANR	3036811	ArgumentList	( ( smart_str * ) xbuf ) -> s		3034845	1					
ANR	3036812	Argument	( ( smart_str * ) xbuf ) -> s		3034845	0					
ANR	3036813	PtrMemberAccess	( ( smart_str * ) xbuf ) -> s		3034845	0					
ANR	3036814	CastExpression	( smart_str * ) xbuf		3034845	0					
ANR	3036815	CastTarget	smart_str *		3034845	0					
ANR	3036816	Identifier	xbuf		3034845	1					
ANR	3036817	Identifier	s		3034845	1					
ANR	3036818	GotoStatement	goto skip_output ;	745:5:19033:19049	3034845	84	True				
ANR	3036819	Identifier	skip_output		3034845	0					
ANR	3036820	Label	case 'p' :	755:4:19422:19430	3034845	85	True				
ANR	3036821	IfStatement	if ( sizeof ( char * ) <= sizeof ( u_wide_int ) )		3034845	86					
ANR	3036822	Condition	sizeof ( char * ) <= sizeof ( u_wide_int )	756:9:19441:19476	3034845	0	True				
ANR	3036823	RelationalExpression	sizeof ( char * ) <= sizeof ( u_wide_int )		3034845	0		<=			
ANR	3036824	SizeofExpression	sizeof ( char * )		3034845	0					
ANR	3036825	Sizeof	sizeof		3034845	0					
ANR	3036826	SizeofOperand	char *		3034845	1					
ANR	3036827	SizeofExpression	sizeof ( u_wide_int )		3034845	1					
ANR	3036828	Sizeof	sizeof		3034845	0					
ANR	3036829	SizeofOperand	u_wide_int		3034845	1					
ANR	3036830	CompoundStatement		553:47:12248:12248	3034845	1					
ANR	3036831	Statement	ui_num	757:6:19487:19492	3034845	0	True				
ANR	3036832	Statement	=	757:13:19494:19494	3034845	1	True				
ANR	3036833	Statement	(	757:15:19496:19496	3034845	2	True				
ANR	3036834	Statement	u_wide_int	757:16:19497:19506	3034845	3	True				
ANR	3036835	Statement	)	757:26:19507:19507	3034845	4	True				
ANR	3036836	Statement	(	757:27:19508:19508	3034845	5	True				
ANR	3036837	Statement	(	757:28:19509:19509	3034845	6	True				
ANR	3036838	Statement	size_t	757:29:19510:19515	3034845	7	True				
ANR	3036839	Statement	)	757:35:19516:19516	3034845	8	True				
ANR	3036840	Statement	va_arg	757:37:19518:19523	3034845	9	True				
ANR	3036841	Statement	(	757:43:19524:19524	3034845	10	True				
ANR	3036842	Statement	ap	757:44:19525:19526	3034845	11	True				
ANR	3036843	Statement	","	757:46:19527:19527	3034845	12	True				
ANR	3036844	Statement	char	757:48:19529:19532	3034845	13	True				
ANR	3036845	Statement	*	757:53:19534:19534	3034845	14	True				
ANR	3036846	Statement	)	757:54:19535:19535	3034845	15	True				
ANR	3036847	Statement	)	757:55:19536:19536	3034845	16	True				
ANR	3036848	ExpressionStatement		757:56:19537:19537	3034845	17	True				
ANR	3036849	ExpressionStatement	"s = ap_php_conv_p2 ( ui_num , 4 , 'x' , & num_buf [ NUM_BUF_SIZE ] , & s_len )"	758:6:19545:19619	3034845	18	True				
ANR	3036850	AssignmentExpression	"s = ap_php_conv_p2 ( ui_num , 4 , 'x' , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3034845	0		=			
ANR	3036851	Identifier	s		3034845	0					
ANR	3036852	CallExpression	"ap_php_conv_p2 ( ui_num , 4 , 'x' , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3034845	1					
ANR	3036853	Callee	ap_php_conv_p2		3034845	0					
ANR	3036854	Identifier	ap_php_conv_p2		3034845	0					
ANR	3036855	ArgumentList	ui_num		3034845	1					
ANR	3036856	Argument	ui_num		3034845	0					
ANR	3036857	Identifier	ui_num		3034845	0					
ANR	3036858	Argument	4		3034845	1					
ANR	3036859	PrimaryExpression	4		3034845	0					
ANR	3036860	Argument	'x'		3034845	2					
ANR	3036861	PrimaryExpression	'x'		3034845	0					
ANR	3036862	Argument	& num_buf [ NUM_BUF_SIZE ]		3034845	3					
ANR	3036863	UnaryOperationExpression	& num_buf [ NUM_BUF_SIZE ]		3034845	0					
ANR	3036864	UnaryOperator	&		3034845	0					
ANR	3036865	ArrayIndexing	num_buf [ NUM_BUF_SIZE ]		3034845	1					
ANR	3036866	Identifier	num_buf		3034845	0					
ANR	3036867	Identifier	NUM_BUF_SIZE		3034845	1					
ANR	3036868	Argument	& s_len		3034845	4					
ANR	3036869	UnaryOperationExpression	& s_len		3034845	0					
ANR	3036870	UnaryOperator	&		3034845	0					
ANR	3036871	Identifier	s_len		3034845	1					
ANR	3036872	IfStatement	if ( ui_num != 0 )		3034845	19					
ANR	3036873	Condition	ui_num != 0	760:10:19631:19641	3034845	0	True				
ANR	3036874	EqualityExpression	ui_num != 0		3034845	0		!=			
ANR	3036875	Identifier	ui_num		3034845	0					
ANR	3036876	PrimaryExpression	0		3034845	1					
ANR	3036877	CompoundStatement		557:23:12413:12413	3034845	1					
ANR	3036878	ExpressionStatement	* -- s = 'x'	761:7:19653:19663	3034845	0	True				
ANR	3036879	AssignmentExpression	* -- s = 'x'		3034845	0		=			
ANR	3036880	UnaryOperationExpression	* -- s		3034845	0					
ANR	3036881	UnaryOperator	*		3034845	0					
ANR	3036882	UnaryExpression	-- s		3034845	1					
ANR	3036883	IncDec	--		3034845	0					
ANR	3036884	Identifier	s		3034845	1					
ANR	3036885	PrimaryExpression	'x'		3034845	1					
ANR	3036886	ExpressionStatement	* -- s = '0'	762:7:19672:19682	3034845	1	True				
ANR	3036887	AssignmentExpression	* -- s = '0'		3034845	0		=			
ANR	3036888	UnaryOperationExpression	* -- s		3034845	0					
ANR	3036889	UnaryOperator	*		3034845	0					
ANR	3036890	UnaryExpression	-- s		3034845	1					
ANR	3036891	IncDec	--		3034845	0					
ANR	3036892	Identifier	s		3034845	1					
ANR	3036893	PrimaryExpression	'0'		3034845	1					
ANR	3036894	ExpressionStatement	s_len += 2	763:7:19691:19701	3034845	2	True				
ANR	3036895	AssignmentExpression	s_len += 2		3034845	0		+=			
ANR	3036896	Identifier	s_len		3034845	0					
ANR	3036897	PrimaryExpression	2		3034845	1					
ANR	3036898	ElseStatement	else		3034845	0					
ANR	3036899	CompoundStatement		562:12:12492:12492	3034845	0					
ANR	3036900	ExpressionStatement	"s = ""%p"""	766:6:19731:19739	3034845	0	True				
ANR	3036901	AssignmentExpression	"s = ""%p"""		3034845	0		=			
ANR	3036902	Identifier	s		3034845	0					
ANR	3036903	PrimaryExpression	"""%p"""		3034845	1					
ANR	3036904	ExpressionStatement	s_len = 2	767:6:19747:19756	3034845	1	True				
ANR	3036905	AssignmentExpression	s_len = 2		3034845	0		=			
ANR	3036906	Identifier	s_len		3034845	0					
ANR	3036907	PrimaryExpression	2		3034845	1					
ANR	3036908	ExpressionStatement	pad_char = ' '	769:5:19770:19784	3034845	87	True				
ANR	3036909	AssignmentExpression	pad_char = ' '		3034845	0		=			
ANR	3036910	Identifier	pad_char		3034845	0					
ANR	3036911	PrimaryExpression	' '		3034845	1					
ANR	3036912	BreakStatement	break ;	770:5:19791:19796	3034845	88	True				
ANR	3036913	Label	case NUL :	773:4:19804:19812	3034845	89	True				
ANR	3036914	Identifier	NUL		3034845	0					
ANR	3036915	ContinueStatement	continue ;	778:5:19913:19921	3034845	90	True				
ANR	3036916	Label	fmt_error :	781:0:19925:19934	3034845	91	True				
ANR	3036917	Identifier	fmt_error		3034845	0					
ANR	3036918	ExpressionStatement	"php_error ( E_ERROR , ""Illegal length modifier specified '%c' in s[np]printf call"" , * fmt )"	782:4:19940:20026	3034845	92	True				
ANR	3036919	CallExpression	"php_error ( E_ERROR , ""Illegal length modifier specified '%c' in s[np]printf call"" , * fmt )"		3034845	0					
ANR	3036920	Callee	php_error		3034845	0					
ANR	3036921	Identifier	php_error		3034845	0					
ANR	3036922	ArgumentList	E_ERROR		3034845	1					
ANR	3036923	Argument	E_ERROR		3034845	0					
ANR	3036924	Identifier	E_ERROR		3034845	0					
ANR	3036925	Argument	"""Illegal length modifier specified '%c' in s[np]printf call"""		3034845	1					
ANR	3036926	PrimaryExpression	"""Illegal length modifier specified '%c' in s[np]printf call"""		3034845	0					
ANR	3036927	Argument	* fmt		3034845	2					
ANR	3036928	UnaryOperationExpression	* fmt		3034845	0					
ANR	3036929	UnaryOperator	*		3034845	0					
ANR	3036930	Identifier	fmt		3034845	1					
ANR	3036931	Label	default :	793:4:20479:20486	3034845	93	True				
ANR	3036932	Identifier	default		3034845	0					
ANR	3036933	ExpressionStatement	char_buf [ 0 ] = '%'	794:5:20493:20510	3034845	94	True				
ANR	3036934	AssignmentExpression	char_buf [ 0 ] = '%'		3034845	0		=			
ANR	3036935	ArrayIndexing	char_buf [ 0 ]		3034845	0					
ANR	3036936	Identifier	char_buf		3034845	0					
ANR	3036937	PrimaryExpression	0		3034845	1					
ANR	3036938	PrimaryExpression	'%'		3034845	1					
ANR	3036939	ExpressionStatement	char_buf [ 1 ] = * fmt	795:5:20517:20535	3034845	95	True				
ANR	3036940	AssignmentExpression	char_buf [ 1 ] = * fmt		3034845	0		=			
ANR	3036941	ArrayIndexing	char_buf [ 1 ]		3034845	0					
ANR	3036942	Identifier	char_buf		3034845	0					
ANR	3036943	PrimaryExpression	1		3034845	1					
ANR	3036944	UnaryOperationExpression	* fmt		3034845	1					
ANR	3036945	UnaryOperator	*		3034845	0					
ANR	3036946	Identifier	fmt		3034845	1					
ANR	3036947	ExpressionStatement	s = char_buf	796:5:20542:20554	3034845	96	True				
ANR	3036948	AssignmentExpression	s = char_buf		3034845	0		=			
ANR	3036949	Identifier	s		3034845	0					
ANR	3036950	Identifier	char_buf		3034845	1					
ANR	3036951	ExpressionStatement	s_len = 2	797:5:20561:20570	3034845	97	True				
ANR	3036952	AssignmentExpression	s_len = 2		3034845	0		=			
ANR	3036953	Identifier	s_len		3034845	0					
ANR	3036954	PrimaryExpression	2		3034845	1					
ANR	3036955	ExpressionStatement	pad_char = ' '	798:5:20577:20591	3034845	98	True				
ANR	3036956	AssignmentExpression	pad_char = ' '		3034845	0		=			
ANR	3036957	Identifier	pad_char		3034845	0					
ANR	3036958	PrimaryExpression	' '		3034845	1					
ANR	3036959	BreakStatement	break ;	799:5:20598:20603	3034845	99	True				
ANR	3036960	IfStatement	if ( prefix_char != NUL )		3034845	9					
ANR	3036961	Condition	prefix_char != NUL	802:7:20618:20635	3034845	0	True				
ANR	3036962	EqualityExpression	prefix_char != NUL		3034845	0		!=			
ANR	3036963	Identifier	prefix_char		3034845	0					
ANR	3036964	Identifier	NUL		3034845	1					
ANR	3036965	CompoundStatement		599:27:13407:13407	3034845	1					
ANR	3036966	ExpressionStatement	* -- s = prefix_char	803:4:20644:20662	3034845	0	True				
ANR	3036967	AssignmentExpression	* -- s = prefix_char		3034845	0		=			
ANR	3036968	UnaryOperationExpression	* -- s		3034845	0					
ANR	3036969	UnaryOperator	*		3034845	0					
ANR	3036970	UnaryExpression	-- s		3034845	1					
ANR	3036971	IncDec	--		3034845	0					
ANR	3036972	Identifier	s		3034845	1					
ANR	3036973	Identifier	prefix_char		3034845	1					
ANR	3036974	ExpressionStatement	s_len ++	804:4:20668:20675	3034845	1	True				
ANR	3036975	PostIncDecOperationExpression	s_len ++		3034845	0					
ANR	3036976	Identifier	s_len		3034845	0					
ANR	3036977	IncDec	++		3034845	1					
ANR	3036978	IfStatement	if ( adjust_width && adjust == RIGHT && min_width > s_len )		3034845	10					
ANR	3036979	Condition	adjust_width && adjust == RIGHT && min_width > s_len	806:7:20689:20740	3034845	0	True				
ANR	3036980	AndExpression	adjust_width && adjust == RIGHT && min_width > s_len		3034845	0		&&			
ANR	3036981	Identifier	adjust_width		3034845	0					
ANR	3036982	AndExpression	adjust == RIGHT && min_width > s_len		3034845	1		&&			
ANR	3036983	EqualityExpression	adjust == RIGHT		3034845	0		==			
ANR	3036984	Identifier	adjust		3034845	0					
ANR	3036985	Identifier	RIGHT		3034845	1					
ANR	3036986	RelationalExpression	min_width > s_len		3034845	1		>			
ANR	3036987	Identifier	min_width		3034845	0					
ANR	3036988	Identifier	s_len		3034845	1					
ANR	3036989	CompoundStatement		603:61:13512:13512	3034845	1					
ANR	3036990	IfStatement	if ( pad_char == '0' && prefix_char != NUL )		3034845	0					
ANR	3036991	Condition	pad_char == '0' && prefix_char != NUL	807:8:20753:20789	3034845	0	True				
ANR	3036992	AndExpression	pad_char == '0' && prefix_char != NUL		3034845	0		&&			
ANR	3036993	EqualityExpression	pad_char == '0'		3034845	0		==			
ANR	3036994	Identifier	pad_char		3034845	0					
ANR	3036995	PrimaryExpression	'0'		3034845	1					
ANR	3036996	EqualityExpression	prefix_char != NUL		3034845	1		!=			
ANR	3036997	Identifier	prefix_char		3034845	0					
ANR	3036998	Identifier	NUL		3034845	1					
ANR	3036999	CompoundStatement		604:47:13561:13561	3034845	1					
ANR	3037000	ExpressionStatement	"INS_CHAR ( xbuf , * s , is_char )"	808:5:20799:20826	3034845	0	True				
ANR	3037001	CallExpression	"INS_CHAR ( xbuf , * s , is_char )"		3034845	0					
ANR	3037002	Callee	INS_CHAR		3034845	0					
ANR	3037003	Identifier	INS_CHAR		3034845	0					
ANR	3037004	ArgumentList	xbuf		3034845	1					
ANR	3037005	Argument	xbuf		3034845	0					
ANR	3037006	Identifier	xbuf		3034845	0					
ANR	3037007	Argument	* s		3034845	1					
ANR	3037008	UnaryOperationExpression	* s		3034845	0					
ANR	3037009	UnaryOperator	*		3034845	0					
ANR	3037010	Identifier	s		3034845	1					
ANR	3037011	Argument	is_char		3034845	2					
ANR	3037012	Identifier	is_char		3034845	0					
ANR	3037013	ExpressionStatement	s ++	809:5:20833:20836	3034845	1	True				
ANR	3037014	PostIncDecOperationExpression	s ++		3034845	0					
ANR	3037015	Identifier	s		3034845	0					
ANR	3037016	IncDec	++		3034845	1					
ANR	3037017	ExpressionStatement	s_len --	810:5:20843:20850	3034845	2	True				
ANR	3037018	PostIncDecOperationExpression	s_len --		3034845	0					
ANR	3037019	Identifier	s_len		3034845	0					
ANR	3037020	IncDec	--		3034845	1					
ANR	3037021	ExpressionStatement	min_width --	811:5:20857:20868	3034845	3	True				
ANR	3037022	PostIncDecOperationExpression	min_width --		3034845	0					
ANR	3037023	Identifier	min_width		3034845	0					
ANR	3037024	IncDec	--		3034845	1					
ANR	3037025	ExpressionStatement	"PAD_CHAR ( xbuf , pad_char , min_width - s_len , is_char )"	813:4:20880:20932	3034845	1	True				
ANR	3037026	CallExpression	"PAD_CHAR ( xbuf , pad_char , min_width - s_len , is_char )"		3034845	0					
ANR	3037027	Callee	PAD_CHAR		3034845	0					
ANR	3037028	Identifier	PAD_CHAR		3034845	0					
ANR	3037029	ArgumentList	xbuf		3034845	1					
ANR	3037030	Argument	xbuf		3034845	0					
ANR	3037031	Identifier	xbuf		3034845	0					
ANR	3037032	Argument	pad_char		3034845	1					
ANR	3037033	Identifier	pad_char		3034845	0					
ANR	3037034	Argument	min_width - s_len		3034845	2					
ANR	3037035	AdditiveExpression	min_width - s_len		3034845	0		-			
ANR	3037036	Identifier	min_width		3034845	0					
ANR	3037037	Identifier	s_len		3034845	1					
ANR	3037038	Argument	is_char		3034845	3					
ANR	3037039	Identifier	is_char		3034845	0					
ANR	3037040	ExpressionStatement	"INS_STRING ( xbuf , s , s_len , is_char )"	818:3:20981:21016	3034845	11	True				
ANR	3037041	CallExpression	"INS_STRING ( xbuf , s , s_len , is_char )"		3034845	0					
ANR	3037042	Callee	INS_STRING		3034845	0					
ANR	3037043	Identifier	INS_STRING		3034845	0					
ANR	3037044	ArgumentList	xbuf		3034845	1					
ANR	3037045	Argument	xbuf		3034845	0					
ANR	3037046	Identifier	xbuf		3034845	0					
ANR	3037047	Argument	s		3034845	1					
ANR	3037048	Identifier	s		3034845	0					
ANR	3037049	Argument	s_len		3034845	2					
ANR	3037050	Identifier	s_len		3034845	0					
ANR	3037051	Argument	is_char		3034845	3					
ANR	3037052	Identifier	is_char		3034845	0					
ANR	3037053	IfStatement	if ( adjust_width && adjust == LEFT && min_width > s_len )		3034845	12					
ANR	3037054	Condition	adjust_width && adjust == LEFT && min_width > s_len	820:7:21026:21076	3034845	0	True				
ANR	3037055	AndExpression	adjust_width && adjust == LEFT && min_width > s_len		3034845	0		&&			
ANR	3037056	Identifier	adjust_width		3034845	0					
ANR	3037057	AndExpression	adjust == LEFT && min_width > s_len		3034845	1		&&			
ANR	3037058	EqualityExpression	adjust == LEFT		3034845	0		==			
ANR	3037059	Identifier	adjust		3034845	0					
ANR	3037060	Identifier	LEFT		3034845	1					
ANR	3037061	RelationalExpression	min_width > s_len		3034845	1		>			
ANR	3037062	Identifier	min_width		3034845	0					
ANR	3037063	Identifier	s_len		3034845	1					
ANR	3037064	CompoundStatement		617:60:13848:13848	3034845	1					
ANR	3037065	ExpressionStatement	"PAD_CHAR ( xbuf , pad_char , min_width - s_len , is_char )"	821:4:21085:21137	3034845	0	True				
ANR	3037066	CallExpression	"PAD_CHAR ( xbuf , pad_char , min_width - s_len , is_char )"		3034845	0					
ANR	3037067	Callee	PAD_CHAR		3034845	0					
ANR	3037068	Identifier	PAD_CHAR		3034845	0					
ANR	3037069	ArgumentList	xbuf		3034845	1					
ANR	3037070	Argument	xbuf		3034845	0					
ANR	3037071	Identifier	xbuf		3034845	0					
ANR	3037072	Argument	pad_char		3034845	1					
ANR	3037073	Identifier	pad_char		3034845	0					
ANR	3037074	Argument	min_width - s_len		3034845	2					
ANR	3037075	AdditiveExpression	min_width - s_len		3034845	0		-			
ANR	3037076	Identifier	min_width		3034845	0					
ANR	3037077	Identifier	s_len		3034845	1					
ANR	3037078	Argument	is_char		3034845	3					
ANR	3037079	Identifier	is_char		3034845	0					
ANR	3037080	IfStatement	if ( free_zcopy )		3034845	13					
ANR	3037081	Condition	free_zcopy	824:7:21152:21161	3034845	0	True				
ANR	3037082	Identifier	free_zcopy		3034845	0					
ANR	3037083	CompoundStatement		621:19:13933:13933	3034845	1					
ANR	3037084	ExpressionStatement	zval_dtor ( & zcopy )	825:4:21170:21187	3034845	0	True				
ANR	3037085	CallExpression	zval_dtor ( & zcopy )		3034845	0					
ANR	3037086	Callee	zval_dtor		3034845	0					
ANR	3037087	Identifier	zval_dtor		3034845	0					
ANR	3037088	ArgumentList	& zcopy		3034845	1					
ANR	3037089	Argument	& zcopy		3034845	0					
ANR	3037090	UnaryOperationExpression	& zcopy		3034845	0					
ANR	3037091	UnaryOperator	&		3034845	0					
ANR	3037092	Identifier	zcopy		3034845	1					
ANR	3037093	Label	skip_output :	828:0:21198:21209	3034845	1	True				
ANR	3037094	Identifier	skip_output		3034845	0					
ANR	3037095	ExpressionStatement	fmt ++	829:2:21213:21218	3034845	2	True				
ANR	3037096	PostIncDecOperationExpression	fmt ++		3034845	0					
ANR	3037097	Identifier	fmt		3034845	0					
ANR	3037098	IncDec	++		3034845	1					
ANR	3037099	ReturnStatement	return ;	831:1:21224:21230	3034845	23	True				
ANR	3037100	ReturnType	static void		3034845	1					
ANR	3037101	Identifier	xbuf_format_converter		3034845	2					
ANR	3037102	ParameterList	"void * xbuf , zend_bool is_char , const char * fmt , va_list ap"		3034845	3					
ANR	3037103	Parameter	void * xbuf	203:34:7160:7169	3034845	0	True				
ANR	3037104	ParameterType	void *		3034845	0					
ANR	3037105	Identifier	xbuf		3034845	1					
ANR	3037106	Parameter	zend_bool is_char	203:46:7172:7188	3034845	1	True				
ANR	3037107	ParameterType	zend_bool		3034845	0					
ANR	3037108	Identifier	is_char		3034845	1					
ANR	3037109	Parameter	const char * fmt	203:65:7191:7205	3034845	2	True				
ANR	3037110	ParameterType	const char *		3034845	0					
ANR	3037111	Identifier	fmt		3034845	1					
ANR	3037112	Parameter	va_list ap	203:82:7208:7217	3034845	3	True				
ANR	3037113	ParameterType	va_list		3034845	0					
ANR	3037114	Identifier	ap		3034845	1					
ANR	3037115	CFGEntryNode	ENTRY		3034845		True				
ANR	3037116	CFGExitNode	EXIT		3034845		True				
ANR	3037117	InfiniteForNode	true		3034845		True				
ANR	3037118	Symbol	lconv		3034845						
ANR	3037119	Symbol	LCONV_DECIMAL_POINT		3034845						
ANR	3037120	Symbol	& s_len		3034845						
ANR	3037121	Symbol	( ( smart_str * ) xbuf ) -> s		3034845						
ANR	3037122	Symbol	precision		3034845						
ANR	3037123	Symbol	modifier		3034845						
ANR	3037124	Symbol	strchr		3034845						
ANR	3037125	Symbol	zcopy		3034845						
ANR	3037126	Symbol	size_t		3034845						
ANR	3037127	Symbol	fmt		3034845						
ANR	3037128	Symbol	& is_negative		3034845						
ANR	3037129	Symbol	uintmax_t		3034845						
ANR	3037130	Symbol	strlen		3034845						
ANR	3037131	Symbol	zend_isinf		3034845						
ANR	3037132	Symbol	adjust_precision		3034845						
ANR	3037133	Symbol	php_gcvt		3034845						
ANR	3037134	Symbol	* xbuf		3034845						
ANR	3037135	Symbol	isdigit		3034845						
ANR	3037136	Symbol	va_arg		3034845						
ANR	3037137	Symbol	char_buf		3034845						
ANR	3037138	Symbol	intmax_t		3034845						
ANR	3037139	Symbol	NULL		3034845						
ANR	3037140	Symbol	zend_ulong		3034845						
ANR	3037141	Symbol	LEFT		3034845						
ANR	3037142	Symbol	double		3034845						
ANR	3037143	Symbol	zend_long		3034845						
ANR	3037144	Symbol	* -- s		3034845						
ANR	3037145	Symbol	ap		3034845						
ANR	3037146	Symbol	ptrdiff_t		3034845						
ANR	3037147	Symbol	ap_php_conv_p2		3034845						
ANR	3037148	Symbol	zvp		3034845						
ANR	3037149	Symbol	LM_LONG_DOUBLE		3034845						
ANR	3037150	Symbol	free_zcopy		3034845						
ANR	3037151	Symbol	adjust		3034845						
ANR	3037152	Symbol	is_negative		3034845						
ANR	3037153	Symbol	adjust_width		3034845						
ANR	3037154	Symbol	ui_num		3034845						
ANR	3037155	Symbol	strnlen		3034845						
ANR	3037156	Symbol	* s ++		3034845						
ANR	3037157	Symbol	NO		3034845						
ANR	3037158	Symbol	xbuf		3034845						
ANR	3037159	Symbol	ssize_t		3034845						
ANR	3037160	Symbol	i_num		3034845						
ANR	3037161	Symbol	islower		3034845						
ANR	3037162	Symbol	YES		3034845						
ANR	3037163	Symbol	s_len		3034845						
ANR	3037164	Symbol	* fmt		3034845						
ANR	3037165	Symbol	LM_PHP_INT_T		3034845						
ANR	3037166	Symbol	print_sign		3034845						
ANR	3037167	Symbol	zend_make_printable_zval		3034845						
ANR	3037168	Symbol	FLOAT_DIGITS		3034845						
ANR	3037169	Symbol	& lconv		3034845						
ANR	3037170	Symbol	pad_char		3034845						
ANR	3037171	Symbol	LM_PTRDIFF_T		3034845						
ANR	3037172	Symbol	ap_php_conv_10		3034845						
ANR	3037173	Symbol	LM_SIZE_T		3034845						
ANR	3037174	Symbol	LM_INTMAX_T		3034845						
ANR	3037175	Symbol	& zcopy		3034845						
ANR	3037176	Symbol	RIGHT		3034845						
ANR	3037177	Symbol	FORMAT_CONV_MAX_PRECISION		3034845						
ANR	3037178	Symbol	* ( fmt + 1 )		3034845						
ANR	3037179	Symbol	__next		3034845						
ANR	3037180	Symbol	zend_isnan		3034845						
ANR	3037181	Symbol	Z_STRLEN_P		3034845						
ANR	3037182	Symbol	LM_STD		3034845						
ANR	3037183	Symbol	print_blank		3034845						
ANR	3037184	Symbol	is_char		3034845						
ANR	3037185	Symbol	min_width		3034845						
ANR	3037186	Symbol	isascii		3034845						
ANR	3037187	Symbol	LM_LONG_LONG		3034845						
ANR	3037188	Symbol	NUL		3034845						
ANR	3037189	Symbol	S_NULL_LEN		3034845						
ANR	3037190	Symbol	alternate_form		3034845						
ANR	3037191	Symbol	LM_LONG		3034845						
ANR	3037192	Symbol	Z_STRVAL_P		3034845						
ANR	3037193	Symbol	int		3034845						
ANR	3037194	Symbol	* char_buf		3034845						
ANR	3037195	Symbol	S_NULL		3034845						
ANR	3037196	Symbol	php_conv_fp		3034845						
ANR	3037197	Symbol	s		3034845						
ANR	3037198	Symbol	E_ERROR		3034845						
ANR	3037199	Symbol	prefix_char		3034845						
ANR	3037200	Symbol	fp_num		3034845						
ANR	3037201	Symbol	wide_int		3034845						
ANR	3037202	Symbol	NUM_BUF_SIZE		3034845						
ANR	3037203	Symbol	num_buf		3034845						
ANR	3037204	Symbol	u_wide_int		3034845						
ANR	3037205	Symbol	* s		3034845						
ANR	3037206	Function	vspprintf	838:0:21304:21805							
ANR	3037207	FunctionDef	"vspprintf (char * * pbuf , size_t max_len , const char * format , va_list ap)"		3037206	0					
ANR	3037208	CompoundStatement		839:0:21399:21805	3037206	0					
ANR	3037209	IdentifierDeclStatement	smart_string buf = { 0 } ;	840:1:21402:21424	3037206	0	True				
ANR	3037210	IdentifierDecl	buf = { 0 }		3037206	0					
ANR	3037211	IdentifierDeclType	smart_string		3037206	0					
ANR	3037212	Identifier	buf		3037206	1					
ANR	3037213	AssignmentExpression	buf = { 0 }		3037206	2		=			
ANR	3037214	Identifier	buf		3037206	0					
ANR	3037215	InitializerList	0		3037206	1					
ANR	3037216	PrimaryExpression	0		3037206	0					
ANR	3037217	IfStatement	if ( ! pbuf )		3037206	1					
ANR	3037218	Condition	! pbuf	844:4:21548:21552	3037206	0	True				
ANR	3037219	UnaryOperationExpression	! pbuf		3037206	0					
ANR	3037220	UnaryOperator	!		3037206	0					
ANR	3037221	Identifier	pbuf		3037206	1					
ANR	3037222	CompoundStatement		6:11:155:155	3037206	1					
ANR	3037223	ReturnStatement	return 0 ;	845:2:21559:21567	3037206	0	True				
ANR	3037224	PrimaryExpression	0		3037206	0					
ANR	3037225	ExpressionStatement	"xbuf_format_converter ( & buf , 1 , format , ap )"	847:1:21573:21615	3037206	2	True				
ANR	3037226	CallExpression	"xbuf_format_converter ( & buf , 1 , format , ap )"		3037206	0					
ANR	3037227	Callee	xbuf_format_converter		3037206	0					
ANR	3037228	Identifier	xbuf_format_converter		3037206	0					
ANR	3037229	ArgumentList	& buf		3037206	1					
ANR	3037230	Argument	& buf		3037206	0					
ANR	3037231	UnaryOperationExpression	& buf		3037206	0					
ANR	3037232	UnaryOperator	&		3037206	0					
ANR	3037233	Identifier	buf		3037206	1					
ANR	3037234	Argument	1		3037206	1					
ANR	3037235	PrimaryExpression	1		3037206	0					
ANR	3037236	Argument	format		3037206	2					
ANR	3037237	Identifier	format		3037206	0					
ANR	3037238	Argument	ap		3037206	3					
ANR	3037239	Identifier	ap		3037206	0					
ANR	3037240	IfStatement	if ( max_len && buf . len > max_len )		3037206	3					
ANR	3037241	Condition	max_len && buf . len > max_len	849:5:21623:21650	3037206	0	True				
ANR	3037242	AndExpression	max_len && buf . len > max_len		3037206	0		&&			
ANR	3037243	Identifier	max_len		3037206	0					
ANR	3037244	RelationalExpression	buf . len > max_len		3037206	1		>			
ANR	3037245	MemberAccess	buf . len		3037206	0					
ANR	3037246	Identifier	buf		3037206	0					
ANR	3037247	Identifier	len		3037206	1					
ANR	3037248	Identifier	max_len		3037206	1					
ANR	3037249	CompoundStatement		11:35:253:253	3037206	1					
ANR	3037250	ExpressionStatement	buf . len = max_len	850:2:21657:21674	3037206	0	True				
ANR	3037251	AssignmentExpression	buf . len = max_len		3037206	0		=			
ANR	3037252	MemberAccess	buf . len		3037206	0					
ANR	3037253	Identifier	buf		3037206	0					
ANR	3037254	Identifier	len		3037206	1					
ANR	3037255	Identifier	max_len		3037206	1					
ANR	3037256	ExpressionStatement	smart_string_0 ( & buf )	853:1:21681:21701	3037206	4	True				
ANR	3037257	CallExpression	smart_string_0 ( & buf )		3037206	0					
ANR	3037258	Callee	smart_string_0		3037206	0					
ANR	3037259	Identifier	smart_string_0		3037206	0					
ANR	3037260	ArgumentList	& buf		3037206	1					
ANR	3037261	Argument	& buf		3037206	0					
ANR	3037262	UnaryOperationExpression	& buf		3037206	0					
ANR	3037263	UnaryOperator	&		3037206	0					
ANR	3037264	Identifier	buf		3037206	1					
ANR	3037265	IfStatement	if ( buf . c )		3037206	5					
ANR	3037266	Condition	buf . c	855:5:21709:21713	3037206	0	True				
ANR	3037267	MemberAccess	buf . c		3037206	0					
ANR	3037268	Identifier	buf		3037206	0					
ANR	3037269	Identifier	c		3037206	1					
ANR	3037270	CompoundStatement		17:12:316:316	3037206	1					
ANR	3037271	ExpressionStatement	* pbuf = buf . c	856:2:21720:21733	3037206	0	True				
ANR	3037272	AssignmentExpression	* pbuf = buf . c		3037206	0		=			
ANR	3037273	UnaryOperationExpression	* pbuf		3037206	0					
ANR	3037274	UnaryOperator	*		3037206	0					
ANR	3037275	Identifier	pbuf		3037206	1					
ANR	3037276	MemberAccess	buf . c		3037206	1					
ANR	3037277	Identifier	buf		3037206	0					
ANR	3037278	Identifier	c		3037206	1					
ANR	3037279	ReturnStatement	return buf . len ;	857:2:21737:21751	3037206	1	True				
ANR	3037280	MemberAccess	buf . len		3037206	0					
ANR	3037281	Identifier	buf		3037206	0					
ANR	3037282	Identifier	len		3037206	1					
ANR	3037283	ElseStatement	else		3037206	0					
ANR	3037284	CompoundStatement		20:8:361:361	3037206	0					
ANR	3037285	ExpressionStatement	"* pbuf = estrndup ( """" , 0 )"	859:2:21765:21788	3037206	0	True				
ANR	3037286	AssignmentExpression	"* pbuf = estrndup ( """" , 0 )"		3037206	0		=			
ANR	3037287	UnaryOperationExpression	* pbuf		3037206	0					
ANR	3037288	UnaryOperator	*		3037206	0					
ANR	3037289	Identifier	pbuf		3037206	1					
ANR	3037290	CallExpression	"estrndup ( """" , 0 )"		3037206	1					
ANR	3037291	Callee	estrndup		3037206	0					
ANR	3037292	Identifier	estrndup		3037206	0					
ANR	3037293	ArgumentList	""""""		3037206	1					
ANR	3037294	Argument	""""""		3037206	0					
ANR	3037295	PrimaryExpression	""""""		3037206	0					
ANR	3037296	Argument	0		3037206	1					
ANR	3037297	PrimaryExpression	0		3037206	0					
ANR	3037298	ReturnStatement	return 0 ;	860:2:21792:21800	3037206	1	True				
ANR	3037299	PrimaryExpression	0		3037206	0					
ANR	3037300	ReturnType	PHPAPI size_t		3037206	1					
ANR	3037301	Identifier	vspprintf		3037206	2					
ANR	3037302	ParameterList	"char * * pbuf , size_t max_len , const char * format , va_list ap"		3037206	3					
ANR	3037303	Parameter	char * * pbuf	838:24:21328:21338	3037206	0	True				
ANR	3037304	ParameterType	char * *		3037206	0					
ANR	3037305	Identifier	pbuf		3037206	1					
ANR	3037306	Parameter	size_t max_len	838:37:21341:21354	3037206	1	True				
ANR	3037307	ParameterType	size_t		3037206	0					
ANR	3037308	Identifier	max_len		3037206	1					
ANR	3037309	Parameter	const char * format	838:53:21357:21374	3037206	2	True				
ANR	3037310	ParameterType	const char *		3037206	0					
ANR	3037311	Identifier	format		3037206	1					
ANR	3037312	Parameter	va_list ap	838:73:21377:21386	3037206	3	True				
ANR	3037313	ParameterType	va_list		3037206	0					
ANR	3037314	Identifier	ap		3037206	1					
ANR	3037315	CFGEntryNode	ENTRY		3037206		True				
ANR	3037316	CFGExitNode	EXIT		3037206		True				
ANR	3037317	Symbol	buf		3037206						
ANR	3037318	Symbol	buf . c		3037206						
ANR	3037319	Symbol	estrndup		3037206						
ANR	3037320	Symbol	pbuf		3037206						
ANR	3037321	Symbol	format		3037206						
ANR	3037322	Symbol	* pbuf		3037206						
ANR	3037323	Symbol	buf . len		3037206						
ANR	3037324	Symbol	& buf		3037206						
ANR	3037325	Symbol	max_len		3037206						
ANR	3037326	Symbol	ap		3037206						
ANR	3037327	Function	spprintf	865:0:21818:22027							
ANR	3037328	FunctionDef	"spprintf (char * * pbuf , size_t max_len , const char * format)"		3037327	0					
ANR	3037329	CompoundStatement		866:0:21905:22027	3037327	0					
ANR	3037330	IdentifierDeclStatement	size_t cc ;	867:1:21908:21917	3037327	0	True				
ANR	3037331	IdentifierDecl	cc		3037327	0					
ANR	3037332	IdentifierDeclType	size_t		3037327	0					
ANR	3037333	Identifier	cc		3037327	1					
ANR	3037334	IdentifierDeclStatement	va_list ap ;	868:1:21920:21930	3037327	1	True				
ANR	3037335	IdentifierDecl	ap		3037327	0					
ANR	3037336	IdentifierDeclType	va_list		3037327	0					
ANR	3037337	Identifier	ap		3037327	1					
ANR	3037338	ExpressionStatement	"va_start ( ap , format )"	870:1:21934:21954	3037327	2	True				
ANR	3037339	CallExpression	"va_start ( ap , format )"		3037327	0					
ANR	3037340	Callee	va_start		3037327	0					
ANR	3037341	Identifier	va_start		3037327	0					
ANR	3037342	ArgumentList	ap		3037327	1					
ANR	3037343	Argument	ap		3037327	0					
ANR	3037344	Identifier	ap		3037327	0					
ANR	3037345	Argument	format		3037327	1					
ANR	3037346	Identifier	format		3037327	0					
ANR	3037347	ExpressionStatement	"cc = vspprintf ( pbuf , max_len , format , ap )"	871:1:21957:21998	3037327	3	True				
ANR	3037348	AssignmentExpression	"cc = vspprintf ( pbuf , max_len , format , ap )"		3037327	0		=			
ANR	3037349	Identifier	cc		3037327	0					
ANR	3037350	CallExpression	"vspprintf ( pbuf , max_len , format , ap )"		3037327	1					
ANR	3037351	Callee	vspprintf		3037327	0					
ANR	3037352	Identifier	vspprintf		3037327	0					
ANR	3037353	ArgumentList	pbuf		3037327	1					
ANR	3037354	Argument	pbuf		3037327	0					
ANR	3037355	Identifier	pbuf		3037327	0					
ANR	3037356	Argument	max_len		3037327	1					
ANR	3037357	Identifier	max_len		3037327	0					
ANR	3037358	Argument	format		3037327	2					
ANR	3037359	Identifier	format		3037327	0					
ANR	3037360	Argument	ap		3037327	3					
ANR	3037361	Identifier	ap		3037327	0					
ANR	3037362	ExpressionStatement	va_end ( ap )	872:1:22001:22011	3037327	4	True				
ANR	3037363	CallExpression	va_end ( ap )		3037327	0					
ANR	3037364	Callee	va_end		3037327	0					
ANR	3037365	Identifier	va_end		3037327	0					
ANR	3037366	ArgumentList	ap		3037327	1					
ANR	3037367	Argument	ap		3037327	0					
ANR	3037368	Identifier	ap		3037327	0					
ANR	3037369	ReturnStatement	return ( cc ) ;	873:1:22014:22025	3037327	5	True				
ANR	3037370	Identifier	cc		3037327	0					
ANR	3037371	ReturnType	PHPAPI size_t		3037327	1					
ANR	3037372	Identifier	spprintf		3037327	2					
ANR	3037373	ParameterList	"char * * pbuf , size_t max_len , const char * format"		3037327	3					
ANR	3037374	Parameter	char * * pbuf	865:23:21841:21851	3037327	0	True				
ANR	3037375	ParameterType	char * *		3037327	0					
ANR	3037376	Identifier	pbuf		3037327	1					
ANR	3037377	Parameter	size_t max_len	865:36:21854:21867	3037327	1	True				
ANR	3037378	ParameterType	size_t		3037327	0					
ANR	3037379	Identifier	max_len		3037327	1					
ANR	3037380	Parameter	const char * format	865:52:21870:21887	3037327	2	True				
ANR	3037381	ParameterType	const char *		3037327	0					
ANR	3037382	Identifier	format		3037327	1					
ANR	3037383	CFGEntryNode	ENTRY		3037327		True				
ANR	3037384	CFGExitNode	EXIT		3037327		True				
ANR	3037385	Symbol	cc		3037327						
ANR	3037386	Symbol	pbuf		3037327						
ANR	3037387	Symbol	format		3037327						
ANR	3037388	Symbol	vspprintf		3037327						
ANR	3037389	Symbol	max_len		3037327						
ANR	3037390	Symbol	ap		3037327						
ANR	3037391	Function	vstrpprintf	877:0:22040:22362							
ANR	3037392	FunctionDef	"vstrpprintf (size_t max_len , const char * format , va_list ap)"		3037391	0					
ANR	3037393	CompoundStatement		878:0:22130:22362	3037391	0					
ANR	3037394	IdentifierDeclStatement	smart_str buf = { 0 } ;	879:1:22133:22152	3037391	0	True				
ANR	3037395	IdentifierDecl	buf = { 0 }		3037391	0					
ANR	3037396	IdentifierDeclType	smart_str		3037391	0					
ANR	3037397	Identifier	buf		3037391	1					
ANR	3037398	AssignmentExpression	buf = { 0 }		3037391	2		=			
ANR	3037399	Identifier	buf		3037391	0					
ANR	3037400	InitializerList	0		3037391	1					
ANR	3037401	PrimaryExpression	0		3037391	0					
ANR	3037402	ExpressionStatement	"xbuf_format_converter ( & buf , 0 , format , ap )"	881:1:22156:22198	3037391	1	True				
ANR	3037403	CallExpression	"xbuf_format_converter ( & buf , 0 , format , ap )"		3037391	0					
ANR	3037404	Callee	xbuf_format_converter		3037391	0					
ANR	3037405	Identifier	xbuf_format_converter		3037391	0					
ANR	3037406	ArgumentList	& buf		3037391	1					
ANR	3037407	Argument	& buf		3037391	0					
ANR	3037408	UnaryOperationExpression	& buf		3037391	0					
ANR	3037409	UnaryOperator	&		3037391	0					
ANR	3037410	Identifier	buf		3037391	1					
ANR	3037411	Argument	0		3037391	1					
ANR	3037412	PrimaryExpression	0		3037391	0					
ANR	3037413	Argument	format		3037391	2					
ANR	3037414	Identifier	format		3037391	0					
ANR	3037415	Argument	ap		3037391	3					
ANR	3037416	Identifier	ap		3037391	0					
ANR	3037417	IfStatement	if ( ! buf . s )		3037391	2					
ANR	3037418	Condition	! buf . s	883:5:22206:22211	3037391	0	True				
ANR	3037419	UnaryOperationExpression	! buf . s		3037391	0					
ANR	3037420	UnaryOperator	!		3037391	0					
ANR	3037421	MemberAccess	buf . s		3037391	1					
ANR	3037422	Identifier	buf		3037391	0					
ANR	3037423	Identifier	s		3037391	1					
ANR	3037424	CompoundStatement		6:13:83:83	3037391	1					
ANR	3037425	ReturnStatement	return ZSTR_EMPTY_ALLOC ( ) ;	884:2:22218:22243	3037391	0	True				
ANR	3037426	CallExpression	ZSTR_EMPTY_ALLOC ( )		3037391	0					
ANR	3037427	Callee	ZSTR_EMPTY_ALLOC		3037391	0					
ANR	3037428	Identifier	ZSTR_EMPTY_ALLOC		3037391	0					
ANR	3037429	ArgumentList			3037391	1					
ANR	3037430	IfStatement	if ( max_len && ZSTR_LEN ( buf . s ) > max_len )		3037391	3					
ANR	3037431	Condition	max_len && ZSTR_LEN ( buf . s ) > max_len	887:5:22254:22289	3037391	0	True				
ANR	3037432	AndExpression	max_len && ZSTR_LEN ( buf . s ) > max_len		3037391	0		&&			
ANR	3037433	Identifier	max_len		3037391	0					
ANR	3037434	RelationalExpression	ZSTR_LEN ( buf . s ) > max_len		3037391	1		>			
ANR	3037435	CallExpression	ZSTR_LEN ( buf . s )		3037391	0					
ANR	3037436	Callee	ZSTR_LEN		3037391	0					
ANR	3037437	Identifier	ZSTR_LEN		3037391	0					
ANR	3037438	ArgumentList	buf . s		3037391	1					
ANR	3037439	Argument	buf . s		3037391	0					
ANR	3037440	MemberAccess	buf . s		3037391	0					
ANR	3037441	Identifier	buf		3037391	0					
ANR	3037442	Identifier	s		3037391	1					
ANR	3037443	Identifier	max_len		3037391	1					
ANR	3037444	CompoundStatement		10:43:161:161	3037391	1					
ANR	3037445	ExpressionStatement	ZSTR_LEN ( buf . s ) = max_len	888:2:22296:22321	3037391	0	True				
ANR	3037446	AssignmentExpression	ZSTR_LEN ( buf . s ) = max_len		3037391	0		=			
ANR	3037447	CallExpression	ZSTR_LEN ( buf . s )		3037391	0					
ANR	3037448	Callee	ZSTR_LEN		3037391	0					
ANR	3037449	Identifier	ZSTR_LEN		3037391	0					
ANR	3037450	ArgumentList	buf . s		3037391	1					
ANR	3037451	Argument	buf . s		3037391	0					
ANR	3037452	MemberAccess	buf . s		3037391	0					
ANR	3037453	Identifier	buf		3037391	0					
ANR	3037454	Identifier	s		3037391	1					
ANR	3037455	Identifier	max_len		3037391	1					
ANR	3037456	ExpressionStatement	smart_str_0 ( & buf )	891:1:22328:22345	3037391	4	True				
ANR	3037457	CallExpression	smart_str_0 ( & buf )		3037391	0					
ANR	3037458	Callee	smart_str_0		3037391	0					
ANR	3037459	Identifier	smart_str_0		3037391	0					
ANR	3037460	ArgumentList	& buf		3037391	1					
ANR	3037461	Argument	& buf		3037391	0					
ANR	3037462	UnaryOperationExpression	& buf		3037391	0					
ANR	3037463	UnaryOperator	&		3037391	0					
ANR	3037464	Identifier	buf		3037391	1					
ANR	3037465	ReturnStatement	return buf . s ;	892:1:22348:22360	3037391	5	True				
ANR	3037466	MemberAccess	buf . s		3037391	0					
ANR	3037467	Identifier	buf		3037391	0					
ANR	3037468	Identifier	s		3037391	1					
ANR	3037469	ReturnType	PHPAPI zend_string *		3037391	1					
ANR	3037470	Identifier	vstrpprintf		3037391	2					
ANR	3037471	ParameterList	"size_t max_len , const char * format , va_list ap"		3037391	3					
ANR	3037472	Parameter	size_t max_len	877:32:22072:22085	3037391	0	True				
ANR	3037473	ParameterType	size_t		3037391	0					
ANR	3037474	Identifier	max_len		3037391	1					
ANR	3037475	Parameter	const char * format	877:48:22088:22105	3037391	1	True				
ANR	3037476	ParameterType	const char *		3037391	0					
ANR	3037477	Identifier	format		3037391	1					
ANR	3037478	Parameter	va_list ap	877:68:22108:22117	3037391	2	True				
ANR	3037479	ParameterType	va_list		3037391	0					
ANR	3037480	Identifier	ap		3037391	1					
ANR	3037481	CFGEntryNode	ENTRY		3037391		True				
ANR	3037482	CFGExitNode	EXIT		3037391		True				
ANR	3037483	Symbol	buf		3037391						
ANR	3037484	Symbol	buf . s		3037391						
ANR	3037485	Symbol	format		3037391						
ANR	3037486	Symbol	ZSTR_LEN		3037391						
ANR	3037487	Symbol	& buf		3037391						
ANR	3037488	Symbol	ZSTR_EMPTY_ALLOC		3037391						
ANR	3037489	Symbol	max_len		3037391						
ANR	3037490	Symbol	ap		3037391						
ANR	3037491	Function	strpprintf	896:0:22375:22582							
ANR	3037492	FunctionDef	"strpprintf (size_t max_len , const char * format)"		3037491	0					
ANR	3037493	CompoundStatement		897:0:22457:22582	3037491	0					
ANR	3037494	IdentifierDeclStatement	va_list ap ;	898:1:22460:22470	3037491	0	True				
ANR	3037495	IdentifierDecl	ap		3037491	0					
ANR	3037496	IdentifierDeclType	va_list		3037491	0					
ANR	3037497	Identifier	ap		3037491	1					
ANR	3037498	IdentifierDeclStatement	zend_string * str ;	899:1:22473:22489	3037491	1	True				
ANR	3037499	IdentifierDecl	* str		3037491	0					
ANR	3037500	IdentifierDeclType	zend_string *		3037491	0					
ANR	3037501	Identifier	str		3037491	1					
ANR	3037502	ExpressionStatement	"va_start ( ap , format )"	901:1:22493:22513	3037491	2	True				
ANR	3037503	CallExpression	"va_start ( ap , format )"		3037491	0					
ANR	3037504	Callee	va_start		3037491	0					
ANR	3037505	Identifier	va_start		3037491	0					
ANR	3037506	ArgumentList	ap		3037491	1					
ANR	3037507	Argument	ap		3037491	0					
ANR	3037508	Identifier	ap		3037491	0					
ANR	3037509	Argument	format		3037491	1					
ANR	3037510	Identifier	format		3037491	0					
ANR	3037511	ExpressionStatement	"str = vstrpprintf ( max_len , format , ap )"	902:1:22516:22554	3037491	3	True				
ANR	3037512	AssignmentExpression	"str = vstrpprintf ( max_len , format , ap )"		3037491	0		=			
ANR	3037513	Identifier	str		3037491	0					
ANR	3037514	CallExpression	"vstrpprintf ( max_len , format , ap )"		3037491	1					
ANR	3037515	Callee	vstrpprintf		3037491	0					
ANR	3037516	Identifier	vstrpprintf		3037491	0					
ANR	3037517	ArgumentList	max_len		3037491	1					
ANR	3037518	Argument	max_len		3037491	0					
ANR	3037519	Identifier	max_len		3037491	0					
ANR	3037520	Argument	format		3037491	1					
ANR	3037521	Identifier	format		3037491	0					
ANR	3037522	Argument	ap		3037491	2					
ANR	3037523	Identifier	ap		3037491	0					
ANR	3037524	ExpressionStatement	va_end ( ap )	903:1:22557:22567	3037491	4	True				
ANR	3037525	CallExpression	va_end ( ap )		3037491	0					
ANR	3037526	Callee	va_end		3037491	0					
ANR	3037527	Identifier	va_end		3037491	0					
ANR	3037528	ArgumentList	ap		3037491	1					
ANR	3037529	Argument	ap		3037491	0					
ANR	3037530	Identifier	ap		3037491	0					
ANR	3037531	ReturnStatement	return str ;	904:1:22570:22580	3037491	5	True				
ANR	3037532	Identifier	str		3037491	0					
ANR	3037533	ReturnType	PHPAPI zend_string *		3037491	1					
ANR	3037534	Identifier	strpprintf		3037491	2					
ANR	3037535	ParameterList	"size_t max_len , const char * format"		3037491	3					
ANR	3037536	Parameter	size_t max_len	896:31:22406:22419	3037491	0	True				
ANR	3037537	ParameterType	size_t		3037491	0					
ANR	3037538	Identifier	max_len		3037491	1					
ANR	3037539	Parameter	const char * format	896:47:22422:22439	3037491	1	True				
ANR	3037540	ParameterType	const char *		3037491	0					
ANR	3037541	Identifier	format		3037491	1					
ANR	3037542	CFGEntryNode	ENTRY		3037491		True				
ANR	3037543	CFGExitNode	EXIT		3037491		True				
ANR	3037544	Symbol	str		3037491						
ANR	3037545	Symbol	format		3037491						
ANR	3037546	Symbol	max_len		3037491						
ANR	3037547	Symbol	ap		3037491						
ANR	3037548	Symbol	vstrpprintf		3037491						
