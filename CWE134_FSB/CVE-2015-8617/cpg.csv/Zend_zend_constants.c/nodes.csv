command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	138940	File	data/converged/CVE-2015-8617_php-src/Zend_zend_constants.c								
ANR	138941	Function	free_zend_constant	31:0:1441:1712							
ANR	138942	FunctionDef	free_zend_constant (zval * zv)		138941	0					
ANR	138943	CompoundStatement		32:0:1475:1712	138941	0					
ANR	138944	IdentifierDeclStatement	zend_constant * c = Z_PTR_P ( zv ) ;	33:1:1478:1508	138941	0	True				
ANR	138945	IdentifierDecl	* c = Z_PTR_P ( zv )		138941	0					
ANR	138946	IdentifierDeclType	zend_constant *		138941	0					
ANR	138947	Identifier	c		138941	1					
ANR	138948	AssignmentExpression	* c = Z_PTR_P ( zv )		138941	2		=			
ANR	138949	Identifier	c		138941	0					
ANR	138950	CallExpression	Z_PTR_P ( zv )		138941	1					
ANR	138951	Callee	Z_PTR_P		138941	0					
ANR	138952	Identifier	Z_PTR_P		138941	0					
ANR	138953	ArgumentList	zv		138941	1					
ANR	138954	Argument	zv		138941	0					
ANR	138955	Identifier	zv		138941	0					
ANR	138956	IfStatement	if ( ! ( c -> flags & CONST_PERSISTENT ) )		138941	1					
ANR	138957	Condition	! ( c -> flags & CONST_PERSISTENT )	35:5:1516:1545	138941	0	True				
ANR	138958	UnaryOperationExpression	! ( c -> flags & CONST_PERSISTENT )		138941	0					
ANR	138959	UnaryOperator	!		138941	0					
ANR	138960	BitAndExpression	c -> flags & CONST_PERSISTENT		138941	1		&			
ANR	138961	PtrMemberAccess	c -> flags		138941	0					
ANR	138962	Identifier	c		138941	0					
ANR	138963	Identifier	flags		138941	1					
ANR	138964	Identifier	CONST_PERSISTENT		138941	1					
ANR	138965	CompoundStatement		4:37:72:72	138941	1					
ANR	138966	ExpressionStatement	zval_dtor ( & c -> value )	36:2:1552:1572	138941	0	True				
ANR	138967	CallExpression	zval_dtor ( & c -> value )		138941	0					
ANR	138968	Callee	zval_dtor		138941	0					
ANR	138969	Identifier	zval_dtor		138941	0					
ANR	138970	ArgumentList	& c -> value		138941	1					
ANR	138971	Argument	& c -> value		138941	0					
ANR	138972	UnaryOperationExpression	& c -> value		138941	0					
ANR	138973	UnaryOperator	&		138941	0					
ANR	138974	PtrMemberAccess	c -> value		138941	1					
ANR	138975	Identifier	c		138941	0					
ANR	138976	Identifier	value		138941	1					
ANR	138977	ElseStatement	else		138941	0					
ANR	138978	CompoundStatement		6:8:106:106	138941	0					
ANR	138979	ExpressionStatement	zval_internal_dtor ( & c -> value )	38:2:1586:1615	138941	0	True				
ANR	138980	CallExpression	zval_internal_dtor ( & c -> value )		138941	0					
ANR	138981	Callee	zval_internal_dtor		138941	0					
ANR	138982	Identifier	zval_internal_dtor		138941	0					
ANR	138983	ArgumentList	& c -> value		138941	1					
ANR	138984	Argument	& c -> value		138941	0					
ANR	138985	UnaryOperationExpression	& c -> value		138941	0					
ANR	138986	UnaryOperator	&		138941	0					
ANR	138987	PtrMemberAccess	c -> value		138941	1					
ANR	138988	Identifier	c		138941	0					
ANR	138989	Identifier	value		138941	1					
ANR	138990	IfStatement	if ( c -> name )		138941	2					
ANR	138991	Condition	c -> name	40:5:1625:1631	138941	0	True				
ANR	138992	PtrMemberAccess	c -> name		138941	0					
ANR	138993	Identifier	c		138941	0					
ANR	138994	Identifier	name		138941	1					
ANR	138995	CompoundStatement		9:14:158:158	138941	1					
ANR	138996	ExpressionStatement	zend_string_release ( c -> name )	41:2:1638:1666	138941	0	True				
ANR	138997	CallExpression	zend_string_release ( c -> name )		138941	0					
ANR	138998	Callee	zend_string_release		138941	0					
ANR	138999	Identifier	zend_string_release		138941	0					
ANR	139000	ArgumentList	c -> name		138941	1					
ANR	139001	Argument	c -> name		138941	0					
ANR	139002	PtrMemberAccess	c -> name		138941	0					
ANR	139003	Identifier	c		138941	0					
ANR	139004	Identifier	name		138941	1					
ANR	139005	ExpressionStatement	"pefree ( c , c -> flags & CONST_PERSISTENT )"	43:1:1672:1710	138941	3	True				
ANR	139006	CallExpression	"pefree ( c , c -> flags & CONST_PERSISTENT )"		138941	0					
ANR	139007	Callee	pefree		138941	0					
ANR	139008	Identifier	pefree		138941	0					
ANR	139009	ArgumentList	c		138941	1					
ANR	139010	Argument	c		138941	0					
ANR	139011	Identifier	c		138941	0					
ANR	139012	Argument	c -> flags & CONST_PERSISTENT		138941	1					
ANR	139013	BitAndExpression	c -> flags & CONST_PERSISTENT		138941	0		&			
ANR	139014	PtrMemberAccess	c -> flags		138941	0					
ANR	139015	Identifier	c		138941	0					
ANR	139016	Identifier	flags		138941	1					
ANR	139017	Identifier	CONST_PERSISTENT		138941	1					
ANR	139018	ReturnType	void		138941	1					
ANR	139019	Identifier	free_zend_constant		138941	2					
ANR	139020	ParameterList	zval * zv		138941	3					
ANR	139021	Parameter	zval * zv	31:24:1465:1472	138941	0	True				
ANR	139022	ParameterType	zval *		138941	0					
ANR	139023	Identifier	zv		138941	1					
ANR	139024	CFGEntryNode	ENTRY		138941		True				
ANR	139025	CFGExitNode	EXIT		138941		True				
ANR	139026	Symbol	Z_PTR_P		138941						
ANR	139027	Symbol	& c -> value		138941						
ANR	139028	Symbol	c		138941						
ANR	139029	Symbol	c -> flags		138941						
ANR	139030	Symbol	c -> name		138941						
ANR	139031	Symbol	zv		138941						
ANR	139032	Symbol	CONST_PERSISTENT		138941						
ANR	139033	Symbol	* c		138941						
ANR	139034	Function	copy_zend_constant	47:0:1716:2157							
ANR	139035	FunctionDef	copy_zend_constant (zval * zv)		139034	0					
ANR	139036	CompoundStatement		48:0:1757:2157	139034	0					
ANR	139037	IdentifierDeclStatement	zend_constant * c = Z_PTR_P ( zv ) ;	49:1:1760:1790	139034	0	True				
ANR	139038	IdentifierDecl	* c = Z_PTR_P ( zv )		139034	0					
ANR	139039	IdentifierDeclType	zend_constant *		139034	0					
ANR	139040	Identifier	c		139034	1					
ANR	139041	AssignmentExpression	* c = Z_PTR_P ( zv )		139034	2		=			
ANR	139042	Identifier	c		139034	0					
ANR	139043	CallExpression	Z_PTR_P ( zv )		139034	1					
ANR	139044	Callee	Z_PTR_P		139034	0					
ANR	139045	Identifier	Z_PTR_P		139034	0					
ANR	139046	ArgumentList	zv		139034	1					
ANR	139047	Argument	zv		139034	0					
ANR	139048	Identifier	zv		139034	0					
ANR	139049	ExpressionStatement	"Z_PTR_P ( zv ) = pemalloc ( sizeof ( zend_constant ) , c -> flags & CONST_PERSISTENT )"	51:1:1794:1868	139034	1	True				
ANR	139050	AssignmentExpression	"Z_PTR_P ( zv ) = pemalloc ( sizeof ( zend_constant ) , c -> flags & CONST_PERSISTENT )"		139034	0		=			
ANR	139051	CallExpression	Z_PTR_P ( zv )		139034	0					
ANR	139052	Callee	Z_PTR_P		139034	0					
ANR	139053	Identifier	Z_PTR_P		139034	0					
ANR	139054	ArgumentList	zv		139034	1					
ANR	139055	Argument	zv		139034	0					
ANR	139056	Identifier	zv		139034	0					
ANR	139057	CallExpression	"pemalloc ( sizeof ( zend_constant ) , c -> flags & CONST_PERSISTENT )"		139034	1					
ANR	139058	Callee	pemalloc		139034	0					
ANR	139059	Identifier	pemalloc		139034	0					
ANR	139060	ArgumentList	sizeof ( zend_constant )		139034	1					
ANR	139061	Argument	sizeof ( zend_constant )		139034	0					
ANR	139062	SizeofExpression	sizeof ( zend_constant )		139034	0					
ANR	139063	Sizeof	sizeof		139034	0					
ANR	139064	SizeofOperand	zend_constant		139034	1					
ANR	139065	Argument	c -> flags & CONST_PERSISTENT		139034	1					
ANR	139066	BitAndExpression	c -> flags & CONST_PERSISTENT		139034	0		&			
ANR	139067	PtrMemberAccess	c -> flags		139034	0					
ANR	139068	Identifier	c		139034	0					
ANR	139069	Identifier	flags		139034	1					
ANR	139070	Identifier	CONST_PERSISTENT		139034	1					
ANR	139071	ExpressionStatement	"memcpy ( Z_PTR_P ( zv ) , c , sizeof ( zend_constant ) )"	52:1:1871:1916	139034	2	True				
ANR	139072	CallExpression	"memcpy ( Z_PTR_P ( zv ) , c , sizeof ( zend_constant ) )"		139034	0					
ANR	139073	Callee	memcpy		139034	0					
ANR	139074	Identifier	memcpy		139034	0					
ANR	139075	ArgumentList	Z_PTR_P ( zv )		139034	1					
ANR	139076	Argument	Z_PTR_P ( zv )		139034	0					
ANR	139077	CallExpression	Z_PTR_P ( zv )		139034	0					
ANR	139078	Callee	Z_PTR_P		139034	0					
ANR	139079	Identifier	Z_PTR_P		139034	0					
ANR	139080	ArgumentList	zv		139034	1					
ANR	139081	Argument	zv		139034	0					
ANR	139082	Identifier	zv		139034	0					
ANR	139083	Argument	c		139034	1					
ANR	139084	Identifier	c		139034	0					
ANR	139085	Argument	sizeof ( zend_constant )		139034	2					
ANR	139086	SizeofExpression	sizeof ( zend_constant )		139034	0					
ANR	139087	Sizeof	sizeof		139034	0					
ANR	139088	SizeofOperand	zend_constant		139034	1					
ANR	139089	ExpressionStatement	c = Z_PTR_P ( zv )	54:1:1920:1935	139034	3	True				
ANR	139090	AssignmentExpression	c = Z_PTR_P ( zv )		139034	0		=			
ANR	139091	Identifier	c		139034	0					
ANR	139092	CallExpression	Z_PTR_P ( zv )		139034	1					
ANR	139093	Callee	Z_PTR_P		139034	0					
ANR	139094	Identifier	Z_PTR_P		139034	0					
ANR	139095	ArgumentList	zv		139034	1					
ANR	139096	Argument	zv		139034	0					
ANR	139097	Identifier	zv		139034	0					
ANR	139098	ExpressionStatement	c -> name = zend_string_copy ( c -> name )	55:1:1938:1973	139034	4	True				
ANR	139099	AssignmentExpression	c -> name = zend_string_copy ( c -> name )		139034	0		=			
ANR	139100	PtrMemberAccess	c -> name		139034	0					
ANR	139101	Identifier	c		139034	0					
ANR	139102	Identifier	name		139034	1					
ANR	139103	CallExpression	zend_string_copy ( c -> name )		139034	1					
ANR	139104	Callee	zend_string_copy		139034	0					
ANR	139105	Identifier	zend_string_copy		139034	0					
ANR	139106	ArgumentList	c -> name		139034	1					
ANR	139107	Argument	c -> name		139034	0					
ANR	139108	PtrMemberAccess	c -> name		139034	0					
ANR	139109	Identifier	c		139034	0					
ANR	139110	Identifier	name		139034	1					
ANR	139111	IfStatement	if ( ! ( c -> flags & CONST_PERSISTENT ) )		139034	5					
ANR	139112	Condition	! ( c -> flags & CONST_PERSISTENT )	56:5:1980:2009	139034	0	True				
ANR	139113	UnaryOperationExpression	! ( c -> flags & CONST_PERSISTENT )		139034	0					
ANR	139114	UnaryOperator	!		139034	0					
ANR	139115	BitAndExpression	c -> flags & CONST_PERSISTENT		139034	1		&			
ANR	139116	PtrMemberAccess	c -> flags		139034	0					
ANR	139117	Identifier	c		139034	0					
ANR	139118	Identifier	flags		139034	1					
ANR	139119	Identifier	CONST_PERSISTENT		139034	1					
ANR	139120	CompoundStatement		9:37:254:254	139034	1					
ANR	139121	ExpressionStatement	zval_copy_ctor ( & c -> value )	57:2:2016:2041	139034	0	True				
ANR	139122	CallExpression	zval_copy_ctor ( & c -> value )		139034	0					
ANR	139123	Callee	zval_copy_ctor		139034	0					
ANR	139124	Identifier	zval_copy_ctor		139034	0					
ANR	139125	ArgumentList	& c -> value		139034	1					
ANR	139126	Argument	& c -> value		139034	0					
ANR	139127	UnaryOperationExpression	& c -> value		139034	0					
ANR	139128	UnaryOperator	&		139034	0					
ANR	139129	PtrMemberAccess	c -> value		139034	1					
ANR	139130	Identifier	c		139034	0					
ANR	139131	Identifier	value		139034	1					
ANR	139132	ElseStatement	else		139034	0					
ANR	139133	CompoundStatement		11:8:293:293	139034	0					
ANR	139134	IfStatement	if ( Z_TYPE ( c -> value ) == IS_STRING )		139034	0					
ANR	139135	Condition	Z_TYPE ( c -> value ) == IS_STRING	59:6:2059:2087	139034	0	True				
ANR	139136	EqualityExpression	Z_TYPE ( c -> value ) == IS_STRING		139034	0		==			
ANR	139137	CallExpression	Z_TYPE ( c -> value )		139034	0					
ANR	139138	Callee	Z_TYPE		139034	0					
ANR	139139	Identifier	Z_TYPE		139034	0					
ANR	139140	ArgumentList	c -> value		139034	1					
ANR	139141	Argument	c -> value		139034	0					
ANR	139142	PtrMemberAccess	c -> value		139034	0					
ANR	139143	Identifier	c		139034	0					
ANR	139144	Identifier	value		139034	1					
ANR	139145	Identifier	IS_STRING		139034	1					
ANR	139146	CompoundStatement		12:37:332:332	139034	1					
ANR	139147	ExpressionStatement	"Z_STR ( c -> value ) = zend_string_dup ( Z_STR ( c -> value ) , 1 )"	60:3:2095:2148	139034	0	True				
ANR	139148	AssignmentExpression	"Z_STR ( c -> value ) = zend_string_dup ( Z_STR ( c -> value ) , 1 )"		139034	0		=			
ANR	139149	CallExpression	Z_STR ( c -> value )		139034	0					
ANR	139150	Callee	Z_STR		139034	0					
ANR	139151	Identifier	Z_STR		139034	0					
ANR	139152	ArgumentList	c -> value		139034	1					
ANR	139153	Argument	c -> value		139034	0					
ANR	139154	PtrMemberAccess	c -> value		139034	0					
ANR	139155	Identifier	c		139034	0					
ANR	139156	Identifier	value		139034	1					
ANR	139157	CallExpression	"zend_string_dup ( Z_STR ( c -> value ) , 1 )"		139034	1					
ANR	139158	Callee	zend_string_dup		139034	0					
ANR	139159	Identifier	zend_string_dup		139034	0					
ANR	139160	ArgumentList	Z_STR ( c -> value )		139034	1					
ANR	139161	Argument	Z_STR ( c -> value )		139034	0					
ANR	139162	CallExpression	Z_STR ( c -> value )		139034	0					
ANR	139163	Callee	Z_STR		139034	0					
ANR	139164	Identifier	Z_STR		139034	0					
ANR	139165	ArgumentList	c -> value		139034	1					
ANR	139166	Argument	c -> value		139034	0					
ANR	139167	PtrMemberAccess	c -> value		139034	0					
ANR	139168	Identifier	c		139034	0					
ANR	139169	Identifier	value		139034	1					
ANR	139170	Argument	1		139034	1					
ANR	139171	PrimaryExpression	1		139034	0					
ANR	139172	ReturnType	static void		139034	1					
ANR	139173	Identifier	copy_zend_constant		139034	2					
ANR	139174	ParameterList	zval * zv		139034	3					
ANR	139175	Parameter	zval * zv	47:31:1747:1754	139034	0	True				
ANR	139176	ParameterType	zval *		139034	0					
ANR	139177	Identifier	zv		139034	1					
ANR	139178	CFGEntryNode	ENTRY		139034		True				
ANR	139179	CFGExitNode	EXIT		139034		True				
ANR	139180	Symbol	Z_PTR_P		139034						
ANR	139181	Symbol	c		139034						
ANR	139182	Symbol	c -> flags		139034						
ANR	139183	Symbol	Z_TYPE		139034						
ANR	139184	Symbol	c -> name		139034						
ANR	139185	Symbol	zend_string_copy		139034						
ANR	139186	Symbol	c -> value		139034						
ANR	139187	Symbol	Z_STR		139034						
ANR	139188	Symbol	* c		139034						
ANR	139189	Symbol	zend_string_dup		139034						
ANR	139190	Symbol	& c -> value		139034						
ANR	139191	Symbol	IS_STRING		139034						
ANR	139192	Symbol	zv		139034						
ANR	139193	Symbol	CONST_PERSISTENT		139034						
ANR	139194	Symbol	pemalloc		139034						
ANR	139195	Function	zend_copy_constants	66:0:2161:2279							
ANR	139196	FunctionDef	"zend_copy_constants (HashTable * target , HashTable * source)"		139195	0					
ANR	139197	CompoundStatement		67:0:2224:2279	139195	0					
ANR	139198	ExpressionStatement	"zend_hash_copy ( target , source , copy_zend_constant )"	68:1:2227:2277	139195	0	True				
ANR	139199	CallExpression	"zend_hash_copy ( target , source , copy_zend_constant )"		139195	0					
ANR	139200	Callee	zend_hash_copy		139195	0					
ANR	139201	Identifier	zend_hash_copy		139195	0					
ANR	139202	ArgumentList	target		139195	1					
ANR	139203	Argument	target		139195	0					
ANR	139204	Identifier	target		139195	0					
ANR	139205	Argument	source		139195	1					
ANR	139206	Identifier	source		139195	0					
ANR	139207	Argument	copy_zend_constant		139195	2					
ANR	139208	Identifier	copy_zend_constant		139195	0					
ANR	139209	ReturnType	void		139195	1					
ANR	139210	Identifier	zend_copy_constants		139195	2					
ANR	139211	ParameterList	"HashTable * target , HashTable * source"		139195	3					
ANR	139212	Parameter	HashTable * target	66:25:2186:2202	139195	0	True				
ANR	139213	ParameterType	HashTable *		139195	0					
ANR	139214	Identifier	target		139195	1					
ANR	139215	Parameter	HashTable * source	66:44:2205:2221	139195	1	True				
ANR	139216	ParameterType	HashTable *		139195	0					
ANR	139217	Identifier	source		139195	1					
ANR	139218	CFGEntryNode	ENTRY		139195		True				
ANR	139219	CFGExitNode	EXIT		139195		True				
ANR	139220	Symbol	copy_zend_constant		139195						
ANR	139221	Symbol	source		139195						
ANR	139222	Symbol	target		139195						
ANR	139223	Function	clean_non_persistent_constant	72:0:2283:2456							
ANR	139224	FunctionDef	clean_non_persistent_constant (zval * zv)		139223	0					
ANR	139225	CompoundStatement		73:0:2334:2456	139223	0					
ANR	139226	IdentifierDeclStatement	zend_constant * c = Z_PTR_P ( zv ) ;	74:1:2337:2367	139223	0	True				
ANR	139227	IdentifierDecl	* c = Z_PTR_P ( zv )		139223	0					
ANR	139228	IdentifierDeclType	zend_constant *		139223	0					
ANR	139229	Identifier	c		139223	1					
ANR	139230	AssignmentExpression	* c = Z_PTR_P ( zv )		139223	2		=			
ANR	139231	Identifier	c		139223	0					
ANR	139232	CallExpression	Z_PTR_P ( zv )		139223	1					
ANR	139233	Callee	Z_PTR_P		139223	0					
ANR	139234	Identifier	Z_PTR_P		139223	0					
ANR	139235	ArgumentList	zv		139223	1					
ANR	139236	Argument	zv		139223	0					
ANR	139237	Identifier	zv		139223	0					
ANR	139238	ReturnStatement	return ( c -> flags & CONST_PERSISTENT ) ? ZEND_HASH_APPLY_STOP : ZEND_HASH_APPLY_REMOVE ;	75:1:2370:2454	139223	1	True				
ANR	139239	ConditionalExpression	( c -> flags & CONST_PERSISTENT ) ? ZEND_HASH_APPLY_STOP : ZEND_HASH_APPLY_REMOVE		139223	0					
ANR	139240	Condition	c -> flags & CONST_PERSISTENT		139223	0					
ANR	139241	BitAndExpression	c -> flags & CONST_PERSISTENT		139223	0		&			
ANR	139242	PtrMemberAccess	c -> flags		139223	0					
ANR	139243	Identifier	c		139223	0					
ANR	139244	Identifier	flags		139223	1					
ANR	139245	Identifier	CONST_PERSISTENT		139223	1					
ANR	139246	Identifier	ZEND_HASH_APPLY_STOP		139223	1					
ANR	139247	Identifier	ZEND_HASH_APPLY_REMOVE		139223	2					
ANR	139248	ReturnType	static int		139223	1					
ANR	139249	Identifier	clean_non_persistent_constant		139223	2					
ANR	139250	ParameterList	zval * zv		139223	3					
ANR	139251	Parameter	zval * zv	72:41:2324:2331	139223	0	True				
ANR	139252	ParameterType	zval *		139223	0					
ANR	139253	Identifier	zv		139223	1					
ANR	139254	CFGEntryNode	ENTRY		139223		True				
ANR	139255	CFGExitNode	EXIT		139223		True				
ANR	139256	Symbol	Z_PTR_P		139223						
ANR	139257	Symbol	c		139223						
ANR	139258	Symbol	c -> flags		139223						
ANR	139259	Symbol	ZEND_HASH_APPLY_REMOVE		139223						
ANR	139260	Symbol	ZEND_HASH_APPLY_STOP		139223						
ANR	139261	Symbol	zv		139223						
ANR	139262	Symbol	CONST_PERSISTENT		139223						
ANR	139263	Symbol	* c		139223						
ANR	139264	Function	clean_non_persistent_constant_full	79:0:2460:2598							
ANR	139265	FunctionDef	clean_non_persistent_constant_full (zval * zv)		139264	0					
ANR	139266	CompoundStatement		80:0:2516:2598	139264	0					
ANR	139267	IdentifierDeclStatement	zend_constant * c = Z_PTR_P ( zv ) ;	81:1:2519:2549	139264	0	True				
ANR	139268	IdentifierDecl	* c = Z_PTR_P ( zv )		139264	0					
ANR	139269	IdentifierDeclType	zend_constant *		139264	0					
ANR	139270	Identifier	c		139264	1					
ANR	139271	AssignmentExpression	* c = Z_PTR_P ( zv )		139264	2		=			
ANR	139272	Identifier	c		139264	0					
ANR	139273	CallExpression	Z_PTR_P ( zv )		139264	1					
ANR	139274	Callee	Z_PTR_P		139264	0					
ANR	139275	Identifier	Z_PTR_P		139264	0					
ANR	139276	ArgumentList	zv		139264	1					
ANR	139277	Argument	zv		139264	0					
ANR	139278	Identifier	zv		139264	0					
ANR	139279	ReturnStatement	return ( c -> flags & CONST_PERSISTENT ) ? 0 : 1 ;	82:1:2552:2596	139264	1	True				
ANR	139280	ConditionalExpression	( c -> flags & CONST_PERSISTENT ) ? 0 : 1		139264	0					
ANR	139281	Condition	c -> flags & CONST_PERSISTENT		139264	0					
ANR	139282	BitAndExpression	c -> flags & CONST_PERSISTENT		139264	0		&			
ANR	139283	PtrMemberAccess	c -> flags		139264	0					
ANR	139284	Identifier	c		139264	0					
ANR	139285	Identifier	flags		139264	1					
ANR	139286	Identifier	CONST_PERSISTENT		139264	1					
ANR	139287	PrimaryExpression	0		139264	1					
ANR	139288	PrimaryExpression	1		139264	2					
ANR	139289	ReturnType	static int		139264	1					
ANR	139290	Identifier	clean_non_persistent_constant_full		139264	2					
ANR	139291	ParameterList	zval * zv		139264	3					
ANR	139292	Parameter	zval * zv	79:46:2506:2513	139264	0	True				
ANR	139293	ParameterType	zval *		139264	0					
ANR	139294	Identifier	zv		139264	1					
ANR	139295	CFGEntryNode	ENTRY		139264		True				
ANR	139296	CFGExitNode	EXIT		139264		True				
ANR	139297	Symbol	Z_PTR_P		139264						
ANR	139298	Symbol	c		139264						
ANR	139299	Symbol	c -> flags		139264						
ANR	139300	Symbol	zv		139264						
ANR	139301	Symbol	CONST_PERSISTENT		139264						
ANR	139302	Symbol	* c		139264						
ANR	139303	Function	clean_module_constant	86:0:2602:2822							
ANR	139304	FunctionDef	"clean_module_constant (zval * el , void * arg)"		139303	0					
ANR	139305	CompoundStatement		87:0:2656:2822	139303	0					
ANR	139306	IdentifierDeclStatement	zend_constant * c = ( zend_constant * ) Z_PTR_P ( el ) ;	88:1:2659:2706	139303	0	True				
ANR	139307	IdentifierDecl	* c = ( zend_constant * ) Z_PTR_P ( el )		139303	0					
ANR	139308	IdentifierDeclType	zend_constant *		139303	0					
ANR	139309	Identifier	c		139303	1					
ANR	139310	AssignmentExpression	* c = ( zend_constant * ) Z_PTR_P ( el )		139303	2		=			
ANR	139311	Identifier	c		139303	0					
ANR	139312	CastExpression	( zend_constant * ) Z_PTR_P ( el )		139303	1					
ANR	139313	CastTarget	zend_constant *		139303	0					
ANR	139314	CallExpression	Z_PTR_P ( el )		139303	1					
ANR	139315	Callee	Z_PTR_P		139303	0					
ANR	139316	Identifier	Z_PTR_P		139303	0					
ANR	139317	ArgumentList	el		139303	1					
ANR	139318	Argument	el		139303	0					
ANR	139319	Identifier	el		139303	0					
ANR	139320	IdentifierDeclStatement	int module_number = * ( int * ) arg ;	89:1:2709:2740	139303	1	True				
ANR	139321	IdentifierDecl	module_number = * ( int * ) arg		139303	0					
ANR	139322	IdentifierDeclType	int		139303	0					
ANR	139323	Identifier	module_number		139303	1					
ANR	139324	AssignmentExpression	module_number = * ( int * ) arg		139303	2		=			
ANR	139325	Identifier	module_number		139303	0					
ANR	139326	UnaryOperationExpression	* ( int * ) arg		139303	1					
ANR	139327	UnaryOperator	*		139303	0					
ANR	139328	CastExpression	( int * ) arg		139303	1					
ANR	139329	CastTarget	int *		139303	0					
ANR	139330	Identifier	arg		139303	1					
ANR	139331	IfStatement	if ( c -> module_number == module_number )		139303	2					
ANR	139332	Condition	c -> module_number == module_number	91:5:2748:2780	139303	0	True				
ANR	139333	EqualityExpression	c -> module_number == module_number		139303	0		==			
ANR	139334	PtrMemberAccess	c -> module_number		139303	0					
ANR	139335	Identifier	c		139303	0					
ANR	139336	Identifier	module_number		139303	1					
ANR	139337	Identifier	module_number		139303	1					
ANR	139338	CompoundStatement		5:40:126:126	139303	1					
ANR	139339	ReturnStatement	return 1 ;	92:2:2787:2795	139303	0	True				
ANR	139340	PrimaryExpression	1		139303	0					
ANR	139341	ElseStatement	else		139303	0					
ANR	139342	CompoundStatement		7:8:148:148	139303	0					
ANR	139343	ReturnStatement	return 0 ;	94:2:2809:2817	139303	0	True				
ANR	139344	PrimaryExpression	0		139303	0					
ANR	139345	ReturnType	static int		139303	1					
ANR	139346	Identifier	clean_module_constant		139303	2					
ANR	139347	ParameterList	"zval * el , void * arg"		139303	3					
ANR	139348	Parameter	zval * el	86:33:2635:2642	139303	0	True				
ANR	139349	ParameterType	zval *		139303	0					
ANR	139350	Identifier	el		139303	1					
ANR	139351	Parameter	void * arg	86:43:2645:2653	139303	1	True				
ANR	139352	ParameterType	void *		139303	0					
ANR	139353	Identifier	arg		139303	1					
ANR	139354	CFGEntryNode	ENTRY		139303		True				
ANR	139355	CFGExitNode	EXIT		139303		True				
ANR	139356	Symbol	Z_PTR_P		139303						
ANR	139357	Symbol	c		139303						
ANR	139358	Symbol	* ( int * ) arg		139303						
ANR	139359	Symbol	c -> module_number		139303						
ANR	139360	Symbol	el		139303						
ANR	139361	Symbol	arg		139303						
ANR	139362	Symbol	module_number		139303						
ANR	139363	Symbol	* c		139303						
ANR	139364	Symbol	* arg		139303						
ANR	139365	Function	clean_module_constants	99:0:2826:2975							
ANR	139366	FunctionDef	clean_module_constants (int module_number)		139365	0					
ANR	139367	CompoundStatement		100:0:2873:2975	139365	0					
ANR	139368	ExpressionStatement	"zend_hash_apply_with_argument ( EG ( zend_constants ) , clean_module_constant , ( void * ) & module_number )"	101:1:2876:2973	139365	0	True				
ANR	139369	CallExpression	"zend_hash_apply_with_argument ( EG ( zend_constants ) , clean_module_constant , ( void * ) & module_number )"		139365	0					
ANR	139370	Callee	zend_hash_apply_with_argument		139365	0					
ANR	139371	Identifier	zend_hash_apply_with_argument		139365	0					
ANR	139372	ArgumentList	EG ( zend_constants )		139365	1					
ANR	139373	Argument	EG ( zend_constants )		139365	0					
ANR	139374	CallExpression	EG ( zend_constants )		139365	0					
ANR	139375	Callee	EG		139365	0					
ANR	139376	Identifier	EG		139365	0					
ANR	139377	ArgumentList	zend_constants		139365	1					
ANR	139378	Argument	zend_constants		139365	0					
ANR	139379	Identifier	zend_constants		139365	0					
ANR	139380	Argument	clean_module_constant		139365	1					
ANR	139381	Identifier	clean_module_constant		139365	0					
ANR	139382	Argument	( void * ) & module_number		139365	2					
ANR	139383	CastExpression	( void * ) & module_number		139365	0					
ANR	139384	CastTarget	void *		139365	0					
ANR	139385	UnaryOperationExpression	& module_number		139365	1					
ANR	139386	UnaryOperator	&		139365	0					
ANR	139387	Identifier	module_number		139365	1					
ANR	139388	ReturnType	void		139365	1					
ANR	139389	Identifier	clean_module_constants		139365	2					
ANR	139390	ParameterList	int module_number		139365	3					
ANR	139391	Parameter	int module_number	99:28:2854:2870	139365	0	True				
ANR	139392	ParameterType	int		139365	0					
ANR	139393	Identifier	module_number		139365	1					
ANR	139394	CFGEntryNode	ENTRY		139365		True				
ANR	139395	CFGExitNode	EXIT		139365		True				
ANR	139396	Symbol	clean_module_constant		139365						
ANR	139397	Symbol	& module_number		139365						
ANR	139398	Symbol	EG		139365						
ANR	139399	Symbol	zend_constants		139365						
ANR	139400	Symbol	module_number		139365						
ANR	139401	Function	zend_startup_constants	105:0:2979:3166							
ANR	139402	FunctionDef	zend_startup_constants ()		139401	0					
ANR	139403	CompoundStatement		106:0:3012:3166	139401	0					
ANR	139404	ExpressionStatement	EG ( zend_constants ) = ( HashTable * ) malloc ( sizeof ( HashTable ) )	107:1:3015:3075	139401	0	True				
ANR	139405	AssignmentExpression	EG ( zend_constants ) = ( HashTable * ) malloc ( sizeof ( HashTable ) )		139401	0		=			
ANR	139406	CallExpression	EG ( zend_constants )		139401	0					
ANR	139407	Callee	EG		139401	0					
ANR	139408	Identifier	EG		139401	0					
ANR	139409	ArgumentList	zend_constants		139401	1					
ANR	139410	Argument	zend_constants		139401	0					
ANR	139411	Identifier	zend_constants		139401	0					
ANR	139412	CastExpression	( HashTable * ) malloc ( sizeof ( HashTable ) )		139401	1					
ANR	139413	CastTarget	HashTable *		139401	0					
ANR	139414	CallExpression	malloc ( sizeof ( HashTable ) )		139401	1					
ANR	139415	Callee	malloc		139401	0					
ANR	139416	Identifier	malloc		139401	0					
ANR	139417	ArgumentList	sizeof ( HashTable )		139401	1					
ANR	139418	Argument	sizeof ( HashTable )		139401	0					
ANR	139419	SizeofExpression	sizeof ( HashTable )		139401	0					
ANR	139420	Sizeof	sizeof		139401	0					
ANR	139421	SizeofOperand	HashTable		139401	1					
ANR	139422	ExpressionStatement	"zend_hash_init ( EG ( zend_constants ) , 128 , NULL , ZEND_CONSTANT_DTOR , 1 )"	109:1:3079:3147	139401	1	True				
ANR	139423	CallExpression	"zend_hash_init ( EG ( zend_constants ) , 128 , NULL , ZEND_CONSTANT_DTOR , 1 )"		139401	0					
ANR	139424	Callee	zend_hash_init		139401	0					
ANR	139425	Identifier	zend_hash_init		139401	0					
ANR	139426	ArgumentList	EG ( zend_constants )		139401	1					
ANR	139427	Argument	EG ( zend_constants )		139401	0					
ANR	139428	CallExpression	EG ( zend_constants )		139401	0					
ANR	139429	Callee	EG		139401	0					
ANR	139430	Identifier	EG		139401	0					
ANR	139431	ArgumentList	zend_constants		139401	1					
ANR	139432	Argument	zend_constants		139401	0					
ANR	139433	Identifier	zend_constants		139401	0					
ANR	139434	Argument	128		139401	1					
ANR	139435	PrimaryExpression	128		139401	0					
ANR	139436	Argument	NULL		139401	2					
ANR	139437	Identifier	NULL		139401	0					
ANR	139438	Argument	ZEND_CONSTANT_DTOR		139401	3					
ANR	139439	Identifier	ZEND_CONSTANT_DTOR		139401	0					
ANR	139440	Argument	1		139401	4					
ANR	139441	PrimaryExpression	1		139401	0					
ANR	139442	ReturnStatement	return SUCCESS ;	110:1:3150:3164	139401	2	True				
ANR	139443	Identifier	SUCCESS		139401	0					
ANR	139444	ReturnType	int		139401	1					
ANR	139445	Identifier	zend_startup_constants		139401	2					
ANR	139446	ParameterList			139401	3					
ANR	139447	CFGEntryNode	ENTRY		139401		True				
ANR	139448	CFGExitNode	EXIT		139401		True				
ANR	139449	Symbol	malloc		139401						
ANR	139450	Symbol	EG		139401						
ANR	139451	Symbol	NULL		139401						
ANR	139452	Symbol	SUCCESS		139401						
ANR	139453	Symbol	zend_constants		139401						
ANR	139454	Symbol	ZEND_CONSTANT_DTOR		139401						
ANR	139455	Function	zend_register_standard_constants	115:0:3171:5322							
ANR	139456	FunctionDef	zend_register_standard_constants ()		139455	0					
ANR	139457	CompoundStatement		116:0:3215:5322	139455	0					
ANR	139458	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_ERROR"" , E_ERROR , CONST_PERSISTENT | CONST_CS )"	117:1:3218:3294	139455	0	True				
ANR	139459	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_ERROR"" , E_ERROR , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139460	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139461	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139462	ArgumentList	"""E_ERROR"""		139455	1					
ANR	139463	Argument	"""E_ERROR"""		139455	0					
ANR	139464	PrimaryExpression	"""E_ERROR"""		139455	0					
ANR	139465	Argument	E_ERROR		139455	1					
ANR	139466	Identifier	E_ERROR		139455	0					
ANR	139467	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139468	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139469	Identifier	CONST_PERSISTENT		139455	0					
ANR	139470	Identifier	CONST_CS		139455	1					
ANR	139471	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_RECOVERABLE_ERROR"" , E_RECOVERABLE_ERROR , CONST_PERSISTENT | CONST_CS )"	118:1:3297:3397	139455	1	True				
ANR	139472	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_RECOVERABLE_ERROR"" , E_RECOVERABLE_ERROR , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139473	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139474	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139475	ArgumentList	"""E_RECOVERABLE_ERROR"""		139455	1					
ANR	139476	Argument	"""E_RECOVERABLE_ERROR"""		139455	0					
ANR	139477	PrimaryExpression	"""E_RECOVERABLE_ERROR"""		139455	0					
ANR	139478	Argument	E_RECOVERABLE_ERROR		139455	1					
ANR	139479	Identifier	E_RECOVERABLE_ERROR		139455	0					
ANR	139480	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139481	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139482	Identifier	CONST_PERSISTENT		139455	0					
ANR	139483	Identifier	CONST_CS		139455	1					
ANR	139484	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_WARNING"" , E_WARNING , CONST_PERSISTENT | CONST_CS )"	119:1:3400:3480	139455	2	True				
ANR	139485	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_WARNING"" , E_WARNING , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139486	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139487	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139488	ArgumentList	"""E_WARNING"""		139455	1					
ANR	139489	Argument	"""E_WARNING"""		139455	0					
ANR	139490	PrimaryExpression	"""E_WARNING"""		139455	0					
ANR	139491	Argument	E_WARNING		139455	1					
ANR	139492	Identifier	E_WARNING		139455	0					
ANR	139493	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139494	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139495	Identifier	CONST_PERSISTENT		139455	0					
ANR	139496	Identifier	CONST_CS		139455	1					
ANR	139497	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_PARSE"" , E_PARSE , CONST_PERSISTENT | CONST_CS )"	120:1:3483:3559	139455	3	True				
ANR	139498	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_PARSE"" , E_PARSE , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139499	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139500	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139501	ArgumentList	"""E_PARSE"""		139455	1					
ANR	139502	Argument	"""E_PARSE"""		139455	0					
ANR	139503	PrimaryExpression	"""E_PARSE"""		139455	0					
ANR	139504	Argument	E_PARSE		139455	1					
ANR	139505	Identifier	E_PARSE		139455	0					
ANR	139506	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139507	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139508	Identifier	CONST_PERSISTENT		139455	0					
ANR	139509	Identifier	CONST_CS		139455	1					
ANR	139510	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_NOTICE"" , E_NOTICE , CONST_PERSISTENT | CONST_CS )"	121:1:3562:3640	139455	4	True				
ANR	139511	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_NOTICE"" , E_NOTICE , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139512	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139513	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139514	ArgumentList	"""E_NOTICE"""		139455	1					
ANR	139515	Argument	"""E_NOTICE"""		139455	0					
ANR	139516	PrimaryExpression	"""E_NOTICE"""		139455	0					
ANR	139517	Argument	E_NOTICE		139455	1					
ANR	139518	Identifier	E_NOTICE		139455	0					
ANR	139519	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139520	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139521	Identifier	CONST_PERSISTENT		139455	0					
ANR	139522	Identifier	CONST_CS		139455	1					
ANR	139523	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_STRICT"" , E_STRICT , CONST_PERSISTENT | CONST_CS )"	122:1:3643:3721	139455	5	True				
ANR	139524	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_STRICT"" , E_STRICT , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139525	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139526	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139527	ArgumentList	"""E_STRICT"""		139455	1					
ANR	139528	Argument	"""E_STRICT"""		139455	0					
ANR	139529	PrimaryExpression	"""E_STRICT"""		139455	0					
ANR	139530	Argument	E_STRICT		139455	1					
ANR	139531	Identifier	E_STRICT		139455	0					
ANR	139532	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139533	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139534	Identifier	CONST_PERSISTENT		139455	0					
ANR	139535	Identifier	CONST_CS		139455	1					
ANR	139536	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_DEPRECATED"" , E_DEPRECATED , CONST_PERSISTENT | CONST_CS )"	123:1:3724:3810	139455	6	True				
ANR	139537	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_DEPRECATED"" , E_DEPRECATED , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139538	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139539	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139540	ArgumentList	"""E_DEPRECATED"""		139455	1					
ANR	139541	Argument	"""E_DEPRECATED"""		139455	0					
ANR	139542	PrimaryExpression	"""E_DEPRECATED"""		139455	0					
ANR	139543	Argument	E_DEPRECATED		139455	1					
ANR	139544	Identifier	E_DEPRECATED		139455	0					
ANR	139545	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139546	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139547	Identifier	CONST_PERSISTENT		139455	0					
ANR	139548	Identifier	CONST_CS		139455	1					
ANR	139549	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_CORE_ERROR"" , E_CORE_ERROR , CONST_PERSISTENT | CONST_CS )"	124:1:3813:3899	139455	7	True				
ANR	139550	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_CORE_ERROR"" , E_CORE_ERROR , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139551	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139552	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139553	ArgumentList	"""E_CORE_ERROR"""		139455	1					
ANR	139554	Argument	"""E_CORE_ERROR"""		139455	0					
ANR	139555	PrimaryExpression	"""E_CORE_ERROR"""		139455	0					
ANR	139556	Argument	E_CORE_ERROR		139455	1					
ANR	139557	Identifier	E_CORE_ERROR		139455	0					
ANR	139558	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139559	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139560	Identifier	CONST_PERSISTENT		139455	0					
ANR	139561	Identifier	CONST_CS		139455	1					
ANR	139562	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_CORE_WARNING"" , E_CORE_WARNING , CONST_PERSISTENT | CONST_CS )"	125:1:3902:3992	139455	8	True				
ANR	139563	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_CORE_WARNING"" , E_CORE_WARNING , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139564	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139565	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139566	ArgumentList	"""E_CORE_WARNING"""		139455	1					
ANR	139567	Argument	"""E_CORE_WARNING"""		139455	0					
ANR	139568	PrimaryExpression	"""E_CORE_WARNING"""		139455	0					
ANR	139569	Argument	E_CORE_WARNING		139455	1					
ANR	139570	Identifier	E_CORE_WARNING		139455	0					
ANR	139571	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139572	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139573	Identifier	CONST_PERSISTENT		139455	0					
ANR	139574	Identifier	CONST_CS		139455	1					
ANR	139575	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_COMPILE_ERROR"" , E_COMPILE_ERROR , CONST_PERSISTENT | CONST_CS )"	126:1:3995:4087	139455	9	True				
ANR	139576	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_COMPILE_ERROR"" , E_COMPILE_ERROR , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139577	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139578	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139579	ArgumentList	"""E_COMPILE_ERROR"""		139455	1					
ANR	139580	Argument	"""E_COMPILE_ERROR"""		139455	0					
ANR	139581	PrimaryExpression	"""E_COMPILE_ERROR"""		139455	0					
ANR	139582	Argument	E_COMPILE_ERROR		139455	1					
ANR	139583	Identifier	E_COMPILE_ERROR		139455	0					
ANR	139584	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139585	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139586	Identifier	CONST_PERSISTENT		139455	0					
ANR	139587	Identifier	CONST_CS		139455	1					
ANR	139588	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_COMPILE_WARNING"" , E_COMPILE_WARNING , CONST_PERSISTENT | CONST_CS )"	127:1:4090:4186	139455	10	True				
ANR	139589	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_COMPILE_WARNING"" , E_COMPILE_WARNING , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139590	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139591	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139592	ArgumentList	"""E_COMPILE_WARNING"""		139455	1					
ANR	139593	Argument	"""E_COMPILE_WARNING"""		139455	0					
ANR	139594	PrimaryExpression	"""E_COMPILE_WARNING"""		139455	0					
ANR	139595	Argument	E_COMPILE_WARNING		139455	1					
ANR	139596	Identifier	E_COMPILE_WARNING		139455	0					
ANR	139597	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139598	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139599	Identifier	CONST_PERSISTENT		139455	0					
ANR	139600	Identifier	CONST_CS		139455	1					
ANR	139601	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_USER_ERROR"" , E_USER_ERROR , CONST_PERSISTENT | CONST_CS )"	128:1:4189:4275	139455	11	True				
ANR	139602	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_USER_ERROR"" , E_USER_ERROR , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139603	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139604	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139605	ArgumentList	"""E_USER_ERROR"""		139455	1					
ANR	139606	Argument	"""E_USER_ERROR"""		139455	0					
ANR	139607	PrimaryExpression	"""E_USER_ERROR"""		139455	0					
ANR	139608	Argument	E_USER_ERROR		139455	1					
ANR	139609	Identifier	E_USER_ERROR		139455	0					
ANR	139610	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139611	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139612	Identifier	CONST_PERSISTENT		139455	0					
ANR	139613	Identifier	CONST_CS		139455	1					
ANR	139614	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_USER_WARNING"" , E_USER_WARNING , CONST_PERSISTENT | CONST_CS )"	129:1:4278:4368	139455	12	True				
ANR	139615	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_USER_WARNING"" , E_USER_WARNING , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139616	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139617	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139618	ArgumentList	"""E_USER_WARNING"""		139455	1					
ANR	139619	Argument	"""E_USER_WARNING"""		139455	0					
ANR	139620	PrimaryExpression	"""E_USER_WARNING"""		139455	0					
ANR	139621	Argument	E_USER_WARNING		139455	1					
ANR	139622	Identifier	E_USER_WARNING		139455	0					
ANR	139623	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139624	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139625	Identifier	CONST_PERSISTENT		139455	0					
ANR	139626	Identifier	CONST_CS		139455	1					
ANR	139627	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_USER_NOTICE"" , E_USER_NOTICE , CONST_PERSISTENT | CONST_CS )"	130:1:4371:4459	139455	13	True				
ANR	139628	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_USER_NOTICE"" , E_USER_NOTICE , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139629	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139630	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139631	ArgumentList	"""E_USER_NOTICE"""		139455	1					
ANR	139632	Argument	"""E_USER_NOTICE"""		139455	0					
ANR	139633	PrimaryExpression	"""E_USER_NOTICE"""		139455	0					
ANR	139634	Argument	E_USER_NOTICE		139455	1					
ANR	139635	Identifier	E_USER_NOTICE		139455	0					
ANR	139636	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139637	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139638	Identifier	CONST_PERSISTENT		139455	0					
ANR	139639	Identifier	CONST_CS		139455	1					
ANR	139640	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_USER_DEPRECATED"" , E_USER_DEPRECATED , CONST_PERSISTENT | CONST_CS )"	131:1:4462:4558	139455	14	True				
ANR	139641	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_USER_DEPRECATED"" , E_USER_DEPRECATED , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139642	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139643	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139644	ArgumentList	"""E_USER_DEPRECATED"""		139455	1					
ANR	139645	Argument	"""E_USER_DEPRECATED"""		139455	0					
ANR	139646	PrimaryExpression	"""E_USER_DEPRECATED"""		139455	0					
ANR	139647	Argument	E_USER_DEPRECATED		139455	1					
ANR	139648	Identifier	E_USER_DEPRECATED		139455	0					
ANR	139649	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139650	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139651	Identifier	CONST_PERSISTENT		139455	0					
ANR	139652	Identifier	CONST_CS		139455	1					
ANR	139653	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""E_ALL"" , E_ALL , CONST_PERSISTENT | CONST_CS )"	133:1:4562:4634	139455	15	True				
ANR	139654	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""E_ALL"" , E_ALL , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139655	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139656	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139657	ArgumentList	"""E_ALL"""		139455	1					
ANR	139658	Argument	"""E_ALL"""		139455	0					
ANR	139659	PrimaryExpression	"""E_ALL"""		139455	0					
ANR	139660	Argument	E_ALL		139455	1					
ANR	139661	Identifier	E_ALL		139455	0					
ANR	139662	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139663	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139664	Identifier	CONST_PERSISTENT		139455	0					
ANR	139665	Identifier	CONST_CS		139455	1					
ANR	139666	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""DEBUG_BACKTRACE_PROVIDE_OBJECT"" , DEBUG_BACKTRACE_PROVIDE_OBJECT , CONST_PERSISTENT | CONST_CS )"	135:1:4638:4760	139455	16	True				
ANR	139667	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""DEBUG_BACKTRACE_PROVIDE_OBJECT"" , DEBUG_BACKTRACE_PROVIDE_OBJECT , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139668	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139669	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139670	ArgumentList	"""DEBUG_BACKTRACE_PROVIDE_OBJECT"""		139455	1					
ANR	139671	Argument	"""DEBUG_BACKTRACE_PROVIDE_OBJECT"""		139455	0					
ANR	139672	PrimaryExpression	"""DEBUG_BACKTRACE_PROVIDE_OBJECT"""		139455	0					
ANR	139673	Argument	DEBUG_BACKTRACE_PROVIDE_OBJECT		139455	1					
ANR	139674	Identifier	DEBUG_BACKTRACE_PROVIDE_OBJECT		139455	0					
ANR	139675	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139676	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139677	Identifier	CONST_PERSISTENT		139455	0					
ANR	139678	Identifier	CONST_CS		139455	1					
ANR	139679	ExpressionStatement	"REGISTER_MAIN_LONG_CONSTANT ( ""DEBUG_BACKTRACE_IGNORE_ARGS"" , DEBUG_BACKTRACE_IGNORE_ARGS , CONST_PERSISTENT | CONST_CS )"	136:1:4763:4879	139455	17	True				
ANR	139680	CallExpression	"REGISTER_MAIN_LONG_CONSTANT ( ""DEBUG_BACKTRACE_IGNORE_ARGS"" , DEBUG_BACKTRACE_IGNORE_ARGS , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139681	Callee	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139682	Identifier	REGISTER_MAIN_LONG_CONSTANT		139455	0					
ANR	139683	ArgumentList	"""DEBUG_BACKTRACE_IGNORE_ARGS"""		139455	1					
ANR	139684	Argument	"""DEBUG_BACKTRACE_IGNORE_ARGS"""		139455	0					
ANR	139685	PrimaryExpression	"""DEBUG_BACKTRACE_IGNORE_ARGS"""		139455	0					
ANR	139686	Argument	DEBUG_BACKTRACE_IGNORE_ARGS		139455	1					
ANR	139687	Identifier	DEBUG_BACKTRACE_IGNORE_ARGS		139455	0					
ANR	139688	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139689	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139690	Identifier	CONST_PERSISTENT		139455	0					
ANR	139691	Identifier	CONST_CS		139455	1					
ANR	139692	CompoundStatement		23:1:1694:1694	139455	18					
ANR	139693	ExpressionStatement	"REGISTER_MAIN_BOOL_CONSTANT ( ""TRUE"" , 1 , CONST_PERSISTENT | CONST_CT_SUBST )"	139:2:4914:4987	139455	0	True				
ANR	139694	CallExpression	"REGISTER_MAIN_BOOL_CONSTANT ( ""TRUE"" , 1 , CONST_PERSISTENT | CONST_CT_SUBST )"		139455	0					
ANR	139695	Callee	REGISTER_MAIN_BOOL_CONSTANT		139455	0					
ANR	139696	Identifier	REGISTER_MAIN_BOOL_CONSTANT		139455	0					
ANR	139697	ArgumentList	"""TRUE"""		139455	1					
ANR	139698	Argument	"""TRUE"""		139455	0					
ANR	139699	PrimaryExpression	"""TRUE"""		139455	0					
ANR	139700	Argument	1		139455	1					
ANR	139701	PrimaryExpression	1		139455	0					
ANR	139702	Argument	CONST_PERSISTENT | CONST_CT_SUBST		139455	2					
ANR	139703	InclusiveOrExpression	CONST_PERSISTENT | CONST_CT_SUBST		139455	0		|			
ANR	139704	Identifier	CONST_PERSISTENT		139455	0					
ANR	139705	Identifier	CONST_CT_SUBST		139455	1					
ANR	139706	ExpressionStatement	"REGISTER_MAIN_BOOL_CONSTANT ( ""FALSE"" , 0 , CONST_PERSISTENT | CONST_CT_SUBST )"	140:2:4991:5065	139455	1	True				
ANR	139707	CallExpression	"REGISTER_MAIN_BOOL_CONSTANT ( ""FALSE"" , 0 , CONST_PERSISTENT | CONST_CT_SUBST )"		139455	0					
ANR	139708	Callee	REGISTER_MAIN_BOOL_CONSTANT		139455	0					
ANR	139709	Identifier	REGISTER_MAIN_BOOL_CONSTANT		139455	0					
ANR	139710	ArgumentList	"""FALSE"""		139455	1					
ANR	139711	Argument	"""FALSE"""		139455	0					
ANR	139712	PrimaryExpression	"""FALSE"""		139455	0					
ANR	139713	Argument	0		139455	1					
ANR	139714	PrimaryExpression	0		139455	0					
ANR	139715	Argument	CONST_PERSISTENT | CONST_CT_SUBST		139455	2					
ANR	139716	InclusiveOrExpression	CONST_PERSISTENT | CONST_CT_SUBST		139455	0		|			
ANR	139717	Identifier	CONST_PERSISTENT		139455	0					
ANR	139718	Identifier	CONST_CT_SUBST		139455	1					
ANR	139719	ExpressionStatement	"REGISTER_MAIN_BOOL_CONSTANT ( ""ZEND_THREAD_SAFE"" , ZTS_V , CONST_PERSISTENT | CONST_CS )"	141:2:5069:5152	139455	2	True				
ANR	139720	CallExpression	"REGISTER_MAIN_BOOL_CONSTANT ( ""ZEND_THREAD_SAFE"" , ZTS_V , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139721	Callee	REGISTER_MAIN_BOOL_CONSTANT		139455	0					
ANR	139722	Identifier	REGISTER_MAIN_BOOL_CONSTANT		139455	0					
ANR	139723	ArgumentList	"""ZEND_THREAD_SAFE"""		139455	1					
ANR	139724	Argument	"""ZEND_THREAD_SAFE"""		139455	0					
ANR	139725	PrimaryExpression	"""ZEND_THREAD_SAFE"""		139455	0					
ANR	139726	Argument	ZTS_V		139455	1					
ANR	139727	Identifier	ZTS_V		139455	0					
ANR	139728	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139729	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139730	Identifier	CONST_PERSISTENT		139455	0					
ANR	139731	Identifier	CONST_CS		139455	1					
ANR	139732	ExpressionStatement	"REGISTER_MAIN_BOOL_CONSTANT ( ""ZEND_DEBUG_BUILD"" , ZEND_DEBUG , CONST_PERSISTENT | CONST_CS )"	142:2:5156:5244	139455	3	True				
ANR	139733	CallExpression	"REGISTER_MAIN_BOOL_CONSTANT ( ""ZEND_DEBUG_BUILD"" , ZEND_DEBUG , CONST_PERSISTENT | CONST_CS )"		139455	0					
ANR	139734	Callee	REGISTER_MAIN_BOOL_CONSTANT		139455	0					
ANR	139735	Identifier	REGISTER_MAIN_BOOL_CONSTANT		139455	0					
ANR	139736	ArgumentList	"""ZEND_DEBUG_BUILD"""		139455	1					
ANR	139737	Argument	"""ZEND_DEBUG_BUILD"""		139455	0					
ANR	139738	PrimaryExpression	"""ZEND_DEBUG_BUILD"""		139455	0					
ANR	139739	Argument	ZEND_DEBUG		139455	1					
ANR	139740	Identifier	ZEND_DEBUG		139455	0					
ANR	139741	Argument	CONST_PERSISTENT | CONST_CS		139455	2					
ANR	139742	InclusiveOrExpression	CONST_PERSISTENT | CONST_CS		139455	0		|			
ANR	139743	Identifier	CONST_PERSISTENT		139455	0					
ANR	139744	Identifier	CONST_CS		139455	1					
ANR	139745	ExpressionStatement	"REGISTER_MAIN_NULL_CONSTANT ( ""NULL"" , CONST_PERSISTENT | CONST_CT_SUBST )"	144:1:5250:5320	139455	19	True				
ANR	139746	CallExpression	"REGISTER_MAIN_NULL_CONSTANT ( ""NULL"" , CONST_PERSISTENT | CONST_CT_SUBST )"		139455	0					
ANR	139747	Callee	REGISTER_MAIN_NULL_CONSTANT		139455	0					
ANR	139748	Identifier	REGISTER_MAIN_NULL_CONSTANT		139455	0					
ANR	139749	ArgumentList	"""NULL"""		139455	1					
ANR	139750	Argument	"""NULL"""		139455	0					
ANR	139751	PrimaryExpression	"""NULL"""		139455	0					
ANR	139752	Argument	CONST_PERSISTENT | CONST_CT_SUBST		139455	1					
ANR	139753	InclusiveOrExpression	CONST_PERSISTENT | CONST_CT_SUBST		139455	0		|			
ANR	139754	Identifier	CONST_PERSISTENT		139455	0					
ANR	139755	Identifier	CONST_CT_SUBST		139455	1					
ANR	139756	ReturnType	void		139455	1					
ANR	139757	Identifier	zend_register_standard_constants		139455	2					
ANR	139758	ParameterList			139455	3					
ANR	139759	CFGEntryNode	ENTRY		139455		True				
ANR	139760	CFGExitNode	EXIT		139455		True				
ANR	139761	Symbol	CONST_CT_SUBST		139455						
ANR	139762	Symbol	CONST_CS		139455						
ANR	139763	Symbol	E_RECOVERABLE_ERROR		139455						
ANR	139764	Symbol	E_USER_WARNING		139455						
ANR	139765	Symbol	E_CORE_WARNING		139455						
ANR	139766	Symbol	E_COMPILE_ERROR		139455						
ANR	139767	Symbol	E_PARSE		139455						
ANR	139768	Symbol	E_NOTICE		139455						
ANR	139769	Symbol	E_STRICT		139455						
ANR	139770	Symbol	E_USER_NOTICE		139455						
ANR	139771	Symbol	DEBUG_BACKTRACE_PROVIDE_OBJECT		139455						
ANR	139772	Symbol	ZTS_V		139455						
ANR	139773	Symbol	E_USER_DEPRECATED		139455						
ANR	139774	Symbol	E_WARNING		139455						
ANR	139775	Symbol	E_ERROR		139455						
ANR	139776	Symbol	E_DEPRECATED		139455						
ANR	139777	Symbol	DEBUG_BACKTRACE_IGNORE_ARGS		139455						
ANR	139778	Symbol	E_CORE_ERROR		139455						
ANR	139779	Symbol	ZEND_DEBUG		139455						
ANR	139780	Symbol	E_COMPILE_WARNING		139455						
ANR	139781	Symbol	CONST_PERSISTENT		139455						
ANR	139782	Symbol	E_USER_ERROR		139455						
ANR	139783	Symbol	E_ALL		139455						
ANR	139784	Function	zend_shutdown_constants	148:0:5326:5446							
ANR	139785	FunctionDef	zend_shutdown_constants ()		139784	0					
ANR	139786	CompoundStatement		149:0:5360:5446	139784	0					
ANR	139787	ExpressionStatement	zend_hash_destroy ( EG ( zend_constants ) )	150:1:5363:5400	139784	0	True				
ANR	139788	CallExpression	zend_hash_destroy ( EG ( zend_constants ) )		139784	0					
ANR	139789	Callee	zend_hash_destroy		139784	0					
ANR	139790	Identifier	zend_hash_destroy		139784	0					
ANR	139791	ArgumentList	EG ( zend_constants )		139784	1					
ANR	139792	Argument	EG ( zend_constants )		139784	0					
ANR	139793	CallExpression	EG ( zend_constants )		139784	0					
ANR	139794	Callee	EG		139784	0					
ANR	139795	Identifier	EG		139784	0					
ANR	139796	ArgumentList	zend_constants		139784	1					
ANR	139797	Argument	zend_constants		139784	0					
ANR	139798	Identifier	zend_constants		139784	0					
ANR	139799	ExpressionStatement	free ( EG ( zend_constants ) )	151:1:5403:5427	139784	1	True				
ANR	139800	CallExpression	free ( EG ( zend_constants ) )		139784	0					
ANR	139801	Callee	free		139784	0					
ANR	139802	Identifier	free		139784	0					
ANR	139803	ArgumentList	EG ( zend_constants )		139784	1					
ANR	139804	Argument	EG ( zend_constants )		139784	0					
ANR	139805	CallExpression	EG ( zend_constants )		139784	0					
ANR	139806	Callee	EG		139784	0					
ANR	139807	Identifier	EG		139784	0					
ANR	139808	ArgumentList	zend_constants		139784	1					
ANR	139809	Argument	zend_constants		139784	0					
ANR	139810	Identifier	zend_constants		139784	0					
ANR	139811	ReturnStatement	return SUCCESS ;	152:1:5430:5444	139784	2	True				
ANR	139812	Identifier	SUCCESS		139784	0					
ANR	139813	ReturnType	int		139784	1					
ANR	139814	Identifier	zend_shutdown_constants		139784	2					
ANR	139815	ParameterList			139784	3					
ANR	139816	CFGEntryNode	ENTRY		139784		True				
ANR	139817	CFGExitNode	EXIT		139784		True				
ANR	139818	Symbol	EG		139784						
ANR	139819	Symbol	SUCCESS		139784						
ANR	139820	Symbol	zend_constants		139784						
ANR	139821	Function	clean_non_persistent_constants	156:0:5450:5692							
ANR	139822	FunctionDef	clean_non_persistent_constants ()		139821	0					
ANR	139823	CompoundStatement		157:0:5492:5692	139821	0					
ANR	139824	IfStatement	if ( EG ( full_tables_cleanup ) )		139821	0					
ANR	139825	Condition	EG ( full_tables_cleanup )	158:5:5499:5521	139821	0	True				
ANR	139826	CallExpression	EG ( full_tables_cleanup )		139821	0					
ANR	139827	Callee	EG		139821	0					
ANR	139828	Identifier	EG		139821	0					
ANR	139829	ArgumentList	full_tables_cleanup		139821	1					
ANR	139830	Argument	full_tables_cleanup		139821	0					
ANR	139831	Identifier	full_tables_cleanup		139821	0					
ANR	139832	CompoundStatement		2:30:31:31	139821	1					
ANR	139833	ExpressionStatement	"zend_hash_apply ( EG ( zend_constants ) , clean_non_persistent_constant_full )"	159:2:5528:5599	139821	0	True				
ANR	139834	CallExpression	"zend_hash_apply ( EG ( zend_constants ) , clean_non_persistent_constant_full )"		139821	0					
ANR	139835	Callee	zend_hash_apply		139821	0					
ANR	139836	Identifier	zend_hash_apply		139821	0					
ANR	139837	ArgumentList	EG ( zend_constants )		139821	1					
ANR	139838	Argument	EG ( zend_constants )		139821	0					
ANR	139839	CallExpression	EG ( zend_constants )		139821	0					
ANR	139840	Callee	EG		139821	0					
ANR	139841	Identifier	EG		139821	0					
ANR	139842	ArgumentList	zend_constants		139821	1					
ANR	139843	Argument	zend_constants		139821	0					
ANR	139844	Identifier	zend_constants		139821	0					
ANR	139845	Argument	clean_non_persistent_constant_full		139821	1					
ANR	139846	Identifier	clean_non_persistent_constant_full		139821	0					
ANR	139847	ElseStatement	else		139821	0					
ANR	139848	CompoundStatement		4:8:116:116	139821	0					
ANR	139849	ExpressionStatement	"zend_hash_reverse_apply ( EG ( zend_constants ) , clean_non_persistent_constant )"	161:2:5613:5687	139821	0	True				
ANR	139850	CallExpression	"zend_hash_reverse_apply ( EG ( zend_constants ) , clean_non_persistent_constant )"		139821	0					
ANR	139851	Callee	zend_hash_reverse_apply		139821	0					
ANR	139852	Identifier	zend_hash_reverse_apply		139821	0					
ANR	139853	ArgumentList	EG ( zend_constants )		139821	1					
ANR	139854	Argument	EG ( zend_constants )		139821	0					
ANR	139855	CallExpression	EG ( zend_constants )		139821	0					
ANR	139856	Callee	EG		139821	0					
ANR	139857	Identifier	EG		139821	0					
ANR	139858	ArgumentList	zend_constants		139821	1					
ANR	139859	Argument	zend_constants		139821	0					
ANR	139860	Identifier	zend_constants		139821	0					
ANR	139861	Argument	clean_non_persistent_constant		139821	1					
ANR	139862	Identifier	clean_non_persistent_constant		139821	0					
ANR	139863	ReturnType	void		139821	1					
ANR	139864	Identifier	clean_non_persistent_constants		139821	2					
ANR	139865	ParameterList			139821	3					
ANR	139866	CFGEntryNode	ENTRY		139821		True				
ANR	139867	CFGExitNode	EXIT		139821		True				
ANR	139868	Symbol	clean_non_persistent_constant		139821						
ANR	139869	Symbol	EG		139821						
ANR	139870	Symbol	full_tables_cleanup		139821						
ANR	139871	Symbol	clean_non_persistent_constant_full		139821						
ANR	139872	Symbol	zend_constants		139821						
ANR	139873	Function	zend_register_null_constant	165:0:5695:5996							
ANR	139874	FunctionDef	"zend_register_null_constant (const char * name , size_t name_len , int flags , int module_number)"		139873	0					
ANR	139875	CompoundStatement		166:0:5802:5996	139873	0					
ANR	139876	IdentifierDeclStatement	zend_constant c ;	167:1:5805:5820	139873	0	True				
ANR	139877	IdentifierDecl	c		139873	0					
ANR	139878	IdentifierDeclType	zend_constant		139873	0					
ANR	139879	Identifier	c		139873	1					
ANR	139880	ExpressionStatement	ZVAL_NULL ( & c . value )	169:1:5824:5843	139873	1	True				
ANR	139881	CallExpression	ZVAL_NULL ( & c . value )		139873	0					
ANR	139882	Callee	ZVAL_NULL		139873	0					
ANR	139883	Identifier	ZVAL_NULL		139873	0					
ANR	139884	ArgumentList	& c . value		139873	1					
ANR	139885	Argument	& c . value		139873	0					
ANR	139886	UnaryOperationExpression	& c . value		139873	0					
ANR	139887	UnaryOperator	&		139873	0					
ANR	139888	MemberAccess	c . value		139873	1					
ANR	139889	Identifier	c		139873	0					
ANR	139890	Identifier	value		139873	1					
ANR	139891	ExpressionStatement	c . flags = flags	170:1:5846:5861	139873	2	True				
ANR	139892	AssignmentExpression	c . flags = flags		139873	0		=			
ANR	139893	MemberAccess	c . flags		139873	0					
ANR	139894	Identifier	c		139873	0					
ANR	139895	Identifier	flags		139873	1					
ANR	139896	Identifier	flags		139873	1					
ANR	139897	ExpressionStatement	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"	171:1:5864:5931	139873	3	True				
ANR	139898	AssignmentExpression	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		139873	0		=			
ANR	139899	MemberAccess	c . name		139873	0					
ANR	139900	Identifier	c		139873	0					
ANR	139901	Identifier	name		139873	1					
ANR	139902	CallExpression	"zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		139873	1					
ANR	139903	Callee	zend_string_init		139873	0					
ANR	139904	Identifier	zend_string_init		139873	0					
ANR	139905	ArgumentList	name		139873	1					
ANR	139906	Argument	name		139873	0					
ANR	139907	Identifier	name		139873	0					
ANR	139908	Argument	name_len		139873	1					
ANR	139909	Identifier	name_len		139873	0					
ANR	139910	Argument	flags & CONST_PERSISTENT		139873	2					
ANR	139911	BitAndExpression	flags & CONST_PERSISTENT		139873	0		&			
ANR	139912	Identifier	flags		139873	0					
ANR	139913	Identifier	CONST_PERSISTENT		139873	1					
ANR	139914	ExpressionStatement	c . module_number = module_number	172:1:5934:5965	139873	4	True				
ANR	139915	AssignmentExpression	c . module_number = module_number		139873	0		=			
ANR	139916	MemberAccess	c . module_number		139873	0					
ANR	139917	Identifier	c		139873	0					
ANR	139918	Identifier	module_number		139873	1					
ANR	139919	Identifier	module_number		139873	1					
ANR	139920	ExpressionStatement	zend_register_constant ( & c )	173:1:5968:5994	139873	5	True				
ANR	139921	CallExpression	zend_register_constant ( & c )		139873	0					
ANR	139922	Callee	zend_register_constant		139873	0					
ANR	139923	Identifier	zend_register_constant		139873	0					
ANR	139924	ArgumentList	& c		139873	1					
ANR	139925	Argument	& c		139873	0					
ANR	139926	UnaryOperationExpression	& c		139873	0					
ANR	139927	UnaryOperator	&		139873	0					
ANR	139928	Identifier	c		139873	1					
ANR	139929	ReturnType	ZEND_API void		139873	1					
ANR	139930	Identifier	zend_register_null_constant		139873	2					
ANR	139931	ParameterList	"const char * name , size_t name_len , int flags , int module_number"		139873	3					
ANR	139932	Parameter	const char * name	165:42:5737:5752	139873	0	True				
ANR	139933	ParameterType	const char *		139873	0					
ANR	139934	Identifier	name		139873	1					
ANR	139935	Parameter	size_t name_len	165:60:5755:5769	139873	1	True				
ANR	139936	ParameterType	size_t		139873	0					
ANR	139937	Identifier	name_len		139873	1					
ANR	139938	Parameter	int flags	165:77:5772:5780	139873	2	True				
ANR	139939	ParameterType	int		139873	0					
ANR	139940	Identifier	flags		139873	1					
ANR	139941	Parameter	int module_number	165:88:5783:5799	139873	3	True				
ANR	139942	ParameterType	int		139873	0					
ANR	139943	Identifier	module_number		139873	1					
ANR	139944	CFGEntryNode	ENTRY		139873		True				
ANR	139945	CFGExitNode	EXIT		139873		True				
ANR	139946	Symbol	zend_string_init		139873						
ANR	139947	Symbol	c		139873						
ANR	139948	Symbol	c . module_number		139873						
ANR	139949	Symbol	name		139873						
ANR	139950	Symbol	flags		139873						
ANR	139951	Symbol	module_number		139873						
ANR	139952	Symbol	& c		139873						
ANR	139953	Symbol	name_len		139873						
ANR	139954	Symbol	& c . value		139873						
ANR	139955	Symbol	c . name		139873						
ANR	139956	Symbol	CONST_PERSISTENT		139873						
ANR	139957	Symbol	c . flags		139873						
ANR	139958	Function	zend_register_bool_constant	176:0:5999:6322							
ANR	139959	FunctionDef	"zend_register_bool_constant (const char * name , size_t name_len , zend_bool bval , int flags , int module_number)"		139958	0					
ANR	139960	CompoundStatement		177:0:6122:6322	139958	0					
ANR	139961	IdentifierDeclStatement	zend_constant c ;	178:1:6125:6140	139958	0	True				
ANR	139962	IdentifierDecl	c		139958	0					
ANR	139963	IdentifierDeclType	zend_constant		139958	0					
ANR	139964	Identifier	c		139958	1					
ANR	139965	ExpressionStatement	"ZVAL_BOOL ( & c . value , bval )"	180:1:6144:6169	139958	1	True				
ANR	139966	CallExpression	"ZVAL_BOOL ( & c . value , bval )"		139958	0					
ANR	139967	Callee	ZVAL_BOOL		139958	0					
ANR	139968	Identifier	ZVAL_BOOL		139958	0					
ANR	139969	ArgumentList	& c . value		139958	1					
ANR	139970	Argument	& c . value		139958	0					
ANR	139971	UnaryOperationExpression	& c . value		139958	0					
ANR	139972	UnaryOperator	&		139958	0					
ANR	139973	MemberAccess	c . value		139958	1					
ANR	139974	Identifier	c		139958	0					
ANR	139975	Identifier	value		139958	1					
ANR	139976	Argument	bval		139958	1					
ANR	139977	Identifier	bval		139958	0					
ANR	139978	ExpressionStatement	c . flags = flags	181:1:6172:6187	139958	2	True				
ANR	139979	AssignmentExpression	c . flags = flags		139958	0		=			
ANR	139980	MemberAccess	c . flags		139958	0					
ANR	139981	Identifier	c		139958	0					
ANR	139982	Identifier	flags		139958	1					
ANR	139983	Identifier	flags		139958	1					
ANR	139984	ExpressionStatement	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"	182:1:6190:6257	139958	3	True				
ANR	139985	AssignmentExpression	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		139958	0		=			
ANR	139986	MemberAccess	c . name		139958	0					
ANR	139987	Identifier	c		139958	0					
ANR	139988	Identifier	name		139958	1					
ANR	139989	CallExpression	"zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		139958	1					
ANR	139990	Callee	zend_string_init		139958	0					
ANR	139991	Identifier	zend_string_init		139958	0					
ANR	139992	ArgumentList	name		139958	1					
ANR	139993	Argument	name		139958	0					
ANR	139994	Identifier	name		139958	0					
ANR	139995	Argument	name_len		139958	1					
ANR	139996	Identifier	name_len		139958	0					
ANR	139997	Argument	flags & CONST_PERSISTENT		139958	2					
ANR	139998	BitAndExpression	flags & CONST_PERSISTENT		139958	0		&			
ANR	139999	Identifier	flags		139958	0					
ANR	140000	Identifier	CONST_PERSISTENT		139958	1					
ANR	140001	ExpressionStatement	c . module_number = module_number	183:1:6260:6291	139958	4	True				
ANR	140002	AssignmentExpression	c . module_number = module_number		139958	0		=			
ANR	140003	MemberAccess	c . module_number		139958	0					
ANR	140004	Identifier	c		139958	0					
ANR	140005	Identifier	module_number		139958	1					
ANR	140006	Identifier	module_number		139958	1					
ANR	140007	ExpressionStatement	zend_register_constant ( & c )	184:1:6294:6320	139958	5	True				
ANR	140008	CallExpression	zend_register_constant ( & c )		139958	0					
ANR	140009	Callee	zend_register_constant		139958	0					
ANR	140010	Identifier	zend_register_constant		139958	0					
ANR	140011	ArgumentList	& c		139958	1					
ANR	140012	Argument	& c		139958	0					
ANR	140013	UnaryOperationExpression	& c		139958	0					
ANR	140014	UnaryOperator	&		139958	0					
ANR	140015	Identifier	c		139958	1					
ANR	140016	ReturnType	ZEND_API void		139958	1					
ANR	140017	Identifier	zend_register_bool_constant		139958	2					
ANR	140018	ParameterList	"const char * name , size_t name_len , zend_bool bval , int flags , int module_number"		139958	3					
ANR	140019	Parameter	const char * name	176:42:6041:6056	139958	0	True				
ANR	140020	ParameterType	const char *		139958	0					
ANR	140021	Identifier	name		139958	1					
ANR	140022	Parameter	size_t name_len	176:60:6059:6073	139958	1	True				
ANR	140023	ParameterType	size_t		139958	0					
ANR	140024	Identifier	name_len		139958	1					
ANR	140025	Parameter	zend_bool bval	176:77:6076:6089	139958	2	True				
ANR	140026	ParameterType	zend_bool		139958	0					
ANR	140027	Identifier	bval		139958	1					
ANR	140028	Parameter	int flags	176:93:6092:6100	139958	3	True				
ANR	140029	ParameterType	int		139958	0					
ANR	140030	Identifier	flags		139958	1					
ANR	140031	Parameter	int module_number	176:104:6103:6119	139958	4	True				
ANR	140032	ParameterType	int		139958	0					
ANR	140033	Identifier	module_number		139958	1					
ANR	140034	CFGEntryNode	ENTRY		139958		True				
ANR	140035	CFGExitNode	EXIT		139958		True				
ANR	140036	Symbol	c		139958						
ANR	140037	Symbol	c . module_number		139958						
ANR	140038	Symbol	flags		139958						
ANR	140039	Symbol	module_number		139958						
ANR	140040	Symbol	& c		139958						
ANR	140041	Symbol	& c . value		139958						
ANR	140042	Symbol	c . name		139958						
ANR	140043	Symbol	bval		139958						
ANR	140044	Symbol	zend_string_init		139958						
ANR	140045	Symbol	name		139958						
ANR	140046	Symbol	name_len		139958						
ANR	140047	Symbol	CONST_PERSISTENT		139958						
ANR	140048	Symbol	c . flags		139958						
ANR	140049	Function	zend_register_long_constant	187:0:6325:6648							
ANR	140050	FunctionDef	"zend_register_long_constant (const char * name , size_t name_len , zend_long lval , int flags , int module_number)"		140049	0					
ANR	140051	CompoundStatement		188:0:6448:6648	140049	0					
ANR	140052	IdentifierDeclStatement	zend_constant c ;	189:1:6451:6466	140049	0	True				
ANR	140053	IdentifierDecl	c		140049	0					
ANR	140054	IdentifierDeclType	zend_constant		140049	0					
ANR	140055	Identifier	c		140049	1					
ANR	140056	ExpressionStatement	"ZVAL_LONG ( & c . value , lval )"	191:1:6470:6495	140049	1	True				
ANR	140057	CallExpression	"ZVAL_LONG ( & c . value , lval )"		140049	0					
ANR	140058	Callee	ZVAL_LONG		140049	0					
ANR	140059	Identifier	ZVAL_LONG		140049	0					
ANR	140060	ArgumentList	& c . value		140049	1					
ANR	140061	Argument	& c . value		140049	0					
ANR	140062	UnaryOperationExpression	& c . value		140049	0					
ANR	140063	UnaryOperator	&		140049	0					
ANR	140064	MemberAccess	c . value		140049	1					
ANR	140065	Identifier	c		140049	0					
ANR	140066	Identifier	value		140049	1					
ANR	140067	Argument	lval		140049	1					
ANR	140068	Identifier	lval		140049	0					
ANR	140069	ExpressionStatement	c . flags = flags	192:1:6498:6513	140049	2	True				
ANR	140070	AssignmentExpression	c . flags = flags		140049	0		=			
ANR	140071	MemberAccess	c . flags		140049	0					
ANR	140072	Identifier	c		140049	0					
ANR	140073	Identifier	flags		140049	1					
ANR	140074	Identifier	flags		140049	1					
ANR	140075	ExpressionStatement	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"	193:1:6516:6583	140049	3	True				
ANR	140076	AssignmentExpression	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		140049	0		=			
ANR	140077	MemberAccess	c . name		140049	0					
ANR	140078	Identifier	c		140049	0					
ANR	140079	Identifier	name		140049	1					
ANR	140080	CallExpression	"zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		140049	1					
ANR	140081	Callee	zend_string_init		140049	0					
ANR	140082	Identifier	zend_string_init		140049	0					
ANR	140083	ArgumentList	name		140049	1					
ANR	140084	Argument	name		140049	0					
ANR	140085	Identifier	name		140049	0					
ANR	140086	Argument	name_len		140049	1					
ANR	140087	Identifier	name_len		140049	0					
ANR	140088	Argument	flags & CONST_PERSISTENT		140049	2					
ANR	140089	BitAndExpression	flags & CONST_PERSISTENT		140049	0		&			
ANR	140090	Identifier	flags		140049	0					
ANR	140091	Identifier	CONST_PERSISTENT		140049	1					
ANR	140092	ExpressionStatement	c . module_number = module_number	194:1:6586:6617	140049	4	True				
ANR	140093	AssignmentExpression	c . module_number = module_number		140049	0		=			
ANR	140094	MemberAccess	c . module_number		140049	0					
ANR	140095	Identifier	c		140049	0					
ANR	140096	Identifier	module_number		140049	1					
ANR	140097	Identifier	module_number		140049	1					
ANR	140098	ExpressionStatement	zend_register_constant ( & c )	195:1:6620:6646	140049	5	True				
ANR	140099	CallExpression	zend_register_constant ( & c )		140049	0					
ANR	140100	Callee	zend_register_constant		140049	0					
ANR	140101	Identifier	zend_register_constant		140049	0					
ANR	140102	ArgumentList	& c		140049	1					
ANR	140103	Argument	& c		140049	0					
ANR	140104	UnaryOperationExpression	& c		140049	0					
ANR	140105	UnaryOperator	&		140049	0					
ANR	140106	Identifier	c		140049	1					
ANR	140107	ReturnType	ZEND_API void		140049	1					
ANR	140108	Identifier	zend_register_long_constant		140049	2					
ANR	140109	ParameterList	"const char * name , size_t name_len , zend_long lval , int flags , int module_number"		140049	3					
ANR	140110	Parameter	const char * name	187:42:6367:6382	140049	0	True				
ANR	140111	ParameterType	const char *		140049	0					
ANR	140112	Identifier	name		140049	1					
ANR	140113	Parameter	size_t name_len	187:60:6385:6399	140049	1	True				
ANR	140114	ParameterType	size_t		140049	0					
ANR	140115	Identifier	name_len		140049	1					
ANR	140116	Parameter	zend_long lval	187:77:6402:6415	140049	2	True				
ANR	140117	ParameterType	zend_long		140049	0					
ANR	140118	Identifier	lval		140049	1					
ANR	140119	Parameter	int flags	187:93:6418:6426	140049	3	True				
ANR	140120	ParameterType	int		140049	0					
ANR	140121	Identifier	flags		140049	1					
ANR	140122	Parameter	int module_number	187:104:6429:6445	140049	4	True				
ANR	140123	ParameterType	int		140049	0					
ANR	140124	Identifier	module_number		140049	1					
ANR	140125	CFGEntryNode	ENTRY		140049		True				
ANR	140126	CFGExitNode	EXIT		140049		True				
ANR	140127	Symbol	c		140049						
ANR	140128	Symbol	c . module_number		140049						
ANR	140129	Symbol	lval		140049						
ANR	140130	Symbol	flags		140049						
ANR	140131	Symbol	module_number		140049						
ANR	140132	Symbol	& c		140049						
ANR	140133	Symbol	& c . value		140049						
ANR	140134	Symbol	c . name		140049						
ANR	140135	Symbol	zend_string_init		140049						
ANR	140136	Symbol	name		140049						
ANR	140137	Symbol	name_len		140049						
ANR	140138	Symbol	CONST_PERSISTENT		140049						
ANR	140139	Symbol	c . flags		140049						
ANR	140140	Function	zend_register_double_constant	199:0:6652:6976							
ANR	140141	FunctionDef	"zend_register_double_constant (const char * name , size_t name_len , double dval , int flags , int module_number)"		140140	0					
ANR	140142	CompoundStatement		200:0:6774:6976	140140	0					
ANR	140143	IdentifierDeclStatement	zend_constant c ;	201:1:6777:6792	140140	0	True				
ANR	140144	IdentifierDecl	c		140140	0					
ANR	140145	IdentifierDeclType	zend_constant		140140	0					
ANR	140146	Identifier	c		140140	1					
ANR	140147	ExpressionStatement	"ZVAL_DOUBLE ( & c . value , dval )"	203:1:6796:6823	140140	1	True				
ANR	140148	CallExpression	"ZVAL_DOUBLE ( & c . value , dval )"		140140	0					
ANR	140149	Callee	ZVAL_DOUBLE		140140	0					
ANR	140150	Identifier	ZVAL_DOUBLE		140140	0					
ANR	140151	ArgumentList	& c . value		140140	1					
ANR	140152	Argument	& c . value		140140	0					
ANR	140153	UnaryOperationExpression	& c . value		140140	0					
ANR	140154	UnaryOperator	&		140140	0					
ANR	140155	MemberAccess	c . value		140140	1					
ANR	140156	Identifier	c		140140	0					
ANR	140157	Identifier	value		140140	1					
ANR	140158	Argument	dval		140140	1					
ANR	140159	Identifier	dval		140140	0					
ANR	140160	ExpressionStatement	c . flags = flags	204:1:6826:6841	140140	2	True				
ANR	140161	AssignmentExpression	c . flags = flags		140140	0		=			
ANR	140162	MemberAccess	c . flags		140140	0					
ANR	140163	Identifier	c		140140	0					
ANR	140164	Identifier	flags		140140	1					
ANR	140165	Identifier	flags		140140	1					
ANR	140166	ExpressionStatement	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"	205:1:6844:6911	140140	3	True				
ANR	140167	AssignmentExpression	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		140140	0		=			
ANR	140168	MemberAccess	c . name		140140	0					
ANR	140169	Identifier	c		140140	0					
ANR	140170	Identifier	name		140140	1					
ANR	140171	CallExpression	"zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		140140	1					
ANR	140172	Callee	zend_string_init		140140	0					
ANR	140173	Identifier	zend_string_init		140140	0					
ANR	140174	ArgumentList	name		140140	1					
ANR	140175	Argument	name		140140	0					
ANR	140176	Identifier	name		140140	0					
ANR	140177	Argument	name_len		140140	1					
ANR	140178	Identifier	name_len		140140	0					
ANR	140179	Argument	flags & CONST_PERSISTENT		140140	2					
ANR	140180	BitAndExpression	flags & CONST_PERSISTENT		140140	0		&			
ANR	140181	Identifier	flags		140140	0					
ANR	140182	Identifier	CONST_PERSISTENT		140140	1					
ANR	140183	ExpressionStatement	c . module_number = module_number	206:1:6914:6945	140140	4	True				
ANR	140184	AssignmentExpression	c . module_number = module_number		140140	0		=			
ANR	140185	MemberAccess	c . module_number		140140	0					
ANR	140186	Identifier	c		140140	0					
ANR	140187	Identifier	module_number		140140	1					
ANR	140188	Identifier	module_number		140140	1					
ANR	140189	ExpressionStatement	zend_register_constant ( & c )	207:1:6948:6974	140140	5	True				
ANR	140190	CallExpression	zend_register_constant ( & c )		140140	0					
ANR	140191	Callee	zend_register_constant		140140	0					
ANR	140192	Identifier	zend_register_constant		140140	0					
ANR	140193	ArgumentList	& c		140140	1					
ANR	140194	Argument	& c		140140	0					
ANR	140195	UnaryOperationExpression	& c		140140	0					
ANR	140196	UnaryOperator	&		140140	0					
ANR	140197	Identifier	c		140140	1					
ANR	140198	ReturnType	ZEND_API void		140140	1					
ANR	140199	Identifier	zend_register_double_constant		140140	2					
ANR	140200	ParameterList	"const char * name , size_t name_len , double dval , int flags , int module_number"		140140	3					
ANR	140201	Parameter	const char * name	199:44:6696:6711	140140	0	True				
ANR	140202	ParameterType	const char *		140140	0					
ANR	140203	Identifier	name		140140	1					
ANR	140204	Parameter	size_t name_len	199:62:6714:6728	140140	1	True				
ANR	140205	ParameterType	size_t		140140	0					
ANR	140206	Identifier	name_len		140140	1					
ANR	140207	Parameter	double dval	199:79:6731:6741	140140	2	True				
ANR	140208	ParameterType	double		140140	0					
ANR	140209	Identifier	dval		140140	1					
ANR	140210	Parameter	int flags	199:92:6744:6752	140140	3	True				
ANR	140211	ParameterType	int		140140	0					
ANR	140212	Identifier	flags		140140	1					
ANR	140213	Parameter	int module_number	199:103:6755:6771	140140	4	True				
ANR	140214	ParameterType	int		140140	0					
ANR	140215	Identifier	module_number		140140	1					
ANR	140216	CFGEntryNode	ENTRY		140140		True				
ANR	140217	CFGExitNode	EXIT		140140		True				
ANR	140218	Symbol	c		140140						
ANR	140219	Symbol	c . module_number		140140						
ANR	140220	Symbol	flags		140140						
ANR	140221	Symbol	module_number		140140						
ANR	140222	Symbol	& c		140140						
ANR	140223	Symbol	& c . value		140140						
ANR	140224	Symbol	c . name		140140						
ANR	140225	Symbol	zend_string_init		140140						
ANR	140226	Symbol	dval		140140						
ANR	140227	Symbol	name		140140						
ANR	140228	Symbol	name_len		140140						
ANR	140229	Symbol	CONST_PERSISTENT		140140						
ANR	140230	Symbol	c . flags		140140						
ANR	140231	Function	zend_register_stringl_constant	211:0:6980:7376							
ANR	140232	FunctionDef	"zend_register_stringl_constant (const char * name , size_t name_len , char * strval , size_t strlen , int flags , int module_number)"		140231	0					
ANR	140233	CompoundStatement		212:0:7119:7376	140231	0					
ANR	140234	IdentifierDeclStatement	zend_constant c ;	213:1:7122:7137	140231	0	True				
ANR	140235	IdentifierDecl	c		140231	0					
ANR	140236	IdentifierDeclType	zend_constant		140231	0					
ANR	140237	Identifier	c		140231	1					
ANR	140238	ExpressionStatement	"ZVAL_NEW_STR ( & c . value , zend_string_init ( strval , strlen , flags & CONST_PERSISTENT ) )"	215:1:7141:7223	140231	1	True				
ANR	140239	CallExpression	"ZVAL_NEW_STR ( & c . value , zend_string_init ( strval , strlen , flags & CONST_PERSISTENT ) )"		140231	0					
ANR	140240	Callee	ZVAL_NEW_STR		140231	0					
ANR	140241	Identifier	ZVAL_NEW_STR		140231	0					
ANR	140242	ArgumentList	& c . value		140231	1					
ANR	140243	Argument	& c . value		140231	0					
ANR	140244	UnaryOperationExpression	& c . value		140231	0					
ANR	140245	UnaryOperator	&		140231	0					
ANR	140246	MemberAccess	c . value		140231	1					
ANR	140247	Identifier	c		140231	0					
ANR	140248	Identifier	value		140231	1					
ANR	140249	Argument	"zend_string_init ( strval , strlen , flags & CONST_PERSISTENT )"		140231	1					
ANR	140250	CallExpression	"zend_string_init ( strval , strlen , flags & CONST_PERSISTENT )"		140231	0					
ANR	140251	Callee	zend_string_init		140231	0					
ANR	140252	Identifier	zend_string_init		140231	0					
ANR	140253	ArgumentList	strval		140231	1					
ANR	140254	Argument	strval		140231	0					
ANR	140255	Identifier	strval		140231	0					
ANR	140256	Argument	strlen		140231	1					
ANR	140257	Identifier	strlen		140231	0					
ANR	140258	Argument	flags & CONST_PERSISTENT		140231	2					
ANR	140259	BitAndExpression	flags & CONST_PERSISTENT		140231	0		&			
ANR	140260	Identifier	flags		140231	0					
ANR	140261	Identifier	CONST_PERSISTENT		140231	1					
ANR	140262	ExpressionStatement	c . flags = flags	216:1:7226:7241	140231	2	True				
ANR	140263	AssignmentExpression	c . flags = flags		140231	0		=			
ANR	140264	MemberAccess	c . flags		140231	0					
ANR	140265	Identifier	c		140231	0					
ANR	140266	Identifier	flags		140231	1					
ANR	140267	Identifier	flags		140231	1					
ANR	140268	ExpressionStatement	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"	217:1:7244:7311	140231	3	True				
ANR	140269	AssignmentExpression	"c . name = zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		140231	0		=			
ANR	140270	MemberAccess	c . name		140231	0					
ANR	140271	Identifier	c		140231	0					
ANR	140272	Identifier	name		140231	1					
ANR	140273	CallExpression	"zend_string_init ( name , name_len , flags & CONST_PERSISTENT )"		140231	1					
ANR	140274	Callee	zend_string_init		140231	0					
ANR	140275	Identifier	zend_string_init		140231	0					
ANR	140276	ArgumentList	name		140231	1					
ANR	140277	Argument	name		140231	0					
ANR	140278	Identifier	name		140231	0					
ANR	140279	Argument	name_len		140231	1					
ANR	140280	Identifier	name_len		140231	0					
ANR	140281	Argument	flags & CONST_PERSISTENT		140231	2					
ANR	140282	BitAndExpression	flags & CONST_PERSISTENT		140231	0		&			
ANR	140283	Identifier	flags		140231	0					
ANR	140284	Identifier	CONST_PERSISTENT		140231	1					
ANR	140285	ExpressionStatement	c . module_number = module_number	218:1:7314:7345	140231	4	True				
ANR	140286	AssignmentExpression	c . module_number = module_number		140231	0		=			
ANR	140287	MemberAccess	c . module_number		140231	0					
ANR	140288	Identifier	c		140231	0					
ANR	140289	Identifier	module_number		140231	1					
ANR	140290	Identifier	module_number		140231	1					
ANR	140291	ExpressionStatement	zend_register_constant ( & c )	219:1:7348:7374	140231	5	True				
ANR	140292	CallExpression	zend_register_constant ( & c )		140231	0					
ANR	140293	Callee	zend_register_constant		140231	0					
ANR	140294	Identifier	zend_register_constant		140231	0					
ANR	140295	ArgumentList	& c		140231	1					
ANR	140296	Argument	& c		140231	0					
ANR	140297	UnaryOperationExpression	& c		140231	0					
ANR	140298	UnaryOperator	&		140231	0					
ANR	140299	Identifier	c		140231	1					
ANR	140300	ReturnType	ZEND_API void		140231	1					
ANR	140301	Identifier	zend_register_stringl_constant		140231	2					
ANR	140302	ParameterList	"const char * name , size_t name_len , char * strval , size_t strlen , int flags , int module_number"		140231	3					
ANR	140303	Parameter	const char * name	211:45:7025:7040	140231	0	True				
ANR	140304	ParameterType	const char *		140231	0					
ANR	140305	Identifier	name		140231	1					
ANR	140306	Parameter	size_t name_len	211:63:7043:7057	140231	1	True				
ANR	140307	ParameterType	size_t		140231	0					
ANR	140308	Identifier	name_len		140231	1					
ANR	140309	Parameter	char * strval	211:80:7060:7071	140231	2	True				
ANR	140310	ParameterType	char *		140231	0					
ANR	140311	Identifier	strval		140231	1					
ANR	140312	Parameter	size_t strlen	211:94:7074:7086	140231	3	True				
ANR	140313	ParameterType	size_t		140231	0					
ANR	140314	Identifier	strlen		140231	1					
ANR	140315	Parameter	int flags	211:109:7089:7097	140231	4	True				
ANR	140316	ParameterType	int		140231	0					
ANR	140317	Identifier	flags		140231	1					
ANR	140318	Parameter	int module_number	211:120:7100:7116	140231	5	True				
ANR	140319	ParameterType	int		140231	0					
ANR	140320	Identifier	module_number		140231	1					
ANR	140321	CFGEntryNode	ENTRY		140231		True				
ANR	140322	CFGExitNode	EXIT		140231		True				
ANR	140323	Symbol	c		140231						
ANR	140324	Symbol	strval		140231						
ANR	140325	Symbol	c . module_number		140231						
ANR	140326	Symbol	flags		140231						
ANR	140327	Symbol	module_number		140231						
ANR	140328	Symbol	& c		140231						
ANR	140329	Symbol	& c . value		140231						
ANR	140330	Symbol	c . name		140231						
ANR	140331	Symbol	strlen		140231						
ANR	140332	Symbol	zend_string_init		140231						
ANR	140333	Symbol	name		140231						
ANR	140334	Symbol	name_len		140231						
ANR	140335	Symbol	CONST_PERSISTENT		140231						
ANR	140336	Symbol	c . flags		140231						
ANR	140337	Function	zend_register_string_constant	223:0:7380:7600							
ANR	140338	FunctionDef	"zend_register_string_constant (const char * name , size_t name_len , char * strval , int flags , int module_number)"		140337	0					
ANR	140339	CompoundStatement		224:0:7503:7600	140337	0					
ANR	140340	ExpressionStatement	"zend_register_stringl_constant ( name , name_len , strval , strlen ( strval ) , flags , module_number )"	225:1:7506:7598	140337	0	True				
ANR	140341	CallExpression	"zend_register_stringl_constant ( name , name_len , strval , strlen ( strval ) , flags , module_number )"		140337	0					
ANR	140342	Callee	zend_register_stringl_constant		140337	0					
ANR	140343	Identifier	zend_register_stringl_constant		140337	0					
ANR	140344	ArgumentList	name		140337	1					
ANR	140345	Argument	name		140337	0					
ANR	140346	Identifier	name		140337	0					
ANR	140347	Argument	name_len		140337	1					
ANR	140348	Identifier	name_len		140337	0					
ANR	140349	Argument	strval		140337	2					
ANR	140350	Identifier	strval		140337	0					
ANR	140351	Argument	strlen ( strval )		140337	3					
ANR	140352	CallExpression	strlen ( strval )		140337	0					
ANR	140353	Callee	strlen		140337	0					
ANR	140354	Identifier	strlen		140337	0					
ANR	140355	ArgumentList	strval		140337	1					
ANR	140356	Argument	strval		140337	0					
ANR	140357	Identifier	strval		140337	0					
ANR	140358	Argument	flags		140337	4					
ANR	140359	Identifier	flags		140337	0					
ANR	140360	Argument	module_number		140337	5					
ANR	140361	Identifier	module_number		140337	0					
ANR	140362	ReturnType	ZEND_API void		140337	1					
ANR	140363	Identifier	zend_register_string_constant		140337	2					
ANR	140364	ParameterList	"const char * name , size_t name_len , char * strval , int flags , int module_number"		140337	3					
ANR	140365	Parameter	const char * name	223:44:7424:7439	140337	0	True				
ANR	140366	ParameterType	const char *		140337	0					
ANR	140367	Identifier	name		140337	1					
ANR	140368	Parameter	size_t name_len	223:62:7442:7456	140337	1	True				
ANR	140369	ParameterType	size_t		140337	0					
ANR	140370	Identifier	name_len		140337	1					
ANR	140371	Parameter	char * strval	223:79:7459:7470	140337	2	True				
ANR	140372	ParameterType	char *		140337	0					
ANR	140373	Identifier	strval		140337	1					
ANR	140374	Parameter	int flags	223:93:7473:7481	140337	3	True				
ANR	140375	ParameterType	int		140337	0					
ANR	140376	Identifier	flags		140337	1					
ANR	140377	Parameter	int module_number	223:104:7484:7500	140337	4	True				
ANR	140378	ParameterType	int		140337	0					
ANR	140379	Identifier	module_number		140337	1					
ANR	140380	CFGEntryNode	ENTRY		140337		True				
ANR	140381	CFGExitNode	EXIT		140337		True				
ANR	140382	Symbol	strlen		140337						
ANR	140383	Symbol	strval		140337						
ANR	140384	Symbol	name		140337						
ANR	140385	Symbol	flags		140337						
ANR	140386	Symbol	module_number		140337						
ANR	140387	Symbol	name_len		140337						
ANR	140388	Function	zend_get_special_constant	228:0:7603:8387							
ANR	140389	FunctionDef	"zend_get_special_constant (const char * name , size_t name_len)"		140388	0					
ANR	140390	CompoundStatement		229:0:7686:8387	140388	0					
ANR	140391	IdentifierDeclStatement	zend_constant * c ;	230:1:7689:7705	140388	0	True				
ANR	140392	IdentifierDecl	* c		140388	0					
ANR	140393	IdentifierDeclType	zend_constant *		140388	0					
ANR	140394	Identifier	c		140388	1					
ANR	140395	Statement	static	231:1:7708:7713	140388	1	True				
ANR	140396	IdentifierDeclStatement	"char haltoff [ ] = ""__COMPILER_HALT_OFFSET__"" ;"	231:8:7715:7758	140388	2	True				
ANR	140397	IdentifierDecl	"haltoff [ ] = ""__COMPILER_HALT_OFFSET__"""		140388	0					
ANR	140398	IdentifierDeclType	char [ ]		140388	0					
ANR	140399	Identifier	haltoff		140388	1					
ANR	140400	AssignmentExpression	"haltoff [ ] = ""__COMPILER_HALT_OFFSET__"""		140388	2		=			
ANR	140401	Identifier	haltoff		140388	0					
ANR	140402	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		140388	1					
ANR	140403	IfStatement	if ( ! EG ( current_execute_data ) )		140388	3					
ANR	140404	Condition	! EG ( current_execute_data )	233:5:7766:7790	140388	0	True				
ANR	140405	UnaryOperationExpression	! EG ( current_execute_data )		140388	0					
ANR	140406	UnaryOperator	!		140388	0					
ANR	140407	CallExpression	EG ( current_execute_data )		140388	1					
ANR	140408	Callee	EG		140388	0					
ANR	140409	Identifier	EG		140388	0					
ANR	140410	ArgumentList	current_execute_data		140388	1					
ANR	140411	Argument	current_execute_data		140388	0					
ANR	140412	Identifier	current_execute_data		140388	0					
ANR	140413	CompoundStatement		5:32:106:106	140388	1					
ANR	140414	ReturnStatement	return NULL ;	234:2:7797:7808	140388	0	True				
ANR	140415	Identifier	NULL		140388	0					
ANR	140416	ElseStatement	else		140388	0					
ANR	140417	IfStatement	"if ( name_len == sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 && ! memcmp ( name , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 ) )"		140388	0					
ANR	140418	Condition	"name_len == sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 && ! memcmp ( name , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 )"	235:12:7822:7963	140388	0	True				
ANR	140419	AndExpression	"name_len == sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 && ! memcmp ( name , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 )"		140388	0		&&			
ANR	140420	EqualityExpression	"name_len == sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		140388	0		==			
ANR	140421	Identifier	name_len		140388	0					
ANR	140422	AdditiveExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		140388	1		-			
ANR	140423	SizeofExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" )"		140388	0					
ANR	140424	Sizeof	sizeof		140388	0					
ANR	140425	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		140388	1					
ANR	140426	PrimaryExpression	1		140388	1					
ANR	140427	UnaryOperationExpression	"! memcmp ( name , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 )"		140388	1					
ANR	140428	UnaryOperator	!		140388	0					
ANR	140429	CallExpression	"memcmp ( name , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 )"		140388	1					
ANR	140430	Callee	memcmp		140388	0					
ANR	140431	Identifier	memcmp		140388	0					
ANR	140432	ArgumentList	name		140388	1					
ANR	140433	Argument	name		140388	0					
ANR	140434	Identifier	name		140388	0					
ANR	140435	Argument	"""__COMPILER_HALT_OFFSET__"""		140388	1					
ANR	140436	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		140388	0					
ANR	140437	Argument	"sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		140388	2					
ANR	140438	AdditiveExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		140388	0		-			
ANR	140439	SizeofExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" )"		140388	0					
ANR	140440	Sizeof	sizeof		140388	0					
ANR	140441	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		140388	1					
ANR	140442	PrimaryExpression	1		140388	1					
ANR	140443	CompoundStatement		11:2:333:344	140388	1					
ANR	140444	IdentifierDeclStatement	const char * cfilename ;	237:2:7970:7991	140388	0	True				
ANR	140445	IdentifierDecl	* cfilename		140388	0					
ANR	140446	IdentifierDeclType	const char *		140388	0					
ANR	140447	Identifier	cfilename		140388	1					
ANR	140448	IdentifierDeclStatement	zend_string * haltname ;	238:2:7995:8016	140388	1	True				
ANR	140449	IdentifierDecl	* haltname		140388	0					
ANR	140450	IdentifierDeclType	zend_string *		140388	0					
ANR	140451	Identifier	haltname		140388	1					
ANR	140452	IdentifierDeclStatement	size_t clen ;	239:2:8020:8031	140388	2	True				
ANR	140453	IdentifierDecl	clen		140388	0					
ANR	140454	IdentifierDeclType	size_t		140388	0					
ANR	140455	Identifier	clen		140388	1					
ANR	140456	ExpressionStatement	cfilename = zend_get_executed_filename ( )	241:2:8036:8076	140388	3	True				
ANR	140457	AssignmentExpression	cfilename = zend_get_executed_filename ( )		140388	0		=			
ANR	140458	Identifier	cfilename		140388	0					
ANR	140459	CallExpression	zend_get_executed_filename ( )		140388	1					
ANR	140460	Callee	zend_get_executed_filename		140388	0					
ANR	140461	Identifier	zend_get_executed_filename		140388	0					
ANR	140462	ArgumentList			140388	1					
ANR	140463	ExpressionStatement	clen = strlen ( cfilename )	242:2:8080:8104	140388	4	True				
ANR	140464	AssignmentExpression	clen = strlen ( cfilename )		140388	0		=			
ANR	140465	Identifier	clen		140388	0					
ANR	140466	CallExpression	strlen ( cfilename )		140388	1					
ANR	140467	Callee	strlen		140388	0					
ANR	140468	Identifier	strlen		140388	0					
ANR	140469	ArgumentList	cfilename		140388	1					
ANR	140470	Argument	cfilename		140388	0					
ANR	140471	Identifier	cfilename		140388	0					
ANR	140472	ExpressionStatement	"haltname = zend_mangle_property_name ( haltoff , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 , cfilename , clen , 0 )"	244:2:8151:8259	140388	5	True				
ANR	140473	AssignmentExpression	"haltname = zend_mangle_property_name ( haltoff , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 , cfilename , clen , 0 )"		140388	0		=			
ANR	140474	Identifier	haltname		140388	0					
ANR	140475	CallExpression	"zend_mangle_property_name ( haltoff , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 , cfilename , clen , 0 )"		140388	1					
ANR	140476	Callee	zend_mangle_property_name		140388	0					
ANR	140477	Identifier	zend_mangle_property_name		140388	0					
ANR	140478	ArgumentList	haltoff		140388	1					
ANR	140479	Argument	haltoff		140388	0					
ANR	140480	Identifier	haltoff		140388	0					
ANR	140481	Argument	"sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		140388	1					
ANR	140482	AdditiveExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		140388	0		-			
ANR	140483	SizeofExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" )"		140388	0					
ANR	140484	Sizeof	sizeof		140388	0					
ANR	140485	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		140388	1					
ANR	140486	PrimaryExpression	1		140388	1					
ANR	140487	Argument	cfilename		140388	2					
ANR	140488	Identifier	cfilename		140388	0					
ANR	140489	Argument	clen		140388	3					
ANR	140490	Identifier	clen		140388	0					
ANR	140491	Argument	0		140388	4					
ANR	140492	PrimaryExpression	0		140388	0					
ANR	140493	ExpressionStatement	"c = zend_hash_find_ptr ( EG ( zend_constants ) , haltname )"	246:2:8263:8315	140388	6	True				
ANR	140494	AssignmentExpression	"c = zend_hash_find_ptr ( EG ( zend_constants ) , haltname )"		140388	0		=			
ANR	140495	Identifier	c		140388	0					
ANR	140496	CallExpression	"zend_hash_find_ptr ( EG ( zend_constants ) , haltname )"		140388	1					
ANR	140497	Callee	zend_hash_find_ptr		140388	0					
ANR	140498	Identifier	zend_hash_find_ptr		140388	0					
ANR	140499	ArgumentList	EG ( zend_constants )		140388	1					
ANR	140500	Argument	EG ( zend_constants )		140388	0					
ANR	140501	CallExpression	EG ( zend_constants )		140388	0					
ANR	140502	Callee	EG		140388	0					
ANR	140503	Identifier	EG		140388	0					
ANR	140504	ArgumentList	zend_constants		140388	1					
ANR	140505	Argument	zend_constants		140388	0					
ANR	140506	Identifier	zend_constants		140388	0					
ANR	140507	Argument	haltname		140388	1					
ANR	140508	Identifier	haltname		140388	0					
ANR	140509	ExpressionStatement	zend_string_free ( haltname )	247:2:8319:8345	140388	7	True				
ANR	140510	CallExpression	zend_string_free ( haltname )		140388	0					
ANR	140511	Callee	zend_string_free		140388	0					
ANR	140512	Identifier	zend_string_free		140388	0					
ANR	140513	ArgumentList	haltname		140388	1					
ANR	140514	Argument	haltname		140388	0					
ANR	140515	Identifier	haltname		140388	0					
ANR	140516	ReturnStatement	return c ;	248:2:8349:8357	140388	8	True				
ANR	140517	Identifier	c		140388	0					
ANR	140518	ElseStatement	else		140388	0					
ANR	140519	CompoundStatement		21:8:680:680	140388	0					
ANR	140520	ReturnStatement	return NULL ;	250:2:8371:8382	140388	0	True				
ANR	140521	Identifier	NULL		140388	0					
ANR	140522	ReturnType	static zend_constant *		140388	1					
ANR	140523	Identifier	zend_get_special_constant		140388	2					
ANR	140524	ParameterList	"const char * name , size_t name_len"		140388	3					
ANR	140525	Parameter	const char * name	228:48:7651:7666	140388	0	True				
ANR	140526	ParameterType	const char *		140388	0					
ANR	140527	Identifier	name		140388	1					
ANR	140528	Parameter	size_t name_len	228:66:7669:7683	140388	1	True				
ANR	140529	ParameterType	size_t		140388	0					
ANR	140530	Identifier	name_len		140388	1					
ANR	140531	CFGEntryNode	ENTRY		140388		True				
ANR	140532	CFGExitNode	EXIT		140388		True				
ANR	140533	Symbol	cfilename		140388						
ANR	140534	Symbol	EG		140388						
ANR	140535	Symbol	c		140388						
ANR	140536	Symbol	NULL		140388						
ANR	140537	Symbol	current_execute_data		140388						
ANR	140538	Symbol	zend_mangle_property_name		140388						
ANR	140539	Symbol	strlen		140388						
ANR	140540	Symbol	memcmp		140388						
ANR	140541	Symbol	haltname		140388						
ANR	140542	Symbol	zend_constants		140388						
ANR	140543	Symbol	zend_get_executed_filename		140388						
ANR	140544	Symbol	name		140388						
ANR	140545	Symbol	haltoff		140388						
ANR	140546	Symbol	name_len		140388						
ANR	140547	Symbol	clen		140388						
ANR	140548	Symbol	zend_hash_find_ptr		140388						
ANR	140549	Function	zend_get_constant_str	255:0:8391:8955							
ANR	140550	FunctionDef	"zend_get_constant_str (const char * name , size_t name_len)"		140549	0					
ANR	140551	CompoundStatement		256:0:8463:8955	140549	0					
ANR	140552	IdentifierDeclStatement	zend_constant * c ;	257:1:8466:8482	140549	0	True				
ANR	140553	IdentifierDecl	* c		140549	0					
ANR	140554	IdentifierDeclType	zend_constant *		140549	0					
ANR	140555	Identifier	c		140549	1					
ANR	140556	Statement	ALLOCA_FLAG	258:1:8485:8495	140549	1	True				
ANR	140557	Statement	(	258:12:8496:8496	140549	2	True				
ANR	140558	Statement	use_heap	258:13:8497:8504	140549	3	True				
ANR	140559	Statement	)	258:21:8505:8505	140549	4	True				
ANR	140560	IfStatement	"if ( ( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , name , name_len ) ) == NULL )"		140549	5					
ANR	140561	Condition	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , name , name_len ) ) == NULL"	260:5:8513:8584	140549	0	True				
ANR	140562	EqualityExpression	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , name , name_len ) ) == NULL"		140549	0		==			
ANR	140563	AssignmentExpression	"c = zend_hash_str_find_ptr ( EG ( zend_constants ) , name , name_len )"		140549	0		=			
ANR	140564	Identifier	c		140549	0					
ANR	140565	CallExpression	"zend_hash_str_find_ptr ( EG ( zend_constants ) , name , name_len )"		140549	1					
ANR	140566	Callee	zend_hash_str_find_ptr		140549	0					
ANR	140567	Identifier	zend_hash_str_find_ptr		140549	0					
ANR	140568	ArgumentList	EG ( zend_constants )		140549	1					
ANR	140569	Argument	EG ( zend_constants )		140549	0					
ANR	140570	CallExpression	EG ( zend_constants )		140549	0					
ANR	140571	Callee	EG		140549	0					
ANR	140572	Identifier	EG		140549	0					
ANR	140573	ArgumentList	zend_constants		140549	1					
ANR	140574	Argument	zend_constants		140549	0					
ANR	140575	Identifier	zend_constants		140549	0					
ANR	140576	Argument	name		140549	1					
ANR	140577	Identifier	name		140549	0					
ANR	140578	Argument	name_len		140549	2					
ANR	140579	Identifier	name_len		140549	0					
ANR	140580	Identifier	NULL		140549	1					
ANR	140581	CompoundStatement		6:2:127:175	140549	1					
ANR	140582	IdentifierDeclStatement	"char * lcname = do_alloca ( name_len + 1 , use_heap ) ;"	261:2:8591:8639	140549	0	True				
ANR	140583	IdentifierDecl	"* lcname = do_alloca ( name_len + 1 , use_heap )"		140549	0					
ANR	140584	IdentifierDeclType	char *		140549	0					
ANR	140585	Identifier	lcname		140549	1					
ANR	140586	AssignmentExpression	"* lcname = do_alloca ( name_len + 1 , use_heap )"		140549	2		=			
ANR	140587	Identifier	lcname		140549	0					
ANR	140588	CallExpression	"do_alloca ( name_len + 1 , use_heap )"		140549	1					
ANR	140589	Callee	do_alloca		140549	0					
ANR	140590	Identifier	do_alloca		140549	0					
ANR	140591	ArgumentList	name_len + 1		140549	1					
ANR	140592	Argument	name_len + 1		140549	0					
ANR	140593	AdditiveExpression	name_len + 1		140549	0		+			
ANR	140594	Identifier	name_len		140549	0					
ANR	140595	PrimaryExpression	1		140549	1					
ANR	140596	Argument	use_heap		140549	1					
ANR	140597	Identifier	use_heap		140549	0					
ANR	140598	ExpressionStatement	"zend_str_tolower_copy ( lcname , name , name_len )"	262:2:8643:8688	140549	1	True				
ANR	140599	CallExpression	"zend_str_tolower_copy ( lcname , name , name_len )"		140549	0					
ANR	140600	Callee	zend_str_tolower_copy		140549	0					
ANR	140601	Identifier	zend_str_tolower_copy		140549	0					
ANR	140602	ArgumentList	lcname		140549	1					
ANR	140603	Argument	lcname		140549	0					
ANR	140604	Identifier	lcname		140549	0					
ANR	140605	Argument	name		140549	1					
ANR	140606	Identifier	name		140549	0					
ANR	140607	Argument	name_len		140549	2					
ANR	140608	Identifier	name_len		140549	0					
ANR	140609	IfStatement	"if ( ( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , name_len ) ) != NULL )"		140549	2					
ANR	140610	Condition	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , name_len ) ) != NULL"	263:6:8696:8769	140549	0	True				
ANR	140611	EqualityExpression	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , name_len ) ) != NULL"		140549	0		!=			
ANR	140612	AssignmentExpression	"c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , name_len )"		140549	0		=			
ANR	140613	Identifier	c		140549	0					
ANR	140614	CallExpression	"zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , name_len )"		140549	1					
ANR	140615	Callee	zend_hash_str_find_ptr		140549	0					
ANR	140616	Identifier	zend_hash_str_find_ptr		140549	0					
ANR	140617	ArgumentList	EG ( zend_constants )		140549	1					
ANR	140618	Argument	EG ( zend_constants )		140549	0					
ANR	140619	CallExpression	EG ( zend_constants )		140549	0					
ANR	140620	Callee	EG		140549	0					
ANR	140621	Identifier	EG		140549	0					
ANR	140622	ArgumentList	zend_constants		140549	1					
ANR	140623	Argument	zend_constants		140549	0					
ANR	140624	Identifier	zend_constants		140549	0					
ANR	140625	Argument	lcname		140549	1					
ANR	140626	Identifier	lcname		140549	0					
ANR	140627	Argument	name_len		140549	2					
ANR	140628	Identifier	name_len		140549	0					
ANR	140629	Identifier	NULL		140549	1					
ANR	140630	CompoundStatement		8:82:308:308	140549	1					
ANR	140631	IfStatement	if ( c -> flags & CONST_CS )		140549	0					
ANR	140632	Condition	c -> flags & CONST_CS	264:7:8781:8799	140549	0	True				
ANR	140633	BitAndExpression	c -> flags & CONST_CS		140549	0		&			
ANR	140634	PtrMemberAccess	c -> flags		140549	0					
ANR	140635	Identifier	c		140549	0					
ANR	140636	Identifier	flags		140549	1					
ANR	140637	Identifier	CONST_CS		140549	1					
ANR	140638	CompoundStatement		9:28:338:338	140549	1					
ANR	140639	ExpressionStatement	c = NULL	265:4:8808:8816	140549	0	True				
ANR	140640	AssignmentExpression	c = NULL		140549	0		=			
ANR	140641	Identifier	c		140549	0					
ANR	140642	Identifier	NULL		140549	1					
ANR	140643	ElseStatement	else		140549	0					
ANR	140644	CompoundStatement		12:9:368:368	140549	0					
ANR	140645	ExpressionStatement	"c = zend_get_special_constant ( name , name_len )"	268:3:8837:8882	140549	0	True				
ANR	140646	AssignmentExpression	"c = zend_get_special_constant ( name , name_len )"		140549	0		=			
ANR	140647	Identifier	c		140549	0					
ANR	140648	CallExpression	"zend_get_special_constant ( name , name_len )"		140549	1					
ANR	140649	Callee	zend_get_special_constant		140549	0					
ANR	140650	Identifier	zend_get_special_constant		140549	0					
ANR	140651	ArgumentList	name		140549	1					
ANR	140652	Argument	name		140549	0					
ANR	140653	Identifier	name		140549	0					
ANR	140654	Argument	name_len		140549	1					
ANR	140655	Identifier	name_len		140549	0					
ANR	140656	ExpressionStatement	"free_alloca ( lcname , use_heap )"	270:2:8890:8919	140549	3	True				
ANR	140657	CallExpression	"free_alloca ( lcname , use_heap )"		140549	0					
ANR	140658	Callee	free_alloca		140549	0					
ANR	140659	Identifier	free_alloca		140549	0					
ANR	140660	ArgumentList	lcname		140549	1					
ANR	140661	Argument	lcname		140549	0					
ANR	140662	Identifier	lcname		140549	0					
ANR	140663	Argument	use_heap		140549	1					
ANR	140664	Identifier	use_heap		140549	0					
ANR	140665	ReturnStatement	return c ? & c -> value : NULL ;	273:1:8926:8953	140549	6	True				
ANR	140666	ConditionalExpression	c ? & c -> value : NULL		140549	0					
ANR	140667	Condition	c		140549	0					
ANR	140668	Identifier	c		140549	0					
ANR	140669	UnaryOperationExpression	& c -> value		140549	1					
ANR	140670	UnaryOperator	&		140549	0					
ANR	140671	PtrMemberAccess	c -> value		140549	1					
ANR	140672	Identifier	c		140549	0					
ANR	140673	Identifier	value		140549	1					
ANR	140674	Identifier	NULL		140549	2					
ANR	140675	ReturnType	ZEND_API zval *		140549	1					
ANR	140676	Identifier	zend_get_constant_str		140549	2					
ANR	140677	ParameterList	"const char * name , size_t name_len"		140549	3					
ANR	140678	Parameter	const char * name	255:37:8428:8443	140549	0	True				
ANR	140679	ParameterType	const char *		140549	0					
ANR	140680	Identifier	name		140549	1					
ANR	140681	Parameter	size_t name_len	255:55:8446:8460	140549	1	True				
ANR	140682	ParameterType	size_t		140549	0					
ANR	140683	Identifier	name_len		140549	1					
ANR	140684	CFGEntryNode	ENTRY		140549		True				
ANR	140685	CFGExitNode	EXIT		140549		True				
ANR	140686	Symbol	EG		140549						
ANR	140687	Symbol	CONST_CS		140549						
ANR	140688	Symbol	c		140549						
ANR	140689	Symbol	NULL		140549						
ANR	140690	Symbol	c -> flags		140549						
ANR	140691	Symbol	* c		140549						
ANR	140692	Symbol	& c -> value		140549						
ANR	140693	Symbol	lcname		140549						
ANR	140694	Symbol	zend_constants		140549						
ANR	140695	Symbol	name		140549						
ANR	140696	Symbol	zend_hash_str_find_ptr		140549						
ANR	140697	Symbol	do_alloca		140549						
ANR	140698	Symbol	name_len		140549						
ANR	140699	Symbol	zend_get_special_constant		140549						
ANR	140700	Symbol	use_heap		140549						
ANR	140701	Function	zend_get_constant	276:0:8958:9532							
ANR	140702	FunctionDef	zend_get_constant (zend_string * name)		140701	0					
ANR	140703	CompoundStatement		277:0:9010:9532	140701	0					
ANR	140704	IdentifierDeclStatement	zend_constant * c ;	278:1:9013:9029	140701	0	True				
ANR	140705	IdentifierDecl	* c		140701	0					
ANR	140706	IdentifierDeclType	zend_constant *		140701	0					
ANR	140707	Identifier	c		140701	1					
ANR	140708	Statement	ALLOCA_FLAG	279:1:9032:9042	140701	1	True				
ANR	140709	Statement	(	279:12:9043:9043	140701	2	True				
ANR	140710	Statement	use_heap	279:13:9044:9051	140701	3	True				
ANR	140711	Statement	)	279:21:9052:9052	140701	4	True				
ANR	140712	IfStatement	"if ( ( c = zend_hash_find_ptr ( EG ( zend_constants ) , name ) ) == NULL )"		140701	5					
ANR	140713	Condition	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , name ) ) == NULL"	281:5:9060:9117	140701	0	True				
ANR	140714	EqualityExpression	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , name ) ) == NULL"		140701	0		==			
ANR	140715	AssignmentExpression	"c = zend_hash_find_ptr ( EG ( zend_constants ) , name )"		140701	0		=			
ANR	140716	Identifier	c		140701	0					
ANR	140717	CallExpression	"zend_hash_find_ptr ( EG ( zend_constants ) , name )"		140701	1					
ANR	140718	Callee	zend_hash_find_ptr		140701	0					
ANR	140719	Identifier	zend_hash_find_ptr		140701	0					
ANR	140720	ArgumentList	EG ( zend_constants )		140701	1					
ANR	140721	Argument	EG ( zend_constants )		140701	0					
ANR	140722	CallExpression	EG ( zend_constants )		140701	0					
ANR	140723	Callee	EG		140701	0					
ANR	140724	Identifier	EG		140701	0					
ANR	140725	ArgumentList	zend_constants		140701	1					
ANR	140726	Argument	zend_constants		140701	0					
ANR	140727	Identifier	zend_constants		140701	0					
ANR	140728	Argument	name		140701	1					
ANR	140729	Identifier	name		140701	0					
ANR	140730	Identifier	NULL		140701	1					
ANR	140731	CompoundStatement		6:2:113:167	140701	1					
ANR	140732	IdentifierDeclStatement	"char * lcname = do_alloca ( ZSTR_LEN ( name ) + 1 , use_heap ) ;"	282:2:9124:9178	140701	0	True				
ANR	140733	IdentifierDecl	"* lcname = do_alloca ( ZSTR_LEN ( name ) + 1 , use_heap )"		140701	0					
ANR	140734	IdentifierDeclType	char *		140701	0					
ANR	140735	Identifier	lcname		140701	1					
ANR	140736	AssignmentExpression	"* lcname = do_alloca ( ZSTR_LEN ( name ) + 1 , use_heap )"		140701	2		=			
ANR	140737	Identifier	lcname		140701	0					
ANR	140738	CallExpression	"do_alloca ( ZSTR_LEN ( name ) + 1 , use_heap )"		140701	1					
ANR	140739	Callee	do_alloca		140701	0					
ANR	140740	Identifier	do_alloca		140701	0					
ANR	140741	ArgumentList	ZSTR_LEN ( name ) + 1		140701	1					
ANR	140742	Argument	ZSTR_LEN ( name ) + 1		140701	0					
ANR	140743	AdditiveExpression	ZSTR_LEN ( name ) + 1		140701	0		+			
ANR	140744	CallExpression	ZSTR_LEN ( name )		140701	0					
ANR	140745	Callee	ZSTR_LEN		140701	0					
ANR	140746	Identifier	ZSTR_LEN		140701	0					
ANR	140747	ArgumentList	name		140701	1					
ANR	140748	Argument	name		140701	0					
ANR	140749	Identifier	name		140701	0					
ANR	140750	PrimaryExpression	1		140701	1					
ANR	140751	Argument	use_heap		140701	1					
ANR	140752	Identifier	use_heap		140701	0					
ANR	140753	ExpressionStatement	"zend_str_tolower_copy ( lcname , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"	283:2:9182:9243	140701	1	True				
ANR	140754	CallExpression	"zend_str_tolower_copy ( lcname , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		140701	0					
ANR	140755	Callee	zend_str_tolower_copy		140701	0					
ANR	140756	Identifier	zend_str_tolower_copy		140701	0					
ANR	140757	ArgumentList	lcname		140701	1					
ANR	140758	Argument	lcname		140701	0					
ANR	140759	Identifier	lcname		140701	0					
ANR	140760	Argument	ZSTR_VAL ( name )		140701	1					
ANR	140761	CallExpression	ZSTR_VAL ( name )		140701	0					
ANR	140762	Callee	ZSTR_VAL		140701	0					
ANR	140763	Identifier	ZSTR_VAL		140701	0					
ANR	140764	ArgumentList	name		140701	1					
ANR	140765	Argument	name		140701	0					
ANR	140766	Identifier	name		140701	0					
ANR	140767	Argument	ZSTR_LEN ( name )		140701	2					
ANR	140768	CallExpression	ZSTR_LEN ( name )		140701	0					
ANR	140769	Callee	ZSTR_LEN		140701	0					
ANR	140770	Identifier	ZSTR_LEN		140701	0					
ANR	140771	ArgumentList	name		140701	1					
ANR	140772	Argument	name		140701	0					
ANR	140773	Identifier	name		140701	0					
ANR	140774	IfStatement	"if ( ( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , ZSTR_LEN ( name ) ) ) != NULL )"		140701	2					
ANR	140775	Condition	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , ZSTR_LEN ( name ) ) ) != NULL"	284:6:9251:9330	140701	0	True				
ANR	140776	EqualityExpression	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , ZSTR_LEN ( name ) ) ) != NULL"		140701	0		!=			
ANR	140777	AssignmentExpression	"c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , ZSTR_LEN ( name ) )"		140701	0		=			
ANR	140778	Identifier	c		140701	0					
ANR	140779	CallExpression	"zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , ZSTR_LEN ( name ) )"		140701	1					
ANR	140780	Callee	zend_hash_str_find_ptr		140701	0					
ANR	140781	Identifier	zend_hash_str_find_ptr		140701	0					
ANR	140782	ArgumentList	EG ( zend_constants )		140701	1					
ANR	140783	Argument	EG ( zend_constants )		140701	0					
ANR	140784	CallExpression	EG ( zend_constants )		140701	0					
ANR	140785	Callee	EG		140701	0					
ANR	140786	Identifier	EG		140701	0					
ANR	140787	ArgumentList	zend_constants		140701	1					
ANR	140788	Argument	zend_constants		140701	0					
ANR	140789	Identifier	zend_constants		140701	0					
ANR	140790	Argument	lcname		140701	1					
ANR	140791	Identifier	lcname		140701	0					
ANR	140792	Argument	ZSTR_LEN ( name )		140701	2					
ANR	140793	CallExpression	ZSTR_LEN ( name )		140701	0					
ANR	140794	Callee	ZSTR_LEN		140701	0					
ANR	140795	Identifier	ZSTR_LEN		140701	0					
ANR	140796	ArgumentList	name		140701	1					
ANR	140797	Argument	name		140701	0					
ANR	140798	Identifier	name		140701	0					
ANR	140799	Identifier	NULL		140701	1					
ANR	140800	CompoundStatement		8:88:322:322	140701	1					
ANR	140801	IfStatement	if ( c -> flags & CONST_CS )		140701	0					
ANR	140802	Condition	c -> flags & CONST_CS	285:7:9342:9360	140701	0	True				
ANR	140803	BitAndExpression	c -> flags & CONST_CS		140701	0		&			
ANR	140804	PtrMemberAccess	c -> flags		140701	0					
ANR	140805	Identifier	c		140701	0					
ANR	140806	Identifier	flags		140701	1					
ANR	140807	Identifier	CONST_CS		140701	1					
ANR	140808	CompoundStatement		9:28:352:352	140701	1					
ANR	140809	ExpressionStatement	c = NULL	286:4:9369:9377	140701	0	True				
ANR	140810	AssignmentExpression	c = NULL		140701	0		=			
ANR	140811	Identifier	c		140701	0					
ANR	140812	Identifier	NULL		140701	1					
ANR	140813	ElseStatement	else		140701	0					
ANR	140814	CompoundStatement		12:9:382:382	140701	0					
ANR	140815	ExpressionStatement	"c = zend_get_special_constant ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"	289:3:9398:9459	140701	0	True				
ANR	140816	AssignmentExpression	"c = zend_get_special_constant ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		140701	0		=			
ANR	140817	Identifier	c		140701	0					
ANR	140818	CallExpression	"zend_get_special_constant ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		140701	1					
ANR	140819	Callee	zend_get_special_constant		140701	0					
ANR	140820	Identifier	zend_get_special_constant		140701	0					
ANR	140821	ArgumentList	ZSTR_VAL ( name )		140701	1					
ANR	140822	Argument	ZSTR_VAL ( name )		140701	0					
ANR	140823	CallExpression	ZSTR_VAL ( name )		140701	0					
ANR	140824	Callee	ZSTR_VAL		140701	0					
ANR	140825	Identifier	ZSTR_VAL		140701	0					
ANR	140826	ArgumentList	name		140701	1					
ANR	140827	Argument	name		140701	0					
ANR	140828	Identifier	name		140701	0					
ANR	140829	Argument	ZSTR_LEN ( name )		140701	1					
ANR	140830	CallExpression	ZSTR_LEN ( name )		140701	0					
ANR	140831	Callee	ZSTR_LEN		140701	0					
ANR	140832	Identifier	ZSTR_LEN		140701	0					
ANR	140833	ArgumentList	name		140701	1					
ANR	140834	Argument	name		140701	0					
ANR	140835	Identifier	name		140701	0					
ANR	140836	ExpressionStatement	"free_alloca ( lcname , use_heap )"	291:2:9467:9496	140701	3	True				
ANR	140837	CallExpression	"free_alloca ( lcname , use_heap )"		140701	0					
ANR	140838	Callee	free_alloca		140701	0					
ANR	140839	Identifier	free_alloca		140701	0					
ANR	140840	ArgumentList	lcname		140701	1					
ANR	140841	Argument	lcname		140701	0					
ANR	140842	Identifier	lcname		140701	0					
ANR	140843	Argument	use_heap		140701	1					
ANR	140844	Identifier	use_heap		140701	0					
ANR	140845	ReturnStatement	return c ? & c -> value : NULL ;	294:1:9503:9530	140701	6	True				
ANR	140846	ConditionalExpression	c ? & c -> value : NULL		140701	0					
ANR	140847	Condition	c		140701	0					
ANR	140848	Identifier	c		140701	0					
ANR	140849	UnaryOperationExpression	& c -> value		140701	1					
ANR	140850	UnaryOperator	&		140701	0					
ANR	140851	PtrMemberAccess	c -> value		140701	1					
ANR	140852	Identifier	c		140701	0					
ANR	140853	Identifier	value		140701	1					
ANR	140854	Identifier	NULL		140701	2					
ANR	140855	ReturnType	ZEND_API zval *		140701	1					
ANR	140856	Identifier	zend_get_constant		140701	2					
ANR	140857	ParameterList	zend_string * name		140701	3					
ANR	140858	Parameter	zend_string * name	276:33:8991:9007	140701	0	True				
ANR	140859	ParameterType	zend_string *		140701	0					
ANR	140860	Identifier	name		140701	1					
ANR	140861	CFGEntryNode	ENTRY		140701		True				
ANR	140862	CFGExitNode	EXIT		140701		True				
ANR	140863	Symbol	EG		140701						
ANR	140864	Symbol	CONST_CS		140701						
ANR	140865	Symbol	c		140701						
ANR	140866	Symbol	NULL		140701						
ANR	140867	Symbol	c -> flags		140701						
ANR	140868	Symbol	* c		140701						
ANR	140869	Symbol	ZSTR_VAL		140701						
ANR	140870	Symbol	& c -> value		140701						
ANR	140871	Symbol	lcname		140701						
ANR	140872	Symbol	zend_constants		140701						
ANR	140873	Symbol	name		140701						
ANR	140874	Symbol	do_alloca		140701						
ANR	140875	Symbol	ZSTR_LEN		140701						
ANR	140876	Symbol	zend_hash_str_find_ptr		140701						
ANR	140877	Symbol	zend_get_special_constant		140701						
ANR	140878	Symbol	zend_hash_find_ptr		140701						
ANR	140879	Symbol	use_heap		140701						
ANR	140880	Function	zend_get_constant_ex	297:0:9535:13657							
ANR	140881	FunctionDef	"zend_get_constant_ex (zend_string * cname , zend_class_entry * scope , zend_ulong flags)"		140880	0					
ANR	140882	CompoundStatement		298:0:9634:13657	140880	0					
ANR	140883	IdentifierDeclStatement	zend_constant * c ;	299:1:9637:9653	140880	0	True				
ANR	140884	IdentifierDecl	* c		140880	0					
ANR	140885	IdentifierDeclType	zend_constant *		140880	0					
ANR	140886	Identifier	c		140880	1					
ANR	140887	IdentifierDeclStatement	const char * colon ;	300:1:9656:9673	140880	1	True				
ANR	140888	IdentifierDecl	* colon		140880	0					
ANR	140889	IdentifierDeclType	const char *		140880	0					
ANR	140890	Identifier	colon		140880	1					
ANR	140891	IdentifierDeclStatement	zend_class_entry * ce = NULL ;	301:1:9676:9703	140880	2	True				
ANR	140892	IdentifierDecl	* ce = NULL		140880	0					
ANR	140893	IdentifierDeclType	zend_class_entry *		140880	0					
ANR	140894	Identifier	ce		140880	1					
ANR	140895	AssignmentExpression	* ce = NULL		140880	2		=			
ANR	140896	Identifier	NULL		140880	0					
ANR	140897	Identifier	NULL		140880	1					
ANR	140898	IdentifierDeclStatement	zend_string * class_name ;	302:1:9706:9729	140880	3	True				
ANR	140899	IdentifierDecl	* class_name		140880	0					
ANR	140900	IdentifierDeclType	zend_string *		140880	0					
ANR	140901	Identifier	class_name		140880	1					
ANR	140902	IdentifierDeclStatement	const char * name = ZSTR_VAL ( cname ) ;	303:1:9732:9766	140880	4	True				
ANR	140903	IdentifierDecl	* name = ZSTR_VAL ( cname )		140880	0					
ANR	140904	IdentifierDeclType	const char *		140880	0					
ANR	140905	Identifier	name		140880	1					
ANR	140906	AssignmentExpression	* name = ZSTR_VAL ( cname )		140880	2		=			
ANR	140907	Identifier	name		140880	0					
ANR	140908	CallExpression	ZSTR_VAL ( cname )		140880	1					
ANR	140909	Callee	ZSTR_VAL		140880	0					
ANR	140910	Identifier	ZSTR_VAL		140880	0					
ANR	140911	ArgumentList	cname		140880	1					
ANR	140912	Argument	cname		140880	0					
ANR	140913	Identifier	cname		140880	0					
ANR	140914	IdentifierDeclStatement	size_t name_len = ZSTR_LEN ( cname ) ;	304:1:9769:9802	140880	5	True				
ANR	140915	IdentifierDecl	name_len = ZSTR_LEN ( cname )		140880	0					
ANR	140916	IdentifierDeclType	size_t		140880	0					
ANR	140917	Identifier	name_len		140880	1					
ANR	140918	AssignmentExpression	name_len = ZSTR_LEN ( cname )		140880	2		=			
ANR	140919	Identifier	name_len		140880	0					
ANR	140920	CallExpression	ZSTR_LEN ( cname )		140880	1					
ANR	140921	Callee	ZSTR_LEN		140880	0					
ANR	140922	Identifier	ZSTR_LEN		140880	0					
ANR	140923	ArgumentList	cname		140880	1					
ANR	140924	Argument	cname		140880	0					
ANR	140925	Identifier	cname		140880	0					
ANR	140926	IfStatement	if ( name [ 0 ] == '\\\\' )		140880	6					
ANR	140927	Condition	name [ 0 ] == '\\\\'	307:5:9833:9847	140880	0	True				
ANR	140928	EqualityExpression	name [ 0 ] == '\\\\'		140880	0		==			
ANR	140929	ArrayIndexing	name [ 0 ]		140880	0					
ANR	140930	Identifier	name		140880	0					
ANR	140931	PrimaryExpression	0		140880	1					
ANR	140932	PrimaryExpression	'\\\\'		140880	1					
ANR	140933	CompoundStatement		10:22:215:215	140880	1					
ANR	140934	ExpressionStatement	name += 1	308:2:9854:9863	140880	0	True				
ANR	140935	AssignmentExpression	name += 1		140880	0		+=			
ANR	140936	Identifier	name		140880	0					
ANR	140937	PrimaryExpression	1		140880	1					
ANR	140938	ExpressionStatement	name_len -= 1	309:2:9867:9880	140880	1	True				
ANR	140939	AssignmentExpression	name_len -= 1		140880	0		-=			
ANR	140940	Identifier	name_len		140880	0					
ANR	140941	PrimaryExpression	1		140880	1					
ANR	140942	ExpressionStatement	cname = NULL	310:2:9884:9896	140880	2	True				
ANR	140943	AssignmentExpression	cname = NULL		140880	0		=			
ANR	140944	Identifier	cname		140880	0					
ANR	140945	Identifier	NULL		140880	1					
ANR	140946	IfStatement	"if ( ( colon = zend_memrchr ( name , ':' , name_len ) ) && colon > name && ( * ( colon - 1 ) == ':' ) )"		140880	7					
ANR	140947	Condition	"( colon = zend_memrchr ( name , ':' , name_len ) ) && colon > name && ( * ( colon - 1 ) == ':' )"	313:5:9907:9995	140880	0	True				
ANR	140948	AndExpression	"( colon = zend_memrchr ( name , ':' , name_len ) ) && colon > name && ( * ( colon - 1 ) == ':' )"		140880	0		&&			
ANR	140949	AssignmentExpression	"colon = zend_memrchr ( name , ':' , name_len )"		140880	0		=			
ANR	140950	Identifier	colon		140880	0					
ANR	140951	CallExpression	"zend_memrchr ( name , ':' , name_len )"		140880	1					
ANR	140952	Callee	zend_memrchr		140880	0					
ANR	140953	Identifier	zend_memrchr		140880	0					
ANR	140954	ArgumentList	name		140880	1					
ANR	140955	Argument	name		140880	0					
ANR	140956	Identifier	name		140880	0					
ANR	140957	Argument	':'		140880	1					
ANR	140958	PrimaryExpression	':'		140880	0					
ANR	140959	Argument	name_len		140880	2					
ANR	140960	Identifier	name_len		140880	0					
ANR	140961	AndExpression	colon > name && ( * ( colon - 1 ) == ':' )		140880	1		&&			
ANR	140962	RelationalExpression	colon > name		140880	0		>			
ANR	140963	Identifier	colon		140880	0					
ANR	140964	Identifier	name		140880	1					
ANR	140965	EqualityExpression	* ( colon - 1 ) == ':'		140880	1		==			
ANR	140966	UnaryOperationExpression	* ( colon - 1 )		140880	0					
ANR	140967	UnaryOperator	*		140880	0					
ANR	140968	AdditiveExpression	colon - 1		140880	1		-			
ANR	140969	Identifier	colon		140880	0					
ANR	140970	PrimaryExpression	1		140880	1					
ANR	140971	PrimaryExpression	':'		140880	1					
ANR	140972	CompoundStatement		22:2:560:585	140880	1					
ANR	140973	IdentifierDeclStatement	int class_name_len = colon - name - 1 ;	315:2:10002:10039	140880	0	True				
ANR	140974	IdentifierDecl	class_name_len = colon - name - 1		140880	0					
ANR	140975	IdentifierDeclType	int		140880	0					
ANR	140976	Identifier	class_name_len		140880	1					
ANR	140977	AssignmentExpression	class_name_len = colon - name - 1		140880	2		=			
ANR	140978	Identifier	class_name_len		140880	0					
ANR	140979	AdditiveExpression	colon - name - 1		140880	1		-			
ANR	140980	Identifier	colon		140880	0					
ANR	140981	AdditiveExpression	name - 1		140880	1		-			
ANR	140982	Identifier	name		140880	0					
ANR	140983	PrimaryExpression	1		140880	1					
ANR	140984	IdentifierDeclStatement	size_t const_name_len = name_len - class_name_len - 2 ;	316:2:10043:10096	140880	1	True				
ANR	140985	IdentifierDecl	const_name_len = name_len - class_name_len - 2		140880	0					
ANR	140986	IdentifierDeclType	size_t		140880	0					
ANR	140987	Identifier	const_name_len		140880	1					
ANR	140988	AssignmentExpression	const_name_len = name_len - class_name_len - 2		140880	2		=			
ANR	140989	Identifier	const_name_len		140880	0					
ANR	140990	AdditiveExpression	name_len - class_name_len - 2		140880	1		-			
ANR	140991	Identifier	name_len		140880	0					
ANR	140992	AdditiveExpression	class_name_len - 2		140880	1		-			
ANR	140993	Identifier	class_name_len		140880	0					
ANR	140994	PrimaryExpression	2		140880	1					
ANR	140995	IdentifierDeclStatement	"zend_string * constant_name = zend_string_init ( colon + 1 , const_name_len , 0 ) ;"	317:2:10100:10175	140880	2	True				
ANR	140996	IdentifierDecl	"* constant_name = zend_string_init ( colon + 1 , const_name_len , 0 )"		140880	0					
ANR	140997	IdentifierDeclType	zend_string *		140880	0					
ANR	140998	Identifier	constant_name		140880	1					
ANR	140999	AssignmentExpression	"* constant_name = zend_string_init ( colon + 1 , const_name_len , 0 )"		140880	2		=			
ANR	141000	Identifier	constant_name		140880	0					
ANR	141001	CallExpression	"zend_string_init ( colon + 1 , const_name_len , 0 )"		140880	1					
ANR	141002	Callee	zend_string_init		140880	0					
ANR	141003	Identifier	zend_string_init		140880	0					
ANR	141004	ArgumentList	colon + 1		140880	1					
ANR	141005	Argument	colon + 1		140880	0					
ANR	141006	AdditiveExpression	colon + 1		140880	0		+			
ANR	141007	Identifier	colon		140880	0					
ANR	141008	PrimaryExpression	1		140880	1					
ANR	141009	Argument	const_name_len		140880	1					
ANR	141010	Identifier	const_name_len		140880	0					
ANR	141011	Argument	0		140880	2					
ANR	141012	PrimaryExpression	0		140880	0					
ANR	141013	IdentifierDeclStatement	char * lcname ;	318:2:10179:10191	140880	3	True				
ANR	141014	IdentifierDecl	* lcname		140880	0					
ANR	141015	IdentifierDeclType	char *		140880	0					
ANR	141016	Identifier	lcname		140880	1					
ANR	141017	IdentifierDeclStatement	zval * ret_constant = NULL ;	319:2:10195:10220	140880	4	True				
ANR	141018	IdentifierDecl	* ret_constant = NULL		140880	0					
ANR	141019	IdentifierDeclType	zval *		140880	0					
ANR	141020	Identifier	ret_constant		140880	1					
ANR	141021	AssignmentExpression	* ret_constant = NULL		140880	2		=			
ANR	141022	Identifier	NULL		140880	0					
ANR	141023	Identifier	NULL		140880	1					
ANR	141024	Statement	ALLOCA_FLAG	320:2:10224:10234	140880	5	True				
ANR	141025	ExpressionStatement	"( use_heap ) class_name = zend_string_init ( name , class_name_len , 0 )"	320:13:10235:10303	140880	6	True				
ANR	141026	AssignmentExpression	"( use_heap ) class_name = zend_string_init ( name , class_name_len , 0 )"		140880	0		=			
ANR	141027	CastExpression	( use_heap ) class_name		140880	0					
ANR	141028	CastTarget	use_heap		140880	0					
ANR	141029	Identifier	class_name		140880	1					
ANR	141030	CallExpression	"zend_string_init ( name , class_name_len , 0 )"		140880	1					
ANR	141031	Callee	zend_string_init		140880	0					
ANR	141032	Identifier	zend_string_init		140880	0					
ANR	141033	ArgumentList	name		140880	1					
ANR	141034	Argument	name		140880	0					
ANR	141035	Identifier	name		140880	0					
ANR	141036	Argument	class_name_len		140880	1					
ANR	141037	Identifier	class_name_len		140880	0					
ANR	141038	Argument	0		140880	2					
ANR	141039	PrimaryExpression	0		140880	0					
ANR	141040	ExpressionStatement	"lcname = do_alloca ( class_name_len + 1 , use_heap )"	323:2:10307:10355	140880	7	True				
ANR	141041	AssignmentExpression	"lcname = do_alloca ( class_name_len + 1 , use_heap )"		140880	0		=			
ANR	141042	Identifier	lcname		140880	0					
ANR	141043	CallExpression	"do_alloca ( class_name_len + 1 , use_heap )"		140880	1					
ANR	141044	Callee	do_alloca		140880	0					
ANR	141045	Identifier	do_alloca		140880	0					
ANR	141046	ArgumentList	class_name_len + 1		140880	1					
ANR	141047	Argument	class_name_len + 1		140880	0					
ANR	141048	AdditiveExpression	class_name_len + 1		140880	0		+			
ANR	141049	Identifier	class_name_len		140880	0					
ANR	141050	PrimaryExpression	1		140880	1					
ANR	141051	Argument	use_heap		140880	1					
ANR	141052	Identifier	use_heap		140880	0					
ANR	141053	ExpressionStatement	"zend_str_tolower_copy ( lcname , name , class_name_len )"	324:2:10359:10410	140880	8	True				
ANR	141054	CallExpression	"zend_str_tolower_copy ( lcname , name , class_name_len )"		140880	0					
ANR	141055	Callee	zend_str_tolower_copy		140880	0					
ANR	141056	Identifier	zend_str_tolower_copy		140880	0					
ANR	141057	ArgumentList	lcname		140880	1					
ANR	141058	Argument	lcname		140880	0					
ANR	141059	Identifier	lcname		140880	0					
ANR	141060	Argument	name		140880	1					
ANR	141061	Identifier	name		140880	0					
ANR	141062	Argument	class_name_len		140880	2					
ANR	141063	Identifier	class_name_len		140880	0					
ANR	141064	IfStatement	if ( ! scope )		140880	9					
ANR	141065	Condition	! scope	325:6:10418:10423	140880	0	True				
ANR	141066	UnaryOperationExpression	! scope		140880	0					
ANR	141067	UnaryOperator	!		140880	0					
ANR	141068	Identifier	scope		140880	1					
ANR	141069	CompoundStatement		28:14:791:791	140880	1					
ANR	141070	IfStatement	if ( EG ( current_execute_data ) )		140880	0					
ANR	141071	Condition	EG ( current_execute_data )	326:7:10435:10458	140880	0	True				
ANR	141072	CallExpression	EG ( current_execute_data )		140880	0					
ANR	141073	Callee	EG		140880	0					
ANR	141074	Identifier	EG		140880	0					
ANR	141075	ArgumentList	current_execute_data		140880	1					
ANR	141076	Argument	current_execute_data		140880	0					
ANR	141077	Identifier	current_execute_data		140880	0					
ANR	141078	CompoundStatement		29:33:826:826	140880	1					
ANR	141079	ExpressionStatement	scope = EG ( scope )	327:4:10467:10484	140880	0	True				
ANR	141080	AssignmentExpression	scope = EG ( scope )		140880	0		=			
ANR	141081	Identifier	scope		140880	0					
ANR	141082	CallExpression	EG ( scope )		140880	1					
ANR	141083	Callee	EG		140880	0					
ANR	141084	Identifier	EG		140880	0					
ANR	141085	ArgumentList	scope		140880	1					
ANR	141086	Argument	scope		140880	0					
ANR	141087	Identifier	scope		140880	0					
ANR	141088	ElseStatement	else		140880	0					
ANR	141089	CompoundStatement		31:10:861:861	140880	0					
ANR	141090	ExpressionStatement	scope = CG ( active_class_entry )	329:4:10502:10532	140880	0	True				
ANR	141091	AssignmentExpression	scope = CG ( active_class_entry )		140880	0		=			
ANR	141092	Identifier	scope		140880	0					
ANR	141093	CallExpression	CG ( active_class_entry )		140880	1					
ANR	141094	Callee	CG		140880	0					
ANR	141095	Identifier	CG		140880	0					
ANR	141096	ArgumentList	active_class_entry		140880	1					
ANR	141097	Argument	active_class_entry		140880	0					
ANR	141098	Identifier	active_class_entry		140880	0					
ANR	141099	IfStatement	"if ( class_name_len == sizeof ( ""self"" ) - 1 && ! memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 ) )"		140880	10					
ANR	141100	Condition	"class_name_len == sizeof ( ""self"" ) - 1 && ! memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 )"	333:6:10550:10634	140880	0	True				
ANR	141101	AndExpression	"class_name_len == sizeof ( ""self"" ) - 1 && ! memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 )"		140880	0		&&			
ANR	141102	EqualityExpression	"class_name_len == sizeof ( ""self"" ) - 1"		140880	0		==			
ANR	141103	Identifier	class_name_len		140880	0					
ANR	141104	AdditiveExpression	"sizeof ( ""self"" ) - 1"		140880	1		-			
ANR	141105	SizeofExpression	"sizeof ( ""self"" )"		140880	0					
ANR	141106	Sizeof	sizeof		140880	0					
ANR	141107	PrimaryExpression	"""self"""		140880	1					
ANR	141108	PrimaryExpression	1		140880	1					
ANR	141109	UnaryOperationExpression	"! memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 )"		140880	1					
ANR	141110	UnaryOperator	!		140880	0					
ANR	141111	CallExpression	"memcmp ( lcname , ""self"" , sizeof ( ""self"" ) - 1 )"		140880	1					
ANR	141112	Callee	memcmp		140880	0					
ANR	141113	Identifier	memcmp		140880	0					
ANR	141114	ArgumentList	lcname		140880	1					
ANR	141115	Argument	lcname		140880	0					
ANR	141116	Identifier	lcname		140880	0					
ANR	141117	Argument	"""self"""		140880	1					
ANR	141118	PrimaryExpression	"""self"""		140880	0					
ANR	141119	Argument	"sizeof ( ""self"" ) - 1"		140880	2					
ANR	141120	AdditiveExpression	"sizeof ( ""self"" ) - 1"		140880	0		-			
ANR	141121	SizeofExpression	"sizeof ( ""self"" )"		140880	0					
ANR	141122	Sizeof	sizeof		140880	0					
ANR	141123	PrimaryExpression	"""self"""		140880	1					
ANR	141124	PrimaryExpression	1		140880	1					
ANR	141125	CompoundStatement		37:49:1002:1002	140880	1					
ANR	141126	IfStatement	if ( UNEXPECTED ( ! scope ) )		140880	0					
ANR	141127	Condition	UNEXPECTED ( ! scope )	335:7:10646:10663	140880	0	True				
ANR	141128	CallExpression	UNEXPECTED ( ! scope )		140880	0					
ANR	141129	Callee	UNEXPECTED		140880	0					
ANR	141130	Identifier	UNEXPECTED		140880	0					
ANR	141131	ArgumentList	! scope		140880	1					
ANR	141132	Argument	! scope		140880	0					
ANR	141133	UnaryOperationExpression	! scope		140880	0					
ANR	141134	UnaryOperator	!		140880	0					
ANR	141135	Identifier	scope		140880	1					
ANR	141136	CompoundStatement		38:27:1031:1031	140880	1					
ANR	141137	ExpressionStatement	"zend_throw_error ( NULL , ""Cannot access self:: when no class scope is active"" )"	336:4:10672:10748	140880	0	True				
ANR	141138	CallExpression	"zend_throw_error ( NULL , ""Cannot access self:: when no class scope is active"" )"		140880	0					
ANR	141139	Callee	zend_throw_error		140880	0					
ANR	141140	Identifier	zend_throw_error		140880	0					
ANR	141141	ArgumentList	NULL		140880	1					
ANR	141142	Argument	NULL		140880	0					
ANR	141143	Identifier	NULL		140880	0					
ANR	141144	Argument	"""Cannot access self:: when no class scope is active"""		140880	1					
ANR	141145	PrimaryExpression	"""Cannot access self:: when no class scope is active"""		140880	0					
ANR	141146	ReturnStatement	return NULL ;	337:4:10754:10765	140880	1	True				
ANR	141147	Identifier	NULL		140880	0					
ANR	141148	ExpressionStatement	ce = scope	339:3:10775:10785	140880	1	True				
ANR	141149	AssignmentExpression	ce = scope		140880	0		=			
ANR	141150	Identifier	ce		140880	0					
ANR	141151	Identifier	scope		140880	1					
ANR	141152	ElseStatement	else		140880	0					
ANR	141153	IfStatement	"if ( class_name_len == sizeof ( ""parent"" ) - 1 && ! memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 ) )"		140880	0					
ANR	141154	Condition	"class_name_len == sizeof ( ""parent"" ) - 1 && ! memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 )"	340:13:10800:10897	140880	0	True				
ANR	141155	AndExpression	"class_name_len == sizeof ( ""parent"" ) - 1 && ! memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 )"		140880	0		&&			
ANR	141156	EqualityExpression	"class_name_len == sizeof ( ""parent"" ) - 1"		140880	0		==			
ANR	141157	Identifier	class_name_len		140880	0					
ANR	141158	AdditiveExpression	"sizeof ( ""parent"" ) - 1"		140880	1		-			
ANR	141159	SizeofExpression	"sizeof ( ""parent"" )"		140880	0					
ANR	141160	Sizeof	sizeof		140880	0					
ANR	141161	PrimaryExpression	"""parent"""		140880	1					
ANR	141162	PrimaryExpression	1		140880	1					
ANR	141163	UnaryOperationExpression	"! memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 )"		140880	1					
ANR	141164	UnaryOperator	!		140880	0					
ANR	141165	CallExpression	"memcmp ( lcname , ""parent"" , sizeof ( ""parent"" ) - 1 )"		140880	1					
ANR	141166	Callee	memcmp		140880	0					
ANR	141167	Identifier	memcmp		140880	0					
ANR	141168	ArgumentList	lcname		140880	1					
ANR	141169	Argument	lcname		140880	0					
ANR	141170	Identifier	lcname		140880	0					
ANR	141171	Argument	"""parent"""		140880	1					
ANR	141172	PrimaryExpression	"""parent"""		140880	0					
ANR	141173	Argument	"sizeof ( ""parent"" ) - 1"		140880	2					
ANR	141174	AdditiveExpression	"sizeof ( ""parent"" ) - 1"		140880	0		-			
ANR	141175	SizeofExpression	"sizeof ( ""parent"" )"		140880	0					
ANR	141176	Sizeof	sizeof		140880	0					
ANR	141177	PrimaryExpression	"""parent"""		140880	1					
ANR	141178	PrimaryExpression	1		140880	1					
ANR	141179	CompoundStatement		44:60:1265:1265	140880	1					
ANR	141180	IfStatement	if ( UNEXPECTED ( ! scope ) )		140880	0					
ANR	141181	Condition	UNEXPECTED ( ! scope )	342:7:10909:10926	140880	0	True				
ANR	141182	CallExpression	UNEXPECTED ( ! scope )		140880	0					
ANR	141183	Callee	UNEXPECTED		140880	0					
ANR	141184	Identifier	UNEXPECTED		140880	0					
ANR	141185	ArgumentList	! scope		140880	1					
ANR	141186	Argument	! scope		140880	0					
ANR	141187	UnaryOperationExpression	! scope		140880	0					
ANR	141188	UnaryOperator	!		140880	0					
ANR	141189	Identifier	scope		140880	1					
ANR	141190	CompoundStatement		45:27:1294:1294	140880	1					
ANR	141191	ExpressionStatement	"zend_throw_error ( NULL , ""Cannot access parent:: when no class scope is active"" )"	343:4:10935:11013	140880	0	True				
ANR	141192	CallExpression	"zend_throw_error ( NULL , ""Cannot access parent:: when no class scope is active"" )"		140880	0					
ANR	141193	Callee	zend_throw_error		140880	0					
ANR	141194	Identifier	zend_throw_error		140880	0					
ANR	141195	ArgumentList	NULL		140880	1					
ANR	141196	Argument	NULL		140880	0					
ANR	141197	Identifier	NULL		140880	0					
ANR	141198	Argument	"""Cannot access parent:: when no class scope is active"""		140880	1					
ANR	141199	PrimaryExpression	"""Cannot access parent:: when no class scope is active"""		140880	0					
ANR	141200	ReturnStatement	return NULL ;	344:4:11019:11030	140880	1	True				
ANR	141201	Identifier	NULL		140880	0					
ANR	141202	ElseStatement	else		140880	0					
ANR	141203	IfStatement	if ( UNEXPECTED ( ! scope -> parent ) )		140880	0					
ANR	141204	Condition	UNEXPECTED ( ! scope -> parent )	345:14:11046:11071	140880	0	True				
ANR	141205	CallExpression	UNEXPECTED ( ! scope -> parent )		140880	0					
ANR	141206	Callee	UNEXPECTED		140880	0					
ANR	141207	Identifier	UNEXPECTED		140880	0					
ANR	141208	ArgumentList	! scope -> parent		140880	1					
ANR	141209	Argument	! scope -> parent		140880	0					
ANR	141210	UnaryOperationExpression	! scope -> parent		140880	0					
ANR	141211	UnaryOperator	!		140880	0					
ANR	141212	PtrMemberAccess	scope -> parent		140880	1					
ANR	141213	Identifier	scope		140880	0					
ANR	141214	Identifier	parent		140880	1					
ANR	141215	CompoundStatement		48:42:1439:1439	140880	1					
ANR	141216	ExpressionStatement	"zend_throw_error ( NULL , ""Cannot access parent:: when current class scope has no parent"" )"	346:4:11080:11167	140880	0	True				
ANR	141217	CallExpression	"zend_throw_error ( NULL , ""Cannot access parent:: when current class scope has no parent"" )"		140880	0					
ANR	141218	Callee	zend_throw_error		140880	0					
ANR	141219	Identifier	zend_throw_error		140880	0					
ANR	141220	ArgumentList	NULL		140880	1					
ANR	141221	Argument	NULL		140880	0					
ANR	141222	Identifier	NULL		140880	0					
ANR	141223	Argument	"""Cannot access parent:: when current class scope has no parent"""		140880	1					
ANR	141224	PrimaryExpression	"""Cannot access parent:: when current class scope has no parent"""		140880	0					
ANR	141225	ReturnStatement	return NULL ;	347:4:11173:11184	140880	1	True				
ANR	141226	Identifier	NULL		140880	0					
ANR	141227	ElseStatement	else		140880	0					
ANR	141228	CompoundStatement		51:10:1561:1561	140880	0					
ANR	141229	ExpressionStatement	ce = scope -> parent	349:4:11202:11220	140880	0	True				
ANR	141230	AssignmentExpression	ce = scope -> parent		140880	0		=			
ANR	141231	Identifier	ce		140880	0					
ANR	141232	PtrMemberAccess	scope -> parent		140880	1					
ANR	141233	Identifier	scope		140880	0					
ANR	141234	Identifier	parent		140880	1					
ANR	141235	ElseStatement	else		140880	0					
ANR	141236	IfStatement	"if ( class_name_len == sizeof ( ""static"" ) - 1 && ! memcmp ( lcname , ""static"" , sizeof ( ""static"" ) - 1 ) )"		140880	0					
ANR	141237	Condition	"class_name_len == sizeof ( ""static"" ) - 1 && ! memcmp ( lcname , ""static"" , sizeof ( ""static"" ) - 1 )"	351:13:11240:11337	140880	0	True				
ANR	141238	AndExpression	"class_name_len == sizeof ( ""static"" ) - 1 && ! memcmp ( lcname , ""static"" , sizeof ( ""static"" ) - 1 )"		140880	0		&&			
ANR	141239	EqualityExpression	"class_name_len == sizeof ( ""static"" ) - 1"		140880	0		==			
ANR	141240	Identifier	class_name_len		140880	0					
ANR	141241	AdditiveExpression	"sizeof ( ""static"" ) - 1"		140880	1		-			
ANR	141242	SizeofExpression	"sizeof ( ""static"" )"		140880	0					
ANR	141243	Sizeof	sizeof		140880	0					
ANR	141244	PrimaryExpression	"""static"""		140880	1					
ANR	141245	PrimaryExpression	1		140880	1					
ANR	141246	UnaryOperationExpression	"! memcmp ( lcname , ""static"" , sizeof ( ""static"" ) - 1 )"		140880	1					
ANR	141247	UnaryOperator	!		140880	0					
ANR	141248	CallExpression	"memcmp ( lcname , ""static"" , sizeof ( ""static"" ) - 1 )"		140880	1					
ANR	141249	Callee	memcmp		140880	0					
ANR	141250	Identifier	memcmp		140880	0					
ANR	141251	ArgumentList	lcname		140880	1					
ANR	141252	Argument	lcname		140880	0					
ANR	141253	Identifier	lcname		140880	0					
ANR	141254	Argument	"""static"""		140880	1					
ANR	141255	PrimaryExpression	"""static"""		140880	0					
ANR	141256	Argument	"sizeof ( ""static"" ) - 1"		140880	2					
ANR	141257	AdditiveExpression	"sizeof ( ""static"" ) - 1"		140880	0		-			
ANR	141258	SizeofExpression	"sizeof ( ""static"" )"		140880	0					
ANR	141259	Sizeof	sizeof		140880	0					
ANR	141260	PrimaryExpression	"""static"""		140880	1					
ANR	141261	PrimaryExpression	1		140880	1					
ANR	141262	CompoundStatement		55:60:1705:1705	140880	1					
ANR	141263	ExpressionStatement	ce = zend_get_called_scope ( EG ( current_execute_data ) )	353:3:11345:11397	140880	0	True				
ANR	141264	AssignmentExpression	ce = zend_get_called_scope ( EG ( current_execute_data ) )		140880	0		=			
ANR	141265	Identifier	ce		140880	0					
ANR	141266	CallExpression	zend_get_called_scope ( EG ( current_execute_data ) )		140880	1					
ANR	141267	Callee	zend_get_called_scope		140880	0					
ANR	141268	Identifier	zend_get_called_scope		140880	0					
ANR	141269	ArgumentList	EG ( current_execute_data )		140880	1					
ANR	141270	Argument	EG ( current_execute_data )		140880	0					
ANR	141271	CallExpression	EG ( current_execute_data )		140880	0					
ANR	141272	Callee	EG		140880	0					
ANR	141273	Identifier	EG		140880	0					
ANR	141274	ArgumentList	current_execute_data		140880	1					
ANR	141275	Argument	current_execute_data		140880	0					
ANR	141276	Identifier	current_execute_data		140880	0					
ANR	141277	IfStatement	if ( UNEXPECTED ( ! ce ) )		140880	1					
ANR	141278	Condition	UNEXPECTED ( ! ce )	354:7:11406:11420	140880	0	True				
ANR	141279	CallExpression	UNEXPECTED ( ! ce )		140880	0					
ANR	141280	Callee	UNEXPECTED		140880	0					
ANR	141281	Identifier	UNEXPECTED		140880	0					
ANR	141282	ArgumentList	! ce		140880	1					
ANR	141283	Argument	! ce		140880	0					
ANR	141284	UnaryOperationExpression	! ce		140880	0					
ANR	141285	UnaryOperator	!		140880	0					
ANR	141286	Identifier	ce		140880	1					
ANR	141287	CompoundStatement		57:24:1788:1788	140880	1					
ANR	141288	ExpressionStatement	"zend_throw_error ( NULL , ""Cannot access static:: when no class scope is active"" )"	355:4:11429:11507	140880	0	True				
ANR	141289	CallExpression	"zend_throw_error ( NULL , ""Cannot access static:: when no class scope is active"" )"		140880	0					
ANR	141290	Callee	zend_throw_error		140880	0					
ANR	141291	Identifier	zend_throw_error		140880	0					
ANR	141292	ArgumentList	NULL		140880	1					
ANR	141293	Argument	NULL		140880	0					
ANR	141294	Identifier	NULL		140880	0					
ANR	141295	Argument	"""Cannot access static:: when no class scope is active"""		140880	1					
ANR	141296	PrimaryExpression	"""Cannot access static:: when no class scope is active"""		140880	0					
ANR	141297	ReturnStatement	return NULL ;	356:4:11513:11524	140880	1	True				
ANR	141298	Identifier	NULL		140880	0					
ANR	141299	ElseStatement	else		140880	0					
ANR	141300	CompoundStatement		61:9:1905:1905	140880	0					
ANR	141301	ExpressionStatement	"ce = zend_fetch_class ( class_name , flags )"	359:3:11545:11585	140880	0	True				
ANR	141302	AssignmentExpression	"ce = zend_fetch_class ( class_name , flags )"		140880	0		=			
ANR	141303	Identifier	ce		140880	0					
ANR	141304	CallExpression	"zend_fetch_class ( class_name , flags )"		140880	1					
ANR	141305	Callee	zend_fetch_class		140880	0					
ANR	141306	Identifier	zend_fetch_class		140880	0					
ANR	141307	ArgumentList	class_name		140880	1					
ANR	141308	Argument	class_name		140880	0					
ANR	141309	Identifier	class_name		140880	0					
ANR	141310	Argument	flags		140880	1					
ANR	141311	Identifier	flags		140880	0					
ANR	141312	ExpressionStatement	"free_alloca ( lcname , use_heap )"	361:2:11593:11622	140880	11	True				
ANR	141313	CallExpression	"free_alloca ( lcname , use_heap )"		140880	0					
ANR	141314	Callee	free_alloca		140880	0					
ANR	141315	Identifier	free_alloca		140880	0					
ANR	141316	ArgumentList	lcname		140880	1					
ANR	141317	Argument	lcname		140880	0					
ANR	141318	Identifier	lcname		140880	0					
ANR	141319	Argument	use_heap		140880	1					
ANR	141320	Identifier	use_heap		140880	0					
ANR	141321	IfStatement	if ( ce )		140880	12					
ANR	141322	Condition	ce	362:6:11630:11631	140880	0	True				
ANR	141323	Identifier	ce		140880	0					
ANR	141324	CompoundStatement		65:10:1999:1999	140880	1					
ANR	141325	ExpressionStatement	"ret_constant = zend_hash_find ( & ce -> constants_table , constant_name )"	363:3:11639:11705	140880	0	True				
ANR	141326	AssignmentExpression	"ret_constant = zend_hash_find ( & ce -> constants_table , constant_name )"		140880	0		=			
ANR	141327	Identifier	ret_constant		140880	0					
ANR	141328	CallExpression	"zend_hash_find ( & ce -> constants_table , constant_name )"		140880	1					
ANR	141329	Callee	zend_hash_find		140880	0					
ANR	141330	Identifier	zend_hash_find		140880	0					
ANR	141331	ArgumentList	& ce -> constants_table		140880	1					
ANR	141332	Argument	& ce -> constants_table		140880	0					
ANR	141333	UnaryOperationExpression	& ce -> constants_table		140880	0					
ANR	141334	UnaryOperator	&		140880	0					
ANR	141335	PtrMemberAccess	ce -> constants_table		140880	1					
ANR	141336	Identifier	ce		140880	0					
ANR	141337	Identifier	constants_table		140880	1					
ANR	141338	Argument	constant_name		140880	1					
ANR	141339	Identifier	constant_name		140880	0					
ANR	141340	IfStatement	if ( ret_constant == NULL )		140880	1					
ANR	141341	Condition	ret_constant == NULL	364:7:11714:11733	140880	0	True				
ANR	141342	EqualityExpression	ret_constant == NULL		140880	0		==			
ANR	141343	Identifier	ret_constant		140880	0					
ANR	141344	Identifier	NULL		140880	1					
ANR	141345	CompoundStatement		67:29:2101:2101	140880	1					
ANR	141346	IfStatement	if ( ( flags & ZEND_FETCH_CLASS_SILENT ) == 0 )		140880	0					
ANR	141347	Condition	( flags & ZEND_FETCH_CLASS_SILENT ) == 0	365:8:11746:11783	140880	0	True				
ANR	141348	EqualityExpression	( flags & ZEND_FETCH_CLASS_SILENT ) == 0		140880	0		==			
ANR	141349	BitAndExpression	flags & ZEND_FETCH_CLASS_SILENT		140880	0		&			
ANR	141350	Identifier	flags		140880	0					
ANR	141351	Identifier	ZEND_FETCH_CLASS_SILENT		140880	1					
ANR	141352	PrimaryExpression	0		140880	1					
ANR	141353	CompoundStatement		68:48:2151:2151	140880	1					
ANR	141354	ExpressionStatement	"zend_throw_error ( NULL , ""Undefined class constant '%s::%s'"" , ZSTR_VAL ( class_name ) , ZSTR_VAL ( constant_name ) )"	366:5:11793:11899	140880	0	True				
ANR	141355	CallExpression	"zend_throw_error ( NULL , ""Undefined class constant '%s::%s'"" , ZSTR_VAL ( class_name ) , ZSTR_VAL ( constant_name ) )"		140880	0					
ANR	141356	Callee	zend_throw_error		140880	0					
ANR	141357	Identifier	zend_throw_error		140880	0					
ANR	141358	ArgumentList	NULL		140880	1					
ANR	141359	Argument	NULL		140880	0					
ANR	141360	Identifier	NULL		140880	0					
ANR	141361	Argument	"""Undefined class constant '%s::%s'"""		140880	1					
ANR	141362	PrimaryExpression	"""Undefined class constant '%s::%s'"""		140880	0					
ANR	141363	Argument	ZSTR_VAL ( class_name )		140880	2					
ANR	141364	CallExpression	ZSTR_VAL ( class_name )		140880	0					
ANR	141365	Callee	ZSTR_VAL		140880	0					
ANR	141366	Identifier	ZSTR_VAL		140880	0					
ANR	141367	ArgumentList	class_name		140880	1					
ANR	141368	Argument	class_name		140880	0					
ANR	141369	Identifier	class_name		140880	0					
ANR	141370	Argument	ZSTR_VAL ( constant_name )		140880	3					
ANR	141371	CallExpression	ZSTR_VAL ( constant_name )		140880	0					
ANR	141372	Callee	ZSTR_VAL		140880	0					
ANR	141373	Identifier	ZSTR_VAL		140880	0					
ANR	141374	ArgumentList	constant_name		140880	1					
ANR	141375	Argument	constant_name		140880	0					
ANR	141376	Identifier	constant_name		140880	0					
ANR	141377	ExpressionStatement	zend_string_release ( class_name )	367:5:11906:11937	140880	1	True				
ANR	141378	CallExpression	zend_string_release ( class_name )		140880	0					
ANR	141379	Callee	zend_string_release		140880	0					
ANR	141380	Identifier	zend_string_release		140880	0					
ANR	141381	ArgumentList	class_name		140880	1					
ANR	141382	Argument	class_name		140880	0					
ANR	141383	Identifier	class_name		140880	0					
ANR	141384	ExpressionStatement	zend_string_free ( constant_name )	368:5:11944:11975	140880	2	True				
ANR	141385	CallExpression	zend_string_free ( constant_name )		140880	0					
ANR	141386	Callee	zend_string_free		140880	0					
ANR	141387	Identifier	zend_string_free		140880	0					
ANR	141388	ArgumentList	constant_name		140880	1					
ANR	141389	Argument	constant_name		140880	0					
ANR	141390	Identifier	constant_name		140880	0					
ANR	141391	ReturnStatement	return NULL ;	369:5:11982:11993	140880	3	True				
ANR	141392	Identifier	NULL		140880	0					
ANR	141393	ElseStatement	else		140880	0					
ANR	141394	IfStatement	if ( Z_ISREF_P ( ret_constant ) )		140880	0					
ANR	141395	Condition	Z_ISREF_P ( ret_constant )	371:14:12015:12037	140880	0	True				
ANR	141396	CallExpression	Z_ISREF_P ( ret_constant )		140880	0					
ANR	141397	Callee	Z_ISREF_P		140880	0					
ANR	141398	Identifier	Z_ISREF_P		140880	0					
ANR	141399	ArgumentList	ret_constant		140880	1					
ANR	141400	Argument	ret_constant		140880	0					
ANR	141401	Identifier	ret_constant		140880	0					
ANR	141402	CompoundStatement		74:39:2405:2405	140880	1					
ANR	141403	ExpressionStatement	ret_constant = Z_REFVAL_P ( ret_constant )	372:4:12046:12085	140880	0	True				
ANR	141404	AssignmentExpression	ret_constant = Z_REFVAL_P ( ret_constant )		140880	0		=			
ANR	141405	Identifier	ret_constant		140880	0					
ANR	141406	CallExpression	Z_REFVAL_P ( ret_constant )		140880	1					
ANR	141407	Callee	Z_REFVAL_P		140880	0					
ANR	141408	Identifier	Z_REFVAL_P		140880	0					
ANR	141409	ArgumentList	ret_constant		140880	1					
ANR	141410	Argument	ret_constant		140880	0					
ANR	141411	Identifier	ret_constant		140880	0					
ANR	141412	ExpressionStatement	zend_string_release ( class_name )	375:2:12098:12129	140880	13	True				
ANR	141413	CallExpression	zend_string_release ( class_name )		140880	0					
ANR	141414	Callee	zend_string_release		140880	0					
ANR	141415	Identifier	zend_string_release		140880	0					
ANR	141416	ArgumentList	class_name		140880	1					
ANR	141417	Argument	class_name		140880	0					
ANR	141418	Identifier	class_name		140880	0					
ANR	141419	ExpressionStatement	zend_string_free ( constant_name )	376:2:12133:12164	140880	14	True				
ANR	141420	CallExpression	zend_string_free ( constant_name )		140880	0					
ANR	141421	Callee	zend_string_free		140880	0					
ANR	141422	Identifier	zend_string_free		140880	0					
ANR	141423	ArgumentList	constant_name		140880	1					
ANR	141424	Argument	constant_name		140880	0					
ANR	141425	Identifier	constant_name		140880	0					
ANR	141426	IfStatement	if ( ret_constant && Z_CONSTANT_P ( ret_constant ) )		140880	15					
ANR	141427	Condition	ret_constant && Z_CONSTANT_P ( ret_constant )	377:6:12172:12213	140880	0	True				
ANR	141428	AndExpression	ret_constant && Z_CONSTANT_P ( ret_constant )		140880	0		&&			
ANR	141429	Identifier	ret_constant		140880	0					
ANR	141430	CallExpression	Z_CONSTANT_P ( ret_constant )		140880	1					
ANR	141431	Callee	Z_CONSTANT_P		140880	0					
ANR	141432	Identifier	Z_CONSTANT_P		140880	0					
ANR	141433	ArgumentList	ret_constant		140880	1					
ANR	141434	Argument	ret_constant		140880	0					
ANR	141435	Identifier	ret_constant		140880	0					
ANR	141436	CompoundStatement		80:50:2581:2581	140880	1					
ANR	141437	IfStatement	"if ( UNEXPECTED ( zval_update_constant_ex ( ret_constant , 1 , ce ) != SUCCESS ) )"		140880	0					
ANR	141438	Condition	"UNEXPECTED ( zval_update_constant_ex ( ret_constant , 1 , ce ) != SUCCESS )"	378:7:12225:12291	140880	0	True				
ANR	141439	CallExpression	"UNEXPECTED ( zval_update_constant_ex ( ret_constant , 1 , ce ) != SUCCESS )"		140880	0					
ANR	141440	Callee	UNEXPECTED		140880	0					
ANR	141441	Identifier	UNEXPECTED		140880	0					
ANR	141442	ArgumentList	"zval_update_constant_ex ( ret_constant , 1 , ce ) != SUCCESS"		140880	1					
ANR	141443	Argument	"zval_update_constant_ex ( ret_constant , 1 , ce ) != SUCCESS"		140880	0					
ANR	141444	EqualityExpression	"zval_update_constant_ex ( ret_constant , 1 , ce ) != SUCCESS"		140880	0		!=			
ANR	141445	CallExpression	"zval_update_constant_ex ( ret_constant , 1 , ce )"		140880	0					
ANR	141446	Callee	zval_update_constant_ex		140880	0					
ANR	141447	Identifier	zval_update_constant_ex		140880	0					
ANR	141448	ArgumentList	ret_constant		140880	1					
ANR	141449	Argument	ret_constant		140880	0					
ANR	141450	Identifier	ret_constant		140880	0					
ANR	141451	Argument	1		140880	1					
ANR	141452	PrimaryExpression	1		140880	0					
ANR	141453	Argument	ce		140880	2					
ANR	141454	Identifier	ce		140880	0					
ANR	141455	Identifier	SUCCESS		140880	1					
ANR	141456	CompoundStatement		81:76:2659:2659	140880	1					
ANR	141457	ReturnStatement	return NULL ;	379:4:12300:12311	140880	0	True				
ANR	141458	Identifier	NULL		140880	0					
ANR	141459	ReturnStatement	return ret_constant ;	382:2:12324:12343	140880	16	True				
ANR	141460	Identifier	ret_constant		140880	0					
ANR	141461	IfStatement	"if ( ( colon = zend_memrchr ( name , '\\\\' , name_len ) ) != NULL )"		140880	8					
ANR	141462	Condition	"( colon = zend_memrchr ( name , '\\\\' , name_len ) ) != NULL"	386:5:12380:12431	140880	0	True				
ANR	141463	EqualityExpression	"( colon = zend_memrchr ( name , '\\\\' , name_len ) ) != NULL"		140880	0		!=			
ANR	141464	AssignmentExpression	"colon = zend_memrchr ( name , '\\\\' , name_len )"		140880	0		=			
ANR	141465	Identifier	colon		140880	0					
ANR	141466	CallExpression	"zend_memrchr ( name , '\\\\' , name_len )"		140880	1					
ANR	141467	Callee	zend_memrchr		140880	0					
ANR	141468	Identifier	zend_memrchr		140880	0					
ANR	141469	ArgumentList	name		140880	1					
ANR	141470	Argument	name		140880	0					
ANR	141471	Identifier	name		140880	0					
ANR	141472	Argument	'\\\\'		140880	1					
ANR	141473	PrimaryExpression	'\\\\'		140880	0					
ANR	141474	Argument	name_len		140880	2					
ANR	141475	Identifier	name_len		140880	0					
ANR	141476	Identifier	NULL		140880	1					
ANR	141477	CompoundStatement		95:2:2977:2994	140880	1					
ANR	141478	IdentifierDeclStatement	int prefix_len = colon - name ;	388:2:12469:12498	140880	0	True				
ANR	141479	IdentifierDecl	prefix_len = colon - name		140880	0					
ANR	141480	IdentifierDeclType	int		140880	0					
ANR	141481	Identifier	prefix_len		140880	1					
ANR	141482	AssignmentExpression	prefix_len = colon - name		140880	2		=			
ANR	141483	Identifier	prefix_len		140880	0					
ANR	141484	AdditiveExpression	colon - name		140880	1		-			
ANR	141485	Identifier	colon		140880	0					
ANR	141486	Identifier	name		140880	1					
ANR	141487	IdentifierDeclStatement	size_t const_name_len = name_len - prefix_len - 1 ;	389:2:12502:12551	140880	1	True				
ANR	141488	IdentifierDecl	const_name_len = name_len - prefix_len - 1		140880	0					
ANR	141489	IdentifierDeclType	size_t		140880	0					
ANR	141490	Identifier	const_name_len		140880	1					
ANR	141491	AssignmentExpression	const_name_len = name_len - prefix_len - 1		140880	2		=			
ANR	141492	Identifier	const_name_len		140880	0					
ANR	141493	AdditiveExpression	name_len - prefix_len - 1		140880	1		-			
ANR	141494	Identifier	name_len		140880	0					
ANR	141495	AdditiveExpression	prefix_len - 1		140880	1		-			
ANR	141496	Identifier	prefix_len		140880	0					
ANR	141497	PrimaryExpression	1		140880	1					
ANR	141498	IdentifierDeclStatement	const char * constant_name = colon + 1 ;	390:2:12555:12592	140880	2	True				
ANR	141499	IdentifierDecl	* constant_name = colon + 1		140880	0					
ANR	141500	IdentifierDeclType	const char *		140880	0					
ANR	141501	Identifier	constant_name		140880	1					
ANR	141502	AssignmentExpression	* constant_name = colon + 1		140880	2		=			
ANR	141503	Identifier	constant_name		140880	0					
ANR	141504	AdditiveExpression	colon + 1		140880	1		+			
ANR	141505	Identifier	colon		140880	0					
ANR	141506	PrimaryExpression	1		140880	1					
ANR	141507	IdentifierDeclStatement	char * lcname ;	391:2:12596:12608	140880	3	True				
ANR	141508	IdentifierDecl	* lcname		140880	0					
ANR	141509	IdentifierDeclType	char *		140880	0					
ANR	141510	Identifier	lcname		140880	1					
ANR	141511	IdentifierDeclStatement	size_t lcname_len ;	392:2:12612:12629	140880	4	True				
ANR	141512	IdentifierDecl	lcname_len		140880	0					
ANR	141513	IdentifierDeclType	size_t		140880	0					
ANR	141514	Identifier	lcname_len		140880	1					
ANR	141515	Statement	ALLOCA_FLAG	393:2:12633:12643	140880	5	True				
ANR	141516	ExpressionStatement	( use_heap ) lcname_len = prefix_len + 1 + const_name_len	393:13:12644:12702	140880	6	True				
ANR	141517	AssignmentExpression	( use_heap ) lcname_len = prefix_len + 1 + const_name_len		140880	0		=			
ANR	141518	CastExpression	( use_heap ) lcname_len		140880	0					
ANR	141519	CastTarget	use_heap		140880	0					
ANR	141520	Identifier	lcname_len		140880	1					
ANR	141521	AdditiveExpression	prefix_len + 1 + const_name_len		140880	1		+			
ANR	141522	Identifier	prefix_len		140880	0					
ANR	141523	AdditiveExpression	1 + const_name_len		140880	1		+			
ANR	141524	PrimaryExpression	1		140880	0					
ANR	141525	Identifier	const_name_len		140880	1					
ANR	141526	ExpressionStatement	"lcname = do_alloca ( lcname_len + 1 , use_heap )"	396:2:12706:12750	140880	7	True				
ANR	141527	AssignmentExpression	"lcname = do_alloca ( lcname_len + 1 , use_heap )"		140880	0		=			
ANR	141528	Identifier	lcname		140880	0					
ANR	141529	CallExpression	"do_alloca ( lcname_len + 1 , use_heap )"		140880	1					
ANR	141530	Callee	do_alloca		140880	0					
ANR	141531	Identifier	do_alloca		140880	0					
ANR	141532	ArgumentList	lcname_len + 1		140880	1					
ANR	141533	Argument	lcname_len + 1		140880	0					
ANR	141534	AdditiveExpression	lcname_len + 1		140880	0		+			
ANR	141535	Identifier	lcname_len		140880	0					
ANR	141536	PrimaryExpression	1		140880	1					
ANR	141537	Argument	use_heap		140880	1					
ANR	141538	Identifier	use_heap		140880	0					
ANR	141539	ExpressionStatement	"zend_str_tolower_copy ( lcname , name , prefix_len )"	397:2:12754:12801	140880	8	True				
ANR	141540	CallExpression	"zend_str_tolower_copy ( lcname , name , prefix_len )"		140880	0					
ANR	141541	Callee	zend_str_tolower_copy		140880	0					
ANR	141542	Identifier	zend_str_tolower_copy		140880	0					
ANR	141543	ArgumentList	lcname		140880	1					
ANR	141544	Argument	lcname		140880	0					
ANR	141545	Identifier	lcname		140880	0					
ANR	141546	Argument	name		140880	1					
ANR	141547	Identifier	name		140880	0					
ANR	141548	Argument	prefix_len		140880	2					
ANR	141549	Identifier	prefix_len		140880	0					
ANR	141550	ExpressionStatement	lcname [ prefix_len ] = '\\\\'	400:2:12843:12868	140880	9	True				
ANR	141551	AssignmentExpression	lcname [ prefix_len ] = '\\\\'		140880	0		=			
ANR	141552	ArrayIndexing	lcname [ prefix_len ]		140880	0					
ANR	141553	Identifier	lcname		140880	0					
ANR	141554	Identifier	prefix_len		140880	1					
ANR	141555	PrimaryExpression	'\\\\'		140880	1					
ANR	141556	ExpressionStatement	"memcpy ( lcname + prefix_len + 1 , constant_name , const_name_len + 1 )"	401:2:12872:12938	140880	10	True				
ANR	141557	CallExpression	"memcpy ( lcname + prefix_len + 1 , constant_name , const_name_len + 1 )"		140880	0					
ANR	141558	Callee	memcpy		140880	0					
ANR	141559	Identifier	memcpy		140880	0					
ANR	141560	ArgumentList	lcname + prefix_len + 1		140880	1					
ANR	141561	Argument	lcname + prefix_len + 1		140880	0					
ANR	141562	AdditiveExpression	lcname + prefix_len + 1		140880	0		+			
ANR	141563	Identifier	lcname		140880	0					
ANR	141564	AdditiveExpression	prefix_len + 1		140880	1		+			
ANR	141565	Identifier	prefix_len		140880	0					
ANR	141566	PrimaryExpression	1		140880	1					
ANR	141567	Argument	constant_name		140880	1					
ANR	141568	Identifier	constant_name		140880	0					
ANR	141569	Argument	const_name_len + 1		140880	2					
ANR	141570	AdditiveExpression	const_name_len + 1		140880	0		+			
ANR	141571	Identifier	const_name_len		140880	0					
ANR	141572	PrimaryExpression	1		140880	1					
ANR	141573	IfStatement	"if ( ( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len ) ) == NULL )"		140880	11					
ANR	141574	Condition	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len ) ) == NULL"	403:6:12947:13022	140880	0	True				
ANR	141575	EqualityExpression	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len ) ) == NULL"		140880	0		==			
ANR	141576	AssignmentExpression	"c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len )"		140880	0		=			
ANR	141577	Identifier	c		140880	0					
ANR	141578	CallExpression	"zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len )"		140880	1					
ANR	141579	Callee	zend_hash_str_find_ptr		140880	0					
ANR	141580	Identifier	zend_hash_str_find_ptr		140880	0					
ANR	141581	ArgumentList	EG ( zend_constants )		140880	1					
ANR	141582	Argument	EG ( zend_constants )		140880	0					
ANR	141583	CallExpression	EG ( zend_constants )		140880	0					
ANR	141584	Callee	EG		140880	0					
ANR	141585	Identifier	EG		140880	0					
ANR	141586	ArgumentList	zend_constants		140880	1					
ANR	141587	Argument	zend_constants		140880	0					
ANR	141588	Identifier	zend_constants		140880	0					
ANR	141589	Argument	lcname		140880	1					
ANR	141590	Identifier	lcname		140880	0					
ANR	141591	Argument	lcname_len		140880	2					
ANR	141592	Identifier	lcname_len		140880	0					
ANR	141593	Identifier	NULL		140880	1					
ANR	141594	CompoundStatement		106:84:3390:3390	140880	1					
ANR	141595	ExpressionStatement	"zend_str_tolower ( lcname + prefix_len + 1 , const_name_len )"	405:3:13053:13110	140880	0	True				
ANR	141596	CallExpression	"zend_str_tolower ( lcname + prefix_len + 1 , const_name_len )"		140880	0					
ANR	141597	Callee	zend_str_tolower		140880	0					
ANR	141598	Identifier	zend_str_tolower		140880	0					
ANR	141599	ArgumentList	lcname + prefix_len + 1		140880	1					
ANR	141600	Argument	lcname + prefix_len + 1		140880	0					
ANR	141601	AdditiveExpression	lcname + prefix_len + 1		140880	0		+			
ANR	141602	Identifier	lcname		140880	0					
ANR	141603	AdditiveExpression	prefix_len + 1		140880	1		+			
ANR	141604	Identifier	prefix_len		140880	0					
ANR	141605	PrimaryExpression	1		140880	1					
ANR	141606	Argument	const_name_len		140880	1					
ANR	141607	Identifier	const_name_len		140880	0					
ANR	141608	IfStatement	"if ( ( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len ) ) != NULL )"		140880	1					
ANR	141609	Condition	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len ) ) != NULL"	406:7:13119:13194	140880	0	True				
ANR	141610	EqualityExpression	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len ) ) != NULL"		140880	0		!=			
ANR	141611	AssignmentExpression	"c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len )"		140880	0		=			
ANR	141612	Identifier	c		140880	0					
ANR	141613	CallExpression	"zend_hash_str_find_ptr ( EG ( zend_constants ) , lcname , lcname_len )"		140880	1					
ANR	141614	Callee	zend_hash_str_find_ptr		140880	0					
ANR	141615	Identifier	zend_hash_str_find_ptr		140880	0					
ANR	141616	ArgumentList	EG ( zend_constants )		140880	1					
ANR	141617	Argument	EG ( zend_constants )		140880	0					
ANR	141618	CallExpression	EG ( zend_constants )		140880	0					
ANR	141619	Callee	EG		140880	0					
ANR	141620	Identifier	EG		140880	0					
ANR	141621	ArgumentList	zend_constants		140880	1					
ANR	141622	Argument	zend_constants		140880	0					
ANR	141623	Identifier	zend_constants		140880	0					
ANR	141624	Argument	lcname		140880	1					
ANR	141625	Identifier	lcname		140880	0					
ANR	141626	Argument	lcname_len		140880	2					
ANR	141627	Identifier	lcname_len		140880	0					
ANR	141628	Identifier	NULL		140880	1					
ANR	141629	CompoundStatement		109:85:3562:3562	140880	1					
ANR	141630	IfStatement	if ( ( c -> flags & CONST_CS ) != 0 )		140880	0					
ANR	141631	Condition	( c -> flags & CONST_CS ) != 0	407:8:13207:13232	140880	0	True				
ANR	141632	EqualityExpression	( c -> flags & CONST_CS ) != 0		140880	0		!=			
ANR	141633	BitAndExpression	c -> flags & CONST_CS		140880	0		&			
ANR	141634	PtrMemberAccess	c -> flags		140880	0					
ANR	141635	Identifier	c		140880	0					
ANR	141636	Identifier	flags		140880	1					
ANR	141637	Identifier	CONST_CS		140880	1					
ANR	141638	PrimaryExpression	0		140880	1					
ANR	141639	CompoundStatement		110:36:3600:3600	140880	1					
ANR	141640	ExpressionStatement	c = NULL	408:5:13242:13250	140880	0	True				
ANR	141641	AssignmentExpression	c = NULL		140880	0		=			
ANR	141642	Identifier	c		140880	0					
ANR	141643	Identifier	NULL		140880	1					
ANR	141644	ExpressionStatement	"free_alloca ( lcname , use_heap )"	412:2:13269:13298	140880	12	True				
ANR	141645	CallExpression	"free_alloca ( lcname , use_heap )"		140880	0					
ANR	141646	Callee	free_alloca		140880	0					
ANR	141647	Identifier	free_alloca		140880	0					
ANR	141648	ArgumentList	lcname		140880	1					
ANR	141649	Argument	lcname		140880	0					
ANR	141650	Identifier	lcname		140880	0					
ANR	141651	Argument	use_heap		140880	1					
ANR	141652	Identifier	use_heap		140880	0					
ANR	141653	IfStatement	if ( c )		140880	13					
ANR	141654	Condition	c	413:6:13306:13306	140880	0	True				
ANR	141655	Identifier	c		140880	0					
ANR	141656	CompoundStatement		116:9:3674:3674	140880	1					
ANR	141657	ReturnStatement	return & c -> value ;	414:3:13314:13330	140880	0	True				
ANR	141658	UnaryOperationExpression	& c -> value		140880	0					
ANR	141659	UnaryOperator	&		140880	0					
ANR	141660	PtrMemberAccess	c -> value		140880	1					
ANR	141661	Identifier	c		140880	0					
ANR	141662	Identifier	value		140880	1					
ANR	141663	IfStatement	if ( ( flags & IS_CONSTANT_UNQUALIFIED ) != 0 )		140880	14					
ANR	141664	Condition	( flags & IS_CONSTANT_UNQUALIFIED ) != 0	417:6:13418:13455	140880	0	True				
ANR	141665	EqualityExpression	( flags & IS_CONSTANT_UNQUALIFIED ) != 0		140880	0		!=			
ANR	141666	BitAndExpression	flags & IS_CONSTANT_UNQUALIFIED		140880	0		&			
ANR	141667	Identifier	flags		140880	0					
ANR	141668	Identifier	IS_CONSTANT_UNQUALIFIED		140880	1					
ANR	141669	PrimaryExpression	0		140880	1					
ANR	141670	CompoundStatement		120:46:3823:3823	140880	1					
ANR	141671	ReturnStatement	"return zend_get_constant_str ( constant_name , const_name_len ) ;"	418:3:13463:13522	140880	0	True				
ANR	141672	CallExpression	"zend_get_constant_str ( constant_name , const_name_len )"		140880	0					
ANR	141673	Callee	zend_get_constant_str		140880	0					
ANR	141674	Identifier	zend_get_constant_str		140880	0					
ANR	141675	ArgumentList	constant_name		140880	1					
ANR	141676	Argument	constant_name		140880	0					
ANR	141677	Identifier	constant_name		140880	0					
ANR	141678	Argument	const_name_len		140880	1					
ANR	141679	Identifier	const_name_len		140880	0					
ANR	141680	ReturnStatement	return NULL ;	420:2:13530:13541	140880	15	True				
ANR	141681	Identifier	NULL		140880	0					
ANR	141682	IfStatement	if ( cname )		140880	9					
ANR	141683	Condition	cname	423:5:13552:13556	140880	0	True				
ANR	141684	Identifier	cname		140880	0					
ANR	141685	CompoundStatement		126:12:3924:3924	140880	1					
ANR	141686	ReturnStatement	return zend_get_constant ( cname ) ;	424:2:13563:13594	140880	0	True				
ANR	141687	CallExpression	zend_get_constant ( cname )		140880	0					
ANR	141688	Callee	zend_get_constant		140880	0					
ANR	141689	Identifier	zend_get_constant		140880	0					
ANR	141690	ArgumentList	cname		140880	1					
ANR	141691	Argument	cname		140880	0					
ANR	141692	Identifier	cname		140880	0					
ANR	141693	ElseStatement	else		140880	0					
ANR	141694	CompoundStatement		128:8:3969:3969	140880	0					
ANR	141695	ReturnStatement	"return zend_get_constant_str ( name , name_len ) ;"	426:2:13608:13652	140880	0	True				
ANR	141696	CallExpression	"zend_get_constant_str ( name , name_len )"		140880	0					
ANR	141697	Callee	zend_get_constant_str		140880	0					
ANR	141698	Identifier	zend_get_constant_str		140880	0					
ANR	141699	ArgumentList	name		140880	1					
ANR	141700	Argument	name		140880	0					
ANR	141701	Identifier	name		140880	0					
ANR	141702	Argument	name_len		140880	1					
ANR	141703	Identifier	name_len		140880	0					
ANR	141704	ReturnType	ZEND_API zval *		140880	1					
ANR	141705	Identifier	zend_get_constant_ex		140880	2					
ANR	141706	ParameterList	"zend_string * cname , zend_class_entry * scope , zend_ulong flags"		140880	3					
ANR	141707	Parameter	zend_string * cname	297:36:9571:9588	140880	0	True				
ANR	141708	ParameterType	zend_string *		140880	0					
ANR	141709	Identifier	cname		140880	1					
ANR	141710	Parameter	zend_class_entry * scope	297:56:9591:9613	140880	1	True				
ANR	141711	ParameterType	zend_class_entry *		140880	0					
ANR	141712	Identifier	scope		140880	1					
ANR	141713	Parameter	zend_ulong flags	297:81:9616:9631	140880	2	True				
ANR	141714	ParameterType	zend_ulong		140880	0					
ANR	141715	Identifier	flags		140880	1					
ANR	141716	CFGEntryNode	ENTRY		140880		True				
ANR	141717	CFGExitNode	EXIT		140880		True				
ANR	141718	Symbol	Z_CONSTANT_P		140880						
ANR	141719	Symbol	current_execute_data		140880						
ANR	141720	Symbol	active_class_entry		140880						
ANR	141721	Symbol	zend_string_init		140880						
ANR	141722	Symbol	zend_hash_find		140880						
ANR	141723	Symbol	& c -> value		140880						
ANR	141724	Symbol	* lcname		140880						
ANR	141725	Symbol	memcmp		140880						
ANR	141726	Symbol	IS_CONSTANT_UNQUALIFIED		140880						
ANR	141727	Symbol	zend_constants		140880						
ANR	141728	Symbol	EG		140880						
ANR	141729	Symbol	CONST_CS		140880						
ANR	141730	Symbol	NULL		140880						
ANR	141731	Symbol	ret_constant		140880						
ANR	141732	Symbol	const_name_len		140880						
ANR	141733	Symbol	zend_get_constant_str		140880						
ANR	141734	Symbol	name		140880						
ANR	141735	Symbol	* scope		140880						
ANR	141736	Symbol	Z_ISREF_P		140880						
ANR	141737	Symbol	use_heap		140880						
ANR	141738	Symbol	* prefix_len		140880						
ANR	141739	Symbol	c -> flags		140880						
ANR	141740	Symbol	ZEND_FETCH_CLASS_SILENT		140880						
ANR	141741	Symbol	cname		140880						
ANR	141742	Symbol	flags		140880						
ANR	141743	Symbol	prefix_len		140880						
ANR	141744	Symbol	zend_get_called_scope		140880						
ANR	141745	Symbol	constant_name		140880						
ANR	141746	Symbol	UNEXPECTED		140880						
ANR	141747	Symbol	scope		140880						
ANR	141748	Symbol	zend_hash_str_find_ptr		140880						
ANR	141749	Symbol	zend_get_constant		140880						
ANR	141750	Symbol	* ( colon - 1 )		140880						
ANR	141751	Symbol	name_len		140880						
ANR	141752	Symbol	class_name		140880						
ANR	141753	Symbol	* name		140880						
ANR	141754	Symbol	zend_memrchr		140880						
ANR	141755	Symbol	zend_fetch_class		140880						
ANR	141756	Symbol	ce		140880						
ANR	141757	Symbol	c		140880						
ANR	141758	Symbol	SUCCESS		140880						
ANR	141759	Symbol	CG		140880						
ANR	141760	Symbol	scope -> parent		140880						
ANR	141761	Symbol	* c		140880						
ANR	141762	Symbol	* colon		140880						
ANR	141763	Symbol	ZSTR_VAL		140880						
ANR	141764	Symbol	& ce -> constants_table		140880						
ANR	141765	Symbol	lcname		140880						
ANR	141766	Symbol	lcname_len		140880						
ANR	141767	Symbol	Z_REFVAL_P		140880						
ANR	141768	Symbol	colon		140880						
ANR	141769	Symbol	ZSTR_LEN		140880						
ANR	141770	Symbol	do_alloca		140880						
ANR	141771	Symbol	zval_update_constant_ex		140880						
ANR	141772	Symbol	class_name_len		140880						
ANR	141773	Function	zend_quick_get_constant	430:0:13660:14402							
ANR	141774	FunctionDef	"zend_quick_get_constant (const zval * key , zend_ulong flags)"		141773	0					
ANR	141775	CompoundStatement		431:0:13734:14402	141773	0					
ANR	141776	IdentifierDeclStatement	zend_constant * c ;	432:1:13737:13753	141773	0	True				
ANR	141777	IdentifierDecl	* c		141773	0					
ANR	141778	IdentifierDeclType	zend_constant *		141773	0					
ANR	141779	Identifier	c		141773	1					
ANR	141780	IfStatement	"if ( ( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL )"		141773	1					
ANR	141781	Condition	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL"	434:5:13761:13826	141773	0	True				
ANR	141782	EqualityExpression	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL"		141773	0		==			
ANR	141783	AssignmentExpression	"c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) )"		141773	0		=			
ANR	141784	Identifier	c		141773	0					
ANR	141785	CallExpression	"zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) )"		141773	1					
ANR	141786	Callee	zend_hash_find_ptr		141773	0					
ANR	141787	Identifier	zend_hash_find_ptr		141773	0					
ANR	141788	ArgumentList	EG ( zend_constants )		141773	1					
ANR	141789	Argument	EG ( zend_constants )		141773	0					
ANR	141790	CallExpression	EG ( zend_constants )		141773	0					
ANR	141791	Callee	EG		141773	0					
ANR	141792	Identifier	EG		141773	0					
ANR	141793	ArgumentList	zend_constants		141773	1					
ANR	141794	Argument	zend_constants		141773	0					
ANR	141795	Identifier	zend_constants		141773	0					
ANR	141796	Argument	Z_STR_P ( key )		141773	1					
ANR	141797	CallExpression	Z_STR_P ( key )		141773	0					
ANR	141798	Callee	Z_STR_P		141773	0					
ANR	141799	Identifier	Z_STR_P		141773	0					
ANR	141800	ArgumentList	key		141773	1					
ANR	141801	Argument	key		141773	0					
ANR	141802	Identifier	key		141773	0					
ANR	141803	Identifier	NULL		141773	1					
ANR	141804	CompoundStatement		4:73:94:94	141773	1					
ANR	141805	ExpressionStatement	key ++	435:2:13833:13838	141773	0	True				
ANR	141806	PostIncDecOperationExpression	key ++		141773	0					
ANR	141807	Identifier	key		141773	0					
ANR	141808	IncDec	++		141773	1					
ANR	141809	IfStatement	"if ( ( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL || ( c -> flags & CONST_CS ) != 0 )"		141773	1					
ANR	141810	Condition	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL || ( c -> flags & CONST_CS ) != 0"	436:6:13846:13947	141773	0	True				
ANR	141811	OrExpression	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL || ( c -> flags & CONST_CS ) != 0"		141773	0		||			
ANR	141812	EqualityExpression	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL"		141773	0		==			
ANR	141813	AssignmentExpression	"c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) )"		141773	0		=			
ANR	141814	Identifier	c		141773	0					
ANR	141815	CallExpression	"zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) )"		141773	1					
ANR	141816	Callee	zend_hash_find_ptr		141773	0					
ANR	141817	Identifier	zend_hash_find_ptr		141773	0					
ANR	141818	ArgumentList	EG ( zend_constants )		141773	1					
ANR	141819	Argument	EG ( zend_constants )		141773	0					
ANR	141820	CallExpression	EG ( zend_constants )		141773	0					
ANR	141821	Callee	EG		141773	0					
ANR	141822	Identifier	EG		141773	0					
ANR	141823	ArgumentList	zend_constants		141773	1					
ANR	141824	Argument	zend_constants		141773	0					
ANR	141825	Identifier	zend_constants		141773	0					
ANR	141826	Argument	Z_STR_P ( key )		141773	1					
ANR	141827	CallExpression	Z_STR_P ( key )		141773	0					
ANR	141828	Callee	Z_STR_P		141773	0					
ANR	141829	Identifier	Z_STR_P		141773	0					
ANR	141830	ArgumentList	key		141773	1					
ANR	141831	Argument	key		141773	0					
ANR	141832	Identifier	key		141773	0					
ANR	141833	Identifier	NULL		141773	1					
ANR	141834	EqualityExpression	( c -> flags & CONST_CS ) != 0		141773	1		!=			
ANR	141835	BitAndExpression	c -> flags & CONST_CS		141773	0		&			
ANR	141836	PtrMemberAccess	c -> flags		141773	0					
ANR	141837	Identifier	c		141773	0					
ANR	141838	Identifier	flags		141773	1					
ANR	141839	Identifier	CONST_CS		141773	1					
ANR	141840	PrimaryExpression	0		141773	1					
ANR	141841	CompoundStatement		7:34:215:215	141773	1					
ANR	141842	IfStatement	if ( ( flags & ( IS_CONSTANT_IN_NAMESPACE | IS_CONSTANT_UNQUALIFIED ) ) == ( IS_CONSTANT_IN_NAMESPACE | IS_CONSTANT_UNQUALIFIED ) )		141773	0					
ANR	141843	Condition	( flags & ( IS_CONSTANT_IN_NAMESPACE | IS_CONSTANT_UNQUALIFIED ) ) == ( IS_CONSTANT_IN_NAMESPACE | IS_CONSTANT_UNQUALIFIED )	438:7:13959:14072	141773	0	True				
ANR	141844	EqualityExpression	( flags & ( IS_CONSTANT_IN_NAMESPACE | IS_CONSTANT_UNQUALIFIED ) ) == ( IS_CONSTANT_IN_NAMESPACE | IS_CONSTANT_UNQUALIFIED )		141773	0		==			
ANR	141845	BitAndExpression	flags & ( IS_CONSTANT_IN_NAMESPACE | IS_CONSTANT_UNQUALIFIED )		141773	0		&			
ANR	141846	Identifier	flags		141773	0					
ANR	141847	InclusiveOrExpression	IS_CONSTANT_IN_NAMESPACE | IS_CONSTANT_UNQUALIFIED		141773	1		|			
ANR	141848	Identifier	IS_CONSTANT_IN_NAMESPACE		141773	0					
ANR	141849	Identifier	IS_CONSTANT_UNQUALIFIED		141773	1					
ANR	141850	InclusiveOrExpression	IS_CONSTANT_IN_NAMESPACE | IS_CONSTANT_UNQUALIFIED		141773	1		|			
ANR	141851	Identifier	IS_CONSTANT_IN_NAMESPACE		141773	0					
ANR	141852	Identifier	IS_CONSTANT_UNQUALIFIED		141773	1					
ANR	141853	CompoundStatement		8:123:340:340	141773	1					
ANR	141854	ExpressionStatement	key ++	439:4:14081:14086	141773	0	True				
ANR	141855	PostIncDecOperationExpression	key ++		141773	0					
ANR	141856	Identifier	key		141773	0					
ANR	141857	IncDec	++		141773	1					
ANR	141858	IfStatement	"if ( ( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL )"		141773	1					
ANR	141859	Condition	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL"	440:8:14096:14161	141773	0	True				
ANR	141860	EqualityExpression	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL"		141773	0		==			
ANR	141861	AssignmentExpression	"c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) )"		141773	0		=			
ANR	141862	Identifier	c		141773	0					
ANR	141863	CallExpression	"zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) )"		141773	1					
ANR	141864	Callee	zend_hash_find_ptr		141773	0					
ANR	141865	Identifier	zend_hash_find_ptr		141773	0					
ANR	141866	ArgumentList	EG ( zend_constants )		141773	1					
ANR	141867	Argument	EG ( zend_constants )		141773	0					
ANR	141868	CallExpression	EG ( zend_constants )		141773	0					
ANR	141869	Callee	EG		141773	0					
ANR	141870	Identifier	EG		141773	0					
ANR	141871	ArgumentList	zend_constants		141773	1					
ANR	141872	Argument	zend_constants		141773	0					
ANR	141873	Identifier	zend_constants		141773	0					
ANR	141874	Argument	Z_STR_P ( key )		141773	1					
ANR	141875	CallExpression	Z_STR_P ( key )		141773	0					
ANR	141876	Callee	Z_STR_P		141773	0					
ANR	141877	Identifier	Z_STR_P		141773	0					
ANR	141878	ArgumentList	key		141773	1					
ANR	141879	Argument	key		141773	0					
ANR	141880	Identifier	key		141773	0					
ANR	141881	Identifier	NULL		141773	1					
ANR	141882	CompoundStatement		10:76:429:429	141773	1					
ANR	141883	ExpressionStatement	key ++	441:8:14174:14179	141773	0	True				
ANR	141884	PostIncDecOperationExpression	key ++		141773	0					
ANR	141885	Identifier	key		141773	0					
ANR	141886	IncDec	++		141773	1					
ANR	141887	IfStatement	"if ( ( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL || ( c -> flags & CONST_CS ) != 0 )"		141773	1					
ANR	141888	Condition	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL || ( c -> flags & CONST_CS ) != 0"	442:9:14190:14294	141773	0	True				
ANR	141889	OrExpression	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL || ( c -> flags & CONST_CS ) != 0"		141773	0		||			
ANR	141890	EqualityExpression	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) ) ) == NULL"		141773	0		==			
ANR	141891	AssignmentExpression	"c = zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) )"		141773	0		=			
ANR	141892	Identifier	c		141773	0					
ANR	141893	CallExpression	"zend_hash_find_ptr ( EG ( zend_constants ) , Z_STR_P ( key ) )"		141773	1					
ANR	141894	Callee	zend_hash_find_ptr		141773	0					
ANR	141895	Identifier	zend_hash_find_ptr		141773	0					
ANR	141896	ArgumentList	EG ( zend_constants )		141773	1					
ANR	141897	Argument	EG ( zend_constants )		141773	0					
ANR	141898	CallExpression	EG ( zend_constants )		141773	0					
ANR	141899	Callee	EG		141773	0					
ANR	141900	Identifier	EG		141773	0					
ANR	141901	ArgumentList	zend_constants		141773	1					
ANR	141902	Argument	zend_constants		141773	0					
ANR	141903	Identifier	zend_constants		141773	0					
ANR	141904	Argument	Z_STR_P ( key )		141773	1					
ANR	141905	CallExpression	Z_STR_P ( key )		141773	0					
ANR	141906	Callee	Z_STR_P		141773	0					
ANR	141907	Identifier	Z_STR_P		141773	0					
ANR	141908	ArgumentList	key		141773	1					
ANR	141909	Argument	key		141773	0					
ANR	141910	Identifier	key		141773	0					
ANR	141911	Identifier	NULL		141773	1					
ANR	141912	EqualityExpression	( c -> flags & CONST_CS ) != 0		141773	1		!=			
ANR	141913	BitAndExpression	c -> flags & CONST_CS		141773	0		&			
ANR	141914	PtrMemberAccess	c -> flags		141773	0					
ANR	141915	Identifier	c		141773	0					
ANR	141916	Identifier	flags		141773	1					
ANR	141917	Identifier	CONST_CS		141773	1					
ANR	141918	PrimaryExpression	0		141773	1					
ANR	141919	CompoundStatement		13:37:562:562	141773	1					
ANR	141920	ExpressionStatement	key --	445:6:14306:14311	141773	0	True				
ANR	141921	PostIncDecOperationExpression	key --		141773	0					
ANR	141922	Identifier	key		141773	0					
ANR	141923	IncDec	--		141773	1					
ANR	141924	ExpressionStatement	c = NULL	446:6:14319:14327	141773	1	True				
ANR	141925	AssignmentExpression	c = NULL		141773	0		=			
ANR	141926	Identifier	c		141773	0					
ANR	141927	Identifier	NULL		141773	1					
ANR	141928	ElseStatement	else		141773	0					
ANR	141929	CompoundStatement		19:10:617:617	141773	0					
ANR	141930	ExpressionStatement	key --	450:4:14358:14363	141773	0	True				
ANR	141931	PostIncDecOperationExpression	key --		141773	0					
ANR	141932	Identifier	key		141773	0					
ANR	141933	IncDec	--		141773	1					
ANR	141934	ExpressionStatement	c = NULL	451:4:14369:14377	141773	1	True				
ANR	141935	AssignmentExpression	c = NULL		141773	0		=			
ANR	141936	Identifier	c		141773	0					
ANR	141937	Identifier	NULL		141773	1					
ANR	141938	ReturnStatement	return c ;	455:1:14392:14400	141773	2	True				
ANR	141939	Identifier	c		141773	0					
ANR	141940	ReturnType	zend_constant *		141773	1					
ANR	141941	Identifier	zend_quick_get_constant		141773	2					
ANR	141942	ParameterList	"const zval * key , zend_ulong flags"		141773	3					
ANR	141943	Parameter	const zval * key	430:39:13699:13713	141773	0	True				
ANR	141944	ParameterType	const zval *		141773	0					
ANR	141945	Identifier	key		141773	1					
ANR	141946	Parameter	zend_ulong flags	430:56:13716:13731	141773	1	True				
ANR	141947	ParameterType	zend_ulong		141773	0					
ANR	141948	Identifier	flags		141773	1					
ANR	141949	CFGEntryNode	ENTRY		141773		True				
ANR	141950	CFGExitNode	EXIT		141773		True				
ANR	141951	Symbol	EG		141773						
ANR	141952	Symbol	CONST_CS		141773						
ANR	141953	Symbol	c		141773						
ANR	141954	Symbol	NULL		141773						
ANR	141955	Symbol	c -> flags		141773						
ANR	141956	Symbol	flags		141773						
ANR	141957	Symbol	IS_CONSTANT_IN_NAMESPACE		141773						
ANR	141958	Symbol	* c		141773						
ANR	141959	Symbol	IS_CONSTANT_UNQUALIFIED		141773						
ANR	141960	Symbol	zend_constants		141773						
ANR	141961	Symbol	Z_STR_P		141773						
ANR	141962	Symbol	zend_hash_find_ptr		141773						
ANR	141963	Symbol	key		141773						
ANR	141964	Function	zend_hash_add_constant	458:0:14405:14748							
ANR	141965	FunctionDef	"zend_hash_add_constant (HashTable * ht , zend_string * key , zend_constant * c)"		141964	0					
ANR	141966	CompoundStatement		459:0:14492:14748	141964	0					
ANR	141967	IdentifierDeclStatement	void * ret ;	460:1:14495:14504	141964	0	True				
ANR	141968	IdentifierDecl	* ret		141964	0					
ANR	141969	IdentifierDeclType	void *		141964	0					
ANR	141970	Identifier	ret		141964	1					
ANR	141971	IdentifierDeclStatement	"zend_constant * copy = pemalloc ( sizeof ( zend_constant ) , c -> flags & CONST_PERSISTENT ) ;"	461:1:14507:14589	141964	1	True				
ANR	141972	IdentifierDecl	"* copy = pemalloc ( sizeof ( zend_constant ) , c -> flags & CONST_PERSISTENT )"		141964	0					
ANR	141973	IdentifierDeclType	zend_constant *		141964	0					
ANR	141974	Identifier	copy		141964	1					
ANR	141975	AssignmentExpression	"* copy = pemalloc ( sizeof ( zend_constant ) , c -> flags & CONST_PERSISTENT )"		141964	2		=			
ANR	141976	Identifier	copy		141964	0					
ANR	141977	CallExpression	"pemalloc ( sizeof ( zend_constant ) , c -> flags & CONST_PERSISTENT )"		141964	1					
ANR	141978	Callee	pemalloc		141964	0					
ANR	141979	Identifier	pemalloc		141964	0					
ANR	141980	ArgumentList	sizeof ( zend_constant )		141964	1					
ANR	141981	Argument	sizeof ( zend_constant )		141964	0					
ANR	141982	SizeofExpression	sizeof ( zend_constant )		141964	0					
ANR	141983	Sizeof	sizeof		141964	0					
ANR	141984	SizeofOperand	zend_constant		141964	1					
ANR	141985	Argument	c -> flags & CONST_PERSISTENT		141964	1					
ANR	141986	BitAndExpression	c -> flags & CONST_PERSISTENT		141964	0		&			
ANR	141987	PtrMemberAccess	c -> flags		141964	0					
ANR	141988	Identifier	c		141964	0					
ANR	141989	Identifier	flags		141964	1					
ANR	141990	Identifier	CONST_PERSISTENT		141964	1					
ANR	141991	ExpressionStatement	"memcpy ( copy , c , sizeof ( zend_constant ) )"	463:1:14593:14631	141964	2	True				
ANR	141992	CallExpression	"memcpy ( copy , c , sizeof ( zend_constant ) )"		141964	0					
ANR	141993	Callee	memcpy		141964	0					
ANR	141994	Identifier	memcpy		141964	0					
ANR	141995	ArgumentList	copy		141964	1					
ANR	141996	Argument	copy		141964	0					
ANR	141997	Identifier	copy		141964	0					
ANR	141998	Argument	c		141964	1					
ANR	141999	Identifier	c		141964	0					
ANR	142000	Argument	sizeof ( zend_constant )		141964	2					
ANR	142001	SizeofExpression	sizeof ( zend_constant )		141964	0					
ANR	142002	Sizeof	sizeof		141964	0					
ANR	142003	SizeofOperand	zend_constant		141964	1					
ANR	142004	ExpressionStatement	"ret = zend_hash_add_ptr ( ht , key , copy )"	464:1:14634:14672	141964	3	True				
ANR	142005	AssignmentExpression	"ret = zend_hash_add_ptr ( ht , key , copy )"		141964	0		=			
ANR	142006	Identifier	ret		141964	0					
ANR	142007	CallExpression	"zend_hash_add_ptr ( ht , key , copy )"		141964	1					
ANR	142008	Callee	zend_hash_add_ptr		141964	0					
ANR	142009	Identifier	zend_hash_add_ptr		141964	0					
ANR	142010	ArgumentList	ht		141964	1					
ANR	142011	Argument	ht		141964	0					
ANR	142012	Identifier	ht		141964	0					
ANR	142013	Argument	key		141964	1					
ANR	142014	Identifier	key		141964	0					
ANR	142015	Argument	copy		141964	2					
ANR	142016	Identifier	copy		141964	0					
ANR	142017	IfStatement	if ( ! ret )		141964	4					
ANR	142018	Condition	! ret	465:5:14679:14682	141964	0	True				
ANR	142019	UnaryOperationExpression	! ret		141964	0					
ANR	142020	UnaryOperator	!		141964	0					
ANR	142021	Identifier	ret		141964	1					
ANR	142022	CompoundStatement		7:11:192:192	141964	1					
ANR	142023	ExpressionStatement	"pefree ( copy , c -> flags & CONST_PERSISTENT )"	466:2:14689:14730	141964	0	True				
ANR	142024	CallExpression	"pefree ( copy , c -> flags & CONST_PERSISTENT )"		141964	0					
ANR	142025	Callee	pefree		141964	0					
ANR	142026	Identifier	pefree		141964	0					
ANR	142027	ArgumentList	copy		141964	1					
ANR	142028	Argument	copy		141964	0					
ANR	142029	Identifier	copy		141964	0					
ANR	142030	Argument	c -> flags & CONST_PERSISTENT		141964	1					
ANR	142031	BitAndExpression	c -> flags & CONST_PERSISTENT		141964	0		&			
ANR	142032	PtrMemberAccess	c -> flags		141964	0					
ANR	142033	Identifier	c		141964	0					
ANR	142034	Identifier	flags		141964	1					
ANR	142035	Identifier	CONST_PERSISTENT		141964	1					
ANR	142036	ReturnStatement	return ret ;	468:1:14736:14746	141964	5	True				
ANR	142037	Identifier	ret		141964	0					
ANR	142038	ReturnType	static void *		141964	1					
ANR	142039	Identifier	zend_hash_add_constant		141964	2					
ANR	142040	ParameterList	"HashTable * ht , zend_string * key , zend_constant * c"		141964	3					
ANR	142041	Parameter	HashTable * ht	458:36:14441:14453	141964	0	True				
ANR	142042	ParameterType	HashTable *		141964	0					
ANR	142043	Identifier	ht		141964	1					
ANR	142044	Parameter	zend_string * key	458:51:14456:14471	141964	1	True				
ANR	142045	ParameterType	zend_string *		141964	0					
ANR	142046	Identifier	key		141964	1					
ANR	142047	Parameter	zend_constant * c	458:69:14474:14489	141964	2	True				
ANR	142048	ParameterType	zend_constant *		141964	0					
ANR	142049	Identifier	c		141964	1					
ANR	142050	CFGEntryNode	ENTRY		141964		True				
ANR	142051	CFGExitNode	EXIT		141964		True				
ANR	142052	Symbol	ret		141964						
ANR	142053	Symbol	c		141964						
ANR	142054	Symbol	c -> flags		141964						
ANR	142055	Symbol	copy		141964						
ANR	142056	Symbol	zend_hash_add_ptr		141964						
ANR	142057	Symbol	ht		141964						
ANR	142058	Symbol	CONST_PERSISTENT		141964						
ANR	142059	Symbol	* c		141964						
ANR	142060	Symbol	key		141964						
ANR	142061	Symbol	pemalloc		141964						
ANR	142062	Function	zend_register_constant	471:0:14751:16517							
ANR	142063	FunctionDef	zend_register_constant (zend_constant * c)		142062	0					
ANR	142064	CompoundStatement		472:0:14805:16517	142062	0					
ANR	142065	IdentifierDeclStatement	zend_string * lowercase_name = NULL ;	473:1:14808:14842	142062	0	True				
ANR	142066	IdentifierDecl	* lowercase_name = NULL		142062	0					
ANR	142067	IdentifierDeclType	zend_string *		142062	0					
ANR	142068	Identifier	lowercase_name		142062	1					
ANR	142069	AssignmentExpression	* lowercase_name = NULL		142062	2		=			
ANR	142070	Identifier	NULL		142062	0					
ANR	142071	Identifier	NULL		142062	1					
ANR	142072	IdentifierDeclStatement	zend_string * name ;	474:1:14845:14862	142062	1	True				
ANR	142073	IdentifierDecl	* name		142062	0					
ANR	142074	IdentifierDeclType	zend_string *		142062	0					
ANR	142075	Identifier	name		142062	1					
ANR	142076	IdentifierDeclStatement	int ret = SUCCESS ;	475:1:14865:14882	142062	2	True				
ANR	142077	IdentifierDecl	ret = SUCCESS		142062	0					
ANR	142078	IdentifierDeclType	int		142062	0					
ANR	142079	Identifier	ret		142062	1					
ANR	142080	AssignmentExpression	ret = SUCCESS		142062	2		=			
ANR	142081	Identifier	SUCCESS		142062	0					
ANR	142082	Identifier	SUCCESS		142062	1					
ANR	142083	ExpressionStatement	"printf ( ""Registering constant for module %d\\n"" , c -> module_number )"	478:1:14892:14956	142062	3	True				
ANR	142084	CallExpression	"printf ( ""Registering constant for module %d\\n"" , c -> module_number )"		142062	0					
ANR	142085	Callee	printf		142062	0					
ANR	142086	Identifier	printf		142062	0					
ANR	142087	ArgumentList	"""Registering constant for module %d\\n"""		142062	1					
ANR	142088	Argument	"""Registering constant for module %d\\n"""		142062	0					
ANR	142089	PrimaryExpression	"""Registering constant for module %d\\n"""		142062	0					
ANR	142090	Argument	c -> module_number		142062	1					
ANR	142091	PtrMemberAccess	c -> module_number		142062	0					
ANR	142092	Identifier	c		142062	0					
ANR	142093	Identifier	module_number		142062	1					
ANR	142094	IfStatement	if ( ! ( c -> flags & CONST_CS ) )		142062	4					
ANR	142095	Condition	! ( c -> flags & CONST_CS )	481:5:14971:14992	142062	0	True				
ANR	142096	UnaryOperationExpression	! ( c -> flags & CONST_CS )		142062	0					
ANR	142097	UnaryOperator	!		142062	0					
ANR	142098	BitAndExpression	c -> flags & CONST_CS		142062	1		&			
ANR	142099	PtrMemberAccess	c -> flags		142062	0					
ANR	142100	Identifier	c		142062	0					
ANR	142101	Identifier	flags		142062	1					
ANR	142102	Identifier	CONST_CS		142062	1					
ANR	142103	CompoundStatement		10:29:189:189	142062	1					
ANR	142104	ExpressionStatement	"lowercase_name = zend_string_alloc ( ZSTR_LEN ( c -> name ) , c -> flags & CONST_PERSISTENT )"	482:2:14999:15081	142062	0	True				
ANR	142105	AssignmentExpression	"lowercase_name = zend_string_alloc ( ZSTR_LEN ( c -> name ) , c -> flags & CONST_PERSISTENT )"		142062	0		=			
ANR	142106	Identifier	lowercase_name		142062	0					
ANR	142107	CallExpression	"zend_string_alloc ( ZSTR_LEN ( c -> name ) , c -> flags & CONST_PERSISTENT )"		142062	1					
ANR	142108	Callee	zend_string_alloc		142062	0					
ANR	142109	Identifier	zend_string_alloc		142062	0					
ANR	142110	ArgumentList	ZSTR_LEN ( c -> name )		142062	1					
ANR	142111	Argument	ZSTR_LEN ( c -> name )		142062	0					
ANR	142112	CallExpression	ZSTR_LEN ( c -> name )		142062	0					
ANR	142113	Callee	ZSTR_LEN		142062	0					
ANR	142114	Identifier	ZSTR_LEN		142062	0					
ANR	142115	ArgumentList	c -> name		142062	1					
ANR	142116	Argument	c -> name		142062	0					
ANR	142117	PtrMemberAccess	c -> name		142062	0					
ANR	142118	Identifier	c		142062	0					
ANR	142119	Identifier	name		142062	1					
ANR	142120	Argument	c -> flags & CONST_PERSISTENT		142062	1					
ANR	142121	BitAndExpression	c -> flags & CONST_PERSISTENT		142062	0		&			
ANR	142122	PtrMemberAccess	c -> flags		142062	0					
ANR	142123	Identifier	c		142062	0					
ANR	142124	Identifier	flags		142062	1					
ANR	142125	Identifier	CONST_PERSISTENT		142062	1					
ANR	142126	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ZSTR_VAL ( c -> name ) , ZSTR_LEN ( c -> name ) )"	483:2:15085:15170	142062	1	True				
ANR	142127	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ZSTR_VAL ( c -> name ) , ZSTR_LEN ( c -> name ) )"		142062	0					
ANR	142128	Callee	zend_str_tolower_copy		142062	0					
ANR	142129	Identifier	zend_str_tolower_copy		142062	0					
ANR	142130	ArgumentList	ZSTR_VAL ( lowercase_name )		142062	1					
ANR	142131	Argument	ZSTR_VAL ( lowercase_name )		142062	0					
ANR	142132	CallExpression	ZSTR_VAL ( lowercase_name )		142062	0					
ANR	142133	Callee	ZSTR_VAL		142062	0					
ANR	142134	Identifier	ZSTR_VAL		142062	0					
ANR	142135	ArgumentList	lowercase_name		142062	1					
ANR	142136	Argument	lowercase_name		142062	0					
ANR	142137	Identifier	lowercase_name		142062	0					
ANR	142138	Argument	ZSTR_VAL ( c -> name )		142062	1					
ANR	142139	CallExpression	ZSTR_VAL ( c -> name )		142062	0					
ANR	142140	Callee	ZSTR_VAL		142062	0					
ANR	142141	Identifier	ZSTR_VAL		142062	0					
ANR	142142	ArgumentList	c -> name		142062	1					
ANR	142143	Argument	c -> name		142062	0					
ANR	142144	PtrMemberAccess	c -> name		142062	0					
ANR	142145	Identifier	c		142062	0					
ANR	142146	Identifier	name		142062	1					
ANR	142147	Argument	ZSTR_LEN ( c -> name )		142062	2					
ANR	142148	CallExpression	ZSTR_LEN ( c -> name )		142062	0					
ANR	142149	Callee	ZSTR_LEN		142062	0					
ANR	142150	Identifier	ZSTR_LEN		142062	0					
ANR	142151	ArgumentList	c -> name		142062	1					
ANR	142152	Argument	c -> name		142062	0					
ANR	142153	PtrMemberAccess	c -> name		142062	0					
ANR	142154	Identifier	c		142062	0					
ANR	142155	Identifier	name		142062	1					
ANR	142156	ExpressionStatement	lowercase_name = zend_new_interned_string ( lowercase_name )	484:2:15174:15231	142062	2	True				
ANR	142157	AssignmentExpression	lowercase_name = zend_new_interned_string ( lowercase_name )		142062	0		=			
ANR	142158	Identifier	lowercase_name		142062	0					
ANR	142159	CallExpression	zend_new_interned_string ( lowercase_name )		142062	1					
ANR	142160	Callee	zend_new_interned_string		142062	0					
ANR	142161	Identifier	zend_new_interned_string		142062	0					
ANR	142162	ArgumentList	lowercase_name		142062	1					
ANR	142163	Argument	lowercase_name		142062	0					
ANR	142164	Identifier	lowercase_name		142062	0					
ANR	142165	ExpressionStatement	name = lowercase_name	485:2:15235:15256	142062	3	True				
ANR	142166	AssignmentExpression	name = lowercase_name		142062	0		=			
ANR	142167	Identifier	name		142062	0					
ANR	142168	Identifier	lowercase_name		142062	1					
ANR	142169	ElseStatement	else		142062	0					
ANR	142170	CompoundStatement		16:2:464:510	142062	0					
ANR	142171	IdentifierDeclStatement	"char * slash = strrchr ( ZSTR_VAL ( c -> name ) , '\\\\' ) ;"	487:2:15270:15316	142062	0	True				
ANR	142172	IdentifierDecl	"* slash = strrchr ( ZSTR_VAL ( c -> name ) , '\\\\' )"		142062	0					
ANR	142173	IdentifierDeclType	char *		142062	0					
ANR	142174	Identifier	slash		142062	1					
ANR	142175	AssignmentExpression	"* slash = strrchr ( ZSTR_VAL ( c -> name ) , '\\\\' )"		142062	2		=			
ANR	142176	Identifier	slash		142062	0					
ANR	142177	CallExpression	"strrchr ( ZSTR_VAL ( c -> name ) , '\\\\' )"		142062	1					
ANR	142178	Callee	strrchr		142062	0					
ANR	142179	Identifier	strrchr		142062	0					
ANR	142180	ArgumentList	ZSTR_VAL ( c -> name )		142062	1					
ANR	142181	Argument	ZSTR_VAL ( c -> name )		142062	0					
ANR	142182	CallExpression	ZSTR_VAL ( c -> name )		142062	0					
ANR	142183	Callee	ZSTR_VAL		142062	0					
ANR	142184	Identifier	ZSTR_VAL		142062	0					
ANR	142185	ArgumentList	c -> name		142062	1					
ANR	142186	Argument	c -> name		142062	0					
ANR	142187	PtrMemberAccess	c -> name		142062	0					
ANR	142188	Identifier	c		142062	0					
ANR	142189	Identifier	name		142062	1					
ANR	142190	Argument	'\\\\'		142062	1					
ANR	142191	PrimaryExpression	'\\\\'		142062	0					
ANR	142192	IfStatement	if ( slash )		142062	1					
ANR	142193	Condition	slash	488:6:15324:15328	142062	0	True				
ANR	142194	Identifier	slash		142062	0					
ANR	142195	CompoundStatement		17:13:525:525	142062	1					
ANR	142196	ExpressionStatement	"lowercase_name = zend_string_init ( ZSTR_VAL ( c -> name ) , ZSTR_LEN ( c -> name ) , c -> flags & CONST_PERSISTENT )"	489:3:15336:15436	142062	0	True				
ANR	142197	AssignmentExpression	"lowercase_name = zend_string_init ( ZSTR_VAL ( c -> name ) , ZSTR_LEN ( c -> name ) , c -> flags & CONST_PERSISTENT )"		142062	0		=			
ANR	142198	Identifier	lowercase_name		142062	0					
ANR	142199	CallExpression	"zend_string_init ( ZSTR_VAL ( c -> name ) , ZSTR_LEN ( c -> name ) , c -> flags & CONST_PERSISTENT )"		142062	1					
ANR	142200	Callee	zend_string_init		142062	0					
ANR	142201	Identifier	zend_string_init		142062	0					
ANR	142202	ArgumentList	ZSTR_VAL ( c -> name )		142062	1					
ANR	142203	Argument	ZSTR_VAL ( c -> name )		142062	0					
ANR	142204	CallExpression	ZSTR_VAL ( c -> name )		142062	0					
ANR	142205	Callee	ZSTR_VAL		142062	0					
ANR	142206	Identifier	ZSTR_VAL		142062	0					
ANR	142207	ArgumentList	c -> name		142062	1					
ANR	142208	Argument	c -> name		142062	0					
ANR	142209	PtrMemberAccess	c -> name		142062	0					
ANR	142210	Identifier	c		142062	0					
ANR	142211	Identifier	name		142062	1					
ANR	142212	Argument	ZSTR_LEN ( c -> name )		142062	1					
ANR	142213	CallExpression	ZSTR_LEN ( c -> name )		142062	0					
ANR	142214	Callee	ZSTR_LEN		142062	0					
ANR	142215	Identifier	ZSTR_LEN		142062	0					
ANR	142216	ArgumentList	c -> name		142062	1					
ANR	142217	Argument	c -> name		142062	0					
ANR	142218	PtrMemberAccess	c -> name		142062	0					
ANR	142219	Identifier	c		142062	0					
ANR	142220	Identifier	name		142062	1					
ANR	142221	Argument	c -> flags & CONST_PERSISTENT		142062	2					
ANR	142222	BitAndExpression	c -> flags & CONST_PERSISTENT		142062	0		&			
ANR	142223	PtrMemberAccess	c -> flags		142062	0					
ANR	142224	Identifier	c		142062	0					
ANR	142225	Identifier	flags		142062	1					
ANR	142226	Identifier	CONST_PERSISTENT		142062	1					
ANR	142227	ExpressionStatement	"zend_str_tolower ( ZSTR_VAL ( lowercase_name ) , slash - ZSTR_VAL ( c -> name ) )"	490:3:15441:15510	142062	1	True				
ANR	142228	CallExpression	"zend_str_tolower ( ZSTR_VAL ( lowercase_name ) , slash - ZSTR_VAL ( c -> name ) )"		142062	0					
ANR	142229	Callee	zend_str_tolower		142062	0					
ANR	142230	Identifier	zend_str_tolower		142062	0					
ANR	142231	ArgumentList	ZSTR_VAL ( lowercase_name )		142062	1					
ANR	142232	Argument	ZSTR_VAL ( lowercase_name )		142062	0					
ANR	142233	CallExpression	ZSTR_VAL ( lowercase_name )		142062	0					
ANR	142234	Callee	ZSTR_VAL		142062	0					
ANR	142235	Identifier	ZSTR_VAL		142062	0					
ANR	142236	ArgumentList	lowercase_name		142062	1					
ANR	142237	Argument	lowercase_name		142062	0					
ANR	142238	Identifier	lowercase_name		142062	0					
ANR	142239	Argument	slash - ZSTR_VAL ( c -> name )		142062	1					
ANR	142240	AdditiveExpression	slash - ZSTR_VAL ( c -> name )		142062	0		-			
ANR	142241	Identifier	slash		142062	0					
ANR	142242	CallExpression	ZSTR_VAL ( c -> name )		142062	1					
ANR	142243	Callee	ZSTR_VAL		142062	0					
ANR	142244	Identifier	ZSTR_VAL		142062	0					
ANR	142245	ArgumentList	c -> name		142062	1					
ANR	142246	Argument	c -> name		142062	0					
ANR	142247	PtrMemberAccess	c -> name		142062	0					
ANR	142248	Identifier	c		142062	0					
ANR	142249	Identifier	name		142062	1					
ANR	142250	ExpressionStatement	lowercase_name = zend_new_interned_string ( lowercase_name )	491:3:15515:15572	142062	2	True				
ANR	142251	AssignmentExpression	lowercase_name = zend_new_interned_string ( lowercase_name )		142062	0		=			
ANR	142252	Identifier	lowercase_name		142062	0					
ANR	142253	CallExpression	zend_new_interned_string ( lowercase_name )		142062	1					
ANR	142254	Callee	zend_new_interned_string		142062	0					
ANR	142255	Identifier	zend_new_interned_string		142062	0					
ANR	142256	ArgumentList	lowercase_name		142062	1					
ANR	142257	Argument	lowercase_name		142062	0					
ANR	142258	Identifier	lowercase_name		142062	0					
ANR	142259	ExpressionStatement	name = lowercase_name	492:3:15577:15598	142062	3	True				
ANR	142260	AssignmentExpression	name = lowercase_name		142062	0		=			
ANR	142261	Identifier	name		142062	0					
ANR	142262	Identifier	lowercase_name		142062	1					
ANR	142263	ElseStatement	else		142062	0					
ANR	142264	CompoundStatement		22:9:803:803	142062	0					
ANR	142265	ExpressionStatement	name = c -> name	494:3:15614:15628	142062	0	True				
ANR	142266	AssignmentExpression	name = c -> name		142062	0		=			
ANR	142267	Identifier	name		142062	0					
ANR	142268	PtrMemberAccess	c -> name		142062	1					
ANR	142269	Identifier	c		142062	0					
ANR	142270	Identifier	name		142062	1					
ANR	142271	IfStatement	"if ( ( ZSTR_LEN ( c -> name ) == sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 && ! memcmp ( ZSTR_VAL ( name ) , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 ) ) || zend_hash_add_constant ( EG ( zend_constants ) , name , c ) == NULL )"		142062	5					
ANR	142272	Condition	"( ZSTR_LEN ( c -> name ) == sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 && ! memcmp ( ZSTR_VAL ( name ) , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 ) ) || zend_hash_add_constant ( EG ( zend_constants ) , name , c ) == NULL"	499:5:15747:15965	142062	0	True				
ANR	142273	OrExpression	"( ZSTR_LEN ( c -> name ) == sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 && ! memcmp ( ZSTR_VAL ( name ) , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 ) ) || zend_hash_add_constant ( EG ( zend_constants ) , name , c ) == NULL"		142062	0		||			
ANR	142274	AndExpression	"ZSTR_LEN ( c -> name ) == sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 && ! memcmp ( ZSTR_VAL ( name ) , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 )"		142062	0		&&			
ANR	142275	EqualityExpression	"ZSTR_LEN ( c -> name ) == sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		142062	0		==			
ANR	142276	CallExpression	ZSTR_LEN ( c -> name )		142062	0					
ANR	142277	Callee	ZSTR_LEN		142062	0					
ANR	142278	Identifier	ZSTR_LEN		142062	0					
ANR	142279	ArgumentList	c -> name		142062	1					
ANR	142280	Argument	c -> name		142062	0					
ANR	142281	PtrMemberAccess	c -> name		142062	0					
ANR	142282	Identifier	c		142062	0					
ANR	142283	Identifier	name		142062	1					
ANR	142284	AdditiveExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		142062	1		-			
ANR	142285	SizeofExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" )"		142062	0					
ANR	142286	Sizeof	sizeof		142062	0					
ANR	142287	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		142062	1					
ANR	142288	PrimaryExpression	1		142062	1					
ANR	142289	UnaryOperationExpression	"! memcmp ( ZSTR_VAL ( name ) , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 )"		142062	1					
ANR	142290	UnaryOperator	!		142062	0					
ANR	142291	CallExpression	"memcmp ( ZSTR_VAL ( name ) , ""__COMPILER_HALT_OFFSET__"" , sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1 )"		142062	1					
ANR	142292	Callee	memcmp		142062	0					
ANR	142293	Identifier	memcmp		142062	0					
ANR	142294	ArgumentList	ZSTR_VAL ( name )		142062	1					
ANR	142295	Argument	ZSTR_VAL ( name )		142062	0					
ANR	142296	CallExpression	ZSTR_VAL ( name )		142062	0					
ANR	142297	Callee	ZSTR_VAL		142062	0					
ANR	142298	Identifier	ZSTR_VAL		142062	0					
ANR	142299	ArgumentList	name		142062	1					
ANR	142300	Argument	name		142062	0					
ANR	142301	Identifier	name		142062	0					
ANR	142302	Argument	"""__COMPILER_HALT_OFFSET__"""		142062	1					
ANR	142303	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		142062	0					
ANR	142304	Argument	"sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		142062	2					
ANR	142305	AdditiveExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" ) - 1"		142062	0		-			
ANR	142306	SizeofExpression	"sizeof ( ""__COMPILER_HALT_OFFSET__"" )"		142062	0					
ANR	142307	Sizeof	sizeof		142062	0					
ANR	142308	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		142062	1					
ANR	142309	PrimaryExpression	1		142062	1					
ANR	142310	EqualityExpression	"zend_hash_add_constant ( EG ( zend_constants ) , name , c ) == NULL"		142062	1		==			
ANR	142311	CallExpression	"zend_hash_add_constant ( EG ( zend_constants ) , name , c )"		142062	0					
ANR	142312	Callee	zend_hash_add_constant		142062	0					
ANR	142313	Identifier	zend_hash_add_constant		142062	0					
ANR	142314	ArgumentList	EG ( zend_constants )		142062	1					
ANR	142315	Argument	EG ( zend_constants )		142062	0					
ANR	142316	CallExpression	EG ( zend_constants )		142062	0					
ANR	142317	Callee	EG		142062	0					
ANR	142318	Identifier	EG		142062	0					
ANR	142319	ArgumentList	zend_constants		142062	1					
ANR	142320	Argument	zend_constants		142062	0					
ANR	142321	Identifier	zend_constants		142062	0					
ANR	142322	Argument	name		142062	1					
ANR	142323	Identifier	name		142062	0					
ANR	142324	Argument	c		142062	2					
ANR	142325	Identifier	c		142062	0					
ANR	142326	Identifier	NULL		142062	1					
ANR	142327	CompoundStatement		30:66:1162:1162	142062	1					
ANR	142328	IfStatement	"if ( ZSTR_VAL ( c -> name ) [ 0 ] == '\\0' && ZSTR_LEN ( c -> name ) > sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) - 1 && memcmp ( ZSTR_VAL ( name ) , ""\\0__COMPILER_HALT_OFFSET__"" , sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) ) == 0 )"		142062	0					
ANR	142329	Condition	"ZSTR_VAL ( c -> name ) [ 0 ] == '\\0' && ZSTR_LEN ( c -> name ) > sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) - 1 && memcmp ( ZSTR_VAL ( name ) , ""\\0__COMPILER_HALT_OFFSET__"" , sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) ) == 0"	504:6:16048:16239	142062	0	True				
ANR	142330	AndExpression	"ZSTR_VAL ( c -> name ) [ 0 ] == '\\0' && ZSTR_LEN ( c -> name ) > sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) - 1 && memcmp ( ZSTR_VAL ( name ) , ""\\0__COMPILER_HALT_OFFSET__"" , sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) ) == 0"		142062	0		&&			
ANR	142331	EqualityExpression	ZSTR_VAL ( c -> name ) [ 0 ] == '\\0'		142062	0		==			
ANR	142332	ArrayIndexing	ZSTR_VAL ( c -> name ) [ 0 ]		142062	0					
ANR	142333	CallExpression	ZSTR_VAL ( c -> name )		142062	0					
ANR	142334	Callee	ZSTR_VAL		142062	0					
ANR	142335	Identifier	ZSTR_VAL		142062	0					
ANR	142336	ArgumentList	c -> name		142062	1					
ANR	142337	Argument	c -> name		142062	0					
ANR	142338	PtrMemberAccess	c -> name		142062	0					
ANR	142339	Identifier	c		142062	0					
ANR	142340	Identifier	name		142062	1					
ANR	142341	PrimaryExpression	0		142062	1					
ANR	142342	PrimaryExpression	'\\0'		142062	1					
ANR	142343	AndExpression	"ZSTR_LEN ( c -> name ) > sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) - 1 && memcmp ( ZSTR_VAL ( name ) , ""\\0__COMPILER_HALT_OFFSET__"" , sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) ) == 0"		142062	1		&&			
ANR	142344	RelationalExpression	"ZSTR_LEN ( c -> name ) > sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) - 1"		142062	0		>			
ANR	142345	CallExpression	ZSTR_LEN ( c -> name )		142062	0					
ANR	142346	Callee	ZSTR_LEN		142062	0					
ANR	142347	Identifier	ZSTR_LEN		142062	0					
ANR	142348	ArgumentList	c -> name		142062	1					
ANR	142349	Argument	c -> name		142062	0					
ANR	142350	PtrMemberAccess	c -> name		142062	0					
ANR	142351	Identifier	c		142062	0					
ANR	142352	Identifier	name		142062	1					
ANR	142353	AdditiveExpression	"sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) - 1"		142062	1		-			
ANR	142354	SizeofExpression	"sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" )"		142062	0					
ANR	142355	Sizeof	sizeof		142062	0					
ANR	142356	PrimaryExpression	"""\\0__COMPILER_HALT_OFFSET__"""		142062	1					
ANR	142357	PrimaryExpression	1		142062	1					
ANR	142358	EqualityExpression	"memcmp ( ZSTR_VAL ( name ) , ""\\0__COMPILER_HALT_OFFSET__"" , sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) ) == 0"		142062	1		==			
ANR	142359	CallExpression	"memcmp ( ZSTR_VAL ( name ) , ""\\0__COMPILER_HALT_OFFSET__"" , sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" ) )"		142062	0					
ANR	142360	Callee	memcmp		142062	0					
ANR	142361	Identifier	memcmp		142062	0					
ANR	142362	ArgumentList	ZSTR_VAL ( name )		142062	1					
ANR	142363	Argument	ZSTR_VAL ( name )		142062	0					
ANR	142364	CallExpression	ZSTR_VAL ( name )		142062	0					
ANR	142365	Callee	ZSTR_VAL		142062	0					
ANR	142366	Identifier	ZSTR_VAL		142062	0					
ANR	142367	ArgumentList	name		142062	1					
ANR	142368	Argument	name		142062	0					
ANR	142369	Identifier	name		142062	0					
ANR	142370	Argument	"""\\0__COMPILER_HALT_OFFSET__"""		142062	1					
ANR	142371	PrimaryExpression	"""\\0__COMPILER_HALT_OFFSET__"""		142062	0					
ANR	142372	Argument	"sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" )"		142062	2					
ANR	142373	SizeofExpression	"sizeof ( ""\\0__COMPILER_HALT_OFFSET__"" )"		142062	0					
ANR	142374	Sizeof	sizeof		142062	0					
ANR	142375	PrimaryExpression	"""\\0__COMPILER_HALT_OFFSET__"""		142062	1					
ANR	142376	PrimaryExpression	0		142062	1					
ANR	142377	CompoundStatement		34:103:1436:1436	142062	1					
ANR	142378	ExpressionStatement	"zend_error ( E_NOTICE , ""Constant %s already defined"" , ZSTR_VAL ( name ) )"	507:2:16250:16316	142062	1	True				
ANR	142379	CallExpression	"zend_error ( E_NOTICE , ""Constant %s already defined"" , ZSTR_VAL ( name ) )"		142062	0					
ANR	142380	Callee	zend_error		142062	0					
ANR	142381	Identifier	zend_error		142062	0					
ANR	142382	ArgumentList	E_NOTICE		142062	1					
ANR	142383	Argument	E_NOTICE		142062	0					
ANR	142384	Identifier	E_NOTICE		142062	0					
ANR	142385	Argument	"""Constant %s already defined"""		142062	1					
ANR	142386	PrimaryExpression	"""Constant %s already defined"""		142062	0					
ANR	142387	Argument	ZSTR_VAL ( name )		142062	2					
ANR	142388	CallExpression	ZSTR_VAL ( name )		142062	0					
ANR	142389	Callee	ZSTR_VAL		142062	0					
ANR	142390	Identifier	ZSTR_VAL		142062	0					
ANR	142391	ArgumentList	name		142062	1					
ANR	142392	Argument	name		142062	0					
ANR	142393	Identifier	name		142062	0					
ANR	142394	ExpressionStatement	zend_string_release ( c -> name )	508:2:16320:16348	142062	2	True				
ANR	142395	CallExpression	zend_string_release ( c -> name )		142062	0					
ANR	142396	Callee	zend_string_release		142062	0					
ANR	142397	Identifier	zend_string_release		142062	0					
ANR	142398	ArgumentList	c -> name		142062	1					
ANR	142399	Argument	c -> name		142062	0					
ANR	142400	PtrMemberAccess	c -> name		142062	0					
ANR	142401	Identifier	c		142062	0					
ANR	142402	Identifier	name		142062	1					
ANR	142403	IfStatement	if ( ! ( c -> flags & CONST_PERSISTENT ) )		142062	3					
ANR	142404	Condition	! ( c -> flags & CONST_PERSISTENT )	509:6:16356:16385	142062	0	True				
ANR	142405	UnaryOperationExpression	! ( c -> flags & CONST_PERSISTENT )		142062	0					
ANR	142406	UnaryOperator	!		142062	0					
ANR	142407	BitAndExpression	c -> flags & CONST_PERSISTENT		142062	1		&			
ANR	142408	PtrMemberAccess	c -> flags		142062	0					
ANR	142409	Identifier	c		142062	0					
ANR	142410	Identifier	flags		142062	1					
ANR	142411	Identifier	CONST_PERSISTENT		142062	1					
ANR	142412	CompoundStatement		38:38:1582:1582	142062	1					
ANR	142413	ExpressionStatement	zval_dtor ( & c -> value )	510:3:16393:16413	142062	0	True				
ANR	142414	CallExpression	zval_dtor ( & c -> value )		142062	0					
ANR	142415	Callee	zval_dtor		142062	0					
ANR	142416	Identifier	zval_dtor		142062	0					
ANR	142417	ArgumentList	& c -> value		142062	1					
ANR	142418	Argument	& c -> value		142062	0					
ANR	142419	UnaryOperationExpression	& c -> value		142062	0					
ANR	142420	UnaryOperator	&		142062	0					
ANR	142421	PtrMemberAccess	c -> value		142062	1					
ANR	142422	Identifier	c		142062	0					
ANR	142423	Identifier	value		142062	1					
ANR	142424	ExpressionStatement	ret = FAILURE	512:2:16421:16434	142062	4	True				
ANR	142425	AssignmentExpression	ret = FAILURE		142062	0		=			
ANR	142426	Identifier	ret		142062	0					
ANR	142427	Identifier	FAILURE		142062	1					
ANR	142428	IfStatement	if ( lowercase_name )		142062	6					
ANR	142429	Condition	lowercase_name	514:5:16444:16457	142062	0	True				
ANR	142430	Identifier	lowercase_name		142062	0					
ANR	142431	CompoundStatement		43:21:1654:1654	142062	1					
ANR	142432	ExpressionStatement	zend_string_release ( lowercase_name )	515:2:16464:16499	142062	0	True				
ANR	142433	CallExpression	zend_string_release ( lowercase_name )		142062	0					
ANR	142434	Callee	zend_string_release		142062	0					
ANR	142435	Identifier	zend_string_release		142062	0					
ANR	142436	ArgumentList	lowercase_name		142062	1					
ANR	142437	Argument	lowercase_name		142062	0					
ANR	142438	Identifier	lowercase_name		142062	0					
ANR	142439	ReturnStatement	return ret ;	517:1:16505:16515	142062	7	True				
ANR	142440	Identifier	ret		142062	0					
ANR	142441	ReturnType	ZEND_API int		142062	1					
ANR	142442	Identifier	zend_register_constant		142062	2					
ANR	142443	ParameterList	zend_constant * c		142062	3					
ANR	142444	Parameter	zend_constant * c	471:36:14787:14802	142062	0	True				
ANR	142445	ParameterType	zend_constant *		142062	0					
ANR	142446	Identifier	c		142062	1					
ANR	142447	CFGEntryNode	ENTRY		142062		True				
ANR	142448	CFGExitNode	EXIT		142062		True				
ANR	142449	Symbol	c -> flags		142062						
ANR	142450	Symbol	c -> name		142062						
ANR	142451	Symbol	zend_string_init		142062						
ANR	142452	Symbol	& c -> value		142062						
ANR	142453	Symbol	memcmp		142062						
ANR	142454	Symbol	zend_constants		142062						
ANR	142455	Symbol	CONST_PERSISTENT		142062						
ANR	142456	Symbol	* ZSTR_VAL		142062						
ANR	142457	Symbol	ret		142062						
ANR	142458	Symbol	CONST_CS		142062						
ANR	142459	Symbol	zend_string_alloc		142062						
ANR	142460	Symbol	EG		142062						
ANR	142461	Symbol	c		142062						
ANR	142462	Symbol	NULL		142062						
ANR	142463	Symbol	SUCCESS		142062						
ANR	142464	Symbol	E_NOTICE		142062						
ANR	142465	Symbol	* c		142062						
ANR	142466	Symbol	FAILURE		142062						
ANR	142467	Symbol	ZSTR_VAL		142062						
ANR	142468	Symbol	zend_new_interned_string		142062						
ANR	142469	Symbol	c -> module_number		142062						
ANR	142470	Symbol	strrchr		142062						
ANR	142471	Symbol	zend_hash_add_constant		142062						
ANR	142472	Symbol	name		142062						
ANR	142473	Symbol	ZSTR_LEN		142062						
ANR	142474	Symbol	lowercase_name		142062						
ANR	142475	Symbol	slash		142062						
