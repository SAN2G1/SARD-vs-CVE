command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	997711	File	data/converged/CVE-2015-8617_php-src/ext_intl_msgformat_msgformat_helpers.cpp								
ANR	997712	ClassDef	MessageFormatAdapter	56:0:1866:2149							
ANR	997713	DeclStmt									
ANR	997714	Decl							const Formattable :: Type	"const Formattable :: Type * ( const MessageFormat & m , int32_t & count )"	getArgTypeList
ANR	997715	DeclStmt									
ANR	997716	Decl							const MessagePattern	const MessagePattern ( MessageFormat * m )	getMessagePattern
ANR	997717	Function	MessageFormatAdapter :: getArgTypeList	65:0:2153:2330							
ANR	997718	FunctionDef	"MessageFormatAdapter :: getArgTypeList (const MessageFormat & m , int32_t & count)"		997717	0					
ANR	997719	CompoundStatement		67:53:2292:2330	997717	0					
ANR	997720	ReturnStatement	return m . getArgTypeList ( count ) ;	68:4:2298:2328	997717	0	True				
ANR	997721	CallExpression	m . getArgTypeList ( count )		997717	0					
ANR	997722	Callee	m . getArgTypeList		997717	0					
ANR	997723	MemberAccess	m . getArgTypeList		997717	0					
ANR	997724	Identifier	m		997717	0					
ANR	997725	Identifier	getArgTypeList		997717	1					
ANR	997726	ArgumentList	count		997717	1					
ANR	997727	Argument	count		997717	0					
ANR	997728	Identifier	count		997717	0					
ANR	997729	ReturnType	const Formattable :: Type *		997717	1					
ANR	997730	Identifier	MessageFormatAdapter :: getArgTypeList		997717	2					
ANR	997731	ParameterList	"const MessageFormat & m , int32_t & count"		997717	3					
ANR	997732	Parameter	const MessageFormat & m	66:37:2215:2236	997717	0	True				
ANR	997733	ParameterType	const MessageFormat &		997717	0					
ANR	997734	Identifier	m		997717	1					
ANR	997735	Parameter	int32_t & count	67:37:2276:2289	997717	1	True				
ANR	997736	ParameterType	int32_t &		997717	0					
ANR	997737	Identifier	count		997717	1					
ANR	997738	CFGEntryNode	ENTRY		997717		True				
ANR	997739	CFGExitNode	EXIT		997717		True				
ANR	997740	Symbol	m . getArgTypeList		997717						
ANR	997741	Symbol	count		997717						
ANR	997742	Symbol	m		997717						
ANR	997743	Function	MessageFormatAdapter :: getMessagePattern	72:0:2360:2467							
ANR	997744	FunctionDef	MessageFormatAdapter :: getMessagePattern (MessageFormat * m)		997743	0					
ANR	997745	CompoundStatement		73:58:2439:2467	997743	0					
ANR	997746	ReturnStatement	return m -> msgPattern ;	74:4:2445:2465	997743	0	True				
ANR	997747	PtrMemberAccess	m -> msgPattern		997743	0					
ANR	997748	Identifier	m		997743	0					
ANR	997749	Identifier	msgPattern		997743	1					
ANR	997750	ReturnType	const MessagePattern		997743	1					
ANR	997751	Identifier	MessageFormatAdapter :: getMessagePattern		997743	2					
ANR	997752	ParameterList	MessageFormat * m		997743	3					
ANR	997753	Parameter	MessageFormat * m	73:40:2421:2436	997743	0	True				
ANR	997754	ParameterType	MessageFormat *		997743	0					
ANR	997755	Identifier	m		997743	1					
ANR	997756	CFGEntryNode	ENTRY		997743		True				
ANR	997757	CFGExitNode	EXIT		997743		True				
ANR	997758	Symbol	* m		997743						
ANR	997759	Symbol	m -> msgPattern		997743						
ANR	997760	Symbol	m		997743						
ANR	997761	Function	umsg_format_arg_count	77:0:2476:2675							
ANR	997762	FunctionDef	umsg_format_arg_count (UMessageFormat * fmt)		997761	0					
ANR	997763	CompoundStatement		80:0:2552:2675	997761	0					
ANR	997764	IdentifierDeclStatement	int32_t fmt_count = 0 ;	81:1:2555:2576	997761	0	True				
ANR	997765	IdentifierDecl	fmt_count = 0		997761	0					
ANR	997766	IdentifierDeclType	int32_t		997761	0					
ANR	997767	Identifier	fmt_count		997761	1					
ANR	997768	AssignmentExpression	fmt_count = 0		997761	2		=			
ANR	997769	Identifier	fmt_count		997761	0					
ANR	997770	PrimaryExpression	0		997761	1					
ANR	997771	ExpressionStatement	"MessageFormatAdapter :: getArgTypeList ( * ( const MessageFormat * ) fmt , fmt_count )"	82:1:2579:2654	997761	1	True				
ANR	997772	CallExpression	"MessageFormatAdapter :: getArgTypeList ( * ( const MessageFormat * ) fmt , fmt_count )"		997761	0					
ANR	997773	Callee	MessageFormatAdapter :: getArgTypeList		997761	0					
ANR	997774	Identifier	MessageFormatAdapter :: getArgTypeList		997761	0					
ANR	997775	ArgumentList	* ( const MessageFormat * ) fmt		997761	1					
ANR	997776	Argument	* ( const MessageFormat * ) fmt		997761	0					
ANR	997777	UnaryOperationExpression	* ( const MessageFormat * ) fmt		997761	0					
ANR	997778	UnaryOperator	*		997761	0					
ANR	997779	CastExpression	( const MessageFormat * ) fmt		997761	1					
ANR	997780	CastTarget	const MessageFormat *		997761	0					
ANR	997781	Identifier	fmt		997761	1					
ANR	997782	Argument	fmt_count		997761	1					
ANR	997783	Identifier	fmt_count		997761	0					
ANR	997784	ReturnStatement	return fmt_count ;	83:1:2657:2673	997761	2	True				
ANR	997785	Identifier	fmt_count		997761	0					
ANR	997786	ReturnType	U_NAMESPACE_END U_CFUNC int32_t		997761	1					
ANR	997787	Identifier	umsg_format_arg_count		997761	2					
ANR	997788	ParameterList	UMessageFormat * fmt		997761	3					
ANR	997789	Parameter	UMessageFormat * fmt	79:38:2531:2549	997761	0	True				
ANR	997790	ParameterType	UMessageFormat *		997761	0					
ANR	997791	Identifier	fmt		997761	1					
ANR	997792	CFGEntryNode	ENTRY		997761		True				
ANR	997793	CFGExitNode	EXIT		997761		True				
ANR	997794	Symbol	* ( const MessageFormat * ) fmt		997761						
ANR	997795	Symbol	fmt_count		997761						
ANR	997796	Symbol	* fmt		997761						
ANR	997797	Symbol	fmt		997761						
ANR	997798	Function	arg_types_dtor	86:0:2678:2738							
ANR	997799	FunctionDef	arg_types_dtor (zval * el)		997798	0					
ANR	997800	CompoundStatement		86:37:2715:2738	997798	0					
ANR	997801	ExpressionStatement	efree ( Z_PTR_P ( el ) )	87:1:2718:2736	997798	0	True				
ANR	997802	CallExpression	efree ( Z_PTR_P ( el ) )		997798	0					
ANR	997803	Callee	efree		997798	0					
ANR	997804	Identifier	efree		997798	0					
ANR	997805	ArgumentList	Z_PTR_P ( el )		997798	1					
ANR	997806	Argument	Z_PTR_P ( el )		997798	0					
ANR	997807	CallExpression	Z_PTR_P ( el )		997798	0					
ANR	997808	Callee	Z_PTR_P		997798	0					
ANR	997809	Identifier	Z_PTR_P		997798	0					
ANR	997810	ArgumentList	el		997798	1					
ANR	997811	Argument	el		997798	0					
ANR	997812	Identifier	el		997798	0					
ANR	997813	ReturnType	static void		997798	1					
ANR	997814	Identifier	arg_types_dtor		997798	2					
ANR	997815	ParameterList	zval * el		997798	3					
ANR	997816	Parameter	zval * el	86:27:2705:2712	997798	0	True				
ANR	997817	ParameterType	zval *		997798	0					
ANR	997818	Identifier	el		997798	1					
ANR	997819	CFGEntryNode	ENTRY		997798		True				
ANR	997820	CFGExitNode	EXIT		997798		True				
ANR	997821	Symbol	Z_PTR_P		997798						
ANR	997822	Symbol	el		997798						
ANR	997823	Function	umsg_get_numeric_types	90:0:2741:3748							
ANR	997824	FunctionDef	"umsg_get_numeric_types (MessageFormatter_object * mfo , intl_error & err)"		997823	0					
ANR	997825	CompoundStatement		92:0:2840:3748	997823	0					
ANR	997826	IdentifierDeclStatement	HashTable * ret ;	93:1:2843:2857	997823	0	True				
ANR	997827	IdentifierDecl	* ret		997823	0					
ANR	997828	IdentifierDeclType	HashTable *		997823	0					
ANR	997829	Identifier	ret		997823	1					
ANR	997830	IdentifierDeclStatement	int32_t parts_count ;	94:1:2860:2879	997823	1	True				
ANR	997831	IdentifierDecl	parts_count		997823	0					
ANR	997832	IdentifierDeclType	int32_t		997823	0					
ANR	997833	Identifier	parts_count		997823	1					
ANR	997834	IfStatement	if ( U_FAILURE ( err . code ) )		997823	2					
ANR	997835	Condition	U_FAILURE ( err . code )	96:5:2887:2905	997823	0	True				
ANR	997836	CallExpression	U_FAILURE ( err . code )		997823	0					
ANR	997837	Callee	U_FAILURE		997823	0					
ANR	997838	Identifier	U_FAILURE		997823	0					
ANR	997839	ArgumentList	err . code		997823	1					
ANR	997840	Argument	err . code		997823	0					
ANR	997841	MemberAccess	err . code		997823	0					
ANR	997842	Identifier	err		997823	0					
ANR	997843	Identifier	code		997823	1					
ANR	997844	CompoundStatement		5:26:67:67	997823	1					
ANR	997845	ReturnStatement	return NULL ;	97:2:2912:2923	997823	0	True				
ANR	997846	Identifier	NULL		997823	0					
ANR	997847	IfStatement	if ( mfo -> mf_data . arg_types )		997823	3					
ANR	997848	Condition	mfo -> mf_data . arg_types	100:5:2934:2955	997823	0	True				
ANR	997849	MemberAccess	mfo -> mf_data . arg_types		997823	0					
ANR	997850	PtrMemberAccess	mfo -> mf_data		997823	0					
ANR	997851	Identifier	mfo		997823	0					
ANR	997852	Identifier	mf_data		997823	1					
ANR	997853	Identifier	arg_types		997823	1					
ANR	997854	CompoundStatement		9:29:117:117	997823	1					
ANR	997855	ReturnStatement	return mfo -> mf_data . arg_types ;	102:2:2985:3014	997823	0	True				
ANR	997856	MemberAccess	mfo -> mf_data . arg_types		997823	0					
ANR	997857	PtrMemberAccess	mfo -> mf_data		997823	0					
ANR	997858	Identifier	mfo		997823	0					
ANR	997859	Identifier	mf_data		997823	1					
ANR	997860	Identifier	arg_types		997823	1					
ANR	997861	IdentifierDeclStatement	"const Formattable :: Type * types = MessageFormatAdapter :: getArgTypeList ( * ( MessageFormat * ) mfo -> mf_data . umsgf , parts_count ) ;"	105:1:3021:3143	997823	4	True				
ANR	997862	IdentifierDecl	"* types = MessageFormatAdapter :: getArgTypeList ( * ( MessageFormat * ) mfo -> mf_data . umsgf , parts_count )"		997823	0					
ANR	997863	IdentifierDeclType	const Formattable :: Type *		997823	0					
ANR	997864	Identifier	types		997823	1					
ANR	997865	AssignmentExpression	"* types = MessageFormatAdapter :: getArgTypeList ( * ( MessageFormat * ) mfo -> mf_data . umsgf , parts_count )"		997823	2		=			
ANR	997866	Identifier	types		997823	0					
ANR	997867	CallExpression	"MessageFormatAdapter :: getArgTypeList ( * ( MessageFormat * ) mfo -> mf_data . umsgf , parts_count )"		997823	1					
ANR	997868	Callee	MessageFormatAdapter :: getArgTypeList		997823	0					
ANR	997869	Identifier	MessageFormatAdapter :: getArgTypeList		997823	0					
ANR	997870	ArgumentList	* ( MessageFormat * ) mfo -> mf_data . umsgf		997823	1					
ANR	997871	Argument	* ( MessageFormat * ) mfo -> mf_data . umsgf		997823	0					
ANR	997872	UnaryOperationExpression	* ( MessageFormat * ) mfo -> mf_data . umsgf		997823	0					
ANR	997873	UnaryOperator	*		997823	0					
ANR	997874	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		997823	1					
ANR	997875	CastTarget	MessageFormat *		997823	0					
ANR	997876	MemberAccess	mfo -> mf_data . umsgf		997823	1					
ANR	997877	PtrMemberAccess	mfo -> mf_data		997823	0					
ANR	997878	Identifier	mfo		997823	0					
ANR	997879	Identifier	mf_data		997823	1					
ANR	997880	Identifier	umsgf		997823	1					
ANR	997881	Argument	parts_count		997823	1					
ANR	997882	Identifier	parts_count		997823	0					
ANR	997883	ExpressionStatement	ALLOC_HASHTABLE ( ret )	110:1:3242:3262	997823	5	True				
ANR	997884	CallExpression	ALLOC_HASHTABLE ( ret )		997823	0					
ANR	997885	Callee	ALLOC_HASHTABLE		997823	0					
ANR	997886	Identifier	ALLOC_HASHTABLE		997823	0					
ANR	997887	ArgumentList	ret		997823	1					
ANR	997888	Argument	ret		997823	0					
ANR	997889	Identifier	ret		997823	0					
ANR	997890	ExpressionStatement	"zend_hash_init ( ret , parts_count , NULL , arg_types_dtor , 0 )"	111:1:3265:3322	997823	6	True				
ANR	997891	CallExpression	"zend_hash_init ( ret , parts_count , NULL , arg_types_dtor , 0 )"		997823	0					
ANR	997892	Callee	zend_hash_init		997823	0					
ANR	997893	Identifier	zend_hash_init		997823	0					
ANR	997894	ArgumentList	ret		997823	1					
ANR	997895	Argument	ret		997823	0					
ANR	997896	Identifier	ret		997823	0					
ANR	997897	Argument	parts_count		997823	1					
ANR	997898	Identifier	parts_count		997823	0					
ANR	997899	Argument	NULL		997823	2					
ANR	997900	Identifier	NULL		997823	0					
ANR	997901	Argument	arg_types_dtor		997823	3					
ANR	997902	Identifier	arg_types_dtor		997823	0					
ANR	997903	Argument	0		997823	4					
ANR	997904	PrimaryExpression	0		997823	0					
ANR	997905	ForStatement	for ( int i = 0 ; i < parts_count ; i ++ )		997823	7					
ANR	997906	ForInit	int i = 0 ;	113:6:3331:3340	997823	0	True				
ANR	997907	IdentifierDeclStatement	int i = 0 ;		997823	0					
ANR	997908	IdentifierDecl	i = 0		997823	0					
ANR	997909	IdentifierDeclType	int		997823	0					
ANR	997910	Identifier	i		997823	1					
ANR	997911	AssignmentExpression	i = 0		997823	2		=			
ANR	997912	Identifier	i		997823	0					
ANR	997913	PrimaryExpression	0		997823	1					
ANR	997914	Condition	i < parts_count	113:17:3342:3356	997823	1	True				
ANR	997915	RelationalExpression	i < parts_count		997823	0		<			
ANR	997916	Identifier	i		997823	0					
ANR	997917	Identifier	parts_count		997823	1					
ANR	997918	PostIncDecOperationExpression	i ++	113:34:3359:3361	997823	2	True				
ANR	997919	Identifier	i		997823	0					
ANR	997920	IncDec	++		997823	1					
ANR	997921	CompoundStatement		23:2:527:563	997823	3					
ANR	997922	IdentifierDeclStatement	const Formattable :: Type t = types [ i ] ;	114:2:3368:3404	997823	0	True				
ANR	997923	IdentifierDecl	t = types [ i ]		997823	0					
ANR	997924	IdentifierDeclType	const Formattable :: Type		997823	0					
ANR	997925	Identifier	t		997823	1					
ANR	997926	AssignmentExpression	t = types [ i ]		997823	2		=			
ANR	997927	Identifier	t		997823	0					
ANR	997928	ArrayIndexing	types [ i ]		997823	1					
ANR	997929	Identifier	types		997823	0					
ANR	997930	Identifier	i		997823	1					
ANR	997931	IfStatement	"if ( zend_hash_index_update_mem ( ret , ( zend_ulong ) i , ( void * ) & t , sizeof ( t ) ) == NULL )"		997823	1					
ANR	997932	Condition	"zend_hash_index_update_mem ( ret , ( zend_ulong ) i , ( void * ) & t , sizeof ( t ) ) == NULL"	115:6:3412:3487	997823	0	True				
ANR	997933	EqualityExpression	"zend_hash_index_update_mem ( ret , ( zend_ulong ) i , ( void * ) & t , sizeof ( t ) ) == NULL"		997823	0		==			
ANR	997934	CallExpression	"zend_hash_index_update_mem ( ret , ( zend_ulong ) i , ( void * ) & t , sizeof ( t ) )"		997823	0					
ANR	997935	Callee	zend_hash_index_update_mem		997823	0					
ANR	997936	Identifier	zend_hash_index_update_mem		997823	0					
ANR	997937	ArgumentList	ret		997823	1					
ANR	997938	Argument	ret		997823	0					
ANR	997939	Identifier	ret		997823	0					
ANR	997940	Argument	( zend_ulong ) i		997823	1					
ANR	997941	CastExpression	( zend_ulong ) i		997823	0					
ANR	997942	CastTarget	zend_ulong		997823	0					
ANR	997943	Identifier	i		997823	1					
ANR	997944	Argument	( void * ) & t		997823	2					
ANR	997945	CastExpression	( void * ) & t		997823	0					
ANR	997946	CastTarget	void *		997823	0					
ANR	997947	UnaryOperationExpression	& t		997823	1					
ANR	997948	UnaryOperator	&		997823	0					
ANR	997949	Identifier	t		997823	1					
ANR	997950	Argument	sizeof ( t )		997823	3					
ANR	997951	SizeofExpression	sizeof ( t )		997823	0					
ANR	997952	Sizeof	sizeof		997823	0					
ANR	997953	SizeofOperand	t		997823	1					
ANR	997954	Identifier	NULL		997823	1					
ANR	997955	CompoundStatement		24:84:649:649	997823	1					
ANR	997956	ExpressionStatement	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"	116:3:3495:3595	997823	0	True				
ANR	997957	CallExpression	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"		997823	0					
ANR	997958	Callee	intl_errors_set		997823	0					
ANR	997959	Identifier	intl_errors_set		997823	0					
ANR	997960	ArgumentList	& err		997823	1					
ANR	997961	Argument	& err		997823	0					
ANR	997962	UnaryOperationExpression	& err		997823	0					
ANR	997963	UnaryOperator	&		997823	0					
ANR	997964	Identifier	err		997823	1					
ANR	997965	Argument	U_MEMORY_ALLOCATION_ERROR		997823	1					
ANR	997966	Identifier	U_MEMORY_ALLOCATION_ERROR		997823	0					
ANR	997967	Argument	"""Write to argument types hash table failed"""		997823	2					
ANR	997968	PrimaryExpression	"""Write to argument types hash table failed"""		997823	0					
ANR	997969	Argument	0		997823	3					
ANR	997970	PrimaryExpression	0		997823	0					
ANR	997971	BreakStatement	break ;	118:3:3600:3605	997823	1	True				
ANR	997972	IfStatement	if ( U_FAILURE ( err . code ) )		997823	8					
ANR	997973	Condition	U_FAILURE ( err . code )	122:5:3620:3638	997823	0	True				
ANR	997974	CallExpression	U_FAILURE ( err . code )		997823	0					
ANR	997975	Callee	U_FAILURE		997823	0					
ANR	997976	Identifier	U_FAILURE		997823	0					
ANR	997977	ArgumentList	err . code		997823	1					
ANR	997978	Argument	err . code		997823	0					
ANR	997979	MemberAccess	err . code		997823	0					
ANR	997980	Identifier	err		997823	0					
ANR	997981	Identifier	code		997823	1					
ANR	997982	CompoundStatement		31:26:800:800	997823	1					
ANR	997983	ExpressionStatement	zend_hash_destroy ( ret )	123:2:3645:3667	997823	0	True				
ANR	997984	CallExpression	zend_hash_destroy ( ret )		997823	0					
ANR	997985	Callee	zend_hash_destroy		997823	0					
ANR	997986	Identifier	zend_hash_destroy		997823	0					
ANR	997987	ArgumentList	ret		997823	1					
ANR	997988	Argument	ret		997823	0					
ANR	997989	Identifier	ret		997823	0					
ANR	997990	ExpressionStatement	efree ( ret )	124:2:3671:3681	997823	1	True				
ANR	997991	CallExpression	efree ( ret )		997823	0					
ANR	997992	Callee	efree		997823	0					
ANR	997993	Identifier	efree		997823	0					
ANR	997994	ArgumentList	ret		997823	1					
ANR	997995	Argument	ret		997823	0					
ANR	997996	Identifier	ret		997823	0					
ANR	997997	ReturnStatement	return NULL ;	126:2:3686:3697	997823	2	True				
ANR	997998	Identifier	NULL		997823	0					
ANR	997999	ExpressionStatement	mfo -> mf_data . arg_types = ret	129:1:3704:3732	997823	9	True				
ANR	998000	AssignmentExpression	mfo -> mf_data . arg_types = ret		997823	0		=			
ANR	998001	MemberAccess	mfo -> mf_data . arg_types		997823	0					
ANR	998002	PtrMemberAccess	mfo -> mf_data		997823	0					
ANR	998003	Identifier	mfo		997823	0					
ANR	998004	Identifier	mf_data		997823	1					
ANR	998005	Identifier	arg_types		997823	1					
ANR	998006	Identifier	ret		997823	1					
ANR	998007	ReturnStatement	return ret ;	131:1:3736:3746	997823	10	True				
ANR	998008	Identifier	ret		997823	0					
ANR	998009	ReturnType	static HashTable *		997823	1					
ANR	998010	Identifier	umsg_get_numeric_types		997823	2					
ANR	998011	ParameterList	"MessageFormatter_object * mfo , intl_error & err"		997823	3					
ANR	998012	Parameter	MessageFormatter_object * mfo	90:41:2782:2809	997823	0	True				
ANR	998013	ParameterType	MessageFormatter_object *		997823	0					
ANR	998014	Identifier	mfo		997823	1					
ANR	998015	Parameter	intl_error & err	91:11:2823:2837	997823	1	True				
ANR	998016	ParameterType	intl_error &		997823	0					
ANR	998017	Identifier	err		997823	1					
ANR	998018	CFGEntryNode	ENTRY		997823		True				
ANR	998019	CFGExitNode	EXIT		997823		True				
ANR	998020	Symbol	err . code		997823						
ANR	998021	Symbol	* * mfo		997823						
ANR	998022	Symbol	MessageFormatAdapter :: getArgTypeList		997823						
ANR	998023	Symbol	& err		997823						
ANR	998024	Symbol	U_FAILURE		997823						
ANR	998025	Symbol	zend_hash_index_update_mem		997823						
ANR	998026	Symbol	arg_types_dtor		997823						
ANR	998027	Symbol	* ( MessageFormat * ) mfo -> mf_data . umsgf		997823						
ANR	998028	Symbol	ret		997823						
ANR	998029	Symbol	* mfo		997823						
ANR	998030	Symbol	types		997823						
ANR	998031	Symbol	NULL		997823						
ANR	998032	Symbol	err		997823						
ANR	998033	Symbol	parts_count		997823						
ANR	998034	Symbol	mfo -> mf_data . arg_types		997823						
ANR	998035	Symbol	i		997823						
ANR	998036	Symbol	mfo -> mf_data		997823						
ANR	998037	Symbol	* mfo -> mf_data . umsgf		997823						
ANR	998038	Symbol	U_MEMORY_ALLOCATION_ERROR		997823						
ANR	998039	Symbol	* i		997823						
ANR	998040	Symbol	t		997823						
ANR	998041	Symbol	mfo		997823						
ANR	998042	Symbol	& t		997823						
ANR	998043	Symbol	* mfo -> mf_data		997823						
ANR	998044	Symbol	mfo -> mf_data . umsgf		997823						
ANR	998045	Symbol	* types		997823						
ANR	998046	Function	umsg_parse_format	135:0:3778:9584							
ANR	998047	FunctionDef	"umsg_parse_format (MessageFormatter_object * mfo , const MessagePattern & mp , intl_error & err)"		998046	0					
ANR	998048	CompoundStatement		138:0:3905:9584	998046	0					
ANR	998049	IdentifierDeclStatement	HashTable * ret ;	139:1:3908:3922	998046	0	True				
ANR	998050	IdentifierDecl	* ret		998046	0					
ANR	998051	IdentifierDeclType	HashTable *		998046	0					
ANR	998052	Identifier	ret		998046	1					
ANR	998053	IdentifierDeclStatement	int32_t parts_count ;	140:1:3925:3944	998046	1	True				
ANR	998054	IdentifierDecl	parts_count		998046	0					
ANR	998055	IdentifierDeclType	int32_t		998046	0					
ANR	998056	Identifier	parts_count		998046	1					
ANR	998057	IfStatement	if ( U_FAILURE ( err . code ) )		998046	2					
ANR	998058	Condition	U_FAILURE ( err . code )	142:5:3952:3970	998046	0	True				
ANR	998059	CallExpression	U_FAILURE ( err . code )		998046	0					
ANR	998060	Callee	U_FAILURE		998046	0					
ANR	998061	Identifier	U_FAILURE		998046	0					
ANR	998062	ArgumentList	err . code		998046	1					
ANR	998063	Argument	err . code		998046	0					
ANR	998064	MemberAccess	err . code		998046	0					
ANR	998065	Identifier	err		998046	0					
ANR	998066	Identifier	code		998046	1					
ANR	998067	CompoundStatement		5:26:67:67	998046	1					
ANR	998068	ReturnStatement	return NULL ;	143:2:3977:3988	998046	0	True				
ANR	998069	Identifier	NULL		998046	0					
ANR	998070	IfStatement	if ( ! ( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments ( ) )		998046	3					
ANR	998071	Condition	! ( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments ( )	146:5:3999:4058	998046	0	True				
ANR	998072	UnaryOperationExpression	! ( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments ( )		998046	0					
ANR	998073	UnaryOperator	!		998046	0					
ANR	998074	CallExpression	( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments ( )		998046	1					
ANR	998075	Callee	( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments		998046	0					
ANR	998076	PtrMemberAccess	( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments		998046	0					
ANR	998077	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		998046	0					
ANR	998078	CastTarget	MessageFormat *		998046	0					
ANR	998079	MemberAccess	mfo -> mf_data . umsgf		998046	1					
ANR	998080	PtrMemberAccess	mfo -> mf_data		998046	0					
ANR	998081	Identifier	mfo		998046	0					
ANR	998082	Identifier	mf_data		998046	1					
ANR	998083	Identifier	umsgf		998046	1					
ANR	998084	Identifier	usesNamedArguments		998046	1					
ANR	998085	ArgumentList			998046	1					
ANR	998086	CompoundStatement		9:67:155:155	998046	1					
ANR	998087	ReturnStatement	"return umsg_get_numeric_types ( mfo , err ) ;"	147:2:4065:4104	998046	0	True				
ANR	998088	CallExpression	"umsg_get_numeric_types ( mfo , err )"		998046	0					
ANR	998089	Callee	umsg_get_numeric_types		998046	0					
ANR	998090	Identifier	umsg_get_numeric_types		998046	0					
ANR	998091	ArgumentList	mfo		998046	1					
ANR	998092	Argument	mfo		998046	0					
ANR	998093	Identifier	mfo		998046	0					
ANR	998094	Argument	err		998046	1					
ANR	998095	Identifier	err		998046	0					
ANR	998096	IfStatement	if ( mfo -> mf_data . arg_types )		998046	4					
ANR	998097	Condition	mfo -> mf_data . arg_types	150:5:4115:4136	998046	0	True				
ANR	998098	MemberAccess	mfo -> mf_data . arg_types		998046	0					
ANR	998099	PtrMemberAccess	mfo -> mf_data		998046	0					
ANR	998100	Identifier	mfo		998046	0					
ANR	998101	Identifier	mf_data		998046	1					
ANR	998102	Identifier	arg_types		998046	1					
ANR	998103	CompoundStatement		13:29:233:233	998046	1					
ANR	998104	ReturnStatement	return mfo -> mf_data . arg_types ;	152:2:4166:4195	998046	0	True				
ANR	998105	MemberAccess	mfo -> mf_data . arg_types		998046	0					
ANR	998106	PtrMemberAccess	mfo -> mf_data		998046	0					
ANR	998107	Identifier	mfo		998046	0					
ANR	998108	Identifier	mf_data		998046	1					
ANR	998109	Identifier	arg_types		998046	1					
ANR	998110	ExpressionStatement	ALLOC_HASHTABLE ( ret )	157:1:4297:4317	998046	5	True				
ANR	998111	CallExpression	ALLOC_HASHTABLE ( ret )		998046	0					
ANR	998112	Callee	ALLOC_HASHTABLE		998046	0					
ANR	998113	Identifier	ALLOC_HASHTABLE		998046	0					
ANR	998114	ArgumentList	ret		998046	1					
ANR	998115	Argument	ret		998046	0					
ANR	998116	Identifier	ret		998046	0					
ANR	998117	ExpressionStatement	"zend_hash_init ( ret , 32 , NULL , arg_types_dtor , 0 )"	158:1:4320:4368	998046	6	True				
ANR	998118	CallExpression	"zend_hash_init ( ret , 32 , NULL , arg_types_dtor , 0 )"		998046	0					
ANR	998119	Callee	zend_hash_init		998046	0					
ANR	998120	Identifier	zend_hash_init		998046	0					
ANR	998121	ArgumentList	ret		998046	1					
ANR	998122	Argument	ret		998046	0					
ANR	998123	Identifier	ret		998046	0					
ANR	998124	Argument	32		998046	1					
ANR	998125	PrimaryExpression	32		998046	0					
ANR	998126	Argument	NULL		998046	2					
ANR	998127	Identifier	NULL		998046	0					
ANR	998128	Argument	arg_types_dtor		998046	3					
ANR	998129	Identifier	arg_types_dtor		998046	0					
ANR	998130	Argument	0		998046	4					
ANR	998131	PrimaryExpression	0		998046	0					
ANR	998132	ExpressionStatement	parts_count = mp . countParts ( )	160:1:4372:4401	998046	7	True				
ANR	998133	AssignmentExpression	parts_count = mp . countParts ( )		998046	0		=			
ANR	998134	Identifier	parts_count		998046	0					
ANR	998135	CallExpression	mp . countParts ( )		998046	1					
ANR	998136	Callee	mp . countParts		998046	0					
ANR	998137	MemberAccess	mp . countParts		998046	0					
ANR	998138	Identifier	mp		998046	0					
ANR	998139	Identifier	countParts		998046	1					
ANR	998140	ArgumentList			998046	1					
ANR	998141	ForStatement	for ( int32_t i = 0 ; i < parts_count - 2 && U_SUCCESS ( err . code ) ; i ++ )		998046	8					
ANR	998142	ForInit	int32_t i = 0 ;	173:6:4951:4964	998046	0	True				
ANR	998143	IdentifierDeclStatement	int32_t i = 0 ;		998046	0					
ANR	998144	IdentifierDecl	i = 0		998046	0					
ANR	998145	IdentifierDeclType	int32_t		998046	0					
ANR	998146	Identifier	i		998046	1					
ANR	998147	AssignmentExpression	i = 0		998046	2		=			
ANR	998148	Identifier	i		998046	0					
ANR	998149	PrimaryExpression	0		998046	1					
ANR	998150	Condition	i < parts_count - 2 && U_SUCCESS ( err . code )	173:21:4966:5007	998046	1	True				
ANR	998151	AndExpression	i < parts_count - 2 && U_SUCCESS ( err . code )		998046	0		&&			
ANR	998152	RelationalExpression	i < parts_count - 2		998046	0		<			
ANR	998153	Identifier	i		998046	0					
ANR	998154	AdditiveExpression	parts_count - 2		998046	1		-			
ANR	998155	Identifier	parts_count		998046	0					
ANR	998156	PrimaryExpression	2		998046	1					
ANR	998157	CallExpression	U_SUCCESS ( err . code )		998046	1					
ANR	998158	Callee	U_SUCCESS		998046	0					
ANR	998159	Identifier	U_SUCCESS		998046	0					
ANR	998160	ArgumentList	err . code		998046	1					
ANR	998161	Argument	err . code		998046	0					
ANR	998162	MemberAccess	err . code		998046	0					
ANR	998163	Identifier	err		998046	0					
ANR	998164	Identifier	code		998046	1					
ANR	998165	PostIncDecOperationExpression	i ++	173:65:5010:5012	998046	2	True				
ANR	998166	Identifier	i		998046	0					
ANR	998167	IncDec	++		998046	1					
ANR	998168	CompoundStatement		80:2:2877:2924	998046	3					
ANR	998169	IdentifierDeclStatement	MessagePattern :: Part p = mp . getPart ( i ) ;	174:2:5019:5057	998046	0	True				
ANR	998170	IdentifierDecl	p = mp . getPart ( i )		998046	0					
ANR	998171	IdentifierDeclType	MessagePattern :: Part		998046	0					
ANR	998172	Identifier	p		998046	1					
ANR	998173	AssignmentExpression	p = mp . getPart ( i )		998046	2		=			
ANR	998174	Identifier	p		998046	0					
ANR	998175	CallExpression	mp . getPart ( i )		998046	1					
ANR	998176	Callee	mp . getPart		998046	0					
ANR	998177	MemberAccess	mp . getPart		998046	0					
ANR	998178	Identifier	mp		998046	0					
ANR	998179	Identifier	getPart		998046	1					
ANR	998180	ArgumentList	i		998046	1					
ANR	998181	Argument	i		998046	0					
ANR	998182	Identifier	i		998046	0					
ANR	998183	IfStatement	if ( p . getType ( ) != UMSGPAT_PART_TYPE_ARG_START )		998046	1					
ANR	998184	Condition	p . getType ( ) != UMSGPAT_PART_TYPE_ARG_START	176:6:5066:5107	998046	0	True				
ANR	998185	EqualityExpression	p . getType ( ) != UMSGPAT_PART_TYPE_ARG_START		998046	0		!=			
ANR	998186	CallExpression	p . getType ( )		998046	0					
ANR	998187	Callee	p . getType		998046	0					
ANR	998188	MemberAccess	p . getType		998046	0					
ANR	998189	Identifier	p		998046	0					
ANR	998190	Identifier	getType		998046	1					
ANR	998191	ArgumentList			998046	1					
ANR	998192	Identifier	UMSGPAT_PART_TYPE_ARG_START		998046	1					
ANR	998193	CompoundStatement		39:50:1204:1204	998046	1					
ANR	998194	ContinueStatement	continue ;	177:3:5115:5123	998046	0	True				
ANR	998195	IdentifierDeclStatement	MessagePattern :: Part name_part = mp . getPart ( ++ i ) ;	180:2:5132:5180	998046	2	True				
ANR	998196	IdentifierDecl	name_part = mp . getPart ( ++ i )		998046	0					
ANR	998197	IdentifierDeclType	MessagePattern :: Part		998046	0					
ANR	998198	Identifier	name_part		998046	1					
ANR	998199	AssignmentExpression	name_part = mp . getPart ( ++ i )		998046	2		=			
ANR	998200	Identifier	name_part		998046	0					
ANR	998201	CallExpression	mp . getPart ( ++ i )		998046	1					
ANR	998202	Callee	mp . getPart		998046	0					
ANR	998203	MemberAccess	mp . getPart		998046	0					
ANR	998204	Identifier	mp		998046	0					
ANR	998205	Identifier	getPart		998046	1					
ANR	998206	ArgumentList	++ i		998046	1					
ANR	998207	Argument	++ i		998046	0					
ANR	998208	UnaryExpression	++ i		998046	0					
ANR	998209	IncDec	++		998046	0					
ANR	998210	Identifier	i		998046	1					
ANR	998211	IdentifierDeclStatement	"Formattable :: Type type , * storedType ;"	181:2:5216:5259	998046	3	True				
ANR	998212	IdentifierDecl	type		998046	0					
ANR	998213	IdentifierDeclType	Formattable :: Type		998046	0					
ANR	998214	Identifier	type		998046	1					
ANR	998215	IdentifierDecl	* storedType		998046	1					
ANR	998216	IdentifierDeclType	Formattable :: Type *		998046	0					
ANR	998217	Identifier	storedType		998046	1					
ANR	998218	IfStatement	if ( name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NAME )		998046	4					
ANR	998219	Condition	name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NAME	184:6:5268:5316	998046	0	True				
ANR	998220	EqualityExpression	name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NAME		998046	0		==			
ANR	998221	CallExpression	name_part . getType ( )		998046	0					
ANR	998222	Callee	name_part . getType		998046	0					
ANR	998223	MemberAccess	name_part . getType		998046	0					
ANR	998224	Identifier	name_part		998046	0					
ANR	998225	Identifier	getType		998046	1					
ANR	998226	ArgumentList			998046	1					
ANR	998227	Identifier	UMSGPAT_PART_TYPE_ARG_NAME		998046	1					
ANR	998228	CompoundStatement		48:3:1418:1468	998046	1					
ANR	998229	IdentifierDeclStatement	UnicodeString argName = mp . getSubstring ( name_part ) ;	185:3:5324:5374	998046	0	True				
ANR	998230	IdentifierDecl	argName = mp . getSubstring ( name_part )		998046	0					
ANR	998231	IdentifierDeclType	UnicodeString		998046	0					
ANR	998232	Identifier	argName		998046	1					
ANR	998233	AssignmentExpression	argName = mp . getSubstring ( name_part )		998046	2		=			
ANR	998234	Identifier	argName		998046	0					
ANR	998235	CallExpression	mp . getSubstring ( name_part )		998046	1					
ANR	998236	Callee	mp . getSubstring		998046	0					
ANR	998237	MemberAccess	mp . getSubstring		998046	0					
ANR	998238	Identifier	mp		998046	0					
ANR	998239	Identifier	getSubstring		998046	1					
ANR	998240	ArgumentList	name_part		998046	1					
ANR	998241	Argument	name_part		998046	0					
ANR	998242	Identifier	name_part		998046	0					
ANR	998243	IfStatement	"if ( ( storedType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) ) ) == NULL )"		998046	1					
ANR	998244	Condition	"( storedType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) ) ) == NULL"	186:7:5383:5498	998046	0	True				
ANR	998245	EqualityExpression	"( storedType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) ) ) == NULL"		998046	0		==			
ANR	998246	AssignmentExpression	"storedType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) )"		998046	0		=			
ANR	998247	Identifier	storedType		998046	0					
ANR	998248	CastExpression	"( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) )"		998046	1					
ANR	998249	CastTarget	Formattable :: Type *		998046	0					
ANR	998250	CallExpression	"zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) )"		998046	1					
ANR	998251	Callee	zend_hash_str_find_ptr		998046	0					
ANR	998252	Identifier	zend_hash_str_find_ptr		998046	0					
ANR	998253	ArgumentList	ret		998046	1					
ANR	998254	Argument	ret		998046	0					
ANR	998255	Identifier	ret		998046	0					
ANR	998256	Argument	( char * ) argName . getBuffer ( )		998046	1					
ANR	998257	CastExpression	( char * ) argName . getBuffer ( )		998046	0					
ANR	998258	CastTarget	char *		998046	0					
ANR	998259	CallExpression	argName . getBuffer ( )		998046	1					
ANR	998260	Callee	argName . getBuffer		998046	0					
ANR	998261	MemberAccess	argName . getBuffer		998046	0					
ANR	998262	Identifier	argName		998046	0					
ANR	998263	Identifier	getBuffer		998046	1					
ANR	998264	ArgumentList			998046	1					
ANR	998265	Argument	argName . length ( )		998046	2					
ANR	998266	CallExpression	argName . length ( )		998046	0					
ANR	998267	Callee	argName . length		998046	0					
ANR	998268	MemberAccess	argName . length		998046	0					
ANR	998269	Identifier	argName		998046	0					
ANR	998270	Identifier	length		998046	1					
ANR	998271	ArgumentList			998046	1					
ANR	998272	Identifier	NULL		998046	1					
ANR	998273	CompoundStatement		51:4:1653:1703	998046	1					
ANR	998274	IdentifierDeclStatement	Formattable :: Type bogusType = Formattable :: kObject ;	188:4:5559:5609	998046	0	True				
ANR	998275	IdentifierDecl	bogusType = Formattable :: kObject		998046	0					
ANR	998276	IdentifierDeclType	Formattable :: Type		998046	0					
ANR	998277	Identifier	bogusType		998046	1					
ANR	998278	AssignmentExpression	bogusType = Formattable :: kObject		998046	2		=			
ANR	998279	Identifier	Formattable :: kObject		998046	0					
ANR	998280	Identifier	Formattable :: kObject		998046	1					
ANR	998281	IfStatement	"if ( ( storedType = ( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL )"		998046	1					
ANR	998282	Condition	"( storedType = ( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL"	189:8:5619:5780	998046	0	True				
ANR	998283	EqualityExpression	"( storedType = ( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL"		998046	0		==			
ANR	998284	AssignmentExpression	"storedType = ( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) )"		998046	0		=			
ANR	998285	Identifier	storedType		998046	0					
ANR	998286	CastExpression	"( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) )"		998046	1					
ANR	998287	CastTarget	Formattable :: Type *		998046	0					
ANR	998288	CallExpression	"zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) )"		998046	1					
ANR	998289	Callee	zend_hash_str_update_mem		998046	0					
ANR	998290	Identifier	zend_hash_str_update_mem		998046	0					
ANR	998291	ArgumentList	ret		998046	1					
ANR	998292	Argument	ret		998046	0					
ANR	998293	Identifier	ret		998046	0					
ANR	998294	Argument	( char * ) argName . getBuffer ( )		998046	1					
ANR	998295	CastExpression	( char * ) argName . getBuffer ( )		998046	0					
ANR	998296	CastTarget	char *		998046	0					
ANR	998297	CallExpression	argName . getBuffer ( )		998046	1					
ANR	998298	Callee	argName . getBuffer		998046	0					
ANR	998299	MemberAccess	argName . getBuffer		998046	0					
ANR	998300	Identifier	argName		998046	0					
ANR	998301	Identifier	getBuffer		998046	1					
ANR	998302	ArgumentList			998046	1					
ANR	998303	Argument	argName . length ( )		998046	2					
ANR	998304	CallExpression	argName . length ( )		998046	0					
ANR	998305	Callee	argName . length		998046	0					
ANR	998306	MemberAccess	argName . length		998046	0					
ANR	998307	Identifier	argName		998046	0					
ANR	998308	Identifier	length		998046	1					
ANR	998309	ArgumentList			998046	1					
ANR	998310	Argument	( void * ) & bogusType		998046	3					
ANR	998311	CastExpression	( void * ) & bogusType		998046	0					
ANR	998312	CastTarget	void *		998046	0					
ANR	998313	UnaryOperationExpression	& bogusType		998046	1					
ANR	998314	UnaryOperator	&		998046	0					
ANR	998315	Identifier	bogusType		998046	1					
ANR	998316	Argument	sizeof ( bogusType )		998046	4					
ANR	998317	SizeofExpression	sizeof ( bogusType )		998046	0					
ANR	998318	Sizeof	sizeof		998046	0					
ANR	998319	SizeofOperand	bogusType		998046	1					
ANR	998320	Identifier	NULL		998046	1					
ANR	998321	CompoundStatement		53:54:1877:1877	998046	1					
ANR	998322	ExpressionStatement	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"	191:5:5790:5892	998046	0	True				
ANR	998323	CallExpression	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"		998046	0					
ANR	998324	Callee	intl_errors_set		998046	0					
ANR	998325	Identifier	intl_errors_set		998046	0					
ANR	998326	ArgumentList	& err		998046	1					
ANR	998327	Argument	& err		998046	0					
ANR	998328	UnaryOperationExpression	& err		998046	0					
ANR	998329	UnaryOperator	&		998046	0					
ANR	998330	Identifier	err		998046	1					
ANR	998331	Argument	U_MEMORY_ALLOCATION_ERROR		998046	1					
ANR	998332	Identifier	U_MEMORY_ALLOCATION_ERROR		998046	0					
ANR	998333	Argument	"""Write to argument types hash table failed"""		998046	2					
ANR	998334	PrimaryExpression	"""Write to argument types hash table failed"""		998046	0					
ANR	998335	Argument	0		998046	3					
ANR	998336	PrimaryExpression	0		998046	0					
ANR	998337	ContinueStatement	continue ;	193:5:5899:5907	998046	1	True				
ANR	998338	ElseStatement	else		998046	0					
ANR	998339	IfStatement	if ( name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NUMBER )		998046	0					
ANR	998340	Condition	name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NUMBER	196:13:5933:5983	998046	0	True				
ANR	998341	EqualityExpression	name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NUMBER		998046	0		==			
ANR	998342	CallExpression	name_part . getType ( )		998046	0					
ANR	998343	Callee	name_part . getType		998046	0					
ANR	998344	MemberAccess	name_part . getType		998046	0					
ANR	998345	Identifier	name_part		998046	0					
ANR	998346	Identifier	getType		998046	1					
ANR	998347	ArgumentList			998046	1					
ANR	998348	Identifier	UMSGPAT_PART_TYPE_ARG_NUMBER		998046	1					
ANR	998349	CompoundStatement		60:3:2085:2125	998046	1					
ANR	998350	IdentifierDeclStatement	int32_t argNumber = name_part . getValue ( ) ;	197:3:5991:6031	998046	0	True				
ANR	998351	IdentifierDecl	argNumber = name_part . getValue ( )		998046	0					
ANR	998352	IdentifierDeclType	int32_t		998046	0					
ANR	998353	Identifier	argNumber		998046	1					
ANR	998354	AssignmentExpression	argNumber = name_part . getValue ( )		998046	2		=			
ANR	998355	Identifier	argNumber		998046	0					
ANR	998356	CallExpression	name_part . getValue ( )		998046	1					
ANR	998357	Callee	name_part . getValue		998046	0					
ANR	998358	MemberAccess	name_part . getValue		998046	0					
ANR	998359	Identifier	name_part		998046	0					
ANR	998360	Identifier	getValue		998046	1					
ANR	998361	ArgumentList			998046	1					
ANR	998362	IfStatement	if ( argNumber < 0 )		998046	1					
ANR	998363	Condition	argNumber < 0	198:7:6040:6052	998046	0	True				
ANR	998364	RelationalExpression	argNumber < 0		998046	0		<			
ANR	998365	Identifier	argNumber		998046	0					
ANR	998366	PrimaryExpression	0		998046	1					
ANR	998367	CompoundStatement		61:22:2149:2149	998046	1					
ANR	998368	ExpressionStatement	"intl_errors_set ( & err , U_INVALID_FORMAT_ERROR , ""Found part with negative number"" , 0 )"	199:4:6061:6149	998046	0	True				
ANR	998369	CallExpression	"intl_errors_set ( & err , U_INVALID_FORMAT_ERROR , ""Found part with negative number"" , 0 )"		998046	0					
ANR	998370	Callee	intl_errors_set		998046	0					
ANR	998371	Identifier	intl_errors_set		998046	0					
ANR	998372	ArgumentList	& err		998046	1					
ANR	998373	Argument	& err		998046	0					
ANR	998374	UnaryOperationExpression	& err		998046	0					
ANR	998375	UnaryOperator	&		998046	0					
ANR	998376	Identifier	err		998046	1					
ANR	998377	Argument	U_INVALID_FORMAT_ERROR		998046	1					
ANR	998378	Identifier	U_INVALID_FORMAT_ERROR		998046	0					
ANR	998379	Argument	"""Found part with negative number"""		998046	2					
ANR	998380	PrimaryExpression	"""Found part with negative number"""		998046	0					
ANR	998381	Argument	0		998046	3					
ANR	998382	PrimaryExpression	0		998046	0					
ANR	998383	ContinueStatement	continue ;	201:4:6155:6163	998046	1	True				
ANR	998384	IfStatement	"if ( ( storedType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber ) ) == NULL )"		998046	2					
ANR	998385	Condition	"( storedType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber ) ) == NULL"	203:7:6177:6271	998046	0	True				
ANR	998386	EqualityExpression	"( storedType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber ) ) == NULL"		998046	0		==			
ANR	998387	AssignmentExpression	"storedType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber )"		998046	0		=			
ANR	998388	Identifier	storedType		998046	0					
ANR	998389	CastExpression	"( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber )"		998046	1					
ANR	998390	CastTarget	Formattable :: Type *		998046	0					
ANR	998391	CallExpression	"zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber )"		998046	1					
ANR	998392	Callee	zend_hash_index_find_ptr		998046	0					
ANR	998393	Identifier	zend_hash_index_find_ptr		998046	0					
ANR	998394	ArgumentList	ret		998046	1					
ANR	998395	Argument	ret		998046	0					
ANR	998396	Identifier	ret		998046	0					
ANR	998397	Argument	( zend_ulong ) argNumber		998046	1					
ANR	998398	CastExpression	( zend_ulong ) argNumber		998046	0					
ANR	998399	CastTarget	zend_ulong		998046	0					
ANR	998400	Identifier	argNumber		998046	1					
ANR	998401	Identifier	NULL		998046	1					
ANR	998402	CompoundStatement		68:4:2426:2476	998046	1					
ANR	998403	IdentifierDeclStatement	Formattable :: Type bogusType = Formattable :: kObject ;	205:4:6332:6382	998046	0	True				
ANR	998404	IdentifierDecl	bogusType = Formattable :: kObject		998046	0					
ANR	998405	IdentifierDeclType	Formattable :: Type		998046	0					
ANR	998406	Identifier	bogusType		998046	1					
ANR	998407	AssignmentExpression	bogusType = Formattable :: kObject		998046	2		=			
ANR	998408	Identifier	Formattable :: kObject		998046	0					
ANR	998409	Identifier	Formattable :: kObject		998046	1					
ANR	998410	IfStatement	"if ( ( storedType = ( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL )"		998046	1					
ANR	998411	Condition	"( storedType = ( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL"	206:8:6392:6526	998046	0	True				
ANR	998412	EqualityExpression	"( storedType = ( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL"		998046	0		==			
ANR	998413	AssignmentExpression	"storedType = ( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) )"		998046	0		=			
ANR	998414	Identifier	storedType		998046	0					
ANR	998415	CastExpression	"( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) )"		998046	1					
ANR	998416	CastTarget	Formattable :: Type *		998046	0					
ANR	998417	CallExpression	"zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) )"		998046	1					
ANR	998418	Callee	zend_hash_index_update_mem		998046	0					
ANR	998419	Identifier	zend_hash_index_update_mem		998046	0					
ANR	998420	ArgumentList	ret		998046	1					
ANR	998421	Argument	ret		998046	0					
ANR	998422	Identifier	ret		998046	0					
ANR	998423	Argument	( zend_ulong ) argNumber		998046	1					
ANR	998424	CastExpression	( zend_ulong ) argNumber		998046	0					
ANR	998425	CastTarget	zend_ulong		998046	0					
ANR	998426	Identifier	argNumber		998046	1					
ANR	998427	Argument	( void * ) & bogusType		998046	2					
ANR	998428	CastExpression	( void * ) & bogusType		998046	0					
ANR	998429	CastTarget	void *		998046	0					
ANR	998430	UnaryOperationExpression	& bogusType		998046	1					
ANR	998431	UnaryOperator	&		998046	0					
ANR	998432	Identifier	bogusType		998046	1					
ANR	998433	Argument	sizeof ( bogusType )		998046	3					
ANR	998434	SizeofExpression	sizeof ( bogusType )		998046	0					
ANR	998435	Sizeof	sizeof		998046	0					
ANR	998436	SizeofOperand	bogusType		998046	1					
ANR	998437	Identifier	NULL		998046	1					
ANR	998438	CompoundStatement		69:145:2623:2623	998046	1					
ANR	998439	ExpressionStatement	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"	207:5:6536:6638	998046	0	True				
ANR	998440	CallExpression	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"		998046	0					
ANR	998441	Callee	intl_errors_set		998046	0					
ANR	998442	Identifier	intl_errors_set		998046	0					
ANR	998443	ArgumentList	& err		998046	1					
ANR	998444	Argument	& err		998046	0					
ANR	998445	UnaryOperationExpression	& err		998046	0					
ANR	998446	UnaryOperator	&		998046	0					
ANR	998447	Identifier	err		998046	1					
ANR	998448	Argument	U_MEMORY_ALLOCATION_ERROR		998046	1					
ANR	998449	Identifier	U_MEMORY_ALLOCATION_ERROR		998046	0					
ANR	998450	Argument	"""Write to argument types hash table failed"""		998046	2					
ANR	998451	PrimaryExpression	"""Write to argument types hash table failed"""		998046	0					
ANR	998452	Argument	0		998046	3					
ANR	998453	PrimaryExpression	0		998046	0					
ANR	998454	ContinueStatement	continue ;	209:5:6645:6653	998046	1	True				
ANR	998455	ElseStatement	else		998046	0					
ANR	998456	CompoundStatement		75:9:2769:2769	998046	0					
ANR	998457	ExpressionStatement	"intl_errors_set ( & err , U_INVALID_FORMAT_ERROR , ""Invalid part type encountered"" , 0 )"	213:3:6680:6761	998046	0	True				
ANR	998458	CallExpression	"intl_errors_set ( & err , U_INVALID_FORMAT_ERROR , ""Invalid part type encountered"" , 0 )"		998046	0					
ANR	998459	Callee	intl_errors_set		998046	0					
ANR	998460	Identifier	intl_errors_set		998046	0					
ANR	998461	ArgumentList	& err		998046	1					
ANR	998462	Argument	& err		998046	0					
ANR	998463	UnaryOperationExpression	& err		998046	0					
ANR	998464	UnaryOperator	&		998046	0					
ANR	998465	Identifier	err		998046	1					
ANR	998466	Argument	U_INVALID_FORMAT_ERROR		998046	1					
ANR	998467	Identifier	U_INVALID_FORMAT_ERROR		998046	0					
ANR	998468	Argument	"""Invalid part type encountered"""		998046	2					
ANR	998469	PrimaryExpression	"""Invalid part type encountered"""		998046	0					
ANR	998470	Argument	0		998046	3					
ANR	998471	PrimaryExpression	0		998046	0					
ANR	998472	ContinueStatement	continue ;	214:3:6766:6774	998046	1	True				
ANR	998473	IdentifierDeclStatement	UMessagePatternArgType argType = p . getArgType ( ) ;	217:2:6783:6830	998046	5	True				
ANR	998474	IdentifierDecl	argType = p . getArgType ( )		998046	0					
ANR	998475	IdentifierDeclType	UMessagePatternArgType		998046	0					
ANR	998476	Identifier	argType		998046	1					
ANR	998477	AssignmentExpression	argType = p . getArgType ( )		998046	2		=			
ANR	998478	Identifier	argType		998046	0					
ANR	998479	CallExpression	p . getArgType ( )		998046	1					
ANR	998480	Callee	p . getArgType		998046	0					
ANR	998481	MemberAccess	p . getArgType		998046	0					
ANR	998482	Identifier	p		998046	0					
ANR	998483	Identifier	getArgType		998046	1					
ANR	998484	ArgumentList			998046	1					
ANR	998485	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_NONE )		998046	6					
ANR	998486	Condition	argType == UMSGPAT_ARG_TYPE_NONE	219:6:6886:6917	998046	0	True				
ANR	998487	EqualityExpression	argType == UMSGPAT_ARG_TYPE_NONE		998046	0		==			
ANR	998488	Identifier	argType		998046	0					
ANR	998489	Identifier	UMSGPAT_ARG_TYPE_NONE		998046	1					
ANR	998490	CompoundStatement		82:40:3014:3014	998046	1					
ANR	998491	ExpressionStatement	type = Formattable :: kString	220:3:6925:6952	998046	0	True				
ANR	998492	AssignmentExpression	type = Formattable :: kString		998046	0		=			
ANR	998493	Identifier	type		998046	0					
ANR	998494	Identifier	Formattable :: kString		998046	1					
ANR	998495	ElseStatement	else		998046	0					
ANR	998496	CompoundStatement		84:9:3057:3057	998046	0					
ANR	998497	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_SIMPLE )		998046	0					
ANR	998498	Condition	argType == UMSGPAT_ARG_TYPE_SIMPLE	222:7:7034:7067	998046	0	True				
ANR	998499	EqualityExpression	argType == UMSGPAT_ARG_TYPE_SIMPLE		998046	0		==			
ANR	998500	Identifier	argType		998046	0					
ANR	998501	Identifier	UMSGPAT_ARG_TYPE_SIMPLE		998046	1					
ANR	998502	CompoundStatement		88:4:3298:3346	998046	1					
ANR	998503	IdentifierDeclStatement	MessagePattern :: Part type_part = mp . getPart ( ++ i ) ;	225:4:7204:7252	998046	0	True				
ANR	998504	IdentifierDecl	type_part = mp . getPart ( ++ i )		998046	0					
ANR	998505	IdentifierDeclType	MessagePattern :: Part		998046	0					
ANR	998506	Identifier	type_part		998046	1					
ANR	998507	AssignmentExpression	type_part = mp . getPart ( ++ i )		998046	2		=			
ANR	998508	Identifier	type_part		998046	0					
ANR	998509	CallExpression	mp . getPart ( ++ i )		998046	1					
ANR	998510	Callee	mp . getPart		998046	0					
ANR	998511	MemberAccess	mp . getPart		998046	0					
ANR	998512	Identifier	mp		998046	0					
ANR	998513	Identifier	getPart		998046	1					
ANR	998514	ArgumentList	++ i		998046	1					
ANR	998515	Argument	++ i		998046	0					
ANR	998516	UnaryExpression	++ i		998046	0					
ANR	998517	IncDec	++		998046	0					
ANR	998518	Identifier	i		998046	1					
ANR	998519	IfStatement	if ( type_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_TYPE )		998046	1					
ANR	998520	Condition	type_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_TYPE	226:8:7294:7342	998046	0	True				
ANR	998521	EqualityExpression	type_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_TYPE		998046	0		==			
ANR	998522	CallExpression	type_part . getType ( )		998046	0					
ANR	998523	Callee	type_part . getType		998046	0					
ANR	998524	MemberAccess	type_part . getType		998046	0					
ANR	998525	Identifier	type_part		998046	0					
ANR	998526	Identifier	getType		998046	1					
ANR	998527	ArgumentList			998046	1					
ANR	998528	Identifier	UMSGPAT_PART_TYPE_ARG_TYPE		998046	1					
ANR	998529	CompoundStatement		90:5:3446:3499	998046	1					
ANR	998530	IdentifierDeclStatement	UnicodeString typeString = mp . getSubstring ( type_part ) ;	227:5:7352:7405	998046	0	True				
ANR	998531	IdentifierDecl	typeString = mp . getSubstring ( type_part )		998046	0					
ANR	998532	IdentifierDeclType	UnicodeString		998046	0					
ANR	998533	Identifier	typeString		998046	1					
ANR	998534	AssignmentExpression	typeString = mp . getSubstring ( type_part )		998046	2		=			
ANR	998535	Identifier	typeString		998046	0					
ANR	998536	CallExpression	mp . getSubstring ( type_part )		998046	1					
ANR	998537	Callee	mp . getSubstring		998046	0					
ANR	998538	MemberAccess	mp . getSubstring		998046	0					
ANR	998539	Identifier	mp		998046	0					
ANR	998540	Identifier	getSubstring		998046	1					
ANR	998541	ArgumentList	type_part		998046	1					
ANR	998542	Argument	type_part		998046	0					
ANR	998543	Identifier	type_part		998046	0					
ANR	998544	IfStatement	"if ( typeString == ""number"" )"		998046	1					
ANR	998545	Condition	"typeString == ""number"""	230:9:7561:7582	998046	0	True				
ANR	998546	EqualityExpression	"typeString == ""number"""		998046	0		==			
ANR	998547	Identifier	typeString		998046	0					
ANR	998548	PrimaryExpression	"""number"""		998046	1					
ANR	998549	CompoundStatement		94:6:3687:3738	998046	1					
ANR	998550	IdentifierDeclStatement	MessagePattern :: Part style_part = mp . getPart ( i + 1 ) ;	231:6:7593:7644	998046	0	True				
ANR	998551	IdentifierDecl	style_part = mp . getPart ( i + 1 )		998046	0					
ANR	998552	IdentifierDeclType	MessagePattern :: Part		998046	0					
ANR	998553	Identifier	style_part		998046	1					
ANR	998554	AssignmentExpression	style_part = mp . getPart ( i + 1 )		998046	2		=			
ANR	998555	Identifier	style_part		998046	0					
ANR	998556	CallExpression	mp . getPart ( i + 1 )		998046	1					
ANR	998557	Callee	mp . getPart		998046	0					
ANR	998558	MemberAccess	mp . getPart		998046	0					
ANR	998559	Identifier	mp		998046	0					
ANR	998560	Identifier	getPart		998046	1					
ANR	998561	ArgumentList	i + 1		998046	1					
ANR	998562	Argument	i + 1		998046	0					
ANR	998563	AdditiveExpression	i + 1		998046	0		+			
ANR	998564	Identifier	i		998046	0					
ANR	998565	PrimaryExpression	1		998046	1					
ANR	998566	IfStatement	if ( style_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_STYLE )		998046	1					
ANR	998567	Condition	style_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_STYLE	232:10:7678:7728	998046	0	True				
ANR	998568	EqualityExpression	style_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_STYLE		998046	0		==			
ANR	998569	CallExpression	style_part . getType ( )		998046	0					
ANR	998570	Callee	style_part . getType		998046	0					
ANR	998571	MemberAccess	style_part . getType		998046	0					
ANR	998572	Identifier	style_part		998046	0					
ANR	998573	Identifier	getType		998046	1					
ANR	998574	ArgumentList			998046	1					
ANR	998575	Identifier	UMSGPAT_PART_TYPE_ARG_STYLE		998046	1					
ANR	998576	CompoundStatement		96:7:3834:3889	998046	1					
ANR	998577	IdentifierDeclStatement	UnicodeString styleString = mp . getSubstring ( style_part ) ;	233:7:7740:7795	998046	0	True				
ANR	998578	IdentifierDecl	styleString = mp . getSubstring ( style_part )		998046	0					
ANR	998579	IdentifierDeclType	UnicodeString		998046	0					
ANR	998580	Identifier	styleString		998046	1					
ANR	998581	AssignmentExpression	styleString = mp . getSubstring ( style_part )		998046	2		=			
ANR	998582	Identifier	styleString		998046	0					
ANR	998583	CallExpression	mp . getSubstring ( style_part )		998046	1					
ANR	998584	Callee	mp . getSubstring		998046	0					
ANR	998585	MemberAccess	mp . getSubstring		998046	0					
ANR	998586	Identifier	mp		998046	0					
ANR	998587	Identifier	getSubstring		998046	1					
ANR	998588	ArgumentList	style_part		998046	1					
ANR	998589	Argument	style_part		998046	0					
ANR	998590	Identifier	style_part		998046	0					
ANR	998591	IfStatement	"if ( styleString == ""integer"" )"		998046	1					
ANR	998592	Condition	"styleString == ""integer"""	234:11:7808:7831	998046	0	True				
ANR	998593	EqualityExpression	"styleString == ""integer"""		998046	0		==			
ANR	998594	Identifier	styleString		998046	0					
ANR	998595	PrimaryExpression	"""integer"""		998046	1					
ANR	998596	CompoundStatement		97:37:3928:3928	998046	1					
ANR	998597	ExpressionStatement	type = Formattable :: kInt64	235:8:7844:7870	998046	0	True				
ANR	998598	AssignmentExpression	type = Formattable :: kInt64		998046	0		=			
ANR	998599	Identifier	type		998046	0					
ANR	998600	Identifier	Formattable :: kInt64		998046	1					
ANR	998601	ElseStatement	else		998046	0					
ANR	998602	IfStatement	"if ( styleString == ""currency"" )"		998046	0					
ANR	998603	Condition	"styleString == ""currency"""	236:18:7890:7914	998046	0	True				
ANR	998604	EqualityExpression	"styleString == ""currency"""		998046	0		==			
ANR	998605	Identifier	styleString		998046	0					
ANR	998606	PrimaryExpression	"""currency"""		998046	1					
ANR	998607	CompoundStatement		99:45:4011:4011	998046	1					
ANR	998608	ExpressionStatement	type = Formattable :: kDouble	237:8:7927:7954	998046	0	True				
ANR	998609	AssignmentExpression	type = Formattable :: kDouble		998046	0		=			
ANR	998610	Identifier	type		998046	0					
ANR	998611	Identifier	Formattable :: kDouble		998046	1					
ANR	998612	ElseStatement	else		998046	0					
ANR	998613	IfStatement	"if ( styleString == ""percent"" )"		998046	0					
ANR	998614	Condition	"styleString == ""percent"""	238:18:7974:7997	998046	0	True				
ANR	998615	EqualityExpression	"styleString == ""percent"""		998046	0		==			
ANR	998616	Identifier	styleString		998046	0					
ANR	998617	PrimaryExpression	"""percent"""		998046	1					
ANR	998618	CompoundStatement		101:44:4094:4094	998046	1					
ANR	998619	ExpressionStatement	type = Formattable :: kDouble	239:8:8010:8037	998046	0	True				
ANR	998620	AssignmentExpression	type = Formattable :: kDouble		998046	0		=			
ANR	998621	Identifier	type		998046	0					
ANR	998622	Identifier	Formattable :: kDouble		998046	1					
ANR	998623	ElseStatement	else		998046	0					
ANR	998624	CompoundStatement		103:14:4147:4147	998046	0					
ANR	998625	ExpressionStatement	type = Formattable :: kDouble	241:8:8102:8129	998046	0	True				
ANR	998626	AssignmentExpression	type = Formattable :: kDouble		998046	0		=			
ANR	998627	Identifier	type		998046	0					
ANR	998628	Identifier	Formattable :: kDouble		998046	1					
ANR	998629	ElseStatement	else		998046	0					
ANR	998630	CompoundStatement		106:13:4247:4247	998046	0					
ANR	998631	ExpressionStatement	type = Formattable :: kDouble	244:7:8206:8233	998046	0	True				
ANR	998632	AssignmentExpression	type = Formattable :: kDouble		998046	0		=			
ANR	998633	Identifier	type		998046	0					
ANR	998634	Identifier	Formattable :: kDouble		998046	1					
ANR	998635	ElseStatement	else		998046	0					
ANR	998636	IfStatement	"if ( ( typeString == ""date"" ) || ( typeString == ""time"" ) )"		998046	0					
ANR	998637	Condition	"( typeString == ""date"" ) || ( typeString == ""time"" )"	246:16:8259:8306	998046	0	True				
ANR	998638	OrExpression	"( typeString == ""date"" ) || ( typeString == ""time"" )"		998046	0		||			
ANR	998639	EqualityExpression	"typeString == ""date"""		998046	0		==			
ANR	998640	Identifier	typeString		998046	0					
ANR	998641	PrimaryExpression	"""date"""		998046	1					
ANR	998642	EqualityExpression	"typeString == ""time"""		998046	1		==			
ANR	998643	Identifier	typeString		998046	0					
ANR	998644	PrimaryExpression	"""time"""		998046	1					
ANR	998645	CompoundStatement		109:66:4403:4403	998046	1					
ANR	998646	ExpressionStatement	type = Formattable :: kDate	247:6:8317:8342	998046	0	True				
ANR	998647	AssignmentExpression	type = Formattable :: kDate		998046	0		=			
ANR	998648	Identifier	type		998046	0					
ANR	998649	Identifier	Formattable :: kDate		998046	1					
ANR	998650	ElseStatement	else		998046	0					
ANR	998651	IfStatement	"if ( ( typeString == ""spellout"" ) || ( typeString == ""ordinal"" ) || ( typeString == ""duration"" ) )"		998046	0					
ANR	998652	Condition	"( typeString == ""spellout"" ) || ( typeString == ""ordinal"" ) || ( typeString == ""duration"" )"	248:16:8360:8451	998046	0	True				
ANR	998653	OrExpression	"( typeString == ""spellout"" ) || ( typeString == ""ordinal"" ) || ( typeString == ""duration"" )"		998046	0		||			
ANR	998654	EqualityExpression	"typeString == ""spellout"""		998046	0		==			
ANR	998655	Identifier	typeString		998046	0					
ANR	998656	PrimaryExpression	"""spellout"""		998046	1					
ANR	998657	OrExpression	"( typeString == ""ordinal"" ) || ( typeString == ""duration"" )"		998046	1		||			
ANR	998658	EqualityExpression	"typeString == ""ordinal"""		998046	0		==			
ANR	998659	Identifier	typeString		998046	0					
ANR	998660	PrimaryExpression	"""ordinal"""		998046	1					
ANR	998661	EqualityExpression	"typeString == ""duration"""		998046	1		==			
ANR	998662	Identifier	typeString		998046	0					
ANR	998663	PrimaryExpression	"""duration"""		998046	1					
ANR	998664	CompoundStatement		112:38:4548:4548	998046	1					
ANR	998665	ExpressionStatement	type = Formattable :: kDouble	250:6:8462:8489	998046	0	True				
ANR	998666	AssignmentExpression	type = Formattable :: kDouble		998046	0		=			
ANR	998667	Identifier	type		998046	0					
ANR	998668	Identifier	Formattable :: kDouble		998046	1					
ANR	998669	ElseStatement	else		998046	0					
ANR	998670	CompoundStatement		115:11:4603:4603	998046	0					
ANR	998671	Statement	intl_errors_set	256:5:8660:8674	998046	0	True				
ANR	998672	Statement	(	256:20:8675:8675	998046	1	True				
ANR	998673	Statement	&	256:21:8676:8676	998046	2	True				
ANR	998674	Statement	err	256:22:8677:8679	998046	3	True				
ANR	998675	Statement	","	256:25:8680:8680	998046	4	True				
ANR	998676	Statement	U_PARSE_ERROR	256:27:8682:8694	998046	5	True				
ANR	998677	Statement	","	256:40:8695:8695	998046	6	True				
ANR	998678	Statement	"""Expected UMSGPAT_PART_TYPE_ARG_TYPE part following """	257:6:8703:8755	998046	7	True				
ANR	998679	Statement	"""UMSGPAT_ARG_TYPE_SIMPLE part"""	258:6:8763:8792	998046	8	True				
ANR	998680	Statement	","	258:36:8793:8793	998046	9	True				
ANR	998681	Statement	0	258:38:8795:8795	998046	10	True				
ANR	998682	Statement	)	258:39:8796:8796	998046	11	True				
ANR	998683	ExpressionStatement		258:40:8797:8797	998046	12	True				
ANR	998684	ContinueStatement	continue ;	259:5:8804:8812	998046	13	True				
ANR	998685	ElseStatement	else		998046	0					
ANR	998686	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_PLURAL )		998046	0					
ANR	998687	Condition	argType == UMSGPAT_ARG_TYPE_PLURAL	261:14:8834:8867	998046	0	True				
ANR	998688	EqualityExpression	argType == UMSGPAT_ARG_TYPE_PLURAL		998046	0		==			
ANR	998689	Identifier	argType		998046	0					
ANR	998690	Identifier	UMSGPAT_ARG_TYPE_PLURAL		998046	1					
ANR	998691	CompoundStatement		124:50:4964:4964	998046	1					
ANR	998692	ExpressionStatement	type = Formattable :: kDouble	262:4:8876:8903	998046	0	True				
ANR	998693	AssignmentExpression	type = Formattable :: kDouble		998046	0		=			
ANR	998694	Identifier	type		998046	0					
ANR	998695	Identifier	Formattable :: kDouble		998046	1					
ANR	998696	ElseStatement	else		998046	0					
ANR	998697	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_CHOICE )		998046	0					
ANR	998698	Condition	argType == UMSGPAT_ARG_TYPE_CHOICE	263:14:8919:8952	998046	0	True				
ANR	998699	EqualityExpression	argType == UMSGPAT_ARG_TYPE_CHOICE		998046	0		==			
ANR	998700	Identifier	argType		998046	0					
ANR	998701	Identifier	UMSGPAT_ARG_TYPE_CHOICE		998046	1					
ANR	998702	CompoundStatement		126:50:5049:5049	998046	1					
ANR	998703	ExpressionStatement	type = Formattable :: kDouble	264:4:8961:8988	998046	0	True				
ANR	998704	AssignmentExpression	type = Formattable :: kDouble		998046	0		=			
ANR	998705	Identifier	type		998046	0					
ANR	998706	Identifier	Formattable :: kDouble		998046	1					
ANR	998707	ElseStatement	else		998046	0					
ANR	998708	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_SELECT )		998046	0					
ANR	998709	Condition	argType == UMSGPAT_ARG_TYPE_SELECT	265:14:9004:9037	998046	0	True				
ANR	998710	EqualityExpression	argType == UMSGPAT_ARG_TYPE_SELECT		998046	0		==			
ANR	998711	Identifier	argType		998046	0					
ANR	998712	Identifier	UMSGPAT_ARG_TYPE_SELECT		998046	1					
ANR	998713	CompoundStatement		128:50:5134:5134	998046	1					
ANR	998714	ExpressionStatement	type = Formattable :: kString	266:4:9046:9073	998046	0	True				
ANR	998715	AssignmentExpression	type = Formattable :: kString		998046	0		=			
ANR	998716	Identifier	type		998046	0					
ANR	998717	Identifier	Formattable :: kString		998046	1					
ANR	998718	ElseStatement	else		998046	0					
ANR	998719	CompoundStatement		130:10:5179:5179	998046	0					
ANR	998720	ExpressionStatement	type = Formattable :: kString	268:4:9091:9118	998046	0	True				
ANR	998721	AssignmentExpression	type = Formattable :: kString		998046	0		=			
ANR	998722	Identifier	type		998046	0					
ANR	998723	Identifier	Formattable :: kString		998046	1					
ANR	998724	IfStatement	if ( * storedType != Formattable :: kObject && * storedType != type )		998046	7					
ANR	998725	Condition	* storedType != Formattable :: kObject && * storedType != type	273:6:9214:9271	998046	0	True				
ANR	998726	AndExpression	* storedType != Formattable :: kObject && * storedType != type		998046	0		&&			
ANR	998727	EqualityExpression	* storedType != Formattable :: kObject		998046	0		!=			
ANR	998728	UnaryOperationExpression	* storedType		998046	0					
ANR	998729	UnaryOperator	*		998046	0					
ANR	998730	Identifier	storedType		998046	1					
ANR	998731	Identifier	Formattable :: kObject		998046	1					
ANR	998732	EqualityExpression	* storedType != type		998046	1		!=			
ANR	998733	UnaryOperationExpression	* storedType		998046	0					
ANR	998734	UnaryOperator	*		998046	0					
ANR	998735	Identifier	storedType		998046	1					
ANR	998736	Identifier	type		998046	1					
ANR	998737	CompoundStatement		136:66:5368:5368	998046	1					
ANR	998738	ExpressionStatement	"intl_errors_set ( & err , U_ARGUMENT_TYPE_MISMATCH , ""Inconsistent types declared for an argument"" , 0 )"	274:3:9279:9380	998046	0	True				
ANR	998739	CallExpression	"intl_errors_set ( & err , U_ARGUMENT_TYPE_MISMATCH , ""Inconsistent types declared for an argument"" , 0 )"		998046	0					
ANR	998740	Callee	intl_errors_set		998046	0					
ANR	998741	Identifier	intl_errors_set		998046	0					
ANR	998742	ArgumentList	& err		998046	1					
ANR	998743	Argument	& err		998046	0					
ANR	998744	UnaryOperationExpression	& err		998046	0					
ANR	998745	UnaryOperator	&		998046	0					
ANR	998746	Identifier	err		998046	1					
ANR	998747	Argument	U_ARGUMENT_TYPE_MISMATCH		998046	1					
ANR	998748	Identifier	U_ARGUMENT_TYPE_MISMATCH		998046	0					
ANR	998749	Argument	"""Inconsistent types declared for an argument"""		998046	2					
ANR	998750	PrimaryExpression	"""Inconsistent types declared for an argument"""		998046	0					
ANR	998751	Argument	0		998046	3					
ANR	998752	PrimaryExpression	0		998046	0					
ANR	998753	ContinueStatement	continue ;	276:3:9385:9393	998046	1	True				
ANR	998754	ExpressionStatement	* storedType = type	279:2:9402:9420	998046	8	True				
ANR	998755	AssignmentExpression	* storedType = type		998046	0		=			
ANR	998756	UnaryOperationExpression	* storedType		998046	0					
ANR	998757	UnaryOperator	*		998046	0					
ANR	998758	Identifier	storedType		998046	1					
ANR	998759	Identifier	type		998046	1					
ANR	998760	IfStatement	if ( U_FAILURE ( err . code ) )		998046	9					
ANR	998761	Condition	U_FAILURE ( err . code )	282:5:9456:9474	998046	0	True				
ANR	998762	CallExpression	U_FAILURE ( err . code )		998046	0					
ANR	998763	Callee	U_FAILURE		998046	0					
ANR	998764	Identifier	U_FAILURE		998046	0					
ANR	998765	ArgumentList	err . code		998046	1					
ANR	998766	Argument	err . code		998046	0					
ANR	998767	MemberAccess	err . code		998046	0					
ANR	998768	Identifier	err		998046	0					
ANR	998769	Identifier	code		998046	1					
ANR	998770	CompoundStatement		145:26:5571:5571	998046	1					
ANR	998771	ExpressionStatement	zend_hash_destroy ( ret )	283:2:9481:9503	998046	0	True				
ANR	998772	CallExpression	zend_hash_destroy ( ret )		998046	0					
ANR	998773	Callee	zend_hash_destroy		998046	0					
ANR	998774	Identifier	zend_hash_destroy		998046	0					
ANR	998775	ArgumentList	ret		998046	1					
ANR	998776	Argument	ret		998046	0					
ANR	998777	Identifier	ret		998046	0					
ANR	998778	ExpressionStatement	efree ( ret )	284:2:9507:9517	998046	1	True				
ANR	998779	CallExpression	efree ( ret )		998046	0					
ANR	998780	Callee	efree		998046	0					
ANR	998781	Identifier	efree		998046	0					
ANR	998782	ArgumentList	ret		998046	1					
ANR	998783	Argument	ret		998046	0					
ANR	998784	Identifier	ret		998046	0					
ANR	998785	ReturnStatement	return NULL ;	286:2:9522:9533	998046	2	True				
ANR	998786	Identifier	NULL		998046	0					
ANR	998787	ExpressionStatement	mfo -> mf_data . arg_types = ret	289:1:9540:9568	998046	10	True				
ANR	998788	AssignmentExpression	mfo -> mf_data . arg_types = ret		998046	0		=			
ANR	998789	MemberAccess	mfo -> mf_data . arg_types		998046	0					
ANR	998790	PtrMemberAccess	mfo -> mf_data		998046	0					
ANR	998791	Identifier	mfo		998046	0					
ANR	998792	Identifier	mf_data		998046	1					
ANR	998793	Identifier	arg_types		998046	1					
ANR	998794	Identifier	ret		998046	1					
ANR	998795	ReturnStatement	return ret ;	291:1:9572:9582	998046	11	True				
ANR	998796	Identifier	ret		998046	0					
ANR	998797	ReturnType	static HashTable *		998046	1					
ANR	998798	Identifier	umsg_parse_format		998046	2					
ANR	998799	ParameterList	"MessageFormatter_object * mfo , const MessagePattern & mp , intl_error & err"		998046	3					
ANR	998800	Parameter	MessageFormatter_object * mfo	135:36:3814:3841	998046	0	True				
ANR	998801	ParameterType	MessageFormatter_object *		998046	0					
ANR	998802	Identifier	mfo		998046	1					
ANR	998803	Parameter	const MessagePattern & mp	136:9:3853:3876	998046	1	True				
ANR	998804	ParameterType	const MessagePattern &		998046	0					
ANR	998805	Identifier	mp		998046	1					
ANR	998806	Parameter	intl_error & err	137:9:3888:3902	998046	2	True				
ANR	998807	ParameterType	intl_error &		998046	0					
ANR	998808	Identifier	err		998046	1					
ANR	998809	CFGEntryNode	ENTRY		998046		True				
ANR	998810	CFGExitNode	EXIT		998046		True				
ANR	998811	Symbol	& bogusType		998046						
ANR	998812	Symbol	zend_hash_str_update_mem		998046						
ANR	998813	Symbol	UMSGPAT_PART_TYPE_ARG_NUMBER		998046						
ANR	998814	Symbol	type		998046						
ANR	998815	Symbol	p . getArgType		998046						
ANR	998816	Symbol	UMSGPAT_ARG_TYPE_SELECT		998046						
ANR	998817	Symbol	UMSGPAT_ARG_TYPE_NONE		998046						
ANR	998818	Symbol	UMSGPAT_ARG_TYPE_SIMPLE		998046						
ANR	998819	Symbol	style_part . getType		998046						
ANR	998820	Symbol	Formattable :: kObject		998046						
ANR	998821	Symbol	argName		998046						
ANR	998822	Symbol	style_part		998046						
ANR	998823	Symbol	ret		998046						
ANR	998824	Symbol	mp		998046						
ANR	998825	Symbol	NULL		998046						
ANR	998826	Symbol	UMSGPAT_PART_TYPE_ARG_START		998046						
ANR	998827	Symbol	argName . getBuffer		998046						
ANR	998828	Symbol	umsg_get_numeric_types		998046						
ANR	998829	Symbol	mfo -> mf_data . arg_types		998046						
ANR	998830	Symbol	zend_hash_index_find_ptr		998046						
ANR	998831	Symbol	bogusType		998046						
ANR	998832	Symbol	argType		998046						
ANR	998833	Symbol	type_part		998046						
ANR	998834	Symbol	argNumber		998046						
ANR	998835	Symbol	name_part		998046						
ANR	998836	Symbol	U_SUCCESS		998046						
ANR	998837	Symbol	Formattable :: kString		998046						
ANR	998838	Symbol	mp . getSubstring		998046						
ANR	998839	Symbol	UMSGPAT_PART_TYPE_ARG_NAME		998046						
ANR	998840	Symbol	( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments		998046						
ANR	998841	Symbol	p . getType		998046						
ANR	998842	Symbol	mfo -> mf_data . umsgf		998046						
ANR	998843	Symbol	UMSGPAT_ARG_TYPE_PLURAL		998046						
ANR	998844	Symbol	styleString		998046						
ANR	998845	Symbol	UMSGPAT_ARG_TYPE_CHOICE		998046						
ANR	998846	Symbol	err . code		998046						
ANR	998847	Symbol	* * mfo		998046						
ANR	998848	Symbol	& err		998046						
ANR	998849	Symbol	U_FAILURE		998046						
ANR	998850	Symbol	Formattable :: kDate		998046						
ANR	998851	Symbol	zend_hash_index_update_mem		998046						
ANR	998852	Symbol	Formattable :: kDouble		998046						
ANR	998853	Symbol	* storedType		998046						
ANR	998854	Symbol	storedType		998046						
ANR	998855	Symbol	arg_types_dtor		998046						
ANR	998856	Symbol	zend_hash_str_find_ptr		998046						
ANR	998857	Symbol	typeString		998046						
ANR	998858	Symbol	name_part . getValue		998046						
ANR	998859	Symbol	name_part . getType		998046						
ANR	998860	Symbol	UMSGPAT_PART_TYPE_ARG_STYLE		998046						
ANR	998861	Symbol	Formattable :: kInt64		998046						
ANR	998862	Symbol	U_ARGUMENT_TYPE_MISMATCH		998046						
ANR	998863	Symbol	* mfo		998046						
ANR	998864	Symbol	UMSGPAT_PART_TYPE_ARG_TYPE		998046						
ANR	998865	Symbol	err		998046						
ANR	998866	Symbol	parts_count		998046						
ANR	998867	Symbol	mp . countParts		998046						
ANR	998868	Symbol	i		998046						
ANR	998869	Symbol	mfo -> mf_data		998046						
ANR	998870	Symbol	* mfo -> mf_data . umsgf		998046						
ANR	998871	Symbol	mp . getPart		998046						
ANR	998872	Symbol	p		998046						
ANR	998873	Symbol	U_MEMORY_ALLOCATION_ERROR		998046						
ANR	998874	Symbol	argName . length		998046						
ANR	998875	Symbol	type_part . getType		998046						
ANR	998876	Symbol	mfo		998046						
ANR	998877	Symbol	U_INVALID_FORMAT_ERROR		998046						
ANR	998878	Symbol	* mfo -> mf_data		998046						
ANR	998879	Function	umsg_get_types	295:0:9594:10109							
ANR	998880	FunctionDef	"umsg_get_types (MessageFormatter_object * mfo , intl_error & err)"		998879	0					
ANR	998881	CompoundStatement		297:0:9683:10109	998879	0					
ANR	998882	IdentifierDeclStatement	MessageFormat * mf = ( MessageFormat * ) mfo -> mf_data . umsgf ;	298:1:9686:9741	998879	0	True				
ANR	998883	IdentifierDecl	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		998879	0					
ANR	998884	IdentifierDeclType	MessageFormat *		998879	0					
ANR	998885	Identifier	mf		998879	1					
ANR	998886	AssignmentExpression	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		998879	2		=			
ANR	998887	Identifier	mf		998879	0					
ANR	998888	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		998879	1					
ANR	998889	CastTarget	MessageFormat *		998879	0					
ANR	998890	MemberAccess	mfo -> mf_data . umsgf		998879	1					
ANR	998891	PtrMemberAccess	mfo -> mf_data		998879	0					
ANR	998892	Identifier	mfo		998879	0					
ANR	998893	Identifier	mf_data		998879	1					
ANR	998894	Identifier	umsgf		998879	1					
ANR	998895	IdentifierDeclStatement	const MessagePattern mp = MessageFormatAdapter :: getMessagePattern ( mf ) ;	301:1:9772:9841	998879	1	True				
ANR	998896	IdentifierDecl	mp = MessageFormatAdapter :: getMessagePattern ( mf )		998879	0					
ANR	998897	IdentifierDeclType	const MessagePattern		998879	0					
ANR	998898	Identifier	mp		998879	1					
ANR	998899	AssignmentExpression	mp = MessageFormatAdapter :: getMessagePattern ( mf )		998879	2		=			
ANR	998900	Identifier	mp		998879	0					
ANR	998901	CallExpression	MessageFormatAdapter :: getMessagePattern ( mf )		998879	1					
ANR	998902	Callee	MessageFormatAdapter :: getMessagePattern		998879	0					
ANR	998903	Identifier	MessageFormatAdapter :: getMessagePattern		998879	0					
ANR	998904	ArgumentList	mf		998879	1					
ANR	998905	Argument	mf		998879	0					
ANR	998906	Identifier	mf		998879	0					
ANR	998907	ReturnStatement	"return umsg_parse_format ( mfo , mp , err ) ;"	303:1:9845:9883	998879	2	True				
ANR	998908	CallExpression	"umsg_parse_format ( mfo , mp , err )"		998879	0					
ANR	998909	Callee	umsg_parse_format		998879	0					
ANR	998910	Identifier	umsg_parse_format		998879	0					
ANR	998911	ArgumentList	mfo		998879	1					
ANR	998912	Argument	mfo		998879	0					
ANR	998913	Identifier	mfo		998879	0					
ANR	998914	Argument	mp		998879	1					
ANR	998915	Identifier	mp		998879	0					
ANR	998916	Argument	err		998879	2					
ANR	998917	Identifier	err		998879	0					
ANR	998918	ReturnType	static HashTable *		998879	1					
ANR	998919	Identifier	umsg_get_types		998879	2					
ANR	998920	ParameterList	"MessageFormatter_object * mfo , intl_error & err"		998879	3					
ANR	998921	Parameter	MessageFormatter_object * mfo	295:33:9627:9654	998879	0	True				
ANR	998922	ParameterType	MessageFormatter_object *		998879	0					
ANR	998923	Identifier	mfo		998879	1					
ANR	998924	Parameter	intl_error & err	296:9:9666:9680	998879	1	True				
ANR	998925	ParameterType	intl_error &		998879	0					
ANR	998926	Identifier	err		998879	1					
ANR	998927	CFGEntryNode	ENTRY		998879		True				
ANR	998928	CFGExitNode	EXIT		998879		True				
ANR	998929	Symbol	* mfo		998879						
ANR	998930	Symbol	mp		998879						
ANR	998931	Symbol	err		998879						
ANR	998932	Symbol	umsg_parse_format		998879						
ANR	998933	Symbol	MessageFormatAdapter :: getMessagePattern		998879						
ANR	998934	Symbol	mfo		998879						
ANR	998935	Symbol	mf		998879						
ANR	998936	Symbol	mfo -> mf_data		998879						
ANR	998937	Symbol	mfo -> mf_data . umsgf		998879						
ANR	998938	Function	umsg_set_timezone	315:0:10112:11307							
ANR	998939	FunctionDef	"umsg_set_timezone (MessageFormatter_object * mfo , intl_error & err)"		998938	0					
ANR	998940	CompoundStatement		317:0:10198:11307	998938	0					
ANR	998941	IdentifierDeclStatement	MessageFormat * mf = ( MessageFormat * ) mfo -> mf_data . umsgf ;	318:1:10201:10256	998938	0	True				
ANR	998942	IdentifierDecl	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		998938	0					
ANR	998943	IdentifierDeclType	MessageFormat *		998938	0					
ANR	998944	Identifier	mf		998938	1					
ANR	998945	AssignmentExpression	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		998938	2		=			
ANR	998946	Identifier	mf		998938	0					
ANR	998947	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		998938	1					
ANR	998948	CastTarget	MessageFormat *		998938	0					
ANR	998949	MemberAccess	mfo -> mf_data . umsgf		998938	1					
ANR	998950	PtrMemberAccess	mfo -> mf_data		998938	0					
ANR	998951	Identifier	mfo		998938	0					
ANR	998952	Identifier	mf_data		998938	1					
ANR	998953	Identifier	umsgf		998938	1					
ANR	998954	IdentifierDeclStatement	TimeZone * used_tz = NULL ;	319:1:10259:10285	998938	1	True				
ANR	998955	IdentifierDecl	* used_tz = NULL		998938	0					
ANR	998956	IdentifierDeclType	TimeZone *		998938	0					
ANR	998957	Identifier	used_tz		998938	1					
ANR	998958	AssignmentExpression	* used_tz = NULL		998938	2		=			
ANR	998959	Identifier	NULL		998938	0					
ANR	998960	Identifier	NULL		998938	1					
ANR	998961	IdentifierDeclStatement	const Format * * formats ;	320:1:10288:10311	998938	2	True				
ANR	998962	IdentifierDecl	* * formats		998938	0					
ANR	998963	IdentifierDeclType	const Format * *		998938	0					
ANR	998964	Identifier	formats		998938	1					
ANR	998965	IdentifierDeclStatement	int32_t count ;	321:1:10314:10330	998938	3	True				
ANR	998966	IdentifierDecl	count		998938	0					
ANR	998967	IdentifierDeclType	int32_t		998938	0					
ANR	998968	Identifier	count		998938	1					
ANR	998969	IfStatement	if ( mfo -> mf_data . tz_set )		998938	4					
ANR	998970	Condition	mfo -> mf_data . tz_set	328:5:10611:10629	998938	0	True				
ANR	998971	MemberAccess	mfo -> mf_data . tz_set		998938	0					
ANR	998972	PtrMemberAccess	mfo -> mf_data		998938	0					
ANR	998973	Identifier	mfo		998938	0					
ANR	998974	Identifier	mf_data		998938	1					
ANR	998975	Identifier	tz_set		998938	1					
ANR	998976	CompoundStatement		12:26:433:433	998938	1					
ANR	998977	ReturnStatement	return ;	329:2:10636:10642	998938	0	True				
ANR	998978	ExpressionStatement	formats = mf -> getFormats ( count )	332:1:10668:10699	998938	5	True				
ANR	998979	AssignmentExpression	formats = mf -> getFormats ( count )		998938	0		=			
ANR	998980	Identifier	formats		998938	0					
ANR	998981	CallExpression	mf -> getFormats ( count )		998938	1					
ANR	998982	Callee	mf -> getFormats		998938	0					
ANR	998983	PtrMemberAccess	mf -> getFormats		998938	0					
ANR	998984	Identifier	mf		998938	0					
ANR	998985	Identifier	getFormats		998938	1					
ANR	998986	ArgumentList	count		998938	1					
ANR	998987	Argument	count		998938	0					
ANR	998988	Identifier	count		998938	0					
ANR	998989	IfStatement	if ( formats == NULL )		998938	6					
ANR	998990	Condition	formats == NULL	334:5:10707:10721	998938	0	True				
ANR	998991	EqualityExpression	formats == NULL		998938	0		==			
ANR	998992	Identifier	formats		998938	0					
ANR	998993	Identifier	NULL		998938	1					
ANR	998994	CompoundStatement		18:22:525:525	998938	1					
ANR	998995	ExpressionStatement	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Out of memory retrieving subformats"" , 0 )"	335:2:10728:10821	998938	0	True				
ANR	998996	CallExpression	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Out of memory retrieving subformats"" , 0 )"		998938	0					
ANR	998997	Callee	intl_errors_set		998938	0					
ANR	998998	Identifier	intl_errors_set		998938	0					
ANR	998999	ArgumentList	& err		998938	1					
ANR	999000	Argument	& err		998938	0					
ANR	999001	UnaryOperationExpression	& err		998938	0					
ANR	999002	UnaryOperator	&		998938	0					
ANR	999003	Identifier	err		998938	1					
ANR	999004	Argument	U_MEMORY_ALLOCATION_ERROR		998938	1					
ANR	999005	Identifier	U_MEMORY_ALLOCATION_ERROR		998938	0					
ANR	999006	Argument	"""Out of memory retrieving subformats"""		998938	2					
ANR	999007	PrimaryExpression	"""Out of memory retrieving subformats"""		998938	0					
ANR	999008	Argument	0		998938	3					
ANR	999009	PrimaryExpression	0		998938	0					
ANR	999010	ForStatement	for ( int i = 0 ; U_SUCCESS ( err . code ) && i < count ; i ++ )		998938	7					
ANR	999011	ForInit	int i = 0 ;	339:6:10833:10842	998938	0	True				
ANR	999012	IdentifierDeclStatement	int i = 0 ;		998938	0					
ANR	999013	IdentifierDecl	i = 0		998938	0					
ANR	999014	IdentifierDeclType	int		998938	0					
ANR	999015	Identifier	i		998938	1					
ANR	999016	AssignmentExpression	i = 0		998938	2		=			
ANR	999017	Identifier	i		998938	0					
ANR	999018	PrimaryExpression	0		998938	1					
ANR	999019	Condition	U_SUCCESS ( err . code ) && i < count	339:17:10844:10875	998938	1	True				
ANR	999020	AndExpression	U_SUCCESS ( err . code ) && i < count		998938	0		&&			
ANR	999021	CallExpression	U_SUCCESS ( err . code )		998938	0					
ANR	999022	Callee	U_SUCCESS		998938	0					
ANR	999023	Identifier	U_SUCCESS		998938	0					
ANR	999024	ArgumentList	err . code		998938	1					
ANR	999025	Argument	err . code		998938	0					
ANR	999026	MemberAccess	err . code		998938	0					
ANR	999027	Identifier	err		998938	0					
ANR	999028	Identifier	code		998938	1					
ANR	999029	RelationalExpression	i < count		998938	1		<			
ANR	999030	Identifier	i		998938	0					
ANR	999031	Identifier	count		998938	1					
ANR	999032	PostIncDecOperationExpression	i ++	339:51:10878:10880	998938	2	True				
ANR	999033	Identifier	i		998938	0					
ANR	999034	IncDec	++		998938	1					
ANR	999035	CompoundStatement		23:56:684:684	998938	3					
ANR	999036	Statement	DateFormat	340:2:10887:10896	998938	0	True				
ANR	999037	Statement	*	340:12:10897:10897	998938	1	True				
ANR	999038	Statement	df	340:14:10899:10900	998938	2	True				
ANR	999039	Statement	=	340:17:10902:10902	998938	3	True				
ANR	999040	Statement	dynamic_cast	340:19:10904:10915	998938	4	True				
ANR	999041	Statement	<	340:31:10916:10916	998938	5	True				
ANR	999042	Statement	DateFormat	340:32:10917:10926	998938	6	True				
ANR	999043	Statement	*	340:42:10927:10927	998938	7	True				
ANR	999044	Statement	>	340:43:10928:10928	998938	8	True				
ANR	999045	Statement	(	340:44:10929:10929	998938	9	True				
ANR	999046	Statement	const_cast	341:3:10934:10943	998938	10	True				
ANR	999047	Statement	<	341:13:10944:10944	998938	11	True				
ANR	999048	Statement	Format	341:14:10945:10950	998938	12	True				
ANR	999049	Statement	*	341:21:10952:10952	998938	13	True				
ANR	999050	Statement	>	341:22:10953:10953	998938	14	True				
ANR	999051	Statement	(	341:23:10954:10954	998938	15	True				
ANR	999052	Statement	formats	341:24:10955:10961	998938	16	True				
ANR	999053	Statement	[	341:31:10962:10962	998938	17	True				
ANR	999054	Statement	i	341:32:10963:10963	998938	18	True				
ANR	999055	Statement	]	341:33:10964:10964	998938	19	True				
ANR	999056	Statement	)	341:34:10965:10965	998938	20	True				
ANR	999057	Statement	)	341:35:10966:10966	998938	21	True				
ANR	999058	ExpressionStatement		341:36:10967:10967	998938	22	True				
ANR	999059	IfStatement	if ( df == NULL )		998938	23					
ANR	999060	Condition	df == NULL	342:6:10975:10984	998938	0	True				
ANR	999061	EqualityExpression	df == NULL		998938	0		==			
ANR	999062	Identifier	df		998938	0					
ANR	999063	Identifier	NULL		998938	1					
ANR	999064	CompoundStatement		26:18:788:788	998938	1					
ANR	999065	ContinueStatement	continue ;	343:3:10992:11000	998938	0	True				
ANR	999066	IfStatement	if ( used_tz == NULL )		998938	24					
ANR	999067	Condition	used_tz == NULL	346:6:11013:11027	998938	0	True				
ANR	999068	EqualityExpression	used_tz == NULL		998938	0		==			
ANR	999069	Identifier	used_tz		998938	0					
ANR	999070	Identifier	NULL		998938	1					
ANR	999071	CompoundStatement		31:3:836:865	998938	1					
ANR	999072	IdentifierDeclStatement	"zval nullzv , * zvptr = & nullzv ;"	347:3:11035:11064	998938	0	True				
ANR	999073	IdentifierDecl	nullzv		998938	0					
ANR	999074	IdentifierDeclType	zval		998938	0					
ANR	999075	Identifier	nullzv		998938	1					
ANR	999076	IdentifierDecl	* zvptr = & nullzv		998938	1					
ANR	999077	IdentifierDeclType	zval *		998938	0					
ANR	999078	Identifier	zvptr		998938	1					
ANR	999079	AssignmentExpression	* zvptr = & nullzv		998938	2		=			
ANR	999080	Identifier	zvptr		998938	0					
ANR	999081	UnaryOperationExpression	& nullzv		998938	1					
ANR	999082	UnaryOperator	&		998938	0					
ANR	999083	Identifier	nullzv		998938	1					
ANR	999084	ExpressionStatement	ZVAL_NULL ( zvptr )	348:3:11069:11085	998938	1	True				
ANR	999085	CallExpression	ZVAL_NULL ( zvptr )		998938	0					
ANR	999086	Callee	ZVAL_NULL		998938	0					
ANR	999087	Identifier	ZVAL_NULL		998938	0					
ANR	999088	ArgumentList	zvptr		998938	1					
ANR	999089	Argument	zvptr		998938	0					
ANR	999090	Identifier	zvptr		998938	0					
ANR	999091	ExpressionStatement	"used_tz = timezone_process_timezone_argument ( zvptr , & err , ""msgfmt_format"" )"	349:3:11090:11164	998938	2	True				
ANR	999092	AssignmentExpression	"used_tz = timezone_process_timezone_argument ( zvptr , & err , ""msgfmt_format"" )"		998938	0		=			
ANR	999093	Identifier	used_tz		998938	0					
ANR	999094	CallExpression	"timezone_process_timezone_argument ( zvptr , & err , ""msgfmt_format"" )"		998938	1					
ANR	999095	Callee	timezone_process_timezone_argument		998938	0					
ANR	999096	Identifier	timezone_process_timezone_argument		998938	0					
ANR	999097	ArgumentList	zvptr		998938	1					
ANR	999098	Argument	zvptr		998938	0					
ANR	999099	Identifier	zvptr		998938	0					
ANR	999100	Argument	& err		998938	1					
ANR	999101	UnaryOperationExpression	& err		998938	0					
ANR	999102	UnaryOperator	&		998938	0					
ANR	999103	Identifier	err		998938	1					
ANR	999104	Argument	"""msgfmt_format"""		998938	2					
ANR	999105	PrimaryExpression	"""msgfmt_format"""		998938	0					
ANR	999106	IfStatement	if ( used_tz == NULL )		998938	3					
ANR	999107	Condition	used_tz == NULL	350:7:11173:11187	998938	0	True				
ANR	999108	EqualityExpression	used_tz == NULL		998938	0		==			
ANR	999109	Identifier	used_tz		998938	0					
ANR	999110	Identifier	NULL		998938	1					
ANR	999111	CompoundStatement		34:24:991:991	998938	1					
ANR	999112	ContinueStatement	continue ;	351:4:11196:11204	998938	0	True				
ANR	999113	ExpressionStatement	df -> setTimeZone ( * used_tz )	355:2:11218:11243	998938	25	True				
ANR	999114	CallExpression	df -> setTimeZone ( * used_tz )		998938	0					
ANR	999115	Callee	df -> setTimeZone		998938	0					
ANR	999116	PtrMemberAccess	df -> setTimeZone		998938	0					
ANR	999117	Identifier	df		998938	0					
ANR	999118	Identifier	setTimeZone		998938	1					
ANR	999119	ArgumentList	* used_tz		998938	1					
ANR	999120	Argument	* used_tz		998938	0					
ANR	999121	UnaryOperationExpression	* used_tz		998938	0					
ANR	999122	UnaryOperator	*		998938	0					
ANR	999123	Identifier	used_tz		998938	1					
ANR	999124	IfStatement	if ( U_SUCCESS ( err . code ) )		998938	8					
ANR	999125	Condition	U_SUCCESS ( err . code )	358:5:11254:11272	998938	0	True				
ANR	999126	CallExpression	U_SUCCESS ( err . code )		998938	0					
ANR	999127	Callee	U_SUCCESS		998938	0					
ANR	999128	Identifier	U_SUCCESS		998938	0					
ANR	999129	ArgumentList	err . code		998938	1					
ANR	999130	Argument	err . code		998938	0					
ANR	999131	MemberAccess	err . code		998938	0					
ANR	999132	Identifier	err		998938	0					
ANR	999133	Identifier	code		998938	1					
ANR	999134	CompoundStatement		42:26:1076:1076	998938	1					
ANR	999135	ExpressionStatement	mfo -> mf_data . tz_set = 1	359:2:11279:11302	998938	0	True				
ANR	999136	AssignmentExpression	mfo -> mf_data . tz_set = 1		998938	0		=			
ANR	999137	MemberAccess	mfo -> mf_data . tz_set		998938	0					
ANR	999138	PtrMemberAccess	mfo -> mf_data		998938	0					
ANR	999139	Identifier	mfo		998938	0					
ANR	999140	Identifier	mf_data		998938	1					
ANR	999141	Identifier	tz_set		998938	1					
ANR	999142	PrimaryExpression	1		998938	1					
ANR	999143	ReturnType	static void		998938	1					
ANR	999144	Identifier	umsg_set_timezone		998938	2					
ANR	999145	ParameterList	"MessageFormatter_object * mfo , intl_error & err"		998938	3					
ANR	999146	Parameter	MessageFormatter_object * mfo	315:30:10142:10169	998938	0	True				
ANR	999147	ParameterType	MessageFormatter_object *		998938	0					
ANR	999148	Identifier	mfo		998938	1					
ANR	999149	Parameter	intl_error & err	316:9:10181:10195	998938	1	True				
ANR	999150	ParameterType	intl_error &		998938	0					
ANR	999151	Identifier	err		998938	1					
ANR	999152	CFGEntryNode	ENTRY		998938		True				
ANR	999153	CFGExitNode	EXIT		998938		True				
ANR	999154	Symbol	* mfo		998938						
ANR	999155	Symbol	df		998938						
ANR	999156	Symbol	NULL		998938						
ANR	999157	Symbol	formats		998938						
ANR	999158	Symbol	err		998938						
ANR	999159	Symbol	* used_tz		998938						
ANR	999160	Symbol	count		998938						
ANR	999161	Symbol	i		998938						
ANR	999162	Symbol	mfo -> mf_data		998938						
ANR	999163	Symbol	err . code		998938						
ANR	999164	Symbol	& err		998938						
ANR	999165	Symbol	U_MEMORY_ALLOCATION_ERROR		998938						
ANR	999166	Symbol	U_SUCCESS		998938						
ANR	999167	Symbol	mfo -> mf_data . tz_set		998938						
ANR	999168	Symbol	& nullzv		998938						
ANR	999169	Symbol	timezone_process_timezone_argument		998938						
ANR	999170	Symbol	mfo		998938						
ANR	999171	Symbol	mf		998938						
ANR	999172	Symbol	nullzv		998938						
ANR	999173	Symbol	used_tz		998938						
ANR	999174	Symbol	* mf		998938						
ANR	999175	Symbol	zvptr		998938						
ANR	999176	Symbol	mfo -> mf_data . umsgf		998938						
ANR	999177	Symbol	mf -> getFormats		998938						
ANR	999178	Function	umsg_format_helper	363:0:11310:18916							
ANR	999179	FunctionDef	"umsg_format_helper (MessageFormatter_object * mfo , HashTable * args , UChar * * formatted , int32_t * formatted_len)"		999178	0					
ANR	999180	CompoundStatement		367:0:11456:18916	999178	0					
ANR	999181	IdentifierDeclStatement	int arg_count = zend_hash_num_elements ( args ) ;	368:1:11459:11503	999178	0	True				
ANR	999182	IdentifierDecl	arg_count = zend_hash_num_elements ( args )		999178	0					
ANR	999183	IdentifierDeclType	int		999178	0					
ANR	999184	Identifier	arg_count		999178	1					
ANR	999185	AssignmentExpression	arg_count = zend_hash_num_elements ( args )		999178	2		=			
ANR	999186	Identifier	arg_count		999178	0					
ANR	999187	CallExpression	zend_hash_num_elements ( args )		999178	1					
ANR	999188	Callee	zend_hash_num_elements		999178	0					
ANR	999189	Identifier	zend_hash_num_elements		999178	0					
ANR	999190	ArgumentList	args		999178	1					
ANR	999191	Argument	args		999178	0					
ANR	999192	Identifier	args		999178	0					
ANR	999193	IdentifierDeclStatement	std :: vector < Formattable > fargs ;	369:1:11506:11536	999178	1	True				
ANR	999194	IdentifierDecl	fargs		999178	0					
ANR	999195	IdentifierDeclType	std :: vector < Formattable >		999178	0					
ANR	999196	Identifier	fargs		999178	1					
ANR	999197	IdentifierDeclStatement	std :: vector < UnicodeString > farg_names ;	370:1:11539:11576	999178	2	True				
ANR	999198	IdentifierDecl	farg_names		999178	0					
ANR	999199	IdentifierDeclType	std :: vector < UnicodeString >		999178	0					
ANR	999200	Identifier	farg_names		999178	1					
ANR	999201	IdentifierDeclStatement	MessageFormat * mf = ( MessageFormat * ) mfo -> mf_data . umsgf ;	371:1:11579:11634	999178	3	True				
ANR	999202	IdentifierDecl	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		999178	0					
ANR	999203	IdentifierDeclType	MessageFormat *		999178	0					
ANR	999204	Identifier	mf		999178	1					
ANR	999205	AssignmentExpression	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		999178	2		=			
ANR	999206	Identifier	mf		999178	0					
ANR	999207	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		999178	1					
ANR	999208	CastTarget	MessageFormat *		999178	0					
ANR	999209	MemberAccess	mfo -> mf_data . umsgf		999178	1					
ANR	999210	PtrMemberAccess	mfo -> mf_data		999178	0					
ANR	999211	Identifier	mfo		999178	0					
ANR	999212	Identifier	mf_data		999178	1					
ANR	999213	Identifier	umsgf		999178	1					
ANR	999214	IdentifierDeclStatement	HashTable * types ;	372:1:11637:11653	999178	4	True				
ANR	999215	IdentifierDecl	* types		999178	0					
ANR	999216	IdentifierDeclType	HashTable *		999178	0					
ANR	999217	Identifier	types		999178	1					
ANR	999218	IdentifierDeclStatement	intl_error & err = INTL_DATA_ERROR ( mfo ) ;	373:1:11656:11694	999178	5	True				
ANR	999219	IdentifierDecl	& err = INTL_DATA_ERROR ( mfo )		999178	0					
ANR	999220	IdentifierDeclType	intl_error &		999178	0					
ANR	999221	Identifier	err		999178	1					
ANR	999222	AssignmentExpression	& err = INTL_DATA_ERROR ( mfo )		999178	2		=			
ANR	999223	Identifier	err		999178	0					
ANR	999224	CallExpression	INTL_DATA_ERROR ( mfo )		999178	1					
ANR	999225	Callee	INTL_DATA_ERROR		999178	0					
ANR	999226	Identifier	INTL_DATA_ERROR		999178	0					
ANR	999227	ArgumentList	mfo		999178	1					
ANR	999228	Argument	mfo		999178	0					
ANR	999229	Identifier	mfo		999178	0					
ANR	999230	IfStatement	if ( U_FAILURE ( err . code ) )		999178	6					
ANR	999231	Condition	U_FAILURE ( err . code )	375:5:11702:11720	999178	0	True				
ANR	999232	CallExpression	U_FAILURE ( err . code )		999178	0					
ANR	999233	Callee	U_FAILURE		999178	0					
ANR	999234	Identifier	U_FAILURE		999178	0					
ANR	999235	ArgumentList	err . code		999178	1					
ANR	999236	Argument	err . code		999178	0					
ANR	999237	MemberAccess	err . code		999178	0					
ANR	999238	Identifier	err		999178	0					
ANR	999239	Identifier	code		999178	1					
ANR	999240	CompoundStatement		9:26:266:266	999178	1					
ANR	999241	ReturnStatement	return ;	376:2:11727:11733	999178	0	True				
ANR	999242	ExpressionStatement	"types = umsg_get_types ( mfo , err )"	379:1:11740:11772	999178	7	True				
ANR	999243	AssignmentExpression	"types = umsg_get_types ( mfo , err )"		999178	0		=			
ANR	999244	Identifier	types		999178	0					
ANR	999245	CallExpression	"umsg_get_types ( mfo , err )"		999178	1					
ANR	999246	Callee	umsg_get_types		999178	0					
ANR	999247	Identifier	umsg_get_types		999178	0					
ANR	999248	ArgumentList	mfo		999178	1					
ANR	999249	Argument	mfo		999178	0					
ANR	999250	Identifier	mfo		999178	0					
ANR	999251	Argument	err		999178	1					
ANR	999252	Identifier	err		999178	0					
ANR	999253	ExpressionStatement	"umsg_set_timezone ( mfo , err )"	381:1:11776:11803	999178	8	True				
ANR	999254	CallExpression	"umsg_set_timezone ( mfo , err )"		999178	0					
ANR	999255	Callee	umsg_set_timezone		999178	0					
ANR	999256	Identifier	umsg_set_timezone		999178	0					
ANR	999257	ArgumentList	mfo		999178	1					
ANR	999258	Argument	mfo		999178	0					
ANR	999259	Identifier	mfo		999178	0					
ANR	999260	Argument	err		999178	1					
ANR	999261	Identifier	err		999178	0					
ANR	999262	ExpressionStatement	fargs . resize ( arg_count )	383:1:11807:11830	999178	9	True				
ANR	999263	CallExpression	fargs . resize ( arg_count )		999178	0					
ANR	999264	Callee	fargs . resize		999178	0					
ANR	999265	MemberAccess	fargs . resize		999178	0					
ANR	999266	Identifier	fargs		999178	0					
ANR	999267	Identifier	resize		999178	1					
ANR	999268	ArgumentList	arg_count		999178	1					
ANR	999269	Argument	arg_count		999178	0					
ANR	999270	Identifier	arg_count		999178	0					
ANR	999271	ExpressionStatement	farg_names . resize ( arg_count )	384:1:11833:11861	999178	10	True				
ANR	999272	CallExpression	farg_names . resize ( arg_count )		999178	0					
ANR	999273	Callee	farg_names . resize		999178	0					
ANR	999274	MemberAccess	farg_names . resize		999178	0					
ANR	999275	Identifier	farg_names		999178	0					
ANR	999276	Identifier	resize		999178	1					
ANR	999277	ArgumentList	arg_count		999178	1					
ANR	999278	Argument	arg_count		999178	0					
ANR	999279	Identifier	arg_count		999178	0					
ANR	999280	IdentifierDeclStatement	int argNum = 0 ;	386:1:11865:11882	999178	11	True				
ANR	999281	IdentifierDecl	argNum = 0		999178	0					
ANR	999282	IdentifierDeclType	int		999178	0					
ANR	999283	Identifier	argNum		999178	1					
ANR	999284	AssignmentExpression	argNum = 0		999178	2		=			
ANR	999285	Identifier	argNum		999178	0					
ANR	999286	PrimaryExpression	0		999178	1					
ANR	999287	IdentifierDeclStatement	zval * elem ;	387:1:11885:11897	999178	12	True				
ANR	999288	IdentifierDecl	* elem		999178	0					
ANR	999289	IdentifierDeclType	zval *		999178	0					
ANR	999290	Identifier	elem		999178	1					
ANR	999291	IdentifierDeclStatement	zend_string * str_index ;	390:1:11927:11950	999178	13	True				
ANR	999292	IdentifierDecl	* str_index		999178	0					
ANR	999293	IdentifierDeclType	zend_string *		999178	0					
ANR	999294	Identifier	str_index		999178	1					
ANR	999295	IdentifierDeclStatement	zend_ulong num_index ;	391:1:11953:11975	999178	14	True				
ANR	999296	IdentifierDecl	num_index		999178	0					
ANR	999297	IdentifierDeclType	zend_ulong		999178	0					
ANR	999298	Identifier	num_index		999178	1					
ANR	999299	Statement	ZEND_HASH_FOREACH_KEY_VAL	393:1:11979:12003	999178	15	True				
ANR	999300	Statement	(	393:26:12004:12004	999178	16	True				
ANR	999301	Statement	args	393:27:12005:12008	999178	17	True				
ANR	999302	Statement	","	393:31:12009:12009	999178	18	True				
ANR	999303	Statement	num_index	393:33:12011:12019	999178	19	True				
ANR	999304	Statement	","	393:42:12020:12020	999178	20	True				
ANR	999305	Statement	str_index	393:44:12022:12030	999178	21	True				
ANR	999306	Statement	","	393:53:12031:12031	999178	22	True				
ANR	999307	Statement	elem	393:55:12033:12036	999178	23	True				
ANR	999308	Statement	)	393:59:12037:12037	999178	24	True				
ANR	999309	CompoundStatement		30:2:673:762	999178	25					
ANR	999310	IdentifierDeclStatement	Formattable & formattable = fargs [ argNum ] ;	394:2:12043:12083	999178	0	True				
ANR	999311	IdentifierDecl	& formattable = fargs [ argNum ]		999178	0					
ANR	999312	IdentifierDeclType	Formattable &		999178	0					
ANR	999313	Identifier	formattable		999178	1					
ANR	999314	AssignmentExpression	& formattable = fargs [ argNum ]		999178	2		=			
ANR	999315	Identifier	formattable		999178	0					
ANR	999316	ArrayIndexing	fargs [ argNum ]		999178	1					
ANR	999317	Identifier	fargs		999178	0					
ANR	999318	Identifier	argNum		999178	1					
ANR	999319	IdentifierDeclStatement	UnicodeString & key = farg_names [ argNum ] ;	395:2:12087:12126	999178	1	True				
ANR	999320	IdentifierDecl	& key = farg_names [ argNum ]		999178	0					
ANR	999321	IdentifierDeclType	UnicodeString &		999178	0					
ANR	999322	Identifier	key		999178	1					
ANR	999323	AssignmentExpression	& key = farg_names [ argNum ]		999178	2		=			
ANR	999324	Identifier	key		999178	0					
ANR	999325	ArrayIndexing	farg_names [ argNum ]		999178	1					
ANR	999326	Identifier	farg_names		999178	0					
ANR	999327	Identifier	argNum		999178	1					
ANR	999328	IdentifierDeclStatement	"Formattable :: Type argType = Formattable :: kObject , * storedArgType = NULL ;"	396:2:12130:12219	999178	2	True				
ANR	999329	IdentifierDecl	argType = Formattable :: kObject		999178	0					
ANR	999330	IdentifierDeclType	Formattable :: Type		999178	0					
ANR	999331	Identifier	argType		999178	1					
ANR	999332	AssignmentExpression	argType = Formattable :: kObject		999178	2		=			
ANR	999333	Identifier	Formattable :: kObject		999178	0					
ANR	999334	Identifier	Formattable :: kObject		999178	1					
ANR	999335	IdentifierDecl	* storedArgType = NULL		999178	1					
ANR	999336	IdentifierDeclType	Formattable :: Type *		999178	0					
ANR	999337	Identifier	storedArgType		999178	1					
ANR	999338	AssignmentExpression	* storedArgType = NULL		999178	2		=			
ANR	999339	Identifier	NULL		999178	0					
ANR	999340	Identifier	NULL		999178	1					
ANR	999341	IfStatement	if ( ! U_SUCCESS ( err . code ) )		999178	3					
ANR	999342	Condition	! U_SUCCESS ( err . code )	398:6:12227:12246	999178	0	True				
ANR	999343	UnaryOperationExpression	! U_SUCCESS ( err . code )		999178	0					
ANR	999344	UnaryOperator	!		999178	0					
ANR	999345	CallExpression	U_SUCCESS ( err . code )		999178	1					
ANR	999346	Callee	U_SUCCESS		999178	0					
ANR	999347	Identifier	U_SUCCESS		999178	0					
ANR	999348	ArgumentList	err . code		999178	1					
ANR	999349	Argument	err . code		999178	0					
ANR	999350	MemberAccess	err . code		999178	0					
ANR	999351	Identifier	err		999178	0					
ANR	999352	Identifier	code		999178	1					
ANR	999353	CompoundStatement		32:28:792:792	999178	1					
ANR	999354	BreakStatement	break ;	399:3:12254:12259	999178	0	True				
ANR	999355	IfStatement	if ( str_index == NULL )		999178	4					
ANR	999356	Condition	str_index == NULL	402:6:12309:12325	999178	0	True				
ANR	999357	EqualityExpression	str_index == NULL		999178	0		==			
ANR	999358	Identifier	str_index		999178	0					
ANR	999359	Identifier	NULL		999178	1					
ANR	999360	CompoundStatement		45:5:1137:1193	999178	1					
ANR	999361	IfStatement	if ( num_index > ( zend_ulong ) INT32_MAX )		999178	0					
ANR	999362	Condition	num_index > ( zend_ulong ) INT32_MAX	404:7:12409:12441	999178	0	True				
ANR	999363	RelationalExpression	num_index > ( zend_ulong ) INT32_MAX		999178	0		>			
ANR	999364	Identifier	num_index		999178	0					
ANR	999365	CastExpression	( zend_ulong ) INT32_MAX		999178	1					
ANR	999366	CastTarget	zend_ulong		999178	0					
ANR	999367	Identifier	INT32_MAX		999178	1					
ANR	999368	CompoundStatement		38:42:987:987	999178	1					
ANR	999369	ExpressionStatement	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , ""Found negative or too large array key"" , 0 )"	405:4:12450:12546	999178	0	True				
ANR	999370	CallExpression	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , ""Found negative or too large array key"" , 0 )"		999178	0					
ANR	999371	Callee	intl_errors_set		999178	0					
ANR	999372	Identifier	intl_errors_set		999178	0					
ANR	999373	ArgumentList	& err		999178	1					
ANR	999374	Argument	& err		999178	0					
ANR	999375	UnaryOperationExpression	& err		999178	0					
ANR	999376	UnaryOperator	&		999178	0					
ANR	999377	Identifier	err		999178	1					
ANR	999378	Argument	U_ILLEGAL_ARGUMENT_ERROR		999178	1					
ANR	999379	Identifier	U_ILLEGAL_ARGUMENT_ERROR		999178	0					
ANR	999380	Argument	"""Found negative or too large array key"""		999178	2					
ANR	999381	PrimaryExpression	"""Found negative or too large array key"""		999178	0					
ANR	999382	Argument	0		999178	3					
ANR	999383	PrimaryExpression	0		999178	0					
ANR	999384	ContinueStatement	continue ;	407:4:12552:12560	999178	1	True				
ANR	999385	IdentifierDeclStatement	UChar temp [ 16 ] ;	410:5:12573:12587	999178	1	True				
ANR	999386	IdentifierDecl	temp [ 16 ]		999178	0					
ANR	999387	IdentifierDeclType	UChar [ 16 ]		999178	0					
ANR	999388	Identifier	temp		999178	1					
ANR	999389	PrimaryExpression	16		999178	2					
ANR	999390	IdentifierDeclStatement	"int32_t len = u_sprintf ( temp , ""%u"" , ( uint32_t ) num_index ) ;"	411:5:12594:12650	999178	2	True				
ANR	999391	IdentifierDecl	"len = u_sprintf ( temp , ""%u"" , ( uint32_t ) num_index )"		999178	0					
ANR	999392	IdentifierDeclType	int32_t		999178	0					
ANR	999393	Identifier	len		999178	1					
ANR	999394	AssignmentExpression	"len = u_sprintf ( temp , ""%u"" , ( uint32_t ) num_index )"		999178	2		=			
ANR	999395	Identifier	len		999178	0					
ANR	999396	CallExpression	"u_sprintf ( temp , ""%u"" , ( uint32_t ) num_index )"		999178	1					
ANR	999397	Callee	u_sprintf		999178	0					
ANR	999398	Identifier	u_sprintf		999178	0					
ANR	999399	ArgumentList	temp		999178	1					
ANR	999400	Argument	temp		999178	0					
ANR	999401	Identifier	temp		999178	0					
ANR	999402	Argument	"""%u"""		999178	1					
ANR	999403	PrimaryExpression	"""%u"""		999178	0					
ANR	999404	Argument	( uint32_t ) num_index		999178	2					
ANR	999405	CastExpression	( uint32_t ) num_index		999178	0					
ANR	999406	CastTarget	uint32_t		999178	0					
ANR	999407	Identifier	num_index		999178	1					
ANR	999408	ExpressionStatement	"key . append ( temp , len )"	412:5:12657:12678	999178	3	True				
ANR	999409	CallExpression	"key . append ( temp , len )"		999178	0					
ANR	999410	Callee	key . append		999178	0					
ANR	999411	MemberAccess	key . append		999178	0					
ANR	999412	Identifier	key		999178	0					
ANR	999413	Identifier	append		999178	1					
ANR	999414	ArgumentList	temp		999178	1					
ANR	999415	Argument	temp		999178	0					
ANR	999416	Identifier	temp		999178	0					
ANR	999417	Argument	len		999178	1					
ANR	999418	Identifier	len		999178	0					
ANR	999419	ExpressionStatement	"storedArgType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( types , ( zend_ulong ) num_index )"	414:5:12686:12776	999178	4	True				
ANR	999420	AssignmentExpression	"storedArgType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( types , ( zend_ulong ) num_index )"		999178	0		=			
ANR	999421	Identifier	storedArgType		999178	0					
ANR	999422	CastExpression	"( Formattable :: Type * ) zend_hash_index_find_ptr ( types , ( zend_ulong ) num_index )"		999178	1					
ANR	999423	CastTarget	Formattable :: Type *		999178	0					
ANR	999424	CallExpression	"zend_hash_index_find_ptr ( types , ( zend_ulong ) num_index )"		999178	1					
ANR	999425	Callee	zend_hash_index_find_ptr		999178	0					
ANR	999426	Identifier	zend_hash_index_find_ptr		999178	0					
ANR	999427	ArgumentList	types		999178	1					
ANR	999428	Argument	types		999178	0					
ANR	999429	Identifier	types		999178	0					
ANR	999430	Argument	( zend_ulong ) num_index		999178	1					
ANR	999431	CastExpression	( zend_ulong ) num_index		999178	0					
ANR	999432	CastTarget	zend_ulong		999178	0					
ANR	999433	Identifier	num_index		999178	1					
ANR	999434	ElseStatement	else		999178	0					
ANR	999435	CompoundStatement		49:9:1330:1330	999178	0					
ANR	999436	ExpressionStatement	"intl_stringFromChar ( key , ZSTR_VAL ( str_index ) , ZSTR_LEN ( str_index ) , & err . code )"	416:3:12825:12902	999178	0	True				
ANR	999437	CallExpression	"intl_stringFromChar ( key , ZSTR_VAL ( str_index ) , ZSTR_LEN ( str_index ) , & err . code )"		999178	0					
ANR	999438	Callee	intl_stringFromChar		999178	0					
ANR	999439	Identifier	intl_stringFromChar		999178	0					
ANR	999440	ArgumentList	key		999178	1					
ANR	999441	Argument	key		999178	0					
ANR	999442	Identifier	key		999178	0					
ANR	999443	Argument	ZSTR_VAL ( str_index )		999178	1					
ANR	999444	CallExpression	ZSTR_VAL ( str_index )		999178	0					
ANR	999445	Callee	ZSTR_VAL		999178	0					
ANR	999446	Identifier	ZSTR_VAL		999178	0					
ANR	999447	ArgumentList	str_index		999178	1					
ANR	999448	Argument	str_index		999178	0					
ANR	999449	Identifier	str_index		999178	0					
ANR	999450	Argument	ZSTR_LEN ( str_index )		999178	2					
ANR	999451	CallExpression	ZSTR_LEN ( str_index )		999178	0					
ANR	999452	Callee	ZSTR_LEN		999178	0					
ANR	999453	Identifier	ZSTR_LEN		999178	0					
ANR	999454	ArgumentList	str_index		999178	1					
ANR	999455	Argument	str_index		999178	0					
ANR	999456	Identifier	str_index		999178	0					
ANR	999457	Argument	& err . code		999178	3					
ANR	999458	UnaryOperationExpression	& err . code		999178	0					
ANR	999459	UnaryOperator	&		999178	0					
ANR	999460	MemberAccess	err . code		999178	1					
ANR	999461	Identifier	err		999178	0					
ANR	999462	Identifier	code		999178	1					
ANR	999463	IfStatement	if ( U_FAILURE ( err . code ) )		999178	1					
ANR	999464	Condition	U_FAILURE ( err . code )	418:7:12912:12930	999178	0	True				
ANR	999465	CallExpression	U_FAILURE ( err . code )		999178	0					
ANR	999466	Callee	U_FAILURE		999178	0					
ANR	999467	Identifier	U_FAILURE		999178	0					
ANR	999468	ArgumentList	err . code		999178	1					
ANR	999469	Argument	err . code		999178	0					
ANR	999470	MemberAccess	err . code		999178	0					
ANR	999471	Identifier	err		999178	0					
ANR	999472	Identifier	code		999178	1					
ANR	999473	CompoundStatement		53:4:1482:1495	999178	1					
ANR	999474	IdentifierDeclStatement	char * message ;	419:4:12939:12952	999178	0	True				
ANR	999475	IdentifierDecl	* message		999178	0					
ANR	999476	IdentifierDeclType	char *		999178	0					
ANR	999477	Identifier	message		999178	1					
ANR	999478	ExpressionStatement	"spprintf ( & message , 0 , ""Invalid UTF-8 data in argument key: '%s'"" , ZSTR_VAL ( str_index ) )"	420:4:12958:13049	999178	1	True				
ANR	999479	CallExpression	"spprintf ( & message , 0 , ""Invalid UTF-8 data in argument key: '%s'"" , ZSTR_VAL ( str_index ) )"		999178	0					
ANR	999480	Callee	spprintf		999178	0					
ANR	999481	Identifier	spprintf		999178	0					
ANR	999482	ArgumentList	& message		999178	1					
ANR	999483	Argument	& message		999178	0					
ANR	999484	UnaryOperationExpression	& message		999178	0					
ANR	999485	UnaryOperator	&		999178	0					
ANR	999486	Identifier	message		999178	1					
ANR	999487	Argument	0		999178	1					
ANR	999488	PrimaryExpression	0		999178	0					
ANR	999489	Argument	"""Invalid UTF-8 data in argument key: '%s'"""		999178	2					
ANR	999490	PrimaryExpression	"""Invalid UTF-8 data in argument key: '%s'"""		999178	0					
ANR	999491	Argument	ZSTR_VAL ( str_index )		999178	3					
ANR	999492	CallExpression	ZSTR_VAL ( str_index )		999178	0					
ANR	999493	Callee	ZSTR_VAL		999178	0					
ANR	999494	Identifier	ZSTR_VAL		999178	0					
ANR	999495	ArgumentList	str_index		999178	1					
ANR	999496	Argument	str_index		999178	0					
ANR	999497	Identifier	str_index		999178	0					
ANR	999498	ExpressionStatement	"intl_errors_set ( & err , err . code , message , 1 )"	422:4:13055:13098	999178	2	True				
ANR	999499	CallExpression	"intl_errors_set ( & err , err . code , message , 1 )"		999178	0					
ANR	999500	Callee	intl_errors_set		999178	0					
ANR	999501	Identifier	intl_errors_set		999178	0					
ANR	999502	ArgumentList	& err		999178	1					
ANR	999503	Argument	& err		999178	0					
ANR	999504	UnaryOperationExpression	& err		999178	0					
ANR	999505	UnaryOperator	&		999178	0					
ANR	999506	Identifier	err		999178	1					
ANR	999507	Argument	err . code		999178	1					
ANR	999508	MemberAccess	err . code		999178	0					
ANR	999509	Identifier	err		999178	0					
ANR	999510	Identifier	code		999178	1					
ANR	999511	Argument	message		999178	2					
ANR	999512	Identifier	message		999178	0					
ANR	999513	Argument	1		999178	3					
ANR	999514	PrimaryExpression	1		999178	0					
ANR	999515	ExpressionStatement	efree ( message )	423:4:13104:13118	999178	3	True				
ANR	999516	CallExpression	efree ( message )		999178	0					
ANR	999517	Callee	efree		999178	0					
ANR	999518	Identifier	efree		999178	0					
ANR	999519	ArgumentList	message		999178	1					
ANR	999520	Argument	message		999178	0					
ANR	999521	Identifier	message		999178	0					
ANR	999522	ContinueStatement	continue ;	424:4:13124:13132	999178	4	True				
ANR	999523	ExpressionStatement	"storedArgType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( types , ( char * ) key . getBuffer ( ) , key . length ( ) )"	427:3:13143:13246	999178	2	True				
ANR	999524	AssignmentExpression	"storedArgType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( types , ( char * ) key . getBuffer ( ) , key . length ( ) )"		999178	0		=			
ANR	999525	Identifier	storedArgType		999178	0					
ANR	999526	CastExpression	"( Formattable :: Type * ) zend_hash_str_find_ptr ( types , ( char * ) key . getBuffer ( ) , key . length ( ) )"		999178	1					
ANR	999527	CastTarget	Formattable :: Type *		999178	0					
ANR	999528	CallExpression	"zend_hash_str_find_ptr ( types , ( char * ) key . getBuffer ( ) , key . length ( ) )"		999178	1					
ANR	999529	Callee	zend_hash_str_find_ptr		999178	0					
ANR	999530	Identifier	zend_hash_str_find_ptr		999178	0					
ANR	999531	ArgumentList	types		999178	1					
ANR	999532	Argument	types		999178	0					
ANR	999533	Identifier	types		999178	0					
ANR	999534	Argument	( char * ) key . getBuffer ( )		999178	1					
ANR	999535	CastExpression	( char * ) key . getBuffer ( )		999178	0					
ANR	999536	CastTarget	char *		999178	0					
ANR	999537	CallExpression	key . getBuffer ( )		999178	1					
ANR	999538	Callee	key . getBuffer		999178	0					
ANR	999539	MemberAccess	key . getBuffer		999178	0					
ANR	999540	Identifier	key		999178	0					
ANR	999541	Identifier	getBuffer		999178	1					
ANR	999542	ArgumentList			999178	1					
ANR	999543	Argument	key . length ( )		999178	2					
ANR	999544	CallExpression	key . length ( )		999178	0					
ANR	999545	Callee	key . length		999178	0					
ANR	999546	MemberAccess	key . length		999178	0					
ANR	999547	Identifier	key		999178	0					
ANR	999548	Identifier	length		999178	1					
ANR	999549	ArgumentList			999178	1					
ANR	999550	IfStatement	if ( storedArgType != NULL )		999178	5					
ANR	999551	Condition	storedArgType != NULL	430:6:13259:13279	999178	0	True				
ANR	999552	EqualityExpression	storedArgType != NULL		999178	0		!=			
ANR	999553	Identifier	storedArgType		999178	0					
ANR	999554	Identifier	NULL		999178	1					
ANR	999555	CompoundStatement		64:29:1825:1825	999178	1					
ANR	999556	ExpressionStatement	argType = * storedArgType	431:3:13287:13311	999178	0	True				
ANR	999557	AssignmentExpression	argType = * storedArgType		999178	0		=			
ANR	999558	Identifier	argType		999178	0					
ANR	999559	UnaryOperationExpression	* storedArgType		999178	1					
ANR	999560	UnaryOperator	*		999178	0					
ANR	999561	Identifier	storedArgType		999178	1					
ANR	999562	IfStatement	if ( argType != Formattable :: kObject )		999178	6					
ANR	999563	Condition	argType != Formattable :: kObject	436:6:13431:13461	999178	0	True				
ANR	999564	EqualityExpression	argType != Formattable :: kObject		999178	0		!=			
ANR	999565	Identifier	argType		999178	0					
ANR	999566	Identifier	Formattable :: kObject		999178	1					
ANR	999567	CompoundStatement		70:39:2007:2007	999178	1					
ANR	999568	SwitchStatement	switch ( argType )		999178	0					
ANR	999569	Condition	argType	437:11:13477:13483	999178	0	True				
ANR	999570	Identifier	argType		999178	0					
ANR	999571	CompoundStatement		71:20:2029:2029	999178	1					
ANR	999572	Label	case Formattable :: kString :	438:3:13491:13516	999178	0	True				
ANR	999573	Identifier	Formattable :: kString		999178	0					
ANR	999574	CompoundStatement		82:5:2326:2367	999178	1					
ANR	999575	Label	string_arg :	440:1:13525:13535	999178	0	True				
ANR	999576	Identifier	string_arg		999178	0					
ANR	999577	ExpressionStatement	convert_to_string_ex ( elem )	446:5:13749:13775	999178	1	True				
ANR	999578	CallExpression	convert_to_string_ex ( elem )		999178	0					
ANR	999579	Callee	convert_to_string_ex		999178	0					
ANR	999580	Identifier	convert_to_string_ex		999178	0					
ANR	999581	ArgumentList	elem		999178	1					
ANR	999582	Argument	elem		999178	0					
ANR	999583	Identifier	elem		999178	0					
ANR	999584	IdentifierDeclStatement	UnicodeString * text = new UnicodeString ( ) ;	448:5:13783:13824	999178	2	True				
ANR	999585	IdentifierDecl	* text = new UnicodeString ( )		999178	0					
ANR	999586	IdentifierDeclType	UnicodeString *		999178	0					
ANR	999587	Identifier	text		999178	1					
ANR	999588	AssignmentExpression	* text = new UnicodeString ( )		999178	2		=			
ANR	999589	Identifier	text		999178	0					
ANR	999590	UnaryExpression	new UnicodeString ( )		999178	1					
ANR	999591	ExpressionStatement	"intl_stringFromChar ( * text , Z_STRVAL_P ( elem ) , Z_STRLEN_P ( elem ) , & err . code )"	449:5:13831:13910	999178	3	True				
ANR	999592	CallExpression	"intl_stringFromChar ( * text , Z_STRVAL_P ( elem ) , Z_STRLEN_P ( elem ) , & err . code )"		999178	0					
ANR	999593	Callee	intl_stringFromChar		999178	0					
ANR	999594	Identifier	intl_stringFromChar		999178	0					
ANR	999595	ArgumentList	* text		999178	1					
ANR	999596	Argument	* text		999178	0					
ANR	999597	UnaryOperationExpression	* text		999178	0					
ANR	999598	UnaryOperator	*		999178	0					
ANR	999599	Identifier	text		999178	1					
ANR	999600	Argument	Z_STRVAL_P ( elem )		999178	1					
ANR	999601	CallExpression	Z_STRVAL_P ( elem )		999178	0					
ANR	999602	Callee	Z_STRVAL_P		999178	0					
ANR	999603	Identifier	Z_STRVAL_P		999178	0					
ANR	999604	ArgumentList	elem		999178	1					
ANR	999605	Argument	elem		999178	0					
ANR	999606	Identifier	elem		999178	0					
ANR	999607	Argument	Z_STRLEN_P ( elem )		999178	2					
ANR	999608	CallExpression	Z_STRLEN_P ( elem )		999178	0					
ANR	999609	Callee	Z_STRLEN_P		999178	0					
ANR	999610	Identifier	Z_STRLEN_P		999178	0					
ANR	999611	ArgumentList	elem		999178	1					
ANR	999612	Argument	elem		999178	0					
ANR	999613	Identifier	elem		999178	0					
ANR	999614	Argument	& err . code		999178	3					
ANR	999615	UnaryOperationExpression	& err . code		999178	0					
ANR	999616	UnaryOperator	&		999178	0					
ANR	999617	MemberAccess	err . code		999178	1					
ANR	999618	Identifier	err		999178	0					
ANR	999619	Identifier	code		999178	1					
ANR	999620	IfStatement	if ( U_FAILURE ( err . code ) )		999178	4					
ANR	999621	Condition	U_FAILURE ( err . code )	452:9:13922:13940	999178	0	True				
ANR	999622	CallExpression	U_FAILURE ( err . code )		999178	0					
ANR	999623	Callee	U_FAILURE		999178	0					
ANR	999624	Identifier	U_FAILURE		999178	0					
ANR	999625	ArgumentList	err . code		999178	1					
ANR	999626	Argument	err . code		999178	0					
ANR	999627	MemberAccess	err . code		999178	0					
ANR	999628	Identifier	err		999178	0					
ANR	999629	Identifier	code		999178	1					
ANR	999630	CompoundStatement		87:6:2494:2507	999178	1					
ANR	999631	IdentifierDeclStatement	char * message ;	453:6:13951:13964	999178	0	True				
ANR	999632	IdentifierDecl	* message		999178	0					
ANR	999633	IdentifierDeclType	char *		999178	0					
ANR	999634	Identifier	message		999178	1					
ANR	999635	Statement	spprintf	454:6:13972:13979	999178	1	True				
ANR	999636	Statement	(	454:14:13980:13980	999178	2	True				
ANR	999637	Statement	&	454:15:13981:13981	999178	3	True				
ANR	999638	Statement	message	454:16:13982:13988	999178	4	True				
ANR	999639	Statement	","	454:23:13989:13989	999178	5	True				
ANR	999640	Statement	0	454:25:13991:13991	999178	6	True				
ANR	999641	Statement	","	454:26:13992:13992	999178	7	True				
ANR	999642	Statement	"""Invalid UTF-8 data in string argument: """	454:28:13994:14034	999178	8	True				
ANR	999643	Statement	"""'%s'"""	455:7:14043:14048	999178	9	True				
ANR	999644	Statement	","	455:13:14049:14049	999178	10	True				
ANR	999645	Statement	Z_STRVAL_P	455:15:14051:14060	999178	11	True				
ANR	999646	Statement	(	455:25:14061:14061	999178	12	True				
ANR	999647	Statement	elem	455:26:14062:14065	999178	13	True				
ANR	999648	Statement	)	455:30:14066:14066	999178	14	True				
ANR	999649	Statement	)	455:31:14067:14067	999178	15	True				
ANR	999650	ExpressionStatement		455:32:14068:14068	999178	16	True				
ANR	999651	ExpressionStatement	"intl_errors_set ( & err , err . code , message , 1 )"	456:6:14076:14119	999178	17	True				
ANR	999652	CallExpression	"intl_errors_set ( & err , err . code , message , 1 )"		999178	0					
ANR	999653	Callee	intl_errors_set		999178	0					
ANR	999654	Identifier	intl_errors_set		999178	0					
ANR	999655	ArgumentList	& err		999178	1					
ANR	999656	Argument	& err		999178	0					
ANR	999657	UnaryOperationExpression	& err		999178	0					
ANR	999658	UnaryOperator	&		999178	0					
ANR	999659	Identifier	err		999178	1					
ANR	999660	Argument	err . code		999178	1					
ANR	999661	MemberAccess	err . code		999178	0					
ANR	999662	Identifier	err		999178	0					
ANR	999663	Identifier	code		999178	1					
ANR	999664	Argument	message		999178	2					
ANR	999665	Identifier	message		999178	0					
ANR	999666	Argument	1		999178	3					
ANR	999667	PrimaryExpression	1		999178	0					
ANR	999668	ExpressionStatement	efree ( message )	457:6:14127:14141	999178	18	True				
ANR	999669	CallExpression	efree ( message )		999178	0					
ANR	999670	Callee	efree		999178	0					
ANR	999671	Identifier	efree		999178	0					
ANR	999672	ArgumentList	message		999178	1					
ANR	999673	Argument	message		999178	0					
ANR	999674	Identifier	message		999178	0					
ANR	999675	Statement	delete	458:6:14149:14154	999178	19	True				
ANR	999676	ExpressionStatement	text	458:13:14156:14160	999178	20	True				
ANR	999677	Identifier	text		999178	0					
ANR	999678	ContinueStatement	continue ;	459:6:14168:14176	999178	21	True				
ANR	999679	ExpressionStatement	formattable . adoptString ( text )	461:5:14190:14219	999178	5	True				
ANR	999680	CallExpression	formattable . adoptString ( text )		999178	0					
ANR	999681	Callee	formattable . adoptString		999178	0					
ANR	999682	MemberAccess	formattable . adoptString		999178	0					
ANR	999683	Identifier	formattable		999178	0					
ANR	999684	Identifier	adoptString		999178	1					
ANR	999685	ArgumentList	text		999178	1					
ANR	999686	Argument	text		999178	0					
ANR	999687	Identifier	text		999178	0					
ANR	999688	BreakStatement	break ;	462:5:14226:14231	999178	6	True				
ANR	999689	Label	case Formattable :: kDouble :	464:3:14242:14267	999178	2	True				
ANR	999690	Identifier	Formattable :: kDouble		999178	0					
ANR	999691	CompoundStatement		100:5:2823:2831	999178	3					
ANR	999692	IdentifierDeclStatement	double d ;	466:5:14280:14288	999178	0	True				
ANR	999693	IdentifierDecl	d		999178	0					
ANR	999694	IdentifierDeclType	double		999178	0					
ANR	999695	Identifier	d		999178	1					
ANR	999696	IfStatement	if ( Z_TYPE_P ( elem ) == IS_DOUBLE )		999178	1					
ANR	999697	Condition	Z_TYPE_P ( elem ) == IS_DOUBLE	467:9:14299:14325	999178	0	True				
ANR	999698	EqualityExpression	Z_TYPE_P ( elem ) == IS_DOUBLE		999178	0		==			
ANR	999699	CallExpression	Z_TYPE_P ( elem )		999178	0					
ANR	999700	Callee	Z_TYPE_P		999178	0					
ANR	999701	Identifier	Z_TYPE_P		999178	0					
ANR	999702	ArgumentList	elem		999178	1					
ANR	999703	Argument	elem		999178	0					
ANR	999704	Identifier	elem		999178	0					
ANR	999705	Identifier	IS_DOUBLE		999178	1					
ANR	999706	CompoundStatement		101:38:2871:2871	999178	1					
ANR	999707	ExpressionStatement	d = Z_DVAL_P ( elem )	468:6:14336:14354	999178	0	True				
ANR	999708	AssignmentExpression	d = Z_DVAL_P ( elem )		999178	0		=			
ANR	999709	Identifier	d		999178	0					
ANR	999710	CallExpression	Z_DVAL_P ( elem )		999178	1					
ANR	999711	Callee	Z_DVAL_P		999178	0					
ANR	999712	Identifier	Z_DVAL_P		999178	0					
ANR	999713	ArgumentList	elem		999178	1					
ANR	999714	Argument	elem		999178	0					
ANR	999715	Identifier	elem		999178	0					
ANR	999716	ElseStatement	else		999178	0					
ANR	999717	IfStatement	if ( Z_TYPE_P ( elem ) == IS_LONG )		999178	0					
ANR	999718	Condition	Z_TYPE_P ( elem ) == IS_LONG	469:16:14372:14396	999178	0	True				
ANR	999719	EqualityExpression	Z_TYPE_P ( elem ) == IS_LONG		999178	0		==			
ANR	999720	CallExpression	Z_TYPE_P ( elem )		999178	0					
ANR	999721	Callee	Z_TYPE_P		999178	0					
ANR	999722	Identifier	Z_TYPE_P		999178	0					
ANR	999723	ArgumentList	elem		999178	1					
ANR	999724	Argument	elem		999178	0					
ANR	999725	Identifier	elem		999178	0					
ANR	999726	Identifier	IS_LONG		999178	1					
ANR	999727	CompoundStatement		103:43:2942:2942	999178	1					
ANR	999728	ExpressionStatement	d = ( double ) Z_LVAL_P ( elem )	470:6:14407:14433	999178	0	True				
ANR	999729	AssignmentExpression	d = ( double ) Z_LVAL_P ( elem )		999178	0		=			
ANR	999730	Identifier	d		999178	0					
ANR	999731	CastExpression	( double ) Z_LVAL_P ( elem )		999178	1					
ANR	999732	CastTarget	double		999178	0					
ANR	999733	CallExpression	Z_LVAL_P ( elem )		999178	1					
ANR	999734	Callee	Z_LVAL_P		999178	0					
ANR	999735	Identifier	Z_LVAL_P		999178	0					
ANR	999736	ArgumentList	elem		999178	1					
ANR	999737	Argument	elem		999178	0					
ANR	999738	Identifier	elem		999178	0					
ANR	999739	ElseStatement	else		999178	0					
ANR	999740	CompoundStatement		105:12:2990:2990	999178	0					
ANR	999741	ExpressionStatement	SEPARATE_ZVAL_IF_NOT_REF ( elem )	472:6:14455:14485	999178	0	True				
ANR	999742	CallExpression	SEPARATE_ZVAL_IF_NOT_REF ( elem )		999178	0					
ANR	999743	Callee	SEPARATE_ZVAL_IF_NOT_REF		999178	0					
ANR	999744	Identifier	SEPARATE_ZVAL_IF_NOT_REF		999178	0					
ANR	999745	ArgumentList	elem		999178	1					
ANR	999746	Argument	elem		999178	0					
ANR	999747	Identifier	elem		999178	0					
ANR	999748	ExpressionStatement	convert_scalar_to_number ( elem )	473:6:14493:14523	999178	1	True				
ANR	999749	CallExpression	convert_scalar_to_number ( elem )		999178	0					
ANR	999750	Callee	convert_scalar_to_number		999178	0					
ANR	999751	Identifier	convert_scalar_to_number		999178	0					
ANR	999752	ArgumentList	elem		999178	1					
ANR	999753	Argument	elem		999178	0					
ANR	999754	Identifier	elem		999178	0					
ANR	999755	ExpressionStatement	d = ( Z_TYPE_P ( elem ) == IS_DOUBLE ) ? Z_DVAL_P ( elem ) : ( double ) Z_LVAL_P ( elem )	474:6:14531:14620	999178	2	True				
ANR	999756	AssignmentExpression	d = ( Z_TYPE_P ( elem ) == IS_DOUBLE ) ? Z_DVAL_P ( elem ) : ( double ) Z_LVAL_P ( elem )		999178	0		=			
ANR	999757	Identifier	d		999178	0					
ANR	999758	ConditionalExpression	( Z_TYPE_P ( elem ) == IS_DOUBLE ) ? Z_DVAL_P ( elem ) : ( double ) Z_LVAL_P ( elem )		999178	1					
ANR	999759	Condition	Z_TYPE_P ( elem ) == IS_DOUBLE		999178	0					
ANR	999760	EqualityExpression	Z_TYPE_P ( elem ) == IS_DOUBLE		999178	0		==			
ANR	999761	CallExpression	Z_TYPE_P ( elem )		999178	0					
ANR	999762	Callee	Z_TYPE_P		999178	0					
ANR	999763	Identifier	Z_TYPE_P		999178	0					
ANR	999764	ArgumentList	elem		999178	1					
ANR	999765	Argument	elem		999178	0					
ANR	999766	Identifier	elem		999178	0					
ANR	999767	Identifier	IS_DOUBLE		999178	1					
ANR	999768	CallExpression	Z_DVAL_P ( elem )		999178	1					
ANR	999769	Callee	Z_DVAL_P		999178	0					
ANR	999770	Identifier	Z_DVAL_P		999178	0					
ANR	999771	ArgumentList	elem		999178	1					
ANR	999772	Argument	elem		999178	0					
ANR	999773	Identifier	elem		999178	0					
ANR	999774	CastExpression	( double ) Z_LVAL_P ( elem )		999178	2					
ANR	999775	CastTarget	double		999178	0					
ANR	999776	CallExpression	Z_LVAL_P ( elem )		999178	1					
ANR	999777	Callee	Z_LVAL_P		999178	0					
ANR	999778	Identifier	Z_LVAL_P		999178	0					
ANR	999779	ArgumentList	elem		999178	1					
ANR	999780	Argument	elem		999178	0					
ANR	999781	Identifier	elem		999178	0					
ANR	999782	ExpressionStatement	formattable . setDouble ( d )	478:5:14634:14658	999178	2	True				
ANR	999783	CallExpression	formattable . setDouble ( d )		999178	0					
ANR	999784	Callee	formattable . setDouble		999178	0					
ANR	999785	MemberAccess	formattable . setDouble		999178	0					
ANR	999786	Identifier	formattable		999178	0					
ANR	999787	Identifier	setDouble		999178	1					
ANR	999788	ArgumentList	d		999178	1					
ANR	999789	Argument	d		999178	0					
ANR	999790	Identifier	d		999178	0					
ANR	999791	BreakStatement	break ;	479:5:14665:14670	999178	3	True				
ANR	999792	Label	case Formattable :: kLong :	481:3:14681:14704	999178	4	True				
ANR	999793	Identifier	Formattable :: kLong		999178	0					
ANR	999794	CompoundStatement		117:5:3260:3278	999178	5					
ANR	999795	IdentifierDeclStatement	int32_t tInt32 = 0 ;	483:5:14717:14735	999178	0	True				
ANR	999796	IdentifierDecl	tInt32 = 0		999178	0					
ANR	999797	IdentifierDeclType	int32_t		999178	0					
ANR	999798	Identifier	tInt32		999178	1					
ANR	999799	AssignmentExpression	tInt32 = 0		999178	2		=			
ANR	999800	Identifier	tInt32		999178	0					
ANR	999801	PrimaryExpression	0		999178	1					
ANR	999802	Label	retry_klong :	484:0:14737:14748	999178	1	True				
ANR	999803	Identifier	retry_klong		999178	0					
ANR	999804	IfStatement	if ( Z_TYPE_P ( elem ) == IS_DOUBLE )		999178	2					
ANR	999805	Condition	Z_TYPE_P ( elem ) == IS_DOUBLE	485:9:14759:14785	999178	0	True				
ANR	999806	EqualityExpression	Z_TYPE_P ( elem ) == IS_DOUBLE		999178	0		==			
ANR	999807	CallExpression	Z_TYPE_P ( elem )		999178	0					
ANR	999808	Callee	Z_TYPE_P		999178	0					
ANR	999809	Identifier	Z_TYPE_P		999178	0					
ANR	999810	ArgumentList	elem		999178	1					
ANR	999811	Argument	elem		999178	0					
ANR	999812	Identifier	elem		999178	0					
ANR	999813	Identifier	IS_DOUBLE		999178	1					
ANR	999814	CompoundStatement		119:38:3331:3331	999178	1					
ANR	999815	IfStatement	if ( Z_DVAL_P ( elem ) > ( double ) INT32_MAX || Z_DVAL_P ( elem ) < ( double ) INT32_MIN )		999178	0					
ANR	999816	Condition	Z_DVAL_P ( elem ) > ( double ) INT32_MAX || Z_DVAL_P ( elem ) < ( double ) INT32_MIN	486:10:14800:14879	999178	0	True				
ANR	999817	OrExpression	Z_DVAL_P ( elem ) > ( double ) INT32_MAX || Z_DVAL_P ( elem ) < ( double ) INT32_MIN		999178	0		||			
ANR	999818	RelationalExpression	Z_DVAL_P ( elem ) > ( double ) INT32_MAX		999178	0		>			
ANR	999819	CallExpression	Z_DVAL_P ( elem )		999178	0					
ANR	999820	Callee	Z_DVAL_P		999178	0					
ANR	999821	Identifier	Z_DVAL_P		999178	0					
ANR	999822	ArgumentList	elem		999178	1					
ANR	999823	Argument	elem		999178	0					
ANR	999824	Identifier	elem		999178	0					
ANR	999825	CastExpression	( double ) INT32_MAX		999178	1					
ANR	999826	CastTarget	double		999178	0					
ANR	999827	Identifier	INT32_MAX		999178	1					
ANR	999828	RelationalExpression	Z_DVAL_P ( elem ) < ( double ) INT32_MIN		999178	1		<			
ANR	999829	CallExpression	Z_DVAL_P ( elem )		999178	0					
ANR	999830	Callee	Z_DVAL_P		999178	0					
ANR	999831	Identifier	Z_DVAL_P		999178	0					
ANR	999832	ArgumentList	elem		999178	1					
ANR	999833	Argument	elem		999178	0					
ANR	999834	Identifier	elem		999178	0					
ANR	999835	CastExpression	( double ) INT32_MIN		999178	1					
ANR	999836	CastTarget	double		999178	0					
ANR	999837	Identifier	INT32_MIN		999178	1					
ANR	999838	CompoundStatement		121:44:3425:3425	999178	1					
ANR	999839	Statement	intl_errors_set	488:7:14891:14905	999178	0	True				
ANR	999840	Statement	(	488:22:14906:14906	999178	1	True				
ANR	999841	Statement	&	488:23:14907:14907	999178	2	True				
ANR	999842	Statement	err	488:24:14908:14910	999178	3	True				
ANR	999843	Statement	","	488:27:14911:14911	999178	4	True				
ANR	999844	Statement	U_ILLEGAL_ARGUMENT_ERROR	488:29:14913:14936	999178	5	True				
ANR	999845	Statement	","	488:53:14937:14937	999178	6	True				
ANR	999846	Statement	"""Found PHP float with absolute value too large for """	489:8:14947:14998	999178	7	True				
ANR	999847	Statement	"""32 bit integer argument"""	490:8:15008:15032	999178	8	True				
ANR	999848	Statement	","	490:33:15033:15033	999178	9	True				
ANR	999849	Statement	0	490:35:15035:15035	999178	10	True				
ANR	999850	Statement	)	490:36:15036:15036	999178	11	True				
ANR	999851	ExpressionStatement		490:37:15037:15037	999178	12	True				
ANR	999852	ElseStatement	else		999178	0					
ANR	999853	CompoundStatement		125:13:3595:3595	999178	0					
ANR	999854	ExpressionStatement	tInt32 = ( int32_t ) Z_DVAL_P ( elem )	492:7:15061:15093	999178	0	True				
ANR	999855	AssignmentExpression	tInt32 = ( int32_t ) Z_DVAL_P ( elem )		999178	0		=			
ANR	999856	Identifier	tInt32		999178	0					
ANR	999857	CastExpression	( int32_t ) Z_DVAL_P ( elem )		999178	1					
ANR	999858	CastTarget	int32_t		999178	0					
ANR	999859	CallExpression	Z_DVAL_P ( elem )		999178	1					
ANR	999860	Callee	Z_DVAL_P		999178	0					
ANR	999861	Identifier	Z_DVAL_P		999178	0					
ANR	999862	ArgumentList	elem		999178	1					
ANR	999863	Argument	elem		999178	0					
ANR	999864	Identifier	elem		999178	0					
ANR	999865	ElseStatement	else		999178	0					
ANR	999866	IfStatement	if ( Z_TYPE_P ( elem ) == IS_LONG )		999178	0					
ANR	999867	Condition	Z_TYPE_P ( elem ) == IS_LONG	494:16:15119:15143	999178	0	True				
ANR	999868	EqualityExpression	Z_TYPE_P ( elem ) == IS_LONG		999178	0		==			
ANR	999869	CallExpression	Z_TYPE_P ( elem )		999178	0					
ANR	999870	Callee	Z_TYPE_P		999178	0					
ANR	999871	Identifier	Z_TYPE_P		999178	0					
ANR	999872	ArgumentList	elem		999178	1					
ANR	999873	Argument	elem		999178	0					
ANR	999874	Identifier	elem		999178	0					
ANR	999875	Identifier	IS_LONG		999178	1					
ANR	999876	CompoundStatement		128:43:3689:3689	999178	1					
ANR	999877	IfStatement	if ( Z_LVAL_P ( elem ) > INT32_MAX || Z_LVAL_P ( elem ) < INT32_MIN )		999178	0					
ANR	999878	Condition	Z_LVAL_P ( elem ) > INT32_MAX || Z_LVAL_P ( elem ) < INT32_MIN	495:10:15158:15221	999178	0	True				
ANR	999879	OrExpression	Z_LVAL_P ( elem ) > INT32_MAX || Z_LVAL_P ( elem ) < INT32_MIN		999178	0		||			
ANR	999880	RelationalExpression	Z_LVAL_P ( elem ) > INT32_MAX		999178	0		>			
ANR	999881	CallExpression	Z_LVAL_P ( elem )		999178	0					
ANR	999882	Callee	Z_LVAL_P		999178	0					
ANR	999883	Identifier	Z_LVAL_P		999178	0					
ANR	999884	ArgumentList	elem		999178	1					
ANR	999885	Argument	elem		999178	0					
ANR	999886	Identifier	elem		999178	0					
ANR	999887	Identifier	INT32_MAX		999178	1					
ANR	999888	RelationalExpression	Z_LVAL_P ( elem ) < INT32_MIN		999178	1		<			
ANR	999889	CallExpression	Z_LVAL_P ( elem )		999178	0					
ANR	999890	Callee	Z_LVAL_P		999178	0					
ANR	999891	Identifier	Z_LVAL_P		999178	0					
ANR	999892	ArgumentList	elem		999178	1					
ANR	999893	Argument	elem		999178	0					
ANR	999894	Identifier	elem		999178	0					
ANR	999895	Identifier	INT32_MIN		999178	1					
ANR	999896	CompoundStatement		130:36:3767:3767	999178	1					
ANR	999897	Statement	intl_errors_set	497:7:15233:15247	999178	0	True				
ANR	999898	Statement	(	497:22:15248:15248	999178	1	True				
ANR	999899	Statement	&	497:23:15249:15249	999178	2	True				
ANR	999900	Statement	err	497:24:15250:15252	999178	3	True				
ANR	999901	Statement	","	497:27:15253:15253	999178	4	True				
ANR	999902	Statement	U_ILLEGAL_ARGUMENT_ERROR	497:29:15255:15278	999178	5	True				
ANR	999903	Statement	","	497:53:15279:15279	999178	6	True				
ANR	999904	Statement	"""Found PHP integer with absolute value too large """	498:8:15289:15338	999178	7	True				
ANR	999905	Statement	"""for 32 bit integer argument"""	499:8:15348:15376	999178	8	True				
ANR	999906	Statement	","	499:37:15377:15377	999178	9	True				
ANR	999907	Statement	0	499:39:15379:15379	999178	10	True				
ANR	999908	Statement	)	499:40:15380:15380	999178	11	True				
ANR	999909	ExpressionStatement		499:41:15381:15381	999178	12	True				
ANR	999910	ElseStatement	else		999178	0					
ANR	999911	CompoundStatement		134:13:3939:3939	999178	0					
ANR	999912	ExpressionStatement	tInt32 = ( int32_t ) Z_LVAL_P ( elem )	501:7:15405:15437	999178	0	True				
ANR	999913	AssignmentExpression	tInt32 = ( int32_t ) Z_LVAL_P ( elem )		999178	0		=			
ANR	999914	Identifier	tInt32		999178	0					
ANR	999915	CastExpression	( int32_t ) Z_LVAL_P ( elem )		999178	1					
ANR	999916	CastTarget	int32_t		999178	0					
ANR	999917	CallExpression	Z_LVAL_P ( elem )		999178	1					
ANR	999918	Callee	Z_LVAL_P		999178	0					
ANR	999919	Identifier	Z_LVAL_P		999178	0					
ANR	999920	ArgumentList	elem		999178	1					
ANR	999921	Argument	elem		999178	0					
ANR	999922	Identifier	elem		999178	0					
ANR	999923	ElseStatement	else		999178	0					
ANR	999924	CompoundStatement		137:12:4002:4002	999178	0					
ANR	999925	ExpressionStatement	SEPARATE_ZVAL_IF_NOT_REF ( elem )	504:6:15467:15497	999178	0	True				
ANR	999926	CallExpression	SEPARATE_ZVAL_IF_NOT_REF ( elem )		999178	0					
ANR	999927	Callee	SEPARATE_ZVAL_IF_NOT_REF		999178	0					
ANR	999928	Identifier	SEPARATE_ZVAL_IF_NOT_REF		999178	0					
ANR	999929	ArgumentList	elem		999178	1					
ANR	999930	Argument	elem		999178	0					
ANR	999931	Identifier	elem		999178	0					
ANR	999932	ExpressionStatement	convert_scalar_to_number ( elem )	505:6:15505:15535	999178	1	True				
ANR	999933	CallExpression	convert_scalar_to_number ( elem )		999178	0					
ANR	999934	Callee	convert_scalar_to_number		999178	0					
ANR	999935	Identifier	convert_scalar_to_number		999178	0					
ANR	999936	ArgumentList	elem		999178	1					
ANR	999937	Argument	elem		999178	0					
ANR	999938	Identifier	elem		999178	0					
ANR	999939	GotoStatement	goto retry_klong ;	506:6:15543:15559	999178	2	True				
ANR	999940	Identifier	retry_klong		999178	0					
ANR	999941	ExpressionStatement	formattable . setLong ( tInt32 )	508:5:15573:15600	999178	3	True				
ANR	999942	CallExpression	formattable . setLong ( tInt32 )		999178	0					
ANR	999943	Callee	formattable . setLong		999178	0					
ANR	999944	MemberAccess	formattable . setLong		999178	0					
ANR	999945	Identifier	formattable		999178	0					
ANR	999946	Identifier	setLong		999178	1					
ANR	999947	ArgumentList	tInt32		999178	1					
ANR	999948	Argument	tInt32		999178	0					
ANR	999949	Identifier	tInt32		999178	0					
ANR	999950	BreakStatement	break ;	509:5:15607:15612	999178	4	True				
ANR	999951	Label	case Formattable :: kInt64 :	511:3:15623:15647	999178	6	True				
ANR	999952	Identifier	Formattable :: kInt64		999178	0					
ANR	999953	CompoundStatement		147:5:4203:4221	999178	7					
ANR	999954	IdentifierDeclStatement	int64_t tInt64 = 0 ;	513:5:15660:15678	999178	0	True				
ANR	999955	IdentifierDecl	tInt64 = 0		999178	0					
ANR	999956	IdentifierDeclType	int64_t		999178	0					
ANR	999957	Identifier	tInt64		999178	1					
ANR	999958	AssignmentExpression	tInt64 = 0		999178	2		=			
ANR	999959	Identifier	tInt64		999178	0					
ANR	999960	PrimaryExpression	0		999178	1					
ANR	999961	Label	retry_kint64 :	514:0:15680:15692	999178	1	True				
ANR	999962	Identifier	retry_kint64		999178	0					
ANR	999963	IfStatement	if ( Z_TYPE_P ( elem ) == IS_DOUBLE )		999178	2					
ANR	999964	Condition	Z_TYPE_P ( elem ) == IS_DOUBLE	515:9:15703:15729	999178	0	True				
ANR	999965	EqualityExpression	Z_TYPE_P ( elem ) == IS_DOUBLE		999178	0		==			
ANR	999966	CallExpression	Z_TYPE_P ( elem )		999178	0					
ANR	999967	Callee	Z_TYPE_P		999178	0					
ANR	999968	Identifier	Z_TYPE_P		999178	0					
ANR	999969	ArgumentList	elem		999178	1					
ANR	999970	Argument	elem		999178	0					
ANR	999971	Identifier	elem		999178	0					
ANR	999972	Identifier	IS_DOUBLE		999178	1					
ANR	999973	CompoundStatement		149:38:4275:4275	999178	1					
ANR	999974	IfStatement	if ( Z_DVAL_P ( elem ) > ( double ) U_INT64_MAX || Z_DVAL_P ( elem ) < ( double ) U_INT64_MIN )		999178	0					
ANR	999975	Condition	Z_DVAL_P ( elem ) > ( double ) U_INT64_MAX || Z_DVAL_P ( elem ) < ( double ) U_INT64_MIN	516:10:15744:15827	999178	0	True				
ANR	999976	OrExpression	Z_DVAL_P ( elem ) > ( double ) U_INT64_MAX || Z_DVAL_P ( elem ) < ( double ) U_INT64_MIN		999178	0		||			
ANR	999977	RelationalExpression	Z_DVAL_P ( elem ) > ( double ) U_INT64_MAX		999178	0		>			
ANR	999978	CallExpression	Z_DVAL_P ( elem )		999178	0					
ANR	999979	Callee	Z_DVAL_P		999178	0					
ANR	999980	Identifier	Z_DVAL_P		999178	0					
ANR	999981	ArgumentList	elem		999178	1					
ANR	999982	Argument	elem		999178	0					
ANR	999983	Identifier	elem		999178	0					
ANR	999984	CastExpression	( double ) U_INT64_MAX		999178	1					
ANR	999985	CastTarget	double		999178	0					
ANR	999986	Identifier	U_INT64_MAX		999178	1					
ANR	999987	RelationalExpression	Z_DVAL_P ( elem ) < ( double ) U_INT64_MIN		999178	1		<			
ANR	999988	CallExpression	Z_DVAL_P ( elem )		999178	0					
ANR	999989	Callee	Z_DVAL_P		999178	0					
ANR	999990	Identifier	Z_DVAL_P		999178	0					
ANR	999991	ArgumentList	elem		999178	1					
ANR	999992	Argument	elem		999178	0					
ANR	999993	Identifier	elem		999178	0					
ANR	999994	CastExpression	( double ) U_INT64_MIN		999178	1					
ANR	999995	CastTarget	double		999178	0					
ANR	999996	Identifier	U_INT64_MIN		999178	1					
ANR	999997	CompoundStatement		151:46:4373:4373	999178	1					
ANR	999998	Statement	intl_errors_set	518:7:15839:15853	999178	0	True				
ANR	999999	Statement	(	518:22:15854:15854	999178	1	True				
ANR	1000000	Statement	&	518:23:15855:15855	999178	2	True				
ANR	1000001	Statement	err	518:24:15856:15858	999178	3	True				
ANR	1000002	Statement	","	518:27:15859:15859	999178	4	True				
ANR	1000003	Statement	U_ILLEGAL_ARGUMENT_ERROR	518:29:15861:15884	999178	5	True				
ANR	1000004	Statement	","	518:53:15885:15885	999178	6	True				
ANR	1000005	Statement	"""Found PHP float with absolute value too large for """	519:8:15895:15946	999178	7	True				
ANR	1000006	Statement	"""64 bit integer argument"""	520:8:15956:15980	999178	8	True				
ANR	1000007	Statement	","	520:33:15981:15981	999178	9	True				
ANR	1000008	Statement	0	520:35:15983:15983	999178	10	True				
ANR	1000009	Statement	)	520:36:15984:15984	999178	11	True				
ANR	1000010	ExpressionStatement		520:37:15985:15985	999178	12	True				
ANR	1000011	ElseStatement	else		999178	0					
ANR	1000012	CompoundStatement		155:13:4543:4543	999178	0					
ANR	1000013	ExpressionStatement	tInt64 = ( int64_t ) Z_DVAL_P ( elem )	522:7:16009:16041	999178	0	True				
ANR	1000014	AssignmentExpression	tInt64 = ( int64_t ) Z_DVAL_P ( elem )		999178	0		=			
ANR	1000015	Identifier	tInt64		999178	0					
ANR	1000016	CastExpression	( int64_t ) Z_DVAL_P ( elem )		999178	1					
ANR	1000017	CastTarget	int64_t		999178	0					
ANR	1000018	CallExpression	Z_DVAL_P ( elem )		999178	1					
ANR	1000019	Callee	Z_DVAL_P		999178	0					
ANR	1000020	Identifier	Z_DVAL_P		999178	0					
ANR	1000021	ArgumentList	elem		999178	1					
ANR	1000022	Argument	elem		999178	0					
ANR	1000023	Identifier	elem		999178	0					
ANR	1000024	ElseStatement	else		999178	0					
ANR	1000025	IfStatement	if ( Z_TYPE_P ( elem ) == IS_LONG )		999178	0					
ANR	1000026	Condition	Z_TYPE_P ( elem ) == IS_LONG	524:16:16067:16091	999178	0	True				
ANR	1000027	EqualityExpression	Z_TYPE_P ( elem ) == IS_LONG		999178	0		==			
ANR	1000028	CallExpression	Z_TYPE_P ( elem )		999178	0					
ANR	1000029	Callee	Z_TYPE_P		999178	0					
ANR	1000030	Identifier	Z_TYPE_P		999178	0					
ANR	1000031	ArgumentList	elem		999178	1					
ANR	1000032	Argument	elem		999178	0					
ANR	1000033	Identifier	elem		999178	0					
ANR	1000034	Identifier	IS_LONG		999178	1					
ANR	1000035	CompoundStatement		158:43:4637:4637	999178	1					
ANR	1000036	ExpressionStatement	tInt64 = ( int64_t ) Z_LVAL_P ( elem )	526:6:16152:16184	999178	0	True				
ANR	1000037	AssignmentExpression	tInt64 = ( int64_t ) Z_LVAL_P ( elem )		999178	0		=			
ANR	1000038	Identifier	tInt64		999178	0					
ANR	1000039	CastExpression	( int64_t ) Z_LVAL_P ( elem )		999178	1					
ANR	1000040	CastTarget	int64_t		999178	0					
ANR	1000041	CallExpression	Z_LVAL_P ( elem )		999178	1					
ANR	1000042	Callee	Z_LVAL_P		999178	0					
ANR	1000043	Identifier	Z_LVAL_P		999178	0					
ANR	1000044	ArgumentList	elem		999178	1					
ANR	1000045	Argument	elem		999178	0					
ANR	1000046	Identifier	elem		999178	0					
ANR	1000047	ElseStatement	else		999178	0					
ANR	1000048	CompoundStatement		161:12:4741:4741	999178	0					
ANR	1000049	ExpressionStatement	SEPARATE_ZVAL_IF_NOT_REF ( elem )	528:6:16206:16236	999178	0	True				
ANR	1000050	CallExpression	SEPARATE_ZVAL_IF_NOT_REF ( elem )		999178	0					
ANR	1000051	Callee	SEPARATE_ZVAL_IF_NOT_REF		999178	0					
ANR	1000052	Identifier	SEPARATE_ZVAL_IF_NOT_REF		999178	0					
ANR	1000053	ArgumentList	elem		999178	1					
ANR	1000054	Argument	elem		999178	0					
ANR	1000055	Identifier	elem		999178	0					
ANR	1000056	ExpressionStatement	convert_scalar_to_number ( elem )	529:6:16244:16274	999178	1	True				
ANR	1000057	CallExpression	convert_scalar_to_number ( elem )		999178	0					
ANR	1000058	Callee	convert_scalar_to_number		999178	0					
ANR	1000059	Identifier	convert_scalar_to_number		999178	0					
ANR	1000060	ArgumentList	elem		999178	1					
ANR	1000061	Argument	elem		999178	0					
ANR	1000062	Identifier	elem		999178	0					
ANR	1000063	GotoStatement	goto retry_kint64 ;	530:6:16282:16299	999178	2	True				
ANR	1000064	Identifier	retry_kint64		999178	0					
ANR	1000065	ExpressionStatement	formattable . setInt64 ( tInt64 )	532:5:16313:16341	999178	3	True				
ANR	1000066	CallExpression	formattable . setInt64 ( tInt64 )		999178	0					
ANR	1000067	Callee	formattable . setInt64		999178	0					
ANR	1000068	MemberAccess	formattable . setInt64		999178	0					
ANR	1000069	Identifier	formattable		999178	0					
ANR	1000070	Identifier	setInt64		999178	1					
ANR	1000071	ArgumentList	tInt64		999178	1					
ANR	1000072	Argument	tInt64		999178	0					
ANR	1000073	Identifier	tInt64		999178	0					
ANR	1000074	BreakStatement	break ;	533:5:16348:16353	999178	4	True				
ANR	1000075	Label	case Formattable :: kDate :	535:3:16364:16387	999178	8	True				
ANR	1000076	Identifier	Formattable :: kDate		999178	0					
ANR	1000077	CompoundStatement		171:5:4943:5003	999178	9					
ANR	1000078	IdentifierDeclStatement	"double dd = intl_zval_to_millis ( elem , & err , ""msgfmt_format"" ) ;"	537:5:16400:16460	999178	0	True				
ANR	1000079	IdentifierDecl	"dd = intl_zval_to_millis ( elem , & err , ""msgfmt_format"" )"		999178	0					
ANR	1000080	IdentifierDeclType	double		999178	0					
ANR	1000081	Identifier	dd		999178	1					
ANR	1000082	AssignmentExpression	"dd = intl_zval_to_millis ( elem , & err , ""msgfmt_format"" )"		999178	2		=			
ANR	1000083	Identifier	dd		999178	0					
ANR	1000084	CallExpression	"intl_zval_to_millis ( elem , & err , ""msgfmt_format"" )"		999178	1					
ANR	1000085	Callee	intl_zval_to_millis		999178	0					
ANR	1000086	Identifier	intl_zval_to_millis		999178	0					
ANR	1000087	ArgumentList	elem		999178	1					
ANR	1000088	Argument	elem		999178	0					
ANR	1000089	Identifier	elem		999178	0					
ANR	1000090	Argument	& err		999178	1					
ANR	1000091	UnaryOperationExpression	& err		999178	0					
ANR	1000092	UnaryOperator	&		999178	0					
ANR	1000093	Identifier	err		999178	1					
ANR	1000094	Argument	"""msgfmt_format"""		999178	2					
ANR	1000095	PrimaryExpression	"""msgfmt_format"""		999178	0					
ANR	1000096	IfStatement	if ( U_FAILURE ( err . code ) )		999178	1					
ANR	1000097	Condition	U_FAILURE ( err . code )	538:9:16471:16489	999178	0	True				
ANR	1000098	CallExpression	U_FAILURE ( err . code )		999178	0					
ANR	1000099	Callee	U_FAILURE		999178	0					
ANR	1000100	Identifier	U_FAILURE		999178	0					
ANR	1000101	ArgumentList	err . code		999178	1					
ANR	1000102	Argument	err . code		999178	0					
ANR	1000103	MemberAccess	err . code		999178	0					
ANR	1000104	Identifier	err		999178	0					
ANR	1000105	Identifier	code		999178	1					
ANR	1000106	CompoundStatement		175:6:5090:5122	999178	1					
ANR	1000107	IdentifierDeclStatement	char * message ;	539:6:16500:16513	999178	0	True				
ANR	1000108	IdentifierDecl	* message		999178	0					
ANR	1000109	IdentifierDeclType	char *		999178	0					
ANR	1000110	Identifier	message		999178	1					
ANR	1000111	IdentifierDeclStatement	zend_string * u8key ;	540:6:16521:16539	999178	1	True				
ANR	1000112	IdentifierDecl	* u8key		999178	0					
ANR	1000113	IdentifierDeclType	zend_string *		999178	0					
ANR	1000114	Identifier	u8key		999178	1					
ANR	1000115	IdentifierDeclStatement	UErrorCode status = UErrorCode ( ) ;	541:6:16547:16579	999178	2	True				
ANR	1000116	IdentifierDecl	status = UErrorCode ( )		999178	0					
ANR	1000117	IdentifierDeclType	UErrorCode		999178	0					
ANR	1000118	Identifier	status		999178	1					
ANR	1000119	AssignmentExpression	status = UErrorCode ( )		999178	2		=			
ANR	1000120	Identifier	status		999178	0					
ANR	1000121	CallExpression	UErrorCode ( )		999178	1					
ANR	1000122	Callee	UErrorCode		999178	0					
ANR	1000123	Identifier	UErrorCode		999178	0					
ANR	1000124	ArgumentList			999178	1					
ANR	1000125	ExpressionStatement	"u8key = intl_charFromString ( key , & status )"	542:6:16587:16628	999178	3	True				
ANR	1000126	AssignmentExpression	"u8key = intl_charFromString ( key , & status )"		999178	0		=			
ANR	1000127	Identifier	u8key		999178	0					
ANR	1000128	CallExpression	"intl_charFromString ( key , & status )"		999178	1					
ANR	1000129	Callee	intl_charFromString		999178	0					
ANR	1000130	Identifier	intl_charFromString		999178	0					
ANR	1000131	ArgumentList	key		999178	1					
ANR	1000132	Argument	key		999178	0					
ANR	1000133	Identifier	key		999178	0					
ANR	1000134	Argument	& status		999178	1					
ANR	1000135	UnaryOperationExpression	& status		999178	0					
ANR	1000136	UnaryOperator	&		999178	0					
ANR	1000137	Identifier	status		999178	1					
ANR	1000138	IfStatement	if ( u8key )		999178	4					
ANR	1000139	Condition	u8key	543:10:16640:16644	999178	0	True				
ANR	1000140	Identifier	u8key		999178	0					
ANR	1000141	CompoundStatement		177:17:5190:5190	999178	1					
ANR	1000142	Statement	spprintf	544:7:16656:16663	999178	0	True				
ANR	1000143	Statement	(	544:15:16664:16664	999178	1	True				
ANR	1000144	Statement	&	544:16:16665:16665	999178	2	True				
ANR	1000145	Statement	message	544:17:16666:16672	999178	3	True				
ANR	1000146	Statement	","	544:24:16673:16673	999178	4	True				
ANR	1000147	Statement	0	544:26:16675:16675	999178	5	True				
ANR	1000148	Statement	","	544:27:16676:16676	999178	6	True				
ANR	1000149	Statement	"""The argument for key '%s' """	544:29:16678:16705	999178	7	True				
ANR	1000150	Statement	"""cannot be used as a date or time"""	545:8:16715:16748	999178	8	True				
ANR	1000151	Statement	","	545:42:16749:16749	999178	9	True				
ANR	1000152	Statement	ZSTR_VAL	545:44:16751:16758	999178	10	True				
ANR	1000153	Statement	(	545:52:16759:16759	999178	11	True				
ANR	1000154	Statement	u8key	545:53:16760:16764	999178	12	True				
ANR	1000155	Statement	)	545:58:16765:16765	999178	13	True				
ANR	1000156	Statement	)	545:59:16766:16766	999178	14	True				
ANR	1000157	ExpressionStatement		545:60:16767:16767	999178	15	True				
ANR	1000158	ExpressionStatement	"intl_errors_set ( & err , err . code , message , 1 )"	546:7:16776:16819	999178	16	True				
ANR	1000159	CallExpression	"intl_errors_set ( & err , err . code , message , 1 )"		999178	0					
ANR	1000160	Callee	intl_errors_set		999178	0					
ANR	1000161	Identifier	intl_errors_set		999178	0					
ANR	1000162	ArgumentList	& err		999178	1					
ANR	1000163	Argument	& err		999178	0					
ANR	1000164	UnaryOperationExpression	& err		999178	0					
ANR	1000165	UnaryOperator	&		999178	0					
ANR	1000166	Identifier	err		999178	1					
ANR	1000167	Argument	err . code		999178	1					
ANR	1000168	MemberAccess	err . code		999178	0					
ANR	1000169	Identifier	err		999178	0					
ANR	1000170	Identifier	code		999178	1					
ANR	1000171	Argument	message		999178	2					
ANR	1000172	Identifier	message		999178	0					
ANR	1000173	Argument	1		999178	3					
ANR	1000174	PrimaryExpression	1		999178	0					
ANR	1000175	ExpressionStatement	zend_string_release ( u8key )	547:7:16828:16854	999178	17	True				
ANR	1000176	CallExpression	zend_string_release ( u8key )		999178	0					
ANR	1000177	Callee	zend_string_release		999178	0					
ANR	1000178	Identifier	zend_string_release		999178	0					
ANR	1000179	ArgumentList	u8key		999178	1					
ANR	1000180	Argument	u8key		999178	0					
ANR	1000181	Identifier	u8key		999178	0					
ANR	1000182	ExpressionStatement	efree ( message )	548:7:16863:16877	999178	18	True				
ANR	1000183	CallExpression	efree ( message )		999178	0					
ANR	1000184	Callee	efree		999178	0					
ANR	1000185	Identifier	efree		999178	0					
ANR	1000186	ArgumentList	message		999178	1					
ANR	1000187	Argument	message		999178	0					
ANR	1000188	Identifier	message		999178	0					
ANR	1000189	ContinueStatement	continue ;	550:6:16893:16901	999178	5	True				
ANR	1000190	ExpressionStatement	formattable . setDate ( dd )	552:5:16915:16938	999178	2	True				
ANR	1000191	CallExpression	formattable . setDate ( dd )		999178	0					
ANR	1000192	Callee	formattable . setDate		999178	0					
ANR	1000193	MemberAccess	formattable . setDate		999178	0					
ANR	1000194	Identifier	formattable		999178	0					
ANR	1000195	Identifier	setDate		999178	1					
ANR	1000196	ArgumentList	dd		999178	1					
ANR	1000197	Argument	dd		999178	0					
ANR	1000198	Identifier	dd		999178	0					
ANR	1000199	BreakStatement	break ;	553:5:16945:16950	999178	3	True				
ANR	1000200	Label	default :	555:3:16961:16968	999178	10	True				
ANR	1000201	Identifier	default		999178	0					
ANR	1000202	ExpressionStatement	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , ""Found unsupported argument type"" , 0 )"	556:4:16974:17064	999178	11	True				
ANR	1000203	CallExpression	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , ""Found unsupported argument type"" , 0 )"		999178	0					
ANR	1000204	Callee	intl_errors_set		999178	0					
ANR	1000205	Identifier	intl_errors_set		999178	0					
ANR	1000206	ArgumentList	& err		999178	1					
ANR	1000207	Argument	& err		999178	0					
ANR	1000208	UnaryOperationExpression	& err		999178	0					
ANR	1000209	UnaryOperator	&		999178	0					
ANR	1000210	Identifier	err		999178	1					
ANR	1000211	Argument	U_ILLEGAL_ARGUMENT_ERROR		999178	1					
ANR	1000212	Identifier	U_ILLEGAL_ARGUMENT_ERROR		999178	0					
ANR	1000213	Argument	"""Found unsupported argument type"""		999178	2					
ANR	1000214	PrimaryExpression	"""Found unsupported argument type"""		999178	0					
ANR	1000215	Argument	0		999178	3					
ANR	1000216	PrimaryExpression	0		999178	0					
ANR	1000217	BreakStatement	break ;	558:4:17070:17075	999178	12	True				
ANR	1000218	ElseStatement	else		999178	0					
ANR	1000219	CompoundStatement		194:9:5634:5634	999178	0					
ANR	1000220	SwitchStatement	switch ( Z_TYPE_P ( elem ) )		999178	0					
ANR	1000221	Condition	Z_TYPE_P ( elem )	564:11:17341:17354	999178	0	True				
ANR	1000222	CallExpression	Z_TYPE_P ( elem )		999178	0					
ANR	1000223	Callee	Z_TYPE_P		999178	0					
ANR	1000224	Identifier	Z_TYPE_P		999178	0					
ANR	1000225	ArgumentList	elem		999178	1					
ANR	1000226	Argument	elem		999178	0					
ANR	1000227	Identifier	elem		999178	0					
ANR	1000228	CompoundStatement		198:27:5900:5900	999178	1					
ANR	1000229	Label	case IS_DOUBLE :	565:3:17362:17376	999178	0	True				
ANR	1000230	Identifier	IS_DOUBLE		999178	0					
ANR	1000231	ExpressionStatement	formattable . setDouble ( Z_DVAL_P ( elem ) )	566:4:17382:17419	999178	1	True				
ANR	1000232	CallExpression	formattable . setDouble ( Z_DVAL_P ( elem ) )		999178	0					
ANR	1000233	Callee	formattable . setDouble		999178	0					
ANR	1000234	MemberAccess	formattable . setDouble		999178	0					
ANR	1000235	Identifier	formattable		999178	0					
ANR	1000236	Identifier	setDouble		999178	1					
ANR	1000237	ArgumentList	Z_DVAL_P ( elem )		999178	1					
ANR	1000238	Argument	Z_DVAL_P ( elem )		999178	0					
ANR	1000239	CallExpression	Z_DVAL_P ( elem )		999178	0					
ANR	1000240	Callee	Z_DVAL_P		999178	0					
ANR	1000241	Identifier	Z_DVAL_P		999178	0					
ANR	1000242	ArgumentList	elem		999178	1					
ANR	1000243	Argument	elem		999178	0					
ANR	1000244	Identifier	elem		999178	0					
ANR	1000245	BreakStatement	break ;	567:4:17425:17430	999178	2	True				
ANR	1000246	Label	case IS_TRUE :	568:3:17435:17447	999178	3	True				
ANR	1000247	Identifier	IS_TRUE		999178	0					
ANR	1000248	Label	case IS_FALSE :	569:3:17452:17465	999178	4	True				
ANR	1000249	Identifier	IS_FALSE		999178	0					
ANR	1000250	ExpressionStatement	convert_to_long_ex ( elem )	570:4:17471:17495	999178	5	True				
ANR	1000251	CallExpression	convert_to_long_ex ( elem )		999178	0					
ANR	1000252	Callee	convert_to_long_ex		999178	0					
ANR	1000253	Identifier	convert_to_long_ex		999178	0					
ANR	1000254	ArgumentList	elem		999178	1					
ANR	1000255	Argument	elem		999178	0					
ANR	1000256	Identifier	elem		999178	0					
ANR	1000257	Label	case IS_LONG :	572:3:17534:17546	999178	6	True				
ANR	1000258	Identifier	IS_LONG		999178	0					
ANR	1000259	ExpressionStatement	formattable . setInt64 ( ( int64_t ) Z_LVAL_P ( elem ) )	573:4:17552:17597	999178	7	True				
ANR	1000260	CallExpression	formattable . setInt64 ( ( int64_t ) Z_LVAL_P ( elem ) )		999178	0					
ANR	1000261	Callee	formattable . setInt64		999178	0					
ANR	1000262	MemberAccess	formattable . setInt64		999178	0					
ANR	1000263	Identifier	formattable		999178	0					
ANR	1000264	Identifier	setInt64		999178	1					
ANR	1000265	ArgumentList	( int64_t ) Z_LVAL_P ( elem )		999178	1					
ANR	1000266	Argument	( int64_t ) Z_LVAL_P ( elem )		999178	0					
ANR	1000267	CastExpression	( int64_t ) Z_LVAL_P ( elem )		999178	0					
ANR	1000268	CastTarget	int64_t		999178	0					
ANR	1000269	CallExpression	Z_LVAL_P ( elem )		999178	1					
ANR	1000270	Callee	Z_LVAL_P		999178	0					
ANR	1000271	Identifier	Z_LVAL_P		999178	0					
ANR	1000272	ArgumentList	elem		999178	1					
ANR	1000273	Argument	elem		999178	0					
ANR	1000274	Identifier	elem		999178	0					
ANR	1000275	BreakStatement	break ;	574:4:17603:17608	999178	8	True				
ANR	1000276	Label	case IS_NULL :	575:3:17613:17625	999178	9	True				
ANR	1000277	Identifier	IS_NULL		999178	0					
ANR	1000278	ExpressionStatement	formattable . setInt64 ( ( int64_t ) 0 )	576:4:17631:17663	999178	10	True				
ANR	1000279	CallExpression	formattable . setInt64 ( ( int64_t ) 0 )		999178	0					
ANR	1000280	Callee	formattable . setInt64		999178	0					
ANR	1000281	MemberAccess	formattable . setInt64		999178	0					
ANR	1000282	Identifier	formattable		999178	0					
ANR	1000283	Identifier	setInt64		999178	1					
ANR	1000284	ArgumentList	( int64_t ) 0		999178	1					
ANR	1000285	Argument	( int64_t ) 0		999178	0					
ANR	1000286	CastExpression	( int64_t ) 0		999178	0					
ANR	1000287	CastTarget	int64_t		999178	0					
ANR	1000288	PrimaryExpression	0		999178	1					
ANR	1000289	BreakStatement	break ;	577:4:17669:17674	999178	11	True				
ANR	1000290	Label	case IS_STRING :	578:3:17679:17693	999178	12	True				
ANR	1000291	Identifier	IS_STRING		999178	0					
ANR	1000292	Label	case IS_OBJECT :	579:3:17698:17712	999178	13	True				
ANR	1000293	Identifier	IS_OBJECT		999178	0					
ANR	1000294	GotoStatement	goto string_arg ;	580:4:17718:17733	999178	14	True				
ANR	1000295	Identifier	string_arg		999178	0					
ANR	1000296	Label	default :	581:3:17738:17745	999178	15	True				
ANR	1000297	Identifier	default		999178	0					
ANR	1000298	CompoundStatement		219:5:6346:6378	999178	16					
ANR	1000299	IdentifierDeclStatement	char * message ;	583:5:17758:17771	999178	0	True				
ANR	1000300	IdentifierDecl	* message		999178	0					
ANR	1000301	IdentifierDeclType	char *		999178	0					
ANR	1000302	Identifier	message		999178	1					
ANR	1000303	IdentifierDeclStatement	zend_string * u8key ;	584:5:17778:17796	999178	1	True				
ANR	1000304	IdentifierDecl	* u8key		999178	0					
ANR	1000305	IdentifierDeclType	zend_string *		999178	0					
ANR	1000306	Identifier	u8key		999178	1					
ANR	1000307	IdentifierDeclStatement	UErrorCode status = UErrorCode ( ) ;	585:5:17803:17835	999178	2	True				
ANR	1000308	IdentifierDecl	status = UErrorCode ( )		999178	0					
ANR	1000309	IdentifierDeclType	UErrorCode		999178	0					
ANR	1000310	Identifier	status		999178	1					
ANR	1000311	AssignmentExpression	status = UErrorCode ( )		999178	2		=			
ANR	1000312	Identifier	status		999178	0					
ANR	1000313	CallExpression	UErrorCode ( )		999178	1					
ANR	1000314	Callee	UErrorCode		999178	0					
ANR	1000315	Identifier	UErrorCode		999178	0					
ANR	1000316	ArgumentList			999178	1					
ANR	1000317	ExpressionStatement	"u8key = intl_charFromString ( key , & status )"	586:5:17842:17883	999178	3	True				
ANR	1000318	AssignmentExpression	"u8key = intl_charFromString ( key , & status )"		999178	0		=			
ANR	1000319	Identifier	u8key		999178	0					
ANR	1000320	CallExpression	"intl_charFromString ( key , & status )"		999178	1					
ANR	1000321	Callee	intl_charFromString		999178	0					
ANR	1000322	Identifier	intl_charFromString		999178	0					
ANR	1000323	ArgumentList	key		999178	1					
ANR	1000324	Argument	key		999178	0					
ANR	1000325	Identifier	key		999178	0					
ANR	1000326	Argument	& status		999178	1					
ANR	1000327	UnaryOperationExpression	& status		999178	0					
ANR	1000328	UnaryOperator	&		999178	0					
ANR	1000329	Identifier	status		999178	1					
ANR	1000330	IfStatement	if ( u8key )		999178	4					
ANR	1000331	Condition	u8key	587:9:17894:17898	999178	0	True				
ANR	1000332	Identifier	u8key		999178	0					
ANR	1000333	CompoundStatement		221:16:6444:6444	999178	1					
ANR	1000334	Statement	spprintf	588:6:17909:17916	999178	0	True				
ANR	1000335	Statement	(	588:14:17917:17917	999178	1	True				
ANR	1000336	Statement	&	588:15:17918:17918	999178	2	True				
ANR	1000337	Statement	message	588:16:17919:17925	999178	3	True				
ANR	1000338	Statement	","	588:23:17926:17926	999178	4	True				
ANR	1000339	Statement	0	588:25:17928:17928	999178	5	True				
ANR	1000340	Statement	","	588:26:17929:17929	999178	6	True				
ANR	1000341	Statement	"""No strategy to convert the """	588:28:17931:17959	999178	7	True				
ANR	1000342	Statement	"""value given for the argument with key '%s' """	589:7:17968:18012	999178	8	True				
ANR	1000343	Statement	"""is available"""	590:7:18021:18034	999178	9	True				
ANR	1000344	Statement	","	590:21:18035:18035	999178	10	True				
ANR	1000345	Statement	ZSTR_VAL	590:23:18037:18044	999178	11	True				
ANR	1000346	Statement	(	590:31:18045:18045	999178	12	True				
ANR	1000347	Statement	u8key	590:32:18046:18050	999178	13	True				
ANR	1000348	Statement	)	590:37:18051:18051	999178	14	True				
ANR	1000349	Statement	)	590:38:18052:18052	999178	15	True				
ANR	1000350	ExpressionStatement		590:39:18053:18053	999178	16	True				
ANR	1000351	ExpressionStatement	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , message , 1 )"	591:6:18061:18127	999178	17	True				
ANR	1000352	CallExpression	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , message , 1 )"		999178	0					
ANR	1000353	Callee	intl_errors_set		999178	0					
ANR	1000354	Identifier	intl_errors_set		999178	0					
ANR	1000355	ArgumentList	& err		999178	1					
ANR	1000356	Argument	& err		999178	0					
ANR	1000357	UnaryOperationExpression	& err		999178	0					
ANR	1000358	UnaryOperator	&		999178	0					
ANR	1000359	Identifier	err		999178	1					
ANR	1000360	Argument	U_ILLEGAL_ARGUMENT_ERROR		999178	1					
ANR	1000361	Identifier	U_ILLEGAL_ARGUMENT_ERROR		999178	0					
ANR	1000362	Argument	message		999178	2					
ANR	1000363	Identifier	message		999178	0					
ANR	1000364	Argument	1		999178	3					
ANR	1000365	PrimaryExpression	1		999178	0					
ANR	1000366	ExpressionStatement	zend_string_release ( u8key )	593:6:18135:18161	999178	18	True				
ANR	1000367	CallExpression	zend_string_release ( u8key )		999178	0					
ANR	1000368	Callee	zend_string_release		999178	0					
ANR	1000369	Identifier	zend_string_release		999178	0					
ANR	1000370	ArgumentList	u8key		999178	1					
ANR	1000371	Argument	u8key		999178	0					
ANR	1000372	Identifier	u8key		999178	0					
ANR	1000373	ExpressionStatement	efree ( message )	594:6:18169:18183	999178	19	True				
ANR	1000374	CallExpression	efree ( message )		999178	0					
ANR	1000375	Callee	efree		999178	0					
ANR	1000376	Identifier	efree		999178	0					
ANR	1000377	ArgumentList	message		999178	1					
ANR	1000378	Argument	message		999178	0					
ANR	1000379	Identifier	message		999178	0					
ANR	1000380	ExpressionStatement	argNum ++	599:2:18209:18217	999178	7	True				
ANR	1000381	PostIncDecOperationExpression	argNum ++		999178	0					
ANR	1000382	Identifier	argNum		999178	0					
ANR	1000383	IncDec	++		999178	1					
ANR	1000384	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	600:3:18222:18245	999178	26	True				
ANR	1000385	CallExpression	ZEND_HASH_FOREACH_END ( )		999178	0					
ANR	1000386	Callee	ZEND_HASH_FOREACH_END		999178	0					
ANR	1000387	Identifier	ZEND_HASH_FOREACH_END		999178	0					
ANR	1000388	ArgumentList			999178	1					
ANR	1000389	IfStatement	if ( U_FAILURE ( err . code ) )		999178	27					
ANR	1000390	Condition	U_FAILURE ( err . code )	602:5:18279:18297	999178	0	True				
ANR	1000391	CallExpression	U_FAILURE ( err . code )		999178	0					
ANR	1000392	Callee	U_FAILURE		999178	0					
ANR	1000393	Identifier	U_FAILURE		999178	0					
ANR	1000394	ArgumentList	err . code		999178	1					
ANR	1000395	Argument	err . code		999178	0					
ANR	1000396	MemberAccess	err . code		999178	0					
ANR	1000397	Identifier	err		999178	0					
ANR	1000398	Identifier	code		999178	1					
ANR	1000399	CompoundStatement		236:26:6843:6843	999178	1					
ANR	1000400	ReturnStatement	return ;	603:2:18304:18310	999178	0	True				
ANR	1000401	IdentifierDeclStatement	UnicodeString resultStr ;	606:1:18317:18340	999178	28	True				
ANR	1000402	IdentifierDecl	resultStr		999178	0					
ANR	1000403	IdentifierDeclType	UnicodeString		999178	0					
ANR	1000404	Identifier	resultStr		999178	1					
ANR	1000405	IdentifierDeclStatement	FieldPosition fieldPosition ( 0 ) ;	607:1:18343:18373	999178	29	True				
ANR	1000406	IdentifierDecl	fieldPosition ( 0 )		999178	0					
ANR	1000407	IdentifierDeclType	FieldPosition		999178	0					
ANR	1000408	Identifier	fieldPosition		999178	1					
ANR	1000409	PrimaryExpression	0		999178	2					
ANR	1000410	ExpressionStatement	"mf -> format ( farg_names . empty ( ) ? NULL : & farg_names [ 0 ] , fargs . empty ( ) ? NULL : & fargs [ 0 ] , arg_count , resultStr , err . code )"	610:1:18403:18525	999178	30	True				
ANR	1000411	CallExpression	"mf -> format ( farg_names . empty ( ) ? NULL : & farg_names [ 0 ] , fargs . empty ( ) ? NULL : & fargs [ 0 ] , arg_count , resultStr , err . code )"		999178	0					
ANR	1000412	Callee	mf -> format		999178	0					
ANR	1000413	PtrMemberAccess	mf -> format		999178	0					
ANR	1000414	Identifier	mf		999178	0					
ANR	1000415	Identifier	format		999178	1					
ANR	1000416	ArgumentList	farg_names . empty ( ) ? NULL : & farg_names [ 0 ]		999178	1					
ANR	1000417	Argument	farg_names . empty ( ) ? NULL : & farg_names [ 0 ]		999178	0					
ANR	1000418	ConditionalExpression	farg_names . empty ( ) ? NULL : & farg_names [ 0 ]		999178	0					
ANR	1000419	Condition	farg_names . empty ( )		999178	0					
ANR	1000420	CallExpression	farg_names . empty ( )		999178	0					
ANR	1000421	Callee	farg_names . empty		999178	0					
ANR	1000422	MemberAccess	farg_names . empty		999178	0					
ANR	1000423	Identifier	farg_names		999178	0					
ANR	1000424	Identifier	empty		999178	1					
ANR	1000425	ArgumentList			999178	1					
ANR	1000426	Identifier	NULL		999178	1					
ANR	1000427	UnaryOperationExpression	& farg_names [ 0 ]		999178	2					
ANR	1000428	UnaryOperator	&		999178	0					
ANR	1000429	ArrayIndexing	farg_names [ 0 ]		999178	1					
ANR	1000430	Identifier	farg_names		999178	0					
ANR	1000431	PrimaryExpression	0		999178	1					
ANR	1000432	Argument	fargs . empty ( ) ? NULL : & fargs [ 0 ]		999178	1					
ANR	1000433	ConditionalExpression	fargs . empty ( ) ? NULL : & fargs [ 0 ]		999178	0					
ANR	1000434	Condition	fargs . empty ( )		999178	0					
ANR	1000435	CallExpression	fargs . empty ( )		999178	0					
ANR	1000436	Callee	fargs . empty		999178	0					
ANR	1000437	MemberAccess	fargs . empty		999178	0					
ANR	1000438	Identifier	fargs		999178	0					
ANR	1000439	Identifier	empty		999178	1					
ANR	1000440	ArgumentList			999178	1					
ANR	1000441	Identifier	NULL		999178	1					
ANR	1000442	UnaryOperationExpression	& fargs [ 0 ]		999178	2					
ANR	1000443	UnaryOperator	&		999178	0					
ANR	1000444	ArrayIndexing	fargs [ 0 ]		999178	1					
ANR	1000445	Identifier	fargs		999178	0					
ANR	1000446	PrimaryExpression	0		999178	1					
ANR	1000447	Argument	arg_count		999178	2					
ANR	1000448	Identifier	arg_count		999178	0					
ANR	1000449	Argument	resultStr		999178	3					
ANR	1000450	Identifier	resultStr		999178	0					
ANR	1000451	Argument	err . code		999178	4					
ANR	1000452	MemberAccess	err . code		999178	0					
ANR	1000453	Identifier	err		999178	0					
ANR	1000454	Identifier	code		999178	1					
ANR	1000455	IfStatement	if ( U_FAILURE ( err . code ) )		999178	31					
ANR	1000456	Condition	U_FAILURE ( err . code )	613:5:18533:18551	999178	0	True				
ANR	1000457	CallExpression	U_FAILURE ( err . code )		999178	0					
ANR	1000458	Callee	U_FAILURE		999178	0					
ANR	1000459	Identifier	U_FAILURE		999178	0					
ANR	1000460	ArgumentList	err . code		999178	1					
ANR	1000461	Argument	err . code		999178	0					
ANR	1000462	MemberAccess	err . code		999178	0					
ANR	1000463	Identifier	err		999178	0					
ANR	1000464	Identifier	code		999178	1					
ANR	1000465	CompoundStatement		247:26:7097:7097	999178	1					
ANR	1000466	ExpressionStatement	"intl_errors_set ( & err , err . code , ""Call to ICU MessageFormat::format() has failed"" , 0 )"	614:2:18558:18645	999178	0	True				
ANR	1000467	CallExpression	"intl_errors_set ( & err , err . code , ""Call to ICU MessageFormat::format() has failed"" , 0 )"		999178	0					
ANR	1000468	Callee	intl_errors_set		999178	0					
ANR	1000469	Identifier	intl_errors_set		999178	0					
ANR	1000470	ArgumentList	& err		999178	1					
ANR	1000471	Argument	& err		999178	0					
ANR	1000472	UnaryOperationExpression	& err		999178	0					
ANR	1000473	UnaryOperator	&		999178	0					
ANR	1000474	Identifier	err		999178	1					
ANR	1000475	Argument	err . code		999178	1					
ANR	1000476	MemberAccess	err . code		999178	0					
ANR	1000477	Identifier	err		999178	0					
ANR	1000478	Identifier	code		999178	1					
ANR	1000479	Argument	"""Call to ICU MessageFormat::format() has failed"""		999178	2					
ANR	1000480	PrimaryExpression	"""Call to ICU MessageFormat::format() has failed"""		999178	0					
ANR	1000481	Argument	0		999178	3					
ANR	1000482	PrimaryExpression	0		999178	0					
ANR	1000483	ReturnStatement	return ;	616:2:18649:18655	999178	1	True				
ANR	1000484	ExpressionStatement	* formatted_len = resultStr . length ( )	619:1:18662:18697	999178	32	True				
ANR	1000485	AssignmentExpression	* formatted_len = resultStr . length ( )		999178	0		=			
ANR	1000486	UnaryOperationExpression	* formatted_len		999178	0					
ANR	1000487	UnaryOperator	*		999178	0					
ANR	1000488	Identifier	formatted_len		999178	1					
ANR	1000489	CallExpression	resultStr . length ( )		999178	1					
ANR	1000490	Callee	resultStr . length		999178	0					
ANR	1000491	MemberAccess	resultStr . length		999178	0					
ANR	1000492	Identifier	resultStr		999178	0					
ANR	1000493	Identifier	length		999178	1					
ANR	1000494	ArgumentList			999178	1					
ANR	1000495	ExpressionStatement	* formatted = eumalloc ( * formatted_len + 1 )	620:1:18700:18739	999178	33	True				
ANR	1000496	AssignmentExpression	* formatted = eumalloc ( * formatted_len + 1 )		999178	0		=			
ANR	1000497	UnaryOperationExpression	* formatted		999178	0					
ANR	1000498	UnaryOperator	*		999178	0					
ANR	1000499	Identifier	formatted		999178	1					
ANR	1000500	CallExpression	eumalloc ( * formatted_len + 1 )		999178	1					
ANR	1000501	Callee	eumalloc		999178	0					
ANR	1000502	Identifier	eumalloc		999178	0					
ANR	1000503	ArgumentList	* formatted_len + 1		999178	1					
ANR	1000504	Argument	* formatted_len + 1		999178	0					
ANR	1000505	AdditiveExpression	* formatted_len + 1		999178	0		+			
ANR	1000506	UnaryOperationExpression	* formatted_len		999178	0					
ANR	1000507	UnaryOperator	*		999178	0					
ANR	1000508	Identifier	formatted_len		999178	1					
ANR	1000509	PrimaryExpression	1		999178	1					
ANR	1000510	ExpressionStatement	"resultStr . extract ( * formatted , * formatted_len + 1 , err . code )"	621:1:18742:18799	999178	34	True				
ANR	1000511	CallExpression	"resultStr . extract ( * formatted , * formatted_len + 1 , err . code )"		999178	0					
ANR	1000512	Callee	resultStr . extract		999178	0					
ANR	1000513	MemberAccess	resultStr . extract		999178	0					
ANR	1000514	Identifier	resultStr		999178	0					
ANR	1000515	Identifier	extract		999178	1					
ANR	1000516	ArgumentList	* formatted		999178	1					
ANR	1000517	Argument	* formatted		999178	0					
ANR	1000518	UnaryOperationExpression	* formatted		999178	0					
ANR	1000519	UnaryOperator	*		999178	0					
ANR	1000520	Identifier	formatted		999178	1					
ANR	1000521	Argument	* formatted_len + 1		999178	1					
ANR	1000522	AdditiveExpression	* formatted_len + 1		999178	0		+			
ANR	1000523	UnaryOperationExpression	* formatted_len		999178	0					
ANR	1000524	UnaryOperator	*		999178	0					
ANR	1000525	Identifier	formatted_len		999178	1					
ANR	1000526	PrimaryExpression	1		999178	1					
ANR	1000527	Argument	err . code		999178	2					
ANR	1000528	MemberAccess	err . code		999178	0					
ANR	1000529	Identifier	err		999178	0					
ANR	1000530	Identifier	code		999178	1					
ANR	1000531	IfStatement	if ( U_FAILURE ( err . code ) )		999178	35					
ANR	1000532	Condition	U_FAILURE ( err . code )	622:5:18806:18824	999178	0	True				
ANR	1000533	CallExpression	U_FAILURE ( err . code )		999178	0					
ANR	1000534	Callee	U_FAILURE		999178	0					
ANR	1000535	Identifier	U_FAILURE		999178	0					
ANR	1000536	ArgumentList	err . code		999178	1					
ANR	1000537	Argument	err . code		999178	0					
ANR	1000538	MemberAccess	err . code		999178	0					
ANR	1000539	Identifier	err		999178	0					
ANR	1000540	Identifier	code		999178	1					
ANR	1000541	CompoundStatement		256:26:7370:7370	999178	1					
ANR	1000542	ExpressionStatement	"intl_errors_set ( & err , err . code , ""Error copying format() result"" , 0 )"	623:2:18831:18901	999178	0	True				
ANR	1000543	CallExpression	"intl_errors_set ( & err , err . code , ""Error copying format() result"" , 0 )"		999178	0					
ANR	1000544	Callee	intl_errors_set		999178	0					
ANR	1000545	Identifier	intl_errors_set		999178	0					
ANR	1000546	ArgumentList	& err		999178	1					
ANR	1000547	Argument	& err		999178	0					
ANR	1000548	UnaryOperationExpression	& err		999178	0					
ANR	1000549	UnaryOperator	&		999178	0					
ANR	1000550	Identifier	err		999178	1					
ANR	1000551	Argument	err . code		999178	1					
ANR	1000552	MemberAccess	err . code		999178	0					
ANR	1000553	Identifier	err		999178	0					
ANR	1000554	Identifier	code		999178	1					
ANR	1000555	Argument	"""Error copying format() result"""		999178	2					
ANR	1000556	PrimaryExpression	"""Error copying format() result"""		999178	0					
ANR	1000557	Argument	0		999178	3					
ANR	1000558	PrimaryExpression	0		999178	0					
ANR	1000559	ReturnStatement	return ;	625:2:18905:18911	999178	1	True				
ANR	1000560	ReturnType	U_CFUNC void		999178	1					
ANR	1000561	Identifier	umsg_format_helper		999178	2					
ANR	1000562	ParameterList	"MessageFormatter_object * mfo , HashTable * args , UChar * * formatted , int32_t * formatted_len"		999178	3					
ANR	1000563	Parameter	MessageFormatter_object * mfo	363:32:11342:11369	999178	0	True				
ANR	1000564	ParameterType	MessageFormatter_object *		999178	0					
ANR	1000565	Identifier	mfo		999178	1					
ANR	1000566	Parameter	HashTable * args	364:8:11380:11394	999178	1	True				
ANR	1000567	ParameterType	HashTable *		999178	0					
ANR	1000568	Identifier	args		999178	1					
ANR	1000569	Parameter	UChar * * formatted	365:8:11405:11421	999178	2	True				
ANR	1000570	ParameterType	UChar * *		999178	0					
ANR	1000571	Identifier	formatted		999178	1					
ANR	1000572	Parameter	int32_t * formatted_len	366:8:11432:11453	999178	3	True				
ANR	1000573	ParameterType	int32_t *		999178	0					
ANR	1000574	Identifier	formatted_len		999178	1					
ANR	1000575	CFGEntryNode	ENTRY		999178		True				
ANR	1000576	CFGExitNode	EXIT		999178		True				
ANR	1000577	CFGErrorNode	ERROR		999178		True				
ANR	1000578	Symbol	dd		999178						
ANR	1000579	Symbol	eumalloc		999178						
ANR	1000580	Symbol	* farg_names		999178						
ANR	1000581	Symbol	fargs		999178						
ANR	1000582	Symbol	farg_names		999178						
ANR	1000583	Symbol	& err . code		999178						
ANR	1000584	Symbol	key . getBuffer		999178						
ANR	1000585	Symbol	Formattable :: kObject		999178						
ANR	1000586	Symbol	len		999178						
ANR	1000587	Symbol	u8key		999178						
ANR	1000588	Symbol	mf		999178						
ANR	1000589	Symbol	u_sprintf		999178						
ANR	1000590	Symbol	text		999178						
ANR	1000591	Symbol	umsg_get_types		999178						
ANR	1000592	Symbol	elem		999178						
ANR	1000593	Symbol	str_index		999178						
ANR	1000594	Symbol	* storedArgType		999178						
ANR	1000595	Symbol	NULL		999178						
ANR	1000596	Symbol	zend_hash_index_find_ptr		999178						
ANR	1000597	Symbol	argType		999178						
ANR	1000598	Symbol	farg_names . empty		999178						
ANR	1000599	Symbol	argNum		999178						
ANR	1000600	Symbol	& status		999178						
ANR	1000601	Symbol	Z_DVAL_P		999178						
ANR	1000602	Symbol	U_SUCCESS		999178						
ANR	1000603	Symbol	UErrorCode		999178						
ANR	1000604	Symbol	INTL_DATA_ERROR		999178						
ANR	1000605	Symbol	* argNum		999178						
ANR	1000606	Symbol	key . length		999178						
ANR	1000607	Symbol	fieldPosition		999178						
ANR	1000608	Symbol	& message		999178						
ANR	1000609	Symbol	num_index		999178						
ANR	1000610	Symbol	formattable		999178						
ANR	1000611	Symbol	formatted_len		999178						
ANR	1000612	Symbol	mfo -> mf_data . umsgf		999178						
ANR	1000613	Symbol	status		999178						
ANR	1000614	Symbol	formatted		999178						
ANR	1000615	Symbol	* text		999178						
ANR	1000616	Symbol	err . code		999178						
ANR	1000617	Symbol	& err		999178						
ANR	1000618	Symbol	U_FAILURE		999178						
ANR	1000619	Symbol	tInt32		999178						
ANR	1000620	Symbol	IS_LONG		999178						
ANR	1000621	Symbol	zend_hash_str_find_ptr		999178						
ANR	1000622	Symbol	Z_STRLEN_P		999178						
ANR	1000623	Symbol	key		999178						
ANR	1000624	Symbol	U_INT64_MIN		999178						
ANR	1000625	Symbol	resultStr		999178						
ANR	1000626	Symbol	* mfo		999178						
ANR	1000627	Symbol	U_INT64_MAX		999178						
ANR	1000628	Symbol	types		999178						
ANR	1000629	Symbol	temp		999178						
ANR	1000630	Symbol	err		999178						
ANR	1000631	Symbol	d		999178						
ANR	1000632	Symbol	zend_hash_num_elements		999178						
ANR	1000633	Symbol	U_ILLEGAL_ARGUMENT_ERROR		999178						
ANR	1000634	Symbol	resultStr . length		999178						
ANR	1000635	Symbol	* fargs		999178						
ANR	1000636	Symbol	intl_zval_to_millis		999178						
ANR	1000637	Symbol	* formatted		999178						
ANR	1000638	Symbol	mfo -> mf_data		999178						
ANR	1000639	Symbol	intl_charFromString		999178						
ANR	1000640	Symbol	message		999178						
ANR	1000641	Symbol	Z_TYPE_P		999178						
ANR	1000642	Symbol	INT32_MAX		999178						
ANR	1000643	Symbol	Z_STRVAL_P		999178						
ANR	1000644	Symbol	ZSTR_VAL		999178						
ANR	1000645	Symbol	Z_LVAL_P		999178						
ANR	1000646	Symbol	args		999178						
ANR	1000647	Symbol	storedArgType		999178						
ANR	1000648	Symbol	tInt64		999178						
ANR	1000649	Symbol	fargs . empty		999178						
ANR	1000650	Symbol	mfo		999178						
ANR	1000651	Symbol	ZSTR_LEN		999178						
ANR	1000652	Symbol	IS_DOUBLE		999178						
ANR	1000653	Symbol	* formatted_len		999178						
ANR	1000654	Symbol	arg_count		999178						
ANR	1000655	Symbol	INT32_MIN		999178						
ANR	1000656	DeclStmt									
ANR	1000657	Decl							int	int	j
ANR	1000658	Function	umsg_parse_helper	631:0:18996:20641							
ANR	1000659	FunctionDef	"umsg_parse_helper (UMessageFormat * fmt , int * count , zval * * args , UChar * source , int32_t source_len , UErrorCode * status)"		1000658	0					
ANR	1000660	CompoundStatement		632:0:19128:20641	1000658	0					
ANR	1000661	IdentifierDeclStatement	"UnicodeString srcString ( source , source_len ) ;"	633:4:19134:19177	1000658	0	True				
ANR	1000662	IdentifierDecl	"srcString ( source , source_len )"		1000658	0					
ANR	1000663	IdentifierDeclType	UnicodeString		1000658	0					
ANR	1000664	Identifier	srcString		1000658	1					
ANR	1000665	Expression	"source , source_len"		1000658	2					
ANR	1000666	Identifier	source		1000658	0					
ANR	1000667	Identifier	source_len		1000658	1					
ANR	1000668	IdentifierDeclStatement	"Formattable * fargs = ( ( const MessageFormat * ) fmt ) -> parse ( srcString , * count , * status ) ;"	634:4:19183:19266	1000658	1	True				
ANR	1000669	IdentifierDecl	"* fargs = ( ( const MessageFormat * ) fmt ) -> parse ( srcString , * count , * status )"		1000658	0					
ANR	1000670	IdentifierDeclType	Formattable *		1000658	0					
ANR	1000671	Identifier	fargs		1000658	1					
ANR	1000672	AssignmentExpression	"* fargs = ( ( const MessageFormat * ) fmt ) -> parse ( srcString , * count , * status )"		1000658	2		=			
ANR	1000673	Identifier	fargs		1000658	0					
ANR	1000674	CallExpression	"( ( const MessageFormat * ) fmt ) -> parse ( srcString , * count , * status )"		1000658	1					
ANR	1000675	Callee	( ( const MessageFormat * ) fmt ) -> parse		1000658	0					
ANR	1000676	PtrMemberAccess	( ( const MessageFormat * ) fmt ) -> parse		1000658	0					
ANR	1000677	CastExpression	( const MessageFormat * ) fmt		1000658	0					
ANR	1000678	CastTarget	const MessageFormat *		1000658	0					
ANR	1000679	Identifier	fmt		1000658	1					
ANR	1000680	Identifier	parse		1000658	1					
ANR	1000681	ArgumentList	srcString		1000658	1					
ANR	1000682	Argument	srcString		1000658	0					
ANR	1000683	Identifier	srcString		1000658	0					
ANR	1000684	Argument	* count		1000658	1					
ANR	1000685	UnaryOperationExpression	* count		1000658	0					
ANR	1000686	UnaryOperator	*		1000658	0					
ANR	1000687	Identifier	count		1000658	1					
ANR	1000688	Argument	* status		1000658	2					
ANR	1000689	UnaryOperationExpression	* status		1000658	0					
ANR	1000690	UnaryOperator	*		1000658	0					
ANR	1000691	Identifier	status		1000658	1					
ANR	1000692	IfStatement	if ( U_FAILURE ( * status ) )		1000658	2					
ANR	1000693	Condition	U_FAILURE ( * status )	636:4:19273:19290	1000658	0	True				
ANR	1000694	CallExpression	U_FAILURE ( * status )		1000658	0					
ANR	1000695	Callee	U_FAILURE		1000658	0					
ANR	1000696	Identifier	U_FAILURE		1000658	0					
ANR	1000697	ArgumentList	* status		1000658	1					
ANR	1000698	Argument	* status		1000658	0					
ANR	1000699	UnaryOperationExpression	* status		1000658	0					
ANR	1000700	UnaryOperator	*		1000658	0					
ANR	1000701	Identifier	status		1000658	1					
ANR	1000702	CompoundStatement		5:24:164:164	1000658	1					
ANR	1000703	ReturnStatement	return ;	637:2:19297:19303	1000658	0	True				
ANR	1000704	ExpressionStatement	"* args = ( zval * ) safe_emalloc ( * count , sizeof ( zval ) , 0 )"	640:1:19310:19363	1000658	3	True				
ANR	1000705	AssignmentExpression	"* args = ( zval * ) safe_emalloc ( * count , sizeof ( zval ) , 0 )"		1000658	0		=			
ANR	1000706	UnaryOperationExpression	* args		1000658	0					
ANR	1000707	UnaryOperator	*		1000658	0					
ANR	1000708	Identifier	args		1000658	1					
ANR	1000709	CastExpression	"( zval * ) safe_emalloc ( * count , sizeof ( zval ) , 0 )"		1000658	1					
ANR	1000710	CastTarget	zval *		1000658	0					
ANR	1000711	CallExpression	"safe_emalloc ( * count , sizeof ( zval ) , 0 )"		1000658	1					
ANR	1000712	Callee	safe_emalloc		1000658	0					
ANR	1000713	Identifier	safe_emalloc		1000658	0					
ANR	1000714	ArgumentList	* count		1000658	1					
ANR	1000715	Argument	* count		1000658	0					
ANR	1000716	UnaryOperationExpression	* count		1000658	0					
ANR	1000717	UnaryOperator	*		1000658	0					
ANR	1000718	Identifier	count		1000658	1					
ANR	1000719	Argument	sizeof ( zval )		1000658	1					
ANR	1000720	SizeofExpression	sizeof ( zval )		1000658	0					
ANR	1000721	Sizeof	sizeof		1000658	0					
ANR	1000722	SizeofOperand	zval		1000658	1					
ANR	1000723	Argument	0		1000658	2					
ANR	1000724	PrimaryExpression	0		1000658	0					
ANR	1000725	ForStatement	for ( int32_t i = 0 ; i < * count ; i ++ )		1000658	4					
ANR	1000726	ForInit	int32_t i = 0 ;	643:8:19412:19425	1000658	0	True				
ANR	1000727	IdentifierDeclStatement	int32_t i = 0 ;		1000658	0					
ANR	1000728	IdentifierDecl	i = 0		1000658	0					
ANR	1000729	IdentifierDeclType	int32_t		1000658	0					
ANR	1000730	Identifier	i		1000658	1					
ANR	1000731	AssignmentExpression	i = 0		1000658	2		=			
ANR	1000732	Identifier	i		1000658	0					
ANR	1000733	PrimaryExpression	0		1000658	1					
ANR	1000734	Condition	i < * count	643:23:19427:19436	1000658	1	True				
ANR	1000735	RelationalExpression	i < * count		1000658	0		<			
ANR	1000736	Identifier	i		1000658	0					
ANR	1000737	UnaryOperationExpression	* count		1000658	1					
ANR	1000738	UnaryOperator	*		1000658	0					
ANR	1000739	Identifier	count		1000658	1					
ANR	1000740	PostIncDecOperationExpression	i ++	643:35:19439:19441	1000658	2	True				
ANR	1000741	Identifier	i		1000658	0					
ANR	1000742	IncDec	++		1000658	1					
ANR	1000743	CompoundStatement		16:2:378:396	1000658	3					
ANR	1000744	IdentifierDeclStatement	int64_t aInt64 ;	644:5:19451:19465	1000658	0	True				
ANR	1000745	IdentifierDecl	aInt64		1000658	0					
ANR	1000746	IdentifierDeclType	int64_t		1000658	0					
ANR	1000747	Identifier	aInt64		1000658	1					
ANR	1000748	IdentifierDeclStatement	double aDate ;	645:2:19469:19481	1000658	1	True				
ANR	1000749	IdentifierDecl	aDate		1000658	0					
ANR	1000750	IdentifierDeclType	double		1000658	0					
ANR	1000751	Identifier	aDate		1000658	1					
ANR	1000752	IdentifierDeclStatement	UnicodeString temp ;	646:2:19485:19503	1000658	2	True				
ANR	1000753	IdentifierDecl	temp		1000658	0					
ANR	1000754	IdentifierDeclType	UnicodeString		1000658	0					
ANR	1000755	Identifier	temp		1000658	1					
ANR	1000756	IdentifierDeclStatement	zend_string * u8str ;	647:2:19507:19525	1000658	3	True				
ANR	1000757	IdentifierDecl	* u8str		1000658	0					
ANR	1000758	IdentifierDeclType	zend_string *		1000658	0					
ANR	1000759	Identifier	u8str		1000658	1					
ANR	1000760	SwitchStatement	switch ( fargs [ i ] . getType ( ) )		1000658	4					
ANR	1000761	Condition	fargs [ i ] . getType ( )	649:9:19537:19554	1000658	0	True				
ANR	1000762	CallExpression	fargs [ i ] . getType ( )		1000658	0					
ANR	1000763	Callee	fargs [ i ] . getType		1000658	0					
ANR	1000764	MemberAccess	fargs [ i ] . getType		1000658	0					
ANR	1000765	ArrayIndexing	fargs [ i ]		1000658	0					
ANR	1000766	Identifier	fargs		1000658	0					
ANR	1000767	Identifier	i		1000658	1					
ANR	1000768	Identifier	getType		1000658	1					
ANR	1000769	ArgumentList			1000658	1					
ANR	1000770	CompoundStatement		18:29:428:428	1000658	1					
ANR	1000771	Label	case Formattable :: kDate :	650:8:19567:19590	1000658	0	True				
ANR	1000772	Identifier	Formattable :: kDate		1000658	0					
ANR	1000773	ExpressionStatement	aDate = ( ( double ) fargs [ i ] . getDate ( ) ) / U_MILLIS_PER_SECOND	651:3:19595:19651	1000658	1	True				
ANR	1000774	AssignmentExpression	aDate = ( ( double ) fargs [ i ] . getDate ( ) ) / U_MILLIS_PER_SECOND		1000658	0		=			
ANR	1000775	Identifier	aDate		1000658	0					
ANR	1000776	MultiplicativeExpression	( ( double ) fargs [ i ] . getDate ( ) ) / U_MILLIS_PER_SECOND		1000658	1		/			
ANR	1000777	CastExpression	( double ) fargs [ i ] . getDate ( )		1000658	0					
ANR	1000778	CastTarget	double		1000658	0					
ANR	1000779	CallExpression	fargs [ i ] . getDate ( )		1000658	1					
ANR	1000780	Callee	fargs [ i ] . getDate		1000658	0					
ANR	1000781	MemberAccess	fargs [ i ] . getDate		1000658	0					
ANR	1000782	ArrayIndexing	fargs [ i ]		1000658	0					
ANR	1000783	Identifier	fargs		1000658	0					
ANR	1000784	Identifier	i		1000658	1					
ANR	1000785	Identifier	getDate		1000658	1					
ANR	1000786	ArgumentList			1000658	1					
ANR	1000787	Identifier	U_MILLIS_PER_SECOND		1000658	1					
ANR	1000788	ExpressionStatement	"ZVAL_DOUBLE ( & ( * args ) [ i ] , aDate )"	652:3:19656:19687	1000658	2	True				
ANR	1000789	CallExpression	"ZVAL_DOUBLE ( & ( * args ) [ i ] , aDate )"		1000658	0					
ANR	1000790	Callee	ZVAL_DOUBLE		1000658	0					
ANR	1000791	Identifier	ZVAL_DOUBLE		1000658	0					
ANR	1000792	ArgumentList	& ( * args ) [ i ]		1000658	1					
ANR	1000793	Argument	& ( * args ) [ i ]		1000658	0					
ANR	1000794	UnaryOperationExpression	& ( * args ) [ i ]		1000658	0					
ANR	1000795	UnaryOperator	&		1000658	0					
ANR	1000796	ArrayIndexing	( * args ) [ i ]		1000658	1					
ANR	1000797	UnaryOperationExpression	* args		1000658	0					
ANR	1000798	UnaryOperator	*		1000658	0					
ANR	1000799	Identifier	args		1000658	1					
ANR	1000800	Identifier	i		1000658	1					
ANR	1000801	Argument	aDate		1000658	1					
ANR	1000802	Identifier	aDate		1000658	0					
ANR	1000803	BreakStatement	break ;	653:12:19701:19706	1000658	3	True				
ANR	1000804	Label	case Formattable :: kDouble :	655:8:19717:19742	1000658	4	True				
ANR	1000805	Identifier	Formattable :: kDouble		1000658	0					
ANR	1000806	ExpressionStatement	"ZVAL_DOUBLE ( & ( * args ) [ i ] , ( double ) fargs [ i ] . getDouble ( ) )"	656:3:19747:19801	1000658	5	True				
ANR	1000807	CallExpression	"ZVAL_DOUBLE ( & ( * args ) [ i ] , ( double ) fargs [ i ] . getDouble ( ) )"		1000658	0					
ANR	1000808	Callee	ZVAL_DOUBLE		1000658	0					
ANR	1000809	Identifier	ZVAL_DOUBLE		1000658	0					
ANR	1000810	ArgumentList	& ( * args ) [ i ]		1000658	1					
ANR	1000811	Argument	& ( * args ) [ i ]		1000658	0					
ANR	1000812	UnaryOperationExpression	& ( * args ) [ i ]		1000658	0					
ANR	1000813	UnaryOperator	&		1000658	0					
ANR	1000814	ArrayIndexing	( * args ) [ i ]		1000658	1					
ANR	1000815	UnaryOperationExpression	* args		1000658	0					
ANR	1000816	UnaryOperator	*		1000658	0					
ANR	1000817	Identifier	args		1000658	1					
ANR	1000818	Identifier	i		1000658	1					
ANR	1000819	Argument	( double ) fargs [ i ] . getDouble ( )		1000658	1					
ANR	1000820	CastExpression	( double ) fargs [ i ] . getDouble ( )		1000658	0					
ANR	1000821	CastTarget	double		1000658	0					
ANR	1000822	CallExpression	fargs [ i ] . getDouble ( )		1000658	1					
ANR	1000823	Callee	fargs [ i ] . getDouble		1000658	0					
ANR	1000824	MemberAccess	fargs [ i ] . getDouble		1000658	0					
ANR	1000825	ArrayIndexing	fargs [ i ]		1000658	0					
ANR	1000826	Identifier	fargs		1000658	0					
ANR	1000827	Identifier	i		1000658	1					
ANR	1000828	Identifier	getDouble		1000658	1					
ANR	1000829	ArgumentList			1000658	1					
ANR	1000830	BreakStatement	break ;	657:12:19815:19820	1000658	6	True				
ANR	1000831	Label	case Formattable :: kLong :	659:8:19831:19854	1000658	7	True				
ANR	1000832	Identifier	Formattable :: kLong		1000658	0					
ANR	1000833	ExpressionStatement	"ZVAL_LONG ( & ( * args ) [ i ] , fargs [ i ] . getLong ( ) )"	660:3:19859:19901	1000658	8	True				
ANR	1000834	CallExpression	"ZVAL_LONG ( & ( * args ) [ i ] , fargs [ i ] . getLong ( ) )"		1000658	0					
ANR	1000835	Callee	ZVAL_LONG		1000658	0					
ANR	1000836	Identifier	ZVAL_LONG		1000658	0					
ANR	1000837	ArgumentList	& ( * args ) [ i ]		1000658	1					
ANR	1000838	Argument	& ( * args ) [ i ]		1000658	0					
ANR	1000839	UnaryOperationExpression	& ( * args ) [ i ]		1000658	0					
ANR	1000840	UnaryOperator	&		1000658	0					
ANR	1000841	ArrayIndexing	( * args ) [ i ]		1000658	1					
ANR	1000842	UnaryOperationExpression	* args		1000658	0					
ANR	1000843	UnaryOperator	*		1000658	0					
ANR	1000844	Identifier	args		1000658	1					
ANR	1000845	Identifier	i		1000658	1					
ANR	1000846	Argument	fargs [ i ] . getLong ( )		1000658	1					
ANR	1000847	CallExpression	fargs [ i ] . getLong ( )		1000658	0					
ANR	1000848	Callee	fargs [ i ] . getLong		1000658	0					
ANR	1000849	MemberAccess	fargs [ i ] . getLong		1000658	0					
ANR	1000850	ArrayIndexing	fargs [ i ]		1000658	0					
ANR	1000851	Identifier	fargs		1000658	0					
ANR	1000852	Identifier	i		1000658	1					
ANR	1000853	Identifier	getLong		1000658	1					
ANR	1000854	ArgumentList			1000658	1					
ANR	1000855	BreakStatement	break ;	661:12:19915:19920	1000658	9	True				
ANR	1000856	Label	case Formattable :: kInt64 :	663:8:19931:19955	1000658	10	True				
ANR	1000857	Identifier	Formattable :: kInt64		1000658	0					
ANR	1000858	ExpressionStatement	aInt64 = fargs [ i ] . getInt64 ( )	664:12:19969:19997	1000658	11	True				
ANR	1000859	AssignmentExpression	aInt64 = fargs [ i ] . getInt64 ( )		1000658	0		=			
ANR	1000860	Identifier	aInt64		1000658	0					
ANR	1000861	CallExpression	fargs [ i ] . getInt64 ( )		1000658	1					
ANR	1000862	Callee	fargs [ i ] . getInt64		1000658	0					
ANR	1000863	MemberAccess	fargs [ i ] . getInt64		1000658	0					
ANR	1000864	ArrayIndexing	fargs [ i ]		1000658	0					
ANR	1000865	Identifier	fargs		1000658	0					
ANR	1000866	Identifier	i		1000658	1					
ANR	1000867	Identifier	getInt64		1000658	1					
ANR	1000868	ArgumentList			1000658	1					
ANR	1000869	IfStatement	if ( aInt64 > ZEND_LONG_MAX || aInt64 < - ZEND_LONG_MAX )		1000658	12					
ANR	1000870	Condition	aInt64 > ZEND_LONG_MAX || aInt64 < - ZEND_LONG_MAX	665:6:20005:20053	1000658	0	True				
ANR	1000871	OrExpression	aInt64 > ZEND_LONG_MAX || aInt64 < - ZEND_LONG_MAX		1000658	0		||			
ANR	1000872	RelationalExpression	aInt64 > ZEND_LONG_MAX		1000658	0		>			
ANR	1000873	Identifier	aInt64		1000658	0					
ANR	1000874	Identifier	ZEND_LONG_MAX		1000658	1					
ANR	1000875	RelationalExpression	aInt64 < - ZEND_LONG_MAX		1000658	1		<			
ANR	1000876	Identifier	aInt64		1000658	0					
ANR	1000877	UnaryOperationExpression	- ZEND_LONG_MAX		1000658	1					
ANR	1000878	UnaryOperator	-		1000658	0					
ANR	1000879	Identifier	ZEND_LONG_MAX		1000658	1					
ANR	1000880	CompoundStatement		34:57:927:927	1000658	1					
ANR	1000881	ExpressionStatement	"ZVAL_DOUBLE ( & ( * args ) [ i ] , ( double ) aInt64 )"	666:4:20062:20102	1000658	0	True				
ANR	1000882	CallExpression	"ZVAL_DOUBLE ( & ( * args ) [ i ] , ( double ) aInt64 )"		1000658	0					
ANR	1000883	Callee	ZVAL_DOUBLE		1000658	0					
ANR	1000884	Identifier	ZVAL_DOUBLE		1000658	0					
ANR	1000885	ArgumentList	& ( * args ) [ i ]		1000658	1					
ANR	1000886	Argument	& ( * args ) [ i ]		1000658	0					
ANR	1000887	UnaryOperationExpression	& ( * args ) [ i ]		1000658	0					
ANR	1000888	UnaryOperator	&		1000658	0					
ANR	1000889	ArrayIndexing	( * args ) [ i ]		1000658	1					
ANR	1000890	UnaryOperationExpression	* args		1000658	0					
ANR	1000891	UnaryOperator	*		1000658	0					
ANR	1000892	Identifier	args		1000658	1					
ANR	1000893	Identifier	i		1000658	1					
ANR	1000894	Argument	( double ) aInt64		1000658	1					
ANR	1000895	CastExpression	( double ) aInt64		1000658	0					
ANR	1000896	CastTarget	double		1000658	0					
ANR	1000897	Identifier	aInt64		1000658	1					
ANR	1000898	ElseStatement	else		1000658	0					
ANR	1000899	CompoundStatement		36:10:985:985	1000658	0					
ANR	1000900	ExpressionStatement	"ZVAL_LONG ( & ( * args ) [ i ] , ( zend_long ) aInt64 )"	668:4:20120:20161	1000658	0	True				
ANR	1000901	CallExpression	"ZVAL_LONG ( & ( * args ) [ i ] , ( zend_long ) aInt64 )"		1000658	0					
ANR	1000902	Callee	ZVAL_LONG		1000658	0					
ANR	1000903	Identifier	ZVAL_LONG		1000658	0					
ANR	1000904	ArgumentList	& ( * args ) [ i ]		1000658	1					
ANR	1000905	Argument	& ( * args ) [ i ]		1000658	0					
ANR	1000906	UnaryOperationExpression	& ( * args ) [ i ]		1000658	0					
ANR	1000907	UnaryOperator	&		1000658	0					
ANR	1000908	ArrayIndexing	( * args ) [ i ]		1000658	1					
ANR	1000909	UnaryOperationExpression	* args		1000658	0					
ANR	1000910	UnaryOperator	*		1000658	0					
ANR	1000911	Identifier	args		1000658	1					
ANR	1000912	Identifier	i		1000658	1					
ANR	1000913	Argument	( zend_long ) aInt64		1000658	1					
ANR	1000914	CastExpression	( zend_long ) aInt64		1000658	0					
ANR	1000915	CastTarget	zend_long		1000658	0					
ANR	1000916	Identifier	aInt64		1000658	1					
ANR	1000917	BreakStatement	break ;	670:12:20180:20185	1000658	13	True				
ANR	1000918	Label	case Formattable :: kString :	672:8:20196:20221	1000658	14	True				
ANR	1000919	Identifier	Formattable :: kString		1000658	0					
ANR	1000920	ExpressionStatement	fargs [ i ] . getString ( temp )	673:12:20235:20259	1000658	15	True				
ANR	1000921	CallExpression	fargs [ i ] . getString ( temp )		1000658	0					
ANR	1000922	Callee	fargs [ i ] . getString		1000658	0					
ANR	1000923	MemberAccess	fargs [ i ] . getString		1000658	0					
ANR	1000924	ArrayIndexing	fargs [ i ]		1000658	0					
ANR	1000925	Identifier	fargs		1000658	0					
ANR	1000926	Identifier	i		1000658	1					
ANR	1000927	Identifier	getString		1000658	1					
ANR	1000928	ArgumentList	temp		1000658	1					
ANR	1000929	Argument	temp		1000658	0					
ANR	1000930	Identifier	temp		1000658	0					
ANR	1000931	ExpressionStatement	"u8str = intl_convert_utf16_to_utf8 ( temp . getBuffer ( ) , temp . length ( ) , status )"	674:3:20264:20339	1000658	16	True				
ANR	1000932	AssignmentExpression	"u8str = intl_convert_utf16_to_utf8 ( temp . getBuffer ( ) , temp . length ( ) , status )"		1000658	0		=			
ANR	1000933	Identifier	u8str		1000658	0					
ANR	1000934	CallExpression	"intl_convert_utf16_to_utf8 ( temp . getBuffer ( ) , temp . length ( ) , status )"		1000658	1					
ANR	1000935	Callee	intl_convert_utf16_to_utf8		1000658	0					
ANR	1000936	Identifier	intl_convert_utf16_to_utf8		1000658	0					
ANR	1000937	ArgumentList	temp . getBuffer ( )		1000658	1					
ANR	1000938	Argument	temp . getBuffer ( )		1000658	0					
ANR	1000939	CallExpression	temp . getBuffer ( )		1000658	0					
ANR	1000940	Callee	temp . getBuffer		1000658	0					
ANR	1000941	MemberAccess	temp . getBuffer		1000658	0					
ANR	1000942	Identifier	temp		1000658	0					
ANR	1000943	Identifier	getBuffer		1000658	1					
ANR	1000944	ArgumentList			1000658	1					
ANR	1000945	Argument	temp . length ( )		1000658	1					
ANR	1000946	CallExpression	temp . length ( )		1000658	0					
ANR	1000947	Callee	temp . length		1000658	0					
ANR	1000948	MemberAccess	temp . length		1000658	0					
ANR	1000949	Identifier	temp		1000658	0					
ANR	1000950	Identifier	length		1000658	1					
ANR	1000951	ArgumentList			1000658	1					
ANR	1000952	Argument	status		1000658	2					
ANR	1000953	Identifier	status		1000658	0					
ANR	1000954	IfStatement	if ( ! u8str )		1000658	17					
ANR	1000955	Condition	! u8str	675:6:20347:20352	1000658	0	True				
ANR	1000956	UnaryOperationExpression	! u8str		1000658	0					
ANR	1000957	UnaryOperator	!		1000658	0					
ANR	1000958	Identifier	u8str		1000658	1					
ANR	1000959	CompoundStatement		44:14:1226:1226	1000658	1					
ANR	1000960	ExpressionStatement	cleanup_zvals ( )	676:4:20361:20376	1000658	0	True				
ANR	1000961	CallExpression	cleanup_zvals ( )		1000658	0					
ANR	1000962	Callee	cleanup_zvals		1000658	0					
ANR	1000963	Identifier	cleanup_zvals		1000658	0					
ANR	1000964	ArgumentList			1000658	1					
ANR	1000965	ReturnStatement	return ;	677:4:20382:20388	1000658	1	True				
ANR	1000966	ExpressionStatement	"ZVAL_NEW_STR ( & ( * args ) [ i ] , u8str )"	679:3:20398:20430	1000658	18	True				
ANR	1000967	CallExpression	"ZVAL_NEW_STR ( & ( * args ) [ i ] , u8str )"		1000658	0					
ANR	1000968	Callee	ZVAL_NEW_STR		1000658	0					
ANR	1000969	Identifier	ZVAL_NEW_STR		1000658	0					
ANR	1000970	ArgumentList	& ( * args ) [ i ]		1000658	1					
ANR	1000971	Argument	& ( * args ) [ i ]		1000658	0					
ANR	1000972	UnaryOperationExpression	& ( * args ) [ i ]		1000658	0					
ANR	1000973	UnaryOperator	&		1000658	0					
ANR	1000974	ArrayIndexing	( * args ) [ i ]		1000658	1					
ANR	1000975	UnaryOperationExpression	* args		1000658	0					
ANR	1000976	UnaryOperator	*		1000658	0					
ANR	1000977	Identifier	args		1000658	1					
ANR	1000978	Identifier	i		1000658	1					
ANR	1000979	Argument	u8str		1000658	1					
ANR	1000980	Identifier	u8str		1000658	0					
ANR	1000981	BreakStatement	break ;	680:12:20444:20449	1000658	19	True				
ANR	1000982	Label	case Formattable :: kObject :	682:8:20460:20485	1000658	20	True				
ANR	1000983	Identifier	Formattable :: kObject		1000658	0					
ANR	1000984	Label	case Formattable :: kArray :	683:8:20495:20519	1000658	21	True				
ANR	1000985	Identifier	Formattable :: kArray		1000658	0					
ANR	1000986	ExpressionStatement	* status = U_ILLEGAL_ARGUMENT_ERROR	684:12:20533:20567	1000658	22	True				
ANR	1000987	AssignmentExpression	* status = U_ILLEGAL_ARGUMENT_ERROR		1000658	0		=			
ANR	1000988	UnaryOperationExpression	* status		1000658	0					
ANR	1000989	UnaryOperator	*		1000658	0					
ANR	1000990	Identifier	status		1000658	1					
ANR	1000991	Identifier	U_ILLEGAL_ARGUMENT_ERROR		1000658	1					
ANR	1000992	ExpressionStatement	cleanup_zvals ( )	685:3:20572:20587	1000658	23	True				
ANR	1000993	CallExpression	cleanup_zvals ( )		1000658	0					
ANR	1000994	Callee	cleanup_zvals		1000658	0					
ANR	1000995	Identifier	cleanup_zvals		1000658	0					
ANR	1000996	ArgumentList			1000658	1					
ANR	1000997	BreakStatement	break ;	686:12:20601:20606	1000658	24	True				
ANR	1000998	Statement	delete	689:1:20625:20630	1000658	5	True				
ANR	1000999	Statement	[	689:7:20631:20631	1000658	6	True				
ANR	1001000	Statement	]	689:8:20632:20632	1000658	7	True				
ANR	1001001	ExpressionStatement	fargs	689:10:20634:20639	1000658	8	True				
ANR	1001002	Identifier	fargs		1000658	0					
ANR	1001003	ReturnType	U_CFUNC void		1000658	1					
ANR	1001004	Identifier	umsg_parse_helper		1000658	2					
ANR	1001005	ParameterList	"UMessageFormat * fmt , int * count , zval * * args , UChar * source , int32_t source_len , UErrorCode * status"		1000658	3					
ANR	1001006	Parameter	UMessageFormat * fmt	631:31:19027:19045	1000658	0	True				
ANR	1001007	ParameterType	UMessageFormat *		1000658	0					
ANR	1001008	Identifier	fmt		1000658	1					
ANR	1001009	Parameter	int * count	631:52:19048:19057	1000658	1	True				
ANR	1001010	ParameterType	int *		1000658	0					
ANR	1001011	Identifier	count		1000658	1					
ANR	1001012	Parameter	zval * * args	631:64:19060:19070	1000658	2	True				
ANR	1001013	ParameterType	zval * *		1000658	0					
ANR	1001014	Identifier	args		1000658	1					
ANR	1001015	Parameter	UChar * source	631:77:19073:19085	1000658	3	True				
ANR	1001016	ParameterType	UChar *		1000658	0					
ANR	1001017	Identifier	source		1000658	1					
ANR	1001018	Parameter	int32_t source_len	631:92:19088:19105	1000658	4	True				
ANR	1001019	ParameterType	int32_t		1000658	0					
ANR	1001020	Identifier	source_len		1000658	1					
ANR	1001021	Parameter	UErrorCode * status	631:112:19108:19125	1000658	5	True				
ANR	1001022	ParameterType	UErrorCode *		1000658	0					
ANR	1001023	Identifier	status		1000658	1					
ANR	1001024	CFGEntryNode	ENTRY		1000658		True				
ANR	1001025	CFGExitNode	EXIT		1000658		True				
ANR	1001026	Symbol	ZEND_LONG_MAX		1000658						
ANR	1001027	Symbol	fargs		1000658						
ANR	1001028	Symbol	* fmt		1000658						
ANR	1001029	Symbol	intl_convert_utf16_to_utf8		1000658						
ANR	1001030	Symbol	source		1000658						
ANR	1001031	Symbol	fmt		1000658						
ANR	1001032	Symbol	* args		1000658						
ANR	1001033	Symbol	U_FAILURE		1000658						
ANR	1001034	Symbol	* count		1000658						
ANR	1001035	Symbol	srcString		1000658						
ANR	1001036	Symbol	aDate		1000658						
ANR	1001037	Symbol	U_MILLIS_PER_SECOND		1000658						
ANR	1001038	Symbol	fargs [ i ] . getDouble		1000658						
ANR	1001039	Symbol	temp . getBuffer		1000658						
ANR	1001040	Symbol	temp		1000658						
ANR	1001041	Symbol	( ( const MessageFormat * ) fmt ) -> parse		1000658						
ANR	1001042	Symbol	u8str		1000658						
ANR	1001043	Symbol	fargs [ i ] . getLong		1000658						
ANR	1001044	Symbol	U_ILLEGAL_ARGUMENT_ERROR		1000658						
ANR	1001045	Symbol	* fargs		1000658						
ANR	1001046	Symbol	fargs [ i ] . getType		1000658						
ANR	1001047	Symbol	count		1000658						
ANR	1001048	Symbol	i		1000658						
ANR	1001049	Symbol	fargs [ i ] . getDate		1000658						
ANR	1001050	Symbol	* status		1000658						
ANR	1001051	Symbol	args		1000658						
ANR	1001052	Symbol	aInt64		1000658						
ANR	1001053	Symbol	* i		1000658						
ANR	1001054	Symbol	source_len		1000658						
ANR	1001055	Symbol	temp . length		1000658						
ANR	1001056	Symbol	safe_emalloc		1000658						
ANR	1001057	Symbol	fargs [ i ] . getInt64		1000658						
ANR	1001058	Symbol	status		1000658						
