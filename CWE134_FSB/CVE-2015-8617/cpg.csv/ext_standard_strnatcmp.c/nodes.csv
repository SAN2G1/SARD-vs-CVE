command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2801785	File	data/converged/CVE-2015-8617_php-src/ext_standard_strnatcmp.c								
ANR	2801786	DeclStmt									
ANR	2801787	Decl							version	version	UNUSED
ANR	2801788	Function	compare_right	45:0:1379:2151							
ANR	2801789	FunctionDef	"compare_right (char const * * a , char const * aend , char const * * b , char const * bend)"		2801788	0					
ANR	2801790	CompoundStatement		47:0:1472:2151	2801788	0					
ANR	2801791	IdentifierDeclStatement	int bias = 0 ;	48:1:1475:1487	2801788	0	True				
ANR	2801792	IdentifierDecl	bias = 0		2801788	0					
ANR	2801793	IdentifierDeclType	int		2801788	0					
ANR	2801794	Identifier	bias		2801788	1					
ANR	2801795	AssignmentExpression	bias = 0		2801788	2		=			
ANR	2801796	Identifier	bias		2801788	0					
ANR	2801797	PrimaryExpression	0		2801788	1					
ANR	2801798	ForStatement	"for ( ; ; ( * a ) ++ , ( * b ) ++ )"		2801788	1					
ANR	2801799	Expression	"( * a ) ++ , ( * b ) ++"	54:8:1721:1734	2801788	0	True				
ANR	2801800	PostIncDecOperationExpression	( * a ) ++		2801788	0					
ANR	2801801	UnaryOperationExpression	* a		2801788	0					
ANR	2801802	UnaryOperator	*		2801788	0					
ANR	2801803	Identifier	a		2801788	1					
ANR	2801804	IncDec	++		2801788	1					
ANR	2801805	PostIncDecOperationExpression	( * b ) ++		2801788	1					
ANR	2801806	UnaryOperationExpression	* b		2801788	0					
ANR	2801807	UnaryOperator	*		2801788	0					
ANR	2801808	Identifier	b		2801788	1					
ANR	2801809	IncDec	++		2801788	1					
ANR	2801810	CompoundStatement		8:24:264:264	2801788	1					
ANR	2801811	IfStatement	if ( ( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) ) )		2801788	0					
ANR	2801812	Condition	( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )	55:6:1745:1849	2801788	0	True				
ANR	2801813	AndExpression	( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )		2801788	0		&&			
ANR	2801814	OrExpression	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )		2801788	0		||			
ANR	2801815	EqualityExpression	* a == aend		2801788	0		==			
ANR	2801816	UnaryOperationExpression	* a		2801788	0					
ANR	2801817	UnaryOperator	*		2801788	0					
ANR	2801818	Identifier	a		2801788	1					
ANR	2801819	Identifier	aend		2801788	1					
ANR	2801820	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * a )		2801788	1					
ANR	2801821	UnaryOperator	!		2801788	0					
ANR	2801822	CallExpression	isdigit ( ( int ) ( unsigned char ) * * a )		2801788	1					
ANR	2801823	Callee	isdigit		2801788	0					
ANR	2801824	Identifier	isdigit		2801788	0					
ANR	2801825	ArgumentList	( int ) ( unsigned char ) * * a		2801788	1					
ANR	2801826	Argument	( int ) ( unsigned char ) * * a		2801788	0					
ANR	2801827	CastExpression	( int ) ( unsigned char ) * * a		2801788	0					
ANR	2801828	CastTarget	int		2801788	0					
ANR	2801829	CastExpression	( unsigned char ) * * a		2801788	1					
ANR	2801830	CastTarget	unsigned char		2801788	0					
ANR	2801831	UnaryOperationExpression	* * a		2801788	1					
ANR	2801832	UnaryOperator	*		2801788	0					
ANR	2801833	UnaryOperationExpression	* a		2801788	1					
ANR	2801834	UnaryOperator	*		2801788	0					
ANR	2801835	Identifier	a		2801788	1					
ANR	2801836	OrExpression	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )		2801788	1		||			
ANR	2801837	EqualityExpression	* b == bend		2801788	0		==			
ANR	2801838	UnaryOperationExpression	* b		2801788	0					
ANR	2801839	UnaryOperator	*		2801788	0					
ANR	2801840	Identifier	b		2801788	1					
ANR	2801841	Identifier	bend		2801788	1					
ANR	2801842	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * b )		2801788	1					
ANR	2801843	UnaryOperator	!		2801788	0					
ANR	2801844	CallExpression	isdigit ( ( int ) ( unsigned char ) * * b )		2801788	1					
ANR	2801845	Callee	isdigit		2801788	0					
ANR	2801846	Identifier	isdigit		2801788	0					
ANR	2801847	ArgumentList	( int ) ( unsigned char ) * * b		2801788	1					
ANR	2801848	Argument	( int ) ( unsigned char ) * * b		2801788	0					
ANR	2801849	CastExpression	( int ) ( unsigned char ) * * b		2801788	0					
ANR	2801850	CastTarget	int		2801788	0					
ANR	2801851	CastExpression	( unsigned char ) * * b		2801788	1					
ANR	2801852	CastTarget	unsigned char		2801788	0					
ANR	2801853	UnaryOperationExpression	* * b		2801788	1					
ANR	2801854	UnaryOperator	*		2801788	0					
ANR	2801855	UnaryOperationExpression	* b		2801788	1					
ANR	2801856	UnaryOperator	*		2801788	0					
ANR	2801857	Identifier	b		2801788	1					
ANR	2801858	ReturnStatement	return bias ;	57:3:1855:1866	2801788	1	True				
ANR	2801859	Identifier	bias		2801788	0					
ANR	2801860	ElseStatement	else		2801788	0					
ANR	2801861	IfStatement	if ( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) )		2801788	0					
ANR	2801862	Condition	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )	58:11:1879:1925	2801788	0	True				
ANR	2801863	OrExpression	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )		2801788	0		||			
ANR	2801864	EqualityExpression	* a == aend		2801788	0		==			
ANR	2801865	UnaryOperationExpression	* a		2801788	0					
ANR	2801866	UnaryOperator	*		2801788	0					
ANR	2801867	Identifier	a		2801788	1					
ANR	2801868	Identifier	aend		2801788	1					
ANR	2801869	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * a )		2801788	1					
ANR	2801870	UnaryOperator	!		2801788	0					
ANR	2801871	CallExpression	isdigit ( ( int ) ( unsigned char ) * * a )		2801788	1					
ANR	2801872	Callee	isdigit		2801788	0					
ANR	2801873	Identifier	isdigit		2801788	0					
ANR	2801874	ArgumentList	( int ) ( unsigned char ) * * a		2801788	1					
ANR	2801875	Argument	( int ) ( unsigned char ) * * a		2801788	0					
ANR	2801876	CastExpression	( int ) ( unsigned char ) * * a		2801788	0					
ANR	2801877	CastTarget	int		2801788	0					
ANR	2801878	CastExpression	( unsigned char ) * * a		2801788	1					
ANR	2801879	CastTarget	unsigned char		2801788	0					
ANR	2801880	UnaryOperationExpression	* * a		2801788	1					
ANR	2801881	UnaryOperator	*		2801788	0					
ANR	2801882	UnaryOperationExpression	* a		2801788	1					
ANR	2801883	UnaryOperator	*		2801788	0					
ANR	2801884	Identifier	a		2801788	1					
ANR	2801885	ReturnStatement	return - 1 ;	59:3:1931:1940	2801788	1	True				
ANR	2801886	UnaryOperationExpression	- 1		2801788	0					
ANR	2801887	UnaryOperator	-		2801788	0					
ANR	2801888	PrimaryExpression	1		2801788	1					
ANR	2801889	ElseStatement	else		2801788	0					
ANR	2801890	IfStatement	if ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )		2801788	0					
ANR	2801891	Condition	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )	60:11:1953:1999	2801788	0	True				
ANR	2801892	OrExpression	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )		2801788	0		||			
ANR	2801893	EqualityExpression	* b == bend		2801788	0		==			
ANR	2801894	UnaryOperationExpression	* b		2801788	0					
ANR	2801895	UnaryOperator	*		2801788	0					
ANR	2801896	Identifier	b		2801788	1					
ANR	2801897	Identifier	bend		2801788	1					
ANR	2801898	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * b )		2801788	1					
ANR	2801899	UnaryOperator	!		2801788	0					
ANR	2801900	CallExpression	isdigit ( ( int ) ( unsigned char ) * * b )		2801788	1					
ANR	2801901	Callee	isdigit		2801788	0					
ANR	2801902	Identifier	isdigit		2801788	0					
ANR	2801903	ArgumentList	( int ) ( unsigned char ) * * b		2801788	1					
ANR	2801904	Argument	( int ) ( unsigned char ) * * b		2801788	0					
ANR	2801905	CastExpression	( int ) ( unsigned char ) * * b		2801788	0					
ANR	2801906	CastTarget	int		2801788	0					
ANR	2801907	CastExpression	( unsigned char ) * * b		2801788	1					
ANR	2801908	CastTarget	unsigned char		2801788	0					
ANR	2801909	UnaryOperationExpression	* * b		2801788	1					
ANR	2801910	UnaryOperator	*		2801788	0					
ANR	2801911	UnaryOperationExpression	* b		2801788	1					
ANR	2801912	UnaryOperator	*		2801788	0					
ANR	2801913	Identifier	b		2801788	1					
ANR	2801914	ReturnStatement	return + 1 ;	61:3:2005:2014	2801788	1	True				
ANR	2801915	UnaryOperationExpression	+ 1		2801788	0					
ANR	2801916	UnaryOperator	+		2801788	0					
ANR	2801917	PrimaryExpression	1		2801788	1					
ANR	2801918	ElseStatement	else		2801788	0					
ANR	2801919	IfStatement	if ( * * a < * * b )		2801788	0					
ANR	2801920	Condition	* * a < * * b	62:11:2027:2035	2801788	0	True				
ANR	2801921	RelationalExpression	* * a < * * b		2801788	0		<			
ANR	2801922	UnaryOperationExpression	* * a		2801788	0					
ANR	2801923	UnaryOperator	*		2801788	0					
ANR	2801924	UnaryOperationExpression	* a		2801788	1					
ANR	2801925	UnaryOperator	*		2801788	0					
ANR	2801926	Identifier	a		2801788	1					
ANR	2801927	UnaryOperationExpression	* * b		2801788	1					
ANR	2801928	UnaryOperator	*		2801788	0					
ANR	2801929	UnaryOperationExpression	* b		2801788	1					
ANR	2801930	UnaryOperator	*		2801788	0					
ANR	2801931	Identifier	b		2801788	1					
ANR	2801932	CompoundStatement		16:22:565:565	2801788	1					
ANR	2801933	IfStatement	if ( ! bias )		2801788	0					
ANR	2801934	Condition	! bias	63:7:2047:2051	2801788	0	True				
ANR	2801935	UnaryOperationExpression	! bias		2801788	0					
ANR	2801936	UnaryOperator	!		2801788	0					
ANR	2801937	Identifier	bias		2801788	1					
ANR	2801938	ExpressionStatement	bias = - 1	64:4:2058:2067	2801788	1	True				
ANR	2801939	AssignmentExpression	bias = - 1		2801788	0		=			
ANR	2801940	Identifier	bias		2801788	0					
ANR	2801941	UnaryOperationExpression	- 1		2801788	1					
ANR	2801942	UnaryOperator	-		2801788	0					
ANR	2801943	PrimaryExpression	1		2801788	1					
ANR	2801944	ElseStatement	else		2801788	0					
ANR	2801945	IfStatement	if ( * * a > * * b )		2801788	0					
ANR	2801946	Condition	* * a > * * b	65:13:2082:2090	2801788	0	True				
ANR	2801947	RelationalExpression	* * a > * * b		2801788	0		>			
ANR	2801948	UnaryOperationExpression	* * a		2801788	0					
ANR	2801949	UnaryOperator	*		2801788	0					
ANR	2801950	UnaryOperationExpression	* a		2801788	1					
ANR	2801951	UnaryOperator	*		2801788	0					
ANR	2801952	Identifier	a		2801788	1					
ANR	2801953	UnaryOperationExpression	* * b		2801788	1					
ANR	2801954	UnaryOperator	*		2801788	0					
ANR	2801955	UnaryOperationExpression	* b		2801788	1					
ANR	2801956	UnaryOperator	*		2801788	0					
ANR	2801957	Identifier	b		2801788	1					
ANR	2801958	CompoundStatement		19:24:620:620	2801788	1					
ANR	2801959	IfStatement	if ( ! bias )		2801788	0					
ANR	2801960	Condition	! bias	66:7:2102:2106	2801788	0	True				
ANR	2801961	UnaryOperationExpression	! bias		2801788	0					
ANR	2801962	UnaryOperator	!		2801788	0					
ANR	2801963	Identifier	bias		2801788	1					
ANR	2801964	ExpressionStatement	bias = + 1	67:4:2113:2122	2801788	1	True				
ANR	2801965	AssignmentExpression	bias = + 1		2801788	0		=			
ANR	2801966	Identifier	bias		2801788	0					
ANR	2801967	UnaryOperationExpression	+ 1		2801788	1					
ANR	2801968	UnaryOperator	+		2801788	0					
ANR	2801969	PrimaryExpression	1		2801788	1					
ANR	2801970	ReturnStatement	return 0 ;	71:5:2141:2149	2801788	2	True				
ANR	2801971	PrimaryExpression	0		2801788	0					
ANR	2801972	ReturnType	static int		2801788	1					
ANR	2801973	Identifier	compare_right		2801788	2					
ANR	2801974	ParameterList	"char const * * a , char const * aend , char const * * b , char const * bend"		2801788	3					
ANR	2801975	Parameter	char const * * a	46:14:1404:1417	2801788	0	True				
ANR	2801976	ParameterType	char const * *		2801788	0					
ANR	2801977	Identifier	a		2801788	1					
ANR	2801978	Parameter	char const * aend	46:30:1420:1435	2801788	1	True				
ANR	2801979	ParameterType	char const *		2801788	0					
ANR	2801980	Identifier	aend		2801788	1					
ANR	2801981	Parameter	char const * * b	46:48:1438:1451	2801788	2	True				
ANR	2801982	ParameterType	char const * *		2801788	0					
ANR	2801983	Identifier	b		2801788	1					
ANR	2801984	Parameter	char const * bend	46:64:1454:1469	2801788	3	True				
ANR	2801985	ParameterType	char const *		2801788	0					
ANR	2801986	Identifier	bend		2801788	1					
ANR	2801987	CFGEntryNode	ENTRY		2801788		True				
ANR	2801988	CFGExitNode	EXIT		2801788		True				
ANR	2801989	InfiniteForNode	true		2801788		True				
ANR	2801990	Symbol	a		2801788						
ANR	2801991	Symbol	b		2801788						
ANR	2801992	Symbol	aend		2801788						
ANR	2801993	Symbol	bend		2801788						
ANR	2801994	Symbol	bias		2801788						
ANR	2801995	Symbol	* * b		2801788						
ANR	2801996	Symbol	* * a		2801788						
ANR	2801997	Symbol	* a		2801788						
ANR	2801998	Symbol	* b		2801788						
ANR	2801999	Symbol	isdigit		2801788						
ANR	2802000	Function	compare_left	77:0:2188:2776							
ANR	2802001	FunctionDef	"compare_left (char const * * a , char const * aend , char const * * b , char const * bend)"		2802000	0					
ANR	2802002	CompoundStatement		79:0:2280:2776	2802000	0					
ANR	2802003	ForStatement	"for ( ; ; ( * a ) ++ , ( * b ) ++ )"		2802000	0					
ANR	2802004	Expression	"( * a ) ++ , ( * b ) ++"	82:8:2385:2398	2802000	0	True				
ANR	2802005	PostIncDecOperationExpression	( * a ) ++		2802000	0					
ANR	2802006	UnaryOperationExpression	* a		2802000	0					
ANR	2802007	UnaryOperator	*		2802000	0					
ANR	2802008	Identifier	a		2802000	1					
ANR	2802009	IncDec	++		2802000	1					
ANR	2802010	PostIncDecOperationExpression	( * b ) ++		2802000	1					
ANR	2802011	UnaryOperationExpression	* b		2802000	0					
ANR	2802012	UnaryOperator	*		2802000	0					
ANR	2802013	Identifier	b		2802000	1					
ANR	2802014	IncDec	++		2802000	1					
ANR	2802015	CompoundStatement		4:24:120:120	2802000	1					
ANR	2802016	IfStatement	if ( ( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) ) )		2802000	0					
ANR	2802017	Condition	( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )	83:6:2409:2513	2802000	0	True				
ANR	2802018	AndExpression	( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) ) && ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )		2802000	0		&&			
ANR	2802019	OrExpression	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )		2802000	0		||			
ANR	2802020	EqualityExpression	* a == aend		2802000	0		==			
ANR	2802021	UnaryOperationExpression	* a		2802000	0					
ANR	2802022	UnaryOperator	*		2802000	0					
ANR	2802023	Identifier	a		2802000	1					
ANR	2802024	Identifier	aend		2802000	1					
ANR	2802025	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * a )		2802000	1					
ANR	2802026	UnaryOperator	!		2802000	0					
ANR	2802027	CallExpression	isdigit ( ( int ) ( unsigned char ) * * a )		2802000	1					
ANR	2802028	Callee	isdigit		2802000	0					
ANR	2802029	Identifier	isdigit		2802000	0					
ANR	2802030	ArgumentList	( int ) ( unsigned char ) * * a		2802000	1					
ANR	2802031	Argument	( int ) ( unsigned char ) * * a		2802000	0					
ANR	2802032	CastExpression	( int ) ( unsigned char ) * * a		2802000	0					
ANR	2802033	CastTarget	int		2802000	0					
ANR	2802034	CastExpression	( unsigned char ) * * a		2802000	1					
ANR	2802035	CastTarget	unsigned char		2802000	0					
ANR	2802036	UnaryOperationExpression	* * a		2802000	1					
ANR	2802037	UnaryOperator	*		2802000	0					
ANR	2802038	UnaryOperationExpression	* a		2802000	1					
ANR	2802039	UnaryOperator	*		2802000	0					
ANR	2802040	Identifier	a		2802000	1					
ANR	2802041	OrExpression	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )		2802000	1		||			
ANR	2802042	EqualityExpression	* b == bend		2802000	0		==			
ANR	2802043	UnaryOperationExpression	* b		2802000	0					
ANR	2802044	UnaryOperator	*		2802000	0					
ANR	2802045	Identifier	b		2802000	1					
ANR	2802046	Identifier	bend		2802000	1					
ANR	2802047	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * b )		2802000	1					
ANR	2802048	UnaryOperator	!		2802000	0					
ANR	2802049	CallExpression	isdigit ( ( int ) ( unsigned char ) * * b )		2802000	1					
ANR	2802050	Callee	isdigit		2802000	0					
ANR	2802051	Identifier	isdigit		2802000	0					
ANR	2802052	ArgumentList	( int ) ( unsigned char ) * * b		2802000	1					
ANR	2802053	Argument	( int ) ( unsigned char ) * * b		2802000	0					
ANR	2802054	CastExpression	( int ) ( unsigned char ) * * b		2802000	0					
ANR	2802055	CastTarget	int		2802000	0					
ANR	2802056	CastExpression	( unsigned char ) * * b		2802000	1					
ANR	2802057	CastTarget	unsigned char		2802000	0					
ANR	2802058	UnaryOperationExpression	* * b		2802000	1					
ANR	2802059	UnaryOperator	*		2802000	0					
ANR	2802060	UnaryOperationExpression	* b		2802000	1					
ANR	2802061	UnaryOperator	*		2802000	0					
ANR	2802062	Identifier	b		2802000	1					
ANR	2802063	ReturnStatement	return 0 ;	85:3:2519:2527	2802000	1	True				
ANR	2802064	PrimaryExpression	0		2802000	0					
ANR	2802065	ElseStatement	else		2802000	0					
ANR	2802066	IfStatement	if ( * a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a ) )		2802000	0					
ANR	2802067	Condition	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )	86:11:2540:2586	2802000	0	True				
ANR	2802068	OrExpression	* a == aend || ! isdigit ( ( int ) ( unsigned char ) * * a )		2802000	0		||			
ANR	2802069	EqualityExpression	* a == aend		2802000	0		==			
ANR	2802070	UnaryOperationExpression	* a		2802000	0					
ANR	2802071	UnaryOperator	*		2802000	0					
ANR	2802072	Identifier	a		2802000	1					
ANR	2802073	Identifier	aend		2802000	1					
ANR	2802074	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * a )		2802000	1					
ANR	2802075	UnaryOperator	!		2802000	0					
ANR	2802076	CallExpression	isdigit ( ( int ) ( unsigned char ) * * a )		2802000	1					
ANR	2802077	Callee	isdigit		2802000	0					
ANR	2802078	Identifier	isdigit		2802000	0					
ANR	2802079	ArgumentList	( int ) ( unsigned char ) * * a		2802000	1					
ANR	2802080	Argument	( int ) ( unsigned char ) * * a		2802000	0					
ANR	2802081	CastExpression	( int ) ( unsigned char ) * * a		2802000	0					
ANR	2802082	CastTarget	int		2802000	0					
ANR	2802083	CastExpression	( unsigned char ) * * a		2802000	1					
ANR	2802084	CastTarget	unsigned char		2802000	0					
ANR	2802085	UnaryOperationExpression	* * a		2802000	1					
ANR	2802086	UnaryOperator	*		2802000	0					
ANR	2802087	UnaryOperationExpression	* a		2802000	1					
ANR	2802088	UnaryOperator	*		2802000	0					
ANR	2802089	Identifier	a		2802000	1					
ANR	2802090	ReturnStatement	return - 1 ;	87:3:2592:2601	2802000	1	True				
ANR	2802091	UnaryOperationExpression	- 1		2802000	0					
ANR	2802092	UnaryOperator	-		2802000	0					
ANR	2802093	PrimaryExpression	1		2802000	1					
ANR	2802094	ElseStatement	else		2802000	0					
ANR	2802095	IfStatement	if ( * b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b ) )		2802000	0					
ANR	2802096	Condition	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )	88:11:2614:2660	2802000	0	True				
ANR	2802097	OrExpression	* b == bend || ! isdigit ( ( int ) ( unsigned char ) * * b )		2802000	0		||			
ANR	2802098	EqualityExpression	* b == bend		2802000	0		==			
ANR	2802099	UnaryOperationExpression	* b		2802000	0					
ANR	2802100	UnaryOperator	*		2802000	0					
ANR	2802101	Identifier	b		2802000	1					
ANR	2802102	Identifier	bend		2802000	1					
ANR	2802103	UnaryOperationExpression	! isdigit ( ( int ) ( unsigned char ) * * b )		2802000	1					
ANR	2802104	UnaryOperator	!		2802000	0					
ANR	2802105	CallExpression	isdigit ( ( int ) ( unsigned char ) * * b )		2802000	1					
ANR	2802106	Callee	isdigit		2802000	0					
ANR	2802107	Identifier	isdigit		2802000	0					
ANR	2802108	ArgumentList	( int ) ( unsigned char ) * * b		2802000	1					
ANR	2802109	Argument	( int ) ( unsigned char ) * * b		2802000	0					
ANR	2802110	CastExpression	( int ) ( unsigned char ) * * b		2802000	0					
ANR	2802111	CastTarget	int		2802000	0					
ANR	2802112	CastExpression	( unsigned char ) * * b		2802000	1					
ANR	2802113	CastTarget	unsigned char		2802000	0					
ANR	2802114	UnaryOperationExpression	* * b		2802000	1					
ANR	2802115	UnaryOperator	*		2802000	0					
ANR	2802116	UnaryOperationExpression	* b		2802000	1					
ANR	2802117	UnaryOperator	*		2802000	0					
ANR	2802118	Identifier	b		2802000	1					
ANR	2802119	ReturnStatement	return + 1 ;	89:3:2666:2675	2802000	1	True				
ANR	2802120	UnaryOperationExpression	+ 1		2802000	0					
ANR	2802121	UnaryOperator	+		2802000	0					
ANR	2802122	PrimaryExpression	1		2802000	1					
ANR	2802123	ElseStatement	else		2802000	0					
ANR	2802124	IfStatement	if ( * * a < * * b )		2802000	0					
ANR	2802125	Condition	* * a < * * b	90:12:2689:2697	2802000	0	True				
ANR	2802126	RelationalExpression	* * a < * * b		2802000	0		<			
ANR	2802127	UnaryOperationExpression	* * a		2802000	0					
ANR	2802128	UnaryOperator	*		2802000	0					
ANR	2802129	UnaryOperationExpression	* a		2802000	1					
ANR	2802130	UnaryOperator	*		2802000	0					
ANR	2802131	Identifier	a		2802000	1					
ANR	2802132	UnaryOperationExpression	* * b		2802000	1					
ANR	2802133	UnaryOperator	*		2802000	0					
ANR	2802134	UnaryOperationExpression	* b		2802000	1					
ANR	2802135	UnaryOperator	*		2802000	0					
ANR	2802136	Identifier	b		2802000	1					
ANR	2802137	ReturnStatement	return - 1 ;	91:4:2704:2713	2802000	1	True				
ANR	2802138	UnaryOperationExpression	- 1		2802000	0					
ANR	2802139	UnaryOperator	-		2802000	0					
ANR	2802140	PrimaryExpression	1		2802000	1					
ANR	2802141	ElseStatement	else		2802000	0					
ANR	2802142	IfStatement	if ( * * a > * * b )		2802000	0					
ANR	2802143	Condition	* * a > * * b	92:12:2727:2735	2802000	0	True				
ANR	2802144	RelationalExpression	* * a > * * b		2802000	0		>			
ANR	2802145	UnaryOperationExpression	* * a		2802000	0					
ANR	2802146	UnaryOperator	*		2802000	0					
ANR	2802147	UnaryOperationExpression	* a		2802000	1					
ANR	2802148	UnaryOperator	*		2802000	0					
ANR	2802149	Identifier	a		2802000	1					
ANR	2802150	UnaryOperationExpression	* * b		2802000	1					
ANR	2802151	UnaryOperator	*		2802000	0					
ANR	2802152	UnaryOperationExpression	* b		2802000	1					
ANR	2802153	UnaryOperator	*		2802000	0					
ANR	2802154	Identifier	b		2802000	1					
ANR	2802155	ReturnStatement	return + 1 ;	93:4:2742:2751	2802000	1	True				
ANR	2802156	UnaryOperationExpression	+ 1		2802000	0					
ANR	2802157	UnaryOperator	+		2802000	0					
ANR	2802158	PrimaryExpression	1		2802000	1					
ANR	2802159	ReturnStatement	return 0 ;	96:5:2766:2774	2802000	1	True				
ANR	2802160	PrimaryExpression	0		2802000	0					
ANR	2802161	ReturnType	static int		2802000	1					
ANR	2802162	Identifier	compare_left		2802000	2					
ANR	2802163	ParameterList	"char const * * a , char const * aend , char const * * b , char const * bend"		2802000	3					
ANR	2802164	Parameter	char const * * a	78:13:2212:2225	2802000	0	True				
ANR	2802165	ParameterType	char const * *		2802000	0					
ANR	2802166	Identifier	a		2802000	1					
ANR	2802167	Parameter	char const * aend	78:29:2228:2243	2802000	1	True				
ANR	2802168	ParameterType	char const *		2802000	0					
ANR	2802169	Identifier	aend		2802000	1					
ANR	2802170	Parameter	char const * * b	78:47:2246:2259	2802000	2	True				
ANR	2802171	ParameterType	char const * *		2802000	0					
ANR	2802172	Identifier	b		2802000	1					
ANR	2802173	Parameter	char const * bend	78:63:2262:2277	2802000	3	True				
ANR	2802174	ParameterType	char const *		2802000	0					
ANR	2802175	Identifier	bend		2802000	1					
ANR	2802176	CFGEntryNode	ENTRY		2802000		True				
ANR	2802177	CFGExitNode	EXIT		2802000		True				
ANR	2802178	InfiniteForNode	true		2802000		True				
ANR	2802179	Symbol	a		2802000						
ANR	2802180	Symbol	b		2802000						
ANR	2802181	Symbol	aend		2802000						
ANR	2802182	Symbol	bend		2802000						
ANR	2802183	Symbol	* * b		2802000						
ANR	2802184	Symbol	* * a		2802000						
ANR	2802185	Symbol	* a		2802000						
ANR	2802186	Symbol	* b		2802000						
ANR	2802187	Symbol	isdigit		2802000						
ANR	2802188	Function	strnatcmp_ex	102:0:2813:4574							
ANR	2802189	FunctionDef	"strnatcmp_ex (char const * a , size_t a_len , char const * b , size_t b_len , int fold_case)"		2802188	0					
ANR	2802190	CompoundStatement		103:0:2910:4574	2802188	0					
ANR	2802191	IdentifierDeclStatement	"unsigned char ca , cb ;"	104:1:2913:2933	2802188	0	True				
ANR	2802192	IdentifierDecl	ca		2802188	0					
ANR	2802193	IdentifierDeclType	unsigned char		2802188	0					
ANR	2802194	Identifier	ca		2802188	1					
ANR	2802195	IdentifierDecl	cb		2802188	1					
ANR	2802196	IdentifierDeclType	unsigned char		2802188	0					
ANR	2802197	Identifier	cb		2802188	1					
ANR	2802198	IdentifierDeclStatement	"char const * ap , * bp ;"	105:1:2936:2955	2802188	1	True				
ANR	2802199	IdentifierDecl	* ap		2802188	0					
ANR	2802200	IdentifierDeclType	char const *		2802188	0					
ANR	2802201	Identifier	ap		2802188	1					
ANR	2802202	IdentifierDecl	* bp		2802188	1					
ANR	2802203	IdentifierDeclType	char const *		2802188	0					
ANR	2802204	Identifier	bp		2802188	1					
ANR	2802205	IdentifierDeclStatement	"char const * aend = a + a_len , * bend = b + b_len ;"	106:1:2958:3011	2802188	2	True				
ANR	2802206	IdentifierDecl	* aend = a + a_len		2802188	0					
ANR	2802207	IdentifierDeclType	char const *		2802188	0					
ANR	2802208	Identifier	aend		2802188	1					
ANR	2802209	AssignmentExpression	* aend = a + a_len		2802188	2		=			
ANR	2802210	Identifier	aend		2802188	0					
ANR	2802211	AdditiveExpression	a + a_len		2802188	1		+			
ANR	2802212	Identifier	a		2802188	0					
ANR	2802213	Identifier	a_len		2802188	1					
ANR	2802214	IdentifierDecl	* bend = b + b_len		2802188	1					
ANR	2802215	IdentifierDeclType	char const *		2802188	0					
ANR	2802216	Identifier	bend		2802188	1					
ANR	2802217	AssignmentExpression	* bend = b + b_len		2802188	2		=			
ANR	2802218	Identifier	bend		2802188	0					
ANR	2802219	AdditiveExpression	b + b_len		2802188	1		+			
ANR	2802220	Identifier	b		2802188	0					
ANR	2802221	Identifier	b_len		2802188	1					
ANR	2802222	IdentifierDeclStatement	"int fractional , result ;"	108:1:3014:3036	2802188	3	True				
ANR	2802223	IdentifierDecl	fractional		2802188	0					
ANR	2802224	IdentifierDeclType	int		2802188	0					
ANR	2802225	Identifier	fractional		2802188	1					
ANR	2802226	IdentifierDecl	result		2802188	1					
ANR	2802227	IdentifierDeclType	int		2802188	0					
ANR	2802228	Identifier	result		2802188	1					
ANR	2802229	IdentifierDeclStatement	short leading = 1 ;	109:1:3039:3056	2802188	4	True				
ANR	2802230	IdentifierDecl	leading = 1		2802188	0					
ANR	2802231	IdentifierDeclType	short		2802188	0					
ANR	2802232	Identifier	leading		2802188	1					
ANR	2802233	AssignmentExpression	leading = 1		2802188	2		=			
ANR	2802234	Identifier	leading		2802188	0					
ANR	2802235	PrimaryExpression	1		2802188	1					
ANR	2802236	IfStatement	if ( a_len == 0 || b_len == 0 )		2802188	5					
ANR	2802237	Condition	a_len == 0 || b_len == 0	111:5:3064:3087	2802188	0	True				
ANR	2802238	OrExpression	a_len == 0 || b_len == 0		2802188	0		||			
ANR	2802239	EqualityExpression	a_len == 0		2802188	0		==			
ANR	2802240	Identifier	a_len		2802188	0					
ANR	2802241	PrimaryExpression	0		2802188	1					
ANR	2802242	EqualityExpression	b_len == 0		2802188	1		==			
ANR	2802243	Identifier	b_len		2802188	0					
ANR	2802244	PrimaryExpression	0		2802188	1					
ANR	2802245	CompoundStatement		9:31:179:179	2802188	1					
ANR	2802246	ReturnStatement	return ( a_len == b_len ? 0 : ( a_len > b_len ? 1 : - 1 ) ) ;	112:2:3094:3148	2802188	0	True				
ANR	2802247	ConditionalExpression	a_len == b_len ? 0 : ( a_len > b_len ? 1 : - 1 )		2802188	0					
ANR	2802248	Condition	a_len == b_len		2802188	0					
ANR	2802249	EqualityExpression	a_len == b_len		2802188	0		==			
ANR	2802250	Identifier	a_len		2802188	0					
ANR	2802251	Identifier	b_len		2802188	1					
ANR	2802252	PrimaryExpression	0		2802188	1					
ANR	2802253	ConditionalExpression	a_len > b_len ? 1 : - 1		2802188	2					
ANR	2802254	Condition	a_len > b_len		2802188	0					
ANR	2802255	RelationalExpression	a_len > b_len		2802188	0		>			
ANR	2802256	Identifier	a_len		2802188	0					
ANR	2802257	Identifier	b_len		2802188	1					
ANR	2802258	PrimaryExpression	1		2802188	1					
ANR	2802259	UnaryOperationExpression	- 1		2802188	2					
ANR	2802260	UnaryOperator	-		2802188	0					
ANR	2802261	PrimaryExpression	1		2802188	1					
ANR	2802262	ExpressionStatement	ap = a	115:1:3155:3161	2802188	6	True				
ANR	2802263	AssignmentExpression	ap = a		2802188	0		=			
ANR	2802264	Identifier	ap		2802188	0					
ANR	2802265	Identifier	a		2802188	1					
ANR	2802266	ExpressionStatement	bp = b	116:1:3164:3170	2802188	7	True				
ANR	2802267	AssignmentExpression	bp = b		2802188	0		=			
ANR	2802268	Identifier	bp		2802188	0					
ANR	2802269	Identifier	b		2802188	1					
ANR	2802270	WhileStatement	while ( 1 )		2802188	8					
ANR	2802271	Condition	1	117:8:3180:3180	2802188	0	True				
ANR	2802272	PrimaryExpression	1		2802188	0					
ANR	2802273	CompoundStatement		15:11:272:272	2802188	1					
ANR	2802274	ExpressionStatement	ca = * ap	118:2:3187:3195	2802188	0	True				
ANR	2802275	AssignmentExpression	ca = * ap		2802188	0		=			
ANR	2802276	Identifier	ca		2802188	0					
ANR	2802277	UnaryOperationExpression	* ap		2802188	1					
ANR	2802278	UnaryOperator	*		2802188	0					
ANR	2802279	Identifier	ap		2802188	1					
ANR	2802280	ExpressionStatement	cb = * bp	118:12:3197:3205	2802188	1	True				
ANR	2802281	AssignmentExpression	cb = * bp		2802188	0		=			
ANR	2802282	Identifier	cb		2802188	0					
ANR	2802283	UnaryOperationExpression	* bp		2802188	1					
ANR	2802284	UnaryOperator	*		2802188	0					
ANR	2802285	Identifier	bp		2802188	1					
ANR	2802286	WhileStatement	while ( leading && ca == '0' && ( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) ) )		2802188	2					
ANR	2802287	Condition	leading && ca == '0' && ( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )	121:9:3249:3325	2802188	0	True				
ANR	2802288	AndExpression	leading && ca == '0' && ( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )		2802188	0		&&			
ANR	2802289	Identifier	leading		2802188	0					
ANR	2802290	AndExpression	ca == '0' && ( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )		2802188	1		&&			
ANR	2802291	EqualityExpression	ca == '0'		2802188	0		==			
ANR	2802292	Identifier	ca		2802188	0					
ANR	2802293	PrimaryExpression	'0'		2802188	1					
ANR	2802294	AndExpression	( ap + 1 < aend ) && isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )		2802188	1		&&			
ANR	2802295	RelationalExpression	ap + 1 < aend		2802188	0		<			
ANR	2802296	AdditiveExpression	ap + 1		2802188	0		+			
ANR	2802297	Identifier	ap		2802188	0					
ANR	2802298	PrimaryExpression	1		2802188	1					
ANR	2802299	Identifier	aend		2802188	1					
ANR	2802300	CallExpression	isdigit ( ( int ) ( unsigned char ) * ( ap + 1 ) )		2802188	1					
ANR	2802301	Callee	isdigit		2802188	0					
ANR	2802302	Identifier	isdigit		2802188	0					
ANR	2802303	ArgumentList	( int ) ( unsigned char ) * ( ap + 1 )		2802188	1					
ANR	2802304	Argument	( int ) ( unsigned char ) * ( ap + 1 )		2802188	0					
ANR	2802305	CastExpression	( int ) ( unsigned char ) * ( ap + 1 )		2802188	0					
ANR	2802306	CastTarget	int		2802188	0					
ANR	2802307	CastExpression	( unsigned char ) * ( ap + 1 )		2802188	1					
ANR	2802308	CastTarget	unsigned char		2802188	0					
ANR	2802309	UnaryOperationExpression	* ( ap + 1 )		2802188	1					
ANR	2802310	UnaryOperator	*		2802188	0					
ANR	2802311	AdditiveExpression	ap + 1		2802188	1		+			
ANR	2802312	Identifier	ap		2802188	0					
ANR	2802313	PrimaryExpression	1		2802188	1					
ANR	2802314	CompoundStatement		19:88:417:417	2802188	1					
ANR	2802315	ExpressionStatement	ca = * ++ ap	122:3:3333:3343	2802188	0	True				
ANR	2802316	AssignmentExpression	ca = * ++ ap		2802188	0		=			
ANR	2802317	Identifier	ca		2802188	0					
ANR	2802318	UnaryOperationExpression	* ++ ap		2802188	1					
ANR	2802319	UnaryOperator	*		2802188	0					
ANR	2802320	UnaryExpression	++ ap		2802188	1					
ANR	2802321	IncDec	++		2802188	0					
ANR	2802322	Identifier	ap		2802188	1					
ANR	2802323	WhileStatement	while ( leading && cb == '0' && ( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) ) )		2802188	3					
ANR	2802324	Condition	leading && cb == '0' && ( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )	125:9:3359:3435	2802188	0	True				
ANR	2802325	AndExpression	leading && cb == '0' && ( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )		2802188	0		&&			
ANR	2802326	Identifier	leading		2802188	0					
ANR	2802327	AndExpression	cb == '0' && ( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )		2802188	1		&&			
ANR	2802328	EqualityExpression	cb == '0'		2802188	0		==			
ANR	2802329	Identifier	cb		2802188	0					
ANR	2802330	PrimaryExpression	'0'		2802188	1					
ANR	2802331	AndExpression	( bp + 1 < bend ) && isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )		2802188	1		&&			
ANR	2802332	RelationalExpression	bp + 1 < bend		2802188	0		<			
ANR	2802333	AdditiveExpression	bp + 1		2802188	0		+			
ANR	2802334	Identifier	bp		2802188	0					
ANR	2802335	PrimaryExpression	1		2802188	1					
ANR	2802336	Identifier	bend		2802188	1					
ANR	2802337	CallExpression	isdigit ( ( int ) ( unsigned char ) * ( bp + 1 ) )		2802188	1					
ANR	2802338	Callee	isdigit		2802188	0					
ANR	2802339	Identifier	isdigit		2802188	0					
ANR	2802340	ArgumentList	( int ) ( unsigned char ) * ( bp + 1 )		2802188	1					
ANR	2802341	Argument	( int ) ( unsigned char ) * ( bp + 1 )		2802188	0					
ANR	2802342	CastExpression	( int ) ( unsigned char ) * ( bp + 1 )		2802188	0					
ANR	2802343	CastTarget	int		2802188	0					
ANR	2802344	CastExpression	( unsigned char ) * ( bp + 1 )		2802188	1					
ANR	2802345	CastTarget	unsigned char		2802188	0					
ANR	2802346	UnaryOperationExpression	* ( bp + 1 )		2802188	1					
ANR	2802347	UnaryOperator	*		2802188	0					
ANR	2802348	AdditiveExpression	bp + 1		2802188	1		+			
ANR	2802349	Identifier	bp		2802188	0					
ANR	2802350	PrimaryExpression	1		2802188	1					
ANR	2802351	CompoundStatement		23:88:527:527	2802188	1					
ANR	2802352	ExpressionStatement	cb = * ++ bp	126:3:3443:3453	2802188	0	True				
ANR	2802353	AssignmentExpression	cb = * ++ bp		2802188	0		=			
ANR	2802354	Identifier	cb		2802188	0					
ANR	2802355	UnaryOperationExpression	* ++ bp		2802188	1					
ANR	2802356	UnaryOperator	*		2802188	0					
ANR	2802357	UnaryExpression	++ bp		2802188	1					
ANR	2802358	IncDec	++		2802188	0					
ANR	2802359	Identifier	bp		2802188	1					
ANR	2802360	ExpressionStatement	leading = 0	129:2:3462:3473	2802188	4	True				
ANR	2802361	AssignmentExpression	leading = 0		2802188	0		=			
ANR	2802362	Identifier	leading		2802188	0					
ANR	2802363	PrimaryExpression	0		2802188	1					
ANR	2802364	WhileStatement	while ( isspace ( ( int ) ( unsigned char ) ca ) )		2802188	5					
ANR	2802365	Condition	isspace ( ( int ) ( unsigned char ) ca )	132:9:3521:3551	2802188	0	True				
ANR	2802366	CallExpression	isspace ( ( int ) ( unsigned char ) ca )		2802188	0					
ANR	2802367	Callee	isspace		2802188	0					
ANR	2802368	Identifier	isspace		2802188	0					
ANR	2802369	ArgumentList	( int ) ( unsigned char ) ca		2802188	1					
ANR	2802370	Argument	( int ) ( unsigned char ) ca		2802188	0					
ANR	2802371	CastExpression	( int ) ( unsigned char ) ca		2802188	0					
ANR	2802372	CastTarget	int		2802188	0					
ANR	2802373	CastExpression	( unsigned char ) ca		2802188	1					
ANR	2802374	CastTarget	unsigned char		2802188	0					
ANR	2802375	Identifier	ca		2802188	1					
ANR	2802376	CompoundStatement		30:42:643:643	2802188	1					
ANR	2802377	ExpressionStatement	ca = * ++ ap	133:3:3559:3569	2802188	0	True				
ANR	2802378	AssignmentExpression	ca = * ++ ap		2802188	0		=			
ANR	2802379	Identifier	ca		2802188	0					
ANR	2802380	UnaryOperationExpression	* ++ ap		2802188	1					
ANR	2802381	UnaryOperator	*		2802188	0					
ANR	2802382	UnaryExpression	++ ap		2802188	1					
ANR	2802383	IncDec	++		2802188	0					
ANR	2802384	Identifier	ap		2802188	1					
ANR	2802385	WhileStatement	while ( isspace ( ( int ) ( unsigned char ) cb ) )		2802188	6					
ANR	2802386	Condition	isspace ( ( int ) ( unsigned char ) cb )	136:9:3585:3615	2802188	0	True				
ANR	2802387	CallExpression	isspace ( ( int ) ( unsigned char ) cb )		2802188	0					
ANR	2802388	Callee	isspace		2802188	0					
ANR	2802389	Identifier	isspace		2802188	0					
ANR	2802390	ArgumentList	( int ) ( unsigned char ) cb		2802188	1					
ANR	2802391	Argument	( int ) ( unsigned char ) cb		2802188	0					
ANR	2802392	CastExpression	( int ) ( unsigned char ) cb		2802188	0					
ANR	2802393	CastTarget	int		2802188	0					
ANR	2802394	CastExpression	( unsigned char ) cb		2802188	1					
ANR	2802395	CastTarget	unsigned char		2802188	0					
ANR	2802396	Identifier	cb		2802188	1					
ANR	2802397	CompoundStatement		34:42:707:707	2802188	1					
ANR	2802398	ExpressionStatement	cb = * ++ bp	137:3:3623:3633	2802188	0	True				
ANR	2802399	AssignmentExpression	cb = * ++ bp		2802188	0		=			
ANR	2802400	Identifier	cb		2802188	0					
ANR	2802401	UnaryOperationExpression	* ++ bp		2802188	1					
ANR	2802402	UnaryOperator	*		2802188	0					
ANR	2802403	UnaryExpression	++ bp		2802188	1					
ANR	2802404	IncDec	++		2802188	0					
ANR	2802405	Identifier	bp		2802188	1					
ANR	2802406	IfStatement	if ( isdigit ( ( int ) ( unsigned char ) ca ) && isdigit ( ( int ) ( unsigned char ) cb ) )		2802188	7					
ANR	2802407	Condition	isdigit ( ( int ) ( unsigned char ) ca ) && isdigit ( ( int ) ( unsigned char ) cb )	141:6:3676:3743	2802188	0	True				
ANR	2802408	AndExpression	isdigit ( ( int ) ( unsigned char ) ca ) && isdigit ( ( int ) ( unsigned char ) cb )		2802188	0		&&			
ANR	2802409	CallExpression	isdigit ( ( int ) ( unsigned char ) ca )		2802188	0					
ANR	2802410	Callee	isdigit		2802188	0					
ANR	2802411	Identifier	isdigit		2802188	0					
ANR	2802412	ArgumentList	( int ) ( unsigned char ) ca		2802188	1					
ANR	2802413	Argument	( int ) ( unsigned char ) ca		2802188	0					
ANR	2802414	CastExpression	( int ) ( unsigned char ) ca		2802188	0					
ANR	2802415	CastTarget	int		2802188	0					
ANR	2802416	CastExpression	( unsigned char ) ca		2802188	1					
ANR	2802417	CastTarget	unsigned char		2802188	0					
ANR	2802418	Identifier	ca		2802188	1					
ANR	2802419	CallExpression	isdigit ( ( int ) ( unsigned char ) cb )		2802188	1					
ANR	2802420	Callee	isdigit		2802188	0					
ANR	2802421	Identifier	isdigit		2802188	0					
ANR	2802422	ArgumentList	( int ) ( unsigned char ) cb		2802188	1					
ANR	2802423	Argument	( int ) ( unsigned char ) cb		2802188	0					
ANR	2802424	CastExpression	( int ) ( unsigned char ) cb		2802188	0					
ANR	2802425	CastTarget	int		2802188	0					
ANR	2802426	CastExpression	( unsigned char ) cb		2802188	1					
ANR	2802427	CastTarget	unsigned char		2802188	0					
ANR	2802428	Identifier	cb		2802188	1					
ANR	2802429	CompoundStatement		39:76:835:835	2802188	1					
ANR	2802430	ExpressionStatement	fractional = ( ca == '0' || cb == '0' )	142:3:3751:3788	2802188	0	True				
ANR	2802431	AssignmentExpression	fractional = ( ca == '0' || cb == '0' )		2802188	0		=			
ANR	2802432	Identifier	fractional		2802188	0					
ANR	2802433	OrExpression	ca == '0' || cb == '0'		2802188	1		||			
ANR	2802434	EqualityExpression	ca == '0'		2802188	0		==			
ANR	2802435	Identifier	ca		2802188	0					
ANR	2802436	PrimaryExpression	'0'		2802188	1					
ANR	2802437	EqualityExpression	cb == '0'		2802188	1		==			
ANR	2802438	Identifier	cb		2802188	0					
ANR	2802439	PrimaryExpression	'0'		2802188	1					
ANR	2802440	IfStatement	if ( fractional )		2802188	1					
ANR	2802441	Condition	fractional	144:7:3798:3807	2802188	0	True				
ANR	2802442	Identifier	fractional		2802188	0					
ANR	2802443	ExpressionStatement	"result = compare_left ( & ap , aend , & bp , bend )"	145:4:3814:3857	2802188	1	True				
ANR	2802444	AssignmentExpression	"result = compare_left ( & ap , aend , & bp , bend )"		2802188	0		=			
ANR	2802445	Identifier	result		2802188	0					
ANR	2802446	CallExpression	"compare_left ( & ap , aend , & bp , bend )"		2802188	1					
ANR	2802447	Callee	compare_left		2802188	0					
ANR	2802448	Identifier	compare_left		2802188	0					
ANR	2802449	ArgumentList	& ap		2802188	1					
ANR	2802450	Argument	& ap		2802188	0					
ANR	2802451	UnaryOperationExpression	& ap		2802188	0					
ANR	2802452	UnaryOperator	&		2802188	0					
ANR	2802453	Identifier	ap		2802188	1					
ANR	2802454	Argument	aend		2802188	1					
ANR	2802455	Identifier	aend		2802188	0					
ANR	2802456	Argument	& bp		2802188	2					
ANR	2802457	UnaryOperationExpression	& bp		2802188	0					
ANR	2802458	UnaryOperator	&		2802188	0					
ANR	2802459	Identifier	bp		2802188	1					
ANR	2802460	Argument	bend		2802188	3					
ANR	2802461	Identifier	bend		2802188	0					
ANR	2802462	ElseStatement	else		2802188	0					
ANR	2802463	ExpressionStatement	"result = compare_right ( & ap , aend , & bp , bend )"	147:4:3871:3915	2802188	0	True				
ANR	2802464	AssignmentExpression	"result = compare_right ( & ap , aend , & bp , bend )"		2802188	0		=			
ANR	2802465	Identifier	result		2802188	0					
ANR	2802466	CallExpression	"compare_right ( & ap , aend , & bp , bend )"		2802188	1					
ANR	2802467	Callee	compare_right		2802188	0					
ANR	2802468	Identifier	compare_right		2802188	0					
ANR	2802469	ArgumentList	& ap		2802188	1					
ANR	2802470	Argument	& ap		2802188	0					
ANR	2802471	UnaryOperationExpression	& ap		2802188	0					
ANR	2802472	UnaryOperator	&		2802188	0					
ANR	2802473	Identifier	ap		2802188	1					
ANR	2802474	Argument	aend		2802188	1					
ANR	2802475	Identifier	aend		2802188	0					
ANR	2802476	Argument	& bp		2802188	2					
ANR	2802477	UnaryOperationExpression	& bp		2802188	0					
ANR	2802478	UnaryOperator	&		2802188	0					
ANR	2802479	Identifier	bp		2802188	1					
ANR	2802480	Argument	bend		2802188	3					
ANR	2802481	Identifier	bend		2802188	0					
ANR	2802482	IfStatement	if ( result != 0 )		2802188	2					
ANR	2802483	Condition	result != 0	149:7:3925:3935	2802188	0	True				
ANR	2802484	EqualityExpression	result != 0		2802188	0		!=			
ANR	2802485	Identifier	result		2802188	0					
ANR	2802486	PrimaryExpression	0		2802188	1					
ANR	2802487	ReturnStatement	return result ;	150:4:3942:3955	2802188	1	True				
ANR	2802488	Identifier	result		2802188	0					
ANR	2802489	ElseStatement	else		2802188	0					
ANR	2802490	IfStatement	if ( ap == aend && bp == bend )		2802188	0					
ANR	2802491	Condition	ap == aend && bp == bend	151:12:3969:3992	2802188	0	True				
ANR	2802492	AndExpression	ap == aend && bp == bend		2802188	0		&&			
ANR	2802493	EqualityExpression	ap == aend		2802188	0		==			
ANR	2802494	Identifier	ap		2802188	0					
ANR	2802495	Identifier	aend		2802188	1					
ANR	2802496	EqualityExpression	bp == bend		2802188	1		==			
ANR	2802497	Identifier	bp		2802188	0					
ANR	2802498	Identifier	bend		2802188	1					
ANR	2802499	ReturnStatement	return 0 ;	153:4:4055:4063	2802188	1	True				
ANR	2802500	PrimaryExpression	0		2802188	0					
ANR	2802501	ElseStatement	else		2802188	0					
ANR	2802502	CompoundStatement		52:8:1162:1162	2802188	0					
ANR	2802503	ExpressionStatement	ca = * ap	156:4:4131:4139	2802188	0	True				
ANR	2802504	AssignmentExpression	ca = * ap		2802188	0		=			
ANR	2802505	Identifier	ca		2802188	0					
ANR	2802506	UnaryOperationExpression	* ap		2802188	1					
ANR	2802507	UnaryOperator	*		2802188	0					
ANR	2802508	Identifier	ap		2802188	1					
ANR	2802509	ExpressionStatement	cb = * bp	156:14:4141:4149	2802188	1	True				
ANR	2802510	AssignmentExpression	cb = * bp		2802188	0		=			
ANR	2802511	Identifier	cb		2802188	0					
ANR	2802512	UnaryOperationExpression	* bp		2802188	1					
ANR	2802513	UnaryOperator	*		2802188	0					
ANR	2802514	Identifier	bp		2802188	1					
ANR	2802515	IfStatement	if ( fold_case )		2802188	8					
ANR	2802516	Condition	fold_case	160:6:4167:4175	2802188	0	True				
ANR	2802517	Identifier	fold_case		2802188	0					
ANR	2802518	CompoundStatement		58:17:1267:1267	2802188	1					
ANR	2802519	ExpressionStatement	ca = toupper ( ( int ) ( unsigned char ) ca )	161:3:4183:4219	2802188	0	True				
ANR	2802520	AssignmentExpression	ca = toupper ( ( int ) ( unsigned char ) ca )		2802188	0		=			
ANR	2802521	Identifier	ca		2802188	0					
ANR	2802522	CallExpression	toupper ( ( int ) ( unsigned char ) ca )		2802188	1					
ANR	2802523	Callee	toupper		2802188	0					
ANR	2802524	Identifier	toupper		2802188	0					
ANR	2802525	ArgumentList	( int ) ( unsigned char ) ca		2802188	1					
ANR	2802526	Argument	( int ) ( unsigned char ) ca		2802188	0					
ANR	2802527	CastExpression	( int ) ( unsigned char ) ca		2802188	0					
ANR	2802528	CastTarget	int		2802188	0					
ANR	2802529	CastExpression	( unsigned char ) ca		2802188	1					
ANR	2802530	CastTarget	unsigned char		2802188	0					
ANR	2802531	Identifier	ca		2802188	1					
ANR	2802532	ExpressionStatement	cb = toupper ( ( int ) ( unsigned char ) cb )	162:3:4224:4260	2802188	1	True				
ANR	2802533	AssignmentExpression	cb = toupper ( ( int ) ( unsigned char ) cb )		2802188	0		=			
ANR	2802534	Identifier	cb		2802188	0					
ANR	2802535	CallExpression	toupper ( ( int ) ( unsigned char ) cb )		2802188	1					
ANR	2802536	Callee	toupper		2802188	0					
ANR	2802537	Identifier	toupper		2802188	0					
ANR	2802538	ArgumentList	( int ) ( unsigned char ) cb		2802188	1					
ANR	2802539	Argument	( int ) ( unsigned char ) cb		2802188	0					
ANR	2802540	CastExpression	( int ) ( unsigned char ) cb		2802188	0					
ANR	2802541	CastTarget	int		2802188	0					
ANR	2802542	CastExpression	( unsigned char ) cb		2802188	1					
ANR	2802543	CastTarget	unsigned char		2802188	0					
ANR	2802544	Identifier	cb		2802188	1					
ANR	2802545	IfStatement	if ( ca < cb )		2802188	9					
ANR	2802546	Condition	ca < cb	165:6:4273:4279	2802188	0	True				
ANR	2802547	RelationalExpression	ca < cb		2802188	0		<			
ANR	2802548	Identifier	ca		2802188	0					
ANR	2802549	Identifier	cb		2802188	1					
ANR	2802550	ReturnStatement	return - 1 ;	166:3:4285:4294	2802188	1	True				
ANR	2802551	UnaryOperationExpression	- 1		2802188	0					
ANR	2802552	UnaryOperator	-		2802188	0					
ANR	2802553	PrimaryExpression	1		2802188	1					
ANR	2802554	ElseStatement	else		2802188	0					
ANR	2802555	IfStatement	if ( ca > cb )		2802188	0					
ANR	2802556	Condition	ca > cb	167:11:4307:4313	2802188	0	True				
ANR	2802557	RelationalExpression	ca > cb		2802188	0		>			
ANR	2802558	Identifier	ca		2802188	0					
ANR	2802559	Identifier	cb		2802188	1					
ANR	2802560	ReturnStatement	return + 1 ;	168:3:4319:4328	2802188	1	True				
ANR	2802561	UnaryOperationExpression	+ 1		2802188	0					
ANR	2802562	UnaryOperator	+		2802188	0					
ANR	2802563	PrimaryExpression	1		2802188	1					
ANR	2802564	ExpressionStatement	++ ap	170:2:4333:4337	2802188	10	True				
ANR	2802565	UnaryExpression	++ ap		2802188	0					
ANR	2802566	IncDec	++		2802188	0					
ANR	2802567	Identifier	ap		2802188	1					
ANR	2802568	ExpressionStatement	++ bp	170:8:4339:4343	2802188	11	True				
ANR	2802569	UnaryExpression	++ bp		2802188	0					
ANR	2802570	IncDec	++		2802188	0					
ANR	2802571	Identifier	bp		2802188	1					
ANR	2802572	IfStatement	if ( ap >= aend && bp >= bend )		2802188	12					
ANR	2802573	Condition	ap >= aend && bp >= bend	171:6:4351:4374	2802188	0	True				
ANR	2802574	AndExpression	ap >= aend && bp >= bend		2802188	0		&&			
ANR	2802575	RelationalExpression	ap >= aend		2802188	0		>=			
ANR	2802576	Identifier	ap		2802188	0					
ANR	2802577	Identifier	aend		2802188	1					
ANR	2802578	RelationalExpression	bp >= bend		2802188	1		>=			
ANR	2802579	Identifier	bp		2802188	0					
ANR	2802580	Identifier	bend		2802188	1					
ANR	2802581	ReturnStatement	return 0 ;	174:3:4488:4496	2802188	1	True				
ANR	2802582	PrimaryExpression	0		2802188	0					
ANR	2802583	ElseStatement	else		2802188	0					
ANR	2802584	IfStatement	if ( ap >= aend )		2802188	0					
ANR	2802585	Condition	ap >= aend	175:11:4509:4518	2802188	0	True				
ANR	2802586	RelationalExpression	ap >= aend		2802188	0		>=			
ANR	2802587	Identifier	ap		2802188	0					
ANR	2802588	Identifier	aend		2802188	1					
ANR	2802589	ReturnStatement	return - 1 ;	176:3:4524:4533	2802188	1	True				
ANR	2802590	UnaryOperationExpression	- 1		2802188	0					
ANR	2802591	UnaryOperator	-		2802188	0					
ANR	2802592	PrimaryExpression	1		2802188	1					
ANR	2802593	ElseStatement	else		2802188	0					
ANR	2802594	IfStatement	if ( bp >= bend )		2802188	0					
ANR	2802595	Condition	bp >= bend	177:11:4546:4555	2802188	0	True				
ANR	2802596	RelationalExpression	bp >= bend		2802188	0		>=			
ANR	2802597	Identifier	bp		2802188	0					
ANR	2802598	Identifier	bend		2802188	1					
ANR	2802599	ReturnStatement	return 1 ;	178:3:4561:4569	2802188	1	True				
ANR	2802600	PrimaryExpression	1		2802188	0					
ANR	2802601	ReturnType	PHPAPI int		2802188	1					
ANR	2802602	Identifier	strnatcmp_ex		2802188	2					
ANR	2802603	ParameterList	"char const * a , size_t a_len , char const * b , size_t b_len , int fold_case"		2802188	3					
ANR	2802604	Parameter	char const * a	102:24:2837:2849	2802188	0	True				
ANR	2802605	ParameterType	char const *		2802188	0					
ANR	2802606	Identifier	a		2802188	1					
ANR	2802607	Parameter	size_t a_len	102:39:2852:2863	2802188	1	True				
ANR	2802608	ParameterType	size_t		2802188	0					
ANR	2802609	Identifier	a_len		2802188	1					
ANR	2802610	Parameter	char const * b	102:53:2866:2878	2802188	2	True				
ANR	2802611	ParameterType	char const *		2802188	0					
ANR	2802612	Identifier	b		2802188	1					
ANR	2802613	Parameter	size_t b_len	102:68:2881:2892	2802188	3	True				
ANR	2802614	ParameterType	size_t		2802188	0					
ANR	2802615	Identifier	b_len		2802188	1					
ANR	2802616	Parameter	int fold_case	102:82:2895:2907	2802188	4	True				
ANR	2802617	ParameterType	int		2802188	0					
ANR	2802618	Identifier	fold_case		2802188	1					
ANR	2802619	CFGEntryNode	ENTRY		2802188		True				
ANR	2802620	CFGExitNode	EXIT		2802188		True				
ANR	2802621	Symbol	leading		2802188						
ANR	2802622	Symbol	* ++ bp		2802188						
ANR	2802623	Symbol	bp		2802188						
ANR	2802624	Symbol	result		2802188						
ANR	2802625	Symbol	compare_left		2802188						
ANR	2802626	Symbol	compare_right		2802188						
ANR	2802627	Symbol	* ( ap + 1 )		2802188						
ANR	2802628	Symbol	bend		2802188						
ANR	2802629	Symbol	* bp		2802188						
ANR	2802630	Symbol	* ( bp + 1 )		2802188						
ANR	2802631	Symbol	& bp		2802188						
ANR	2802632	Symbol	isdigit		2802188						
ANR	2802633	Symbol	ca		2802188						
ANR	2802634	Symbol	cb		2802188						
ANR	2802635	Symbol	a		2802188						
ANR	2802636	Symbol	b		2802188						
ANR	2802637	Symbol	toupper		2802188						
ANR	2802638	Symbol	fractional		2802188						
ANR	2802639	Symbol	isspace		2802188						
ANR	2802640	Symbol	b_len		2802188						
ANR	2802641	Symbol	* ++ ap		2802188						
ANR	2802642	Symbol	ap		2802188						
ANR	2802643	Symbol	a_len		2802188						
ANR	2802644	Symbol	* ap		2802188						
ANR	2802645	Symbol	aend		2802188						
ANR	2802646	Symbol	& ap		2802188						
ANR	2802647	Symbol	fold_case		2802188						
