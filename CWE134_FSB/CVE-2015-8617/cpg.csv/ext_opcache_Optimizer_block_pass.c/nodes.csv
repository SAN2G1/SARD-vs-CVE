command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1356248	File	data/converged/CVE-2015-8617_php-src/ext_opcache_Optimizer_block_pass.c								
ANR	1356249	Function	zend_optimizer_get_persistent_constant	34:0:1697:2520							
ANR	1356250	FunctionDef	"zend_optimizer_get_persistent_constant (zend_string * name , zval * result , int copy)"		1356249	0					
ANR	1356251	CompoundStatement		35:0:1783:2520	1356249	0					
ANR	1356252	IdentifierDeclStatement	zend_constant * c ;	36:1:1786:1802	1356249	0	True				
ANR	1356253	IdentifierDecl	* c		1356249	0					
ANR	1356254	IdentifierDeclType	zend_constant *		1356249	0					
ANR	1356255	Identifier	c		1356249	1					
ANR	1356256	IdentifierDeclStatement	char * lookup_name ;	37:1:1805:1822	1356249	1	True				
ANR	1356257	IdentifierDecl	* lookup_name		1356249	0					
ANR	1356258	IdentifierDeclType	char *		1356249	0					
ANR	1356259	Identifier	lookup_name		1356249	1					
ANR	1356260	IdentifierDeclStatement	int retval = 1 ;	38:1:1825:1839	1356249	2	True				
ANR	1356261	IdentifierDecl	retval = 1		1356249	0					
ANR	1356262	IdentifierDeclType	int		1356249	0					
ANR	1356263	Identifier	retval		1356249	1					
ANR	1356264	AssignmentExpression	retval = 1		1356249	2		=			
ANR	1356265	Identifier	retval		1356249	0					
ANR	1356266	PrimaryExpression	1		1356249	1					
ANR	1356267	ExpressionStatement	ALLOCA_FLAG ( use_heap )	39:1:1842:1863	1356249	3	True				
ANR	1356268	CallExpression	ALLOCA_FLAG ( use_heap )		1356249	0					
ANR	1356269	Callee	ALLOCA_FLAG		1356249	0					
ANR	1356270	Identifier	ALLOCA_FLAG		1356249	0					
ANR	1356271	ArgumentList	use_heap		1356249	1					
ANR	1356272	Argument	use_heap		1356249	0					
ANR	1356273	Identifier	use_heap		1356249	0					
ANR	1356274	IfStatement	"if ( ( c = zend_hash_find_ptr ( EG ( zend_constants ) , name ) ) == NULL )"		1356249	4					
ANR	1356275	Condition	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , name ) ) == NULL"	41:5:1871:1928	1356249	0	True				
ANR	1356276	EqualityExpression	"( c = zend_hash_find_ptr ( EG ( zend_constants ) , name ) ) == NULL"		1356249	0		==			
ANR	1356277	AssignmentExpression	"c = zend_hash_find_ptr ( EG ( zend_constants ) , name )"		1356249	0		=			
ANR	1356278	Identifier	c		1356249	0					
ANR	1356279	CallExpression	"zend_hash_find_ptr ( EG ( zend_constants ) , name )"		1356249	1					
ANR	1356280	Callee	zend_hash_find_ptr		1356249	0					
ANR	1356281	Identifier	zend_hash_find_ptr		1356249	0					
ANR	1356282	ArgumentList	EG ( zend_constants )		1356249	1					
ANR	1356283	Argument	EG ( zend_constants )		1356249	0					
ANR	1356284	CallExpression	EG ( zend_constants )		1356249	0					
ANR	1356285	Callee	EG		1356249	0					
ANR	1356286	Identifier	EG		1356249	0					
ANR	1356287	ArgumentList	zend_constants		1356249	1					
ANR	1356288	Argument	zend_constants		1356249	0					
ANR	1356289	Identifier	zend_constants		1356249	0					
ANR	1356290	Argument	name		1356249	1					
ANR	1356291	Identifier	name		1356249	0					
ANR	1356292	Identifier	NULL		1356249	1					
ANR	1356293	CompoundStatement		7:65:147:147	1356249	1					
ANR	1356294	ExpressionStatement	lookup_name = DO_ALLOCA ( ZSTR_LEN ( name ) + 1 )	42:2:1935:1978	1356249	0	True				
ANR	1356295	AssignmentExpression	lookup_name = DO_ALLOCA ( ZSTR_LEN ( name ) + 1 )		1356249	0		=			
ANR	1356296	Identifier	lookup_name		1356249	0					
ANR	1356297	CallExpression	DO_ALLOCA ( ZSTR_LEN ( name ) + 1 )		1356249	1					
ANR	1356298	Callee	DO_ALLOCA		1356249	0					
ANR	1356299	Identifier	DO_ALLOCA		1356249	0					
ANR	1356300	ArgumentList	ZSTR_LEN ( name ) + 1		1356249	1					
ANR	1356301	Argument	ZSTR_LEN ( name ) + 1		1356249	0					
ANR	1356302	AdditiveExpression	ZSTR_LEN ( name ) + 1		1356249	0		+			
ANR	1356303	CallExpression	ZSTR_LEN ( name )		1356249	0					
ANR	1356304	Callee	ZSTR_LEN		1356249	0					
ANR	1356305	Identifier	ZSTR_LEN		1356249	0					
ANR	1356306	ArgumentList	name		1356249	1					
ANR	1356307	Argument	name		1356249	0					
ANR	1356308	Identifier	name		1356249	0					
ANR	1356309	PrimaryExpression	1		1356249	1					
ANR	1356310	ExpressionStatement	"memcpy ( lookup_name , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) + 1 )"	43:2:1982:2037	1356249	1	True				
ANR	1356311	CallExpression	"memcpy ( lookup_name , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) + 1 )"		1356249	0					
ANR	1356312	Callee	memcpy		1356249	0					
ANR	1356313	Identifier	memcpy		1356249	0					
ANR	1356314	ArgumentList	lookup_name		1356249	1					
ANR	1356315	Argument	lookup_name		1356249	0					
ANR	1356316	Identifier	lookup_name		1356249	0					
ANR	1356317	Argument	ZSTR_VAL ( name )		1356249	1					
ANR	1356318	CallExpression	ZSTR_VAL ( name )		1356249	0					
ANR	1356319	Callee	ZSTR_VAL		1356249	0					
ANR	1356320	Identifier	ZSTR_VAL		1356249	0					
ANR	1356321	ArgumentList	name		1356249	1					
ANR	1356322	Argument	name		1356249	0					
ANR	1356323	Identifier	name		1356249	0					
ANR	1356324	Argument	ZSTR_LEN ( name ) + 1		1356249	2					
ANR	1356325	AdditiveExpression	ZSTR_LEN ( name ) + 1		1356249	0		+			
ANR	1356326	CallExpression	ZSTR_LEN ( name )		1356249	0					
ANR	1356327	Callee	ZSTR_LEN		1356249	0					
ANR	1356328	Identifier	ZSTR_LEN		1356249	0					
ANR	1356329	ArgumentList	name		1356249	1					
ANR	1356330	Argument	name		1356249	0					
ANR	1356331	Identifier	name		1356249	0					
ANR	1356332	PrimaryExpression	1		1356249	1					
ANR	1356333	ExpressionStatement	"zend_str_tolower ( lookup_name , ZSTR_LEN ( name ) )"	44:2:2041:2086	1356249	2	True				
ANR	1356334	CallExpression	"zend_str_tolower ( lookup_name , ZSTR_LEN ( name ) )"		1356249	0					
ANR	1356335	Callee	zend_str_tolower		1356249	0					
ANR	1356336	Identifier	zend_str_tolower		1356249	0					
ANR	1356337	ArgumentList	lookup_name		1356249	1					
ANR	1356338	Argument	lookup_name		1356249	0					
ANR	1356339	Identifier	lookup_name		1356249	0					
ANR	1356340	Argument	ZSTR_LEN ( name )		1356249	1					
ANR	1356341	CallExpression	ZSTR_LEN ( name )		1356249	0					
ANR	1356342	Callee	ZSTR_LEN		1356249	0					
ANR	1356343	Identifier	ZSTR_LEN		1356249	0					
ANR	1356344	ArgumentList	name		1356249	1					
ANR	1356345	Argument	name		1356249	0					
ANR	1356346	Identifier	name		1356249	0					
ANR	1356347	IfStatement	"if ( ( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lookup_name , ZSTR_LEN ( name ) ) ) != NULL )"		1356249	3					
ANR	1356348	Condition	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lookup_name , ZSTR_LEN ( name ) ) ) != NULL"	46:6:2095:2179	1356249	0	True				
ANR	1356349	EqualityExpression	"( c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lookup_name , ZSTR_LEN ( name ) ) ) != NULL"		1356249	0		!=			
ANR	1356350	AssignmentExpression	"c = zend_hash_str_find_ptr ( EG ( zend_constants ) , lookup_name , ZSTR_LEN ( name ) )"		1356249	0		=			
ANR	1356351	Identifier	c		1356249	0					
ANR	1356352	CallExpression	"zend_hash_str_find_ptr ( EG ( zend_constants ) , lookup_name , ZSTR_LEN ( name ) )"		1356249	1					
ANR	1356353	Callee	zend_hash_str_find_ptr		1356249	0					
ANR	1356354	Identifier	zend_hash_str_find_ptr		1356249	0					
ANR	1356355	ArgumentList	EG ( zend_constants )		1356249	1					
ANR	1356356	Argument	EG ( zend_constants )		1356249	0					
ANR	1356357	CallExpression	EG ( zend_constants )		1356249	0					
ANR	1356358	Callee	EG		1356249	0					
ANR	1356359	Identifier	EG		1356249	0					
ANR	1356360	ArgumentList	zend_constants		1356249	1					
ANR	1356361	Argument	zend_constants		1356249	0					
ANR	1356362	Identifier	zend_constants		1356249	0					
ANR	1356363	Argument	lookup_name		1356249	1					
ANR	1356364	Identifier	lookup_name		1356249	0					
ANR	1356365	Argument	ZSTR_LEN ( name )		1356249	2					
ANR	1356366	CallExpression	ZSTR_LEN ( name )		1356249	0					
ANR	1356367	Callee	ZSTR_LEN		1356249	0					
ANR	1356368	Identifier	ZSTR_LEN		1356249	0					
ANR	1356369	ArgumentList	name		1356249	1					
ANR	1356370	Argument	name		1356249	0					
ANR	1356371	Identifier	name		1356249	0					
ANR	1356372	Identifier	NULL		1356249	1					
ANR	1356373	CompoundStatement		12:93:398:398	1356249	1					
ANR	1356374	IfStatement	if ( ! ( c -> flags & CONST_CT_SUBST ) || ( c -> flags & CONST_CS ) )		1356249	0					
ANR	1356375	Condition	! ( c -> flags & CONST_CT_SUBST ) || ( c -> flags & CONST_CS )	47:7:2191:2243	1356249	0	True				
ANR	1356376	OrExpression	! ( c -> flags & CONST_CT_SUBST ) || ( c -> flags & CONST_CS )		1356249	0		||			
ANR	1356377	UnaryOperationExpression	! ( c -> flags & CONST_CT_SUBST )		1356249	0					
ANR	1356378	UnaryOperator	!		1356249	0					
ANR	1356379	BitAndExpression	c -> flags & CONST_CT_SUBST		1356249	1		&			
ANR	1356380	PtrMemberAccess	c -> flags		1356249	0					
ANR	1356381	Identifier	c		1356249	0					
ANR	1356382	Identifier	flags		1356249	1					
ANR	1356383	Identifier	CONST_CT_SUBST		1356249	1					
ANR	1356384	BitAndExpression	c -> flags & CONST_CS		1356249	1		&			
ANR	1356385	PtrMemberAccess	c -> flags		1356249	0					
ANR	1356386	Identifier	c		1356249	0					
ANR	1356387	Identifier	flags		1356249	1					
ANR	1356388	Identifier	CONST_CS		1356249	1					
ANR	1356389	CompoundStatement		13:62:462:462	1356249	1					
ANR	1356390	ExpressionStatement	retval = 0	48:4:2252:2262	1356249	0	True				
ANR	1356391	AssignmentExpression	retval = 0		1356249	0		=			
ANR	1356392	Identifier	retval		1356249	0					
ANR	1356393	PrimaryExpression	0		1356249	1					
ANR	1356394	ElseStatement	else		1356249	0					
ANR	1356395	CompoundStatement		16:9:494:494	1356249	0					
ANR	1356396	ExpressionStatement	retval = 0	51:3:2283:2293	1356249	0	True				
ANR	1356397	AssignmentExpression	retval = 0		1356249	0		=			
ANR	1356398	Identifier	retval		1356249	0					
ANR	1356399	PrimaryExpression	0		1356249	1					
ANR	1356400	ExpressionStatement	FREE_ALLOCA ( lookup_name )	53:2:2301:2325	1356249	4	True				
ANR	1356401	CallExpression	FREE_ALLOCA ( lookup_name )		1356249	0					
ANR	1356402	Callee	FREE_ALLOCA		1356249	0					
ANR	1356403	Identifier	FREE_ALLOCA		1356249	0					
ANR	1356404	ArgumentList	lookup_name		1356249	1					
ANR	1356405	Argument	lookup_name		1356249	0					
ANR	1356406	Identifier	lookup_name		1356249	0					
ANR	1356407	IfStatement	if ( retval )		1356249	5					
ANR	1356408	Condition	retval	56:5:2336:2341	1356249	0	True				
ANR	1356409	Identifier	retval		1356249	0					
ANR	1356410	CompoundStatement		22:13:560:560	1356249	1					
ANR	1356411	IfStatement	if ( c -> flags & CONST_PERSISTENT )		1356249	0					
ANR	1356412	Condition	c -> flags & CONST_PERSISTENT	57:6:2352:2378	1356249	0	True				
ANR	1356413	BitAndExpression	c -> flags & CONST_PERSISTENT		1356249	0		&			
ANR	1356414	PtrMemberAccess	c -> flags		1356249	0					
ANR	1356415	Identifier	c		1356249	0					
ANR	1356416	Identifier	flags		1356249	1					
ANR	1356417	Identifier	CONST_PERSISTENT		1356249	1					
ANR	1356418	CompoundStatement		23:35:597:597	1356249	1					
ANR	1356419	ExpressionStatement	"ZVAL_COPY_VALUE ( result , & c -> value )"	58:3:2386:2420	1356249	0	True				
ANR	1356420	CallExpression	"ZVAL_COPY_VALUE ( result , & c -> value )"		1356249	0					
ANR	1356421	Callee	ZVAL_COPY_VALUE		1356249	0					
ANR	1356422	Identifier	ZVAL_COPY_VALUE		1356249	0					
ANR	1356423	ArgumentList	result		1356249	1					
ANR	1356424	Argument	result		1356249	0					
ANR	1356425	Identifier	result		1356249	0					
ANR	1356426	Argument	& c -> value		1356249	1					
ANR	1356427	UnaryOperationExpression	& c -> value		1356249	0					
ANR	1356428	UnaryOperator	&		1356249	0					
ANR	1356429	PtrMemberAccess	c -> value		1356249	1					
ANR	1356430	Identifier	c		1356249	0					
ANR	1356431	Identifier	value		1356249	1					
ANR	1356432	IfStatement	if ( copy )		1356249	1					
ANR	1356433	Condition	copy	59:7:2429:2432	1356249	0	True				
ANR	1356434	Identifier	copy		1356249	0					
ANR	1356435	CompoundStatement		25:13:651:651	1356249	1					
ANR	1356436	ExpressionStatement	zval_copy_ctor ( result )	60:4:2441:2463	1356249	0	True				
ANR	1356437	CallExpression	zval_copy_ctor ( result )		1356249	0					
ANR	1356438	Callee	zval_copy_ctor		1356249	0					
ANR	1356439	Identifier	zval_copy_ctor		1356249	0					
ANR	1356440	ArgumentList	result		1356249	1					
ANR	1356441	Argument	result		1356249	0					
ANR	1356442	Identifier	result		1356249	0					
ANR	1356443	ElseStatement	else		1356249	0					
ANR	1356444	CompoundStatement		28:9:695:695	1356249	0					
ANR	1356445	ExpressionStatement	retval = 0	63:3:2484:2494	1356249	0	True				
ANR	1356446	AssignmentExpression	retval = 0		1356249	0		=			
ANR	1356447	Identifier	retval		1356249	0					
ANR	1356448	PrimaryExpression	0		1356249	1					
ANR	1356449	ReturnStatement	return retval ;	67:1:2505:2518	1356249	6	True				
ANR	1356450	Identifier	retval		1356249	0					
ANR	1356451	ReturnType	int		1356249	1					
ANR	1356452	Identifier	zend_optimizer_get_persistent_constant		1356249	2					
ANR	1356453	ParameterList	"zend_string * name , zval * result , int copy"		1356249	3					
ANR	1356454	Parameter	zend_string * name	34:43:1740:1756	1356249	0	True				
ANR	1356455	ParameterType	zend_string *		1356249	0					
ANR	1356456	Identifier	name		1356249	1					
ANR	1356457	Parameter	zval * result	34:62:1759:1770	1356249	1	True				
ANR	1356458	ParameterType	zval *		1356249	0					
ANR	1356459	Identifier	result		1356249	1					
ANR	1356460	Parameter	int copy	34:76:1773:1780	1356249	2	True				
ANR	1356461	ParameterType	int		1356249	0					
ANR	1356462	Identifier	copy		1356249	1					
ANR	1356463	CFGEntryNode	ENTRY		1356249		True				
ANR	1356464	CFGExitNode	EXIT		1356249		True				
ANR	1356465	Symbol	CONST_CT_SUBST		1356249						
ANR	1356466	Symbol	EG		1356249						
ANR	1356467	Symbol	CONST_CS		1356249						
ANR	1356468	Symbol	c		1356249						
ANR	1356469	Symbol	NULL		1356249						
ANR	1356470	Symbol	c -> flags		1356249						
ANR	1356471	Symbol	* c		1356249						
ANR	1356472	Symbol	retval		1356249						
ANR	1356473	Symbol	ZSTR_VAL		1356249						
ANR	1356474	Symbol	result		1356249						
ANR	1356475	Symbol	& c -> value		1356249						
ANR	1356476	Symbol	lookup_name		1356249						
ANR	1356477	Symbol	zend_constants		1356249						
ANR	1356478	Symbol	name		1356249						
ANR	1356479	Symbol	ZSTR_LEN		1356249						
ANR	1356480	Symbol	DO_ALLOCA		1356249						
ANR	1356481	Symbol	zend_hash_str_find_ptr		1356249						
ANR	1356482	Symbol	copy		1356249						
ANR	1356483	Symbol	CONST_PERSISTENT		1356249						
ANR	1356484	Symbol	zend_hash_find_ptr		1356249						
ANR	1356485	Symbol	use_heap		1356249						
ANR	1356486	Function	print_block	73:0:2605:3497							
ANR	1356487	FunctionDef	"print_block (zend_code_block * block , zend_op * opcodes , char * txt)"		1356486	0					
ANR	1356488	CompoundStatement		74:0:2689:3497	1356486	0					
ANR	1356489	ExpressionStatement	"fprintf ( stderr , ""%sBlock: %d-%d (%d)"" , txt , block -> start_opline - opcodes , block -> start_opline - opcodes + block -> len - 1 , block -> len )"	75:1:2692:2826	1356486	0	True				
ANR	1356490	CallExpression	"fprintf ( stderr , ""%sBlock: %d-%d (%d)"" , txt , block -> start_opline - opcodes , block -> start_opline - opcodes + block -> len - 1 , block -> len )"		1356486	0					
ANR	1356491	Callee	fprintf		1356486	0					
ANR	1356492	Identifier	fprintf		1356486	0					
ANR	1356493	ArgumentList	stderr		1356486	1					
ANR	1356494	Argument	stderr		1356486	0					
ANR	1356495	Identifier	stderr		1356486	0					
ANR	1356496	Argument	"""%sBlock: %d-%d (%d)"""		1356486	1					
ANR	1356497	PrimaryExpression	"""%sBlock: %d-%d (%d)"""		1356486	0					
ANR	1356498	Argument	txt		1356486	2					
ANR	1356499	Identifier	txt		1356486	0					
ANR	1356500	Argument	block -> start_opline - opcodes		1356486	3					
ANR	1356501	AdditiveExpression	block -> start_opline - opcodes		1356486	0		-			
ANR	1356502	PtrMemberAccess	block -> start_opline		1356486	0					
ANR	1356503	Identifier	block		1356486	0					
ANR	1356504	Identifier	start_opline		1356486	1					
ANR	1356505	Identifier	opcodes		1356486	1					
ANR	1356506	Argument	block -> start_opline - opcodes + block -> len - 1		1356486	4					
ANR	1356507	AdditiveExpression	block -> start_opline - opcodes + block -> len - 1		1356486	0		-			
ANR	1356508	PtrMemberAccess	block -> start_opline		1356486	0					
ANR	1356509	Identifier	block		1356486	0					
ANR	1356510	Identifier	start_opline		1356486	1					
ANR	1356511	AdditiveExpression	opcodes + block -> len - 1		1356486	1		+			
ANR	1356512	Identifier	opcodes		1356486	0					
ANR	1356513	AdditiveExpression	block -> len - 1		1356486	1		-			
ANR	1356514	PtrMemberAccess	block -> len		1356486	0					
ANR	1356515	Identifier	block		1356486	0					
ANR	1356516	Identifier	len		1356486	1					
ANR	1356517	PrimaryExpression	1		1356486	1					
ANR	1356518	Argument	block -> len		1356486	5					
ANR	1356519	PtrMemberAccess	block -> len		1356486	0					
ANR	1356520	Identifier	block		1356486	0					
ANR	1356521	Identifier	len		1356486	1					
ANR	1356522	IfStatement	if ( ! block -> access )		1356486	1					
ANR	1356523	Condition	! block -> access	76:5:2833:2846	1356486	0	True				
ANR	1356524	UnaryOperationExpression	! block -> access		1356486	0					
ANR	1356525	UnaryOperator	!		1356486	0					
ANR	1356526	PtrMemberAccess	block -> access		1356486	1					
ANR	1356527	Identifier	block		1356486	0					
ANR	1356528	Identifier	access		1356486	1					
ANR	1356529	CompoundStatement		3:21:159:159	1356486	1					
ANR	1356530	ExpressionStatement	"fprintf ( stderr , "" unused"" )"	77:2:2853:2879	1356486	0	True				
ANR	1356531	CallExpression	"fprintf ( stderr , "" unused"" )"		1356486	0					
ANR	1356532	Callee	fprintf		1356486	0					
ANR	1356533	Identifier	fprintf		1356486	0					
ANR	1356534	ArgumentList	stderr		1356486	1					
ANR	1356535	Argument	stderr		1356486	0					
ANR	1356536	Identifier	stderr		1356486	0					
ANR	1356537	Argument	""" unused"""		1356486	1					
ANR	1356538	PrimaryExpression	""" unused"""		1356486	0					
ANR	1356539	IfStatement	if ( block -> op1_to )		1356486	2					
ANR	1356540	Condition	block -> op1_to	79:5:2889:2901	1356486	0	True				
ANR	1356541	PtrMemberAccess	block -> op1_to		1356486	0					
ANR	1356542	Identifier	block		1356486	0					
ANR	1356543	Identifier	op1_to		1356486	1					
ANR	1356544	CompoundStatement		6:20:214:214	1356486	1					
ANR	1356545	ExpressionStatement	"fprintf ( stderr , "" 1: %d"" , block -> op1_to -> start_opline - opcodes )"	80:2:2908:2972	1356486	0	True				
ANR	1356546	CallExpression	"fprintf ( stderr , "" 1: %d"" , block -> op1_to -> start_opline - opcodes )"		1356486	0					
ANR	1356547	Callee	fprintf		1356486	0					
ANR	1356548	Identifier	fprintf		1356486	0					
ANR	1356549	ArgumentList	stderr		1356486	1					
ANR	1356550	Argument	stderr		1356486	0					
ANR	1356551	Identifier	stderr		1356486	0					
ANR	1356552	Argument	""" 1: %d"""		1356486	1					
ANR	1356553	PrimaryExpression	""" 1: %d"""		1356486	0					
ANR	1356554	Argument	block -> op1_to -> start_opline - opcodes		1356486	2					
ANR	1356555	AdditiveExpression	block -> op1_to -> start_opline - opcodes		1356486	0		-			
ANR	1356556	PtrMemberAccess	block -> op1_to -> start_opline		1356486	0					
ANR	1356557	PtrMemberAccess	block -> op1_to		1356486	0					
ANR	1356558	Identifier	block		1356486	0					
ANR	1356559	Identifier	op1_to		1356486	1					
ANR	1356560	Identifier	start_opline		1356486	1					
ANR	1356561	Identifier	opcodes		1356486	1					
ANR	1356562	IfStatement	if ( block -> op2_to )		1356486	3					
ANR	1356563	Condition	block -> op2_to	82:5:2982:2994	1356486	0	True				
ANR	1356564	PtrMemberAccess	block -> op2_to		1356486	0					
ANR	1356565	Identifier	block		1356486	0					
ANR	1356566	Identifier	op2_to		1356486	1					
ANR	1356567	CompoundStatement		9:20:307:307	1356486	1					
ANR	1356568	ExpressionStatement	"fprintf ( stderr , "" 2: %d"" , block -> op2_to -> start_opline - opcodes )"	83:2:3001:3065	1356486	0	True				
ANR	1356569	CallExpression	"fprintf ( stderr , "" 2: %d"" , block -> op2_to -> start_opline - opcodes )"		1356486	0					
ANR	1356570	Callee	fprintf		1356486	0					
ANR	1356571	Identifier	fprintf		1356486	0					
ANR	1356572	ArgumentList	stderr		1356486	1					
ANR	1356573	Argument	stderr		1356486	0					
ANR	1356574	Identifier	stderr		1356486	0					
ANR	1356575	Argument	""" 2: %d"""		1356486	1					
ANR	1356576	PrimaryExpression	""" 2: %d"""		1356486	0					
ANR	1356577	Argument	block -> op2_to -> start_opline - opcodes		1356486	2					
ANR	1356578	AdditiveExpression	block -> op2_to -> start_opline - opcodes		1356486	0		-			
ANR	1356579	PtrMemberAccess	block -> op2_to -> start_opline		1356486	0					
ANR	1356580	PtrMemberAccess	block -> op2_to		1356486	0					
ANR	1356581	Identifier	block		1356486	0					
ANR	1356582	Identifier	op2_to		1356486	1					
ANR	1356583	Identifier	start_opline		1356486	1					
ANR	1356584	Identifier	opcodes		1356486	1					
ANR	1356585	IfStatement	if ( block -> ext_to )		1356486	4					
ANR	1356586	Condition	block -> ext_to	85:5:3075:3087	1356486	0	True				
ANR	1356587	PtrMemberAccess	block -> ext_to		1356486	0					
ANR	1356588	Identifier	block		1356486	0					
ANR	1356589	Identifier	ext_to		1356486	1					
ANR	1356590	CompoundStatement		12:20:400:400	1356486	1					
ANR	1356591	ExpressionStatement	"fprintf ( stderr , "" e: %d"" , block -> ext_to -> start_opline - opcodes )"	86:2:3094:3158	1356486	0	True				
ANR	1356592	CallExpression	"fprintf ( stderr , "" e: %d"" , block -> ext_to -> start_opline - opcodes )"		1356486	0					
ANR	1356593	Callee	fprintf		1356486	0					
ANR	1356594	Identifier	fprintf		1356486	0					
ANR	1356595	ArgumentList	stderr		1356486	1					
ANR	1356596	Argument	stderr		1356486	0					
ANR	1356597	Identifier	stderr		1356486	0					
ANR	1356598	Argument	""" e: %d"""		1356486	1					
ANR	1356599	PrimaryExpression	""" e: %d"""		1356486	0					
ANR	1356600	Argument	block -> ext_to -> start_opline - opcodes		1356486	2					
ANR	1356601	AdditiveExpression	block -> ext_to -> start_opline - opcodes		1356486	0		-			
ANR	1356602	PtrMemberAccess	block -> ext_to -> start_opline		1356486	0					
ANR	1356603	PtrMemberAccess	block -> ext_to		1356486	0					
ANR	1356604	Identifier	block		1356486	0					
ANR	1356605	Identifier	ext_to		1356486	1					
ANR	1356606	Identifier	start_opline		1356486	1					
ANR	1356607	Identifier	opcodes		1356486	1					
ANR	1356608	IfStatement	if ( block -> follow_to )		1356486	5					
ANR	1356609	Condition	block -> follow_to	88:5:3168:3183	1356486	0	True				
ANR	1356610	PtrMemberAccess	block -> follow_to		1356486	0					
ANR	1356611	Identifier	block		1356486	0					
ANR	1356612	Identifier	follow_to		1356486	1					
ANR	1356613	CompoundStatement		15:23:496:496	1356486	1					
ANR	1356614	ExpressionStatement	"fprintf ( stderr , "" f: %d"" , block -> follow_to -> start_opline - opcodes )"	89:2:3190:3257	1356486	0	True				
ANR	1356615	CallExpression	"fprintf ( stderr , "" f: %d"" , block -> follow_to -> start_opline - opcodes )"		1356486	0					
ANR	1356616	Callee	fprintf		1356486	0					
ANR	1356617	Identifier	fprintf		1356486	0					
ANR	1356618	ArgumentList	stderr		1356486	1					
ANR	1356619	Argument	stderr		1356486	0					
ANR	1356620	Identifier	stderr		1356486	0					
ANR	1356621	Argument	""" f: %d"""		1356486	1					
ANR	1356622	PrimaryExpression	""" f: %d"""		1356486	0					
ANR	1356623	Argument	block -> follow_to -> start_opline - opcodes		1356486	2					
ANR	1356624	AdditiveExpression	block -> follow_to -> start_opline - opcodes		1356486	0		-			
ANR	1356625	PtrMemberAccess	block -> follow_to -> start_opline		1356486	0					
ANR	1356626	PtrMemberAccess	block -> follow_to		1356486	0					
ANR	1356627	Identifier	block		1356486	0					
ANR	1356628	Identifier	follow_to		1356486	1					
ANR	1356629	Identifier	start_opline		1356486	1					
ANR	1356630	Identifier	opcodes		1356486	1					
ANR	1356631	IfStatement	if ( block -> sources )		1356486	6					
ANR	1356632	Condition	block -> sources	92:5:3268:3281	1356486	0	True				
ANR	1356633	PtrMemberAccess	block -> sources		1356486	0					
ANR	1356634	Identifier	block		1356486	0					
ANR	1356635	Identifier	sources		1356486	1					
ANR	1356636	CompoundStatement		20:2:598:636	1356486	1					
ANR	1356637	IdentifierDeclStatement	zend_block_source * bs = block -> sources ;	93:2:3288:3326	1356486	0	True				
ANR	1356638	IdentifierDecl	* bs = block -> sources		1356486	0					
ANR	1356639	IdentifierDeclType	zend_block_source *		1356486	0					
ANR	1356640	Identifier	bs		1356486	1					
ANR	1356641	AssignmentExpression	* bs = block -> sources		1356486	2		=			
ANR	1356642	Identifier	bs		1356486	0					
ANR	1356643	PtrMemberAccess	block -> sources		1356486	1					
ANR	1356644	Identifier	block		1356486	0					
ANR	1356645	Identifier	sources		1356486	1					
ANR	1356646	ExpressionStatement	"fprintf ( stderr , "" s:"" )"	94:2:3330:3352	1356486	1	True				
ANR	1356647	CallExpression	"fprintf ( stderr , "" s:"" )"		1356486	0					
ANR	1356648	Callee	fprintf		1356486	0					
ANR	1356649	Identifier	fprintf		1356486	0					
ANR	1356650	ArgumentList	stderr		1356486	1					
ANR	1356651	Argument	stderr		1356486	0					
ANR	1356652	Identifier	stderr		1356486	0					
ANR	1356653	Argument	""" s:"""		1356486	1					
ANR	1356654	PrimaryExpression	""" s:"""		1356486	0					
ANR	1356655	WhileStatement	while ( bs )		1356486	2					
ANR	1356656	Condition	bs	95:9:3363:3364	1356486	0	True				
ANR	1356657	Identifier	bs		1356486	0					
ANR	1356658	CompoundStatement		22:13:677:677	1356486	1					
ANR	1356659	ExpressionStatement	"fprintf ( stderr , "" %d"" , bs -> from -> start_opline - opcodes )"	96:3:3372:3428	1356486	0	True				
ANR	1356660	CallExpression	"fprintf ( stderr , "" %d"" , bs -> from -> start_opline - opcodes )"		1356486	0					
ANR	1356661	Callee	fprintf		1356486	0					
ANR	1356662	Identifier	fprintf		1356486	0					
ANR	1356663	ArgumentList	stderr		1356486	1					
ANR	1356664	Argument	stderr		1356486	0					
ANR	1356665	Identifier	stderr		1356486	0					
ANR	1356666	Argument	""" %d"""		1356486	1					
ANR	1356667	PrimaryExpression	""" %d"""		1356486	0					
ANR	1356668	Argument	bs -> from -> start_opline - opcodes		1356486	2					
ANR	1356669	AdditiveExpression	bs -> from -> start_opline - opcodes		1356486	0		-			
ANR	1356670	PtrMemberAccess	bs -> from -> start_opline		1356486	0					
ANR	1356671	PtrMemberAccess	bs -> from		1356486	0					
ANR	1356672	Identifier	bs		1356486	0					
ANR	1356673	Identifier	from		1356486	1					
ANR	1356674	Identifier	start_opline		1356486	1					
ANR	1356675	Identifier	opcodes		1356486	1					
ANR	1356676	ExpressionStatement	bs = bs -> next	97:3:3433:3446	1356486	1	True				
ANR	1356677	AssignmentExpression	bs = bs -> next		1356486	0		=			
ANR	1356678	Identifier	bs		1356486	0					
ANR	1356679	PtrMemberAccess	bs -> next		1356486	1					
ANR	1356680	Identifier	bs		1356486	0					
ANR	1356681	Identifier	next		1356486	1					
ANR	1356682	ExpressionStatement	"fprintf ( stderr , ""\\n"" )"	101:1:3457:3478	1356486	7	True				
ANR	1356683	CallExpression	"fprintf ( stderr , ""\\n"" )"		1356486	0					
ANR	1356684	Callee	fprintf		1356486	0					
ANR	1356685	Identifier	fprintf		1356486	0					
ANR	1356686	ArgumentList	stderr		1356486	1					
ANR	1356687	Argument	stderr		1356486	0					
ANR	1356688	Identifier	stderr		1356486	0					
ANR	1356689	Argument	"""\\n"""		1356486	1					
ANR	1356690	PrimaryExpression	"""\\n"""		1356486	0					
ANR	1356691	ExpressionStatement	fflush ( stderr )	102:1:3481:3495	1356486	8	True				
ANR	1356692	CallExpression	fflush ( stderr )		1356486	0					
ANR	1356693	Callee	fflush		1356486	0					
ANR	1356694	Identifier	fflush		1356486	0					
ANR	1356695	ArgumentList	stderr		1356486	1					
ANR	1356696	Argument	stderr		1356486	0					
ANR	1356697	Identifier	stderr		1356486	0					
ANR	1356698	ReturnType	static inline void		1356486	1					
ANR	1356699	Identifier	print_block		1356486	2					
ANR	1356700	ParameterList	"zend_code_block * block , zend_op * opcodes , char * txt"		1356486	3					
ANR	1356701	Parameter	zend_code_block * block	73:31:2636:2657	1356486	0	True				
ANR	1356702	ParameterType	zend_code_block *		1356486	0					
ANR	1356703	Identifier	block		1356486	1					
ANR	1356704	Parameter	zend_op * opcodes	73:55:2660:2675	1356486	1	True				
ANR	1356705	ParameterType	zend_op *		1356486	0					
ANR	1356706	Identifier	opcodes		1356486	1					
ANR	1356707	Parameter	char * txt	73:73:2678:2686	1356486	2	True				
ANR	1356708	ParameterType	char *		1356486	0					
ANR	1356709	Identifier	txt		1356486	1					
ANR	1356710	CFGEntryNode	ENTRY		1356486		True				
ANR	1356711	CFGExitNode	EXIT		1356486		True				
ANR	1356712	Symbol	* block -> op1_to		1356486						
ANR	1356713	Symbol	block -> ext_to		1356486						
ANR	1356714	Symbol	block -> sources		1356486						
ANR	1356715	Symbol	bs -> next		1356486						
ANR	1356716	Symbol	bs		1356486						
ANR	1356717	Symbol	bs -> from		1356486						
ANR	1356718	Symbol	* bs		1356486						
ANR	1356719	Symbol	* bs -> from		1356486						
ANR	1356720	Symbol	block		1356486						
ANR	1356721	Symbol	block -> op2_to		1356486						
ANR	1356722	Symbol	block -> ext_to -> start_opline		1356486						
ANR	1356723	Symbol	stderr		1356486						
ANR	1356724	Symbol	* block -> ext_to		1356486						
ANR	1356725	Symbol	block -> follow_to		1356486						
ANR	1356726	Symbol	block -> len		1356486						
ANR	1356727	Symbol	block -> op2_to -> start_opline		1356486						
ANR	1356728	Symbol	block -> op1_to -> start_opline		1356486						
ANR	1356729	Symbol	* block		1356486						
ANR	1356730	Symbol	block -> start_opline		1356486						
ANR	1356731	Symbol	txt		1356486						
ANR	1356732	Symbol	block -> follow_to -> start_opline		1356486						
ANR	1356733	Symbol	bs -> from -> start_opline		1356486						
ANR	1356734	Symbol	block -> access		1356486						
ANR	1356735	Symbol	* block -> follow_to		1356486						
ANR	1356736	Symbol	* * block		1356486						
ANR	1356737	Symbol	* block -> op2_to		1356486						
ANR	1356738	Symbol	opcodes		1356486						
ANR	1356739	Symbol	block -> op1_to		1356486						
ANR	1356740	Symbol	* * bs		1356486						
ANR	1356741	Function	find_code_blocks	113:0:3820:11702							
ANR	1356742	FunctionDef	"find_code_blocks (zend_op_array * op_array , zend_cfg * cfg , zend_optimizer_ctx * ctx)"		1356741	0					
ANR	1356743	CompoundStatement		114:0:3913:11702	1356741	0					
ANR	1356744	IdentifierDeclStatement	zend_op * opline ;	115:1:3916:3931	1356741	0	True				
ANR	1356745	IdentifierDecl	* opline		1356741	0					
ANR	1356746	IdentifierDeclType	zend_op *		1356741	0					
ANR	1356747	Identifier	opline		1356741	1					
ANR	1356748	IdentifierDeclStatement	zend_op * end = op_array -> opcodes + op_array -> last ;	116:1:3934:3983	1356741	1	True				
ANR	1356749	IdentifierDecl	* end = op_array -> opcodes + op_array -> last		1356741	0					
ANR	1356750	IdentifierDeclType	zend_op *		1356741	0					
ANR	1356751	Identifier	end		1356741	1					
ANR	1356752	AssignmentExpression	* end = op_array -> opcodes + op_array -> last		1356741	2		=			
ANR	1356753	Identifier	end		1356741	0					
ANR	1356754	AdditiveExpression	op_array -> opcodes + op_array -> last		1356741	1		+			
ANR	1356755	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1356756	Identifier	op_array		1356741	0					
ANR	1356757	Identifier	opcodes		1356741	1					
ANR	1356758	PtrMemberAccess	op_array -> last		1356741	1					
ANR	1356759	Identifier	op_array		1356741	0					
ANR	1356760	Identifier	last		1356741	1					
ANR	1356761	IdentifierDeclStatement	"zend_code_block * blocks , * cur_block ;"	117:1:3986:4021	1356741	2	True				
ANR	1356762	IdentifierDecl	* blocks		1356741	0					
ANR	1356763	IdentifierDeclType	zend_code_block *		1356741	0					
ANR	1356764	Identifier	blocks		1356741	1					
ANR	1356765	IdentifierDecl	* cur_block		1356741	1					
ANR	1356766	IdentifierDeclType	zend_code_block *		1356741	0					
ANR	1356767	Identifier	cur_block		1356741	1					
ANR	1356768	IdentifierDeclStatement	uint32_t opno = 0 ;	118:1:4024:4041	1356741	3	True				
ANR	1356769	IdentifierDecl	opno = 0		1356741	0					
ANR	1356770	IdentifierDeclType	uint32_t		1356741	0					
ANR	1356771	Identifier	opno		1356741	1					
ANR	1356772	AssignmentExpression	opno = 0		1356741	2		=			
ANR	1356773	Identifier	opno		1356741	0					
ANR	1356774	PrimaryExpression	0		1356741	1					
ANR	1356775	ExpressionStatement	"memset ( cfg , 0 , sizeof ( zend_cfg ) )"	120:1:4045:4077	1356741	4	True				
ANR	1356776	CallExpression	"memset ( cfg , 0 , sizeof ( zend_cfg ) )"		1356741	0					
ANR	1356777	Callee	memset		1356741	0					
ANR	1356778	Identifier	memset		1356741	0					
ANR	1356779	ArgumentList	cfg		1356741	1					
ANR	1356780	Argument	cfg		1356741	0					
ANR	1356781	Identifier	cfg		1356741	0					
ANR	1356782	Argument	0		1356741	1					
ANR	1356783	PrimaryExpression	0		1356741	0					
ANR	1356784	Argument	sizeof ( zend_cfg )		1356741	2					
ANR	1356785	SizeofExpression	sizeof ( zend_cfg )		1356741	0					
ANR	1356786	Sizeof	sizeof		1356741	0					
ANR	1356787	SizeofOperand	zend_cfg		1356741	1					
ANR	1356788	ExpressionStatement	"blocks = cfg -> blocks = zend_arena_calloc ( & ctx -> arena , op_array -> last + 2 , sizeof ( zend_code_block ) )"	121:1:4080:4178	1356741	5	True				
ANR	1356789	AssignmentExpression	"blocks = cfg -> blocks = zend_arena_calloc ( & ctx -> arena , op_array -> last + 2 , sizeof ( zend_code_block ) )"		1356741	0		=			
ANR	1356790	Identifier	blocks		1356741	0					
ANR	1356791	AssignmentExpression	"cfg -> blocks = zend_arena_calloc ( & ctx -> arena , op_array -> last + 2 , sizeof ( zend_code_block ) )"		1356741	1		=			
ANR	1356792	PtrMemberAccess	cfg -> blocks		1356741	0					
ANR	1356793	Identifier	cfg		1356741	0					
ANR	1356794	Identifier	blocks		1356741	1					
ANR	1356795	CallExpression	"zend_arena_calloc ( & ctx -> arena , op_array -> last + 2 , sizeof ( zend_code_block ) )"		1356741	1					
ANR	1356796	Callee	zend_arena_calloc		1356741	0					
ANR	1356797	Identifier	zend_arena_calloc		1356741	0					
ANR	1356798	ArgumentList	& ctx -> arena		1356741	1					
ANR	1356799	Argument	& ctx -> arena		1356741	0					
ANR	1356800	UnaryOperationExpression	& ctx -> arena		1356741	0					
ANR	1356801	UnaryOperator	&		1356741	0					
ANR	1356802	PtrMemberAccess	ctx -> arena		1356741	1					
ANR	1356803	Identifier	ctx		1356741	0					
ANR	1356804	Identifier	arena		1356741	1					
ANR	1356805	Argument	op_array -> last + 2		1356741	1					
ANR	1356806	AdditiveExpression	op_array -> last + 2		1356741	0		+			
ANR	1356807	PtrMemberAccess	op_array -> last		1356741	0					
ANR	1356808	Identifier	op_array		1356741	0					
ANR	1356809	Identifier	last		1356741	1					
ANR	1356810	PrimaryExpression	2		1356741	1					
ANR	1356811	Argument	sizeof ( zend_code_block )		1356741	2					
ANR	1356812	SizeofExpression	sizeof ( zend_code_block )		1356741	0					
ANR	1356813	Sizeof	sizeof		1356741	0					
ANR	1356814	SizeofOperand	zend_code_block		1356741	1					
ANR	1356815	ExpressionStatement	opline = op_array -> opcodes	122:1:4181:4207	1356741	6	True				
ANR	1356816	AssignmentExpression	opline = op_array -> opcodes		1356741	0		=			
ANR	1356817	Identifier	opline		1356741	0					
ANR	1356818	PtrMemberAccess	op_array -> opcodes		1356741	1					
ANR	1356819	Identifier	op_array		1356741	0					
ANR	1356820	Identifier	opcodes		1356741	1					
ANR	1356821	ExpressionStatement	blocks [ 0 ] . start_opline = opline	123:1:4210:4241	1356741	7	True				
ANR	1356822	AssignmentExpression	blocks [ 0 ] . start_opline = opline		1356741	0		=			
ANR	1356823	MemberAccess	blocks [ 0 ] . start_opline		1356741	0					
ANR	1356824	ArrayIndexing	blocks [ 0 ]		1356741	0					
ANR	1356825	Identifier	blocks		1356741	0					
ANR	1356826	PrimaryExpression	0		1356741	1					
ANR	1356827	Identifier	start_opline		1356741	1					
ANR	1356828	Identifier	opline		1356741	1					
ANR	1356829	ExpressionStatement	blocks [ 0 ] . start_opline_no = 0	124:1:4244:4273	1356741	8	True				
ANR	1356830	AssignmentExpression	blocks [ 0 ] . start_opline_no = 0		1356741	0		=			
ANR	1356831	MemberAccess	blocks [ 0 ] . start_opline_no		1356741	0					
ANR	1356832	ArrayIndexing	blocks [ 0 ]		1356741	0					
ANR	1356833	Identifier	blocks		1356741	0					
ANR	1356834	PrimaryExpression	0		1356741	1					
ANR	1356835	Identifier	start_opline_no		1356741	1					
ANR	1356836	PrimaryExpression	0		1356741	1					
ANR	1356837	WhileStatement	while ( opline < end )		1356741	9					
ANR	1356838	Condition	opline < end	125:8:4283:4294	1356741	0	True				
ANR	1356839	RelationalExpression	opline < end		1356741	0		<			
ANR	1356840	Identifier	opline		1356741	0					
ANR	1356841	Identifier	end		1356741	1					
ANR	1356842	CompoundStatement		12:22:383:383	1356741	1					
ANR	1356843	SwitchStatement	switch ( ( unsigned ) opline -> opcode )		1356741	0					
ANR	1356844	Condition	( unsigned ) opline -> opcode	126:9:4308:4331	1356741	0	True				
ANR	1356845	CastExpression	( unsigned ) opline -> opcode		1356741	0					
ANR	1356846	CastTarget	unsigned		1356741	0					
ANR	1356847	PtrMemberAccess	opline -> opcode		1356741	1					
ANR	1356848	Identifier	opline		1356741	0					
ANR	1356849	Identifier	opcode		1356741	1					
ANR	1356850	CompoundStatement		13:35:420:420	1356741	1					
ANR	1356851	Label	case ZEND_FAST_CALL :	127:3:4339:4358	1356741	0	True				
ANR	1356852	Identifier	ZEND_FAST_CALL		1356741	0					
ANR	1356853	ExpressionStatement	START_BLOCK_OP ( ZEND_OP1 ( opline ) . opline_num )	128:4:4364:4407	1356741	1	True				
ANR	1356854	CallExpression	START_BLOCK_OP ( ZEND_OP1 ( opline ) . opline_num )		1356741	0					
ANR	1356855	Callee	START_BLOCK_OP		1356741	0					
ANR	1356856	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356857	ArgumentList	ZEND_OP1 ( opline ) . opline_num		1356741	1					
ANR	1356858	Argument	ZEND_OP1 ( opline ) . opline_num		1356741	0					
ANR	1356859	MemberAccess	ZEND_OP1 ( opline ) . opline_num		1356741	0					
ANR	1356860	CallExpression	ZEND_OP1 ( opline )		1356741	0					
ANR	1356861	Callee	ZEND_OP1		1356741	0					
ANR	1356862	Identifier	ZEND_OP1		1356741	0					
ANR	1356863	ArgumentList	opline		1356741	1					
ANR	1356864	Argument	opline		1356741	0					
ANR	1356865	Identifier	opline		1356741	0					
ANR	1356866	Identifier	opline_num		1356741	1					
ANR	1356867	IfStatement	if ( opline -> extended_value )		1356741	2					
ANR	1356868	Condition	opline -> extended_value	129:8:4417:4438	1356741	0	True				
ANR	1356869	PtrMemberAccess	opline -> extended_value		1356741	0					
ANR	1356870	Identifier	opline		1356741	0					
ANR	1356871	Identifier	extended_value		1356741	1					
ANR	1356872	CompoundStatement		16:32:527:527	1356741	1					
ANR	1356873	ExpressionStatement	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )	130:5:4448:4491	1356741	0	True				
ANR	1356874	CallExpression	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )		1356741	0					
ANR	1356875	Callee	START_BLOCK_OP		1356741	0					
ANR	1356876	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356877	ArgumentList	ZEND_OP2 ( opline ) . opline_num		1356741	1					
ANR	1356878	Argument	ZEND_OP2 ( opline ) . opline_num		1356741	0					
ANR	1356879	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1356741	0					
ANR	1356880	CallExpression	ZEND_OP2 ( opline )		1356741	0					
ANR	1356881	Callee	ZEND_OP2		1356741	0					
ANR	1356882	Identifier	ZEND_OP2		1356741	0					
ANR	1356883	ArgumentList	opline		1356741	1					
ANR	1356884	Argument	opline		1356741	0					
ANR	1356885	Identifier	opline		1356741	0					
ANR	1356886	Identifier	opline_num		1356741	1					
ANR	1356887	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	132:4:4503:4527	1356741	3	True				
ANR	1356888	CallExpression	START_BLOCK_OP ( opno + 1 )		1356741	0					
ANR	1356889	Callee	START_BLOCK_OP		1356741	0					
ANR	1356890	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356891	ArgumentList	opno + 1		1356741	1					
ANR	1356892	Argument	opno + 1		1356741	0					
ANR	1356893	AdditiveExpression	opno + 1		1356741	0		+			
ANR	1356894	Identifier	opno		1356741	0					
ANR	1356895	PrimaryExpression	1		1356741	1					
ANR	1356896	BreakStatement	break ;	133:4:4533:4538	1356741	4	True				
ANR	1356897	Label	case ZEND_FAST_RET :	134:3:4543:4561	1356741	5	True				
ANR	1356898	Identifier	ZEND_FAST_RET		1356741	0					
ANR	1356899	IfStatement	if ( opline -> extended_value )		1356741	6					
ANR	1356900	Condition	opline -> extended_value	135:8:4571:4592	1356741	0	True				
ANR	1356901	PtrMemberAccess	opline -> extended_value		1356741	0					
ANR	1356902	Identifier	opline		1356741	0					
ANR	1356903	Identifier	extended_value		1356741	1					
ANR	1356904	CompoundStatement		22:32:681:681	1356741	1					
ANR	1356905	ExpressionStatement	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )	136:5:4602:4645	1356741	0	True				
ANR	1356906	CallExpression	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )		1356741	0					
ANR	1356907	Callee	START_BLOCK_OP		1356741	0					
ANR	1356908	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356909	ArgumentList	ZEND_OP2 ( opline ) . opline_num		1356741	1					
ANR	1356910	Argument	ZEND_OP2 ( opline ) . opline_num		1356741	0					
ANR	1356911	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1356741	0					
ANR	1356912	CallExpression	ZEND_OP2 ( opline )		1356741	0					
ANR	1356913	Callee	ZEND_OP2		1356741	0					
ANR	1356914	Identifier	ZEND_OP2		1356741	0					
ANR	1356915	ArgumentList	opline		1356741	1					
ANR	1356916	Argument	opline		1356741	0					
ANR	1356917	Identifier	opline		1356741	0					
ANR	1356918	Identifier	opline_num		1356741	1					
ANR	1356919	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	138:4:4657:4681	1356741	7	True				
ANR	1356920	CallExpression	START_BLOCK_OP ( opno + 1 )		1356741	0					
ANR	1356921	Callee	START_BLOCK_OP		1356741	0					
ANR	1356922	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356923	ArgumentList	opno + 1		1356741	1					
ANR	1356924	Argument	opno + 1		1356741	0					
ANR	1356925	AdditiveExpression	opno + 1		1356741	0		+			
ANR	1356926	Identifier	opno		1356741	0					
ANR	1356927	PrimaryExpression	1		1356741	1					
ANR	1356928	BreakStatement	break ;	139:4:4687:4692	1356741	8	True				
ANR	1356929	Label	case ZEND_JMP :	140:3:4697:4710	1356741	9	True				
ANR	1356930	Identifier	ZEND_JMP		1356741	0					
ANR	1356931	Label	case ZEND_DECLARE_ANON_CLASS :	141:3:4715:4743	1356741	10	True				
ANR	1356932	Identifier	ZEND_DECLARE_ANON_CLASS		1356741	0					
ANR	1356933	Label	case ZEND_DECLARE_ANON_INHERITED_CLASS :	142:3:4748:4786	1356741	11	True				
ANR	1356934	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		1356741	0					
ANR	1356935	ExpressionStatement	START_BLOCK_OP ( ZEND_OP1 ( opline ) . opline_num )	143:4:4792:4835	1356741	12	True				
ANR	1356936	CallExpression	START_BLOCK_OP ( ZEND_OP1 ( opline ) . opline_num )		1356741	0					
ANR	1356937	Callee	START_BLOCK_OP		1356741	0					
ANR	1356938	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356939	ArgumentList	ZEND_OP1 ( opline ) . opline_num		1356741	1					
ANR	1356940	Argument	ZEND_OP1 ( opline ) . opline_num		1356741	0					
ANR	1356941	MemberAccess	ZEND_OP1 ( opline ) . opline_num		1356741	0					
ANR	1356942	CallExpression	ZEND_OP1 ( opline )		1356741	0					
ANR	1356943	Callee	ZEND_OP1		1356741	0					
ANR	1356944	Identifier	ZEND_OP1		1356741	0					
ANR	1356945	ArgumentList	opline		1356741	1					
ANR	1356946	Argument	opline		1356741	0					
ANR	1356947	Identifier	opline		1356741	0					
ANR	1356948	Identifier	opline_num		1356741	1					
ANR	1356949	Label	case ZEND_RETURN :	145:3:4878:4894	1356741	13	True				
ANR	1356950	Identifier	ZEND_RETURN		1356741	0					
ANR	1356951	Label	case ZEND_RETURN_BY_REF :	146:3:4899:4922	1356741	14	True				
ANR	1356952	Identifier	ZEND_RETURN_BY_REF		1356741	0					
ANR	1356953	Label	case ZEND_GENERATOR_RETURN :	147:3:4927:4953	1356741	15	True				
ANR	1356954	Identifier	ZEND_GENERATOR_RETURN		1356741	0					
ANR	1356955	Label	case ZEND_EXIT :	148:3:4958:4972	1356741	16	True				
ANR	1356956	Identifier	ZEND_EXIT		1356741	0					
ANR	1356957	Label	case ZEND_THROW :	149:3:4977:4992	1356741	17	True				
ANR	1356958	Identifier	ZEND_THROW		1356741	0					
ANR	1356959	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	151:4:5036:5060	1356741	18	True				
ANR	1356960	CallExpression	START_BLOCK_OP ( opno + 1 )		1356741	0					
ANR	1356961	Callee	START_BLOCK_OP		1356741	0					
ANR	1356962	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356963	ArgumentList	opno + 1		1356741	1					
ANR	1356964	Argument	opno + 1		1356741	0					
ANR	1356965	AdditiveExpression	opno + 1		1356741	0		+			
ANR	1356966	Identifier	opno		1356741	0					
ANR	1356967	PrimaryExpression	1		1356741	1					
ANR	1356968	BreakStatement	break ;	152:4:5066:5071	1356741	19	True				
ANR	1356969	Label	case ZEND_CATCH :	155:3:5180:5195	1356741	20	True				
ANR	1356970	Identifier	ZEND_CATCH		1356741	0					
ANR	1356971	ExpressionStatement	START_BLOCK_OP ( opline -> extended_value )	156:4:5201:5239	1356741	21	True				
ANR	1356972	CallExpression	START_BLOCK_OP ( opline -> extended_value )		1356741	0					
ANR	1356973	Callee	START_BLOCK_OP		1356741	0					
ANR	1356974	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356975	ArgumentList	opline -> extended_value		1356741	1					
ANR	1356976	Argument	opline -> extended_value		1356741	0					
ANR	1356977	PtrMemberAccess	opline -> extended_value		1356741	0					
ANR	1356978	Identifier	opline		1356741	0					
ANR	1356979	Identifier	extended_value		1356741	1					
ANR	1356980	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	157:4:5245:5269	1356741	22	True				
ANR	1356981	CallExpression	START_BLOCK_OP ( opno + 1 )		1356741	0					
ANR	1356982	Callee	START_BLOCK_OP		1356741	0					
ANR	1356983	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356984	ArgumentList	opno + 1		1356741	1					
ANR	1356985	Argument	opno + 1		1356741	0					
ANR	1356986	AdditiveExpression	opno + 1		1356741	0		+			
ANR	1356987	Identifier	opno		1356741	0					
ANR	1356988	PrimaryExpression	1		1356741	1					
ANR	1356989	BreakStatement	break ;	158:4:5275:5280	1356741	23	True				
ANR	1356990	Label	case ZEND_JMPZNZ :	159:3:5285:5301	1356741	24	True				
ANR	1356991	Identifier	ZEND_JMPZNZ		1356741	0					
ANR	1356992	ExpressionStatement	START_BLOCK_OP ( opline -> extended_value )	160:4:5307:5345	1356741	25	True				
ANR	1356993	CallExpression	START_BLOCK_OP ( opline -> extended_value )		1356741	0					
ANR	1356994	Callee	START_BLOCK_OP		1356741	0					
ANR	1356995	Identifier	START_BLOCK_OP		1356741	0					
ANR	1356996	ArgumentList	opline -> extended_value		1356741	1					
ANR	1356997	Argument	opline -> extended_value		1356741	0					
ANR	1356998	PtrMemberAccess	opline -> extended_value		1356741	0					
ANR	1356999	Identifier	opline		1356741	0					
ANR	1357000	Identifier	extended_value		1356741	1					
ANR	1357001	Label	case ZEND_JMPZ :	161:3:5350:5364	1356741	26	True				
ANR	1357002	Identifier	ZEND_JMPZ		1356741	0					
ANR	1357003	Label	case ZEND_JMPNZ :	162:3:5369:5384	1356741	27	True				
ANR	1357004	Identifier	ZEND_JMPNZ		1356741	0					
ANR	1357005	Label	case ZEND_JMPZ_EX :	163:3:5389:5406	1356741	28	True				
ANR	1357006	Identifier	ZEND_JMPZ_EX		1356741	0					
ANR	1357007	Label	case ZEND_JMPNZ_EX :	164:3:5411:5429	1356741	29	True				
ANR	1357008	Identifier	ZEND_JMPNZ_EX		1356741	0					
ANR	1357009	Label	case ZEND_FE_RESET_R :	165:3:5434:5454	1356741	30	True				
ANR	1357010	Identifier	ZEND_FE_RESET_R		1356741	0					
ANR	1357011	Label	case ZEND_FE_RESET_RW :	166:3:5459:5480	1356741	31	True				
ANR	1357012	Identifier	ZEND_FE_RESET_RW		1356741	0					
ANR	1357013	Label	case ZEND_NEW :	167:3:5485:5498	1356741	32	True				
ANR	1357014	Identifier	ZEND_NEW		1356741	0					
ANR	1357015	Label	case ZEND_JMP_SET :	168:3:5503:5520	1356741	33	True				
ANR	1357016	Identifier	ZEND_JMP_SET		1356741	0					
ANR	1357017	Label	case ZEND_COALESCE :	169:3:5525:5543	1356741	34	True				
ANR	1357018	Identifier	ZEND_COALESCE		1356741	0					
ANR	1357019	Label	case ZEND_ASSERT_CHECK :	170:3:5548:5570	1356741	35	True				
ANR	1357020	Identifier	ZEND_ASSERT_CHECK		1356741	0					
ANR	1357021	ExpressionStatement	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )	171:4:5576:5619	1356741	36	True				
ANR	1357022	CallExpression	START_BLOCK_OP ( ZEND_OP2 ( opline ) . opline_num )		1356741	0					
ANR	1357023	Callee	START_BLOCK_OP		1356741	0					
ANR	1357024	Identifier	START_BLOCK_OP		1356741	0					
ANR	1357025	ArgumentList	ZEND_OP2 ( opline ) . opline_num		1356741	1					
ANR	1357026	Argument	ZEND_OP2 ( opline ) . opline_num		1356741	0					
ANR	1357027	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1356741	0					
ANR	1357028	CallExpression	ZEND_OP2 ( opline )		1356741	0					
ANR	1357029	Callee	ZEND_OP2		1356741	0					
ANR	1357030	Identifier	ZEND_OP2		1356741	0					
ANR	1357031	ArgumentList	opline		1356741	1					
ANR	1357032	Argument	opline		1356741	0					
ANR	1357033	Identifier	opline		1356741	0					
ANR	1357034	Identifier	opline_num		1356741	1					
ANR	1357035	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	172:4:5625:5649	1356741	37	True				
ANR	1357036	CallExpression	START_BLOCK_OP ( opno + 1 )		1356741	0					
ANR	1357037	Callee	START_BLOCK_OP		1356741	0					
ANR	1357038	Identifier	START_BLOCK_OP		1356741	0					
ANR	1357039	ArgumentList	opno + 1		1356741	1					
ANR	1357040	Argument	opno + 1		1356741	0					
ANR	1357041	AdditiveExpression	opno + 1		1356741	0		+			
ANR	1357042	Identifier	opno		1356741	0					
ANR	1357043	PrimaryExpression	1		1356741	1					
ANR	1357044	BreakStatement	break ;	173:4:5655:5660	1356741	38	True				
ANR	1357045	Label	case ZEND_FE_FETCH_R :	174:3:5665:5685	1356741	39	True				
ANR	1357046	Identifier	ZEND_FE_FETCH_R		1356741	0					
ANR	1357047	Label	case ZEND_FE_FETCH_RW :	175:3:5690:5711	1356741	40	True				
ANR	1357048	Identifier	ZEND_FE_FETCH_RW		1356741	0					
ANR	1357049	ExpressionStatement	START_BLOCK_OP ( opline -> extended_value )	176:4:5717:5755	1356741	41	True				
ANR	1357050	CallExpression	START_BLOCK_OP ( opline -> extended_value )		1356741	0					
ANR	1357051	Callee	START_BLOCK_OP		1356741	0					
ANR	1357052	Identifier	START_BLOCK_OP		1356741	0					
ANR	1357053	ArgumentList	opline -> extended_value		1356741	1					
ANR	1357054	Argument	opline -> extended_value		1356741	0					
ANR	1357055	PtrMemberAccess	opline -> extended_value		1356741	0					
ANR	1357056	Identifier	opline		1356741	0					
ANR	1357057	Identifier	extended_value		1356741	1					
ANR	1357058	ExpressionStatement	START_BLOCK_OP ( opno + 1 )	177:4:5761:5785	1356741	42	True				
ANR	1357059	CallExpression	START_BLOCK_OP ( opno + 1 )		1356741	0					
ANR	1357060	Callee	START_BLOCK_OP		1356741	0					
ANR	1357061	Identifier	START_BLOCK_OP		1356741	0					
ANR	1357062	ArgumentList	opno + 1		1356741	1					
ANR	1357063	Argument	opno + 1		1356741	0					
ANR	1357064	AdditiveExpression	opno + 1		1356741	0		+			
ANR	1357065	Identifier	opno		1356741	0					
ANR	1357066	PrimaryExpression	1		1356741	1					
ANR	1357067	BreakStatement	break ;	178:4:5791:5796	1356741	43	True				
ANR	1357068	ExpressionStatement	opno ++	180:2:5804:5810	1356741	1	True				
ANR	1357069	PostIncDecOperationExpression	opno ++		1356741	0					
ANR	1357070	Identifier	opno		1356741	0					
ANR	1357071	IncDec	++		1356741	1					
ANR	1357072	ExpressionStatement	opline ++	181:2:5814:5822	1356741	2	True				
ANR	1357073	PostIncDecOperationExpression	opline ++		1356741	0					
ANR	1357074	Identifier	opline		1356741	0					
ANR	1357075	IncDec	++		1356741	1					
ANR	1357076	IfStatement	if ( op_array -> last_try_catch )		1356741	10					
ANR	1357077	Condition	op_array -> last_try_catch	185:5:5870:5893	1356741	0	True				
ANR	1357078	PtrMemberAccess	op_array -> last_try_catch		1356741	0					
ANR	1357079	Identifier	op_array		1356741	0					
ANR	1357080	Identifier	last_try_catch		1356741	1					
ANR	1357081	CompoundStatement		73:2:1986:1991	1356741	1					
ANR	1357082	IdentifierDeclStatement	int i ;	186:2:5900:5905	1356741	0	True				
ANR	1357083	IdentifierDecl	i		1356741	0					
ANR	1357084	IdentifierDeclType	int		1356741	0					
ANR	1357085	Identifier	i		1356741	1					
ANR	1357086	Statement	cfg	187:2:5909:5911	1356741	1	True				
ANR	1357087	Statement	->	187:5:5912:5913	1356741	2	True				
ANR	1357088	TryStatement	try		1356741	3					
ANR	1357089	Statement	=		1356741	0					
ANR	1357090	ExpressionStatement	"zend_arena_calloc ( & ctx -> arena , op_array -> last_try_catch , sizeof ( zend_code_block * ) )"	187:13:5920:6003	1356741	4	True				
ANR	1357091	CallExpression	"zend_arena_calloc ( & ctx -> arena , op_array -> last_try_catch , sizeof ( zend_code_block * ) )"		1356741	0					
ANR	1357092	Callee	zend_arena_calloc		1356741	0					
ANR	1357093	Identifier	zend_arena_calloc		1356741	0					
ANR	1357094	ArgumentList	& ctx -> arena		1356741	1					
ANR	1357095	Argument	& ctx -> arena		1356741	0					
ANR	1357096	UnaryOperationExpression	& ctx -> arena		1356741	0					
ANR	1357097	UnaryOperator	&		1356741	0					
ANR	1357098	PtrMemberAccess	ctx -> arena		1356741	1					
ANR	1357099	Identifier	ctx		1356741	0					
ANR	1357100	Identifier	arena		1356741	1					
ANR	1357101	Argument	op_array -> last_try_catch		1356741	1					
ANR	1357102	PtrMemberAccess	op_array -> last_try_catch		1356741	0					
ANR	1357103	Identifier	op_array		1356741	0					
ANR	1357104	Identifier	last_try_catch		1356741	1					
ANR	1357105	Argument	sizeof ( zend_code_block * )		1356741	2					
ANR	1357106	SizeofExpression	sizeof ( zend_code_block * )		1356741	0					
ANR	1357107	Sizeof	sizeof		1356741	0					
ANR	1357108	SizeofOperand	zend_code_block *		1356741	1					
ANR	1357109	Statement	cfg	188:2:6007:6009	1356741	5	True				
ANR	1357110	Statement	->	188:5:6010:6011	1356741	6	True				
ANR	1357111	Statement	catch	188:7:6012:6016	1356741	7	True				
ANR	1357112	Statement	=	188:13:6018:6018	1356741	8	True				
ANR	1357113	ExpressionStatement	"zend_arena_calloc ( & ctx -> arena , op_array -> last_try_catch , sizeof ( zend_code_block * ) )"	188:15:6020:6103	1356741	9	True				
ANR	1357114	CallExpression	"zend_arena_calloc ( & ctx -> arena , op_array -> last_try_catch , sizeof ( zend_code_block * ) )"		1356741	0					
ANR	1357115	Callee	zend_arena_calloc		1356741	0					
ANR	1357116	Identifier	zend_arena_calloc		1356741	0					
ANR	1357117	ArgumentList	& ctx -> arena		1356741	1					
ANR	1357118	Argument	& ctx -> arena		1356741	0					
ANR	1357119	UnaryOperationExpression	& ctx -> arena		1356741	0					
ANR	1357120	UnaryOperator	&		1356741	0					
ANR	1357121	PtrMemberAccess	ctx -> arena		1356741	1					
ANR	1357122	Identifier	ctx		1356741	0					
ANR	1357123	Identifier	arena		1356741	1					
ANR	1357124	Argument	op_array -> last_try_catch		1356741	1					
ANR	1357125	PtrMemberAccess	op_array -> last_try_catch		1356741	0					
ANR	1357126	Identifier	op_array		1356741	0					
ANR	1357127	Identifier	last_try_catch		1356741	1					
ANR	1357128	Argument	sizeof ( zend_code_block * )		1356741	2					
ANR	1357129	SizeofExpression	sizeof ( zend_code_block * )		1356741	0					
ANR	1357130	Sizeof	sizeof		1356741	0					
ANR	1357131	SizeofOperand	zend_code_block *		1356741	1					
ANR	1357132	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		1356741	10					
ANR	1357133	ForInit	i = 0 ;	189:7:6112:6117	1356741	0	True				
ANR	1357134	AssignmentExpression	i = 0		1356741	0		=			
ANR	1357135	Identifier	i		1356741	0					
ANR	1357136	PrimaryExpression	0		1356741	1					
ANR	1357137	Condition	i < op_array -> last_try_catch	189:14:6119:6145	1356741	1	True				
ANR	1357138	RelationalExpression	i < op_array -> last_try_catch		1356741	0		<			
ANR	1357139	Identifier	i		1356741	0					
ANR	1357140	PtrMemberAccess	op_array -> last_try_catch		1356741	1					
ANR	1357141	Identifier	op_array		1356741	0					
ANR	1357142	Identifier	last_try_catch		1356741	1					
ANR	1357143	PostIncDecOperationExpression	i ++	189:43:6148:6150	1356741	2	True				
ANR	1357144	Identifier	i		1356741	0					
ANR	1357145	IncDec	++		1356741	1					
ANR	1357146	CompoundStatement		76:48:2239:2239	1356741	3					
ANR	1357147	Statement	cfg	190:3:6158:6160	1356741	0	True				
ANR	1357148	Statement	->	190:6:6161:6162	1356741	1	True				
ANR	1357149	TryStatement	try		1356741	2					
ANR	1357150	Statement	[		1356741	0					
ANR	1357151	Statement	i	190:12:6167:6167	1356741	3	True				
ANR	1357152	Statement	]	190:13:6168:6168	1356741	4	True				
ANR	1357153	Statement	=	190:15:6170:6170	1356741	5	True				
ANR	1357154	ExpressionStatement	& blocks [ op_array -> try_catch_array [ i ] . try_op ]	190:17:6172:6216	1356741	6	True				
ANR	1357155	UnaryOperationExpression	& blocks [ op_array -> try_catch_array [ i ] . try_op ]		1356741	0					
ANR	1357156	UnaryOperator	&		1356741	0					
ANR	1357157	ArrayIndexing	blocks [ op_array -> try_catch_array [ i ] . try_op ]		1356741	1					
ANR	1357158	Identifier	blocks		1356741	0					
ANR	1357159	MemberAccess	op_array -> try_catch_array [ i ] . try_op		1356741	1					
ANR	1357160	ArrayIndexing	op_array -> try_catch_array [ i ]		1356741	0					
ANR	1357161	PtrMemberAccess	op_array -> try_catch_array		1356741	0					
ANR	1357162	Identifier	op_array		1356741	0					
ANR	1357163	Identifier	try_catch_array		1356741	1					
ANR	1357164	Identifier	i		1356741	1					
ANR	1357165	Identifier	try_op		1356741	1					
ANR	1357166	Statement	cfg	191:3:6221:6223	1356741	7	True				
ANR	1357167	Statement	->	191:6:6224:6225	1356741	8	True				
ANR	1357168	Statement	catch	191:8:6226:6230	1356741	9	True				
ANR	1357169	Statement	[	191:13:6231:6231	1356741	10	True				
ANR	1357170	Statement	i	191:14:6232:6232	1356741	11	True				
ANR	1357171	Statement	]	191:15:6233:6233	1356741	12	True				
ANR	1357172	Statement	=	191:17:6235:6235	1356741	13	True				
ANR	1357173	ExpressionStatement	& blocks [ op_array -> try_catch_array [ i ] . catch_op ]	191:19:6237:6283	1356741	14	True				
ANR	1357174	UnaryOperationExpression	& blocks [ op_array -> try_catch_array [ i ] . catch_op ]		1356741	0					
ANR	1357175	UnaryOperator	&		1356741	0					
ANR	1357176	ArrayIndexing	blocks [ op_array -> try_catch_array [ i ] . catch_op ]		1356741	1					
ANR	1357177	Identifier	blocks		1356741	0					
ANR	1357178	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		1356741	1					
ANR	1357179	ArrayIndexing	op_array -> try_catch_array [ i ]		1356741	0					
ANR	1357180	PtrMemberAccess	op_array -> try_catch_array		1356741	0					
ANR	1357181	Identifier	op_array		1356741	0					
ANR	1357182	Identifier	try_catch_array		1356741	1					
ANR	1357183	Identifier	i		1356741	1					
ANR	1357184	Identifier	catch_op		1356741	1					
ANR	1357185	ExpressionStatement	START_BLOCK_OP ( op_array -> try_catch_array [ i ] . try_op )	192:3:6288:6339	1356741	15	True				
ANR	1357186	CallExpression	START_BLOCK_OP ( op_array -> try_catch_array [ i ] . try_op )		1356741	0					
ANR	1357187	Callee	START_BLOCK_OP		1356741	0					
ANR	1357188	Identifier	START_BLOCK_OP		1356741	0					
ANR	1357189	ArgumentList	op_array -> try_catch_array [ i ] . try_op		1356741	1					
ANR	1357190	Argument	op_array -> try_catch_array [ i ] . try_op		1356741	0					
ANR	1357191	MemberAccess	op_array -> try_catch_array [ i ] . try_op		1356741	0					
ANR	1357192	ArrayIndexing	op_array -> try_catch_array [ i ]		1356741	0					
ANR	1357193	PtrMemberAccess	op_array -> try_catch_array		1356741	0					
ANR	1357194	Identifier	op_array		1356741	0					
ANR	1357195	Identifier	try_catch_array		1356741	1					
ANR	1357196	Identifier	i		1356741	1					
ANR	1357197	Identifier	try_op		1356741	1					
ANR	1357198	ExpressionStatement	START_BLOCK_OP ( op_array -> try_catch_array [ i ] . catch_op )	193:3:6344:6397	1356741	16	True				
ANR	1357199	CallExpression	START_BLOCK_OP ( op_array -> try_catch_array [ i ] . catch_op )		1356741	0					
ANR	1357200	Callee	START_BLOCK_OP		1356741	0					
ANR	1357201	Identifier	START_BLOCK_OP		1356741	0					
ANR	1357202	ArgumentList	op_array -> try_catch_array [ i ] . catch_op		1356741	1					
ANR	1357203	Argument	op_array -> try_catch_array [ i ] . catch_op		1356741	0					
ANR	1357204	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		1356741	0					
ANR	1357205	ArrayIndexing	op_array -> try_catch_array [ i ]		1356741	0					
ANR	1357206	PtrMemberAccess	op_array -> try_catch_array		1356741	0					
ANR	1357207	Identifier	op_array		1356741	0					
ANR	1357208	Identifier	try_catch_array		1356741	1					
ANR	1357209	Identifier	i		1356741	1					
ANR	1357210	Identifier	catch_op		1356741	1					
ANR	1357211	ExpressionStatement	blocks [ op_array -> try_catch_array [ i ] . try_op ] . protected = 1	194:3:6402:6459	1356741	17	True				
ANR	1357212	AssignmentExpression	blocks [ op_array -> try_catch_array [ i ] . try_op ] . protected = 1		1356741	0		=			
ANR	1357213	MemberAccess	blocks [ op_array -> try_catch_array [ i ] . try_op ] . protected		1356741	0					
ANR	1357214	ArrayIndexing	blocks [ op_array -> try_catch_array [ i ] . try_op ]		1356741	0					
ANR	1357215	Identifier	blocks		1356741	0					
ANR	1357216	MemberAccess	op_array -> try_catch_array [ i ] . try_op		1356741	1					
ANR	1357217	ArrayIndexing	op_array -> try_catch_array [ i ]		1356741	0					
ANR	1357218	PtrMemberAccess	op_array -> try_catch_array		1356741	0					
ANR	1357219	Identifier	op_array		1356741	0					
ANR	1357220	Identifier	try_catch_array		1356741	1					
ANR	1357221	Identifier	i		1356741	1					
ANR	1357222	Identifier	try_op		1356741	1					
ANR	1357223	Identifier	protected		1356741	1					
ANR	1357224	PrimaryExpression	1		1356741	1					
ANR	1357225	IfStatement	if ( op_array -> last_brk_cont )		1356741	11					
ANR	1357226	Condition	op_array -> last_brk_cont	200:5:6639:6661	1356741	0	True				
ANR	1357227	PtrMemberAccess	op_array -> last_brk_cont		1356741	0					
ANR	1357228	Identifier	op_array		1356741	0					
ANR	1357229	Identifier	last_brk_cont		1356741	1					
ANR	1357230	CompoundStatement		88:2:2754:2762	1356741	1					
ANR	1357231	IdentifierDeclStatement	"int i , j ;"	201:2:6668:6676	1356741	0	True				
ANR	1357232	IdentifierDecl	i		1356741	0					
ANR	1357233	IdentifierDeclType	int		1356741	0					
ANR	1357234	Identifier	i		1356741	1					
ANR	1357235	IdentifierDecl	j		1356741	1					
ANR	1357236	IdentifierDeclType	int		1356741	0					
ANR	1357237	Identifier	j		1356741	1					
ANR	1357238	ExpressionStatement	j = 0	203:2:6681:6686	1356741	1	True				
ANR	1357239	AssignmentExpression	j = 0		1356741	0		=			
ANR	1357240	Identifier	j		1356741	0					
ANR	1357241	PrimaryExpression	0		1356741	1					
ANR	1357242	ForStatement	for ( i = 0 ; i < op_array -> last_brk_cont ; i ++ )		1356741	2					
ANR	1357243	ForInit	i = 0 ;	204:7:6695:6700	1356741	0	True				
ANR	1357244	AssignmentExpression	i = 0		1356741	0		=			
ANR	1357245	Identifier	i		1356741	0					
ANR	1357246	PrimaryExpression	0		1356741	1					
ANR	1357247	Condition	i < op_array -> last_brk_cont	204:14:6702:6727	1356741	1	True				
ANR	1357248	RelationalExpression	i < op_array -> last_brk_cont		1356741	0		<			
ANR	1357249	Identifier	i		1356741	0					
ANR	1357250	PtrMemberAccess	op_array -> last_brk_cont		1356741	1					
ANR	1357251	Identifier	op_array		1356741	0					
ANR	1357252	Identifier	last_brk_cont		1356741	1					
ANR	1357253	PostIncDecOperationExpression	i ++	204:42:6730:6732	1356741	2	True				
ANR	1357254	Identifier	i		1356741	0					
ANR	1357255	IncDec	++		1356741	1					
ANR	1357256	CompoundStatement		91:47:2821:2821	1356741	3					
ANR	1357257	IfStatement	if ( op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE ) )		1356741	0					
ANR	1357258	Condition	op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE )	205:7:6744:7124	1356741	0	True				
ANR	1357259	AndExpression	op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE )		1356741	0		&&			
ANR	1357260	RelationalExpression	op_array -> brk_cont_array [ i ] . start >= 0		1356741	0		>=			
ANR	1357261	MemberAccess	op_array -> brk_cont_array [ i ] . start		1356741	0					
ANR	1357262	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357263	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357264	Identifier	op_array		1356741	0					
ANR	1357265	Identifier	brk_cont_array		1356741	1					
ANR	1357266	Identifier	i		1356741	1					
ANR	1357267	Identifier	start		1356741	1					
ANR	1357268	PrimaryExpression	0		1356741	1					
ANR	1357269	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE		1356741	1		||			
ANR	1357270	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE		1356741	0		==			
ANR	1357271	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741	0					
ANR	1357272	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		1356741	0					
ANR	1357273	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357274	Identifier	op_array		1356741	0					
ANR	1357275	Identifier	opcodes		1356741	1					
ANR	1357276	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1356741	1					
ANR	1357277	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357278	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357279	Identifier	op_array		1356741	0					
ANR	1357280	Identifier	brk_cont_array		1356741	1					
ANR	1357281	Identifier	i		1356741	1					
ANR	1357282	Identifier	brk		1356741	1					
ANR	1357283	Identifier	opcode		1356741	1					
ANR	1357284	Identifier	ZEND_FREE		1356741	1					
ANR	1357285	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE		1356741	1		||			
ANR	1357286	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE		1356741	0		==			
ANR	1357287	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741	0					
ANR	1357288	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		1356741	0					
ANR	1357289	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357290	Identifier	op_array		1356741	0					
ANR	1357291	Identifier	opcodes		1356741	1					
ANR	1357292	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1356741	1					
ANR	1357293	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357294	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357295	Identifier	op_array		1356741	0					
ANR	1357296	Identifier	brk_cont_array		1356741	1					
ANR	1357297	Identifier	i		1356741	1					
ANR	1357298	Identifier	brk		1356741	1					
ANR	1357299	Identifier	opcode		1356741	1					
ANR	1357300	Identifier	ZEND_FE_FREE		1356741	1					
ANR	1357301	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE		1356741	1		||			
ANR	1357302	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END		1356741	0		==			
ANR	1357303	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741	0					
ANR	1357304	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		1356741	0					
ANR	1357305	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357306	Identifier	op_array		1356741	0					
ANR	1357307	Identifier	opcodes		1356741	1					
ANR	1357308	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1356741	1					
ANR	1357309	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357310	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357311	Identifier	op_array		1356741	0					
ANR	1357312	Identifier	brk_cont_array		1356741	1					
ANR	1357313	Identifier	i		1356741	1					
ANR	1357314	Identifier	brk		1356741	1					
ANR	1357315	Identifier	opcode		1356741	1					
ANR	1357316	Identifier	ZEND_ROPE_END		1356741	1					
ANR	1357317	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE		1356741	1		==			
ANR	1357318	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741	0					
ANR	1357319	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		1356741	0					
ANR	1357320	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357321	Identifier	op_array		1356741	0					
ANR	1357322	Identifier	opcodes		1356741	1					
ANR	1357323	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1356741	1					
ANR	1357324	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357325	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357326	Identifier	op_array		1356741	0					
ANR	1357327	Identifier	brk_cont_array		1356741	1					
ANR	1357328	Identifier	i		1356741	1					
ANR	1357329	Identifier	brk		1356741	1					
ANR	1357330	Identifier	opcode		1356741	1					
ANR	1357331	Identifier	ZEND_END_SILENCE		1356741	1					
ANR	1357332	CompoundStatement		97:4:3219:3266	1356741	1					
ANR	1357333	IdentifierDeclStatement	int parent = op_array -> brk_cont_array [ i ] . parent ;	210:4:7133:7180	1356741	0	True				
ANR	1357334	IdentifierDecl	parent = op_array -> brk_cont_array [ i ] . parent		1356741	0					
ANR	1357335	IdentifierDeclType	int		1356741	0					
ANR	1357336	Identifier	parent		1356741	1					
ANR	1357337	AssignmentExpression	parent = op_array -> brk_cont_array [ i ] . parent		1356741	2		=			
ANR	1357338	Identifier	parent		1356741	0					
ANR	1357339	MemberAccess	op_array -> brk_cont_array [ i ] . parent		1356741	1					
ANR	1357340	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357341	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357342	Identifier	op_array		1356741	0					
ANR	1357343	Identifier	brk_cont_array		1356741	1					
ANR	1357344	Identifier	i		1356741	1					
ANR	1357345	Identifier	parent		1356741	1					
ANR	1357346	WhileStatement	while ( parent >= 0 && op_array -> brk_cont_array [ parent ] . start < 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode != ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_END_SILENCE ) )		1356741	1					
ANR	1357347	Condition	parent >= 0 && op_array -> brk_cont_array [ parent ] . start < 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode != ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_END_SILENCE )	212:11:7194:7633	1356741	0	True				
ANR	1357348	AndExpression	parent >= 0 && op_array -> brk_cont_array [ parent ] . start < 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode != ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_END_SILENCE )		1356741	0		&&			
ANR	1357349	RelationalExpression	parent >= 0		1356741	0		>=			
ANR	1357350	Identifier	parent		1356741	0					
ANR	1357351	PrimaryExpression	0		1356741	1					
ANR	1357352	AndExpression	op_array -> brk_cont_array [ parent ] . start < 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode != ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_END_SILENCE )		1356741	1		&&			
ANR	1357353	RelationalExpression	op_array -> brk_cont_array [ parent ] . start < 0		1356741	0		<			
ANR	1357354	MemberAccess	op_array -> brk_cont_array [ parent ] . start		1356741	0					
ANR	1357355	ArrayIndexing	op_array -> brk_cont_array [ parent ]		1356741	0					
ANR	1357356	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357357	Identifier	op_array		1356741	0					
ANR	1357358	Identifier	brk_cont_array		1356741	1					
ANR	1357359	Identifier	parent		1356741	1					
ANR	1357360	Identifier	start		1356741	1					
ANR	1357361	PrimaryExpression	0		1356741	1					
ANR	1357362	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode != ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_END_SILENCE		1356741	1		||			
ANR	1357363	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FREE		1356741	0		!=			
ANR	1357364	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode		1356741	0					
ANR	1357365	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ]		1356741	0					
ANR	1357366	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357367	Identifier	op_array		1356741	0					
ANR	1357368	Identifier	opcodes		1356741	1					
ANR	1357369	MemberAccess	op_array -> brk_cont_array [ parent ] . brk		1356741	1					
ANR	1357370	ArrayIndexing	op_array -> brk_cont_array [ parent ]		1356741	0					
ANR	1357371	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357372	Identifier	op_array		1356741	0					
ANR	1357373	Identifier	brk_cont_array		1356741	1					
ANR	1357374	Identifier	parent		1356741	1					
ANR	1357375	Identifier	brk		1356741	1					
ANR	1357376	Identifier	opcode		1356741	1					
ANR	1357377	Identifier	ZEND_FREE		1356741	1					
ANR	1357378	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode != ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_END_SILENCE		1356741	1		||			
ANR	1357379	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_FE_FREE		1356741	0		!=			
ANR	1357380	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode		1356741	0					
ANR	1357381	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ]		1356741	0					
ANR	1357382	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357383	Identifier	op_array		1356741	0					
ANR	1357384	Identifier	opcodes		1356741	1					
ANR	1357385	MemberAccess	op_array -> brk_cont_array [ parent ] . brk		1356741	1					
ANR	1357386	ArrayIndexing	op_array -> brk_cont_array [ parent ]		1356741	0					
ANR	1357387	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357388	Identifier	op_array		1356741	0					
ANR	1357389	Identifier	brk_cont_array		1356741	1					
ANR	1357390	Identifier	parent		1356741	1					
ANR	1357391	Identifier	brk		1356741	1					
ANR	1357392	Identifier	opcode		1356741	1					
ANR	1357393	Identifier	ZEND_FE_FREE		1356741	1					
ANR	1357394	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode != ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_END_SILENCE		1356741	1		||			
ANR	1357395	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode != ZEND_ROPE_END		1356741	0		!=			
ANR	1357396	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741	0					
ANR	1357397	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		1356741	0					
ANR	1357398	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357399	Identifier	op_array		1356741	0					
ANR	1357400	Identifier	opcodes		1356741	1					
ANR	1357401	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1356741	1					
ANR	1357402	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357403	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357404	Identifier	op_array		1356741	0					
ANR	1357405	Identifier	brk_cont_array		1356741	1					
ANR	1357406	Identifier	i		1356741	1					
ANR	1357407	Identifier	brk		1356741	1					
ANR	1357408	Identifier	opcode		1356741	1					
ANR	1357409	Identifier	ZEND_ROPE_END		1356741	1					
ANR	1357410	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode != ZEND_END_SILENCE		1356741	1		!=			
ANR	1357411	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode		1356741	0					
ANR	1357412	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ]		1356741	0					
ANR	1357413	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357414	Identifier	op_array		1356741	0					
ANR	1357415	Identifier	opcodes		1356741	1					
ANR	1357416	MemberAccess	op_array -> brk_cont_array [ parent ] . brk		1356741	1					
ANR	1357417	ArrayIndexing	op_array -> brk_cont_array [ parent ]		1356741	0					
ANR	1357418	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357419	Identifier	op_array		1356741	0					
ANR	1357420	Identifier	brk_cont_array		1356741	1					
ANR	1357421	Identifier	parent		1356741	1					
ANR	1357422	Identifier	brk		1356741	1					
ANR	1357423	Identifier	opcode		1356741	1					
ANR	1357424	Identifier	ZEND_END_SILENCE		1356741	1					
ANR	1357425	CompoundStatement		104:97:3722:3722	1356741	1					
ANR	1357426	ExpressionStatement	parent = op_array -> brk_cont_array [ parent ] . parent	218:5:7643:7691	1356741	0	True				
ANR	1357427	AssignmentExpression	parent = op_array -> brk_cont_array [ parent ] . parent		1356741	0		=			
ANR	1357428	Identifier	parent		1356741	0					
ANR	1357429	MemberAccess	op_array -> brk_cont_array [ parent ] . parent		1356741	1					
ANR	1357430	ArrayIndexing	op_array -> brk_cont_array [ parent ]		1356741	0					
ANR	1357431	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357432	Identifier	op_array		1356741	0					
ANR	1357433	Identifier	brk_cont_array		1356741	1					
ANR	1357434	Identifier	parent		1356741	1					
ANR	1357435	Identifier	parent		1356741	1					
ANR	1357436	ExpressionStatement	op_array -> brk_cont_array [ i ] . parent = parent	220:4:7703:7746	1356741	2	True				
ANR	1357437	AssignmentExpression	op_array -> brk_cont_array [ i ] . parent = parent		1356741	0		=			
ANR	1357438	MemberAccess	op_array -> brk_cont_array [ i ] . parent		1356741	0					
ANR	1357439	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357440	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357441	Identifier	op_array		1356741	0					
ANR	1357442	Identifier	brk_cont_array		1356741	1					
ANR	1357443	Identifier	i		1356741	1					
ANR	1357444	Identifier	parent		1356741	1					
ANR	1357445	Identifier	parent		1356741	1					
ANR	1357446	ExpressionStatement	j ++	221:4:7752:7755	1356741	3	True				
ANR	1357447	PostIncDecOperationExpression	j ++		1356741	0					
ANR	1357448	Identifier	j		1356741	0					
ANR	1357449	IncDec	++		1356741	1					
ANR	1357450	IfStatement	if ( j )		1356741	3					
ANR	1357451	Condition	j	224:6:7772:7772	1356741	0	True				
ANR	1357452	Identifier	j		1356741	0					
ANR	1357453	CompoundStatement		111:9:3861:3861	1356741	1					
ANR	1357454	ExpressionStatement	"cfg -> loop_start = zend_arena_calloc ( & ctx -> arena , op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"	225:3:7780:7880	1356741	0	True				
ANR	1357455	AssignmentExpression	"cfg -> loop_start = zend_arena_calloc ( & ctx -> arena , op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		1356741	0		=			
ANR	1357456	PtrMemberAccess	cfg -> loop_start		1356741	0					
ANR	1357457	Identifier	cfg		1356741	0					
ANR	1357458	Identifier	loop_start		1356741	1					
ANR	1357459	CallExpression	"zend_arena_calloc ( & ctx -> arena , op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		1356741	1					
ANR	1357460	Callee	zend_arena_calloc		1356741	0					
ANR	1357461	Identifier	zend_arena_calloc		1356741	0					
ANR	1357462	ArgumentList	& ctx -> arena		1356741	1					
ANR	1357463	Argument	& ctx -> arena		1356741	0					
ANR	1357464	UnaryOperationExpression	& ctx -> arena		1356741	0					
ANR	1357465	UnaryOperator	&		1356741	0					
ANR	1357466	PtrMemberAccess	ctx -> arena		1356741	1					
ANR	1357467	Identifier	ctx		1356741	0					
ANR	1357468	Identifier	arena		1356741	1					
ANR	1357469	Argument	op_array -> last_brk_cont		1356741	1					
ANR	1357470	PtrMemberAccess	op_array -> last_brk_cont		1356741	0					
ANR	1357471	Identifier	op_array		1356741	0					
ANR	1357472	Identifier	last_brk_cont		1356741	1					
ANR	1357473	Argument	sizeof ( zend_code_block * )		1356741	2					
ANR	1357474	SizeofExpression	sizeof ( zend_code_block * )		1356741	0					
ANR	1357475	Sizeof	sizeof		1356741	0					
ANR	1357476	SizeofOperand	zend_code_block *		1356741	1					
ANR	1357477	ExpressionStatement	"cfg -> loop_cont = zend_arena_calloc ( & ctx -> arena , op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"	226:3:7885:7985	1356741	1	True				
ANR	1357478	AssignmentExpression	"cfg -> loop_cont = zend_arena_calloc ( & ctx -> arena , op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		1356741	0		=			
ANR	1357479	PtrMemberAccess	cfg -> loop_cont		1356741	0					
ANR	1357480	Identifier	cfg		1356741	0					
ANR	1357481	Identifier	loop_cont		1356741	1					
ANR	1357482	CallExpression	"zend_arena_calloc ( & ctx -> arena , op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		1356741	1					
ANR	1357483	Callee	zend_arena_calloc		1356741	0					
ANR	1357484	Identifier	zend_arena_calloc		1356741	0					
ANR	1357485	ArgumentList	& ctx -> arena		1356741	1					
ANR	1357486	Argument	& ctx -> arena		1356741	0					
ANR	1357487	UnaryOperationExpression	& ctx -> arena		1356741	0					
ANR	1357488	UnaryOperator	&		1356741	0					
ANR	1357489	PtrMemberAccess	ctx -> arena		1356741	1					
ANR	1357490	Identifier	ctx		1356741	0					
ANR	1357491	Identifier	arena		1356741	1					
ANR	1357492	Argument	op_array -> last_brk_cont		1356741	1					
ANR	1357493	PtrMemberAccess	op_array -> last_brk_cont		1356741	0					
ANR	1357494	Identifier	op_array		1356741	0					
ANR	1357495	Identifier	last_brk_cont		1356741	1					
ANR	1357496	Argument	sizeof ( zend_code_block * )		1356741	2					
ANR	1357497	SizeofExpression	sizeof ( zend_code_block * )		1356741	0					
ANR	1357498	Sizeof	sizeof		1356741	0					
ANR	1357499	SizeofOperand	zend_code_block *		1356741	1					
ANR	1357500	ExpressionStatement	"cfg -> loop_brk = zend_arena_calloc ( & ctx -> arena , op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"	227:3:7990:8090	1356741	2	True				
ANR	1357501	AssignmentExpression	"cfg -> loop_brk = zend_arena_calloc ( & ctx -> arena , op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		1356741	0		=			
ANR	1357502	PtrMemberAccess	cfg -> loop_brk		1356741	0					
ANR	1357503	Identifier	cfg		1356741	0					
ANR	1357504	Identifier	loop_brk		1356741	1					
ANR	1357505	CallExpression	"zend_arena_calloc ( & ctx -> arena , op_array -> last_brk_cont , sizeof ( zend_code_block * ) )"		1356741	1					
ANR	1357506	Callee	zend_arena_calloc		1356741	0					
ANR	1357507	Identifier	zend_arena_calloc		1356741	0					
ANR	1357508	ArgumentList	& ctx -> arena		1356741	1					
ANR	1357509	Argument	& ctx -> arena		1356741	0					
ANR	1357510	UnaryOperationExpression	& ctx -> arena		1356741	0					
ANR	1357511	UnaryOperator	&		1356741	0					
ANR	1357512	PtrMemberAccess	ctx -> arena		1356741	1					
ANR	1357513	Identifier	ctx		1356741	0					
ANR	1357514	Identifier	arena		1356741	1					
ANR	1357515	Argument	op_array -> last_brk_cont		1356741	1					
ANR	1357516	PtrMemberAccess	op_array -> last_brk_cont		1356741	0					
ANR	1357517	Identifier	op_array		1356741	0					
ANR	1357518	Identifier	last_brk_cont		1356741	1					
ANR	1357519	Argument	sizeof ( zend_code_block * )		1356741	2					
ANR	1357520	SizeofExpression	sizeof ( zend_code_block * )		1356741	0					
ANR	1357521	Sizeof	sizeof		1356741	0					
ANR	1357522	SizeofOperand	zend_code_block *		1356741	1					
ANR	1357523	ExpressionStatement	j = 0	228:3:8095:8100	1356741	3	True				
ANR	1357524	AssignmentExpression	j = 0		1356741	0		=			
ANR	1357525	Identifier	j		1356741	0					
ANR	1357526	PrimaryExpression	0		1356741	1					
ANR	1357527	ForStatement	for ( i = 0 ; i < op_array -> last_brk_cont ; i ++ )		1356741	4					
ANR	1357528	ForInit	i = 0 ;	229:8:8110:8115	1356741	0	True				
ANR	1357529	AssignmentExpression	i = 0		1356741	0		=			
ANR	1357530	Identifier	i		1356741	0					
ANR	1357531	PrimaryExpression	0		1356741	1					
ANR	1357532	Condition	i < op_array -> last_brk_cont	229:15:8117:8142	1356741	1	True				
ANR	1357533	RelationalExpression	i < op_array -> last_brk_cont		1356741	0		<			
ANR	1357534	Identifier	i		1356741	0					
ANR	1357535	PtrMemberAccess	op_array -> last_brk_cont		1356741	1					
ANR	1357536	Identifier	op_array		1356741	0					
ANR	1357537	Identifier	last_brk_cont		1356741	1					
ANR	1357538	PostIncDecOperationExpression	i ++	229:43:8145:8147	1356741	2	True				
ANR	1357539	Identifier	i		1356741	0					
ANR	1357540	IncDec	++		1356741	1					
ANR	1357541	CompoundStatement		116:48:4236:4236	1356741	3					
ANR	1357542	IfStatement	if ( op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE ) )		1356741	0					
ANR	1357543	Condition	op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE )	230:8:8160:8544	1356741	0	True				
ANR	1357544	AndExpression	op_array -> brk_cont_array [ i ] . start >= 0 && ( op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE )		1356741	0		&&			
ANR	1357545	RelationalExpression	op_array -> brk_cont_array [ i ] . start >= 0		1356741	0		>=			
ANR	1357546	MemberAccess	op_array -> brk_cont_array [ i ] . start		1356741	0					
ANR	1357547	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357548	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357549	Identifier	op_array		1356741	0					
ANR	1357550	Identifier	brk_cont_array		1356741	1					
ANR	1357551	Identifier	i		1356741	1					
ANR	1357552	Identifier	start		1356741	1					
ANR	1357553	PrimaryExpression	0		1356741	1					
ANR	1357554	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE		1356741	1		||			
ANR	1357555	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FREE		1356741	0		==			
ANR	1357556	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741	0					
ANR	1357557	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		1356741	0					
ANR	1357558	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357559	Identifier	op_array		1356741	0					
ANR	1357560	Identifier	opcodes		1356741	1					
ANR	1357561	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1356741	1					
ANR	1357562	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357563	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357564	Identifier	op_array		1356741	0					
ANR	1357565	Identifier	brk_cont_array		1356741	1					
ANR	1357566	Identifier	i		1356741	1					
ANR	1357567	Identifier	brk		1356741	1					
ANR	1357568	Identifier	opcode		1356741	1					
ANR	1357569	Identifier	ZEND_FREE		1356741	1					
ANR	1357570	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE		1356741	1		||			
ANR	1357571	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_FE_FREE		1356741	0		==			
ANR	1357572	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741	0					
ANR	1357573	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		1356741	0					
ANR	1357574	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357575	Identifier	op_array		1356741	0					
ANR	1357576	Identifier	opcodes		1356741	1					
ANR	1357577	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1356741	1					
ANR	1357578	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357579	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357580	Identifier	op_array		1356741	0					
ANR	1357581	Identifier	brk_cont_array		1356741	1					
ANR	1357582	Identifier	i		1356741	1					
ANR	1357583	Identifier	brk		1356741	1					
ANR	1357584	Identifier	opcode		1356741	1					
ANR	1357585	Identifier	ZEND_FE_FREE		1356741	1					
ANR	1357586	OrExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END || op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE		1356741	1		||			
ANR	1357587	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_ROPE_END		1356741	0		==			
ANR	1357588	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741	0					
ANR	1357589	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		1356741	0					
ANR	1357590	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357591	Identifier	op_array		1356741	0					
ANR	1357592	Identifier	opcodes		1356741	1					
ANR	1357593	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1356741	1					
ANR	1357594	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357595	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357596	Identifier	op_array		1356741	0					
ANR	1357597	Identifier	brk_cont_array		1356741	1					
ANR	1357598	Identifier	i		1356741	1					
ANR	1357599	Identifier	brk		1356741	1					
ANR	1357600	Identifier	opcode		1356741	1					
ANR	1357601	Identifier	ZEND_ROPE_END		1356741	1					
ANR	1357602	EqualityExpression	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode == ZEND_END_SILENCE		1356741	1		==			
ANR	1357603	MemberAccess	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741	0					
ANR	1357604	ArrayIndexing	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ]		1356741	0					
ANR	1357605	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1357606	Identifier	op_array		1356741	0					
ANR	1357607	Identifier	opcodes		1356741	1					
ANR	1357608	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1356741	1					
ANR	1357609	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	0					
ANR	1357610	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357611	Identifier	op_array		1356741	0					
ANR	1357612	Identifier	brk_cont_array		1356741	1					
ANR	1357613	Identifier	i		1356741	1					
ANR	1357614	Identifier	brk		1356741	1					
ANR	1357615	Identifier	opcode		1356741	1					
ANR	1357616	Identifier	ZEND_END_SILENCE		1356741	1					
ANR	1357617	CompoundStatement		121:89:4633:4633	1356741	1					
ANR	1357618	IfStatement	if ( i != j )		1356741	0					
ANR	1357619	Condition	i != j	235:9:8558:8563	1356741	0	True				
ANR	1357620	EqualityExpression	i != j		1356741	0		!=			
ANR	1357621	Identifier	i		1356741	0					
ANR	1357622	Identifier	j		1356741	1					
ANR	1357623	CompoundStatement		122:17:4652:4652	1356741	1					
ANR	1357624	ExpressionStatement	op_array -> brk_cont_array [ j ] = op_array -> brk_cont_array [ i ]	236:6:8574:8631	1356741	0	True				
ANR	1357625	AssignmentExpression	op_array -> brk_cont_array [ j ] = op_array -> brk_cont_array [ i ]		1356741	0		=			
ANR	1357626	ArrayIndexing	op_array -> brk_cont_array [ j ]		1356741	0					
ANR	1357627	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357628	Identifier	op_array		1356741	0					
ANR	1357629	Identifier	brk_cont_array		1356741	1					
ANR	1357630	Identifier	j		1356741	1					
ANR	1357631	ArrayIndexing	op_array -> brk_cont_array [ i ]		1356741	1					
ANR	1357632	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357633	Identifier	op_array		1356741	0					
ANR	1357634	Identifier	brk_cont_array		1356741	1					
ANR	1357635	Identifier	i		1356741	1					
ANR	1357636	ExpressionStatement	cfg -> loop_start [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . start ]	238:5:8645:8708	1356741	1	True				
ANR	1357637	AssignmentExpression	cfg -> loop_start [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . start ]		1356741	0		=			
ANR	1357638	ArrayIndexing	cfg -> loop_start [ j ]		1356741	0					
ANR	1357639	PtrMemberAccess	cfg -> loop_start		1356741	0					
ANR	1357640	Identifier	cfg		1356741	0					
ANR	1357641	Identifier	loop_start		1356741	1					
ANR	1357642	Identifier	j		1356741	1					
ANR	1357643	UnaryOperationExpression	& blocks [ op_array -> brk_cont_array [ j ] . start ]		1356741	1					
ANR	1357644	UnaryOperator	&		1356741	0					
ANR	1357645	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . start ]		1356741	1					
ANR	1357646	Identifier	blocks		1356741	0					
ANR	1357647	MemberAccess	op_array -> brk_cont_array [ j ] . start		1356741	1					
ANR	1357648	ArrayIndexing	op_array -> brk_cont_array [ j ]		1356741	0					
ANR	1357649	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357650	Identifier	op_array		1356741	0					
ANR	1357651	Identifier	brk_cont_array		1356741	1					
ANR	1357652	Identifier	j		1356741	1					
ANR	1357653	Identifier	start		1356741	1					
ANR	1357654	ExpressionStatement	cfg -> loop_cont [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . cont ]	239:5:8715:8777	1356741	2	True				
ANR	1357655	AssignmentExpression	cfg -> loop_cont [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . cont ]		1356741	0		=			
ANR	1357656	ArrayIndexing	cfg -> loop_cont [ j ]		1356741	0					
ANR	1357657	PtrMemberAccess	cfg -> loop_cont		1356741	0					
ANR	1357658	Identifier	cfg		1356741	0					
ANR	1357659	Identifier	loop_cont		1356741	1					
ANR	1357660	Identifier	j		1356741	1					
ANR	1357661	UnaryOperationExpression	& blocks [ op_array -> brk_cont_array [ j ] . cont ]		1356741	1					
ANR	1357662	UnaryOperator	&		1356741	0					
ANR	1357663	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . cont ]		1356741	1					
ANR	1357664	Identifier	blocks		1356741	0					
ANR	1357665	MemberAccess	op_array -> brk_cont_array [ j ] . cont		1356741	1					
ANR	1357666	ArrayIndexing	op_array -> brk_cont_array [ j ]		1356741	0					
ANR	1357667	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357668	Identifier	op_array		1356741	0					
ANR	1357669	Identifier	brk_cont_array		1356741	1					
ANR	1357670	Identifier	j		1356741	1					
ANR	1357671	Identifier	cont		1356741	1					
ANR	1357672	ExpressionStatement	cfg -> loop_brk [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . brk ]	240:5:8784:8845	1356741	3	True				
ANR	1357673	AssignmentExpression	cfg -> loop_brk [ j ] = & blocks [ op_array -> brk_cont_array [ j ] . brk ]		1356741	0		=			
ANR	1357674	ArrayIndexing	cfg -> loop_brk [ j ]		1356741	0					
ANR	1357675	PtrMemberAccess	cfg -> loop_brk		1356741	0					
ANR	1357676	Identifier	cfg		1356741	0					
ANR	1357677	Identifier	loop_brk		1356741	1					
ANR	1357678	Identifier	j		1356741	1					
ANR	1357679	UnaryOperationExpression	& blocks [ op_array -> brk_cont_array [ j ] . brk ]		1356741	1					
ANR	1357680	UnaryOperator	&		1356741	0					
ANR	1357681	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . brk ]		1356741	1					
ANR	1357682	Identifier	blocks		1356741	0					
ANR	1357683	MemberAccess	op_array -> brk_cont_array [ j ] . brk		1356741	1					
ANR	1357684	ArrayIndexing	op_array -> brk_cont_array [ j ]		1356741	0					
ANR	1357685	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357686	Identifier	op_array		1356741	0					
ANR	1357687	Identifier	brk_cont_array		1356741	1					
ANR	1357688	Identifier	j		1356741	1					
ANR	1357689	Identifier	brk		1356741	1					
ANR	1357690	ExpressionStatement	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . start )	241:5:8852:8901	1356741	4	True				
ANR	1357691	CallExpression	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . start )		1356741	0					
ANR	1357692	Callee	START_BLOCK_OP		1356741	0					
ANR	1357693	Identifier	START_BLOCK_OP		1356741	0					
ANR	1357694	ArgumentList	op_array -> brk_cont_array [ j ] . start		1356741	1					
ANR	1357695	Argument	op_array -> brk_cont_array [ j ] . start		1356741	0					
ANR	1357696	MemberAccess	op_array -> brk_cont_array [ j ] . start		1356741	0					
ANR	1357697	ArrayIndexing	op_array -> brk_cont_array [ j ]		1356741	0					
ANR	1357698	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357699	Identifier	op_array		1356741	0					
ANR	1357700	Identifier	brk_cont_array		1356741	1					
ANR	1357701	Identifier	j		1356741	1					
ANR	1357702	Identifier	start		1356741	1					
ANR	1357703	ExpressionStatement	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . cont )	242:5:8908:8956	1356741	5	True				
ANR	1357704	CallExpression	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . cont )		1356741	0					
ANR	1357705	Callee	START_BLOCK_OP		1356741	0					
ANR	1357706	Identifier	START_BLOCK_OP		1356741	0					
ANR	1357707	ArgumentList	op_array -> brk_cont_array [ j ] . cont		1356741	1					
ANR	1357708	Argument	op_array -> brk_cont_array [ j ] . cont		1356741	0					
ANR	1357709	MemberAccess	op_array -> brk_cont_array [ j ] . cont		1356741	0					
ANR	1357710	ArrayIndexing	op_array -> brk_cont_array [ j ]		1356741	0					
ANR	1357711	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357712	Identifier	op_array		1356741	0					
ANR	1357713	Identifier	brk_cont_array		1356741	1					
ANR	1357714	Identifier	j		1356741	1					
ANR	1357715	Identifier	cont		1356741	1					
ANR	1357716	ExpressionStatement	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . brk )	243:5:8963:9010	1356741	6	True				
ANR	1357717	CallExpression	START_BLOCK_OP ( op_array -> brk_cont_array [ j ] . brk )		1356741	0					
ANR	1357718	Callee	START_BLOCK_OP		1356741	0					
ANR	1357719	Identifier	START_BLOCK_OP		1356741	0					
ANR	1357720	ArgumentList	op_array -> brk_cont_array [ j ] . brk		1356741	1					
ANR	1357721	Argument	op_array -> brk_cont_array [ j ] . brk		1356741	0					
ANR	1357722	MemberAccess	op_array -> brk_cont_array [ j ] . brk		1356741	0					
ANR	1357723	ArrayIndexing	op_array -> brk_cont_array [ j ]		1356741	0					
ANR	1357724	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357725	Identifier	op_array		1356741	0					
ANR	1357726	Identifier	brk_cont_array		1356741	1					
ANR	1357727	Identifier	j		1356741	1					
ANR	1357728	Identifier	brk		1356741	1					
ANR	1357729	ExpressionStatement	blocks [ op_array -> brk_cont_array [ j ] . start ] . protected = 1	244:5:9017:9072	1356741	7	True				
ANR	1357730	AssignmentExpression	blocks [ op_array -> brk_cont_array [ j ] . start ] . protected = 1		1356741	0		=			
ANR	1357731	MemberAccess	blocks [ op_array -> brk_cont_array [ j ] . start ] . protected		1356741	0					
ANR	1357732	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . start ]		1356741	0					
ANR	1357733	Identifier	blocks		1356741	0					
ANR	1357734	MemberAccess	op_array -> brk_cont_array [ j ] . start		1356741	1					
ANR	1357735	ArrayIndexing	op_array -> brk_cont_array [ j ]		1356741	0					
ANR	1357736	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357737	Identifier	op_array		1356741	0					
ANR	1357738	Identifier	brk_cont_array		1356741	1					
ANR	1357739	Identifier	j		1356741	1					
ANR	1357740	Identifier	start		1356741	1					
ANR	1357741	Identifier	protected		1356741	1					
ANR	1357742	PrimaryExpression	1		1356741	1					
ANR	1357743	ExpressionStatement	blocks [ op_array -> brk_cont_array [ j ] . brk ] . protected = 1	245:5:9079:9132	1356741	8	True				
ANR	1357744	AssignmentExpression	blocks [ op_array -> brk_cont_array [ j ] . brk ] . protected = 1		1356741	0		=			
ANR	1357745	MemberAccess	blocks [ op_array -> brk_cont_array [ j ] . brk ] . protected		1356741	0					
ANR	1357746	ArrayIndexing	blocks [ op_array -> brk_cont_array [ j ] . brk ]		1356741	0					
ANR	1357747	Identifier	blocks		1356741	0					
ANR	1357748	MemberAccess	op_array -> brk_cont_array [ j ] . brk		1356741	1					
ANR	1357749	ArrayIndexing	op_array -> brk_cont_array [ j ]		1356741	0					
ANR	1357750	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357751	Identifier	op_array		1356741	0					
ANR	1357752	Identifier	brk_cont_array		1356741	1					
ANR	1357753	Identifier	j		1356741	1					
ANR	1357754	Identifier	brk		1356741	1					
ANR	1357755	Identifier	protected		1356741	1					
ANR	1357756	PrimaryExpression	1		1356741	1					
ANR	1357757	ExpressionStatement	j ++	246:5:9139:9142	1356741	9	True				
ANR	1357758	PostIncDecOperationExpression	j ++		1356741	0					
ANR	1357759	Identifier	j		1356741	0					
ANR	1357760	IncDec	++		1356741	1					
ANR	1357761	ExpressionStatement	op_array -> last_brk_cont = j	249:3:9158:9185	1356741	5	True				
ANR	1357762	AssignmentExpression	op_array -> last_brk_cont = j		1356741	0		=			
ANR	1357763	PtrMemberAccess	op_array -> last_brk_cont		1356741	0					
ANR	1357764	Identifier	op_array		1356741	0					
ANR	1357765	Identifier	last_brk_cont		1356741	1					
ANR	1357766	Identifier	j		1356741	1					
ANR	1357767	ElseStatement	else		1356741	0					
ANR	1357768	CompoundStatement		137:9:5282:5282	1356741	0					
ANR	1357769	ExpressionStatement	efree ( op_array -> brk_cont_array )	251:3:9201:9232	1356741	0	True				
ANR	1357770	CallExpression	efree ( op_array -> brk_cont_array )		1356741	0					
ANR	1357771	Callee	efree		1356741	0					
ANR	1357772	Identifier	efree		1356741	0					
ANR	1357773	ArgumentList	op_array -> brk_cont_array		1356741	1					
ANR	1357774	Argument	op_array -> brk_cont_array		1356741	0					
ANR	1357775	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357776	Identifier	op_array		1356741	0					
ANR	1357777	Identifier	brk_cont_array		1356741	1					
ANR	1357778	ExpressionStatement	op_array -> brk_cont_array = NULL	252:3:9237:9268	1356741	1	True				
ANR	1357779	AssignmentExpression	op_array -> brk_cont_array = NULL		1356741	0		=			
ANR	1357780	PtrMemberAccess	op_array -> brk_cont_array		1356741	0					
ANR	1357781	Identifier	op_array		1356741	0					
ANR	1357782	Identifier	brk_cont_array		1356741	1					
ANR	1357783	Identifier	NULL		1356741	1					
ANR	1357784	ExpressionStatement	op_array -> last_brk_cont = 0	253:3:9273:9300	1356741	2	True				
ANR	1357785	AssignmentExpression	op_array -> last_brk_cont = 0		1356741	0		=			
ANR	1357786	PtrMemberAccess	op_array -> last_brk_cont		1356741	0					
ANR	1357787	Identifier	op_array		1356741	0					
ANR	1357788	Identifier	last_brk_cont		1356741	1					
ANR	1357789	PrimaryExpression	0		1356741	1					
ANR	1357790	ExpressionStatement	cur_block = blocks	258:1:9349:9367	1356741	12	True				
ANR	1357791	AssignmentExpression	cur_block = blocks		1356741	0		=			
ANR	1357792	Identifier	cur_block		1356741	0					
ANR	1357793	Identifier	blocks		1356741	1					
ANR	1357794	ForStatement	for ( opno = 1 ; opno < op_array -> last ; opno ++ )		1356741	13					
ANR	1357795	ForInit	opno = 1 ;	259:6:9375:9383	1356741	0	True				
ANR	1357796	AssignmentExpression	opno = 1		1356741	0		=			
ANR	1357797	Identifier	opno		1356741	0					
ANR	1357798	PrimaryExpression	1		1356741	1					
ANR	1357799	Condition	opno < op_array -> last	259:16:9385:9405	1356741	1	True				
ANR	1357800	RelationalExpression	opno < op_array -> last		1356741	0		<			
ANR	1357801	Identifier	opno		1356741	0					
ANR	1357802	PtrMemberAccess	op_array -> last		1356741	1					
ANR	1357803	Identifier	op_array		1356741	0					
ANR	1357804	Identifier	last		1356741	1					
ANR	1357805	PostIncDecOperationExpression	opno ++	259:39:9408:9413	1356741	2	True				
ANR	1357806	Identifier	opno		1356741	0					
ANR	1357807	IncDec	++		1356741	1					
ANR	1357808	CompoundStatement		146:47:5502:5502	1356741	3					
ANR	1357809	IfStatement	if ( blocks [ opno ] . start_opline )		1356741	0					
ANR	1357810	Condition	blocks [ opno ] . start_opline	260:6:9424:9448	1356741	0	True				
ANR	1357811	MemberAccess	blocks [ opno ] . start_opline		1356741	0					
ANR	1357812	ArrayIndexing	blocks [ opno ]		1356741	0					
ANR	1357813	Identifier	blocks		1356741	0					
ANR	1357814	Identifier	opno		1356741	1					
ANR	1357815	Identifier	start_opline		1356741	1					
ANR	1357816	CompoundStatement		147:33:5537:5537	1356741	1					
ANR	1357817	ExpressionStatement	cur_block -> len = blocks [ opno ] . start_opline - cur_block -> start_opline	262:3:9487:9555	1356741	0	True				
ANR	1357818	AssignmentExpression	cur_block -> len = blocks [ opno ] . start_opline - cur_block -> start_opline		1356741	0		=			
ANR	1357819	PtrMemberAccess	cur_block -> len		1356741	0					
ANR	1357820	Identifier	cur_block		1356741	0					
ANR	1357821	Identifier	len		1356741	1					
ANR	1357822	AdditiveExpression	blocks [ opno ] . start_opline - cur_block -> start_opline		1356741	1		-			
ANR	1357823	MemberAccess	blocks [ opno ] . start_opline		1356741	0					
ANR	1357824	ArrayIndexing	blocks [ opno ]		1356741	0					
ANR	1357825	Identifier	blocks		1356741	0					
ANR	1357826	Identifier	opno		1356741	1					
ANR	1357827	Identifier	start_opline		1356741	1					
ANR	1357828	PtrMemberAccess	cur_block -> start_opline		1356741	1					
ANR	1357829	Identifier	cur_block		1356741	0					
ANR	1357830	Identifier	start_opline		1356741	1					
ANR	1357831	ExpressionStatement	cur_block -> next = & blocks [ opno ]	263:3:9560:9591	1356741	1	True				
ANR	1357832	AssignmentExpression	cur_block -> next = & blocks [ opno ]		1356741	0		=			
ANR	1357833	PtrMemberAccess	cur_block -> next		1356741	0					
ANR	1357834	Identifier	cur_block		1356741	0					
ANR	1357835	Identifier	next		1356741	1					
ANR	1357836	UnaryOperationExpression	& blocks [ opno ]		1356741	1					
ANR	1357837	UnaryOperator	&		1356741	0					
ANR	1357838	ArrayIndexing	blocks [ opno ]		1356741	1					
ANR	1357839	Identifier	blocks		1356741	0					
ANR	1357840	Identifier	opno		1356741	1					
ANR	1357841	ExpressionStatement	opline = blocks [ opno ] . start_opline - 1	265:3:9644:9682	1356741	2	True				
ANR	1357842	AssignmentExpression	opline = blocks [ opno ] . start_opline - 1		1356741	0		=			
ANR	1357843	Identifier	opline		1356741	0					
ANR	1357844	AdditiveExpression	blocks [ opno ] . start_opline - 1		1356741	1		-			
ANR	1357845	MemberAccess	blocks [ opno ] . start_opline		1356741	0					
ANR	1357846	ArrayIndexing	blocks [ opno ]		1356741	0					
ANR	1357847	Identifier	blocks		1356741	0					
ANR	1357848	Identifier	opno		1356741	1					
ANR	1357849	Identifier	start_opline		1356741	1					
ANR	1357850	PrimaryExpression	1		1356741	1					
ANR	1357851	IfStatement	if ( opline -> opcode == ZEND_OP_DATA )		1356741	3					
ANR	1357852	Condition	opline -> opcode == ZEND_OP_DATA	266:7:9691:9720	1356741	0	True				
ANR	1357853	EqualityExpression	opline -> opcode == ZEND_OP_DATA		1356741	0		==			
ANR	1357854	PtrMemberAccess	opline -> opcode		1356741	0					
ANR	1357855	Identifier	opline		1356741	0					
ANR	1357856	Identifier	opcode		1356741	1					
ANR	1357857	Identifier	ZEND_OP_DATA		1356741	1					
ANR	1357858	CompoundStatement		153:39:5809:5809	1356741	1					
ANR	1357859	ExpressionStatement	opline --	267:4:9729:9737	1356741	0	True				
ANR	1357860	PostIncDecOperationExpression	opline --		1356741	0					
ANR	1357861	Identifier	opline		1356741	0					
ANR	1357862	IncDec	--		1356741	1					
ANR	1357863	SwitchStatement	switch ( ( unsigned ) opline -> opcode )		1356741	4					
ANR	1357864	Condition	( unsigned ) opline -> opcode	269:10:9754:9777	1356741	0	True				
ANR	1357865	CastExpression	( unsigned ) opline -> opcode		1356741	0					
ANR	1357866	CastTarget	unsigned		1356741	0					
ANR	1357867	PtrMemberAccess	opline -> opcode		1356741	1					
ANR	1357868	Identifier	opline		1356741	0					
ANR	1357869	Identifier	opcode		1356741	1					
ANR	1357870	CompoundStatement		156:36:5866:5866	1356741	1					
ANR	1357871	Label	case ZEND_RETURN :	270:4:9786:9802	1356741	0	True				
ANR	1357872	Identifier	ZEND_RETURN		1356741	0					
ANR	1357873	Label	case ZEND_RETURN_BY_REF :	271:4:9808:9831	1356741	1	True				
ANR	1357874	Identifier	ZEND_RETURN_BY_REF		1356741	0					
ANR	1357875	Label	case ZEND_GENERATOR_RETURN :	272:4:9837:9863	1356741	2	True				
ANR	1357876	Identifier	ZEND_GENERATOR_RETURN		1356741	0					
ANR	1357877	Label	case ZEND_EXIT :	273:4:9869:9883	1356741	3	True				
ANR	1357878	Identifier	ZEND_EXIT		1356741	0					
ANR	1357879	Label	case ZEND_THROW :	274:4:9889:9904	1356741	4	True				
ANR	1357880	Identifier	ZEND_THROW		1356741	0					
ANR	1357881	BreakStatement	break ;	275:5:9911:9916	1356741	5	True				
ANR	1357882	Label	case ZEND_FAST_CALL :	276:4:9922:9941	1356741	6	True				
ANR	1357883	Identifier	ZEND_FAST_CALL		1356741	0					
ANR	1357884	IfStatement	if ( opline -> extended_value )		1356741	7					
ANR	1357885	Condition	opline -> extended_value	277:9:9952:9973	1356741	0	True				
ANR	1357886	PtrMemberAccess	opline -> extended_value		1356741	0					
ANR	1357887	Identifier	opline		1356741	0					
ANR	1357888	Identifier	extended_value		1356741	1					
ANR	1357889	CompoundStatement		164:33:6062:6062	1356741	1					
ANR	1357890	ExpressionStatement	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]	278:6:9984:10040	1356741	0	True				
ANR	1357891	AssignmentExpression	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	0		=			
ANR	1357892	PtrMemberAccess	cur_block -> op2_to		1356741	0					
ANR	1357893	Identifier	cur_block		1356741	0					
ANR	1357894	Identifier	op2_to		1356741	1					
ANR	1357895	UnaryOperationExpression	& blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	1					
ANR	1357896	UnaryOperator	&		1356741	0					
ANR	1357897	ArrayIndexing	blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	1					
ANR	1357898	Identifier	blocks		1356741	0					
ANR	1357899	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1356741	1					
ANR	1357900	CallExpression	ZEND_OP2 ( opline )		1356741	0					
ANR	1357901	Callee	ZEND_OP2		1356741	0					
ANR	1357902	Identifier	ZEND_OP2		1356741	0					
ANR	1357903	ArgumentList	opline		1356741	1					
ANR	1357904	Argument	opline		1356741	0					
ANR	1357905	Identifier	opline		1356741	0					
ANR	1357906	Identifier	opline_num		1356741	1					
ANR	1357907	ExpressionStatement	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]	280:5:10054:10110	1356741	8	True				
ANR	1357908	AssignmentExpression	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]		1356741	0		=			
ANR	1357909	PtrMemberAccess	cur_block -> op1_to		1356741	0					
ANR	1357910	Identifier	cur_block		1356741	0					
ANR	1357911	Identifier	op1_to		1356741	1					
ANR	1357912	UnaryOperationExpression	& blocks [ ZEND_OP1 ( opline ) . opline_num ]		1356741	1					
ANR	1357913	UnaryOperator	&		1356741	0					
ANR	1357914	ArrayIndexing	blocks [ ZEND_OP1 ( opline ) . opline_num ]		1356741	1					
ANR	1357915	Identifier	blocks		1356741	0					
ANR	1357916	MemberAccess	ZEND_OP1 ( opline ) . opline_num		1356741	1					
ANR	1357917	CallExpression	ZEND_OP1 ( opline )		1356741	0					
ANR	1357918	Callee	ZEND_OP1		1356741	0					
ANR	1357919	Identifier	ZEND_OP1		1356741	0					
ANR	1357920	ArgumentList	opline		1356741	1					
ANR	1357921	Argument	opline		1356741	0					
ANR	1357922	Identifier	opline		1356741	0					
ANR	1357923	Identifier	opline_num		1356741	1					
ANR	1357924	BreakStatement	break ;	281:5:10117:10122	1356741	9	True				
ANR	1357925	Label	case ZEND_FAST_RET :	282:4:10128:10146	1356741	10	True				
ANR	1357926	Identifier	ZEND_FAST_RET		1356741	0					
ANR	1357927	IfStatement	if ( opline -> extended_value )		1356741	11					
ANR	1357928	Condition	opline -> extended_value	283:9:10157:10178	1356741	0	True				
ANR	1357929	PtrMemberAccess	opline -> extended_value		1356741	0					
ANR	1357930	Identifier	opline		1356741	0					
ANR	1357931	Identifier	extended_value		1356741	1					
ANR	1357932	CompoundStatement		170:33:6267:6267	1356741	1					
ANR	1357933	ExpressionStatement	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]	284:6:10189:10245	1356741	0	True				
ANR	1357934	AssignmentExpression	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	0		=			
ANR	1357935	PtrMemberAccess	cur_block -> op2_to		1356741	0					
ANR	1357936	Identifier	cur_block		1356741	0					
ANR	1357937	Identifier	op2_to		1356741	1					
ANR	1357938	UnaryOperationExpression	& blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	1					
ANR	1357939	UnaryOperator	&		1356741	0					
ANR	1357940	ArrayIndexing	blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	1					
ANR	1357941	Identifier	blocks		1356741	0					
ANR	1357942	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1356741	1					
ANR	1357943	CallExpression	ZEND_OP2 ( opline )		1356741	0					
ANR	1357944	Callee	ZEND_OP2		1356741	0					
ANR	1357945	Identifier	ZEND_OP2		1356741	0					
ANR	1357946	ArgumentList	opline		1356741	1					
ANR	1357947	Argument	opline		1356741	0					
ANR	1357948	Identifier	opline		1356741	0					
ANR	1357949	Identifier	opline_num		1356741	1					
ANR	1357950	BreakStatement	break ;	286:5:10259:10264	1356741	12	True				
ANR	1357951	Label	case ZEND_JMP :	287:4:10270:10283	1356741	13	True				
ANR	1357952	Identifier	ZEND_JMP		1356741	0					
ANR	1357953	ExpressionStatement	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]	288:5:10290:10346	1356741	14	True				
ANR	1357954	AssignmentExpression	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]		1356741	0		=			
ANR	1357955	PtrMemberAccess	cur_block -> op1_to		1356741	0					
ANR	1357956	Identifier	cur_block		1356741	0					
ANR	1357957	Identifier	op1_to		1356741	1					
ANR	1357958	UnaryOperationExpression	& blocks [ ZEND_OP1 ( opline ) . opline_num ]		1356741	1					
ANR	1357959	UnaryOperator	&		1356741	0					
ANR	1357960	ArrayIndexing	blocks [ ZEND_OP1 ( opline ) . opline_num ]		1356741	1					
ANR	1357961	Identifier	blocks		1356741	0					
ANR	1357962	MemberAccess	ZEND_OP1 ( opline ) . opline_num		1356741	1					
ANR	1357963	CallExpression	ZEND_OP1 ( opline )		1356741	0					
ANR	1357964	Callee	ZEND_OP1		1356741	0					
ANR	1357965	Identifier	ZEND_OP1		1356741	0					
ANR	1357966	ArgumentList	opline		1356741	1					
ANR	1357967	Argument	opline		1356741	0					
ANR	1357968	Identifier	opline		1356741	0					
ANR	1357969	Identifier	opline_num		1356741	1					
ANR	1357970	BreakStatement	break ;	289:5:10353:10358	1356741	15	True				
ANR	1357971	Label	case ZEND_DECLARE_ANON_CLASS :	290:4:10364:10392	1356741	16	True				
ANR	1357972	Identifier	ZEND_DECLARE_ANON_CLASS		1356741	0					
ANR	1357973	Label	case ZEND_DECLARE_ANON_INHERITED_CLASS :	291:4:10398:10436	1356741	17	True				
ANR	1357974	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		1356741	0					
ANR	1357975	ExpressionStatement	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]	292:5:10443:10499	1356741	18	True				
ANR	1357976	AssignmentExpression	cur_block -> op1_to = & blocks [ ZEND_OP1 ( opline ) . opline_num ]		1356741	0		=			
ANR	1357977	PtrMemberAccess	cur_block -> op1_to		1356741	0					
ANR	1357978	Identifier	cur_block		1356741	0					
ANR	1357979	Identifier	op1_to		1356741	1					
ANR	1357980	UnaryOperationExpression	& blocks [ ZEND_OP1 ( opline ) . opline_num ]		1356741	1					
ANR	1357981	UnaryOperator	&		1356741	0					
ANR	1357982	ArrayIndexing	blocks [ ZEND_OP1 ( opline ) . opline_num ]		1356741	1					
ANR	1357983	Identifier	blocks		1356741	0					
ANR	1357984	MemberAccess	ZEND_OP1 ( opline ) . opline_num		1356741	1					
ANR	1357985	CallExpression	ZEND_OP1 ( opline )		1356741	0					
ANR	1357986	Callee	ZEND_OP1		1356741	0					
ANR	1357987	Identifier	ZEND_OP1		1356741	0					
ANR	1357988	ArgumentList	opline		1356741	1					
ANR	1357989	Argument	opline		1356741	0					
ANR	1357990	Identifier	opline		1356741	0					
ANR	1357991	Identifier	opline_num		1356741	1					
ANR	1357992	ExpressionStatement	cur_block -> follow_to = & blocks [ opno ]	293:5:10506:10542	1356741	19	True				
ANR	1357993	AssignmentExpression	cur_block -> follow_to = & blocks [ opno ]		1356741	0		=			
ANR	1357994	PtrMemberAccess	cur_block -> follow_to		1356741	0					
ANR	1357995	Identifier	cur_block		1356741	0					
ANR	1357996	Identifier	follow_to		1356741	1					
ANR	1357997	UnaryOperationExpression	& blocks [ opno ]		1356741	1					
ANR	1357998	UnaryOperator	&		1356741	0					
ANR	1357999	ArrayIndexing	blocks [ opno ]		1356741	1					
ANR	1358000	Identifier	blocks		1356741	0					
ANR	1358001	Identifier	opno		1356741	1					
ANR	1358002	BreakStatement	break ;	294:5:10549:10554	1356741	20	True				
ANR	1358003	Label	case ZEND_JMPZNZ :	295:4:10560:10576	1356741	21	True				
ANR	1358004	Identifier	ZEND_JMPZNZ		1356741	0					
ANR	1358005	ExpressionStatement	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]	296:5:10583:10639	1356741	22	True				
ANR	1358006	AssignmentExpression	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	0		=			
ANR	1358007	PtrMemberAccess	cur_block -> op2_to		1356741	0					
ANR	1358008	Identifier	cur_block		1356741	0					
ANR	1358009	Identifier	op2_to		1356741	1					
ANR	1358010	UnaryOperationExpression	& blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	1					
ANR	1358011	UnaryOperator	&		1356741	0					
ANR	1358012	ArrayIndexing	blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	1					
ANR	1358013	Identifier	blocks		1356741	0					
ANR	1358014	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1356741	1					
ANR	1358015	CallExpression	ZEND_OP2 ( opline )		1356741	0					
ANR	1358016	Callee	ZEND_OP2		1356741	0					
ANR	1358017	Identifier	ZEND_OP2		1356741	0					
ANR	1358018	ArgumentList	opline		1356741	1					
ANR	1358019	Argument	opline		1356741	0					
ANR	1358020	Identifier	opline		1356741	0					
ANR	1358021	Identifier	opline_num		1356741	1					
ANR	1358022	ExpressionStatement	cur_block -> ext_to = & blocks [ opline -> extended_value ]	297:5:10646:10697	1356741	23	True				
ANR	1358023	AssignmentExpression	cur_block -> ext_to = & blocks [ opline -> extended_value ]		1356741	0		=			
ANR	1358024	PtrMemberAccess	cur_block -> ext_to		1356741	0					
ANR	1358025	Identifier	cur_block		1356741	0					
ANR	1358026	Identifier	ext_to		1356741	1					
ANR	1358027	UnaryOperationExpression	& blocks [ opline -> extended_value ]		1356741	1					
ANR	1358028	UnaryOperator	&		1356741	0					
ANR	1358029	ArrayIndexing	blocks [ opline -> extended_value ]		1356741	1					
ANR	1358030	Identifier	blocks		1356741	0					
ANR	1358031	PtrMemberAccess	opline -> extended_value		1356741	1					
ANR	1358032	Identifier	opline		1356741	0					
ANR	1358033	Identifier	extended_value		1356741	1					
ANR	1358034	BreakStatement	break ;	298:5:10704:10709	1356741	24	True				
ANR	1358035	Label	case ZEND_CATCH :	299:4:10715:10730	1356741	25	True				
ANR	1358036	Identifier	ZEND_CATCH		1356741	0					
ANR	1358037	ExpressionStatement	cur_block -> ext_to = & blocks [ opline -> extended_value ]	300:5:10737:10788	1356741	26	True				
ANR	1358038	AssignmentExpression	cur_block -> ext_to = & blocks [ opline -> extended_value ]		1356741	0		=			
ANR	1358039	PtrMemberAccess	cur_block -> ext_to		1356741	0					
ANR	1358040	Identifier	cur_block		1356741	0					
ANR	1358041	Identifier	ext_to		1356741	1					
ANR	1358042	UnaryOperationExpression	& blocks [ opline -> extended_value ]		1356741	1					
ANR	1358043	UnaryOperator	&		1356741	0					
ANR	1358044	ArrayIndexing	blocks [ opline -> extended_value ]		1356741	1					
ANR	1358045	Identifier	blocks		1356741	0					
ANR	1358046	PtrMemberAccess	opline -> extended_value		1356741	1					
ANR	1358047	Identifier	opline		1356741	0					
ANR	1358048	Identifier	extended_value		1356741	1					
ANR	1358049	ExpressionStatement	cur_block -> follow_to = & blocks [ opno ]	301:5:10795:10831	1356741	27	True				
ANR	1358050	AssignmentExpression	cur_block -> follow_to = & blocks [ opno ]		1356741	0		=			
ANR	1358051	PtrMemberAccess	cur_block -> follow_to		1356741	0					
ANR	1358052	Identifier	cur_block		1356741	0					
ANR	1358053	Identifier	follow_to		1356741	1					
ANR	1358054	UnaryOperationExpression	& blocks [ opno ]		1356741	1					
ANR	1358055	UnaryOperator	&		1356741	0					
ANR	1358056	ArrayIndexing	blocks [ opno ]		1356741	1					
ANR	1358057	Identifier	blocks		1356741	0					
ANR	1358058	Identifier	opno		1356741	1					
ANR	1358059	BreakStatement	break ;	302:5:10838:10843	1356741	28	True				
ANR	1358060	Label	case ZEND_FE_FETCH_R :	303:4:10849:10869	1356741	29	True				
ANR	1358061	Identifier	ZEND_FE_FETCH_R		1356741	0					
ANR	1358062	Label	case ZEND_FE_FETCH_RW :	304:4:10875:10896	1356741	30	True				
ANR	1358063	Identifier	ZEND_FE_FETCH_RW		1356741	0					
ANR	1358064	ExpressionStatement	cur_block -> ext_to = & blocks [ opline -> extended_value ]	305:5:10903:10954	1356741	31	True				
ANR	1358065	AssignmentExpression	cur_block -> ext_to = & blocks [ opline -> extended_value ]		1356741	0		=			
ANR	1358066	PtrMemberAccess	cur_block -> ext_to		1356741	0					
ANR	1358067	Identifier	cur_block		1356741	0					
ANR	1358068	Identifier	ext_to		1356741	1					
ANR	1358069	UnaryOperationExpression	& blocks [ opline -> extended_value ]		1356741	1					
ANR	1358070	UnaryOperator	&		1356741	0					
ANR	1358071	ArrayIndexing	blocks [ opline -> extended_value ]		1356741	1					
ANR	1358072	Identifier	blocks		1356741	0					
ANR	1358073	PtrMemberAccess	opline -> extended_value		1356741	1					
ANR	1358074	Identifier	opline		1356741	0					
ANR	1358075	Identifier	extended_value		1356741	1					
ANR	1358076	ExpressionStatement	cur_block -> follow_to = & blocks [ opno ]	306:5:10961:10997	1356741	32	True				
ANR	1358077	AssignmentExpression	cur_block -> follow_to = & blocks [ opno ]		1356741	0		=			
ANR	1358078	PtrMemberAccess	cur_block -> follow_to		1356741	0					
ANR	1358079	Identifier	cur_block		1356741	0					
ANR	1358080	Identifier	follow_to		1356741	1					
ANR	1358081	UnaryOperationExpression	& blocks [ opno ]		1356741	1					
ANR	1358082	UnaryOperator	&		1356741	0					
ANR	1358083	ArrayIndexing	blocks [ opno ]		1356741	1					
ANR	1358084	Identifier	blocks		1356741	0					
ANR	1358085	Identifier	opno		1356741	1					
ANR	1358086	BreakStatement	break ;	307:5:11004:11009	1356741	33	True				
ANR	1358087	Label	case ZEND_JMPZ :	308:4:11015:11029	1356741	34	True				
ANR	1358088	Identifier	ZEND_JMPZ		1356741	0					
ANR	1358089	Label	case ZEND_JMPNZ :	309:4:11035:11050	1356741	35	True				
ANR	1358090	Identifier	ZEND_JMPNZ		1356741	0					
ANR	1358091	Label	case ZEND_JMPZ_EX :	310:4:11056:11073	1356741	36	True				
ANR	1358092	Identifier	ZEND_JMPZ_EX		1356741	0					
ANR	1358093	Label	case ZEND_JMPNZ_EX :	311:4:11079:11097	1356741	37	True				
ANR	1358094	Identifier	ZEND_JMPNZ_EX		1356741	0					
ANR	1358095	Label	case ZEND_FE_RESET_R :	312:4:11103:11123	1356741	38	True				
ANR	1358096	Identifier	ZEND_FE_RESET_R		1356741	0					
ANR	1358097	Label	case ZEND_FE_RESET_RW :	313:4:11129:11150	1356741	39	True				
ANR	1358098	Identifier	ZEND_FE_RESET_RW		1356741	0					
ANR	1358099	Label	case ZEND_NEW :	314:4:11156:11169	1356741	40	True				
ANR	1358100	Identifier	ZEND_NEW		1356741	0					
ANR	1358101	Label	case ZEND_JMP_SET :	315:4:11175:11192	1356741	41	True				
ANR	1358102	Identifier	ZEND_JMP_SET		1356741	0					
ANR	1358103	Label	case ZEND_COALESCE :	316:4:11198:11216	1356741	42	True				
ANR	1358104	Identifier	ZEND_COALESCE		1356741	0					
ANR	1358105	Label	case ZEND_ASSERT_CHECK :	317:4:11222:11244	1356741	43	True				
ANR	1358106	Identifier	ZEND_ASSERT_CHECK		1356741	0					
ANR	1358107	ExpressionStatement	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]	318:5:11251:11307	1356741	44	True				
ANR	1358108	AssignmentExpression	cur_block -> op2_to = & blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	0		=			
ANR	1358109	PtrMemberAccess	cur_block -> op2_to		1356741	0					
ANR	1358110	Identifier	cur_block		1356741	0					
ANR	1358111	Identifier	op2_to		1356741	1					
ANR	1358112	UnaryOperationExpression	& blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	1					
ANR	1358113	UnaryOperator	&		1356741	0					
ANR	1358114	ArrayIndexing	blocks [ ZEND_OP2 ( opline ) . opline_num ]		1356741	1					
ANR	1358115	Identifier	blocks		1356741	0					
ANR	1358116	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1356741	1					
ANR	1358117	CallExpression	ZEND_OP2 ( opline )		1356741	0					
ANR	1358118	Callee	ZEND_OP2		1356741	0					
ANR	1358119	Identifier	ZEND_OP2		1356741	0					
ANR	1358120	ArgumentList	opline		1356741	1					
ANR	1358121	Argument	opline		1356741	0					
ANR	1358122	Identifier	opline		1356741	0					
ANR	1358123	Identifier	opline_num		1356741	1					
ANR	1358124	Label	default :	320:4:11352:11359	1356741	45	True				
ANR	1358125	Identifier	default		1356741	0					
ANR	1358126	ExpressionStatement	cur_block -> follow_to = & blocks [ opno ]	322:5:11401:11437	1356741	46	True				
ANR	1358127	AssignmentExpression	cur_block -> follow_to = & blocks [ opno ]		1356741	0		=			
ANR	1358128	PtrMemberAccess	cur_block -> follow_to		1356741	0					
ANR	1358129	Identifier	cur_block		1356741	0					
ANR	1358130	Identifier	follow_to		1356741	1					
ANR	1358131	UnaryOperationExpression	& blocks [ opno ]		1356741	1					
ANR	1358132	UnaryOperator	&		1356741	0					
ANR	1358133	ArrayIndexing	blocks [ opno ]		1356741	1					
ANR	1358134	Identifier	blocks		1356741	0					
ANR	1358135	Identifier	opno		1356741	1					
ANR	1358136	BreakStatement	break ;	323:5:11444:11449	1356741	47	True				
ANR	1358137	ExpressionStatement	"print_block ( cur_block , op_array -> opcodes , """" )"	325:3:11459:11504	1356741	5	True				
ANR	1358138	CallExpression	"print_block ( cur_block , op_array -> opcodes , """" )"		1356741	0					
ANR	1358139	Callee	print_block		1356741	0					
ANR	1358140	Identifier	print_block		1356741	0					
ANR	1358141	ArgumentList	cur_block		1356741	1					
ANR	1358142	Argument	cur_block		1356741	0					
ANR	1358143	Identifier	cur_block		1356741	0					
ANR	1358144	Argument	op_array -> opcodes		1356741	1					
ANR	1358145	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1358146	Identifier	op_array		1356741	0					
ANR	1358147	Identifier	opcodes		1356741	1					
ANR	1358148	Argument	""""""		1356741	2					
ANR	1358149	PrimaryExpression	""""""		1356741	0					
ANR	1358150	ExpressionStatement	cur_block = cur_block -> next	326:3:11509:11536	1356741	6	True				
ANR	1358151	AssignmentExpression	cur_block = cur_block -> next		1356741	0		=			
ANR	1358152	Identifier	cur_block		1356741	0					
ANR	1358153	PtrMemberAccess	cur_block -> next		1356741	1					
ANR	1358154	Identifier	cur_block		1356741	0					
ANR	1358155	Identifier	next		1356741	1					
ANR	1358156	ExpressionStatement	cur_block -> len = end - cur_block -> start_opline	329:1:11546:11592	1356741	14	True				
ANR	1358157	AssignmentExpression	cur_block -> len = end - cur_block -> start_opline		1356741	0		=			
ANR	1358158	PtrMemberAccess	cur_block -> len		1356741	0					
ANR	1358159	Identifier	cur_block		1356741	0					
ANR	1358160	Identifier	len		1356741	1					
ANR	1358161	AdditiveExpression	end - cur_block -> start_opline		1356741	1		-			
ANR	1358162	Identifier	end		1356741	0					
ANR	1358163	PtrMemberAccess	cur_block -> start_opline		1356741	1					
ANR	1358164	Identifier	cur_block		1356741	0					
ANR	1358165	Identifier	start_opline		1356741	1					
ANR	1358166	ExpressionStatement	cur_block -> next = & blocks [ op_array -> last + 1 ]	330:1:11595:11640	1356741	15	True				
ANR	1358167	AssignmentExpression	cur_block -> next = & blocks [ op_array -> last + 1 ]		1356741	0		=			
ANR	1358168	PtrMemberAccess	cur_block -> next		1356741	0					
ANR	1358169	Identifier	cur_block		1356741	0					
ANR	1358170	Identifier	next		1356741	1					
ANR	1358171	UnaryOperationExpression	& blocks [ op_array -> last + 1 ]		1356741	1					
ANR	1358172	UnaryOperator	&		1356741	0					
ANR	1358173	ArrayIndexing	blocks [ op_array -> last + 1 ]		1356741	1					
ANR	1358174	Identifier	blocks		1356741	0					
ANR	1358175	AdditiveExpression	op_array -> last + 1		1356741	1		+			
ANR	1358176	PtrMemberAccess	op_array -> last		1356741	0					
ANR	1358177	Identifier	op_array		1356741	0					
ANR	1358178	Identifier	last		1356741	1					
ANR	1358179	PrimaryExpression	1		1356741	1					
ANR	1358180	ExpressionStatement	"print_block ( cur_block , op_array -> opcodes , """" )"	331:1:11643:11688	1356741	16	True				
ANR	1358181	CallExpression	"print_block ( cur_block , op_array -> opcodes , """" )"		1356741	0					
ANR	1358182	Callee	print_block		1356741	0					
ANR	1358183	Identifier	print_block		1356741	0					
ANR	1358184	ArgumentList	cur_block		1356741	1					
ANR	1358185	Argument	cur_block		1356741	0					
ANR	1358186	Identifier	cur_block		1356741	0					
ANR	1358187	Argument	op_array -> opcodes		1356741	1					
ANR	1358188	PtrMemberAccess	op_array -> opcodes		1356741	0					
ANR	1358189	Identifier	op_array		1356741	0					
ANR	1358190	Identifier	opcodes		1356741	1					
ANR	1358191	Argument	""""""		1356741	2					
ANR	1358192	PrimaryExpression	""""""		1356741	0					
ANR	1358193	ReturnStatement	return 1 ;	333:1:11692:11700	1356741	17	True				
ANR	1358194	PrimaryExpression	1		1356741	0					
ANR	1358195	ReturnType	static int		1356741	1					
ANR	1358196	Identifier	find_code_blocks		1356741	2					
ANR	1358197	ParameterList	"zend_op_array * op_array , zend_cfg * cfg , zend_optimizer_ctx * ctx"		1356741	3					
ANR	1358198	Parameter	zend_op_array * op_array	113:28:3848:3870	1356741	0	True				
ANR	1358199	ParameterType	zend_op_array *		1356741	0					
ANR	1358200	Identifier	op_array		1356741	1					
ANR	1358201	Parameter	zend_cfg * cfg	113:53:3873:3885	1356741	1	True				
ANR	1358202	ParameterType	zend_cfg *		1356741	0					
ANR	1358203	Identifier	cfg		1356741	1					
ANR	1358204	Parameter	zend_optimizer_ctx * ctx	113:68:3888:3910	1356741	2	True				
ANR	1358205	ParameterType	zend_optimizer_ctx *		1356741	0					
ANR	1358206	Identifier	ctx		1356741	1					
ANR	1358207	CFGEntryNode	ENTRY		1356741		True				
ANR	1358208	CFGExitNode	EXIT		1356741		True				
ANR	1358209	CFGErrorNode	ERROR		1356741		True				
ANR	1358210	CFGErrorNode	ERROR		1356741		True				
ANR	1358211	Symbol	* * op_array -> brk_cont_array		1356741						
ANR	1358212	Symbol	op_array -> brk_cont_array [ parent ] . parent		1356741						
ANR	1358213	Symbol	* cfg -> loop_brk		1356741						
ANR	1358214	Symbol	ZEND_FREE		1356741						
ANR	1358215	Symbol	parent		1356741						
ANR	1358216	Symbol	* * * op_array		1356741						
ANR	1358217	Symbol	* parent		1356741						
ANR	1358218	Symbol	ZEND_OP1 ( opline ) . opline_num		1356741						
ANR	1358219	Symbol	* * op_array -> try_catch_array		1356741						
ANR	1358220	Symbol	zend_arena_calloc		1356741						
ANR	1358221	Symbol	ZEND_FE_FREE		1356741						
ANR	1358222	Symbol	ZEND_OP_DATA		1356741						
ANR	1358223	Symbol	opline -> extended_value		1356741						
ANR	1358224	Symbol	op_array -> brk_cont_array [ j ] . brk		1356741						
ANR	1358225	Symbol	cfg -> loop_brk		1356741						
ANR	1358226	Symbol	blocks [ op_array -> brk_cont_array [ j ] . start ] . protected		1356741						
ANR	1358227	Symbol	opline		1356741						
ANR	1358228	Symbol	* cur_block		1356741						
ANR	1358229	Symbol	cur_block -> start_opline		1356741						
ANR	1358230	Symbol	cur_block -> op1_to		1356741						
ANR	1358231	Symbol	op_array -> try_catch_array		1356741						
ANR	1358232	Symbol	op_array -> brk_cont_array [ parent ] . start		1356741						
ANR	1358233	Symbol	* * j		1356741						
ANR	1358234	Symbol	cur_block -> follow_to		1356741						
ANR	1358235	Symbol	* * i		1356741						
ANR	1358236	Symbol	NULL		1356741						
ANR	1358237	Symbol	blocks [ op_array -> try_catch_array [ i ] . try_op ] . protected		1356741						
ANR	1358238	Symbol	* blocks		1356741						
ANR	1358239	Symbol	ctx		1356741						
ANR	1358240	Symbol	op_array -> opcodes [ op_array -> brk_cont_array [ i ] . brk ] . opcode		1356741						
ANR	1358241	Symbol	* op_array		1356741						
ANR	1358242	Symbol	op_array -> last		1356741						
ANR	1358243	Symbol	cur_block -> len		1356741						
ANR	1358244	Symbol	* cfg		1356741						
ANR	1358245	Symbol	ZEND_OP2 ( opline ) . opline_num		1356741						
ANR	1358246	Symbol	* op_array -> brk_cont_array [ i ] . brk		1356741						
ANR	1358247	Symbol	op_array -> brk_cont_array [ parent ] . brk		1356741						
ANR	1358248	Symbol	cur_block -> next		1356741						
ANR	1358249	Symbol	cur_block -> op2_to		1356741						
ANR	1358250	Symbol	* * cfg		1356741						
ANR	1358251	Symbol	* op_array -> brk_cont_array [ parent ] . brk		1356741						
ANR	1358252	Symbol	op_array -> try_catch_array [ i ] . catch_op		1356741						
ANR	1358253	Symbol	cfg -> loop_start		1356741						
ANR	1358254	Symbol	* opno		1356741						
ANR	1358255	Symbol	* * op_array		1356741						
ANR	1358256	Symbol	op_array -> brk_cont_array [ i ] . brk		1356741						
ANR	1358257	Symbol	cfg -> blocks		1356741						
ANR	1358258	Symbol	op_array -> try_catch_array [ i ] . try_op		1356741						
ANR	1358259	Symbol	blocks [ op_array -> brk_cont_array [ j ] . brk ] . protected		1356741						
ANR	1358260	Symbol	* op_array -> try_catch_array		1356741						
ANR	1358261	Symbol	op_array -> brk_cont_array [ j ] . cont		1356741						
ANR	1358262	Symbol	op_array -> brk_cont_array		1356741						
ANR	1358263	Symbol	op_array -> opcodes		1356741						
ANR	1358264	Symbol	op_array -> brk_cont_array [ i ] . parent		1356741						
ANR	1358265	Symbol	cur_block		1356741						
ANR	1358266	Symbol	opno		1356741						
ANR	1358267	Symbol	blocks [ opno ] . start_opline		1356741						
ANR	1358268	Symbol	end		1356741						
ANR	1358269	Symbol	blocks [ 0 ] . start_opline_no		1356741						
ANR	1358270	Symbol	ZEND_END_SILENCE		1356741						
ANR	1358271	Symbol	op_array -> brk_cont_array [ j ] . start		1356741						
ANR	1358272	Symbol	cfg -> loop_cont		1356741						
ANR	1358273	Symbol	cfg		1356741						
ANR	1358274	Symbol	* op_array -> brk_cont_array		1356741						
ANR	1358275	Symbol	op_array -> brk_cont_array [ i ] . start		1356741						
ANR	1358276	Symbol	blocks		1356741						
ANR	1358277	Symbol	cur_block -> ext_to		1356741						
ANR	1358278	Symbol	* * parent		1356741						
ANR	1358279	Symbol	i		1356741						
ANR	1358280	Symbol	* op_array -> brk_cont_array [ j ] . brk		1356741						
ANR	1358281	Symbol	j		1356741						
ANR	1358282	Symbol	ZEND_OP1		1356741						
ANR	1358283	Symbol	blocks [ 0 ] . start_opline		1356741						
ANR	1358284	Symbol	ZEND_OP2		1356741						
ANR	1358285	Symbol	op_array -> last_try_catch		1356741						
ANR	1358286	Symbol	op_array -> last_brk_cont		1356741						
ANR	1358287	Symbol	* op_array -> brk_cont_array [ j ] . start		1356741						
ANR	1358288	Symbol	& ctx -> arena		1356741						
ANR	1358289	Symbol	* i		1356741						
ANR	1358290	Symbol	* opline		1356741						
ANR	1358291	Symbol	* j		1356741						
ANR	1358292	Symbol	* cfg -> loop_start		1356741						
ANR	1358293	Symbol	* cfg -> loop_cont		1356741						
ANR	1358294	Symbol	opline -> opcode		1356741						
ANR	1358295	Symbol	op_array -> opcodes [ op_array -> brk_cont_array [ parent ] . brk ] . opcode		1356741						
ANR	1358296	Symbol	* op_array -> try_catch_array [ i ] . try_op		1356741						
ANR	1358297	Symbol	ZEND_ROPE_END		1356741						
ANR	1358298	Symbol	op_array		1356741						
ANR	1358299	Symbol	* op_array -> opcodes		1356741						
ANR	1358300	DeclStmt									
ANR	1358301	Decl							zend_block_source	zend_block_source *	__s
ANR	1358302	DeclStmt									
ANR	1358303	Decl							zend_block_source	zend_block_source *	__t
ANR	1358304	DeclStmt									
ANR	1358305	Decl							zend_block_source	zend_block_source * *	cs
ANR	1358306	DeclStmt									
ANR	1358307	Decl							int	int	found
ANR	1358308	Function	del_source	380:0:12626:14402							
ANR	1358309	FunctionDef	"del_source (zend_code_block * from , zend_code_block * to)"		1358308	0					
ANR	1358310	CompoundStatement		381:0:12700:14402	1358308	0					
ANR	1358311	IdentifierDeclStatement	zend_block_source * * cs = & to -> sources ;	383:1:12756:12793	1358308	0	True				
ANR	1358312	IdentifierDecl	* * cs = & to -> sources		1358308	0					
ANR	1358313	IdentifierDeclType	zend_block_source * *		1358308	0					
ANR	1358314	Identifier	cs		1358308	1					
ANR	1358315	AssignmentExpression	* * cs = & to -> sources		1358308	2		=			
ANR	1358316	Identifier	cs		1358308	0					
ANR	1358317	UnaryOperationExpression	& to -> sources		1358308	1					
ANR	1358318	UnaryOperator	&		1358308	0					
ANR	1358319	PtrMemberAccess	to -> sources		1358308	1					
ANR	1358320	Identifier	to		1358308	0					
ANR	1358321	Identifier	sources		1358308	1					
ANR	1358322	IfStatement	if ( to -> sources == NULL )		1358308	1					
ANR	1358323	Condition	to -> sources == NULL	385:5:12801:12819	1358308	0	True				
ANR	1358324	EqualityExpression	to -> sources == NULL		1358308	0		==			
ANR	1358325	PtrMemberAccess	to -> sources		1358308	0					
ANR	1358326	Identifier	to		1358308	0					
ANR	1358327	Identifier	sources		1358308	1					
ANR	1358328	Identifier	NULL		1358308	1					
ANR	1358329	CompoundStatement		5:26:121:121	1358308	1					
ANR	1358330	ExpressionStatement	to -> access = 0	386:2:12826:12840	1358308	0	True				
ANR	1358331	AssignmentExpression	to -> access = 0		1358308	0		=			
ANR	1358332	PtrMemberAccess	to -> access		1358308	0					
ANR	1358333	Identifier	to		1358308	0					
ANR	1358334	Identifier	access		1358308	1					
ANR	1358335	PrimaryExpression	0		1358308	1					
ANR	1358336	ReturnStatement	return ;	387:2:12844:12850	1358308	1	True				
ANR	1358337	IfStatement	if ( from == to )		1358308	2					
ANR	1358338	Condition	from == to	390:5:12861:12870	1358308	0	True				
ANR	1358339	EqualityExpression	from == to		1358308	0		==			
ANR	1358340	Identifier	from		1358308	0					
ANR	1358341	Identifier	to		1358308	1					
ANR	1358342	CompoundStatement		10:17:172:172	1358308	1					
ANR	1358343	ReturnStatement	return ;	391:2:12877:12883	1358308	0	True				
ANR	1358344	WhileStatement	while ( * cs )		1358308	3					
ANR	1358345	Condition	* cs	394:8:12897:12899	1358308	0	True				
ANR	1358346	UnaryOperationExpression	* cs		1358308	0					
ANR	1358347	UnaryOperator	*		1358308	0					
ANR	1358348	Identifier	cs		1358308	1					
ANR	1358349	CompoundStatement		14:13:201:201	1358308	1					
ANR	1358350	IfStatement	if ( ( * cs ) -> from == from )		1358308	0					
ANR	1358351	Condition	( * cs ) -> from == from	395:6:12910:12928	1358308	0	True				
ANR	1358352	EqualityExpression	( * cs ) -> from == from		1358308	0		==			
ANR	1358353	PtrMemberAccess	( * cs ) -> from		1358308	0					
ANR	1358354	UnaryOperationExpression	* cs		1358308	0					
ANR	1358355	UnaryOperator	*		1358308	0					
ANR	1358356	Identifier	cs		1358308	1					
ANR	1358357	Identifier	from		1358308	1					
ANR	1358358	Identifier	from		1358308	1					
ANR	1358359	CompoundStatement		15:27:230:230	1358308	1					
ANR	1358360	ExpressionStatement	DEL_SOURCE ( cs )	396:4:12937:12951	1358308	0	True				
ANR	1358361	CallExpression	DEL_SOURCE ( cs )		1358308	0					
ANR	1358362	Callee	DEL_SOURCE		1358308	0					
ANR	1358363	Identifier	DEL_SOURCE		1358308	0					
ANR	1358364	ArgumentList	cs		1358308	1					
ANR	1358365	Argument	cs		1358308	0					
ANR	1358366	Identifier	cs		1358308	0					
ANR	1358367	BreakStatement	break ;	397:3:12956:12961	1358308	1	True				
ANR	1358368	ExpressionStatement	cs = & ( ( * cs ) -> next )	399:2:12969:12988	1358308	1	True				
ANR	1358369	AssignmentExpression	cs = & ( ( * cs ) -> next )		1358308	0		=			
ANR	1358370	Identifier	cs		1358308	0					
ANR	1358371	UnaryOperationExpression	& ( ( * cs ) -> next )		1358308	1					
ANR	1358372	UnaryOperator	&		1358308	0					
ANR	1358373	PtrMemberAccess	( * cs ) -> next		1358308	1					
ANR	1358374	UnaryOperationExpression	* cs		1358308	0					
ANR	1358375	UnaryOperator	*		1358308	0					
ANR	1358376	Identifier	cs		1358308	1					
ANR	1358377	Identifier	next		1358308	1					
ANR	1358378	IfStatement	if ( to -> sources == NULL )		1358308	4					
ANR	1358379	Condition	to -> sources == NULL	402:5:12999:13017	1358308	0	True				
ANR	1358380	EqualityExpression	to -> sources == NULL		1358308	0		==			
ANR	1358381	PtrMemberAccess	to -> sources		1358308	0					
ANR	1358382	Identifier	to		1358308	0					
ANR	1358383	Identifier	sources		1358308	1					
ANR	1358384	Identifier	NULL		1358308	1					
ANR	1358385	CompoundStatement		22:26:319:319	1358308	1					
ANR	1358386	ExpressionStatement	to -> access = 0	404:2:13089:13103	1358308	0	True				
ANR	1358387	AssignmentExpression	to -> access = 0		1358308	0		=			
ANR	1358388	PtrMemberAccess	to -> access		1358308	0					
ANR	1358389	Identifier	to		1358308	0					
ANR	1358390	Identifier	access		1358308	1					
ANR	1358391	PrimaryExpression	0		1358308	1					
ANR	1358392	ReturnStatement	return ;	405:2:13107:13113	1358308	1	True				
ANR	1358393	IfStatement	if ( ! to -> protected && to -> sources -> next == NULL )		1358308	5					
ANR	1358394	Condition	! to -> protected && to -> sources -> next == NULL	408:5:13124:13166	1358308	0	True				
ANR	1358395	AndExpression	! to -> protected && to -> sources -> next == NULL		1358308	0		&&			
ANR	1358396	UnaryOperationExpression	! to -> protected		1358308	0					
ANR	1358397	UnaryOperator	!		1358308	0					
ANR	1358398	PtrMemberAccess	to -> protected		1358308	1					
ANR	1358399	Identifier	to		1358308	0					
ANR	1358400	Identifier	protected		1358308	1					
ANR	1358401	EqualityExpression	to -> sources -> next == NULL		1358308	1		==			
ANR	1358402	PtrMemberAccess	to -> sources -> next		1358308	0					
ANR	1358403	PtrMemberAccess	to -> sources		1358308	0					
ANR	1358404	Identifier	to		1358308	0					
ANR	1358405	Identifier	sources		1358308	1					
ANR	1358406	Identifier	next		1358308	1					
ANR	1358407	Identifier	NULL		1358308	1					
ANR	1358408	CompoundStatement		30:2:505:552	1358308	1					
ANR	1358409	IdentifierDeclStatement	zend_code_block * from_block = to -> sources -> from ;	410:2:13206:13253	1358308	0	True				
ANR	1358410	IdentifierDecl	* from_block = to -> sources -> from		1358308	0					
ANR	1358411	IdentifierDeclType	zend_code_block *		1358308	0					
ANR	1358412	Identifier	from_block		1358308	1					
ANR	1358413	AssignmentExpression	* from_block = to -> sources -> from		1358308	2		=			
ANR	1358414	Identifier	from_block		1358308	0					
ANR	1358415	PtrMemberAccess	to -> sources -> from		1358308	1					
ANR	1358416	PtrMemberAccess	to -> sources		1358308	0					
ANR	1358417	Identifier	to		1358308	0					
ANR	1358418	Identifier	sources		1358308	1					
ANR	1358419	Identifier	from		1358308	1					
ANR	1358420	IfStatement	if ( from_block -> access && from_block -> follow_to == to && from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL )		1358308	1					
ANR	1358421	Condition	from_block -> access && from_block -> follow_to == to && from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL	412:6:13262:13418	1358308	0	True				
ANR	1358422	AndExpression	from_block -> access && from_block -> follow_to == to && from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL		1358308	0		&&			
ANR	1358423	PtrMemberAccess	from_block -> access		1358308	0					
ANR	1358424	Identifier	from_block		1358308	0					
ANR	1358425	Identifier	access		1358308	1					
ANR	1358426	AndExpression	from_block -> follow_to == to && from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL		1358308	1		&&			
ANR	1358427	EqualityExpression	from_block -> follow_to == to		1358308	0		==			
ANR	1358428	PtrMemberAccess	from_block -> follow_to		1358308	0					
ANR	1358429	Identifier	from_block		1358308	0					
ANR	1358430	Identifier	follow_to		1358308	1					
ANR	1358431	Identifier	to		1358308	1					
ANR	1358432	AndExpression	from_block -> op1_to == NULL && from_block -> op2_to == NULL && from_block -> ext_to == NULL		1358308	1		&&			
ANR	1358433	EqualityExpression	from_block -> op1_to == NULL		1358308	0		==			
ANR	1358434	PtrMemberAccess	from_block -> op1_to		1358308	0					
ANR	1358435	Identifier	from_block		1358308	0					
ANR	1358436	Identifier	op1_to		1358308	1					
ANR	1358437	Identifier	NULL		1358308	1					
ANR	1358438	AndExpression	from_block -> op2_to == NULL && from_block -> ext_to == NULL		1358308	1		&&			
ANR	1358439	EqualityExpression	from_block -> op2_to == NULL		1358308	0		==			
ANR	1358440	PtrMemberAccess	from_block -> op2_to		1358308	0					
ANR	1358441	Identifier	from_block		1358308	0					
ANR	1358442	Identifier	op2_to		1358308	1					
ANR	1358443	Identifier	NULL		1358308	1					
ANR	1358444	EqualityExpression	from_block -> ext_to == NULL		1358308	1		==			
ANR	1358445	PtrMemberAccess	from_block -> ext_to		1358308	0					
ANR	1358446	Identifier	from_block		1358308	0					
ANR	1358447	Identifier	ext_to		1358308	1					
ANR	1358448	Identifier	NULL		1358308	1					
ANR	1358449	CompoundStatement		37:3:794:854	1358308	1					
ANR	1358450	IdentifierDeclStatement	zend_op * new_to = from_block -> start_opline + from_block -> len ;	417:3:13495:13555	1358308	0	True				
ANR	1358451	IdentifierDecl	* new_to = from_block -> start_opline + from_block -> len		1358308	0					
ANR	1358452	IdentifierDeclType	zend_op *		1358308	0					
ANR	1358453	Identifier	new_to		1358308	1					
ANR	1358454	AssignmentExpression	* new_to = from_block -> start_opline + from_block -> len		1358308	2		=			
ANR	1358455	Identifier	new_to		1358308	0					
ANR	1358456	AdditiveExpression	from_block -> start_opline + from_block -> len		1358308	1		+			
ANR	1358457	PtrMemberAccess	from_block -> start_opline		1358308	0					
ANR	1358458	Identifier	from_block		1358308	0					
ANR	1358459	Identifier	start_opline		1358308	1					
ANR	1358460	PtrMemberAccess	from_block -> len		1358308	1					
ANR	1358461	Identifier	from_block		1358308	0					
ANR	1358462	Identifier	len		1358308	1					
ANR	1358463	IfStatement	if ( new_to != to -> start_opline )		1358308	1					
ANR	1358464	Condition	new_to != to -> start_opline	418:7:13564:13589	1358308	0	True				
ANR	1358465	EqualityExpression	new_to != to -> start_opline		1358308	0		!=			
ANR	1358466	Identifier	new_to		1358308	0					
ANR	1358467	PtrMemberAccess	to -> start_opline		1358308	1					
ANR	1358468	Identifier	to		1358308	0					
ANR	1358469	Identifier	start_opline		1358308	1					
ANR	1358470	CompoundStatement		38:35:891:891	1358308	1					
ANR	1358471	ExpressionStatement	"memmove ( new_to , to -> start_opline , sizeof ( zend_op ) * to -> len )"	420:4:13635:13693	1358308	0	True				
ANR	1358472	CallExpression	"memmove ( new_to , to -> start_opline , sizeof ( zend_op ) * to -> len )"		1358308	0					
ANR	1358473	Callee	memmove		1358308	0					
ANR	1358474	Identifier	memmove		1358308	0					
ANR	1358475	ArgumentList	new_to		1358308	1					
ANR	1358476	Argument	new_to		1358308	0					
ANR	1358477	Identifier	new_to		1358308	0					
ANR	1358478	Argument	to -> start_opline		1358308	1					
ANR	1358479	PtrMemberAccess	to -> start_opline		1358308	0					
ANR	1358480	Identifier	to		1358308	0					
ANR	1358481	Identifier	start_opline		1358308	1					
ANR	1358482	Argument	sizeof ( zend_op ) * to -> len		1358308	2					
ANR	1358483	MultiplicativeExpression	sizeof ( zend_op ) * to -> len		1358308	0		*			
ANR	1358484	SizeofExpression	sizeof ( zend_op )		1358308	0					
ANR	1358485	Sizeof	sizeof		1358308	0					
ANR	1358486	SizeofOperand	zend_op		1358308	1					
ANR	1358487	PtrMemberAccess	to -> len		1358308	1					
ANR	1358488	Identifier	to		1358308	0					
ANR	1358489	Identifier	len		1358308	1					
ANR	1358490	ExpressionStatement	from_block -> len += to -> len	423:3:13733:13759	1358308	2	True				
ANR	1358491	AssignmentExpression	from_block -> len += to -> len		1358308	0		+=			
ANR	1358492	PtrMemberAccess	from_block -> len		1358308	0					
ANR	1358493	Identifier	from_block		1358308	0					
ANR	1358494	Identifier	len		1358308	1					
ANR	1358495	PtrMemberAccess	to -> len		1358308	1					
ANR	1358496	Identifier	to		1358308	0					
ANR	1358497	Identifier	len		1358308	1					
ANR	1358498	ExpressionStatement	to -> start_opline = NULL	425:3:13806:13829	1358308	3	True				
ANR	1358499	AssignmentExpression	to -> start_opline = NULL		1358308	0		=			
ANR	1358500	PtrMemberAccess	to -> start_opline		1358308	0					
ANR	1358501	Identifier	to		1358308	0					
ANR	1358502	Identifier	start_opline		1358308	1					
ANR	1358503	Identifier	NULL		1358308	1					
ANR	1358504	ExpressionStatement	to -> access = 0	426:3:13834:13848	1358308	4	True				
ANR	1358505	AssignmentExpression	to -> access = 0		1358308	0		=			
ANR	1358506	PtrMemberAccess	to -> access		1358308	0					
ANR	1358507	Identifier	to		1358308	0					
ANR	1358508	Identifier	access		1358308	1					
ANR	1358509	PrimaryExpression	0		1358308	1					
ANR	1358510	ExpressionStatement	to -> sources = NULL	427:3:13853:13871	1358308	5	True				
ANR	1358511	AssignmentExpression	to -> sources = NULL		1358308	0		=			
ANR	1358512	PtrMemberAccess	to -> sources		1358308	0					
ANR	1358513	Identifier	to		1358308	0					
ANR	1358514	Identifier	sources		1358308	1					
ANR	1358515	Identifier	NULL		1358308	1					
ANR	1358516	ExpressionStatement	from_block -> follow_to = to -> follow_to	428:3:13876:13913	1358308	6	True				
ANR	1358517	AssignmentExpression	from_block -> follow_to = to -> follow_to		1358308	0		=			
ANR	1358518	PtrMemberAccess	from_block -> follow_to		1358308	0					
ANR	1358519	Identifier	from_block		1358308	0					
ANR	1358520	Identifier	follow_to		1358308	1					
ANR	1358521	PtrMemberAccess	to -> follow_to		1358308	1					
ANR	1358522	Identifier	to		1358308	0					
ANR	1358523	Identifier	follow_to		1358308	1					
ANR	1358524	IfStatement	if ( to -> op1_to )		1358308	7					
ANR	1358525	Condition	to -> op1_to	429:7:13922:13931	1358308	0	True				
ANR	1358526	PtrMemberAccess	to -> op1_to		1358308	0					
ANR	1358527	Identifier	to		1358308	0					
ANR	1358528	Identifier	op1_to		1358308	1					
ANR	1358529	CompoundStatement		49:19:1233:1233	1358308	1					
ANR	1358530	ExpressionStatement	from_block -> op1_to = to -> op1_to	430:4:13940:13971	1358308	0	True				
ANR	1358531	AssignmentExpression	from_block -> op1_to = to -> op1_to		1358308	0		=			
ANR	1358532	PtrMemberAccess	from_block -> op1_to		1358308	0					
ANR	1358533	Identifier	from_block		1358308	0					
ANR	1358534	Identifier	op1_to		1358308	1					
ANR	1358535	PtrMemberAccess	to -> op1_to		1358308	1					
ANR	1358536	Identifier	to		1358308	0					
ANR	1358537	Identifier	op1_to		1358308	1					
ANR	1358538	ExpressionStatement	"replace_source ( to -> op1_to -> sources , to , from_block )"	431:4:13977:14028	1358308	1	True				
ANR	1358539	CallExpression	"replace_source ( to -> op1_to -> sources , to , from_block )"		1358308	0					
ANR	1358540	Callee	replace_source		1358308	0					
ANR	1358541	Identifier	replace_source		1358308	0					
ANR	1358542	ArgumentList	to -> op1_to -> sources		1358308	1					
ANR	1358543	Argument	to -> op1_to -> sources		1358308	0					
ANR	1358544	PtrMemberAccess	to -> op1_to -> sources		1358308	0					
ANR	1358545	PtrMemberAccess	to -> op1_to		1358308	0					
ANR	1358546	Identifier	to		1358308	0					
ANR	1358547	Identifier	op1_to		1358308	1					
ANR	1358548	Identifier	sources		1358308	1					
ANR	1358549	Argument	to		1358308	1					
ANR	1358550	Identifier	to		1358308	0					
ANR	1358551	Argument	from_block		1358308	2					
ANR	1358552	Identifier	from_block		1358308	0					
ANR	1358553	IfStatement	if ( to -> op2_to )		1358308	8					
ANR	1358554	Condition	to -> op2_to	433:7:14042:14051	1358308	0	True				
ANR	1358555	PtrMemberAccess	to -> op2_to		1358308	0					
ANR	1358556	Identifier	to		1358308	0					
ANR	1358557	Identifier	op2_to		1358308	1					
ANR	1358558	CompoundStatement		53:19:1353:1353	1358308	1					
ANR	1358559	ExpressionStatement	from_block -> op2_to = to -> op2_to	434:4:14060:14091	1358308	0	True				
ANR	1358560	AssignmentExpression	from_block -> op2_to = to -> op2_to		1358308	0		=			
ANR	1358561	PtrMemberAccess	from_block -> op2_to		1358308	0					
ANR	1358562	Identifier	from_block		1358308	0					
ANR	1358563	Identifier	op2_to		1358308	1					
ANR	1358564	PtrMemberAccess	to -> op2_to		1358308	1					
ANR	1358565	Identifier	to		1358308	0					
ANR	1358566	Identifier	op2_to		1358308	1					
ANR	1358567	ExpressionStatement	"replace_source ( to -> op2_to -> sources , to , from_block )"	435:4:14097:14148	1358308	1	True				
ANR	1358568	CallExpression	"replace_source ( to -> op2_to -> sources , to , from_block )"		1358308	0					
ANR	1358569	Callee	replace_source		1358308	0					
ANR	1358570	Identifier	replace_source		1358308	0					
ANR	1358571	ArgumentList	to -> op2_to -> sources		1358308	1					
ANR	1358572	Argument	to -> op2_to -> sources		1358308	0					
ANR	1358573	PtrMemberAccess	to -> op2_to -> sources		1358308	0					
ANR	1358574	PtrMemberAccess	to -> op2_to		1358308	0					
ANR	1358575	Identifier	to		1358308	0					
ANR	1358576	Identifier	op2_to		1358308	1					
ANR	1358577	Identifier	sources		1358308	1					
ANR	1358578	Argument	to		1358308	1					
ANR	1358579	Identifier	to		1358308	0					
ANR	1358580	Argument	from_block		1358308	2					
ANR	1358581	Identifier	from_block		1358308	0					
ANR	1358582	IfStatement	if ( to -> ext_to )		1358308	9					
ANR	1358583	Condition	to -> ext_to	437:7:14162:14171	1358308	0	True				
ANR	1358584	PtrMemberAccess	to -> ext_to		1358308	0					
ANR	1358585	Identifier	to		1358308	0					
ANR	1358586	Identifier	ext_to		1358308	1					
ANR	1358587	CompoundStatement		57:19:1473:1473	1358308	1					
ANR	1358588	ExpressionStatement	from_block -> ext_to = to -> ext_to	438:4:14180:14211	1358308	0	True				
ANR	1358589	AssignmentExpression	from_block -> ext_to = to -> ext_to		1358308	0		=			
ANR	1358590	PtrMemberAccess	from_block -> ext_to		1358308	0					
ANR	1358591	Identifier	from_block		1358308	0					
ANR	1358592	Identifier	ext_to		1358308	1					
ANR	1358593	PtrMemberAccess	to -> ext_to		1358308	1					
ANR	1358594	Identifier	to		1358308	0					
ANR	1358595	Identifier	ext_to		1358308	1					
ANR	1358596	ExpressionStatement	"replace_source ( to -> ext_to -> sources , to , from_block )"	439:4:14217:14268	1358308	1	True				
ANR	1358597	CallExpression	"replace_source ( to -> ext_to -> sources , to , from_block )"		1358308	0					
ANR	1358598	Callee	replace_source		1358308	0					
ANR	1358599	Identifier	replace_source		1358308	0					
ANR	1358600	ArgumentList	to -> ext_to -> sources		1358308	1					
ANR	1358601	Argument	to -> ext_to -> sources		1358308	0					
ANR	1358602	PtrMemberAccess	to -> ext_to -> sources		1358308	0					
ANR	1358603	PtrMemberAccess	to -> ext_to		1358308	0					
ANR	1358604	Identifier	to		1358308	0					
ANR	1358605	Identifier	ext_to		1358308	1					
ANR	1358606	Identifier	sources		1358308	1					
ANR	1358607	Argument	to		1358308	1					
ANR	1358608	Identifier	to		1358308	0					
ANR	1358609	Argument	from_block		1358308	2					
ANR	1358610	Identifier	from_block		1358308	0					
ANR	1358611	IfStatement	if ( to -> follow_to )		1358308	10					
ANR	1358612	Condition	to -> follow_to	441:7:14282:14294	1358308	0	True				
ANR	1358613	PtrMemberAccess	to -> follow_to		1358308	0					
ANR	1358614	Identifier	to		1358308	0					
ANR	1358615	Identifier	follow_to		1358308	1					
ANR	1358616	CompoundStatement		61:22:1596:1596	1358308	1					
ANR	1358617	ExpressionStatement	"replace_source ( to -> follow_to -> sources , to , from_block )"	442:4:14303:14357	1358308	0	True				
ANR	1358618	CallExpression	"replace_source ( to -> follow_to -> sources , to , from_block )"		1358308	0					
ANR	1358619	Callee	replace_source		1358308	0					
ANR	1358620	Identifier	replace_source		1358308	0					
ANR	1358621	ArgumentList	to -> follow_to -> sources		1358308	1					
ANR	1358622	Argument	to -> follow_to -> sources		1358308	0					
ANR	1358623	PtrMemberAccess	to -> follow_to -> sources		1358308	0					
ANR	1358624	PtrMemberAccess	to -> follow_to		1358308	0					
ANR	1358625	Identifier	to		1358308	0					
ANR	1358626	Identifier	follow_to		1358308	1					
ANR	1358627	Identifier	sources		1358308	1					
ANR	1358628	Argument	to		1358308	1					
ANR	1358629	Identifier	to		1358308	0					
ANR	1358630	Argument	from_block		1358308	2					
ANR	1358631	Identifier	from_block		1358308	0					
ANR	1358632	ReturnType	static inline void		1358308	1					
ANR	1358633	Identifier	del_source		1358308	2					
ANR	1358634	ParameterList	"zend_code_block * from , zend_code_block * to"		1358308	3					
ANR	1358635	Parameter	zend_code_block * from	380:30:12656:12676	1358308	0	True				
ANR	1358636	ParameterType	zend_code_block *		1358308	0					
ANR	1358637	Identifier	from		1358308	1					
ANR	1358638	Parameter	zend_code_block * to	380:53:12679:12697	1358308	1	True				
ANR	1358639	ParameterType	zend_code_block *		1358308	0					
ANR	1358640	Identifier	to		1358308	1					
ANR	1358641	CFGEntryNode	ENTRY		1358308		True				
ANR	1358642	CFGExitNode	EXIT		1358308		True				
ANR	1358643	Symbol	new_to		1358308						
ANR	1358644	Symbol	from_block -> len		1358308						
ANR	1358645	Symbol	* to -> sources		1358308						
ANR	1358646	Symbol	to -> op1_to		1358308						
ANR	1358647	Symbol	& ( * cs ) -> next		1358308						
ANR	1358648	Symbol	* to -> op1_to		1358308						
ANR	1358649	Symbol	to -> sources		1358308						
ANR	1358650	Symbol	to -> op2_to -> sources		1358308						
ANR	1358651	Symbol	to -> access		1358308						
ANR	1358652	Symbol	from		1358308						
ANR	1358653	Symbol	to -> ext_to		1358308						
ANR	1358654	Symbol	to -> len		1358308						
ANR	1358655	Symbol	from_block -> op2_to		1358308						
ANR	1358656	Symbol	to -> start_opline		1358308						
ANR	1358657	Symbol	* * cs		1358308						
ANR	1358658	Symbol	* to		1358308						
ANR	1358659	Symbol	from_block		1358308						
ANR	1358660	Symbol	NULL		1358308						
ANR	1358661	Symbol	* * to		1358308						
ANR	1358662	Symbol	from_block -> follow_to		1358308						
ANR	1358663	Symbol	* to -> ext_to		1358308						
ANR	1358664	Symbol	to -> follow_to -> sources		1358308						
ANR	1358665	Symbol	to -> op2_to		1358308						
ANR	1358666	Symbol	from_block -> ext_to		1358308						
ANR	1358667	Symbol	* to -> follow_to		1358308						
ANR	1358668	Symbol	( * cs ) -> from		1358308						
ANR	1358669	Symbol	from_block -> access		1358308						
ANR	1358670	Symbol	to -> sources -> from		1358308						
ANR	1358671	Symbol	cs		1358308						
ANR	1358672	Symbol	& to -> sources		1358308						
ANR	1358673	Symbol	to -> op1_to -> sources		1358308						
ANR	1358674	Symbol	* cs		1358308						
ANR	1358675	Symbol	to -> follow_to		1358308						
ANR	1358676	Symbol	* to -> op2_to		1358308						
ANR	1358677	Symbol	to -> protected		1358308						
ANR	1358678	Symbol	to -> ext_to -> sources		1358308						
ANR	1358679	Symbol	from_block -> op1_to		1358308						
ANR	1358680	Symbol	from_block -> start_opline		1358308						
ANR	1358681	Symbol	to		1358308						
ANR	1358682	Symbol	* from_block		1358308						
ANR	1358683	Symbol	to -> sources -> next		1358308						
ANR	1358684	Function	delete_code_block	449:0:14405:15159							
ANR	1358685	FunctionDef	"delete_code_block (zend_code_block * block , zend_optimizer_ctx * ctx)"		1358684	0					
ANR	1358686	CompoundStatement		450:0:14484:15159	1358684	0					
ANR	1358687	IfStatement	if ( block -> protected )		1358684	0					
ANR	1358688	Condition	block -> protected	451:5:14491:14506	1358684	0	True				
ANR	1358689	PtrMemberAccess	block -> protected		1358684	0					
ANR	1358690	Identifier	block		1358684	0					
ANR	1358691	Identifier	protected		1358684	1					
ANR	1358692	CompoundStatement		2:23:24:24	1358684	1					
ANR	1358693	ReturnStatement	return ;	452:2:14513:14519	1358684	0	True				
ANR	1358694	IfStatement	if ( block -> follow_to )		1358684	1					
ANR	1358695	Condition	block -> follow_to	454:5:14529:14544	1358684	0	True				
ANR	1358696	PtrMemberAccess	block -> follow_to		1358684	0					
ANR	1358697	Identifier	block		1358684	0					
ANR	1358698	Identifier	follow_to		1358684	1					
ANR	1358699	CompoundStatement		6:2:66:104	1358684	1					
ANR	1358700	IdentifierDeclStatement	zend_block_source * bs = block -> sources ;	455:2:14551:14589	1358684	0	True				
ANR	1358701	IdentifierDecl	* bs = block -> sources		1358684	0					
ANR	1358702	IdentifierDeclType	zend_block_source *		1358684	0					
ANR	1358703	Identifier	bs		1358684	1					
ANR	1358704	AssignmentExpression	* bs = block -> sources		1358684	2		=			
ANR	1358705	Identifier	bs		1358684	0					
ANR	1358706	PtrMemberAccess	block -> sources		1358684	1					
ANR	1358707	Identifier	block		1358684	0					
ANR	1358708	Identifier	sources		1358684	1					
ANR	1358709	WhileStatement	while ( bs )		1358684	1					
ANR	1358710	Condition	bs	456:9:14600:14601	1358684	0	True				
ANR	1358711	Identifier	bs		1358684	0					
ANR	1358712	CompoundStatement		9:3:167:205	1358684	1					
ANR	1358713	IdentifierDeclStatement	zend_code_block * from_block = bs -> from ;	457:3:14609:14647	1358684	0	True				
ANR	1358714	IdentifierDecl	* from_block = bs -> from		1358684	0					
ANR	1358715	IdentifierDeclType	zend_code_block *		1358684	0					
ANR	1358716	Identifier	from_block		1358684	1					
ANR	1358717	AssignmentExpression	* from_block = bs -> from		1358684	2		=			
ANR	1358718	Identifier	from_block		1358684	0					
ANR	1358719	PtrMemberAccess	bs -> from		1358684	1					
ANR	1358720	Identifier	bs		1358684	0					
ANR	1358721	Identifier	from		1358684	1					
ANR	1358722	IdentifierDeclStatement	zend_code_block * to = block -> follow_to ;	458:3:14652:14690	1358684	1	True				
ANR	1358723	IdentifierDecl	* to = block -> follow_to		1358684	0					
ANR	1358724	IdentifierDeclType	zend_code_block *		1358684	0					
ANR	1358725	Identifier	to		1358684	1					
ANR	1358726	AssignmentExpression	* to = block -> follow_to		1358684	2		=			
ANR	1358727	Identifier	to		1358684	0					
ANR	1358728	PtrMemberAccess	block -> follow_to		1358684	1					
ANR	1358729	Identifier	block		1358684	0					
ANR	1358730	Identifier	follow_to		1358684	1					
ANR	1358731	IfStatement	if ( from_block -> op1_to == block )		1358684	2					
ANR	1358732	Condition	from_block -> op1_to == block	459:7:14699:14725	1358684	0	True				
ANR	1358733	EqualityExpression	from_block -> op1_to == block		1358684	0		==			
ANR	1358734	PtrMemberAccess	from_block -> op1_to		1358684	0					
ANR	1358735	Identifier	from_block		1358684	0					
ANR	1358736	Identifier	op1_to		1358684	1					
ANR	1358737	Identifier	block		1358684	1					
ANR	1358738	CompoundStatement		10:36:243:243	1358684	1					
ANR	1358739	ExpressionStatement	from_block -> op1_to = to	460:4:14734:14757	1358684	0	True				
ANR	1358740	AssignmentExpression	from_block -> op1_to = to		1358684	0		=			
ANR	1358741	PtrMemberAccess	from_block -> op1_to		1358684	0					
ANR	1358742	Identifier	from_block		1358684	0					
ANR	1358743	Identifier	op1_to		1358684	1					
ANR	1358744	Identifier	to		1358684	1					
ANR	1358745	ExpressionStatement	"ADD_SOURCE ( from_block , to )"	461:4:14763:14789	1358684	1	True				
ANR	1358746	CallExpression	"ADD_SOURCE ( from_block , to )"		1358684	0					
ANR	1358747	Callee	ADD_SOURCE		1358684	0					
ANR	1358748	Identifier	ADD_SOURCE		1358684	0					
ANR	1358749	ArgumentList	from_block		1358684	1					
ANR	1358750	Argument	from_block		1358684	0					
ANR	1358751	Identifier	from_block		1358684	0					
ANR	1358752	Argument	to		1358684	1					
ANR	1358753	Identifier	to		1358684	0					
ANR	1358754	IfStatement	if ( from_block -> op2_to == block )		1358684	3					
ANR	1358755	Condition	from_block -> op2_to == block	463:7:14803:14829	1358684	0	True				
ANR	1358756	EqualityExpression	from_block -> op2_to == block		1358684	0		==			
ANR	1358757	PtrMemberAccess	from_block -> op2_to		1358684	0					
ANR	1358758	Identifier	from_block		1358684	0					
ANR	1358759	Identifier	op2_to		1358684	1					
ANR	1358760	Identifier	block		1358684	1					
ANR	1358761	CompoundStatement		14:36:347:347	1358684	1					
ANR	1358762	ExpressionStatement	from_block -> op2_to = to	464:4:14838:14861	1358684	0	True				
ANR	1358763	AssignmentExpression	from_block -> op2_to = to		1358684	0		=			
ANR	1358764	PtrMemberAccess	from_block -> op2_to		1358684	0					
ANR	1358765	Identifier	from_block		1358684	0					
ANR	1358766	Identifier	op2_to		1358684	1					
ANR	1358767	Identifier	to		1358684	1					
ANR	1358768	ExpressionStatement	"ADD_SOURCE ( from_block , to )"	465:4:14867:14893	1358684	1	True				
ANR	1358769	CallExpression	"ADD_SOURCE ( from_block , to )"		1358684	0					
ANR	1358770	Callee	ADD_SOURCE		1358684	0					
ANR	1358771	Identifier	ADD_SOURCE		1358684	0					
ANR	1358772	ArgumentList	from_block		1358684	1					
ANR	1358773	Argument	from_block		1358684	0					
ANR	1358774	Identifier	from_block		1358684	0					
ANR	1358775	Argument	to		1358684	1					
ANR	1358776	Identifier	to		1358684	0					
ANR	1358777	IfStatement	if ( from_block -> ext_to == block )		1358684	4					
ANR	1358778	Condition	from_block -> ext_to == block	467:7:14907:14933	1358684	0	True				
ANR	1358779	EqualityExpression	from_block -> ext_to == block		1358684	0		==			
ANR	1358780	PtrMemberAccess	from_block -> ext_to		1358684	0					
ANR	1358781	Identifier	from_block		1358684	0					
ANR	1358782	Identifier	ext_to		1358684	1					
ANR	1358783	Identifier	block		1358684	1					
ANR	1358784	CompoundStatement		18:36:451:451	1358684	1					
ANR	1358785	ExpressionStatement	from_block -> ext_to = to	468:4:14942:14965	1358684	0	True				
ANR	1358786	AssignmentExpression	from_block -> ext_to = to		1358684	0		=			
ANR	1358787	PtrMemberAccess	from_block -> ext_to		1358684	0					
ANR	1358788	Identifier	from_block		1358684	0					
ANR	1358789	Identifier	ext_to		1358684	1					
ANR	1358790	Identifier	to		1358684	1					
ANR	1358791	ExpressionStatement	"ADD_SOURCE ( from_block , to )"	469:4:14971:14997	1358684	1	True				
ANR	1358792	CallExpression	"ADD_SOURCE ( from_block , to )"		1358684	0					
ANR	1358793	Callee	ADD_SOURCE		1358684	0					
ANR	1358794	Identifier	ADD_SOURCE		1358684	0					
ANR	1358795	ArgumentList	from_block		1358684	1					
ANR	1358796	Argument	from_block		1358684	0					
ANR	1358797	Identifier	from_block		1358684	0					
ANR	1358798	Argument	to		1358684	1					
ANR	1358799	Identifier	to		1358684	0					
ANR	1358800	IfStatement	if ( from_block -> follow_to == block )		1358684	5					
ANR	1358801	Condition	from_block -> follow_to == block	471:7:15011:15040	1358684	0	True				
ANR	1358802	EqualityExpression	from_block -> follow_to == block		1358684	0		==			
ANR	1358803	PtrMemberAccess	from_block -> follow_to		1358684	0					
ANR	1358804	Identifier	from_block		1358684	0					
ANR	1358805	Identifier	follow_to		1358684	1					
ANR	1358806	Identifier	block		1358684	1					
ANR	1358807	CompoundStatement		22:39:558:558	1358684	1					
ANR	1358808	ExpressionStatement	from_block -> follow_to = to	472:4:15049:15075	1358684	0	True				
ANR	1358809	AssignmentExpression	from_block -> follow_to = to		1358684	0		=			
ANR	1358810	PtrMemberAccess	from_block -> follow_to		1358684	0					
ANR	1358811	Identifier	from_block		1358684	0					
ANR	1358812	Identifier	follow_to		1358684	1					
ANR	1358813	Identifier	to		1358684	1					
ANR	1358814	ExpressionStatement	"ADD_SOURCE ( from_block , to )"	473:4:15081:15107	1358684	1	True				
ANR	1358815	CallExpression	"ADD_SOURCE ( from_block , to )"		1358684	0					
ANR	1358816	Callee	ADD_SOURCE		1358684	0					
ANR	1358817	Identifier	ADD_SOURCE		1358684	0					
ANR	1358818	ArgumentList	from_block		1358684	1					
ANR	1358819	Argument	from_block		1358684	0					
ANR	1358820	Identifier	from_block		1358684	0					
ANR	1358821	Argument	to		1358684	1					
ANR	1358822	Identifier	to		1358684	0					
ANR	1358823	ExpressionStatement	bs = bs -> next	475:3:15117:15130	1358684	6	True				
ANR	1358824	AssignmentExpression	bs = bs -> next		1358684	0		=			
ANR	1358825	Identifier	bs		1358684	0					
ANR	1358826	PtrMemberAccess	bs -> next		1358684	1					
ANR	1358827	Identifier	bs		1358684	0					
ANR	1358828	Identifier	next		1358684	1					
ANR	1358829	ExpressionStatement	block -> access = 0	478:1:15140:15157	1358684	2	True				
ANR	1358830	AssignmentExpression	block -> access = 0		1358684	0		=			
ANR	1358831	PtrMemberAccess	block -> access		1358684	0					
ANR	1358832	Identifier	block		1358684	0					
ANR	1358833	Identifier	access		1358684	1					
ANR	1358834	PrimaryExpression	0		1358684	1					
ANR	1358835	ReturnType	static void		1358684	1					
ANR	1358836	Identifier	delete_code_block		1358684	2					
ANR	1358837	ParameterList	"zend_code_block * block , zend_optimizer_ctx * ctx"		1358684	3					
ANR	1358838	Parameter	zend_code_block * block	449:30:14435:14456	1358684	0	True				
ANR	1358839	ParameterType	zend_code_block *		1358684	0					
ANR	1358840	Identifier	block		1358684	1					
ANR	1358841	Parameter	zend_optimizer_ctx * ctx	449:54:14459:14481	1358684	1	True				
ANR	1358842	ParameterType	zend_optimizer_ctx *		1358684	0					
ANR	1358843	Identifier	ctx		1358684	1					
ANR	1358844	CFGEntryNode	ENTRY		1358684		True				
ANR	1358845	CFGExitNode	EXIT		1358684		True				
ANR	1358846	Symbol	from_block		1358684						
ANR	1358847	Symbol	from_block -> follow_to		1358684						
ANR	1358848	Symbol	ctx		1358684						
ANR	1358849	Symbol	block -> protected		1358684						
ANR	1358850	Symbol	from_block -> ext_to		1358684						
ANR	1358851	Symbol	block -> follow_to		1358684						
ANR	1358852	Symbol	block -> sources		1358684						
ANR	1358853	Symbol	* block		1358684						
ANR	1358854	Symbol	bs -> next		1358684						
ANR	1358855	Symbol	bs		1358684						
ANR	1358856	Symbol	bs -> from		1358684						
ANR	1358857	Symbol	* bs		1358684						
ANR	1358858	Symbol	block -> access		1358684						
ANR	1358859	Symbol	block		1358684						
ANR	1358860	Symbol	from_block -> op1_to		1358684						
ANR	1358861	Symbol	to		1358684						
ANR	1358862	Symbol	* from_block		1358684						
ANR	1358863	Symbol	from_block -> op2_to		1358684						
ANR	1358864	Function	zend_access_path	481:0:15162:15711							
ANR	1358865	FunctionDef	"zend_access_path (zend_code_block * block , zend_optimizer_ctx * ctx)"		1358864	0					
ANR	1358866	CompoundStatement		482:0:15240:15711	1358864	0					
ANR	1358867	IfStatement	if ( block -> access )		1358864	0					
ANR	1358868	Condition	block -> access	483:5:15247:15259	1358864	0	True				
ANR	1358869	PtrMemberAccess	block -> access		1358864	0					
ANR	1358870	Identifier	block		1358864	0					
ANR	1358871	Identifier	access		1358864	1					
ANR	1358872	CompoundStatement		2:20:21:21	1358864	1					
ANR	1358873	ReturnStatement	return ;	484:2:15266:15272	1358864	0	True				
ANR	1358874	ExpressionStatement	block -> access = 1	487:1:15279:15296	1358864	1	True				
ANR	1358875	AssignmentExpression	block -> access = 1		1358864	0		=			
ANR	1358876	PtrMemberAccess	block -> access		1358864	0					
ANR	1358877	Identifier	block		1358864	0					
ANR	1358878	Identifier	access		1358864	1					
ANR	1358879	PrimaryExpression	1		1358864	1					
ANR	1358880	IfStatement	if ( block -> op1_to )		1358864	2					
ANR	1358881	Condition	block -> op1_to	488:5:15303:15315	1358864	0	True				
ANR	1358882	PtrMemberAccess	block -> op1_to		1358864	0					
ANR	1358883	Identifier	block		1358864	0					
ANR	1358884	Identifier	op1_to		1358864	1					
ANR	1358885	CompoundStatement		7:20:77:77	1358864	1					
ANR	1358886	ExpressionStatement	"zend_access_path ( block -> op1_to , ctx )"	489:2:15322:15358	1358864	0	True				
ANR	1358887	CallExpression	"zend_access_path ( block -> op1_to , ctx )"		1358864	0					
ANR	1358888	Callee	zend_access_path		1358864	0					
ANR	1358889	Identifier	zend_access_path		1358864	0					
ANR	1358890	ArgumentList	block -> op1_to		1358864	1					
ANR	1358891	Argument	block -> op1_to		1358864	0					
ANR	1358892	PtrMemberAccess	block -> op1_to		1358864	0					
ANR	1358893	Identifier	block		1358864	0					
ANR	1358894	Identifier	op1_to		1358864	1					
ANR	1358895	Argument	ctx		1358864	1					
ANR	1358896	Identifier	ctx		1358864	0					
ANR	1358897	ExpressionStatement	"ADD_SOURCE ( block , block -> op1_to )"	490:2:15362:15394	1358864	1	True				
ANR	1358898	CallExpression	"ADD_SOURCE ( block , block -> op1_to )"		1358864	0					
ANR	1358899	Callee	ADD_SOURCE		1358864	0					
ANR	1358900	Identifier	ADD_SOURCE		1358864	0					
ANR	1358901	ArgumentList	block		1358864	1					
ANR	1358902	Argument	block		1358864	0					
ANR	1358903	Identifier	block		1358864	0					
ANR	1358904	Argument	block -> op1_to		1358864	1					
ANR	1358905	PtrMemberAccess	block -> op1_to		1358864	0					
ANR	1358906	Identifier	block		1358864	0					
ANR	1358907	Identifier	op1_to		1358864	1					
ANR	1358908	IfStatement	if ( block -> op2_to )		1358864	3					
ANR	1358909	Condition	block -> op2_to	492:5:15404:15416	1358864	0	True				
ANR	1358910	PtrMemberAccess	block -> op2_to		1358864	0					
ANR	1358911	Identifier	block		1358864	0					
ANR	1358912	Identifier	op2_to		1358864	1					
ANR	1358913	CompoundStatement		11:20:178:178	1358864	1					
ANR	1358914	ExpressionStatement	"zend_access_path ( block -> op2_to , ctx )"	493:2:15423:15459	1358864	0	True				
ANR	1358915	CallExpression	"zend_access_path ( block -> op2_to , ctx )"		1358864	0					
ANR	1358916	Callee	zend_access_path		1358864	0					
ANR	1358917	Identifier	zend_access_path		1358864	0					
ANR	1358918	ArgumentList	block -> op2_to		1358864	1					
ANR	1358919	Argument	block -> op2_to		1358864	0					
ANR	1358920	PtrMemberAccess	block -> op2_to		1358864	0					
ANR	1358921	Identifier	block		1358864	0					
ANR	1358922	Identifier	op2_to		1358864	1					
ANR	1358923	Argument	ctx		1358864	1					
ANR	1358924	Identifier	ctx		1358864	0					
ANR	1358925	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	494:2:15463:15495	1358864	1	True				
ANR	1358926	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1358864	0					
ANR	1358927	Callee	ADD_SOURCE		1358864	0					
ANR	1358928	Identifier	ADD_SOURCE		1358864	0					
ANR	1358929	ArgumentList	block		1358864	1					
ANR	1358930	Argument	block		1358864	0					
ANR	1358931	Identifier	block		1358864	0					
ANR	1358932	Argument	block -> op2_to		1358864	1					
ANR	1358933	PtrMemberAccess	block -> op2_to		1358864	0					
ANR	1358934	Identifier	block		1358864	0					
ANR	1358935	Identifier	op2_to		1358864	1					
ANR	1358936	IfStatement	if ( block -> ext_to )		1358864	4					
ANR	1358937	Condition	block -> ext_to	496:5:15505:15517	1358864	0	True				
ANR	1358938	PtrMemberAccess	block -> ext_to		1358864	0					
ANR	1358939	Identifier	block		1358864	0					
ANR	1358940	Identifier	ext_to		1358864	1					
ANR	1358941	CompoundStatement		15:20:279:279	1358864	1					
ANR	1358942	ExpressionStatement	"zend_access_path ( block -> ext_to , ctx )"	497:2:15524:15560	1358864	0	True				
ANR	1358943	CallExpression	"zend_access_path ( block -> ext_to , ctx )"		1358864	0					
ANR	1358944	Callee	zend_access_path		1358864	0					
ANR	1358945	Identifier	zend_access_path		1358864	0					
ANR	1358946	ArgumentList	block -> ext_to		1358864	1					
ANR	1358947	Argument	block -> ext_to		1358864	0					
ANR	1358948	PtrMemberAccess	block -> ext_to		1358864	0					
ANR	1358949	Identifier	block		1358864	0					
ANR	1358950	Identifier	ext_to		1358864	1					
ANR	1358951	Argument	ctx		1358864	1					
ANR	1358952	Identifier	ctx		1358864	0					
ANR	1358953	ExpressionStatement	"ADD_SOURCE ( block , block -> ext_to )"	498:2:15564:15596	1358864	1	True				
ANR	1358954	CallExpression	"ADD_SOURCE ( block , block -> ext_to )"		1358864	0					
ANR	1358955	Callee	ADD_SOURCE		1358864	0					
ANR	1358956	Identifier	ADD_SOURCE		1358864	0					
ANR	1358957	ArgumentList	block		1358864	1					
ANR	1358958	Argument	block		1358864	0					
ANR	1358959	Identifier	block		1358864	0					
ANR	1358960	Argument	block -> ext_to		1358864	1					
ANR	1358961	PtrMemberAccess	block -> ext_to		1358864	0					
ANR	1358962	Identifier	block		1358864	0					
ANR	1358963	Identifier	ext_to		1358864	1					
ANR	1358964	IfStatement	if ( block -> follow_to )		1358864	5					
ANR	1358965	Condition	block -> follow_to	500:5:15606:15621	1358864	0	True				
ANR	1358966	PtrMemberAccess	block -> follow_to		1358864	0					
ANR	1358967	Identifier	block		1358864	0					
ANR	1358968	Identifier	follow_to		1358864	1					
ANR	1358969	CompoundStatement		19:23:383:383	1358864	1					
ANR	1358970	ExpressionStatement	"zend_access_path ( block -> follow_to , ctx )"	501:2:15628:15667	1358864	0	True				
ANR	1358971	CallExpression	"zend_access_path ( block -> follow_to , ctx )"		1358864	0					
ANR	1358972	Callee	zend_access_path		1358864	0					
ANR	1358973	Identifier	zend_access_path		1358864	0					
ANR	1358974	ArgumentList	block -> follow_to		1358864	1					
ANR	1358975	Argument	block -> follow_to		1358864	0					
ANR	1358976	PtrMemberAccess	block -> follow_to		1358864	0					
ANR	1358977	Identifier	block		1358864	0					
ANR	1358978	Identifier	follow_to		1358864	1					
ANR	1358979	Argument	ctx		1358864	1					
ANR	1358980	Identifier	ctx		1358864	0					
ANR	1358981	ExpressionStatement	"ADD_SOURCE ( block , block -> follow_to )"	502:2:15671:15706	1358864	1	True				
ANR	1358982	CallExpression	"ADD_SOURCE ( block , block -> follow_to )"		1358864	0					
ANR	1358983	Callee	ADD_SOURCE		1358864	0					
ANR	1358984	Identifier	ADD_SOURCE		1358864	0					
ANR	1358985	ArgumentList	block		1358864	1					
ANR	1358986	Argument	block		1358864	0					
ANR	1358987	Identifier	block		1358864	0					
ANR	1358988	Argument	block -> follow_to		1358864	1					
ANR	1358989	PtrMemberAccess	block -> follow_to		1358864	0					
ANR	1358990	Identifier	block		1358864	0					
ANR	1358991	Identifier	follow_to		1358864	1					
ANR	1358992	ReturnType	static void		1358864	1					
ANR	1358993	Identifier	zend_access_path		1358864	2					
ANR	1358994	ParameterList	"zend_code_block * block , zend_optimizer_ctx * ctx"		1358864	3					
ANR	1358995	Parameter	zend_code_block * block	481:29:15191:15212	1358864	0	True				
ANR	1358996	ParameterType	zend_code_block *		1358864	0					
ANR	1358997	Identifier	block		1358864	1					
ANR	1358998	Parameter	zend_optimizer_ctx * ctx	481:53:15215:15237	1358864	1	True				
ANR	1358999	ParameterType	zend_optimizer_ctx *		1358864	0					
ANR	1359000	Identifier	ctx		1358864	1					
ANR	1359001	CFGEntryNode	ENTRY		1358864		True				
ANR	1359002	CFGExitNode	EXIT		1358864		True				
ANR	1359003	Symbol	ctx		1358864						
ANR	1359004	Symbol	block -> access		1358864						
ANR	1359005	Symbol	block		1358864						
ANR	1359006	Symbol	block -> ext_to		1358864						
ANR	1359007	Symbol	block -> follow_to		1358864						
ANR	1359008	Symbol	block -> op1_to		1358864						
ANR	1359009	Symbol	block -> op2_to		1358864						
ANR	1359010	Symbol	* block		1358864						
ANR	1359011	Function	zend_rebuild_access_path	507:0:15788:16752							
ANR	1359012	FunctionDef	"zend_rebuild_access_path (zend_cfg * cfg , zend_op_array * op_array , int find_start , zend_optimizer_ctx * ctx)"		1359011	0					
ANR	1359013	CompoundStatement		508:0:15906:16752	1359011	0					
ANR	1359014	IdentifierDeclStatement	zend_code_block * blocks = cfg -> blocks ;	509:1:15909:15946	1359011	0	True				
ANR	1359015	IdentifierDecl	* blocks = cfg -> blocks		1359011	0					
ANR	1359016	IdentifierDeclType	zend_code_block *		1359011	0					
ANR	1359017	Identifier	blocks		1359011	1					
ANR	1359018	AssignmentExpression	* blocks = cfg -> blocks		1359011	2		=			
ANR	1359019	Identifier	blocks		1359011	0					
ANR	1359020	PtrMemberAccess	cfg -> blocks		1359011	1					
ANR	1359021	Identifier	cfg		1359011	0					
ANR	1359022	Identifier	blocks		1359011	1					
ANR	1359023	IdentifierDeclStatement	zend_code_block * start = find_start ? NULL : blocks ;	510:1:15949:15999	1359011	1	True				
ANR	1359024	IdentifierDecl	* start = find_start ? NULL : blocks		1359011	0					
ANR	1359025	IdentifierDeclType	zend_code_block *		1359011	0					
ANR	1359026	Identifier	start		1359011	1					
ANR	1359027	AssignmentExpression	* start = find_start ? NULL : blocks		1359011	2		=			
ANR	1359028	Identifier	start		1359011	0					
ANR	1359029	ConditionalExpression	find_start ? NULL : blocks		1359011	1					
ANR	1359030	Condition	find_start		1359011	0					
ANR	1359031	Identifier	find_start		1359011	0					
ANR	1359032	Identifier	NULL		1359011	1					
ANR	1359033	Identifier	blocks		1359011	2					
ANR	1359034	IdentifierDeclStatement	zend_code_block * b ;	511:1:16002:16020	1359011	2	True				
ANR	1359035	IdentifierDecl	* b		1359011	0					
ANR	1359036	IdentifierDeclType	zend_code_block *		1359011	0					
ANR	1359037	Identifier	b		1359011	1					
ANR	1359038	ExpressionStatement	b = blocks	514:1:16091:16101	1359011	3	True				
ANR	1359039	AssignmentExpression	b = blocks		1359011	0		=			
ANR	1359040	Identifier	b		1359011	0					
ANR	1359041	Identifier	blocks		1359011	1					
ANR	1359042	WhileStatement	while ( b != NULL )		1359011	4					
ANR	1359043	Condition	b != NULL	515:8:16111:16119	1359011	0	True				
ANR	1359044	EqualityExpression	b != NULL		1359011	0		!=			
ANR	1359045	Identifier	b		1359011	0					
ANR	1359046	Identifier	NULL		1359011	1					
ANR	1359047	CompoundStatement		8:19:215:215	1359011	1					
ANR	1359048	IfStatement	if ( ! start && b -> access )		1359011	0					
ANR	1359049	Condition	! start && b -> access	516:6:16130:16148	1359011	0	True				
ANR	1359050	AndExpression	! start && b -> access		1359011	0		&&			
ANR	1359051	UnaryOperationExpression	! start		1359011	0					
ANR	1359052	UnaryOperator	!		1359011	0					
ANR	1359053	Identifier	start		1359011	1					
ANR	1359054	PtrMemberAccess	b -> access		1359011	1					
ANR	1359055	Identifier	b		1359011	0					
ANR	1359056	Identifier	access		1359011	1					
ANR	1359057	CompoundStatement		9:27:244:244	1359011	1					
ANR	1359058	ExpressionStatement	start = b	517:3:16156:16165	1359011	0	True				
ANR	1359059	AssignmentExpression	start = b		1359011	0		=			
ANR	1359060	Identifier	start		1359011	0					
ANR	1359061	Identifier	b		1359011	1					
ANR	1359062	ExpressionStatement	b -> access = 0	519:2:16173:16186	1359011	1	True				
ANR	1359063	AssignmentExpression	b -> access = 0		1359011	0		=			
ANR	1359064	PtrMemberAccess	b -> access		1359011	0					
ANR	1359065	Identifier	b		1359011	0					
ANR	1359066	Identifier	access		1359011	1					
ANR	1359067	PrimaryExpression	0		1359011	1					
ANR	1359068	ExpressionStatement	b -> sources = NULL	520:2:16190:16207	1359011	2	True				
ANR	1359069	AssignmentExpression	b -> sources = NULL		1359011	0		=			
ANR	1359070	PtrMemberAccess	b -> sources		1359011	0					
ANR	1359071	Identifier	b		1359011	0					
ANR	1359072	Identifier	sources		1359011	1					
ANR	1359073	Identifier	NULL		1359011	1					
ANR	1359074	ExpressionStatement	b = b -> next	521:2:16211:16222	1359011	3	True				
ANR	1359075	AssignmentExpression	b = b -> next		1359011	0		=			
ANR	1359076	Identifier	b		1359011	0					
ANR	1359077	PtrMemberAccess	b -> next		1359011	1					
ANR	1359078	Identifier	b		1359011	0					
ANR	1359079	Identifier	next		1359011	1					
ANR	1359080	ExpressionStatement	"zend_access_path ( start , ctx )"	525:1:16260:16288	1359011	5	True				
ANR	1359081	CallExpression	"zend_access_path ( start , ctx )"		1359011	0					
ANR	1359082	Callee	zend_access_path		1359011	0					
ANR	1359083	Identifier	zend_access_path		1359011	0					
ANR	1359084	ArgumentList	start		1359011	1					
ANR	1359085	Argument	start		1359011	0					
ANR	1359086	Identifier	start		1359011	0					
ANR	1359087	Argument	ctx		1359011	1					
ANR	1359088	Identifier	ctx		1359011	0					
ANR	1359089	IfStatement	if ( op_array -> last_brk_cont )		1359011	6					
ANR	1359090	Condition	op_array -> last_brk_cont	528:5:16322:16344	1359011	0	True				
ANR	1359091	PtrMemberAccess	op_array -> last_brk_cont		1359011	0					
ANR	1359092	Identifier	op_array		1359011	0					
ANR	1359093	Identifier	last_brk_cont		1359011	1					
ANR	1359094	CompoundStatement		22:2:444:449	1359011	1					
ANR	1359095	IdentifierDeclStatement	int i ;	529:2:16351:16356	1359011	0	True				
ANR	1359096	IdentifierDecl	i		1359011	0					
ANR	1359097	IdentifierDeclType	int		1359011	0					
ANR	1359098	Identifier	i		1359011	1					
ANR	1359099	ForStatement	for ( i = 0 ; i < op_array -> last_brk_cont ; i ++ )		1359011	1					
ANR	1359100	ForInit	i = 0 ;	530:7:16365:16368	1359011	0	True				
ANR	1359101	AssignmentExpression	i = 0		1359011	0		=			
ANR	1359102	Identifier	i		1359011	0					
ANR	1359103	PrimaryExpression	0		1359011	1					
ANR	1359104	Condition	i < op_array -> last_brk_cont	530:12:16370:16395	1359011	1	True				
ANR	1359105	RelationalExpression	i < op_array -> last_brk_cont		1359011	0		<			
ANR	1359106	Identifier	i		1359011	0					
ANR	1359107	PtrMemberAccess	op_array -> last_brk_cont		1359011	1					
ANR	1359108	Identifier	op_array		1359011	0					
ANR	1359109	Identifier	last_brk_cont		1359011	1					
ANR	1359110	PostIncDecOperationExpression	i ++	530:40:16398:16400	1359011	2	True				
ANR	1359111	Identifier	i		1359011	0					
ANR	1359112	IncDec	++		1359011	1					
ANR	1359113	CompoundStatement		23:45:496:496	1359011	3					
ANR	1359114	ExpressionStatement	"zend_access_path ( cfg -> loop_start [ i ] , ctx )"	531:3:16408:16449	1359011	0	True				
ANR	1359115	CallExpression	"zend_access_path ( cfg -> loop_start [ i ] , ctx )"		1359011	0					
ANR	1359116	Callee	zend_access_path		1359011	0					
ANR	1359117	Identifier	zend_access_path		1359011	0					
ANR	1359118	ArgumentList	cfg -> loop_start [ i ]		1359011	1					
ANR	1359119	Argument	cfg -> loop_start [ i ]		1359011	0					
ANR	1359120	ArrayIndexing	cfg -> loop_start [ i ]		1359011	0					
ANR	1359121	PtrMemberAccess	cfg -> loop_start		1359011	0					
ANR	1359122	Identifier	cfg		1359011	0					
ANR	1359123	Identifier	loop_start		1359011	1					
ANR	1359124	Identifier	i		1359011	1					
ANR	1359125	Argument	ctx		1359011	1					
ANR	1359126	Identifier	ctx		1359011	0					
ANR	1359127	ExpressionStatement	"zend_access_path ( cfg -> loop_cont [ i ] , ctx )"	532:3:16454:16494	1359011	1	True				
ANR	1359128	CallExpression	"zend_access_path ( cfg -> loop_cont [ i ] , ctx )"		1359011	0					
ANR	1359129	Callee	zend_access_path		1359011	0					
ANR	1359130	Identifier	zend_access_path		1359011	0					
ANR	1359131	ArgumentList	cfg -> loop_cont [ i ]		1359011	1					
ANR	1359132	Argument	cfg -> loop_cont [ i ]		1359011	0					
ANR	1359133	ArrayIndexing	cfg -> loop_cont [ i ]		1359011	0					
ANR	1359134	PtrMemberAccess	cfg -> loop_cont		1359011	0					
ANR	1359135	Identifier	cfg		1359011	0					
ANR	1359136	Identifier	loop_cont		1359011	1					
ANR	1359137	Identifier	i		1359011	1					
ANR	1359138	Argument	ctx		1359011	1					
ANR	1359139	Identifier	ctx		1359011	0					
ANR	1359140	ExpressionStatement	"zend_access_path ( cfg -> loop_brk [ i ] , ctx )"	533:3:16499:16538	1359011	2	True				
ANR	1359141	CallExpression	"zend_access_path ( cfg -> loop_brk [ i ] , ctx )"		1359011	0					
ANR	1359142	Callee	zend_access_path		1359011	0					
ANR	1359143	Identifier	zend_access_path		1359011	0					
ANR	1359144	ArgumentList	cfg -> loop_brk [ i ]		1359011	1					
ANR	1359145	Argument	cfg -> loop_brk [ i ]		1359011	0					
ANR	1359146	ArrayIndexing	cfg -> loop_brk [ i ]		1359011	0					
ANR	1359147	PtrMemberAccess	cfg -> loop_brk		1359011	0					
ANR	1359148	Identifier	cfg		1359011	0					
ANR	1359149	Identifier	loop_brk		1359011	1					
ANR	1359150	Identifier	i		1359011	1					
ANR	1359151	Argument	ctx		1359011	1					
ANR	1359152	Identifier	ctx		1359011	0					
ANR	1359153	IfStatement	if ( op_array -> last_try_catch )		1359011	7					
ANR	1359154	Condition	op_array -> last_try_catch	538:5:16580:16603	1359011	0	True				
ANR	1359155	PtrMemberAccess	op_array -> last_try_catch		1359011	0					
ANR	1359156	Identifier	op_array		1359011	0					
ANR	1359157	Identifier	last_try_catch		1359011	1					
ANR	1359158	CompoundStatement		32:2:703:708	1359011	1					
ANR	1359159	IdentifierDeclStatement	int i ;	539:2:16610:16615	1359011	0	True				
ANR	1359160	IdentifierDecl	i		1359011	0					
ANR	1359161	IdentifierDeclType	int		1359011	0					
ANR	1359162	Identifier	i		1359011	1					
ANR	1359163	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		1359011	1					
ANR	1359164	ForInit	i = 0 ;	540:7:16624:16627	1359011	0	True				
ANR	1359165	AssignmentExpression	i = 0		1359011	0		=			
ANR	1359166	Identifier	i		1359011	0					
ANR	1359167	PrimaryExpression	0		1359011	1					
ANR	1359168	Condition	i < op_array -> last_try_catch	540:12:16629:16655	1359011	1	True				
ANR	1359169	RelationalExpression	i < op_array -> last_try_catch		1359011	0		<			
ANR	1359170	Identifier	i		1359011	0					
ANR	1359171	PtrMemberAccess	op_array -> last_try_catch		1359011	1					
ANR	1359172	Identifier	op_array		1359011	0					
ANR	1359173	Identifier	last_try_catch		1359011	1					
ANR	1359174	PostIncDecOperationExpression	i ++	540:41:16658:16660	1359011	2	True				
ANR	1359175	Identifier	i		1359011	0					
ANR	1359176	IncDec	++		1359011	1					
ANR	1359177	CompoundStatement		33:46:756:756	1359011	3					
ANR	1359178	Statement	if	541:3:16668:16669	1359011	0	True				
ANR	1359179	Statement	(	541:6:16671:16671	1359011	1	True				
ANR	1359180	Statement	!	541:7:16672:16672	1359011	2	True				
ANR	1359181	Statement	cfg	541:8:16673:16675	1359011	3	True				
ANR	1359182	Statement	->	541:11:16676:16677	1359011	4	True				
ANR	1359183	Statement	catch	541:13:16678:16682	1359011	5	True				
ANR	1359184	Statement	[	541:18:16683:16683	1359011	6	True				
ANR	1359185	Statement	i	541:19:16684:16684	1359011	7	True				
ANR	1359186	Statement	]	541:20:16685:16685	1359011	8	True				
ANR	1359187	Statement	->	541:21:16686:16687	1359011	9	True				
ANR	1359188	Statement	access	541:23:16688:16693	1359011	10	True				
ANR	1359189	Statement	)	541:29:16694:16694	1359011	11	True				
ANR	1359190	CompoundStatement		34:31:789:789	1359011	12					
ANR	1359191	Statement	zend_access_path	542:4:16702:16717	1359011	0	True				
ANR	1359192	Statement	(	542:20:16718:16718	1359011	1	True				
ANR	1359193	Statement	cfg	542:21:16719:16721	1359011	2	True				
ANR	1359194	Statement	->	542:24:16722:16723	1359011	3	True				
ANR	1359195	Statement	catch	542:26:16724:16728	1359011	4	True				
ANR	1359196	Statement	[	542:31:16729:16729	1359011	5	True				
ANR	1359197	Statement	i	542:32:16730:16730	1359011	6	True				
ANR	1359198	Statement	]	542:33:16731:16731	1359011	7	True				
ANR	1359199	Statement	","	542:34:16732:16732	1359011	8	True				
ANR	1359200	Statement	ctx	542:36:16734:16736	1359011	9	True				
ANR	1359201	Statement	)	542:39:16737:16737	1359011	10	True				
ANR	1359202	ExpressionStatement		542:40:16738:16738	1359011	11	True				
ANR	1359203	ReturnType	static void		1359011	1					
ANR	1359204	Identifier	zend_rebuild_access_path		1359011	2					
ANR	1359205	ParameterList	"zend_cfg * cfg , zend_op_array * op_array , int find_start , zend_optimizer_ctx * ctx"		1359011	3					
ANR	1359206	Parameter	zend_cfg * cfg	507:37:15825:15837	1359011	0	True				
ANR	1359207	ParameterType	zend_cfg *		1359011	0					
ANR	1359208	Identifier	cfg		1359011	1					
ANR	1359209	Parameter	zend_op_array * op_array	507:52:15840:15862	1359011	1	True				
ANR	1359210	ParameterType	zend_op_array *		1359011	0					
ANR	1359211	Identifier	op_array		1359011	1					
ANR	1359212	Parameter	int find_start	507:77:15865:15878	1359011	2	True				
ANR	1359213	ParameterType	int		1359011	0					
ANR	1359214	Identifier	find_start		1359011	1					
ANR	1359215	Parameter	zend_optimizer_ctx * ctx	507:93:15881:15903	1359011	3	True				
ANR	1359216	ParameterType	zend_optimizer_ctx *		1359011	0					
ANR	1359217	Identifier	ctx		1359011	1					
ANR	1359218	CFGEntryNode	ENTRY		1359011		True				
ANR	1359219	CFGExitNode	EXIT		1359011		True				
ANR	1359220	Symbol	* cfg -> loop_brk		1359011						
ANR	1359221	Symbol	cfg -> blocks		1359011						
ANR	1359222	Symbol	b -> access		1359011						
ANR	1359223	Symbol	cfg -> loop_brk		1359011						
ANR	1359224	Symbol	b -> next		1359011						
ANR	1359225	Symbol	cfg -> loop_cont		1359011						
ANR	1359226	Symbol	b		1359011						
ANR	1359227	Symbol	NULL		1359011						
ANR	1359228	Symbol	cfg		1359011						
ANR	1359229	Symbol	ctx		1359011						
ANR	1359230	Symbol	blocks		1359011						
ANR	1359231	Symbol	start		1359011						
ANR	1359232	Symbol	i		1359011						
ANR	1359233	Symbol	* b		1359011						
ANR	1359234	Symbol	* op_array		1359011						
ANR	1359235	Symbol	op_array -> last_brk_cont		1359011						
ANR	1359236	Symbol	op_array -> last_try_catch		1359011						
ANR	1359237	Symbol	find_start		1359011						
ANR	1359238	Symbol	* cfg		1359011						
ANR	1359239	Symbol	b -> sources		1359011						
ANR	1359240	Symbol	* i		1359011						
ANR	1359241	Symbol	* cfg -> loop_start		1359011						
ANR	1359242	Symbol	* cfg -> loop_cont		1359011						
ANR	1359243	Symbol	* * cfg		1359011						
ANR	1359244	Symbol	cfg -> loop_start		1359011						
ANR	1359245	Symbol	op_array		1359011						
ANR	1359246	Function	strip_nop	564:0:17203:18161							
ANR	1359247	FunctionDef	"strip_nop (zend_code_block * block , zend_optimizer_ctx * ctx)"		1359246	0					
ANR	1359248	CompoundStatement		565:0:17274:18161	1359246	0					
ANR	1359249	IdentifierDeclStatement	zend_op * opline = block -> start_opline ;	566:1:17277:17314	1359246	0	True				
ANR	1359250	IdentifierDecl	* opline = block -> start_opline		1359246	0					
ANR	1359251	IdentifierDeclType	zend_op *		1359246	0					
ANR	1359252	Identifier	opline		1359246	1					
ANR	1359253	AssignmentExpression	* opline = block -> start_opline		1359246	2		=			
ANR	1359254	Identifier	opline		1359246	0					
ANR	1359255	PtrMemberAccess	block -> start_opline		1359246	1					
ANR	1359256	Identifier	block		1359246	0					
ANR	1359257	Identifier	start_opline		1359246	1					
ANR	1359258	IdentifierDeclStatement	"zend_op * end , * new_end ;"	567:1:17317:17339	1359246	1	True				
ANR	1359259	IdentifierDecl	* end		1359246	0					
ANR	1359260	IdentifierDeclType	zend_op *		1359246	0					
ANR	1359261	Identifier	end		1359246	1					
ANR	1359262	IdentifierDecl	* new_end		1359246	1					
ANR	1359263	IdentifierDeclType	zend_op *		1359246	0					
ANR	1359264	Identifier	new_end		1359246	1					
ANR	1359265	WhileStatement	while ( block -> len > 0 && block -> start_opline -> opcode == ZEND_NOP )		1359246	2					
ANR	1359266	Condition	block -> len > 0 && block -> start_opline -> opcode == ZEND_NOP	570:8:17377:17433	1359246	0	True				
ANR	1359267	AndExpression	block -> len > 0 && block -> start_opline -> opcode == ZEND_NOP		1359246	0		&&			
ANR	1359268	RelationalExpression	block -> len > 0		1359246	0		>			
ANR	1359269	PtrMemberAccess	block -> len		1359246	0					
ANR	1359270	Identifier	block		1359246	0					
ANR	1359271	Identifier	len		1359246	1					
ANR	1359272	PrimaryExpression	0		1359246	1					
ANR	1359273	EqualityExpression	block -> start_opline -> opcode == ZEND_NOP		1359246	1		==			
ANR	1359274	PtrMemberAccess	block -> start_opline -> opcode		1359246	0					
ANR	1359275	PtrMemberAccess	block -> start_opline		1359246	0					
ANR	1359276	Identifier	block		1359246	0					
ANR	1359277	Identifier	start_opline		1359246	1					
ANR	1359278	Identifier	opcode		1359246	1					
ANR	1359279	Identifier	ZEND_NOP		1359246	1					
ANR	1359280	CompoundStatement		6:67:161:161	1359246	1					
ANR	1359281	IfStatement	if ( block -> len == 1 )		1359246	0					
ANR	1359282	Condition	block -> len == 1	571:6:17444:17458	1359246	0	True				
ANR	1359283	EqualityExpression	block -> len == 1		1359246	0		==			
ANR	1359284	PtrMemberAccess	block -> len		1359246	0					
ANR	1359285	Identifier	block		1359246	0					
ANR	1359286	Identifier	len		1359246	1					
ANR	1359287	PrimaryExpression	1		1359246	1					
ANR	1359288	CompoundStatement		7:23:186:186	1359246	1					
ANR	1359289	IfStatement	if ( block -> follow_to )		1359246	0					
ANR	1359290	Condition	block -> follow_to	573:7:17529:17544	1359246	0	True				
ANR	1359291	PtrMemberAccess	block -> follow_to		1359246	0					
ANR	1359292	Identifier	block		1359246	0					
ANR	1359293	Identifier	follow_to		1359246	1					
ANR	1359294	CompoundStatement		9:25:272:272	1359246	1					
ANR	1359295	ExpressionStatement	"delete_code_block ( block , ctx )"	574:4:17553:17582	1359246	0	True				
ANR	1359296	CallExpression	"delete_code_block ( block , ctx )"		1359246	0					
ANR	1359297	Callee	delete_code_block		1359246	0					
ANR	1359298	Identifier	delete_code_block		1359246	0					
ANR	1359299	ArgumentList	block		1359246	1					
ANR	1359300	Argument	block		1359246	0					
ANR	1359301	Identifier	block		1359246	0					
ANR	1359302	Argument	ctx		1359246	1					
ANR	1359303	Identifier	ctx		1359246	0					
ANR	1359304	ReturnStatement	return ;	576:3:17592:17598	1359246	1	True				
ANR	1359305	ExpressionStatement	block -> start_opline ++	578:2:17606:17627	1359246	1	True				
ANR	1359306	PostIncDecOperationExpression	block -> start_opline ++		1359246	0					
ANR	1359307	PtrMemberAccess	block -> start_opline		1359246	0					
ANR	1359308	Identifier	block		1359246	0					
ANR	1359309	Identifier	start_opline		1359246	1					
ANR	1359310	IncDec	++		1359246	1					
ANR	1359311	ExpressionStatement	block -> start_opline_no ++	579:2:17631:17655	1359246	2	True				
ANR	1359312	PostIncDecOperationExpression	block -> start_opline_no ++		1359246	0					
ANR	1359313	PtrMemberAccess	block -> start_opline_no		1359246	0					
ANR	1359314	Identifier	block		1359246	0					
ANR	1359315	Identifier	start_opline_no		1359246	1					
ANR	1359316	IncDec	++		1359246	1					
ANR	1359317	ExpressionStatement	block -> len --	580:2:17659:17671	1359246	3	True				
ANR	1359318	PostIncDecOperationExpression	block -> len --		1359246	0					
ANR	1359319	PtrMemberAccess	block -> len		1359246	0					
ANR	1359320	Identifier	block		1359246	0					
ANR	1359321	Identifier	len		1359246	1					
ANR	1359322	IncDec	--		1359246	1					
ANR	1359323	ExpressionStatement	opline = new_end = block -> start_opline	584:1:17707:17745	1359246	3	True				
ANR	1359324	AssignmentExpression	opline = new_end = block -> start_opline		1359246	0		=			
ANR	1359325	Identifier	opline		1359246	0					
ANR	1359326	AssignmentExpression	new_end = block -> start_opline		1359246	1		=			
ANR	1359327	Identifier	new_end		1359246	0					
ANR	1359328	PtrMemberAccess	block -> start_opline		1359246	1					
ANR	1359329	Identifier	block		1359246	0					
ANR	1359330	Identifier	start_opline		1359246	1					
ANR	1359331	ExpressionStatement	end = opline + block -> len	585:1:17748:17773	1359246	4	True				
ANR	1359332	AssignmentExpression	end = opline + block -> len		1359246	0		=			
ANR	1359333	Identifier	end		1359246	0					
ANR	1359334	AdditiveExpression	opline + block -> len		1359246	1		+			
ANR	1359335	Identifier	opline		1359246	0					
ANR	1359336	PtrMemberAccess	block -> len		1359246	1					
ANR	1359337	Identifier	block		1359246	0					
ANR	1359338	Identifier	len		1359246	1					
ANR	1359339	WhileStatement	while ( opline < end )		1359246	5					
ANR	1359340	Condition	opline < end	587:8:17784:17795	1359246	0	True				
ANR	1359341	RelationalExpression	opline < end		1359246	0		<			
ANR	1359342	Identifier	opline		1359246	0					
ANR	1359343	Identifier	end		1359246	1					
ANR	1359344	CompoundStatement		25:2:543:554	1359246	1					
ANR	1359345	IdentifierDeclStatement	zend_op * src ;	588:2:17802:17814	1359246	0	True				
ANR	1359346	IdentifierDecl	* src		1359246	0					
ANR	1359347	IdentifierDeclType	zend_op *		1359246	0					
ANR	1359348	Identifier	src		1359246	1					
ANR	1359349	IdentifierDeclStatement	int len = 0 ;	589:2:17818:17829	1359246	1	True				
ANR	1359350	IdentifierDecl	len = 0		1359246	0					
ANR	1359351	IdentifierDeclType	int		1359246	0					
ANR	1359352	Identifier	len		1359246	1					
ANR	1359353	AssignmentExpression	len = 0		1359246	2		=			
ANR	1359354	Identifier	len		1359246	0					
ANR	1359355	PrimaryExpression	0		1359246	1					
ANR	1359356	WhileStatement	while ( opline < end && opline -> opcode == ZEND_NOP )		1359246	2					
ANR	1359357	Condition	opline < end && opline -> opcode == ZEND_NOP	591:9:17841:17882	1359246	0	True				
ANR	1359358	AndExpression	opline < end && opline -> opcode == ZEND_NOP		1359246	0		&&			
ANR	1359359	RelationalExpression	opline < end		1359246	0		<			
ANR	1359360	Identifier	opline		1359246	0					
ANR	1359361	Identifier	end		1359246	1					
ANR	1359362	EqualityExpression	opline -> opcode == ZEND_NOP		1359246	1		==			
ANR	1359363	PtrMemberAccess	opline -> opcode		1359246	0					
ANR	1359364	Identifier	opline		1359246	0					
ANR	1359365	Identifier	opcode		1359246	1					
ANR	1359366	Identifier	ZEND_NOP		1359246	1					
ANR	1359367	CompoundStatement		27:53:610:610	1359246	1					
ANR	1359368	ExpressionStatement	opline ++	592:3:17890:17898	1359246	0	True				
ANR	1359369	PostIncDecOperationExpression	opline ++		1359246	0					
ANR	1359370	Identifier	opline		1359246	0					
ANR	1359371	IncDec	++		1359246	1					
ANR	1359372	ExpressionStatement	src = opline	594:2:17906:17918	1359246	3	True				
ANR	1359373	AssignmentExpression	src = opline		1359246	0		=			
ANR	1359374	Identifier	src		1359246	0					
ANR	1359375	Identifier	opline		1359246	1					
ANR	1359376	WhileStatement	while ( opline < end && opline -> opcode != ZEND_NOP )		1359246	4					
ANR	1359377	Condition	opline < end && opline -> opcode != ZEND_NOP	596:9:17930:17971	1359246	0	True				
ANR	1359378	AndExpression	opline < end && opline -> opcode != ZEND_NOP		1359246	0		&&			
ANR	1359379	RelationalExpression	opline < end		1359246	0		<			
ANR	1359380	Identifier	opline		1359246	0					
ANR	1359381	Identifier	end		1359246	1					
ANR	1359382	EqualityExpression	opline -> opcode != ZEND_NOP		1359246	1		!=			
ANR	1359383	PtrMemberAccess	opline -> opcode		1359246	0					
ANR	1359384	Identifier	opline		1359246	0					
ANR	1359385	Identifier	opcode		1359246	1					
ANR	1359386	Identifier	ZEND_NOP		1359246	1					
ANR	1359387	CompoundStatement		32:53:699:699	1359246	1					
ANR	1359388	ExpressionStatement	opline ++	597:3:17979:17987	1359246	0	True				
ANR	1359389	PostIncDecOperationExpression	opline ++		1359246	0					
ANR	1359390	Identifier	opline		1359246	0					
ANR	1359391	IncDec	++		1359246	1					
ANR	1359392	ExpressionStatement	len = opline - src	599:2:17995:18013	1359246	5	True				
ANR	1359393	AssignmentExpression	len = opline - src		1359246	0		=			
ANR	1359394	Identifier	len		1359246	0					
ANR	1359395	AdditiveExpression	opline - src		1359246	1		-			
ANR	1359396	Identifier	opline		1359246	0					
ANR	1359397	Identifier	src		1359246	1					
ANR	1359398	ExpressionStatement	"memmove ( new_end , src , len * sizeof ( zend_op ) )"	602:2:18050:18092	1359246	6	True				
ANR	1359399	CallExpression	"memmove ( new_end , src , len * sizeof ( zend_op ) )"		1359246	0					
ANR	1359400	Callee	memmove		1359246	0					
ANR	1359401	Identifier	memmove		1359246	0					
ANR	1359402	ArgumentList	new_end		1359246	1					
ANR	1359403	Argument	new_end		1359246	0					
ANR	1359404	Identifier	new_end		1359246	0					
ANR	1359405	Argument	src		1359246	1					
ANR	1359406	Identifier	src		1359246	0					
ANR	1359407	Argument	len * sizeof ( zend_op )		1359246	2					
ANR	1359408	MultiplicativeExpression	len * sizeof ( zend_op )		1359246	0		*			
ANR	1359409	Identifier	len		1359246	0					
ANR	1359410	SizeofExpression	sizeof ( zend_op )		1359246	1					
ANR	1359411	Sizeof	sizeof		1359246	0					
ANR	1359412	SizeofOperand	zend_op		1359246	1					
ANR	1359413	ExpressionStatement	new_end += len	604:2:18097:18111	1359246	7	True				
ANR	1359414	AssignmentExpression	new_end += len		1359246	0		+=			
ANR	1359415	Identifier	new_end		1359246	0					
ANR	1359416	Identifier	len		1359246	1					
ANR	1359417	ExpressionStatement	block -> len = new_end - block -> start_opline	606:1:18117:18159	1359246	6	True				
ANR	1359418	AssignmentExpression	block -> len = new_end - block -> start_opline		1359246	0		=			
ANR	1359419	PtrMemberAccess	block -> len		1359246	0					
ANR	1359420	Identifier	block		1359246	0					
ANR	1359421	Identifier	len		1359246	1					
ANR	1359422	AdditiveExpression	new_end - block -> start_opline		1359246	1		-			
ANR	1359423	Identifier	new_end		1359246	0					
ANR	1359424	PtrMemberAccess	block -> start_opline		1359246	1					
ANR	1359425	Identifier	block		1359246	0					
ANR	1359426	Identifier	start_opline		1359246	1					
ANR	1359427	ReturnType	static void		1359246	1					
ANR	1359428	Identifier	strip_nop		1359246	2					
ANR	1359429	ParameterList	"zend_code_block * block , zend_optimizer_ctx * ctx"		1359246	3					
ANR	1359430	Parameter	zend_code_block * block	564:22:17225:17246	1359246	0	True				
ANR	1359431	ParameterType	zend_code_block *		1359246	0					
ANR	1359432	Identifier	block		1359246	1					
ANR	1359433	Parameter	zend_optimizer_ctx * ctx	564:46:17249:17271	1359246	1	True				
ANR	1359434	ParameterType	zend_optimizer_ctx *		1359246	0					
ANR	1359435	Identifier	ctx		1359246	1					
ANR	1359436	CFGEntryNode	ENTRY		1359246		True				
ANR	1359437	CFGExitNode	EXIT		1359246		True				
ANR	1359438	Symbol	* block -> start_opline		1359246						
ANR	1359439	Symbol	block -> start_opline -> opcode		1359246						
ANR	1359440	Symbol	src		1359246						
ANR	1359441	Symbol	ctx		1359246						
ANR	1359442	Symbol	block -> follow_to		1359246						
ANR	1359443	Symbol	ZEND_NOP		1359246						
ANR	1359444	Symbol	block -> len		1359246						
ANR	1359445	Symbol	* block		1359246						
ANR	1359446	Symbol	block -> start_opline		1359246						
ANR	1359447	Symbol	opline		1359246						
ANR	1359448	Symbol	len		1359246						
ANR	1359449	Symbol	* opline		1359246						
ANR	1359450	Symbol	opline -> opcode		1359246						
ANR	1359451	Symbol	* * block		1359246						
ANR	1359452	Symbol	block -> start_opline_no		1359246						
ANR	1359453	Symbol	block		1359246						
ANR	1359454	Symbol	end		1359246						
ANR	1359455	Symbol	new_end		1359246						
ANR	1359456	Function	zend_optimize_block	609:0:18164:38875							
ANR	1359457	FunctionDef	"zend_optimize_block (zend_code_block * block , zend_op_array * op_array , zend_bitset used_ext , zend_cfg * cfg , zend_optimizer_ctx * ctx)"		1359456	0					
ANR	1359458	CompoundStatement		610:0:18307:38875	1359456	0					
ANR	1359459	IdentifierDeclStatement	zend_op * opline = block -> start_opline ;	611:1:18310:18347	1359456	0	True				
ANR	1359460	IdentifierDecl	* opline = block -> start_opline		1359456	0					
ANR	1359461	IdentifierDeclType	zend_op *		1359456	0					
ANR	1359462	Identifier	opline		1359456	1					
ANR	1359463	AssignmentExpression	* opline = block -> start_opline		1359456	2		=			
ANR	1359464	Identifier	opline		1359456	0					
ANR	1359465	PtrMemberAccess	block -> start_opline		1359456	1					
ANR	1359466	Identifier	block		1359456	0					
ANR	1359467	Identifier	start_opline		1359456	1					
ANR	1359468	IdentifierDeclStatement	"zend_op * end , * last_op = NULL ;"	612:1:18350:18379	1359456	1	True				
ANR	1359469	IdentifierDecl	* end		1359456	0					
ANR	1359470	IdentifierDeclType	zend_op *		1359456	0					
ANR	1359471	Identifier	end		1359456	1					
ANR	1359472	IdentifierDecl	* last_op = NULL		1359456	1					
ANR	1359473	IdentifierDeclType	zend_op *		1359456	0					
ANR	1359474	Identifier	last_op		1359456	1					
ANR	1359475	AssignmentExpression	* last_op = NULL		1359456	2		=			
ANR	1359476	Identifier	NULL		1359456	0					
ANR	1359477	Identifier	NULL		1359456	1					
ANR	1359478	IdentifierDeclStatement	zend_op * * Tsource = cfg -> Tsource ;	613:1:18382:18414	1359456	2	True				
ANR	1359479	IdentifierDecl	* * Tsource = cfg -> Tsource		1359456	0					
ANR	1359480	IdentifierDeclType	zend_op * *		1359456	0					
ANR	1359481	Identifier	Tsource		1359456	1					
ANR	1359482	AssignmentExpression	* * Tsource = cfg -> Tsource		1359456	2		=			
ANR	1359483	Identifier	Tsource		1359456	0					
ANR	1359484	PtrMemberAccess	cfg -> Tsource		1359456	1					
ANR	1359485	Identifier	cfg		1359456	0					
ANR	1359486	Identifier	Tsource		1359456	1					
ANR	1359487	ExpressionStatement	"print_block ( block , op_array -> opcodes , ""Opt "" )"	615:1:18418:18463	1359456	3	True				
ANR	1359488	CallExpression	"print_block ( block , op_array -> opcodes , ""Opt "" )"		1359456	0					
ANR	1359489	Callee	print_block		1359456	0					
ANR	1359490	Identifier	print_block		1359456	0					
ANR	1359491	ArgumentList	block		1359456	1					
ANR	1359492	Argument	block		1359456	0					
ANR	1359493	Identifier	block		1359456	0					
ANR	1359494	Argument	op_array -> opcodes		1359456	1					
ANR	1359495	PtrMemberAccess	op_array -> opcodes		1359456	0					
ANR	1359496	Identifier	op_array		1359456	0					
ANR	1359497	Identifier	opcodes		1359456	1					
ANR	1359498	Argument	"""Opt """		1359456	2					
ANR	1359499	PrimaryExpression	"""Opt """		1359456	0					
ANR	1359500	WhileStatement	while ( block -> len > 0 && block -> start_opline -> opcode == ZEND_NOP )		1359456	4					
ANR	1359501	Condition	block -> len > 0 && block -> start_opline -> opcode == ZEND_NOP	618:8:18501:18557	1359456	0	True				
ANR	1359502	AndExpression	block -> len > 0 && block -> start_opline -> opcode == ZEND_NOP		1359456	0		&&			
ANR	1359503	RelationalExpression	block -> len > 0		1359456	0		>			
ANR	1359504	PtrMemberAccess	block -> len		1359456	0					
ANR	1359505	Identifier	block		1359456	0					
ANR	1359506	Identifier	len		1359456	1					
ANR	1359507	PrimaryExpression	0		1359456	1					
ANR	1359508	EqualityExpression	block -> start_opline -> opcode == ZEND_NOP		1359456	1		==			
ANR	1359509	PtrMemberAccess	block -> start_opline -> opcode		1359456	0					
ANR	1359510	PtrMemberAccess	block -> start_opline		1359456	0					
ANR	1359511	Identifier	block		1359456	0					
ANR	1359512	Identifier	start_opline		1359456	1					
ANR	1359513	Identifier	opcode		1359456	1					
ANR	1359514	Identifier	ZEND_NOP		1359456	1					
ANR	1359515	CompoundStatement		9:67:252:252	1359456	1					
ANR	1359516	IfStatement	if ( block -> len == 1 )		1359456	0					
ANR	1359517	Condition	block -> len == 1	619:6:18568:18582	1359456	0	True				
ANR	1359518	EqualityExpression	block -> len == 1		1359456	0		==			
ANR	1359519	PtrMemberAccess	block -> len		1359456	0					
ANR	1359520	Identifier	block		1359456	0					
ANR	1359521	Identifier	len		1359456	1					
ANR	1359522	PrimaryExpression	1		1359456	1					
ANR	1359523	CompoundStatement		10:23:277:277	1359456	1					
ANR	1359524	IfStatement	if ( block -> follow_to )		1359456	0					
ANR	1359525	Condition	block -> follow_to	621:7:18653:18668	1359456	0	True				
ANR	1359526	PtrMemberAccess	block -> follow_to		1359456	0					
ANR	1359527	Identifier	block		1359456	0					
ANR	1359528	Identifier	follow_to		1359456	1					
ANR	1359529	CompoundStatement		12:25:363:363	1359456	1					
ANR	1359530	ExpressionStatement	"delete_code_block ( block , ctx )"	622:4:18677:18706	1359456	0	True				
ANR	1359531	CallExpression	"delete_code_block ( block , ctx )"		1359456	0					
ANR	1359532	Callee	delete_code_block		1359456	0					
ANR	1359533	Identifier	delete_code_block		1359456	0					
ANR	1359534	ArgumentList	block		1359456	1					
ANR	1359535	Argument	block		1359456	0					
ANR	1359536	Identifier	block		1359456	0					
ANR	1359537	Argument	ctx		1359456	1					
ANR	1359538	Identifier	ctx		1359456	0					
ANR	1359539	ReturnStatement	return ;	624:3:18716:18722	1359456	1	True				
ANR	1359540	ExpressionStatement	block -> start_opline ++	626:2:18730:18751	1359456	1	True				
ANR	1359541	PostIncDecOperationExpression	block -> start_opline ++		1359456	0					
ANR	1359542	PtrMemberAccess	block -> start_opline		1359456	0					
ANR	1359543	Identifier	block		1359456	0					
ANR	1359544	Identifier	start_opline		1359456	1					
ANR	1359545	IncDec	++		1359456	1					
ANR	1359546	ExpressionStatement	block -> start_opline_no ++	627:2:18755:18779	1359456	2	True				
ANR	1359547	PostIncDecOperationExpression	block -> start_opline_no ++		1359456	0					
ANR	1359548	PtrMemberAccess	block -> start_opline_no		1359456	0					
ANR	1359549	Identifier	block		1359456	0					
ANR	1359550	Identifier	start_opline_no		1359456	1					
ANR	1359551	IncDec	++		1359456	1					
ANR	1359552	ExpressionStatement	block -> len --	628:2:18783:18795	1359456	3	True				
ANR	1359553	PostIncDecOperationExpression	block -> len --		1359456	0					
ANR	1359554	PtrMemberAccess	block -> len		1359456	0					
ANR	1359555	Identifier	block		1359456	0					
ANR	1359556	Identifier	len		1359456	1					
ANR	1359557	IncDec	--		1359456	1					
ANR	1359558	ExpressionStatement	"memset ( Tsource , 0 , ( op_array -> last_var + op_array -> T ) * sizeof ( zend_op * ) )"	632:1:18870:18944	1359456	5	True				
ANR	1359559	CallExpression	"memset ( Tsource , 0 , ( op_array -> last_var + op_array -> T ) * sizeof ( zend_op * ) )"		1359456	0					
ANR	1359560	Callee	memset		1359456	0					
ANR	1359561	Identifier	memset		1359456	0					
ANR	1359562	ArgumentList	Tsource		1359456	1					
ANR	1359563	Argument	Tsource		1359456	0					
ANR	1359564	Identifier	Tsource		1359456	0					
ANR	1359565	Argument	0		1359456	1					
ANR	1359566	PrimaryExpression	0		1359456	0					
ANR	1359567	Argument	( op_array -> last_var + op_array -> T ) * sizeof ( zend_op * )		1359456	2					
ANR	1359568	MultiplicativeExpression	( op_array -> last_var + op_array -> T ) * sizeof ( zend_op * )		1359456	0		*			
ANR	1359569	AdditiveExpression	op_array -> last_var + op_array -> T		1359456	0		+			
ANR	1359570	PtrMemberAccess	op_array -> last_var		1359456	0					
ANR	1359571	Identifier	op_array		1359456	0					
ANR	1359572	Identifier	last_var		1359456	1					
ANR	1359573	PtrMemberAccess	op_array -> T		1359456	1					
ANR	1359574	Identifier	op_array		1359456	0					
ANR	1359575	Identifier	T		1359456	1					
ANR	1359576	SizeofExpression	sizeof ( zend_op * )		1359456	1					
ANR	1359577	Sizeof	sizeof		1359456	0					
ANR	1359578	SizeofOperand	zend_op *		1359456	1					
ANR	1359579	ExpressionStatement	opline = block -> start_opline	633:1:18947:18975	1359456	6	True				
ANR	1359580	AssignmentExpression	opline = block -> start_opline		1359456	0		=			
ANR	1359581	Identifier	opline		1359456	0					
ANR	1359582	PtrMemberAccess	block -> start_opline		1359456	1					
ANR	1359583	Identifier	block		1359456	0					
ANR	1359584	Identifier	start_opline		1359456	1					
ANR	1359585	ExpressionStatement	end = opline + block -> len	634:1:18978:19003	1359456	7	True				
ANR	1359586	AssignmentExpression	end = opline + block -> len		1359456	0		=			
ANR	1359587	Identifier	end		1359456	0					
ANR	1359588	AdditiveExpression	opline + block -> len		1359456	1		+			
ANR	1359589	Identifier	opline		1359456	0					
ANR	1359590	PtrMemberAccess	block -> len		1359456	1					
ANR	1359591	Identifier	block		1359456	0					
ANR	1359592	Identifier	len		1359456	1					
ANR	1359593	WhileStatement	while ( ( op_array -> T ) && ( opline < end ) )		1359456	8					
ANR	1359594	Condition	( op_array -> T ) && ( opline < end )	635:8:19013:19043	1359456	0	True				
ANR	1359595	AndExpression	( op_array -> T ) && ( opline < end )		1359456	0		&&			
ANR	1359596	PtrMemberAccess	op_array -> T		1359456	0					
ANR	1359597	Identifier	op_array		1359456	0					
ANR	1359598	Identifier	T		1359456	1					
ANR	1359599	RelationalExpression	opline < end		1359456	1		<			
ANR	1359600	Identifier	opline		1359456	0					
ANR	1359601	Identifier	end		1359456	1					
ANR	1359602	CompoundStatement		26:41:738:738	1359456	1					
ANR	1359603	IfStatement	if ( ( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && opline -> opcode != ZEND_CASE && opline -> opcode != ZEND_FETCH_LIST && ( opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW ) && opline -> opcode != ZEND_FREE )		1359456	0					
ANR	1359604	Condition	( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && opline -> opcode != ZEND_CASE && opline -> opcode != ZEND_FETCH_LIST && ( opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW ) && opline -> opcode != ZEND_FREE	637:6:19089:19509	1359456	0	True				
ANR	1359605	AndExpression	( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && opline -> opcode != ZEND_CASE && opline -> opcode != ZEND_FETCH_LIST && ( opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW ) && opline -> opcode != ZEND_FREE		1359456	0		&&			
ANR	1359606	BitAndExpression	ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR )		1359456	0		&			
ANR	1359607	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1359608	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1359609	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1359610	ArgumentList	opline		1359456	1					
ANR	1359611	Argument	opline		1359456	0					
ANR	1359612	Identifier	opline		1359456	0					
ANR	1359613	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1359456	1		|			
ANR	1359614	Identifier	IS_TMP_VAR		1359456	0					
ANR	1359615	Identifier	IS_VAR		1359456	1					
ANR	1359616	AndExpression	VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && opline -> opcode != ZEND_CASE && opline -> opcode != ZEND_FETCH_LIST && ( opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW ) && opline -> opcode != ZEND_FREE		1359456	1		&&			
ANR	1359617	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1359618	Callee	VAR_SOURCE		1359456	0					
ANR	1359619	Identifier	VAR_SOURCE		1359456	0					
ANR	1359620	ArgumentList	opline -> op1		1359456	1					
ANR	1359621	Argument	opline -> op1		1359456	0					
ANR	1359622	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1359623	Identifier	opline		1359456	0					
ANR	1359624	Identifier	op1		1359456	1					
ANR	1359625	AndExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && opline -> opcode != ZEND_CASE && opline -> opcode != ZEND_FETCH_LIST && ( opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW ) && opline -> opcode != ZEND_FREE		1359456	1		&&			
ANR	1359626	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN		1359456	0		==			
ANR	1359627	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1359628	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1359629	Callee	VAR_SOURCE		1359456	0					
ANR	1359630	Identifier	VAR_SOURCE		1359456	0					
ANR	1359631	ArgumentList	opline -> op1		1359456	1					
ANR	1359632	Argument	opline -> op1		1359456	0					
ANR	1359633	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1359634	Identifier	opline		1359456	0					
ANR	1359635	Identifier	op1		1359456	1					
ANR	1359636	Identifier	opcode		1359456	1					
ANR	1359637	Identifier	ZEND_QM_ASSIGN		1359456	1					
ANR	1359638	AndExpression	ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && opline -> opcode != ZEND_CASE && opline -> opcode != ZEND_FETCH_LIST && ( opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW ) && opline -> opcode != ZEND_FREE		1359456	1		&&			
ANR	1359639	EqualityExpression	ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST		1359456	0		==			
ANR	1359640	CallExpression	ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op1 ) )		1359456	0					
ANR	1359641	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1359642	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1359643	ArgumentList	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1359644	Argument	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1359645	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1359646	Callee	VAR_SOURCE		1359456	0					
ANR	1359647	Identifier	VAR_SOURCE		1359456	0					
ANR	1359648	ArgumentList	opline -> op1		1359456	1					
ANR	1359649	Argument	opline -> op1		1359456	0					
ANR	1359650	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1359651	Identifier	opline		1359456	0					
ANR	1359652	Identifier	op1		1359456	1					
ANR	1359653	Identifier	IS_CONST		1359456	1					
ANR	1359654	AndExpression	opline -> opcode != ZEND_CASE && opline -> opcode != ZEND_FETCH_LIST && ( opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW ) && opline -> opcode != ZEND_FREE		1359456	1		&&			
ANR	1359655	EqualityExpression	opline -> opcode != ZEND_CASE		1359456	0		!=			
ANR	1359656	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1359657	Identifier	opline		1359456	0					
ANR	1359658	Identifier	opcode		1359456	1					
ANR	1359659	Identifier	ZEND_CASE		1359456	1					
ANR	1359660	AndExpression	opline -> opcode != ZEND_FETCH_LIST && ( opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW ) && opline -> opcode != ZEND_FREE		1359456	1		&&			
ANR	1359661	EqualityExpression	opline -> opcode != ZEND_FETCH_LIST		1359456	0		!=			
ANR	1359662	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1359663	Identifier	opline		1359456	0					
ANR	1359664	Identifier	opcode		1359456	1					
ANR	1359665	Identifier	ZEND_FETCH_LIST		1359456	1					
ANR	1359666	AndExpression	( opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW ) && opline -> opcode != ZEND_FREE		1359456	1		&&			
ANR	1359667	OrExpression	opline -> opcode != ZEND_FE_RESET_R || opline -> opcode != ZEND_FE_RESET_RW		1359456	0		||			
ANR	1359668	EqualityExpression	opline -> opcode != ZEND_FE_RESET_R		1359456	0		!=			
ANR	1359669	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1359670	Identifier	opline		1359456	0					
ANR	1359671	Identifier	opcode		1359456	1					
ANR	1359672	Identifier	ZEND_FE_RESET_R		1359456	1					
ANR	1359673	EqualityExpression	opline -> opcode != ZEND_FE_RESET_RW		1359456	1		!=			
ANR	1359674	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1359675	Identifier	opline		1359456	0					
ANR	1359676	Identifier	opcode		1359456	1					
ANR	1359677	Identifier	ZEND_FE_RESET_RW		1359456	1					
ANR	1359678	EqualityExpression	opline -> opcode != ZEND_FREE		1359456	1		!=			
ANR	1359679	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1359680	Identifier	opline		1359456	0					
ANR	1359681	Identifier	opcode		1359456	1					
ANR	1359682	Identifier	ZEND_FREE		1359456	1					
ANR	1359683	CompoundStatement		39:3:1279:1309	1359456	1					
ANR	1359684	IdentifierDeclStatement	znode_op op1 = opline -> op1 ;	646:3:19521:19547	1359456	0	True				
ANR	1359685	IdentifierDecl	op1 = opline -> op1		1359456	0					
ANR	1359686	IdentifierDeclType	znode_op		1359456	0					
ANR	1359687	Identifier	op1		1359456	1					
ANR	1359688	AssignmentExpression	op1 = opline -> op1		1359456	2		=			
ANR	1359689	Identifier	op1		1359456	0					
ANR	1359690	PtrMemberAccess	opline -> op1		1359456	1					
ANR	1359691	Identifier	opline		1359456	0					
ANR	1359692	Identifier	op1		1359456	1					
ANR	1359693	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( op1 ) ;	647:3:19552:19582	1359456	1	True				
ANR	1359694	IdentifierDecl	* src = VAR_SOURCE ( op1 )		1359456	0					
ANR	1359695	IdentifierDeclType	zend_op *		1359456	0					
ANR	1359696	Identifier	src		1359456	1					
ANR	1359697	AssignmentExpression	* src = VAR_SOURCE ( op1 )		1359456	2		=			
ANR	1359698	Identifier	src		1359456	0					
ANR	1359699	CallExpression	VAR_SOURCE ( op1 )		1359456	1					
ANR	1359700	Callee	VAR_SOURCE		1359456	0					
ANR	1359701	Identifier	VAR_SOURCE		1359456	0					
ANR	1359702	ArgumentList	op1		1359456	1					
ANR	1359703	Argument	op1		1359456	0					
ANR	1359704	Identifier	op1		1359456	0					
ANR	1359705	IdentifierDeclStatement	zval c = ZEND_OP1_LITERAL ( src ) ;	648:3:19587:19617	1359456	2	True				
ANR	1359706	IdentifierDecl	c = ZEND_OP1_LITERAL ( src )		1359456	0					
ANR	1359707	IdentifierDeclType	zval		1359456	0					
ANR	1359708	Identifier	c		1359456	1					
ANR	1359709	AssignmentExpression	c = ZEND_OP1_LITERAL ( src )		1359456	2		=			
ANR	1359710	Identifier	c		1359456	0					
ANR	1359711	CallExpression	ZEND_OP1_LITERAL ( src )		1359456	1					
ANR	1359712	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1359713	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1359714	ArgumentList	src		1359456	1					
ANR	1359715	Argument	src		1359456	0					
ANR	1359716	Identifier	src		1359456	0					
ANR	1359717	ExpressionStatement	zval_copy_ctor ( & c )	649:3:19622:19640	1359456	3	True				
ANR	1359718	CallExpression	zval_copy_ctor ( & c )		1359456	0					
ANR	1359719	Callee	zval_copy_ctor		1359456	0					
ANR	1359720	Identifier	zval_copy_ctor		1359456	0					
ANR	1359721	ArgumentList	& c		1359456	1					
ANR	1359722	Argument	& c		1359456	0					
ANR	1359723	UnaryOperationExpression	& c		1359456	0					
ANR	1359724	UnaryOperator	&		1359456	0					
ANR	1359725	Identifier	c		1359456	1					
ANR	1359726	IfStatement	"if ( zend_optimizer_update_op1_const ( op_array , opline , & c ) )"		1359456	4					
ANR	1359727	Condition	"zend_optimizer_update_op1_const ( op_array , opline , & c )"	650:7:19649:19701	1359456	0	True				
ANR	1359728	CallExpression	"zend_optimizer_update_op1_const ( op_array , opline , & c )"		1359456	0					
ANR	1359729	Callee	zend_optimizer_update_op1_const		1359456	0					
ANR	1359730	Identifier	zend_optimizer_update_op1_const		1359456	0					
ANR	1359731	ArgumentList	op_array		1359456	1					
ANR	1359732	Argument	op_array		1359456	0					
ANR	1359733	Identifier	op_array		1359456	0					
ANR	1359734	Argument	opline		1359456	1					
ANR	1359735	Identifier	opline		1359456	0					
ANR	1359736	Argument	& c		1359456	2					
ANR	1359737	UnaryOperationExpression	& c		1359456	0					
ANR	1359738	UnaryOperator	&		1359456	0					
ANR	1359739	Identifier	c		1359456	1					
ANR	1359740	CompoundStatement		41:62:1396:1396	1359456	1					
ANR	1359741	ExpressionStatement	VAR_SOURCE ( op1 ) = NULL	651:4:19710:19732	1359456	0	True				
ANR	1359742	AssignmentExpression	VAR_SOURCE ( op1 ) = NULL		1359456	0		=			
ANR	1359743	CallExpression	VAR_SOURCE ( op1 )		1359456	0					
ANR	1359744	Callee	VAR_SOURCE		1359456	0					
ANR	1359745	Identifier	VAR_SOURCE		1359456	0					
ANR	1359746	ArgumentList	op1		1359456	1					
ANR	1359747	Argument	op1		1359456	0					
ANR	1359748	Identifier	op1		1359456	0					
ANR	1359749	Identifier	NULL		1359456	1					
ANR	1359750	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( src ) )	652:4:19738:19774	1359456	1	True				
ANR	1359751	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( src ) )		1359456	0					
ANR	1359752	Callee	literal_dtor		1359456	0					
ANR	1359753	Identifier	literal_dtor		1359456	0					
ANR	1359754	ArgumentList	& ZEND_OP1_LITERAL ( src )		1359456	1					
ANR	1359755	Argument	& ZEND_OP1_LITERAL ( src )		1359456	0					
ANR	1359756	UnaryOperationExpression	& ZEND_OP1_LITERAL ( src )		1359456	0					
ANR	1359757	UnaryOperator	&		1359456	0					
ANR	1359758	CallExpression	ZEND_OP1_LITERAL ( src )		1359456	1					
ANR	1359759	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1359760	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1359761	ArgumentList	src		1359456	1					
ANR	1359762	Argument	src		1359456	0					
ANR	1359763	Identifier	src		1359456	0					
ANR	1359764	ExpressionStatement	MAKE_NOP ( src )	653:4:19780:19793	1359456	2	True				
ANR	1359765	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1359766	Callee	MAKE_NOP		1359456	0					
ANR	1359767	Identifier	MAKE_NOP		1359456	0					
ANR	1359768	ArgumentList	src		1359456	1					
ANR	1359769	Argument	src		1359456	0					
ANR	1359770	Identifier	src		1359456	0					
ANR	1359771	IfStatement	if ( ( ZEND_OP2_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op2 ) && VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op2 ) ) == IS_CONST )		1359456	1					
ANR	1359772	Condition	( ZEND_OP2_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op2 ) && VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op2 ) ) == IS_CONST	658:6:19855:20042	1359456	0	True				
ANR	1359773	AndExpression	( ZEND_OP2_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op2 ) && VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op2 ) ) == IS_CONST		1359456	0		&&			
ANR	1359774	BitAndExpression	ZEND_OP2_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR )		1359456	0		&			
ANR	1359775	CallExpression	ZEND_OP2_TYPE ( opline )		1359456	0					
ANR	1359776	Callee	ZEND_OP2_TYPE		1359456	0					
ANR	1359777	Identifier	ZEND_OP2_TYPE		1359456	0					
ANR	1359778	ArgumentList	opline		1359456	1					
ANR	1359779	Argument	opline		1359456	0					
ANR	1359780	Identifier	opline		1359456	0					
ANR	1359781	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1359456	1		|			
ANR	1359782	Identifier	IS_TMP_VAR		1359456	0					
ANR	1359783	Identifier	IS_VAR		1359456	1					
ANR	1359784	AndExpression	VAR_SOURCE ( opline -> op2 ) && VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op2 ) ) == IS_CONST		1359456	1		&&			
ANR	1359785	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1359786	Callee	VAR_SOURCE		1359456	0					
ANR	1359787	Identifier	VAR_SOURCE		1359456	0					
ANR	1359788	ArgumentList	opline -> op2		1359456	1					
ANR	1359789	Argument	opline -> op2		1359456	0					
ANR	1359790	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1359791	Identifier	opline		1359456	0					
ANR	1359792	Identifier	op2		1359456	1					
ANR	1359793	AndExpression	VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op2 ) ) == IS_CONST		1359456	1		&&			
ANR	1359794	EqualityExpression	VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_QM_ASSIGN		1359456	0		==			
ANR	1359795	PtrMemberAccess	VAR_SOURCE ( opline -> op2 ) -> opcode		1359456	0					
ANR	1359796	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1359797	Callee	VAR_SOURCE		1359456	0					
ANR	1359798	Identifier	VAR_SOURCE		1359456	0					
ANR	1359799	ArgumentList	opline -> op2		1359456	1					
ANR	1359800	Argument	opline -> op2		1359456	0					
ANR	1359801	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1359802	Identifier	opline		1359456	0					
ANR	1359803	Identifier	op2		1359456	1					
ANR	1359804	Identifier	opcode		1359456	1					
ANR	1359805	Identifier	ZEND_QM_ASSIGN		1359456	1					
ANR	1359806	EqualityExpression	ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op2 ) ) == IS_CONST		1359456	1		==			
ANR	1359807	CallExpression	ZEND_OP1_TYPE ( VAR_SOURCE ( opline -> op2 ) )		1359456	0					
ANR	1359808	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1359809	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1359810	ArgumentList	VAR_SOURCE ( opline -> op2 )		1359456	1					
ANR	1359811	Argument	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1359812	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1359813	Callee	VAR_SOURCE		1359456	0					
ANR	1359814	Identifier	VAR_SOURCE		1359456	0					
ANR	1359815	ArgumentList	opline -> op2		1359456	1					
ANR	1359816	Argument	opline -> op2		1359456	0					
ANR	1359817	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1359818	Identifier	opline		1359456	0					
ANR	1359819	Identifier	op2		1359456	1					
ANR	1359820	Identifier	IS_CONST		1359456	1					
ANR	1359821	CompoundStatement		55:3:1808:1838	1359456	1					
ANR	1359822	IdentifierDeclStatement	znode_op op2 = opline -> op2 ;	662:3:20050:20076	1359456	0	True				
ANR	1359823	IdentifierDecl	op2 = opline -> op2		1359456	0					
ANR	1359824	IdentifierDeclType	znode_op		1359456	0					
ANR	1359825	Identifier	op2		1359456	1					
ANR	1359826	AssignmentExpression	op2 = opline -> op2		1359456	2		=			
ANR	1359827	Identifier	op2		1359456	0					
ANR	1359828	PtrMemberAccess	opline -> op2		1359456	1					
ANR	1359829	Identifier	opline		1359456	0					
ANR	1359830	Identifier	op2		1359456	1					
ANR	1359831	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( op2 ) ;	663:3:20081:20111	1359456	1	True				
ANR	1359832	IdentifierDecl	* src = VAR_SOURCE ( op2 )		1359456	0					
ANR	1359833	IdentifierDeclType	zend_op *		1359456	0					
ANR	1359834	Identifier	src		1359456	1					
ANR	1359835	AssignmentExpression	* src = VAR_SOURCE ( op2 )		1359456	2		=			
ANR	1359836	Identifier	src		1359456	0					
ANR	1359837	CallExpression	VAR_SOURCE ( op2 )		1359456	1					
ANR	1359838	Callee	VAR_SOURCE		1359456	0					
ANR	1359839	Identifier	VAR_SOURCE		1359456	0					
ANR	1359840	ArgumentList	op2		1359456	1					
ANR	1359841	Argument	op2		1359456	0					
ANR	1359842	Identifier	op2		1359456	0					
ANR	1359843	IdentifierDeclStatement	zval c = ZEND_OP1_LITERAL ( src ) ;	664:3:20116:20146	1359456	2	True				
ANR	1359844	IdentifierDecl	c = ZEND_OP1_LITERAL ( src )		1359456	0					
ANR	1359845	IdentifierDeclType	zval		1359456	0					
ANR	1359846	Identifier	c		1359456	1					
ANR	1359847	AssignmentExpression	c = ZEND_OP1_LITERAL ( src )		1359456	2		=			
ANR	1359848	Identifier	c		1359456	0					
ANR	1359849	CallExpression	ZEND_OP1_LITERAL ( src )		1359456	1					
ANR	1359850	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1359851	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1359852	ArgumentList	src		1359456	1					
ANR	1359853	Argument	src		1359456	0					
ANR	1359854	Identifier	src		1359456	0					
ANR	1359855	ExpressionStatement	zval_copy_ctor ( & c )	665:3:20151:20169	1359456	3	True				
ANR	1359856	CallExpression	zval_copy_ctor ( & c )		1359456	0					
ANR	1359857	Callee	zval_copy_ctor		1359456	0					
ANR	1359858	Identifier	zval_copy_ctor		1359456	0					
ANR	1359859	ArgumentList	& c		1359456	1					
ANR	1359860	Argument	& c		1359456	0					
ANR	1359861	UnaryOperationExpression	& c		1359456	0					
ANR	1359862	UnaryOperator	&		1359456	0					
ANR	1359863	Identifier	c		1359456	1					
ANR	1359864	IfStatement	"if ( zend_optimizer_update_op2_const ( op_array , opline , & c ) )"		1359456	4					
ANR	1359865	Condition	"zend_optimizer_update_op2_const ( op_array , opline , & c )"	666:7:20178:20230	1359456	0	True				
ANR	1359866	CallExpression	"zend_optimizer_update_op2_const ( op_array , opline , & c )"		1359456	0					
ANR	1359867	Callee	zend_optimizer_update_op2_const		1359456	0					
ANR	1359868	Identifier	zend_optimizer_update_op2_const		1359456	0					
ANR	1359869	ArgumentList	op_array		1359456	1					
ANR	1359870	Argument	op_array		1359456	0					
ANR	1359871	Identifier	op_array		1359456	0					
ANR	1359872	Argument	opline		1359456	1					
ANR	1359873	Identifier	opline		1359456	0					
ANR	1359874	Argument	& c		1359456	2					
ANR	1359875	UnaryOperationExpression	& c		1359456	0					
ANR	1359876	UnaryOperator	&		1359456	0					
ANR	1359877	Identifier	c		1359456	1					
ANR	1359878	CompoundStatement		57:62:1925:1925	1359456	1					
ANR	1359879	ExpressionStatement	VAR_SOURCE ( op2 ) = NULL	667:4:20239:20261	1359456	0	True				
ANR	1359880	AssignmentExpression	VAR_SOURCE ( op2 ) = NULL		1359456	0		=			
ANR	1359881	CallExpression	VAR_SOURCE ( op2 )		1359456	0					
ANR	1359882	Callee	VAR_SOURCE		1359456	0					
ANR	1359883	Identifier	VAR_SOURCE		1359456	0					
ANR	1359884	ArgumentList	op2		1359456	1					
ANR	1359885	Argument	op2		1359456	0					
ANR	1359886	Identifier	op2		1359456	0					
ANR	1359887	Identifier	NULL		1359456	1					
ANR	1359888	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( src ) )	668:4:20267:20303	1359456	1	True				
ANR	1359889	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( src ) )		1359456	0					
ANR	1359890	Callee	literal_dtor		1359456	0					
ANR	1359891	Identifier	literal_dtor		1359456	0					
ANR	1359892	ArgumentList	& ZEND_OP1_LITERAL ( src )		1359456	1					
ANR	1359893	Argument	& ZEND_OP1_LITERAL ( src )		1359456	0					
ANR	1359894	UnaryOperationExpression	& ZEND_OP1_LITERAL ( src )		1359456	0					
ANR	1359895	UnaryOperator	&		1359456	0					
ANR	1359896	CallExpression	ZEND_OP1_LITERAL ( src )		1359456	1					
ANR	1359897	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1359898	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1359899	ArgumentList	src		1359456	1					
ANR	1359900	Argument	src		1359456	0					
ANR	1359901	Identifier	src		1359456	0					
ANR	1359902	ExpressionStatement	MAKE_NOP ( src )	669:4:20309:20322	1359456	2	True				
ANR	1359903	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1359904	Callee	MAKE_NOP		1359456	0					
ANR	1359905	Identifier	MAKE_NOP		1359456	0					
ANR	1359906	ArgumentList	src		1359456	1					
ANR	1359907	Argument	src		1359456	0					
ANR	1359908	Identifier	src		1359456	0					
ANR	1359909	IfStatement	if ( opline -> opcode == ZEND_ECHO && ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING )		1359456	2					
ANR	1359910	Condition	opline -> opcode == ZEND_ECHO && ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING	674:6:20393:20609	1359456	0	True				
ANR	1359911	AndExpression	opline -> opcode == ZEND_ECHO && ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING		1359456	0		&&			
ANR	1359912	EqualityExpression	opline -> opcode == ZEND_ECHO		1359456	0		==			
ANR	1359913	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1359914	Identifier	opline		1359456	0					
ANR	1359915	Identifier	opcode		1359456	1					
ANR	1359916	Identifier	ZEND_ECHO		1359456	1					
ANR	1359917	AndExpression	ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING		1359456	1		&&			
ANR	1359918	BitAndExpression	ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR )		1359456	0		&			
ANR	1359919	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1359920	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1359921	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1359922	ArgumentList	opline		1359456	1					
ANR	1359923	Argument	opline		1359456	0					
ANR	1359924	Identifier	opline		1359456	0					
ANR	1359925	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1359456	1		|			
ANR	1359926	Identifier	IS_TMP_VAR		1359456	0					
ANR	1359927	Identifier	IS_VAR		1359456	1					
ANR	1359928	AndExpression	VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING		1359456	1		&&			
ANR	1359929	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1359930	Callee	VAR_SOURCE		1359456	0					
ANR	1359931	Identifier	VAR_SOURCE		1359456	0					
ANR	1359932	ArgumentList	opline -> op1		1359456	1					
ANR	1359933	Argument	opline -> op1		1359456	0					
ANR	1359934	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1359935	Identifier	opline		1359456	0					
ANR	1359936	Identifier	op1		1359456	1					
ANR	1359937	AndExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING		1359456	1		&&			
ANR	1359938	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST		1359456	0		==			
ANR	1359939	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1359940	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1359941	Callee	VAR_SOURCE		1359456	0					
ANR	1359942	Identifier	VAR_SOURCE		1359456	0					
ANR	1359943	ArgumentList	opline -> op1		1359456	1					
ANR	1359944	Argument	opline -> op1		1359456	0					
ANR	1359945	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1359946	Identifier	opline		1359456	0					
ANR	1359947	Identifier	op1		1359456	1					
ANR	1359948	Identifier	opcode		1359456	1					
ANR	1359949	Identifier	ZEND_CAST		1359456	1					
ANR	1359950	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING		1359456	1		==			
ANR	1359951	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> extended_value		1359456	0					
ANR	1359952	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1359953	Callee	VAR_SOURCE		1359456	0					
ANR	1359954	Identifier	VAR_SOURCE		1359456	0					
ANR	1359955	ArgumentList	opline -> op1		1359456	1					
ANR	1359956	Argument	opline -> op1		1359456	0					
ANR	1359957	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1359958	Identifier	opline		1359456	0					
ANR	1359959	Identifier	op1		1359456	1					
ANR	1359960	Identifier	extended_value		1359456	1					
ANR	1359961	Identifier	IS_STRING		1359456	1					
ANR	1359962	CompoundStatement		70:3:2309:2347	1359456	1					
ANR	1359963	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op1 ) ;	679:3:20617:20655	1359456	0	True				
ANR	1359964	IdentifierDecl	* src = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1359965	IdentifierDeclType	zend_op *		1359456	0					
ANR	1359966	Identifier	src		1359456	1					
ANR	1359967	AssignmentExpression	* src = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1359968	Identifier	src		1359456	0					
ANR	1359969	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1359970	Callee	VAR_SOURCE		1359456	0					
ANR	1359971	Identifier	VAR_SOURCE		1359456	0					
ANR	1359972	ArgumentList	opline -> op1		1359456	1					
ANR	1359973	Argument	opline -> op1		1359456	0					
ANR	1359974	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1359975	Identifier	opline		1359456	0					
ANR	1359976	Identifier	op1		1359456	1					
ANR	1359977	ExpressionStatement	"COPY_NODE ( opline -> op1 , src -> op1 )"	680:3:20660:20692	1359456	1	True				
ANR	1359978	CallExpression	"COPY_NODE ( opline -> op1 , src -> op1 )"		1359456	0					
ANR	1359979	Callee	COPY_NODE		1359456	0					
ANR	1359980	Identifier	COPY_NODE		1359456	0					
ANR	1359981	ArgumentList	opline -> op1		1359456	1					
ANR	1359982	Argument	opline -> op1		1359456	0					
ANR	1359983	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1359984	Identifier	opline		1359456	0					
ANR	1359985	Identifier	op1		1359456	1					
ANR	1359986	Argument	src -> op1		1359456	1					
ANR	1359987	PtrMemberAccess	src -> op1		1359456	0					
ANR	1359988	Identifier	src		1359456	0					
ANR	1359989	Identifier	op1		1359456	1					
ANR	1359990	ExpressionStatement	MAKE_NOP ( src )	681:3:20697:20710	1359456	2	True				
ANR	1359991	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1359992	Callee	MAKE_NOP		1359456	0					
ANR	1359993	Identifier	MAKE_NOP		1359456	0					
ANR	1359994	ArgumentList	src		1359456	1					
ANR	1359995	Argument	src		1359456	0					
ANR	1359996	Identifier	src		1359456	0					
ANR	1359997	IfStatement	if ( opline -> opcode == ZEND_FREE && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) )		1359456	3					
ANR	1359998	Condition	opline -> opcode == ZEND_FREE && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 )	685:6:20764:20862	1359456	0	True				
ANR	1359999	AndExpression	opline -> opcode == ZEND_FREE && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 )		1359456	0		&&			
ANR	1360000	EqualityExpression	opline -> opcode == ZEND_FREE		1359456	0		==			
ANR	1360001	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360002	Identifier	opline		1359456	0					
ANR	1360003	Identifier	opcode		1359456	1					
ANR	1360004	Identifier	ZEND_FREE		1359456	1					
ANR	1360005	AndExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 )		1359456	1		&&			
ANR	1360006	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		1359456	0		==			
ANR	1360007	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1360008	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360009	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360010	ArgumentList	opline		1359456	1					
ANR	1360011	Argument	opline		1359456	0					
ANR	1360012	Identifier	opline		1359456	0					
ANR	1360013	Identifier	IS_TMP_VAR		1359456	1					
ANR	1360014	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1360015	Callee	VAR_SOURCE		1359456	0					
ANR	1360016	Identifier	VAR_SOURCE		1359456	0					
ANR	1360017	ArgumentList	opline -> op1		1359456	1					
ANR	1360018	Argument	opline -> op1		1359456	0					
ANR	1360019	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360020	Identifier	opline		1359456	0					
ANR	1360021	Identifier	op1		1359456	1					
ANR	1360022	CompoundStatement		79:3:2562:2600	1359456	1					
ANR	1360023	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op1 ) ;	688:3:20870:20908	1359456	0	True				
ANR	1360024	IdentifierDecl	* src = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1360025	IdentifierDeclType	zend_op *		1359456	0					
ANR	1360026	Identifier	src		1359456	1					
ANR	1360027	AssignmentExpression	* src = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1360028	Identifier	src		1359456	0					
ANR	1360029	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1360030	Callee	VAR_SOURCE		1359456	0					
ANR	1360031	Identifier	VAR_SOURCE		1359456	0					
ANR	1360032	ArgumentList	opline -> op1		1359456	1					
ANR	1360033	Argument	opline -> op1		1359456	0					
ANR	1360034	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360035	Identifier	opline		1359456	0					
ANR	1360036	Identifier	op1		1359456	1					
ANR	1360037	IfStatement	if ( src -> opcode == ZEND_BOOL )		1359456	1					
ANR	1360038	Condition	src -> opcode == ZEND_BOOL	689:7:20917:20940	1359456	0	True				
ANR	1360039	EqualityExpression	src -> opcode == ZEND_BOOL		1359456	0		==			
ANR	1360040	PtrMemberAccess	src -> opcode		1359456	0					
ANR	1360041	Identifier	src		1359456	0					
ANR	1360042	Identifier	opcode		1359456	1					
ANR	1360043	Identifier	ZEND_BOOL		1359456	1					
ANR	1360044	CompoundStatement		80:33:2635:2635	1359456	1					
ANR	1360045	IfStatement	if ( ZEND_OP1_TYPE ( src ) == IS_CONST )		1359456	0					
ANR	1360046	Condition	ZEND_OP1_TYPE ( src ) == IS_CONST	690:8:20953:20982	1359456	0	True				
ANR	1360047	EqualityExpression	ZEND_OP1_TYPE ( src ) == IS_CONST		1359456	0		==			
ANR	1360048	CallExpression	ZEND_OP1_TYPE ( src )		1359456	0					
ANR	1360049	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360050	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360051	ArgumentList	src		1359456	1					
ANR	1360052	Argument	src		1359456	0					
ANR	1360053	Identifier	src		1359456	0					
ANR	1360054	Identifier	IS_CONST		1359456	1					
ANR	1360055	CompoundStatement		81:40:2677:2677	1359456	1					
ANR	1360056	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( src ) )	691:5:20992:21028	1359456	0	True				
ANR	1360057	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( src ) )		1359456	0					
ANR	1360058	Callee	literal_dtor		1359456	0					
ANR	1360059	Identifier	literal_dtor		1359456	0					
ANR	1360060	ArgumentList	& ZEND_OP1_LITERAL ( src )		1359456	1					
ANR	1360061	Argument	& ZEND_OP1_LITERAL ( src )		1359456	0					
ANR	1360062	UnaryOperationExpression	& ZEND_OP1_LITERAL ( src )		1359456	0					
ANR	1360063	UnaryOperator	&		1359456	0					
ANR	1360064	CallExpression	ZEND_OP1_LITERAL ( src )		1359456	1					
ANR	1360065	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1360066	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1360067	ArgumentList	src		1359456	1					
ANR	1360068	Argument	src		1359456	0					
ANR	1360069	Identifier	src		1359456	0					
ANR	1360070	ExpressionStatement	MAKE_NOP ( src )	693:4:21040:21053	1359456	1	True				
ANR	1360071	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1360072	Callee	MAKE_NOP		1359456	0					
ANR	1360073	Identifier	MAKE_NOP		1359456	0					
ANR	1360074	ArgumentList	src		1359456	1					
ANR	1360075	Argument	src		1359456	0					
ANR	1360076	Identifier	src		1359456	0					
ANR	1360077	ExpressionStatement	MAKE_NOP ( opline )	694:4:21059:21075	1359456	2	True				
ANR	1360078	CallExpression	MAKE_NOP ( opline )		1359456	0					
ANR	1360079	Callee	MAKE_NOP		1359456	0					
ANR	1360080	Identifier	MAKE_NOP		1359456	0					
ANR	1360081	ArgumentList	opline		1359456	1					
ANR	1360082	Argument	opline		1359456	0					
ANR	1360083	Identifier	opline		1359456	0					
ANR	1360084	IfStatement	if ( ( ZEND_OP1_TYPE ( opline ) & IS_VAR ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_DO_CF_FCALL && VAR_SOURCE ( opline -> op1 ) -> extended_value == 1 )		1359456	4					
ANR	1360085	Condition	( ZEND_OP1_TYPE ( opline ) & IS_VAR ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_DO_CF_FCALL && VAR_SOURCE ( opline -> op1 ) -> extended_value == 1	706:5:21257:21428	1359456	0	True				
ANR	1360086	AndExpression	( ZEND_OP1_TYPE ( opline ) & IS_VAR ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_DO_CF_FCALL && VAR_SOURCE ( opline -> op1 ) -> extended_value == 1		1359456	0		&&			
ANR	1360087	BitAndExpression	ZEND_OP1_TYPE ( opline ) & IS_VAR		1359456	0		&			
ANR	1360088	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1360089	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360090	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360091	ArgumentList	opline		1359456	1					
ANR	1360092	Argument	opline		1359456	0					
ANR	1360093	Identifier	opline		1359456	0					
ANR	1360094	Identifier	IS_VAR		1359456	1					
ANR	1360095	AndExpression	VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_DO_CF_FCALL && VAR_SOURCE ( opline -> op1 ) -> extended_value == 1		1359456	1		&&			
ANR	1360096	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1360097	Callee	VAR_SOURCE		1359456	0					
ANR	1360098	Identifier	VAR_SOURCE		1359456	0					
ANR	1360099	ArgumentList	opline -> op1		1359456	1					
ANR	1360100	Argument	opline -> op1		1359456	0					
ANR	1360101	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360102	Identifier	opline		1359456	0					
ANR	1360103	Identifier	op1		1359456	1					
ANR	1360104	AndExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_DO_CF_FCALL && VAR_SOURCE ( opline -> op1 ) -> extended_value == 1		1359456	1		&&			
ANR	1360105	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_DO_CF_FCALL		1359456	0		==			
ANR	1360106	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1360107	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1360108	Callee	VAR_SOURCE		1359456	0					
ANR	1360109	Identifier	VAR_SOURCE		1359456	0					
ANR	1360110	ArgumentList	opline -> op1		1359456	1					
ANR	1360111	Argument	opline -> op1		1359456	0					
ANR	1360112	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360113	Identifier	opline		1359456	0					
ANR	1360114	Identifier	op1		1359456	1					
ANR	1360115	Identifier	opcode		1359456	1					
ANR	1360116	Identifier	ZEND_DO_CF_FCALL		1359456	1					
ANR	1360117	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> extended_value == 1		1359456	1		==			
ANR	1360118	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> extended_value		1359456	0					
ANR	1360119	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1360120	Callee	VAR_SOURCE		1359456	0					
ANR	1360121	Identifier	VAR_SOURCE		1359456	0					
ANR	1360122	ArgumentList	opline -> op1		1359456	1					
ANR	1360123	Argument	opline -> op1		1359456	0					
ANR	1360124	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360125	Identifier	opline		1359456	0					
ANR	1360126	Identifier	op1		1359456	1					
ANR	1360127	Identifier	extended_value		1359456	1					
ANR	1360128	PrimaryExpression	1		1359456	1					
ANR	1360129	CompoundStatement		101:3:3173:3194	1359456	1					
ANR	1360130	IdentifierDeclStatement	zend_op * fcall = VAR_SOURCE ( opline -> op1 ) ;	709:3:21436:21476	1359456	0	True				
ANR	1360131	IdentifierDecl	* fcall = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1360132	IdentifierDeclType	zend_op *		1359456	0					
ANR	1360133	Identifier	fcall		1359456	1					
ANR	1360134	AssignmentExpression	* fcall = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1360135	Identifier	fcall		1359456	0					
ANR	1360136	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1360137	Callee	VAR_SOURCE		1359456	0					
ANR	1360138	Identifier	VAR_SOURCE		1359456	0					
ANR	1360139	ArgumentList	opline -> op1		1359456	1					
ANR	1360140	Argument	opline -> op1		1359456	0					
ANR	1360141	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360142	Identifier	opline		1359456	0					
ANR	1360143	Identifier	op1		1359456	1					
ANR	1360144	IdentifierDeclStatement	zend_op * sv = fcall - 1 ;	710:3:21481:21502	1359456	1	True				
ANR	1360145	IdentifierDecl	* sv = fcall - 1		1359456	0					
ANR	1360146	IdentifierDeclType	zend_op *		1359456	0					
ANR	1360147	Identifier	sv		1359456	1					
ANR	1360148	AssignmentExpression	* sv = fcall - 1		1359456	2		=			
ANR	1360149	Identifier	sv		1359456	0					
ANR	1360150	AdditiveExpression	fcall - 1		1359456	1		-			
ANR	1360151	Identifier	fcall		1359456	0					
ANR	1360152	PrimaryExpression	1		1359456	1					
ANR	1360153	IfStatement	if ( sv >= block -> start_opline && sv -> opcode == ZEND_SEND_VAL && ZEND_OP1_TYPE ( sv ) == IS_CONST && Z_TYPE ( OPLINE_OP1_LITERAL ( sv ) ) == IS_STRING && Z_LVAL ( OPLINE_OP2_LITERAL ( sv ) ) == 1 )		1359456	2					
ANR	1360154	Condition	sv >= block -> start_opline && sv -> opcode == ZEND_SEND_VAL && ZEND_OP1_TYPE ( sv ) == IS_CONST && Z_TYPE ( OPLINE_OP1_LITERAL ( sv ) ) == IS_STRING && Z_LVAL ( OPLINE_OP2_LITERAL ( sv ) ) == 1	711:6:21510:21696	1359456	0	True				
ANR	1360155	AndExpression	sv >= block -> start_opline && sv -> opcode == ZEND_SEND_VAL && ZEND_OP1_TYPE ( sv ) == IS_CONST && Z_TYPE ( OPLINE_OP1_LITERAL ( sv ) ) == IS_STRING && Z_LVAL ( OPLINE_OP2_LITERAL ( sv ) ) == 1		1359456	0		&&			
ANR	1360156	RelationalExpression	sv >= block -> start_opline		1359456	0		>=			
ANR	1360157	Identifier	sv		1359456	0					
ANR	1360158	PtrMemberAccess	block -> start_opline		1359456	1					
ANR	1360159	Identifier	block		1359456	0					
ANR	1360160	Identifier	start_opline		1359456	1					
ANR	1360161	AndExpression	sv -> opcode == ZEND_SEND_VAL && ZEND_OP1_TYPE ( sv ) == IS_CONST && Z_TYPE ( OPLINE_OP1_LITERAL ( sv ) ) == IS_STRING && Z_LVAL ( OPLINE_OP2_LITERAL ( sv ) ) == 1		1359456	1		&&			
ANR	1360162	EqualityExpression	sv -> opcode == ZEND_SEND_VAL		1359456	0		==			
ANR	1360163	PtrMemberAccess	sv -> opcode		1359456	0					
ANR	1360164	Identifier	sv		1359456	0					
ANR	1360165	Identifier	opcode		1359456	1					
ANR	1360166	Identifier	ZEND_SEND_VAL		1359456	1					
ANR	1360167	AndExpression	ZEND_OP1_TYPE ( sv ) == IS_CONST && Z_TYPE ( OPLINE_OP1_LITERAL ( sv ) ) == IS_STRING && Z_LVAL ( OPLINE_OP2_LITERAL ( sv ) ) == 1		1359456	1		&&			
ANR	1360168	EqualityExpression	ZEND_OP1_TYPE ( sv ) == IS_CONST		1359456	0		==			
ANR	1360169	CallExpression	ZEND_OP1_TYPE ( sv )		1359456	0					
ANR	1360170	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360171	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360172	ArgumentList	sv		1359456	1					
ANR	1360173	Argument	sv		1359456	0					
ANR	1360174	Identifier	sv		1359456	0					
ANR	1360175	Identifier	IS_CONST		1359456	1					
ANR	1360176	AndExpression	Z_TYPE ( OPLINE_OP1_LITERAL ( sv ) ) == IS_STRING && Z_LVAL ( OPLINE_OP2_LITERAL ( sv ) ) == 1		1359456	1		&&			
ANR	1360177	EqualityExpression	Z_TYPE ( OPLINE_OP1_LITERAL ( sv ) ) == IS_STRING		1359456	0		==			
ANR	1360178	CallExpression	Z_TYPE ( OPLINE_OP1_LITERAL ( sv ) )		1359456	0					
ANR	1360179	Callee	Z_TYPE		1359456	0					
ANR	1360180	Identifier	Z_TYPE		1359456	0					
ANR	1360181	ArgumentList	OPLINE_OP1_LITERAL ( sv )		1359456	1					
ANR	1360182	Argument	OPLINE_OP1_LITERAL ( sv )		1359456	0					
ANR	1360183	CallExpression	OPLINE_OP1_LITERAL ( sv )		1359456	0					
ANR	1360184	Callee	OPLINE_OP1_LITERAL		1359456	0					
ANR	1360185	Identifier	OPLINE_OP1_LITERAL		1359456	0					
ANR	1360186	ArgumentList	sv		1359456	1					
ANR	1360187	Argument	sv		1359456	0					
ANR	1360188	Identifier	sv		1359456	0					
ANR	1360189	Identifier	IS_STRING		1359456	1					
ANR	1360190	EqualityExpression	Z_LVAL ( OPLINE_OP2_LITERAL ( sv ) ) == 1		1359456	1		==			
ANR	1360191	CallExpression	Z_LVAL ( OPLINE_OP2_LITERAL ( sv ) )		1359456	0					
ANR	1360192	Callee	Z_LVAL		1359456	0					
ANR	1360193	Identifier	Z_LVAL		1359456	0					
ANR	1360194	ArgumentList	OPLINE_OP2_LITERAL ( sv )		1359456	1					
ANR	1360195	Argument	OPLINE_OP2_LITERAL ( sv )		1359456	0					
ANR	1360196	CallExpression	OPLINE_OP2_LITERAL ( sv )		1359456	0					
ANR	1360197	Callee	OPLINE_OP2_LITERAL		1359456	0					
ANR	1360198	Identifier	OPLINE_OP2_LITERAL		1359456	0					
ANR	1360199	ArgumentList	sv		1359456	1					
ANR	1360200	Argument	sv		1359456	0					
ANR	1360201	Identifier	sv		1359456	0					
ANR	1360202	PrimaryExpression	1		1359456	1					
ANR	1360203	CompoundStatement		108:4:3533:3607	1359456	1					
ANR	1360204	IdentifierDeclStatement	zval * arg = & OPLINE_OP1_LITERAL ( sv ) ;	715:4:21712:21747	1359456	0	True				
ANR	1360205	IdentifierDecl	* arg = & OPLINE_OP1_LITERAL ( sv )		1359456	0					
ANR	1360206	IdentifierDeclType	zval *		1359456	0					
ANR	1360207	Identifier	arg		1359456	1					
ANR	1360208	AssignmentExpression	* arg = & OPLINE_OP1_LITERAL ( sv )		1359456	2		=			
ANR	1360209	Identifier	arg		1359456	0					
ANR	1360210	UnaryOperationExpression	& OPLINE_OP1_LITERAL ( sv )		1359456	1					
ANR	1360211	UnaryOperator	&		1359456	0					
ANR	1360212	CallExpression	OPLINE_OP1_LITERAL ( sv )		1359456	1					
ANR	1360213	Callee	OPLINE_OP1_LITERAL		1359456	0					
ANR	1360214	Identifier	OPLINE_OP1_LITERAL		1359456	0					
ANR	1360215	ArgumentList	sv		1359456	1					
ANR	1360216	Argument	sv		1359456	0					
ANR	1360217	Identifier	sv		1359456	0					
ANR	1360218	IdentifierDeclStatement	char * fname = FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . function_name ;	716:4:21753:21835	1359456	1	True				
ANR	1360219	IdentifierDecl	* fname = FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . function_name		1359456	0					
ANR	1360220	IdentifierDeclType	char *		1359456	0					
ANR	1360221	Identifier	fname		1359456	1					
ANR	1360222	AssignmentExpression	* fname = FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . function_name		1359456	2		=			
ANR	1360223	Identifier	fname		1359456	0					
ANR	1360224	MemberAccess	FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . function_name		1359456	1					
ANR	1360225	ArrayIndexing	FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ]		1359456	0					
ANR	1360226	PtrMemberAccess	FUNCTION_CACHE -> funcs		1359456	0					
ANR	1360227	Identifier	FUNCTION_CACHE		1359456	0					
ANR	1360228	Identifier	funcs		1359456	1					
ANR	1360229	CallExpression	Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) )		1359456	1					
ANR	1360230	Callee	Z_LVAL		1359456	0					
ANR	1360231	Identifier	Z_LVAL		1359456	0					
ANR	1360232	ArgumentList	ZEND_OP1_LITERAL ( fcall )		1359456	1					
ANR	1360233	Argument	ZEND_OP1_LITERAL ( fcall )		1359456	0					
ANR	1360234	CallExpression	ZEND_OP1_LITERAL ( fcall )		1359456	0					
ANR	1360235	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1360236	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1360237	ArgumentList	fcall		1359456	1					
ANR	1360238	Argument	fcall		1359456	0					
ANR	1360239	Identifier	fcall		1359456	0					
ANR	1360240	Identifier	function_name		1359456	1					
ANR	1360241	IdentifierDeclStatement	int flen = FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . name_len ;	717:4:21841:21915	1359456	2	True				
ANR	1360242	IdentifierDecl	flen = FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . name_len		1359456	0					
ANR	1360243	IdentifierDeclType	int		1359456	0					
ANR	1360244	Identifier	flen		1359456	1					
ANR	1360245	AssignmentExpression	flen = FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . name_len		1359456	2		=			
ANR	1360246	Identifier	flen		1359456	0					
ANR	1360247	MemberAccess	FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . name_len		1359456	1					
ANR	1360248	ArrayIndexing	FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ]		1359456	0					
ANR	1360249	PtrMemberAccess	FUNCTION_CACHE -> funcs		1359456	0					
ANR	1360250	Identifier	FUNCTION_CACHE		1359456	0					
ANR	1360251	Identifier	funcs		1359456	1					
ANR	1360252	CallExpression	Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) )		1359456	1					
ANR	1360253	Callee	Z_LVAL		1359456	0					
ANR	1360254	Identifier	Z_LVAL		1359456	0					
ANR	1360255	ArgumentList	ZEND_OP1_LITERAL ( fcall )		1359456	1					
ANR	1360256	Argument	ZEND_OP1_LITERAL ( fcall )		1359456	0					
ANR	1360257	CallExpression	ZEND_OP1_LITERAL ( fcall )		1359456	0					
ANR	1360258	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1360259	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1360260	ArgumentList	fcall		1359456	1					
ANR	1360261	Argument	fcall		1359456	0					
ANR	1360262	Identifier	fcall		1359456	0					
ANR	1360263	Identifier	name_len		1359456	1					
ANR	1360264	IfStatement	"if ( flen == sizeof ( ""defined"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""defined"" , sizeof ( ""defined"" ) - 1 ) == 0 )"		1359456	3					
ANR	1360265	Condition	"flen == sizeof ( ""defined"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""defined"" , sizeof ( ""defined"" ) - 1 ) == 0"	718:7:21924:22026	1359456	0	True				
ANR	1360266	AndExpression	"flen == sizeof ( ""defined"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""defined"" , sizeof ( ""defined"" ) - 1 ) == 0"		1359456	0		&&			
ANR	1360267	EqualityExpression	"flen == sizeof ( ""defined"" ) - 1"		1359456	0		==			
ANR	1360268	Identifier	flen		1359456	0					
ANR	1360269	AdditiveExpression	"sizeof ( ""defined"" ) - 1"		1359456	1		-			
ANR	1360270	SizeofExpression	"sizeof ( ""defined"" )"		1359456	0					
ANR	1360271	Sizeof	sizeof		1359456	0					
ANR	1360272	PrimaryExpression	"""defined"""		1359456	1					
ANR	1360273	PrimaryExpression	1		1359456	1					
ANR	1360274	EqualityExpression	"zend_binary_strcasecmp ( fname , flen , ""defined"" , sizeof ( ""defined"" ) - 1 ) == 0"		1359456	1		==			
ANR	1360275	CallExpression	"zend_binary_strcasecmp ( fname , flen , ""defined"" , sizeof ( ""defined"" ) - 1 )"		1359456	0					
ANR	1360276	Callee	zend_binary_strcasecmp		1359456	0					
ANR	1360277	Identifier	zend_binary_strcasecmp		1359456	0					
ANR	1360278	ArgumentList	fname		1359456	1					
ANR	1360279	Argument	fname		1359456	0					
ANR	1360280	Identifier	fname		1359456	0					
ANR	1360281	Argument	flen		1359456	1					
ANR	1360282	Identifier	flen		1359456	0					
ANR	1360283	Argument	"""defined"""		1359456	2					
ANR	1360284	PrimaryExpression	"""defined"""		1359456	0					
ANR	1360285	Argument	"sizeof ( ""defined"" ) - 1"		1359456	3					
ANR	1360286	AdditiveExpression	"sizeof ( ""defined"" ) - 1"		1359456	0		-			
ANR	1360287	SizeofExpression	"sizeof ( ""defined"" )"		1359456	0					
ANR	1360288	Sizeof	sizeof		1359456	0					
ANR	1360289	PrimaryExpression	"""defined"""		1359456	1					
ANR	1360290	PrimaryExpression	1		1359456	1					
ANR	1360291	PrimaryExpression	0		1359456	1					
ANR	1360292	CompoundStatement		110:5:3728:3734	1359456	1					
ANR	1360293	IdentifierDeclStatement	zval c ;	719:5:22036:22042	1359456	0	True				
ANR	1360294	IdentifierDecl	c		1359456	0					
ANR	1360295	IdentifierDeclType	zval		1359456	0					
ANR	1360296	Identifier	c		1359456	1					
ANR	1360297	Statement	if	720:5:22049:22050	1359456	1	True				
ANR	1360298	Statement	(	720:7:22051:22051	1359456	2	True				
ANR	1360299	Statement	zend_optimizer_get_persistent_constant	720:8:22052:22089	1359456	3	True				
ANR	1360300	Statement	(	720:46:22090:22090	1359456	4	True				
ANR	1360301	Statement	Z_STR_P	720:47:22091:22097	1359456	5	True				
ANR	1360302	Statement	(	720:54:22098:22098	1359456	6	True				
ANR	1360303	Statement	arg	720:55:22099:22101	1359456	7	True				
ANR	1360304	Statement	)	720:58:22102:22102	1359456	8	True				
ANR	1360305	Statement	","	720:59:22103:22103	1359456	9	True				
ANR	1360306	Statement	&	720:61:22105:22105	1359456	10	True				
ANR	1360307	Statement	c	720:62:22106:22106	1359456	11	True				
ANR	1360308	Statement	","	720:63:22107:22107	1359456	12	True				
ANR	1360309	Statement	0	720:65:22109:22109	1359456	13	True				
ANR	1360310	Statement	ELS_CC	720:67:22111:22116	1359456	14	True				
ANR	1360311	Statement	)	720:73:22117:22117	1359456	15	True				
ANR	1360312	Statement	!=	720:75:22119:22120	1359456	16	True				
ANR	1360313	Statement	0	720:78:22122:22122	1359456	17	True				
ANR	1360314	Statement	)	720:79:22123:22123	1359456	18	True				
ANR	1360315	CompoundStatement		111:81:3817:3817	1359456	19					
ANR	1360316	ExpressionStatement	literal_dtor ( arg )	721:6:22133:22150	1359456	0	True				
ANR	1360317	CallExpression	literal_dtor ( arg )		1359456	0					
ANR	1360318	Callee	literal_dtor		1359456	0					
ANR	1360319	Identifier	literal_dtor		1359456	0					
ANR	1360320	ArgumentList	arg		1359456	1					
ANR	1360321	Argument	arg		1359456	0					
ANR	1360322	Identifier	arg		1359456	0					
ANR	1360323	ExpressionStatement	MAKE_NOP ( sv )	722:6:22158:22170	1359456	1	True				
ANR	1360324	CallExpression	MAKE_NOP ( sv )		1359456	0					
ANR	1360325	Callee	MAKE_NOP		1359456	0					
ANR	1360326	Identifier	MAKE_NOP		1359456	0					
ANR	1360327	ArgumentList	sv		1359456	1					
ANR	1360328	Argument	sv		1359456	0					
ANR	1360329	Identifier	sv		1359456	0					
ANR	1360330	ExpressionStatement	MAKE_NOP ( fcall )	723:6:22178:22193	1359456	2	True				
ANR	1360331	CallExpression	MAKE_NOP ( fcall )		1359456	0					
ANR	1360332	Callee	MAKE_NOP		1359456	0					
ANR	1360333	Identifier	MAKE_NOP		1359456	0					
ANR	1360334	ArgumentList	fcall		1359456	1					
ANR	1360335	Argument	fcall		1359456	0					
ANR	1360336	Identifier	fcall		1359456	0					
ANR	1360337	ExpressionStatement	"LITERAL_BOOL ( opline -> op1 , 1 )"	724:6:22201:22229	1359456	3	True				
ANR	1360338	CallExpression	"LITERAL_BOOL ( opline -> op1 , 1 )"		1359456	0					
ANR	1360339	Callee	LITERAL_BOOL		1359456	0					
ANR	1360340	Identifier	LITERAL_BOOL		1359456	0					
ANR	1360341	ArgumentList	opline -> op1		1359456	1					
ANR	1360342	Argument	opline -> op1		1359456	0					
ANR	1360343	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360344	Identifier	opline		1359456	0					
ANR	1360345	Identifier	op1		1359456	1					
ANR	1360346	Argument	1		1359456	1					
ANR	1360347	PrimaryExpression	1		1359456	0					
ANR	1360348	ExpressionStatement	ZEND_OP1_TYPE ( opline ) = IS_CONST	725:6:22237:22269	1359456	4	True				
ANR	1360349	AssignmentExpression	ZEND_OP1_TYPE ( opline ) = IS_CONST		1359456	0		=			
ANR	1360350	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1360351	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360352	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360353	ArgumentList	opline		1359456	1					
ANR	1360354	Argument	opline		1359456	0					
ANR	1360355	Identifier	opline		1359456	0					
ANR	1360356	Identifier	IS_CONST		1359456	1					
ANR	1360357	ElseStatement	else		1359456	0					
ANR	1360358	IfStatement	"if ( ( flen == sizeof ( ""function_exists"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""function_exists"" , sizeof ( ""function_exists"" ) - 1 ) == 0 ) || ( flen == sizeof ( ""is_callable"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""is_callable"" , sizeof ( ""is_callable"" ) - 1 ) == 0 ) )"		1359456	0					
ANR	1360359	Condition	"( flen == sizeof ( ""function_exists"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""function_exists"" , sizeof ( ""function_exists"" ) - 1 ) == 0 ) || ( flen == sizeof ( ""is_callable"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""is_callable"" , sizeof ( ""is_callable"" ) - 1 ) == 0 )"	727:14:22292:22549	1359456	0	True				
ANR	1360360	OrExpression	"( flen == sizeof ( ""function_exists"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""function_exists"" , sizeof ( ""function_exists"" ) - 1 ) == 0 ) || ( flen == sizeof ( ""is_callable"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""is_callable"" , sizeof ( ""is_callable"" ) - 1 ) == 0 )"		1359456	0		||			
ANR	1360361	AndExpression	"flen == sizeof ( ""function_exists"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""function_exists"" , sizeof ( ""function_exists"" ) - 1 ) == 0"		1359456	0		&&			
ANR	1360362	EqualityExpression	"flen == sizeof ( ""function_exists"" ) - 1"		1359456	0		==			
ANR	1360363	Identifier	flen		1359456	0					
ANR	1360364	AdditiveExpression	"sizeof ( ""function_exists"" ) - 1"		1359456	1		-			
ANR	1360365	SizeofExpression	"sizeof ( ""function_exists"" )"		1359456	0					
ANR	1360366	Sizeof	sizeof		1359456	0					
ANR	1360367	PrimaryExpression	"""function_exists"""		1359456	1					
ANR	1360368	PrimaryExpression	1		1359456	1					
ANR	1360369	EqualityExpression	"zend_binary_strcasecmp ( fname , flen , ""function_exists"" , sizeof ( ""function_exists"" ) - 1 ) == 0"		1359456	1		==			
ANR	1360370	CallExpression	"zend_binary_strcasecmp ( fname , flen , ""function_exists"" , sizeof ( ""function_exists"" ) - 1 )"		1359456	0					
ANR	1360371	Callee	zend_binary_strcasecmp		1359456	0					
ANR	1360372	Identifier	zend_binary_strcasecmp		1359456	0					
ANR	1360373	ArgumentList	fname		1359456	1					
ANR	1360374	Argument	fname		1359456	0					
ANR	1360375	Identifier	fname		1359456	0					
ANR	1360376	Argument	flen		1359456	1					
ANR	1360377	Identifier	flen		1359456	0					
ANR	1360378	Argument	"""function_exists"""		1359456	2					
ANR	1360379	PrimaryExpression	"""function_exists"""		1359456	0					
ANR	1360380	Argument	"sizeof ( ""function_exists"" ) - 1"		1359456	3					
ANR	1360381	AdditiveExpression	"sizeof ( ""function_exists"" ) - 1"		1359456	0		-			
ANR	1360382	SizeofExpression	"sizeof ( ""function_exists"" )"		1359456	0					
ANR	1360383	Sizeof	sizeof		1359456	0					
ANR	1360384	PrimaryExpression	"""function_exists"""		1359456	1					
ANR	1360385	PrimaryExpression	1		1359456	1					
ANR	1360386	PrimaryExpression	0		1359456	1					
ANR	1360387	AndExpression	"flen == sizeof ( ""is_callable"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""is_callable"" , sizeof ( ""is_callable"" ) - 1 ) == 0"		1359456	1		&&			
ANR	1360388	EqualityExpression	"flen == sizeof ( ""is_callable"" ) - 1"		1359456	0		==			
ANR	1360389	Identifier	flen		1359456	0					
ANR	1360390	AdditiveExpression	"sizeof ( ""is_callable"" ) - 1"		1359456	1		-			
ANR	1360391	SizeofExpression	"sizeof ( ""is_callable"" )"		1359456	0					
ANR	1360392	Sizeof	sizeof		1359456	0					
ANR	1360393	PrimaryExpression	"""is_callable"""		1359456	1					
ANR	1360394	PrimaryExpression	1		1359456	1					
ANR	1360395	EqualityExpression	"zend_binary_strcasecmp ( fname , flen , ""is_callable"" , sizeof ( ""is_callable"" ) - 1 ) == 0"		1359456	1		==			
ANR	1360396	CallExpression	"zend_binary_strcasecmp ( fname , flen , ""is_callable"" , sizeof ( ""is_callable"" ) - 1 )"		1359456	0					
ANR	1360397	Callee	zend_binary_strcasecmp		1359456	0					
ANR	1360398	Identifier	zend_binary_strcasecmp		1359456	0					
ANR	1360399	ArgumentList	fname		1359456	1					
ANR	1360400	Argument	fname		1359456	0					
ANR	1360401	Identifier	fname		1359456	0					
ANR	1360402	Argument	flen		1359456	1					
ANR	1360403	Identifier	flen		1359456	0					
ANR	1360404	Argument	"""is_callable"""		1359456	2					
ANR	1360405	PrimaryExpression	"""is_callable"""		1359456	0					
ANR	1360406	Argument	"sizeof ( ""is_callable"" ) - 1"		1359456	3					
ANR	1360407	AdditiveExpression	"sizeof ( ""is_callable"" ) - 1"		1359456	0		-			
ANR	1360408	SizeofExpression	"sizeof ( ""is_callable"" )"		1359456	0					
ANR	1360409	Sizeof	sizeof		1359456	0					
ANR	1360410	PrimaryExpression	"""is_callable"""		1359456	1					
ANR	1360411	PrimaryExpression	1		1359456	1					
ANR	1360412	PrimaryExpression	0		1359456	1					
ANR	1360413	CompoundStatement		121:5:4260:4283	1359456	1					
ANR	1360414	IdentifierDeclStatement	zend_function * function ;	730:5:22568:22591	1359456	0	True				
ANR	1360415	IdentifierDecl	* function		1359456	0					
ANR	1360416	IdentifierDeclType	zend_function *		1359456	0					
ANR	1360417	Identifier	function		1359456	1					
ANR	1360418	IfStatement	"if ( ( function = zend_hash_find_ptr ( EG ( function_table ) , Z_STR_P ( arg ) ) ) != NULL )"		1359456	1					
ANR	1360419	Condition	"( function = zend_hash_find_ptr ( EG ( function_table ) , Z_STR_P ( arg ) ) ) != NULL"	731:8:22601:22673	1359456	0	True				
ANR	1360420	EqualityExpression	"( function = zend_hash_find_ptr ( EG ( function_table ) , Z_STR_P ( arg ) ) ) != NULL"		1359456	0		!=			
ANR	1360421	AssignmentExpression	"function = zend_hash_find_ptr ( EG ( function_table ) , Z_STR_P ( arg ) )"		1359456	0		=			
ANR	1360422	Identifier	function		1359456	0					
ANR	1360423	CallExpression	"zend_hash_find_ptr ( EG ( function_table ) , Z_STR_P ( arg ) )"		1359456	1					
ANR	1360424	Callee	zend_hash_find_ptr		1359456	0					
ANR	1360425	Identifier	zend_hash_find_ptr		1359456	0					
ANR	1360426	ArgumentList	EG ( function_table )		1359456	1					
ANR	1360427	Argument	EG ( function_table )		1359456	0					
ANR	1360428	CallExpression	EG ( function_table )		1359456	0					
ANR	1360429	Callee	EG		1359456	0					
ANR	1360430	Identifier	EG		1359456	0					
ANR	1360431	ArgumentList	function_table		1359456	1					
ANR	1360432	Argument	function_table		1359456	0					
ANR	1360433	Identifier	function_table		1359456	0					
ANR	1360434	Argument	Z_STR_P ( arg )		1359456	1					
ANR	1360435	CallExpression	Z_STR_P ( arg )		1359456	0					
ANR	1360436	Callee	Z_STR_P		1359456	0					
ANR	1360437	Identifier	Z_STR_P		1359456	0					
ANR	1360438	ArgumentList	arg		1359456	1					
ANR	1360439	Argument	arg		1359456	0					
ANR	1360440	Identifier	arg		1359456	0					
ANR	1360441	Identifier	NULL		1359456	1					
ANR	1360442	CompoundStatement		122:83:4368:4368	1359456	1					
ANR	1360443	ExpressionStatement	literal_dtor ( arg )	732:6:22684:22701	1359456	0	True				
ANR	1360444	CallExpression	literal_dtor ( arg )		1359456	0					
ANR	1360445	Callee	literal_dtor		1359456	0					
ANR	1360446	Identifier	literal_dtor		1359456	0					
ANR	1360447	ArgumentList	arg		1359456	1					
ANR	1360448	Argument	arg		1359456	0					
ANR	1360449	Identifier	arg		1359456	0					
ANR	1360450	ExpressionStatement	MAKE_NOP ( sv )	733:6:22709:22721	1359456	1	True				
ANR	1360451	CallExpression	MAKE_NOP ( sv )		1359456	0					
ANR	1360452	Callee	MAKE_NOP		1359456	0					
ANR	1360453	Identifier	MAKE_NOP		1359456	0					
ANR	1360454	ArgumentList	sv		1359456	1					
ANR	1360455	Argument	sv		1359456	0					
ANR	1360456	Identifier	sv		1359456	0					
ANR	1360457	ExpressionStatement	MAKE_NOP ( fcall )	734:6:22729:22744	1359456	2	True				
ANR	1360458	CallExpression	MAKE_NOP ( fcall )		1359456	0					
ANR	1360459	Callee	MAKE_NOP		1359456	0					
ANR	1360460	Identifier	MAKE_NOP		1359456	0					
ANR	1360461	ArgumentList	fcall		1359456	1					
ANR	1360462	Argument	fcall		1359456	0					
ANR	1360463	Identifier	fcall		1359456	0					
ANR	1360464	ExpressionStatement	"LITERAL_BOOL ( opline -> op1 , 1 )"	735:6:22752:22780	1359456	3	True				
ANR	1360465	CallExpression	"LITERAL_BOOL ( opline -> op1 , 1 )"		1359456	0					
ANR	1360466	Callee	LITERAL_BOOL		1359456	0					
ANR	1360467	Identifier	LITERAL_BOOL		1359456	0					
ANR	1360468	ArgumentList	opline -> op1		1359456	1					
ANR	1360469	Argument	opline -> op1		1359456	0					
ANR	1360470	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360471	Identifier	opline		1359456	0					
ANR	1360472	Identifier	op1		1359456	1					
ANR	1360473	Argument	1		1359456	1					
ANR	1360474	PrimaryExpression	1		1359456	0					
ANR	1360475	ExpressionStatement	ZEND_OP1_TYPE ( opline ) = IS_CONST	736:6:22788:22820	1359456	4	True				
ANR	1360476	AssignmentExpression	ZEND_OP1_TYPE ( opline ) = IS_CONST		1359456	0		=			
ANR	1360477	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1360478	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360479	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360480	ArgumentList	opline		1359456	1					
ANR	1360481	Argument	opline		1359456	0					
ANR	1360482	Identifier	opline		1359456	0					
ANR	1360483	Identifier	IS_CONST		1359456	1					
ANR	1360484	ElseStatement	else		1359456	0					
ANR	1360485	IfStatement	"if ( flen == sizeof ( ""constant"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""constant"" , sizeof ( ""constant"" ) - 1 ) == 0 )"		1359456	0					
ANR	1360486	Condition	"flen == sizeof ( ""constant"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""constant"" , sizeof ( ""constant"" ) - 1 ) == 0"	738:14:22843:22948	1359456	0	True				
ANR	1360487	AndExpression	"flen == sizeof ( ""constant"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""constant"" , sizeof ( ""constant"" ) - 1 ) == 0"		1359456	0		&&			
ANR	1360488	EqualityExpression	"flen == sizeof ( ""constant"" ) - 1"		1359456	0		==			
ANR	1360489	Identifier	flen		1359456	0					
ANR	1360490	AdditiveExpression	"sizeof ( ""constant"" ) - 1"		1359456	1		-			
ANR	1360491	SizeofExpression	"sizeof ( ""constant"" )"		1359456	0					
ANR	1360492	Sizeof	sizeof		1359456	0					
ANR	1360493	PrimaryExpression	"""constant"""		1359456	1					
ANR	1360494	PrimaryExpression	1		1359456	1					
ANR	1360495	EqualityExpression	"zend_binary_strcasecmp ( fname , flen , ""constant"" , sizeof ( ""constant"" ) - 1 ) == 0"		1359456	1		==			
ANR	1360496	CallExpression	"zend_binary_strcasecmp ( fname , flen , ""constant"" , sizeof ( ""constant"" ) - 1 )"		1359456	0					
ANR	1360497	Callee	zend_binary_strcasecmp		1359456	0					
ANR	1360498	Identifier	zend_binary_strcasecmp		1359456	0					
ANR	1360499	ArgumentList	fname		1359456	1					
ANR	1360500	Argument	fname		1359456	0					
ANR	1360501	Identifier	fname		1359456	0					
ANR	1360502	Argument	flen		1359456	1					
ANR	1360503	Identifier	flen		1359456	0					
ANR	1360504	Argument	"""constant"""		1359456	2					
ANR	1360505	PrimaryExpression	"""constant"""		1359456	0					
ANR	1360506	Argument	"sizeof ( ""constant"" ) - 1"		1359456	3					
ANR	1360507	AdditiveExpression	"sizeof ( ""constant"" ) - 1"		1359456	0		-			
ANR	1360508	SizeofExpression	"sizeof ( ""constant"" )"		1359456	0					
ANR	1360509	Sizeof	sizeof		1359456	0					
ANR	1360510	PrimaryExpression	"""constant"""		1359456	1					
ANR	1360511	PrimaryExpression	1		1359456	1					
ANR	1360512	PrimaryExpression	0		1359456	1					
ANR	1360513	CompoundStatement		130:5:4650:4656	1359456	1					
ANR	1360514	IdentifierDeclStatement	zval c ;	739:5:22958:22964	1359456	0	True				
ANR	1360515	IdentifierDecl	c		1359456	0					
ANR	1360516	IdentifierDeclType	zval		1359456	0					
ANR	1360517	Identifier	c		1359456	1					
ANR	1360518	Statement	if	740:5:22971:22972	1359456	1	True				
ANR	1360519	Statement	(	740:7:22973:22973	1359456	2	True				
ANR	1360520	Statement	zend_optimizer_get_persistent_constant	740:8:22974:23011	1359456	3	True				
ANR	1360521	Statement	(	740:46:23012:23012	1359456	4	True				
ANR	1360522	Statement	Z_STR_P	740:47:23013:23019	1359456	5	True				
ANR	1360523	Statement	(	740:54:23020:23020	1359456	6	True				
ANR	1360524	Statement	arg	740:55:23021:23023	1359456	7	True				
ANR	1360525	Statement	)	740:58:23024:23024	1359456	8	True				
ANR	1360526	Statement	","	740:59:23025:23025	1359456	9	True				
ANR	1360527	Statement	&	740:61:23027:23027	1359456	10	True				
ANR	1360528	Statement	c	740:62:23028:23028	1359456	11	True				
ANR	1360529	Statement	","	740:63:23029:23029	1359456	12	True				
ANR	1360530	Statement	1	740:65:23031:23031	1359456	13	True				
ANR	1360531	Statement	ELS_CC	740:67:23033:23038	1359456	14	True				
ANR	1360532	Statement	)	740:73:23039:23039	1359456	15	True				
ANR	1360533	Statement	!=	740:75:23041:23042	1359456	16	True				
ANR	1360534	Statement	0	740:78:23044:23044	1359456	17	True				
ANR	1360535	Statement	)	740:79:23045:23045	1359456	18	True				
ANR	1360536	CompoundStatement		131:81:4739:4739	1359456	19					
ANR	1360537	ExpressionStatement	literal_dtor ( arg )	741:6:23055:23072	1359456	0	True				
ANR	1360538	CallExpression	literal_dtor ( arg )		1359456	0					
ANR	1360539	Callee	literal_dtor		1359456	0					
ANR	1360540	Identifier	literal_dtor		1359456	0					
ANR	1360541	ArgumentList	arg		1359456	1					
ANR	1360542	Argument	arg		1359456	0					
ANR	1360543	Identifier	arg		1359456	0					
ANR	1360544	ExpressionStatement	MAKE_NOP ( sv )	742:6:23080:23092	1359456	1	True				
ANR	1360545	CallExpression	MAKE_NOP ( sv )		1359456	0					
ANR	1360546	Callee	MAKE_NOP		1359456	0					
ANR	1360547	Identifier	MAKE_NOP		1359456	0					
ANR	1360548	ArgumentList	sv		1359456	1					
ANR	1360549	Argument	sv		1359456	0					
ANR	1360550	Identifier	sv		1359456	0					
ANR	1360551	ExpressionStatement	MAKE_NOP ( fcall )	743:6:23100:23115	1359456	2	True				
ANR	1360552	CallExpression	MAKE_NOP ( fcall )		1359456	0					
ANR	1360553	Callee	MAKE_NOP		1359456	0					
ANR	1360554	Identifier	MAKE_NOP		1359456	0					
ANR	1360555	ArgumentList	fcall		1359456	1					
ANR	1360556	Argument	fcall		1359456	0					
ANR	1360557	Identifier	fcall		1359456	0					
ANR	1360558	ExpressionStatement	"ZEND_OP1_LITERAL ( opline ) = zend_optimizer_add_literal ( op_array , & c )"	744:6:23123:23190	1359456	3	True				
ANR	1360559	AssignmentExpression	"ZEND_OP1_LITERAL ( opline ) = zend_optimizer_add_literal ( op_array , & c )"		1359456	0		=			
ANR	1360560	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1360561	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1360562	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1360563	ArgumentList	opline		1359456	1					
ANR	1360564	Argument	opline		1359456	0					
ANR	1360565	Identifier	opline		1359456	0					
ANR	1360566	CallExpression	"zend_optimizer_add_literal ( op_array , & c )"		1359456	1					
ANR	1360567	Callee	zend_optimizer_add_literal		1359456	0					
ANR	1360568	Identifier	zend_optimizer_add_literal		1359456	0					
ANR	1360569	ArgumentList	op_array		1359456	1					
ANR	1360570	Argument	op_array		1359456	0					
ANR	1360571	Identifier	op_array		1359456	0					
ANR	1360572	Argument	& c		1359456	1					
ANR	1360573	UnaryOperationExpression	& c		1359456	0					
ANR	1360574	UnaryOperator	&		1359456	0					
ANR	1360575	Identifier	c		1359456	1					
ANR	1360576	ExpressionStatement	ZEND_OP1_TYPE ( opline ) = IS_CONST	746:6:23247:23279	1359456	4	True				
ANR	1360577	AssignmentExpression	ZEND_OP1_TYPE ( opline ) = IS_CONST		1359456	0		=			
ANR	1360578	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1360579	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360580	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360581	ArgumentList	opline		1359456	1					
ANR	1360582	Argument	opline		1359456	0					
ANR	1360583	Identifier	opline		1359456	0					
ANR	1360584	Identifier	IS_CONST		1359456	1					
ANR	1360585	ElseStatement	else		1359456	0					
ANR	1360586	IfStatement	"if ( flen == sizeof ( ""extension_loaded"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""extension_loaded"" , sizeof ( ""extension_loaded"" ) - 1 ) == 0 )"		1359456	0					
ANR	1360587	Condition	"flen == sizeof ( ""extension_loaded"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""extension_loaded"" , sizeof ( ""extension_loaded"" ) - 1 ) == 0"	748:14:23302:23431	1359456	0	True				
ANR	1360588	AndExpression	"flen == sizeof ( ""extension_loaded"" ) - 1 && zend_binary_strcasecmp ( fname , flen , ""extension_loaded"" , sizeof ( ""extension_loaded"" ) - 1 ) == 0"		1359456	0		&&			
ANR	1360589	EqualityExpression	"flen == sizeof ( ""extension_loaded"" ) - 1"		1359456	0		==			
ANR	1360590	Identifier	flen		1359456	0					
ANR	1360591	AdditiveExpression	"sizeof ( ""extension_loaded"" ) - 1"		1359456	1		-			
ANR	1360592	SizeofExpression	"sizeof ( ""extension_loaded"" )"		1359456	0					
ANR	1360593	Sizeof	sizeof		1359456	0					
ANR	1360594	PrimaryExpression	"""extension_loaded"""		1359456	1					
ANR	1360595	PrimaryExpression	1		1359456	1					
ANR	1360596	EqualityExpression	"zend_binary_strcasecmp ( fname , flen , ""extension_loaded"" , sizeof ( ""extension_loaded"" ) - 1 ) == 0"		1359456	1		==			
ANR	1360597	CallExpression	"zend_binary_strcasecmp ( fname , flen , ""extension_loaded"" , sizeof ( ""extension_loaded"" ) - 1 )"		1359456	0					
ANR	1360598	Callee	zend_binary_strcasecmp		1359456	0					
ANR	1360599	Identifier	zend_binary_strcasecmp		1359456	0					
ANR	1360600	ArgumentList	fname		1359456	1					
ANR	1360601	Argument	fname		1359456	0					
ANR	1360602	Identifier	fname		1359456	0					
ANR	1360603	Argument	flen		1359456	1					
ANR	1360604	Identifier	flen		1359456	0					
ANR	1360605	Argument	"""extension_loaded"""		1359456	2					
ANR	1360606	PrimaryExpression	"""extension_loaded"""		1359456	0					
ANR	1360607	Argument	"sizeof ( ""extension_loaded"" ) - 1"		1359456	3					
ANR	1360608	AdditiveExpression	"sizeof ( ""extension_loaded"" ) - 1"		1359456	0		-			
ANR	1360609	SizeofExpression	"sizeof ( ""extension_loaded"" )"		1359456	0					
ANR	1360610	Sizeof	sizeof		1359456	0					
ANR	1360611	PrimaryExpression	"""extension_loaded"""		1359456	1					
ANR	1360612	PrimaryExpression	1		1359456	1					
ANR	1360613	PrimaryExpression	0		1359456	1					
ANR	1360614	CompoundStatement		139:146:5126:5126	1359456	1					
ANR	1360615	IfStatement	"if ( zend_hash_exists ( & module_registry , Z_STR_P ( arg ) ) )"		1359456	0					
ANR	1360616	Condition	"zend_hash_exists ( & module_registry , Z_STR_P ( arg ) )"	749:8:23444:23491	1359456	0	True				
ANR	1360617	CallExpression	"zend_hash_exists ( & module_registry , Z_STR_P ( arg ) )"		1359456	0					
ANR	1360618	Callee	zend_hash_exists		1359456	0					
ANR	1360619	Identifier	zend_hash_exists		1359456	0					
ANR	1360620	ArgumentList	& module_registry		1359456	1					
ANR	1360621	Argument	& module_registry		1359456	0					
ANR	1360622	UnaryOperationExpression	& module_registry		1359456	0					
ANR	1360623	UnaryOperator	&		1359456	0					
ANR	1360624	Identifier	module_registry		1359456	1					
ANR	1360625	Argument	Z_STR_P ( arg )		1359456	1					
ANR	1360626	CallExpression	Z_STR_P ( arg )		1359456	0					
ANR	1360627	Callee	Z_STR_P		1359456	0					
ANR	1360628	Identifier	Z_STR_P		1359456	0					
ANR	1360629	ArgumentList	arg		1359456	1					
ANR	1360630	Argument	arg		1359456	0					
ANR	1360631	Identifier	arg		1359456	0					
ANR	1360632	CompoundStatement		140:58:5186:5186	1359456	1					
ANR	1360633	ExpressionStatement	literal_dtor ( arg )	750:6:23502:23519	1359456	0	True				
ANR	1360634	CallExpression	literal_dtor ( arg )		1359456	0					
ANR	1360635	Callee	literal_dtor		1359456	0					
ANR	1360636	Identifier	literal_dtor		1359456	0					
ANR	1360637	ArgumentList	arg		1359456	1					
ANR	1360638	Argument	arg		1359456	0					
ANR	1360639	Identifier	arg		1359456	0					
ANR	1360640	ExpressionStatement	MAKE_NOP ( sv )	751:6:23527:23539	1359456	1	True				
ANR	1360641	CallExpression	MAKE_NOP ( sv )		1359456	0					
ANR	1360642	Callee	MAKE_NOP		1359456	0					
ANR	1360643	Identifier	MAKE_NOP		1359456	0					
ANR	1360644	ArgumentList	sv		1359456	1					
ANR	1360645	Argument	sv		1359456	0					
ANR	1360646	Identifier	sv		1359456	0					
ANR	1360647	ExpressionStatement	MAKE_NOP ( fcall )	752:6:23547:23562	1359456	2	True				
ANR	1360648	CallExpression	MAKE_NOP ( fcall )		1359456	0					
ANR	1360649	Callee	MAKE_NOP		1359456	0					
ANR	1360650	Identifier	MAKE_NOP		1359456	0					
ANR	1360651	ArgumentList	fcall		1359456	1					
ANR	1360652	Argument	fcall		1359456	0					
ANR	1360653	Identifier	fcall		1359456	0					
ANR	1360654	ExpressionStatement	"LITERAL_BOOL ( opline -> op1 , 1 )"	753:6:23570:23598	1359456	3	True				
ANR	1360655	CallExpression	"LITERAL_BOOL ( opline -> op1 , 1 )"		1359456	0					
ANR	1360656	Callee	LITERAL_BOOL		1359456	0					
ANR	1360657	Identifier	LITERAL_BOOL		1359456	0					
ANR	1360658	ArgumentList	opline -> op1		1359456	1					
ANR	1360659	Argument	opline -> op1		1359456	0					
ANR	1360660	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360661	Identifier	opline		1359456	0					
ANR	1360662	Identifier	op1		1359456	1					
ANR	1360663	Argument	1		1359456	1					
ANR	1360664	PrimaryExpression	1		1359456	0					
ANR	1360665	ExpressionStatement	ZEND_OP1_TYPE ( opline ) = IS_CONST	754:6:23606:23638	1359456	4	True				
ANR	1360666	AssignmentExpression	ZEND_OP1_TYPE ( opline ) = IS_CONST		1359456	0		=			
ANR	1360667	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1360668	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360669	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360670	ArgumentList	opline		1359456	1					
ANR	1360671	Argument	opline		1359456	0					
ANR	1360672	Identifier	opline		1359456	0					
ANR	1360673	Identifier	IS_CONST		1359456	1					
ANR	1360674	IfStatement	if ( opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || ( opline -> opcode == ZEND_CASE && ( ZEND_OP1_TYPE ( opline ) & ( IS_CONST | IS_CV ) ) ) )		1359456	5					
ANR	1360675	Condition	opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || ( opline -> opcode == ZEND_CASE && ( ZEND_OP1_TYPE ( opline ) & ( IS_CONST | IS_CV ) ) )	768:6:23952:24184	1359456	0	True				
ANR	1360676	OrExpression	opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || ( opline -> opcode == ZEND_CASE && ( ZEND_OP1_TYPE ( opline ) & ( IS_CONST | IS_CV ) ) )		1359456	0		||			
ANR	1360677	EqualityExpression	opline -> opcode == ZEND_IS_EQUAL		1359456	0		==			
ANR	1360678	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360679	Identifier	opline		1359456	0					
ANR	1360680	Identifier	opcode		1359456	1					
ANR	1360681	Identifier	ZEND_IS_EQUAL		1359456	1					
ANR	1360682	OrExpression	opline -> opcode == ZEND_IS_NOT_EQUAL || ( opline -> opcode == ZEND_CASE && ( ZEND_OP1_TYPE ( opline ) & ( IS_CONST | IS_CV ) ) )		1359456	1		||			
ANR	1360683	EqualityExpression	opline -> opcode == ZEND_IS_NOT_EQUAL		1359456	0		==			
ANR	1360684	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360685	Identifier	opline		1359456	0					
ANR	1360686	Identifier	opcode		1359456	1					
ANR	1360687	Identifier	ZEND_IS_NOT_EQUAL		1359456	1					
ANR	1360688	AndExpression	opline -> opcode == ZEND_CASE && ( ZEND_OP1_TYPE ( opline ) & ( IS_CONST | IS_CV ) )		1359456	1		&&			
ANR	1360689	EqualityExpression	opline -> opcode == ZEND_CASE		1359456	0		==			
ANR	1360690	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360691	Identifier	opline		1359456	0					
ANR	1360692	Identifier	opcode		1359456	1					
ANR	1360693	Identifier	ZEND_CASE		1359456	1					
ANR	1360694	BitAndExpression	ZEND_OP1_TYPE ( opline ) & ( IS_CONST | IS_CV )		1359456	1		&			
ANR	1360695	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1360696	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360697	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360698	ArgumentList	opline		1359456	1					
ANR	1360699	Argument	opline		1359456	0					
ANR	1360700	Identifier	opline		1359456	0					
ANR	1360701	InclusiveOrExpression	IS_CONST | IS_CV		1359456	1		|			
ANR	1360702	Identifier	IS_CONST		1359456	0					
ANR	1360703	Identifier	IS_CV		1359456	1					
ANR	1360704	CompoundStatement		162:80:5879:5879	1359456	1					
ANR	1360705	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == IS_CONST && ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_FALSE || Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_TRUE ) )		1359456	0					
ANR	1360706	Condition	ZEND_OP1_TYPE ( opline ) == IS_CONST && ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_FALSE || Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_TRUE )	772:7:24196:24334	1359456	0	True				
ANR	1360707	AndExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST && ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_FALSE || Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_TRUE )		1359456	0		&&			
ANR	1360708	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST		1359456	0		==			
ANR	1360709	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1360710	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360711	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360712	ArgumentList	opline		1359456	1					
ANR	1360713	Argument	opline		1359456	0					
ANR	1360714	Identifier	opline		1359456	0					
ANR	1360715	Identifier	IS_CONST		1359456	1					
ANR	1360716	OrExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_FALSE || Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_TRUE		1359456	1		||			
ANR	1360717	EqualityExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_FALSE		1359456	0		==			
ANR	1360718	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1360719	Callee	Z_TYPE		1359456	0					
ANR	1360720	Identifier	Z_TYPE		1359456	0					
ANR	1360721	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1360722	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1360723	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1360724	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1360725	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1360726	ArgumentList	opline		1359456	1					
ANR	1360727	Argument	opline		1359456	0					
ANR	1360728	Identifier	opline		1359456	0					
ANR	1360729	Identifier	IS_FALSE		1359456	1					
ANR	1360730	EqualityExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_TRUE		1359456	1		==			
ANR	1360731	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1360732	Callee	Z_TYPE		1359456	0					
ANR	1360733	Identifier	Z_TYPE		1359456	0					
ANR	1360734	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1360735	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1360736	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1360737	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1360738	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1360739	ArgumentList	opline		1359456	1					
ANR	1360740	Argument	opline		1359456	0					
ANR	1360741	Identifier	opline		1359456	0					
ANR	1360742	Identifier	IS_TRUE		1359456	1					
ANR	1360743	CompoundStatement		165:51:6029:6029	1359456	1					
ANR	1360744	ExpressionStatement	opline -> opcode = ( ( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) ) == IS_TRUE ) ) ? ZEND_BOOL : ZEND_BOOL_NOT	782:4:24678:24823	1359456	0	True				
ANR	1360745	AssignmentExpression	opline -> opcode = ( ( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) ) == IS_TRUE ) ) ? ZEND_BOOL : ZEND_BOOL_NOT		1359456	0		=			
ANR	1360746	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360747	Identifier	opline		1359456	0					
ANR	1360748	Identifier	opcode		1359456	1					
ANR	1360749	ConditionalExpression	( ( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) ) == IS_TRUE ) ) ? ZEND_BOOL : ZEND_BOOL_NOT		1359456	1					
ANR	1360750	Condition	( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) ) == IS_TRUE )		1359456	0					
ANR	1360751	EqualityExpression	( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) ) == IS_TRUE )		1359456	0		==			
ANR	1360752	EqualityExpression	opline -> opcode != ZEND_IS_NOT_EQUAL		1359456	0		!=			
ANR	1360753	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360754	Identifier	opline		1359456	0					
ANR	1360755	Identifier	opcode		1359456	1					
ANR	1360756	Identifier	ZEND_IS_NOT_EQUAL		1359456	1					
ANR	1360757	EqualityExpression	( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) ) == IS_TRUE		1359456	1		==			
ANR	1360758	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1360759	Callee	Z_TYPE		1359456	0					
ANR	1360760	Identifier	Z_TYPE		1359456	0					
ANR	1360761	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1360762	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1360763	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1360764	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1360765	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1360766	ArgumentList	opline		1359456	1					
ANR	1360767	Argument	opline		1359456	0					
ANR	1360768	Identifier	opline		1359456	0					
ANR	1360769	Identifier	IS_TRUE		1359456	1					
ANR	1360770	Identifier	ZEND_BOOL		1359456	1					
ANR	1360771	Identifier	ZEND_BOOL_NOT		1359456	2					
ANR	1360772	ExpressionStatement	"COPY_NODE ( opline -> op1 , opline -> op2 )"	785:4:24829:24864	1359456	1	True				
ANR	1360773	CallExpression	"COPY_NODE ( opline -> op1 , opline -> op2 )"		1359456	0					
ANR	1360774	Callee	COPY_NODE		1359456	0					
ANR	1360775	Identifier	COPY_NODE		1359456	0					
ANR	1360776	ArgumentList	opline -> op1		1359456	1					
ANR	1360777	Argument	opline -> op1		1359456	0					
ANR	1360778	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360779	Identifier	opline		1359456	0					
ANR	1360780	Identifier	op1		1359456	1					
ANR	1360781	Argument	opline -> op2		1359456	1					
ANR	1360782	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1360783	Identifier	opline		1359456	0					
ANR	1360784	Identifier	op2		1359456	1					
ANR	1360785	ExpressionStatement	SET_UNUSED ( opline -> op2 )	786:4:24870:24893	1359456	2	True				
ANR	1360786	CallExpression	SET_UNUSED ( opline -> op2 )		1359456	0					
ANR	1360787	Callee	SET_UNUSED		1359456	0					
ANR	1360788	Identifier	SET_UNUSED		1359456	0					
ANR	1360789	ArgumentList	opline -> op2		1359456	1					
ANR	1360790	Argument	opline -> op2		1359456	0					
ANR	1360791	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1360792	Identifier	opline		1359456	0					
ANR	1360793	Identifier	op2		1359456	1					
ANR	1360794	ElseStatement	else		1359456	0					
ANR	1360795	IfStatement	if ( ZEND_OP2_TYPE ( opline ) == IS_CONST && ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_FALSE || Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_TRUE ) )		1359456	0					
ANR	1360796	Condition	ZEND_OP2_TYPE ( opline ) == IS_CONST && ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_FALSE || Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_TRUE )	787:14:24909:25055	1359456	0	True				
ANR	1360797	AndExpression	ZEND_OP2_TYPE ( opline ) == IS_CONST && ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_FALSE || Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_TRUE )		1359456	0		&&			
ANR	1360798	EqualityExpression	ZEND_OP2_TYPE ( opline ) == IS_CONST		1359456	0		==			
ANR	1360799	CallExpression	ZEND_OP2_TYPE ( opline )		1359456	0					
ANR	1360800	Callee	ZEND_OP2_TYPE		1359456	0					
ANR	1360801	Identifier	ZEND_OP2_TYPE		1359456	0					
ANR	1360802	ArgumentList	opline		1359456	1					
ANR	1360803	Argument	opline		1359456	0					
ANR	1360804	Identifier	opline		1359456	0					
ANR	1360805	Identifier	IS_CONST		1359456	1					
ANR	1360806	OrExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_FALSE || Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_TRUE		1359456	1		||			
ANR	1360807	EqualityExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_FALSE		1359456	0		==			
ANR	1360808	CallExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1360809	Callee	Z_TYPE		1359456	0					
ANR	1360810	Identifier	Z_TYPE		1359456	0					
ANR	1360811	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1360812	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1360813	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1360814	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1360815	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1360816	ArgumentList	opline		1359456	1					
ANR	1360817	Argument	opline		1359456	0					
ANR	1360818	Identifier	opline		1359456	0					
ANR	1360819	Identifier	IS_FALSE		1359456	1					
ANR	1360820	EqualityExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_TRUE		1359456	1		==			
ANR	1360821	CallExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1360822	Callee	Z_TYPE		1359456	0					
ANR	1360823	Identifier	Z_TYPE		1359456	0					
ANR	1360824	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1360825	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1360826	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1360827	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1360828	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1360829	ArgumentList	opline		1359456	1					
ANR	1360830	Argument	opline		1359456	0					
ANR	1360831	Identifier	opline		1359456	0					
ANR	1360832	Identifier	IS_TRUE		1359456	1					
ANR	1360833	CompoundStatement		180:55:6750:6750	1359456	1					
ANR	1360834	ExpressionStatement	opline -> opcode = ( ( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) ) == IS_TRUE ) ) ? ZEND_BOOL : ZEND_BOOL_NOT	797:4:25399:25544	1359456	0	True				
ANR	1360835	AssignmentExpression	opline -> opcode = ( ( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) ) == IS_TRUE ) ) ? ZEND_BOOL : ZEND_BOOL_NOT		1359456	0		=			
ANR	1360836	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360837	Identifier	opline		1359456	0					
ANR	1360838	Identifier	opcode		1359456	1					
ANR	1360839	ConditionalExpression	( ( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) ) == IS_TRUE ) ) ? ZEND_BOOL : ZEND_BOOL_NOT		1359456	1					
ANR	1360840	Condition	( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) ) == IS_TRUE )		1359456	0					
ANR	1360841	EqualityExpression	( opline -> opcode != ZEND_IS_NOT_EQUAL ) == ( ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) ) == IS_TRUE )		1359456	0		==			
ANR	1360842	EqualityExpression	opline -> opcode != ZEND_IS_NOT_EQUAL		1359456	0		!=			
ANR	1360843	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360844	Identifier	opline		1359456	0					
ANR	1360845	Identifier	opcode		1359456	1					
ANR	1360846	Identifier	ZEND_IS_NOT_EQUAL		1359456	1					
ANR	1360847	EqualityExpression	( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) ) == IS_TRUE		1359456	1		==			
ANR	1360848	CallExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1360849	Callee	Z_TYPE		1359456	0					
ANR	1360850	Identifier	Z_TYPE		1359456	0					
ANR	1360851	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1360852	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1360853	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1360854	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1360855	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1360856	ArgumentList	opline		1359456	1					
ANR	1360857	Argument	opline		1359456	0					
ANR	1360858	Identifier	opline		1359456	0					
ANR	1360859	Identifier	IS_TRUE		1359456	1					
ANR	1360860	Identifier	ZEND_BOOL		1359456	1					
ANR	1360861	Identifier	ZEND_BOOL_NOT		1359456	2					
ANR	1360862	ExpressionStatement	SET_UNUSED ( opline -> op2 )	800:4:25550:25573	1359456	1	True				
ANR	1360863	CallExpression	SET_UNUSED ( opline -> op2 )		1359456	0					
ANR	1360864	Callee	SET_UNUSED		1359456	0					
ANR	1360865	Identifier	SET_UNUSED		1359456	0					
ANR	1360866	ArgumentList	opline -> op2		1359456	1					
ANR	1360867	Argument	opline -> op2		1359456	0					
ANR	1360868	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1360869	Identifier	opline		1359456	0					
ANR	1360870	Identifier	op2		1359456	1					
ANR	1360871	IfStatement	"if ( ( opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ ) && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) != NULL && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT )"		1359456	6					
ANR	1360872	Condition	"( opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ ) && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) != NULL && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT"	804:6:25591:25960	1359456	0	True				
ANR	1360873	AndExpression	"( opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ ) && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) != NULL && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT"		1359456	0		&&			
ANR	1360874	OrExpression	opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	0		||			
ANR	1360875	EqualityExpression	opline -> opcode == ZEND_BOOL		1359456	0		==			
ANR	1360876	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360877	Identifier	opline		1359456	0					
ANR	1360878	Identifier	opcode		1359456	1					
ANR	1360879	Identifier	ZEND_BOOL		1359456	1					
ANR	1360880	OrExpression	opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	1		||			
ANR	1360881	EqualityExpression	opline -> opcode == ZEND_BOOL_NOT		1359456	0		==			
ANR	1360882	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360883	Identifier	opline		1359456	0					
ANR	1360884	Identifier	opcode		1359456	1					
ANR	1360885	Identifier	ZEND_BOOL_NOT		1359456	1					
ANR	1360886	OrExpression	opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	1		||			
ANR	1360887	EqualityExpression	opline -> opcode == ZEND_JMPZ		1359456	0		==			
ANR	1360888	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360889	Identifier	opline		1359456	0					
ANR	1360890	Identifier	opcode		1359456	1					
ANR	1360891	Identifier	ZEND_JMPZ		1359456	1					
ANR	1360892	OrExpression	opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	1		||			
ANR	1360893	EqualityExpression	opline -> opcode == ZEND_JMPNZ		1359456	0		==			
ANR	1360894	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360895	Identifier	opline		1359456	0					
ANR	1360896	Identifier	opcode		1359456	1					
ANR	1360897	Identifier	ZEND_JMPNZ		1359456	1					
ANR	1360898	EqualityExpression	opline -> opcode == ZEND_JMPZNZ		1359456	1		==			
ANR	1360899	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360900	Identifier	opline		1359456	0					
ANR	1360901	Identifier	opcode		1359456	1					
ANR	1360902	Identifier	ZEND_JMPZNZ		1359456	1					
ANR	1360903	AndExpression	"ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) != NULL && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT"		1359456	1		&&			
ANR	1360904	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		1359456	0		==			
ANR	1360905	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1360906	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1360907	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1360908	ArgumentList	opline		1359456	1					
ANR	1360909	Argument	opline		1359456	0					
ANR	1360910	Identifier	opline		1359456	0					
ANR	1360911	Identifier	IS_TMP_VAR		1359456	1					
ANR	1360912	AndExpression	"VAR_SOURCE ( opline -> op1 ) != NULL && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT"		1359456	1		&&			
ANR	1360913	EqualityExpression	VAR_SOURCE ( opline -> op1 ) != NULL		1359456	0		!=			
ANR	1360914	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1360915	Callee	VAR_SOURCE		1359456	0					
ANR	1360916	Identifier	VAR_SOURCE		1359456	0					
ANR	1360917	ArgumentList	opline -> op1		1359456	1					
ANR	1360918	Argument	opline -> op1		1359456	0					
ANR	1360919	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360920	Identifier	opline		1359456	0					
ANR	1360921	Identifier	op1		1359456	1					
ANR	1360922	Identifier	NULL		1359456	1					
ANR	1360923	AndExpression	"! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT"		1359456	1		&&			
ANR	1360924	UnaryOperationExpression	"! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	0					
ANR	1360925	UnaryOperator	!		1359456	0					
ANR	1360926	CallExpression	"zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	1					
ANR	1360927	Callee	zend_bitset_in		1359456	0					
ANR	1360928	Identifier	zend_bitset_in		1359456	0					
ANR	1360929	ArgumentList	used_ext		1359456	1					
ANR	1360930	Argument	used_ext		1359456	0					
ANR	1360931	Identifier	used_ext		1359456	0					
ANR	1360932	Argument	VAR_NUM ( ZEND_OP1 ( opline ) . var )		1359456	1					
ANR	1360933	CallExpression	VAR_NUM ( ZEND_OP1 ( opline ) . var )		1359456	0					
ANR	1360934	Callee	VAR_NUM		1359456	0					
ANR	1360935	Identifier	VAR_NUM		1359456	0					
ANR	1360936	ArgumentList	ZEND_OP1 ( opline ) . var		1359456	1					
ANR	1360937	Argument	ZEND_OP1 ( opline ) . var		1359456	0					
ANR	1360938	MemberAccess	ZEND_OP1 ( opline ) . var		1359456	0					
ANR	1360939	CallExpression	ZEND_OP1 ( opline )		1359456	0					
ANR	1360940	Callee	ZEND_OP1		1359456	0					
ANR	1360941	Identifier	ZEND_OP1		1359456	0					
ANR	1360942	ArgumentList	opline		1359456	1					
ANR	1360943	Argument	opline		1359456	0					
ANR	1360944	Identifier	opline		1359456	0					
ANR	1360945	Identifier	var		1359456	1					
ANR	1360946	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT		1359456	1		==			
ANR	1360947	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1360948	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1360949	Callee	VAR_SOURCE		1359456	0					
ANR	1360950	Identifier	VAR_SOURCE		1359456	0					
ANR	1360951	ArgumentList	opline -> op1		1359456	1					
ANR	1360952	Argument	opline -> op1		1359456	0					
ANR	1360953	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360954	Identifier	opline		1359456	0					
ANR	1360955	Identifier	op1		1359456	1					
ANR	1360956	Identifier	opcode		1359456	1					
ANR	1360957	Identifier	ZEND_BOOL_NOT		1359456	1					
ANR	1360958	CompoundStatement		205:3:7712:7750	1359456	1					
ANR	1360959	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op1 ) ;	814:3:26020:26058	1359456	0	True				
ANR	1360960	IdentifierDecl	* src = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1360961	IdentifierDeclType	zend_op *		1359456	0					
ANR	1360962	Identifier	src		1359456	1					
ANR	1360963	AssignmentExpression	* src = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1360964	Identifier	src		1359456	0					
ANR	1360965	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1360966	Callee	VAR_SOURCE		1359456	0					
ANR	1360967	Identifier	VAR_SOURCE		1359456	0					
ANR	1360968	ArgumentList	opline -> op1		1359456	1					
ANR	1360969	Argument	opline -> op1		1359456	0					
ANR	1360970	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360971	Identifier	opline		1359456	0					
ANR	1360972	Identifier	op1		1359456	1					
ANR	1360973	ExpressionStatement	"COPY_NODE ( opline -> op1 , src -> op1 )"	816:3:26064:26096	1359456	1	True				
ANR	1360974	CallExpression	"COPY_NODE ( opline -> op1 , src -> op1 )"		1359456	0					
ANR	1360975	Callee	COPY_NODE		1359456	0					
ANR	1360976	Identifier	COPY_NODE		1359456	0					
ANR	1360977	ArgumentList	opline -> op1		1359456	1					
ANR	1360978	Argument	opline -> op1		1359456	0					
ANR	1360979	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1360980	Identifier	opline		1359456	0					
ANR	1360981	Identifier	op1		1359456	1					
ANR	1360982	Argument	src -> op1		1359456	1					
ANR	1360983	PtrMemberAccess	src -> op1		1359456	0					
ANR	1360984	Identifier	src		1359456	0					
ANR	1360985	Identifier	op1		1359456	1					
ANR	1360986	SwitchStatement	switch ( opline -> opcode )		1359456	2					
ANR	1360987	Condition	opline -> opcode	818:11:26110:26123	1359456	0	True				
ANR	1360988	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360989	Identifier	opline		1359456	0					
ANR	1360990	Identifier	opcode		1359456	1					
ANR	1360991	CompoundStatement		209:27:7818:7818	1359456	1					
ANR	1360992	Label	case ZEND_BOOL :	819:4:26132:26146	1359456	0	True				
ANR	1360993	Identifier	ZEND_BOOL		1359456	0					
ANR	1360994	ExpressionStatement	opline -> opcode = ZEND_BOOL_NOT	821:5:26210:26240	1359456	1	True				
ANR	1360995	AssignmentExpression	opline -> opcode = ZEND_BOOL_NOT		1359456	0		=			
ANR	1360996	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1360997	Identifier	opline		1359456	0					
ANR	1360998	Identifier	opcode		1359456	1					
ANR	1360999	Identifier	ZEND_BOOL_NOT		1359456	1					
ANR	1361000	BreakStatement	break ;	822:5:26247:26252	1359456	2	True				
ANR	1361001	Label	case ZEND_BOOL_NOT :	823:4:26258:26276	1359456	3	True				
ANR	1361002	Identifier	ZEND_BOOL_NOT		1359456	0					
ANR	1361003	ExpressionStatement	opline -> opcode = ZEND_BOOL	825:5:26341:26367	1359456	4	True				
ANR	1361004	AssignmentExpression	opline -> opcode = ZEND_BOOL		1359456	0		=			
ANR	1361005	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361006	Identifier	opline		1359456	0					
ANR	1361007	Identifier	opcode		1359456	1					
ANR	1361008	Identifier	ZEND_BOOL		1359456	1					
ANR	1361009	BreakStatement	break ;	826:5:26374:26379	1359456	5	True				
ANR	1361010	Label	case ZEND_JMPZ :	827:4:26385:26399	1359456	6	True				
ANR	1361011	Identifier	ZEND_JMPZ		1359456	0					
ANR	1361012	ExpressionStatement	opline -> opcode = ZEND_JMPNZ	829:5:26464:26491	1359456	7	True				
ANR	1361013	AssignmentExpression	opline -> opcode = ZEND_JMPNZ		1359456	0		=			
ANR	1361014	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361015	Identifier	opline		1359456	0					
ANR	1361016	Identifier	opcode		1359456	1					
ANR	1361017	Identifier	ZEND_JMPNZ		1359456	1					
ANR	1361018	BreakStatement	break ;	830:5:26498:26503	1359456	8	True				
ANR	1361019	Label	case ZEND_JMPNZ :	831:4:26509:26524	1359456	9	True				
ANR	1361020	Identifier	ZEND_JMPNZ		1359456	0					
ANR	1361021	ExpressionStatement	opline -> opcode = ZEND_JMPZ	833:5:26589:26615	1359456	10	True				
ANR	1361022	AssignmentExpression	opline -> opcode = ZEND_JMPZ		1359456	0		=			
ANR	1361023	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361024	Identifier	opline		1359456	0					
ANR	1361025	Identifier	opcode		1359456	1					
ANR	1361026	Identifier	ZEND_JMPZ		1359456	1					
ANR	1361027	BreakStatement	break ;	834:5:26622:26627	1359456	11	True				
ANR	1361028	Label	case ZEND_JMPZNZ :	835:4:26633:26649	1359456	12	True				
ANR	1361029	Identifier	ZEND_JMPZNZ		1359456	0					
ANR	1361030	CompoundStatement		230:5:8438:8459	1359456	13					
ANR	1361031	IdentifierDeclStatement	int op_t ;	838:5:26731:26739	1359456	0	True				
ANR	1361032	IdentifierDecl	op_t		1359456	0					
ANR	1361033	IdentifierDeclType	int		1359456	0					
ANR	1361034	Identifier	op_t		1359456	1					
ANR	1361035	IdentifierDeclStatement	zend_code_block * op_b ;	839:5:26746:26767	1359456	1	True				
ANR	1361036	IdentifierDecl	* op_b		1359456	0					
ANR	1361037	IdentifierDeclType	zend_code_block *		1359456	0					
ANR	1361038	Identifier	op_b		1359456	1					
ANR	1361039	ExpressionStatement	op_t = opline -> extended_value	841:5:26775:26804	1359456	2	True				
ANR	1361040	AssignmentExpression	op_t = opline -> extended_value		1359456	0		=			
ANR	1361041	Identifier	op_t		1359456	0					
ANR	1361042	PtrMemberAccess	opline -> extended_value		1359456	1					
ANR	1361043	Identifier	opline		1359456	0					
ANR	1361044	Identifier	extended_value		1359456	1					
ANR	1361045	ExpressionStatement	opline -> extended_value = ZEND_OP2 ( opline ) . opline_num	842:5:26811:26863	1359456	3	True				
ANR	1361046	AssignmentExpression	opline -> extended_value = ZEND_OP2 ( opline ) . opline_num		1359456	0		=			
ANR	1361047	PtrMemberAccess	opline -> extended_value		1359456	0					
ANR	1361048	Identifier	opline		1359456	0					
ANR	1361049	Identifier	extended_value		1359456	1					
ANR	1361050	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1359456	1					
ANR	1361051	CallExpression	ZEND_OP2 ( opline )		1359456	0					
ANR	1361052	Callee	ZEND_OP2		1359456	0					
ANR	1361053	Identifier	ZEND_OP2		1359456	0					
ANR	1361054	ArgumentList	opline		1359456	1					
ANR	1361055	Argument	opline		1359456	0					
ANR	1361056	Identifier	opline		1359456	0					
ANR	1361057	Identifier	opline_num		1359456	1					
ANR	1361058	ExpressionStatement	ZEND_OP2 ( opline ) . opline_num = op_t	843:5:26870:26904	1359456	4	True				
ANR	1361059	AssignmentExpression	ZEND_OP2 ( opline ) . opline_num = op_t		1359456	0		=			
ANR	1361060	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1359456	0					
ANR	1361061	CallExpression	ZEND_OP2 ( opline )		1359456	0					
ANR	1361062	Callee	ZEND_OP2		1359456	0					
ANR	1361063	Identifier	ZEND_OP2		1359456	0					
ANR	1361064	ArgumentList	opline		1359456	1					
ANR	1361065	Argument	opline		1359456	0					
ANR	1361066	Identifier	opline		1359456	0					
ANR	1361067	Identifier	opline_num		1359456	1					
ANR	1361068	Identifier	op_t		1359456	1					
ANR	1361069	ExpressionStatement	op_b = block -> ext_to	845:5:26912:26932	1359456	5	True				
ANR	1361070	AssignmentExpression	op_b = block -> ext_to		1359456	0		=			
ANR	1361071	Identifier	op_b		1359456	0					
ANR	1361072	PtrMemberAccess	block -> ext_to		1359456	1					
ANR	1361073	Identifier	block		1359456	0					
ANR	1361074	Identifier	ext_to		1359456	1					
ANR	1361075	ExpressionStatement	block -> ext_to = block -> op2_to	846:5:26939:26968	1359456	6	True				
ANR	1361076	AssignmentExpression	block -> ext_to = block -> op2_to		1359456	0		=			
ANR	1361077	PtrMemberAccess	block -> ext_to		1359456	0					
ANR	1361078	Identifier	block		1359456	0					
ANR	1361079	Identifier	ext_to		1359456	1					
ANR	1361080	PtrMemberAccess	block -> op2_to		1359456	1					
ANR	1361081	Identifier	block		1359456	0					
ANR	1361082	Identifier	op2_to		1359456	1					
ANR	1361083	ExpressionStatement	block -> op2_to = op_b	847:5:26975:26995	1359456	7	True				
ANR	1361084	AssignmentExpression	block -> op2_to = op_b		1359456	0		=			
ANR	1361085	PtrMemberAccess	block -> op2_to		1359456	0					
ANR	1361086	Identifier	block		1359456	0					
ANR	1361087	Identifier	op2_to		1359456	1					
ANR	1361088	Identifier	op_b		1359456	1					
ANR	1361089	BreakStatement	break ;	849:4:27007:27012	1359456	14	True				
ANR	1361090	ExpressionStatement	VAR_UNSET ( opline -> op1 )	852:3:27023:27045	1359456	3	True				
ANR	1361091	CallExpression	VAR_UNSET ( opline -> op1 )		1359456	0					
ANR	1361092	Callee	VAR_UNSET		1359456	0					
ANR	1361093	Identifier	VAR_UNSET		1359456	0					
ANR	1361094	ArgumentList	opline -> op1		1359456	1					
ANR	1361095	Argument	opline -> op1		1359456	0					
ANR	1361096	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361097	Identifier	opline		1359456	0					
ANR	1361098	Identifier	op1		1359456	1					
ANR	1361099	ExpressionStatement	MAKE_NOP ( src )	853:3:27050:27063	1359456	4	True				
ANR	1361100	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1361101	Callee	MAKE_NOP		1359456	0					
ANR	1361102	Identifier	MAKE_NOP		1359456	0					
ANR	1361103	ArgumentList	src		1359456	1					
ANR	1361104	Argument	src		1359456	0					
ANR	1361105	Identifier	src		1359456	0					
ANR	1361106	ContinueStatement	continue ;	854:3:27068:27076	1359456	5	True				
ANR	1361107	ElseStatement	else		1359456	0					
ANR	1361108	IfStatement	if ( 0 && ( opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX ) && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) != NULL && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var )		1359456	0					
ANR	1361109	Condition	0 && ( opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX ) && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) != NULL && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var	858:5:27171:27442	1359456	0	True				
ANR	1361110	AndExpression	0 && ( opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX ) && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) != NULL && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var		1359456	0		&&			
ANR	1361111	PrimaryExpression	0		1359456	0					
ANR	1361112	AndExpression	( opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX ) && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) != NULL && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var		1359456	1		&&			
ANR	1361113	OrExpression	opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX		1359456	0		||			
ANR	1361114	EqualityExpression	opline -> opcode == ZEND_JMPZ_EX		1359456	0		==			
ANR	1361115	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361116	Identifier	opline		1359456	0					
ANR	1361117	Identifier	opcode		1359456	1					
ANR	1361118	Identifier	ZEND_JMPZ_EX		1359456	1					
ANR	1361119	EqualityExpression	opline -> opcode == ZEND_JMPNZ_EX		1359456	1		==			
ANR	1361120	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361121	Identifier	opline		1359456	0					
ANR	1361122	Identifier	opcode		1359456	1					
ANR	1361123	Identifier	ZEND_JMPNZ_EX		1359456	1					
ANR	1361124	AndExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) != NULL && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var		1359456	1		&&			
ANR	1361125	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		1359456	0		==			
ANR	1361126	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1361127	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1361128	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1361129	ArgumentList	opline		1359456	1					
ANR	1361130	Argument	opline		1359456	0					
ANR	1361131	Identifier	opline		1359456	0					
ANR	1361132	Identifier	IS_TMP_VAR		1359456	1					
ANR	1361133	AndExpression	VAR_SOURCE ( opline -> op1 ) != NULL && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var		1359456	1		&&			
ANR	1361134	EqualityExpression	VAR_SOURCE ( opline -> op1 ) != NULL		1359456	0		!=			
ANR	1361135	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361136	Callee	VAR_SOURCE		1359456	0					
ANR	1361137	Identifier	VAR_SOURCE		1359456	0					
ANR	1361138	ArgumentList	opline -> op1		1359456	1					
ANR	1361139	Argument	opline -> op1		1359456	0					
ANR	1361140	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361141	Identifier	opline		1359456	0					
ANR	1361142	Identifier	op1		1359456	1					
ANR	1361143	Identifier	NULL		1359456	1					
ANR	1361144	AndExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var		1359456	1		&&			
ANR	1361145	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL_NOT		1359456	0		==			
ANR	1361146	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1361147	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361148	Callee	VAR_SOURCE		1359456	0					
ANR	1361149	Identifier	VAR_SOURCE		1359456	0					
ANR	1361150	ArgumentList	opline -> op1		1359456	1					
ANR	1361151	Argument	opline -> op1		1359456	0					
ANR	1361152	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361153	Identifier	opline		1359456	0					
ANR	1361154	Identifier	op1		1359456	1					
ANR	1361155	Identifier	opcode		1359456	1					
ANR	1361156	Identifier	ZEND_BOOL_NOT		1359456	1					
ANR	1361157	EqualityExpression	ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var		1359456	1		==			
ANR	1361158	MemberAccess	ZEND_OP1 ( opline ) . var		1359456	0					
ANR	1361159	CallExpression	ZEND_OP1 ( opline )		1359456	0					
ANR	1361160	Callee	ZEND_OP1		1359456	0					
ANR	1361161	Identifier	ZEND_OP1		1359456	0					
ANR	1361162	ArgumentList	opline		1359456	1					
ANR	1361163	Argument	opline		1359456	0					
ANR	1361164	Identifier	opline		1359456	0					
ANR	1361165	Identifier	var		1359456	1					
ANR	1361166	MemberAccess	ZEND_RESULT ( opline ) . var		1359456	1					
ANR	1361167	CallExpression	ZEND_RESULT ( opline )		1359456	0					
ANR	1361168	Callee	ZEND_RESULT		1359456	0					
ANR	1361169	Identifier	ZEND_RESULT		1359456	0					
ANR	1361170	ArgumentList	opline		1359456	1					
ANR	1361171	Argument	opline		1359456	0					
ANR	1361172	Identifier	opline		1359456	0					
ANR	1361173	Identifier	var		1359456	1					
ANR	1361174	CompoundStatement		256:3:9148:9186	1359456	1					
ANR	1361175	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op1 ) ;	865:3:27456:27494	1359456	0	True				
ANR	1361176	IdentifierDecl	* src = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361177	IdentifierDeclType	zend_op *		1359456	0					
ANR	1361178	Identifier	src		1359456	1					
ANR	1361179	AssignmentExpression	* src = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1361180	Identifier	src		1359456	0					
ANR	1361181	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1361182	Callee	VAR_SOURCE		1359456	0					
ANR	1361183	Identifier	VAR_SOURCE		1359456	0					
ANR	1361184	ArgumentList	opline -> op1		1359456	1					
ANR	1361185	Argument	opline -> op1		1359456	0					
ANR	1361186	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361187	Identifier	opline		1359456	0					
ANR	1361188	Identifier	op1		1359456	1					
ANR	1361189	IfStatement	if ( opline -> opcode == ZEND_JMPZ_EX )		1359456	1					
ANR	1361190	Condition	opline -> opcode == ZEND_JMPZ_EX	866:6:27502:27531	1359456	0	True				
ANR	1361191	EqualityExpression	opline -> opcode == ZEND_JMPZ_EX		1359456	0		==			
ANR	1361192	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361193	Identifier	opline		1359456	0					
ANR	1361194	Identifier	opcode		1359456	1					
ANR	1361195	Identifier	ZEND_JMPZ_EX		1359456	1					
ANR	1361196	CompoundStatement		257:38:9226:9226	1359456	1					
ANR	1361197	ExpressionStatement	opline -> opcode = ZEND_JMPNZ	867:4:27540:27567	1359456	0	True				
ANR	1361198	AssignmentExpression	opline -> opcode = ZEND_JMPNZ		1359456	0		=			
ANR	1361199	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361200	Identifier	opline		1359456	0					
ANR	1361201	Identifier	opcode		1359456	1					
ANR	1361202	Identifier	ZEND_JMPNZ		1359456	1					
ANR	1361203	ElseStatement	else		1359456	0					
ANR	1361204	CompoundStatement		259:10:9271:9271	1359456	0					
ANR	1361205	ExpressionStatement	opline -> opcode = ZEND_JMPZ	869:4:27585:27611	1359456	0	True				
ANR	1361206	AssignmentExpression	opline -> opcode = ZEND_JMPZ		1359456	0		=			
ANR	1361207	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361208	Identifier	opline		1359456	0					
ANR	1361209	Identifier	opcode		1359456	1					
ANR	1361210	Identifier	ZEND_JMPZ		1359456	1					
ANR	1361211	ExpressionStatement	"COPY_NODE ( opline -> op1 , src -> op1 )"	871:3:27621:27653	1359456	2	True				
ANR	1361212	CallExpression	"COPY_NODE ( opline -> op1 , src -> op1 )"		1359456	0					
ANR	1361213	Callee	COPY_NODE		1359456	0					
ANR	1361214	Identifier	COPY_NODE		1359456	0					
ANR	1361215	ArgumentList	opline -> op1		1359456	1					
ANR	1361216	Argument	opline -> op1		1359456	0					
ANR	1361217	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361218	Identifier	opline		1359456	0					
ANR	1361219	Identifier	op1		1359456	1					
ANR	1361220	Argument	src -> op1		1359456	1					
ANR	1361221	PtrMemberAccess	src -> op1		1359456	0					
ANR	1361222	Identifier	src		1359456	0					
ANR	1361223	Identifier	op1		1359456	1					
ANR	1361224	ExpressionStatement	SET_UNUSED ( opline -> result )	872:3:27658:27684	1359456	3	True				
ANR	1361225	CallExpression	SET_UNUSED ( opline -> result )		1359456	0					
ANR	1361226	Callee	SET_UNUSED		1359456	0					
ANR	1361227	Identifier	SET_UNUSED		1359456	0					
ANR	1361228	ArgumentList	opline -> result		1359456	1					
ANR	1361229	Argument	opline -> result		1359456	0					
ANR	1361230	PtrMemberAccess	opline -> result		1359456	0					
ANR	1361231	Identifier	opline		1359456	0					
ANR	1361232	Identifier	result		1359456	1					
ANR	1361233	ContinueStatement	continue ;	873:3:27689:27697	1359456	4	True				
ANR	1361234	ElseStatement	else		1359456	0					
ANR	1361235	IfStatement	"if ( ( opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ ) && ( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) != NULL && ( ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) || ( ( ZEND_RESULT_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && ZEND_RESULT ( opline ) . var == ZEND_OP1 ( opline ) . var ) ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN ) )"		1359456	0					
ANR	1361236	Condition	"( opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ ) && ( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) != NULL && ( ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) || ( ( ZEND_RESULT_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && ZEND_RESULT ( opline ) . var == ZEND_OP1 ( opline ) . var ) ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN )"	877:6:27767:28389	1359456	0	True				
ANR	1361237	AndExpression	"( opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ ) && ( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) != NULL && ( ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) || ( ( ZEND_RESULT_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && ZEND_RESULT ( opline ) . var == ZEND_OP1 ( opline ) . var ) ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN )"		1359456	0		&&			
ANR	1361238	OrExpression	opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	0		||			
ANR	1361239	EqualityExpression	opline -> opcode == ZEND_BOOL		1359456	0		==			
ANR	1361240	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361241	Identifier	opline		1359456	0					
ANR	1361242	Identifier	opcode		1359456	1					
ANR	1361243	Identifier	ZEND_BOOL		1359456	1					
ANR	1361244	OrExpression	opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	1		||			
ANR	1361245	EqualityExpression	opline -> opcode == ZEND_BOOL_NOT		1359456	0		==			
ANR	1361246	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361247	Identifier	opline		1359456	0					
ANR	1361248	Identifier	opcode		1359456	1					
ANR	1361249	Identifier	ZEND_BOOL_NOT		1359456	1					
ANR	1361250	OrExpression	opline -> opcode == ZEND_JMPZ || opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	1		||			
ANR	1361251	EqualityExpression	opline -> opcode == ZEND_JMPZ		1359456	0		==			
ANR	1361252	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361253	Identifier	opline		1359456	0					
ANR	1361254	Identifier	opcode		1359456	1					
ANR	1361255	Identifier	ZEND_JMPZ		1359456	1					
ANR	1361256	OrExpression	opline -> opcode == ZEND_JMPZ_EX || opline -> opcode == ZEND_JMPNZ_EX || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	1		||			
ANR	1361257	EqualityExpression	opline -> opcode == ZEND_JMPZ_EX		1359456	0		==			
ANR	1361258	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361259	Identifier	opline		1359456	0					
ANR	1361260	Identifier	opcode		1359456	1					
ANR	1361261	Identifier	ZEND_JMPZ_EX		1359456	1					
ANR	1361262	OrExpression	opline -> opcode == ZEND_JMPNZ_EX || opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	1		||			
ANR	1361263	EqualityExpression	opline -> opcode == ZEND_JMPNZ_EX		1359456	0		==			
ANR	1361264	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361265	Identifier	opline		1359456	0					
ANR	1361266	Identifier	opcode		1359456	1					
ANR	1361267	Identifier	ZEND_JMPNZ_EX		1359456	1					
ANR	1361268	OrExpression	opline -> opcode == ZEND_JMPNZ || opline -> opcode == ZEND_JMPZNZ		1359456	1		||			
ANR	1361269	EqualityExpression	opline -> opcode == ZEND_JMPNZ		1359456	0		==			
ANR	1361270	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361271	Identifier	opline		1359456	0					
ANR	1361272	Identifier	opcode		1359456	1					
ANR	1361273	Identifier	ZEND_JMPNZ		1359456	1					
ANR	1361274	EqualityExpression	opline -> opcode == ZEND_JMPZNZ		1359456	1		==			
ANR	1361275	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361276	Identifier	opline		1359456	0					
ANR	1361277	Identifier	opcode		1359456	1					
ANR	1361278	Identifier	ZEND_JMPZNZ		1359456	1					
ANR	1361279	AndExpression	"( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) != NULL && ( ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) || ( ( ZEND_RESULT_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && ZEND_RESULT ( opline ) . var == ZEND_OP1 ( opline ) . var ) ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN )"		1359456	1		&&			
ANR	1361280	BitAndExpression	ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR )		1359456	0		&			
ANR	1361281	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1361282	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1361283	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1361284	ArgumentList	opline		1359456	1					
ANR	1361285	Argument	opline		1359456	0					
ANR	1361286	Identifier	opline		1359456	0					
ANR	1361287	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1359456	1		|			
ANR	1361288	Identifier	IS_TMP_VAR		1359456	0					
ANR	1361289	Identifier	IS_VAR		1359456	1					
ANR	1361290	AndExpression	"VAR_SOURCE ( opline -> op1 ) != NULL && ( ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) || ( ( ZEND_RESULT_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && ZEND_RESULT ( opline ) . var == ZEND_OP1 ( opline ) . var ) ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN )"		1359456	1		&&			
ANR	1361291	EqualityExpression	VAR_SOURCE ( opline -> op1 ) != NULL		1359456	0		!=			
ANR	1361292	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361293	Callee	VAR_SOURCE		1359456	0					
ANR	1361294	Identifier	VAR_SOURCE		1359456	0					
ANR	1361295	ArgumentList	opline -> op1		1359456	1					
ANR	1361296	Argument	opline -> op1		1359456	0					
ANR	1361297	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361298	Identifier	opline		1359456	0					
ANR	1361299	Identifier	op1		1359456	1					
ANR	1361300	Identifier	NULL		1359456	1					
ANR	1361301	AndExpression	"( ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) || ( ( ZEND_RESULT_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && ZEND_RESULT ( opline ) . var == ZEND_OP1 ( opline ) . var ) ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN )"		1359456	1		&&			
ANR	1361302	OrExpression	"! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) || ( ( ZEND_RESULT_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && ZEND_RESULT ( opline ) . var == ZEND_OP1 ( opline ) . var )"		1359456	0		||			
ANR	1361303	UnaryOperationExpression	"! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	0					
ANR	1361304	UnaryOperator	!		1359456	0					
ANR	1361305	CallExpression	"zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	1					
ANR	1361306	Callee	zend_bitset_in		1359456	0					
ANR	1361307	Identifier	zend_bitset_in		1359456	0					
ANR	1361308	ArgumentList	used_ext		1359456	1					
ANR	1361309	Argument	used_ext		1359456	0					
ANR	1361310	Identifier	used_ext		1359456	0					
ANR	1361311	Argument	VAR_NUM ( ZEND_OP1 ( opline ) . var )		1359456	1					
ANR	1361312	CallExpression	VAR_NUM ( ZEND_OP1 ( opline ) . var )		1359456	0					
ANR	1361313	Callee	VAR_NUM		1359456	0					
ANR	1361314	Identifier	VAR_NUM		1359456	0					
ANR	1361315	ArgumentList	ZEND_OP1 ( opline ) . var		1359456	1					
ANR	1361316	Argument	ZEND_OP1 ( opline ) . var		1359456	0					
ANR	1361317	MemberAccess	ZEND_OP1 ( opline ) . var		1359456	0					
ANR	1361318	CallExpression	ZEND_OP1 ( opline )		1359456	0					
ANR	1361319	Callee	ZEND_OP1		1359456	0					
ANR	1361320	Identifier	ZEND_OP1		1359456	0					
ANR	1361321	ArgumentList	opline		1359456	1					
ANR	1361322	Argument	opline		1359456	0					
ANR	1361323	Identifier	opline		1359456	0					
ANR	1361324	Identifier	var		1359456	1					
ANR	1361325	AndExpression	( ZEND_RESULT_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && ZEND_RESULT ( opline ) . var == ZEND_OP1 ( opline ) . var		1359456	1		&&			
ANR	1361326	BitAndExpression	ZEND_RESULT_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR )		1359456	0		&			
ANR	1361327	CallExpression	ZEND_RESULT_TYPE ( opline )		1359456	0					
ANR	1361328	Callee	ZEND_RESULT_TYPE		1359456	0					
ANR	1361329	Identifier	ZEND_RESULT_TYPE		1359456	0					
ANR	1361330	ArgumentList	opline		1359456	1					
ANR	1361331	Argument	opline		1359456	0					
ANR	1361332	Identifier	opline		1359456	0					
ANR	1361333	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1359456	1		|			
ANR	1361334	Identifier	IS_TMP_VAR		1359456	0					
ANR	1361335	Identifier	IS_VAR		1359456	1					
ANR	1361336	EqualityExpression	ZEND_RESULT ( opline ) . var == ZEND_OP1 ( opline ) . var		1359456	1		==			
ANR	1361337	MemberAccess	ZEND_RESULT ( opline ) . var		1359456	0					
ANR	1361338	CallExpression	ZEND_RESULT ( opline )		1359456	0					
ANR	1361339	Callee	ZEND_RESULT		1359456	0					
ANR	1361340	Identifier	ZEND_RESULT		1359456	0					
ANR	1361341	ArgumentList	opline		1359456	1					
ANR	1361342	Argument	opline		1359456	0					
ANR	1361343	Identifier	opline		1359456	0					
ANR	1361344	Identifier	var		1359456	1					
ANR	1361345	MemberAccess	ZEND_OP1 ( opline ) . var		1359456	1					
ANR	1361346	CallExpression	ZEND_OP1 ( opline )		1359456	0					
ANR	1361347	Callee	ZEND_OP1		1359456	0					
ANR	1361348	Identifier	ZEND_OP1		1359456	0					
ANR	1361349	ArgumentList	opline		1359456	1					
ANR	1361350	Argument	opline		1359456	0					
ANR	1361351	Identifier	opline		1359456	0					
ANR	1361352	Identifier	var		1359456	1					
ANR	1361353	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN		1359456	1		||			
ANR	1361354	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL		1359456	0		==			
ANR	1361355	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1361356	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361357	Callee	VAR_SOURCE		1359456	0					
ANR	1361358	Identifier	VAR_SOURCE		1359456	0					
ANR	1361359	ArgumentList	opline -> op1		1359456	1					
ANR	1361360	Argument	opline -> op1		1359456	0					
ANR	1361361	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361362	Identifier	opline		1359456	0					
ANR	1361363	Identifier	op1		1359456	1					
ANR	1361364	Identifier	opcode		1359456	1					
ANR	1361365	Identifier	ZEND_BOOL		1359456	1					
ANR	1361366	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN		1359456	1		==			
ANR	1361367	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1361368	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361369	Callee	VAR_SOURCE		1359456	0					
ANR	1361370	Identifier	VAR_SOURCE		1359456	0					
ANR	1361371	ArgumentList	opline -> op1		1359456	1					
ANR	1361372	Argument	opline -> op1		1359456	0					
ANR	1361373	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361374	Identifier	opline		1359456	0					
ANR	1361375	Identifier	op1		1359456	1					
ANR	1361376	Identifier	opcode		1359456	1					
ANR	1361377	Identifier	ZEND_QM_ASSIGN		1359456	1					
ANR	1361378	CompoundStatement		282:3:10089:10127	1359456	1					
ANR	1361379	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op1 ) ;	891:3:28397:28435	1359456	0	True				
ANR	1361380	IdentifierDecl	* src = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361381	IdentifierDeclType	zend_op *		1359456	0					
ANR	1361382	Identifier	src		1359456	1					
ANR	1361383	AssignmentExpression	* src = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1361384	Identifier	src		1359456	0					
ANR	1361385	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1361386	Callee	VAR_SOURCE		1359456	0					
ANR	1361387	Identifier	VAR_SOURCE		1359456	0					
ANR	1361388	ArgumentList	opline -> op1		1359456	1					
ANR	1361389	Argument	opline -> op1		1359456	0					
ANR	1361390	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361391	Identifier	opline		1359456	0					
ANR	1361392	Identifier	op1		1359456	1					
ANR	1361393	ExpressionStatement	"COPY_NODE ( opline -> op1 , src -> op1 )"	892:3:28440:28472	1359456	1	True				
ANR	1361394	CallExpression	"COPY_NODE ( opline -> op1 , src -> op1 )"		1359456	0					
ANR	1361395	Callee	COPY_NODE		1359456	0					
ANR	1361396	Identifier	COPY_NODE		1359456	0					
ANR	1361397	ArgumentList	opline -> op1		1359456	1					
ANR	1361398	Argument	opline -> op1		1359456	0					
ANR	1361399	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361400	Identifier	opline		1359456	0					
ANR	1361401	Identifier	op1		1359456	1					
ANR	1361402	Argument	src -> op1		1359456	1					
ANR	1361403	PtrMemberAccess	src -> op1		1359456	0					
ANR	1361404	Identifier	src		1359456	0					
ANR	1361405	Identifier	op1		1359456	1					
ANR	1361406	ExpressionStatement	VAR_UNSET ( opline -> op1 )	894:3:28478:28500	1359456	2	True				
ANR	1361407	CallExpression	VAR_UNSET ( opline -> op1 )		1359456	0					
ANR	1361408	Callee	VAR_UNSET		1359456	0					
ANR	1361409	Identifier	VAR_UNSET		1359456	0					
ANR	1361410	ArgumentList	opline -> op1		1359456	1					
ANR	1361411	Argument	opline -> op1		1359456	0					
ANR	1361412	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361413	Identifier	opline		1359456	0					
ANR	1361414	Identifier	op1		1359456	1					
ANR	1361415	ExpressionStatement	MAKE_NOP ( src )	895:3:28505:28518	1359456	3	True				
ANR	1361416	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1361417	Callee	MAKE_NOP		1359456	0					
ANR	1361418	Identifier	MAKE_NOP		1359456	0					
ANR	1361419	ArgumentList	src		1359456	1					
ANR	1361420	Argument	src		1359456	0					
ANR	1361421	Identifier	src		1359456	0					
ANR	1361422	ContinueStatement	continue ;	896:3:28523:28531	1359456	4	True				
ANR	1361423	ElseStatement	else		1359456	0					
ANR	1361424	IfStatement	if ( last_op && opline -> opcode == ZEND_ECHO && last_op -> opcode == ZEND_ECHO && ZEND_OP1_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_DOUBLE && ZEND_OP1_TYPE ( last_op ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_DOUBLE )		1359456	0					
ANR	1361425	Condition	last_op && opline -> opcode == ZEND_ECHO && last_op -> opcode == ZEND_ECHO && ZEND_OP1_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_DOUBLE && ZEND_OP1_TYPE ( last_op ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_DOUBLE	897:13:28546:28819	1359456	0	True				
ANR	1361426	AndExpression	last_op && opline -> opcode == ZEND_ECHO && last_op -> opcode == ZEND_ECHO && ZEND_OP1_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_DOUBLE && ZEND_OP1_TYPE ( last_op ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_DOUBLE		1359456	0		&&			
ANR	1361427	Identifier	last_op		1359456	0					
ANR	1361428	AndExpression	opline -> opcode == ZEND_ECHO && last_op -> opcode == ZEND_ECHO && ZEND_OP1_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_DOUBLE && ZEND_OP1_TYPE ( last_op ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_DOUBLE		1359456	1		&&			
ANR	1361429	EqualityExpression	opline -> opcode == ZEND_ECHO		1359456	0		==			
ANR	1361430	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361431	Identifier	opline		1359456	0					
ANR	1361432	Identifier	opcode		1359456	1					
ANR	1361433	Identifier	ZEND_ECHO		1359456	1					
ANR	1361434	AndExpression	last_op -> opcode == ZEND_ECHO && ZEND_OP1_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_DOUBLE && ZEND_OP1_TYPE ( last_op ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_DOUBLE		1359456	1		&&			
ANR	1361435	EqualityExpression	last_op -> opcode == ZEND_ECHO		1359456	0		==			
ANR	1361436	PtrMemberAccess	last_op -> opcode		1359456	0					
ANR	1361437	Identifier	last_op		1359456	0					
ANR	1361438	Identifier	opcode		1359456	1					
ANR	1361439	Identifier	ZEND_ECHO		1359456	1					
ANR	1361440	AndExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_DOUBLE && ZEND_OP1_TYPE ( last_op ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_DOUBLE		1359456	1		&&			
ANR	1361441	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST		1359456	0		==			
ANR	1361442	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1361443	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1361444	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1361445	ArgumentList	opline		1359456	1					
ANR	1361446	Argument	opline		1359456	0					
ANR	1361447	Identifier	opline		1359456	0					
ANR	1361448	Identifier	IS_CONST		1359456	1					
ANR	1361449	AndExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_DOUBLE && ZEND_OP1_TYPE ( last_op ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_DOUBLE		1359456	1		&&			
ANR	1361450	EqualityExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_DOUBLE		1359456	0		!=			
ANR	1361451	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1361452	Callee	Z_TYPE		1359456	0					
ANR	1361453	Identifier	Z_TYPE		1359456	0					
ANR	1361454	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361455	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361456	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361457	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361458	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361459	ArgumentList	opline		1359456	1					
ANR	1361460	Argument	opline		1359456	0					
ANR	1361461	Identifier	opline		1359456	0					
ANR	1361462	Identifier	IS_DOUBLE		1359456	1					
ANR	1361463	AndExpression	ZEND_OP1_TYPE ( last_op ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_DOUBLE		1359456	1		&&			
ANR	1361464	EqualityExpression	ZEND_OP1_TYPE ( last_op ) == IS_CONST		1359456	0		==			
ANR	1361465	CallExpression	ZEND_OP1_TYPE ( last_op )		1359456	0					
ANR	1361466	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1361467	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1361468	ArgumentList	last_op		1359456	1					
ANR	1361469	Argument	last_op		1359456	0					
ANR	1361470	Identifier	last_op		1359456	0					
ANR	1361471	Identifier	IS_CONST		1359456	1					
ANR	1361472	EqualityExpression	Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_DOUBLE		1359456	1		!=			
ANR	1361473	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361474	Callee	Z_TYPE		1359456	0					
ANR	1361475	Identifier	Z_TYPE		1359456	0					
ANR	1361476	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361477	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361478	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361479	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361480	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361481	ArgumentList	last_op		1359456	1					
ANR	1361482	Argument	last_op		1359456	0					
ANR	1361483	Identifier	last_op		1359456	0					
ANR	1361484	Identifier	IS_DOUBLE		1359456	1					
ANR	1361485	CompoundStatement		298:3:10643:10657	1359456	1					
ANR	1361486	IdentifierDeclStatement	"int l , old_len ;"	907:3:28951:28965	1359456	0	True				
ANR	1361487	IdentifierDecl	l		1359456	0					
ANR	1361488	IdentifierDeclType	int		1359456	0					
ANR	1361489	Identifier	l		1359456	1					
ANR	1361490	IdentifierDecl	old_len		1359456	1					
ANR	1361491	IdentifierDeclType	int		1359456	0					
ANR	1361492	Identifier	old_len		1359456	1					
ANR	1361493	IfStatement	if ( Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_STRING )		1359456	1					
ANR	1361494	Condition	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_STRING	909:7:28975:29019	1359456	0	True				
ANR	1361495	EqualityExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) != IS_STRING		1359456	0		!=			
ANR	1361496	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1361497	Callee	Z_TYPE		1359456	0					
ANR	1361498	Identifier	Z_TYPE		1359456	0					
ANR	1361499	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361500	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361501	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361502	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361503	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361504	ArgumentList	opline		1359456	1					
ANR	1361505	Argument	opline		1359456	0					
ANR	1361506	Identifier	opline		1359456	0					
ANR	1361507	Identifier	IS_STRING		1359456	1					
ANR	1361508	CompoundStatement		300:54:10714:10714	1359456	1					
ANR	1361509	ExpressionStatement	convert_to_string_safe ( & ZEND_OP1_LITERAL ( opline ) )	910:4:29028:29077	1359456	0	True				
ANR	1361510	CallExpression	convert_to_string_safe ( & ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1361511	Callee	convert_to_string_safe		1359456	0					
ANR	1361512	Identifier	convert_to_string_safe		1359456	0					
ANR	1361513	ArgumentList	& ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361514	Argument	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361515	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361516	UnaryOperator	&		1359456	0					
ANR	1361517	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361518	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361519	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361520	ArgumentList	opline		1359456	1					
ANR	1361521	Argument	opline		1359456	0					
ANR	1361522	Identifier	opline		1359456	0					
ANR	1361523	IfStatement	if ( Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_STRING )		1359456	2					
ANR	1361524	Condition	Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_STRING	912:7:29091:29136	1359456	0	True				
ANR	1361525	EqualityExpression	Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) ) != IS_STRING		1359456	0		!=			
ANR	1361526	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361527	Callee	Z_TYPE		1359456	0					
ANR	1361528	Identifier	Z_TYPE		1359456	0					
ANR	1361529	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361530	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361531	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361532	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361533	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361534	ArgumentList	last_op		1359456	1					
ANR	1361535	Argument	last_op		1359456	0					
ANR	1361536	Identifier	last_op		1359456	0					
ANR	1361537	Identifier	IS_STRING		1359456	1					
ANR	1361538	CompoundStatement		303:55:10831:10831	1359456	1					
ANR	1361539	ExpressionStatement	convert_to_string_safe ( & ZEND_OP1_LITERAL ( last_op ) )	913:4:29145:29195	1359456	0	True				
ANR	1361540	CallExpression	convert_to_string_safe ( & ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361541	Callee	convert_to_string_safe		1359456	0					
ANR	1361542	Identifier	convert_to_string_safe		1359456	0					
ANR	1361543	ArgumentList	& ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361544	Argument	& ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361545	UnaryOperationExpression	& ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361546	UnaryOperator	&		1359456	0					
ANR	1361547	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361548	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361549	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361550	ArgumentList	last_op		1359456	1					
ANR	1361551	Argument	last_op		1359456	0					
ANR	1361552	Identifier	last_op		1359456	0					
ANR	1361553	ExpressionStatement	old_len = Z_STRLEN ( ZEND_OP1_LITERAL ( last_op ) )	915:3:29205:29250	1359456	3	True				
ANR	1361554	AssignmentExpression	old_len = Z_STRLEN ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0		=			
ANR	1361555	Identifier	old_len		1359456	0					
ANR	1361556	CallExpression	Z_STRLEN ( ZEND_OP1_LITERAL ( last_op ) )		1359456	1					
ANR	1361557	Callee	Z_STRLEN		1359456	0					
ANR	1361558	Identifier	Z_STRLEN		1359456	0					
ANR	1361559	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361560	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361561	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361562	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361563	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361564	ArgumentList	last_op		1359456	1					
ANR	1361565	Argument	last_op		1359456	0					
ANR	1361566	Identifier	last_op		1359456	0					
ANR	1361567	ExpressionStatement	l = old_len + Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) )	916:3:29255:29303	1359456	4	True				
ANR	1361568	AssignmentExpression	l = old_len + Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) )		1359456	0		=			
ANR	1361569	Identifier	l		1359456	0					
ANR	1361570	AdditiveExpression	old_len + Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) )		1359456	1		+			
ANR	1361571	Identifier	old_len		1359456	0					
ANR	1361572	CallExpression	Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) )		1359456	1					
ANR	1361573	Callee	Z_STRLEN		1359456	0					
ANR	1361574	Identifier	Z_STRLEN		1359456	0					
ANR	1361575	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361576	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361577	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361578	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361579	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361580	ArgumentList	opline		1359456	1					
ANR	1361581	Argument	opline		1359456	0					
ANR	1361582	Identifier	opline		1359456	0					
ANR	1361583	IfStatement	if ( ! Z_REFCOUNTED ( ZEND_OP1_LITERAL ( last_op ) ) )		1359456	5					
ANR	1361584	Condition	! Z_REFCOUNTED ( ZEND_OP1_LITERAL ( last_op ) )	917:7:29312:29351	1359456	0	True				
ANR	1361585	UnaryOperationExpression	! Z_REFCOUNTED ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361586	UnaryOperator	!		1359456	0					
ANR	1361587	CallExpression	Z_REFCOUNTED ( ZEND_OP1_LITERAL ( last_op ) )		1359456	1					
ANR	1361588	Callee	Z_REFCOUNTED		1359456	0					
ANR	1361589	Identifier	Z_REFCOUNTED		1359456	0					
ANR	1361590	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361591	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361592	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361593	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361594	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361595	ArgumentList	last_op		1359456	1					
ANR	1361596	Argument	last_op		1359456	0					
ANR	1361597	Identifier	last_op		1359456	0					
ANR	1361598	CompoundStatement		309:4:11052:11094	1359456	1					
ANR	1361599	IdentifierDeclStatement	"zend_string * tmp = zend_string_alloc ( l , 0 ) ;"	918:4:29360:29402	1359456	0	True				
ANR	1361600	IdentifierDecl	"* tmp = zend_string_alloc ( l , 0 )"		1359456	0					
ANR	1361601	IdentifierDeclType	zend_string *		1359456	0					
ANR	1361602	Identifier	tmp		1359456	1					
ANR	1361603	AssignmentExpression	"* tmp = zend_string_alloc ( l , 0 )"		1359456	2		=			
ANR	1361604	Identifier	tmp		1359456	0					
ANR	1361605	CallExpression	"zend_string_alloc ( l , 0 )"		1359456	1					
ANR	1361606	Callee	zend_string_alloc		1359456	0					
ANR	1361607	Identifier	zend_string_alloc		1359456	0					
ANR	1361608	ArgumentList	l		1359456	1					
ANR	1361609	Argument	l		1359456	0					
ANR	1361610	Identifier	l		1359456	0					
ANR	1361611	Argument	0		1359456	1					
ANR	1361612	PrimaryExpression	0		1359456	0					
ANR	1361613	ExpressionStatement	"memcpy ( ZSTR_VAL ( tmp ) , Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) , old_len )"	919:4:29408:29475	1359456	1	True				
ANR	1361614	CallExpression	"memcpy ( ZSTR_VAL ( tmp ) , Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) , old_len )"		1359456	0					
ANR	1361615	Callee	memcpy		1359456	0					
ANR	1361616	Identifier	memcpy		1359456	0					
ANR	1361617	ArgumentList	ZSTR_VAL ( tmp )		1359456	1					
ANR	1361618	Argument	ZSTR_VAL ( tmp )		1359456	0					
ANR	1361619	CallExpression	ZSTR_VAL ( tmp )		1359456	0					
ANR	1361620	Callee	ZSTR_VAL		1359456	0					
ANR	1361621	Identifier	ZSTR_VAL		1359456	0					
ANR	1361622	ArgumentList	tmp		1359456	1					
ANR	1361623	Argument	tmp		1359456	0					
ANR	1361624	Identifier	tmp		1359456	0					
ANR	1361625	Argument	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) )		1359456	1					
ANR	1361626	CallExpression	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361627	Callee	Z_STRVAL		1359456	0					
ANR	1361628	Identifier	Z_STRVAL		1359456	0					
ANR	1361629	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361630	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361631	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361632	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361633	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361634	ArgumentList	last_op		1359456	1					
ANR	1361635	Argument	last_op		1359456	0					
ANR	1361636	Identifier	last_op		1359456	0					
ANR	1361637	Argument	old_len		1359456	2					
ANR	1361638	Identifier	old_len		1359456	0					
ANR	1361639	ExpressionStatement	Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) = tmp	920:4:29481:29519	1359456	2	True				
ANR	1361640	AssignmentExpression	Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) = tmp		1359456	0		=			
ANR	1361641	CallExpression	Z_STR ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361642	Callee	Z_STR		1359456	0					
ANR	1361643	Identifier	Z_STR		1359456	0					
ANR	1361644	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361645	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361646	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361647	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361648	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361649	ArgumentList	last_op		1359456	1					
ANR	1361650	Argument	last_op		1359456	0					
ANR	1361651	Identifier	last_op		1359456	0					
ANR	1361652	Identifier	tmp		1359456	1					
ANR	1361653	ElseStatement	else		1359456	0					
ANR	1361654	CompoundStatement		312:10:11223:11223	1359456	0					
ANR	1361655	ExpressionStatement	"Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) = zend_string_extend ( Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) , l , 0 )"	922:4:29537:29630	1359456	0	True				
ANR	1361656	AssignmentExpression	"Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) = zend_string_extend ( Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) , l , 0 )"		1359456	0		=			
ANR	1361657	CallExpression	Z_STR ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361658	Callee	Z_STR		1359456	0					
ANR	1361659	Identifier	Z_STR		1359456	0					
ANR	1361660	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361661	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361662	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361663	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361664	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361665	ArgumentList	last_op		1359456	1					
ANR	1361666	Argument	last_op		1359456	0					
ANR	1361667	Identifier	last_op		1359456	0					
ANR	1361668	CallExpression	"zend_string_extend ( Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) , l , 0 )"		1359456	1					
ANR	1361669	Callee	zend_string_extend		1359456	0					
ANR	1361670	Identifier	zend_string_extend		1359456	0					
ANR	1361671	ArgumentList	Z_STR ( ZEND_OP1_LITERAL ( last_op ) )		1359456	1					
ANR	1361672	Argument	Z_STR ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361673	CallExpression	Z_STR ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361674	Callee	Z_STR		1359456	0					
ANR	1361675	Identifier	Z_STR		1359456	0					
ANR	1361676	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361677	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361678	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361679	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361680	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361681	ArgumentList	last_op		1359456	1					
ANR	1361682	Argument	last_op		1359456	0					
ANR	1361683	Identifier	last_op		1359456	0					
ANR	1361684	Argument	l		1359456	1					
ANR	1361685	Identifier	l		1359456	0					
ANR	1361686	Argument	0		1359456	2					
ANR	1361687	PrimaryExpression	0		1359456	0					
ANR	1361688	ExpressionStatement	Z_TYPE_INFO ( ZEND_OP1_LITERAL ( last_op ) ) = IS_STRING_EX	924:3:29640:29693	1359456	6	True				
ANR	1361689	AssignmentExpression	Z_TYPE_INFO ( ZEND_OP1_LITERAL ( last_op ) ) = IS_STRING_EX		1359456	0		=			
ANR	1361690	CallExpression	Z_TYPE_INFO ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361691	Callee	Z_TYPE_INFO		1359456	0					
ANR	1361692	Identifier	Z_TYPE_INFO		1359456	0					
ANR	1361693	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361694	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361695	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361696	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361697	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361698	ArgumentList	last_op		1359456	1					
ANR	1361699	Argument	last_op		1359456	0					
ANR	1361700	Identifier	last_op		1359456	0					
ANR	1361701	Identifier	IS_STRING_EX		1359456	1					
ANR	1361702	ExpressionStatement	"memcpy ( Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) + old_len , Z_STRVAL ( ZEND_OP1_LITERAL ( opline ) ) , Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) ) )"	925:3:29698:29823	1359456	7	True				
ANR	1361703	CallExpression	"memcpy ( Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) + old_len , Z_STRVAL ( ZEND_OP1_LITERAL ( opline ) ) , Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) ) )"		1359456	0					
ANR	1361704	Callee	memcpy		1359456	0					
ANR	1361705	Identifier	memcpy		1359456	0					
ANR	1361706	ArgumentList	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) + old_len		1359456	1					
ANR	1361707	Argument	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) + old_len		1359456	0					
ANR	1361708	AdditiveExpression	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) + old_len		1359456	0		+			
ANR	1361709	CallExpression	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361710	Callee	Z_STRVAL		1359456	0					
ANR	1361711	Identifier	Z_STRVAL		1359456	0					
ANR	1361712	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361713	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361714	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361715	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361716	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361717	ArgumentList	last_op		1359456	1					
ANR	1361718	Argument	last_op		1359456	0					
ANR	1361719	Identifier	last_op		1359456	0					
ANR	1361720	Identifier	old_len		1359456	1					
ANR	1361721	Argument	Z_STRVAL ( ZEND_OP1_LITERAL ( opline ) )		1359456	1					
ANR	1361722	CallExpression	Z_STRVAL ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1361723	Callee	Z_STRVAL		1359456	0					
ANR	1361724	Identifier	Z_STRVAL		1359456	0					
ANR	1361725	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361726	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361727	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361728	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361729	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361730	ArgumentList	opline		1359456	1					
ANR	1361731	Argument	opline		1359456	0					
ANR	1361732	Identifier	opline		1359456	0					
ANR	1361733	Argument	Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) )		1359456	2					
ANR	1361734	CallExpression	Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1361735	Callee	Z_STRLEN		1359456	0					
ANR	1361736	Identifier	Z_STRLEN		1359456	0					
ANR	1361737	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361738	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361739	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361740	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361741	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361742	ArgumentList	opline		1359456	1					
ANR	1361743	Argument	opline		1359456	0					
ANR	1361744	Identifier	opline		1359456	0					
ANR	1361745	ExpressionStatement	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) [ l ] = '\\0'	926:3:29828:29873	1359456	8	True				
ANR	1361746	AssignmentExpression	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) [ l ] = '\\0'		1359456	0		=			
ANR	1361747	ArrayIndexing	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) ) [ l ]		1359456	0					
ANR	1361748	CallExpression	Z_STRVAL ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361749	Callee	Z_STRVAL		1359456	0					
ANR	1361750	Identifier	Z_STRVAL		1359456	0					
ANR	1361751	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361752	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361753	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361754	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361755	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361756	ArgumentList	last_op		1359456	1					
ANR	1361757	Argument	last_op		1359456	0					
ANR	1361758	Identifier	last_op		1359456	0					
ANR	1361759	Identifier	l		1359456	1					
ANR	1361760	PrimaryExpression	'\\0'		1359456	1					
ANR	1361761	ExpressionStatement	zval_dtor ( & ZEND_OP1_LITERAL ( opline ) )	927:3:29878:29914	1359456	9	True				
ANR	1361762	CallExpression	zval_dtor ( & ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1361763	Callee	zval_dtor		1359456	0					
ANR	1361764	Identifier	zval_dtor		1359456	0					
ANR	1361765	ArgumentList	& ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361766	Argument	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361767	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361768	UnaryOperator	&		1359456	0					
ANR	1361769	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361770	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361771	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361772	ArgumentList	opline		1359456	1					
ANR	1361773	Argument	opline		1359456	0					
ANR	1361774	Identifier	opline		1359456	0					
ANR	1361775	ExpressionStatement	Z_STR ( ZEND_OP1_LITERAL ( opline ) ) = zend_new_interned_string ( Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) )	928:3:29919:30011	1359456	10	True				
ANR	1361776	AssignmentExpression	Z_STR ( ZEND_OP1_LITERAL ( opline ) ) = zend_new_interned_string ( Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) )		1359456	0		=			
ANR	1361777	CallExpression	Z_STR ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1361778	Callee	Z_STR		1359456	0					
ANR	1361779	Identifier	Z_STR		1359456	0					
ANR	1361780	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361781	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361782	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361783	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361784	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361785	ArgumentList	opline		1359456	1					
ANR	1361786	Argument	opline		1359456	0					
ANR	1361787	Identifier	opline		1359456	0					
ANR	1361788	CallExpression	zend_new_interned_string ( Z_STR ( ZEND_OP1_LITERAL ( last_op ) ) )		1359456	1					
ANR	1361789	Callee	zend_new_interned_string		1359456	0					
ANR	1361790	Identifier	zend_new_interned_string		1359456	0					
ANR	1361791	ArgumentList	Z_STR ( ZEND_OP1_LITERAL ( last_op ) )		1359456	1					
ANR	1361792	Argument	Z_STR ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361793	CallExpression	Z_STR ( ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361794	Callee	Z_STR		1359456	0					
ANR	1361795	Identifier	Z_STR		1359456	0					
ANR	1361796	ArgumentList	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361797	Argument	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361798	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361799	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361800	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361801	ArgumentList	last_op		1359456	1					
ANR	1361802	Argument	last_op		1359456	0					
ANR	1361803	Identifier	last_op		1359456	0					
ANR	1361804	IfStatement	if ( ! Z_REFCOUNTED ( ZEND_OP1_LITERAL ( opline ) ) )		1359456	11					
ANR	1361805	Condition	! Z_REFCOUNTED ( ZEND_OP1_LITERAL ( opline ) )	929:7:30020:30058	1359456	0	True				
ANR	1361806	UnaryOperationExpression	! Z_REFCOUNTED ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1361807	UnaryOperator	!		1359456	0					
ANR	1361808	CallExpression	Z_REFCOUNTED ( ZEND_OP1_LITERAL ( opline ) )		1359456	1					
ANR	1361809	Callee	Z_REFCOUNTED		1359456	0					
ANR	1361810	Identifier	Z_REFCOUNTED		1359456	0					
ANR	1361811	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361812	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361813	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361814	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361815	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361816	ArgumentList	opline		1359456	1					
ANR	1361817	Argument	opline		1359456	0					
ANR	1361818	Identifier	opline		1359456	0					
ANR	1361819	CompoundStatement		320:48:11753:11753	1359456	1					
ANR	1361820	ExpressionStatement	Z_TYPE_FLAGS ( ZEND_OP1_LITERAL ( opline ) ) &= ~ ( IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE )	930:4:30067:30150	1359456	0	True				
ANR	1361821	AssignmentExpression	Z_TYPE_FLAGS ( ZEND_OP1_LITERAL ( opline ) ) &= ~ ( IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE )		1359456	0		&=			
ANR	1361822	CallExpression	Z_TYPE_FLAGS ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1361823	Callee	Z_TYPE_FLAGS		1359456	0					
ANR	1361824	Identifier	Z_TYPE_FLAGS		1359456	0					
ANR	1361825	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1361826	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361827	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1361828	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361829	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361830	ArgumentList	opline		1359456	1					
ANR	1361831	Argument	opline		1359456	0					
ANR	1361832	Identifier	opline		1359456	0					
ANR	1361833	UnaryOperationExpression	~ ( IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE )		1359456	1					
ANR	1361834	UnaryOperator	~		1359456	0					
ANR	1361835	InclusiveOrExpression	IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE		1359456	1		|			
ANR	1361836	Identifier	IS_TYPE_REFCOUNTED		1359456	0					
ANR	1361837	Identifier	IS_TYPE_COPYABLE		1359456	1					
ANR	1361838	ExpressionStatement	ZVAL_NULL ( & ZEND_OP1_LITERAL ( last_op ) )	932:3:30160:30197	1359456	12	True				
ANR	1361839	CallExpression	ZVAL_NULL ( & ZEND_OP1_LITERAL ( last_op ) )		1359456	0					
ANR	1361840	Callee	ZVAL_NULL		1359456	0					
ANR	1361841	Identifier	ZVAL_NULL		1359456	0					
ANR	1361842	ArgumentList	& ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361843	Argument	& ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361844	UnaryOperationExpression	& ZEND_OP1_LITERAL ( last_op )		1359456	0					
ANR	1361845	UnaryOperator	&		1359456	0					
ANR	1361846	CallExpression	ZEND_OP1_LITERAL ( last_op )		1359456	1					
ANR	1361847	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1361848	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1361849	ArgumentList	last_op		1359456	1					
ANR	1361850	Argument	last_op		1359456	0					
ANR	1361851	Identifier	last_op		1359456	0					
ANR	1361852	ExpressionStatement	MAKE_NOP ( last_op )	933:3:30202:30219	1359456	13	True				
ANR	1361853	CallExpression	MAKE_NOP ( last_op )		1359456	0					
ANR	1361854	Callee	MAKE_NOP		1359456	0					
ANR	1361855	Identifier	MAKE_NOP		1359456	0					
ANR	1361856	ArgumentList	last_op		1359456	1					
ANR	1361857	Argument	last_op		1359456	0					
ANR	1361858	Identifier	last_op		1359456	0					
ANR	1361859	ElseStatement	else		1359456	0					
ANR	1361860	IfStatement	if ( ( opline -> opcode == ZEND_CONCAT ) && ZEND_OP2_TYPE ( opline ) == IS_CONST && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT ) && ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var == ZEND_OP1 ( opline ) . var )		1359456	0					
ANR	1361861	Condition	( opline -> opcode == ZEND_CONCAT ) && ZEND_OP2_TYPE ( opline ) == IS_CONST && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT ) && ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var == ZEND_OP1 ( opline ) . var	934:13:30234:30639	1359456	0	True				
ANR	1361862	AndExpression	( opline -> opcode == ZEND_CONCAT ) && ZEND_OP2_TYPE ( opline ) == IS_CONST && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT ) && ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var == ZEND_OP1 ( opline ) . var		1359456	0		&&			
ANR	1361863	EqualityExpression	opline -> opcode == ZEND_CONCAT		1359456	0		==			
ANR	1361864	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1361865	Identifier	opline		1359456	0					
ANR	1361866	Identifier	opcode		1359456	1					
ANR	1361867	Identifier	ZEND_CONCAT		1359456	1					
ANR	1361868	AndExpression	ZEND_OP2_TYPE ( opline ) == IS_CONST && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT ) && ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var == ZEND_OP1 ( opline ) . var		1359456	1		&&			
ANR	1361869	EqualityExpression	ZEND_OP2_TYPE ( opline ) == IS_CONST		1359456	0		==			
ANR	1361870	CallExpression	ZEND_OP2_TYPE ( opline )		1359456	0					
ANR	1361871	Callee	ZEND_OP2_TYPE		1359456	0					
ANR	1361872	Identifier	ZEND_OP2_TYPE		1359456	0					
ANR	1361873	ArgumentList	opline		1359456	1					
ANR	1361874	Argument	opline		1359456	0					
ANR	1361875	Identifier	opline		1359456	0					
ANR	1361876	Identifier	IS_CONST		1359456	1					
ANR	1361877	AndExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT ) && ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var == ZEND_OP1 ( opline ) . var		1359456	1		&&			
ANR	1361878	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		1359456	0		==			
ANR	1361879	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1361880	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1361881	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1361882	ArgumentList	opline		1359456	1					
ANR	1361883	Argument	opline		1359456	0					
ANR	1361884	Identifier	opline		1359456	0					
ANR	1361885	Identifier	IS_TMP_VAR		1359456	1					
ANR	1361886	AndExpression	VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT ) && ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var == ZEND_OP1 ( opline ) . var		1359456	1		&&			
ANR	1361887	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361888	Callee	VAR_SOURCE		1359456	0					
ANR	1361889	Identifier	VAR_SOURCE		1359456	0					
ANR	1361890	ArgumentList	opline -> op1		1359456	1					
ANR	1361891	Argument	opline -> op1		1359456	0					
ANR	1361892	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361893	Identifier	opline		1359456	0					
ANR	1361894	Identifier	op1		1359456	1					
ANR	1361895	AndExpression	( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT ) && ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var == ZEND_OP1 ( opline ) . var		1359456	1		&&			
ANR	1361896	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT		1359456	0		||			
ANR	1361897	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CONCAT		1359456	0		==			
ANR	1361898	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1361899	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361900	Callee	VAR_SOURCE		1359456	0					
ANR	1361901	Identifier	VAR_SOURCE		1359456	0					
ANR	1361902	ArgumentList	opline -> op1		1359456	1					
ANR	1361903	Argument	opline -> op1		1359456	0					
ANR	1361904	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361905	Identifier	opline		1359456	0					
ANR	1361906	Identifier	op1		1359456	1					
ANR	1361907	Identifier	opcode		1359456	1					
ANR	1361908	Identifier	ZEND_CONCAT		1359456	1					
ANR	1361909	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT		1359456	1		==			
ANR	1361910	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1361911	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361912	Callee	VAR_SOURCE		1359456	0					
ANR	1361913	Identifier	VAR_SOURCE		1359456	0					
ANR	1361914	ArgumentList	opline -> op1		1359456	1					
ANR	1361915	Argument	opline -> op1		1359456	0					
ANR	1361916	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361917	Identifier	opline		1359456	0					
ANR	1361918	Identifier	op1		1359456	1					
ANR	1361919	Identifier	opcode		1359456	1					
ANR	1361920	Identifier	ZEND_FAST_CONCAT		1359456	1					
ANR	1361921	AndExpression	ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST && ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var == ZEND_OP1 ( opline ) . var		1359456	1		&&			
ANR	1361922	EqualityExpression	ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) ) == IS_CONST		1359456	0		==			
ANR	1361923	CallExpression	ZEND_OP2_TYPE ( VAR_SOURCE ( opline -> op1 ) )		1359456	0					
ANR	1361924	Callee	ZEND_OP2_TYPE		1359456	0					
ANR	1361925	Identifier	ZEND_OP2_TYPE		1359456	0					
ANR	1361926	ArgumentList	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1361927	Argument	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361928	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361929	Callee	VAR_SOURCE		1359456	0					
ANR	1361930	Identifier	VAR_SOURCE		1359456	0					
ANR	1361931	ArgumentList	opline -> op1		1359456	1					
ANR	1361932	Argument	opline -> op1		1359456	0					
ANR	1361933	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361934	Identifier	opline		1359456	0					
ANR	1361935	Identifier	op1		1359456	1					
ANR	1361936	Identifier	IS_CONST		1359456	1					
ANR	1361937	EqualityExpression	ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var == ZEND_OP1 ( opline ) . var		1359456	1		==			
ANR	1361938	MemberAccess	ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var		1359456	0					
ANR	1361939	CallExpression	ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) )		1359456	0					
ANR	1361940	Callee	ZEND_RESULT		1359456	0					
ANR	1361941	Identifier	ZEND_RESULT		1359456	0					
ANR	1361942	ArgumentList	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1361943	Argument	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361944	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361945	Callee	VAR_SOURCE		1359456	0					
ANR	1361946	Identifier	VAR_SOURCE		1359456	0					
ANR	1361947	ArgumentList	opline -> op1		1359456	1					
ANR	1361948	Argument	opline -> op1		1359456	0					
ANR	1361949	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361950	Identifier	opline		1359456	0					
ANR	1361951	Identifier	op1		1359456	1					
ANR	1361952	Identifier	var		1359456	1					
ANR	1361953	MemberAccess	ZEND_OP1 ( opline ) . var		1359456	1					
ANR	1361954	CallExpression	ZEND_OP1 ( opline )		1359456	0					
ANR	1361955	Callee	ZEND_OP1		1359456	0					
ANR	1361956	Identifier	ZEND_OP1		1359456	0					
ANR	1361957	ArgumentList	opline		1359456	1					
ANR	1361958	Argument	opline		1359456	0					
ANR	1361959	Identifier	opline		1359456	0					
ANR	1361960	Identifier	var		1359456	1					
ANR	1361961	CompoundStatement		335:3:12440:12454	1359456	1					
ANR	1361962	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op1 ) ;	943:3:30705:30743	1359456	0	True				
ANR	1361963	IdentifierDecl	* src = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1361964	IdentifierDeclType	zend_op *		1359456	0					
ANR	1361965	Identifier	src		1359456	1					
ANR	1361966	AssignmentExpression	* src = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1361967	Identifier	src		1359456	0					
ANR	1361968	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1361969	Callee	VAR_SOURCE		1359456	0					
ANR	1361970	Identifier	VAR_SOURCE		1359456	0					
ANR	1361971	ArgumentList	opline -> op1		1359456	1					
ANR	1361972	Argument	opline -> op1		1359456	0					
ANR	1361973	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1361974	Identifier	opline		1359456	0					
ANR	1361975	Identifier	op1		1359456	1					
ANR	1361976	IdentifierDeclStatement	"int l , old_len ;"	944:3:30748:30762	1359456	1	True				
ANR	1361977	IdentifierDecl	l		1359456	0					
ANR	1361978	IdentifierDeclType	int		1359456	0					
ANR	1361979	Identifier	l		1359456	1					
ANR	1361980	IdentifierDecl	old_len		1359456	1					
ANR	1361981	IdentifierDeclType	int		1359456	0					
ANR	1361982	Identifier	old_len		1359456	1					
ANR	1361983	IfStatement	if ( Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) != IS_STRING )		1359456	2					
ANR	1361984	Condition	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) != IS_STRING	946:7:30772:30816	1359456	0	True				
ANR	1361985	EqualityExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) != IS_STRING		1359456	0		!=			
ANR	1361986	CallExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1361987	Callee	Z_TYPE		1359456	0					
ANR	1361988	Identifier	Z_TYPE		1359456	0					
ANR	1361989	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1361990	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1361991	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1361992	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1361993	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1361994	ArgumentList	opline		1359456	1					
ANR	1361995	Argument	opline		1359456	0					
ANR	1361996	Identifier	opline		1359456	0					
ANR	1361997	Identifier	IS_STRING		1359456	1					
ANR	1361998	CompoundStatement		337:54:12511:12511	1359456	1					
ANR	1361999	ExpressionStatement	convert_to_string_safe ( & ZEND_OP2_LITERAL ( opline ) )	947:4:30825:30874	1359456	0	True				
ANR	1362000	CallExpression	convert_to_string_safe ( & ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362001	Callee	convert_to_string_safe		1359456	0					
ANR	1362002	Identifier	convert_to_string_safe		1359456	0					
ANR	1362003	ArgumentList	& ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362004	Argument	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362005	UnaryOperationExpression	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362006	UnaryOperator	&		1359456	0					
ANR	1362007	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362008	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362009	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362010	ArgumentList	opline		1359456	1					
ANR	1362011	Argument	opline		1359456	0					
ANR	1362012	Identifier	opline		1359456	0					
ANR	1362013	IfStatement	if ( Z_TYPE ( ZEND_OP2_LITERAL ( src ) ) != IS_STRING )		1359456	3					
ANR	1362014	Condition	Z_TYPE ( ZEND_OP2_LITERAL ( src ) ) != IS_STRING	949:7:30888:30929	1359456	0	True				
ANR	1362015	EqualityExpression	Z_TYPE ( ZEND_OP2_LITERAL ( src ) ) != IS_STRING		1359456	0		!=			
ANR	1362016	CallExpression	Z_TYPE ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362017	Callee	Z_TYPE		1359456	0					
ANR	1362018	Identifier	Z_TYPE		1359456	0					
ANR	1362019	ArgumentList	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362020	Argument	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362021	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362022	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362023	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362024	ArgumentList	src		1359456	1					
ANR	1362025	Argument	src		1359456	0					
ANR	1362026	Identifier	src		1359456	0					
ANR	1362027	Identifier	IS_STRING		1359456	1					
ANR	1362028	CompoundStatement		340:51:12624:12624	1359456	1					
ANR	1362029	ExpressionStatement	convert_to_string_safe ( & ZEND_OP2_LITERAL ( src ) )	950:4:30938:30984	1359456	0	True				
ANR	1362030	CallExpression	convert_to_string_safe ( & ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362031	Callee	convert_to_string_safe		1359456	0					
ANR	1362032	Identifier	convert_to_string_safe		1359456	0					
ANR	1362033	ArgumentList	& ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362034	Argument	& ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362035	UnaryOperationExpression	& ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362036	UnaryOperator	&		1359456	0					
ANR	1362037	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362038	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362039	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362040	ArgumentList	src		1359456	1					
ANR	1362041	Argument	src		1359456	0					
ANR	1362042	Identifier	src		1359456	0					
ANR	1362043	ExpressionStatement	VAR_UNSET ( opline -> op1 )	953:3:30995:31017	1359456	4	True				
ANR	1362044	CallExpression	VAR_UNSET ( opline -> op1 )		1359456	0					
ANR	1362045	Callee	VAR_UNSET		1359456	0					
ANR	1362046	Identifier	VAR_UNSET		1359456	0					
ANR	1362047	ArgumentList	opline -> op1		1359456	1					
ANR	1362048	Argument	opline -> op1		1359456	0					
ANR	1362049	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1362050	Identifier	opline		1359456	0					
ANR	1362051	Identifier	op1		1359456	1					
ANR	1362052	ExpressionStatement	"COPY_NODE ( opline -> op1 , src -> op1 )"	954:3:31022:31054	1359456	5	True				
ANR	1362053	CallExpression	"COPY_NODE ( opline -> op1 , src -> op1 )"		1359456	0					
ANR	1362054	Callee	COPY_NODE		1359456	0					
ANR	1362055	Identifier	COPY_NODE		1359456	0					
ANR	1362056	ArgumentList	opline -> op1		1359456	1					
ANR	1362057	Argument	opline -> op1		1359456	0					
ANR	1362058	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1362059	Identifier	opline		1359456	0					
ANR	1362060	Identifier	op1		1359456	1					
ANR	1362061	Argument	src -> op1		1359456	1					
ANR	1362062	PtrMemberAccess	src -> op1		1359456	0					
ANR	1362063	Identifier	src		1359456	0					
ANR	1362064	Identifier	op1		1359456	1					
ANR	1362065	ExpressionStatement	old_len = Z_STRLEN ( ZEND_OP2_LITERAL ( src ) )	955:3:31059:31100	1359456	6	True				
ANR	1362066	AssignmentExpression	old_len = Z_STRLEN ( ZEND_OP2_LITERAL ( src ) )		1359456	0		=			
ANR	1362067	Identifier	old_len		1359456	0					
ANR	1362068	CallExpression	Z_STRLEN ( ZEND_OP2_LITERAL ( src ) )		1359456	1					
ANR	1362069	Callee	Z_STRLEN		1359456	0					
ANR	1362070	Identifier	Z_STRLEN		1359456	0					
ANR	1362071	ArgumentList	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362072	Argument	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362073	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362074	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362075	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362076	ArgumentList	src		1359456	1					
ANR	1362077	Argument	src		1359456	0					
ANR	1362078	Identifier	src		1359456	0					
ANR	1362079	ExpressionStatement	l = old_len + Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) )	956:3:31105:31153	1359456	7	True				
ANR	1362080	AssignmentExpression	l = old_len + Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) )		1359456	0		=			
ANR	1362081	Identifier	l		1359456	0					
ANR	1362082	AdditiveExpression	old_len + Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) )		1359456	1		+			
ANR	1362083	Identifier	old_len		1359456	0					
ANR	1362084	CallExpression	Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) )		1359456	1					
ANR	1362085	Callee	Z_STRLEN		1359456	0					
ANR	1362086	Identifier	Z_STRLEN		1359456	0					
ANR	1362087	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362088	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362089	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362090	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362091	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362092	ArgumentList	opline		1359456	1					
ANR	1362093	Argument	opline		1359456	0					
ANR	1362094	Identifier	opline		1359456	0					
ANR	1362095	IfStatement	if ( ! Z_REFCOUNTED ( ZEND_OP2_LITERAL ( src ) ) )		1359456	8					
ANR	1362096	Condition	! Z_REFCOUNTED ( ZEND_OP2_LITERAL ( src ) )	957:7:31162:31197	1359456	0	True				
ANR	1362097	UnaryOperationExpression	! Z_REFCOUNTED ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362098	UnaryOperator	!		1359456	0					
ANR	1362099	CallExpression	Z_REFCOUNTED ( ZEND_OP2_LITERAL ( src ) )		1359456	1					
ANR	1362100	Callee	Z_REFCOUNTED		1359456	0					
ANR	1362101	Identifier	Z_REFCOUNTED		1359456	0					
ANR	1362102	ArgumentList	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362103	Argument	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362104	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362105	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362106	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362107	ArgumentList	src		1359456	1					
ANR	1362108	Argument	src		1359456	0					
ANR	1362109	Identifier	src		1359456	0					
ANR	1362110	CompoundStatement		349:4:12898:12940	1359456	1					
ANR	1362111	IdentifierDeclStatement	"zend_string * tmp = zend_string_alloc ( l , 0 ) ;"	958:4:31206:31248	1359456	0	True				
ANR	1362112	IdentifierDecl	"* tmp = zend_string_alloc ( l , 0 )"		1359456	0					
ANR	1362113	IdentifierDeclType	zend_string *		1359456	0					
ANR	1362114	Identifier	tmp		1359456	1					
ANR	1362115	AssignmentExpression	"* tmp = zend_string_alloc ( l , 0 )"		1359456	2		=			
ANR	1362116	Identifier	tmp		1359456	0					
ANR	1362117	CallExpression	"zend_string_alloc ( l , 0 )"		1359456	1					
ANR	1362118	Callee	zend_string_alloc		1359456	0					
ANR	1362119	Identifier	zend_string_alloc		1359456	0					
ANR	1362120	ArgumentList	l		1359456	1					
ANR	1362121	Argument	l		1359456	0					
ANR	1362122	Identifier	l		1359456	0					
ANR	1362123	Argument	0		1359456	1					
ANR	1362124	PrimaryExpression	0		1359456	0					
ANR	1362125	ExpressionStatement	"memcpy ( ZSTR_VAL ( tmp ) , Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) , old_len )"	959:4:31254:31317	1359456	1	True				
ANR	1362126	CallExpression	"memcpy ( ZSTR_VAL ( tmp ) , Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) , old_len )"		1359456	0					
ANR	1362127	Callee	memcpy		1359456	0					
ANR	1362128	Identifier	memcpy		1359456	0					
ANR	1362129	ArgumentList	ZSTR_VAL ( tmp )		1359456	1					
ANR	1362130	Argument	ZSTR_VAL ( tmp )		1359456	0					
ANR	1362131	CallExpression	ZSTR_VAL ( tmp )		1359456	0					
ANR	1362132	Callee	ZSTR_VAL		1359456	0					
ANR	1362133	Identifier	ZSTR_VAL		1359456	0					
ANR	1362134	ArgumentList	tmp		1359456	1					
ANR	1362135	Argument	tmp		1359456	0					
ANR	1362136	Identifier	tmp		1359456	0					
ANR	1362137	Argument	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) )		1359456	1					
ANR	1362138	CallExpression	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362139	Callee	Z_STRVAL		1359456	0					
ANR	1362140	Identifier	Z_STRVAL		1359456	0					
ANR	1362141	ArgumentList	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362142	Argument	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362143	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362144	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362145	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362146	ArgumentList	src		1359456	1					
ANR	1362147	Argument	src		1359456	0					
ANR	1362148	Identifier	src		1359456	0					
ANR	1362149	Argument	old_len		1359456	2					
ANR	1362150	Identifier	old_len		1359456	0					
ANR	1362151	ExpressionStatement	Z_STR ( ZEND_OP2_LITERAL ( last_op ) ) = tmp	960:4:31323:31361	1359456	2	True				
ANR	1362152	AssignmentExpression	Z_STR ( ZEND_OP2_LITERAL ( last_op ) ) = tmp		1359456	0		=			
ANR	1362153	CallExpression	Z_STR ( ZEND_OP2_LITERAL ( last_op ) )		1359456	0					
ANR	1362154	Callee	Z_STR		1359456	0					
ANR	1362155	Identifier	Z_STR		1359456	0					
ANR	1362156	ArgumentList	ZEND_OP2_LITERAL ( last_op )		1359456	1					
ANR	1362157	Argument	ZEND_OP2_LITERAL ( last_op )		1359456	0					
ANR	1362158	CallExpression	ZEND_OP2_LITERAL ( last_op )		1359456	0					
ANR	1362159	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362160	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362161	ArgumentList	last_op		1359456	1					
ANR	1362162	Argument	last_op		1359456	0					
ANR	1362163	Identifier	last_op		1359456	0					
ANR	1362164	Identifier	tmp		1359456	1					
ANR	1362165	ElseStatement	else		1359456	0					
ANR	1362166	CompoundStatement		352:10:13065:13065	1359456	0					
ANR	1362167	ExpressionStatement	"Z_STR ( ZEND_OP2_LITERAL ( src ) ) = zend_string_extend ( Z_STR ( ZEND_OP2_LITERAL ( src ) ) , l , 0 )"	962:4:31379:31464	1359456	0	True				
ANR	1362168	AssignmentExpression	"Z_STR ( ZEND_OP2_LITERAL ( src ) ) = zend_string_extend ( Z_STR ( ZEND_OP2_LITERAL ( src ) ) , l , 0 )"		1359456	0		=			
ANR	1362169	CallExpression	Z_STR ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362170	Callee	Z_STR		1359456	0					
ANR	1362171	Identifier	Z_STR		1359456	0					
ANR	1362172	ArgumentList	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362173	Argument	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362174	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362175	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362176	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362177	ArgumentList	src		1359456	1					
ANR	1362178	Argument	src		1359456	0					
ANR	1362179	Identifier	src		1359456	0					
ANR	1362180	CallExpression	"zend_string_extend ( Z_STR ( ZEND_OP2_LITERAL ( src ) ) , l , 0 )"		1359456	1					
ANR	1362181	Callee	zend_string_extend		1359456	0					
ANR	1362182	Identifier	zend_string_extend		1359456	0					
ANR	1362183	ArgumentList	Z_STR ( ZEND_OP2_LITERAL ( src ) )		1359456	1					
ANR	1362184	Argument	Z_STR ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362185	CallExpression	Z_STR ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362186	Callee	Z_STR		1359456	0					
ANR	1362187	Identifier	Z_STR		1359456	0					
ANR	1362188	ArgumentList	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362189	Argument	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362190	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362191	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362192	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362193	ArgumentList	src		1359456	1					
ANR	1362194	Argument	src		1359456	0					
ANR	1362195	Identifier	src		1359456	0					
ANR	1362196	Argument	l		1359456	1					
ANR	1362197	Identifier	l		1359456	0					
ANR	1362198	Argument	0		1359456	2					
ANR	1362199	PrimaryExpression	0		1359456	0					
ANR	1362200	ExpressionStatement	Z_TYPE_INFO ( ZEND_OP2_LITERAL ( last_op ) ) = IS_STRING_EX	964:3:31474:31527	1359456	9	True				
ANR	1362201	AssignmentExpression	Z_TYPE_INFO ( ZEND_OP2_LITERAL ( last_op ) ) = IS_STRING_EX		1359456	0		=			
ANR	1362202	CallExpression	Z_TYPE_INFO ( ZEND_OP2_LITERAL ( last_op ) )		1359456	0					
ANR	1362203	Callee	Z_TYPE_INFO		1359456	0					
ANR	1362204	Identifier	Z_TYPE_INFO		1359456	0					
ANR	1362205	ArgumentList	ZEND_OP2_LITERAL ( last_op )		1359456	1					
ANR	1362206	Argument	ZEND_OP2_LITERAL ( last_op )		1359456	0					
ANR	1362207	CallExpression	ZEND_OP2_LITERAL ( last_op )		1359456	0					
ANR	1362208	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362209	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362210	ArgumentList	last_op		1359456	1					
ANR	1362211	Argument	last_op		1359456	0					
ANR	1362212	Identifier	last_op		1359456	0					
ANR	1362213	Identifier	IS_STRING_EX		1359456	1					
ANR	1362214	ExpressionStatement	"memcpy ( Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) + old_len , Z_STRVAL ( ZEND_OP2_LITERAL ( opline ) ) , Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) ) )"	965:3:31532:31653	1359456	10	True				
ANR	1362215	CallExpression	"memcpy ( Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) + old_len , Z_STRVAL ( ZEND_OP2_LITERAL ( opline ) ) , Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) ) )"		1359456	0					
ANR	1362216	Callee	memcpy		1359456	0					
ANR	1362217	Identifier	memcpy		1359456	0					
ANR	1362218	ArgumentList	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) + old_len		1359456	1					
ANR	1362219	Argument	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) + old_len		1359456	0					
ANR	1362220	AdditiveExpression	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) + old_len		1359456	0		+			
ANR	1362221	CallExpression	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362222	Callee	Z_STRVAL		1359456	0					
ANR	1362223	Identifier	Z_STRVAL		1359456	0					
ANR	1362224	ArgumentList	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362225	Argument	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362226	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362227	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362228	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362229	ArgumentList	src		1359456	1					
ANR	1362230	Argument	src		1359456	0					
ANR	1362231	Identifier	src		1359456	0					
ANR	1362232	Identifier	old_len		1359456	1					
ANR	1362233	Argument	Z_STRVAL ( ZEND_OP2_LITERAL ( opline ) )		1359456	1					
ANR	1362234	CallExpression	Z_STRVAL ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362235	Callee	Z_STRVAL		1359456	0					
ANR	1362236	Identifier	Z_STRVAL		1359456	0					
ANR	1362237	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362238	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362239	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362240	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362241	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362242	ArgumentList	opline		1359456	1					
ANR	1362243	Argument	opline		1359456	0					
ANR	1362244	Identifier	opline		1359456	0					
ANR	1362245	Argument	Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) )		1359456	2					
ANR	1362246	CallExpression	Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362247	Callee	Z_STRLEN		1359456	0					
ANR	1362248	Identifier	Z_STRLEN		1359456	0					
ANR	1362249	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362250	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362251	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362252	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362253	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362254	ArgumentList	opline		1359456	1					
ANR	1362255	Argument	opline		1359456	0					
ANR	1362256	Identifier	opline		1359456	0					
ANR	1362257	ExpressionStatement	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) [ l ] = '\\0'	966:3:31658:31699	1359456	11	True				
ANR	1362258	AssignmentExpression	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) [ l ] = '\\0'		1359456	0		=			
ANR	1362259	ArrayIndexing	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) ) [ l ]		1359456	0					
ANR	1362260	CallExpression	Z_STRVAL ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362261	Callee	Z_STRVAL		1359456	0					
ANR	1362262	Identifier	Z_STRVAL		1359456	0					
ANR	1362263	ArgumentList	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362264	Argument	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362265	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362266	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362267	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362268	ArgumentList	src		1359456	1					
ANR	1362269	Argument	src		1359456	0					
ANR	1362270	Identifier	src		1359456	0					
ANR	1362271	Identifier	l		1359456	1					
ANR	1362272	PrimaryExpression	'\\0'		1359456	1					
ANR	1362273	ExpressionStatement	zend_string_release ( Z_STR ( ZEND_OP2_LITERAL ( opline ) ) )	967:3:31704:31756	1359456	12	True				
ANR	1362274	CallExpression	zend_string_release ( Z_STR ( ZEND_OP2_LITERAL ( opline ) ) )		1359456	0					
ANR	1362275	Callee	zend_string_release		1359456	0					
ANR	1362276	Identifier	zend_string_release		1359456	0					
ANR	1362277	ArgumentList	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		1359456	1					
ANR	1362278	Argument	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362279	CallExpression	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362280	Callee	Z_STR		1359456	0					
ANR	1362281	Identifier	Z_STR		1359456	0					
ANR	1362282	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362283	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362284	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362285	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362286	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362287	ArgumentList	opline		1359456	1					
ANR	1362288	Argument	opline		1359456	0					
ANR	1362289	Identifier	opline		1359456	0					
ANR	1362290	ExpressionStatement	Z_STR ( ZEND_OP2_LITERAL ( opline ) ) = zend_new_interned_string ( Z_STR ( ZEND_OP2_LITERAL ( src ) ) )	968:3:31761:31849	1359456	13	True				
ANR	1362291	AssignmentExpression	Z_STR ( ZEND_OP2_LITERAL ( opline ) ) = zend_new_interned_string ( Z_STR ( ZEND_OP2_LITERAL ( src ) ) )		1359456	0		=			
ANR	1362292	CallExpression	Z_STR ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362293	Callee	Z_STR		1359456	0					
ANR	1362294	Identifier	Z_STR		1359456	0					
ANR	1362295	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362296	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362297	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362298	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362299	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362300	ArgumentList	opline		1359456	1					
ANR	1362301	Argument	opline		1359456	0					
ANR	1362302	Identifier	opline		1359456	0					
ANR	1362303	CallExpression	zend_new_interned_string ( Z_STR ( ZEND_OP2_LITERAL ( src ) ) )		1359456	1					
ANR	1362304	Callee	zend_new_interned_string		1359456	0					
ANR	1362305	Identifier	zend_new_interned_string		1359456	0					
ANR	1362306	ArgumentList	Z_STR ( ZEND_OP2_LITERAL ( src ) )		1359456	1					
ANR	1362307	Argument	Z_STR ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362308	CallExpression	Z_STR ( ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362309	Callee	Z_STR		1359456	0					
ANR	1362310	Identifier	Z_STR		1359456	0					
ANR	1362311	ArgumentList	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362312	Argument	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362313	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362314	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362315	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362316	ArgumentList	src		1359456	1					
ANR	1362317	Argument	src		1359456	0					
ANR	1362318	Identifier	src		1359456	0					
ANR	1362319	IfStatement	if ( ! Z_REFCOUNTED ( ZEND_OP2_LITERAL ( opline ) ) )		1359456	14					
ANR	1362320	Condition	! Z_REFCOUNTED ( ZEND_OP2_LITERAL ( opline ) )	969:7:31858:31896	1359456	0	True				
ANR	1362321	UnaryOperationExpression	! Z_REFCOUNTED ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362322	UnaryOperator	!		1359456	0					
ANR	1362323	CallExpression	Z_REFCOUNTED ( ZEND_OP2_LITERAL ( opline ) )		1359456	1					
ANR	1362324	Callee	Z_REFCOUNTED		1359456	0					
ANR	1362325	Identifier	Z_REFCOUNTED		1359456	0					
ANR	1362326	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362327	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362328	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362329	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362330	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362331	ArgumentList	opline		1359456	1					
ANR	1362332	Argument	opline		1359456	0					
ANR	1362333	Identifier	opline		1359456	0					
ANR	1362334	CompoundStatement		360:48:13591:13591	1359456	1					
ANR	1362335	ExpressionStatement	Z_TYPE_FLAGS ( ZEND_OP2_LITERAL ( opline ) ) &= ~ ( IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE )	970:4:31905:31988	1359456	0	True				
ANR	1362336	AssignmentExpression	Z_TYPE_FLAGS ( ZEND_OP2_LITERAL ( opline ) ) &= ~ ( IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE )		1359456	0		&=			
ANR	1362337	CallExpression	Z_TYPE_FLAGS ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362338	Callee	Z_TYPE_FLAGS		1359456	0					
ANR	1362339	Identifier	Z_TYPE_FLAGS		1359456	0					
ANR	1362340	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362341	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362342	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362343	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362344	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362345	ArgumentList	opline		1359456	1					
ANR	1362346	Argument	opline		1359456	0					
ANR	1362347	Identifier	opline		1359456	0					
ANR	1362348	UnaryOperationExpression	~ ( IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE )		1359456	1					
ANR	1362349	UnaryOperator	~		1359456	0					
ANR	1362350	InclusiveOrExpression	IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE		1359456	1		|			
ANR	1362351	Identifier	IS_TYPE_REFCOUNTED		1359456	0					
ANR	1362352	Identifier	IS_TYPE_COPYABLE		1359456	1					
ANR	1362353	ExpressionStatement	ZVAL_NULL ( & ZEND_OP2_LITERAL ( src ) )	972:3:31998:32031	1359456	15	True				
ANR	1362354	CallExpression	ZVAL_NULL ( & ZEND_OP2_LITERAL ( src ) )		1359456	0					
ANR	1362355	Callee	ZVAL_NULL		1359456	0					
ANR	1362356	Identifier	ZVAL_NULL		1359456	0					
ANR	1362357	ArgumentList	& ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362358	Argument	& ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362359	UnaryOperationExpression	& ZEND_OP2_LITERAL ( src )		1359456	0					
ANR	1362360	UnaryOperator	&		1359456	0					
ANR	1362361	CallExpression	ZEND_OP2_LITERAL ( src )		1359456	1					
ANR	1362362	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362363	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362364	ArgumentList	src		1359456	1					
ANR	1362365	Argument	src		1359456	0					
ANR	1362366	Identifier	src		1359456	0					
ANR	1362367	ExpressionStatement	MAKE_NOP ( src )	973:3:32036:32049	1359456	16	True				
ANR	1362368	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1362369	Callee	MAKE_NOP		1359456	0					
ANR	1362370	Identifier	MAKE_NOP		1359456	0					
ANR	1362371	ArgumentList	src		1359456	1					
ANR	1362372	Argument	src		1359456	0					
ANR	1362373	Identifier	src		1359456	0					
ANR	1362374	ElseStatement	else		1359456	0					
ANR	1362375	IfStatement	if ( ( opline -> opcode == ZEND_ADD || opline -> opcode == ZEND_SUB || opline -> opcode == ZEND_MUL || opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD || opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR ) && ZEND_OP1_TYPE ( opline ) == IS_CONST && ZEND_OP2_TYPE ( opline ) == IS_CONST )		1359456	0					
ANR	1362376	Condition	( opline -> opcode == ZEND_ADD || opline -> opcode == ZEND_SUB || opline -> opcode == ZEND_MUL || opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD || opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR ) && ZEND_OP1_TYPE ( opline ) == IS_CONST && ZEND_OP2_TYPE ( opline ) == IS_CONST	974:13:32064:32882	1359456	0	True				
ANR	1362377	AndExpression	( opline -> opcode == ZEND_ADD || opline -> opcode == ZEND_SUB || opline -> opcode == ZEND_MUL || opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD || opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR ) && ZEND_OP1_TYPE ( opline ) == IS_CONST && ZEND_OP2_TYPE ( opline ) == IS_CONST		1359456	0		&&			
ANR	1362378	OrExpression	opline -> opcode == ZEND_ADD || opline -> opcode == ZEND_SUB || opline -> opcode == ZEND_MUL || opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD || opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	0		||			
ANR	1362379	EqualityExpression	opline -> opcode == ZEND_ADD		1359456	0		==			
ANR	1362380	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362381	Identifier	opline		1359456	0					
ANR	1362382	Identifier	opcode		1359456	1					
ANR	1362383	Identifier	ZEND_ADD		1359456	1					
ANR	1362384	OrExpression	opline -> opcode == ZEND_SUB || opline -> opcode == ZEND_MUL || opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD || opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362385	EqualityExpression	opline -> opcode == ZEND_SUB		1359456	0		==			
ANR	1362386	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362387	Identifier	opline		1359456	0					
ANR	1362388	Identifier	opcode		1359456	1					
ANR	1362389	Identifier	ZEND_SUB		1359456	1					
ANR	1362390	OrExpression	opline -> opcode == ZEND_MUL || opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD || opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362391	EqualityExpression	opline -> opcode == ZEND_MUL		1359456	0		==			
ANR	1362392	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362393	Identifier	opline		1359456	0					
ANR	1362394	Identifier	opcode		1359456	1					
ANR	1362395	Identifier	ZEND_MUL		1359456	1					
ANR	1362396	OrExpression	opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD || opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362397	EqualityExpression	opline -> opcode == ZEND_DIV		1359456	0		==			
ANR	1362398	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362399	Identifier	opline		1359456	0					
ANR	1362400	Identifier	opcode		1359456	1					
ANR	1362401	Identifier	ZEND_DIV		1359456	1					
ANR	1362402	OrExpression	opline -> opcode == ZEND_MOD || opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362403	EqualityExpression	opline -> opcode == ZEND_MOD		1359456	0		==			
ANR	1362404	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362405	Identifier	opline		1359456	0					
ANR	1362406	Identifier	opcode		1359456	1					
ANR	1362407	Identifier	ZEND_MOD		1359456	1					
ANR	1362408	OrExpression	opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362409	EqualityExpression	opline -> opcode == ZEND_SL		1359456	0		==			
ANR	1362410	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362411	Identifier	opline		1359456	0					
ANR	1362412	Identifier	opcode		1359456	1					
ANR	1362413	Identifier	ZEND_SL		1359456	1					
ANR	1362414	OrExpression	opline -> opcode == ZEND_SR || opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362415	EqualityExpression	opline -> opcode == ZEND_SR		1359456	0		==			
ANR	1362416	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362417	Identifier	opline		1359456	0					
ANR	1362418	Identifier	opcode		1359456	1					
ANR	1362419	Identifier	ZEND_SR		1359456	1					
ANR	1362420	OrExpression	opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362421	EqualityExpression	opline -> opcode == ZEND_CONCAT		1359456	0		==			
ANR	1362422	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362423	Identifier	opline		1359456	0					
ANR	1362424	Identifier	opcode		1359456	1					
ANR	1362425	Identifier	ZEND_CONCAT		1359456	1					
ANR	1362426	OrExpression	opline -> opcode == ZEND_FAST_CONCAT || opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362427	EqualityExpression	opline -> opcode == ZEND_FAST_CONCAT		1359456	0		==			
ANR	1362428	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362429	Identifier	opline		1359456	0					
ANR	1362430	Identifier	opcode		1359456	1					
ANR	1362431	Identifier	ZEND_FAST_CONCAT		1359456	1					
ANR	1362432	OrExpression	opline -> opcode == ZEND_IS_EQUAL || opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362433	EqualityExpression	opline -> opcode == ZEND_IS_EQUAL		1359456	0		==			
ANR	1362434	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362435	Identifier	opline		1359456	0					
ANR	1362436	Identifier	opcode		1359456	1					
ANR	1362437	Identifier	ZEND_IS_EQUAL		1359456	1					
ANR	1362438	OrExpression	opline -> opcode == ZEND_IS_NOT_EQUAL || opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362439	EqualityExpression	opline -> opcode == ZEND_IS_NOT_EQUAL		1359456	0		==			
ANR	1362440	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362441	Identifier	opline		1359456	0					
ANR	1362442	Identifier	opcode		1359456	1					
ANR	1362443	Identifier	ZEND_IS_NOT_EQUAL		1359456	1					
ANR	1362444	OrExpression	opline -> opcode == ZEND_IS_SMALLER || opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362445	EqualityExpression	opline -> opcode == ZEND_IS_SMALLER		1359456	0		==			
ANR	1362446	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362447	Identifier	opline		1359456	0					
ANR	1362448	Identifier	opcode		1359456	1					
ANR	1362449	Identifier	ZEND_IS_SMALLER		1359456	1					
ANR	1362450	OrExpression	opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL || opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362451	EqualityExpression	opline -> opcode == ZEND_IS_SMALLER_OR_EQUAL		1359456	0		==			
ANR	1362452	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362453	Identifier	opline		1359456	0					
ANR	1362454	Identifier	opcode		1359456	1					
ANR	1362455	Identifier	ZEND_IS_SMALLER_OR_EQUAL		1359456	1					
ANR	1362456	OrExpression	opline -> opcode == ZEND_IS_IDENTICAL || opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362457	EqualityExpression	opline -> opcode == ZEND_IS_IDENTICAL		1359456	0		==			
ANR	1362458	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362459	Identifier	opline		1359456	0					
ANR	1362460	Identifier	opcode		1359456	1					
ANR	1362461	Identifier	ZEND_IS_IDENTICAL		1359456	1					
ANR	1362462	OrExpression	opline -> opcode == ZEND_IS_NOT_IDENTICAL || opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362463	EqualityExpression	opline -> opcode == ZEND_IS_NOT_IDENTICAL		1359456	0		==			
ANR	1362464	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362465	Identifier	opline		1359456	0					
ANR	1362466	Identifier	opcode		1359456	1					
ANR	1362467	Identifier	ZEND_IS_NOT_IDENTICAL		1359456	1					
ANR	1362468	OrExpression	opline -> opcode == ZEND_BOOL_XOR || opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362469	EqualityExpression	opline -> opcode == ZEND_BOOL_XOR		1359456	0		==			
ANR	1362470	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362471	Identifier	opline		1359456	0					
ANR	1362472	Identifier	opcode		1359456	1					
ANR	1362473	Identifier	ZEND_BOOL_XOR		1359456	1					
ANR	1362474	OrExpression	opline -> opcode == ZEND_BW_OR || opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362475	EqualityExpression	opline -> opcode == ZEND_BW_OR		1359456	0		==			
ANR	1362476	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362477	Identifier	opline		1359456	0					
ANR	1362478	Identifier	opcode		1359456	1					
ANR	1362479	Identifier	ZEND_BW_OR		1359456	1					
ANR	1362480	OrExpression	opline -> opcode == ZEND_BW_AND || opline -> opcode == ZEND_BW_XOR		1359456	1		||			
ANR	1362481	EqualityExpression	opline -> opcode == ZEND_BW_AND		1359456	0		==			
ANR	1362482	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362483	Identifier	opline		1359456	0					
ANR	1362484	Identifier	opcode		1359456	1					
ANR	1362485	Identifier	ZEND_BW_AND		1359456	1					
ANR	1362486	EqualityExpression	opline -> opcode == ZEND_BW_XOR		1359456	1		==			
ANR	1362487	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362488	Identifier	opline		1359456	0					
ANR	1362489	Identifier	opcode		1359456	1					
ANR	1362490	Identifier	ZEND_BW_XOR		1359456	1					
ANR	1362491	AndExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST && ZEND_OP2_TYPE ( opline ) == IS_CONST		1359456	1		&&			
ANR	1362492	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST		1359456	0		==			
ANR	1362493	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1362494	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1362495	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1362496	ArgumentList	opline		1359456	1					
ANR	1362497	Argument	opline		1359456	0					
ANR	1362498	Identifier	opline		1359456	0					
ANR	1362499	Identifier	IS_CONST		1359456	1					
ANR	1362500	EqualityExpression	ZEND_OP2_TYPE ( opline ) == IS_CONST		1359456	1		==			
ANR	1362501	CallExpression	ZEND_OP2_TYPE ( opline )		1359456	0					
ANR	1362502	Callee	ZEND_OP2_TYPE		1359456	0					
ANR	1362503	Identifier	ZEND_OP2_TYPE		1359456	0					
ANR	1362504	ArgumentList	opline		1359456	1					
ANR	1362505	Argument	opline		1359456	0					
ANR	1362506	Identifier	opline		1359456	0					
ANR	1362507	Identifier	IS_CONST		1359456	1					
ANR	1362508	CompoundStatement		389:3:14698:14704	1359456	1					
ANR	1362509	IdentifierDeclStatement	binary_op_type binary_op = get_binary_op ( opline -> opcode ) ;	996:3:32929:32985	1359456	0	True				
ANR	1362510	IdentifierDecl	binary_op = get_binary_op ( opline -> opcode )		1359456	0					
ANR	1362511	IdentifierDeclType	binary_op_type		1359456	0					
ANR	1362512	Identifier	binary_op		1359456	1					
ANR	1362513	AssignmentExpression	binary_op = get_binary_op ( opline -> opcode )		1359456	2		=			
ANR	1362514	Identifier	binary_op		1359456	0					
ANR	1362515	CallExpression	get_binary_op ( opline -> opcode )		1359456	1					
ANR	1362516	Callee	get_binary_op		1359456	0					
ANR	1362517	Identifier	get_binary_op		1359456	0					
ANR	1362518	ArgumentList	opline -> opcode		1359456	1					
ANR	1362519	Argument	opline -> opcode		1359456	0					
ANR	1362520	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362521	Identifier	opline		1359456	0					
ANR	1362522	Identifier	opcode		1359456	1					
ANR	1362523	IdentifierDeclStatement	zval result ;	997:3:32990:33001	1359456	1	True				
ANR	1362524	IdentifierDecl	result		1359456	0					
ANR	1362525	IdentifierDeclType	zval		1359456	0					
ANR	1362526	Identifier	result		1359456	1					
ANR	1362527	IdentifierDeclStatement	int er ;	998:3:33006:33012	1359456	2	True				
ANR	1362528	IdentifierDecl	er		1359456	0					
ANR	1362529	IdentifierDeclType	int		1359456	0					
ANR	1362530	Identifier	er		1359456	1					
ANR	1362531	IfStatement	if ( ( opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD ) && zval_get_long ( & ZEND_OP2_LITERAL ( opline ) ) == 0 )		1359456	3					
ANR	1362532	Condition	( opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD ) && zval_get_long ( & ZEND_OP2_LITERAL ( opline ) ) == 0	1000:16:33031:33153	1359456	0	True				
ANR	1362533	AndExpression	( opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD ) && zval_get_long ( & ZEND_OP2_LITERAL ( opline ) ) == 0		1359456	0		&&			
ANR	1362534	OrExpression	opline -> opcode == ZEND_DIV || opline -> opcode == ZEND_MOD		1359456	0		||			
ANR	1362535	EqualityExpression	opline -> opcode == ZEND_DIV		1359456	0		==			
ANR	1362536	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362537	Identifier	opline		1359456	0					
ANR	1362538	Identifier	opcode		1359456	1					
ANR	1362539	Identifier	ZEND_DIV		1359456	1					
ANR	1362540	EqualityExpression	opline -> opcode == ZEND_MOD		1359456	1		==			
ANR	1362541	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362542	Identifier	opline		1359456	0					
ANR	1362543	Identifier	opcode		1359456	1					
ANR	1362544	Identifier	ZEND_MOD		1359456	1					
ANR	1362545	EqualityExpression	zval_get_long ( & ZEND_OP2_LITERAL ( opline ) ) == 0		1359456	1		==			
ANR	1362546	CallExpression	zval_get_long ( & ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362547	Callee	zval_get_long		1359456	0					
ANR	1362548	Identifier	zval_get_long		1359456	0					
ANR	1362549	ArgumentList	& ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362550	Argument	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362551	UnaryOperationExpression	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362552	UnaryOperator	&		1359456	0					
ANR	1362553	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362554	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362555	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362556	ArgumentList	opline		1359456	1					
ANR	1362557	Argument	opline		1359456	0					
ANR	1362558	Identifier	opline		1359456	0					
ANR	1362559	PrimaryExpression	0		1359456	1					
ANR	1362560	CompoundStatement		392:63:14848:14848	1359456	1					
ANR	1362561	IfStatement	if ( RESULT_USED ( opline ) )		1359456	0					
ANR	1362562	Condition	RESULT_USED ( opline )	1002:8:33166:33184	1359456	0	True				
ANR	1362563	CallExpression	RESULT_USED ( opline )		1359456	0					
ANR	1362564	Callee	RESULT_USED		1359456	0					
ANR	1362565	Identifier	RESULT_USED		1359456	0					
ANR	1362566	ArgumentList	opline		1359456	1					
ANR	1362567	Argument	opline		1359456	0					
ANR	1362568	Identifier	opline		1359456	0					
ANR	1362569	CompoundStatement		393:29:14879:14879	1359456	1					
ANR	1362570	ExpressionStatement	SET_VAR_SOURCE ( opline )	1003:5:33194:33216	1359456	0	True				
ANR	1362571	CallExpression	SET_VAR_SOURCE ( opline )		1359456	0					
ANR	1362572	Callee	SET_VAR_SOURCE		1359456	0					
ANR	1362573	Identifier	SET_VAR_SOURCE		1359456	0					
ANR	1362574	ArgumentList	opline		1359456	1					
ANR	1362575	Argument	opline		1359456	0					
ANR	1362576	Identifier	opline		1359456	0					
ANR	1362577	ExpressionStatement	opline ++	1005:16:33240:33248	1359456	1	True				
ANR	1362578	PostIncDecOperationExpression	opline ++		1359456	0					
ANR	1362579	Identifier	opline		1359456	0					
ANR	1362580	IncDec	++		1359456	1					
ANR	1362581	ContinueStatement	continue ;	1006:4:33254:33262	1359456	2	True				
ANR	1362582	ElseStatement	else		1359456	0					
ANR	1362583	IfStatement	if ( ( opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR ) && zval_get_long ( & ZEND_OP2_LITERAL ( opline ) ) < 0 )		1359456	0					
ANR	1362584	Condition	( opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR ) && zval_get_long ( & ZEND_OP2_LITERAL ( opline ) ) < 0	1007:23:33287:33406	1359456	0	True				
ANR	1362585	AndExpression	( opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR ) && zval_get_long ( & ZEND_OP2_LITERAL ( opline ) ) < 0		1359456	0		&&			
ANR	1362586	OrExpression	opline -> opcode == ZEND_SL || opline -> opcode == ZEND_SR		1359456	0		||			
ANR	1362587	EqualityExpression	opline -> opcode == ZEND_SL		1359456	0		==			
ANR	1362588	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362589	Identifier	opline		1359456	0					
ANR	1362590	Identifier	opcode		1359456	1					
ANR	1362591	Identifier	ZEND_SL		1359456	1					
ANR	1362592	EqualityExpression	opline -> opcode == ZEND_SR		1359456	1		==			
ANR	1362593	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362594	Identifier	opline		1359456	0					
ANR	1362595	Identifier	opcode		1359456	1					
ANR	1362596	Identifier	ZEND_SR		1359456	1					
ANR	1362597	RelationalExpression	zval_get_long ( & ZEND_OP2_LITERAL ( opline ) ) < 0		1359456	1		<			
ANR	1362598	CallExpression	zval_get_long ( & ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362599	Callee	zval_get_long		1359456	0					
ANR	1362600	Identifier	zval_get_long		1359456	0					
ANR	1362601	ArgumentList	& ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362602	Argument	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362603	UnaryOperationExpression	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362604	UnaryOperator	&		1359456	0					
ANR	1362605	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362606	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362607	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362608	ArgumentList	opline		1359456	1					
ANR	1362609	Argument	opline		1359456	0					
ANR	1362610	Identifier	opline		1359456	0					
ANR	1362611	PrimaryExpression	0		1359456	1					
ANR	1362612	CompoundStatement		399:62:15101:15101	1359456	1					
ANR	1362613	IfStatement	if ( RESULT_USED ( opline ) )		1359456	0					
ANR	1362614	Condition	RESULT_USED ( opline )	1009:8:33419:33437	1359456	0	True				
ANR	1362615	CallExpression	RESULT_USED ( opline )		1359456	0					
ANR	1362616	Callee	RESULT_USED		1359456	0					
ANR	1362617	Identifier	RESULT_USED		1359456	0					
ANR	1362618	ArgumentList	opline		1359456	1					
ANR	1362619	Argument	opline		1359456	0					
ANR	1362620	Identifier	opline		1359456	0					
ANR	1362621	CompoundStatement		400:29:15132:15132	1359456	1					
ANR	1362622	ExpressionStatement	SET_VAR_SOURCE ( opline )	1010:5:33447:33469	1359456	0	True				
ANR	1362623	CallExpression	SET_VAR_SOURCE ( opline )		1359456	0					
ANR	1362624	Callee	SET_VAR_SOURCE		1359456	0					
ANR	1362625	Identifier	SET_VAR_SOURCE		1359456	0					
ANR	1362626	ArgumentList	opline		1359456	1					
ANR	1362627	Argument	opline		1359456	0					
ANR	1362628	Identifier	opline		1359456	0					
ANR	1362629	ExpressionStatement	opline ++	1012:16:33493:33501	1359456	1	True				
ANR	1362630	PostIncDecOperationExpression	opline ++		1359456	0					
ANR	1362631	Identifier	opline		1359456	0					
ANR	1362632	IncDec	++		1359456	1					
ANR	1362633	ContinueStatement	continue ;	1013:4:33507:33515	1359456	2	True				
ANR	1362634	ExpressionStatement	er = EG ( error_reporting )	1015:3:33525:33549	1359456	4	True				
ANR	1362635	AssignmentExpression	er = EG ( error_reporting )		1359456	0		=			
ANR	1362636	Identifier	er		1359456	0					
ANR	1362637	CallExpression	EG ( error_reporting )		1359456	1					
ANR	1362638	Callee	EG		1359456	0					
ANR	1362639	Identifier	EG		1359456	0					
ANR	1362640	ArgumentList	error_reporting		1359456	1					
ANR	1362641	Argument	error_reporting		1359456	0					
ANR	1362642	Identifier	error_reporting		1359456	0					
ANR	1362643	ExpressionStatement	EG ( error_reporting ) = 0	1016:3:33554:33577	1359456	5	True				
ANR	1362644	AssignmentExpression	EG ( error_reporting ) = 0		1359456	0		=			
ANR	1362645	CallExpression	EG ( error_reporting )		1359456	0					
ANR	1362646	Callee	EG		1359456	0					
ANR	1362647	Identifier	EG		1359456	0					
ANR	1362648	ArgumentList	error_reporting		1359456	1					
ANR	1362649	Argument	error_reporting		1359456	0					
ANR	1362650	Identifier	error_reporting		1359456	0					
ANR	1362651	PrimaryExpression	0		1359456	1					
ANR	1362652	IfStatement	"if ( binary_op ( & result , & ZEND_OP1_LITERAL ( opline ) , & ZEND_OP2_LITERAL ( opline ) ) == SUCCESS )"		1359456	6					
ANR	1362653	Condition	"binary_op ( & result , & ZEND_OP1_LITERAL ( opline ) , & ZEND_OP2_LITERAL ( opline ) ) == SUCCESS"	1017:7:33586:33668	1359456	0	True				
ANR	1362654	EqualityExpression	"binary_op ( & result , & ZEND_OP1_LITERAL ( opline ) , & ZEND_OP2_LITERAL ( opline ) ) == SUCCESS"		1359456	0		==			
ANR	1362655	CallExpression	"binary_op ( & result , & ZEND_OP1_LITERAL ( opline ) , & ZEND_OP2_LITERAL ( opline ) )"		1359456	0					
ANR	1362656	Callee	binary_op		1359456	0					
ANR	1362657	Identifier	binary_op		1359456	0					
ANR	1362658	ArgumentList	& result		1359456	1					
ANR	1362659	Argument	& result		1359456	0					
ANR	1362660	UnaryOperationExpression	& result		1359456	0					
ANR	1362661	UnaryOperator	&		1359456	0					
ANR	1362662	Identifier	result		1359456	1					
ANR	1362663	Argument	& ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362664	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1362665	UnaryOperator	&		1359456	0					
ANR	1362666	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362667	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1362668	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1362669	ArgumentList	opline		1359456	1					
ANR	1362670	Argument	opline		1359456	0					
ANR	1362671	Identifier	opline		1359456	0					
ANR	1362672	Argument	& ZEND_OP2_LITERAL ( opline )		1359456	2					
ANR	1362673	UnaryOperationExpression	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362674	UnaryOperator	&		1359456	0					
ANR	1362675	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362676	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362677	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362678	ArgumentList	opline		1359456	1					
ANR	1362679	Argument	opline		1359456	0					
ANR	1362680	Identifier	opline		1359456	0					
ANR	1362681	Identifier	SUCCESS		1359456	1					
ANR	1362682	CompoundStatement		408:92:15363:15363	1359456	1					
ANR	1362683	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )	1018:4:33677:33716	1359456	0	True				
ANR	1362684	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1362685	Callee	literal_dtor		1359456	0					
ANR	1362686	Identifier	literal_dtor		1359456	0					
ANR	1362687	ArgumentList	& ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362688	Argument	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1362689	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1362690	UnaryOperator	&		1359456	0					
ANR	1362691	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362692	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1362693	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1362694	ArgumentList	opline		1359456	1					
ANR	1362695	Argument	opline		1359456	0					
ANR	1362696	Identifier	opline		1359456	0					
ANR	1362697	ExpressionStatement	literal_dtor ( & ZEND_OP2_LITERAL ( opline ) )	1019:4:33722:33761	1359456	1	True				
ANR	1362698	CallExpression	literal_dtor ( & ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1362699	Callee	literal_dtor		1359456	0					
ANR	1362700	Identifier	literal_dtor		1359456	0					
ANR	1362701	ArgumentList	& ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362702	Argument	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362703	UnaryOperationExpression	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1362704	UnaryOperator	&		1359456	0					
ANR	1362705	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1362706	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1362707	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1362708	ArgumentList	opline		1359456	1					
ANR	1362709	Argument	opline		1359456	0					
ANR	1362710	Identifier	opline		1359456	0					
ANR	1362711	ExpressionStatement	opline -> opcode = ZEND_QM_ASSIGN	1020:4:33767:33798	1359456	2	True				
ANR	1362712	AssignmentExpression	opline -> opcode = ZEND_QM_ASSIGN		1359456	0		=			
ANR	1362713	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362714	Identifier	opline		1359456	0					
ANR	1362715	Identifier	opcode		1359456	1					
ANR	1362716	Identifier	ZEND_QM_ASSIGN		1359456	1					
ANR	1362717	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1021:4:33804:33827	1359456	3	True				
ANR	1362718	CallExpression	SET_UNUSED ( opline -> op2 )		1359456	0					
ANR	1362719	Callee	SET_UNUSED		1359456	0					
ANR	1362720	Identifier	SET_UNUSED		1359456	0					
ANR	1362721	ArgumentList	opline -> op2		1359456	1					
ANR	1362722	Argument	opline -> op2		1359456	0					
ANR	1362723	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1362724	Identifier	opline		1359456	0					
ANR	1362725	Identifier	op2		1359456	1					
ANR	1362726	ExpressionStatement	"zend_optimizer_update_op1_const ( op_array , opline , & result )"	1022:4:33833:33891	1359456	4	True				
ANR	1362727	CallExpression	"zend_optimizer_update_op1_const ( op_array , opline , & result )"		1359456	0					
ANR	1362728	Callee	zend_optimizer_update_op1_const		1359456	0					
ANR	1362729	Identifier	zend_optimizer_update_op1_const		1359456	0					
ANR	1362730	ArgumentList	op_array		1359456	1					
ANR	1362731	Argument	op_array		1359456	0					
ANR	1362732	Identifier	op_array		1359456	0					
ANR	1362733	Argument	opline		1359456	1					
ANR	1362734	Identifier	opline		1359456	0					
ANR	1362735	Argument	& result		1359456	2					
ANR	1362736	UnaryOperationExpression	& result		1359456	0					
ANR	1362737	UnaryOperator	&		1359456	0					
ANR	1362738	Identifier	result		1359456	1					
ANR	1362739	ExpressionStatement	EG ( error_reporting ) = er	1024:3:33901:33925	1359456	7	True				
ANR	1362740	AssignmentExpression	EG ( error_reporting ) = er		1359456	0		=			
ANR	1362741	CallExpression	EG ( error_reporting )		1359456	0					
ANR	1362742	Callee	EG		1359456	0					
ANR	1362743	Identifier	EG		1359456	0					
ANR	1362744	ArgumentList	error_reporting		1359456	1					
ANR	1362745	Argument	error_reporting		1359456	0					
ANR	1362746	Identifier	error_reporting		1359456	0					
ANR	1362747	Identifier	er		1359456	1					
ANR	1362748	ElseStatement	else		1359456	0					
ANR	1362749	IfStatement	if ( ( opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_BW_NOT ) && ZEND_OP1_TYPE ( opline ) == IS_CONST )		1359456	0					
ANR	1362750	Condition	( opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_BW_NOT ) && ZEND_OP1_TYPE ( opline ) == IS_CONST	1025:13:33940:34088	1359456	0	True				
ANR	1362751	AndExpression	( opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_BW_NOT ) && ZEND_OP1_TYPE ( opline ) == IS_CONST		1359456	0		&&			
ANR	1362752	OrExpression	opline -> opcode == ZEND_BOOL || opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_BW_NOT		1359456	0		||			
ANR	1362753	EqualityExpression	opline -> opcode == ZEND_BOOL		1359456	0		==			
ANR	1362754	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362755	Identifier	opline		1359456	0					
ANR	1362756	Identifier	opcode		1359456	1					
ANR	1362757	Identifier	ZEND_BOOL		1359456	1					
ANR	1362758	OrExpression	opline -> opcode == ZEND_BOOL_NOT || opline -> opcode == ZEND_BW_NOT		1359456	1		||			
ANR	1362759	EqualityExpression	opline -> opcode == ZEND_BOOL_NOT		1359456	0		==			
ANR	1362760	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362761	Identifier	opline		1359456	0					
ANR	1362762	Identifier	opcode		1359456	1					
ANR	1362763	Identifier	ZEND_BOOL_NOT		1359456	1					
ANR	1362764	EqualityExpression	opline -> opcode == ZEND_BW_NOT		1359456	1		==			
ANR	1362765	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362766	Identifier	opline		1359456	0					
ANR	1362767	Identifier	opcode		1359456	1					
ANR	1362768	Identifier	ZEND_BW_NOT		1359456	1					
ANR	1362769	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST		1359456	1		==			
ANR	1362770	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1362771	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1362772	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1362773	ArgumentList	opline		1359456	1					
ANR	1362774	Argument	opline		1359456	0					
ANR	1362775	Identifier	opline		1359456	0					
ANR	1362776	Identifier	IS_CONST		1359456	1					
ANR	1362777	CompoundStatement		421:3:15883:15894	1359456	1					
ANR	1362778	IdentifierDeclStatement	unary_op_type unary_op = get_unary_op ( opline -> opcode ) ;	1029:3:34133:34186	1359456	0	True				
ANR	1362779	IdentifierDecl	unary_op = get_unary_op ( opline -> opcode )		1359456	0					
ANR	1362780	IdentifierDeclType	unary_op_type		1359456	0					
ANR	1362781	Identifier	unary_op		1359456	1					
ANR	1362782	AssignmentExpression	unary_op = get_unary_op ( opline -> opcode )		1359456	2		=			
ANR	1362783	Identifier	unary_op		1359456	0					
ANR	1362784	CallExpression	get_unary_op ( opline -> opcode )		1359456	1					
ANR	1362785	Callee	get_unary_op		1359456	0					
ANR	1362786	Identifier	get_unary_op		1359456	0					
ANR	1362787	ArgumentList	opline -> opcode		1359456	1					
ANR	1362788	Argument	opline -> opcode		1359456	0					
ANR	1362789	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362790	Identifier	opline		1359456	0					
ANR	1362791	Identifier	opcode		1359456	1					
ANR	1362792	IdentifierDeclStatement	zval result ;	1030:3:34191:34202	1359456	1	True				
ANR	1362793	IdentifierDecl	result		1359456	0					
ANR	1362794	IdentifierDeclType	zval		1359456	0					
ANR	1362795	Identifier	result		1359456	1					
ANR	1362796	IfStatement	if ( unary_op )		1359456	2					
ANR	1362797	Condition	unary_op	1032:7:34212:34219	1359456	0	True				
ANR	1362798	Identifier	unary_op		1359456	0					
ANR	1362799	CompoundStatement		423:17:15914:15914	1359456	1					
ANR	1362800	ExpressionStatement	"unary_op ( & result , & ZEND_OP1_LITERAL ( opline ) )"	1033:4:34228:34272	1359456	0	True				
ANR	1362801	CallExpression	"unary_op ( & result , & ZEND_OP1_LITERAL ( opline ) )"		1359456	0					
ANR	1362802	Callee	unary_op		1359456	0					
ANR	1362803	Identifier	unary_op		1359456	0					
ANR	1362804	ArgumentList	& result		1359456	1					
ANR	1362805	Argument	& result		1359456	0					
ANR	1362806	UnaryOperationExpression	& result		1359456	0					
ANR	1362807	UnaryOperator	&		1359456	0					
ANR	1362808	Identifier	result		1359456	1					
ANR	1362809	Argument	& ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362810	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1362811	UnaryOperator	&		1359456	0					
ANR	1362812	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362813	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1362814	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1362815	ArgumentList	opline		1359456	1					
ANR	1362816	Argument	opline		1359456	0					
ANR	1362817	Identifier	opline		1359456	0					
ANR	1362818	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )	1034:4:34278:34317	1359456	1	True				
ANR	1362819	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1362820	Callee	literal_dtor		1359456	0					
ANR	1362821	Identifier	literal_dtor		1359456	0					
ANR	1362822	ArgumentList	& ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362823	Argument	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1362824	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1362825	UnaryOperator	&		1359456	0					
ANR	1362826	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362827	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1362828	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1362829	ArgumentList	opline		1359456	1					
ANR	1362830	Argument	opline		1359456	0					
ANR	1362831	Identifier	opline		1359456	0					
ANR	1362832	ElseStatement	else		1359456	0					
ANR	1362833	CompoundStatement		426:10:16021:16021	1359456	0					
ANR	1362834	ExpressionStatement	result = ZEND_OP1_LITERAL ( opline )	1037:4:34350:34383	1359456	0	True				
ANR	1362835	AssignmentExpression	result = ZEND_OP1_LITERAL ( opline )		1359456	0		=			
ANR	1362836	Identifier	result		1359456	0					
ANR	1362837	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362838	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1362839	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1362840	ArgumentList	opline		1359456	1					
ANR	1362841	Argument	opline		1359456	0					
ANR	1362842	Identifier	opline		1359456	0					
ANR	1362843	ExpressionStatement	convert_to_boolean ( & result )	1038:4:34389:34416	1359456	1	True				
ANR	1362844	CallExpression	convert_to_boolean ( & result )		1359456	0					
ANR	1362845	Callee	convert_to_boolean		1359456	0					
ANR	1362846	Identifier	convert_to_boolean		1359456	0					
ANR	1362847	ArgumentList	& result		1359456	1					
ANR	1362848	Argument	& result		1359456	0					
ANR	1362849	UnaryOperationExpression	& result		1359456	0					
ANR	1362850	UnaryOperator	&		1359456	0					
ANR	1362851	Identifier	result		1359456	1					
ANR	1362852	ExpressionStatement	ZVAL_NULL ( & ZEND_OP1_LITERAL ( opline ) )	1039:4:34422:34458	1359456	2	True				
ANR	1362853	CallExpression	ZVAL_NULL ( & ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1362854	Callee	ZVAL_NULL		1359456	0					
ANR	1362855	Identifier	ZVAL_NULL		1359456	0					
ANR	1362856	ArgumentList	& ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362857	Argument	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1362858	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1362859	UnaryOperator	&		1359456	0					
ANR	1362860	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1362861	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1362862	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1362863	ArgumentList	opline		1359456	1					
ANR	1362864	Argument	opline		1359456	0					
ANR	1362865	Identifier	opline		1359456	0					
ANR	1362866	ExpressionStatement	opline -> opcode = ZEND_QM_ASSIGN	1041:3:34468:34499	1359456	3	True				
ANR	1362867	AssignmentExpression	opline -> opcode = ZEND_QM_ASSIGN		1359456	0		=			
ANR	1362868	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362869	Identifier	opline		1359456	0					
ANR	1362870	Identifier	opcode		1359456	1					
ANR	1362871	Identifier	ZEND_QM_ASSIGN		1359456	1					
ANR	1362872	ExpressionStatement	"zend_optimizer_update_op1_const ( op_array , opline , & result )"	1042:3:34504:34562	1359456	4	True				
ANR	1362873	CallExpression	"zend_optimizer_update_op1_const ( op_array , opline , & result )"		1359456	0					
ANR	1362874	Callee	zend_optimizer_update_op1_const		1359456	0					
ANR	1362875	Identifier	zend_optimizer_update_op1_const		1359456	0					
ANR	1362876	ArgumentList	op_array		1359456	1					
ANR	1362877	Argument	op_array		1359456	0					
ANR	1362878	Identifier	op_array		1359456	0					
ANR	1362879	Argument	opline		1359456	1					
ANR	1362880	Identifier	opline		1359456	0					
ANR	1362881	Argument	& result		1359456	2					
ANR	1362882	UnaryOperationExpression	& result		1359456	0					
ANR	1362883	UnaryOperator	&		1359456	0					
ANR	1362884	Identifier	result		1359456	1					
ANR	1362885	ElseStatement	else		1359456	0					
ANR	1362886	IfStatement	if ( ( opline -> opcode == ZEND_RETURN || opline -> opcode == ZEND_EXIT ) && ( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN )		1359456	0					
ANR	1362887	Condition	( opline -> opcode == ZEND_RETURN || opline -> opcode == ZEND_EXIT ) && ( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN	1043:13:34577:34788	1359456	0	True				
ANR	1362888	AndExpression	( opline -> opcode == ZEND_RETURN || opline -> opcode == ZEND_EXIT ) && ( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN		1359456	0		&&			
ANR	1362889	OrExpression	opline -> opcode == ZEND_RETURN || opline -> opcode == ZEND_EXIT		1359456	0		||			
ANR	1362890	EqualityExpression	opline -> opcode == ZEND_RETURN		1359456	0		==			
ANR	1362891	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362892	Identifier	opline		1359456	0					
ANR	1362893	Identifier	opcode		1359456	1					
ANR	1362894	Identifier	ZEND_RETURN		1359456	1					
ANR	1362895	EqualityExpression	opline -> opcode == ZEND_EXIT		1359456	1		==			
ANR	1362896	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362897	Identifier	opline		1359456	0					
ANR	1362898	Identifier	opcode		1359456	1					
ANR	1362899	Identifier	ZEND_EXIT		1359456	1					
ANR	1362900	AndExpression	( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN		1359456	1		&&			
ANR	1362901	BitAndExpression	ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR )		1359456	0		&			
ANR	1362902	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1362903	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1362904	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1362905	ArgumentList	opline		1359456	1					
ANR	1362906	Argument	opline		1359456	0					
ANR	1362907	Identifier	opline		1359456	0					
ANR	1362908	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1359456	1		|			
ANR	1362909	Identifier	IS_TMP_VAR		1359456	0					
ANR	1362910	Identifier	IS_VAR		1359456	1					
ANR	1362911	AndExpression	VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN		1359456	1		&&			
ANR	1362912	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1362913	Callee	VAR_SOURCE		1359456	0					
ANR	1362914	Identifier	VAR_SOURCE		1359456	0					
ANR	1362915	ArgumentList	opline -> op1		1359456	1					
ANR	1362916	Argument	opline -> op1		1359456	0					
ANR	1362917	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1362918	Identifier	opline		1359456	0					
ANR	1362919	Identifier	op1		1359456	1					
ANR	1362920	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_QM_ASSIGN		1359456	1		==			
ANR	1362921	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1362922	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1362923	Callee	VAR_SOURCE		1359456	0					
ANR	1362924	Identifier	VAR_SOURCE		1359456	0					
ANR	1362925	ArgumentList	opline -> op1		1359456	1					
ANR	1362926	Argument	opline -> op1		1359456	0					
ANR	1362927	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1362928	Identifier	opline		1359456	0					
ANR	1362929	Identifier	op1		1359456	1					
ANR	1362930	Identifier	opcode		1359456	1					
ANR	1362931	Identifier	ZEND_QM_ASSIGN		1359456	1					
ANR	1362932	CompoundStatement		439:3:16538:16576	1359456	1					
ANR	1362933	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op1 ) ;	1048:3:34846:34884	1359456	0	True				
ANR	1362934	IdentifierDecl	* src = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1362935	IdentifierDeclType	zend_op *		1359456	0					
ANR	1362936	Identifier	src		1359456	1					
ANR	1362937	AssignmentExpression	* src = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1362938	Identifier	src		1359456	0					
ANR	1362939	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1362940	Callee	VAR_SOURCE		1359456	0					
ANR	1362941	Identifier	VAR_SOURCE		1359456	0					
ANR	1362942	ArgumentList	opline -> op1		1359456	1					
ANR	1362943	Argument	opline -> op1		1359456	0					
ANR	1362944	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1362945	Identifier	opline		1359456	0					
ANR	1362946	Identifier	op1		1359456	1					
ANR	1362947	ExpressionStatement	VAR_UNSET ( opline -> op1 )	1049:3:34889:34911	1359456	1	True				
ANR	1362948	CallExpression	VAR_UNSET ( opline -> op1 )		1359456	0					
ANR	1362949	Callee	VAR_UNSET		1359456	0					
ANR	1362950	Identifier	VAR_UNSET		1359456	0					
ANR	1362951	ArgumentList	opline -> op1		1359456	1					
ANR	1362952	Argument	opline -> op1		1359456	0					
ANR	1362953	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1362954	Identifier	opline		1359456	0					
ANR	1362955	Identifier	op1		1359456	1					
ANR	1362956	ExpressionStatement	"COPY_NODE ( opline -> op1 , src -> op1 )"	1050:3:34916:34948	1359456	2	True				
ANR	1362957	CallExpression	"COPY_NODE ( opline -> op1 , src -> op1 )"		1359456	0					
ANR	1362958	Callee	COPY_NODE		1359456	0					
ANR	1362959	Identifier	COPY_NODE		1359456	0					
ANR	1362960	ArgumentList	opline -> op1		1359456	1					
ANR	1362961	Argument	opline -> op1		1359456	0					
ANR	1362962	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1362963	Identifier	opline		1359456	0					
ANR	1362964	Identifier	op1		1359456	1					
ANR	1362965	Argument	src -> op1		1359456	1					
ANR	1362966	PtrMemberAccess	src -> op1		1359456	0					
ANR	1362967	Identifier	src		1359456	0					
ANR	1362968	Identifier	op1		1359456	1					
ANR	1362969	ExpressionStatement	MAKE_NOP ( src )	1051:3:34953:34966	1359456	3	True				
ANR	1362970	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1362971	Callee	MAKE_NOP		1359456	0					
ANR	1362972	Identifier	MAKE_NOP		1359456	0					
ANR	1362973	ArgumentList	src		1359456	1					
ANR	1362974	Argument	src		1359456	0					
ANR	1362975	Identifier	src		1359456	0					
ANR	1362976	ElseStatement	else		1359456	0					
ANR	1362977	IfStatement	if ( opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT )		1359456	0					
ANR	1362978	Condition	opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT	1052:13:34981:35047	1359456	0	True				
ANR	1362979	OrExpression	opline -> opcode == ZEND_CONCAT || opline -> opcode == ZEND_FAST_CONCAT		1359456	0		||			
ANR	1362980	EqualityExpression	opline -> opcode == ZEND_CONCAT		1359456	0		==			
ANR	1362981	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362982	Identifier	opline		1359456	0					
ANR	1362983	Identifier	opcode		1359456	1					
ANR	1362984	Identifier	ZEND_CONCAT		1359456	1					
ANR	1362985	EqualityExpression	opline -> opcode == ZEND_FAST_CONCAT		1359456	1		==			
ANR	1362986	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1362987	Identifier	opline		1359456	0					
ANR	1362988	Identifier	opcode		1359456	1					
ANR	1362989	Identifier	ZEND_FAST_CONCAT		1359456	1					
ANR	1362990	CompoundStatement		443:82:16742:16742	1359456	1					
ANR	1362991	IfStatement	if ( ( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING )		1359456	0					
ANR	1362992	Condition	( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING	1053:7:35059:35246	1359456	0	True				
ANR	1362993	AndExpression	( ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING		1359456	0		&&			
ANR	1362994	BitAndExpression	ZEND_OP1_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR )		1359456	0		&			
ANR	1362995	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1362996	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1362997	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1362998	ArgumentList	opline		1359456	1					
ANR	1362999	Argument	opline		1359456	0					
ANR	1363000	Identifier	opline		1359456	0					
ANR	1363001	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1359456	1		|			
ANR	1363002	Identifier	IS_TMP_VAR		1359456	0					
ANR	1363003	Identifier	IS_VAR		1359456	1					
ANR	1363004	AndExpression	VAR_SOURCE ( opline -> op1 ) && VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING		1359456	1		&&			
ANR	1363005	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363006	Callee	VAR_SOURCE		1359456	0					
ANR	1363007	Identifier	VAR_SOURCE		1359456	0					
ANR	1363008	ArgumentList	opline -> op1		1359456	1					
ANR	1363009	Argument	opline -> op1		1359456	0					
ANR	1363010	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363011	Identifier	opline		1359456	0					
ANR	1363012	Identifier	op1		1359456	1					
ANR	1363013	AndExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING		1359456	1		&&			
ANR	1363014	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_CAST		1359456	0		==			
ANR	1363015	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363016	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363017	Callee	VAR_SOURCE		1359456	0					
ANR	1363018	Identifier	VAR_SOURCE		1359456	0					
ANR	1363019	ArgumentList	opline -> op1		1359456	1					
ANR	1363020	Argument	opline -> op1		1359456	0					
ANR	1363021	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363022	Identifier	opline		1359456	0					
ANR	1363023	Identifier	op1		1359456	1					
ANR	1363024	Identifier	opcode		1359456	1					
ANR	1363025	Identifier	ZEND_CAST		1359456	1					
ANR	1363026	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> extended_value == IS_STRING		1359456	1		==			
ANR	1363027	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> extended_value		1359456	0					
ANR	1363028	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363029	Callee	VAR_SOURCE		1359456	0					
ANR	1363030	Identifier	VAR_SOURCE		1359456	0					
ANR	1363031	ArgumentList	opline -> op1		1359456	1					
ANR	1363032	Argument	opline -> op1		1359456	0					
ANR	1363033	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363034	Identifier	opline		1359456	0					
ANR	1363035	Identifier	op1		1359456	1					
ANR	1363036	Identifier	extended_value		1359456	1					
ANR	1363037	Identifier	IS_STRING		1359456	1					
ANR	1363038	CompoundStatement		449:4:17026:17064	1359456	1					
ANR	1363039	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op1 ) ;	1058:4:35334:35372	1359456	0	True				
ANR	1363040	IdentifierDecl	* src = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363041	IdentifierDeclType	zend_op *		1359456	0					
ANR	1363042	Identifier	src		1359456	1					
ANR	1363043	AssignmentExpression	* src = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1363044	Identifier	src		1359456	0					
ANR	1363045	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1363046	Callee	VAR_SOURCE		1359456	0					
ANR	1363047	Identifier	VAR_SOURCE		1359456	0					
ANR	1363048	ArgumentList	opline -> op1		1359456	1					
ANR	1363049	Argument	opline -> op1		1359456	0					
ANR	1363050	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363051	Identifier	opline		1359456	0					
ANR	1363052	Identifier	op1		1359456	1					
ANR	1363053	ExpressionStatement	VAR_UNSET ( opline -> op1 )	1059:4:35378:35400	1359456	1	True				
ANR	1363054	CallExpression	VAR_UNSET ( opline -> op1 )		1359456	0					
ANR	1363055	Callee	VAR_UNSET		1359456	0					
ANR	1363056	Identifier	VAR_UNSET		1359456	0					
ANR	1363057	ArgumentList	opline -> op1		1359456	1					
ANR	1363058	Argument	opline -> op1		1359456	0					
ANR	1363059	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363060	Identifier	opline		1359456	0					
ANR	1363061	Identifier	op1		1359456	1					
ANR	1363062	ExpressionStatement	"COPY_NODE ( opline -> op1 , src -> op1 )"	1060:4:35406:35438	1359456	2	True				
ANR	1363063	CallExpression	"COPY_NODE ( opline -> op1 , src -> op1 )"		1359456	0					
ANR	1363064	Callee	COPY_NODE		1359456	0					
ANR	1363065	Identifier	COPY_NODE		1359456	0					
ANR	1363066	ArgumentList	opline -> op1		1359456	1					
ANR	1363067	Argument	opline -> op1		1359456	0					
ANR	1363068	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363069	Identifier	opline		1359456	0					
ANR	1363070	Identifier	op1		1359456	1					
ANR	1363071	Argument	src -> op1		1359456	1					
ANR	1363072	PtrMemberAccess	src -> op1		1359456	0					
ANR	1363073	Identifier	src		1359456	0					
ANR	1363074	Identifier	op1		1359456	1					
ANR	1363075	ExpressionStatement	MAKE_NOP ( src )	1061:4:35444:35457	1359456	3	True				
ANR	1363076	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1363077	Callee	MAKE_NOP		1359456	0					
ANR	1363078	Identifier	MAKE_NOP		1359456	0					
ANR	1363079	ArgumentList	src		1359456	1					
ANR	1363080	Argument	src		1359456	0					
ANR	1363081	Identifier	src		1359456	0					
ANR	1363082	IfStatement	if ( ( ZEND_OP2_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op2 ) && VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op2 ) -> extended_value == IS_STRING )		1359456	1					
ANR	1363083	Condition	( ZEND_OP2_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op2 ) && VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op2 ) -> extended_value == IS_STRING	1063:7:35471:35658	1359456	0	True				
ANR	1363084	AndExpression	( ZEND_OP2_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR ) ) && VAR_SOURCE ( opline -> op2 ) && VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op2 ) -> extended_value == IS_STRING		1359456	0		&&			
ANR	1363085	BitAndExpression	ZEND_OP2_TYPE ( opline ) & ( IS_TMP_VAR | IS_VAR )		1359456	0		&			
ANR	1363086	CallExpression	ZEND_OP2_TYPE ( opline )		1359456	0					
ANR	1363087	Callee	ZEND_OP2_TYPE		1359456	0					
ANR	1363088	Identifier	ZEND_OP2_TYPE		1359456	0					
ANR	1363089	ArgumentList	opline		1359456	1					
ANR	1363090	Argument	opline		1359456	0					
ANR	1363091	Identifier	opline		1359456	0					
ANR	1363092	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		1359456	1		|			
ANR	1363093	Identifier	IS_TMP_VAR		1359456	0					
ANR	1363094	Identifier	IS_VAR		1359456	1					
ANR	1363095	AndExpression	VAR_SOURCE ( opline -> op2 ) && VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op2 ) -> extended_value == IS_STRING		1359456	1		&&			
ANR	1363096	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1363097	Callee	VAR_SOURCE		1359456	0					
ANR	1363098	Identifier	VAR_SOURCE		1359456	0					
ANR	1363099	ArgumentList	opline -> op2		1359456	1					
ANR	1363100	Argument	opline -> op2		1359456	0					
ANR	1363101	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363102	Identifier	opline		1359456	0					
ANR	1363103	Identifier	op2		1359456	1					
ANR	1363104	AndExpression	VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_CAST && VAR_SOURCE ( opline -> op2 ) -> extended_value == IS_STRING		1359456	1		&&			
ANR	1363105	EqualityExpression	VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_CAST		1359456	0		==			
ANR	1363106	PtrMemberAccess	VAR_SOURCE ( opline -> op2 ) -> opcode		1359456	0					
ANR	1363107	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1363108	Callee	VAR_SOURCE		1359456	0					
ANR	1363109	Identifier	VAR_SOURCE		1359456	0					
ANR	1363110	ArgumentList	opline -> op2		1359456	1					
ANR	1363111	Argument	opline -> op2		1359456	0					
ANR	1363112	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363113	Identifier	opline		1359456	0					
ANR	1363114	Identifier	op2		1359456	1					
ANR	1363115	Identifier	opcode		1359456	1					
ANR	1363116	Identifier	ZEND_CAST		1359456	1					
ANR	1363117	EqualityExpression	VAR_SOURCE ( opline -> op2 ) -> extended_value == IS_STRING		1359456	1		==			
ANR	1363118	PtrMemberAccess	VAR_SOURCE ( opline -> op2 ) -> extended_value		1359456	0					
ANR	1363119	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1363120	Callee	VAR_SOURCE		1359456	0					
ANR	1363121	Identifier	VAR_SOURCE		1359456	0					
ANR	1363122	ArgumentList	opline -> op2		1359456	1					
ANR	1363123	Argument	opline -> op2		1359456	0					
ANR	1363124	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363125	Identifier	opline		1359456	0					
ANR	1363126	Identifier	op2		1359456	1					
ANR	1363127	Identifier	extended_value		1359456	1					
ANR	1363128	Identifier	IS_STRING		1359456	1					
ANR	1363129	CompoundStatement		459:4:17438:17476	1359456	1					
ANR	1363130	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op2 ) ;	1068:4:35746:35784	1359456	0	True				
ANR	1363131	IdentifierDecl	* src = VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1363132	IdentifierDeclType	zend_op *		1359456	0					
ANR	1363133	Identifier	src		1359456	1					
ANR	1363134	AssignmentExpression	* src = VAR_SOURCE ( opline -> op2 )		1359456	2		=			
ANR	1363135	Identifier	src		1359456	0					
ANR	1363136	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	1					
ANR	1363137	Callee	VAR_SOURCE		1359456	0					
ANR	1363138	Identifier	VAR_SOURCE		1359456	0					
ANR	1363139	ArgumentList	opline -> op2		1359456	1					
ANR	1363140	Argument	opline -> op2		1359456	0					
ANR	1363141	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363142	Identifier	opline		1359456	0					
ANR	1363143	Identifier	op2		1359456	1					
ANR	1363144	ExpressionStatement	VAR_UNSET ( opline -> op2 )	1069:4:35790:35812	1359456	1	True				
ANR	1363145	CallExpression	VAR_UNSET ( opline -> op2 )		1359456	0					
ANR	1363146	Callee	VAR_UNSET		1359456	0					
ANR	1363147	Identifier	VAR_UNSET		1359456	0					
ANR	1363148	ArgumentList	opline -> op2		1359456	1					
ANR	1363149	Argument	opline -> op2		1359456	0					
ANR	1363150	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363151	Identifier	opline		1359456	0					
ANR	1363152	Identifier	op2		1359456	1					
ANR	1363153	ExpressionStatement	"COPY_NODE ( opline -> op2 , src -> op1 )"	1070:4:35818:35850	1359456	2	True				
ANR	1363154	CallExpression	"COPY_NODE ( opline -> op2 , src -> op1 )"		1359456	0					
ANR	1363155	Callee	COPY_NODE		1359456	0					
ANR	1363156	Identifier	COPY_NODE		1359456	0					
ANR	1363157	ArgumentList	opline -> op2		1359456	1					
ANR	1363158	Argument	opline -> op2		1359456	0					
ANR	1363159	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363160	Identifier	opline		1359456	0					
ANR	1363161	Identifier	op2		1359456	1					
ANR	1363162	Argument	src -> op1		1359456	1					
ANR	1363163	PtrMemberAccess	src -> op1		1359456	0					
ANR	1363164	Identifier	src		1359456	0					
ANR	1363165	Identifier	op1		1359456	1					
ANR	1363166	ExpressionStatement	MAKE_NOP ( src )	1071:4:35856:35869	1359456	3	True				
ANR	1363167	CallExpression	MAKE_NOP ( src )		1359456	0					
ANR	1363168	Callee	MAKE_NOP		1359456	0					
ANR	1363169	Identifier	MAKE_NOP		1359456	0					
ANR	1363170	ArgumentList	src		1359456	1					
ANR	1363171	Argument	src		1359456	0					
ANR	1363172	Identifier	src		1359456	0					
ANR	1363173	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING && Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) ) == 0 )		1359456	2					
ANR	1363174	Condition	ZEND_OP1_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING && Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) ) == 0	1073:7:35883:36021	1359456	0	True				
ANR	1363175	AndExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING && Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) ) == 0		1359456	0		&&			
ANR	1363176	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST		1359456	0		==			
ANR	1363177	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1363178	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1363179	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1363180	ArgumentList	opline		1359456	1					
ANR	1363181	Argument	opline		1359456	0					
ANR	1363182	Identifier	opline		1359456	0					
ANR	1363183	Identifier	IS_CONST		1359456	1					
ANR	1363184	AndExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING && Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) ) == 0		1359456	1		&&			
ANR	1363185	EqualityExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) ) == IS_STRING		1359456	0		==			
ANR	1363186	CallExpression	Z_TYPE ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1363187	Callee	Z_TYPE		1359456	0					
ANR	1363188	Identifier	Z_TYPE		1359456	0					
ANR	1363189	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1363190	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1363191	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1363192	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1363193	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1363194	ArgumentList	opline		1359456	1					
ANR	1363195	Argument	opline		1359456	0					
ANR	1363196	Identifier	opline		1359456	0					
ANR	1363197	Identifier	IS_STRING		1359456	1					
ANR	1363198	EqualityExpression	Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) ) == 0		1359456	1		==			
ANR	1363199	CallExpression	Z_STRLEN ( ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1363200	Callee	Z_STRLEN		1359456	0					
ANR	1363201	Identifier	Z_STRLEN		1359456	0					
ANR	1363202	ArgumentList	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1363203	Argument	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1363204	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1363205	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1363206	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1363207	ArgumentList	opline		1359456	1					
ANR	1363208	Argument	opline		1359456	0					
ANR	1363209	Identifier	opline		1359456	0					
ANR	1363210	PrimaryExpression	0		1359456	1					
ANR	1363211	CompoundStatement		466:48:17716:17716	1359456	1					
ANR	1363212	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )	1077:4:36081:36120	1359456	0	True				
ANR	1363213	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )		1359456	0					
ANR	1363214	Callee	literal_dtor		1359456	0					
ANR	1363215	Identifier	literal_dtor		1359456	0					
ANR	1363216	ArgumentList	& ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1363217	Argument	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1363218	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		1359456	0					
ANR	1363219	UnaryOperator	&		1359456	0					
ANR	1363220	CallExpression	ZEND_OP1_LITERAL ( opline )		1359456	1					
ANR	1363221	Callee	ZEND_OP1_LITERAL		1359456	0					
ANR	1363222	Identifier	ZEND_OP1_LITERAL		1359456	0					
ANR	1363223	ArgumentList	opline		1359456	1					
ANR	1363224	Argument	opline		1359456	0					
ANR	1363225	Identifier	opline		1359456	0					
ANR	1363226	ExpressionStatement	opline -> opcode = ZEND_CAST	1078:4:36126:36152	1359456	1	True				
ANR	1363227	AssignmentExpression	opline -> opcode = ZEND_CAST		1359456	0		=			
ANR	1363228	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1363229	Identifier	opline		1359456	0					
ANR	1363230	Identifier	opcode		1359456	1					
ANR	1363231	Identifier	ZEND_CAST		1359456	1					
ANR	1363232	ExpressionStatement	opline -> extended_value = IS_STRING	1079:4:36158:36192	1359456	2	True				
ANR	1363233	AssignmentExpression	opline -> extended_value = IS_STRING		1359456	0		=			
ANR	1363234	PtrMemberAccess	opline -> extended_value		1359456	0					
ANR	1363235	Identifier	opline		1359456	0					
ANR	1363236	Identifier	extended_value		1359456	1					
ANR	1363237	Identifier	IS_STRING		1359456	1					
ANR	1363238	ExpressionStatement	"COPY_NODE ( opline -> op1 , opline -> op2 )"	1080:4:36198:36233	1359456	3	True				
ANR	1363239	CallExpression	"COPY_NODE ( opline -> op1 , opline -> op2 )"		1359456	0					
ANR	1363240	Callee	COPY_NODE		1359456	0					
ANR	1363241	Identifier	COPY_NODE		1359456	0					
ANR	1363242	ArgumentList	opline -> op1		1359456	1					
ANR	1363243	Argument	opline -> op1		1359456	0					
ANR	1363244	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363245	Identifier	opline		1359456	0					
ANR	1363246	Identifier	op1		1359456	1					
ANR	1363247	Argument	opline -> op2		1359456	1					
ANR	1363248	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363249	Identifier	opline		1359456	0					
ANR	1363250	Identifier	op2		1359456	1					
ANR	1363251	ExpressionStatement	opline -> op2_type = IS_UNUSED	1081:4:36239:36267	1359456	4	True				
ANR	1363252	AssignmentExpression	opline -> op2_type = IS_UNUSED		1359456	0		=			
ANR	1363253	PtrMemberAccess	opline -> op2_type		1359456	0					
ANR	1363254	Identifier	opline		1359456	0					
ANR	1363255	Identifier	op2_type		1359456	1					
ANR	1363256	Identifier	IS_UNUSED		1359456	1					
ANR	1363257	ExpressionStatement	opline -> op2 . var = 0	1082:4:36273:36292	1359456	5	True				
ANR	1363258	AssignmentExpression	opline -> op2 . var = 0		1359456	0		=			
ANR	1363259	MemberAccess	opline -> op2 . var		1359456	0					
ANR	1363260	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363261	Identifier	opline		1359456	0					
ANR	1363262	Identifier	op2		1359456	1					
ANR	1363263	Identifier	var		1359456	1					
ANR	1363264	PrimaryExpression	0		1359456	1					
ANR	1363265	ElseStatement	else		1359456	0					
ANR	1363266	IfStatement	if ( ZEND_OP2_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING && Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) ) == 0 )		1359456	0					
ANR	1363267	Condition	ZEND_OP2_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING && Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) ) == 0	1083:14:36308:36460	1359456	0	True				
ANR	1363268	AndExpression	ZEND_OP2_TYPE ( opline ) == IS_CONST && Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING && Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) ) == 0		1359456	0		&&			
ANR	1363269	EqualityExpression	ZEND_OP2_TYPE ( opline ) == IS_CONST		1359456	0		==			
ANR	1363270	CallExpression	ZEND_OP2_TYPE ( opline )		1359456	0					
ANR	1363271	Callee	ZEND_OP2_TYPE		1359456	0					
ANR	1363272	Identifier	ZEND_OP2_TYPE		1359456	0					
ANR	1363273	ArgumentList	opline		1359456	1					
ANR	1363274	Argument	opline		1359456	0					
ANR	1363275	Identifier	opline		1359456	0					
ANR	1363276	Identifier	IS_CONST		1359456	1					
ANR	1363277	AndExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING && Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) ) == 0		1359456	1		&&			
ANR	1363278	EqualityExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) ) == IS_STRING		1359456	0		==			
ANR	1363279	CallExpression	Z_TYPE ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1363280	Callee	Z_TYPE		1359456	0					
ANR	1363281	Identifier	Z_TYPE		1359456	0					
ANR	1363282	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1363283	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1363284	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1363285	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1363286	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1363287	ArgumentList	opline		1359456	1					
ANR	1363288	Argument	opline		1359456	0					
ANR	1363289	Identifier	opline		1359456	0					
ANR	1363290	Identifier	IS_STRING		1359456	1					
ANR	1363291	EqualityExpression	Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) ) == 0		1359456	1		==			
ANR	1363292	CallExpression	Z_STRLEN ( ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1363293	Callee	Z_STRLEN		1359456	0					
ANR	1363294	Identifier	Z_STRLEN		1359456	0					
ANR	1363295	ArgumentList	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1363296	Argument	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1363297	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1363298	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1363299	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1363300	ArgumentList	opline		1359456	1					
ANR	1363301	Argument	opline		1359456	0					
ANR	1363302	Identifier	opline		1359456	0					
ANR	1363303	PrimaryExpression	0		1359456	1					
ANR	1363304	CompoundStatement		476:55:18155:18155	1359456	1					
ANR	1363305	ExpressionStatement	literal_dtor ( & ZEND_OP2_LITERAL ( opline ) )	1087:4:36520:36559	1359456	0	True				
ANR	1363306	CallExpression	literal_dtor ( & ZEND_OP2_LITERAL ( opline ) )		1359456	0					
ANR	1363307	Callee	literal_dtor		1359456	0					
ANR	1363308	Identifier	literal_dtor		1359456	0					
ANR	1363309	ArgumentList	& ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1363310	Argument	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1363311	UnaryOperationExpression	& ZEND_OP2_LITERAL ( opline )		1359456	0					
ANR	1363312	UnaryOperator	&		1359456	0					
ANR	1363313	CallExpression	ZEND_OP2_LITERAL ( opline )		1359456	1					
ANR	1363314	Callee	ZEND_OP2_LITERAL		1359456	0					
ANR	1363315	Identifier	ZEND_OP2_LITERAL		1359456	0					
ANR	1363316	ArgumentList	opline		1359456	1					
ANR	1363317	Argument	opline		1359456	0					
ANR	1363318	Identifier	opline		1359456	0					
ANR	1363319	ExpressionStatement	opline -> opcode = ZEND_CAST	1088:4:36565:36591	1359456	1	True				
ANR	1363320	AssignmentExpression	opline -> opcode = ZEND_CAST		1359456	0		=			
ANR	1363321	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1363322	Identifier	opline		1359456	0					
ANR	1363323	Identifier	opcode		1359456	1					
ANR	1363324	Identifier	ZEND_CAST		1359456	1					
ANR	1363325	ExpressionStatement	opline -> extended_value = IS_STRING	1089:4:36597:36631	1359456	2	True				
ANR	1363326	AssignmentExpression	opline -> extended_value = IS_STRING		1359456	0		=			
ANR	1363327	PtrMemberAccess	opline -> extended_value		1359456	0					
ANR	1363328	Identifier	opline		1359456	0					
ANR	1363329	Identifier	extended_value		1359456	1					
ANR	1363330	Identifier	IS_STRING		1359456	1					
ANR	1363331	ExpressionStatement	opline -> op2_type = IS_UNUSED	1090:4:36637:36665	1359456	3	True				
ANR	1363332	AssignmentExpression	opline -> op2_type = IS_UNUSED		1359456	0		=			
ANR	1363333	PtrMemberAccess	opline -> op2_type		1359456	0					
ANR	1363334	Identifier	opline		1359456	0					
ANR	1363335	Identifier	op2_type		1359456	1					
ANR	1363336	Identifier	IS_UNUSED		1359456	1					
ANR	1363337	ExpressionStatement	opline -> op2 . var = 0	1091:4:36671:36690	1359456	4	True				
ANR	1363338	AssignmentExpression	opline -> op2 . var = 0		1359456	0		=			
ANR	1363339	MemberAccess	opline -> op2 . var		1359456	0					
ANR	1363340	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363341	Identifier	opline		1359456	0					
ANR	1363342	Identifier	op2		1359456	1					
ANR	1363343	Identifier	var		1359456	1					
ANR	1363344	PrimaryExpression	0		1359456	1					
ANR	1363345	ElseStatement	else		1359456	0					
ANR	1363346	IfStatement	if ( opline -> opcode == ZEND_CONCAT && ( opline -> op1_type == IS_CONST || ( opline -> op1_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT ) ) ) && ( opline -> op2_type == IS_CONST || ( opline -> op2_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op2 ) && ( VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT ) ) ) )		1359456	0					
ANR	1363347	Condition	opline -> opcode == ZEND_CONCAT && ( opline -> op1_type == IS_CONST || ( opline -> op1_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT ) ) ) && ( opline -> op2_type == IS_CONST || ( opline -> op2_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op2 ) && ( VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT ) ) )	1092:14:36706:37452	1359456	0	True				
ANR	1363348	AndExpression	opline -> opcode == ZEND_CONCAT && ( opline -> op1_type == IS_CONST || ( opline -> op1_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT ) ) ) && ( opline -> op2_type == IS_CONST || ( opline -> op2_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op2 ) && ( VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT ) ) )		1359456	0		&&			
ANR	1363349	EqualityExpression	opline -> opcode == ZEND_CONCAT		1359456	0		==			
ANR	1363350	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1363351	Identifier	opline		1359456	0					
ANR	1363352	Identifier	opcode		1359456	1					
ANR	1363353	Identifier	ZEND_CONCAT		1359456	1					
ANR	1363354	AndExpression	( opline -> op1_type == IS_CONST || ( opline -> op1_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT ) ) ) && ( opline -> op2_type == IS_CONST || ( opline -> op2_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op2 ) && ( VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT ) ) )		1359456	1		&&			
ANR	1363355	OrExpression	opline -> op1_type == IS_CONST || ( opline -> op1_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT ) )		1359456	0		||			
ANR	1363356	EqualityExpression	opline -> op1_type == IS_CONST		1359456	0		==			
ANR	1363357	PtrMemberAccess	opline -> op1_type		1359456	0					
ANR	1363358	Identifier	opline		1359456	0					
ANR	1363359	Identifier	op1_type		1359456	1					
ANR	1363360	Identifier	IS_CONST		1359456	1					
ANR	1363361	AndExpression	opline -> op1_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT )		1359456	1		&&			
ANR	1363362	EqualityExpression	opline -> op1_type == IS_TMP_VAR		1359456	0		==			
ANR	1363363	PtrMemberAccess	opline -> op1_type		1359456	0					
ANR	1363364	Identifier	opline		1359456	0					
ANR	1363365	Identifier	op1_type		1359456	1					
ANR	1363366	Identifier	IS_TMP_VAR		1359456	1					
ANR	1363367	AndExpression	VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT )		1359456	1		&&			
ANR	1363368	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363369	Callee	VAR_SOURCE		1359456	0					
ANR	1363370	Identifier	VAR_SOURCE		1359456	0					
ANR	1363371	ArgumentList	opline -> op1		1359456	1					
ANR	1363372	Argument	opline -> op1		1359456	0					
ANR	1363373	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363374	Identifier	opline		1359456	0					
ANR	1363375	Identifier	op1		1359456	1					
ANR	1363376	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT		1359456	1		||			
ANR	1363377	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FAST_CONCAT		1359456	0		==			
ANR	1363378	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363379	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363380	Callee	VAR_SOURCE		1359456	0					
ANR	1363381	Identifier	VAR_SOURCE		1359456	0					
ANR	1363382	ArgumentList	opline -> op1		1359456	1					
ANR	1363383	Argument	opline -> op1		1359456	0					
ANR	1363384	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363385	Identifier	opline		1359456	0					
ANR	1363386	Identifier	op1		1359456	1					
ANR	1363387	Identifier	opcode		1359456	1					
ANR	1363388	Identifier	ZEND_FAST_CONCAT		1359456	1					
ANR	1363389	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT		1359456	1		||			
ANR	1363390	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ROPE_END		1359456	0		==			
ANR	1363391	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363392	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363393	Callee	VAR_SOURCE		1359456	0					
ANR	1363394	Identifier	VAR_SOURCE		1359456	0					
ANR	1363395	ArgumentList	opline -> op1		1359456	1					
ANR	1363396	Argument	opline -> op1		1359456	0					
ANR	1363397	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363398	Identifier	opline		1359456	0					
ANR	1363399	Identifier	op1		1359456	1					
ANR	1363400	Identifier	opcode		1359456	1					
ANR	1363401	Identifier	ZEND_ROPE_END		1359456	1					
ANR	1363402	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_FETCH_CONSTANT		1359456	1		==			
ANR	1363403	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363404	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363405	Callee	VAR_SOURCE		1359456	0					
ANR	1363406	Identifier	VAR_SOURCE		1359456	0					
ANR	1363407	ArgumentList	opline -> op1		1359456	1					
ANR	1363408	Argument	opline -> op1		1359456	0					
ANR	1363409	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363410	Identifier	opline		1359456	0					
ANR	1363411	Identifier	op1		1359456	1					
ANR	1363412	Identifier	opcode		1359456	1					
ANR	1363413	Identifier	ZEND_FETCH_CONSTANT		1359456	1					
ANR	1363414	OrExpression	opline -> op2_type == IS_CONST || ( opline -> op2_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op2 ) && ( VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT ) )		1359456	1		||			
ANR	1363415	EqualityExpression	opline -> op2_type == IS_CONST		1359456	0		==			
ANR	1363416	PtrMemberAccess	opline -> op2_type		1359456	0					
ANR	1363417	Identifier	opline		1359456	0					
ANR	1363418	Identifier	op2_type		1359456	1					
ANR	1363419	Identifier	IS_CONST		1359456	1					
ANR	1363420	AndExpression	opline -> op2_type == IS_TMP_VAR && VAR_SOURCE ( opline -> op2 ) && ( VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT )		1359456	1		&&			
ANR	1363421	EqualityExpression	opline -> op2_type == IS_TMP_VAR		1359456	0		==			
ANR	1363422	PtrMemberAccess	opline -> op2_type		1359456	0					
ANR	1363423	Identifier	opline		1359456	0					
ANR	1363424	Identifier	op2_type		1359456	1					
ANR	1363425	Identifier	IS_TMP_VAR		1359456	1					
ANR	1363426	AndExpression	VAR_SOURCE ( opline -> op2 ) && ( VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT )		1359456	1		&&			
ANR	1363427	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1363428	Callee	VAR_SOURCE		1359456	0					
ANR	1363429	Identifier	VAR_SOURCE		1359456	0					
ANR	1363430	ArgumentList	opline -> op2		1359456	1					
ANR	1363431	Argument	opline -> op2		1359456	0					
ANR	1363432	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363433	Identifier	opline		1359456	0					
ANR	1363434	Identifier	op2		1359456	1					
ANR	1363435	OrExpression	VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FAST_CONCAT || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT		1359456	1		||			
ANR	1363436	EqualityExpression	VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FAST_CONCAT		1359456	0		==			
ANR	1363437	PtrMemberAccess	VAR_SOURCE ( opline -> op2 ) -> opcode		1359456	0					
ANR	1363438	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1363439	Callee	VAR_SOURCE		1359456	0					
ANR	1363440	Identifier	VAR_SOURCE		1359456	0					
ANR	1363441	ArgumentList	opline -> op2		1359456	1					
ANR	1363442	Argument	opline -> op2		1359456	0					
ANR	1363443	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363444	Identifier	opline		1359456	0					
ANR	1363445	Identifier	op2		1359456	1					
ANR	1363446	Identifier	opcode		1359456	1					
ANR	1363447	Identifier	ZEND_FAST_CONCAT		1359456	1					
ANR	1363448	OrExpression	VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END || VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT		1359456	1		||			
ANR	1363449	EqualityExpression	VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_ROPE_END		1359456	0		==			
ANR	1363450	PtrMemberAccess	VAR_SOURCE ( opline -> op2 ) -> opcode		1359456	0					
ANR	1363451	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1363452	Callee	VAR_SOURCE		1359456	0					
ANR	1363453	Identifier	VAR_SOURCE		1359456	0					
ANR	1363454	ArgumentList	opline -> op2		1359456	1					
ANR	1363455	Argument	opline -> op2		1359456	0					
ANR	1363456	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363457	Identifier	opline		1359456	0					
ANR	1363458	Identifier	op2		1359456	1					
ANR	1363459	Identifier	opcode		1359456	1					
ANR	1363460	Identifier	ZEND_ROPE_END		1359456	1					
ANR	1363461	EqualityExpression	VAR_SOURCE ( opline -> op2 ) -> opcode == ZEND_FETCH_CONSTANT		1359456	1		==			
ANR	1363462	PtrMemberAccess	VAR_SOURCE ( opline -> op2 ) -> opcode		1359456	0					
ANR	1363463	CallExpression	VAR_SOURCE ( opline -> op2 )		1359456	0					
ANR	1363464	Callee	VAR_SOURCE		1359456	0					
ANR	1363465	Identifier	VAR_SOURCE		1359456	0					
ANR	1363466	ArgumentList	opline -> op2		1359456	1					
ANR	1363467	Argument	opline -> op2		1359456	0					
ANR	1363468	PtrMemberAccess	opline -> op2		1359456	0					
ANR	1363469	Identifier	opline		1359456	0					
ANR	1363470	Identifier	op2		1359456	1					
ANR	1363471	Identifier	opcode		1359456	1					
ANR	1363472	Identifier	ZEND_FETCH_CONSTANT		1359456	1					
ANR	1363473	CompoundStatement		495:76:19147:19147	1359456	1					
ANR	1363474	ExpressionStatement	opline -> opcode = ZEND_FAST_CONCAT	1105:4:37461:37494	1359456	0	True				
ANR	1363475	AssignmentExpression	opline -> opcode = ZEND_FAST_CONCAT		1359456	0		=			
ANR	1363476	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1363477	Identifier	opline		1359456	0					
ANR	1363478	Identifier	opcode		1359456	1					
ANR	1363479	Identifier	ZEND_FAST_CONCAT		1359456	1					
ANR	1363480	ElseStatement	else		1359456	0					
ANR	1363481	IfStatement	if ( opline -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( opline ) == ZEND_RESULT_TYPE ( opline ) && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var )		1359456	0					
ANR	1363482	Condition	opline -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( opline ) == ZEND_RESULT_TYPE ( opline ) && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var	1107:13:37514:37659	1359456	0	True				
ANR	1363483	AndExpression	opline -> opcode == ZEND_QM_ASSIGN && ZEND_OP1_TYPE ( opline ) == ZEND_RESULT_TYPE ( opline ) && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var		1359456	0		&&			
ANR	1363484	EqualityExpression	opline -> opcode == ZEND_QM_ASSIGN		1359456	0		==			
ANR	1363485	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1363486	Identifier	opline		1359456	0					
ANR	1363487	Identifier	opcode		1359456	1					
ANR	1363488	Identifier	ZEND_QM_ASSIGN		1359456	1					
ANR	1363489	AndExpression	ZEND_OP1_TYPE ( opline ) == ZEND_RESULT_TYPE ( opline ) && ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var		1359456	1		&&			
ANR	1363490	EqualityExpression	ZEND_OP1_TYPE ( opline ) == ZEND_RESULT_TYPE ( opline )		1359456	0		==			
ANR	1363491	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1363492	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1363493	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1363494	ArgumentList	opline		1359456	1					
ANR	1363495	Argument	opline		1359456	0					
ANR	1363496	Identifier	opline		1359456	0					
ANR	1363497	CallExpression	ZEND_RESULT_TYPE ( opline )		1359456	1					
ANR	1363498	Callee	ZEND_RESULT_TYPE		1359456	0					
ANR	1363499	Identifier	ZEND_RESULT_TYPE		1359456	0					
ANR	1363500	ArgumentList	opline		1359456	1					
ANR	1363501	Argument	opline		1359456	0					
ANR	1363502	Identifier	opline		1359456	0					
ANR	1363503	EqualityExpression	ZEND_OP1 ( opline ) . var == ZEND_RESULT ( opline ) . var		1359456	1		==			
ANR	1363504	MemberAccess	ZEND_OP1 ( opline ) . var		1359456	0					
ANR	1363505	CallExpression	ZEND_OP1 ( opline )		1359456	0					
ANR	1363506	Callee	ZEND_OP1		1359456	0					
ANR	1363507	Identifier	ZEND_OP1		1359456	0					
ANR	1363508	ArgumentList	opline		1359456	1					
ANR	1363509	Argument	opline		1359456	0					
ANR	1363510	Identifier	opline		1359456	0					
ANR	1363511	Identifier	var		1359456	1					
ANR	1363512	MemberAccess	ZEND_RESULT ( opline ) . var		1359456	1					
ANR	1363513	CallExpression	ZEND_RESULT ( opline )		1359456	0					
ANR	1363514	Callee	ZEND_RESULT		1359456	0					
ANR	1363515	Identifier	ZEND_RESULT		1359456	0					
ANR	1363516	ArgumentList	opline		1359456	1					
ANR	1363517	Argument	opline		1359456	0					
ANR	1363518	Identifier	opline		1359456	0					
ANR	1363519	Identifier	var		1359456	1					
ANR	1363520	CompoundStatement		500:54:19354:19354	1359456	1					
ANR	1363521	ExpressionStatement	MAKE_NOP ( opline )	1111:3:37699:37715	1359456	0	True				
ANR	1363522	CallExpression	MAKE_NOP ( opline )		1359456	0					
ANR	1363523	Callee	MAKE_NOP		1359456	0					
ANR	1363524	Identifier	MAKE_NOP		1359456	0					
ANR	1363525	ArgumentList	opline		1359456	1					
ANR	1363526	Argument	opline		1359456	0					
ANR	1363527	Identifier	opline		1359456	0					
ANR	1363528	ElseStatement	else		1359456	0					
ANR	1363529	IfStatement	"if ( opline -> opcode == ZEND_BOOL && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ ) && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) ) )"		1359456	0					
ANR	1363530	Condition	"opline -> opcode == ZEND_BOOL && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ ) && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"	1112:13:37730:38459	1359456	0	True				
ANR	1363531	AndExpression	"opline -> opcode == ZEND_BOOL && ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ ) && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	0		&&			
ANR	1363532	EqualityExpression	opline -> opcode == ZEND_BOOL		1359456	0		==			
ANR	1363533	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1363534	Identifier	opline		1359456	0					
ANR	1363535	Identifier	opcode		1359456	1					
ANR	1363536	Identifier	ZEND_BOOL		1359456	1					
ANR	1363537	AndExpression	"ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR && VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ ) && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	1		&&			
ANR	1363538	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		1359456	0		==			
ANR	1363539	CallExpression	ZEND_OP1_TYPE ( opline )		1359456	0					
ANR	1363540	Callee	ZEND_OP1_TYPE		1359456	0					
ANR	1363541	Identifier	ZEND_OP1_TYPE		1359456	0					
ANR	1363542	ArgumentList	opline		1359456	1					
ANR	1363543	Argument	opline		1359456	0					
ANR	1363544	Identifier	opline		1359456	0					
ANR	1363545	Identifier	IS_TMP_VAR		1359456	1					
ANR	1363546	AndExpression	"VAR_SOURCE ( opline -> op1 ) && ( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ ) && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	1		&&			
ANR	1363547	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363548	Callee	VAR_SOURCE		1359456	0					
ANR	1363549	Identifier	VAR_SOURCE		1359456	0					
ANR	1363550	ArgumentList	opline -> op1		1359456	1					
ANR	1363551	Argument	opline -> op1		1359456	0					
ANR	1363552	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363553	Identifier	opline		1359456	0					
ANR	1363554	Identifier	op1		1359456	1					
ANR	1363555	AndExpression	"( VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ ) && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	1		&&			
ANR	1363556	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	0		||			
ANR	1363557	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_EQUAL		1359456	0		==			
ANR	1363558	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363559	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363560	Callee	VAR_SOURCE		1359456	0					
ANR	1363561	Identifier	VAR_SOURCE		1359456	0					
ANR	1363562	ArgumentList	opline -> op1		1359456	1					
ANR	1363563	Argument	opline -> op1		1359456	0					
ANR	1363564	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363565	Identifier	opline		1359456	0					
ANR	1363566	Identifier	op1		1359456	1					
ANR	1363567	Identifier	opcode		1359456	1					
ANR	1363568	Identifier	ZEND_IS_EQUAL		1359456	1					
ANR	1363569	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	1		||			
ANR	1363570	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_EQUAL		1359456	0		==			
ANR	1363571	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363572	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363573	Callee	VAR_SOURCE		1359456	0					
ANR	1363574	Identifier	VAR_SOURCE		1359456	0					
ANR	1363575	ArgumentList	opline -> op1		1359456	1					
ANR	1363576	Argument	opline -> op1		1359456	0					
ANR	1363577	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363578	Identifier	opline		1359456	0					
ANR	1363579	Identifier	op1		1359456	1					
ANR	1363580	Identifier	opcode		1359456	1					
ANR	1363581	Identifier	ZEND_IS_NOT_EQUAL		1359456	1					
ANR	1363582	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	1		||			
ANR	1363583	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER		1359456	0		==			
ANR	1363584	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363585	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363586	Callee	VAR_SOURCE		1359456	0					
ANR	1363587	Identifier	VAR_SOURCE		1359456	0					
ANR	1363588	ArgumentList	opline -> op1		1359456	1					
ANR	1363589	Argument	opline -> op1		1359456	0					
ANR	1363590	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363591	Identifier	opline		1359456	0					
ANR	1363592	Identifier	op1		1359456	1					
ANR	1363593	Identifier	opcode		1359456	1					
ANR	1363594	Identifier	ZEND_IS_SMALLER		1359456	1					
ANR	1363595	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	1		||			
ANR	1363596	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_SMALLER_OR_EQUAL		1359456	0		==			
ANR	1363597	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363598	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363599	Callee	VAR_SOURCE		1359456	0					
ANR	1363600	Identifier	VAR_SOURCE		1359456	0					
ANR	1363601	ArgumentList	opline -> op1		1359456	1					
ANR	1363602	Argument	opline -> op1		1359456	0					
ANR	1363603	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363604	Identifier	opline		1359456	0					
ANR	1363605	Identifier	op1		1359456	1					
ANR	1363606	Identifier	opcode		1359456	1					
ANR	1363607	Identifier	ZEND_IS_SMALLER_OR_EQUAL		1359456	1					
ANR	1363608	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	1		||			
ANR	1363609	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_BOOL		1359456	0		==			
ANR	1363610	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363611	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363612	Callee	VAR_SOURCE		1359456	0					
ANR	1363613	Identifier	VAR_SOURCE		1359456	0					
ANR	1363614	ArgumentList	opline -> op1		1359456	1					
ANR	1363615	Argument	opline -> op1		1359456	0					
ANR	1363616	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363617	Identifier	opline		1359456	0					
ANR	1363618	Identifier	op1		1359456	1					
ANR	1363619	Identifier	opcode		1359456	1					
ANR	1363620	Identifier	ZEND_BOOL		1359456	1					
ANR	1363621	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	1		||			
ANR	1363622	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_IDENTICAL		1359456	0		==			
ANR	1363623	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363624	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363625	Callee	VAR_SOURCE		1359456	0					
ANR	1363626	Identifier	VAR_SOURCE		1359456	0					
ANR	1363627	ArgumentList	opline -> op1		1359456	1					
ANR	1363628	Argument	opline -> op1		1359456	0					
ANR	1363629	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363630	Identifier	opline		1359456	0					
ANR	1363631	Identifier	op1		1359456	1					
ANR	1363632	Identifier	opcode		1359456	1					
ANR	1363633	Identifier	ZEND_IS_IDENTICAL		1359456	1					
ANR	1363634	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	1		||			
ANR	1363635	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_IS_NOT_IDENTICAL		1359456	0		==			
ANR	1363636	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363637	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363638	Callee	VAR_SOURCE		1359456	0					
ANR	1363639	Identifier	VAR_SOURCE		1359456	0					
ANR	1363640	ArgumentList	opline -> op1		1359456	1					
ANR	1363641	Argument	opline -> op1		1359456	0					
ANR	1363642	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363643	Identifier	opline		1359456	0					
ANR	1363644	Identifier	op1		1359456	1					
ANR	1363645	Identifier	opcode		1359456	1					
ANR	1363646	Identifier	ZEND_IS_NOT_IDENTICAL		1359456	1					
ANR	1363647	OrExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR || VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	1		||			
ANR	1363648	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_VAR		1359456	0		==			
ANR	1363649	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363650	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363651	Callee	VAR_SOURCE		1359456	0					
ANR	1363652	Identifier	VAR_SOURCE		1359456	0					
ANR	1363653	ArgumentList	opline -> op1		1359456	1					
ANR	1363654	Argument	opline -> op1		1359456	0					
ANR	1363655	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363656	Identifier	opline		1359456	0					
ANR	1363657	Identifier	op1		1359456	1					
ANR	1363658	Identifier	opcode		1359456	1					
ANR	1363659	Identifier	ZEND_ISSET_ISEMPTY_VAR		1359456	1					
ANR	1363660	EqualityExpression	VAR_SOURCE ( opline -> op1 ) -> opcode == ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	1		==			
ANR	1363661	PtrMemberAccess	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456	0					
ANR	1363662	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363663	Callee	VAR_SOURCE		1359456	0					
ANR	1363664	Identifier	VAR_SOURCE		1359456	0					
ANR	1363665	ArgumentList	opline -> op1		1359456	1					
ANR	1363666	Argument	opline -> op1		1359456	0					
ANR	1363667	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363668	Identifier	opline		1359456	0					
ANR	1363669	Identifier	op1		1359456	1					
ANR	1363670	Identifier	opcode		1359456	1					
ANR	1363671	Identifier	ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456	1					
ANR	1363672	UnaryOperationExpression	"! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	1					
ANR	1363673	UnaryOperator	!		1359456	0					
ANR	1363674	CallExpression	"zend_bitset_in ( used_ext , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1359456	1					
ANR	1363675	Callee	zend_bitset_in		1359456	0					
ANR	1363676	Identifier	zend_bitset_in		1359456	0					
ANR	1363677	ArgumentList	used_ext		1359456	1					
ANR	1363678	Argument	used_ext		1359456	0					
ANR	1363679	Identifier	used_ext		1359456	0					
ANR	1363680	Argument	VAR_NUM ( ZEND_OP1 ( opline ) . var )		1359456	1					
ANR	1363681	CallExpression	VAR_NUM ( ZEND_OP1 ( opline ) . var )		1359456	0					
ANR	1363682	Callee	VAR_NUM		1359456	0					
ANR	1363683	Identifier	VAR_NUM		1359456	0					
ANR	1363684	ArgumentList	ZEND_OP1 ( opline ) . var		1359456	1					
ANR	1363685	Argument	ZEND_OP1 ( opline ) . var		1359456	0					
ANR	1363686	MemberAccess	ZEND_OP1 ( opline ) . var		1359456	0					
ANR	1363687	CallExpression	ZEND_OP1 ( opline )		1359456	0					
ANR	1363688	Callee	ZEND_OP1		1359456	0					
ANR	1363689	Identifier	ZEND_OP1		1359456	0					
ANR	1363690	ArgumentList	opline		1359456	1					
ANR	1363691	Argument	opline		1359456	0					
ANR	1363692	Identifier	opline		1359456	0					
ANR	1363693	Identifier	var		1359456	1					
ANR	1363694	CompoundStatement		517:3:20246:20284	1359456	1					
ANR	1363695	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( opline -> op1 ) ;	1126:3:38554:38592	1359456	0	True				
ANR	1363696	IdentifierDecl	* src = VAR_SOURCE ( opline -> op1 )		1359456	0					
ANR	1363697	IdentifierDeclType	zend_op *		1359456	0					
ANR	1363698	Identifier	src		1359456	1					
ANR	1363699	AssignmentExpression	* src = VAR_SOURCE ( opline -> op1 )		1359456	2		=			
ANR	1363700	Identifier	src		1359456	0					
ANR	1363701	CallExpression	VAR_SOURCE ( opline -> op1 )		1359456	1					
ANR	1363702	Callee	VAR_SOURCE		1359456	0					
ANR	1363703	Identifier	VAR_SOURCE		1359456	0					
ANR	1363704	ArgumentList	opline -> op1		1359456	1					
ANR	1363705	Argument	opline -> op1		1359456	0					
ANR	1363706	PtrMemberAccess	opline -> op1		1359456	0					
ANR	1363707	Identifier	opline		1359456	0					
ANR	1363708	Identifier	op1		1359456	1					
ANR	1363709	ExpressionStatement	"COPY_NODE ( src -> result , opline -> result )"	1127:3:38597:38635	1359456	1	True				
ANR	1363710	CallExpression	"COPY_NODE ( src -> result , opline -> result )"		1359456	0					
ANR	1363711	Callee	COPY_NODE		1359456	0					
ANR	1363712	Identifier	COPY_NODE		1359456	0					
ANR	1363713	ArgumentList	src -> result		1359456	1					
ANR	1363714	Argument	src -> result		1359456	0					
ANR	1363715	PtrMemberAccess	src -> result		1359456	0					
ANR	1363716	Identifier	src		1359456	0					
ANR	1363717	Identifier	result		1359456	1					
ANR	1363718	Argument	opline -> result		1359456	1					
ANR	1363719	PtrMemberAccess	opline -> result		1359456	0					
ANR	1363720	Identifier	opline		1359456	0					
ANR	1363721	Identifier	result		1359456	1					
ANR	1363722	ExpressionStatement	SET_VAR_SOURCE ( src )	1128:3:38640:38659	1359456	2	True				
ANR	1363723	CallExpression	SET_VAR_SOURCE ( src )		1359456	0					
ANR	1363724	Callee	SET_VAR_SOURCE		1359456	0					
ANR	1363725	Identifier	SET_VAR_SOURCE		1359456	0					
ANR	1363726	ArgumentList	src		1359456	1					
ANR	1363727	Argument	src		1359456	0					
ANR	1363728	Identifier	src		1359456	0					
ANR	1363729	ExpressionStatement	MAKE_NOP ( opline )	1129:3:38664:38680	1359456	3	True				
ANR	1363730	CallExpression	MAKE_NOP ( opline )		1359456	0					
ANR	1363731	Callee	MAKE_NOP		1359456	0					
ANR	1363732	Identifier	MAKE_NOP		1359456	0					
ANR	1363733	ArgumentList	opline		1359456	1					
ANR	1363734	Argument	opline		1359456	0					
ANR	1363735	Identifier	opline		1359456	0					
ANR	1363736	IfStatement	if ( RESULT_USED ( opline ) )		1359456	7					
ANR	1363737	Condition	RESULT_USED ( opline )	1132:6:38720:38738	1359456	0	True				
ANR	1363738	CallExpression	RESULT_USED ( opline )		1359456	0					
ANR	1363739	Callee	RESULT_USED		1359456	0					
ANR	1363740	Identifier	RESULT_USED		1359456	0					
ANR	1363741	ArgumentList	opline		1359456	1					
ANR	1363742	Argument	opline		1359456	0					
ANR	1363743	Identifier	opline		1359456	0					
ANR	1363744	CompoundStatement		523:27:20433:20433	1359456	1					
ANR	1363745	ExpressionStatement	SET_VAR_SOURCE ( opline )	1133:3:38746:38768	1359456	0	True				
ANR	1363746	CallExpression	SET_VAR_SOURCE ( opline )		1359456	0					
ANR	1363747	Callee	SET_VAR_SOURCE		1359456	0					
ANR	1363748	Identifier	SET_VAR_SOURCE		1359456	0					
ANR	1363749	ArgumentList	opline		1359456	1					
ANR	1363750	Argument	opline		1359456	0					
ANR	1363751	Identifier	opline		1359456	0					
ANR	1363752	IfStatement	if ( opline -> opcode != ZEND_NOP )		1359456	8					
ANR	1363753	Condition	opline -> opcode != ZEND_NOP	1135:6:38780:38805	1359456	0	True				
ANR	1363754	EqualityExpression	opline -> opcode != ZEND_NOP		1359456	0		!=			
ANR	1363755	PtrMemberAccess	opline -> opcode		1359456	0					
ANR	1363756	Identifier	opline		1359456	0					
ANR	1363757	Identifier	opcode		1359456	1					
ANR	1363758	Identifier	ZEND_NOP		1359456	1					
ANR	1363759	CompoundStatement		526:34:20500:20500	1359456	1					
ANR	1363760	ExpressionStatement	last_op = opline	1136:3:38813:38829	1359456	0	True				
ANR	1363761	AssignmentExpression	last_op = opline		1359456	0		=			
ANR	1363762	Identifier	last_op		1359456	0					
ANR	1363763	Identifier	opline		1359456	1					
ANR	1363764	ExpressionStatement	opline ++	1138:2:38837:38845	1359456	9	True				
ANR	1363765	PostIncDecOperationExpression	opline ++		1359456	0					
ANR	1363766	Identifier	opline		1359456	0					
ANR	1363767	IncDec	++		1359456	1					
ANR	1363768	ExpressionStatement	"strip_nop ( block , ctx )"	1141:1:38852:38873	1359456	9	True				
ANR	1363769	CallExpression	"strip_nop ( block , ctx )"		1359456	0					
ANR	1363770	Callee	strip_nop		1359456	0					
ANR	1363771	Identifier	strip_nop		1359456	0					
ANR	1363772	ArgumentList	block		1359456	1					
ANR	1363773	Argument	block		1359456	0					
ANR	1363774	Identifier	block		1359456	0					
ANR	1363775	Argument	ctx		1359456	1					
ANR	1363776	Identifier	ctx		1359456	0					
ANR	1363777	ReturnType	static void		1359456	1					
ANR	1363778	Identifier	zend_optimize_block		1359456	2					
ANR	1363779	ParameterList	"zend_code_block * block , zend_op_array * op_array , zend_bitset used_ext , zend_cfg * cfg , zend_optimizer_ctx * ctx"		1359456	3					
ANR	1363780	Parameter	zend_code_block * block	609:32:18196:18217	1359456	0	True				
ANR	1363781	ParameterType	zend_code_block *		1359456	0					
ANR	1363782	Identifier	block		1359456	1					
ANR	1363783	Parameter	zend_op_array * op_array	609:56:18220:18242	1359456	1	True				
ANR	1363784	ParameterType	zend_op_array *		1359456	0					
ANR	1363785	Identifier	op_array		1359456	1					
ANR	1363786	Parameter	zend_bitset used_ext	609:81:18245:18264	1359456	2	True				
ANR	1363787	ParameterType	zend_bitset		1359456	0					
ANR	1363788	Identifier	used_ext		1359456	1					
ANR	1363789	Parameter	zend_cfg * cfg	609:103:18267:18279	1359456	3	True				
ANR	1363790	ParameterType	zend_cfg *		1359456	0					
ANR	1363791	Identifier	cfg		1359456	1					
ANR	1363792	Parameter	zend_optimizer_ctx * ctx	609:118:18282:18304	1359456	4	True				
ANR	1363793	ParameterType	zend_optimizer_ctx *		1359456	0					
ANR	1363794	Identifier	ctx		1359456	1					
ANR	1363795	CFGEntryNode	ENTRY		1359456		True				
ANR	1363796	CFGExitNode	EXIT		1359456		True				
ANR	1363797	Symbol	* block -> start_opline		1359456						
ANR	1363798	Symbol	ZEND_BOOL		1359456						
ANR	1363799	Symbol	ZEND_JMPNZ		1359456						
ANR	1363800	Symbol	ZEND_ISSET_ISEMPTY_DIM_OBJ		1359456						
ANR	1363801	Symbol	ZEND_JMPZNZ		1359456						
ANR	1363802	Symbol	FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . function_name		1359456						
ANR	1363803	Symbol	ZEND_FAST_CONCAT		1359456						
ANR	1363804	Symbol	get_binary_op		1359456						
ANR	1363805	Symbol	Z_LVAL		1359456						
ANR	1363806	Symbol	Z_TYPE		1359456						
ANR	1363807	Symbol	* sv		1359456						
ANR	1363808	Symbol	error_reporting		1359456						
ANR	1363809	Symbol	ZEND_QM_ASSIGN		1359456						
ANR	1363810	Symbol	src -> result		1359456						
ANR	1363811	Symbol	ZEND_OP2_TYPE		1359456						
ANR	1363812	Symbol	FUNCTION_CACHE -> funcs [ Z_LVAL ( ZEND_OP1_LITERAL ( fcall ) ) ] . name_len		1359456						
ANR	1363813	Symbol	IS_TYPE_REFCOUNTED		1359456						
ANR	1363814	Symbol	fcall		1359456						
ANR	1363815	Symbol	ZEND_BOOL_XOR		1359456						
ANR	1363816	Symbol	ZEND_RESULT ( opline ) . var		1359456						
ANR	1363817	Symbol	IS_STRING_EX		1359456						
ANR	1363818	Symbol	tmp		1359456						
ANR	1363819	Symbol	block		1359456						
ANR	1363820	Symbol	last_op		1359456						
ANR	1363821	Symbol	* Z_LVAL		1359456						
ANR	1363822	Symbol	zend_optimizer_add_literal		1359456						
ANR	1363823	Symbol	fname		1359456						
ANR	1363824	Symbol	IS_CONST		1359456						
ANR	1363825	Symbol	ZEND_RETURN		1359456						
ANR	1363826	Symbol	ctx		1359456						
ANR	1363827	Symbol	zend_binary_strcasecmp		1359456						
ANR	1363828	Symbol	ZEND_SR		1359456						
ANR	1363829	Symbol	IS_TRUE		1359456						
ANR	1363830	Symbol	unary_op		1359456						
ANR	1363831	Symbol	& ZEND_OP1_LITERAL		1359456						
ANR	1363832	Symbol	ZEND_SL		1359456						
ANR	1363833	Symbol	* op_array		1359456						
ANR	1363834	Symbol	old_len		1359456						
ANR	1363835	Symbol	* cfg		1359456						
ANR	1363836	Symbol	ZEND_RESULT_TYPE		1359456						
ANR	1363837	Symbol	ZEND_OP2 ( opline ) . opline_num		1359456						
ANR	1363838	Symbol	ZEND_OP1_LITERAL		1359456						
ANR	1363839	Symbol	ZEND_EXIT		1359456						
ANR	1363840	Symbol	function_table		1359456						
ANR	1363841	Symbol	IS_VAR		1359456						
ANR	1363842	Symbol	OPLINE_OP2_LITERAL		1359456						
ANR	1363843	Symbol	ZEND_JMPZ_EX		1359456						
ANR	1363844	Symbol	ZEND_SUB		1359456						
ANR	1363845	Symbol	zend_string_extend		1359456						
ANR	1363846	Symbol	ZEND_BW_NOT		1359456						
ANR	1363847	Symbol	ZEND_IS_SMALLER_OR_EQUAL		1359456						
ANR	1363848	Symbol	ZEND_BW_AND		1359456						
ANR	1363849	Symbol	VAR_SOURCE ( opline -> op2 ) -> extended_value		1359456						
ANR	1363850	Symbol	result		1359456						
ANR	1363851	Symbol	* FUNCTION_CACHE		1359456						
ANR	1363852	Symbol	arg		1359456						
ANR	1363853	Symbol	* FUNCTION_CACHE -> funcs		1359456						
ANR	1363854	Symbol	block -> start_opline_no		1359456						
ANR	1363855	Symbol	ZEND_DO_CF_FCALL		1359456						
ANR	1363856	Symbol	IS_FALSE		1359456						
ANR	1363857	Symbol	block -> op2_to		1359456						
ANR	1363858	Symbol	ZEND_ADD		1359456						
ANR	1363859	Symbol	binary_op		1359456						
ANR	1363860	Symbol	c		1359456						
ANR	1363861	Symbol	sv		1359456						
ANR	1363862	Symbol	SUCCESS		1359456						
ANR	1363863	Symbol	cfg		1359456						
ANR	1363864	Symbol	ZEND_IS_EQUAL		1359456						
ANR	1363865	Symbol	l		1359456						
ANR	1363866	Symbol	ZEND_RESULT ( VAR_SOURCE ( opline -> op1 ) ) . var		1359456						
ANR	1363867	Symbol	ZEND_OP1		1359456						
ANR	1363868	Symbol	ZEND_OP2		1359456						
ANR	1363869	Symbol	ZEND_DIV		1359456						
ANR	1363870	Symbol	op2		1359456						
ANR	1363871	Symbol	op1		1359456						
ANR	1363872	Symbol	* VAR_SOURCE		1359456						
ANR	1363873	Symbol	OPLINE_OP1_LITERAL		1359456						
ANR	1363874	Symbol	Tsource		1359456						
ANR	1363875	Symbol	* opline		1359456						
ANR	1363876	Symbol	VAR_SOURCE ( opline -> op1 ) -> opcode		1359456						
ANR	1363877	Symbol	VAR_SOURCE ( opline -> op2 ) -> opcode		1359456						
ANR	1363878	Symbol	FUNCTION_CACHE		1359456						
ANR	1363879	Symbol	* * block		1359456						
ANR	1363880	Symbol	ZEND_IS_NOT_IDENTICAL		1359456						
ANR	1363881	Symbol	ZEND_OP2_LITERAL		1359456						
ANR	1363882	Symbol	opline -> op2_type		1359456						
ANR	1363883	Symbol	ZEND_ROPE_END		1359456						
ANR	1363884	Symbol	ZEND_IS_NOT_EQUAL		1359456						
ANR	1363885	Symbol	op_array		1359456						
ANR	1363886	Symbol	ZEND_FE_RESET_RW		1359456						
ANR	1363887	Symbol	ZEND_FREE		1359456						
ANR	1363888	Symbol	ZEND_BW_OR		1359456						
ANR	1363889	Symbol	opline -> op2 . var		1359456						
ANR	1363890	Symbol	IS_CV		1359456						
ANR	1363891	Symbol	get_unary_op		1359456						
ANR	1363892	Symbol	zend_hash_exists		1359456						
ANR	1363893	Symbol	ZEND_FE_RESET_R		1359456						
ANR	1363894	Symbol	block -> ext_to		1359456						
ANR	1363895	Symbol	Z_STR		1359456						
ANR	1363896	Symbol	RESULT_USED		1359456						
ANR	1363897	Symbol	* src		1359456						
ANR	1363898	Symbol	opline -> extended_value		1359456						
ANR	1363899	Symbol	opline -> result		1359456						
ANR	1363900	Symbol	opline		1359456						
ANR	1363901	Symbol	function		1359456						
ANR	1363902	Symbol	* Z_STRVAL		1359456						
ANR	1363903	Symbol	ZEND_ISSET_ISEMPTY_VAR		1359456						
ANR	1363904	Symbol	IS_STRING		1359456						
ANR	1363905	Symbol	Z_TYPE_FLAGS		1359456						
ANR	1363906	Symbol	Z_TYPE_INFO		1359456						
ANR	1363907	Symbol	ZEND_FETCH_CONSTANT		1359456						
ANR	1363908	Symbol	zend_hash_find_ptr		1359456						
ANR	1363909	Symbol	IS_TMP_VAR		1359456						
ANR	1363910	Symbol	sv -> opcode		1359456						
ANR	1363911	Symbol	op_array -> T		1359456						
ANR	1363912	Symbol	zend_optimizer_update_op2_const		1359456						
ANR	1363913	Symbol	EG		1359456						
ANR	1363914	Symbol	op_t		1359456						
ANR	1363915	Symbol	zend_string_alloc		1359456						
ANR	1363916	Symbol	NULL		1359456						
ANR	1363917	Symbol	* last_op		1359456						
ANR	1363918	Symbol	VAR_SOURCE ( opline -> op1 ) -> extended_value		1359456						
ANR	1363919	Symbol	ZEND_JMPZ		1359456						
ANR	1363920	Symbol	ZEND_IS_IDENTICAL		1359456						
ANR	1363921	Symbol	& module_registry		1359456						
ANR	1363922	Symbol	IS_TYPE_COPYABLE		1359456						
ANR	1363923	Symbol	src -> op1		1359456						
ANR	1363924	Symbol	ZEND_NOP		1359456						
ANR	1363925	Symbol	er		1359456						
ANR	1363926	Symbol	opline -> op1_type		1359456						
ANR	1363927	Symbol	block -> start_opline		1359456						
ANR	1363928	Symbol	op_b		1359456						
ANR	1363929	Symbol	ZEND_SEND_VAL		1359456						
ANR	1363930	Symbol	zval_get_long		1359456						
ANR	1363931	Symbol	ZEND_MUL		1359456						
ANR	1363932	Symbol	Z_STR_P		1359456						
ANR	1363933	Symbol	FUNCTION_CACHE -> funcs		1359456						
ANR	1363934	Symbol	Z_REFCOUNTED		1359456						
ANR	1363935	Symbol	opline -> op1		1359456						
ANR	1363936	Symbol	flen		1359456						
ANR	1363937	Symbol	ZEND_JMPNZ_EX		1359456						
ANR	1363938	Symbol	opline -> op2		1359456						
ANR	1363939	Symbol	used_ext		1359456						
ANR	1363940	Symbol	ZEND_CASE		1359456						
ANR	1363941	Symbol	op_array -> last_var		1359456						
ANR	1363942	Symbol	ZEND_ECHO		1359456						
ANR	1363943	Symbol	ZEND_FETCH_LIST		1359456						
ANR	1363944	Symbol	ZEND_IS_SMALLER		1359456						
ANR	1363945	Symbol	Z_STRLEN		1359456						
ANR	1363946	Symbol	ZEND_BW_XOR		1359456						
ANR	1363947	Symbol	src -> opcode		1359456						
ANR	1363948	Symbol	op_array -> opcodes		1359456						
ANR	1363949	Symbol	ZEND_CAST		1359456						
ANR	1363950	Symbol	& result		1359456						
ANR	1363951	Symbol	ZEND_RESULT		1359456						
ANR	1363952	Symbol	Z_STRVAL		1359456						
ANR	1363953	Symbol	end		1359456						
ANR	1363954	Symbol	VAR_NUM		1359456						
ANR	1363955	Symbol	last_op -> opcode		1359456						
ANR	1363956	Symbol	& ZEND_OP2_LITERAL		1359456						
ANR	1363957	Symbol	block -> start_opline -> opcode		1359456						
ANR	1363958	Symbol	zend_bitset_in		1359456						
ANR	1363959	Symbol	src		1359456						
ANR	1363960	Symbol	ZEND_OP1 ( opline ) . var		1359456						
ANR	1363961	Symbol	& OPLINE_OP1_LITERAL		1359456						
ANR	1363962	Symbol	& c		1359456						
ANR	1363963	Symbol	block -> follow_to		1359456						
ANR	1363964	Symbol	VAR_SOURCE		1359456						
ANR	1363965	Symbol	ZEND_CONCAT		1359456						
ANR	1363966	Symbol	block -> len		1359456						
ANR	1363967	Symbol	* block		1359456						
ANR	1363968	Symbol	ZSTR_VAL		1359456						
ANR	1363969	Symbol	ZEND_OP1_TYPE		1359456						
ANR	1363970	Symbol	zend_new_interned_string		1359456						
ANR	1363971	Symbol	* * FUNCTION_CACHE		1359456						
ANR	1363972	Symbol	opline -> opcode		1359456						
ANR	1363973	Symbol	* l		1359456						
ANR	1363974	Symbol	ZEND_BOOL_NOT		1359456						
ANR	1363975	Symbol	zend_optimizer_update_op1_const		1359456						
ANR	1363976	Symbol	ZEND_MOD		1359456						
ANR	1363977	Symbol	IS_DOUBLE		1359456						
ANR	1363978	Symbol	cfg -> Tsource		1359456						
ANR	1363979	Symbol	IS_UNUSED		1359456						
ANR	1363980	Function	assemble_code_blocks	1145:0:38928:42295							
ANR	1363981	FunctionDef	"assemble_code_blocks (zend_cfg * cfg , zend_op_array * op_array)"		1363980	0					
ANR	1363982	CompoundStatement		1146:0:39001:42295	1363980	0					
ANR	1363983	IdentifierDeclStatement	zend_code_block * blocks = cfg -> blocks ;	1147:1:39004:39041	1363980	0	True				
ANR	1363984	IdentifierDecl	* blocks = cfg -> blocks		1363980	0					
ANR	1363985	IdentifierDeclType	zend_code_block *		1363980	0					
ANR	1363986	Identifier	blocks		1363980	1					
ANR	1363987	AssignmentExpression	* blocks = cfg -> blocks		1363980	2		=			
ANR	1363988	Identifier	blocks		1363980	0					
ANR	1363989	PtrMemberAccess	cfg -> blocks		1363980	1					
ANR	1363990	Identifier	cfg		1363980	0					
ANR	1363991	Identifier	blocks		1363980	1					
ANR	1363992	IdentifierDeclStatement	zend_op * new_opcodes = emalloc ( op_array -> last * sizeof ( zend_op ) ) ;	1148:1:39044:39108	1363980	1	True				
ANR	1363993	IdentifierDecl	* new_opcodes = emalloc ( op_array -> last * sizeof ( zend_op ) )		1363980	0					
ANR	1363994	IdentifierDeclType	zend_op *		1363980	0					
ANR	1363995	Identifier	new_opcodes		1363980	1					
ANR	1363996	AssignmentExpression	* new_opcodes = emalloc ( op_array -> last * sizeof ( zend_op ) )		1363980	2		=			
ANR	1363997	Identifier	new_opcodes		1363980	0					
ANR	1363998	CallExpression	emalloc ( op_array -> last * sizeof ( zend_op ) )		1363980	1					
ANR	1363999	Callee	emalloc		1363980	0					
ANR	1364000	Identifier	emalloc		1363980	0					
ANR	1364001	ArgumentList	op_array -> last * sizeof ( zend_op )		1363980	1					
ANR	1364002	Argument	op_array -> last * sizeof ( zend_op )		1363980	0					
ANR	1364003	MultiplicativeExpression	op_array -> last * sizeof ( zend_op )		1363980	0		*			
ANR	1364004	PtrMemberAccess	op_array -> last		1363980	0					
ANR	1364005	Identifier	op_array		1363980	0					
ANR	1364006	Identifier	last		1363980	1					
ANR	1364007	SizeofExpression	sizeof ( zend_op )		1363980	1					
ANR	1364008	Sizeof	sizeof		1363980	0					
ANR	1364009	SizeofOperand	zend_op		1363980	1					
ANR	1364010	IdentifierDeclStatement	zend_op * opline = new_opcodes ;	1149:1:39111:39140	1363980	2	True				
ANR	1364011	IdentifierDecl	* opline = new_opcodes		1363980	0					
ANR	1364012	IdentifierDeclType	zend_op *		1363980	0					
ANR	1364013	Identifier	opline		1363980	1					
ANR	1364014	AssignmentExpression	* opline = new_opcodes		1363980	2		=			
ANR	1364015	Identifier	new_opcodes		1363980	0					
ANR	1364016	Identifier	new_opcodes		1363980	1					
ANR	1364017	IdentifierDeclStatement	zend_code_block * cur_block = blocks ;	1150:1:39143:39178	1363980	3	True				
ANR	1364018	IdentifierDecl	* cur_block = blocks		1363980	0					
ANR	1364019	IdentifierDeclType	zend_code_block *		1363980	0					
ANR	1364020	Identifier	cur_block		1363980	1					
ANR	1364021	AssignmentExpression	* cur_block = blocks		1363980	2		=			
ANR	1364022	Identifier	blocks		1363980	0					
ANR	1364023	Identifier	blocks		1363980	1					
ANR	1364024	WhileStatement	while ( cur_block )		1363980	4					
ANR	1364025	Condition	cur_block	1153:8:39247:39255	1363980	0	True				
ANR	1364026	Identifier	cur_block		1363980	0					
ANR	1364027	CompoundStatement		8:19:256:256	1363980	1					
ANR	1364028	IfStatement	if ( cur_block -> access )		1363980	0					
ANR	1364029	Condition	cur_block -> access	1154:6:39266:39282	1363980	0	True				
ANR	1364030	PtrMemberAccess	cur_block -> access		1363980	0					
ANR	1364031	Identifier	cur_block		1363980	0					
ANR	1364032	Identifier	access		1363980	1					
ANR	1364033	CompoundStatement		9:25:283:283	1363980	1					
ANR	1364034	ExpressionStatement	"memcpy ( opline , cur_block -> start_opline , cur_block -> len * sizeof ( zend_op ) )"	1155:3:39290:39363	1363980	0	True				
ANR	1364035	CallExpression	"memcpy ( opline , cur_block -> start_opline , cur_block -> len * sizeof ( zend_op ) )"		1363980	0					
ANR	1364036	Callee	memcpy		1363980	0					
ANR	1364037	Identifier	memcpy		1363980	0					
ANR	1364038	ArgumentList	opline		1363980	1					
ANR	1364039	Argument	opline		1363980	0					
ANR	1364040	Identifier	opline		1363980	0					
ANR	1364041	Argument	cur_block -> start_opline		1363980	1					
ANR	1364042	PtrMemberAccess	cur_block -> start_opline		1363980	0					
ANR	1364043	Identifier	cur_block		1363980	0					
ANR	1364044	Identifier	start_opline		1363980	1					
ANR	1364045	Argument	cur_block -> len * sizeof ( zend_op )		1363980	2					
ANR	1364046	MultiplicativeExpression	cur_block -> len * sizeof ( zend_op )		1363980	0		*			
ANR	1364047	PtrMemberAccess	cur_block -> len		1363980	0					
ANR	1364048	Identifier	cur_block		1363980	0					
ANR	1364049	Identifier	len		1363980	1					
ANR	1364050	SizeofExpression	sizeof ( zend_op )		1363980	1					
ANR	1364051	Sizeof	sizeof		1363980	0					
ANR	1364052	SizeofOperand	zend_op		1363980	1					
ANR	1364053	ExpressionStatement	cur_block -> start_opline = opline	1156:3:39368:39400	1363980	1	True				
ANR	1364054	AssignmentExpression	cur_block -> start_opline = opline		1363980	0		=			
ANR	1364055	PtrMemberAccess	cur_block -> start_opline		1363980	0					
ANR	1364056	Identifier	cur_block		1363980	0					
ANR	1364057	Identifier	start_opline		1363980	1					
ANR	1364058	Identifier	opline		1363980	1					
ANR	1364059	ExpressionStatement	opline += cur_block -> len	1157:3:39405:39429	1363980	2	True				
ANR	1364060	AssignmentExpression	opline += cur_block -> len		1363980	0		+=			
ANR	1364061	Identifier	opline		1363980	0					
ANR	1364062	PtrMemberAccess	cur_block -> len		1363980	1					
ANR	1364063	Identifier	cur_block		1363980	0					
ANR	1364064	Identifier	len		1363980	1					
ANR	1364065	IfStatement	if ( ( opline - 1 ) -> opcode == ZEND_JMP )		1363980	3					
ANR	1364066	Condition	( opline - 1 ) -> opcode == ZEND_JMP	1158:7:39438:39469	1363980	0	True				
ANR	1364067	EqualityExpression	( opline - 1 ) -> opcode == ZEND_JMP		1363980	0		==			
ANR	1364068	PtrMemberAccess	( opline - 1 ) -> opcode		1363980	0					
ANR	1364069	AdditiveExpression	opline - 1		1363980	0		-			
ANR	1364070	Identifier	opline		1363980	0					
ANR	1364071	PrimaryExpression	1		1363980	1					
ANR	1364072	Identifier	opcode		1363980	1					
ANR	1364073	Identifier	ZEND_JMP		1363980	1					
ANR	1364074	CompoundStatement		14:4:476:497	1363980	1					
ANR	1364075	IdentifierDeclStatement	zend_code_block * next ;	1159:4:39478:39499	1363980	0	True				
ANR	1364076	IdentifierDecl	* next		1363980	0					
ANR	1364077	IdentifierDeclType	zend_code_block *		1363980	0					
ANR	1364078	Identifier	next		1363980	1					
ANR	1364079	ExpressionStatement	next = cur_block -> next	1160:4:39505:39527	1363980	1	True				
ANR	1364080	AssignmentExpression	next = cur_block -> next		1363980	0		=			
ANR	1364081	Identifier	next		1363980	0					
ANR	1364082	PtrMemberAccess	cur_block -> next		1363980	1					
ANR	1364083	Identifier	cur_block		1363980	0					
ANR	1364084	Identifier	next		1363980	1					
ANR	1364085	WhileStatement	while ( next && ! next -> access )		1363980	2					
ANR	1364086	Condition	next && ! next -> access	1161:11:39540:39560	1363980	0	True				
ANR	1364087	AndExpression	next && ! next -> access		1363980	0		&&			
ANR	1364088	Identifier	next		1363980	0					
ANR	1364089	UnaryOperationExpression	! next -> access		1363980	1					
ANR	1364090	UnaryOperator	!		1363980	0					
ANR	1364091	PtrMemberAccess	next -> access		1363980	1					
ANR	1364092	Identifier	next		1363980	0					
ANR	1364093	Identifier	access		1363980	1					
ANR	1364094	CompoundStatement		16:34:561:561	1363980	1					
ANR	1364095	ExpressionStatement	next = next -> next	1162:5:39570:39587	1363980	0	True				
ANR	1364096	AssignmentExpression	next = next -> next		1363980	0		=			
ANR	1364097	Identifier	next		1363980	0					
ANR	1364098	PtrMemberAccess	next -> next		1363980	1					
ANR	1364099	Identifier	next		1363980	0					
ANR	1364100	Identifier	next		1363980	1					
ANR	1364101	IfStatement	if ( next && next == cur_block -> op1_to )		1363980	3					
ANR	1364102	Condition	next && next == cur_block -> op1_to	1164:8:39603:39635	1363980	0	True				
ANR	1364103	AndExpression	next && next == cur_block -> op1_to		1363980	0		&&			
ANR	1364104	Identifier	next		1363980	0					
ANR	1364105	EqualityExpression	next == cur_block -> op1_to		1363980	1		==			
ANR	1364106	Identifier	next		1363980	0					
ANR	1364107	PtrMemberAccess	cur_block -> op1_to		1363980	1					
ANR	1364108	Identifier	cur_block		1363980	0					
ANR	1364109	Identifier	op1_to		1363980	1					
ANR	1364110	CompoundStatement		19:43:636:636	1363980	1					
ANR	1364111	ExpressionStatement	cur_block -> follow_to = cur_block -> op1_to	1166:5:39689:39729	1363980	0	True				
ANR	1364112	AssignmentExpression	cur_block -> follow_to = cur_block -> op1_to		1363980	0		=			
ANR	1364113	PtrMemberAccess	cur_block -> follow_to		1363980	0					
ANR	1364114	Identifier	cur_block		1363980	0					
ANR	1364115	Identifier	follow_to		1363980	1					
ANR	1364116	PtrMemberAccess	cur_block -> op1_to		1363980	1					
ANR	1364117	Identifier	cur_block		1363980	0					
ANR	1364118	Identifier	op1_to		1363980	1					
ANR	1364119	ExpressionStatement	cur_block -> op1_to = NULL	1167:5:39736:39760	1363980	1	True				
ANR	1364120	AssignmentExpression	cur_block -> op1_to = NULL		1363980	0		=			
ANR	1364121	PtrMemberAccess	cur_block -> op1_to		1363980	0					
ANR	1364122	Identifier	cur_block		1363980	0					
ANR	1364123	Identifier	op1_to		1363980	1					
ANR	1364124	Identifier	NULL		1363980	1					
ANR	1364125	ExpressionStatement	MAKE_NOP ( ( opline - 1 ) )	1168:5:39767:39789	1363980	2	True				
ANR	1364126	CallExpression	MAKE_NOP ( ( opline - 1 ) )		1363980	0					
ANR	1364127	Callee	MAKE_NOP		1363980	0					
ANR	1364128	Identifier	MAKE_NOP		1363980	0					
ANR	1364129	ArgumentList	opline - 1		1363980	1					
ANR	1364130	Argument	opline - 1		1363980	0					
ANR	1364131	AdditiveExpression	opline - 1		1363980	0		-			
ANR	1364132	Identifier	opline		1363980	0					
ANR	1364133	PrimaryExpression	1		1363980	1					
ANR	1364134	ExpressionStatement	opline --	1169:5:39796:39804	1363980	3	True				
ANR	1364135	PostIncDecOperationExpression	opline --		1363980	0					
ANR	1364136	Identifier	opline		1363980	0					
ANR	1364137	IncDec	--		1363980	1					
ANR	1364138	ExpressionStatement	cur_block -> len --	1170:5:39811:39827	1363980	4	True				
ANR	1364139	PostIncDecOperationExpression	cur_block -> len --		1363980	0					
ANR	1364140	PtrMemberAccess	cur_block -> len		1363980	0					
ANR	1364141	Identifier	cur_block		1363980	0					
ANR	1364142	Identifier	len		1363980	1					
ANR	1364143	IncDec	--		1363980	1					
ANR	1364144	ElseStatement	else		1363980	0					
ANR	1364145	CompoundStatement		31:3:935:990	1363980	0					
ANR	1364146	IdentifierDeclStatement	zend_op * _opl ;	1175:3:39919:39932	1363980	0	True				
ANR	1364147	IdentifierDecl	* _opl		1363980	0					
ANR	1364148	IdentifierDeclType	zend_op *		1363980	0					
ANR	1364149	Identifier	_opl		1363980	1					
ANR	1364150	IdentifierDeclStatement	zend_op * end = cur_block -> start_opline + cur_block -> len ;	1176:3:39937:39992	1363980	1	True				
ANR	1364151	IdentifierDecl	* end = cur_block -> start_opline + cur_block -> len		1363980	0					
ANR	1364152	IdentifierDeclType	zend_op *		1363980	0					
ANR	1364153	Identifier	end		1363980	1					
ANR	1364154	AssignmentExpression	* end = cur_block -> start_opline + cur_block -> len		1363980	2		=			
ANR	1364155	Identifier	end		1363980	0					
ANR	1364156	AdditiveExpression	cur_block -> start_opline + cur_block -> len		1363980	1		+			
ANR	1364157	PtrMemberAccess	cur_block -> start_opline		1363980	0					
ANR	1364158	Identifier	cur_block		1363980	0					
ANR	1364159	Identifier	start_opline		1363980	1					
ANR	1364160	PtrMemberAccess	cur_block -> len		1363980	1					
ANR	1364161	Identifier	cur_block		1363980	0					
ANR	1364162	Identifier	len		1363980	1					
ANR	1364163	ForStatement	for ( _opl = cur_block -> start_opline ; _opl && _opl < end ; _opl ++ )		1363980	2					
ANR	1364164	ForInit	_opl = cur_block -> start_opline ;	1177:8:40002:40032	1363980	0	True				
ANR	1364165	AssignmentExpression	_opl = cur_block -> start_opline		1363980	0		=			
ANR	1364166	Identifier	_opl		1363980	0					
ANR	1364167	PtrMemberAccess	cur_block -> start_opline		1363980	1					
ANR	1364168	Identifier	cur_block		1363980	0					
ANR	1364169	Identifier	start_opline		1363980	1					
ANR	1364170	Condition	_opl && _opl < end	1177:40:40034:40051	1363980	1	True				
ANR	1364171	AndExpression	_opl && _opl < end		1363980	0		&&			
ANR	1364172	Identifier	_opl		1363980	0					
ANR	1364173	RelationalExpression	_opl < end		1363980	1		<			
ANR	1364174	Identifier	_opl		1363980	0					
ANR	1364175	Identifier	end		1363980	1					
ANR	1364176	PostIncDecOperationExpression	_opl ++	1177:60:40054:40059	1363980	2	True				
ANR	1364177	Identifier	_opl		1363980	0					
ANR	1364178	IncDec	++		1363980	1					
ANR	1364179	CompoundStatement		32:68:1060:1060	1363980	3					
ANR	1364180	IfStatement	if ( ZEND_OP1_TYPE ( _opl ) == IS_CONST )		1363980	0					
ANR	1364181	Condition	ZEND_OP1_TYPE ( _opl ) == IS_CONST	1178:8:40072:40102	1363980	0	True				
ANR	1364182	EqualityExpression	ZEND_OP1_TYPE ( _opl ) == IS_CONST		1363980	0		==			
ANR	1364183	CallExpression	ZEND_OP1_TYPE ( _opl )		1363980	0					
ANR	1364184	Callee	ZEND_OP1_TYPE		1363980	0					
ANR	1364185	Identifier	ZEND_OP1_TYPE		1363980	0					
ANR	1364186	ArgumentList	_opl		1363980	1					
ANR	1364187	Argument	_opl		1363980	0					
ANR	1364188	Identifier	_opl		1363980	0					
ANR	1364189	Identifier	IS_CONST		1363980	1					
ANR	1364190	CompoundStatement		33:41:1103:1103	1363980	1					
ANR	1364191	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( _opl ) )	1179:5:40112:40149	1363980	0	True				
ANR	1364192	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( _opl ) )		1363980	0					
ANR	1364193	Callee	literal_dtor		1363980	0					
ANR	1364194	Identifier	literal_dtor		1363980	0					
ANR	1364195	ArgumentList	& ZEND_OP1_LITERAL ( _opl )		1363980	1					
ANR	1364196	Argument	& ZEND_OP1_LITERAL ( _opl )		1363980	0					
ANR	1364197	UnaryOperationExpression	& ZEND_OP1_LITERAL ( _opl )		1363980	0					
ANR	1364198	UnaryOperator	&		1363980	0					
ANR	1364199	CallExpression	ZEND_OP1_LITERAL ( _opl )		1363980	1					
ANR	1364200	Callee	ZEND_OP1_LITERAL		1363980	0					
ANR	1364201	Identifier	ZEND_OP1_LITERAL		1363980	0					
ANR	1364202	ArgumentList	_opl		1363980	1					
ANR	1364203	Argument	_opl		1363980	0					
ANR	1364204	Identifier	_opl		1363980	0					
ANR	1364205	IfStatement	if ( ZEND_OP2_TYPE ( _opl ) == IS_CONST )		1363980	1					
ANR	1364206	Condition	ZEND_OP2_TYPE ( _opl ) == IS_CONST	1181:8:40165:40195	1363980	0	True				
ANR	1364207	EqualityExpression	ZEND_OP2_TYPE ( _opl ) == IS_CONST		1363980	0		==			
ANR	1364208	CallExpression	ZEND_OP2_TYPE ( _opl )		1363980	0					
ANR	1364209	Callee	ZEND_OP2_TYPE		1363980	0					
ANR	1364210	Identifier	ZEND_OP2_TYPE		1363980	0					
ANR	1364211	ArgumentList	_opl		1363980	1					
ANR	1364212	Argument	_opl		1363980	0					
ANR	1364213	Identifier	_opl		1363980	0					
ANR	1364214	Identifier	IS_CONST		1363980	1					
ANR	1364215	CompoundStatement		36:41:1196:1196	1363980	1					
ANR	1364216	ExpressionStatement	literal_dtor ( & ZEND_OP2_LITERAL ( _opl ) )	1182:5:40205:40242	1363980	0	True				
ANR	1364217	CallExpression	literal_dtor ( & ZEND_OP2_LITERAL ( _opl ) )		1363980	0					
ANR	1364218	Callee	literal_dtor		1363980	0					
ANR	1364219	Identifier	literal_dtor		1363980	0					
ANR	1364220	ArgumentList	& ZEND_OP2_LITERAL ( _opl )		1363980	1					
ANR	1364221	Argument	& ZEND_OP2_LITERAL ( _opl )		1363980	0					
ANR	1364222	UnaryOperationExpression	& ZEND_OP2_LITERAL ( _opl )		1363980	0					
ANR	1364223	UnaryOperator	&		1363980	0					
ANR	1364224	CallExpression	ZEND_OP2_LITERAL ( _opl )		1363980	1					
ANR	1364225	Callee	ZEND_OP2_LITERAL		1363980	0					
ANR	1364226	Identifier	ZEND_OP2_LITERAL		1363980	0					
ANR	1364227	ArgumentList	_opl		1363980	1					
ANR	1364228	Argument	_opl		1363980	0					
ANR	1364229	Identifier	_opl		1363980	0					
ANR	1364230	ExpressionStatement	cur_block = cur_block -> next	1186:2:40261:40288	1363980	1	True				
ANR	1364231	AssignmentExpression	cur_block = cur_block -> next		1363980	0		=			
ANR	1364232	Identifier	cur_block		1363980	0					
ANR	1364233	PtrMemberAccess	cur_block -> next		1363980	1					
ANR	1364234	Identifier	cur_block		1363980	0					
ANR	1364235	Identifier	next		1363980	1					
ANR	1364236	ExpressionStatement	op_array -> last = opline - new_opcodes	1189:1:40295:40330	1363980	5	True				
ANR	1364237	AssignmentExpression	op_array -> last = opline - new_opcodes		1363980	0		=			
ANR	1364238	PtrMemberAccess	op_array -> last		1363980	0					
ANR	1364239	Identifier	op_array		1363980	0					
ANR	1364240	Identifier	last		1363980	1					
ANR	1364241	AdditiveExpression	opline - new_opcodes		1363980	1		-			
ANR	1364242	Identifier	opline		1363980	0					
ANR	1364243	Identifier	new_opcodes		1363980	1					
ANR	1364244	IfStatement	if ( op_array -> last_try_catch )		1363980	6					
ANR	1364245	Condition	op_array -> last_try_catch	1192:5:40375:40398	1363980	0	True				
ANR	1364246	PtrMemberAccess	op_array -> last_try_catch		1363980	0					
ANR	1364247	Identifier	op_array		1363980	0					
ANR	1364248	Identifier	last_try_catch		1363980	1					
ANR	1364249	CompoundStatement		48:2:1403:1411	1363980	1					
ANR	1364250	IdentifierDeclStatement	"int i , j ;"	1193:2:40405:40413	1363980	0	True				
ANR	1364251	IdentifierDecl	i		1363980	0					
ANR	1364252	IdentifierDeclType	int		1363980	0					
ANR	1364253	Identifier	i		1363980	1					
ANR	1364254	IdentifierDecl	j		1363980	1					
ANR	1364255	IdentifierDeclType	int		1363980	0					
ANR	1364256	Identifier	j		1363980	1					
ANR	1364257	ForStatement	"for ( i = 0 , j = 0 ; i < op_array -> last_try_catch ; i ++ )"		1363980	1					
ANR	1364258	ForInit	"i = 0 , j = 0 ;"	1194:7:40422:40434	1363980	0	True				
ANR	1364259	Expression	"i = 0 , j = 0"		1363980	0					
ANR	1364260	AssignmentExpression	i = 0		1363980	0		=			
ANR	1364261	Identifier	i		1363980	0					
ANR	1364262	PrimaryExpression	0		1363980	1					
ANR	1364263	AssignmentExpression	j = 0		1363980	1		=			
ANR	1364264	Identifier	j		1363980	0					
ANR	1364265	PrimaryExpression	0		1363980	1					
ANR	1364266	Condition	i < op_array -> last_try_catch	1194:21:40436:40462	1363980	1	True				
ANR	1364267	RelationalExpression	i < op_array -> last_try_catch		1363980	0		<			
ANR	1364268	Identifier	i		1363980	0					
ANR	1364269	PtrMemberAccess	op_array -> last_try_catch		1363980	1					
ANR	1364270	Identifier	op_array		1363980	0					
ANR	1364271	Identifier	last_try_catch		1363980	1					
ANR	1364272	PostIncDecOperationExpression	i ++	1194:50:40465:40467	1363980	2	True				
ANR	1364273	Identifier	i		1363980	0					
ANR	1364274	IncDec	++		1363980	1					
ANR	1364275	CompoundStatement		49:55:1468:1468	1363980	3					
ANR	1364276	Statement	if	1195:3:40475:40476	1363980	0	True				
ANR	1364277	Statement	(	1195:6:40478:40478	1363980	1	True				
ANR	1364278	Statement	cfg	1195:7:40479:40481	1363980	2	True				
ANR	1364279	Statement	->	1195:10:40482:40483	1363980	3	True				
ANR	1364280	TryStatement	try		1363980	4					
ANR	1364281	Statement	[		1363980	0					
ANR	1364282	Statement	i	1195:16:40488:40488	1363980	5	True				
ANR	1364283	Statement	]	1195:17:40489:40489	1363980	6	True				
ANR	1364284	Statement	->	1195:18:40490:40491	1363980	7	True				
ANR	1364285	Statement	access	1195:20:40492:40497	1363980	8	True				
ANR	1364286	Statement	)	1195:26:40498:40498	1363980	9	True				
ANR	1364287	CompoundStatement		50:28:1498:1498	1363980	10					
ANR	1364288	Statement	op_array	1196:4:40506:40513	1363980	0	True				
ANR	1364289	Statement	->	1196:12:40514:40515	1363980	1	True				
ANR	1364290	Statement	try_catch_array	1196:14:40516:40530	1363980	2	True				
ANR	1364291	Statement	[	1196:29:40531:40531	1363980	3	True				
ANR	1364292	Statement	j	1196:30:40532:40532	1363980	4	True				
ANR	1364293	Statement	]	1196:31:40533:40533	1363980	5	True				
ANR	1364294	Statement	.	1196:32:40534:40534	1363980	6	True				
ANR	1364295	Statement	try_op	1196:33:40535:40540	1363980	7	True				
ANR	1364296	Statement	=	1196:40:40542:40542	1363980	8	True				
ANR	1364297	Statement	cfg	1196:42:40544:40546	1363980	9	True				
ANR	1364298	Statement	->	1196:45:40547:40548	1363980	10	True				
ANR	1364299	TryStatement	try		1363980	11					
ANR	1364300	Statement	[		1363980	0					
ANR	1364301	Statement	i	1196:51:40553:40553	1363980	12	True				
ANR	1364302	Statement	]	1196:52:40554:40554	1363980	13	True				
ANR	1364303	Statement	->	1196:53:40555:40556	1363980	14	True				
ANR	1364304	ExpressionStatement	start_opline - new_opcodes	1196:55:40557:40583	1363980	15	True				
ANR	1364305	AdditiveExpression	start_opline - new_opcodes		1363980	0		-			
ANR	1364306	Identifier	start_opline		1363980	0					
ANR	1364307	Identifier	new_opcodes		1363980	1					
ANR	1364308	Statement	op_array	1197:4:40589:40596	1363980	16	True				
ANR	1364309	Statement	->	1197:12:40597:40598	1363980	17	True				
ANR	1364310	Statement	try_catch_array	1197:14:40599:40613	1363980	18	True				
ANR	1364311	Statement	[	1197:29:40614:40614	1363980	19	True				
ANR	1364312	Statement	j	1197:30:40615:40615	1363980	20	True				
ANR	1364313	Statement	]	1197:31:40616:40616	1363980	21	True				
ANR	1364314	Statement	.	1197:32:40617:40617	1363980	22	True				
ANR	1364315	Statement	catch_op	1197:33:40618:40625	1363980	23	True				
ANR	1364316	Statement	=	1197:42:40627:40627	1363980	24	True				
ANR	1364317	Statement	cfg	1197:44:40629:40631	1363980	25	True				
ANR	1364318	Statement	->	1197:47:40632:40633	1363980	26	True				
ANR	1364319	Statement	catch	1197:49:40634:40638	1363980	27	True				
ANR	1364320	Statement	[	1197:54:40639:40639	1363980	28	True				
ANR	1364321	Statement	i	1197:55:40640:40640	1363980	29	True				
ANR	1364322	Statement	]	1197:56:40641:40641	1363980	30	True				
ANR	1364323	Statement	->	1197:57:40642:40643	1363980	31	True				
ANR	1364324	ExpressionStatement	start_opline - new_opcodes	1197:59:40644:40670	1363980	32	True				
ANR	1364325	AdditiveExpression	start_opline - new_opcodes		1363980	0		-			
ANR	1364326	Identifier	start_opline		1363980	0					
ANR	1364327	Identifier	new_opcodes		1363980	1					
ANR	1364328	ExpressionStatement	j ++	1198:4:40676:40679	1363980	33	True				
ANR	1364329	PostIncDecOperationExpression	j ++		1363980	0					
ANR	1364330	Identifier	j		1363980	0					
ANR	1364331	IncDec	++		1363980	1					
ANR	1364332	ExpressionStatement	op_array -> last_try_catch = j	1201:2:40692:40720	1363980	2	True				
ANR	1364333	AssignmentExpression	op_array -> last_try_catch = j		1363980	0		=			
ANR	1364334	PtrMemberAccess	op_array -> last_try_catch		1363980	0					
ANR	1364335	Identifier	op_array		1363980	0					
ANR	1364336	Identifier	last_try_catch		1363980	1					
ANR	1364337	Identifier	j		1363980	1					
ANR	1364338	IfStatement	if ( op_array -> last_brk_cont )		1363980	7					
ANR	1364339	Condition	op_array -> last_brk_cont	1205:5:40763:40785	1363980	0	True				
ANR	1364340	PtrMemberAccess	op_array -> last_brk_cont		1363980	0					
ANR	1364341	Identifier	op_array		1363980	0					
ANR	1364342	Identifier	last_brk_cont		1363980	1					
ANR	1364343	CompoundStatement		61:2:1790:1795	1363980	1					
ANR	1364344	IdentifierDeclStatement	int i ;	1206:2:40792:40797	1363980	0	True				
ANR	1364345	IdentifierDecl	i		1363980	0					
ANR	1364346	IdentifierDeclType	int		1363980	0					
ANR	1364347	Identifier	i		1363980	1					
ANR	1364348	ForStatement	for ( i = 0 ; i < op_array -> last_brk_cont ; i ++ )		1363980	1					
ANR	1364349	ForInit	i = 0 ;	1207:7:40806:40811	1363980	0	True				
ANR	1364350	AssignmentExpression	i = 0		1363980	0		=			
ANR	1364351	Identifier	i		1363980	0					
ANR	1364352	PrimaryExpression	0		1363980	1					
ANR	1364353	Condition	i < op_array -> last_brk_cont	1207:14:40813:40838	1363980	1	True				
ANR	1364354	RelationalExpression	i < op_array -> last_brk_cont		1363980	0		<			
ANR	1364355	Identifier	i		1363980	0					
ANR	1364356	PtrMemberAccess	op_array -> last_brk_cont		1363980	1					
ANR	1364357	Identifier	op_array		1363980	0					
ANR	1364358	Identifier	last_brk_cont		1363980	1					
ANR	1364359	PostIncDecOperationExpression	i ++	1207:42:40841:40843	1363980	2	True				
ANR	1364360	Identifier	i		1363980	0					
ANR	1364361	IncDec	++		1363980	1					
ANR	1364362	CompoundStatement		62:47:1844:1844	1363980	3					
ANR	1364363	ExpressionStatement	op_array -> brk_cont_array [ i ] . start = cfg -> loop_start [ i ] -> start_opline - new_opcodes	1208:3:40851:40933	1363980	0	True				
ANR	1364364	AssignmentExpression	op_array -> brk_cont_array [ i ] . start = cfg -> loop_start [ i ] -> start_opline - new_opcodes		1363980	0		=			
ANR	1364365	MemberAccess	op_array -> brk_cont_array [ i ] . start		1363980	0					
ANR	1364366	ArrayIndexing	op_array -> brk_cont_array [ i ]		1363980	0					
ANR	1364367	PtrMemberAccess	op_array -> brk_cont_array		1363980	0					
ANR	1364368	Identifier	op_array		1363980	0					
ANR	1364369	Identifier	brk_cont_array		1363980	1					
ANR	1364370	Identifier	i		1363980	1					
ANR	1364371	Identifier	start		1363980	1					
ANR	1364372	AdditiveExpression	cfg -> loop_start [ i ] -> start_opline - new_opcodes		1363980	1		-			
ANR	1364373	PtrMemberAccess	cfg -> loop_start [ i ] -> start_opline		1363980	0					
ANR	1364374	ArrayIndexing	cfg -> loop_start [ i ]		1363980	0					
ANR	1364375	PtrMemberAccess	cfg -> loop_start		1363980	0					
ANR	1364376	Identifier	cfg		1363980	0					
ANR	1364377	Identifier	loop_start		1363980	1					
ANR	1364378	Identifier	i		1363980	1					
ANR	1364379	Identifier	start_opline		1363980	1					
ANR	1364380	Identifier	new_opcodes		1363980	1					
ANR	1364381	ExpressionStatement	op_array -> brk_cont_array [ i ] . cont = cfg -> loop_cont [ i ] -> start_opline - new_opcodes	1209:3:40938:41018	1363980	1	True				
ANR	1364382	AssignmentExpression	op_array -> brk_cont_array [ i ] . cont = cfg -> loop_cont [ i ] -> start_opline - new_opcodes		1363980	0		=			
ANR	1364383	MemberAccess	op_array -> brk_cont_array [ i ] . cont		1363980	0					
ANR	1364384	ArrayIndexing	op_array -> brk_cont_array [ i ]		1363980	0					
ANR	1364385	PtrMemberAccess	op_array -> brk_cont_array		1363980	0					
ANR	1364386	Identifier	op_array		1363980	0					
ANR	1364387	Identifier	brk_cont_array		1363980	1					
ANR	1364388	Identifier	i		1363980	1					
ANR	1364389	Identifier	cont		1363980	1					
ANR	1364390	AdditiveExpression	cfg -> loop_cont [ i ] -> start_opline - new_opcodes		1363980	1		-			
ANR	1364391	PtrMemberAccess	cfg -> loop_cont [ i ] -> start_opline		1363980	0					
ANR	1364392	ArrayIndexing	cfg -> loop_cont [ i ]		1363980	0					
ANR	1364393	PtrMemberAccess	cfg -> loop_cont		1363980	0					
ANR	1364394	Identifier	cfg		1363980	0					
ANR	1364395	Identifier	loop_cont		1363980	1					
ANR	1364396	Identifier	i		1363980	1					
ANR	1364397	Identifier	start_opline		1363980	1					
ANR	1364398	Identifier	new_opcodes		1363980	1					
ANR	1364399	ExpressionStatement	op_array -> brk_cont_array [ i ] . brk = cfg -> loop_brk [ i ] -> start_opline - new_opcodes	1210:3:41023:41101	1363980	2	True				
ANR	1364400	AssignmentExpression	op_array -> brk_cont_array [ i ] . brk = cfg -> loop_brk [ i ] -> start_opline - new_opcodes		1363980	0		=			
ANR	1364401	MemberAccess	op_array -> brk_cont_array [ i ] . brk		1363980	0					
ANR	1364402	ArrayIndexing	op_array -> brk_cont_array [ i ]		1363980	0					
ANR	1364403	PtrMemberAccess	op_array -> brk_cont_array		1363980	0					
ANR	1364404	Identifier	op_array		1363980	0					
ANR	1364405	Identifier	brk_cont_array		1363980	1					
ANR	1364406	Identifier	i		1363980	1					
ANR	1364407	Identifier	brk		1363980	1					
ANR	1364408	AdditiveExpression	cfg -> loop_brk [ i ] -> start_opline - new_opcodes		1363980	1		-			
ANR	1364409	PtrMemberAccess	cfg -> loop_brk [ i ] -> start_opline		1363980	0					
ANR	1364410	ArrayIndexing	cfg -> loop_brk [ i ]		1363980	0					
ANR	1364411	PtrMemberAccess	cfg -> loop_brk		1363980	0					
ANR	1364412	Identifier	cfg		1363980	0					
ANR	1364413	Identifier	loop_brk		1363980	1					
ANR	1364414	Identifier	i		1363980	1					
ANR	1364415	Identifier	start_opline		1363980	1					
ANR	1364416	Identifier	new_opcodes		1363980	1					
ANR	1364417	ForStatement	for ( cur_block = blocks ; cur_block ; cur_block = cur_block -> next )		1363980	8					
ANR	1364418	ForInit	cur_block = blocks ;	1215:6:41147:41165	1363980	0	True				
ANR	1364419	AssignmentExpression	cur_block = blocks		1363980	0		=			
ANR	1364420	Identifier	cur_block		1363980	0					
ANR	1364421	Identifier	blocks		1363980	1					
ANR	1364422	Condition	cur_block	1215:26:41167:41175	1363980	1	True				
ANR	1364423	Identifier	cur_block		1363980	0					
ANR	1364424	AssignmentExpression	cur_block = cur_block -> next	1215:37:41178:41204	1363980	2	True	=			
ANR	1364425	Identifier	cur_block		1363980	0					
ANR	1364426	PtrMemberAccess	cur_block -> next		1363980	1					
ANR	1364427	Identifier	cur_block		1363980	0					
ANR	1364428	Identifier	next		1363980	1					
ANR	1364429	CompoundStatement		70:66:2205:2205	1363980	3					
ANR	1364430	IfStatement	if ( ! cur_block -> access )		1363980	0					
ANR	1364431	Condition	! cur_block -> access	1216:6:41215:41232	1363980	0	True				
ANR	1364432	UnaryOperationExpression	! cur_block -> access		1363980	0					
ANR	1364433	UnaryOperator	!		1363980	0					
ANR	1364434	PtrMemberAccess	cur_block -> access		1363980	1					
ANR	1364435	Identifier	cur_block		1363980	0					
ANR	1364436	Identifier	access		1363980	1					
ANR	1364437	CompoundStatement		71:26:2233:2233	1363980	1					
ANR	1364438	ContinueStatement	continue ;	1217:3:41240:41248	1363980	0	True				
ANR	1364439	ExpressionStatement	opline = cur_block -> start_opline + cur_block -> len - 1	1219:2:41256:41309	1363980	1	True				
ANR	1364440	AssignmentExpression	opline = cur_block -> start_opline + cur_block -> len - 1		1363980	0		=			
ANR	1364441	Identifier	opline		1363980	0					
ANR	1364442	AdditiveExpression	cur_block -> start_opline + cur_block -> len - 1		1363980	1		+			
ANR	1364443	PtrMemberAccess	cur_block -> start_opline		1363980	0					
ANR	1364444	Identifier	cur_block		1363980	0					
ANR	1364445	Identifier	start_opline		1363980	1					
ANR	1364446	AdditiveExpression	cur_block -> len - 1		1363980	1		-			
ANR	1364447	PtrMemberAccess	cur_block -> len		1363980	0					
ANR	1364448	Identifier	cur_block		1363980	0					
ANR	1364449	Identifier	len		1363980	1					
ANR	1364450	PrimaryExpression	1		1363980	1					
ANR	1364451	IfStatement	if ( opline -> opcode == ZEND_OP_DATA )		1363980	2					
ANR	1364452	Condition	opline -> opcode == ZEND_OP_DATA	1220:6:41317:41346	1363980	0	True				
ANR	1364453	EqualityExpression	opline -> opcode == ZEND_OP_DATA		1363980	0		==			
ANR	1364454	PtrMemberAccess	opline -> opcode		1363980	0					
ANR	1364455	Identifier	opline		1363980	0					
ANR	1364456	Identifier	opcode		1363980	1					
ANR	1364457	Identifier	ZEND_OP_DATA		1363980	1					
ANR	1364458	CompoundStatement		75:38:2347:2347	1363980	1					
ANR	1364459	ExpressionStatement	opline --	1221:3:41354:41362	1363980	0	True				
ANR	1364460	PostIncDecOperationExpression	opline --		1363980	0					
ANR	1364461	Identifier	opline		1363980	0					
ANR	1364462	IncDec	--		1363980	1					
ANR	1364463	IfStatement	if ( cur_block -> op1_to )		1363980	3					
ANR	1364464	Condition	cur_block -> op1_to	1223:6:41374:41390	1363980	0	True				
ANR	1364465	PtrMemberAccess	cur_block -> op1_to		1363980	0					
ANR	1364466	Identifier	cur_block		1363980	0					
ANR	1364467	Identifier	op1_to		1363980	1					
ANR	1364468	CompoundStatement		78:25:2391:2391	1363980	1					
ANR	1364469	ExpressionStatement	ZEND_OP1 ( opline ) . opline_num = cur_block -> op1_to -> start_opline - new_opcodes	1224:3:41398:41473	1363980	0	True				
ANR	1364470	AssignmentExpression	ZEND_OP1 ( opline ) . opline_num = cur_block -> op1_to -> start_opline - new_opcodes		1363980	0		=			
ANR	1364471	MemberAccess	ZEND_OP1 ( opline ) . opline_num		1363980	0					
ANR	1364472	CallExpression	ZEND_OP1 ( opline )		1363980	0					
ANR	1364473	Callee	ZEND_OP1		1363980	0					
ANR	1364474	Identifier	ZEND_OP1		1363980	0					
ANR	1364475	ArgumentList	opline		1363980	1					
ANR	1364476	Argument	opline		1363980	0					
ANR	1364477	Identifier	opline		1363980	0					
ANR	1364478	Identifier	opline_num		1363980	1					
ANR	1364479	AdditiveExpression	cur_block -> op1_to -> start_opline - new_opcodes		1363980	1		-			
ANR	1364480	PtrMemberAccess	cur_block -> op1_to -> start_opline		1363980	0					
ANR	1364481	PtrMemberAccess	cur_block -> op1_to		1363980	0					
ANR	1364482	Identifier	cur_block		1363980	0					
ANR	1364483	Identifier	op1_to		1363980	1					
ANR	1364484	Identifier	start_opline		1363980	1					
ANR	1364485	Identifier	new_opcodes		1363980	1					
ANR	1364486	IfStatement	if ( cur_block -> op2_to )		1363980	4					
ANR	1364487	Condition	cur_block -> op2_to	1226:6:41485:41501	1363980	0	True				
ANR	1364488	PtrMemberAccess	cur_block -> op2_to		1363980	0					
ANR	1364489	Identifier	cur_block		1363980	0					
ANR	1364490	Identifier	op2_to		1363980	1					
ANR	1364491	CompoundStatement		81:25:2502:2502	1363980	1					
ANR	1364492	ExpressionStatement	ZEND_OP2 ( opline ) . opline_num = cur_block -> op2_to -> start_opline - new_opcodes	1227:3:41509:41584	1363980	0	True				
ANR	1364493	AssignmentExpression	ZEND_OP2 ( opline ) . opline_num = cur_block -> op2_to -> start_opline - new_opcodes		1363980	0		=			
ANR	1364494	MemberAccess	ZEND_OP2 ( opline ) . opline_num		1363980	0					
ANR	1364495	CallExpression	ZEND_OP2 ( opline )		1363980	0					
ANR	1364496	Callee	ZEND_OP2		1363980	0					
ANR	1364497	Identifier	ZEND_OP2		1363980	0					
ANR	1364498	ArgumentList	opline		1363980	1					
ANR	1364499	Argument	opline		1363980	0					
ANR	1364500	Identifier	opline		1363980	0					
ANR	1364501	Identifier	opline_num		1363980	1					
ANR	1364502	AdditiveExpression	cur_block -> op2_to -> start_opline - new_opcodes		1363980	1		-			
ANR	1364503	PtrMemberAccess	cur_block -> op2_to -> start_opline		1363980	0					
ANR	1364504	PtrMemberAccess	cur_block -> op2_to		1363980	0					
ANR	1364505	Identifier	cur_block		1363980	0					
ANR	1364506	Identifier	op2_to		1363980	1					
ANR	1364507	Identifier	start_opline		1363980	1					
ANR	1364508	Identifier	new_opcodes		1363980	1					
ANR	1364509	IfStatement	if ( cur_block -> ext_to )		1363980	5					
ANR	1364510	Condition	cur_block -> ext_to	1229:6:41596:41612	1363980	0	True				
ANR	1364511	PtrMemberAccess	cur_block -> ext_to		1363980	0					
ANR	1364512	Identifier	cur_block		1363980	0					
ANR	1364513	Identifier	ext_to		1363980	1					
ANR	1364514	CompoundStatement		84:25:2613:2613	1363980	1					
ANR	1364515	ExpressionStatement	opline -> extended_value = cur_block -> ext_to -> start_opline - new_opcodes	1230:3:41620:41690	1363980	0	True				
ANR	1364516	AssignmentExpression	opline -> extended_value = cur_block -> ext_to -> start_opline - new_opcodes		1363980	0		=			
ANR	1364517	PtrMemberAccess	opline -> extended_value		1363980	0					
ANR	1364518	Identifier	opline		1363980	0					
ANR	1364519	Identifier	extended_value		1363980	1					
ANR	1364520	AdditiveExpression	cur_block -> ext_to -> start_opline - new_opcodes		1363980	1		-			
ANR	1364521	PtrMemberAccess	cur_block -> ext_to -> start_opline		1363980	0					
ANR	1364522	PtrMemberAccess	cur_block -> ext_to		1363980	0					
ANR	1364523	Identifier	cur_block		1363980	0					
ANR	1364524	Identifier	ext_to		1363980	1					
ANR	1364525	Identifier	start_opline		1363980	1					
ANR	1364526	Identifier	new_opcodes		1363980	1					
ANR	1364527	ExpressionStatement	"print_block ( cur_block , new_opcodes , ""Out "" )"	1232:2:41698:41741	1363980	6	True				
ANR	1364528	CallExpression	"print_block ( cur_block , new_opcodes , ""Out "" )"		1363980	0					
ANR	1364529	Callee	print_block		1363980	0					
ANR	1364530	Identifier	print_block		1363980	0					
ANR	1364531	ArgumentList	cur_block		1363980	1					
ANR	1364532	Argument	cur_block		1363980	0					
ANR	1364533	Identifier	cur_block		1363980	0					
ANR	1364534	Argument	new_opcodes		1363980	1					
ANR	1364535	Identifier	new_opcodes		1363980	0					
ANR	1364536	Argument	"""Out """		1363980	2					
ANR	1364537	PrimaryExpression	"""Out """		1363980	0					
ANR	1364538	ExpressionStatement	efree ( op_array -> opcodes )	1234:1:41747:41771	1363980	9	True				
ANR	1364539	CallExpression	efree ( op_array -> opcodes )		1363980	0					
ANR	1364540	Callee	efree		1363980	0					
ANR	1364541	Identifier	efree		1363980	0					
ANR	1364542	ArgumentList	op_array -> opcodes		1363980	1					
ANR	1364543	Argument	op_array -> opcodes		1363980	0					
ANR	1364544	PtrMemberAccess	op_array -> opcodes		1363980	0					
ANR	1364545	Identifier	op_array		1363980	0					
ANR	1364546	Identifier	opcodes		1363980	1					
ANR	1364547	ExpressionStatement	"op_array -> opcodes = erealloc ( new_opcodes , op_array -> last * sizeof ( zend_op ) )"	1235:1:41774:41849	1363980	10	True				
ANR	1364548	AssignmentExpression	"op_array -> opcodes = erealloc ( new_opcodes , op_array -> last * sizeof ( zend_op ) )"		1363980	0		=			
ANR	1364549	PtrMemberAccess	op_array -> opcodes		1363980	0					
ANR	1364550	Identifier	op_array		1363980	0					
ANR	1364551	Identifier	opcodes		1363980	1					
ANR	1364552	CallExpression	"erealloc ( new_opcodes , op_array -> last * sizeof ( zend_op ) )"		1363980	1					
ANR	1364553	Callee	erealloc		1363980	0					
ANR	1364554	Identifier	erealloc		1363980	0					
ANR	1364555	ArgumentList	new_opcodes		1363980	1					
ANR	1364556	Argument	new_opcodes		1363980	0					
ANR	1364557	Identifier	new_opcodes		1363980	0					
ANR	1364558	Argument	op_array -> last * sizeof ( zend_op )		1363980	1					
ANR	1364559	MultiplicativeExpression	op_array -> last * sizeof ( zend_op )		1363980	0		*			
ANR	1364560	PtrMemberAccess	op_array -> last		1363980	0					
ANR	1364561	Identifier	op_array		1363980	0					
ANR	1364562	Identifier	last		1363980	1					
ANR	1364563	SizeofExpression	sizeof ( zend_op )		1363980	1					
ANR	1364564	Sizeof	sizeof		1363980	0					
ANR	1364565	SizeofOperand	zend_op		1363980	1					
ANR	1364566	IfStatement	if ( op_array -> early_binding != ( uint32_t ) - 1 )		1363980	11					
ANR	1364567	Condition	op_array -> early_binding != ( uint32_t ) - 1	1238:5:41890:41928	1363980	0	True				
ANR	1364568	EqualityExpression	op_array -> early_binding != ( uint32_t ) - 1		1363980	0		!=			
ANR	1364569	PtrMemberAccess	op_array -> early_binding		1363980	0					
ANR	1364570	Identifier	op_array		1363980	0					
ANR	1364571	Identifier	early_binding		1363980	1					
ANR	1364572	CastExpression	( uint32_t ) - 1		1363980	1					
ANR	1364573	CastTarget	uint32_t		1363980	0					
ANR	1364574	UnaryOperationExpression	- 1		1363980	1					
ANR	1364575	UnaryOperator	-		1363980	0					
ANR	1364576	PrimaryExpression	1		1363980	1					
ANR	1364577	CompoundStatement		95:2:2984:2996	1363980	1					
ANR	1364578	IdentifierDeclStatement	uint32_t * opline_num = & op_array -> early_binding ;	1239:2:41935:41982	1363980	0	True				
ANR	1364579	IdentifierDecl	* opline_num = & op_array -> early_binding		1363980	0					
ANR	1364580	IdentifierDeclType	uint32_t *		1363980	0					
ANR	1364581	Identifier	opline_num		1363980	1					
ANR	1364582	AssignmentExpression	* opline_num = & op_array -> early_binding		1363980	2		=			
ANR	1364583	Identifier	opline_num		1363980	0					
ANR	1364584	UnaryOperationExpression	& op_array -> early_binding		1363980	1					
ANR	1364585	UnaryOperator	&		1363980	0					
ANR	1364586	PtrMemberAccess	op_array -> early_binding		1363980	1					
ANR	1364587	Identifier	op_array		1363980	0					
ANR	1364588	Identifier	early_binding		1363980	1					
ANR	1364589	IdentifierDeclStatement	zend_op * end ;	1240:2:41986:41998	1363980	1	True				
ANR	1364590	IdentifierDecl	* end		1363980	0					
ANR	1364591	IdentifierDeclType	zend_op *		1363980	0					
ANR	1364592	Identifier	end		1363980	1					
ANR	1364593	ExpressionStatement	opline = op_array -> opcodes	1242:2:42003:42029	1363980	2	True				
ANR	1364594	AssignmentExpression	opline = op_array -> opcodes		1363980	0		=			
ANR	1364595	Identifier	opline		1363980	0					
ANR	1364596	PtrMemberAccess	op_array -> opcodes		1363980	1					
ANR	1364597	Identifier	op_array		1363980	0					
ANR	1364598	Identifier	opcodes		1363980	1					
ANR	1364599	ExpressionStatement	end = opline + op_array -> last	1243:2:42033:42062	1363980	3	True				
ANR	1364600	AssignmentExpression	end = opline + op_array -> last		1363980	0		=			
ANR	1364601	Identifier	end		1363980	0					
ANR	1364602	AdditiveExpression	opline + op_array -> last		1363980	1		+			
ANR	1364603	Identifier	opline		1363980	0					
ANR	1364604	PtrMemberAccess	op_array -> last		1363980	1					
ANR	1364605	Identifier	op_array		1363980	0					
ANR	1364606	Identifier	last		1363980	1					
ANR	1364607	WhileStatement	while ( opline < end )		1363980	4					
ANR	1364608	Condition	opline < end	1244:9:42073:42084	1363980	0	True				
ANR	1364609	RelationalExpression	opline < end		1363980	0		<			
ANR	1364610	Identifier	opline		1363980	0					
ANR	1364611	Identifier	end		1363980	1					
ANR	1364612	CompoundStatement		99:23:3085:3085	1363980	1					
ANR	1364613	IfStatement	if ( opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED )		1363980	0					
ANR	1364614	Condition	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED	1245:7:42096:42149	1363980	0	True				
ANR	1364615	EqualityExpression	opline -> opcode == ZEND_DECLARE_INHERITED_CLASS_DELAYED		1363980	0		==			
ANR	1364616	PtrMemberAccess	opline -> opcode		1363980	0					
ANR	1364617	Identifier	opline		1363980	0					
ANR	1364618	Identifier	opcode		1363980	1					
ANR	1364619	Identifier	ZEND_DECLARE_INHERITED_CLASS_DELAYED		1363980	1					
ANR	1364620	CompoundStatement		100:63:3150:3150	1363980	1					
ANR	1364621	ExpressionStatement	* opline_num = opline - op_array -> opcodes	1246:4:42158:42198	1363980	0	True				
ANR	1364622	AssignmentExpression	* opline_num = opline - op_array -> opcodes		1363980	0		=			
ANR	1364623	UnaryOperationExpression	* opline_num		1363980	0					
ANR	1364624	UnaryOperator	*		1363980	0					
ANR	1364625	Identifier	opline_num		1363980	1					
ANR	1364626	AdditiveExpression	opline - op_array -> opcodes		1363980	1		-			
ANR	1364627	Identifier	opline		1363980	0					
ANR	1364628	PtrMemberAccess	op_array -> opcodes		1363980	1					
ANR	1364629	Identifier	op_array		1363980	0					
ANR	1364630	Identifier	opcodes		1363980	1					
ANR	1364631	ExpressionStatement	opline_num = & ZEND_RESULT ( opline ) . opline_num	1247:4:42204:42248	1363980	1	True				
ANR	1364632	AssignmentExpression	opline_num = & ZEND_RESULT ( opline ) . opline_num		1363980	0		=			
ANR	1364633	Identifier	opline_num		1363980	0					
ANR	1364634	UnaryOperationExpression	& ZEND_RESULT ( opline ) . opline_num		1363980	1					
ANR	1364635	UnaryOperator	&		1363980	0					
ANR	1364636	MemberAccess	ZEND_RESULT ( opline ) . opline_num		1363980	1					
ANR	1364637	CallExpression	ZEND_RESULT ( opline )		1363980	0					
ANR	1364638	Callee	ZEND_RESULT		1363980	0					
ANR	1364639	Identifier	ZEND_RESULT		1363980	0					
ANR	1364640	ArgumentList	opline		1363980	1					
ANR	1364641	Argument	opline		1363980	0					
ANR	1364642	Identifier	opline		1363980	0					
ANR	1364643	Identifier	opline_num		1363980	1					
ANR	1364644	ExpressionStatement	++ opline	1249:3:42258:42266	1363980	1	True				
ANR	1364645	UnaryExpression	++ opline		1363980	0					
ANR	1364646	IncDec	++		1363980	0					
ANR	1364647	Identifier	opline		1363980	1					
ANR	1364648	ExpressionStatement	* opline_num = - 1	1251:2:42274:42290	1363980	5	True				
ANR	1364649	AssignmentExpression	* opline_num = - 1		1363980	0		=			
ANR	1364650	UnaryOperationExpression	* opline_num		1363980	0					
ANR	1364651	UnaryOperator	*		1363980	0					
ANR	1364652	Identifier	opline_num		1363980	1					
ANR	1364653	UnaryOperationExpression	- 1		1363980	1					
ANR	1364654	UnaryOperator	-		1363980	0					
ANR	1364655	PrimaryExpression	1		1363980	1					
ANR	1364656	ReturnType	static void		1363980	1					
ANR	1364657	Identifier	assemble_code_blocks		1363980	2					
ANR	1364658	ParameterList	"zend_cfg * cfg , zend_op_array * op_array"		1363980	3					
ANR	1364659	Parameter	zend_cfg * cfg	1145:33:38961:38973	1363980	0	True				
ANR	1364660	ParameterType	zend_cfg *		1363980	0					
ANR	1364661	Identifier	cfg		1363980	1					
ANR	1364662	Parameter	zend_op_array * op_array	1145:48:38976:38998	1363980	1	True				
ANR	1364663	ParameterType	zend_op_array *		1363980	0					
ANR	1364664	Identifier	op_array		1363980	1					
ANR	1364665	CFGEntryNode	ENTRY		1363980		True				
ANR	1364666	CFGExitNode	EXIT		1363980		True				
ANR	1364667	CFGErrorNode	ERROR		1363980		True				
ANR	1364668	CFGErrorNode	ERROR		1363980		True				
ANR	1364669	Symbol	* cfg -> loop_brk		1363980						
ANR	1364670	Symbol	ZEND_OP1 ( opline ) . opline_num		1363980						
ANR	1364671	Symbol	next -> next		1363980						
ANR	1364672	Symbol	ZEND_OP_DATA		1363980						
ANR	1364673	Symbol	* next		1363980						
ANR	1364674	Symbol	ZEND_OP2_TYPE		1363980						
ANR	1364675	Symbol	* * cfg -> loop_start		1363980						
ANR	1364676	Symbol	opline -> extended_value		1363980						
ANR	1364677	Symbol	cfg -> loop_brk		1363980						
ANR	1364678	Symbol	opline		1363980						
ANR	1364679	Symbol	* cur_block -> op2_to		1363980						
ANR	1364680	Symbol	cur_block -> ext_to -> start_opline		1363980						
ANR	1364681	Symbol	op_array -> early_binding		1363980						
ANR	1364682	Symbol	* cur_block		1363980						
ANR	1364683	Symbol	cur_block -> start_opline		1363980						
ANR	1364684	Symbol	cur_block -> op1_to		1363980						
ANR	1364685	Symbol	op_array -> brk_cont_array [ i ] . cont		1363980						
ANR	1364686	Symbol	& ZEND_RESULT ( opline ) . opline_num		1363980						
ANR	1364687	Symbol	& op_array -> early_binding		1363980						
ANR	1364688	Symbol	erealloc		1363980						
ANR	1364689	Symbol	( opline - 1 ) -> opcode		1363980						
ANR	1364690	Symbol	cur_block -> follow_to		1363980						
ANR	1364691	Symbol	IS_CONST		1363980						
ANR	1364692	Symbol	* * i		1363980						
ANR	1364693	Symbol	* * * cfg		1363980						
ANR	1364694	Symbol	NULL		1363980						
ANR	1364695	Symbol	cfg -> loop_cont [ i ] -> start_opline		1363980						
ANR	1364696	Symbol	& ZEND_OP1_LITERAL		1363980						
ANR	1364697	Symbol	* op_array		1363980						
ANR	1364698	Symbol	op_array -> last		1363980						
ANR	1364699	Symbol	cur_block -> len		1363980						
ANR	1364700	Symbol	* opline_num		1363980						
ANR	1364701	Symbol	* cfg		1363980						
ANR	1364702	Symbol	cur_block -> next		1363980						
ANR	1364703	Symbol	ZEND_OP2 ( opline ) . opline_num		1363980						
ANR	1364704	Symbol	* cur_block -> op1_to		1363980						
ANR	1364705	Symbol	cur_block -> op2_to		1363980						
ANR	1364706	Symbol	* * cfg		1363980						
ANR	1364707	Symbol	cfg -> loop_start		1363980						
ANR	1364708	Symbol	opline_num		1363980						
ANR	1364709	Symbol	* * op_array		1363980						
ANR	1364710	Symbol	next		1363980						
ANR	1364711	Symbol	_opl		1363980						
ANR	1364712	Symbol	op_array -> brk_cont_array [ i ] . brk		1363980						
ANR	1364713	Symbol	cfg -> blocks		1363980						
ANR	1364714	Symbol	cur_block -> access		1363980						
ANR	1364715	Symbol	emalloc		1363980						
ANR	1364716	Symbol	op_array -> brk_cont_array		1363980						
ANR	1364717	Symbol	op_array -> opcodes		1363980						
ANR	1364718	Symbol	cur_block		1363980						
ANR	1364719	Symbol	next -> access		1363980						
ANR	1364720	Symbol	cfg -> loop_start [ i ] -> start_opline		1363980						
ANR	1364721	Symbol	& ZEND_RESULT		1363980						
ANR	1364722	Symbol	ZEND_RESULT		1363980						
ANR	1364723	Symbol	end		1363980						
ANR	1364724	Symbol	ZEND_DECLARE_INHERITED_CLASS_DELAYED		1363980						
ANR	1364725	Symbol	cfg -> loop_cont		1363980						
ANR	1364726	Symbol	* * cur_block		1363980						
ANR	1364727	Symbol	& ZEND_OP2_LITERAL		1363980						
ANR	1364728	Symbol	* cur_block -> ext_to		1363980						
ANR	1364729	Symbol	cfg		1363980						
ANR	1364730	Symbol	op_array -> brk_cont_array [ i ] . start		1363980						
ANR	1364731	Symbol	* op_array -> brk_cont_array		1363980						
ANR	1364732	Symbol	blocks		1363980						
ANR	1364733	Symbol	cur_block -> ext_to		1363980						
ANR	1364734	Symbol	i		1363980						
ANR	1364735	Symbol	j		1363980						
ANR	1364736	Symbol	* * cfg -> loop_brk		1363980						
ANR	1364737	Symbol	ZEND_OP1		1363980						
ANR	1364738	Symbol	op_array -> last_try_catch		1363980						
ANR	1364739	Symbol	op_array -> last_brk_cont		1363980						
ANR	1364740	Symbol	ZEND_OP2		1363980						
ANR	1364741	Symbol	new_opcodes		1363980						
ANR	1364742	Symbol	ZEND_OP1_TYPE		1363980						
ANR	1364743	Symbol	cfg -> loop_brk [ i ] -> start_opline		1363980						
ANR	1364744	Symbol	cur_block -> op1_to -> start_opline		1363980						
ANR	1364745	Symbol	ZEND_JMP		1363980						
ANR	1364746	Symbol	* i		1363980						
ANR	1364747	Symbol	* opline		1363980						
ANR	1364748	Symbol	* cfg -> loop_start		1363980						
ANR	1364749	Symbol	* cfg -> loop_cont		1363980						
ANR	1364750	Symbol	opline -> opcode		1363980						
ANR	1364751	Symbol	* * cfg -> loop_cont		1363980						
ANR	1364752	Symbol	cur_block -> op2_to -> start_opline		1363980						
ANR	1364753	Symbol	op_array		1363980						
ANR	1364754	Function	zend_jmp_optimization	1255:0:42298:59957							
ANR	1364755	FunctionDef	"zend_jmp_optimization (zend_code_block * block , zend_op_array * op_array , zend_code_block * blocks , zend_cfg * cfg , zend_optimizer_ctx * ctx)"		1364754	0					
ANR	1364756	CompoundStatement		1256:0:42446:59957	1364754	0					
ANR	1364757	IdentifierDeclStatement	zend_op * last_op = ( block -> start_opline + block -> len - 1 ) ;	1258:1:42504:42561	1364754	0	True				
ANR	1364758	IdentifierDecl	* last_op = ( block -> start_opline + block -> len - 1 )		1364754	0					
ANR	1364759	IdentifierDeclType	zend_op *		1364754	0					
ANR	1364760	Identifier	last_op		1364754	1					
ANR	1364761	AssignmentExpression	* last_op = ( block -> start_opline + block -> len - 1 )		1364754	2		=			
ANR	1364762	Identifier	last_op		1364754	0					
ANR	1364763	AdditiveExpression	block -> start_opline + block -> len - 1		1364754	1		+			
ANR	1364764	PtrMemberAccess	block -> start_opline		1364754	0					
ANR	1364765	Identifier	block		1364754	0					
ANR	1364766	Identifier	start_opline		1364754	1					
ANR	1364767	AdditiveExpression	block -> len - 1		1364754	1		-			
ANR	1364768	PtrMemberAccess	block -> len		1364754	0					
ANR	1364769	Identifier	block		1364754	0					
ANR	1364770	Identifier	len		1364754	1					
ANR	1364771	PrimaryExpression	1		1364754	1					
ANR	1364772	IfStatement	if ( ! block -> len )		1364754	1					
ANR	1364773	Condition	! block -> len	1260:5:42569:42579	1364754	0	True				
ANR	1364774	UnaryOperationExpression	! block -> len		1364754	0					
ANR	1364775	UnaryOperator	!		1364754	0					
ANR	1364776	PtrMemberAccess	block -> len		1364754	1					
ANR	1364777	Identifier	block		1364754	0					
ANR	1364778	Identifier	len		1364754	1					
ANR	1364779	CompoundStatement		5:18:135:135	1364754	1					
ANR	1364780	ReturnStatement	return ;	1261:2:42586:42592	1364754	0	True				
ANR	1364781	SwitchStatement	switch ( last_op -> opcode )		1364754	2					
ANR	1364782	Condition	last_op -> opcode	1263:9:42606:42620	1364754	0	True				
ANR	1364783	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1364784	Identifier	last_op		1364754	0					
ANR	1364785	Identifier	opcode		1364754	1					
ANR	1364786	CompoundStatement		8:26:176:176	1364754	1					
ANR	1364787	Label	case ZEND_JMP :	1264:2:42627:42640	1364754	0	True				
ANR	1364788	Identifier	ZEND_JMP		1364754	0					
ANR	1364789	CompoundStatement		12:4:255:290	1364754	1					
ANR	1364790	IdentifierDeclStatement	zend_op * target = block -> op1_to -> start_opline ;	1266:4:42651:42696	1364754	0	True				
ANR	1364791	IdentifierDecl	* target = block -> op1_to -> start_opline		1364754	0					
ANR	1364792	IdentifierDeclType	zend_op *		1364754	0					
ANR	1364793	Identifier	target		1364754	1					
ANR	1364794	AssignmentExpression	* target = block -> op1_to -> start_opline		1364754	2		=			
ANR	1364795	Identifier	target		1364754	0					
ANR	1364796	PtrMemberAccess	block -> op1_to -> start_opline		1364754	1					
ANR	1364797	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1364798	Identifier	block		1364754	0					
ANR	1364799	Identifier	op1_to		1364754	1					
ANR	1364800	Identifier	start_opline		1364754	1					
ANR	1364801	IdentifierDeclStatement	zend_code_block * next = block -> next ;	1267:4:42702:42737	1364754	1	True				
ANR	1364802	IdentifierDecl	* next = block -> next		1364754	0					
ANR	1364803	IdentifierDeclType	zend_code_block *		1364754	0					
ANR	1364804	Identifier	next		1364754	1					
ANR	1364805	AssignmentExpression	* next = block -> next		1364754	2		=			
ANR	1364806	Identifier	next		1364754	0					
ANR	1364807	PtrMemberAccess	block -> next		1364754	1					
ANR	1364808	Identifier	block		1364754	0					
ANR	1364809	Identifier	next		1364754	1					
ANR	1364810	WhileStatement	while ( next && ! next -> access )		1364754	2					
ANR	1364811	Condition	next && ! next -> access	1269:11:42751:42771	1364754	0	True				
ANR	1364812	AndExpression	next && ! next -> access		1364754	0		&&			
ANR	1364813	Identifier	next		1364754	0					
ANR	1364814	UnaryOperationExpression	! next -> access		1364754	1					
ANR	1364815	UnaryOperator	!		1364754	0					
ANR	1364816	PtrMemberAccess	next -> access		1364754	1					
ANR	1364817	Identifier	next		1364754	0					
ANR	1364818	Identifier	access		1364754	1					
ANR	1364819	CompoundStatement		14:34:327:327	1364754	1					
ANR	1364820	ExpressionStatement	next = next -> next	1271:5:42806:42823	1364754	0	True				
ANR	1364821	AssignmentExpression	next = next -> next		1364754	0		=			
ANR	1364822	Identifier	next		1364754	0					
ANR	1364823	PtrMemberAccess	next -> next		1364754	1					
ANR	1364824	Identifier	next		1364754	0					
ANR	1364825	Identifier	next		1364754	1					
ANR	1364826	IfStatement	if ( block -> op1_to == next )		1364754	3					
ANR	1364827	Condition	block -> op1_to == next	1275:8:42867:42887	1364754	0	True				
ANR	1364828	EqualityExpression	block -> op1_to == next		1364754	0		==			
ANR	1364829	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1364830	Identifier	block		1364754	0					
ANR	1364831	Identifier	op1_to		1364754	1					
ANR	1364832	Identifier	next		1364754	1					
ANR	1364833	CompoundStatement		20:31:443:443	1364754	1					
ANR	1364834	ExpressionStatement	block -> follow_to = block -> op1_to	1276:5:42897:42929	1364754	0	True				
ANR	1364835	AssignmentExpression	block -> follow_to = block -> op1_to		1364754	0		=			
ANR	1364836	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1364837	Identifier	block		1364754	0					
ANR	1364838	Identifier	follow_to		1364754	1					
ANR	1364839	PtrMemberAccess	block -> op1_to		1364754	1					
ANR	1364840	Identifier	block		1364754	0					
ANR	1364841	Identifier	op1_to		1364754	1					
ANR	1364842	ExpressionStatement	block -> op1_to = NULL	1277:5:42936:42956	1364754	1	True				
ANR	1364843	AssignmentExpression	block -> op1_to = NULL		1364754	0		=			
ANR	1364844	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1364845	Identifier	block		1364754	0					
ANR	1364846	Identifier	op1_to		1364754	1					
ANR	1364847	Identifier	NULL		1364754	1					
ANR	1364848	ExpressionStatement	MAKE_NOP ( last_op )	1278:5:42963:42980	1364754	2	True				
ANR	1364849	CallExpression	MAKE_NOP ( last_op )		1364754	0					
ANR	1364850	Callee	MAKE_NOP		1364754	0					
ANR	1364851	Identifier	MAKE_NOP		1364754	0					
ANR	1364852	ArgumentList	last_op		1364754	1					
ANR	1364853	Argument	last_op		1364754	0					
ANR	1364854	Identifier	last_op		1364754	0					
ANR	1364855	ExpressionStatement	block -> len --	1279:5:42987:42999	1364754	3	True				
ANR	1364856	PostIncDecOperationExpression	block -> len --		1364754	0					
ANR	1364857	PtrMemberAccess	block -> len		1364754	0					
ANR	1364858	Identifier	block		1364754	0					
ANR	1364859	Identifier	len		1364754	1					
ANR	1364860	IncDec	--		1364754	1					
ANR	1364861	IfStatement	if ( block -> len == 0 )		1364754	4					
ANR	1364862	Condition	block -> len == 0	1280:9:43010:43024	1364754	0	True				
ANR	1364863	EqualityExpression	block -> len == 0		1364754	0		==			
ANR	1364864	PtrMemberAccess	block -> len		1364754	0					
ANR	1364865	Identifier	block		1364754	0					
ANR	1364866	Identifier	len		1364754	1					
ANR	1364867	PrimaryExpression	0		1364754	1					
ANR	1364868	CompoundStatement		25:26:580:580	1364754	1					
ANR	1364869	ExpressionStatement	"delete_code_block ( block , ctx )"	1282:6:43081:43110	1364754	0	True				
ANR	1364870	CallExpression	"delete_code_block ( block , ctx )"		1364754	0					
ANR	1364871	Callee	delete_code_block		1364754	0					
ANR	1364872	Identifier	delete_code_block		1364754	0					
ANR	1364873	ArgumentList	block		1364754	1					
ANR	1364874	Argument	block		1364754	0					
ANR	1364875	Identifier	block		1364754	0					
ANR	1364876	Argument	ctx		1364754	1					
ANR	1364877	Identifier	ctx		1364754	0					
ANR	1364878	BreakStatement	break ;	1284:5:43124:43129	1364754	5	True				
ANR	1364879	IfStatement	if ( ( ( target -> opcode == ZEND_JMP && block -> op1_to != block -> op1_to -> op1_to ) || target -> opcode == ZEND_JMPZNZ ) && ! block -> op1_to -> protected )		1364754	4					
ANR	1364880	Condition	( ( target -> opcode == ZEND_JMP && block -> op1_to != block -> op1_to -> op1_to ) || target -> opcode == ZEND_JMPZNZ ) && ! block -> op1_to -> protected	1287:8:43146:43294	1364754	0	True				
ANR	1364881	AndExpression	( ( target -> opcode == ZEND_JMP && block -> op1_to != block -> op1_to -> op1_to ) || target -> opcode == ZEND_JMPZNZ ) && ! block -> op1_to -> protected		1364754	0		&&			
ANR	1364882	OrExpression	( target -> opcode == ZEND_JMP && block -> op1_to != block -> op1_to -> op1_to ) || target -> opcode == ZEND_JMPZNZ		1364754	0		||			
ANR	1364883	AndExpression	target -> opcode == ZEND_JMP && block -> op1_to != block -> op1_to -> op1_to		1364754	0		&&			
ANR	1364884	EqualityExpression	target -> opcode == ZEND_JMP		1364754	0		==			
ANR	1364885	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1364886	Identifier	target		1364754	0					
ANR	1364887	Identifier	opcode		1364754	1					
ANR	1364888	Identifier	ZEND_JMP		1364754	1					
ANR	1364889	EqualityExpression	block -> op1_to != block -> op1_to -> op1_to		1364754	1		!=			
ANR	1364890	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1364891	Identifier	block		1364754	0					
ANR	1364892	Identifier	op1_to		1364754	1					
ANR	1364893	PtrMemberAccess	block -> op1_to -> op1_to		1364754	1					
ANR	1364894	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1364895	Identifier	block		1364754	0					
ANR	1364896	Identifier	op1_to		1364754	1					
ANR	1364897	Identifier	op1_to		1364754	1					
ANR	1364898	EqualityExpression	target -> opcode == ZEND_JMPZNZ		1364754	1		==			
ANR	1364899	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1364900	Identifier	target		1364754	0					
ANR	1364901	Identifier	opcode		1364754	1					
ANR	1364902	Identifier	ZEND_JMPZNZ		1364754	1					
ANR	1364903	UnaryOperationExpression	! block -> op1_to -> protected		1364754	1					
ANR	1364904	UnaryOperator	!		1364754	0					
ANR	1364905	PtrMemberAccess	block -> op1_to -> protected		1364754	1					
ANR	1364906	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1364907	Identifier	block		1364754	0					
ANR	1364908	Identifier	op1_to		1364754	1					
ANR	1364909	Identifier	protected		1364754	1					
ANR	1364910	CompoundStatement		35:32:850:850	1364754	1					
ANR	1364911	ExpressionStatement	* last_op = * target	1293:5:43392:43410	1364754	0	True				
ANR	1364912	AssignmentExpression	* last_op = * target		1364754	0		=			
ANR	1364913	UnaryOperationExpression	* last_op		1364754	0					
ANR	1364914	UnaryOperator	*		1364754	0					
ANR	1364915	Identifier	last_op		1364754	1					
ANR	1364916	UnaryOperationExpression	* target		1364754	1					
ANR	1364917	UnaryOperator	*		1364754	0					
ANR	1364918	Identifier	target		1364754	1					
ANR	1364919	IfStatement	if ( ZEND_OP1_TYPE ( last_op ) == IS_CONST )		1364754	1					
ANR	1364920	Condition	ZEND_OP1_TYPE ( last_op ) == IS_CONST	1294:9:43421:43454	1364754	0	True				
ANR	1364921	EqualityExpression	ZEND_OP1_TYPE ( last_op ) == IS_CONST		1364754	0		==			
ANR	1364922	CallExpression	ZEND_OP1_TYPE ( last_op )		1364754	0					
ANR	1364923	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1364924	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1364925	ArgumentList	last_op		1364754	1					
ANR	1364926	Argument	last_op		1364754	0					
ANR	1364927	Identifier	last_op		1364754	0					
ANR	1364928	Identifier	IS_CONST		1364754	1					
ANR	1364929	CompoundStatement		40:6:1018:1053	1364754	1					
ANR	1364930	IdentifierDeclStatement	zval zv = ZEND_OP1_LITERAL ( last_op ) ;	1295:6:43465:43500	1364754	0	True				
ANR	1364931	IdentifierDecl	zv = ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1364932	IdentifierDeclType	zval		1364754	0					
ANR	1364933	Identifier	zv		1364754	1					
ANR	1364934	AssignmentExpression	zv = ZEND_OP1_LITERAL ( last_op )		1364754	2		=			
ANR	1364935	Identifier	zv		1364754	0					
ANR	1364936	CallExpression	ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1364937	Callee	ZEND_OP1_LITERAL		1364754	0					
ANR	1364938	Identifier	ZEND_OP1_LITERAL		1364754	0					
ANR	1364939	ArgumentList	last_op		1364754	1					
ANR	1364940	Argument	last_op		1364754	0					
ANR	1364941	Identifier	last_op		1364754	0					
ANR	1364942	ExpressionStatement	zval_copy_ctor ( & zv )	1296:6:43508:43527	1364754	1	True				
ANR	1364943	CallExpression	zval_copy_ctor ( & zv )		1364754	0					
ANR	1364944	Callee	zval_copy_ctor		1364754	0					
ANR	1364945	Identifier	zval_copy_ctor		1364754	0					
ANR	1364946	ArgumentList	& zv		1364754	1					
ANR	1364947	Argument	& zv		1364754	0					
ANR	1364948	UnaryOperationExpression	& zv		1364754	0					
ANR	1364949	UnaryOperator	&		1364754	0					
ANR	1364950	Identifier	zv		1364754	1					
ANR	1364951	ExpressionStatement	"last_op -> op1 . constant = zend_optimizer_add_literal ( op_array , & zv )"	1297:6:43535:43600	1364754	2	True				
ANR	1364952	AssignmentExpression	"last_op -> op1 . constant = zend_optimizer_add_literal ( op_array , & zv )"		1364754	0		=			
ANR	1364953	MemberAccess	last_op -> op1 . constant		1364754	0					
ANR	1364954	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1364955	Identifier	last_op		1364754	0					
ANR	1364956	Identifier	op1		1364754	1					
ANR	1364957	Identifier	constant		1364754	1					
ANR	1364958	CallExpression	"zend_optimizer_add_literal ( op_array , & zv )"		1364754	1					
ANR	1364959	Callee	zend_optimizer_add_literal		1364754	0					
ANR	1364960	Identifier	zend_optimizer_add_literal		1364754	0					
ANR	1364961	ArgumentList	op_array		1364754	1					
ANR	1364962	Argument	op_array		1364754	0					
ANR	1364963	Identifier	op_array		1364754	0					
ANR	1364964	Argument	& zv		1364754	1					
ANR	1364965	UnaryOperationExpression	& zv		1364754	0					
ANR	1364966	UnaryOperator	&		1364754	0					
ANR	1364967	Identifier	zv		1364754	1					
ANR	1364968	ExpressionStatement	"del_source ( block , block -> op1_to )"	1299:5:43614:43646	1364754	2	True				
ANR	1364969	CallExpression	"del_source ( block , block -> op1_to )"		1364754	0					
ANR	1364970	Callee	del_source		1364754	0					
ANR	1364971	Identifier	del_source		1364754	0					
ANR	1364972	ArgumentList	block		1364754	1					
ANR	1364973	Argument	block		1364754	0					
ANR	1364974	Identifier	block		1364754	0					
ANR	1364975	Argument	block -> op1_to		1364754	1					
ANR	1364976	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1364977	Identifier	block		1364754	0					
ANR	1364978	Identifier	op1_to		1364754	1					
ANR	1364979	IfStatement	if ( block -> op1_to -> op2_to )		1364754	3					
ANR	1364980	Condition	block -> op1_to -> op2_to	1300:9:43657:43677	1364754	0	True				
ANR	1364981	PtrMemberAccess	block -> op1_to -> op2_to		1364754	0					
ANR	1364982	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1364983	Identifier	block		1364754	0					
ANR	1364984	Identifier	op1_to		1364754	1					
ANR	1364985	Identifier	op2_to		1364754	1					
ANR	1364986	CompoundStatement		45:32:1233:1233	1364754	1					
ANR	1364987	ExpressionStatement	block -> op2_to = block -> op1_to -> op2_to	1301:6:43688:43725	1364754	0	True				
ANR	1364988	AssignmentExpression	block -> op2_to = block -> op1_to -> op2_to		1364754	0		=			
ANR	1364989	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1364990	Identifier	block		1364754	0					
ANR	1364991	Identifier	op2_to		1364754	1					
ANR	1364992	PtrMemberAccess	block -> op1_to -> op2_to		1364754	1					
ANR	1364993	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1364994	Identifier	block		1364754	0					
ANR	1364995	Identifier	op1_to		1364754	1					
ANR	1364996	Identifier	op2_to		1364754	1					
ANR	1364997	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1302:6:43733:43765	1364754	1	True				
ANR	1364998	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1364999	Callee	ADD_SOURCE		1364754	0					
ANR	1365000	Identifier	ADD_SOURCE		1364754	0					
ANR	1365001	ArgumentList	block		1364754	1					
ANR	1365002	Argument	block		1364754	0					
ANR	1365003	Identifier	block		1364754	0					
ANR	1365004	Argument	block -> op2_to		1364754	1					
ANR	1365005	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365006	Identifier	block		1364754	0					
ANR	1365007	Identifier	op2_to		1364754	1					
ANR	1365008	IfStatement	if ( block -> op1_to -> ext_to )		1364754	4					
ANR	1365009	Condition	block -> op1_to -> ext_to	1304:9:43783:43803	1364754	0	True				
ANR	1365010	PtrMemberAccess	block -> op1_to -> ext_to		1364754	0					
ANR	1365011	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365012	Identifier	block		1364754	0					
ANR	1365013	Identifier	op1_to		1364754	1					
ANR	1365014	Identifier	ext_to		1364754	1					
ANR	1365015	CompoundStatement		49:32:1359:1359	1364754	1					
ANR	1365016	ExpressionStatement	block -> ext_to = block -> op1_to -> ext_to	1305:6:43814:43851	1364754	0	True				
ANR	1365017	AssignmentExpression	block -> ext_to = block -> op1_to -> ext_to		1364754	0		=			
ANR	1365018	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1365019	Identifier	block		1364754	0					
ANR	1365020	Identifier	ext_to		1364754	1					
ANR	1365021	PtrMemberAccess	block -> op1_to -> ext_to		1364754	1					
ANR	1365022	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365023	Identifier	block		1364754	0					
ANR	1365024	Identifier	op1_to		1364754	1					
ANR	1365025	Identifier	ext_to		1364754	1					
ANR	1365026	ExpressionStatement	"ADD_SOURCE ( block , block -> ext_to )"	1306:6:43859:43891	1364754	1	True				
ANR	1365027	CallExpression	"ADD_SOURCE ( block , block -> ext_to )"		1364754	0					
ANR	1365028	Callee	ADD_SOURCE		1364754	0					
ANR	1365029	Identifier	ADD_SOURCE		1364754	0					
ANR	1365030	ArgumentList	block		1364754	1					
ANR	1365031	Argument	block		1364754	0					
ANR	1365032	Identifier	block		1364754	0					
ANR	1365033	Argument	block -> ext_to		1364754	1					
ANR	1365034	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1365035	Identifier	block		1364754	0					
ANR	1365036	Identifier	ext_to		1364754	1					
ANR	1365037	IfStatement	if ( block -> op1_to -> op1_to )		1364754	5					
ANR	1365038	Condition	block -> op1_to -> op1_to	1308:9:43909:43929	1364754	0	True				
ANR	1365039	PtrMemberAccess	block -> op1_to -> op1_to		1364754	0					
ANR	1365040	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365041	Identifier	block		1364754	0					
ANR	1365042	Identifier	op1_to		1364754	1					
ANR	1365043	Identifier	op1_to		1364754	1					
ANR	1365044	CompoundStatement		53:32:1485:1485	1364754	1					
ANR	1365045	ExpressionStatement	block -> op1_to = block -> op1_to -> op1_to	1309:6:43940:43977	1364754	0	True				
ANR	1365046	AssignmentExpression	block -> op1_to = block -> op1_to -> op1_to		1364754	0		=			
ANR	1365047	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365048	Identifier	block		1364754	0					
ANR	1365049	Identifier	op1_to		1364754	1					
ANR	1365050	PtrMemberAccess	block -> op1_to -> op1_to		1364754	1					
ANR	1365051	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365052	Identifier	block		1364754	0					
ANR	1365053	Identifier	op1_to		1364754	1					
ANR	1365054	Identifier	op1_to		1364754	1					
ANR	1365055	ExpressionStatement	"ADD_SOURCE ( block , block -> op1_to )"	1310:6:43985:44017	1364754	1	True				
ANR	1365056	CallExpression	"ADD_SOURCE ( block , block -> op1_to )"		1364754	0					
ANR	1365057	Callee	ADD_SOURCE		1364754	0					
ANR	1365058	Identifier	ADD_SOURCE		1364754	0					
ANR	1365059	ArgumentList	block		1364754	1					
ANR	1365060	Argument	block		1364754	0					
ANR	1365061	Identifier	block		1364754	0					
ANR	1365062	Argument	block -> op1_to		1364754	1					
ANR	1365063	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365064	Identifier	block		1364754	0					
ANR	1365065	Identifier	op1_to		1364754	1					
ANR	1365066	ElseStatement	else		1364754	0					
ANR	1365067	CompoundStatement		56:12:1584:1584	1364754	0					
ANR	1365068	ExpressionStatement	block -> op1_to = NULL	1312:6:44039:44059	1364754	0	True				
ANR	1365069	AssignmentExpression	block -> op1_to = NULL		1364754	0		=			
ANR	1365070	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365071	Identifier	block		1364754	0					
ANR	1365072	Identifier	op1_to		1364754	1					
ANR	1365073	Identifier	NULL		1364754	1					
ANR	1365074	ElseStatement	else		1364754	0					
ANR	1365075	IfStatement	if ( target -> opcode == ZEND_RETURN || target -> opcode == ZEND_RETURN_BY_REF || target -> opcode == ZEND_FAST_RET || target -> opcode == ZEND_EXIT )		1364754	0					
ANR	1365076	Condition	target -> opcode == ZEND_RETURN || target -> opcode == ZEND_RETURN_BY_REF || target -> opcode == ZEND_FAST_RET || target -> opcode == ZEND_EXIT	1314:15:44083:44268	1364754	0	True				
ANR	1365077	OrExpression	target -> opcode == ZEND_RETURN || target -> opcode == ZEND_RETURN_BY_REF || target -> opcode == ZEND_FAST_RET || target -> opcode == ZEND_EXIT		1364754	0		||			
ANR	1365078	EqualityExpression	target -> opcode == ZEND_RETURN		1364754	0		==			
ANR	1365079	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1365080	Identifier	target		1364754	0					
ANR	1365081	Identifier	opcode		1364754	1					
ANR	1365082	Identifier	ZEND_RETURN		1364754	1					
ANR	1365083	OrExpression	target -> opcode == ZEND_RETURN_BY_REF || target -> opcode == ZEND_FAST_RET || target -> opcode == ZEND_EXIT		1364754	1		||			
ANR	1365084	EqualityExpression	target -> opcode == ZEND_RETURN_BY_REF		1364754	0		==			
ANR	1365085	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1365086	Identifier	target		1364754	0					
ANR	1365087	Identifier	opcode		1364754	1					
ANR	1365088	Identifier	ZEND_RETURN_BY_REF		1364754	1					
ANR	1365089	OrExpression	target -> opcode == ZEND_FAST_RET || target -> opcode == ZEND_EXIT		1364754	1		||			
ANR	1365090	EqualityExpression	target -> opcode == ZEND_FAST_RET		1364754	0		==			
ANR	1365091	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1365092	Identifier	target		1364754	0					
ANR	1365093	Identifier	opcode		1364754	1					
ANR	1365094	Identifier	ZEND_FAST_RET		1364754	1					
ANR	1365095	EqualityExpression	target -> opcode == ZEND_EXIT		1364754	1		==			
ANR	1365096	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1365097	Identifier	target		1364754	0					
ANR	1365098	Identifier	opcode		1364754	1					
ANR	1365099	Identifier	ZEND_EXIT		1364754	1					
ANR	1365100	CompoundStatement		62:43:1824:1824	1364754	1					
ANR	1365101	ExpressionStatement	* last_op = * target	1319:5:44326:44344	1364754	0	True				
ANR	1365102	AssignmentExpression	* last_op = * target		1364754	0		=			
ANR	1365103	UnaryOperationExpression	* last_op		1364754	0					
ANR	1365104	UnaryOperator	*		1364754	0					
ANR	1365105	Identifier	last_op		1364754	1					
ANR	1365106	UnaryOperationExpression	* target		1364754	1					
ANR	1365107	UnaryOperator	*		1364754	0					
ANR	1365108	Identifier	target		1364754	1					
ANR	1365109	IfStatement	if ( ZEND_OP1_TYPE ( last_op ) == IS_CONST )		1364754	1					
ANR	1365110	Condition	ZEND_OP1_TYPE ( last_op ) == IS_CONST	1320:9:44355:44388	1364754	0	True				
ANR	1365111	EqualityExpression	ZEND_OP1_TYPE ( last_op ) == IS_CONST		1364754	0		==			
ANR	1365112	CallExpression	ZEND_OP1_TYPE ( last_op )		1364754	0					
ANR	1365113	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365114	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365115	ArgumentList	last_op		1364754	1					
ANR	1365116	Argument	last_op		1364754	0					
ANR	1365117	Identifier	last_op		1364754	0					
ANR	1365118	Identifier	IS_CONST		1364754	1					
ANR	1365119	CompoundStatement		66:6:1952:1987	1364754	1					
ANR	1365120	IdentifierDeclStatement	zval zv = ZEND_OP1_LITERAL ( last_op ) ;	1321:6:44399:44434	1364754	0	True				
ANR	1365121	IdentifierDecl	zv = ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1365122	IdentifierDeclType	zval		1364754	0					
ANR	1365123	Identifier	zv		1364754	1					
ANR	1365124	AssignmentExpression	zv = ZEND_OP1_LITERAL ( last_op )		1364754	2		=			
ANR	1365125	Identifier	zv		1364754	0					
ANR	1365126	CallExpression	ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1365127	Callee	ZEND_OP1_LITERAL		1364754	0					
ANR	1365128	Identifier	ZEND_OP1_LITERAL		1364754	0					
ANR	1365129	ArgumentList	last_op		1364754	1					
ANR	1365130	Argument	last_op		1364754	0					
ANR	1365131	Identifier	last_op		1364754	0					
ANR	1365132	ExpressionStatement	zval_copy_ctor ( & zv )	1322:6:44442:44461	1364754	1	True				
ANR	1365133	CallExpression	zval_copy_ctor ( & zv )		1364754	0					
ANR	1365134	Callee	zval_copy_ctor		1364754	0					
ANR	1365135	Identifier	zval_copy_ctor		1364754	0					
ANR	1365136	ArgumentList	& zv		1364754	1					
ANR	1365137	Argument	& zv		1364754	0					
ANR	1365138	UnaryOperationExpression	& zv		1364754	0					
ANR	1365139	UnaryOperator	&		1364754	0					
ANR	1365140	Identifier	zv		1364754	1					
ANR	1365141	ExpressionStatement	"last_op -> op1 . constant = zend_optimizer_add_literal ( op_array , & zv )"	1323:6:44469:44534	1364754	2	True				
ANR	1365142	AssignmentExpression	"last_op -> op1 . constant = zend_optimizer_add_literal ( op_array , & zv )"		1364754	0		=			
ANR	1365143	MemberAccess	last_op -> op1 . constant		1364754	0					
ANR	1365144	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1365145	Identifier	last_op		1364754	0					
ANR	1365146	Identifier	op1		1364754	1					
ANR	1365147	Identifier	constant		1364754	1					
ANR	1365148	CallExpression	"zend_optimizer_add_literal ( op_array , & zv )"		1364754	1					
ANR	1365149	Callee	zend_optimizer_add_literal		1364754	0					
ANR	1365150	Identifier	zend_optimizer_add_literal		1364754	0					
ANR	1365151	ArgumentList	op_array		1364754	1					
ANR	1365152	Argument	op_array		1364754	0					
ANR	1365153	Identifier	op_array		1364754	0					
ANR	1365154	Argument	& zv		1364754	1					
ANR	1365155	UnaryOperationExpression	& zv		1364754	0					
ANR	1365156	UnaryOperator	&		1364754	0					
ANR	1365157	Identifier	zv		1364754	1					
ANR	1365158	ExpressionStatement	"del_source ( block , block -> op1_to )"	1325:5:44548:44580	1364754	2	True				
ANR	1365159	CallExpression	"del_source ( block , block -> op1_to )"		1364754	0					
ANR	1365160	Callee	del_source		1364754	0					
ANR	1365161	Identifier	del_source		1364754	0					
ANR	1365162	ArgumentList	block		1364754	1					
ANR	1365163	Argument	block		1364754	0					
ANR	1365164	Identifier	block		1364754	0					
ANR	1365165	Argument	block -> op1_to		1364754	1					
ANR	1365166	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365167	Identifier	block		1364754	0					
ANR	1365168	Identifier	op1_to		1364754	1					
ANR	1365169	ExpressionStatement	block -> op1_to = NULL	1326:5:44587:44607	1364754	3	True				
ANR	1365170	AssignmentExpression	block -> op1_to = NULL		1364754	0		=			
ANR	1365171	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365172	Identifier	block		1364754	0					
ANR	1365173	Identifier	op1_to		1364754	1					
ANR	1365174	Identifier	NULL		1364754	1					
ANR	1365175	ElseStatement	else		1364754	0					
ANR	1365176	IfStatement	if ( 0 && block -> op1_to != block && block -> op1_to != blocks && op_array -> last_try_catch == 0 && target -> opcode != ZEND_FREE )		1364754	0					
ANR	1365177	Condition	0 && block -> op1_to != block && block -> op1_to != blocks && op_array -> last_try_catch == 0 && target -> opcode != ZEND_FREE	1329:15:44680:44834	1364754	0	True				
ANR	1365178	AndExpression	0 && block -> op1_to != block && block -> op1_to != blocks && op_array -> last_try_catch == 0 && target -> opcode != ZEND_FREE		1364754	0		&&			
ANR	1365179	PrimaryExpression	0		1364754	0					
ANR	1365180	AndExpression	block -> op1_to != block && block -> op1_to != blocks && op_array -> last_try_catch == 0 && target -> opcode != ZEND_FREE		1364754	1		&&			
ANR	1365181	EqualityExpression	block -> op1_to != block		1364754	0		!=			
ANR	1365182	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365183	Identifier	block		1364754	0					
ANR	1365184	Identifier	op1_to		1364754	1					
ANR	1365185	Identifier	block		1364754	1					
ANR	1365186	AndExpression	block -> op1_to != blocks && op_array -> last_try_catch == 0 && target -> opcode != ZEND_FREE		1364754	1		&&			
ANR	1365187	EqualityExpression	block -> op1_to != blocks		1364754	0		!=			
ANR	1365188	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365189	Identifier	block		1364754	0					
ANR	1365190	Identifier	op1_to		1364754	1					
ANR	1365191	Identifier	blocks		1364754	1					
ANR	1365192	AndExpression	op_array -> last_try_catch == 0 && target -> opcode != ZEND_FREE		1364754	1		&&			
ANR	1365193	EqualityExpression	op_array -> last_try_catch == 0		1364754	0		==			
ANR	1365194	PtrMemberAccess	op_array -> last_try_catch		1364754	0					
ANR	1365195	Identifier	op_array		1364754	0					
ANR	1365196	Identifier	last_try_catch		1364754	1					
ANR	1365197	PrimaryExpression	0		1364754	1					
ANR	1365198	EqualityExpression	target -> opcode != ZEND_FREE		1364754	1		!=			
ANR	1365199	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1365200	Identifier	target		1364754	0					
ANR	1365201	Identifier	opcode		1364754	1					
ANR	1365202	Identifier	ZEND_FREE		1364754	1					
ANR	1365203	CompoundStatement		83:5:2624:2670	1364754	1					
ANR	1365204	IdentifierDeclStatement	zend_bool can_reorder = 0 ;	1337:5:45039:45064	1364754	0	True				
ANR	1365205	IdentifierDecl	can_reorder = 0		1364754	0					
ANR	1365206	IdentifierDeclType	zend_bool		1364754	0					
ANR	1365207	Identifier	can_reorder		1364754	1					
ANR	1365208	AssignmentExpression	can_reorder = 0		1364754	2		=			
ANR	1365209	Identifier	can_reorder		1364754	0					
ANR	1365210	PrimaryExpression	0		1364754	1					
ANR	1365211	IdentifierDeclStatement	zend_block_source * cs = block -> op1_to -> sources ;	1338:5:45071:45117	1364754	1	True				
ANR	1365212	IdentifierDecl	* cs = block -> op1_to -> sources		1364754	0					
ANR	1365213	IdentifierDeclType	zend_block_source *		1364754	0					
ANR	1365214	Identifier	cs		1364754	1					
ANR	1365215	AssignmentExpression	* cs = block -> op1_to -> sources		1364754	2		=			
ANR	1365216	Identifier	cs		1364754	0					
ANR	1365217	PtrMemberAccess	block -> op1_to -> sources		1364754	1					
ANR	1365218	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365219	Identifier	block		1364754	0					
ANR	1365220	Identifier	op1_to		1364754	1					
ANR	1365221	Identifier	sources		1364754	1					
ANR	1365222	WhileStatement	while ( cs )		1364754	2					
ANR	1365223	Condition	cs	1341:11:45192:45193	1364754	0	True				
ANR	1365224	Identifier	cs		1364754	0					
ANR	1365225	CompoundStatement		86:15:2749:2749	1364754	1					
ANR	1365226	IfStatement	if ( cs -> from -> follow_to == block -> op1_to )		1364754	0					
ANR	1365227	Condition	cs -> from -> follow_to == block -> op1_to	1342:10:45208:45243	1364754	0	True				
ANR	1365228	EqualityExpression	cs -> from -> follow_to == block -> op1_to		1364754	0		==			
ANR	1365229	PtrMemberAccess	cs -> from -> follow_to		1364754	0					
ANR	1365230	PtrMemberAccess	cs -> from		1364754	0					
ANR	1365231	Identifier	cs		1364754	0					
ANR	1365232	Identifier	from		1364754	1					
ANR	1365233	Identifier	follow_to		1364754	1					
ANR	1365234	PtrMemberAccess	block -> op1_to		1364754	1					
ANR	1365235	Identifier	block		1364754	0					
ANR	1365236	Identifier	op1_to		1364754	1					
ANR	1365237	CompoundStatement		87:48:2799:2799	1364754	1					
ANR	1365238	ExpressionStatement	can_reorder = 0	1343:7:45255:45270	1364754	0	True				
ANR	1365239	AssignmentExpression	can_reorder = 0		1364754	0		=			
ANR	1365240	Identifier	can_reorder		1364754	0					
ANR	1365241	PrimaryExpression	0		1364754	1					
ANR	1365242	BreakStatement	break ;	1344:7:45279:45284	1364754	1	True				
ANR	1365243	ExpressionStatement	cs = cs -> next	1346:6:45300:45313	1364754	1	True				
ANR	1365244	AssignmentExpression	cs = cs -> next		1364754	0		=			
ANR	1365245	Identifier	cs		1364754	0					
ANR	1365246	PtrMemberAccess	cs -> next		1364754	1					
ANR	1365247	Identifier	cs		1364754	0					
ANR	1365248	Identifier	next		1364754	1					
ANR	1365249	IfStatement	if ( can_reorder )		1364754	3					
ANR	1365250	Condition	can_reorder	1348:9:45331:45341	1364754	0	True				
ANR	1365251	Identifier	can_reorder		1364754	0					
ANR	1365252	CompoundStatement		93:22:2897:2897	1364754	1					
ANR	1365253	ExpressionStatement	next = block -> op1_to	1349:6:45352:45372	1364754	0	True				
ANR	1365254	AssignmentExpression	next = block -> op1_to		1364754	0		=			
ANR	1365255	Identifier	next		1364754	0					
ANR	1365256	PtrMemberAccess	block -> op1_to		1364754	1					
ANR	1365257	Identifier	block		1364754	0					
ANR	1365258	Identifier	op1_to		1364754	1					
ANR	1365259	WhileStatement	while ( next -> follow_to != NULL )		1364754	1					
ANR	1365260	Condition	next -> follow_to != NULL	1351:13:45453:45475	1364754	0	True				
ANR	1365261	EqualityExpression	next -> follow_to != NULL		1364754	0		!=			
ANR	1365262	PtrMemberAccess	next -> follow_to		1364754	0					
ANR	1365263	Identifier	next		1364754	0					
ANR	1365264	Identifier	follow_to		1364754	1					
ANR	1365265	Identifier	NULL		1364754	1					
ANR	1365266	CompoundStatement		96:38:3031:3031	1364754	1					
ANR	1365267	IfStatement	if ( next -> follow_to == block )		1364754	0					
ANR	1365268	Condition	next -> follow_to == block	1352:11:45491:45514	1364754	0	True				
ANR	1365269	EqualityExpression	next -> follow_to == block		1364754	0		==			
ANR	1365270	PtrMemberAccess	next -> follow_to		1364754	0					
ANR	1365271	Identifier	next		1364754	0					
ANR	1365272	Identifier	follow_to		1364754	1					
ANR	1365273	Identifier	block		1364754	1					
ANR	1365274	CompoundStatement		97:37:3070:3070	1364754	1					
ANR	1365275	ExpressionStatement	can_reorder = 0	1353:8:45527:45542	1364754	0	True				
ANR	1365276	AssignmentExpression	can_reorder = 0		1364754	0		=			
ANR	1365277	Identifier	can_reorder		1364754	0					
ANR	1365278	PrimaryExpression	0		1364754	1					
ANR	1365279	BreakStatement	break ;	1354:8:45552:45557	1364754	1	True				
ANR	1365280	ExpressionStatement	next = next -> follow_to	1356:7:45575:45597	1364754	1	True				
ANR	1365281	AssignmentExpression	next = next -> follow_to		1364754	0		=			
ANR	1365282	Identifier	next		1364754	0					
ANR	1365283	PtrMemberAccess	next -> follow_to		1364754	1					
ANR	1365284	Identifier	next		1364754	0					
ANR	1365285	Identifier	follow_to		1364754	1					
ANR	1365286	IfStatement	if ( can_reorder )		1364754	2					
ANR	1365287	Condition	can_reorder	1358:10:45617:45627	1364754	0	True				
ANR	1365288	Identifier	can_reorder		1364754	0					
ANR	1365289	CompoundStatement		104:7:3192:3222	1364754	1					
ANR	1365290	IdentifierDeclStatement	zend_code_block * prev = blocks ;	1359:7:45639:45669	1364754	0	True				
ANR	1365291	IdentifierDecl	* prev = blocks		1364754	0					
ANR	1365292	IdentifierDeclType	zend_code_block *		1364754	0					
ANR	1365293	Identifier	prev		1364754	1					
ANR	1365294	AssignmentExpression	* prev = blocks		1364754	2		=			
ANR	1365295	Identifier	blocks		1364754	0					
ANR	1365296	Identifier	blocks		1364754	1					
ANR	1365297	WhileStatement	while ( prev -> next != block -> op1_to )		1364754	1					
ANR	1365298	Condition	prev -> next != block -> op1_to	1361:14:45686:45712	1364754	0	True				
ANR	1365299	EqualityExpression	prev -> next != block -> op1_to		1364754	0		!=			
ANR	1365300	PtrMemberAccess	prev -> next		1364754	0					
ANR	1365301	Identifier	prev		1364754	0					
ANR	1365302	Identifier	next		1364754	1					
ANR	1365303	PtrMemberAccess	block -> op1_to		1364754	1					
ANR	1365304	Identifier	block		1364754	0					
ANR	1365305	Identifier	op1_to		1364754	1					
ANR	1365306	CompoundStatement		106:43:3268:3268	1364754	1					
ANR	1365307	ExpressionStatement	prev = prev -> next	1362:8:45725:45742	1364754	0	True				
ANR	1365308	AssignmentExpression	prev = prev -> next		1364754	0		=			
ANR	1365309	Identifier	prev		1364754	0					
ANR	1365310	PtrMemberAccess	prev -> next		1364754	1					
ANR	1365311	Identifier	prev		1364754	0					
ANR	1365312	Identifier	next		1364754	1					
ANR	1365313	ExpressionStatement	prev -> next = next -> next	1364:7:45760:45783	1364754	2	True				
ANR	1365314	AssignmentExpression	prev -> next = next -> next		1364754	0		=			
ANR	1365315	PtrMemberAccess	prev -> next		1364754	0					
ANR	1365316	Identifier	prev		1364754	0					
ANR	1365317	Identifier	next		1364754	1					
ANR	1365318	PtrMemberAccess	next -> next		1364754	1					
ANR	1365319	Identifier	next		1364754	0					
ANR	1365320	Identifier	next		1364754	1					
ANR	1365321	ExpressionStatement	next -> next = block -> next	1365:7:45792:45816	1364754	3	True				
ANR	1365322	AssignmentExpression	next -> next = block -> next		1364754	0		=			
ANR	1365323	PtrMemberAccess	next -> next		1364754	0					
ANR	1365324	Identifier	next		1364754	0					
ANR	1365325	Identifier	next		1364754	1					
ANR	1365326	PtrMemberAccess	block -> next		1364754	1					
ANR	1365327	Identifier	block		1364754	0					
ANR	1365328	Identifier	next		1364754	1					
ANR	1365329	ExpressionStatement	block -> next = block -> op1_to	1366:7:45825:45852	1364754	4	True				
ANR	1365330	AssignmentExpression	block -> next = block -> op1_to		1364754	0		=			
ANR	1365331	PtrMemberAccess	block -> next		1364754	0					
ANR	1365332	Identifier	block		1364754	0					
ANR	1365333	Identifier	next		1364754	1					
ANR	1365334	PtrMemberAccess	block -> op1_to		1364754	1					
ANR	1365335	Identifier	block		1364754	0					
ANR	1365336	Identifier	op1_to		1364754	1					
ANR	1365337	ExpressionStatement	block -> follow_to = block -> op1_to	1368:7:45862:45894	1364754	5	True				
ANR	1365338	AssignmentExpression	block -> follow_to = block -> op1_to		1364754	0		=			
ANR	1365339	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1365340	Identifier	block		1364754	0					
ANR	1365341	Identifier	follow_to		1364754	1					
ANR	1365342	PtrMemberAccess	block -> op1_to		1364754	1					
ANR	1365343	Identifier	block		1364754	0					
ANR	1365344	Identifier	op1_to		1364754	1					
ANR	1365345	ExpressionStatement	block -> op1_to = NULL	1369:7:45903:45923	1364754	6	True				
ANR	1365346	AssignmentExpression	block -> op1_to = NULL		1364754	0		=			
ANR	1365347	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365348	Identifier	block		1364754	0					
ANR	1365349	Identifier	op1_to		1364754	1					
ANR	1365350	Identifier	NULL		1364754	1					
ANR	1365351	ExpressionStatement	MAKE_NOP ( last_op )	1370:7:45932:45949	1364754	7	True				
ANR	1365352	CallExpression	MAKE_NOP ( last_op )		1364754	0					
ANR	1365353	Callee	MAKE_NOP		1364754	0					
ANR	1365354	Identifier	MAKE_NOP		1364754	0					
ANR	1365355	ArgumentList	last_op		1364754	1					
ANR	1365356	Argument	last_op		1364754	0					
ANR	1365357	Identifier	last_op		1364754	0					
ANR	1365358	ExpressionStatement	block -> len --	1371:7:45958:45970	1364754	8	True				
ANR	1365359	PostIncDecOperationExpression	block -> len --		1364754	0					
ANR	1365360	PtrMemberAccess	block -> len		1364754	0					
ANR	1365361	Identifier	block		1364754	0					
ANR	1365362	Identifier	len		1364754	1					
ANR	1365363	IncDec	--		1364754	1					
ANR	1365364	IfStatement	if ( block -> len == 0 )		1364754	9					
ANR	1365365	Condition	block -> len == 0	1372:10:45982:45996	1364754	0	True				
ANR	1365366	EqualityExpression	block -> len == 0		1364754	0		==			
ANR	1365367	PtrMemberAccess	block -> len		1364754	0					
ANR	1365368	Identifier	block		1364754	0					
ANR	1365369	Identifier	len		1364754	1					
ANR	1365370	PrimaryExpression	0		1364754	1					
ANR	1365371	CompoundStatement		117:27:3552:3552	1364754	1					
ANR	1365372	ExpressionStatement	"delete_code_block ( block , ctx )"	1374:8:46057:46086	1364754	0	True				
ANR	1365373	CallExpression	"delete_code_block ( block , ctx )"		1364754	0					
ANR	1365374	Callee	delete_code_block		1364754	0					
ANR	1365375	Identifier	delete_code_block		1364754	0					
ANR	1365376	ArgumentList	block		1364754	1					
ANR	1365377	Argument	block		1364754	0					
ANR	1365378	Identifier	block		1364754	0					
ANR	1365379	Argument	ctx		1364754	1					
ANR	1365380	Identifier	ctx		1364754	0					
ANR	1365381	BreakStatement	break ;	1376:7:46104:46109	1364754	10	True				
ANR	1365382	BreakStatement	break ;	1382:3:46147:46152	1364754	2	True				
ANR	1365383	Label	case ZEND_JMPZ :	1384:2:46157:46171	1364754	3	True				
ANR	1365384	Identifier	ZEND_JMPZ		1364754	0					
ANR	1365385	Label	case ZEND_JMPNZ :	1385:2:46175:46190	1364754	4	True				
ANR	1365386	Identifier	ZEND_JMPNZ		1364754	0					
ANR	1365387	IfStatement	if ( ZEND_OP1_TYPE ( last_op ) == IS_CONST )		1364754	5					
ANR	1365388	Condition	ZEND_OP1_TYPE ( last_op ) == IS_CONST	1387:7:46234:46267	1364754	0	True				
ANR	1365389	EqualityExpression	ZEND_OP1_TYPE ( last_op ) == IS_CONST		1364754	0		==			
ANR	1365390	CallExpression	ZEND_OP1_TYPE ( last_op )		1364754	0					
ANR	1365391	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365392	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365393	ArgumentList	last_op		1364754	1					
ANR	1365394	Argument	last_op		1364754	0					
ANR	1365395	Identifier	last_op		1364754	0					
ANR	1365396	Identifier	IS_CONST		1364754	1					
ANR	1365397	CompoundStatement		133:4:3829:3886	1364754	1					
ANR	1365398	IdentifierDeclStatement	int should_jmp = zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) ) ;	1388:4:46276:46333	1364754	0	True				
ANR	1365399	IdentifierDecl	should_jmp = zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	0					
ANR	1365400	IdentifierDeclType	int		1364754	0					
ANR	1365401	Identifier	should_jmp		1364754	1					
ANR	1365402	AssignmentExpression	should_jmp = zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	2		=			
ANR	1365403	Identifier	should_jmp		1364754	0					
ANR	1365404	CallExpression	zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	1					
ANR	1365405	Callee	zend_is_true		1364754	0					
ANR	1365406	Identifier	zend_is_true		1364754	0					
ANR	1365407	ArgumentList	& ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1365408	Argument	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1365409	UnaryOperationExpression	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1365410	UnaryOperator	&		1364754	0					
ANR	1365411	CallExpression	ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1365412	Callee	ZEND_OP1_LITERAL		1364754	0					
ANR	1365413	Identifier	ZEND_OP1_LITERAL		1364754	0					
ANR	1365414	ArgumentList	last_op		1364754	1					
ANR	1365415	Argument	last_op		1364754	0					
ANR	1365416	Identifier	last_op		1364754	0					
ANR	1365417	IfStatement	if ( last_op -> opcode == ZEND_JMPZ )		1364754	1					
ANR	1365418	Condition	last_op -> opcode == ZEND_JMPZ	1390:8:46344:46371	1364754	0	True				
ANR	1365419	EqualityExpression	last_op -> opcode == ZEND_JMPZ		1364754	0		==			
ANR	1365420	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1365421	Identifier	last_op		1364754	0					
ANR	1365422	Identifier	opcode		1364754	1					
ANR	1365423	Identifier	ZEND_JMPZ		1364754	1					
ANR	1365424	CompoundStatement		135:38:3927:3927	1364754	1					
ANR	1365425	ExpressionStatement	should_jmp = ! should_jmp	1391:5:46381:46405	1364754	0	True				
ANR	1365426	AssignmentExpression	should_jmp = ! should_jmp		1364754	0		=			
ANR	1365427	Identifier	should_jmp		1364754	0					
ANR	1365428	UnaryOperationExpression	! should_jmp		1364754	1					
ANR	1365429	UnaryOperator	!		1364754	0					
ANR	1365430	Identifier	should_jmp		1364754	1					
ANR	1365431	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( last_op ) )	1393:4:46417:46457	1364754	2	True				
ANR	1365432	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	0					
ANR	1365433	Callee	literal_dtor		1364754	0					
ANR	1365434	Identifier	literal_dtor		1364754	0					
ANR	1365435	ArgumentList	& ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1365436	Argument	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1365437	UnaryOperationExpression	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1365438	UnaryOperator	&		1364754	0					
ANR	1365439	CallExpression	ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1365440	Callee	ZEND_OP1_LITERAL		1364754	0					
ANR	1365441	Identifier	ZEND_OP1_LITERAL		1364754	0					
ANR	1365442	ArgumentList	last_op		1364754	1					
ANR	1365443	Argument	last_op		1364754	0					
ANR	1365444	Identifier	last_op		1364754	0					
ANR	1365445	ExpressionStatement	ZEND_OP1_TYPE ( last_op ) = IS_UNUSED	1394:4:46463:46497	1364754	3	True				
ANR	1365446	AssignmentExpression	ZEND_OP1_TYPE ( last_op ) = IS_UNUSED		1364754	0		=			
ANR	1365447	CallExpression	ZEND_OP1_TYPE ( last_op )		1364754	0					
ANR	1365448	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365449	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365450	ArgumentList	last_op		1364754	1					
ANR	1365451	Argument	last_op		1364754	0					
ANR	1365452	Identifier	last_op		1364754	0					
ANR	1365453	Identifier	IS_UNUSED		1364754	1					
ANR	1365454	IfStatement	if ( should_jmp )		1364754	4					
ANR	1365455	Condition	should_jmp	1395:8:46507:46516	1364754	0	True				
ANR	1365456	Identifier	should_jmp		1364754	0					
ANR	1365457	CompoundStatement		140:20:4072:4072	1364754	1					
ANR	1365458	ExpressionStatement	last_op -> opcode = ZEND_JMP	1397:5:46556:46582	1364754	0	True				
ANR	1365459	AssignmentExpression	last_op -> opcode = ZEND_JMP		1364754	0		=			
ANR	1365460	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1365461	Identifier	last_op		1364754	0					
ANR	1365462	Identifier	opcode		1364754	1					
ANR	1365463	Identifier	ZEND_JMP		1364754	1					
ANR	1365464	ExpressionStatement	"COPY_NODE ( last_op -> op1 , last_op -> op2 )"	1398:5:46589:46626	1364754	1	True				
ANR	1365465	CallExpression	"COPY_NODE ( last_op -> op1 , last_op -> op2 )"		1364754	0					
ANR	1365466	Callee	COPY_NODE		1364754	0					
ANR	1365467	Identifier	COPY_NODE		1364754	0					
ANR	1365468	ArgumentList	last_op -> op1		1364754	1					
ANR	1365469	Argument	last_op -> op1		1364754	0					
ANR	1365470	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1365471	Identifier	last_op		1364754	0					
ANR	1365472	Identifier	op1		1364754	1					
ANR	1365473	Argument	last_op -> op2		1364754	1					
ANR	1365474	PtrMemberAccess	last_op -> op2		1364754	0					
ANR	1365475	Identifier	last_op		1364754	0					
ANR	1365476	Identifier	op2		1364754	1					
ANR	1365477	ExpressionStatement	block -> op1_to = block -> op2_to	1399:5:46633:46662	1364754	2	True				
ANR	1365478	AssignmentExpression	block -> op1_to = block -> op2_to		1364754	0		=			
ANR	1365479	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1365480	Identifier	block		1364754	0					
ANR	1365481	Identifier	op1_to		1364754	1					
ANR	1365482	PtrMemberAccess	block -> op2_to		1364754	1					
ANR	1365483	Identifier	block		1364754	0					
ANR	1365484	Identifier	op2_to		1364754	1					
ANR	1365485	ExpressionStatement	"del_source ( block , block -> follow_to )"	1400:5:46669:46704	1364754	3	True				
ANR	1365486	CallExpression	"del_source ( block , block -> follow_to )"		1364754	0					
ANR	1365487	Callee	del_source		1364754	0					
ANR	1365488	Identifier	del_source		1364754	0					
ANR	1365489	ArgumentList	block		1364754	1					
ANR	1365490	Argument	block		1364754	0					
ANR	1365491	Identifier	block		1364754	0					
ANR	1365492	Argument	block -> follow_to		1364754	1					
ANR	1365493	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1365494	Identifier	block		1364754	0					
ANR	1365495	Identifier	follow_to		1364754	1					
ANR	1365496	ExpressionStatement	block -> op2_to = NULL	1401:5:46711:46731	1364754	4	True				
ANR	1365497	AssignmentExpression	block -> op2_to = NULL		1364754	0		=			
ANR	1365498	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365499	Identifier	block		1364754	0					
ANR	1365500	Identifier	op2_to		1364754	1					
ANR	1365501	Identifier	NULL		1364754	1					
ANR	1365502	ExpressionStatement	block -> follow_to = NULL	1402:5:46738:46761	1364754	5	True				
ANR	1365503	AssignmentExpression	block -> follow_to = NULL		1364754	0		=			
ANR	1365504	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1365505	Identifier	block		1364754	0					
ANR	1365506	Identifier	follow_to		1364754	1					
ANR	1365507	Identifier	NULL		1364754	1					
ANR	1365508	ElseStatement	else		1364754	0					
ANR	1365509	CompoundStatement		148:11:4327:4327	1364754	0					
ANR	1365510	ExpressionStatement	MAKE_NOP ( last_op )	1405:5:46812:46829	1364754	0	True				
ANR	1365511	CallExpression	MAKE_NOP ( last_op )		1364754	0					
ANR	1365512	Callee	MAKE_NOP		1364754	0					
ANR	1365513	Identifier	MAKE_NOP		1364754	0					
ANR	1365514	ArgumentList	last_op		1364754	1					
ANR	1365515	Argument	last_op		1364754	0					
ANR	1365516	Identifier	last_op		1364754	0					
ANR	1365517	ExpressionStatement	"del_source ( block , block -> op2_to )"	1406:5:46836:46868	1364754	1	True				
ANR	1365518	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1365519	Callee	del_source		1364754	0					
ANR	1365520	Identifier	del_source		1364754	0					
ANR	1365521	ArgumentList	block		1364754	1					
ANR	1365522	Argument	block		1364754	0					
ANR	1365523	Identifier	block		1364754	0					
ANR	1365524	Argument	block -> op2_to		1364754	1					
ANR	1365525	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365526	Identifier	block		1364754	0					
ANR	1365527	Identifier	op2_to		1364754	1					
ANR	1365528	ExpressionStatement	block -> op2_to = NULL	1407:5:46875:46895	1364754	2	True				
ANR	1365529	AssignmentExpression	block -> op2_to = NULL		1364754	0		=			
ANR	1365530	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365531	Identifier	block		1364754	0					
ANR	1365532	Identifier	op2_to		1364754	1					
ANR	1365533	Identifier	NULL		1364754	1					
ANR	1365534	BreakStatement	break ;	1409:4:46907:46912	1364754	5	True				
ANR	1365535	IfStatement	if ( block -> op2_to == block -> follow_to )		1364754	6					
ANR	1365536	Condition	block -> op2_to == block -> follow_to	1412:7:46927:46959	1364754	0	True				
ANR	1365537	EqualityExpression	block -> op2_to == block -> follow_to		1364754	0		==			
ANR	1365538	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365539	Identifier	block		1364754	0					
ANR	1365540	Identifier	op2_to		1364754	1					
ANR	1365541	PtrMemberAccess	block -> follow_to		1364754	1					
ANR	1365542	Identifier	block		1364754	0					
ANR	1365543	Identifier	follow_to		1364754	1					
ANR	1365544	CompoundStatement		157:42:4515:4515	1364754	1					
ANR	1365545	IfStatement	if ( last_op -> op1_type == IS_VAR )		1364754	0					
ANR	1365546	Condition	last_op -> op1_type == IS_VAR	1415:8:47017:47043	1364754	0	True				
ANR	1365547	EqualityExpression	last_op -> op1_type == IS_VAR		1364754	0		==			
ANR	1365548	PtrMemberAccess	last_op -> op1_type		1364754	0					
ANR	1365549	Identifier	last_op		1364754	0					
ANR	1365550	Identifier	op1_type		1364754	1					
ANR	1365551	Identifier	IS_VAR		1364754	1					
ANR	1365552	CompoundStatement		162:5:4645:4684	1364754	1					
ANR	1365553	IdentifierDeclStatement	zend_op * * Tsource = cfg -> Tsource ;	1416:5:47053:47085	1364754	0	True				
ANR	1365554	IdentifierDecl	* * Tsource = cfg -> Tsource		1364754	0					
ANR	1365555	IdentifierDeclType	zend_op * *		1364754	0					
ANR	1365556	Identifier	Tsource		1364754	1					
ANR	1365557	AssignmentExpression	* * Tsource = cfg -> Tsource		1364754	2		=			
ANR	1365558	Identifier	Tsource		1364754	0					
ANR	1365559	PtrMemberAccess	cfg -> Tsource		1364754	1					
ANR	1365560	Identifier	cfg		1364754	0					
ANR	1365561	Identifier	Tsource		1364754	1					
ANR	1365562	IdentifierDeclStatement	zend_op * src = VAR_SOURCE ( last_op -> op1 ) ;	1417:5:47092:47131	1364754	1	True				
ANR	1365563	IdentifierDecl	* src = VAR_SOURCE ( last_op -> op1 )		1364754	0					
ANR	1365564	IdentifierDeclType	zend_op *		1364754	0					
ANR	1365565	Identifier	src		1364754	1					
ANR	1365566	AssignmentExpression	* src = VAR_SOURCE ( last_op -> op1 )		1364754	2		=			
ANR	1365567	Identifier	src		1364754	0					
ANR	1365568	CallExpression	VAR_SOURCE ( last_op -> op1 )		1364754	1					
ANR	1365569	Callee	VAR_SOURCE		1364754	0					
ANR	1365570	Identifier	VAR_SOURCE		1364754	0					
ANR	1365571	ArgumentList	last_op -> op1		1364754	1					
ANR	1365572	Argument	last_op -> op1		1364754	0					
ANR	1365573	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1365574	Identifier	last_op		1364754	0					
ANR	1365575	Identifier	op1		1364754	1					
ANR	1365576	IfStatement	if ( src && src -> opcode != ZEND_FETCH_R && src -> opcode != ZEND_FETCH_DIM_R && src -> opcode != ZEND_FETCH_OBJ_R )		1364754	2					
ANR	1365577	Condition	src && src -> opcode != ZEND_FETCH_R && src -> opcode != ZEND_FETCH_DIM_R && src -> opcode != ZEND_FETCH_OBJ_R	1419:9:47143:47273	1364754	0	True				
ANR	1365578	AndExpression	src && src -> opcode != ZEND_FETCH_R && src -> opcode != ZEND_FETCH_DIM_R && src -> opcode != ZEND_FETCH_OBJ_R		1364754	0		&&			
ANR	1365579	Identifier	src		1364754	0					
ANR	1365580	AndExpression	src -> opcode != ZEND_FETCH_R && src -> opcode != ZEND_FETCH_DIM_R && src -> opcode != ZEND_FETCH_OBJ_R		1364754	1		&&			
ANR	1365581	EqualityExpression	src -> opcode != ZEND_FETCH_R		1364754	0		!=			
ANR	1365582	PtrMemberAccess	src -> opcode		1364754	0					
ANR	1365583	Identifier	src		1364754	0					
ANR	1365584	Identifier	opcode		1364754	1					
ANR	1365585	Identifier	ZEND_FETCH_R		1364754	1					
ANR	1365586	AndExpression	src -> opcode != ZEND_FETCH_DIM_R && src -> opcode != ZEND_FETCH_OBJ_R		1364754	1		&&			
ANR	1365587	EqualityExpression	src -> opcode != ZEND_FETCH_DIM_R		1364754	0		!=			
ANR	1365588	PtrMemberAccess	src -> opcode		1364754	0					
ANR	1365589	Identifier	src		1364754	0					
ANR	1365590	Identifier	opcode		1364754	1					
ANR	1365591	Identifier	ZEND_FETCH_DIM_R		1364754	1					
ANR	1365592	EqualityExpression	src -> opcode != ZEND_FETCH_OBJ_R		1364754	1		!=			
ANR	1365593	PtrMemberAccess	src -> opcode		1364754	0					
ANR	1365594	Identifier	src		1364754	0					
ANR	1365595	Identifier	opcode		1364754	1					
ANR	1365596	Identifier	ZEND_FETCH_OBJ_R		1364754	1					
ANR	1365597	CompoundStatement		167:42:4829:4829	1364754	1					
ANR	1365598	ExpressionStatement	ZEND_RESULT_TYPE ( src ) |= EXT_TYPE_UNUSED	1423:6:47284:47324	1364754	0	True				
ANR	1365599	AssignmentExpression	ZEND_RESULT_TYPE ( src ) |= EXT_TYPE_UNUSED		1364754	0		|=			
ANR	1365600	CallExpression	ZEND_RESULT_TYPE ( src )		1364754	0					
ANR	1365601	Callee	ZEND_RESULT_TYPE		1364754	0					
ANR	1365602	Identifier	ZEND_RESULT_TYPE		1364754	0					
ANR	1365603	ArgumentList	src		1364754	1					
ANR	1365604	Argument	src		1364754	0					
ANR	1365605	Identifier	src		1364754	0					
ANR	1365606	Identifier	EXT_TYPE_UNUSED		1364754	1					
ANR	1365607	ExpressionStatement	MAKE_NOP ( last_op )	1424:6:47332:47349	1364754	1	True				
ANR	1365608	CallExpression	MAKE_NOP ( last_op )		1364754	0					
ANR	1365609	Callee	MAKE_NOP		1364754	0					
ANR	1365610	Identifier	MAKE_NOP		1364754	0					
ANR	1365611	ArgumentList	last_op		1364754	1					
ANR	1365612	Argument	last_op		1364754	0					
ANR	1365613	Identifier	last_op		1364754	0					
ANR	1365614	ExpressionStatement	block -> op2_to = NULL	1425:6:47357:47377	1364754	2	True				
ANR	1365615	AssignmentExpression	block -> op2_to = NULL		1364754	0		=			
ANR	1365616	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365617	Identifier	block		1364754	0					
ANR	1365618	Identifier	op2_to		1364754	1					
ANR	1365619	Identifier	NULL		1364754	1					
ANR	1365620	BreakStatement	break ;	1426:6:47385:47390	1364754	3	True				
ANR	1365621	IfStatement	if ( last_op -> op1_type & ( IS_VAR | IS_TMP_VAR ) )		1364754	1					
ANR	1365622	Condition	last_op -> op1_type & ( IS_VAR | IS_TMP_VAR )	1429:8:47413:47451	1364754	0	True				
ANR	1365623	BitAndExpression	last_op -> op1_type & ( IS_VAR | IS_TMP_VAR )		1364754	0		&			
ANR	1365624	PtrMemberAccess	last_op -> op1_type		1364754	0					
ANR	1365625	Identifier	last_op		1364754	0					
ANR	1365626	Identifier	op1_type		1364754	1					
ANR	1365627	InclusiveOrExpression	IS_VAR | IS_TMP_VAR		1364754	1		|			
ANR	1365628	Identifier	IS_VAR		1364754	0					
ANR	1365629	Identifier	IS_TMP_VAR		1364754	1					
ANR	1365630	CompoundStatement		174:49:5007:5007	1364754	1					
ANR	1365631	ExpressionStatement	last_op -> opcode = ZEND_FREE	1430:5:47461:47488	1364754	0	True				
ANR	1365632	AssignmentExpression	last_op -> opcode = ZEND_FREE		1364754	0		=			
ANR	1365633	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1365634	Identifier	last_op		1364754	0					
ANR	1365635	Identifier	opcode		1364754	1					
ANR	1365636	Identifier	ZEND_FREE		1364754	1					
ANR	1365637	ExpressionStatement	last_op -> op2 . num = 0	1431:5:47495:47515	1364754	1	True				
ANR	1365638	AssignmentExpression	last_op -> op2 . num = 0		1364754	0		=			
ANR	1365639	MemberAccess	last_op -> op2 . num		1364754	0					
ANR	1365640	PtrMemberAccess	last_op -> op2		1364754	0					
ANR	1365641	Identifier	last_op		1364754	0					
ANR	1365642	Identifier	op2		1364754	1					
ANR	1365643	Identifier	num		1364754	1					
ANR	1365644	PrimaryExpression	0		1364754	1					
ANR	1365645	ExpressionStatement	block -> op2_to = NULL	1432:5:47522:47542	1364754	2	True				
ANR	1365646	AssignmentExpression	block -> op2_to = NULL		1364754	0		=			
ANR	1365647	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365648	Identifier	block		1364754	0					
ANR	1365649	Identifier	op2_to		1364754	1					
ANR	1365650	Identifier	NULL		1364754	1					
ANR	1365651	ElseStatement	else		1364754	0					
ANR	1365652	CompoundStatement		178:11:5108:5108	1364754	0					
ANR	1365653	ExpressionStatement	MAKE_NOP ( last_op )	1434:5:47562:47579	1364754	0	True				
ANR	1365654	CallExpression	MAKE_NOP ( last_op )		1364754	0					
ANR	1365655	Callee	MAKE_NOP		1364754	0					
ANR	1365656	Identifier	MAKE_NOP		1364754	0					
ANR	1365657	ArgumentList	last_op		1364754	1					
ANR	1365658	Argument	last_op		1364754	0					
ANR	1365659	Identifier	last_op		1364754	0					
ANR	1365660	ExpressionStatement	block -> op2_to = NULL	1435:5:47586:47606	1364754	1	True				
ANR	1365661	AssignmentExpression	block -> op2_to = NULL		1364754	0		=			
ANR	1365662	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365663	Identifier	block		1364754	0					
ANR	1365664	Identifier	op2_to		1364754	1					
ANR	1365665	Identifier	NULL		1364754	1					
ANR	1365666	BreakStatement	break ;	1437:4:47618:47623	1364754	2	True				
ANR	1365667	IfStatement	if ( block -> op2_to )		1364754	7					
ANR	1365668	Condition	block -> op2_to	1440:7:47638:47650	1364754	0	True				
ANR	1365669	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365670	Identifier	block		1364754	0					
ANR	1365671	Identifier	op2_to		1364754	1					
ANR	1365672	CompoundStatement		190:4:5359:5404	1364754	1					
ANR	1365673	IdentifierDeclStatement	zend_uchar same_type = ZEND_OP1_TYPE ( last_op ) ;	1441:4:47659:47704	1364754	0	True				
ANR	1365674	IdentifierDecl	same_type = ZEND_OP1_TYPE ( last_op )		1364754	0					
ANR	1365675	IdentifierDeclType	zend_uchar		1364754	0					
ANR	1365676	Identifier	same_type		1364754	1					
ANR	1365677	AssignmentExpression	same_type = ZEND_OP1_TYPE ( last_op )		1364754	2		=			
ANR	1365678	Identifier	same_type		1364754	0					
ANR	1365679	CallExpression	ZEND_OP1_TYPE ( last_op )		1364754	1					
ANR	1365680	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365681	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365682	ArgumentList	last_op		1364754	1					
ANR	1365683	Argument	last_op		1364754	0					
ANR	1365684	Identifier	last_op		1364754	0					
ANR	1365685	IdentifierDeclStatement	uint32_t same_var = VAR_NUM_EX ( last_op -> op1 ) ;	1442:4:47710:47754	1364754	1	True				
ANR	1365686	IdentifierDecl	same_var = VAR_NUM_EX ( last_op -> op1 )		1364754	0					
ANR	1365687	IdentifierDeclType	uint32_t		1364754	0					
ANR	1365688	Identifier	same_var		1364754	1					
ANR	1365689	AssignmentExpression	same_var = VAR_NUM_EX ( last_op -> op1 )		1364754	2		=			
ANR	1365690	Identifier	same_var		1364754	0					
ANR	1365691	CallExpression	VAR_NUM_EX ( last_op -> op1 )		1364754	1					
ANR	1365692	Callee	VAR_NUM_EX		1364754	0					
ANR	1365693	Identifier	VAR_NUM_EX		1364754	0					
ANR	1365694	ArgumentList	last_op -> op1		1364754	1					
ANR	1365695	Argument	last_op -> op1		1364754	0					
ANR	1365696	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1365697	Identifier	last_op		1364754	0					
ANR	1365698	Identifier	op1		1364754	1					
ANR	1365699	IdentifierDeclStatement	zend_op * target ;	1443:4:47760:47775	1364754	2	True				
ANR	1365700	IdentifierDecl	* target		1364754	0					
ANR	1365701	IdentifierDeclType	zend_op *		1364754	0					
ANR	1365702	Identifier	target		1364754	1					
ANR	1365703	IdentifierDeclStatement	zend_op * target_end ;	1444:4:47781:47800	1364754	3	True				
ANR	1365704	IdentifierDecl	* target_end		1364754	0					
ANR	1365705	IdentifierDeclType	zend_op *		1364754	0					
ANR	1365706	Identifier	target_end		1364754	1					
ANR	1365707	IdentifierDeclStatement	zend_code_block * target_block = block -> op2_to ;	1445:4:47806:47851	1364754	4	True				
ANR	1365708	IdentifierDecl	* target_block = block -> op2_to		1364754	0					
ANR	1365709	IdentifierDeclType	zend_code_block *		1364754	0					
ANR	1365710	Identifier	target_block		1364754	1					
ANR	1365711	AssignmentExpression	* target_block = block -> op2_to		1364754	2		=			
ANR	1365712	Identifier	target_block		1364754	0					
ANR	1365713	PtrMemberAccess	block -> op2_to		1364754	1					
ANR	1365714	Identifier	block		1364754	0					
ANR	1365715	Identifier	op2_to		1364754	1					
ANR	1365716	ExpressionStatement		1445:50:47852:47852	1364754	5	True				
ANR	1365717	Label	next_target :	1447:0:47855:47866	1364754	6	True				
ANR	1365718	Identifier	next_target		1364754	0					
ANR	1365719	ExpressionStatement	target = target_block -> start_opline	1448:4:47872:47907	1364754	7	True				
ANR	1365720	AssignmentExpression	target = target_block -> start_opline		1364754	0		=			
ANR	1365721	Identifier	target		1364754	0					
ANR	1365722	PtrMemberAccess	target_block -> start_opline		1364754	1					
ANR	1365723	Identifier	target_block		1364754	0					
ANR	1365724	Identifier	start_opline		1364754	1					
ANR	1365725	ExpressionStatement	target_end = target_block -> start_opline + target_block -> len	1449:4:47913:47972	1364754	8	True				
ANR	1365726	AssignmentExpression	target_end = target_block -> start_opline + target_block -> len		1364754	0		=			
ANR	1365727	Identifier	target_end		1364754	0					
ANR	1365728	AdditiveExpression	target_block -> start_opline + target_block -> len		1364754	1		+			
ANR	1365729	PtrMemberAccess	target_block -> start_opline		1364754	0					
ANR	1365730	Identifier	target_block		1364754	0					
ANR	1365731	Identifier	start_opline		1364754	1					
ANR	1365732	PtrMemberAccess	target_block -> len		1364754	1					
ANR	1365733	Identifier	target_block		1364754	0					
ANR	1365734	Identifier	len		1364754	1					
ANR	1365735	WhileStatement	while ( target < target_end && target -> opcode == ZEND_NOP )		1364754	9					
ANR	1365736	Condition	target < target_end && target -> opcode == ZEND_NOP	1450:11:47985:48033	1364754	0	True				
ANR	1365737	AndExpression	target < target_end && target -> opcode == ZEND_NOP		1364754	0		&&			
ANR	1365738	RelationalExpression	target < target_end		1364754	0		<			
ANR	1365739	Identifier	target		1364754	0					
ANR	1365740	Identifier	target_end		1364754	1					
ANR	1365741	EqualityExpression	target -> opcode == ZEND_NOP		1364754	1		==			
ANR	1365742	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1365743	Identifier	target		1364754	0					
ANR	1365744	Identifier	opcode		1364754	1					
ANR	1365745	Identifier	ZEND_NOP		1364754	1					
ANR	1365746	CompoundStatement		195:62:5589:5589	1364754	1					
ANR	1365747	ExpressionStatement	target ++	1451:5:48043:48051	1364754	0	True				
ANR	1365748	PostIncDecOperationExpression	target ++		1364754	0					
ANR	1365749	Identifier	target		1364754	0					
ANR	1365750	IncDec	++		1364754	1					
ANR	1365751	IfStatement	if ( target == target_end )		1364754	10					
ANR	1365752	Condition	target == target_end	1455:8:48103:48122	1364754	0	True				
ANR	1365753	EqualityExpression	target == target_end		1364754	0		==			
ANR	1365754	Identifier	target		1364754	0					
ANR	1365755	Identifier	target_end		1364754	1					
ANR	1365756	CompoundStatement		200:30:5678:5678	1364754	1					
ANR	1365757	ExpressionStatement	target_block = target_block -> follow_to	1456:5:48132:48170	1364754	0	True				
ANR	1365758	AssignmentExpression	target_block = target_block -> follow_to		1364754	0		=			
ANR	1365759	Identifier	target_block		1364754	0					
ANR	1365760	PtrMemberAccess	target_block -> follow_to		1364754	1					
ANR	1365761	Identifier	target_block		1364754	0					
ANR	1365762	Identifier	follow_to		1364754	1					
ANR	1365763	GotoStatement	goto next_target ;	1457:5:48177:48193	1364754	1	True				
ANR	1365764	Identifier	next_target		1364754	0					
ANR	1365765	ElseStatement	else		1364754	0					
ANR	1365766	IfStatement	if ( target -> opcode == INV_COND ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected )		1364754	0					
ANR	1365767	Condition	target -> opcode == INV_COND ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected	1458:15:48210:48522	1364754	0	True				
ANR	1365768	AndExpression	target -> opcode == INV_COND ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	0		&&			
ANR	1365769	EqualityExpression	target -> opcode == INV_COND ( last_op -> opcode )		1364754	0		==			
ANR	1365770	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1365771	Identifier	target		1364754	0					
ANR	1365772	Identifier	opcode		1364754	1					
ANR	1365773	CallExpression	INV_COND ( last_op -> opcode )		1364754	1					
ANR	1365774	Callee	INV_COND		1364754	0					
ANR	1365775	Identifier	INV_COND		1364754	0					
ANR	1365776	ArgumentList	last_op -> opcode		1364754	1					
ANR	1365777	Argument	last_op -> opcode		1364754	0					
ANR	1365778	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1365779	Identifier	last_op		1364754	0					
ANR	1365780	Identifier	opcode		1364754	1					
ANR	1365781	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1365782	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1365783	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1365784	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365785	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365786	ArgumentList	target		1364754	1					
ANR	1365787	Argument	target		1364754	0					
ANR	1365788	Identifier	target		1364754	0					
ANR	1365789	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1365790	Identifier	IS_TMP_VAR		1364754	0					
ANR	1365791	Identifier	IS_CV		1364754	1					
ANR	1365792	AndExpression	same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1365793	EqualityExpression	same_type == ZEND_OP1_TYPE ( target )		1364754	0		==			
ANR	1365794	Identifier	same_type		1364754	0					
ANR	1365795	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1365796	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365797	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365798	ArgumentList	target		1364754	1					
ANR	1365799	Argument	target		1364754	0					
ANR	1365800	Identifier	target		1364754	0					
ANR	1365801	AndExpression	same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1365802	EqualityExpression	same_var == VAR_NUM_EX ( target -> op1 )		1364754	0		==			
ANR	1365803	Identifier	same_var		1364754	0					
ANR	1365804	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1365805	Callee	VAR_NUM_EX		1364754	0					
ANR	1365806	Identifier	VAR_NUM_EX		1364754	0					
ANR	1365807	ArgumentList	target -> op1		1364754	1					
ANR	1365808	Argument	target -> op1		1364754	0					
ANR	1365809	PtrMemberAccess	target -> op1		1364754	0					
ANR	1365810	Identifier	target		1364754	0					
ANR	1365811	Identifier	op1		1364754	1					
ANR	1365812	AndExpression	target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1365813	PtrMemberAccess	target_block -> follow_to		1364754	0					
ANR	1365814	Identifier	target_block		1364754	0					
ANR	1365815	Identifier	follow_to		1364754	1					
ANR	1365816	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1365817	UnaryOperator	!		1364754	0					
ANR	1365818	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1365819	Identifier	target_block		1364754	0					
ANR	1365820	Identifier	protected		1364754	1					
ANR	1365821	CompoundStatement		210:9:6086:6086	1364754	1					
ANR	1365822	ExpressionStatement	"del_source ( block , block -> op2_to )"	1466:5:48540:48572	1364754	0	True				
ANR	1365823	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1365824	Callee	del_source		1364754	0					
ANR	1365825	Identifier	del_source		1364754	0					
ANR	1365826	ArgumentList	block		1364754	1					
ANR	1365827	Argument	block		1364754	0					
ANR	1365828	Identifier	block		1364754	0					
ANR	1365829	Argument	block -> op2_to		1364754	1					
ANR	1365830	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365831	Identifier	block		1364754	0					
ANR	1365832	Identifier	op2_to		1364754	1					
ANR	1365833	ExpressionStatement	block -> op2_to = target_block -> follow_to	1467:5:48579:48618	1364754	1	True				
ANR	1365834	AssignmentExpression	block -> op2_to = target_block -> follow_to		1364754	0		=			
ANR	1365835	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365836	Identifier	block		1364754	0					
ANR	1365837	Identifier	op2_to		1364754	1					
ANR	1365838	PtrMemberAccess	target_block -> follow_to		1364754	1					
ANR	1365839	Identifier	target_block		1364754	0					
ANR	1365840	Identifier	follow_to		1364754	1					
ANR	1365841	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1468:5:48625:48657	1364754	2	True				
ANR	1365842	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1365843	Callee	ADD_SOURCE		1364754	0					
ANR	1365844	Identifier	ADD_SOURCE		1364754	0					
ANR	1365845	ArgumentList	block		1364754	1					
ANR	1365846	Argument	block		1364754	0					
ANR	1365847	Identifier	block		1364754	0					
ANR	1365848	Argument	block -> op2_to		1364754	1					
ANR	1365849	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365850	Identifier	block		1364754	0					
ANR	1365851	Identifier	op2_to		1364754	1					
ANR	1365852	ElseStatement	else		1364754	0					
ANR	1365853	IfStatement	if ( target -> opcode == INV_COND_EX ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected )		1364754	0					
ANR	1365854	Condition	target -> opcode == INV_COND_EX ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected	1469:15:48674:48940	1364754	0	True				
ANR	1365855	AndExpression	target -> opcode == INV_COND_EX ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	0		&&			
ANR	1365856	EqualityExpression	target -> opcode == INV_COND_EX ( last_op -> opcode )		1364754	0		==			
ANR	1365857	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1365858	Identifier	target		1364754	0					
ANR	1365859	Identifier	opcode		1364754	1					
ANR	1365860	CallExpression	INV_COND_EX ( last_op -> opcode )		1364754	1					
ANR	1365861	Callee	INV_COND_EX		1364754	0					
ANR	1365862	Identifier	INV_COND_EX		1364754	0					
ANR	1365863	ArgumentList	last_op -> opcode		1364754	1					
ANR	1365864	Argument	last_op -> opcode		1364754	0					
ANR	1365865	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1365866	Identifier	last_op		1364754	0					
ANR	1365867	Identifier	opcode		1364754	1					
ANR	1365868	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1365869	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1365870	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1365871	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365872	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365873	ArgumentList	target		1364754	1					
ANR	1365874	Argument	target		1364754	0					
ANR	1365875	Identifier	target		1364754	0					
ANR	1365876	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1365877	Identifier	IS_TMP_VAR		1364754	0					
ANR	1365878	Identifier	IS_CV		1364754	1					
ANR	1365879	AndExpression	same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1365880	EqualityExpression	same_type == ZEND_OP1_TYPE ( target )		1364754	0		==			
ANR	1365881	Identifier	same_type		1364754	0					
ANR	1365882	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1365883	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365884	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365885	ArgumentList	target		1364754	1					
ANR	1365886	Argument	target		1364754	0					
ANR	1365887	Identifier	target		1364754	0					
ANR	1365888	AndExpression	same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1365889	EqualityExpression	same_var == VAR_NUM_EX ( target -> op1 )		1364754	0		==			
ANR	1365890	Identifier	same_var		1364754	0					
ANR	1365891	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1365892	Callee	VAR_NUM_EX		1364754	0					
ANR	1365893	Identifier	VAR_NUM_EX		1364754	0					
ANR	1365894	ArgumentList	target -> op1		1364754	1					
ANR	1365895	Argument	target -> op1		1364754	0					
ANR	1365896	PtrMemberAccess	target -> op1		1364754	0					
ANR	1365897	Identifier	target		1364754	0					
ANR	1365898	Identifier	op1		1364754	1					
ANR	1365899	AndExpression	target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1365900	PtrMemberAccess	target_block -> follow_to		1364754	0					
ANR	1365901	Identifier	target_block		1364754	0					
ANR	1365902	Identifier	follow_to		1364754	1					
ANR	1365903	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1365904	UnaryOperator	!		1364754	0					
ANR	1365905	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1365906	Identifier	target_block		1364754	0					
ANR	1365907	Identifier	protected		1364754	1					
ANR	1365908	CompoundStatement		219:33:6496:6496	1364754	1					
ANR	1365909	ExpressionStatement	last_op -> opcode += 3	1476:5:49012:49032	1364754	0	True				
ANR	1365910	AssignmentExpression	last_op -> opcode += 3		1364754	0		+=			
ANR	1365911	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1365912	Identifier	last_op		1364754	0					
ANR	1365913	Identifier	opcode		1364754	1					
ANR	1365914	PrimaryExpression	3		1364754	1					
ANR	1365915	ExpressionStatement	last_op -> result = target -> result	1477:5:49039:49071	1364754	1	True				
ANR	1365916	AssignmentExpression	last_op -> result = target -> result		1364754	0		=			
ANR	1365917	PtrMemberAccess	last_op -> result		1364754	0					
ANR	1365918	Identifier	last_op		1364754	0					
ANR	1365919	Identifier	result		1364754	1					
ANR	1365920	PtrMemberAccess	target -> result		1364754	1					
ANR	1365921	Identifier	target		1364754	0					
ANR	1365922	Identifier	result		1364754	1					
ANR	1365923	ExpressionStatement	"del_source ( block , block -> op2_to )"	1478:5:49078:49110	1364754	2	True				
ANR	1365924	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1365925	Callee	del_source		1364754	0					
ANR	1365926	Identifier	del_source		1364754	0					
ANR	1365927	ArgumentList	block		1364754	1					
ANR	1365928	Argument	block		1364754	0					
ANR	1365929	Identifier	block		1364754	0					
ANR	1365930	Argument	block -> op2_to		1364754	1					
ANR	1365931	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365932	Identifier	block		1364754	0					
ANR	1365933	Identifier	op2_to		1364754	1					
ANR	1365934	ExpressionStatement	block -> op2_to = target_block -> follow_to	1479:5:49117:49156	1364754	3	True				
ANR	1365935	AssignmentExpression	block -> op2_to = target_block -> follow_to		1364754	0		=			
ANR	1365936	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365937	Identifier	block		1364754	0					
ANR	1365938	Identifier	op2_to		1364754	1					
ANR	1365939	PtrMemberAccess	target_block -> follow_to		1364754	1					
ANR	1365940	Identifier	target_block		1364754	0					
ANR	1365941	Identifier	follow_to		1364754	1					
ANR	1365942	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1480:5:49163:49195	1364754	4	True				
ANR	1365943	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1365944	Callee	ADD_SOURCE		1364754	0					
ANR	1365945	Identifier	ADD_SOURCE		1364754	0					
ANR	1365946	ArgumentList	block		1364754	1					
ANR	1365947	Argument	block		1364754	0					
ANR	1365948	Identifier	block		1364754	0					
ANR	1365949	Argument	block -> op2_to		1364754	1					
ANR	1365950	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1365951	Identifier	block		1364754	0					
ANR	1365952	Identifier	op2_to		1364754	1					
ANR	1365953	ElseStatement	else		1364754	0					
ANR	1365954	IfStatement	if ( target_block -> op2_to && target -> opcode == last_op -> opcode && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected )		1364754	0					
ANR	1365955	Condition	target_block -> op2_to && target -> opcode == last_op -> opcode && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected	1481:15:49212:49466	1364754	0	True				
ANR	1365956	AndExpression	target_block -> op2_to && target -> opcode == last_op -> opcode && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	0		&&			
ANR	1365957	PtrMemberAccess	target_block -> op2_to		1364754	0					
ANR	1365958	Identifier	target_block		1364754	0					
ANR	1365959	Identifier	op2_to		1364754	1					
ANR	1365960	AndExpression	target -> opcode == last_op -> opcode && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1365961	EqualityExpression	target -> opcode == last_op -> opcode		1364754	0		==			
ANR	1365962	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1365963	Identifier	target		1364754	0					
ANR	1365964	Identifier	opcode		1364754	1					
ANR	1365965	PtrMemberAccess	last_op -> opcode		1364754	1					
ANR	1365966	Identifier	last_op		1364754	0					
ANR	1365967	Identifier	opcode		1364754	1					
ANR	1365968	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1365969	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1365970	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1365971	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365972	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365973	ArgumentList	target		1364754	1					
ANR	1365974	Argument	target		1364754	0					
ANR	1365975	Identifier	target		1364754	0					
ANR	1365976	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1365977	Identifier	IS_TMP_VAR		1364754	0					
ANR	1365978	Identifier	IS_CV		1364754	1					
ANR	1365979	AndExpression	same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1365980	EqualityExpression	same_type == ZEND_OP1_TYPE ( target )		1364754	0		==			
ANR	1365981	Identifier	same_type		1364754	0					
ANR	1365982	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1365983	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1365984	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1365985	ArgumentList	target		1364754	1					
ANR	1365986	Argument	target		1364754	0					
ANR	1365987	Identifier	target		1364754	0					
ANR	1365988	AndExpression	same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1365989	EqualityExpression	same_var == VAR_NUM_EX ( target -> op1 )		1364754	0		==			
ANR	1365990	Identifier	same_var		1364754	0					
ANR	1365991	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1365992	Callee	VAR_NUM_EX		1364754	0					
ANR	1365993	Identifier	VAR_NUM_EX		1364754	0					
ANR	1365994	ArgumentList	target -> op1		1364754	1					
ANR	1365995	Argument	target -> op1		1364754	0					
ANR	1365996	PtrMemberAccess	target -> op1		1364754	0					
ANR	1365997	Identifier	target		1364754	0					
ANR	1365998	Identifier	op1		1364754	1					
ANR	1365999	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1366000	UnaryOperator	!		1364754	0					
ANR	1366001	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1366002	Identifier	target_block		1364754	0					
ANR	1366003	Identifier	protected		1364754	1					
ANR	1366004	CompoundStatement		231:35:7022:7022	1364754	1					
ANR	1366005	ExpressionStatement	"del_source ( block , block -> op2_to )"	1488:5:49529:49561	1364754	0	True				
ANR	1366006	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1366007	Callee	del_source		1364754	0					
ANR	1366008	Identifier	del_source		1364754	0					
ANR	1366009	ArgumentList	block		1364754	1					
ANR	1366010	Argument	block		1364754	0					
ANR	1366011	Identifier	block		1364754	0					
ANR	1366012	Argument	block -> op2_to		1364754	1					
ANR	1366013	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366014	Identifier	block		1364754	0					
ANR	1366015	Identifier	op2_to		1364754	1					
ANR	1366016	ExpressionStatement	block -> op2_to = target_block -> op2_to	1489:5:49568:49604	1364754	1	True				
ANR	1366017	AssignmentExpression	block -> op2_to = target_block -> op2_to		1364754	0		=			
ANR	1366018	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366019	Identifier	block		1364754	0					
ANR	1366020	Identifier	op2_to		1364754	1					
ANR	1366021	PtrMemberAccess	target_block -> op2_to		1364754	1					
ANR	1366022	Identifier	target_block		1364754	0					
ANR	1366023	Identifier	op2_to		1364754	1					
ANR	1366024	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1490:5:49611:49643	1364754	2	True				
ANR	1366025	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1366026	Callee	ADD_SOURCE		1364754	0					
ANR	1366027	Identifier	ADD_SOURCE		1364754	0					
ANR	1366028	ArgumentList	block		1364754	1					
ANR	1366029	Argument	block		1364754	0					
ANR	1366030	Identifier	block		1364754	0					
ANR	1366031	Argument	block -> op2_to		1364754	1					
ANR	1366032	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366033	Identifier	block		1364754	0					
ANR	1366034	Identifier	op2_to		1364754	1					
ANR	1366035	ElseStatement	else		1364754	0					
ANR	1366036	IfStatement	if ( target_block -> op1_to && target -> opcode == ZEND_JMP && ! target_block -> protected )		1364754	0					
ANR	1366037	Condition	target_block -> op1_to && target -> opcode == ZEND_JMP && ! target_block -> protected	1491:15:49660:49751	1364754	0	True				
ANR	1366038	AndExpression	target_block -> op1_to && target -> opcode == ZEND_JMP && ! target_block -> protected		1364754	0		&&			
ANR	1366039	PtrMemberAccess	target_block -> op1_to		1364754	0					
ANR	1366040	Identifier	target_block		1364754	0					
ANR	1366041	Identifier	op1_to		1364754	1					
ANR	1366042	AndExpression	target -> opcode == ZEND_JMP && ! target_block -> protected		1364754	1		&&			
ANR	1366043	EqualityExpression	target -> opcode == ZEND_JMP		1364754	0		==			
ANR	1366044	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1366045	Identifier	target		1364754	0					
ANR	1366046	Identifier	opcode		1364754	1					
ANR	1366047	Identifier	ZEND_JMP		1364754	1					
ANR	1366048	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1366049	UnaryOperator	!		1364754	0					
ANR	1366050	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1366051	Identifier	target_block		1364754	0					
ANR	1366052	Identifier	protected		1364754	1					
ANR	1366053	CompoundStatement		238:33:7307:7307	1364754	1					
ANR	1366054	ExpressionStatement	"del_source ( block , block -> op2_to )"	1495:5:49810:49842	1364754	0	True				
ANR	1366055	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1366056	Callee	del_source		1364754	0					
ANR	1366057	Identifier	del_source		1364754	0					
ANR	1366058	ArgumentList	block		1364754	1					
ANR	1366059	Argument	block		1364754	0					
ANR	1366060	Identifier	block		1364754	0					
ANR	1366061	Argument	block -> op2_to		1364754	1					
ANR	1366062	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366063	Identifier	block		1364754	0					
ANR	1366064	Identifier	op2_to		1364754	1					
ANR	1366065	ExpressionStatement	block -> op2_to = target_block -> op1_to	1496:5:49849:49885	1364754	1	True				
ANR	1366066	AssignmentExpression	block -> op2_to = target_block -> op1_to		1364754	0		=			
ANR	1366067	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366068	Identifier	block		1364754	0					
ANR	1366069	Identifier	op2_to		1364754	1					
ANR	1366070	PtrMemberAccess	target_block -> op1_to		1364754	1					
ANR	1366071	Identifier	target_block		1364754	0					
ANR	1366072	Identifier	op1_to		1364754	1					
ANR	1366073	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1497:5:49892:49924	1364754	2	True				
ANR	1366074	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1366075	Callee	ADD_SOURCE		1364754	0					
ANR	1366076	Identifier	ADD_SOURCE		1364754	0					
ANR	1366077	ArgumentList	block		1364754	1					
ANR	1366078	Argument	block		1364754	0					
ANR	1366079	Identifier	block		1364754	0					
ANR	1366080	Argument	block -> op2_to		1364754	1					
ANR	1366081	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366082	Identifier	block		1364754	0					
ANR	1366083	Identifier	op2_to		1364754	1					
ANR	1366084	ElseStatement	else		1364754	0					
ANR	1366085	IfStatement	if ( target_block -> op2_to && target_block -> ext_to && target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected )		1364754	0					
ANR	1366086	Condition	target_block -> op2_to && target_block -> ext_to && target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected	1498:15:49941:50224	1364754	0	True				
ANR	1366087	AndExpression	target_block -> op2_to && target_block -> ext_to && target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	0		&&			
ANR	1366088	PtrMemberAccess	target_block -> op2_to		1364754	0					
ANR	1366089	Identifier	target_block		1364754	0					
ANR	1366090	Identifier	op2_to		1364754	1					
ANR	1366091	AndExpression	target_block -> ext_to && target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1366092	PtrMemberAccess	target_block -> ext_to		1364754	0					
ANR	1366093	Identifier	target_block		1364754	0					
ANR	1366094	Identifier	ext_to		1364754	1					
ANR	1366095	AndExpression	target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1366096	EqualityExpression	target -> opcode == ZEND_JMPZNZ		1364754	0		==			
ANR	1366097	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1366098	Identifier	target		1364754	0					
ANR	1366099	Identifier	opcode		1364754	1					
ANR	1366100	Identifier	ZEND_JMPZNZ		1364754	1					
ANR	1366101	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1366102	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1366103	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1366104	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366105	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366106	ArgumentList	target		1364754	1					
ANR	1366107	Argument	target		1364754	0					
ANR	1366108	Identifier	target		1364754	0					
ANR	1366109	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1366110	Identifier	IS_TMP_VAR		1364754	0					
ANR	1366111	Identifier	IS_CV		1364754	1					
ANR	1366112	AndExpression	same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1366113	EqualityExpression	same_type == ZEND_OP1_TYPE ( target )		1364754	0		==			
ANR	1366114	Identifier	same_type		1364754	0					
ANR	1366115	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1366116	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366117	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366118	ArgumentList	target		1364754	1					
ANR	1366119	Argument	target		1364754	0					
ANR	1366120	Identifier	target		1364754	0					
ANR	1366121	AndExpression	same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1366122	EqualityExpression	same_var == VAR_NUM_EX ( target -> op1 )		1364754	0		==			
ANR	1366123	Identifier	same_var		1364754	0					
ANR	1366124	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1366125	Callee	VAR_NUM_EX		1364754	0					
ANR	1366126	Identifier	VAR_NUM_EX		1364754	0					
ANR	1366127	ArgumentList	target -> op1		1364754	1					
ANR	1366128	Argument	target -> op1		1364754	0					
ANR	1366129	PtrMemberAccess	target -> op1		1364754	0					
ANR	1366130	Identifier	target		1364754	0					
ANR	1366131	Identifier	op1		1364754	1					
ANR	1366132	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1366133	UnaryOperator	!		1364754	0					
ANR	1366134	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1366135	Identifier	target_block		1364754	0					
ANR	1366136	Identifier	protected		1364754	1					
ANR	1366137	CompoundStatement		249:33:7780:7780	1364754	1					
ANR	1366138	ExpressionStatement	"del_source ( block , block -> op2_to )"	1506:5:50293:50325	1364754	0	True				
ANR	1366139	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1366140	Callee	del_source		1364754	0					
ANR	1366141	Identifier	del_source		1364754	0					
ANR	1366142	ArgumentList	block		1364754	1					
ANR	1366143	Argument	block		1364754	0					
ANR	1366144	Identifier	block		1364754	0					
ANR	1366145	Argument	block -> op2_to		1364754	1					
ANR	1366146	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366147	Identifier	block		1364754	0					
ANR	1366148	Identifier	op2_to		1364754	1					
ANR	1366149	IfStatement	if ( last_op -> opcode == ZEND_JMPZ )		1364754	1					
ANR	1366150	Condition	last_op -> opcode == ZEND_JMPZ	1507:9:50336:50363	1364754	0	True				
ANR	1366151	EqualityExpression	last_op -> opcode == ZEND_JMPZ		1364754	0		==			
ANR	1366152	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366153	Identifier	last_op		1364754	0					
ANR	1366154	Identifier	opcode		1364754	1					
ANR	1366155	Identifier	ZEND_JMPZ		1364754	1					
ANR	1366156	CompoundStatement		252:39:7919:7919	1364754	1					
ANR	1366157	ExpressionStatement	block -> op2_to = target_block -> op2_to	1508:6:50374:50410	1364754	0	True				
ANR	1366158	AssignmentExpression	block -> op2_to = target_block -> op2_to		1364754	0		=			
ANR	1366159	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366160	Identifier	block		1364754	0					
ANR	1366161	Identifier	op2_to		1364754	1					
ANR	1366162	PtrMemberAccess	target_block -> op2_to		1364754	1					
ANR	1366163	Identifier	target_block		1364754	0					
ANR	1366164	Identifier	op2_to		1364754	1					
ANR	1366165	ElseStatement	else		1364754	0					
ANR	1366166	CompoundStatement		254:12:7977:7977	1364754	0					
ANR	1366167	ExpressionStatement	block -> op2_to = target_block -> ext_to	1510:6:50432:50468	1364754	0	True				
ANR	1366168	AssignmentExpression	block -> op2_to = target_block -> ext_to		1364754	0		=			
ANR	1366169	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366170	Identifier	block		1364754	0					
ANR	1366171	Identifier	op2_to		1364754	1					
ANR	1366172	PtrMemberAccess	target_block -> ext_to		1364754	1					
ANR	1366173	Identifier	target_block		1364754	0					
ANR	1366174	Identifier	ext_to		1364754	1					
ANR	1366175	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1512:5:50482:50514	1364754	2	True				
ANR	1366176	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1366177	Callee	ADD_SOURCE		1364754	0					
ANR	1366178	Identifier	ADD_SOURCE		1364754	0					
ANR	1366179	ArgumentList	block		1364754	1					
ANR	1366180	Argument	block		1364754	0					
ANR	1366181	Identifier	block		1364754	0					
ANR	1366182	Argument	block -> op2_to		1364754	1					
ANR	1366183	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366184	Identifier	block		1364754	0					
ANR	1366185	Identifier	op2_to		1364754	1					
ANR	1366186	IfStatement	if ( block -> follow_to && ( last_op -> opcode == ZEND_JMPZ || last_op -> opcode == ZEND_JMPNZ ) )		1364754	8					
ANR	1366187	Condition	block -> follow_to && ( last_op -> opcode == ZEND_JMPZ || last_op -> opcode == ZEND_JMPNZ )	1516:7:50535:50624	1364754	0	True				
ANR	1366188	AndExpression	block -> follow_to && ( last_op -> opcode == ZEND_JMPZ || last_op -> opcode == ZEND_JMPNZ )		1364754	0		&&			
ANR	1366189	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366190	Identifier	block		1364754	0					
ANR	1366191	Identifier	follow_to		1364754	1					
ANR	1366192	OrExpression	last_op -> opcode == ZEND_JMPZ || last_op -> opcode == ZEND_JMPNZ		1364754	1		||			
ANR	1366193	EqualityExpression	last_op -> opcode == ZEND_JMPZ		1364754	0		==			
ANR	1366194	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366195	Identifier	last_op		1364754	0					
ANR	1366196	Identifier	opcode		1364754	1					
ANR	1366197	Identifier	ZEND_JMPZ		1364754	1					
ANR	1366198	EqualityExpression	last_op -> opcode == ZEND_JMPNZ		1364754	1		==			
ANR	1366199	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366200	Identifier	last_op		1364754	0					
ANR	1366201	Identifier	opcode		1364754	1					
ANR	1366202	Identifier	ZEND_JMPNZ		1364754	1					
ANR	1366203	CompoundStatement		264:4:8207:8226	1364754	1					
ANR	1366204	IdentifierDeclStatement	zend_op * target ;	1518:4:50633:50648	1364754	0	True				
ANR	1366205	IdentifierDecl	* target		1364754	0					
ANR	1366206	IdentifierDeclType	zend_op *		1364754	0					
ANR	1366207	Identifier	target		1364754	1					
ANR	1366208	IdentifierDeclStatement	zend_op * target_end ;	1519:4:50654:50673	1364754	1	True				
ANR	1366209	IdentifierDecl	* target_end		1364754	0					
ANR	1366210	IdentifierDeclType	zend_op *		1364754	0					
ANR	1366211	Identifier	target_end		1364754	1					
ANR	1366212	WhileStatement	while ( 1 )		1364754	2					
ANR	1366213	Condition	1	1521:11:50687:50687	1364754	0	True				
ANR	1366214	PrimaryExpression	1		1364754	0					
ANR	1366215	CompoundStatement		266:14:8243:8243	1364754	1					
ANR	1366216	ExpressionStatement	target = block -> follow_to -> start_opline	1522:5:50697:50736	1364754	0	True				
ANR	1366217	AssignmentExpression	target = block -> follow_to -> start_opline		1364754	0		=			
ANR	1366218	Identifier	target		1364754	0					
ANR	1366219	PtrMemberAccess	block -> follow_to -> start_opline		1364754	1					
ANR	1366220	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366221	Identifier	block		1364754	0					
ANR	1366222	Identifier	follow_to		1364754	1					
ANR	1366223	Identifier	start_opline		1364754	1					
ANR	1366224	ExpressionStatement	target_end = block -> follow_to -> start_opline + block -> follow_to -> len	1523:5:50743:50810	1364754	1	True				
ANR	1366225	AssignmentExpression	target_end = block -> follow_to -> start_opline + block -> follow_to -> len		1364754	0		=			
ANR	1366226	Identifier	target_end		1364754	0					
ANR	1366227	AdditiveExpression	block -> follow_to -> start_opline + block -> follow_to -> len		1364754	1		+			
ANR	1366228	PtrMemberAccess	block -> follow_to -> start_opline		1364754	0					
ANR	1366229	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366230	Identifier	block		1364754	0					
ANR	1366231	Identifier	follow_to		1364754	1					
ANR	1366232	Identifier	start_opline		1364754	1					
ANR	1366233	PtrMemberAccess	block -> follow_to -> len		1364754	1					
ANR	1366234	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366235	Identifier	block		1364754	0					
ANR	1366236	Identifier	follow_to		1364754	1					
ANR	1366237	Identifier	len		1364754	1					
ANR	1366238	WhileStatement	while ( target < target_end && target -> opcode == ZEND_NOP )		1364754	2					
ANR	1366239	Condition	target < target_end && target -> opcode == ZEND_NOP	1524:12:50824:50872	1364754	0	True				
ANR	1366240	AndExpression	target < target_end && target -> opcode == ZEND_NOP		1364754	0		&&			
ANR	1366241	RelationalExpression	target < target_end		1364754	0		<			
ANR	1366242	Identifier	target		1364754	0					
ANR	1366243	Identifier	target_end		1364754	1					
ANR	1366244	EqualityExpression	target -> opcode == ZEND_NOP		1364754	1		==			
ANR	1366245	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1366246	Identifier	target		1364754	0					
ANR	1366247	Identifier	opcode		1364754	1					
ANR	1366248	Identifier	ZEND_NOP		1364754	1					
ANR	1366249	CompoundStatement		269:63:8428:8428	1364754	1					
ANR	1366250	ExpressionStatement	target ++	1525:6:50883:50891	1364754	0	True				
ANR	1366251	PostIncDecOperationExpression	target ++		1364754	0					
ANR	1366252	Identifier	target		1364754	0					
ANR	1366253	IncDec	++		1364754	1					
ANR	1366254	IfStatement	if ( target == target_end && ! block -> follow_to -> protected )		1364754	3					
ANR	1366255	Condition	target == target_end && ! block -> follow_to -> protected	1529:9:50946:50998	1364754	0	True				
ANR	1366256	AndExpression	target == target_end && ! block -> follow_to -> protected		1364754	0		&&			
ANR	1366257	EqualityExpression	target == target_end		1364754	0		==			
ANR	1366258	Identifier	target		1364754	0					
ANR	1366259	Identifier	target_end		1364754	1					
ANR	1366260	UnaryOperationExpression	! block -> follow_to -> protected		1364754	1					
ANR	1366261	UnaryOperator	!		1364754	0					
ANR	1366262	PtrMemberAccess	block -> follow_to -> protected		1364754	1					
ANR	1366263	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366264	Identifier	block		1364754	0					
ANR	1366265	Identifier	follow_to		1364754	1					
ANR	1366266	Identifier	protected		1364754	1					
ANR	1366267	CompoundStatement		274:64:8554:8554	1364754	1					
ANR	1366268	ExpressionStatement	"del_source ( block , block -> follow_to )"	1530:6:51009:51044	1364754	0	True				
ANR	1366269	CallExpression	"del_source ( block , block -> follow_to )"		1364754	0					
ANR	1366270	Callee	del_source		1364754	0					
ANR	1366271	Identifier	del_source		1364754	0					
ANR	1366272	ArgumentList	block		1364754	1					
ANR	1366273	Argument	block		1364754	0					
ANR	1366274	Identifier	block		1364754	0					
ANR	1366275	Argument	block -> follow_to		1364754	1					
ANR	1366276	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366277	Identifier	block		1364754	0					
ANR	1366278	Identifier	follow_to		1364754	1					
ANR	1366279	ExpressionStatement	block -> follow_to = block -> follow_to -> follow_to	1531:6:51052:51098	1364754	1	True				
ANR	1366280	AssignmentExpression	block -> follow_to = block -> follow_to -> follow_to		1364754	0		=			
ANR	1366281	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366282	Identifier	block		1364754	0					
ANR	1366283	Identifier	follow_to		1364754	1					
ANR	1366284	PtrMemberAccess	block -> follow_to -> follow_to		1364754	1					
ANR	1366285	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366286	Identifier	block		1364754	0					
ANR	1366287	Identifier	follow_to		1364754	1					
ANR	1366288	Identifier	follow_to		1364754	1					
ANR	1366289	ExpressionStatement	"ADD_SOURCE ( block , block -> follow_to )"	1532:6:51106:51141	1364754	2	True				
ANR	1366290	CallExpression	"ADD_SOURCE ( block , block -> follow_to )"		1364754	0					
ANR	1366291	Callee	ADD_SOURCE		1364754	0					
ANR	1366292	Identifier	ADD_SOURCE		1364754	0					
ANR	1366293	ArgumentList	block		1364754	1					
ANR	1366294	Argument	block		1364754	0					
ANR	1366295	Identifier	block		1364754	0					
ANR	1366296	Argument	block -> follow_to		1364754	1					
ANR	1366297	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366298	Identifier	block		1364754	0					
ANR	1366299	Identifier	follow_to		1364754	1					
ANR	1366300	ElseStatement	else		1364754	0					
ANR	1366301	CompoundStatement		278:12:8708:8708	1364754	0					
ANR	1366302	BreakStatement	break ;	1534:6:51163:51168	1364754	0	True				
ANR	1366303	IfStatement	if ( target -> opcode == ZEND_JMP && block -> follow_to -> op1_to && ! block -> follow_to -> protected )		1364754	3					
ANR	1366304	Condition	target -> opcode == ZEND_JMP && block -> follow_to -> op1_to && ! block -> follow_to -> protected	1538:8:51240:51335	1364754	0	True				
ANR	1366305	AndExpression	target -> opcode == ZEND_JMP && block -> follow_to -> op1_to && ! block -> follow_to -> protected		1364754	0		&&			
ANR	1366306	EqualityExpression	target -> opcode == ZEND_JMP		1364754	0		==			
ANR	1366307	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1366308	Identifier	target		1364754	0					
ANR	1366309	Identifier	opcode		1364754	1					
ANR	1366310	Identifier	ZEND_JMP		1364754	1					
ANR	1366311	AndExpression	block -> follow_to -> op1_to && ! block -> follow_to -> protected		1364754	1		&&			
ANR	1366312	PtrMemberAccess	block -> follow_to -> op1_to		1364754	0					
ANR	1366313	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366314	Identifier	block		1364754	0					
ANR	1366315	Identifier	follow_to		1364754	1					
ANR	1366316	Identifier	op1_to		1364754	1					
ANR	1366317	UnaryOperationExpression	! block -> follow_to -> protected		1364754	1					
ANR	1366318	UnaryOperator	!		1364754	0					
ANR	1366319	PtrMemberAccess	block -> follow_to -> protected		1364754	1					
ANR	1366320	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366321	Identifier	block		1364754	0					
ANR	1366322	Identifier	follow_to		1364754	1					
ANR	1366323	Identifier	protected		1364754	1					
ANR	1366324	CompoundStatement		285:35:8891:8891	1364754	1					
ANR	1366325	ExpressionStatement	"del_source ( block , block -> follow_to )"	1541:5:51345:51380	1364754	0	True				
ANR	1366326	CallExpression	"del_source ( block , block -> follow_to )"		1364754	0					
ANR	1366327	Callee	del_source		1364754	0					
ANR	1366328	Identifier	del_source		1364754	0					
ANR	1366329	ArgumentList	block		1364754	1					
ANR	1366330	Argument	block		1364754	0					
ANR	1366331	Identifier	block		1364754	0					
ANR	1366332	Argument	block -> follow_to		1364754	1					
ANR	1366333	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366334	Identifier	block		1364754	0					
ANR	1366335	Identifier	follow_to		1364754	1					
ANR	1366336	IfStatement	if ( last_op -> opcode == ZEND_JMPZ )		1364754	1					
ANR	1366337	Condition	last_op -> opcode == ZEND_JMPZ	1542:9:51391:51418	1364754	0	True				
ANR	1366338	EqualityExpression	last_op -> opcode == ZEND_JMPZ		1364754	0		==			
ANR	1366339	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366340	Identifier	last_op		1364754	0					
ANR	1366341	Identifier	opcode		1364754	1					
ANR	1366342	Identifier	ZEND_JMPZ		1364754	1					
ANR	1366343	CompoundStatement		287:39:8974:8974	1364754	1					
ANR	1366344	ExpressionStatement	block -> ext_to = block -> follow_to -> op1_to	1543:6:51429:51469	1364754	0	True				
ANR	1366345	AssignmentExpression	block -> ext_to = block -> follow_to -> op1_to		1364754	0		=			
ANR	1366346	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1366347	Identifier	block		1364754	0					
ANR	1366348	Identifier	ext_to		1364754	1					
ANR	1366349	PtrMemberAccess	block -> follow_to -> op1_to		1364754	1					
ANR	1366350	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366351	Identifier	block		1364754	0					
ANR	1366352	Identifier	follow_to		1364754	1					
ANR	1366353	Identifier	op1_to		1364754	1					
ANR	1366354	ExpressionStatement	"ADD_SOURCE ( block , block -> ext_to )"	1544:6:51477:51509	1364754	1	True				
ANR	1366355	CallExpression	"ADD_SOURCE ( block , block -> ext_to )"		1364754	0					
ANR	1366356	Callee	ADD_SOURCE		1364754	0					
ANR	1366357	Identifier	ADD_SOURCE		1364754	0					
ANR	1366358	ArgumentList	block		1364754	1					
ANR	1366359	Argument	block		1364754	0					
ANR	1366360	Identifier	block		1364754	0					
ANR	1366361	Argument	block -> ext_to		1364754	1					
ANR	1366362	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1366363	Identifier	block		1364754	0					
ANR	1366364	Identifier	ext_to		1364754	1					
ANR	1366365	ElseStatement	else		1364754	0					
ANR	1366366	CompoundStatement		290:12:9076:9076	1364754	0					
ANR	1366367	ExpressionStatement	block -> ext_to = block -> op2_to	1546:6:51531:51560	1364754	0	True				
ANR	1366368	AssignmentExpression	block -> ext_to = block -> op2_to		1364754	0		=			
ANR	1366369	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1366370	Identifier	block		1364754	0					
ANR	1366371	Identifier	ext_to		1364754	1					
ANR	1366372	PtrMemberAccess	block -> op2_to		1364754	1					
ANR	1366373	Identifier	block		1364754	0					
ANR	1366374	Identifier	op2_to		1364754	1					
ANR	1366375	ExpressionStatement	block -> op2_to = block -> follow_to -> op1_to	1547:6:51568:51608	1364754	1	True				
ANR	1366376	AssignmentExpression	block -> op2_to = block -> follow_to -> op1_to		1364754	0		=			
ANR	1366377	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366378	Identifier	block		1364754	0					
ANR	1366379	Identifier	op2_to		1364754	1					
ANR	1366380	PtrMemberAccess	block -> follow_to -> op1_to		1364754	1					
ANR	1366381	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366382	Identifier	block		1364754	0					
ANR	1366383	Identifier	follow_to		1364754	1					
ANR	1366384	Identifier	op1_to		1364754	1					
ANR	1366385	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1548:6:51616:51648	1364754	2	True				
ANR	1366386	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1366387	Callee	ADD_SOURCE		1364754	0					
ANR	1366388	Identifier	ADD_SOURCE		1364754	0					
ANR	1366389	ArgumentList	block		1364754	1					
ANR	1366390	Argument	block		1364754	0					
ANR	1366391	Identifier	block		1364754	0					
ANR	1366392	Argument	block -> op2_to		1364754	1					
ANR	1366393	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366394	Identifier	block		1364754	0					
ANR	1366395	Identifier	op2_to		1364754	1					
ANR	1366396	ExpressionStatement	block -> follow_to = NULL	1550:5:51662:51685	1364754	2	True				
ANR	1366397	AssignmentExpression	block -> follow_to = NULL		1364754	0		=			
ANR	1366398	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1366399	Identifier	block		1364754	0					
ANR	1366400	Identifier	follow_to		1364754	1					
ANR	1366401	Identifier	NULL		1364754	1					
ANR	1366402	ExpressionStatement	last_op -> opcode = ZEND_JMPZNZ	1551:5:51692:51721	1364754	3	True				
ANR	1366403	AssignmentExpression	last_op -> opcode = ZEND_JMPZNZ		1364754	0		=			
ANR	1366404	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366405	Identifier	last_op		1364754	0					
ANR	1366406	Identifier	opcode		1364754	1					
ANR	1366407	Identifier	ZEND_JMPZNZ		1364754	1					
ANR	1366408	BreakStatement	break ;	1554:3:51737:51742	1364754	9	True				
ANR	1366409	Label	case ZEND_JMPNZ_EX :	1556:2:51747:51765	1364754	10	True				
ANR	1366410	Identifier	ZEND_JMPNZ_EX		1364754	0					
ANR	1366411	Label	case ZEND_JMPZ_EX :	1557:2:51769:51786	1364754	11	True				
ANR	1366412	Identifier	ZEND_JMPZ_EX		1364754	0					
ANR	1366413	IfStatement	if ( ZEND_OP1_TYPE ( last_op ) == IS_CONST )		1364754	12					
ANR	1366414	Condition	ZEND_OP1_TYPE ( last_op ) == IS_CONST	1559:7:51830:51863	1364754	0	True				
ANR	1366415	EqualityExpression	ZEND_OP1_TYPE ( last_op ) == IS_CONST		1364754	0		==			
ANR	1366416	CallExpression	ZEND_OP1_TYPE ( last_op )		1364754	0					
ANR	1366417	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366418	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366419	ArgumentList	last_op		1364754	1					
ANR	1366420	Argument	last_op		1364754	0					
ANR	1366421	Identifier	last_op		1364754	0					
ANR	1366422	Identifier	IS_CONST		1364754	1					
ANR	1366423	CompoundStatement		305:4:9425:9482	1364754	1					
ANR	1366424	IdentifierDeclStatement	int should_jmp = zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) ) ;	1560:4:51872:51929	1364754	0	True				
ANR	1366425	IdentifierDecl	should_jmp = zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	0					
ANR	1366426	IdentifierDeclType	int		1364754	0					
ANR	1366427	Identifier	should_jmp		1364754	1					
ANR	1366428	AssignmentExpression	should_jmp = zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	2		=			
ANR	1366429	Identifier	should_jmp		1364754	0					
ANR	1366430	CallExpression	zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	1					
ANR	1366431	Callee	zend_is_true		1364754	0					
ANR	1366432	Identifier	zend_is_true		1364754	0					
ANR	1366433	ArgumentList	& ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1366434	Argument	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1366435	UnaryOperationExpression	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1366436	UnaryOperator	&		1364754	0					
ANR	1366437	CallExpression	ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1366438	Callee	ZEND_OP1_LITERAL		1364754	0					
ANR	1366439	Identifier	ZEND_OP1_LITERAL		1364754	0					
ANR	1366440	ArgumentList	last_op		1364754	1					
ANR	1366441	Argument	last_op		1364754	0					
ANR	1366442	Identifier	last_op		1364754	0					
ANR	1366443	IfStatement	if ( last_op -> opcode == ZEND_JMPZ_EX )		1364754	1					
ANR	1366444	Condition	last_op -> opcode == ZEND_JMPZ_EX	1562:8:51940:51970	1364754	0	True				
ANR	1366445	EqualityExpression	last_op -> opcode == ZEND_JMPZ_EX		1364754	0		==			
ANR	1366446	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366447	Identifier	last_op		1364754	0					
ANR	1366448	Identifier	opcode		1364754	1					
ANR	1366449	Identifier	ZEND_JMPZ_EX		1364754	1					
ANR	1366450	CompoundStatement		307:41:9526:9526	1364754	1					
ANR	1366451	ExpressionStatement	should_jmp = ! should_jmp	1563:5:51980:52004	1364754	0	True				
ANR	1366452	AssignmentExpression	should_jmp = ! should_jmp		1364754	0		=			
ANR	1366453	Identifier	should_jmp		1364754	0					
ANR	1366454	UnaryOperationExpression	! should_jmp		1364754	1					
ANR	1366455	UnaryOperator	!		1364754	0					
ANR	1366456	Identifier	should_jmp		1364754	1					
ANR	1366457	IfStatement	if ( ! should_jmp )		1364754	2					
ANR	1366458	Condition	! should_jmp	1565:8:52020:52030	1364754	0	True				
ANR	1366459	UnaryOperationExpression	! should_jmp		1364754	0					
ANR	1366460	UnaryOperator	!		1364754	0					
ANR	1366461	Identifier	should_jmp		1364754	1					
ANR	1366462	CompoundStatement		310:21:9586:9586	1364754	1					
ANR	1366463	ExpressionStatement	last_op -> opcode = ZEND_QM_ASSIGN	1569:5:52156:52188	1364754	0	True				
ANR	1366464	AssignmentExpression	last_op -> opcode = ZEND_QM_ASSIGN		1364754	0		=			
ANR	1366465	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366466	Identifier	last_op		1364754	0					
ANR	1366467	Identifier	opcode		1364754	1					
ANR	1366468	Identifier	ZEND_QM_ASSIGN		1364754	1					
ANR	1366469	ExpressionStatement	SET_UNUSED ( last_op -> op2 )	1570:5:52195:52219	1364754	1	True				
ANR	1366470	CallExpression	SET_UNUSED ( last_op -> op2 )		1364754	0					
ANR	1366471	Callee	SET_UNUSED		1364754	0					
ANR	1366472	Identifier	SET_UNUSED		1364754	0					
ANR	1366473	ArgumentList	last_op -> op2		1364754	1					
ANR	1366474	Argument	last_op -> op2		1364754	0					
ANR	1366475	PtrMemberAccess	last_op -> op2		1364754	0					
ANR	1366476	Identifier	last_op		1364754	0					
ANR	1366477	Identifier	op2		1364754	1					
ANR	1366478	ExpressionStatement	"del_source ( block , block -> op2_to )"	1571:5:52226:52258	1364754	2	True				
ANR	1366479	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1366480	Callee	del_source		1364754	0					
ANR	1366481	Identifier	del_source		1364754	0					
ANR	1366482	ArgumentList	block		1364754	1					
ANR	1366483	Argument	block		1364754	0					
ANR	1366484	Identifier	block		1364754	0					
ANR	1366485	Argument	block -> op2_to		1364754	1					
ANR	1366486	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366487	Identifier	block		1364754	0					
ANR	1366488	Identifier	op2_to		1364754	1					
ANR	1366489	ExpressionStatement	block -> op2_to = NULL	1572:5:52265:52285	1364754	3	True				
ANR	1366490	AssignmentExpression	block -> op2_to = NULL		1364754	0		=			
ANR	1366491	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366492	Identifier	block		1364754	0					
ANR	1366493	Identifier	op2_to		1364754	1					
ANR	1366494	Identifier	NULL		1364754	1					
ANR	1366495	BreakStatement	break ;	1574:4:52297:52302	1364754	3	True				
ANR	1366496	IfStatement	if ( block -> op2_to )		1364754	13					
ANR	1366497	Condition	block -> op2_to	1577:7:52317:52329	1364754	0	True				
ANR	1366498	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366499	Identifier	block		1364754	0					
ANR	1366500	Identifier	op2_to		1364754	1					
ANR	1366501	CompoundStatement		326:4:9983:10029	1364754	1					
ANR	1366502	IdentifierDeclStatement	"zend_op * target , * target_end ;"	1578:4:52338:52366	1364754	0	True				
ANR	1366503	IdentifierDecl	* target		1364754	0					
ANR	1366504	IdentifierDeclType	zend_op *		1364754	0					
ANR	1366505	Identifier	target		1364754	1					
ANR	1366506	IdentifierDecl	* target_end		1364754	1					
ANR	1366507	IdentifierDeclType	zend_op *		1364754	0					
ANR	1366508	Identifier	target_end		1364754	1					
ANR	1366509	IdentifierDeclStatement	char * same_t = NULL ;	1579:4:52372:52389	1364754	1	True				
ANR	1366510	IdentifierDecl	* same_t = NULL		1364754	0					
ANR	1366511	IdentifierDeclType	char *		1364754	0					
ANR	1366512	Identifier	same_t		1364754	1					
ANR	1366513	AssignmentExpression	* same_t = NULL		1364754	2		=			
ANR	1366514	Identifier	NULL		1364754	0					
ANR	1366515	Identifier	NULL		1364754	1					
ANR	1366516	IdentifierDeclStatement	zend_code_block * target_block ;	1580:4:52395:52424	1364754	2	True				
ANR	1366517	IdentifierDecl	* target_block		1364754	0					
ANR	1366518	IdentifierDeclType	zend_code_block *		1364754	0					
ANR	1366519	Identifier	target_block		1364754	1					
ANR	1366520	IdentifierDeclStatement	int var_num = op_array -> last_var + op_array -> T ;	1581:4:52430:52476	1364754	3	True				
ANR	1366521	IdentifierDecl	var_num = op_array -> last_var + op_array -> T		1364754	0					
ANR	1366522	IdentifierDeclType	int		1364754	0					
ANR	1366523	Identifier	var_num		1364754	1					
ANR	1366524	AssignmentExpression	var_num = op_array -> last_var + op_array -> T		1364754	2		=			
ANR	1366525	Identifier	var_num		1364754	0					
ANR	1366526	AdditiveExpression	op_array -> last_var + op_array -> T		1364754	1		+			
ANR	1366527	PtrMemberAccess	op_array -> last_var		1364754	0					
ANR	1366528	Identifier	op_array		1364754	0					
ANR	1366529	Identifier	last_var		1364754	1					
ANR	1366530	PtrMemberAccess	op_array -> T		1364754	1					
ANR	1366531	Identifier	op_array		1364754	0					
ANR	1366532	Identifier	T		1364754	1					
ANR	1366533	IfStatement	if ( var_num <= 0 )		1364754	4					
ANR	1366534	Condition	var_num <= 0	1583:8:52487:52498	1364754	0	True				
ANR	1366535	RelationalExpression	var_num <= 0		1364754	0		<=			
ANR	1366536	Identifier	var_num		1364754	0					
ANR	1366537	PrimaryExpression	0		1364754	1					
ANR	1366538	CompoundStatement		328:22:10054:10054	1364754	1					
ANR	1366539	ReturnStatement	return ;	1584:8:52511:52517	1364754	0	True				
ANR	1366540	ExpressionStatement	same_t = cfg -> same_t	1586:4:52529:52549	1364754	5	True				
ANR	1366541	AssignmentExpression	same_t = cfg -> same_t		1364754	0		=			
ANR	1366542	Identifier	same_t		1364754	0					
ANR	1366543	PtrMemberAccess	cfg -> same_t		1364754	1					
ANR	1366544	Identifier	cfg		1364754	0					
ANR	1366545	Identifier	same_t		1364754	1					
ANR	1366546	ExpressionStatement	"memset ( same_t , 0 , var_num )"	1587:4:52555:52581	1364754	6	True				
ANR	1366547	CallExpression	"memset ( same_t , 0 , var_num )"		1364754	0					
ANR	1366548	Callee	memset		1364754	0					
ANR	1366549	Identifier	memset		1364754	0					
ANR	1366550	ArgumentList	same_t		1364754	1					
ANR	1366551	Argument	same_t		1364754	0					
ANR	1366552	Identifier	same_t		1364754	0					
ANR	1366553	Argument	0		1364754	1					
ANR	1366554	PrimaryExpression	0		1364754	0					
ANR	1366555	Argument	var_num		1364754	2					
ANR	1366556	Identifier	var_num		1364754	0					
ANR	1366557	ExpressionStatement	same_t [ VAR_NUM_EX ( last_op -> op1 ) ] |= ZEND_OP1_TYPE ( last_op )	1588:4:52587:52645	1364754	7	True				
ANR	1366558	AssignmentExpression	same_t [ VAR_NUM_EX ( last_op -> op1 ) ] |= ZEND_OP1_TYPE ( last_op )		1364754	0		|=			
ANR	1366559	ArrayIndexing	same_t [ VAR_NUM_EX ( last_op -> op1 ) ]		1364754	0					
ANR	1366560	Identifier	same_t		1364754	0					
ANR	1366561	CallExpression	VAR_NUM_EX ( last_op -> op1 )		1364754	1					
ANR	1366562	Callee	VAR_NUM_EX		1364754	0					
ANR	1366563	Identifier	VAR_NUM_EX		1364754	0					
ANR	1366564	ArgumentList	last_op -> op1		1364754	1					
ANR	1366565	Argument	last_op -> op1		1364754	0					
ANR	1366566	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1366567	Identifier	last_op		1364754	0					
ANR	1366568	Identifier	op1		1364754	1					
ANR	1366569	CallExpression	ZEND_OP1_TYPE ( last_op )		1364754	1					
ANR	1366570	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366571	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366572	ArgumentList	last_op		1364754	1					
ANR	1366573	Argument	last_op		1364754	0					
ANR	1366574	Identifier	last_op		1364754	0					
ANR	1366575	ExpressionStatement	same_t [ VAR_NUM_EX ( last_op -> result ) ] |= ZEND_RESULT_TYPE ( last_op )	1589:4:52651:52715	1364754	8	True				
ANR	1366576	AssignmentExpression	same_t [ VAR_NUM_EX ( last_op -> result ) ] |= ZEND_RESULT_TYPE ( last_op )		1364754	0		|=			
ANR	1366577	ArrayIndexing	same_t [ VAR_NUM_EX ( last_op -> result ) ]		1364754	0					
ANR	1366578	Identifier	same_t		1364754	0					
ANR	1366579	CallExpression	VAR_NUM_EX ( last_op -> result )		1364754	1					
ANR	1366580	Callee	VAR_NUM_EX		1364754	0					
ANR	1366581	Identifier	VAR_NUM_EX		1364754	0					
ANR	1366582	ArgumentList	last_op -> result		1364754	1					
ANR	1366583	Argument	last_op -> result		1364754	0					
ANR	1366584	PtrMemberAccess	last_op -> result		1364754	0					
ANR	1366585	Identifier	last_op		1364754	0					
ANR	1366586	Identifier	result		1364754	1					
ANR	1366587	CallExpression	ZEND_RESULT_TYPE ( last_op )		1364754	1					
ANR	1366588	Callee	ZEND_RESULT_TYPE		1364754	0					
ANR	1366589	Identifier	ZEND_RESULT_TYPE		1364754	0					
ANR	1366590	ArgumentList	last_op		1364754	1					
ANR	1366591	Argument	last_op		1364754	0					
ANR	1366592	Identifier	last_op		1364754	0					
ANR	1366593	ExpressionStatement	target_block = block -> op2_to	1590:4:52721:52749	1364754	9	True				
ANR	1366594	AssignmentExpression	target_block = block -> op2_to		1364754	0		=			
ANR	1366595	Identifier	target_block		1364754	0					
ANR	1366596	PtrMemberAccess	block -> op2_to		1364754	1					
ANR	1366597	Identifier	block		1364754	0					
ANR	1366598	Identifier	op2_to		1364754	1					
ANR	1366599	Label	next_target_ex :	1591:0:52751:52765	1364754	10	True				
ANR	1366600	Identifier	next_target_ex		1364754	0					
ANR	1366601	ExpressionStatement	target = target_block -> start_opline	1592:4:52771:52806	1364754	11	True				
ANR	1366602	AssignmentExpression	target = target_block -> start_opline		1364754	0		=			
ANR	1366603	Identifier	target		1364754	0					
ANR	1366604	PtrMemberAccess	target_block -> start_opline		1364754	1					
ANR	1366605	Identifier	target_block		1364754	0					
ANR	1366606	Identifier	start_opline		1364754	1					
ANR	1366607	ExpressionStatement	target_end = target_block -> start_opline + target_block -> len	1593:4:52812:52871	1364754	12	True				
ANR	1366608	AssignmentExpression	target_end = target_block -> start_opline + target_block -> len		1364754	0		=			
ANR	1366609	Identifier	target_end		1364754	0					
ANR	1366610	AdditiveExpression	target_block -> start_opline + target_block -> len		1364754	1		+			
ANR	1366611	PtrMemberAccess	target_block -> start_opline		1364754	0					
ANR	1366612	Identifier	target_block		1364754	0					
ANR	1366613	Identifier	start_opline		1364754	1					
ANR	1366614	PtrMemberAccess	target_block -> len		1364754	1					
ANR	1366615	Identifier	target_block		1364754	0					
ANR	1366616	Identifier	len		1364754	1					
ANR	1366617	WhileStatement	while ( target < target_end && target -> opcode == ZEND_NOP )		1364754	13					
ANR	1366618	Condition	target < target_end && target -> opcode == ZEND_NOP	1594:11:52884:52932	1364754	0	True				
ANR	1366619	AndExpression	target < target_end && target -> opcode == ZEND_NOP		1364754	0		&&			
ANR	1366620	RelationalExpression	target < target_end		1364754	0		<			
ANR	1366621	Identifier	target		1364754	0					
ANR	1366622	Identifier	target_end		1364754	1					
ANR	1366623	EqualityExpression	target -> opcode == ZEND_NOP		1364754	1		==			
ANR	1366624	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1366625	Identifier	target		1364754	0					
ANR	1366626	Identifier	opcode		1364754	1					
ANR	1366627	Identifier	ZEND_NOP		1364754	1					
ANR	1366628	CompoundStatement		339:62:10488:10488	1364754	1					
ANR	1366629	ExpressionStatement	target ++	1595:5:52942:52950	1364754	0	True				
ANR	1366630	PostIncDecOperationExpression	target ++		1364754	0					
ANR	1366631	Identifier	target		1364754	0					
ANR	1366632	IncDec	++		1364754	1					
ANR	1366633	IfStatement	if ( target == target_end )		1364754	14					
ANR	1366634	Condition	target == target_end	1598:8:53002:53021	1364754	0	True				
ANR	1366635	EqualityExpression	target == target_end		1364754	0		==			
ANR	1366636	Identifier	target		1364754	0					
ANR	1366637	Identifier	target_end		1364754	1					
ANR	1366638	CompoundStatement		343:30:10577:10577	1364754	1					
ANR	1366639	ExpressionStatement	target_block = target_block -> follow_to	1599:5:53031:53069	1364754	0	True				
ANR	1366640	AssignmentExpression	target_block = target_block -> follow_to		1364754	0		=			
ANR	1366641	Identifier	target_block		1364754	0					
ANR	1366642	PtrMemberAccess	target_block -> follow_to		1364754	1					
ANR	1366643	Identifier	target_block		1364754	0					
ANR	1366644	Identifier	follow_to		1364754	1					
ANR	1366645	GotoStatement	goto next_target_ex ;	1600:5:53076:53095	1364754	1	True				
ANR	1366646	Identifier	next_target_ex		1364754	0					
ANR	1366647	ElseStatement	else		1364754	0					
ANR	1366648	IfStatement	if ( target_block -> op2_to && target -> opcode == last_op -> opcode - 3 && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected )		1364754	0					
ANR	1366649	Condition	target_block -> op2_to && target -> opcode == last_op -> opcode - 3 && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected	1601:15:53112:53348	1364754	0	True				
ANR	1366650	AndExpression	target_block -> op2_to && target -> opcode == last_op -> opcode - 3 && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	0		&&			
ANR	1366651	PtrMemberAccess	target_block -> op2_to		1364754	0					
ANR	1366652	Identifier	target_block		1364754	0					
ANR	1366653	Identifier	op2_to		1364754	1					
ANR	1366654	AndExpression	target -> opcode == last_op -> opcode - 3 && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366655	EqualityExpression	target -> opcode == last_op -> opcode - 3		1364754	0		==			
ANR	1366656	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1366657	Identifier	target		1364754	0					
ANR	1366658	Identifier	opcode		1364754	1					
ANR	1366659	AdditiveExpression	last_op -> opcode - 3		1364754	1		-			
ANR	1366660	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366661	Identifier	last_op		1364754	0					
ANR	1366662	Identifier	opcode		1364754	1					
ANR	1366663	PrimaryExpression	3		1364754	1					
ANR	1366664	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366665	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1366666	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1366667	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366668	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366669	ArgumentList	target		1364754	1					
ANR	1366670	Argument	target		1364754	0					
ANR	1366671	Identifier	target		1364754	0					
ANR	1366672	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1366673	Identifier	IS_TMP_VAR		1364754	0					
ANR	1366674	Identifier	IS_CV		1364754	1					
ANR	1366675	AndExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366676	EqualityExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0		1364754	0		!=			
ANR	1366677	BitAndExpression	same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target )		1364754	0		&			
ANR	1366678	ArrayIndexing	same_t [ VAR_NUM_EX ( target -> op1 ) ]		1364754	0					
ANR	1366679	Identifier	same_t		1364754	0					
ANR	1366680	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1366681	Callee	VAR_NUM_EX		1364754	0					
ANR	1366682	Identifier	VAR_NUM_EX		1364754	0					
ANR	1366683	ArgumentList	target -> op1		1364754	1					
ANR	1366684	Argument	target -> op1		1364754	0					
ANR	1366685	PtrMemberAccess	target -> op1		1364754	0					
ANR	1366686	Identifier	target		1364754	0					
ANR	1366687	Identifier	op1		1364754	1					
ANR	1366688	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1366689	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366690	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366691	ArgumentList	target		1364754	1					
ANR	1366692	Argument	target		1364754	0					
ANR	1366693	Identifier	target		1364754	0					
ANR	1366694	PrimaryExpression	0		1364754	1					
ANR	1366695	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1366696	UnaryOperator	!		1364754	0					
ANR	1366697	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1366698	Identifier	target_block		1364754	0					
ANR	1366699	Identifier	protected		1364754	1					
ANR	1366700	CompoundStatement		350:35:10904:10904	1364754	1					
ANR	1366701	ExpressionStatement	"del_source ( block , block -> op2_to )"	1607:5:53431:53463	1364754	0	True				
ANR	1366702	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1366703	Callee	del_source		1364754	0					
ANR	1366704	Identifier	del_source		1364754	0					
ANR	1366705	ArgumentList	block		1364754	1					
ANR	1366706	Argument	block		1364754	0					
ANR	1366707	Identifier	block		1364754	0					
ANR	1366708	Argument	block -> op2_to		1364754	1					
ANR	1366709	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366710	Identifier	block		1364754	0					
ANR	1366711	Identifier	op2_to		1364754	1					
ANR	1366712	ExpressionStatement	block -> op2_to = target_block -> op2_to	1608:5:53470:53506	1364754	1	True				
ANR	1366713	AssignmentExpression	block -> op2_to = target_block -> op2_to		1364754	0		=			
ANR	1366714	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366715	Identifier	block		1364754	0					
ANR	1366716	Identifier	op2_to		1364754	1					
ANR	1366717	PtrMemberAccess	target_block -> op2_to		1364754	1					
ANR	1366718	Identifier	target_block		1364754	0					
ANR	1366719	Identifier	op2_to		1364754	1					
ANR	1366720	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1609:5:53513:53545	1364754	2	True				
ANR	1366721	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1366722	Callee	ADD_SOURCE		1364754	0					
ANR	1366723	Identifier	ADD_SOURCE		1364754	0					
ANR	1366724	ArgumentList	block		1364754	1					
ANR	1366725	Argument	block		1364754	0					
ANR	1366726	Identifier	block		1364754	0					
ANR	1366727	Argument	block -> op2_to		1364754	1					
ANR	1366728	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366729	Identifier	block		1364754	0					
ANR	1366730	Identifier	op2_to		1364754	1					
ANR	1366731	ElseStatement	else		1364754	0					
ANR	1366732	IfStatement	if ( target_block -> op2_to && target -> opcode == INV_EX_COND ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected )		1364754	0					
ANR	1366733	Condition	target_block -> op2_to && target -> opcode == INV_EX_COND ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected	1610:15:53562:53812	1364754	0	True				
ANR	1366734	AndExpression	target_block -> op2_to && target -> opcode == INV_EX_COND ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	0		&&			
ANR	1366735	PtrMemberAccess	target_block -> op2_to		1364754	0					
ANR	1366736	Identifier	target_block		1364754	0					
ANR	1366737	Identifier	op2_to		1364754	1					
ANR	1366738	AndExpression	target -> opcode == INV_EX_COND ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366739	EqualityExpression	target -> opcode == INV_EX_COND ( last_op -> opcode )		1364754	0		==			
ANR	1366740	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1366741	Identifier	target		1364754	0					
ANR	1366742	Identifier	opcode		1364754	1					
ANR	1366743	CallExpression	INV_EX_COND ( last_op -> opcode )		1364754	1					
ANR	1366744	Callee	INV_EX_COND		1364754	0					
ANR	1366745	Identifier	INV_EX_COND		1364754	0					
ANR	1366746	ArgumentList	last_op -> opcode		1364754	1					
ANR	1366747	Argument	last_op -> opcode		1364754	0					
ANR	1366748	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366749	Identifier	last_op		1364754	0					
ANR	1366750	Identifier	opcode		1364754	1					
ANR	1366751	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366752	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1366753	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1366754	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366755	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366756	ArgumentList	target		1364754	1					
ANR	1366757	Argument	target		1364754	0					
ANR	1366758	Identifier	target		1364754	0					
ANR	1366759	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1366760	Identifier	IS_TMP_VAR		1364754	0					
ANR	1366761	Identifier	IS_CV		1364754	1					
ANR	1366762	AndExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366763	EqualityExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0		1364754	0		!=			
ANR	1366764	BitAndExpression	same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target )		1364754	0		&			
ANR	1366765	ArrayIndexing	same_t [ VAR_NUM_EX ( target -> op1 ) ]		1364754	0					
ANR	1366766	Identifier	same_t		1364754	0					
ANR	1366767	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1366768	Callee	VAR_NUM_EX		1364754	0					
ANR	1366769	Identifier	VAR_NUM_EX		1364754	0					
ANR	1366770	ArgumentList	target -> op1		1364754	1					
ANR	1366771	Argument	target -> op1		1364754	0					
ANR	1366772	PtrMemberAccess	target -> op1		1364754	0					
ANR	1366773	Identifier	target		1364754	0					
ANR	1366774	Identifier	op1		1364754	1					
ANR	1366775	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1366776	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366777	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366778	ArgumentList	target		1364754	1					
ANR	1366779	Argument	target		1364754	0					
ANR	1366780	Identifier	target		1364754	0					
ANR	1366781	PrimaryExpression	0		1364754	1					
ANR	1366782	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1366783	UnaryOperator	!		1364754	0					
ANR	1366784	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1366785	Identifier	target_block		1364754	0					
ANR	1366786	Identifier	protected		1364754	1					
ANR	1366787	CompoundStatement		359:35:11368:11368	1364754	1					
ANR	1366788	ExpressionStatement	"del_source ( block , block -> op2_to )"	1616:5:53899:53931	1364754	0	True				
ANR	1366789	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1366790	Callee	del_source		1364754	0					
ANR	1366791	Identifier	del_source		1364754	0					
ANR	1366792	ArgumentList	block		1364754	1					
ANR	1366793	Argument	block		1364754	0					
ANR	1366794	Identifier	block		1364754	0					
ANR	1366795	Argument	block -> op2_to		1364754	1					
ANR	1366796	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366797	Identifier	block		1364754	0					
ANR	1366798	Identifier	op2_to		1364754	1					
ANR	1366799	ExpressionStatement	block -> op2_to = target_block -> follow_to	1617:5:53938:53977	1364754	1	True				
ANR	1366800	AssignmentExpression	block -> op2_to = target_block -> follow_to		1364754	0		=			
ANR	1366801	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366802	Identifier	block		1364754	0					
ANR	1366803	Identifier	op2_to		1364754	1					
ANR	1366804	PtrMemberAccess	target_block -> follow_to		1364754	1					
ANR	1366805	Identifier	target_block		1364754	0					
ANR	1366806	Identifier	follow_to		1364754	1					
ANR	1366807	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1618:5:53984:54016	1364754	2	True				
ANR	1366808	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1366809	Callee	ADD_SOURCE		1364754	0					
ANR	1366810	Identifier	ADD_SOURCE		1364754	0					
ANR	1366811	ArgumentList	block		1364754	1					
ANR	1366812	Argument	block		1364754	0					
ANR	1366813	Identifier	block		1364754	0					
ANR	1366814	Argument	block -> op2_to		1364754	1					
ANR	1366815	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366816	Identifier	block		1364754	0					
ANR	1366817	Identifier	op2_to		1364754	1					
ANR	1366818	ElseStatement	else		1364754	0					
ANR	1366819	IfStatement	if ( target_block -> op2_to && target -> opcode == INV_EX_COND_EX ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected )		1364754	0					
ANR	1366820	Condition	target_block -> op2_to && target -> opcode == INV_EX_COND_EX ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected	1619:15:54033:54367	1364754	0	True				
ANR	1366821	AndExpression	target_block -> op2_to && target -> opcode == INV_EX_COND_EX ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	0		&&			
ANR	1366822	PtrMemberAccess	target_block -> op2_to		1364754	0					
ANR	1366823	Identifier	target_block		1364754	0					
ANR	1366824	Identifier	op2_to		1364754	1					
ANR	1366825	AndExpression	target -> opcode == INV_EX_COND_EX ( last_op -> opcode ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366826	EqualityExpression	target -> opcode == INV_EX_COND_EX ( last_op -> opcode )		1364754	0		==			
ANR	1366827	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1366828	Identifier	target		1364754	0					
ANR	1366829	Identifier	opcode		1364754	1					
ANR	1366830	CallExpression	INV_EX_COND_EX ( last_op -> opcode )		1364754	1					
ANR	1366831	Callee	INV_EX_COND_EX		1364754	0					
ANR	1366832	Identifier	INV_EX_COND_EX		1364754	0					
ANR	1366833	ArgumentList	last_op -> opcode		1364754	1					
ANR	1366834	Argument	last_op -> opcode		1364754	0					
ANR	1366835	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1366836	Identifier	last_op		1364754	0					
ANR	1366837	Identifier	opcode		1364754	1					
ANR	1366838	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366839	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1366840	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1366841	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366842	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366843	ArgumentList	target		1364754	1					
ANR	1366844	Argument	target		1364754	0					
ANR	1366845	Identifier	target		1364754	0					
ANR	1366846	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1366847	Identifier	IS_TMP_VAR		1364754	0					
ANR	1366848	Identifier	IS_CV		1364754	1					
ANR	1366849	AndExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366850	EqualityExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0		1364754	0		!=			
ANR	1366851	BitAndExpression	same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target )		1364754	0		&			
ANR	1366852	ArrayIndexing	same_t [ VAR_NUM_EX ( target -> op1 ) ]		1364754	0					
ANR	1366853	Identifier	same_t		1364754	0					
ANR	1366854	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1366855	Callee	VAR_NUM_EX		1364754	0					
ANR	1366856	Identifier	VAR_NUM_EX		1364754	0					
ANR	1366857	ArgumentList	target -> op1		1364754	1					
ANR	1366858	Argument	target -> op1		1364754	0					
ANR	1366859	PtrMemberAccess	target -> op1		1364754	0					
ANR	1366860	Identifier	target		1364754	0					
ANR	1366861	Identifier	op1		1364754	1					
ANR	1366862	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1366863	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366864	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366865	ArgumentList	target		1364754	1					
ANR	1366866	Argument	target		1364754	0					
ANR	1366867	Identifier	target		1364754	0					
ANR	1366868	PrimaryExpression	0		1364754	1					
ANR	1366869	AndExpression	( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366870	EqualityExpression	( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0		1364754	0		!=			
ANR	1366871	BitAndExpression	same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target )		1364754	0		&			
ANR	1366872	ArrayIndexing	same_t [ VAR_NUM_EX ( target -> result ) ]		1364754	0					
ANR	1366873	Identifier	same_t		1364754	0					
ANR	1366874	CallExpression	VAR_NUM_EX ( target -> result )		1364754	1					
ANR	1366875	Callee	VAR_NUM_EX		1364754	0					
ANR	1366876	Identifier	VAR_NUM_EX		1364754	0					
ANR	1366877	ArgumentList	target -> result		1364754	1					
ANR	1366878	Argument	target -> result		1364754	0					
ANR	1366879	PtrMemberAccess	target -> result		1364754	0					
ANR	1366880	Identifier	target		1364754	0					
ANR	1366881	Identifier	result		1364754	1					
ANR	1366882	CallExpression	ZEND_RESULT_TYPE ( target )		1364754	1					
ANR	1366883	Callee	ZEND_RESULT_TYPE		1364754	0					
ANR	1366884	Identifier	ZEND_RESULT_TYPE		1364754	0					
ANR	1366885	ArgumentList	target		1364754	1					
ANR	1366886	Argument	target		1364754	0					
ANR	1366887	Identifier	target		1364754	0					
ANR	1366888	PrimaryExpression	0		1364754	1					
ANR	1366889	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1366890	UnaryOperator	!		1364754	0					
ANR	1366891	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1366892	Identifier	target_block		1364754	0					
ANR	1366893	Identifier	protected		1364754	1					
ANR	1366894	CompoundStatement		369:35:11923:11923	1364754	1					
ANR	1366895	ExpressionStatement	"del_source ( block , block -> op2_to )"	1626:5:54456:54488	1364754	0	True				
ANR	1366896	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1366897	Callee	del_source		1364754	0					
ANR	1366898	Identifier	del_source		1364754	0					
ANR	1366899	ArgumentList	block		1364754	1					
ANR	1366900	Argument	block		1364754	0					
ANR	1366901	Identifier	block		1364754	0					
ANR	1366902	Argument	block -> op2_to		1364754	1					
ANR	1366903	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366904	Identifier	block		1364754	0					
ANR	1366905	Identifier	op2_to		1364754	1					
ANR	1366906	ExpressionStatement	block -> op2_to = target_block -> follow_to	1627:5:54495:54534	1364754	1	True				
ANR	1366907	AssignmentExpression	block -> op2_to = target_block -> follow_to		1364754	0		=			
ANR	1366908	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366909	Identifier	block		1364754	0					
ANR	1366910	Identifier	op2_to		1364754	1					
ANR	1366911	PtrMemberAccess	target_block -> follow_to		1364754	1					
ANR	1366912	Identifier	target_block		1364754	0					
ANR	1366913	Identifier	follow_to		1364754	1					
ANR	1366914	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1628:5:54541:54573	1364754	2	True				
ANR	1366915	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1366916	Callee	ADD_SOURCE		1364754	0					
ANR	1366917	Identifier	ADD_SOURCE		1364754	0					
ANR	1366918	ArgumentList	block		1364754	1					
ANR	1366919	Argument	block		1364754	0					
ANR	1366920	Identifier	block		1364754	0					
ANR	1366921	Argument	block -> op2_to		1364754	1					
ANR	1366922	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1366923	Identifier	block		1364754	0					
ANR	1366924	Identifier	op2_to		1364754	1					
ANR	1366925	ElseStatement	else		1364754	0					
ANR	1366926	IfStatement	if ( target_block -> op2_to && target -> opcode == last_op -> opcode && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected )		1364754	0					
ANR	1366927	Condition	target_block -> op2_to && target -> opcode == last_op -> opcode && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected	1629:15:54590:54905	1364754	0	True				
ANR	1366928	AndExpression	target_block -> op2_to && target -> opcode == last_op -> opcode && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	0		&&			
ANR	1366929	PtrMemberAccess	target_block -> op2_to		1364754	0					
ANR	1366930	Identifier	target_block		1364754	0					
ANR	1366931	Identifier	op2_to		1364754	1					
ANR	1366932	AndExpression	target -> opcode == last_op -> opcode && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366933	EqualityExpression	target -> opcode == last_op -> opcode		1364754	0		==			
ANR	1366934	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1366935	Identifier	target		1364754	0					
ANR	1366936	Identifier	opcode		1364754	1					
ANR	1366937	PtrMemberAccess	last_op -> opcode		1364754	1					
ANR	1366938	Identifier	last_op		1364754	0					
ANR	1366939	Identifier	opcode		1364754	1					
ANR	1366940	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366941	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1366942	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1366943	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366944	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366945	ArgumentList	target		1364754	1					
ANR	1366946	Argument	target		1364754	0					
ANR	1366947	Identifier	target		1364754	0					
ANR	1366948	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1366949	Identifier	IS_TMP_VAR		1364754	0					
ANR	1366950	Identifier	IS_CV		1364754	1					
ANR	1366951	AndExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366952	EqualityExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0		1364754	0		!=			
ANR	1366953	BitAndExpression	same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target )		1364754	0		&			
ANR	1366954	ArrayIndexing	same_t [ VAR_NUM_EX ( target -> op1 ) ]		1364754	0					
ANR	1366955	Identifier	same_t		1364754	0					
ANR	1366956	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1366957	Callee	VAR_NUM_EX		1364754	0					
ANR	1366958	Identifier	VAR_NUM_EX		1364754	0					
ANR	1366959	ArgumentList	target -> op1		1364754	1					
ANR	1366960	Argument	target -> op1		1364754	0					
ANR	1366961	PtrMemberAccess	target -> op1		1364754	0					
ANR	1366962	Identifier	target		1364754	0					
ANR	1366963	Identifier	op1		1364754	1					
ANR	1366964	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1366965	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1366966	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1366967	ArgumentList	target		1364754	1					
ANR	1366968	Argument	target		1364754	0					
ANR	1366969	Identifier	target		1364754	0					
ANR	1366970	PrimaryExpression	0		1364754	1					
ANR	1366971	AndExpression	( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1366972	EqualityExpression	( same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target ) ) != 0		1364754	0		!=			
ANR	1366973	BitAndExpression	same_t [ VAR_NUM_EX ( target -> result ) ] & ZEND_RESULT_TYPE ( target )		1364754	0		&			
ANR	1366974	ArrayIndexing	same_t [ VAR_NUM_EX ( target -> result ) ]		1364754	0					
ANR	1366975	Identifier	same_t		1364754	0					
ANR	1366976	CallExpression	VAR_NUM_EX ( target -> result )		1364754	1					
ANR	1366977	Callee	VAR_NUM_EX		1364754	0					
ANR	1366978	Identifier	VAR_NUM_EX		1364754	0					
ANR	1366979	ArgumentList	target -> result		1364754	1					
ANR	1366980	Argument	target -> result		1364754	0					
ANR	1366981	PtrMemberAccess	target -> result		1364754	0					
ANR	1366982	Identifier	target		1364754	0					
ANR	1366983	Identifier	result		1364754	1					
ANR	1366984	CallExpression	ZEND_RESULT_TYPE ( target )		1364754	1					
ANR	1366985	Callee	ZEND_RESULT_TYPE		1364754	0					
ANR	1366986	Identifier	ZEND_RESULT_TYPE		1364754	0					
ANR	1366987	ArgumentList	target		1364754	1					
ANR	1366988	Argument	target		1364754	0					
ANR	1366989	Identifier	target		1364754	0					
ANR	1366990	PrimaryExpression	0		1364754	1					
ANR	1366991	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1366992	UnaryOperator	!		1364754	0					
ANR	1366993	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1366994	Identifier	target_block		1364754	0					
ANR	1366995	Identifier	protected		1364754	1					
ANR	1366996	CompoundStatement		379:35:12461:12461	1364754	1					
ANR	1366997	ExpressionStatement	"del_source ( block , block -> op2_to )"	1636:5:54992:55024	1364754	0	True				
ANR	1366998	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1366999	Callee	del_source		1364754	0					
ANR	1367000	Identifier	del_source		1364754	0					
ANR	1367001	ArgumentList	block		1364754	1					
ANR	1367002	Argument	block		1364754	0					
ANR	1367003	Identifier	block		1364754	0					
ANR	1367004	Argument	block -> op2_to		1364754	1					
ANR	1367005	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367006	Identifier	block		1364754	0					
ANR	1367007	Identifier	op2_to		1364754	1					
ANR	1367008	ExpressionStatement	block -> op2_to = target_block -> op2_to	1637:5:55031:55067	1364754	1	True				
ANR	1367009	AssignmentExpression	block -> op2_to = target_block -> op2_to		1364754	0		=			
ANR	1367010	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367011	Identifier	block		1364754	0					
ANR	1367012	Identifier	op2_to		1364754	1					
ANR	1367013	PtrMemberAccess	target_block -> op2_to		1364754	1					
ANR	1367014	Identifier	target_block		1364754	0					
ANR	1367015	Identifier	op2_to		1364754	1					
ANR	1367016	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1638:5:55074:55106	1364754	2	True				
ANR	1367017	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1367018	Callee	ADD_SOURCE		1364754	0					
ANR	1367019	Identifier	ADD_SOURCE		1364754	0					
ANR	1367020	ArgumentList	block		1364754	1					
ANR	1367021	Argument	block		1364754	0					
ANR	1367022	Identifier	block		1364754	0					
ANR	1367023	Argument	block -> op2_to		1364754	1					
ANR	1367024	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367025	Identifier	block		1364754	0					
ANR	1367026	Identifier	op2_to		1364754	1					
ANR	1367027	ElseStatement	else		1364754	0					
ANR	1367028	IfStatement	if ( target_block -> op1_to && target -> opcode == ZEND_JMP && ! target_block -> protected )		1364754	0					
ANR	1367029	Condition	target_block -> op1_to && target -> opcode == ZEND_JMP && ! target_block -> protected	1639:15:55123:55218	1364754	0	True				
ANR	1367030	AndExpression	target_block -> op1_to && target -> opcode == ZEND_JMP && ! target_block -> protected		1364754	0		&&			
ANR	1367031	PtrMemberAccess	target_block -> op1_to		1364754	0					
ANR	1367032	Identifier	target_block		1364754	0					
ANR	1367033	Identifier	op1_to		1364754	1					
ANR	1367034	AndExpression	target -> opcode == ZEND_JMP && ! target_block -> protected		1364754	1		&&			
ANR	1367035	EqualityExpression	target -> opcode == ZEND_JMP		1364754	0		==			
ANR	1367036	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1367037	Identifier	target		1364754	0					
ANR	1367038	Identifier	opcode		1364754	1					
ANR	1367039	Identifier	ZEND_JMP		1364754	1					
ANR	1367040	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1367041	UnaryOperator	!		1364754	0					
ANR	1367042	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1367043	Identifier	target_block		1364754	0					
ANR	1367044	Identifier	protected		1364754	1					
ANR	1367045	CompoundStatement		386:35:12774:12774	1364754	1					
ANR	1367046	ExpressionStatement	"del_source ( block , block -> op2_to )"	1643:5:55288:55320	1364754	0	True				
ANR	1367047	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1367048	Callee	del_source		1364754	0					
ANR	1367049	Identifier	del_source		1364754	0					
ANR	1367050	ArgumentList	block		1364754	1					
ANR	1367051	Argument	block		1364754	0					
ANR	1367052	Identifier	block		1364754	0					
ANR	1367053	Argument	block -> op2_to		1364754	1					
ANR	1367054	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367055	Identifier	block		1364754	0					
ANR	1367056	Identifier	op2_to		1364754	1					
ANR	1367057	ExpressionStatement	block -> op2_to = target_block -> op1_to	1644:5:55327:55363	1364754	1	True				
ANR	1367058	AssignmentExpression	block -> op2_to = target_block -> op1_to		1364754	0		=			
ANR	1367059	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367060	Identifier	block		1364754	0					
ANR	1367061	Identifier	op2_to		1364754	1					
ANR	1367062	PtrMemberAccess	target_block -> op1_to		1364754	1					
ANR	1367063	Identifier	target_block		1364754	0					
ANR	1367064	Identifier	op1_to		1364754	1					
ANR	1367065	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1645:5:55370:55402	1364754	2	True				
ANR	1367066	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1367067	Callee	ADD_SOURCE		1364754	0					
ANR	1367068	Identifier	ADD_SOURCE		1364754	0					
ANR	1367069	ArgumentList	block		1364754	1					
ANR	1367070	Argument	block		1364754	0					
ANR	1367071	Identifier	block		1364754	0					
ANR	1367072	Argument	block -> op2_to		1364754	1					
ANR	1367073	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367074	Identifier	block		1364754	0					
ANR	1367075	Identifier	op2_to		1364754	1					
ANR	1367076	ElseStatement	else		1364754	0					
ANR	1367077	IfStatement	if ( target_block -> op2_to && target_block -> ext_to && target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected )		1364754	0					
ANR	1367078	Condition	target_block -> op2_to && target_block -> ext_to && target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected	1646:15:55419:55682	1364754	0	True				
ANR	1367079	AndExpression	target_block -> op2_to && target_block -> ext_to && target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	0		&&			
ANR	1367080	PtrMemberAccess	target_block -> op2_to		1364754	0					
ANR	1367081	Identifier	target_block		1364754	0					
ANR	1367082	Identifier	op2_to		1364754	1					
ANR	1367083	AndExpression	target_block -> ext_to && target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1367084	PtrMemberAccess	target_block -> ext_to		1364754	0					
ANR	1367085	Identifier	target_block		1364754	0					
ANR	1367086	Identifier	ext_to		1364754	1					
ANR	1367087	AndExpression	target -> opcode == ZEND_JMPZNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1367088	EqualityExpression	target -> opcode == ZEND_JMPZNZ		1364754	0		==			
ANR	1367089	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1367090	Identifier	target		1364754	0					
ANR	1367091	Identifier	opcode		1364754	1					
ANR	1367092	Identifier	ZEND_JMPZNZ		1364754	1					
ANR	1367093	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && ( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1367094	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1367095	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1367096	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1367097	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1367098	ArgumentList	target		1364754	1					
ANR	1367099	Argument	target		1364754	0					
ANR	1367100	Identifier	target		1364754	0					
ANR	1367101	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1367102	Identifier	IS_TMP_VAR		1364754	0					
ANR	1367103	Identifier	IS_CV		1364754	1					
ANR	1367104	AndExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0 && ! target_block -> protected		1364754	1		&&			
ANR	1367105	EqualityExpression	( same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target ) ) != 0		1364754	0		!=			
ANR	1367106	BitAndExpression	same_t [ VAR_NUM_EX ( target -> op1 ) ] & ZEND_OP1_TYPE ( target )		1364754	0		&			
ANR	1367107	ArrayIndexing	same_t [ VAR_NUM_EX ( target -> op1 ) ]		1364754	0					
ANR	1367108	Identifier	same_t		1364754	0					
ANR	1367109	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1367110	Callee	VAR_NUM_EX		1364754	0					
ANR	1367111	Identifier	VAR_NUM_EX		1364754	0					
ANR	1367112	ArgumentList	target -> op1		1364754	1					
ANR	1367113	Argument	target -> op1		1364754	0					
ANR	1367114	PtrMemberAccess	target -> op1		1364754	0					
ANR	1367115	Identifier	target		1364754	0					
ANR	1367116	Identifier	op1		1364754	1					
ANR	1367117	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1367118	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1367119	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1367120	ArgumentList	target		1364754	1					
ANR	1367121	Argument	target		1364754	0					
ANR	1367122	Identifier	target		1364754	0					
ANR	1367123	PrimaryExpression	0		1364754	1					
ANR	1367124	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1367125	UnaryOperator	!		1364754	0					
ANR	1367126	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1367127	Identifier	target_block		1364754	0					
ANR	1367128	Identifier	protected		1364754	1					
ANR	1367129	CompoundStatement		396:35:13238:13238	1364754	1					
ANR	1367130	ExpressionStatement	"del_source ( block , block -> op2_to )"	1653:5:55769:55801	1364754	0	True				
ANR	1367131	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1367132	Callee	del_source		1364754	0					
ANR	1367133	Identifier	del_source		1364754	0					
ANR	1367134	ArgumentList	block		1364754	1					
ANR	1367135	Argument	block		1364754	0					
ANR	1367136	Identifier	block		1364754	0					
ANR	1367137	Argument	block -> op2_to		1364754	1					
ANR	1367138	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367139	Identifier	block		1364754	0					
ANR	1367140	Identifier	op2_to		1364754	1					
ANR	1367141	IfStatement	if ( last_op -> opcode == ZEND_JMPZ_EX )		1364754	1					
ANR	1367142	Condition	last_op -> opcode == ZEND_JMPZ_EX	1654:9:55812:55842	1364754	0	True				
ANR	1367143	EqualityExpression	last_op -> opcode == ZEND_JMPZ_EX		1364754	0		==			
ANR	1367144	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1367145	Identifier	last_op		1364754	0					
ANR	1367146	Identifier	opcode		1364754	1					
ANR	1367147	Identifier	ZEND_JMPZ_EX		1364754	1					
ANR	1367148	CompoundStatement		399:42:13398:13398	1364754	1					
ANR	1367149	ExpressionStatement	block -> op2_to = target_block -> op2_to	1655:6:55853:55889	1364754	0	True				
ANR	1367150	AssignmentExpression	block -> op2_to = target_block -> op2_to		1364754	0		=			
ANR	1367151	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367152	Identifier	block		1364754	0					
ANR	1367153	Identifier	op2_to		1364754	1					
ANR	1367154	PtrMemberAccess	target_block -> op2_to		1364754	1					
ANR	1367155	Identifier	target_block		1364754	0					
ANR	1367156	Identifier	op2_to		1364754	1					
ANR	1367157	ElseStatement	else		1364754	0					
ANR	1367158	CompoundStatement		401:12:13456:13456	1364754	0					
ANR	1367159	ExpressionStatement	block -> op2_to = target_block -> ext_to	1657:6:55911:55947	1364754	0	True				
ANR	1367160	AssignmentExpression	block -> op2_to = target_block -> ext_to		1364754	0		=			
ANR	1367161	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367162	Identifier	block		1364754	0					
ANR	1367163	Identifier	op2_to		1364754	1					
ANR	1367164	PtrMemberAccess	target_block -> ext_to		1364754	1					
ANR	1367165	Identifier	target_block		1364754	0					
ANR	1367166	Identifier	ext_to		1364754	1					
ANR	1367167	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1659:5:55961:55993	1364754	2	True				
ANR	1367168	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1367169	Callee	ADD_SOURCE		1364754	0					
ANR	1367170	Identifier	ADD_SOURCE		1364754	0					
ANR	1367171	ArgumentList	block		1364754	1					
ANR	1367172	Argument	block		1364754	0					
ANR	1367173	Identifier	block		1364754	0					
ANR	1367174	Argument	block -> op2_to		1364754	1					
ANR	1367175	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367176	Identifier	block		1364754	0					
ANR	1367177	Identifier	op2_to		1364754	1					
ANR	1367178	BreakStatement	break ;	1662:3:56009:56014	1364754	14	True				
ANR	1367179	Label	case ZEND_JMPZNZ :	1664:2:56019:56035	1364754	15	True				
ANR	1367180	Identifier	ZEND_JMPZNZ		1364754	0					
ANR	1367181	CompoundStatement		410:3:13595:13630	1364754	16					
ANR	1367182	IdentifierDeclStatement	zend_code_block * next = block -> next ;	1665:3:56042:56077	1364754	0	True				
ANR	1367183	IdentifierDecl	* next = block -> next		1364754	0					
ANR	1367184	IdentifierDeclType	zend_code_block *		1364754	0					
ANR	1367185	Identifier	next		1364754	1					
ANR	1367186	AssignmentExpression	* next = block -> next		1364754	2		=			
ANR	1367187	Identifier	next		1364754	0					
ANR	1367188	PtrMemberAccess	block -> next		1364754	1					
ANR	1367189	Identifier	block		1364754	0					
ANR	1367190	Identifier	next		1364754	1					
ANR	1367191	WhileStatement	while ( next && ! next -> access )		1364754	1					
ANR	1367192	Condition	next && ! next -> access	1667:10:56090:56110	1364754	0	True				
ANR	1367193	AndExpression	next && ! next -> access		1364754	0		&&			
ANR	1367194	Identifier	next		1364754	0					
ANR	1367195	UnaryOperationExpression	! next -> access		1364754	1					
ANR	1367196	UnaryOperator	!		1364754	0					
ANR	1367197	PtrMemberAccess	next -> access		1364754	1					
ANR	1367198	Identifier	next		1364754	0					
ANR	1367199	Identifier	access		1364754	1					
ANR	1367200	CompoundStatement		412:33:13666:13666	1364754	1					
ANR	1367201	ExpressionStatement	next = next -> next	1669:4:56153:56170	1364754	0	True				
ANR	1367202	AssignmentExpression	next = next -> next		1364754	0		=			
ANR	1367203	Identifier	next		1364754	0					
ANR	1367204	PtrMemberAccess	next -> next		1364754	1					
ANR	1367205	Identifier	next		1364754	0					
ANR	1367206	Identifier	next		1364754	1					
ANR	1367207	IfStatement	if ( ZEND_OP1_TYPE ( last_op ) == IS_CONST )		1364754	2					
ANR	1367208	Condition	ZEND_OP1_TYPE ( last_op ) == IS_CONST	1672:7:56185:56218	1364754	0	True				
ANR	1367209	EqualityExpression	ZEND_OP1_TYPE ( last_op ) == IS_CONST		1364754	0		==			
ANR	1367210	CallExpression	ZEND_OP1_TYPE ( last_op )		1364754	0					
ANR	1367211	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1367212	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1367213	ArgumentList	last_op		1364754	1					
ANR	1367214	Argument	last_op		1364754	0					
ANR	1367215	Identifier	last_op		1364754	0					
ANR	1367216	Identifier	IS_CONST		1364754	1					
ANR	1367217	CompoundStatement		417:43:13774:13774	1364754	1					
ANR	1367218	IfStatement	if ( ! zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) ) )		1364754	0					
ANR	1367219	Condition	! zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) )	1673:8:56231:56271	1364754	0	True				
ANR	1367220	UnaryOperationExpression	! zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	0					
ANR	1367221	UnaryOperator	!		1364754	0					
ANR	1367222	CallExpression	zend_is_true ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	1					
ANR	1367223	Callee	zend_is_true		1364754	0					
ANR	1367224	Identifier	zend_is_true		1364754	0					
ANR	1367225	ArgumentList	& ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1367226	Argument	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1367227	UnaryOperationExpression	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1367228	UnaryOperator	&		1364754	0					
ANR	1367229	CallExpression	ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1367230	Callee	ZEND_OP1_LITERAL		1364754	0					
ANR	1367231	Identifier	ZEND_OP1_LITERAL		1364754	0					
ANR	1367232	ArgumentList	last_op		1364754	1					
ANR	1367233	Argument	last_op		1364754	0					
ANR	1367234	Identifier	last_op		1364754	0					
ANR	1367235	CompoundStatement		420:5:13876:13898	1364754	1					
ANR	1367236	IdentifierDeclStatement	zend_code_block * todel ;	1675:5:56323:56345	1364754	0	True				
ANR	1367237	IdentifierDecl	* todel		1364754	0					
ANR	1367238	IdentifierDeclType	zend_code_block *		1364754	0					
ANR	1367239	Identifier	todel		1364754	1					
ANR	1367240	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( last_op ) )	1677:5:56353:56393	1364754	1	True				
ANR	1367241	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	0					
ANR	1367242	Callee	literal_dtor		1364754	0					
ANR	1367243	Identifier	literal_dtor		1364754	0					
ANR	1367244	ArgumentList	& ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1367245	Argument	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1367246	UnaryOperationExpression	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1367247	UnaryOperator	&		1364754	0					
ANR	1367248	CallExpression	ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1367249	Callee	ZEND_OP1_LITERAL		1364754	0					
ANR	1367250	Identifier	ZEND_OP1_LITERAL		1364754	0					
ANR	1367251	ArgumentList	last_op		1364754	1					
ANR	1367252	Argument	last_op		1364754	0					
ANR	1367253	Identifier	last_op		1364754	0					
ANR	1367254	ExpressionStatement	last_op -> opcode = ZEND_JMP	1678:5:56400:56426	1364754	2	True				
ANR	1367255	AssignmentExpression	last_op -> opcode = ZEND_JMP		1364754	0		=			
ANR	1367256	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1367257	Identifier	last_op		1364754	0					
ANR	1367258	Identifier	opcode		1364754	1					
ANR	1367259	Identifier	ZEND_JMP		1364754	1					
ANR	1367260	ExpressionStatement	SET_UNUSED ( last_op -> op1 )	1679:5:56433:56457	1364754	3	True				
ANR	1367261	CallExpression	SET_UNUSED ( last_op -> op1 )		1364754	0					
ANR	1367262	Callee	SET_UNUSED		1364754	0					
ANR	1367263	Identifier	SET_UNUSED		1364754	0					
ANR	1367264	ArgumentList	last_op -> op1		1364754	1					
ANR	1367265	Argument	last_op -> op1		1364754	0					
ANR	1367266	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1367267	Identifier	last_op		1364754	0					
ANR	1367268	Identifier	op1		1364754	1					
ANR	1367269	ExpressionStatement	SET_UNUSED ( last_op -> op2 )	1680:5:56464:56488	1364754	4	True				
ANR	1367270	CallExpression	SET_UNUSED ( last_op -> op2 )		1364754	0					
ANR	1367271	Callee	SET_UNUSED		1364754	0					
ANR	1367272	Identifier	SET_UNUSED		1364754	0					
ANR	1367273	ArgumentList	last_op -> op2		1364754	1					
ANR	1367274	Argument	last_op -> op2		1364754	0					
ANR	1367275	PtrMemberAccess	last_op -> op2		1364754	0					
ANR	1367276	Identifier	last_op		1364754	0					
ANR	1367277	Identifier	op2		1364754	1					
ANR	1367278	ExpressionStatement	block -> op1_to = block -> op2_to	1681:5:56495:56524	1364754	5	True				
ANR	1367279	AssignmentExpression	block -> op1_to = block -> op2_to		1364754	0		=			
ANR	1367280	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1367281	Identifier	block		1364754	0					
ANR	1367282	Identifier	op1_to		1364754	1					
ANR	1367283	PtrMemberAccess	block -> op2_to		1364754	1					
ANR	1367284	Identifier	block		1364754	0					
ANR	1367285	Identifier	op2_to		1364754	1					
ANR	1367286	ExpressionStatement	todel = block -> ext_to	1682:5:56531:56552	1364754	6	True				
ANR	1367287	AssignmentExpression	todel = block -> ext_to		1364754	0		=			
ANR	1367288	Identifier	todel		1364754	0					
ANR	1367289	PtrMemberAccess	block -> ext_to		1364754	1					
ANR	1367290	Identifier	block		1364754	0					
ANR	1367291	Identifier	ext_to		1364754	1					
ANR	1367292	ExpressionStatement	block -> op2_to = NULL	1683:5:56559:56579	1364754	7	True				
ANR	1367293	AssignmentExpression	block -> op2_to = NULL		1364754	0		=			
ANR	1367294	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367295	Identifier	block		1364754	0					
ANR	1367296	Identifier	op2_to		1364754	1					
ANR	1367297	Identifier	NULL		1364754	1					
ANR	1367298	ExpressionStatement	block -> ext_to = NULL	1684:5:56586:56606	1364754	8	True				
ANR	1367299	AssignmentExpression	block -> ext_to = NULL		1364754	0		=			
ANR	1367300	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1367301	Identifier	block		1364754	0					
ANR	1367302	Identifier	ext_to		1364754	1					
ANR	1367303	Identifier	NULL		1364754	1					
ANR	1367304	ExpressionStatement	"del_source ( block , todel )"	1685:5:56613:56637	1364754	9	True				
ANR	1367305	CallExpression	"del_source ( block , todel )"		1364754	0					
ANR	1367306	Callee	del_source		1364754	0					
ANR	1367307	Identifier	del_source		1364754	0					
ANR	1367308	ArgumentList	block		1364754	1					
ANR	1367309	Argument	block		1364754	0					
ANR	1367310	Identifier	block		1364754	0					
ANR	1367311	Argument	todel		1364754	1					
ANR	1367312	Identifier	todel		1364754	0					
ANR	1367313	ElseStatement	else		1364754	0					
ANR	1367314	CompoundStatement		433:5:14251:14273	1364754	0					
ANR	1367315	IdentifierDeclStatement	zend_code_block * todel ;	1688:5:56698:56720	1364754	0	True				
ANR	1367316	IdentifierDecl	* todel		1364754	0					
ANR	1367317	IdentifierDeclType	zend_code_block *		1364754	0					
ANR	1367318	Identifier	todel		1364754	1					
ANR	1367319	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( last_op ) )	1690:5:56728:56768	1364754	1	True				
ANR	1367320	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( last_op ) )		1364754	0					
ANR	1367321	Callee	literal_dtor		1364754	0					
ANR	1367322	Identifier	literal_dtor		1364754	0					
ANR	1367323	ArgumentList	& ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1367324	Argument	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1367325	UnaryOperationExpression	& ZEND_OP1_LITERAL ( last_op )		1364754	0					
ANR	1367326	UnaryOperator	&		1364754	0					
ANR	1367327	CallExpression	ZEND_OP1_LITERAL ( last_op )		1364754	1					
ANR	1367328	Callee	ZEND_OP1_LITERAL		1364754	0					
ANR	1367329	Identifier	ZEND_OP1_LITERAL		1364754	0					
ANR	1367330	ArgumentList	last_op		1364754	1					
ANR	1367331	Argument	last_op		1364754	0					
ANR	1367332	Identifier	last_op		1364754	0					
ANR	1367333	ExpressionStatement	last_op -> opcode = ZEND_JMP	1691:5:56775:56801	1364754	2	True				
ANR	1367334	AssignmentExpression	last_op -> opcode = ZEND_JMP		1364754	0		=			
ANR	1367335	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1367336	Identifier	last_op		1364754	0					
ANR	1367337	Identifier	opcode		1364754	1					
ANR	1367338	Identifier	ZEND_JMP		1364754	1					
ANR	1367339	ExpressionStatement	SET_UNUSED ( last_op -> op1 )	1692:5:56808:56832	1364754	3	True				
ANR	1367340	CallExpression	SET_UNUSED ( last_op -> op1 )		1364754	0					
ANR	1367341	Callee	SET_UNUSED		1364754	0					
ANR	1367342	Identifier	SET_UNUSED		1364754	0					
ANR	1367343	ArgumentList	last_op -> op1		1364754	1					
ANR	1367344	Argument	last_op -> op1		1364754	0					
ANR	1367345	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1367346	Identifier	last_op		1364754	0					
ANR	1367347	Identifier	op1		1364754	1					
ANR	1367348	ExpressionStatement	SET_UNUSED ( last_op -> op2 )	1693:5:56839:56863	1364754	4	True				
ANR	1367349	CallExpression	SET_UNUSED ( last_op -> op2 )		1364754	0					
ANR	1367350	Callee	SET_UNUSED		1364754	0					
ANR	1367351	Identifier	SET_UNUSED		1364754	0					
ANR	1367352	ArgumentList	last_op -> op2		1364754	1					
ANR	1367353	Argument	last_op -> op2		1364754	0					
ANR	1367354	PtrMemberAccess	last_op -> op2		1364754	0					
ANR	1367355	Identifier	last_op		1364754	0					
ANR	1367356	Identifier	op2		1364754	1					
ANR	1367357	ExpressionStatement	block -> op1_to = block -> ext_to	1694:5:56870:56899	1364754	5	True				
ANR	1367358	AssignmentExpression	block -> op1_to = block -> ext_to		1364754	0		=			
ANR	1367359	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1367360	Identifier	block		1364754	0					
ANR	1367361	Identifier	op1_to		1364754	1					
ANR	1367362	PtrMemberAccess	block -> ext_to		1364754	1					
ANR	1367363	Identifier	block		1364754	0					
ANR	1367364	Identifier	ext_to		1364754	1					
ANR	1367365	ExpressionStatement	todel = block -> op2_to	1695:5:56906:56928	1364754	6	True				
ANR	1367366	AssignmentExpression	todel = block -> op2_to		1364754	0		=			
ANR	1367367	Identifier	todel		1364754	0					
ANR	1367368	PtrMemberAccess	block -> op2_to		1364754	1					
ANR	1367369	Identifier	block		1364754	0					
ANR	1367370	Identifier	op2_to		1364754	1					
ANR	1367371	ExpressionStatement	block -> op2_to = NULL	1696:5:56935:56955	1364754	7	True				
ANR	1367372	AssignmentExpression	block -> op2_to = NULL		1364754	0		=			
ANR	1367373	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367374	Identifier	block		1364754	0					
ANR	1367375	Identifier	op2_to		1364754	1					
ANR	1367376	Identifier	NULL		1364754	1					
ANR	1367377	ExpressionStatement	block -> ext_to = NULL	1697:5:56962:56982	1364754	8	True				
ANR	1367378	AssignmentExpression	block -> ext_to = NULL		1364754	0		=			
ANR	1367379	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1367380	Identifier	block		1364754	0					
ANR	1367381	Identifier	ext_to		1364754	1					
ANR	1367382	Identifier	NULL		1364754	1					
ANR	1367383	ExpressionStatement	"del_source ( block , todel )"	1698:5:56989:57013	1364754	9	True				
ANR	1367384	CallExpression	"del_source ( block , todel )"		1364754	0					
ANR	1367385	Callee	del_source		1364754	0					
ANR	1367386	Identifier	del_source		1364754	0					
ANR	1367387	ArgumentList	block		1364754	1					
ANR	1367388	Argument	block		1364754	0					
ANR	1367389	Identifier	block		1364754	0					
ANR	1367390	Argument	todel		1364754	1					
ANR	1367391	Identifier	todel		1364754	0					
ANR	1367392	ElseStatement	else		1364754	0					
ANR	1367393	IfStatement	if ( block -> op2_to == block -> ext_to )		1364754	0					
ANR	1367394	Condition	block -> op2_to == block -> ext_to	1700:14:57035:57064	1364754	0	True				
ANR	1367395	EqualityExpression	block -> op2_to == block -> ext_to		1364754	0		==			
ANR	1367396	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367397	Identifier	block		1364754	0					
ANR	1367398	Identifier	op2_to		1364754	1					
ANR	1367399	PtrMemberAccess	block -> ext_to		1364754	1					
ANR	1367400	Identifier	block		1364754	0					
ANR	1367401	Identifier	ext_to		1364754	1					
ANR	1367402	CompoundStatement		445:46:14620:14620	1364754	1					
ANR	1367403	IfStatement	if ( ! ( last_op -> op1_type & ( IS_VAR | IS_TMP_VAR ) ) )		1364754	0					
ANR	1367404	Condition	! ( last_op -> op1_type & ( IS_VAR | IS_TMP_VAR ) )	1702:8:57121:57162	1364754	0	True				
ANR	1367405	UnaryOperationExpression	! ( last_op -> op1_type & ( IS_VAR | IS_TMP_VAR ) )		1364754	0					
ANR	1367406	UnaryOperator	!		1364754	0					
ANR	1367407	BitAndExpression	last_op -> op1_type & ( IS_VAR | IS_TMP_VAR )		1364754	1		&			
ANR	1367408	PtrMemberAccess	last_op -> op1_type		1364754	0					
ANR	1367409	Identifier	last_op		1364754	0					
ANR	1367410	Identifier	op1_type		1364754	1					
ANR	1367411	InclusiveOrExpression	IS_VAR | IS_TMP_VAR		1364754	1		|			
ANR	1367412	Identifier	IS_VAR		1364754	0					
ANR	1367413	Identifier	IS_TMP_VAR		1364754	1					
ANR	1367414	CompoundStatement		447:52:14718:14718	1364754	1					
ANR	1367415	ExpressionStatement	last_op -> opcode = ZEND_JMP	1704:5:57207:57233	1364754	0	True				
ANR	1367416	AssignmentExpression	last_op -> opcode = ZEND_JMP		1364754	0		=			
ANR	1367417	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1367418	Identifier	last_op		1364754	0					
ANR	1367419	Identifier	opcode		1364754	1					
ANR	1367420	Identifier	ZEND_JMP		1364754	1					
ANR	1367421	ExpressionStatement	SET_UNUSED ( last_op -> op1 )	1705:5:57240:57264	1364754	1	True				
ANR	1367422	CallExpression	SET_UNUSED ( last_op -> op1 )		1364754	0					
ANR	1367423	Callee	SET_UNUSED		1364754	0					
ANR	1367424	Identifier	SET_UNUSED		1364754	0					
ANR	1367425	ArgumentList	last_op -> op1		1364754	1					
ANR	1367426	Argument	last_op -> op1		1364754	0					
ANR	1367427	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1367428	Identifier	last_op		1364754	0					
ANR	1367429	Identifier	op1		1364754	1					
ANR	1367430	ExpressionStatement	SET_UNUSED ( last_op -> op2 )	1706:5:57271:57295	1364754	2	True				
ANR	1367431	CallExpression	SET_UNUSED ( last_op -> op2 )		1364754	0					
ANR	1367432	Callee	SET_UNUSED		1364754	0					
ANR	1367433	Identifier	SET_UNUSED		1364754	0					
ANR	1367434	ArgumentList	last_op -> op2		1364754	1					
ANR	1367435	Argument	last_op -> op2		1364754	0					
ANR	1367436	PtrMemberAccess	last_op -> op2		1364754	0					
ANR	1367437	Identifier	last_op		1364754	0					
ANR	1367438	Identifier	op2		1364754	1					
ANR	1367439	ExpressionStatement	block -> op1_to = block -> op2_to	1707:5:57302:57331	1364754	3	True				
ANR	1367440	AssignmentExpression	block -> op1_to = block -> op2_to		1364754	0		=			
ANR	1367441	PtrMemberAccess	block -> op1_to		1364754	0					
ANR	1367442	Identifier	block		1364754	0					
ANR	1367443	Identifier	op1_to		1364754	1					
ANR	1367444	PtrMemberAccess	block -> op2_to		1364754	1					
ANR	1367445	Identifier	block		1364754	0					
ANR	1367446	Identifier	op2_to		1364754	1					
ANR	1367447	ExpressionStatement	block -> op2_to = NULL	1708:5:57338:57358	1364754	4	True				
ANR	1367448	AssignmentExpression	block -> op2_to = NULL		1364754	0		=			
ANR	1367449	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367450	Identifier	block		1364754	0					
ANR	1367451	Identifier	op2_to		1364754	1					
ANR	1367452	Identifier	NULL		1364754	1					
ANR	1367453	ExpressionStatement	block -> ext_to = NULL	1709:5:57365:57385	1364754	5	True				
ANR	1367454	AssignmentExpression	block -> ext_to = NULL		1364754	0		=			
ANR	1367455	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1367456	Identifier	block		1364754	0					
ANR	1367457	Identifier	ext_to		1364754	1					
ANR	1367458	Identifier	NULL		1364754	1					
ANR	1367459	ElseStatement	else		1364754	0					
ANR	1367460	IfStatement	if ( block -> op2_to == next )		1364754	0					
ANR	1367461	Condition	block -> op2_to == next	1711:14:57407:57427	1364754	0	True				
ANR	1367462	EqualityExpression	block -> op2_to == next		1364754	0		==			
ANR	1367463	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367464	Identifier	block		1364754	0					
ANR	1367465	Identifier	op2_to		1364754	1					
ANR	1367466	Identifier	next		1364754	1					
ANR	1367467	CompoundStatement		456:37:14983:14983	1364754	1					
ANR	1367468	ExpressionStatement	last_op -> opcode = ZEND_JMPNZ	1714:4:57551:57579	1364754	0	True				
ANR	1367469	AssignmentExpression	last_op -> opcode = ZEND_JMPNZ		1364754	0		=			
ANR	1367470	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1367471	Identifier	last_op		1364754	0					
ANR	1367472	Identifier	opcode		1364754	1					
ANR	1367473	Identifier	ZEND_JMPNZ		1364754	1					
ANR	1367474	ExpressionStatement	block -> op2_to = block -> ext_to	1715:4:57585:57614	1364754	1	True				
ANR	1367475	AssignmentExpression	block -> op2_to = block -> ext_to		1364754	0		=			
ANR	1367476	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367477	Identifier	block		1364754	0					
ANR	1367478	Identifier	op2_to		1364754	1					
ANR	1367479	PtrMemberAccess	block -> ext_to		1364754	1					
ANR	1367480	Identifier	block		1364754	0					
ANR	1367481	Identifier	ext_to		1364754	1					
ANR	1367482	ExpressionStatement	block -> follow_to = next	1716:4:57620:57643	1364754	2	True				
ANR	1367483	AssignmentExpression	block -> follow_to = next		1364754	0		=			
ANR	1367484	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1367485	Identifier	block		1364754	0					
ANR	1367486	Identifier	follow_to		1364754	1					
ANR	1367487	Identifier	next		1364754	1					
ANR	1367488	ExpressionStatement	block -> ext_to = NULL	1717:4:57649:57669	1364754	3	True				
ANR	1367489	AssignmentExpression	block -> ext_to = NULL		1364754	0		=			
ANR	1367490	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1367491	Identifier	block		1364754	0					
ANR	1367492	Identifier	ext_to		1364754	1					
ANR	1367493	Identifier	NULL		1364754	1					
ANR	1367494	ElseStatement	else		1364754	0					
ANR	1367495	IfStatement	if ( block -> ext_to == next )		1364754	0					
ANR	1367496	Condition	block -> ext_to == next	1719:14:57738:57758	1364754	0	True				
ANR	1367497	EqualityExpression	block -> ext_to == next		1364754	0		==			
ANR	1367498	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1367499	Identifier	block		1364754	0					
ANR	1367500	Identifier	ext_to		1364754	1					
ANR	1367501	Identifier	next		1364754	1					
ANR	1367502	CompoundStatement		464:37:15314:15314	1364754	1					
ANR	1367503	ExpressionStatement	last_op -> opcode = ZEND_JMPZ	1722:4:57881:57908	1364754	0	True				
ANR	1367504	AssignmentExpression	last_op -> opcode = ZEND_JMPZ		1364754	0		=			
ANR	1367505	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1367506	Identifier	last_op		1364754	0					
ANR	1367507	Identifier	opcode		1364754	1					
ANR	1367508	Identifier	ZEND_JMPZ		1364754	1					
ANR	1367509	ExpressionStatement	block -> follow_to = next	1723:4:57914:57937	1364754	1	True				
ANR	1367510	AssignmentExpression	block -> follow_to = next		1364754	0		=			
ANR	1367511	PtrMemberAccess	block -> follow_to		1364754	0					
ANR	1367512	Identifier	block		1364754	0					
ANR	1367513	Identifier	follow_to		1364754	1					
ANR	1367514	Identifier	next		1364754	1					
ANR	1367515	ExpressionStatement	block -> ext_to = NULL	1724:4:57943:57963	1364754	2	True				
ANR	1367516	AssignmentExpression	block -> ext_to = NULL		1364754	0		=			
ANR	1367517	PtrMemberAccess	block -> ext_to		1364754	0					
ANR	1367518	Identifier	block		1364754	0					
ANR	1367519	Identifier	ext_to		1364754	1					
ANR	1367520	Identifier	NULL		1364754	1					
ANR	1367521	IfStatement	if ( last_op -> opcode == ZEND_JMPZNZ && block -> op2_to )		1364754	3					
ANR	1367522	Condition	last_op -> opcode == ZEND_JMPZNZ && block -> op2_to	1728:7:58031:58077	1364754	0	True				
ANR	1367523	AndExpression	last_op -> opcode == ZEND_JMPZNZ && block -> op2_to		1364754	0		&&			
ANR	1367524	EqualityExpression	last_op -> opcode == ZEND_JMPZNZ		1364754	0		==			
ANR	1367525	PtrMemberAccess	last_op -> opcode		1364754	0					
ANR	1367526	Identifier	last_op		1364754	0					
ANR	1367527	Identifier	opcode		1364754	1					
ANR	1367528	Identifier	ZEND_JMPZNZ		1364754	1					
ANR	1367529	PtrMemberAccess	block -> op2_to		1364754	1					
ANR	1367530	Identifier	block		1364754	0					
ANR	1367531	Identifier	op2_to		1364754	1					
ANR	1367532	CompoundStatement		478:4:15788:15833	1364754	1					
ANR	1367533	IdentifierDeclStatement	zend_uchar same_type = ZEND_OP1_TYPE ( last_op ) ;	1729:4:58086:58131	1364754	0	True				
ANR	1367534	IdentifierDecl	same_type = ZEND_OP1_TYPE ( last_op )		1364754	0					
ANR	1367535	IdentifierDeclType	zend_uchar		1364754	0					
ANR	1367536	Identifier	same_type		1364754	1					
ANR	1367537	AssignmentExpression	same_type = ZEND_OP1_TYPE ( last_op )		1364754	2		=			
ANR	1367538	Identifier	same_type		1364754	0					
ANR	1367539	CallExpression	ZEND_OP1_TYPE ( last_op )		1364754	1					
ANR	1367540	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1367541	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1367542	ArgumentList	last_op		1364754	1					
ANR	1367543	Argument	last_op		1364754	0					
ANR	1367544	Identifier	last_op		1364754	0					
ANR	1367545	IdentifierDeclStatement	zend_uchar same_var = VAR_NUM_EX ( last_op -> op1 ) ;	1730:4:58137:58183	1364754	1	True				
ANR	1367546	IdentifierDecl	same_var = VAR_NUM_EX ( last_op -> op1 )		1364754	0					
ANR	1367547	IdentifierDeclType	zend_uchar		1364754	0					
ANR	1367548	Identifier	same_var		1364754	1					
ANR	1367549	AssignmentExpression	same_var = VAR_NUM_EX ( last_op -> op1 )		1364754	2		=			
ANR	1367550	Identifier	same_var		1364754	0					
ANR	1367551	CallExpression	VAR_NUM_EX ( last_op -> op1 )		1364754	1					
ANR	1367552	Callee	VAR_NUM_EX		1364754	0					
ANR	1367553	Identifier	VAR_NUM_EX		1364754	0					
ANR	1367554	ArgumentList	last_op -> op1		1364754	1					
ANR	1367555	Argument	last_op -> op1		1364754	0					
ANR	1367556	PtrMemberAccess	last_op -> op1		1364754	0					
ANR	1367557	Identifier	last_op		1364754	0					
ANR	1367558	Identifier	op1		1364754	1					
ANR	1367559	IdentifierDeclStatement	zend_op * target ;	1731:4:58189:58204	1364754	2	True				
ANR	1367560	IdentifierDecl	* target		1364754	0					
ANR	1367561	IdentifierDeclType	zend_op *		1364754	0					
ANR	1367562	Identifier	target		1364754	1					
ANR	1367563	IdentifierDeclStatement	zend_op * target_end ;	1732:4:58210:58229	1364754	3	True				
ANR	1367564	IdentifierDecl	* target_end		1364754	0					
ANR	1367565	IdentifierDeclType	zend_op *		1364754	0					
ANR	1367566	Identifier	target_end		1364754	1					
ANR	1367567	IdentifierDeclStatement	zend_code_block * target_block = block -> op2_to ;	1733:4:58235:58280	1364754	4	True				
ANR	1367568	IdentifierDecl	* target_block = block -> op2_to		1364754	0					
ANR	1367569	IdentifierDeclType	zend_code_block *		1364754	0					
ANR	1367570	Identifier	target_block		1364754	1					
ANR	1367571	AssignmentExpression	* target_block = block -> op2_to		1364754	2		=			
ANR	1367572	Identifier	target_block		1364754	0					
ANR	1367573	PtrMemberAccess	block -> op2_to		1364754	1					
ANR	1367574	Identifier	block		1364754	0					
ANR	1367575	Identifier	op2_to		1364754	1					
ANR	1367576	Label	next_target_znz :	1735:0:58283:58298	1364754	5	True				
ANR	1367577	Identifier	next_target_znz		1364754	0					
ANR	1367578	ExpressionStatement	target = target_block -> start_opline	1736:4:58304:58339	1364754	6	True				
ANR	1367579	AssignmentExpression	target = target_block -> start_opline		1364754	0		=			
ANR	1367580	Identifier	target		1364754	0					
ANR	1367581	PtrMemberAccess	target_block -> start_opline		1364754	1					
ANR	1367582	Identifier	target_block		1364754	0					
ANR	1367583	Identifier	start_opline		1364754	1					
ANR	1367584	ExpressionStatement	target_end = target_block -> start_opline + target_block -> len	1737:4:58345:58404	1364754	7	True				
ANR	1367585	AssignmentExpression	target_end = target_block -> start_opline + target_block -> len		1364754	0		=			
ANR	1367586	Identifier	target_end		1364754	0					
ANR	1367587	AdditiveExpression	target_block -> start_opline + target_block -> len		1364754	1		+			
ANR	1367588	PtrMemberAccess	target_block -> start_opline		1364754	0					
ANR	1367589	Identifier	target_block		1364754	0					
ANR	1367590	Identifier	start_opline		1364754	1					
ANR	1367591	PtrMemberAccess	target_block -> len		1364754	1					
ANR	1367592	Identifier	target_block		1364754	0					
ANR	1367593	Identifier	len		1364754	1					
ANR	1367594	WhileStatement	while ( target < target_end && target -> opcode == ZEND_NOP )		1364754	8					
ANR	1367595	Condition	target < target_end && target -> opcode == ZEND_NOP	1738:11:58417:58465	1364754	0	True				
ANR	1367596	AndExpression	target < target_end && target -> opcode == ZEND_NOP		1364754	0		&&			
ANR	1367597	RelationalExpression	target < target_end		1364754	0		<			
ANR	1367598	Identifier	target		1364754	0					
ANR	1367599	Identifier	target_end		1364754	1					
ANR	1367600	EqualityExpression	target -> opcode == ZEND_NOP		1364754	1		==			
ANR	1367601	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1367602	Identifier	target		1364754	0					
ANR	1367603	Identifier	opcode		1364754	1					
ANR	1367604	Identifier	ZEND_NOP		1364754	1					
ANR	1367605	CompoundStatement		483:62:16021:16021	1364754	1					
ANR	1367606	ExpressionStatement	target ++	1739:5:58475:58483	1364754	0	True				
ANR	1367607	PostIncDecOperationExpression	target ++		1364754	0					
ANR	1367608	Identifier	target		1364754	0					
ANR	1367609	IncDec	++		1364754	1					
ANR	1367610	IfStatement	if ( target == target_end )		1364754	9					
ANR	1367611	Condition	target == target_end	1742:8:58534:58553	1364754	0	True				
ANR	1367612	EqualityExpression	target == target_end		1364754	0		==			
ANR	1367613	Identifier	target		1364754	0					
ANR	1367614	Identifier	target_end		1364754	1					
ANR	1367615	CompoundStatement		487:30:16109:16109	1364754	1					
ANR	1367616	ExpressionStatement	target_block = target_block -> follow_to	1743:5:58563:58601	1364754	0	True				
ANR	1367617	AssignmentExpression	target_block = target_block -> follow_to		1364754	0		=			
ANR	1367618	Identifier	target_block		1364754	0					
ANR	1367619	PtrMemberAccess	target_block -> follow_to		1364754	1					
ANR	1367620	Identifier	target_block		1364754	0					
ANR	1367621	Identifier	follow_to		1364754	1					
ANR	1367622	GotoStatement	goto next_target_znz ;	1744:5:58608:58628	1364754	1	True				
ANR	1367623	Identifier	next_target_znz		1364754	0					
ANR	1367624	ElseStatement	else		1364754	0					
ANR	1367625	IfStatement	if ( target_block -> op2_to && ( target -> opcode == ZEND_JMPZ || target -> opcode == ZEND_JMPZNZ ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected )		1364754	0					
ANR	1367626	Condition	target_block -> op2_to && ( target -> opcode == ZEND_JMPZ || target -> opcode == ZEND_JMPZNZ ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected	1745:15:58645:58928	1364754	0	True				
ANR	1367627	AndExpression	target_block -> op2_to && ( target -> opcode == ZEND_JMPZ || target -> opcode == ZEND_JMPZNZ ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	0		&&			
ANR	1367628	PtrMemberAccess	target_block -> op2_to		1364754	0					
ANR	1367629	Identifier	target_block		1364754	0					
ANR	1367630	Identifier	op2_to		1364754	1					
ANR	1367631	AndExpression	( target -> opcode == ZEND_JMPZ || target -> opcode == ZEND_JMPZNZ ) && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1367632	OrExpression	target -> opcode == ZEND_JMPZ || target -> opcode == ZEND_JMPZNZ		1364754	0		||			
ANR	1367633	EqualityExpression	target -> opcode == ZEND_JMPZ		1364754	0		==			
ANR	1367634	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1367635	Identifier	target		1364754	0					
ANR	1367636	Identifier	opcode		1364754	1					
ANR	1367637	Identifier	ZEND_JMPZ		1364754	1					
ANR	1367638	EqualityExpression	target -> opcode == ZEND_JMPZNZ		1364754	1		==			
ANR	1367639	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1367640	Identifier	target		1364754	0					
ANR	1367641	Identifier	opcode		1364754	1					
ANR	1367642	Identifier	ZEND_JMPZNZ		1364754	1					
ANR	1367643	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1367644	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1367645	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1367646	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1367647	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1367648	ArgumentList	target		1364754	1					
ANR	1367649	Argument	target		1364754	0					
ANR	1367650	Identifier	target		1364754	0					
ANR	1367651	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1367652	Identifier	IS_TMP_VAR		1364754	0					
ANR	1367653	Identifier	IS_CV		1364754	1					
ANR	1367654	AndExpression	same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1367655	EqualityExpression	same_type == ZEND_OP1_TYPE ( target )		1364754	0		==			
ANR	1367656	Identifier	same_type		1364754	0					
ANR	1367657	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1367658	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1367659	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1367660	ArgumentList	target		1364754	1					
ANR	1367661	Argument	target		1364754	0					
ANR	1367662	Identifier	target		1364754	0					
ANR	1367663	AndExpression	same_var == VAR_NUM_EX ( target -> op1 ) && ! target_block -> protected		1364754	1		&&			
ANR	1367664	EqualityExpression	same_var == VAR_NUM_EX ( target -> op1 )		1364754	0		==			
ANR	1367665	Identifier	same_var		1364754	0					
ANR	1367666	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1367667	Callee	VAR_NUM_EX		1364754	0					
ANR	1367668	Identifier	VAR_NUM_EX		1364754	0					
ANR	1367669	ArgumentList	target -> op1		1364754	1					
ANR	1367670	Argument	target -> op1		1364754	0					
ANR	1367671	PtrMemberAccess	target -> op1		1364754	0					
ANR	1367672	Identifier	target		1364754	0					
ANR	1367673	Identifier	op1		1364754	1					
ANR	1367674	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1367675	UnaryOperator	!		1364754	0					
ANR	1367676	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1367677	Identifier	target_block		1364754	0					
ANR	1367678	Identifier	protected		1364754	1					
ANR	1367679	CompoundStatement		495:35:16484:16484	1364754	1					
ANR	1367680	ExpressionStatement	"del_source ( block , block -> op2_to )"	1752:5:59008:59040	1364754	0	True				
ANR	1367681	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1367682	Callee	del_source		1364754	0					
ANR	1367683	Identifier	del_source		1364754	0					
ANR	1367684	ArgumentList	block		1364754	1					
ANR	1367685	Argument	block		1364754	0					
ANR	1367686	Identifier	block		1364754	0					
ANR	1367687	Argument	block -> op2_to		1364754	1					
ANR	1367688	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367689	Identifier	block		1364754	0					
ANR	1367690	Identifier	op2_to		1364754	1					
ANR	1367691	ExpressionStatement	block -> op2_to = target_block -> op2_to	1753:5:59047:59083	1364754	1	True				
ANR	1367692	AssignmentExpression	block -> op2_to = target_block -> op2_to		1364754	0		=			
ANR	1367693	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367694	Identifier	block		1364754	0					
ANR	1367695	Identifier	op2_to		1364754	1					
ANR	1367696	PtrMemberAccess	target_block -> op2_to		1364754	1					
ANR	1367697	Identifier	target_block		1364754	0					
ANR	1367698	Identifier	op2_to		1364754	1					
ANR	1367699	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1754:5:59090:59122	1364754	2	True				
ANR	1367700	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1367701	Callee	ADD_SOURCE		1364754	0					
ANR	1367702	Identifier	ADD_SOURCE		1364754	0					
ANR	1367703	ArgumentList	block		1364754	1					
ANR	1367704	Argument	block		1364754	0					
ANR	1367705	Identifier	block		1364754	0					
ANR	1367706	Argument	block -> op2_to		1364754	1					
ANR	1367707	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367708	Identifier	block		1364754	0					
ANR	1367709	Identifier	op2_to		1364754	1					
ANR	1367710	ElseStatement	else		1364754	0					
ANR	1367711	IfStatement	if ( target -> opcode == ZEND_JMPNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected )		1364754	0					
ANR	1367712	Condition	target -> opcode == ZEND_JMPNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected	1755:15:59139:59391	1364754	0	True				
ANR	1367713	AndExpression	target -> opcode == ZEND_JMPNZ && ( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	0		&&			
ANR	1367714	EqualityExpression	target -> opcode == ZEND_JMPNZ		1364754	0		==			
ANR	1367715	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1367716	Identifier	target		1364754	0					
ANR	1367717	Identifier	opcode		1364754	1					
ANR	1367718	Identifier	ZEND_JMPNZ		1364754	1					
ANR	1367719	AndExpression	( ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV ) ) && same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1367720	BitAndExpression	ZEND_OP1_TYPE ( target ) & ( IS_TMP_VAR | IS_CV )		1364754	0		&			
ANR	1367721	CallExpression	ZEND_OP1_TYPE ( target )		1364754	0					
ANR	1367722	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1367723	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1367724	ArgumentList	target		1364754	1					
ANR	1367725	Argument	target		1364754	0					
ANR	1367726	Identifier	target		1364754	0					
ANR	1367727	InclusiveOrExpression	IS_TMP_VAR | IS_CV		1364754	1		|			
ANR	1367728	Identifier	IS_TMP_VAR		1364754	0					
ANR	1367729	Identifier	IS_CV		1364754	1					
ANR	1367730	AndExpression	same_type == ZEND_OP1_TYPE ( target ) && same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1367731	EqualityExpression	same_type == ZEND_OP1_TYPE ( target )		1364754	0		==			
ANR	1367732	Identifier	same_type		1364754	0					
ANR	1367733	CallExpression	ZEND_OP1_TYPE ( target )		1364754	1					
ANR	1367734	Callee	ZEND_OP1_TYPE		1364754	0					
ANR	1367735	Identifier	ZEND_OP1_TYPE		1364754	0					
ANR	1367736	ArgumentList	target		1364754	1					
ANR	1367737	Argument	target		1364754	0					
ANR	1367738	Identifier	target		1364754	0					
ANR	1367739	AndExpression	same_var == VAR_NUM_EX ( target -> op1 ) && target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1367740	EqualityExpression	same_var == VAR_NUM_EX ( target -> op1 )		1364754	0		==			
ANR	1367741	Identifier	same_var		1364754	0					
ANR	1367742	CallExpression	VAR_NUM_EX ( target -> op1 )		1364754	1					
ANR	1367743	Callee	VAR_NUM_EX		1364754	0					
ANR	1367744	Identifier	VAR_NUM_EX		1364754	0					
ANR	1367745	ArgumentList	target -> op1		1364754	1					
ANR	1367746	Argument	target -> op1		1364754	0					
ANR	1367747	PtrMemberAccess	target -> op1		1364754	0					
ANR	1367748	Identifier	target		1364754	0					
ANR	1367749	Identifier	op1		1364754	1					
ANR	1367750	AndExpression	target_block -> follow_to && ! target_block -> protected		1364754	1		&&			
ANR	1367751	PtrMemberAccess	target_block -> follow_to		1364754	0					
ANR	1367752	Identifier	target_block		1364754	0					
ANR	1367753	Identifier	follow_to		1364754	1					
ANR	1367754	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1367755	UnaryOperator	!		1364754	0					
ANR	1367756	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1367757	Identifier	target_block		1364754	0					
ANR	1367758	Identifier	protected		1364754	1					
ANR	1367759	CompoundStatement		505:35:16947:16947	1364754	1					
ANR	1367760	ExpressionStatement	"del_source ( block , block -> op2_to )"	1762:5:59490:59522	1364754	0	True				
ANR	1367761	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1367762	Callee	del_source		1364754	0					
ANR	1367763	Identifier	del_source		1364754	0					
ANR	1367764	ArgumentList	block		1364754	1					
ANR	1367765	Argument	block		1364754	0					
ANR	1367766	Identifier	block		1364754	0					
ANR	1367767	Argument	block -> op2_to		1364754	1					
ANR	1367768	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367769	Identifier	block		1364754	0					
ANR	1367770	Identifier	op2_to		1364754	1					
ANR	1367771	ExpressionStatement	block -> op2_to = target_block -> follow_to	1763:5:59529:59568	1364754	1	True				
ANR	1367772	AssignmentExpression	block -> op2_to = target_block -> follow_to		1364754	0		=			
ANR	1367773	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367774	Identifier	block		1364754	0					
ANR	1367775	Identifier	op2_to		1364754	1					
ANR	1367776	PtrMemberAccess	target_block -> follow_to		1364754	1					
ANR	1367777	Identifier	target_block		1364754	0					
ANR	1367778	Identifier	follow_to		1364754	1					
ANR	1367779	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1764:5:59575:59607	1364754	2	True				
ANR	1367780	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1367781	Callee	ADD_SOURCE		1364754	0					
ANR	1367782	Identifier	ADD_SOURCE		1364754	0					
ANR	1367783	ArgumentList	block		1364754	1					
ANR	1367784	Argument	block		1364754	0					
ANR	1367785	Identifier	block		1364754	0					
ANR	1367786	Argument	block -> op2_to		1364754	1					
ANR	1367787	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367788	Identifier	block		1364754	0					
ANR	1367789	Identifier	op2_to		1364754	1					
ANR	1367790	ElseStatement	else		1364754	0					
ANR	1367791	IfStatement	if ( target_block -> op1_to && target -> opcode == ZEND_JMP && ! target_block -> protected )		1364754	0					
ANR	1367792	Condition	target_block -> op1_to && target -> opcode == ZEND_JMP && ! target_block -> protected	1765:15:59624:59725	1364754	0	True				
ANR	1367793	AndExpression	target_block -> op1_to && target -> opcode == ZEND_JMP && ! target_block -> protected		1364754	0		&&			
ANR	1367794	PtrMemberAccess	target_block -> op1_to		1364754	0					
ANR	1367795	Identifier	target_block		1364754	0					
ANR	1367796	Identifier	op1_to		1364754	1					
ANR	1367797	AndExpression	target -> opcode == ZEND_JMP && ! target_block -> protected		1364754	1		&&			
ANR	1367798	EqualityExpression	target -> opcode == ZEND_JMP		1364754	0		==			
ANR	1367799	PtrMemberAccess	target -> opcode		1364754	0					
ANR	1367800	Identifier	target		1364754	0					
ANR	1367801	Identifier	opcode		1364754	1					
ANR	1367802	Identifier	ZEND_JMP		1364754	1					
ANR	1367803	UnaryOperationExpression	! target_block -> protected		1364754	1					
ANR	1367804	UnaryOperator	!		1364754	0					
ANR	1367805	PtrMemberAccess	target_block -> protected		1364754	1					
ANR	1367806	Identifier	target_block		1364754	0					
ANR	1367807	Identifier	protected		1364754	1					
ANR	1367808	CompoundStatement		512:38:17281:17281	1364754	1					
ANR	1367809	ExpressionStatement	"del_source ( block , block -> op2_to )"	1769:5:59813:59845	1364754	0	True				
ANR	1367810	CallExpression	"del_source ( block , block -> op2_to )"		1364754	0					
ANR	1367811	Callee	del_source		1364754	0					
ANR	1367812	Identifier	del_source		1364754	0					
ANR	1367813	ArgumentList	block		1364754	1					
ANR	1367814	Argument	block		1364754	0					
ANR	1367815	Identifier	block		1364754	0					
ANR	1367816	Argument	block -> op2_to		1364754	1					
ANR	1367817	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367818	Identifier	block		1364754	0					
ANR	1367819	Identifier	op2_to		1364754	1					
ANR	1367820	ExpressionStatement	block -> op2_to = target_block -> op1_to	1770:5:59852:59888	1364754	1	True				
ANR	1367821	AssignmentExpression	block -> op2_to = target_block -> op1_to		1364754	0		=			
ANR	1367822	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367823	Identifier	block		1364754	0					
ANR	1367824	Identifier	op2_to		1364754	1					
ANR	1367825	PtrMemberAccess	target_block -> op1_to		1364754	1					
ANR	1367826	Identifier	target_block		1364754	0					
ANR	1367827	Identifier	op1_to		1364754	1					
ANR	1367828	ExpressionStatement	"ADD_SOURCE ( block , block -> op2_to )"	1771:5:59895:59927	1364754	2	True				
ANR	1367829	CallExpression	"ADD_SOURCE ( block , block -> op2_to )"		1364754	0					
ANR	1367830	Callee	ADD_SOURCE		1364754	0					
ANR	1367831	Identifier	ADD_SOURCE		1364754	0					
ANR	1367832	ArgumentList	block		1364754	1					
ANR	1367833	Argument	block		1364754	0					
ANR	1367834	Identifier	block		1364754	0					
ANR	1367835	Argument	block -> op2_to		1364754	1					
ANR	1367836	PtrMemberAccess	block -> op2_to		1364754	0					
ANR	1367837	Identifier	block		1364754	0					
ANR	1367838	Identifier	op2_to		1364754	1					
ANR	1367839	BreakStatement	break ;	1774:3:59943:59948	1364754	4	True				
ANR	1367840	ReturnType	static void		1364754	1					
ANR	1367841	Identifier	zend_jmp_optimization		1364754	2					
ANR	1367842	ParameterList	"zend_code_block * block , zend_op_array * op_array , zend_code_block * blocks , zend_cfg * cfg , zend_optimizer_ctx * ctx"		1364754	3					
ANR	1367843	Parameter	zend_code_block * block	1255:34:42332:42353	1364754	0	True				
ANR	1367844	ParameterType	zend_code_block *		1364754	0					
ANR	1367845	Identifier	block		1364754	1					
ANR	1367846	Parameter	zend_op_array * op_array	1255:58:42356:42378	1364754	1	True				
ANR	1367847	ParameterType	zend_op_array *		1364754	0					
ANR	1367848	Identifier	op_array		1364754	1					
ANR	1367849	Parameter	zend_code_block * blocks	1255:83:42381:42403	1364754	2	True				
ANR	1367850	ParameterType	zend_code_block *		1364754	0					
ANR	1367851	Identifier	blocks		1364754	1					
ANR	1367852	Parameter	zend_cfg * cfg	1255:108:42406:42418	1364754	3	True				
ANR	1367853	ParameterType	zend_cfg *		1364754	0					
ANR	1367854	Identifier	cfg		1364754	1					
ANR	1367855	Parameter	zend_optimizer_ctx * ctx	1255:123:42421:42443	1364754	4	True				
ANR	1367856	ParameterType	zend_optimizer_ctx *		1364754	0					
ANR	1367857	Identifier	ctx		1364754	1					
ANR	1367858	CFGEntryNode	ENTRY		1364754		True				
ANR	1367859	CFGExitNode	EXIT		1364754		True				
ANR	1367860	Symbol	ZEND_JMPNZ		1364754						
ANR	1367861	Symbol	ZEND_JMPZNZ		1364754						
ANR	1367862	Symbol	prev		1364754						
ANR	1367863	Symbol	target_block -> ext_to		1364754						
ANR	1367864	Symbol	ZEND_QM_ASSIGN		1364754						
ANR	1367865	Symbol	* same_t		1364754						
ANR	1367866	Symbol	ZEND_FETCH_DIM_R		1364754						
ANR	1367867	Symbol	last_op -> op1		1364754						
ANR	1367868	Symbol	last_op -> op2		1364754						
ANR	1367869	Symbol	block		1364754						
ANR	1367870	Symbol	last_op		1364754						
ANR	1367871	Symbol	same_t		1364754						
ANR	1367872	Symbol	target_block		1364754						
ANR	1367873	Symbol	zend_optimizer_add_literal		1364754						
ANR	1367874	Symbol	block -> op1_to -> protected		1364754						
ANR	1367875	Symbol	ZEND_FETCH_OBJ_R		1364754						
ANR	1367876	Symbol	IS_CONST		1364754						
ANR	1367877	Symbol	INV_COND_EX		1364754						
ANR	1367878	Symbol	ZEND_RETURN		1364754						
ANR	1367879	Symbol	ctx		1364754						
ANR	1367880	Symbol	todel		1364754						
ANR	1367881	Symbol	target_end		1364754						
ANR	1367882	Symbol	& ZEND_OP1_LITERAL		1364754						
ANR	1367883	Symbol	* op_array		1364754						
ANR	1367884	Symbol	* cfg		1364754						
ANR	1367885	Symbol	ZEND_RESULT_TYPE		1364754						
ANR	1367886	Symbol	* cs		1364754						
ANR	1367887	Symbol	ZEND_OP1_LITERAL		1364754						
ANR	1367888	Symbol	ZEND_EXIT		1364754						
ANR	1367889	Symbol	zv		1364754						
ANR	1367890	Symbol	IS_VAR		1364754						
ANR	1367891	Symbol	ZEND_JMPZ_EX		1364754						
ANR	1367892	Symbol	block -> op1_to -> op1_to		1364754						
ANR	1367893	Symbol	target_block -> follow_to		1364754						
ANR	1367894	Symbol	next -> access		1364754						
ANR	1367895	Symbol	block -> follow_to -> protected		1364754						
ANR	1367896	Symbol	target_block -> protected		1364754						
ANR	1367897	Symbol	block -> op2_to		1364754						
ANR	1367898	Symbol	* VAR_NUM_EX		1364754						
ANR	1367899	Symbol	prev -> next		1364754						
ANR	1367900	Symbol	cfg		1364754						
ANR	1367901	Symbol	& zv		1364754						
ANR	1367902	Symbol	target_block -> op2_to		1364754						
ANR	1367903	Symbol	ZEND_FETCH_R		1364754						
ANR	1367904	Symbol	op_array -> last_try_catch		1364754						
ANR	1367905	Symbol	* target		1364754						
ANR	1367906	Symbol	cs		1364754						
ANR	1367907	Symbol	last_op -> result		1364754						
ANR	1367908	Symbol	ZEND_JMP		1364754						
ANR	1367909	Symbol	target_block -> len		1364754						
ANR	1367910	Symbol	Tsource		1364754						
ANR	1367911	Symbol	var_num		1364754						
ANR	1367912	Symbol	INV_EX_COND		1364754						
ANR	1367913	Symbol	* block -> follow_to		1364754						
ANR	1367914	Symbol	* * block		1364754						
ANR	1367915	Symbol	target -> opcode		1364754						
ANR	1367916	Symbol	target_block -> start_opline		1364754						
ANR	1367917	Symbol	op_array		1364754						
ANR	1367918	Symbol	ZEND_FAST_RET		1364754						
ANR	1367919	Symbol	ZEND_FREE		1364754						
ANR	1367920	Symbol	INV_EX_COND_EX		1364754						
ANR	1367921	Symbol	* cs -> from		1364754						
ANR	1367922	Symbol	IS_CV		1364754						
ANR	1367923	Symbol	last_op -> op2 . num		1364754						
ANR	1367924	Symbol	next -> next		1364754						
ANR	1367925	Symbol	* next		1364754						
ANR	1367926	Symbol	cs -> from -> follow_to		1364754						
ANR	1367927	Symbol	cs -> from		1364754						
ANR	1367928	Symbol	block -> ext_to		1364754						
ANR	1367929	Symbol	* src		1364754						
ANR	1367930	Symbol	* target_block		1364754						
ANR	1367931	Symbol	next -> follow_to		1364754						
ANR	1367932	Symbol	same_type		1364754						
ANR	1367933	Symbol	block -> op1_to -> ext_to		1364754						
ANR	1367934	Symbol	block -> follow_to -> follow_to		1364754						
ANR	1367935	Symbol	should_jmp		1364754						
ANR	1367936	Symbol	IS_TMP_VAR		1364754						
ANR	1367937	Symbol	op_array -> T		1364754						
ANR	1367938	Symbol	NULL		1364754						
ANR	1367939	Symbol	* last_op		1364754						
ANR	1367940	Symbol	ZEND_JMPZ		1364754						
ANR	1367941	Symbol	INV_COND		1364754						
ANR	1367942	Symbol	block -> follow_to -> op1_to		1364754						
ANR	1367943	Symbol	cfg -> same_t		1364754						
ANR	1367944	Symbol	ZEND_NOP		1364754						
ANR	1367945	Symbol	block -> op1_to -> start_opline		1364754						
ANR	1367946	Symbol	block -> start_opline		1364754						
ANR	1367947	Symbol	block -> follow_to -> len		1364754						
ANR	1367948	Symbol	zend_is_true		1364754						
ANR	1367949	Symbol	next		1364754						
ANR	1367950	Symbol	block -> op1_to -> sources		1364754						
ANR	1367951	Symbol	* block -> op1_to		1364754						
ANR	1367952	Symbol	op_array -> last_var		1364754						
ANR	1367953	Symbol	block -> next		1364754						
ANR	1367954	Symbol	* prev		1364754						
ANR	1367955	Symbol	src -> opcode		1364754						
ANR	1367956	Symbol	ZEND_RETURN_BY_REF		1364754						
ANR	1367957	Symbol	target -> op1		1364754						
ANR	1367958	Symbol	cs -> next		1364754						
ANR	1367959	Symbol	target_block -> op1_to		1364754						
ANR	1367960	Symbol	last_op -> opcode		1364754						
ANR	1367961	Symbol	EXT_TYPE_UNUSED		1364754						
ANR	1367962	Symbol	* * cs		1364754						
ANR	1367963	Symbol	target -> result		1364754						
ANR	1367964	Symbol	can_reorder		1364754						
ANR	1367965	Symbol	last_op -> op1_type		1364754						
ANR	1367966	Symbol	src		1364754						
ANR	1367967	Symbol	blocks		1364754						
ANR	1367968	Symbol	block -> op1_to -> op2_to		1364754						
ANR	1367969	Symbol	block -> follow_to		1364754						
ANR	1367970	Symbol	VAR_SOURCE		1364754						
ANR	1367971	Symbol	VAR_NUM_EX		1364754						
ANR	1367972	Symbol	block -> len		1364754						
ANR	1367973	Symbol	same_var		1364754						
ANR	1367974	Symbol	* block		1364754						
ANR	1367975	Symbol	target		1364754						
ANR	1367976	Symbol	ZEND_OP1_TYPE		1364754						
ANR	1367977	Symbol	block -> follow_to -> start_opline		1364754						
ANR	1367978	Symbol	last_op -> op1 . constant		1364754						
ANR	1367979	Symbol	cfg -> Tsource		1364754						
ANR	1367980	Symbol	block -> op1_to		1364754						
ANR	1367981	Symbol	IS_UNUSED		1364754						
ANR	1367982	Function	zend_t_usage	1793:0:60650:64870							
ANR	1367983	FunctionDef	"zend_t_usage (zend_code_block * block , zend_op_array * op_array , zend_bitset used_ext , zend_optimizer_ctx * ctx)"		1367982	0					
ANR	1367984	CompoundStatement		1794:0:60771:64870	1367982	0					
ANR	1367985	IdentifierDeclStatement	zend_code_block * next_block = block -> next ;	1795:1:60774:60815	1367982	0	True				
ANR	1367986	IdentifierDecl	* next_block = block -> next		1367982	0					
ANR	1367987	IdentifierDeclType	zend_code_block *		1367982	0					
ANR	1367988	Identifier	next_block		1367982	1					
ANR	1367989	AssignmentExpression	* next_block = block -> next		1367982	2		=			
ANR	1367990	Identifier	next_block		1367982	0					
ANR	1367991	PtrMemberAccess	block -> next		1367982	1					
ANR	1367992	Identifier	block		1367982	0					
ANR	1367993	Identifier	next		1367982	1					
ANR	1367994	IdentifierDeclStatement	uint32_t bitset_len ;	1796:1:60818:60837	1367982	1	True				
ANR	1367995	IdentifierDecl	bitset_len		1367982	0					
ANR	1367996	IdentifierDeclType	uint32_t		1367982	0					
ANR	1367997	Identifier	bitset_len		1367982	1					
ANR	1367998	IdentifierDeclStatement	zend_bitset usage ;	1797:1:60840:60857	1367982	2	True				
ANR	1367999	IdentifierDecl	usage		1367982	0					
ANR	1368000	IdentifierDeclType	zend_bitset		1367982	0					
ANR	1368001	Identifier	usage		1367982	1					
ANR	1368002	IdentifierDeclStatement	zend_bitset defined_here ;	1798:1:60860:60884	1367982	3	True				
ANR	1368003	IdentifierDecl	defined_here		1367982	0					
ANR	1368004	IdentifierDeclType	zend_bitset		1367982	0					
ANR	1368005	Identifier	defined_here		1367982	1					
ANR	1368006	IdentifierDeclStatement	void * checkpoint ;	1799:1:60887:60903	1367982	4	True				
ANR	1368007	IdentifierDecl	* checkpoint		1367982	0					
ANR	1368008	IdentifierDeclType	void *		1367982	0					
ANR	1368009	Identifier	checkpoint		1367982	1					
ANR	1368010	IfStatement	if ( op_array -> T == 0 )		1367982	5					
ANR	1368011	Condition	op_array -> T == 0	1801:5:60911:60926	1367982	0	True				
ANR	1368012	EqualityExpression	op_array -> T == 0		1367982	0		==			
ANR	1368013	PtrMemberAccess	op_array -> T		1367982	0					
ANR	1368014	Identifier	op_array		1367982	0					
ANR	1368015	Identifier	T		1367982	1					
ANR	1368016	PrimaryExpression	0		1367982	1					
ANR	1368017	CompoundStatement		8:23:157:157	1367982	1					
ANR	1368018	ReturnStatement	return ;	1803:2:60976:60982	1367982	0	True				
ANR	1368019	ExpressionStatement	checkpoint = zend_arena_checkpoint ( ctx -> arena )	1806:1:60989:61035	1367982	6	True				
ANR	1368020	AssignmentExpression	checkpoint = zend_arena_checkpoint ( ctx -> arena )		1367982	0		=			
ANR	1368021	Identifier	checkpoint		1367982	0					
ANR	1368022	CallExpression	zend_arena_checkpoint ( ctx -> arena )		1367982	1					
ANR	1368023	Callee	zend_arena_checkpoint		1367982	0					
ANR	1368024	Identifier	zend_arena_checkpoint		1367982	0					
ANR	1368025	ArgumentList	ctx -> arena		1367982	1					
ANR	1368026	Argument	ctx -> arena		1367982	0					
ANR	1368027	PtrMemberAccess	ctx -> arena		1367982	0					
ANR	1368028	Identifier	ctx		1367982	0					
ANR	1368029	Identifier	arena		1367982	1					
ANR	1368030	ExpressionStatement	bitset_len = zend_bitset_len ( op_array -> last_var + op_array -> T )	1807:1:61038:61100	1367982	7	True				
ANR	1368031	AssignmentExpression	bitset_len = zend_bitset_len ( op_array -> last_var + op_array -> T )		1367982	0		=			
ANR	1368032	Identifier	bitset_len		1367982	0					
ANR	1368033	CallExpression	zend_bitset_len ( op_array -> last_var + op_array -> T )		1367982	1					
ANR	1368034	Callee	zend_bitset_len		1367982	0					
ANR	1368035	Identifier	zend_bitset_len		1367982	0					
ANR	1368036	ArgumentList	op_array -> last_var + op_array -> T		1367982	1					
ANR	1368037	Argument	op_array -> last_var + op_array -> T		1367982	0					
ANR	1368038	AdditiveExpression	op_array -> last_var + op_array -> T		1367982	0		+			
ANR	1368039	PtrMemberAccess	op_array -> last_var		1367982	0					
ANR	1368040	Identifier	op_array		1367982	0					
ANR	1368041	Identifier	last_var		1367982	1					
ANR	1368042	PtrMemberAccess	op_array -> T		1367982	1					
ANR	1368043	Identifier	op_array		1367982	0					
ANR	1368044	Identifier	T		1367982	1					
ANR	1368045	ExpressionStatement	"usage = zend_arena_alloc ( & ctx -> arena , bitset_len * ZEND_BITSET_ELM_SIZE )"	1808:1:61103:61175	1367982	8	True				
ANR	1368046	AssignmentExpression	"usage = zend_arena_alloc ( & ctx -> arena , bitset_len * ZEND_BITSET_ELM_SIZE )"		1367982	0		=			
ANR	1368047	Identifier	usage		1367982	0					
ANR	1368048	CallExpression	"zend_arena_alloc ( & ctx -> arena , bitset_len * ZEND_BITSET_ELM_SIZE )"		1367982	1					
ANR	1368049	Callee	zend_arena_alloc		1367982	0					
ANR	1368050	Identifier	zend_arena_alloc		1367982	0					
ANR	1368051	ArgumentList	& ctx -> arena		1367982	1					
ANR	1368052	Argument	& ctx -> arena		1367982	0					
ANR	1368053	UnaryOperationExpression	& ctx -> arena		1367982	0					
ANR	1368054	UnaryOperator	&		1367982	0					
ANR	1368055	PtrMemberAccess	ctx -> arena		1367982	1					
ANR	1368056	Identifier	ctx		1367982	0					
ANR	1368057	Identifier	arena		1367982	1					
ANR	1368058	Argument	bitset_len * ZEND_BITSET_ELM_SIZE		1367982	1					
ANR	1368059	MultiplicativeExpression	bitset_len * ZEND_BITSET_ELM_SIZE		1367982	0		*			
ANR	1368060	Identifier	bitset_len		1367982	0					
ANR	1368061	Identifier	ZEND_BITSET_ELM_SIZE		1367982	1					
ANR	1368062	ExpressionStatement	"zend_bitset_clear ( usage , bitset_len )"	1809:1:61178:61214	1367982	9	True				
ANR	1368063	CallExpression	"zend_bitset_clear ( usage , bitset_len )"		1367982	0					
ANR	1368064	Callee	zend_bitset_clear		1367982	0					
ANR	1368065	Identifier	zend_bitset_clear		1367982	0					
ANR	1368066	ArgumentList	usage		1367982	1					
ANR	1368067	Argument	usage		1367982	0					
ANR	1368068	Identifier	usage		1367982	0					
ANR	1368069	Argument	bitset_len		1367982	1					
ANR	1368070	Identifier	bitset_len		1367982	0					
ANR	1368071	ExpressionStatement	"defined_here = zend_arena_alloc ( & ctx -> arena , bitset_len * ZEND_BITSET_ELM_SIZE )"	1810:1:61217:61296	1367982	10	True				
ANR	1368072	AssignmentExpression	"defined_here = zend_arena_alloc ( & ctx -> arena , bitset_len * ZEND_BITSET_ELM_SIZE )"		1367982	0		=			
ANR	1368073	Identifier	defined_here		1367982	0					
ANR	1368074	CallExpression	"zend_arena_alloc ( & ctx -> arena , bitset_len * ZEND_BITSET_ELM_SIZE )"		1367982	1					
ANR	1368075	Callee	zend_arena_alloc		1367982	0					
ANR	1368076	Identifier	zend_arena_alloc		1367982	0					
ANR	1368077	ArgumentList	& ctx -> arena		1367982	1					
ANR	1368078	Argument	& ctx -> arena		1367982	0					
ANR	1368079	UnaryOperationExpression	& ctx -> arena		1367982	0					
ANR	1368080	UnaryOperator	&		1367982	0					
ANR	1368081	PtrMemberAccess	ctx -> arena		1367982	1					
ANR	1368082	Identifier	ctx		1367982	0					
ANR	1368083	Identifier	arena		1367982	1					
ANR	1368084	Argument	bitset_len * ZEND_BITSET_ELM_SIZE		1367982	1					
ANR	1368085	MultiplicativeExpression	bitset_len * ZEND_BITSET_ELM_SIZE		1367982	0		*			
ANR	1368086	Identifier	bitset_len		1367982	0					
ANR	1368087	Identifier	ZEND_BITSET_ELM_SIZE		1367982	1					
ANR	1368088	WhileStatement	while ( next_block )		1367982	11					
ANR	1368089	Condition	next_block	1812:8:61307:61316	1367982	0	True				
ANR	1368090	Identifier	next_block		1367982	0					
ANR	1368091	CompoundStatement		21:2:597:636	1367982	1					
ANR	1368092	IdentifierDeclStatement	zend_op * opline = next_block -> start_opline ;	1813:2:61323:61365	1367982	0	True				
ANR	1368093	IdentifierDecl	* opline = next_block -> start_opline		1367982	0					
ANR	1368094	IdentifierDeclType	zend_op *		1367982	0					
ANR	1368095	Identifier	opline		1367982	1					
ANR	1368096	AssignmentExpression	* opline = next_block -> start_opline		1367982	2		=			
ANR	1368097	Identifier	opline		1367982	0					
ANR	1368098	PtrMemberAccess	next_block -> start_opline		1367982	1					
ANR	1368099	Identifier	next_block		1367982	0					
ANR	1368100	Identifier	start_opline		1367982	1					
ANR	1368101	IdentifierDeclStatement	zend_op * end = opline + next_block -> len ;	1814:2:61369:61408	1367982	1	True				
ANR	1368102	IdentifierDecl	* end = opline + next_block -> len		1367982	0					
ANR	1368103	IdentifierDeclType	zend_op *		1367982	0					
ANR	1368104	Identifier	end		1367982	1					
ANR	1368105	AssignmentExpression	* end = opline + next_block -> len		1367982	2		=			
ANR	1368106	Identifier	end		1367982	0					
ANR	1368107	AdditiveExpression	opline + next_block -> len		1367982	1		+			
ANR	1368108	Identifier	opline		1367982	0					
ANR	1368109	PtrMemberAccess	next_block -> len		1367982	1					
ANR	1368110	Identifier	next_block		1367982	0					
ANR	1368111	Identifier	len		1367982	1					
ANR	1368112	IfStatement	if ( ! next_block -> access )		1367982	2					
ANR	1368113	Condition	! next_block -> access	1816:6:61417:61435	1367982	0	True				
ANR	1368114	UnaryOperationExpression	! next_block -> access		1367982	0					
ANR	1368115	UnaryOperator	!		1367982	0					
ANR	1368116	PtrMemberAccess	next_block -> access		1367982	1					
ANR	1368117	Identifier	next_block		1367982	0					
ANR	1368118	Identifier	access		1367982	1					
ANR	1368119	CompoundStatement		23:27:666:666	1367982	1					
ANR	1368120	ExpressionStatement	next_block = next_block -> next	1817:3:61443:61472	1367982	0	True				
ANR	1368121	AssignmentExpression	next_block = next_block -> next		1367982	0		=			
ANR	1368122	Identifier	next_block		1367982	0					
ANR	1368123	PtrMemberAccess	next_block -> next		1367982	1					
ANR	1368124	Identifier	next_block		1367982	0					
ANR	1368125	Identifier	next		1367982	1					
ANR	1368126	ContinueStatement	continue ;	1818:3:61477:61485	1367982	1	True				
ANR	1368127	ExpressionStatement	"zend_bitset_clear ( defined_here , bitset_len )"	1820:2:61493:61536	1367982	3	True				
ANR	1368128	CallExpression	"zend_bitset_clear ( defined_here , bitset_len )"		1367982	0					
ANR	1368129	Callee	zend_bitset_clear		1367982	0					
ANR	1368130	Identifier	zend_bitset_clear		1367982	0					
ANR	1368131	ArgumentList	defined_here		1367982	1					
ANR	1368132	Argument	defined_here		1367982	0					
ANR	1368133	Identifier	defined_here		1367982	0					
ANR	1368134	Argument	bitset_len		1367982	1					
ANR	1368135	Identifier	bitset_len		1367982	0					
ANR	1368136	WhileStatement	while ( opline < end )		1367982	4					
ANR	1368137	Condition	opline < end	1822:9:61548:61557	1367982	0	True				
ANR	1368138	RelationalExpression	opline < end		1367982	0		<			
ANR	1368139	Identifier	opline		1367982	0					
ANR	1368140	Identifier	end		1367982	1					
ANR	1368141	CompoundStatement		29:21:788:788	1367982	1					
ANR	1368142	ExpressionStatement	T_USAGE ( opline -> op1 )	1823:3:61565:61585	1367982	0	True				
ANR	1368143	CallExpression	T_USAGE ( opline -> op1 )		1367982	0					
ANR	1368144	Callee	T_USAGE		1367982	0					
ANR	1368145	Identifier	T_USAGE		1367982	0					
ANR	1368146	ArgumentList	opline -> op1		1367982	1					
ANR	1368147	Argument	opline -> op1		1367982	0					
ANR	1368148	PtrMemberAccess	opline -> op1		1367982	0					
ANR	1368149	Identifier	opline		1367982	0					
ANR	1368150	Identifier	op1		1367982	1					
ANR	1368151	IfStatement	if ( opline -> op2_type & ( IS_VAR | IS_TMP_VAR ) )		1367982	1					
ANR	1368152	Condition	opline -> op2_type & ( IS_VAR | IS_TMP_VAR )	1824:7:61594:61633	1367982	0	True				
ANR	1368153	BitAndExpression	opline -> op2_type & ( IS_VAR | IS_TMP_VAR )		1367982	0		&			
ANR	1368154	PtrMemberAccess	opline -> op2_type		1367982	0					
ANR	1368155	Identifier	opline		1367982	0					
ANR	1368156	Identifier	op2_type		1367982	1					
ANR	1368157	InclusiveOrExpression	IS_VAR | IS_TMP_VAR		1367982	1		|			
ANR	1368158	Identifier	IS_VAR		1367982	0					
ANR	1368159	Identifier	IS_TMP_VAR		1367982	1					
ANR	1368160	CompoundStatement		31:49:864:864	1367982	1					
ANR	1368161	IfStatement	if ( opline -> opcode == ZEND_FE_FETCH_R || opline -> opcode == ZEND_FE_FETCH_RW )		1367982	0					
ANR	1368162	Condition	opline -> opcode == ZEND_FE_FETCH_R || opline -> opcode == ZEND_FE_FETCH_RW	1825:8:61646:61716	1367982	0	True				
ANR	1368163	OrExpression	opline -> opcode == ZEND_FE_FETCH_R || opline -> opcode == ZEND_FE_FETCH_RW		1367982	0		||			
ANR	1368164	EqualityExpression	opline -> opcode == ZEND_FE_FETCH_R		1367982	0		==			
ANR	1368165	PtrMemberAccess	opline -> opcode		1367982	0					
ANR	1368166	Identifier	opline		1367982	0					
ANR	1368167	Identifier	opcode		1367982	1					
ANR	1368168	Identifier	ZEND_FE_FETCH_R		1367982	1					
ANR	1368169	EqualityExpression	opline -> opcode == ZEND_FE_FETCH_RW		1367982	1		==			
ANR	1368170	PtrMemberAccess	opline -> opcode		1367982	0					
ANR	1368171	Identifier	opline		1367982	0					
ANR	1368172	Identifier	opcode		1367982	1					
ANR	1368173	Identifier	ZEND_FE_FETCH_RW		1367982	1					
ANR	1368174	CompoundStatement		32:81:947:947	1367982	1					
ANR	1368175	ExpressionStatement	"zend_bitset_incl ( defined_here , VAR_NUM ( ZEND_OP2 ( opline ) . var ) )"	1827:5:61772:61833	1367982	0	True				
ANR	1368176	CallExpression	"zend_bitset_incl ( defined_here , VAR_NUM ( ZEND_OP2 ( opline ) . var ) )"		1367982	0					
ANR	1368177	Callee	zend_bitset_incl		1367982	0					
ANR	1368178	Identifier	zend_bitset_incl		1367982	0					
ANR	1368179	ArgumentList	defined_here		1367982	1					
ANR	1368180	Argument	defined_here		1367982	0					
ANR	1368181	Identifier	defined_here		1367982	0					
ANR	1368182	Argument	VAR_NUM ( ZEND_OP2 ( opline ) . var )		1367982	1					
ANR	1368183	CallExpression	VAR_NUM ( ZEND_OP2 ( opline ) . var )		1367982	0					
ANR	1368184	Callee	VAR_NUM		1367982	0					
ANR	1368185	Identifier	VAR_NUM		1367982	0					
ANR	1368186	ArgumentList	ZEND_OP2 ( opline ) . var		1367982	1					
ANR	1368187	Argument	ZEND_OP2 ( opline ) . var		1367982	0					
ANR	1368188	MemberAccess	ZEND_OP2 ( opline ) . var		1367982	0					
ANR	1368189	CallExpression	ZEND_OP2 ( opline )		1367982	0					
ANR	1368190	Callee	ZEND_OP2		1367982	0					
ANR	1368191	Identifier	ZEND_OP2		1367982	0					
ANR	1368192	ArgumentList	opline		1367982	1					
ANR	1368193	Argument	opline		1367982	0					
ANR	1368194	Identifier	opline		1367982	0					
ANR	1368195	Identifier	var		1367982	1					
ANR	1368196	ElseStatement	else		1367982	0					
ANR	1368197	CompoundStatement		35:11:1074:1074	1367982	0					
ANR	1368198	ExpressionStatement	T_USAGE ( opline -> op2 )	1829:5:61853:61873	1367982	0	True				
ANR	1368199	CallExpression	T_USAGE ( opline -> op2 )		1367982	0					
ANR	1368200	Callee	T_USAGE		1367982	0					
ANR	1368201	Identifier	T_USAGE		1367982	0					
ANR	1368202	ArgumentList	opline -> op2		1367982	1					
ANR	1368203	Argument	opline -> op2		1367982	0					
ANR	1368204	PtrMemberAccess	opline -> op2		1367982	0					
ANR	1368205	Identifier	opline		1367982	0					
ANR	1368206	Identifier	op2		1367982	1					
ANR	1368207	IfStatement	if ( RESULT_USED ( opline ) )		1367982	2					
ANR	1368208	Condition	RESULT_USED ( opline )	1833:7:61894:61912	1367982	0	True				
ANR	1368209	CallExpression	RESULT_USED ( opline )		1367982	0					
ANR	1368210	Callee	RESULT_USED		1367982	0					
ANR	1368211	Identifier	RESULT_USED		1367982	0					
ANR	1368212	ArgumentList	opline		1367982	1					
ANR	1368213	Argument	opline		1367982	0					
ANR	1368214	Identifier	opline		1367982	0					
ANR	1368215	CompoundStatement		40:28:1143:1143	1367982	1					
ANR	1368216	IfStatement	"if ( ! zend_bitset_in ( defined_here , VAR_NUM ( ZEND_RESULT ( opline ) . var ) ) && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_RESULT ( opline ) . var ) ) && opline -> opcode == ZEND_ADD_ARRAY_ELEMENT )"		1367982	0					
ANR	1368217	Condition	"! zend_bitset_in ( defined_here , VAR_NUM ( ZEND_RESULT ( opline ) . var ) ) && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_RESULT ( opline ) . var ) ) && opline -> opcode == ZEND_ADD_ARRAY_ELEMENT"	1834:8:61925:62099	1367982	0	True				
ANR	1368218	AndExpression	"! zend_bitset_in ( defined_here , VAR_NUM ( ZEND_RESULT ( opline ) . var ) ) && ! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_RESULT ( opline ) . var ) ) && opline -> opcode == ZEND_ADD_ARRAY_ELEMENT"		1367982	0		&&			
ANR	1368219	UnaryOperationExpression	"! zend_bitset_in ( defined_here , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	0					
ANR	1368220	UnaryOperator	!		1367982	0					
ANR	1368221	CallExpression	"zend_bitset_in ( defined_here , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	1					
ANR	1368222	Callee	zend_bitset_in		1367982	0					
ANR	1368223	Identifier	zend_bitset_in		1367982	0					
ANR	1368224	ArgumentList	defined_here		1367982	1					
ANR	1368225	Argument	defined_here		1367982	0					
ANR	1368226	Identifier	defined_here		1367982	0					
ANR	1368227	Argument	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	1					
ANR	1368228	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	0					
ANR	1368229	Callee	VAR_NUM		1367982	0					
ANR	1368230	Identifier	VAR_NUM		1367982	0					
ANR	1368231	ArgumentList	ZEND_RESULT ( opline ) . var		1367982	1					
ANR	1368232	Argument	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368233	MemberAccess	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368234	CallExpression	ZEND_RESULT ( opline )		1367982	0					
ANR	1368235	Callee	ZEND_RESULT		1367982	0					
ANR	1368236	Identifier	ZEND_RESULT		1367982	0					
ANR	1368237	ArgumentList	opline		1367982	1					
ANR	1368238	Argument	opline		1367982	0					
ANR	1368239	Identifier	opline		1367982	0					
ANR	1368240	Identifier	var		1367982	1					
ANR	1368241	AndExpression	"! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_RESULT ( opline ) . var ) ) && opline -> opcode == ZEND_ADD_ARRAY_ELEMENT"		1367982	1		&&			
ANR	1368242	UnaryOperationExpression	"! zend_bitset_in ( used_ext , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	0					
ANR	1368243	UnaryOperator	!		1367982	0					
ANR	1368244	CallExpression	"zend_bitset_in ( used_ext , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	1					
ANR	1368245	Callee	zend_bitset_in		1367982	0					
ANR	1368246	Identifier	zend_bitset_in		1367982	0					
ANR	1368247	ArgumentList	used_ext		1367982	1					
ANR	1368248	Argument	used_ext		1367982	0					
ANR	1368249	Identifier	used_ext		1367982	0					
ANR	1368250	Argument	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	1					
ANR	1368251	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	0					
ANR	1368252	Callee	VAR_NUM		1367982	0					
ANR	1368253	Identifier	VAR_NUM		1367982	0					
ANR	1368254	ArgumentList	ZEND_RESULT ( opline ) . var		1367982	1					
ANR	1368255	Argument	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368256	MemberAccess	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368257	CallExpression	ZEND_RESULT ( opline )		1367982	0					
ANR	1368258	Callee	ZEND_RESULT		1367982	0					
ANR	1368259	Identifier	ZEND_RESULT		1367982	0					
ANR	1368260	ArgumentList	opline		1367982	1					
ANR	1368261	Argument	opline		1367982	0					
ANR	1368262	Identifier	opline		1367982	0					
ANR	1368263	Identifier	var		1367982	1					
ANR	1368264	EqualityExpression	opline -> opcode == ZEND_ADD_ARRAY_ELEMENT		1367982	1		==			
ANR	1368265	PtrMemberAccess	opline -> opcode		1367982	0					
ANR	1368266	Identifier	opline		1367982	0					
ANR	1368267	Identifier	opcode		1367982	1					
ANR	1368268	Identifier	ZEND_ADD_ARRAY_ELEMENT		1367982	1					
ANR	1368269	CompoundStatement		42:47:1330:1330	1367982	1					
ANR	1368270	ExpressionStatement	"zend_bitset_incl ( used_ext , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"	1837:5:62160:62220	1367982	0	True				
ANR	1368271	CallExpression	"zend_bitset_incl ( used_ext , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	0					
ANR	1368272	Callee	zend_bitset_incl		1367982	0					
ANR	1368273	Identifier	zend_bitset_incl		1367982	0					
ANR	1368274	ArgumentList	used_ext		1367982	1					
ANR	1368275	Argument	used_ext		1367982	0					
ANR	1368276	Identifier	used_ext		1367982	0					
ANR	1368277	Argument	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	1					
ANR	1368278	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	0					
ANR	1368279	Callee	VAR_NUM		1367982	0					
ANR	1368280	Identifier	VAR_NUM		1367982	0					
ANR	1368281	ArgumentList	ZEND_RESULT ( opline ) . var		1367982	1					
ANR	1368282	Argument	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368283	MemberAccess	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368284	CallExpression	ZEND_RESULT ( opline )		1367982	0					
ANR	1368285	Callee	ZEND_RESULT		1367982	0					
ANR	1368286	Identifier	ZEND_RESULT		1367982	0					
ANR	1368287	ArgumentList	opline		1367982	1					
ANR	1368288	Argument	opline		1367982	0					
ANR	1368289	Identifier	opline		1367982	0					
ANR	1368290	Identifier	var		1367982	1					
ANR	1368291	ExpressionStatement	"zend_bitset_incl ( defined_here , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"	1839:4:62232:62296	1367982	1	True				
ANR	1368292	CallExpression	"zend_bitset_incl ( defined_here , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	0					
ANR	1368293	Callee	zend_bitset_incl		1367982	0					
ANR	1368294	Identifier	zend_bitset_incl		1367982	0					
ANR	1368295	ArgumentList	defined_here		1367982	1					
ANR	1368296	Argument	defined_here		1367982	0					
ANR	1368297	Identifier	defined_here		1367982	0					
ANR	1368298	Argument	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	1					
ANR	1368299	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	0					
ANR	1368300	Callee	VAR_NUM		1367982	0					
ANR	1368301	Identifier	VAR_NUM		1367982	0					
ANR	1368302	ArgumentList	ZEND_RESULT ( opline ) . var		1367982	1					
ANR	1368303	Argument	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368304	MemberAccess	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368305	CallExpression	ZEND_RESULT ( opline )		1367982	0					
ANR	1368306	Callee	ZEND_RESULT		1367982	0					
ANR	1368307	Identifier	ZEND_RESULT		1367982	0					
ANR	1368308	ArgumentList	opline		1367982	1					
ANR	1368309	Argument	opline		1367982	0					
ANR	1368310	Identifier	opline		1367982	0					
ANR	1368311	Identifier	var		1367982	1					
ANR	1368312	ExpressionStatement	opline ++	1841:3:62306:62314	1367982	3	True				
ANR	1368313	PostIncDecOperationExpression	opline ++		1367982	0					
ANR	1368314	Identifier	opline		1367982	0					
ANR	1368315	IncDec	++		1367982	1					
ANR	1368316	ExpressionStatement	next_block = next_block -> next	1843:2:62322:62351	1367982	5	True				
ANR	1368317	AssignmentExpression	next_block = next_block -> next		1367982	0		=			
ANR	1368318	Identifier	next_block		1367982	0					
ANR	1368319	PtrMemberAccess	next_block -> next		1367982	1					
ANR	1368320	Identifier	next_block		1367982	0					
ANR	1368321	Identifier	next		1367982	1					
ANR	1368322	CompoundStatement		55:2:1610:1615	1367982	12					
ANR	1368323	IdentifierDeclStatement	int i ;	1848:2:62382:62387	1367982	0	True				
ANR	1368324	IdentifierDecl	i		1367982	0					
ANR	1368325	IdentifierDeclType	int		1367982	0					
ANR	1368326	Identifier	i		1367982	1					
ANR	1368327	ForStatement	for ( i = op_array -> last_var ; i < op_array -> T ; i ++ )		1367982	1					
ANR	1368328	ForInit	i = op_array -> last_var ;	1849:7:62396:62418	1367982	0	True				
ANR	1368329	AssignmentExpression	i = op_array -> last_var		1367982	0		=			
ANR	1368330	Identifier	i		1367982	0					
ANR	1368331	PtrMemberAccess	op_array -> last_var		1367982	1					
ANR	1368332	Identifier	op_array		1367982	0					
ANR	1368333	Identifier	last_var		1367982	1					
ANR	1368334	Condition	i < op_array -> T	1849:31:62420:62433	1367982	1	True				
ANR	1368335	RelationalExpression	i < op_array -> T		1367982	0		<			
ANR	1368336	Identifier	i		1367982	0					
ANR	1368337	PtrMemberAccess	op_array -> T		1367982	1					
ANR	1368338	Identifier	op_array		1367982	0					
ANR	1368339	Identifier	T		1367982	1					
ANR	1368340	PostIncDecOperationExpression	i ++	1849:47:62436:62438	1367982	2	True				
ANR	1368341	Identifier	i		1367982	0					
ANR	1368342	IncDec	++		1367982	1					
ANR	1368343	CompoundStatement		56:52:1669:1669	1367982	3					
ANR	1368344	ExpressionStatement	"fprintf ( stderr , ""T%d: %c\\n"" , i , zend_bitset_in ( used_ext , i ) + '0' )"	1850:3:62446:62512	1367982	0	True				
ANR	1368345	CallExpression	"fprintf ( stderr , ""T%d: %c\\n"" , i , zend_bitset_in ( used_ext , i ) + '0' )"		1367982	0					
ANR	1368346	Callee	fprintf		1367982	0					
ANR	1368347	Identifier	fprintf		1367982	0					
ANR	1368348	ArgumentList	stderr		1367982	1					
ANR	1368349	Argument	stderr		1367982	0					
ANR	1368350	Identifier	stderr		1367982	0					
ANR	1368351	Argument	"""T%d: %c\\n"""		1367982	1					
ANR	1368352	PrimaryExpression	"""T%d: %c\\n"""		1367982	0					
ANR	1368353	Argument	i		1367982	2					
ANR	1368354	Identifier	i		1367982	0					
ANR	1368355	Argument	"zend_bitset_in ( used_ext , i ) + '0'"		1367982	3					
ANR	1368356	AdditiveExpression	"zend_bitset_in ( used_ext , i ) + '0'"		1367982	0		+			
ANR	1368357	CallExpression	"zend_bitset_in ( used_ext , i )"		1367982	0					
ANR	1368358	Callee	zend_bitset_in		1367982	0					
ANR	1368359	Identifier	zend_bitset_in		1367982	0					
ANR	1368360	ArgumentList	used_ext		1367982	1					
ANR	1368361	Argument	used_ext		1367982	0					
ANR	1368362	Identifier	used_ext		1367982	0					
ANR	1368363	Argument	i		1367982	1					
ANR	1368364	Identifier	i		1367982	0					
ANR	1368365	PrimaryExpression	'0'		1367982	1					
ANR	1368366	WhileStatement	while ( block )		1367982	13					
ANR	1368367	Condition	block	1855:8:62537:62541	1367982	0	True				
ANR	1368368	Identifier	block		1367982	0					
ANR	1368369	CompoundStatement		63:2:1776:1830	1367982	1					
ANR	1368370	IdentifierDeclStatement	zend_op * opline = block -> start_opline + block -> len - 1 ;	1856:2:62548:62602	1367982	0	True				
ANR	1368371	IdentifierDecl	* opline = block -> start_opline + block -> len - 1		1367982	0					
ANR	1368372	IdentifierDeclType	zend_op *		1367982	0					
ANR	1368373	Identifier	opline		1367982	1					
ANR	1368374	AssignmentExpression	* opline = block -> start_opline + block -> len - 1		1367982	2		=			
ANR	1368375	Identifier	opline		1367982	0					
ANR	1368376	AdditiveExpression	block -> start_opline + block -> len - 1		1367982	1		+			
ANR	1368377	PtrMemberAccess	block -> start_opline		1367982	0					
ANR	1368378	Identifier	block		1367982	0					
ANR	1368379	Identifier	start_opline		1367982	1					
ANR	1368380	AdditiveExpression	block -> len - 1		1367982	1		-			
ANR	1368381	PtrMemberAccess	block -> len		1367982	0					
ANR	1368382	Identifier	block		1367982	0					
ANR	1368383	Identifier	len		1367982	1					
ANR	1368384	PrimaryExpression	1		1367982	1					
ANR	1368385	IfStatement	if ( ! block -> access )		1367982	1					
ANR	1368386	Condition	! block -> access	1858:6:62611:62624	1367982	0	True				
ANR	1368387	UnaryOperationExpression	! block -> access		1367982	0					
ANR	1368388	UnaryOperator	!		1367982	0					
ANR	1368389	PtrMemberAccess	block -> access		1367982	1					
ANR	1368390	Identifier	block		1367982	0					
ANR	1368391	Identifier	access		1367982	1					
ANR	1368392	CompoundStatement		65:22:1855:1855	1367982	1					
ANR	1368393	ExpressionStatement	block = block -> next	1859:3:62632:62651	1367982	0	True				
ANR	1368394	AssignmentExpression	block = block -> next		1367982	0		=			
ANR	1368395	Identifier	block		1367982	0					
ANR	1368396	PtrMemberAccess	block -> next		1367982	1					
ANR	1368397	Identifier	block		1367982	0					
ANR	1368398	Identifier	next		1367982	1					
ANR	1368399	ContinueStatement	continue ;	1860:3:62656:62664	1367982	1	True				
ANR	1368400	ExpressionStatement	"zend_bitset_copy ( usage , used_ext , bitset_len )"	1863:2:62673:62718	1367982	2	True				
ANR	1368401	CallExpression	"zend_bitset_copy ( usage , used_ext , bitset_len )"		1367982	0					
ANR	1368402	Callee	zend_bitset_copy		1367982	0					
ANR	1368403	Identifier	zend_bitset_copy		1367982	0					
ANR	1368404	ArgumentList	usage		1367982	1					
ANR	1368405	Argument	usage		1367982	0					
ANR	1368406	Identifier	usage		1367982	0					
ANR	1368407	Argument	used_ext		1367982	1					
ANR	1368408	Identifier	used_ext		1367982	0					
ANR	1368409	Argument	bitset_len		1367982	2					
ANR	1368410	Identifier	bitset_len		1367982	0					
ANR	1368411	WhileStatement	while ( opline >= block -> start_opline )		1367982	3					
ANR	1368412	Condition	opline >= block -> start_opline	1865:9:62730:62758	1367982	0	True				
ANR	1368413	RelationalExpression	opline >= block -> start_opline		1367982	0		>=			
ANR	1368414	Identifier	opline		1367982	0					
ANR	1368415	PtrMemberAccess	block -> start_opline		1367982	1					
ANR	1368416	Identifier	block		1367982	0					
ANR	1368417	Identifier	start_opline		1367982	1					
ANR	1368418	CompoundStatement		72:40:1989:1989	1367982	1					
ANR	1368419	IfStatement	if ( RES_NEVER_USED ( opline ) )		1367982	0					
ANR	1368420	Condition	RES_NEVER_USED ( opline )	1867:7:62792:62813	1367982	0	True				
ANR	1368421	CallExpression	RES_NEVER_USED ( opline )		1367982	0					
ANR	1368422	Callee	RES_NEVER_USED		1367982	0					
ANR	1368423	Identifier	RES_NEVER_USED		1367982	0					
ANR	1368424	ArgumentList	opline		1367982	1					
ANR	1368425	Argument	opline		1367982	0					
ANR	1368426	Identifier	opline		1367982	0					
ANR	1368427	CompoundStatement		74:31:2044:2044	1367982	1					
ANR	1368428	SwitchStatement	switch ( opline -> opcode )		1367982	0					
ANR	1368429	Condition	opline -> opcode	1868:12:62830:62843	1367982	0	True				
ANR	1368430	PtrMemberAccess	opline -> opcode		1367982	0					
ANR	1368431	Identifier	opline		1367982	0					
ANR	1368432	Identifier	opcode		1367982	1					
ANR	1368433	CompoundStatement		75:28:2074:2074	1367982	1					
ANR	1368434	Label	case ZEND_ASSIGN_ADD :	1869:5:62853:62873	1367982	0	True				
ANR	1368435	Identifier	ZEND_ASSIGN_ADD		1367982	0					
ANR	1368436	Label	case ZEND_ASSIGN_SUB :	1870:5:62880:62900	1367982	1	True				
ANR	1368437	Identifier	ZEND_ASSIGN_SUB		1367982	0					
ANR	1368438	Label	case ZEND_ASSIGN_MUL :	1871:5:62907:62927	1367982	2	True				
ANR	1368439	Identifier	ZEND_ASSIGN_MUL		1367982	0					
ANR	1368440	Label	case ZEND_ASSIGN_DIV :	1872:5:62934:62954	1367982	3	True				
ANR	1368441	Identifier	ZEND_ASSIGN_DIV		1367982	0					
ANR	1368442	Label	case ZEND_ASSIGN_POW :	1873:5:62961:62981	1367982	4	True				
ANR	1368443	Identifier	ZEND_ASSIGN_POW		1367982	0					
ANR	1368444	Label	case ZEND_ASSIGN_MOD :	1874:5:62988:63008	1367982	5	True				
ANR	1368445	Identifier	ZEND_ASSIGN_MOD		1367982	0					
ANR	1368446	Label	case ZEND_ASSIGN_SL :	1875:5:63015:63034	1367982	6	True				
ANR	1368447	Identifier	ZEND_ASSIGN_SL		1367982	0					
ANR	1368448	Label	case ZEND_ASSIGN_SR :	1876:5:63041:63060	1367982	7	True				
ANR	1368449	Identifier	ZEND_ASSIGN_SR		1367982	0					
ANR	1368450	Label	case ZEND_ASSIGN_CONCAT :	1877:5:63067:63090	1367982	8	True				
ANR	1368451	Identifier	ZEND_ASSIGN_CONCAT		1367982	0					
ANR	1368452	Label	case ZEND_ASSIGN_BW_OR :	1878:5:63097:63119	1367982	9	True				
ANR	1368453	Identifier	ZEND_ASSIGN_BW_OR		1367982	0					
ANR	1368454	Label	case ZEND_ASSIGN_BW_AND :	1879:5:63126:63149	1367982	10	True				
ANR	1368455	Identifier	ZEND_ASSIGN_BW_AND		1367982	0					
ANR	1368456	Label	case ZEND_ASSIGN_BW_XOR :	1880:5:63156:63179	1367982	11	True				
ANR	1368457	Identifier	ZEND_ASSIGN_BW_XOR		1367982	0					
ANR	1368458	Label	case ZEND_PRE_INC :	1881:5:63186:63203	1367982	12	True				
ANR	1368459	Identifier	ZEND_PRE_INC		1367982	0					
ANR	1368460	Label	case ZEND_PRE_DEC :	1882:5:63210:63227	1367982	13	True				
ANR	1368461	Identifier	ZEND_PRE_DEC		1367982	0					
ANR	1368462	Label	case ZEND_POST_INC :	1883:5:63234:63252	1367982	14	True				
ANR	1368463	Identifier	ZEND_POST_INC		1367982	0					
ANR	1368464	Label	case ZEND_POST_DEC :	1884:5:63259:63277	1367982	15	True				
ANR	1368465	Identifier	ZEND_POST_DEC		1367982	0					
ANR	1368466	Label	case ZEND_ASSIGN :	1885:5:63284:63300	1367982	16	True				
ANR	1368467	Identifier	ZEND_ASSIGN		1367982	0					
ANR	1368468	Label	case ZEND_ASSIGN_REF :	1886:5:63307:63327	1367982	17	True				
ANR	1368469	Identifier	ZEND_ASSIGN_REF		1367982	0					
ANR	1368470	Label	case ZEND_DO_FCALL :	1887:5:63334:63352	1367982	18	True				
ANR	1368471	Identifier	ZEND_DO_FCALL		1367982	0					
ANR	1368472	Label	case ZEND_DO_ICALL :	1888:5:63359:63377	1367982	19	True				
ANR	1368473	Identifier	ZEND_DO_ICALL		1367982	0					
ANR	1368474	Label	case ZEND_DO_UCALL :	1889:5:63384:63402	1367982	20	True				
ANR	1368475	Identifier	ZEND_DO_UCALL		1367982	0					
ANR	1368476	Label	case ZEND_DO_FCALL_BY_NAME :	1890:5:63409:63435	1367982	21	True				
ANR	1368477	Identifier	ZEND_DO_FCALL_BY_NAME		1367982	0					
ANR	1368478	IfStatement	if ( ZEND_RESULT_TYPE ( opline ) == IS_VAR )		1367982	22					
ANR	1368479	Condition	ZEND_RESULT_TYPE ( opline ) == IS_VAR	1891:10:63447:63480	1367982	0	True				
ANR	1368480	EqualityExpression	ZEND_RESULT_TYPE ( opline ) == IS_VAR		1367982	0		==			
ANR	1368481	CallExpression	ZEND_RESULT_TYPE ( opline )		1367982	0					
ANR	1368482	Callee	ZEND_RESULT_TYPE		1367982	0					
ANR	1368483	Identifier	ZEND_RESULT_TYPE		1367982	0					
ANR	1368484	ArgumentList	opline		1367982	1					
ANR	1368485	Argument	opline		1367982	0					
ANR	1368486	Identifier	opline		1367982	0					
ANR	1368487	Identifier	IS_VAR		1367982	1					
ANR	1368488	CompoundStatement		98:46:2711:2711	1367982	1					
ANR	1368489	ExpressionStatement	ZEND_RESULT_TYPE ( opline ) |= EXT_TYPE_UNUSED	1892:7:63492:63535	1367982	0	True				
ANR	1368490	AssignmentExpression	ZEND_RESULT_TYPE ( opline ) |= EXT_TYPE_UNUSED		1367982	0		|=			
ANR	1368491	CallExpression	ZEND_RESULT_TYPE ( opline )		1367982	0					
ANR	1368492	Callee	ZEND_RESULT_TYPE		1367982	0					
ANR	1368493	Identifier	ZEND_RESULT_TYPE		1367982	0					
ANR	1368494	ArgumentList	opline		1367982	1					
ANR	1368495	Argument	opline		1367982	0					
ANR	1368496	Identifier	opline		1367982	0					
ANR	1368497	Identifier	EXT_TYPE_UNUSED		1367982	1					
ANR	1368498	BreakStatement	break ;	1894:6:63551:63556	1367982	23	True				
ANR	1368499	Label	case ZEND_QM_ASSIGN :	1895:5:63563:63582	1367982	24	True				
ANR	1368500	Identifier	ZEND_QM_ASSIGN		1367982	0					
ANR	1368501	Label	case ZEND_BOOL :	1896:5:63589:63603	1367982	25	True				
ANR	1368502	Identifier	ZEND_BOOL		1367982	0					
ANR	1368503	Label	case ZEND_BOOL_NOT :	1897:5:63610:63628	1367982	26	True				
ANR	1368504	Identifier	ZEND_BOOL_NOT		1367982	0					
ANR	1368505	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == IS_CONST )		1367982	27					
ANR	1368506	Condition	ZEND_OP1_TYPE ( opline ) == IS_CONST	1898:10:63640:63672	1367982	0	True				
ANR	1368507	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_CONST		1367982	0		==			
ANR	1368508	CallExpression	ZEND_OP1_TYPE ( opline )		1367982	0					
ANR	1368509	Callee	ZEND_OP1_TYPE		1367982	0					
ANR	1368510	Identifier	ZEND_OP1_TYPE		1367982	0					
ANR	1368511	ArgumentList	opline		1367982	1					
ANR	1368512	Argument	opline		1367982	0					
ANR	1368513	Identifier	opline		1367982	0					
ANR	1368514	Identifier	IS_CONST		1367982	1					
ANR	1368515	CompoundStatement		105:45:2903:2903	1367982	1					
ANR	1368516	ExpressionStatement	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )	1899:7:63684:63723	1367982	0	True				
ANR	1368517	CallExpression	literal_dtor ( & ZEND_OP1_LITERAL ( opline ) )		1367982	0					
ANR	1368518	Callee	literal_dtor		1367982	0					
ANR	1368519	Identifier	literal_dtor		1367982	0					
ANR	1368520	ArgumentList	& ZEND_OP1_LITERAL ( opline )		1367982	1					
ANR	1368521	Argument	& ZEND_OP1_LITERAL ( opline )		1367982	0					
ANR	1368522	UnaryOperationExpression	& ZEND_OP1_LITERAL ( opline )		1367982	0					
ANR	1368523	UnaryOperator	&		1367982	0					
ANR	1368524	CallExpression	ZEND_OP1_LITERAL ( opline )		1367982	1					
ANR	1368525	Callee	ZEND_OP1_LITERAL		1367982	0					
ANR	1368526	Identifier	ZEND_OP1_LITERAL		1367982	0					
ANR	1368527	ArgumentList	opline		1367982	1					
ANR	1368528	Argument	opline		1367982	0					
ANR	1368529	Identifier	opline		1367982	0					
ANR	1368530	ExpressionStatement	MAKE_NOP ( opline )	1901:6:63739:63755	1367982	28	True				
ANR	1368531	CallExpression	MAKE_NOP ( opline )		1367982	0					
ANR	1368532	Callee	MAKE_NOP		1367982	0					
ANR	1368533	Identifier	MAKE_NOP		1367982	0					
ANR	1368534	ArgumentList	opline		1367982	1					
ANR	1368535	Argument	opline		1367982	0					
ANR	1368536	Identifier	opline		1367982	0					
ANR	1368537	BreakStatement	break ;	1902:6:63763:63768	1367982	29	True				
ANR	1368538	Label	case ZEND_JMPZ_EX :	1903:5:63775:63792	1367982	30	True				
ANR	1368539	Identifier	ZEND_JMPZ_EX		1367982	0					
ANR	1368540	Label	case ZEND_JMPNZ_EX :	1904:5:63799:63817	1367982	31	True				
ANR	1368541	Identifier	ZEND_JMPNZ_EX		1367982	0					
ANR	1368542	ExpressionStatement	opline -> opcode -= 3	1905:6:63825:63844	1367982	32	True				
ANR	1368543	AssignmentExpression	opline -> opcode -= 3		1367982	0		-=			
ANR	1368544	PtrMemberAccess	opline -> opcode		1367982	0					
ANR	1368545	Identifier	opline		1367982	0					
ANR	1368546	Identifier	opcode		1367982	1					
ANR	1368547	PrimaryExpression	3		1367982	1					
ANR	1368548	ExpressionStatement	SET_UNUSED ( opline -> result )	1906:6:63852:63878	1367982	33	True				
ANR	1368549	CallExpression	SET_UNUSED ( opline -> result )		1367982	0					
ANR	1368550	Callee	SET_UNUSED		1367982	0					
ANR	1368551	Identifier	SET_UNUSED		1367982	0					
ANR	1368552	ArgumentList	opline -> result		1367982	1					
ANR	1368553	Argument	opline -> result		1367982	0					
ANR	1368554	PtrMemberAccess	opline -> result		1367982	0					
ANR	1368555	Identifier	opline		1367982	0					
ANR	1368556	Identifier	result		1367982	1					
ANR	1368557	BreakStatement	break ;	1907:6:63886:63891	1367982	34	True				
ANR	1368558	IfStatement	if ( opline -> opcode == ZEND_ADD_ARRAY_ELEMENT )		1367982	1					
ANR	1368559	Condition	opline -> opcode == ZEND_ADD_ARRAY_ELEMENT	1911:7:63912:63951	1367982	0	True				
ANR	1368560	EqualityExpression	opline -> opcode == ZEND_ADD_ARRAY_ELEMENT		1367982	0		==			
ANR	1368561	PtrMemberAccess	opline -> opcode		1367982	0					
ANR	1368562	Identifier	opline		1367982	0					
ANR	1368563	Identifier	opcode		1367982	1					
ANR	1368564	Identifier	ZEND_ADD_ARRAY_ELEMENT		1367982	1					
ANR	1368565	CompoundStatement		118:49:3182:3182	1367982	1					
ANR	1368566	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR )		1367982	0					
ANR	1368567	Condition	ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR	1912:8:63964:64033	1367982	0	True				
ANR	1368568	OrExpression	ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		1367982	0		||			
ANR	1368569	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_VAR		1367982	0		==			
ANR	1368570	CallExpression	ZEND_OP1_TYPE ( opline )		1367982	0					
ANR	1368571	Callee	ZEND_OP1_TYPE		1367982	0					
ANR	1368572	Identifier	ZEND_OP1_TYPE		1367982	0					
ANR	1368573	ArgumentList	opline		1367982	1					
ANR	1368574	Argument	opline		1367982	0					
ANR	1368575	Identifier	opline		1367982	0					
ANR	1368576	Identifier	IS_VAR		1367982	1					
ANR	1368577	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		1367982	1		==			
ANR	1368578	CallExpression	ZEND_OP1_TYPE ( opline )		1367982	0					
ANR	1368579	Callee	ZEND_OP1_TYPE		1367982	0					
ANR	1368580	Identifier	ZEND_OP1_TYPE		1367982	0					
ANR	1368581	ArgumentList	opline		1367982	1					
ANR	1368582	Argument	opline		1367982	0					
ANR	1368583	Identifier	opline		1367982	0					
ANR	1368584	Identifier	IS_TMP_VAR		1367982	1					
ANR	1368585	CompoundStatement		119:80:3264:3264	1367982	1					
ANR	1368586	ExpressionStatement	"zend_bitset_incl ( usage , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"	1913:5:64043:64100	1367982	0	True				
ANR	1368587	CallExpression	"zend_bitset_incl ( usage , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	0					
ANR	1368588	Callee	zend_bitset_incl		1367982	0					
ANR	1368589	Identifier	zend_bitset_incl		1367982	0					
ANR	1368590	ArgumentList	usage		1367982	1					
ANR	1368591	Argument	usage		1367982	0					
ANR	1368592	Identifier	usage		1367982	0					
ANR	1368593	Argument	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	1					
ANR	1368594	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	0					
ANR	1368595	Callee	VAR_NUM		1367982	0					
ANR	1368596	Identifier	VAR_NUM		1367982	0					
ANR	1368597	ArgumentList	ZEND_RESULT ( opline ) . var		1367982	1					
ANR	1368598	Argument	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368599	MemberAccess	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368600	CallExpression	ZEND_RESULT ( opline )		1367982	0					
ANR	1368601	Callee	ZEND_RESULT		1367982	0					
ANR	1368602	Identifier	ZEND_RESULT		1367982	0					
ANR	1368603	ArgumentList	opline		1367982	1					
ANR	1368604	Argument	opline		1367982	0					
ANR	1368605	Identifier	opline		1367982	0					
ANR	1368606	Identifier	var		1367982	1					
ANR	1368607	ElseStatement	else		1367982	0					
ANR	1368608	CompoundStatement		122:10:3346:3346	1367982	0					
ANR	1368609	IfStatement	if ( RESULT_USED ( opline ) )		1367982	0					
ANR	1368610	Condition	RESULT_USED ( opline )	1916:8:64128:64146	1367982	0	True				
ANR	1368611	CallExpression	RESULT_USED ( opline )		1367982	0					
ANR	1368612	Callee	RESULT_USED		1367982	0					
ANR	1368613	Identifier	RESULT_USED		1367982	0					
ANR	1368614	ArgumentList	opline		1367982	1					
ANR	1368615	Argument	opline		1367982	0					
ANR	1368616	Identifier	opline		1367982	0					
ANR	1368617	CompoundStatement		123:29:3377:3377	1367982	1					
ANR	1368618	ExpressionStatement	"zend_bitset_excl ( usage , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"	1917:5:64156:64213	1367982	0	True				
ANR	1368619	CallExpression	"zend_bitset_excl ( usage , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	0					
ANR	1368620	Callee	zend_bitset_excl		1367982	0					
ANR	1368621	Identifier	zend_bitset_excl		1367982	0					
ANR	1368622	ArgumentList	usage		1367982	1					
ANR	1368623	Argument	usage		1367982	0					
ANR	1368624	Identifier	usage		1367982	0					
ANR	1368625	Argument	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	1					
ANR	1368626	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	0					
ANR	1368627	Callee	VAR_NUM		1367982	0					
ANR	1368628	Identifier	VAR_NUM		1367982	0					
ANR	1368629	ArgumentList	ZEND_RESULT ( opline ) . var		1367982	1					
ANR	1368630	Argument	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368631	MemberAccess	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368632	CallExpression	ZEND_RESULT ( opline )		1367982	0					
ANR	1368633	Callee	ZEND_RESULT		1367982	0					
ANR	1368634	Identifier	ZEND_RESULT		1367982	0					
ANR	1368635	ArgumentList	opline		1367982	1					
ANR	1368636	Argument	opline		1367982	0					
ANR	1368637	Identifier	opline		1367982	0					
ANR	1368638	Identifier	var		1367982	1					
ANR	1368639	IfStatement	if ( ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR )		1367982	2					
ANR	1368640	Condition	ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR	1921:7:64234:64303	1367982	0	True				
ANR	1368641	OrExpression	ZEND_OP1_TYPE ( opline ) == IS_VAR || ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		1367982	0		||			
ANR	1368642	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_VAR		1367982	0		==			
ANR	1368643	CallExpression	ZEND_OP1_TYPE ( opline )		1367982	0					
ANR	1368644	Callee	ZEND_OP1_TYPE		1367982	0					
ANR	1368645	Identifier	ZEND_OP1_TYPE		1367982	0					
ANR	1368646	ArgumentList	opline		1367982	1					
ANR	1368647	Argument	opline		1367982	0					
ANR	1368648	Identifier	opline		1367982	0					
ANR	1368649	Identifier	IS_VAR		1367982	1					
ANR	1368650	EqualityExpression	ZEND_OP1_TYPE ( opline ) == IS_TMP_VAR		1367982	1		==			
ANR	1368651	CallExpression	ZEND_OP1_TYPE ( opline )		1367982	0					
ANR	1368652	Callee	ZEND_OP1_TYPE		1367982	0					
ANR	1368653	Identifier	ZEND_OP1_TYPE		1367982	0					
ANR	1368654	ArgumentList	opline		1367982	1					
ANR	1368655	Argument	opline		1367982	0					
ANR	1368656	Identifier	opline		1367982	0					
ANR	1368657	Identifier	IS_TMP_VAR		1367982	1					
ANR	1368658	CompoundStatement		128:79:3534:3534	1367982	1					
ANR	1368659	ExpressionStatement	"zend_bitset_incl ( usage , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"	1922:4:64312:64366	1367982	0	True				
ANR	1368660	CallExpression	"zend_bitset_incl ( usage , VAR_NUM ( ZEND_OP1 ( opline ) . var ) )"		1367982	0					
ANR	1368661	Callee	zend_bitset_incl		1367982	0					
ANR	1368662	Identifier	zend_bitset_incl		1367982	0					
ANR	1368663	ArgumentList	usage		1367982	1					
ANR	1368664	Argument	usage		1367982	0					
ANR	1368665	Identifier	usage		1367982	0					
ANR	1368666	Argument	VAR_NUM ( ZEND_OP1 ( opline ) . var )		1367982	1					
ANR	1368667	CallExpression	VAR_NUM ( ZEND_OP1 ( opline ) . var )		1367982	0					
ANR	1368668	Callee	VAR_NUM		1367982	0					
ANR	1368669	Identifier	VAR_NUM		1367982	0					
ANR	1368670	ArgumentList	ZEND_OP1 ( opline ) . var		1367982	1					
ANR	1368671	Argument	ZEND_OP1 ( opline ) . var		1367982	0					
ANR	1368672	MemberAccess	ZEND_OP1 ( opline ) . var		1367982	0					
ANR	1368673	CallExpression	ZEND_OP1 ( opline )		1367982	0					
ANR	1368674	Callee	ZEND_OP1		1367982	0					
ANR	1368675	Identifier	ZEND_OP1		1367982	0					
ANR	1368676	ArgumentList	opline		1367982	1					
ANR	1368677	Argument	opline		1367982	0					
ANR	1368678	Identifier	opline		1367982	0					
ANR	1368679	Identifier	var		1367982	1					
ANR	1368680	IfStatement	if ( ZEND_OP2_TYPE ( opline ) == IS_VAR || ZEND_OP2_TYPE ( opline ) == IS_TMP_VAR )		1367982	3					
ANR	1368681	Condition	ZEND_OP2_TYPE ( opline ) == IS_VAR || ZEND_OP2_TYPE ( opline ) == IS_TMP_VAR	1925:7:64381:64450	1367982	0	True				
ANR	1368682	OrExpression	ZEND_OP2_TYPE ( opline ) == IS_VAR || ZEND_OP2_TYPE ( opline ) == IS_TMP_VAR		1367982	0		||			
ANR	1368683	EqualityExpression	ZEND_OP2_TYPE ( opline ) == IS_VAR		1367982	0		==			
ANR	1368684	CallExpression	ZEND_OP2_TYPE ( opline )		1367982	0					
ANR	1368685	Callee	ZEND_OP2_TYPE		1367982	0					
ANR	1368686	Identifier	ZEND_OP2_TYPE		1367982	0					
ANR	1368687	ArgumentList	opline		1367982	1					
ANR	1368688	Argument	opline		1367982	0					
ANR	1368689	Identifier	opline		1367982	0					
ANR	1368690	Identifier	IS_VAR		1367982	1					
ANR	1368691	EqualityExpression	ZEND_OP2_TYPE ( opline ) == IS_TMP_VAR		1367982	1		==			
ANR	1368692	CallExpression	ZEND_OP2_TYPE ( opline )		1367982	0					
ANR	1368693	Callee	ZEND_OP2_TYPE		1367982	0					
ANR	1368694	Identifier	ZEND_OP2_TYPE		1367982	0					
ANR	1368695	ArgumentList	opline		1367982	1					
ANR	1368696	Argument	opline		1367982	0					
ANR	1368697	Identifier	opline		1367982	0					
ANR	1368698	Identifier	IS_TMP_VAR		1367982	1					
ANR	1368699	CompoundStatement		132:79:3681:3681	1367982	1					
ANR	1368700	ExpressionStatement	"zend_bitset_incl ( usage , VAR_NUM ( ZEND_OP2 ( opline ) . var ) )"	1926:4:64459:64513	1367982	0	True				
ANR	1368701	CallExpression	"zend_bitset_incl ( usage , VAR_NUM ( ZEND_OP2 ( opline ) . var ) )"		1367982	0					
ANR	1368702	Callee	zend_bitset_incl		1367982	0					
ANR	1368703	Identifier	zend_bitset_incl		1367982	0					
ANR	1368704	ArgumentList	usage		1367982	1					
ANR	1368705	Argument	usage		1367982	0					
ANR	1368706	Identifier	usage		1367982	0					
ANR	1368707	Argument	VAR_NUM ( ZEND_OP2 ( opline ) . var )		1367982	1					
ANR	1368708	CallExpression	VAR_NUM ( ZEND_OP2 ( opline ) . var )		1367982	0					
ANR	1368709	Callee	VAR_NUM		1367982	0					
ANR	1368710	Identifier	VAR_NUM		1367982	0					
ANR	1368711	ArgumentList	ZEND_OP2 ( opline ) . var		1367982	1					
ANR	1368712	Argument	ZEND_OP2 ( opline ) . var		1367982	0					
ANR	1368713	MemberAccess	ZEND_OP2 ( opline ) . var		1367982	0					
ANR	1368714	CallExpression	ZEND_OP2 ( opline )		1367982	0					
ANR	1368715	Callee	ZEND_OP2		1367982	0					
ANR	1368716	Identifier	ZEND_OP2		1367982	0					
ANR	1368717	ArgumentList	opline		1367982	1					
ANR	1368718	Argument	opline		1367982	0					
ANR	1368719	Identifier	opline		1367982	0					
ANR	1368720	Identifier	var		1367982	1					
ANR	1368721	IfStatement	"if ( ( ZEND_RESULT_TYPE ( opline ) & IS_VAR ) && ( ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED ) && zend_bitset_in ( usage , VAR_NUM ( ZEND_RESULT ( opline ) . var ) ) )"		1367982	4					
ANR	1368722	Condition	"( ZEND_RESULT_TYPE ( opline ) & IS_VAR ) && ( ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED ) && zend_bitset_in ( usage , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"	1929:7:64528:64701	1367982	0	True				
ANR	1368723	AndExpression	"( ZEND_RESULT_TYPE ( opline ) & IS_VAR ) && ( ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED ) && zend_bitset_in ( usage , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	0		&&			
ANR	1368724	BitAndExpression	ZEND_RESULT_TYPE ( opline ) & IS_VAR		1367982	0		&			
ANR	1368725	CallExpression	ZEND_RESULT_TYPE ( opline )		1367982	0					
ANR	1368726	Callee	ZEND_RESULT_TYPE		1367982	0					
ANR	1368727	Identifier	ZEND_RESULT_TYPE		1367982	0					
ANR	1368728	ArgumentList	opline		1367982	1					
ANR	1368729	Argument	opline		1367982	0					
ANR	1368730	Identifier	opline		1367982	0					
ANR	1368731	Identifier	IS_VAR		1367982	1					
ANR	1368732	AndExpression	"( ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED ) && zend_bitset_in ( usage , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	1		&&			
ANR	1368733	BitAndExpression	ZEND_RESULT_TYPE ( opline ) & EXT_TYPE_UNUSED		1367982	0		&			
ANR	1368734	CallExpression	ZEND_RESULT_TYPE ( opline )		1367982	0					
ANR	1368735	Callee	ZEND_RESULT_TYPE		1367982	0					
ANR	1368736	Identifier	ZEND_RESULT_TYPE		1367982	0					
ANR	1368737	ArgumentList	opline		1367982	1					
ANR	1368738	Argument	opline		1367982	0					
ANR	1368739	Identifier	opline		1367982	0					
ANR	1368740	Identifier	EXT_TYPE_UNUSED		1367982	1					
ANR	1368741	CallExpression	"zend_bitset_in ( usage , VAR_NUM ( ZEND_RESULT ( opline ) . var ) )"		1367982	1					
ANR	1368742	Callee	zend_bitset_in		1367982	0					
ANR	1368743	Identifier	zend_bitset_in		1367982	0					
ANR	1368744	ArgumentList	usage		1367982	1					
ANR	1368745	Argument	usage		1367982	0					
ANR	1368746	Identifier	usage		1367982	0					
ANR	1368747	Argument	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	1					
ANR	1368748	CallExpression	VAR_NUM ( ZEND_RESULT ( opline ) . var )		1367982	0					
ANR	1368749	Callee	VAR_NUM		1367982	0					
ANR	1368750	Identifier	VAR_NUM		1367982	0					
ANR	1368751	ArgumentList	ZEND_RESULT ( opline ) . var		1367982	1					
ANR	1368752	Argument	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368753	MemberAccess	ZEND_RESULT ( opline ) . var		1367982	0					
ANR	1368754	CallExpression	ZEND_RESULT ( opline )		1367982	0					
ANR	1368755	Callee	ZEND_RESULT		1367982	0					
ANR	1368756	Identifier	ZEND_RESULT		1367982	0					
ANR	1368757	ArgumentList	opline		1367982	1					
ANR	1368758	Argument	opline		1367982	0					
ANR	1368759	Identifier	opline		1367982	0					
ANR	1368760	Identifier	var		1367982	1					
ANR	1368761	CompoundStatement		138:73:3932:3932	1367982	1					
ANR	1368762	ExpressionStatement	ZEND_RESULT_TYPE ( opline ) &= ~EXT_TYPE_UNUSED	1932:4:64710:64754	1367982	0	True				
ANR	1368763	AssignmentExpression	ZEND_RESULT_TYPE ( opline ) &= ~EXT_TYPE_UNUSED		1367982	0		&=			
ANR	1368764	CallExpression	ZEND_RESULT_TYPE ( opline )		1367982	0					
ANR	1368765	Callee	ZEND_RESULT_TYPE		1367982	0					
ANR	1368766	Identifier	ZEND_RESULT_TYPE		1367982	0					
ANR	1368767	ArgumentList	opline		1367982	1					
ANR	1368768	Argument	opline		1367982	0					
ANR	1368769	Identifier	opline		1367982	0					
ANR	1368770	Identifier	~EXT_TYPE_UNUSED		1367982	1					
ANR	1368771	ExpressionStatement	opline --	1935:3:64766:64774	1367982	5	True				
ANR	1368772	PostIncDecOperationExpression	opline --		1367982	0					
ANR	1368773	Identifier	opline		1367982	0					
ANR	1368774	IncDec	--		1367982	1					
ANR	1368775	ExpressionStatement	block = block -> next	1937:2:64782:64801	1367982	4	True				
ANR	1368776	AssignmentExpression	block = block -> next		1367982	0		=			
ANR	1368777	Identifier	block		1367982	0					
ANR	1368778	PtrMemberAccess	block -> next		1367982	1					
ANR	1368779	Identifier	block		1367982	0					
ANR	1368780	Identifier	next		1367982	1					
ANR	1368781	ExpressionStatement	"zend_arena_release ( & ctx -> arena , checkpoint )"	1940:1:64825:64868	1367982	14	True				
ANR	1368782	CallExpression	"zend_arena_release ( & ctx -> arena , checkpoint )"		1367982	0					
ANR	1368783	Callee	zend_arena_release		1367982	0					
ANR	1368784	Identifier	zend_arena_release		1367982	0					
ANR	1368785	ArgumentList	& ctx -> arena		1367982	1					
ANR	1368786	Argument	& ctx -> arena		1367982	0					
ANR	1368787	UnaryOperationExpression	& ctx -> arena		1367982	0					
ANR	1368788	UnaryOperator	&		1367982	0					
ANR	1368789	PtrMemberAccess	ctx -> arena		1367982	1					
ANR	1368790	Identifier	ctx		1367982	0					
ANR	1368791	Identifier	arena		1367982	1					
ANR	1368792	Argument	checkpoint		1367982	1					
ANR	1368793	Identifier	checkpoint		1367982	0					
ANR	1368794	ReturnType	static void		1367982	1					
ANR	1368795	Identifier	zend_t_usage		1367982	2					
ANR	1368796	ParameterList	"zend_code_block * block , zend_op_array * op_array , zend_bitset used_ext , zend_optimizer_ctx * ctx"		1367982	3					
ANR	1368797	Parameter	zend_code_block * block	1793:25:60675:60696	1367982	0	True				
ANR	1368798	ParameterType	zend_code_block *		1367982	0					
ANR	1368799	Identifier	block		1367982	1					
ANR	1368800	Parameter	zend_op_array * op_array	1793:49:60699:60721	1367982	1	True				
ANR	1368801	ParameterType	zend_op_array *		1367982	0					
ANR	1368802	Identifier	op_array		1367982	1					
ANR	1368803	Parameter	zend_bitset used_ext	1793:74:60724:60743	1367982	2	True				
ANR	1368804	ParameterType	zend_bitset		1367982	0					
ANR	1368805	Identifier	used_ext		1367982	1					
ANR	1368806	Parameter	zend_optimizer_ctx * ctx	1793:96:60746:60768	1367982	3	True				
ANR	1368807	ParameterType	zend_optimizer_ctx *		1367982	0					
ANR	1368808	Identifier	ctx		1367982	1					
ANR	1368809	CFGEntryNode	ENTRY		1367982		True				
ANR	1368810	CFGExitNode	EXIT		1367982		True				
ANR	1368811	Symbol	checkpoint		1367982						
ANR	1368812	Symbol	next_block -> access		1367982						
ANR	1368813	Symbol	bitset_len		1367982						
ANR	1368814	Symbol	usage		1367982						
ANR	1368815	Symbol	RESULT_USED		1367982						
ANR	1368816	Symbol	ZEND_OP2_TYPE		1367982						
ANR	1368817	Symbol	opline -> result		1367982						
ANR	1368818	Symbol	next_block -> len		1367982						
ANR	1368819	Symbol	ZEND_RESULT ( opline ) . var		1367982						
ANR	1368820	Symbol	opline		1367982						
ANR	1368821	Symbol	ZEND_BITSET_ELM_SIZE		1367982						
ANR	1368822	Symbol	block		1367982						
ANR	1368823	Symbol	IS_TMP_VAR		1367982						
ANR	1368824	Symbol	op_array -> T		1367982						
ANR	1368825	Symbol	IS_CONST		1367982						
ANR	1368826	Symbol	zend_arena_alloc		1367982						
ANR	1368827	Symbol	ctx		1367982						
ANR	1368828	Symbol	ZEND_FE_FETCH_R		1367982						
ANR	1368829	Symbol	ZEND_OP2 ( opline ) . var		1367982						
ANR	1368830	Symbol	* next_block		1367982						
ANR	1368831	Symbol	& ZEND_OP1_LITERAL		1367982						
ANR	1368832	Symbol	stderr		1367982						
ANR	1368833	Symbol	* op_array		1367982						
ANR	1368834	Symbol	block -> start_opline		1367982						
ANR	1368835	Symbol	ZEND_RESULT_TYPE		1367982						
ANR	1368836	Symbol	block -> access		1367982						
ANR	1368837	Symbol	IS_VAR		1367982						
ANR	1368838	Symbol	opline -> op1		1367982						
ANR	1368839	Symbol	next_block -> start_opline		1367982						
ANR	1368840	Symbol	opline -> op2		1367982						
ANR	1368841	Symbol	used_ext		1367982						
ANR	1368842	Symbol	zend_bitset_len		1367982						
ANR	1368843	Symbol	op_array -> last_var		1367982						
ANR	1368844	Symbol	block -> next		1367982						
ANR	1368845	Symbol	next_block -> next		1367982						
ANR	1368846	Symbol	ZEND_FE_FETCH_RW		1367982						
ANR	1368847	Symbol	~EXT_TYPE_UNUSED		1367982						
ANR	1368848	Symbol	ZEND_RESULT		1367982						
ANR	1368849	Symbol	end		1367982						
ANR	1368850	Symbol	VAR_NUM		1367982						
ANR	1368851	Symbol	EXT_TYPE_UNUSED		1367982						
ANR	1368852	Symbol	zend_bitset_in		1367982						
ANR	1368853	Symbol	next_block		1367982						
ANR	1368854	Symbol	zend_arena_checkpoint		1367982						
ANR	1368855	Symbol	ZEND_OP1 ( opline ) . var		1367982						
ANR	1368856	Symbol	RES_NEVER_USED		1367982						
ANR	1368857	Symbol	i		1367982						
ANR	1368858	Symbol	block -> len		1367982						
ANR	1368859	Symbol	* ctx		1367982						
ANR	1368860	Symbol	ZEND_OP1		1367982						
ANR	1368861	Symbol	* block		1367982						
ANR	1368862	Symbol	ZEND_OP2		1367982						
ANR	1368863	Symbol	& ctx -> arena		1367982						
ANR	1368864	Symbol	ZEND_OP1_TYPE		1367982						
ANR	1368865	Symbol	* opline		1367982						
ANR	1368866	Symbol	opline -> opcode		1367982						
ANR	1368867	Symbol	ZEND_ADD_ARRAY_ELEMENT		1367982						
ANR	1368868	Symbol	opline -> op2_type		1367982						
ANR	1368869	Symbol	defined_here		1367982						
ANR	1368870	Symbol	ctx -> arena		1367982						
ANR	1368871	Symbol	op_array		1367982						
ANR	1368872	Function	optimize_cfg	1945:0:64891:66976							
ANR	1368873	FunctionDef	"optimize_cfg (zend_op_array * op_array , zend_optimizer_ctx * ctx)"		1368872	0					
ANR	1368874	CompoundStatement		1946:0:64959:66976	1368872	0					
ANR	1368875	IdentifierDeclStatement	zend_cfg cfg ;	1947:1:64962:64974	1368872	0	True				
ANR	1368876	IdentifierDecl	cfg		1368872	0					
ANR	1368877	IdentifierDeclType	zend_cfg		1368872	0					
ANR	1368878	Identifier	cfg		1368872	1					
ANR	1368879	IdentifierDeclStatement	zend_code_block * cur_block ;	1948:1:64977:65003	1368872	1	True				
ANR	1368880	IdentifierDecl	* cur_block		1368872	0					
ANR	1368881	IdentifierDeclType	zend_code_block *		1368872	0					
ANR	1368882	Identifier	cur_block		1368872	1					
ANR	1368883	IdentifierDeclStatement	int pass ;	1949:1:65006:65014	1368872	2	True				
ANR	1368884	IdentifierDecl	pass		1368872	0					
ANR	1368885	IdentifierDeclType	int		1368872	0					
ANR	1368886	Identifier	pass		1368872	1					
ANR	1368887	IdentifierDeclStatement	uint32_t bitset_len ;	1950:1:65017:65036	1368872	3	True				
ANR	1368888	IdentifierDecl	bitset_len		1368872	0					
ANR	1368889	IdentifierDeclType	uint32_t		1368872	0					
ANR	1368890	Identifier	bitset_len		1368872	1					
ANR	1368891	IdentifierDeclStatement	zend_bitset usage ;	1951:1:65039:65056	1368872	4	True				
ANR	1368892	IdentifierDecl	usage		1368872	0					
ANR	1368893	IdentifierDeclType	zend_bitset		1368872	0					
ANR	1368894	Identifier	usage		1368872	1					
ANR	1368895	IdentifierDeclStatement	void * checkpoint ;	1952:1:65059:65075	1368872	5	True				
ANR	1368896	IdentifierDecl	* checkpoint		1368872	0					
ANR	1368897	IdentifierDeclType	void *		1368872	0					
ANR	1368898	Identifier	checkpoint		1368872	1					
ANR	1368899	ExpressionStatement	"fprintf ( stderr , ""File %s func %s\\n"" , op_array -> filename , op_array -> function_name ? op_array -> function_name : ""main"" )"	1955:1:65099:65214	1368872	6	True				
ANR	1368900	CallExpression	"fprintf ( stderr , ""File %s func %s\\n"" , op_array -> filename , op_array -> function_name ? op_array -> function_name : ""main"" )"		1368872	0					
ANR	1368901	Callee	fprintf		1368872	0					
ANR	1368902	Identifier	fprintf		1368872	0					
ANR	1368903	ArgumentList	stderr		1368872	1					
ANR	1368904	Argument	stderr		1368872	0					
ANR	1368905	Identifier	stderr		1368872	0					
ANR	1368906	Argument	"""File %s func %s\\n"""		1368872	1					
ANR	1368907	PrimaryExpression	"""File %s func %s\\n"""		1368872	0					
ANR	1368908	Argument	op_array -> filename		1368872	2					
ANR	1368909	PtrMemberAccess	op_array -> filename		1368872	0					
ANR	1368910	Identifier	op_array		1368872	0					
ANR	1368911	Identifier	filename		1368872	1					
ANR	1368912	Argument	"op_array -> function_name ? op_array -> function_name : ""main"""		1368872	3					
ANR	1368913	ConditionalExpression	"op_array -> function_name ? op_array -> function_name : ""main"""		1368872	0					
ANR	1368914	Condition	op_array -> function_name		1368872	0					
ANR	1368915	PtrMemberAccess	op_array -> function_name		1368872	0					
ANR	1368916	Identifier	op_array		1368872	0					
ANR	1368917	Identifier	function_name		1368872	1					
ANR	1368918	PtrMemberAccess	op_array -> function_name		1368872	1					
ANR	1368919	Identifier	op_array		1368872	0					
ANR	1368920	Identifier	function_name		1368872	1					
ANR	1368921	PrimaryExpression	"""main"""		1368872	2					
ANR	1368922	ExpressionStatement	fflush ( stderr )	1956:1:65217:65231	1368872	7	True				
ANR	1368923	CallExpression	fflush ( stderr )		1368872	0					
ANR	1368924	Callee	fflush		1368872	0					
ANR	1368925	Identifier	fflush		1368872	0					
ANR	1368926	ArgumentList	stderr		1368872	1					
ANR	1368927	Argument	stderr		1368872	0					
ANR	1368928	Identifier	stderr		1368872	0					
ANR	1368929	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK )		1368872	8					
ANR	1368930	Condition	op_array -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK	1959:5:65246:65292	1368872	0	True				
ANR	1368931	BitAndExpression	op_array -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK		1368872	0		&			
ANR	1368932	PtrMemberAccess	op_array -> fn_flags		1368872	0					
ANR	1368933	Identifier	op_array		1368872	0					
ANR	1368934	Identifier	fn_flags		1368872	1					
ANR	1368935	Identifier	ZEND_ACC_HAS_FINALLY_BLOCK		1368872	1					
ANR	1368936	CompoundStatement		14:54:335:335	1368872	1					
ANR	1368937	ReturnStatement	return ;	1960:2:65299:65305	1368872	0	True				
ANR	1368938	ExpressionStatement	checkpoint = zend_arena_checkpoint ( ctx -> arena )	1964:1:65332:65378	1368872	9	True				
ANR	1368939	AssignmentExpression	checkpoint = zend_arena_checkpoint ( ctx -> arena )		1368872	0		=			
ANR	1368940	Identifier	checkpoint		1368872	0					
ANR	1368941	CallExpression	zend_arena_checkpoint ( ctx -> arena )		1368872	1					
ANR	1368942	Callee	zend_arena_checkpoint		1368872	0					
ANR	1368943	Identifier	zend_arena_checkpoint		1368872	0					
ANR	1368944	ArgumentList	ctx -> arena		1368872	1					
ANR	1368945	Argument	ctx -> arena		1368872	0					
ANR	1368946	PtrMemberAccess	ctx -> arena		1368872	0					
ANR	1368947	Identifier	ctx		1368872	0					
ANR	1368948	Identifier	arena		1368872	1					
ANR	1368949	IfStatement	"if ( ! find_code_blocks ( op_array , & cfg , ctx ) )"		1368872	10					
ANR	1368950	Condition	"! find_code_blocks ( op_array , & cfg , ctx )"	1965:5:65385:65422	1368872	0	True				
ANR	1368951	UnaryOperationExpression	"! find_code_blocks ( op_array , & cfg , ctx )"		1368872	0					
ANR	1368952	UnaryOperator	!		1368872	0					
ANR	1368953	CallExpression	"find_code_blocks ( op_array , & cfg , ctx )"		1368872	1					
ANR	1368954	Callee	find_code_blocks		1368872	0					
ANR	1368955	Identifier	find_code_blocks		1368872	0					
ANR	1368956	ArgumentList	op_array		1368872	1					
ANR	1368957	Argument	op_array		1368872	0					
ANR	1368958	Identifier	op_array		1368872	0					
ANR	1368959	Argument	& cfg		1368872	1					
ANR	1368960	UnaryOperationExpression	& cfg		1368872	0					
ANR	1368961	UnaryOperator	&		1368872	0					
ANR	1368962	Identifier	cfg		1368872	1					
ANR	1368963	Argument	ctx		1368872	2					
ANR	1368964	Identifier	ctx		1368872	0					
ANR	1368965	CompoundStatement		20:45:465:465	1368872	1					
ANR	1368966	ExpressionStatement	"zend_arena_release ( & ctx -> arena , checkpoint )"	1966:2:65429:65472	1368872	0	True				
ANR	1368967	CallExpression	"zend_arena_release ( & ctx -> arena , checkpoint )"		1368872	0					
ANR	1368968	Callee	zend_arena_release		1368872	0					
ANR	1368969	Identifier	zend_arena_release		1368872	0					
ANR	1368970	ArgumentList	& ctx -> arena		1368872	1					
ANR	1368971	Argument	& ctx -> arena		1368872	0					
ANR	1368972	UnaryOperationExpression	& ctx -> arena		1368872	0					
ANR	1368973	UnaryOperator	&		1368872	0					
ANR	1368974	PtrMemberAccess	ctx -> arena		1368872	1					
ANR	1368975	Identifier	ctx		1368872	0					
ANR	1368976	Identifier	arena		1368872	1					
ANR	1368977	Argument	checkpoint		1368872	1					
ANR	1368978	Identifier	checkpoint		1368872	0					
ANR	1368979	ReturnStatement	return ;	1967:2:65476:65482	1368872	1	True				
ANR	1368980	ExpressionStatement	"zend_rebuild_access_path ( & cfg , op_array , 0 , ctx )"	1970:1:65489:65537	1368872	11	True				
ANR	1368981	CallExpression	"zend_rebuild_access_path ( & cfg , op_array , 0 , ctx )"		1368872	0					
ANR	1368982	Callee	zend_rebuild_access_path		1368872	0					
ANR	1368983	Identifier	zend_rebuild_access_path		1368872	0					
ANR	1368984	ArgumentList	& cfg		1368872	1					
ANR	1368985	Argument	& cfg		1368872	0					
ANR	1368986	UnaryOperationExpression	& cfg		1368872	0					
ANR	1368987	UnaryOperator	&		1368872	0					
ANR	1368988	Identifier	cfg		1368872	1					
ANR	1368989	Argument	op_array		1368872	1					
ANR	1368990	Identifier	op_array		1368872	0					
ANR	1368991	Argument	0		1368872	2					
ANR	1368992	PrimaryExpression	0		1368872	0					
ANR	1368993	Argument	ctx		1368872	3					
ANR	1368994	Identifier	ctx		1368872	0					
ANR	1368995	IfStatement	if ( op_array -> last_var || op_array -> T )		1368872	12					
ANR	1368996	Condition	op_array -> last_var || op_array -> T	1972:5:65597:65629	1368872	0	True				
ANR	1368997	OrExpression	op_array -> last_var || op_array -> T		1368872	0		||			
ANR	1368998	PtrMemberAccess	op_array -> last_var		1368872	0					
ANR	1368999	Identifier	op_array		1368872	0					
ANR	1369000	Identifier	last_var		1368872	1					
ANR	1369001	PtrMemberAccess	op_array -> T		1368872	1					
ANR	1369002	Identifier	op_array		1368872	0					
ANR	1369003	Identifier	T		1368872	1					
ANR	1369004	CompoundStatement		27:40:672:672	1368872	1					
ANR	1369005	ExpressionStatement	bitset_len = zend_bitset_len ( op_array -> last_var + op_array -> T )	1973:2:65636:65698	1368872	0	True				
ANR	1369006	AssignmentExpression	bitset_len = zend_bitset_len ( op_array -> last_var + op_array -> T )		1368872	0		=			
ANR	1369007	Identifier	bitset_len		1368872	0					
ANR	1369008	CallExpression	zend_bitset_len ( op_array -> last_var + op_array -> T )		1368872	1					
ANR	1369009	Callee	zend_bitset_len		1368872	0					
ANR	1369010	Identifier	zend_bitset_len		1368872	0					
ANR	1369011	ArgumentList	op_array -> last_var + op_array -> T		1368872	1					
ANR	1369012	Argument	op_array -> last_var + op_array -> T		1368872	0					
ANR	1369013	AdditiveExpression	op_array -> last_var + op_array -> T		1368872	0		+			
ANR	1369014	PtrMemberAccess	op_array -> last_var		1368872	0					
ANR	1369015	Identifier	op_array		1368872	0					
ANR	1369016	Identifier	last_var		1368872	1					
ANR	1369017	PtrMemberAccess	op_array -> T		1368872	1					
ANR	1369018	Identifier	op_array		1368872	0					
ANR	1369019	Identifier	T		1368872	1					
ANR	1369020	ExpressionStatement	"cfg . Tsource = zend_arena_calloc ( & ctx -> arena , op_array -> last_var + op_array -> T , sizeof ( zend_op * ) )"	1974:2:65702:65799	1368872	1	True				
ANR	1369021	AssignmentExpression	"cfg . Tsource = zend_arena_calloc ( & ctx -> arena , op_array -> last_var + op_array -> T , sizeof ( zend_op * ) )"		1368872	0		=			
ANR	1369022	MemberAccess	cfg . Tsource		1368872	0					
ANR	1369023	Identifier	cfg		1368872	0					
ANR	1369024	Identifier	Tsource		1368872	1					
ANR	1369025	CallExpression	"zend_arena_calloc ( & ctx -> arena , op_array -> last_var + op_array -> T , sizeof ( zend_op * ) )"		1368872	1					
ANR	1369026	Callee	zend_arena_calloc		1368872	0					
ANR	1369027	Identifier	zend_arena_calloc		1368872	0					
ANR	1369028	ArgumentList	& ctx -> arena		1368872	1					
ANR	1369029	Argument	& ctx -> arena		1368872	0					
ANR	1369030	UnaryOperationExpression	& ctx -> arena		1368872	0					
ANR	1369031	UnaryOperator	&		1368872	0					
ANR	1369032	PtrMemberAccess	ctx -> arena		1368872	1					
ANR	1369033	Identifier	ctx		1368872	0					
ANR	1369034	Identifier	arena		1368872	1					
ANR	1369035	Argument	op_array -> last_var + op_array -> T		1368872	1					
ANR	1369036	AdditiveExpression	op_array -> last_var + op_array -> T		1368872	0		+			
ANR	1369037	PtrMemberAccess	op_array -> last_var		1368872	0					
ANR	1369038	Identifier	op_array		1368872	0					
ANR	1369039	Identifier	last_var		1368872	1					
ANR	1369040	PtrMemberAccess	op_array -> T		1368872	1					
ANR	1369041	Identifier	op_array		1368872	0					
ANR	1369042	Identifier	T		1368872	1					
ANR	1369043	Argument	sizeof ( zend_op * )		1368872	2					
ANR	1369044	SizeofExpression	sizeof ( zend_op * )		1368872	0					
ANR	1369045	Sizeof	sizeof		1368872	0					
ANR	1369046	SizeofOperand	zend_op *		1368872	1					
ANR	1369047	ExpressionStatement	"cfg . same_t = zend_arena_alloc ( & ctx -> arena , op_array -> last_var + op_array -> T )"	1975:2:65803:65879	1368872	2	True				
ANR	1369048	AssignmentExpression	"cfg . same_t = zend_arena_alloc ( & ctx -> arena , op_array -> last_var + op_array -> T )"		1368872	0		=			
ANR	1369049	MemberAccess	cfg . same_t		1368872	0					
ANR	1369050	Identifier	cfg		1368872	0					
ANR	1369051	Identifier	same_t		1368872	1					
ANR	1369052	CallExpression	"zend_arena_alloc ( & ctx -> arena , op_array -> last_var + op_array -> T )"		1368872	1					
ANR	1369053	Callee	zend_arena_alloc		1368872	0					
ANR	1369054	Identifier	zend_arena_alloc		1368872	0					
ANR	1369055	ArgumentList	& ctx -> arena		1368872	1					
ANR	1369056	Argument	& ctx -> arena		1368872	0					
ANR	1369057	UnaryOperationExpression	& ctx -> arena		1368872	0					
ANR	1369058	UnaryOperator	&		1368872	0					
ANR	1369059	PtrMemberAccess	ctx -> arena		1368872	1					
ANR	1369060	Identifier	ctx		1368872	0					
ANR	1369061	Identifier	arena		1368872	1					
ANR	1369062	Argument	op_array -> last_var + op_array -> T		1368872	1					
ANR	1369063	AdditiveExpression	op_array -> last_var + op_array -> T		1368872	0		+			
ANR	1369064	PtrMemberAccess	op_array -> last_var		1368872	0					
ANR	1369065	Identifier	op_array		1368872	0					
ANR	1369066	Identifier	last_var		1368872	1					
ANR	1369067	PtrMemberAccess	op_array -> T		1368872	1					
ANR	1369068	Identifier	op_array		1368872	0					
ANR	1369069	Identifier	T		1368872	1					
ANR	1369070	ExpressionStatement	"usage = zend_arena_alloc ( & ctx -> arena , bitset_len * ZEND_BITSET_ELM_SIZE )"	1976:2:65883:65955	1368872	3	True				
ANR	1369071	AssignmentExpression	"usage = zend_arena_alloc ( & ctx -> arena , bitset_len * ZEND_BITSET_ELM_SIZE )"		1368872	0		=			
ANR	1369072	Identifier	usage		1368872	0					
ANR	1369073	CallExpression	"zend_arena_alloc ( & ctx -> arena , bitset_len * ZEND_BITSET_ELM_SIZE )"		1368872	1					
ANR	1369074	Callee	zend_arena_alloc		1368872	0					
ANR	1369075	Identifier	zend_arena_alloc		1368872	0					
ANR	1369076	ArgumentList	& ctx -> arena		1368872	1					
ANR	1369077	Argument	& ctx -> arena		1368872	0					
ANR	1369078	UnaryOperationExpression	& ctx -> arena		1368872	0					
ANR	1369079	UnaryOperator	&		1368872	0					
ANR	1369080	PtrMemberAccess	ctx -> arena		1368872	1					
ANR	1369081	Identifier	ctx		1368872	0					
ANR	1369082	Identifier	arena		1368872	1					
ANR	1369083	Argument	bitset_len * ZEND_BITSET_ELM_SIZE		1368872	1					
ANR	1369084	MultiplicativeExpression	bitset_len * ZEND_BITSET_ELM_SIZE		1368872	0		*			
ANR	1369085	Identifier	bitset_len		1368872	0					
ANR	1369086	Identifier	ZEND_BITSET_ELM_SIZE		1368872	1					
ANR	1369087	ElseStatement	else		1368872	0					
ANR	1369088	CompoundStatement		32:8:1005:1005	1368872	0					
ANR	1369089	ExpressionStatement	bitset_len = 0	1978:2:65969:65983	1368872	0	True				
ANR	1369090	AssignmentExpression	bitset_len = 0		1368872	0		=			
ANR	1369091	Identifier	bitset_len		1368872	0					
ANR	1369092	PrimaryExpression	0		1368872	1					
ANR	1369093	ExpressionStatement	cfg . Tsource = NULL	1979:2:65987:66005	1368872	1	True				
ANR	1369094	AssignmentExpression	cfg . Tsource = NULL		1368872	0		=			
ANR	1369095	MemberAccess	cfg . Tsource		1368872	0					
ANR	1369096	Identifier	cfg		1368872	0					
ANR	1369097	Identifier	Tsource		1368872	1					
ANR	1369098	Identifier	NULL		1368872	1					
ANR	1369099	ExpressionStatement	cfg . same_t = NULL	1980:2:66009:66026	1368872	2	True				
ANR	1369100	AssignmentExpression	cfg . same_t = NULL		1368872	0		=			
ANR	1369101	MemberAccess	cfg . same_t		1368872	0					
ANR	1369102	Identifier	cfg		1368872	0					
ANR	1369103	Identifier	same_t		1368872	1					
ANR	1369104	Identifier	NULL		1368872	1					
ANR	1369105	ExpressionStatement	usage = NULL	1981:2:66030:66042	1368872	3	True				
ANR	1369106	AssignmentExpression	usage = NULL		1368872	0		=			
ANR	1369107	Identifier	usage		1368872	0					
ANR	1369108	Identifier	NULL		1368872	1					
ANR	1369109	ForStatement	for ( pass = 0 ; pass < PASSES ; pass ++ )		1368872	13					
ANR	1369110	ForInit	pass = 0 ;	1983:6:66053:66061	1368872	0	True				
ANR	1369111	AssignmentExpression	pass = 0		1368872	0		=			
ANR	1369112	Identifier	pass		1368872	0					
ANR	1369113	PrimaryExpression	0		1368872	1					
ANR	1369114	Condition	pass < PASSES	1983:16:66063:66075	1368872	1	True				
ANR	1369115	RelationalExpression	pass < PASSES		1368872	0		<			
ANR	1369116	Identifier	pass		1368872	0					
ANR	1369117	Identifier	PASSES		1368872	1					
ANR	1369118	PostIncDecOperationExpression	pass ++	1983:31:66078:66083	1368872	2	True				
ANR	1369119	Identifier	pass		1368872	0					
ANR	1369120	IncDec	++		1368872	1					
ANR	1369121	CompoundStatement		38:39:1126:1126	1368872	3					
ANR	1369122	ExpressionStatement	"zend_bitset_clear ( usage , bitset_len )"	1985:2:66124:66160	1368872	0	True				
ANR	1369123	CallExpression	"zend_bitset_clear ( usage , bitset_len )"		1368872	0					
ANR	1369124	Callee	zend_bitset_clear		1368872	0					
ANR	1369125	Identifier	zend_bitset_clear		1368872	0					
ANR	1369126	ArgumentList	usage		1368872	1					
ANR	1369127	Argument	usage		1368872	0					
ANR	1369128	Identifier	usage		1368872	0					
ANR	1369129	Argument	bitset_len		1368872	1					
ANR	1369130	Identifier	bitset_len		1368872	0					
ANR	1369131	ExpressionStatement	"zend_t_usage ( cfg . blocks , op_array , usage , ctx )"	1986:2:66164:66210	1368872	1	True				
ANR	1369132	CallExpression	"zend_t_usage ( cfg . blocks , op_array , usage , ctx )"		1368872	0					
ANR	1369133	Callee	zend_t_usage		1368872	0					
ANR	1369134	Identifier	zend_t_usage		1368872	0					
ANR	1369135	ArgumentList	cfg . blocks		1368872	1					
ANR	1369136	Argument	cfg . blocks		1368872	0					
ANR	1369137	MemberAccess	cfg . blocks		1368872	0					
ANR	1369138	Identifier	cfg		1368872	0					
ANR	1369139	Identifier	blocks		1368872	1					
ANR	1369140	Argument	op_array		1368872	1					
ANR	1369141	Identifier	op_array		1368872	0					
ANR	1369142	Argument	usage		1368872	2					
ANR	1369143	Identifier	usage		1368872	0					
ANR	1369144	Argument	ctx		1368872	3					
ANR	1369145	Identifier	ctx		1368872	0					
ANR	1369146	ForStatement	for ( cur_block = cfg . blocks ; cur_block ; cur_block = cur_block -> next )		1368872	2					
ANR	1369147	ForInit	cur_block = cfg . blocks ;	1989:7:66265:66287	1368872	0	True				
ANR	1369148	AssignmentExpression	cur_block = cfg . blocks		1368872	0		=			
ANR	1369149	Identifier	cur_block		1368872	0					
ANR	1369150	MemberAccess	cfg . blocks		1368872	1					
ANR	1369151	Identifier	cfg		1368872	0					
ANR	1369152	Identifier	blocks		1368872	1					
ANR	1369153	Condition	cur_block	1989:31:66289:66297	1368872	1	True				
ANR	1369154	Identifier	cur_block		1368872	0					
ANR	1369155	AssignmentExpression	cur_block = cur_block -> next	1989:42:66300:66326	1368872	2	True	=			
ANR	1369156	Identifier	cur_block		1368872	0					
ANR	1369157	PtrMemberAccess	cur_block -> next		1368872	1					
ANR	1369158	Identifier	cur_block		1368872	0					
ANR	1369159	Identifier	next		1368872	1					
ANR	1369160	CompoundStatement		44:71:1369:1369	1368872	3					
ANR	1369161	IfStatement	if ( ! cur_block -> access )		1368872	0					
ANR	1369162	Condition	! cur_block -> access	1990:7:66338:66355	1368872	0	True				
ANR	1369163	UnaryOperationExpression	! cur_block -> access		1368872	0					
ANR	1369164	UnaryOperator	!		1368872	0					
ANR	1369165	PtrMemberAccess	cur_block -> access		1368872	1					
ANR	1369166	Identifier	cur_block		1368872	0					
ANR	1369167	Identifier	access		1368872	1					
ANR	1369168	CompoundStatement		45:27:1398:1398	1368872	1					
ANR	1369169	ContinueStatement	continue ;	1991:4:66364:66372	1368872	0	True				
ANR	1369170	ExpressionStatement	"zend_optimize_block ( cur_block , op_array , usage , & cfg , ctx )"	1993:3:66382:66440	1368872	1	True				
ANR	1369171	CallExpression	"zend_optimize_block ( cur_block , op_array , usage , & cfg , ctx )"		1368872	0					
ANR	1369172	Callee	zend_optimize_block		1368872	0					
ANR	1369173	Identifier	zend_optimize_block		1368872	0					
ANR	1369174	ArgumentList	cur_block		1368872	1					
ANR	1369175	Argument	cur_block		1368872	0					
ANR	1369176	Identifier	cur_block		1368872	0					
ANR	1369177	Argument	op_array		1368872	1					
ANR	1369178	Identifier	op_array		1368872	0					
ANR	1369179	Argument	usage		1368872	2					
ANR	1369180	Identifier	usage		1368872	0					
ANR	1369181	Argument	& cfg		1368872	3					
ANR	1369182	UnaryOperationExpression	& cfg		1368872	0					
ANR	1369183	UnaryOperator	&		1368872	0					
ANR	1369184	Identifier	cfg		1368872	1					
ANR	1369185	Argument	ctx		1368872	4					
ANR	1369186	Identifier	ctx		1368872	0					
ANR	1369187	ForStatement	for ( cur_block = cfg . blocks ; cur_block ; cur_block = cur_block -> next )		1368872	3					
ANR	1369188	ForInit	cur_block = cfg . blocks ;	1997:7:66495:66517	1368872	0	True				
ANR	1369189	AssignmentExpression	cur_block = cfg . blocks		1368872	0		=			
ANR	1369190	Identifier	cur_block		1368872	0					
ANR	1369191	MemberAccess	cfg . blocks		1368872	1					
ANR	1369192	Identifier	cfg		1368872	0					
ANR	1369193	Identifier	blocks		1368872	1					
ANR	1369194	Condition	cur_block	1997:31:66519:66527	1368872	1	True				
ANR	1369195	Identifier	cur_block		1368872	0					
ANR	1369196	AssignmentExpression	cur_block = cur_block -> next	1997:42:66530:66556	1368872	2	True	=			
ANR	1369197	Identifier	cur_block		1368872	0					
ANR	1369198	PtrMemberAccess	cur_block -> next		1368872	1					
ANR	1369199	Identifier	cur_block		1368872	0					
ANR	1369200	Identifier	next		1368872	1					
ANR	1369201	CompoundStatement		52:71:1599:1599	1368872	3					
ANR	1369202	IfStatement	if ( ! cur_block -> access )		1368872	0					
ANR	1369203	Condition	! cur_block -> access	1998:7:66568:66585	1368872	0	True				
ANR	1369204	UnaryOperationExpression	! cur_block -> access		1368872	0					
ANR	1369205	UnaryOperator	!		1368872	0					
ANR	1369206	PtrMemberAccess	cur_block -> access		1368872	1					
ANR	1369207	Identifier	cur_block		1368872	0					
ANR	1369208	Identifier	access		1368872	1					
ANR	1369209	CompoundStatement		53:27:1628:1628	1368872	1					
ANR	1369210	ContinueStatement	continue ;	1999:4:66594:66602	1368872	0	True				
ANR	1369211	ExpressionStatement	"zend_jmp_optimization ( cur_block , op_array , cfg . blocks , & cfg , ctx )"	2001:3:66612:66677	1368872	1	True				
ANR	1369212	CallExpression	"zend_jmp_optimization ( cur_block , op_array , cfg . blocks , & cfg , ctx )"		1368872	0					
ANR	1369213	Callee	zend_jmp_optimization		1368872	0					
ANR	1369214	Identifier	zend_jmp_optimization		1368872	0					
ANR	1369215	ArgumentList	cur_block		1368872	1					
ANR	1369216	Argument	cur_block		1368872	0					
ANR	1369217	Identifier	cur_block		1368872	0					
ANR	1369218	Argument	op_array		1368872	1					
ANR	1369219	Identifier	op_array		1368872	0					
ANR	1369220	Argument	cfg . blocks		1368872	2					
ANR	1369221	MemberAccess	cfg . blocks		1368872	0					
ANR	1369222	Identifier	cfg		1368872	0					
ANR	1369223	Identifier	blocks		1368872	1					
ANR	1369224	Argument	& cfg		1368872	3					
ANR	1369225	UnaryOperationExpression	& cfg		1368872	0					
ANR	1369226	UnaryOperator	&		1368872	0					
ANR	1369227	Identifier	cfg		1368872	1					
ANR	1369228	Argument	ctx		1368872	4					
ANR	1369229	Identifier	ctx		1368872	0					
ANR	1369230	ExpressionStatement	"zend_rebuild_access_path ( & cfg , op_array , 1 , ctx )"	2005:2:66729:66777	1368872	4	True				
ANR	1369231	CallExpression	"zend_rebuild_access_path ( & cfg , op_array , 1 , ctx )"		1368872	0					
ANR	1369232	Callee	zend_rebuild_access_path		1368872	0					
ANR	1369233	Identifier	zend_rebuild_access_path		1368872	0					
ANR	1369234	ArgumentList	& cfg		1368872	1					
ANR	1369235	Argument	& cfg		1368872	0					
ANR	1369236	UnaryOperationExpression	& cfg		1368872	0					
ANR	1369237	UnaryOperator	&		1368872	0					
ANR	1369238	Identifier	cfg		1368872	1					
ANR	1369239	Argument	op_array		1368872	1					
ANR	1369240	Identifier	op_array		1368872	0					
ANR	1369241	Argument	1		1368872	2					
ANR	1369242	PrimaryExpression	1		1368872	0					
ANR	1369243	Argument	ctx		1368872	3					
ANR	1369244	Identifier	ctx		1368872	0					
ANR	1369245	ExpressionStatement	"zend_bitset_clear ( usage , bitset_len )"	2008:1:66784:66820	1368872	14	True				
ANR	1369246	CallExpression	"zend_bitset_clear ( usage , bitset_len )"		1368872	0					
ANR	1369247	Callee	zend_bitset_clear		1368872	0					
ANR	1369248	Identifier	zend_bitset_clear		1368872	0					
ANR	1369249	ArgumentList	usage		1368872	1					
ANR	1369250	Argument	usage		1368872	0					
ANR	1369251	Identifier	usage		1368872	0					
ANR	1369252	Argument	bitset_len		1368872	1					
ANR	1369253	Identifier	bitset_len		1368872	0					
ANR	1369254	ExpressionStatement	"zend_t_usage ( cfg . blocks , op_array , usage , ctx )"	2009:1:66823:66869	1368872	15	True				
ANR	1369255	CallExpression	"zend_t_usage ( cfg . blocks , op_array , usage , ctx )"		1368872	0					
ANR	1369256	Callee	zend_t_usage		1368872	0					
ANR	1369257	Identifier	zend_t_usage		1368872	0					
ANR	1369258	ArgumentList	cfg . blocks		1368872	1					
ANR	1369259	Argument	cfg . blocks		1368872	0					
ANR	1369260	MemberAccess	cfg . blocks		1368872	0					
ANR	1369261	Identifier	cfg		1368872	0					
ANR	1369262	Identifier	blocks		1368872	1					
ANR	1369263	Argument	op_array		1368872	1					
ANR	1369264	Identifier	op_array		1368872	0					
ANR	1369265	Argument	usage		1368872	2					
ANR	1369266	Identifier	usage		1368872	0					
ANR	1369267	Argument	ctx		1368872	3					
ANR	1369268	Identifier	ctx		1368872	0					
ANR	1369269	ExpressionStatement	"assemble_code_blocks ( & cfg , op_array )"	2010:1:66872:66908	1368872	16	True				
ANR	1369270	CallExpression	"assemble_code_blocks ( & cfg , op_array )"		1368872	0					
ANR	1369271	Callee	assemble_code_blocks		1368872	0					
ANR	1369272	Identifier	assemble_code_blocks		1368872	0					
ANR	1369273	ArgumentList	& cfg		1368872	1					
ANR	1369274	Argument	& cfg		1368872	0					
ANR	1369275	UnaryOperationExpression	& cfg		1368872	0					
ANR	1369276	UnaryOperator	&		1368872	0					
ANR	1369277	Identifier	cfg		1368872	1					
ANR	1369278	Argument	op_array		1368872	1					
ANR	1369279	Identifier	op_array		1368872	0					
ANR	1369280	ExpressionStatement	"zend_arena_release ( & ctx -> arena , checkpoint )"	2013:1:66931:66974	1368872	17	True				
ANR	1369281	CallExpression	"zend_arena_release ( & ctx -> arena , checkpoint )"		1368872	0					
ANR	1369282	Callee	zend_arena_release		1368872	0					
ANR	1369283	Identifier	zend_arena_release		1368872	0					
ANR	1369284	ArgumentList	& ctx -> arena		1368872	1					
ANR	1369285	Argument	& ctx -> arena		1368872	0					
ANR	1369286	UnaryOperationExpression	& ctx -> arena		1368872	0					
ANR	1369287	UnaryOperator	&		1368872	0					
ANR	1369288	PtrMemberAccess	ctx -> arena		1368872	1					
ANR	1369289	Identifier	ctx		1368872	0					
ANR	1369290	Identifier	arena		1368872	1					
ANR	1369291	Argument	checkpoint		1368872	1					
ANR	1369292	Identifier	checkpoint		1368872	0					
ANR	1369293	ReturnType	void		1368872	1					
ANR	1369294	Identifier	optimize_cfg		1368872	2					
ANR	1369295	ParameterList	"zend_op_array * op_array , zend_optimizer_ctx * ctx"		1368872	3					
ANR	1369296	Parameter	zend_op_array * op_array	1945:18:64909:64931	1368872	0	True				
ANR	1369297	ParameterType	zend_op_array *		1368872	0					
ANR	1369298	Identifier	op_array		1368872	1					
ANR	1369299	Parameter	zend_optimizer_ctx * ctx	1945:43:64934:64956	1368872	1	True				
ANR	1369300	ParameterType	zend_optimizer_ctx *		1368872	0					
ANR	1369301	Identifier	ctx		1368872	1					
ANR	1369302	CFGEntryNode	ENTRY		1368872		True				
ANR	1369303	CFGExitNode	EXIT		1368872		True				
ANR	1369304	Symbol	checkpoint		1368872						
ANR	1369305	Symbol	PASSES		1368872						
ANR	1369306	Symbol	zend_bitset_len		1368872						
ANR	1369307	Symbol	zend_arena_calloc		1368872						
ANR	1369308	Symbol	bitset_len		1368872						
ANR	1369309	Symbol	usage		1368872						
ANR	1369310	Symbol	op_array -> last_var		1368872						
ANR	1369311	Symbol	cur_block -> access		1368872						
ANR	1369312	Symbol	& cfg		1368872						
ANR	1369313	Symbol	op_array -> fn_flags		1368872						
ANR	1369314	Symbol	cur_block		1368872						
ANR	1369315	Symbol	ZEND_ACC_HAS_FINALLY_BLOCK		1368872						
ANR	1369316	Symbol	* cur_block		1368872						
ANR	1369317	Symbol	ZEND_BITSET_ELM_SIZE		1368872						
ANR	1369318	Symbol	find_code_blocks		1368872						
ANR	1369319	Symbol	op_array -> T		1368872						
ANR	1369320	Symbol	NULL		1368872						
ANR	1369321	Symbol	zend_arena_alloc		1368872						
ANR	1369322	Symbol	cfg		1368872						
ANR	1369323	Symbol	pass		1368872						
ANR	1369324	Symbol	ctx		1368872						
ANR	1369325	Symbol	zend_arena_checkpoint		1368872						
ANR	1369326	Symbol	stderr		1368872						
ANR	1369327	Symbol	* op_array		1368872						
ANR	1369328	Symbol	* ctx		1368872						
ANR	1369329	Symbol	op_array -> function_name		1368872						
ANR	1369330	Symbol	& ctx -> arena		1368872						
ANR	1369331	Symbol	cfg . Tsource		1368872						
ANR	1369332	Symbol	cur_block -> next		1368872						
ANR	1369333	Symbol	cfg . same_t		1368872						
ANR	1369334	Symbol	ctx -> arena		1368872						
ANR	1369335	Symbol	op_array -> filename		1368872						
ANR	1369336	Symbol	op_array		1368872						
ANR	1369337	Symbol	cfg . blocks		1368872						
