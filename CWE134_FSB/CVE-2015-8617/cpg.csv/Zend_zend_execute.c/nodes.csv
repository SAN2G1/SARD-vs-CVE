command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	147621	File	data/converged/CVE-2015-8617_php-src/Zend_zend_execute.c								
ANR	147622	DeclStmt									
ANR	147623	Decl							void	"void ( const zend_extension * extension , zend_op_array * op_array )"	zend_extension_statement_handler
ANR	147624	DeclStmt									
ANR	147625	Decl							void	"void ( const zend_extension * extension , zend_op_array * op_array )"	zend_extension_fcall_begin_handler
ANR	147626	DeclStmt									
ANR	147627	Decl							void	"void ( const zend_extension * extension , zend_op_array * op_array )"	zend_extension_fcall_end_handler
ANR	147628	DeclStmt									
ANR	147629	Decl							const zend_internal_function	const zend_internal_function	zend_pass_function
ANR	147630	DeclStmt									
ANR	147631	Decl							zval	zval *	__zv
ANR	147632	Function	zend_vm_stack_new_page	150:0:6160:6429							
ANR	147633	FunctionDef	"zend_vm_stack_new_page (size_t size , zend_vm_stack prev)"		147632	0					
ANR	147634	CompoundStatement		150:96:6256:6429	147632	0					
ANR	147635	IdentifierDeclStatement	zend_vm_stack page = ( zend_vm_stack ) emalloc ( size ) ;	151:1:6259:6308	147632	0	True				
ANR	147636	IdentifierDecl	page = ( zend_vm_stack ) emalloc ( size )		147632	0					
ANR	147637	IdentifierDeclType	zend_vm_stack		147632	0					
ANR	147638	Identifier	page		147632	1					
ANR	147639	AssignmentExpression	page = ( zend_vm_stack ) emalloc ( size )		147632	2		=			
ANR	147640	Identifier	page		147632	0					
ANR	147641	CastExpression	( zend_vm_stack ) emalloc ( size )		147632	1					
ANR	147642	CastTarget	zend_vm_stack		147632	0					
ANR	147643	CallExpression	emalloc ( size )		147632	1					
ANR	147644	Callee	emalloc		147632	0					
ANR	147645	Identifier	emalloc		147632	0					
ANR	147646	ArgumentList	size		147632	1					
ANR	147647	Argument	size		147632	0					
ANR	147648	Identifier	size		147632	0					
ANR	147649	ExpressionStatement	page -> top = ZEND_VM_STACK_ELEMETS ( page )	153:1:6312:6351	147632	1	True				
ANR	147650	AssignmentExpression	page -> top = ZEND_VM_STACK_ELEMETS ( page )		147632	0		=			
ANR	147651	PtrMemberAccess	page -> top		147632	0					
ANR	147652	Identifier	page		147632	0					
ANR	147653	Identifier	top		147632	1					
ANR	147654	CallExpression	ZEND_VM_STACK_ELEMETS ( page )		147632	1					
ANR	147655	Callee	ZEND_VM_STACK_ELEMETS		147632	0					
ANR	147656	Identifier	ZEND_VM_STACK_ELEMETS		147632	0					
ANR	147657	ArgumentList	page		147632	1					
ANR	147658	Argument	page		147632	0					
ANR	147659	Identifier	page		147632	0					
ANR	147660	ExpressionStatement	page -> end = ( zval * ) ( ( char * ) page + size )	154:1:6354:6393	147632	2	True				
ANR	147661	AssignmentExpression	page -> end = ( zval * ) ( ( char * ) page + size )		147632	0		=			
ANR	147662	PtrMemberAccess	page -> end		147632	0					
ANR	147663	Identifier	page		147632	0					
ANR	147664	Identifier	end		147632	1					
ANR	147665	CastExpression	( zval * ) ( ( char * ) page + size )		147632	1					
ANR	147666	CastTarget	zval *		147632	0					
ANR	147667	AdditiveExpression	( char * ) page + size		147632	1		+			
ANR	147668	CastExpression	( char * ) page		147632	0					
ANR	147669	CastTarget	char *		147632	0					
ANR	147670	Identifier	page		147632	1					
ANR	147671	Identifier	size		147632	1					
ANR	147672	ExpressionStatement	page -> prev = prev	155:1:6396:6413	147632	3	True				
ANR	147673	AssignmentExpression	page -> prev = prev		147632	0		=			
ANR	147674	PtrMemberAccess	page -> prev		147632	0					
ANR	147675	Identifier	page		147632	0					
ANR	147676	Identifier	prev		147632	1					
ANR	147677	Identifier	prev		147632	1					
ANR	147678	ReturnStatement	return page ;	156:1:6416:6427	147632	4	True				
ANR	147679	Identifier	page		147632	0					
ANR	147680	ReturnType	static zend_always_inline zend_vm_stack		147632	1					
ANR	147681	Identifier	zend_vm_stack_new_page		147632	2					
ANR	147682	ParameterList	"size_t size , zend_vm_stack prev"		147632	3					
ANR	147683	Parameter	size_t size	150:63:6223:6233	147632	0	True				
ANR	147684	ParameterType	size_t		147632	0					
ANR	147685	Identifier	size		147632	1					
ANR	147686	Parameter	zend_vm_stack prev	150:76:6236:6253	147632	1	True				
ANR	147687	ParameterType	zend_vm_stack		147632	0					
ANR	147688	Identifier	prev		147632	1					
ANR	147689	CFGEntryNode	ENTRY		147632		True				
ANR	147690	CFGExitNode	EXIT		147632		True				
ANR	147691	Symbol	page -> end		147632						
ANR	147692	Symbol	emalloc		147632						
ANR	147693	Symbol	size		147632						
ANR	147694	Symbol	prev		147632						
ANR	147695	Symbol	* page		147632						
ANR	147696	Symbol	page		147632						
ANR	147697	Symbol	ZEND_VM_STACK_ELEMETS		147632						
ANR	147698	Symbol	page -> top		147632						
ANR	147699	Symbol	page -> prev		147632						
ANR	147700	Function	zend_vm_stack_init	159:0:6432:6664							
ANR	147701	FunctionDef	zend_vm_stack_init ()		147700	0					
ANR	147702	CompoundStatement		160:0:6471:6664	147700	0					
ANR	147703	ExpressionStatement	"EG ( vm_stack ) = zend_vm_stack_new_page ( ZEND_VM_STACK_PAGE_SIZE ( 0 ) , NULL )"	161:1:6474:6562	147700	0	True				
ANR	147704	AssignmentExpression	"EG ( vm_stack ) = zend_vm_stack_new_page ( ZEND_VM_STACK_PAGE_SIZE ( 0 ) , NULL )"		147700	0		=			
ANR	147705	CallExpression	EG ( vm_stack )		147700	0					
ANR	147706	Callee	EG		147700	0					
ANR	147707	Identifier	EG		147700	0					
ANR	147708	ArgumentList	vm_stack		147700	1					
ANR	147709	Argument	vm_stack		147700	0					
ANR	147710	Identifier	vm_stack		147700	0					
ANR	147711	CallExpression	"zend_vm_stack_new_page ( ZEND_VM_STACK_PAGE_SIZE ( 0 ) , NULL )"		147700	1					
ANR	147712	Callee	zend_vm_stack_new_page		147700	0					
ANR	147713	Identifier	zend_vm_stack_new_page		147700	0					
ANR	147714	ArgumentList	ZEND_VM_STACK_PAGE_SIZE ( 0 )		147700	1					
ANR	147715	Argument	ZEND_VM_STACK_PAGE_SIZE ( 0 )		147700	0					
ANR	147716	CallExpression	ZEND_VM_STACK_PAGE_SIZE ( 0 )		147700	0					
ANR	147717	Callee	ZEND_VM_STACK_PAGE_SIZE		147700	0					
ANR	147718	Identifier	ZEND_VM_STACK_PAGE_SIZE		147700	0					
ANR	147719	ArgumentList	0		147700	1					
ANR	147720	Argument	0		147700	0					
ANR	147721	PrimaryExpression	0		147700	0					
ANR	147722	Argument	NULL		147700	1					
ANR	147723	Identifier	NULL		147700	0					
ANR	147724	ExpressionStatement	EG ( vm_stack ) -> top ++	162:1:6565:6584	147700	1	True				
ANR	147725	PostIncDecOperationExpression	EG ( vm_stack ) -> top ++		147700	0					
ANR	147726	PtrMemberAccess	EG ( vm_stack ) -> top		147700	0					
ANR	147727	CallExpression	EG ( vm_stack )		147700	0					
ANR	147728	Callee	EG		147700	0					
ANR	147729	Identifier	EG		147700	0					
ANR	147730	ArgumentList	vm_stack		147700	1					
ANR	147731	Argument	vm_stack		147700	0					
ANR	147732	Identifier	vm_stack		147700	0					
ANR	147733	Identifier	top		147700	1					
ANR	147734	IncDec	++		147700	1					
ANR	147735	ExpressionStatement	EG ( vm_stack_top ) = EG ( vm_stack ) -> top	163:1:6587:6623	147700	2	True				
ANR	147736	AssignmentExpression	EG ( vm_stack_top ) = EG ( vm_stack ) -> top		147700	0		=			
ANR	147737	CallExpression	EG ( vm_stack_top )		147700	0					
ANR	147738	Callee	EG		147700	0					
ANR	147739	Identifier	EG		147700	0					
ANR	147740	ArgumentList	vm_stack_top		147700	1					
ANR	147741	Argument	vm_stack_top		147700	0					
ANR	147742	Identifier	vm_stack_top		147700	0					
ANR	147743	PtrMemberAccess	EG ( vm_stack ) -> top		147700	1					
ANR	147744	CallExpression	EG ( vm_stack )		147700	0					
ANR	147745	Callee	EG		147700	0					
ANR	147746	Identifier	EG		147700	0					
ANR	147747	ArgumentList	vm_stack		147700	1					
ANR	147748	Argument	vm_stack		147700	0					
ANR	147749	Identifier	vm_stack		147700	0					
ANR	147750	Identifier	top		147700	1					
ANR	147751	ExpressionStatement	EG ( vm_stack_end ) = EG ( vm_stack ) -> end	164:1:6626:6662	147700	3	True				
ANR	147752	AssignmentExpression	EG ( vm_stack_end ) = EG ( vm_stack ) -> end		147700	0		=			
ANR	147753	CallExpression	EG ( vm_stack_end )		147700	0					
ANR	147754	Callee	EG		147700	0					
ANR	147755	Identifier	EG		147700	0					
ANR	147756	ArgumentList	vm_stack_end		147700	1					
ANR	147757	Argument	vm_stack_end		147700	0					
ANR	147758	Identifier	vm_stack_end		147700	0					
ANR	147759	PtrMemberAccess	EG ( vm_stack ) -> end		147700	1					
ANR	147760	CallExpression	EG ( vm_stack )		147700	0					
ANR	147761	Callee	EG		147700	0					
ANR	147762	Identifier	EG		147700	0					
ANR	147763	ArgumentList	vm_stack		147700	1					
ANR	147764	Argument	vm_stack		147700	0					
ANR	147765	Identifier	vm_stack		147700	0					
ANR	147766	Identifier	end		147700	1					
ANR	147767	ReturnType	ZEND_API void		147700	1					
ANR	147768	Identifier	zend_vm_stack_init		147700	2					
ANR	147769	ParameterList			147700	3					
ANR	147770	CFGEntryNode	ENTRY		147700		True				
ANR	147771	CFGExitNode	EXIT		147700		True				
ANR	147772	Symbol	vm_stack_top		147700						
ANR	147773	Symbol	EG		147700						
ANR	147774	Symbol	NULL		147700						
ANR	147775	Symbol	EG ( vm_stack ) -> end		147700						
ANR	147776	Symbol	EG ( vm_stack ) -> top		147700						
ANR	147777	Symbol	vm_stack		147700						
ANR	147778	Symbol	vm_stack_end		147700						
ANR	147779	Symbol	* EG		147700						
ANR	147780	Symbol	zend_vm_stack_new_page		147700						
ANR	147781	Symbol	ZEND_VM_STACK_PAGE_SIZE		147700						
ANR	147782	Function	zend_vm_stack_destroy	167:0:6667:6839							
ANR	147783	FunctionDef	zend_vm_stack_destroy ()		147782	0					
ANR	147784	CompoundStatement		168:0:6709:6839	147782	0					
ANR	147785	IdentifierDeclStatement	zend_vm_stack stack = EG ( vm_stack ) ;	169:1:6712:6746	147782	0	True				
ANR	147786	IdentifierDecl	stack = EG ( vm_stack )		147782	0					
ANR	147787	IdentifierDeclType	zend_vm_stack		147782	0					
ANR	147788	Identifier	stack		147782	1					
ANR	147789	AssignmentExpression	stack = EG ( vm_stack )		147782	2		=			
ANR	147790	Identifier	stack		147782	0					
ANR	147791	CallExpression	EG ( vm_stack )		147782	1					
ANR	147792	Callee	EG		147782	0					
ANR	147793	Identifier	EG		147782	0					
ANR	147794	ArgumentList	vm_stack		147782	1					
ANR	147795	Argument	vm_stack		147782	0					
ANR	147796	Identifier	vm_stack		147782	0					
ANR	147797	WhileStatement	while ( stack != NULL )		147782	1					
ANR	147798	Condition	stack != NULL	171:8:6757:6769	147782	0	True				
ANR	147799	EqualityExpression	stack != NULL		147782	0		!=			
ANR	147800	Identifier	stack		147782	0					
ANR	147801	Identifier	NULL		147782	1					
ANR	147802	CompoundStatement		5:2:66:95	147782	1					
ANR	147803	IdentifierDeclStatement	zend_vm_stack p = stack -> prev ;	172:2:6776:6805	147782	0	True				
ANR	147804	IdentifierDecl	p = stack -> prev		147782	0					
ANR	147805	IdentifierDeclType	zend_vm_stack		147782	0					
ANR	147806	Identifier	p		147782	1					
ANR	147807	AssignmentExpression	p = stack -> prev		147782	2		=			
ANR	147808	Identifier	p		147782	0					
ANR	147809	PtrMemberAccess	stack -> prev		147782	1					
ANR	147810	Identifier	stack		147782	0					
ANR	147811	Identifier	prev		147782	1					
ANR	147812	ExpressionStatement	efree ( stack )	173:2:6809:6821	147782	1	True				
ANR	147813	CallExpression	efree ( stack )		147782	0					
ANR	147814	Callee	efree		147782	0					
ANR	147815	Identifier	efree		147782	0					
ANR	147816	ArgumentList	stack		147782	1					
ANR	147817	Argument	stack		147782	0					
ANR	147818	Identifier	stack		147782	0					
ANR	147819	ExpressionStatement	stack = p	174:2:6825:6834	147782	2	True				
ANR	147820	AssignmentExpression	stack = p		147782	0		=			
ANR	147821	Identifier	stack		147782	0					
ANR	147822	Identifier	p		147782	1					
ANR	147823	ReturnType	ZEND_API void		147782	1					
ANR	147824	Identifier	zend_vm_stack_destroy		147782	2					
ANR	147825	ParameterList			147782	3					
ANR	147826	CFGEntryNode	ENTRY		147782		True				
ANR	147827	CFGExitNode	EXIT		147782		True				
ANR	147828	Symbol	p		147782						
ANR	147829	Symbol	stack		147782						
ANR	147830	Symbol	EG		147782						
ANR	147831	Symbol	NULL		147782						
ANR	147832	Symbol	vm_stack		147782						
ANR	147833	Symbol	* stack		147782						
ANR	147834	Symbol	stack -> prev		147782						
ANR	147835	Function	zend_vm_stack_extend	178:0:6842:7282							
ANR	147836	FunctionDef	zend_vm_stack_extend (size_t size)		147835	0					
ANR	147837	CompoundStatement		179:0:6891:7282	147835	0					
ANR	147838	IdentifierDeclStatement	zend_vm_stack stack ;	180:1:6894:6913	147835	0	True				
ANR	147839	IdentifierDecl	stack		147835	0					
ANR	147840	IdentifierDeclType	zend_vm_stack		147835	0					
ANR	147841	Identifier	stack		147835	1					
ANR	147842	IdentifierDeclStatement	void * ptr ;	181:1:6916:6925	147835	1	True				
ANR	147843	IdentifierDecl	* ptr		147835	0					
ANR	147844	IdentifierDeclType	void *		147835	0					
ANR	147845	Identifier	ptr		147835	1					
ANR	147846	ExpressionStatement	stack = EG ( vm_stack )	183:1:6929:6949	147835	2	True				
ANR	147847	AssignmentExpression	stack = EG ( vm_stack )		147835	0		=			
ANR	147848	Identifier	stack		147835	0					
ANR	147849	CallExpression	EG ( vm_stack )		147835	1					
ANR	147850	Callee	EG		147835	0					
ANR	147851	Identifier	EG		147835	0					
ANR	147852	ArgumentList	vm_stack		147835	1					
ANR	147853	Argument	vm_stack		147835	0					
ANR	147854	Identifier	vm_stack		147835	0					
ANR	147855	ExpressionStatement	stack -> top = EG ( vm_stack_top )	184:1:6952:6981	147835	3	True				
ANR	147856	AssignmentExpression	stack -> top = EG ( vm_stack_top )		147835	0		=			
ANR	147857	PtrMemberAccess	stack -> top		147835	0					
ANR	147858	Identifier	stack		147835	0					
ANR	147859	Identifier	top		147835	1					
ANR	147860	CallExpression	EG ( vm_stack_top )		147835	1					
ANR	147861	Callee	EG		147835	0					
ANR	147862	Identifier	EG		147835	0					
ANR	147863	ArgumentList	vm_stack_top		147835	1					
ANR	147864	Argument	vm_stack_top		147835	0					
ANR	147865	Identifier	vm_stack_top		147835	0					
ANR	147866	ExpressionStatement	"EG ( vm_stack ) = stack = zend_vm_stack_new_page ( EXPECTED ( size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 0 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 0 , size ) , stack )"	185:1:6984:7166	147835	4	True				
ANR	147867	AssignmentExpression	"EG ( vm_stack ) = stack = zend_vm_stack_new_page ( EXPECTED ( size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 0 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 0 , size ) , stack )"		147835	0		=			
ANR	147868	CallExpression	EG ( vm_stack )		147835	0					
ANR	147869	Callee	EG		147835	0					
ANR	147870	Identifier	EG		147835	0					
ANR	147871	ArgumentList	vm_stack		147835	1					
ANR	147872	Argument	vm_stack		147835	0					
ANR	147873	Identifier	vm_stack		147835	0					
ANR	147874	AssignmentExpression	"stack = zend_vm_stack_new_page ( EXPECTED ( size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 0 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 0 , size ) , stack )"		147835	1		=			
ANR	147875	Identifier	stack		147835	0					
ANR	147876	CallExpression	"zend_vm_stack_new_page ( EXPECTED ( size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 0 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 0 , size ) , stack )"		147835	1					
ANR	147877	Callee	zend_vm_stack_new_page		147835	0					
ANR	147878	Identifier	zend_vm_stack_new_page		147835	0					
ANR	147879	ArgumentList	"EXPECTED ( size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 0 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 0 , size )"		147835	1					
ANR	147880	Argument	"EXPECTED ( size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 0 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 0 , size )"		147835	0					
ANR	147881	ConditionalExpression	"EXPECTED ( size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 0 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 0 , size )"		147835	0					
ANR	147882	Condition	EXPECTED ( size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 ) )		147835	0					
ANR	147883	CallExpression	EXPECTED ( size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 ) )		147835	0					
ANR	147884	Callee	EXPECTED		147835	0					
ANR	147885	Identifier	EXPECTED		147835	0					
ANR	147886	ArgumentList	size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 )		147835	1					
ANR	147887	Argument	size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 )		147835	0					
ANR	147888	RelationalExpression	size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 )		147835	0		<			
ANR	147889	Identifier	size		147835	0					
ANR	147890	CallExpression	ZEND_VM_STACK_FREE_PAGE_SIZE ( 0 )		147835	1					
ANR	147891	Callee	ZEND_VM_STACK_FREE_PAGE_SIZE		147835	0					
ANR	147892	Identifier	ZEND_VM_STACK_FREE_PAGE_SIZE		147835	0					
ANR	147893	ArgumentList	0		147835	1					
ANR	147894	Argument	0		147835	0					
ANR	147895	PrimaryExpression	0		147835	0					
ANR	147896	CallExpression	ZEND_VM_STACK_PAGE_SIZE ( 0 )		147835	1					
ANR	147897	Callee	ZEND_VM_STACK_PAGE_SIZE		147835	0					
ANR	147898	Identifier	ZEND_VM_STACK_PAGE_SIZE		147835	0					
ANR	147899	ArgumentList	0		147835	1					
ANR	147900	Argument	0		147835	0					
ANR	147901	PrimaryExpression	0		147835	0					
ANR	147902	CallExpression	"ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 0 , size )"		147835	2					
ANR	147903	Callee	ZEND_VM_STACK_PAGE_ALIGNED_SIZE		147835	0					
ANR	147904	Identifier	ZEND_VM_STACK_PAGE_ALIGNED_SIZE		147835	0					
ANR	147905	ArgumentList	0		147835	1					
ANR	147906	Argument	0		147835	0					
ANR	147907	PrimaryExpression	0		147835	0					
ANR	147908	Argument	size		147835	1					
ANR	147909	Identifier	size		147835	0					
ANR	147910	Argument	stack		147835	1					
ANR	147911	Identifier	stack		147835	0					
ANR	147912	ExpressionStatement	ptr = stack -> top	189:1:7169:7185	147835	5	True				
ANR	147913	AssignmentExpression	ptr = stack -> top		147835	0		=			
ANR	147914	Identifier	ptr		147835	0					
ANR	147915	PtrMemberAccess	stack -> top		147835	1					
ANR	147916	Identifier	stack		147835	0					
ANR	147917	Identifier	top		147835	1					
ANR	147918	ExpressionStatement	EG ( vm_stack_top ) = ( void * ) ( ( ( char * ) ptr ) + size )	190:1:7188:7235	147835	6	True				
ANR	147919	AssignmentExpression	EG ( vm_stack_top ) = ( void * ) ( ( ( char * ) ptr ) + size )		147835	0		=			
ANR	147920	CallExpression	EG ( vm_stack_top )		147835	0					
ANR	147921	Callee	EG		147835	0					
ANR	147922	Identifier	EG		147835	0					
ANR	147923	ArgumentList	vm_stack_top		147835	1					
ANR	147924	Argument	vm_stack_top		147835	0					
ANR	147925	Identifier	vm_stack_top		147835	0					
ANR	147926	CastExpression	( void * ) ( ( ( char * ) ptr ) + size )		147835	1					
ANR	147927	CastTarget	void *		147835	0					
ANR	147928	AdditiveExpression	( ( char * ) ptr ) + size		147835	1		+			
ANR	147929	CastExpression	( char * ) ptr		147835	0					
ANR	147930	CastTarget	char *		147835	0					
ANR	147931	Identifier	ptr		147835	1					
ANR	147932	Identifier	size		147835	1					
ANR	147933	ExpressionStatement	EG ( vm_stack_end ) = stack -> end	191:1:7238:7267	147835	7	True				
ANR	147934	AssignmentExpression	EG ( vm_stack_end ) = stack -> end		147835	0		=			
ANR	147935	CallExpression	EG ( vm_stack_end )		147835	0					
ANR	147936	Callee	EG		147835	0					
ANR	147937	Identifier	EG		147835	0					
ANR	147938	ArgumentList	vm_stack_end		147835	1					
ANR	147939	Argument	vm_stack_end		147835	0					
ANR	147940	Identifier	vm_stack_end		147835	0					
ANR	147941	PtrMemberAccess	stack -> end		147835	1					
ANR	147942	Identifier	stack		147835	0					
ANR	147943	Identifier	end		147835	1					
ANR	147944	ReturnStatement	return ptr ;	192:1:7270:7280	147835	8	True				
ANR	147945	Identifier	ptr		147835	0					
ANR	147946	ReturnType	ZEND_API void *		147835	1					
ANR	147947	Identifier	zend_vm_stack_extend		147835	2					
ANR	147948	ParameterList	size_t size		147835	3					
ANR	147949	Parameter	size_t size	178:36:6878:6888	147835	0	True				
ANR	147950	ParameterType	size_t		147835	0					
ANR	147951	Identifier	size		147835	1					
ANR	147952	CFGEntryNode	ENTRY		147835		True				
ANR	147953	CFGExitNode	EXIT		147835		True				
ANR	147954	Symbol	stack		147835						
ANR	147955	Symbol	EG		147835						
ANR	147956	Symbol	stack -> end		147835						
ANR	147957	Symbol	ZEND_VM_STACK_PAGE_ALIGNED_SIZE		147835						
ANR	147958	Symbol	ZEND_VM_STACK_FREE_PAGE_SIZE		147835						
ANR	147959	Symbol	ptr		147835						
ANR	147960	Symbol	ZEND_VM_STACK_PAGE_SIZE		147835						
ANR	147961	Symbol	vm_stack_top		147835						
ANR	147962	Symbol	size		147835						
ANR	147963	Symbol	vm_stack		147835						
ANR	147964	Symbol	* stack		147835						
ANR	147965	Symbol	vm_stack_end		147835						
ANR	147966	Symbol	stack -> top		147835						
ANR	147967	Symbol	EXPECTED		147835						
ANR	147968	Symbol	zend_vm_stack_new_page		147835						
ANR	147969	Function	zend_get_compiled_variable_value	195:0:7285:7409							
ANR	147970	FunctionDef	"zend_get_compiled_variable_value (const zend_execute_data * execute_data , uint32_t var)"		147969	0					
ANR	147971	CompoundStatement		196:0:7386:7409	147969	0					
ANR	147972	ReturnStatement	return EX_VAR ( var ) ;	197:1:7389:7407	147969	0	True				
ANR	147973	CallExpression	EX_VAR ( var )		147969	0					
ANR	147974	Callee	EX_VAR		147969	0					
ANR	147975	Identifier	EX_VAR		147969	0					
ANR	147976	ArgumentList	var		147969	1					
ANR	147977	Argument	var		147969	0					
ANR	147978	Identifier	var		147969	0					
ANR	147979	ReturnType	ZEND_API zval *		147969	1					
ANR	147980	Identifier	zend_get_compiled_variable_value		147969	2					
ANR	147981	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		147969	3					
ANR	147982	Parameter	const zend_execute_data * execute_data	195:48:7333:7369	147969	0	True				
ANR	147983	ParameterType	const zend_execute_data *		147969	0					
ANR	147984	Identifier	execute_data		147969	1					
ANR	147985	Parameter	uint32_t var	195:87:7372:7383	147969	1	True				
ANR	147986	ParameterType	uint32_t		147969	0					
ANR	147987	Identifier	var		147969	1					
ANR	147988	CFGEntryNode	ENTRY		147969		True				
ANR	147989	CFGExitNode	EXIT		147969		True				
ANR	147990	Symbol	var		147969						
ANR	147991	Symbol	EX_VAR		147969						
ANR	147992	Symbol	execute_data		147969						
ANR	147993	Function	_get_zval_ptr_tmp	200:0:7412:7651							
ANR	147994	FunctionDef	"_get_zval_ptr_tmp (uint32_t var , const zend_execute_data * execute_data , zend_free_op * should_free)"		147993	0					
ANR	147995	CompoundStatement		201:0:7542:7651	147993	0					
ANR	147996	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	202:1:7545:7568	147993	0	True				
ANR	147997	IdentifierDecl	* ret = EX_VAR ( var )		147993	0					
ANR	147998	IdentifierDeclType	zval *		147993	0					
ANR	147999	Identifier	ret		147993	1					
ANR	148000	AssignmentExpression	* ret = EX_VAR ( var )		147993	2		=			
ANR	148001	Identifier	ret		147993	0					
ANR	148002	CallExpression	EX_VAR ( var )		147993	1					
ANR	148003	Callee	EX_VAR		147993	0					
ANR	148004	Identifier	EX_VAR		147993	0					
ANR	148005	ArgumentList	var		147993	1					
ANR	148006	Argument	var		147993	0					
ANR	148007	Identifier	var		147993	0					
ANR	148008	ExpressionStatement	* should_free = ret	203:1:7571:7589	147993	1	True				
ANR	148009	AssignmentExpression	* should_free = ret		147993	0		=			
ANR	148010	UnaryOperationExpression	* should_free		147993	0					
ANR	148011	UnaryOperator	*		147993	0					
ANR	148012	Identifier	should_free		147993	1					
ANR	148013	Identifier	ret		147993	1					
ANR	148014	ExpressionStatement	ZEND_ASSERT ( Z_TYPE_P ( ret ) != IS_REFERENCE )	205:1:7593:7635	147993	2	True				
ANR	148015	CallExpression	ZEND_ASSERT ( Z_TYPE_P ( ret ) != IS_REFERENCE )		147993	0					
ANR	148016	Callee	ZEND_ASSERT		147993	0					
ANR	148017	Identifier	ZEND_ASSERT		147993	0					
ANR	148018	ArgumentList	Z_TYPE_P ( ret ) != IS_REFERENCE		147993	1					
ANR	148019	Argument	Z_TYPE_P ( ret ) != IS_REFERENCE		147993	0					
ANR	148020	EqualityExpression	Z_TYPE_P ( ret ) != IS_REFERENCE		147993	0		!=			
ANR	148021	CallExpression	Z_TYPE_P ( ret )		147993	0					
ANR	148022	Callee	Z_TYPE_P		147993	0					
ANR	148023	Identifier	Z_TYPE_P		147993	0					
ANR	148024	ArgumentList	ret		147993	1					
ANR	148025	Argument	ret		147993	0					
ANR	148026	Identifier	ret		147993	0					
ANR	148027	Identifier	IS_REFERENCE		147993	1					
ANR	148028	ReturnStatement	return ret ;	207:1:7639:7649	147993	3	True				
ANR	148029	Identifier	ret		147993	0					
ANR	148030	ReturnType	static zend_always_inline zval *		147993	1					
ANR	148031	Identifier	_get_zval_ptr_tmp		147993	2					
ANR	148032	ParameterList	"uint32_t var , const zend_execute_data * execute_data , zend_free_op * should_free"		147993	3					
ANR	148033	Parameter	uint32_t var	200:50:7462:7473	147993	0	True				
ANR	148034	ParameterType	uint32_t		147993	0					
ANR	148035	Identifier	var		147993	1					
ANR	148036	Parameter	const zend_execute_data * execute_data	200:64:7476:7512	147993	1	True				
ANR	148037	ParameterType	const zend_execute_data *		147993	0					
ANR	148038	Identifier	execute_data		147993	1					
ANR	148039	Parameter	zend_free_op * should_free	200:103:7515:7539	147993	2	True				
ANR	148040	ParameterType	zend_free_op *		147993	0					
ANR	148041	Identifier	should_free		147993	1					
ANR	148042	CFGEntryNode	ENTRY		147993		True				
ANR	148043	CFGExitNode	EXIT		147993		True				
ANR	148044	Symbol	should_free		147993						
ANR	148045	Symbol	ret		147993						
ANR	148046	Symbol	IS_REFERENCE		147993						
ANR	148047	Symbol	var		147993						
ANR	148048	Symbol	EX_VAR		147993						
ANR	148049	Symbol	Z_TYPE_P		147993						
ANR	148050	Symbol	execute_data		147993						
ANR	148051	Symbol	* should_free		147993						
ANR	148052	Function	_get_zval_ptr_var	210:0:7654:7847							
ANR	148053	FunctionDef	"_get_zval_ptr_var (uint32_t var , const zend_execute_data * execute_data , zend_free_op * should_free)"		148052	0					
ANR	148054	CompoundStatement		211:0:7784:7847	148052	0					
ANR	148055	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	212:1:7787:7810	148052	0	True				
ANR	148056	IdentifierDecl	* ret = EX_VAR ( var )		148052	0					
ANR	148057	IdentifierDeclType	zval *		148052	0					
ANR	148058	Identifier	ret		148052	1					
ANR	148059	AssignmentExpression	* ret = EX_VAR ( var )		148052	2		=			
ANR	148060	Identifier	ret		148052	0					
ANR	148061	CallExpression	EX_VAR ( var )		148052	1					
ANR	148062	Callee	EX_VAR		148052	0					
ANR	148063	Identifier	EX_VAR		148052	0					
ANR	148064	ArgumentList	var		148052	1					
ANR	148065	Argument	var		148052	0					
ANR	148066	Identifier	var		148052	0					
ANR	148067	ExpressionStatement	* should_free = ret	214:1:7814:7832	148052	1	True				
ANR	148068	AssignmentExpression	* should_free = ret		148052	0		=			
ANR	148069	UnaryOperationExpression	* should_free		148052	0					
ANR	148070	UnaryOperator	*		148052	0					
ANR	148071	Identifier	should_free		148052	1					
ANR	148072	Identifier	ret		148052	1					
ANR	148073	ReturnStatement	return ret ;	215:1:7835:7845	148052	2	True				
ANR	148074	Identifier	ret		148052	0					
ANR	148075	ReturnType	static zend_always_inline zval *		148052	1					
ANR	148076	Identifier	_get_zval_ptr_var		148052	2					
ANR	148077	ParameterList	"uint32_t var , const zend_execute_data * execute_data , zend_free_op * should_free"		148052	3					
ANR	148078	Parameter	uint32_t var	210:50:7704:7715	148052	0	True				
ANR	148079	ParameterType	uint32_t		148052	0					
ANR	148080	Identifier	var		148052	1					
ANR	148081	Parameter	const zend_execute_data * execute_data	210:64:7718:7754	148052	1	True				
ANR	148082	ParameterType	const zend_execute_data *		148052	0					
ANR	148083	Identifier	execute_data		148052	1					
ANR	148084	Parameter	zend_free_op * should_free	210:103:7757:7781	148052	2	True				
ANR	148085	ParameterType	zend_free_op *		148052	0					
ANR	148086	Identifier	should_free		148052	1					
ANR	148087	CFGEntryNode	ENTRY		148052		True				
ANR	148088	CFGExitNode	EXIT		148052		True				
ANR	148089	Symbol	should_free		148052						
ANR	148090	Symbol	ret		148052						
ANR	148091	Symbol	var		148052						
ANR	148092	Symbol	EX_VAR		148052						
ANR	148093	Symbol	execute_data		148052						
ANR	148094	Symbol	* should_free		148052						
ANR	148095	Function	_get_zval_ptr_var_deref	218:0:7850:8067							
ANR	148096	FunctionDef	"_get_zval_ptr_var_deref (uint32_t var , const zend_execute_data * execute_data , zend_free_op * should_free)"		148095	0					
ANR	148097	CompoundStatement		219:0:7986:8067	148095	0					
ANR	148098	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	220:1:7989:8012	148095	0	True				
ANR	148099	IdentifierDecl	* ret = EX_VAR ( var )		148095	0					
ANR	148100	IdentifierDeclType	zval *		148095	0					
ANR	148101	Identifier	ret		148095	1					
ANR	148102	AssignmentExpression	* ret = EX_VAR ( var )		148095	2		=			
ANR	148103	Identifier	ret		148095	0					
ANR	148104	CallExpression	EX_VAR ( var )		148095	1					
ANR	148105	Callee	EX_VAR		148095	0					
ANR	148106	Identifier	EX_VAR		148095	0					
ANR	148107	ArgumentList	var		148095	1					
ANR	148108	Argument	var		148095	0					
ANR	148109	Identifier	var		148095	0					
ANR	148110	ExpressionStatement	* should_free = ret	222:1:8016:8034	148095	1	True				
ANR	148111	AssignmentExpression	* should_free = ret		148095	0		=			
ANR	148112	UnaryOperationExpression	* should_free		148095	0					
ANR	148113	UnaryOperator	*		148095	0					
ANR	148114	Identifier	should_free		148095	1					
ANR	148115	Identifier	ret		148095	1					
ANR	148116	ExpressionStatement	ZVAL_DEREF ( ret )	223:1:8037:8052	148095	2	True				
ANR	148117	CallExpression	ZVAL_DEREF ( ret )		148095	0					
ANR	148118	Callee	ZVAL_DEREF		148095	0					
ANR	148119	Identifier	ZVAL_DEREF		148095	0					
ANR	148120	ArgumentList	ret		148095	1					
ANR	148121	Argument	ret		148095	0					
ANR	148122	Identifier	ret		148095	0					
ANR	148123	ReturnStatement	return ret ;	224:1:8055:8065	148095	3	True				
ANR	148124	Identifier	ret		148095	0					
ANR	148125	ReturnType	static zend_always_inline zval *		148095	1					
ANR	148126	Identifier	_get_zval_ptr_var_deref		148095	2					
ANR	148127	ParameterList	"uint32_t var , const zend_execute_data * execute_data , zend_free_op * should_free"		148095	3					
ANR	148128	Parameter	uint32_t var	218:56:7906:7917	148095	0	True				
ANR	148129	ParameterType	uint32_t		148095	0					
ANR	148130	Identifier	var		148095	1					
ANR	148131	Parameter	const zend_execute_data * execute_data	218:70:7920:7956	148095	1	True				
ANR	148132	ParameterType	const zend_execute_data *		148095	0					
ANR	148133	Identifier	execute_data		148095	1					
ANR	148134	Parameter	zend_free_op * should_free	218:109:7959:7983	148095	2	True				
ANR	148135	ParameterType	zend_free_op *		148095	0					
ANR	148136	Identifier	should_free		148095	1					
ANR	148137	CFGEntryNode	ENTRY		148095		True				
ANR	148138	CFGExitNode	EXIT		148095		True				
ANR	148139	Symbol	should_free		148095						
ANR	148140	Symbol	ret		148095						
ANR	148141	Symbol	var		148095						
ANR	148142	Symbol	EX_VAR		148095						
ANR	148143	Symbol	execute_data		148095						
ANR	148144	Symbol	* should_free		148095						
ANR	148145	Function	zval_undefined_cv	227:0:8070:8297							
ANR	148146	FunctionDef	"zval_undefined_cv (uint32_t var , const zend_execute_data * execute_data)"		148145	0					
ANR	148147	CompoundStatement		228:0:8181:8297	148145	0					
ANR	148148	IdentifierDeclStatement	zend_string * cv = CV_DEF_OF ( EX_VAR_TO_NUM ( var ) ) ;	229:1:8184:8231	148145	0	True				
ANR	148149	IdentifierDecl	* cv = CV_DEF_OF ( EX_VAR_TO_NUM ( var ) )		148145	0					
ANR	148150	IdentifierDeclType	zend_string *		148145	0					
ANR	148151	Identifier	cv		148145	1					
ANR	148152	AssignmentExpression	* cv = CV_DEF_OF ( EX_VAR_TO_NUM ( var ) )		148145	2		=			
ANR	148153	Identifier	cv		148145	0					
ANR	148154	CallExpression	CV_DEF_OF ( EX_VAR_TO_NUM ( var ) )		148145	1					
ANR	148155	Callee	CV_DEF_OF		148145	0					
ANR	148156	Identifier	CV_DEF_OF		148145	0					
ANR	148157	ArgumentList	EX_VAR_TO_NUM ( var )		148145	1					
ANR	148158	Argument	EX_VAR_TO_NUM ( var )		148145	0					
ANR	148159	CallExpression	EX_VAR_TO_NUM ( var )		148145	0					
ANR	148160	Callee	EX_VAR_TO_NUM		148145	0					
ANR	148161	Identifier	EX_VAR_TO_NUM		148145	0					
ANR	148162	ArgumentList	var		148145	1					
ANR	148163	Argument	var		148145	0					
ANR	148164	Identifier	var		148145	0					
ANR	148165	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , ZSTR_VAL ( cv ) )"	231:1:8235:8295	148145	1	True				
ANR	148166	CallExpression	"zend_error ( E_NOTICE , ""Undefined variable: %s"" , ZSTR_VAL ( cv ) )"		148145	0					
ANR	148167	Callee	zend_error		148145	0					
ANR	148168	Identifier	zend_error		148145	0					
ANR	148169	ArgumentList	E_NOTICE		148145	1					
ANR	148170	Argument	E_NOTICE		148145	0					
ANR	148171	Identifier	E_NOTICE		148145	0					
ANR	148172	Argument	"""Undefined variable: %s"""		148145	1					
ANR	148173	PrimaryExpression	"""Undefined variable: %s"""		148145	0					
ANR	148174	Argument	ZSTR_VAL ( cv )		148145	2					
ANR	148175	CallExpression	ZSTR_VAL ( cv )		148145	0					
ANR	148176	Callee	ZSTR_VAL		148145	0					
ANR	148177	Identifier	ZSTR_VAL		148145	0					
ANR	148178	ArgumentList	cv		148145	1					
ANR	148179	Argument	cv		148145	0					
ANR	148180	Identifier	cv		148145	0					
ANR	148181	ReturnType	static zend_never_inline ZEND_COLD void		148145	1					
ANR	148182	Identifier	zval_undefined_cv		148145	2					
ANR	148183	ParameterList	"uint32_t var , const zend_execute_data * execute_data"		148145	3					
ANR	148184	Parameter	uint32_t var	227:58:8128:8139	148145	0	True				
ANR	148185	ParameterType	uint32_t		148145	0					
ANR	148186	Identifier	var		148145	1					
ANR	148187	Parameter	const zend_execute_data * execute_data	227:72:8142:8178	148145	1	True				
ANR	148188	ParameterType	const zend_execute_data *		148145	0					
ANR	148189	Identifier	execute_data		148145	1					
ANR	148190	CFGEntryNode	ENTRY		148145		True				
ANR	148191	CFGExitNode	EXIT		148145		True				
ANR	148192	Symbol	cv		148145						
ANR	148193	Symbol	var		148145						
ANR	148194	Symbol	CV_DEF_OF		148145						
ANR	148195	Symbol	E_NOTICE		148145						
ANR	148196	Symbol	execute_data		148145						
ANR	148197	Symbol	EX_VAR_TO_NUM		148145						
ANR	148198	Symbol	ZSTR_VAL		148145						
ANR	148199	Function	_get_zval_cv_lookup	234:0:8300:8780							
ANR	148200	FunctionDef	"_get_zval_cv_lookup (zval * ptr , uint32_t var , int type , const zend_execute_data * execute_data)"		148199	0					
ANR	148201	CompoundStatement		235:0:8425:8780	148199	0					
ANR	148202	SwitchStatement	switch ( type )		148199	0					
ANR	148203	Condition	type	236:9:8436:8439	148199	0	True				
ANR	148204	Identifier	type		148199	0					
ANR	148205	CompoundStatement		2:15:16:16	148199	1					
ANR	148206	Label	case BP_VAR_R :	237:2:8446:8459	148199	0	True				
ANR	148207	Identifier	BP_VAR_R		148199	0					
ANR	148208	Label	case BP_VAR_UNSET :	238:2:8463:8480	148199	1	True				
ANR	148209	Identifier	BP_VAR_UNSET		148199	0					
ANR	148210	ExpressionStatement	"zval_undefined_cv ( var , execute_data )"	239:3:8485:8521	148199	2	True				
ANR	148211	CallExpression	"zval_undefined_cv ( var , execute_data )"		148199	0					
ANR	148212	Callee	zval_undefined_cv		148199	0					
ANR	148213	Identifier	zval_undefined_cv		148199	0					
ANR	148214	ArgumentList	var		148199	1					
ANR	148215	Argument	var		148199	0					
ANR	148216	Identifier	var		148199	0					
ANR	148217	Argument	execute_data		148199	1					
ANR	148218	Identifier	execute_data		148199	0					
ANR	148219	Label	case BP_VAR_IS :	241:2:8562:8576	148199	3	True				
ANR	148220	Identifier	BP_VAR_IS		148199	0					
ANR	148221	ExpressionStatement	ptr = & EG ( uninitialized_zval )	242:3:8581:8610	148199	4	True				
ANR	148222	AssignmentExpression	ptr = & EG ( uninitialized_zval )		148199	0		=			
ANR	148223	Identifier	ptr		148199	0					
ANR	148224	UnaryOperationExpression	& EG ( uninitialized_zval )		148199	1					
ANR	148225	UnaryOperator	&		148199	0					
ANR	148226	CallExpression	EG ( uninitialized_zval )		148199	1					
ANR	148227	Callee	EG		148199	0					
ANR	148228	Identifier	EG		148199	0					
ANR	148229	ArgumentList	uninitialized_zval		148199	1					
ANR	148230	Argument	uninitialized_zval		148199	0					
ANR	148231	Identifier	uninitialized_zval		148199	0					
ANR	148232	BreakStatement	break ;	243:3:8615:8620	148199	5	True				
ANR	148233	Label	case BP_VAR_RW :	244:2:8624:8638	148199	6	True				
ANR	148234	Identifier	BP_VAR_RW		148199	0					
ANR	148235	ExpressionStatement	"zval_undefined_cv ( var , execute_data )"	245:3:8643:8679	148199	7	True				
ANR	148236	CallExpression	"zval_undefined_cv ( var , execute_data )"		148199	0					
ANR	148237	Callee	zval_undefined_cv		148199	0					
ANR	148238	Identifier	zval_undefined_cv		148199	0					
ANR	148239	ArgumentList	var		148199	1					
ANR	148240	Argument	var		148199	0					
ANR	148241	Identifier	var		148199	0					
ANR	148242	Argument	execute_data		148199	1					
ANR	148243	Identifier	execute_data		148199	0					
ANR	148244	Label	case BP_VAR_W :	247:2:8720:8733	148199	8	True				
ANR	148245	Identifier	BP_VAR_W		148199	0					
ANR	148246	ExpressionStatement	ZVAL_NULL ( ptr )	248:3:8738:8752	148199	9	True				
ANR	148247	CallExpression	ZVAL_NULL ( ptr )		148199	0					
ANR	148248	Callee	ZVAL_NULL		148199	0					
ANR	148249	Identifier	ZVAL_NULL		148199	0					
ANR	148250	ArgumentList	ptr		148199	1					
ANR	148251	Argument	ptr		148199	0					
ANR	148252	Identifier	ptr		148199	0					
ANR	148253	BreakStatement	break ;	249:3:8757:8762	148199	10	True				
ANR	148254	ReturnStatement	return ptr ;	251:1:8768:8778	148199	1	True				
ANR	148255	Identifier	ptr		148199	0					
ANR	148256	ReturnType	static zend_never_inline zval *		148199	1					
ANR	148257	Identifier	_get_zval_cv_lookup		148199	2					
ANR	148258	ParameterList	"zval * ptr , uint32_t var , int type , const zend_execute_data * execute_data"		148199	3					
ANR	148259	Parameter	zval * ptr	234:51:8351:8359	148199	0	True				
ANR	148260	ParameterType	zval *		148199	0					
ANR	148261	Identifier	ptr		148199	1					
ANR	148262	Parameter	uint32_t var	234:62:8362:8373	148199	1	True				
ANR	148263	ParameterType	uint32_t		148199	0					
ANR	148264	Identifier	var		148199	1					
ANR	148265	Parameter	int type	234:76:8376:8383	148199	2	True				
ANR	148266	ParameterType	int		148199	0					
ANR	148267	Identifier	type		148199	1					
ANR	148268	Parameter	const zend_execute_data * execute_data	234:86:8386:8422	148199	3	True				
ANR	148269	ParameterType	const zend_execute_data *		148199	0					
ANR	148270	Identifier	execute_data		148199	1					
ANR	148271	CFGEntryNode	ENTRY		148199		True				
ANR	148272	CFGExitNode	EXIT		148199		True				
ANR	148273	Symbol	uninitialized_zval		148199						
ANR	148274	Symbol	var		148199						
ANR	148275	Symbol	type		148199						
ANR	148276	Symbol	& EG		148199						
ANR	148277	Symbol	execute_data		148199						
ANR	148278	Symbol	ptr		148199						
ANR	148279	Function	_get_zval_cv_lookup_BP_VAR_R	254:0:8783:8982							
ANR	148280	FunctionDef	"_get_zval_cv_lookup_BP_VAR_R (zval * ptr , uint32_t var , const zend_execute_data * execute_data)"		148279	0					
ANR	148281	CompoundStatement		255:0:8908:8982	148279	0					
ANR	148282	ExpressionStatement	"zval_undefined_cv ( var , execute_data )"	256:1:8911:8947	148279	0	True				
ANR	148283	CallExpression	"zval_undefined_cv ( var , execute_data )"		148279	0					
ANR	148284	Callee	zval_undefined_cv		148279	0					
ANR	148285	Identifier	zval_undefined_cv		148279	0					
ANR	148286	ArgumentList	var		148279	1					
ANR	148287	Argument	var		148279	0					
ANR	148288	Identifier	var		148279	0					
ANR	148289	Argument	execute_data		148279	1					
ANR	148290	Identifier	execute_data		148279	0					
ANR	148291	ReturnStatement	return & EG ( uninitialized_zval ) ;	257:1:8950:8980	148279	1	True				
ANR	148292	UnaryOperationExpression	& EG ( uninitialized_zval )		148279	0					
ANR	148293	UnaryOperator	&		148279	0					
ANR	148294	CallExpression	EG ( uninitialized_zval )		148279	1					
ANR	148295	Callee	EG		148279	0					
ANR	148296	Identifier	EG		148279	0					
ANR	148297	ArgumentList	uninitialized_zval		148279	1					
ANR	148298	Argument	uninitialized_zval		148279	0					
ANR	148299	Identifier	uninitialized_zval		148279	0					
ANR	148300	ReturnType	static zend_always_inline zval *		148279	1					
ANR	148301	Identifier	_get_zval_cv_lookup_BP_VAR_R		148279	2					
ANR	148302	ParameterList	"zval * ptr , uint32_t var , const zend_execute_data * execute_data"		148279	3					
ANR	148303	Parameter	zval * ptr	254:61:8844:8852	148279	0	True				
ANR	148304	ParameterType	zval *		148279	0					
ANR	148305	Identifier	ptr		148279	1					
ANR	148306	Parameter	uint32_t var	254:72:8855:8866	148279	1	True				
ANR	148307	ParameterType	uint32_t		148279	0					
ANR	148308	Identifier	var		148279	1					
ANR	148309	Parameter	const zend_execute_data * execute_data	254:86:8869:8905	148279	2	True				
ANR	148310	ParameterType	const zend_execute_data *		148279	0					
ANR	148311	Identifier	execute_data		148279	1					
ANR	148312	CFGEntryNode	ENTRY		148279		True				
ANR	148313	CFGExitNode	EXIT		148279		True				
ANR	148314	Symbol	uninitialized_zval		148279						
ANR	148315	Symbol	var		148279						
ANR	148316	Symbol	& EG		148279						
ANR	148317	Symbol	execute_data		148279						
ANR	148318	Symbol	ptr		148279						
ANR	148319	Function	_get_zval_cv_lookup_BP_VAR_UNSET	260:0:8985:9188							
ANR	148320	FunctionDef	"_get_zval_cv_lookup_BP_VAR_UNSET (zval * ptr , uint32_t var , const zend_execute_data * execute_data)"		148319	0					
ANR	148321	CompoundStatement		261:0:9114:9188	148319	0					
ANR	148322	ExpressionStatement	"zval_undefined_cv ( var , execute_data )"	262:1:9117:9153	148319	0	True				
ANR	148323	CallExpression	"zval_undefined_cv ( var , execute_data )"		148319	0					
ANR	148324	Callee	zval_undefined_cv		148319	0					
ANR	148325	Identifier	zval_undefined_cv		148319	0					
ANR	148326	ArgumentList	var		148319	1					
ANR	148327	Argument	var		148319	0					
ANR	148328	Identifier	var		148319	0					
ANR	148329	Argument	execute_data		148319	1					
ANR	148330	Identifier	execute_data		148319	0					
ANR	148331	ReturnStatement	return & EG ( uninitialized_zval ) ;	263:1:9156:9186	148319	1	True				
ANR	148332	UnaryOperationExpression	& EG ( uninitialized_zval )		148319	0					
ANR	148333	UnaryOperator	&		148319	0					
ANR	148334	CallExpression	EG ( uninitialized_zval )		148319	1					
ANR	148335	Callee	EG		148319	0					
ANR	148336	Identifier	EG		148319	0					
ANR	148337	ArgumentList	uninitialized_zval		148319	1					
ANR	148338	Argument	uninitialized_zval		148319	0					
ANR	148339	Identifier	uninitialized_zval		148319	0					
ANR	148340	ReturnType	static zend_always_inline zval *		148319	1					
ANR	148341	Identifier	_get_zval_cv_lookup_BP_VAR_UNSET		148319	2					
ANR	148342	ParameterList	"zval * ptr , uint32_t var , const zend_execute_data * execute_data"		148319	3					
ANR	148343	Parameter	zval * ptr	260:65:9050:9058	148319	0	True				
ANR	148344	ParameterType	zval *		148319	0					
ANR	148345	Identifier	ptr		148319	1					
ANR	148346	Parameter	uint32_t var	260:76:9061:9072	148319	1	True				
ANR	148347	ParameterType	uint32_t		148319	0					
ANR	148348	Identifier	var		148319	1					
ANR	148349	Parameter	const zend_execute_data * execute_data	260:90:9075:9111	148319	2	True				
ANR	148350	ParameterType	const zend_execute_data *		148319	0					
ANR	148351	Identifier	execute_data		148319	1					
ANR	148352	CFGEntryNode	ENTRY		148319		True				
ANR	148353	CFGExitNode	EXIT		148319		True				
ANR	148354	Symbol	uninitialized_zval		148319						
ANR	148355	Symbol	var		148319						
ANR	148356	Symbol	& EG		148319						
ANR	148357	Symbol	execute_data		148319						
ANR	148358	Symbol	ptr		148319						
ANR	148359	Function	_get_zval_cv_lookup_BP_VAR_RW	266:0:9191:9388							
ANR	148360	FunctionDef	"_get_zval_cv_lookup_BP_VAR_RW (zval * ptr , uint32_t var , const zend_execute_data * execute_data)"		148359	0					
ANR	148361	CompoundStatement		267:0:9317:9388	148359	0					
ANR	148362	ExpressionStatement	ZVAL_NULL ( ptr )	268:1:9320:9334	148359	0	True				
ANR	148363	CallExpression	ZVAL_NULL ( ptr )		148359	0					
ANR	148364	Callee	ZVAL_NULL		148359	0					
ANR	148365	Identifier	ZVAL_NULL		148359	0					
ANR	148366	ArgumentList	ptr		148359	1					
ANR	148367	Argument	ptr		148359	0					
ANR	148368	Identifier	ptr		148359	0					
ANR	148369	ExpressionStatement	"zval_undefined_cv ( var , execute_data )"	269:1:9337:9373	148359	1	True				
ANR	148370	CallExpression	"zval_undefined_cv ( var , execute_data )"		148359	0					
ANR	148371	Callee	zval_undefined_cv		148359	0					
ANR	148372	Identifier	zval_undefined_cv		148359	0					
ANR	148373	ArgumentList	var		148359	1					
ANR	148374	Argument	var		148359	0					
ANR	148375	Identifier	var		148359	0					
ANR	148376	Argument	execute_data		148359	1					
ANR	148377	Identifier	execute_data		148359	0					
ANR	148378	ReturnStatement	return ptr ;	270:1:9376:9386	148359	2	True				
ANR	148379	Identifier	ptr		148359	0					
ANR	148380	ReturnType	static zend_always_inline zval *		148359	1					
ANR	148381	Identifier	_get_zval_cv_lookup_BP_VAR_RW		148359	2					
ANR	148382	ParameterList	"zval * ptr , uint32_t var , const zend_execute_data * execute_data"		148359	3					
ANR	148383	Parameter	zval * ptr	266:62:9253:9261	148359	0	True				
ANR	148384	ParameterType	zval *		148359	0					
ANR	148385	Identifier	ptr		148359	1					
ANR	148386	Parameter	uint32_t var	266:73:9264:9275	148359	1	True				
ANR	148387	ParameterType	uint32_t		148359	0					
ANR	148388	Identifier	var		148359	1					
ANR	148389	Parameter	const zend_execute_data * execute_data	266:87:9278:9314	148359	2	True				
ANR	148390	ParameterType	const zend_execute_data *		148359	0					
ANR	148391	Identifier	execute_data		148359	1					
ANR	148392	CFGEntryNode	ENTRY		148359		True				
ANR	148393	CFGExitNode	EXIT		148359		True				
ANR	148394	Symbol	var		148359						
ANR	148395	Symbol	execute_data		148359						
ANR	148396	Symbol	ptr		148359						
ANR	148397	Function	_get_zval_cv_lookup_BP_VAR_W	273:0:9391:9548							
ANR	148398	FunctionDef	"_get_zval_cv_lookup_BP_VAR_W (zval * ptr , uint32_t var , const zend_execute_data * execute_data)"		148397	0					
ANR	148399	CompoundStatement		274:0:9516:9548	148397	0					
ANR	148400	ExpressionStatement	ZVAL_NULL ( ptr )	275:1:9519:9533	148397	0	True				
ANR	148401	CallExpression	ZVAL_NULL ( ptr )		148397	0					
ANR	148402	Callee	ZVAL_NULL		148397	0					
ANR	148403	Identifier	ZVAL_NULL		148397	0					
ANR	148404	ArgumentList	ptr		148397	1					
ANR	148405	Argument	ptr		148397	0					
ANR	148406	Identifier	ptr		148397	0					
ANR	148407	ReturnStatement	return ptr ;	276:1:9536:9546	148397	1	True				
ANR	148408	Identifier	ptr		148397	0					
ANR	148409	ReturnType	static zend_always_inline zval *		148397	1					
ANR	148410	Identifier	_get_zval_cv_lookup_BP_VAR_W		148397	2					
ANR	148411	ParameterList	"zval * ptr , uint32_t var , const zend_execute_data * execute_data"		148397	3					
ANR	148412	Parameter	zval * ptr	273:61:9452:9460	148397	0	True				
ANR	148413	ParameterType	zval *		148397	0					
ANR	148414	Identifier	ptr		148397	1					
ANR	148415	Parameter	uint32_t var	273:72:9463:9474	148397	1	True				
ANR	148416	ParameterType	uint32_t		148397	0					
ANR	148417	Identifier	var		148397	1					
ANR	148418	Parameter	const zend_execute_data * execute_data	273:86:9477:9513	148397	2	True				
ANR	148419	ParameterType	const zend_execute_data *		148397	0					
ANR	148420	Identifier	execute_data		148397	1					
ANR	148421	CFGEntryNode	ENTRY		148397		True				
ANR	148422	CFGExitNode	EXIT		148397		True				
ANR	148423	Symbol	var		148397						
ANR	148424	Symbol	execute_data		148397						
ANR	148425	Symbol	ptr		148397						
ANR	148426	Function	_get_zval_ptr_cv	279:0:9551:9814							
ANR	148427	FunctionDef	"_get_zval_ptr_cv (const zend_execute_data * execute_data , uint32_t var , int type)"		148426	0					
ANR	148428	CompoundStatement		280:0:9663:9814	148426	0					
ANR	148429	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	281:1:9666:9689	148426	0	True				
ANR	148430	IdentifierDecl	* ret = EX_VAR ( var )		148426	0					
ANR	148431	IdentifierDeclType	zval *		148426	0					
ANR	148432	Identifier	ret		148426	1					
ANR	148433	AssignmentExpression	* ret = EX_VAR ( var )		148426	2		=			
ANR	148434	Identifier	ret		148426	0					
ANR	148435	CallExpression	EX_VAR ( var )		148426	1					
ANR	148436	Callee	EX_VAR		148426	0					
ANR	148437	Identifier	EX_VAR		148426	0					
ANR	148438	ArgumentList	var		148426	1					
ANR	148439	Argument	var		148426	0					
ANR	148440	Identifier	var		148426	0					
ANR	148441	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF ) )		148426	1					
ANR	148442	Condition	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )	283:5:9697:9733	148426	0	True				
ANR	148443	CallExpression	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )		148426	0					
ANR	148444	Callee	UNEXPECTED		148426	0					
ANR	148445	Identifier	UNEXPECTED		148426	0					
ANR	148446	ArgumentList	Z_TYPE_P ( ret ) == IS_UNDEF		148426	1					
ANR	148447	Argument	Z_TYPE_P ( ret ) == IS_UNDEF		148426	0					
ANR	148448	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		148426	0		==			
ANR	148449	CallExpression	Z_TYPE_P ( ret )		148426	0					
ANR	148450	Callee	Z_TYPE_P		148426	0					
ANR	148451	Identifier	Z_TYPE_P		148426	0					
ANR	148452	ArgumentList	ret		148426	1					
ANR	148453	Argument	ret		148426	0					
ANR	148454	Identifier	ret		148426	0					
ANR	148455	Identifier	IS_UNDEF		148426	1					
ANR	148456	CompoundStatement		4:44:72:72	148426	1					
ANR	148457	ReturnStatement	"return _get_zval_cv_lookup ( ret , var , type , execute_data ) ;"	284:2:9740:9796	148426	0	True				
ANR	148458	CallExpression	"_get_zval_cv_lookup ( ret , var , type , execute_data )"		148426	0					
ANR	148459	Callee	_get_zval_cv_lookup		148426	0					
ANR	148460	Identifier	_get_zval_cv_lookup		148426	0					
ANR	148461	ArgumentList	ret		148426	1					
ANR	148462	Argument	ret		148426	0					
ANR	148463	Identifier	ret		148426	0					
ANR	148464	Argument	var		148426	1					
ANR	148465	Identifier	var		148426	0					
ANR	148466	Argument	type		148426	2					
ANR	148467	Identifier	type		148426	0					
ANR	148468	Argument	execute_data		148426	3					
ANR	148469	Identifier	execute_data		148426	0					
ANR	148470	ReturnStatement	return ret ;	286:1:9802:9812	148426	2	True				
ANR	148471	Identifier	ret		148426	0					
ANR	148472	ReturnType	static zend_always_inline zval *		148426	1					
ANR	148473	Identifier	_get_zval_ptr_cv		148426	2					
ANR	148474	ParameterList	"const zend_execute_data * execute_data , uint32_t var , int type"		148426	3					
ANR	148475	Parameter	const zend_execute_data * execute_data	279:49:9600:9636	148426	0	True				
ANR	148476	ParameterType	const zend_execute_data *		148426	0					
ANR	148477	Identifier	execute_data		148426	1					
ANR	148478	Parameter	uint32_t var	279:88:9639:9650	148426	1	True				
ANR	148479	ParameterType	uint32_t		148426	0					
ANR	148480	Identifier	var		148426	1					
ANR	148481	Parameter	int type	279:102:9653:9660	148426	2	True				
ANR	148482	ParameterType	int		148426	0					
ANR	148483	Identifier	type		148426	1					
ANR	148484	CFGEntryNode	ENTRY		148426		True				
ANR	148485	CFGExitNode	EXIT		148426		True				
ANR	148486	Symbol	ret		148426						
ANR	148487	Symbol	UNEXPECTED		148426						
ANR	148488	Symbol	_get_zval_cv_lookup		148426						
ANR	148489	Symbol	var		148426						
ANR	148490	Symbol	EX_VAR		148426						
ANR	148491	Symbol	type		148426						
ANR	148492	Symbol	Z_TYPE_P		148426						
ANR	148493	Symbol	execute_data		148426						
ANR	148494	Symbol	IS_UNDEF		148426						
ANR	148495	Function	_get_zval_ptr_cv_undef	289:0:9817:9948							
ANR	148496	FunctionDef	"_get_zval_ptr_cv_undef (const zend_execute_data * execute_data , uint32_t var)"		148495	0					
ANR	148497	CompoundStatement		290:0:9925:9948	148495	0					
ANR	148498	ReturnStatement	return EX_VAR ( var ) ;	291:1:9928:9946	148495	0	True				
ANR	148499	CallExpression	EX_VAR ( var )		148495	0					
ANR	148500	Callee	EX_VAR		148495	0					
ANR	148501	Identifier	EX_VAR		148495	0					
ANR	148502	ArgumentList	var		148495	1					
ANR	148503	Argument	var		148495	0					
ANR	148504	Identifier	var		148495	0					
ANR	148505	ReturnType	static zend_always_inline zval *		148495	1					
ANR	148506	Identifier	_get_zval_ptr_cv_undef		148495	2					
ANR	148507	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		148495	3					
ANR	148508	Parameter	const zend_execute_data * execute_data	289:55:9872:9908	148495	0	True				
ANR	148509	ParameterType	const zend_execute_data *		148495	0					
ANR	148510	Identifier	execute_data		148495	1					
ANR	148511	Parameter	uint32_t var	289:94:9911:9922	148495	1	True				
ANR	148512	ParameterType	uint32_t		148495	0					
ANR	148513	Identifier	var		148495	1					
ANR	148514	CFGEntryNode	ENTRY		148495		True				
ANR	148515	CFGExitNode	EXIT		148495		True				
ANR	148516	Symbol	var		148495						
ANR	148517	Symbol	EX_VAR		148495						
ANR	148518	Symbol	execute_data		148495						
ANR	148519	Function	_get_zval_ptr_cv_deref	294:0:9951:10238							
ANR	148520	FunctionDef	"_get_zval_ptr_cv_deref (const zend_execute_data * execute_data , uint32_t var , int type)"		148519	0					
ANR	148521	CompoundStatement		295:0:10069:10238	148519	0					
ANR	148522	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	296:1:10072:10095	148519	0	True				
ANR	148523	IdentifierDecl	* ret = EX_VAR ( var )		148519	0					
ANR	148524	IdentifierDeclType	zval *		148519	0					
ANR	148525	Identifier	ret		148519	1					
ANR	148526	AssignmentExpression	* ret = EX_VAR ( var )		148519	2		=			
ANR	148527	Identifier	ret		148519	0					
ANR	148528	CallExpression	EX_VAR ( var )		148519	1					
ANR	148529	Callee	EX_VAR		148519	0					
ANR	148530	Identifier	EX_VAR		148519	0					
ANR	148531	ArgumentList	var		148519	1					
ANR	148532	Argument	var		148519	0					
ANR	148533	Identifier	var		148519	0					
ANR	148534	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF ) )		148519	1					
ANR	148535	Condition	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )	298:5:10103:10139	148519	0	True				
ANR	148536	CallExpression	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )		148519	0					
ANR	148537	Callee	UNEXPECTED		148519	0					
ANR	148538	Identifier	UNEXPECTED		148519	0					
ANR	148539	ArgumentList	Z_TYPE_P ( ret ) == IS_UNDEF		148519	1					
ANR	148540	Argument	Z_TYPE_P ( ret ) == IS_UNDEF		148519	0					
ANR	148541	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		148519	0		==			
ANR	148542	CallExpression	Z_TYPE_P ( ret )		148519	0					
ANR	148543	Callee	Z_TYPE_P		148519	0					
ANR	148544	Identifier	Z_TYPE_P		148519	0					
ANR	148545	ArgumentList	ret		148519	1					
ANR	148546	Argument	ret		148519	0					
ANR	148547	Identifier	ret		148519	0					
ANR	148548	Identifier	IS_UNDEF		148519	1					
ANR	148549	CompoundStatement		4:44:72:72	148519	1					
ANR	148550	ReturnStatement	"return _get_zval_cv_lookup ( ret , var , type , execute_data ) ;"	299:2:10146:10202	148519	0	True				
ANR	148551	CallExpression	"_get_zval_cv_lookup ( ret , var , type , execute_data )"		148519	0					
ANR	148552	Callee	_get_zval_cv_lookup		148519	0					
ANR	148553	Identifier	_get_zval_cv_lookup		148519	0					
ANR	148554	ArgumentList	ret		148519	1					
ANR	148555	Argument	ret		148519	0					
ANR	148556	Identifier	ret		148519	0					
ANR	148557	Argument	var		148519	1					
ANR	148558	Identifier	var		148519	0					
ANR	148559	Argument	type		148519	2					
ANR	148560	Identifier	type		148519	0					
ANR	148561	Argument	execute_data		148519	3					
ANR	148562	Identifier	execute_data		148519	0					
ANR	148563	ExpressionStatement	ZVAL_DEREF ( ret )	301:1:10208:10223	148519	2	True				
ANR	148564	CallExpression	ZVAL_DEREF ( ret )		148519	0					
ANR	148565	Callee	ZVAL_DEREF		148519	0					
ANR	148566	Identifier	ZVAL_DEREF		148519	0					
ANR	148567	ArgumentList	ret		148519	1					
ANR	148568	Argument	ret		148519	0					
ANR	148569	Identifier	ret		148519	0					
ANR	148570	ReturnStatement	return ret ;	302:1:10226:10236	148519	3	True				
ANR	148571	Identifier	ret		148519	0					
ANR	148572	ReturnType	static zend_always_inline zval *		148519	1					
ANR	148573	Identifier	_get_zval_ptr_cv_deref		148519	2					
ANR	148574	ParameterList	"const zend_execute_data * execute_data , uint32_t var , int type"		148519	3					
ANR	148575	Parameter	const zend_execute_data * execute_data	294:55:10006:10042	148519	0	True				
ANR	148576	ParameterType	const zend_execute_data *		148519	0					
ANR	148577	Identifier	execute_data		148519	1					
ANR	148578	Parameter	uint32_t var	294:94:10045:10056	148519	1	True				
ANR	148579	ParameterType	uint32_t		148519	0					
ANR	148580	Identifier	var		148519	1					
ANR	148581	Parameter	int type	294:108:10059:10066	148519	2	True				
ANR	148582	ParameterType	int		148519	0					
ANR	148583	Identifier	type		148519	1					
ANR	148584	CFGEntryNode	ENTRY		148519		True				
ANR	148585	CFGExitNode	EXIT		148519		True				
ANR	148586	Symbol	ret		148519						
ANR	148587	Symbol	UNEXPECTED		148519						
ANR	148588	Symbol	_get_zval_cv_lookup		148519						
ANR	148589	Symbol	var		148519						
ANR	148590	Symbol	EX_VAR		148519						
ANR	148591	Symbol	type		148519						
ANR	148592	Symbol	Z_TYPE_P		148519						
ANR	148593	Symbol	execute_data		148519						
ANR	148594	Symbol	IS_UNDEF		148519						
ANR	148595	Function	_get_zval_ptr_cv_BP_VAR_R	305:0:10241:10506							
ANR	148596	FunctionDef	"_get_zval_ptr_cv_BP_VAR_R (const zend_execute_data * execute_data , uint32_t var)"		148595	0					
ANR	148597	CompoundStatement		306:0:10352:10506	148595	0					
ANR	148598	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	307:1:10355:10378	148595	0	True				
ANR	148599	IdentifierDecl	* ret = EX_VAR ( var )		148595	0					
ANR	148600	IdentifierDeclType	zval *		148595	0					
ANR	148601	Identifier	ret		148595	1					
ANR	148602	AssignmentExpression	* ret = EX_VAR ( var )		148595	2		=			
ANR	148603	Identifier	ret		148595	0					
ANR	148604	CallExpression	EX_VAR ( var )		148595	1					
ANR	148605	Callee	EX_VAR		148595	0					
ANR	148606	Identifier	EX_VAR		148595	0					
ANR	148607	ArgumentList	var		148595	1					
ANR	148608	Argument	var		148595	0					
ANR	148609	Identifier	var		148595	0					
ANR	148610	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF ) )		148595	1					
ANR	148611	Condition	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )	309:5:10386:10422	148595	0	True				
ANR	148612	CallExpression	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )		148595	0					
ANR	148613	Callee	UNEXPECTED		148595	0					
ANR	148614	Identifier	UNEXPECTED		148595	0					
ANR	148615	ArgumentList	Z_TYPE_P ( ret ) == IS_UNDEF		148595	1					
ANR	148616	Argument	Z_TYPE_P ( ret ) == IS_UNDEF		148595	0					
ANR	148617	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		148595	0		==			
ANR	148618	CallExpression	Z_TYPE_P ( ret )		148595	0					
ANR	148619	Callee	Z_TYPE_P		148595	0					
ANR	148620	Identifier	Z_TYPE_P		148595	0					
ANR	148621	ArgumentList	ret		148595	1					
ANR	148622	Argument	ret		148595	0					
ANR	148623	Identifier	ret		148595	0					
ANR	148624	Identifier	IS_UNDEF		148595	1					
ANR	148625	CompoundStatement		4:44:72:72	148595	1					
ANR	148626	ReturnStatement	"return _get_zval_cv_lookup_BP_VAR_R ( ret , var , execute_data ) ;"	310:2:10429:10488	148595	0	True				
ANR	148627	CallExpression	"_get_zval_cv_lookup_BP_VAR_R ( ret , var , execute_data )"		148595	0					
ANR	148628	Callee	_get_zval_cv_lookup_BP_VAR_R		148595	0					
ANR	148629	Identifier	_get_zval_cv_lookup_BP_VAR_R		148595	0					
ANR	148630	ArgumentList	ret		148595	1					
ANR	148631	Argument	ret		148595	0					
ANR	148632	Identifier	ret		148595	0					
ANR	148633	Argument	var		148595	1					
ANR	148634	Identifier	var		148595	0					
ANR	148635	Argument	execute_data		148595	2					
ANR	148636	Identifier	execute_data		148595	0					
ANR	148637	ReturnStatement	return ret ;	312:1:10494:10504	148595	2	True				
ANR	148638	Identifier	ret		148595	0					
ANR	148639	ReturnType	static zend_always_inline zval *		148595	1					
ANR	148640	Identifier	_get_zval_ptr_cv_BP_VAR_R		148595	2					
ANR	148641	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		148595	3					
ANR	148642	Parameter	const zend_execute_data * execute_data	305:58:10299:10335	148595	0	True				
ANR	148643	ParameterType	const zend_execute_data *		148595	0					
ANR	148644	Identifier	execute_data		148595	1					
ANR	148645	Parameter	uint32_t var	305:97:10338:10349	148595	1	True				
ANR	148646	ParameterType	uint32_t		148595	0					
ANR	148647	Identifier	var		148595	1					
ANR	148648	CFGEntryNode	ENTRY		148595		True				
ANR	148649	CFGExitNode	EXIT		148595		True				
ANR	148650	Symbol	ret		148595						
ANR	148651	Symbol	UNEXPECTED		148595						
ANR	148652	Symbol	_get_zval_cv_lookup_BP_VAR_R		148595						
ANR	148653	Symbol	var		148595						
ANR	148654	Symbol	EX_VAR		148595						
ANR	148655	Symbol	Z_TYPE_P		148595						
ANR	148656	Symbol	execute_data		148595						
ANR	148657	Symbol	IS_UNDEF		148595						
ANR	148658	Function	_get_zval_ptr_cv_deref_BP_VAR_R	315:0:10509:10798							
ANR	148659	FunctionDef	"_get_zval_ptr_cv_deref_BP_VAR_R (const zend_execute_data * execute_data , uint32_t var)"		148658	0					
ANR	148660	CompoundStatement		316:0:10626:10798	148658	0					
ANR	148661	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	317:1:10629:10652	148658	0	True				
ANR	148662	IdentifierDecl	* ret = EX_VAR ( var )		148658	0					
ANR	148663	IdentifierDeclType	zval *		148658	0					
ANR	148664	Identifier	ret		148658	1					
ANR	148665	AssignmentExpression	* ret = EX_VAR ( var )		148658	2		=			
ANR	148666	Identifier	ret		148658	0					
ANR	148667	CallExpression	EX_VAR ( var )		148658	1					
ANR	148668	Callee	EX_VAR		148658	0					
ANR	148669	Identifier	EX_VAR		148658	0					
ANR	148670	ArgumentList	var		148658	1					
ANR	148671	Argument	var		148658	0					
ANR	148672	Identifier	var		148658	0					
ANR	148673	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF ) )		148658	1					
ANR	148674	Condition	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )	319:5:10660:10696	148658	0	True				
ANR	148675	CallExpression	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )		148658	0					
ANR	148676	Callee	UNEXPECTED		148658	0					
ANR	148677	Identifier	UNEXPECTED		148658	0					
ANR	148678	ArgumentList	Z_TYPE_P ( ret ) == IS_UNDEF		148658	1					
ANR	148679	Argument	Z_TYPE_P ( ret ) == IS_UNDEF		148658	0					
ANR	148680	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		148658	0		==			
ANR	148681	CallExpression	Z_TYPE_P ( ret )		148658	0					
ANR	148682	Callee	Z_TYPE_P		148658	0					
ANR	148683	Identifier	Z_TYPE_P		148658	0					
ANR	148684	ArgumentList	ret		148658	1					
ANR	148685	Argument	ret		148658	0					
ANR	148686	Identifier	ret		148658	0					
ANR	148687	Identifier	IS_UNDEF		148658	1					
ANR	148688	CompoundStatement		4:44:72:72	148658	1					
ANR	148689	ReturnStatement	"return _get_zval_cv_lookup_BP_VAR_R ( ret , var , execute_data ) ;"	320:2:10703:10762	148658	0	True				
ANR	148690	CallExpression	"_get_zval_cv_lookup_BP_VAR_R ( ret , var , execute_data )"		148658	0					
ANR	148691	Callee	_get_zval_cv_lookup_BP_VAR_R		148658	0					
ANR	148692	Identifier	_get_zval_cv_lookup_BP_VAR_R		148658	0					
ANR	148693	ArgumentList	ret		148658	1					
ANR	148694	Argument	ret		148658	0					
ANR	148695	Identifier	ret		148658	0					
ANR	148696	Argument	var		148658	1					
ANR	148697	Identifier	var		148658	0					
ANR	148698	Argument	execute_data		148658	2					
ANR	148699	Identifier	execute_data		148658	0					
ANR	148700	ExpressionStatement	ZVAL_DEREF ( ret )	322:1:10768:10783	148658	2	True				
ANR	148701	CallExpression	ZVAL_DEREF ( ret )		148658	0					
ANR	148702	Callee	ZVAL_DEREF		148658	0					
ANR	148703	Identifier	ZVAL_DEREF		148658	0					
ANR	148704	ArgumentList	ret		148658	1					
ANR	148705	Argument	ret		148658	0					
ANR	148706	Identifier	ret		148658	0					
ANR	148707	ReturnStatement	return ret ;	323:1:10786:10796	148658	3	True				
ANR	148708	Identifier	ret		148658	0					
ANR	148709	ReturnType	static zend_always_inline zval *		148658	1					
ANR	148710	Identifier	_get_zval_ptr_cv_deref_BP_VAR_R		148658	2					
ANR	148711	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		148658	3					
ANR	148712	Parameter	const zend_execute_data * execute_data	315:64:10573:10609	148658	0	True				
ANR	148713	ParameterType	const zend_execute_data *		148658	0					
ANR	148714	Identifier	execute_data		148658	1					
ANR	148715	Parameter	uint32_t var	315:103:10612:10623	148658	1	True				
ANR	148716	ParameterType	uint32_t		148658	0					
ANR	148717	Identifier	var		148658	1					
ANR	148718	CFGEntryNode	ENTRY		148658		True				
ANR	148719	CFGExitNode	EXIT		148658		True				
ANR	148720	Symbol	ret		148658						
ANR	148721	Symbol	UNEXPECTED		148658						
ANR	148722	Symbol	_get_zval_cv_lookup_BP_VAR_R		148658						
ANR	148723	Symbol	var		148658						
ANR	148724	Symbol	EX_VAR		148658						
ANR	148725	Symbol	Z_TYPE_P		148658						
ANR	148726	Symbol	execute_data		148658						
ANR	148727	Symbol	IS_UNDEF		148658						
ANR	148728	Function	_get_zval_ptr_cv_BP_VAR_UNSET	326:0:10801:11074							
ANR	148729	FunctionDef	"_get_zval_ptr_cv_BP_VAR_UNSET (const zend_execute_data * execute_data , uint32_t var)"		148728	0					
ANR	148730	CompoundStatement		327:0:10916:11074	148728	0					
ANR	148731	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	328:1:10919:10942	148728	0	True				
ANR	148732	IdentifierDecl	* ret = EX_VAR ( var )		148728	0					
ANR	148733	IdentifierDeclType	zval *		148728	0					
ANR	148734	Identifier	ret		148728	1					
ANR	148735	AssignmentExpression	* ret = EX_VAR ( var )		148728	2		=			
ANR	148736	Identifier	ret		148728	0					
ANR	148737	CallExpression	EX_VAR ( var )		148728	1					
ANR	148738	Callee	EX_VAR		148728	0					
ANR	148739	Identifier	EX_VAR		148728	0					
ANR	148740	ArgumentList	var		148728	1					
ANR	148741	Argument	var		148728	0					
ANR	148742	Identifier	var		148728	0					
ANR	148743	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF ) )		148728	1					
ANR	148744	Condition	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )	330:5:10950:10986	148728	0	True				
ANR	148745	CallExpression	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )		148728	0					
ANR	148746	Callee	UNEXPECTED		148728	0					
ANR	148747	Identifier	UNEXPECTED		148728	0					
ANR	148748	ArgumentList	Z_TYPE_P ( ret ) == IS_UNDEF		148728	1					
ANR	148749	Argument	Z_TYPE_P ( ret ) == IS_UNDEF		148728	0					
ANR	148750	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		148728	0		==			
ANR	148751	CallExpression	Z_TYPE_P ( ret )		148728	0					
ANR	148752	Callee	Z_TYPE_P		148728	0					
ANR	148753	Identifier	Z_TYPE_P		148728	0					
ANR	148754	ArgumentList	ret		148728	1					
ANR	148755	Argument	ret		148728	0					
ANR	148756	Identifier	ret		148728	0					
ANR	148757	Identifier	IS_UNDEF		148728	1					
ANR	148758	CompoundStatement		4:44:72:72	148728	1					
ANR	148759	ReturnStatement	"return _get_zval_cv_lookup_BP_VAR_UNSET ( ret , var , execute_data ) ;"	331:2:10993:11056	148728	0	True				
ANR	148760	CallExpression	"_get_zval_cv_lookup_BP_VAR_UNSET ( ret , var , execute_data )"		148728	0					
ANR	148761	Callee	_get_zval_cv_lookup_BP_VAR_UNSET		148728	0					
ANR	148762	Identifier	_get_zval_cv_lookup_BP_VAR_UNSET		148728	0					
ANR	148763	ArgumentList	ret		148728	1					
ANR	148764	Argument	ret		148728	0					
ANR	148765	Identifier	ret		148728	0					
ANR	148766	Argument	var		148728	1					
ANR	148767	Identifier	var		148728	0					
ANR	148768	Argument	execute_data		148728	2					
ANR	148769	Identifier	execute_data		148728	0					
ANR	148770	ReturnStatement	return ret ;	333:1:11062:11072	148728	2	True				
ANR	148771	Identifier	ret		148728	0					
ANR	148772	ReturnType	static zend_always_inline zval *		148728	1					
ANR	148773	Identifier	_get_zval_ptr_cv_BP_VAR_UNSET		148728	2					
ANR	148774	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		148728	3					
ANR	148775	Parameter	const zend_execute_data * execute_data	326:62:10863:10899	148728	0	True				
ANR	148776	ParameterType	const zend_execute_data *		148728	0					
ANR	148777	Identifier	execute_data		148728	1					
ANR	148778	Parameter	uint32_t var	326:101:10902:10913	148728	1	True				
ANR	148779	ParameterType	uint32_t		148728	0					
ANR	148780	Identifier	var		148728	1					
ANR	148781	CFGEntryNode	ENTRY		148728		True				
ANR	148782	CFGExitNode	EXIT		148728		True				
ANR	148783	Symbol	ret		148728						
ANR	148784	Symbol	UNEXPECTED		148728						
ANR	148785	Symbol	var		148728						
ANR	148786	Symbol	EX_VAR		148728						
ANR	148787	Symbol	Z_TYPE_P		148728						
ANR	148788	Symbol	_get_zval_cv_lookup_BP_VAR_UNSET		148728						
ANR	148789	Symbol	execute_data		148728						
ANR	148790	Symbol	IS_UNDEF		148728						
ANR	148791	Function	_get_zval_ptr_cv_deref_BP_VAR_UNSET	336:0:11077:11374							
ANR	148792	FunctionDef	"_get_zval_ptr_cv_deref_BP_VAR_UNSET (const zend_execute_data * execute_data , uint32_t var)"		148791	0					
ANR	148793	CompoundStatement		337:0:11198:11374	148791	0					
ANR	148794	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	338:1:11201:11224	148791	0	True				
ANR	148795	IdentifierDecl	* ret = EX_VAR ( var )		148791	0					
ANR	148796	IdentifierDeclType	zval *		148791	0					
ANR	148797	Identifier	ret		148791	1					
ANR	148798	AssignmentExpression	* ret = EX_VAR ( var )		148791	2		=			
ANR	148799	Identifier	ret		148791	0					
ANR	148800	CallExpression	EX_VAR ( var )		148791	1					
ANR	148801	Callee	EX_VAR		148791	0					
ANR	148802	Identifier	EX_VAR		148791	0					
ANR	148803	ArgumentList	var		148791	1					
ANR	148804	Argument	var		148791	0					
ANR	148805	Identifier	var		148791	0					
ANR	148806	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF ) )		148791	1					
ANR	148807	Condition	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )	340:5:11232:11268	148791	0	True				
ANR	148808	CallExpression	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )		148791	0					
ANR	148809	Callee	UNEXPECTED		148791	0					
ANR	148810	Identifier	UNEXPECTED		148791	0					
ANR	148811	ArgumentList	Z_TYPE_P ( ret ) == IS_UNDEF		148791	1					
ANR	148812	Argument	Z_TYPE_P ( ret ) == IS_UNDEF		148791	0					
ANR	148813	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		148791	0		==			
ANR	148814	CallExpression	Z_TYPE_P ( ret )		148791	0					
ANR	148815	Callee	Z_TYPE_P		148791	0					
ANR	148816	Identifier	Z_TYPE_P		148791	0					
ANR	148817	ArgumentList	ret		148791	1					
ANR	148818	Argument	ret		148791	0					
ANR	148819	Identifier	ret		148791	0					
ANR	148820	Identifier	IS_UNDEF		148791	1					
ANR	148821	CompoundStatement		4:44:72:72	148791	1					
ANR	148822	ReturnStatement	"return _get_zval_cv_lookup_BP_VAR_UNSET ( ret , var , execute_data ) ;"	341:2:11275:11338	148791	0	True				
ANR	148823	CallExpression	"_get_zval_cv_lookup_BP_VAR_UNSET ( ret , var , execute_data )"		148791	0					
ANR	148824	Callee	_get_zval_cv_lookup_BP_VAR_UNSET		148791	0					
ANR	148825	Identifier	_get_zval_cv_lookup_BP_VAR_UNSET		148791	0					
ANR	148826	ArgumentList	ret		148791	1					
ANR	148827	Argument	ret		148791	0					
ANR	148828	Identifier	ret		148791	0					
ANR	148829	Argument	var		148791	1					
ANR	148830	Identifier	var		148791	0					
ANR	148831	Argument	execute_data		148791	2					
ANR	148832	Identifier	execute_data		148791	0					
ANR	148833	ExpressionStatement	ZVAL_DEREF ( ret )	343:1:11344:11359	148791	2	True				
ANR	148834	CallExpression	ZVAL_DEREF ( ret )		148791	0					
ANR	148835	Callee	ZVAL_DEREF		148791	0					
ANR	148836	Identifier	ZVAL_DEREF		148791	0					
ANR	148837	ArgumentList	ret		148791	1					
ANR	148838	Argument	ret		148791	0					
ANR	148839	Identifier	ret		148791	0					
ANR	148840	ReturnStatement	return ret ;	344:1:11362:11372	148791	3	True				
ANR	148841	Identifier	ret		148791	0					
ANR	148842	ReturnType	static zend_always_inline zval *		148791	1					
ANR	148843	Identifier	_get_zval_ptr_cv_deref_BP_VAR_UNSET		148791	2					
ANR	148844	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		148791	3					
ANR	148845	Parameter	const zend_execute_data * execute_data	336:68:11145:11181	148791	0	True				
ANR	148846	ParameterType	const zend_execute_data *		148791	0					
ANR	148847	Identifier	execute_data		148791	1					
ANR	148848	Parameter	uint32_t var	336:107:11184:11195	148791	1	True				
ANR	148849	ParameterType	uint32_t		148791	0					
ANR	148850	Identifier	var		148791	1					
ANR	148851	CFGEntryNode	ENTRY		148791		True				
ANR	148852	CFGExitNode	EXIT		148791		True				
ANR	148853	Symbol	ret		148791						
ANR	148854	Symbol	UNEXPECTED		148791						
ANR	148855	Symbol	var		148791						
ANR	148856	Symbol	EX_VAR		148791						
ANR	148857	Symbol	Z_TYPE_P		148791						
ANR	148858	Symbol	_get_zval_cv_lookup_BP_VAR_UNSET		148791						
ANR	148859	Symbol	execute_data		148791						
ANR	148860	Symbol	IS_UNDEF		148791						
ANR	148861	Function	_get_zval_ptr_cv_BP_VAR_IS	347:0:11377:11531							
ANR	148862	FunctionDef	"_get_zval_ptr_cv_BP_VAR_IS (const zend_execute_data * execute_data , uint32_t var)"		148861	0					
ANR	148863	CompoundStatement		348:0:11489:11531	148861	0					
ANR	148864	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	349:1:11492:11515	148861	0	True				
ANR	148865	IdentifierDecl	* ret = EX_VAR ( var )		148861	0					
ANR	148866	IdentifierDeclType	zval *		148861	0					
ANR	148867	Identifier	ret		148861	1					
ANR	148868	AssignmentExpression	* ret = EX_VAR ( var )		148861	2		=			
ANR	148869	Identifier	ret		148861	0					
ANR	148870	CallExpression	EX_VAR ( var )		148861	1					
ANR	148871	Callee	EX_VAR		148861	0					
ANR	148872	Identifier	EX_VAR		148861	0					
ANR	148873	ArgumentList	var		148861	1					
ANR	148874	Argument	var		148861	0					
ANR	148875	Identifier	var		148861	0					
ANR	148876	ReturnStatement	return ret ;	351:1:11519:11529	148861	1	True				
ANR	148877	Identifier	ret		148861	0					
ANR	148878	ReturnType	static zend_always_inline zval *		148861	1					
ANR	148879	Identifier	_get_zval_ptr_cv_BP_VAR_IS		148861	2					
ANR	148880	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		148861	3					
ANR	148881	Parameter	const zend_execute_data * execute_data	347:59:11436:11472	148861	0	True				
ANR	148882	ParameterType	const zend_execute_data *		148861	0					
ANR	148883	Identifier	execute_data		148861	1					
ANR	148884	Parameter	uint32_t var	347:98:11475:11486	148861	1	True				
ANR	148885	ParameterType	uint32_t		148861	0					
ANR	148886	Identifier	var		148861	1					
ANR	148887	CFGEntryNode	ENTRY		148861		True				
ANR	148888	CFGExitNode	EXIT		148861		True				
ANR	148889	Symbol	ret		148861						
ANR	148890	Symbol	var		148861						
ANR	148891	Symbol	EX_VAR		148861						
ANR	148892	Symbol	execute_data		148861						
ANR	148893	Function	_get_zval_ptr_cv_deref_BP_VAR_IS	354:0:11534:11712							
ANR	148894	FunctionDef	"_get_zval_ptr_cv_deref_BP_VAR_IS (const zend_execute_data * execute_data , uint32_t var)"		148893	0					
ANR	148895	CompoundStatement		355:0:11652:11712	148893	0					
ANR	148896	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	356:1:11655:11678	148893	0	True				
ANR	148897	IdentifierDecl	* ret = EX_VAR ( var )		148893	0					
ANR	148898	IdentifierDeclType	zval *		148893	0					
ANR	148899	Identifier	ret		148893	1					
ANR	148900	AssignmentExpression	* ret = EX_VAR ( var )		148893	2		=			
ANR	148901	Identifier	ret		148893	0					
ANR	148902	CallExpression	EX_VAR ( var )		148893	1					
ANR	148903	Callee	EX_VAR		148893	0					
ANR	148904	Identifier	EX_VAR		148893	0					
ANR	148905	ArgumentList	var		148893	1					
ANR	148906	Argument	var		148893	0					
ANR	148907	Identifier	var		148893	0					
ANR	148908	ExpressionStatement	ZVAL_DEREF ( ret )	358:1:11682:11697	148893	1	True				
ANR	148909	CallExpression	ZVAL_DEREF ( ret )		148893	0					
ANR	148910	Callee	ZVAL_DEREF		148893	0					
ANR	148911	Identifier	ZVAL_DEREF		148893	0					
ANR	148912	ArgumentList	ret		148893	1					
ANR	148913	Argument	ret		148893	0					
ANR	148914	Identifier	ret		148893	0					
ANR	148915	ReturnStatement	return ret ;	359:1:11700:11710	148893	2	True				
ANR	148916	Identifier	ret		148893	0					
ANR	148917	ReturnType	static zend_always_inline zval *		148893	1					
ANR	148918	Identifier	_get_zval_ptr_cv_deref_BP_VAR_IS		148893	2					
ANR	148919	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		148893	3					
ANR	148920	Parameter	const zend_execute_data * execute_data	354:65:11599:11635	148893	0	True				
ANR	148921	ParameterType	const zend_execute_data *		148893	0					
ANR	148922	Identifier	execute_data		148893	1					
ANR	148923	Parameter	uint32_t var	354:104:11638:11649	148893	1	True				
ANR	148924	ParameterType	uint32_t		148893	0					
ANR	148925	Identifier	var		148893	1					
ANR	148926	CFGEntryNode	ENTRY		148893		True				
ANR	148927	CFGExitNode	EXIT		148893		True				
ANR	148928	Symbol	ret		148893						
ANR	148929	Symbol	var		148893						
ANR	148930	Symbol	EX_VAR		148893						
ANR	148931	Symbol	execute_data		148893						
ANR	148932	Function	_get_zval_ptr_cv_BP_VAR_RW	362:0:11715:11982							
ANR	148933	FunctionDef	"_get_zval_ptr_cv_BP_VAR_RW (const zend_execute_data * execute_data , uint32_t var)"		148932	0					
ANR	148934	CompoundStatement		363:0:11827:11982	148932	0					
ANR	148935	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	364:1:11830:11853	148932	0	True				
ANR	148936	IdentifierDecl	* ret = EX_VAR ( var )		148932	0					
ANR	148937	IdentifierDeclType	zval *		148932	0					
ANR	148938	Identifier	ret		148932	1					
ANR	148939	AssignmentExpression	* ret = EX_VAR ( var )		148932	2		=			
ANR	148940	Identifier	ret		148932	0					
ANR	148941	CallExpression	EX_VAR ( var )		148932	1					
ANR	148942	Callee	EX_VAR		148932	0					
ANR	148943	Identifier	EX_VAR		148932	0					
ANR	148944	ArgumentList	var		148932	1					
ANR	148945	Argument	var		148932	0					
ANR	148946	Identifier	var		148932	0					
ANR	148947	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF ) )		148932	1					
ANR	148948	Condition	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )	366:5:11861:11897	148932	0	True				
ANR	148949	CallExpression	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )		148932	0					
ANR	148950	Callee	UNEXPECTED		148932	0					
ANR	148951	Identifier	UNEXPECTED		148932	0					
ANR	148952	ArgumentList	Z_TYPE_P ( ret ) == IS_UNDEF		148932	1					
ANR	148953	Argument	Z_TYPE_P ( ret ) == IS_UNDEF		148932	0					
ANR	148954	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		148932	0		==			
ANR	148955	CallExpression	Z_TYPE_P ( ret )		148932	0					
ANR	148956	Callee	Z_TYPE_P		148932	0					
ANR	148957	Identifier	Z_TYPE_P		148932	0					
ANR	148958	ArgumentList	ret		148932	1					
ANR	148959	Argument	ret		148932	0					
ANR	148960	Identifier	ret		148932	0					
ANR	148961	Identifier	IS_UNDEF		148932	1					
ANR	148962	CompoundStatement		4:44:72:72	148932	1					
ANR	148963	ReturnStatement	"return _get_zval_cv_lookup_BP_VAR_RW ( ret , var , execute_data ) ;"	367:2:11904:11964	148932	0	True				
ANR	148964	CallExpression	"_get_zval_cv_lookup_BP_VAR_RW ( ret , var , execute_data )"		148932	0					
ANR	148965	Callee	_get_zval_cv_lookup_BP_VAR_RW		148932	0					
ANR	148966	Identifier	_get_zval_cv_lookup_BP_VAR_RW		148932	0					
ANR	148967	ArgumentList	ret		148932	1					
ANR	148968	Argument	ret		148932	0					
ANR	148969	Identifier	ret		148932	0					
ANR	148970	Argument	var		148932	1					
ANR	148971	Identifier	var		148932	0					
ANR	148972	Argument	execute_data		148932	2					
ANR	148973	Identifier	execute_data		148932	0					
ANR	148974	ReturnStatement	return ret ;	369:1:11970:11980	148932	2	True				
ANR	148975	Identifier	ret		148932	0					
ANR	148976	ReturnType	static zend_always_inline zval *		148932	1					
ANR	148977	Identifier	_get_zval_ptr_cv_BP_VAR_RW		148932	2					
ANR	148978	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		148932	3					
ANR	148979	Parameter	const zend_execute_data * execute_data	362:59:11774:11810	148932	0	True				
ANR	148980	ParameterType	const zend_execute_data *		148932	0					
ANR	148981	Identifier	execute_data		148932	1					
ANR	148982	Parameter	uint32_t var	362:98:11813:11824	148932	1	True				
ANR	148983	ParameterType	uint32_t		148932	0					
ANR	148984	Identifier	var		148932	1					
ANR	148985	CFGEntryNode	ENTRY		148932		True				
ANR	148986	CFGExitNode	EXIT		148932		True				
ANR	148987	Symbol	ret		148932						
ANR	148988	Symbol	UNEXPECTED		148932						
ANR	148989	Symbol	var		148932						
ANR	148990	Symbol	_get_zval_cv_lookup_BP_VAR_RW		148932						
ANR	148991	Symbol	EX_VAR		148932						
ANR	148992	Symbol	Z_TYPE_P		148932						
ANR	148993	Symbol	execute_data		148932						
ANR	148994	Symbol	IS_UNDEF		148932						
ANR	148995	Function	_get_zval_ptr_cv_deref_BP_VAR_RW	372:0:11985:12276							
ANR	148996	FunctionDef	"_get_zval_ptr_cv_deref_BP_VAR_RW (const zend_execute_data * execute_data , uint32_t var)"		148995	0					
ANR	148997	CompoundStatement		373:0:12103:12276	148995	0					
ANR	148998	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	374:1:12106:12129	148995	0	True				
ANR	148999	IdentifierDecl	* ret = EX_VAR ( var )		148995	0					
ANR	149000	IdentifierDeclType	zval *		148995	0					
ANR	149001	Identifier	ret		148995	1					
ANR	149002	AssignmentExpression	* ret = EX_VAR ( var )		148995	2		=			
ANR	149003	Identifier	ret		148995	0					
ANR	149004	CallExpression	EX_VAR ( var )		148995	1					
ANR	149005	Callee	EX_VAR		148995	0					
ANR	149006	Identifier	EX_VAR		148995	0					
ANR	149007	ArgumentList	var		148995	1					
ANR	149008	Argument	var		148995	0					
ANR	149009	Identifier	var		148995	0					
ANR	149010	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF ) )		148995	1					
ANR	149011	Condition	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )	376:5:12137:12173	148995	0	True				
ANR	149012	CallExpression	UNEXPECTED ( Z_TYPE_P ( ret ) == IS_UNDEF )		148995	0					
ANR	149013	Callee	UNEXPECTED		148995	0					
ANR	149014	Identifier	UNEXPECTED		148995	0					
ANR	149015	ArgumentList	Z_TYPE_P ( ret ) == IS_UNDEF		148995	1					
ANR	149016	Argument	Z_TYPE_P ( ret ) == IS_UNDEF		148995	0					
ANR	149017	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		148995	0		==			
ANR	149018	CallExpression	Z_TYPE_P ( ret )		148995	0					
ANR	149019	Callee	Z_TYPE_P		148995	0					
ANR	149020	Identifier	Z_TYPE_P		148995	0					
ANR	149021	ArgumentList	ret		148995	1					
ANR	149022	Argument	ret		148995	0					
ANR	149023	Identifier	ret		148995	0					
ANR	149024	Identifier	IS_UNDEF		148995	1					
ANR	149025	CompoundStatement		4:44:72:72	148995	1					
ANR	149026	ReturnStatement	"return _get_zval_cv_lookup_BP_VAR_RW ( ret , var , execute_data ) ;"	377:2:12180:12240	148995	0	True				
ANR	149027	CallExpression	"_get_zval_cv_lookup_BP_VAR_RW ( ret , var , execute_data )"		148995	0					
ANR	149028	Callee	_get_zval_cv_lookup_BP_VAR_RW		148995	0					
ANR	149029	Identifier	_get_zval_cv_lookup_BP_VAR_RW		148995	0					
ANR	149030	ArgumentList	ret		148995	1					
ANR	149031	Argument	ret		148995	0					
ANR	149032	Identifier	ret		148995	0					
ANR	149033	Argument	var		148995	1					
ANR	149034	Identifier	var		148995	0					
ANR	149035	Argument	execute_data		148995	2					
ANR	149036	Identifier	execute_data		148995	0					
ANR	149037	ExpressionStatement	ZVAL_DEREF ( ret )	379:1:12246:12261	148995	2	True				
ANR	149038	CallExpression	ZVAL_DEREF ( ret )		148995	0					
ANR	149039	Callee	ZVAL_DEREF		148995	0					
ANR	149040	Identifier	ZVAL_DEREF		148995	0					
ANR	149041	ArgumentList	ret		148995	1					
ANR	149042	Argument	ret		148995	0					
ANR	149043	Identifier	ret		148995	0					
ANR	149044	ReturnStatement	return ret ;	380:1:12264:12274	148995	3	True				
ANR	149045	Identifier	ret		148995	0					
ANR	149046	ReturnType	static zend_always_inline zval *		148995	1					
ANR	149047	Identifier	_get_zval_ptr_cv_deref_BP_VAR_RW		148995	2					
ANR	149048	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		148995	3					
ANR	149049	Parameter	const zend_execute_data * execute_data	372:65:12050:12086	148995	0	True				
ANR	149050	ParameterType	const zend_execute_data *		148995	0					
ANR	149051	Identifier	execute_data		148995	1					
ANR	149052	Parameter	uint32_t var	372:104:12089:12100	148995	1	True				
ANR	149053	ParameterType	uint32_t		148995	0					
ANR	149054	Identifier	var		148995	1					
ANR	149055	CFGEntryNode	ENTRY		148995		True				
ANR	149056	CFGExitNode	EXIT		148995		True				
ANR	149057	Symbol	ret		148995						
ANR	149058	Symbol	UNEXPECTED		148995						
ANR	149059	Symbol	var		148995						
ANR	149060	Symbol	_get_zval_cv_lookup_BP_VAR_RW		148995						
ANR	149061	Symbol	EX_VAR		148995						
ANR	149062	Symbol	Z_TYPE_P		148995						
ANR	149063	Symbol	execute_data		148995						
ANR	149064	Symbol	IS_UNDEF		148995						
ANR	149065	Function	_get_zval_ptr_cv_BP_VAR_W	383:0:12279:12532							
ANR	149066	FunctionDef	"_get_zval_ptr_cv_BP_VAR_W (const zend_execute_data * execute_data , uint32_t var)"		149065	0					
ANR	149067	CompoundStatement		384:0:12390:12532	149065	0					
ANR	149068	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	385:1:12393:12416	149065	0	True				
ANR	149069	IdentifierDecl	* ret = EX_VAR ( var )		149065	0					
ANR	149070	IdentifierDeclType	zval *		149065	0					
ANR	149071	Identifier	ret		149065	1					
ANR	149072	AssignmentExpression	* ret = EX_VAR ( var )		149065	2		=			
ANR	149073	Identifier	ret		149065	0					
ANR	149074	CallExpression	EX_VAR ( var )		149065	1					
ANR	149075	Callee	EX_VAR		149065	0					
ANR	149076	Identifier	EX_VAR		149065	0					
ANR	149077	ArgumentList	var		149065	1					
ANR	149078	Argument	var		149065	0					
ANR	149079	Identifier	var		149065	0					
ANR	149080	IfStatement	if ( Z_TYPE_P ( ret ) == IS_UNDEF )		149065	1					
ANR	149081	Condition	Z_TYPE_P ( ret ) == IS_UNDEF	387:5:12424:12448	149065	0	True				
ANR	149082	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		149065	0		==			
ANR	149083	CallExpression	Z_TYPE_P ( ret )		149065	0					
ANR	149084	Callee	Z_TYPE_P		149065	0					
ANR	149085	Identifier	Z_TYPE_P		149065	0					
ANR	149086	ArgumentList	ret		149065	1					
ANR	149087	Argument	ret		149065	0					
ANR	149088	Identifier	ret		149065	0					
ANR	149089	Identifier	IS_UNDEF		149065	1					
ANR	149090	CompoundStatement		4:32:60:60	149065	1					
ANR	149091	ReturnStatement	"return _get_zval_cv_lookup_BP_VAR_W ( ret , var , execute_data ) ;"	388:2:12455:12514	149065	0	True				
ANR	149092	CallExpression	"_get_zval_cv_lookup_BP_VAR_W ( ret , var , execute_data )"		149065	0					
ANR	149093	Callee	_get_zval_cv_lookup_BP_VAR_W		149065	0					
ANR	149094	Identifier	_get_zval_cv_lookup_BP_VAR_W		149065	0					
ANR	149095	ArgumentList	ret		149065	1					
ANR	149096	Argument	ret		149065	0					
ANR	149097	Identifier	ret		149065	0					
ANR	149098	Argument	var		149065	1					
ANR	149099	Identifier	var		149065	0					
ANR	149100	Argument	execute_data		149065	2					
ANR	149101	Identifier	execute_data		149065	0					
ANR	149102	ReturnStatement	return ret ;	390:1:12520:12530	149065	2	True				
ANR	149103	Identifier	ret		149065	0					
ANR	149104	ReturnType	static zend_always_inline zval *		149065	1					
ANR	149105	Identifier	_get_zval_ptr_cv_BP_VAR_W		149065	2					
ANR	149106	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		149065	3					
ANR	149107	Parameter	const zend_execute_data * execute_data	383:58:12337:12373	149065	0	True				
ANR	149108	ParameterType	const zend_execute_data *		149065	0					
ANR	149109	Identifier	execute_data		149065	1					
ANR	149110	Parameter	uint32_t var	383:97:12376:12387	149065	1	True				
ANR	149111	ParameterType	uint32_t		149065	0					
ANR	149112	Identifier	var		149065	1					
ANR	149113	CFGEntryNode	ENTRY		149065		True				
ANR	149114	CFGExitNode	EXIT		149065		True				
ANR	149115	Symbol	ret		149065						
ANR	149116	Symbol	_get_zval_cv_lookup_BP_VAR_W		149065						
ANR	149117	Symbol	var		149065						
ANR	149118	Symbol	EX_VAR		149065						
ANR	149119	Symbol	Z_TYPE_P		149065						
ANR	149120	Symbol	execute_data		149065						
ANR	149121	Symbol	IS_UNDEF		149065						
ANR	149122	Function	_get_zval_ptr_cv_undef_BP_VAR_W	393:0:12535:12675							
ANR	149123	FunctionDef	"_get_zval_ptr_cv_undef_BP_VAR_W (const zend_execute_data * execute_data , uint32_t var)"		149122	0					
ANR	149124	CompoundStatement		394:0:12652:12675	149122	0					
ANR	149125	ReturnStatement	return EX_VAR ( var ) ;	395:1:12655:12673	149122	0	True				
ANR	149126	CallExpression	EX_VAR ( var )		149122	0					
ANR	149127	Callee	EX_VAR		149122	0					
ANR	149128	Identifier	EX_VAR		149122	0					
ANR	149129	ArgumentList	var		149122	1					
ANR	149130	Argument	var		149122	0					
ANR	149131	Identifier	var		149122	0					
ANR	149132	ReturnType	static zend_always_inline zval *		149122	1					
ANR	149133	Identifier	_get_zval_ptr_cv_undef_BP_VAR_W		149122	2					
ANR	149134	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		149122	3					
ANR	149135	Parameter	const zend_execute_data * execute_data	393:64:12599:12635	149122	0	True				
ANR	149136	ParameterType	const zend_execute_data *		149122	0					
ANR	149137	Identifier	execute_data		149122	1					
ANR	149138	Parameter	uint32_t var	393:103:12638:12649	149122	1	True				
ANR	149139	ParameterType	uint32_t		149122	0					
ANR	149140	Identifier	var		149122	1					
ANR	149141	CFGEntryNode	ENTRY		149122		True				
ANR	149142	CFGExitNode	EXIT		149122		True				
ANR	149143	Symbol	var		149122						
ANR	149144	Symbol	EX_VAR		149122						
ANR	149145	Symbol	execute_data		149122						
ANR	149146	Function	_get_zval_ptr_cv_undef_BP_VAR_RW	398:0:12678:12819							
ANR	149147	FunctionDef	"_get_zval_ptr_cv_undef_BP_VAR_RW (const zend_execute_data * execute_data , uint32_t var)"		149146	0					
ANR	149148	CompoundStatement		399:0:12796:12819	149146	0					
ANR	149149	ReturnStatement	return EX_VAR ( var ) ;	400:1:12799:12817	149146	0	True				
ANR	149150	CallExpression	EX_VAR ( var )		149146	0					
ANR	149151	Callee	EX_VAR		149146	0					
ANR	149152	Identifier	EX_VAR		149146	0					
ANR	149153	ArgumentList	var		149146	1					
ANR	149154	Argument	var		149146	0					
ANR	149155	Identifier	var		149146	0					
ANR	149156	ReturnType	static zend_always_inline zval *		149146	1					
ANR	149157	Identifier	_get_zval_ptr_cv_undef_BP_VAR_RW		149146	2					
ANR	149158	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		149146	3					
ANR	149159	Parameter	const zend_execute_data * execute_data	398:65:12743:12779	149146	0	True				
ANR	149160	ParameterType	const zend_execute_data *		149146	0					
ANR	149161	Identifier	execute_data		149146	1					
ANR	149162	Parameter	uint32_t var	398:104:12782:12793	149146	1	True				
ANR	149163	ParameterType	uint32_t		149146	0					
ANR	149164	Identifier	var		149146	1					
ANR	149165	CFGEntryNode	ENTRY		149146		True				
ANR	149166	CFGExitNode	EXIT		149146		True				
ANR	149167	Symbol	var		149146						
ANR	149168	Symbol	EX_VAR		149146						
ANR	149169	Symbol	execute_data		149146						
ANR	149170	Function	_get_zval_ptr_cv_deref_BP_VAR_W	403:0:12822:13099							
ANR	149171	FunctionDef	"_get_zval_ptr_cv_deref_BP_VAR_W (const zend_execute_data * execute_data , uint32_t var)"		149170	0					
ANR	149172	CompoundStatement		404:0:12939:13099	149170	0					
ANR	149173	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	405:1:12942:12965	149170	0	True				
ANR	149174	IdentifierDecl	* ret = EX_VAR ( var )		149170	0					
ANR	149175	IdentifierDeclType	zval *		149170	0					
ANR	149176	Identifier	ret		149170	1					
ANR	149177	AssignmentExpression	* ret = EX_VAR ( var )		149170	2		=			
ANR	149178	Identifier	ret		149170	0					
ANR	149179	CallExpression	EX_VAR ( var )		149170	1					
ANR	149180	Callee	EX_VAR		149170	0					
ANR	149181	Identifier	EX_VAR		149170	0					
ANR	149182	ArgumentList	var		149170	1					
ANR	149183	Argument	var		149170	0					
ANR	149184	Identifier	var		149170	0					
ANR	149185	IfStatement	if ( Z_TYPE_P ( ret ) == IS_UNDEF )		149170	1					
ANR	149186	Condition	Z_TYPE_P ( ret ) == IS_UNDEF	407:5:12973:12997	149170	0	True				
ANR	149187	EqualityExpression	Z_TYPE_P ( ret ) == IS_UNDEF		149170	0		==			
ANR	149188	CallExpression	Z_TYPE_P ( ret )		149170	0					
ANR	149189	Callee	Z_TYPE_P		149170	0					
ANR	149190	Identifier	Z_TYPE_P		149170	0					
ANR	149191	ArgumentList	ret		149170	1					
ANR	149192	Argument	ret		149170	0					
ANR	149193	Identifier	ret		149170	0					
ANR	149194	Identifier	IS_UNDEF		149170	1					
ANR	149195	CompoundStatement		4:32:60:60	149170	1					
ANR	149196	ReturnStatement	"return _get_zval_cv_lookup_BP_VAR_W ( ret , var , execute_data ) ;"	408:2:13004:13063	149170	0	True				
ANR	149197	CallExpression	"_get_zval_cv_lookup_BP_VAR_W ( ret , var , execute_data )"		149170	0					
ANR	149198	Callee	_get_zval_cv_lookup_BP_VAR_W		149170	0					
ANR	149199	Identifier	_get_zval_cv_lookup_BP_VAR_W		149170	0					
ANR	149200	ArgumentList	ret		149170	1					
ANR	149201	Argument	ret		149170	0					
ANR	149202	Identifier	ret		149170	0					
ANR	149203	Argument	var		149170	1					
ANR	149204	Identifier	var		149170	0					
ANR	149205	Argument	execute_data		149170	2					
ANR	149206	Identifier	execute_data		149170	0					
ANR	149207	ExpressionStatement	ZVAL_DEREF ( ret )	410:1:13069:13084	149170	2	True				
ANR	149208	CallExpression	ZVAL_DEREF ( ret )		149170	0					
ANR	149209	Callee	ZVAL_DEREF		149170	0					
ANR	149210	Identifier	ZVAL_DEREF		149170	0					
ANR	149211	ArgumentList	ret		149170	1					
ANR	149212	Argument	ret		149170	0					
ANR	149213	Identifier	ret		149170	0					
ANR	149214	ReturnStatement	return ret ;	411:1:13087:13097	149170	3	True				
ANR	149215	Identifier	ret		149170	0					
ANR	149216	ReturnType	static zend_always_inline zval *		149170	1					
ANR	149217	Identifier	_get_zval_ptr_cv_deref_BP_VAR_W		149170	2					
ANR	149218	ParameterList	"const zend_execute_data * execute_data , uint32_t var"		149170	3					
ANR	149219	Parameter	const zend_execute_data * execute_data	403:64:12886:12922	149170	0	True				
ANR	149220	ParameterType	const zend_execute_data *		149170	0					
ANR	149221	Identifier	execute_data		149170	1					
ANR	149222	Parameter	uint32_t var	403:103:12925:12936	149170	1	True				
ANR	149223	ParameterType	uint32_t		149170	0					
ANR	149224	Identifier	var		149170	1					
ANR	149225	CFGEntryNode	ENTRY		149170		True				
ANR	149226	CFGExitNode	EXIT		149170		True				
ANR	149227	Symbol	ret		149170						
ANR	149228	Symbol	_get_zval_cv_lookup_BP_VAR_W		149170						
ANR	149229	Symbol	var		149170						
ANR	149230	Symbol	EX_VAR		149170						
ANR	149231	Symbol	Z_TYPE_P		149170						
ANR	149232	Symbol	execute_data		149170						
ANR	149233	Symbol	IS_UNDEF		149170						
ANR	149234	Function	_get_zval_ptr	414:0:13102:13721							
ANR	149235	FunctionDef	"_get_zval_ptr (int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free , int type)"		149234	0					
ANR	149236	CompoundStatement		415:0:13252:13721	149234	0					
ANR	149237	IfStatement	if ( op_type & ( IS_TMP_VAR | IS_VAR ) )		149234	0					
ANR	149238	Condition	op_type & ( IS_TMP_VAR | IS_VAR )	416:5:13259:13287	149234	0	True				
ANR	149239	BitAndExpression	op_type & ( IS_TMP_VAR | IS_VAR )		149234	0		&			
ANR	149240	Identifier	op_type		149234	0					
ANR	149241	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		149234	1		|			
ANR	149242	Identifier	IS_TMP_VAR		149234	0					
ANR	149243	Identifier	IS_VAR		149234	1					
ANR	149244	CompoundStatement		2:36:37:37	149234	1					
ANR	149245	IfStatement	if ( op_type == IS_TMP_VAR )		149234	0					
ANR	149246	Condition	op_type == IS_TMP_VAR	417:6:13298:13318	149234	0	True				
ANR	149247	EqualityExpression	op_type == IS_TMP_VAR		149234	0		==			
ANR	149248	Identifier	op_type		149234	0					
ANR	149249	Identifier	IS_TMP_VAR		149234	1					
ANR	149250	CompoundStatement		3:29:68:68	149234	1					
ANR	149251	ReturnStatement	"return _get_zval_ptr_tmp ( node . var , execute_data , should_free ) ;"	418:3:13326:13387	149234	0	True				
ANR	149252	CallExpression	"_get_zval_ptr_tmp ( node . var , execute_data , should_free )"		149234	0					
ANR	149253	Callee	_get_zval_ptr_tmp		149234	0					
ANR	149254	Identifier	_get_zval_ptr_tmp		149234	0					
ANR	149255	ArgumentList	node . var		149234	1					
ANR	149256	Argument	node . var		149234	0					
ANR	149257	MemberAccess	node . var		149234	0					
ANR	149258	Identifier	node		149234	0					
ANR	149259	Identifier	var		149234	1					
ANR	149260	Argument	execute_data		149234	1					
ANR	149261	Identifier	execute_data		149234	0					
ANR	149262	Argument	should_free		149234	2					
ANR	149263	Identifier	should_free		149234	0					
ANR	149264	ElseStatement	else		149234	0					
ANR	149265	CompoundStatement		5:9:145:145	149234	0					
ANR	149266	ExpressionStatement	ZEND_ASSERT ( op_type == IS_VAR )	420:3:13403:13433	149234	0	True				
ANR	149267	CallExpression	ZEND_ASSERT ( op_type == IS_VAR )		149234	0					
ANR	149268	Callee	ZEND_ASSERT		149234	0					
ANR	149269	Identifier	ZEND_ASSERT		149234	0					
ANR	149270	ArgumentList	op_type == IS_VAR		149234	1					
ANR	149271	Argument	op_type == IS_VAR		149234	0					
ANR	149272	EqualityExpression	op_type == IS_VAR		149234	0		==			
ANR	149273	Identifier	op_type		149234	0					
ANR	149274	Identifier	IS_VAR		149234	1					
ANR	149275	ReturnStatement	"return _get_zval_ptr_var ( node . var , execute_data , should_free ) ;"	421:3:13438:13499	149234	1	True				
ANR	149276	CallExpression	"_get_zval_ptr_var ( node . var , execute_data , should_free )"		149234	0					
ANR	149277	Callee	_get_zval_ptr_var		149234	0					
ANR	149278	Identifier	_get_zval_ptr_var		149234	0					
ANR	149279	ArgumentList	node . var		149234	1					
ANR	149280	Argument	node . var		149234	0					
ANR	149281	MemberAccess	node . var		149234	0					
ANR	149282	Identifier	node		149234	0					
ANR	149283	Identifier	var		149234	1					
ANR	149284	Argument	execute_data		149234	1					
ANR	149285	Identifier	execute_data		149234	0					
ANR	149286	Argument	should_free		149234	2					
ANR	149287	Identifier	should_free		149234	0					
ANR	149288	ElseStatement	else		149234	0					
ANR	149289	CompoundStatement		9:8:260:260	149234	0					
ANR	149290	ExpressionStatement	* should_free = NULL	424:2:13517:13536	149234	0	True				
ANR	149291	AssignmentExpression	* should_free = NULL		149234	0		=			
ANR	149292	UnaryOperationExpression	* should_free		149234	0					
ANR	149293	UnaryOperator	*		149234	0					
ANR	149294	Identifier	should_free		149234	1					
ANR	149295	Identifier	NULL		149234	1					
ANR	149296	IfStatement	if ( op_type == IS_CONST )		149234	1					
ANR	149297	Condition	op_type == IS_CONST	425:6:13544:13562	149234	0	True				
ANR	149298	EqualityExpression	op_type == IS_CONST		149234	0		==			
ANR	149299	Identifier	op_type		149234	0					
ANR	149300	Identifier	IS_CONST		149234	1					
ANR	149301	CompoundStatement		11:27:312:312	149234	1					
ANR	149302	ReturnStatement	return EX_CONSTANT ( node ) ;	426:3:13570:13594	149234	0	True				
ANR	149303	CallExpression	EX_CONSTANT ( node )		149234	0					
ANR	149304	Callee	EX_CONSTANT		149234	0					
ANR	149305	Identifier	EX_CONSTANT		149234	0					
ANR	149306	ArgumentList	node		149234	1					
ANR	149307	Argument	node		149234	0					
ANR	149308	Identifier	node		149234	0					
ANR	149309	ElseStatement	else		149234	0					
ANR	149310	IfStatement	if ( op_type == IS_CV )		149234	0					
ANR	149311	Condition	op_type == IS_CV	427:13:13609:13624	149234	0	True				
ANR	149312	EqualityExpression	op_type == IS_CV		149234	0		==			
ANR	149313	Identifier	op_type		149234	0					
ANR	149314	Identifier	IS_CV		149234	1					
ANR	149315	CompoundStatement		13:31:374:374	149234	1					
ANR	149316	ReturnStatement	"return _get_zval_ptr_cv ( execute_data , node . var , type ) ;"	428:3:13632:13685	149234	0	True				
ANR	149317	CallExpression	"_get_zval_ptr_cv ( execute_data , node . var , type )"		149234	0					
ANR	149318	Callee	_get_zval_ptr_cv		149234	0					
ANR	149319	Identifier	_get_zval_ptr_cv		149234	0					
ANR	149320	ArgumentList	execute_data		149234	1					
ANR	149321	Argument	execute_data		149234	0					
ANR	149322	Identifier	execute_data		149234	0					
ANR	149323	Argument	node . var		149234	1					
ANR	149324	MemberAccess	node . var		149234	0					
ANR	149325	Identifier	node		149234	0					
ANR	149326	Identifier	var		149234	1					
ANR	149327	Argument	type		149234	2					
ANR	149328	Identifier	type		149234	0					
ANR	149329	ElseStatement	else		149234	0					
ANR	149330	CompoundStatement		15:9:443:443	149234	0					
ANR	149331	ReturnStatement	return NULL ;	430:3:13701:13712	149234	0	True				
ANR	149332	Identifier	NULL		149234	0					
ANR	149333	ReturnType	static zend_always_inline zval *		149234	1					
ANR	149334	Identifier	_get_zval_ptr		149234	2					
ANR	149335	ParameterList	"int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free , int type"		149234	3					
ANR	149336	Parameter	int op_type	414:46:13148:13158	149234	0	True				
ANR	149337	ParameterType	int		149234	0					
ANR	149338	Identifier	op_type		149234	1					
ANR	149339	Parameter	znode_op node	414:59:13161:13173	149234	1	True				
ANR	149340	ParameterType	znode_op		149234	0					
ANR	149341	Identifier	node		149234	1					
ANR	149342	Parameter	const zend_execute_data * execute_data	414:74:13176:13212	149234	2	True				
ANR	149343	ParameterType	const zend_execute_data *		149234	0					
ANR	149344	Identifier	execute_data		149234	1					
ANR	149345	Parameter	zend_free_op * should_free	414:113:13215:13239	149234	3	True				
ANR	149346	ParameterType	zend_free_op *		149234	0					
ANR	149347	Identifier	should_free		149234	1					
ANR	149348	Parameter	int type	414:140:13242:13249	149234	4	True				
ANR	149349	ParameterType	int		149234	0					
ANR	149350	Identifier	type		149234	1					
ANR	149351	CFGEntryNode	ENTRY		149234		True				
ANR	149352	CFGExitNode	EXIT		149234		True				
ANR	149353	Symbol	should_free		149234						
ANR	149354	Symbol	IS_CONST		149234						
ANR	149355	Symbol	NULL		149234						
ANR	149356	Symbol	IS_CV		149234						
ANR	149357	Symbol	EX_CONSTANT		149234						
ANR	149358	Symbol	_get_zval_ptr_tmp		149234						
ANR	149359	Symbol	_get_zval_ptr_cv		149234						
ANR	149360	Symbol	type		149234						
ANR	149361	Symbol	execute_data		149234						
ANR	149362	Symbol	node . var		149234						
ANR	149363	Symbol	* should_free		149234						
ANR	149364	Symbol	node		149234						
ANR	149365	Symbol	_get_zval_ptr_var		149234						
ANR	149366	Symbol	op_type		149234						
ANR	149367	Symbol	IS_VAR		149234						
ANR	149368	Symbol	IS_TMP_VAR		149234						
ANR	149369	Function	_get_zval_ptr_r	435:0:13724:14338							
ANR	149370	FunctionDef	"_get_zval_ptr_r (int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free)"		149369	0					
ANR	149371	CompoundStatement		436:0:13866:14338	149369	0					
ANR	149372	IfStatement	if ( op_type & ( IS_TMP_VAR | IS_VAR ) )		149369	0					
ANR	149373	Condition	op_type & ( IS_TMP_VAR | IS_VAR )	437:5:13873:13901	149369	0	True				
ANR	149374	BitAndExpression	op_type & ( IS_TMP_VAR | IS_VAR )		149369	0		&			
ANR	149375	Identifier	op_type		149369	0					
ANR	149376	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		149369	1		|			
ANR	149377	Identifier	IS_TMP_VAR		149369	0					
ANR	149378	Identifier	IS_VAR		149369	1					
ANR	149379	CompoundStatement		2:36:37:37	149369	1					
ANR	149380	IfStatement	if ( op_type == IS_TMP_VAR )		149369	0					
ANR	149381	Condition	op_type == IS_TMP_VAR	438:6:13912:13932	149369	0	True				
ANR	149382	EqualityExpression	op_type == IS_TMP_VAR		149369	0		==			
ANR	149383	Identifier	op_type		149369	0					
ANR	149384	Identifier	IS_TMP_VAR		149369	1					
ANR	149385	CompoundStatement		3:29:68:68	149369	1					
ANR	149386	ReturnStatement	"return _get_zval_ptr_tmp ( node . var , execute_data , should_free ) ;"	439:3:13940:14001	149369	0	True				
ANR	149387	CallExpression	"_get_zval_ptr_tmp ( node . var , execute_data , should_free )"		149369	0					
ANR	149388	Callee	_get_zval_ptr_tmp		149369	0					
ANR	149389	Identifier	_get_zval_ptr_tmp		149369	0					
ANR	149390	ArgumentList	node . var		149369	1					
ANR	149391	Argument	node . var		149369	0					
ANR	149392	MemberAccess	node . var		149369	0					
ANR	149393	Identifier	node		149369	0					
ANR	149394	Identifier	var		149369	1					
ANR	149395	Argument	execute_data		149369	1					
ANR	149396	Identifier	execute_data		149369	0					
ANR	149397	Argument	should_free		149369	2					
ANR	149398	Identifier	should_free		149369	0					
ANR	149399	ElseStatement	else		149369	0					
ANR	149400	CompoundStatement		5:9:145:145	149369	0					
ANR	149401	ExpressionStatement	ZEND_ASSERT ( op_type == IS_VAR )	441:3:14017:14047	149369	0	True				
ANR	149402	CallExpression	ZEND_ASSERT ( op_type == IS_VAR )		149369	0					
ANR	149403	Callee	ZEND_ASSERT		149369	0					
ANR	149404	Identifier	ZEND_ASSERT		149369	0					
ANR	149405	ArgumentList	op_type == IS_VAR		149369	1					
ANR	149406	Argument	op_type == IS_VAR		149369	0					
ANR	149407	EqualityExpression	op_type == IS_VAR		149369	0		==			
ANR	149408	Identifier	op_type		149369	0					
ANR	149409	Identifier	IS_VAR		149369	1					
ANR	149410	ReturnStatement	"return _get_zval_ptr_var ( node . var , execute_data , should_free ) ;"	442:3:14052:14113	149369	1	True				
ANR	149411	CallExpression	"_get_zval_ptr_var ( node . var , execute_data , should_free )"		149369	0					
ANR	149412	Callee	_get_zval_ptr_var		149369	0					
ANR	149413	Identifier	_get_zval_ptr_var		149369	0					
ANR	149414	ArgumentList	node . var		149369	1					
ANR	149415	Argument	node . var		149369	0					
ANR	149416	MemberAccess	node . var		149369	0					
ANR	149417	Identifier	node		149369	0					
ANR	149418	Identifier	var		149369	1					
ANR	149419	Argument	execute_data		149369	1					
ANR	149420	Identifier	execute_data		149369	0					
ANR	149421	Argument	should_free		149369	2					
ANR	149422	Identifier	should_free		149369	0					
ANR	149423	ElseStatement	else		149369	0					
ANR	149424	CompoundStatement		9:8:260:260	149369	0					
ANR	149425	ExpressionStatement	* should_free = NULL	445:2:14131:14150	149369	0	True				
ANR	149426	AssignmentExpression	* should_free = NULL		149369	0		=			
ANR	149427	UnaryOperationExpression	* should_free		149369	0					
ANR	149428	UnaryOperator	*		149369	0					
ANR	149429	Identifier	should_free		149369	1					
ANR	149430	Identifier	NULL		149369	1					
ANR	149431	IfStatement	if ( op_type == IS_CONST )		149369	1					
ANR	149432	Condition	op_type == IS_CONST	446:6:14158:14176	149369	0	True				
ANR	149433	EqualityExpression	op_type == IS_CONST		149369	0		==			
ANR	149434	Identifier	op_type		149369	0					
ANR	149435	Identifier	IS_CONST		149369	1					
ANR	149436	CompoundStatement		11:27:312:312	149369	1					
ANR	149437	ReturnStatement	return EX_CONSTANT ( node ) ;	447:3:14184:14208	149369	0	True				
ANR	149438	CallExpression	EX_CONSTANT ( node )		149369	0					
ANR	149439	Callee	EX_CONSTANT		149369	0					
ANR	149440	Identifier	EX_CONSTANT		149369	0					
ANR	149441	ArgumentList	node		149369	1					
ANR	149442	Argument	node		149369	0					
ANR	149443	Identifier	node		149369	0					
ANR	149444	ElseStatement	else		149369	0					
ANR	149445	IfStatement	if ( op_type == IS_CV )		149369	0					
ANR	149446	Condition	op_type == IS_CV	448:13:14223:14238	149369	0	True				
ANR	149447	EqualityExpression	op_type == IS_CV		149369	0		==			
ANR	149448	Identifier	op_type		149369	0					
ANR	149449	Identifier	IS_CV		149369	1					
ANR	149450	CompoundStatement		13:31:374:374	149369	1					
ANR	149451	ReturnStatement	"return _get_zval_ptr_cv_BP_VAR_R ( execute_data , node . var ) ;"	449:3:14246:14302	149369	0	True				
ANR	149452	CallExpression	"_get_zval_ptr_cv_BP_VAR_R ( execute_data , node . var )"		149369	0					
ANR	149453	Callee	_get_zval_ptr_cv_BP_VAR_R		149369	0					
ANR	149454	Identifier	_get_zval_ptr_cv_BP_VAR_R		149369	0					
ANR	149455	ArgumentList	execute_data		149369	1					
ANR	149456	Argument	execute_data		149369	0					
ANR	149457	Identifier	execute_data		149369	0					
ANR	149458	Argument	node . var		149369	1					
ANR	149459	MemberAccess	node . var		149369	0					
ANR	149460	Identifier	node		149369	0					
ANR	149461	Identifier	var		149369	1					
ANR	149462	ElseStatement	else		149369	0					
ANR	149463	CompoundStatement		15:9:446:446	149369	0					
ANR	149464	ReturnStatement	return NULL ;	451:3:14318:14329	149369	0	True				
ANR	149465	Identifier	NULL		149369	0					
ANR	149466	ReturnType	static zend_always_inline zval *		149369	1					
ANR	149467	Identifier	_get_zval_ptr_r		149369	2					
ANR	149468	ParameterList	"int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free"		149369	3					
ANR	149469	Parameter	int op_type	435:48:13772:13782	149369	0	True				
ANR	149470	ParameterType	int		149369	0					
ANR	149471	Identifier	op_type		149369	1					
ANR	149472	Parameter	znode_op node	435:61:13785:13797	149369	1	True				
ANR	149473	ParameterType	znode_op		149369	0					
ANR	149474	Identifier	node		149369	1					
ANR	149475	Parameter	const zend_execute_data * execute_data	435:76:13800:13836	149369	2	True				
ANR	149476	ParameterType	const zend_execute_data *		149369	0					
ANR	149477	Identifier	execute_data		149369	1					
ANR	149478	Parameter	zend_free_op * should_free	435:115:13839:13863	149369	3	True				
ANR	149479	ParameterType	zend_free_op *		149369	0					
ANR	149480	Identifier	should_free		149369	1					
ANR	149481	CFGEntryNode	ENTRY		149369		True				
ANR	149482	CFGExitNode	EXIT		149369		True				
ANR	149483	Symbol	should_free		149369						
ANR	149484	Symbol	IS_CONST		149369						
ANR	149485	Symbol	NULL		149369						
ANR	149486	Symbol	IS_CV		149369						
ANR	149487	Symbol	EX_CONSTANT		149369						
ANR	149488	Symbol	_get_zval_ptr_tmp		149369						
ANR	149489	Symbol	_get_zval_ptr_cv_BP_VAR_R		149369						
ANR	149490	Symbol	execute_data		149369						
ANR	149491	Symbol	node . var		149369						
ANR	149492	Symbol	* should_free		149369						
ANR	149493	Symbol	node		149369						
ANR	149494	Symbol	_get_zval_ptr_var		149369						
ANR	149495	Symbol	op_type		149369						
ANR	149496	Symbol	IS_VAR		149369						
ANR	149497	Symbol	IS_TMP_VAR		149369						
ANR	149498	Function	_get_zval_ptr_deref	456:0:14341:14978							
ANR	149499	FunctionDef	"_get_zval_ptr_deref (int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free , int type)"		149498	0					
ANR	149500	CompoundStatement		457:0:14497:14978	149498	0					
ANR	149501	IfStatement	if ( op_type & ( IS_TMP_VAR | IS_VAR ) )		149498	0					
ANR	149502	Condition	op_type & ( IS_TMP_VAR | IS_VAR )	458:5:14504:14532	149498	0	True				
ANR	149503	BitAndExpression	op_type & ( IS_TMP_VAR | IS_VAR )		149498	0		&			
ANR	149504	Identifier	op_type		149498	0					
ANR	149505	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		149498	1		|			
ANR	149506	Identifier	IS_TMP_VAR		149498	0					
ANR	149507	Identifier	IS_VAR		149498	1					
ANR	149508	CompoundStatement		2:36:37:37	149498	1					
ANR	149509	IfStatement	if ( op_type == IS_TMP_VAR )		149498	0					
ANR	149510	Condition	op_type == IS_TMP_VAR	459:6:14543:14563	149498	0	True				
ANR	149511	EqualityExpression	op_type == IS_TMP_VAR		149498	0		==			
ANR	149512	Identifier	op_type		149498	0					
ANR	149513	Identifier	IS_TMP_VAR		149498	1					
ANR	149514	CompoundStatement		3:29:68:68	149498	1					
ANR	149515	ReturnStatement	"return _get_zval_ptr_tmp ( node . var , execute_data , should_free ) ;"	460:3:14571:14632	149498	0	True				
ANR	149516	CallExpression	"_get_zval_ptr_tmp ( node . var , execute_data , should_free )"		149498	0					
ANR	149517	Callee	_get_zval_ptr_tmp		149498	0					
ANR	149518	Identifier	_get_zval_ptr_tmp		149498	0					
ANR	149519	ArgumentList	node . var		149498	1					
ANR	149520	Argument	node . var		149498	0					
ANR	149521	MemberAccess	node . var		149498	0					
ANR	149522	Identifier	node		149498	0					
ANR	149523	Identifier	var		149498	1					
ANR	149524	Argument	execute_data		149498	1					
ANR	149525	Identifier	execute_data		149498	0					
ANR	149526	Argument	should_free		149498	2					
ANR	149527	Identifier	should_free		149498	0					
ANR	149528	ElseStatement	else		149498	0					
ANR	149529	CompoundStatement		5:9:145:145	149498	0					
ANR	149530	ExpressionStatement	ZEND_ASSERT ( op_type == IS_VAR )	462:3:14648:14678	149498	0	True				
ANR	149531	CallExpression	ZEND_ASSERT ( op_type == IS_VAR )		149498	0					
ANR	149532	Callee	ZEND_ASSERT		149498	0					
ANR	149533	Identifier	ZEND_ASSERT		149498	0					
ANR	149534	ArgumentList	op_type == IS_VAR		149498	1					
ANR	149535	Argument	op_type == IS_VAR		149498	0					
ANR	149536	EqualityExpression	op_type == IS_VAR		149498	0		==			
ANR	149537	Identifier	op_type		149498	0					
ANR	149538	Identifier	IS_VAR		149498	1					
ANR	149539	ReturnStatement	"return _get_zval_ptr_var_deref ( node . var , execute_data , should_free ) ;"	463:3:14683:14750	149498	1	True				
ANR	149540	CallExpression	"_get_zval_ptr_var_deref ( node . var , execute_data , should_free )"		149498	0					
ANR	149541	Callee	_get_zval_ptr_var_deref		149498	0					
ANR	149542	Identifier	_get_zval_ptr_var_deref		149498	0					
ANR	149543	ArgumentList	node . var		149498	1					
ANR	149544	Argument	node . var		149498	0					
ANR	149545	MemberAccess	node . var		149498	0					
ANR	149546	Identifier	node		149498	0					
ANR	149547	Identifier	var		149498	1					
ANR	149548	Argument	execute_data		149498	1					
ANR	149549	Identifier	execute_data		149498	0					
ANR	149550	Argument	should_free		149498	2					
ANR	149551	Identifier	should_free		149498	0					
ANR	149552	ElseStatement	else		149498	0					
ANR	149553	CompoundStatement		9:8:266:266	149498	0					
ANR	149554	ExpressionStatement	* should_free = NULL	466:2:14768:14787	149498	0	True				
ANR	149555	AssignmentExpression	* should_free = NULL		149498	0		=			
ANR	149556	UnaryOperationExpression	* should_free		149498	0					
ANR	149557	UnaryOperator	*		149498	0					
ANR	149558	Identifier	should_free		149498	1					
ANR	149559	Identifier	NULL		149498	1					
ANR	149560	IfStatement	if ( op_type == IS_CONST )		149498	1					
ANR	149561	Condition	op_type == IS_CONST	467:6:14795:14813	149498	0	True				
ANR	149562	EqualityExpression	op_type == IS_CONST		149498	0		==			
ANR	149563	Identifier	op_type		149498	0					
ANR	149564	Identifier	IS_CONST		149498	1					
ANR	149565	CompoundStatement		11:27:318:318	149498	1					
ANR	149566	ReturnStatement	return EX_CONSTANT ( node ) ;	468:3:14821:14845	149498	0	True				
ANR	149567	CallExpression	EX_CONSTANT ( node )		149498	0					
ANR	149568	Callee	EX_CONSTANT		149498	0					
ANR	149569	Identifier	EX_CONSTANT		149498	0					
ANR	149570	ArgumentList	node		149498	1					
ANR	149571	Argument	node		149498	0					
ANR	149572	Identifier	node		149498	0					
ANR	149573	ElseStatement	else		149498	0					
ANR	149574	IfStatement	if ( op_type == IS_CV )		149498	0					
ANR	149575	Condition	op_type == IS_CV	469:13:14860:14875	149498	0	True				
ANR	149576	EqualityExpression	op_type == IS_CV		149498	0		==			
ANR	149577	Identifier	op_type		149498	0					
ANR	149578	Identifier	IS_CV		149498	1					
ANR	149579	CompoundStatement		13:31:380:380	149498	1					
ANR	149580	ReturnStatement	"return _get_zval_ptr_cv_deref ( execute_data , node . var , type ) ;"	470:3:14883:14942	149498	0	True				
ANR	149581	CallExpression	"_get_zval_ptr_cv_deref ( execute_data , node . var , type )"		149498	0					
ANR	149582	Callee	_get_zval_ptr_cv_deref		149498	0					
ANR	149583	Identifier	_get_zval_ptr_cv_deref		149498	0					
ANR	149584	ArgumentList	execute_data		149498	1					
ANR	149585	Argument	execute_data		149498	0					
ANR	149586	Identifier	execute_data		149498	0					
ANR	149587	Argument	node . var		149498	1					
ANR	149588	MemberAccess	node . var		149498	0					
ANR	149589	Identifier	node		149498	0					
ANR	149590	Identifier	var		149498	1					
ANR	149591	Argument	type		149498	2					
ANR	149592	Identifier	type		149498	0					
ANR	149593	ElseStatement	else		149498	0					
ANR	149594	CompoundStatement		15:9:455:455	149498	0					
ANR	149595	ReturnStatement	return NULL ;	472:3:14958:14969	149498	0	True				
ANR	149596	Identifier	NULL		149498	0					
ANR	149597	ReturnType	static zend_always_inline zval *		149498	1					
ANR	149598	Identifier	_get_zval_ptr_deref		149498	2					
ANR	149599	ParameterList	"int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free , int type"		149498	3					
ANR	149600	Parameter	int op_type	456:52:14393:14403	149498	0	True				
ANR	149601	ParameterType	int		149498	0					
ANR	149602	Identifier	op_type		149498	1					
ANR	149603	Parameter	znode_op node	456:65:14406:14418	149498	1	True				
ANR	149604	ParameterType	znode_op		149498	0					
ANR	149605	Identifier	node		149498	1					
ANR	149606	Parameter	const zend_execute_data * execute_data	456:80:14421:14457	149498	2	True				
ANR	149607	ParameterType	const zend_execute_data *		149498	0					
ANR	149608	Identifier	execute_data		149498	1					
ANR	149609	Parameter	zend_free_op * should_free	456:119:14460:14484	149498	3	True				
ANR	149610	ParameterType	zend_free_op *		149498	0					
ANR	149611	Identifier	should_free		149498	1					
ANR	149612	Parameter	int type	456:146:14487:14494	149498	4	True				
ANR	149613	ParameterType	int		149498	0					
ANR	149614	Identifier	type		149498	1					
ANR	149615	CFGEntryNode	ENTRY		149498		True				
ANR	149616	CFGExitNode	EXIT		149498		True				
ANR	149617	Symbol	should_free		149498						
ANR	149618	Symbol	IS_CONST		149498						
ANR	149619	Symbol	NULL		149498						
ANR	149620	Symbol	IS_CV		149498						
ANR	149621	Symbol	EX_CONSTANT		149498						
ANR	149622	Symbol	_get_zval_ptr_tmp		149498						
ANR	149623	Symbol	type		149498						
ANR	149624	Symbol	execute_data		149498						
ANR	149625	Symbol	node . var		149498						
ANR	149626	Symbol	* should_free		149498						
ANR	149627	Symbol	node		149498						
ANR	149628	Symbol	_get_zval_ptr_cv_deref		149498						
ANR	149629	Symbol	_get_zval_ptr_var_deref		149498						
ANR	149630	Symbol	op_type		149498						
ANR	149631	Symbol	IS_VAR		149498						
ANR	149632	Symbol	IS_TMP_VAR		149498						
ANR	149633	Function	_get_zval_ptr_r_deref	477:0:14981:15613							
ANR	149634	FunctionDef	"_get_zval_ptr_r_deref (int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free)"		149633	0					
ANR	149635	CompoundStatement		478:0:15129:15613	149633	0					
ANR	149636	IfStatement	if ( op_type & ( IS_TMP_VAR | IS_VAR ) )		149633	0					
ANR	149637	Condition	op_type & ( IS_TMP_VAR | IS_VAR )	479:5:15136:15164	149633	0	True				
ANR	149638	BitAndExpression	op_type & ( IS_TMP_VAR | IS_VAR )		149633	0		&			
ANR	149639	Identifier	op_type		149633	0					
ANR	149640	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		149633	1		|			
ANR	149641	Identifier	IS_TMP_VAR		149633	0					
ANR	149642	Identifier	IS_VAR		149633	1					
ANR	149643	CompoundStatement		2:36:37:37	149633	1					
ANR	149644	IfStatement	if ( op_type == IS_TMP_VAR )		149633	0					
ANR	149645	Condition	op_type == IS_TMP_VAR	480:6:15175:15195	149633	0	True				
ANR	149646	EqualityExpression	op_type == IS_TMP_VAR		149633	0		==			
ANR	149647	Identifier	op_type		149633	0					
ANR	149648	Identifier	IS_TMP_VAR		149633	1					
ANR	149649	CompoundStatement		3:29:68:68	149633	1					
ANR	149650	ReturnStatement	"return _get_zval_ptr_tmp ( node . var , execute_data , should_free ) ;"	481:3:15203:15264	149633	0	True				
ANR	149651	CallExpression	"_get_zval_ptr_tmp ( node . var , execute_data , should_free )"		149633	0					
ANR	149652	Callee	_get_zval_ptr_tmp		149633	0					
ANR	149653	Identifier	_get_zval_ptr_tmp		149633	0					
ANR	149654	ArgumentList	node . var		149633	1					
ANR	149655	Argument	node . var		149633	0					
ANR	149656	MemberAccess	node . var		149633	0					
ANR	149657	Identifier	node		149633	0					
ANR	149658	Identifier	var		149633	1					
ANR	149659	Argument	execute_data		149633	1					
ANR	149660	Identifier	execute_data		149633	0					
ANR	149661	Argument	should_free		149633	2					
ANR	149662	Identifier	should_free		149633	0					
ANR	149663	ElseStatement	else		149633	0					
ANR	149664	CompoundStatement		5:9:145:145	149633	0					
ANR	149665	ExpressionStatement	ZEND_ASSERT ( op_type == IS_VAR )	483:3:15280:15310	149633	0	True				
ANR	149666	CallExpression	ZEND_ASSERT ( op_type == IS_VAR )		149633	0					
ANR	149667	Callee	ZEND_ASSERT		149633	0					
ANR	149668	Identifier	ZEND_ASSERT		149633	0					
ANR	149669	ArgumentList	op_type == IS_VAR		149633	1					
ANR	149670	Argument	op_type == IS_VAR		149633	0					
ANR	149671	EqualityExpression	op_type == IS_VAR		149633	0		==			
ANR	149672	Identifier	op_type		149633	0					
ANR	149673	Identifier	IS_VAR		149633	1					
ANR	149674	ReturnStatement	"return _get_zval_ptr_var_deref ( node . var , execute_data , should_free ) ;"	484:3:15315:15382	149633	1	True				
ANR	149675	CallExpression	"_get_zval_ptr_var_deref ( node . var , execute_data , should_free )"		149633	0					
ANR	149676	Callee	_get_zval_ptr_var_deref		149633	0					
ANR	149677	Identifier	_get_zval_ptr_var_deref		149633	0					
ANR	149678	ArgumentList	node . var		149633	1					
ANR	149679	Argument	node . var		149633	0					
ANR	149680	MemberAccess	node . var		149633	0					
ANR	149681	Identifier	node		149633	0					
ANR	149682	Identifier	var		149633	1					
ANR	149683	Argument	execute_data		149633	1					
ANR	149684	Identifier	execute_data		149633	0					
ANR	149685	Argument	should_free		149633	2					
ANR	149686	Identifier	should_free		149633	0					
ANR	149687	ElseStatement	else		149633	0					
ANR	149688	CompoundStatement		9:8:266:266	149633	0					
ANR	149689	ExpressionStatement	* should_free = NULL	487:2:15400:15419	149633	0	True				
ANR	149690	AssignmentExpression	* should_free = NULL		149633	0		=			
ANR	149691	UnaryOperationExpression	* should_free		149633	0					
ANR	149692	UnaryOperator	*		149633	0					
ANR	149693	Identifier	should_free		149633	1					
ANR	149694	Identifier	NULL		149633	1					
ANR	149695	IfStatement	if ( op_type == IS_CONST )		149633	1					
ANR	149696	Condition	op_type == IS_CONST	488:6:15427:15445	149633	0	True				
ANR	149697	EqualityExpression	op_type == IS_CONST		149633	0		==			
ANR	149698	Identifier	op_type		149633	0					
ANR	149699	Identifier	IS_CONST		149633	1					
ANR	149700	CompoundStatement		11:27:318:318	149633	1					
ANR	149701	ReturnStatement	return EX_CONSTANT ( node ) ;	489:3:15453:15477	149633	0	True				
ANR	149702	CallExpression	EX_CONSTANT ( node )		149633	0					
ANR	149703	Callee	EX_CONSTANT		149633	0					
ANR	149704	Identifier	EX_CONSTANT		149633	0					
ANR	149705	ArgumentList	node		149633	1					
ANR	149706	Argument	node		149633	0					
ANR	149707	Identifier	node		149633	0					
ANR	149708	ElseStatement	else		149633	0					
ANR	149709	IfStatement	if ( op_type == IS_CV )		149633	0					
ANR	149710	Condition	op_type == IS_CV	490:13:15492:15507	149633	0	True				
ANR	149711	EqualityExpression	op_type == IS_CV		149633	0		==			
ANR	149712	Identifier	op_type		149633	0					
ANR	149713	Identifier	IS_CV		149633	1					
ANR	149714	CompoundStatement		13:31:380:380	149633	1					
ANR	149715	ReturnStatement	"return _get_zval_ptr_cv_deref_BP_VAR_R ( execute_data , node . var ) ;"	491:3:15515:15577	149633	0	True				
ANR	149716	CallExpression	"_get_zval_ptr_cv_deref_BP_VAR_R ( execute_data , node . var )"		149633	0					
ANR	149717	Callee	_get_zval_ptr_cv_deref_BP_VAR_R		149633	0					
ANR	149718	Identifier	_get_zval_ptr_cv_deref_BP_VAR_R		149633	0					
ANR	149719	ArgumentList	execute_data		149633	1					
ANR	149720	Argument	execute_data		149633	0					
ANR	149721	Identifier	execute_data		149633	0					
ANR	149722	Argument	node . var		149633	1					
ANR	149723	MemberAccess	node . var		149633	0					
ANR	149724	Identifier	node		149633	0					
ANR	149725	Identifier	var		149633	1					
ANR	149726	ElseStatement	else		149633	0					
ANR	149727	CompoundStatement		15:9:458:458	149633	0					
ANR	149728	ReturnStatement	return NULL ;	493:3:15593:15604	149633	0	True				
ANR	149729	Identifier	NULL		149633	0					
ANR	149730	ReturnType	static zend_always_inline zval *		149633	1					
ANR	149731	Identifier	_get_zval_ptr_r_deref		149633	2					
ANR	149732	ParameterList	"int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free"		149633	3					
ANR	149733	Parameter	int op_type	477:54:15035:15045	149633	0	True				
ANR	149734	ParameterType	int		149633	0					
ANR	149735	Identifier	op_type		149633	1					
ANR	149736	Parameter	znode_op node	477:67:15048:15060	149633	1	True				
ANR	149737	ParameterType	znode_op		149633	0					
ANR	149738	Identifier	node		149633	1					
ANR	149739	Parameter	const zend_execute_data * execute_data	477:82:15063:15099	149633	2	True				
ANR	149740	ParameterType	const zend_execute_data *		149633	0					
ANR	149741	Identifier	execute_data		149633	1					
ANR	149742	Parameter	zend_free_op * should_free	477:121:15102:15126	149633	3	True				
ANR	149743	ParameterType	zend_free_op *		149633	0					
ANR	149744	Identifier	should_free		149633	1					
ANR	149745	CFGEntryNode	ENTRY		149633		True				
ANR	149746	CFGExitNode	EXIT		149633		True				
ANR	149747	Symbol	should_free		149633						
ANR	149748	Symbol	IS_CONST		149633						
ANR	149749	Symbol	NULL		149633						
ANR	149750	Symbol	IS_CV		149633						
ANR	149751	Symbol	EX_CONSTANT		149633						
ANR	149752	Symbol	_get_zval_ptr_tmp		149633						
ANR	149753	Symbol	_get_zval_ptr_cv_deref_BP_VAR_R		149633						
ANR	149754	Symbol	execute_data		149633						
ANR	149755	Symbol	node . var		149633						
ANR	149756	Symbol	* should_free		149633						
ANR	149757	Symbol	node		149633						
ANR	149758	Symbol	_get_zval_ptr_var_deref		149633						
ANR	149759	Symbol	op_type		149633						
ANR	149760	Symbol	IS_VAR		149633						
ANR	149761	Symbol	IS_TMP_VAR		149633						
ANR	149762	Function	_get_zval_ptr_undef	498:0:15616:16241							
ANR	149763	FunctionDef	"_get_zval_ptr_undef (int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free , int type)"		149762	0					
ANR	149764	CompoundStatement		499:0:15772:16241	149762	0					
ANR	149765	IfStatement	if ( op_type & ( IS_TMP_VAR | IS_VAR ) )		149762	0					
ANR	149766	Condition	op_type & ( IS_TMP_VAR | IS_VAR )	500:5:15779:15807	149762	0	True				
ANR	149767	BitAndExpression	op_type & ( IS_TMP_VAR | IS_VAR )		149762	0		&			
ANR	149768	Identifier	op_type		149762	0					
ANR	149769	InclusiveOrExpression	IS_TMP_VAR | IS_VAR		149762	1		|			
ANR	149770	Identifier	IS_TMP_VAR		149762	0					
ANR	149771	Identifier	IS_VAR		149762	1					
ANR	149772	CompoundStatement		2:36:37:37	149762	1					
ANR	149773	IfStatement	if ( op_type == IS_TMP_VAR )		149762	0					
ANR	149774	Condition	op_type == IS_TMP_VAR	501:6:15818:15838	149762	0	True				
ANR	149775	EqualityExpression	op_type == IS_TMP_VAR		149762	0		==			
ANR	149776	Identifier	op_type		149762	0					
ANR	149777	Identifier	IS_TMP_VAR		149762	1					
ANR	149778	CompoundStatement		3:29:68:68	149762	1					
ANR	149779	ReturnStatement	"return _get_zval_ptr_tmp ( node . var , execute_data , should_free ) ;"	502:3:15846:15907	149762	0	True				
ANR	149780	CallExpression	"_get_zval_ptr_tmp ( node . var , execute_data , should_free )"		149762	0					
ANR	149781	Callee	_get_zval_ptr_tmp		149762	0					
ANR	149782	Identifier	_get_zval_ptr_tmp		149762	0					
ANR	149783	ArgumentList	node . var		149762	1					
ANR	149784	Argument	node . var		149762	0					
ANR	149785	MemberAccess	node . var		149762	0					
ANR	149786	Identifier	node		149762	0					
ANR	149787	Identifier	var		149762	1					
ANR	149788	Argument	execute_data		149762	1					
ANR	149789	Identifier	execute_data		149762	0					
ANR	149790	Argument	should_free		149762	2					
ANR	149791	Identifier	should_free		149762	0					
ANR	149792	ElseStatement	else		149762	0					
ANR	149793	CompoundStatement		5:9:145:145	149762	0					
ANR	149794	ExpressionStatement	ZEND_ASSERT ( op_type == IS_VAR )	504:3:15923:15953	149762	0	True				
ANR	149795	CallExpression	ZEND_ASSERT ( op_type == IS_VAR )		149762	0					
ANR	149796	Callee	ZEND_ASSERT		149762	0					
ANR	149797	Identifier	ZEND_ASSERT		149762	0					
ANR	149798	ArgumentList	op_type == IS_VAR		149762	1					
ANR	149799	Argument	op_type == IS_VAR		149762	0					
ANR	149800	EqualityExpression	op_type == IS_VAR		149762	0		==			
ANR	149801	Identifier	op_type		149762	0					
ANR	149802	Identifier	IS_VAR		149762	1					
ANR	149803	ReturnStatement	"return _get_zval_ptr_var ( node . var , execute_data , should_free ) ;"	505:3:15958:16019	149762	1	True				
ANR	149804	CallExpression	"_get_zval_ptr_var ( node . var , execute_data , should_free )"		149762	0					
ANR	149805	Callee	_get_zval_ptr_var		149762	0					
ANR	149806	Identifier	_get_zval_ptr_var		149762	0					
ANR	149807	ArgumentList	node . var		149762	1					
ANR	149808	Argument	node . var		149762	0					
ANR	149809	MemberAccess	node . var		149762	0					
ANR	149810	Identifier	node		149762	0					
ANR	149811	Identifier	var		149762	1					
ANR	149812	Argument	execute_data		149762	1					
ANR	149813	Identifier	execute_data		149762	0					
ANR	149814	Argument	should_free		149762	2					
ANR	149815	Identifier	should_free		149762	0					
ANR	149816	ElseStatement	else		149762	0					
ANR	149817	CompoundStatement		9:8:260:260	149762	0					
ANR	149818	ExpressionStatement	* should_free = NULL	508:2:16037:16056	149762	0	True				
ANR	149819	AssignmentExpression	* should_free = NULL		149762	0		=			
ANR	149820	UnaryOperationExpression	* should_free		149762	0					
ANR	149821	UnaryOperator	*		149762	0					
ANR	149822	Identifier	should_free		149762	1					
ANR	149823	Identifier	NULL		149762	1					
ANR	149824	IfStatement	if ( op_type == IS_CONST )		149762	1					
ANR	149825	Condition	op_type == IS_CONST	509:6:16064:16082	149762	0	True				
ANR	149826	EqualityExpression	op_type == IS_CONST		149762	0		==			
ANR	149827	Identifier	op_type		149762	0					
ANR	149828	Identifier	IS_CONST		149762	1					
ANR	149829	CompoundStatement		11:27:312:312	149762	1					
ANR	149830	ReturnStatement	return EX_CONSTANT ( node ) ;	510:3:16090:16114	149762	0	True				
ANR	149831	CallExpression	EX_CONSTANT ( node )		149762	0					
ANR	149832	Callee	EX_CONSTANT		149762	0					
ANR	149833	Identifier	EX_CONSTANT		149762	0					
ANR	149834	ArgumentList	node		149762	1					
ANR	149835	Argument	node		149762	0					
ANR	149836	Identifier	node		149762	0					
ANR	149837	ElseStatement	else		149762	0					
ANR	149838	IfStatement	if ( op_type == IS_CV )		149762	0					
ANR	149839	Condition	op_type == IS_CV	511:13:16129:16144	149762	0	True				
ANR	149840	EqualityExpression	op_type == IS_CV		149762	0		==			
ANR	149841	Identifier	op_type		149762	0					
ANR	149842	Identifier	IS_CV		149762	1					
ANR	149843	CompoundStatement		13:31:374:374	149762	1					
ANR	149844	ReturnStatement	"return _get_zval_ptr_cv_undef ( execute_data , node . var ) ;"	512:3:16152:16205	149762	0	True				
ANR	149845	CallExpression	"_get_zval_ptr_cv_undef ( execute_data , node . var )"		149762	0					
ANR	149846	Callee	_get_zval_ptr_cv_undef		149762	0					
ANR	149847	Identifier	_get_zval_ptr_cv_undef		149762	0					
ANR	149848	ArgumentList	execute_data		149762	1					
ANR	149849	Argument	execute_data		149762	0					
ANR	149850	Identifier	execute_data		149762	0					
ANR	149851	Argument	node . var		149762	1					
ANR	149852	MemberAccess	node . var		149762	0					
ANR	149853	Identifier	node		149762	0					
ANR	149854	Identifier	var		149762	1					
ANR	149855	ElseStatement	else		149762	0					
ANR	149856	CompoundStatement		15:9:443:443	149762	0					
ANR	149857	ReturnStatement	return NULL ;	514:3:16221:16232	149762	0	True				
ANR	149858	Identifier	NULL		149762	0					
ANR	149859	ReturnType	static zend_always_inline zval *		149762	1					
ANR	149860	Identifier	_get_zval_ptr_undef		149762	2					
ANR	149861	ParameterList	"int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free , int type"		149762	3					
ANR	149862	Parameter	int op_type	498:52:15668:15678	149762	0	True				
ANR	149863	ParameterType	int		149762	0					
ANR	149864	Identifier	op_type		149762	1					
ANR	149865	Parameter	znode_op node	498:65:15681:15693	149762	1	True				
ANR	149866	ParameterType	znode_op		149762	0					
ANR	149867	Identifier	node		149762	1					
ANR	149868	Parameter	const zend_execute_data * execute_data	498:80:15696:15732	149762	2	True				
ANR	149869	ParameterType	const zend_execute_data *		149762	0					
ANR	149870	Identifier	execute_data		149762	1					
ANR	149871	Parameter	zend_free_op * should_free	498:119:15735:15759	149762	3	True				
ANR	149872	ParameterType	zend_free_op *		149762	0					
ANR	149873	Identifier	should_free		149762	1					
ANR	149874	Parameter	int type	498:146:15762:15769	149762	4	True				
ANR	149875	ParameterType	int		149762	0					
ANR	149876	Identifier	type		149762	1					
ANR	149877	CFGEntryNode	ENTRY		149762		True				
ANR	149878	CFGExitNode	EXIT		149762		True				
ANR	149879	Symbol	should_free		149762						
ANR	149880	Symbol	IS_CONST		149762						
ANR	149881	Symbol	NULL		149762						
ANR	149882	Symbol	IS_CV		149762						
ANR	149883	Symbol	EX_CONSTANT		149762						
ANR	149884	Symbol	_get_zval_ptr_cv_undef		149762						
ANR	149885	Symbol	_get_zval_ptr_tmp		149762						
ANR	149886	Symbol	type		149762						
ANR	149887	Symbol	execute_data		149762						
ANR	149888	Symbol	node . var		149762						
ANR	149889	Symbol	* should_free		149762						
ANR	149890	Symbol	node		149762						
ANR	149891	Symbol	_get_zval_ptr_var		149762						
ANR	149892	Symbol	op_type		149762						
ANR	149893	Symbol	IS_VAR		149762						
ANR	149894	Symbol	IS_TMP_VAR		149762						
ANR	149895	Function	_get_zval_ptr_ptr_var	519:0:16244:16552							
ANR	149896	FunctionDef	"_get_zval_ptr_ptr_var (uint32_t var , const zend_execute_data * execute_data , zend_free_op * should_free)"		149895	0					
ANR	149897	CompoundStatement		520:0:16378:16552	149895	0					
ANR	149898	IdentifierDeclStatement	zval * ret = EX_VAR ( var ) ;	521:1:16381:16404	149895	0	True				
ANR	149899	IdentifierDecl	* ret = EX_VAR ( var )		149895	0					
ANR	149900	IdentifierDeclType	zval *		149895	0					
ANR	149901	Identifier	ret		149895	1					
ANR	149902	AssignmentExpression	* ret = EX_VAR ( var )		149895	2		=			
ANR	149903	Identifier	ret		149895	0					
ANR	149904	CallExpression	EX_VAR ( var )		149895	1					
ANR	149905	Callee	EX_VAR		149895	0					
ANR	149906	Identifier	EX_VAR		149895	0					
ANR	149907	ArgumentList	var		149895	1					
ANR	149908	Argument	var		149895	0					
ANR	149909	Identifier	var		149895	0					
ANR	149910	IfStatement	if ( EXPECTED ( Z_TYPE_P ( ret ) == IS_INDIRECT ) )		149895	1					
ANR	149911	Condition	EXPECTED ( Z_TYPE_P ( ret ) == IS_INDIRECT )	523:5:16412:16449	149895	0	True				
ANR	149912	CallExpression	EXPECTED ( Z_TYPE_P ( ret ) == IS_INDIRECT )		149895	0					
ANR	149913	Callee	EXPECTED		149895	0					
ANR	149914	Identifier	EXPECTED		149895	0					
ANR	149915	ArgumentList	Z_TYPE_P ( ret ) == IS_INDIRECT		149895	1					
ANR	149916	Argument	Z_TYPE_P ( ret ) == IS_INDIRECT		149895	0					
ANR	149917	EqualityExpression	Z_TYPE_P ( ret ) == IS_INDIRECT		149895	0		==			
ANR	149918	CallExpression	Z_TYPE_P ( ret )		149895	0					
ANR	149919	Callee	Z_TYPE_P		149895	0					
ANR	149920	Identifier	Z_TYPE_P		149895	0					
ANR	149921	ArgumentList	ret		149895	1					
ANR	149922	Argument	ret		149895	0					
ANR	149923	Identifier	ret		149895	0					
ANR	149924	Identifier	IS_INDIRECT		149895	1					
ANR	149925	CompoundStatement		4:45:73:73	149895	1					
ANR	149926	ExpressionStatement	* should_free = NULL	524:2:16456:16475	149895	0	True				
ANR	149927	AssignmentExpression	* should_free = NULL		149895	0		=			
ANR	149928	UnaryOperationExpression	* should_free		149895	0					
ANR	149929	UnaryOperator	*		149895	0					
ANR	149930	Identifier	should_free		149895	1					
ANR	149931	Identifier	NULL		149895	1					
ANR	149932	ExpressionStatement	ret = Z_INDIRECT_P ( ret )	525:2:16479:16502	149895	1	True				
ANR	149933	AssignmentExpression	ret = Z_INDIRECT_P ( ret )		149895	0		=			
ANR	149934	Identifier	ret		149895	0					
ANR	149935	CallExpression	Z_INDIRECT_P ( ret )		149895	1					
ANR	149936	Callee	Z_INDIRECT_P		149895	0					
ANR	149937	Identifier	Z_INDIRECT_P		149895	0					
ANR	149938	ArgumentList	ret		149895	1					
ANR	149939	Argument	ret		149895	0					
ANR	149940	Identifier	ret		149895	0					
ANR	149941	ElseStatement	else		149895	0					
ANR	149942	CompoundStatement		7:8:133:133	149895	0					
ANR	149943	ExpressionStatement	* should_free = ret	527:2:16516:16534	149895	0	True				
ANR	149944	AssignmentExpression	* should_free = ret		149895	0		=			
ANR	149945	UnaryOperationExpression	* should_free		149895	0					
ANR	149946	UnaryOperator	*		149895	0					
ANR	149947	Identifier	should_free		149895	1					
ANR	149948	Identifier	ret		149895	1					
ANR	149949	ReturnStatement	return ret ;	529:1:16540:16550	149895	2	True				
ANR	149950	Identifier	ret		149895	0					
ANR	149951	ReturnType	static zend_always_inline zval *		149895	1					
ANR	149952	Identifier	_get_zval_ptr_ptr_var		149895	2					
ANR	149953	ParameterList	"uint32_t var , const zend_execute_data * execute_data , zend_free_op * should_free"		149895	3					
ANR	149954	Parameter	uint32_t var	519:54:16298:16309	149895	0	True				
ANR	149955	ParameterType	uint32_t		149895	0					
ANR	149956	Identifier	var		149895	1					
ANR	149957	Parameter	const zend_execute_data * execute_data	519:68:16312:16348	149895	1	True				
ANR	149958	ParameterType	const zend_execute_data *		149895	0					
ANR	149959	Identifier	execute_data		149895	1					
ANR	149960	Parameter	zend_free_op * should_free	519:107:16351:16375	149895	2	True				
ANR	149961	ParameterType	zend_free_op *		149895	0					
ANR	149962	Identifier	should_free		149895	1					
ANR	149963	CFGEntryNode	ENTRY		149895		True				
ANR	149964	CFGExitNode	EXIT		149895		True				
ANR	149965	Symbol	should_free		149895						
ANR	149966	Symbol	ret		149895						
ANR	149967	Symbol	NULL		149895						
ANR	149968	Symbol	var		149895						
ANR	149969	Symbol	EX_VAR		149895						
ANR	149970	Symbol	Z_INDIRECT_P		149895						
ANR	149971	Symbol	Z_TYPE_P		149895						
ANR	149972	Symbol	EXPECTED		149895						
ANR	149973	Symbol	execute_data		149895						
ANR	149974	Symbol	* should_free		149895						
ANR	149975	Symbol	IS_INDIRECT		149895						
ANR	149976	Function	_get_zval_ptr_ptr	532:0:16555:16949							
ANR	149977	FunctionDef	"_get_zval_ptr_ptr (int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free , int type)"		149976	0					
ANR	149978	CompoundStatement		533:0:16697:16949	149976	0					
ANR	149979	IfStatement	if ( op_type == IS_CV )		149976	0					
ANR	149980	Condition	op_type == IS_CV	534:5:16704:16719	149976	0	True				
ANR	149981	EqualityExpression	op_type == IS_CV		149976	0		==			
ANR	149982	Identifier	op_type		149976	0					
ANR	149983	Identifier	IS_CV		149976	1					
ANR	149984	CompoundStatement		2:23:24:24	149976	1					
ANR	149985	ExpressionStatement	* should_free = NULL	535:2:16726:16745	149976	0	True				
ANR	149986	AssignmentExpression	* should_free = NULL		149976	0		=			
ANR	149987	UnaryOperationExpression	* should_free		149976	0					
ANR	149988	UnaryOperator	*		149976	0					
ANR	149989	Identifier	should_free		149976	1					
ANR	149990	Identifier	NULL		149976	1					
ANR	149991	ReturnStatement	"return _get_zval_ptr_cv ( execute_data , node . var , type ) ;"	536:2:16749:16802	149976	1	True				
ANR	149992	CallExpression	"_get_zval_ptr_cv ( execute_data , node . var , type )"		149976	0					
ANR	149993	Callee	_get_zval_ptr_cv		149976	0					
ANR	149994	Identifier	_get_zval_ptr_cv		149976	0					
ANR	149995	ArgumentList	execute_data		149976	1					
ANR	149996	Argument	execute_data		149976	0					
ANR	149997	Identifier	execute_data		149976	0					
ANR	149998	Argument	node . var		149976	1					
ANR	149999	MemberAccess	node . var		149976	0					
ANR	150000	Identifier	node		149976	0					
ANR	150001	Identifier	var		149976	1					
ANR	150002	Argument	type		149976	2					
ANR	150003	Identifier	type		149976	0					
ANR	150004	ElseStatement	else		149976	0					
ANR	150005	CompoundStatement		5:37:143:143	149976	0					
ANR	150006	ExpressionStatement	ZEND_ASSERT ( op_type == IS_VAR )	538:2:16845:16875	149976	0	True				
ANR	150007	CallExpression	ZEND_ASSERT ( op_type == IS_VAR )		149976	0					
ANR	150008	Callee	ZEND_ASSERT		149976	0					
ANR	150009	Identifier	ZEND_ASSERT		149976	0					
ANR	150010	ArgumentList	op_type == IS_VAR		149976	1					
ANR	150011	Argument	op_type == IS_VAR		149976	0					
ANR	150012	EqualityExpression	op_type == IS_VAR		149976	0		==			
ANR	150013	Identifier	op_type		149976	0					
ANR	150014	Identifier	IS_VAR		149976	1					
ANR	150015	ReturnStatement	"return _get_zval_ptr_ptr_var ( node . var , execute_data , should_free ) ;"	539:2:16879:16944	149976	1	True				
ANR	150016	CallExpression	"_get_zval_ptr_ptr_var ( node . var , execute_data , should_free )"		149976	0					
ANR	150017	Callee	_get_zval_ptr_ptr_var		149976	0					
ANR	150018	Identifier	_get_zval_ptr_ptr_var		149976	0					
ANR	150019	ArgumentList	node . var		149976	1					
ANR	150020	Argument	node . var		149976	0					
ANR	150021	MemberAccess	node . var		149976	0					
ANR	150022	Identifier	node		149976	0					
ANR	150023	Identifier	var		149976	1					
ANR	150024	Argument	execute_data		149976	1					
ANR	150025	Identifier	execute_data		149976	0					
ANR	150026	Argument	should_free		149976	2					
ANR	150027	Identifier	should_free		149976	0					
ANR	150028	ReturnType	static inline zval *		149976	1					
ANR	150029	Identifier	_get_zval_ptr_ptr		149976	2					
ANR	150030	ParameterList	"int op_type , znode_op node , const zend_execute_data * execute_data , zend_free_op * should_free , int type"		149976	3					
ANR	150031	Parameter	int op_type	532:38:16593:16603	149976	0	True				
ANR	150032	ParameterType	int		149976	0					
ANR	150033	Identifier	op_type		149976	1					
ANR	150034	Parameter	znode_op node	532:51:16606:16618	149976	1	True				
ANR	150035	ParameterType	znode_op		149976	0					
ANR	150036	Identifier	node		149976	1					
ANR	150037	Parameter	const zend_execute_data * execute_data	532:66:16621:16657	149976	2	True				
ANR	150038	ParameterType	const zend_execute_data *		149976	0					
ANR	150039	Identifier	execute_data		149976	1					
ANR	150040	Parameter	zend_free_op * should_free	532:105:16660:16684	149976	3	True				
ANR	150041	ParameterType	zend_free_op *		149976	0					
ANR	150042	Identifier	should_free		149976	1					
ANR	150043	Parameter	int type	532:132:16687:16694	149976	4	True				
ANR	150044	ParameterType	int		149976	0					
ANR	150045	Identifier	type		149976	1					
ANR	150046	CFGEntryNode	ENTRY		149976		True				
ANR	150047	CFGExitNode	EXIT		149976		True				
ANR	150048	Symbol	should_free		149976						
ANR	150049	Symbol	node		149976						
ANR	150050	Symbol	IS_CV		149976						
ANR	150051	Symbol	NULL		149976						
ANR	150052	Symbol	op_type		149976						
ANR	150053	Symbol	_get_zval_ptr_cv		149976						
ANR	150054	Symbol	_get_zval_ptr_ptr_var		149976						
ANR	150055	Symbol	type		149976						
ANR	150056	Symbol	IS_VAR		149976						
ANR	150057	Symbol	execute_data		149976						
ANR	150058	Symbol	* should_free		149976						
ANR	150059	Symbol	node . var		149976						
ANR	150060	Function	_get_obj_zval_ptr_unused	543:0:16952:17064							
ANR	150061	FunctionDef	_get_obj_zval_ptr_unused (zend_execute_data * execute_data)		150060	0					
ANR	150062	CompoundStatement		544:0:17042:17064	150060	0					
ANR	150063	ReturnStatement	return & EX ( This ) ;	545:1:17046:17062	150060	0	True				
ANR	150064	UnaryOperationExpression	& EX ( This )		150060	0					
ANR	150065	UnaryOperator	&		150060	0					
ANR	150066	CallExpression	EX ( This )		150060	1					
ANR	150067	Callee	EX		150060	0					
ANR	150068	Identifier	EX		150060	0					
ANR	150069	ArgumentList	This		150060	1					
ANR	150070	Argument	This		150060	0					
ANR	150071	Identifier	This		150060	0					
ANR	150072	ReturnType	static zend_always_inline zval *		150060	1					
ANR	150073	Identifier	_get_obj_zval_ptr_unused		150060	2					
ANR	150074	ParameterList	zend_execute_data * execute_data		150060	3					
ANR	150075	Parameter	zend_execute_data * execute_data	543:57:17009:17039	150060	0	True				
ANR	150076	ParameterType	zend_execute_data *		150060	0					
ANR	150077	Identifier	execute_data		150060	1					
ANR	150078	CFGEntryNode	ENTRY		150060		True				
ANR	150079	CFGExitNode	EXIT		150060		True				
ANR	150080	Symbol	This		150060						
ANR	150081	Symbol	& EX		150060						
ANR	150082	Symbol	execute_data		150060						
ANR	150083	Function	_get_obj_zval_ptr	548:0:17067:17346							
ANR	150084	FunctionDef	"_get_obj_zval_ptr (int op_type , znode_op op , zend_execute_data * execute_data , zend_free_op * should_free , int type)"		150083	0					
ANR	150085	CompoundStatement		549:0:17201:17346	150083	0					
ANR	150086	IfStatement	if ( op_type == IS_UNUSED )		150083	0					
ANR	150087	Condition	op_type == IS_UNUSED	550:5:17208:17227	150083	0	True				
ANR	150088	EqualityExpression	op_type == IS_UNUSED		150083	0		==			
ANR	150089	Identifier	op_type		150083	0					
ANR	150090	Identifier	IS_UNUSED		150083	1					
ANR	150091	CompoundStatement		2:27:28:28	150083	1					
ANR	150092	ExpressionStatement	* should_free = NULL	551:2:17234:17253	150083	0	True				
ANR	150093	AssignmentExpression	* should_free = NULL		150083	0		=			
ANR	150094	UnaryOperationExpression	* should_free		150083	0					
ANR	150095	UnaryOperator	*		150083	0					
ANR	150096	Identifier	should_free		150083	1					
ANR	150097	Identifier	NULL		150083	1					
ANR	150098	ReturnStatement	return & EX ( This ) ;	552:2:17257:17273	150083	1	True				
ANR	150099	UnaryOperationExpression	& EX ( This )		150083	0					
ANR	150100	UnaryOperator	&		150083	0					
ANR	150101	CallExpression	EX ( This )		150083	1					
ANR	150102	Callee	EX		150083	0					
ANR	150103	Identifier	EX		150083	0					
ANR	150104	ArgumentList	This		150083	1					
ANR	150105	Argument	This		150083	0					
ANR	150106	Identifier	This		150083	0					
ANR	150107	ReturnStatement	"return get_zval_ptr ( op_type , op , execute_data , should_free , type ) ;"	554:1:17279:17344	150083	1	True				
ANR	150108	CallExpression	"get_zval_ptr ( op_type , op , execute_data , should_free , type )"		150083	0					
ANR	150109	Callee	get_zval_ptr		150083	0					
ANR	150110	Identifier	get_zval_ptr		150083	0					
ANR	150111	ArgumentList	op_type		150083	1					
ANR	150112	Argument	op_type		150083	0					
ANR	150113	Identifier	op_type		150083	0					
ANR	150114	Argument	op		150083	1					
ANR	150115	Identifier	op		150083	0					
ANR	150116	Argument	execute_data		150083	2					
ANR	150117	Identifier	execute_data		150083	0					
ANR	150118	Argument	should_free		150083	3					
ANR	150119	Identifier	should_free		150083	0					
ANR	150120	Argument	type		150083	4					
ANR	150121	Identifier	type		150083	0					
ANR	150122	ReturnType	static inline zval *		150083	1					
ANR	150123	Identifier	_get_obj_zval_ptr		150083	2					
ANR	150124	ParameterList	"int op_type , znode_op op , zend_execute_data * execute_data , zend_free_op * should_free , int type"		150083	3					
ANR	150125	Parameter	int op_type	548:38:17105:17115	150083	0	True				
ANR	150126	ParameterType	int		150083	0					
ANR	150127	Identifier	op_type		150083	1					
ANR	150128	Parameter	znode_op op	548:51:17118:17128	150083	1	True				
ANR	150129	ParameterType	znode_op		150083	0					
ANR	150130	Identifier	op		150083	1					
ANR	150131	Parameter	zend_execute_data * execute_data	548:64:17131:17161	150083	2	True				
ANR	150132	ParameterType	zend_execute_data *		150083	0					
ANR	150133	Identifier	execute_data		150083	1					
ANR	150134	Parameter	zend_free_op * should_free	548:97:17164:17188	150083	3	True				
ANR	150135	ParameterType	zend_free_op *		150083	0					
ANR	150136	Identifier	should_free		150083	1					
ANR	150137	Parameter	int type	548:124:17191:17198	150083	4	True				
ANR	150138	ParameterType	int		150083	0					
ANR	150139	Identifier	type		150083	1					
ANR	150140	CFGEntryNode	ENTRY		150083		True				
ANR	150141	CFGExitNode	EXIT		150083		True				
ANR	150142	Symbol	should_free		150083						
ANR	150143	Symbol	op		150083						
ANR	150144	Symbol	NULL		150083						
ANR	150145	Symbol	This		150083						
ANR	150146	Symbol	op_type		150083						
ANR	150147	Symbol	get_zval_ptr		150083						
ANR	150148	Symbol	type		150083						
ANR	150149	Symbol	& EX		150083						
ANR	150150	Symbol	execute_data		150083						
ANR	150151	Symbol	* should_free		150083						
ANR	150152	Symbol	IS_UNUSED		150083						
ANR	150153	Function	_get_obj_zval_ptr_undef	557:0:17349:17640							
ANR	150154	FunctionDef	"_get_obj_zval_ptr_undef (int op_type , znode_op op , zend_execute_data * execute_data , zend_free_op * should_free , int type)"		150153	0					
ANR	150155	CompoundStatement		558:0:17489:17640	150153	0					
ANR	150156	IfStatement	if ( op_type == IS_UNUSED )		150153	0					
ANR	150157	Condition	op_type == IS_UNUSED	559:5:17496:17515	150153	0	True				
ANR	150158	EqualityExpression	op_type == IS_UNUSED		150153	0		==			
ANR	150159	Identifier	op_type		150153	0					
ANR	150160	Identifier	IS_UNUSED		150153	1					
ANR	150161	CompoundStatement		2:27:28:28	150153	1					
ANR	150162	ExpressionStatement	* should_free = NULL	560:2:17522:17541	150153	0	True				
ANR	150163	AssignmentExpression	* should_free = NULL		150153	0		=			
ANR	150164	UnaryOperationExpression	* should_free		150153	0					
ANR	150165	UnaryOperator	*		150153	0					
ANR	150166	Identifier	should_free		150153	1					
ANR	150167	Identifier	NULL		150153	1					
ANR	150168	ReturnStatement	return & EX ( This ) ;	561:2:17545:17561	150153	1	True				
ANR	150169	UnaryOperationExpression	& EX ( This )		150153	0					
ANR	150170	UnaryOperator	&		150153	0					
ANR	150171	CallExpression	EX ( This )		150153	1					
ANR	150172	Callee	EX		150153	0					
ANR	150173	Identifier	EX		150153	0					
ANR	150174	ArgumentList	This		150153	1					
ANR	150175	Argument	This		150153	0					
ANR	150176	Identifier	This		150153	0					
ANR	150177	ReturnStatement	"return get_zval_ptr_undef ( op_type , op , execute_data , should_free , type ) ;"	563:1:17567:17638	150153	1	True				
ANR	150178	CallExpression	"get_zval_ptr_undef ( op_type , op , execute_data , should_free , type )"		150153	0					
ANR	150179	Callee	get_zval_ptr_undef		150153	0					
ANR	150180	Identifier	get_zval_ptr_undef		150153	0					
ANR	150181	ArgumentList	op_type		150153	1					
ANR	150182	Argument	op_type		150153	0					
ANR	150183	Identifier	op_type		150153	0					
ANR	150184	Argument	op		150153	1					
ANR	150185	Identifier	op		150153	0					
ANR	150186	Argument	execute_data		150153	2					
ANR	150187	Identifier	execute_data		150153	0					
ANR	150188	Argument	should_free		150153	3					
ANR	150189	Identifier	should_free		150153	0					
ANR	150190	Argument	type		150153	4					
ANR	150191	Identifier	type		150153	0					
ANR	150192	ReturnType	static inline zval *		150153	1					
ANR	150193	Identifier	_get_obj_zval_ptr_undef		150153	2					
ANR	150194	ParameterList	"int op_type , znode_op op , zend_execute_data * execute_data , zend_free_op * should_free , int type"		150153	3					
ANR	150195	Parameter	int op_type	557:44:17393:17403	150153	0	True				
ANR	150196	ParameterType	int		150153	0					
ANR	150197	Identifier	op_type		150153	1					
ANR	150198	Parameter	znode_op op	557:57:17406:17416	150153	1	True				
ANR	150199	ParameterType	znode_op		150153	0					
ANR	150200	Identifier	op		150153	1					
ANR	150201	Parameter	zend_execute_data * execute_data	557:70:17419:17449	150153	2	True				
ANR	150202	ParameterType	zend_execute_data *		150153	0					
ANR	150203	Identifier	execute_data		150153	1					
ANR	150204	Parameter	zend_free_op * should_free	557:103:17452:17476	150153	3	True				
ANR	150205	ParameterType	zend_free_op *		150153	0					
ANR	150206	Identifier	should_free		150153	1					
ANR	150207	Parameter	int type	557:130:17479:17486	150153	4	True				
ANR	150208	ParameterType	int		150153	0					
ANR	150209	Identifier	type		150153	1					
ANR	150210	CFGEntryNode	ENTRY		150153		True				
ANR	150211	CFGExitNode	EXIT		150153		True				
ANR	150212	Symbol	should_free		150153						
ANR	150213	Symbol	op		150153						
ANR	150214	Symbol	get_zval_ptr_undef		150153						
ANR	150215	Symbol	NULL		150153						
ANR	150216	Symbol	This		150153						
ANR	150217	Symbol	op_type		150153						
ANR	150218	Symbol	type		150153						
ANR	150219	Symbol	& EX		150153						
ANR	150220	Symbol	execute_data		150153						
ANR	150221	Symbol	* should_free		150153						
ANR	150222	Symbol	IS_UNUSED		150153						
ANR	150223	Function	_get_obj_zval_ptr_ptr	566:0:17643:17934							
ANR	150224	FunctionDef	"_get_obj_zval_ptr_ptr (int op_type , znode_op node , zend_execute_data * execute_data , zend_free_op * should_free , int type)"		150223	0					
ANR	150225	CompoundStatement		567:0:17783:17934	150223	0					
ANR	150226	IfStatement	if ( op_type == IS_UNUSED )		150223	0					
ANR	150227	Condition	op_type == IS_UNUSED	568:5:17790:17809	150223	0	True				
ANR	150228	EqualityExpression	op_type == IS_UNUSED		150223	0		==			
ANR	150229	Identifier	op_type		150223	0					
ANR	150230	Identifier	IS_UNUSED		150223	1					
ANR	150231	CompoundStatement		2:27:28:28	150223	1					
ANR	150232	ExpressionStatement	* should_free = NULL	569:2:17816:17835	150223	0	True				
ANR	150233	AssignmentExpression	* should_free = NULL		150223	0		=			
ANR	150234	UnaryOperationExpression	* should_free		150223	0					
ANR	150235	UnaryOperator	*		150223	0					
ANR	150236	Identifier	should_free		150223	1					
ANR	150237	Identifier	NULL		150223	1					
ANR	150238	ReturnStatement	return & EX ( This ) ;	570:2:17839:17855	150223	1	True				
ANR	150239	UnaryOperationExpression	& EX ( This )		150223	0					
ANR	150240	UnaryOperator	&		150223	0					
ANR	150241	CallExpression	EX ( This )		150223	1					
ANR	150242	Callee	EX		150223	0					
ANR	150243	Identifier	EX		150223	0					
ANR	150244	ArgumentList	This		150223	1					
ANR	150245	Argument	This		150223	0					
ANR	150246	Identifier	This		150223	0					
ANR	150247	ReturnStatement	"return get_zval_ptr_ptr ( op_type , node , execute_data , should_free , type ) ;"	572:1:17861:17932	150223	1	True				
ANR	150248	CallExpression	"get_zval_ptr_ptr ( op_type , node , execute_data , should_free , type )"		150223	0					
ANR	150249	Callee	get_zval_ptr_ptr		150223	0					
ANR	150250	Identifier	get_zval_ptr_ptr		150223	0					
ANR	150251	ArgumentList	op_type		150223	1					
ANR	150252	Argument	op_type		150223	0					
ANR	150253	Identifier	op_type		150223	0					
ANR	150254	Argument	node		150223	1					
ANR	150255	Identifier	node		150223	0					
ANR	150256	Argument	execute_data		150223	2					
ANR	150257	Identifier	execute_data		150223	0					
ANR	150258	Argument	should_free		150223	3					
ANR	150259	Identifier	should_free		150223	0					
ANR	150260	Argument	type		150223	4					
ANR	150261	Identifier	type		150223	0					
ANR	150262	ReturnType	static inline zval *		150223	1					
ANR	150263	Identifier	_get_obj_zval_ptr_ptr		150223	2					
ANR	150264	ParameterList	"int op_type , znode_op node , zend_execute_data * execute_data , zend_free_op * should_free , int type"		150223	3					
ANR	150265	Parameter	int op_type	566:42:17685:17695	150223	0	True				
ANR	150266	ParameterType	int		150223	0					
ANR	150267	Identifier	op_type		150223	1					
ANR	150268	Parameter	znode_op node	566:55:17698:17710	150223	1	True				
ANR	150269	ParameterType	znode_op		150223	0					
ANR	150270	Identifier	node		150223	1					
ANR	150271	Parameter	zend_execute_data * execute_data	566:70:17713:17743	150223	2	True				
ANR	150272	ParameterType	zend_execute_data *		150223	0					
ANR	150273	Identifier	execute_data		150223	1					
ANR	150274	Parameter	zend_free_op * should_free	566:103:17746:17770	150223	3	True				
ANR	150275	ParameterType	zend_free_op *		150223	0					
ANR	150276	Identifier	should_free		150223	1					
ANR	150277	Parameter	int type	566:130:17773:17780	150223	4	True				
ANR	150278	ParameterType	int		150223	0					
ANR	150279	Identifier	type		150223	1					
ANR	150280	CFGEntryNode	ENTRY		150223		True				
ANR	150281	CFGExitNode	EXIT		150223		True				
ANR	150282	Symbol	should_free		150223						
ANR	150283	Symbol	node		150223						
ANR	150284	Symbol	NULL		150223						
ANR	150285	Symbol	This		150223						
ANR	150286	Symbol	get_zval_ptr_ptr		150223						
ANR	150287	Symbol	op_type		150223						
ANR	150288	Symbol	type		150223						
ANR	150289	Symbol	& EX		150223						
ANR	150290	Symbol	execute_data		150223						
ANR	150291	Symbol	* should_free		150223						
ANR	150292	Symbol	IS_UNUSED		150223						
ANR	150293	Function	zend_assign_to_variable_reference	575:0:17937:18305							
ANR	150294	FunctionDef	"zend_assign_to_variable_reference (zval * variable_ptr , zval * value_ptr)"		150293	0					
ANR	150295	CompoundStatement		576:0:18027:18305	150293	0					
ANR	150296	IdentifierDeclStatement	zend_reference * ref ;	577:1:18030:18049	150293	0	True				
ANR	150297	IdentifierDecl	* ref		150293	0					
ANR	150298	IdentifierDeclType	zend_reference *		150293	0					
ANR	150299	Identifier	ref		150293	1					
ANR	150300	IfStatement	if ( EXPECTED ( ! Z_ISREF_P ( value_ptr ) ) )		150293	1					
ANR	150301	Condition	EXPECTED ( ! Z_ISREF_P ( value_ptr ) )	579:5:18057:18087	150293	0	True				
ANR	150302	CallExpression	EXPECTED ( ! Z_ISREF_P ( value_ptr ) )		150293	0					
ANR	150303	Callee	EXPECTED		150293	0					
ANR	150304	Identifier	EXPECTED		150293	0					
ANR	150305	ArgumentList	! Z_ISREF_P ( value_ptr )		150293	1					
ANR	150306	Argument	! Z_ISREF_P ( value_ptr )		150293	0					
ANR	150307	UnaryOperationExpression	! Z_ISREF_P ( value_ptr )		150293	0					
ANR	150308	UnaryOperator	!		150293	0					
ANR	150309	CallExpression	Z_ISREF_P ( value_ptr )		150293	1					
ANR	150310	Callee	Z_ISREF_P		150293	0					
ANR	150311	Identifier	Z_ISREF_P		150293	0					
ANR	150312	ArgumentList	value_ptr		150293	1					
ANR	150313	Argument	value_ptr		150293	0					
ANR	150314	Identifier	value_ptr		150293	0					
ANR	150315	CompoundStatement		4:38:62:62	150293	1					
ANR	150316	ExpressionStatement	"ZVAL_NEW_REF ( value_ptr , value_ptr )"	580:2:18094:18128	150293	0	True				
ANR	150317	CallExpression	"ZVAL_NEW_REF ( value_ptr , value_ptr )"		150293	0					
ANR	150318	Callee	ZVAL_NEW_REF		150293	0					
ANR	150319	Identifier	ZVAL_NEW_REF		150293	0					
ANR	150320	ArgumentList	value_ptr		150293	1					
ANR	150321	Argument	value_ptr		150293	0					
ANR	150322	Identifier	value_ptr		150293	0					
ANR	150323	Argument	value_ptr		150293	1					
ANR	150324	Identifier	value_ptr		150293	0					
ANR	150325	ElseStatement	else		150293	0					
ANR	150326	IfStatement	if ( UNEXPECTED ( variable_ptr == value_ptr ) )		150293	0					
ANR	150327	Condition	UNEXPECTED ( variable_ptr == value_ptr )	581:12:18142:18178	150293	0	True				
ANR	150328	CallExpression	UNEXPECTED ( variable_ptr == value_ptr )		150293	0					
ANR	150329	Callee	UNEXPECTED		150293	0					
ANR	150330	Identifier	UNEXPECTED		150293	0					
ANR	150331	ArgumentList	variable_ptr == value_ptr		150293	1					
ANR	150332	Argument	variable_ptr == value_ptr		150293	0					
ANR	150333	EqualityExpression	variable_ptr == value_ptr		150293	0		==			
ANR	150334	Identifier	variable_ptr		150293	0					
ANR	150335	Identifier	value_ptr		150293	1					
ANR	150336	CompoundStatement		6:51:153:153	150293	1					
ANR	150337	ReturnStatement	return ;	582:2:18185:18191	150293	0	True				
ANR	150338	ExpressionStatement	ref = Z_REF_P ( value_ptr )	585:1:18198:18222	150293	2	True				
ANR	150339	AssignmentExpression	ref = Z_REF_P ( value_ptr )		150293	0		=			
ANR	150340	Identifier	ref		150293	0					
ANR	150341	CallExpression	Z_REF_P ( value_ptr )		150293	1					
ANR	150342	Callee	Z_REF_P		150293	0					
ANR	150343	Identifier	Z_REF_P		150293	0					
ANR	150344	ArgumentList	value_ptr		150293	1					
ANR	150345	Argument	value_ptr		150293	0					
ANR	150346	Identifier	value_ptr		150293	0					
ANR	150347	ExpressionStatement	GC_REFCOUNT ( ref ) ++	586:1:18225:18243	150293	3	True				
ANR	150348	PostIncDecOperationExpression	GC_REFCOUNT ( ref ) ++		150293	0					
ANR	150349	CallExpression	GC_REFCOUNT ( ref )		150293	0					
ANR	150350	Callee	GC_REFCOUNT		150293	0					
ANR	150351	Identifier	GC_REFCOUNT		150293	0					
ANR	150352	ArgumentList	ref		150293	1					
ANR	150353	Argument	ref		150293	0					
ANR	150354	Identifier	ref		150293	0					
ANR	150355	IncDec	++		150293	1					
ANR	150356	ExpressionStatement	zval_ptr_dtor ( variable_ptr )	587:1:18246:18273	150293	4	True				
ANR	150357	CallExpression	zval_ptr_dtor ( variable_ptr )		150293	0					
ANR	150358	Callee	zval_ptr_dtor		150293	0					
ANR	150359	Identifier	zval_ptr_dtor		150293	0					
ANR	150360	ArgumentList	variable_ptr		150293	1					
ANR	150361	Argument	variable_ptr		150293	0					
ANR	150362	Identifier	variable_ptr		150293	0					
ANR	150363	ExpressionStatement	"ZVAL_REF ( variable_ptr , ref )"	588:1:18276:18303	150293	5	True				
ANR	150364	CallExpression	"ZVAL_REF ( variable_ptr , ref )"		150293	0					
ANR	150365	Callee	ZVAL_REF		150293	0					
ANR	150366	Identifier	ZVAL_REF		150293	0					
ANR	150367	ArgumentList	variable_ptr		150293	1					
ANR	150368	Argument	variable_ptr		150293	0					
ANR	150369	Identifier	variable_ptr		150293	0					
ANR	150370	Argument	ref		150293	1					
ANR	150371	Identifier	ref		150293	0					
ANR	150372	ReturnType	static inline void		150293	1					
ANR	150373	Identifier	zend_assign_to_variable_reference		150293	2					
ANR	150374	ParameterList	"zval * variable_ptr , zval * value_ptr"		150293	3					
ANR	150375	Parameter	zval * variable_ptr	575:53:17990:18007	150293	0	True				
ANR	150376	ParameterType	zval *		150293	0					
ANR	150377	Identifier	variable_ptr		150293	1					
ANR	150378	Parameter	zval * value_ptr	575:73:18010:18024	150293	1	True				
ANR	150379	ParameterType	zval *		150293	0					
ANR	150380	Identifier	value_ptr		150293	1					
ANR	150381	CFGEntryNode	ENTRY		150293		True				
ANR	150382	CFGExitNode	EXIT		150293		True				
ANR	150383	Symbol	UNEXPECTED		150293						
ANR	150384	Symbol	value_ptr		150293						
ANR	150385	Symbol	ref		150293						
ANR	150386	Symbol	variable_ptr		150293						
ANR	150387	Symbol	EXPECTED		150293						
ANR	150388	Symbol	GC_REFCOUNT		150293						
ANR	150389	Symbol	Z_ISREF_P		150293						
ANR	150390	Symbol	Z_REF_P		150293						
ANR	150391	Function	make_real_object	592:0:18359:18786							
ANR	150392	FunctionDef	make_real_object (zval * object)		150391	0					
ANR	150393	CompoundStatement		593:0:18408:18786	150391	0					
ANR	150394	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( object ) != IS_OBJECT ) )		150391	0					
ANR	150395	Condition	UNEXPECTED ( Z_TYPE_P ( object ) != IS_OBJECT )	594:5:18415:18455	150391	0	True				
ANR	150396	CallExpression	UNEXPECTED ( Z_TYPE_P ( object ) != IS_OBJECT )		150391	0					
ANR	150397	Callee	UNEXPECTED		150391	0					
ANR	150398	Identifier	UNEXPECTED		150391	0					
ANR	150399	ArgumentList	Z_TYPE_P ( object ) != IS_OBJECT		150391	1					
ANR	150400	Argument	Z_TYPE_P ( object ) != IS_OBJECT		150391	0					
ANR	150401	EqualityExpression	Z_TYPE_P ( object ) != IS_OBJECT		150391	0		!=			
ANR	150402	CallExpression	Z_TYPE_P ( object )		150391	0					
ANR	150403	Callee	Z_TYPE_P		150391	0					
ANR	150404	Identifier	Z_TYPE_P		150391	0					
ANR	150405	ArgumentList	object		150391	1					
ANR	150406	Argument	object		150391	0					
ANR	150407	Identifier	object		150391	0					
ANR	150408	Identifier	IS_OBJECT		150391	1					
ANR	150409	CompoundStatement		2:48:49:49	150391	1					
ANR	150410	IfStatement	if ( EXPECTED ( Z_TYPE_P ( object ) <= IS_FALSE ) )		150391	0					
ANR	150411	Condition	EXPECTED ( Z_TYPE_P ( object ) <= IS_FALSE )	595:6:18466:18503	150391	0	True				
ANR	150412	CallExpression	EXPECTED ( Z_TYPE_P ( object ) <= IS_FALSE )		150391	0					
ANR	150413	Callee	EXPECTED		150391	0					
ANR	150414	Identifier	EXPECTED		150391	0					
ANR	150415	ArgumentList	Z_TYPE_P ( object ) <= IS_FALSE		150391	1					
ANR	150416	Argument	Z_TYPE_P ( object ) <= IS_FALSE		150391	0					
ANR	150417	RelationalExpression	Z_TYPE_P ( object ) <= IS_FALSE		150391	0		<=			
ANR	150418	CallExpression	Z_TYPE_P ( object )		150391	0					
ANR	150419	Callee	Z_TYPE_P		150391	0					
ANR	150420	Identifier	Z_TYPE_P		150391	0					
ANR	150421	ArgumentList	object		150391	1					
ANR	150422	Argument	object		150391	0					
ANR	150423	Identifier	object		150391	0					
ANR	150424	Identifier	IS_FALSE		150391	1					
ANR	150425	CompoundStatement		3:46:97:97	150391	1					
ANR	150426	ElseStatement	else		150391	0					
ANR	150427	IfStatement	if ( EXPECTED ( ( Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0 ) ) )		150391	0					
ANR	150428	Condition	EXPECTED ( ( Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0 ) )	597:13:18549:18616	150391	0	True				
ANR	150429	CallExpression	EXPECTED ( ( Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0 ) )		150391	0					
ANR	150430	Callee	EXPECTED		150391	0					
ANR	150431	Identifier	EXPECTED		150391	0					
ANR	150432	ArgumentList	Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0		150391	1					
ANR	150433	Argument	Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0		150391	0					
ANR	150434	AndExpression	Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0		150391	0		&&			
ANR	150435	EqualityExpression	Z_TYPE_P ( object ) == IS_STRING		150391	0		==			
ANR	150436	CallExpression	Z_TYPE_P ( object )		150391	0					
ANR	150437	Callee	Z_TYPE_P		150391	0					
ANR	150438	Identifier	Z_TYPE_P		150391	0					
ANR	150439	ArgumentList	object		150391	1					
ANR	150440	Argument	object		150391	0					
ANR	150441	Identifier	object		150391	0					
ANR	150442	Identifier	IS_STRING		150391	1					
ANR	150443	EqualityExpression	Z_STRLEN_P ( object ) == 0		150391	1		==			
ANR	150444	CallExpression	Z_STRLEN_P ( object )		150391	0					
ANR	150445	Callee	Z_STRLEN_P		150391	0					
ANR	150446	Identifier	Z_STRLEN_P		150391	0					
ANR	150447	ArgumentList	object		150391	1					
ANR	150448	Argument	object		150391	0					
ANR	150449	Identifier	object		150391	0					
ANR	150450	PrimaryExpression	0		150391	1					
ANR	150451	CompoundStatement		5:83:210:210	150391	1					
ANR	150452	ExpressionStatement	zval_ptr_dtor_nogc ( object )	598:3:18624:18650	150391	0	True				
ANR	150453	CallExpression	zval_ptr_dtor_nogc ( object )		150391	0					
ANR	150454	Callee	zval_ptr_dtor_nogc		150391	0					
ANR	150455	Identifier	zval_ptr_dtor_nogc		150391	0					
ANR	150456	ArgumentList	object		150391	1					
ANR	150457	Argument	object		150391	0					
ANR	150458	Identifier	object		150391	0					
ANR	150459	ElseStatement	else		150391	0					
ANR	150460	CompoundStatement		7:9:252:252	150391	0					
ANR	150461	ReturnStatement	return 0 ;	600:3:18666:18674	150391	0	True				
ANR	150462	PrimaryExpression	0		150391	0					
ANR	150463	ExpressionStatement	object_init ( object )	602:2:18682:18701	150391	1	True				
ANR	150464	CallExpression	object_init ( object )		150391	0					
ANR	150465	Callee	object_init		150391	0					
ANR	150466	Identifier	object_init		150391	0					
ANR	150467	ArgumentList	object		150391	1					
ANR	150468	Argument	object		150391	0					
ANR	150469	Identifier	object		150391	0					
ANR	150470	ExpressionStatement	"zend_error ( E_WARNING , ""Creating default object from empty value"" )"	603:2:18705:18770	150391	2	True				
ANR	150471	CallExpression	"zend_error ( E_WARNING , ""Creating default object from empty value"" )"		150391	0					
ANR	150472	Callee	zend_error		150391	0					
ANR	150473	Identifier	zend_error		150391	0					
ANR	150474	ArgumentList	E_WARNING		150391	1					
ANR	150475	Argument	E_WARNING		150391	0					
ANR	150476	Identifier	E_WARNING		150391	0					
ANR	150477	Argument	"""Creating default object from empty value"""		150391	1					
ANR	150478	PrimaryExpression	"""Creating default object from empty value"""		150391	0					
ANR	150479	ReturnStatement	return 1 ;	605:1:18776:18784	150391	1	True				
ANR	150480	PrimaryExpression	1		150391	0					
ANR	150481	ReturnType	static inline int		150391	1					
ANR	150482	Identifier	make_real_object		150391	2					
ANR	150483	ParameterList	zval * object		150391	3					
ANR	150484	Parameter	zval * object	592:35:18394:18405	150391	0	True				
ANR	150485	ParameterType	zval *		150391	0					
ANR	150486	Identifier	object		150391	1					
ANR	150487	CFGEntryNode	ENTRY		150391		True				
ANR	150488	CFGExitNode	EXIT		150391		True				
ANR	150489	Symbol	UNEXPECTED		150391						
ANR	150490	Symbol	E_WARNING		150391						
ANR	150491	Symbol	Z_STRLEN_P		150391						
ANR	150492	Symbol	IS_STRING		150391						
ANR	150493	Symbol	IS_OBJECT		150391						
ANR	150494	Symbol	Z_TYPE_P		150391						
ANR	150495	Symbol	EXPECTED		150391						
ANR	150496	Symbol	IS_FALSE		150391						
ANR	150497	Symbol	object		150391						
ANR	150498	Function	zend_verify_internal_arg_class_kind	608:0:18789:19401							
ANR	150499	FunctionDef	"zend_verify_internal_arg_class_kind (const zend_internal_arg_info * cur_arg_info , char * * class_name , zend_class_entry * * pce)"		150498	0					
ANR	150500	CompoundStatement		609:0:18926:19401	150498	0					
ANR	150501	IdentifierDeclStatement	zend_string * key ;	610:1:18929:18945	150498	0	True				
ANR	150502	IdentifierDecl	* key		150498	0					
ANR	150503	IdentifierDeclType	zend_string *		150498	0					
ANR	150504	Identifier	key		150498	1					
ANR	150505	ExpressionStatement	ALLOCA_FLAG ( use_heap )	611:1:18948:18969	150498	1	True				
ANR	150506	CallExpression	ALLOCA_FLAG ( use_heap )		150498	0					
ANR	150507	Callee	ALLOCA_FLAG		150498	0					
ANR	150508	Identifier	ALLOCA_FLAG		150498	0					
ANR	150509	ArgumentList	use_heap		150498	1					
ANR	150510	Argument	use_heap		150498	0					
ANR	150511	Identifier	use_heap		150498	0					
ANR	150512	ExpressionStatement	"ZSTR_ALLOCA_INIT ( key , cur_arg_info -> class_name , strlen ( cur_arg_info -> class_name ) , use_heap )"	613:1:18973:19064	150498	2	True				
ANR	150513	CallExpression	"ZSTR_ALLOCA_INIT ( key , cur_arg_info -> class_name , strlen ( cur_arg_info -> class_name ) , use_heap )"		150498	0					
ANR	150514	Callee	ZSTR_ALLOCA_INIT		150498	0					
ANR	150515	Identifier	ZSTR_ALLOCA_INIT		150498	0					
ANR	150516	ArgumentList	key		150498	1					
ANR	150517	Argument	key		150498	0					
ANR	150518	Identifier	key		150498	0					
ANR	150519	Argument	cur_arg_info -> class_name		150498	1					
ANR	150520	PtrMemberAccess	cur_arg_info -> class_name		150498	0					
ANR	150521	Identifier	cur_arg_info		150498	0					
ANR	150522	Identifier	class_name		150498	1					
ANR	150523	Argument	strlen ( cur_arg_info -> class_name )		150498	2					
ANR	150524	CallExpression	strlen ( cur_arg_info -> class_name )		150498	0					
ANR	150525	Callee	strlen		150498	0					
ANR	150526	Identifier	strlen		150498	0					
ANR	150527	ArgumentList	cur_arg_info -> class_name		150498	1					
ANR	150528	Argument	cur_arg_info -> class_name		150498	0					
ANR	150529	PtrMemberAccess	cur_arg_info -> class_name		150498	0					
ANR	150530	Identifier	cur_arg_info		150498	0					
ANR	150531	Identifier	class_name		150498	1					
ANR	150532	Argument	use_heap		150498	3					
ANR	150533	Identifier	use_heap		150498	0					
ANR	150534	ExpressionStatement	"* pce = zend_fetch_class ( key , ( ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD ) )"	614:1:19067:19151	150498	3	True				
ANR	150535	AssignmentExpression	"* pce = zend_fetch_class ( key , ( ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD ) )"		150498	0		=			
ANR	150536	UnaryOperationExpression	* pce		150498	0					
ANR	150537	UnaryOperator	*		150498	0					
ANR	150538	Identifier	pce		150498	1					
ANR	150539	CallExpression	"zend_fetch_class ( key , ( ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD ) )"		150498	1					
ANR	150540	Callee	zend_fetch_class		150498	0					
ANR	150541	Identifier	zend_fetch_class		150498	0					
ANR	150542	ArgumentList	key		150498	1					
ANR	150543	Argument	key		150498	0					
ANR	150544	Identifier	key		150498	0					
ANR	150545	Argument	ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD		150498	1					
ANR	150546	InclusiveOrExpression	ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD		150498	0		|			
ANR	150547	Identifier	ZEND_FETCH_CLASS_AUTO		150498	0					
ANR	150548	Identifier	ZEND_FETCH_CLASS_NO_AUTOLOAD		150498	1					
ANR	150549	ExpressionStatement	"ZSTR_ALLOCA_FREE ( key , use_heap )"	615:1:19154:19185	150498	4	True				
ANR	150550	CallExpression	"ZSTR_ALLOCA_FREE ( key , use_heap )"		150498	0					
ANR	150551	Callee	ZSTR_ALLOCA_FREE		150498	0					
ANR	150552	Identifier	ZSTR_ALLOCA_FREE		150498	0					
ANR	150553	ArgumentList	key		150498	1					
ANR	150554	Argument	key		150498	0					
ANR	150555	Identifier	key		150498	0					
ANR	150556	Argument	use_heap		150498	1					
ANR	150557	Identifier	use_heap		150498	0					
ANR	150558	ExpressionStatement	* class_name = ( * pce ) ? ZSTR_VAL ( ( * pce ) -> name ) : ( char * ) cur_arg_info -> class_name	617:1:19189:19268	150498	5	True				
ANR	150559	AssignmentExpression	* class_name = ( * pce ) ? ZSTR_VAL ( ( * pce ) -> name ) : ( char * ) cur_arg_info -> class_name		150498	0		=			
ANR	150560	UnaryOperationExpression	* class_name		150498	0					
ANR	150561	UnaryOperator	*		150498	0					
ANR	150562	Identifier	class_name		150498	1					
ANR	150563	ConditionalExpression	( * pce ) ? ZSTR_VAL ( ( * pce ) -> name ) : ( char * ) cur_arg_info -> class_name		150498	1					
ANR	150564	Condition	* pce		150498	0					
ANR	150565	UnaryOperationExpression	* pce		150498	0					
ANR	150566	UnaryOperator	*		150498	0					
ANR	150567	Identifier	pce		150498	1					
ANR	150568	CallExpression	ZSTR_VAL ( ( * pce ) -> name )		150498	1					
ANR	150569	Callee	ZSTR_VAL		150498	0					
ANR	150570	Identifier	ZSTR_VAL		150498	0					
ANR	150571	ArgumentList	( * pce ) -> name		150498	1					
ANR	150572	Argument	( * pce ) -> name		150498	0					
ANR	150573	PtrMemberAccess	( * pce ) -> name		150498	0					
ANR	150574	UnaryOperationExpression	* pce		150498	0					
ANR	150575	UnaryOperator	*		150498	0					
ANR	150576	Identifier	pce		150498	1					
ANR	150577	Identifier	name		150498	1					
ANR	150578	CastExpression	( char * ) cur_arg_info -> class_name		150498	2					
ANR	150579	CastTarget	char *		150498	0					
ANR	150580	PtrMemberAccess	cur_arg_info -> class_name		150498	1					
ANR	150581	Identifier	cur_arg_info		150498	0					
ANR	150582	Identifier	class_name		150498	1					
ANR	150583	IfStatement	if ( * pce && ( * pce ) -> ce_flags & ZEND_ACC_INTERFACE )		150498	6					
ANR	150584	Condition	* pce && ( * pce ) -> ce_flags & ZEND_ACC_INTERFACE	618:5:19275:19319	150498	0	True				
ANR	150585	AndExpression	* pce && ( * pce ) -> ce_flags & ZEND_ACC_INTERFACE		150498	0		&&			
ANR	150586	UnaryOperationExpression	* pce		150498	0					
ANR	150587	UnaryOperator	*		150498	0					
ANR	150588	Identifier	pce		150498	1					
ANR	150589	BitAndExpression	( * pce ) -> ce_flags & ZEND_ACC_INTERFACE		150498	1		&			
ANR	150590	PtrMemberAccess	( * pce ) -> ce_flags		150498	0					
ANR	150591	UnaryOperationExpression	* pce		150498	0					
ANR	150592	UnaryOperator	*		150498	0					
ANR	150593	Identifier	pce		150498	1					
ANR	150594	Identifier	ce_flags		150498	1					
ANR	150595	Identifier	ZEND_ACC_INTERFACE		150498	1					
ANR	150596	CompoundStatement		10:52:395:395	150498	1					
ANR	150597	ReturnStatement	"return ""implement interface "" ;"	619:2:19326:19355	150498	0	True				
ANR	150598	PrimaryExpression	"""implement interface """		150498	0					
ANR	150599	ElseStatement	else		150498	0					
ANR	150600	CompoundStatement		12:8:438:438	150498	0					
ANR	150601	ReturnStatement	"return ""be an instance of "" ;"	621:2:19369:19396	150498	0	True				
ANR	150602	PrimaryExpression	"""be an instance of """		150498	0					
ANR	150603	ReturnType	static char *		150498	1					
ANR	150604	Identifier	zend_verify_internal_arg_class_kind		150498	2					
ANR	150605	ParameterList	"const zend_internal_arg_info * cur_arg_info , char * * class_name , zend_class_entry * * pce"		150498	3					
ANR	150606	Parameter	const zend_internal_arg_info * cur_arg_info	608:50:18839:18880	150498	0	True				
ANR	150607	ParameterType	const zend_internal_arg_info *		150498	0					
ANR	150608	Identifier	cur_arg_info		150498	1					
ANR	150609	Parameter	char * * class_name	608:94:18883:18899	150498	1	True				
ANR	150610	ParameterType	char * *		150498	0					
ANR	150611	Identifier	class_name		150498	1					
ANR	150612	Parameter	zend_class_entry * * pce	608:113:18902:18923	150498	2	True				
ANR	150613	ParameterType	zend_class_entry * *		150498	0					
ANR	150614	Identifier	pce		150498	1					
ANR	150615	CFGEntryNode	ENTRY		150498		True				
ANR	150616	CFGExitNode	EXIT		150498		True				
ANR	150617	Symbol	zend_fetch_class		150498						
ANR	150618	Symbol	( * pce ) -> ce_flags		150498						
ANR	150619	Symbol	ZEND_FETCH_CLASS_AUTO		150498						
ANR	150620	Symbol	( * pce ) -> name		150498						
ANR	150621	Symbol	* class_name		150498						
ANR	150622	Symbol	* * pce		150498						
ANR	150623	Symbol	ZEND_FETCH_CLASS_NO_AUTOLOAD		150498						
ANR	150624	Symbol	cur_arg_info -> class_name		150498						
ANR	150625	Symbol	cur_arg_info		150498						
ANR	150626	Symbol	ZSTR_VAL		150498						
ANR	150627	Symbol	strlen		150498						
ANR	150628	Symbol	* cur_arg_info		150498						
ANR	150629	Symbol	pce		150498						
ANR	150630	Symbol	ZEND_ACC_INTERFACE		150498						
ANR	150631	Symbol	* pce		150498						
ANR	150632	Symbol	class_name		150498						
ANR	150633	Symbol	key		150498						
ANR	150634	Symbol	use_heap		150498						
ANR	150635	Function	zend_verify_arg_class_kind	625:0:19404:19620							
ANR	150636	FunctionDef	zend_verify_arg_class_kind (const zend_arg_info * cur_arg_info)		150635	0					
ANR	150637	CompoundStatement		626:0:19510:19620	150635	0					
ANR	150638	ReturnStatement	"return zend_fetch_class ( cur_arg_info -> class_name , ( ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD ) ) ;"	627:1:19513:19618	150635	0	True				
ANR	150639	CallExpression	"zend_fetch_class ( cur_arg_info -> class_name , ( ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD ) )"		150635	0					
ANR	150640	Callee	zend_fetch_class		150635	0					
ANR	150641	Identifier	zend_fetch_class		150635	0					
ANR	150642	ArgumentList	cur_arg_info -> class_name		150635	1					
ANR	150643	Argument	cur_arg_info -> class_name		150635	0					
ANR	150644	PtrMemberAccess	cur_arg_info -> class_name		150635	0					
ANR	150645	Identifier	cur_arg_info		150635	0					
ANR	150646	Identifier	class_name		150635	1					
ANR	150647	Argument	ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD		150635	1					
ANR	150648	InclusiveOrExpression	ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD		150635	0		|			
ANR	150649	Identifier	ZEND_FETCH_CLASS_AUTO		150635	0					
ANR	150650	Identifier	ZEND_FETCH_CLASS_NO_AUTOLOAD		150635	1					
ANR	150651	ReturnType	static zend_always_inline zend_class_entry *		150635	1					
ANR	150652	Identifier	zend_verify_arg_class_kind		150635	2					
ANR	150653	ParameterList	const zend_arg_info * cur_arg_info		150635	3					
ANR	150654	Parameter	const zend_arg_info * cur_arg_info	625:71:19475:19507	150635	0	True				
ANR	150655	ParameterType	const zend_arg_info *		150635	0					
ANR	150656	Identifier	cur_arg_info		150635	1					
ANR	150657	CFGEntryNode	ENTRY		150635		True				
ANR	150658	CFGExitNode	EXIT		150635		True				
ANR	150659	Symbol	zend_fetch_class		150635						
ANR	150660	Symbol	* cur_arg_info		150635						
ANR	150661	Symbol	ZEND_FETCH_CLASS_AUTO		150635						
ANR	150662	Symbol	ZEND_FETCH_CLASS_NO_AUTOLOAD		150635						
ANR	150663	Symbol	cur_arg_info -> class_name		150635						
ANR	150664	Symbol	cur_arg_info		150635						
ANR	150665	Function	zend_verify_arg_error	630:0:19623:20800							
ANR	150666	FunctionDef	"zend_verify_arg_error (const zend_function * zf , uint32_t arg_num , const char * need_msg , const char * need_kind , const char * given_msg , const char * given_kind , zval * arg)"		150665	0					
ANR	150667	CompoundStatement		631:0:19813:20800	150665	0					
ANR	150668	IdentifierDeclStatement	zend_execute_data * ptr = EG ( current_execute_data ) -> prev_execute_data ;	632:1:19816:19884	150665	0	True				
ANR	150669	IdentifierDecl	* ptr = EG ( current_execute_data ) -> prev_execute_data		150665	0					
ANR	150670	IdentifierDeclType	zend_execute_data *		150665	0					
ANR	150671	Identifier	ptr		150665	1					
ANR	150672	AssignmentExpression	* ptr = EG ( current_execute_data ) -> prev_execute_data		150665	2		=			
ANR	150673	Identifier	ptr		150665	0					
ANR	150674	PtrMemberAccess	EG ( current_execute_data ) -> prev_execute_data		150665	1					
ANR	150675	CallExpression	EG ( current_execute_data )		150665	0					
ANR	150676	Callee	EG		150665	0					
ANR	150677	Identifier	EG		150665	0					
ANR	150678	ArgumentList	current_execute_data		150665	1					
ANR	150679	Argument	current_execute_data		150665	0					
ANR	150680	Identifier	current_execute_data		150665	0					
ANR	150681	Identifier	prev_execute_data		150665	1					
ANR	150682	IdentifierDeclStatement	const char * fname = ZSTR_VAL ( zf -> common . function_name ) ;	633:1:19887:19941	150665	1	True				
ANR	150683	IdentifierDecl	* fname = ZSTR_VAL ( zf -> common . function_name )		150665	0					
ANR	150684	IdentifierDeclType	const char *		150665	0					
ANR	150685	Identifier	fname		150665	1					
ANR	150686	AssignmentExpression	* fname = ZSTR_VAL ( zf -> common . function_name )		150665	2		=			
ANR	150687	Identifier	fname		150665	0					
ANR	150688	CallExpression	ZSTR_VAL ( zf -> common . function_name )		150665	1					
ANR	150689	Callee	ZSTR_VAL		150665	0					
ANR	150690	Identifier	ZSTR_VAL		150665	0					
ANR	150691	ArgumentList	zf -> common . function_name		150665	1					
ANR	150692	Argument	zf -> common . function_name		150665	0					
ANR	150693	MemberAccess	zf -> common . function_name		150665	0					
ANR	150694	PtrMemberAccess	zf -> common		150665	0					
ANR	150695	Identifier	zf		150665	0					
ANR	150696	Identifier	common		150665	1					
ANR	150697	Identifier	function_name		150665	1					
ANR	150698	IdentifierDeclStatement	const char * fsep ;	634:1:19944:19960	150665	2	True				
ANR	150699	IdentifierDecl	* fsep		150665	0					
ANR	150700	IdentifierDeclType	const char *		150665	0					
ANR	150701	Identifier	fsep		150665	1					
ANR	150702	IdentifierDeclStatement	const char * fclass ;	635:1:19963:19981	150665	3	True				
ANR	150703	IdentifierDecl	* fclass		150665	0					
ANR	150704	IdentifierDeclType	const char *		150665	0					
ANR	150705	Identifier	fclass		150665	1					
ANR	150706	IfStatement	if ( zf -> common . scope )		150665	4					
ANR	150707	Condition	zf -> common . scope	637:5:19989:20004	150665	0	True				
ANR	150708	MemberAccess	zf -> common . scope		150665	0					
ANR	150709	PtrMemberAccess	zf -> common		150665	0					
ANR	150710	Identifier	zf		150665	0					
ANR	150711	Identifier	common		150665	1					
ANR	150712	Identifier	scope		150665	1					
ANR	150713	CompoundStatement		7:23:193:193	150665	1					
ANR	150714	ExpressionStatement	"fsep = ""::"""	638:2:20011:20023	150665	0	True				
ANR	150715	AssignmentExpression	"fsep = ""::"""		150665	0		=			
ANR	150716	Identifier	fsep		150665	0					
ANR	150717	PrimaryExpression	"""::"""		150665	1					
ANR	150718	ExpressionStatement	fclass = ZSTR_VAL ( zf -> common . scope -> name )	639:2:20027:20068	150665	1	True				
ANR	150719	AssignmentExpression	fclass = ZSTR_VAL ( zf -> common . scope -> name )		150665	0		=			
ANR	150720	Identifier	fclass		150665	0					
ANR	150721	CallExpression	ZSTR_VAL ( zf -> common . scope -> name )		150665	1					
ANR	150722	Callee	ZSTR_VAL		150665	0					
ANR	150723	Identifier	ZSTR_VAL		150665	0					
ANR	150724	ArgumentList	zf -> common . scope -> name		150665	1					
ANR	150725	Argument	zf -> common . scope -> name		150665	0					
ANR	150726	PtrMemberAccess	zf -> common . scope -> name		150665	0					
ANR	150727	MemberAccess	zf -> common . scope		150665	0					
ANR	150728	PtrMemberAccess	zf -> common		150665	0					
ANR	150729	Identifier	zf		150665	0					
ANR	150730	Identifier	common		150665	1					
ANR	150731	Identifier	scope		150665	1					
ANR	150732	Identifier	name		150665	1					
ANR	150733	ElseStatement	else		150665	0					
ANR	150734	CompoundStatement		10:8:264:264	150665	0					
ANR	150735	ExpressionStatement	"fsep = """""	641:2:20082:20092	150665	0	True				
ANR	150736	AssignmentExpression	"fsep = """""		150665	0		=			
ANR	150737	Identifier	fsep		150665	0					
ANR	150738	PrimaryExpression	""""""		150665	1					
ANR	150739	ExpressionStatement	"fclass = """""	642:2:20096:20107	150665	1	True				
ANR	150740	AssignmentExpression	"fclass = """""		150665	0		=			
ANR	150741	Identifier	fclass		150665	0					
ANR	150742	PrimaryExpression	""""""		150665	1					
ANR	150743	IfStatement	if ( zf -> common . type == ZEND_USER_FUNCTION )		150665	5					
ANR	150744	Condition	zf -> common . type == ZEND_USER_FUNCTION	645:5:20118:20154	150665	0	True				
ANR	150745	EqualityExpression	zf -> common . type == ZEND_USER_FUNCTION		150665	0		==			
ANR	150746	MemberAccess	zf -> common . type		150665	0					
ANR	150747	PtrMemberAccess	zf -> common		150665	0					
ANR	150748	Identifier	zf		150665	0					
ANR	150749	Identifier	common		150665	1					
ANR	150750	Identifier	type		150665	1					
ANR	150751	Identifier	ZEND_USER_FUNCTION		150665	1					
ANR	150752	CompoundStatement		15:44:343:343	150665	1					
ANR	150753	IfStatement	if ( ptr && ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type ) )		150665	0					
ANR	150754	Condition	ptr && ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type )	646:6:20165:20222	150665	0	True				
ANR	150755	AndExpression	ptr && ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type )		150665	0		&&			
ANR	150756	Identifier	ptr		150665	0					
ANR	150757	AndExpression	ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type )		150665	1		&&			
ANR	150758	PtrMemberAccess	ptr -> func		150665	0					
ANR	150759	Identifier	ptr		150665	0					
ANR	150760	Identifier	func		150665	1					
ANR	150761	CallExpression	ZEND_USER_CODE ( ptr -> func -> common . type )		150665	1					
ANR	150762	Callee	ZEND_USER_CODE		150665	0					
ANR	150763	Identifier	ZEND_USER_CODE		150665	0					
ANR	150764	ArgumentList	ptr -> func -> common . type		150665	1					
ANR	150765	Argument	ptr -> func -> common . type		150665	0					
ANR	150766	MemberAccess	ptr -> func -> common . type		150665	0					
ANR	150767	PtrMemberAccess	ptr -> func -> common		150665	0					
ANR	150768	PtrMemberAccess	ptr -> func		150665	0					
ANR	150769	Identifier	ptr		150665	0					
ANR	150770	Identifier	func		150665	1					
ANR	150771	Identifier	common		150665	1					
ANR	150772	Identifier	type		150665	1					
ANR	150773	CompoundStatement		16:66:411:411	150665	1					
ANR	150774	ExpressionStatement	"zend_type_error ( ""Argument %d passed to %s%s%s() must %s%s, %s%s given, called in %s on line %d"" , arg_num , fclass , fsep , fname , need_msg , need_kind , given_msg , given_kind , ZSTR_VAL ( ptr -> func -> op_array . filename ) , ptr -> opline -> lineno )"	647:3:20230:20471	150665	0	True				
ANR	150775	CallExpression	"zend_type_error ( ""Argument %d passed to %s%s%s() must %s%s, %s%s given, called in %s on line %d"" , arg_num , fclass , fsep , fname , need_msg , need_kind , given_msg , given_kind , ZSTR_VAL ( ptr -> func -> op_array . filename ) , ptr -> opline -> lineno )"		150665	0					
ANR	150776	Callee	zend_type_error		150665	0					
ANR	150777	Identifier	zend_type_error		150665	0					
ANR	150778	ArgumentList	"""Argument %d passed to %s%s%s() must %s%s, %s%s given, called in %s on line %d"""		150665	1					
ANR	150779	Argument	"""Argument %d passed to %s%s%s() must %s%s, %s%s given, called in %s on line %d"""		150665	0					
ANR	150780	PrimaryExpression	"""Argument %d passed to %s%s%s() must %s%s, %s%s given, called in %s on line %d"""		150665	0					
ANR	150781	Argument	arg_num		150665	1					
ANR	150782	Identifier	arg_num		150665	0					
ANR	150783	Argument	fclass		150665	2					
ANR	150784	Identifier	fclass		150665	0					
ANR	150785	Argument	fsep		150665	3					
ANR	150786	Identifier	fsep		150665	0					
ANR	150787	Argument	fname		150665	4					
ANR	150788	Identifier	fname		150665	0					
ANR	150789	Argument	need_msg		150665	5					
ANR	150790	Identifier	need_msg		150665	0					
ANR	150791	Argument	need_kind		150665	6					
ANR	150792	Identifier	need_kind		150665	0					
ANR	150793	Argument	given_msg		150665	7					
ANR	150794	Identifier	given_msg		150665	0					
ANR	150795	Argument	given_kind		150665	8					
ANR	150796	Identifier	given_kind		150665	0					
ANR	150797	Argument	ZSTR_VAL ( ptr -> func -> op_array . filename )		150665	9					
ANR	150798	CallExpression	ZSTR_VAL ( ptr -> func -> op_array . filename )		150665	0					
ANR	150799	Callee	ZSTR_VAL		150665	0					
ANR	150800	Identifier	ZSTR_VAL		150665	0					
ANR	150801	ArgumentList	ptr -> func -> op_array . filename		150665	1					
ANR	150802	Argument	ptr -> func -> op_array . filename		150665	0					
ANR	150803	MemberAccess	ptr -> func -> op_array . filename		150665	0					
ANR	150804	PtrMemberAccess	ptr -> func -> op_array		150665	0					
ANR	150805	PtrMemberAccess	ptr -> func		150665	0					
ANR	150806	Identifier	ptr		150665	0					
ANR	150807	Identifier	func		150665	1					
ANR	150808	Identifier	op_array		150665	1					
ANR	150809	Identifier	filename		150665	1					
ANR	150810	Argument	ptr -> opline -> lineno		150665	10					
ANR	150811	PtrMemberAccess	ptr -> opline -> lineno		150665	0					
ANR	150812	PtrMemberAccess	ptr -> opline		150665	0					
ANR	150813	Identifier	ptr		150665	0					
ANR	150814	Identifier	opline		150665	1					
ANR	150815	Identifier	lineno		150665	1					
ANR	150816	ElseStatement	else		150665	0					
ANR	150817	CompoundStatement		20:9:668:668	150665	0					
ANR	150818	ExpressionStatement	"zend_type_error ( ""Argument %d passed to %s%s%s() must %s%s, %s%s given"" , arg_num , fclass , fsep , fname , need_msg , need_kind , given_msg , given_kind )"	651:3:20487:20632	150665	0	True				
ANR	150819	CallExpression	"zend_type_error ( ""Argument %d passed to %s%s%s() must %s%s, %s%s given"" , arg_num , fclass , fsep , fname , need_msg , need_kind , given_msg , given_kind )"		150665	0					
ANR	150820	Callee	zend_type_error		150665	0					
ANR	150821	Identifier	zend_type_error		150665	0					
ANR	150822	ArgumentList	"""Argument %d passed to %s%s%s() must %s%s, %s%s given"""		150665	1					
ANR	150823	Argument	"""Argument %d passed to %s%s%s() must %s%s, %s%s given"""		150665	0					
ANR	150824	PrimaryExpression	"""Argument %d passed to %s%s%s() must %s%s, %s%s given"""		150665	0					
ANR	150825	Argument	arg_num		150665	1					
ANR	150826	Identifier	arg_num		150665	0					
ANR	150827	Argument	fclass		150665	2					
ANR	150828	Identifier	fclass		150665	0					
ANR	150829	Argument	fsep		150665	3					
ANR	150830	Identifier	fsep		150665	0					
ANR	150831	Argument	fname		150665	4					
ANR	150832	Identifier	fname		150665	0					
ANR	150833	Argument	need_msg		150665	5					
ANR	150834	Identifier	need_msg		150665	0					
ANR	150835	Argument	need_kind		150665	6					
ANR	150836	Identifier	need_kind		150665	0					
ANR	150837	Argument	given_msg		150665	7					
ANR	150838	Identifier	given_msg		150665	0					
ANR	150839	Argument	given_kind		150665	8					
ANR	150840	Identifier	given_kind		150665	0					
ANR	150841	ElseStatement	else		150665	0					
ANR	150842	CompoundStatement		23:8:832:832	150665	0					
ANR	150843	ExpressionStatement	"zend_type_error ( ""Argument %d passed to %s%s%s() must %s%s, %s%s given"" , arg_num , fclass , fsep , fname , need_msg , need_kind , given_msg , given_kind )"	654:2:20650:20795	150665	0	True				
ANR	150844	CallExpression	"zend_type_error ( ""Argument %d passed to %s%s%s() must %s%s, %s%s given"" , arg_num , fclass , fsep , fname , need_msg , need_kind , given_msg , given_kind )"		150665	0					
ANR	150845	Callee	zend_type_error		150665	0					
ANR	150846	Identifier	zend_type_error		150665	0					
ANR	150847	ArgumentList	"""Argument %d passed to %s%s%s() must %s%s, %s%s given"""		150665	1					
ANR	150848	Argument	"""Argument %d passed to %s%s%s() must %s%s, %s%s given"""		150665	0					
ANR	150849	PrimaryExpression	"""Argument %d passed to %s%s%s() must %s%s, %s%s given"""		150665	0					
ANR	150850	Argument	arg_num		150665	1					
ANR	150851	Identifier	arg_num		150665	0					
ANR	150852	Argument	fclass		150665	2					
ANR	150853	Identifier	fclass		150665	0					
ANR	150854	Argument	fsep		150665	3					
ANR	150855	Identifier	fsep		150665	0					
ANR	150856	Argument	fname		150665	4					
ANR	150857	Identifier	fname		150665	0					
ANR	150858	Argument	need_msg		150665	5					
ANR	150859	Identifier	need_msg		150665	0					
ANR	150860	Argument	need_kind		150665	6					
ANR	150861	Identifier	need_kind		150665	0					
ANR	150862	Argument	given_msg		150665	7					
ANR	150863	Identifier	given_msg		150665	0					
ANR	150864	Argument	given_kind		150665	8					
ANR	150865	Identifier	given_kind		150665	0					
ANR	150866	ReturnType	static ZEND_COLD void		150665	1					
ANR	150867	Identifier	zend_verify_arg_error		150665	2					
ANR	150868	ParameterList	"const zend_function * zf , uint32_t arg_num , const char * need_msg , const char * need_kind , const char * given_msg , const char * given_kind , zval * arg"		150665	3					
ANR	150869	Parameter	const zend_function * zf	630:44:19667:19689	150665	0	True				
ANR	150870	ParameterType	const zend_function *		150665	0					
ANR	150871	Identifier	zf		150665	1					
ANR	150872	Parameter	uint32_t arg_num	630:69:19692:19707	150665	1	True				
ANR	150873	ParameterType	uint32_t		150665	0					
ANR	150874	Identifier	arg_num		150665	1					
ANR	150875	Parameter	const char * need_msg	630:87:19710:19729	150665	2	True				
ANR	150876	ParameterType	const char *		150665	0					
ANR	150877	Identifier	need_msg		150665	1					
ANR	150878	Parameter	const char * need_kind	630:109:19732:19752	150665	3	True				
ANR	150879	ParameterType	const char *		150665	0					
ANR	150880	Identifier	need_kind		150665	1					
ANR	150881	Parameter	const char * given_msg	630:132:19755:19775	150665	4	True				
ANR	150882	ParameterType	const char *		150665	0					
ANR	150883	Identifier	given_msg		150665	1					
ANR	150884	Parameter	const char * given_kind	630:155:19778:19799	150665	5	True				
ANR	150885	ParameterType	const char *		150665	0					
ANR	150886	Identifier	given_kind		150665	1					
ANR	150887	Parameter	zval * arg	630:179:19802:19810	150665	6	True				
ANR	150888	ParameterType	zval *		150665	0					
ANR	150889	Identifier	arg		150665	1					
ANR	150890	CFGEntryNode	ENTRY		150665		True				
ANR	150891	CFGExitNode	EXIT		150665		True				
ANR	150892	Symbol	arg_num		150665						
ANR	150893	Symbol	ptr -> func -> op_array		150665						
ANR	150894	Symbol	* * ptr		150665						
ANR	150895	Symbol	ptr -> opline		150665						
ANR	150896	Symbol	need_msg		150665						
ANR	150897	Symbol	current_execute_data		150665						
ANR	150898	Symbol	ptr -> func -> op_array . filename		150665						
ANR	150899	Symbol	fsep		150665						
ANR	150900	Symbol	* EG		150665						
ANR	150901	Symbol	zf -> common		150665						
ANR	150902	Symbol	* ptr -> func		150665						
ANR	150903	Symbol	ptr -> func		150665						
ANR	150904	Symbol	zf -> common . type		150665						
ANR	150905	Symbol	* ptr -> opline		150665						
ANR	150906	Symbol	ZEND_USER_FUNCTION		150665						
ANR	150907	Symbol	arg		150665						
ANR	150908	Symbol	* zf -> common . scope		150665						
ANR	150909	Symbol	* ptr		150665						
ANR	150910	Symbol	ptr -> opline -> lineno		150665						
ANR	150911	Symbol	* * zf		150665						
ANR	150912	Symbol	zf -> common . scope		150665						
ANR	150913	Symbol	fname		150665						
ANR	150914	Symbol	fclass		150665						
ANR	150915	Symbol	EG		150665						
ANR	150916	Symbol	given_msg		150665						
ANR	150917	Symbol	EG ( current_execute_data ) -> prev_execute_data		150665						
ANR	150918	Symbol	zf		150665						
ANR	150919	Symbol	* zf -> common		150665						
ANR	150920	Symbol	ptr		150665						
ANR	150921	Symbol	ZSTR_VAL		150665						
ANR	150922	Symbol	zf -> common . function_name		150665						
ANR	150923	Symbol	* zf		150665						
ANR	150924	Symbol	given_kind		150665						
ANR	150925	Symbol	need_kind		150665						
ANR	150926	Symbol	ZEND_USER_CODE		150665						
ANR	150927	Symbol	ptr -> func -> common . type		150665						
ANR	150928	Symbol	zf -> common . scope -> name		150665						
ANR	150929	Symbol	ptr -> func -> common		150665						
ANR	150930	Function	is_null_constant	658:0:20803:21138							
ANR	150931	FunctionDef	is_null_constant (zval * default_value)		150930	0					
ANR	150932	CompoundStatement		659:0:20852:21138	150930	0					
ANR	150933	IfStatement	if ( Z_CONSTANT_P ( default_value ) )		150930	0					
ANR	150934	Condition	Z_CONSTANT_P ( default_value )	660:5:20859:20885	150930	0	True				
ANR	150935	CallExpression	Z_CONSTANT_P ( default_value )		150930	0					
ANR	150936	Callee	Z_CONSTANT_P		150930	0					
ANR	150937	Identifier	Z_CONSTANT_P		150930	0					
ANR	150938	ArgumentList	default_value		150930	1					
ANR	150939	Argument	default_value		150930	0					
ANR	150940	Identifier	default_value		150930	0					
ANR	150941	CompoundStatement		3:2:39:52	150930	1					
ANR	150942	IdentifierDeclStatement	zval constant ;	661:2:20892:20905	150930	0	True				
ANR	150943	IdentifierDecl	constant		150930	0					
ANR	150944	IdentifierDeclType	zval		150930	0					
ANR	150945	Identifier	constant		150930	1					
ANR	150946	ExpressionStatement	"ZVAL_COPY_VALUE ( & constant , default_value )"	663:2:20910:20951	150930	1	True				
ANR	150947	CallExpression	"ZVAL_COPY_VALUE ( & constant , default_value )"		150930	0					
ANR	150948	Callee	ZVAL_COPY_VALUE		150930	0					
ANR	150949	Identifier	ZVAL_COPY_VALUE		150930	0					
ANR	150950	ArgumentList	& constant		150930	1					
ANR	150951	Argument	& constant		150930	0					
ANR	150952	UnaryOperationExpression	& constant		150930	0					
ANR	150953	UnaryOperator	&		150930	0					
ANR	150954	Identifier	constant		150930	1					
ANR	150955	Argument	default_value		150930	1					
ANR	150956	Identifier	default_value		150930	0					
ANR	150957	IfStatement	"if ( UNEXPECTED ( zval_update_constant_ex ( & constant , 0 , NULL ) != SUCCESS ) )"		150930	2					
ANR	150958	Condition	"UNEXPECTED ( zval_update_constant_ex ( & constant , 0 , NULL ) != SUCCESS )"	664:6:20959:21024	150930	0	True				
ANR	150959	CallExpression	"UNEXPECTED ( zval_update_constant_ex ( & constant , 0 , NULL ) != SUCCESS )"		150930	0					
ANR	150960	Callee	UNEXPECTED		150930	0					
ANR	150961	Identifier	UNEXPECTED		150930	0					
ANR	150962	ArgumentList	"zval_update_constant_ex ( & constant , 0 , NULL ) != SUCCESS"		150930	1					
ANR	150963	Argument	"zval_update_constant_ex ( & constant , 0 , NULL ) != SUCCESS"		150930	0					
ANR	150964	EqualityExpression	"zval_update_constant_ex ( & constant , 0 , NULL ) != SUCCESS"		150930	0		!=			
ANR	150965	CallExpression	"zval_update_constant_ex ( & constant , 0 , NULL )"		150930	0					
ANR	150966	Callee	zval_update_constant_ex		150930	0					
ANR	150967	Identifier	zval_update_constant_ex		150930	0					
ANR	150968	ArgumentList	& constant		150930	1					
ANR	150969	Argument	& constant		150930	0					
ANR	150970	UnaryOperationExpression	& constant		150930	0					
ANR	150971	UnaryOperator	&		150930	0					
ANR	150972	Identifier	constant		150930	1					
ANR	150973	Argument	0		150930	1					
ANR	150974	PrimaryExpression	0		150930	0					
ANR	150975	Argument	NULL		150930	2					
ANR	150976	Identifier	NULL		150930	0					
ANR	150977	Identifier	SUCCESS		150930	1					
ANR	150978	CompoundStatement		6:74:174:174	150930	1					
ANR	150979	ReturnStatement	return 0 ;	665:3:21032:21040	150930	0	True				
ANR	150980	PrimaryExpression	0		150930	0					
ANR	150981	IfStatement	if ( Z_TYPE ( constant ) == IS_NULL )		150930	3					
ANR	150982	Condition	Z_TYPE ( constant ) == IS_NULL	667:6:21052:21078	150930	0	True				
ANR	150983	EqualityExpression	Z_TYPE ( constant ) == IS_NULL		150930	0		==			
ANR	150984	CallExpression	Z_TYPE ( constant )		150930	0					
ANR	150985	Callee	Z_TYPE		150930	0					
ANR	150986	Identifier	Z_TYPE		150930	0					
ANR	150987	ArgumentList	constant		150930	1					
ANR	150988	Argument	constant		150930	0					
ANR	150989	Identifier	constant		150930	0					
ANR	150990	Identifier	IS_NULL		150930	1					
ANR	150991	CompoundStatement		9:35:228:228	150930	1					
ANR	150992	ReturnStatement	return 1 ;	668:3:21086:21094	150930	0	True				
ANR	150993	PrimaryExpression	1		150930	0					
ANR	150994	ExpressionStatement	zval_dtor ( & constant )	670:2:21102:21122	150930	4	True				
ANR	150995	CallExpression	zval_dtor ( & constant )		150930	0					
ANR	150996	Callee	zval_dtor		150930	0					
ANR	150997	Identifier	zval_dtor		150930	0					
ANR	150998	ArgumentList	& constant		150930	1					
ANR	150999	Argument	& constant		150930	0					
ANR	151000	UnaryOperationExpression	& constant		150930	0					
ANR	151001	UnaryOperator	&		150930	0					
ANR	151002	Identifier	constant		150930	1					
ANR	151003	ReturnStatement	return 0 ;	672:1:21128:21136	150930	1	True				
ANR	151004	PrimaryExpression	0		150930	0					
ANR	151005	ReturnType	static int		150930	1					
ANR	151006	Identifier	is_null_constant		150930	2					
ANR	151007	ParameterList	zval * default_value		150930	3					
ANR	151008	Parameter	zval * default_value	658:28:20831:20849	150930	0	True				
ANR	151009	ParameterType	zval *		150930	0					
ANR	151010	Identifier	default_value		150930	1					
ANR	151011	CFGEntryNode	ENTRY		150930		True				
ANR	151012	CFGExitNode	EXIT		150930		True				
ANR	151013	Symbol	UNEXPECTED		150930						
ANR	151014	Symbol	& constant		150930						
ANR	151015	Symbol	Z_CONSTANT_P		150930						
ANR	151016	Symbol	constant		150930						
ANR	151017	Symbol	SUCCESS		150930						
ANR	151018	Symbol	NULL		150930						
ANR	151019	Symbol	IS_NULL		150930						
ANR	151020	Symbol	Z_TYPE		150930						
ANR	151021	Symbol	default_value		150930						
ANR	151022	Symbol	zval_update_constant_ex		150930						
ANR	151023	Function	zend_verify_weak_scalar_type_hint	675:0:21141:21968							
ANR	151024	FunctionDef	"zend_verify_weak_scalar_type_hint (zend_uchar type_hint , zval * arg)"		151023	0					
ANR	151025	CompoundStatement		676:0:21225:21968	151023	0					
ANR	151026	SwitchStatement	switch ( type_hint )		151023	0					
ANR	151027	Condition	type_hint	677:9:21236:21244	151023	0	True				
ANR	151028	Identifier	type_hint		151023	0					
ANR	151029	CompoundStatement		2:20:21:21	151023	1					
ANR	151030	Label	case _IS_BOOL :	678:2:21251:21264	151023	0	True				
ANR	151031	Identifier	_IS_BOOL		151023	0					
ANR	151032	CompoundStatement		4:3:45:59	151023	1					
ANR	151033	IdentifierDeclStatement	zend_bool dest ;	679:3:21271:21285	151023	0	True				
ANR	151034	IdentifierDecl	dest		151023	0					
ANR	151035	IdentifierDeclType	zend_bool		151023	0					
ANR	151036	Identifier	dest		151023	1					
ANR	151037	IfStatement	"if ( ! zend_parse_arg_bool_weak ( arg , & dest ) )"		151023	1					
ANR	151038	Condition	"! zend_parse_arg_bool_weak ( arg , & dest )"	681:7:21295:21331	151023	0	True				
ANR	151039	UnaryOperationExpression	"! zend_parse_arg_bool_weak ( arg , & dest )"		151023	0					
ANR	151040	UnaryOperator	!		151023	0					
ANR	151041	CallExpression	"zend_parse_arg_bool_weak ( arg , & dest )"		151023	1					
ANR	151042	Callee	zend_parse_arg_bool_weak		151023	0					
ANR	151043	Identifier	zend_parse_arg_bool_weak		151023	0					
ANR	151044	ArgumentList	arg		151023	1					
ANR	151045	Argument	arg		151023	0					
ANR	151046	Identifier	arg		151023	0					
ANR	151047	Argument	& dest		151023	1					
ANR	151048	UnaryOperationExpression	& dest		151023	0					
ANR	151049	UnaryOperator	&		151023	0					
ANR	151050	Identifier	dest		151023	1					
ANR	151051	CompoundStatement		6:46:108:108	151023	1					
ANR	151052	ReturnStatement	return 0 ;	682:4:21340:21348	151023	0	True				
ANR	151053	PrimaryExpression	0		151023	0					
ANR	151054	ExpressionStatement	zval_ptr_dtor ( arg )	684:3:21358:21376	151023	2	True				
ANR	151055	CallExpression	zval_ptr_dtor ( arg )		151023	0					
ANR	151056	Callee	zval_ptr_dtor		151023	0					
ANR	151057	Identifier	zval_ptr_dtor		151023	0					
ANR	151058	ArgumentList	arg		151023	1					
ANR	151059	Argument	arg		151023	0					
ANR	151060	Identifier	arg		151023	0					
ANR	151061	ExpressionStatement	"ZVAL_BOOL ( arg , dest )"	685:3:21381:21401	151023	3	True				
ANR	151062	CallExpression	"ZVAL_BOOL ( arg , dest )"		151023	0					
ANR	151063	Callee	ZVAL_BOOL		151023	0					
ANR	151064	Identifier	ZVAL_BOOL		151023	0					
ANR	151065	ArgumentList	arg		151023	1					
ANR	151066	Argument	arg		151023	0					
ANR	151067	Identifier	arg		151023	0					
ANR	151068	Argument	dest		151023	1					
ANR	151069	Identifier	dest		151023	0					
ANR	151070	ReturnStatement	return 1 ;	686:3:21406:21414	151023	4	True				
ANR	151071	PrimaryExpression	1		151023	0					
ANR	151072	Label	case IS_LONG :	688:2:21422:21434	151023	2	True				
ANR	151073	Identifier	IS_LONG		151023	0					
ANR	151074	CompoundStatement		14:3:215:229	151023	3					
ANR	151075	IdentifierDeclStatement	zend_long dest ;	689:3:21441:21455	151023	0	True				
ANR	151076	IdentifierDecl	dest		151023	0					
ANR	151077	IdentifierDeclType	zend_long		151023	0					
ANR	151078	Identifier	dest		151023	1					
ANR	151079	IfStatement	"if ( ! zend_parse_arg_long_weak ( arg , & dest ) )"		151023	1					
ANR	151080	Condition	"! zend_parse_arg_long_weak ( arg , & dest )"	691:7:21465:21501	151023	0	True				
ANR	151081	UnaryOperationExpression	"! zend_parse_arg_long_weak ( arg , & dest )"		151023	0					
ANR	151082	UnaryOperator	!		151023	0					
ANR	151083	CallExpression	"zend_parse_arg_long_weak ( arg , & dest )"		151023	1					
ANR	151084	Callee	zend_parse_arg_long_weak		151023	0					
ANR	151085	Identifier	zend_parse_arg_long_weak		151023	0					
ANR	151086	ArgumentList	arg		151023	1					
ANR	151087	Argument	arg		151023	0					
ANR	151088	Identifier	arg		151023	0					
ANR	151089	Argument	& dest		151023	1					
ANR	151090	UnaryOperationExpression	& dest		151023	0					
ANR	151091	UnaryOperator	&		151023	0					
ANR	151092	Identifier	dest		151023	1					
ANR	151093	CompoundStatement		16:46:278:278	151023	1					
ANR	151094	ReturnStatement	return 0 ;	692:4:21510:21518	151023	0	True				
ANR	151095	PrimaryExpression	0		151023	0					
ANR	151096	ExpressionStatement	zval_ptr_dtor ( arg )	694:3:21528:21546	151023	2	True				
ANR	151097	CallExpression	zval_ptr_dtor ( arg )		151023	0					
ANR	151098	Callee	zval_ptr_dtor		151023	0					
ANR	151099	Identifier	zval_ptr_dtor		151023	0					
ANR	151100	ArgumentList	arg		151023	1					
ANR	151101	Argument	arg		151023	0					
ANR	151102	Identifier	arg		151023	0					
ANR	151103	ExpressionStatement	"ZVAL_LONG ( arg , dest )"	695:3:21551:21571	151023	3	True				
ANR	151104	CallExpression	"ZVAL_LONG ( arg , dest )"		151023	0					
ANR	151105	Callee	ZVAL_LONG		151023	0					
ANR	151106	Identifier	ZVAL_LONG		151023	0					
ANR	151107	ArgumentList	arg		151023	1					
ANR	151108	Argument	arg		151023	0					
ANR	151109	Identifier	arg		151023	0					
ANR	151110	Argument	dest		151023	1					
ANR	151111	Identifier	dest		151023	0					
ANR	151112	ReturnStatement	return 1 ;	696:3:21576:21584	151023	4	True				
ANR	151113	PrimaryExpression	1		151023	0					
ANR	151114	Label	case IS_DOUBLE :	698:2:21592:21606	151023	4	True				
ANR	151115	Identifier	IS_DOUBLE		151023	0					
ANR	151116	CompoundStatement		24:3:387:398	151023	5					
ANR	151117	IdentifierDeclStatement	double dest ;	699:3:21613:21624	151023	0	True				
ANR	151118	IdentifierDecl	dest		151023	0					
ANR	151119	IdentifierDeclType	double		151023	0					
ANR	151120	Identifier	dest		151023	1					
ANR	151121	IfStatement	"if ( ! zend_parse_arg_double_weak ( arg , & dest ) )"		151023	1					
ANR	151122	Condition	"! zend_parse_arg_double_weak ( arg , & dest )"	701:7:21634:21672	151023	0	True				
ANR	151123	UnaryOperationExpression	"! zend_parse_arg_double_weak ( arg , & dest )"		151023	0					
ANR	151124	UnaryOperator	!		151023	0					
ANR	151125	CallExpression	"zend_parse_arg_double_weak ( arg , & dest )"		151023	1					
ANR	151126	Callee	zend_parse_arg_double_weak		151023	0					
ANR	151127	Identifier	zend_parse_arg_double_weak		151023	0					
ANR	151128	ArgumentList	arg		151023	1					
ANR	151129	Argument	arg		151023	0					
ANR	151130	Identifier	arg		151023	0					
ANR	151131	Argument	& dest		151023	1					
ANR	151132	UnaryOperationExpression	& dest		151023	0					
ANR	151133	UnaryOperator	&		151023	0					
ANR	151134	Identifier	dest		151023	1					
ANR	151135	CompoundStatement		26:48:449:449	151023	1					
ANR	151136	ReturnStatement	return 0 ;	702:4:21681:21689	151023	0	True				
ANR	151137	PrimaryExpression	0		151023	0					
ANR	151138	ExpressionStatement	zval_ptr_dtor ( arg )	704:3:21699:21717	151023	2	True				
ANR	151139	CallExpression	zval_ptr_dtor ( arg )		151023	0					
ANR	151140	Callee	zval_ptr_dtor		151023	0					
ANR	151141	Identifier	zval_ptr_dtor		151023	0					
ANR	151142	ArgumentList	arg		151023	1					
ANR	151143	Argument	arg		151023	0					
ANR	151144	Identifier	arg		151023	0					
ANR	151145	ExpressionStatement	"ZVAL_DOUBLE ( arg , dest )"	705:3:21722:21744	151023	3	True				
ANR	151146	CallExpression	"ZVAL_DOUBLE ( arg , dest )"		151023	0					
ANR	151147	Callee	ZVAL_DOUBLE		151023	0					
ANR	151148	Identifier	ZVAL_DOUBLE		151023	0					
ANR	151149	ArgumentList	arg		151023	1					
ANR	151150	Argument	arg		151023	0					
ANR	151151	Identifier	arg		151023	0					
ANR	151152	Argument	dest		151023	1					
ANR	151153	Identifier	dest		151023	0					
ANR	151154	ReturnStatement	return 1 ;	706:3:21749:21757	151023	4	True				
ANR	151155	PrimaryExpression	1		151023	0					
ANR	151156	Label	case IS_STRING :	708:2:21765:21779	151023	6	True				
ANR	151157	Identifier	IS_STRING		151023	0					
ANR	151158	CompoundStatement		34:3:560:577	151023	7					
ANR	151159	IdentifierDeclStatement	zend_string * dest ;	709:3:21786:21803	151023	0	True				
ANR	151160	IdentifierDecl	* dest		151023	0					
ANR	151161	IdentifierDeclType	zend_string *		151023	0					
ANR	151162	Identifier	dest		151023	1					
ANR	151163	IfStatement	"if ( ! zend_parse_arg_str_weak ( arg , & dest ) )"		151023	1					
ANR	151164	Condition	"! zend_parse_arg_str_weak ( arg , & dest )"	712:7:21865:21900	151023	0	True				
ANR	151165	UnaryOperationExpression	"! zend_parse_arg_str_weak ( arg , & dest )"		151023	0					
ANR	151166	UnaryOperator	!		151023	0					
ANR	151167	CallExpression	"zend_parse_arg_str_weak ( arg , & dest )"		151023	1					
ANR	151168	Callee	zend_parse_arg_str_weak		151023	0					
ANR	151169	Identifier	zend_parse_arg_str_weak		151023	0					
ANR	151170	ArgumentList	arg		151023	1					
ANR	151171	Argument	arg		151023	0					
ANR	151172	Identifier	arg		151023	0					
ANR	151173	Argument	& dest		151023	1					
ANR	151174	UnaryOperationExpression	& dest		151023	0					
ANR	151175	UnaryOperator	&		151023	0					
ANR	151176	Identifier	dest		151023	1					
ANR	151177	CompoundStatement		37:45:677:677	151023	1					
ANR	151178	ReturnStatement	return 0 ;	713:4:21909:21917	151023	0	True				
ANR	151179	PrimaryExpression	0		151023	0					
ANR	151180	ReturnStatement	return 1 ;	715:3:21927:21935	151023	2	True				
ANR	151181	PrimaryExpression	1		151023	0					
ANR	151182	Label	default :	717:2:21943:21950	151023	8	True				
ANR	151183	Identifier	default		151023	0					
ANR	151184	ReturnStatement	return 0 ;	718:3:21955:21963	151023	9	True				
ANR	151185	PrimaryExpression	0		151023	0					
ANR	151186	ReturnType	static zend_bool		151023	1					
ANR	151187	Identifier	zend_verify_weak_scalar_type_hint		151023	2					
ANR	151188	ParameterList	"zend_uchar type_hint , zval * arg"		151023	3					
ANR	151189	Parameter	zend_uchar type_hint	675:51:21192:21211	151023	0	True				
ANR	151190	ParameterType	zend_uchar		151023	0					
ANR	151191	Identifier	type_hint		151023	1					
ANR	151192	Parameter	zval * arg	675:73:21214:21222	151023	1	True				
ANR	151193	ParameterType	zval *		151023	0					
ANR	151194	Identifier	arg		151023	1					
ANR	151195	CFGEntryNode	ENTRY		151023		True				
ANR	151196	CFGExitNode	EXIT		151023		True				
ANR	151197	Symbol	zend_parse_arg_long_weak		151023						
ANR	151198	Symbol	type_hint		151023						
ANR	151199	Symbol	zend_parse_arg_double_weak		151023						
ANR	151200	Symbol	& dest		151023						
ANR	151201	Symbol	zend_parse_arg_bool_weak		151023						
ANR	151202	Symbol	arg		151023						
ANR	151203	Symbol	dest		151023						
ANR	151204	Symbol	zend_parse_arg_str_weak		151023						
ANR	151205	Function	zend_verify_scalar_type_hint	722:0:21971:22451							
ANR	151206	FunctionDef	"zend_verify_scalar_type_hint (zend_uchar type_hint , zval * arg , zend_bool strict)"		151205	0					
ANR	151207	CompoundStatement		723:0:22068:22451	151205	0					
ANR	151208	IfStatement	if ( UNEXPECTED ( strict ) )		151205	0					
ANR	151209	Condition	UNEXPECTED ( strict )	724:5:22075:22092	151205	0	True				
ANR	151210	CallExpression	UNEXPECTED ( strict )		151205	0					
ANR	151211	Callee	UNEXPECTED		151205	0					
ANR	151212	Identifier	UNEXPECTED		151205	0					
ANR	151213	ArgumentList	strict		151205	1					
ANR	151214	Argument	strict		151205	0					
ANR	151215	Identifier	strict		151205	0					
ANR	151216	CompoundStatement		2:25:26:26	151205	1					
ANR	151217	IfStatement	if ( type_hint != IS_DOUBLE || Z_TYPE_P ( arg ) != IS_LONG )		151205	0					
ANR	151218	Condition	type_hint != IS_DOUBLE || Z_TYPE_P ( arg ) != IS_LONG	726:6:22176:22225	151205	0	True				
ANR	151219	OrExpression	type_hint != IS_DOUBLE || Z_TYPE_P ( arg ) != IS_LONG		151205	0		||			
ANR	151220	EqualityExpression	type_hint != IS_DOUBLE		151205	0		!=			
ANR	151221	Identifier	type_hint		151205	0					
ANR	151222	Identifier	IS_DOUBLE		151205	1					
ANR	151223	EqualityExpression	Z_TYPE_P ( arg ) != IS_LONG		151205	1		!=			
ANR	151224	CallExpression	Z_TYPE_P ( arg )		151205	0					
ANR	151225	Callee	Z_TYPE_P		151205	0					
ANR	151226	Identifier	Z_TYPE_P		151205	0					
ANR	151227	ArgumentList	arg		151205	1					
ANR	151228	Argument	arg		151205	0					
ANR	151229	Identifier	arg		151205	0					
ANR	151230	Identifier	IS_LONG		151205	1					
ANR	151231	CompoundStatement		4:58:159:159	151205	1					
ANR	151232	ReturnStatement	return 0 ;	727:3:22233:22241	151205	0	True				
ANR	151233	PrimaryExpression	0		151205	0					
ANR	151234	ElseStatement	else		151205	0					
ANR	151235	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( arg ) == IS_NULL ) )		151205	0					
ANR	151236	Condition	UNEXPECTED ( Z_TYPE_P ( arg ) == IS_NULL )	729:12:22259:22294	151205	0	True				
ANR	151237	CallExpression	UNEXPECTED ( Z_TYPE_P ( arg ) == IS_NULL )		151205	0					
ANR	151238	Callee	UNEXPECTED		151205	0					
ANR	151239	Identifier	UNEXPECTED		151205	0					
ANR	151240	ArgumentList	Z_TYPE_P ( arg ) == IS_NULL		151205	1					
ANR	151241	Argument	Z_TYPE_P ( arg ) == IS_NULL		151205	0					
ANR	151242	EqualityExpression	Z_TYPE_P ( arg ) == IS_NULL		151205	0		==			
ANR	151243	CallExpression	Z_TYPE_P ( arg )		151205	0					
ANR	151244	Callee	Z_TYPE_P		151205	0					
ANR	151245	Identifier	Z_TYPE_P		151205	0					
ANR	151246	ArgumentList	arg		151205	1					
ANR	151247	Argument	arg		151205	0					
ANR	151248	Identifier	arg		151205	0					
ANR	151249	Identifier	IS_NULL		151205	1					
ANR	151250	CompoundStatement		7:50:228:228	151205	1					
ANR	151251	ReturnStatement	return 0 ;	731:2:22379:22387	151205	0	True				
ANR	151252	PrimaryExpression	0		151205	0					
ANR	151253	ReturnStatement	"return zend_verify_weak_scalar_type_hint ( type_hint , arg ) ;"	733:1:22393:22449	151205	1	True				
ANR	151254	CallExpression	"zend_verify_weak_scalar_type_hint ( type_hint , arg )"		151205	0					
ANR	151255	Callee	zend_verify_weak_scalar_type_hint		151205	0					
ANR	151256	Identifier	zend_verify_weak_scalar_type_hint		151205	0					
ANR	151257	ArgumentList	type_hint		151205	1					
ANR	151258	Argument	type_hint		151205	0					
ANR	151259	Identifier	type_hint		151205	0					
ANR	151260	Argument	arg		151205	1					
ANR	151261	Identifier	arg		151205	0					
ANR	151262	ReturnType	static zend_bool		151205	1					
ANR	151263	Identifier	zend_verify_scalar_type_hint		151205	2					
ANR	151264	ParameterList	"zend_uchar type_hint , zval * arg , zend_bool strict"		151205	3					
ANR	151265	Parameter	zend_uchar type_hint	722:46:22017:22036	151205	0	True				
ANR	151266	ParameterType	zend_uchar		151205	0					
ANR	151267	Identifier	type_hint		151205	1					
ANR	151268	Parameter	zval * arg	722:68:22039:22047	151205	1	True				
ANR	151269	ParameterType	zval *		151205	0					
ANR	151270	Identifier	arg		151205	1					
ANR	151271	Parameter	zend_bool strict	722:79:22050:22065	151205	2	True				
ANR	151272	ParameterType	zend_bool		151205	0					
ANR	151273	Identifier	strict		151205	1					
ANR	151274	CFGEntryNode	ENTRY		151205		True				
ANR	151275	CFGExitNode	EXIT		151205		True				
ANR	151276	Symbol	UNEXPECTED		151205						
ANR	151277	Symbol	type_hint		151205						
ANR	151278	Symbol	IS_NULL		151205						
ANR	151279	Symbol	IS_LONG		151205						
ANR	151280	Symbol	arg		151205						
ANR	151281	Symbol	IS_DOUBLE		151205						
ANR	151282	Symbol	zend_verify_weak_scalar_type_hint		151205						
ANR	151283	Symbol	strict		151205						
ANR	151284	Symbol	Z_TYPE_P		151205						
ANR	151285	Function	zend_verify_internal_arg_type	736:0:22454:24425							
ANR	151286	FunctionDef	"zend_verify_internal_arg_type (zend_function * zf , uint32_t arg_num , zval * arg)"		151285	0					
ANR	151287	CompoundStatement		737:0:22543:24425	151285	0					
ANR	151288	IdentifierDeclStatement	zend_internal_arg_info * cur_arg_info ;	738:1:22546:22582	151285	0	True				
ANR	151289	IdentifierDecl	* cur_arg_info		151285	0					
ANR	151290	IdentifierDeclType	zend_internal_arg_info *		151285	0					
ANR	151291	Identifier	cur_arg_info		151285	1					
ANR	151292	IdentifierDeclStatement	"char * need_msg , * class_name ;"	739:1:22585:22612	151285	1	True				
ANR	151293	IdentifierDecl	* need_msg		151285	0					
ANR	151294	IdentifierDeclType	char *		151285	0					
ANR	151295	Identifier	need_msg		151285	1					
ANR	151296	IdentifierDecl	* class_name		151285	1					
ANR	151297	IdentifierDeclType	char *		151285	0					
ANR	151298	Identifier	class_name		151285	1					
ANR	151299	IdentifierDeclStatement	zend_class_entry * ce ;	740:1:22615:22635	151285	2	True				
ANR	151300	IdentifierDecl	* ce		151285	0					
ANR	151301	IdentifierDeclType	zend_class_entry *		151285	0					
ANR	151302	Identifier	ce		151285	1					
ANR	151303	IfStatement	if ( EXPECTED ( arg_num <= zf -> internal_function . num_args ) )		151285	3					
ANR	151304	Condition	EXPECTED ( arg_num <= zf -> internal_function . num_args )	742:5:22643:22693	151285	0	True				
ANR	151305	CallExpression	EXPECTED ( arg_num <= zf -> internal_function . num_args )		151285	0					
ANR	151306	Callee	EXPECTED		151285	0					
ANR	151307	Identifier	EXPECTED		151285	0					
ANR	151308	ArgumentList	arg_num <= zf -> internal_function . num_args		151285	1					
ANR	151309	Argument	arg_num <= zf -> internal_function . num_args		151285	0					
ANR	151310	RelationalExpression	arg_num <= zf -> internal_function . num_args		151285	0		<=			
ANR	151311	Identifier	arg_num		151285	0					
ANR	151312	MemberAccess	zf -> internal_function . num_args		151285	1					
ANR	151313	PtrMemberAccess	zf -> internal_function		151285	0					
ANR	151314	Identifier	zf		151285	0					
ANR	151315	Identifier	internal_function		151285	1					
ANR	151316	Identifier	num_args		151285	1					
ANR	151317	CompoundStatement		6:58:152:152	151285	1					
ANR	151318	ExpressionStatement	cur_arg_info = & zf -> internal_function . arg_info [ arg_num - 1 ]	743:2:22700:22757	151285	0	True				
ANR	151319	AssignmentExpression	cur_arg_info = & zf -> internal_function . arg_info [ arg_num - 1 ]		151285	0		=			
ANR	151320	Identifier	cur_arg_info		151285	0					
ANR	151321	UnaryOperationExpression	& zf -> internal_function . arg_info [ arg_num - 1 ]		151285	1					
ANR	151322	UnaryOperator	&		151285	0					
ANR	151323	ArrayIndexing	zf -> internal_function . arg_info [ arg_num - 1 ]		151285	1					
ANR	151324	MemberAccess	zf -> internal_function . arg_info		151285	0					
ANR	151325	PtrMemberAccess	zf -> internal_function		151285	0					
ANR	151326	Identifier	zf		151285	0					
ANR	151327	Identifier	internal_function		151285	1					
ANR	151328	Identifier	arg_info		151285	1					
ANR	151329	AdditiveExpression	arg_num - 1		151285	1		-			
ANR	151330	Identifier	arg_num		151285	0					
ANR	151331	PrimaryExpression	1		151285	1					
ANR	151332	ElseStatement	else		151285	0					
ANR	151333	IfStatement	if ( zf -> internal_function . fn_flags & ZEND_ACC_VARIADIC )		151285	0					
ANR	151334	Condition	zf -> internal_function . fn_flags & ZEND_ACC_VARIADIC	744:12:22771:22820	151285	0	True				
ANR	151335	BitAndExpression	zf -> internal_function . fn_flags & ZEND_ACC_VARIADIC		151285	0		&			
ANR	151336	MemberAccess	zf -> internal_function . fn_flags		151285	0					
ANR	151337	PtrMemberAccess	zf -> internal_function		151285	0					
ANR	151338	Identifier	zf		151285	0					
ANR	151339	Identifier	internal_function		151285	1					
ANR	151340	Identifier	fn_flags		151285	1					
ANR	151341	Identifier	ZEND_ACC_VARIADIC		151285	1					
ANR	151342	CompoundStatement		8:64:279:279	151285	1					
ANR	151343	ExpressionStatement	cur_arg_info = & zf -> internal_function . arg_info [ zf -> internal_function . num_args ]	745:2:22827:22905	151285	0	True				
ANR	151344	AssignmentExpression	cur_arg_info = & zf -> internal_function . arg_info [ zf -> internal_function . num_args ]		151285	0		=			
ANR	151345	Identifier	cur_arg_info		151285	0					
ANR	151346	UnaryOperationExpression	& zf -> internal_function . arg_info [ zf -> internal_function . num_args ]		151285	1					
ANR	151347	UnaryOperator	&		151285	0					
ANR	151348	ArrayIndexing	zf -> internal_function . arg_info [ zf -> internal_function . num_args ]		151285	1					
ANR	151349	MemberAccess	zf -> internal_function . arg_info		151285	0					
ANR	151350	PtrMemberAccess	zf -> internal_function		151285	0					
ANR	151351	Identifier	zf		151285	0					
ANR	151352	Identifier	internal_function		151285	1					
ANR	151353	Identifier	arg_info		151285	1					
ANR	151354	MemberAccess	zf -> internal_function . num_args		151285	1					
ANR	151355	PtrMemberAccess	zf -> internal_function		151285	0					
ANR	151356	Identifier	zf		151285	0					
ANR	151357	Identifier	internal_function		151285	1					
ANR	151358	Identifier	num_args		151285	1					
ANR	151359	ElseStatement	else		151285	0					
ANR	151360	CompoundStatement		10:8:371:371	151285	0					
ANR	151361	ReturnStatement	return 1 ;	747:2:22919:22927	151285	0	True				
ANR	151362	PrimaryExpression	1		151285	0					
ANR	151363	IfStatement	if ( cur_arg_info -> type_hint )		151285	4					
ANR	151364	Condition	cur_arg_info -> type_hint	750:5:22938:22960	151285	0	True				
ANR	151365	PtrMemberAccess	cur_arg_info -> type_hint		151285	0					
ANR	151366	Identifier	cur_arg_info		151285	0					
ANR	151367	Identifier	type_hint		151285	1					
ANR	151368	CompoundStatement		14:30:419:419	151285	1					
ANR	151369	ExpressionStatement	ZVAL_DEREF ( arg )	751:2:22967:22982	151285	0	True				
ANR	151370	CallExpression	ZVAL_DEREF ( arg )		151285	0					
ANR	151371	Callee	ZVAL_DEREF		151285	0					
ANR	151372	Identifier	ZVAL_DEREF		151285	0					
ANR	151373	ArgumentList	arg		151285	1					
ANR	151374	Argument	arg		151285	0					
ANR	151375	Identifier	arg		151285	0					
ANR	151376	IfStatement	if ( EXPECTED ( cur_arg_info -> type_hint == Z_TYPE_P ( arg ) ) )		151285	1					
ANR	151377	Condition	EXPECTED ( cur_arg_info -> type_hint == Z_TYPE_P ( arg ) )	752:6:22990:23039	151285	0	True				
ANR	151378	CallExpression	EXPECTED ( cur_arg_info -> type_hint == Z_TYPE_P ( arg ) )		151285	0					
ANR	151379	Callee	EXPECTED		151285	0					
ANR	151380	Identifier	EXPECTED		151285	0					
ANR	151381	ArgumentList	cur_arg_info -> type_hint == Z_TYPE_P ( arg )		151285	1					
ANR	151382	Argument	cur_arg_info -> type_hint == Z_TYPE_P ( arg )		151285	0					
ANR	151383	EqualityExpression	cur_arg_info -> type_hint == Z_TYPE_P ( arg )		151285	0		==			
ANR	151384	PtrMemberAccess	cur_arg_info -> type_hint		151285	0					
ANR	151385	Identifier	cur_arg_info		151285	0					
ANR	151386	Identifier	type_hint		151285	1					
ANR	151387	CallExpression	Z_TYPE_P ( arg )		151285	1					
ANR	151388	Callee	Z_TYPE_P		151285	0					
ANR	151389	Identifier	Z_TYPE_P		151285	0					
ANR	151390	ArgumentList	arg		151285	1					
ANR	151391	Argument	arg		151285	0					
ANR	151392	Identifier	arg		151285	0					
ANR	151393	CompoundStatement		16:58:498:498	151285	1					
ANR	151394	IfStatement	if ( cur_arg_info -> class_name )		151285	0					
ANR	151395	Condition	cur_arg_info -> class_name	753:7:23051:23074	151285	0	True				
ANR	151396	PtrMemberAccess	cur_arg_info -> class_name		151285	0					
ANR	151397	Identifier	cur_arg_info		151285	0					
ANR	151398	Identifier	class_name		151285	1					
ANR	151399	CompoundStatement		17:33:533:533	151285	1					
ANR	151400	ExpressionStatement	"need_msg = zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) cur_arg_info , & class_name , & ce )"	754:4:23083:23186	151285	0	True				
ANR	151401	AssignmentExpression	"need_msg = zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) cur_arg_info , & class_name , & ce )"		151285	0		=			
ANR	151402	Identifier	need_msg		151285	0					
ANR	151403	CallExpression	"zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) cur_arg_info , & class_name , & ce )"		151285	1					
ANR	151404	Callee	zend_verify_internal_arg_class_kind		151285	0					
ANR	151405	Identifier	zend_verify_internal_arg_class_kind		151285	0					
ANR	151406	ArgumentList	( zend_internal_arg_info * ) cur_arg_info		151285	1					
ANR	151407	Argument	( zend_internal_arg_info * ) cur_arg_info		151285	0					
ANR	151408	CastExpression	( zend_internal_arg_info * ) cur_arg_info		151285	0					
ANR	151409	CastTarget	zend_internal_arg_info *		151285	0					
ANR	151410	Identifier	cur_arg_info		151285	1					
ANR	151411	Argument	& class_name		151285	1					
ANR	151412	UnaryOperationExpression	& class_name		151285	0					
ANR	151413	UnaryOperator	&		151285	0					
ANR	151414	Identifier	class_name		151285	1					
ANR	151415	Argument	& ce		151285	2					
ANR	151416	UnaryOperationExpression	& ce		151285	0					
ANR	151417	UnaryOperator	&		151285	0					
ANR	151418	Identifier	ce		151285	1					
ANR	151419	IfStatement	"if ( ! ce || ! instanceof_function ( Z_OBJCE_P ( arg ) , ce ) )"		151285	1					
ANR	151420	Condition	"! ce || ! instanceof_function ( Z_OBJCE_P ( arg ) , ce )"	755:8:23196:23242	151285	0	True				
ANR	151421	OrExpression	"! ce || ! instanceof_function ( Z_OBJCE_P ( arg ) , ce )"		151285	0		||			
ANR	151422	UnaryOperationExpression	! ce		151285	0					
ANR	151423	UnaryOperator	!		151285	0					
ANR	151424	Identifier	ce		151285	1					
ANR	151425	UnaryOperationExpression	"! instanceof_function ( Z_OBJCE_P ( arg ) , ce )"		151285	1					
ANR	151426	UnaryOperator	!		151285	0					
ANR	151427	CallExpression	"instanceof_function ( Z_OBJCE_P ( arg ) , ce )"		151285	1					
ANR	151428	Callee	instanceof_function		151285	0					
ANR	151429	Identifier	instanceof_function		151285	0					
ANR	151430	ArgumentList	Z_OBJCE_P ( arg )		151285	1					
ANR	151431	Argument	Z_OBJCE_P ( arg )		151285	0					
ANR	151432	CallExpression	Z_OBJCE_P ( arg )		151285	0					
ANR	151433	Callee	Z_OBJCE_P		151285	0					
ANR	151434	Identifier	Z_OBJCE_P		151285	0					
ANR	151435	ArgumentList	arg		151285	1					
ANR	151436	Argument	arg		151285	0					
ANR	151437	Identifier	arg		151285	0					
ANR	151438	Argument	ce		151285	1					
ANR	151439	Identifier	ce		151285	0					
ANR	151440	CompoundStatement		19:57:701:701	151285	1					
ANR	151441	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , need_msg , class_name , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name ) , arg )"	756:5:23252:23361	151285	0	True				
ANR	151442	CallExpression	"zend_verify_arg_error ( zf , arg_num , need_msg , class_name , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name ) , arg )"		151285	0					
ANR	151443	Callee	zend_verify_arg_error		151285	0					
ANR	151444	Identifier	zend_verify_arg_error		151285	0					
ANR	151445	ArgumentList	zf		151285	1					
ANR	151446	Argument	zf		151285	0					
ANR	151447	Identifier	zf		151285	0					
ANR	151448	Argument	arg_num		151285	1					
ANR	151449	Identifier	arg_num		151285	0					
ANR	151450	Argument	need_msg		151285	2					
ANR	151451	Identifier	need_msg		151285	0					
ANR	151452	Argument	class_name		151285	3					
ANR	151453	Identifier	class_name		151285	0					
ANR	151454	Argument	"""instance of """		151285	4					
ANR	151455	PrimaryExpression	"""instance of """		151285	0					
ANR	151456	Argument	ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name )		151285	5					
ANR	151457	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name )		151285	0					
ANR	151458	Callee	ZSTR_VAL		151285	0					
ANR	151459	Identifier	ZSTR_VAL		151285	0					
ANR	151460	ArgumentList	Z_OBJCE_P ( arg ) -> name		151285	1					
ANR	151461	Argument	Z_OBJCE_P ( arg ) -> name		151285	0					
ANR	151462	PtrMemberAccess	Z_OBJCE_P ( arg ) -> name		151285	0					
ANR	151463	CallExpression	Z_OBJCE_P ( arg )		151285	0					
ANR	151464	Callee	Z_OBJCE_P		151285	0					
ANR	151465	Identifier	Z_OBJCE_P		151285	0					
ANR	151466	ArgumentList	arg		151285	1					
ANR	151467	Argument	arg		151285	0					
ANR	151468	Identifier	arg		151285	0					
ANR	151469	Identifier	name		151285	1					
ANR	151470	Argument	arg		151285	6					
ANR	151471	Identifier	arg		151285	0					
ANR	151472	ReturnStatement	return 0 ;	757:5:23368:23376	151285	1	True				
ANR	151473	PrimaryExpression	0		151285	0					
ANR	151474	ElseStatement	else		151285	0					
ANR	151475	IfStatement	if ( Z_TYPE_P ( arg ) != IS_NULL || ! cur_arg_info -> allow_null )		151285	0					
ANR	151476	Condition	Z_TYPE_P ( arg ) != IS_NULL || ! cur_arg_info -> allow_null	760:13:23402:23454	151285	0	True				
ANR	151477	OrExpression	Z_TYPE_P ( arg ) != IS_NULL || ! cur_arg_info -> allow_null		151285	0		||			
ANR	151478	EqualityExpression	Z_TYPE_P ( arg ) != IS_NULL		151285	0		!=			
ANR	151479	CallExpression	Z_TYPE_P ( arg )		151285	0					
ANR	151480	Callee	Z_TYPE_P		151285	0					
ANR	151481	Identifier	Z_TYPE_P		151285	0					
ANR	151482	ArgumentList	arg		151285	1					
ANR	151483	Argument	arg		151285	0					
ANR	151484	Identifier	arg		151285	0					
ANR	151485	Identifier	IS_NULL		151285	1					
ANR	151486	UnaryOperationExpression	! cur_arg_info -> allow_null		151285	1					
ANR	151487	UnaryOperator	!		151285	0					
ANR	151488	PtrMemberAccess	cur_arg_info -> allow_null		151285	1					
ANR	151489	Identifier	cur_arg_info		151285	0					
ANR	151490	Identifier	allow_null		151285	1					
ANR	151491	CompoundStatement		24:68:913:913	151285	1					
ANR	151492	IfStatement	if ( cur_arg_info -> class_name )		151285	0					
ANR	151493	Condition	cur_arg_info -> class_name	761:7:23466:23489	151285	0	True				
ANR	151494	PtrMemberAccess	cur_arg_info -> class_name		151285	0					
ANR	151495	Identifier	cur_arg_info		151285	0					
ANR	151496	Identifier	class_name		151285	1					
ANR	151497	CompoundStatement		25:33:948:948	151285	1					
ANR	151498	ExpressionStatement	"need_msg = zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) cur_arg_info , & class_name , & ce )"	762:4:23498:23601	151285	0	True				
ANR	151499	AssignmentExpression	"need_msg = zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) cur_arg_info , & class_name , & ce )"		151285	0		=			
ANR	151500	Identifier	need_msg		151285	0					
ANR	151501	CallExpression	"zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) cur_arg_info , & class_name , & ce )"		151285	1					
ANR	151502	Callee	zend_verify_internal_arg_class_kind		151285	0					
ANR	151503	Identifier	zend_verify_internal_arg_class_kind		151285	0					
ANR	151504	ArgumentList	( zend_internal_arg_info * ) cur_arg_info		151285	1					
ANR	151505	Argument	( zend_internal_arg_info * ) cur_arg_info		151285	0					
ANR	151506	CastExpression	( zend_internal_arg_info * ) cur_arg_info		151285	0					
ANR	151507	CastTarget	zend_internal_arg_info *		151285	0					
ANR	151508	Identifier	cur_arg_info		151285	1					
ANR	151509	Argument	& class_name		151285	1					
ANR	151510	UnaryOperationExpression	& class_name		151285	0					
ANR	151511	UnaryOperator	&		151285	0					
ANR	151512	Identifier	class_name		151285	1					
ANR	151513	Argument	& ce		151285	2					
ANR	151514	UnaryOperationExpression	& ce		151285	0					
ANR	151515	UnaryOperator	&		151285	0					
ANR	151516	Identifier	ce		151285	1					
ANR	151517	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , need_msg , class_name , zend_zval_type_name ( arg ) , """" , arg )"	763:4:23607:23698	151285	1	True				
ANR	151518	CallExpression	"zend_verify_arg_error ( zf , arg_num , need_msg , class_name , zend_zval_type_name ( arg ) , """" , arg )"		151285	0					
ANR	151519	Callee	zend_verify_arg_error		151285	0					
ANR	151520	Identifier	zend_verify_arg_error		151285	0					
ANR	151521	ArgumentList	zf		151285	1					
ANR	151522	Argument	zf		151285	0					
ANR	151523	Identifier	zf		151285	0					
ANR	151524	Argument	arg_num		151285	1					
ANR	151525	Identifier	arg_num		151285	0					
ANR	151526	Argument	need_msg		151285	2					
ANR	151527	Identifier	need_msg		151285	0					
ANR	151528	Argument	class_name		151285	3					
ANR	151529	Identifier	class_name		151285	0					
ANR	151530	Argument	zend_zval_type_name ( arg )		151285	4					
ANR	151531	CallExpression	zend_zval_type_name ( arg )		151285	0					
ANR	151532	Callee	zend_zval_type_name		151285	0					
ANR	151533	Identifier	zend_zval_type_name		151285	0					
ANR	151534	ArgumentList	arg		151285	1					
ANR	151535	Argument	arg		151285	0					
ANR	151536	Identifier	arg		151285	0					
ANR	151537	Argument	""""""		151285	5					
ANR	151538	PrimaryExpression	""""""		151285	0					
ANR	151539	Argument	arg		151285	6					
ANR	151540	Identifier	arg		151285	0					
ANR	151541	ReturnStatement	return 0 ;	764:4:23704:23712	151285	2	True				
ANR	151542	PrimaryExpression	0		151285	0					
ANR	151543	ElseStatement	else		151285	0					
ANR	151544	IfStatement	if ( cur_arg_info -> type_hint == IS_CALLABLE )		151285	0					
ANR	151545	Condition	cur_arg_info -> type_hint == IS_CALLABLE	765:14:23728:23765	151285	0	True				
ANR	151546	EqualityExpression	cur_arg_info -> type_hint == IS_CALLABLE		151285	0		==			
ANR	151547	PtrMemberAccess	cur_arg_info -> type_hint		151285	0					
ANR	151548	Identifier	cur_arg_info		151285	0					
ANR	151549	Identifier	type_hint		151285	1					
ANR	151550	Identifier	IS_CALLABLE		151285	1					
ANR	151551	CompoundStatement		29:54:1224:1224	151285	1					
ANR	151552	IfStatement	"if ( ! zend_is_callable ( arg , IS_CALLABLE_CHECK_SILENT , NULL ) )"		151285	0					
ANR	151553	Condition	"! zend_is_callable ( arg , IS_CALLABLE_CHECK_SILENT , NULL )"	766:8:23778:23831	151285	0	True				
ANR	151554	UnaryOperationExpression	"! zend_is_callable ( arg , IS_CALLABLE_CHECK_SILENT , NULL )"		151285	0					
ANR	151555	UnaryOperator	!		151285	0					
ANR	151556	CallExpression	"zend_is_callable ( arg , IS_CALLABLE_CHECK_SILENT , NULL )"		151285	1					
ANR	151557	Callee	zend_is_callable		151285	0					
ANR	151558	Identifier	zend_is_callable		151285	0					
ANR	151559	ArgumentList	arg		151285	1					
ANR	151560	Argument	arg		151285	0					
ANR	151561	Identifier	arg		151285	0					
ANR	151562	Argument	IS_CALLABLE_CHECK_SILENT		151285	1					
ANR	151563	Identifier	IS_CALLABLE_CHECK_SILENT		151285	0					
ANR	151564	Argument	NULL		151285	2					
ANR	151565	Identifier	NULL		151285	0					
ANR	151566	CompoundStatement		30:64:1290:1290	151285	1					
ANR	151567	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be callable"" , """" , zend_zval_type_name ( arg ) , """" , arg )"	767:5:23841:23929	151285	0	True				
ANR	151568	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be callable"" , """" , zend_zval_type_name ( arg ) , """" , arg )"		151285	0					
ANR	151569	Callee	zend_verify_arg_error		151285	0					
ANR	151570	Identifier	zend_verify_arg_error		151285	0					
ANR	151571	ArgumentList	zf		151285	1					
ANR	151572	Argument	zf		151285	0					
ANR	151573	Identifier	zf		151285	0					
ANR	151574	Argument	arg_num		151285	1					
ANR	151575	Identifier	arg_num		151285	0					
ANR	151576	Argument	"""be callable"""		151285	2					
ANR	151577	PrimaryExpression	"""be callable"""		151285	0					
ANR	151578	Argument	""""""		151285	3					
ANR	151579	PrimaryExpression	""""""		151285	0					
ANR	151580	Argument	zend_zval_type_name ( arg )		151285	4					
ANR	151581	CallExpression	zend_zval_type_name ( arg )		151285	0					
ANR	151582	Callee	zend_zval_type_name		151285	0					
ANR	151583	Identifier	zend_zval_type_name		151285	0					
ANR	151584	ArgumentList	arg		151285	1					
ANR	151585	Argument	arg		151285	0					
ANR	151586	Identifier	arg		151285	0					
ANR	151587	Argument	""""""		151285	5					
ANR	151588	PrimaryExpression	""""""		151285	0					
ANR	151589	Argument	arg		151285	6					
ANR	151590	Identifier	arg		151285	0					
ANR	151591	ReturnStatement	return 0 ;	768:5:23936:23944	151285	1	True				
ANR	151592	PrimaryExpression	0		151285	0					
ANR	151593	ElseStatement	else		151285	0					
ANR	151594	IfStatement	if ( cur_arg_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE ) )		151285	0					
ANR	151595	Condition	cur_arg_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE )	770:14:23966:24081	151285	0	True				
ANR	151596	AndExpression	cur_arg_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE )		151285	0		&&			
ANR	151597	EqualityExpression	cur_arg_info -> type_hint == _IS_BOOL		151285	0		==			
ANR	151598	PtrMemberAccess	cur_arg_info -> type_hint		151285	0					
ANR	151599	Identifier	cur_arg_info		151285	0					
ANR	151600	Identifier	type_hint		151285	1					
ANR	151601	Identifier	_IS_BOOL		151285	1					
ANR	151602	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE )		151285	1					
ANR	151603	Callee	EXPECTED		151285	0					
ANR	151604	Identifier	EXPECTED		151285	0					
ANR	151605	ArgumentList	Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE		151285	1					
ANR	151606	Argument	Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE		151285	0					
ANR	151607	OrExpression	Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE		151285	0		||			
ANR	151608	EqualityExpression	Z_TYPE_P ( arg ) == IS_FALSE		151285	0		==			
ANR	151609	CallExpression	Z_TYPE_P ( arg )		151285	0					
ANR	151610	Callee	Z_TYPE_P		151285	0					
ANR	151611	Identifier	Z_TYPE_P		151285	0					
ANR	151612	ArgumentList	arg		151285	1					
ANR	151613	Argument	arg		151285	0					
ANR	151614	Identifier	arg		151285	0					
ANR	151615	Identifier	IS_FALSE		151285	1					
ANR	151616	EqualityExpression	Z_TYPE_P ( arg ) == IS_TRUE		151285	1		==			
ANR	151617	CallExpression	Z_TYPE_P ( arg )		151285	0					
ANR	151618	Callee	Z_TYPE_P		151285	0					
ANR	151619	Identifier	Z_TYPE_P		151285	0					
ANR	151620	ArgumentList	arg		151285	1					
ANR	151621	Argument	arg		151285	0					
ANR	151622	Identifier	arg		151285	0					
ANR	151623	Identifier	IS_TRUE		151285	1					
ANR	151624	CompoundStatement		35:79:1540:1540	151285	1					
ANR	151625	ElseStatement	else		151285	0					
ANR	151626	IfStatement	"if ( UNEXPECTED ( ! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_CALL_USES_STRICT_TYPES ( EG ( current_execute_data ) ) ) ) )"		151285	0					
ANR	151627	Condition	"UNEXPECTED ( ! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_CALL_USES_STRICT_TYPES ( EG ( current_execute_data ) ) ) )"	773:14:24115:24240	151285	0	True				
ANR	151628	CallExpression	"UNEXPECTED ( ! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_CALL_USES_STRICT_TYPES ( EG ( current_execute_data ) ) ) )"		151285	0					
ANR	151629	Callee	UNEXPECTED		151285	0					
ANR	151630	Identifier	UNEXPECTED		151285	0					
ANR	151631	ArgumentList	"! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_CALL_USES_STRICT_TYPES ( EG ( current_execute_data ) ) )"		151285	1					
ANR	151632	Argument	"! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_CALL_USES_STRICT_TYPES ( EG ( current_execute_data ) ) )"		151285	0					
ANR	151633	UnaryOperationExpression	"! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_CALL_USES_STRICT_TYPES ( EG ( current_execute_data ) ) )"		151285	0					
ANR	151634	UnaryOperator	!		151285	0					
ANR	151635	CallExpression	"zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_CALL_USES_STRICT_TYPES ( EG ( current_execute_data ) ) )"		151285	1					
ANR	151636	Callee	zend_verify_scalar_type_hint		151285	0					
ANR	151637	Identifier	zend_verify_scalar_type_hint		151285	0					
ANR	151638	ArgumentList	cur_arg_info -> type_hint		151285	1					
ANR	151639	Argument	cur_arg_info -> type_hint		151285	0					
ANR	151640	PtrMemberAccess	cur_arg_info -> type_hint		151285	0					
ANR	151641	Identifier	cur_arg_info		151285	0					
ANR	151642	Identifier	type_hint		151285	1					
ANR	151643	Argument	arg		151285	1					
ANR	151644	Identifier	arg		151285	0					
ANR	151645	Argument	ZEND_CALL_USES_STRICT_TYPES ( EG ( current_execute_data ) )		151285	2					
ANR	151646	CallExpression	ZEND_CALL_USES_STRICT_TYPES ( EG ( current_execute_data ) )		151285	0					
ANR	151647	Callee	ZEND_CALL_USES_STRICT_TYPES		151285	0					
ANR	151648	Identifier	ZEND_CALL_USES_STRICT_TYPES		151285	0					
ANR	151649	ArgumentList	EG ( current_execute_data )		151285	1					
ANR	151650	Argument	EG ( current_execute_data )		151285	0					
ANR	151651	CallExpression	EG ( current_execute_data )		151285	0					
ANR	151652	Callee	EG		151285	0					
ANR	151653	Identifier	EG		151285	0					
ANR	151654	ArgumentList	current_execute_data		151285	1					
ANR	151655	Argument	current_execute_data		151285	0					
ANR	151656	Identifier	current_execute_data		151285	0					
ANR	151657	CompoundStatement		37:142:1699:1699	151285	1					
ANR	151658	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be of the type "" , zend_get_type_by_const ( cur_arg_info -> type_hint ) , zend_zval_type_name ( arg ) , """" , arg )"	774:4:24249:24386	151285	0	True				
ANR	151659	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be of the type "" , zend_get_type_by_const ( cur_arg_info -> type_hint ) , zend_zval_type_name ( arg ) , """" , arg )"		151285	0					
ANR	151660	Callee	zend_verify_arg_error		151285	0					
ANR	151661	Identifier	zend_verify_arg_error		151285	0					
ANR	151662	ArgumentList	zf		151285	1					
ANR	151663	Argument	zf		151285	0					
ANR	151664	Identifier	zf		151285	0					
ANR	151665	Argument	arg_num		151285	1					
ANR	151666	Identifier	arg_num		151285	0					
ANR	151667	Argument	"""be of the type """		151285	2					
ANR	151668	PrimaryExpression	"""be of the type """		151285	0					
ANR	151669	Argument	zend_get_type_by_const ( cur_arg_info -> type_hint )		151285	3					
ANR	151670	CallExpression	zend_get_type_by_const ( cur_arg_info -> type_hint )		151285	0					
ANR	151671	Callee	zend_get_type_by_const		151285	0					
ANR	151672	Identifier	zend_get_type_by_const		151285	0					
ANR	151673	ArgumentList	cur_arg_info -> type_hint		151285	1					
ANR	151674	Argument	cur_arg_info -> type_hint		151285	0					
ANR	151675	PtrMemberAccess	cur_arg_info -> type_hint		151285	0					
ANR	151676	Identifier	cur_arg_info		151285	0					
ANR	151677	Identifier	type_hint		151285	1					
ANR	151678	Argument	zend_zval_type_name ( arg )		151285	4					
ANR	151679	CallExpression	zend_zval_type_name ( arg )		151285	0					
ANR	151680	Callee	zend_zval_type_name		151285	0					
ANR	151681	Identifier	zend_zval_type_name		151285	0					
ANR	151682	ArgumentList	arg		151285	1					
ANR	151683	Argument	arg		151285	0					
ANR	151684	Identifier	arg		151285	0					
ANR	151685	Argument	""""""		151285	5					
ANR	151686	PrimaryExpression	""""""		151285	0					
ANR	151687	Argument	arg		151285	6					
ANR	151688	Identifier	arg		151285	0					
ANR	151689	ReturnStatement	return 0 ;	775:4:24392:24400	151285	1	True				
ANR	151690	PrimaryExpression	0		151285	0					
ANR	151691	ReturnStatement	return 1 ;	779:1:24415:24423	151285	5	True				
ANR	151692	PrimaryExpression	1		151285	0					
ANR	151693	ReturnType	static int		151285	1					
ANR	151694	Identifier	zend_verify_internal_arg_type		151285	2					
ANR	151695	ParameterList	"zend_function * zf , uint32_t arg_num , zval * arg"		151285	3					
ANR	151696	Parameter	zend_function * zf	736:41:22495:22511	151285	0	True				
ANR	151697	ParameterType	zend_function *		151285	0					
ANR	151698	Identifier	zf		151285	1					
ANR	151699	Parameter	uint32_t arg_num	736:60:22514:22529	151285	1	True				
ANR	151700	ParameterType	uint32_t		151285	0					
ANR	151701	Identifier	arg_num		151285	1					
ANR	151702	Parameter	zval * arg	736:78:22532:22540	151285	2	True				
ANR	151703	ParameterType	zval *		151285	0					
ANR	151704	Identifier	arg		151285	1					
ANR	151705	CFGEntryNode	ENTRY		151285		True				
ANR	151706	CFGExitNode	EXIT		151285		True				
ANR	151707	Symbol	arg_num		151285						
ANR	151708	Symbol	instanceof_function		151285						
ANR	151709	Symbol	need_msg		151285						
ANR	151710	Symbol	current_execute_data		151285						
ANR	151711	Symbol	& class_name		151285						
ANR	151712	Symbol	zend_zval_type_name		151285						
ANR	151713	Symbol	cur_arg_info -> class_name		151285						
ANR	151714	Symbol	& ce		151285						
ANR	151715	Symbol	cur_arg_info -> allow_null		151285						
ANR	151716	Symbol	cur_arg_info		151285						
ANR	151717	Symbol	UNEXPECTED		151285						
ANR	151718	Symbol	* cur_arg_info		151285						
ANR	151719	Symbol	_IS_BOOL		151285						
ANR	151720	Symbol	ZEND_CALL_USES_STRICT_TYPES		151285						
ANR	151721	Symbol	IS_NULL		151285						
ANR	151722	Symbol	arg		151285						
ANR	151723	Symbol	zf -> internal_function		151285						
ANR	151724	Symbol	zf -> internal_function . arg_info		151285						
ANR	151725	Symbol	Z_OBJCE_P		151285						
ANR	151726	Symbol	cur_arg_info -> type_hint		151285						
ANR	151727	Symbol	class_name		151285						
ANR	151728	Symbol	IS_FALSE		151285						
ANR	151729	Symbol	* Z_OBJCE_P		151285						
ANR	151730	Symbol	IS_CALLABLE		151285						
ANR	151731	Symbol	zend_get_type_by_const		151285						
ANR	151732	Symbol	ce		151285						
ANR	151733	Symbol	EG		151285						
ANR	151734	Symbol	NULL		151285						
ANR	151735	Symbol	zf -> internal_function . num_args		151285						
ANR	151736	Symbol	zend_is_callable		151285						
ANR	151737	Symbol	IS_TRUE		151285						
ANR	151738	Symbol	zend_verify_internal_arg_class_kind		151285						
ANR	151739	Symbol	zf		151285						
ANR	151740	Symbol	Z_TYPE_P		151285						
ANR	151741	Symbol	ZSTR_VAL		151285						
ANR	151742	Symbol	* zf		151285						
ANR	151743	Symbol	ZEND_ACC_VARIADIC		151285						
ANR	151744	Symbol	zend_verify_scalar_type_hint		151285						
ANR	151745	Symbol	Z_OBJCE_P ( arg ) -> name		151285						
ANR	151746	Symbol	IS_CALLABLE_CHECK_SILENT		151285						
ANR	151747	Symbol	EXPECTED		151285						
ANR	151748	Symbol	zf -> internal_function . fn_flags		151285						
ANR	151749	Function	zend_verify_arg_type	782:0:24428:27401							
ANR	151750	FunctionDef	"zend_verify_arg_type (zend_function * zf , uint32_t arg_num , zval * arg , zval * default_value , void * * cache_slot)"		151749	0					
ANR	151751	CompoundStatement		783:0:24567:27401	151749	0					
ANR	151752	IdentifierDeclStatement	zend_arg_info * cur_arg_info ;	784:1:24570:24597	151749	0	True				
ANR	151753	IdentifierDecl	* cur_arg_info		151749	0					
ANR	151754	IdentifierDeclType	zend_arg_info *		151749	0					
ANR	151755	Identifier	cur_arg_info		151749	1					
ANR	151756	IdentifierDeclStatement	char * need_msg ;	785:1:24600:24614	151749	1	True				
ANR	151757	IdentifierDecl	* need_msg		151749	0					
ANR	151758	IdentifierDeclType	char *		151749	0					
ANR	151759	Identifier	need_msg		151749	1					
ANR	151760	IdentifierDeclStatement	zend_class_entry * ce ;	786:1:24617:24637	151749	2	True				
ANR	151761	IdentifierDecl	* ce		151749	0					
ANR	151762	IdentifierDeclType	zend_class_entry *		151749	0					
ANR	151763	Identifier	ce		151749	1					
ANR	151764	IfStatement	if ( EXPECTED ( arg_num <= zf -> common . num_args ) )		151749	3					
ANR	151765	Condition	EXPECTED ( arg_num <= zf -> common . num_args )	788:5:24645:24684	151749	0	True				
ANR	151766	CallExpression	EXPECTED ( arg_num <= zf -> common . num_args )		151749	0					
ANR	151767	Callee	EXPECTED		151749	0					
ANR	151768	Identifier	EXPECTED		151749	0					
ANR	151769	ArgumentList	arg_num <= zf -> common . num_args		151749	1					
ANR	151770	Argument	arg_num <= zf -> common . num_args		151749	0					
ANR	151771	RelationalExpression	arg_num <= zf -> common . num_args		151749	0		<=			
ANR	151772	Identifier	arg_num		151749	0					
ANR	151773	MemberAccess	zf -> common . num_args		151749	1					
ANR	151774	PtrMemberAccess	zf -> common		151749	0					
ANR	151775	Identifier	zf		151749	0					
ANR	151776	Identifier	common		151749	1					
ANR	151777	Identifier	num_args		151749	1					
ANR	151778	CompoundStatement		6:47:119:119	151749	1					
ANR	151779	ExpressionStatement	cur_arg_info = & zf -> common . arg_info [ arg_num - 1 ]	789:2:24691:24737	151749	0	True				
ANR	151780	AssignmentExpression	cur_arg_info = & zf -> common . arg_info [ arg_num - 1 ]		151749	0		=			
ANR	151781	Identifier	cur_arg_info		151749	0					
ANR	151782	UnaryOperationExpression	& zf -> common . arg_info [ arg_num - 1 ]		151749	1					
ANR	151783	UnaryOperator	&		151749	0					
ANR	151784	ArrayIndexing	zf -> common . arg_info [ arg_num - 1 ]		151749	1					
ANR	151785	MemberAccess	zf -> common . arg_info		151749	0					
ANR	151786	PtrMemberAccess	zf -> common		151749	0					
ANR	151787	Identifier	zf		151749	0					
ANR	151788	Identifier	common		151749	1					
ANR	151789	Identifier	arg_info		151749	1					
ANR	151790	AdditiveExpression	arg_num - 1		151749	1		-			
ANR	151791	Identifier	arg_num		151749	0					
ANR	151792	PrimaryExpression	1		151749	1					
ANR	151793	ElseStatement	else		151749	0					
ANR	151794	IfStatement	if ( UNEXPECTED ( zf -> common . fn_flags & ZEND_ACC_VARIADIC ) )		151749	0					
ANR	151795	Condition	UNEXPECTED ( zf -> common . fn_flags & ZEND_ACC_VARIADIC )	790:12:24751:24801	151749	0	True				
ANR	151796	CallExpression	UNEXPECTED ( zf -> common . fn_flags & ZEND_ACC_VARIADIC )		151749	0					
ANR	151797	Callee	UNEXPECTED		151749	0					
ANR	151798	Identifier	UNEXPECTED		151749	0					
ANR	151799	ArgumentList	zf -> common . fn_flags & ZEND_ACC_VARIADIC		151749	1					
ANR	151800	Argument	zf -> common . fn_flags & ZEND_ACC_VARIADIC		151749	0					
ANR	151801	BitAndExpression	zf -> common . fn_flags & ZEND_ACC_VARIADIC		151749	0		&			
ANR	151802	MemberAccess	zf -> common . fn_flags		151749	0					
ANR	151803	PtrMemberAccess	zf -> common		151749	0					
ANR	151804	Identifier	zf		151749	0					
ANR	151805	Identifier	common		151749	1					
ANR	151806	Identifier	fn_flags		151749	1					
ANR	151807	Identifier	ZEND_ACC_VARIADIC		151749	1					
ANR	151808	CompoundStatement		8:65:236:236	151749	1					
ANR	151809	ExpressionStatement	cur_arg_info = & zf -> common . arg_info [ zf -> common . num_args ]	791:2:24808:24864	151749	0	True				
ANR	151810	AssignmentExpression	cur_arg_info = & zf -> common . arg_info [ zf -> common . num_args ]		151749	0		=			
ANR	151811	Identifier	cur_arg_info		151749	0					
ANR	151812	UnaryOperationExpression	& zf -> common . arg_info [ zf -> common . num_args ]		151749	1					
ANR	151813	UnaryOperator	&		151749	0					
ANR	151814	ArrayIndexing	zf -> common . arg_info [ zf -> common . num_args ]		151749	1					
ANR	151815	MemberAccess	zf -> common . arg_info		151749	0					
ANR	151816	PtrMemberAccess	zf -> common		151749	0					
ANR	151817	Identifier	zf		151749	0					
ANR	151818	Identifier	common		151749	1					
ANR	151819	Identifier	arg_info		151749	1					
ANR	151820	MemberAccess	zf -> common . num_args		151749	1					
ANR	151821	PtrMemberAccess	zf -> common		151749	0					
ANR	151822	Identifier	zf		151749	0					
ANR	151823	Identifier	common		151749	1					
ANR	151824	Identifier	num_args		151749	1					
ANR	151825	ElseStatement	else		151749	0					
ANR	151826	CompoundStatement		10:8:306:306	151749	0					
ANR	151827	ReturnStatement	return 1 ;	793:2:24878:24886	151749	0	True				
ANR	151828	PrimaryExpression	1		151749	0					
ANR	151829	IfStatement	if ( cur_arg_info -> type_hint )		151749	4					
ANR	151830	Condition	cur_arg_info -> type_hint	796:5:24897:24919	151749	0	True				
ANR	151831	PtrMemberAccess	cur_arg_info -> type_hint		151749	0					
ANR	151832	Identifier	cur_arg_info		151749	0					
ANR	151833	Identifier	type_hint		151749	1					
ANR	151834	CompoundStatement		14:30:354:354	151749	1					
ANR	151835	ExpressionStatement	ZVAL_DEREF ( arg )	797:2:24926:24941	151749	0	True				
ANR	151836	CallExpression	ZVAL_DEREF ( arg )		151749	0					
ANR	151837	Callee	ZVAL_DEREF		151749	0					
ANR	151838	Identifier	ZVAL_DEREF		151749	0					
ANR	151839	ArgumentList	arg		151749	1					
ANR	151840	Argument	arg		151749	0					
ANR	151841	Identifier	arg		151749	0					
ANR	151842	IfStatement	if ( EXPECTED ( cur_arg_info -> type_hint == Z_TYPE_P ( arg ) ) )		151749	1					
ANR	151843	Condition	EXPECTED ( cur_arg_info -> type_hint == Z_TYPE_P ( arg ) )	798:6:24949:24998	151749	0	True				
ANR	151844	CallExpression	EXPECTED ( cur_arg_info -> type_hint == Z_TYPE_P ( arg ) )		151749	0					
ANR	151845	Callee	EXPECTED		151749	0					
ANR	151846	Identifier	EXPECTED		151749	0					
ANR	151847	ArgumentList	cur_arg_info -> type_hint == Z_TYPE_P ( arg )		151749	1					
ANR	151848	Argument	cur_arg_info -> type_hint == Z_TYPE_P ( arg )		151749	0					
ANR	151849	EqualityExpression	cur_arg_info -> type_hint == Z_TYPE_P ( arg )		151749	0		==			
ANR	151850	PtrMemberAccess	cur_arg_info -> type_hint		151749	0					
ANR	151851	Identifier	cur_arg_info		151749	0					
ANR	151852	Identifier	type_hint		151749	1					
ANR	151853	CallExpression	Z_TYPE_P ( arg )		151749	1					
ANR	151854	Callee	Z_TYPE_P		151749	0					
ANR	151855	Identifier	Z_TYPE_P		151749	0					
ANR	151856	ArgumentList	arg		151749	1					
ANR	151857	Argument	arg		151749	0					
ANR	151858	Identifier	arg		151749	0					
ANR	151859	CompoundStatement		16:58:433:433	151749	1					
ANR	151860	IfStatement	if ( cur_arg_info -> class_name )		151749	0					
ANR	151861	Condition	cur_arg_info -> class_name	799:7:25010:25033	151749	0	True				
ANR	151862	PtrMemberAccess	cur_arg_info -> class_name		151749	0					
ANR	151863	Identifier	cur_arg_info		151749	0					
ANR	151864	Identifier	class_name		151749	1					
ANR	151865	CompoundStatement		17:33:468:468	151749	1					
ANR	151866	IfStatement	if ( EXPECTED ( * cache_slot ) )		151749	0					
ANR	151867	Condition	EXPECTED ( * cache_slot )	800:8:25046:25066	151749	0	True				
ANR	151868	CallExpression	EXPECTED ( * cache_slot )		151749	0					
ANR	151869	Callee	EXPECTED		151749	0					
ANR	151870	Identifier	EXPECTED		151749	0					
ANR	151871	ArgumentList	* cache_slot		151749	1					
ANR	151872	Argument	* cache_slot		151749	0					
ANR	151873	UnaryOperationExpression	* cache_slot		151749	0					
ANR	151874	UnaryOperator	*		151749	0					
ANR	151875	Identifier	cache_slot		151749	1					
ANR	151876	CompoundStatement		18:31:501:501	151749	1					
ANR	151877	ExpressionStatement	ce = ( zend_class_entry * ) * cache_slot	801:5:25076:25111	151749	0	True				
ANR	151878	AssignmentExpression	ce = ( zend_class_entry * ) * cache_slot		151749	0		=			
ANR	151879	Identifier	ce		151749	0					
ANR	151880	CastExpression	( zend_class_entry * ) * cache_slot		151749	1					
ANR	151881	CastTarget	zend_class_entry *		151749	0					
ANR	151882	UnaryOperationExpression	* cache_slot		151749	1					
ANR	151883	UnaryOperator	*		151749	0					
ANR	151884	Identifier	cache_slot		151749	1					
ANR	151885	ElseStatement	else		151749	0					
ANR	151886	CompoundStatement		20:11:556:556	151749	0					
ANR	151887	ExpressionStatement	ce = zend_verify_arg_class_kind ( cur_arg_info )	803:5:25131:25176	151749	0	True				
ANR	151888	AssignmentExpression	ce = zend_verify_arg_class_kind ( cur_arg_info )		151749	0		=			
ANR	151889	Identifier	ce		151749	0					
ANR	151890	CallExpression	zend_verify_arg_class_kind ( cur_arg_info )		151749	1					
ANR	151891	Callee	zend_verify_arg_class_kind		151749	0					
ANR	151892	Identifier	zend_verify_arg_class_kind		151749	0					
ANR	151893	ArgumentList	cur_arg_info		151749	1					
ANR	151894	Argument	cur_arg_info		151749	0					
ANR	151895	Identifier	cur_arg_info		151749	0					
ANR	151896	IfStatement	if ( UNEXPECTED ( ! ce ) )		151749	1					
ANR	151897	Condition	UNEXPECTED ( ! ce )	804:9:25187:25201	151749	0	True				
ANR	151898	CallExpression	UNEXPECTED ( ! ce )		151749	0					
ANR	151899	Callee	UNEXPECTED		151749	0					
ANR	151900	Identifier	UNEXPECTED		151749	0					
ANR	151901	ArgumentList	! ce		151749	1					
ANR	151902	Argument	! ce		151749	0					
ANR	151903	UnaryOperationExpression	! ce		151749	0					
ANR	151904	UnaryOperator	!		151749	0					
ANR	151905	Identifier	ce		151749	1					
ANR	151906	CompoundStatement		22:26:636:636	151749	1					
ANR	151907	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be an instance of "" , ZSTR_VAL ( cur_arg_info -> class_name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name ) , arg )"	805:6:25212:25357	151749	0	True				
ANR	151908	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be an instance of "" , ZSTR_VAL ( cur_arg_info -> class_name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name ) , arg )"		151749	0					
ANR	151909	Callee	zend_verify_arg_error		151749	0					
ANR	151910	Identifier	zend_verify_arg_error		151749	0					
ANR	151911	ArgumentList	zf		151749	1					
ANR	151912	Argument	zf		151749	0					
ANR	151913	Identifier	zf		151749	0					
ANR	151914	Argument	arg_num		151749	1					
ANR	151915	Identifier	arg_num		151749	0					
ANR	151916	Argument	"""be an instance of """		151749	2					
ANR	151917	PrimaryExpression	"""be an instance of """		151749	0					
ANR	151918	Argument	ZSTR_VAL ( cur_arg_info -> class_name )		151749	3					
ANR	151919	CallExpression	ZSTR_VAL ( cur_arg_info -> class_name )		151749	0					
ANR	151920	Callee	ZSTR_VAL		151749	0					
ANR	151921	Identifier	ZSTR_VAL		151749	0					
ANR	151922	ArgumentList	cur_arg_info -> class_name		151749	1					
ANR	151923	Argument	cur_arg_info -> class_name		151749	0					
ANR	151924	PtrMemberAccess	cur_arg_info -> class_name		151749	0					
ANR	151925	Identifier	cur_arg_info		151749	0					
ANR	151926	Identifier	class_name		151749	1					
ANR	151927	Argument	"""instance of """		151749	4					
ANR	151928	PrimaryExpression	"""instance of """		151749	0					
ANR	151929	Argument	ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name )		151749	5					
ANR	151930	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name )		151749	0					
ANR	151931	Callee	ZSTR_VAL		151749	0					
ANR	151932	Identifier	ZSTR_VAL		151749	0					
ANR	151933	ArgumentList	Z_OBJCE_P ( arg ) -> name		151749	1					
ANR	151934	Argument	Z_OBJCE_P ( arg ) -> name		151749	0					
ANR	151935	PtrMemberAccess	Z_OBJCE_P ( arg ) -> name		151749	0					
ANR	151936	CallExpression	Z_OBJCE_P ( arg )		151749	0					
ANR	151937	Callee	Z_OBJCE_P		151749	0					
ANR	151938	Identifier	Z_OBJCE_P		151749	0					
ANR	151939	ArgumentList	arg		151749	1					
ANR	151940	Argument	arg		151749	0					
ANR	151941	Identifier	arg		151749	0					
ANR	151942	Identifier	name		151749	1					
ANR	151943	Argument	arg		151749	6					
ANR	151944	Identifier	arg		151749	0					
ANR	151945	ReturnStatement	return 0 ;	806:6:25365:25373	151749	1	True				
ANR	151946	PrimaryExpression	0		151749	0					
ANR	151947	ExpressionStatement	* cache_slot = ( void * ) ce	808:5:25387:25410	151749	2	True				
ANR	151948	AssignmentExpression	* cache_slot = ( void * ) ce		151749	0		=			
ANR	151949	UnaryOperationExpression	* cache_slot		151749	0					
ANR	151950	UnaryOperator	*		151749	0					
ANR	151951	Identifier	cache_slot		151749	1					
ANR	151952	CastExpression	( void * ) ce		151749	1					
ANR	151953	CastTarget	void *		151749	0					
ANR	151954	Identifier	ce		151749	1					
ANR	151955	IfStatement	"if ( UNEXPECTED ( ! instanceof_function ( Z_OBJCE_P ( arg ) , ce ) ) )"		151749	1					
ANR	151956	Condition	"UNEXPECTED ( ! instanceof_function ( Z_OBJCE_P ( arg ) , ce ) )"	810:8:25426:25477	151749	0	True				
ANR	151957	CallExpression	"UNEXPECTED ( ! instanceof_function ( Z_OBJCE_P ( arg ) , ce ) )"		151749	0					
ANR	151958	Callee	UNEXPECTED		151749	0					
ANR	151959	Identifier	UNEXPECTED		151749	0					
ANR	151960	ArgumentList	"! instanceof_function ( Z_OBJCE_P ( arg ) , ce )"		151749	1					
ANR	151961	Argument	"! instanceof_function ( Z_OBJCE_P ( arg ) , ce )"		151749	0					
ANR	151962	UnaryOperationExpression	"! instanceof_function ( Z_OBJCE_P ( arg ) , ce )"		151749	0					
ANR	151963	UnaryOperator	!		151749	0					
ANR	151964	CallExpression	"instanceof_function ( Z_OBJCE_P ( arg ) , ce )"		151749	1					
ANR	151965	Callee	instanceof_function		151749	0					
ANR	151966	Identifier	instanceof_function		151749	0					
ANR	151967	ArgumentList	Z_OBJCE_P ( arg )		151749	1					
ANR	151968	Argument	Z_OBJCE_P ( arg )		151749	0					
ANR	151969	CallExpression	Z_OBJCE_P ( arg )		151749	0					
ANR	151970	Callee	Z_OBJCE_P		151749	0					
ANR	151971	Identifier	Z_OBJCE_P		151749	0					
ANR	151972	ArgumentList	arg		151749	1					
ANR	151973	Argument	arg		151749	0					
ANR	151974	Identifier	arg		151749	0					
ANR	151975	Argument	ce		151749	1					
ANR	151976	Identifier	ce		151749	0					
ANR	151977	CompoundStatement		28:62:912:912	151749	1					
ANR	151978	ExpressionStatement	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """	811:5:25487:25593	151749	0	True				
ANR	151979	AssignmentExpression	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		151749	0		=			
ANR	151980	Identifier	need_msg		151749	0					
ANR	151981	ConditionalExpression	"( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		151749	1					
ANR	151982	Condition	ce -> ce_flags & ZEND_ACC_INTERFACE		151749	0					
ANR	151983	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		151749	0		&			
ANR	151984	PtrMemberAccess	ce -> ce_flags		151749	0					
ANR	151985	Identifier	ce		151749	0					
ANR	151986	Identifier	ce_flags		151749	1					
ANR	151987	Identifier	ZEND_ACC_INTERFACE		151749	1					
ANR	151988	PrimaryExpression	"""implement interface """		151749	1					
ANR	151989	PrimaryExpression	"""be an instance of """		151749	2					
ANR	151990	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , need_msg , ZSTR_VAL ( ce -> name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name ) , arg )"	814:5:25600:25717	151749	1	True				
ANR	151991	CallExpression	"zend_verify_arg_error ( zf , arg_num , need_msg , ZSTR_VAL ( ce -> name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name ) , arg )"		151749	0					
ANR	151992	Callee	zend_verify_arg_error		151749	0					
ANR	151993	Identifier	zend_verify_arg_error		151749	0					
ANR	151994	ArgumentList	zf		151749	1					
ANR	151995	Argument	zf		151749	0					
ANR	151996	Identifier	zf		151749	0					
ANR	151997	Argument	arg_num		151749	1					
ANR	151998	Identifier	arg_num		151749	0					
ANR	151999	Argument	need_msg		151749	2					
ANR	152000	Identifier	need_msg		151749	0					
ANR	152001	Argument	ZSTR_VAL ( ce -> name )		151749	3					
ANR	152002	CallExpression	ZSTR_VAL ( ce -> name )		151749	0					
ANR	152003	Callee	ZSTR_VAL		151749	0					
ANR	152004	Identifier	ZSTR_VAL		151749	0					
ANR	152005	ArgumentList	ce -> name		151749	1					
ANR	152006	Argument	ce -> name		151749	0					
ANR	152007	PtrMemberAccess	ce -> name		151749	0					
ANR	152008	Identifier	ce		151749	0					
ANR	152009	Identifier	name		151749	1					
ANR	152010	Argument	"""instance of """		151749	4					
ANR	152011	PrimaryExpression	"""instance of """		151749	0					
ANR	152012	Argument	ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name )		151749	5					
ANR	152013	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name )		151749	0					
ANR	152014	Callee	ZSTR_VAL		151749	0					
ANR	152015	Identifier	ZSTR_VAL		151749	0					
ANR	152016	ArgumentList	Z_OBJCE_P ( arg ) -> name		151749	1					
ANR	152017	Argument	Z_OBJCE_P ( arg ) -> name		151749	0					
ANR	152018	PtrMemberAccess	Z_OBJCE_P ( arg ) -> name		151749	0					
ANR	152019	CallExpression	Z_OBJCE_P ( arg )		151749	0					
ANR	152020	Callee	Z_OBJCE_P		151749	0					
ANR	152021	Identifier	Z_OBJCE_P		151749	0					
ANR	152022	ArgumentList	arg		151749	1					
ANR	152023	Argument	arg		151749	0					
ANR	152024	Identifier	arg		151749	0					
ANR	152025	Identifier	name		151749	1					
ANR	152026	Argument	arg		151749	6					
ANR	152027	Identifier	arg		151749	0					
ANR	152028	ReturnStatement	return 0 ;	815:5:25724:25732	151749	2	True				
ANR	152029	PrimaryExpression	0		151749	0					
ANR	152030	ElseStatement	else		151749	0					
ANR	152031	IfStatement	if ( Z_TYPE_P ( arg ) != IS_NULL || ! ( cur_arg_info -> allow_null || ( default_value && is_null_constant ( default_value ) ) ) )		151749	0					
ANR	152032	Condition	Z_TYPE_P ( arg ) != IS_NULL || ! ( cur_arg_info -> allow_null || ( default_value && is_null_constant ( default_value ) ) )	818:13:25758:25866	151749	0	True				
ANR	152033	OrExpression	Z_TYPE_P ( arg ) != IS_NULL || ! ( cur_arg_info -> allow_null || ( default_value && is_null_constant ( default_value ) ) )		151749	0		||			
ANR	152034	EqualityExpression	Z_TYPE_P ( arg ) != IS_NULL		151749	0		!=			
ANR	152035	CallExpression	Z_TYPE_P ( arg )		151749	0					
ANR	152036	Callee	Z_TYPE_P		151749	0					
ANR	152037	Identifier	Z_TYPE_P		151749	0					
ANR	152038	ArgumentList	arg		151749	1					
ANR	152039	Argument	arg		151749	0					
ANR	152040	Identifier	arg		151749	0					
ANR	152041	Identifier	IS_NULL		151749	1					
ANR	152042	UnaryOperationExpression	! ( cur_arg_info -> allow_null || ( default_value && is_null_constant ( default_value ) ) )		151749	1					
ANR	152043	UnaryOperator	!		151749	0					
ANR	152044	OrExpression	cur_arg_info -> allow_null || ( default_value && is_null_constant ( default_value ) )		151749	1		||			
ANR	152045	PtrMemberAccess	cur_arg_info -> allow_null		151749	0					
ANR	152046	Identifier	cur_arg_info		151749	0					
ANR	152047	Identifier	allow_null		151749	1					
ANR	152048	AndExpression	default_value && is_null_constant ( default_value )		151749	1		&&			
ANR	152049	Identifier	default_value		151749	0					
ANR	152050	CallExpression	is_null_constant ( default_value )		151749	1					
ANR	152051	Callee	is_null_constant		151749	0					
ANR	152052	Identifier	is_null_constant		151749	0					
ANR	152053	ArgumentList	default_value		151749	1					
ANR	152054	Argument	default_value		151749	0					
ANR	152055	Identifier	default_value		151749	0					
ANR	152056	CompoundStatement		36:124:1301:1301	151749	1					
ANR	152057	IfStatement	if ( cur_arg_info -> class_name )		151749	0					
ANR	152058	Condition	cur_arg_info -> class_name	819:7:25878:25901	151749	0	True				
ANR	152059	PtrMemberAccess	cur_arg_info -> class_name		151749	0					
ANR	152060	Identifier	cur_arg_info		151749	0					
ANR	152061	Identifier	class_name		151749	1					
ANR	152062	CompoundStatement		37:33:1336:1336	151749	1					
ANR	152063	IfStatement	if ( EXPECTED ( * cache_slot ) )		151749	0					
ANR	152064	Condition	EXPECTED ( * cache_slot )	820:8:25914:25934	151749	0	True				
ANR	152065	CallExpression	EXPECTED ( * cache_slot )		151749	0					
ANR	152066	Callee	EXPECTED		151749	0					
ANR	152067	Identifier	EXPECTED		151749	0					
ANR	152068	ArgumentList	* cache_slot		151749	1					
ANR	152069	Argument	* cache_slot		151749	0					
ANR	152070	UnaryOperationExpression	* cache_slot		151749	0					
ANR	152071	UnaryOperator	*		151749	0					
ANR	152072	Identifier	cache_slot		151749	1					
ANR	152073	CompoundStatement		38:31:1369:1369	151749	1					
ANR	152074	ExpressionStatement	ce = ( zend_class_entry * ) * cache_slot	821:5:25944:25979	151749	0	True				
ANR	152075	AssignmentExpression	ce = ( zend_class_entry * ) * cache_slot		151749	0		=			
ANR	152076	Identifier	ce		151749	0					
ANR	152077	CastExpression	( zend_class_entry * ) * cache_slot		151749	1					
ANR	152078	CastTarget	zend_class_entry *		151749	0					
ANR	152079	UnaryOperationExpression	* cache_slot		151749	1					
ANR	152080	UnaryOperator	*		151749	0					
ANR	152081	Identifier	cache_slot		151749	1					
ANR	152082	ElseStatement	else		151749	0					
ANR	152083	CompoundStatement		40:11:1424:1424	151749	0					
ANR	152084	ExpressionStatement	ce = zend_verify_arg_class_kind ( cur_arg_info )	823:5:25999:26044	151749	0	True				
ANR	152085	AssignmentExpression	ce = zend_verify_arg_class_kind ( cur_arg_info )		151749	0		=			
ANR	152086	Identifier	ce		151749	0					
ANR	152087	CallExpression	zend_verify_arg_class_kind ( cur_arg_info )		151749	1					
ANR	152088	Callee	zend_verify_arg_class_kind		151749	0					
ANR	152089	Identifier	zend_verify_arg_class_kind		151749	0					
ANR	152090	ArgumentList	cur_arg_info		151749	1					
ANR	152091	Argument	cur_arg_info		151749	0					
ANR	152092	Identifier	cur_arg_info		151749	0					
ANR	152093	IfStatement	if ( UNEXPECTED ( ! ce ) )		151749	1					
ANR	152094	Condition	UNEXPECTED ( ! ce )	824:9:26055:26069	151749	0	True				
ANR	152095	CallExpression	UNEXPECTED ( ! ce )		151749	0					
ANR	152096	Callee	UNEXPECTED		151749	0					
ANR	152097	Identifier	UNEXPECTED		151749	0					
ANR	152098	ArgumentList	! ce		151749	1					
ANR	152099	Argument	! ce		151749	0					
ANR	152100	UnaryOperationExpression	! ce		151749	0					
ANR	152101	UnaryOperator	!		151749	0					
ANR	152102	Identifier	ce		151749	1					
ANR	152103	CompoundStatement		42:26:1504:1504	151749	1					
ANR	152104	IfStatement	if ( Z_TYPE_P ( arg ) == IS_OBJECT )		151749	0					
ANR	152105	Condition	Z_TYPE_P ( arg ) == IS_OBJECT	825:10:26084:26109	151749	0	True				
ANR	152106	EqualityExpression	Z_TYPE_P ( arg ) == IS_OBJECT		151749	0		==			
ANR	152107	CallExpression	Z_TYPE_P ( arg )		151749	0					
ANR	152108	Callee	Z_TYPE_P		151749	0					
ANR	152109	Identifier	Z_TYPE_P		151749	0					
ANR	152110	ArgumentList	arg		151749	1					
ANR	152111	Argument	arg		151749	0					
ANR	152112	Identifier	arg		151749	0					
ANR	152113	Identifier	IS_OBJECT		151749	1					
ANR	152114	CompoundStatement		43:38:1544:1544	151749	1					
ANR	152115	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be an instance of "" , ZSTR_VAL ( cur_arg_info -> class_name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name ) , arg )"	826:7:26121:26266	151749	0	True				
ANR	152116	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be an instance of "" , ZSTR_VAL ( cur_arg_info -> class_name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name ) , arg )"		151749	0					
ANR	152117	Callee	zend_verify_arg_error		151749	0					
ANR	152118	Identifier	zend_verify_arg_error		151749	0					
ANR	152119	ArgumentList	zf		151749	1					
ANR	152120	Argument	zf		151749	0					
ANR	152121	Identifier	zf		151749	0					
ANR	152122	Argument	arg_num		151749	1					
ANR	152123	Identifier	arg_num		151749	0					
ANR	152124	Argument	"""be an instance of """		151749	2					
ANR	152125	PrimaryExpression	"""be an instance of """		151749	0					
ANR	152126	Argument	ZSTR_VAL ( cur_arg_info -> class_name )		151749	3					
ANR	152127	CallExpression	ZSTR_VAL ( cur_arg_info -> class_name )		151749	0					
ANR	152128	Callee	ZSTR_VAL		151749	0					
ANR	152129	Identifier	ZSTR_VAL		151749	0					
ANR	152130	ArgumentList	cur_arg_info -> class_name		151749	1					
ANR	152131	Argument	cur_arg_info -> class_name		151749	0					
ANR	152132	PtrMemberAccess	cur_arg_info -> class_name		151749	0					
ANR	152133	Identifier	cur_arg_info		151749	0					
ANR	152134	Identifier	class_name		151749	1					
ANR	152135	Argument	"""instance of """		151749	4					
ANR	152136	PrimaryExpression	"""instance of """		151749	0					
ANR	152137	Argument	ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name )		151749	5					
ANR	152138	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( arg ) -> name )		151749	0					
ANR	152139	Callee	ZSTR_VAL		151749	0					
ANR	152140	Identifier	ZSTR_VAL		151749	0					
ANR	152141	ArgumentList	Z_OBJCE_P ( arg ) -> name		151749	1					
ANR	152142	Argument	Z_OBJCE_P ( arg ) -> name		151749	0					
ANR	152143	PtrMemberAccess	Z_OBJCE_P ( arg ) -> name		151749	0					
ANR	152144	CallExpression	Z_OBJCE_P ( arg )		151749	0					
ANR	152145	Callee	Z_OBJCE_P		151749	0					
ANR	152146	Identifier	Z_OBJCE_P		151749	0					
ANR	152147	ArgumentList	arg		151749	1					
ANR	152148	Argument	arg		151749	0					
ANR	152149	Identifier	arg		151749	0					
ANR	152150	Identifier	name		151749	1					
ANR	152151	Argument	arg		151749	6					
ANR	152152	Identifier	arg		151749	0					
ANR	152153	ElseStatement	else		151749	0					
ANR	152154	CompoundStatement		45:13:1713:1713	151749	0					
ANR	152155	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be an instance of "" , ZSTR_VAL ( cur_arg_info -> class_name ) , """" , zend_zval_type_name ( arg ) , arg )"	828:7:26290:26417	151749	0	True				
ANR	152156	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be an instance of "" , ZSTR_VAL ( cur_arg_info -> class_name ) , """" , zend_zval_type_name ( arg ) , arg )"		151749	0					
ANR	152157	Callee	zend_verify_arg_error		151749	0					
ANR	152158	Identifier	zend_verify_arg_error		151749	0					
ANR	152159	ArgumentList	zf		151749	1					
ANR	152160	Argument	zf		151749	0					
ANR	152161	Identifier	zf		151749	0					
ANR	152162	Argument	arg_num		151749	1					
ANR	152163	Identifier	arg_num		151749	0					
ANR	152164	Argument	"""be an instance of """		151749	2					
ANR	152165	PrimaryExpression	"""be an instance of """		151749	0					
ANR	152166	Argument	ZSTR_VAL ( cur_arg_info -> class_name )		151749	3					
ANR	152167	CallExpression	ZSTR_VAL ( cur_arg_info -> class_name )		151749	0					
ANR	152168	Callee	ZSTR_VAL		151749	0					
ANR	152169	Identifier	ZSTR_VAL		151749	0					
ANR	152170	ArgumentList	cur_arg_info -> class_name		151749	1					
ANR	152171	Argument	cur_arg_info -> class_name		151749	0					
ANR	152172	PtrMemberAccess	cur_arg_info -> class_name		151749	0					
ANR	152173	Identifier	cur_arg_info		151749	0					
ANR	152174	Identifier	class_name		151749	1					
ANR	152175	Argument	""""""		151749	4					
ANR	152176	PrimaryExpression	""""""		151749	0					
ANR	152177	Argument	zend_zval_type_name ( arg )		151749	5					
ANR	152178	CallExpression	zend_zval_type_name ( arg )		151749	0					
ANR	152179	Callee	zend_zval_type_name		151749	0					
ANR	152180	Identifier	zend_zval_type_name		151749	0					
ANR	152181	ArgumentList	arg		151749	1					
ANR	152182	Argument	arg		151749	0					
ANR	152183	Identifier	arg		151749	0					
ANR	152184	Argument	arg		151749	6					
ANR	152185	Identifier	arg		151749	0					
ANR	152186	ReturnStatement	return 0 ;	830:6:26433:26441	151749	1	True				
ANR	152187	PrimaryExpression	0		151749	0					
ANR	152188	ExpressionStatement	* cache_slot = ( void * ) ce	832:5:26455:26478	151749	2	True				
ANR	152189	AssignmentExpression	* cache_slot = ( void * ) ce		151749	0		=			
ANR	152190	UnaryOperationExpression	* cache_slot		151749	0					
ANR	152191	UnaryOperator	*		151749	0					
ANR	152192	Identifier	cache_slot		151749	1					
ANR	152193	CastExpression	( void * ) ce		151749	1					
ANR	152194	CastTarget	void *		151749	0					
ANR	152195	Identifier	ce		151749	1					
ANR	152196	ExpressionStatement	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """	834:4:26490:26594	151749	1	True				
ANR	152197	AssignmentExpression	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		151749	0		=			
ANR	152198	Identifier	need_msg		151749	0					
ANR	152199	ConditionalExpression	"( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		151749	1					
ANR	152200	Condition	ce -> ce_flags & ZEND_ACC_INTERFACE		151749	0					
ANR	152201	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		151749	0		&			
ANR	152202	PtrMemberAccess	ce -> ce_flags		151749	0					
ANR	152203	Identifier	ce		151749	0					
ANR	152204	Identifier	ce_flags		151749	1					
ANR	152205	Identifier	ZEND_ACC_INTERFACE		151749	1					
ANR	152206	PrimaryExpression	"""implement interface """		151749	1					
ANR	152207	PrimaryExpression	"""be an instance of """		151749	2					
ANR	152208	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , need_msg , ZSTR_VAL ( ce -> name ) , zend_zval_type_name ( arg ) , """" , arg )"	837:4:26600:26699	151749	2	True				
ANR	152209	CallExpression	"zend_verify_arg_error ( zf , arg_num , need_msg , ZSTR_VAL ( ce -> name ) , zend_zval_type_name ( arg ) , """" , arg )"		151749	0					
ANR	152210	Callee	zend_verify_arg_error		151749	0					
ANR	152211	Identifier	zend_verify_arg_error		151749	0					
ANR	152212	ArgumentList	zf		151749	1					
ANR	152213	Argument	zf		151749	0					
ANR	152214	Identifier	zf		151749	0					
ANR	152215	Argument	arg_num		151749	1					
ANR	152216	Identifier	arg_num		151749	0					
ANR	152217	Argument	need_msg		151749	2					
ANR	152218	Identifier	need_msg		151749	0					
ANR	152219	Argument	ZSTR_VAL ( ce -> name )		151749	3					
ANR	152220	CallExpression	ZSTR_VAL ( ce -> name )		151749	0					
ANR	152221	Callee	ZSTR_VAL		151749	0					
ANR	152222	Identifier	ZSTR_VAL		151749	0					
ANR	152223	ArgumentList	ce -> name		151749	1					
ANR	152224	Argument	ce -> name		151749	0					
ANR	152225	PtrMemberAccess	ce -> name		151749	0					
ANR	152226	Identifier	ce		151749	0					
ANR	152227	Identifier	name		151749	1					
ANR	152228	Argument	zend_zval_type_name ( arg )		151749	4					
ANR	152229	CallExpression	zend_zval_type_name ( arg )		151749	0					
ANR	152230	Callee	zend_zval_type_name		151749	0					
ANR	152231	Identifier	zend_zval_type_name		151749	0					
ANR	152232	ArgumentList	arg		151749	1					
ANR	152233	Argument	arg		151749	0					
ANR	152234	Identifier	arg		151749	0					
ANR	152235	Argument	""""""		151749	5					
ANR	152236	PrimaryExpression	""""""		151749	0					
ANR	152237	Argument	arg		151749	6					
ANR	152238	Identifier	arg		151749	0					
ANR	152239	ReturnStatement	return 0 ;	838:4:26705:26713	151749	3	True				
ANR	152240	PrimaryExpression	0		151749	0					
ANR	152241	ElseStatement	else		151749	0					
ANR	152242	IfStatement	if ( cur_arg_info -> type_hint == IS_CALLABLE )		151749	0					
ANR	152243	Condition	cur_arg_info -> type_hint == IS_CALLABLE	839:14:26729:26766	151749	0	True				
ANR	152244	EqualityExpression	cur_arg_info -> type_hint == IS_CALLABLE		151749	0		==			
ANR	152245	PtrMemberAccess	cur_arg_info -> type_hint		151749	0					
ANR	152246	Identifier	cur_arg_info		151749	0					
ANR	152247	Identifier	type_hint		151749	1					
ANR	152248	Identifier	IS_CALLABLE		151749	1					
ANR	152249	CompoundStatement		57:54:2201:2201	151749	1					
ANR	152250	IfStatement	"if ( ! zend_is_callable ( arg , IS_CALLABLE_CHECK_SILENT , NULL ) )"		151749	0					
ANR	152251	Condition	"! zend_is_callable ( arg , IS_CALLABLE_CHECK_SILENT , NULL )"	840:8:26779:26832	151749	0	True				
ANR	152252	UnaryOperationExpression	"! zend_is_callable ( arg , IS_CALLABLE_CHECK_SILENT , NULL )"		151749	0					
ANR	152253	UnaryOperator	!		151749	0					
ANR	152254	CallExpression	"zend_is_callable ( arg , IS_CALLABLE_CHECK_SILENT , NULL )"		151749	1					
ANR	152255	Callee	zend_is_callable		151749	0					
ANR	152256	Identifier	zend_is_callable		151749	0					
ANR	152257	ArgumentList	arg		151749	1					
ANR	152258	Argument	arg		151749	0					
ANR	152259	Identifier	arg		151749	0					
ANR	152260	Argument	IS_CALLABLE_CHECK_SILENT		151749	1					
ANR	152261	Identifier	IS_CALLABLE_CHECK_SILENT		151749	0					
ANR	152262	Argument	NULL		151749	2					
ANR	152263	Identifier	NULL		151749	0					
ANR	152264	CompoundStatement		58:64:2267:2267	151749	1					
ANR	152265	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be callable"" , """" , zend_zval_type_name ( arg ) , """" , arg )"	841:5:26842:26930	151749	0	True				
ANR	152266	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be callable"" , """" , zend_zval_type_name ( arg ) , """" , arg )"		151749	0					
ANR	152267	Callee	zend_verify_arg_error		151749	0					
ANR	152268	Identifier	zend_verify_arg_error		151749	0					
ANR	152269	ArgumentList	zf		151749	1					
ANR	152270	Argument	zf		151749	0					
ANR	152271	Identifier	zf		151749	0					
ANR	152272	Argument	arg_num		151749	1					
ANR	152273	Identifier	arg_num		151749	0					
ANR	152274	Argument	"""be callable"""		151749	2					
ANR	152275	PrimaryExpression	"""be callable"""		151749	0					
ANR	152276	Argument	""""""		151749	3					
ANR	152277	PrimaryExpression	""""""		151749	0					
ANR	152278	Argument	zend_zval_type_name ( arg )		151749	4					
ANR	152279	CallExpression	zend_zval_type_name ( arg )		151749	0					
ANR	152280	Callee	zend_zval_type_name		151749	0					
ANR	152281	Identifier	zend_zval_type_name		151749	0					
ANR	152282	ArgumentList	arg		151749	1					
ANR	152283	Argument	arg		151749	0					
ANR	152284	Identifier	arg		151749	0					
ANR	152285	Argument	""""""		151749	5					
ANR	152286	PrimaryExpression	""""""		151749	0					
ANR	152287	Argument	arg		151749	6					
ANR	152288	Identifier	arg		151749	0					
ANR	152289	ReturnStatement	return 0 ;	842:5:26937:26945	151749	1	True				
ANR	152290	PrimaryExpression	0		151749	0					
ANR	152291	ElseStatement	else		151749	0					
ANR	152292	IfStatement	if ( cur_arg_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE ) )		151749	0					
ANR	152293	Condition	cur_arg_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE )	844:14:26967:27082	151749	0	True				
ANR	152294	AndExpression	cur_arg_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE )		151749	0		&&			
ANR	152295	EqualityExpression	cur_arg_info -> type_hint == _IS_BOOL		151749	0		==			
ANR	152296	PtrMemberAccess	cur_arg_info -> type_hint		151749	0					
ANR	152297	Identifier	cur_arg_info		151749	0					
ANR	152298	Identifier	type_hint		151749	1					
ANR	152299	Identifier	_IS_BOOL		151749	1					
ANR	152300	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE )		151749	1					
ANR	152301	Callee	EXPECTED		151749	0					
ANR	152302	Identifier	EXPECTED		151749	0					
ANR	152303	ArgumentList	Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE		151749	1					
ANR	152304	Argument	Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE		151749	0					
ANR	152305	OrExpression	Z_TYPE_P ( arg ) == IS_FALSE || Z_TYPE_P ( arg ) == IS_TRUE		151749	0		||			
ANR	152306	EqualityExpression	Z_TYPE_P ( arg ) == IS_FALSE		151749	0		==			
ANR	152307	CallExpression	Z_TYPE_P ( arg )		151749	0					
ANR	152308	Callee	Z_TYPE_P		151749	0					
ANR	152309	Identifier	Z_TYPE_P		151749	0					
ANR	152310	ArgumentList	arg		151749	1					
ANR	152311	Argument	arg		151749	0					
ANR	152312	Identifier	arg		151749	0					
ANR	152313	Identifier	IS_FALSE		151749	1					
ANR	152314	EqualityExpression	Z_TYPE_P ( arg ) == IS_TRUE		151749	1		==			
ANR	152315	CallExpression	Z_TYPE_P ( arg )		151749	0					
ANR	152316	Callee	Z_TYPE_P		151749	0					
ANR	152317	Identifier	Z_TYPE_P		151749	0					
ANR	152318	ArgumentList	arg		151749	1					
ANR	152319	Argument	arg		151749	0					
ANR	152320	Identifier	arg		151749	0					
ANR	152321	Identifier	IS_TRUE		151749	1					
ANR	152322	CompoundStatement		63:79:2517:2517	151749	1					
ANR	152323	ElseStatement	else		151749	0					
ANR	152324	IfStatement	"if ( UNEXPECTED ( ! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_ARG_USES_STRICT_TYPES ( ) ) ) )"		151749	0					
ANR	152325	Condition	"UNEXPECTED ( ! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_ARG_USES_STRICT_TYPES ( ) ) )"	847:14:27116:27216	151749	0	True				
ANR	152326	CallExpression	"UNEXPECTED ( ! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_ARG_USES_STRICT_TYPES ( ) ) )"		151749	0					
ANR	152327	Callee	UNEXPECTED		151749	0					
ANR	152328	Identifier	UNEXPECTED		151749	0					
ANR	152329	ArgumentList	"! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_ARG_USES_STRICT_TYPES ( ) )"		151749	1					
ANR	152330	Argument	"! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_ARG_USES_STRICT_TYPES ( ) )"		151749	0					
ANR	152331	UnaryOperationExpression	"! zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_ARG_USES_STRICT_TYPES ( ) )"		151749	0					
ANR	152332	UnaryOperator	!		151749	0					
ANR	152333	CallExpression	"zend_verify_scalar_type_hint ( cur_arg_info -> type_hint , arg , ZEND_ARG_USES_STRICT_TYPES ( ) )"		151749	1					
ANR	152334	Callee	zend_verify_scalar_type_hint		151749	0					
ANR	152335	Identifier	zend_verify_scalar_type_hint		151749	0					
ANR	152336	ArgumentList	cur_arg_info -> type_hint		151749	1					
ANR	152337	Argument	cur_arg_info -> type_hint		151749	0					
ANR	152338	PtrMemberAccess	cur_arg_info -> type_hint		151749	0					
ANR	152339	Identifier	cur_arg_info		151749	0					
ANR	152340	Identifier	type_hint		151749	1					
ANR	152341	Argument	arg		151749	1					
ANR	152342	Identifier	arg		151749	0					
ANR	152343	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		151749	2					
ANR	152344	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		151749	0					
ANR	152345	Callee	ZEND_ARG_USES_STRICT_TYPES		151749	0					
ANR	152346	Identifier	ZEND_ARG_USES_STRICT_TYPES		151749	0					
ANR	152347	ArgumentList			151749	1					
ANR	152348	CompoundStatement		65:117:2651:2651	151749	1					
ANR	152349	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be of the type "" , zend_get_type_by_const ( cur_arg_info -> type_hint ) , zend_zval_type_name ( arg ) , """" , arg )"	848:4:27225:27362	151749	0	True				
ANR	152350	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be of the type "" , zend_get_type_by_const ( cur_arg_info -> type_hint ) , zend_zval_type_name ( arg ) , """" , arg )"		151749	0					
ANR	152351	Callee	zend_verify_arg_error		151749	0					
ANR	152352	Identifier	zend_verify_arg_error		151749	0					
ANR	152353	ArgumentList	zf		151749	1					
ANR	152354	Argument	zf		151749	0					
ANR	152355	Identifier	zf		151749	0					
ANR	152356	Argument	arg_num		151749	1					
ANR	152357	Identifier	arg_num		151749	0					
ANR	152358	Argument	"""be of the type """		151749	2					
ANR	152359	PrimaryExpression	"""be of the type """		151749	0					
ANR	152360	Argument	zend_get_type_by_const ( cur_arg_info -> type_hint )		151749	3					
ANR	152361	CallExpression	zend_get_type_by_const ( cur_arg_info -> type_hint )		151749	0					
ANR	152362	Callee	zend_get_type_by_const		151749	0					
ANR	152363	Identifier	zend_get_type_by_const		151749	0					
ANR	152364	ArgumentList	cur_arg_info -> type_hint		151749	1					
ANR	152365	Argument	cur_arg_info -> type_hint		151749	0					
ANR	152366	PtrMemberAccess	cur_arg_info -> type_hint		151749	0					
ANR	152367	Identifier	cur_arg_info		151749	0					
ANR	152368	Identifier	type_hint		151749	1					
ANR	152369	Argument	zend_zval_type_name ( arg )		151749	4					
ANR	152370	CallExpression	zend_zval_type_name ( arg )		151749	0					
ANR	152371	Callee	zend_zval_type_name		151749	0					
ANR	152372	Identifier	zend_zval_type_name		151749	0					
ANR	152373	ArgumentList	arg		151749	1					
ANR	152374	Argument	arg		151749	0					
ANR	152375	Identifier	arg		151749	0					
ANR	152376	Argument	""""""		151749	5					
ANR	152377	PrimaryExpression	""""""		151749	0					
ANR	152378	Argument	arg		151749	6					
ANR	152379	Identifier	arg		151749	0					
ANR	152380	ReturnStatement	return 0 ;	849:4:27368:27376	151749	1	True				
ANR	152381	PrimaryExpression	0		151749	0					
ANR	152382	ReturnStatement	return 1 ;	853:1:27391:27399	151749	5	True				
ANR	152383	PrimaryExpression	1		151749	0					
ANR	152384	ReturnType	static zend_always_inline int		151749	1					
ANR	152385	Identifier	zend_verify_arg_type		151749	2					
ANR	152386	ParameterList	"zend_function * zf , uint32_t arg_num , zval * arg , zval * default_value , void * * cache_slot"		151749	3					
ANR	152387	Parameter	zend_function * zf	782:51:24479:24495	151749	0	True				
ANR	152388	ParameterType	zend_function *		151749	0					
ANR	152389	Identifier	zf		151749	1					
ANR	152390	Parameter	uint32_t arg_num	782:70:24498:24513	151749	1	True				
ANR	152391	ParameterType	uint32_t		151749	0					
ANR	152392	Identifier	arg_num		151749	1					
ANR	152393	Parameter	zval * arg	782:88:24516:24524	151749	2	True				
ANR	152394	ParameterType	zval *		151749	0					
ANR	152395	Identifier	arg		151749	1					
ANR	152396	Parameter	zval * default_value	782:99:24527:24545	151749	3	True				
ANR	152397	ParameterType	zval *		151749	0					
ANR	152398	Identifier	default_value		151749	1					
ANR	152399	Parameter	void * * cache_slot	782:120:24548:24564	151749	4	True				
ANR	152400	ParameterType	void * *		151749	0					
ANR	152401	Identifier	cache_slot		151749	1					
ANR	152402	CFGEntryNode	ENTRY		151749		True				
ANR	152403	CFGExitNode	EXIT		151749		True				
ANR	152404	Symbol	arg_num		151749						
ANR	152405	Symbol	instanceof_function		151749						
ANR	152406	Symbol	need_msg		151749						
ANR	152407	Symbol	zf -> common . fn_flags		151749						
ANR	152408	Symbol	zf -> common . arg_info		151749						
ANR	152409	Symbol	zf -> common		151749						
ANR	152410	Symbol	* ce		151749						
ANR	152411	Symbol	zend_zval_type_name		151749						
ANR	152412	Symbol	cur_arg_info -> class_name		151749						
ANR	152413	Symbol	cur_arg_info -> allow_null		151749						
ANR	152414	Symbol	cur_arg_info		151749						
ANR	152415	Symbol	UNEXPECTED		151749						
ANR	152416	Symbol	* cur_arg_info		151749						
ANR	152417	Symbol	_IS_BOOL		151749						
ANR	152418	Symbol	IS_NULL		151749						
ANR	152419	Symbol	arg		151749						
ANR	152420	Symbol	Z_OBJCE_P		151749						
ANR	152421	Symbol	cur_arg_info -> type_hint		151749						
ANR	152422	Symbol	ZEND_ACC_INTERFACE		151749						
ANR	152423	Symbol	ce -> name		151749						
ANR	152424	Symbol	IS_FALSE		151749						
ANR	152425	Symbol	* Z_OBJCE_P		151749						
ANR	152426	Symbol	cache_slot		151749						
ANR	152427	Symbol	IS_CALLABLE		151749						
ANR	152428	Symbol	zend_get_type_by_const		151749						
ANR	152429	Symbol	ce		151749						
ANR	152430	Symbol	ZEND_ARG_USES_STRICT_TYPES		151749						
ANR	152431	Symbol	NULL		151749						
ANR	152432	Symbol	zf -> common . num_args		151749						
ANR	152433	Symbol	* cache_slot		151749						
ANR	152434	Symbol	zend_is_callable		151749						
ANR	152435	Symbol	IS_TRUE		151749						
ANR	152436	Symbol	default_value		151749						
ANR	152437	Symbol	zf		151749						
ANR	152438	Symbol	Z_TYPE_P		151749						
ANR	152439	Symbol	ZSTR_VAL		151749						
ANR	152440	Symbol	ce -> ce_flags		151749						
ANR	152441	Symbol	* zf		151749						
ANR	152442	Symbol	ZEND_ACC_VARIADIC		151749						
ANR	152443	Symbol	zend_verify_scalar_type_hint		151749						
ANR	152444	Symbol	Z_OBJCE_P ( arg ) -> name		151749						
ANR	152445	Symbol	is_null_constant		151749						
ANR	152446	Symbol	IS_CALLABLE_CHECK_SILENT		151749						
ANR	152447	Symbol	zend_verify_arg_class_kind		151749						
ANR	152448	Symbol	IS_OBJECT		151749						
ANR	152449	Symbol	EXPECTED		151749						
ANR	152450	Function	zend_verify_missing_arg_type	856:0:27404:28736							
ANR	152451	FunctionDef	"zend_verify_missing_arg_type (zend_function * zf , uint32_t arg_num , void * * cache_slot)"		152450	0					
ANR	152452	CompoundStatement		857:0:27519:28736	152450	0					
ANR	152453	IdentifierDeclStatement	zend_arg_info * cur_arg_info ;	858:1:27522:27549	152450	0	True				
ANR	152454	IdentifierDecl	* cur_arg_info		152450	0					
ANR	152455	IdentifierDeclType	zend_arg_info *		152450	0					
ANR	152456	Identifier	cur_arg_info		152450	1					
ANR	152457	IdentifierDeclStatement	char * need_msg ;	859:1:27552:27566	152450	1	True				
ANR	152458	IdentifierDecl	* need_msg		152450	0					
ANR	152459	IdentifierDeclType	char *		152450	0					
ANR	152460	Identifier	need_msg		152450	1					
ANR	152461	IdentifierDeclStatement	zend_class_entry * ce ;	860:1:27569:27589	152450	2	True				
ANR	152462	IdentifierDecl	* ce		152450	0					
ANR	152463	IdentifierDeclType	zend_class_entry *		152450	0					
ANR	152464	Identifier	ce		152450	1					
ANR	152465	IfStatement	if ( EXPECTED ( arg_num <= zf -> common . num_args ) )		152450	3					
ANR	152466	Condition	EXPECTED ( arg_num <= zf -> common . num_args )	862:5:27597:27636	152450	0	True				
ANR	152467	CallExpression	EXPECTED ( arg_num <= zf -> common . num_args )		152450	0					
ANR	152468	Callee	EXPECTED		152450	0					
ANR	152469	Identifier	EXPECTED		152450	0					
ANR	152470	ArgumentList	arg_num <= zf -> common . num_args		152450	1					
ANR	152471	Argument	arg_num <= zf -> common . num_args		152450	0					
ANR	152472	RelationalExpression	arg_num <= zf -> common . num_args		152450	0		<=			
ANR	152473	Identifier	arg_num		152450	0					
ANR	152474	MemberAccess	zf -> common . num_args		152450	1					
ANR	152475	PtrMemberAccess	zf -> common		152450	0					
ANR	152476	Identifier	zf		152450	0					
ANR	152477	Identifier	common		152450	1					
ANR	152478	Identifier	num_args		152450	1					
ANR	152479	CompoundStatement		6:47:119:119	152450	1					
ANR	152480	ExpressionStatement	cur_arg_info = & zf -> common . arg_info [ arg_num - 1 ]	863:2:27643:27689	152450	0	True				
ANR	152481	AssignmentExpression	cur_arg_info = & zf -> common . arg_info [ arg_num - 1 ]		152450	0		=			
ANR	152482	Identifier	cur_arg_info		152450	0					
ANR	152483	UnaryOperationExpression	& zf -> common . arg_info [ arg_num - 1 ]		152450	1					
ANR	152484	UnaryOperator	&		152450	0					
ANR	152485	ArrayIndexing	zf -> common . arg_info [ arg_num - 1 ]		152450	1					
ANR	152486	MemberAccess	zf -> common . arg_info		152450	0					
ANR	152487	PtrMemberAccess	zf -> common		152450	0					
ANR	152488	Identifier	zf		152450	0					
ANR	152489	Identifier	common		152450	1					
ANR	152490	Identifier	arg_info		152450	1					
ANR	152491	AdditiveExpression	arg_num - 1		152450	1		-			
ANR	152492	Identifier	arg_num		152450	0					
ANR	152493	PrimaryExpression	1		152450	1					
ANR	152494	ElseStatement	else		152450	0					
ANR	152495	IfStatement	if ( UNEXPECTED ( zf -> common . fn_flags & ZEND_ACC_VARIADIC ) )		152450	0					
ANR	152496	Condition	UNEXPECTED ( zf -> common . fn_flags & ZEND_ACC_VARIADIC )	864:12:27703:27753	152450	0	True				
ANR	152497	CallExpression	UNEXPECTED ( zf -> common . fn_flags & ZEND_ACC_VARIADIC )		152450	0					
ANR	152498	Callee	UNEXPECTED		152450	0					
ANR	152499	Identifier	UNEXPECTED		152450	0					
ANR	152500	ArgumentList	zf -> common . fn_flags & ZEND_ACC_VARIADIC		152450	1					
ANR	152501	Argument	zf -> common . fn_flags & ZEND_ACC_VARIADIC		152450	0					
ANR	152502	BitAndExpression	zf -> common . fn_flags & ZEND_ACC_VARIADIC		152450	0		&			
ANR	152503	MemberAccess	zf -> common . fn_flags		152450	0					
ANR	152504	PtrMemberAccess	zf -> common		152450	0					
ANR	152505	Identifier	zf		152450	0					
ANR	152506	Identifier	common		152450	1					
ANR	152507	Identifier	fn_flags		152450	1					
ANR	152508	Identifier	ZEND_ACC_VARIADIC		152450	1					
ANR	152509	CompoundStatement		8:65:236:236	152450	1					
ANR	152510	ExpressionStatement	cur_arg_info = & zf -> common . arg_info [ zf -> common . num_args ]	865:2:27760:27816	152450	0	True				
ANR	152511	AssignmentExpression	cur_arg_info = & zf -> common . arg_info [ zf -> common . num_args ]		152450	0		=			
ANR	152512	Identifier	cur_arg_info		152450	0					
ANR	152513	UnaryOperationExpression	& zf -> common . arg_info [ zf -> common . num_args ]		152450	1					
ANR	152514	UnaryOperator	&		152450	0					
ANR	152515	ArrayIndexing	zf -> common . arg_info [ zf -> common . num_args ]		152450	1					
ANR	152516	MemberAccess	zf -> common . arg_info		152450	0					
ANR	152517	PtrMemberAccess	zf -> common		152450	0					
ANR	152518	Identifier	zf		152450	0					
ANR	152519	Identifier	common		152450	1					
ANR	152520	Identifier	arg_info		152450	1					
ANR	152521	MemberAccess	zf -> common . num_args		152450	1					
ANR	152522	PtrMemberAccess	zf -> common		152450	0					
ANR	152523	Identifier	zf		152450	0					
ANR	152524	Identifier	common		152450	1					
ANR	152525	Identifier	num_args		152450	1					
ANR	152526	ElseStatement	else		152450	0					
ANR	152527	CompoundStatement		10:8:306:306	152450	0					
ANR	152528	ReturnStatement	return 1 ;	867:2:27830:27838	152450	0	True				
ANR	152529	PrimaryExpression	1		152450	0					
ANR	152530	IfStatement	if ( cur_arg_info -> type_hint )		152450	4					
ANR	152531	Condition	cur_arg_info -> type_hint	870:5:27849:27871	152450	0	True				
ANR	152532	PtrMemberAccess	cur_arg_info -> type_hint		152450	0					
ANR	152533	Identifier	cur_arg_info		152450	0					
ANR	152534	Identifier	type_hint		152450	1					
ANR	152535	CompoundStatement		14:30:354:354	152450	1					
ANR	152536	IfStatement	if ( cur_arg_info -> class_name )		152450	0					
ANR	152537	Condition	cur_arg_info -> class_name	871:6:27882:27905	152450	0	True				
ANR	152538	PtrMemberAccess	cur_arg_info -> class_name		152450	0					
ANR	152539	Identifier	cur_arg_info		152450	0					
ANR	152540	Identifier	class_name		152450	1					
ANR	152541	CompoundStatement		15:32:388:388	152450	1					
ANR	152542	IfStatement	if ( EXPECTED ( * cache_slot ) )		152450	0					
ANR	152543	Condition	EXPECTED ( * cache_slot )	872:7:27917:27937	152450	0	True				
ANR	152544	CallExpression	EXPECTED ( * cache_slot )		152450	0					
ANR	152545	Callee	EXPECTED		152450	0					
ANR	152546	Identifier	EXPECTED		152450	0					
ANR	152547	ArgumentList	* cache_slot		152450	1					
ANR	152548	Argument	* cache_slot		152450	0					
ANR	152549	UnaryOperationExpression	* cache_slot		152450	0					
ANR	152550	UnaryOperator	*		152450	0					
ANR	152551	Identifier	cache_slot		152450	1					
ANR	152552	CompoundStatement		16:30:420:420	152450	1					
ANR	152553	ExpressionStatement	ce = ( zend_class_entry * ) * cache_slot	873:4:27946:27981	152450	0	True				
ANR	152554	AssignmentExpression	ce = ( zend_class_entry * ) * cache_slot		152450	0		=			
ANR	152555	Identifier	ce		152450	0					
ANR	152556	CastExpression	( zend_class_entry * ) * cache_slot		152450	1					
ANR	152557	CastTarget	zend_class_entry *		152450	0					
ANR	152558	UnaryOperationExpression	* cache_slot		152450	1					
ANR	152559	UnaryOperator	*		152450	0					
ANR	152560	Identifier	cache_slot		152450	1					
ANR	152561	ElseStatement	else		152450	0					
ANR	152562	CompoundStatement		18:10:473:473	152450	0					
ANR	152563	ExpressionStatement	ce = zend_verify_arg_class_kind ( cur_arg_info )	875:4:27999:28044	152450	0	True				
ANR	152564	AssignmentExpression	ce = zend_verify_arg_class_kind ( cur_arg_info )		152450	0		=			
ANR	152565	Identifier	ce		152450	0					
ANR	152566	CallExpression	zend_verify_arg_class_kind ( cur_arg_info )		152450	1					
ANR	152567	Callee	zend_verify_arg_class_kind		152450	0					
ANR	152568	Identifier	zend_verify_arg_class_kind		152450	0					
ANR	152569	ArgumentList	cur_arg_info		152450	1					
ANR	152570	Argument	cur_arg_info		152450	0					
ANR	152571	Identifier	cur_arg_info		152450	0					
ANR	152572	IfStatement	if ( UNEXPECTED ( ! ce ) )		152450	1					
ANR	152573	Condition	UNEXPECTED ( ! ce )	876:8:28054:28068	152450	0	True				
ANR	152574	CallExpression	UNEXPECTED ( ! ce )		152450	0					
ANR	152575	Callee	UNEXPECTED		152450	0					
ANR	152576	Identifier	UNEXPECTED		152450	0					
ANR	152577	ArgumentList	! ce		152450	1					
ANR	152578	Argument	! ce		152450	0					
ANR	152579	UnaryOperationExpression	! ce		152450	0					
ANR	152580	UnaryOperator	!		152450	0					
ANR	152581	Identifier	ce		152450	1					
ANR	152582	CompoundStatement		20:25:551:551	152450	1					
ANR	152583	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be an instance of "" , ZSTR_VAL ( cur_arg_info -> class_name ) , ""none"" , """" , NULL )"	877:5:28078:28188	152450	0	True				
ANR	152584	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be an instance of "" , ZSTR_VAL ( cur_arg_info -> class_name ) , ""none"" , """" , NULL )"		152450	0					
ANR	152585	Callee	zend_verify_arg_error		152450	0					
ANR	152586	Identifier	zend_verify_arg_error		152450	0					
ANR	152587	ArgumentList	zf		152450	1					
ANR	152588	Argument	zf		152450	0					
ANR	152589	Identifier	zf		152450	0					
ANR	152590	Argument	arg_num		152450	1					
ANR	152591	Identifier	arg_num		152450	0					
ANR	152592	Argument	"""be an instance of """		152450	2					
ANR	152593	PrimaryExpression	"""be an instance of """		152450	0					
ANR	152594	Argument	ZSTR_VAL ( cur_arg_info -> class_name )		152450	3					
ANR	152595	CallExpression	ZSTR_VAL ( cur_arg_info -> class_name )		152450	0					
ANR	152596	Callee	ZSTR_VAL		152450	0					
ANR	152597	Identifier	ZSTR_VAL		152450	0					
ANR	152598	ArgumentList	cur_arg_info -> class_name		152450	1					
ANR	152599	Argument	cur_arg_info -> class_name		152450	0					
ANR	152600	PtrMemberAccess	cur_arg_info -> class_name		152450	0					
ANR	152601	Identifier	cur_arg_info		152450	0					
ANR	152602	Identifier	class_name		152450	1					
ANR	152603	Argument	"""none"""		152450	4					
ANR	152604	PrimaryExpression	"""none"""		152450	0					
ANR	152605	Argument	""""""		152450	5					
ANR	152606	PrimaryExpression	""""""		152450	0					
ANR	152607	Argument	NULL		152450	6					
ANR	152608	Identifier	NULL		152450	0					
ANR	152609	ReturnStatement	return 0 ;	878:5:28195:28203	152450	1	True				
ANR	152610	PrimaryExpression	0		152450	0					
ANR	152611	ExpressionStatement	* cache_slot = ( void * ) ce	880:4:28215:28238	152450	2	True				
ANR	152612	AssignmentExpression	* cache_slot = ( void * ) ce		152450	0		=			
ANR	152613	UnaryOperationExpression	* cache_slot		152450	0					
ANR	152614	UnaryOperator	*		152450	0					
ANR	152615	Identifier	cache_slot		152450	1					
ANR	152616	CastExpression	( void * ) ce		152450	1					
ANR	152617	CastTarget	void *		152450	0					
ANR	152618	Identifier	ce		152450	1					
ANR	152619	ExpressionStatement	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """	882:3:28248:28350	152450	1	True				
ANR	152620	AssignmentExpression	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		152450	0		=			
ANR	152621	Identifier	need_msg		152450	0					
ANR	152622	ConditionalExpression	"( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		152450	1					
ANR	152623	Condition	ce -> ce_flags & ZEND_ACC_INTERFACE		152450	0					
ANR	152624	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		152450	0		&			
ANR	152625	PtrMemberAccess	ce -> ce_flags		152450	0					
ANR	152626	Identifier	ce		152450	0					
ANR	152627	Identifier	ce_flags		152450	1					
ANR	152628	Identifier	ZEND_ACC_INTERFACE		152450	1					
ANR	152629	PrimaryExpression	"""implement interface """		152450	1					
ANR	152630	PrimaryExpression	"""be an instance of """		152450	2					
ANR	152631	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , need_msg , ZSTR_VAL ( ce -> name ) , ""none"" , """" , NULL )"	885:3:28355:28437	152450	2	True				
ANR	152632	CallExpression	"zend_verify_arg_error ( zf , arg_num , need_msg , ZSTR_VAL ( ce -> name ) , ""none"" , """" , NULL )"		152450	0					
ANR	152633	Callee	zend_verify_arg_error		152450	0					
ANR	152634	Identifier	zend_verify_arg_error		152450	0					
ANR	152635	ArgumentList	zf		152450	1					
ANR	152636	Argument	zf		152450	0					
ANR	152637	Identifier	zf		152450	0					
ANR	152638	Argument	arg_num		152450	1					
ANR	152639	Identifier	arg_num		152450	0					
ANR	152640	Argument	need_msg		152450	2					
ANR	152641	Identifier	need_msg		152450	0					
ANR	152642	Argument	ZSTR_VAL ( ce -> name )		152450	3					
ANR	152643	CallExpression	ZSTR_VAL ( ce -> name )		152450	0					
ANR	152644	Callee	ZSTR_VAL		152450	0					
ANR	152645	Identifier	ZSTR_VAL		152450	0					
ANR	152646	ArgumentList	ce -> name		152450	1					
ANR	152647	Argument	ce -> name		152450	0					
ANR	152648	PtrMemberAccess	ce -> name		152450	0					
ANR	152649	Identifier	ce		152450	0					
ANR	152650	Identifier	name		152450	1					
ANR	152651	Argument	"""none"""		152450	4					
ANR	152652	PrimaryExpression	"""none"""		152450	0					
ANR	152653	Argument	""""""		152450	5					
ANR	152654	PrimaryExpression	""""""		152450	0					
ANR	152655	Argument	NULL		152450	6					
ANR	152656	Identifier	NULL		152450	0					
ANR	152657	ElseStatement	else		152450	0					
ANR	152658	IfStatement	if ( cur_arg_info -> type_hint == IS_CALLABLE )		152450	0					
ANR	152659	Condition	cur_arg_info -> type_hint == IS_CALLABLE	886:13:28452:28489	152450	0	True				
ANR	152660	EqualityExpression	cur_arg_info -> type_hint == IS_CALLABLE		152450	0		==			
ANR	152661	PtrMemberAccess	cur_arg_info -> type_hint		152450	0					
ANR	152662	Identifier	cur_arg_info		152450	0					
ANR	152663	Identifier	type_hint		152450	1					
ANR	152664	Identifier	IS_CALLABLE		152450	1					
ANR	152665	CompoundStatement		30:53:972:972	152450	1					
ANR	152666	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be callable"" , """" , ""none"" , """" , NULL )"	887:3:28497:28568	152450	0	True				
ANR	152667	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be callable"" , """" , ""none"" , """" , NULL )"		152450	0					
ANR	152668	Callee	zend_verify_arg_error		152450	0					
ANR	152669	Identifier	zend_verify_arg_error		152450	0					
ANR	152670	ArgumentList	zf		152450	1					
ANR	152671	Argument	zf		152450	0					
ANR	152672	Identifier	zf		152450	0					
ANR	152673	Argument	arg_num		152450	1					
ANR	152674	Identifier	arg_num		152450	0					
ANR	152675	Argument	"""be callable"""		152450	2					
ANR	152676	PrimaryExpression	"""be callable"""		152450	0					
ANR	152677	Argument	""""""		152450	3					
ANR	152678	PrimaryExpression	""""""		152450	0					
ANR	152679	Argument	"""none"""		152450	4					
ANR	152680	PrimaryExpression	"""none"""		152450	0					
ANR	152681	Argument	""""""		152450	5					
ANR	152682	PrimaryExpression	""""""		152450	0					
ANR	152683	Argument	NULL		152450	6					
ANR	152684	Identifier	NULL		152450	0					
ANR	152685	ElseStatement	else		152450	0					
ANR	152686	CompoundStatement		32:9:1059:1059	152450	0					
ANR	152687	ExpressionStatement	"zend_verify_arg_error ( zf , arg_num , ""be of the type "" , zend_get_type_by_const ( cur_arg_info -> type_hint ) , ""none"" , """" , NULL )"	889:3:28584:28704	152450	0	True				
ANR	152688	CallExpression	"zend_verify_arg_error ( zf , arg_num , ""be of the type "" , zend_get_type_by_const ( cur_arg_info -> type_hint ) , ""none"" , """" , NULL )"		152450	0					
ANR	152689	Callee	zend_verify_arg_error		152450	0					
ANR	152690	Identifier	zend_verify_arg_error		152450	0					
ANR	152691	ArgumentList	zf		152450	1					
ANR	152692	Argument	zf		152450	0					
ANR	152693	Identifier	zf		152450	0					
ANR	152694	Argument	arg_num		152450	1					
ANR	152695	Identifier	arg_num		152450	0					
ANR	152696	Argument	"""be of the type """		152450	2					
ANR	152697	PrimaryExpression	"""be of the type """		152450	0					
ANR	152698	Argument	zend_get_type_by_const ( cur_arg_info -> type_hint )		152450	3					
ANR	152699	CallExpression	zend_get_type_by_const ( cur_arg_info -> type_hint )		152450	0					
ANR	152700	Callee	zend_get_type_by_const		152450	0					
ANR	152701	Identifier	zend_get_type_by_const		152450	0					
ANR	152702	ArgumentList	cur_arg_info -> type_hint		152450	1					
ANR	152703	Argument	cur_arg_info -> type_hint		152450	0					
ANR	152704	PtrMemberAccess	cur_arg_info -> type_hint		152450	0					
ANR	152705	Identifier	cur_arg_info		152450	0					
ANR	152706	Identifier	type_hint		152450	1					
ANR	152707	Argument	"""none"""		152450	4					
ANR	152708	PrimaryExpression	"""none"""		152450	0					
ANR	152709	Argument	""""""		152450	5					
ANR	152710	PrimaryExpression	""""""		152450	0					
ANR	152711	Argument	NULL		152450	6					
ANR	152712	Identifier	NULL		152450	0					
ANR	152713	ReturnStatement	return 0 ;	891:2:28712:28720	152450	1	True				
ANR	152714	PrimaryExpression	0		152450	0					
ANR	152715	ReturnStatement	return 1 ;	893:1:28726:28734	152450	5	True				
ANR	152716	PrimaryExpression	1		152450	0					
ANR	152717	ReturnType	static zend_always_inline int		152450	1					
ANR	152718	Identifier	zend_verify_missing_arg_type		152450	2					
ANR	152719	ParameterList	"zend_function * zf , uint32_t arg_num , void * * cache_slot"		152450	3					
ANR	152720	Parameter	zend_function * zf	856:59:27463:27479	152450	0	True				
ANR	152721	ParameterType	zend_function *		152450	0					
ANR	152722	Identifier	zf		152450	1					
ANR	152723	Parameter	uint32_t arg_num	856:78:27482:27497	152450	1	True				
ANR	152724	ParameterType	uint32_t		152450	0					
ANR	152725	Identifier	arg_num		152450	1					
ANR	152726	Parameter	void * * cache_slot	856:96:27500:27516	152450	2	True				
ANR	152727	ParameterType	void * *		152450	0					
ANR	152728	Identifier	cache_slot		152450	1					
ANR	152729	CFGEntryNode	ENTRY		152450		True				
ANR	152730	CFGExitNode	EXIT		152450		True				
ANR	152731	Symbol	arg_num		152450						
ANR	152732	Symbol	need_msg		152450						
ANR	152733	Symbol	zf -> common . fn_flags		152450						
ANR	152734	Symbol	zf -> common . arg_info		152450						
ANR	152735	Symbol	zf -> common		152450						
ANR	152736	Symbol	* ce		152450						
ANR	152737	Symbol	cur_arg_info -> class_name		152450						
ANR	152738	Symbol	cur_arg_info		152450						
ANR	152739	Symbol	UNEXPECTED		152450						
ANR	152740	Symbol	* cur_arg_info		152450						
ANR	152741	Symbol	cur_arg_info -> type_hint		152450						
ANR	152742	Symbol	ZEND_ACC_INTERFACE		152450						
ANR	152743	Symbol	ce -> name		152450						
ANR	152744	Symbol	cache_slot		152450						
ANR	152745	Symbol	IS_CALLABLE		152450						
ANR	152746	Symbol	zend_get_type_by_const		152450						
ANR	152747	Symbol	ce		152450						
ANR	152748	Symbol	NULL		152450						
ANR	152749	Symbol	zf -> common . num_args		152450						
ANR	152750	Symbol	* cache_slot		152450						
ANR	152751	Symbol	zf		152450						
ANR	152752	Symbol	ZSTR_VAL		152450						
ANR	152753	Symbol	ce -> ce_flags		152450						
ANR	152754	Symbol	* zf		152450						
ANR	152755	Symbol	ZEND_ACC_VARIADIC		152450						
ANR	152756	Symbol	zend_verify_arg_class_kind		152450						
ANR	152757	Symbol	EXPECTED		152450						
ANR	152758	Function	zend_verify_missing_arg	896:0:28739:29712							
ANR	152759	FunctionDef	"zend_verify_missing_arg (zend_execute_data * execute_data , uint32_t arg_num , void * * cache_slot)"		152758	0					
ANR	152760	CompoundStatement		897:0:28855:29712	152758	0					
ANR	152761	IfStatement	"if ( EXPECTED ( ! ( EX ( func ) -> common . fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) ) || UNEXPECTED ( zend_verify_missing_arg_type ( EX ( func ) , arg_num , cache_slot ) ) )"		152758	0					
ANR	152762	Condition	"EXPECTED ( ! ( EX ( func ) -> common . fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) ) || UNEXPECTED ( zend_verify_missing_arg_type ( EX ( func ) , arg_num , cache_slot ) )"	898:5:28862:29005	152758	0	True				
ANR	152763	OrExpression	"EXPECTED ( ! ( EX ( func ) -> common . fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) ) || UNEXPECTED ( zend_verify_missing_arg_type ( EX ( func ) , arg_num , cache_slot ) )"		152758	0		||			
ANR	152764	CallExpression	EXPECTED ( ! ( EX ( func ) -> common . fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) )		152758	0					
ANR	152765	Callee	EXPECTED		152758	0					
ANR	152766	Identifier	EXPECTED		152758	0					
ANR	152767	ArgumentList	! ( EX ( func ) -> common . fn_flags & ZEND_ACC_HAS_TYPE_HINTS )		152758	1					
ANR	152768	Argument	! ( EX ( func ) -> common . fn_flags & ZEND_ACC_HAS_TYPE_HINTS )		152758	0					
ANR	152769	UnaryOperationExpression	! ( EX ( func ) -> common . fn_flags & ZEND_ACC_HAS_TYPE_HINTS )		152758	0					
ANR	152770	UnaryOperator	!		152758	0					
ANR	152771	BitAndExpression	EX ( func ) -> common . fn_flags & ZEND_ACC_HAS_TYPE_HINTS		152758	1		&			
ANR	152772	MemberAccess	EX ( func ) -> common . fn_flags		152758	0					
ANR	152773	PtrMemberAccess	EX ( func ) -> common		152758	0					
ANR	152774	CallExpression	EX ( func )		152758	0					
ANR	152775	Callee	EX		152758	0					
ANR	152776	Identifier	EX		152758	0					
ANR	152777	ArgumentList	func		152758	1					
ANR	152778	Argument	func		152758	0					
ANR	152779	Identifier	func		152758	0					
ANR	152780	Identifier	common		152758	1					
ANR	152781	Identifier	fn_flags		152758	1					
ANR	152782	Identifier	ZEND_ACC_HAS_TYPE_HINTS		152758	1					
ANR	152783	CallExpression	"UNEXPECTED ( zend_verify_missing_arg_type ( EX ( func ) , arg_num , cache_slot ) )"		152758	1					
ANR	152784	Callee	UNEXPECTED		152758	0					
ANR	152785	Identifier	UNEXPECTED		152758	0					
ANR	152786	ArgumentList	"zend_verify_missing_arg_type ( EX ( func ) , arg_num , cache_slot )"		152758	1					
ANR	152787	Argument	"zend_verify_missing_arg_type ( EX ( func ) , arg_num , cache_slot )"		152758	0					
ANR	152788	CallExpression	"zend_verify_missing_arg_type ( EX ( func ) , arg_num , cache_slot )"		152758	0					
ANR	152789	Callee	zend_verify_missing_arg_type		152758	0					
ANR	152790	Identifier	zend_verify_missing_arg_type		152758	0					
ANR	152791	ArgumentList	EX ( func )		152758	1					
ANR	152792	Argument	EX ( func )		152758	0					
ANR	152793	CallExpression	EX ( func )		152758	0					
ANR	152794	Callee	EX		152758	0					
ANR	152795	Identifier	EX		152758	0					
ANR	152796	ArgumentList	func		152758	1					
ANR	152797	Argument	func		152758	0					
ANR	152798	Identifier	func		152758	0					
ANR	152799	Argument	arg_num		152758	1					
ANR	152800	Identifier	arg_num		152758	0					
ANR	152801	Argument	cache_slot		152758	2					
ANR	152802	Identifier	cache_slot		152758	0					
ANR	152803	CompoundStatement		7:2:421:467	152758	1					
ANR	152804	IdentifierDeclStatement	"const char * class_name = EX ( func ) -> common . scope ? ZSTR_VAL ( EX ( func ) -> common . scope -> name ) : """" ;"	900:2:29012:29105	152758	0	True				
ANR	152805	IdentifierDecl	"* class_name = EX ( func ) -> common . scope ? ZSTR_VAL ( EX ( func ) -> common . scope -> name ) : """""		152758	0					
ANR	152806	IdentifierDeclType	const char *		152758	0					
ANR	152807	Identifier	class_name		152758	1					
ANR	152808	AssignmentExpression	"* class_name = EX ( func ) -> common . scope ? ZSTR_VAL ( EX ( func ) -> common . scope -> name ) : """""		152758	2		=			
ANR	152809	Identifier	class_name		152758	0					
ANR	152810	ConditionalExpression	"EX ( func ) -> common . scope ? ZSTR_VAL ( EX ( func ) -> common . scope -> name ) : """""		152758	1					
ANR	152811	Condition	EX ( func ) -> common . scope		152758	0					
ANR	152812	MemberAccess	EX ( func ) -> common . scope		152758	0					
ANR	152813	PtrMemberAccess	EX ( func ) -> common		152758	0					
ANR	152814	CallExpression	EX ( func )		152758	0					
ANR	152815	Callee	EX		152758	0					
ANR	152816	Identifier	EX		152758	0					
ANR	152817	ArgumentList	func		152758	1					
ANR	152818	Argument	func		152758	0					
ANR	152819	Identifier	func		152758	0					
ANR	152820	Identifier	common		152758	1					
ANR	152821	Identifier	scope		152758	1					
ANR	152822	CallExpression	ZSTR_VAL ( EX ( func ) -> common . scope -> name )		152758	1					
ANR	152823	Callee	ZSTR_VAL		152758	0					
ANR	152824	Identifier	ZSTR_VAL		152758	0					
ANR	152825	ArgumentList	EX ( func ) -> common . scope -> name		152758	1					
ANR	152826	Argument	EX ( func ) -> common . scope -> name		152758	0					
ANR	152827	PtrMemberAccess	EX ( func ) -> common . scope -> name		152758	0					
ANR	152828	MemberAccess	EX ( func ) -> common . scope		152758	0					
ANR	152829	PtrMemberAccess	EX ( func ) -> common		152758	0					
ANR	152830	CallExpression	EX ( func )		152758	0					
ANR	152831	Callee	EX		152758	0					
ANR	152832	Identifier	EX		152758	0					
ANR	152833	ArgumentList	func		152758	1					
ANR	152834	Argument	func		152758	0					
ANR	152835	Identifier	func		152758	0					
ANR	152836	Identifier	common		152758	1					
ANR	152837	Identifier	scope		152758	1					
ANR	152838	Identifier	name		152758	1					
ANR	152839	PrimaryExpression	""""""		152758	2					
ANR	152840	IdentifierDeclStatement	"const char * space = EX ( func ) -> common . scope ? ""::"" : """" ;"	901:2:29109:29163	152758	1	True				
ANR	152841	IdentifierDecl	"* space = EX ( func ) -> common . scope ? ""::"" : """""		152758	0					
ANR	152842	IdentifierDeclType	const char *		152758	0					
ANR	152843	Identifier	space		152758	1					
ANR	152844	AssignmentExpression	"* space = EX ( func ) -> common . scope ? ""::"" : """""		152758	2		=			
ANR	152845	Identifier	space		152758	0					
ANR	152846	ConditionalExpression	"EX ( func ) -> common . scope ? ""::"" : """""		152758	1					
ANR	152847	Condition	EX ( func ) -> common . scope		152758	0					
ANR	152848	MemberAccess	EX ( func ) -> common . scope		152758	0					
ANR	152849	PtrMemberAccess	EX ( func ) -> common		152758	0					
ANR	152850	CallExpression	EX ( func )		152758	0					
ANR	152851	Callee	EX		152758	0					
ANR	152852	Identifier	EX		152758	0					
ANR	152853	ArgumentList	func		152758	1					
ANR	152854	Argument	func		152758	0					
ANR	152855	Identifier	func		152758	0					
ANR	152856	Identifier	common		152758	1					
ANR	152857	Identifier	scope		152758	1					
ANR	152858	PrimaryExpression	"""::"""		152758	1					
ANR	152859	PrimaryExpression	""""""		152758	2					
ANR	152860	IdentifierDeclStatement	"const char * func_name = EX ( func ) -> common . function_name ? ZSTR_VAL ( EX ( func ) -> common . function_name ) : ""main"" ;"	902:2:29167:29273	152758	2	True				
ANR	152861	IdentifierDecl	"* func_name = EX ( func ) -> common . function_name ? ZSTR_VAL ( EX ( func ) -> common . function_name ) : ""main"""		152758	0					
ANR	152862	IdentifierDeclType	const char *		152758	0					
ANR	152863	Identifier	func_name		152758	1					
ANR	152864	AssignmentExpression	"* func_name = EX ( func ) -> common . function_name ? ZSTR_VAL ( EX ( func ) -> common . function_name ) : ""main"""		152758	2		=			
ANR	152865	Identifier	func_name		152758	0					
ANR	152866	ConditionalExpression	"EX ( func ) -> common . function_name ? ZSTR_VAL ( EX ( func ) -> common . function_name ) : ""main"""		152758	1					
ANR	152867	Condition	EX ( func ) -> common . function_name		152758	0					
ANR	152868	MemberAccess	EX ( func ) -> common . function_name		152758	0					
ANR	152869	PtrMemberAccess	EX ( func ) -> common		152758	0					
ANR	152870	CallExpression	EX ( func )		152758	0					
ANR	152871	Callee	EX		152758	0					
ANR	152872	Identifier	EX		152758	0					
ANR	152873	ArgumentList	func		152758	1					
ANR	152874	Argument	func		152758	0					
ANR	152875	Identifier	func		152758	0					
ANR	152876	Identifier	common		152758	1					
ANR	152877	Identifier	function_name		152758	1					
ANR	152878	CallExpression	ZSTR_VAL ( EX ( func ) -> common . function_name )		152758	1					
ANR	152879	Callee	ZSTR_VAL		152758	0					
ANR	152880	Identifier	ZSTR_VAL		152758	0					
ANR	152881	ArgumentList	EX ( func ) -> common . function_name		152758	1					
ANR	152882	Argument	EX ( func ) -> common . function_name		152758	0					
ANR	152883	MemberAccess	EX ( func ) -> common . function_name		152758	0					
ANR	152884	PtrMemberAccess	EX ( func ) -> common		152758	0					
ANR	152885	CallExpression	EX ( func )		152758	0					
ANR	152886	Callee	EX		152758	0					
ANR	152887	Identifier	EX		152758	0					
ANR	152888	ArgumentList	func		152758	1					
ANR	152889	Argument	func		152758	0					
ANR	152890	Identifier	func		152758	0					
ANR	152891	Identifier	common		152758	1					
ANR	152892	Identifier	function_name		152758	1					
ANR	152893	PrimaryExpression	"""main"""		152758	2					
ANR	152894	IdentifierDeclStatement	zend_execute_data * ptr = EX ( prev_execute_data ) ;	903:2:29277:29323	152758	3	True				
ANR	152895	IdentifierDecl	* ptr = EX ( prev_execute_data )		152758	0					
ANR	152896	IdentifierDeclType	zend_execute_data *		152758	0					
ANR	152897	Identifier	ptr		152758	1					
ANR	152898	AssignmentExpression	* ptr = EX ( prev_execute_data )		152758	2		=			
ANR	152899	Identifier	ptr		152758	0					
ANR	152900	CallExpression	EX ( prev_execute_data )		152758	1					
ANR	152901	Callee	EX		152758	0					
ANR	152902	Identifier	EX		152758	0					
ANR	152903	ArgumentList	prev_execute_data		152758	1					
ANR	152904	Argument	prev_execute_data		152758	0					
ANR	152905	Identifier	prev_execute_data		152758	0					
ANR	152906	IfStatement	if ( ptr && ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type ) )		152758	4					
ANR	152907	Condition	ptr && ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type )	905:6:29332:29389	152758	0	True				
ANR	152908	AndExpression	ptr && ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type )		152758	0		&&			
ANR	152909	Identifier	ptr		152758	0					
ANR	152910	AndExpression	ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type )		152758	1		&&			
ANR	152911	PtrMemberAccess	ptr -> func		152758	0					
ANR	152912	Identifier	ptr		152758	0					
ANR	152913	Identifier	func		152758	1					
ANR	152914	CallExpression	ZEND_USER_CODE ( ptr -> func -> common . type )		152758	1					
ANR	152915	Callee	ZEND_USER_CODE		152758	0					
ANR	152916	Identifier	ZEND_USER_CODE		152758	0					
ANR	152917	ArgumentList	ptr -> func -> common . type		152758	1					
ANR	152918	Argument	ptr -> func -> common . type		152758	0					
ANR	152919	MemberAccess	ptr -> func -> common . type		152758	0					
ANR	152920	PtrMemberAccess	ptr -> func -> common		152758	0					
ANR	152921	PtrMemberAccess	ptr -> func		152758	0					
ANR	152922	Identifier	ptr		152758	0					
ANR	152923	Identifier	func		152758	1					
ANR	152924	Identifier	common		152758	1					
ANR	152925	Identifier	type		152758	1					
ANR	152926	CompoundStatement		9:66:536:536	152758	1					
ANR	152927	ExpressionStatement	"zend_error ( E_WARNING , ""Missing argument %u for %s%s%s(), called in %s on line %d and defined"" , arg_num , class_name , space , func_name , ZSTR_VAL ( ptr -> func -> op_array . filename ) , ptr -> opline -> lineno )"	906:3:29397:29591	152758	0	True				
ANR	152928	CallExpression	"zend_error ( E_WARNING , ""Missing argument %u for %s%s%s(), called in %s on line %d and defined"" , arg_num , class_name , space , func_name , ZSTR_VAL ( ptr -> func -> op_array . filename ) , ptr -> opline -> lineno )"		152758	0					
ANR	152929	Callee	zend_error		152758	0					
ANR	152930	Identifier	zend_error		152758	0					
ANR	152931	ArgumentList	E_WARNING		152758	1					
ANR	152932	Argument	E_WARNING		152758	0					
ANR	152933	Identifier	E_WARNING		152758	0					
ANR	152934	Argument	"""Missing argument %u for %s%s%s(), called in %s on line %d and defined"""		152758	1					
ANR	152935	PrimaryExpression	"""Missing argument %u for %s%s%s(), called in %s on line %d and defined"""		152758	0					
ANR	152936	Argument	arg_num		152758	2					
ANR	152937	Identifier	arg_num		152758	0					
ANR	152938	Argument	class_name		152758	3					
ANR	152939	Identifier	class_name		152758	0					
ANR	152940	Argument	space		152758	4					
ANR	152941	Identifier	space		152758	0					
ANR	152942	Argument	func_name		152758	5					
ANR	152943	Identifier	func_name		152758	0					
ANR	152944	Argument	ZSTR_VAL ( ptr -> func -> op_array . filename )		152758	6					
ANR	152945	CallExpression	ZSTR_VAL ( ptr -> func -> op_array . filename )		152758	0					
ANR	152946	Callee	ZSTR_VAL		152758	0					
ANR	152947	Identifier	ZSTR_VAL		152758	0					
ANR	152948	ArgumentList	ptr -> func -> op_array . filename		152758	1					
ANR	152949	Argument	ptr -> func -> op_array . filename		152758	0					
ANR	152950	MemberAccess	ptr -> func -> op_array . filename		152758	0					
ANR	152951	PtrMemberAccess	ptr -> func -> op_array		152758	0					
ANR	152952	PtrMemberAccess	ptr -> func		152758	0					
ANR	152953	Identifier	ptr		152758	0					
ANR	152954	Identifier	func		152758	1					
ANR	152955	Identifier	op_array		152758	1					
ANR	152956	Identifier	filename		152758	1					
ANR	152957	Argument	ptr -> opline -> lineno		152758	7					
ANR	152958	PtrMemberAccess	ptr -> opline -> lineno		152758	0					
ANR	152959	PtrMemberAccess	ptr -> opline		152758	0					
ANR	152960	Identifier	ptr		152758	0					
ANR	152961	Identifier	opline		152758	1					
ANR	152962	Identifier	lineno		152758	1					
ANR	152963	ElseStatement	else		152758	0					
ANR	152964	CompoundStatement		11:9:746:746	152758	0					
ANR	152965	ExpressionStatement	"zend_error ( E_WARNING , ""Missing argument %u for %s%s%s()"" , arg_num , class_name , space , func_name )"	908:3:29607:29703	152758	0	True				
ANR	152966	CallExpression	"zend_error ( E_WARNING , ""Missing argument %u for %s%s%s()"" , arg_num , class_name , space , func_name )"		152758	0					
ANR	152967	Callee	zend_error		152758	0					
ANR	152968	Identifier	zend_error		152758	0					
ANR	152969	ArgumentList	E_WARNING		152758	1					
ANR	152970	Argument	E_WARNING		152758	0					
ANR	152971	Identifier	E_WARNING		152758	0					
ANR	152972	Argument	"""Missing argument %u for %s%s%s()"""		152758	1					
ANR	152973	PrimaryExpression	"""Missing argument %u for %s%s%s()"""		152758	0					
ANR	152974	Argument	arg_num		152758	2					
ANR	152975	Identifier	arg_num		152758	0					
ANR	152976	Argument	class_name		152758	3					
ANR	152977	Identifier	class_name		152758	0					
ANR	152978	Argument	space		152758	4					
ANR	152979	Identifier	space		152758	0					
ANR	152980	Argument	func_name		152758	5					
ANR	152981	Identifier	func_name		152758	0					
ANR	152982	ReturnType	static ZEND_COLD void		152758	1					
ANR	152983	Identifier	zend_verify_missing_arg		152758	2					
ANR	152984	ParameterList	"zend_execute_data * execute_data , uint32_t arg_num , void * * cache_slot"		152758	3					
ANR	152985	Parameter	zend_execute_data * execute_data	896:46:28785:28815	152758	0	True				
ANR	152986	ParameterType	zend_execute_data *		152758	0					
ANR	152987	Identifier	execute_data		152758	1					
ANR	152988	Parameter	uint32_t arg_num	896:79:28818:28833	152758	1	True				
ANR	152989	ParameterType	uint32_t		152758	0					
ANR	152990	Identifier	arg_num		152758	1					
ANR	152991	Parameter	void * * cache_slot	896:97:28836:28852	152758	2	True				
ANR	152992	ParameterType	void * *		152758	0					
ANR	152993	Identifier	cache_slot		152758	1					
ANR	152994	CFGEntryNode	ENTRY		152758		True				
ANR	152995	CFGExitNode	EXIT		152758		True				
ANR	152996	Symbol	arg_num		152758						
ANR	152997	Symbol	ptr -> func -> op_array		152758						
ANR	152998	Symbol	* * ptr		152758						
ANR	152999	Symbol	ptr -> opline		152758						
ANR	153000	Symbol	zend_verify_missing_arg_type		152758						
ANR	153001	Symbol	ptr -> func -> op_array . filename		152758						
ANR	153002	Symbol	EX ( func ) -> common . scope -> name		152758						
ANR	153003	Symbol	EX ( func ) -> common		152758						
ANR	153004	Symbol	* ptr -> func		152758						
ANR	153005	Symbol	EX ( func ) -> common . fn_flags		152758						
ANR	153006	Symbol	ptr -> func		152758						
ANR	153007	Symbol	execute_data		152758						
ANR	153008	Symbol	space		152758						
ANR	153009	Symbol	ZEND_ACC_HAS_TYPE_HINTS		152758						
ANR	153010	Symbol	UNEXPECTED		152758						
ANR	153011	Symbol	E_WARNING		152758						
ANR	153012	Symbol	* ptr -> opline		152758						
ANR	153013	Symbol	* ptr		152758						
ANR	153014	Symbol	ptr -> opline -> lineno		152758						
ANR	153015	Symbol	class_name		152758						
ANR	153016	Symbol	* * EX		152758						
ANR	153017	Symbol	func_name		152758						
ANR	153018	Symbol	cache_slot		152758						
ANR	153019	Symbol	EX ( func ) -> common . function_name		152758						
ANR	153020	Symbol	prev_execute_data		152758						
ANR	153021	Symbol	EX ( func ) -> common . scope		152758						
ANR	153022	Symbol	ZSTR_VAL		152758						
ANR	153023	Symbol	ptr		152758						
ANR	153024	Symbol	* EX ( func ) -> common . scope		152758						
ANR	153025	Symbol	EX		152758						
ANR	153026	Symbol	func		152758						
ANR	153027	Symbol	* EX ( func ) -> common		152758						
ANR	153028	Symbol	ZEND_USER_CODE		152758						
ANR	153029	Symbol	* EX		152758						
ANR	153030	Symbol	ptr -> func -> common . type		152758						
ANR	153031	Symbol	EXPECTED		152758						
ANR	153032	Symbol	ptr -> func -> common		152758						
ANR	153033	Function	zend_verify_return_error	913:0:29715:30258							
ANR	153034	FunctionDef	"zend_verify_return_error (const zend_function * zf , const char * need_msg , const char * need_kind , const char * returned_msg , const char * returned_kind)"		153033	0					
ANR	153035	CompoundStatement		914:0:29885:30258	153033	0					
ANR	153036	IdentifierDeclStatement	const char * fname = ZSTR_VAL ( zf -> common . function_name ) ;	915:1:29888:29942	153033	0	True				
ANR	153037	IdentifierDecl	* fname = ZSTR_VAL ( zf -> common . function_name )		153033	0					
ANR	153038	IdentifierDeclType	const char *		153033	0					
ANR	153039	Identifier	fname		153033	1					
ANR	153040	AssignmentExpression	* fname = ZSTR_VAL ( zf -> common . function_name )		153033	2		=			
ANR	153041	Identifier	fname		153033	0					
ANR	153042	CallExpression	ZSTR_VAL ( zf -> common . function_name )		153033	1					
ANR	153043	Callee	ZSTR_VAL		153033	0					
ANR	153044	Identifier	ZSTR_VAL		153033	0					
ANR	153045	ArgumentList	zf -> common . function_name		153033	1					
ANR	153046	Argument	zf -> common . function_name		153033	0					
ANR	153047	MemberAccess	zf -> common . function_name		153033	0					
ANR	153048	PtrMemberAccess	zf -> common		153033	0					
ANR	153049	Identifier	zf		153033	0					
ANR	153050	Identifier	common		153033	1					
ANR	153051	Identifier	function_name		153033	1					
ANR	153052	IdentifierDeclStatement	const char * fsep ;	916:1:29945:29961	153033	1	True				
ANR	153053	IdentifierDecl	* fsep		153033	0					
ANR	153054	IdentifierDeclType	const char *		153033	0					
ANR	153055	Identifier	fsep		153033	1					
ANR	153056	IdentifierDeclStatement	const char * fclass ;	917:1:29964:29982	153033	2	True				
ANR	153057	IdentifierDecl	* fclass		153033	0					
ANR	153058	IdentifierDeclType	const char *		153033	0					
ANR	153059	Identifier	fclass		153033	1					
ANR	153060	IfStatement	if ( zf -> common . scope )		153033	3					
ANR	153061	Condition	zf -> common . scope	919:5:29990:30005	153033	0	True				
ANR	153062	MemberAccess	zf -> common . scope		153033	0					
ANR	153063	PtrMemberAccess	zf -> common		153033	0					
ANR	153064	Identifier	zf		153033	0					
ANR	153065	Identifier	common		153033	1					
ANR	153066	Identifier	scope		153033	1					
ANR	153067	CompoundStatement		6:23:122:122	153033	1					
ANR	153068	ExpressionStatement	"fsep = ""::"""	920:2:30012:30024	153033	0	True				
ANR	153069	AssignmentExpression	"fsep = ""::"""		153033	0		=			
ANR	153070	Identifier	fsep		153033	0					
ANR	153071	PrimaryExpression	"""::"""		153033	1					
ANR	153072	ExpressionStatement	fclass = ZSTR_VAL ( zf -> common . scope -> name )	921:2:30028:30069	153033	1	True				
ANR	153073	AssignmentExpression	fclass = ZSTR_VAL ( zf -> common . scope -> name )		153033	0		=			
ANR	153074	Identifier	fclass		153033	0					
ANR	153075	CallExpression	ZSTR_VAL ( zf -> common . scope -> name )		153033	1					
ANR	153076	Callee	ZSTR_VAL		153033	0					
ANR	153077	Identifier	ZSTR_VAL		153033	0					
ANR	153078	ArgumentList	zf -> common . scope -> name		153033	1					
ANR	153079	Argument	zf -> common . scope -> name		153033	0					
ANR	153080	PtrMemberAccess	zf -> common . scope -> name		153033	0					
ANR	153081	MemberAccess	zf -> common . scope		153033	0					
ANR	153082	PtrMemberAccess	zf -> common		153033	0					
ANR	153083	Identifier	zf		153033	0					
ANR	153084	Identifier	common		153033	1					
ANR	153085	Identifier	scope		153033	1					
ANR	153086	Identifier	name		153033	1					
ANR	153087	ElseStatement	else		153033	0					
ANR	153088	CompoundStatement		9:8:193:193	153033	0					
ANR	153089	ExpressionStatement	"fsep = """""	923:2:30083:30093	153033	0	True				
ANR	153090	AssignmentExpression	"fsep = """""		153033	0		=			
ANR	153091	Identifier	fsep		153033	0					
ANR	153092	PrimaryExpression	""""""		153033	1					
ANR	153093	ExpressionStatement	"fclass = """""	924:2:30097:30108	153033	1	True				
ANR	153094	AssignmentExpression	"fclass = """""		153033	0		=			
ANR	153095	Identifier	fclass		153033	0					
ANR	153096	PrimaryExpression	""""""		153033	1					
ANR	153097	ExpressionStatement	"zend_type_error ( ""Return value of %s%s%s() must %s%s, %s%s returned"" , fclass , fsep , fname , need_msg , need_kind , returned_msg , returned_kind )"	927:1:30115:30256	153033	4	True				
ANR	153098	CallExpression	"zend_type_error ( ""Return value of %s%s%s() must %s%s, %s%s returned"" , fclass , fsep , fname , need_msg , need_kind , returned_msg , returned_kind )"		153033	0					
ANR	153099	Callee	zend_type_error		153033	0					
ANR	153100	Identifier	zend_type_error		153033	0					
ANR	153101	ArgumentList	"""Return value of %s%s%s() must %s%s, %s%s returned"""		153033	1					
ANR	153102	Argument	"""Return value of %s%s%s() must %s%s, %s%s returned"""		153033	0					
ANR	153103	PrimaryExpression	"""Return value of %s%s%s() must %s%s, %s%s returned"""		153033	0					
ANR	153104	Argument	fclass		153033	1					
ANR	153105	Identifier	fclass		153033	0					
ANR	153106	Argument	fsep		153033	2					
ANR	153107	Identifier	fsep		153033	0					
ANR	153108	Argument	fname		153033	3					
ANR	153109	Identifier	fname		153033	0					
ANR	153110	Argument	need_msg		153033	4					
ANR	153111	Identifier	need_msg		153033	0					
ANR	153112	Argument	need_kind		153033	5					
ANR	153113	Identifier	need_kind		153033	0					
ANR	153114	Argument	returned_msg		153033	6					
ANR	153115	Identifier	returned_msg		153033	0					
ANR	153116	Argument	returned_kind		153033	7					
ANR	153117	Identifier	returned_kind		153033	0					
ANR	153118	ReturnType	static ZEND_COLD void		153033	1					
ANR	153119	Identifier	zend_verify_return_error		153033	2					
ANR	153120	ParameterList	"const zend_function * zf , const char * need_msg , const char * need_kind , const char * returned_msg , const char * returned_kind"		153033	3					
ANR	153121	Parameter	const zend_function * zf	913:47:29762:29784	153033	0	True				
ANR	153122	ParameterType	const zend_function *		153033	0					
ANR	153123	Identifier	zf		153033	1					
ANR	153124	Parameter	const char * need_msg	913:72:29787:29806	153033	1	True				
ANR	153125	ParameterType	const char *		153033	0					
ANR	153126	Identifier	need_msg		153033	1					
ANR	153127	Parameter	const char * need_kind	913:94:29809:29829	153033	2	True				
ANR	153128	ParameterType	const char *		153033	0					
ANR	153129	Identifier	need_kind		153033	1					
ANR	153130	Parameter	const char * returned_msg	913:117:29832:29855	153033	3	True				
ANR	153131	ParameterType	const char *		153033	0					
ANR	153132	Identifier	returned_msg		153033	1					
ANR	153133	Parameter	const char * returned_kind	913:143:29858:29882	153033	4	True				
ANR	153134	ParameterType	const char *		153033	0					
ANR	153135	Identifier	returned_kind		153033	1					
ANR	153136	CFGEntryNode	ENTRY		153033		True				
ANR	153137	CFGExitNode	EXIT		153033		True				
ANR	153138	Symbol	fname		153033						
ANR	153139	Symbol	fclass		153033						
ANR	153140	Symbol	need_msg		153033						
ANR	153141	Symbol	returned_kind		153033						
ANR	153142	Symbol	fsep		153033						
ANR	153143	Symbol	zf -> common		153033						
ANR	153144	Symbol	zf		153033						
ANR	153145	Symbol	* zf -> common		153033						
ANR	153146	Symbol	returned_msg		153033						
ANR	153147	Symbol	zf -> common . function_name		153033						
ANR	153148	Symbol	ZSTR_VAL		153033						
ANR	153149	Symbol	* zf		153033						
ANR	153150	Symbol	need_kind		153033						
ANR	153151	Symbol	* zf -> common . scope		153033						
ANR	153152	Symbol	* * zf		153033						
ANR	153153	Symbol	zf -> common . scope -> name		153033						
ANR	153154	Symbol	zf -> common . scope		153033						
ANR	153155	Function	zend_verify_internal_return_error	931:0:30261:30831							
ANR	153156	FunctionDef	"zend_verify_internal_return_error (const zend_function * zf , const char * need_msg , const char * need_kind , const char * returned_msg , const char * returned_kind)"		153155	0					
ANR	153157	CompoundStatement		932:0:30440:30831	153155	0					
ANR	153158	IdentifierDeclStatement	const char * fname = ZSTR_VAL ( zf -> common . function_name ) ;	933:1:30443:30497	153155	0	True				
ANR	153159	IdentifierDecl	* fname = ZSTR_VAL ( zf -> common . function_name )		153155	0					
ANR	153160	IdentifierDeclType	const char *		153155	0					
ANR	153161	Identifier	fname		153155	1					
ANR	153162	AssignmentExpression	* fname = ZSTR_VAL ( zf -> common . function_name )		153155	2		=			
ANR	153163	Identifier	fname		153155	0					
ANR	153164	CallExpression	ZSTR_VAL ( zf -> common . function_name )		153155	1					
ANR	153165	Callee	ZSTR_VAL		153155	0					
ANR	153166	Identifier	ZSTR_VAL		153155	0					
ANR	153167	ArgumentList	zf -> common . function_name		153155	1					
ANR	153168	Argument	zf -> common . function_name		153155	0					
ANR	153169	MemberAccess	zf -> common . function_name		153155	0					
ANR	153170	PtrMemberAccess	zf -> common		153155	0					
ANR	153171	Identifier	zf		153155	0					
ANR	153172	Identifier	common		153155	1					
ANR	153173	Identifier	function_name		153155	1					
ANR	153174	IdentifierDeclStatement	const char * fsep ;	934:1:30500:30516	153155	1	True				
ANR	153175	IdentifierDecl	* fsep		153155	0					
ANR	153176	IdentifierDeclType	const char *		153155	0					
ANR	153177	Identifier	fsep		153155	1					
ANR	153178	IdentifierDeclStatement	const char * fclass ;	935:1:30519:30537	153155	2	True				
ANR	153179	IdentifierDecl	* fclass		153155	0					
ANR	153180	IdentifierDeclType	const char *		153155	0					
ANR	153181	Identifier	fclass		153155	1					
ANR	153182	IfStatement	if ( zf -> common . scope )		153155	3					
ANR	153183	Condition	zf -> common . scope	937:5:30545:30560	153155	0	True				
ANR	153184	MemberAccess	zf -> common . scope		153155	0					
ANR	153185	PtrMemberAccess	zf -> common		153155	0					
ANR	153186	Identifier	zf		153155	0					
ANR	153187	Identifier	common		153155	1					
ANR	153188	Identifier	scope		153155	1					
ANR	153189	CompoundStatement		6:23:122:122	153155	1					
ANR	153190	ExpressionStatement	"fsep = ""::"""	938:2:30567:30579	153155	0	True				
ANR	153191	AssignmentExpression	"fsep = ""::"""		153155	0		=			
ANR	153192	Identifier	fsep		153155	0					
ANR	153193	PrimaryExpression	"""::"""		153155	1					
ANR	153194	ExpressionStatement	fclass = ZSTR_VAL ( zf -> common . scope -> name )	939:2:30583:30624	153155	1	True				
ANR	153195	AssignmentExpression	fclass = ZSTR_VAL ( zf -> common . scope -> name )		153155	0		=			
ANR	153196	Identifier	fclass		153155	0					
ANR	153197	CallExpression	ZSTR_VAL ( zf -> common . scope -> name )		153155	1					
ANR	153198	Callee	ZSTR_VAL		153155	0					
ANR	153199	Identifier	ZSTR_VAL		153155	0					
ANR	153200	ArgumentList	zf -> common . scope -> name		153155	1					
ANR	153201	Argument	zf -> common . scope -> name		153155	0					
ANR	153202	PtrMemberAccess	zf -> common . scope -> name		153155	0					
ANR	153203	MemberAccess	zf -> common . scope		153155	0					
ANR	153204	PtrMemberAccess	zf -> common		153155	0					
ANR	153205	Identifier	zf		153155	0					
ANR	153206	Identifier	common		153155	1					
ANR	153207	Identifier	scope		153155	1					
ANR	153208	Identifier	name		153155	1					
ANR	153209	ElseStatement	else		153155	0					
ANR	153210	CompoundStatement		9:8:193:193	153155	0					
ANR	153211	ExpressionStatement	"fsep = """""	941:2:30638:30648	153155	0	True				
ANR	153212	AssignmentExpression	"fsep = """""		153155	0		=			
ANR	153213	Identifier	fsep		153155	0					
ANR	153214	PrimaryExpression	""""""		153155	1					
ANR	153215	ExpressionStatement	"fclass = """""	942:2:30652:30663	153155	1	True				
ANR	153216	AssignmentExpression	"fclass = """""		153155	0		=			
ANR	153217	Identifier	fclass		153155	0					
ANR	153218	PrimaryExpression	""""""		153155	1					
ANR	153219	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""Return value of %s%s%s() must %s%s, %s%s returned"" , fclass , fsep , fname , need_msg , need_kind , returned_msg , returned_kind )"	945:1:30670:30829	153155	4	True				
ANR	153220	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""Return value of %s%s%s() must %s%s, %s%s returned"" , fclass , fsep , fname , need_msg , need_kind , returned_msg , returned_kind )"		153155	0					
ANR	153221	Callee	zend_error_noreturn		153155	0					
ANR	153222	Identifier	zend_error_noreturn		153155	0					
ANR	153223	ArgumentList	E_CORE_ERROR		153155	1					
ANR	153224	Argument	E_CORE_ERROR		153155	0					
ANR	153225	Identifier	E_CORE_ERROR		153155	0					
ANR	153226	Argument	"""Return value of %s%s%s() must %s%s, %s%s returned"""		153155	1					
ANR	153227	PrimaryExpression	"""Return value of %s%s%s() must %s%s, %s%s returned"""		153155	0					
ANR	153228	Argument	fclass		153155	2					
ANR	153229	Identifier	fclass		153155	0					
ANR	153230	Argument	fsep		153155	3					
ANR	153231	Identifier	fsep		153155	0					
ANR	153232	Argument	fname		153155	4					
ANR	153233	Identifier	fname		153155	0					
ANR	153234	Argument	need_msg		153155	5					
ANR	153235	Identifier	need_msg		153155	0					
ANR	153236	Argument	need_kind		153155	6					
ANR	153237	Identifier	need_kind		153155	0					
ANR	153238	Argument	returned_msg		153155	7					
ANR	153239	Identifier	returned_msg		153155	0					
ANR	153240	Argument	returned_kind		153155	8					
ANR	153241	Identifier	returned_kind		153155	0					
ANR	153242	ReturnType	static ZEND_COLD void		153155	1					
ANR	153243	Identifier	zend_verify_internal_return_error		153155	2					
ANR	153244	ParameterList	"const zend_function * zf , const char * need_msg , const char * need_kind , const char * returned_msg , const char * returned_kind"		153155	3					
ANR	153245	Parameter	const zend_function * zf	931:56:30317:30339	153155	0	True				
ANR	153246	ParameterType	const zend_function *		153155	0					
ANR	153247	Identifier	zf		153155	1					
ANR	153248	Parameter	const char * need_msg	931:81:30342:30361	153155	1	True				
ANR	153249	ParameterType	const char *		153155	0					
ANR	153250	Identifier	need_msg		153155	1					
ANR	153251	Parameter	const char * need_kind	931:103:30364:30384	153155	2	True				
ANR	153252	ParameterType	const char *		153155	0					
ANR	153253	Identifier	need_kind		153155	1					
ANR	153254	Parameter	const char * returned_msg	931:126:30387:30410	153155	3	True				
ANR	153255	ParameterType	const char *		153155	0					
ANR	153256	Identifier	returned_msg		153155	1					
ANR	153257	Parameter	const char * returned_kind	931:152:30413:30437	153155	4	True				
ANR	153258	ParameterType	const char *		153155	0					
ANR	153259	Identifier	returned_kind		153155	1					
ANR	153260	CFGEntryNode	ENTRY		153155		True				
ANR	153261	CFGExitNode	EXIT		153155		True				
ANR	153262	Symbol	fname		153155						
ANR	153263	Symbol	fclass		153155						
ANR	153264	Symbol	need_msg		153155						
ANR	153265	Symbol	returned_kind		153155						
ANR	153266	Symbol	fsep		153155						
ANR	153267	Symbol	zf -> common		153155						
ANR	153268	Symbol	zf		153155						
ANR	153269	Symbol	* zf -> common		153155						
ANR	153270	Symbol	returned_msg		153155						
ANR	153271	Symbol	ZSTR_VAL		153155						
ANR	153272	Symbol	zf -> common . function_name		153155						
ANR	153273	Symbol	* zf		153155						
ANR	153274	Symbol	E_CORE_ERROR		153155						
ANR	153275	Symbol	need_kind		153155						
ANR	153276	Symbol	* zf -> common . scope		153155						
ANR	153277	Symbol	* * zf		153155						
ANR	153278	Symbol	zf -> common . scope -> name		153155						
ANR	153279	Symbol	zf -> common . scope		153155						
ANR	153280	Function	zend_verify_internal_return_type	950:0:30849:32439							
ANR	153281	FunctionDef	"zend_verify_internal_return_type (zend_function * zf , zval * ret)"		153280	0					
ANR	153282	CompoundStatement		951:0:30923:32439	153280	0					
ANR	153283	IdentifierDeclStatement	zend_arg_info * ret_info = zf -> common . arg_info - 1 ;	952:1:30926:30975	153280	0	True				
ANR	153284	IdentifierDecl	* ret_info = zf -> common . arg_info - 1		153280	0					
ANR	153285	IdentifierDeclType	zend_arg_info *		153280	0					
ANR	153286	Identifier	ret_info		153280	1					
ANR	153287	AssignmentExpression	* ret_info = zf -> common . arg_info - 1		153280	2		=			
ANR	153288	Identifier	ret_info		153280	0					
ANR	153289	AdditiveExpression	zf -> common . arg_info - 1		153280	1		-			
ANR	153290	MemberAccess	zf -> common . arg_info		153280	0					
ANR	153291	PtrMemberAccess	zf -> common		153280	0					
ANR	153292	Identifier	zf		153280	0					
ANR	153293	Identifier	common		153280	1					
ANR	153294	Identifier	arg_info		153280	1					
ANR	153295	PrimaryExpression	1		153280	1					
ANR	153296	IdentifierDeclStatement	"char * need_msg , * class_name ;"	953:1:30978:31005	153280	1	True				
ANR	153297	IdentifierDecl	* need_msg		153280	0					
ANR	153298	IdentifierDeclType	char *		153280	0					
ANR	153299	Identifier	need_msg		153280	1					
ANR	153300	IdentifierDecl	* class_name		153280	1					
ANR	153301	IdentifierDeclType	char *		153280	0					
ANR	153302	Identifier	class_name		153280	1					
ANR	153303	IdentifierDeclStatement	zend_class_entry * ce ;	954:1:31008:31028	153280	2	True				
ANR	153304	IdentifierDecl	* ce		153280	0					
ANR	153305	IdentifierDeclType	zend_class_entry *		153280	0					
ANR	153306	Identifier	ce		153280	1					
ANR	153307	IfStatement	if ( ret_info -> type_hint )		153280	3					
ANR	153308	Condition	ret_info -> type_hint	957:5:31037:31055	153280	0	True				
ANR	153309	PtrMemberAccess	ret_info -> type_hint		153280	0					
ANR	153310	Identifier	ret_info		153280	0					
ANR	153311	Identifier	type_hint		153280	1					
ANR	153312	CompoundStatement		7:26:134:134	153280	1					
ANR	153313	IfStatement	if ( EXPECTED ( ret_info -> type_hint == Z_TYPE_P ( ret ) ) )		153280	0					
ANR	153314	Condition	EXPECTED ( ret_info -> type_hint == Z_TYPE_P ( ret ) )	958:6:31066:31111	153280	0	True				
ANR	153315	CallExpression	EXPECTED ( ret_info -> type_hint == Z_TYPE_P ( ret ) )		153280	0					
ANR	153316	Callee	EXPECTED		153280	0					
ANR	153317	Identifier	EXPECTED		153280	0					
ANR	153318	ArgumentList	ret_info -> type_hint == Z_TYPE_P ( ret )		153280	1					
ANR	153319	Argument	ret_info -> type_hint == Z_TYPE_P ( ret )		153280	0					
ANR	153320	EqualityExpression	ret_info -> type_hint == Z_TYPE_P ( ret )		153280	0		==			
ANR	153321	PtrMemberAccess	ret_info -> type_hint		153280	0					
ANR	153322	Identifier	ret_info		153280	0					
ANR	153323	Identifier	type_hint		153280	1					
ANR	153324	CallExpression	Z_TYPE_P ( ret )		153280	1					
ANR	153325	Callee	Z_TYPE_P		153280	0					
ANR	153326	Identifier	Z_TYPE_P		153280	0					
ANR	153327	ArgumentList	ret		153280	1					
ANR	153328	Argument	ret		153280	0					
ANR	153329	Identifier	ret		153280	0					
ANR	153330	CompoundStatement		8:54:190:190	153280	1					
ANR	153331	IfStatement	if ( ret_info -> class_name )		153280	0					
ANR	153332	Condition	ret_info -> class_name	959:7:31123:31142	153280	0	True				
ANR	153333	PtrMemberAccess	ret_info -> class_name		153280	0					
ANR	153334	Identifier	ret_info		153280	0					
ANR	153335	Identifier	class_name		153280	1					
ANR	153336	CompoundStatement		9:29:221:221	153280	1					
ANR	153337	ExpressionStatement	"need_msg = zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) ret_info , & class_name , & ce )"	960:4:31151:31251	153280	0	True				
ANR	153338	AssignmentExpression	"need_msg = zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) ret_info , & class_name , & ce )"		153280	0		=			
ANR	153339	Identifier	need_msg		153280	0					
ANR	153340	CallExpression	"zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) ret_info , & class_name , & ce )"		153280	1					
ANR	153341	Callee	zend_verify_internal_arg_class_kind		153280	0					
ANR	153342	Identifier	zend_verify_internal_arg_class_kind		153280	0					
ANR	153343	ArgumentList	( zend_internal_arg_info * ) ret_info		153280	1					
ANR	153344	Argument	( zend_internal_arg_info * ) ret_info		153280	0					
ANR	153345	CastExpression	( zend_internal_arg_info * ) ret_info		153280	0					
ANR	153346	CastTarget	zend_internal_arg_info *		153280	0					
ANR	153347	Identifier	ret_info		153280	1					
ANR	153348	Argument	& class_name		153280	1					
ANR	153349	UnaryOperationExpression	& class_name		153280	0					
ANR	153350	UnaryOperator	&		153280	0					
ANR	153351	Identifier	class_name		153280	1					
ANR	153352	Argument	& ce		153280	2					
ANR	153353	UnaryOperationExpression	& ce		153280	0					
ANR	153354	UnaryOperator	&		153280	0					
ANR	153355	Identifier	ce		153280	1					
ANR	153356	IfStatement	"if ( ! ce || ! instanceof_function ( Z_OBJCE_P ( ret ) , ce ) )"		153280	1					
ANR	153357	Condition	"! ce || ! instanceof_function ( Z_OBJCE_P ( ret ) , ce )"	961:8:31261:31307	153280	0	True				
ANR	153358	OrExpression	"! ce || ! instanceof_function ( Z_OBJCE_P ( ret ) , ce )"		153280	0		||			
ANR	153359	UnaryOperationExpression	! ce		153280	0					
ANR	153360	UnaryOperator	!		153280	0					
ANR	153361	Identifier	ce		153280	1					
ANR	153362	UnaryOperationExpression	"! instanceof_function ( Z_OBJCE_P ( ret ) , ce )"		153280	1					
ANR	153363	UnaryOperator	!		153280	0					
ANR	153364	CallExpression	"instanceof_function ( Z_OBJCE_P ( ret ) , ce )"		153280	1					
ANR	153365	Callee	instanceof_function		153280	0					
ANR	153366	Identifier	instanceof_function		153280	0					
ANR	153367	ArgumentList	Z_OBJCE_P ( ret )		153280	1					
ANR	153368	Argument	Z_OBJCE_P ( ret )		153280	0					
ANR	153369	CallExpression	Z_OBJCE_P ( ret )		153280	0					
ANR	153370	Callee	Z_OBJCE_P		153280	0					
ANR	153371	Identifier	Z_OBJCE_P		153280	0					
ANR	153372	ArgumentList	ret		153280	1					
ANR	153373	Argument	ret		153280	0					
ANR	153374	Identifier	ret		153280	0					
ANR	153375	Argument	ce		153280	1					
ANR	153376	Identifier	ce		153280	0					
ANR	153377	CompoundStatement		11:57:386:386	153280	1					
ANR	153378	ExpressionStatement	"zend_verify_internal_return_error ( zf , need_msg , class_name , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name ) )"	962:5:31317:31424	153280	0	True				
ANR	153379	CallExpression	"zend_verify_internal_return_error ( zf , need_msg , class_name , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name ) )"		153280	0					
ANR	153380	Callee	zend_verify_internal_return_error		153280	0					
ANR	153381	Identifier	zend_verify_internal_return_error		153280	0					
ANR	153382	ArgumentList	zf		153280	1					
ANR	153383	Argument	zf		153280	0					
ANR	153384	Identifier	zf		153280	0					
ANR	153385	Argument	need_msg		153280	1					
ANR	153386	Identifier	need_msg		153280	0					
ANR	153387	Argument	class_name		153280	2					
ANR	153388	Identifier	class_name		153280	0					
ANR	153389	Argument	"""instance of """		153280	3					
ANR	153390	PrimaryExpression	"""instance of """		153280	0					
ANR	153391	Argument	ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name )		153280	4					
ANR	153392	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name )		153280	0					
ANR	153393	Callee	ZSTR_VAL		153280	0					
ANR	153394	Identifier	ZSTR_VAL		153280	0					
ANR	153395	ArgumentList	Z_OBJCE_P ( ret ) -> name		153280	1					
ANR	153396	Argument	Z_OBJCE_P ( ret ) -> name		153280	0					
ANR	153397	PtrMemberAccess	Z_OBJCE_P ( ret ) -> name		153280	0					
ANR	153398	CallExpression	Z_OBJCE_P ( ret )		153280	0					
ANR	153399	Callee	Z_OBJCE_P		153280	0					
ANR	153400	Identifier	Z_OBJCE_P		153280	0					
ANR	153401	ArgumentList	ret		153280	1					
ANR	153402	Argument	ret		153280	0					
ANR	153403	Identifier	ret		153280	0					
ANR	153404	Identifier	name		153280	1					
ANR	153405	ReturnStatement	return 0 ;	963:5:31431:31439	153280	1	True				
ANR	153406	PrimaryExpression	0		153280	0					
ANR	153407	ElseStatement	else		153280	0					
ANR	153408	IfStatement	if ( Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null )		153280	0					
ANR	153409	Condition	Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null	966:13:31465:31513	153280	0	True				
ANR	153410	OrExpression	Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null		153280	0		||			
ANR	153411	EqualityExpression	Z_TYPE_P ( ret ) != IS_NULL		153280	0		!=			
ANR	153412	CallExpression	Z_TYPE_P ( ret )		153280	0					
ANR	153413	Callee	Z_TYPE_P		153280	0					
ANR	153414	Identifier	Z_TYPE_P		153280	0					
ANR	153415	ArgumentList	ret		153280	1					
ANR	153416	Argument	ret		153280	0					
ANR	153417	Identifier	ret		153280	0					
ANR	153418	Identifier	IS_NULL		153280	1					
ANR	153419	UnaryOperationExpression	! ret_info -> allow_null		153280	1					
ANR	153420	UnaryOperator	!		153280	0					
ANR	153421	PtrMemberAccess	ret_info -> allow_null		153280	1					
ANR	153422	Identifier	ret_info		153280	0					
ANR	153423	Identifier	allow_null		153280	1					
ANR	153424	CompoundStatement		16:64:592:592	153280	1					
ANR	153425	IfStatement	if ( ret_info -> class_name )		153280	0					
ANR	153426	Condition	ret_info -> class_name	967:7:31525:31544	153280	0	True				
ANR	153427	PtrMemberAccess	ret_info -> class_name		153280	0					
ANR	153428	Identifier	ret_info		153280	0					
ANR	153429	Identifier	class_name		153280	1					
ANR	153430	CompoundStatement		17:29:623:623	153280	1					
ANR	153431	ExpressionStatement	"need_msg = zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) ret_info , & class_name , & ce )"	968:4:31553:31653	153280	0	True				
ANR	153432	AssignmentExpression	"need_msg = zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) ret_info , & class_name , & ce )"		153280	0		=			
ANR	153433	Identifier	need_msg		153280	0					
ANR	153434	CallExpression	"zend_verify_internal_arg_class_kind ( ( zend_internal_arg_info * ) ret_info , & class_name , & ce )"		153280	1					
ANR	153435	Callee	zend_verify_internal_arg_class_kind		153280	0					
ANR	153436	Identifier	zend_verify_internal_arg_class_kind		153280	0					
ANR	153437	ArgumentList	( zend_internal_arg_info * ) ret_info		153280	1					
ANR	153438	Argument	( zend_internal_arg_info * ) ret_info		153280	0					
ANR	153439	CastExpression	( zend_internal_arg_info * ) ret_info		153280	0					
ANR	153440	CastTarget	zend_internal_arg_info *		153280	0					
ANR	153441	Identifier	ret_info		153280	1					
ANR	153442	Argument	& class_name		153280	1					
ANR	153443	UnaryOperationExpression	& class_name		153280	0					
ANR	153444	UnaryOperator	&		153280	0					
ANR	153445	Identifier	class_name		153280	1					
ANR	153446	Argument	& ce		153280	2					
ANR	153447	UnaryOperationExpression	& ce		153280	0					
ANR	153448	UnaryOperator	&		153280	0					
ANR	153449	Identifier	ce		153280	1					
ANR	153450	ExpressionStatement	"zend_verify_internal_return_error ( zf , need_msg , class_name , zend_zval_type_name ( ret ) , """" )"	969:4:31659:31748	153280	1	True				
ANR	153451	CallExpression	"zend_verify_internal_return_error ( zf , need_msg , class_name , zend_zval_type_name ( ret ) , """" )"		153280	0					
ANR	153452	Callee	zend_verify_internal_return_error		153280	0					
ANR	153453	Identifier	zend_verify_internal_return_error		153280	0					
ANR	153454	ArgumentList	zf		153280	1					
ANR	153455	Argument	zf		153280	0					
ANR	153456	Identifier	zf		153280	0					
ANR	153457	Argument	need_msg		153280	1					
ANR	153458	Identifier	need_msg		153280	0					
ANR	153459	Argument	class_name		153280	2					
ANR	153460	Identifier	class_name		153280	0					
ANR	153461	Argument	zend_zval_type_name ( ret )		153280	3					
ANR	153462	CallExpression	zend_zval_type_name ( ret )		153280	0					
ANR	153463	Callee	zend_zval_type_name		153280	0					
ANR	153464	Identifier	zend_zval_type_name		153280	0					
ANR	153465	ArgumentList	ret		153280	1					
ANR	153466	Argument	ret		153280	0					
ANR	153467	Identifier	ret		153280	0					
ANR	153468	Argument	""""""		153280	4					
ANR	153469	PrimaryExpression	""""""		153280	0					
ANR	153470	ElseStatement	else		153280	0					
ANR	153471	IfStatement	if ( ret_info -> type_hint == IS_CALLABLE )		153280	0					
ANR	153472	Condition	ret_info -> type_hint == IS_CALLABLE	970:14:31764:31797	153280	0	True				
ANR	153473	EqualityExpression	ret_info -> type_hint == IS_CALLABLE		153280	0		==			
ANR	153474	PtrMemberAccess	ret_info -> type_hint		153280	0					
ANR	153475	Identifier	ret_info		153280	0					
ANR	153476	Identifier	type_hint		153280	1					
ANR	153477	Identifier	IS_CALLABLE		153280	1					
ANR	153478	CompoundStatement		20:50:876:876	153280	1					
ANR	153479	IfStatement	"if ( ! zend_is_callable ( ret , IS_CALLABLE_CHECK_SILENT , NULL ) && ( Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null ) )"		153280	0					
ANR	153480	Condition	"! zend_is_callable ( ret , IS_CALLABLE_CHECK_SILENT , NULL ) && ( Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null )"	971:8:31810:31918	153280	0	True				
ANR	153481	AndExpression	"! zend_is_callable ( ret , IS_CALLABLE_CHECK_SILENT , NULL ) && ( Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null )"		153280	0		&&			
ANR	153482	UnaryOperationExpression	"! zend_is_callable ( ret , IS_CALLABLE_CHECK_SILENT , NULL )"		153280	0					
ANR	153483	UnaryOperator	!		153280	0					
ANR	153484	CallExpression	"zend_is_callable ( ret , IS_CALLABLE_CHECK_SILENT , NULL )"		153280	1					
ANR	153485	Callee	zend_is_callable		153280	0					
ANR	153486	Identifier	zend_is_callable		153280	0					
ANR	153487	ArgumentList	ret		153280	1					
ANR	153488	Argument	ret		153280	0					
ANR	153489	Identifier	ret		153280	0					
ANR	153490	Argument	IS_CALLABLE_CHECK_SILENT		153280	1					
ANR	153491	Identifier	IS_CALLABLE_CHECK_SILENT		153280	0					
ANR	153492	Argument	NULL		153280	2					
ANR	153493	Identifier	NULL		153280	0					
ANR	153494	OrExpression	Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null		153280	1		||			
ANR	153495	EqualityExpression	Z_TYPE_P ( ret ) != IS_NULL		153280	0		!=			
ANR	153496	CallExpression	Z_TYPE_P ( ret )		153280	0					
ANR	153497	Callee	Z_TYPE_P		153280	0					
ANR	153498	Identifier	Z_TYPE_P		153280	0					
ANR	153499	ArgumentList	ret		153280	1					
ANR	153500	Argument	ret		153280	0					
ANR	153501	Identifier	ret		153280	0					
ANR	153502	Identifier	IS_NULL		153280	1					
ANR	153503	UnaryOperationExpression	! ret_info -> allow_null		153280	1					
ANR	153504	UnaryOperator	!		153280	0					
ANR	153505	PtrMemberAccess	ret_info -> allow_null		153280	1					
ANR	153506	Identifier	ret_info		153280	0					
ANR	153507	Identifier	allow_null		153280	1					
ANR	153508	CompoundStatement		21:119:997:997	153280	1					
ANR	153509	ExpressionStatement	"zend_verify_internal_return_error ( zf , ""be callable"" , """" , zend_zval_type_name ( ret ) , """" )"	972:5:31928:32014	153280	0	True				
ANR	153510	CallExpression	"zend_verify_internal_return_error ( zf , ""be callable"" , """" , zend_zval_type_name ( ret ) , """" )"		153280	0					
ANR	153511	Callee	zend_verify_internal_return_error		153280	0					
ANR	153512	Identifier	zend_verify_internal_return_error		153280	0					
ANR	153513	ArgumentList	zf		153280	1					
ANR	153514	Argument	zf		153280	0					
ANR	153515	Identifier	zf		153280	0					
ANR	153516	Argument	"""be callable"""		153280	1					
ANR	153517	PrimaryExpression	"""be callable"""		153280	0					
ANR	153518	Argument	""""""		153280	2					
ANR	153519	PrimaryExpression	""""""		153280	0					
ANR	153520	Argument	zend_zval_type_name ( ret )		153280	3					
ANR	153521	CallExpression	zend_zval_type_name ( ret )		153280	0					
ANR	153522	Callee	zend_zval_type_name		153280	0					
ANR	153523	Identifier	zend_zval_type_name		153280	0					
ANR	153524	ArgumentList	ret		153280	1					
ANR	153525	Argument	ret		153280	0					
ANR	153526	Identifier	ret		153280	0					
ANR	153527	Argument	""""""		153280	4					
ANR	153528	PrimaryExpression	""""""		153280	0					
ANR	153529	ReturnStatement	return 0 ;	973:5:32021:32029	153280	1	True				
ANR	153530	PrimaryExpression	0		153280	0					
ANR	153531	ElseStatement	else		153280	0					
ANR	153532	IfStatement	if ( ret_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE ) )		153280	0					
ANR	153533	Condition	ret_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE )	975:14:32051:32162	153280	0	True				
ANR	153534	AndExpression	ret_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE )		153280	0		&&			
ANR	153535	EqualityExpression	ret_info -> type_hint == _IS_BOOL		153280	0		==			
ANR	153536	PtrMemberAccess	ret_info -> type_hint		153280	0					
ANR	153537	Identifier	ret_info		153280	0					
ANR	153538	Identifier	type_hint		153280	1					
ANR	153539	Identifier	_IS_BOOL		153280	1					
ANR	153540	CallExpression	EXPECTED ( Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE )		153280	1					
ANR	153541	Callee	EXPECTED		153280	0					
ANR	153542	Identifier	EXPECTED		153280	0					
ANR	153543	ArgumentList	Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE		153280	1					
ANR	153544	Argument	Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE		153280	0					
ANR	153545	OrExpression	Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE		153280	0		||			
ANR	153546	EqualityExpression	Z_TYPE_P ( ret ) == IS_FALSE		153280	0		==			
ANR	153547	CallExpression	Z_TYPE_P ( ret )		153280	0					
ANR	153548	Callee	Z_TYPE_P		153280	0					
ANR	153549	Identifier	Z_TYPE_P		153280	0					
ANR	153550	ArgumentList	ret		153280	1					
ANR	153551	Argument	ret		153280	0					
ANR	153552	Identifier	ret		153280	0					
ANR	153553	Identifier	IS_FALSE		153280	1					
ANR	153554	EqualityExpression	Z_TYPE_P ( ret ) == IS_TRUE		153280	1		==			
ANR	153555	CallExpression	Z_TYPE_P ( ret )		153280	0					
ANR	153556	Callee	Z_TYPE_P		153280	0					
ANR	153557	Identifier	Z_TYPE_P		153280	0					
ANR	153558	ArgumentList	ret		153280	1					
ANR	153559	Argument	ret		153280	0					
ANR	153560	Identifier	ret		153280	0					
ANR	153561	Identifier	IS_TRUE		153280	1					
ANR	153562	CompoundStatement		26:79:1241:1241	153280	1					
ANR	153563	ElseStatement	else		153280	0					
ANR	153564	CompoundStatement		28:10:1268:1268	153280	0					
ANR	153565	ExpressionStatement	"zend_verify_internal_return_error ( zf , ""be of the type "" , zend_get_type_by_const ( ret_info -> type_hint ) , zend_zval_type_name ( ret ) , """" )"	980:4:32269:32400	153280	0	True				
ANR	153566	CallExpression	"zend_verify_internal_return_error ( zf , ""be of the type "" , zend_get_type_by_const ( ret_info -> type_hint ) , zend_zval_type_name ( ret ) , """" )"		153280	0					
ANR	153567	Callee	zend_verify_internal_return_error		153280	0					
ANR	153568	Identifier	zend_verify_internal_return_error		153280	0					
ANR	153569	ArgumentList	zf		153280	1					
ANR	153570	Argument	zf		153280	0					
ANR	153571	Identifier	zf		153280	0					
ANR	153572	Argument	"""be of the type """		153280	1					
ANR	153573	PrimaryExpression	"""be of the type """		153280	0					
ANR	153574	Argument	zend_get_type_by_const ( ret_info -> type_hint )		153280	2					
ANR	153575	CallExpression	zend_get_type_by_const ( ret_info -> type_hint )		153280	0					
ANR	153576	Callee	zend_get_type_by_const		153280	0					
ANR	153577	Identifier	zend_get_type_by_const		153280	0					
ANR	153578	ArgumentList	ret_info -> type_hint		153280	1					
ANR	153579	Argument	ret_info -> type_hint		153280	0					
ANR	153580	PtrMemberAccess	ret_info -> type_hint		153280	0					
ANR	153581	Identifier	ret_info		153280	0					
ANR	153582	Identifier	type_hint		153280	1					
ANR	153583	Argument	zend_zval_type_name ( ret )		153280	3					
ANR	153584	CallExpression	zend_zval_type_name ( ret )		153280	0					
ANR	153585	Callee	zend_zval_type_name		153280	0					
ANR	153586	Identifier	zend_zval_type_name		153280	0					
ANR	153587	ArgumentList	ret		153280	1					
ANR	153588	Argument	ret		153280	0					
ANR	153589	Identifier	ret		153280	0					
ANR	153590	Argument	""""""		153280	4					
ANR	153591	PrimaryExpression	""""""		153280	0					
ANR	153592	ReturnStatement	return 0 ;	981:4:32406:32414	153280	1	True				
ANR	153593	PrimaryExpression	0		153280	0					
ANR	153594	ReturnStatement	return 1 ;	985:1:32429:32437	153280	4	True				
ANR	153595	PrimaryExpression	1		153280	0					
ANR	153596	ReturnType	static int		153280	1					
ANR	153597	Identifier	zend_verify_internal_return_type		153280	2					
ANR	153598	ParameterList	"zend_function * zf , zval * ret"		153280	3					
ANR	153599	Parameter	zend_function * zf	950:44:30893:30909	153280	0	True				
ANR	153600	ParameterType	zend_function *		153280	0					
ANR	153601	Identifier	zf		153280	1					
ANR	153602	Parameter	zval * ret	950:63:30912:30920	153280	1	True				
ANR	153603	ParameterType	zval *		153280	0					
ANR	153604	Identifier	ret		153280	1					
ANR	153605	CFGEntryNode	ENTRY		153280		True				
ANR	153606	CFGExitNode	EXIT		153280		True				
ANR	153607	Symbol	instanceof_function		153280						
ANR	153608	Symbol	need_msg		153280						
ANR	153609	Symbol	& class_name		153280						
ANR	153610	Symbol	zf -> common . arg_info		153280						
ANR	153611	Symbol	zf -> common		153280						
ANR	153612	Symbol	ret_info -> type_hint		153280						
ANR	153613	Symbol	zend_zval_type_name		153280						
ANR	153614	Symbol	& ce		153280						
ANR	153615	Symbol	Z_OBJCE_P ( ret ) -> name		153280						
ANR	153616	Symbol	_IS_BOOL		153280						
ANR	153617	Symbol	IS_NULL		153280						
ANR	153618	Symbol	ret_info -> allow_null		153280						
ANR	153619	Symbol	* ret_info		153280						
ANR	153620	Symbol	Z_OBJCE_P		153280						
ANR	153621	Symbol	class_name		153280						
ANR	153622	Symbol	IS_FALSE		153280						
ANR	153623	Symbol	* Z_OBJCE_P		153280						
ANR	153624	Symbol	ret		153280						
ANR	153625	Symbol	IS_CALLABLE		153280						
ANR	153626	Symbol	zend_get_type_by_const		153280						
ANR	153627	Symbol	ce		153280						
ANR	153628	Symbol	NULL		153280						
ANR	153629	Symbol	zend_is_callable		153280						
ANR	153630	Symbol	IS_TRUE		153280						
ANR	153631	Symbol	zend_verify_internal_arg_class_kind		153280						
ANR	153632	Symbol	zf		153280						
ANR	153633	Symbol	Z_TYPE_P		153280						
ANR	153634	Symbol	ZSTR_VAL		153280						
ANR	153635	Symbol	* zf		153280						
ANR	153636	Symbol	ret_info		153280						
ANR	153637	Symbol	IS_CALLABLE_CHECK_SILENT		153280						
ANR	153638	Symbol	ret_info -> class_name		153280						
ANR	153639	Symbol	EXPECTED		153280						
ANR	153640	Function	zend_verify_return_type	989:0:32449:34673							
ANR	153641	FunctionDef	"zend_verify_return_type (zend_function * zf , zval * ret , void * * cache_slot)"		153640	0					
ANR	153642	CompoundStatement		990:0:32553:34673	153640	0					
ANR	153643	IdentifierDeclStatement	zend_arg_info * ret_info = zf -> common . arg_info - 1 ;	991:1:32556:32605	153640	0	True				
ANR	153644	IdentifierDecl	* ret_info = zf -> common . arg_info - 1		153640	0					
ANR	153645	IdentifierDeclType	zend_arg_info *		153640	0					
ANR	153646	Identifier	ret_info		153640	1					
ANR	153647	AssignmentExpression	* ret_info = zf -> common . arg_info - 1		153640	2		=			
ANR	153648	Identifier	ret_info		153640	0					
ANR	153649	AdditiveExpression	zf -> common . arg_info - 1		153640	1		-			
ANR	153650	MemberAccess	zf -> common . arg_info		153640	0					
ANR	153651	PtrMemberAccess	zf -> common		153640	0					
ANR	153652	Identifier	zf		153640	0					
ANR	153653	Identifier	common		153640	1					
ANR	153654	Identifier	arg_info		153640	1					
ANR	153655	PrimaryExpression	1		153640	1					
ANR	153656	IdentifierDeclStatement	char * need_msg ;	992:1:32608:32622	153640	1	True				
ANR	153657	IdentifierDecl	* need_msg		153640	0					
ANR	153658	IdentifierDeclType	char *		153640	0					
ANR	153659	Identifier	need_msg		153640	1					
ANR	153660	IdentifierDeclStatement	zend_class_entry * ce ;	993:1:32625:32645	153640	2	True				
ANR	153661	IdentifierDecl	* ce		153640	0					
ANR	153662	IdentifierDeclType	zend_class_entry *		153640	0					
ANR	153663	Identifier	ce		153640	1					
ANR	153664	IfStatement	if ( ret_info -> type_hint )		153640	3					
ANR	153665	Condition	ret_info -> type_hint	995:5:32653:32671	153640	0	True				
ANR	153666	PtrMemberAccess	ret_info -> type_hint		153640	0					
ANR	153667	Identifier	ret_info		153640	0					
ANR	153668	Identifier	type_hint		153640	1					
ANR	153669	CompoundStatement		6:26:120:120	153640	1					
ANR	153670	IfStatement	if ( EXPECTED ( ret_info -> type_hint == Z_TYPE_P ( ret ) ) )		153640	0					
ANR	153671	Condition	EXPECTED ( ret_info -> type_hint == Z_TYPE_P ( ret ) )	996:6:32682:32727	153640	0	True				
ANR	153672	CallExpression	EXPECTED ( ret_info -> type_hint == Z_TYPE_P ( ret ) )		153640	0					
ANR	153673	Callee	EXPECTED		153640	0					
ANR	153674	Identifier	EXPECTED		153640	0					
ANR	153675	ArgumentList	ret_info -> type_hint == Z_TYPE_P ( ret )		153640	1					
ANR	153676	Argument	ret_info -> type_hint == Z_TYPE_P ( ret )		153640	0					
ANR	153677	EqualityExpression	ret_info -> type_hint == Z_TYPE_P ( ret )		153640	0		==			
ANR	153678	PtrMemberAccess	ret_info -> type_hint		153640	0					
ANR	153679	Identifier	ret_info		153640	0					
ANR	153680	Identifier	type_hint		153640	1					
ANR	153681	CallExpression	Z_TYPE_P ( ret )		153640	1					
ANR	153682	Callee	Z_TYPE_P		153640	0					
ANR	153683	Identifier	Z_TYPE_P		153640	0					
ANR	153684	ArgumentList	ret		153640	1					
ANR	153685	Argument	ret		153640	0					
ANR	153686	Identifier	ret		153640	0					
ANR	153687	CompoundStatement		7:54:176:176	153640	1					
ANR	153688	IfStatement	if ( ret_info -> class_name )		153640	0					
ANR	153689	Condition	ret_info -> class_name	997:7:32739:32758	153640	0	True				
ANR	153690	PtrMemberAccess	ret_info -> class_name		153640	0					
ANR	153691	Identifier	ret_info		153640	0					
ANR	153692	Identifier	class_name		153640	1					
ANR	153693	CompoundStatement		8:29:207:207	153640	1					
ANR	153694	IfStatement	if ( EXPECTED ( * cache_slot ) )		153640	0					
ANR	153695	Condition	EXPECTED ( * cache_slot )	998:8:32771:32791	153640	0	True				
ANR	153696	CallExpression	EXPECTED ( * cache_slot )		153640	0					
ANR	153697	Callee	EXPECTED		153640	0					
ANR	153698	Identifier	EXPECTED		153640	0					
ANR	153699	ArgumentList	* cache_slot		153640	1					
ANR	153700	Argument	* cache_slot		153640	0					
ANR	153701	UnaryOperationExpression	* cache_slot		153640	0					
ANR	153702	UnaryOperator	*		153640	0					
ANR	153703	Identifier	cache_slot		153640	1					
ANR	153704	CompoundStatement		9:31:240:240	153640	1					
ANR	153705	ExpressionStatement	ce = ( zend_class_entry * ) * cache_slot	999:5:32801:32836	153640	0	True				
ANR	153706	AssignmentExpression	ce = ( zend_class_entry * ) * cache_slot		153640	0		=			
ANR	153707	Identifier	ce		153640	0					
ANR	153708	CastExpression	( zend_class_entry * ) * cache_slot		153640	1					
ANR	153709	CastTarget	zend_class_entry *		153640	0					
ANR	153710	UnaryOperationExpression	* cache_slot		153640	1					
ANR	153711	UnaryOperator	*		153640	0					
ANR	153712	Identifier	cache_slot		153640	1					
ANR	153713	ElseStatement	else		153640	0					
ANR	153714	CompoundStatement		11:11:295:295	153640	0					
ANR	153715	ExpressionStatement	ce = zend_verify_arg_class_kind ( ret_info )	1001:5:32856:32897	153640	0	True				
ANR	153716	AssignmentExpression	ce = zend_verify_arg_class_kind ( ret_info )		153640	0		=			
ANR	153717	Identifier	ce		153640	0					
ANR	153718	CallExpression	zend_verify_arg_class_kind ( ret_info )		153640	1					
ANR	153719	Callee	zend_verify_arg_class_kind		153640	0					
ANR	153720	Identifier	zend_verify_arg_class_kind		153640	0					
ANR	153721	ArgumentList	ret_info		153640	1					
ANR	153722	Argument	ret_info		153640	0					
ANR	153723	Identifier	ret_info		153640	0					
ANR	153724	IfStatement	if ( UNEXPECTED ( ! ce ) )		153640	1					
ANR	153725	Condition	UNEXPECTED ( ! ce )	1002:9:32908:32922	153640	0	True				
ANR	153726	CallExpression	UNEXPECTED ( ! ce )		153640	0					
ANR	153727	Callee	UNEXPECTED		153640	0					
ANR	153728	Identifier	UNEXPECTED		153640	0					
ANR	153729	ArgumentList	! ce		153640	1					
ANR	153730	Argument	! ce		153640	0					
ANR	153731	UnaryOperationExpression	! ce		153640	0					
ANR	153732	UnaryOperator	!		153640	0					
ANR	153733	Identifier	ce		153640	1					
ANR	153734	CompoundStatement		13:26:371:371	153640	1					
ANR	153735	ExpressionStatement	"zend_verify_return_error ( zf , ""be an instance of "" , ZSTR_VAL ( ret_info -> class_name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name ) )"	1003:6:32933:33063	153640	0	True				
ANR	153736	CallExpression	"zend_verify_return_error ( zf , ""be an instance of "" , ZSTR_VAL ( ret_info -> class_name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name ) )"		153640	0					
ANR	153737	Callee	zend_verify_return_error		153640	0					
ANR	153738	Identifier	zend_verify_return_error		153640	0					
ANR	153739	ArgumentList	zf		153640	1					
ANR	153740	Argument	zf		153640	0					
ANR	153741	Identifier	zf		153640	0					
ANR	153742	Argument	"""be an instance of """		153640	1					
ANR	153743	PrimaryExpression	"""be an instance of """		153640	0					
ANR	153744	Argument	ZSTR_VAL ( ret_info -> class_name )		153640	2					
ANR	153745	CallExpression	ZSTR_VAL ( ret_info -> class_name )		153640	0					
ANR	153746	Callee	ZSTR_VAL		153640	0					
ANR	153747	Identifier	ZSTR_VAL		153640	0					
ANR	153748	ArgumentList	ret_info -> class_name		153640	1					
ANR	153749	Argument	ret_info -> class_name		153640	0					
ANR	153750	PtrMemberAccess	ret_info -> class_name		153640	0					
ANR	153751	Identifier	ret_info		153640	0					
ANR	153752	Identifier	class_name		153640	1					
ANR	153753	Argument	"""instance of """		153640	3					
ANR	153754	PrimaryExpression	"""instance of """		153640	0					
ANR	153755	Argument	ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name )		153640	4					
ANR	153756	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name )		153640	0					
ANR	153757	Callee	ZSTR_VAL		153640	0					
ANR	153758	Identifier	ZSTR_VAL		153640	0					
ANR	153759	ArgumentList	Z_OBJCE_P ( ret ) -> name		153640	1					
ANR	153760	Argument	Z_OBJCE_P ( ret ) -> name		153640	0					
ANR	153761	PtrMemberAccess	Z_OBJCE_P ( ret ) -> name		153640	0					
ANR	153762	CallExpression	Z_OBJCE_P ( ret )		153640	0					
ANR	153763	Callee	Z_OBJCE_P		153640	0					
ANR	153764	Identifier	Z_OBJCE_P		153640	0					
ANR	153765	ArgumentList	ret		153640	1					
ANR	153766	Argument	ret		153640	0					
ANR	153767	Identifier	ret		153640	0					
ANR	153768	Identifier	name		153640	1					
ANR	153769	ReturnStatement	return ;	1004:6:33071:33077	153640	1	True				
ANR	153770	ExpressionStatement	* cache_slot = ( void * ) ce	1006:5:33091:33114	153640	2	True				
ANR	153771	AssignmentExpression	* cache_slot = ( void * ) ce		153640	0		=			
ANR	153772	UnaryOperationExpression	* cache_slot		153640	0					
ANR	153773	UnaryOperator	*		153640	0					
ANR	153774	Identifier	cache_slot		153640	1					
ANR	153775	CastExpression	( void * ) ce		153640	1					
ANR	153776	CastTarget	void *		153640	0					
ANR	153777	Identifier	ce		153640	1					
ANR	153778	IfStatement	"if ( UNEXPECTED ( ! instanceof_function ( Z_OBJCE_P ( ret ) , ce ) ) )"		153640	1					
ANR	153779	Condition	"UNEXPECTED ( ! instanceof_function ( Z_OBJCE_P ( ret ) , ce ) )"	1008:8:33130:33181	153640	0	True				
ANR	153780	CallExpression	"UNEXPECTED ( ! instanceof_function ( Z_OBJCE_P ( ret ) , ce ) )"		153640	0					
ANR	153781	Callee	UNEXPECTED		153640	0					
ANR	153782	Identifier	UNEXPECTED		153640	0					
ANR	153783	ArgumentList	"! instanceof_function ( Z_OBJCE_P ( ret ) , ce )"		153640	1					
ANR	153784	Argument	"! instanceof_function ( Z_OBJCE_P ( ret ) , ce )"		153640	0					
ANR	153785	UnaryOperationExpression	"! instanceof_function ( Z_OBJCE_P ( ret ) , ce )"		153640	0					
ANR	153786	UnaryOperator	!		153640	0					
ANR	153787	CallExpression	"instanceof_function ( Z_OBJCE_P ( ret ) , ce )"		153640	1					
ANR	153788	Callee	instanceof_function		153640	0					
ANR	153789	Identifier	instanceof_function		153640	0					
ANR	153790	ArgumentList	Z_OBJCE_P ( ret )		153640	1					
ANR	153791	Argument	Z_OBJCE_P ( ret )		153640	0					
ANR	153792	CallExpression	Z_OBJCE_P ( ret )		153640	0					
ANR	153793	Callee	Z_OBJCE_P		153640	0					
ANR	153794	Identifier	Z_OBJCE_P		153640	0					
ANR	153795	ArgumentList	ret		153640	1					
ANR	153796	Argument	ret		153640	0					
ANR	153797	Identifier	ret		153640	0					
ANR	153798	Argument	ce		153640	1					
ANR	153799	Identifier	ce		153640	0					
ANR	153800	CompoundStatement		19:62:630:630	153640	1					
ANR	153801	ExpressionStatement	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """	1009:5:33191:33297	153640	0	True				
ANR	153802	AssignmentExpression	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		153640	0		=			
ANR	153803	Identifier	need_msg		153640	0					
ANR	153804	ConditionalExpression	"( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		153640	1					
ANR	153805	Condition	ce -> ce_flags & ZEND_ACC_INTERFACE		153640	0					
ANR	153806	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		153640	0		&			
ANR	153807	PtrMemberAccess	ce -> ce_flags		153640	0					
ANR	153808	Identifier	ce		153640	0					
ANR	153809	Identifier	ce_flags		153640	1					
ANR	153810	Identifier	ZEND_ACC_INTERFACE		153640	1					
ANR	153811	PrimaryExpression	"""implement interface """		153640	1					
ANR	153812	PrimaryExpression	"""be an instance of """		153640	2					
ANR	153813	ExpressionStatement	"zend_verify_return_error ( zf , need_msg , ZSTR_VAL ( ce -> name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name ) )"	1012:5:33304:33410	153640	1	True				
ANR	153814	CallExpression	"zend_verify_return_error ( zf , need_msg , ZSTR_VAL ( ce -> name ) , ""instance of "" , ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name ) )"		153640	0					
ANR	153815	Callee	zend_verify_return_error		153640	0					
ANR	153816	Identifier	zend_verify_return_error		153640	0					
ANR	153817	ArgumentList	zf		153640	1					
ANR	153818	Argument	zf		153640	0					
ANR	153819	Identifier	zf		153640	0					
ANR	153820	Argument	need_msg		153640	1					
ANR	153821	Identifier	need_msg		153640	0					
ANR	153822	Argument	ZSTR_VAL ( ce -> name )		153640	2					
ANR	153823	CallExpression	ZSTR_VAL ( ce -> name )		153640	0					
ANR	153824	Callee	ZSTR_VAL		153640	0					
ANR	153825	Identifier	ZSTR_VAL		153640	0					
ANR	153826	ArgumentList	ce -> name		153640	1					
ANR	153827	Argument	ce -> name		153640	0					
ANR	153828	PtrMemberAccess	ce -> name		153640	0					
ANR	153829	Identifier	ce		153640	0					
ANR	153830	Identifier	name		153640	1					
ANR	153831	Argument	"""instance of """		153640	3					
ANR	153832	PrimaryExpression	"""instance of """		153640	0					
ANR	153833	Argument	ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name )		153640	4					
ANR	153834	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( ret ) -> name )		153640	0					
ANR	153835	Callee	ZSTR_VAL		153640	0					
ANR	153836	Identifier	ZSTR_VAL		153640	0					
ANR	153837	ArgumentList	Z_OBJCE_P ( ret ) -> name		153640	1					
ANR	153838	Argument	Z_OBJCE_P ( ret ) -> name		153640	0					
ANR	153839	PtrMemberAccess	Z_OBJCE_P ( ret ) -> name		153640	0					
ANR	153840	CallExpression	Z_OBJCE_P ( ret )		153640	0					
ANR	153841	Callee	Z_OBJCE_P		153640	0					
ANR	153842	Identifier	Z_OBJCE_P		153640	0					
ANR	153843	ArgumentList	ret		153640	1					
ANR	153844	Argument	ret		153640	0					
ANR	153845	Identifier	ret		153640	0					
ANR	153846	Identifier	name		153640	1					
ANR	153847	ElseStatement	else		153640	0					
ANR	153848	IfStatement	if ( Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null )		153640	0					
ANR	153849	Condition	Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null	1015:13:33436:33484	153640	0	True				
ANR	153850	OrExpression	Z_TYPE_P ( ret ) != IS_NULL || ! ret_info -> allow_null		153640	0		||			
ANR	153851	EqualityExpression	Z_TYPE_P ( ret ) != IS_NULL		153640	0		!=			
ANR	153852	CallExpression	Z_TYPE_P ( ret )		153640	0					
ANR	153853	Callee	Z_TYPE_P		153640	0					
ANR	153854	Identifier	Z_TYPE_P		153640	0					
ANR	153855	ArgumentList	ret		153640	1					
ANR	153856	Argument	ret		153640	0					
ANR	153857	Identifier	ret		153640	0					
ANR	153858	Identifier	IS_NULL		153640	1					
ANR	153859	UnaryOperationExpression	! ret_info -> allow_null		153640	1					
ANR	153860	UnaryOperator	!		153640	0					
ANR	153861	PtrMemberAccess	ret_info -> allow_null		153640	1					
ANR	153862	Identifier	ret_info		153640	0					
ANR	153863	Identifier	allow_null		153640	1					
ANR	153864	CompoundStatement		26:64:933:933	153640	1					
ANR	153865	IfStatement	if ( ret_info -> class_name )		153640	0					
ANR	153866	Condition	ret_info -> class_name	1016:7:33496:33515	153640	0	True				
ANR	153867	PtrMemberAccess	ret_info -> class_name		153640	0					
ANR	153868	Identifier	ret_info		153640	0					
ANR	153869	Identifier	class_name		153640	1					
ANR	153870	CompoundStatement		27:29:964:964	153640	1					
ANR	153871	IfStatement	if ( EXPECTED ( * cache_slot ) )		153640	0					
ANR	153872	Condition	EXPECTED ( * cache_slot )	1017:8:33528:33548	153640	0	True				
ANR	153873	CallExpression	EXPECTED ( * cache_slot )		153640	0					
ANR	153874	Callee	EXPECTED		153640	0					
ANR	153875	Identifier	EXPECTED		153640	0					
ANR	153876	ArgumentList	* cache_slot		153640	1					
ANR	153877	Argument	* cache_slot		153640	0					
ANR	153878	UnaryOperationExpression	* cache_slot		153640	0					
ANR	153879	UnaryOperator	*		153640	0					
ANR	153880	Identifier	cache_slot		153640	1					
ANR	153881	CompoundStatement		28:31:997:997	153640	1					
ANR	153882	ExpressionStatement	ce = ( zend_class_entry * ) * cache_slot	1018:5:33558:33593	153640	0	True				
ANR	153883	AssignmentExpression	ce = ( zend_class_entry * ) * cache_slot		153640	0		=			
ANR	153884	Identifier	ce		153640	0					
ANR	153885	CastExpression	( zend_class_entry * ) * cache_slot		153640	1					
ANR	153886	CastTarget	zend_class_entry *		153640	0					
ANR	153887	UnaryOperationExpression	* cache_slot		153640	1					
ANR	153888	UnaryOperator	*		153640	0					
ANR	153889	Identifier	cache_slot		153640	1					
ANR	153890	ElseStatement	else		153640	0					
ANR	153891	CompoundStatement		30:11:1052:1052	153640	0					
ANR	153892	ExpressionStatement	ce = zend_verify_arg_class_kind ( ret_info )	1020:5:33613:33654	153640	0	True				
ANR	153893	AssignmentExpression	ce = zend_verify_arg_class_kind ( ret_info )		153640	0		=			
ANR	153894	Identifier	ce		153640	0					
ANR	153895	CallExpression	zend_verify_arg_class_kind ( ret_info )		153640	1					
ANR	153896	Callee	zend_verify_arg_class_kind		153640	0					
ANR	153897	Identifier	zend_verify_arg_class_kind		153640	0					
ANR	153898	ArgumentList	ret_info		153640	1					
ANR	153899	Argument	ret_info		153640	0					
ANR	153900	Identifier	ret_info		153640	0					
ANR	153901	IfStatement	if ( UNEXPECTED ( ! ce ) )		153640	1					
ANR	153902	Condition	UNEXPECTED ( ! ce )	1021:9:33665:33679	153640	0	True				
ANR	153903	CallExpression	UNEXPECTED ( ! ce )		153640	0					
ANR	153904	Callee	UNEXPECTED		153640	0					
ANR	153905	Identifier	UNEXPECTED		153640	0					
ANR	153906	ArgumentList	! ce		153640	1					
ANR	153907	Argument	! ce		153640	0					
ANR	153908	UnaryOperationExpression	! ce		153640	0					
ANR	153909	UnaryOperator	!		153640	0					
ANR	153910	Identifier	ce		153640	1					
ANR	153911	CompoundStatement		32:26:1128:1128	153640	1					
ANR	153912	ExpressionStatement	"zend_verify_return_error ( zf , ""be an instance of "" , ZSTR_VAL ( ret_info -> class_name ) , zend_zval_type_name ( ret ) , """" )"	1022:6:33690:33802	153640	0	True				
ANR	153913	CallExpression	"zend_verify_return_error ( zf , ""be an instance of "" , ZSTR_VAL ( ret_info -> class_name ) , zend_zval_type_name ( ret ) , """" )"		153640	0					
ANR	153914	Callee	zend_verify_return_error		153640	0					
ANR	153915	Identifier	zend_verify_return_error		153640	0					
ANR	153916	ArgumentList	zf		153640	1					
ANR	153917	Argument	zf		153640	0					
ANR	153918	Identifier	zf		153640	0					
ANR	153919	Argument	"""be an instance of """		153640	1					
ANR	153920	PrimaryExpression	"""be an instance of """		153640	0					
ANR	153921	Argument	ZSTR_VAL ( ret_info -> class_name )		153640	2					
ANR	153922	CallExpression	ZSTR_VAL ( ret_info -> class_name )		153640	0					
ANR	153923	Callee	ZSTR_VAL		153640	0					
ANR	153924	Identifier	ZSTR_VAL		153640	0					
ANR	153925	ArgumentList	ret_info -> class_name		153640	1					
ANR	153926	Argument	ret_info -> class_name		153640	0					
ANR	153927	PtrMemberAccess	ret_info -> class_name		153640	0					
ANR	153928	Identifier	ret_info		153640	0					
ANR	153929	Identifier	class_name		153640	1					
ANR	153930	Argument	zend_zval_type_name ( ret )		153640	3					
ANR	153931	CallExpression	zend_zval_type_name ( ret )		153640	0					
ANR	153932	Callee	zend_zval_type_name		153640	0					
ANR	153933	Identifier	zend_zval_type_name		153640	0					
ANR	153934	ArgumentList	ret		153640	1					
ANR	153935	Argument	ret		153640	0					
ANR	153936	Identifier	ret		153640	0					
ANR	153937	Argument	""""""		153640	4					
ANR	153938	PrimaryExpression	""""""		153640	0					
ANR	153939	ReturnStatement	return ;	1023:6:33810:33816	153640	1	True				
ANR	153940	ExpressionStatement	* cache_slot = ( void * ) ce	1025:5:33830:33853	153640	2	True				
ANR	153941	AssignmentExpression	* cache_slot = ( void * ) ce		153640	0		=			
ANR	153942	UnaryOperationExpression	* cache_slot		153640	0					
ANR	153943	UnaryOperator	*		153640	0					
ANR	153944	Identifier	cache_slot		153640	1					
ANR	153945	CastExpression	( void * ) ce		153640	1					
ANR	153946	CastTarget	void *		153640	0					
ANR	153947	Identifier	ce		153640	1					
ANR	153948	ExpressionStatement	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """	1027:4:33865:33969	153640	1	True				
ANR	153949	AssignmentExpression	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		153640	0		=			
ANR	153950	Identifier	need_msg		153640	0					
ANR	153951	ConditionalExpression	"( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		153640	1					
ANR	153952	Condition	ce -> ce_flags & ZEND_ACC_INTERFACE		153640	0					
ANR	153953	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		153640	0		&			
ANR	153954	PtrMemberAccess	ce -> ce_flags		153640	0					
ANR	153955	Identifier	ce		153640	0					
ANR	153956	Identifier	ce_flags		153640	1					
ANR	153957	Identifier	ZEND_ACC_INTERFACE		153640	1					
ANR	153958	PrimaryExpression	"""implement interface """		153640	1					
ANR	153959	PrimaryExpression	"""be an instance of """		153640	2					
ANR	153960	ExpressionStatement	"zend_verify_return_error ( zf , need_msg , ZSTR_VAL ( ce -> name ) , zend_zval_type_name ( ret ) , """" )"	1030:4:33975:34063	153640	2	True				
ANR	153961	CallExpression	"zend_verify_return_error ( zf , need_msg , ZSTR_VAL ( ce -> name ) , zend_zval_type_name ( ret ) , """" )"		153640	0					
ANR	153962	Callee	zend_verify_return_error		153640	0					
ANR	153963	Identifier	zend_verify_return_error		153640	0					
ANR	153964	ArgumentList	zf		153640	1					
ANR	153965	Argument	zf		153640	0					
ANR	153966	Identifier	zf		153640	0					
ANR	153967	Argument	need_msg		153640	1					
ANR	153968	Identifier	need_msg		153640	0					
ANR	153969	Argument	ZSTR_VAL ( ce -> name )		153640	2					
ANR	153970	CallExpression	ZSTR_VAL ( ce -> name )		153640	0					
ANR	153971	Callee	ZSTR_VAL		153640	0					
ANR	153972	Identifier	ZSTR_VAL		153640	0					
ANR	153973	ArgumentList	ce -> name		153640	1					
ANR	153974	Argument	ce -> name		153640	0					
ANR	153975	PtrMemberAccess	ce -> name		153640	0					
ANR	153976	Identifier	ce		153640	0					
ANR	153977	Identifier	name		153640	1					
ANR	153978	Argument	zend_zval_type_name ( ret )		153640	3					
ANR	153979	CallExpression	zend_zval_type_name ( ret )		153640	0					
ANR	153980	Callee	zend_zval_type_name		153640	0					
ANR	153981	Identifier	zend_zval_type_name		153640	0					
ANR	153982	ArgumentList	ret		153640	1					
ANR	153983	Argument	ret		153640	0					
ANR	153984	Identifier	ret		153640	0					
ANR	153985	Argument	""""""		153640	4					
ANR	153986	PrimaryExpression	""""""		153640	0					
ANR	153987	ElseStatement	else		153640	0					
ANR	153988	IfStatement	if ( ret_info -> type_hint == IS_CALLABLE )		153640	0					
ANR	153989	Condition	ret_info -> type_hint == IS_CALLABLE	1031:14:34079:34112	153640	0	True				
ANR	153990	EqualityExpression	ret_info -> type_hint == IS_CALLABLE		153640	0		==			
ANR	153991	PtrMemberAccess	ret_info -> type_hint		153640	0					
ANR	153992	Identifier	ret_info		153640	0					
ANR	153993	Identifier	type_hint		153640	1					
ANR	153994	Identifier	IS_CALLABLE		153640	1					
ANR	153995	CompoundStatement		42:50:1561:1561	153640	1					
ANR	153996	IfStatement	"if ( ! zend_is_callable ( ret , IS_CALLABLE_CHECK_SILENT , NULL ) )"		153640	0					
ANR	153997	Condition	"! zend_is_callable ( ret , IS_CALLABLE_CHECK_SILENT , NULL )"	1032:8:34125:34178	153640	0	True				
ANR	153998	UnaryOperationExpression	"! zend_is_callable ( ret , IS_CALLABLE_CHECK_SILENT , NULL )"		153640	0					
ANR	153999	UnaryOperator	!		153640	0					
ANR	154000	CallExpression	"zend_is_callable ( ret , IS_CALLABLE_CHECK_SILENT , NULL )"		153640	1					
ANR	154001	Callee	zend_is_callable		153640	0					
ANR	154002	Identifier	zend_is_callable		153640	0					
ANR	154003	ArgumentList	ret		153640	1					
ANR	154004	Argument	ret		153640	0					
ANR	154005	Identifier	ret		153640	0					
ANR	154006	Argument	IS_CALLABLE_CHECK_SILENT		153640	1					
ANR	154007	Identifier	IS_CALLABLE_CHECK_SILENT		153640	0					
ANR	154008	Argument	NULL		153640	2					
ANR	154009	Identifier	NULL		153640	0					
ANR	154010	CompoundStatement		43:64:1627:1627	153640	1					
ANR	154011	ExpressionStatement	"zend_verify_return_error ( zf , ""be callable"" , """" , zend_zval_type_name ( ret ) , """" )"	1033:5:34188:34265	153640	0	True				
ANR	154012	CallExpression	"zend_verify_return_error ( zf , ""be callable"" , """" , zend_zval_type_name ( ret ) , """" )"		153640	0					
ANR	154013	Callee	zend_verify_return_error		153640	0					
ANR	154014	Identifier	zend_verify_return_error		153640	0					
ANR	154015	ArgumentList	zf		153640	1					
ANR	154016	Argument	zf		153640	0					
ANR	154017	Identifier	zf		153640	0					
ANR	154018	Argument	"""be callable"""		153640	1					
ANR	154019	PrimaryExpression	"""be callable"""		153640	0					
ANR	154020	Argument	""""""		153640	2					
ANR	154021	PrimaryExpression	""""""		153640	0					
ANR	154022	Argument	zend_zval_type_name ( ret )		153640	3					
ANR	154023	CallExpression	zend_zval_type_name ( ret )		153640	0					
ANR	154024	Callee	zend_zval_type_name		153640	0					
ANR	154025	Identifier	zend_zval_type_name		153640	0					
ANR	154026	ArgumentList	ret		153640	1					
ANR	154027	Argument	ret		153640	0					
ANR	154028	Identifier	ret		153640	0					
ANR	154029	Argument	""""""		153640	4					
ANR	154030	PrimaryExpression	""""""		153640	0					
ANR	154031	ElseStatement	else		153640	0					
ANR	154032	IfStatement	if ( ret_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE ) )		153640	0					
ANR	154033	Condition	ret_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE )	1035:14:34287:34398	153640	0	True				
ANR	154034	AndExpression	ret_info -> type_hint == _IS_BOOL && EXPECTED ( Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE )		153640	0		&&			
ANR	154035	EqualityExpression	ret_info -> type_hint == _IS_BOOL		153640	0		==			
ANR	154036	PtrMemberAccess	ret_info -> type_hint		153640	0					
ANR	154037	Identifier	ret_info		153640	0					
ANR	154038	Identifier	type_hint		153640	1					
ANR	154039	Identifier	_IS_BOOL		153640	1					
ANR	154040	CallExpression	EXPECTED ( Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE )		153640	1					
ANR	154041	Callee	EXPECTED		153640	0					
ANR	154042	Identifier	EXPECTED		153640	0					
ANR	154043	ArgumentList	Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE		153640	1					
ANR	154044	Argument	Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE		153640	0					
ANR	154045	OrExpression	Z_TYPE_P ( ret ) == IS_FALSE || Z_TYPE_P ( ret ) == IS_TRUE		153640	0		||			
ANR	154046	EqualityExpression	Z_TYPE_P ( ret ) == IS_FALSE		153640	0		==			
ANR	154047	CallExpression	Z_TYPE_P ( ret )		153640	0					
ANR	154048	Callee	Z_TYPE_P		153640	0					
ANR	154049	Identifier	Z_TYPE_P		153640	0					
ANR	154050	ArgumentList	ret		153640	1					
ANR	154051	Argument	ret		153640	0					
ANR	154052	Identifier	ret		153640	0					
ANR	154053	Identifier	IS_FALSE		153640	1					
ANR	154054	EqualityExpression	Z_TYPE_P ( ret ) == IS_TRUE		153640	1		==			
ANR	154055	CallExpression	Z_TYPE_P ( ret )		153640	0					
ANR	154056	Callee	Z_TYPE_P		153640	0					
ANR	154057	Identifier	Z_TYPE_P		153640	0					
ANR	154058	ArgumentList	ret		153640	1					
ANR	154059	Argument	ret		153640	0					
ANR	154060	Identifier	ret		153640	0					
ANR	154061	Identifier	IS_TRUE		153640	1					
ANR	154062	CompoundStatement		47:79:1847:1847	153640	1					
ANR	154063	ElseStatement	else		153640	0					
ANR	154064	IfStatement	"if ( UNEXPECTED ( ! zend_verify_scalar_type_hint ( ret_info -> type_hint , ret , ZEND_RET_USES_STRICT_TYPES ( ) ) ) )"		153640	0					
ANR	154065	Condition	"UNEXPECTED ( ! zend_verify_scalar_type_hint ( ret_info -> type_hint , ret , ZEND_RET_USES_STRICT_TYPES ( ) ) )"	1038:14:34432:34528	153640	0	True				
ANR	154066	CallExpression	"UNEXPECTED ( ! zend_verify_scalar_type_hint ( ret_info -> type_hint , ret , ZEND_RET_USES_STRICT_TYPES ( ) ) )"		153640	0					
ANR	154067	Callee	UNEXPECTED		153640	0					
ANR	154068	Identifier	UNEXPECTED		153640	0					
ANR	154069	ArgumentList	"! zend_verify_scalar_type_hint ( ret_info -> type_hint , ret , ZEND_RET_USES_STRICT_TYPES ( ) )"		153640	1					
ANR	154070	Argument	"! zend_verify_scalar_type_hint ( ret_info -> type_hint , ret , ZEND_RET_USES_STRICT_TYPES ( ) )"		153640	0					
ANR	154071	UnaryOperationExpression	"! zend_verify_scalar_type_hint ( ret_info -> type_hint , ret , ZEND_RET_USES_STRICT_TYPES ( ) )"		153640	0					
ANR	154072	UnaryOperator	!		153640	0					
ANR	154073	CallExpression	"zend_verify_scalar_type_hint ( ret_info -> type_hint , ret , ZEND_RET_USES_STRICT_TYPES ( ) )"		153640	1					
ANR	154074	Callee	zend_verify_scalar_type_hint		153640	0					
ANR	154075	Identifier	zend_verify_scalar_type_hint		153640	0					
ANR	154076	ArgumentList	ret_info -> type_hint		153640	1					
ANR	154077	Argument	ret_info -> type_hint		153640	0					
ANR	154078	PtrMemberAccess	ret_info -> type_hint		153640	0					
ANR	154079	Identifier	ret_info		153640	0					
ANR	154080	Identifier	type_hint		153640	1					
ANR	154081	Argument	ret		153640	1					
ANR	154082	Identifier	ret		153640	0					
ANR	154083	Argument	ZEND_RET_USES_STRICT_TYPES ( )		153640	2					
ANR	154084	CallExpression	ZEND_RET_USES_STRICT_TYPES ( )		153640	0					
ANR	154085	Callee	ZEND_RET_USES_STRICT_TYPES		153640	0					
ANR	154086	Identifier	ZEND_RET_USES_STRICT_TYPES		153640	0					
ANR	154087	ArgumentList			153640	1					
ANR	154088	CompoundStatement		49:113:1977:1977	153640	1					
ANR	154089	ExpressionStatement	"zend_verify_return_error ( zf , ""be of the type "" , zend_get_type_by_const ( ret_info -> type_hint ) , zend_zval_type_name ( ret ) , """" )"	1039:4:34537:34659	153640	0	True				
ANR	154090	CallExpression	"zend_verify_return_error ( zf , ""be of the type "" , zend_get_type_by_const ( ret_info -> type_hint ) , zend_zval_type_name ( ret ) , """" )"		153640	0					
ANR	154091	Callee	zend_verify_return_error		153640	0					
ANR	154092	Identifier	zend_verify_return_error		153640	0					
ANR	154093	ArgumentList	zf		153640	1					
ANR	154094	Argument	zf		153640	0					
ANR	154095	Identifier	zf		153640	0					
ANR	154096	Argument	"""be of the type """		153640	1					
ANR	154097	PrimaryExpression	"""be of the type """		153640	0					
ANR	154098	Argument	zend_get_type_by_const ( ret_info -> type_hint )		153640	2					
ANR	154099	CallExpression	zend_get_type_by_const ( ret_info -> type_hint )		153640	0					
ANR	154100	Callee	zend_get_type_by_const		153640	0					
ANR	154101	Identifier	zend_get_type_by_const		153640	0					
ANR	154102	ArgumentList	ret_info -> type_hint		153640	1					
ANR	154103	Argument	ret_info -> type_hint		153640	0					
ANR	154104	PtrMemberAccess	ret_info -> type_hint		153640	0					
ANR	154105	Identifier	ret_info		153640	0					
ANR	154106	Identifier	type_hint		153640	1					
ANR	154107	Argument	zend_zval_type_name ( ret )		153640	3					
ANR	154108	CallExpression	zend_zval_type_name ( ret )		153640	0					
ANR	154109	Callee	zend_zval_type_name		153640	0					
ANR	154110	Identifier	zend_zval_type_name		153640	0					
ANR	154111	ArgumentList	ret		153640	1					
ANR	154112	Argument	ret		153640	0					
ANR	154113	Identifier	ret		153640	0					
ANR	154114	Argument	""""""		153640	4					
ANR	154115	PrimaryExpression	""""""		153640	0					
ANR	154116	ReturnType	static zend_always_inline void		153640	1					
ANR	154117	Identifier	zend_verify_return_type		153640	2					
ANR	154118	ParameterList	"zend_function * zf , zval * ret , void * * cache_slot"		153640	3					
ANR	154119	Parameter	zend_function * zf	989:55:32504:32520	153640	0	True				
ANR	154120	ParameterType	zend_function *		153640	0					
ANR	154121	Identifier	zf		153640	1					
ANR	154122	Parameter	zval * ret	989:74:32523:32531	153640	1	True				
ANR	154123	ParameterType	zval *		153640	0					
ANR	154124	Identifier	ret		153640	1					
ANR	154125	Parameter	void * * cache_slot	989:85:32534:32550	153640	2	True				
ANR	154126	ParameterType	void * *		153640	0					
ANR	154127	Identifier	cache_slot		153640	1					
ANR	154128	CFGEntryNode	ENTRY		153640		True				
ANR	154129	CFGExitNode	EXIT		153640		True				
ANR	154130	Symbol	instanceof_function		153640						
ANR	154131	Symbol	need_msg		153640						
ANR	154132	Symbol	zf -> common . arg_info		153640						
ANR	154133	Symbol	zf -> common		153640						
ANR	154134	Symbol	ret_info -> type_hint		153640						
ANR	154135	Symbol	* ce		153640						
ANR	154136	Symbol	zend_zval_type_name		153640						
ANR	154137	Symbol	UNEXPECTED		153640						
ANR	154138	Symbol	Z_OBJCE_P ( ret ) -> name		153640						
ANR	154139	Symbol	_IS_BOOL		153640						
ANR	154140	Symbol	ret_info -> allow_null		153640						
ANR	154141	Symbol	IS_NULL		153640						
ANR	154142	Symbol	* ret_info		153640						
ANR	154143	Symbol	Z_OBJCE_P		153640						
ANR	154144	Symbol	ZEND_ACC_INTERFACE		153640						
ANR	154145	Symbol	ce -> name		153640						
ANR	154146	Symbol	IS_FALSE		153640						
ANR	154147	Symbol	* Z_OBJCE_P		153640						
ANR	154148	Symbol	ZEND_RET_USES_STRICT_TYPES		153640						
ANR	154149	Symbol	ret		153640						
ANR	154150	Symbol	cache_slot		153640						
ANR	154151	Symbol	IS_CALLABLE		153640						
ANR	154152	Symbol	zend_get_type_by_const		153640						
ANR	154153	Symbol	ce		153640						
ANR	154154	Symbol	NULL		153640						
ANR	154155	Symbol	* cache_slot		153640						
ANR	154156	Symbol	zend_is_callable		153640						
ANR	154157	Symbol	IS_TRUE		153640						
ANR	154158	Symbol	zf		153640						
ANR	154159	Symbol	Z_TYPE_P		153640						
ANR	154160	Symbol	ZSTR_VAL		153640						
ANR	154161	Symbol	ce -> ce_flags		153640						
ANR	154162	Symbol	* zf		153640						
ANR	154163	Symbol	zend_verify_scalar_type_hint		153640						
ANR	154164	Symbol	ret_info		153640						
ANR	154165	Symbol	IS_CALLABLE_CHECK_SILENT		153640						
ANR	154166	Symbol	ret_info -> class_name		153640						
ANR	154167	Symbol	zend_verify_arg_class_kind		153640						
ANR	154168	Symbol	EXPECTED		153640						
ANR	154169	Function	zend_verify_missing_return_type	1045:0:34676:35695							
ANR	154170	FunctionDef	"zend_verify_missing_return_type (zend_function * zf , void * * cache_slot)"		154169	0					
ANR	154171	CompoundStatement		1046:0:34767:35695	154169	0					
ANR	154172	IdentifierDeclStatement	zend_arg_info * ret_info = zf -> common . arg_info - 1 ;	1047:1:34770:34819	154169	0	True				
ANR	154173	IdentifierDecl	* ret_info = zf -> common . arg_info - 1		154169	0					
ANR	154174	IdentifierDeclType	zend_arg_info *		154169	0					
ANR	154175	Identifier	ret_info		154169	1					
ANR	154176	AssignmentExpression	* ret_info = zf -> common . arg_info - 1		154169	2		=			
ANR	154177	Identifier	ret_info		154169	0					
ANR	154178	AdditiveExpression	zf -> common . arg_info - 1		154169	1		-			
ANR	154179	MemberAccess	zf -> common . arg_info		154169	0					
ANR	154180	PtrMemberAccess	zf -> common		154169	0					
ANR	154181	Identifier	zf		154169	0					
ANR	154182	Identifier	common		154169	1					
ANR	154183	Identifier	arg_info		154169	1					
ANR	154184	PrimaryExpression	1		154169	1					
ANR	154185	IdentifierDeclStatement	char * need_msg ;	1048:1:34822:34836	154169	1	True				
ANR	154186	IdentifierDecl	* need_msg		154169	0					
ANR	154187	IdentifierDeclType	char *		154169	0					
ANR	154188	Identifier	need_msg		154169	1					
ANR	154189	IdentifierDeclStatement	zend_class_entry * ce ;	1049:1:34839:34859	154169	2	True				
ANR	154190	IdentifierDecl	* ce		154169	0					
ANR	154191	IdentifierDeclType	zend_class_entry *		154169	0					
ANR	154192	Identifier	ce		154169	1					
ANR	154193	IfStatement	if ( ret_info -> type_hint )		154169	3					
ANR	154194	Condition	ret_info -> type_hint	1051:5:34867:34885	154169	0	True				
ANR	154195	PtrMemberAccess	ret_info -> type_hint		154169	0					
ANR	154196	Identifier	ret_info		154169	0					
ANR	154197	Identifier	type_hint		154169	1					
ANR	154198	CompoundStatement		6:26:120:120	154169	1					
ANR	154199	IfStatement	if ( ret_info -> class_name )		154169	0					
ANR	154200	Condition	ret_info -> class_name	1052:6:34896:34915	154169	0	True				
ANR	154201	PtrMemberAccess	ret_info -> class_name		154169	0					
ANR	154202	Identifier	ret_info		154169	0					
ANR	154203	Identifier	class_name		154169	1					
ANR	154204	CompoundStatement		7:28:150:150	154169	1					
ANR	154205	IfStatement	if ( EXPECTED ( * cache_slot ) )		154169	0					
ANR	154206	Condition	EXPECTED ( * cache_slot )	1053:7:34927:34947	154169	0	True				
ANR	154207	CallExpression	EXPECTED ( * cache_slot )		154169	0					
ANR	154208	Callee	EXPECTED		154169	0					
ANR	154209	Identifier	EXPECTED		154169	0					
ANR	154210	ArgumentList	* cache_slot		154169	1					
ANR	154211	Argument	* cache_slot		154169	0					
ANR	154212	UnaryOperationExpression	* cache_slot		154169	0					
ANR	154213	UnaryOperator	*		154169	0					
ANR	154214	Identifier	cache_slot		154169	1					
ANR	154215	CompoundStatement		8:30:182:182	154169	1					
ANR	154216	ExpressionStatement	ce = ( zend_class_entry * ) * cache_slot	1054:4:34956:34991	154169	0	True				
ANR	154217	AssignmentExpression	ce = ( zend_class_entry * ) * cache_slot		154169	0		=			
ANR	154218	Identifier	ce		154169	0					
ANR	154219	CastExpression	( zend_class_entry * ) * cache_slot		154169	1					
ANR	154220	CastTarget	zend_class_entry *		154169	0					
ANR	154221	UnaryOperationExpression	* cache_slot		154169	1					
ANR	154222	UnaryOperator	*		154169	0					
ANR	154223	Identifier	cache_slot		154169	1					
ANR	154224	ElseStatement	else		154169	0					
ANR	154225	CompoundStatement		10:10:235:235	154169	0					
ANR	154226	ExpressionStatement	ce = zend_verify_arg_class_kind ( ret_info )	1056:4:35009:35050	154169	0	True				
ANR	154227	AssignmentExpression	ce = zend_verify_arg_class_kind ( ret_info )		154169	0		=			
ANR	154228	Identifier	ce		154169	0					
ANR	154229	CallExpression	zend_verify_arg_class_kind ( ret_info )		154169	1					
ANR	154230	Callee	zend_verify_arg_class_kind		154169	0					
ANR	154231	Identifier	zend_verify_arg_class_kind		154169	0					
ANR	154232	ArgumentList	ret_info		154169	1					
ANR	154233	Argument	ret_info		154169	0					
ANR	154234	Identifier	ret_info		154169	0					
ANR	154235	IfStatement	if ( UNEXPECTED ( ! ce ) )		154169	1					
ANR	154236	Condition	UNEXPECTED ( ! ce )	1057:8:35060:35074	154169	0	True				
ANR	154237	CallExpression	UNEXPECTED ( ! ce )		154169	0					
ANR	154238	Callee	UNEXPECTED		154169	0					
ANR	154239	Identifier	UNEXPECTED		154169	0					
ANR	154240	ArgumentList	! ce		154169	1					
ANR	154241	Argument	! ce		154169	0					
ANR	154242	UnaryOperationExpression	! ce		154169	0					
ANR	154243	UnaryOperator	!		154169	0					
ANR	154244	Identifier	ce		154169	1					
ANR	154245	CompoundStatement		12:25:309:309	154169	1					
ANR	154246	ExpressionStatement	"zend_verify_return_error ( zf , ""be an instance of "" , ZSTR_VAL ( ret_info -> class_name ) , ""none"" , """" )"	1058:5:35084:35178	154169	0	True				
ANR	154247	CallExpression	"zend_verify_return_error ( zf , ""be an instance of "" , ZSTR_VAL ( ret_info -> class_name ) , ""none"" , """" )"		154169	0					
ANR	154248	Callee	zend_verify_return_error		154169	0					
ANR	154249	Identifier	zend_verify_return_error		154169	0					
ANR	154250	ArgumentList	zf		154169	1					
ANR	154251	Argument	zf		154169	0					
ANR	154252	Identifier	zf		154169	0					
ANR	154253	Argument	"""be an instance of """		154169	1					
ANR	154254	PrimaryExpression	"""be an instance of """		154169	0					
ANR	154255	Argument	ZSTR_VAL ( ret_info -> class_name )		154169	2					
ANR	154256	CallExpression	ZSTR_VAL ( ret_info -> class_name )		154169	0					
ANR	154257	Callee	ZSTR_VAL		154169	0					
ANR	154258	Identifier	ZSTR_VAL		154169	0					
ANR	154259	ArgumentList	ret_info -> class_name		154169	1					
ANR	154260	Argument	ret_info -> class_name		154169	0					
ANR	154261	PtrMemberAccess	ret_info -> class_name		154169	0					
ANR	154262	Identifier	ret_info		154169	0					
ANR	154263	Identifier	class_name		154169	1					
ANR	154264	Argument	"""none"""		154169	3					
ANR	154265	PrimaryExpression	"""none"""		154169	0					
ANR	154266	Argument	""""""		154169	4					
ANR	154267	PrimaryExpression	""""""		154169	0					
ANR	154268	ReturnStatement	return 0 ;	1059:5:35185:35193	154169	1	True				
ANR	154269	PrimaryExpression	0		154169	0					
ANR	154270	ExpressionStatement	* cache_slot = ( void * ) ce	1061:4:35205:35228	154169	2	True				
ANR	154271	AssignmentExpression	* cache_slot = ( void * ) ce		154169	0		=			
ANR	154272	UnaryOperationExpression	* cache_slot		154169	0					
ANR	154273	UnaryOperator	*		154169	0					
ANR	154274	Identifier	cache_slot		154169	1					
ANR	154275	CastExpression	( void * ) ce		154169	1					
ANR	154276	CastTarget	void *		154169	0					
ANR	154277	Identifier	ce		154169	1					
ANR	154278	ExpressionStatement	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """	1063:3:35238:35340	154169	1	True				
ANR	154279	AssignmentExpression	"need_msg = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		154169	0		=			
ANR	154280	Identifier	need_msg		154169	0					
ANR	154281	ConditionalExpression	"( ce -> ce_flags & ZEND_ACC_INTERFACE ) ? ""implement interface "" : ""be an instance of """		154169	1					
ANR	154282	Condition	ce -> ce_flags & ZEND_ACC_INTERFACE		154169	0					
ANR	154283	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		154169	0		&			
ANR	154284	PtrMemberAccess	ce -> ce_flags		154169	0					
ANR	154285	Identifier	ce		154169	0					
ANR	154286	Identifier	ce_flags		154169	1					
ANR	154287	Identifier	ZEND_ACC_INTERFACE		154169	1					
ANR	154288	PrimaryExpression	"""implement interface """		154169	1					
ANR	154289	PrimaryExpression	"""be an instance of """		154169	2					
ANR	154290	ExpressionStatement	"zend_verify_return_error ( zf , need_msg , ZSTR_VAL ( ce -> name ) , ""none"" , """" )"	1066:3:35345:35415	154169	2	True				
ANR	154291	CallExpression	"zend_verify_return_error ( zf , need_msg , ZSTR_VAL ( ce -> name ) , ""none"" , """" )"		154169	0					
ANR	154292	Callee	zend_verify_return_error		154169	0					
ANR	154293	Identifier	zend_verify_return_error		154169	0					
ANR	154294	ArgumentList	zf		154169	1					
ANR	154295	Argument	zf		154169	0					
ANR	154296	Identifier	zf		154169	0					
ANR	154297	Argument	need_msg		154169	1					
ANR	154298	Identifier	need_msg		154169	0					
ANR	154299	Argument	ZSTR_VAL ( ce -> name )		154169	2					
ANR	154300	CallExpression	ZSTR_VAL ( ce -> name )		154169	0					
ANR	154301	Callee	ZSTR_VAL		154169	0					
ANR	154302	Identifier	ZSTR_VAL		154169	0					
ANR	154303	ArgumentList	ce -> name		154169	1					
ANR	154304	Argument	ce -> name		154169	0					
ANR	154305	PtrMemberAccess	ce -> name		154169	0					
ANR	154306	Identifier	ce		154169	0					
ANR	154307	Identifier	name		154169	1					
ANR	154308	Argument	"""none"""		154169	3					
ANR	154309	PrimaryExpression	"""none"""		154169	0					
ANR	154310	Argument	""""""		154169	4					
ANR	154311	PrimaryExpression	""""""		154169	0					
ANR	154312	ReturnStatement	return 0 ;	1067:3:35420:35428	154169	3	True				
ANR	154313	PrimaryExpression	0		154169	0					
ANR	154314	ElseStatement	else		154169	0					
ANR	154315	IfStatement	if ( ret_info -> type_hint == IS_CALLABLE )		154169	0					
ANR	154316	Condition	ret_info -> type_hint == IS_CALLABLE	1068:13:35443:35476	154169	0	True				
ANR	154317	EqualityExpression	ret_info -> type_hint == IS_CALLABLE		154169	0		==			
ANR	154318	PtrMemberAccess	ret_info -> type_hint		154169	0					
ANR	154319	Identifier	ret_info		154169	0					
ANR	154320	Identifier	type_hint		154169	1					
ANR	154321	Identifier	IS_CALLABLE		154169	1					
ANR	154322	CompoundStatement		23:49:711:711	154169	1					
ANR	154323	ExpressionStatement	"zend_verify_return_error ( zf , ""be callable"" , """" , ""none"" , """" )"	1069:3:35484:35543	154169	0	True				
ANR	154324	CallExpression	"zend_verify_return_error ( zf , ""be callable"" , """" , ""none"" , """" )"		154169	0					
ANR	154325	Callee	zend_verify_return_error		154169	0					
ANR	154326	Identifier	zend_verify_return_error		154169	0					
ANR	154327	ArgumentList	zf		154169	1					
ANR	154328	Argument	zf		154169	0					
ANR	154329	Identifier	zf		154169	0					
ANR	154330	Argument	"""be callable"""		154169	1					
ANR	154331	PrimaryExpression	"""be callable"""		154169	0					
ANR	154332	Argument	""""""		154169	2					
ANR	154333	PrimaryExpression	""""""		154169	0					
ANR	154334	Argument	"""none"""		154169	3					
ANR	154335	PrimaryExpression	"""none"""		154169	0					
ANR	154336	Argument	""""""		154169	4					
ANR	154337	PrimaryExpression	""""""		154169	0					
ANR	154338	ElseStatement	else		154169	0					
ANR	154339	CompoundStatement		25:9:786:786	154169	0					
ANR	154340	ExpressionStatement	"zend_verify_return_error ( zf , ""be of the type "" , zend_get_type_by_const ( ret_info -> type_hint ) , ""none"" , """" )"	1071:3:35559:35663	154169	0	True				
ANR	154341	CallExpression	"zend_verify_return_error ( zf , ""be of the type "" , zend_get_type_by_const ( ret_info -> type_hint ) , ""none"" , """" )"		154169	0					
ANR	154342	Callee	zend_verify_return_error		154169	0					
ANR	154343	Identifier	zend_verify_return_error		154169	0					
ANR	154344	ArgumentList	zf		154169	1					
ANR	154345	Argument	zf		154169	0					
ANR	154346	Identifier	zf		154169	0					
ANR	154347	Argument	"""be of the type """		154169	1					
ANR	154348	PrimaryExpression	"""be of the type """		154169	0					
ANR	154349	Argument	zend_get_type_by_const ( ret_info -> type_hint )		154169	2					
ANR	154350	CallExpression	zend_get_type_by_const ( ret_info -> type_hint )		154169	0					
ANR	154351	Callee	zend_get_type_by_const		154169	0					
ANR	154352	Identifier	zend_get_type_by_const		154169	0					
ANR	154353	ArgumentList	ret_info -> type_hint		154169	1					
ANR	154354	Argument	ret_info -> type_hint		154169	0					
ANR	154355	PtrMemberAccess	ret_info -> type_hint		154169	0					
ANR	154356	Identifier	ret_info		154169	0					
ANR	154357	Identifier	type_hint		154169	1					
ANR	154358	Argument	"""none"""		154169	3					
ANR	154359	PrimaryExpression	"""none"""		154169	0					
ANR	154360	Argument	""""""		154169	4					
ANR	154361	PrimaryExpression	""""""		154169	0					
ANR	154362	ReturnStatement	return 0 ;	1073:2:35671:35679	154169	1	True				
ANR	154363	PrimaryExpression	0		154169	0					
ANR	154364	ReturnStatement	return 1 ;	1075:1:35685:35693	154169	4	True				
ANR	154365	PrimaryExpression	1		154169	0					
ANR	154366	ReturnType	static ZEND_COLD int		154169	1					
ANR	154367	Identifier	zend_verify_missing_return_type		154169	2					
ANR	154368	ParameterList	"zend_function * zf , void * * cache_slot"		154169	3					
ANR	154369	Parameter	zend_function * zf	1045:53:34729:34745	154169	0	True				
ANR	154370	ParameterType	zend_function *		154169	0					
ANR	154371	Identifier	zf		154169	1					
ANR	154372	Parameter	void * * cache_slot	1045:72:34748:34764	154169	1	True				
ANR	154373	ParameterType	void * *		154169	0					
ANR	154374	Identifier	cache_slot		154169	1					
ANR	154375	CFGEntryNode	ENTRY		154169		True				
ANR	154376	CFGExitNode	EXIT		154169		True				
ANR	154377	Symbol	cache_slot		154169						
ANR	154378	Symbol	IS_CALLABLE		154169						
ANR	154379	Symbol	zend_get_type_by_const		154169						
ANR	154380	Symbol	ce		154169						
ANR	154381	Symbol	need_msg		154169						
ANR	154382	Symbol	* cache_slot		154169						
ANR	154383	Symbol	zf -> common . arg_info		154169						
ANR	154384	Symbol	zf -> common		154169						
ANR	154385	Symbol	ret_info -> type_hint		154169						
ANR	154386	Symbol	* ce		154169						
ANR	154387	Symbol	zf		154169						
ANR	154388	Symbol	ZSTR_VAL		154169						
ANR	154389	Symbol	UNEXPECTED		154169						
ANR	154390	Symbol	ce -> ce_flags		154169						
ANR	154391	Symbol	* zf		154169						
ANR	154392	Symbol	ret_info		154169						
ANR	154393	Symbol	* ret_info		154169						
ANR	154394	Symbol	ret_info -> class_name		154169						
ANR	154395	Symbol	ZEND_ACC_INTERFACE		154169						
ANR	154396	Symbol	ce -> name		154169						
ANR	154397	Symbol	zend_verify_arg_class_kind		154169						
ANR	154398	Symbol	EXPECTED		154169						
ANR	154399	Function	zend_assign_to_object	1078:0:35698:40077							
ANR	154400	FunctionDef	"zend_assign_to_object (zval * retval , zval * object , uint32_t object_op_type , zval * property_name , uint32_t property_op_type , int value_type , znode_op value_op , const zend_execute_data * execute_data , void * * cache_slot)"		154399	0					
ANR	154401	CompoundStatement		1079:0:35945:40077	154399	0					
ANR	154402	IdentifierDeclStatement	zend_free_op free_value ;	1080:1:35948:35971	154399	0	True				
ANR	154403	IdentifierDecl	free_value		154399	0					
ANR	154404	IdentifierDeclType	zend_free_op		154399	0					
ANR	154405	Identifier	free_value		154399	1					
ANR	154406	IdentifierDeclStatement	"zval * value = get_zval_ptr_r ( value_type , value_op , execute_data , & free_value ) ;"	1081:1:35974:36051	154399	1	True				
ANR	154407	IdentifierDecl	"* value = get_zval_ptr_r ( value_type , value_op , execute_data , & free_value )"		154399	0					
ANR	154408	IdentifierDeclType	zval *		154399	0					
ANR	154409	Identifier	value		154399	1					
ANR	154410	AssignmentExpression	"* value = get_zval_ptr_r ( value_type , value_op , execute_data , & free_value )"		154399	2		=			
ANR	154411	Identifier	value		154399	0					
ANR	154412	CallExpression	"get_zval_ptr_r ( value_type , value_op , execute_data , & free_value )"		154399	1					
ANR	154413	Callee	get_zval_ptr_r		154399	0					
ANR	154414	Identifier	get_zval_ptr_r		154399	0					
ANR	154415	ArgumentList	value_type		154399	1					
ANR	154416	Argument	value_type		154399	0					
ANR	154417	Identifier	value_type		154399	0					
ANR	154418	Argument	value_op		154399	1					
ANR	154419	Identifier	value_op		154399	0					
ANR	154420	Argument	execute_data		154399	2					
ANR	154421	Identifier	execute_data		154399	0					
ANR	154422	Argument	& free_value		154399	3					
ANR	154423	UnaryOperationExpression	& free_value		154399	0					
ANR	154424	UnaryOperator	&		154399	0					
ANR	154425	Identifier	free_value		154399	1					
ANR	154426	IdentifierDeclStatement	zval tmp ;	1082:2:36055:36063	154399	2	True				
ANR	154427	IdentifierDecl	tmp		154399	0					
ANR	154428	IdentifierDeclType	zval		154399	0					
ANR	154429	Identifier	tmp		154399	1					
ANR	154430	IfStatement	if ( object_op_type != IS_UNUSED && UNEXPECTED ( Z_TYPE_P ( object ) != IS_OBJECT ) )		154399	3					
ANR	154431	Condition	object_op_type != IS_UNUSED && UNEXPECTED ( Z_TYPE_P ( object ) != IS_OBJECT )	1084:5:36071:36142	154399	0	True				
ANR	154432	AndExpression	object_op_type != IS_UNUSED && UNEXPECTED ( Z_TYPE_P ( object ) != IS_OBJECT )		154399	0		&&			
ANR	154433	EqualityExpression	object_op_type != IS_UNUSED		154399	0		!=			
ANR	154434	Identifier	object_op_type		154399	0					
ANR	154435	Identifier	IS_UNUSED		154399	1					
ANR	154436	CallExpression	UNEXPECTED ( Z_TYPE_P ( object ) != IS_OBJECT )		154399	1					
ANR	154437	Callee	UNEXPECTED		154399	0					
ANR	154438	Identifier	UNEXPECTED		154399	0					
ANR	154439	ArgumentList	Z_TYPE_P ( object ) != IS_OBJECT		154399	1					
ANR	154440	Argument	Z_TYPE_P ( object ) != IS_OBJECT		154399	0					
ANR	154441	EqualityExpression	Z_TYPE_P ( object ) != IS_OBJECT		154399	0		!=			
ANR	154442	CallExpression	Z_TYPE_P ( object )		154399	0					
ANR	154443	Callee	Z_TYPE_P		154399	0					
ANR	154444	Identifier	Z_TYPE_P		154399	0					
ANR	154445	ArgumentList	object		154399	1					
ANR	154446	Argument	object		154399	0					
ANR	154447	Identifier	object		154399	0					
ANR	154448	Identifier	IS_OBJECT		154399	1					
ANR	154449	CompoundStatement		6:79:199:199	154399	1					
ANR	154450	DoStatement	do		154399	0					
ANR	154451	CompoundStatement		7:5:206:206	154399	0					
ANR	154452	IfStatement	if ( object_op_type == IS_VAR && UNEXPECTED ( object == & EG ( error_zval ) ) )		154399	0					
ANR	154453	Condition	object_op_type == IS_VAR && UNEXPECTED ( object == & EG ( error_zval ) )	1086:7:36161:36225	154399	0	True				
ANR	154454	AndExpression	object_op_type == IS_VAR && UNEXPECTED ( object == & EG ( error_zval ) )		154399	0		&&			
ANR	154455	EqualityExpression	object_op_type == IS_VAR		154399	0		==			
ANR	154456	Identifier	object_op_type		154399	0					
ANR	154457	Identifier	IS_VAR		154399	1					
ANR	154458	CallExpression	UNEXPECTED ( object == & EG ( error_zval ) )		154399	1					
ANR	154459	Callee	UNEXPECTED		154399	0					
ANR	154460	Identifier	UNEXPECTED		154399	0					
ANR	154461	ArgumentList	object == & EG ( error_zval )		154399	1					
ANR	154462	Argument	object == & EG ( error_zval )		154399	0					
ANR	154463	EqualityExpression	object == & EG ( error_zval )		154399	0		==			
ANR	154464	Identifier	object		154399	0					
ANR	154465	UnaryOperationExpression	& EG ( error_zval )		154399	1					
ANR	154466	UnaryOperator	&		154399	0					
ANR	154467	CallExpression	EG ( error_zval )		154399	1					
ANR	154468	Callee	EG		154399	0					
ANR	154469	Identifier	EG		154399	0					
ANR	154470	ArgumentList	error_zval		154399	1					
ANR	154471	Argument	error_zval		154399	0					
ANR	154472	Identifier	error_zval		154399	0					
ANR	154473	CompoundStatement		8:74:282:282	154399	1					
ANR	154474	IfStatement	if ( retval )		154399	0					
ANR	154475	Condition	retval	1087:8:36238:36243	154399	0	True				
ANR	154476	Identifier	retval		154399	0					
ANR	154477	CompoundStatement		9:16:300:300	154399	1					
ANR	154478	ExpressionStatement	ZVAL_NULL ( retval )	1088:6:36254:36271	154399	0	True				
ANR	154479	CallExpression	ZVAL_NULL ( retval )		154399	0					
ANR	154480	Callee	ZVAL_NULL		154399	0					
ANR	154481	Identifier	ZVAL_NULL		154399	0					
ANR	154482	ArgumentList	retval		154399	1					
ANR	154483	Argument	retval		154399	0					
ANR	154484	Identifier	retval		154399	0					
ANR	154485	ExpressionStatement	FREE_OP ( free_value )	1090:4:36283:36302	154399	1	True				
ANR	154486	CallExpression	FREE_OP ( free_value )		154399	0					
ANR	154487	Callee	FREE_OP		154399	0					
ANR	154488	Identifier	FREE_OP		154399	0					
ANR	154489	ArgumentList	free_value		154399	1					
ANR	154490	Argument	free_value		154399	0					
ANR	154491	Identifier	free_value		154399	0					
ANR	154492	ReturnStatement	return ;	1091:4:36308:36314	154399	2	True				
ANR	154493	IfStatement	if ( Z_ISREF_P ( object ) )		154399	1					
ANR	154494	Condition	Z_ISREF_P ( object )	1093:7:36328:36344	154399	0	True				
ANR	154495	CallExpression	Z_ISREF_P ( object )		154399	0					
ANR	154496	Callee	Z_ISREF_P		154399	0					
ANR	154497	Identifier	Z_ISREF_P		154399	0					
ANR	154498	ArgumentList	object		154399	1					
ANR	154499	Argument	object		154399	0					
ANR	154500	Identifier	object		154399	0					
ANR	154501	CompoundStatement		15:26:401:401	154399	1					
ANR	154502	ExpressionStatement	object = Z_REFVAL_P ( object )	1094:4:36353:36380	154399	0	True				
ANR	154503	AssignmentExpression	object = Z_REFVAL_P ( object )		154399	0		=			
ANR	154504	Identifier	object		154399	0					
ANR	154505	CallExpression	Z_REFVAL_P ( object )		154399	1					
ANR	154506	Callee	Z_REFVAL_P		154399	0					
ANR	154507	Identifier	Z_REFVAL_P		154399	0					
ANR	154508	ArgumentList	object		154399	1					
ANR	154509	Argument	object		154399	0					
ANR	154510	Identifier	object		154399	0					
ANR	154511	IfStatement	if ( EXPECTED ( Z_TYPE_P ( object ) == IS_OBJECT ) )		154399	1					
ANR	154512	Condition	EXPECTED ( Z_TYPE_P ( object ) == IS_OBJECT )	1095:8:36390:36428	154399	0	True				
ANR	154513	CallExpression	EXPECTED ( Z_TYPE_P ( object ) == IS_OBJECT )		154399	0					
ANR	154514	Callee	EXPECTED		154399	0					
ANR	154515	Identifier	EXPECTED		154399	0					
ANR	154516	ArgumentList	Z_TYPE_P ( object ) == IS_OBJECT		154399	1					
ANR	154517	Argument	Z_TYPE_P ( object ) == IS_OBJECT		154399	0					
ANR	154518	EqualityExpression	Z_TYPE_P ( object ) == IS_OBJECT		154399	0		==			
ANR	154519	CallExpression	Z_TYPE_P ( object )		154399	0					
ANR	154520	Callee	Z_TYPE_P		154399	0					
ANR	154521	Identifier	Z_TYPE_P		154399	0					
ANR	154522	ArgumentList	object		154399	1					
ANR	154523	Argument	object		154399	0					
ANR	154524	Identifier	object		154399	0					
ANR	154525	Identifier	IS_OBJECT		154399	1					
ANR	154526	CompoundStatement		17:49:485:485	154399	1					
ANR	154527	BreakStatement	break ;	1096:5:36438:36443	154399	0	True				
ANR	154528	IfStatement	if ( EXPECTED ( Z_TYPE_P ( object ) <= IS_FALSE || ( Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0 ) ) )		154399	2					
ANR	154529	Condition	EXPECTED ( Z_TYPE_P ( object ) <= IS_FALSE || ( Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0 ) )	1099:7:36463:36569	154399	0	True				
ANR	154530	CallExpression	EXPECTED ( Z_TYPE_P ( object ) <= IS_FALSE || ( Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0 ) )		154399	0					
ANR	154531	Callee	EXPECTED		154399	0					
ANR	154532	Identifier	EXPECTED		154399	0					
ANR	154533	ArgumentList	Z_TYPE_P ( object ) <= IS_FALSE || ( Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0 )		154399	1					
ANR	154534	Argument	Z_TYPE_P ( object ) <= IS_FALSE || ( Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0 )		154399	0					
ANR	154535	OrExpression	Z_TYPE_P ( object ) <= IS_FALSE || ( Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0 )		154399	0		||			
ANR	154536	RelationalExpression	Z_TYPE_P ( object ) <= IS_FALSE		154399	0		<=			
ANR	154537	CallExpression	Z_TYPE_P ( object )		154399	0					
ANR	154538	Callee	Z_TYPE_P		154399	0					
ANR	154539	Identifier	Z_TYPE_P		154399	0					
ANR	154540	ArgumentList	object		154399	1					
ANR	154541	Argument	object		154399	0					
ANR	154542	Identifier	object		154399	0					
ANR	154543	Identifier	IS_FALSE		154399	1					
ANR	154544	AndExpression	Z_TYPE_P ( object ) == IS_STRING && Z_STRLEN_P ( object ) == 0		154399	1		&&			
ANR	154545	EqualityExpression	Z_TYPE_P ( object ) == IS_STRING		154399	0		==			
ANR	154546	CallExpression	Z_TYPE_P ( object )		154399	0					
ANR	154547	Callee	Z_TYPE_P		154399	0					
ANR	154548	Identifier	Z_TYPE_P		154399	0					
ANR	154549	ArgumentList	object		154399	1					
ANR	154550	Argument	object		154399	0					
ANR	154551	Identifier	object		154399	0					
ANR	154552	Identifier	IS_STRING		154399	1					
ANR	154553	EqualityExpression	Z_STRLEN_P ( object ) == 0		154399	1		==			
ANR	154554	CallExpression	Z_STRLEN_P ( object )		154399	0					
ANR	154555	Callee	Z_STRLEN_P		154399	0					
ANR	154556	Identifier	Z_STRLEN_P		154399	0					
ANR	154557	ArgumentList	object		154399	1					
ANR	154558	Argument	object		154399	0					
ANR	154559	Identifier	object		154399	0					
ANR	154560	PrimaryExpression	0		154399	1					
ANR	154561	CompoundStatement		23:4:632:648	154399	1					
ANR	154562	IdentifierDeclStatement	zend_object * obj ;	1101:4:36578:36594	154399	0	True				
ANR	154563	IdentifierDecl	* obj		154399	0					
ANR	154564	IdentifierDeclType	zend_object *		154399	0					
ANR	154565	Identifier	obj		154399	1					
ANR	154566	ExpressionStatement	zval_ptr_dtor ( object )	1103:4:36601:36622	154399	1	True				
ANR	154567	CallExpression	zval_ptr_dtor ( object )		154399	0					
ANR	154568	Callee	zval_ptr_dtor		154399	0					
ANR	154569	Identifier	zval_ptr_dtor		154399	0					
ANR	154570	ArgumentList	object		154399	1					
ANR	154571	Argument	object		154399	0					
ANR	154572	Identifier	object		154399	0					
ANR	154573	ExpressionStatement	object_init ( object )	1104:4:36628:36647	154399	2	True				
ANR	154574	CallExpression	object_init ( object )		154399	0					
ANR	154575	Callee	object_init		154399	0					
ANR	154576	Identifier	object_init		154399	0					
ANR	154577	ArgumentList	object		154399	1					
ANR	154578	Argument	object		154399	0					
ANR	154579	Identifier	object		154399	0					
ANR	154580	ExpressionStatement	Z_ADDREF_P ( object )	1105:4:36653:36671	154399	3	True				
ANR	154581	CallExpression	Z_ADDREF_P ( object )		154399	0					
ANR	154582	Callee	Z_ADDREF_P		154399	0					
ANR	154583	Identifier	Z_ADDREF_P		154399	0					
ANR	154584	ArgumentList	object		154399	1					
ANR	154585	Argument	object		154399	0					
ANR	154586	Identifier	object		154399	0					
ANR	154587	ExpressionStatement	obj = Z_OBJ_P ( object )	1106:4:36677:36698	154399	4	True				
ANR	154588	AssignmentExpression	obj = Z_OBJ_P ( object )		154399	0		=			
ANR	154589	Identifier	obj		154399	0					
ANR	154590	CallExpression	Z_OBJ_P ( object )		154399	1					
ANR	154591	Callee	Z_OBJ_P		154399	0					
ANR	154592	Identifier	Z_OBJ_P		154399	0					
ANR	154593	ArgumentList	object		154399	1					
ANR	154594	Argument	object		154399	0					
ANR	154595	Identifier	object		154399	0					
ANR	154596	ExpressionStatement	"zend_error ( E_WARNING , ""Creating default object from empty value"" )"	1107:4:36704:36769	154399	5	True				
ANR	154597	CallExpression	"zend_error ( E_WARNING , ""Creating default object from empty value"" )"		154399	0					
ANR	154598	Callee	zend_error		154399	0					
ANR	154599	Identifier	zend_error		154399	0					
ANR	154600	ArgumentList	E_WARNING		154399	1					
ANR	154601	Argument	E_WARNING		154399	0					
ANR	154602	Identifier	E_WARNING		154399	0					
ANR	154603	Argument	"""Creating default object from empty value"""		154399	1					
ANR	154604	PrimaryExpression	"""Creating default object from empty value"""		154399	0					
ANR	154605	IfStatement	if ( GC_REFCOUNT ( obj ) == 1 )		154399	6					
ANR	154606	Condition	GC_REFCOUNT ( obj ) == 1	1108:8:36779:36799	154399	0	True				
ANR	154607	EqualityExpression	GC_REFCOUNT ( obj ) == 1		154399	0		==			
ANR	154608	CallExpression	GC_REFCOUNT ( obj )		154399	0					
ANR	154609	Callee	GC_REFCOUNT		154399	0					
ANR	154610	Identifier	GC_REFCOUNT		154399	0					
ANR	154611	ArgumentList	obj		154399	1					
ANR	154612	Argument	obj		154399	0					
ANR	154613	Identifier	obj		154399	0					
ANR	154614	PrimaryExpression	1		154399	1					
ANR	154615	CompoundStatement		30:31:856:856	154399	1					
ANR	154616	IfStatement	if ( retval )		154399	0					
ANR	154617	Condition	retval	1110:9:36881:36886	154399	0	True				
ANR	154618	Identifier	retval		154399	0					
ANR	154619	CompoundStatement		32:17:943:943	154399	1					
ANR	154620	ExpressionStatement	ZVAL_NULL ( retval )	1111:6:36897:36914	154399	0	True				
ANR	154621	CallExpression	ZVAL_NULL ( retval )		154399	0					
ANR	154622	Callee	ZVAL_NULL		154399	0					
ANR	154623	Identifier	ZVAL_NULL		154399	0					
ANR	154624	ArgumentList	retval		154399	1					
ANR	154625	Argument	retval		154399	0					
ANR	154626	Identifier	retval		154399	0					
ANR	154627	ExpressionStatement	FREE_OP ( free_value )	1113:5:36928:36947	154399	1	True				
ANR	154628	CallExpression	FREE_OP ( free_value )		154399	0					
ANR	154629	Callee	FREE_OP		154399	0					
ANR	154630	Identifier	FREE_OP		154399	0					
ANR	154631	ArgumentList	free_value		154399	1					
ANR	154632	Argument	free_value		154399	0					
ANR	154633	Identifier	free_value		154399	0					
ANR	154634	ExpressionStatement	OBJ_RELEASE ( obj )	1114:5:36954:36970	154399	2	True				
ANR	154635	CallExpression	OBJ_RELEASE ( obj )		154399	0					
ANR	154636	Callee	OBJ_RELEASE		154399	0					
ANR	154637	Identifier	OBJ_RELEASE		154399	0					
ANR	154638	ArgumentList	obj		154399	1					
ANR	154639	Argument	obj		154399	0					
ANR	154640	Identifier	obj		154399	0					
ANR	154641	ReturnStatement	return ;	1115:5:36977:36983	154399	3	True				
ANR	154642	ExpressionStatement	Z_DELREF_P ( object )	1117:4:36995:37013	154399	7	True				
ANR	154643	CallExpression	Z_DELREF_P ( object )		154399	0					
ANR	154644	Callee	Z_DELREF_P		154399	0					
ANR	154645	Identifier	Z_DELREF_P		154399	0					
ANR	154646	ArgumentList	object		154399	1					
ANR	154647	Argument	object		154399	0					
ANR	154648	Identifier	object		154399	0					
ANR	154649	ElseStatement	else		154399	0					
ANR	154650	CompoundStatement		40:10:1079:1079	154399	0					
ANR	154651	ExpressionStatement	"zend_error ( E_WARNING , ""Attempt to assign property of non-object"" )"	1119:4:37031:37096	154399	0	True				
ANR	154652	CallExpression	"zend_error ( E_WARNING , ""Attempt to assign property of non-object"" )"		154399	0					
ANR	154653	Callee	zend_error		154399	0					
ANR	154654	Identifier	zend_error		154399	0					
ANR	154655	ArgumentList	E_WARNING		154399	1					
ANR	154656	Argument	E_WARNING		154399	0					
ANR	154657	Identifier	E_WARNING		154399	0					
ANR	154658	Argument	"""Attempt to assign property of non-object"""		154399	1					
ANR	154659	PrimaryExpression	"""Attempt to assign property of non-object"""		154399	0					
ANR	154660	IfStatement	if ( retval )		154399	1					
ANR	154661	Condition	retval	1120:8:37106:37111	154399	0	True				
ANR	154662	Identifier	retval		154399	0					
ANR	154663	CompoundStatement		42:16:1168:1168	154399	1					
ANR	154664	ExpressionStatement	ZVAL_NULL ( retval )	1121:5:37121:37138	154399	0	True				
ANR	154665	CallExpression	ZVAL_NULL ( retval )		154399	0					
ANR	154666	Callee	ZVAL_NULL		154399	0					
ANR	154667	Identifier	ZVAL_NULL		154399	0					
ANR	154668	ArgumentList	retval		154399	1					
ANR	154669	Argument	retval		154399	0					
ANR	154670	Identifier	retval		154399	0					
ANR	154671	ExpressionStatement	FREE_OP ( free_value )	1123:4:37150:37169	154399	2	True				
ANR	154672	CallExpression	FREE_OP ( free_value )		154399	0					
ANR	154673	Callee	FREE_OP		154399	0					
ANR	154674	Identifier	FREE_OP		154399	0					
ANR	154675	ArgumentList	free_value		154399	1					
ANR	154676	Argument	free_value		154399	0					
ANR	154677	Identifier	free_value		154399	0					
ANR	154678	ReturnStatement	return ;	1124:4:37175:37181	154399	3	True				
ANR	154679	Condition	0	1126:11:37199:37199	154399	1	True				
ANR	154680	PrimaryExpression	0		154399	0					
ANR	154681	IfStatement	if ( property_op_type == IS_CONST && EXPECTED ( Z_OBJCE_P ( object ) == CACHED_PTR_EX ( cache_slot ) ) )		154399	4					
ANR	154682	Condition	property_op_type == IS_CONST && EXPECTED ( Z_OBJCE_P ( object ) == CACHED_PTR_EX ( cache_slot ) )	1129:5:37212:37301	154399	0	True				
ANR	154683	AndExpression	property_op_type == IS_CONST && EXPECTED ( Z_OBJCE_P ( object ) == CACHED_PTR_EX ( cache_slot ) )		154399	0		&&			
ANR	154684	EqualityExpression	property_op_type == IS_CONST		154399	0		==			
ANR	154685	Identifier	property_op_type		154399	0					
ANR	154686	Identifier	IS_CONST		154399	1					
ANR	154687	CallExpression	EXPECTED ( Z_OBJCE_P ( object ) == CACHED_PTR_EX ( cache_slot ) )		154399	1					
ANR	154688	Callee	EXPECTED		154399	0					
ANR	154689	Identifier	EXPECTED		154399	0					
ANR	154690	ArgumentList	Z_OBJCE_P ( object ) == CACHED_PTR_EX ( cache_slot )		154399	1					
ANR	154691	Argument	Z_OBJCE_P ( object ) == CACHED_PTR_EX ( cache_slot )		154399	0					
ANR	154692	EqualityExpression	Z_OBJCE_P ( object ) == CACHED_PTR_EX ( cache_slot )		154399	0		==			
ANR	154693	CallExpression	Z_OBJCE_P ( object )		154399	0					
ANR	154694	Callee	Z_OBJCE_P		154399	0					
ANR	154695	Identifier	Z_OBJCE_P		154399	0					
ANR	154696	ArgumentList	object		154399	1					
ANR	154697	Argument	object		154399	0					
ANR	154698	Identifier	object		154399	0					
ANR	154699	CallExpression	CACHED_PTR_EX ( cache_slot )		154399	1					
ANR	154700	Callee	CACHED_PTR_EX		154399	0					
ANR	154701	Identifier	CACHED_PTR_EX		154399	0					
ANR	154702	ArgumentList	cache_slot		154399	1					
ANR	154703	Argument	cache_slot		154399	0					
ANR	154704	Identifier	cache_slot		154399	0					
ANR	154705	CompoundStatement		55:2:1477:1491	154399	1					
ANR	154706	IdentifierDeclStatement	uint32_t prop_offset = ( uint32_t ) ( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 ) ;	1131:2:37308:37380	154399	0	True				
ANR	154707	IdentifierDecl	prop_offset = ( uint32_t ) ( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 )		154399	0					
ANR	154708	IdentifierDeclType	uint32_t		154399	0					
ANR	154709	Identifier	prop_offset		154399	1					
ANR	154710	AssignmentExpression	prop_offset = ( uint32_t ) ( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 )		154399	2		=			
ANR	154711	Identifier	prop_offset		154399	0					
ANR	154712	CastExpression	( uint32_t ) ( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 )		154399	1					
ANR	154713	CastTarget	uint32_t		154399	0					
ANR	154714	CastExpression	( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 )		154399	1					
ANR	154715	CastTarget	intptr_t		154399	0					
ANR	154716	CallExpression	CACHED_PTR_EX ( cache_slot + 1 )		154399	1					
ANR	154717	Callee	CACHED_PTR_EX		154399	0					
ANR	154718	Identifier	CACHED_PTR_EX		154399	0					
ANR	154719	ArgumentList	cache_slot + 1		154399	1					
ANR	154720	Argument	cache_slot + 1		154399	0					
ANR	154721	AdditiveExpression	cache_slot + 1		154399	0		+			
ANR	154722	Identifier	cache_slot		154399	0					
ANR	154723	PrimaryExpression	1		154399	1					
ANR	154724	IdentifierDeclStatement	zend_object * zobj = Z_OBJ_P ( object ) ;	1132:2:37384:37419	154399	1	True				
ANR	154725	IdentifierDecl	* zobj = Z_OBJ_P ( object )		154399	0					
ANR	154726	IdentifierDeclType	zend_object *		154399	0					
ANR	154727	Identifier	zobj		154399	1					
ANR	154728	AssignmentExpression	* zobj = Z_OBJ_P ( object )		154399	2		=			
ANR	154729	Identifier	zobj		154399	0					
ANR	154730	CallExpression	Z_OBJ_P ( object )		154399	1					
ANR	154731	Callee	Z_OBJ_P		154399	0					
ANR	154732	Identifier	Z_OBJ_P		154399	0					
ANR	154733	ArgumentList	object		154399	1					
ANR	154734	Argument	object		154399	0					
ANR	154735	Identifier	object		154399	0					
ANR	154736	IdentifierDeclStatement	zval * property ;	1133:2:37423:37437	154399	2	True				
ANR	154737	IdentifierDecl	* property		154399	0					
ANR	154738	IdentifierDeclType	zval *		154399	0					
ANR	154739	Identifier	property		154399	1					
ANR	154740	IfStatement	if ( EXPECTED ( prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET ) )		154399	3					
ANR	154741	Condition	EXPECTED ( prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET )	1135:6:37446:37508	154399	0	True				
ANR	154742	CallExpression	EXPECTED ( prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET )		154399	0					
ANR	154743	Callee	EXPECTED		154399	0					
ANR	154744	Identifier	EXPECTED		154399	0					
ANR	154745	ArgumentList	prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET		154399	1					
ANR	154746	Argument	prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET		154399	0					
ANR	154747	EqualityExpression	prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET		154399	0		!=			
ANR	154748	Identifier	prop_offset		154399	0					
ANR	154749	CastExpression	( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET		154399	1					
ANR	154750	CastTarget	uint32_t		154399	0					
ANR	154751	Identifier	ZEND_DYNAMIC_PROPERTY_OFFSET		154399	1					
ANR	154752	CompoundStatement		57:71:1565:1565	154399	1					
ANR	154753	ExpressionStatement	"property = OBJ_PROP ( zobj , prop_offset )"	1136:3:37516:37554	154399	0	True				
ANR	154754	AssignmentExpression	"property = OBJ_PROP ( zobj , prop_offset )"		154399	0		=			
ANR	154755	Identifier	property		154399	0					
ANR	154756	CallExpression	"OBJ_PROP ( zobj , prop_offset )"		154399	1					
ANR	154757	Callee	OBJ_PROP		154399	0					
ANR	154758	Identifier	OBJ_PROP		154399	0					
ANR	154759	ArgumentList	zobj		154399	1					
ANR	154760	Argument	zobj		154399	0					
ANR	154761	Identifier	zobj		154399	0					
ANR	154762	Argument	prop_offset		154399	1					
ANR	154763	Identifier	prop_offset		154399	0					
ANR	154764	IfStatement	if ( Z_TYPE_P ( property ) != IS_UNDEF )		154399	1					
ANR	154765	Condition	Z_TYPE_P ( property ) != IS_UNDEF	1137:7:37563:37592	154399	0	True				
ANR	154766	EqualityExpression	Z_TYPE_P ( property ) != IS_UNDEF		154399	0		!=			
ANR	154767	CallExpression	Z_TYPE_P ( property )		154399	0					
ANR	154768	Callee	Z_TYPE_P		154399	0					
ANR	154769	Identifier	Z_TYPE_P		154399	0					
ANR	154770	ArgumentList	property		154399	1					
ANR	154771	Argument	property		154399	0					
ANR	154772	Identifier	property		154399	0					
ANR	154773	Identifier	IS_UNDEF		154399	1					
ANR	154774	CompoundStatement		59:39:1649:1649	154399	1					
ANR	154775	Label	fast_assign :	1138:0:37597:37608	154399	0	True				
ANR	154776	Identifier	fast_assign		154399	0					
ANR	154777	ExpressionStatement	"value = zend_assign_to_variable ( property , value , value_type )"	1139:4:37614:37674	154399	1	True				
ANR	154778	AssignmentExpression	"value = zend_assign_to_variable ( property , value , value_type )"		154399	0		=			
ANR	154779	Identifier	value		154399	0					
ANR	154780	CallExpression	"zend_assign_to_variable ( property , value , value_type )"		154399	1					
ANR	154781	Callee	zend_assign_to_variable		154399	0					
ANR	154782	Identifier	zend_assign_to_variable		154399	0					
ANR	154783	ArgumentList	property		154399	1					
ANR	154784	Argument	property		154399	0					
ANR	154785	Identifier	property		154399	0					
ANR	154786	Argument	value		154399	1					
ANR	154787	Identifier	value		154399	0					
ANR	154788	Argument	value_type		154399	2					
ANR	154789	Identifier	value_type		154399	0					
ANR	154790	IfStatement	if ( retval && EXPECTED ( ! EG ( exception ) ) )		154399	2					
ANR	154791	Condition	retval && EXPECTED ( ! EG ( exception ) )	1140:8:37684:37717	154399	0	True				
ANR	154792	AndExpression	retval && EXPECTED ( ! EG ( exception ) )		154399	0		&&			
ANR	154793	Identifier	retval		154399	0					
ANR	154794	CallExpression	EXPECTED ( ! EG ( exception ) )		154399	1					
ANR	154795	Callee	EXPECTED		154399	0					
ANR	154796	Identifier	EXPECTED		154399	0					
ANR	154797	ArgumentList	! EG ( exception )		154399	1					
ANR	154798	Argument	! EG ( exception )		154399	0					
ANR	154799	UnaryOperationExpression	! EG ( exception )		154399	0					
ANR	154800	UnaryOperator	!		154399	0					
ANR	154801	CallExpression	EG ( exception )		154399	1					
ANR	154802	Callee	EG		154399	0					
ANR	154803	Identifier	EG		154399	0					
ANR	154804	ArgumentList	exception		154399	1					
ANR	154805	Argument	exception		154399	0					
ANR	154806	Identifier	exception		154399	0					
ANR	154807	CompoundStatement		62:44:1774:1774	154399	1					
ANR	154808	ExpressionStatement	"ZVAL_COPY ( retval , value )"	1141:5:37727:37751	154399	0	True				
ANR	154809	CallExpression	"ZVAL_COPY ( retval , value )"		154399	0					
ANR	154810	Callee	ZVAL_COPY		154399	0					
ANR	154811	Identifier	ZVAL_COPY		154399	0					
ANR	154812	ArgumentList	retval		154399	1					
ANR	154813	Argument	retval		154399	0					
ANR	154814	Identifier	retval		154399	0					
ANR	154815	Argument	value		154399	1					
ANR	154816	Identifier	value		154399	0					
ANR	154817	ReturnStatement	return ;	1143:4:37763:37769	154399	3	True				
ANR	154818	ElseStatement	else		154399	0					
ANR	154819	CompoundStatement		67:9:1839:1839	154399	0					
ANR	154820	IfStatement	if ( EXPECTED ( zobj -> properties != NULL ) )		154399	0					
ANR	154821	Condition	EXPECTED ( zobj -> properties != NULL )	1146:7:37794:37827	154399	0	True				
ANR	154822	CallExpression	EXPECTED ( zobj -> properties != NULL )		154399	0					
ANR	154823	Callee	EXPECTED		154399	0					
ANR	154824	Identifier	EXPECTED		154399	0					
ANR	154825	ArgumentList	zobj -> properties != NULL		154399	1					
ANR	154826	Argument	zobj -> properties != NULL		154399	0					
ANR	154827	EqualityExpression	zobj -> properties != NULL		154399	0		!=			
ANR	154828	PtrMemberAccess	zobj -> properties		154399	0					
ANR	154829	Identifier	zobj		154399	0					
ANR	154830	Identifier	properties		154399	1					
ANR	154831	Identifier	NULL		154399	1					
ANR	154832	CompoundStatement		68:43:1884:1884	154399	1					
ANR	154833	IfStatement	if ( UNEXPECTED ( GC_REFCOUNT ( zobj -> properties ) > 1 ) )		154399	0					
ANR	154834	Condition	UNEXPECTED ( GC_REFCOUNT ( zobj -> properties ) > 1 )	1147:8:37840:37884	154399	0	True				
ANR	154835	CallExpression	UNEXPECTED ( GC_REFCOUNT ( zobj -> properties ) > 1 )		154399	0					
ANR	154836	Callee	UNEXPECTED		154399	0					
ANR	154837	Identifier	UNEXPECTED		154399	0					
ANR	154838	ArgumentList	GC_REFCOUNT ( zobj -> properties ) > 1		154399	1					
ANR	154839	Argument	GC_REFCOUNT ( zobj -> properties ) > 1		154399	0					
ANR	154840	RelationalExpression	GC_REFCOUNT ( zobj -> properties ) > 1		154399	0		>			
ANR	154841	CallExpression	GC_REFCOUNT ( zobj -> properties )		154399	0					
ANR	154842	Callee	GC_REFCOUNT		154399	0					
ANR	154843	Identifier	GC_REFCOUNT		154399	0					
ANR	154844	ArgumentList	zobj -> properties		154399	1					
ANR	154845	Argument	zobj -> properties		154399	0					
ANR	154846	PtrMemberAccess	zobj -> properties		154399	0					
ANR	154847	Identifier	zobj		154399	0					
ANR	154848	Identifier	properties		154399	1					
ANR	154849	PrimaryExpression	1		154399	1					
ANR	154850	CompoundStatement		69:55:1941:1941	154399	1					
ANR	154851	IfStatement	if ( EXPECTED ( ! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE ) ) )		154399	0					
ANR	154852	Condition	EXPECTED ( ! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE ) )	1148:9:37898:37957	154399	0	True				
ANR	154853	CallExpression	EXPECTED ( ! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE ) )		154399	0					
ANR	154854	Callee	EXPECTED		154399	0					
ANR	154855	Identifier	EXPECTED		154399	0					
ANR	154856	ArgumentList	! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE )		154399	1					
ANR	154857	Argument	! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE )		154399	0					
ANR	154858	UnaryOperationExpression	! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE )		154399	0					
ANR	154859	UnaryOperator	!		154399	0					
ANR	154860	BitAndExpression	GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE		154399	1		&			
ANR	154861	CallExpression	GC_FLAGS ( zobj -> properties )		154399	0					
ANR	154862	Callee	GC_FLAGS		154399	0					
ANR	154863	Identifier	GC_FLAGS		154399	0					
ANR	154864	ArgumentList	zobj -> properties		154399	1					
ANR	154865	Argument	zobj -> properties		154399	0					
ANR	154866	PtrMemberAccess	zobj -> properties		154399	0					
ANR	154867	Identifier	zobj		154399	0					
ANR	154868	Identifier	properties		154399	1					
ANR	154869	Identifier	IS_ARRAY_IMMUTABLE		154399	1					
ANR	154870	CompoundStatement		70:71:2014:2014	154399	1					
ANR	154871	ExpressionStatement	GC_REFCOUNT ( zobj -> properties ) --	1149:6:37968:37999	154399	0	True				
ANR	154872	PostIncDecOperationExpression	GC_REFCOUNT ( zobj -> properties ) --		154399	0					
ANR	154873	CallExpression	GC_REFCOUNT ( zobj -> properties )		154399	0					
ANR	154874	Callee	GC_REFCOUNT		154399	0					
ANR	154875	Identifier	GC_REFCOUNT		154399	0					
ANR	154876	ArgumentList	zobj -> properties		154399	1					
ANR	154877	Argument	zobj -> properties		154399	0					
ANR	154878	PtrMemberAccess	zobj -> properties		154399	0					
ANR	154879	Identifier	zobj		154399	0					
ANR	154880	Identifier	properties		154399	1					
ANR	154881	IncDec	--		154399	1					
ANR	154882	ExpressionStatement	zobj -> properties = zend_array_dup ( zobj -> properties )	1151:5:38013:38064	154399	1	True				
ANR	154883	AssignmentExpression	zobj -> properties = zend_array_dup ( zobj -> properties )		154399	0		=			
ANR	154884	PtrMemberAccess	zobj -> properties		154399	0					
ANR	154885	Identifier	zobj		154399	0					
ANR	154886	Identifier	properties		154399	1					
ANR	154887	CallExpression	zend_array_dup ( zobj -> properties )		154399	1					
ANR	154888	Callee	zend_array_dup		154399	0					
ANR	154889	Identifier	zend_array_dup		154399	0					
ANR	154890	ArgumentList	zobj -> properties		154399	1					
ANR	154891	Argument	zobj -> properties		154399	0					
ANR	154892	PtrMemberAccess	zobj -> properties		154399	0					
ANR	154893	Identifier	zobj		154399	0					
ANR	154894	Identifier	properties		154399	1					
ANR	154895	ExpressionStatement	"property = zend_hash_find ( zobj -> properties , Z_STR_P ( property_name ) )"	1153:4:38076:38143	154399	1	True				
ANR	154896	AssignmentExpression	"property = zend_hash_find ( zobj -> properties , Z_STR_P ( property_name ) )"		154399	0		=			
ANR	154897	Identifier	property		154399	0					
ANR	154898	CallExpression	"zend_hash_find ( zobj -> properties , Z_STR_P ( property_name ) )"		154399	1					
ANR	154899	Callee	zend_hash_find		154399	0					
ANR	154900	Identifier	zend_hash_find		154399	0					
ANR	154901	ArgumentList	zobj -> properties		154399	1					
ANR	154902	Argument	zobj -> properties		154399	0					
ANR	154903	PtrMemberAccess	zobj -> properties		154399	0					
ANR	154904	Identifier	zobj		154399	0					
ANR	154905	Identifier	properties		154399	1					
ANR	154906	Argument	Z_STR_P ( property_name )		154399	1					
ANR	154907	CallExpression	Z_STR_P ( property_name )		154399	0					
ANR	154908	Callee	Z_STR_P		154399	0					
ANR	154909	Identifier	Z_STR_P		154399	0					
ANR	154910	ArgumentList	property_name		154399	1					
ANR	154911	Argument	property_name		154399	0					
ANR	154912	Identifier	property_name		154399	0					
ANR	154913	IfStatement	if ( property )		154399	2					
ANR	154914	Condition	property	1154:8:38153:38160	154399	0	True				
ANR	154915	Identifier	property		154399	0					
ANR	154916	CompoundStatement		76:18:2217:2217	154399	1					
ANR	154917	GotoStatement	goto fast_assign ;	1155:5:38170:38186	154399	0	True				
ANR	154918	Identifier	fast_assign		154399	0					
ANR	154919	IfStatement	if ( ! zobj -> ce -> __set )		154399	1					
ANR	154920	Condition	! zobj -> ce -> __set	1159:7:38207:38222	154399	0	True				
ANR	154921	UnaryOperationExpression	! zobj -> ce -> __set		154399	0					
ANR	154922	UnaryOperator	!		154399	0					
ANR	154923	PtrMemberAccess	zobj -> ce -> __set		154399	1					
ANR	154924	PtrMemberAccess	zobj -> ce		154399	0					
ANR	154925	Identifier	zobj		154399	0					
ANR	154926	Identifier	ce		154399	1					
ANR	154927	Identifier	__set		154399	1					
ANR	154928	CompoundStatement		81:25:2279:2279	154399	1					
ANR	154929	IfStatement	if ( EXPECTED ( zobj -> properties == NULL ) )		154399	0					
ANR	154930	Condition	EXPECTED ( zobj -> properties == NULL )	1161:8:38236:38269	154399	0	True				
ANR	154931	CallExpression	EXPECTED ( zobj -> properties == NULL )		154399	0					
ANR	154932	Callee	EXPECTED		154399	0					
ANR	154933	Identifier	EXPECTED		154399	0					
ANR	154934	ArgumentList	zobj -> properties == NULL		154399	1					
ANR	154935	Argument	zobj -> properties == NULL		154399	0					
ANR	154936	EqualityExpression	zobj -> properties == NULL		154399	0		==			
ANR	154937	PtrMemberAccess	zobj -> properties		154399	0					
ANR	154938	Identifier	zobj		154399	0					
ANR	154939	Identifier	properties		154399	1					
ANR	154940	Identifier	NULL		154399	1					
ANR	154941	CompoundStatement		83:44:2326:2326	154399	1					
ANR	154942	ExpressionStatement	rebuild_object_properties ( zobj )	1162:5:38279:38310	154399	0	True				
ANR	154943	CallExpression	rebuild_object_properties ( zobj )		154399	0					
ANR	154944	Callee	rebuild_object_properties		154399	0					
ANR	154945	Identifier	rebuild_object_properties		154399	0					
ANR	154946	ArgumentList	zobj		154399	1					
ANR	154947	Argument	zobj		154399	0					
ANR	154948	Identifier	zobj		154399	0					
ANR	154949	IfStatement	if ( value_type == IS_CONST )		154399	1					
ANR	154950	Condition	value_type == IS_CONST	1165:8:38368:38389	154399	0	True				
ANR	154951	EqualityExpression	value_type == IS_CONST		154399	0		==			
ANR	154952	Identifier	value_type		154399	0					
ANR	154953	Identifier	IS_CONST		154399	1					
ANR	154954	CompoundStatement		87:32:2446:2446	154399	1					
ANR	154955	IfStatement	if ( UNEXPECTED ( Z_OPT_COPYABLE_P ( value ) ) )		154399	0					
ANR	154956	Condition	UNEXPECTED ( Z_OPT_COPYABLE_P ( value ) )	1166:9:38403:38437	154399	0	True				
ANR	154957	CallExpression	UNEXPECTED ( Z_OPT_COPYABLE_P ( value ) )		154399	0					
ANR	154958	Callee	UNEXPECTED		154399	0					
ANR	154959	Identifier	UNEXPECTED		154399	0					
ANR	154960	ArgumentList	Z_OPT_COPYABLE_P ( value )		154399	1					
ANR	154961	Argument	Z_OPT_COPYABLE_P ( value )		154399	0					
ANR	154962	CallExpression	Z_OPT_COPYABLE_P ( value )		154399	0					
ANR	154963	Callee	Z_OPT_COPYABLE_P		154399	0					
ANR	154964	Identifier	Z_OPT_COPYABLE_P		154399	0					
ANR	154965	ArgumentList	value		154399	1					
ANR	154966	Argument	value		154399	0					
ANR	154967	Identifier	value		154399	0					
ANR	154968	CompoundStatement		88:46:2494:2494	154399	1					
ANR	154969	ExpressionStatement	"ZVAL_COPY_VALUE ( & tmp , value )"	1167:6:38448:38476	154399	0	True				
ANR	154970	CallExpression	"ZVAL_COPY_VALUE ( & tmp , value )"		154399	0					
ANR	154971	Callee	ZVAL_COPY_VALUE		154399	0					
ANR	154972	Identifier	ZVAL_COPY_VALUE		154399	0					
ANR	154973	ArgumentList	& tmp		154399	1					
ANR	154974	Argument	& tmp		154399	0					
ANR	154975	UnaryOperationExpression	& tmp		154399	0					
ANR	154976	UnaryOperator	&		154399	0					
ANR	154977	Identifier	tmp		154399	1					
ANR	154978	Argument	value		154399	1					
ANR	154979	Identifier	value		154399	0					
ANR	154980	ExpressionStatement	zval_copy_ctor_func ( & tmp )	1168:6:38484:38509	154399	1	True				
ANR	154981	CallExpression	zval_copy_ctor_func ( & tmp )		154399	0					
ANR	154982	Callee	zval_copy_ctor_func		154399	0					
ANR	154983	Identifier	zval_copy_ctor_func		154399	0					
ANR	154984	ArgumentList	& tmp		154399	1					
ANR	154985	Argument	& tmp		154399	0					
ANR	154986	UnaryOperationExpression	& tmp		154399	0					
ANR	154987	UnaryOperator	&		154399	0					
ANR	154988	Identifier	tmp		154399	1					
ANR	154989	ExpressionStatement	value = & tmp	1169:6:38517:38529	154399	2	True				
ANR	154990	AssignmentExpression	value = & tmp		154399	0		=			
ANR	154991	Identifier	value		154399	0					
ANR	154992	UnaryOperationExpression	& tmp		154399	1					
ANR	154993	UnaryOperator	&		154399	0					
ANR	154994	Identifier	tmp		154399	1					
ANR	154995	ElseStatement	else		154399	0					
ANR	154996	IfStatement	if ( value_type != IS_TMP_VAR )		154399	0					
ANR	154997	Condition	value_type != IS_TMP_VAR	1171:15:38553:38576	154399	0	True				
ANR	154998	EqualityExpression	value_type != IS_TMP_VAR		154399	0		!=			
ANR	154999	Identifier	value_type		154399	0					
ANR	155000	Identifier	IS_TMP_VAR		154399	1					
ANR	155001	CompoundStatement		93:41:2633:2633	154399	1					
ANR	155002	IfStatement	if ( Z_ISREF_P ( value ) )		154399	0					
ANR	155003	Condition	Z_ISREF_P ( value )	1172:9:38590:38605	154399	0	True				
ANR	155004	CallExpression	Z_ISREF_P ( value )		154399	0					
ANR	155005	Callee	Z_ISREF_P		154399	0					
ANR	155006	Identifier	Z_ISREF_P		154399	0					
ANR	155007	ArgumentList	value		154399	1					
ANR	155008	Argument	value		154399	0					
ANR	155009	Identifier	value		154399	0					
ANR	155010	CompoundStatement		94:27:2662:2662	154399	1					
ANR	155011	IfStatement	if ( value_type == IS_VAR )		154399	0					
ANR	155012	Condition	value_type == IS_VAR	1173:10:38620:38639	154399	0	True				
ANR	155013	EqualityExpression	value_type == IS_VAR		154399	0		==			
ANR	155014	Identifier	value_type		154399	0					
ANR	155015	Identifier	IS_VAR		154399	1					
ANR	155016	CompoundStatement		96:7:2705:2741	154399	1					
ANR	155017	IdentifierDeclStatement	zend_reference * ref = Z_REF_P ( value ) ;	1174:7:38651:38687	154399	0	True				
ANR	155018	IdentifierDecl	* ref = Z_REF_P ( value )		154399	0					
ANR	155019	IdentifierDeclType	zend_reference *		154399	0					
ANR	155020	Identifier	ref		154399	1					
ANR	155021	AssignmentExpression	* ref = Z_REF_P ( value )		154399	2		=			
ANR	155022	Identifier	ref		154399	0					
ANR	155023	CallExpression	Z_REF_P ( value )		154399	1					
ANR	155024	Callee	Z_REF_P		154399	0					
ANR	155025	Identifier	Z_REF_P		154399	0					
ANR	155026	ArgumentList	value		154399	1					
ANR	155027	Argument	value		154399	0					
ANR	155028	Identifier	value		154399	0					
ANR	155029	IfStatement	if ( -- ( GC_REFCOUNT ( ref ) ) == 0 )		154399	1					
ANR	155030	Condition	-- ( GC_REFCOUNT ( ref ) ) == 0	1175:11:38700:38724	154399	0	True				
ANR	155031	EqualityExpression	-- ( GC_REFCOUNT ( ref ) ) == 0		154399	0		==			
ANR	155032	UnaryExpression	-- ( GC_REFCOUNT ( ref ) )		154399	0					
ANR	155033	IncDec	--		154399	0					
ANR	155034	CallExpression	GC_REFCOUNT ( ref )		154399	1					
ANR	155035	Callee	GC_REFCOUNT		154399	0					
ANR	155036	Identifier	GC_REFCOUNT		154399	0					
ANR	155037	ArgumentList	ref		154399	1					
ANR	155038	Argument	ref		154399	0					
ANR	155039	Identifier	ref		154399	0					
ANR	155040	PrimaryExpression	0		154399	1					
ANR	155041	CompoundStatement		97:38:2781:2781	154399	1					
ANR	155042	ExpressionStatement	"ZVAL_COPY_VALUE ( & tmp , Z_REFVAL_P ( value ) )"	1176:8:38737:38777	154399	0	True				
ANR	155043	CallExpression	"ZVAL_COPY_VALUE ( & tmp , Z_REFVAL_P ( value ) )"		154399	0					
ANR	155044	Callee	ZVAL_COPY_VALUE		154399	0					
ANR	155045	Identifier	ZVAL_COPY_VALUE		154399	0					
ANR	155046	ArgumentList	& tmp		154399	1					
ANR	155047	Argument	& tmp		154399	0					
ANR	155048	UnaryOperationExpression	& tmp		154399	0					
ANR	155049	UnaryOperator	&		154399	0					
ANR	155050	Identifier	tmp		154399	1					
ANR	155051	Argument	Z_REFVAL_P ( value )		154399	1					
ANR	155052	CallExpression	Z_REFVAL_P ( value )		154399	0					
ANR	155053	Callee	Z_REFVAL_P		154399	0					
ANR	155054	Identifier	Z_REFVAL_P		154399	0					
ANR	155055	ArgumentList	value		154399	1					
ANR	155056	Argument	value		154399	0					
ANR	155057	Identifier	value		154399	0					
ANR	155058	ExpressionStatement	"efree_size ( ref , sizeof ( zend_reference ) )"	1177:8:38787:38826	154399	1	True				
ANR	155059	CallExpression	"efree_size ( ref , sizeof ( zend_reference ) )"		154399	0					
ANR	155060	Callee	efree_size		154399	0					
ANR	155061	Identifier	efree_size		154399	0					
ANR	155062	ArgumentList	ref		154399	1					
ANR	155063	Argument	ref		154399	0					
ANR	155064	Identifier	ref		154399	0					
ANR	155065	Argument	sizeof ( zend_reference )		154399	1					
ANR	155066	SizeofExpression	sizeof ( zend_reference )		154399	0					
ANR	155067	Sizeof	sizeof		154399	0					
ANR	155068	SizeofOperand	zend_reference		154399	1					
ANR	155069	ExpressionStatement	value = & tmp	1178:8:38836:38848	154399	2	True				
ANR	155070	AssignmentExpression	value = & tmp		154399	0		=			
ANR	155071	Identifier	value		154399	0					
ANR	155072	UnaryOperationExpression	& tmp		154399	1					
ANR	155073	UnaryOperator	&		154399	0					
ANR	155074	Identifier	tmp		154399	1					
ANR	155075	ElseStatement	else		154399	0					
ANR	155076	CompoundStatement		101:14:2918:2918	154399	0					
ANR	155077	ExpressionStatement	value = Z_REFVAL_P ( value )	1180:8:38874:38899	154399	0	True				
ANR	155078	AssignmentExpression	value = Z_REFVAL_P ( value )		154399	0		=			
ANR	155079	Identifier	value		154399	0					
ANR	155080	CallExpression	Z_REFVAL_P ( value )		154399	1					
ANR	155081	Callee	Z_REFVAL_P		154399	0					
ANR	155082	Identifier	Z_REFVAL_P		154399	0					
ANR	155083	ArgumentList	value		154399	1					
ANR	155084	Argument	value		154399	0					
ANR	155085	Identifier	value		154399	0					
ANR	155086	IfStatement	if ( Z_REFCOUNTED_P ( value ) )		154399	1					
ANR	155087	Condition	Z_REFCOUNTED_P ( value )	1181:12:38913:38933	154399	0	True				
ANR	155088	CallExpression	Z_REFCOUNTED_P ( value )		154399	0					
ANR	155089	Callee	Z_REFCOUNTED_P		154399	0					
ANR	155090	Identifier	Z_REFCOUNTED_P		154399	0					
ANR	155091	ArgumentList	value		154399	1					
ANR	155092	Argument	value		154399	0					
ANR	155093	Identifier	value		154399	0					
ANR	155094	CompoundStatement		103:35:2990:2990	154399	1					
ANR	155095	ExpressionStatement	Z_ADDREF_P ( value )	1182:9:38947:38964	154399	0	True				
ANR	155096	CallExpression	Z_ADDREF_P ( value )		154399	0					
ANR	155097	Callee	Z_ADDREF_P		154399	0					
ANR	155098	Identifier	Z_ADDREF_P		154399	0					
ANR	155099	ArgumentList	value		154399	1					
ANR	155100	Argument	value		154399	0					
ANR	155101	Identifier	value		154399	0					
ANR	155102	ElseStatement	else		154399	0					
ANR	155103	CompoundStatement		107:13:3052:3052	154399	0					
ANR	155104	ExpressionStatement	value = Z_REFVAL_P ( value )	1186:7:39007:39032	154399	0	True				
ANR	155105	AssignmentExpression	value = Z_REFVAL_P ( value )		154399	0		=			
ANR	155106	Identifier	value		154399	0					
ANR	155107	CallExpression	Z_REFVAL_P ( value )		154399	1					
ANR	155108	Callee	Z_REFVAL_P		154399	0					
ANR	155109	Identifier	Z_REFVAL_P		154399	0					
ANR	155110	ArgumentList	value		154399	1					
ANR	155111	Argument	value		154399	0					
ANR	155112	Identifier	value		154399	0					
ANR	155113	IfStatement	if ( Z_REFCOUNTED_P ( value ) )		154399	1					
ANR	155114	Condition	Z_REFCOUNTED_P ( value )	1187:11:39045:39065	154399	0	True				
ANR	155115	CallExpression	Z_REFCOUNTED_P ( value )		154399	0					
ANR	155116	Callee	Z_REFCOUNTED_P		154399	0					
ANR	155117	Identifier	Z_REFCOUNTED_P		154399	0					
ANR	155118	ArgumentList	value		154399	1					
ANR	155119	Argument	value		154399	0					
ANR	155120	Identifier	value		154399	0					
ANR	155121	CompoundStatement		109:34:3122:3122	154399	1					
ANR	155122	ExpressionStatement	Z_ADDREF_P ( value )	1188:8:39078:39095	154399	0	True				
ANR	155123	CallExpression	Z_ADDREF_P ( value )		154399	0					
ANR	155124	Callee	Z_ADDREF_P		154399	0					
ANR	155125	Identifier	Z_ADDREF_P		154399	0					
ANR	155126	ArgumentList	value		154399	1					
ANR	155127	Argument	value		154399	0					
ANR	155128	Identifier	value		154399	0					
ANR	155129	ElseStatement	else		154399	0					
ANR	155130	IfStatement	if ( value_type == IS_CV && Z_REFCOUNTED_P ( value ) )		154399	0					
ANR	155131	Condition	value_type == IS_CV && Z_REFCOUNTED_P ( value )	1191:16:39130:39173	154399	0	True				
ANR	155132	AndExpression	value_type == IS_CV && Z_REFCOUNTED_P ( value )		154399	0		&&			
ANR	155133	EqualityExpression	value_type == IS_CV		154399	0		==			
ANR	155134	Identifier	value_type		154399	0					
ANR	155135	Identifier	IS_CV		154399	1					
ANR	155136	CallExpression	Z_REFCOUNTED_P ( value )		154399	1					
ANR	155137	Callee	Z_REFCOUNTED_P		154399	0					
ANR	155138	Identifier	Z_REFCOUNTED_P		154399	0					
ANR	155139	ArgumentList	value		154399	1					
ANR	155140	Argument	value		154399	0					
ANR	155141	Identifier	value		154399	0					
ANR	155142	CompoundStatement		113:62:3230:3230	154399	1					
ANR	155143	ExpressionStatement	Z_ADDREF_P ( value )	1192:6:39184:39201	154399	0	True				
ANR	155144	CallExpression	Z_ADDREF_P ( value )		154399	0					
ANR	155145	Callee	Z_ADDREF_P		154399	0					
ANR	155146	Identifier	Z_ADDREF_P		154399	0					
ANR	155147	ArgumentList	value		154399	1					
ANR	155148	Argument	value		154399	0					
ANR	155149	Identifier	value		154399	0					
ANR	155150	ExpressionStatement	"zend_hash_add_new ( zobj -> properties , Z_STR_P ( property_name ) , value )"	1195:4:39220:39286	154399	2	True				
ANR	155151	CallExpression	"zend_hash_add_new ( zobj -> properties , Z_STR_P ( property_name ) , value )"		154399	0					
ANR	155152	Callee	zend_hash_add_new		154399	0					
ANR	155153	Identifier	zend_hash_add_new		154399	0					
ANR	155154	ArgumentList	zobj -> properties		154399	1					
ANR	155155	Argument	zobj -> properties		154399	0					
ANR	155156	PtrMemberAccess	zobj -> properties		154399	0					
ANR	155157	Identifier	zobj		154399	0					
ANR	155158	Identifier	properties		154399	1					
ANR	155159	Argument	Z_STR_P ( property_name )		154399	1					
ANR	155160	CallExpression	Z_STR_P ( property_name )		154399	0					
ANR	155161	Callee	Z_STR_P		154399	0					
ANR	155162	Identifier	Z_STR_P		154399	0					
ANR	155163	ArgumentList	property_name		154399	1					
ANR	155164	Argument	property_name		154399	0					
ANR	155165	Identifier	property_name		154399	0					
ANR	155166	Argument	value		154399	2					
ANR	155167	Identifier	value		154399	0					
ANR	155168	IfStatement	if ( retval )		154399	3					
ANR	155169	Condition	retval	1196:8:39296:39301	154399	0	True				
ANR	155170	Identifier	retval		154399	0					
ANR	155171	CompoundStatement		118:16:3358:3358	154399	1					
ANR	155172	ExpressionStatement	"ZVAL_COPY ( retval , value )"	1197:5:39311:39335	154399	0	True				
ANR	155173	CallExpression	"ZVAL_COPY ( retval , value )"		154399	0					
ANR	155174	Callee	ZVAL_COPY		154399	0					
ANR	155175	Identifier	ZVAL_COPY		154399	0					
ANR	155176	ArgumentList	retval		154399	1					
ANR	155177	Argument	retval		154399	0					
ANR	155178	Identifier	retval		154399	0					
ANR	155179	Argument	value		154399	1					
ANR	155180	Identifier	value		154399	0					
ANR	155181	ReturnStatement	return ;	1199:4:39347:39353	154399	4	True				
ANR	155182	IfStatement	if ( ! Z_OBJ_HT_P ( object ) -> write_property )		154399	5					
ANR	155183	Condition	! Z_OBJ_HT_P ( object ) -> write_property	1204:5:39376:39410	154399	0	True				
ANR	155184	UnaryOperationExpression	! Z_OBJ_HT_P ( object ) -> write_property		154399	0					
ANR	155185	UnaryOperator	!		154399	0					
ANR	155186	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_property		154399	1					
ANR	155187	CallExpression	Z_OBJ_HT_P ( object )		154399	0					
ANR	155188	Callee	Z_OBJ_HT_P		154399	0					
ANR	155189	Identifier	Z_OBJ_HT_P		154399	0					
ANR	155190	ArgumentList	object		154399	1					
ANR	155191	Argument	object		154399	0					
ANR	155192	Identifier	object		154399	0					
ANR	155193	Identifier	write_property		154399	1					
ANR	155194	CompoundStatement		126:42:3467:3467	154399	1					
ANR	155195	ExpressionStatement	"zend_error ( E_WARNING , ""Attempt to assign property of non-object"" )"	1205:2:39417:39482	154399	0	True				
ANR	155196	CallExpression	"zend_error ( E_WARNING , ""Attempt to assign property of non-object"" )"		154399	0					
ANR	155197	Callee	zend_error		154399	0					
ANR	155198	Identifier	zend_error		154399	0					
ANR	155199	ArgumentList	E_WARNING		154399	1					
ANR	155200	Argument	E_WARNING		154399	0					
ANR	155201	Identifier	E_WARNING		154399	0					
ANR	155202	Argument	"""Attempt to assign property of non-object"""		154399	1					
ANR	155203	PrimaryExpression	"""Attempt to assign property of non-object"""		154399	0					
ANR	155204	IfStatement	if ( retval )		154399	1					
ANR	155205	Condition	retval	1206:6:39490:39495	154399	0	True				
ANR	155206	Identifier	retval		154399	0					
ANR	155207	CompoundStatement		128:14:3552:3552	154399	1					
ANR	155208	ExpressionStatement	ZVAL_NULL ( retval )	1207:3:39503:39520	154399	0	True				
ANR	155209	CallExpression	ZVAL_NULL ( retval )		154399	0					
ANR	155210	Callee	ZVAL_NULL		154399	0					
ANR	155211	Identifier	ZVAL_NULL		154399	0					
ANR	155212	ArgumentList	retval		154399	1					
ANR	155213	Argument	retval		154399	0					
ANR	155214	Identifier	retval		154399	0					
ANR	155215	ExpressionStatement	FREE_OP ( free_value )	1209:2:39528:39547	154399	2	True				
ANR	155216	CallExpression	FREE_OP ( free_value )		154399	0					
ANR	155217	Callee	FREE_OP		154399	0					
ANR	155218	Identifier	FREE_OP		154399	0					
ANR	155219	ArgumentList	free_value		154399	1					
ANR	155220	Argument	free_value		154399	0					
ANR	155221	Identifier	free_value		154399	0					
ANR	155222	ReturnStatement	return ;	1210:2:39551:39557	154399	3	True				
ANR	155223	IfStatement	if ( value_type == IS_CONST )		154399	6					
ANR	155224	Condition	value_type == IS_CONST	1214:5:39607:39628	154399	0	True				
ANR	155225	EqualityExpression	value_type == IS_CONST		154399	0		==			
ANR	155226	Identifier	value_type		154399	0					
ANR	155227	Identifier	IS_CONST		154399	1					
ANR	155228	CompoundStatement		136:29:3685:3685	154399	1					
ANR	155229	IfStatement	if ( UNEXPECTED ( Z_OPT_COPYABLE_P ( value ) ) )		154399	0					
ANR	155230	Condition	UNEXPECTED ( Z_OPT_COPYABLE_P ( value ) )	1215:6:39639:39673	154399	0	True				
ANR	155231	CallExpression	UNEXPECTED ( Z_OPT_COPYABLE_P ( value ) )		154399	0					
ANR	155232	Callee	UNEXPECTED		154399	0					
ANR	155233	Identifier	UNEXPECTED		154399	0					
ANR	155234	ArgumentList	Z_OPT_COPYABLE_P ( value )		154399	1					
ANR	155235	Argument	Z_OPT_COPYABLE_P ( value )		154399	0					
ANR	155236	CallExpression	Z_OPT_COPYABLE_P ( value )		154399	0					
ANR	155237	Callee	Z_OPT_COPYABLE_P		154399	0					
ANR	155238	Identifier	Z_OPT_COPYABLE_P		154399	0					
ANR	155239	ArgumentList	value		154399	1					
ANR	155240	Argument	value		154399	0					
ANR	155241	Identifier	value		154399	0					
ANR	155242	CompoundStatement		137:43:3730:3730	154399	1					
ANR	155243	ExpressionStatement	"ZVAL_COPY_VALUE ( & tmp , value )"	1216:3:39681:39709	154399	0	True				
ANR	155244	CallExpression	"ZVAL_COPY_VALUE ( & tmp , value )"		154399	0					
ANR	155245	Callee	ZVAL_COPY_VALUE		154399	0					
ANR	155246	Identifier	ZVAL_COPY_VALUE		154399	0					
ANR	155247	ArgumentList	& tmp		154399	1					
ANR	155248	Argument	& tmp		154399	0					
ANR	155249	UnaryOperationExpression	& tmp		154399	0					
ANR	155250	UnaryOperator	&		154399	0					
ANR	155251	Identifier	tmp		154399	1					
ANR	155252	Argument	value		154399	1					
ANR	155253	Identifier	value		154399	0					
ANR	155254	ExpressionStatement	zval_copy_ctor_func ( & tmp )	1217:3:39714:39739	154399	1	True				
ANR	155255	CallExpression	zval_copy_ctor_func ( & tmp )		154399	0					
ANR	155256	Callee	zval_copy_ctor_func		154399	0					
ANR	155257	Identifier	zval_copy_ctor_func		154399	0					
ANR	155258	ArgumentList	& tmp		154399	1					
ANR	155259	Argument	& tmp		154399	0					
ANR	155260	UnaryOperationExpression	& tmp		154399	0					
ANR	155261	UnaryOperator	&		154399	0					
ANR	155262	Identifier	tmp		154399	1					
ANR	155263	ExpressionStatement	value = & tmp	1218:3:39744:39756	154399	2	True				
ANR	155264	AssignmentExpression	value = & tmp		154399	0		=			
ANR	155265	Identifier	value		154399	0					
ANR	155266	UnaryOperationExpression	& tmp		154399	1					
ANR	155267	UnaryOperator	&		154399	0					
ANR	155268	Identifier	tmp		154399	1					
ANR	155269	ElseStatement	else		154399	0					
ANR	155270	IfStatement	if ( value_type != IS_TMP_VAR )		154399	0					
ANR	155271	Condition	value_type != IS_TMP_VAR	1220:12:39774:39797	154399	0	True				
ANR	155272	EqualityExpression	value_type != IS_TMP_VAR		154399	0		!=			
ANR	155273	Identifier	value_type		154399	0					
ANR	155274	Identifier	IS_TMP_VAR		154399	1					
ANR	155275	CompoundStatement		142:38:3854:3854	154399	1					
ANR	155276	ExpressionStatement	ZVAL_DEREF ( value )	1221:2:39804:39821	154399	0	True				
ANR	155277	CallExpression	ZVAL_DEREF ( value )		154399	0					
ANR	155278	Callee	ZVAL_DEREF		154399	0					
ANR	155279	Identifier	ZVAL_DEREF		154399	0					
ANR	155280	ArgumentList	value		154399	1					
ANR	155281	Argument	value		154399	0					
ANR	155282	Identifier	value		154399	0					
ANR	155283	ExpressionStatement	"Z_OBJ_HT_P ( object ) -> write_property ( object , property_name , value , cache_slot )"	1224:1:39828:39904	154399	7	True				
ANR	155284	CallExpression	"Z_OBJ_HT_P ( object ) -> write_property ( object , property_name , value , cache_slot )"		154399	0					
ANR	155285	Callee	Z_OBJ_HT_P ( object ) -> write_property		154399	0					
ANR	155286	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_property		154399	0					
ANR	155287	CallExpression	Z_OBJ_HT_P ( object )		154399	0					
ANR	155288	Callee	Z_OBJ_HT_P		154399	0					
ANR	155289	Identifier	Z_OBJ_HT_P		154399	0					
ANR	155290	ArgumentList	object		154399	1					
ANR	155291	Argument	object		154399	0					
ANR	155292	Identifier	object		154399	0					
ANR	155293	Identifier	write_property		154399	1					
ANR	155294	ArgumentList	object		154399	1					
ANR	155295	Argument	object		154399	0					
ANR	155296	Identifier	object		154399	0					
ANR	155297	Argument	property_name		154399	1					
ANR	155298	Identifier	property_name		154399	0					
ANR	155299	Argument	value		154399	2					
ANR	155300	Identifier	value		154399	0					
ANR	155301	Argument	cache_slot		154399	3					
ANR	155302	Identifier	cache_slot		154399	0					
ANR	155303	IfStatement	if ( retval && EXPECTED ( ! EG ( exception ) ) )		154399	8					
ANR	155304	Condition	retval && EXPECTED ( ! EG ( exception ) )	1226:5:39912:39945	154399	0	True				
ANR	155305	AndExpression	retval && EXPECTED ( ! EG ( exception ) )		154399	0		&&			
ANR	155306	Identifier	retval		154399	0					
ANR	155307	CallExpression	EXPECTED ( ! EG ( exception ) )		154399	1					
ANR	155308	Callee	EXPECTED		154399	0					
ANR	155309	Identifier	EXPECTED		154399	0					
ANR	155310	ArgumentList	! EG ( exception )		154399	1					
ANR	155311	Argument	! EG ( exception )		154399	0					
ANR	155312	UnaryOperationExpression	! EG ( exception )		154399	0					
ANR	155313	UnaryOperator	!		154399	0					
ANR	155314	CallExpression	EG ( exception )		154399	1					
ANR	155315	Callee	EG		154399	0					
ANR	155316	Identifier	EG		154399	0					
ANR	155317	ArgumentList	exception		154399	1					
ANR	155318	Argument	exception		154399	0					
ANR	155319	Identifier	exception		154399	0					
ANR	155320	CompoundStatement		148:41:4002:4002	154399	1					
ANR	155321	ExpressionStatement	"ZVAL_COPY ( retval , value )"	1227:2:39952:39976	154399	0	True				
ANR	155322	CallExpression	"ZVAL_COPY ( retval , value )"		154399	0					
ANR	155323	Callee	ZVAL_COPY		154399	0					
ANR	155324	Identifier	ZVAL_COPY		154399	0					
ANR	155325	ArgumentList	retval		154399	1					
ANR	155326	Argument	retval		154399	0					
ANR	155327	Identifier	retval		154399	0					
ANR	155328	Argument	value		154399	1					
ANR	155329	Identifier	value		154399	0					
ANR	155330	IfStatement	if ( value_type == IS_CONST )		154399	9					
ANR	155331	Condition	value_type == IS_CONST	1229:5:39986:40007	154399	0	True				
ANR	155332	EqualityExpression	value_type == IS_CONST		154399	0		==			
ANR	155333	Identifier	value_type		154399	0					
ANR	155334	Identifier	IS_CONST		154399	1					
ANR	155335	CompoundStatement		151:29:4064:4064	154399	1					
ANR	155336	ExpressionStatement	zval_ptr_dtor_nogc ( value )	1230:2:40014:40039	154399	0	True				
ANR	155337	CallExpression	zval_ptr_dtor_nogc ( value )		154399	0					
ANR	155338	Callee	zval_ptr_dtor_nogc		154399	0					
ANR	155339	Identifier	zval_ptr_dtor_nogc		154399	0					
ANR	155340	ArgumentList	value		154399	1					
ANR	155341	Argument	value		154399	0					
ANR	155342	Identifier	value		154399	0					
ANR	155343	ElseStatement	else		154399	0					
ANR	155344	CompoundStatement		153:8:4103:4103	154399	0					
ANR	155345	ExpressionStatement	FREE_OP ( free_value )	1232:2:40053:40072	154399	0	True				
ANR	155346	CallExpression	FREE_OP ( free_value )		154399	0					
ANR	155347	Callee	FREE_OP		154399	0					
ANR	155348	Identifier	FREE_OP		154399	0					
ANR	155349	ArgumentList	free_value		154399	1					
ANR	155350	Argument	free_value		154399	0					
ANR	155351	Identifier	free_value		154399	0					
ANR	155352	ReturnType	static zend_always_inline void		154399	1					
ANR	155353	Identifier	zend_assign_to_object		154399	2					
ANR	155354	ParameterList	"zval * retval , zval * object , uint32_t object_op_type , zval * property_name , uint32_t property_op_type , int value_type , znode_op value_op , const zend_execute_data * execute_data , void * * cache_slot"		154399	3					
ANR	155355	Parameter	zval * retval	1078:53:35751:35762	154399	0	True				
ANR	155356	ParameterType	zval *		154399	0					
ANR	155357	Identifier	retval		154399	1					
ANR	155358	Parameter	zval * object	1078:67:35765:35776	154399	1	True				
ANR	155359	ParameterType	zval *		154399	0					
ANR	155360	Identifier	object		154399	1					
ANR	155361	Parameter	uint32_t object_op_type	1078:81:35779:35801	154399	2	True				
ANR	155362	ParameterType	uint32_t		154399	0					
ANR	155363	Identifier	object_op_type		154399	1					
ANR	155364	Parameter	zval * property_name	1078:106:35804:35822	154399	3	True				
ANR	155365	ParameterType	zval *		154399	0					
ANR	155366	Identifier	property_name		154399	1					
ANR	155367	Parameter	uint32_t property_op_type	1078:127:35825:35849	154399	4	True				
ANR	155368	ParameterType	uint32_t		154399	0					
ANR	155369	Identifier	property_op_type		154399	1					
ANR	155370	Parameter	int value_type	1078:154:35852:35865	154399	5	True				
ANR	155371	ParameterType	int		154399	0					
ANR	155372	Identifier	value_type		154399	1					
ANR	155373	Parameter	znode_op value_op	1078:170:35868:35884	154399	6	True				
ANR	155374	ParameterType	znode_op		154399	0					
ANR	155375	Identifier	value_op		154399	1					
ANR	155376	Parameter	const zend_execute_data * execute_data	1078:189:35887:35923	154399	7	True				
ANR	155377	ParameterType	const zend_execute_data *		154399	0					
ANR	155378	Identifier	execute_data		154399	1					
ANR	155379	Parameter	void * * cache_slot	1078:228:35926:35942	154399	8	True				
ANR	155380	ParameterType	void * *		154399	0					
ANR	155381	Identifier	cache_slot		154399	1					
ANR	155382	CFGEntryNode	ENTRY		154399		True				
ANR	155383	CFGExitNode	EXIT		154399		True				
ANR	155384	Symbol	exception		154399						
ANR	155385	Symbol	value_type		154399						
ANR	155386	Symbol	IS_CV		154399						
ANR	155387	Symbol	zobj		154399						
ANR	155388	Symbol	GC_FLAGS		154399						
ANR	155389	Symbol	ZEND_DYNAMIC_PROPERTY_OFFSET		154399						
ANR	155390	Symbol	execute_data		154399						
ANR	155391	Symbol	property_name		154399						
ANR	155392	Symbol	zend_hash_find		154399						
ANR	155393	Symbol	ref		154399						
ANR	155394	Symbol	tmp		154399						
ANR	155395	Symbol	property		154399						
ANR	155396	Symbol	IS_STRING		154399						
ANR	155397	Symbol	value_op		154399						
ANR	155398	Symbol	IS_UNDEF		154399						
ANR	155399	Symbol	zend_array_dup		154399						
ANR	155400	Symbol	IS_TMP_VAR		154399						
ANR	155401	Symbol	object_op_type		154399						
ANR	155402	Symbol	cache_slot		154399						
ANR	155403	Symbol	Z_OPT_COPYABLE_P		154399						
ANR	155404	Symbol	IS_CONST		154399						
ANR	155405	Symbol	EG		154399						
ANR	155406	Symbol	Z_OBJ_HT_P ( object ) -> write_property		154399						
ANR	155407	Symbol	NULL		154399						
ANR	155408	Symbol	zobj -> ce -> __set		154399						
ANR	155409	Symbol	* Z_OBJ_HT_P		154399						
ANR	155410	Symbol	retval		154399						
ANR	155411	Symbol	OBJ_PROP		154399						
ANR	155412	Symbol	error_zval		154399						
ANR	155413	Symbol	Z_OBJ_HT_P		154399						
ANR	155414	Symbol	& tmp		154399						
ANR	155415	Symbol	Z_STR_P		154399						
ANR	155416	Symbol	Z_REFCOUNTED_P		154399						
ANR	155417	Symbol	IS_VAR		154399						
ANR	155418	Symbol	& free_value		154399						
ANR	155419	Symbol	Z_ISREF_P		154399						
ANR	155420	Symbol	object		154399						
ANR	155421	Symbol	Z_OBJ_P		154399						
ANR	155422	Symbol	* * zobj		154399						
ANR	155423	Symbol	zend_assign_to_variable		154399						
ANR	155424	Symbol	& EG		154399						
ANR	155425	Symbol	UNEXPECTED		154399						
ANR	155426	Symbol	E_WARNING		154399						
ANR	155427	Symbol	get_zval_ptr_r		154399						
ANR	155428	Symbol	* zobj		154399						
ANR	155429	Symbol	zobj -> properties		154399						
ANR	155430	Symbol	Z_OBJCE_P		154399						
ANR	155431	Symbol	Z_STRLEN_P		154399						
ANR	155432	Symbol	value		154399						
ANR	155433	Symbol	GC_REFCOUNT		154399						
ANR	155434	Symbol	IS_FALSE		154399						
ANR	155435	Symbol	CACHED_PTR_EX		154399						
ANR	155436	Symbol	* zobj -> ce		154399						
ANR	155437	Symbol	property_op_type		154399						
ANR	155438	Symbol	IS_ARRAY_IMMUTABLE		154399						
ANR	155439	Symbol	zobj -> ce		154399						
ANR	155440	Symbol	Z_TYPE_P		154399						
ANR	155441	Symbol	Z_REF_P		154399						
ANR	155442	Symbol	free_value		154399						
ANR	155443	Symbol	obj		154399						
ANR	155444	Symbol	prop_offset		154399						
ANR	155445	Symbol	Z_REFVAL_P		154399						
ANR	155446	Symbol	IS_OBJECT		154399						
ANR	155447	Symbol	EXPECTED		154399						
ANR	155448	Symbol	IS_UNUSED		154399						
ANR	155449	Function	zend_assign_to_object_dim	1236:0:40080:41043							
ANR	155450	FunctionDef	"zend_assign_to_object_dim (zval * retval , zval * object , zval * property_name , int value_type , znode_op value_op , const zend_execute_data * execute_data)"		155449	0					
ANR	155451	CompoundStatement		1237:0:40259:41043	155449	0					
ANR	155452	IdentifierDeclStatement	zend_free_op free_value ;	1238:1:40262:40285	155449	0	True				
ANR	155453	IdentifierDecl	free_value		155449	0					
ANR	155454	IdentifierDeclType	zend_free_op		155449	0					
ANR	155455	Identifier	free_value		155449	1					
ANR	155456	IdentifierDeclStatement	"zval * value = get_zval_ptr_deref ( value_type , value_op , execute_data , & free_value , BP_VAR_R ) ;"	1239:2:40289:40380	155449	1	True				
ANR	155457	IdentifierDecl	"* value = get_zval_ptr_deref ( value_type , value_op , execute_data , & free_value , BP_VAR_R )"		155449	0					
ANR	155458	IdentifierDeclType	zval *		155449	0					
ANR	155459	Identifier	value		155449	1					
ANR	155460	AssignmentExpression	"* value = get_zval_ptr_deref ( value_type , value_op , execute_data , & free_value , BP_VAR_R )"		155449	2		=			
ANR	155461	Identifier	value		155449	0					
ANR	155462	CallExpression	"get_zval_ptr_deref ( value_type , value_op , execute_data , & free_value , BP_VAR_R )"		155449	1					
ANR	155463	Callee	get_zval_ptr_deref		155449	0					
ANR	155464	Identifier	get_zval_ptr_deref		155449	0					
ANR	155465	ArgumentList	value_type		155449	1					
ANR	155466	Argument	value_type		155449	0					
ANR	155467	Identifier	value_type		155449	0					
ANR	155468	Argument	value_op		155449	1					
ANR	155469	Identifier	value_op		155449	0					
ANR	155470	Argument	execute_data		155449	2					
ANR	155471	Identifier	execute_data		155449	0					
ANR	155472	Argument	& free_value		155449	3					
ANR	155473	UnaryOperationExpression	& free_value		155449	0					
ANR	155474	UnaryOperator	&		155449	0					
ANR	155475	Identifier	free_value		155449	1					
ANR	155476	Argument	BP_VAR_R		155449	4					
ANR	155477	Identifier	BP_VAR_R		155449	0					
ANR	155478	IdentifierDeclStatement	zval tmp ;	1240:2:40384:40392	155449	2	True				
ANR	155479	IdentifierDecl	tmp		155449	0					
ANR	155480	IdentifierDeclType	zval		155449	0					
ANR	155481	Identifier	tmp		155449	1					
ANR	155482	IfStatement	if ( ! Z_OBJ_HT_P ( object ) -> write_dimension )		155449	3					
ANR	155483	Condition	! Z_OBJ_HT_P ( object ) -> write_dimension	1243:5:40468:40503	155449	0	True				
ANR	155484	UnaryOperationExpression	! Z_OBJ_HT_P ( object ) -> write_dimension		155449	0					
ANR	155485	UnaryOperator	!		155449	0					
ANR	155486	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_dimension		155449	1					
ANR	155487	CallExpression	Z_OBJ_HT_P ( object )		155449	0					
ANR	155488	Callee	Z_OBJ_HT_P		155449	0					
ANR	155489	Identifier	Z_OBJ_HT_P		155449	0					
ANR	155490	ArgumentList	object		155449	1					
ANR	155491	Argument	object		155449	0					
ANR	155492	Identifier	object		155449	0					
ANR	155493	Identifier	write_dimension		155449	1					
ANR	155494	CompoundStatement		7:43:246:246	155449	1					
ANR	155495	ExpressionStatement	"zend_throw_error ( NULL , ""Cannot use object as array"" )"	1244:2:40510:40562	155449	0	True				
ANR	155496	CallExpression	"zend_throw_error ( NULL , ""Cannot use object as array"" )"		155449	0					
ANR	155497	Callee	zend_throw_error		155449	0					
ANR	155498	Identifier	zend_throw_error		155449	0					
ANR	155499	ArgumentList	NULL		155449	1					
ANR	155500	Argument	NULL		155449	0					
ANR	155501	Identifier	NULL		155449	0					
ANR	155502	Argument	"""Cannot use object as array"""		155449	1					
ANR	155503	PrimaryExpression	"""Cannot use object as array"""		155449	0					
ANR	155504	ExpressionStatement	FREE_OP ( free_value )	1245:2:40566:40585	155449	1	True				
ANR	155505	CallExpression	FREE_OP ( free_value )		155449	0					
ANR	155506	Callee	FREE_OP		155449	0					
ANR	155507	Identifier	FREE_OP		155449	0					
ANR	155508	ArgumentList	free_value		155449	1					
ANR	155509	Argument	free_value		155449	0					
ANR	155510	Identifier	free_value		155449	0					
ANR	155511	ReturnStatement	return ;	1246:2:40589:40595	155449	2	True				
ANR	155512	IfStatement	if ( value_type == IS_CONST )		155449	4					
ANR	155513	Condition	value_type == IS_CONST	1250:5:40645:40666	155449	0	True				
ANR	155514	EqualityExpression	value_type == IS_CONST		155449	0		==			
ANR	155515	Identifier	value_type		155449	0					
ANR	155516	Identifier	IS_CONST		155449	1					
ANR	155517	CompoundStatement		14:29:409:409	155449	1					
ANR	155518	IfStatement	if ( UNEXPECTED ( Z_OPT_COPYABLE_P ( value ) ) )		155449	0					
ANR	155519	Condition	UNEXPECTED ( Z_OPT_COPYABLE_P ( value ) )	1251:6:40677:40711	155449	0	True				
ANR	155520	CallExpression	UNEXPECTED ( Z_OPT_COPYABLE_P ( value ) )		155449	0					
ANR	155521	Callee	UNEXPECTED		155449	0					
ANR	155522	Identifier	UNEXPECTED		155449	0					
ANR	155523	ArgumentList	Z_OPT_COPYABLE_P ( value )		155449	1					
ANR	155524	Argument	Z_OPT_COPYABLE_P ( value )		155449	0					
ANR	155525	CallExpression	Z_OPT_COPYABLE_P ( value )		155449	0					
ANR	155526	Callee	Z_OPT_COPYABLE_P		155449	0					
ANR	155527	Identifier	Z_OPT_COPYABLE_P		155449	0					
ANR	155528	ArgumentList	value		155449	1					
ANR	155529	Argument	value		155449	0					
ANR	155530	Identifier	value		155449	0					
ANR	155531	CompoundStatement		15:43:454:454	155449	1					
ANR	155532	ExpressionStatement	"ZVAL_COPY_VALUE ( & tmp , value )"	1252:3:40719:40747	155449	0	True				
ANR	155533	CallExpression	"ZVAL_COPY_VALUE ( & tmp , value )"		155449	0					
ANR	155534	Callee	ZVAL_COPY_VALUE		155449	0					
ANR	155535	Identifier	ZVAL_COPY_VALUE		155449	0					
ANR	155536	ArgumentList	& tmp		155449	1					
ANR	155537	Argument	& tmp		155449	0					
ANR	155538	UnaryOperationExpression	& tmp		155449	0					
ANR	155539	UnaryOperator	&		155449	0					
ANR	155540	Identifier	tmp		155449	1					
ANR	155541	Argument	value		155449	1					
ANR	155542	Identifier	value		155449	0					
ANR	155543	ExpressionStatement	zval_copy_ctor_func ( & tmp )	1253:3:40752:40777	155449	1	True				
ANR	155544	CallExpression	zval_copy_ctor_func ( & tmp )		155449	0					
ANR	155545	Callee	zval_copy_ctor_func		155449	0					
ANR	155546	Identifier	zval_copy_ctor_func		155449	0					
ANR	155547	ArgumentList	& tmp		155449	1					
ANR	155548	Argument	& tmp		155449	0					
ANR	155549	UnaryOperationExpression	& tmp		155449	0					
ANR	155550	UnaryOperator	&		155449	0					
ANR	155551	Identifier	tmp		155449	1					
ANR	155552	ExpressionStatement	value = & tmp	1254:3:40782:40794	155449	2	True				
ANR	155553	AssignmentExpression	value = & tmp		155449	0		=			
ANR	155554	Identifier	value		155449	0					
ANR	155555	UnaryOperationExpression	& tmp		155449	1					
ANR	155556	UnaryOperator	&		155449	0					
ANR	155557	Identifier	tmp		155449	1					
ANR	155558	ExpressionStatement	"Z_OBJ_HT_P ( object ) -> write_dimension ( object , property_name , value )"	1258:1:40805:40870	155449	5	True				
ANR	155559	CallExpression	"Z_OBJ_HT_P ( object ) -> write_dimension ( object , property_name , value )"		155449	0					
ANR	155560	Callee	Z_OBJ_HT_P ( object ) -> write_dimension		155449	0					
ANR	155561	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_dimension		155449	0					
ANR	155562	CallExpression	Z_OBJ_HT_P ( object )		155449	0					
ANR	155563	Callee	Z_OBJ_HT_P		155449	0					
ANR	155564	Identifier	Z_OBJ_HT_P		155449	0					
ANR	155565	ArgumentList	object		155449	1					
ANR	155566	Argument	object		155449	0					
ANR	155567	Identifier	object		155449	0					
ANR	155568	Identifier	write_dimension		155449	1					
ANR	155569	ArgumentList	object		155449	1					
ANR	155570	Argument	object		155449	0					
ANR	155571	Identifier	object		155449	0					
ANR	155572	Argument	property_name		155449	1					
ANR	155573	Identifier	property_name		155449	0					
ANR	155574	Argument	value		155449	2					
ANR	155575	Identifier	value		155449	0					
ANR	155576	IfStatement	if ( retval && EXPECTED ( ! EG ( exception ) ) )		155449	6					
ANR	155577	Condition	retval && EXPECTED ( ! EG ( exception ) )	1260:5:40878:40911	155449	0	True				
ANR	155578	AndExpression	retval && EXPECTED ( ! EG ( exception ) )		155449	0		&&			
ANR	155579	Identifier	retval		155449	0					
ANR	155580	CallExpression	EXPECTED ( ! EG ( exception ) )		155449	1					
ANR	155581	Callee	EXPECTED		155449	0					
ANR	155582	Identifier	EXPECTED		155449	0					
ANR	155583	ArgumentList	! EG ( exception )		155449	1					
ANR	155584	Argument	! EG ( exception )		155449	0					
ANR	155585	UnaryOperationExpression	! EG ( exception )		155449	0					
ANR	155586	UnaryOperator	!		155449	0					
ANR	155587	CallExpression	EG ( exception )		155449	1					
ANR	155588	Callee	EG		155449	0					
ANR	155589	Identifier	EG		155449	0					
ANR	155590	ArgumentList	exception		155449	1					
ANR	155591	Argument	exception		155449	0					
ANR	155592	Identifier	exception		155449	0					
ANR	155593	CompoundStatement		24:41:654:654	155449	1					
ANR	155594	ExpressionStatement	"ZVAL_COPY ( retval , value )"	1261:2:40918:40942	155449	0	True				
ANR	155595	CallExpression	"ZVAL_COPY ( retval , value )"		155449	0					
ANR	155596	Callee	ZVAL_COPY		155449	0					
ANR	155597	Identifier	ZVAL_COPY		155449	0					
ANR	155598	ArgumentList	retval		155449	1					
ANR	155599	Argument	retval		155449	0					
ANR	155600	Identifier	retval		155449	0					
ANR	155601	Argument	value		155449	1					
ANR	155602	Identifier	value		155449	0					
ANR	155603	IfStatement	if ( value_type == IS_CONST )		155449	7					
ANR	155604	Condition	value_type == IS_CONST	1263:5:40952:40973	155449	0	True				
ANR	155605	EqualityExpression	value_type == IS_CONST		155449	0		==			
ANR	155606	Identifier	value_type		155449	0					
ANR	155607	Identifier	IS_CONST		155449	1					
ANR	155608	CompoundStatement		27:29:716:716	155449	1					
ANR	155609	ExpressionStatement	zval_ptr_dtor_nogc ( value )	1264:2:40980:41005	155449	0	True				
ANR	155610	CallExpression	zval_ptr_dtor_nogc ( value )		155449	0					
ANR	155611	Callee	zval_ptr_dtor_nogc		155449	0					
ANR	155612	Identifier	zval_ptr_dtor_nogc		155449	0					
ANR	155613	ArgumentList	value		155449	1					
ANR	155614	Argument	value		155449	0					
ANR	155615	Identifier	value		155449	0					
ANR	155616	ElseStatement	else		155449	0					
ANR	155617	CompoundStatement		29:8:755:755	155449	0					
ANR	155618	ExpressionStatement	FREE_OP ( free_value )	1266:2:41019:41038	155449	0	True				
ANR	155619	CallExpression	FREE_OP ( free_value )		155449	0					
ANR	155620	Callee	FREE_OP		155449	0					
ANR	155621	Identifier	FREE_OP		155449	0					
ANR	155622	ArgumentList	free_value		155449	1					
ANR	155623	Argument	free_value		155449	0					
ANR	155624	Identifier	free_value		155449	0					
ANR	155625	ReturnType	static zend_never_inline void		155449	1					
ANR	155626	Identifier	zend_assign_to_object_dim		155449	2					
ANR	155627	ParameterList	"zval * retval , zval * object , zval * property_name , int value_type , znode_op value_op , const zend_execute_data * execute_data"		155449	3					
ANR	155628	Parameter	zval * retval	1236:56:40136:40147	155449	0	True				
ANR	155629	ParameterType	zval *		155449	0					
ANR	155630	Identifier	retval		155449	1					
ANR	155631	Parameter	zval * object	1236:70:40150:40161	155449	1	True				
ANR	155632	ParameterType	zval *		155449	0					
ANR	155633	Identifier	object		155449	1					
ANR	155634	Parameter	zval * property_name	1236:84:40164:40182	155449	2	True				
ANR	155635	ParameterType	zval *		155449	0					
ANR	155636	Identifier	property_name		155449	1					
ANR	155637	Parameter	int value_type	1236:105:40185:40198	155449	3	True				
ANR	155638	ParameterType	int		155449	0					
ANR	155639	Identifier	value_type		155449	1					
ANR	155640	Parameter	znode_op value_op	1236:121:40201:40217	155449	4	True				
ANR	155641	ParameterType	znode_op		155449	0					
ANR	155642	Identifier	value_op		155449	1					
ANR	155643	Parameter	const zend_execute_data * execute_data	1236:140:40220:40256	155449	5	True				
ANR	155644	ParameterType	const zend_execute_data *		155449	0					
ANR	155645	Identifier	execute_data		155449	1					
ANR	155646	CFGEntryNode	ENTRY		155449		True				
ANR	155647	CFGExitNode	EXIT		155449		True				
ANR	155648	Symbol	exception		155449						
ANR	155649	Symbol	Z_OPT_COPYABLE_P		155449						
ANR	155650	Symbol	value_type		155449						
ANR	155651	Symbol	IS_CONST		155449						
ANR	155652	Symbol	EG		155449						
ANR	155653	Symbol	NULL		155449						
ANR	155654	Symbol	* Z_OBJ_HT_P		155449						
ANR	155655	Symbol	retval		155449						
ANR	155656	Symbol	execute_data		155449						
ANR	155657	Symbol	property_name		155449						
ANR	155658	Symbol	free_value		155449						
ANR	155659	Symbol	UNEXPECTED		155449						
ANR	155660	Symbol	tmp		155449						
ANR	155661	Symbol	Z_OBJ_HT_P		155449						
ANR	155662	Symbol	get_zval_ptr_deref		155449						
ANR	155663	Symbol	Z_OBJ_HT_P ( object ) -> write_dimension		155449						
ANR	155664	Symbol	& tmp		155449						
ANR	155665	Symbol	value_op		155449						
ANR	155666	Symbol	value		155449						
ANR	155667	Symbol	EXPECTED		155449						
ANR	155668	Symbol	& free_value		155449						
ANR	155669	Symbol	BP_VAR_R		155449						
ANR	155670	Symbol	object		155449						
ANR	155671	Function	zend_binary_assign_op_obj_dim	1270:0:41046:41909							
ANR	155672	FunctionDef	"zend_binary_assign_op_obj_dim (zval * object , zval * property , zval * value , zval * retval , binary_op_type binary_op)"		155671	0					
ANR	155673	CompoundStatement		1271:0:41189:41909	155671	0					
ANR	155674	IdentifierDeclStatement	zval * z ;	1272:1:41192:41199	155671	0	True				
ANR	155675	IdentifierDecl	* z		155671	0					
ANR	155676	IdentifierDeclType	zval *		155671	0					
ANR	155677	Identifier	z		155671	1					
ANR	155678	IdentifierDeclStatement	"zval rv , res ;"	1273:1:41202:41214	155671	1	True				
ANR	155679	IdentifierDecl	rv		155671	0					
ANR	155680	IdentifierDeclType	zval		155671	0					
ANR	155681	Identifier	rv		155671	1					
ANR	155682	IdentifierDecl	res		155671	1					
ANR	155683	IdentifierDeclType	zval		155671	0					
ANR	155684	Identifier	res		155671	1					
ANR	155685	IfStatement	"if ( Z_OBJ_HT_P ( object ) -> read_dimension && ( z = Z_OBJ_HT_P ( object ) -> read_dimension ( object , property , BP_VAR_R , & rv ) ) != NULL )"		155671	2					
ANR	155686	Condition	"Z_OBJ_HT_P ( object ) -> read_dimension && ( z = Z_OBJ_HT_P ( object ) -> read_dimension ( object , property , BP_VAR_R , & rv ) ) != NULL"	1275:5:41222:41342	155671	0	True				
ANR	155687	AndExpression	"Z_OBJ_HT_P ( object ) -> read_dimension && ( z = Z_OBJ_HT_P ( object ) -> read_dimension ( object , property , BP_VAR_R , & rv ) ) != NULL"		155671	0		&&			
ANR	155688	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> read_dimension		155671	0					
ANR	155689	CallExpression	Z_OBJ_HT_P ( object )		155671	0					
ANR	155690	Callee	Z_OBJ_HT_P		155671	0					
ANR	155691	Identifier	Z_OBJ_HT_P		155671	0					
ANR	155692	ArgumentList	object		155671	1					
ANR	155693	Argument	object		155671	0					
ANR	155694	Identifier	object		155671	0					
ANR	155695	Identifier	read_dimension		155671	1					
ANR	155696	EqualityExpression	"( z = Z_OBJ_HT_P ( object ) -> read_dimension ( object , property , BP_VAR_R , & rv ) ) != NULL"		155671	1		!=			
ANR	155697	AssignmentExpression	"z = Z_OBJ_HT_P ( object ) -> read_dimension ( object , property , BP_VAR_R , & rv )"		155671	0		=			
ANR	155698	Identifier	z		155671	0					
ANR	155699	CallExpression	"Z_OBJ_HT_P ( object ) -> read_dimension ( object , property , BP_VAR_R , & rv )"		155671	1					
ANR	155700	Callee	Z_OBJ_HT_P ( object ) -> read_dimension		155671	0					
ANR	155701	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> read_dimension		155671	0					
ANR	155702	CallExpression	Z_OBJ_HT_P ( object )		155671	0					
ANR	155703	Callee	Z_OBJ_HT_P		155671	0					
ANR	155704	Identifier	Z_OBJ_HT_P		155671	0					
ANR	155705	ArgumentList	object		155671	1					
ANR	155706	Argument	object		155671	0					
ANR	155707	Identifier	object		155671	0					
ANR	155708	Identifier	read_dimension		155671	1					
ANR	155709	ArgumentList	object		155671	1					
ANR	155710	Argument	object		155671	0					
ANR	155711	Identifier	object		155671	0					
ANR	155712	Argument	property		155671	1					
ANR	155713	Identifier	property		155671	0					
ANR	155714	Argument	BP_VAR_R		155671	2					
ANR	155715	Identifier	BP_VAR_R		155671	0					
ANR	155716	Argument	& rv		155671	3					
ANR	155717	UnaryOperationExpression	& rv		155671	0					
ANR	155718	UnaryOperator	&		155671	0					
ANR	155719	Identifier	rv		155671	1					
ANR	155720	Identifier	NULL		155671	1					
ANR	155721	CompoundStatement		6:85:155:155	155671	1					
ANR	155722	IfStatement	if ( Z_TYPE_P ( z ) == IS_OBJECT && Z_OBJ_HT_P ( z ) -> get )		155671	0					
ANR	155723	Condition	Z_TYPE_P ( z ) == IS_OBJECT && Z_OBJ_HT_P ( z ) -> get	1278:6:41354:41399	155671	0	True				
ANR	155724	AndExpression	Z_TYPE_P ( z ) == IS_OBJECT && Z_OBJ_HT_P ( z ) -> get		155671	0		&&			
ANR	155725	EqualityExpression	Z_TYPE_P ( z ) == IS_OBJECT		155671	0		==			
ANR	155726	CallExpression	Z_TYPE_P ( z )		155671	0					
ANR	155727	Callee	Z_TYPE_P		155671	0					
ANR	155728	Identifier	Z_TYPE_P		155671	0					
ANR	155729	ArgumentList	z		155671	1					
ANR	155730	Argument	z		155671	0					
ANR	155731	Identifier	z		155671	0					
ANR	155732	Identifier	IS_OBJECT		155671	1					
ANR	155733	PtrMemberAccess	Z_OBJ_HT_P ( z ) -> get		155671	1					
ANR	155734	CallExpression	Z_OBJ_HT_P ( z )		155671	0					
ANR	155735	Callee	Z_OBJ_HT_P		155671	0					
ANR	155736	Identifier	Z_OBJ_HT_P		155671	0					
ANR	155737	ArgumentList	z		155671	1					
ANR	155738	Argument	z		155671	0					
ANR	155739	Identifier	z		155671	0					
ANR	155740	Identifier	get		155671	1					
ANR	155741	CompoundStatement		10:3:230:271	155671	1					
ANR	155742	IdentifierDeclStatement	zval rv2 ;	1279:3:41407:41415	155671	0	True				
ANR	155743	IdentifierDecl	rv2		155671	0					
ANR	155744	IdentifierDeclType	zval		155671	0					
ANR	155745	Identifier	rv2		155671	1					
ANR	155746	IdentifierDeclStatement	"zval * value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 ) ;"	1280:3:41420:41461	155671	1	True				
ANR	155747	IdentifierDecl	"* value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		155671	0					
ANR	155748	IdentifierDeclType	zval *		155671	0					
ANR	155749	Identifier	value		155671	1					
ANR	155750	AssignmentExpression	"* value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		155671	2		=			
ANR	155751	Identifier	value		155671	0					
ANR	155752	CallExpression	"Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		155671	1					
ANR	155753	Callee	Z_OBJ_HT_P ( z ) -> get		155671	0					
ANR	155754	PtrMemberAccess	Z_OBJ_HT_P ( z ) -> get		155671	0					
ANR	155755	CallExpression	Z_OBJ_HT_P ( z )		155671	0					
ANR	155756	Callee	Z_OBJ_HT_P		155671	0					
ANR	155757	Identifier	Z_OBJ_HT_P		155671	0					
ANR	155758	ArgumentList	z		155671	1					
ANR	155759	Argument	z		155671	0					
ANR	155760	Identifier	z		155671	0					
ANR	155761	Identifier	get		155671	1					
ANR	155762	ArgumentList	z		155671	1					
ANR	155763	Argument	z		155671	0					
ANR	155764	Identifier	z		155671	0					
ANR	155765	Argument	& rv2		155671	1					
ANR	155766	UnaryOperationExpression	& rv2		155671	0					
ANR	155767	UnaryOperator	&		155671	0					
ANR	155768	Identifier	rv2		155671	1					
ANR	155769	IfStatement	if ( z == & rv )		155671	2					
ANR	155770	Condition	z == & rv	1282:7:41471:41478	155671	0	True				
ANR	155771	EqualityExpression	z == & rv		155671	0		==			
ANR	155772	Identifier	z		155671	0					
ANR	155773	UnaryOperationExpression	& rv		155671	1					
ANR	155774	UnaryOperator	&		155671	0					
ANR	155775	Identifier	rv		155671	1					
ANR	155776	CompoundStatement		12:17:291:291	155671	1					
ANR	155777	ExpressionStatement	zval_ptr_dtor ( & rv )	1283:4:41487:41505	155671	0	True				
ANR	155778	CallExpression	zval_ptr_dtor ( & rv )		155671	0					
ANR	155779	Callee	zval_ptr_dtor		155671	0					
ANR	155780	Identifier	zval_ptr_dtor		155671	0					
ANR	155781	ArgumentList	& rv		155671	1					
ANR	155782	Argument	& rv		155671	0					
ANR	155783	UnaryOperationExpression	& rv		155671	0					
ANR	155784	UnaryOperator	&		155671	0					
ANR	155785	Identifier	rv		155671	1					
ANR	155786	ExpressionStatement	"ZVAL_COPY_VALUE ( z , value )"	1285:3:41515:41540	155671	3	True				
ANR	155787	CallExpression	"ZVAL_COPY_VALUE ( z , value )"		155671	0					
ANR	155788	Callee	ZVAL_COPY_VALUE		155671	0					
ANR	155789	Identifier	ZVAL_COPY_VALUE		155671	0					
ANR	155790	ArgumentList	z		155671	1					
ANR	155791	Argument	z		155671	0					
ANR	155792	Identifier	z		155671	0					
ANR	155793	Argument	value		155671	1					
ANR	155794	Identifier	value		155671	0					
ANR	155795	ExpressionStatement	"binary_op ( & res , Z_ISREF_P ( z ) ? Z_REFVAL_P ( z ) : z , value )"	1287:2:41548:41604	155671	1	True				
ANR	155796	CallExpression	"binary_op ( & res , Z_ISREF_P ( z ) ? Z_REFVAL_P ( z ) : z , value )"		155671	0					
ANR	155797	Callee	binary_op		155671	0					
ANR	155798	Identifier	binary_op		155671	0					
ANR	155799	ArgumentList	& res		155671	1					
ANR	155800	Argument	& res		155671	0					
ANR	155801	UnaryOperationExpression	& res		155671	0					
ANR	155802	UnaryOperator	&		155671	0					
ANR	155803	Identifier	res		155671	1					
ANR	155804	Argument	Z_ISREF_P ( z ) ? Z_REFVAL_P ( z ) : z		155671	1					
ANR	155805	ConditionalExpression	Z_ISREF_P ( z ) ? Z_REFVAL_P ( z ) : z		155671	0					
ANR	155806	Condition	Z_ISREF_P ( z )		155671	0					
ANR	155807	CallExpression	Z_ISREF_P ( z )		155671	0					
ANR	155808	Callee	Z_ISREF_P		155671	0					
ANR	155809	Identifier	Z_ISREF_P		155671	0					
ANR	155810	ArgumentList	z		155671	1					
ANR	155811	Argument	z		155671	0					
ANR	155812	Identifier	z		155671	0					
ANR	155813	CallExpression	Z_REFVAL_P ( z )		155671	1					
ANR	155814	Callee	Z_REFVAL_P		155671	0					
ANR	155815	Identifier	Z_REFVAL_P		155671	0					
ANR	155816	ArgumentList	z		155671	1					
ANR	155817	Argument	z		155671	0					
ANR	155818	Identifier	z		155671	0					
ANR	155819	Identifier	z		155671	2					
ANR	155820	Argument	value		155671	2					
ANR	155821	Identifier	value		155671	0					
ANR	155822	ExpressionStatement	"Z_OBJ_HT_P ( object ) -> write_dimension ( object , property , & res )"	1288:2:41608:41667	155671	2	True				
ANR	155823	CallExpression	"Z_OBJ_HT_P ( object ) -> write_dimension ( object , property , & res )"		155671	0					
ANR	155824	Callee	Z_OBJ_HT_P ( object ) -> write_dimension		155671	0					
ANR	155825	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_dimension		155671	0					
ANR	155826	CallExpression	Z_OBJ_HT_P ( object )		155671	0					
ANR	155827	Callee	Z_OBJ_HT_P		155671	0					
ANR	155828	Identifier	Z_OBJ_HT_P		155671	0					
ANR	155829	ArgumentList	object		155671	1					
ANR	155830	Argument	object		155671	0					
ANR	155831	Identifier	object		155671	0					
ANR	155832	Identifier	write_dimension		155671	1					
ANR	155833	ArgumentList	object		155671	1					
ANR	155834	Argument	object		155671	0					
ANR	155835	Identifier	object		155671	0					
ANR	155836	Argument	property		155671	1					
ANR	155837	Identifier	property		155671	0					
ANR	155838	Argument	& res		155671	2					
ANR	155839	UnaryOperationExpression	& res		155671	0					
ANR	155840	UnaryOperator	&		155671	0					
ANR	155841	Identifier	res		155671	1					
ANR	155842	IfStatement	if ( z == & rv )		155671	3					
ANR	155843	Condition	z == & rv	1289:6:41675:41682	155671	0	True				
ANR	155844	EqualityExpression	z == & rv		155671	0		==			
ANR	155845	Identifier	z		155671	0					
ANR	155846	UnaryOperationExpression	& rv		155671	1					
ANR	155847	UnaryOperator	&		155671	0					
ANR	155848	Identifier	rv		155671	1					
ANR	155849	CompoundStatement		19:16:495:495	155671	1					
ANR	155850	ExpressionStatement	zval_ptr_dtor ( & rv )	1290:3:41690:41708	155671	0	True				
ANR	155851	CallExpression	zval_ptr_dtor ( & rv )		155671	0					
ANR	155852	Callee	zval_ptr_dtor		155671	0					
ANR	155853	Identifier	zval_ptr_dtor		155671	0					
ANR	155854	ArgumentList	& rv		155671	1					
ANR	155855	Argument	& rv		155671	0					
ANR	155856	UnaryOperationExpression	& rv		155671	0					
ANR	155857	UnaryOperator	&		155671	0					
ANR	155858	Identifier	rv		155671	1					
ANR	155859	IfStatement	if ( retval )		155671	4					
ANR	155860	Condition	retval	1292:6:41720:41725	155671	0	True				
ANR	155861	Identifier	retval		155671	0					
ANR	155862	CompoundStatement		22:14:538:538	155671	1					
ANR	155863	ExpressionStatement	"ZVAL_COPY ( retval , & res )"	1293:3:41733:41756	155671	0	True				
ANR	155864	CallExpression	"ZVAL_COPY ( retval , & res )"		155671	0					
ANR	155865	Callee	ZVAL_COPY		155671	0					
ANR	155866	Identifier	ZVAL_COPY		155671	0					
ANR	155867	ArgumentList	retval		155671	1					
ANR	155868	Argument	retval		155671	0					
ANR	155869	Identifier	retval		155671	0					
ANR	155870	Argument	& res		155671	1					
ANR	155871	UnaryOperationExpression	& res		155671	0					
ANR	155872	UnaryOperator	&		155671	0					
ANR	155873	Identifier	res		155671	1					
ANR	155874	ExpressionStatement	zval_ptr_dtor ( & res )	1295:2:41764:41783	155671	5	True				
ANR	155875	CallExpression	zval_ptr_dtor ( & res )		155671	0					
ANR	155876	Callee	zval_ptr_dtor		155671	0					
ANR	155877	Identifier	zval_ptr_dtor		155671	0					
ANR	155878	ArgumentList	& res		155671	1					
ANR	155879	Argument	& res		155671	0					
ANR	155880	UnaryOperationExpression	& res		155671	0					
ANR	155881	UnaryOperator	&		155671	0					
ANR	155882	Identifier	res		155671	1					
ANR	155883	ElseStatement	else		155671	0					
ANR	155884	CompoundStatement		26:8:603:603	155671	0					
ANR	155885	ExpressionStatement	"zend_error ( E_WARNING , ""Attempt to assign property of non-object"" )"	1297:2:41797:41862	155671	0	True				
ANR	155886	CallExpression	"zend_error ( E_WARNING , ""Attempt to assign property of non-object"" )"		155671	0					
ANR	155887	Callee	zend_error		155671	0					
ANR	155888	Identifier	zend_error		155671	0					
ANR	155889	ArgumentList	E_WARNING		155671	1					
ANR	155890	Argument	E_WARNING		155671	0					
ANR	155891	Identifier	E_WARNING		155671	0					
ANR	155892	Argument	"""Attempt to assign property of non-object"""		155671	1					
ANR	155893	PrimaryExpression	"""Attempt to assign property of non-object"""		155671	0					
ANR	155894	IfStatement	if ( retval )		155671	1					
ANR	155895	Condition	retval	1298:6:41870:41875	155671	0	True				
ANR	155896	Identifier	retval		155671	0					
ANR	155897	CompoundStatement		28:14:688:688	155671	1					
ANR	155898	ExpressionStatement	ZVAL_NULL ( retval )	1299:3:41883:41900	155671	0	True				
ANR	155899	CallExpression	ZVAL_NULL ( retval )		155671	0					
ANR	155900	Callee	ZVAL_NULL		155671	0					
ANR	155901	Identifier	ZVAL_NULL		155671	0					
ANR	155902	ArgumentList	retval		155671	1					
ANR	155903	Argument	retval		155671	0					
ANR	155904	Identifier	retval		155671	0					
ANR	155905	ReturnType	static zend_never_inline void		155671	1					
ANR	155906	Identifier	zend_binary_assign_op_obj_dim		155671	2					
ANR	155907	ParameterList	"zval * object , zval * property , zval * value , zval * retval , binary_op_type binary_op"		155671	3					
ANR	155908	Parameter	zval * object	1270:60:41106:41117	155671	0	True				
ANR	155909	ParameterType	zval *		155671	0					
ANR	155910	Identifier	object		155671	1					
ANR	155911	Parameter	zval * property	1270:74:41120:41133	155671	1	True				
ANR	155912	ParameterType	zval *		155671	0					
ANR	155913	Identifier	property		155671	1					
ANR	155914	Parameter	zval * value	1270:90:41136:41146	155671	2	True				
ANR	155915	ParameterType	zval *		155671	0					
ANR	155916	Identifier	value		155671	1					
ANR	155917	Parameter	zval * retval	1270:103:41149:41160	155671	3	True				
ANR	155918	ParameterType	zval *		155671	0					
ANR	155919	Identifier	retval		155671	1					
ANR	155920	Parameter	binary_op_type binary_op	1270:117:41163:41186	155671	4	True				
ANR	155921	ParameterType	binary_op_type		155671	0					
ANR	155922	Identifier	binary_op		155671	1					
ANR	155923	CFGEntryNode	ENTRY		155671		True				
ANR	155924	CFGExitNode	EXIT		155671		True				
ANR	155925	Symbol	res		155671						
ANR	155926	Symbol	& res		155671						
ANR	155927	Symbol	NULL		155671						
ANR	155928	Symbol	rv		155671						
ANR	155929	Symbol	Z_TYPE_P		155671						
ANR	155930	Symbol	* Z_OBJ_HT_P		155671						
ANR	155931	Symbol	retval		155671						
ANR	155932	Symbol	& rv		155671						
ANR	155933	Symbol	rv2		155671						
ANR	155934	Symbol	E_WARNING		155671						
ANR	155935	Symbol	Z_OBJ_HT_P ( object ) -> read_dimension		155671						
ANR	155936	Symbol	Z_OBJ_HT_P ( z ) -> get		155671						
ANR	155937	Symbol	& rv2		155671						
ANR	155938	Symbol	Z_REFVAL_P		155671						
ANR	155939	Symbol	property		155671						
ANR	155940	Symbol	Z_OBJ_HT_P		155671						
ANR	155941	Symbol	z		155671						
ANR	155942	Symbol	IS_OBJECT		155671						
ANR	155943	Symbol	value		155671						
ANR	155944	Symbol	BP_VAR_R		155671						
ANR	155945	Symbol	Z_ISREF_P		155671						
ANR	155946	Symbol	object		155671						
ANR	155947	Symbol	binary_op		155671						
ANR	155948	Function	zend_assign_to_string_offset	1304:0:41912:43289							
ANR	155949	FunctionDef	"zend_assign_to_string_offset (zval * str , zend_long offset , zval * value , zval * result)"		155948	0					
ANR	155950	CompoundStatement		1305:0:42009:43289	155948	0					
ANR	155951	IdentifierDeclStatement	zend_string * old_str ;	1306:1:42012:42032	155948	0	True				
ANR	155952	IdentifierDecl	* old_str		155948	0					
ANR	155953	IdentifierDeclType	zend_string *		155948	0					
ANR	155954	Identifier	old_str		155948	1					
ANR	155955	IfStatement	if ( offset < 0 )		155948	1					
ANR	155956	Condition	offset < 0	1308:5:42040:42049	155948	0	True				
ANR	155957	RelationalExpression	offset < 0		155948	0		<			
ANR	155958	Identifier	offset		155948	0					
ANR	155959	PrimaryExpression	0		155948	1					
ANR	155960	CompoundStatement		4:17:42:42	155948	1					
ANR	155961	Statement	zend_error	1309:2:42056:42065	155948	0	True				
ANR	155962	Statement	(	1309:12:42066:42066	155948	1	True				
ANR	155963	Statement	E_WARNING	1309:13:42067:42075	155948	2	True				
ANR	155964	Statement	","	1309:22:42076:42076	155948	3	True				
ANR	155965	Statement	"""Illegal string offset:  """	1309:24:42078:42103	155948	4	True				
ANR	155966	Statement	ZEND_LONG_FMT	1309:51:42105:42117	155948	5	True				
ANR	155967	Statement	","	1309:64:42118:42118	155948	6	True				
ANR	155968	Statement	offset	1309:66:42120:42125	155948	7	True				
ANR	155969	Statement	)	1309:72:42126:42126	155948	8	True				
ANR	155970	ExpressionStatement		1309:73:42127:42127	155948	9	True				
ANR	155971	ExpressionStatement	zend_string_release ( Z_STR_P ( str ) )	1310:2:42131:42164	155948	10	True				
ANR	155972	CallExpression	zend_string_release ( Z_STR_P ( str ) )		155948	0					
ANR	155973	Callee	zend_string_release		155948	0					
ANR	155974	Identifier	zend_string_release		155948	0					
ANR	155975	ArgumentList	Z_STR_P ( str )		155948	1					
ANR	155976	Argument	Z_STR_P ( str )		155948	0					
ANR	155977	CallExpression	Z_STR_P ( str )		155948	0					
ANR	155978	Callee	Z_STR_P		155948	0					
ANR	155979	Identifier	Z_STR_P		155948	0					
ANR	155980	ArgumentList	str		155948	1					
ANR	155981	Argument	str		155948	0					
ANR	155982	Identifier	str		155948	0					
ANR	155983	IfStatement	if ( result )		155948	11					
ANR	155984	Condition	result	1311:6:42172:42177	155948	0	True				
ANR	155985	Identifier	result		155948	0					
ANR	155986	CompoundStatement		7:14:170:170	155948	1					
ANR	155987	ExpressionStatement	ZVAL_NULL ( result )	1312:3:42185:42202	155948	0	True				
ANR	155988	CallExpression	ZVAL_NULL ( result )		155948	0					
ANR	155989	Callee	ZVAL_NULL		155948	0					
ANR	155990	Identifier	ZVAL_NULL		155948	0					
ANR	155991	ArgumentList	result		155948	1					
ANR	155992	Argument	result		155948	0					
ANR	155993	Identifier	result		155948	0					
ANR	155994	ReturnStatement	return ;	1314:2:42210:42216	155948	12	True				
ANR	155995	ExpressionStatement	old_str = Z_STR_P ( str )	1317:1:42223:42245	155948	2	True				
ANR	155996	AssignmentExpression	old_str = Z_STR_P ( str )		155948	0		=			
ANR	155997	Identifier	old_str		155948	0					
ANR	155998	CallExpression	Z_STR_P ( str )		155948	1					
ANR	155999	Callee	Z_STR_P		155948	0					
ANR	156000	Identifier	Z_STR_P		155948	0					
ANR	156001	ArgumentList	str		155948	1					
ANR	156002	Argument	str		155948	0					
ANR	156003	Identifier	str		155948	0					
ANR	156004	IfStatement	if ( ( size_t ) offset >= Z_STRLEN_P ( str ) )		155948	3					
ANR	156005	Condition	( size_t ) offset >= Z_STRLEN_P ( str )	1318:5:42252:42284	155948	0	True				
ANR	156006	RelationalExpression	( size_t ) offset >= Z_STRLEN_P ( str )		155948	0		>=			
ANR	156007	CastExpression	( size_t ) offset		155948	0					
ANR	156008	CastTarget	size_t		155948	0					
ANR	156009	Identifier	offset		155948	1					
ANR	156010	CallExpression	Z_STRLEN_P ( str )		155948	1					
ANR	156011	Callee	Z_STRLEN_P		155948	0					
ANR	156012	Identifier	Z_STRLEN_P		155948	0					
ANR	156013	ArgumentList	str		155948	1					
ANR	156014	Argument	str		155948	0					
ANR	156015	Identifier	str		155948	0					
ANR	156016	CompoundStatement		15:2:281:316	155948	1					
ANR	156017	IdentifierDeclStatement	zend_long old_len = Z_STRLEN_P ( str ) ;	1319:2:42291:42326	155948	0	True				
ANR	156018	IdentifierDecl	old_len = Z_STRLEN_P ( str )		155948	0					
ANR	156019	IdentifierDeclType	zend_long		155948	0					
ANR	156020	Identifier	old_len		155948	1					
ANR	156021	AssignmentExpression	old_len = Z_STRLEN_P ( str )		155948	2		=			
ANR	156022	Identifier	old_len		155948	0					
ANR	156023	CallExpression	Z_STRLEN_P ( str )		155948	1					
ANR	156024	Callee	Z_STRLEN_P		155948	0					
ANR	156025	Identifier	Z_STRLEN_P		155948	0					
ANR	156026	ArgumentList	str		155948	1					
ANR	156027	Argument	str		155948	0					
ANR	156028	Identifier	str		155948	0					
ANR	156029	ExpressionStatement	"Z_STR_P ( str ) = zend_string_extend ( Z_STR_P ( str ) , offset + 1 , 0 )"	1320:2:42330:42392	155948	1	True				
ANR	156030	AssignmentExpression	"Z_STR_P ( str ) = zend_string_extend ( Z_STR_P ( str ) , offset + 1 , 0 )"		155948	0		=			
ANR	156031	CallExpression	Z_STR_P ( str )		155948	0					
ANR	156032	Callee	Z_STR_P		155948	0					
ANR	156033	Identifier	Z_STR_P		155948	0					
ANR	156034	ArgumentList	str		155948	1					
ANR	156035	Argument	str		155948	0					
ANR	156036	Identifier	str		155948	0					
ANR	156037	CallExpression	"zend_string_extend ( Z_STR_P ( str ) , offset + 1 , 0 )"		155948	1					
ANR	156038	Callee	zend_string_extend		155948	0					
ANR	156039	Identifier	zend_string_extend		155948	0					
ANR	156040	ArgumentList	Z_STR_P ( str )		155948	1					
ANR	156041	Argument	Z_STR_P ( str )		155948	0					
ANR	156042	CallExpression	Z_STR_P ( str )		155948	0					
ANR	156043	Callee	Z_STR_P		155948	0					
ANR	156044	Identifier	Z_STR_P		155948	0					
ANR	156045	ArgumentList	str		155948	1					
ANR	156046	Argument	str		155948	0					
ANR	156047	Identifier	str		155948	0					
ANR	156048	Argument	offset + 1		155948	1					
ANR	156049	AdditiveExpression	offset + 1		155948	0		+			
ANR	156050	Identifier	offset		155948	0					
ANR	156051	PrimaryExpression	1		155948	1					
ANR	156052	Argument	0		155948	2					
ANR	156053	PrimaryExpression	0		155948	0					
ANR	156054	ExpressionStatement	Z_TYPE_INFO_P ( str ) = IS_STRING_EX	1321:2:42396:42429	155948	2	True				
ANR	156055	AssignmentExpression	Z_TYPE_INFO_P ( str ) = IS_STRING_EX		155948	0		=			
ANR	156056	CallExpression	Z_TYPE_INFO_P ( str )		155948	0					
ANR	156057	Callee	Z_TYPE_INFO_P		155948	0					
ANR	156058	Identifier	Z_TYPE_INFO_P		155948	0					
ANR	156059	ArgumentList	str		155948	1					
ANR	156060	Argument	str		155948	0					
ANR	156061	Identifier	str		155948	0					
ANR	156062	Identifier	IS_STRING_EX		155948	1					
ANR	156063	ExpressionStatement	"memset ( Z_STRVAL_P ( str ) + old_len , ' ' , offset - old_len )"	1322:2:42433:42489	155948	3	True				
ANR	156064	CallExpression	"memset ( Z_STRVAL_P ( str ) + old_len , ' ' , offset - old_len )"		155948	0					
ANR	156065	Callee	memset		155948	0					
ANR	156066	Identifier	memset		155948	0					
ANR	156067	ArgumentList	Z_STRVAL_P ( str ) + old_len		155948	1					
ANR	156068	Argument	Z_STRVAL_P ( str ) + old_len		155948	0					
ANR	156069	AdditiveExpression	Z_STRVAL_P ( str ) + old_len		155948	0		+			
ANR	156070	CallExpression	Z_STRVAL_P ( str )		155948	0					
ANR	156071	Callee	Z_STRVAL_P		155948	0					
ANR	156072	Identifier	Z_STRVAL_P		155948	0					
ANR	156073	ArgumentList	str		155948	1					
ANR	156074	Argument	str		155948	0					
ANR	156075	Identifier	str		155948	0					
ANR	156076	Identifier	old_len		155948	1					
ANR	156077	Argument	' '		155948	1					
ANR	156078	PrimaryExpression	' '		155948	0					
ANR	156079	Argument	offset - old_len		155948	2					
ANR	156080	AdditiveExpression	offset - old_len		155948	0		-			
ANR	156081	Identifier	offset		155948	0					
ANR	156082	Identifier	old_len		155948	1					
ANR	156083	ExpressionStatement	Z_STRVAL_P ( str ) [ offset + 1 ] = 0	1323:2:42493:42522	155948	4	True				
ANR	156084	AssignmentExpression	Z_STRVAL_P ( str ) [ offset + 1 ] = 0		155948	0		=			
ANR	156085	ArrayIndexing	Z_STRVAL_P ( str ) [ offset + 1 ]		155948	0					
ANR	156086	CallExpression	Z_STRVAL_P ( str )		155948	0					
ANR	156087	Callee	Z_STRVAL_P		155948	0					
ANR	156088	Identifier	Z_STRVAL_P		155948	0					
ANR	156089	ArgumentList	str		155948	1					
ANR	156090	Argument	str		155948	0					
ANR	156091	Identifier	str		155948	0					
ANR	156092	AdditiveExpression	offset + 1		155948	1		+			
ANR	156093	Identifier	offset		155948	0					
ANR	156094	PrimaryExpression	1		155948	1					
ANR	156095	PrimaryExpression	0		155948	1					
ANR	156096	ElseStatement	else		155948	0					
ANR	156097	IfStatement	if ( ! Z_REFCOUNTED_P ( str ) )		155948	0					
ANR	156098	Condition	! Z_REFCOUNTED_P ( str )	1324:12:42536:42555	155948	0	True				
ANR	156099	UnaryOperationExpression	! Z_REFCOUNTED_P ( str )		155948	0					
ANR	156100	UnaryOperator	!		155948	0					
ANR	156101	CallExpression	Z_REFCOUNTED_P ( str )		155948	1					
ANR	156102	Callee	Z_REFCOUNTED_P		155948	0					
ANR	156103	Identifier	Z_REFCOUNTED_P		155948	0					
ANR	156104	ArgumentList	str		155948	1					
ANR	156105	Argument	str		155948	0					
ANR	156106	Identifier	str		155948	0					
ANR	156107	CompoundStatement		20:34:548:548	155948	1					
ANR	156108	ExpressionStatement	"Z_STR_P ( str ) = zend_string_init ( Z_STRVAL_P ( str ) , Z_STRLEN_P ( str ) , 0 )"	1325:2:42562:42630	155948	0	True				
ANR	156109	AssignmentExpression	"Z_STR_P ( str ) = zend_string_init ( Z_STRVAL_P ( str ) , Z_STRLEN_P ( str ) , 0 )"		155948	0		=			
ANR	156110	CallExpression	Z_STR_P ( str )		155948	0					
ANR	156111	Callee	Z_STR_P		155948	0					
ANR	156112	Identifier	Z_STR_P		155948	0					
ANR	156113	ArgumentList	str		155948	1					
ANR	156114	Argument	str		155948	0					
ANR	156115	Identifier	str		155948	0					
ANR	156116	CallExpression	"zend_string_init ( Z_STRVAL_P ( str ) , Z_STRLEN_P ( str ) , 0 )"		155948	1					
ANR	156117	Callee	zend_string_init		155948	0					
ANR	156118	Identifier	zend_string_init		155948	0					
ANR	156119	ArgumentList	Z_STRVAL_P ( str )		155948	1					
ANR	156120	Argument	Z_STRVAL_P ( str )		155948	0					
ANR	156121	CallExpression	Z_STRVAL_P ( str )		155948	0					
ANR	156122	Callee	Z_STRVAL_P		155948	0					
ANR	156123	Identifier	Z_STRVAL_P		155948	0					
ANR	156124	ArgumentList	str		155948	1					
ANR	156125	Argument	str		155948	0					
ANR	156126	Identifier	str		155948	0					
ANR	156127	Argument	Z_STRLEN_P ( str )		155948	1					
ANR	156128	CallExpression	Z_STRLEN_P ( str )		155948	0					
ANR	156129	Callee	Z_STRLEN_P		155948	0					
ANR	156130	Identifier	Z_STRLEN_P		155948	0					
ANR	156131	ArgumentList	str		155948	1					
ANR	156132	Argument	str		155948	0					
ANR	156133	Identifier	str		155948	0					
ANR	156134	Argument	0		155948	2					
ANR	156135	PrimaryExpression	0		155948	0					
ANR	156136	ExpressionStatement	Z_TYPE_INFO_P ( str ) = IS_STRING_EX	1326:2:42634:42667	155948	1	True				
ANR	156137	AssignmentExpression	Z_TYPE_INFO_P ( str ) = IS_STRING_EX		155948	0		=			
ANR	156138	CallExpression	Z_TYPE_INFO_P ( str )		155948	0					
ANR	156139	Callee	Z_TYPE_INFO_P		155948	0					
ANR	156140	Identifier	Z_TYPE_INFO_P		155948	0					
ANR	156141	ArgumentList	str		155948	1					
ANR	156142	Argument	str		155948	0					
ANR	156143	Identifier	str		155948	0					
ANR	156144	Identifier	IS_STRING_EX		155948	1					
ANR	156145	IfStatement	if ( Z_TYPE_P ( value ) != IS_STRING )		155948	4					
ANR	156146	Condition	Z_TYPE_P ( value ) != IS_STRING	1329:5:42678:42705	155948	0	True				
ANR	156147	EqualityExpression	Z_TYPE_P ( value ) != IS_STRING		155948	0		!=			
ANR	156148	CallExpression	Z_TYPE_P ( value )		155948	0					
ANR	156149	Callee	Z_TYPE_P		155948	0					
ANR	156150	Identifier	Z_TYPE_P		155948	0					
ANR	156151	ArgumentList	value		155948	1					
ANR	156152	Argument	value		155948	0					
ANR	156153	Identifier	value		155948	0					
ANR	156154	Identifier	IS_STRING		155948	1					
ANR	156155	CompoundStatement		26:2:702:743	155948	1					
ANR	156156	IdentifierDeclStatement	zend_string * tmp = zval_get_string ( value ) ;	1330:2:42712:42753	155948	0	True				
ANR	156157	IdentifierDecl	* tmp = zval_get_string ( value )		155948	0					
ANR	156158	IdentifierDeclType	zend_string *		155948	0					
ANR	156159	Identifier	tmp		155948	1					
ANR	156160	AssignmentExpression	* tmp = zval_get_string ( value )		155948	2		=			
ANR	156161	Identifier	tmp		155948	0					
ANR	156162	CallExpression	zval_get_string ( value )		155948	1					
ANR	156163	Callee	zval_get_string		155948	0					
ANR	156164	Identifier	zval_get_string		155948	0					
ANR	156165	ArgumentList	value		155948	1					
ANR	156166	Argument	value		155948	0					
ANR	156167	Identifier	value		155948	0					
ANR	156168	ExpressionStatement	Z_STRVAL_P ( str ) [ offset ] = ZSTR_VAL ( tmp ) [ 0 ]	1332:2:42758:42800	155948	1	True				
ANR	156169	AssignmentExpression	Z_STRVAL_P ( str ) [ offset ] = ZSTR_VAL ( tmp ) [ 0 ]		155948	0		=			
ANR	156170	ArrayIndexing	Z_STRVAL_P ( str ) [ offset ]		155948	0					
ANR	156171	CallExpression	Z_STRVAL_P ( str )		155948	0					
ANR	156172	Callee	Z_STRVAL_P		155948	0					
ANR	156173	Identifier	Z_STRVAL_P		155948	0					
ANR	156174	ArgumentList	str		155948	1					
ANR	156175	Argument	str		155948	0					
ANR	156176	Identifier	str		155948	0					
ANR	156177	Identifier	offset		155948	1					
ANR	156178	ArrayIndexing	ZSTR_VAL ( tmp ) [ 0 ]		155948	1					
ANR	156179	CallExpression	ZSTR_VAL ( tmp )		155948	0					
ANR	156180	Callee	ZSTR_VAL		155948	0					
ANR	156181	Identifier	ZSTR_VAL		155948	0					
ANR	156182	ArgumentList	tmp		155948	1					
ANR	156183	Argument	tmp		155948	0					
ANR	156184	Identifier	tmp		155948	0					
ANR	156185	PrimaryExpression	0		155948	1					
ANR	156186	ExpressionStatement	zend_string_release ( tmp )	1333:2:42804:42828	155948	2	True				
ANR	156187	CallExpression	zend_string_release ( tmp )		155948	0					
ANR	156188	Callee	zend_string_release		155948	0					
ANR	156189	Identifier	zend_string_release		155948	0					
ANR	156190	ArgumentList	tmp		155948	1					
ANR	156191	Argument	tmp		155948	0					
ANR	156192	Identifier	tmp		155948	0					
ANR	156193	ElseStatement	else		155948	0					
ANR	156194	CompoundStatement		30:8:828:828	155948	0					
ANR	156195	ExpressionStatement	Z_STRVAL_P ( str ) [ offset ] = Z_STRVAL_P ( value ) [ 0 ]	1335:2:42842:42888	155948	0	True				
ANR	156196	AssignmentExpression	Z_STRVAL_P ( str ) [ offset ] = Z_STRVAL_P ( value ) [ 0 ]		155948	0		=			
ANR	156197	ArrayIndexing	Z_STRVAL_P ( str ) [ offset ]		155948	0					
ANR	156198	CallExpression	Z_STRVAL_P ( str )		155948	0					
ANR	156199	Callee	Z_STRVAL_P		155948	0					
ANR	156200	Identifier	Z_STRVAL_P		155948	0					
ANR	156201	ArgumentList	str		155948	1					
ANR	156202	Argument	str		155948	0					
ANR	156203	Identifier	str		155948	0					
ANR	156204	Identifier	offset		155948	1					
ANR	156205	ArrayIndexing	Z_STRVAL_P ( value ) [ 0 ]		155948	1					
ANR	156206	CallExpression	Z_STRVAL_P ( value )		155948	0					
ANR	156207	Callee	Z_STRVAL_P		155948	0					
ANR	156208	Identifier	Z_STRVAL_P		155948	0					
ANR	156209	ArgumentList	value		155948	1					
ANR	156210	Argument	value		155948	0					
ANR	156211	Identifier	value		155948	0					
ANR	156212	PrimaryExpression	0		155948	1					
ANR	156213	ExpressionStatement	zend_string_release ( old_str )	1342:1:43010:43038	155948	5	True				
ANR	156214	CallExpression	zend_string_release ( old_str )		155948	0					
ANR	156215	Callee	zend_string_release		155948	0					
ANR	156216	Identifier	zend_string_release		155948	0					
ANR	156217	ArgumentList	old_str		155948	1					
ANR	156218	Argument	old_str		155948	0					
ANR	156219	Identifier	old_str		155948	0					
ANR	156220	IfStatement	if ( result )		155948	6					
ANR	156221	Condition	result	1343:5:43045:43050	155948	0	True				
ANR	156222	Identifier	result		155948	0					
ANR	156223	CompoundStatement		40:2:1047:1097	155948	1					
ANR	156224	IdentifierDeclStatement	zend_uchar c = ( zend_uchar ) Z_STRVAL_P ( str ) [ offset ] ;	1344:2:43057:43107	155948	0	True				
ANR	156225	IdentifierDecl	c = ( zend_uchar ) Z_STRVAL_P ( str ) [ offset ]		155948	0					
ANR	156226	IdentifierDeclType	zend_uchar		155948	0					
ANR	156227	Identifier	c		155948	1					
ANR	156228	AssignmentExpression	c = ( zend_uchar ) Z_STRVAL_P ( str ) [ offset ]		155948	2		=			
ANR	156229	Identifier	c		155948	0					
ANR	156230	CastExpression	( zend_uchar ) Z_STRVAL_P ( str ) [ offset ]		155948	1					
ANR	156231	CastTarget	zend_uchar		155948	0					
ANR	156232	ArrayIndexing	Z_STRVAL_P ( str ) [ offset ]		155948	1					
ANR	156233	CallExpression	Z_STRVAL_P ( str )		155948	0					
ANR	156234	Callee	Z_STRVAL_P		155948	0					
ANR	156235	Identifier	Z_STRVAL_P		155948	0					
ANR	156236	ArgumentList	str		155948	1					
ANR	156237	Argument	str		155948	0					
ANR	156238	Identifier	str		155948	0					
ANR	156239	Identifier	offset		155948	1					
ANR	156240	IfStatement	if ( CG ( one_char_string ) [ c ] )		155948	1					
ANR	156241	Condition	CG ( one_char_string ) [ c ]	1346:6:43116:43137	155948	0	True				
ANR	156242	ArrayIndexing	CG ( one_char_string ) [ c ]		155948	0					
ANR	156243	CallExpression	CG ( one_char_string )		155948	0					
ANR	156244	Callee	CG		155948	0					
ANR	156245	Identifier	CG		155948	0					
ANR	156246	ArgumentList	one_char_string		155948	1					
ANR	156247	Argument	one_char_string		155948	0					
ANR	156248	Identifier	one_char_string		155948	0					
ANR	156249	Identifier	c		155948	1					
ANR	156250	CompoundStatement		42:30:1130:1130	155948	1					
ANR	156251	ExpressionStatement	"ZVAL_INTERNED_STR ( result , CG ( one_char_string ) [ c ] )"	1347:3:43145:43194	155948	0	True				
ANR	156252	CallExpression	"ZVAL_INTERNED_STR ( result , CG ( one_char_string ) [ c ] )"		155948	0					
ANR	156253	Callee	ZVAL_INTERNED_STR		155948	0					
ANR	156254	Identifier	ZVAL_INTERNED_STR		155948	0					
ANR	156255	ArgumentList	result		155948	1					
ANR	156256	Argument	result		155948	0					
ANR	156257	Identifier	result		155948	0					
ANR	156258	Argument	CG ( one_char_string ) [ c ]		155948	1					
ANR	156259	ArrayIndexing	CG ( one_char_string ) [ c ]		155948	0					
ANR	156260	CallExpression	CG ( one_char_string )		155948	0					
ANR	156261	Callee	CG		155948	0					
ANR	156262	Identifier	CG		155948	0					
ANR	156263	ArgumentList	one_char_string		155948	1					
ANR	156264	Argument	one_char_string		155948	0					
ANR	156265	Identifier	one_char_string		155948	0					
ANR	156266	Identifier	c		155948	1					
ANR	156267	ElseStatement	else		155948	0					
ANR	156268	CompoundStatement		44:9:1195:1195	155948	0					
ANR	156269	ExpressionStatement	"ZVAL_NEW_STR ( result , zend_string_init ( Z_STRVAL_P ( str ) + offset , 1 , 0 ) )"	1349:3:43210:43280	155948	0	True				
ANR	156270	CallExpression	"ZVAL_NEW_STR ( result , zend_string_init ( Z_STRVAL_P ( str ) + offset , 1 , 0 ) )"		155948	0					
ANR	156271	Callee	ZVAL_NEW_STR		155948	0					
ANR	156272	Identifier	ZVAL_NEW_STR		155948	0					
ANR	156273	ArgumentList	result		155948	1					
ANR	156274	Argument	result		155948	0					
ANR	156275	Identifier	result		155948	0					
ANR	156276	Argument	"zend_string_init ( Z_STRVAL_P ( str ) + offset , 1 , 0 )"		155948	1					
ANR	156277	CallExpression	"zend_string_init ( Z_STRVAL_P ( str ) + offset , 1 , 0 )"		155948	0					
ANR	156278	Callee	zend_string_init		155948	0					
ANR	156279	Identifier	zend_string_init		155948	0					
ANR	156280	ArgumentList	Z_STRVAL_P ( str ) + offset		155948	1					
ANR	156281	Argument	Z_STRVAL_P ( str ) + offset		155948	0					
ANR	156282	AdditiveExpression	Z_STRVAL_P ( str ) + offset		155948	0		+			
ANR	156283	CallExpression	Z_STRVAL_P ( str )		155948	0					
ANR	156284	Callee	Z_STRVAL_P		155948	0					
ANR	156285	Identifier	Z_STRVAL_P		155948	0					
ANR	156286	ArgumentList	str		155948	1					
ANR	156287	Argument	str		155948	0					
ANR	156288	Identifier	str		155948	0					
ANR	156289	Identifier	offset		155948	1					
ANR	156290	Argument	1		155948	1					
ANR	156291	PrimaryExpression	1		155948	0					
ANR	156292	Argument	0		155948	2					
ANR	156293	PrimaryExpression	0		155948	0					
ANR	156294	ReturnType	static void		155948	1					
ANR	156295	Identifier	zend_assign_to_string_offset		155948	2					
ANR	156296	ParameterList	"zval * str , zend_long offset , zval * value , zval * result"		155948	3					
ANR	156297	Parameter	zval * str	1304:41:41953:41961	155948	0	True				
ANR	156298	ParameterType	zval *		155948	0					
ANR	156299	Identifier	str		155948	1					
ANR	156300	Parameter	zend_long offset	1304:52:41964:41979	155948	1	True				
ANR	156301	ParameterType	zend_long		155948	0					
ANR	156302	Identifier	offset		155948	1					
ANR	156303	Parameter	zval * value	1304:70:41982:41992	155948	2	True				
ANR	156304	ParameterType	zval *		155948	0					
ANR	156305	Identifier	value		155948	1					
ANR	156306	Parameter	zval * result	1304:83:41995:42006	155948	3	True				
ANR	156307	ParameterType	zval *		155948	0					
ANR	156308	Identifier	result		155948	1					
ANR	156309	CFGEntryNode	ENTRY		155948		True				
ANR	156310	CFGExitNode	EXIT		155948		True				
ANR	156311	Symbol	zend_string_extend		155948						
ANR	156312	Symbol	* CG		155948						
ANR	156313	Symbol	one_char_string		155948						
ANR	156314	Symbol	result		155948						
ANR	156315	Symbol	zend_string_init		155948						
ANR	156316	Symbol	IS_STRING_EX		155948						
ANR	156317	Symbol	old_str		155948						
ANR	156318	Symbol	tmp		155948						
ANR	156319	Symbol	Z_STRLEN_P		155948						
ANR	156320	Symbol	* Z_STRVAL_P		155948						
ANR	156321	Symbol	IS_STRING		155948						
ANR	156322	Symbol	value		155948						
ANR	156323	Symbol	* ZSTR_VAL		155948						
ANR	156324	Symbol	c		155948						
ANR	156325	Symbol	offset		155948						
ANR	156326	Symbol	CG		155948						
ANR	156327	Symbol	zval_get_string		155948						
ANR	156328	Symbol	Z_TYPE_P		155948						
ANR	156329	Symbol	Z_STRVAL_P		155948						
ANR	156330	Symbol	* c		155948						
ANR	156331	Symbol	Z_TYPE_INFO_P		155948						
ANR	156332	Symbol	ZSTR_VAL		155948						
ANR	156333	Symbol	str		155948						
ANR	156334	Symbol	old_len		155948						
ANR	156335	Symbol	* offset		155948						
ANR	156336	Symbol	Z_STR_P		155948						
ANR	156337	Symbol	Z_REFCOUNTED_P		155948						
ANR	156338	Function	zend_post_incdec_overloaded_property	1354:0:43292:44482							
ANR	156339	FunctionDef	"zend_post_incdec_overloaded_property (zval * object , zval * property , void * * cache_slot , int inc , zval * result)"		156338	0					
ANR	156340	CompoundStatement		1355:0:43431:44482	156338	0					
ANR	156341	IfStatement	if ( Z_OBJ_HT_P ( object ) -> read_property && Z_OBJ_HT_P ( object ) -> write_property )		156338	0					
ANR	156342	Condition	Z_OBJ_HT_P ( object ) -> read_property && Z_OBJ_HT_P ( object ) -> write_property	1356:5:43438:43508	156338	0	True				
ANR	156343	AndExpression	Z_OBJ_HT_P ( object ) -> read_property && Z_OBJ_HT_P ( object ) -> write_property		156338	0		&&			
ANR	156344	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> read_property		156338	0					
ANR	156345	CallExpression	Z_OBJ_HT_P ( object )		156338	0					
ANR	156346	Callee	Z_OBJ_HT_P		156338	0					
ANR	156347	Identifier	Z_OBJ_HT_P		156338	0					
ANR	156348	ArgumentList	object		156338	1					
ANR	156349	Argument	object		156338	0					
ANR	156350	Identifier	object		156338	0					
ANR	156351	Identifier	read_property		156338	1					
ANR	156352	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_property		156338	1					
ANR	156353	CallExpression	Z_OBJ_HT_P ( object )		156338	0					
ANR	156354	Callee	Z_OBJ_HT_P		156338	0					
ANR	156355	Identifier	Z_OBJ_HT_P		156338	0					
ANR	156356	ArgumentList	object		156338	1					
ANR	156357	Argument	object		156338	0					
ANR	156358	Identifier	object		156338	0					
ANR	156359	Identifier	write_property		156338	1					
ANR	156360	CompoundStatement		5:2:110:121	156338	1					
ANR	156361	IdentifierDeclStatement	"zval rv , obj ;"	1357:2:43515:43527	156338	0	True				
ANR	156362	IdentifierDecl	rv		156338	0					
ANR	156363	IdentifierDeclType	zval		156338	0					
ANR	156364	Identifier	rv		156338	1					
ANR	156365	IdentifierDecl	obj		156338	1					
ANR	156366	IdentifierDeclType	zval		156338	0					
ANR	156367	Identifier	obj		156338	1					
ANR	156368	IdentifierDeclStatement	zval * z ;	1358:2:43531:43538	156338	1	True				
ANR	156369	IdentifierDecl	* z		156338	0					
ANR	156370	IdentifierDeclType	zval *		156338	0					
ANR	156371	Identifier	z		156338	1					
ANR	156372	IdentifierDeclStatement	zval z_copy ;	1359:2:43542:43553	156338	2	True				
ANR	156373	IdentifierDecl	z_copy		156338	0					
ANR	156374	IdentifierDeclType	zval		156338	0					
ANR	156375	Identifier	z_copy		156338	1					
ANR	156376	ExpressionStatement	"ZVAL_OBJ ( & obj , Z_OBJ_P ( object ) )"	1361:2:43558:43589	156338	3	True				
ANR	156377	CallExpression	"ZVAL_OBJ ( & obj , Z_OBJ_P ( object ) )"		156338	0					
ANR	156378	Callee	ZVAL_OBJ		156338	0					
ANR	156379	Identifier	ZVAL_OBJ		156338	0					
ANR	156380	ArgumentList	& obj		156338	1					
ANR	156381	Argument	& obj		156338	0					
ANR	156382	UnaryOperationExpression	& obj		156338	0					
ANR	156383	UnaryOperator	&		156338	0					
ANR	156384	Identifier	obj		156338	1					
ANR	156385	Argument	Z_OBJ_P ( object )		156338	1					
ANR	156386	CallExpression	Z_OBJ_P ( object )		156338	0					
ANR	156387	Callee	Z_OBJ_P		156338	0					
ANR	156388	Identifier	Z_OBJ_P		156338	0					
ANR	156389	ArgumentList	object		156338	1					
ANR	156390	Argument	object		156338	0					
ANR	156391	Identifier	object		156338	0					
ANR	156392	ExpressionStatement	Z_ADDREF ( obj )	1362:2:43593:43606	156338	4	True				
ANR	156393	CallExpression	Z_ADDREF ( obj )		156338	0					
ANR	156394	Callee	Z_ADDREF		156338	0					
ANR	156395	Identifier	Z_ADDREF		156338	0					
ANR	156396	ArgumentList	obj		156338	1					
ANR	156397	Argument	obj		156338	0					
ANR	156398	Identifier	obj		156338	0					
ANR	156399	ExpressionStatement	"z = Z_OBJ_HT ( obj ) -> read_property ( & obj , property , BP_VAR_R , cache_slot , & rv )"	1363:2:43610:43685	156338	5	True				
ANR	156400	AssignmentExpression	"z = Z_OBJ_HT ( obj ) -> read_property ( & obj , property , BP_VAR_R , cache_slot , & rv )"		156338	0		=			
ANR	156401	Identifier	z		156338	0					
ANR	156402	CallExpression	"Z_OBJ_HT ( obj ) -> read_property ( & obj , property , BP_VAR_R , cache_slot , & rv )"		156338	1					
ANR	156403	Callee	Z_OBJ_HT ( obj ) -> read_property		156338	0					
ANR	156404	PtrMemberAccess	Z_OBJ_HT ( obj ) -> read_property		156338	0					
ANR	156405	CallExpression	Z_OBJ_HT ( obj )		156338	0					
ANR	156406	Callee	Z_OBJ_HT		156338	0					
ANR	156407	Identifier	Z_OBJ_HT		156338	0					
ANR	156408	ArgumentList	obj		156338	1					
ANR	156409	Argument	obj		156338	0					
ANR	156410	Identifier	obj		156338	0					
ANR	156411	Identifier	read_property		156338	1					
ANR	156412	ArgumentList	& obj		156338	1					
ANR	156413	Argument	& obj		156338	0					
ANR	156414	UnaryOperationExpression	& obj		156338	0					
ANR	156415	UnaryOperator	&		156338	0					
ANR	156416	Identifier	obj		156338	1					
ANR	156417	Argument	property		156338	1					
ANR	156418	Identifier	property		156338	0					
ANR	156419	Argument	BP_VAR_R		156338	2					
ANR	156420	Identifier	BP_VAR_R		156338	0					
ANR	156421	Argument	cache_slot		156338	3					
ANR	156422	Identifier	cache_slot		156338	0					
ANR	156423	Argument	& rv		156338	4					
ANR	156424	UnaryOperationExpression	& rv		156338	0					
ANR	156425	UnaryOperator	&		156338	0					
ANR	156426	Identifier	rv		156338	1					
ANR	156427	IfStatement	if ( UNEXPECTED ( EG ( exception ) ) )		156338	6					
ANR	156428	Condition	UNEXPECTED ( EG ( exception ) )	1364:6:43693:43717	156338	0	True				
ANR	156429	CallExpression	UNEXPECTED ( EG ( exception ) )		156338	0					
ANR	156430	Callee	UNEXPECTED		156338	0					
ANR	156431	Identifier	UNEXPECTED		156338	0					
ANR	156432	ArgumentList	EG ( exception )		156338	1					
ANR	156433	Argument	EG ( exception )		156338	0					
ANR	156434	CallExpression	EG ( exception )		156338	0					
ANR	156435	Callee	EG		156338	0					
ANR	156436	Identifier	EG		156338	0					
ANR	156437	ArgumentList	exception		156338	1					
ANR	156438	Argument	exception		156338	0					
ANR	156439	Identifier	exception		156338	0					
ANR	156440	CompoundStatement		10:33:288:288	156338	1					
ANR	156441	ExpressionStatement	OBJ_RELEASE ( Z_OBJ ( obj ) )	1365:3:43725:43748	156338	0	True				
ANR	156442	CallExpression	OBJ_RELEASE ( Z_OBJ ( obj ) )		156338	0					
ANR	156443	Callee	OBJ_RELEASE		156338	0					
ANR	156444	Identifier	OBJ_RELEASE		156338	0					
ANR	156445	ArgumentList	Z_OBJ ( obj )		156338	1					
ANR	156446	Argument	Z_OBJ ( obj )		156338	0					
ANR	156447	CallExpression	Z_OBJ ( obj )		156338	0					
ANR	156448	Callee	Z_OBJ		156338	0					
ANR	156449	Identifier	Z_OBJ		156338	0					
ANR	156450	ArgumentList	obj		156338	1					
ANR	156451	Argument	obj		156338	0					
ANR	156452	Identifier	obj		156338	0					
ANR	156453	ReturnStatement	return ;	1366:3:43753:43759	156338	1	True				
ANR	156454	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( z ) == IS_OBJECT ) && Z_OBJ_HT_P ( z ) -> get )		156338	7					
ANR	156455	Condition	UNEXPECTED ( Z_TYPE_P ( z ) == IS_OBJECT ) && Z_OBJ_HT_P ( z ) -> get	1369:6:43772:43829	156338	0	True				
ANR	156456	AndExpression	UNEXPECTED ( Z_TYPE_P ( z ) == IS_OBJECT ) && Z_OBJ_HT_P ( z ) -> get		156338	0		&&			
ANR	156457	CallExpression	UNEXPECTED ( Z_TYPE_P ( z ) == IS_OBJECT )		156338	0					
ANR	156458	Callee	UNEXPECTED		156338	0					
ANR	156459	Identifier	UNEXPECTED		156338	0					
ANR	156460	ArgumentList	Z_TYPE_P ( z ) == IS_OBJECT		156338	1					
ANR	156461	Argument	Z_TYPE_P ( z ) == IS_OBJECT		156338	0					
ANR	156462	EqualityExpression	Z_TYPE_P ( z ) == IS_OBJECT		156338	0		==			
ANR	156463	CallExpression	Z_TYPE_P ( z )		156338	0					
ANR	156464	Callee	Z_TYPE_P		156338	0					
ANR	156465	Identifier	Z_TYPE_P		156338	0					
ANR	156466	ArgumentList	z		156338	1					
ANR	156467	Argument	z		156338	0					
ANR	156468	Identifier	z		156338	0					
ANR	156469	Identifier	IS_OBJECT		156338	1					
ANR	156470	PtrMemberAccess	Z_OBJ_HT_P ( z ) -> get		156338	1					
ANR	156471	CallExpression	Z_OBJ_HT_P ( z )		156338	0					
ANR	156472	Callee	Z_OBJ_HT_P		156338	0					
ANR	156473	Identifier	Z_OBJ_HT_P		156338	0					
ANR	156474	ArgumentList	z		156338	1					
ANR	156475	Argument	z		156338	0					
ANR	156476	Identifier	z		156338	0					
ANR	156477	Identifier	get		156338	1					
ANR	156478	CompoundStatement		17:3:418:459	156338	1					
ANR	156479	IdentifierDeclStatement	zval rv2 ;	1370:3:43837:43845	156338	0	True				
ANR	156480	IdentifierDecl	rv2		156338	0					
ANR	156481	IdentifierDeclType	zval		156338	0					
ANR	156482	Identifier	rv2		156338	1					
ANR	156483	IdentifierDeclStatement	"zval * value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 ) ;"	1371:3:43850:43891	156338	1	True				
ANR	156484	IdentifierDecl	"* value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		156338	0					
ANR	156485	IdentifierDeclType	zval *		156338	0					
ANR	156486	Identifier	value		156338	1					
ANR	156487	AssignmentExpression	"* value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		156338	2		=			
ANR	156488	Identifier	value		156338	0					
ANR	156489	CallExpression	"Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		156338	1					
ANR	156490	Callee	Z_OBJ_HT_P ( z ) -> get		156338	0					
ANR	156491	PtrMemberAccess	Z_OBJ_HT_P ( z ) -> get		156338	0					
ANR	156492	CallExpression	Z_OBJ_HT_P ( z )		156338	0					
ANR	156493	Callee	Z_OBJ_HT_P		156338	0					
ANR	156494	Identifier	Z_OBJ_HT_P		156338	0					
ANR	156495	ArgumentList	z		156338	1					
ANR	156496	Argument	z		156338	0					
ANR	156497	Identifier	z		156338	0					
ANR	156498	Identifier	get		156338	1					
ANR	156499	ArgumentList	z		156338	1					
ANR	156500	Argument	z		156338	0					
ANR	156501	Identifier	z		156338	0					
ANR	156502	Argument	& rv2		156338	1					
ANR	156503	UnaryOperationExpression	& rv2		156338	0					
ANR	156504	UnaryOperator	&		156338	0					
ANR	156505	Identifier	rv2		156338	1					
ANR	156506	IfStatement	if ( z == & rv )		156338	2					
ANR	156507	Condition	z == & rv	1372:7:43900:43907	156338	0	True				
ANR	156508	EqualityExpression	z == & rv		156338	0		==			
ANR	156509	Identifier	z		156338	0					
ANR	156510	UnaryOperationExpression	& rv		156338	1					
ANR	156511	UnaryOperator	&		156338	0					
ANR	156512	Identifier	rv		156338	1					
ANR	156513	CompoundStatement		18:17:478:478	156338	1					
ANR	156514	ExpressionStatement	zval_ptr_dtor ( & rv )	1373:4:43916:43934	156338	0	True				
ANR	156515	CallExpression	zval_ptr_dtor ( & rv )		156338	0					
ANR	156516	Callee	zval_ptr_dtor		156338	0					
ANR	156517	Identifier	zval_ptr_dtor		156338	0					
ANR	156518	ArgumentList	& rv		156338	1					
ANR	156519	Argument	& rv		156338	0					
ANR	156520	UnaryOperationExpression	& rv		156338	0					
ANR	156521	UnaryOperator	&		156338	0					
ANR	156522	Identifier	rv		156338	1					
ANR	156523	ExpressionStatement	"ZVAL_COPY_VALUE ( z , value )"	1375:3:43944:43969	156338	3	True				
ANR	156524	CallExpression	"ZVAL_COPY_VALUE ( z , value )"		156338	0					
ANR	156525	Callee	ZVAL_COPY_VALUE		156338	0					
ANR	156526	Identifier	ZVAL_COPY_VALUE		156338	0					
ANR	156527	ArgumentList	z		156338	1					
ANR	156528	Argument	z		156338	0					
ANR	156529	Identifier	z		156338	0					
ANR	156530	Argument	value		156338	1					
ANR	156531	Identifier	value		156338	0					
ANR	156532	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( z ) == IS_REFERENCE ) )		156338	8					
ANR	156533	Condition	UNEXPECTED ( Z_TYPE_P ( z ) == IS_REFERENCE )	1378:6:43982:44020	156338	0	True				
ANR	156534	CallExpression	UNEXPECTED ( Z_TYPE_P ( z ) == IS_REFERENCE )		156338	0					
ANR	156535	Callee	UNEXPECTED		156338	0					
ANR	156536	Identifier	UNEXPECTED		156338	0					
ANR	156537	ArgumentList	Z_TYPE_P ( z ) == IS_REFERENCE		156338	1					
ANR	156538	Argument	Z_TYPE_P ( z ) == IS_REFERENCE		156338	0					
ANR	156539	EqualityExpression	Z_TYPE_P ( z ) == IS_REFERENCE		156338	0		==			
ANR	156540	CallExpression	Z_TYPE_P ( z )		156338	0					
ANR	156541	Callee	Z_TYPE_P		156338	0					
ANR	156542	Identifier	Z_TYPE_P		156338	0					
ANR	156543	ArgumentList	z		156338	1					
ANR	156544	Argument	z		156338	0					
ANR	156545	Identifier	z		156338	0					
ANR	156546	Identifier	IS_REFERENCE		156338	1					
ANR	156547	CompoundStatement		24:47:591:591	156338	1					
ANR	156548	ExpressionStatement	"ZVAL_COPY ( result , Z_REFVAL_P ( z ) )"	1379:3:44028:44060	156338	0	True				
ANR	156549	CallExpression	"ZVAL_COPY ( result , Z_REFVAL_P ( z ) )"		156338	0					
ANR	156550	Callee	ZVAL_COPY		156338	0					
ANR	156551	Identifier	ZVAL_COPY		156338	0					
ANR	156552	ArgumentList	result		156338	1					
ANR	156553	Argument	result		156338	0					
ANR	156554	Identifier	result		156338	0					
ANR	156555	Argument	Z_REFVAL_P ( z )		156338	1					
ANR	156556	CallExpression	Z_REFVAL_P ( z )		156338	0					
ANR	156557	Callee	Z_REFVAL_P		156338	0					
ANR	156558	Identifier	Z_REFVAL_P		156338	0					
ANR	156559	ArgumentList	z		156338	1					
ANR	156560	Argument	z		156338	0					
ANR	156561	Identifier	z		156338	0					
ANR	156562	ElseStatement	else		156338	0					
ANR	156563	CompoundStatement		26:9:639:639	156338	0					
ANR	156564	ExpressionStatement	"ZVAL_COPY ( result , z )"	1381:3:44076:44096	156338	0	True				
ANR	156565	CallExpression	"ZVAL_COPY ( result , z )"		156338	0					
ANR	156566	Callee	ZVAL_COPY		156338	0					
ANR	156567	Identifier	ZVAL_COPY		156338	0					
ANR	156568	ArgumentList	result		156338	1					
ANR	156569	Argument	result		156338	0					
ANR	156570	Identifier	result		156338	0					
ANR	156571	Argument	z		156338	1					
ANR	156572	Identifier	z		156338	0					
ANR	156573	ExpressionStatement	"ZVAL_DUP ( & z_copy , result )"	1383:2:44104:44129	156338	9	True				
ANR	156574	CallExpression	"ZVAL_DUP ( & z_copy , result )"		156338	0					
ANR	156575	Callee	ZVAL_DUP		156338	0					
ANR	156576	Identifier	ZVAL_DUP		156338	0					
ANR	156577	ArgumentList	& z_copy		156338	1					
ANR	156578	Argument	& z_copy		156338	0					
ANR	156579	UnaryOperationExpression	& z_copy		156338	0					
ANR	156580	UnaryOperator	&		156338	0					
ANR	156581	Identifier	z_copy		156338	1					
ANR	156582	Argument	result		156338	1					
ANR	156583	Identifier	result		156338	0					
ANR	156584	IfStatement	if ( inc )		156338	10					
ANR	156585	Condition	inc	1384:6:44137:44139	156338	0	True				
ANR	156586	Identifier	inc		156338	0					
ANR	156587	CompoundStatement		30:11:710:710	156338	1					
ANR	156588	ExpressionStatement	increment_function ( & z_copy )	1385:3:44147:44174	156338	0	True				
ANR	156589	CallExpression	increment_function ( & z_copy )		156338	0					
ANR	156590	Callee	increment_function		156338	0					
ANR	156591	Identifier	increment_function		156338	0					
ANR	156592	ArgumentList	& z_copy		156338	1					
ANR	156593	Argument	& z_copy		156338	0					
ANR	156594	UnaryOperationExpression	& z_copy		156338	0					
ANR	156595	UnaryOperator	&		156338	0					
ANR	156596	Identifier	z_copy		156338	1					
ANR	156597	ElseStatement	else		156338	0					
ANR	156598	CompoundStatement		32:9:753:753	156338	0					
ANR	156599	ExpressionStatement	decrement_function ( & z_copy )	1387:3:44190:44217	156338	0	True				
ANR	156600	CallExpression	decrement_function ( & z_copy )		156338	0					
ANR	156601	Callee	decrement_function		156338	0					
ANR	156602	Identifier	decrement_function		156338	0					
ANR	156603	ArgumentList	& z_copy		156338	1					
ANR	156604	Argument	& z_copy		156338	0					
ANR	156605	UnaryOperationExpression	& z_copy		156338	0					
ANR	156606	UnaryOperator	&		156338	0					
ANR	156607	Identifier	z_copy		156338	1					
ANR	156608	ExpressionStatement	"Z_OBJ_HT ( obj ) -> write_property ( & obj , property , & z_copy , cache_slot )"	1389:2:44225:44291	156338	11	True				
ANR	156609	CallExpression	"Z_OBJ_HT ( obj ) -> write_property ( & obj , property , & z_copy , cache_slot )"		156338	0					
ANR	156610	Callee	Z_OBJ_HT ( obj ) -> write_property		156338	0					
ANR	156611	PtrMemberAccess	Z_OBJ_HT ( obj ) -> write_property		156338	0					
ANR	156612	CallExpression	Z_OBJ_HT ( obj )		156338	0					
ANR	156613	Callee	Z_OBJ_HT		156338	0					
ANR	156614	Identifier	Z_OBJ_HT		156338	0					
ANR	156615	ArgumentList	obj		156338	1					
ANR	156616	Argument	obj		156338	0					
ANR	156617	Identifier	obj		156338	0					
ANR	156618	Identifier	write_property		156338	1					
ANR	156619	ArgumentList	& obj		156338	1					
ANR	156620	Argument	& obj		156338	0					
ANR	156621	UnaryOperationExpression	& obj		156338	0					
ANR	156622	UnaryOperator	&		156338	0					
ANR	156623	Identifier	obj		156338	1					
ANR	156624	Argument	property		156338	1					
ANR	156625	Identifier	property		156338	0					
ANR	156626	Argument	& z_copy		156338	2					
ANR	156627	UnaryOperationExpression	& z_copy		156338	0					
ANR	156628	UnaryOperator	&		156338	0					
ANR	156629	Identifier	z_copy		156338	1					
ANR	156630	Argument	cache_slot		156338	3					
ANR	156631	Identifier	cache_slot		156338	0					
ANR	156632	ExpressionStatement	OBJ_RELEASE ( Z_OBJ ( obj ) )	1390:2:44295:44318	156338	12	True				
ANR	156633	CallExpression	OBJ_RELEASE ( Z_OBJ ( obj ) )		156338	0					
ANR	156634	Callee	OBJ_RELEASE		156338	0					
ANR	156635	Identifier	OBJ_RELEASE		156338	0					
ANR	156636	ArgumentList	Z_OBJ ( obj )		156338	1					
ANR	156637	Argument	Z_OBJ ( obj )		156338	0					
ANR	156638	CallExpression	Z_OBJ ( obj )		156338	0					
ANR	156639	Callee	Z_OBJ		156338	0					
ANR	156640	Identifier	Z_OBJ		156338	0					
ANR	156641	ArgumentList	obj		156338	1					
ANR	156642	Argument	obj		156338	0					
ANR	156643	Identifier	obj		156338	0					
ANR	156644	ExpressionStatement	zval_ptr_dtor ( & z_copy )	1391:2:44322:44344	156338	13	True				
ANR	156645	CallExpression	zval_ptr_dtor ( & z_copy )		156338	0					
ANR	156646	Callee	zval_ptr_dtor		156338	0					
ANR	156647	Identifier	zval_ptr_dtor		156338	0					
ANR	156648	ArgumentList	& z_copy		156338	1					
ANR	156649	Argument	& z_copy		156338	0					
ANR	156650	UnaryOperationExpression	& z_copy		156338	0					
ANR	156651	UnaryOperator	&		156338	0					
ANR	156652	Identifier	z_copy		156338	1					
ANR	156653	ExpressionStatement	zval_ptr_dtor ( z )	1392:2:44348:44364	156338	14	True				
ANR	156654	CallExpression	zval_ptr_dtor ( z )		156338	0					
ANR	156655	Callee	zval_ptr_dtor		156338	0					
ANR	156656	Identifier	zval_ptr_dtor		156338	0					
ANR	156657	ArgumentList	z		156338	1					
ANR	156658	Argument	z		156338	0					
ANR	156659	Identifier	z		156338	0					
ANR	156660	ElseStatement	else		156338	0					
ANR	156661	CompoundStatement		39:8:942:942	156338	0					
ANR	156662	ExpressionStatement	"zend_error ( E_WARNING , ""Attempt to increment/decrement property of non-object"" )"	1394:2:44378:44456	156338	0	True				
ANR	156663	CallExpression	"zend_error ( E_WARNING , ""Attempt to increment/decrement property of non-object"" )"		156338	0					
ANR	156664	Callee	zend_error		156338	0					
ANR	156665	Identifier	zend_error		156338	0					
ANR	156666	ArgumentList	E_WARNING		156338	1					
ANR	156667	Argument	E_WARNING		156338	0					
ANR	156668	Identifier	E_WARNING		156338	0					
ANR	156669	Argument	"""Attempt to increment/decrement property of non-object"""		156338	1					
ANR	156670	PrimaryExpression	"""Attempt to increment/decrement property of non-object"""		156338	0					
ANR	156671	ExpressionStatement	ZVAL_NULL ( result )	1395:2:44460:44477	156338	1	True				
ANR	156672	CallExpression	ZVAL_NULL ( result )		156338	0					
ANR	156673	Callee	ZVAL_NULL		156338	0					
ANR	156674	Identifier	ZVAL_NULL		156338	0					
ANR	156675	ArgumentList	result		156338	1					
ANR	156676	Argument	result		156338	0					
ANR	156677	Identifier	result		156338	0					
ANR	156678	ReturnType	static zend_never_inline void		156338	1					
ANR	156679	Identifier	zend_post_incdec_overloaded_property		156338	2					
ANR	156680	ParameterList	"zval * object , zval * property , void * * cache_slot , int inc , zval * result"		156338	3					
ANR	156681	Parameter	zval * object	1354:67:43359:43370	156338	0	True				
ANR	156682	ParameterType	zval *		156338	0					
ANR	156683	Identifier	object		156338	1					
ANR	156684	Parameter	zval * property	1354:81:43373:43386	156338	1	True				
ANR	156685	ParameterType	zval *		156338	0					
ANR	156686	Identifier	property		156338	1					
ANR	156687	Parameter	void * * cache_slot	1354:97:43389:43405	156338	2	True				
ANR	156688	ParameterType	void * *		156338	0					
ANR	156689	Identifier	cache_slot		156338	1					
ANR	156690	Parameter	int inc	1354:116:43408:43414	156338	3	True				
ANR	156691	ParameterType	int		156338	0					
ANR	156692	Identifier	inc		156338	1					
ANR	156693	Parameter	zval * result	1354:125:43417:43428	156338	4	True				
ANR	156694	ParameterType	zval *		156338	0					
ANR	156695	Identifier	result		156338	1					
ANR	156696	CFGEntryNode	ENTRY		156338		True				
ANR	156697	CFGExitNode	EXIT		156338		True				
ANR	156698	Symbol	exception		156338						
ANR	156699	Symbol	z_copy		156338						
ANR	156700	Symbol	rv		156338						
ANR	156701	Symbol	Z_OBJ_P		156338						
ANR	156702	Symbol	Z_OBJ_HT ( obj ) -> read_property		156338						
ANR	156703	Symbol	result		156338						
ANR	156704	Symbol	UNEXPECTED		156338						
ANR	156705	Symbol	E_WARNING		156338						
ANR	156706	Symbol	Z_OBJ		156338						
ANR	156707	Symbol	Z_OBJ_HT_P ( z ) -> get		156338						
ANR	156708	Symbol	& rv2		156338						
ANR	156709	Symbol	Z_OBJ_HT		156338						
ANR	156710	Symbol	IS_REFERENCE		156338						
ANR	156711	Symbol	property		156338						
ANR	156712	Symbol	& z_copy		156338						
ANR	156713	Symbol	& obj		156338						
ANR	156714	Symbol	value		156338						
ANR	156715	Symbol	BP_VAR_R		156338						
ANR	156716	Symbol	inc		156338						
ANR	156717	Symbol	cache_slot		156338						
ANR	156718	Symbol	Z_OBJ_HT_P ( object ) -> read_property		156338						
ANR	156719	Symbol	Z_OBJ_HT_P ( object ) -> write_property		156338						
ANR	156720	Symbol	EG		156338						
ANR	156721	Symbol	* Z_OBJ_HT		156338						
ANR	156722	Symbol	Z_TYPE_P		156338						
ANR	156723	Symbol	* Z_OBJ_HT_P		156338						
ANR	156724	Symbol	& rv		156338						
ANR	156725	Symbol	rv2		156338						
ANR	156726	Symbol	obj		156338						
ANR	156727	Symbol	Z_REFVAL_P		156338						
ANR	156728	Symbol	Z_OBJ_HT_P		156338						
ANR	156729	Symbol	z		156338						
ANR	156730	Symbol	IS_OBJECT		156338						
ANR	156731	Symbol	object		156338						
ANR	156732	Function	zend_pre_incdec_overloaded_property	1399:0:44485:45597							
ANR	156733	FunctionDef	"zend_pre_incdec_overloaded_property (zval * object , zval * property , void * * cache_slot , int inc , zval * result)"		156732	0					
ANR	156734	CompoundStatement		1400:0:44623:45597	156732	0					
ANR	156735	IdentifierDeclStatement	zval rv ;	1401:1:44626:44633	156732	0	True				
ANR	156736	IdentifierDecl	rv		156732	0					
ANR	156737	IdentifierDeclType	zval		156732	0					
ANR	156738	Identifier	rv		156732	1					
ANR	156739	IfStatement	if ( Z_OBJ_HT_P ( object ) -> read_property && Z_OBJ_HT_P ( object ) -> write_property )		156732	1					
ANR	156740	Condition	Z_OBJ_HT_P ( object ) -> read_property && Z_OBJ_HT_P ( object ) -> write_property	1403:5:44641:44711	156732	0	True				
ANR	156741	AndExpression	Z_OBJ_HT_P ( object ) -> read_property && Z_OBJ_HT_P ( object ) -> write_property		156732	0		&&			
ANR	156742	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> read_property		156732	0					
ANR	156743	CallExpression	Z_OBJ_HT_P ( object )		156732	0					
ANR	156744	Callee	Z_OBJ_HT_P		156732	0					
ANR	156745	Identifier	Z_OBJ_HT_P		156732	0					
ANR	156746	ArgumentList	object		156732	1					
ANR	156747	Argument	object		156732	0					
ANR	156748	Identifier	object		156732	0					
ANR	156749	Identifier	read_property		156732	1					
ANR	156750	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_property		156732	1					
ANR	156751	CallExpression	Z_OBJ_HT_P ( object )		156732	0					
ANR	156752	Callee	Z_OBJ_HT_P		156732	0					
ANR	156753	Identifier	Z_OBJ_HT_P		156732	0					
ANR	156754	ArgumentList	object		156732	1					
ANR	156755	Argument	object		156732	0					
ANR	156756	Identifier	object		156732	0					
ANR	156757	Identifier	write_property		156732	1					
ANR	156758	CompoundStatement		5:2:94:106	156732	1					
ANR	156759	IdentifierDeclStatement	"zval * z , obj ;"	1404:2:44718:44730	156732	0	True				
ANR	156760	IdentifierDecl	* z		156732	0					
ANR	156761	IdentifierDeclType	zval *		156732	0					
ANR	156762	Identifier	z		156732	1					
ANR	156763	IdentifierDecl	obj		156732	1					
ANR	156764	IdentifierDeclType	zval		156732	0					
ANR	156765	Identifier	obj		156732	1					
ANR	156766	ExpressionStatement	"ZVAL_OBJ ( & obj , Z_OBJ_P ( object ) )"	1406:2:44739:44770	156732	1	True				
ANR	156767	CallExpression	"ZVAL_OBJ ( & obj , Z_OBJ_P ( object ) )"		156732	0					
ANR	156768	Callee	ZVAL_OBJ		156732	0					
ANR	156769	Identifier	ZVAL_OBJ		156732	0					
ANR	156770	ArgumentList	& obj		156732	1					
ANR	156771	Argument	& obj		156732	0					
ANR	156772	UnaryOperationExpression	& obj		156732	0					
ANR	156773	UnaryOperator	&		156732	0					
ANR	156774	Identifier	obj		156732	1					
ANR	156775	Argument	Z_OBJ_P ( object )		156732	1					
ANR	156776	CallExpression	Z_OBJ_P ( object )		156732	0					
ANR	156777	Callee	Z_OBJ_P		156732	0					
ANR	156778	Identifier	Z_OBJ_P		156732	0					
ANR	156779	ArgumentList	object		156732	1					
ANR	156780	Argument	object		156732	0					
ANR	156781	Identifier	object		156732	0					
ANR	156782	ExpressionStatement	Z_ADDREF ( obj )	1407:2:44774:44787	156732	2	True				
ANR	156783	CallExpression	Z_ADDREF ( obj )		156732	0					
ANR	156784	Callee	Z_ADDREF		156732	0					
ANR	156785	Identifier	Z_ADDREF		156732	0					
ANR	156786	ArgumentList	obj		156732	1					
ANR	156787	Argument	obj		156732	0					
ANR	156788	Identifier	obj		156732	0					
ANR	156789	ExpressionStatement	"z = Z_OBJ_HT ( obj ) -> read_property ( & obj , property , BP_VAR_R , cache_slot , & rv )"	1408:2:44791:44866	156732	3	True				
ANR	156790	AssignmentExpression	"z = Z_OBJ_HT ( obj ) -> read_property ( & obj , property , BP_VAR_R , cache_slot , & rv )"		156732	0		=			
ANR	156791	Identifier	z		156732	0					
ANR	156792	CallExpression	"Z_OBJ_HT ( obj ) -> read_property ( & obj , property , BP_VAR_R , cache_slot , & rv )"		156732	1					
ANR	156793	Callee	Z_OBJ_HT ( obj ) -> read_property		156732	0					
ANR	156794	PtrMemberAccess	Z_OBJ_HT ( obj ) -> read_property		156732	0					
ANR	156795	CallExpression	Z_OBJ_HT ( obj )		156732	0					
ANR	156796	Callee	Z_OBJ_HT		156732	0					
ANR	156797	Identifier	Z_OBJ_HT		156732	0					
ANR	156798	ArgumentList	obj		156732	1					
ANR	156799	Argument	obj		156732	0					
ANR	156800	Identifier	obj		156732	0					
ANR	156801	Identifier	read_property		156732	1					
ANR	156802	ArgumentList	& obj		156732	1					
ANR	156803	Argument	& obj		156732	0					
ANR	156804	UnaryOperationExpression	& obj		156732	0					
ANR	156805	UnaryOperator	&		156732	0					
ANR	156806	Identifier	obj		156732	1					
ANR	156807	Argument	property		156732	1					
ANR	156808	Identifier	property		156732	0					
ANR	156809	Argument	BP_VAR_R		156732	2					
ANR	156810	Identifier	BP_VAR_R		156732	0					
ANR	156811	Argument	cache_slot		156732	3					
ANR	156812	Identifier	cache_slot		156732	0					
ANR	156813	Argument	& rv		156732	4					
ANR	156814	UnaryOperationExpression	& rv		156732	0					
ANR	156815	UnaryOperator	&		156732	0					
ANR	156816	Identifier	rv		156732	1					
ANR	156817	IfStatement	if ( UNEXPECTED ( EG ( exception ) ) )		156732	4					
ANR	156818	Condition	UNEXPECTED ( EG ( exception ) )	1409:6:44874:44898	156732	0	True				
ANR	156819	CallExpression	UNEXPECTED ( EG ( exception ) )		156732	0					
ANR	156820	Callee	UNEXPECTED		156732	0					
ANR	156821	Identifier	UNEXPECTED		156732	0					
ANR	156822	ArgumentList	EG ( exception )		156732	1					
ANR	156823	Argument	EG ( exception )		156732	0					
ANR	156824	CallExpression	EG ( exception )		156732	0					
ANR	156825	Callee	EG		156732	0					
ANR	156826	Identifier	EG		156732	0					
ANR	156827	ArgumentList	exception		156732	1					
ANR	156828	Argument	exception		156732	0					
ANR	156829	Identifier	exception		156732	0					
ANR	156830	CompoundStatement		10:33:277:277	156732	1					
ANR	156831	ExpressionStatement	OBJ_RELEASE ( Z_OBJ ( obj ) )	1410:3:44906:44929	156732	0	True				
ANR	156832	CallExpression	OBJ_RELEASE ( Z_OBJ ( obj ) )		156732	0					
ANR	156833	Callee	OBJ_RELEASE		156732	0					
ANR	156834	Identifier	OBJ_RELEASE		156732	0					
ANR	156835	ArgumentList	Z_OBJ ( obj )		156732	1					
ANR	156836	Argument	Z_OBJ ( obj )		156732	0					
ANR	156837	CallExpression	Z_OBJ ( obj )		156732	0					
ANR	156838	Callee	Z_OBJ		156732	0					
ANR	156839	Identifier	Z_OBJ		156732	0					
ANR	156840	ArgumentList	obj		156732	1					
ANR	156841	Argument	obj		156732	0					
ANR	156842	Identifier	obj		156732	0					
ANR	156843	ReturnStatement	return ;	1411:3:44934:44940	156732	1	True				
ANR	156844	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( z ) == IS_OBJECT ) && Z_OBJ_HT_P ( z ) -> get )		156732	5					
ANR	156845	Condition	UNEXPECTED ( Z_TYPE_P ( z ) == IS_OBJECT ) && Z_OBJ_HT_P ( z ) -> get	1414:6:44953:45010	156732	0	True				
ANR	156846	AndExpression	UNEXPECTED ( Z_TYPE_P ( z ) == IS_OBJECT ) && Z_OBJ_HT_P ( z ) -> get		156732	0		&&			
ANR	156847	CallExpression	UNEXPECTED ( Z_TYPE_P ( z ) == IS_OBJECT )		156732	0					
ANR	156848	Callee	UNEXPECTED		156732	0					
ANR	156849	Identifier	UNEXPECTED		156732	0					
ANR	156850	ArgumentList	Z_TYPE_P ( z ) == IS_OBJECT		156732	1					
ANR	156851	Argument	Z_TYPE_P ( z ) == IS_OBJECT		156732	0					
ANR	156852	EqualityExpression	Z_TYPE_P ( z ) == IS_OBJECT		156732	0		==			
ANR	156853	CallExpression	Z_TYPE_P ( z )		156732	0					
ANR	156854	Callee	Z_TYPE_P		156732	0					
ANR	156855	Identifier	Z_TYPE_P		156732	0					
ANR	156856	ArgumentList	z		156732	1					
ANR	156857	Argument	z		156732	0					
ANR	156858	Identifier	z		156732	0					
ANR	156859	Identifier	IS_OBJECT		156732	1					
ANR	156860	PtrMemberAccess	Z_OBJ_HT_P ( z ) -> get		156732	1					
ANR	156861	CallExpression	Z_OBJ_HT_P ( z )		156732	0					
ANR	156862	Callee	Z_OBJ_HT_P		156732	0					
ANR	156863	Identifier	Z_OBJ_HT_P		156732	0					
ANR	156864	ArgumentList	z		156732	1					
ANR	156865	Argument	z		156732	0					
ANR	156866	Identifier	z		156732	0					
ANR	156867	Identifier	get		156732	1					
ANR	156868	CompoundStatement		17:3:407:448	156732	1					
ANR	156869	IdentifierDeclStatement	zval rv2 ;	1415:3:45018:45026	156732	0	True				
ANR	156870	IdentifierDecl	rv2		156732	0					
ANR	156871	IdentifierDeclType	zval		156732	0					
ANR	156872	Identifier	rv2		156732	1					
ANR	156873	IdentifierDeclStatement	"zval * value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 ) ;"	1416:3:45031:45072	156732	1	True				
ANR	156874	IdentifierDecl	"* value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		156732	0					
ANR	156875	IdentifierDeclType	zval *		156732	0					
ANR	156876	Identifier	value		156732	1					
ANR	156877	AssignmentExpression	"* value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		156732	2		=			
ANR	156878	Identifier	value		156732	0					
ANR	156879	CallExpression	"Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		156732	1					
ANR	156880	Callee	Z_OBJ_HT_P ( z ) -> get		156732	0					
ANR	156881	PtrMemberAccess	Z_OBJ_HT_P ( z ) -> get		156732	0					
ANR	156882	CallExpression	Z_OBJ_HT_P ( z )		156732	0					
ANR	156883	Callee	Z_OBJ_HT_P		156732	0					
ANR	156884	Identifier	Z_OBJ_HT_P		156732	0					
ANR	156885	ArgumentList	z		156732	1					
ANR	156886	Argument	z		156732	0					
ANR	156887	Identifier	z		156732	0					
ANR	156888	Identifier	get		156732	1					
ANR	156889	ArgumentList	z		156732	1					
ANR	156890	Argument	z		156732	0					
ANR	156891	Identifier	z		156732	0					
ANR	156892	Argument	& rv2		156732	1					
ANR	156893	UnaryOperationExpression	& rv2		156732	0					
ANR	156894	UnaryOperator	&		156732	0					
ANR	156895	Identifier	rv2		156732	1					
ANR	156896	IfStatement	if ( z == & rv )		156732	2					
ANR	156897	Condition	z == & rv	1418:7:45082:45089	156732	0	True				
ANR	156898	EqualityExpression	z == & rv		156732	0		==			
ANR	156899	Identifier	z		156732	0					
ANR	156900	UnaryOperationExpression	& rv		156732	1					
ANR	156901	UnaryOperator	&		156732	0					
ANR	156902	Identifier	rv		156732	1					
ANR	156903	CompoundStatement		19:17:468:468	156732	1					
ANR	156904	ExpressionStatement	zval_ptr_dtor ( & rv )	1419:4:45098:45116	156732	0	True				
ANR	156905	CallExpression	zval_ptr_dtor ( & rv )		156732	0					
ANR	156906	Callee	zval_ptr_dtor		156732	0					
ANR	156907	Identifier	zval_ptr_dtor		156732	0					
ANR	156908	ArgumentList	& rv		156732	1					
ANR	156909	Argument	& rv		156732	0					
ANR	156910	UnaryOperationExpression	& rv		156732	0					
ANR	156911	UnaryOperator	&		156732	0					
ANR	156912	Identifier	rv		156732	1					
ANR	156913	ExpressionStatement	"ZVAL_COPY_VALUE ( z , value )"	1421:3:45126:45151	156732	3	True				
ANR	156914	CallExpression	"ZVAL_COPY_VALUE ( z , value )"		156732	0					
ANR	156915	Callee	ZVAL_COPY_VALUE		156732	0					
ANR	156916	Identifier	ZVAL_COPY_VALUE		156732	0					
ANR	156917	ArgumentList	z		156732	1					
ANR	156918	Argument	z		156732	0					
ANR	156919	Identifier	z		156732	0					
ANR	156920	Argument	value		156732	1					
ANR	156921	Identifier	value		156732	0					
ANR	156922	ExpressionStatement	ZVAL_DEREF ( z )	1423:2:45159:45172	156732	6	True				
ANR	156923	CallExpression	ZVAL_DEREF ( z )		156732	0					
ANR	156924	Callee	ZVAL_DEREF		156732	0					
ANR	156925	Identifier	ZVAL_DEREF		156732	0					
ANR	156926	ArgumentList	z		156732	1					
ANR	156927	Argument	z		156732	0					
ANR	156928	Identifier	z		156732	0					
ANR	156929	ExpressionStatement	SEPARATE_ZVAL_NOREF ( z )	1424:2:45176:45198	156732	7	True				
ANR	156930	CallExpression	SEPARATE_ZVAL_NOREF ( z )		156732	0					
ANR	156931	Callee	SEPARATE_ZVAL_NOREF		156732	0					
ANR	156932	Identifier	SEPARATE_ZVAL_NOREF		156732	0					
ANR	156933	ArgumentList	z		156732	1					
ANR	156934	Argument	z		156732	0					
ANR	156935	Identifier	z		156732	0					
ANR	156936	IfStatement	if ( inc )		156732	8					
ANR	156937	Condition	inc	1425:6:45206:45208	156732	0	True				
ANR	156938	Identifier	inc		156732	0					
ANR	156939	CompoundStatement		26:11:587:587	156732	1					
ANR	156940	ExpressionStatement	increment_function ( z )	1426:3:45216:45237	156732	0	True				
ANR	156941	CallExpression	increment_function ( z )		156732	0					
ANR	156942	Callee	increment_function		156732	0					
ANR	156943	Identifier	increment_function		156732	0					
ANR	156944	ArgumentList	z		156732	1					
ANR	156945	Argument	z		156732	0					
ANR	156946	Identifier	z		156732	0					
ANR	156947	ElseStatement	else		156732	0					
ANR	156948	CompoundStatement		28:9:624:624	156732	0					
ANR	156949	ExpressionStatement	decrement_function ( z )	1428:3:45253:45274	156732	0	True				
ANR	156950	CallExpression	decrement_function ( z )		156732	0					
ANR	156951	Callee	decrement_function		156732	0					
ANR	156952	Identifier	decrement_function		156732	0					
ANR	156953	ArgumentList	z		156732	1					
ANR	156954	Argument	z		156732	0					
ANR	156955	Identifier	z		156732	0					
ANR	156956	IfStatement	if ( UNEXPECTED ( result ) )		156732	9					
ANR	156957	Condition	UNEXPECTED ( result )	1430:6:45286:45303	156732	0	True				
ANR	156958	CallExpression	UNEXPECTED ( result )		156732	0					
ANR	156959	Callee	UNEXPECTED		156732	0					
ANR	156960	Identifier	UNEXPECTED		156732	0					
ANR	156961	ArgumentList	result		156732	1					
ANR	156962	Argument	result		156732	0					
ANR	156963	Identifier	result		156732	0					
ANR	156964	CompoundStatement		31:26:682:682	156732	1					
ANR	156965	ExpressionStatement	"ZVAL_COPY ( result , z )"	1431:3:45311:45331	156732	0	True				
ANR	156966	CallExpression	"ZVAL_COPY ( result , z )"		156732	0					
ANR	156967	Callee	ZVAL_COPY		156732	0					
ANR	156968	Identifier	ZVAL_COPY		156732	0					
ANR	156969	ArgumentList	result		156732	1					
ANR	156970	Argument	result		156732	0					
ANR	156971	Identifier	result		156732	0					
ANR	156972	Argument	z		156732	1					
ANR	156973	Identifier	z		156732	0					
ANR	156974	ExpressionStatement	"Z_OBJ_HT ( obj ) -> write_property ( & obj , property , z , cache_slot )"	1433:2:45339:45399	156732	10	True				
ANR	156975	CallExpression	"Z_OBJ_HT ( obj ) -> write_property ( & obj , property , z , cache_slot )"		156732	0					
ANR	156976	Callee	Z_OBJ_HT ( obj ) -> write_property		156732	0					
ANR	156977	PtrMemberAccess	Z_OBJ_HT ( obj ) -> write_property		156732	0					
ANR	156978	CallExpression	Z_OBJ_HT ( obj )		156732	0					
ANR	156979	Callee	Z_OBJ_HT		156732	0					
ANR	156980	Identifier	Z_OBJ_HT		156732	0					
ANR	156981	ArgumentList	obj		156732	1					
ANR	156982	Argument	obj		156732	0					
ANR	156983	Identifier	obj		156732	0					
ANR	156984	Identifier	write_property		156732	1					
ANR	156985	ArgumentList	& obj		156732	1					
ANR	156986	Argument	& obj		156732	0					
ANR	156987	UnaryOperationExpression	& obj		156732	0					
ANR	156988	UnaryOperator	&		156732	0					
ANR	156989	Identifier	obj		156732	1					
ANR	156990	Argument	property		156732	1					
ANR	156991	Identifier	property		156732	0					
ANR	156992	Argument	z		156732	2					
ANR	156993	Identifier	z		156732	0					
ANR	156994	Argument	cache_slot		156732	3					
ANR	156995	Identifier	cache_slot		156732	0					
ANR	156996	ExpressionStatement	OBJ_RELEASE ( Z_OBJ ( obj ) )	1434:2:45403:45426	156732	11	True				
ANR	156997	CallExpression	OBJ_RELEASE ( Z_OBJ ( obj ) )		156732	0					
ANR	156998	Callee	OBJ_RELEASE		156732	0					
ANR	156999	Identifier	OBJ_RELEASE		156732	0					
ANR	157000	ArgumentList	Z_OBJ ( obj )		156732	1					
ANR	157001	Argument	Z_OBJ ( obj )		156732	0					
ANR	157002	CallExpression	Z_OBJ ( obj )		156732	0					
ANR	157003	Callee	Z_OBJ		156732	0					
ANR	157004	Identifier	Z_OBJ		156732	0					
ANR	157005	ArgumentList	obj		156732	1					
ANR	157006	Argument	obj		156732	0					
ANR	157007	Identifier	obj		156732	0					
ANR	157008	ExpressionStatement	zval_ptr_dtor ( z )	1435:2:45430:45446	156732	12	True				
ANR	157009	CallExpression	zval_ptr_dtor ( z )		156732	0					
ANR	157010	Callee	zval_ptr_dtor		156732	0					
ANR	157011	Identifier	zval_ptr_dtor		156732	0					
ANR	157012	ArgumentList	z		156732	1					
ANR	157013	Argument	z		156732	0					
ANR	157014	Identifier	z		156732	0					
ANR	157015	ElseStatement	else		156732	0					
ANR	157016	CompoundStatement		37:8:832:832	156732	0					
ANR	157017	ExpressionStatement	"zend_error ( E_WARNING , ""Attempt to increment/decrement property of non-object"" )"	1437:2:45460:45538	156732	0	True				
ANR	157018	CallExpression	"zend_error ( E_WARNING , ""Attempt to increment/decrement property of non-object"" )"		156732	0					
ANR	157019	Callee	zend_error		156732	0					
ANR	157020	Identifier	zend_error		156732	0					
ANR	157021	ArgumentList	E_WARNING		156732	1					
ANR	157022	Argument	E_WARNING		156732	0					
ANR	157023	Identifier	E_WARNING		156732	0					
ANR	157024	Argument	"""Attempt to increment/decrement property of non-object"""		156732	1					
ANR	157025	PrimaryExpression	"""Attempt to increment/decrement property of non-object"""		156732	0					
ANR	157026	IfStatement	if ( UNEXPECTED ( result ) )		156732	1					
ANR	157027	Condition	UNEXPECTED ( result )	1438:6:45546:45563	156732	0	True				
ANR	157028	CallExpression	UNEXPECTED ( result )		156732	0					
ANR	157029	Callee	UNEXPECTED		156732	0					
ANR	157030	Identifier	UNEXPECTED		156732	0					
ANR	157031	ArgumentList	result		156732	1					
ANR	157032	Argument	result		156732	0					
ANR	157033	Identifier	result		156732	0					
ANR	157034	CompoundStatement		39:26:942:942	156732	1					
ANR	157035	ExpressionStatement	ZVAL_NULL ( result )	1439:3:45571:45588	156732	0	True				
ANR	157036	CallExpression	ZVAL_NULL ( result )		156732	0					
ANR	157037	Callee	ZVAL_NULL		156732	0					
ANR	157038	Identifier	ZVAL_NULL		156732	0					
ANR	157039	ArgumentList	result		156732	1					
ANR	157040	Argument	result		156732	0					
ANR	157041	Identifier	result		156732	0					
ANR	157042	ReturnType	static zend_never_inline void		156732	1					
ANR	157043	Identifier	zend_pre_incdec_overloaded_property		156732	2					
ANR	157044	ParameterList	"zval * object , zval * property , void * * cache_slot , int inc , zval * result"		156732	3					
ANR	157045	Parameter	zval * object	1399:66:44551:44562	156732	0	True				
ANR	157046	ParameterType	zval *		156732	0					
ANR	157047	Identifier	object		156732	1					
ANR	157048	Parameter	zval * property	1399:80:44565:44578	156732	1	True				
ANR	157049	ParameterType	zval *		156732	0					
ANR	157050	Identifier	property		156732	1					
ANR	157051	Parameter	void * * cache_slot	1399:96:44581:44597	156732	2	True				
ANR	157052	ParameterType	void * *		156732	0					
ANR	157053	Identifier	cache_slot		156732	1					
ANR	157054	Parameter	int inc	1399:115:44600:44606	156732	3	True				
ANR	157055	ParameterType	int		156732	0					
ANR	157056	Identifier	inc		156732	1					
ANR	157057	Parameter	zval * result	1399:124:44609:44620	156732	4	True				
ANR	157058	ParameterType	zval *		156732	0					
ANR	157059	Identifier	result		156732	1					
ANR	157060	CFGEntryNode	ENTRY		156732		True				
ANR	157061	CFGExitNode	EXIT		156732		True				
ANR	157062	Symbol	exception		156732						
ANR	157063	Symbol	rv		156732						
ANR	157064	Symbol	Z_OBJ_P		156732						
ANR	157065	Symbol	Z_OBJ_HT ( obj ) -> read_property		156732						
ANR	157066	Symbol	result		156732						
ANR	157067	Symbol	UNEXPECTED		156732						
ANR	157068	Symbol	E_WARNING		156732						
ANR	157069	Symbol	Z_OBJ		156732						
ANR	157070	Symbol	Z_OBJ_HT_P ( z ) -> get		156732						
ANR	157071	Symbol	& rv2		156732						
ANR	157072	Symbol	Z_OBJ_HT		156732						
ANR	157073	Symbol	property		156732						
ANR	157074	Symbol	& obj		156732						
ANR	157075	Symbol	value		156732						
ANR	157076	Symbol	BP_VAR_R		156732						
ANR	157077	Symbol	inc		156732						
ANR	157078	Symbol	cache_slot		156732						
ANR	157079	Symbol	Z_OBJ_HT_P ( object ) -> read_property		156732						
ANR	157080	Symbol	Z_OBJ_HT_P ( object ) -> write_property		156732						
ANR	157081	Symbol	EG		156732						
ANR	157082	Symbol	* Z_OBJ_HT		156732						
ANR	157083	Symbol	Z_TYPE_P		156732						
ANR	157084	Symbol	* Z_OBJ_HT_P		156732						
ANR	157085	Symbol	& rv		156732						
ANR	157086	Symbol	rv2		156732						
ANR	157087	Symbol	obj		156732						
ANR	157088	Symbol	Z_OBJ_HT_P		156732						
ANR	157089	Symbol	z		156732						
ANR	157090	Symbol	IS_OBJECT		156732						
ANR	157091	Symbol	object		156732						
ANR	157092	Function	zend_assign_op_overloaded_property	1444:0:45600:46647							
ANR	157093	FunctionDef	"zend_assign_op_overloaded_property (zval * object , zval * property , void * * cache_slot , zval * value , binary_op_type binary_op , zval * result)"		157092	0					
ANR	157094	CompoundStatement		1445:0:45767:46647	157092	0					
ANR	157095	IdentifierDeclStatement	zval * z ;	1446:1:45770:45777	157092	0	True				
ANR	157096	IdentifierDecl	* z		157092	0					
ANR	157097	IdentifierDeclType	zval *		157092	0					
ANR	157098	Identifier	z		157092	1					
ANR	157099	IdentifierDeclStatement	"zval rv , obj ;"	1447:1:45780:45792	157092	1	True				
ANR	157100	IdentifierDecl	rv		157092	0					
ANR	157101	IdentifierDeclType	zval		157092	0					
ANR	157102	Identifier	rv		157092	1					
ANR	157103	IdentifierDecl	obj		157092	1					
ANR	157104	IdentifierDeclType	zval		157092	0					
ANR	157105	Identifier	obj		157092	1					
ANR	157106	IdentifierDeclStatement	zval * zptr ;	1448:1:45795:45805	157092	2	True				
ANR	157107	IdentifierDecl	* zptr		157092	0					
ANR	157108	IdentifierDeclType	zval *		157092	0					
ANR	157109	Identifier	zptr		157092	1					
ANR	157110	ExpressionStatement	"ZVAL_OBJ ( & obj , Z_OBJ_P ( object ) )"	1450:1:45809:45840	157092	3	True				
ANR	157111	CallExpression	"ZVAL_OBJ ( & obj , Z_OBJ_P ( object ) )"		157092	0					
ANR	157112	Callee	ZVAL_OBJ		157092	0					
ANR	157113	Identifier	ZVAL_OBJ		157092	0					
ANR	157114	ArgumentList	& obj		157092	1					
ANR	157115	Argument	& obj		157092	0					
ANR	157116	UnaryOperationExpression	& obj		157092	0					
ANR	157117	UnaryOperator	&		157092	0					
ANR	157118	Identifier	obj		157092	1					
ANR	157119	Argument	Z_OBJ_P ( object )		157092	1					
ANR	157120	CallExpression	Z_OBJ_P ( object )		157092	0					
ANR	157121	Callee	Z_OBJ_P		157092	0					
ANR	157122	Identifier	Z_OBJ_P		157092	0					
ANR	157123	ArgumentList	object		157092	1					
ANR	157124	Argument	object		157092	0					
ANR	157125	Identifier	object		157092	0					
ANR	157126	ExpressionStatement	Z_ADDREF ( obj )	1451:1:45843:45856	157092	4	True				
ANR	157127	CallExpression	Z_ADDREF ( obj )		157092	0					
ANR	157128	Callee	Z_ADDREF		157092	0					
ANR	157129	Identifier	Z_ADDREF		157092	0					
ANR	157130	ArgumentList	obj		157092	1					
ANR	157131	Argument	obj		157092	0					
ANR	157132	Identifier	obj		157092	0					
ANR	157133	IfStatement	if ( EXPECTED ( Z_OBJ_HT ( obj ) -> read_property ) )		157092	5					
ANR	157134	Condition	EXPECTED ( Z_OBJ_HT ( obj ) -> read_property )	1452:5:45863:45900	157092	0	True				
ANR	157135	CallExpression	EXPECTED ( Z_OBJ_HT ( obj ) -> read_property )		157092	0					
ANR	157136	Callee	EXPECTED		157092	0					
ANR	157137	Identifier	EXPECTED		157092	0					
ANR	157138	ArgumentList	Z_OBJ_HT ( obj ) -> read_property		157092	1					
ANR	157139	Argument	Z_OBJ_HT ( obj ) -> read_property		157092	0					
ANR	157140	PtrMemberAccess	Z_OBJ_HT ( obj ) -> read_property		157092	0					
ANR	157141	CallExpression	Z_OBJ_HT ( obj )		157092	0					
ANR	157142	Callee	Z_OBJ_HT		157092	0					
ANR	157143	Identifier	Z_OBJ_HT		157092	0					
ANR	157144	ArgumentList	obj		157092	1					
ANR	157145	Argument	obj		157092	0					
ANR	157146	Identifier	obj		157092	0					
ANR	157147	Identifier	read_property		157092	1					
ANR	157148	CompoundStatement		8:45:135:135	157092	1					
ANR	157149	ExpressionStatement	"z = Z_OBJ_HT ( obj ) -> read_property ( & obj , property , BP_VAR_R , cache_slot , & rv )"	1453:2:45907:45982	157092	0	True				
ANR	157150	AssignmentExpression	"z = Z_OBJ_HT ( obj ) -> read_property ( & obj , property , BP_VAR_R , cache_slot , & rv )"		157092	0		=			
ANR	157151	Identifier	z		157092	0					
ANR	157152	CallExpression	"Z_OBJ_HT ( obj ) -> read_property ( & obj , property , BP_VAR_R , cache_slot , & rv )"		157092	1					
ANR	157153	Callee	Z_OBJ_HT ( obj ) -> read_property		157092	0					
ANR	157154	PtrMemberAccess	Z_OBJ_HT ( obj ) -> read_property		157092	0					
ANR	157155	CallExpression	Z_OBJ_HT ( obj )		157092	0					
ANR	157156	Callee	Z_OBJ_HT		157092	0					
ANR	157157	Identifier	Z_OBJ_HT		157092	0					
ANR	157158	ArgumentList	obj		157092	1					
ANR	157159	Argument	obj		157092	0					
ANR	157160	Identifier	obj		157092	0					
ANR	157161	Identifier	read_property		157092	1					
ANR	157162	ArgumentList	& obj		157092	1					
ANR	157163	Argument	& obj		157092	0					
ANR	157164	UnaryOperationExpression	& obj		157092	0					
ANR	157165	UnaryOperator	&		157092	0					
ANR	157166	Identifier	obj		157092	1					
ANR	157167	Argument	property		157092	1					
ANR	157168	Identifier	property		157092	0					
ANR	157169	Argument	BP_VAR_R		157092	2					
ANR	157170	Identifier	BP_VAR_R		157092	0					
ANR	157171	Argument	cache_slot		157092	3					
ANR	157172	Identifier	cache_slot		157092	0					
ANR	157173	Argument	& rv		157092	4					
ANR	157174	UnaryOperationExpression	& rv		157092	0					
ANR	157175	UnaryOperator	&		157092	0					
ANR	157176	Identifier	rv		157092	1					
ANR	157177	IfStatement	if ( UNEXPECTED ( EG ( exception ) ) )		157092	1					
ANR	157178	Condition	UNEXPECTED ( EG ( exception ) )	1454:6:45990:46014	157092	0	True				
ANR	157179	CallExpression	UNEXPECTED ( EG ( exception ) )		157092	0					
ANR	157180	Callee	UNEXPECTED		157092	0					
ANR	157181	Identifier	UNEXPECTED		157092	0					
ANR	157182	ArgumentList	EG ( exception )		157092	1					
ANR	157183	Argument	EG ( exception )		157092	0					
ANR	157184	CallExpression	EG ( exception )		157092	0					
ANR	157185	Callee	EG		157092	0					
ANR	157186	Identifier	EG		157092	0					
ANR	157187	ArgumentList	exception		157092	1					
ANR	157188	Argument	exception		157092	0					
ANR	157189	Identifier	exception		157092	0					
ANR	157190	CompoundStatement		10:33:249:249	157092	1					
ANR	157191	ExpressionStatement	OBJ_RELEASE ( Z_OBJ ( obj ) )	1455:3:46022:46045	157092	0	True				
ANR	157192	CallExpression	OBJ_RELEASE ( Z_OBJ ( obj ) )		157092	0					
ANR	157193	Callee	OBJ_RELEASE		157092	0					
ANR	157194	Identifier	OBJ_RELEASE		157092	0					
ANR	157195	ArgumentList	Z_OBJ ( obj )		157092	1					
ANR	157196	Argument	Z_OBJ ( obj )		157092	0					
ANR	157197	CallExpression	Z_OBJ ( obj )		157092	0					
ANR	157198	Callee	Z_OBJ		157092	0					
ANR	157199	Identifier	Z_OBJ		157092	0					
ANR	157200	ArgumentList	obj		157092	1					
ANR	157201	Argument	obj		157092	0					
ANR	157202	Identifier	obj		157092	0					
ANR	157203	ReturnStatement	return ;	1456:3:46050:46056	157092	1	True				
ANR	157204	IfStatement	if ( Z_TYPE_P ( z ) == IS_OBJECT && Z_OBJ_HT_P ( z ) -> get )		157092	2					
ANR	157205	Condition	Z_TYPE_P ( z ) == IS_OBJECT && Z_OBJ_HT_P ( z ) -> get	1458:6:46068:46113	157092	0	True				
ANR	157206	AndExpression	Z_TYPE_P ( z ) == IS_OBJECT && Z_OBJ_HT_P ( z ) -> get		157092	0		&&			
ANR	157207	EqualityExpression	Z_TYPE_P ( z ) == IS_OBJECT		157092	0		==			
ANR	157208	CallExpression	Z_TYPE_P ( z )		157092	0					
ANR	157209	Callee	Z_TYPE_P		157092	0					
ANR	157210	Identifier	Z_TYPE_P		157092	0					
ANR	157211	ArgumentList	z		157092	1					
ANR	157212	Argument	z		157092	0					
ANR	157213	Identifier	z		157092	0					
ANR	157214	Identifier	IS_OBJECT		157092	1					
ANR	157215	PtrMemberAccess	Z_OBJ_HT_P ( z ) -> get		157092	1					
ANR	157216	CallExpression	Z_OBJ_HT_P ( z )		157092	0					
ANR	157217	Callee	Z_OBJ_HT_P		157092	0					
ANR	157218	Identifier	Z_OBJ_HT_P		157092	0					
ANR	157219	ArgumentList	z		157092	1					
ANR	157220	Argument	z		157092	0					
ANR	157221	Identifier	z		157092	0					
ANR	157222	Identifier	get		157092	1					
ANR	157223	CompoundStatement		16:3:366:407	157092	1					
ANR	157224	IdentifierDeclStatement	zval rv2 ;	1459:3:46121:46129	157092	0	True				
ANR	157225	IdentifierDecl	rv2		157092	0					
ANR	157226	IdentifierDeclType	zval		157092	0					
ANR	157227	Identifier	rv2		157092	1					
ANR	157228	IdentifierDeclStatement	"zval * value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 ) ;"	1460:3:46134:46175	157092	1	True				
ANR	157229	IdentifierDecl	"* value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		157092	0					
ANR	157230	IdentifierDeclType	zval *		157092	0					
ANR	157231	Identifier	value		157092	1					
ANR	157232	AssignmentExpression	"* value = Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		157092	2		=			
ANR	157233	Identifier	value		157092	0					
ANR	157234	CallExpression	"Z_OBJ_HT_P ( z ) -> get ( z , & rv2 )"		157092	1					
ANR	157235	Callee	Z_OBJ_HT_P ( z ) -> get		157092	0					
ANR	157236	PtrMemberAccess	Z_OBJ_HT_P ( z ) -> get		157092	0					
ANR	157237	CallExpression	Z_OBJ_HT_P ( z )		157092	0					
ANR	157238	Callee	Z_OBJ_HT_P		157092	0					
ANR	157239	Identifier	Z_OBJ_HT_P		157092	0					
ANR	157240	ArgumentList	z		157092	1					
ANR	157241	Argument	z		157092	0					
ANR	157242	Identifier	z		157092	0					
ANR	157243	Identifier	get		157092	1					
ANR	157244	ArgumentList	z		157092	1					
ANR	157245	Argument	z		157092	0					
ANR	157246	Identifier	z		157092	0					
ANR	157247	Argument	& rv2		157092	1					
ANR	157248	UnaryOperationExpression	& rv2		157092	0					
ANR	157249	UnaryOperator	&		157092	0					
ANR	157250	Identifier	rv2		157092	1					
ANR	157251	IfStatement	if ( z == & rv )		157092	2					
ANR	157252	Condition	z == & rv	1462:7:46185:46192	157092	0	True				
ANR	157253	EqualityExpression	z == & rv		157092	0		==			
ANR	157254	Identifier	z		157092	0					
ANR	157255	UnaryOperationExpression	& rv		157092	1					
ANR	157256	UnaryOperator	&		157092	0					
ANR	157257	Identifier	rv		157092	1					
ANR	157258	CompoundStatement		18:17:427:427	157092	1					
ANR	157259	ExpressionStatement	zval_ptr_dtor ( & rv )	1463:4:46201:46219	157092	0	True				
ANR	157260	CallExpression	zval_ptr_dtor ( & rv )		157092	0					
ANR	157261	Callee	zval_ptr_dtor		157092	0					
ANR	157262	Identifier	zval_ptr_dtor		157092	0					
ANR	157263	ArgumentList	& rv		157092	1					
ANR	157264	Argument	& rv		157092	0					
ANR	157265	UnaryOperationExpression	& rv		157092	0					
ANR	157266	UnaryOperator	&		157092	0					
ANR	157267	Identifier	rv		157092	1					
ANR	157268	ExpressionStatement	"ZVAL_COPY_VALUE ( z , value )"	1465:3:46229:46254	157092	3	True				
ANR	157269	CallExpression	"ZVAL_COPY_VALUE ( z , value )"		157092	0					
ANR	157270	Callee	ZVAL_COPY_VALUE		157092	0					
ANR	157271	Identifier	ZVAL_COPY_VALUE		157092	0					
ANR	157272	ArgumentList	z		157092	1					
ANR	157273	Argument	z		157092	0					
ANR	157274	Identifier	z		157092	0					
ANR	157275	Argument	value		157092	1					
ANR	157276	Identifier	value		157092	0					
ANR	157277	ExpressionStatement	zptr = z	1467:2:46262:46270	157092	3	True				
ANR	157278	AssignmentExpression	zptr = z		157092	0		=			
ANR	157279	Identifier	zptr		157092	0					
ANR	157280	Identifier	z		157092	1					
ANR	157281	ExpressionStatement	ZVAL_DEREF ( z )	1468:2:46274:46287	157092	4	True				
ANR	157282	CallExpression	ZVAL_DEREF ( z )		157092	0					
ANR	157283	Callee	ZVAL_DEREF		157092	0					
ANR	157284	Identifier	ZVAL_DEREF		157092	0					
ANR	157285	ArgumentList	z		157092	1					
ANR	157286	Argument	z		157092	0					
ANR	157287	Identifier	z		157092	0					
ANR	157288	ExpressionStatement	SEPARATE_ZVAL_NOREF ( z )	1469:2:46291:46313	157092	5	True				
ANR	157289	CallExpression	SEPARATE_ZVAL_NOREF ( z )		157092	0					
ANR	157290	Callee	SEPARATE_ZVAL_NOREF		157092	0					
ANR	157291	Identifier	SEPARATE_ZVAL_NOREF		157092	0					
ANR	157292	ArgumentList	z		157092	1					
ANR	157293	Argument	z		157092	0					
ANR	157294	Identifier	z		157092	0					
ANR	157295	ExpressionStatement	"binary_op ( z , z , value )"	1470:2:46317:46339	157092	6	True				
ANR	157296	CallExpression	"binary_op ( z , z , value )"		157092	0					
ANR	157297	Callee	binary_op		157092	0					
ANR	157298	Identifier	binary_op		157092	0					
ANR	157299	ArgumentList	z		157092	1					
ANR	157300	Argument	z		157092	0					
ANR	157301	Identifier	z		157092	0					
ANR	157302	Argument	z		157092	1					
ANR	157303	Identifier	z		157092	0					
ANR	157304	Argument	value		157092	2					
ANR	157305	Identifier	value		157092	0					
ANR	157306	ExpressionStatement	"Z_OBJ_HT ( obj ) -> write_property ( & obj , property , z , cache_slot )"	1471:2:46343:46403	157092	7	True				
ANR	157307	CallExpression	"Z_OBJ_HT ( obj ) -> write_property ( & obj , property , z , cache_slot )"		157092	0					
ANR	157308	Callee	Z_OBJ_HT ( obj ) -> write_property		157092	0					
ANR	157309	PtrMemberAccess	Z_OBJ_HT ( obj ) -> write_property		157092	0					
ANR	157310	CallExpression	Z_OBJ_HT ( obj )		157092	0					
ANR	157311	Callee	Z_OBJ_HT		157092	0					
ANR	157312	Identifier	Z_OBJ_HT		157092	0					
ANR	157313	ArgumentList	obj		157092	1					
ANR	157314	Argument	obj		157092	0					
ANR	157315	Identifier	obj		157092	0					
ANR	157316	Identifier	write_property		157092	1					
ANR	157317	ArgumentList	& obj		157092	1					
ANR	157318	Argument	& obj		157092	0					
ANR	157319	UnaryOperationExpression	& obj		157092	0					
ANR	157320	UnaryOperator	&		157092	0					
ANR	157321	Identifier	obj		157092	1					
ANR	157322	Argument	property		157092	1					
ANR	157323	Identifier	property		157092	0					
ANR	157324	Argument	z		157092	2					
ANR	157325	Identifier	z		157092	0					
ANR	157326	Argument	cache_slot		157092	3					
ANR	157327	Identifier	cache_slot		157092	0					
ANR	157328	IfStatement	if ( UNEXPECTED ( result ) )		157092	8					
ANR	157329	Condition	UNEXPECTED ( result )	1472:6:46411:46428	157092	0	True				
ANR	157330	CallExpression	UNEXPECTED ( result )		157092	0					
ANR	157331	Callee	UNEXPECTED		157092	0					
ANR	157332	Identifier	UNEXPECTED		157092	0					
ANR	157333	ArgumentList	result		157092	1					
ANR	157334	Argument	result		157092	0					
ANR	157335	Identifier	result		157092	0					
ANR	157336	CompoundStatement		28:26:663:663	157092	1					
ANR	157337	ExpressionStatement	"ZVAL_COPY ( result , z )"	1473:3:46436:46456	157092	0	True				
ANR	157338	CallExpression	"ZVAL_COPY ( result , z )"		157092	0					
ANR	157339	Callee	ZVAL_COPY		157092	0					
ANR	157340	Identifier	ZVAL_COPY		157092	0					
ANR	157341	ArgumentList	result		157092	1					
ANR	157342	Argument	result		157092	0					
ANR	157343	Identifier	result		157092	0					
ANR	157344	Argument	z		157092	1					
ANR	157345	Identifier	z		157092	0					
ANR	157346	ExpressionStatement	zval_ptr_dtor ( zptr )	1475:2:46464:46483	157092	9	True				
ANR	157347	CallExpression	zval_ptr_dtor ( zptr )		157092	0					
ANR	157348	Callee	zval_ptr_dtor		157092	0					
ANR	157349	Identifier	zval_ptr_dtor		157092	0					
ANR	157350	ArgumentList	zptr		157092	1					
ANR	157351	Argument	zptr		157092	0					
ANR	157352	Identifier	zptr		157092	0					
ANR	157353	ElseStatement	else		157092	0					
ANR	157354	CompoundStatement		32:8:725:725	157092	0					
ANR	157355	ExpressionStatement	"zend_error ( E_WARNING , ""Attempt to assign property of non-object"" )"	1477:2:46497:46562	157092	0	True				
ANR	157356	CallExpression	"zend_error ( E_WARNING , ""Attempt to assign property of non-object"" )"		157092	0					
ANR	157357	Callee	zend_error		157092	0					
ANR	157358	Identifier	zend_error		157092	0					
ANR	157359	ArgumentList	E_WARNING		157092	1					
ANR	157360	Argument	E_WARNING		157092	0					
ANR	157361	Identifier	E_WARNING		157092	0					
ANR	157362	Argument	"""Attempt to assign property of non-object"""		157092	1					
ANR	157363	PrimaryExpression	"""Attempt to assign property of non-object"""		157092	0					
ANR	157364	IfStatement	if ( UNEXPECTED ( result ) )		157092	1					
ANR	157365	Condition	UNEXPECTED ( result )	1478:6:46570:46587	157092	0	True				
ANR	157366	CallExpression	UNEXPECTED ( result )		157092	0					
ANR	157367	Callee	UNEXPECTED		157092	0					
ANR	157368	Identifier	UNEXPECTED		157092	0					
ANR	157369	ArgumentList	result		157092	1					
ANR	157370	Argument	result		157092	0					
ANR	157371	Identifier	result		157092	0					
ANR	157372	CompoundStatement		34:26:822:822	157092	1					
ANR	157373	ExpressionStatement	ZVAL_NULL ( result )	1479:3:46595:46612	157092	0	True				
ANR	157374	CallExpression	ZVAL_NULL ( result )		157092	0					
ANR	157375	Callee	ZVAL_NULL		157092	0					
ANR	157376	Identifier	ZVAL_NULL		157092	0					
ANR	157377	ArgumentList	result		157092	1					
ANR	157378	Argument	result		157092	0					
ANR	157379	Identifier	result		157092	0					
ANR	157380	ExpressionStatement	OBJ_RELEASE ( Z_OBJ ( obj ) )	1482:1:46622:46645	157092	6	True				
ANR	157381	CallExpression	OBJ_RELEASE ( Z_OBJ ( obj ) )		157092	0					
ANR	157382	Callee	OBJ_RELEASE		157092	0					
ANR	157383	Identifier	OBJ_RELEASE		157092	0					
ANR	157384	ArgumentList	Z_OBJ ( obj )		157092	1					
ANR	157385	Argument	Z_OBJ ( obj )		157092	0					
ANR	157386	CallExpression	Z_OBJ ( obj )		157092	0					
ANR	157387	Callee	Z_OBJ		157092	0					
ANR	157388	Identifier	Z_OBJ		157092	0					
ANR	157389	ArgumentList	obj		157092	1					
ANR	157390	Argument	obj		157092	0					
ANR	157391	Identifier	obj		157092	0					
ANR	157392	ReturnType	static zend_never_inline void		157092	1					
ANR	157393	Identifier	zend_assign_op_overloaded_property		157092	2					
ANR	157394	ParameterList	"zval * object , zval * property , void * * cache_slot , zval * value , binary_op_type binary_op , zval * result"		157092	3					
ANR	157395	Parameter	zval * object	1444:65:45665:45676	157092	0	True				
ANR	157396	ParameterType	zval *		157092	0					
ANR	157397	Identifier	object		157092	1					
ANR	157398	Parameter	zval * property	1444:79:45679:45692	157092	1	True				
ANR	157399	ParameterType	zval *		157092	0					
ANR	157400	Identifier	property		157092	1					
ANR	157401	Parameter	void * * cache_slot	1444:95:45695:45711	157092	2	True				
ANR	157402	ParameterType	void * *		157092	0					
ANR	157403	Identifier	cache_slot		157092	1					
ANR	157404	Parameter	zval * value	1444:114:45714:45724	157092	3	True				
ANR	157405	ParameterType	zval *		157092	0					
ANR	157406	Identifier	value		157092	1					
ANR	157407	Parameter	binary_op_type binary_op	1444:127:45727:45750	157092	4	True				
ANR	157408	ParameterType	binary_op_type		157092	0					
ANR	157409	Identifier	binary_op		157092	1					
ANR	157410	Parameter	zval * result	1444:153:45753:45764	157092	5	True				
ANR	157411	ParameterType	zval *		157092	0					
ANR	157412	Identifier	result		157092	1					
ANR	157413	CFGEntryNode	ENTRY		157092		True				
ANR	157414	CFGExitNode	EXIT		157092		True				
ANR	157415	Symbol	exception		157092						
ANR	157416	Symbol	rv		157092						
ANR	157417	Symbol	Z_OBJ_P		157092						
ANR	157418	Symbol	Z_OBJ_HT ( obj ) -> read_property		157092						
ANR	157419	Symbol	zptr		157092						
ANR	157420	Symbol	result		157092						
ANR	157421	Symbol	UNEXPECTED		157092						
ANR	157422	Symbol	E_WARNING		157092						
ANR	157423	Symbol	Z_OBJ		157092						
ANR	157424	Symbol	Z_OBJ_HT_P ( z ) -> get		157092						
ANR	157425	Symbol	& rv2		157092						
ANR	157426	Symbol	Z_OBJ_HT		157092						
ANR	157427	Symbol	property		157092						
ANR	157428	Symbol	& obj		157092						
ANR	157429	Symbol	value		157092						
ANR	157430	Symbol	BP_VAR_R		157092						
ANR	157431	Symbol	binary_op		157092						
ANR	157432	Symbol	cache_slot		157092						
ANR	157433	Symbol	EG		157092						
ANR	157434	Symbol	* Z_OBJ_HT		157092						
ANR	157435	Symbol	Z_TYPE_P		157092						
ANR	157436	Symbol	* Z_OBJ_HT_P		157092						
ANR	157437	Symbol	& rv		157092						
ANR	157438	Symbol	rv2		157092						
ANR	157439	Symbol	obj		157092						
ANR	157440	Symbol	Z_OBJ_HT_P		157092						
ANR	157441	Symbol	z		157092						
ANR	157442	Symbol	IS_OBJECT		157092						
ANR	157443	Symbol	EXPECTED		157092						
ANR	157444	Symbol	object		157092						
ANR	157445	Function	zend_extension_statement_handler	1486:0:46689:46876							
ANR	157446	FunctionDef	"zend_extension_statement_handler (const zend_extension * extension , zend_op_array * op_array)"		157445	0					
ANR	157447	CompoundStatement		1487:0:46792:46876	157445	0					
ANR	157448	IfStatement	if ( extension -> statement_handler )		157445	0					
ANR	157449	Condition	extension -> statement_handler	1488:5:46799:46826	157445	0	True				
ANR	157450	PtrMemberAccess	extension -> statement_handler		157445	0					
ANR	157451	Identifier	extension		157445	0					
ANR	157452	Identifier	statement_handler		157445	1					
ANR	157453	CompoundStatement		2:35:36:36	157445	1					
ANR	157454	ExpressionStatement	extension -> statement_handler ( op_array )	1489:2:46833:46871	157445	0	True				
ANR	157455	CallExpression	extension -> statement_handler ( op_array )		157445	0					
ANR	157456	Callee	extension -> statement_handler		157445	0					
ANR	157457	PtrMemberAccess	extension -> statement_handler		157445	0					
ANR	157458	Identifier	extension		157445	0					
ANR	157459	Identifier	statement_handler		157445	1					
ANR	157460	ArgumentList	op_array		157445	1					
ANR	157461	Argument	op_array		157445	0					
ANR	157462	Identifier	op_array		157445	0					
ANR	157463	ReturnType	static void		157445	1					
ANR	157464	Identifier	zend_extension_statement_handler		157445	2					
ANR	157465	ParameterList	"const zend_extension * extension , zend_op_array * op_array"		157445	3					
ANR	157466	Parameter	const zend_extension * extension	1486:45:46734:46764	157445	0	True				
ANR	157467	ParameterType	const zend_extension *		157445	0					
ANR	157468	Identifier	extension		157445	1					
ANR	157469	Parameter	zend_op_array * op_array	1486:78:46767:46789	157445	1	True				
ANR	157470	ParameterType	zend_op_array *		157445	0					
ANR	157471	Identifier	op_array		157445	1					
ANR	157472	CFGEntryNode	ENTRY		157445		True				
ANR	157473	CFGExitNode	EXIT		157445		True				
ANR	157474	Symbol	extension		157445						
ANR	157475	Symbol	extension -> statement_handler		157445						
ANR	157476	Symbol	* extension		157445						
ANR	157477	Symbol	op_array		157445						
ANR	157478	Function	zend_extension_fcall_begin_handler	1494:0:46880:47073							
ANR	157479	FunctionDef	"zend_extension_fcall_begin_handler (const zend_extension * extension , zend_op_array * op_array)"		157478	0					
ANR	157480	CompoundStatement		1495:0:46985:47073	157478	0					
ANR	157481	IfStatement	if ( extension -> fcall_begin_handler )		157478	0					
ANR	157482	Condition	extension -> fcall_begin_handler	1496:5:46992:47021	157478	0	True				
ANR	157483	PtrMemberAccess	extension -> fcall_begin_handler		157478	0					
ANR	157484	Identifier	extension		157478	0					
ANR	157485	Identifier	fcall_begin_handler		157478	1					
ANR	157486	CompoundStatement		2:37:38:38	157478	1					
ANR	157487	ExpressionStatement	extension -> fcall_begin_handler ( op_array )	1497:2:47028:47068	157478	0	True				
ANR	157488	CallExpression	extension -> fcall_begin_handler ( op_array )		157478	0					
ANR	157489	Callee	extension -> fcall_begin_handler		157478	0					
ANR	157490	PtrMemberAccess	extension -> fcall_begin_handler		157478	0					
ANR	157491	Identifier	extension		157478	0					
ANR	157492	Identifier	fcall_begin_handler		157478	1					
ANR	157493	ArgumentList	op_array		157478	1					
ANR	157494	Argument	op_array		157478	0					
ANR	157495	Identifier	op_array		157478	0					
ANR	157496	ReturnType	static void		157478	1					
ANR	157497	Identifier	zend_extension_fcall_begin_handler		157478	2					
ANR	157498	ParameterList	"const zend_extension * extension , zend_op_array * op_array"		157478	3					
ANR	157499	Parameter	const zend_extension * extension	1494:47:46927:46957	157478	0	True				
ANR	157500	ParameterType	const zend_extension *		157478	0					
ANR	157501	Identifier	extension		157478	1					
ANR	157502	Parameter	zend_op_array * op_array	1494:80:46960:46982	157478	1	True				
ANR	157503	ParameterType	zend_op_array *		157478	0					
ANR	157504	Identifier	op_array		157478	1					
ANR	157505	CFGEntryNode	ENTRY		157478		True				
ANR	157506	CFGExitNode	EXIT		157478		True				
ANR	157507	Symbol	extension		157478						
ANR	157508	Symbol	extension -> fcall_begin_handler		157478						
ANR	157509	Symbol	* extension		157478						
ANR	157510	Symbol	op_array		157478						
ANR	157511	Function	zend_extension_fcall_end_handler	1502:0:47077:47264							
ANR	157512	FunctionDef	"zend_extension_fcall_end_handler (const zend_extension * extension , zend_op_array * op_array)"		157511	0					
ANR	157513	CompoundStatement		1503:0:47180:47264	157511	0					
ANR	157514	IfStatement	if ( extension -> fcall_end_handler )		157511	0					
ANR	157515	Condition	extension -> fcall_end_handler	1504:5:47187:47214	157511	0	True				
ANR	157516	PtrMemberAccess	extension -> fcall_end_handler		157511	0					
ANR	157517	Identifier	extension		157511	0					
ANR	157518	Identifier	fcall_end_handler		157511	1					
ANR	157519	CompoundStatement		2:35:36:36	157511	1					
ANR	157520	ExpressionStatement	extension -> fcall_end_handler ( op_array )	1505:2:47221:47259	157511	0	True				
ANR	157521	CallExpression	extension -> fcall_end_handler ( op_array )		157511	0					
ANR	157522	Callee	extension -> fcall_end_handler		157511	0					
ANR	157523	PtrMemberAccess	extension -> fcall_end_handler		157511	0					
ANR	157524	Identifier	extension		157511	0					
ANR	157525	Identifier	fcall_end_handler		157511	1					
ANR	157526	ArgumentList	op_array		157511	1					
ANR	157527	Argument	op_array		157511	0					
ANR	157528	Identifier	op_array		157511	0					
ANR	157529	ReturnType	static void		157511	1					
ANR	157530	Identifier	zend_extension_fcall_end_handler		157511	2					
ANR	157531	ParameterList	"const zend_extension * extension , zend_op_array * op_array"		157511	3					
ANR	157532	Parameter	const zend_extension * extension	1502:45:47122:47152	157511	0	True				
ANR	157533	ParameterType	const zend_extension *		157511	0					
ANR	157534	Identifier	extension		157511	1					
ANR	157535	Parameter	zend_op_array * op_array	1502:78:47155:47177	157511	1	True				
ANR	157536	ParameterType	zend_op_array *		157511	0					
ANR	157537	Identifier	op_array		157511	1					
ANR	157538	CFGEntryNode	ENTRY		157511		True				
ANR	157539	CFGExitNode	EXIT		157511		True				
ANR	157540	Symbol	extension		157511						
ANR	157541	Symbol	* extension		157511						
ANR	157542	Symbol	extension -> fcall_end_handler		157511						
ANR	157543	Symbol	op_array		157511						
ANR	157544	Function	zend_get_target_symbol_table	1510:0:47268:48028							
ANR	157545	FunctionDef	"zend_get_target_symbol_table (zend_execute_data * execute_data , int fetch_type)"		157544	0					
ANR	157546	CompoundStatement		1511:0:47383:48028	157544	0					
ANR	157547	IdentifierDeclStatement	HashTable * ht ;	1512:1:47386:47399	157544	0	True				
ANR	157548	IdentifierDecl	* ht		157544	0					
ANR	157549	IdentifierDeclType	HashTable *		157544	0					
ANR	157550	Identifier	ht		157544	1					
ANR	157551	IfStatement	if ( EXPECTED ( fetch_type == ZEND_FETCH_GLOBAL_LOCK ) || EXPECTED ( fetch_type == ZEND_FETCH_GLOBAL ) )		157544	1					
ANR	157552	Condition	EXPECTED ( fetch_type == ZEND_FETCH_GLOBAL_LOCK ) || EXPECTED ( fetch_type == ZEND_FETCH_GLOBAL )	1514:5:47407:47502	157544	0	True				
ANR	157553	OrExpression	EXPECTED ( fetch_type == ZEND_FETCH_GLOBAL_LOCK ) || EXPECTED ( fetch_type == ZEND_FETCH_GLOBAL )		157544	0		||			
ANR	157554	CallExpression	EXPECTED ( fetch_type == ZEND_FETCH_GLOBAL_LOCK )		157544	0					
ANR	157555	Callee	EXPECTED		157544	0					
ANR	157556	Identifier	EXPECTED		157544	0					
ANR	157557	ArgumentList	fetch_type == ZEND_FETCH_GLOBAL_LOCK		157544	1					
ANR	157558	Argument	fetch_type == ZEND_FETCH_GLOBAL_LOCK		157544	0					
ANR	157559	EqualityExpression	fetch_type == ZEND_FETCH_GLOBAL_LOCK		157544	0		==			
ANR	157560	Identifier	fetch_type		157544	0					
ANR	157561	Identifier	ZEND_FETCH_GLOBAL_LOCK		157544	1					
ANR	157562	CallExpression	EXPECTED ( fetch_type == ZEND_FETCH_GLOBAL )		157544	1					
ANR	157563	Callee	EXPECTED		157544	0					
ANR	157564	Identifier	EXPECTED		157544	0					
ANR	157565	ArgumentList	fetch_type == ZEND_FETCH_GLOBAL		157544	1					
ANR	157566	Argument	fetch_type == ZEND_FETCH_GLOBAL		157544	0					
ANR	157567	EqualityExpression	fetch_type == ZEND_FETCH_GLOBAL		157544	0		==			
ANR	157568	Identifier	fetch_type		157544	0					
ANR	157569	Identifier	ZEND_FETCH_GLOBAL		157544	1					
ANR	157570	CompoundStatement		5:48:121:121	157544	1					
ANR	157571	ExpressionStatement	ht = & EG ( symbol_table )	1516:2:47509:47531	157544	0	True				
ANR	157572	AssignmentExpression	ht = & EG ( symbol_table )		157544	0		=			
ANR	157573	Identifier	ht		157544	0					
ANR	157574	UnaryOperationExpression	& EG ( symbol_table )		157544	1					
ANR	157575	UnaryOperator	&		157544	0					
ANR	157576	CallExpression	EG ( symbol_table )		157544	1					
ANR	157577	Callee	EG		157544	0					
ANR	157578	Identifier	EG		157544	0					
ANR	157579	ArgumentList	symbol_table		157544	1					
ANR	157580	Argument	symbol_table		157544	0					
ANR	157581	Identifier	symbol_table		157544	0					
ANR	157582	ElseStatement	else		157544	0					
ANR	157583	IfStatement	if ( EXPECTED ( fetch_type == ZEND_FETCH_STATIC ) )		157544	0					
ANR	157584	Condition	EXPECTED ( fetch_type == ZEND_FETCH_STATIC )	1517:12:47545:47585	157544	0	True				
ANR	157585	CallExpression	EXPECTED ( fetch_type == ZEND_FETCH_STATIC )		157544	0					
ANR	157586	Callee	EXPECTED		157544	0					
ANR	157587	Identifier	EXPECTED		157544	0					
ANR	157588	ArgumentList	fetch_type == ZEND_FETCH_STATIC		157544	1					
ANR	157589	Argument	fetch_type == ZEND_FETCH_STATIC		157544	0					
ANR	157590	EqualityExpression	fetch_type == ZEND_FETCH_STATIC		157544	0		==			
ANR	157591	Identifier	fetch_type		157544	0					
ANR	157592	Identifier	ZEND_FETCH_STATIC		157544	1					
ANR	157593	CompoundStatement		7:55:204:204	157544	1					
ANR	157594	ExpressionStatement	ZEND_ASSERT ( EX ( func ) -> op_array . static_variables != NULL )	1518:2:47592:47648	157544	0	True				
ANR	157595	CallExpression	ZEND_ASSERT ( EX ( func ) -> op_array . static_variables != NULL )		157544	0					
ANR	157596	Callee	ZEND_ASSERT		157544	0					
ANR	157597	Identifier	ZEND_ASSERT		157544	0					
ANR	157598	ArgumentList	EX ( func ) -> op_array . static_variables != NULL		157544	1					
ANR	157599	Argument	EX ( func ) -> op_array . static_variables != NULL		157544	0					
ANR	157600	EqualityExpression	EX ( func ) -> op_array . static_variables != NULL		157544	0		!=			
ANR	157601	MemberAccess	EX ( func ) -> op_array . static_variables		157544	0					
ANR	157602	PtrMemberAccess	EX ( func ) -> op_array		157544	0					
ANR	157603	CallExpression	EX ( func )		157544	0					
ANR	157604	Callee	EX		157544	0					
ANR	157605	Identifier	EX		157544	0					
ANR	157606	ArgumentList	func		157544	1					
ANR	157607	Argument	func		157544	0					
ANR	157608	Identifier	func		157544	0					
ANR	157609	Identifier	op_array		157544	1					
ANR	157610	Identifier	static_variables		157544	1					
ANR	157611	Identifier	NULL		157544	1					
ANR	157612	ExpressionStatement	ht = EX ( func ) -> op_array . static_variables	1519:2:47652:47692	157544	1	True				
ANR	157613	AssignmentExpression	ht = EX ( func ) -> op_array . static_variables		157544	0		=			
ANR	157614	Identifier	ht		157544	0					
ANR	157615	MemberAccess	EX ( func ) -> op_array . static_variables		157544	1					
ANR	157616	PtrMemberAccess	EX ( func ) -> op_array		157544	0					
ANR	157617	CallExpression	EX ( func )		157544	0					
ANR	157618	Callee	EX		157544	0					
ANR	157619	Identifier	EX		157544	0					
ANR	157620	ArgumentList	func		157544	1					
ANR	157621	Argument	func		157544	0					
ANR	157622	Identifier	func		157544	0					
ANR	157623	Identifier	op_array		157544	1					
ANR	157624	Identifier	static_variables		157544	1					
ANR	157625	IfStatement	if ( GC_REFCOUNT ( ht ) > 1 )		157544	2					
ANR	157626	Condition	GC_REFCOUNT ( ht ) > 1	1520:6:47700:47718	157544	0	True				
ANR	157627	RelationalExpression	GC_REFCOUNT ( ht ) > 1		157544	0		>			
ANR	157628	CallExpression	GC_REFCOUNT ( ht )		157544	0					
ANR	157629	Callee	GC_REFCOUNT		157544	0					
ANR	157630	Identifier	GC_REFCOUNT		157544	0					
ANR	157631	ArgumentList	ht		157544	1					
ANR	157632	Argument	ht		157544	0					
ANR	157633	Identifier	ht		157544	0					
ANR	157634	PrimaryExpression	1		157544	1					
ANR	157635	CompoundStatement		10:27:337:337	157544	1					
ANR	157636	IfStatement	if ( ! ( GC_FLAGS ( ht ) & IS_ARRAY_IMMUTABLE ) )		157544	0					
ANR	157637	Condition	! ( GC_FLAGS ( ht ) & IS_ARRAY_IMMUTABLE )	1521:7:47730:47765	157544	0	True				
ANR	157638	UnaryOperationExpression	! ( GC_FLAGS ( ht ) & IS_ARRAY_IMMUTABLE )		157544	0					
ANR	157639	UnaryOperator	!		157544	0					
ANR	157640	BitAndExpression	GC_FLAGS ( ht ) & IS_ARRAY_IMMUTABLE		157544	1		&			
ANR	157641	CallExpression	GC_FLAGS ( ht )		157544	0					
ANR	157642	Callee	GC_FLAGS		157544	0					
ANR	157643	Identifier	GC_FLAGS		157544	0					
ANR	157644	ArgumentList	ht		157544	1					
ANR	157645	Argument	ht		157544	0					
ANR	157646	Identifier	ht		157544	0					
ANR	157647	Identifier	IS_ARRAY_IMMUTABLE		157544	1					
ANR	157648	CompoundStatement		11:45:384:384	157544	1					
ANR	157649	ExpressionStatement	GC_REFCOUNT ( ht ) --	1522:4:47774:47791	157544	0	True				
ANR	157650	PostIncDecOperationExpression	GC_REFCOUNT ( ht ) --		157544	0					
ANR	157651	CallExpression	GC_REFCOUNT ( ht )		157544	0					
ANR	157652	Callee	GC_REFCOUNT		157544	0					
ANR	157653	Identifier	GC_REFCOUNT		157544	0					
ANR	157654	ArgumentList	ht		157544	1					
ANR	157655	Argument	ht		157544	0					
ANR	157656	Identifier	ht		157544	0					
ANR	157657	IncDec	--		157544	1					
ANR	157658	ExpressionStatement	EX ( func ) -> op_array . static_variables = ht = zend_array_dup ( ht )	1524:3:47801:47862	157544	1	True				
ANR	157659	AssignmentExpression	EX ( func ) -> op_array . static_variables = ht = zend_array_dup ( ht )		157544	0		=			
ANR	157660	MemberAccess	EX ( func ) -> op_array . static_variables		157544	0					
ANR	157661	PtrMemberAccess	EX ( func ) -> op_array		157544	0					
ANR	157662	CallExpression	EX ( func )		157544	0					
ANR	157663	Callee	EX		157544	0					
ANR	157664	Identifier	EX		157544	0					
ANR	157665	ArgumentList	func		157544	1					
ANR	157666	Argument	func		157544	0					
ANR	157667	Identifier	func		157544	0					
ANR	157668	Identifier	op_array		157544	1					
ANR	157669	Identifier	static_variables		157544	1					
ANR	157670	AssignmentExpression	ht = zend_array_dup ( ht )		157544	1		=			
ANR	157671	Identifier	ht		157544	0					
ANR	157672	CallExpression	zend_array_dup ( ht )		157544	1					
ANR	157673	Callee	zend_array_dup		157544	0					
ANR	157674	Identifier	zend_array_dup		157544	0					
ANR	157675	ArgumentList	ht		157544	1					
ANR	157676	Argument	ht		157544	0					
ANR	157677	Identifier	ht		157544	0					
ANR	157678	ElseStatement	else		157544	0					
ANR	157679	CompoundStatement		16:8:492:492	157544	0					
ANR	157680	ExpressionStatement	ZEND_ASSERT ( fetch_type == ZEND_FETCH_LOCAL )	1527:2:47880:47923	157544	0	True				
ANR	157681	CallExpression	ZEND_ASSERT ( fetch_type == ZEND_FETCH_LOCAL )		157544	0					
ANR	157682	Callee	ZEND_ASSERT		157544	0					
ANR	157683	Identifier	ZEND_ASSERT		157544	0					
ANR	157684	ArgumentList	fetch_type == ZEND_FETCH_LOCAL		157544	1					
ANR	157685	Argument	fetch_type == ZEND_FETCH_LOCAL		157544	0					
ANR	157686	EqualityExpression	fetch_type == ZEND_FETCH_LOCAL		157544	0		==			
ANR	157687	Identifier	fetch_type		157544	0					
ANR	157688	Identifier	ZEND_FETCH_LOCAL		157544	1					
ANR	157689	IfStatement	if ( ! EX ( symbol_table ) )		157544	1					
ANR	157690	Condition	! EX ( symbol_table )	1528:6:47931:47947	157544	0	True				
ANR	157691	UnaryOperationExpression	! EX ( symbol_table )		157544	0					
ANR	157692	UnaryOperator	!		157544	0					
ANR	157693	CallExpression	EX ( symbol_table )		157544	1					
ANR	157694	Callee	EX		157544	0					
ANR	157695	Identifier	EX		157544	0					
ANR	157696	ArgumentList	symbol_table		157544	1					
ANR	157697	Argument	symbol_table		157544	0					
ANR	157698	Identifier	symbol_table		157544	0					
ANR	157699	CompoundStatement		18:25:566:566	157544	1					
ANR	157700	ExpressionStatement	zend_rebuild_symbol_table ( )	1529:3:47955:47982	157544	0	True				
ANR	157701	CallExpression	zend_rebuild_symbol_table ( )		157544	0					
ANR	157702	Callee	zend_rebuild_symbol_table		157544	0					
ANR	157703	Identifier	zend_rebuild_symbol_table		157544	0					
ANR	157704	ArgumentList			157544	1					
ANR	157705	ExpressionStatement	ht = EX ( symbol_table )	1531:2:47990:48011	157544	2	True				
ANR	157706	AssignmentExpression	ht = EX ( symbol_table )		157544	0		=			
ANR	157707	Identifier	ht		157544	0					
ANR	157708	CallExpression	EX ( symbol_table )		157544	1					
ANR	157709	Callee	EX		157544	0					
ANR	157710	Identifier	EX		157544	0					
ANR	157711	ArgumentList	symbol_table		157544	1					
ANR	157712	Argument	symbol_table		157544	0					
ANR	157713	Identifier	symbol_table		157544	0					
ANR	157714	ReturnStatement	return ht ;	1533:1:48017:48026	157544	2	True				
ANR	157715	Identifier	ht		157544	0					
ANR	157716	ReturnType	static zend_always_inline HashTable *		157544	1					
ANR	157717	Identifier	zend_get_target_symbol_table		157544	2					
ANR	157718	ParameterList	"zend_execute_data * execute_data , int fetch_type"		157544	3					
ANR	157719	Parameter	zend_execute_data * execute_data	1510:66:47334:47364	157544	0	True				
ANR	157720	ParameterType	zend_execute_data *		157544	0					
ANR	157721	Identifier	execute_data		157544	1					
ANR	157722	Parameter	int fetch_type	1510:99:47367:47380	157544	1	True				
ANR	157723	ParameterType	int		157544	0					
ANR	157724	Identifier	fetch_type		157544	1					
ANR	157725	CFGEntryNode	ENTRY		157544		True				
ANR	157726	CFGExitNode	EXIT		157544		True				
ANR	157727	Symbol	ZEND_FETCH_GLOBAL		157544						
ANR	157728	Symbol	fetch_type		157544						
ANR	157729	Symbol	NULL		157544						
ANR	157730	Symbol	ZEND_FETCH_LOCAL		157544						
ANR	157731	Symbol	symbol_table		157544						
ANR	157732	Symbol	GC_FLAGS		157544						
ANR	157733	Symbol	IS_ARRAY_IMMUTABLE		157544						
ANR	157734	Symbol	ht		157544						
ANR	157735	Symbol	& EG		157544						
ANR	157736	Symbol	execute_data		157544						
ANR	157737	Symbol	EX ( func ) -> op_array		157544						
ANR	157738	Symbol	EX ( func ) -> op_array . static_variables		157544						
ANR	157739	Symbol	EX		157544						
ANR	157740	Symbol	func		157544						
ANR	157741	Symbol	ZEND_FETCH_GLOBAL_LOCK		157544						
ANR	157742	Symbol	ZEND_FETCH_STATIC		157544						
ANR	157743	Symbol	* EX		157544						
ANR	157744	Symbol	EXPECTED		157544						
ANR	157745	Symbol	GC_REFCOUNT		157544						
ANR	157746	Symbol	zend_array_dup		157544						
ANR	157747	Function	zend_fetch_dimension_address_inner	1536:0:48031:51106							
ANR	157748	FunctionDef	"zend_fetch_dimension_address_inner (HashTable * ht , const zval * dim , int dim_type , int type)"		157747	0					
ANR	157749	CompoundStatement		1537:0:48154:51106	157747	0					
ANR	157750	IdentifierDeclStatement	zval * retval ;	1538:1:48157:48169	157747	0	True				
ANR	157751	IdentifierDecl	* retval		157747	0					
ANR	157752	IdentifierDeclType	zval *		157747	0					
ANR	157753	Identifier	retval		157747	1					
ANR	157754	IdentifierDeclStatement	zend_string * offset_key ;	1539:1:48172:48195	157747	1	True				
ANR	157755	IdentifierDecl	* offset_key		157747	0					
ANR	157756	IdentifierDeclType	zend_string *		157747	0					
ANR	157757	Identifier	offset_key		157747	1					
ANR	157758	IdentifierDeclStatement	zend_ulong hval ;	1540:1:48198:48213	157747	2	True				
ANR	157759	IdentifierDecl	hval		157747	0					
ANR	157760	IdentifierDeclType	zend_ulong		157747	0					
ANR	157761	Identifier	hval		157747	1					
ANR	157762	Label	try_again :	1542:0:48216:48225	157747	3	True				
ANR	157763	Identifier	try_again		157747	0					
ANR	157764	IfStatement	if ( EXPECTED ( Z_TYPE_P ( dim ) == IS_LONG ) )		157747	4					
ANR	157765	Condition	EXPECTED ( Z_TYPE_P ( dim ) == IS_LONG )	1543:5:48232:48265	157747	0	True				
ANR	157766	CallExpression	EXPECTED ( Z_TYPE_P ( dim ) == IS_LONG )		157747	0					
ANR	157767	Callee	EXPECTED		157747	0					
ANR	157768	Identifier	EXPECTED		157747	0					
ANR	157769	ArgumentList	Z_TYPE_P ( dim ) == IS_LONG		157747	1					
ANR	157770	Argument	Z_TYPE_P ( dim ) == IS_LONG		157747	0					
ANR	157771	EqualityExpression	Z_TYPE_P ( dim ) == IS_LONG		157747	0		==			
ANR	157772	CallExpression	Z_TYPE_P ( dim )		157747	0					
ANR	157773	Callee	Z_TYPE_P		157747	0					
ANR	157774	Identifier	Z_TYPE_P		157747	0					
ANR	157775	ArgumentList	dim		157747	1					
ANR	157776	Argument	dim		157747	0					
ANR	157777	Identifier	dim		157747	0					
ANR	157778	Identifier	IS_LONG		157747	1					
ANR	157779	CompoundStatement		7:41:113:113	157747	1					
ANR	157780	ExpressionStatement	hval = Z_LVAL_P ( dim )	1544:2:48272:48292	157747	0	True				
ANR	157781	AssignmentExpression	hval = Z_LVAL_P ( dim )		157747	0		=			
ANR	157782	Identifier	hval		157747	0					
ANR	157783	CallExpression	Z_LVAL_P ( dim )		157747	1					
ANR	157784	Callee	Z_LVAL_P		157747	0					
ANR	157785	Identifier	Z_LVAL_P		157747	0					
ANR	157786	ArgumentList	dim		157747	1					
ANR	157787	Argument	dim		157747	0					
ANR	157788	Identifier	dim		157747	0					
ANR	157789	Label	num_index :	1545:0:48294:48303	157747	1	True				
ANR	157790	Identifier	num_index		157747	0					
ANR	157791	ExpressionStatement	"retval = zend_hash_index_find ( ht , hval )"	1546:2:48307:48346	157747	2	True				
ANR	157792	AssignmentExpression	"retval = zend_hash_index_find ( ht , hval )"		157747	0		=			
ANR	157793	Identifier	retval		157747	0					
ANR	157794	CallExpression	"zend_hash_index_find ( ht , hval )"		157747	1					
ANR	157795	Callee	zend_hash_index_find		157747	0					
ANR	157796	Identifier	zend_hash_index_find		157747	0					
ANR	157797	ArgumentList	ht		157747	1					
ANR	157798	Argument	ht		157747	0					
ANR	157799	Identifier	ht		157747	0					
ANR	157800	Argument	hval		157747	1					
ANR	157801	Identifier	hval		157747	0					
ANR	157802	IfStatement	if ( retval == NULL )		157747	3					
ANR	157803	Condition	retval == NULL	1547:6:48354:48367	157747	0	True				
ANR	157804	EqualityExpression	retval == NULL		157747	0		==			
ANR	157805	Identifier	retval		157747	0					
ANR	157806	Identifier	NULL		157747	1					
ANR	157807	CompoundStatement		11:22:215:215	157747	1					
ANR	157808	SwitchStatement	switch ( type )		157747	0					
ANR	157809	Condition	type	1548:11:48383:48386	157747	0	True				
ANR	157810	Identifier	type		157747	0					
ANR	157811	CompoundStatement		12:17:234:234	157747	1					
ANR	157812	Label	case BP_VAR_R :	1549:4:48395:48408	157747	0	True				
ANR	157813	Identifier	BP_VAR_R		157747	0					
ANR	157814	Statement	zend_error	1550:5:48415:48424	157747	1	True				
ANR	157815	Statement	(	1550:15:48425:48425	157747	2	True				
ANR	157816	Statement	E_NOTICE	1550:16:48426:48433	157747	3	True				
ANR	157817	Statement	","	1550:24:48434:48434	157747	4	True				
ANR	157818	Statement	"""Undefined offset: """	1550:25:48435:48454	157747	5	True				
ANR	157819	Statement	ZEND_LONG_FMT	1550:46:48456:48468	157747	6	True				
ANR	157820	Statement	","	1550:59:48469:48469	157747	7	True				
ANR	157821	Statement	hval	1550:61:48471:48474	157747	8	True				
ANR	157822	Statement	)	1550:65:48475:48475	157747	9	True				
ANR	157823	ExpressionStatement		1550:66:48476:48476	157747	10	True				
ANR	157824	Label	case BP_VAR_UNSET :	1552:4:48521:48538	157747	11	True				
ANR	157825	Identifier	BP_VAR_UNSET		157747	0					
ANR	157826	Label	case BP_VAR_IS :	1553:4:48544:48558	157747	12	True				
ANR	157827	Identifier	BP_VAR_IS		157747	0					
ANR	157828	ExpressionStatement	retval = & EG ( uninitialized_zval )	1554:5:48565:48597	157747	13	True				
ANR	157829	AssignmentExpression	retval = & EG ( uninitialized_zval )		157747	0		=			
ANR	157830	Identifier	retval		157747	0					
ANR	157831	UnaryOperationExpression	& EG ( uninitialized_zval )		157747	1					
ANR	157832	UnaryOperator	&		157747	0					
ANR	157833	CallExpression	EG ( uninitialized_zval )		157747	1					
ANR	157834	Callee	EG		157747	0					
ANR	157835	Identifier	EG		157747	0					
ANR	157836	ArgumentList	uninitialized_zval		157747	1					
ANR	157837	Argument	uninitialized_zval		157747	0					
ANR	157838	Identifier	uninitialized_zval		157747	0					
ANR	157839	BreakStatement	break ;	1555:5:48604:48609	157747	14	True				
ANR	157840	Label	case BP_VAR_RW :	1556:4:48615:48629	157747	15	True				
ANR	157841	Identifier	BP_VAR_RW		157747	0					
ANR	157842	Statement	zend_error	1557:5:48636:48645	157747	16	True				
ANR	157843	Statement	(	1557:15:48646:48646	157747	17	True				
ANR	157844	Statement	E_NOTICE	1557:16:48647:48654	157747	18	True				
ANR	157845	Statement	","	1557:24:48655:48655	157747	19	True				
ANR	157846	Statement	"""Undefined offset: """	1557:25:48656:48675	157747	20	True				
ANR	157847	Statement	ZEND_LONG_FMT	1557:46:48677:48689	157747	21	True				
ANR	157848	Statement	","	1557:59:48690:48690	157747	22	True				
ANR	157849	Statement	hval	1557:61:48692:48695	157747	23	True				
ANR	157850	Statement	)	1557:65:48696:48696	157747	24	True				
ANR	157851	ExpressionStatement		1557:66:48697:48697	157747	25	True				
ANR	157852	ExpressionStatement	"retval = zend_hash_index_update ( ht , hval , & EG ( uninitialized_zval ) )"	1558:5:48704:48770	157747	26	True				
ANR	157853	AssignmentExpression	"retval = zend_hash_index_update ( ht , hval , & EG ( uninitialized_zval ) )"		157747	0		=			
ANR	157854	Identifier	retval		157747	0					
ANR	157855	CallExpression	"zend_hash_index_update ( ht , hval , & EG ( uninitialized_zval ) )"		157747	1					
ANR	157856	Callee	zend_hash_index_update		157747	0					
ANR	157857	Identifier	zend_hash_index_update		157747	0					
ANR	157858	ArgumentList	ht		157747	1					
ANR	157859	Argument	ht		157747	0					
ANR	157860	Identifier	ht		157747	0					
ANR	157861	Argument	hval		157747	1					
ANR	157862	Identifier	hval		157747	0					
ANR	157863	Argument	& EG ( uninitialized_zval )		157747	2					
ANR	157864	UnaryOperationExpression	& EG ( uninitialized_zval )		157747	0					
ANR	157865	UnaryOperator	&		157747	0					
ANR	157866	CallExpression	EG ( uninitialized_zval )		157747	1					
ANR	157867	Callee	EG		157747	0					
ANR	157868	Identifier	EG		157747	0					
ANR	157869	ArgumentList	uninitialized_zval		157747	1					
ANR	157870	Argument	uninitialized_zval		157747	0					
ANR	157871	Identifier	uninitialized_zval		157747	0					
ANR	157872	BreakStatement	break ;	1559:5:48777:48782	157747	27	True				
ANR	157873	Label	case BP_VAR_W :	1560:4:48788:48801	157747	28	True				
ANR	157874	Identifier	BP_VAR_W		157747	0					
ANR	157875	ExpressionStatement	"retval = zend_hash_index_add_new ( ht , hval , & EG ( uninitialized_zval ) )"	1561:5:48808:48875	157747	29	True				
ANR	157876	AssignmentExpression	"retval = zend_hash_index_add_new ( ht , hval , & EG ( uninitialized_zval ) )"		157747	0		=			
ANR	157877	Identifier	retval		157747	0					
ANR	157878	CallExpression	"zend_hash_index_add_new ( ht , hval , & EG ( uninitialized_zval ) )"		157747	1					
ANR	157879	Callee	zend_hash_index_add_new		157747	0					
ANR	157880	Identifier	zend_hash_index_add_new		157747	0					
ANR	157881	ArgumentList	ht		157747	1					
ANR	157882	Argument	ht		157747	0					
ANR	157883	Identifier	ht		157747	0					
ANR	157884	Argument	hval		157747	1					
ANR	157885	Identifier	hval		157747	0					
ANR	157886	Argument	& EG ( uninitialized_zval )		157747	2					
ANR	157887	UnaryOperationExpression	& EG ( uninitialized_zval )		157747	0					
ANR	157888	UnaryOperator	&		157747	0					
ANR	157889	CallExpression	EG ( uninitialized_zval )		157747	1					
ANR	157890	Callee	EG		157747	0					
ANR	157891	Identifier	EG		157747	0					
ANR	157892	ArgumentList	uninitialized_zval		157747	1					
ANR	157893	Argument	uninitialized_zval		157747	0					
ANR	157894	Identifier	uninitialized_zval		157747	0					
ANR	157895	BreakStatement	break ;	1562:5:48882:48887	157747	30	True				
ANR	157896	ElseStatement	else		157747	0					
ANR	157897	IfStatement	if ( EXPECTED ( Z_TYPE_P ( dim ) == IS_STRING ) )		157747	0					
ANR	157898	Condition	EXPECTED ( Z_TYPE_P ( dim ) == IS_STRING )	1565:12:48910:48945	157747	0	True				
ANR	157899	CallExpression	EXPECTED ( Z_TYPE_P ( dim ) == IS_STRING )		157747	0					
ANR	157900	Callee	EXPECTED		157747	0					
ANR	157901	Identifier	EXPECTED		157747	0					
ANR	157902	ArgumentList	Z_TYPE_P ( dim ) == IS_STRING		157747	1					
ANR	157903	Argument	Z_TYPE_P ( dim ) == IS_STRING		157747	0					
ANR	157904	EqualityExpression	Z_TYPE_P ( dim ) == IS_STRING		157747	0		==			
ANR	157905	CallExpression	Z_TYPE_P ( dim )		157747	0					
ANR	157906	Callee	Z_TYPE_P		157747	0					
ANR	157907	Identifier	Z_TYPE_P		157747	0					
ANR	157908	ArgumentList	dim		157747	1					
ANR	157909	Argument	dim		157747	0					
ANR	157910	Identifier	dim		157747	0					
ANR	157911	Identifier	IS_STRING		157747	1					
ANR	157912	CompoundStatement		29:50:793:793	157747	1					
ANR	157913	ExpressionStatement	offset_key = Z_STR_P ( dim )	1566:2:48952:48977	157747	0	True				
ANR	157914	AssignmentExpression	offset_key = Z_STR_P ( dim )		157747	0		=			
ANR	157915	Identifier	offset_key		157747	0					
ANR	157916	CallExpression	Z_STR_P ( dim )		157747	1					
ANR	157917	Callee	Z_STR_P		157747	0					
ANR	157918	Identifier	Z_STR_P		157747	0					
ANR	157919	ArgumentList	dim		157747	1					
ANR	157920	Argument	dim		157747	0					
ANR	157921	Identifier	dim		157747	0					
ANR	157922	IfStatement	if ( dim_type != IS_CONST )		157747	1					
ANR	157923	Condition	dim_type != IS_CONST	1567:6:48985:49004	157747	0	True				
ANR	157924	EqualityExpression	dim_type != IS_CONST		157747	0		!=			
ANR	157925	Identifier	dim_type		157747	0					
ANR	157926	Identifier	IS_CONST		157747	1					
ANR	157927	CompoundStatement		31:28:852:852	157747	1					
ANR	157928	IfStatement	"if ( ZEND_HANDLE_NUMERIC ( offset_key , hval ) )"		157747	0					
ANR	157929	Condition	"ZEND_HANDLE_NUMERIC ( offset_key , hval )"	1568:7:49016:49052	157747	0	True				
ANR	157930	CallExpression	"ZEND_HANDLE_NUMERIC ( offset_key , hval )"		157747	0					
ANR	157931	Callee	ZEND_HANDLE_NUMERIC		157747	0					
ANR	157932	Identifier	ZEND_HANDLE_NUMERIC		157747	0					
ANR	157933	ArgumentList	offset_key		157747	1					
ANR	157934	Argument	offset_key		157747	0					
ANR	157935	Identifier	offset_key		157747	0					
ANR	157936	Argument	hval		157747	1					
ANR	157937	Identifier	hval		157747	0					
ANR	157938	CompoundStatement		32:46:900:900	157747	1					
ANR	157939	GotoStatement	goto num_index ;	1569:4:49061:49075	157747	0	True				
ANR	157940	Identifier	num_index		157747	0					
ANR	157941	Label	str_index :	1572:0:49086:49095	157747	2	True				
ANR	157942	Identifier	str_index		157747	0					
ANR	157943	ExpressionStatement	"retval = zend_hash_find ( ht , offset_key )"	1573:2:49099:49138	157747	3	True				
ANR	157944	AssignmentExpression	"retval = zend_hash_find ( ht , offset_key )"		157747	0		=			
ANR	157945	Identifier	retval		157747	0					
ANR	157946	CallExpression	"zend_hash_find ( ht , offset_key )"		157747	1					
ANR	157947	Callee	zend_hash_find		157747	0					
ANR	157948	Identifier	zend_hash_find		157747	0					
ANR	157949	ArgumentList	ht		157747	1					
ANR	157950	Argument	ht		157747	0					
ANR	157951	Identifier	ht		157747	0					
ANR	157952	Argument	offset_key		157747	1					
ANR	157953	Identifier	offset_key		157747	0					
ANR	157954	IfStatement	if ( retval )		157747	4					
ANR	157955	Condition	retval	1574:6:49146:49151	157747	0	True				
ANR	157956	Identifier	retval		157747	0					
ANR	157957	CompoundStatement		38:14:999:999	157747	1					
ANR	157958	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( retval ) == IS_INDIRECT ) )		157747	0					
ANR	157959	Condition	UNEXPECTED ( Z_TYPE_P ( retval ) == IS_INDIRECT )	1576:7:49198:49240	157747	0	True				
ANR	157960	CallExpression	UNEXPECTED ( Z_TYPE_P ( retval ) == IS_INDIRECT )		157747	0					
ANR	157961	Callee	UNEXPECTED		157747	0					
ANR	157962	Identifier	UNEXPECTED		157747	0					
ANR	157963	ArgumentList	Z_TYPE_P ( retval ) == IS_INDIRECT		157747	1					
ANR	157964	Argument	Z_TYPE_P ( retval ) == IS_INDIRECT		157747	0					
ANR	157965	EqualityExpression	Z_TYPE_P ( retval ) == IS_INDIRECT		157747	0		==			
ANR	157966	CallExpression	Z_TYPE_P ( retval )		157747	0					
ANR	157967	Callee	Z_TYPE_P		157747	0					
ANR	157968	Identifier	Z_TYPE_P		157747	0					
ANR	157969	ArgumentList	retval		157747	1					
ANR	157970	Argument	retval		157747	0					
ANR	157971	Identifier	retval		157747	0					
ANR	157972	Identifier	IS_INDIRECT		157747	1					
ANR	157973	CompoundStatement		40:52:1088:1088	157747	1					
ANR	157974	ExpressionStatement	retval = Z_INDIRECT_P ( retval )	1577:4:49249:49278	157747	0	True				
ANR	157975	AssignmentExpression	retval = Z_INDIRECT_P ( retval )		157747	0		=			
ANR	157976	Identifier	retval		157747	0					
ANR	157977	CallExpression	Z_INDIRECT_P ( retval )		157747	1					
ANR	157978	Callee	Z_INDIRECT_P		157747	0					
ANR	157979	Identifier	Z_INDIRECT_P		157747	0					
ANR	157980	ArgumentList	retval		157747	1					
ANR	157981	Argument	retval		157747	0					
ANR	157982	Identifier	retval		157747	0					
ANR	157983	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( retval ) == IS_UNDEF ) )		157747	1					
ANR	157984	Condition	UNEXPECTED ( Z_TYPE_P ( retval ) == IS_UNDEF )	1578:8:49288:49327	157747	0	True				
ANR	157985	CallExpression	UNEXPECTED ( Z_TYPE_P ( retval ) == IS_UNDEF )		157747	0					
ANR	157986	Callee	UNEXPECTED		157747	0					
ANR	157987	Identifier	UNEXPECTED		157747	0					
ANR	157988	ArgumentList	Z_TYPE_P ( retval ) == IS_UNDEF		157747	1					
ANR	157989	Argument	Z_TYPE_P ( retval ) == IS_UNDEF		157747	0					
ANR	157990	EqualityExpression	Z_TYPE_P ( retval ) == IS_UNDEF		157747	0		==			
ANR	157991	CallExpression	Z_TYPE_P ( retval )		157747	0					
ANR	157992	Callee	Z_TYPE_P		157747	0					
ANR	157993	Identifier	Z_TYPE_P		157747	0					
ANR	157994	ArgumentList	retval		157747	1					
ANR	157995	Argument	retval		157747	0					
ANR	157996	Identifier	retval		157747	0					
ANR	157997	Identifier	IS_UNDEF		157747	1					
ANR	157998	CompoundStatement		42:50:1175:1175	157747	1					
ANR	157999	SwitchStatement	switch ( type )		157747	0					
ANR	158000	Condition	type	1579:13:49345:49348	157747	0	True				
ANR	158001	Identifier	type		157747	0					
ANR	158002	CompoundStatement		43:19:1196:1196	157747	1					
ANR	158003	Label	case BP_VAR_R :	1580:6:49359:49372	157747	0	True				
ANR	158004	Identifier	BP_VAR_R		157747	0					
ANR	158005	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined index: %s"" , ZSTR_VAL ( offset_key ) )"	1581:7:49381:49446	157747	1	True				
ANR	158006	CallExpression	"zend_error ( E_NOTICE , ""Undefined index: %s"" , ZSTR_VAL ( offset_key ) )"		157747	0					
ANR	158007	Callee	zend_error		157747	0					
ANR	158008	Identifier	zend_error		157747	0					
ANR	158009	ArgumentList	E_NOTICE		157747	1					
ANR	158010	Argument	E_NOTICE		157747	0					
ANR	158011	Identifier	E_NOTICE		157747	0					
ANR	158012	Argument	"""Undefined index: %s"""		157747	1					
ANR	158013	PrimaryExpression	"""Undefined index: %s"""		157747	0					
ANR	158014	Argument	ZSTR_VAL ( offset_key )		157747	2					
ANR	158015	CallExpression	ZSTR_VAL ( offset_key )		157747	0					
ANR	158016	Callee	ZSTR_VAL		157747	0					
ANR	158017	Identifier	ZSTR_VAL		157747	0					
ANR	158018	ArgumentList	offset_key		157747	1					
ANR	158019	Argument	offset_key		157747	0					
ANR	158020	Identifier	offset_key		157747	0					
ANR	158021	Label	case BP_VAR_UNSET :	1583:6:49495:49512	157747	2	True				
ANR	158022	Identifier	BP_VAR_UNSET		157747	0					
ANR	158023	Label	case BP_VAR_IS :	1584:6:49520:49534	157747	3	True				
ANR	158024	Identifier	BP_VAR_IS		157747	0					
ANR	158025	ExpressionStatement	retval = & EG ( uninitialized_zval )	1585:7:49543:49575	157747	4	True				
ANR	158026	AssignmentExpression	retval = & EG ( uninitialized_zval )		157747	0		=			
ANR	158027	Identifier	retval		157747	0					
ANR	158028	UnaryOperationExpression	& EG ( uninitialized_zval )		157747	1					
ANR	158029	UnaryOperator	&		157747	0					
ANR	158030	CallExpression	EG ( uninitialized_zval )		157747	1					
ANR	158031	Callee	EG		157747	0					
ANR	158032	Identifier	EG		157747	0					
ANR	158033	ArgumentList	uninitialized_zval		157747	1					
ANR	158034	Argument	uninitialized_zval		157747	0					
ANR	158035	Identifier	uninitialized_zval		157747	0					
ANR	158036	BreakStatement	break ;	1586:7:49584:49589	157747	5	True				
ANR	158037	Label	case BP_VAR_RW :	1587:6:49597:49611	157747	6	True				
ANR	158038	Identifier	BP_VAR_RW		157747	0					
ANR	158039	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined index: %s"" , ZSTR_VAL ( offset_key ) )"	1588:7:49620:49684	157747	7	True				
ANR	158040	CallExpression	"zend_error ( E_NOTICE , ""Undefined index: %s"" , ZSTR_VAL ( offset_key ) )"		157747	0					
ANR	158041	Callee	zend_error		157747	0					
ANR	158042	Identifier	zend_error		157747	0					
ANR	158043	ArgumentList	E_NOTICE		157747	1					
ANR	158044	Argument	E_NOTICE		157747	0					
ANR	158045	Identifier	E_NOTICE		157747	0					
ANR	158046	Argument	"""Undefined index: %s"""		157747	1					
ANR	158047	PrimaryExpression	"""Undefined index: %s"""		157747	0					
ANR	158048	Argument	ZSTR_VAL ( offset_key )		157747	2					
ANR	158049	CallExpression	ZSTR_VAL ( offset_key )		157747	0					
ANR	158050	Callee	ZSTR_VAL		157747	0					
ANR	158051	Identifier	ZSTR_VAL		157747	0					
ANR	158052	ArgumentList	offset_key		157747	1					
ANR	158053	Argument	offset_key		157747	0					
ANR	158054	Identifier	offset_key		157747	0					
ANR	158055	Label	case BP_VAR_W :	1590:6:49733:49746	157747	8	True				
ANR	158056	Identifier	BP_VAR_W		157747	0					
ANR	158057	ExpressionStatement	ZVAL_NULL ( retval )	1591:7:49755:49772	157747	9	True				
ANR	158058	CallExpression	ZVAL_NULL ( retval )		157747	0					
ANR	158059	Callee	ZVAL_NULL		157747	0					
ANR	158060	Identifier	ZVAL_NULL		157747	0					
ANR	158061	ArgumentList	retval		157747	1					
ANR	158062	Argument	retval		157747	0					
ANR	158063	Identifier	retval		157747	0					
ANR	158064	BreakStatement	break ;	1592:7:49781:49786	157747	10	True				
ANR	158065	ElseStatement	else		157747	0					
ANR	158066	CompoundStatement		60:9:1660:1660	157747	0					
ANR	158067	SwitchStatement	switch ( type )		157747	0					
ANR	158068	Condition	type	1597:11:49828:49831	157747	0	True				
ANR	158069	Identifier	type		157747	0					
ANR	158070	CompoundStatement		61:17:1679:1679	157747	1					
ANR	158071	Label	case BP_VAR_R :	1598:4:49840:49853	157747	0	True				
ANR	158072	Identifier	BP_VAR_R		157747	0					
ANR	158073	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined index: %s"" , ZSTR_VAL ( offset_key ) )"	1599:5:49860:49925	157747	1	True				
ANR	158074	CallExpression	"zend_error ( E_NOTICE , ""Undefined index: %s"" , ZSTR_VAL ( offset_key ) )"		157747	0					
ANR	158075	Callee	zend_error		157747	0					
ANR	158076	Identifier	zend_error		157747	0					
ANR	158077	ArgumentList	E_NOTICE		157747	1					
ANR	158078	Argument	E_NOTICE		157747	0					
ANR	158079	Identifier	E_NOTICE		157747	0					
ANR	158080	Argument	"""Undefined index: %s"""		157747	1					
ANR	158081	PrimaryExpression	"""Undefined index: %s"""		157747	0					
ANR	158082	Argument	ZSTR_VAL ( offset_key )		157747	2					
ANR	158083	CallExpression	ZSTR_VAL ( offset_key )		157747	0					
ANR	158084	Callee	ZSTR_VAL		157747	0					
ANR	158085	Identifier	ZSTR_VAL		157747	0					
ANR	158086	ArgumentList	offset_key		157747	1					
ANR	158087	Argument	offset_key		157747	0					
ANR	158088	Identifier	offset_key		157747	0					
ANR	158089	Label	case BP_VAR_UNSET :	1601:4:49970:49987	157747	2	True				
ANR	158090	Identifier	BP_VAR_UNSET		157747	0					
ANR	158091	Label	case BP_VAR_IS :	1602:4:49993:50007	157747	3	True				
ANR	158092	Identifier	BP_VAR_IS		157747	0					
ANR	158093	ExpressionStatement	retval = & EG ( uninitialized_zval )	1603:5:50014:50046	157747	4	True				
ANR	158094	AssignmentExpression	retval = & EG ( uninitialized_zval )		157747	0		=			
ANR	158095	Identifier	retval		157747	0					
ANR	158096	UnaryOperationExpression	& EG ( uninitialized_zval )		157747	1					
ANR	158097	UnaryOperator	&		157747	0					
ANR	158098	CallExpression	EG ( uninitialized_zval )		157747	1					
ANR	158099	Callee	EG		157747	0					
ANR	158100	Identifier	EG		157747	0					
ANR	158101	ArgumentList	uninitialized_zval		157747	1					
ANR	158102	Argument	uninitialized_zval		157747	0					
ANR	158103	Identifier	uninitialized_zval		157747	0					
ANR	158104	BreakStatement	break ;	1604:5:50053:50058	157747	5	True				
ANR	158105	Label	case BP_VAR_RW :	1605:4:50064:50078	157747	6	True				
ANR	158106	Identifier	BP_VAR_RW		157747	0					
ANR	158107	ExpressionStatement	"zend_error ( E_NOTICE , ""Undefined index: %s"" , ZSTR_VAL ( offset_key ) )"	1606:5:50085:50149	157747	7	True				
ANR	158108	CallExpression	"zend_error ( E_NOTICE , ""Undefined index: %s"" , ZSTR_VAL ( offset_key ) )"		157747	0					
ANR	158109	Callee	zend_error		157747	0					
ANR	158110	Identifier	zend_error		157747	0					
ANR	158111	ArgumentList	E_NOTICE		157747	1					
ANR	158112	Argument	E_NOTICE		157747	0					
ANR	158113	Identifier	E_NOTICE		157747	0					
ANR	158114	Argument	"""Undefined index: %s"""		157747	1					
ANR	158115	PrimaryExpression	"""Undefined index: %s"""		157747	0					
ANR	158116	Argument	ZSTR_VAL ( offset_key )		157747	2					
ANR	158117	CallExpression	ZSTR_VAL ( offset_key )		157747	0					
ANR	158118	Callee	ZSTR_VAL		157747	0					
ANR	158119	Identifier	ZSTR_VAL		157747	0					
ANR	158120	ArgumentList	offset_key		157747	1					
ANR	158121	Argument	offset_key		157747	0					
ANR	158122	Identifier	offset_key		157747	0					
ANR	158123	ExpressionStatement	"retval = zend_hash_update ( ht , offset_key , & EG ( uninitialized_zval ) )"	1607:5:50156:50222	157747	8	True				
ANR	158124	AssignmentExpression	"retval = zend_hash_update ( ht , offset_key , & EG ( uninitialized_zval ) )"		157747	0		=			
ANR	158125	Identifier	retval		157747	0					
ANR	158126	CallExpression	"zend_hash_update ( ht , offset_key , & EG ( uninitialized_zval ) )"		157747	1					
ANR	158127	Callee	zend_hash_update		157747	0					
ANR	158128	Identifier	zend_hash_update		157747	0					
ANR	158129	ArgumentList	ht		157747	1					
ANR	158130	Argument	ht		157747	0					
ANR	158131	Identifier	ht		157747	0					
ANR	158132	Argument	offset_key		157747	1					
ANR	158133	Identifier	offset_key		157747	0					
ANR	158134	Argument	& EG ( uninitialized_zval )		157747	2					
ANR	158135	UnaryOperationExpression	& EG ( uninitialized_zval )		157747	0					
ANR	158136	UnaryOperator	&		157747	0					
ANR	158137	CallExpression	EG ( uninitialized_zval )		157747	1					
ANR	158138	Callee	EG		157747	0					
ANR	158139	Identifier	EG		157747	0					
ANR	158140	ArgumentList	uninitialized_zval		157747	1					
ANR	158141	Argument	uninitialized_zval		157747	0					
ANR	158142	Identifier	uninitialized_zval		157747	0					
ANR	158143	BreakStatement	break ;	1608:5:50229:50234	157747	9	True				
ANR	158144	Label	case BP_VAR_W :	1609:4:50240:50253	157747	10	True				
ANR	158145	Identifier	BP_VAR_W		157747	0					
ANR	158146	ExpressionStatement	"retval = zend_hash_add_new ( ht , offset_key , & EG ( uninitialized_zval ) )"	1610:5:50260:50327	157747	11	True				
ANR	158147	AssignmentExpression	"retval = zend_hash_add_new ( ht , offset_key , & EG ( uninitialized_zval ) )"		157747	0		=			
ANR	158148	Identifier	retval		157747	0					
ANR	158149	CallExpression	"zend_hash_add_new ( ht , offset_key , & EG ( uninitialized_zval ) )"		157747	1					
ANR	158150	Callee	zend_hash_add_new		157747	0					
ANR	158151	Identifier	zend_hash_add_new		157747	0					
ANR	158152	ArgumentList	ht		157747	1					
ANR	158153	Argument	ht		157747	0					
ANR	158154	Identifier	ht		157747	0					
ANR	158155	Argument	offset_key		157747	1					
ANR	158156	Identifier	offset_key		157747	0					
ANR	158157	Argument	& EG ( uninitialized_zval )		157747	2					
ANR	158158	UnaryOperationExpression	& EG ( uninitialized_zval )		157747	0					
ANR	158159	UnaryOperator	&		157747	0					
ANR	158160	CallExpression	EG ( uninitialized_zval )		157747	1					
ANR	158161	Callee	EG		157747	0					
ANR	158162	Identifier	EG		157747	0					
ANR	158163	ArgumentList	uninitialized_zval		157747	1					
ANR	158164	Argument	uninitialized_zval		157747	0					
ANR	158165	Identifier	uninitialized_zval		157747	0					
ANR	158166	BreakStatement	break ;	1611:5:50334:50339	157747	12	True				
ANR	158167	ElseStatement	else		157747	0					
ANR	158168	CompoundStatement		78:8:2203:2203	157747	0					
ANR	158169	SwitchStatement	switch ( Z_TYPE_P ( dim ) )		157747	0					
ANR	158170	Condition	Z_TYPE_P ( dim )	1615:10:50370:50382	157747	0	True				
ANR	158171	CallExpression	Z_TYPE_P ( dim )		157747	0					
ANR	158172	Callee	Z_TYPE_P		157747	0					
ANR	158173	Identifier	Z_TYPE_P		157747	0					
ANR	158174	ArgumentList	dim		157747	1					
ANR	158175	Argument	dim		157747	0					
ANR	158176	Identifier	dim		157747	0					
ANR	158177	CompoundStatement		79:25:2230:2230	157747	1					
ANR	158178	Label	case IS_NULL :	1616:3:50390:50402	157747	0	True				
ANR	158179	Identifier	IS_NULL		157747	0					
ANR	158180	ExpressionStatement	offset_key = ZSTR_EMPTY_ALLOC ( )	1617:4:50408:50439	157747	1	True				
ANR	158181	AssignmentExpression	offset_key = ZSTR_EMPTY_ALLOC ( )		157747	0		=			
ANR	158182	Identifier	offset_key		157747	0					
ANR	158183	CallExpression	ZSTR_EMPTY_ALLOC ( )		157747	1					
ANR	158184	Callee	ZSTR_EMPTY_ALLOC		157747	0					
ANR	158185	Identifier	ZSTR_EMPTY_ALLOC		157747	0					
ANR	158186	ArgumentList			157747	1					
ANR	158187	GotoStatement	goto str_index ;	1618:4:50445:50459	157747	2	True				
ANR	158188	Identifier	str_index		157747	0					
ANR	158189	Label	case IS_DOUBLE :	1619:3:50464:50478	157747	3	True				
ANR	158190	Identifier	IS_DOUBLE		157747	0					
ANR	158191	ExpressionStatement	hval = zend_dval_to_lval ( Z_DVAL_P ( dim ) )	1620:4:50484:50523	157747	4	True				
ANR	158192	AssignmentExpression	hval = zend_dval_to_lval ( Z_DVAL_P ( dim ) )		157747	0		=			
ANR	158193	Identifier	hval		157747	0					
ANR	158194	CallExpression	zend_dval_to_lval ( Z_DVAL_P ( dim ) )		157747	1					
ANR	158195	Callee	zend_dval_to_lval		157747	0					
ANR	158196	Identifier	zend_dval_to_lval		157747	0					
ANR	158197	ArgumentList	Z_DVAL_P ( dim )		157747	1					
ANR	158198	Argument	Z_DVAL_P ( dim )		157747	0					
ANR	158199	CallExpression	Z_DVAL_P ( dim )		157747	0					
ANR	158200	Callee	Z_DVAL_P		157747	0					
ANR	158201	Identifier	Z_DVAL_P		157747	0					
ANR	158202	ArgumentList	dim		157747	1					
ANR	158203	Argument	dim		157747	0					
ANR	158204	Identifier	dim		157747	0					
ANR	158205	GotoStatement	goto num_index ;	1621:4:50529:50543	157747	5	True				
ANR	158206	Identifier	num_index		157747	0					
ANR	158207	Label	case IS_RESOURCE :	1622:3:50548:50564	157747	6	True				
ANR	158208	Identifier	IS_RESOURCE		157747	0					
ANR	158209	ExpressionStatement	"zend_error ( E_NOTICE , ""Resource ID#%pd used as offset, casting to integer (%pd)"" , Z_RES_HANDLE_P ( dim ) , Z_RES_HANDLE_P ( dim ) )"	1623:4:50570:50692	157747	7	True				
ANR	158210	CallExpression	"zend_error ( E_NOTICE , ""Resource ID#%pd used as offset, casting to integer (%pd)"" , Z_RES_HANDLE_P ( dim ) , Z_RES_HANDLE_P ( dim ) )"		157747	0					
ANR	158211	Callee	zend_error		157747	0					
ANR	158212	Identifier	zend_error		157747	0					
ANR	158213	ArgumentList	E_NOTICE		157747	1					
ANR	158214	Argument	E_NOTICE		157747	0					
ANR	158215	Identifier	E_NOTICE		157747	0					
ANR	158216	Argument	"""Resource ID#%pd used as offset, casting to integer (%pd)"""		157747	1					
ANR	158217	PrimaryExpression	"""Resource ID#%pd used as offset, casting to integer (%pd)"""		157747	0					
ANR	158218	Argument	Z_RES_HANDLE_P ( dim )		157747	2					
ANR	158219	CallExpression	Z_RES_HANDLE_P ( dim )		157747	0					
ANR	158220	Callee	Z_RES_HANDLE_P		157747	0					
ANR	158221	Identifier	Z_RES_HANDLE_P		157747	0					
ANR	158222	ArgumentList	dim		157747	1					
ANR	158223	Argument	dim		157747	0					
ANR	158224	Identifier	dim		157747	0					
ANR	158225	Argument	Z_RES_HANDLE_P ( dim )		157747	3					
ANR	158226	CallExpression	Z_RES_HANDLE_P ( dim )		157747	0					
ANR	158227	Callee	Z_RES_HANDLE_P		157747	0					
ANR	158228	Identifier	Z_RES_HANDLE_P		157747	0					
ANR	158229	ArgumentList	dim		157747	1					
ANR	158230	Argument	dim		157747	0					
ANR	158231	Identifier	dim		157747	0					
ANR	158232	ExpressionStatement	hval = Z_RES_HANDLE_P ( dim )	1624:4:50698:50724	157747	8	True				
ANR	158233	AssignmentExpression	hval = Z_RES_HANDLE_P ( dim )		157747	0		=			
ANR	158234	Identifier	hval		157747	0					
ANR	158235	CallExpression	Z_RES_HANDLE_P ( dim )		157747	1					
ANR	158236	Callee	Z_RES_HANDLE_P		157747	0					
ANR	158237	Identifier	Z_RES_HANDLE_P		157747	0					
ANR	158238	ArgumentList	dim		157747	1					
ANR	158239	Argument	dim		157747	0					
ANR	158240	Identifier	dim		157747	0					
ANR	158241	GotoStatement	goto num_index ;	1625:4:50730:50744	157747	9	True				
ANR	158242	Identifier	num_index		157747	0					
ANR	158243	Label	case IS_FALSE :	1626:3:50749:50762	157747	10	True				
ANR	158244	Identifier	IS_FALSE		157747	0					
ANR	158245	ExpressionStatement	hval = 0	1627:4:50768:50776	157747	11	True				
ANR	158246	AssignmentExpression	hval = 0		157747	0		=			
ANR	158247	Identifier	hval		157747	0					
ANR	158248	PrimaryExpression	0		157747	1					
ANR	158249	GotoStatement	goto num_index ;	1628:4:50782:50796	157747	12	True				
ANR	158250	Identifier	num_index		157747	0					
ANR	158251	Label	case IS_TRUE :	1629:3:50801:50813	157747	13	True				
ANR	158252	Identifier	IS_TRUE		157747	0					
ANR	158253	ExpressionStatement	hval = 1	1630:4:50819:50827	157747	14	True				
ANR	158254	AssignmentExpression	hval = 1		157747	0		=			
ANR	158255	Identifier	hval		157747	0					
ANR	158256	PrimaryExpression	1		157747	1					
ANR	158257	GotoStatement	goto num_index ;	1631:4:50833:50847	157747	15	True				
ANR	158258	Identifier	num_index		157747	0					
ANR	158259	Label	case IS_REFERENCE :	1632:3:50852:50869	157747	16	True				
ANR	158260	Identifier	IS_REFERENCE		157747	0					
ANR	158261	ExpressionStatement	dim = Z_REFVAL_P ( dim )	1633:4:50875:50896	157747	17	True				
ANR	158262	AssignmentExpression	dim = Z_REFVAL_P ( dim )		157747	0		=			
ANR	158263	Identifier	dim		157747	0					
ANR	158264	CallExpression	Z_REFVAL_P ( dim )		157747	1					
ANR	158265	Callee	Z_REFVAL_P		157747	0					
ANR	158266	Identifier	Z_REFVAL_P		157747	0					
ANR	158267	ArgumentList	dim		157747	1					
ANR	158268	Argument	dim		157747	0					
ANR	158269	Identifier	dim		157747	0					
ANR	158270	GotoStatement	goto try_again ;	1634:4:50902:50916	157747	18	True				
ANR	158271	Identifier	try_again		157747	0					
ANR	158272	Label	default :	1635:3:50921:50928	157747	19	True				
ANR	158273	Identifier	default		157747	0					
ANR	158274	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal offset type"" )"	1636:4:50934:50978	157747	20	True				
ANR	158275	CallExpression	"zend_error ( E_WARNING , ""Illegal offset type"" )"		157747	0					
ANR	158276	Callee	zend_error		157747	0					
ANR	158277	Identifier	zend_error		157747	0					
ANR	158278	ArgumentList	E_WARNING		157747	1					
ANR	158279	Argument	E_WARNING		157747	0					
ANR	158280	Identifier	E_WARNING		157747	0					
ANR	158281	Argument	"""Illegal offset type"""		157747	1					
ANR	158282	PrimaryExpression	"""Illegal offset type"""		157747	0					
ANR	158283	ExpressionStatement	retval = ( type == BP_VAR_W || type == BP_VAR_RW ) ? & EG ( error_zval ) : & EG ( uninitialized_zval )	1637:4:50984:51081	157747	21	True				
ANR	158284	AssignmentExpression	retval = ( type == BP_VAR_W || type == BP_VAR_RW ) ? & EG ( error_zval ) : & EG ( uninitialized_zval )		157747	0		=			
ANR	158285	Identifier	retval		157747	0					
ANR	158286	ConditionalExpression	( type == BP_VAR_W || type == BP_VAR_RW ) ? & EG ( error_zval ) : & EG ( uninitialized_zval )		157747	1					
ANR	158287	Condition	type == BP_VAR_W || type == BP_VAR_RW		157747	0					
ANR	158288	OrExpression	type == BP_VAR_W || type == BP_VAR_RW		157747	0		||			
ANR	158289	EqualityExpression	type == BP_VAR_W		157747	0		==			
ANR	158290	Identifier	type		157747	0					
ANR	158291	Identifier	BP_VAR_W		157747	1					
ANR	158292	EqualityExpression	type == BP_VAR_RW		157747	1		==			
ANR	158293	Identifier	type		157747	0					
ANR	158294	Identifier	BP_VAR_RW		157747	1					
ANR	158295	UnaryOperationExpression	& EG ( error_zval )		157747	1					
ANR	158296	UnaryOperator	&		157747	0					
ANR	158297	CallExpression	EG ( error_zval )		157747	1					
ANR	158298	Callee	EG		157747	0					
ANR	158299	Identifier	EG		157747	0					
ANR	158300	ArgumentList	error_zval		157747	1					
ANR	158301	Argument	error_zval		157747	0					
ANR	158302	Identifier	error_zval		157747	0					
ANR	158303	UnaryOperationExpression	& EG ( uninitialized_zval )		157747	2					
ANR	158304	UnaryOperator	&		157747	0					
ANR	158305	CallExpression	EG ( uninitialized_zval )		157747	1					
ANR	158306	Callee	EG		157747	0					
ANR	158307	Identifier	EG		157747	0					
ANR	158308	ArgumentList	uninitialized_zval		157747	1					
ANR	158309	Argument	uninitialized_zval		157747	0					
ANR	158310	Identifier	uninitialized_zval		157747	0					
ANR	158311	ReturnStatement	return retval ;	1641:1:51091:51104	157747	5	True				
ANR	158312	Identifier	retval		157747	0					
ANR	158313	ReturnType	static zend_always_inline zval *		157747	1					
ANR	158314	Identifier	zend_fetch_dimension_address_inner		157747	2					
ANR	158315	ParameterList	"HashTable * ht , const zval * dim , int dim_type , int type"		157747	3					
ANR	158316	Parameter	HashTable * ht	1536:67:48098:48110	157747	0	True				
ANR	158317	ParameterType	HashTable *		157747	0					
ANR	158318	Identifier	ht		157747	1					
ANR	158319	Parameter	const zval * dim	1536:82:48113:48127	157747	1	True				
ANR	158320	ParameterType	const zval *		157747	0					
ANR	158321	Identifier	dim		157747	1					
ANR	158322	Parameter	int dim_type	1536:99:48130:48141	157747	2	True				
ANR	158323	ParameterType	int		157747	0					
ANR	158324	Identifier	dim_type		157747	1					
ANR	158325	Parameter	int type	1536:113:48144:48151	157747	3	True				
ANR	158326	ParameterType	int		157747	0					
ANR	158327	Identifier	type		157747	1					
ANR	158328	CFGEntryNode	ENTRY		157747		True				
ANR	158329	CFGExitNode	EXIT		157747		True				
ANR	158330	Symbol	Z_RES_HANDLE_P		157747						
ANR	158331	Symbol	dim_type		157747						
ANR	158332	Symbol	hval		157747						
ANR	158333	Symbol	dim		157747						
ANR	158334	Symbol	Z_INDIRECT_P		157747						
ANR	158335	Symbol	ht		157747						
ANR	158336	Symbol	type		157747						
ANR	158337	Symbol	& EG		157747						
ANR	158338	Symbol	ZSTR_EMPTY_ALLOC		157747						
ANR	158339	Symbol	UNEXPECTED		157747						
ANR	158340	Symbol	zend_dval_to_lval		157747						
ANR	158341	Symbol	E_WARNING		157747						
ANR	158342	Symbol	zend_hash_find		157747						
ANR	158343	Symbol	IS_LONG		157747						
ANR	158344	Symbol	BP_VAR_W		157747						
ANR	158345	Symbol	offset_key		157747						
ANR	158346	Symbol	IS_STRING		157747						
ANR	158347	Symbol	zend_hash_update		157747						
ANR	158348	Symbol	IS_UNDEF		157747						
ANR	158349	Symbol	uninitialized_zval		157747						
ANR	158350	Symbol	BP_VAR_RW		157747						
ANR	158351	Symbol	zend_hash_index_find		157747						
ANR	158352	Symbol	IS_CONST		157747						
ANR	158353	Symbol	NULL		157747						
ANR	158354	Symbol	zend_hash_index_update		157747						
ANR	158355	Symbol	E_NOTICE		157747						
ANR	158356	Symbol	zend_hash_add_new		157747						
ANR	158357	Symbol	Z_TYPE_P		157747						
ANR	158358	Symbol	retval		157747						
ANR	158359	Symbol	Z_DVAL_P		157747						
ANR	158360	Symbol	Z_LVAL_P		157747						
ANR	158361	Symbol	ZSTR_VAL		157747						
ANR	158362	Symbol	Z_REFVAL_P		157747						
ANR	158363	Symbol	error_zval		157747						
ANR	158364	Symbol	Z_STR_P		157747						
ANR	158365	Symbol	zend_hash_index_add_new		157747						
ANR	158366	Symbol	EXPECTED		157747						
ANR	158367	Symbol	ZEND_HANDLE_NUMERIC		157747						
ANR	158368	Symbol	IS_INDIRECT		157747						
ANR	158369	Function	zend_check_string_offset	1644:0:51109:51918							
ANR	158370	FunctionDef	"zend_check_string_offset (zval * dim , int type)"		158369	0					
ANR	158371	CompoundStatement		1645:0:51190:51918	158369	0					
ANR	158372	IdentifierDeclStatement	zend_long offset ;	1646:1:51193:51209	158369	0	True				
ANR	158373	IdentifierDecl	offset		158369	0					
ANR	158374	IdentifierDeclType	zend_long		158369	0					
ANR	158375	Identifier	offset		158369	1					
ANR	158376	Label	try_again :	1648:0:51212:51221	158369	1	True				
ANR	158377	Identifier	try_again		158369	0					
ANR	158378	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( dim ) != IS_LONG ) )		158369	2					
ANR	158379	Condition	UNEXPECTED ( Z_TYPE_P ( dim ) != IS_LONG )	1649:5:51228:51263	158369	0	True				
ANR	158380	CallExpression	UNEXPECTED ( Z_TYPE_P ( dim ) != IS_LONG )		158369	0					
ANR	158381	Callee	UNEXPECTED		158369	0					
ANR	158382	Identifier	UNEXPECTED		158369	0					
ANR	158383	ArgumentList	Z_TYPE_P ( dim ) != IS_LONG		158369	1					
ANR	158384	Argument	Z_TYPE_P ( dim ) != IS_LONG		158369	0					
ANR	158385	EqualityExpression	Z_TYPE_P ( dim ) != IS_LONG		158369	0		!=			
ANR	158386	CallExpression	Z_TYPE_P ( dim )		158369	0					
ANR	158387	Callee	Z_TYPE_P		158369	0					
ANR	158388	Identifier	Z_TYPE_P		158369	0					
ANR	158389	ArgumentList	dim		158369	1					
ANR	158390	Argument	dim		158369	0					
ANR	158391	Identifier	dim		158369	0					
ANR	158392	Identifier	IS_LONG		158369	1					
ANR	158393	CompoundStatement		5:43:75:75	158369	1					
ANR	158394	SwitchStatement	switch ( Z_TYPE_P ( dim ) )		158369	0					
ANR	158395	Condition	Z_TYPE_P ( dim )	1650:9:51277:51289	158369	0	True				
ANR	158396	CallExpression	Z_TYPE_P ( dim )		158369	0					
ANR	158397	Callee	Z_TYPE_P		158369	0					
ANR	158398	Identifier	Z_TYPE_P		158369	0					
ANR	158399	ArgumentList	dim		158369	1					
ANR	158400	Argument	dim		158369	0					
ANR	158401	Identifier	dim		158369	0					
ANR	158402	CompoundStatement		6:24:101:101	158369	1					
ANR	158403	Label	case IS_STRING :	1651:3:51297:51311	158369	0	True				
ANR	158404	Identifier	IS_STRING		158369	0					
ANR	158405	IfStatement	"if ( IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 ) )"		158369	1					
ANR	158406	Condition	"IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"	1652:8:51321:51398	158369	0	True				
ANR	158407	EqualityExpression	"IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"		158369	0		==			
ANR	158408	Identifier	IS_LONG		158369	0					
ANR	158409	CallExpression	"is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"		158369	1					
ANR	158410	Callee	is_numeric_string		158369	0					
ANR	158411	Identifier	is_numeric_string		158369	0					
ANR	158412	ArgumentList	Z_STRVAL_P ( dim )		158369	1					
ANR	158413	Argument	Z_STRVAL_P ( dim )		158369	0					
ANR	158414	CallExpression	Z_STRVAL_P ( dim )		158369	0					
ANR	158415	Callee	Z_STRVAL_P		158369	0					
ANR	158416	Identifier	Z_STRVAL_P		158369	0					
ANR	158417	ArgumentList	dim		158369	1					
ANR	158418	Argument	dim		158369	0					
ANR	158419	Identifier	dim		158369	0					
ANR	158420	Argument	Z_STRLEN_P ( dim )		158369	1					
ANR	158421	CallExpression	Z_STRLEN_P ( dim )		158369	0					
ANR	158422	Callee	Z_STRLEN_P		158369	0					
ANR	158423	Identifier	Z_STRLEN_P		158369	0					
ANR	158424	ArgumentList	dim		158369	1					
ANR	158425	Argument	dim		158369	0					
ANR	158426	Identifier	dim		158369	0					
ANR	158427	Argument	NULL		158369	2					
ANR	158428	Identifier	NULL		158369	0					
ANR	158429	Argument	NULL		158369	3					
ANR	158430	Identifier	NULL		158369	0					
ANR	158431	Argument	- 1		158369	4					
ANR	158432	UnaryOperationExpression	- 1		158369	0					
ANR	158433	UnaryOperator	-		158369	0					
ANR	158434	PrimaryExpression	1		158369	1					
ANR	158435	CompoundStatement		8:88:210:210	158369	1					
ANR	158436	BreakStatement	break ;	1653:5:51408:51413	158369	0	True				
ANR	158437	IfStatement	if ( type != BP_VAR_UNSET )		158369	2					
ANR	158438	Condition	type != BP_VAR_UNSET	1655:8:51429:51448	158369	0	True				
ANR	158439	EqualityExpression	type != BP_VAR_UNSET		158369	0		!=			
ANR	158440	Identifier	type		158369	0					
ANR	158441	Identifier	BP_VAR_UNSET		158369	1					
ANR	158442	CompoundStatement		11:30:260:260	158369	1					
ANR	158443	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal string offset '%s'"" , Z_STRVAL_P ( dim ) )"	1656:5:51458:51526	158369	0	True				
ANR	158444	CallExpression	"zend_error ( E_WARNING , ""Illegal string offset '%s'"" , Z_STRVAL_P ( dim ) )"		158369	0					
ANR	158445	Callee	zend_error		158369	0					
ANR	158446	Identifier	zend_error		158369	0					
ANR	158447	ArgumentList	E_WARNING		158369	1					
ANR	158448	Argument	E_WARNING		158369	0					
ANR	158449	Identifier	E_WARNING		158369	0					
ANR	158450	Argument	"""Illegal string offset '%s'"""		158369	1					
ANR	158451	PrimaryExpression	"""Illegal string offset '%s'"""		158369	0					
ANR	158452	Argument	Z_STRVAL_P ( dim )		158369	2					
ANR	158453	CallExpression	Z_STRVAL_P ( dim )		158369	0					
ANR	158454	Callee	Z_STRVAL_P		158369	0					
ANR	158455	Identifier	Z_STRVAL_P		158369	0					
ANR	158456	ArgumentList	dim		158369	1					
ANR	158457	Argument	dim		158369	0					
ANR	158458	Identifier	dim		158369	0					
ANR	158459	BreakStatement	break ;	1658:4:51538:51543	158369	3	True				
ANR	158460	Label	case IS_DOUBLE :	1659:3:51548:51562	158369	4	True				
ANR	158461	Identifier	IS_DOUBLE		158369	0					
ANR	158462	Label	case IS_NULL :	1660:3:51567:51579	158369	5	True				
ANR	158463	Identifier	IS_NULL		158369	0					
ANR	158464	Label	case IS_FALSE :	1661:3:51584:51597	158369	6	True				
ANR	158465	Identifier	IS_FALSE		158369	0					
ANR	158466	Label	case IS_TRUE :	1662:3:51602:51614	158369	7	True				
ANR	158467	Identifier	IS_TRUE		158369	0					
ANR	158468	ExpressionStatement	"zend_error ( E_NOTICE , ""String offset cast occurred"" )"	1663:4:51620:51671	158369	8	True				
ANR	158469	CallExpression	"zend_error ( E_NOTICE , ""String offset cast occurred"" )"		158369	0					
ANR	158470	Callee	zend_error		158369	0					
ANR	158471	Identifier	zend_error		158369	0					
ANR	158472	ArgumentList	E_NOTICE		158369	1					
ANR	158473	Argument	E_NOTICE		158369	0					
ANR	158474	Identifier	E_NOTICE		158369	0					
ANR	158475	Argument	"""String offset cast occurred"""		158369	1					
ANR	158476	PrimaryExpression	"""String offset cast occurred"""		158369	0					
ANR	158477	BreakStatement	break ;	1664:4:51677:51682	158369	9	True				
ANR	158478	Label	case IS_REFERENCE :	1665:3:51687:51704	158369	10	True				
ANR	158479	Identifier	IS_REFERENCE		158369	0					
ANR	158480	ExpressionStatement	dim = Z_REFVAL_P ( dim )	1666:4:51710:51731	158369	11	True				
ANR	158481	AssignmentExpression	dim = Z_REFVAL_P ( dim )		158369	0		=			
ANR	158482	Identifier	dim		158369	0					
ANR	158483	CallExpression	Z_REFVAL_P ( dim )		158369	1					
ANR	158484	Callee	Z_REFVAL_P		158369	0					
ANR	158485	Identifier	Z_REFVAL_P		158369	0					
ANR	158486	ArgumentList	dim		158369	1					
ANR	158487	Argument	dim		158369	0					
ANR	158488	Identifier	dim		158369	0					
ANR	158489	GotoStatement	goto try_again ;	1667:4:51737:51751	158369	12	True				
ANR	158490	Identifier	try_again		158369	0					
ANR	158491	Label	default :	1668:3:51756:51763	158369	13	True				
ANR	158492	Identifier	default		158369	0					
ANR	158493	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal offset type"" )"	1669:4:51769:51813	158369	14	True				
ANR	158494	CallExpression	"zend_error ( E_WARNING , ""Illegal offset type"" )"		158369	0					
ANR	158495	Callee	zend_error		158369	0					
ANR	158496	Identifier	zend_error		158369	0					
ANR	158497	ArgumentList	E_WARNING		158369	1					
ANR	158498	Argument	E_WARNING		158369	0					
ANR	158499	Identifier	E_WARNING		158369	0					
ANR	158500	Argument	"""Illegal offset type"""		158369	1					
ANR	158501	PrimaryExpression	"""Illegal offset type"""		158369	0					
ANR	158502	BreakStatement	break ;	1670:4:51819:51824	158369	15	True				
ANR	158503	ExpressionStatement	offset = zval_get_long ( dim )	1673:2:51833:51860	158369	1	True				
ANR	158504	AssignmentExpression	offset = zval_get_long ( dim )		158369	0		=			
ANR	158505	Identifier	offset		158369	0					
ANR	158506	CallExpression	zval_get_long ( dim )		158369	1					
ANR	158507	Callee	zval_get_long		158369	0					
ANR	158508	Identifier	zval_get_long		158369	0					
ANR	158509	ArgumentList	dim		158369	1					
ANR	158510	Argument	dim		158369	0					
ANR	158511	Identifier	dim		158369	0					
ANR	158512	ElseStatement	else		158369	0					
ANR	158513	CompoundStatement		30:8:679:679	158369	0					
ANR	158514	ExpressionStatement	offset = Z_LVAL_P ( dim )	1675:2:51874:51896	158369	0	True				
ANR	158515	AssignmentExpression	offset = Z_LVAL_P ( dim )		158369	0		=			
ANR	158516	Identifier	offset		158369	0					
ANR	158517	CallExpression	Z_LVAL_P ( dim )		158369	1					
ANR	158518	Callee	Z_LVAL_P		158369	0					
ANR	158519	Identifier	Z_LVAL_P		158369	0					
ANR	158520	ArgumentList	dim		158369	1					
ANR	158521	Argument	dim		158369	0					
ANR	158522	Identifier	dim		158369	0					
ANR	158523	ReturnStatement	return offset ;	1678:1:51903:51916	158369	3	True				
ANR	158524	Identifier	offset		158369	0					
ANR	158525	ReturnType	static zend_never_inline zend_long		158369	1					
ANR	158526	Identifier	zend_check_string_offset		158369	2					
ANR	158527	ParameterList	"zval * dim , int type"		158369	3					
ANR	158528	Parameter	zval * dim	1644:60:51169:51177	158369	0	True				
ANR	158529	ParameterType	zval *		158369	0					
ANR	158530	Identifier	dim		158369	1					
ANR	158531	Parameter	int type	1644:71:51180:51187	158369	1	True				
ANR	158532	ParameterType	int		158369	0					
ANR	158533	Identifier	type		158369	1					
ANR	158534	CFGEntryNode	ENTRY		158369		True				
ANR	158535	CFGExitNode	EXIT		158369		True				
ANR	158536	Symbol	NULL		158369						
ANR	158537	Symbol	offset		158369						
ANR	158538	Symbol	dim		158369						
ANR	158539	Symbol	E_NOTICE		158369						
ANR	158540	Symbol	type		158369						
ANR	158541	Symbol	Z_TYPE_P		158369						
ANR	158542	Symbol	Z_STRVAL_P		158369						
ANR	158543	Symbol	Z_LVAL_P		158369						
ANR	158544	Symbol	UNEXPECTED		158369						
ANR	158545	Symbol	E_WARNING		158369						
ANR	158546	Symbol	is_numeric_string		158369						
ANR	158547	Symbol	IS_LONG		158369						
ANR	158548	Symbol	Z_REFVAL_P		158369						
ANR	158549	Symbol	zval_get_long		158369						
ANR	158550	Symbol	Z_STRLEN_P		158369						
ANR	158551	Symbol	BP_VAR_UNSET		158369						
ANR	158552	Function	zend_fetch_string_offset	1681:0:51921:52260							
ANR	158553	FunctionDef	"zend_fetch_string_offset (zval * container , zval * dim , int type)"		158552	0					
ANR	158554	CompoundStatement		1682:0:52020:52260	158552	0					
ANR	158555	IdentifierDeclStatement	"zend_long offset = zend_check_string_offset ( dim , type ) ;"	1683:1:52023:52077	158552	0	True				
ANR	158556	IdentifierDecl	"offset = zend_check_string_offset ( dim , type )"		158552	0					
ANR	158557	IdentifierDeclType	zend_long		158552	0					
ANR	158558	Identifier	offset		158552	1					
ANR	158559	AssignmentExpression	"offset = zend_check_string_offset ( dim , type )"		158552	2		=			
ANR	158560	Identifier	offset		158552	0					
ANR	158561	CallExpression	"zend_check_string_offset ( dim , type )"		158552	1					
ANR	158562	Callee	zend_check_string_offset		158552	0					
ANR	158563	Identifier	zend_check_string_offset		158552	0					
ANR	158564	ArgumentList	dim		158552	1					
ANR	158565	Argument	dim		158552	0					
ANR	158566	Identifier	dim		158552	0					
ANR	158567	Argument	type		158552	1					
ANR	158568	Identifier	type		158552	0					
ANR	158569	IfStatement	if ( Z_REFCOUNTED_P ( container ) )		158552	1					
ANR	158570	Condition	Z_REFCOUNTED_P ( container )	1685:5:52085:52109	158552	0	True				
ANR	158571	CallExpression	Z_REFCOUNTED_P ( container )		158552	0					
ANR	158572	Callee	Z_REFCOUNTED_P		158552	0					
ANR	158573	Identifier	Z_REFCOUNTED_P		158552	0					
ANR	158574	ArgumentList	container		158552	1					
ANR	158575	Argument	container		158552	0					
ANR	158576	Identifier	container		158552	0					
ANR	158577	CompoundStatement		4:32:91:91	158552	1					
ANR	158578	IfStatement	if ( Z_REFCOUNT_P ( container ) > 1 )		158552	0					
ANR	158579	Condition	Z_REFCOUNT_P ( container ) > 1	1686:6:52120:52146	158552	0	True				
ANR	158580	RelationalExpression	Z_REFCOUNT_P ( container ) > 1		158552	0		>			
ANR	158581	CallExpression	Z_REFCOUNT_P ( container )		158552	0					
ANR	158582	Callee	Z_REFCOUNT_P		158552	0					
ANR	158583	Identifier	Z_REFCOUNT_P		158552	0					
ANR	158584	ArgumentList	container		158552	1					
ANR	158585	Argument	container		158552	0					
ANR	158586	Identifier	container		158552	0					
ANR	158587	PrimaryExpression	1		158552	1					
ANR	158588	CompoundStatement		5:35:128:128	158552	1					
ANR	158589	ExpressionStatement	Z_DELREF_P ( container )	1687:3:52154:52175	158552	0	True				
ANR	158590	CallExpression	Z_DELREF_P ( container )		158552	0					
ANR	158591	Callee	Z_DELREF_P		158552	0					
ANR	158592	Identifier	Z_DELREF_P		158552	0					
ANR	158593	ArgumentList	container		158552	1					
ANR	158594	Argument	container		158552	0					
ANR	158595	Identifier	container		158552	0					
ANR	158596	ExpressionStatement	zval_copy_ctor_func ( container )	1688:3:52180:52210	158552	1	True				
ANR	158597	CallExpression	zval_copy_ctor_func ( container )		158552	0					
ANR	158598	Callee	zval_copy_ctor_func		158552	0					
ANR	158599	Identifier	zval_copy_ctor_func		158552	0					
ANR	158600	ArgumentList	container		158552	1					
ANR	158601	Argument	container		158552	0					
ANR	158602	Identifier	container		158552	0					
ANR	158603	ExpressionStatement	Z_ADDREF_P ( container )	1690:2:52218:52239	158552	1	True				
ANR	158604	CallExpression	Z_ADDREF_P ( container )		158552	0					
ANR	158605	Callee	Z_ADDREF_P		158552	0					
ANR	158606	Identifier	Z_ADDREF_P		158552	0					
ANR	158607	ArgumentList	container		158552	1					
ANR	158608	Argument	container		158552	0					
ANR	158609	Identifier	container		158552	0					
ANR	158610	ReturnStatement	return offset ;	1692:1:52245:52258	158552	2	True				
ANR	158611	Identifier	offset		158552	0					
ANR	158612	ReturnType	static zend_always_inline zend_long		158552	1					
ANR	158613	Identifier	zend_fetch_string_offset		158552	2					
ANR	158614	ParameterList	"zval * container , zval * dim , int type"		158552	3					
ANR	158615	Parameter	zval * container	1681:61:51982:51996	158552	0	True				
ANR	158616	ParameterType	zval *		158552	0					
ANR	158617	Identifier	container		158552	1					
ANR	158618	Parameter	zval * dim	1681:78:51999:52007	158552	1	True				
ANR	158619	ParameterType	zval *		158552	0					
ANR	158620	Identifier	dim		158552	1					
ANR	158621	Parameter	int type	1681:89:52010:52017	158552	2	True				
ANR	158622	ParameterType	int		158552	0					
ANR	158623	Identifier	type		158552	1					
ANR	158624	CFGEntryNode	ENTRY		158552		True				
ANR	158625	CFGExitNode	EXIT		158552		True				
ANR	158626	Symbol	container		158552						
ANR	158627	Symbol	offset		158552						
ANR	158628	Symbol	dim		158552						
ANR	158629	Symbol	zend_check_string_offset		158552						
ANR	158630	Symbol	Z_REFCOUNTED_P		158552						
ANR	158631	Symbol	type		158552						
ANR	158632	Symbol	Z_REFCOUNT_P		158552						
ANR	158633	Function	zend_fetch_dimension_address	1695:0:52263:55569							
ANR	158634	FunctionDef	"zend_fetch_dimension_address (zval * result , zval * container , zval * dim , int dim_type , int type)"		158633	0					
ANR	158635	CompoundStatement		1696:0:52389:55569	158633	0					
ANR	158636	IdentifierDeclStatement	zval * retval ;	1697:4:52395:52407	158633	0	True				
ANR	158637	IdentifierDecl	* retval		158633	0					
ANR	158638	IdentifierDeclType	zval *		158633	0					
ANR	158639	Identifier	retval		158633	1					
ANR	158640	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY ) )		158633	1					
ANR	158641	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY )	1699:5:52415:52455	158633	0	True				
ANR	158642	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY )		158633	0					
ANR	158643	Callee	EXPECTED		158633	0					
ANR	158644	Identifier	EXPECTED		158633	0					
ANR	158645	ArgumentList	Z_TYPE_P ( container ) == IS_ARRAY		158633	1					
ANR	158646	Argument	Z_TYPE_P ( container ) == IS_ARRAY		158633	0					
ANR	158647	EqualityExpression	Z_TYPE_P ( container ) == IS_ARRAY		158633	0		==			
ANR	158648	CallExpression	Z_TYPE_P ( container )		158633	0					
ANR	158649	Callee	Z_TYPE_P		158633	0					
ANR	158650	Identifier	Z_TYPE_P		158633	0					
ANR	158651	ArgumentList	container		158633	1					
ANR	158652	Argument	container		158633	0					
ANR	158653	Identifier	container		158633	0					
ANR	158654	Identifier	IS_ARRAY		158633	1					
ANR	158655	CompoundStatement		4:48:68:68	158633	1					
ANR	158656	Label	try_array :	1700:0:52460:52469	158633	0	True				
ANR	158657	Identifier	try_array		158633	0					
ANR	158658	ExpressionStatement	SEPARATE_ARRAY ( container )	1701:2:52473:52498	158633	1	True				
ANR	158659	CallExpression	SEPARATE_ARRAY ( container )		158633	0					
ANR	158660	Callee	SEPARATE_ARRAY		158633	0					
ANR	158661	Identifier	SEPARATE_ARRAY		158633	0					
ANR	158662	ArgumentList	container		158633	1					
ANR	158663	Argument	container		158633	0					
ANR	158664	Identifier	container		158633	0					
ANR	158665	Label	fetch_from_array :	1702:0:52500:52516	158633	2	True				
ANR	158666	Identifier	fetch_from_array		158633	0					
ANR	158667	IfStatement	if ( dim == NULL )		158633	3					
ANR	158668	Condition	dim == NULL	1703:6:52524:52534	158633	0	True				
ANR	158669	EqualityExpression	dim == NULL		158633	0		==			
ANR	158670	Identifier	dim		158633	0					
ANR	158671	Identifier	NULL		158633	1					
ANR	158672	CompoundStatement		8:19:147:147	158633	1					
ANR	158673	ExpressionStatement	"retval = zend_hash_next_index_insert ( Z_ARRVAL_P ( container ) , & EG ( uninitialized_zval ) )"	1704:3:52542:52626	158633	0	True				
ANR	158674	AssignmentExpression	"retval = zend_hash_next_index_insert ( Z_ARRVAL_P ( container ) , & EG ( uninitialized_zval ) )"		158633	0		=			
ANR	158675	Identifier	retval		158633	0					
ANR	158676	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( container ) , & EG ( uninitialized_zval ) )"		158633	1					
ANR	158677	Callee	zend_hash_next_index_insert		158633	0					
ANR	158678	Identifier	zend_hash_next_index_insert		158633	0					
ANR	158679	ArgumentList	Z_ARRVAL_P ( container )		158633	1					
ANR	158680	Argument	Z_ARRVAL_P ( container )		158633	0					
ANR	158681	CallExpression	Z_ARRVAL_P ( container )		158633	0					
ANR	158682	Callee	Z_ARRVAL_P		158633	0					
ANR	158683	Identifier	Z_ARRVAL_P		158633	0					
ANR	158684	ArgumentList	container		158633	1					
ANR	158685	Argument	container		158633	0					
ANR	158686	Identifier	container		158633	0					
ANR	158687	Argument	& EG ( uninitialized_zval )		158633	1					
ANR	158688	UnaryOperationExpression	& EG ( uninitialized_zval )		158633	0					
ANR	158689	UnaryOperator	&		158633	0					
ANR	158690	CallExpression	EG ( uninitialized_zval )		158633	1					
ANR	158691	Callee	EG		158633	0					
ANR	158692	Identifier	EG		158633	0					
ANR	158693	ArgumentList	uninitialized_zval		158633	1					
ANR	158694	Argument	uninitialized_zval		158633	0					
ANR	158695	Identifier	uninitialized_zval		158633	0					
ANR	158696	IfStatement	if ( UNEXPECTED ( retval == NULL ) )		158633	1					
ANR	158697	Condition	UNEXPECTED ( retval == NULL )	1705:7:52635:52660	158633	0	True				
ANR	158698	CallExpression	UNEXPECTED ( retval == NULL )		158633	0					
ANR	158699	Callee	UNEXPECTED		158633	0					
ANR	158700	Identifier	UNEXPECTED		158633	0					
ANR	158701	ArgumentList	retval == NULL		158633	1					
ANR	158702	Argument	retval == NULL		158633	0					
ANR	158703	EqualityExpression	retval == NULL		158633	0		==			
ANR	158704	Identifier	retval		158633	0					
ANR	158705	Identifier	NULL		158633	1					
ANR	158706	CompoundStatement		10:35:273:273	158633	1					
ANR	158707	ExpressionStatement	"zend_error ( E_WARNING , ""Cannot add element to the array as the next element is already occupied"" )"	1706:4:52669:52765	158633	0	True				
ANR	158708	CallExpression	"zend_error ( E_WARNING , ""Cannot add element to the array as the next element is already occupied"" )"		158633	0					
ANR	158709	Callee	zend_error		158633	0					
ANR	158710	Identifier	zend_error		158633	0					
ANR	158711	ArgumentList	E_WARNING		158633	1					
ANR	158712	Argument	E_WARNING		158633	0					
ANR	158713	Identifier	E_WARNING		158633	0					
ANR	158714	Argument	"""Cannot add element to the array as the next element is already occupied"""		158633	1					
ANR	158715	PrimaryExpression	"""Cannot add element to the array as the next element is already occupied"""		158633	0					
ANR	158716	ExpressionStatement	retval = & EG ( error_zval )	1707:4:52771:52795	158633	1	True				
ANR	158717	AssignmentExpression	retval = & EG ( error_zval )		158633	0		=			
ANR	158718	Identifier	retval		158633	0					
ANR	158719	UnaryOperationExpression	& EG ( error_zval )		158633	1					
ANR	158720	UnaryOperator	&		158633	0					
ANR	158721	CallExpression	EG ( error_zval )		158633	1					
ANR	158722	Callee	EG		158633	0					
ANR	158723	Identifier	EG		158633	0					
ANR	158724	ArgumentList	error_zval		158633	1					
ANR	158725	Argument	error_zval		158633	0					
ANR	158726	Identifier	error_zval		158633	0					
ANR	158727	ElseStatement	else		158633	0					
ANR	158728	CompoundStatement		14:9:421:421	158633	0					
ANR	158729	ExpressionStatement	"retval = zend_fetch_dimension_address_inner ( Z_ARRVAL_P ( container ) , dim , dim_type , type )"	1710:3:52816:52903	158633	0	True				
ANR	158730	AssignmentExpression	"retval = zend_fetch_dimension_address_inner ( Z_ARRVAL_P ( container ) , dim , dim_type , type )"		158633	0		=			
ANR	158731	Identifier	retval		158633	0					
ANR	158732	CallExpression	"zend_fetch_dimension_address_inner ( Z_ARRVAL_P ( container ) , dim , dim_type , type )"		158633	1					
ANR	158733	Callee	zend_fetch_dimension_address_inner		158633	0					
ANR	158734	Identifier	zend_fetch_dimension_address_inner		158633	0					
ANR	158735	ArgumentList	Z_ARRVAL_P ( container )		158633	1					
ANR	158736	Argument	Z_ARRVAL_P ( container )		158633	0					
ANR	158737	CallExpression	Z_ARRVAL_P ( container )		158633	0					
ANR	158738	Callee	Z_ARRVAL_P		158633	0					
ANR	158739	Identifier	Z_ARRVAL_P		158633	0					
ANR	158740	ArgumentList	container		158633	1					
ANR	158741	Argument	container		158633	0					
ANR	158742	Identifier	container		158633	0					
ANR	158743	Argument	dim		158633	1					
ANR	158744	Identifier	dim		158633	0					
ANR	158745	Argument	dim_type		158633	2					
ANR	158746	Identifier	dim_type		158633	0					
ANR	158747	Argument	type		158633	3					
ANR	158748	Identifier	type		158633	0					
ANR	158749	ExpressionStatement	"ZVAL_INDIRECT ( result , retval )"	1712:2:52911:52940	158633	4	True				
ANR	158750	CallExpression	"ZVAL_INDIRECT ( result , retval )"		158633	0					
ANR	158751	Callee	ZVAL_INDIRECT		158633	0					
ANR	158752	Identifier	ZVAL_INDIRECT		158633	0					
ANR	158753	ArgumentList	result		158633	1					
ANR	158754	Argument	result		158633	0					
ANR	158755	Identifier	result		158633	0					
ANR	158756	Argument	retval		158633	1					
ANR	158757	Identifier	retval		158633	0					
ANR	158758	ReturnStatement	return ;	1713:2:52944:52950	158633	5	True				
ANR	158759	ElseStatement	else		158633	0					
ANR	158760	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_REFERENCE ) )		158633	0					
ANR	158761	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_REFERENCE )	1714:12:52964:53008	158633	0	True				
ANR	158762	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_REFERENCE )		158633	0					
ANR	158763	Callee	EXPECTED		158633	0					
ANR	158764	Identifier	EXPECTED		158633	0					
ANR	158765	ArgumentList	Z_TYPE_P ( container ) == IS_REFERENCE		158633	1					
ANR	158766	Argument	Z_TYPE_P ( container ) == IS_REFERENCE		158633	0					
ANR	158767	EqualityExpression	Z_TYPE_P ( container ) == IS_REFERENCE		158633	0		==			
ANR	158768	CallExpression	Z_TYPE_P ( container )		158633	0					
ANR	158769	Callee	Z_TYPE_P		158633	0					
ANR	158770	Identifier	Z_TYPE_P		158633	0					
ANR	158771	ArgumentList	container		158633	1					
ANR	158772	Argument	container		158633	0					
ANR	158773	Identifier	container		158633	0					
ANR	158774	Identifier	IS_REFERENCE		158633	1					
ANR	158775	CompoundStatement		19:59:621:621	158633	1					
ANR	158776	ExpressionStatement	container = Z_REFVAL_P ( container )	1715:2:53015:53048	158633	0	True				
ANR	158777	AssignmentExpression	container = Z_REFVAL_P ( container )		158633	0		=			
ANR	158778	Identifier	container		158633	0					
ANR	158779	CallExpression	Z_REFVAL_P ( container )		158633	1					
ANR	158780	Callee	Z_REFVAL_P		158633	0					
ANR	158781	Identifier	Z_REFVAL_P		158633	0					
ANR	158782	ArgumentList	container		158633	1					
ANR	158783	Argument	container		158633	0					
ANR	158784	Identifier	container		158633	0					
ANR	158785	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY ) )		158633	1					
ANR	158786	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY )	1716:6:53056:53096	158633	0	True				
ANR	158787	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY )		158633	0					
ANR	158788	Callee	EXPECTED		158633	0					
ANR	158789	Identifier	EXPECTED		158633	0					
ANR	158790	ArgumentList	Z_TYPE_P ( container ) == IS_ARRAY		158633	1					
ANR	158791	Argument	Z_TYPE_P ( container ) == IS_ARRAY		158633	0					
ANR	158792	EqualityExpression	Z_TYPE_P ( container ) == IS_ARRAY		158633	0		==			
ANR	158793	CallExpression	Z_TYPE_P ( container )		158633	0					
ANR	158794	Callee	Z_TYPE_P		158633	0					
ANR	158795	Identifier	Z_TYPE_P		158633	0					
ANR	158796	ArgumentList	container		158633	1					
ANR	158797	Argument	container		158633	0					
ANR	158798	Identifier	container		158633	0					
ANR	158799	Identifier	IS_ARRAY		158633	1					
ANR	158800	CompoundStatement		21:49:709:709	158633	1					
ANR	158801	GotoStatement	goto try_array ;	1717:3:53104:53118	158633	0	True				
ANR	158802	Identifier	try_array		158633	0					
ANR	158803	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_STRING ) )		158633	2					
ANR	158804	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_STRING )	1720:5:53132:53173	158633	0	True				
ANR	158805	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_STRING )		158633	0					
ANR	158806	Callee	EXPECTED		158633	0					
ANR	158807	Identifier	EXPECTED		158633	0					
ANR	158808	ArgumentList	Z_TYPE_P ( container ) == IS_STRING		158633	1					
ANR	158809	Argument	Z_TYPE_P ( container ) == IS_STRING		158633	0					
ANR	158810	EqualityExpression	Z_TYPE_P ( container ) == IS_STRING		158633	0		==			
ANR	158811	CallExpression	Z_TYPE_P ( container )		158633	0					
ANR	158812	Callee	Z_TYPE_P		158633	0					
ANR	158813	Identifier	Z_TYPE_P		158633	0					
ANR	158814	ArgumentList	container		158633	1					
ANR	158815	Argument	container		158633	0					
ANR	158816	Identifier	container		158633	0					
ANR	158817	Identifier	IS_STRING		158633	1					
ANR	158818	CompoundStatement		25:49:786:786	158633	1					
ANR	158819	IfStatement	if ( type != BP_VAR_UNSET && UNEXPECTED ( Z_STRLEN_P ( container ) == 0 ) )		158633	0					
ANR	158820	Condition	type != BP_VAR_UNSET && UNEXPECTED ( Z_STRLEN_P ( container ) == 0 )	1721:6:53184:53245	158633	0	True				
ANR	158821	AndExpression	type != BP_VAR_UNSET && UNEXPECTED ( Z_STRLEN_P ( container ) == 0 )		158633	0		&&			
ANR	158822	EqualityExpression	type != BP_VAR_UNSET		158633	0		!=			
ANR	158823	Identifier	type		158633	0					
ANR	158824	Identifier	BP_VAR_UNSET		158633	1					
ANR	158825	CallExpression	UNEXPECTED ( Z_STRLEN_P ( container ) == 0 )		158633	1					
ANR	158826	Callee	UNEXPECTED		158633	0					
ANR	158827	Identifier	UNEXPECTED		158633	0					
ANR	158828	ArgumentList	Z_STRLEN_P ( container ) == 0		158633	1					
ANR	158829	Argument	Z_STRLEN_P ( container ) == 0		158633	0					
ANR	158830	EqualityExpression	Z_STRLEN_P ( container ) == 0		158633	0		==			
ANR	158831	CallExpression	Z_STRLEN_P ( container )		158633	0					
ANR	158832	Callee	Z_STRLEN_P		158633	0					
ANR	158833	Identifier	Z_STRLEN_P		158633	0					
ANR	158834	ArgumentList	container		158633	1					
ANR	158835	Argument	container		158633	0					
ANR	158836	Identifier	container		158633	0					
ANR	158837	PrimaryExpression	0		158633	1					
ANR	158838	CompoundStatement		26:70:858:858	158633	1					
ANR	158839	ExpressionStatement	zval_ptr_dtor_nogc ( container )	1722:3:53253:53282	158633	0	True				
ANR	158840	CallExpression	zval_ptr_dtor_nogc ( container )		158633	0					
ANR	158841	Callee	zval_ptr_dtor_nogc		158633	0					
ANR	158842	Identifier	zval_ptr_dtor_nogc		158633	0					
ANR	158843	ArgumentList	container		158633	1					
ANR	158844	Argument	container		158633	0					
ANR	158845	Identifier	container		158633	0					
ANR	158846	Label	convert_to_array :	1723:0:53284:53300	158633	1	True				
ANR	158847	Identifier	convert_to_array		158633	0					
ANR	158848	ExpressionStatement	ZVAL_NEW_ARR ( container )	1724:3:53305:53328	158633	2	True				
ANR	158849	CallExpression	ZVAL_NEW_ARR ( container )		158633	0					
ANR	158850	Callee	ZVAL_NEW_ARR		158633	0					
ANR	158851	Identifier	ZVAL_NEW_ARR		158633	0					
ANR	158852	ArgumentList	container		158633	1					
ANR	158853	Argument	container		158633	0					
ANR	158854	Identifier	container		158633	0					
ANR	158855	ExpressionStatement	"zend_hash_init ( Z_ARRVAL_P ( container ) , 8 , NULL , ZVAL_PTR_DTOR , 0 )"	1725:3:53333:53397	158633	3	True				
ANR	158856	CallExpression	"zend_hash_init ( Z_ARRVAL_P ( container ) , 8 , NULL , ZVAL_PTR_DTOR , 0 )"		158633	0					
ANR	158857	Callee	zend_hash_init		158633	0					
ANR	158858	Identifier	zend_hash_init		158633	0					
ANR	158859	ArgumentList	Z_ARRVAL_P ( container )		158633	1					
ANR	158860	Argument	Z_ARRVAL_P ( container )		158633	0					
ANR	158861	CallExpression	Z_ARRVAL_P ( container )		158633	0					
ANR	158862	Callee	Z_ARRVAL_P		158633	0					
ANR	158863	Identifier	Z_ARRVAL_P		158633	0					
ANR	158864	ArgumentList	container		158633	1					
ANR	158865	Argument	container		158633	0					
ANR	158866	Identifier	container		158633	0					
ANR	158867	Argument	8		158633	1					
ANR	158868	PrimaryExpression	8		158633	0					
ANR	158869	Argument	NULL		158633	2					
ANR	158870	Identifier	NULL		158633	0					
ANR	158871	Argument	ZVAL_PTR_DTOR		158633	3					
ANR	158872	Identifier	ZVAL_PTR_DTOR		158633	0					
ANR	158873	Argument	0		158633	4					
ANR	158874	PrimaryExpression	0		158633	0					
ANR	158875	GotoStatement	goto fetch_from_array ;	1726:3:53402:53423	158633	4	True				
ANR	158876	Identifier	fetch_from_array		158633	0					
ANR	158877	IfStatement	if ( dim == NULL )		158633	1					
ANR	158878	Condition	dim == NULL	1729:6:53436:53446	158633	0	True				
ANR	158879	EqualityExpression	dim == NULL		158633	0		==			
ANR	158880	Identifier	dim		158633	0					
ANR	158881	Identifier	NULL		158633	1					
ANR	158882	CompoundStatement		34:19:1059:1059	158633	1					
ANR	158883	ExpressionStatement	"zend_throw_error ( NULL , ""[] operator not supported for strings"" )"	1730:3:53454:53517	158633	0	True				
ANR	158884	CallExpression	"zend_throw_error ( NULL , ""[] operator not supported for strings"" )"		158633	0					
ANR	158885	Callee	zend_throw_error		158633	0					
ANR	158886	Identifier	zend_throw_error		158633	0					
ANR	158887	ArgumentList	NULL		158633	1					
ANR	158888	Argument	NULL		158633	0					
ANR	158889	Identifier	NULL		158633	0					
ANR	158890	Argument	"""[] operator not supported for strings"""		158633	1					
ANR	158891	PrimaryExpression	"""[] operator not supported for strings"""		158633	0					
ANR	158892	ExpressionStatement	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"	1731:3:53522:53560	158633	1	True				
ANR	158893	CallExpression	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"		158633	0					
ANR	158894	Callee	ZVAL_INDIRECT		158633	0					
ANR	158895	Identifier	ZVAL_INDIRECT		158633	0					
ANR	158896	ArgumentList	result		158633	1					
ANR	158897	Argument	result		158633	0					
ANR	158898	Identifier	result		158633	0					
ANR	158899	Argument	& EG ( error_zval )		158633	1					
ANR	158900	UnaryOperationExpression	& EG ( error_zval )		158633	0					
ANR	158901	UnaryOperator	&		158633	0					
ANR	158902	CallExpression	EG ( error_zval )		158633	1					
ANR	158903	Callee	EG		158633	0					
ANR	158904	Identifier	EG		158633	0					
ANR	158905	ArgumentList	error_zval		158633	1					
ANR	158906	Argument	error_zval		158633	0					
ANR	158907	Identifier	error_zval		158633	0					
ANR	158908	ElseStatement	else		158633	0					
ANR	158909	CompoundStatement		37:9:1181:1181	158633	0					
ANR	158910	ExpressionStatement	"zend_check_string_offset ( dim , type )"	1733:3:53576:53611	158633	0	True				
ANR	158911	CallExpression	"zend_check_string_offset ( dim , type )"		158633	0					
ANR	158912	Callee	zend_check_string_offset		158633	0					
ANR	158913	Identifier	zend_check_string_offset		158633	0					
ANR	158914	ArgumentList	dim		158633	1					
ANR	158915	Argument	dim		158633	0					
ANR	158916	Identifier	dim		158633	0					
ANR	158917	Argument	type		158633	1					
ANR	158918	Identifier	type		158633	0					
ANR	158919	ExpressionStatement	"ZVAL_INDIRECT ( result , NULL )"	1734:3:53616:53643	158633	1	True				
ANR	158920	CallExpression	"ZVAL_INDIRECT ( result , NULL )"		158633	0					
ANR	158921	Callee	ZVAL_INDIRECT		158633	0					
ANR	158922	Identifier	ZVAL_INDIRECT		158633	0					
ANR	158923	ArgumentList	result		158633	1					
ANR	158924	Argument	result		158633	0					
ANR	158925	Identifier	result		158633	0					
ANR	158926	Argument	NULL		158633	1					
ANR	158927	Identifier	NULL		158633	0					
ANR	158928	ElseStatement	else		158633	0					
ANR	158929	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_OBJECT ) )		158633	0					
ANR	158930	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_OBJECT )	1736:12:53687:53728	158633	0	True				
ANR	158931	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_OBJECT )		158633	0					
ANR	158932	Callee	EXPECTED		158633	0					
ANR	158933	Identifier	EXPECTED		158633	0					
ANR	158934	ArgumentList	Z_TYPE_P ( container ) == IS_OBJECT		158633	1					
ANR	158935	Argument	Z_TYPE_P ( container ) == IS_OBJECT		158633	0					
ANR	158936	EqualityExpression	Z_TYPE_P ( container ) == IS_OBJECT		158633	0		==			
ANR	158937	CallExpression	Z_TYPE_P ( container )		158633	0					
ANR	158938	Callee	Z_TYPE_P		158633	0					
ANR	158939	Identifier	Z_TYPE_P		158633	0					
ANR	158940	ArgumentList	container		158633	1					
ANR	158941	Argument	container		158633	0					
ANR	158942	Identifier	container		158633	0					
ANR	158943	Identifier	IS_OBJECT		158633	1					
ANR	158944	CompoundStatement		41:56:1341:1341	158633	1					
ANR	158945	IfStatement	if ( ! Z_OBJ_HT_P ( container ) -> read_dimension )		158633	0					
ANR	158946	Condition	! Z_OBJ_HT_P ( container ) -> read_dimension	1737:6:53739:53776	158633	0	True				
ANR	158947	UnaryOperationExpression	! Z_OBJ_HT_P ( container ) -> read_dimension		158633	0					
ANR	158948	UnaryOperator	!		158633	0					
ANR	158949	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_dimension		158633	1					
ANR	158950	CallExpression	Z_OBJ_HT_P ( container )		158633	0					
ANR	158951	Callee	Z_OBJ_HT_P		158633	0					
ANR	158952	Identifier	Z_OBJ_HT_P		158633	0					
ANR	158953	ArgumentList	container		158633	1					
ANR	158954	Argument	container		158633	0					
ANR	158955	Identifier	container		158633	0					
ANR	158956	Identifier	read_dimension		158633	1					
ANR	158957	CompoundStatement		42:46:1389:1389	158633	1					
ANR	158958	ExpressionStatement	"zend_throw_error ( NULL , ""Cannot use object as array"" )"	1738:3:53784:53836	158633	0	True				
ANR	158959	CallExpression	"zend_throw_error ( NULL , ""Cannot use object as array"" )"		158633	0					
ANR	158960	Callee	zend_throw_error		158633	0					
ANR	158961	Identifier	zend_throw_error		158633	0					
ANR	158962	ArgumentList	NULL		158633	1					
ANR	158963	Argument	NULL		158633	0					
ANR	158964	Identifier	NULL		158633	0					
ANR	158965	Argument	"""Cannot use object as array"""		158633	1					
ANR	158966	PrimaryExpression	"""Cannot use object as array"""		158633	0					
ANR	158967	ExpressionStatement	retval = & EG ( error_zval )	1739:3:53841:53865	158633	1	True				
ANR	158968	AssignmentExpression	retval = & EG ( error_zval )		158633	0		=			
ANR	158969	Identifier	retval		158633	0					
ANR	158970	UnaryOperationExpression	& EG ( error_zval )		158633	1					
ANR	158971	UnaryOperator	&		158633	0					
ANR	158972	CallExpression	EG ( error_zval )		158633	1					
ANR	158973	Callee	EG		158633	0					
ANR	158974	Identifier	EG		158633	0					
ANR	158975	ArgumentList	error_zval		158633	1					
ANR	158976	Argument	error_zval		158633	0					
ANR	158977	Identifier	error_zval		158633	0					
ANR	158978	ElseStatement	else		158633	0					
ANR	158979	CompoundStatement		45:9:1486:1486	158633	0					
ANR	158980	ExpressionStatement	"retval = Z_OBJ_HT_P ( container ) -> read_dimension ( container , dim , type , result )"	1741:3:53881:53957	158633	0	True				
ANR	158981	AssignmentExpression	"retval = Z_OBJ_HT_P ( container ) -> read_dimension ( container , dim , type , result )"		158633	0		=			
ANR	158982	Identifier	retval		158633	0					
ANR	158983	CallExpression	"Z_OBJ_HT_P ( container ) -> read_dimension ( container , dim , type , result )"		158633	1					
ANR	158984	Callee	Z_OBJ_HT_P ( container ) -> read_dimension		158633	0					
ANR	158985	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_dimension		158633	0					
ANR	158986	CallExpression	Z_OBJ_HT_P ( container )		158633	0					
ANR	158987	Callee	Z_OBJ_HT_P		158633	0					
ANR	158988	Identifier	Z_OBJ_HT_P		158633	0					
ANR	158989	ArgumentList	container		158633	1					
ANR	158990	Argument	container		158633	0					
ANR	158991	Identifier	container		158633	0					
ANR	158992	Identifier	read_dimension		158633	1					
ANR	158993	ArgumentList	container		158633	1					
ANR	158994	Argument	container		158633	0					
ANR	158995	Identifier	container		158633	0					
ANR	158996	Argument	dim		158633	1					
ANR	158997	Identifier	dim		158633	0					
ANR	158998	Argument	type		158633	2					
ANR	158999	Identifier	type		158633	0					
ANR	159000	Argument	result		158633	3					
ANR	159001	Identifier	result		158633	0					
ANR	159002	IfStatement	if ( UNEXPECTED ( retval == & EG ( uninitialized_zval ) ) )		158633	1					
ANR	159003	Condition	UNEXPECTED ( retval == & EG ( uninitialized_zval ) )	1743:7:53967:54011	158633	0	True				
ANR	159004	CallExpression	UNEXPECTED ( retval == & EG ( uninitialized_zval ) )		158633	0					
ANR	159005	Callee	UNEXPECTED		158633	0					
ANR	159006	Identifier	UNEXPECTED		158633	0					
ANR	159007	ArgumentList	retval == & EG ( uninitialized_zval )		158633	1					
ANR	159008	Argument	retval == & EG ( uninitialized_zval )		158633	0					
ANR	159009	EqualityExpression	retval == & EG ( uninitialized_zval )		158633	0		==			
ANR	159010	Identifier	retval		158633	0					
ANR	159011	UnaryOperationExpression	& EG ( uninitialized_zval )		158633	1					
ANR	159012	UnaryOperator	&		158633	0					
ANR	159013	CallExpression	EG ( uninitialized_zval )		158633	1					
ANR	159014	Callee	EG		158633	0					
ANR	159015	Identifier	EG		158633	0					
ANR	159016	ArgumentList	uninitialized_zval		158633	1					
ANR	159017	Argument	uninitialized_zval		158633	0					
ANR	159018	Identifier	uninitialized_zval		158633	0					
ANR	159019	CompoundStatement		49:4:1630:1673	158633	1					
ANR	159020	IdentifierDeclStatement	zend_class_entry * ce = Z_OBJCE_P ( container ) ;	1744:4:54020:54063	158633	0	True				
ANR	159021	IdentifierDecl	* ce = Z_OBJCE_P ( container )		158633	0					
ANR	159022	IdentifierDeclType	zend_class_entry *		158633	0					
ANR	159023	Identifier	ce		158633	1					
ANR	159024	AssignmentExpression	* ce = Z_OBJCE_P ( container )		158633	2		=			
ANR	159025	Identifier	ce		158633	0					
ANR	159026	CallExpression	Z_OBJCE_P ( container )		158633	1					
ANR	159027	Callee	Z_OBJCE_P		158633	0					
ANR	159028	Identifier	Z_OBJCE_P		158633	0					
ANR	159029	ArgumentList	container		158633	1					
ANR	159030	Argument	container		158633	0					
ANR	159031	Identifier	container		158633	0					
ANR	159032	ExpressionStatement	ZVAL_NULL ( result )	1746:4:54070:54087	158633	1	True				
ANR	159033	CallExpression	ZVAL_NULL ( result )		158633	0					
ANR	159034	Callee	ZVAL_NULL		158633	0					
ANR	159035	Identifier	ZVAL_NULL		158633	0					
ANR	159036	ArgumentList	result		158633	1					
ANR	159037	Argument	result		158633	0					
ANR	159038	Identifier	result		158633	0					
ANR	159039	ExpressionStatement	"zend_error ( E_NOTICE , ""Indirect modification of overloaded element of %s has no effect"" , ZSTR_VAL ( ce -> name ) )"	1747:4:54093:54200	158633	2	True				
ANR	159040	CallExpression	"zend_error ( E_NOTICE , ""Indirect modification of overloaded element of %s has no effect"" , ZSTR_VAL ( ce -> name ) )"		158633	0					
ANR	159041	Callee	zend_error		158633	0					
ANR	159042	Identifier	zend_error		158633	0					
ANR	159043	ArgumentList	E_NOTICE		158633	1					
ANR	159044	Argument	E_NOTICE		158633	0					
ANR	159045	Identifier	E_NOTICE		158633	0					
ANR	159046	Argument	"""Indirect modification of overloaded element of %s has no effect"""		158633	1					
ANR	159047	PrimaryExpression	"""Indirect modification of overloaded element of %s has no effect"""		158633	0					
ANR	159048	Argument	ZSTR_VAL ( ce -> name )		158633	2					
ANR	159049	CallExpression	ZSTR_VAL ( ce -> name )		158633	0					
ANR	159050	Callee	ZSTR_VAL		158633	0					
ANR	159051	Identifier	ZSTR_VAL		158633	0					
ANR	159052	ArgumentList	ce -> name		158633	1					
ANR	159053	Argument	ce -> name		158633	0					
ANR	159054	PtrMemberAccess	ce -> name		158633	0					
ANR	159055	Identifier	ce		158633	0					
ANR	159056	Identifier	name		158633	1					
ANR	159057	ElseStatement	else		158633	0					
ANR	159058	IfStatement	if ( EXPECTED ( retval && Z_TYPE_P ( retval ) != IS_UNDEF ) )		158633	0					
ANR	159059	Condition	EXPECTED ( retval && Z_TYPE_P ( retval ) != IS_UNDEF )	1748:14:54216:54263	158633	0	True				
ANR	159060	CallExpression	EXPECTED ( retval && Z_TYPE_P ( retval ) != IS_UNDEF )		158633	0					
ANR	159061	Callee	EXPECTED		158633	0					
ANR	159062	Identifier	EXPECTED		158633	0					
ANR	159063	ArgumentList	retval && Z_TYPE_P ( retval ) != IS_UNDEF		158633	1					
ANR	159064	Argument	retval && Z_TYPE_P ( retval ) != IS_UNDEF		158633	0					
ANR	159065	AndExpression	retval && Z_TYPE_P ( retval ) != IS_UNDEF		158633	0		&&			
ANR	159066	Identifier	retval		158633	0					
ANR	159067	EqualityExpression	Z_TYPE_P ( retval ) != IS_UNDEF		158633	1		!=			
ANR	159068	CallExpression	Z_TYPE_P ( retval )		158633	0					
ANR	159069	Callee	Z_TYPE_P		158633	0					
ANR	159070	Identifier	Z_TYPE_P		158633	0					
ANR	159071	ArgumentList	retval		158633	1					
ANR	159072	Argument	retval		158633	0					
ANR	159073	Identifier	retval		158633	0					
ANR	159074	Identifier	IS_UNDEF		158633	1					
ANR	159075	CompoundStatement		53:64:1876:1876	158633	1					
ANR	159076	IfStatement	if ( ! Z_ISREF_P ( retval ) )		158633	0					
ANR	159077	Condition	! Z_ISREF_P ( retval )	1749:8:54276:54293	158633	0	True				
ANR	159078	UnaryOperationExpression	! Z_ISREF_P ( retval )		158633	0					
ANR	159079	UnaryOperator	!		158633	0					
ANR	159080	CallExpression	Z_ISREF_P ( retval )		158633	1					
ANR	159081	Callee	Z_ISREF_P		158633	0					
ANR	159082	Identifier	Z_ISREF_P		158633	0					
ANR	159083	ArgumentList	retval		158633	1					
ANR	159084	Argument	retval		158633	0					
ANR	159085	Identifier	retval		158633	0					
ANR	159086	CompoundStatement		54:28:1906:1906	158633	1					
ANR	159087	IfStatement	if ( Z_REFCOUNTED_P ( retval ) && Z_REFCOUNT_P ( retval ) > 1 )		158633	0					
ANR	159088	Condition	Z_REFCOUNTED_P ( retval ) && Z_REFCOUNT_P ( retval ) > 1	1750:9:54307:54365	158633	0	True				
ANR	159089	AndExpression	Z_REFCOUNTED_P ( retval ) && Z_REFCOUNT_P ( retval ) > 1		158633	0		&&			
ANR	159090	CallExpression	Z_REFCOUNTED_P ( retval )		158633	0					
ANR	159091	Callee	Z_REFCOUNTED_P		158633	0					
ANR	159092	Identifier	Z_REFCOUNTED_P		158633	0					
ANR	159093	ArgumentList	retval		158633	1					
ANR	159094	Argument	retval		158633	0					
ANR	159095	Identifier	retval		158633	0					
ANR	159096	RelationalExpression	Z_REFCOUNT_P ( retval ) > 1		158633	1		>			
ANR	159097	CallExpression	Z_REFCOUNT_P ( retval )		158633	0					
ANR	159098	Callee	Z_REFCOUNT_P		158633	0					
ANR	159099	Identifier	Z_REFCOUNT_P		158633	0					
ANR	159100	ArgumentList	retval		158633	1					
ANR	159101	Argument	retval		158633	0					
ANR	159102	Identifier	retval		158633	0					
ANR	159103	PrimaryExpression	1		158633	1					
ANR	159104	CompoundStatement		56:35:1978:1978	158633	1					
ANR	159105	IfStatement	if ( Z_TYPE_P ( retval ) != IS_OBJECT )		158633	0					
ANR	159106	Condition	Z_TYPE_P ( retval ) != IS_OBJECT	1752:10:54380:54408	158633	0	True				
ANR	159107	EqualityExpression	Z_TYPE_P ( retval ) != IS_OBJECT		158633	0		!=			
ANR	159108	CallExpression	Z_TYPE_P ( retval )		158633	0					
ANR	159109	Callee	Z_TYPE_P		158633	0					
ANR	159110	Identifier	Z_TYPE_P		158633	0					
ANR	159111	ArgumentList	retval		158633	1					
ANR	159112	Argument	retval		158633	0					
ANR	159113	Identifier	retval		158633	0					
ANR	159114	Identifier	IS_OBJECT		158633	1					
ANR	159115	CompoundStatement		57:41:2021:2021	158633	1					
ANR	159116	ExpressionStatement	Z_DELREF_P ( retval )	1753:7:54420:54438	158633	0	True				
ANR	159117	CallExpression	Z_DELREF_P ( retval )		158633	0					
ANR	159118	Callee	Z_DELREF_P		158633	0					
ANR	159119	Identifier	Z_DELREF_P		158633	0					
ANR	159120	ArgumentList	retval		158633	1					
ANR	159121	Argument	retval		158633	0					
ANR	159122	Identifier	retval		158633	0					
ANR	159123	ExpressionStatement	"ZVAL_DUP ( result , retval )"	1754:7:54447:54471	158633	1	True				
ANR	159124	CallExpression	"ZVAL_DUP ( result , retval )"		158633	0					
ANR	159125	Callee	ZVAL_DUP		158633	0					
ANR	159126	Identifier	ZVAL_DUP		158633	0					
ANR	159127	ArgumentList	result		158633	1					
ANR	159128	Argument	result		158633	0					
ANR	159129	Identifier	result		158633	0					
ANR	159130	Argument	retval		158633	1					
ANR	159131	Identifier	retval		158633	0					
ANR	159132	ExpressionStatement	retval = result	1755:7:54480:54495	158633	2	True				
ANR	159133	AssignmentExpression	retval = result		158633	0		=			
ANR	159134	Identifier	retval		158633	0					
ANR	159135	Identifier	result		158633	1					
ANR	159136	ElseStatement	else		158633	0					
ANR	159137	CompoundStatement		61:13:2120:2120	158633	0					
ANR	159138	ExpressionStatement	"ZVAL_COPY_VALUE ( result , retval )"	1757:7:54519:54550	158633	0	True				
ANR	159139	CallExpression	"ZVAL_COPY_VALUE ( result , retval )"		158633	0					
ANR	159140	Callee	ZVAL_COPY_VALUE		158633	0					
ANR	159141	Identifier	ZVAL_COPY_VALUE		158633	0					
ANR	159142	ArgumentList	result		158633	1					
ANR	159143	Argument	result		158633	0					
ANR	159144	Identifier	result		158633	0					
ANR	159145	Argument	retval		158633	1					
ANR	159146	Identifier	retval		158633	0					
ANR	159147	ExpressionStatement	retval = result	1758:7:54559:54574	158633	1	True				
ANR	159148	AssignmentExpression	retval = result		158633	0		=			
ANR	159149	Identifier	retval		158633	0					
ANR	159150	Identifier	result		158633	1					
ANR	159151	IfStatement	if ( Z_TYPE_P ( retval ) != IS_OBJECT )		158633	1					
ANR	159152	Condition	Z_TYPE_P ( retval ) != IS_OBJECT	1761:9:54600:54628	158633	0	True				
ANR	159153	EqualityExpression	Z_TYPE_P ( retval ) != IS_OBJECT		158633	0		!=			
ANR	159154	CallExpression	Z_TYPE_P ( retval )		158633	0					
ANR	159155	Callee	Z_TYPE_P		158633	0					
ANR	159156	Identifier	Z_TYPE_P		158633	0					
ANR	159157	ArgumentList	retval		158633	1					
ANR	159158	Argument	retval		158633	0					
ANR	159159	Identifier	retval		158633	0					
ANR	159160	Identifier	IS_OBJECT		158633	1					
ANR	159161	CompoundStatement		67:6:2249:2292	158633	1					
ANR	159162	IdentifierDeclStatement	zend_class_entry * ce = Z_OBJCE_P ( container ) ;	1762:6:54639:54682	158633	0	True				
ANR	159163	IdentifierDecl	* ce = Z_OBJCE_P ( container )		158633	0					
ANR	159164	IdentifierDeclType	zend_class_entry *		158633	0					
ANR	159165	Identifier	ce		158633	1					
ANR	159166	AssignmentExpression	* ce = Z_OBJCE_P ( container )		158633	2		=			
ANR	159167	Identifier	ce		158633	0					
ANR	159168	CallExpression	Z_OBJCE_P ( container )		158633	1					
ANR	159169	Callee	Z_OBJCE_P		158633	0					
ANR	159170	Identifier	Z_OBJCE_P		158633	0					
ANR	159171	ArgumentList	container		158633	1					
ANR	159172	Argument	container		158633	0					
ANR	159173	Identifier	container		158633	0					
ANR	159174	ExpressionStatement	"zend_error ( E_NOTICE , ""Indirect modification of overloaded element of %s has no effect"" , ZSTR_VAL ( ce -> name ) )"	1763:6:54690:54797	158633	1	True				
ANR	159175	CallExpression	"zend_error ( E_NOTICE , ""Indirect modification of overloaded element of %s has no effect"" , ZSTR_VAL ( ce -> name ) )"		158633	0					
ANR	159176	Callee	zend_error		158633	0					
ANR	159177	Identifier	zend_error		158633	0					
ANR	159178	ArgumentList	E_NOTICE		158633	1					
ANR	159179	Argument	E_NOTICE		158633	0					
ANR	159180	Identifier	E_NOTICE		158633	0					
ANR	159181	Argument	"""Indirect modification of overloaded element of %s has no effect"""		158633	1					
ANR	159182	PrimaryExpression	"""Indirect modification of overloaded element of %s has no effect"""		158633	0					
ANR	159183	Argument	ZSTR_VAL ( ce -> name )		158633	2					
ANR	159184	CallExpression	ZSTR_VAL ( ce -> name )		158633	0					
ANR	159185	Callee	ZSTR_VAL		158633	0					
ANR	159186	Identifier	ZSTR_VAL		158633	0					
ANR	159187	ArgumentList	ce -> name		158633	1					
ANR	159188	Argument	ce -> name		158633	0					
ANR	159189	PtrMemberAccess	ce -> name		158633	0					
ANR	159190	Identifier	ce		158633	0					
ANR	159191	Identifier	name		158633	1					
ANR	159192	ElseStatement	else		158633	0					
ANR	159193	IfStatement	if ( UNEXPECTED ( Z_REFCOUNT_P ( retval ) == 1 ) )		158633	0					
ANR	159194	Condition	UNEXPECTED ( Z_REFCOUNT_P ( retval ) == 1 )	1765:15:54821:54857	158633	0	True				
ANR	159195	CallExpression	UNEXPECTED ( Z_REFCOUNT_P ( retval ) == 1 )		158633	0					
ANR	159196	Callee	UNEXPECTED		158633	0					
ANR	159197	Identifier	UNEXPECTED		158633	0					
ANR	159198	ArgumentList	Z_REFCOUNT_P ( retval ) == 1		158633	1					
ANR	159199	Argument	Z_REFCOUNT_P ( retval ) == 1		158633	0					
ANR	159200	EqualityExpression	Z_REFCOUNT_P ( retval ) == 1		158633	0		==			
ANR	159201	CallExpression	Z_REFCOUNT_P ( retval )		158633	0					
ANR	159202	Callee	Z_REFCOUNT_P		158633	0					
ANR	159203	Identifier	Z_REFCOUNT_P		158633	0					
ANR	159204	ArgumentList	retval		158633	1					
ANR	159205	Argument	retval		158633	0					
ANR	159206	Identifier	retval		158633	0					
ANR	159207	PrimaryExpression	1		158633	1					
ANR	159208	CompoundStatement		70:54:2470:2470	158633	1					
ANR	159209	ExpressionStatement	ZVAL_UNREF ( retval )	1766:5:54867:54885	158633	0	True				
ANR	159210	CallExpression	ZVAL_UNREF ( retval )		158633	0					
ANR	159211	Callee	ZVAL_UNREF		158633	0					
ANR	159212	Identifier	ZVAL_UNREF		158633	0					
ANR	159213	ArgumentList	retval		158633	1					
ANR	159214	Argument	retval		158633	0					
ANR	159215	Identifier	retval		158633	0					
ANR	159216	IfStatement	if ( result != retval )		158633	1					
ANR	159217	Condition	result != retval	1768:8:54901:54916	158633	0	True				
ANR	159218	EqualityExpression	result != retval		158633	0		!=			
ANR	159219	Identifier	result		158633	0					
ANR	159220	Identifier	retval		158633	1					
ANR	159221	CompoundStatement		73:26:2529:2529	158633	1					
ANR	159222	ExpressionStatement	"ZVAL_INDIRECT ( result , retval )"	1769:5:54926:54955	158633	0	True				
ANR	159223	CallExpression	"ZVAL_INDIRECT ( result , retval )"		158633	0					
ANR	159224	Callee	ZVAL_INDIRECT		158633	0					
ANR	159225	Identifier	ZVAL_INDIRECT		158633	0					
ANR	159226	ArgumentList	result		158633	1					
ANR	159227	Argument	result		158633	0					
ANR	159228	Identifier	result		158633	0					
ANR	159229	Argument	retval		158633	1					
ANR	159230	Identifier	retval		158633	0					
ANR	159231	ElseStatement	else		158633	0					
ANR	159232	CompoundStatement		76:10:2583:2583	158633	0					
ANR	159233	ExpressionStatement	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"	1772:4:54979:55017	158633	0	True				
ANR	159234	CallExpression	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"		158633	0					
ANR	159235	Callee	ZVAL_INDIRECT		158633	0					
ANR	159236	Identifier	ZVAL_INDIRECT		158633	0					
ANR	159237	ArgumentList	result		158633	1					
ANR	159238	Argument	result		158633	0					
ANR	159239	Identifier	result		158633	0					
ANR	159240	Argument	& EG ( error_zval )		158633	1					
ANR	159241	UnaryOperationExpression	& EG ( error_zval )		158633	0					
ANR	159242	UnaryOperator	&		158633	0					
ANR	159243	CallExpression	EG ( error_zval )		158633	1					
ANR	159244	Callee	EG		158633	0					
ANR	159245	Identifier	EG		158633	0					
ANR	159246	ArgumentList	error_zval		158633	1					
ANR	159247	Argument	error_zval		158633	0					
ANR	159248	Identifier	error_zval		158633	0					
ANR	159249	ElseStatement	else		158633	0					
ANR	159250	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) <= IS_FALSE ) )		158633	0					
ANR	159251	Condition	EXPECTED ( Z_TYPE_P ( container ) <= IS_FALSE )	1775:12:55040:55080	158633	0	True				
ANR	159252	CallExpression	EXPECTED ( Z_TYPE_P ( container ) <= IS_FALSE )		158633	0					
ANR	159253	Callee	EXPECTED		158633	0					
ANR	159254	Identifier	EXPECTED		158633	0					
ANR	159255	ArgumentList	Z_TYPE_P ( container ) <= IS_FALSE		158633	1					
ANR	159256	Argument	Z_TYPE_P ( container ) <= IS_FALSE		158633	0					
ANR	159257	RelationalExpression	Z_TYPE_P ( container ) <= IS_FALSE		158633	0		<=			
ANR	159258	CallExpression	Z_TYPE_P ( container )		158633	0					
ANR	159259	Callee	Z_TYPE_P		158633	0					
ANR	159260	Identifier	Z_TYPE_P		158633	0					
ANR	159261	ArgumentList	container		158633	1					
ANR	159262	Argument	container		158633	0					
ANR	159263	Identifier	container		158633	0					
ANR	159264	Identifier	IS_FALSE		158633	1					
ANR	159265	CompoundStatement		80:55:2693:2693	158633	1					
ANR	159266	IfStatement	if ( UNEXPECTED ( container == & EG ( error_zval ) ) )		158633	0					
ANR	159267	Condition	UNEXPECTED ( container == & EG ( error_zval ) )	1776:6:55091:55130	158633	0	True				
ANR	159268	CallExpression	UNEXPECTED ( container == & EG ( error_zval ) )		158633	0					
ANR	159269	Callee	UNEXPECTED		158633	0					
ANR	159270	Identifier	UNEXPECTED		158633	0					
ANR	159271	ArgumentList	container == & EG ( error_zval )		158633	1					
ANR	159272	Argument	container == & EG ( error_zval )		158633	0					
ANR	159273	EqualityExpression	container == & EG ( error_zval )		158633	0		==			
ANR	159274	Identifier	container		158633	0					
ANR	159275	UnaryOperationExpression	& EG ( error_zval )		158633	1					
ANR	159276	UnaryOperator	&		158633	0					
ANR	159277	CallExpression	EG ( error_zval )		158633	1					
ANR	159278	Callee	EG		158633	0					
ANR	159279	Identifier	EG		158633	0					
ANR	159280	ArgumentList	error_zval		158633	1					
ANR	159281	Argument	error_zval		158633	0					
ANR	159282	Identifier	error_zval		158633	0					
ANR	159283	CompoundStatement		81:48:2743:2743	158633	1					
ANR	159284	ExpressionStatement	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"	1777:3:55138:55176	158633	0	True				
ANR	159285	CallExpression	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"		158633	0					
ANR	159286	Callee	ZVAL_INDIRECT		158633	0					
ANR	159287	Identifier	ZVAL_INDIRECT		158633	0					
ANR	159288	ArgumentList	result		158633	1					
ANR	159289	Argument	result		158633	0					
ANR	159290	Identifier	result		158633	0					
ANR	159291	Argument	& EG ( error_zval )		158633	1					
ANR	159292	UnaryOperationExpression	& EG ( error_zval )		158633	0					
ANR	159293	UnaryOperator	&		158633	0					
ANR	159294	CallExpression	EG ( error_zval )		158633	1					
ANR	159295	Callee	EG		158633	0					
ANR	159296	Identifier	EG		158633	0					
ANR	159297	ArgumentList	error_zval		158633	1					
ANR	159298	Argument	error_zval		158633	0					
ANR	159299	Identifier	error_zval		158633	0					
ANR	159300	ElseStatement	else		158633	0					
ANR	159301	IfStatement	if ( type != BP_VAR_UNSET )		158633	0					
ANR	159302	Condition	type != BP_VAR_UNSET	1778:13:55191:55210	158633	0	True				
ANR	159303	EqualityExpression	type != BP_VAR_UNSET		158633	0		!=			
ANR	159304	Identifier	type		158633	0					
ANR	159305	Identifier	BP_VAR_UNSET		158633	1					
ANR	159306	CompoundStatement		83:35:2823:2823	158633	1					
ANR	159307	GotoStatement	goto convert_to_array ;	1779:3:55218:55239	158633	0	True				
ANR	159308	Identifier	convert_to_array		158633	0					
ANR	159309	ElseStatement	else		158633	0					
ANR	159310	CompoundStatement		85:9:2860:2860	158633	0					
ANR	159311	ExpressionStatement	ZVAL_NULL ( result )	1782:3:55283:55300	158633	0	True				
ANR	159312	CallExpression	ZVAL_NULL ( result )		158633	0					
ANR	159313	Callee	ZVAL_NULL		158633	0					
ANR	159314	Identifier	ZVAL_NULL		158633	0					
ANR	159315	ArgumentList	result		158633	1					
ANR	159316	Argument	result		158633	0					
ANR	159317	Identifier	result		158633	0					
ANR	159318	ElseStatement	else		158633	0					
ANR	159319	CompoundStatement		89:8:2924:2924	158633	0					
ANR	159320	IfStatement	if ( type == BP_VAR_UNSET )		158633	0					
ANR	159321	Condition	type == BP_VAR_UNSET	1785:6:55322:55341	158633	0	True				
ANR	159322	EqualityExpression	type == BP_VAR_UNSET		158633	0		==			
ANR	159323	Identifier	type		158633	0					
ANR	159324	Identifier	BP_VAR_UNSET		158633	1					
ANR	159325	CompoundStatement		90:28:2954:2954	158633	1					
ANR	159326	ExpressionStatement	"zend_error ( E_WARNING , ""Cannot unset offset in a non-array variable"" )"	1786:3:55349:55417	158633	0	True				
ANR	159327	CallExpression	"zend_error ( E_WARNING , ""Cannot unset offset in a non-array variable"" )"		158633	0					
ANR	159328	Callee	zend_error		158633	0					
ANR	159329	Identifier	zend_error		158633	0					
ANR	159330	ArgumentList	E_WARNING		158633	1					
ANR	159331	Argument	E_WARNING		158633	0					
ANR	159332	Identifier	E_WARNING		158633	0					
ANR	159333	Argument	"""Cannot unset offset in a non-array variable"""		158633	1					
ANR	159334	PrimaryExpression	"""Cannot unset offset in a non-array variable"""		158633	0					
ANR	159335	ExpressionStatement	ZVAL_NULL ( result )	1787:3:55422:55439	158633	1	True				
ANR	159336	CallExpression	ZVAL_NULL ( result )		158633	0					
ANR	159337	Callee	ZVAL_NULL		158633	0					
ANR	159338	Identifier	ZVAL_NULL		158633	0					
ANR	159339	ArgumentList	result		158633	1					
ANR	159340	Argument	result		158633	0					
ANR	159341	Identifier	result		158633	0					
ANR	159342	ElseStatement	else		158633	0					
ANR	159343	CompoundStatement		93:9:3060:3060	158633	0					
ANR	159344	ExpressionStatement	"zend_error ( E_WARNING , ""Cannot use a scalar value as an array"" )"	1789:3:55455:55517	158633	0	True				
ANR	159345	CallExpression	"zend_error ( E_WARNING , ""Cannot use a scalar value as an array"" )"		158633	0					
ANR	159346	Callee	zend_error		158633	0					
ANR	159347	Identifier	zend_error		158633	0					
ANR	159348	ArgumentList	E_WARNING		158633	1					
ANR	159349	Argument	E_WARNING		158633	0					
ANR	159350	Identifier	E_WARNING		158633	0					
ANR	159351	Argument	"""Cannot use a scalar value as an array"""		158633	1					
ANR	159352	PrimaryExpression	"""Cannot use a scalar value as an array"""		158633	0					
ANR	159353	ExpressionStatement	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"	1790:3:55522:55560	158633	1	True				
ANR	159354	CallExpression	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"		158633	0					
ANR	159355	Callee	ZVAL_INDIRECT		158633	0					
ANR	159356	Identifier	ZVAL_INDIRECT		158633	0					
ANR	159357	ArgumentList	result		158633	1					
ANR	159358	Argument	result		158633	0					
ANR	159359	Identifier	result		158633	0					
ANR	159360	Argument	& EG ( error_zval )		158633	1					
ANR	159361	UnaryOperationExpression	& EG ( error_zval )		158633	0					
ANR	159362	UnaryOperator	&		158633	0					
ANR	159363	CallExpression	EG ( error_zval )		158633	1					
ANR	159364	Callee	EG		158633	0					
ANR	159365	Identifier	EG		158633	0					
ANR	159366	ArgumentList	error_zval		158633	1					
ANR	159367	Argument	error_zval		158633	0					
ANR	159368	Identifier	error_zval		158633	0					
ANR	159369	ReturnType	static zend_always_inline void		158633	1					
ANR	159370	Identifier	zend_fetch_dimension_address		158633	2					
ANR	159371	ParameterList	"zval * result , zval * container , zval * dim , int dim_type , int type"		158633	3					
ANR	159372	Parameter	zval * result	1695:60:52323:52334	158633	0	True				
ANR	159373	ParameterType	zval *		158633	0					
ANR	159374	Identifier	result		158633	1					
ANR	159375	Parameter	zval * container	1695:74:52337:52351	158633	1	True				
ANR	159376	ParameterType	zval *		158633	0					
ANR	159377	Identifier	container		158633	1					
ANR	159378	Parameter	zval * dim	1695:91:52354:52362	158633	2	True				
ANR	159379	ParameterType	zval *		158633	0					
ANR	159380	Identifier	dim		158633	1					
ANR	159381	Parameter	int dim_type	1695:102:52365:52376	158633	3	True				
ANR	159382	ParameterType	int		158633	0					
ANR	159383	Identifier	dim_type		158633	1					
ANR	159384	Parameter	int type	1695:116:52379:52386	158633	4	True				
ANR	159385	ParameterType	int		158633	0					
ANR	159386	Identifier	type		158633	1					
ANR	159387	CFGEntryNode	ENTRY		158633		True				
ANR	159388	CFGExitNode	EXIT		158633		True				
ANR	159389	Symbol	container		158633						
ANR	159390	Symbol	zend_hash_next_index_insert		158633						
ANR	159391	Symbol	dim_type		158633						
ANR	159392	Symbol	Z_OBJ_HT_P ( container ) -> read_dimension		158633						
ANR	159393	Symbol	dim		158633						
ANR	159394	Symbol	* ce		158633						
ANR	159395	Symbol	type		158633						
ANR	159396	Symbol	& EG		158633						
ANR	159397	Symbol	Z_REFCOUNT_P		158633						
ANR	159398	Symbol	result		158633						
ANR	159399	Symbol	UNEXPECTED		158633						
ANR	159400	Symbol	E_WARNING		158633						
ANR	159401	Symbol	IS_REFERENCE		158633						
ANR	159402	Symbol	IS_ARRAY		158633						
ANR	159403	Symbol	Z_OBJCE_P		158633						
ANR	159404	Symbol	Z_STRLEN_P		158633						
ANR	159405	Symbol	IS_STRING		158633						
ANR	159406	Symbol	ce -> name		158633						
ANR	159407	Symbol	Z_ARRVAL_P		158633						
ANR	159408	Symbol	IS_UNDEF		158633						
ANR	159409	Symbol	IS_FALSE		158633						
ANR	159410	Symbol	uninitialized_zval		158633						
ANR	159411	Symbol	ce		158633						
ANR	159412	Symbol	NULL		158633						
ANR	159413	Symbol	E_NOTICE		158633						
ANR	159414	Symbol	Z_TYPE_P		158633						
ANR	159415	Symbol	* Z_OBJ_HT_P		158633						
ANR	159416	Symbol	retval		158633						
ANR	159417	Symbol	ZVAL_PTR_DTOR		158633						
ANR	159418	Symbol	ZSTR_VAL		158633						
ANR	159419	Symbol	error_zval		158633						
ANR	159420	Symbol	Z_REFVAL_P		158633						
ANR	159421	Symbol	zend_fetch_dimension_address_inner		158633						
ANR	159422	Symbol	Z_OBJ_HT_P		158633						
ANR	159423	Symbol	Z_REFCOUNTED_P		158633						
ANR	159424	Symbol	IS_OBJECT		158633						
ANR	159425	Symbol	EXPECTED		158633						
ANR	159426	Symbol	BP_VAR_UNSET		158633						
ANR	159427	Symbol	Z_ISREF_P		158633						
ANR	159428	Function	zend_fetch_dimension_address_W	1795:0:55572:55774							
ANR	159429	FunctionDef	"zend_fetch_dimension_address_W (zval * result , zval * container_ptr , zval * dim , int dim_type)"		159428	0					
ANR	159430	CompoundStatement		1796:0:55693:55774	159428	0					
ANR	159431	ExpressionStatement	"zend_fetch_dimension_address ( result , container_ptr , dim , dim_type , BP_VAR_W )"	1797:1:55696:55772	159428	0	True				
ANR	159432	CallExpression	"zend_fetch_dimension_address ( result , container_ptr , dim , dim_type , BP_VAR_W )"		159428	0					
ANR	159433	Callee	zend_fetch_dimension_address		159428	0					
ANR	159434	Identifier	zend_fetch_dimension_address		159428	0					
ANR	159435	ArgumentList	result		159428	1					
ANR	159436	Argument	result		159428	0					
ANR	159437	Identifier	result		159428	0					
ANR	159438	Argument	container_ptr		159428	1					
ANR	159439	Identifier	container_ptr		159428	0					
ANR	159440	Argument	dim		159428	2					
ANR	159441	Identifier	dim		159428	0					
ANR	159442	Argument	dim_type		159428	3					
ANR	159443	Identifier	dim_type		159428	0					
ANR	159444	Argument	BP_VAR_W		159428	4					
ANR	159445	Identifier	BP_VAR_W		159428	0					
ANR	159446	ReturnType	static zend_never_inline void		159428	1					
ANR	159447	Identifier	zend_fetch_dimension_address_W		159428	2					
ANR	159448	ParameterList	"zval * result , zval * container_ptr , zval * dim , int dim_type"		159428	3					
ANR	159449	Parameter	zval * result	1795:61:55633:55644	159428	0	True				
ANR	159450	ParameterType	zval *		159428	0					
ANR	159451	Identifier	result		159428	1					
ANR	159452	Parameter	zval * container_ptr	1795:75:55647:55665	159428	1	True				
ANR	159453	ParameterType	zval *		159428	0					
ANR	159454	Identifier	container_ptr		159428	1					
ANR	159455	Parameter	zval * dim	1795:96:55668:55676	159428	2	True				
ANR	159456	ParameterType	zval *		159428	0					
ANR	159457	Identifier	dim		159428	1					
ANR	159458	Parameter	int dim_type	1795:107:55679:55690	159428	3	True				
ANR	159459	ParameterType	int		159428	0					
ANR	159460	Identifier	dim_type		159428	1					
ANR	159461	CFGEntryNode	ENTRY		159428		True				
ANR	159462	CFGExitNode	EXIT		159428		True				
ANR	159463	Symbol	result		159428						
ANR	159464	Symbol	container_ptr		159428						
ANR	159465	Symbol	dim_type		159428						
ANR	159466	Symbol	dim		159428						
ANR	159467	Symbol	BP_VAR_W		159428						
ANR	159468	Function	zend_fetch_dimension_address_RW	1800:0:55777:55981							
ANR	159469	FunctionDef	"zend_fetch_dimension_address_RW (zval * result , zval * container_ptr , zval * dim , int dim_type)"		159468	0					
ANR	159470	CompoundStatement		1801:0:55899:55981	159468	0					
ANR	159471	ExpressionStatement	"zend_fetch_dimension_address ( result , container_ptr , dim , dim_type , BP_VAR_RW )"	1802:1:55902:55979	159468	0	True				
ANR	159472	CallExpression	"zend_fetch_dimension_address ( result , container_ptr , dim , dim_type , BP_VAR_RW )"		159468	0					
ANR	159473	Callee	zend_fetch_dimension_address		159468	0					
ANR	159474	Identifier	zend_fetch_dimension_address		159468	0					
ANR	159475	ArgumentList	result		159468	1					
ANR	159476	Argument	result		159468	0					
ANR	159477	Identifier	result		159468	0					
ANR	159478	Argument	container_ptr		159468	1					
ANR	159479	Identifier	container_ptr		159468	0					
ANR	159480	Argument	dim		159468	2					
ANR	159481	Identifier	dim		159468	0					
ANR	159482	Argument	dim_type		159468	3					
ANR	159483	Identifier	dim_type		159468	0					
ANR	159484	Argument	BP_VAR_RW		159468	4					
ANR	159485	Identifier	BP_VAR_RW		159468	0					
ANR	159486	ReturnType	static zend_never_inline void		159468	1					
ANR	159487	Identifier	zend_fetch_dimension_address_RW		159468	2					
ANR	159488	ParameterList	"zval * result , zval * container_ptr , zval * dim , int dim_type"		159468	3					
ANR	159489	Parameter	zval * result	1800:62:55839:55850	159468	0	True				
ANR	159490	ParameterType	zval *		159468	0					
ANR	159491	Identifier	result		159468	1					
ANR	159492	Parameter	zval * container_ptr	1800:76:55853:55871	159468	1	True				
ANR	159493	ParameterType	zval *		159468	0					
ANR	159494	Identifier	container_ptr		159468	1					
ANR	159495	Parameter	zval * dim	1800:97:55874:55882	159468	2	True				
ANR	159496	ParameterType	zval *		159468	0					
ANR	159497	Identifier	dim		159468	1					
ANR	159498	Parameter	int dim_type	1800:108:55885:55896	159468	3	True				
ANR	159499	ParameterType	int		159468	0					
ANR	159500	Identifier	dim_type		159468	1					
ANR	159501	CFGEntryNode	ENTRY		159468		True				
ANR	159502	CFGExitNode	EXIT		159468		True				
ANR	159503	Symbol	result		159468						
ANR	159504	Symbol	BP_VAR_RW		159468						
ANR	159505	Symbol	container_ptr		159468						
ANR	159506	Symbol	dim_type		159468						
ANR	159507	Symbol	dim		159468						
ANR	159508	Function	zend_fetch_dimension_address_UNSET	1805:0:55984:56194							
ANR	159509	FunctionDef	"zend_fetch_dimension_address_UNSET (zval * result , zval * container_ptr , zval * dim , int dim_type)"		159508	0					
ANR	159510	CompoundStatement		1806:0:56109:56194	159508	0					
ANR	159511	ExpressionStatement	"zend_fetch_dimension_address ( result , container_ptr , dim , dim_type , BP_VAR_UNSET )"	1807:1:56112:56192	159508	0	True				
ANR	159512	CallExpression	"zend_fetch_dimension_address ( result , container_ptr , dim , dim_type , BP_VAR_UNSET )"		159508	0					
ANR	159513	Callee	zend_fetch_dimension_address		159508	0					
ANR	159514	Identifier	zend_fetch_dimension_address		159508	0					
ANR	159515	ArgumentList	result		159508	1					
ANR	159516	Argument	result		159508	0					
ANR	159517	Identifier	result		159508	0					
ANR	159518	Argument	container_ptr		159508	1					
ANR	159519	Identifier	container_ptr		159508	0					
ANR	159520	Argument	dim		159508	2					
ANR	159521	Identifier	dim		159508	0					
ANR	159522	Argument	dim_type		159508	3					
ANR	159523	Identifier	dim_type		159508	0					
ANR	159524	Argument	BP_VAR_UNSET		159508	4					
ANR	159525	Identifier	BP_VAR_UNSET		159508	0					
ANR	159526	ReturnType	static zend_never_inline void		159508	1					
ANR	159527	Identifier	zend_fetch_dimension_address_UNSET		159508	2					
ANR	159528	ParameterList	"zval * result , zval * container_ptr , zval * dim , int dim_type"		159508	3					
ANR	159529	Parameter	zval * result	1805:65:56049:56060	159508	0	True				
ANR	159530	ParameterType	zval *		159508	0					
ANR	159531	Identifier	result		159508	1					
ANR	159532	Parameter	zval * container_ptr	1805:79:56063:56081	159508	1	True				
ANR	159533	ParameterType	zval *		159508	0					
ANR	159534	Identifier	container_ptr		159508	1					
ANR	159535	Parameter	zval * dim	1805:100:56084:56092	159508	2	True				
ANR	159536	ParameterType	zval *		159508	0					
ANR	159537	Identifier	dim		159508	1					
ANR	159538	Parameter	int dim_type	1805:111:56095:56106	159508	3	True				
ANR	159539	ParameterType	int		159508	0					
ANR	159540	Identifier	dim_type		159508	1					
ANR	159541	CFGEntryNode	ENTRY		159508		True				
ANR	159542	CFGExitNode	EXIT		159508		True				
ANR	159543	Symbol	result		159508						
ANR	159544	Symbol	container_ptr		159508						
ANR	159545	Symbol	dim_type		159508						
ANR	159546	Symbol	dim		159508						
ANR	159547	Symbol	BP_VAR_UNSET		159508						
ANR	159548	Function	zend_fetch_dimension_address_read	1810:0:56197:58605							
ANR	159549	FunctionDef	"zend_fetch_dimension_address_read (zval * result , zval * container , zval * dim , int dim_type , int type)"		159548	0					
ANR	159550	CompoundStatement		1811:0:56328:58605	159548	0					
ANR	159551	IdentifierDeclStatement	zval * retval ;	1812:1:56331:56343	159548	0	True				
ANR	159552	IdentifierDecl	* retval		159548	0					
ANR	159553	IdentifierDeclType	zval *		159548	0					
ANR	159554	Identifier	retval		159548	1					
ANR	159555	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY ) )		159548	1					
ANR	159556	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY )	1814:5:56351:56391	159548	0	True				
ANR	159557	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY )		159548	0					
ANR	159558	Callee	EXPECTED		159548	0					
ANR	159559	Identifier	EXPECTED		159548	0					
ANR	159560	ArgumentList	Z_TYPE_P ( container ) == IS_ARRAY		159548	1					
ANR	159561	Argument	Z_TYPE_P ( container ) == IS_ARRAY		159548	0					
ANR	159562	EqualityExpression	Z_TYPE_P ( container ) == IS_ARRAY		159548	0		==			
ANR	159563	CallExpression	Z_TYPE_P ( container )		159548	0					
ANR	159564	Callee	Z_TYPE_P		159548	0					
ANR	159565	Identifier	Z_TYPE_P		159548	0					
ANR	159566	ArgumentList	container		159548	1					
ANR	159567	Argument	container		159548	0					
ANR	159568	Identifier	container		159548	0					
ANR	159569	Identifier	IS_ARRAY		159548	1					
ANR	159570	CompoundStatement		4:48:65:65	159548	1					
ANR	159571	Label	try_array :	1815:0:56396:56405	159548	0	True				
ANR	159572	Identifier	try_array		159548	0					
ANR	159573	ExpressionStatement	"retval = zend_fetch_dimension_address_inner ( Z_ARRVAL_P ( container ) , dim , dim_type , type )"	1816:2:56409:56496	159548	1	True				
ANR	159574	AssignmentExpression	"retval = zend_fetch_dimension_address_inner ( Z_ARRVAL_P ( container ) , dim , dim_type , type )"		159548	0		=			
ANR	159575	Identifier	retval		159548	0					
ANR	159576	CallExpression	"zend_fetch_dimension_address_inner ( Z_ARRVAL_P ( container ) , dim , dim_type , type )"		159548	1					
ANR	159577	Callee	zend_fetch_dimension_address_inner		159548	0					
ANR	159578	Identifier	zend_fetch_dimension_address_inner		159548	0					
ANR	159579	ArgumentList	Z_ARRVAL_P ( container )		159548	1					
ANR	159580	Argument	Z_ARRVAL_P ( container )		159548	0					
ANR	159581	CallExpression	Z_ARRVAL_P ( container )		159548	0					
ANR	159582	Callee	Z_ARRVAL_P		159548	0					
ANR	159583	Identifier	Z_ARRVAL_P		159548	0					
ANR	159584	ArgumentList	container		159548	1					
ANR	159585	Argument	container		159548	0					
ANR	159586	Identifier	container		159548	0					
ANR	159587	Argument	dim		159548	1					
ANR	159588	Identifier	dim		159548	0					
ANR	159589	Argument	dim_type		159548	2					
ANR	159590	Identifier	dim_type		159548	0					
ANR	159591	Argument	type		159548	3					
ANR	159592	Identifier	type		159548	0					
ANR	159593	ExpressionStatement	"ZVAL_COPY ( result , retval )"	1817:2:56500:56525	159548	2	True				
ANR	159594	CallExpression	"ZVAL_COPY ( result , retval )"		159548	0					
ANR	159595	Callee	ZVAL_COPY		159548	0					
ANR	159596	Identifier	ZVAL_COPY		159548	0					
ANR	159597	ArgumentList	result		159548	1					
ANR	159598	Argument	result		159548	0					
ANR	159599	Identifier	result		159548	0					
ANR	159600	Argument	retval		159548	1					
ANR	159601	Identifier	retval		159548	0					
ANR	159602	ReturnStatement	return ;	1818:2:56529:56535	159548	3	True				
ANR	159603	ElseStatement	else		159548	0					
ANR	159604	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_REFERENCE ) )		159548	0					
ANR	159605	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_REFERENCE )	1819:12:56549:56593	159548	0	True				
ANR	159606	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_REFERENCE )		159548	0					
ANR	159607	Callee	EXPECTED		159548	0					
ANR	159608	Identifier	EXPECTED		159548	0					
ANR	159609	ArgumentList	Z_TYPE_P ( container ) == IS_REFERENCE		159548	1					
ANR	159610	Argument	Z_TYPE_P ( container ) == IS_REFERENCE		159548	0					
ANR	159611	EqualityExpression	Z_TYPE_P ( container ) == IS_REFERENCE		159548	0		==			
ANR	159612	CallExpression	Z_TYPE_P ( container )		159548	0					
ANR	159613	Callee	Z_TYPE_P		159548	0					
ANR	159614	Identifier	Z_TYPE_P		159548	0					
ANR	159615	ArgumentList	container		159548	1					
ANR	159616	Argument	container		159548	0					
ANR	159617	Identifier	container		159548	0					
ANR	159618	Identifier	IS_REFERENCE		159548	1					
ANR	159619	CompoundStatement		9:59:267:267	159548	1					
ANR	159620	ExpressionStatement	container = Z_REFVAL_P ( container )	1820:2:56600:56633	159548	0	True				
ANR	159621	AssignmentExpression	container = Z_REFVAL_P ( container )		159548	0		=			
ANR	159622	Identifier	container		159548	0					
ANR	159623	CallExpression	Z_REFVAL_P ( container )		159548	1					
ANR	159624	Callee	Z_REFVAL_P		159548	0					
ANR	159625	Identifier	Z_REFVAL_P		159548	0					
ANR	159626	ArgumentList	container		159548	1					
ANR	159627	Argument	container		159548	0					
ANR	159628	Identifier	container		159548	0					
ANR	159629	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY ) )		159548	1					
ANR	159630	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY )	1821:6:56641:56681	159548	0	True				
ANR	159631	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_ARRAY )		159548	0					
ANR	159632	Callee	EXPECTED		159548	0					
ANR	159633	Identifier	EXPECTED		159548	0					
ANR	159634	ArgumentList	Z_TYPE_P ( container ) == IS_ARRAY		159548	1					
ANR	159635	Argument	Z_TYPE_P ( container ) == IS_ARRAY		159548	0					
ANR	159636	EqualityExpression	Z_TYPE_P ( container ) == IS_ARRAY		159548	0		==			
ANR	159637	CallExpression	Z_TYPE_P ( container )		159548	0					
ANR	159638	Callee	Z_TYPE_P		159548	0					
ANR	159639	Identifier	Z_TYPE_P		159548	0					
ANR	159640	ArgumentList	container		159548	1					
ANR	159641	Argument	container		159548	0					
ANR	159642	Identifier	container		159548	0					
ANR	159643	Identifier	IS_ARRAY		159548	1					
ANR	159644	CompoundStatement		11:49:355:355	159548	1					
ANR	159645	GotoStatement	goto try_array ;	1822:3:56689:56703	159548	0	True				
ANR	159646	Identifier	try_array		159548	0					
ANR	159647	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_STRING ) )		159548	2					
ANR	159648	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_STRING )	1825:5:56717:56758	159548	0	True				
ANR	159649	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_STRING )		159548	0					
ANR	159650	Callee	EXPECTED		159548	0					
ANR	159651	Identifier	EXPECTED		159548	0					
ANR	159652	ArgumentList	Z_TYPE_P ( container ) == IS_STRING		159548	1					
ANR	159653	Argument	Z_TYPE_P ( container ) == IS_STRING		159548	0					
ANR	159654	EqualityExpression	Z_TYPE_P ( container ) == IS_STRING		159548	0		==			
ANR	159655	CallExpression	Z_TYPE_P ( container )		159548	0					
ANR	159656	Callee	Z_TYPE_P		159548	0					
ANR	159657	Identifier	Z_TYPE_P		159548	0					
ANR	159658	ArgumentList	container		159548	1					
ANR	159659	Argument	container		159548	0					
ANR	159660	Identifier	container		159548	0					
ANR	159661	Identifier	IS_STRING		159548	1					
ANR	159662	CompoundStatement		16:2:436:452	159548	1					
ANR	159663	IdentifierDeclStatement	zend_long offset ;	1826:2:56765:56781	159548	0	True				
ANR	159664	IdentifierDecl	offset		159548	0					
ANR	159665	IdentifierDeclType	zend_long		159548	0					
ANR	159666	Identifier	offset		159548	1					
ANR	159667	Label	try_string_offset :	1828:0:56784:56801	159548	1	True				
ANR	159668	Identifier	try_string_offset		159548	0					
ANR	159669	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( dim ) != IS_LONG ) )		159548	2					
ANR	159670	Condition	UNEXPECTED ( Z_TYPE_P ( dim ) != IS_LONG )	1829:6:56809:56844	159548	0	True				
ANR	159671	CallExpression	UNEXPECTED ( Z_TYPE_P ( dim ) != IS_LONG )		159548	0					
ANR	159672	Callee	UNEXPECTED		159548	0					
ANR	159673	Identifier	UNEXPECTED		159548	0					
ANR	159674	ArgumentList	Z_TYPE_P ( dim ) != IS_LONG		159548	1					
ANR	159675	Argument	Z_TYPE_P ( dim ) != IS_LONG		159548	0					
ANR	159676	EqualityExpression	Z_TYPE_P ( dim ) != IS_LONG		159548	0		!=			
ANR	159677	CallExpression	Z_TYPE_P ( dim )		159548	0					
ANR	159678	Callee	Z_TYPE_P		159548	0					
ANR	159679	Identifier	Z_TYPE_P		159548	0					
ANR	159680	ArgumentList	dim		159548	1					
ANR	159681	Argument	dim		159548	0					
ANR	159682	Identifier	dim		159548	0					
ANR	159683	Identifier	IS_LONG		159548	1					
ANR	159684	CompoundStatement		19:44:518:518	159548	1					
ANR	159685	SwitchStatement	switch ( Z_TYPE_P ( dim ) )		159548	0					
ANR	159686	Condition	Z_TYPE_P ( dim )	1830:10:56859:56871	159548	0	True				
ANR	159687	CallExpression	Z_TYPE_P ( dim )		159548	0					
ANR	159688	Callee	Z_TYPE_P		159548	0					
ANR	159689	Identifier	Z_TYPE_P		159548	0					
ANR	159690	ArgumentList	dim		159548	1					
ANR	159691	Argument	dim		159548	0					
ANR	159692	Identifier	dim		159548	0					
ANR	159693	CompoundStatement		20:25:545:545	159548	1					
ANR	159694	Label	case IS_STRING :	1832:4:56904:56918	159548	0	True				
ANR	159695	Identifier	IS_STRING		159548	0					
ANR	159696	IfStatement	"if ( IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 ) )"		159548	1					
ANR	159697	Condition	"IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"	1833:9:56929:57006	159548	0	True				
ANR	159698	EqualityExpression	"IS_LONG == is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"		159548	0		==			
ANR	159699	Identifier	IS_LONG		159548	0					
ANR	159700	CallExpression	"is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , NULL , NULL , - 1 )"		159548	1					
ANR	159701	Callee	is_numeric_string		159548	0					
ANR	159702	Identifier	is_numeric_string		159548	0					
ANR	159703	ArgumentList	Z_STRVAL_P ( dim )		159548	1					
ANR	159704	Argument	Z_STRVAL_P ( dim )		159548	0					
ANR	159705	CallExpression	Z_STRVAL_P ( dim )		159548	0					
ANR	159706	Callee	Z_STRVAL_P		159548	0					
ANR	159707	Identifier	Z_STRVAL_P		159548	0					
ANR	159708	ArgumentList	dim		159548	1					
ANR	159709	Argument	dim		159548	0					
ANR	159710	Identifier	dim		159548	0					
ANR	159711	Argument	Z_STRLEN_P ( dim )		159548	1					
ANR	159712	CallExpression	Z_STRLEN_P ( dim )		159548	0					
ANR	159713	Callee	Z_STRLEN_P		159548	0					
ANR	159714	Identifier	Z_STRLEN_P		159548	0					
ANR	159715	ArgumentList	dim		159548	1					
ANR	159716	Argument	dim		159548	0					
ANR	159717	Identifier	dim		159548	0					
ANR	159718	Argument	NULL		159548	2					
ANR	159719	Identifier	NULL		159548	0					
ANR	159720	Argument	NULL		159548	3					
ANR	159721	Identifier	NULL		159548	0					
ANR	159722	Argument	- 1		159548	4					
ANR	159723	UnaryOperationExpression	- 1		159548	0					
ANR	159724	UnaryOperator	-		159548	0					
ANR	159725	PrimaryExpression	1		159548	1					
ANR	159726	CompoundStatement		23:89:680:680	159548	1					
ANR	159727	BreakStatement	break ;	1834:6:57017:57022	159548	0	True				
ANR	159728	IfStatement	if ( type == BP_VAR_IS )		159548	2					
ANR	159729	Condition	type == BP_VAR_IS	1836:9:57040:57056	159548	0	True				
ANR	159730	EqualityExpression	type == BP_VAR_IS		159548	0		==			
ANR	159731	Identifier	type		159548	0					
ANR	159732	Identifier	BP_VAR_IS		159548	1					
ANR	159733	CompoundStatement		26:28:730:730	159548	1					
ANR	159734	ExpressionStatement	ZVAL_NULL ( result )	1837:6:57067:57084	159548	0	True				
ANR	159735	CallExpression	ZVAL_NULL ( result )		159548	0					
ANR	159736	Callee	ZVAL_NULL		159548	0					
ANR	159737	Identifier	ZVAL_NULL		159548	0					
ANR	159738	ArgumentList	result		159548	1					
ANR	159739	Argument	result		159548	0					
ANR	159740	Identifier	result		159548	0					
ANR	159741	ReturnStatement	return ;	1838:6:57092:57098	159548	1	True				
ANR	159742	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal string offset '%s'"" , Z_STRVAL_P ( dim ) )"	1840:5:57112:57180	159548	3	True				
ANR	159743	CallExpression	"zend_error ( E_WARNING , ""Illegal string offset '%s'"" , Z_STRVAL_P ( dim ) )"		159548	0					
ANR	159744	Callee	zend_error		159548	0					
ANR	159745	Identifier	zend_error		159548	0					
ANR	159746	ArgumentList	E_WARNING		159548	1					
ANR	159747	Argument	E_WARNING		159548	0					
ANR	159748	Identifier	E_WARNING		159548	0					
ANR	159749	Argument	"""Illegal string offset '%s'"""		159548	1					
ANR	159750	PrimaryExpression	"""Illegal string offset '%s'"""		159548	0					
ANR	159751	Argument	Z_STRVAL_P ( dim )		159548	2					
ANR	159752	CallExpression	Z_STRVAL_P ( dim )		159548	0					
ANR	159753	Callee	Z_STRVAL_P		159548	0					
ANR	159754	Identifier	Z_STRVAL_P		159548	0					
ANR	159755	ArgumentList	dim		159548	1					
ANR	159756	Argument	dim		159548	0					
ANR	159757	Identifier	dim		159548	0					
ANR	159758	BreakStatement	break ;	1841:5:57187:57192	159548	4	True				
ANR	159759	Label	case IS_DOUBLE :	1842:4:57198:57212	159548	5	True				
ANR	159760	Identifier	IS_DOUBLE		159548	0					
ANR	159761	Label	case IS_NULL :	1843:4:57218:57230	159548	6	True				
ANR	159762	Identifier	IS_NULL		159548	0					
ANR	159763	Label	case IS_FALSE :	1844:4:57236:57249	159548	7	True				
ANR	159764	Identifier	IS_FALSE		159548	0					
ANR	159765	Label	case IS_TRUE :	1845:4:57255:57267	159548	8	True				
ANR	159766	Identifier	IS_TRUE		159548	0					
ANR	159767	IfStatement	if ( type != BP_VAR_IS )		159548	9					
ANR	159768	Condition	type != BP_VAR_IS	1846:9:57278:57294	159548	0	True				
ANR	159769	EqualityExpression	type != BP_VAR_IS		159548	0		!=			
ANR	159770	Identifier	type		159548	0					
ANR	159771	Identifier	BP_VAR_IS		159548	1					
ANR	159772	CompoundStatement		36:28:968:968	159548	1					
ANR	159773	ExpressionStatement	"zend_error ( E_NOTICE , ""String offset cast occurred"" )"	1847:6:57305:57356	159548	0	True				
ANR	159774	CallExpression	"zend_error ( E_NOTICE , ""String offset cast occurred"" )"		159548	0					
ANR	159775	Callee	zend_error		159548	0					
ANR	159776	Identifier	zend_error		159548	0					
ANR	159777	ArgumentList	E_NOTICE		159548	1					
ANR	159778	Argument	E_NOTICE		159548	0					
ANR	159779	Identifier	E_NOTICE		159548	0					
ANR	159780	Argument	"""String offset cast occurred"""		159548	1					
ANR	159781	PrimaryExpression	"""String offset cast occurred"""		159548	0					
ANR	159782	BreakStatement	break ;	1849:5:57370:57375	159548	10	True				
ANR	159783	Label	case IS_REFERENCE :	1850:4:57381:57398	159548	11	True				
ANR	159784	Identifier	IS_REFERENCE		159548	0					
ANR	159785	ExpressionStatement	dim = Z_REFVAL_P ( dim )	1851:5:57405:57426	159548	12	True				
ANR	159786	AssignmentExpression	dim = Z_REFVAL_P ( dim )		159548	0		=			
ANR	159787	Identifier	dim		159548	0					
ANR	159788	CallExpression	Z_REFVAL_P ( dim )		159548	1					
ANR	159789	Callee	Z_REFVAL_P		159548	0					
ANR	159790	Identifier	Z_REFVAL_P		159548	0					
ANR	159791	ArgumentList	dim		159548	1					
ANR	159792	Argument	dim		159548	0					
ANR	159793	Identifier	dim		159548	0					
ANR	159794	GotoStatement	goto try_string_offset ;	1852:5:57433:57455	159548	13	True				
ANR	159795	Identifier	try_string_offset		159548	0					
ANR	159796	Label	default :	1853:4:57461:57468	159548	14	True				
ANR	159797	Identifier	default		159548	0					
ANR	159798	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal offset type"" )"	1854:5:57475:57519	159548	15	True				
ANR	159799	CallExpression	"zend_error ( E_WARNING , ""Illegal offset type"" )"		159548	0					
ANR	159800	Callee	zend_error		159548	0					
ANR	159801	Identifier	zend_error		159548	0					
ANR	159802	ArgumentList	E_WARNING		159548	1					
ANR	159803	Argument	E_WARNING		159548	0					
ANR	159804	Identifier	E_WARNING		159548	0					
ANR	159805	Argument	"""Illegal offset type"""		159548	1					
ANR	159806	PrimaryExpression	"""Illegal offset type"""		159548	0					
ANR	159807	BreakStatement	break ;	1855:5:57526:57531	159548	16	True				
ANR	159808	ExpressionStatement	offset = zval_get_long ( dim )	1858:3:57542:57569	159548	1	True				
ANR	159809	AssignmentExpression	offset = zval_get_long ( dim )		159548	0		=			
ANR	159810	Identifier	offset		159548	0					
ANR	159811	CallExpression	zval_get_long ( dim )		159548	1					
ANR	159812	Callee	zval_get_long		159548	0					
ANR	159813	Identifier	zval_get_long		159548	0					
ANR	159814	ArgumentList	dim		159548	1					
ANR	159815	Argument	dim		159548	0					
ANR	159816	Identifier	dim		159548	0					
ANR	159817	ElseStatement	else		159548	0					
ANR	159818	CompoundStatement		49:9:1251:1251	159548	0					
ANR	159819	ExpressionStatement	offset = Z_LVAL_P ( dim )	1860:3:57585:57607	159548	0	True				
ANR	159820	AssignmentExpression	offset = Z_LVAL_P ( dim )		159548	0		=			
ANR	159821	Identifier	offset		159548	0					
ANR	159822	CallExpression	Z_LVAL_P ( dim )		159548	1					
ANR	159823	Callee	Z_LVAL_P		159548	0					
ANR	159824	Identifier	Z_LVAL_P		159548	0					
ANR	159825	ArgumentList	dim		159548	1					
ANR	159826	Argument	dim		159548	0					
ANR	159827	Identifier	dim		159548	0					
ANR	159828	IfStatement	if ( UNEXPECTED ( offset < 0 ) || UNEXPECTED ( Z_STRLEN_P ( container ) <= ( size_t ) offset ) )		159548	3					
ANR	159829	Condition	UNEXPECTED ( offset < 0 ) || UNEXPECTED ( Z_STRLEN_P ( container ) <= ( size_t ) offset )	1863:6:57620:57696	159548	0	True				
ANR	159830	OrExpression	UNEXPECTED ( offset < 0 ) || UNEXPECTED ( Z_STRLEN_P ( container ) <= ( size_t ) offset )		159548	0		||			
ANR	159831	CallExpression	UNEXPECTED ( offset < 0 )		159548	0					
ANR	159832	Callee	UNEXPECTED		159548	0					
ANR	159833	Identifier	UNEXPECTED		159548	0					
ANR	159834	ArgumentList	offset < 0		159548	1					
ANR	159835	Argument	offset < 0		159548	0					
ANR	159836	RelationalExpression	offset < 0		159548	0		<			
ANR	159837	Identifier	offset		159548	0					
ANR	159838	PrimaryExpression	0		159548	1					
ANR	159839	CallExpression	UNEXPECTED ( Z_STRLEN_P ( container ) <= ( size_t ) offset )		159548	1					
ANR	159840	Callee	UNEXPECTED		159548	0					
ANR	159841	Identifier	UNEXPECTED		159548	0					
ANR	159842	ArgumentList	Z_STRLEN_P ( container ) <= ( size_t ) offset		159548	1					
ANR	159843	Argument	Z_STRLEN_P ( container ) <= ( size_t ) offset		159548	0					
ANR	159844	RelationalExpression	Z_STRLEN_P ( container ) <= ( size_t ) offset		159548	0		<=			
ANR	159845	CallExpression	Z_STRLEN_P ( container )		159548	0					
ANR	159846	Callee	Z_STRLEN_P		159548	0					
ANR	159847	Identifier	Z_STRLEN_P		159548	0					
ANR	159848	ArgumentList	container		159548	1					
ANR	159849	Argument	container		159548	0					
ANR	159850	Identifier	container		159548	0					
ANR	159851	CastExpression	( size_t ) offset		159548	1					
ANR	159852	CastTarget	size_t		159548	0					
ANR	159853	Identifier	offset		159548	1					
ANR	159854	CompoundStatement		53:85:1370:1370	159548	1					
ANR	159855	IfStatement	if ( type != BP_VAR_IS )		159548	0					
ANR	159856	Condition	type != BP_VAR_IS	1864:7:57708:57724	159548	0	True				
ANR	159857	EqualityExpression	type != BP_VAR_IS		159548	0		!=			
ANR	159858	Identifier	type		159548	0					
ANR	159859	Identifier	BP_VAR_IS		159548	1					
ANR	159860	CompoundStatement		54:26:1398:1398	159548	1					
ANR	159861	ExpressionStatement	"zend_error ( E_NOTICE , ""Uninitialized string offset: %pd"" , offset )"	1865:4:57733:57797	159548	0	True				
ANR	159862	CallExpression	"zend_error ( E_NOTICE , ""Uninitialized string offset: %pd"" , offset )"		159548	0					
ANR	159863	Callee	zend_error		159548	0					
ANR	159864	Identifier	zend_error		159548	0					
ANR	159865	ArgumentList	E_NOTICE		159548	1					
ANR	159866	Argument	E_NOTICE		159548	0					
ANR	159867	Identifier	E_NOTICE		159548	0					
ANR	159868	Argument	"""Uninitialized string offset: %pd"""		159548	1					
ANR	159869	PrimaryExpression	"""Uninitialized string offset: %pd"""		159548	0					
ANR	159870	Argument	offset		159548	2					
ANR	159871	Identifier	offset		159548	0					
ANR	159872	ExpressionStatement	ZVAL_EMPTY_STRING ( result )	1866:4:57803:57828	159548	1	True				
ANR	159873	CallExpression	ZVAL_EMPTY_STRING ( result )		159548	0					
ANR	159874	Callee	ZVAL_EMPTY_STRING		159548	0					
ANR	159875	Identifier	ZVAL_EMPTY_STRING		159548	0					
ANR	159876	ArgumentList	result		159548	1					
ANR	159877	Argument	result		159548	0					
ANR	159878	Identifier	result		159548	0					
ANR	159879	ElseStatement	else		159548	0					
ANR	159880	CompoundStatement		57:10:1511:1511	159548	0					
ANR	159881	ExpressionStatement	ZVAL_NULL ( result )	1868:4:57846:57863	159548	0	True				
ANR	159882	CallExpression	ZVAL_NULL ( result )		159548	0					
ANR	159883	Callee	ZVAL_NULL		159548	0					
ANR	159884	Identifier	ZVAL_NULL		159548	0					
ANR	159885	ArgumentList	result		159548	1					
ANR	159886	Argument	result		159548	0					
ANR	159887	Identifier	result		159548	0					
ANR	159888	ElseStatement	else		159548	0					
ANR	159889	CompoundStatement		61:3:1555:1611	159548	0					
ANR	159890	IdentifierDeclStatement	zend_uchar c = ( zend_uchar ) Z_STRVAL_P ( container ) [ offset ] ;	1871:3:57884:57940	159548	0	True				
ANR	159891	IdentifierDecl	c = ( zend_uchar ) Z_STRVAL_P ( container ) [ offset ]		159548	0					
ANR	159892	IdentifierDeclType	zend_uchar		159548	0					
ANR	159893	Identifier	c		159548	1					
ANR	159894	AssignmentExpression	c = ( zend_uchar ) Z_STRVAL_P ( container ) [ offset ]		159548	2		=			
ANR	159895	Identifier	c		159548	0					
ANR	159896	CastExpression	( zend_uchar ) Z_STRVAL_P ( container ) [ offset ]		159548	1					
ANR	159897	CastTarget	zend_uchar		159548	0					
ANR	159898	ArrayIndexing	Z_STRVAL_P ( container ) [ offset ]		159548	1					
ANR	159899	CallExpression	Z_STRVAL_P ( container )		159548	0					
ANR	159900	Callee	Z_STRVAL_P		159548	0					
ANR	159901	Identifier	Z_STRVAL_P		159548	0					
ANR	159902	ArgumentList	container		159548	1					
ANR	159903	Argument	container		159548	0					
ANR	159904	Identifier	container		159548	0					
ANR	159905	Identifier	offset		159548	1					
ANR	159906	IfStatement	if ( CG ( one_char_string ) [ c ] )		159548	1					
ANR	159907	Condition	CG ( one_char_string ) [ c ]	1873:7:57950:57971	159548	0	True				
ANR	159908	ArrayIndexing	CG ( one_char_string ) [ c ]		159548	0					
ANR	159909	CallExpression	CG ( one_char_string )		159548	0					
ANR	159910	Callee	CG		159548	0					
ANR	159911	Identifier	CG		159548	0					
ANR	159912	ArgumentList	one_char_string		159548	1					
ANR	159913	Argument	one_char_string		159548	0					
ANR	159914	Identifier	one_char_string		159548	0					
ANR	159915	Identifier	c		159548	1					
ANR	159916	CompoundStatement		63:31:1645:1645	159548	1					
ANR	159917	ExpressionStatement	"ZVAL_INTERNED_STR ( result , CG ( one_char_string ) [ c ] )"	1874:4:57980:58029	159548	0	True				
ANR	159918	CallExpression	"ZVAL_INTERNED_STR ( result , CG ( one_char_string ) [ c ] )"		159548	0					
ANR	159919	Callee	ZVAL_INTERNED_STR		159548	0					
ANR	159920	Identifier	ZVAL_INTERNED_STR		159548	0					
ANR	159921	ArgumentList	result		159548	1					
ANR	159922	Argument	result		159548	0					
ANR	159923	Identifier	result		159548	0					
ANR	159924	Argument	CG ( one_char_string ) [ c ]		159548	1					
ANR	159925	ArrayIndexing	CG ( one_char_string ) [ c ]		159548	0					
ANR	159926	CallExpression	CG ( one_char_string )		159548	0					
ANR	159927	Callee	CG		159548	0					
ANR	159928	Identifier	CG		159548	0					
ANR	159929	ArgumentList	one_char_string		159548	1					
ANR	159930	Argument	one_char_string		159548	0					
ANR	159931	Identifier	one_char_string		159548	0					
ANR	159932	Identifier	c		159548	1					
ANR	159933	ElseStatement	else		159548	0					
ANR	159934	CompoundStatement		65:10:1712:1712	159548	0					
ANR	159935	ExpressionStatement	"ZVAL_NEW_STR ( result , zend_string_init ( Z_STRVAL_P ( container ) + offset , 1 , 0 ) )"	1876:4:58047:58123	159548	0	True				
ANR	159936	CallExpression	"ZVAL_NEW_STR ( result , zend_string_init ( Z_STRVAL_P ( container ) + offset , 1 , 0 ) )"		159548	0					
ANR	159937	Callee	ZVAL_NEW_STR		159548	0					
ANR	159938	Identifier	ZVAL_NEW_STR		159548	0					
ANR	159939	ArgumentList	result		159548	1					
ANR	159940	Argument	result		159548	0					
ANR	159941	Identifier	result		159548	0					
ANR	159942	Argument	"zend_string_init ( Z_STRVAL_P ( container ) + offset , 1 , 0 )"		159548	1					
ANR	159943	CallExpression	"zend_string_init ( Z_STRVAL_P ( container ) + offset , 1 , 0 )"		159548	0					
ANR	159944	Callee	zend_string_init		159548	0					
ANR	159945	Identifier	zend_string_init		159548	0					
ANR	159946	ArgumentList	Z_STRVAL_P ( container ) + offset		159548	1					
ANR	159947	Argument	Z_STRVAL_P ( container ) + offset		159548	0					
ANR	159948	AdditiveExpression	Z_STRVAL_P ( container ) + offset		159548	0		+			
ANR	159949	CallExpression	Z_STRVAL_P ( container )		159548	0					
ANR	159950	Callee	Z_STRVAL_P		159548	0					
ANR	159951	Identifier	Z_STRVAL_P		159548	0					
ANR	159952	ArgumentList	container		159548	1					
ANR	159953	Argument	container		159548	0					
ANR	159954	Identifier	container		159548	0					
ANR	159955	Identifier	offset		159548	1					
ANR	159956	Argument	1		159548	1					
ANR	159957	PrimaryExpression	1		159548	0					
ANR	159958	Argument	0		159548	2					
ANR	159959	PrimaryExpression	0		159548	0					
ANR	159960	ElseStatement	else		159548	0					
ANR	159961	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_OBJECT ) )		159548	0					
ANR	159962	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_OBJECT )	1879:12:58146:58187	159548	0	True				
ANR	159963	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_OBJECT )		159548	0					
ANR	159964	Callee	EXPECTED		159548	0					
ANR	159965	Identifier	EXPECTED		159548	0					
ANR	159966	ArgumentList	Z_TYPE_P ( container ) == IS_OBJECT		159548	1					
ANR	159967	Argument	Z_TYPE_P ( container ) == IS_OBJECT		159548	0					
ANR	159968	EqualityExpression	Z_TYPE_P ( container ) == IS_OBJECT		159548	0		==			
ANR	159969	CallExpression	Z_TYPE_P ( container )		159548	0					
ANR	159970	Callee	Z_TYPE_P		159548	0					
ANR	159971	Identifier	Z_TYPE_P		159548	0					
ANR	159972	ArgumentList	container		159548	1					
ANR	159973	Argument	container		159548	0					
ANR	159974	Identifier	container		159548	0					
ANR	159975	Identifier	IS_OBJECT		159548	1					
ANR	159976	CompoundStatement		69:56:1861:1861	159548	1					
ANR	159977	IfStatement	if ( ! Z_OBJ_HT_P ( container ) -> read_dimension )		159548	0					
ANR	159978	Condition	! Z_OBJ_HT_P ( container ) -> read_dimension	1880:6:58198:58235	159548	0	True				
ANR	159979	UnaryOperationExpression	! Z_OBJ_HT_P ( container ) -> read_dimension		159548	0					
ANR	159980	UnaryOperator	!		159548	0					
ANR	159981	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_dimension		159548	1					
ANR	159982	CallExpression	Z_OBJ_HT_P ( container )		159548	0					
ANR	159983	Callee	Z_OBJ_HT_P		159548	0					
ANR	159984	Identifier	Z_OBJ_HT_P		159548	0					
ANR	159985	ArgumentList	container		159548	1					
ANR	159986	Argument	container		159548	0					
ANR	159987	Identifier	container		159548	0					
ANR	159988	Identifier	read_dimension		159548	1					
ANR	159989	CompoundStatement		70:46:1909:1909	159548	1					
ANR	159990	ExpressionStatement	"zend_throw_error ( NULL , ""Cannot use object as array"" )"	1881:3:58243:58295	159548	0	True				
ANR	159991	CallExpression	"zend_throw_error ( NULL , ""Cannot use object as array"" )"		159548	0					
ANR	159992	Callee	zend_throw_error		159548	0					
ANR	159993	Identifier	zend_throw_error		159548	0					
ANR	159994	ArgumentList	NULL		159548	1					
ANR	159995	Argument	NULL		159548	0					
ANR	159996	Identifier	NULL		159548	0					
ANR	159997	Argument	"""Cannot use object as array"""		159548	1					
ANR	159998	PrimaryExpression	"""Cannot use object as array"""		159548	0					
ANR	159999	ExpressionStatement	ZVAL_NULL ( result )	1882:3:58300:58317	159548	1	True				
ANR	160000	CallExpression	ZVAL_NULL ( result )		159548	0					
ANR	160001	Callee	ZVAL_NULL		159548	0					
ANR	160002	Identifier	ZVAL_NULL		159548	0					
ANR	160003	ArgumentList	result		159548	1					
ANR	160004	Argument	result		159548	0					
ANR	160005	Identifier	result		159548	0					
ANR	160006	ElseStatement	else		159548	0					
ANR	160007	CompoundStatement		73:9:1999:1999	159548	0					
ANR	160008	ExpressionStatement	"retval = Z_OBJ_HT_P ( container ) -> read_dimension ( container , dim , type , result )"	1884:3:58333:58409	159548	0	True				
ANR	160009	AssignmentExpression	"retval = Z_OBJ_HT_P ( container ) -> read_dimension ( container , dim , type , result )"		159548	0		=			
ANR	160010	Identifier	retval		159548	0					
ANR	160011	CallExpression	"Z_OBJ_HT_P ( container ) -> read_dimension ( container , dim , type , result )"		159548	1					
ANR	160012	Callee	Z_OBJ_HT_P ( container ) -> read_dimension		159548	0					
ANR	160013	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_dimension		159548	0					
ANR	160014	CallExpression	Z_OBJ_HT_P ( container )		159548	0					
ANR	160015	Callee	Z_OBJ_HT_P		159548	0					
ANR	160016	Identifier	Z_OBJ_HT_P		159548	0					
ANR	160017	ArgumentList	container		159548	1					
ANR	160018	Argument	container		159548	0					
ANR	160019	Identifier	container		159548	0					
ANR	160020	Identifier	read_dimension		159548	1					
ANR	160021	ArgumentList	container		159548	1					
ANR	160022	Argument	container		159548	0					
ANR	160023	Identifier	container		159548	0					
ANR	160024	Argument	dim		159548	1					
ANR	160025	Identifier	dim		159548	0					
ANR	160026	Argument	type		159548	2					
ANR	160027	Identifier	type		159548	0					
ANR	160028	Argument	result		159548	3					
ANR	160029	Identifier	result		159548	0					
ANR	160030	ExpressionStatement	ZEND_ASSERT ( result != NULL )	1886:3:58415:58442	159548	1	True				
ANR	160031	CallExpression	ZEND_ASSERT ( result != NULL )		159548	0					
ANR	160032	Callee	ZEND_ASSERT		159548	0					
ANR	160033	Identifier	ZEND_ASSERT		159548	0					
ANR	160034	ArgumentList	result != NULL		159548	1					
ANR	160035	Argument	result != NULL		159548	0					
ANR	160036	EqualityExpression	result != NULL		159548	0		!=			
ANR	160037	Identifier	result		159548	0					
ANR	160038	Identifier	NULL		159548	1					
ANR	160039	IfStatement	if ( retval )		159548	2					
ANR	160040	Condition	retval	1887:7:58451:58456	159548	0	True				
ANR	160041	Identifier	retval		159548	0					
ANR	160042	CompoundStatement		77:15:2130:2130	159548	1					
ANR	160043	IfStatement	if ( result != retval )		159548	0					
ANR	160044	Condition	result != retval	1888:8:58469:58484	159548	0	True				
ANR	160045	EqualityExpression	result != retval		159548	0		!=			
ANR	160046	Identifier	result		159548	0					
ANR	160047	Identifier	retval		159548	1					
ANR	160048	CompoundStatement		78:26:2158:2158	159548	1					
ANR	160049	ExpressionStatement	"ZVAL_COPY ( result , retval )"	1889:5:58494:58519	159548	0	True				
ANR	160050	CallExpression	"ZVAL_COPY ( result , retval )"		159548	0					
ANR	160051	Callee	ZVAL_COPY		159548	0					
ANR	160052	Identifier	ZVAL_COPY		159548	0					
ANR	160053	ArgumentList	result		159548	1					
ANR	160054	Argument	result		159548	0					
ANR	160055	Identifier	result		159548	0					
ANR	160056	Argument	retval		159548	1					
ANR	160057	Identifier	retval		159548	0					
ANR	160058	ElseStatement	else		159548	0					
ANR	160059	CompoundStatement		81:10:2208:2208	159548	0					
ANR	160060	ExpressionStatement	ZVAL_NULL ( result )	1892:4:58543:58560	159548	0	True				
ANR	160061	CallExpression	ZVAL_NULL ( result )		159548	0					
ANR	160062	Callee	ZVAL_NULL		159548	0					
ANR	160063	Identifier	ZVAL_NULL		159548	0					
ANR	160064	ArgumentList	result		159548	1					
ANR	160065	Argument	result		159548	0					
ANR	160066	Identifier	result		159548	0					
ANR	160067	ElseStatement	else		159548	0					
ANR	160068	CompoundStatement		85:8:2250:2250	159548	0					
ANR	160069	ExpressionStatement	ZVAL_NULL ( result )	1896:2:58583:58600	159548	0	True				
ANR	160070	CallExpression	ZVAL_NULL ( result )		159548	0					
ANR	160071	Callee	ZVAL_NULL		159548	0					
ANR	160072	Identifier	ZVAL_NULL		159548	0					
ANR	160073	ArgumentList	result		159548	1					
ANR	160074	Argument	result		159548	0					
ANR	160075	Identifier	result		159548	0					
ANR	160076	ReturnType	static zend_always_inline void		159548	1					
ANR	160077	Identifier	zend_fetch_dimension_address_read		159548	2					
ANR	160078	ParameterList	"zval * result , zval * container , zval * dim , int dim_type , int type"		159548	3					
ANR	160079	Parameter	zval * result	1810:65:56262:56273	159548	0	True				
ANR	160080	ParameterType	zval *		159548	0					
ANR	160081	Identifier	result		159548	1					
ANR	160082	Parameter	zval * container	1810:79:56276:56290	159548	1	True				
ANR	160083	ParameterType	zval *		159548	0					
ANR	160084	Identifier	container		159548	1					
ANR	160085	Parameter	zval * dim	1810:96:56293:56301	159548	2	True				
ANR	160086	ParameterType	zval *		159548	0					
ANR	160087	Identifier	dim		159548	1					
ANR	160088	Parameter	int dim_type	1810:107:56304:56315	159548	3	True				
ANR	160089	ParameterType	int		159548	0					
ANR	160090	Identifier	dim_type		159548	1					
ANR	160091	Parameter	int type	1810:121:56318:56325	159548	4	True				
ANR	160092	ParameterType	int		159548	0					
ANR	160093	Identifier	type		159548	1					
ANR	160094	CFGEntryNode	ENTRY		159548		True				
ANR	160095	CFGExitNode	EXIT		159548		True				
ANR	160096	Symbol	container		159548						
ANR	160097	Symbol	dim_type		159548						
ANR	160098	Symbol	Z_OBJ_HT_P ( container ) -> read_dimension		159548						
ANR	160099	Symbol	dim		159548						
ANR	160100	Symbol	* CG		159548						
ANR	160101	Symbol	type		159548						
ANR	160102	Symbol	one_char_string		159548						
ANR	160103	Symbol	result		159548						
ANR	160104	Symbol	UNEXPECTED		159548						
ANR	160105	Symbol	E_WARNING		159548						
ANR	160106	Symbol	zend_string_init		159548						
ANR	160107	Symbol	IS_REFERENCE		159548						
ANR	160108	Symbol	IS_ARRAY		159548						
ANR	160109	Symbol	IS_LONG		159548						
ANR	160110	Symbol	Z_STRLEN_P		159548						
ANR	160111	Symbol	IS_STRING		159548						
ANR	160112	Symbol	* Z_STRVAL_P		159548						
ANR	160113	Symbol	Z_ARRVAL_P		159548						
ANR	160114	Symbol	BP_VAR_IS		159548						
ANR	160115	Symbol	NULL		159548						
ANR	160116	Symbol	c		159548						
ANR	160117	Symbol	offset		159548						
ANR	160118	Symbol	CG		159548						
ANR	160119	Symbol	E_NOTICE		159548						
ANR	160120	Symbol	Z_TYPE_P		159548						
ANR	160121	Symbol	Z_STRVAL_P		159548						
ANR	160122	Symbol	* c		159548						
ANR	160123	Symbol	* Z_OBJ_HT_P		159548						
ANR	160124	Symbol	retval		159548						
ANR	160125	Symbol	Z_LVAL_P		159548						
ANR	160126	Symbol	is_numeric_string		159548						
ANR	160127	Symbol	Z_REFVAL_P		159548						
ANR	160128	Symbol	zval_get_long		159548						
ANR	160129	Symbol	zend_fetch_dimension_address_inner		159548						
ANR	160130	Symbol	Z_OBJ_HT_P		159548						
ANR	160131	Symbol	* offset		159548						
ANR	160132	Symbol	IS_OBJECT		159548						
ANR	160133	Symbol	EXPECTED		159548						
ANR	160134	Function	zend_fetch_dimension_address_read_R	1900:0:58608:58812							
ANR	160135	FunctionDef	"zend_fetch_dimension_address_read_R (zval * result , zval * container , zval * dim , int dim_type)"		160134	0					
ANR	160136	CompoundStatement		1901:0:58730:58812	160134	0					
ANR	160137	ExpressionStatement	"zend_fetch_dimension_address_read ( result , container , dim , dim_type , BP_VAR_R )"	1902:1:58733:58810	160134	0	True				
ANR	160138	CallExpression	"zend_fetch_dimension_address_read ( result , container , dim , dim_type , BP_VAR_R )"		160134	0					
ANR	160139	Callee	zend_fetch_dimension_address_read		160134	0					
ANR	160140	Identifier	zend_fetch_dimension_address_read		160134	0					
ANR	160141	ArgumentList	result		160134	1					
ANR	160142	Argument	result		160134	0					
ANR	160143	Identifier	result		160134	0					
ANR	160144	Argument	container		160134	1					
ANR	160145	Identifier	container		160134	0					
ANR	160146	Argument	dim		160134	2					
ANR	160147	Identifier	dim		160134	0					
ANR	160148	Argument	dim_type		160134	3					
ANR	160149	Identifier	dim_type		160134	0					
ANR	160150	Argument	BP_VAR_R		160134	4					
ANR	160151	Identifier	BP_VAR_R		160134	0					
ANR	160152	ReturnType	static zend_never_inline void		160134	1					
ANR	160153	Identifier	zend_fetch_dimension_address_read_R		160134	2					
ANR	160154	ParameterList	"zval * result , zval * container , zval * dim , int dim_type"		160134	3					
ANR	160155	Parameter	zval * result	1900:66:58674:58685	160134	0	True				
ANR	160156	ParameterType	zval *		160134	0					
ANR	160157	Identifier	result		160134	1					
ANR	160158	Parameter	zval * container	1900:80:58688:58702	160134	1	True				
ANR	160159	ParameterType	zval *		160134	0					
ANR	160160	Identifier	container		160134	1					
ANR	160161	Parameter	zval * dim	1900:97:58705:58713	160134	2	True				
ANR	160162	ParameterType	zval *		160134	0					
ANR	160163	Identifier	dim		160134	1					
ANR	160164	Parameter	int dim_type	1900:108:58716:58727	160134	3	True				
ANR	160165	ParameterType	int		160134	0					
ANR	160166	Identifier	dim_type		160134	1					
ANR	160167	CFGEntryNode	ENTRY		160134		True				
ANR	160168	CFGExitNode	EXIT		160134		True				
ANR	160169	Symbol	result		160134						
ANR	160170	Symbol	container		160134						
ANR	160171	Symbol	dim_type		160134						
ANR	160172	Symbol	dim		160134						
ANR	160173	Symbol	BP_VAR_R		160134						
ANR	160174	Function	zend_fetch_dimension_address_read_IS	1905:0:58815:59021							
ANR	160175	FunctionDef	"zend_fetch_dimension_address_read_IS (zval * result , zval * container , zval * dim , int dim_type)"		160174	0					
ANR	160176	CompoundStatement		1906:0:58938:59021	160174	0					
ANR	160177	ExpressionStatement	"zend_fetch_dimension_address_read ( result , container , dim , dim_type , BP_VAR_IS )"	1907:1:58941:59019	160174	0	True				
ANR	160178	CallExpression	"zend_fetch_dimension_address_read ( result , container , dim , dim_type , BP_VAR_IS )"		160174	0					
ANR	160179	Callee	zend_fetch_dimension_address_read		160174	0					
ANR	160180	Identifier	zend_fetch_dimension_address_read		160174	0					
ANR	160181	ArgumentList	result		160174	1					
ANR	160182	Argument	result		160174	0					
ANR	160183	Identifier	result		160174	0					
ANR	160184	Argument	container		160174	1					
ANR	160185	Identifier	container		160174	0					
ANR	160186	Argument	dim		160174	2					
ANR	160187	Identifier	dim		160174	0					
ANR	160188	Argument	dim_type		160174	3					
ANR	160189	Identifier	dim_type		160174	0					
ANR	160190	Argument	BP_VAR_IS		160174	4					
ANR	160191	Identifier	BP_VAR_IS		160174	0					
ANR	160192	ReturnType	static zend_never_inline void		160174	1					
ANR	160193	Identifier	zend_fetch_dimension_address_read_IS		160174	2					
ANR	160194	ParameterList	"zval * result , zval * container , zval * dim , int dim_type"		160174	3					
ANR	160195	Parameter	zval * result	1905:67:58882:58893	160174	0	True				
ANR	160196	ParameterType	zval *		160174	0					
ANR	160197	Identifier	result		160174	1					
ANR	160198	Parameter	zval * container	1905:81:58896:58910	160174	1	True				
ANR	160199	ParameterType	zval *		160174	0					
ANR	160200	Identifier	container		160174	1					
ANR	160201	Parameter	zval * dim	1905:98:58913:58921	160174	2	True				
ANR	160202	ParameterType	zval *		160174	0					
ANR	160203	Identifier	dim		160174	1					
ANR	160204	Parameter	int dim_type	1905:109:58924:58935	160174	3	True				
ANR	160205	ParameterType	int		160174	0					
ANR	160206	Identifier	dim_type		160174	1					
ANR	160207	CFGEntryNode	ENTRY		160174		True				
ANR	160208	CFGExitNode	EXIT		160174		True				
ANR	160209	Symbol	result		160174						
ANR	160210	Symbol	container		160174						
ANR	160211	Symbol	dim_type		160174						
ANR	160212	Symbol	dim		160174						
ANR	160213	Symbol	BP_VAR_IS		160174						
ANR	160214	Function	zend_fetch_dimension_by_zval	1910:0:59024:59185							
ANR	160215	FunctionDef	"zend_fetch_dimension_by_zval (zval * result , zval * container , zval * dim)"		160214	0					
ANR	160216	CompoundStatement		1911:0:59109:59185	160214	0					
ANR	160217	ExpressionStatement	"zend_fetch_dimension_address_read_R ( result , container , dim , IS_TMP_VAR )"	1912:1:59112:59183	160214	0	True				
ANR	160218	CallExpression	"zend_fetch_dimension_address_read_R ( result , container , dim , IS_TMP_VAR )"		160214	0					
ANR	160219	Callee	zend_fetch_dimension_address_read_R		160214	0					
ANR	160220	Identifier	zend_fetch_dimension_address_read_R		160214	0					
ANR	160221	ArgumentList	result		160214	1					
ANR	160222	Argument	result		160214	0					
ANR	160223	Identifier	result		160214	0					
ANR	160224	Argument	container		160214	1					
ANR	160225	Identifier	container		160214	0					
ANR	160226	Argument	dim		160214	2					
ANR	160227	Identifier	dim		160214	0					
ANR	160228	Argument	IS_TMP_VAR		160214	3					
ANR	160229	Identifier	IS_TMP_VAR		160214	0					
ANR	160230	ReturnType	ZEND_API void		160214	1					
ANR	160231	Identifier	zend_fetch_dimension_by_zval		160214	2					
ANR	160232	ParameterList	"zval * result , zval * container , zval * dim"		160214	3					
ANR	160233	Parameter	zval * result	1910:43:59067:59078	160214	0	True				
ANR	160234	ParameterType	zval *		160214	0					
ANR	160235	Identifier	result		160214	1					
ANR	160236	Parameter	zval * container	1910:57:59081:59095	160214	1	True				
ANR	160237	ParameterType	zval *		160214	0					
ANR	160238	Identifier	container		160214	1					
ANR	160239	Parameter	zval * dim	1910:74:59098:59106	160214	2	True				
ANR	160240	ParameterType	zval *		160214	0					
ANR	160241	Identifier	dim		160214	1					
ANR	160242	CFGEntryNode	ENTRY		160214		True				
ANR	160243	CFGExitNode	EXIT		160214		True				
ANR	160244	Symbol	result		160214						
ANR	160245	Symbol	container		160214						
ANR	160246	Symbol	dim		160214						
ANR	160247	Symbol	IS_TMP_VAR		160214						
ANR	160248	Function	zend_fetch_property_address	1915:0:59188:62232							
ANR	160249	FunctionDef	"zend_fetch_property_address (zval * result , zval * container , uint32_t container_op_type , zval * prop_ptr , uint32_t prop_op_type , void * * cache_slot , int type)"		160248	0					
ANR	160250	CompoundStatement		1916:0:59374:62232	160248	0					
ANR	160251	IfStatement	if ( container_op_type != IS_UNUSED && UNEXPECTED ( Z_TYPE_P ( container ) != IS_OBJECT ) )		160248	0					
ANR	160252	Condition	container_op_type != IS_UNUSED && UNEXPECTED ( Z_TYPE_P ( container ) != IS_OBJECT )	1917:8:59384:59461	160248	0	True				
ANR	160253	AndExpression	container_op_type != IS_UNUSED && UNEXPECTED ( Z_TYPE_P ( container ) != IS_OBJECT )		160248	0		&&			
ANR	160254	EqualityExpression	container_op_type != IS_UNUSED		160248	0		!=			
ANR	160255	Identifier	container_op_type		160248	0					
ANR	160256	Identifier	IS_UNUSED		160248	1					
ANR	160257	CallExpression	UNEXPECTED ( Z_TYPE_P ( container ) != IS_OBJECT )		160248	1					
ANR	160258	Callee	UNEXPECTED		160248	0					
ANR	160259	Identifier	UNEXPECTED		160248	0					
ANR	160260	ArgumentList	Z_TYPE_P ( container ) != IS_OBJECT		160248	1					
ANR	160261	Argument	Z_TYPE_P ( container ) != IS_OBJECT		160248	0					
ANR	160262	EqualityExpression	Z_TYPE_P ( container ) != IS_OBJECT		160248	0		!=			
ANR	160263	CallExpression	Z_TYPE_P ( container )		160248	0					
ANR	160264	Callee	Z_TYPE_P		160248	0					
ANR	160265	Identifier	Z_TYPE_P		160248	0					
ANR	160266	ArgumentList	container		160248	1					
ANR	160267	Argument	container		160248	0					
ANR	160268	Identifier	container		160248	0					
ANR	160269	Identifier	IS_OBJECT		160248	1					
ANR	160270	CompoundStatement		2:88:89:89	160248	1					
ANR	160271	DoStatement	do		160248	0					
ANR	160272	CompoundStatement		3:5:96:96	160248	0					
ANR	160273	IfStatement	if ( container_op_type == IS_VAR && UNEXPECTED ( container == & EG ( error_zval ) ) )		160248	0					
ANR	160274	Condition	container_op_type == IS_VAR && UNEXPECTED ( container == & EG ( error_zval ) )	1919:7:59480:59550	160248	0	True				
ANR	160275	AndExpression	container_op_type == IS_VAR && UNEXPECTED ( container == & EG ( error_zval ) )		160248	0		&&			
ANR	160276	EqualityExpression	container_op_type == IS_VAR		160248	0		==			
ANR	160277	Identifier	container_op_type		160248	0					
ANR	160278	Identifier	IS_VAR		160248	1					
ANR	160279	CallExpression	UNEXPECTED ( container == & EG ( error_zval ) )		160248	1					
ANR	160280	Callee	UNEXPECTED		160248	0					
ANR	160281	Identifier	UNEXPECTED		160248	0					
ANR	160282	ArgumentList	container == & EG ( error_zval )		160248	1					
ANR	160283	Argument	container == & EG ( error_zval )		160248	0					
ANR	160284	EqualityExpression	container == & EG ( error_zval )		160248	0		==			
ANR	160285	Identifier	container		160248	0					
ANR	160286	UnaryOperationExpression	& EG ( error_zval )		160248	1					
ANR	160287	UnaryOperator	&		160248	0					
ANR	160288	CallExpression	EG ( error_zval )		160248	1					
ANR	160289	Callee	EG		160248	0					
ANR	160290	Identifier	EG		160248	0					
ANR	160291	ArgumentList	error_zval		160248	1					
ANR	160292	Argument	error_zval		160248	0					
ANR	160293	Identifier	error_zval		160248	0					
ANR	160294	CompoundStatement		4:80:178:178	160248	1					
ANR	160295	ExpressionStatement	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"	1920:4:59559:59597	160248	0	True				
ANR	160296	CallExpression	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"		160248	0					
ANR	160297	Callee	ZVAL_INDIRECT		160248	0					
ANR	160298	Identifier	ZVAL_INDIRECT		160248	0					
ANR	160299	ArgumentList	result		160248	1					
ANR	160300	Argument	result		160248	0					
ANR	160301	Identifier	result		160248	0					
ANR	160302	Argument	& EG ( error_zval )		160248	1					
ANR	160303	UnaryOperationExpression	& EG ( error_zval )		160248	0					
ANR	160304	UnaryOperator	&		160248	0					
ANR	160305	CallExpression	EG ( error_zval )		160248	1					
ANR	160306	Callee	EG		160248	0					
ANR	160307	Identifier	EG		160248	0					
ANR	160308	ArgumentList	error_zval		160248	1					
ANR	160309	Argument	error_zval		160248	0					
ANR	160310	Identifier	error_zval		160248	0					
ANR	160311	ReturnStatement	return ;	1921:4:59603:59609	160248	1	True				
ANR	160312	IfStatement	if ( Z_ISREF_P ( container ) )		160248	1					
ANR	160313	Condition	Z_ISREF_P ( container )	1924:7:59624:59643	160248	0	True				
ANR	160314	CallExpression	Z_ISREF_P ( container )		160248	0					
ANR	160315	Callee	Z_ISREF_P		160248	0					
ANR	160316	Identifier	Z_ISREF_P		160248	0					
ANR	160317	ArgumentList	container		160248	1					
ANR	160318	Argument	container		160248	0					
ANR	160319	Identifier	container		160248	0					
ANR	160320	CompoundStatement		9:29:271:271	160248	1					
ANR	160321	ExpressionStatement	container = Z_REFVAL_P ( container )	1925:4:59652:59685	160248	0	True				
ANR	160322	AssignmentExpression	container = Z_REFVAL_P ( container )		160248	0		=			
ANR	160323	Identifier	container		160248	0					
ANR	160324	CallExpression	Z_REFVAL_P ( container )		160248	1					
ANR	160325	Callee	Z_REFVAL_P		160248	0					
ANR	160326	Identifier	Z_REFVAL_P		160248	0					
ANR	160327	ArgumentList	container		160248	1					
ANR	160328	Argument	container		160248	0					
ANR	160329	Identifier	container		160248	0					
ANR	160330	IfStatement	if ( EXPECTED ( Z_TYPE_P ( container ) == IS_OBJECT ) )		160248	1					
ANR	160331	Condition	EXPECTED ( Z_TYPE_P ( container ) == IS_OBJECT )	1926:8:59695:59736	160248	0	True				
ANR	160332	CallExpression	EXPECTED ( Z_TYPE_P ( container ) == IS_OBJECT )		160248	0					
ANR	160333	Callee	EXPECTED		160248	0					
ANR	160334	Identifier	EXPECTED		160248	0					
ANR	160335	ArgumentList	Z_TYPE_P ( container ) == IS_OBJECT		160248	1					
ANR	160336	Argument	Z_TYPE_P ( container ) == IS_OBJECT		160248	0					
ANR	160337	EqualityExpression	Z_TYPE_P ( container ) == IS_OBJECT		160248	0		==			
ANR	160338	CallExpression	Z_TYPE_P ( container )		160248	0					
ANR	160339	Callee	Z_TYPE_P		160248	0					
ANR	160340	Identifier	Z_TYPE_P		160248	0					
ANR	160341	ArgumentList	container		160248	1					
ANR	160342	Argument	container		160248	0					
ANR	160343	Identifier	container		160248	0					
ANR	160344	Identifier	IS_OBJECT		160248	1					
ANR	160345	CompoundStatement		11:52:364:364	160248	1					
ANR	160346	BreakStatement	break ;	1927:5:59746:59751	160248	0	True				
ANR	160347	IfStatement	if ( type != BP_VAR_UNSET && EXPECTED ( Z_TYPE_P ( container ) <= IS_FALSE || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 ) ) )		160248	2					
ANR	160348	Condition	type != BP_VAR_UNSET && EXPECTED ( Z_TYPE_P ( container ) <= IS_FALSE || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 ) )	1932:7:59826:59972	160248	0	True				
ANR	160349	AndExpression	type != BP_VAR_UNSET && EXPECTED ( Z_TYPE_P ( container ) <= IS_FALSE || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 ) )		160248	0		&&			
ANR	160350	EqualityExpression	type != BP_VAR_UNSET		160248	0		!=			
ANR	160351	Identifier	type		160248	0					
ANR	160352	Identifier	BP_VAR_UNSET		160248	1					
ANR	160353	CallExpression	EXPECTED ( Z_TYPE_P ( container ) <= IS_FALSE || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 ) )		160248	1					
ANR	160354	Callee	EXPECTED		160248	0					
ANR	160355	Identifier	EXPECTED		160248	0					
ANR	160356	ArgumentList	Z_TYPE_P ( container ) <= IS_FALSE || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 )		160248	1					
ANR	160357	Argument	Z_TYPE_P ( container ) <= IS_FALSE || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 )		160248	0					
ANR	160358	OrExpression	Z_TYPE_P ( container ) <= IS_FALSE || ( Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0 )		160248	0		||			
ANR	160359	RelationalExpression	Z_TYPE_P ( container ) <= IS_FALSE		160248	0		<=			
ANR	160360	CallExpression	Z_TYPE_P ( container )		160248	0					
ANR	160361	Callee	Z_TYPE_P		160248	0					
ANR	160362	Identifier	Z_TYPE_P		160248	0					
ANR	160363	ArgumentList	container		160248	1					
ANR	160364	Argument	container		160248	0					
ANR	160365	Identifier	container		160248	0					
ANR	160366	Identifier	IS_FALSE		160248	1					
ANR	160367	AndExpression	Z_TYPE_P ( container ) == IS_STRING && Z_STRLEN_P ( container ) == 0		160248	1		&&			
ANR	160368	EqualityExpression	Z_TYPE_P ( container ) == IS_STRING		160248	0		==			
ANR	160369	CallExpression	Z_TYPE_P ( container )		160248	0					
ANR	160370	Callee	Z_TYPE_P		160248	0					
ANR	160371	Identifier	Z_TYPE_P		160248	0					
ANR	160372	ArgumentList	container		160248	1					
ANR	160373	Argument	container		160248	0					
ANR	160374	Identifier	container		160248	0					
ANR	160375	Identifier	IS_STRING		160248	1					
ANR	160376	EqualityExpression	Z_STRLEN_P ( container ) == 0		160248	1		==			
ANR	160377	CallExpression	Z_STRLEN_P ( container )		160248	0					
ANR	160378	Callee	Z_STRLEN_P		160248	0					
ANR	160379	Identifier	Z_STRLEN_P		160248	0					
ANR	160380	ArgumentList	container		160248	1					
ANR	160381	Argument	container		160248	0					
ANR	160382	Identifier	container		160248	0					
ANR	160383	PrimaryExpression	0		160248	1					
ANR	160384	CompoundStatement		19:74:600:600	160248	1					
ANR	160385	ExpressionStatement	zval_ptr_dtor_nogc ( container )	1935:4:59981:60010	160248	0	True				
ANR	160386	CallExpression	zval_ptr_dtor_nogc ( container )		160248	0					
ANR	160387	Callee	zval_ptr_dtor_nogc		160248	0					
ANR	160388	Identifier	zval_ptr_dtor_nogc		160248	0					
ANR	160389	ArgumentList	container		160248	1					
ANR	160390	Argument	container		160248	0					
ANR	160391	Identifier	container		160248	0					
ANR	160392	ExpressionStatement	object_init ( container )	1936:4:60016:60038	160248	1	True				
ANR	160393	CallExpression	object_init ( container )		160248	0					
ANR	160394	Callee	object_init		160248	0					
ANR	160395	Identifier	object_init		160248	0					
ANR	160396	ArgumentList	container		160248	1					
ANR	160397	Argument	container		160248	0					
ANR	160398	Identifier	container		160248	0					
ANR	160399	ElseStatement	else		160248	0					
ANR	160400	CompoundStatement		22:10:675:675	160248	0					
ANR	160401	ExpressionStatement	"zend_error ( E_WARNING , ""Attempt to modify property of non-object"" )"	1938:4:60056:60121	160248	0	True				
ANR	160402	CallExpression	"zend_error ( E_WARNING , ""Attempt to modify property of non-object"" )"		160248	0					
ANR	160403	Callee	zend_error		160248	0					
ANR	160404	Identifier	zend_error		160248	0					
ANR	160405	ArgumentList	E_WARNING		160248	1					
ANR	160406	Argument	E_WARNING		160248	0					
ANR	160407	Identifier	E_WARNING		160248	0					
ANR	160408	Argument	"""Attempt to modify property of non-object"""		160248	1					
ANR	160409	PrimaryExpression	"""Attempt to modify property of non-object"""		160248	0					
ANR	160410	ExpressionStatement	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"	1939:4:60127:60165	160248	1	True				
ANR	160411	CallExpression	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"		160248	0					
ANR	160412	Callee	ZVAL_INDIRECT		160248	0					
ANR	160413	Identifier	ZVAL_INDIRECT		160248	0					
ANR	160414	ArgumentList	result		160248	1					
ANR	160415	Argument	result		160248	0					
ANR	160416	Identifier	result		160248	0					
ANR	160417	Argument	& EG ( error_zval )		160248	1					
ANR	160418	UnaryOperationExpression	& EG ( error_zval )		160248	0					
ANR	160419	UnaryOperator	&		160248	0					
ANR	160420	CallExpression	EG ( error_zval )		160248	1					
ANR	160421	Callee	EG		160248	0					
ANR	160422	Identifier	EG		160248	0					
ANR	160423	ArgumentList	error_zval		160248	1					
ANR	160424	Argument	error_zval		160248	0					
ANR	160425	Identifier	error_zval		160248	0					
ANR	160426	ReturnStatement	return ;	1940:4:60171:60177	160248	2	True				
ANR	160427	Condition	0	1942:11:60195:60195	160248	1	True				
ANR	160428	PrimaryExpression	0		160248	0					
ANR	160429	IfStatement	if ( prop_op_type == IS_CONST && EXPECTED ( Z_OBJCE_P ( container ) == CACHED_PTR_EX ( cache_slot ) ) )		160248	1					
ANR	160430	Condition	prop_op_type == IS_CONST && EXPECTED ( Z_OBJCE_P ( container ) == CACHED_PTR_EX ( cache_slot ) )	1944:5:60207:60298	160248	0	True				
ANR	160431	AndExpression	prop_op_type == IS_CONST && EXPECTED ( Z_OBJCE_P ( container ) == CACHED_PTR_EX ( cache_slot ) )		160248	0		&&			
ANR	160432	EqualityExpression	prop_op_type == IS_CONST		160248	0		==			
ANR	160433	Identifier	prop_op_type		160248	0					
ANR	160434	Identifier	IS_CONST		160248	1					
ANR	160435	CallExpression	EXPECTED ( Z_OBJCE_P ( container ) == CACHED_PTR_EX ( cache_slot ) )		160248	1					
ANR	160436	Callee	EXPECTED		160248	0					
ANR	160437	Identifier	EXPECTED		160248	0					
ANR	160438	ArgumentList	Z_OBJCE_P ( container ) == CACHED_PTR_EX ( cache_slot )		160248	1					
ANR	160439	Argument	Z_OBJCE_P ( container ) == CACHED_PTR_EX ( cache_slot )		160248	0					
ANR	160440	EqualityExpression	Z_OBJCE_P ( container ) == CACHED_PTR_EX ( cache_slot )		160248	0		==			
ANR	160441	CallExpression	Z_OBJCE_P ( container )		160248	0					
ANR	160442	Callee	Z_OBJCE_P		160248	0					
ANR	160443	Identifier	Z_OBJCE_P		160248	0					
ANR	160444	ArgumentList	container		160248	1					
ANR	160445	Argument	container		160248	0					
ANR	160446	Identifier	container		160248	0					
ANR	160447	CallExpression	CACHED_PTR_EX ( cache_slot )		160248	1					
ANR	160448	Callee	CACHED_PTR_EX		160248	0					
ANR	160449	Identifier	CACHED_PTR_EX		160248	0					
ANR	160450	ArgumentList	cache_slot		160248	1					
ANR	160451	Argument	cache_slot		160248	0					
ANR	160452	Identifier	cache_slot		160248	0					
ANR	160453	CompoundStatement		33:2:1048:1060	160248	1					
ANR	160454	IdentifierDeclStatement	uint32_t prop_offset = ( uint32_t ) ( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 ) ;	1946:2:60305:60377	160248	0	True				
ANR	160455	IdentifierDecl	prop_offset = ( uint32_t ) ( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 )		160248	0					
ANR	160456	IdentifierDeclType	uint32_t		160248	0					
ANR	160457	Identifier	prop_offset		160248	1					
ANR	160458	AssignmentExpression	prop_offset = ( uint32_t ) ( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 )		160248	2		=			
ANR	160459	Identifier	prop_offset		160248	0					
ANR	160460	CastExpression	( uint32_t ) ( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 )		160248	1					
ANR	160461	CastTarget	uint32_t		160248	0					
ANR	160462	CastExpression	( intptr_t ) CACHED_PTR_EX ( cache_slot + 1 )		160248	1					
ANR	160463	CastTarget	intptr_t		160248	0					
ANR	160464	CallExpression	CACHED_PTR_EX ( cache_slot + 1 )		160248	1					
ANR	160465	Callee	CACHED_PTR_EX		160248	0					
ANR	160466	Identifier	CACHED_PTR_EX		160248	0					
ANR	160467	ArgumentList	cache_slot + 1		160248	1					
ANR	160468	Argument	cache_slot + 1		160248	0					
ANR	160469	AdditiveExpression	cache_slot + 1		160248	0		+			
ANR	160470	Identifier	cache_slot		160248	0					
ANR	160471	PrimaryExpression	1		160248	1					
ANR	160472	IdentifierDeclStatement	zend_object * zobj = Z_OBJ_P ( container ) ;	1947:2:60381:60419	160248	1	True				
ANR	160473	IdentifierDecl	* zobj = Z_OBJ_P ( container )		160248	0					
ANR	160474	IdentifierDeclType	zend_object *		160248	0					
ANR	160475	Identifier	zobj		160248	1					
ANR	160476	AssignmentExpression	* zobj = Z_OBJ_P ( container )		160248	2		=			
ANR	160477	Identifier	zobj		160248	0					
ANR	160478	CallExpression	Z_OBJ_P ( container )		160248	1					
ANR	160479	Callee	Z_OBJ_P		160248	0					
ANR	160480	Identifier	Z_OBJ_P		160248	0					
ANR	160481	ArgumentList	container		160248	1					
ANR	160482	Argument	container		160248	0					
ANR	160483	Identifier	container		160248	0					
ANR	160484	IdentifierDeclStatement	zval * retval ;	1948:2:60423:60435	160248	2	True				
ANR	160485	IdentifierDecl	* retval		160248	0					
ANR	160486	IdentifierDeclType	zval *		160248	0					
ANR	160487	Identifier	retval		160248	1					
ANR	160488	IfStatement	if ( EXPECTED ( prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET ) )		160248	3					
ANR	160489	Condition	EXPECTED ( prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET )	1950:6:60444:60506	160248	0	True				
ANR	160490	CallExpression	EXPECTED ( prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET )		160248	0					
ANR	160491	Callee	EXPECTED		160248	0					
ANR	160492	Identifier	EXPECTED		160248	0					
ANR	160493	ArgumentList	prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET		160248	1					
ANR	160494	Argument	prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET		160248	0					
ANR	160495	EqualityExpression	prop_offset != ( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET		160248	0		!=			
ANR	160496	Identifier	prop_offset		160248	0					
ANR	160497	CastExpression	( uint32_t ) ZEND_DYNAMIC_PROPERTY_OFFSET		160248	1					
ANR	160498	CastTarget	uint32_t		160248	0					
ANR	160499	Identifier	ZEND_DYNAMIC_PROPERTY_OFFSET		160248	1					
ANR	160500	CompoundStatement		35:71:1134:1134	160248	1					
ANR	160501	ExpressionStatement	"retval = OBJ_PROP ( zobj , prop_offset )"	1951:3:60514:60550	160248	0	True				
ANR	160502	AssignmentExpression	"retval = OBJ_PROP ( zobj , prop_offset )"		160248	0		=			
ANR	160503	Identifier	retval		160248	0					
ANR	160504	CallExpression	"OBJ_PROP ( zobj , prop_offset )"		160248	1					
ANR	160505	Callee	OBJ_PROP		160248	0					
ANR	160506	Identifier	OBJ_PROP		160248	0					
ANR	160507	ArgumentList	zobj		160248	1					
ANR	160508	Argument	zobj		160248	0					
ANR	160509	Identifier	zobj		160248	0					
ANR	160510	Argument	prop_offset		160248	1					
ANR	160511	Identifier	prop_offset		160248	0					
ANR	160512	IfStatement	if ( EXPECTED ( Z_TYPE_P ( retval ) != IS_UNDEF ) )		160248	1					
ANR	160513	Condition	EXPECTED ( Z_TYPE_P ( retval ) != IS_UNDEF )	1952:7:60559:60596	160248	0	True				
ANR	160514	CallExpression	EXPECTED ( Z_TYPE_P ( retval ) != IS_UNDEF )		160248	0					
ANR	160515	Callee	EXPECTED		160248	0					
ANR	160516	Identifier	EXPECTED		160248	0					
ANR	160517	ArgumentList	Z_TYPE_P ( retval ) != IS_UNDEF		160248	1					
ANR	160518	Argument	Z_TYPE_P ( retval ) != IS_UNDEF		160248	0					
ANR	160519	EqualityExpression	Z_TYPE_P ( retval ) != IS_UNDEF		160248	0		!=			
ANR	160520	CallExpression	Z_TYPE_P ( retval )		160248	0					
ANR	160521	Callee	Z_TYPE_P		160248	0					
ANR	160522	Identifier	Z_TYPE_P		160248	0					
ANR	160523	ArgumentList	retval		160248	1					
ANR	160524	Argument	retval		160248	0					
ANR	160525	Identifier	retval		160248	0					
ANR	160526	Identifier	IS_UNDEF		160248	1					
ANR	160527	CompoundStatement		37:47:1224:1224	160248	1					
ANR	160528	ExpressionStatement	"ZVAL_INDIRECT ( result , retval )"	1953:4:60605:60634	160248	0	True				
ANR	160529	CallExpression	"ZVAL_INDIRECT ( result , retval )"		160248	0					
ANR	160530	Callee	ZVAL_INDIRECT		160248	0					
ANR	160531	Identifier	ZVAL_INDIRECT		160248	0					
ANR	160532	ArgumentList	result		160248	1					
ANR	160533	Argument	result		160248	0					
ANR	160534	Identifier	result		160248	0					
ANR	160535	Argument	retval		160248	1					
ANR	160536	Identifier	retval		160248	0					
ANR	160537	ReturnStatement	return ;	1954:4:60640:60646	160248	1	True				
ANR	160538	ElseStatement	else		160248	0					
ANR	160539	IfStatement	if ( EXPECTED ( zobj -> properties != NULL ) )		160248	0					
ANR	160540	Condition	EXPECTED ( zobj -> properties != NULL )	1956:13:60666:60699	160248	0	True				
ANR	160541	CallExpression	EXPECTED ( zobj -> properties != NULL )		160248	0					
ANR	160542	Callee	EXPECTED		160248	0					
ANR	160543	Identifier	EXPECTED		160248	0					
ANR	160544	ArgumentList	zobj -> properties != NULL		160248	1					
ANR	160545	Argument	zobj -> properties != NULL		160248	0					
ANR	160546	EqualityExpression	zobj -> properties != NULL		160248	0		!=			
ANR	160547	PtrMemberAccess	zobj -> properties		160248	0					
ANR	160548	Identifier	zobj		160248	0					
ANR	160549	Identifier	properties		160248	1					
ANR	160550	Identifier	NULL		160248	1					
ANR	160551	CompoundStatement		41:49:1327:1327	160248	1					
ANR	160552	IfStatement	if ( UNEXPECTED ( GC_REFCOUNT ( zobj -> properties ) > 1 ) )		160248	0					
ANR	160553	Condition	UNEXPECTED ( GC_REFCOUNT ( zobj -> properties ) > 1 )	1957:7:60711:60755	160248	0	True				
ANR	160554	CallExpression	UNEXPECTED ( GC_REFCOUNT ( zobj -> properties ) > 1 )		160248	0					
ANR	160555	Callee	UNEXPECTED		160248	0					
ANR	160556	Identifier	UNEXPECTED		160248	0					
ANR	160557	ArgumentList	GC_REFCOUNT ( zobj -> properties ) > 1		160248	1					
ANR	160558	Argument	GC_REFCOUNT ( zobj -> properties ) > 1		160248	0					
ANR	160559	RelationalExpression	GC_REFCOUNT ( zobj -> properties ) > 1		160248	0		>			
ANR	160560	CallExpression	GC_REFCOUNT ( zobj -> properties )		160248	0					
ANR	160561	Callee	GC_REFCOUNT		160248	0					
ANR	160562	Identifier	GC_REFCOUNT		160248	0					
ANR	160563	ArgumentList	zobj -> properties		160248	1					
ANR	160564	Argument	zobj -> properties		160248	0					
ANR	160565	PtrMemberAccess	zobj -> properties		160248	0					
ANR	160566	Identifier	zobj		160248	0					
ANR	160567	Identifier	properties		160248	1					
ANR	160568	PrimaryExpression	1		160248	1					
ANR	160569	CompoundStatement		42:54:1383:1383	160248	1					
ANR	160570	IfStatement	if ( EXPECTED ( ! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE ) ) )		160248	0					
ANR	160571	Condition	EXPECTED ( ! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE ) )	1958:8:60768:60827	160248	0	True				
ANR	160572	CallExpression	EXPECTED ( ! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE ) )		160248	0					
ANR	160573	Callee	EXPECTED		160248	0					
ANR	160574	Identifier	EXPECTED		160248	0					
ANR	160575	ArgumentList	! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE )		160248	1					
ANR	160576	Argument	! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE )		160248	0					
ANR	160577	UnaryOperationExpression	! ( GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE )		160248	0					
ANR	160578	UnaryOperator	!		160248	0					
ANR	160579	BitAndExpression	GC_FLAGS ( zobj -> properties ) & IS_ARRAY_IMMUTABLE		160248	1		&			
ANR	160580	CallExpression	GC_FLAGS ( zobj -> properties )		160248	0					
ANR	160581	Callee	GC_FLAGS		160248	0					
ANR	160582	Identifier	GC_FLAGS		160248	0					
ANR	160583	ArgumentList	zobj -> properties		160248	1					
ANR	160584	Argument	zobj -> properties		160248	0					
ANR	160585	PtrMemberAccess	zobj -> properties		160248	0					
ANR	160586	Identifier	zobj		160248	0					
ANR	160587	Identifier	properties		160248	1					
ANR	160588	Identifier	IS_ARRAY_IMMUTABLE		160248	1					
ANR	160589	CompoundStatement		43:70:1455:1455	160248	1					
ANR	160590	ExpressionStatement	GC_REFCOUNT ( zobj -> properties ) --	1959:5:60837:60868	160248	0	True				
ANR	160591	PostIncDecOperationExpression	GC_REFCOUNT ( zobj -> properties ) --		160248	0					
ANR	160592	CallExpression	GC_REFCOUNT ( zobj -> properties )		160248	0					
ANR	160593	Callee	GC_REFCOUNT		160248	0					
ANR	160594	Identifier	GC_REFCOUNT		160248	0					
ANR	160595	ArgumentList	zobj -> properties		160248	1					
ANR	160596	Argument	zobj -> properties		160248	0					
ANR	160597	PtrMemberAccess	zobj -> properties		160248	0					
ANR	160598	Identifier	zobj		160248	0					
ANR	160599	Identifier	properties		160248	1					
ANR	160600	IncDec	--		160248	1					
ANR	160601	ExpressionStatement	zobj -> properties = zend_array_dup ( zobj -> properties )	1961:4:60880:60931	160248	1	True				
ANR	160602	AssignmentExpression	zobj -> properties = zend_array_dup ( zobj -> properties )		160248	0		=			
ANR	160603	PtrMemberAccess	zobj -> properties		160248	0					
ANR	160604	Identifier	zobj		160248	0					
ANR	160605	Identifier	properties		160248	1					
ANR	160606	CallExpression	zend_array_dup ( zobj -> properties )		160248	1					
ANR	160607	Callee	zend_array_dup		160248	0					
ANR	160608	Identifier	zend_array_dup		160248	0					
ANR	160609	ArgumentList	zobj -> properties		160248	1					
ANR	160610	Argument	zobj -> properties		160248	0					
ANR	160611	PtrMemberAccess	zobj -> properties		160248	0					
ANR	160612	Identifier	zobj		160248	0					
ANR	160613	Identifier	properties		160248	1					
ANR	160614	ExpressionStatement	"retval = zend_hash_find ( zobj -> properties , Z_STR_P ( prop_ptr ) )"	1963:3:60941:61001	160248	1	True				
ANR	160615	AssignmentExpression	"retval = zend_hash_find ( zobj -> properties , Z_STR_P ( prop_ptr ) )"		160248	0		=			
ANR	160616	Identifier	retval		160248	0					
ANR	160617	CallExpression	"zend_hash_find ( zobj -> properties , Z_STR_P ( prop_ptr ) )"		160248	1					
ANR	160618	Callee	zend_hash_find		160248	0					
ANR	160619	Identifier	zend_hash_find		160248	0					
ANR	160620	ArgumentList	zobj -> properties		160248	1					
ANR	160621	Argument	zobj -> properties		160248	0					
ANR	160622	PtrMemberAccess	zobj -> properties		160248	0					
ANR	160623	Identifier	zobj		160248	0					
ANR	160624	Identifier	properties		160248	1					
ANR	160625	Argument	Z_STR_P ( prop_ptr )		160248	1					
ANR	160626	CallExpression	Z_STR_P ( prop_ptr )		160248	0					
ANR	160627	Callee	Z_STR_P		160248	0					
ANR	160628	Identifier	Z_STR_P		160248	0					
ANR	160629	ArgumentList	prop_ptr		160248	1					
ANR	160630	Argument	prop_ptr		160248	0					
ANR	160631	Identifier	prop_ptr		160248	0					
ANR	160632	IfStatement	if ( EXPECTED ( retval ) )		160248	2					
ANR	160633	Condition	EXPECTED ( retval )	1964:7:61010:61025	160248	0	True				
ANR	160634	CallExpression	EXPECTED ( retval )		160248	0					
ANR	160635	Callee	EXPECTED		160248	0					
ANR	160636	Identifier	EXPECTED		160248	0					
ANR	160637	ArgumentList	retval		160248	1					
ANR	160638	Argument	retval		160248	0					
ANR	160639	Identifier	retval		160248	0					
ANR	160640	CompoundStatement		49:25:1653:1653	160248	1					
ANR	160641	ExpressionStatement	"ZVAL_INDIRECT ( result , retval )"	1965:4:61034:61063	160248	0	True				
ANR	160642	CallExpression	"ZVAL_INDIRECT ( result , retval )"		160248	0					
ANR	160643	Callee	ZVAL_INDIRECT		160248	0					
ANR	160644	Identifier	ZVAL_INDIRECT		160248	0					
ANR	160645	ArgumentList	result		160248	1					
ANR	160646	Argument	result		160248	0					
ANR	160647	Identifier	result		160248	0					
ANR	160648	Argument	retval		160248	1					
ANR	160649	Identifier	retval		160248	0					
ANR	160650	ReturnStatement	return ;	1966:4:61069:61075	160248	1	True				
ANR	160651	IfStatement	if ( EXPECTED ( Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr ) )		160248	2					
ANR	160652	Condition	EXPECTED ( Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr )	1970:5:61094:61146	160248	0	True				
ANR	160653	CallExpression	EXPECTED ( Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr )		160248	0					
ANR	160654	Callee	EXPECTED		160248	0					
ANR	160655	Identifier	EXPECTED		160248	0					
ANR	160656	ArgumentList	Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr		160248	1					
ANR	160657	Argument	Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr		160248	0					
ANR	160658	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr		160248	0					
ANR	160659	CallExpression	Z_OBJ_HT_P ( container )		160248	0					
ANR	160660	Callee	Z_OBJ_HT_P		160248	0					
ANR	160661	Identifier	Z_OBJ_HT_P		160248	0					
ANR	160662	ArgumentList	container		160248	1					
ANR	160663	Argument	container		160248	0					
ANR	160664	Identifier	container		160248	0					
ANR	160665	Identifier	get_property_ptr_ptr		160248	1					
ANR	160666	CompoundStatement		56:2:1778:1872	160248	1					
ANR	160667	IdentifierDeclStatement	"zval * ptr = Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr ( container , prop_ptr , type , cache_slot ) ;"	1971:2:61153:61247	160248	0	True				
ANR	160668	IdentifierDecl	"* ptr = Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr ( container , prop_ptr , type , cache_slot )"		160248	0					
ANR	160669	IdentifierDeclType	zval *		160248	0					
ANR	160670	Identifier	ptr		160248	1					
ANR	160671	AssignmentExpression	"* ptr = Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr ( container , prop_ptr , type , cache_slot )"		160248	2		=			
ANR	160672	Identifier	ptr		160248	0					
ANR	160673	CallExpression	"Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr ( container , prop_ptr , type , cache_slot )"		160248	1					
ANR	160674	Callee	Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr		160248	0					
ANR	160675	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr		160248	0					
ANR	160676	CallExpression	Z_OBJ_HT_P ( container )		160248	0					
ANR	160677	Callee	Z_OBJ_HT_P		160248	0					
ANR	160678	Identifier	Z_OBJ_HT_P		160248	0					
ANR	160679	ArgumentList	container		160248	1					
ANR	160680	Argument	container		160248	0					
ANR	160681	Identifier	container		160248	0					
ANR	160682	Identifier	get_property_ptr_ptr		160248	1					
ANR	160683	ArgumentList	container		160248	1					
ANR	160684	Argument	container		160248	0					
ANR	160685	Identifier	container		160248	0					
ANR	160686	Argument	prop_ptr		160248	1					
ANR	160687	Identifier	prop_ptr		160248	0					
ANR	160688	Argument	type		160248	2					
ANR	160689	Identifier	type		160248	0					
ANR	160690	Argument	cache_slot		160248	3					
ANR	160691	Identifier	cache_slot		160248	0					
ANR	160692	IfStatement	if ( NULL == ptr )		160248	1					
ANR	160693	Condition	NULL == ptr	1972:6:61255:61265	160248	0	True				
ANR	160694	EqualityExpression	NULL == ptr		160248	0		==			
ANR	160695	Identifier	NULL		160248	0					
ANR	160696	Identifier	ptr		160248	1					
ANR	160697	CompoundStatement		57:19:1893:1893	160248	1					
ANR	160698	IfStatement	if ( EXPECTED ( Z_OBJ_HT_P ( container ) -> read_property ) )		160248	0					
ANR	160699	Condition	EXPECTED ( Z_OBJ_HT_P ( container ) -> read_property )	1973:7:61277:61322	160248	0	True				
ANR	160700	CallExpression	EXPECTED ( Z_OBJ_HT_P ( container ) -> read_property )		160248	0					
ANR	160701	Callee	EXPECTED		160248	0					
ANR	160702	Identifier	EXPECTED		160248	0					
ANR	160703	ArgumentList	Z_OBJ_HT_P ( container ) -> read_property		160248	1					
ANR	160704	Argument	Z_OBJ_HT_P ( container ) -> read_property		160248	0					
ANR	160705	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_property		160248	0					
ANR	160706	CallExpression	Z_OBJ_HT_P ( container )		160248	0					
ANR	160707	Callee	Z_OBJ_HT_P		160248	0					
ANR	160708	Identifier	Z_OBJ_HT_P		160248	0					
ANR	160709	ArgumentList	container		160248	1					
ANR	160710	Argument	container		160248	0					
ANR	160711	Identifier	container		160248	0					
ANR	160712	Identifier	read_property		160248	1					
ANR	160713	CompoundStatement		58:55:1950:1950	160248	1					
ANR	160714	ExpressionStatement	"ptr = Z_OBJ_HT_P ( container ) -> read_property ( container , prop_ptr , type , cache_slot , result )"	1974:4:61331:61420	160248	0	True				
ANR	160715	AssignmentExpression	"ptr = Z_OBJ_HT_P ( container ) -> read_property ( container , prop_ptr , type , cache_slot , result )"		160248	0		=			
ANR	160716	Identifier	ptr		160248	0					
ANR	160717	CallExpression	"Z_OBJ_HT_P ( container ) -> read_property ( container , prop_ptr , type , cache_slot , result )"		160248	1					
ANR	160718	Callee	Z_OBJ_HT_P ( container ) -> read_property		160248	0					
ANR	160719	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_property		160248	0					
ANR	160720	CallExpression	Z_OBJ_HT_P ( container )		160248	0					
ANR	160721	Callee	Z_OBJ_HT_P		160248	0					
ANR	160722	Identifier	Z_OBJ_HT_P		160248	0					
ANR	160723	ArgumentList	container		160248	1					
ANR	160724	Argument	container		160248	0					
ANR	160725	Identifier	container		160248	0					
ANR	160726	Identifier	read_property		160248	1					
ANR	160727	ArgumentList	container		160248	1					
ANR	160728	Argument	container		160248	0					
ANR	160729	Identifier	container		160248	0					
ANR	160730	Argument	prop_ptr		160248	1					
ANR	160731	Identifier	prop_ptr		160248	0					
ANR	160732	Argument	type		160248	2					
ANR	160733	Identifier	type		160248	0					
ANR	160734	Argument	cache_slot		160248	3					
ANR	160735	Identifier	cache_slot		160248	0					
ANR	160736	Argument	result		160248	4					
ANR	160737	Identifier	result		160248	0					
ANR	160738	IfStatement	if ( ptr != result )		160248	1					
ANR	160739	Condition	ptr != result	1975:8:61430:61442	160248	0	True				
ANR	160740	EqualityExpression	ptr != result		160248	0		!=			
ANR	160741	Identifier	ptr		160248	0					
ANR	160742	Identifier	result		160248	1					
ANR	160743	CompoundStatement		60:23:2070:2070	160248	1					
ANR	160744	ExpressionStatement	"ZVAL_INDIRECT ( result , ptr )"	1976:5:61452:61478	160248	0	True				
ANR	160745	CallExpression	"ZVAL_INDIRECT ( result , ptr )"		160248	0					
ANR	160746	Callee	ZVAL_INDIRECT		160248	0					
ANR	160747	Identifier	ZVAL_INDIRECT		160248	0					
ANR	160748	ArgumentList	result		160248	1					
ANR	160749	Argument	result		160248	0					
ANR	160750	Identifier	result		160248	0					
ANR	160751	Argument	ptr		160248	1					
ANR	160752	Identifier	ptr		160248	0					
ANR	160753	ElseStatement	else		160248	0					
ANR	160754	IfStatement	if ( UNEXPECTED ( Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1 ) )		160248	0					
ANR	160755	Condition	UNEXPECTED ( Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1 )	1977:15:61495:61546	160248	0	True				
ANR	160756	CallExpression	UNEXPECTED ( Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1 )		160248	0					
ANR	160757	Callee	UNEXPECTED		160248	0					
ANR	160758	Identifier	UNEXPECTED		160248	0					
ANR	160759	ArgumentList	Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1		160248	1					
ANR	160760	Argument	Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1		160248	0					
ANR	160761	AndExpression	Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1		160248	0		&&			
ANR	160762	CallExpression	Z_ISREF_P ( ptr )		160248	0					
ANR	160763	Callee	Z_ISREF_P		160248	0					
ANR	160764	Identifier	Z_ISREF_P		160248	0					
ANR	160765	ArgumentList	ptr		160248	1					
ANR	160766	Argument	ptr		160248	0					
ANR	160767	Identifier	ptr		160248	0					
ANR	160768	EqualityExpression	Z_REFCOUNT_P ( ptr ) == 1		160248	1		==			
ANR	160769	CallExpression	Z_REFCOUNT_P ( ptr )		160248	0					
ANR	160770	Callee	Z_REFCOUNT_P		160248	0					
ANR	160771	Identifier	Z_REFCOUNT_P		160248	0					
ANR	160772	ArgumentList	ptr		160248	1					
ANR	160773	Argument	ptr		160248	0					
ANR	160774	Identifier	ptr		160248	0					
ANR	160775	PrimaryExpression	1		160248	1					
ANR	160776	CompoundStatement		62:69:2174:2174	160248	1					
ANR	160777	ExpressionStatement	ZVAL_UNREF ( ptr )	1978:5:61556:61571	160248	0	True				
ANR	160778	CallExpression	ZVAL_UNREF ( ptr )		160248	0					
ANR	160779	Callee	ZVAL_UNREF		160248	0					
ANR	160780	Identifier	ZVAL_UNREF		160248	0					
ANR	160781	ArgumentList	ptr		160248	1					
ANR	160782	Argument	ptr		160248	0					
ANR	160783	Identifier	ptr		160248	0					
ANR	160784	ElseStatement	else		160248	0					
ANR	160785	CompoundStatement		65:10:2214:2214	160248	0					
ANR	160786	ExpressionStatement	"zend_throw_error ( NULL , ""Cannot access undefined property for object with overloaded property access"" )"	1981:4:61595:61696	160248	0	True				
ANR	160787	CallExpression	"zend_throw_error ( NULL , ""Cannot access undefined property for object with overloaded property access"" )"		160248	0					
ANR	160788	Callee	zend_throw_error		160248	0					
ANR	160789	Identifier	zend_throw_error		160248	0					
ANR	160790	ArgumentList	NULL		160248	1					
ANR	160791	Argument	NULL		160248	0					
ANR	160792	Identifier	NULL		160248	0					
ANR	160793	Argument	"""Cannot access undefined property for object with overloaded property access"""		160248	1					
ANR	160794	PrimaryExpression	"""Cannot access undefined property for object with overloaded property access"""		160248	0					
ANR	160795	ExpressionStatement	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"	1982:4:61702:61740	160248	1	True				
ANR	160796	CallExpression	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"		160248	0					
ANR	160797	Callee	ZVAL_INDIRECT		160248	0					
ANR	160798	Identifier	ZVAL_INDIRECT		160248	0					
ANR	160799	ArgumentList	result		160248	1					
ANR	160800	Argument	result		160248	0					
ANR	160801	Identifier	result		160248	0					
ANR	160802	Argument	& EG ( error_zval )		160248	1					
ANR	160803	UnaryOperationExpression	& EG ( error_zval )		160248	0					
ANR	160804	UnaryOperator	&		160248	0					
ANR	160805	CallExpression	EG ( error_zval )		160248	1					
ANR	160806	Callee	EG		160248	0					
ANR	160807	Identifier	EG		160248	0					
ANR	160808	ArgumentList	error_zval		160248	1					
ANR	160809	Argument	error_zval		160248	0					
ANR	160810	Identifier	error_zval		160248	0					
ANR	160811	ElseStatement	else		160248	0					
ANR	160812	CompoundStatement		69:9:2381:2381	160248	0					
ANR	160813	ExpressionStatement	"ZVAL_INDIRECT ( result , ptr )"	1985:3:61761:61787	160248	0	True				
ANR	160814	CallExpression	"ZVAL_INDIRECT ( result , ptr )"		160248	0					
ANR	160815	Callee	ZVAL_INDIRECT		160248	0					
ANR	160816	Identifier	ZVAL_INDIRECT		160248	0					
ANR	160817	ArgumentList	result		160248	1					
ANR	160818	Argument	result		160248	0					
ANR	160819	Identifier	result		160248	0					
ANR	160820	Argument	ptr		160248	1					
ANR	160821	Identifier	ptr		160248	0					
ANR	160822	ElseStatement	else		160248	0					
ANR	160823	IfStatement	if ( EXPECTED ( Z_OBJ_HT_P ( container ) -> read_property ) )		160248	0					
ANR	160824	Condition	EXPECTED ( Z_OBJ_HT_P ( container ) -> read_property )	1987:12:61805:61850	160248	0	True				
ANR	160825	CallExpression	EXPECTED ( Z_OBJ_HT_P ( container ) -> read_property )		160248	0					
ANR	160826	Callee	EXPECTED		160248	0					
ANR	160827	Identifier	EXPECTED		160248	0					
ANR	160828	ArgumentList	Z_OBJ_HT_P ( container ) -> read_property		160248	1					
ANR	160829	Argument	Z_OBJ_HT_P ( container ) -> read_property		160248	0					
ANR	160830	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_property		160248	0					
ANR	160831	CallExpression	Z_OBJ_HT_P ( container )		160248	0					
ANR	160832	Callee	Z_OBJ_HT_P		160248	0					
ANR	160833	Identifier	Z_OBJ_HT_P		160248	0					
ANR	160834	ArgumentList	container		160248	1					
ANR	160835	Argument	container		160248	0					
ANR	160836	Identifier	container		160248	0					
ANR	160837	Identifier	read_property		160248	1					
ANR	160838	CompoundStatement		73:2:2482:2577	160248	1					
ANR	160839	IdentifierDeclStatement	"zval * ptr = Z_OBJ_HT_P ( container ) -> read_property ( container , prop_ptr , type , cache_slot , result ) ;"	1988:2:61857:61952	160248	0	True				
ANR	160840	IdentifierDecl	"* ptr = Z_OBJ_HT_P ( container ) -> read_property ( container , prop_ptr , type , cache_slot , result )"		160248	0					
ANR	160841	IdentifierDeclType	zval *		160248	0					
ANR	160842	Identifier	ptr		160248	1					
ANR	160843	AssignmentExpression	"* ptr = Z_OBJ_HT_P ( container ) -> read_property ( container , prop_ptr , type , cache_slot , result )"		160248	2		=			
ANR	160844	Identifier	ptr		160248	0					
ANR	160845	CallExpression	"Z_OBJ_HT_P ( container ) -> read_property ( container , prop_ptr , type , cache_slot , result )"		160248	1					
ANR	160846	Callee	Z_OBJ_HT_P ( container ) -> read_property		160248	0					
ANR	160847	PtrMemberAccess	Z_OBJ_HT_P ( container ) -> read_property		160248	0					
ANR	160848	CallExpression	Z_OBJ_HT_P ( container )		160248	0					
ANR	160849	Callee	Z_OBJ_HT_P		160248	0					
ANR	160850	Identifier	Z_OBJ_HT_P		160248	0					
ANR	160851	ArgumentList	container		160248	1					
ANR	160852	Argument	container		160248	0					
ANR	160853	Identifier	container		160248	0					
ANR	160854	Identifier	read_property		160248	1					
ANR	160855	ArgumentList	container		160248	1					
ANR	160856	Argument	container		160248	0					
ANR	160857	Identifier	container		160248	0					
ANR	160858	Argument	prop_ptr		160248	1					
ANR	160859	Identifier	prop_ptr		160248	0					
ANR	160860	Argument	type		160248	2					
ANR	160861	Identifier	type		160248	0					
ANR	160862	Argument	cache_slot		160248	3					
ANR	160863	Identifier	cache_slot		160248	0					
ANR	160864	Argument	result		160248	4					
ANR	160865	Identifier	result		160248	0					
ANR	160866	IfStatement	if ( ptr != result )		160248	1					
ANR	160867	Condition	ptr != result	1989:6:61960:61972	160248	0	True				
ANR	160868	EqualityExpression	ptr != result		160248	0		!=			
ANR	160869	Identifier	ptr		160248	0					
ANR	160870	Identifier	result		160248	1					
ANR	160871	CompoundStatement		74:21:2600:2600	160248	1					
ANR	160872	ExpressionStatement	"ZVAL_INDIRECT ( result , ptr )"	1990:3:61980:62006	160248	0	True				
ANR	160873	CallExpression	"ZVAL_INDIRECT ( result , ptr )"		160248	0					
ANR	160874	Callee	ZVAL_INDIRECT		160248	0					
ANR	160875	Identifier	ZVAL_INDIRECT		160248	0					
ANR	160876	ArgumentList	result		160248	1					
ANR	160877	Argument	result		160248	0					
ANR	160878	Identifier	result		160248	0					
ANR	160879	Argument	ptr		160248	1					
ANR	160880	Identifier	ptr		160248	0					
ANR	160881	ElseStatement	else		160248	0					
ANR	160882	IfStatement	if ( UNEXPECTED ( Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1 ) )		160248	0					
ANR	160883	Condition	UNEXPECTED ( Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1 )	1991:13:62021:62072	160248	0	True				
ANR	160884	CallExpression	UNEXPECTED ( Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1 )		160248	0					
ANR	160885	Callee	UNEXPECTED		160248	0					
ANR	160886	Identifier	UNEXPECTED		160248	0					
ANR	160887	ArgumentList	Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1		160248	1					
ANR	160888	Argument	Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1		160248	0					
ANR	160889	AndExpression	Z_ISREF_P ( ptr ) && Z_REFCOUNT_P ( ptr ) == 1		160248	0		&&			
ANR	160890	CallExpression	Z_ISREF_P ( ptr )		160248	0					
ANR	160891	Callee	Z_ISREF_P		160248	0					
ANR	160892	Identifier	Z_ISREF_P		160248	0					
ANR	160893	ArgumentList	ptr		160248	1					
ANR	160894	Argument	ptr		160248	0					
ANR	160895	Identifier	ptr		160248	0					
ANR	160896	EqualityExpression	Z_REFCOUNT_P ( ptr ) == 1		160248	1		==			
ANR	160897	CallExpression	Z_REFCOUNT_P ( ptr )		160248	0					
ANR	160898	Callee	Z_REFCOUNT_P		160248	0					
ANR	160899	Identifier	Z_REFCOUNT_P		160248	0					
ANR	160900	ArgumentList	ptr		160248	1					
ANR	160901	Argument	ptr		160248	0					
ANR	160902	Identifier	ptr		160248	0					
ANR	160903	PrimaryExpression	1		160248	1					
ANR	160904	CompoundStatement		76:67:2700:2700	160248	1					
ANR	160905	ExpressionStatement	ZVAL_UNREF ( ptr )	1992:3:62080:62095	160248	0	True				
ANR	160906	CallExpression	ZVAL_UNREF ( ptr )		160248	0					
ANR	160907	Callee	ZVAL_UNREF		160248	0					
ANR	160908	Identifier	ZVAL_UNREF		160248	0					
ANR	160909	ArgumentList	ptr		160248	1					
ANR	160910	Argument	ptr		160248	0					
ANR	160911	Identifier	ptr		160248	0					
ANR	160912	ElseStatement	else		160248	0					
ANR	160913	CompoundStatement		79:8:2734:2734	160248	0					
ANR	160914	ExpressionStatement	"zend_error ( E_WARNING , ""This object doesn't support property references"" )"	1995:2:62113:62185	160248	0	True				
ANR	160915	CallExpression	"zend_error ( E_WARNING , ""This object doesn't support property references"" )"		160248	0					
ANR	160916	Callee	zend_error		160248	0					
ANR	160917	Identifier	zend_error		160248	0					
ANR	160918	ArgumentList	E_WARNING		160248	1					
ANR	160919	Argument	E_WARNING		160248	0					
ANR	160920	Identifier	E_WARNING		160248	0					
ANR	160921	Argument	"""This object doesn't support property references"""		160248	1					
ANR	160922	PrimaryExpression	"""This object doesn't support property references"""		160248	0					
ANR	160923	ExpressionStatement	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"	1996:2:62189:62227	160248	1	True				
ANR	160924	CallExpression	"ZVAL_INDIRECT ( result , & EG ( error_zval ) )"		160248	0					
ANR	160925	Callee	ZVAL_INDIRECT		160248	0					
ANR	160926	Identifier	ZVAL_INDIRECT		160248	0					
ANR	160927	ArgumentList	result		160248	1					
ANR	160928	Argument	result		160248	0					
ANR	160929	Identifier	result		160248	0					
ANR	160930	Argument	& EG ( error_zval )		160248	1					
ANR	160931	UnaryOperationExpression	& EG ( error_zval )		160248	0					
ANR	160932	UnaryOperator	&		160248	0					
ANR	160933	CallExpression	EG ( error_zval )		160248	1					
ANR	160934	Callee	EG		160248	0					
ANR	160935	Identifier	EG		160248	0					
ANR	160936	ArgumentList	error_zval		160248	1					
ANR	160937	Argument	error_zval		160248	0					
ANR	160938	Identifier	error_zval		160248	0					
ANR	160939	ReturnType	static zend_always_inline void		160248	1					
ANR	160940	Identifier	zend_fetch_property_address		160248	2					
ANR	160941	ParameterList	"zval * result , zval * container , uint32_t container_op_type , zval * prop_ptr , uint32_t prop_op_type , void * * cache_slot , int type"		160248	3					
ANR	160942	Parameter	zval * result	1915:59:59247:59258	160248	0	True				
ANR	160943	ParameterType	zval *		160248	0					
ANR	160944	Identifier	result		160248	1					
ANR	160945	Parameter	zval * container	1915:73:59261:59275	160248	1	True				
ANR	160946	ParameterType	zval *		160248	0					
ANR	160947	Identifier	container		160248	1					
ANR	160948	Parameter	uint32_t container_op_type	1915:90:59278:59303	160248	2	True				
ANR	160949	ParameterType	uint32_t		160248	0					
ANR	160950	Identifier	container_op_type		160248	1					
ANR	160951	Parameter	zval * prop_ptr	1915:118:59306:59319	160248	3	True				
ANR	160952	ParameterType	zval *		160248	0					
ANR	160953	Identifier	prop_ptr		160248	1					
ANR	160954	Parameter	uint32_t prop_op_type	1915:134:59322:59342	160248	4	True				
ANR	160955	ParameterType	uint32_t		160248	0					
ANR	160956	Identifier	prop_op_type		160248	1					
ANR	160957	Parameter	void * * cache_slot	1915:157:59345:59361	160248	5	True				
ANR	160958	ParameterType	void * *		160248	0					
ANR	160959	Identifier	cache_slot		160248	1					
ANR	160960	Parameter	int type	1915:176:59364:59371	160248	6	True				
ANR	160961	ParameterType	int		160248	0					
ANR	160962	Identifier	type		160248	1					
ANR	160963	CFGEntryNode	ENTRY		160248		True				
ANR	160964	CFGExitNode	EXIT		160248		True				
ANR	160965	Symbol	container		160248						
ANR	160966	Symbol	zobj		160248						
ANR	160967	Symbol	Z_OBJ_P		160248						
ANR	160968	Symbol	GC_FLAGS		160248						
ANR	160969	Symbol	type		160248						
ANR	160970	Symbol	& EG		160248						
ANR	160971	Symbol	ZEND_DYNAMIC_PROPERTY_OFFSET		160248						
ANR	160972	Symbol	Z_REFCOUNT_P		160248						
ANR	160973	Symbol	result		160248						
ANR	160974	Symbol	UNEXPECTED		160248						
ANR	160975	Symbol	E_WARNING		160248						
ANR	160976	Symbol	Z_OBJ_HT_P ( container ) -> read_property		160248						
ANR	160977	Symbol	zend_hash_find		160248						
ANR	160978	Symbol	* zobj		160248						
ANR	160979	Symbol	zobj -> properties		160248						
ANR	160980	Symbol	Z_OBJCE_P		160248						
ANR	160981	Symbol	prop_ptr		160248						
ANR	160982	Symbol	Z_STRLEN_P		160248						
ANR	160983	Symbol	IS_STRING		160248						
ANR	160984	Symbol	GC_REFCOUNT		160248						
ANR	160985	Symbol	IS_FALSE		160248						
ANR	160986	Symbol	IS_UNDEF		160248						
ANR	160987	Symbol	zend_array_dup		160248						
ANR	160988	Symbol	cache_slot		160248						
ANR	160989	Symbol	IS_CONST		160248						
ANR	160990	Symbol	NULL		160248						
ANR	160991	Symbol	CACHED_PTR_EX		160248						
ANR	160992	Symbol	IS_ARRAY_IMMUTABLE		160248						
ANR	160993	Symbol	Z_TYPE_P		160248						
ANR	160994	Symbol	* Z_OBJ_HT_P		160248						
ANR	160995	Symbol	retval		160248						
ANR	160996	Symbol	Z_OBJ_HT_P ( container ) -> get_property_ptr_ptr		160248						
ANR	160997	Symbol	ptr		160248						
ANR	160998	Symbol	OBJ_PROP		160248						
ANR	160999	Symbol	prop_offset		160248						
ANR	161000	Symbol	prop_op_type		160248						
ANR	161001	Symbol	error_zval		160248						
ANR	161002	Symbol	Z_REFVAL_P		160248						
ANR	161003	Symbol	Z_OBJ_HT_P		160248						
ANR	161004	Symbol	Z_STR_P		160248						
ANR	161005	Symbol	IS_OBJECT		160248						
ANR	161006	Symbol	IS_VAR		160248						
ANR	161007	Symbol	EXPECTED		160248						
ANR	161008	Symbol	BP_VAR_UNSET		160248						
ANR	161009	Symbol	container_op_type		160248						
ANR	161010	Symbol	Z_ISREF_P		160248						
ANR	161011	Symbol	IS_UNUSED		160248						
ANR	161012	Function	zend_check_symbol	2008:0:62483:63023							
ANR	161013	FunctionDef	zend_check_symbol (zval * pz)		161012	0					
ANR	161014	CompoundStatement		2009:0:62522:63023	161012	0					
ANR	161015	IfStatement	if ( Z_TYPE_P ( pz ) == IS_INDIRECT )		161012	0					
ANR	161016	Condition	Z_TYPE_P ( pz ) == IS_INDIRECT	2010:5:62529:62555	161012	0	True				
ANR	161017	EqualityExpression	Z_TYPE_P ( pz ) == IS_INDIRECT		161012	0		==			
ANR	161018	CallExpression	Z_TYPE_P ( pz )		161012	0					
ANR	161019	Callee	Z_TYPE_P		161012	0					
ANR	161020	Identifier	Z_TYPE_P		161012	0					
ANR	161021	ArgumentList	pz		161012	1					
ANR	161022	Argument	pz		161012	0					
ANR	161023	Identifier	pz		161012	0					
ANR	161024	Identifier	IS_INDIRECT		161012	1					
ANR	161025	CompoundStatement		2:34:35:35	161012	1					
ANR	161026	ExpressionStatement	pz = Z_INDIRECT_P ( pz )	2011:2:62562:62583	161012	0	True				
ANR	161027	AssignmentExpression	pz = Z_INDIRECT_P ( pz )		161012	0		=			
ANR	161028	Identifier	pz		161012	0					
ANR	161029	CallExpression	Z_INDIRECT_P ( pz )		161012	1					
ANR	161030	Callee	Z_INDIRECT_P		161012	0					
ANR	161031	Identifier	Z_INDIRECT_P		161012	0					
ANR	161032	ArgumentList	pz		161012	1					
ANR	161033	Argument	pz		161012	0					
ANR	161034	Identifier	pz		161012	0					
ANR	161035	IfStatement	if ( Z_TYPE_P ( pz ) > 10 )		161012	1					
ANR	161036	Condition	Z_TYPE_P ( pz ) > 10	2013:5:62593:62609	161012	0	True				
ANR	161037	RelationalExpression	Z_TYPE_P ( pz ) > 10		161012	0		>			
ANR	161038	CallExpression	Z_TYPE_P ( pz )		161012	0					
ANR	161039	Callee	Z_TYPE_P		161012	0					
ANR	161040	Identifier	Z_TYPE_P		161012	0					
ANR	161041	ArgumentList	pz		161012	1					
ANR	161042	Argument	pz		161012	0					
ANR	161043	Identifier	pz		161012	0					
ANR	161044	PrimaryExpression	10		161012	1					
ANR	161045	CompoundStatement		5:24:89:89	161012	1					
ANR	161046	ExpressionStatement	"fprintf ( stderr , ""Warning!  %x has invalid type!\\n"" , * pz )"	2014:2:62616:62672	161012	0	True				
ANR	161047	CallExpression	"fprintf ( stderr , ""Warning!  %x has invalid type!\\n"" , * pz )"		161012	0					
ANR	161048	Callee	fprintf		161012	0					
ANR	161049	Identifier	fprintf		161012	0					
ANR	161050	ArgumentList	stderr		161012	1					
ANR	161051	Argument	stderr		161012	0					
ANR	161052	Identifier	stderr		161012	0					
ANR	161053	Argument	"""Warning!  %x has invalid type!\\n"""		161012	1					
ANR	161054	PrimaryExpression	"""Warning!  %x has invalid type!\\n"""		161012	0					
ANR	161055	Argument	* pz		161012	2					
ANR	161056	UnaryOperationExpression	* pz		161012	0					
ANR	161057	UnaryOperator	*		161012	0					
ANR	161058	Identifier	pz		161012	1					
ANR	161059	ExpressionStatement	fflush ( stderr )	2017:2:62743:62757	161012	1	True				
ANR	161060	CallExpression	fflush ( stderr )		161012	0					
ANR	161061	Callee	fflush		161012	0					
ANR	161062	Identifier	fflush		161012	0					
ANR	161063	ArgumentList	stderr		161012	1					
ANR	161064	Argument	stderr		161012	0					
ANR	161065	Identifier	stderr		161012	0					
ANR	161066	ElseStatement	else		161012	0					
ANR	161067	IfStatement	if ( Z_TYPE_P ( pz ) == IS_ARRAY )		161012	0					
ANR	161068	Condition	Z_TYPE_P ( pz ) == IS_ARRAY	2019:12:62778:62801	161012	0	True				
ANR	161069	EqualityExpression	Z_TYPE_P ( pz ) == IS_ARRAY		161012	0		==			
ANR	161070	CallExpression	Z_TYPE_P ( pz )		161012	0					
ANR	161071	Callee	Z_TYPE_P		161012	0					
ANR	161072	Identifier	Z_TYPE_P		161012	0					
ANR	161073	ArgumentList	pz		161012	1					
ANR	161074	Argument	pz		161012	0					
ANR	161075	Identifier	pz		161012	0					
ANR	161076	Identifier	IS_ARRAY		161012	1					
ANR	161077	CompoundStatement		11:38:281:281	161012	1					
ANR	161078	ExpressionStatement	"zend_hash_apply ( Z_ARRVAL_P ( pz ) , zend_check_symbol )"	2020:2:62808:62858	161012	0	True				
ANR	161079	CallExpression	"zend_hash_apply ( Z_ARRVAL_P ( pz ) , zend_check_symbol )"		161012	0					
ANR	161080	Callee	zend_hash_apply		161012	0					
ANR	161081	Identifier	zend_hash_apply		161012	0					
ANR	161082	ArgumentList	Z_ARRVAL_P ( pz )		161012	1					
ANR	161083	Argument	Z_ARRVAL_P ( pz )		161012	0					
ANR	161084	CallExpression	Z_ARRVAL_P ( pz )		161012	0					
ANR	161085	Callee	Z_ARRVAL_P		161012	0					
ANR	161086	Identifier	Z_ARRVAL_P		161012	0					
ANR	161087	ArgumentList	pz		161012	1					
ANR	161088	Argument	pz		161012	0					
ANR	161089	Identifier	pz		161012	0					
ANR	161090	Argument	zend_check_symbol		161012	1					
ANR	161091	Identifier	zend_check_symbol		161012	0					
ANR	161092	ElseStatement	else		161012	0					
ANR	161093	IfStatement	if ( Z_TYPE_P ( pz ) == IS_OBJECT )		161012	0					
ANR	161094	Condition	Z_TYPE_P ( pz ) == IS_OBJECT	2021:12:62872:62896	161012	0	True				
ANR	161095	EqualityExpression	Z_TYPE_P ( pz ) == IS_OBJECT		161012	0		==			
ANR	161096	CallExpression	Z_TYPE_P ( pz )		161012	0					
ANR	161097	Callee	Z_TYPE_P		161012	0					
ANR	161098	Identifier	Z_TYPE_P		161012	0					
ANR	161099	ArgumentList	pz		161012	1					
ANR	161100	Argument	pz		161012	0					
ANR	161101	Identifier	pz		161012	0					
ANR	161102	Identifier	IS_OBJECT		161012	1					
ANR	161103	CompoundStatement		13:39:376:376	161012	1					
ANR	161104	ExpressionStatement	"zend_hash_apply ( Z_OBJPROP_P ( pz ) , zend_check_symbol )"	2023:2:62955:63006	161012	0	True				
ANR	161105	CallExpression	"zend_hash_apply ( Z_OBJPROP_P ( pz ) , zend_check_symbol )"		161012	0					
ANR	161106	Callee	zend_hash_apply		161012	0					
ANR	161107	Identifier	zend_hash_apply		161012	0					
ANR	161108	ArgumentList	Z_OBJPROP_P ( pz )		161012	1					
ANR	161109	Argument	Z_OBJPROP_P ( pz )		161012	0					
ANR	161110	CallExpression	Z_OBJPROP_P ( pz )		161012	0					
ANR	161111	Callee	Z_OBJPROP_P		161012	0					
ANR	161112	Identifier	Z_OBJPROP_P		161012	0					
ANR	161113	ArgumentList	pz		161012	1					
ANR	161114	Argument	pz		161012	0					
ANR	161115	Identifier	pz		161012	0					
ANR	161116	Argument	zend_check_symbol		161012	1					
ANR	161117	Identifier	zend_check_symbol		161012	0					
ANR	161118	ReturnStatement	return 0 ;	2026:1:63013:63021	161012	2	True				
ANR	161119	PrimaryExpression	0		161012	0					
ANR	161120	ReturnType	static int		161012	1					
ANR	161121	Identifier	zend_check_symbol		161012	2					
ANR	161122	ParameterList	zval * pz		161012	3					
ANR	161123	Parameter	zval * pz	2008:29:62512:62519	161012	0	True				
ANR	161124	ParameterType	zval *		161012	0					
ANR	161125	Identifier	pz		161012	1					
ANR	161126	CFGEntryNode	ENTRY		161012		True				
ANR	161127	CFGExitNode	EXIT		161012		True				
ANR	161128	Symbol	zend_check_symbol		161012						
ANR	161129	Symbol	* pz		161012						
ANR	161130	Symbol	IS_ARRAY		161012						
ANR	161131	Symbol	Z_INDIRECT_P		161012						
ANR	161132	Symbol	pz		161012						
ANR	161133	Symbol	Z_OBJPROP_P		161012						
ANR	161134	Symbol	Z_TYPE_P		161012						
ANR	161135	Symbol	stderr		161012						
ANR	161136	Symbol	Z_ARRVAL_P		161012						
ANR	161137	Symbol	IS_OBJECT		161012						
ANR	161138	Symbol	IS_INDIRECT		161012						
ANR	161139	Function	execute_internal	2034:0:63071:63233							
ANR	161140	FunctionDef	"execute_internal (zend_execute_data * execute_data , zval * return_value)"		161139	0					
ANR	161141	CompoundStatement		2035:0:63155:63233	161139	0					
ANR	161142	ExpressionStatement	"execute_data -> func -> internal_function . handler ( execute_data , return_value )"	2036:1:63158:63231	161139	0	True				
ANR	161143	CallExpression	"execute_data -> func -> internal_function . handler ( execute_data , return_value )"		161139	0					
ANR	161144	Callee	execute_data -> func -> internal_function . handler		161139	0					
ANR	161145	MemberAccess	execute_data -> func -> internal_function . handler		161139	0					
ANR	161146	PtrMemberAccess	execute_data -> func -> internal_function		161139	0					
ANR	161147	PtrMemberAccess	execute_data -> func		161139	0					
ANR	161148	Identifier	execute_data		161139	0					
ANR	161149	Identifier	func		161139	1					
ANR	161150	Identifier	internal_function		161139	1					
ANR	161151	Identifier	handler		161139	1					
ANR	161152	ArgumentList	execute_data		161139	1					
ANR	161153	Argument	execute_data		161139	0					
ANR	161154	Identifier	execute_data		161139	0					
ANR	161155	Argument	return_value		161139	1					
ANR	161156	Identifier	return_value		161139	0					
ANR	161157	ReturnType	ZEND_API void		161139	1					
ANR	161158	Identifier	execute_internal		161139	2					
ANR	161159	ParameterList	"zend_execute_data * execute_data , zval * return_value"		161139	3					
ANR	161160	Parameter	zend_execute_data * execute_data	2034:31:63102:63132	161139	0	True				
ANR	161161	ParameterType	zend_execute_data *		161139	0					
ANR	161162	Identifier	execute_data		161139	1					
ANR	161163	Parameter	zval * return_value	2034:64:63135:63152	161139	1	True				
ANR	161164	ParameterType	zval *		161139	0					
ANR	161165	Identifier	return_value		161139	1					
ANR	161166	CFGEntryNode	ENTRY		161139		True				
ANR	161167	CFGExitNode	EXIT		161139		True				
ANR	161168	Symbol	return_value		161139						
ANR	161169	Symbol	* execute_data -> func		161139						
ANR	161170	Symbol	* execute_data		161139						
ANR	161171	Symbol	* * execute_data		161139						
ANR	161172	Symbol	execute_data -> func		161139						
ANR	161173	Symbol	execute_data		161139						
ANR	161174	Symbol	execute_data -> func -> internal_function		161139						
ANR	161175	Function	zend_clean_and_cache_symbol_table	2039:0:63236:63621							
ANR	161176	FunctionDef	zend_clean_and_cache_symbol_table (zend_array * symbol_table)		161175	0					
ANR	161177	CompoundStatement		2040:0:63320:63621	161175	0					
ANR	161178	IfStatement	if ( EG ( symtable_cache_ptr ) >= EG ( symtable_cache_limit ) )		161175	0					
ANR	161179	Condition	EG ( symtable_cache_ptr ) >= EG ( symtable_cache_limit )	2041:5:63327:63376	161175	0	True				
ANR	161180	RelationalExpression	EG ( symtable_cache_ptr ) >= EG ( symtable_cache_limit )		161175	0		>=			
ANR	161181	CallExpression	EG ( symtable_cache_ptr )		161175	0					
ANR	161182	Callee	EG		161175	0					
ANR	161183	Identifier	EG		161175	0					
ANR	161184	ArgumentList	symtable_cache_ptr		161175	1					
ANR	161185	Argument	symtable_cache_ptr		161175	0					
ANR	161186	Identifier	symtable_cache_ptr		161175	0					
ANR	161187	CallExpression	EG ( symtable_cache_limit )		161175	1					
ANR	161188	Callee	EG		161175	0					
ANR	161189	Identifier	EG		161175	0					
ANR	161190	ArgumentList	symtable_cache_limit		161175	1					
ANR	161191	Argument	symtable_cache_limit		161175	0					
ANR	161192	Identifier	symtable_cache_limit		161175	0					
ANR	161193	CompoundStatement		2:57:58:58	161175	1					
ANR	161194	ExpressionStatement	zend_array_destroy ( symbol_table )	2042:2:63383:63415	161175	0	True				
ANR	161195	CallExpression	zend_array_destroy ( symbol_table )		161175	0					
ANR	161196	Callee	zend_array_destroy		161175	0					
ANR	161197	Identifier	zend_array_destroy		161175	0					
ANR	161198	ArgumentList	symbol_table		161175	1					
ANR	161199	Argument	symbol_table		161175	0					
ANR	161200	Identifier	symbol_table		161175	0					
ANR	161201	ElseStatement	else		161175	0					
ANR	161202	CompoundStatement		4:8:104:104	161175	0					
ANR	161203	ExpressionStatement	zend_symtable_clean ( symbol_table )	2046:2:63537:63570	161175	0	True				
ANR	161204	CallExpression	zend_symtable_clean ( symbol_table )		161175	0					
ANR	161205	Callee	zend_symtable_clean		161175	0					
ANR	161206	Identifier	zend_symtable_clean		161175	0					
ANR	161207	ArgumentList	symbol_table		161175	1					
ANR	161208	Argument	symbol_table		161175	0					
ANR	161209	Identifier	symbol_table		161175	0					
ANR	161210	ExpressionStatement	* ( ++ EG ( symtable_cache_ptr ) ) = symbol_table	2047:2:63574:63616	161175	1	True				
ANR	161211	AssignmentExpression	* ( ++ EG ( symtable_cache_ptr ) ) = symbol_table		161175	0		=			
ANR	161212	UnaryOperationExpression	* ( ++ EG ( symtable_cache_ptr ) )		161175	0					
ANR	161213	UnaryOperator	*		161175	0					
ANR	161214	UnaryExpression	++ EG ( symtable_cache_ptr )		161175	1					
ANR	161215	IncDec	++		161175	0					
ANR	161216	CallExpression	EG ( symtable_cache_ptr )		161175	1					
ANR	161217	Callee	EG		161175	0					
ANR	161218	Identifier	EG		161175	0					
ANR	161219	ArgumentList	symtable_cache_ptr		161175	1					
ANR	161220	Argument	symtable_cache_ptr		161175	0					
ANR	161221	Identifier	symtable_cache_ptr		161175	0					
ANR	161222	Identifier	symbol_table		161175	1					
ANR	161223	ReturnType	ZEND_API void		161175	1					
ANR	161224	Identifier	zend_clean_and_cache_symbol_table		161175	2					
ANR	161225	ParameterList	zend_array * symbol_table		161175	3					
ANR	161226	Parameter	zend_array * symbol_table	2039:48:63284:63307	161175	0	True				
ANR	161227	ParameterType	zend_array *		161175	0					
ANR	161228	Identifier	symbol_table		161175	1					
ANR	161229	CFGEntryNode	ENTRY		161175		True				
ANR	161230	CFGExitNode	EXIT		161175		True				
ANR	161231	Symbol	EG		161175						
ANR	161232	Symbol	* ( ++ EG ( symtable_cache_ptr ) )		161175						
ANR	161233	Symbol	symtable_cache_ptr		161175						
ANR	161234	Symbol	symtable_cache_limit		161175						
ANR	161235	Symbol	symbol_table		161175						
ANR	161236	Symbol	* EG		161175						
ANR	161237	Function	i_free_compiled_variables	2052:0:63634:64057							
ANR	161238	FunctionDef	i_free_compiled_variables (zend_execute_data * execute_data)		161237	0					
ANR	161239	CompoundStatement		2053:0:63734:64057	161237	0					
ANR	161240	IdentifierDeclStatement	zval * cv = EX_VAR_NUM ( 0 ) ;	2054:1:63737:63761	161237	0	True				
ANR	161241	IdentifierDecl	* cv = EX_VAR_NUM ( 0 )		161237	0					
ANR	161242	IdentifierDeclType	zval *		161237	0					
ANR	161243	Identifier	cv		161237	1					
ANR	161244	AssignmentExpression	* cv = EX_VAR_NUM ( 0 )		161237	2		=			
ANR	161245	Identifier	cv		161237	0					
ANR	161246	CallExpression	EX_VAR_NUM ( 0 )		161237	1					
ANR	161247	Callee	EX_VAR_NUM		161237	0					
ANR	161248	Identifier	EX_VAR_NUM		161237	0					
ANR	161249	ArgumentList	0		161237	1					
ANR	161250	Argument	0		161237	0					
ANR	161251	PrimaryExpression	0		161237	0					
ANR	161252	IdentifierDeclStatement	zval * end = cv + EX ( func ) -> op_array . last_var ;	2055:1:63764:63808	161237	1	True				
ANR	161253	IdentifierDecl	* end = cv + EX ( func ) -> op_array . last_var		161237	0					
ANR	161254	IdentifierDeclType	zval *		161237	0					
ANR	161255	Identifier	end		161237	1					
ANR	161256	AssignmentExpression	* end = cv + EX ( func ) -> op_array . last_var		161237	2		=			
ANR	161257	Identifier	end		161237	0					
ANR	161258	AdditiveExpression	cv + EX ( func ) -> op_array . last_var		161237	1		+			
ANR	161259	Identifier	cv		161237	0					
ANR	161260	MemberAccess	EX ( func ) -> op_array . last_var		161237	1					
ANR	161261	PtrMemberAccess	EX ( func ) -> op_array		161237	0					
ANR	161262	CallExpression	EX ( func )		161237	0					
ANR	161263	Callee	EX		161237	0					
ANR	161264	Identifier	EX		161237	0					
ANR	161265	ArgumentList	func		161237	1					
ANR	161266	Argument	func		161237	0					
ANR	161267	Identifier	func		161237	0					
ANR	161268	Identifier	op_array		161237	1					
ANR	161269	Identifier	last_var		161237	1					
ANR	161270	WhileStatement	while ( EXPECTED ( cv != end ) )		161237	2					
ANR	161271	Condition	EXPECTED ( cv != end )	2056:8:63818:63836	161237	0	True				
ANR	161272	CallExpression	EXPECTED ( cv != end )		161237	0					
ANR	161273	Callee	EXPECTED		161237	0					
ANR	161274	Identifier	EXPECTED		161237	0					
ANR	161275	ArgumentList	cv != end		161237	1					
ANR	161276	Argument	cv != end		161237	0					
ANR	161277	EqualityExpression	cv != end		161237	0		!=			
ANR	161278	Identifier	cv		161237	0					
ANR	161279	Identifier	end		161237	1					
ANR	161280	CompoundStatement		4:29:104:104	161237	1					
ANR	161281	IfStatement	if ( Z_REFCOUNTED_P ( cv ) )		161237	0					
ANR	161282	Condition	Z_REFCOUNTED_P ( cv )	2057:6:63847:63864	161237	0	True				
ANR	161283	CallExpression	Z_REFCOUNTED_P ( cv )		161237	0					
ANR	161284	Callee	Z_REFCOUNTED_P		161237	0					
ANR	161285	Identifier	Z_REFCOUNTED_P		161237	0					
ANR	161286	ArgumentList	cv		161237	1					
ANR	161287	Argument	cv		161237	0					
ANR	161288	Identifier	cv		161237	0					
ANR	161289	CompoundStatement		5:26:132:132	161237	1					
ANR	161290	IfStatement	if ( ! Z_DELREF_P ( cv ) )		161237	0					
ANR	161291	Condition	! Z_DELREF_P ( cv )	2058:7:63876:63890	161237	0	True				
ANR	161292	UnaryOperationExpression	! Z_DELREF_P ( cv )		161237	0					
ANR	161293	UnaryOperator	!		161237	0					
ANR	161294	CallExpression	Z_DELREF_P ( cv )		161237	1					
ANR	161295	Callee	Z_DELREF_P		161237	0					
ANR	161296	Identifier	Z_DELREF_P		161237	0					
ANR	161297	ArgumentList	cv		161237	1					
ANR	161298	Argument	cv		161237	0					
ANR	161299	Identifier	cv		161237	0					
ANR	161300	CompoundStatement		7:4:164:200	161237	1					
ANR	161301	IdentifierDeclStatement	zend_refcounted * r = Z_COUNTED_P ( cv ) ;	2059:4:63899:63935	161237	0	True				
ANR	161302	IdentifierDecl	* r = Z_COUNTED_P ( cv )		161237	0					
ANR	161303	IdentifierDeclType	zend_refcounted *		161237	0					
ANR	161304	Identifier	r		161237	1					
ANR	161305	AssignmentExpression	* r = Z_COUNTED_P ( cv )		161237	2		=			
ANR	161306	Identifier	r		161237	0					
ANR	161307	CallExpression	Z_COUNTED_P ( cv )		161237	1					
ANR	161308	Callee	Z_COUNTED_P		161237	0					
ANR	161309	Identifier	Z_COUNTED_P		161237	0					
ANR	161310	ArgumentList	cv		161237	1					
ANR	161311	Argument	cv		161237	0					
ANR	161312	Identifier	cv		161237	0					
ANR	161313	ExpressionStatement	ZVAL_NULL ( cv )	2060:4:63941:63954	161237	1	True				
ANR	161314	CallExpression	ZVAL_NULL ( cv )		161237	0					
ANR	161315	Callee	ZVAL_NULL		161237	0					
ANR	161316	Identifier	ZVAL_NULL		161237	0					
ANR	161317	ArgumentList	cv		161237	1					
ANR	161318	Argument	cv		161237	0					
ANR	161319	Identifier	cv		161237	0					
ANR	161320	ExpressionStatement	zval_dtor_func_for_ptr ( r )	2061:4:63960:63985	161237	2	True				
ANR	161321	CallExpression	zval_dtor_func_for_ptr ( r )		161237	0					
ANR	161322	Callee	zval_dtor_func_for_ptr		161237	0					
ANR	161323	Identifier	zval_dtor_func_for_ptr		161237	0					
ANR	161324	ArgumentList	r		161237	1					
ANR	161325	Argument	r		161237	0					
ANR	161326	Identifier	r		161237	0					
ANR	161327	ElseStatement	else		161237	0					
ANR	161328	CompoundStatement		10:10:262:262	161237	0					
ANR	161329	ExpressionStatement	GC_ZVAL_CHECK_POSSIBLE_ROOT ( cv )	2063:4:64003:64034	161237	0	True				
ANR	161330	CallExpression	GC_ZVAL_CHECK_POSSIBLE_ROOT ( cv )		161237	0					
ANR	161331	Callee	GC_ZVAL_CHECK_POSSIBLE_ROOT		161237	0					
ANR	161332	Identifier	GC_ZVAL_CHECK_POSSIBLE_ROOT		161237	0					
ANR	161333	ArgumentList	cv		161237	1					
ANR	161334	Argument	cv		161237	0					
ANR	161335	Identifier	cv		161237	0					
ANR	161336	ExpressionStatement	cv ++	2066:2:64047:64051	161237	1	True				
ANR	161337	PostIncDecOperationExpression	cv ++		161237	0					
ANR	161338	Identifier	cv		161237	0					
ANR	161339	IncDec	++		161237	1					
ANR	161340	ReturnType	static zend_always_inline void		161237	1					
ANR	161341	Identifier	i_free_compiled_variables		161237	2					
ANR	161342	ParameterList	zend_execute_data * execute_data		161237	3					
ANR	161343	Parameter	zend_execute_data * execute_data	2052:57:63691:63721	161237	0	True				
ANR	161344	ParameterType	zend_execute_data *		161237	0					
ANR	161345	Identifier	execute_data		161237	1					
ANR	161346	CFGEntryNode	ENTRY		161237		True				
ANR	161347	CFGExitNode	EXIT		161237		True				
ANR	161348	Symbol	Z_COUNTED_P		161237						
ANR	161349	Symbol	execute_data		161237						
ANR	161350	Symbol	EX ( func ) -> op_array		161237						
ANR	161351	Symbol	r		161237						
ANR	161352	Symbol	cv		161237						
ANR	161353	Symbol	EX		161237						
ANR	161354	Symbol	func		161237						
ANR	161355	Symbol	EX_VAR_NUM		161237						
ANR	161356	Symbol	Z_DELREF_P		161237						
ANR	161357	Symbol	end		161237						
ANR	161358	Symbol	* EX		161237						
ANR	161359	Symbol	EX ( func ) -> op_array . last_var		161237						
ANR	161360	Symbol	Z_REFCOUNTED_P		161237						
ANR	161361	Symbol	EXPECTED		161237						
ANR	161362	Function	zend_free_compiled_variables	2071:0:64070:64191							
ANR	161363	FunctionDef	zend_free_compiled_variables (zend_execute_data * execute_data)		161362	0					
ANR	161364	CompoundStatement		2072:0:64147:64191	161362	0					
ANR	161365	ExpressionStatement	i_free_compiled_variables ( execute_data )	2073:1:64150:64189	161362	0	True				
ANR	161366	CallExpression	i_free_compiled_variables ( execute_data )		161362	0					
ANR	161367	Callee	i_free_compiled_variables		161362	0					
ANR	161368	Identifier	i_free_compiled_variables		161362	0					
ANR	161369	ArgumentList	execute_data		161362	1					
ANR	161370	Argument	execute_data		161362	0					
ANR	161371	Identifier	execute_data		161362	0					
ANR	161372	ReturnType	void		161362	1					
ANR	161373	Identifier	zend_free_compiled_variables		161362	2					
ANR	161374	ParameterList	zend_execute_data * execute_data		161362	3					
ANR	161375	Parameter	zend_execute_data * execute_data	2071:34:64104:64134	161362	0	True				
ANR	161376	ParameterType	zend_execute_data *		161362	0					
ANR	161377	Identifier	execute_data		161362	1					
ANR	161378	CFGEntryNode	ENTRY		161362		True				
ANR	161379	CFGExitNode	EXIT		161362		True				
ANR	161380	Symbol	execute_data		161362						
ANR	161381	Function	i_init_func_execute_data	2108:0:65535:67743							
ANR	161382	FunctionDef	"i_init_func_execute_data (zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value , int check_this)"		161381	0					
ANR	161383	CompoundStatement		2109:0:65695:67743	161381	0					
ANR	161384	IdentifierDeclStatement	"uint32_t first_extra_arg , num_args ;"	2110:1:65698:65732	161381	0	True				
ANR	161385	IdentifierDecl	first_extra_arg		161381	0					
ANR	161386	IdentifierDeclType	uint32_t		161381	0					
ANR	161387	Identifier	first_extra_arg		161381	1					
ANR	161388	IdentifierDecl	num_args		161381	1					
ANR	161389	IdentifierDeclType	uint32_t		161381	0					
ANR	161390	Identifier	num_args		161381	1					
ANR	161391	ExpressionStatement	ZEND_ASSERT ( EX ( func ) == ( zend_function * ) op_array )	2111:1:65735:65784	161381	1	True				
ANR	161392	CallExpression	ZEND_ASSERT ( EX ( func ) == ( zend_function * ) op_array )		161381	0					
ANR	161393	Callee	ZEND_ASSERT		161381	0					
ANR	161394	Identifier	ZEND_ASSERT		161381	0					
ANR	161395	ArgumentList	EX ( func ) == ( zend_function * ) op_array		161381	1					
ANR	161396	Argument	EX ( func ) == ( zend_function * ) op_array		161381	0					
ANR	161397	EqualityExpression	EX ( func ) == ( zend_function * ) op_array		161381	0		==			
ANR	161398	CallExpression	EX ( func )		161381	0					
ANR	161399	Callee	EX		161381	0					
ANR	161400	Identifier	EX		161381	0					
ANR	161401	ArgumentList	func		161381	1					
ANR	161402	Argument	func		161381	0					
ANR	161403	Identifier	func		161381	0					
ANR	161404	CastExpression	( zend_function * ) op_array		161381	1					
ANR	161405	CastTarget	zend_function *		161381	0					
ANR	161406	Identifier	op_array		161381	1					
ANR	161407	ExpressionStatement	EX ( opline ) = op_array -> opcodes	2113:1:65788:65818	161381	2	True				
ANR	161408	AssignmentExpression	EX ( opline ) = op_array -> opcodes		161381	0		=			
ANR	161409	CallExpression	EX ( opline )		161381	0					
ANR	161410	Callee	EX		161381	0					
ANR	161411	Identifier	EX		161381	0					
ANR	161412	ArgumentList	opline		161381	1					
ANR	161413	Argument	opline		161381	0					
ANR	161414	Identifier	opline		161381	0					
ANR	161415	PtrMemberAccess	op_array -> opcodes		161381	1					
ANR	161416	Identifier	op_array		161381	0					
ANR	161417	Identifier	opcodes		161381	1					
ANR	161418	ExpressionStatement	EX ( call ) = NULL	2114:1:65821:65836	161381	3	True				
ANR	161419	AssignmentExpression	EX ( call ) = NULL		161381	0		=			
ANR	161420	CallExpression	EX ( call )		161381	0					
ANR	161421	Callee	EX		161381	0					
ANR	161422	Identifier	EX		161381	0					
ANR	161423	ArgumentList	call		161381	1					
ANR	161424	Argument	call		161381	0					
ANR	161425	Identifier	call		161381	0					
ANR	161426	Identifier	NULL		161381	1					
ANR	161427	ExpressionStatement	EX ( return_value ) = return_value	2115:1:65839:65870	161381	4	True				
ANR	161428	AssignmentExpression	EX ( return_value ) = return_value		161381	0		=			
ANR	161429	CallExpression	EX ( return_value )		161381	0					
ANR	161430	Callee	EX		161381	0					
ANR	161431	Identifier	EX		161381	0					
ANR	161432	ArgumentList	return_value		161381	1					
ANR	161433	Argument	return_value		161381	0					
ANR	161434	Identifier	return_value		161381	0					
ANR	161435	Identifier	return_value		161381	1					
ANR	161436	ExpressionStatement	first_extra_arg = op_array -> num_args	2118:1:65898:65934	161381	5	True				
ANR	161437	AssignmentExpression	first_extra_arg = op_array -> num_args		161381	0		=			
ANR	161438	Identifier	first_extra_arg		161381	0					
ANR	161439	PtrMemberAccess	op_array -> num_args		161381	1					
ANR	161440	Identifier	op_array		161381	0					
ANR	161441	Identifier	num_args		161381	1					
ANR	161442	ExpressionStatement	num_args = EX_NUM_ARGS ( )	2119:1:65937:65961	161381	6	True				
ANR	161443	AssignmentExpression	num_args = EX_NUM_ARGS ( )		161381	0		=			
ANR	161444	Identifier	num_args		161381	0					
ANR	161445	CallExpression	EX_NUM_ARGS ( )		161381	1					
ANR	161446	Callee	EX_NUM_ARGS		161381	0					
ANR	161447	Identifier	EX_NUM_ARGS		161381	0					
ANR	161448	ArgumentList			161381	1					
ANR	161449	IfStatement	if ( UNEXPECTED ( num_args > first_extra_arg ) )		161381	7					
ANR	161450	Condition	UNEXPECTED ( num_args > first_extra_arg )	2120:5:65968:66005	161381	0	True				
ANR	161451	CallExpression	UNEXPECTED ( num_args > first_extra_arg )		161381	0					
ANR	161452	Callee	UNEXPECTED		161381	0					
ANR	161453	Identifier	UNEXPECTED		161381	0					
ANR	161454	ArgumentList	num_args > first_extra_arg		161381	1					
ANR	161455	Argument	num_args > first_extra_arg		161381	0					
ANR	161456	RelationalExpression	num_args > first_extra_arg		161381	0		>			
ANR	161457	Identifier	num_args		161381	0					
ANR	161458	Identifier	first_extra_arg		161381	1					
ANR	161459	CompoundStatement		14:2:341:364	161381	1					
ANR	161460	IdentifierDeclStatement	"zval * end , * src , * dst ;"	2121:2:66012:66033	161381	0	True				
ANR	161461	IdentifierDecl	* end		161381	0					
ANR	161462	IdentifierDeclType	zval *		161381	0					
ANR	161463	Identifier	end		161381	1					
ANR	161464	IdentifierDecl	* src		161381	1					
ANR	161465	IdentifierDeclType	zval *		161381	0					
ANR	161466	Identifier	src		161381	1					
ANR	161467	IdentifierDecl	* dst		161381	2					
ANR	161468	IdentifierDeclType	zval *		161381	0					
ANR	161469	Identifier	dst		161381	1					
ANR	161470	IdentifierDeclStatement	uint32_t type_flags = 0 ;	2122:2:66037:66060	161381	1	True				
ANR	161471	IdentifierDecl	type_flags = 0		161381	0					
ANR	161472	IdentifierDeclType	uint32_t		161381	0					
ANR	161473	Identifier	type_flags		161381	1					
ANR	161474	AssignmentExpression	type_flags = 0		161381	2		=			
ANR	161475	Identifier	type_flags		161381	0					
ANR	161476	PrimaryExpression	0		161381	1					
ANR	161477	IfStatement	if ( EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 ) )		161381	2					
ANR	161478	Condition	EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 )	2124:6:66069:66129	161381	0	True				
ANR	161479	CallExpression	EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 )		161381	0					
ANR	161480	Callee	EXPECTED		161381	0					
ANR	161481	Identifier	EXPECTED		161381	0					
ANR	161482	ArgumentList	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		161381	1					
ANR	161483	Argument	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		161381	0					
ANR	161484	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		161381	0		==			
ANR	161485	BitAndExpression	op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS		161381	0		&			
ANR	161486	PtrMemberAccess	op_array -> fn_flags		161381	0					
ANR	161487	Identifier	op_array		161381	0					
ANR	161488	Identifier	fn_flags		161381	1					
ANR	161489	Identifier	ZEND_ACC_HAS_TYPE_HINTS		161381	1					
ANR	161490	PrimaryExpression	0		161381	1					
ANR	161491	CompoundStatement		16:69:436:436	161381	1					
ANR	161492	ExpressionStatement	EX ( opline ) += first_extra_arg	2126:3:66196:66225	161381	0	True				
ANR	161493	AssignmentExpression	EX ( opline ) += first_extra_arg		161381	0		+=			
ANR	161494	CallExpression	EX ( opline )		161381	0					
ANR	161495	Callee	EX		161381	0					
ANR	161496	Identifier	EX		161381	0					
ANR	161497	ArgumentList	opline		161381	1					
ANR	161498	Argument	opline		161381	0					
ANR	161499	Identifier	opline		161381	0					
ANR	161500	Identifier	first_extra_arg		161381	1					
ANR	161501	ExpressionStatement	end = EX_VAR_NUM ( first_extra_arg - 1 )	2130:2:66304:66341	161381	3	True				
ANR	161502	AssignmentExpression	end = EX_VAR_NUM ( first_extra_arg - 1 )		161381	0		=			
ANR	161503	Identifier	end		161381	0					
ANR	161504	CallExpression	EX_VAR_NUM ( first_extra_arg - 1 )		161381	1					
ANR	161505	Callee	EX_VAR_NUM		161381	0					
ANR	161506	Identifier	EX_VAR_NUM		161381	0					
ANR	161507	ArgumentList	first_extra_arg - 1		161381	1					
ANR	161508	Argument	first_extra_arg - 1		161381	0					
ANR	161509	AdditiveExpression	first_extra_arg - 1		161381	0		-			
ANR	161510	Identifier	first_extra_arg		161381	0					
ANR	161511	PrimaryExpression	1		161381	1					
ANR	161512	ExpressionStatement	src = end + ( num_args - first_extra_arg )	2131:2:66345:66385	161381	4	True				
ANR	161513	AssignmentExpression	src = end + ( num_args - first_extra_arg )		161381	0		=			
ANR	161514	Identifier	src		161381	0					
ANR	161515	AdditiveExpression	end + ( num_args - first_extra_arg )		161381	1		+			
ANR	161516	Identifier	end		161381	0					
ANR	161517	AdditiveExpression	num_args - first_extra_arg		161381	1		-			
ANR	161518	Identifier	num_args		161381	0					
ANR	161519	Identifier	first_extra_arg		161381	1					
ANR	161520	ExpressionStatement	dst = src + ( op_array -> last_var + op_array -> T - first_extra_arg )	2132:2:66389:66453	161381	5	True				
ANR	161521	AssignmentExpression	dst = src + ( op_array -> last_var + op_array -> T - first_extra_arg )		161381	0		=			
ANR	161522	Identifier	dst		161381	0					
ANR	161523	AdditiveExpression	src + ( op_array -> last_var + op_array -> T - first_extra_arg )		161381	1		+			
ANR	161524	Identifier	src		161381	0					
ANR	161525	AdditiveExpression	op_array -> last_var + op_array -> T - first_extra_arg		161381	1		+			
ANR	161526	PtrMemberAccess	op_array -> last_var		161381	0					
ANR	161527	Identifier	op_array		161381	0					
ANR	161528	Identifier	last_var		161381	1					
ANR	161529	AdditiveExpression	op_array -> T - first_extra_arg		161381	1		-			
ANR	161530	PtrMemberAccess	op_array -> T		161381	0					
ANR	161531	Identifier	op_array		161381	0					
ANR	161532	Identifier	T		161381	1					
ANR	161533	Identifier	first_extra_arg		161381	1					
ANR	161534	IfStatement	if ( EXPECTED ( src != dst ) )		161381	6					
ANR	161535	Condition	EXPECTED ( src != dst )	2133:6:66461:66480	161381	0	True				
ANR	161536	CallExpression	EXPECTED ( src != dst )		161381	0					
ANR	161537	Callee	EXPECTED		161381	0					
ANR	161538	Identifier	EXPECTED		161381	0					
ANR	161539	ArgumentList	src != dst		161381	1					
ANR	161540	Argument	src != dst		161381	0					
ANR	161541	EqualityExpression	src != dst		161381	0		!=			
ANR	161542	Identifier	src		161381	0					
ANR	161543	Identifier	dst		161381	1					
ANR	161544	CompoundStatement		25:28:787:787	161381	1					
ANR	161545	DoStatement	do		161381	0					
ANR	161546	CompoundStatement		26:6:795:795	161381	0					
ANR	161547	ExpressionStatement	type_flags |= Z_TYPE_INFO_P ( src )	2135:4:66497:66529	161381	0	True				
ANR	161548	AssignmentExpression	type_flags |= Z_TYPE_INFO_P ( src )		161381	0		|=			
ANR	161549	Identifier	type_flags		161381	0					
ANR	161550	CallExpression	Z_TYPE_INFO_P ( src )		161381	1					
ANR	161551	Callee	Z_TYPE_INFO_P		161381	0					
ANR	161552	Identifier	Z_TYPE_INFO_P		161381	0					
ANR	161553	ArgumentList	src		161381	1					
ANR	161554	Argument	src		161381	0					
ANR	161555	Identifier	src		161381	0					
ANR	161556	ExpressionStatement	"ZVAL_COPY_VALUE ( dst , src )"	2136:4:66535:66560	161381	1	True				
ANR	161557	CallExpression	"ZVAL_COPY_VALUE ( dst , src )"		161381	0					
ANR	161558	Callee	ZVAL_COPY_VALUE		161381	0					
ANR	161559	Identifier	ZVAL_COPY_VALUE		161381	0					
ANR	161560	ArgumentList	dst		161381	1					
ANR	161561	Argument	dst		161381	0					
ANR	161562	Identifier	dst		161381	0					
ANR	161563	Argument	src		161381	1					
ANR	161564	Identifier	src		161381	0					
ANR	161565	ExpressionStatement	ZVAL_UNDEF ( src )	2137:4:66566:66581	161381	2	True				
ANR	161566	CallExpression	ZVAL_UNDEF ( src )		161381	0					
ANR	161567	Callee	ZVAL_UNDEF		161381	0					
ANR	161568	Identifier	ZVAL_UNDEF		161381	0					
ANR	161569	ArgumentList	src		161381	1					
ANR	161570	Argument	src		161381	0					
ANR	161571	Identifier	src		161381	0					
ANR	161572	ExpressionStatement	src --	2138:4:66587:66592	161381	3	True				
ANR	161573	PostIncDecOperationExpression	src --		161381	0					
ANR	161574	Identifier	src		161381	0					
ANR	161575	IncDec	--		161381	1					
ANR	161576	ExpressionStatement	dst --	2139:4:66598:66603	161381	4	True				
ANR	161577	PostIncDecOperationExpression	dst --		161381	0					
ANR	161578	Identifier	dst		161381	0					
ANR	161579	IncDec	--		161381	1					
ANR	161580	Condition	src != end	2140:12:66617:66626	161381	1	True				
ANR	161581	EqualityExpression	src != end		161381	0		!=			
ANR	161582	Identifier	src		161381	0					
ANR	161583	Identifier	end		161381	1					
ANR	161584	ElseStatement	else		161381	0					
ANR	161585	CompoundStatement		33:9:943:943	161381	0					
ANR	161586	DoStatement	do		161381	0					
ANR	161587	CompoundStatement		34:6:951:951	161381	0					
ANR	161588	ExpressionStatement	type_flags |= Z_TYPE_INFO_P ( src )	2143:4:66653:66685	161381	0	True				
ANR	161589	AssignmentExpression	type_flags |= Z_TYPE_INFO_P ( src )		161381	0		|=			
ANR	161590	Identifier	type_flags		161381	0					
ANR	161591	CallExpression	Z_TYPE_INFO_P ( src )		161381	1					
ANR	161592	Callee	Z_TYPE_INFO_P		161381	0					
ANR	161593	Identifier	Z_TYPE_INFO_P		161381	0					
ANR	161594	ArgumentList	src		161381	1					
ANR	161595	Argument	src		161381	0					
ANR	161596	Identifier	src		161381	0					
ANR	161597	ExpressionStatement	src --	2144:4:66691:66696	161381	1	True				
ANR	161598	PostIncDecOperationExpression	src --		161381	0					
ANR	161599	Identifier	src		161381	0					
ANR	161600	IncDec	--		161381	1					
ANR	161601	Condition	src != end	2145:12:66710:66719	161381	1	True				
ANR	161602	EqualityExpression	src != end		161381	0		!=			
ANR	161603	Identifier	src		161381	0					
ANR	161604	Identifier	end		161381	1					
ANR	161605	ExpressionStatement	"ZEND_ADD_CALL_FLAG ( execute_data , ( ( type_flags >> Z_TYPE_FLAGS_SHIFT ) & IS_TYPE_REFCOUNTED ) )"	2147:2:66729:66820	161381	7	True				
ANR	161606	CallExpression	"ZEND_ADD_CALL_FLAG ( execute_data , ( ( type_flags >> Z_TYPE_FLAGS_SHIFT ) & IS_TYPE_REFCOUNTED ) )"		161381	0					
ANR	161607	Callee	ZEND_ADD_CALL_FLAG		161381	0					
ANR	161608	Identifier	ZEND_ADD_CALL_FLAG		161381	0					
ANR	161609	ArgumentList	execute_data		161381	1					
ANR	161610	Argument	execute_data		161381	0					
ANR	161611	Identifier	execute_data		161381	0					
ANR	161612	Argument	( type_flags >> Z_TYPE_FLAGS_SHIFT ) & IS_TYPE_REFCOUNTED		161381	1					
ANR	161613	BitAndExpression	( type_flags >> Z_TYPE_FLAGS_SHIFT ) & IS_TYPE_REFCOUNTED		161381	0		&			
ANR	161614	ShiftExpression	type_flags >> Z_TYPE_FLAGS_SHIFT		161381	0		>>			
ANR	161615	Identifier	type_flags		161381	0					
ANR	161616	Identifier	Z_TYPE_FLAGS_SHIFT		161381	1					
ANR	161617	Identifier	IS_TYPE_REFCOUNTED		161381	1					
ANR	161618	ElseStatement	else		161381	0					
ANR	161619	IfStatement	if ( EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 ) )		161381	0					
ANR	161620	Condition	EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 )	2148:12:66834:66894	161381	0	True				
ANR	161621	CallExpression	EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 )		161381	0					
ANR	161622	Callee	EXPECTED		161381	0					
ANR	161623	Identifier	EXPECTED		161381	0					
ANR	161624	ArgumentList	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		161381	1					
ANR	161625	Argument	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		161381	0					
ANR	161626	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		161381	0		==			
ANR	161627	BitAndExpression	op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS		161381	0		&			
ANR	161628	PtrMemberAccess	op_array -> fn_flags		161381	0					
ANR	161629	Identifier	op_array		161381	0					
ANR	161630	Identifier	fn_flags		161381	1					
ANR	161631	Identifier	ZEND_ACC_HAS_TYPE_HINTS		161381	1					
ANR	161632	PrimaryExpression	0		161381	1					
ANR	161633	CompoundStatement		40:75:1201:1201	161381	1					
ANR	161634	ExpressionStatement	EX ( opline ) += num_args	2150:2:66959:66981	161381	0	True				
ANR	161635	AssignmentExpression	EX ( opline ) += num_args		161381	0		+=			
ANR	161636	CallExpression	EX ( opline )		161381	0					
ANR	161637	Callee	EX		161381	0					
ANR	161638	Identifier	EX		161381	0					
ANR	161639	ArgumentList	opline		161381	1					
ANR	161640	Argument	opline		161381	0					
ANR	161641	Identifier	opline		161381	0					
ANR	161642	Identifier	num_args		161381	1					
ANR	161643	IfStatement	if ( EXPECTED ( ( int ) num_args < op_array -> last_var ) )		161381	8					
ANR	161644	Condition	EXPECTED ( ( int ) num_args < op_array -> last_var )	2154:5:67040:67083	161381	0	True				
ANR	161645	CallExpression	EXPECTED ( ( int ) num_args < op_array -> last_var )		161381	0					
ANR	161646	Callee	EXPECTED		161381	0					
ANR	161647	Identifier	EXPECTED		161381	0					
ANR	161648	ArgumentList	( int ) num_args < op_array -> last_var		161381	1					
ANR	161649	Argument	( int ) num_args < op_array -> last_var		161381	0					
ANR	161650	RelationalExpression	( int ) num_args < op_array -> last_var		161381	0		<			
ANR	161651	CastExpression	( int ) num_args		161381	0					
ANR	161652	CastTarget	int		161381	0					
ANR	161653	Identifier	num_args		161381	1					
ANR	161654	PtrMemberAccess	op_array -> last_var		161381	1					
ANR	161655	Identifier	op_array		161381	0					
ANR	161656	Identifier	last_var		161381	1					
ANR	161657	CompoundStatement		48:2:1430:1472	161381	1					
ANR	161658	IdentifierDeclStatement	zval * var = EX_VAR_NUM ( num_args ) ;	2155:2:67090:67122	161381	0	True				
ANR	161659	IdentifierDecl	* var = EX_VAR_NUM ( num_args )		161381	0					
ANR	161660	IdentifierDeclType	zval *		161381	0					
ANR	161661	Identifier	var		161381	1					
ANR	161662	AssignmentExpression	* var = EX_VAR_NUM ( num_args )		161381	2		=			
ANR	161663	Identifier	var		161381	0					
ANR	161664	CallExpression	EX_VAR_NUM ( num_args )		161381	1					
ANR	161665	Callee	EX_VAR_NUM		161381	0					
ANR	161666	Identifier	EX_VAR_NUM		161381	0					
ANR	161667	ArgumentList	num_args		161381	1					
ANR	161668	Argument	num_args		161381	0					
ANR	161669	Identifier	num_args		161381	0					
ANR	161670	IdentifierDeclStatement	zval * end = EX_VAR_NUM ( op_array -> last_var ) ;	2156:2:67126:67168	161381	1	True				
ANR	161671	IdentifierDecl	* end = EX_VAR_NUM ( op_array -> last_var )		161381	0					
ANR	161672	IdentifierDeclType	zval *		161381	0					
ANR	161673	Identifier	end		161381	1					
ANR	161674	AssignmentExpression	* end = EX_VAR_NUM ( op_array -> last_var )		161381	2		=			
ANR	161675	Identifier	end		161381	0					
ANR	161676	CallExpression	EX_VAR_NUM ( op_array -> last_var )		161381	1					
ANR	161677	Callee	EX_VAR_NUM		161381	0					
ANR	161678	Identifier	EX_VAR_NUM		161381	0					
ANR	161679	ArgumentList	op_array -> last_var		161381	1					
ANR	161680	Argument	op_array -> last_var		161381	0					
ANR	161681	PtrMemberAccess	op_array -> last_var		161381	0					
ANR	161682	Identifier	op_array		161381	0					
ANR	161683	Identifier	last_var		161381	1					
ANR	161684	DoStatement	do		161381	2					
ANR	161685	CompoundStatement		50:5:1480:1480	161381	0					
ANR	161686	ExpressionStatement	ZVAL_UNDEF ( var )	2159:3:67181:67196	161381	0	True				
ANR	161687	CallExpression	ZVAL_UNDEF ( var )		161381	0					
ANR	161688	Callee	ZVAL_UNDEF		161381	0					
ANR	161689	Identifier	ZVAL_UNDEF		161381	0					
ANR	161690	ArgumentList	var		161381	1					
ANR	161691	Argument	var		161381	0					
ANR	161692	Identifier	var		161381	0					
ANR	161693	ExpressionStatement	var ++	2160:3:67201:67206	161381	1	True				
ANR	161694	PostIncDecOperationExpression	var ++		161381	0					
ANR	161695	Identifier	var		161381	0					
ANR	161696	IncDec	++		161381	1					
ANR	161697	Condition	var != end	2161:11:67219:67228	161381	1	True				
ANR	161698	EqualityExpression	var != end		161381	0		!=			
ANR	161699	Identifier	var		161381	0					
ANR	161700	Identifier	end		161381	1					
ANR	161701	IfStatement	if ( check_this && op_array -> this_var != ( uint32_t ) - 1 && EXPECTED ( Z_OBJ ( EX ( This ) ) ) )		161381	9					
ANR	161702	Condition	check_this && op_array -> this_var != ( uint32_t ) - 1 && EXPECTED ( Z_OBJ ( EX ( This ) ) )	2164:5:67241:67317	161381	0	True				
ANR	161703	AndExpression	check_this && op_array -> this_var != ( uint32_t ) - 1 && EXPECTED ( Z_OBJ ( EX ( This ) ) )		161381	0		&&			
ANR	161704	Identifier	check_this		161381	0					
ANR	161705	AndExpression	op_array -> this_var != ( uint32_t ) - 1 && EXPECTED ( Z_OBJ ( EX ( This ) ) )		161381	1		&&			
ANR	161706	EqualityExpression	op_array -> this_var != ( uint32_t ) - 1		161381	0		!=			
ANR	161707	PtrMemberAccess	op_array -> this_var		161381	0					
ANR	161708	Identifier	op_array		161381	0					
ANR	161709	Identifier	this_var		161381	1					
ANR	161710	CastExpression	( uint32_t ) - 1		161381	1					
ANR	161711	CastTarget	uint32_t		161381	0					
ANR	161712	UnaryOperationExpression	- 1		161381	1					
ANR	161713	UnaryOperator	-		161381	0					
ANR	161714	PrimaryExpression	1		161381	1					
ANR	161715	CallExpression	EXPECTED ( Z_OBJ ( EX ( This ) ) )		161381	1					
ANR	161716	Callee	EXPECTED		161381	0					
ANR	161717	Identifier	EXPECTED		161381	0					
ANR	161718	ArgumentList	Z_OBJ ( EX ( This ) )		161381	1					
ANR	161719	Argument	Z_OBJ ( EX ( This ) )		161381	0					
ANR	161720	CallExpression	Z_OBJ ( EX ( This ) )		161381	0					
ANR	161721	Callee	Z_OBJ		161381	0					
ANR	161722	Identifier	Z_OBJ		161381	0					
ANR	161723	ArgumentList	EX ( This )		161381	1					
ANR	161724	Argument	EX ( This )		161381	0					
ANR	161725	CallExpression	EX ( This )		161381	0					
ANR	161726	Callee	EX		161381	0					
ANR	161727	Identifier	EX		161381	0					
ANR	161728	ArgumentList	This		161381	1					
ANR	161729	Argument	This		161381	0					
ANR	161730	Identifier	This		161381	0					
ANR	161731	CompoundStatement		56:84:1624:1624	161381	1					
ANR	161732	ExpressionStatement	"ZVAL_OBJ ( EX_VAR ( op_array -> this_var ) , Z_OBJ ( EX ( This ) ) )"	2165:2:67324:67377	161381	0	True				
ANR	161733	CallExpression	"ZVAL_OBJ ( EX_VAR ( op_array -> this_var ) , Z_OBJ ( EX ( This ) ) )"		161381	0					
ANR	161734	Callee	ZVAL_OBJ		161381	0					
ANR	161735	Identifier	ZVAL_OBJ		161381	0					
ANR	161736	ArgumentList	EX_VAR ( op_array -> this_var )		161381	1					
ANR	161737	Argument	EX_VAR ( op_array -> this_var )		161381	0					
ANR	161738	CallExpression	EX_VAR ( op_array -> this_var )		161381	0					
ANR	161739	Callee	EX_VAR		161381	0					
ANR	161740	Identifier	EX_VAR		161381	0					
ANR	161741	ArgumentList	op_array -> this_var		161381	1					
ANR	161742	Argument	op_array -> this_var		161381	0					
ANR	161743	PtrMemberAccess	op_array -> this_var		161381	0					
ANR	161744	Identifier	op_array		161381	0					
ANR	161745	Identifier	this_var		161381	1					
ANR	161746	Argument	Z_OBJ ( EX ( This ) )		161381	1					
ANR	161747	CallExpression	Z_OBJ ( EX ( This ) )		161381	0					
ANR	161748	Callee	Z_OBJ		161381	0					
ANR	161749	Identifier	Z_OBJ		161381	0					
ANR	161750	ArgumentList	EX ( This )		161381	1					
ANR	161751	Argument	EX ( This )		161381	0					
ANR	161752	CallExpression	EX ( This )		161381	0					
ANR	161753	Callee	EX		161381	0					
ANR	161754	Identifier	EX		161381	0					
ANR	161755	ArgumentList	This		161381	1					
ANR	161756	Argument	This		161381	0					
ANR	161757	Identifier	This		161381	0					
ANR	161758	ExpressionStatement	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) ++	2166:2:67381:67411	161381	1	True				
ANR	161759	PostIncDecOperationExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) ++		161381	0					
ANR	161760	CallExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) )		161381	0					
ANR	161761	Callee	GC_REFCOUNT		161381	0					
ANR	161762	Identifier	GC_REFCOUNT		161381	0					
ANR	161763	ArgumentList	Z_OBJ ( EX ( This ) )		161381	1					
ANR	161764	Argument	Z_OBJ ( EX ( This ) )		161381	0					
ANR	161765	CallExpression	Z_OBJ ( EX ( This ) )		161381	0					
ANR	161766	Callee	Z_OBJ		161381	0					
ANR	161767	Identifier	Z_OBJ		161381	0					
ANR	161768	ArgumentList	EX ( This )		161381	1					
ANR	161769	Argument	EX ( This )		161381	0					
ANR	161770	CallExpression	EX ( This )		161381	0					
ANR	161771	Callee	EX		161381	0					
ANR	161772	Identifier	EX		161381	0					
ANR	161773	ArgumentList	This		161381	1					
ANR	161774	Argument	This		161381	0					
ANR	161775	Identifier	This		161381	0					
ANR	161776	IncDec	++		161381	1					
ANR	161777	IfStatement	if ( UNEXPECTED ( ! op_array -> run_time_cache ) )		161381	10					
ANR	161778	Condition	UNEXPECTED ( ! op_array -> run_time_cache )	2169:5:67422:67458	161381	0	True				
ANR	161779	CallExpression	UNEXPECTED ( ! op_array -> run_time_cache )		161381	0					
ANR	161780	Callee	UNEXPECTED		161381	0					
ANR	161781	Identifier	UNEXPECTED		161381	0					
ANR	161782	ArgumentList	! op_array -> run_time_cache		161381	1					
ANR	161783	Argument	! op_array -> run_time_cache		161381	0					
ANR	161784	UnaryOperationExpression	! op_array -> run_time_cache		161381	0					
ANR	161785	UnaryOperator	!		161381	0					
ANR	161786	PtrMemberAccess	op_array -> run_time_cache		161381	1					
ANR	161787	Identifier	op_array		161381	0					
ANR	161788	Identifier	run_time_cache		161381	1					
ANR	161789	CompoundStatement		61:44:1765:1765	161381	1					
ANR	161790	ExpressionStatement	"op_array -> run_time_cache = zend_arena_alloc ( & CG ( arena ) , op_array -> cache_size )"	2170:2:67465:67542	161381	0	True				
ANR	161791	AssignmentExpression	"op_array -> run_time_cache = zend_arena_alloc ( & CG ( arena ) , op_array -> cache_size )"		161381	0		=			
ANR	161792	PtrMemberAccess	op_array -> run_time_cache		161381	0					
ANR	161793	Identifier	op_array		161381	0					
ANR	161794	Identifier	run_time_cache		161381	1					
ANR	161795	CallExpression	"zend_arena_alloc ( & CG ( arena ) , op_array -> cache_size )"		161381	1					
ANR	161796	Callee	zend_arena_alloc		161381	0					
ANR	161797	Identifier	zend_arena_alloc		161381	0					
ANR	161798	ArgumentList	& CG ( arena )		161381	1					
ANR	161799	Argument	& CG ( arena )		161381	0					
ANR	161800	UnaryOperationExpression	& CG ( arena )		161381	0					
ANR	161801	UnaryOperator	&		161381	0					
ANR	161802	CallExpression	CG ( arena )		161381	1					
ANR	161803	Callee	CG		161381	0					
ANR	161804	Identifier	CG		161381	0					
ANR	161805	ArgumentList	arena		161381	1					
ANR	161806	Argument	arena		161381	0					
ANR	161807	Identifier	arena		161381	0					
ANR	161808	Argument	op_array -> cache_size		161381	1					
ANR	161809	PtrMemberAccess	op_array -> cache_size		161381	0					
ANR	161810	Identifier	op_array		161381	0					
ANR	161811	Identifier	cache_size		161381	1					
ANR	161812	ExpressionStatement	"memset ( op_array -> run_time_cache , 0 , op_array -> cache_size )"	2171:2:67546:67603	161381	1	True				
ANR	161813	CallExpression	"memset ( op_array -> run_time_cache , 0 , op_array -> cache_size )"		161381	0					
ANR	161814	Callee	memset		161381	0					
ANR	161815	Identifier	memset		161381	0					
ANR	161816	ArgumentList	op_array -> run_time_cache		161381	1					
ANR	161817	Argument	op_array -> run_time_cache		161381	0					
ANR	161818	PtrMemberAccess	op_array -> run_time_cache		161381	0					
ANR	161819	Identifier	op_array		161381	0					
ANR	161820	Identifier	run_time_cache		161381	1					
ANR	161821	Argument	0		161381	1					
ANR	161822	PrimaryExpression	0		161381	0					
ANR	161823	Argument	op_array -> cache_size		161381	2					
ANR	161824	PtrMemberAccess	op_array -> cache_size		161381	0					
ANR	161825	Identifier	op_array		161381	0					
ANR	161826	Identifier	cache_size		161381	1					
ANR	161827	ExpressionStatement	EX_LOAD_RUN_TIME_CACHE ( op_array )	2173:1:67609:67641	161381	11	True				
ANR	161828	CallExpression	EX_LOAD_RUN_TIME_CACHE ( op_array )		161381	0					
ANR	161829	Callee	EX_LOAD_RUN_TIME_CACHE		161381	0					
ANR	161830	Identifier	EX_LOAD_RUN_TIME_CACHE		161381	0					
ANR	161831	ArgumentList	op_array		161381	1					
ANR	161832	Argument	op_array		161381	0					
ANR	161833	Identifier	op_array		161381	0					
ANR	161834	ExpressionStatement	EX_LOAD_LITERALS ( op_array )	2174:1:67644:67670	161381	12	True				
ANR	161835	CallExpression	EX_LOAD_LITERALS ( op_array )		161381	0					
ANR	161836	Callee	EX_LOAD_LITERALS		161381	0					
ANR	161837	Identifier	EX_LOAD_LITERALS		161381	0					
ANR	161838	ArgumentList	op_array		161381	1					
ANR	161839	Argument	op_array		161381	0					
ANR	161840	Identifier	op_array		161381	0					
ANR	161841	ExpressionStatement	EG ( current_execute_data ) = execute_data	2176:1:67674:67713	161381	13	True				
ANR	161842	AssignmentExpression	EG ( current_execute_data ) = execute_data		161381	0		=			
ANR	161843	CallExpression	EG ( current_execute_data )		161381	0					
ANR	161844	Callee	EG		161381	0					
ANR	161845	Identifier	EG		161381	0					
ANR	161846	ArgumentList	current_execute_data		161381	1					
ANR	161847	Argument	current_execute_data		161381	0					
ANR	161848	Identifier	current_execute_data		161381	0					
ANR	161849	Identifier	execute_data		161381	1					
ANR	161850	ExpressionStatement	ZEND_VM_INTERRUPT_CHECK ( )	2177:1:67716:67741	161381	14	True				
ANR	161851	CallExpression	ZEND_VM_INTERRUPT_CHECK ( )		161381	0					
ANR	161852	Callee	ZEND_VM_INTERRUPT_CHECK		161381	0					
ANR	161853	Identifier	ZEND_VM_INTERRUPT_CHECK		161381	0					
ANR	161854	ArgumentList			161381	1					
ANR	161855	ReturnType	static zend_always_inline void		161381	1					
ANR	161856	Identifier	i_init_func_execute_data		161381	2					
ANR	161857	ParameterList	"zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value , int check_this"		161381	3					
ANR	161858	Parameter	zend_execute_data * execute_data	2108:56:65591:65621	161381	0	True				
ANR	161859	ParameterType	zend_execute_data *		161381	0					
ANR	161860	Identifier	execute_data		161381	1					
ANR	161861	Parameter	zend_op_array * op_array	2108:89:65624:65646	161381	1	True				
ANR	161862	ParameterType	zend_op_array *		161381	0					
ANR	161863	Identifier	op_array		161381	1					
ANR	161864	Parameter	zval * return_value	2108:114:65649:65666	161381	2	True				
ANR	161865	ParameterType	zval *		161381	0					
ANR	161866	Identifier	return_value		161381	1					
ANR	161867	Parameter	int check_this	2108:134:65669:65682	161381	3	True				
ANR	161868	ParameterType	int		161381	0					
ANR	161869	Identifier	check_this		161381	1					
ANR	161870	CFGEntryNode	ENTRY		161381		True				
ANR	161871	CFGExitNode	EXIT		161381		True				
ANR	161872	Symbol	return_value		161381						
ANR	161873	Symbol	dst		161381						
ANR	161874	Symbol	current_execute_data		161381						
ANR	161875	Symbol	op_array -> last_var		161381						
ANR	161876	Symbol	arena		161381						
ANR	161877	Symbol	IS_TYPE_REFCOUNTED		161381						
ANR	161878	Symbol	execute_data		161381						
ANR	161879	Symbol	first_extra_arg		161381						
ANR	161880	Symbol	ZEND_ACC_HAS_TYPE_HINTS		161381						
ANR	161881	Symbol	& CG		161381						
ANR	161882	Symbol	UNEXPECTED		161381						
ANR	161883	Symbol	op_array -> run_time_cache		161381						
ANR	161884	Symbol	Z_OBJ		161381						
ANR	161885	Symbol	opline		161381						
ANR	161886	Symbol	op_array -> opcodes		161381						
ANR	161887	Symbol	op_array -> fn_flags		161381						
ANR	161888	Symbol	num_args		161381						
ANR	161889	Symbol	This		161381						
ANR	161890	Symbol	op_array -> num_args		161381						
ANR	161891	Symbol	end		161381						
ANR	161892	Symbol	GC_REFCOUNT		161381						
ANR	161893	Symbol	op_array -> T		161381						
ANR	161894	Symbol	EG		161381						
ANR	161895	Symbol	NULL		161381						
ANR	161896	Symbol	zend_arena_alloc		161381						
ANR	161897	Symbol	src		161381						
ANR	161898	Symbol	var		161381						
ANR	161899	Symbol	op_array -> this_var		161381						
ANR	161900	Symbol	type_flags		161381						
ANR	161901	Symbol	Z_TYPE_FLAGS_SHIFT		161381						
ANR	161902	Symbol	check_this		161381						
ANR	161903	Symbol	* op_array		161381						
ANR	161904	Symbol	Z_TYPE_INFO_P		161381						
ANR	161905	Symbol	call		161381						
ANR	161906	Symbol	EX		161381						
ANR	161907	Symbol	func		161381						
ANR	161908	Symbol	EX_NUM_ARGS		161381						
ANR	161909	Symbol	EX_VAR_NUM		161381						
ANR	161910	Symbol	EX_VAR		161381						
ANR	161911	Symbol	op_array -> cache_size		161381						
ANR	161912	Symbol	EXPECTED		161381						
ANR	161913	Symbol	op_array		161381						
ANR	161914	Function	i_init_code_execute_data	2181:0:67756:68620							
ANR	161915	FunctionDef	"i_init_code_execute_data (zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value)"		161914	0					
ANR	161916	CompoundStatement		2182:0:67900:68620	161914	0					
ANR	161917	ExpressionStatement	ZEND_ASSERT ( EX ( func ) == ( zend_function * ) op_array )	2183:1:67903:67952	161914	0	True				
ANR	161918	CallExpression	ZEND_ASSERT ( EX ( func ) == ( zend_function * ) op_array )		161914	0					
ANR	161919	Callee	ZEND_ASSERT		161914	0					
ANR	161920	Identifier	ZEND_ASSERT		161914	0					
ANR	161921	ArgumentList	EX ( func ) == ( zend_function * ) op_array		161914	1					
ANR	161922	Argument	EX ( func ) == ( zend_function * ) op_array		161914	0					
ANR	161923	EqualityExpression	EX ( func ) == ( zend_function * ) op_array		161914	0		==			
ANR	161924	CallExpression	EX ( func )		161914	0					
ANR	161925	Callee	EX		161914	0					
ANR	161926	Identifier	EX		161914	0					
ANR	161927	ArgumentList	func		161914	1					
ANR	161928	Argument	func		161914	0					
ANR	161929	Identifier	func		161914	0					
ANR	161930	CastExpression	( zend_function * ) op_array		161914	1					
ANR	161931	CastTarget	zend_function *		161914	0					
ANR	161932	Identifier	op_array		161914	1					
ANR	161933	ExpressionStatement	EX ( opline ) = op_array -> opcodes	2185:1:67956:67986	161914	1	True				
ANR	161934	AssignmentExpression	EX ( opline ) = op_array -> opcodes		161914	0		=			
ANR	161935	CallExpression	EX ( opline )		161914	0					
ANR	161936	Callee	EX		161914	0					
ANR	161937	Identifier	EX		161914	0					
ANR	161938	ArgumentList	opline		161914	1					
ANR	161939	Argument	opline		161914	0					
ANR	161940	Identifier	opline		161914	0					
ANR	161941	PtrMemberAccess	op_array -> opcodes		161914	1					
ANR	161942	Identifier	op_array		161914	0					
ANR	161943	Identifier	opcodes		161914	1					
ANR	161944	ExpressionStatement	EX ( call ) = NULL	2186:1:67989:68004	161914	2	True				
ANR	161945	AssignmentExpression	EX ( call ) = NULL		161914	0		=			
ANR	161946	CallExpression	EX ( call )		161914	0					
ANR	161947	Callee	EX		161914	0					
ANR	161948	Identifier	EX		161914	0					
ANR	161949	ArgumentList	call		161914	1					
ANR	161950	Argument	call		161914	0					
ANR	161951	Identifier	call		161914	0					
ANR	161952	Identifier	NULL		161914	1					
ANR	161953	ExpressionStatement	EX ( return_value ) = return_value	2187:1:68007:68038	161914	3	True				
ANR	161954	AssignmentExpression	EX ( return_value ) = return_value		161914	0		=			
ANR	161955	CallExpression	EX ( return_value )		161914	0					
ANR	161956	Callee	EX		161914	0					
ANR	161957	Identifier	EX		161914	0					
ANR	161958	ArgumentList	return_value		161914	1					
ANR	161959	Argument	return_value		161914	0					
ANR	161960	Identifier	return_value		161914	0					
ANR	161961	Identifier	return_value		161914	1					
ANR	161962	IfStatement	if ( UNEXPECTED ( op_array -> this_var != ( uint32_t ) - 1 ) && EXPECTED ( Z_OBJ ( EX ( This ) ) ) )		161914	4					
ANR	161963	Condition	UNEXPECTED ( op_array -> this_var != ( uint32_t ) - 1 ) && EXPECTED ( Z_OBJ ( EX ( This ) ) )	2189:5:68046:68120	161914	0	True				
ANR	161964	AndExpression	UNEXPECTED ( op_array -> this_var != ( uint32_t ) - 1 ) && EXPECTED ( Z_OBJ ( EX ( This ) ) )		161914	0		&&			
ANR	161965	CallExpression	UNEXPECTED ( op_array -> this_var != ( uint32_t ) - 1 )		161914	0					
ANR	161966	Callee	UNEXPECTED		161914	0					
ANR	161967	Identifier	UNEXPECTED		161914	0					
ANR	161968	ArgumentList	op_array -> this_var != ( uint32_t ) - 1		161914	1					
ANR	161969	Argument	op_array -> this_var != ( uint32_t ) - 1		161914	0					
ANR	161970	EqualityExpression	op_array -> this_var != ( uint32_t ) - 1		161914	0		!=			
ANR	161971	PtrMemberAccess	op_array -> this_var		161914	0					
ANR	161972	Identifier	op_array		161914	0					
ANR	161973	Identifier	this_var		161914	1					
ANR	161974	CastExpression	( uint32_t ) - 1		161914	1					
ANR	161975	CastTarget	uint32_t		161914	0					
ANR	161976	UnaryOperationExpression	- 1		161914	1					
ANR	161977	UnaryOperator	-		161914	0					
ANR	161978	PrimaryExpression	1		161914	1					
ANR	161979	CallExpression	EXPECTED ( Z_OBJ ( EX ( This ) ) )		161914	1					
ANR	161980	Callee	EXPECTED		161914	0					
ANR	161981	Identifier	EXPECTED		161914	0					
ANR	161982	ArgumentList	Z_OBJ ( EX ( This ) )		161914	1					
ANR	161983	Argument	Z_OBJ ( EX ( This ) )		161914	0					
ANR	161984	CallExpression	Z_OBJ ( EX ( This ) )		161914	0					
ANR	161985	Callee	Z_OBJ		161914	0					
ANR	161986	Identifier	Z_OBJ		161914	0					
ANR	161987	ArgumentList	EX ( This )		161914	1					
ANR	161988	Argument	EX ( This )		161914	0					
ANR	161989	CallExpression	EX ( This )		161914	0					
ANR	161990	Callee	EX		161914	0					
ANR	161991	Identifier	EX		161914	0					
ANR	161992	ArgumentList	This		161914	1					
ANR	161993	Argument	This		161914	0					
ANR	161994	Identifier	This		161914	0					
ANR	161995	CompoundStatement		8:82:222:222	161914	1					
ANR	161996	ExpressionStatement	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) ++	2190:2:68127:68157	161914	0	True				
ANR	161997	PostIncDecOperationExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) ++		161914	0					
ANR	161998	CallExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) )		161914	0					
ANR	161999	Callee	GC_REFCOUNT		161914	0					
ANR	162000	Identifier	GC_REFCOUNT		161914	0					
ANR	162001	ArgumentList	Z_OBJ ( EX ( This ) )		161914	1					
ANR	162002	Argument	Z_OBJ ( EX ( This ) )		161914	0					
ANR	162003	CallExpression	Z_OBJ ( EX ( This ) )		161914	0					
ANR	162004	Callee	Z_OBJ		161914	0					
ANR	162005	Identifier	Z_OBJ		161914	0					
ANR	162006	ArgumentList	EX ( This )		161914	1					
ANR	162007	Argument	EX ( This )		161914	0					
ANR	162008	CallExpression	EX ( This )		161914	0					
ANR	162009	Callee	EX		161914	0					
ANR	162010	Identifier	EX		161914	0					
ANR	162011	ArgumentList	This		161914	1					
ANR	162012	Argument	This		161914	0					
ANR	162013	Identifier	This		161914	0					
ANR	162014	IncDec	++		161914	1					
ANR	162015	IfStatement	"if ( ! zend_hash_str_add ( EX ( symbol_table ) , ""this"" , sizeof ( ""this"" ) - 1 , & EX ( This ) ) )"		161914	1					
ANR	162016	Condition	"! zend_hash_str_add ( EX ( symbol_table ) , ""this"" , sizeof ( ""this"" ) - 1 , & EX ( This ) )"	2191:6:68165:68237	161914	0	True				
ANR	162017	UnaryOperationExpression	"! zend_hash_str_add ( EX ( symbol_table ) , ""this"" , sizeof ( ""this"" ) - 1 , & EX ( This ) )"		161914	0					
ANR	162018	UnaryOperator	!		161914	0					
ANR	162019	CallExpression	"zend_hash_str_add ( EX ( symbol_table ) , ""this"" , sizeof ( ""this"" ) - 1 , & EX ( This ) )"		161914	1					
ANR	162020	Callee	zend_hash_str_add		161914	0					
ANR	162021	Identifier	zend_hash_str_add		161914	0					
ANR	162022	ArgumentList	EX ( symbol_table )		161914	1					
ANR	162023	Argument	EX ( symbol_table )		161914	0					
ANR	162024	CallExpression	EX ( symbol_table )		161914	0					
ANR	162025	Callee	EX		161914	0					
ANR	162026	Identifier	EX		161914	0					
ANR	162027	ArgumentList	symbol_table		161914	1					
ANR	162028	Argument	symbol_table		161914	0					
ANR	162029	Identifier	symbol_table		161914	0					
ANR	162030	Argument	"""this"""		161914	1					
ANR	162031	PrimaryExpression	"""this"""		161914	0					
ANR	162032	Argument	"sizeof ( ""this"" ) - 1"		161914	2					
ANR	162033	AdditiveExpression	"sizeof ( ""this"" ) - 1"		161914	0		-			
ANR	162034	SizeofExpression	"sizeof ( ""this"" )"		161914	0					
ANR	162035	Sizeof	sizeof		161914	0					
ANR	162036	PrimaryExpression	"""this"""		161914	1					
ANR	162037	PrimaryExpression	1		161914	1					
ANR	162038	Argument	& EX ( This )		161914	3					
ANR	162039	UnaryOperationExpression	& EX ( This )		161914	0					
ANR	162040	UnaryOperator	&		161914	0					
ANR	162041	CallExpression	EX ( This )		161914	1					
ANR	162042	Callee	EX		161914	0					
ANR	162043	Identifier	EX		161914	0					
ANR	162044	ArgumentList	This		161914	1					
ANR	162045	Argument	This		161914	0					
ANR	162046	Identifier	This		161914	0					
ANR	162047	CompoundStatement		10:81:339:339	161914	1					
ANR	162048	ExpressionStatement	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) --	2192:3:68245:68275	161914	0	True				
ANR	162049	PostIncDecOperationExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) --		161914	0					
ANR	162050	CallExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) )		161914	0					
ANR	162051	Callee	GC_REFCOUNT		161914	0					
ANR	162052	Identifier	GC_REFCOUNT		161914	0					
ANR	162053	ArgumentList	Z_OBJ ( EX ( This ) )		161914	1					
ANR	162054	Argument	Z_OBJ ( EX ( This ) )		161914	0					
ANR	162055	CallExpression	Z_OBJ ( EX ( This ) )		161914	0					
ANR	162056	Callee	Z_OBJ		161914	0					
ANR	162057	Identifier	Z_OBJ		161914	0					
ANR	162058	ArgumentList	EX ( This )		161914	1					
ANR	162059	Argument	EX ( This )		161914	0					
ANR	162060	CallExpression	EX ( This )		161914	0					
ANR	162061	Callee	EX		161914	0					
ANR	162062	Identifier	EX		161914	0					
ANR	162063	ArgumentList	This		161914	1					
ANR	162064	Argument	This		161914	0					
ANR	162065	Identifier	This		161914	0					
ANR	162066	IncDec	--		161914	1					
ANR	162067	ExpressionStatement	zend_attach_symbol_table ( execute_data )	2196:1:68286:68324	161914	5	True				
ANR	162068	CallExpression	zend_attach_symbol_table ( execute_data )		161914	0					
ANR	162069	Callee	zend_attach_symbol_table		161914	0					
ANR	162070	Identifier	zend_attach_symbol_table		161914	0					
ANR	162071	ArgumentList	execute_data		161914	1					
ANR	162072	Argument	execute_data		161914	0					
ANR	162073	Identifier	execute_data		161914	0					
ANR	162074	IfStatement	if ( ! op_array -> run_time_cache )		161914	6					
ANR	162075	Condition	! op_array -> run_time_cache	2198:5:68332:68356	161914	0	True				
ANR	162076	UnaryOperationExpression	! op_array -> run_time_cache		161914	0					
ANR	162077	UnaryOperator	!		161914	0					
ANR	162078	PtrMemberAccess	op_array -> run_time_cache		161914	1					
ANR	162079	Identifier	op_array		161914	0					
ANR	162080	Identifier	run_time_cache		161914	1					
ANR	162081	CompoundStatement		17:32:458:458	161914	1					
ANR	162082	ExpressionStatement	op_array -> run_time_cache = emalloc ( op_array -> cache_size )	2199:2:68363:68419	161914	0	True				
ANR	162083	AssignmentExpression	op_array -> run_time_cache = emalloc ( op_array -> cache_size )		161914	0		=			
ANR	162084	PtrMemberAccess	op_array -> run_time_cache		161914	0					
ANR	162085	Identifier	op_array		161914	0					
ANR	162086	Identifier	run_time_cache		161914	1					
ANR	162087	CallExpression	emalloc ( op_array -> cache_size )		161914	1					
ANR	162088	Callee	emalloc		161914	0					
ANR	162089	Identifier	emalloc		161914	0					
ANR	162090	ArgumentList	op_array -> cache_size		161914	1					
ANR	162091	Argument	op_array -> cache_size		161914	0					
ANR	162092	PtrMemberAccess	op_array -> cache_size		161914	0					
ANR	162093	Identifier	op_array		161914	0					
ANR	162094	Identifier	cache_size		161914	1					
ANR	162095	ExpressionStatement	"memset ( op_array -> run_time_cache , 0 , op_array -> cache_size )"	2200:2:68423:68480	161914	1	True				
ANR	162096	CallExpression	"memset ( op_array -> run_time_cache , 0 , op_array -> cache_size )"		161914	0					
ANR	162097	Callee	memset		161914	0					
ANR	162098	Identifier	memset		161914	0					
ANR	162099	ArgumentList	op_array -> run_time_cache		161914	1					
ANR	162100	Argument	op_array -> run_time_cache		161914	0					
ANR	162101	PtrMemberAccess	op_array -> run_time_cache		161914	0					
ANR	162102	Identifier	op_array		161914	0					
ANR	162103	Identifier	run_time_cache		161914	1					
ANR	162104	Argument	0		161914	1					
ANR	162105	PrimaryExpression	0		161914	0					
ANR	162106	Argument	op_array -> cache_size		161914	2					
ANR	162107	PtrMemberAccess	op_array -> cache_size		161914	0					
ANR	162108	Identifier	op_array		161914	0					
ANR	162109	Identifier	cache_size		161914	1					
ANR	162110	ExpressionStatement	EX_LOAD_RUN_TIME_CACHE ( op_array )	2202:1:68486:68518	161914	7	True				
ANR	162111	CallExpression	EX_LOAD_RUN_TIME_CACHE ( op_array )		161914	0					
ANR	162112	Callee	EX_LOAD_RUN_TIME_CACHE		161914	0					
ANR	162113	Identifier	EX_LOAD_RUN_TIME_CACHE		161914	0					
ANR	162114	ArgumentList	op_array		161914	1					
ANR	162115	Argument	op_array		161914	0					
ANR	162116	Identifier	op_array		161914	0					
ANR	162117	ExpressionStatement	EX_LOAD_LITERALS ( op_array )	2203:1:68521:68547	161914	8	True				
ANR	162118	CallExpression	EX_LOAD_LITERALS ( op_array )		161914	0					
ANR	162119	Callee	EX_LOAD_LITERALS		161914	0					
ANR	162120	Identifier	EX_LOAD_LITERALS		161914	0					
ANR	162121	ArgumentList	op_array		161914	1					
ANR	162122	Argument	op_array		161914	0					
ANR	162123	Identifier	op_array		161914	0					
ANR	162124	ExpressionStatement	EG ( current_execute_data ) = execute_data	2205:1:68551:68590	161914	9	True				
ANR	162125	AssignmentExpression	EG ( current_execute_data ) = execute_data		161914	0		=			
ANR	162126	CallExpression	EG ( current_execute_data )		161914	0					
ANR	162127	Callee	EG		161914	0					
ANR	162128	Identifier	EG		161914	0					
ANR	162129	ArgumentList	current_execute_data		161914	1					
ANR	162130	Argument	current_execute_data		161914	0					
ANR	162131	Identifier	current_execute_data		161914	0					
ANR	162132	Identifier	execute_data		161914	1					
ANR	162133	ExpressionStatement	ZEND_VM_INTERRUPT_CHECK ( )	2206:1:68593:68618	161914	10	True				
ANR	162134	CallExpression	ZEND_VM_INTERRUPT_CHECK ( )		161914	0					
ANR	162135	Callee	ZEND_VM_INTERRUPT_CHECK		161914	0					
ANR	162136	Identifier	ZEND_VM_INTERRUPT_CHECK		161914	0					
ANR	162137	ArgumentList			161914	1					
ANR	162138	ReturnType	static zend_always_inline void		161914	1					
ANR	162139	Identifier	i_init_code_execute_data		161914	2					
ANR	162140	ParameterList	"zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value"		161914	3					
ANR	162141	Parameter	zend_execute_data * execute_data	2181:56:67812:67842	161914	0	True				
ANR	162142	ParameterType	zend_execute_data *		161914	0					
ANR	162143	Identifier	execute_data		161914	1					
ANR	162144	Parameter	zend_op_array * op_array	2181:89:67845:67867	161914	1	True				
ANR	162145	ParameterType	zend_op_array *		161914	0					
ANR	162146	Identifier	op_array		161914	1					
ANR	162147	Parameter	zval * return_value	2181:114:67870:67887	161914	2	True				
ANR	162148	ParameterType	zval *		161914	0					
ANR	162149	Identifier	return_value		161914	1					
ANR	162150	CFGEntryNode	ENTRY		161914		True				
ANR	162151	CFGExitNode	EXIT		161914		True				
ANR	162152	Symbol	return_value		161914						
ANR	162153	Symbol	EG		161914						
ANR	162154	Symbol	NULL		161914						
ANR	162155	Symbol	op_array -> this_var		161914						
ANR	162156	Symbol	current_execute_data		161914						
ANR	162157	Symbol	zend_hash_str_add		161914						
ANR	162158	Symbol	symbol_table		161914						
ANR	162159	Symbol	execute_data		161914						
ANR	162160	Symbol	* op_array		161914						
ANR	162161	Symbol	call		161914						
ANR	162162	Symbol	UNEXPECTED		161914						
ANR	162163	Symbol	op_array -> run_time_cache		161914						
ANR	162164	Symbol	Z_OBJ		161914						
ANR	162165	Symbol	emalloc		161914						
ANR	162166	Symbol	EX		161914						
ANR	162167	Symbol	op_array -> opcodes		161914						
ANR	162168	Symbol	opline		161914						
ANR	162169	Symbol	func		161914						
ANR	162170	Symbol	This		161914						
ANR	162171	Symbol	op_array -> cache_size		161914						
ANR	162172	Symbol	& EX		161914						
ANR	162173	Symbol	EXPECTED		161914						
ANR	162174	Symbol	GC_REFCOUNT		161914						
ANR	162175	Symbol	op_array		161914						
ANR	162176	Function	i_init_execute_data	2210:0:68633:71302							
ANR	162177	FunctionDef	"i_init_execute_data (zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value)"		162176	0					
ANR	162178	CompoundStatement		2211:0:68772:71302	162176	0					
ANR	162179	ExpressionStatement	ZEND_ASSERT ( EX ( func ) == ( zend_function * ) op_array )	2212:1:68775:68824	162176	0	True				
ANR	162180	CallExpression	ZEND_ASSERT ( EX ( func ) == ( zend_function * ) op_array )		162176	0					
ANR	162181	Callee	ZEND_ASSERT		162176	0					
ANR	162182	Identifier	ZEND_ASSERT		162176	0					
ANR	162183	ArgumentList	EX ( func ) == ( zend_function * ) op_array		162176	1					
ANR	162184	Argument	EX ( func ) == ( zend_function * ) op_array		162176	0					
ANR	162185	EqualityExpression	EX ( func ) == ( zend_function * ) op_array		162176	0		==			
ANR	162186	CallExpression	EX ( func )		162176	0					
ANR	162187	Callee	EX		162176	0					
ANR	162188	Identifier	EX		162176	0					
ANR	162189	ArgumentList	func		162176	1					
ANR	162190	Argument	func		162176	0					
ANR	162191	Identifier	func		162176	0					
ANR	162192	CastExpression	( zend_function * ) op_array		162176	1					
ANR	162193	CastTarget	zend_function *		162176	0					
ANR	162194	Identifier	op_array		162176	1					
ANR	162195	ExpressionStatement	EX ( opline ) = op_array -> opcodes	2214:1:68828:68858	162176	1	True				
ANR	162196	AssignmentExpression	EX ( opline ) = op_array -> opcodes		162176	0		=			
ANR	162197	CallExpression	EX ( opline )		162176	0					
ANR	162198	Callee	EX		162176	0					
ANR	162199	Identifier	EX		162176	0					
ANR	162200	ArgumentList	opline		162176	1					
ANR	162201	Argument	opline		162176	0					
ANR	162202	Identifier	opline		162176	0					
ANR	162203	PtrMemberAccess	op_array -> opcodes		162176	1					
ANR	162204	Identifier	op_array		162176	0					
ANR	162205	Identifier	opcodes		162176	1					
ANR	162206	ExpressionStatement	EX ( call ) = NULL	2215:1:68861:68876	162176	2	True				
ANR	162207	AssignmentExpression	EX ( call ) = NULL		162176	0		=			
ANR	162208	CallExpression	EX ( call )		162176	0					
ANR	162209	Callee	EX		162176	0					
ANR	162210	Identifier	EX		162176	0					
ANR	162211	ArgumentList	call		162176	1					
ANR	162212	Argument	call		162176	0					
ANR	162213	Identifier	call		162176	0					
ANR	162214	Identifier	NULL		162176	1					
ANR	162215	ExpressionStatement	EX ( return_value ) = return_value	2216:1:68879:68910	162176	3	True				
ANR	162216	AssignmentExpression	EX ( return_value ) = return_value		162176	0		=			
ANR	162217	CallExpression	EX ( return_value )		162176	0					
ANR	162218	Callee	EX		162176	0					
ANR	162219	Identifier	EX		162176	0					
ANR	162220	ArgumentList	return_value		162176	1					
ANR	162221	Argument	return_value		162176	0					
ANR	162222	Identifier	return_value		162176	0					
ANR	162223	Identifier	return_value		162176	1					
ANR	162224	IfStatement	if ( UNEXPECTED ( EX ( symbol_table ) != NULL ) )		162176	4					
ANR	162225	Condition	UNEXPECTED ( EX ( symbol_table ) != NULL )	2218:5:68918:68953	162176	0	True				
ANR	162226	CallExpression	UNEXPECTED ( EX ( symbol_table ) != NULL )		162176	0					
ANR	162227	Callee	UNEXPECTED		162176	0					
ANR	162228	Identifier	UNEXPECTED		162176	0					
ANR	162229	ArgumentList	EX ( symbol_table ) != NULL		162176	1					
ANR	162230	Argument	EX ( symbol_table ) != NULL		162176	0					
ANR	162231	EqualityExpression	EX ( symbol_table ) != NULL		162176	0		!=			
ANR	162232	CallExpression	EX ( symbol_table )		162176	0					
ANR	162233	Callee	EX		162176	0					
ANR	162234	Identifier	EX		162176	0					
ANR	162235	ArgumentList	symbol_table		162176	1					
ANR	162236	Argument	symbol_table		162176	0					
ANR	162237	Identifier	symbol_table		162176	0					
ANR	162238	Identifier	NULL		162176	1					
ANR	162239	CompoundStatement		8:43:183:183	162176	1					
ANR	162240	IfStatement	if ( UNEXPECTED ( op_array -> this_var != ( uint32_t ) - 1 ) && EXPECTED ( Z_OBJ ( EX ( This ) ) ) )		162176	0					
ANR	162241	Condition	UNEXPECTED ( op_array -> this_var != ( uint32_t ) - 1 ) && EXPECTED ( Z_OBJ ( EX ( This ) ) )	2219:6:68964:69038	162176	0	True				
ANR	162242	AndExpression	UNEXPECTED ( op_array -> this_var != ( uint32_t ) - 1 ) && EXPECTED ( Z_OBJ ( EX ( This ) ) )		162176	0		&&			
ANR	162243	CallExpression	UNEXPECTED ( op_array -> this_var != ( uint32_t ) - 1 )		162176	0					
ANR	162244	Callee	UNEXPECTED		162176	0					
ANR	162245	Identifier	UNEXPECTED		162176	0					
ANR	162246	ArgumentList	op_array -> this_var != ( uint32_t ) - 1		162176	1					
ANR	162247	Argument	op_array -> this_var != ( uint32_t ) - 1		162176	0					
ANR	162248	EqualityExpression	op_array -> this_var != ( uint32_t ) - 1		162176	0		!=			
ANR	162249	PtrMemberAccess	op_array -> this_var		162176	0					
ANR	162250	Identifier	op_array		162176	0					
ANR	162251	Identifier	this_var		162176	1					
ANR	162252	CastExpression	( uint32_t ) - 1		162176	1					
ANR	162253	CastTarget	uint32_t		162176	0					
ANR	162254	UnaryOperationExpression	- 1		162176	1					
ANR	162255	UnaryOperator	-		162176	0					
ANR	162256	PrimaryExpression	1		162176	1					
ANR	162257	CallExpression	EXPECTED ( Z_OBJ ( EX ( This ) ) )		162176	1					
ANR	162258	Callee	EXPECTED		162176	0					
ANR	162259	Identifier	EXPECTED		162176	0					
ANR	162260	ArgumentList	Z_OBJ ( EX ( This ) )		162176	1					
ANR	162261	Argument	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162262	CallExpression	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162263	Callee	Z_OBJ		162176	0					
ANR	162264	Identifier	Z_OBJ		162176	0					
ANR	162265	ArgumentList	EX ( This )		162176	1					
ANR	162266	Argument	EX ( This )		162176	0					
ANR	162267	CallExpression	EX ( This )		162176	0					
ANR	162268	Callee	EX		162176	0					
ANR	162269	Identifier	EX		162176	0					
ANR	162270	ArgumentList	This		162176	1					
ANR	162271	Argument	This		162176	0					
ANR	162272	Identifier	This		162176	0					
ANR	162273	CompoundStatement		9:83:268:268	162176	1					
ANR	162274	ExpressionStatement	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) ++	2220:3:69046:69076	162176	0	True				
ANR	162275	PostIncDecOperationExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) ++		162176	0					
ANR	162276	CallExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) )		162176	0					
ANR	162277	Callee	GC_REFCOUNT		162176	0					
ANR	162278	Identifier	GC_REFCOUNT		162176	0					
ANR	162279	ArgumentList	Z_OBJ ( EX ( This ) )		162176	1					
ANR	162280	Argument	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162281	CallExpression	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162282	Callee	Z_OBJ		162176	0					
ANR	162283	Identifier	Z_OBJ		162176	0					
ANR	162284	ArgumentList	EX ( This )		162176	1					
ANR	162285	Argument	EX ( This )		162176	0					
ANR	162286	CallExpression	EX ( This )		162176	0					
ANR	162287	Callee	EX		162176	0					
ANR	162288	Identifier	EX		162176	0					
ANR	162289	ArgumentList	This		162176	1					
ANR	162290	Argument	This		162176	0					
ANR	162291	Identifier	This		162176	0					
ANR	162292	IncDec	++		162176	1					
ANR	162293	IfStatement	"if ( ! zend_hash_str_add ( EX ( symbol_table ) , ""this"" , sizeof ( ""this"" ) - 1 , & EX ( This ) ) )"		162176	1					
ANR	162294	Condition	"! zend_hash_str_add ( EX ( symbol_table ) , ""this"" , sizeof ( ""this"" ) - 1 , & EX ( This ) )"	2221:7:69085:69157	162176	0	True				
ANR	162295	UnaryOperationExpression	"! zend_hash_str_add ( EX ( symbol_table ) , ""this"" , sizeof ( ""this"" ) - 1 , & EX ( This ) )"		162176	0					
ANR	162296	UnaryOperator	!		162176	0					
ANR	162297	CallExpression	"zend_hash_str_add ( EX ( symbol_table ) , ""this"" , sizeof ( ""this"" ) - 1 , & EX ( This ) )"		162176	1					
ANR	162298	Callee	zend_hash_str_add		162176	0					
ANR	162299	Identifier	zend_hash_str_add		162176	0					
ANR	162300	ArgumentList	EX ( symbol_table )		162176	1					
ANR	162301	Argument	EX ( symbol_table )		162176	0					
ANR	162302	CallExpression	EX ( symbol_table )		162176	0					
ANR	162303	Callee	EX		162176	0					
ANR	162304	Identifier	EX		162176	0					
ANR	162305	ArgumentList	symbol_table		162176	1					
ANR	162306	Argument	symbol_table		162176	0					
ANR	162307	Identifier	symbol_table		162176	0					
ANR	162308	Argument	"""this"""		162176	1					
ANR	162309	PrimaryExpression	"""this"""		162176	0					
ANR	162310	Argument	"sizeof ( ""this"" ) - 1"		162176	2					
ANR	162311	AdditiveExpression	"sizeof ( ""this"" ) - 1"		162176	0		-			
ANR	162312	SizeofExpression	"sizeof ( ""this"" )"		162176	0					
ANR	162313	Sizeof	sizeof		162176	0					
ANR	162314	PrimaryExpression	"""this"""		162176	1					
ANR	162315	PrimaryExpression	1		162176	1					
ANR	162316	Argument	& EX ( This )		162176	3					
ANR	162317	UnaryOperationExpression	& EX ( This )		162176	0					
ANR	162318	UnaryOperator	&		162176	0					
ANR	162319	CallExpression	EX ( This )		162176	1					
ANR	162320	Callee	EX		162176	0					
ANR	162321	Identifier	EX		162176	0					
ANR	162322	ArgumentList	This		162176	1					
ANR	162323	Argument	This		162176	0					
ANR	162324	Identifier	This		162176	0					
ANR	162325	CompoundStatement		11:82:387:387	162176	1					
ANR	162326	ExpressionStatement	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) --	2222:4:69166:69196	162176	0	True				
ANR	162327	PostIncDecOperationExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) --		162176	0					
ANR	162328	CallExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) )		162176	0					
ANR	162329	Callee	GC_REFCOUNT		162176	0					
ANR	162330	Identifier	GC_REFCOUNT		162176	0					
ANR	162331	ArgumentList	Z_OBJ ( EX ( This ) )		162176	1					
ANR	162332	Argument	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162333	CallExpression	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162334	Callee	Z_OBJ		162176	0					
ANR	162335	Identifier	Z_OBJ		162176	0					
ANR	162336	ArgumentList	EX ( This )		162176	1					
ANR	162337	Argument	EX ( This )		162176	0					
ANR	162338	CallExpression	EX ( This )		162176	0					
ANR	162339	Callee	EX		162176	0					
ANR	162340	Identifier	EX		162176	0					
ANR	162341	ArgumentList	This		162176	1					
ANR	162342	Argument	This		162176	0					
ANR	162343	Identifier	This		162176	0					
ANR	162344	IncDec	--		162176	1					
ANR	162345	ExpressionStatement	zend_attach_symbol_table ( execute_data )	2226:2:69210:69248	162176	1	True				
ANR	162346	CallExpression	zend_attach_symbol_table ( execute_data )		162176	0					
ANR	162347	Callee	zend_attach_symbol_table		162176	0					
ANR	162348	Identifier	zend_attach_symbol_table		162176	0					
ANR	162349	ArgumentList	execute_data		162176	1					
ANR	162350	Argument	execute_data		162176	0					
ANR	162351	Identifier	execute_data		162176	0					
ANR	162352	ElseStatement	else		162176	0					
ANR	162353	CompoundStatement		18:2:489:523	162176	0					
ANR	162354	IdentifierDeclStatement	"uint32_t first_extra_arg , num_args ;"	2228:2:69262:69296	162176	0	True				
ANR	162355	IdentifierDecl	first_extra_arg		162176	0					
ANR	162356	IdentifierDeclType	uint32_t		162176	0					
ANR	162357	Identifier	first_extra_arg		162176	1					
ANR	162358	IdentifierDecl	num_args		162176	1					
ANR	162359	IdentifierDeclType	uint32_t		162176	0					
ANR	162360	Identifier	num_args		162176	1					
ANR	162361	ExpressionStatement	first_extra_arg = op_array -> num_args	2231:2:69326:69362	162176	1	True				
ANR	162362	AssignmentExpression	first_extra_arg = op_array -> num_args		162176	0		=			
ANR	162363	Identifier	first_extra_arg		162176	0					
ANR	162364	PtrMemberAccess	op_array -> num_args		162176	1					
ANR	162365	Identifier	op_array		162176	0					
ANR	162366	Identifier	num_args		162176	1					
ANR	162367	ExpressionStatement	num_args = EX_NUM_ARGS ( )	2232:2:69366:69390	162176	2	True				
ANR	162368	AssignmentExpression	num_args = EX_NUM_ARGS ( )		162176	0		=			
ANR	162369	Identifier	num_args		162176	0					
ANR	162370	CallExpression	EX_NUM_ARGS ( )		162176	1					
ANR	162371	Callee	EX_NUM_ARGS		162176	0					
ANR	162372	Identifier	EX_NUM_ARGS		162176	0					
ANR	162373	ArgumentList			162176	1					
ANR	162374	IfStatement	if ( UNEXPECTED ( num_args > first_extra_arg ) )		162176	3					
ANR	162375	Condition	UNEXPECTED ( num_args > first_extra_arg )	2233:6:69398:69435	162176	0	True				
ANR	162376	CallExpression	UNEXPECTED ( num_args > first_extra_arg )		162176	0					
ANR	162377	Callee	UNEXPECTED		162176	0					
ANR	162378	Identifier	UNEXPECTED		162176	0					
ANR	162379	ArgumentList	num_args > first_extra_arg		162176	1					
ANR	162380	Argument	num_args > first_extra_arg		162176	0					
ANR	162381	RelationalExpression	num_args > first_extra_arg		162176	0		>			
ANR	162382	Identifier	num_args		162176	0					
ANR	162383	Identifier	first_extra_arg		162176	1					
ANR	162384	CompoundStatement		25:3:696:719	162176	1					
ANR	162385	IdentifierDeclStatement	"zval * end , * src , * dst ;"	2234:3:69443:69464	162176	0	True				
ANR	162386	IdentifierDecl	* end		162176	0					
ANR	162387	IdentifierDeclType	zval *		162176	0					
ANR	162388	Identifier	end		162176	1					
ANR	162389	IdentifierDecl	* src		162176	1					
ANR	162390	IdentifierDeclType	zval *		162176	0					
ANR	162391	Identifier	src		162176	1					
ANR	162392	IdentifierDecl	* dst		162176	2					
ANR	162393	IdentifierDeclType	zval *		162176	0					
ANR	162394	Identifier	dst		162176	1					
ANR	162395	IdentifierDeclStatement	uint32_t type_flags = 0 ;	2235:3:69469:69492	162176	1	True				
ANR	162396	IdentifierDecl	type_flags = 0		162176	0					
ANR	162397	IdentifierDeclType	uint32_t		162176	0					
ANR	162398	Identifier	type_flags		162176	1					
ANR	162399	AssignmentExpression	type_flags = 0		162176	2		=			
ANR	162400	Identifier	type_flags		162176	0					
ANR	162401	PrimaryExpression	0		162176	1					
ANR	162402	IfStatement	if ( EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 ) )		162176	2					
ANR	162403	Condition	EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 )	2237:7:69502:69562	162176	0	True				
ANR	162404	CallExpression	EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 )		162176	0					
ANR	162405	Callee	EXPECTED		162176	0					
ANR	162406	Identifier	EXPECTED		162176	0					
ANR	162407	ArgumentList	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		162176	1					
ANR	162408	Argument	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		162176	0					
ANR	162409	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		162176	0		==			
ANR	162410	BitAndExpression	op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS		162176	0		&			
ANR	162411	PtrMemberAccess	op_array -> fn_flags		162176	0					
ANR	162412	Identifier	op_array		162176	0					
ANR	162413	Identifier	fn_flags		162176	1					
ANR	162414	Identifier	ZEND_ACC_HAS_TYPE_HINTS		162176	1					
ANR	162415	PrimaryExpression	0		162176	1					
ANR	162416	CompoundStatement		27:70:792:792	162176	1					
ANR	162417	ExpressionStatement	EX ( opline ) += first_extra_arg	2239:4:69631:69660	162176	0	True				
ANR	162418	AssignmentExpression	EX ( opline ) += first_extra_arg		162176	0		+=			
ANR	162419	CallExpression	EX ( opline )		162176	0					
ANR	162420	Callee	EX		162176	0					
ANR	162421	Identifier	EX		162176	0					
ANR	162422	ArgumentList	opline		162176	1					
ANR	162423	Argument	opline		162176	0					
ANR	162424	Identifier	opline		162176	0					
ANR	162425	Identifier	first_extra_arg		162176	1					
ANR	162426	ExpressionStatement	end = EX_VAR_NUM ( first_extra_arg - 1 )	2243:3:69742:69779	162176	3	True				
ANR	162427	AssignmentExpression	end = EX_VAR_NUM ( first_extra_arg - 1 )		162176	0		=			
ANR	162428	Identifier	end		162176	0					
ANR	162429	CallExpression	EX_VAR_NUM ( first_extra_arg - 1 )		162176	1					
ANR	162430	Callee	EX_VAR_NUM		162176	0					
ANR	162431	Identifier	EX_VAR_NUM		162176	0					
ANR	162432	ArgumentList	first_extra_arg - 1		162176	1					
ANR	162433	Argument	first_extra_arg - 1		162176	0					
ANR	162434	AdditiveExpression	first_extra_arg - 1		162176	0		-			
ANR	162435	Identifier	first_extra_arg		162176	0					
ANR	162436	PrimaryExpression	1		162176	1					
ANR	162437	ExpressionStatement	src = end + ( num_args - first_extra_arg )	2244:3:69784:69824	162176	4	True				
ANR	162438	AssignmentExpression	src = end + ( num_args - first_extra_arg )		162176	0		=			
ANR	162439	Identifier	src		162176	0					
ANR	162440	AdditiveExpression	end + ( num_args - first_extra_arg )		162176	1		+			
ANR	162441	Identifier	end		162176	0					
ANR	162442	AdditiveExpression	num_args - first_extra_arg		162176	1		-			
ANR	162443	Identifier	num_args		162176	0					
ANR	162444	Identifier	first_extra_arg		162176	1					
ANR	162445	ExpressionStatement	dst = src + ( op_array -> last_var + op_array -> T - first_extra_arg )	2245:3:69829:69893	162176	5	True				
ANR	162446	AssignmentExpression	dst = src + ( op_array -> last_var + op_array -> T - first_extra_arg )		162176	0		=			
ANR	162447	Identifier	dst		162176	0					
ANR	162448	AdditiveExpression	src + ( op_array -> last_var + op_array -> T - first_extra_arg )		162176	1		+			
ANR	162449	Identifier	src		162176	0					
ANR	162450	AdditiveExpression	op_array -> last_var + op_array -> T - first_extra_arg		162176	1		+			
ANR	162451	PtrMemberAccess	op_array -> last_var		162176	0					
ANR	162452	Identifier	op_array		162176	0					
ANR	162453	Identifier	last_var		162176	1					
ANR	162454	AdditiveExpression	op_array -> T - first_extra_arg		162176	1		-			
ANR	162455	PtrMemberAccess	op_array -> T		162176	0					
ANR	162456	Identifier	op_array		162176	0					
ANR	162457	Identifier	T		162176	1					
ANR	162458	Identifier	first_extra_arg		162176	1					
ANR	162459	IfStatement	if ( EXPECTED ( src != dst ) )		162176	6					
ANR	162460	Condition	EXPECTED ( src != dst )	2246:7:69902:69921	162176	0	True				
ANR	162461	CallExpression	EXPECTED ( src != dst )		162176	0					
ANR	162462	Callee	EXPECTED		162176	0					
ANR	162463	Identifier	EXPECTED		162176	0					
ANR	162464	ArgumentList	src != dst		162176	1					
ANR	162465	Argument	src != dst		162176	0					
ANR	162466	EqualityExpression	src != dst		162176	0		!=			
ANR	162467	Identifier	src		162176	0					
ANR	162468	Identifier	dst		162176	1					
ANR	162469	CompoundStatement		36:29:1151:1151	162176	1					
ANR	162470	DoStatement	do		162176	0					
ANR	162471	CompoundStatement		37:7:1160:1160	162176	0					
ANR	162472	ExpressionStatement	type_flags |= Z_TYPE_INFO_P ( src )	2248:5:69940:69972	162176	0	True				
ANR	162473	AssignmentExpression	type_flags |= Z_TYPE_INFO_P ( src )		162176	0		|=			
ANR	162474	Identifier	type_flags		162176	0					
ANR	162475	CallExpression	Z_TYPE_INFO_P ( src )		162176	1					
ANR	162476	Callee	Z_TYPE_INFO_P		162176	0					
ANR	162477	Identifier	Z_TYPE_INFO_P		162176	0					
ANR	162478	ArgumentList	src		162176	1					
ANR	162479	Argument	src		162176	0					
ANR	162480	Identifier	src		162176	0					
ANR	162481	ExpressionStatement	"ZVAL_COPY_VALUE ( dst , src )"	2249:5:69979:70004	162176	1	True				
ANR	162482	CallExpression	"ZVAL_COPY_VALUE ( dst , src )"		162176	0					
ANR	162483	Callee	ZVAL_COPY_VALUE		162176	0					
ANR	162484	Identifier	ZVAL_COPY_VALUE		162176	0					
ANR	162485	ArgumentList	dst		162176	1					
ANR	162486	Argument	dst		162176	0					
ANR	162487	Identifier	dst		162176	0					
ANR	162488	Argument	src		162176	1					
ANR	162489	Identifier	src		162176	0					
ANR	162490	ExpressionStatement	ZVAL_UNDEF ( src )	2250:5:70011:70026	162176	2	True				
ANR	162491	CallExpression	ZVAL_UNDEF ( src )		162176	0					
ANR	162492	Callee	ZVAL_UNDEF		162176	0					
ANR	162493	Identifier	ZVAL_UNDEF		162176	0					
ANR	162494	ArgumentList	src		162176	1					
ANR	162495	Argument	src		162176	0					
ANR	162496	Identifier	src		162176	0					
ANR	162497	ExpressionStatement	src --	2251:5:70033:70038	162176	3	True				
ANR	162498	PostIncDecOperationExpression	src --		162176	0					
ANR	162499	Identifier	src		162176	0					
ANR	162500	IncDec	--		162176	1					
ANR	162501	ExpressionStatement	dst --	2252:5:70045:70050	162176	4	True				
ANR	162502	PostIncDecOperationExpression	dst --		162176	0					
ANR	162503	Identifier	dst		162176	0					
ANR	162504	IncDec	--		162176	1					
ANR	162505	Condition	src != end	2253:13:70065:70074	162176	1	True				
ANR	162506	EqualityExpression	src != end		162176	0		!=			
ANR	162507	Identifier	src		162176	0					
ANR	162508	Identifier	end		162176	1					
ANR	162509	ElseStatement	else		162176	0					
ANR	162510	CompoundStatement		44:10:1315:1315	162176	0					
ANR	162511	DoStatement	do		162176	0					
ANR	162512	CompoundStatement		45:7:1324:1324	162176	0					
ANR	162513	ExpressionStatement	type_flags |= Z_TYPE_INFO_P ( src )	2256:5:70104:70136	162176	0	True				
ANR	162514	AssignmentExpression	type_flags |= Z_TYPE_INFO_P ( src )		162176	0		|=			
ANR	162515	Identifier	type_flags		162176	0					
ANR	162516	CallExpression	Z_TYPE_INFO_P ( src )		162176	1					
ANR	162517	Callee	Z_TYPE_INFO_P		162176	0					
ANR	162518	Identifier	Z_TYPE_INFO_P		162176	0					
ANR	162519	ArgumentList	src		162176	1					
ANR	162520	Argument	src		162176	0					
ANR	162521	Identifier	src		162176	0					
ANR	162522	ExpressionStatement	src --	2257:5:70143:70148	162176	1	True				
ANR	162523	PostIncDecOperationExpression	src --		162176	0					
ANR	162524	Identifier	src		162176	0					
ANR	162525	IncDec	--		162176	1					
ANR	162526	Condition	src != end	2258:13:70163:70172	162176	1	True				
ANR	162527	EqualityExpression	src != end		162176	0		!=			
ANR	162528	Identifier	src		162176	0					
ANR	162529	Identifier	end		162176	1					
ANR	162530	ExpressionStatement	"ZEND_ADD_CALL_FLAG ( execute_data , ( ( type_flags >> Z_TYPE_FLAGS_SHIFT ) & IS_TYPE_REFCOUNTED ) )"	2260:3:70184:70275	162176	7	True				
ANR	162531	CallExpression	"ZEND_ADD_CALL_FLAG ( execute_data , ( ( type_flags >> Z_TYPE_FLAGS_SHIFT ) & IS_TYPE_REFCOUNTED ) )"		162176	0					
ANR	162532	Callee	ZEND_ADD_CALL_FLAG		162176	0					
ANR	162533	Identifier	ZEND_ADD_CALL_FLAG		162176	0					
ANR	162534	ArgumentList	execute_data		162176	1					
ANR	162535	Argument	execute_data		162176	0					
ANR	162536	Identifier	execute_data		162176	0					
ANR	162537	Argument	( type_flags >> Z_TYPE_FLAGS_SHIFT ) & IS_TYPE_REFCOUNTED		162176	1					
ANR	162538	BitAndExpression	( type_flags >> Z_TYPE_FLAGS_SHIFT ) & IS_TYPE_REFCOUNTED		162176	0		&			
ANR	162539	ShiftExpression	type_flags >> Z_TYPE_FLAGS_SHIFT		162176	0		>>			
ANR	162540	Identifier	type_flags		162176	0					
ANR	162541	Identifier	Z_TYPE_FLAGS_SHIFT		162176	1					
ANR	162542	Identifier	IS_TYPE_REFCOUNTED		162176	1					
ANR	162543	ElseStatement	else		162176	0					
ANR	162544	IfStatement	if ( EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 ) )		162176	0					
ANR	162545	Condition	EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 )	2261:13:70290:70350	162176	0	True				
ANR	162546	CallExpression	EXPECTED ( ( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0 )		162176	0					
ANR	162547	Callee	EXPECTED		162176	0					
ANR	162548	Identifier	EXPECTED		162176	0					
ANR	162549	ArgumentList	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		162176	1					
ANR	162550	Argument	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		162176	0					
ANR	162551	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS ) == 0		162176	0		==			
ANR	162552	BitAndExpression	op_array -> fn_flags & ZEND_ACC_HAS_TYPE_HINTS		162176	0		&			
ANR	162553	PtrMemberAccess	op_array -> fn_flags		162176	0					
ANR	162554	Identifier	op_array		162176	0					
ANR	162555	Identifier	fn_flags		162176	1					
ANR	162556	Identifier	ZEND_ACC_HAS_TYPE_HINTS		162176	1					
ANR	162557	PrimaryExpression	0		162176	1					
ANR	162558	CompoundStatement		51:76:1580:1580	162176	1					
ANR	162559	ExpressionStatement	EX ( opline ) += num_args	2263:3:70417:70439	162176	0	True				
ANR	162560	AssignmentExpression	EX ( opline ) += num_args		162176	0		+=			
ANR	162561	CallExpression	EX ( opline )		162176	0					
ANR	162562	Callee	EX		162176	0					
ANR	162563	Identifier	EX		162176	0					
ANR	162564	ArgumentList	opline		162176	1					
ANR	162565	Argument	opline		162176	0					
ANR	162566	Identifier	opline		162176	0					
ANR	162567	Identifier	num_args		162176	1					
ANR	162568	IfStatement	if ( EXPECTED ( ( int ) num_args < op_array -> last_var ) )		162176	4					
ANR	162569	Condition	EXPECTED ( ( int ) num_args < op_array -> last_var )	2267:6:70501:70544	162176	0	True				
ANR	162570	CallExpression	EXPECTED ( ( int ) num_args < op_array -> last_var )		162176	0					
ANR	162571	Callee	EXPECTED		162176	0					
ANR	162572	Identifier	EXPECTED		162176	0					
ANR	162573	ArgumentList	( int ) num_args < op_array -> last_var		162176	1					
ANR	162574	Argument	( int ) num_args < op_array -> last_var		162176	0					
ANR	162575	RelationalExpression	( int ) num_args < op_array -> last_var		162176	0		<			
ANR	162576	CastExpression	( int ) num_args		162176	0					
ANR	162577	CastTarget	int		162176	0					
ANR	162578	Identifier	num_args		162176	1					
ANR	162579	PtrMemberAccess	op_array -> last_var		162176	1					
ANR	162580	Identifier	op_array		162176	0					
ANR	162581	Identifier	last_var		162176	1					
ANR	162582	CompoundStatement		59:3:1816:1858	162176	1					
ANR	162583	IdentifierDeclStatement	zval * var = EX_VAR_NUM ( num_args ) ;	2268:3:70552:70584	162176	0	True				
ANR	162584	IdentifierDecl	* var = EX_VAR_NUM ( num_args )		162176	0					
ANR	162585	IdentifierDeclType	zval *		162176	0					
ANR	162586	Identifier	var		162176	1					
ANR	162587	AssignmentExpression	* var = EX_VAR_NUM ( num_args )		162176	2		=			
ANR	162588	Identifier	var		162176	0					
ANR	162589	CallExpression	EX_VAR_NUM ( num_args )		162176	1					
ANR	162590	Callee	EX_VAR_NUM		162176	0					
ANR	162591	Identifier	EX_VAR_NUM		162176	0					
ANR	162592	ArgumentList	num_args		162176	1					
ANR	162593	Argument	num_args		162176	0					
ANR	162594	Identifier	num_args		162176	0					
ANR	162595	IdentifierDeclStatement	zval * end = EX_VAR_NUM ( op_array -> last_var ) ;	2269:3:70589:70631	162176	1	True				
ANR	162596	IdentifierDecl	* end = EX_VAR_NUM ( op_array -> last_var )		162176	0					
ANR	162597	IdentifierDeclType	zval *		162176	0					
ANR	162598	Identifier	end		162176	1					
ANR	162599	AssignmentExpression	* end = EX_VAR_NUM ( op_array -> last_var )		162176	2		=			
ANR	162600	Identifier	end		162176	0					
ANR	162601	CallExpression	EX_VAR_NUM ( op_array -> last_var )		162176	1					
ANR	162602	Callee	EX_VAR_NUM		162176	0					
ANR	162603	Identifier	EX_VAR_NUM		162176	0					
ANR	162604	ArgumentList	op_array -> last_var		162176	1					
ANR	162605	Argument	op_array -> last_var		162176	0					
ANR	162606	PtrMemberAccess	op_array -> last_var		162176	0					
ANR	162607	Identifier	op_array		162176	0					
ANR	162608	Identifier	last_var		162176	1					
ANR	162609	DoStatement	do		162176	2					
ANR	162610	CompoundStatement		61:6:1867:1867	162176	0					
ANR	162611	ExpressionStatement	ZVAL_UNDEF ( var )	2272:4:70646:70661	162176	0	True				
ANR	162612	CallExpression	ZVAL_UNDEF ( var )		162176	0					
ANR	162613	Callee	ZVAL_UNDEF		162176	0					
ANR	162614	Identifier	ZVAL_UNDEF		162176	0					
ANR	162615	ArgumentList	var		162176	1					
ANR	162616	Argument	var		162176	0					
ANR	162617	Identifier	var		162176	0					
ANR	162618	ExpressionStatement	var ++	2273:4:70667:70672	162176	1	True				
ANR	162619	PostIncDecOperationExpression	var ++		162176	0					
ANR	162620	Identifier	var		162176	0					
ANR	162621	IncDec	++		162176	1					
ANR	162622	Condition	var != end	2274:12:70686:70695	162176	1	True				
ANR	162623	EqualityExpression	var != end		162176	0		!=			
ANR	162624	Identifier	var		162176	0					
ANR	162625	Identifier	end		162176	1					
ANR	162626	IfStatement	if ( op_array -> this_var != ( uint32_t ) - 1 && EXPECTED ( Z_OBJ ( EX ( This ) ) ) )		162176	5					
ANR	162627	Condition	op_array -> this_var != ( uint32_t ) - 1 && EXPECTED ( Z_OBJ ( EX ( This ) ) )	2277:6:70710:70772	162176	0	True				
ANR	162628	AndExpression	op_array -> this_var != ( uint32_t ) - 1 && EXPECTED ( Z_OBJ ( EX ( This ) ) )		162176	0		&&			
ANR	162629	EqualityExpression	op_array -> this_var != ( uint32_t ) - 1		162176	0		!=			
ANR	162630	PtrMemberAccess	op_array -> this_var		162176	0					
ANR	162631	Identifier	op_array		162176	0					
ANR	162632	Identifier	this_var		162176	1					
ANR	162633	CastExpression	( uint32_t ) - 1		162176	1					
ANR	162634	CastTarget	uint32_t		162176	0					
ANR	162635	UnaryOperationExpression	- 1		162176	1					
ANR	162636	UnaryOperator	-		162176	0					
ANR	162637	PrimaryExpression	1		162176	1					
ANR	162638	CallExpression	EXPECTED ( Z_OBJ ( EX ( This ) ) )		162176	1					
ANR	162639	Callee	EXPECTED		162176	0					
ANR	162640	Identifier	EXPECTED		162176	0					
ANR	162641	ArgumentList	Z_OBJ ( EX ( This ) )		162176	1					
ANR	162642	Argument	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162643	CallExpression	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162644	Callee	Z_OBJ		162176	0					
ANR	162645	Identifier	Z_OBJ		162176	0					
ANR	162646	ArgumentList	EX ( This )		162176	1					
ANR	162647	Argument	EX ( This )		162176	0					
ANR	162648	CallExpression	EX ( This )		162176	0					
ANR	162649	Callee	EX		162176	0					
ANR	162650	Identifier	EX		162176	0					
ANR	162651	ArgumentList	This		162176	1					
ANR	162652	Argument	This		162176	0					
ANR	162653	Identifier	This		162176	0					
ANR	162654	CompoundStatement		67:71:2002:2002	162176	1					
ANR	162655	ExpressionStatement	"ZVAL_OBJ ( EX_VAR ( op_array -> this_var ) , Z_OBJ ( EX ( This ) ) )"	2278:3:70780:70833	162176	0	True				
ANR	162656	CallExpression	"ZVAL_OBJ ( EX_VAR ( op_array -> this_var ) , Z_OBJ ( EX ( This ) ) )"		162176	0					
ANR	162657	Callee	ZVAL_OBJ		162176	0					
ANR	162658	Identifier	ZVAL_OBJ		162176	0					
ANR	162659	ArgumentList	EX_VAR ( op_array -> this_var )		162176	1					
ANR	162660	Argument	EX_VAR ( op_array -> this_var )		162176	0					
ANR	162661	CallExpression	EX_VAR ( op_array -> this_var )		162176	0					
ANR	162662	Callee	EX_VAR		162176	0					
ANR	162663	Identifier	EX_VAR		162176	0					
ANR	162664	ArgumentList	op_array -> this_var		162176	1					
ANR	162665	Argument	op_array -> this_var		162176	0					
ANR	162666	PtrMemberAccess	op_array -> this_var		162176	0					
ANR	162667	Identifier	op_array		162176	0					
ANR	162668	Identifier	this_var		162176	1					
ANR	162669	Argument	Z_OBJ ( EX ( This ) )		162176	1					
ANR	162670	CallExpression	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162671	Callee	Z_OBJ		162176	0					
ANR	162672	Identifier	Z_OBJ		162176	0					
ANR	162673	ArgumentList	EX ( This )		162176	1					
ANR	162674	Argument	EX ( This )		162176	0					
ANR	162675	CallExpression	EX ( This )		162176	0					
ANR	162676	Callee	EX		162176	0					
ANR	162677	Identifier	EX		162176	0					
ANR	162678	ArgumentList	This		162176	1					
ANR	162679	Argument	This		162176	0					
ANR	162680	Identifier	This		162176	0					
ANR	162681	ExpressionStatement	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) ++	2279:3:70838:70868	162176	1	True				
ANR	162682	PostIncDecOperationExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) ) ++		162176	0					
ANR	162683	CallExpression	GC_REFCOUNT ( Z_OBJ ( EX ( This ) ) )		162176	0					
ANR	162684	Callee	GC_REFCOUNT		162176	0					
ANR	162685	Identifier	GC_REFCOUNT		162176	0					
ANR	162686	ArgumentList	Z_OBJ ( EX ( This ) )		162176	1					
ANR	162687	Argument	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162688	CallExpression	Z_OBJ ( EX ( This ) )		162176	0					
ANR	162689	Callee	Z_OBJ		162176	0					
ANR	162690	Identifier	Z_OBJ		162176	0					
ANR	162691	ArgumentList	EX ( This )		162176	1					
ANR	162692	Argument	EX ( This )		162176	0					
ANR	162693	CallExpression	EX ( This )		162176	0					
ANR	162694	Callee	EX		162176	0					
ANR	162695	Identifier	EX		162176	0					
ANR	162696	ArgumentList	This		162176	1					
ANR	162697	Argument	This		162176	0					
ANR	162698	Identifier	This		162176	0					
ANR	162699	IncDec	++		162176	1					
ANR	162700	IfStatement	if ( ! op_array -> run_time_cache )		162176	5					
ANR	162701	Condition	! op_array -> run_time_cache	2283:5:70883:70907	162176	0	True				
ANR	162702	UnaryOperationExpression	! op_array -> run_time_cache		162176	0					
ANR	162703	UnaryOperator	!		162176	0					
ANR	162704	PtrMemberAccess	op_array -> run_time_cache		162176	1					
ANR	162705	Identifier	op_array		162176	0					
ANR	162706	Identifier	run_time_cache		162176	1					
ANR	162707	CompoundStatement		73:32:2137:2137	162176	1					
ANR	162708	IfStatement	if ( op_array -> function_name )		162176	0					
ANR	162709	Condition	op_array -> function_name	2284:6:70918:70940	162176	0	True				
ANR	162710	PtrMemberAccess	op_array -> function_name		162176	0					
ANR	162711	Identifier	op_array		162176	0					
ANR	162712	Identifier	function_name		162176	1					
ANR	162713	CompoundStatement		74:31:2170:2170	162176	1					
ANR	162714	ExpressionStatement	"op_array -> run_time_cache = zend_arena_alloc ( & CG ( arena ) , op_array -> cache_size )"	2285:3:70948:71025	162176	0	True				
ANR	162715	AssignmentExpression	"op_array -> run_time_cache = zend_arena_alloc ( & CG ( arena ) , op_array -> cache_size )"		162176	0		=			
ANR	162716	PtrMemberAccess	op_array -> run_time_cache		162176	0					
ANR	162717	Identifier	op_array		162176	0					
ANR	162718	Identifier	run_time_cache		162176	1					
ANR	162719	CallExpression	"zend_arena_alloc ( & CG ( arena ) , op_array -> cache_size )"		162176	1					
ANR	162720	Callee	zend_arena_alloc		162176	0					
ANR	162721	Identifier	zend_arena_alloc		162176	0					
ANR	162722	ArgumentList	& CG ( arena )		162176	1					
ANR	162723	Argument	& CG ( arena )		162176	0					
ANR	162724	UnaryOperationExpression	& CG ( arena )		162176	0					
ANR	162725	UnaryOperator	&		162176	0					
ANR	162726	CallExpression	CG ( arena )		162176	1					
ANR	162727	Callee	CG		162176	0					
ANR	162728	Identifier	CG		162176	0					
ANR	162729	ArgumentList	arena		162176	1					
ANR	162730	Argument	arena		162176	0					
ANR	162731	Identifier	arena		162176	0					
ANR	162732	Argument	op_array -> cache_size		162176	1					
ANR	162733	PtrMemberAccess	op_array -> cache_size		162176	0					
ANR	162734	Identifier	op_array		162176	0					
ANR	162735	Identifier	cache_size		162176	1					
ANR	162736	ElseStatement	else		162176	0					
ANR	162737	CompoundStatement		76:9:2263:2263	162176	0					
ANR	162738	ExpressionStatement	op_array -> run_time_cache = emalloc ( op_array -> cache_size )	2287:3:71041:71097	162176	0	True				
ANR	162739	AssignmentExpression	op_array -> run_time_cache = emalloc ( op_array -> cache_size )		162176	0		=			
ANR	162740	PtrMemberAccess	op_array -> run_time_cache		162176	0					
ANR	162741	Identifier	op_array		162176	0					
ANR	162742	Identifier	run_time_cache		162176	1					
ANR	162743	CallExpression	emalloc ( op_array -> cache_size )		162176	1					
ANR	162744	Callee	emalloc		162176	0					
ANR	162745	Identifier	emalloc		162176	0					
ANR	162746	ArgumentList	op_array -> cache_size		162176	1					
ANR	162747	Argument	op_array -> cache_size		162176	0					
ANR	162748	PtrMemberAccess	op_array -> cache_size		162176	0					
ANR	162749	Identifier	op_array		162176	0					
ANR	162750	Identifier	cache_size		162176	1					
ANR	162751	ExpressionStatement	"memset ( op_array -> run_time_cache , 0 , op_array -> cache_size )"	2289:2:71105:71162	162176	1	True				
ANR	162752	CallExpression	"memset ( op_array -> run_time_cache , 0 , op_array -> cache_size )"		162176	0					
ANR	162753	Callee	memset		162176	0					
ANR	162754	Identifier	memset		162176	0					
ANR	162755	ArgumentList	op_array -> run_time_cache		162176	1					
ANR	162756	Argument	op_array -> run_time_cache		162176	0					
ANR	162757	PtrMemberAccess	op_array -> run_time_cache		162176	0					
ANR	162758	Identifier	op_array		162176	0					
ANR	162759	Identifier	run_time_cache		162176	1					
ANR	162760	Argument	0		162176	1					
ANR	162761	PrimaryExpression	0		162176	0					
ANR	162762	Argument	op_array -> cache_size		162176	2					
ANR	162763	PtrMemberAccess	op_array -> cache_size		162176	0					
ANR	162764	Identifier	op_array		162176	0					
ANR	162765	Identifier	cache_size		162176	1					
ANR	162766	ExpressionStatement	EX_LOAD_RUN_TIME_CACHE ( op_array )	2291:1:71168:71200	162176	6	True				
ANR	162767	CallExpression	EX_LOAD_RUN_TIME_CACHE ( op_array )		162176	0					
ANR	162768	Callee	EX_LOAD_RUN_TIME_CACHE		162176	0					
ANR	162769	Identifier	EX_LOAD_RUN_TIME_CACHE		162176	0					
ANR	162770	ArgumentList	op_array		162176	1					
ANR	162771	Argument	op_array		162176	0					
ANR	162772	Identifier	op_array		162176	0					
ANR	162773	ExpressionStatement	EX_LOAD_LITERALS ( op_array )	2292:1:71203:71229	162176	7	True				
ANR	162774	CallExpression	EX_LOAD_LITERALS ( op_array )		162176	0					
ANR	162775	Callee	EX_LOAD_LITERALS		162176	0					
ANR	162776	Identifier	EX_LOAD_LITERALS		162176	0					
ANR	162777	ArgumentList	op_array		162176	1					
ANR	162778	Argument	op_array		162176	0					
ANR	162779	Identifier	op_array		162176	0					
ANR	162780	ExpressionStatement	EG ( current_execute_data ) = execute_data	2294:1:71233:71272	162176	8	True				
ANR	162781	AssignmentExpression	EG ( current_execute_data ) = execute_data		162176	0		=			
ANR	162782	CallExpression	EG ( current_execute_data )		162176	0					
ANR	162783	Callee	EG		162176	0					
ANR	162784	Identifier	EG		162176	0					
ANR	162785	ArgumentList	current_execute_data		162176	1					
ANR	162786	Argument	current_execute_data		162176	0					
ANR	162787	Identifier	current_execute_data		162176	0					
ANR	162788	Identifier	execute_data		162176	1					
ANR	162789	ExpressionStatement	ZEND_VM_INTERRUPT_CHECK ( )	2295:1:71275:71300	162176	9	True				
ANR	162790	CallExpression	ZEND_VM_INTERRUPT_CHECK ( )		162176	0					
ANR	162791	Callee	ZEND_VM_INTERRUPT_CHECK		162176	0					
ANR	162792	Identifier	ZEND_VM_INTERRUPT_CHECK		162176	0					
ANR	162793	ArgumentList			162176	1					
ANR	162794	ReturnType	static zend_always_inline void		162176	1					
ANR	162795	Identifier	i_init_execute_data		162176	2					
ANR	162796	ParameterList	"zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value"		162176	3					
ANR	162797	Parameter	zend_execute_data * execute_data	2210:51:68684:68714	162176	0	True				
ANR	162798	ParameterType	zend_execute_data *		162176	0					
ANR	162799	Identifier	execute_data		162176	1					
ANR	162800	Parameter	zend_op_array * op_array	2210:84:68717:68739	162176	1	True				
ANR	162801	ParameterType	zend_op_array *		162176	0					
ANR	162802	Identifier	op_array		162176	1					
ANR	162803	Parameter	zval * return_value	2210:109:68742:68759	162176	2	True				
ANR	162804	ParameterType	zval *		162176	0					
ANR	162805	Identifier	return_value		162176	1					
ANR	162806	CFGEntryNode	ENTRY		162176		True				
ANR	162807	CFGExitNode	EXIT		162176		True				
ANR	162808	Symbol	return_value		162176						
ANR	162809	Symbol	dst		162176						
ANR	162810	Symbol	current_execute_data		162176						
ANR	162811	Symbol	op_array -> last_var		162176						
ANR	162812	Symbol	zend_hash_str_add		162176						
ANR	162813	Symbol	arena		162176						
ANR	162814	Symbol	IS_TYPE_REFCOUNTED		162176						
ANR	162815	Symbol	execute_data		162176						
ANR	162816	Symbol	first_extra_arg		162176						
ANR	162817	Symbol	ZEND_ACC_HAS_TYPE_HINTS		162176						
ANR	162818	Symbol	& CG		162176						
ANR	162819	Symbol	UNEXPECTED		162176						
ANR	162820	Symbol	op_array -> run_time_cache		162176						
ANR	162821	Symbol	Z_OBJ		162176						
ANR	162822	Symbol	emalloc		162176						
ANR	162823	Symbol	opline		162176						
ANR	162824	Symbol	op_array -> opcodes		162176						
ANR	162825	Symbol	op_array -> fn_flags		162176						
ANR	162826	Symbol	num_args		162176						
ANR	162827	Symbol	This		162176						
ANR	162828	Symbol	op_array -> num_args		162176						
ANR	162829	Symbol	end		162176						
ANR	162830	Symbol	GC_REFCOUNT		162176						
ANR	162831	Symbol	op_array -> T		162176						
ANR	162832	Symbol	EG		162176						
ANR	162833	Symbol	NULL		162176						
ANR	162834	Symbol	zend_arena_alloc		162176						
ANR	162835	Symbol	src		162176						
ANR	162836	Symbol	op_array -> this_var		162176						
ANR	162837	Symbol	var		162176						
ANR	162838	Symbol	type_flags		162176						
ANR	162839	Symbol	Z_TYPE_FLAGS_SHIFT		162176						
ANR	162840	Symbol	symbol_table		162176						
ANR	162841	Symbol	* op_array		162176						
ANR	162842	Symbol	Z_TYPE_INFO_P		162176						
ANR	162843	Symbol	op_array -> function_name		162176						
ANR	162844	Symbol	call		162176						
ANR	162845	Symbol	EX		162176						
ANR	162846	Symbol	func		162176						
ANR	162847	Symbol	EX_NUM_ARGS		162176						
ANR	162848	Symbol	EX_VAR_NUM		162176						
ANR	162849	Symbol	EX_VAR		162176						
ANR	162850	Symbol	op_array -> cache_size		162176						
ANR	162851	Symbol	& EX		162176						
ANR	162852	Symbol	EXPECTED		162176						
ANR	162853	Symbol	op_array		162176						
ANR	162854	Function	zend_create_generator_execute_data	2299:0:71315:73232							
ANR	162855	FunctionDef	"zend_create_generator_execute_data (zend_execute_data * call , zend_op_array * op_array , zval * return_value)"		162854	0					
ANR	162856	CompoundStatement		2300:0:71458:73232	162854	0					
ANR	162857	IdentifierDeclStatement	zend_execute_data * execute_data ;	2310:1:71957:71988	162854	0	True				
ANR	162858	IdentifierDecl	* execute_data		162854	0					
ANR	162859	IdentifierDeclType	zend_execute_data *		162854	0					
ANR	162860	Identifier	execute_data		162854	1					
ANR	162861	IdentifierDeclStatement	uint32_t num_args = ZEND_CALL_NUM_ARGS ( call ) ;	2311:1:71991:72035	162854	1	True				
ANR	162862	IdentifierDecl	num_args = ZEND_CALL_NUM_ARGS ( call )		162854	0					
ANR	162863	IdentifierDeclType	uint32_t		162854	0					
ANR	162864	Identifier	num_args		162854	1					
ANR	162865	AssignmentExpression	num_args = ZEND_CALL_NUM_ARGS ( call )		162854	2		=			
ANR	162866	Identifier	num_args		162854	0					
ANR	162867	CallExpression	ZEND_CALL_NUM_ARGS ( call )		162854	1					
ANR	162868	Callee	ZEND_CALL_NUM_ARGS		162854	0					
ANR	162869	Identifier	ZEND_CALL_NUM_ARGS		162854	0					
ANR	162870	ArgumentList	call		162854	1					
ANR	162871	Argument	call		162854	0					
ANR	162872	Identifier	call		162854	0					
ANR	162873	IdentifierDeclStatement	"size_t stack_size = ( ZEND_CALL_FRAME_SLOT + MAX ( op_array -> last_var + op_array -> T , num_args ) ) * sizeof ( zval ) ;"	2312:1:72038:72145	162854	2	True				
ANR	162874	IdentifierDecl	"stack_size = ( ZEND_CALL_FRAME_SLOT + MAX ( op_array -> last_var + op_array -> T , num_args ) ) * sizeof ( zval )"		162854	0					
ANR	162875	IdentifierDeclType	size_t		162854	0					
ANR	162876	Identifier	stack_size		162854	1					
ANR	162877	AssignmentExpression	"stack_size = ( ZEND_CALL_FRAME_SLOT + MAX ( op_array -> last_var + op_array -> T , num_args ) ) * sizeof ( zval )"		162854	2		=			
ANR	162878	Identifier	stack_size		162854	0					
ANR	162879	MultiplicativeExpression	"( ZEND_CALL_FRAME_SLOT + MAX ( op_array -> last_var + op_array -> T , num_args ) ) * sizeof ( zval )"		162854	1		*			
ANR	162880	AdditiveExpression	"ZEND_CALL_FRAME_SLOT + MAX ( op_array -> last_var + op_array -> T , num_args )"		162854	0		+			
ANR	162881	Identifier	ZEND_CALL_FRAME_SLOT		162854	0					
ANR	162882	CallExpression	"MAX ( op_array -> last_var + op_array -> T , num_args )"		162854	1					
ANR	162883	Callee	MAX		162854	0					
ANR	162884	Identifier	MAX		162854	0					
ANR	162885	ArgumentList	op_array -> last_var + op_array -> T		162854	1					
ANR	162886	Argument	op_array -> last_var + op_array -> T		162854	0					
ANR	162887	AdditiveExpression	op_array -> last_var + op_array -> T		162854	0		+			
ANR	162888	PtrMemberAccess	op_array -> last_var		162854	0					
ANR	162889	Identifier	op_array		162854	0					
ANR	162890	Identifier	last_var		162854	1					
ANR	162891	PtrMemberAccess	op_array -> T		162854	1					
ANR	162892	Identifier	op_array		162854	0					
ANR	162893	Identifier	T		162854	1					
ANR	162894	Argument	num_args		162854	1					
ANR	162895	Identifier	num_args		162854	0					
ANR	162896	SizeofExpression	sizeof ( zval )		162854	1					
ANR	162897	Sizeof	sizeof		162854	0					
ANR	162898	SizeofOperand	zval		162854	1					
ANR	162899	IdentifierDeclStatement	uint32_t call_info ;	2313:1:72148:72166	162854	3	True				
ANR	162900	IdentifierDecl	call_info		162854	0					
ANR	162901	IdentifierDeclType	uint32_t		162854	0					
ANR	162902	Identifier	call_info		162854	1					
ANR	162903	ExpressionStatement	"EG ( vm_stack ) = zend_vm_stack_new_page ( EXPECTED ( stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 1 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 1 , stack_size ) , NULL )"	2315:1:72170:72358	162854	4	True				
ANR	162904	AssignmentExpression	"EG ( vm_stack ) = zend_vm_stack_new_page ( EXPECTED ( stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 1 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 1 , stack_size ) , NULL )"		162854	0		=			
ANR	162905	CallExpression	EG ( vm_stack )		162854	0					
ANR	162906	Callee	EG		162854	0					
ANR	162907	Identifier	EG		162854	0					
ANR	162908	ArgumentList	vm_stack		162854	1					
ANR	162909	Argument	vm_stack		162854	0					
ANR	162910	Identifier	vm_stack		162854	0					
ANR	162911	CallExpression	"zend_vm_stack_new_page ( EXPECTED ( stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 1 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 1 , stack_size ) , NULL )"		162854	1					
ANR	162912	Callee	zend_vm_stack_new_page		162854	0					
ANR	162913	Identifier	zend_vm_stack_new_page		162854	0					
ANR	162914	ArgumentList	"EXPECTED ( stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 1 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 1 , stack_size )"		162854	1					
ANR	162915	Argument	"EXPECTED ( stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 1 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 1 , stack_size )"		162854	0					
ANR	162916	ConditionalExpression	"EXPECTED ( stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 ) ) ? ZEND_VM_STACK_PAGE_SIZE ( 1 ) : ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 1 , stack_size )"		162854	0					
ANR	162917	Condition	EXPECTED ( stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 ) )		162854	0					
ANR	162918	CallExpression	EXPECTED ( stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 ) )		162854	0					
ANR	162919	Callee	EXPECTED		162854	0					
ANR	162920	Identifier	EXPECTED		162854	0					
ANR	162921	ArgumentList	stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 )		162854	1					
ANR	162922	Argument	stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 )		162854	0					
ANR	162923	RelationalExpression	stack_size < ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 )		162854	0		<			
ANR	162924	Identifier	stack_size		162854	0					
ANR	162925	CallExpression	ZEND_VM_STACK_FREE_PAGE_SIZE ( 1 )		162854	1					
ANR	162926	Callee	ZEND_VM_STACK_FREE_PAGE_SIZE		162854	0					
ANR	162927	Identifier	ZEND_VM_STACK_FREE_PAGE_SIZE		162854	0					
ANR	162928	ArgumentList	1		162854	1					
ANR	162929	Argument	1		162854	0					
ANR	162930	PrimaryExpression	1		162854	0					
ANR	162931	CallExpression	ZEND_VM_STACK_PAGE_SIZE ( 1 )		162854	1					
ANR	162932	Callee	ZEND_VM_STACK_PAGE_SIZE		162854	0					
ANR	162933	Identifier	ZEND_VM_STACK_PAGE_SIZE		162854	0					
ANR	162934	ArgumentList	1		162854	1					
ANR	162935	Argument	1		162854	0					
ANR	162936	PrimaryExpression	1		162854	0					
ANR	162937	CallExpression	"ZEND_VM_STACK_PAGE_ALIGNED_SIZE ( 1 , stack_size )"		162854	2					
ANR	162938	Callee	ZEND_VM_STACK_PAGE_ALIGNED_SIZE		162854	0					
ANR	162939	Identifier	ZEND_VM_STACK_PAGE_ALIGNED_SIZE		162854	0					
ANR	162940	ArgumentList	1		162854	1					
ANR	162941	Argument	1		162854	0					
ANR	162942	PrimaryExpression	1		162854	0					
ANR	162943	Argument	stack_size		162854	1					
ANR	162944	Identifier	stack_size		162854	0					
ANR	162945	Argument	NULL		162854	1					
ANR	162946	Identifier	NULL		162854	0					
ANR	162947	ExpressionStatement	EG ( vm_stack_top ) = EG ( vm_stack ) -> top	2320:1:72361:72397	162854	5	True				
ANR	162948	AssignmentExpression	EG ( vm_stack_top ) = EG ( vm_stack ) -> top		162854	0		=			
ANR	162949	CallExpression	EG ( vm_stack_top )		162854	0					
ANR	162950	Callee	EG		162854	0					
ANR	162951	Identifier	EG		162854	0					
ANR	162952	ArgumentList	vm_stack_top		162854	1					
ANR	162953	Argument	vm_stack_top		162854	0					
ANR	162954	Identifier	vm_stack_top		162854	0					
ANR	162955	PtrMemberAccess	EG ( vm_stack ) -> top		162854	1					
ANR	162956	CallExpression	EG ( vm_stack )		162854	0					
ANR	162957	Callee	EG		162854	0					
ANR	162958	Identifier	EG		162854	0					
ANR	162959	ArgumentList	vm_stack		162854	1					
ANR	162960	Argument	vm_stack		162854	0					
ANR	162961	Identifier	vm_stack		162854	0					
ANR	162962	Identifier	top		162854	1					
ANR	162963	ExpressionStatement	EG ( vm_stack_end ) = EG ( vm_stack ) -> end	2321:1:72400:72436	162854	6	True				
ANR	162964	AssignmentExpression	EG ( vm_stack_end ) = EG ( vm_stack ) -> end		162854	0		=			
ANR	162965	CallExpression	EG ( vm_stack_end )		162854	0					
ANR	162966	Callee	EG		162854	0					
ANR	162967	Identifier	EG		162854	0					
ANR	162968	ArgumentList	vm_stack_end		162854	1					
ANR	162969	Argument	vm_stack_end		162854	0					
ANR	162970	Identifier	vm_stack_end		162854	0					
ANR	162971	PtrMemberAccess	EG ( vm_stack ) -> end		162854	1					
ANR	162972	CallExpression	EG ( vm_stack )		162854	0					
ANR	162973	Callee	EG		162854	0					
ANR	162974	Identifier	EG		162854	0					
ANR	162975	ArgumentList	vm_stack		162854	1					
ANR	162976	Argument	vm_stack		162854	0					
ANR	162977	Identifier	vm_stack		162854	0					
ANR	162978	Identifier	end		162854	1					
ANR	162979	ExpressionStatement	call_info = ZEND_CALL_TOP_FUNCTION | ZEND_CALL_ALLOCATED | ( ZEND_CALL_INFO ( call ) & ( ZEND_CALL_CLOSURE | ZEND_CALL_RELEASE_THIS ) )	2323:1:72440:72566	162854	7	True				
ANR	162980	AssignmentExpression	call_info = ZEND_CALL_TOP_FUNCTION | ZEND_CALL_ALLOCATED | ( ZEND_CALL_INFO ( call ) & ( ZEND_CALL_CLOSURE | ZEND_CALL_RELEASE_THIS ) )		162854	0		=			
ANR	162981	Identifier	call_info		162854	0					
ANR	162982	InclusiveOrExpression	ZEND_CALL_TOP_FUNCTION | ZEND_CALL_ALLOCATED | ( ZEND_CALL_INFO ( call ) & ( ZEND_CALL_CLOSURE | ZEND_CALL_RELEASE_THIS ) )		162854	1		|			
ANR	162983	Identifier	ZEND_CALL_TOP_FUNCTION		162854	0					
ANR	162984	InclusiveOrExpression	ZEND_CALL_ALLOCATED | ( ZEND_CALL_INFO ( call ) & ( ZEND_CALL_CLOSURE | ZEND_CALL_RELEASE_THIS ) )		162854	1		|			
ANR	162985	Identifier	ZEND_CALL_ALLOCATED		162854	0					
ANR	162986	BitAndExpression	ZEND_CALL_INFO ( call ) & ( ZEND_CALL_CLOSURE | ZEND_CALL_RELEASE_THIS )		162854	1		&			
ANR	162987	CallExpression	ZEND_CALL_INFO ( call )		162854	0					
ANR	162988	Callee	ZEND_CALL_INFO		162854	0					
ANR	162989	Identifier	ZEND_CALL_INFO		162854	0					
ANR	162990	ArgumentList	call		162854	1					
ANR	162991	Argument	call		162854	0					
ANR	162992	Identifier	call		162854	0					
ANR	162993	InclusiveOrExpression	ZEND_CALL_CLOSURE | ZEND_CALL_RELEASE_THIS		162854	1		|			
ANR	162994	Identifier	ZEND_CALL_CLOSURE		162854	0					
ANR	162995	Identifier	ZEND_CALL_RELEASE_THIS		162854	1					
ANR	162996	IfStatement	if ( Z_OBJ ( call -> This ) )		162854	8					
ANR	162997	Condition	Z_OBJ ( call -> This )	2324:5:72573:72589	162854	0	True				
ANR	162998	CallExpression	Z_OBJ ( call -> This )		162854	0					
ANR	162999	Callee	Z_OBJ		162854	0					
ANR	163000	Identifier	Z_OBJ		162854	0					
ANR	163001	ArgumentList	call -> This		162854	1					
ANR	163002	Argument	call -> This		162854	0					
ANR	163003	PtrMemberAccess	call -> This		162854	0					
ANR	163004	Identifier	call		162854	0					
ANR	163005	Identifier	This		162854	1					
ANR	163006	CompoundStatement		25:24:1133:1133	162854	1					
ANR	163007	ExpressionStatement	call_info |= ZEND_CALL_RELEASE_THIS	2325:2:72596:72631	162854	0	True				
ANR	163008	AssignmentExpression	call_info |= ZEND_CALL_RELEASE_THIS		162854	0		|=			
ANR	163009	Identifier	call_info		162854	0					
ANR	163010	Identifier	ZEND_CALL_RELEASE_THIS		162854	1					
ANR	163011	ExpressionStatement	"execute_data = zend_vm_stack_push_call_frame ( call_info , ( zend_function * ) op_array , num_args , call -> called_scope , Z_OBJ ( call -> This ) )"	2327:1:72637:72778	162854	9	True				
ANR	163012	AssignmentExpression	"execute_data = zend_vm_stack_push_call_frame ( call_info , ( zend_function * ) op_array , num_args , call -> called_scope , Z_OBJ ( call -> This ) )"		162854	0		=			
ANR	163013	Identifier	execute_data		162854	0					
ANR	163014	CallExpression	"zend_vm_stack_push_call_frame ( call_info , ( zend_function * ) op_array , num_args , call -> called_scope , Z_OBJ ( call -> This ) )"		162854	1					
ANR	163015	Callee	zend_vm_stack_push_call_frame		162854	0					
ANR	163016	Identifier	zend_vm_stack_push_call_frame		162854	0					
ANR	163017	ArgumentList	call_info		162854	1					
ANR	163018	Argument	call_info		162854	0					
ANR	163019	Identifier	call_info		162854	0					
ANR	163020	Argument	( zend_function * ) op_array		162854	1					
ANR	163021	CastExpression	( zend_function * ) op_array		162854	0					
ANR	163022	CastTarget	zend_function *		162854	0					
ANR	163023	Identifier	op_array		162854	1					
ANR	163024	Argument	num_args		162854	2					
ANR	163025	Identifier	num_args		162854	0					
ANR	163026	Argument	call -> called_scope		162854	3					
ANR	163027	PtrMemberAccess	call -> called_scope		162854	0					
ANR	163028	Identifier	call		162854	0					
ANR	163029	Identifier	called_scope		162854	1					
ANR	163030	Argument	Z_OBJ ( call -> This )		162854	4					
ANR	163031	CallExpression	Z_OBJ ( call -> This )		162854	0					
ANR	163032	Callee	Z_OBJ		162854	0					
ANR	163033	Identifier	Z_OBJ		162854	0					
ANR	163034	ArgumentList	call -> This		162854	1					
ANR	163035	Argument	call -> This		162854	0					
ANR	163036	PtrMemberAccess	call -> This		162854	0					
ANR	163037	Identifier	call		162854	0					
ANR	163038	Identifier	This		162854	1					
ANR	163039	ExpressionStatement	EX ( prev_execute_data ) = NULL	2333:1:72781:72809	162854	10	True				
ANR	163040	AssignmentExpression	EX ( prev_execute_data ) = NULL		162854	0		=			
ANR	163041	CallExpression	EX ( prev_execute_data )		162854	0					
ANR	163042	Callee	EX		162854	0					
ANR	163043	Identifier	EX		162854	0					
ANR	163044	ArgumentList	prev_execute_data		162854	1					
ANR	163045	Argument	prev_execute_data		162854	0					
ANR	163046	Identifier	prev_execute_data		162854	0					
ANR	163047	Identifier	NULL		162854	1					
ANR	163048	ExpressionStatement	EX_NUM_ARGS ( ) = num_args	2334:1:72812:72836	162854	11	True				
ANR	163049	AssignmentExpression	EX_NUM_ARGS ( ) = num_args		162854	0		=			
ANR	163050	CallExpression	EX_NUM_ARGS ( )		162854	0					
ANR	163051	Callee	EX_NUM_ARGS		162854	0					
ANR	163052	Identifier	EX_NUM_ARGS		162854	0					
ANR	163053	ArgumentList			162854	1					
ANR	163054	Identifier	num_args		162854	1					
ANR	163055	IfStatement	if ( num_args > 0 )		162854	12					
ANR	163056	Condition	num_args > 0	2337:5:72866:72877	162854	0	True				
ANR	163057	RelationalExpression	num_args > 0		162854	0		>			
ANR	163058	Identifier	num_args		162854	0					
ANR	163059	PrimaryExpression	0		162854	1					
ANR	163060	CompoundStatement		41:2:1517:1547	162854	1					
ANR	163061	IdentifierDeclStatement	"zval * arg_src = ZEND_CALL_ARG ( call , 1 ) ;"	2338:2:72884:72922	162854	0	True				
ANR	163062	IdentifierDecl	"* arg_src = ZEND_CALL_ARG ( call , 1 )"		162854	0					
ANR	163063	IdentifierDeclType	zval *		162854	0					
ANR	163064	Identifier	arg_src		162854	1					
ANR	163065	AssignmentExpression	"* arg_src = ZEND_CALL_ARG ( call , 1 )"		162854	2		=			
ANR	163066	Identifier	arg_src		162854	0					
ANR	163067	CallExpression	"ZEND_CALL_ARG ( call , 1 )"		162854	1					
ANR	163068	Callee	ZEND_CALL_ARG		162854	0					
ANR	163069	Identifier	ZEND_CALL_ARG		162854	0					
ANR	163070	ArgumentList	call		162854	1					
ANR	163071	Argument	call		162854	0					
ANR	163072	Identifier	call		162854	0					
ANR	163073	Argument	1		162854	1					
ANR	163074	PrimaryExpression	1		162854	0					
ANR	163075	IdentifierDeclStatement	"zval * arg_dst = ZEND_CALL_ARG ( execute_data , 1 ) ;"	2339:2:72926:72972	162854	1	True				
ANR	163076	IdentifierDecl	"* arg_dst = ZEND_CALL_ARG ( execute_data , 1 )"		162854	0					
ANR	163077	IdentifierDeclType	zval *		162854	0					
ANR	163078	Identifier	arg_dst		162854	1					
ANR	163079	AssignmentExpression	"* arg_dst = ZEND_CALL_ARG ( execute_data , 1 )"		162854	2		=			
ANR	163080	Identifier	arg_dst		162854	0					
ANR	163081	CallExpression	"ZEND_CALL_ARG ( execute_data , 1 )"		162854	1					
ANR	163082	Callee	ZEND_CALL_ARG		162854	0					
ANR	163083	Identifier	ZEND_CALL_ARG		162854	0					
ANR	163084	ArgumentList	execute_data		162854	1					
ANR	163085	Argument	execute_data		162854	0					
ANR	163086	Identifier	execute_data		162854	0					
ANR	163087	Argument	1		162854	1					
ANR	163088	PrimaryExpression	1		162854	0					
ANR	163089	IdentifierDeclStatement	zval * end = arg_src + num_args ;	2340:2:72976:73006	162854	2	True				
ANR	163090	IdentifierDecl	* end = arg_src + num_args		162854	0					
ANR	163091	IdentifierDeclType	zval *		162854	0					
ANR	163092	Identifier	end		162854	1					
ANR	163093	AssignmentExpression	* end = arg_src + num_args		162854	2		=			
ANR	163094	Identifier	end		162854	0					
ANR	163095	AdditiveExpression	arg_src + num_args		162854	1		+			
ANR	163096	Identifier	arg_src		162854	0					
ANR	163097	Identifier	num_args		162854	1					
ANR	163098	DoStatement	do		162854	3					
ANR	163099	CompoundStatement		43:5:1555:1555	162854	0					
ANR	163100	ExpressionStatement	"ZVAL_COPY_VALUE ( arg_dst , arg_src )"	2343:3:73019:73052	162854	0	True				
ANR	163101	CallExpression	"ZVAL_COPY_VALUE ( arg_dst , arg_src )"		162854	0					
ANR	163102	Callee	ZVAL_COPY_VALUE		162854	0					
ANR	163103	Identifier	ZVAL_COPY_VALUE		162854	0					
ANR	163104	ArgumentList	arg_dst		162854	1					
ANR	163105	Argument	arg_dst		162854	0					
ANR	163106	Identifier	arg_dst		162854	0					
ANR	163107	Argument	arg_src		162854	1					
ANR	163108	Identifier	arg_src		162854	0					
ANR	163109	ExpressionStatement	arg_src ++	2344:3:73057:73066	162854	1	True				
ANR	163110	PostIncDecOperationExpression	arg_src ++		162854	0					
ANR	163111	Identifier	arg_src		162854	0					
ANR	163112	IncDec	++		162854	1					
ANR	163113	ExpressionStatement	arg_dst ++	2345:3:73071:73080	162854	2	True				
ANR	163114	PostIncDecOperationExpression	arg_dst ++		162854	0					
ANR	163115	Identifier	arg_dst		162854	0					
ANR	163116	IncDec	++		162854	1					
ANR	163117	Condition	arg_src != end	2346:11:73093:73106	162854	1	True				
ANR	163118	EqualityExpression	arg_src != end		162854	0		!=			
ANR	163119	Identifier	arg_src		162854	0					
ANR	163120	Identifier	end		162854	1					
ANR	163121	ExpressionStatement	EX ( symbol_table ) = NULL	2349:1:73115:73138	162854	13	True				
ANR	163122	AssignmentExpression	EX ( symbol_table ) = NULL		162854	0		=			
ANR	163123	CallExpression	EX ( symbol_table )		162854	0					
ANR	163124	Callee	EX		162854	0					
ANR	163125	Identifier	EX		162854	0					
ANR	163126	ArgumentList	symbol_table		162854	1					
ANR	163127	Argument	symbol_table		162854	0					
ANR	163128	Identifier	symbol_table		162854	0					
ANR	163129	Identifier	NULL		162854	1					
ANR	163130	ExpressionStatement	"i_init_func_execute_data ( execute_data , op_array , return_value , 1 )"	2351:1:73142:73207	162854	14	True				
ANR	163131	CallExpression	"i_init_func_execute_data ( execute_data , op_array , return_value , 1 )"		162854	0					
ANR	163132	Callee	i_init_func_execute_data		162854	0					
ANR	163133	Identifier	i_init_func_execute_data		162854	0					
ANR	163134	ArgumentList	execute_data		162854	1					
ANR	163135	Argument	execute_data		162854	0					
ANR	163136	Identifier	execute_data		162854	0					
ANR	163137	Argument	op_array		162854	1					
ANR	163138	Identifier	op_array		162854	0					
ANR	163139	Argument	return_value		162854	2					
ANR	163140	Identifier	return_value		162854	0					
ANR	163141	Argument	1		162854	3					
ANR	163142	PrimaryExpression	1		162854	0					
ANR	163143	ReturnStatement	return execute_data ;	2353:1:73211:73230	162854	15	True				
ANR	163144	Identifier	execute_data		162854	0					
ANR	163145	ReturnType	ZEND_API zend_execute_data *		162854	1					
ANR	163146	Identifier	zend_create_generator_execute_data		162854	2					
ANR	163147	ParameterList	"zend_execute_data * call , zend_op_array * op_array , zval * return_value"		162854	3					
ANR	163148	Parameter	zend_execute_data * call	2299:63:71378:71400	162854	0	True				
ANR	163149	ParameterType	zend_execute_data *		162854	0					
ANR	163150	Identifier	call		162854	1					
ANR	163151	Parameter	zend_op_array * op_array	2299:88:71403:71425	162854	1	True				
ANR	163152	ParameterType	zend_op_array *		162854	0					
ANR	163153	Identifier	op_array		162854	1					
ANR	163154	Parameter	zval * return_value	2299:113:71428:71445	162854	2	True				
ANR	163155	ParameterType	zval *		162854	0					
ANR	163156	Identifier	return_value		162854	1					
ANR	163157	CFGEntryNode	ENTRY		162854		True				
ANR	163158	CFGExitNode	EXIT		162854		True				
ANR	163159	Symbol	call -> This		162854						
ANR	163160	Symbol	arg_dst		162854						
ANR	163161	Symbol	return_value		162854						
ANR	163162	Symbol	zend_vm_stack_push_call_frame		162854						
ANR	163163	Symbol	ZEND_CALL_CLOSURE		162854						
ANR	163164	Symbol	MAX		162854						
ANR	163165	Symbol	ZEND_CALL_ARG		162854						
ANR	163166	Symbol	call -> called_scope		162854						
ANR	163167	Symbol	op_array -> last_var		162854						
ANR	163168	Symbol	* call		162854						
ANR	163169	Symbol	* EG		162854						
ANR	163170	Symbol	ZEND_VM_STACK_PAGE_ALIGNED_SIZE		162854						
ANR	163171	Symbol	execute_data		162854						
ANR	163172	Symbol	call_info		162854						
ANR	163173	Symbol	ZEND_VM_STACK_PAGE_SIZE		162854						
ANR	163174	Symbol	vm_stack_top		162854						
ANR	163175	Symbol	Z_OBJ		162854						
ANR	163176	Symbol	EG ( vm_stack ) -> end		162854						
ANR	163177	Symbol	num_args		162854						
ANR	163178	Symbol	EG ( vm_stack ) -> top		162854						
ANR	163179	Symbol	ZEND_CALL_NUM_ARGS		162854						
ANR	163180	Symbol	vm_stack_end		162854						
ANR	163181	Symbol	end		162854						
ANR	163182	Symbol	ZEND_CALL_FRAME_SLOT		162854						
ANR	163183	Symbol	zend_vm_stack_new_page		162854						
ANR	163184	Symbol	ZEND_CALL_RELEASE_THIS		162854						
ANR	163185	Symbol	op_array -> T		162854						
ANR	163186	Symbol	EG		162854						
ANR	163187	Symbol	NULL		162854						
ANR	163188	Symbol	arg_src		162854						
ANR	163189	Symbol	symbol_table		162854						
ANR	163190	Symbol	prev_execute_data		162854						
ANR	163191	Symbol	ZEND_CALL_ALLOCATED		162854						
ANR	163192	Symbol	* op_array		162854						
ANR	163193	Symbol	ZEND_VM_STACK_FREE_PAGE_SIZE		162854						
ANR	163194	Symbol	call		162854						
ANR	163195	Symbol	ZEND_CALL_TOP_FUNCTION		162854						
ANR	163196	Symbol	EX		162854						
ANR	163197	Symbol	EX_NUM_ARGS		162854						
ANR	163198	Symbol	ZEND_CALL_INFO		162854						
ANR	163199	Symbol	vm_stack		162854						
ANR	163200	Symbol	stack_size		162854						
ANR	163201	Symbol	EXPECTED		162854						
ANR	163202	Symbol	op_array		162854						
ANR	163203	Function	zend_init_execute_data	2357:0:73245:73483							
ANR	163204	FunctionDef	"zend_init_execute_data (zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value)"		163203	0					
ANR	163205	CompoundStatement		2358:0:73370:73483	163203	0					
ANR	163206	ExpressionStatement	EX ( prev_execute_data ) = EG ( current_execute_data )	2359:1:73373:73421	163203	0	True				
ANR	163207	AssignmentExpression	EX ( prev_execute_data ) = EG ( current_execute_data )		163203	0		=			
ANR	163208	CallExpression	EX ( prev_execute_data )		163203	0					
ANR	163209	Callee	EX		163203	0					
ANR	163210	Identifier	EX		163203	0					
ANR	163211	ArgumentList	prev_execute_data		163203	1					
ANR	163212	Argument	prev_execute_data		163203	0					
ANR	163213	Identifier	prev_execute_data		163203	0					
ANR	163214	CallExpression	EG ( current_execute_data )		163203	1					
ANR	163215	Callee	EG		163203	0					
ANR	163216	Identifier	EG		163203	0					
ANR	163217	ArgumentList	current_execute_data		163203	1					
ANR	163218	Argument	current_execute_data		163203	0					
ANR	163219	Identifier	current_execute_data		163203	0					
ANR	163220	ExpressionStatement	"i_init_execute_data ( execute_data , op_array , return_value )"	2360:1:73424:73481	163203	1	True				
ANR	163221	CallExpression	"i_init_execute_data ( execute_data , op_array , return_value )"		163203	0					
ANR	163222	Callee	i_init_execute_data		163203	0					
ANR	163223	Identifier	i_init_execute_data		163203	0					
ANR	163224	ArgumentList	execute_data		163203	1					
ANR	163225	Argument	execute_data		163203	0					
ANR	163226	Identifier	execute_data		163203	0					
ANR	163227	Argument	op_array		163203	1					
ANR	163228	Identifier	op_array		163203	0					
ANR	163229	Argument	return_value		163203	2					
ANR	163230	Identifier	return_value		163203	0					
ANR	163231	ReturnType	ZEND_API void		163203	1					
ANR	163232	Identifier	zend_init_execute_data		163203	2					
ANR	163233	ParameterList	"zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value"		163203	3					
ANR	163234	Parameter	zend_execute_data * execute_data	2357:37:73282:73312	163203	0	True				
ANR	163235	ParameterType	zend_execute_data *		163203	0					
ANR	163236	Identifier	execute_data		163203	1					
ANR	163237	Parameter	zend_op_array * op_array	2357:70:73315:73337	163203	1	True				
ANR	163238	ParameterType	zend_op_array *		163203	0					
ANR	163239	Identifier	op_array		163203	1					
ANR	163240	Parameter	zval * return_value	2357:95:73340:73357	163203	2	True				
ANR	163241	ParameterType	zval *		163203	0					
ANR	163242	Identifier	return_value		163203	1					
ANR	163243	CFGEntryNode	ENTRY		163203		True				
ANR	163244	CFGExitNode	EXIT		163203		True				
ANR	163245	Symbol	return_value		163203						
ANR	163246	Symbol	EG		163203						
ANR	163247	Symbol	EX		163203						
ANR	163248	Symbol	current_execute_data		163203						
ANR	163249	Symbol	prev_execute_data		163203						
ANR	163250	Symbol	execute_data		163203						
ANR	163251	Symbol	op_array		163203						
ANR	163252	Function	zend_is_by_ref_func_arg_fetch	2364:0:73496:73744							
ANR	163253	FunctionDef	"zend_is_by_ref_func_arg_fetch (const zend_op * opline , zend_execute_data * call)"		163252	0					
ANR	163254	CompoundStatement		2365:0:73620:73744	163252	0					
ANR	163255	IdentifierDeclStatement	uint32_t arg_num = opline -> extended_value & ZEND_FETCH_ARG_MASK ;	2366:1:73623:73686	163252	0	True				
ANR	163256	IdentifierDecl	arg_num = opline -> extended_value & ZEND_FETCH_ARG_MASK		163252	0					
ANR	163257	IdentifierDeclType	uint32_t		163252	0					
ANR	163258	Identifier	arg_num		163252	1					
ANR	163259	AssignmentExpression	arg_num = opline -> extended_value & ZEND_FETCH_ARG_MASK		163252	2		=			
ANR	163260	Identifier	arg_num		163252	0					
ANR	163261	BitAndExpression	opline -> extended_value & ZEND_FETCH_ARG_MASK		163252	1		&			
ANR	163262	PtrMemberAccess	opline -> extended_value		163252	0					
ANR	163263	Identifier	opline		163252	0					
ANR	163264	Identifier	extended_value		163252	1					
ANR	163265	Identifier	ZEND_FETCH_ARG_MASK		163252	1					
ANR	163266	ReturnStatement	"return ARG_SHOULD_BE_SENT_BY_REF ( call -> func , arg_num ) ;"	2367:1:73689:73742	163252	1	True				
ANR	163267	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( call -> func , arg_num )"		163252	0					
ANR	163268	Callee	ARG_SHOULD_BE_SENT_BY_REF		163252	0					
ANR	163269	Identifier	ARG_SHOULD_BE_SENT_BY_REF		163252	0					
ANR	163270	ArgumentList	call -> func		163252	1					
ANR	163271	Argument	call -> func		163252	0					
ANR	163272	PtrMemberAccess	call -> func		163252	0					
ANR	163273	Identifier	call		163252	0					
ANR	163274	Identifier	func		163252	1					
ANR	163275	Argument	arg_num		163252	1					
ANR	163276	Identifier	arg_num		163252	0					
ANR	163277	ReturnType	static zend_always_inline zend_bool		163252	1					
ANR	163278	Identifier	zend_is_by_ref_func_arg_fetch		163252	2					
ANR	163279	ParameterList	"const zend_op * opline , zend_execute_data * call"		163252	3					
ANR	163280	Parameter	const zend_op * opline	2364:66:73562:73582	163252	0	True				
ANR	163281	ParameterType	const zend_op *		163252	0					
ANR	163282	Identifier	opline		163252	1					
ANR	163283	Parameter	zend_execute_data * call	2364:89:73585:73607	163252	1	True				
ANR	163284	ParameterType	zend_execute_data *		163252	0					
ANR	163285	Identifier	call		163252	1					
ANR	163286	CFGEntryNode	ENTRY		163252		True				
ANR	163287	CFGExitNode	EXIT		163252		True				
ANR	163288	Symbol	call		163252						
ANR	163289	Symbol	arg_num		163252						
ANR	163290	Symbol	ARG_SHOULD_BE_SENT_BY_REF		163252						
ANR	163291	Symbol	opline		163252						
ANR	163292	Symbol	call -> func		163252						
ANR	163293	Symbol	* opline		163252						
ANR	163294	Symbol	ZEND_FETCH_ARG_MASK		163252						
ANR	163295	Symbol	* call		163252						
ANR	163296	Symbol	opline -> extended_value		163252						
ANR	163297	Function	zend_vm_stack_copy_call_frame	2371:0:73757:74761							
ANR	163298	FunctionDef	"zend_vm_stack_copy_call_frame (zend_execute_data * call , uint32_t passed_args , uint32_t additional_args)"		163297	0					
ANR	163299	CompoundStatement		2372:0:73896:74761	163297	0					
ANR	163300	IdentifierDeclStatement	zend_execute_data * new_call ;	2373:1:73899:73926	163297	0	True				
ANR	163301	IdentifierDecl	* new_call		163297	0					
ANR	163302	IdentifierDeclType	zend_execute_data *		163297	0					
ANR	163303	Identifier	new_call		163297	1					
ANR	163304	IdentifierDeclStatement	int used_stack = ( EG ( vm_stack_top ) - ( zval * ) call ) + additional_args ;	2374:1:73929:73996	163297	1	True				
ANR	163305	IdentifierDecl	used_stack = ( EG ( vm_stack_top ) - ( zval * ) call ) + additional_args		163297	0					
ANR	163306	IdentifierDeclType	int		163297	0					
ANR	163307	Identifier	used_stack		163297	1					
ANR	163308	AssignmentExpression	used_stack = ( EG ( vm_stack_top ) - ( zval * ) call ) + additional_args		163297	2		=			
ANR	163309	Identifier	used_stack		163297	0					
ANR	163310	AdditiveExpression	( EG ( vm_stack_top ) - ( zval * ) call ) + additional_args		163297	1		+			
ANR	163311	AdditiveExpression	EG ( vm_stack_top ) - ( zval * ) call		163297	0		-			
ANR	163312	CallExpression	EG ( vm_stack_top )		163297	0					
ANR	163313	Callee	EG		163297	0					
ANR	163314	Identifier	EG		163297	0					
ANR	163315	ArgumentList	vm_stack_top		163297	1					
ANR	163316	Argument	vm_stack_top		163297	0					
ANR	163317	Identifier	vm_stack_top		163297	0					
ANR	163318	CastExpression	( zval * ) call		163297	1					
ANR	163319	CastTarget	zval *		163297	0					
ANR	163320	Identifier	call		163297	1					
ANR	163321	Identifier	additional_args		163297	1					
ANR	163322	ExpressionStatement	new_call = zend_vm_stack_extend ( used_stack * sizeof ( zval ) )	2377:1:74046:74104	163297	2	True				
ANR	163323	AssignmentExpression	new_call = zend_vm_stack_extend ( used_stack * sizeof ( zval ) )		163297	0		=			
ANR	163324	Identifier	new_call		163297	0					
ANR	163325	CallExpression	zend_vm_stack_extend ( used_stack * sizeof ( zval ) )		163297	1					
ANR	163326	Callee	zend_vm_stack_extend		163297	0					
ANR	163327	Identifier	zend_vm_stack_extend		163297	0					
ANR	163328	ArgumentList	used_stack * sizeof ( zval )		163297	1					
ANR	163329	Argument	used_stack * sizeof ( zval )		163297	0					
ANR	163330	MultiplicativeExpression	used_stack * sizeof ( zval )		163297	0		*			
ANR	163331	Identifier	used_stack		163297	0					
ANR	163332	SizeofExpression	sizeof ( zval )		163297	1					
ANR	163333	Sizeof	sizeof		163297	0					
ANR	163334	SizeofOperand	zval		163297	1					
ANR	163335	ExpressionStatement	* new_call = * call	2378:1:74107:74124	163297	3	True				
ANR	163336	AssignmentExpression	* new_call = * call		163297	0		=			
ANR	163337	UnaryOperationExpression	* new_call		163297	0					
ANR	163338	UnaryOperator	*		163297	0					
ANR	163339	Identifier	new_call		163297	1					
ANR	163340	UnaryOperationExpression	* call		163297	1					
ANR	163341	UnaryOperator	*		163297	0					
ANR	163342	Identifier	call		163297	1					
ANR	163343	ExpressionStatement	"ZEND_SET_CALL_INFO ( new_call , ZEND_CALL_INFO ( new_call ) | ZEND_CALL_ALLOCATED )"	2379:1:74127:74203	163297	4	True				
ANR	163344	CallExpression	"ZEND_SET_CALL_INFO ( new_call , ZEND_CALL_INFO ( new_call ) | ZEND_CALL_ALLOCATED )"		163297	0					
ANR	163345	Callee	ZEND_SET_CALL_INFO		163297	0					
ANR	163346	Identifier	ZEND_SET_CALL_INFO		163297	0					
ANR	163347	ArgumentList	new_call		163297	1					
ANR	163348	Argument	new_call		163297	0					
ANR	163349	Identifier	new_call		163297	0					
ANR	163350	Argument	ZEND_CALL_INFO ( new_call ) | ZEND_CALL_ALLOCATED		163297	1					
ANR	163351	InclusiveOrExpression	ZEND_CALL_INFO ( new_call ) | ZEND_CALL_ALLOCATED		163297	0		|			
ANR	163352	CallExpression	ZEND_CALL_INFO ( new_call )		163297	0					
ANR	163353	Callee	ZEND_CALL_INFO		163297	0					
ANR	163354	Identifier	ZEND_CALL_INFO		163297	0					
ANR	163355	ArgumentList	new_call		163297	1					
ANR	163356	Argument	new_call		163297	0					
ANR	163357	Identifier	new_call		163297	0					
ANR	163358	Identifier	ZEND_CALL_ALLOCATED		163297	1					
ANR	163359	IfStatement	if ( passed_args )		163297	5					
ANR	163360	Condition	passed_args	2381:5:74211:74221	163297	0	True				
ANR	163361	Identifier	passed_args		163297	0					
ANR	163362	CompoundStatement		12:2:369:407	163297	1					
ANR	163363	IdentifierDeclStatement	"zval * src = ZEND_CALL_ARG ( call , 1 ) ;"	2382:2:74228:74262	163297	0	True				
ANR	163364	IdentifierDecl	"* src = ZEND_CALL_ARG ( call , 1 )"		163297	0					
ANR	163365	IdentifierDeclType	zval *		163297	0					
ANR	163366	Identifier	src		163297	1					
ANR	163367	AssignmentExpression	"* src = ZEND_CALL_ARG ( call , 1 )"		163297	2		=			
ANR	163368	Identifier	src		163297	0					
ANR	163369	CallExpression	"ZEND_CALL_ARG ( call , 1 )"		163297	1					
ANR	163370	Callee	ZEND_CALL_ARG		163297	0					
ANR	163371	Identifier	ZEND_CALL_ARG		163297	0					
ANR	163372	ArgumentList	call		163297	1					
ANR	163373	Argument	call		163297	0					
ANR	163374	Identifier	call		163297	0					
ANR	163375	Argument	1		163297	1					
ANR	163376	PrimaryExpression	1		163297	0					
ANR	163377	IdentifierDeclStatement	"zval * dst = ZEND_CALL_ARG ( new_call , 1 ) ;"	2383:2:74266:74304	163297	1	True				
ANR	163378	IdentifierDecl	"* dst = ZEND_CALL_ARG ( new_call , 1 )"		163297	0					
ANR	163379	IdentifierDeclType	zval *		163297	0					
ANR	163380	Identifier	dst		163297	1					
ANR	163381	AssignmentExpression	"* dst = ZEND_CALL_ARG ( new_call , 1 )"		163297	2		=			
ANR	163382	Identifier	dst		163297	0					
ANR	163383	CallExpression	"ZEND_CALL_ARG ( new_call , 1 )"		163297	1					
ANR	163384	Callee	ZEND_CALL_ARG		163297	0					
ANR	163385	Identifier	ZEND_CALL_ARG		163297	0					
ANR	163386	ArgumentList	new_call		163297	1					
ANR	163387	Argument	new_call		163297	0					
ANR	163388	Identifier	new_call		163297	0					
ANR	163389	Argument	1		163297	1					
ANR	163390	PrimaryExpression	1		163297	0					
ANR	163391	DoStatement	do		163297	2					
ANR	163392	CompoundStatement		13:5:414:414	163297	0					
ANR	163393	ExpressionStatement	"ZVAL_COPY_VALUE ( dst , src )"	2385:3:74316:74341	163297	0	True				
ANR	163394	CallExpression	"ZVAL_COPY_VALUE ( dst , src )"		163297	0					
ANR	163395	Callee	ZVAL_COPY_VALUE		163297	0					
ANR	163396	Identifier	ZVAL_COPY_VALUE		163297	0					
ANR	163397	ArgumentList	dst		163297	1					
ANR	163398	Argument	dst		163297	0					
ANR	163399	Identifier	dst		163297	0					
ANR	163400	Argument	src		163297	1					
ANR	163401	Identifier	src		163297	0					
ANR	163402	ExpressionStatement	passed_args --	2386:3:74346:74359	163297	1	True				
ANR	163403	PostIncDecOperationExpression	passed_args --		163297	0					
ANR	163404	Identifier	passed_args		163297	0					
ANR	163405	IncDec	--		163297	1					
ANR	163406	ExpressionStatement	src ++	2387:3:74364:74369	163297	2	True				
ANR	163407	PostIncDecOperationExpression	src ++		163297	0					
ANR	163408	Identifier	src		163297	0					
ANR	163409	IncDec	++		163297	1					
ANR	163410	ExpressionStatement	dst ++	2388:3:74374:74379	163297	3	True				
ANR	163411	PostIncDecOperationExpression	dst ++		163297	0					
ANR	163412	Identifier	dst		163297	0					
ANR	163413	IncDec	++		163297	1					
ANR	163414	Condition	passed_args	2389:11:74392:74402	163297	1	True				
ANR	163415	Identifier	passed_args		163297	0					
ANR	163416	ExpressionStatement	EG ( vm_stack ) -> prev -> top = ( zval * ) call	2393:1:74468:74505	163297	6	True				
ANR	163417	AssignmentExpression	EG ( vm_stack ) -> prev -> top = ( zval * ) call		163297	0		=			
ANR	163418	PtrMemberAccess	EG ( vm_stack ) -> prev -> top		163297	0					
ANR	163419	PtrMemberAccess	EG ( vm_stack ) -> prev		163297	0					
ANR	163420	CallExpression	EG ( vm_stack )		163297	0					
ANR	163421	Callee	EG		163297	0					
ANR	163422	Identifier	EG		163297	0					
ANR	163423	ArgumentList	vm_stack		163297	1					
ANR	163424	Argument	vm_stack		163297	0					
ANR	163425	Identifier	vm_stack		163297	0					
ANR	163426	Identifier	prev		163297	1					
ANR	163427	Identifier	top		163297	1					
ANR	163428	CastExpression	( zval * ) call		163297	1					
ANR	163429	CastTarget	zval *		163297	0					
ANR	163430	Identifier	call		163297	1					
ANR	163431	IfStatement	if ( UNEXPECTED ( EG ( vm_stack ) -> prev -> top == ZEND_VM_STACK_ELEMETS ( EG ( vm_stack ) -> prev ) ) )		163297	7					
ANR	163432	Condition	UNEXPECTED ( EG ( vm_stack ) -> prev -> top == ZEND_VM_STACK_ELEMETS ( EG ( vm_stack ) -> prev ) )	2396:5:74570:74649	163297	0	True				
ANR	163433	CallExpression	UNEXPECTED ( EG ( vm_stack ) -> prev -> top == ZEND_VM_STACK_ELEMETS ( EG ( vm_stack ) -> prev ) )		163297	0					
ANR	163434	Callee	UNEXPECTED		163297	0					
ANR	163435	Identifier	UNEXPECTED		163297	0					
ANR	163436	ArgumentList	EG ( vm_stack ) -> prev -> top == ZEND_VM_STACK_ELEMETS ( EG ( vm_stack ) -> prev )		163297	1					
ANR	163437	Argument	EG ( vm_stack ) -> prev -> top == ZEND_VM_STACK_ELEMETS ( EG ( vm_stack ) -> prev )		163297	0					
ANR	163438	EqualityExpression	EG ( vm_stack ) -> prev -> top == ZEND_VM_STACK_ELEMETS ( EG ( vm_stack ) -> prev )		163297	0		==			
ANR	163439	PtrMemberAccess	EG ( vm_stack ) -> prev -> top		163297	0					
ANR	163440	PtrMemberAccess	EG ( vm_stack ) -> prev		163297	0					
ANR	163441	CallExpression	EG ( vm_stack )		163297	0					
ANR	163442	Callee	EG		163297	0					
ANR	163443	Identifier	EG		163297	0					
ANR	163444	ArgumentList	vm_stack		163297	1					
ANR	163445	Argument	vm_stack		163297	0					
ANR	163446	Identifier	vm_stack		163297	0					
ANR	163447	Identifier	prev		163297	1					
ANR	163448	Identifier	top		163297	1					
ANR	163449	CallExpression	ZEND_VM_STACK_ELEMETS ( EG ( vm_stack ) -> prev )		163297	1					
ANR	163450	Callee	ZEND_VM_STACK_ELEMETS		163297	0					
ANR	163451	Identifier	ZEND_VM_STACK_ELEMETS		163297	0					
ANR	163452	ArgumentList	EG ( vm_stack ) -> prev		163297	1					
ANR	163453	Argument	EG ( vm_stack ) -> prev		163297	0					
ANR	163454	PtrMemberAccess	EG ( vm_stack ) -> prev		163297	0					
ANR	163455	CallExpression	EG ( vm_stack )		163297	0					
ANR	163456	Callee	EG		163297	0					
ANR	163457	Identifier	EG		163297	0					
ANR	163458	ArgumentList	vm_stack		163297	1					
ANR	163459	Argument	vm_stack		163297	0					
ANR	163460	Identifier	vm_stack		163297	0					
ANR	163461	Identifier	prev		163297	1					
ANR	163462	CompoundStatement		26:2:759:795	163297	1					
ANR	163463	IdentifierDeclStatement	zend_vm_stack r = EG ( vm_stack ) -> prev ;	2397:2:74656:74692	163297	0	True				
ANR	163464	IdentifierDecl	r = EG ( vm_stack ) -> prev		163297	0					
ANR	163465	IdentifierDeclType	zend_vm_stack		163297	0					
ANR	163466	Identifier	r		163297	1					
ANR	163467	AssignmentExpression	r = EG ( vm_stack ) -> prev		163297	2		=			
ANR	163468	Identifier	r		163297	0					
ANR	163469	PtrMemberAccess	EG ( vm_stack ) -> prev		163297	1					
ANR	163470	CallExpression	EG ( vm_stack )		163297	0					
ANR	163471	Callee	EG		163297	0					
ANR	163472	Identifier	EG		163297	0					
ANR	163473	ArgumentList	vm_stack		163297	1					
ANR	163474	Argument	vm_stack		163297	0					
ANR	163475	Identifier	vm_stack		163297	0					
ANR	163476	Identifier	prev		163297	1					
ANR	163477	ExpressionStatement	EG ( vm_stack ) -> prev = r -> prev	2399:2:74697:74725	163297	1	True				
ANR	163478	AssignmentExpression	EG ( vm_stack ) -> prev = r -> prev		163297	0		=			
ANR	163479	PtrMemberAccess	EG ( vm_stack ) -> prev		163297	0					
ANR	163480	CallExpression	EG ( vm_stack )		163297	0					
ANR	163481	Callee	EG		163297	0					
ANR	163482	Identifier	EG		163297	0					
ANR	163483	ArgumentList	vm_stack		163297	1					
ANR	163484	Argument	vm_stack		163297	0					
ANR	163485	Identifier	vm_stack		163297	0					
ANR	163486	Identifier	prev		163297	1					
ANR	163487	PtrMemberAccess	r -> prev		163297	1					
ANR	163488	Identifier	r		163297	0					
ANR	163489	Identifier	prev		163297	1					
ANR	163490	ExpressionStatement	efree ( r )	2400:2:74729:74737	163297	2	True				
ANR	163491	CallExpression	efree ( r )		163297	0					
ANR	163492	Callee	efree		163297	0					
ANR	163493	Identifier	efree		163297	0					
ANR	163494	ArgumentList	r		163297	1					
ANR	163495	Argument	r		163297	0					
ANR	163496	Identifier	r		163297	0					
ANR	163497	ReturnStatement	return new_call ;	2403:1:74744:74759	163297	8	True				
ANR	163498	Identifier	new_call		163297	0					
ANR	163499	ReturnType	static zend_execute_data *		163297	1					
ANR	163500	Identifier	zend_vm_stack_copy_call_frame		163297	2					
ANR	163501	ParameterList	"zend_execute_data * call , uint32_t passed_args , uint32_t additional_args"		163297	3					
ANR	163502	Parameter	zend_execute_data * call	2371:56:73813:73835	163297	0	True				
ANR	163503	ParameterType	zend_execute_data *		163297	0					
ANR	163504	Identifier	call		163297	1					
ANR	163505	Parameter	uint32_t passed_args	2371:81:73838:73857	163297	1	True				
ANR	163506	ParameterType	uint32_t		163297	0					
ANR	163507	Identifier	passed_args		163297	1					
ANR	163508	Parameter	uint32_t additional_args	2371:103:73860:73883	163297	2	True				
ANR	163509	ParameterType	uint32_t		163297	0					
ANR	163510	Identifier	additional_args		163297	1					
ANR	163511	CFGEntryNode	ENTRY		163297		True				
ANR	163512	CFGExitNode	EXIT		163297		True				
ANR	163513	Symbol	EG ( vm_stack ) -> prev		163297						
ANR	163514	Symbol	dst		163297						
ANR	163515	Symbol	ZEND_CALL_ARG		163297						
ANR	163516	Symbol	* call		163297						
ANR	163517	Symbol	* EG		163297						
ANR	163518	Symbol	* * EG		163297						
ANR	163519	Symbol	new_call		163297						
ANR	163520	Symbol	r -> prev		163297						
ANR	163521	Symbol	vm_stack_top		163297						
ANR	163522	Symbol	UNEXPECTED		163297						
ANR	163523	Symbol	additional_args		163297						
ANR	163524	Symbol	EG ( vm_stack ) -> prev -> top		163297						
ANR	163525	Symbol	EG		163297						
ANR	163526	Symbol	passed_args		163297						
ANR	163527	Symbol	src		163297						
ANR	163528	Symbol	* EG ( vm_stack ) -> prev		163297						
ANR	163529	Symbol	ZEND_VM_STACK_ELEMETS		163297						
ANR	163530	Symbol	ZEND_CALL_ALLOCATED		163297						
ANR	163531	Symbol	call		163297						
ANR	163532	Symbol	r		163297						
ANR	163533	Symbol	ZEND_CALL_INFO		163297						
ANR	163534	Symbol	* new_call		163297						
ANR	163535	Symbol	vm_stack		163297						
ANR	163536	Symbol	* r		163297						
ANR	163537	Symbol	used_stack		163297						
ANR	163538	Symbol	zend_vm_stack_extend		163297						
ANR	163539	Function	zend_vm_stack_extend_call_frame	2407:0:74774:75137							
ANR	163540	FunctionDef	"zend_vm_stack_extend_call_frame (zend_execute_data * * call , uint32_t passed_args , uint32_t additional_args)"		163539	0					
ANR	163541	CompoundStatement		2408:0:74921:75137	163539	0					
ANR	163542	IfStatement	if ( EXPECTED ( ( uint32_t ) ( EG ( vm_stack_end ) - EG ( vm_stack_top ) ) > additional_args ) )		163539	0					
ANR	163543	Condition	EXPECTED ( ( uint32_t ) ( EG ( vm_stack_end ) - EG ( vm_stack_top ) ) > additional_args )	2409:5:74928:75002	163539	0	True				
ANR	163544	CallExpression	EXPECTED ( ( uint32_t ) ( EG ( vm_stack_end ) - EG ( vm_stack_top ) ) > additional_args )		163539	0					
ANR	163545	Callee	EXPECTED		163539	0					
ANR	163546	Identifier	EXPECTED		163539	0					
ANR	163547	ArgumentList	( uint32_t ) ( EG ( vm_stack_end ) - EG ( vm_stack_top ) ) > additional_args		163539	1					
ANR	163548	Argument	( uint32_t ) ( EG ( vm_stack_end ) - EG ( vm_stack_top ) ) > additional_args		163539	0					
ANR	163549	RelationalExpression	( uint32_t ) ( EG ( vm_stack_end ) - EG ( vm_stack_top ) ) > additional_args		163539	0		>			
ANR	163550	CastExpression	( uint32_t ) ( EG ( vm_stack_end ) - EG ( vm_stack_top ) )		163539	0					
ANR	163551	CastTarget	uint32_t		163539	0					
ANR	163552	AdditiveExpression	EG ( vm_stack_end ) - EG ( vm_stack_top )		163539	1		-			
ANR	163553	CallExpression	EG ( vm_stack_end )		163539	0					
ANR	163554	Callee	EG		163539	0					
ANR	163555	Identifier	EG		163539	0					
ANR	163556	ArgumentList	vm_stack_end		163539	1					
ANR	163557	Argument	vm_stack_end		163539	0					
ANR	163558	Identifier	vm_stack_end		163539	0					
ANR	163559	CallExpression	EG ( vm_stack_top )		163539	1					
ANR	163560	Callee	EG		163539	0					
ANR	163561	Identifier	EG		163539	0					
ANR	163562	ArgumentList	vm_stack_top		163539	1					
ANR	163563	Argument	vm_stack_top		163539	0					
ANR	163564	Identifier	vm_stack_top		163539	0					
ANR	163565	Identifier	additional_args		163539	1					
ANR	163566	CompoundStatement		2:82:83:83	163539	1					
ANR	163567	ExpressionStatement	EG ( vm_stack_top ) += additional_args	2410:2:75009:75044	163539	0	True				
ANR	163568	AssignmentExpression	EG ( vm_stack_top ) += additional_args		163539	0		+=			
ANR	163569	CallExpression	EG ( vm_stack_top )		163539	0					
ANR	163570	Callee	EG		163539	0					
ANR	163571	Identifier	EG		163539	0					
ANR	163572	ArgumentList	vm_stack_top		163539	1					
ANR	163573	Argument	vm_stack_top		163539	0					
ANR	163574	Identifier	vm_stack_top		163539	0					
ANR	163575	Identifier	additional_args		163539	1					
ANR	163576	ElseStatement	else		163539	0					
ANR	163577	CompoundStatement		4:8:132:132	163539	0					
ANR	163578	ExpressionStatement	"* call = zend_vm_stack_copy_call_frame ( * call , passed_args , additional_args )"	2412:2:75058:75132	163539	0	True				
ANR	163579	AssignmentExpression	"* call = zend_vm_stack_copy_call_frame ( * call , passed_args , additional_args )"		163539	0		=			
ANR	163580	UnaryOperationExpression	* call		163539	0					
ANR	163581	UnaryOperator	*		163539	0					
ANR	163582	Identifier	call		163539	1					
ANR	163583	CallExpression	"zend_vm_stack_copy_call_frame ( * call , passed_args , additional_args )"		163539	1					
ANR	163584	Callee	zend_vm_stack_copy_call_frame		163539	0					
ANR	163585	Identifier	zend_vm_stack_copy_call_frame		163539	0					
ANR	163586	ArgumentList	* call		163539	1					
ANR	163587	Argument	* call		163539	0					
ANR	163588	UnaryOperationExpression	* call		163539	0					
ANR	163589	UnaryOperator	*		163539	0					
ANR	163590	Identifier	call		163539	1					
ANR	163591	Argument	passed_args		163539	1					
ANR	163592	Identifier	passed_args		163539	0					
ANR	163593	Argument	additional_args		163539	2					
ANR	163594	Identifier	additional_args		163539	0					
ANR	163595	ReturnType	static zend_always_inline void		163539	1					
ANR	163596	Identifier	zend_vm_stack_extend_call_frame		163539	2					
ANR	163597	ParameterList	"zend_execute_data * * call , uint32_t passed_args , uint32_t additional_args"		163539	3					
ANR	163598	Parameter	zend_execute_data * * call	2407:63:74837:74860	163539	0	True				
ANR	163599	ParameterType	zend_execute_data * *		163539	0					
ANR	163600	Identifier	call		163539	1					
ANR	163601	Parameter	uint32_t passed_args	2407:89:74863:74882	163539	1	True				
ANR	163602	ParameterType	uint32_t		163539	0					
ANR	163603	Identifier	passed_args		163539	1					
ANR	163604	Parameter	uint32_t additional_args	2407:111:74885:74908	163539	2	True				
ANR	163605	ParameterType	uint32_t		163539	0					
ANR	163606	Identifier	additional_args		163539	1					
ANR	163607	CFGEntryNode	ENTRY		163539		True				
ANR	163608	CFGExitNode	EXIT		163539		True				
ANR	163609	Symbol	call		163539						
ANR	163610	Symbol	vm_stack_top		163539						
ANR	163611	Symbol	EG		163539						
ANR	163612	Symbol	passed_args		163539						
ANR	163613	Symbol	* call		163539						
ANR	163614	Symbol	additional_args		163539						
ANR	163615	Symbol	vm_stack_end		163539						
ANR	163616	Symbol	zend_vm_stack_copy_call_frame		163539						
ANR	163617	Symbol	EXPECTED		163539						
ANR	163618	Function	zend_get_running_generator	2417:0:75150:75519							
ANR	163619	FunctionDef	zend_get_running_generator (zend_execute_data * execute_data)		163618	0					
ANR	163620	CompoundStatement		2418:0:75262:75519	163618	0					
ANR	163621	IdentifierDeclStatement	zend_generator * generator = ( zend_generator * ) EX ( return_value ) ;	2420:1:75323:75386	163618	0	True				
ANR	163622	IdentifierDecl	* generator = ( zend_generator * ) EX ( return_value )		163618	0					
ANR	163623	IdentifierDeclType	zend_generator *		163618	0					
ANR	163624	Identifier	generator		163618	1					
ANR	163625	AssignmentExpression	* generator = ( zend_generator * ) EX ( return_value )		163618	2		=			
ANR	163626	Identifier	generator		163618	0					
ANR	163627	CastExpression	( zend_generator * ) EX ( return_value )		163618	1					
ANR	163628	CastTarget	zend_generator *		163618	0					
ANR	163629	CallExpression	EX ( return_value )		163618	1					
ANR	163630	Callee	EX		163618	0					
ANR	163631	Identifier	EX		163618	0					
ANR	163632	ArgumentList	return_value		163618	1					
ANR	163633	Argument	return_value		163618	0					
ANR	163634	Identifier	return_value		163618	0					
ANR	163635	ReturnStatement	return generator ;	2423:1:75501:75517	163618	1	True				
ANR	163636	Identifier	generator		163618	0					
ANR	163637	ReturnType	static zend_always_inline zend_generator *		163618	1					
ANR	163638	Identifier	zend_get_running_generator		163618	2					
ANR	163639	ParameterList	zend_execute_data * execute_data		163618	3					
ANR	163640	Parameter	zend_execute_data * execute_data	2417:69:75219:75249	163618	0	True				
ANR	163641	ParameterType	zend_execute_data *		163618	0					
ANR	163642	Identifier	execute_data		163618	1					
ANR	163643	CFGEntryNode	ENTRY		163618		True				
ANR	163644	CFGExitNode	EXIT		163618		True				
ANR	163645	Symbol	return_value		163618						
ANR	163646	Symbol	EX		163618						
ANR	163647	Symbol	generator		163618						
ANR	163648	Symbol	execute_data		163618						
ANR	163649	Function	cleanup_unfinished_calls	2427:0:75532:78878							
ANR	163650	FunctionDef	"cleanup_unfinished_calls (zend_execute_data * execute_data , uint32_t op_num)"		163649	0					
ANR	163651	CompoundStatement		2428:0:75629:78878	163649	0					
ANR	163652	IfStatement	if ( UNEXPECTED ( EX ( call ) ) )		163649	0					
ANR	163653	Condition	UNEXPECTED ( EX ( call ) )	2429:5:75636:75655	163649	0	True				
ANR	163654	CallExpression	UNEXPECTED ( EX ( call ) )		163649	0					
ANR	163655	Callee	UNEXPECTED		163649	0					
ANR	163656	Identifier	UNEXPECTED		163649	0					
ANR	163657	ArgumentList	EX ( call )		163649	1					
ANR	163658	Argument	EX ( call )		163649	0					
ANR	163659	CallExpression	EX ( call )		163649	0					
ANR	163660	Callee	EX		163649	0					
ANR	163661	Identifier	EX		163649	0					
ANR	163662	ArgumentList	call		163649	1					
ANR	163663	Argument	call		163649	0					
ANR	163664	Identifier	call		163649	0					
ANR	163665	CompoundStatement		6:2:140:151	163649	1					
ANR	163666	IdentifierDeclStatement	zend_execute_data * call = EX ( call ) ;	2430:2:75662:75696	163649	0	True				
ANR	163667	IdentifierDecl	* call = EX ( call )		163649	0					
ANR	163668	IdentifierDeclType	zend_execute_data *		163649	0					
ANR	163669	Identifier	call		163649	1					
ANR	163670	AssignmentExpression	* call = EX ( call )		163649	2		=			
ANR	163671	Identifier	call		163649	0					
ANR	163672	CallExpression	EX ( call )		163649	1					
ANR	163673	Callee	EX		163649	0					
ANR	163674	Identifier	EX		163649	0					
ANR	163675	ArgumentList	call		163649	1					
ANR	163676	Argument	call		163649	0					
ANR	163677	Identifier	call		163649	0					
ANR	163678	IdentifierDeclStatement	zend_op * opline = EX ( func ) -> op_array . opcodes + op_num ;	2431:2:75700:75753	163649	1	True				
ANR	163679	IdentifierDecl	* opline = EX ( func ) -> op_array . opcodes + op_num		163649	0					
ANR	163680	IdentifierDeclType	zend_op *		163649	0					
ANR	163681	Identifier	opline		163649	1					
ANR	163682	AssignmentExpression	* opline = EX ( func ) -> op_array . opcodes + op_num		163649	2		=			
ANR	163683	Identifier	opline		163649	0					
ANR	163684	AdditiveExpression	EX ( func ) -> op_array . opcodes + op_num		163649	1		+			
ANR	163685	MemberAccess	EX ( func ) -> op_array . opcodes		163649	0					
ANR	163686	PtrMemberAccess	EX ( func ) -> op_array		163649	0					
ANR	163687	CallExpression	EX ( func )		163649	0					
ANR	163688	Callee	EX		163649	0					
ANR	163689	Identifier	EX		163649	0					
ANR	163690	ArgumentList	func		163649	1					
ANR	163691	Argument	func		163649	0					
ANR	163692	Identifier	func		163649	0					
ANR	163693	Identifier	op_array		163649	1					
ANR	163694	Identifier	opcodes		163649	1					
ANR	163695	Identifier	op_num		163649	1					
ANR	163696	IdentifierDeclStatement	int level ;	2432:2:75757:75766	163649	2	True				
ANR	163697	IdentifierDecl	level		163649	0					
ANR	163698	IdentifierDeclType	int		163649	0					
ANR	163699	Identifier	level		163649	1					
ANR	163700	IdentifierDeclStatement	int do_exit ;	2433:2:75770:75781	163649	3	True				
ANR	163701	IdentifierDecl	do_exit		163649	0					
ANR	163702	IdentifierDeclType	int		163649	0					
ANR	163703	Identifier	do_exit		163649	1					
ANR	163704	IfStatement	if ( UNEXPECTED ( opline -> opcode == ZEND_INIT_FCALL || opline -> opcode == ZEND_INIT_FCALL_BY_NAME || opline -> opcode == ZEND_INIT_DYNAMIC_CALL || opline -> opcode == ZEND_INIT_METHOD_CALL || opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL ) )		163649	4					
ANR	163705	Condition	UNEXPECTED ( opline -> opcode == ZEND_INIT_FCALL || opline -> opcode == ZEND_INIT_FCALL_BY_NAME || opline -> opcode == ZEND_INIT_DYNAMIC_CALL || opline -> opcode == ZEND_INIT_METHOD_CALL || opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL )	2435:6:75792:76030	163649	0	True				
ANR	163706	CallExpression	UNEXPECTED ( opline -> opcode == ZEND_INIT_FCALL || opline -> opcode == ZEND_INIT_FCALL_BY_NAME || opline -> opcode == ZEND_INIT_DYNAMIC_CALL || opline -> opcode == ZEND_INIT_METHOD_CALL || opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL )		163649	0					
ANR	163707	Callee	UNEXPECTED		163649	0					
ANR	163708	Identifier	UNEXPECTED		163649	0					
ANR	163709	ArgumentList	opline -> opcode == ZEND_INIT_FCALL || opline -> opcode == ZEND_INIT_FCALL_BY_NAME || opline -> opcode == ZEND_INIT_DYNAMIC_CALL || opline -> opcode == ZEND_INIT_METHOD_CALL || opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL		163649	1					
ANR	163710	Argument	opline -> opcode == ZEND_INIT_FCALL || opline -> opcode == ZEND_INIT_FCALL_BY_NAME || opline -> opcode == ZEND_INIT_DYNAMIC_CALL || opline -> opcode == ZEND_INIT_METHOD_CALL || opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL		163649	0					
ANR	163711	OrExpression	opline -> opcode == ZEND_INIT_FCALL || opline -> opcode == ZEND_INIT_FCALL_BY_NAME || opline -> opcode == ZEND_INIT_DYNAMIC_CALL || opline -> opcode == ZEND_INIT_METHOD_CALL || opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL		163649	0		||			
ANR	163712	EqualityExpression	opline -> opcode == ZEND_INIT_FCALL		163649	0		==			
ANR	163713	PtrMemberAccess	opline -> opcode		163649	0					
ANR	163714	Identifier	opline		163649	0					
ANR	163715	Identifier	opcode		163649	1					
ANR	163716	Identifier	ZEND_INIT_FCALL		163649	1					
ANR	163717	OrExpression	opline -> opcode == ZEND_INIT_FCALL_BY_NAME || opline -> opcode == ZEND_INIT_DYNAMIC_CALL || opline -> opcode == ZEND_INIT_METHOD_CALL || opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL		163649	1		||			
ANR	163718	EqualityExpression	opline -> opcode == ZEND_INIT_FCALL_BY_NAME		163649	0		==			
ANR	163719	PtrMemberAccess	opline -> opcode		163649	0					
ANR	163720	Identifier	opline		163649	0					
ANR	163721	Identifier	opcode		163649	1					
ANR	163722	Identifier	ZEND_INIT_FCALL_BY_NAME		163649	1					
ANR	163723	OrExpression	opline -> opcode == ZEND_INIT_DYNAMIC_CALL || opline -> opcode == ZEND_INIT_METHOD_CALL || opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL		163649	1		||			
ANR	163724	EqualityExpression	opline -> opcode == ZEND_INIT_DYNAMIC_CALL		163649	0		==			
ANR	163725	PtrMemberAccess	opline -> opcode		163649	0					
ANR	163726	Identifier	opline		163649	0					
ANR	163727	Identifier	opcode		163649	1					
ANR	163728	Identifier	ZEND_INIT_DYNAMIC_CALL		163649	1					
ANR	163729	OrExpression	opline -> opcode == ZEND_INIT_METHOD_CALL || opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL		163649	1		||			
ANR	163730	EqualityExpression	opline -> opcode == ZEND_INIT_METHOD_CALL		163649	0		==			
ANR	163731	PtrMemberAccess	opline -> opcode		163649	0					
ANR	163732	Identifier	opline		163649	0					
ANR	163733	Identifier	opcode		163649	1					
ANR	163734	Identifier	ZEND_INIT_METHOD_CALL		163649	1					
ANR	163735	EqualityExpression	opline -> opcode == ZEND_INIT_STATIC_METHOD_CALL		163649	1		==			
ANR	163736	PtrMemberAccess	opline -> opcode		163649	0					
ANR	163737	Identifier	opline		163649	0					
ANR	163738	Identifier	opcode		163649	1					
ANR	163739	Identifier	ZEND_INIT_STATIC_METHOD_CALL		163649	1					
ANR	163740	CompoundStatement		12:52:403:403	163649	1					
ANR	163741	ExpressionStatement	ZEND_ASSERT ( op_num )	2440:3:76038:76057	163649	0	True				
ANR	163742	CallExpression	ZEND_ASSERT ( op_num )		163649	0					
ANR	163743	Callee	ZEND_ASSERT		163649	0					
ANR	163744	Identifier	ZEND_ASSERT		163649	0					
ANR	163745	ArgumentList	op_num		163649	1					
ANR	163746	Argument	op_num		163649	0					
ANR	163747	Identifier	op_num		163649	0					
ANR	163748	ExpressionStatement	opline --	2441:3:76062:76070	163649	1	True				
ANR	163749	PostIncDecOperationExpression	opline --		163649	0					
ANR	163750	Identifier	opline		163649	0					
ANR	163751	IncDec	--		163649	1					
ANR	163752	DoStatement	do		163649	5					
ANR	163753	CompoundStatement		17:5:452:452	163649	0					
ANR	163754	ExpressionStatement	level = 0	2449:3:76278:76287	163649	0	True				
ANR	163755	AssignmentExpression	level = 0		163649	0		=			
ANR	163756	Identifier	level		163649	0					
ANR	163757	PrimaryExpression	0		163649	1					
ANR	163758	ExpressionStatement	do_exit = 0	2450:3:76292:76303	163649	1	True				
ANR	163759	AssignmentExpression	do_exit = 0		163649	0		=			
ANR	163760	Identifier	do_exit		163649	0					
ANR	163761	PrimaryExpression	0		163649	1					
ANR	163762	DoStatement	do		163649	2					
ANR	163763	CompoundStatement		24:6:681:681	163649	0					
ANR	163764	SwitchStatement	switch ( opline -> opcode )		163649	0					
ANR	163765	Condition	opline -> opcode	2452:12:76325:76338	163649	0	True				
ANR	163766	PtrMemberAccess	opline -> opcode		163649	0					
ANR	163767	Identifier	opline		163649	0					
ANR	163768	Identifier	opcode		163649	1					
ANR	163769	CompoundStatement		25:28:711:711	163649	1					
ANR	163770	Label	case ZEND_DO_FCALL :	2453:5:76348:76366	163649	0	True				
ANR	163771	Identifier	ZEND_DO_FCALL		163649	0					
ANR	163772	Label	case ZEND_DO_ICALL :	2454:5:76373:76391	163649	1	True				
ANR	163773	Identifier	ZEND_DO_ICALL		163649	0					
ANR	163774	Label	case ZEND_DO_UCALL :	2455:5:76398:76416	163649	2	True				
ANR	163775	Identifier	ZEND_DO_UCALL		163649	0					
ANR	163776	Label	case ZEND_DO_FCALL_BY_NAME :	2456:5:76423:76449	163649	3	True				
ANR	163777	Identifier	ZEND_DO_FCALL_BY_NAME		163649	0					
ANR	163778	ExpressionStatement	level ++	2457:6:76457:76464	163649	4	True				
ANR	163779	PostIncDecOperationExpression	level ++		163649	0					
ANR	163780	Identifier	level		163649	0					
ANR	163781	IncDec	++		163649	1					
ANR	163782	BreakStatement	break ;	2458:6:76472:76477	163649	5	True				
ANR	163783	Label	case ZEND_INIT_FCALL :	2459:5:76484:76504	163649	6	True				
ANR	163784	Identifier	ZEND_INIT_FCALL		163649	0					
ANR	163785	Label	case ZEND_INIT_FCALL_BY_NAME :	2460:5:76511:76539	163649	7	True				
ANR	163786	Identifier	ZEND_INIT_FCALL_BY_NAME		163649	0					
ANR	163787	Label	case ZEND_INIT_NS_FCALL_BY_NAME :	2461:5:76546:76577	163649	8	True				
ANR	163788	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		163649	0					
ANR	163789	Label	case ZEND_INIT_DYNAMIC_CALL :	2462:5:76584:76611	163649	9	True				
ANR	163790	Identifier	ZEND_INIT_DYNAMIC_CALL		163649	0					
ANR	163791	Label	case ZEND_INIT_USER_CALL :	2463:5:76618:76642	163649	10	True				
ANR	163792	Identifier	ZEND_INIT_USER_CALL		163649	0					
ANR	163793	Label	case ZEND_INIT_METHOD_CALL :	2464:5:76649:76675	163649	11	True				
ANR	163794	Identifier	ZEND_INIT_METHOD_CALL		163649	0					
ANR	163795	Label	case ZEND_INIT_STATIC_METHOD_CALL :	2465:5:76682:76715	163649	12	True				
ANR	163796	Identifier	ZEND_INIT_STATIC_METHOD_CALL		163649	0					
ANR	163797	Label	case ZEND_NEW :	2466:5:76722:76735	163649	13	True				
ANR	163798	Identifier	ZEND_NEW		163649	0					
ANR	163799	IfStatement	if ( level == 0 )		163649	14					
ANR	163800	Condition	level == 0	2467:10:76747:76756	163649	0	True				
ANR	163801	EqualityExpression	level == 0		163649	0		==			
ANR	163802	Identifier	level		163649	0					
ANR	163803	PrimaryExpression	0		163649	1					
ANR	163804	CompoundStatement		40:22:1129:1129	163649	1					
ANR	163805	ExpressionStatement	ZEND_CALL_NUM_ARGS ( call ) = 0	2468:7:76768:76796	163649	0	True				
ANR	163806	AssignmentExpression	ZEND_CALL_NUM_ARGS ( call ) = 0		163649	0		=			
ANR	163807	CallExpression	ZEND_CALL_NUM_ARGS ( call )		163649	0					
ANR	163808	Callee	ZEND_CALL_NUM_ARGS		163649	0					
ANR	163809	Identifier	ZEND_CALL_NUM_ARGS		163649	0					
ANR	163810	ArgumentList	call		163649	1					
ANR	163811	Argument	call		163649	0					
ANR	163812	Identifier	call		163649	0					
ANR	163813	PrimaryExpression	0		163649	1					
ANR	163814	ExpressionStatement	do_exit = 1	2469:7:76805:76816	163649	1	True				
ANR	163815	AssignmentExpression	do_exit = 1		163649	0		=			
ANR	163816	Identifier	do_exit		163649	0					
ANR	163817	PrimaryExpression	1		163649	1					
ANR	163818	ExpressionStatement	level --	2471:6:76832:76839	163649	15	True				
ANR	163819	PostIncDecOperationExpression	level --		163649	0					
ANR	163820	Identifier	level		163649	0					
ANR	163821	IncDec	--		163649	1					
ANR	163822	BreakStatement	break ;	2472:6:76847:76852	163649	16	True				
ANR	163823	Label	case ZEND_SEND_VAL :	2473:5:76859:76877	163649	17	True				
ANR	163824	Identifier	ZEND_SEND_VAL		163649	0					
ANR	163825	Label	case ZEND_SEND_VAL_EX :	2474:5:76884:76905	163649	18	True				
ANR	163826	Identifier	ZEND_SEND_VAL_EX		163649	0					
ANR	163827	Label	case ZEND_SEND_VAR :	2475:5:76912:76930	163649	19	True				
ANR	163828	Identifier	ZEND_SEND_VAR		163649	0					
ANR	163829	Label	case ZEND_SEND_VAR_EX :	2476:5:76937:76958	163649	20	True				
ANR	163830	Identifier	ZEND_SEND_VAR_EX		163649	0					
ANR	163831	Label	case ZEND_SEND_REF :	2477:5:76965:76983	163649	21	True				
ANR	163832	Identifier	ZEND_SEND_REF		163649	0					
ANR	163833	Label	case ZEND_SEND_VAR_NO_REF :	2478:5:76990:77015	163649	22	True				
ANR	163834	Identifier	ZEND_SEND_VAR_NO_REF		163649	0					
ANR	163835	Label	case ZEND_SEND_USER :	2479:5:77022:77041	163649	23	True				
ANR	163836	Identifier	ZEND_SEND_USER		163649	0					
ANR	163837	IfStatement	if ( level == 0 )		163649	24					
ANR	163838	Condition	level == 0	2480:10:77053:77062	163649	0	True				
ANR	163839	EqualityExpression	level == 0		163649	0		==			
ANR	163840	Identifier	level		163649	0					
ANR	163841	PrimaryExpression	0		163649	1					
ANR	163842	CompoundStatement		53:22:1435:1435	163649	1					
ANR	163843	ExpressionStatement	ZEND_CALL_NUM_ARGS ( call ) = opline -> op2 . num	2481:7:77074:77116	163649	0	True				
ANR	163844	AssignmentExpression	ZEND_CALL_NUM_ARGS ( call ) = opline -> op2 . num		163649	0		=			
ANR	163845	CallExpression	ZEND_CALL_NUM_ARGS ( call )		163649	0					
ANR	163846	Callee	ZEND_CALL_NUM_ARGS		163649	0					
ANR	163847	Identifier	ZEND_CALL_NUM_ARGS		163649	0					
ANR	163848	ArgumentList	call		163649	1					
ANR	163849	Argument	call		163649	0					
ANR	163850	Identifier	call		163649	0					
ANR	163851	MemberAccess	opline -> op2 . num		163649	1					
ANR	163852	PtrMemberAccess	opline -> op2		163649	0					
ANR	163853	Identifier	opline		163649	0					
ANR	163854	Identifier	op2		163649	1					
ANR	163855	Identifier	num		163649	1					
ANR	163856	ExpressionStatement	do_exit = 1	2482:7:77125:77136	163649	1	True				
ANR	163857	AssignmentExpression	do_exit = 1		163649	0		=			
ANR	163858	Identifier	do_exit		163649	0					
ANR	163859	PrimaryExpression	1		163649	1					
ANR	163860	BreakStatement	break ;	2484:6:77152:77157	163649	25	True				
ANR	163861	Label	case ZEND_SEND_ARRAY :	2485:5:77164:77184	163649	26	True				
ANR	163862	Identifier	ZEND_SEND_ARRAY		163649	0					
ANR	163863	Label	case ZEND_SEND_UNPACK :	2486:5:77191:77212	163649	27	True				
ANR	163864	Identifier	ZEND_SEND_UNPACK		163649	0					
ANR	163865	IfStatement	if ( level == 0 )		163649	28					
ANR	163866	Condition	level == 0	2487:10:77224:77233	163649	0	True				
ANR	163867	EqualityExpression	level == 0		163649	0		==			
ANR	163868	Identifier	level		163649	0					
ANR	163869	PrimaryExpression	0		163649	1					
ANR	163870	CompoundStatement		60:22:1606:1606	163649	1					
ANR	163871	ExpressionStatement	do_exit = 1	2488:7:77245:77256	163649	0	True				
ANR	163872	AssignmentExpression	do_exit = 1		163649	0		=			
ANR	163873	Identifier	do_exit		163649	0					
ANR	163874	PrimaryExpression	1		163649	1					
ANR	163875	BreakStatement	break ;	2490:6:77272:77277	163649	29	True				
ANR	163876	IfStatement	if ( ! do_exit )		163649	1					
ANR	163877	Condition	! do_exit	2492:8:77293:77300	163649	0	True				
ANR	163878	UnaryOperationExpression	! do_exit		163649	0					
ANR	163879	UnaryOperator	!		163649	0					
ANR	163880	Identifier	do_exit		163649	1					
ANR	163881	CompoundStatement		65:18:1673:1673	163649	1					
ANR	163882	ExpressionStatement	opline --	2493:5:77310:77318	163649	0	True				
ANR	163883	PostIncDecOperationExpression	opline --		163649	0					
ANR	163884	Identifier	opline		163649	0					
ANR	163885	IncDec	--		163649	1					
ANR	163886	Condition	! do_exit	2495:12:77338:77345	163649	1	True				
ANR	163887	UnaryOperationExpression	! do_exit		163649	0					
ANR	163888	UnaryOperator	!		163649	0					
ANR	163889	Identifier	do_exit		163649	1					
ANR	163890	IfStatement	if ( call -> prev_execute_data )		163649	3					
ANR	163891	Condition	call -> prev_execute_data	2496:7:77356:77378	163649	0	True				
ANR	163892	PtrMemberAccess	call -> prev_execute_data		163649	0					
ANR	163893	Identifier	call		163649	0					
ANR	163894	Identifier	prev_execute_data		163649	1					
ANR	163895	CompoundStatement		69:32:1751:1751	163649	1					
ANR	163896	ExpressionStatement	level = 0	2498:4:77422:77431	163649	0	True				
ANR	163897	AssignmentExpression	level = 0		163649	0		=			
ANR	163898	Identifier	level		163649	0					
ANR	163899	PrimaryExpression	0		163649	1					
ANR	163900	ExpressionStatement	do_exit = 0	2499:4:77437:77448	163649	1	True				
ANR	163901	AssignmentExpression	do_exit = 0		163649	0		=			
ANR	163902	Identifier	do_exit		163649	0					
ANR	163903	PrimaryExpression	0		163649	1					
ANR	163904	DoStatement	do		163649	2					
ANR	163905	CompoundStatement		73:7:1827:1827	163649	0					
ANR	163906	SwitchStatement	switch ( opline -> opcode )		163649	0					
ANR	163907	Condition	opline -> opcode	2501:13:77472:77485	163649	0	True				
ANR	163908	PtrMemberAccess	opline -> opcode		163649	0					
ANR	163909	Identifier	opline		163649	0					
ANR	163910	Identifier	opcode		163649	1					
ANR	163911	CompoundStatement		74:29:1858:1858	163649	1					
ANR	163912	Label	case ZEND_DO_FCALL :	2502:6:77496:77514	163649	0	True				
ANR	163913	Identifier	ZEND_DO_FCALL		163649	0					
ANR	163914	Label	case ZEND_DO_ICALL :	2503:6:77522:77540	163649	1	True				
ANR	163915	Identifier	ZEND_DO_ICALL		163649	0					
ANR	163916	Label	case ZEND_DO_UCALL :	2504:6:77548:77566	163649	2	True				
ANR	163917	Identifier	ZEND_DO_UCALL		163649	0					
ANR	163918	Label	case ZEND_DO_FCALL_BY_NAME :	2505:6:77574:77600	163649	3	True				
ANR	163919	Identifier	ZEND_DO_FCALL_BY_NAME		163649	0					
ANR	163920	ExpressionStatement	level ++	2506:7:77609:77616	163649	4	True				
ANR	163921	PostIncDecOperationExpression	level ++		163649	0					
ANR	163922	Identifier	level		163649	0					
ANR	163923	IncDec	++		163649	1					
ANR	163924	BreakStatement	break ;	2507:7:77625:77630	163649	5	True				
ANR	163925	Label	case ZEND_INIT_FCALL :	2508:6:77638:77658	163649	6	True				
ANR	163926	Identifier	ZEND_INIT_FCALL		163649	0					
ANR	163927	Label	case ZEND_INIT_FCALL_BY_NAME :	2509:6:77666:77694	163649	7	True				
ANR	163928	Identifier	ZEND_INIT_FCALL_BY_NAME		163649	0					
ANR	163929	Label	case ZEND_INIT_NS_FCALL_BY_NAME :	2510:6:77702:77733	163649	8	True				
ANR	163930	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		163649	0					
ANR	163931	Label	case ZEND_INIT_DYNAMIC_CALL :	2511:6:77741:77768	163649	9	True				
ANR	163932	Identifier	ZEND_INIT_DYNAMIC_CALL		163649	0					
ANR	163933	Label	case ZEND_INIT_USER_CALL :	2512:6:77776:77800	163649	10	True				
ANR	163934	Identifier	ZEND_INIT_USER_CALL		163649	0					
ANR	163935	Label	case ZEND_INIT_METHOD_CALL :	2513:6:77808:77834	163649	11	True				
ANR	163936	Identifier	ZEND_INIT_METHOD_CALL		163649	0					
ANR	163937	Label	case ZEND_INIT_STATIC_METHOD_CALL :	2514:6:77842:77875	163649	12	True				
ANR	163938	Identifier	ZEND_INIT_STATIC_METHOD_CALL		163649	0					
ANR	163939	Label	case ZEND_NEW :	2515:6:77883:77896	163649	13	True				
ANR	163940	Identifier	ZEND_NEW		163649	0					
ANR	163941	IfStatement	if ( level == 0 )		163649	14					
ANR	163942	Condition	level == 0	2516:11:77909:77918	163649	0	True				
ANR	163943	EqualityExpression	level == 0		163649	0		==			
ANR	163944	Identifier	level		163649	0					
ANR	163945	PrimaryExpression	0		163649	1					
ANR	163946	CompoundStatement		89:23:2291:2291	163649	1					
ANR	163947	ExpressionStatement	do_exit = 1	2517:8:77931:77942	163649	0	True				
ANR	163948	AssignmentExpression	do_exit = 1		163649	0		=			
ANR	163949	Identifier	do_exit		163649	0					
ANR	163950	PrimaryExpression	1		163649	1					
ANR	163951	ExpressionStatement	level --	2519:7:77960:77967	163649	15	True				
ANR	163952	PostIncDecOperationExpression	level --		163649	0					
ANR	163953	Identifier	level		163649	0					
ANR	163954	IncDec	--		163649	1					
ANR	163955	BreakStatement	break ;	2520:7:77976:77981	163649	16	True				
ANR	163956	ExpressionStatement	opline --	2522:5:77995:78003	163649	1	True				
ANR	163957	PostIncDecOperationExpression	opline --		163649	0					
ANR	163958	Identifier	opline		163649	0					
ANR	163959	IncDec	--		163649	1					
ANR	163960	Condition	! do_exit	2523:13:78018:78025	163649	1	True				
ANR	163961	UnaryOperationExpression	! do_exit		163649	0					
ANR	163962	UnaryOperator	!		163649	0					
ANR	163963	Identifier	do_exit		163649	1					
ANR	163964	ExpressionStatement	zend_vm_stack_free_args ( EX ( call ) )	2526:3:78038:78071	163649	4	True				
ANR	163965	CallExpression	zend_vm_stack_free_args ( EX ( call ) )		163649	0					
ANR	163966	Callee	zend_vm_stack_free_args		163649	0					
ANR	163967	Identifier	zend_vm_stack_free_args		163649	0					
ANR	163968	ArgumentList	EX ( call )		163649	1					
ANR	163969	Argument	EX ( call )		163649	0					
ANR	163970	CallExpression	EX ( call )		163649	0					
ANR	163971	Callee	EX		163649	0					
ANR	163972	Identifier	EX		163649	0					
ANR	163973	ArgumentList	call		163649	1					
ANR	163974	Argument	call		163649	0					
ANR	163975	Identifier	call		163649	0					
ANR	163976	IfStatement	if ( ZEND_CALL_INFO ( call ) & ZEND_CALL_RELEASE_THIS )		163649	5					
ANR	163977	Condition	ZEND_CALL_INFO ( call ) & ZEND_CALL_RELEASE_THIS	2528:7:78081:78125	163649	0	True				
ANR	163978	BitAndExpression	ZEND_CALL_INFO ( call ) & ZEND_CALL_RELEASE_THIS		163649	0		&			
ANR	163979	CallExpression	ZEND_CALL_INFO ( call )		163649	0					
ANR	163980	Callee	ZEND_CALL_INFO		163649	0					
ANR	163981	Identifier	ZEND_CALL_INFO		163649	0					
ANR	163982	ArgumentList	call		163649	1					
ANR	163983	Argument	call		163649	0					
ANR	163984	Identifier	call		163649	0					
ANR	163985	Identifier	ZEND_CALL_RELEASE_THIS		163649	1					
ANR	163986	CompoundStatement		101:54:2498:2498	163649	1					
ANR	163987	IfStatement	if ( ZEND_CALL_INFO ( call ) & ZEND_CALL_CTOR )		163649	0					
ANR	163988	Condition	ZEND_CALL_INFO ( call ) & ZEND_CALL_CTOR	2529:8:78138:78174	163649	0	True				
ANR	163989	BitAndExpression	ZEND_CALL_INFO ( call ) & ZEND_CALL_CTOR		163649	0		&			
ANR	163990	CallExpression	ZEND_CALL_INFO ( call )		163649	0					
ANR	163991	Callee	ZEND_CALL_INFO		163649	0					
ANR	163992	Identifier	ZEND_CALL_INFO		163649	0					
ANR	163993	ArgumentList	call		163649	1					
ANR	163994	Argument	call		163649	0					
ANR	163995	Identifier	call		163649	0					
ANR	163996	Identifier	ZEND_CALL_CTOR		163649	1					
ANR	163997	CompoundStatement		102:47:2547:2547	163649	1					
ANR	163998	IfStatement	if ( ! ( ZEND_CALL_INFO ( call ) & ZEND_CALL_CTOR_RESULT_UNUSED ) )		163649	0					
ANR	163999	Condition	! ( ZEND_CALL_INFO ( call ) & ZEND_CALL_CTOR_RESULT_UNUSED )	2530:9:78188:78241	163649	0	True				
ANR	164000	UnaryOperationExpression	! ( ZEND_CALL_INFO ( call ) & ZEND_CALL_CTOR_RESULT_UNUSED )		163649	0					
ANR	164001	UnaryOperator	!		163649	0					
ANR	164002	BitAndExpression	ZEND_CALL_INFO ( call ) & ZEND_CALL_CTOR_RESULT_UNUSED		163649	1		&			
ANR	164003	CallExpression	ZEND_CALL_INFO ( call )		163649	0					
ANR	164004	Callee	ZEND_CALL_INFO		163649	0					
ANR	164005	Identifier	ZEND_CALL_INFO		163649	0					
ANR	164006	ArgumentList	call		163649	1					
ANR	164007	Argument	call		163649	0					
ANR	164008	Identifier	call		163649	0					
ANR	164009	Identifier	ZEND_CALL_CTOR_RESULT_UNUSED		163649	1					
ANR	164010	CompoundStatement		103:65:2614:2614	163649	1					
ANR	164011	ExpressionStatement	GC_REFCOUNT ( Z_OBJ ( call -> This ) ) --	2531:6:78252:78284	163649	0	True				
ANR	164012	PostIncDecOperationExpression	GC_REFCOUNT ( Z_OBJ ( call -> This ) ) --		163649	0					
ANR	164013	CallExpression	GC_REFCOUNT ( Z_OBJ ( call -> This ) )		163649	0					
ANR	164014	Callee	GC_REFCOUNT		163649	0					
ANR	164015	Identifier	GC_REFCOUNT		163649	0					
ANR	164016	ArgumentList	Z_OBJ ( call -> This )		163649	1					
ANR	164017	Argument	Z_OBJ ( call -> This )		163649	0					
ANR	164018	CallExpression	Z_OBJ ( call -> This )		163649	0					
ANR	164019	Callee	Z_OBJ		163649	0					
ANR	164020	Identifier	Z_OBJ		163649	0					
ANR	164021	ArgumentList	call -> This		163649	1					
ANR	164022	Argument	call -> This		163649	0					
ANR	164023	PtrMemberAccess	call -> This		163649	0					
ANR	164024	Identifier	call		163649	0					
ANR	164025	Identifier	This		163649	1					
ANR	164026	IncDec	--		163649	1					
ANR	164027	IfStatement	if ( GC_REFCOUNT ( Z_OBJ ( call -> This ) ) == 1 )		163649	1					
ANR	164028	Condition	GC_REFCOUNT ( Z_OBJ ( call -> This ) ) == 1	2533:9:78302:78336	163649	0	True				
ANR	164029	EqualityExpression	GC_REFCOUNT ( Z_OBJ ( call -> This ) ) == 1		163649	0		==			
ANR	164030	CallExpression	GC_REFCOUNT ( Z_OBJ ( call -> This ) )		163649	0					
ANR	164031	Callee	GC_REFCOUNT		163649	0					
ANR	164032	Identifier	GC_REFCOUNT		163649	0					
ANR	164033	ArgumentList	Z_OBJ ( call -> This )		163649	1					
ANR	164034	Argument	Z_OBJ ( call -> This )		163649	0					
ANR	164035	CallExpression	Z_OBJ ( call -> This )		163649	0					
ANR	164036	Callee	Z_OBJ		163649	0					
ANR	164037	Identifier	Z_OBJ		163649	0					
ANR	164038	ArgumentList	call -> This		163649	1					
ANR	164039	Argument	call -> This		163649	0					
ANR	164040	PtrMemberAccess	call -> This		163649	0					
ANR	164041	Identifier	call		163649	0					
ANR	164042	Identifier	This		163649	1					
ANR	164043	PrimaryExpression	1		163649	1					
ANR	164044	CompoundStatement		106:46:2709:2709	163649	1					
ANR	164045	ExpressionStatement	zend_object_store_ctor_failed ( Z_OBJ ( call -> This ) )	2534:6:78347:78395	163649	0	True				
ANR	164046	CallExpression	zend_object_store_ctor_failed ( Z_OBJ ( call -> This ) )		163649	0					
ANR	164047	Callee	zend_object_store_ctor_failed		163649	0					
ANR	164048	Identifier	zend_object_store_ctor_failed		163649	0					
ANR	164049	ArgumentList	Z_OBJ ( call -> This )		163649	1					
ANR	164050	Argument	Z_OBJ ( call -> This )		163649	0					
ANR	164051	CallExpression	Z_OBJ ( call -> This )		163649	0					
ANR	164052	Callee	Z_OBJ		163649	0					
ANR	164053	Identifier	Z_OBJ		163649	0					
ANR	164054	ArgumentList	call -> This		163649	1					
ANR	164055	Argument	call -> This		163649	0					
ANR	164056	PtrMemberAccess	call -> This		163649	0					
ANR	164057	Identifier	call		163649	0					
ANR	164058	Identifier	This		163649	1					
ANR	164059	ExpressionStatement	OBJ_RELEASE ( Z_OBJ ( call -> This ) )	2537:4:78414:78444	163649	1	True				
ANR	164060	CallExpression	OBJ_RELEASE ( Z_OBJ ( call -> This ) )		163649	0					
ANR	164061	Callee	OBJ_RELEASE		163649	0					
ANR	164062	Identifier	OBJ_RELEASE		163649	0					
ANR	164063	ArgumentList	Z_OBJ ( call -> This )		163649	1					
ANR	164064	Argument	Z_OBJ ( call -> This )		163649	0					
ANR	164065	CallExpression	Z_OBJ ( call -> This )		163649	0					
ANR	164066	Callee	Z_OBJ		163649	0					
ANR	164067	Identifier	Z_OBJ		163649	0					
ANR	164068	ArgumentList	call -> This		163649	1					
ANR	164069	Argument	call -> This		163649	0					
ANR	164070	PtrMemberAccess	call -> This		163649	0					
ANR	164071	Identifier	call		163649	0					
ANR	164072	Identifier	This		163649	1					
ANR	164073	IfStatement	if ( call -> func -> common . fn_flags & ZEND_ACC_CLOSURE )		163649	6					
ANR	164074	Condition	call -> func -> common . fn_flags & ZEND_ACC_CLOSURE	2539:7:78458:78503	163649	0	True				
ANR	164075	BitAndExpression	call -> func -> common . fn_flags & ZEND_ACC_CLOSURE		163649	0		&			
ANR	164076	MemberAccess	call -> func -> common . fn_flags		163649	0					
ANR	164077	PtrMemberAccess	call -> func -> common		163649	0					
ANR	164078	PtrMemberAccess	call -> func		163649	0					
ANR	164079	Identifier	call		163649	0					
ANR	164080	Identifier	func		163649	1					
ANR	164081	Identifier	common		163649	1					
ANR	164082	Identifier	fn_flags		163649	1					
ANR	164083	Identifier	ZEND_ACC_CLOSURE		163649	1					
ANR	164084	CompoundStatement		112:55:2876:2876	163649	1					
ANR	164085	ExpressionStatement	zend_object_release ( ( zend_object * ) call -> func -> common . prototype )	2540:4:78512:78577	163649	0	True				
ANR	164086	CallExpression	zend_object_release ( ( zend_object * ) call -> func -> common . prototype )		163649	0					
ANR	164087	Callee	zend_object_release		163649	0					
ANR	164088	Identifier	zend_object_release		163649	0					
ANR	164089	ArgumentList	( zend_object * ) call -> func -> common . prototype		163649	1					
ANR	164090	Argument	( zend_object * ) call -> func -> common . prototype		163649	0					
ANR	164091	CastExpression	( zend_object * ) call -> func -> common . prototype		163649	0					
ANR	164092	CastTarget	zend_object *		163649	0					
ANR	164093	MemberAccess	call -> func -> common . prototype		163649	1					
ANR	164094	PtrMemberAccess	call -> func -> common		163649	0					
ANR	164095	PtrMemberAccess	call -> func		163649	0					
ANR	164096	Identifier	call		163649	0					
ANR	164097	Identifier	func		163649	1					
ANR	164098	Identifier	common		163649	1					
ANR	164099	Identifier	prototype		163649	1					
ANR	164100	ElseStatement	else		163649	0					
ANR	164101	IfStatement	if ( call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE )		163649	0					
ANR	164102	Condition	call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE	2541:14:78593:78650	163649	0	True				
ANR	164103	BitAndExpression	call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE		163649	0		&			
ANR	164104	MemberAccess	call -> func -> common . fn_flags		163649	0					
ANR	164105	PtrMemberAccess	call -> func -> common		163649	0					
ANR	164106	PtrMemberAccess	call -> func		163649	0					
ANR	164107	Identifier	call		163649	0					
ANR	164108	Identifier	func		163649	1					
ANR	164109	Identifier	common		163649	1					
ANR	164110	Identifier	fn_flags		163649	1					
ANR	164111	Identifier	ZEND_ACC_CALL_VIA_TRAMPOLINE		163649	1					
ANR	164112	CompoundStatement		114:74:3023:3023	163649	1					
ANR	164113	ExpressionStatement	zend_string_release ( call -> func -> common . function_name )	2542:4:78659:78712	163649	0	True				
ANR	164114	CallExpression	zend_string_release ( call -> func -> common . function_name )		163649	0					
ANR	164115	Callee	zend_string_release		163649	0					
ANR	164116	Identifier	zend_string_release		163649	0					
ANR	164117	ArgumentList	call -> func -> common . function_name		163649	1					
ANR	164118	Argument	call -> func -> common . function_name		163649	0					
ANR	164119	MemberAccess	call -> func -> common . function_name		163649	0					
ANR	164120	PtrMemberAccess	call -> func -> common		163649	0					
ANR	164121	PtrMemberAccess	call -> func		163649	0					
ANR	164122	Identifier	call		163649	0					
ANR	164123	Identifier	func		163649	1					
ANR	164124	Identifier	common		163649	1					
ANR	164125	Identifier	function_name		163649	1					
ANR	164126	ExpressionStatement	zend_free_trampoline ( call -> func )	2543:4:78718:78750	163649	1	True				
ANR	164127	CallExpression	zend_free_trampoline ( call -> func )		163649	0					
ANR	164128	Callee	zend_free_trampoline		163649	0					
ANR	164129	Identifier	zend_free_trampoline		163649	0					
ANR	164130	ArgumentList	call -> func		163649	1					
ANR	164131	Argument	call -> func		163649	0					
ANR	164132	PtrMemberAccess	call -> func		163649	0					
ANR	164133	Identifier	call		163649	0					
ANR	164134	Identifier	func		163649	1					
ANR	164135	ExpressionStatement	EX ( call ) = call -> prev_execute_data	2546:3:78761:78795	163649	7	True				
ANR	164136	AssignmentExpression	EX ( call ) = call -> prev_execute_data		163649	0		=			
ANR	164137	CallExpression	EX ( call )		163649	0					
ANR	164138	Callee	EX		163649	0					
ANR	164139	Identifier	EX		163649	0					
ANR	164140	ArgumentList	call		163649	1					
ANR	164141	Argument	call		163649	0					
ANR	164142	Identifier	call		163649	0					
ANR	164143	PtrMemberAccess	call -> prev_execute_data		163649	1					
ANR	164144	Identifier	call		163649	0					
ANR	164145	Identifier	prev_execute_data		163649	1					
ANR	164146	ExpressionStatement	zend_vm_stack_free_call_frame ( call )	2547:3:78800:78835	163649	8	True				
ANR	164147	CallExpression	zend_vm_stack_free_call_frame ( call )		163649	0					
ANR	164148	Callee	zend_vm_stack_free_call_frame		163649	0					
ANR	164149	Identifier	zend_vm_stack_free_call_frame		163649	0					
ANR	164150	ArgumentList	call		163649	1					
ANR	164151	Argument	call		163649	0					
ANR	164152	Identifier	call		163649	0					
ANR	164153	ExpressionStatement	call = EX ( call )	2548:3:78840:78855	163649	9	True				
ANR	164154	AssignmentExpression	call = EX ( call )		163649	0		=			
ANR	164155	Identifier	call		163649	0					
ANR	164156	CallExpression	EX ( call )		163649	1					
ANR	164157	Callee	EX		163649	0					
ANR	164158	Identifier	EX		163649	0					
ANR	164159	ArgumentList	call		163649	1					
ANR	164160	Argument	call		163649	0					
ANR	164161	Identifier	call		163649	0					
ANR	164162	Condition	call	2549:11:78868:78871	163649	1	True				
ANR	164163	Identifier	call		163649	0					
ANR	164164	ReturnType	static void		163649	1					
ANR	164165	Identifier	cleanup_unfinished_calls		163649	2					
ANR	164166	ParameterList	"zend_execute_data * execute_data , uint32_t op_num"		163649	3					
ANR	164167	Parameter	zend_execute_data * execute_data	2427:37:75569:75599	163649	0	True				
ANR	164168	ParameterType	zend_execute_data *		163649	0					
ANR	164169	Identifier	execute_data		163649	1					
ANR	164170	Parameter	uint32_t op_num	2427:70:75602:75616	163649	1	True				
ANR	164171	ParameterType	uint32_t		163649	0					
ANR	164172	Identifier	op_num		163649	1					
ANR	164173	CFGEntryNode	ENTRY		163649		True				
ANR	164174	CFGExitNode	EXIT		163649		True				
ANR	164175	Symbol	opline -> op2		163649						
ANR	164176	Symbol	call -> This		163649						
ANR	164177	Symbol	call -> func		163649						
ANR	164178	Symbol	* call		163649						
ANR	164179	Symbol	call -> prev_execute_data		163649						
ANR	164180	Symbol	call -> func -> common . prototype		163649						
ANR	164181	Symbol	execute_data		163649						
ANR	164182	Symbol	EX ( func ) -> op_array . opcodes		163649						
ANR	164183	Symbol	UNEXPECTED		163649						
ANR	164184	Symbol	do_exit		163649						
ANR	164185	Symbol	* call -> func		163649						
ANR	164186	Symbol	Z_OBJ		163649						
ANR	164187	Symbol	opline		163649						
ANR	164188	Symbol	ZEND_CALL_CTOR		163649						
ANR	164189	Symbol	call -> func -> common		163649						
ANR	164190	Symbol	ZEND_INIT_FCALL		163649						
ANR	164191	Symbol	ZEND_CALL_NUM_ARGS		163649						
ANR	164192	Symbol	GC_REFCOUNT		163649						
ANR	164193	Symbol	ZEND_CALL_RELEASE_THIS		163649						
ANR	164194	Symbol	* * call		163649						
ANR	164195	Symbol	opline -> op2 . num		163649						
ANR	164196	Symbol	ZEND_INIT_DYNAMIC_CALL		163649						
ANR	164197	Symbol	level		163649						
ANR	164198	Symbol	call -> func -> common . function_name		163649						
ANR	164199	Symbol	op_num		163649						
ANR	164200	Symbol	ZEND_INIT_METHOD_CALL		163649						
ANR	164201	Symbol	ZEND_ACC_CALL_VIA_TRAMPOLINE		163649						
ANR	164202	Symbol	ZEND_CALL_CTOR_RESULT_UNUSED		163649						
ANR	164203	Symbol	call		163649						
ANR	164204	Symbol	EX ( func ) -> op_array		163649						
ANR	164205	Symbol	ZEND_ACC_CLOSURE		163649						
ANR	164206	Symbol	EX		163649						
ANR	164207	Symbol	func		163649						
ANR	164208	Symbol	* opline		163649						
ANR	164209	Symbol	opline -> opcode		163649						
ANR	164210	Symbol	ZEND_CALL_INFO		163649						
ANR	164211	Symbol	call -> func -> common . fn_flags		163649						
ANR	164212	Symbol	* EX		163649						
ANR	164213	Symbol	ZEND_INIT_STATIC_METHOD_CALL		163649						
ANR	164214	Symbol	ZEND_INIT_FCALL_BY_NAME		163649						
ANR	164215	Function	cleanup_live_vars	2554:0:78891:80689							
ANR	164216	FunctionDef	"cleanup_live_vars (zend_execute_data * execute_data , uint32_t op_num , uint32_t catch_op_num)"		164215	0					
ANR	164217	CompoundStatement		2555:0:79004:80689	164215	0					
ANR	164218	IdentifierDeclStatement	int i ;	2556:1:79007:79012	164215	0	True				
ANR	164219	IdentifierDecl	i		164215	0					
ANR	164220	IdentifierDeclType	int		164215	0					
ANR	164221	Identifier	i		164215	1					
ANR	164222	ForStatement	for ( i = 0 ; i < EX ( func ) -> op_array . last_brk_cont ; i ++ )		164215	1					
ANR	164223	ForInit	i = 0 ;	2558:6:79021:79026	164215	0	True				
ANR	164224	AssignmentExpression	i = 0		164215	0		=			
ANR	164225	Identifier	i		164215	0					
ANR	164226	PrimaryExpression	0		164215	1					
ANR	164227	Condition	i < EX ( func ) -> op_array . last_brk_cont	2558:13:79028:79063	164215	1	True				
ANR	164228	RelationalExpression	i < EX ( func ) -> op_array . last_brk_cont		164215	0		<			
ANR	164229	Identifier	i		164215	0					
ANR	164230	MemberAccess	EX ( func ) -> op_array . last_brk_cont		164215	1					
ANR	164231	PtrMemberAccess	EX ( func ) -> op_array		164215	0					
ANR	164232	CallExpression	EX ( func )		164215	0					
ANR	164233	Callee	EX		164215	0					
ANR	164234	Identifier	EX		164215	0					
ANR	164235	ArgumentList	func		164215	1					
ANR	164236	Argument	func		164215	0					
ANR	164237	Identifier	func		164215	0					
ANR	164238	Identifier	op_array		164215	1					
ANR	164239	Identifier	last_brk_cont		164215	1					
ANR	164240	PostIncDecOperationExpression	i ++	2558:51:79066:79068	164215	2	True				
ANR	164241	Identifier	i		164215	0					
ANR	164242	IncDec	++		164215	1					
ANR	164243	CompoundStatement		5:2:70:147	164215	3					
ANR	164244	IdentifierDeclStatement	const zend_brk_cont_element * brk_cont = & EX ( func ) -> op_array . brk_cont_array [ i ] ;	2559:2:79075:79152	164215	0	True				
ANR	164245	IdentifierDecl	* brk_cont = & EX ( func ) -> op_array . brk_cont_array [ i ]		164215	0					
ANR	164246	IdentifierDeclType	const zend_brk_cont_element *		164215	0					
ANR	164247	Identifier	brk_cont		164215	1					
ANR	164248	AssignmentExpression	* brk_cont = & EX ( func ) -> op_array . brk_cont_array [ i ]		164215	2		=			
ANR	164249	Identifier	brk_cont		164215	0					
ANR	164250	UnaryOperationExpression	& EX ( func ) -> op_array . brk_cont_array [ i ]		164215	1					
ANR	164251	UnaryOperator	&		164215	0					
ANR	164252	ArrayIndexing	EX ( func ) -> op_array . brk_cont_array [ i ]		164215	1					
ANR	164253	MemberAccess	EX ( func ) -> op_array . brk_cont_array		164215	0					
ANR	164254	PtrMemberAccess	EX ( func ) -> op_array		164215	0					
ANR	164255	CallExpression	EX ( func )		164215	0					
ANR	164256	Callee	EX		164215	0					
ANR	164257	Identifier	EX		164215	0					
ANR	164258	ArgumentList	func		164215	1					
ANR	164259	Argument	func		164215	0					
ANR	164260	Identifier	func		164215	0					
ANR	164261	Identifier	op_array		164215	1					
ANR	164262	Identifier	brk_cont_array		164215	1					
ANR	164263	Identifier	i		164215	1					
ANR	164264	IfStatement	if ( brk_cont -> start < 0 )		164215	1					
ANR	164265	Condition	brk_cont -> start < 0	2560:6:79160:79178	164215	0	True				
ANR	164266	RelationalExpression	brk_cont -> start < 0		164215	0		<			
ANR	164267	PtrMemberAccess	brk_cont -> start		164215	0					
ANR	164268	Identifier	brk_cont		164215	0					
ANR	164269	Identifier	start		164215	1					
ANR	164270	PrimaryExpression	0		164215	1					
ANR	164271	CompoundStatement		6:27:176:176	164215	1					
ANR	164272	ContinueStatement	continue ;	2561:3:79186:79194	164215	0	True				
ANR	164273	ElseStatement	else		164215	0					
ANR	164274	IfStatement	if ( brk_cont -> start > op_num )		164215	0					
ANR	164275	Condition	brk_cont -> start > op_num	2562:13:79209:79232	164215	0	True				
ANR	164276	RelationalExpression	brk_cont -> start > op_num		164215	0		>			
ANR	164277	PtrMemberAccess	brk_cont -> start		164215	0					
ANR	164278	Identifier	brk_cont		164215	0					
ANR	164279	Identifier	start		164215	1					
ANR	164280	Identifier	op_num		164215	1					
ANR	164281	CompoundStatement		8:39:230:230	164215	1					
ANR	164282	BreakStatement	break ;	2564:3:79288:79293	164215	0	True				
ANR	164283	ElseStatement	else		164215	0					
ANR	164284	IfStatement	if ( op_num < brk_cont -> brk )		164215	0					
ANR	164285	Condition	op_num < brk_cont -> brk	2565:13:79308:79329	164215	0	True				
ANR	164286	RelationalExpression	op_num < brk_cont -> brk		164215	0		<			
ANR	164287	Identifier	op_num		164215	0					
ANR	164288	PtrMemberAccess	brk_cont -> brk		164215	1					
ANR	164289	Identifier	brk_cont		164215	0					
ANR	164290	Identifier	brk		164215	1					
ANR	164291	CompoundStatement		11:37:327:327	164215	1					
ANR	164292	IfStatement	if ( ! catch_op_num || catch_op_num >= brk_cont -> brk )		164215	0					
ANR	164293	Condition	! catch_op_num || catch_op_num >= brk_cont -> brk	2566:7:79341:79386	164215	0	True				
ANR	164294	OrExpression	! catch_op_num || catch_op_num >= brk_cont -> brk		164215	0		||			
ANR	164295	UnaryOperationExpression	! catch_op_num		164215	0					
ANR	164296	UnaryOperator	!		164215	0					
ANR	164297	Identifier	catch_op_num		164215	1					
ANR	164298	RelationalExpression	catch_op_num >= brk_cont -> brk		164215	1		>=			
ANR	164299	Identifier	catch_op_num		164215	0					
ANR	164300	PtrMemberAccess	brk_cont -> brk		164215	1					
ANR	164301	Identifier	brk_cont		164215	0					
ANR	164302	Identifier	brk		164215	1					
ANR	164303	CompoundStatement		13:4:390:454	164215	1					
ANR	164304	IdentifierDeclStatement	zend_op * brk_opline = & EX ( func ) -> op_array . opcodes [ brk_cont -> brk ] ;	2567:4:79395:79459	164215	0	True				
ANR	164305	IdentifierDecl	* brk_opline = & EX ( func ) -> op_array . opcodes [ brk_cont -> brk ]		164215	0					
ANR	164306	IdentifierDeclType	zend_op *		164215	0					
ANR	164307	Identifier	brk_opline		164215	1					
ANR	164308	AssignmentExpression	* brk_opline = & EX ( func ) -> op_array . opcodes [ brk_cont -> brk ]		164215	2		=			
ANR	164309	Identifier	brk_opline		164215	0					
ANR	164310	UnaryOperationExpression	& EX ( func ) -> op_array . opcodes [ brk_cont -> brk ]		164215	1					
ANR	164311	UnaryOperator	&		164215	0					
ANR	164312	ArrayIndexing	EX ( func ) -> op_array . opcodes [ brk_cont -> brk ]		164215	1					
ANR	164313	MemberAccess	EX ( func ) -> op_array . opcodes		164215	0					
ANR	164314	PtrMemberAccess	EX ( func ) -> op_array		164215	0					
ANR	164315	CallExpression	EX ( func )		164215	0					
ANR	164316	Callee	EX		164215	0					
ANR	164317	Identifier	EX		164215	0					
ANR	164318	ArgumentList	func		164215	1					
ANR	164319	Argument	func		164215	0					
ANR	164320	Identifier	func		164215	0					
ANR	164321	Identifier	op_array		164215	1					
ANR	164322	Identifier	opcodes		164215	1					
ANR	164323	PtrMemberAccess	brk_cont -> brk		164215	1					
ANR	164324	Identifier	brk_cont		164215	0					
ANR	164325	Identifier	brk		164215	1					
ANR	164326	IfStatement	if ( brk_opline -> opcode == ZEND_FREE )		164215	1					
ANR	164327	Condition	brk_opline -> opcode == ZEND_FREE	2569:8:79470:79500	164215	0	True				
ANR	164328	EqualityExpression	brk_opline -> opcode == ZEND_FREE		164215	0		==			
ANR	164329	PtrMemberAccess	brk_opline -> opcode		164215	0					
ANR	164330	Identifier	brk_opline		164215	0					
ANR	164331	Identifier	opcode		164215	1					
ANR	164332	Identifier	ZEND_FREE		164215	1					
ANR	164333	CompoundStatement		15:41:498:498	164215	1					
ANR	164334	ExpressionStatement	zval_ptr_dtor_nogc ( EX_VAR ( brk_opline -> op1 . var ) )	2570:5:79510:79557	164215	0	True				
ANR	164335	CallExpression	zval_ptr_dtor_nogc ( EX_VAR ( brk_opline -> op1 . var ) )		164215	0					
ANR	164336	Callee	zval_ptr_dtor_nogc		164215	0					
ANR	164337	Identifier	zval_ptr_dtor_nogc		164215	0					
ANR	164338	ArgumentList	EX_VAR ( brk_opline -> op1 . var )		164215	1					
ANR	164339	Argument	EX_VAR ( brk_opline -> op1 . var )		164215	0					
ANR	164340	CallExpression	EX_VAR ( brk_opline -> op1 . var )		164215	0					
ANR	164341	Callee	EX_VAR		164215	0					
ANR	164342	Identifier	EX_VAR		164215	0					
ANR	164343	ArgumentList	brk_opline -> op1 . var		164215	1					
ANR	164344	Argument	brk_opline -> op1 . var		164215	0					
ANR	164345	MemberAccess	brk_opline -> op1 . var		164215	0					
ANR	164346	PtrMemberAccess	brk_opline -> op1		164215	0					
ANR	164347	Identifier	brk_opline		164215	0					
ANR	164348	Identifier	op1		164215	1					
ANR	164349	Identifier	var		164215	1					
ANR	164350	ElseStatement	else		164215	0					
ANR	164351	IfStatement	if ( brk_opline -> opcode == ZEND_FE_FREE )		164215	0					
ANR	164352	Condition	brk_opline -> opcode == ZEND_FE_FREE	2571:15:79574:79607	164215	0	True				
ANR	164353	EqualityExpression	brk_opline -> opcode == ZEND_FE_FREE		164215	0		==			
ANR	164354	PtrMemberAccess	brk_opline -> opcode		164215	0					
ANR	164355	Identifier	brk_opline		164215	0					
ANR	164356	Identifier	opcode		164215	1					
ANR	164357	Identifier	ZEND_FE_FREE		164215	1					
ANR	164358	CompoundStatement		18:5:612:651	164215	1					
ANR	164359	IdentifierDeclStatement	zval * var = EX_VAR ( brk_opline -> op1 . var ) ;	2572:5:79617:79656	164215	0	True				
ANR	164360	IdentifierDecl	* var = EX_VAR ( brk_opline -> op1 . var )		164215	0					
ANR	164361	IdentifierDeclType	zval *		164215	0					
ANR	164362	Identifier	var		164215	1					
ANR	164363	AssignmentExpression	* var = EX_VAR ( brk_opline -> op1 . var )		164215	2		=			
ANR	164364	Identifier	var		164215	0					
ANR	164365	CallExpression	EX_VAR ( brk_opline -> op1 . var )		164215	1					
ANR	164366	Callee	EX_VAR		164215	0					
ANR	164367	Identifier	EX_VAR		164215	0					
ANR	164368	ArgumentList	brk_opline -> op1 . var		164215	1					
ANR	164369	Argument	brk_opline -> op1 . var		164215	0					
ANR	164370	MemberAccess	brk_opline -> op1 . var		164215	0					
ANR	164371	PtrMemberAccess	brk_opline -> op1		164215	0					
ANR	164372	Identifier	brk_opline		164215	0					
ANR	164373	Identifier	op1		164215	1					
ANR	164374	Identifier	var		164215	1					
ANR	164375	IfStatement	if ( Z_TYPE_P ( var ) != IS_ARRAY && Z_FE_ITER_P ( var ) != ( uint32_t ) - 1 )		164215	1					
ANR	164376	Condition	Z_TYPE_P ( var ) != IS_ARRAY && Z_FE_ITER_P ( var ) != ( uint32_t ) - 1	2573:9:79667:79727	164215	0	True				
ANR	164377	AndExpression	Z_TYPE_P ( var ) != IS_ARRAY && Z_FE_ITER_P ( var ) != ( uint32_t ) - 1		164215	0		&&			
ANR	164378	EqualityExpression	Z_TYPE_P ( var ) != IS_ARRAY		164215	0		!=			
ANR	164379	CallExpression	Z_TYPE_P ( var )		164215	0					
ANR	164380	Callee	Z_TYPE_P		164215	0					
ANR	164381	Identifier	Z_TYPE_P		164215	0					
ANR	164382	ArgumentList	var		164215	1					
ANR	164383	Argument	var		164215	0					
ANR	164384	Identifier	var		164215	0					
ANR	164385	Identifier	IS_ARRAY		164215	1					
ANR	164386	EqualityExpression	Z_FE_ITER_P ( var ) != ( uint32_t ) - 1		164215	1		!=			
ANR	164387	CallExpression	Z_FE_ITER_P ( var )		164215	0					
ANR	164388	Callee	Z_FE_ITER_P		164215	0					
ANR	164389	Identifier	Z_FE_ITER_P		164215	0					
ANR	164390	ArgumentList	var		164215	1					
ANR	164391	Argument	var		164215	0					
ANR	164392	Identifier	var		164215	0					
ANR	164393	CastExpression	( uint32_t ) - 1		164215	1					
ANR	164394	CastTarget	uint32_t		164215	0					
ANR	164395	UnaryOperationExpression	- 1		164215	1					
ANR	164396	UnaryOperator	-		164215	0					
ANR	164397	PrimaryExpression	1		164215	1					
ANR	164398	CompoundStatement		19:72:725:725	164215	1					
ANR	164399	ExpressionStatement	zend_hash_iterator_del ( Z_FE_ITER_P ( var ) )	2574:6:79738:79778	164215	0	True				
ANR	164400	CallExpression	zend_hash_iterator_del ( Z_FE_ITER_P ( var ) )		164215	0					
ANR	164401	Callee	zend_hash_iterator_del		164215	0					
ANR	164402	Identifier	zend_hash_iterator_del		164215	0					
ANR	164403	ArgumentList	Z_FE_ITER_P ( var )		164215	1					
ANR	164404	Argument	Z_FE_ITER_P ( var )		164215	0					
ANR	164405	CallExpression	Z_FE_ITER_P ( var )		164215	0					
ANR	164406	Callee	Z_FE_ITER_P		164215	0					
ANR	164407	Identifier	Z_FE_ITER_P		164215	0					
ANR	164408	ArgumentList	var		164215	1					
ANR	164409	Argument	var		164215	0					
ANR	164410	Identifier	var		164215	0					
ANR	164411	ExpressionStatement	zval_ptr_dtor_nogc ( var )	2576:5:79792:79815	164215	2	True				
ANR	164412	CallExpression	zval_ptr_dtor_nogc ( var )		164215	0					
ANR	164413	Callee	zval_ptr_dtor_nogc		164215	0					
ANR	164414	Identifier	zval_ptr_dtor_nogc		164215	0					
ANR	164415	ArgumentList	var		164215	1					
ANR	164416	Argument	var		164215	0					
ANR	164417	Identifier	var		164215	0					
ANR	164418	ElseStatement	else		164215	0					
ANR	164419	IfStatement	if ( brk_opline -> opcode == ZEND_ROPE_END )		164215	0					
ANR	164420	Condition	brk_opline -> opcode == ZEND_ROPE_END	2577:15:79832:79866	164215	0	True				
ANR	164421	EqualityExpression	brk_opline -> opcode == ZEND_ROPE_END		164215	0		==			
ANR	164422	PtrMemberAccess	brk_opline -> opcode		164215	0					
ANR	164423	Identifier	brk_opline		164215	0					
ANR	164424	Identifier	opcode		164215	1					
ANR	164425	Identifier	ZEND_ROPE_END		164215	1					
ANR	164426	CompoundStatement		25:5:943:994	164215	1					
ANR	164427	IdentifierDeclStatement	zend_string * * rope = ( zend_string * * ) EX_VAR ( brk_opline -> op1 . var ) ;	2578:5:79876:79941	164215	0	True				
ANR	164428	IdentifierDecl	* * rope = ( zend_string * * ) EX_VAR ( brk_opline -> op1 . var )		164215	0					
ANR	164429	IdentifierDeclType	zend_string * *		164215	0					
ANR	164430	Identifier	rope		164215	1					
ANR	164431	AssignmentExpression	* * rope = ( zend_string * * ) EX_VAR ( brk_opline -> op1 . var )		164215	2		=			
ANR	164432	Identifier	rope		164215	0					
ANR	164433	CastExpression	( zend_string * * ) EX_VAR ( brk_opline -> op1 . var )		164215	1					
ANR	164434	CastTarget	zend_string * *		164215	0					
ANR	164435	CallExpression	EX_VAR ( brk_opline -> op1 . var )		164215	1					
ANR	164436	Callee	EX_VAR		164215	0					
ANR	164437	Identifier	EX_VAR		164215	0					
ANR	164438	ArgumentList	brk_opline -> op1 . var		164215	1					
ANR	164439	Argument	brk_opline -> op1 . var		164215	0					
ANR	164440	MemberAccess	brk_opline -> op1 . var		164215	0					
ANR	164441	PtrMemberAccess	brk_opline -> op1		164215	0					
ANR	164442	Identifier	brk_opline		164215	0					
ANR	164443	Identifier	op1		164215	1					
ANR	164444	Identifier	var		164215	1					
ANR	164445	IdentifierDeclStatement	zend_op * last = EX ( func ) -> op_array . opcodes + op_num ;	2579:5:79948:79999	164215	1	True				
ANR	164446	IdentifierDecl	* last = EX ( func ) -> op_array . opcodes + op_num		164215	0					
ANR	164447	IdentifierDeclType	zend_op *		164215	0					
ANR	164448	Identifier	last		164215	1					
ANR	164449	AssignmentExpression	* last = EX ( func ) -> op_array . opcodes + op_num		164215	2		=			
ANR	164450	Identifier	last		164215	0					
ANR	164451	AdditiveExpression	EX ( func ) -> op_array . opcodes + op_num		164215	1		+			
ANR	164452	MemberAccess	EX ( func ) -> op_array . opcodes		164215	0					
ANR	164453	PtrMemberAccess	EX ( func ) -> op_array		164215	0					
ANR	164454	CallExpression	EX ( func )		164215	0					
ANR	164455	Callee	EX		164215	0					
ANR	164456	Identifier	EX		164215	0					
ANR	164457	ArgumentList	func		164215	1					
ANR	164458	Argument	func		164215	0					
ANR	164459	Identifier	func		164215	0					
ANR	164460	Identifier	op_array		164215	1					
ANR	164461	Identifier	opcodes		164215	1					
ANR	164462	Identifier	op_num		164215	1					
ANR	164463	WhileStatement	while ( ( last -> opcode != ZEND_ROPE_ADD && last -> opcode != ZEND_ROPE_INIT ) || last -> result . var != brk_opline -> op1 . var )		164215	2					
ANR	164464	Condition	( last -> opcode != ZEND_ROPE_ADD && last -> opcode != ZEND_ROPE_INIT ) || last -> result . var != brk_opline -> op1 . var	2580:12:80013:80127	164215	0	True				
ANR	164465	OrExpression	( last -> opcode != ZEND_ROPE_ADD && last -> opcode != ZEND_ROPE_INIT ) || last -> result . var != brk_opline -> op1 . var		164215	0		||			
ANR	164466	AndExpression	last -> opcode != ZEND_ROPE_ADD && last -> opcode != ZEND_ROPE_INIT		164215	0		&&			
ANR	164467	EqualityExpression	last -> opcode != ZEND_ROPE_ADD		164215	0		!=			
ANR	164468	PtrMemberAccess	last -> opcode		164215	0					
ANR	164469	Identifier	last		164215	0					
ANR	164470	Identifier	opcode		164215	1					
ANR	164471	Identifier	ZEND_ROPE_ADD		164215	1					
ANR	164472	EqualityExpression	last -> opcode != ZEND_ROPE_INIT		164215	1		!=			
ANR	164473	PtrMemberAccess	last -> opcode		164215	0					
ANR	164474	Identifier	last		164215	0					
ANR	164475	Identifier	opcode		164215	1					
ANR	164476	Identifier	ZEND_ROPE_INIT		164215	1					
ANR	164477	EqualityExpression	last -> result . var != brk_opline -> op1 . var		164215	1		!=			
ANR	164478	MemberAccess	last -> result . var		164215	0					
ANR	164479	PtrMemberAccess	last -> result		164215	0					
ANR	164480	Identifier	last		164215	0					
ANR	164481	Identifier	result		164215	1					
ANR	164482	Identifier	var		164215	1					
ANR	164483	MemberAccess	brk_opline -> op1 . var		164215	1					
ANR	164484	PtrMemberAccess	brk_opline -> op1		164215	0					
ANR	164485	Identifier	brk_opline		164215	0					
ANR	164486	Identifier	op1		164215	1					
ANR	164487	Identifier	var		164215	1					
ANR	164488	CompoundStatement		27:51:1125:1125	164215	1					
ANR	164489	ExpressionStatement	ZEND_ASSERT ( last >= EX ( func ) -> op_array . opcodes )	2582:6:80138:80185	164215	0	True				
ANR	164490	CallExpression	ZEND_ASSERT ( last >= EX ( func ) -> op_array . opcodes )		164215	0					
ANR	164491	Callee	ZEND_ASSERT		164215	0					
ANR	164492	Identifier	ZEND_ASSERT		164215	0					
ANR	164493	ArgumentList	last >= EX ( func ) -> op_array . opcodes		164215	1					
ANR	164494	Argument	last >= EX ( func ) -> op_array . opcodes		164215	0					
ANR	164495	RelationalExpression	last >= EX ( func ) -> op_array . opcodes		164215	0		>=			
ANR	164496	Identifier	last		164215	0					
ANR	164497	MemberAccess	EX ( func ) -> op_array . opcodes		164215	1					
ANR	164498	PtrMemberAccess	EX ( func ) -> op_array		164215	0					
ANR	164499	CallExpression	EX ( func )		164215	0					
ANR	164500	Callee	EX		164215	0					
ANR	164501	Identifier	EX		164215	0					
ANR	164502	ArgumentList	func		164215	1					
ANR	164503	Argument	func		164215	0					
ANR	164504	Identifier	func		164215	0					
ANR	164505	Identifier	op_array		164215	1					
ANR	164506	Identifier	opcodes		164215	1					
ANR	164507	ExpressionStatement	last --	2583:6:80193:80199	164215	1	True				
ANR	164508	PostIncDecOperationExpression	last --		164215	0					
ANR	164509	Identifier	last		164215	0					
ANR	164510	IncDec	--		164215	1					
ANR	164511	IfStatement	if ( last -> opcode == ZEND_ROPE_INIT )		164215	3					
ANR	164512	Condition	last -> opcode == ZEND_ROPE_INIT	2585:9:80217:80246	164215	0	True				
ANR	164513	EqualityExpression	last -> opcode == ZEND_ROPE_INIT		164215	0		==			
ANR	164514	PtrMemberAccess	last -> opcode		164215	0					
ANR	164515	Identifier	last		164215	0					
ANR	164516	Identifier	opcode		164215	1					
ANR	164517	Identifier	ZEND_ROPE_INIT		164215	1					
ANR	164518	CompoundStatement		31:41:1244:1244	164215	1					
ANR	164519	ExpressionStatement	zend_string_release ( * rope )	2586:6:80257:80283	164215	0	True				
ANR	164520	CallExpression	zend_string_release ( * rope )		164215	0					
ANR	164521	Callee	zend_string_release		164215	0					
ANR	164522	Identifier	zend_string_release		164215	0					
ANR	164523	ArgumentList	* rope		164215	1					
ANR	164524	Argument	* rope		164215	0					
ANR	164525	UnaryOperationExpression	* rope		164215	0					
ANR	164526	UnaryOperator	*		164215	0					
ANR	164527	Identifier	rope		164215	1					
ANR	164528	ElseStatement	else		164215	0					
ANR	164529	CompoundStatement		34:6:1300:1328	164215	0					
ANR	164530	IdentifierDeclStatement	int j = last -> extended_value ;	2588:6:80305:80333	164215	0	True				
ANR	164531	IdentifierDecl	j = last -> extended_value		164215	0					
ANR	164532	IdentifierDeclType	int		164215	0					
ANR	164533	Identifier	j		164215	1					
ANR	164534	AssignmentExpression	j = last -> extended_value		164215	2		=			
ANR	164535	Identifier	j		164215	0					
ANR	164536	PtrMemberAccess	last -> extended_value		164215	1					
ANR	164537	Identifier	last		164215	0					
ANR	164538	Identifier	extended_value		164215	1					
ANR	164539	DoStatement	do		164215	1					
ANR	164540	CompoundStatement		35:9:1339:1339	164215	0					
ANR	164541	ExpressionStatement	zend_string_release ( rope [ j ] )	2590:7:80353:80381	164215	0	True				
ANR	164542	CallExpression	zend_string_release ( rope [ j ] )		164215	0					
ANR	164543	Callee	zend_string_release		164215	0					
ANR	164544	Identifier	zend_string_release		164215	0					
ANR	164545	ArgumentList	rope [ j ]		164215	1					
ANR	164546	Argument	rope [ j ]		164215	0					
ANR	164547	ArrayIndexing	rope [ j ]		164215	0					
ANR	164548	Identifier	rope		164215	0					
ANR	164549	Identifier	j		164215	1					
ANR	164550	Condition	j --	2591:15:80398:80400	164215	1	True				
ANR	164551	PostIncDecOperationExpression	j --		164215	0					
ANR	164552	Identifier	j		164215	0					
ANR	164553	IncDec	--		164215	1					
ANR	164554	ElseStatement	else		164215	0					
ANR	164555	IfStatement	if ( brk_opline -> opcode == ZEND_END_SILENCE )		164215	0					
ANR	164556	Condition	brk_opline -> opcode == ZEND_END_SILENCE	2593:15:80426:80463	164215	0	True				
ANR	164557	EqualityExpression	brk_opline -> opcode == ZEND_END_SILENCE		164215	0		==			
ANR	164558	PtrMemberAccess	brk_opline -> opcode		164215	0					
ANR	164559	Identifier	brk_opline		164215	0					
ANR	164560	Identifier	opcode		164215	1					
ANR	164561	Identifier	ZEND_END_SILENCE		164215	1					
ANR	164562	CompoundStatement		39:55:1461:1461	164215	1					
ANR	164563	IfStatement	if ( ! EG ( error_reporting ) && Z_LVAL_P ( EX_VAR ( brk_opline -> op1 . var ) ) != 0 )		164215	0					
ANR	164564	Condition	! EG ( error_reporting ) && Z_LVAL_P ( EX_VAR ( brk_opline -> op1 . var ) ) != 0	2595:9:80527:80592	164215	0	True				
ANR	164565	AndExpression	! EG ( error_reporting ) && Z_LVAL_P ( EX_VAR ( brk_opline -> op1 . var ) ) != 0		164215	0		&&			
ANR	164566	UnaryOperationExpression	! EG ( error_reporting )		164215	0					
ANR	164567	UnaryOperator	!		164215	0					
ANR	164568	CallExpression	EG ( error_reporting )		164215	1					
ANR	164569	Callee	EG		164215	0					
ANR	164570	Identifier	EG		164215	0					
ANR	164571	ArgumentList	error_reporting		164215	1					
ANR	164572	Argument	error_reporting		164215	0					
ANR	164573	Identifier	error_reporting		164215	0					
ANR	164574	EqualityExpression	Z_LVAL_P ( EX_VAR ( brk_opline -> op1 . var ) ) != 0		164215	1		!=			
ANR	164575	CallExpression	Z_LVAL_P ( EX_VAR ( brk_opline -> op1 . var ) )		164215	0					
ANR	164576	Callee	Z_LVAL_P		164215	0					
ANR	164577	Identifier	Z_LVAL_P		164215	0					
ANR	164578	ArgumentList	EX_VAR ( brk_opline -> op1 . var )		164215	1					
ANR	164579	Argument	EX_VAR ( brk_opline -> op1 . var )		164215	0					
ANR	164580	CallExpression	EX_VAR ( brk_opline -> op1 . var )		164215	0					
ANR	164581	Callee	EX_VAR		164215	0					
ANR	164582	Identifier	EX_VAR		164215	0					
ANR	164583	ArgumentList	brk_opline -> op1 . var		164215	1					
ANR	164584	Argument	brk_opline -> op1 . var		164215	0					
ANR	164585	MemberAccess	brk_opline -> op1 . var		164215	0					
ANR	164586	PtrMemberAccess	brk_opline -> op1		164215	0					
ANR	164587	Identifier	brk_opline		164215	0					
ANR	164588	Identifier	op1		164215	1					
ANR	164589	Identifier	var		164215	1					
ANR	164590	PrimaryExpression	0		164215	1					
ANR	164591	CompoundStatement		41:77:1590:1590	164215	1					
ANR	164592	ExpressionStatement	EG ( error_reporting ) = Z_LVAL_P ( EX_VAR ( brk_opline -> op1 . var ) )	2596:6:80603:80662	164215	0	True				
ANR	164593	AssignmentExpression	EG ( error_reporting ) = Z_LVAL_P ( EX_VAR ( brk_opline -> op1 . var ) )		164215	0		=			
ANR	164594	CallExpression	EG ( error_reporting )		164215	0					
ANR	164595	Callee	EG		164215	0					
ANR	164596	Identifier	EG		164215	0					
ANR	164597	ArgumentList	error_reporting		164215	1					
ANR	164598	Argument	error_reporting		164215	0					
ANR	164599	Identifier	error_reporting		164215	0					
ANR	164600	CallExpression	Z_LVAL_P ( EX_VAR ( brk_opline -> op1 . var ) )		164215	1					
ANR	164601	Callee	Z_LVAL_P		164215	0					
ANR	164602	Identifier	Z_LVAL_P		164215	0					
ANR	164603	ArgumentList	EX_VAR ( brk_opline -> op1 . var )		164215	1					
ANR	164604	Argument	EX_VAR ( brk_opline -> op1 . var )		164215	0					
ANR	164605	CallExpression	EX_VAR ( brk_opline -> op1 . var )		164215	0					
ANR	164606	Callee	EX_VAR		164215	0					
ANR	164607	Identifier	EX_VAR		164215	0					
ANR	164608	ArgumentList	brk_opline -> op1 . var		164215	1					
ANR	164609	Argument	brk_opline -> op1 . var		164215	0					
ANR	164610	MemberAccess	brk_opline -> op1 . var		164215	0					
ANR	164611	PtrMemberAccess	brk_opline -> op1		164215	0					
ANR	164612	Identifier	brk_opline		164215	0					
ANR	164613	Identifier	op1		164215	1					
ANR	164614	Identifier	var		164215	1					
ANR	164615	ReturnType	static void		164215	1					
ANR	164616	Identifier	cleanup_live_vars		164215	2					
ANR	164617	ParameterList	"zend_execute_data * execute_data , uint32_t op_num , uint32_t catch_op_num"		164215	3					
ANR	164618	Parameter	zend_execute_data * execute_data	2554:30:78921:78951	164215	0	True				
ANR	164619	ParameterType	zend_execute_data *		164215	0					
ANR	164620	Identifier	execute_data		164215	1					
ANR	164621	Parameter	uint32_t op_num	2554:63:78954:78968	164215	1	True				
ANR	164622	ParameterType	uint32_t		164215	0					
ANR	164623	Identifier	op_num		164215	1					
ANR	164624	Parameter	uint32_t catch_op_num	2554:80:78971:78991	164215	2	True				
ANR	164625	ParameterType	uint32_t		164215	0					
ANR	164626	Identifier	catch_op_num		164215	1					
ANR	164627	CFGEntryNode	ENTRY		164215		True				
ANR	164628	CFGExitNode	EXIT		164215		True				
ANR	164629	Symbol	brk_cont -> brk		164215						
ANR	164630	Symbol	ZEND_FREE		164215						
ANR	164631	Symbol	rope		164215						
ANR	164632	Symbol	* brk_opline		164215						
ANR	164633	Symbol	ZEND_FE_FREE		164215						
ANR	164634	Symbol	error_reporting		164215						
ANR	164635	Symbol	* rope		164215						
ANR	164636	Symbol	brk_opline -> opcode		164215						
ANR	164637	Symbol	execute_data		164215						
ANR	164638	Symbol	EX ( func ) -> op_array . opcodes		164215						
ANR	164639	Symbol	brk_opline		164215						
ANR	164640	Symbol	EX ( func ) -> op_array . last_brk_cont		164215						
ANR	164641	Symbol	IS_ARRAY		164215						
ANR	164642	Symbol	Z_FE_ITER_P		164215						
ANR	164643	Symbol	EX ( func ) -> op_array . brk_cont_array		164215						
ANR	164644	Symbol	last -> result		164215						
ANR	164645	Symbol	ZEND_END_SILENCE		164215						
ANR	164646	Symbol	* brk_cont		164215						
ANR	164647	Symbol	ZEND_ROPE_ADD		164215						
ANR	164648	Symbol	EG		164215						
ANR	164649	Symbol	brk_opline -> op1		164215						
ANR	164650	Symbol	last		164215						
ANR	164651	Symbol	var		164215						
ANR	164652	Symbol	catch_op_num		164215						
ANR	164653	Symbol	op_num		164215						
ANR	164654	Symbol	i		164215						
ANR	164655	Symbol	j		164215						
ANR	164656	Symbol	Z_TYPE_P		164215						
ANR	164657	Symbol	last -> result . var		164215						
ANR	164658	Symbol	* last		164215						
ANR	164659	Symbol	last -> extended_value		164215						
ANR	164660	Symbol	brk_cont		164215						
ANR	164661	Symbol	Z_LVAL_P		164215						
ANR	164662	Symbol	EX ( func ) -> op_array		164215						
ANR	164663	Symbol	EX		164215						
ANR	164664	Symbol	func		164215						
ANR	164665	Symbol	* j		164215						
ANR	164666	Symbol	brk_cont -> start		164215						
ANR	164667	Symbol	EX_VAR		164215						
ANR	164668	Symbol	* EX		164215						
ANR	164669	Symbol	brk_opline -> op1 . var		164215						
ANR	164670	Symbol	ZEND_ROPE_END		164215						
ANR	164671	Symbol	last -> opcode		164215						
ANR	164672	Symbol	ZEND_ROPE_INIT		164215						
ANR	164673	Function	zend_cleanup_unfinished_execution	2605:0:80702:80921							
ANR	164674	FunctionDef	"zend_cleanup_unfinished_execution (zend_execute_data * execute_data , uint32_t op_num , uint32_t catch_op_num)"		164673	0					
ANR	164675	CompoundStatement		2605:112:80814:80921	164673	0					
ANR	164676	ExpressionStatement	"cleanup_unfinished_calls ( execute_data , op_num )"	2606:1:80817:80863	164673	0	True				
ANR	164677	CallExpression	"cleanup_unfinished_calls ( execute_data , op_num )"		164673	0					
ANR	164678	Callee	cleanup_unfinished_calls		164673	0					
ANR	164679	Identifier	cleanup_unfinished_calls		164673	0					
ANR	164680	ArgumentList	execute_data		164673	1					
ANR	164681	Argument	execute_data		164673	0					
ANR	164682	Identifier	execute_data		164673	0					
ANR	164683	Argument	op_num		164673	1					
ANR	164684	Identifier	op_num		164673	0					
ANR	164685	ExpressionStatement	"cleanup_live_vars ( execute_data , op_num , catch_op_num )"	2607:1:80866:80919	164673	1	True				
ANR	164686	CallExpression	"cleanup_live_vars ( execute_data , op_num , catch_op_num )"		164673	0					
ANR	164687	Callee	cleanup_live_vars		164673	0					
ANR	164688	Identifier	cleanup_live_vars		164673	0					
ANR	164689	ArgumentList	execute_data		164673	1					
ANR	164690	Argument	execute_data		164673	0					
ANR	164691	Identifier	execute_data		164673	0					
ANR	164692	Argument	op_num		164673	1					
ANR	164693	Identifier	op_num		164673	0					
ANR	164694	Argument	catch_op_num		164673	2					
ANR	164695	Identifier	catch_op_num		164673	0					
ANR	164696	ReturnType	void		164673	1					
ANR	164697	Identifier	zend_cleanup_unfinished_execution		164673	2					
ANR	164698	ParameterList	"zend_execute_data * execute_data , uint32_t op_num , uint32_t catch_op_num"		164673	3					
ANR	164699	Parameter	zend_execute_data * execute_data	2605:39:80741:80771	164673	0	True				
ANR	164700	ParameterType	zend_execute_data *		164673	0					
ANR	164701	Identifier	execute_data		164673	1					
ANR	164702	Parameter	uint32_t op_num	2605:72:80774:80788	164673	1	True				
ANR	164703	ParameterType	uint32_t		164673	0					
ANR	164704	Identifier	op_num		164673	1					
ANR	164705	Parameter	uint32_t catch_op_num	2605:89:80791:80811	164673	2	True				
ANR	164706	ParameterType	uint32_t		164673	0					
ANR	164707	Identifier	catch_op_num		164673	1					
ANR	164708	CFGEntryNode	ENTRY		164673		True				
ANR	164709	CFGExitNode	EXIT		164673		True				
ANR	164710	Symbol	catch_op_num		164673						
ANR	164711	Symbol	op_num		164673						
ANR	164712	Symbol	execute_data		164673						
ANR	164713	DeclStmt									
ANR	164714	Decl							int	int	__result
ANR	164715	Function	zend_set_user_opcode_handler	2714:0:83717:84097							
ANR	164716	FunctionDef	"zend_set_user_opcode_handler (zend_uchar opcode , user_opcode_handler_t handler)"		164715	0					
ANR	164717	CompoundStatement		2715:0:83809:84097	164715	0					
ANR	164718	IfStatement	if ( opcode != ZEND_USER_OPCODE )		164715	0					
ANR	164719	Condition	opcode != ZEND_USER_OPCODE	2716:5:83816:83841	164715	0	True				
ANR	164720	EqualityExpression	opcode != ZEND_USER_OPCODE		164715	0		!=			
ANR	164721	Identifier	opcode		164715	0					
ANR	164722	Identifier	ZEND_USER_OPCODE		164715	1					
ANR	164723	CompoundStatement		2:33:34:34	164715	1					
ANR	164724	IfStatement	if ( handler == NULL )		164715	0					
ANR	164725	Condition	handler == NULL	2717:6:83852:83866	164715	0	True				
ANR	164726	EqualityExpression	handler == NULL		164715	0		==			
ANR	164727	Identifier	handler		164715	0					
ANR	164728	Identifier	NULL		164715	1					
ANR	164729	CompoundStatement		3:23:59:59	164715	1					
ANR	164730	ExpressionStatement	zend_user_opcodes [ opcode ] = opcode	2719:3:83912:83946	164715	0	True				
ANR	164731	AssignmentExpression	zend_user_opcodes [ opcode ] = opcode		164715	0		=			
ANR	164732	ArrayIndexing	zend_user_opcodes [ opcode ]		164715	0					
ANR	164733	Identifier	zend_user_opcodes		164715	0					
ANR	164734	Identifier	opcode		164715	1					
ANR	164735	Identifier	opcode		164715	1					
ANR	164736	ElseStatement	else		164715	0					
ANR	164737	CompoundStatement		6:9:147:147	164715	0					
ANR	164738	ExpressionStatement	zend_user_opcodes [ opcode ] = ZEND_USER_OPCODE	2721:3:83962:84006	164715	0	True				
ANR	164739	AssignmentExpression	zend_user_opcodes [ opcode ] = ZEND_USER_OPCODE		164715	0		=			
ANR	164740	ArrayIndexing	zend_user_opcodes [ opcode ]		164715	0					
ANR	164741	Identifier	zend_user_opcodes		164715	0					
ANR	164742	Identifier	opcode		164715	1					
ANR	164743	Identifier	ZEND_USER_OPCODE		164715	1					
ANR	164744	ExpressionStatement	zend_user_opcode_handlers [ opcode ] = handler	2723:2:84014:84057	164715	1	True				
ANR	164745	AssignmentExpression	zend_user_opcode_handlers [ opcode ] = handler		164715	0		=			
ANR	164746	ArrayIndexing	zend_user_opcode_handlers [ opcode ]		164715	0					
ANR	164747	Identifier	zend_user_opcode_handlers		164715	0					
ANR	164748	Identifier	opcode		164715	1					
ANR	164749	Identifier	handler		164715	1					
ANR	164750	ReturnStatement	return SUCCESS ;	2724:2:84061:84075	164715	2	True				
ANR	164751	Identifier	SUCCESS		164715	0					
ANR	164752	ReturnStatement	return FAILURE ;	2726:1:84081:84095	164715	1	True				
ANR	164753	Identifier	FAILURE		164715	0					
ANR	164754	ReturnType	ZEND_API int		164715	1					
ANR	164755	Identifier	zend_set_user_opcode_handler		164715	2					
ANR	164756	ParameterList	"zend_uchar opcode , user_opcode_handler_t handler"		164715	3					
ANR	164757	Parameter	zend_uchar opcode	2714:42:83759:83775	164715	0	True				
ANR	164758	ParameterType	zend_uchar		164715	0					
ANR	164759	Identifier	opcode		164715	1					
ANR	164760	Parameter	user_opcode_handler_t handler	2714:61:83778:83806	164715	1	True				
ANR	164761	ParameterType	user_opcode_handler_t		164715	0					
ANR	164762	Identifier	handler		164715	1					
ANR	164763	CFGEntryNode	ENTRY		164715		True				
ANR	164764	CFGExitNode	EXIT		164715		True				
ANR	164765	Symbol	handler		164715						
ANR	164766	Symbol	NULL		164715						
ANR	164767	Symbol	SUCCESS		164715						
ANR	164768	Symbol	ZEND_USER_OPCODE		164715						
ANR	164769	Symbol	* zend_user_opcodes		164715						
ANR	164770	Symbol	opcode		164715						
ANR	164771	Symbol	zend_user_opcodes		164715						
ANR	164772	Symbol	zend_user_opcode_handlers		164715						
ANR	164773	Symbol	FAILURE		164715						
ANR	164774	Symbol	* zend_user_opcode_handlers		164715						
ANR	164775	Symbol	* opcode		164715						
ANR	164776	Function	zend_get_user_opcode_handler	2729:0:84100:84224							
ANR	164777	FunctionDef	zend_get_user_opcode_handler (zend_uchar opcode)		164776	0					
ANR	164778	CompoundStatement		2730:0:84179:84224	164776	0					
ANR	164779	ReturnStatement	return zend_user_opcode_handlers [ opcode ] ;	2731:1:84182:84222	164776	0	True				
ANR	164780	ArrayIndexing	zend_user_opcode_handlers [ opcode ]		164776	0					
ANR	164781	Identifier	zend_user_opcode_handlers		164776	0					
ANR	164782	Identifier	opcode		164776	1					
ANR	164783	ReturnType	ZEND_API user_opcode_handler_t		164776	1					
ANR	164784	Identifier	zend_get_user_opcode_handler		164776	2					
ANR	164785	ParameterList	zend_uchar opcode		164776	3					
ANR	164786	Parameter	zend_uchar opcode	2729:60:84160:84176	164776	0	True				
ANR	164787	ParameterType	zend_uchar		164776	0					
ANR	164788	Identifier	opcode		164776	1					
ANR	164789	CFGEntryNode	ENTRY		164776		True				
ANR	164790	CFGExitNode	EXIT		164776		True				
ANR	164791	Symbol	opcode		164776						
ANR	164792	Symbol	zend_user_opcode_handlers		164776						
ANR	164793	Symbol	* zend_user_opcode_handlers		164776						
ANR	164794	Symbol	* opcode		164776						
ANR	164795	Function	zend_get_zval_ptr	2734:0:84227:84444							
ANR	164796	FunctionDef	"zend_get_zval_ptr (int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type)"		164795	0					
ANR	164797	CompoundStatement		2735:0:84371:84444	164795	0					
ANR	164798	ReturnStatement	"return get_zval_ptr ( op_type , * node , execute_data , should_free , type ) ;"	2736:1:84374:84442	164795	0	True				
ANR	164799	CallExpression	"get_zval_ptr ( op_type , * node , execute_data , should_free , type )"		164795	0					
ANR	164800	Callee	get_zval_ptr		164795	0					
ANR	164801	Identifier	get_zval_ptr		164795	0					
ANR	164802	ArgumentList	op_type		164795	1					
ANR	164803	Argument	op_type		164795	0					
ANR	164804	Identifier	op_type		164795	0					
ANR	164805	Argument	* node		164795	1					
ANR	164806	UnaryOperationExpression	* node		164795	0					
ANR	164807	UnaryOperator	*		164795	0					
ANR	164808	Identifier	node		164795	1					
ANR	164809	Argument	execute_data		164795	2					
ANR	164810	Identifier	execute_data		164795	0					
ANR	164811	Argument	should_free		164795	3					
ANR	164812	Identifier	should_free		164795	0					
ANR	164813	Argument	type		164795	4					
ANR	164814	Identifier	type		164795	0					
ANR	164815	ReturnType	ZEND_API zval *		164795	1					
ANR	164816	Identifier	zend_get_zval_ptr		164795	2					
ANR	164817	ParameterList	"int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type"		164795	3					
ANR	164818	Parameter	int op_type	2734:33:84260:84270	164795	0	True				
ANR	164819	ParameterType	int		164795	0					
ANR	164820	Identifier	op_type		164795	1					
ANR	164821	Parameter	const znode_op * node	2734:46:84273:84292	164795	1	True				
ANR	164822	ParameterType	const znode_op *		164795	0					
ANR	164823	Identifier	node		164795	1					
ANR	164824	Parameter	const zend_execute_data * execute_data	2734:68:84295:84331	164795	2	True				
ANR	164825	ParameterType	const zend_execute_data *		164795	0					
ANR	164826	Identifier	execute_data		164795	1					
ANR	164827	Parameter	zend_free_op * should_free	2734:107:84334:84358	164795	3	True				
ANR	164828	ParameterType	zend_free_op *		164795	0					
ANR	164829	Identifier	should_free		164795	1					
ANR	164830	Parameter	int type	2734:134:84361:84368	164795	4	True				
ANR	164831	ParameterType	int		164795	0					
ANR	164832	Identifier	type		164795	1					
ANR	164833	CFGEntryNode	ENTRY		164795		True				
ANR	164834	CFGExitNode	EXIT		164795		True				
ANR	164835	Symbol	should_free		164795						
ANR	164836	Symbol	node		164795						
ANR	164837	Symbol	* node		164795						
ANR	164838	Symbol	op_type		164795						
ANR	164839	Symbol	get_zval_ptr		164795						
ANR	164840	Symbol	type		164795						
ANR	164841	Symbol	execute_data		164795						
ANR	164842	Function	zend_check_internal_arg_type	2739:0:84447:84604							
ANR	164843	FunctionDef	"zend_check_internal_arg_type (zend_function * zf , uint32_t arg_num , zval * arg)"		164842	0					
ANR	164844	CompoundStatement		2740:0:84552:84604	164842	0					
ANR	164845	ExpressionStatement	"zend_verify_internal_arg_type ( zf , arg_num , arg )"	2741:1:84555:84602	164842	0	True				
ANR	164846	CallExpression	"zend_verify_internal_arg_type ( zf , arg_num , arg )"		164842	0					
ANR	164847	Callee	zend_verify_internal_arg_type		164842	0					
ANR	164848	Identifier	zend_verify_internal_arg_type		164842	0					
ANR	164849	ArgumentList	zf		164842	1					
ANR	164850	Argument	zf		164842	0					
ANR	164851	Identifier	zf		164842	0					
ANR	164852	Argument	arg_num		164842	1					
ANR	164853	Identifier	arg_num		164842	0					
ANR	164854	Argument	arg		164842	2					
ANR	164855	Identifier	arg		164842	0					
ANR	164856	ReturnType	ZEND_API void ZEND_FASTCALL		164842	1					
ANR	164857	Identifier	zend_check_internal_arg_type		164842	2					
ANR	164858	ParameterList	"zend_function * zf , uint32_t arg_num , zval * arg"		164842	3					
ANR	164859	Parameter	zend_function * zf	2739:57:84504:84520	164842	0	True				
ANR	164860	ParameterType	zend_function *		164842	0					
ANR	164861	Identifier	zf		164842	1					
ANR	164862	Parameter	uint32_t arg_num	2739:76:84523:84538	164842	1	True				
ANR	164863	ParameterType	uint32_t		164842	0					
ANR	164864	Identifier	arg_num		164842	1					
ANR	164865	Parameter	zval * arg	2739:94:84541:84549	164842	2	True				
ANR	164866	ParameterType	zval *		164842	0					
ANR	164867	Identifier	arg		164842	1					
ANR	164868	CFGEntryNode	ENTRY		164842		True				
ANR	164869	CFGExitNode	EXIT		164842		True				
ANR	164870	Symbol	arg_num		164842						
ANR	164871	Symbol	arg		164842						
ANR	164872	Symbol	zf		164842						
ANR	164873	Function	zend_check_arg_type	2744:0:84607:84819							
ANR	164874	FunctionDef	"zend_check_arg_type (zend_function * zf , uint32_t arg_num , zval * arg , zval * default_value , void * * cache_slot)"		164873	0					
ANR	164875	CompoundStatement		2745:0:84742:84819	164873	0					
ANR	164876	ReturnStatement	"return zend_verify_arg_type ( zf , arg_num , arg , default_value , cache_slot ) ;"	2746:1:84745:84817	164873	0	True				
ANR	164877	CallExpression	"zend_verify_arg_type ( zf , arg_num , arg , default_value , cache_slot )"		164873	0					
ANR	164878	Callee	zend_verify_arg_type		164873	0					
ANR	164879	Identifier	zend_verify_arg_type		164873	0					
ANR	164880	ArgumentList	zf		164873	1					
ANR	164881	Argument	zf		164873	0					
ANR	164882	Identifier	zf		164873	0					
ANR	164883	Argument	arg_num		164873	1					
ANR	164884	Identifier	arg_num		164873	0					
ANR	164885	Argument	arg		164873	2					
ANR	164886	Identifier	arg		164873	0					
ANR	164887	Argument	default_value		164873	3					
ANR	164888	Identifier	default_value		164873	0					
ANR	164889	Argument	cache_slot		164873	4					
ANR	164890	Identifier	cache_slot		164873	0					
ANR	164891	ReturnType	ZEND_API int ZEND_FASTCALL		164873	1					
ANR	164892	Identifier	zend_check_arg_type		164873	2					
ANR	164893	ParameterList	"zend_function * zf , uint32_t arg_num , zval * arg , zval * default_value , void * * cache_slot"		164873	3					
ANR	164894	Parameter	zend_function * zf	2744:47:84654:84670	164873	0	True				
ANR	164895	ParameterType	zend_function *		164873	0					
ANR	164896	Identifier	zf		164873	1					
ANR	164897	Parameter	uint32_t arg_num	2744:66:84673:84688	164873	1	True				
ANR	164898	ParameterType	uint32_t		164873	0					
ANR	164899	Identifier	arg_num		164873	1					
ANR	164900	Parameter	zval * arg	2744:84:84691:84699	164873	2	True				
ANR	164901	ParameterType	zval *		164873	0					
ANR	164902	Identifier	arg		164873	1					
ANR	164903	Parameter	zval * default_value	2744:95:84702:84720	164873	3	True				
ANR	164904	ParameterType	zval *		164873	0					
ANR	164905	Identifier	default_value		164873	1					
ANR	164906	Parameter	void * * cache_slot	2744:116:84723:84739	164873	4	True				
ANR	164907	ParameterType	void * *		164873	0					
ANR	164908	Identifier	cache_slot		164873	1					
ANR	164909	CFGEntryNode	ENTRY		164873		True				
ANR	164910	CFGExitNode	EXIT		164873		True				
ANR	164911	Symbol	arg_num		164873						
ANR	164912	Symbol	cache_slot		164873						
ANR	164913	Symbol	arg		164873						
ANR	164914	Symbol	default_value		164873						
ANR	164915	Symbol	zf		164873						
ANR	164916	Symbol	zend_verify_arg_type		164873						
ANR	164917	Function	zend_check_missing_arg	2749:0:84822:85006							
ANR	164918	FunctionDef	"zend_check_missing_arg (zend_execute_data * execute_data , uint32_t arg_num , void * * cache_slot)"		164917	0					
ANR	164919	CompoundStatement		2750:0:84943:85006	164917	0					
ANR	164920	ExpressionStatement	"zend_verify_missing_arg ( execute_data , arg_num , cache_slot )"	2751:1:84946:85004	164917	0	True				
ANR	164921	CallExpression	"zend_verify_missing_arg ( execute_data , arg_num , cache_slot )"		164917	0					
ANR	164922	Callee	zend_verify_missing_arg		164917	0					
ANR	164923	Identifier	zend_verify_missing_arg		164917	0					
ANR	164924	ArgumentList	execute_data		164917	1					
ANR	164925	Argument	execute_data		164917	0					
ANR	164926	Identifier	execute_data		164917	0					
ANR	164927	Argument	arg_num		164917	1					
ANR	164928	Identifier	arg_num		164917	0					
ANR	164929	Argument	cache_slot		164917	2					
ANR	164930	Identifier	cache_slot		164917	0					
ANR	164931	ReturnType	ZEND_API void ZEND_FASTCALL		164917	1					
ANR	164932	Identifier	zend_check_missing_arg		164917	2					
ANR	164933	ParameterList	"zend_execute_data * execute_data , uint32_t arg_num , void * * cache_slot"		164917	3					
ANR	164934	Parameter	zend_execute_data * execute_data	2749:51:84873:84903	164917	0	True				
ANR	164935	ParameterType	zend_execute_data *		164917	0					
ANR	164936	Identifier	execute_data		164917	1					
ANR	164937	Parameter	uint32_t arg_num	2749:84:84906:84921	164917	1	True				
ANR	164938	ParameterType	uint32_t		164917	0					
ANR	164939	Identifier	arg_num		164917	1					
ANR	164940	Parameter	void * * cache_slot	2749:102:84924:84940	164917	2	True				
ANR	164941	ParameterType	void * *		164917	0					
ANR	164942	Identifier	cache_slot		164917	1					
ANR	164943	CFGEntryNode	ENTRY		164917		True				
ANR	164944	CFGExitNode	EXIT		164917		True				
ANR	164945	Symbol	arg_num		164917						
ANR	164946	Symbol	cache_slot		164917						
ANR	164947	Symbol	execute_data		164917						
