command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3184413	File	data/converged/CVE-2015-8617_php-src/msgformat_helpers.cpp								
ANR	3184414	ClassDef	MessageFormatAdapter	56:0:1866:2149							
ANR	3184415	DeclStmt									
ANR	3184416	Decl							const Formattable :: Type	"const Formattable :: Type * ( const MessageFormat & m , int32_t & count )"	getArgTypeList
ANR	3184417	DeclStmt									
ANR	3184418	Decl							const MessagePattern	const MessagePattern ( MessageFormat * m )	getMessagePattern
ANR	3184419	Function	MessageFormatAdapter :: getArgTypeList	65:0:2153:2330							
ANR	3184420	FunctionDef	"MessageFormatAdapter :: getArgTypeList (const MessageFormat & m , int32_t & count)"		3184419	0					
ANR	3184421	CompoundStatement		67:53:2292:2330	3184419	0					
ANR	3184422	ReturnStatement	return m . getArgTypeList ( count ) ;	68:4:2298:2328	3184419	0	True				
ANR	3184423	CallExpression	m . getArgTypeList ( count )		3184419	0					
ANR	3184424	Callee	m . getArgTypeList		3184419	0					
ANR	3184425	MemberAccess	m . getArgTypeList		3184419	0					
ANR	3184426	Identifier	m		3184419	0					
ANR	3184427	Identifier	getArgTypeList		3184419	1					
ANR	3184428	ArgumentList	count		3184419	1					
ANR	3184429	Argument	count		3184419	0					
ANR	3184430	Identifier	count		3184419	0					
ANR	3184431	ReturnType	const Formattable :: Type *		3184419	1					
ANR	3184432	Identifier	MessageFormatAdapter :: getArgTypeList		3184419	2					
ANR	3184433	ParameterList	"const MessageFormat & m , int32_t & count"		3184419	3					
ANR	3184434	Parameter	const MessageFormat & m	66:37:2215:2236	3184419	0	True				
ANR	3184435	ParameterType	const MessageFormat &		3184419	0					
ANR	3184436	Identifier	m		3184419	1					
ANR	3184437	Parameter	int32_t & count	67:37:2276:2289	3184419	1	True				
ANR	3184438	ParameterType	int32_t &		3184419	0					
ANR	3184439	Identifier	count		3184419	1					
ANR	3184440	CFGEntryNode	ENTRY		3184419		True				
ANR	3184441	CFGExitNode	EXIT		3184419		True				
ANR	3184442	Symbol	m . getArgTypeList		3184419						
ANR	3184443	Symbol	count		3184419						
ANR	3184444	Symbol	m		3184419						
ANR	3184445	Function	MessageFormatAdapter :: getMessagePattern	72:0:2360:2467							
ANR	3184446	FunctionDef	MessageFormatAdapter :: getMessagePattern (MessageFormat * m)		3184445	0					
ANR	3184447	CompoundStatement		73:58:2439:2467	3184445	0					
ANR	3184448	ReturnStatement	return m -> msgPattern ;	74:4:2445:2465	3184445	0	True				
ANR	3184449	PtrMemberAccess	m -> msgPattern		3184445	0					
ANR	3184450	Identifier	m		3184445	0					
ANR	3184451	Identifier	msgPattern		3184445	1					
ANR	3184452	ReturnType	const MessagePattern		3184445	1					
ANR	3184453	Identifier	MessageFormatAdapter :: getMessagePattern		3184445	2					
ANR	3184454	ParameterList	MessageFormat * m		3184445	3					
ANR	3184455	Parameter	MessageFormat * m	73:40:2421:2436	3184445	0	True				
ANR	3184456	ParameterType	MessageFormat *		3184445	0					
ANR	3184457	Identifier	m		3184445	1					
ANR	3184458	CFGEntryNode	ENTRY		3184445		True				
ANR	3184459	CFGExitNode	EXIT		3184445		True				
ANR	3184460	Symbol	* m		3184445						
ANR	3184461	Symbol	m -> msgPattern		3184445						
ANR	3184462	Symbol	m		3184445						
ANR	3184463	Function	umsg_format_arg_count	77:0:2476:2675							
ANR	3184464	FunctionDef	umsg_format_arg_count (UMessageFormat * fmt)		3184463	0					
ANR	3184465	CompoundStatement		80:0:2552:2675	3184463	0					
ANR	3184466	IdentifierDeclStatement	int32_t fmt_count = 0 ;	81:1:2555:2576	3184463	0	True				
ANR	3184467	IdentifierDecl	fmt_count = 0		3184463	0					
ANR	3184468	IdentifierDeclType	int32_t		3184463	0					
ANR	3184469	Identifier	fmt_count		3184463	1					
ANR	3184470	AssignmentExpression	fmt_count = 0		3184463	2		=			
ANR	3184471	Identifier	fmt_count		3184463	0					
ANR	3184472	PrimaryExpression	0		3184463	1					
ANR	3184473	ExpressionStatement	"MessageFormatAdapter :: getArgTypeList ( * ( const MessageFormat * ) fmt , fmt_count )"	82:1:2579:2654	3184463	1	True				
ANR	3184474	CallExpression	"MessageFormatAdapter :: getArgTypeList ( * ( const MessageFormat * ) fmt , fmt_count )"		3184463	0					
ANR	3184475	Callee	MessageFormatAdapter :: getArgTypeList		3184463	0					
ANR	3184476	Identifier	MessageFormatAdapter :: getArgTypeList		3184463	0					
ANR	3184477	ArgumentList	* ( const MessageFormat * ) fmt		3184463	1					
ANR	3184478	Argument	* ( const MessageFormat * ) fmt		3184463	0					
ANR	3184479	UnaryOperationExpression	* ( const MessageFormat * ) fmt		3184463	0					
ANR	3184480	UnaryOperator	*		3184463	0					
ANR	3184481	CastExpression	( const MessageFormat * ) fmt		3184463	1					
ANR	3184482	CastTarget	const MessageFormat *		3184463	0					
ANR	3184483	Identifier	fmt		3184463	1					
ANR	3184484	Argument	fmt_count		3184463	1					
ANR	3184485	Identifier	fmt_count		3184463	0					
ANR	3184486	ReturnStatement	return fmt_count ;	83:1:2657:2673	3184463	2	True				
ANR	3184487	Identifier	fmt_count		3184463	0					
ANR	3184488	ReturnType	U_NAMESPACE_END U_CFUNC int32_t		3184463	1					
ANR	3184489	Identifier	umsg_format_arg_count		3184463	2					
ANR	3184490	ParameterList	UMessageFormat * fmt		3184463	3					
ANR	3184491	Parameter	UMessageFormat * fmt	79:38:2531:2549	3184463	0	True				
ANR	3184492	ParameterType	UMessageFormat *		3184463	0					
ANR	3184493	Identifier	fmt		3184463	1					
ANR	3184494	CFGEntryNode	ENTRY		3184463		True				
ANR	3184495	CFGExitNode	EXIT		3184463		True				
ANR	3184496	Symbol	* ( const MessageFormat * ) fmt		3184463						
ANR	3184497	Symbol	fmt_count		3184463						
ANR	3184498	Symbol	* fmt		3184463						
ANR	3184499	Symbol	fmt		3184463						
ANR	3184500	Function	arg_types_dtor	86:0:2678:2738							
ANR	3184501	FunctionDef	arg_types_dtor (zval * el)		3184500	0					
ANR	3184502	CompoundStatement		86:37:2715:2738	3184500	0					
ANR	3184503	ExpressionStatement	efree ( Z_PTR_P ( el ) )	87:1:2718:2736	3184500	0	True				
ANR	3184504	CallExpression	efree ( Z_PTR_P ( el ) )		3184500	0					
ANR	3184505	Callee	efree		3184500	0					
ANR	3184506	Identifier	efree		3184500	0					
ANR	3184507	ArgumentList	Z_PTR_P ( el )		3184500	1					
ANR	3184508	Argument	Z_PTR_P ( el )		3184500	0					
ANR	3184509	CallExpression	Z_PTR_P ( el )		3184500	0					
ANR	3184510	Callee	Z_PTR_P		3184500	0					
ANR	3184511	Identifier	Z_PTR_P		3184500	0					
ANR	3184512	ArgumentList	el		3184500	1					
ANR	3184513	Argument	el		3184500	0					
ANR	3184514	Identifier	el		3184500	0					
ANR	3184515	ReturnType	static void		3184500	1					
ANR	3184516	Identifier	arg_types_dtor		3184500	2					
ANR	3184517	ParameterList	zval * el		3184500	3					
ANR	3184518	Parameter	zval * el	86:27:2705:2712	3184500	0	True				
ANR	3184519	ParameterType	zval *		3184500	0					
ANR	3184520	Identifier	el		3184500	1					
ANR	3184521	CFGEntryNode	ENTRY		3184500		True				
ANR	3184522	CFGExitNode	EXIT		3184500		True				
ANR	3184523	Symbol	Z_PTR_P		3184500						
ANR	3184524	Symbol	el		3184500						
ANR	3184525	Function	umsg_get_numeric_types	90:0:2741:3748							
ANR	3184526	FunctionDef	"umsg_get_numeric_types (MessageFormatter_object * mfo , intl_error & err)"		3184525	0					
ANR	3184527	CompoundStatement		92:0:2840:3748	3184525	0					
ANR	3184528	IdentifierDeclStatement	HashTable * ret ;	93:1:2843:2857	3184525	0	True				
ANR	3184529	IdentifierDecl	* ret		3184525	0					
ANR	3184530	IdentifierDeclType	HashTable *		3184525	0					
ANR	3184531	Identifier	ret		3184525	1					
ANR	3184532	IdentifierDeclStatement	int32_t parts_count ;	94:1:2860:2879	3184525	1	True				
ANR	3184533	IdentifierDecl	parts_count		3184525	0					
ANR	3184534	IdentifierDeclType	int32_t		3184525	0					
ANR	3184535	Identifier	parts_count		3184525	1					
ANR	3184536	IfStatement	if ( U_FAILURE ( err . code ) )		3184525	2					
ANR	3184537	Condition	U_FAILURE ( err . code )	96:5:2887:2905	3184525	0	True				
ANR	3184538	CallExpression	U_FAILURE ( err . code )		3184525	0					
ANR	3184539	Callee	U_FAILURE		3184525	0					
ANR	3184540	Identifier	U_FAILURE		3184525	0					
ANR	3184541	ArgumentList	err . code		3184525	1					
ANR	3184542	Argument	err . code		3184525	0					
ANR	3184543	MemberAccess	err . code		3184525	0					
ANR	3184544	Identifier	err		3184525	0					
ANR	3184545	Identifier	code		3184525	1					
ANR	3184546	CompoundStatement		5:26:67:67	3184525	1					
ANR	3184547	ReturnStatement	return NULL ;	97:2:2912:2923	3184525	0	True				
ANR	3184548	Identifier	NULL		3184525	0					
ANR	3184549	IfStatement	if ( mfo -> mf_data . arg_types )		3184525	3					
ANR	3184550	Condition	mfo -> mf_data . arg_types	100:5:2934:2955	3184525	0	True				
ANR	3184551	MemberAccess	mfo -> mf_data . arg_types		3184525	0					
ANR	3184552	PtrMemberAccess	mfo -> mf_data		3184525	0					
ANR	3184553	Identifier	mfo		3184525	0					
ANR	3184554	Identifier	mf_data		3184525	1					
ANR	3184555	Identifier	arg_types		3184525	1					
ANR	3184556	CompoundStatement		9:29:117:117	3184525	1					
ANR	3184557	ReturnStatement	return mfo -> mf_data . arg_types ;	102:2:2985:3014	3184525	0	True				
ANR	3184558	MemberAccess	mfo -> mf_data . arg_types		3184525	0					
ANR	3184559	PtrMemberAccess	mfo -> mf_data		3184525	0					
ANR	3184560	Identifier	mfo		3184525	0					
ANR	3184561	Identifier	mf_data		3184525	1					
ANR	3184562	Identifier	arg_types		3184525	1					
ANR	3184563	IdentifierDeclStatement	"const Formattable :: Type * types = MessageFormatAdapter :: getArgTypeList ( * ( MessageFormat * ) mfo -> mf_data . umsgf , parts_count ) ;"	105:1:3021:3143	3184525	4	True				
ANR	3184564	IdentifierDecl	"* types = MessageFormatAdapter :: getArgTypeList ( * ( MessageFormat * ) mfo -> mf_data . umsgf , parts_count )"		3184525	0					
ANR	3184565	IdentifierDeclType	const Formattable :: Type *		3184525	0					
ANR	3184566	Identifier	types		3184525	1					
ANR	3184567	AssignmentExpression	"* types = MessageFormatAdapter :: getArgTypeList ( * ( MessageFormat * ) mfo -> mf_data . umsgf , parts_count )"		3184525	2		=			
ANR	3184568	Identifier	types		3184525	0					
ANR	3184569	CallExpression	"MessageFormatAdapter :: getArgTypeList ( * ( MessageFormat * ) mfo -> mf_data . umsgf , parts_count )"		3184525	1					
ANR	3184570	Callee	MessageFormatAdapter :: getArgTypeList		3184525	0					
ANR	3184571	Identifier	MessageFormatAdapter :: getArgTypeList		3184525	0					
ANR	3184572	ArgumentList	* ( MessageFormat * ) mfo -> mf_data . umsgf		3184525	1					
ANR	3184573	Argument	* ( MessageFormat * ) mfo -> mf_data . umsgf		3184525	0					
ANR	3184574	UnaryOperationExpression	* ( MessageFormat * ) mfo -> mf_data . umsgf		3184525	0					
ANR	3184575	UnaryOperator	*		3184525	0					
ANR	3184576	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		3184525	1					
ANR	3184577	CastTarget	MessageFormat *		3184525	0					
ANR	3184578	MemberAccess	mfo -> mf_data . umsgf		3184525	1					
ANR	3184579	PtrMemberAccess	mfo -> mf_data		3184525	0					
ANR	3184580	Identifier	mfo		3184525	0					
ANR	3184581	Identifier	mf_data		3184525	1					
ANR	3184582	Identifier	umsgf		3184525	1					
ANR	3184583	Argument	parts_count		3184525	1					
ANR	3184584	Identifier	parts_count		3184525	0					
ANR	3184585	ExpressionStatement	ALLOC_HASHTABLE ( ret )	110:1:3242:3262	3184525	5	True				
ANR	3184586	CallExpression	ALLOC_HASHTABLE ( ret )		3184525	0					
ANR	3184587	Callee	ALLOC_HASHTABLE		3184525	0					
ANR	3184588	Identifier	ALLOC_HASHTABLE		3184525	0					
ANR	3184589	ArgumentList	ret		3184525	1					
ANR	3184590	Argument	ret		3184525	0					
ANR	3184591	Identifier	ret		3184525	0					
ANR	3184592	ExpressionStatement	"zend_hash_init ( ret , parts_count , NULL , arg_types_dtor , 0 )"	111:1:3265:3322	3184525	6	True				
ANR	3184593	CallExpression	"zend_hash_init ( ret , parts_count , NULL , arg_types_dtor , 0 )"		3184525	0					
ANR	3184594	Callee	zend_hash_init		3184525	0					
ANR	3184595	Identifier	zend_hash_init		3184525	0					
ANR	3184596	ArgumentList	ret		3184525	1					
ANR	3184597	Argument	ret		3184525	0					
ANR	3184598	Identifier	ret		3184525	0					
ANR	3184599	Argument	parts_count		3184525	1					
ANR	3184600	Identifier	parts_count		3184525	0					
ANR	3184601	Argument	NULL		3184525	2					
ANR	3184602	Identifier	NULL		3184525	0					
ANR	3184603	Argument	arg_types_dtor		3184525	3					
ANR	3184604	Identifier	arg_types_dtor		3184525	0					
ANR	3184605	Argument	0		3184525	4					
ANR	3184606	PrimaryExpression	0		3184525	0					
ANR	3184607	ForStatement	for ( int i = 0 ; i < parts_count ; i ++ )		3184525	7					
ANR	3184608	ForInit	int i = 0 ;	113:6:3331:3340	3184525	0	True				
ANR	3184609	IdentifierDeclStatement	int i = 0 ;		3184525	0					
ANR	3184610	IdentifierDecl	i = 0		3184525	0					
ANR	3184611	IdentifierDeclType	int		3184525	0					
ANR	3184612	Identifier	i		3184525	1					
ANR	3184613	AssignmentExpression	i = 0		3184525	2		=			
ANR	3184614	Identifier	i		3184525	0					
ANR	3184615	PrimaryExpression	0		3184525	1					
ANR	3184616	Condition	i < parts_count	113:17:3342:3356	3184525	1	True				
ANR	3184617	RelationalExpression	i < parts_count		3184525	0		<			
ANR	3184618	Identifier	i		3184525	0					
ANR	3184619	Identifier	parts_count		3184525	1					
ANR	3184620	PostIncDecOperationExpression	i ++	113:34:3359:3361	3184525	2	True				
ANR	3184621	Identifier	i		3184525	0					
ANR	3184622	IncDec	++		3184525	1					
ANR	3184623	CompoundStatement		23:2:527:563	3184525	3					
ANR	3184624	IdentifierDeclStatement	const Formattable :: Type t = types [ i ] ;	114:2:3368:3404	3184525	0	True				
ANR	3184625	IdentifierDecl	t = types [ i ]		3184525	0					
ANR	3184626	IdentifierDeclType	const Formattable :: Type		3184525	0					
ANR	3184627	Identifier	t		3184525	1					
ANR	3184628	AssignmentExpression	t = types [ i ]		3184525	2		=			
ANR	3184629	Identifier	t		3184525	0					
ANR	3184630	ArrayIndexing	types [ i ]		3184525	1					
ANR	3184631	Identifier	types		3184525	0					
ANR	3184632	Identifier	i		3184525	1					
ANR	3184633	IfStatement	"if ( zend_hash_index_update_mem ( ret , ( zend_ulong ) i , ( void * ) & t , sizeof ( t ) ) == NULL )"		3184525	1					
ANR	3184634	Condition	"zend_hash_index_update_mem ( ret , ( zend_ulong ) i , ( void * ) & t , sizeof ( t ) ) == NULL"	115:6:3412:3487	3184525	0	True				
ANR	3184635	EqualityExpression	"zend_hash_index_update_mem ( ret , ( zend_ulong ) i , ( void * ) & t , sizeof ( t ) ) == NULL"		3184525	0		==			
ANR	3184636	CallExpression	"zend_hash_index_update_mem ( ret , ( zend_ulong ) i , ( void * ) & t , sizeof ( t ) )"		3184525	0					
ANR	3184637	Callee	zend_hash_index_update_mem		3184525	0					
ANR	3184638	Identifier	zend_hash_index_update_mem		3184525	0					
ANR	3184639	ArgumentList	ret		3184525	1					
ANR	3184640	Argument	ret		3184525	0					
ANR	3184641	Identifier	ret		3184525	0					
ANR	3184642	Argument	( zend_ulong ) i		3184525	1					
ANR	3184643	CastExpression	( zend_ulong ) i		3184525	0					
ANR	3184644	CastTarget	zend_ulong		3184525	0					
ANR	3184645	Identifier	i		3184525	1					
ANR	3184646	Argument	( void * ) & t		3184525	2					
ANR	3184647	CastExpression	( void * ) & t		3184525	0					
ANR	3184648	CastTarget	void *		3184525	0					
ANR	3184649	UnaryOperationExpression	& t		3184525	1					
ANR	3184650	UnaryOperator	&		3184525	0					
ANR	3184651	Identifier	t		3184525	1					
ANR	3184652	Argument	sizeof ( t )		3184525	3					
ANR	3184653	SizeofExpression	sizeof ( t )		3184525	0					
ANR	3184654	Sizeof	sizeof		3184525	0					
ANR	3184655	SizeofOperand	t		3184525	1					
ANR	3184656	Identifier	NULL		3184525	1					
ANR	3184657	CompoundStatement		24:84:649:649	3184525	1					
ANR	3184658	ExpressionStatement	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"	116:3:3495:3595	3184525	0	True				
ANR	3184659	CallExpression	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"		3184525	0					
ANR	3184660	Callee	intl_errors_set		3184525	0					
ANR	3184661	Identifier	intl_errors_set		3184525	0					
ANR	3184662	ArgumentList	& err		3184525	1					
ANR	3184663	Argument	& err		3184525	0					
ANR	3184664	UnaryOperationExpression	& err		3184525	0					
ANR	3184665	UnaryOperator	&		3184525	0					
ANR	3184666	Identifier	err		3184525	1					
ANR	3184667	Argument	U_MEMORY_ALLOCATION_ERROR		3184525	1					
ANR	3184668	Identifier	U_MEMORY_ALLOCATION_ERROR		3184525	0					
ANR	3184669	Argument	"""Write to argument types hash table failed"""		3184525	2					
ANR	3184670	PrimaryExpression	"""Write to argument types hash table failed"""		3184525	0					
ANR	3184671	Argument	0		3184525	3					
ANR	3184672	PrimaryExpression	0		3184525	0					
ANR	3184673	BreakStatement	break ;	118:3:3600:3605	3184525	1	True				
ANR	3184674	IfStatement	if ( U_FAILURE ( err . code ) )		3184525	8					
ANR	3184675	Condition	U_FAILURE ( err . code )	122:5:3620:3638	3184525	0	True				
ANR	3184676	CallExpression	U_FAILURE ( err . code )		3184525	0					
ANR	3184677	Callee	U_FAILURE		3184525	0					
ANR	3184678	Identifier	U_FAILURE		3184525	0					
ANR	3184679	ArgumentList	err . code		3184525	1					
ANR	3184680	Argument	err . code		3184525	0					
ANR	3184681	MemberAccess	err . code		3184525	0					
ANR	3184682	Identifier	err		3184525	0					
ANR	3184683	Identifier	code		3184525	1					
ANR	3184684	CompoundStatement		31:26:800:800	3184525	1					
ANR	3184685	ExpressionStatement	zend_hash_destroy ( ret )	123:2:3645:3667	3184525	0	True				
ANR	3184686	CallExpression	zend_hash_destroy ( ret )		3184525	0					
ANR	3184687	Callee	zend_hash_destroy		3184525	0					
ANR	3184688	Identifier	zend_hash_destroy		3184525	0					
ANR	3184689	ArgumentList	ret		3184525	1					
ANR	3184690	Argument	ret		3184525	0					
ANR	3184691	Identifier	ret		3184525	0					
ANR	3184692	ExpressionStatement	efree ( ret )	124:2:3671:3681	3184525	1	True				
ANR	3184693	CallExpression	efree ( ret )		3184525	0					
ANR	3184694	Callee	efree		3184525	0					
ANR	3184695	Identifier	efree		3184525	0					
ANR	3184696	ArgumentList	ret		3184525	1					
ANR	3184697	Argument	ret		3184525	0					
ANR	3184698	Identifier	ret		3184525	0					
ANR	3184699	ReturnStatement	return NULL ;	126:2:3686:3697	3184525	2	True				
ANR	3184700	Identifier	NULL		3184525	0					
ANR	3184701	ExpressionStatement	mfo -> mf_data . arg_types = ret	129:1:3704:3732	3184525	9	True				
ANR	3184702	AssignmentExpression	mfo -> mf_data . arg_types = ret		3184525	0		=			
ANR	3184703	MemberAccess	mfo -> mf_data . arg_types		3184525	0					
ANR	3184704	PtrMemberAccess	mfo -> mf_data		3184525	0					
ANR	3184705	Identifier	mfo		3184525	0					
ANR	3184706	Identifier	mf_data		3184525	1					
ANR	3184707	Identifier	arg_types		3184525	1					
ANR	3184708	Identifier	ret		3184525	1					
ANR	3184709	ReturnStatement	return ret ;	131:1:3736:3746	3184525	10	True				
ANR	3184710	Identifier	ret		3184525	0					
ANR	3184711	ReturnType	static HashTable *		3184525	1					
ANR	3184712	Identifier	umsg_get_numeric_types		3184525	2					
ANR	3184713	ParameterList	"MessageFormatter_object * mfo , intl_error & err"		3184525	3					
ANR	3184714	Parameter	MessageFormatter_object * mfo	90:41:2782:2809	3184525	0	True				
ANR	3184715	ParameterType	MessageFormatter_object *		3184525	0					
ANR	3184716	Identifier	mfo		3184525	1					
ANR	3184717	Parameter	intl_error & err	91:11:2823:2837	3184525	1	True				
ANR	3184718	ParameterType	intl_error &		3184525	0					
ANR	3184719	Identifier	err		3184525	1					
ANR	3184720	CFGEntryNode	ENTRY		3184525		True				
ANR	3184721	CFGExitNode	EXIT		3184525		True				
ANR	3184722	Symbol	err . code		3184525						
ANR	3184723	Symbol	* * mfo		3184525						
ANR	3184724	Symbol	MessageFormatAdapter :: getArgTypeList		3184525						
ANR	3184725	Symbol	& err		3184525						
ANR	3184726	Symbol	U_FAILURE		3184525						
ANR	3184727	Symbol	zend_hash_index_update_mem		3184525						
ANR	3184728	Symbol	arg_types_dtor		3184525						
ANR	3184729	Symbol	* ( MessageFormat * ) mfo -> mf_data . umsgf		3184525						
ANR	3184730	Symbol	ret		3184525						
ANR	3184731	Symbol	* mfo		3184525						
ANR	3184732	Symbol	types		3184525						
ANR	3184733	Symbol	NULL		3184525						
ANR	3184734	Symbol	err		3184525						
ANR	3184735	Symbol	parts_count		3184525						
ANR	3184736	Symbol	mfo -> mf_data . arg_types		3184525						
ANR	3184737	Symbol	i		3184525						
ANR	3184738	Symbol	mfo -> mf_data		3184525						
ANR	3184739	Symbol	* mfo -> mf_data . umsgf		3184525						
ANR	3184740	Symbol	U_MEMORY_ALLOCATION_ERROR		3184525						
ANR	3184741	Symbol	* i		3184525						
ANR	3184742	Symbol	t		3184525						
ANR	3184743	Symbol	mfo		3184525						
ANR	3184744	Symbol	& t		3184525						
ANR	3184745	Symbol	* mfo -> mf_data		3184525						
ANR	3184746	Symbol	mfo -> mf_data . umsgf		3184525						
ANR	3184747	Symbol	* types		3184525						
ANR	3184748	Function	umsg_parse_format	135:0:3778:9584							
ANR	3184749	FunctionDef	"umsg_parse_format (MessageFormatter_object * mfo , const MessagePattern & mp , intl_error & err)"		3184748	0					
ANR	3184750	CompoundStatement		138:0:3905:9584	3184748	0					
ANR	3184751	IdentifierDeclStatement	HashTable * ret ;	139:1:3908:3922	3184748	0	True				
ANR	3184752	IdentifierDecl	* ret		3184748	0					
ANR	3184753	IdentifierDeclType	HashTable *		3184748	0					
ANR	3184754	Identifier	ret		3184748	1					
ANR	3184755	IdentifierDeclStatement	int32_t parts_count ;	140:1:3925:3944	3184748	1	True				
ANR	3184756	IdentifierDecl	parts_count		3184748	0					
ANR	3184757	IdentifierDeclType	int32_t		3184748	0					
ANR	3184758	Identifier	parts_count		3184748	1					
ANR	3184759	IfStatement	if ( U_FAILURE ( err . code ) )		3184748	2					
ANR	3184760	Condition	U_FAILURE ( err . code )	142:5:3952:3970	3184748	0	True				
ANR	3184761	CallExpression	U_FAILURE ( err . code )		3184748	0					
ANR	3184762	Callee	U_FAILURE		3184748	0					
ANR	3184763	Identifier	U_FAILURE		3184748	0					
ANR	3184764	ArgumentList	err . code		3184748	1					
ANR	3184765	Argument	err . code		3184748	0					
ANR	3184766	MemberAccess	err . code		3184748	0					
ANR	3184767	Identifier	err		3184748	0					
ANR	3184768	Identifier	code		3184748	1					
ANR	3184769	CompoundStatement		5:26:67:67	3184748	1					
ANR	3184770	ReturnStatement	return NULL ;	143:2:3977:3988	3184748	0	True				
ANR	3184771	Identifier	NULL		3184748	0					
ANR	3184772	IfStatement	if ( ! ( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments ( ) )		3184748	3					
ANR	3184773	Condition	! ( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments ( )	146:5:3999:4058	3184748	0	True				
ANR	3184774	UnaryOperationExpression	! ( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments ( )		3184748	0					
ANR	3184775	UnaryOperator	!		3184748	0					
ANR	3184776	CallExpression	( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments ( )		3184748	1					
ANR	3184777	Callee	( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments		3184748	0					
ANR	3184778	PtrMemberAccess	( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments		3184748	0					
ANR	3184779	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		3184748	0					
ANR	3184780	CastTarget	MessageFormat *		3184748	0					
ANR	3184781	MemberAccess	mfo -> mf_data . umsgf		3184748	1					
ANR	3184782	PtrMemberAccess	mfo -> mf_data		3184748	0					
ANR	3184783	Identifier	mfo		3184748	0					
ANR	3184784	Identifier	mf_data		3184748	1					
ANR	3184785	Identifier	umsgf		3184748	1					
ANR	3184786	Identifier	usesNamedArguments		3184748	1					
ANR	3184787	ArgumentList			3184748	1					
ANR	3184788	CompoundStatement		9:67:155:155	3184748	1					
ANR	3184789	ReturnStatement	"return umsg_get_numeric_types ( mfo , err ) ;"	147:2:4065:4104	3184748	0	True				
ANR	3184790	CallExpression	"umsg_get_numeric_types ( mfo , err )"		3184748	0					
ANR	3184791	Callee	umsg_get_numeric_types		3184748	0					
ANR	3184792	Identifier	umsg_get_numeric_types		3184748	0					
ANR	3184793	ArgumentList	mfo		3184748	1					
ANR	3184794	Argument	mfo		3184748	0					
ANR	3184795	Identifier	mfo		3184748	0					
ANR	3184796	Argument	err		3184748	1					
ANR	3184797	Identifier	err		3184748	0					
ANR	3184798	IfStatement	if ( mfo -> mf_data . arg_types )		3184748	4					
ANR	3184799	Condition	mfo -> mf_data . arg_types	150:5:4115:4136	3184748	0	True				
ANR	3184800	MemberAccess	mfo -> mf_data . arg_types		3184748	0					
ANR	3184801	PtrMemberAccess	mfo -> mf_data		3184748	0					
ANR	3184802	Identifier	mfo		3184748	0					
ANR	3184803	Identifier	mf_data		3184748	1					
ANR	3184804	Identifier	arg_types		3184748	1					
ANR	3184805	CompoundStatement		13:29:233:233	3184748	1					
ANR	3184806	ReturnStatement	return mfo -> mf_data . arg_types ;	152:2:4166:4195	3184748	0	True				
ANR	3184807	MemberAccess	mfo -> mf_data . arg_types		3184748	0					
ANR	3184808	PtrMemberAccess	mfo -> mf_data		3184748	0					
ANR	3184809	Identifier	mfo		3184748	0					
ANR	3184810	Identifier	mf_data		3184748	1					
ANR	3184811	Identifier	arg_types		3184748	1					
ANR	3184812	ExpressionStatement	ALLOC_HASHTABLE ( ret )	157:1:4297:4317	3184748	5	True				
ANR	3184813	CallExpression	ALLOC_HASHTABLE ( ret )		3184748	0					
ANR	3184814	Callee	ALLOC_HASHTABLE		3184748	0					
ANR	3184815	Identifier	ALLOC_HASHTABLE		3184748	0					
ANR	3184816	ArgumentList	ret		3184748	1					
ANR	3184817	Argument	ret		3184748	0					
ANR	3184818	Identifier	ret		3184748	0					
ANR	3184819	ExpressionStatement	"zend_hash_init ( ret , 32 , NULL , arg_types_dtor , 0 )"	158:1:4320:4368	3184748	6	True				
ANR	3184820	CallExpression	"zend_hash_init ( ret , 32 , NULL , arg_types_dtor , 0 )"		3184748	0					
ANR	3184821	Callee	zend_hash_init		3184748	0					
ANR	3184822	Identifier	zend_hash_init		3184748	0					
ANR	3184823	ArgumentList	ret		3184748	1					
ANR	3184824	Argument	ret		3184748	0					
ANR	3184825	Identifier	ret		3184748	0					
ANR	3184826	Argument	32		3184748	1					
ANR	3184827	PrimaryExpression	32		3184748	0					
ANR	3184828	Argument	NULL		3184748	2					
ANR	3184829	Identifier	NULL		3184748	0					
ANR	3184830	Argument	arg_types_dtor		3184748	3					
ANR	3184831	Identifier	arg_types_dtor		3184748	0					
ANR	3184832	Argument	0		3184748	4					
ANR	3184833	PrimaryExpression	0		3184748	0					
ANR	3184834	ExpressionStatement	parts_count = mp . countParts ( )	160:1:4372:4401	3184748	7	True				
ANR	3184835	AssignmentExpression	parts_count = mp . countParts ( )		3184748	0		=			
ANR	3184836	Identifier	parts_count		3184748	0					
ANR	3184837	CallExpression	mp . countParts ( )		3184748	1					
ANR	3184838	Callee	mp . countParts		3184748	0					
ANR	3184839	MemberAccess	mp . countParts		3184748	0					
ANR	3184840	Identifier	mp		3184748	0					
ANR	3184841	Identifier	countParts		3184748	1					
ANR	3184842	ArgumentList			3184748	1					
ANR	3184843	ForStatement	for ( int32_t i = 0 ; i < parts_count - 2 && U_SUCCESS ( err . code ) ; i ++ )		3184748	8					
ANR	3184844	ForInit	int32_t i = 0 ;	173:6:4951:4964	3184748	0	True				
ANR	3184845	IdentifierDeclStatement	int32_t i = 0 ;		3184748	0					
ANR	3184846	IdentifierDecl	i = 0		3184748	0					
ANR	3184847	IdentifierDeclType	int32_t		3184748	0					
ANR	3184848	Identifier	i		3184748	1					
ANR	3184849	AssignmentExpression	i = 0		3184748	2		=			
ANR	3184850	Identifier	i		3184748	0					
ANR	3184851	PrimaryExpression	0		3184748	1					
ANR	3184852	Condition	i < parts_count - 2 && U_SUCCESS ( err . code )	173:21:4966:5007	3184748	1	True				
ANR	3184853	AndExpression	i < parts_count - 2 && U_SUCCESS ( err . code )		3184748	0		&&			
ANR	3184854	RelationalExpression	i < parts_count - 2		3184748	0		<			
ANR	3184855	Identifier	i		3184748	0					
ANR	3184856	AdditiveExpression	parts_count - 2		3184748	1		-			
ANR	3184857	Identifier	parts_count		3184748	0					
ANR	3184858	PrimaryExpression	2		3184748	1					
ANR	3184859	CallExpression	U_SUCCESS ( err . code )		3184748	1					
ANR	3184860	Callee	U_SUCCESS		3184748	0					
ANR	3184861	Identifier	U_SUCCESS		3184748	0					
ANR	3184862	ArgumentList	err . code		3184748	1					
ANR	3184863	Argument	err . code		3184748	0					
ANR	3184864	MemberAccess	err . code		3184748	0					
ANR	3184865	Identifier	err		3184748	0					
ANR	3184866	Identifier	code		3184748	1					
ANR	3184867	PostIncDecOperationExpression	i ++	173:65:5010:5012	3184748	2	True				
ANR	3184868	Identifier	i		3184748	0					
ANR	3184869	IncDec	++		3184748	1					
ANR	3184870	CompoundStatement		80:2:2877:2924	3184748	3					
ANR	3184871	IdentifierDeclStatement	MessagePattern :: Part p = mp . getPart ( i ) ;	174:2:5019:5057	3184748	0	True				
ANR	3184872	IdentifierDecl	p = mp . getPart ( i )		3184748	0					
ANR	3184873	IdentifierDeclType	MessagePattern :: Part		3184748	0					
ANR	3184874	Identifier	p		3184748	1					
ANR	3184875	AssignmentExpression	p = mp . getPart ( i )		3184748	2		=			
ANR	3184876	Identifier	p		3184748	0					
ANR	3184877	CallExpression	mp . getPart ( i )		3184748	1					
ANR	3184878	Callee	mp . getPart		3184748	0					
ANR	3184879	MemberAccess	mp . getPart		3184748	0					
ANR	3184880	Identifier	mp		3184748	0					
ANR	3184881	Identifier	getPart		3184748	1					
ANR	3184882	ArgumentList	i		3184748	1					
ANR	3184883	Argument	i		3184748	0					
ANR	3184884	Identifier	i		3184748	0					
ANR	3184885	IfStatement	if ( p . getType ( ) != UMSGPAT_PART_TYPE_ARG_START )		3184748	1					
ANR	3184886	Condition	p . getType ( ) != UMSGPAT_PART_TYPE_ARG_START	176:6:5066:5107	3184748	0	True				
ANR	3184887	EqualityExpression	p . getType ( ) != UMSGPAT_PART_TYPE_ARG_START		3184748	0		!=			
ANR	3184888	CallExpression	p . getType ( )		3184748	0					
ANR	3184889	Callee	p . getType		3184748	0					
ANR	3184890	MemberAccess	p . getType		3184748	0					
ANR	3184891	Identifier	p		3184748	0					
ANR	3184892	Identifier	getType		3184748	1					
ANR	3184893	ArgumentList			3184748	1					
ANR	3184894	Identifier	UMSGPAT_PART_TYPE_ARG_START		3184748	1					
ANR	3184895	CompoundStatement		39:50:1204:1204	3184748	1					
ANR	3184896	ContinueStatement	continue ;	177:3:5115:5123	3184748	0	True				
ANR	3184897	IdentifierDeclStatement	MessagePattern :: Part name_part = mp . getPart ( ++ i ) ;	180:2:5132:5180	3184748	2	True				
ANR	3184898	IdentifierDecl	name_part = mp . getPart ( ++ i )		3184748	0					
ANR	3184899	IdentifierDeclType	MessagePattern :: Part		3184748	0					
ANR	3184900	Identifier	name_part		3184748	1					
ANR	3184901	AssignmentExpression	name_part = mp . getPart ( ++ i )		3184748	2		=			
ANR	3184902	Identifier	name_part		3184748	0					
ANR	3184903	CallExpression	mp . getPart ( ++ i )		3184748	1					
ANR	3184904	Callee	mp . getPart		3184748	0					
ANR	3184905	MemberAccess	mp . getPart		3184748	0					
ANR	3184906	Identifier	mp		3184748	0					
ANR	3184907	Identifier	getPart		3184748	1					
ANR	3184908	ArgumentList	++ i		3184748	1					
ANR	3184909	Argument	++ i		3184748	0					
ANR	3184910	UnaryExpression	++ i		3184748	0					
ANR	3184911	IncDec	++		3184748	0					
ANR	3184912	Identifier	i		3184748	1					
ANR	3184913	IdentifierDeclStatement	"Formattable :: Type type , * storedType ;"	181:2:5216:5259	3184748	3	True				
ANR	3184914	IdentifierDecl	type		3184748	0					
ANR	3184915	IdentifierDeclType	Formattable :: Type		3184748	0					
ANR	3184916	Identifier	type		3184748	1					
ANR	3184917	IdentifierDecl	* storedType		3184748	1					
ANR	3184918	IdentifierDeclType	Formattable :: Type *		3184748	0					
ANR	3184919	Identifier	storedType		3184748	1					
ANR	3184920	IfStatement	if ( name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NAME )		3184748	4					
ANR	3184921	Condition	name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NAME	184:6:5268:5316	3184748	0	True				
ANR	3184922	EqualityExpression	name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NAME		3184748	0		==			
ANR	3184923	CallExpression	name_part . getType ( )		3184748	0					
ANR	3184924	Callee	name_part . getType		3184748	0					
ANR	3184925	MemberAccess	name_part . getType		3184748	0					
ANR	3184926	Identifier	name_part		3184748	0					
ANR	3184927	Identifier	getType		3184748	1					
ANR	3184928	ArgumentList			3184748	1					
ANR	3184929	Identifier	UMSGPAT_PART_TYPE_ARG_NAME		3184748	1					
ANR	3184930	CompoundStatement		48:3:1418:1468	3184748	1					
ANR	3184931	IdentifierDeclStatement	UnicodeString argName = mp . getSubstring ( name_part ) ;	185:3:5324:5374	3184748	0	True				
ANR	3184932	IdentifierDecl	argName = mp . getSubstring ( name_part )		3184748	0					
ANR	3184933	IdentifierDeclType	UnicodeString		3184748	0					
ANR	3184934	Identifier	argName		3184748	1					
ANR	3184935	AssignmentExpression	argName = mp . getSubstring ( name_part )		3184748	2		=			
ANR	3184936	Identifier	argName		3184748	0					
ANR	3184937	CallExpression	mp . getSubstring ( name_part )		3184748	1					
ANR	3184938	Callee	mp . getSubstring		3184748	0					
ANR	3184939	MemberAccess	mp . getSubstring		3184748	0					
ANR	3184940	Identifier	mp		3184748	0					
ANR	3184941	Identifier	getSubstring		3184748	1					
ANR	3184942	ArgumentList	name_part		3184748	1					
ANR	3184943	Argument	name_part		3184748	0					
ANR	3184944	Identifier	name_part		3184748	0					
ANR	3184945	IfStatement	"if ( ( storedType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) ) ) == NULL )"		3184748	1					
ANR	3184946	Condition	"( storedType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) ) ) == NULL"	186:7:5383:5498	3184748	0	True				
ANR	3184947	EqualityExpression	"( storedType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) ) ) == NULL"		3184748	0		==			
ANR	3184948	AssignmentExpression	"storedType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) )"		3184748	0		=			
ANR	3184949	Identifier	storedType		3184748	0					
ANR	3184950	CastExpression	"( Formattable :: Type * ) zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) )"		3184748	1					
ANR	3184951	CastTarget	Formattable :: Type *		3184748	0					
ANR	3184952	CallExpression	"zend_hash_str_find_ptr ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) )"		3184748	1					
ANR	3184953	Callee	zend_hash_str_find_ptr		3184748	0					
ANR	3184954	Identifier	zend_hash_str_find_ptr		3184748	0					
ANR	3184955	ArgumentList	ret		3184748	1					
ANR	3184956	Argument	ret		3184748	0					
ANR	3184957	Identifier	ret		3184748	0					
ANR	3184958	Argument	( char * ) argName . getBuffer ( )		3184748	1					
ANR	3184959	CastExpression	( char * ) argName . getBuffer ( )		3184748	0					
ANR	3184960	CastTarget	char *		3184748	0					
ANR	3184961	CallExpression	argName . getBuffer ( )		3184748	1					
ANR	3184962	Callee	argName . getBuffer		3184748	0					
ANR	3184963	MemberAccess	argName . getBuffer		3184748	0					
ANR	3184964	Identifier	argName		3184748	0					
ANR	3184965	Identifier	getBuffer		3184748	1					
ANR	3184966	ArgumentList			3184748	1					
ANR	3184967	Argument	argName . length ( )		3184748	2					
ANR	3184968	CallExpression	argName . length ( )		3184748	0					
ANR	3184969	Callee	argName . length		3184748	0					
ANR	3184970	MemberAccess	argName . length		3184748	0					
ANR	3184971	Identifier	argName		3184748	0					
ANR	3184972	Identifier	length		3184748	1					
ANR	3184973	ArgumentList			3184748	1					
ANR	3184974	Identifier	NULL		3184748	1					
ANR	3184975	CompoundStatement		51:4:1653:1703	3184748	1					
ANR	3184976	IdentifierDeclStatement	Formattable :: Type bogusType = Formattable :: kObject ;	188:4:5559:5609	3184748	0	True				
ANR	3184977	IdentifierDecl	bogusType = Formattable :: kObject		3184748	0					
ANR	3184978	IdentifierDeclType	Formattable :: Type		3184748	0					
ANR	3184979	Identifier	bogusType		3184748	1					
ANR	3184980	AssignmentExpression	bogusType = Formattable :: kObject		3184748	2		=			
ANR	3184981	Identifier	Formattable :: kObject		3184748	0					
ANR	3184982	Identifier	Formattable :: kObject		3184748	1					
ANR	3184983	IfStatement	"if ( ( storedType = ( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL )"		3184748	1					
ANR	3184984	Condition	"( storedType = ( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL"	189:8:5619:5780	3184748	0	True				
ANR	3184985	EqualityExpression	"( storedType = ( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL"		3184748	0		==			
ANR	3184986	AssignmentExpression	"storedType = ( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) )"		3184748	0		=			
ANR	3184987	Identifier	storedType		3184748	0					
ANR	3184988	CastExpression	"( Formattable :: Type * ) zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) )"		3184748	1					
ANR	3184989	CastTarget	Formattable :: Type *		3184748	0					
ANR	3184990	CallExpression	"zend_hash_str_update_mem ( ret , ( char * ) argName . getBuffer ( ) , argName . length ( ) , ( void * ) & bogusType , sizeof ( bogusType ) )"		3184748	1					
ANR	3184991	Callee	zend_hash_str_update_mem		3184748	0					
ANR	3184992	Identifier	zend_hash_str_update_mem		3184748	0					
ANR	3184993	ArgumentList	ret		3184748	1					
ANR	3184994	Argument	ret		3184748	0					
ANR	3184995	Identifier	ret		3184748	0					
ANR	3184996	Argument	( char * ) argName . getBuffer ( )		3184748	1					
ANR	3184997	CastExpression	( char * ) argName . getBuffer ( )		3184748	0					
ANR	3184998	CastTarget	char *		3184748	0					
ANR	3184999	CallExpression	argName . getBuffer ( )		3184748	1					
ANR	3185000	Callee	argName . getBuffer		3184748	0					
ANR	3185001	MemberAccess	argName . getBuffer		3184748	0					
ANR	3185002	Identifier	argName		3184748	0					
ANR	3185003	Identifier	getBuffer		3184748	1					
ANR	3185004	ArgumentList			3184748	1					
ANR	3185005	Argument	argName . length ( )		3184748	2					
ANR	3185006	CallExpression	argName . length ( )		3184748	0					
ANR	3185007	Callee	argName . length		3184748	0					
ANR	3185008	MemberAccess	argName . length		3184748	0					
ANR	3185009	Identifier	argName		3184748	0					
ANR	3185010	Identifier	length		3184748	1					
ANR	3185011	ArgumentList			3184748	1					
ANR	3185012	Argument	( void * ) & bogusType		3184748	3					
ANR	3185013	CastExpression	( void * ) & bogusType		3184748	0					
ANR	3185014	CastTarget	void *		3184748	0					
ANR	3185015	UnaryOperationExpression	& bogusType		3184748	1					
ANR	3185016	UnaryOperator	&		3184748	0					
ANR	3185017	Identifier	bogusType		3184748	1					
ANR	3185018	Argument	sizeof ( bogusType )		3184748	4					
ANR	3185019	SizeofExpression	sizeof ( bogusType )		3184748	0					
ANR	3185020	Sizeof	sizeof		3184748	0					
ANR	3185021	SizeofOperand	bogusType		3184748	1					
ANR	3185022	Identifier	NULL		3184748	1					
ANR	3185023	CompoundStatement		53:54:1877:1877	3184748	1					
ANR	3185024	ExpressionStatement	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"	191:5:5790:5892	3184748	0	True				
ANR	3185025	CallExpression	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"		3184748	0					
ANR	3185026	Callee	intl_errors_set		3184748	0					
ANR	3185027	Identifier	intl_errors_set		3184748	0					
ANR	3185028	ArgumentList	& err		3184748	1					
ANR	3185029	Argument	& err		3184748	0					
ANR	3185030	UnaryOperationExpression	& err		3184748	0					
ANR	3185031	UnaryOperator	&		3184748	0					
ANR	3185032	Identifier	err		3184748	1					
ANR	3185033	Argument	U_MEMORY_ALLOCATION_ERROR		3184748	1					
ANR	3185034	Identifier	U_MEMORY_ALLOCATION_ERROR		3184748	0					
ANR	3185035	Argument	"""Write to argument types hash table failed"""		3184748	2					
ANR	3185036	PrimaryExpression	"""Write to argument types hash table failed"""		3184748	0					
ANR	3185037	Argument	0		3184748	3					
ANR	3185038	PrimaryExpression	0		3184748	0					
ANR	3185039	ContinueStatement	continue ;	193:5:5899:5907	3184748	1	True				
ANR	3185040	ElseStatement	else		3184748	0					
ANR	3185041	IfStatement	if ( name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NUMBER )		3184748	0					
ANR	3185042	Condition	name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NUMBER	196:13:5933:5983	3184748	0	True				
ANR	3185043	EqualityExpression	name_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_NUMBER		3184748	0		==			
ANR	3185044	CallExpression	name_part . getType ( )		3184748	0					
ANR	3185045	Callee	name_part . getType		3184748	0					
ANR	3185046	MemberAccess	name_part . getType		3184748	0					
ANR	3185047	Identifier	name_part		3184748	0					
ANR	3185048	Identifier	getType		3184748	1					
ANR	3185049	ArgumentList			3184748	1					
ANR	3185050	Identifier	UMSGPAT_PART_TYPE_ARG_NUMBER		3184748	1					
ANR	3185051	CompoundStatement		60:3:2085:2125	3184748	1					
ANR	3185052	IdentifierDeclStatement	int32_t argNumber = name_part . getValue ( ) ;	197:3:5991:6031	3184748	0	True				
ANR	3185053	IdentifierDecl	argNumber = name_part . getValue ( )		3184748	0					
ANR	3185054	IdentifierDeclType	int32_t		3184748	0					
ANR	3185055	Identifier	argNumber		3184748	1					
ANR	3185056	AssignmentExpression	argNumber = name_part . getValue ( )		3184748	2		=			
ANR	3185057	Identifier	argNumber		3184748	0					
ANR	3185058	CallExpression	name_part . getValue ( )		3184748	1					
ANR	3185059	Callee	name_part . getValue		3184748	0					
ANR	3185060	MemberAccess	name_part . getValue		3184748	0					
ANR	3185061	Identifier	name_part		3184748	0					
ANR	3185062	Identifier	getValue		3184748	1					
ANR	3185063	ArgumentList			3184748	1					
ANR	3185064	IfStatement	if ( argNumber < 0 )		3184748	1					
ANR	3185065	Condition	argNumber < 0	198:7:6040:6052	3184748	0	True				
ANR	3185066	RelationalExpression	argNumber < 0		3184748	0		<			
ANR	3185067	Identifier	argNumber		3184748	0					
ANR	3185068	PrimaryExpression	0		3184748	1					
ANR	3185069	CompoundStatement		61:22:2149:2149	3184748	1					
ANR	3185070	ExpressionStatement	"intl_errors_set ( & err , U_INVALID_FORMAT_ERROR , ""Found part with negative number"" , 0 )"	199:4:6061:6149	3184748	0	True				
ANR	3185071	CallExpression	"intl_errors_set ( & err , U_INVALID_FORMAT_ERROR , ""Found part with negative number"" , 0 )"		3184748	0					
ANR	3185072	Callee	intl_errors_set		3184748	0					
ANR	3185073	Identifier	intl_errors_set		3184748	0					
ANR	3185074	ArgumentList	& err		3184748	1					
ANR	3185075	Argument	& err		3184748	0					
ANR	3185076	UnaryOperationExpression	& err		3184748	0					
ANR	3185077	UnaryOperator	&		3184748	0					
ANR	3185078	Identifier	err		3184748	1					
ANR	3185079	Argument	U_INVALID_FORMAT_ERROR		3184748	1					
ANR	3185080	Identifier	U_INVALID_FORMAT_ERROR		3184748	0					
ANR	3185081	Argument	"""Found part with negative number"""		3184748	2					
ANR	3185082	PrimaryExpression	"""Found part with negative number"""		3184748	0					
ANR	3185083	Argument	0		3184748	3					
ANR	3185084	PrimaryExpression	0		3184748	0					
ANR	3185085	ContinueStatement	continue ;	201:4:6155:6163	3184748	1	True				
ANR	3185086	IfStatement	"if ( ( storedType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber ) ) == NULL )"		3184748	2					
ANR	3185087	Condition	"( storedType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber ) ) == NULL"	203:7:6177:6271	3184748	0	True				
ANR	3185088	EqualityExpression	"( storedType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber ) ) == NULL"		3184748	0		==			
ANR	3185089	AssignmentExpression	"storedType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber )"		3184748	0		=			
ANR	3185090	Identifier	storedType		3184748	0					
ANR	3185091	CastExpression	"( Formattable :: Type * ) zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber )"		3184748	1					
ANR	3185092	CastTarget	Formattable :: Type *		3184748	0					
ANR	3185093	CallExpression	"zend_hash_index_find_ptr ( ret , ( zend_ulong ) argNumber )"		3184748	1					
ANR	3185094	Callee	zend_hash_index_find_ptr		3184748	0					
ANR	3185095	Identifier	zend_hash_index_find_ptr		3184748	0					
ANR	3185096	ArgumentList	ret		3184748	1					
ANR	3185097	Argument	ret		3184748	0					
ANR	3185098	Identifier	ret		3184748	0					
ANR	3185099	Argument	( zend_ulong ) argNumber		3184748	1					
ANR	3185100	CastExpression	( zend_ulong ) argNumber		3184748	0					
ANR	3185101	CastTarget	zend_ulong		3184748	0					
ANR	3185102	Identifier	argNumber		3184748	1					
ANR	3185103	Identifier	NULL		3184748	1					
ANR	3185104	CompoundStatement		68:4:2426:2476	3184748	1					
ANR	3185105	IdentifierDeclStatement	Formattable :: Type bogusType = Formattable :: kObject ;	205:4:6332:6382	3184748	0	True				
ANR	3185106	IdentifierDecl	bogusType = Formattable :: kObject		3184748	0					
ANR	3185107	IdentifierDeclType	Formattable :: Type		3184748	0					
ANR	3185108	Identifier	bogusType		3184748	1					
ANR	3185109	AssignmentExpression	bogusType = Formattable :: kObject		3184748	2		=			
ANR	3185110	Identifier	Formattable :: kObject		3184748	0					
ANR	3185111	Identifier	Formattable :: kObject		3184748	1					
ANR	3185112	IfStatement	"if ( ( storedType = ( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL )"		3184748	1					
ANR	3185113	Condition	"( storedType = ( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL"	206:8:6392:6526	3184748	0	True				
ANR	3185114	EqualityExpression	"( storedType = ( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) ) ) == NULL"		3184748	0		==			
ANR	3185115	AssignmentExpression	"storedType = ( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) )"		3184748	0		=			
ANR	3185116	Identifier	storedType		3184748	0					
ANR	3185117	CastExpression	"( Formattable :: Type * ) zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) )"		3184748	1					
ANR	3185118	CastTarget	Formattable :: Type *		3184748	0					
ANR	3185119	CallExpression	"zend_hash_index_update_mem ( ret , ( zend_ulong ) argNumber , ( void * ) & bogusType , sizeof ( bogusType ) )"		3184748	1					
ANR	3185120	Callee	zend_hash_index_update_mem		3184748	0					
ANR	3185121	Identifier	zend_hash_index_update_mem		3184748	0					
ANR	3185122	ArgumentList	ret		3184748	1					
ANR	3185123	Argument	ret		3184748	0					
ANR	3185124	Identifier	ret		3184748	0					
ANR	3185125	Argument	( zend_ulong ) argNumber		3184748	1					
ANR	3185126	CastExpression	( zend_ulong ) argNumber		3184748	0					
ANR	3185127	CastTarget	zend_ulong		3184748	0					
ANR	3185128	Identifier	argNumber		3184748	1					
ANR	3185129	Argument	( void * ) & bogusType		3184748	2					
ANR	3185130	CastExpression	( void * ) & bogusType		3184748	0					
ANR	3185131	CastTarget	void *		3184748	0					
ANR	3185132	UnaryOperationExpression	& bogusType		3184748	1					
ANR	3185133	UnaryOperator	&		3184748	0					
ANR	3185134	Identifier	bogusType		3184748	1					
ANR	3185135	Argument	sizeof ( bogusType )		3184748	3					
ANR	3185136	SizeofExpression	sizeof ( bogusType )		3184748	0					
ANR	3185137	Sizeof	sizeof		3184748	0					
ANR	3185138	SizeofOperand	bogusType		3184748	1					
ANR	3185139	Identifier	NULL		3184748	1					
ANR	3185140	CompoundStatement		69:145:2623:2623	3184748	1					
ANR	3185141	ExpressionStatement	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"	207:5:6536:6638	3184748	0	True				
ANR	3185142	CallExpression	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Write to argument types hash table failed"" , 0 )"		3184748	0					
ANR	3185143	Callee	intl_errors_set		3184748	0					
ANR	3185144	Identifier	intl_errors_set		3184748	0					
ANR	3185145	ArgumentList	& err		3184748	1					
ANR	3185146	Argument	& err		3184748	0					
ANR	3185147	UnaryOperationExpression	& err		3184748	0					
ANR	3185148	UnaryOperator	&		3184748	0					
ANR	3185149	Identifier	err		3184748	1					
ANR	3185150	Argument	U_MEMORY_ALLOCATION_ERROR		3184748	1					
ANR	3185151	Identifier	U_MEMORY_ALLOCATION_ERROR		3184748	0					
ANR	3185152	Argument	"""Write to argument types hash table failed"""		3184748	2					
ANR	3185153	PrimaryExpression	"""Write to argument types hash table failed"""		3184748	0					
ANR	3185154	Argument	0		3184748	3					
ANR	3185155	PrimaryExpression	0		3184748	0					
ANR	3185156	ContinueStatement	continue ;	209:5:6645:6653	3184748	1	True				
ANR	3185157	ElseStatement	else		3184748	0					
ANR	3185158	CompoundStatement		75:9:2769:2769	3184748	0					
ANR	3185159	ExpressionStatement	"intl_errors_set ( & err , U_INVALID_FORMAT_ERROR , ""Invalid part type encountered"" , 0 )"	213:3:6680:6761	3184748	0	True				
ANR	3185160	CallExpression	"intl_errors_set ( & err , U_INVALID_FORMAT_ERROR , ""Invalid part type encountered"" , 0 )"		3184748	0					
ANR	3185161	Callee	intl_errors_set		3184748	0					
ANR	3185162	Identifier	intl_errors_set		3184748	0					
ANR	3185163	ArgumentList	& err		3184748	1					
ANR	3185164	Argument	& err		3184748	0					
ANR	3185165	UnaryOperationExpression	& err		3184748	0					
ANR	3185166	UnaryOperator	&		3184748	0					
ANR	3185167	Identifier	err		3184748	1					
ANR	3185168	Argument	U_INVALID_FORMAT_ERROR		3184748	1					
ANR	3185169	Identifier	U_INVALID_FORMAT_ERROR		3184748	0					
ANR	3185170	Argument	"""Invalid part type encountered"""		3184748	2					
ANR	3185171	PrimaryExpression	"""Invalid part type encountered"""		3184748	0					
ANR	3185172	Argument	0		3184748	3					
ANR	3185173	PrimaryExpression	0		3184748	0					
ANR	3185174	ContinueStatement	continue ;	214:3:6766:6774	3184748	1	True				
ANR	3185175	IdentifierDeclStatement	UMessagePatternArgType argType = p . getArgType ( ) ;	217:2:6783:6830	3184748	5	True				
ANR	3185176	IdentifierDecl	argType = p . getArgType ( )		3184748	0					
ANR	3185177	IdentifierDeclType	UMessagePatternArgType		3184748	0					
ANR	3185178	Identifier	argType		3184748	1					
ANR	3185179	AssignmentExpression	argType = p . getArgType ( )		3184748	2		=			
ANR	3185180	Identifier	argType		3184748	0					
ANR	3185181	CallExpression	p . getArgType ( )		3184748	1					
ANR	3185182	Callee	p . getArgType		3184748	0					
ANR	3185183	MemberAccess	p . getArgType		3184748	0					
ANR	3185184	Identifier	p		3184748	0					
ANR	3185185	Identifier	getArgType		3184748	1					
ANR	3185186	ArgumentList			3184748	1					
ANR	3185187	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_NONE )		3184748	6					
ANR	3185188	Condition	argType == UMSGPAT_ARG_TYPE_NONE	219:6:6886:6917	3184748	0	True				
ANR	3185189	EqualityExpression	argType == UMSGPAT_ARG_TYPE_NONE		3184748	0		==			
ANR	3185190	Identifier	argType		3184748	0					
ANR	3185191	Identifier	UMSGPAT_ARG_TYPE_NONE		3184748	1					
ANR	3185192	CompoundStatement		82:40:3014:3014	3184748	1					
ANR	3185193	ExpressionStatement	type = Formattable :: kString	220:3:6925:6952	3184748	0	True				
ANR	3185194	AssignmentExpression	type = Formattable :: kString		3184748	0		=			
ANR	3185195	Identifier	type		3184748	0					
ANR	3185196	Identifier	Formattable :: kString		3184748	1					
ANR	3185197	ElseStatement	else		3184748	0					
ANR	3185198	CompoundStatement		84:9:3057:3057	3184748	0					
ANR	3185199	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_SIMPLE )		3184748	0					
ANR	3185200	Condition	argType == UMSGPAT_ARG_TYPE_SIMPLE	222:7:7034:7067	3184748	0	True				
ANR	3185201	EqualityExpression	argType == UMSGPAT_ARG_TYPE_SIMPLE		3184748	0		==			
ANR	3185202	Identifier	argType		3184748	0					
ANR	3185203	Identifier	UMSGPAT_ARG_TYPE_SIMPLE		3184748	1					
ANR	3185204	CompoundStatement		88:4:3298:3346	3184748	1					
ANR	3185205	IdentifierDeclStatement	MessagePattern :: Part type_part = mp . getPart ( ++ i ) ;	225:4:7204:7252	3184748	0	True				
ANR	3185206	IdentifierDecl	type_part = mp . getPart ( ++ i )		3184748	0					
ANR	3185207	IdentifierDeclType	MessagePattern :: Part		3184748	0					
ANR	3185208	Identifier	type_part		3184748	1					
ANR	3185209	AssignmentExpression	type_part = mp . getPart ( ++ i )		3184748	2		=			
ANR	3185210	Identifier	type_part		3184748	0					
ANR	3185211	CallExpression	mp . getPart ( ++ i )		3184748	1					
ANR	3185212	Callee	mp . getPart		3184748	0					
ANR	3185213	MemberAccess	mp . getPart		3184748	0					
ANR	3185214	Identifier	mp		3184748	0					
ANR	3185215	Identifier	getPart		3184748	1					
ANR	3185216	ArgumentList	++ i		3184748	1					
ANR	3185217	Argument	++ i		3184748	0					
ANR	3185218	UnaryExpression	++ i		3184748	0					
ANR	3185219	IncDec	++		3184748	0					
ANR	3185220	Identifier	i		3184748	1					
ANR	3185221	IfStatement	if ( type_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_TYPE )		3184748	1					
ANR	3185222	Condition	type_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_TYPE	226:8:7294:7342	3184748	0	True				
ANR	3185223	EqualityExpression	type_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_TYPE		3184748	0		==			
ANR	3185224	CallExpression	type_part . getType ( )		3184748	0					
ANR	3185225	Callee	type_part . getType		3184748	0					
ANR	3185226	MemberAccess	type_part . getType		3184748	0					
ANR	3185227	Identifier	type_part		3184748	0					
ANR	3185228	Identifier	getType		3184748	1					
ANR	3185229	ArgumentList			3184748	1					
ANR	3185230	Identifier	UMSGPAT_PART_TYPE_ARG_TYPE		3184748	1					
ANR	3185231	CompoundStatement		90:5:3446:3499	3184748	1					
ANR	3185232	IdentifierDeclStatement	UnicodeString typeString = mp . getSubstring ( type_part ) ;	227:5:7352:7405	3184748	0	True				
ANR	3185233	IdentifierDecl	typeString = mp . getSubstring ( type_part )		3184748	0					
ANR	3185234	IdentifierDeclType	UnicodeString		3184748	0					
ANR	3185235	Identifier	typeString		3184748	1					
ANR	3185236	AssignmentExpression	typeString = mp . getSubstring ( type_part )		3184748	2		=			
ANR	3185237	Identifier	typeString		3184748	0					
ANR	3185238	CallExpression	mp . getSubstring ( type_part )		3184748	1					
ANR	3185239	Callee	mp . getSubstring		3184748	0					
ANR	3185240	MemberAccess	mp . getSubstring		3184748	0					
ANR	3185241	Identifier	mp		3184748	0					
ANR	3185242	Identifier	getSubstring		3184748	1					
ANR	3185243	ArgumentList	type_part		3184748	1					
ANR	3185244	Argument	type_part		3184748	0					
ANR	3185245	Identifier	type_part		3184748	0					
ANR	3185246	IfStatement	"if ( typeString == ""number"" )"		3184748	1					
ANR	3185247	Condition	"typeString == ""number"""	230:9:7561:7582	3184748	0	True				
ANR	3185248	EqualityExpression	"typeString == ""number"""		3184748	0		==			
ANR	3185249	Identifier	typeString		3184748	0					
ANR	3185250	PrimaryExpression	"""number"""		3184748	1					
ANR	3185251	CompoundStatement		94:6:3687:3738	3184748	1					
ANR	3185252	IdentifierDeclStatement	MessagePattern :: Part style_part = mp . getPart ( i + 1 ) ;	231:6:7593:7644	3184748	0	True				
ANR	3185253	IdentifierDecl	style_part = mp . getPart ( i + 1 )		3184748	0					
ANR	3185254	IdentifierDeclType	MessagePattern :: Part		3184748	0					
ANR	3185255	Identifier	style_part		3184748	1					
ANR	3185256	AssignmentExpression	style_part = mp . getPart ( i + 1 )		3184748	2		=			
ANR	3185257	Identifier	style_part		3184748	0					
ANR	3185258	CallExpression	mp . getPart ( i + 1 )		3184748	1					
ANR	3185259	Callee	mp . getPart		3184748	0					
ANR	3185260	MemberAccess	mp . getPart		3184748	0					
ANR	3185261	Identifier	mp		3184748	0					
ANR	3185262	Identifier	getPart		3184748	1					
ANR	3185263	ArgumentList	i + 1		3184748	1					
ANR	3185264	Argument	i + 1		3184748	0					
ANR	3185265	AdditiveExpression	i + 1		3184748	0		+			
ANR	3185266	Identifier	i		3184748	0					
ANR	3185267	PrimaryExpression	1		3184748	1					
ANR	3185268	IfStatement	if ( style_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_STYLE )		3184748	1					
ANR	3185269	Condition	style_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_STYLE	232:10:7678:7728	3184748	0	True				
ANR	3185270	EqualityExpression	style_part . getType ( ) == UMSGPAT_PART_TYPE_ARG_STYLE		3184748	0		==			
ANR	3185271	CallExpression	style_part . getType ( )		3184748	0					
ANR	3185272	Callee	style_part . getType		3184748	0					
ANR	3185273	MemberAccess	style_part . getType		3184748	0					
ANR	3185274	Identifier	style_part		3184748	0					
ANR	3185275	Identifier	getType		3184748	1					
ANR	3185276	ArgumentList			3184748	1					
ANR	3185277	Identifier	UMSGPAT_PART_TYPE_ARG_STYLE		3184748	1					
ANR	3185278	CompoundStatement		96:7:3834:3889	3184748	1					
ANR	3185279	IdentifierDeclStatement	UnicodeString styleString = mp . getSubstring ( style_part ) ;	233:7:7740:7795	3184748	0	True				
ANR	3185280	IdentifierDecl	styleString = mp . getSubstring ( style_part )		3184748	0					
ANR	3185281	IdentifierDeclType	UnicodeString		3184748	0					
ANR	3185282	Identifier	styleString		3184748	1					
ANR	3185283	AssignmentExpression	styleString = mp . getSubstring ( style_part )		3184748	2		=			
ANR	3185284	Identifier	styleString		3184748	0					
ANR	3185285	CallExpression	mp . getSubstring ( style_part )		3184748	1					
ANR	3185286	Callee	mp . getSubstring		3184748	0					
ANR	3185287	MemberAccess	mp . getSubstring		3184748	0					
ANR	3185288	Identifier	mp		3184748	0					
ANR	3185289	Identifier	getSubstring		3184748	1					
ANR	3185290	ArgumentList	style_part		3184748	1					
ANR	3185291	Argument	style_part		3184748	0					
ANR	3185292	Identifier	style_part		3184748	0					
ANR	3185293	IfStatement	"if ( styleString == ""integer"" )"		3184748	1					
ANR	3185294	Condition	"styleString == ""integer"""	234:11:7808:7831	3184748	0	True				
ANR	3185295	EqualityExpression	"styleString == ""integer"""		3184748	0		==			
ANR	3185296	Identifier	styleString		3184748	0					
ANR	3185297	PrimaryExpression	"""integer"""		3184748	1					
ANR	3185298	CompoundStatement		97:37:3928:3928	3184748	1					
ANR	3185299	ExpressionStatement	type = Formattable :: kInt64	235:8:7844:7870	3184748	0	True				
ANR	3185300	AssignmentExpression	type = Formattable :: kInt64		3184748	0		=			
ANR	3185301	Identifier	type		3184748	0					
ANR	3185302	Identifier	Formattable :: kInt64		3184748	1					
ANR	3185303	ElseStatement	else		3184748	0					
ANR	3185304	IfStatement	"if ( styleString == ""currency"" )"		3184748	0					
ANR	3185305	Condition	"styleString == ""currency"""	236:18:7890:7914	3184748	0	True				
ANR	3185306	EqualityExpression	"styleString == ""currency"""		3184748	0		==			
ANR	3185307	Identifier	styleString		3184748	0					
ANR	3185308	PrimaryExpression	"""currency"""		3184748	1					
ANR	3185309	CompoundStatement		99:45:4011:4011	3184748	1					
ANR	3185310	ExpressionStatement	type = Formattable :: kDouble	237:8:7927:7954	3184748	0	True				
ANR	3185311	AssignmentExpression	type = Formattable :: kDouble		3184748	0		=			
ANR	3185312	Identifier	type		3184748	0					
ANR	3185313	Identifier	Formattable :: kDouble		3184748	1					
ANR	3185314	ElseStatement	else		3184748	0					
ANR	3185315	IfStatement	"if ( styleString == ""percent"" )"		3184748	0					
ANR	3185316	Condition	"styleString == ""percent"""	238:18:7974:7997	3184748	0	True				
ANR	3185317	EqualityExpression	"styleString == ""percent"""		3184748	0		==			
ANR	3185318	Identifier	styleString		3184748	0					
ANR	3185319	PrimaryExpression	"""percent"""		3184748	1					
ANR	3185320	CompoundStatement		101:44:4094:4094	3184748	1					
ANR	3185321	ExpressionStatement	type = Formattable :: kDouble	239:8:8010:8037	3184748	0	True				
ANR	3185322	AssignmentExpression	type = Formattable :: kDouble		3184748	0		=			
ANR	3185323	Identifier	type		3184748	0					
ANR	3185324	Identifier	Formattable :: kDouble		3184748	1					
ANR	3185325	ElseStatement	else		3184748	0					
ANR	3185326	CompoundStatement		103:14:4147:4147	3184748	0					
ANR	3185327	ExpressionStatement	type = Formattable :: kDouble	241:8:8102:8129	3184748	0	True				
ANR	3185328	AssignmentExpression	type = Formattable :: kDouble		3184748	0		=			
ANR	3185329	Identifier	type		3184748	0					
ANR	3185330	Identifier	Formattable :: kDouble		3184748	1					
ANR	3185331	ElseStatement	else		3184748	0					
ANR	3185332	CompoundStatement		106:13:4247:4247	3184748	0					
ANR	3185333	ExpressionStatement	type = Formattable :: kDouble	244:7:8206:8233	3184748	0	True				
ANR	3185334	AssignmentExpression	type = Formattable :: kDouble		3184748	0		=			
ANR	3185335	Identifier	type		3184748	0					
ANR	3185336	Identifier	Formattable :: kDouble		3184748	1					
ANR	3185337	ElseStatement	else		3184748	0					
ANR	3185338	IfStatement	"if ( ( typeString == ""date"" ) || ( typeString == ""time"" ) )"		3184748	0					
ANR	3185339	Condition	"( typeString == ""date"" ) || ( typeString == ""time"" )"	246:16:8259:8306	3184748	0	True				
ANR	3185340	OrExpression	"( typeString == ""date"" ) || ( typeString == ""time"" )"		3184748	0		||			
ANR	3185341	EqualityExpression	"typeString == ""date"""		3184748	0		==			
ANR	3185342	Identifier	typeString		3184748	0					
ANR	3185343	PrimaryExpression	"""date"""		3184748	1					
ANR	3185344	EqualityExpression	"typeString == ""time"""		3184748	1		==			
ANR	3185345	Identifier	typeString		3184748	0					
ANR	3185346	PrimaryExpression	"""time"""		3184748	1					
ANR	3185347	CompoundStatement		109:66:4403:4403	3184748	1					
ANR	3185348	ExpressionStatement	type = Formattable :: kDate	247:6:8317:8342	3184748	0	True				
ANR	3185349	AssignmentExpression	type = Formattable :: kDate		3184748	0		=			
ANR	3185350	Identifier	type		3184748	0					
ANR	3185351	Identifier	Formattable :: kDate		3184748	1					
ANR	3185352	ElseStatement	else		3184748	0					
ANR	3185353	IfStatement	"if ( ( typeString == ""spellout"" ) || ( typeString == ""ordinal"" ) || ( typeString == ""duration"" ) )"		3184748	0					
ANR	3185354	Condition	"( typeString == ""spellout"" ) || ( typeString == ""ordinal"" ) || ( typeString == ""duration"" )"	248:16:8360:8451	3184748	0	True				
ANR	3185355	OrExpression	"( typeString == ""spellout"" ) || ( typeString == ""ordinal"" ) || ( typeString == ""duration"" )"		3184748	0		||			
ANR	3185356	EqualityExpression	"typeString == ""spellout"""		3184748	0		==			
ANR	3185357	Identifier	typeString		3184748	0					
ANR	3185358	PrimaryExpression	"""spellout"""		3184748	1					
ANR	3185359	OrExpression	"( typeString == ""ordinal"" ) || ( typeString == ""duration"" )"		3184748	1		||			
ANR	3185360	EqualityExpression	"typeString == ""ordinal"""		3184748	0		==			
ANR	3185361	Identifier	typeString		3184748	0					
ANR	3185362	PrimaryExpression	"""ordinal"""		3184748	1					
ANR	3185363	EqualityExpression	"typeString == ""duration"""		3184748	1		==			
ANR	3185364	Identifier	typeString		3184748	0					
ANR	3185365	PrimaryExpression	"""duration"""		3184748	1					
ANR	3185366	CompoundStatement		112:38:4548:4548	3184748	1					
ANR	3185367	ExpressionStatement	type = Formattable :: kDouble	250:6:8462:8489	3184748	0	True				
ANR	3185368	AssignmentExpression	type = Formattable :: kDouble		3184748	0		=			
ANR	3185369	Identifier	type		3184748	0					
ANR	3185370	Identifier	Formattable :: kDouble		3184748	1					
ANR	3185371	ElseStatement	else		3184748	0					
ANR	3185372	CompoundStatement		115:11:4603:4603	3184748	0					
ANR	3185373	Statement	intl_errors_set	256:5:8660:8674	3184748	0	True				
ANR	3185374	Statement	(	256:20:8675:8675	3184748	1	True				
ANR	3185375	Statement	&	256:21:8676:8676	3184748	2	True				
ANR	3185376	Statement	err	256:22:8677:8679	3184748	3	True				
ANR	3185377	Statement	","	256:25:8680:8680	3184748	4	True				
ANR	3185378	Statement	U_PARSE_ERROR	256:27:8682:8694	3184748	5	True				
ANR	3185379	Statement	","	256:40:8695:8695	3184748	6	True				
ANR	3185380	Statement	"""Expected UMSGPAT_PART_TYPE_ARG_TYPE part following """	257:6:8703:8755	3184748	7	True				
ANR	3185381	Statement	"""UMSGPAT_ARG_TYPE_SIMPLE part"""	258:6:8763:8792	3184748	8	True				
ANR	3185382	Statement	","	258:36:8793:8793	3184748	9	True				
ANR	3185383	Statement	0	258:38:8795:8795	3184748	10	True				
ANR	3185384	Statement	)	258:39:8796:8796	3184748	11	True				
ANR	3185385	ExpressionStatement		258:40:8797:8797	3184748	12	True				
ANR	3185386	ContinueStatement	continue ;	259:5:8804:8812	3184748	13	True				
ANR	3185387	ElseStatement	else		3184748	0					
ANR	3185388	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_PLURAL )		3184748	0					
ANR	3185389	Condition	argType == UMSGPAT_ARG_TYPE_PLURAL	261:14:8834:8867	3184748	0	True				
ANR	3185390	EqualityExpression	argType == UMSGPAT_ARG_TYPE_PLURAL		3184748	0		==			
ANR	3185391	Identifier	argType		3184748	0					
ANR	3185392	Identifier	UMSGPAT_ARG_TYPE_PLURAL		3184748	1					
ANR	3185393	CompoundStatement		124:50:4964:4964	3184748	1					
ANR	3185394	ExpressionStatement	type = Formattable :: kDouble	262:4:8876:8903	3184748	0	True				
ANR	3185395	AssignmentExpression	type = Formattable :: kDouble		3184748	0		=			
ANR	3185396	Identifier	type		3184748	0					
ANR	3185397	Identifier	Formattable :: kDouble		3184748	1					
ANR	3185398	ElseStatement	else		3184748	0					
ANR	3185399	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_CHOICE )		3184748	0					
ANR	3185400	Condition	argType == UMSGPAT_ARG_TYPE_CHOICE	263:14:8919:8952	3184748	0	True				
ANR	3185401	EqualityExpression	argType == UMSGPAT_ARG_TYPE_CHOICE		3184748	0		==			
ANR	3185402	Identifier	argType		3184748	0					
ANR	3185403	Identifier	UMSGPAT_ARG_TYPE_CHOICE		3184748	1					
ANR	3185404	CompoundStatement		126:50:5049:5049	3184748	1					
ANR	3185405	ExpressionStatement	type = Formattable :: kDouble	264:4:8961:8988	3184748	0	True				
ANR	3185406	AssignmentExpression	type = Formattable :: kDouble		3184748	0		=			
ANR	3185407	Identifier	type		3184748	0					
ANR	3185408	Identifier	Formattable :: kDouble		3184748	1					
ANR	3185409	ElseStatement	else		3184748	0					
ANR	3185410	IfStatement	if ( argType == UMSGPAT_ARG_TYPE_SELECT )		3184748	0					
ANR	3185411	Condition	argType == UMSGPAT_ARG_TYPE_SELECT	265:14:9004:9037	3184748	0	True				
ANR	3185412	EqualityExpression	argType == UMSGPAT_ARG_TYPE_SELECT		3184748	0		==			
ANR	3185413	Identifier	argType		3184748	0					
ANR	3185414	Identifier	UMSGPAT_ARG_TYPE_SELECT		3184748	1					
ANR	3185415	CompoundStatement		128:50:5134:5134	3184748	1					
ANR	3185416	ExpressionStatement	type = Formattable :: kString	266:4:9046:9073	3184748	0	True				
ANR	3185417	AssignmentExpression	type = Formattable :: kString		3184748	0		=			
ANR	3185418	Identifier	type		3184748	0					
ANR	3185419	Identifier	Formattable :: kString		3184748	1					
ANR	3185420	ElseStatement	else		3184748	0					
ANR	3185421	CompoundStatement		130:10:5179:5179	3184748	0					
ANR	3185422	ExpressionStatement	type = Formattable :: kString	268:4:9091:9118	3184748	0	True				
ANR	3185423	AssignmentExpression	type = Formattable :: kString		3184748	0		=			
ANR	3185424	Identifier	type		3184748	0					
ANR	3185425	Identifier	Formattable :: kString		3184748	1					
ANR	3185426	IfStatement	if ( * storedType != Formattable :: kObject && * storedType != type )		3184748	7					
ANR	3185427	Condition	* storedType != Formattable :: kObject && * storedType != type	273:6:9214:9271	3184748	0	True				
ANR	3185428	AndExpression	* storedType != Formattable :: kObject && * storedType != type		3184748	0		&&			
ANR	3185429	EqualityExpression	* storedType != Formattable :: kObject		3184748	0		!=			
ANR	3185430	UnaryOperationExpression	* storedType		3184748	0					
ANR	3185431	UnaryOperator	*		3184748	0					
ANR	3185432	Identifier	storedType		3184748	1					
ANR	3185433	Identifier	Formattable :: kObject		3184748	1					
ANR	3185434	EqualityExpression	* storedType != type		3184748	1		!=			
ANR	3185435	UnaryOperationExpression	* storedType		3184748	0					
ANR	3185436	UnaryOperator	*		3184748	0					
ANR	3185437	Identifier	storedType		3184748	1					
ANR	3185438	Identifier	type		3184748	1					
ANR	3185439	CompoundStatement		136:66:5368:5368	3184748	1					
ANR	3185440	ExpressionStatement	"intl_errors_set ( & err , U_ARGUMENT_TYPE_MISMATCH , ""Inconsistent types declared for an argument"" , 0 )"	274:3:9279:9380	3184748	0	True				
ANR	3185441	CallExpression	"intl_errors_set ( & err , U_ARGUMENT_TYPE_MISMATCH , ""Inconsistent types declared for an argument"" , 0 )"		3184748	0					
ANR	3185442	Callee	intl_errors_set		3184748	0					
ANR	3185443	Identifier	intl_errors_set		3184748	0					
ANR	3185444	ArgumentList	& err		3184748	1					
ANR	3185445	Argument	& err		3184748	0					
ANR	3185446	UnaryOperationExpression	& err		3184748	0					
ANR	3185447	UnaryOperator	&		3184748	0					
ANR	3185448	Identifier	err		3184748	1					
ANR	3185449	Argument	U_ARGUMENT_TYPE_MISMATCH		3184748	1					
ANR	3185450	Identifier	U_ARGUMENT_TYPE_MISMATCH		3184748	0					
ANR	3185451	Argument	"""Inconsistent types declared for an argument"""		3184748	2					
ANR	3185452	PrimaryExpression	"""Inconsistent types declared for an argument"""		3184748	0					
ANR	3185453	Argument	0		3184748	3					
ANR	3185454	PrimaryExpression	0		3184748	0					
ANR	3185455	ContinueStatement	continue ;	276:3:9385:9393	3184748	1	True				
ANR	3185456	ExpressionStatement	* storedType = type	279:2:9402:9420	3184748	8	True				
ANR	3185457	AssignmentExpression	* storedType = type		3184748	0		=			
ANR	3185458	UnaryOperationExpression	* storedType		3184748	0					
ANR	3185459	UnaryOperator	*		3184748	0					
ANR	3185460	Identifier	storedType		3184748	1					
ANR	3185461	Identifier	type		3184748	1					
ANR	3185462	IfStatement	if ( U_FAILURE ( err . code ) )		3184748	9					
ANR	3185463	Condition	U_FAILURE ( err . code )	282:5:9456:9474	3184748	0	True				
ANR	3185464	CallExpression	U_FAILURE ( err . code )		3184748	0					
ANR	3185465	Callee	U_FAILURE		3184748	0					
ANR	3185466	Identifier	U_FAILURE		3184748	0					
ANR	3185467	ArgumentList	err . code		3184748	1					
ANR	3185468	Argument	err . code		3184748	0					
ANR	3185469	MemberAccess	err . code		3184748	0					
ANR	3185470	Identifier	err		3184748	0					
ANR	3185471	Identifier	code		3184748	1					
ANR	3185472	CompoundStatement		145:26:5571:5571	3184748	1					
ANR	3185473	ExpressionStatement	zend_hash_destroy ( ret )	283:2:9481:9503	3184748	0	True				
ANR	3185474	CallExpression	zend_hash_destroy ( ret )		3184748	0					
ANR	3185475	Callee	zend_hash_destroy		3184748	0					
ANR	3185476	Identifier	zend_hash_destroy		3184748	0					
ANR	3185477	ArgumentList	ret		3184748	1					
ANR	3185478	Argument	ret		3184748	0					
ANR	3185479	Identifier	ret		3184748	0					
ANR	3185480	ExpressionStatement	efree ( ret )	284:2:9507:9517	3184748	1	True				
ANR	3185481	CallExpression	efree ( ret )		3184748	0					
ANR	3185482	Callee	efree		3184748	0					
ANR	3185483	Identifier	efree		3184748	0					
ANR	3185484	ArgumentList	ret		3184748	1					
ANR	3185485	Argument	ret		3184748	0					
ANR	3185486	Identifier	ret		3184748	0					
ANR	3185487	ReturnStatement	return NULL ;	286:2:9522:9533	3184748	2	True				
ANR	3185488	Identifier	NULL		3184748	0					
ANR	3185489	ExpressionStatement	mfo -> mf_data . arg_types = ret	289:1:9540:9568	3184748	10	True				
ANR	3185490	AssignmentExpression	mfo -> mf_data . arg_types = ret		3184748	0		=			
ANR	3185491	MemberAccess	mfo -> mf_data . arg_types		3184748	0					
ANR	3185492	PtrMemberAccess	mfo -> mf_data		3184748	0					
ANR	3185493	Identifier	mfo		3184748	0					
ANR	3185494	Identifier	mf_data		3184748	1					
ANR	3185495	Identifier	arg_types		3184748	1					
ANR	3185496	Identifier	ret		3184748	1					
ANR	3185497	ReturnStatement	return ret ;	291:1:9572:9582	3184748	11	True				
ANR	3185498	Identifier	ret		3184748	0					
ANR	3185499	ReturnType	static HashTable *		3184748	1					
ANR	3185500	Identifier	umsg_parse_format		3184748	2					
ANR	3185501	ParameterList	"MessageFormatter_object * mfo , const MessagePattern & mp , intl_error & err"		3184748	3					
ANR	3185502	Parameter	MessageFormatter_object * mfo	135:36:3814:3841	3184748	0	True				
ANR	3185503	ParameterType	MessageFormatter_object *		3184748	0					
ANR	3185504	Identifier	mfo		3184748	1					
ANR	3185505	Parameter	const MessagePattern & mp	136:9:3853:3876	3184748	1	True				
ANR	3185506	ParameterType	const MessagePattern &		3184748	0					
ANR	3185507	Identifier	mp		3184748	1					
ANR	3185508	Parameter	intl_error & err	137:9:3888:3902	3184748	2	True				
ANR	3185509	ParameterType	intl_error &		3184748	0					
ANR	3185510	Identifier	err		3184748	1					
ANR	3185511	CFGEntryNode	ENTRY		3184748		True				
ANR	3185512	CFGExitNode	EXIT		3184748		True				
ANR	3185513	Symbol	& bogusType		3184748						
ANR	3185514	Symbol	zend_hash_str_update_mem		3184748						
ANR	3185515	Symbol	UMSGPAT_PART_TYPE_ARG_NUMBER		3184748						
ANR	3185516	Symbol	type		3184748						
ANR	3185517	Symbol	p . getArgType		3184748						
ANR	3185518	Symbol	UMSGPAT_ARG_TYPE_SELECT		3184748						
ANR	3185519	Symbol	UMSGPAT_ARG_TYPE_NONE		3184748						
ANR	3185520	Symbol	UMSGPAT_ARG_TYPE_SIMPLE		3184748						
ANR	3185521	Symbol	style_part . getType		3184748						
ANR	3185522	Symbol	Formattable :: kObject		3184748						
ANR	3185523	Symbol	argName		3184748						
ANR	3185524	Symbol	style_part		3184748						
ANR	3185525	Symbol	ret		3184748						
ANR	3185526	Symbol	mp		3184748						
ANR	3185527	Symbol	NULL		3184748						
ANR	3185528	Symbol	UMSGPAT_PART_TYPE_ARG_START		3184748						
ANR	3185529	Symbol	argName . getBuffer		3184748						
ANR	3185530	Symbol	umsg_get_numeric_types		3184748						
ANR	3185531	Symbol	mfo -> mf_data . arg_types		3184748						
ANR	3185532	Symbol	zend_hash_index_find_ptr		3184748						
ANR	3185533	Symbol	bogusType		3184748						
ANR	3185534	Symbol	argType		3184748						
ANR	3185535	Symbol	type_part		3184748						
ANR	3185536	Symbol	argNumber		3184748						
ANR	3185537	Symbol	name_part		3184748						
ANR	3185538	Symbol	U_SUCCESS		3184748						
ANR	3185539	Symbol	Formattable :: kString		3184748						
ANR	3185540	Symbol	mp . getSubstring		3184748						
ANR	3185541	Symbol	UMSGPAT_PART_TYPE_ARG_NAME		3184748						
ANR	3185542	Symbol	( ( MessageFormat * ) mfo -> mf_data . umsgf ) -> usesNamedArguments		3184748						
ANR	3185543	Symbol	p . getType		3184748						
ANR	3185544	Symbol	mfo -> mf_data . umsgf		3184748						
ANR	3185545	Symbol	UMSGPAT_ARG_TYPE_PLURAL		3184748						
ANR	3185546	Symbol	styleString		3184748						
ANR	3185547	Symbol	UMSGPAT_ARG_TYPE_CHOICE		3184748						
ANR	3185548	Symbol	err . code		3184748						
ANR	3185549	Symbol	* * mfo		3184748						
ANR	3185550	Symbol	& err		3184748						
ANR	3185551	Symbol	U_FAILURE		3184748						
ANR	3185552	Symbol	Formattable :: kDate		3184748						
ANR	3185553	Symbol	zend_hash_index_update_mem		3184748						
ANR	3185554	Symbol	Formattable :: kDouble		3184748						
ANR	3185555	Symbol	* storedType		3184748						
ANR	3185556	Symbol	storedType		3184748						
ANR	3185557	Symbol	arg_types_dtor		3184748						
ANR	3185558	Symbol	zend_hash_str_find_ptr		3184748						
ANR	3185559	Symbol	typeString		3184748						
ANR	3185560	Symbol	name_part . getValue		3184748						
ANR	3185561	Symbol	name_part . getType		3184748						
ANR	3185562	Symbol	UMSGPAT_PART_TYPE_ARG_STYLE		3184748						
ANR	3185563	Symbol	Formattable :: kInt64		3184748						
ANR	3185564	Symbol	U_ARGUMENT_TYPE_MISMATCH		3184748						
ANR	3185565	Symbol	* mfo		3184748						
ANR	3185566	Symbol	UMSGPAT_PART_TYPE_ARG_TYPE		3184748						
ANR	3185567	Symbol	err		3184748						
ANR	3185568	Symbol	parts_count		3184748						
ANR	3185569	Symbol	mp . countParts		3184748						
ANR	3185570	Symbol	i		3184748						
ANR	3185571	Symbol	mfo -> mf_data		3184748						
ANR	3185572	Symbol	* mfo -> mf_data . umsgf		3184748						
ANR	3185573	Symbol	mp . getPart		3184748						
ANR	3185574	Symbol	p		3184748						
ANR	3185575	Symbol	U_MEMORY_ALLOCATION_ERROR		3184748						
ANR	3185576	Symbol	argName . length		3184748						
ANR	3185577	Symbol	type_part . getType		3184748						
ANR	3185578	Symbol	mfo		3184748						
ANR	3185579	Symbol	U_INVALID_FORMAT_ERROR		3184748						
ANR	3185580	Symbol	* mfo -> mf_data		3184748						
ANR	3185581	Function	umsg_get_types	295:0:9594:10109							
ANR	3185582	FunctionDef	"umsg_get_types (MessageFormatter_object * mfo , intl_error & err)"		3185581	0					
ANR	3185583	CompoundStatement		297:0:9683:10109	3185581	0					
ANR	3185584	IdentifierDeclStatement	MessageFormat * mf = ( MessageFormat * ) mfo -> mf_data . umsgf ;	298:1:9686:9741	3185581	0	True				
ANR	3185585	IdentifierDecl	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		3185581	0					
ANR	3185586	IdentifierDeclType	MessageFormat *		3185581	0					
ANR	3185587	Identifier	mf		3185581	1					
ANR	3185588	AssignmentExpression	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		3185581	2		=			
ANR	3185589	Identifier	mf		3185581	0					
ANR	3185590	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		3185581	1					
ANR	3185591	CastTarget	MessageFormat *		3185581	0					
ANR	3185592	MemberAccess	mfo -> mf_data . umsgf		3185581	1					
ANR	3185593	PtrMemberAccess	mfo -> mf_data		3185581	0					
ANR	3185594	Identifier	mfo		3185581	0					
ANR	3185595	Identifier	mf_data		3185581	1					
ANR	3185596	Identifier	umsgf		3185581	1					
ANR	3185597	IdentifierDeclStatement	const MessagePattern mp = MessageFormatAdapter :: getMessagePattern ( mf ) ;	301:1:9772:9841	3185581	1	True				
ANR	3185598	IdentifierDecl	mp = MessageFormatAdapter :: getMessagePattern ( mf )		3185581	0					
ANR	3185599	IdentifierDeclType	const MessagePattern		3185581	0					
ANR	3185600	Identifier	mp		3185581	1					
ANR	3185601	AssignmentExpression	mp = MessageFormatAdapter :: getMessagePattern ( mf )		3185581	2		=			
ANR	3185602	Identifier	mp		3185581	0					
ANR	3185603	CallExpression	MessageFormatAdapter :: getMessagePattern ( mf )		3185581	1					
ANR	3185604	Callee	MessageFormatAdapter :: getMessagePattern		3185581	0					
ANR	3185605	Identifier	MessageFormatAdapter :: getMessagePattern		3185581	0					
ANR	3185606	ArgumentList	mf		3185581	1					
ANR	3185607	Argument	mf		3185581	0					
ANR	3185608	Identifier	mf		3185581	0					
ANR	3185609	ReturnStatement	"return umsg_parse_format ( mfo , mp , err ) ;"	303:1:9845:9883	3185581	2	True				
ANR	3185610	CallExpression	"umsg_parse_format ( mfo , mp , err )"		3185581	0					
ANR	3185611	Callee	umsg_parse_format		3185581	0					
ANR	3185612	Identifier	umsg_parse_format		3185581	0					
ANR	3185613	ArgumentList	mfo		3185581	1					
ANR	3185614	Argument	mfo		3185581	0					
ANR	3185615	Identifier	mfo		3185581	0					
ANR	3185616	Argument	mp		3185581	1					
ANR	3185617	Identifier	mp		3185581	0					
ANR	3185618	Argument	err		3185581	2					
ANR	3185619	Identifier	err		3185581	0					
ANR	3185620	ReturnType	static HashTable *		3185581	1					
ANR	3185621	Identifier	umsg_get_types		3185581	2					
ANR	3185622	ParameterList	"MessageFormatter_object * mfo , intl_error & err"		3185581	3					
ANR	3185623	Parameter	MessageFormatter_object * mfo	295:33:9627:9654	3185581	0	True				
ANR	3185624	ParameterType	MessageFormatter_object *		3185581	0					
ANR	3185625	Identifier	mfo		3185581	1					
ANR	3185626	Parameter	intl_error & err	296:9:9666:9680	3185581	1	True				
ANR	3185627	ParameterType	intl_error &		3185581	0					
ANR	3185628	Identifier	err		3185581	1					
ANR	3185629	CFGEntryNode	ENTRY		3185581		True				
ANR	3185630	CFGExitNode	EXIT		3185581		True				
ANR	3185631	Symbol	* mfo		3185581						
ANR	3185632	Symbol	mp		3185581						
ANR	3185633	Symbol	err		3185581						
ANR	3185634	Symbol	umsg_parse_format		3185581						
ANR	3185635	Symbol	MessageFormatAdapter :: getMessagePattern		3185581						
ANR	3185636	Symbol	mfo		3185581						
ANR	3185637	Symbol	mf		3185581						
ANR	3185638	Symbol	mfo -> mf_data		3185581						
ANR	3185639	Symbol	mfo -> mf_data . umsgf		3185581						
ANR	3185640	Function	umsg_set_timezone	315:0:10112:11307							
ANR	3185641	FunctionDef	"umsg_set_timezone (MessageFormatter_object * mfo , intl_error & err)"		3185640	0					
ANR	3185642	CompoundStatement		317:0:10198:11307	3185640	0					
ANR	3185643	IdentifierDeclStatement	MessageFormat * mf = ( MessageFormat * ) mfo -> mf_data . umsgf ;	318:1:10201:10256	3185640	0	True				
ANR	3185644	IdentifierDecl	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		3185640	0					
ANR	3185645	IdentifierDeclType	MessageFormat *		3185640	0					
ANR	3185646	Identifier	mf		3185640	1					
ANR	3185647	AssignmentExpression	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		3185640	2		=			
ANR	3185648	Identifier	mf		3185640	0					
ANR	3185649	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		3185640	1					
ANR	3185650	CastTarget	MessageFormat *		3185640	0					
ANR	3185651	MemberAccess	mfo -> mf_data . umsgf		3185640	1					
ANR	3185652	PtrMemberAccess	mfo -> mf_data		3185640	0					
ANR	3185653	Identifier	mfo		3185640	0					
ANR	3185654	Identifier	mf_data		3185640	1					
ANR	3185655	Identifier	umsgf		3185640	1					
ANR	3185656	IdentifierDeclStatement	TimeZone * used_tz = NULL ;	319:1:10259:10285	3185640	1	True				
ANR	3185657	IdentifierDecl	* used_tz = NULL		3185640	0					
ANR	3185658	IdentifierDeclType	TimeZone *		3185640	0					
ANR	3185659	Identifier	used_tz		3185640	1					
ANR	3185660	AssignmentExpression	* used_tz = NULL		3185640	2		=			
ANR	3185661	Identifier	NULL		3185640	0					
ANR	3185662	Identifier	NULL		3185640	1					
ANR	3185663	IdentifierDeclStatement	const Format * * formats ;	320:1:10288:10311	3185640	2	True				
ANR	3185664	IdentifierDecl	* * formats		3185640	0					
ANR	3185665	IdentifierDeclType	const Format * *		3185640	0					
ANR	3185666	Identifier	formats		3185640	1					
ANR	3185667	IdentifierDeclStatement	int32_t count ;	321:1:10314:10330	3185640	3	True				
ANR	3185668	IdentifierDecl	count		3185640	0					
ANR	3185669	IdentifierDeclType	int32_t		3185640	0					
ANR	3185670	Identifier	count		3185640	1					
ANR	3185671	IfStatement	if ( mfo -> mf_data . tz_set )		3185640	4					
ANR	3185672	Condition	mfo -> mf_data . tz_set	328:5:10611:10629	3185640	0	True				
ANR	3185673	MemberAccess	mfo -> mf_data . tz_set		3185640	0					
ANR	3185674	PtrMemberAccess	mfo -> mf_data		3185640	0					
ANR	3185675	Identifier	mfo		3185640	0					
ANR	3185676	Identifier	mf_data		3185640	1					
ANR	3185677	Identifier	tz_set		3185640	1					
ANR	3185678	CompoundStatement		12:26:433:433	3185640	1					
ANR	3185679	ReturnStatement	return ;	329:2:10636:10642	3185640	0	True				
ANR	3185680	ExpressionStatement	formats = mf -> getFormats ( count )	332:1:10668:10699	3185640	5	True				
ANR	3185681	AssignmentExpression	formats = mf -> getFormats ( count )		3185640	0		=			
ANR	3185682	Identifier	formats		3185640	0					
ANR	3185683	CallExpression	mf -> getFormats ( count )		3185640	1					
ANR	3185684	Callee	mf -> getFormats		3185640	0					
ANR	3185685	PtrMemberAccess	mf -> getFormats		3185640	0					
ANR	3185686	Identifier	mf		3185640	0					
ANR	3185687	Identifier	getFormats		3185640	1					
ANR	3185688	ArgumentList	count		3185640	1					
ANR	3185689	Argument	count		3185640	0					
ANR	3185690	Identifier	count		3185640	0					
ANR	3185691	IfStatement	if ( formats == NULL )		3185640	6					
ANR	3185692	Condition	formats == NULL	334:5:10707:10721	3185640	0	True				
ANR	3185693	EqualityExpression	formats == NULL		3185640	0		==			
ANR	3185694	Identifier	formats		3185640	0					
ANR	3185695	Identifier	NULL		3185640	1					
ANR	3185696	CompoundStatement		18:22:525:525	3185640	1					
ANR	3185697	ExpressionStatement	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Out of memory retrieving subformats"" , 0 )"	335:2:10728:10821	3185640	0	True				
ANR	3185698	CallExpression	"intl_errors_set ( & err , U_MEMORY_ALLOCATION_ERROR , ""Out of memory retrieving subformats"" , 0 )"		3185640	0					
ANR	3185699	Callee	intl_errors_set		3185640	0					
ANR	3185700	Identifier	intl_errors_set		3185640	0					
ANR	3185701	ArgumentList	& err		3185640	1					
ANR	3185702	Argument	& err		3185640	0					
ANR	3185703	UnaryOperationExpression	& err		3185640	0					
ANR	3185704	UnaryOperator	&		3185640	0					
ANR	3185705	Identifier	err		3185640	1					
ANR	3185706	Argument	U_MEMORY_ALLOCATION_ERROR		3185640	1					
ANR	3185707	Identifier	U_MEMORY_ALLOCATION_ERROR		3185640	0					
ANR	3185708	Argument	"""Out of memory retrieving subformats"""		3185640	2					
ANR	3185709	PrimaryExpression	"""Out of memory retrieving subformats"""		3185640	0					
ANR	3185710	Argument	0		3185640	3					
ANR	3185711	PrimaryExpression	0		3185640	0					
ANR	3185712	ForStatement	for ( int i = 0 ; U_SUCCESS ( err . code ) && i < count ; i ++ )		3185640	7					
ANR	3185713	ForInit	int i = 0 ;	339:6:10833:10842	3185640	0	True				
ANR	3185714	IdentifierDeclStatement	int i = 0 ;		3185640	0					
ANR	3185715	IdentifierDecl	i = 0		3185640	0					
ANR	3185716	IdentifierDeclType	int		3185640	0					
ANR	3185717	Identifier	i		3185640	1					
ANR	3185718	AssignmentExpression	i = 0		3185640	2		=			
ANR	3185719	Identifier	i		3185640	0					
ANR	3185720	PrimaryExpression	0		3185640	1					
ANR	3185721	Condition	U_SUCCESS ( err . code ) && i < count	339:17:10844:10875	3185640	1	True				
ANR	3185722	AndExpression	U_SUCCESS ( err . code ) && i < count		3185640	0		&&			
ANR	3185723	CallExpression	U_SUCCESS ( err . code )		3185640	0					
ANR	3185724	Callee	U_SUCCESS		3185640	0					
ANR	3185725	Identifier	U_SUCCESS		3185640	0					
ANR	3185726	ArgumentList	err . code		3185640	1					
ANR	3185727	Argument	err . code		3185640	0					
ANR	3185728	MemberAccess	err . code		3185640	0					
ANR	3185729	Identifier	err		3185640	0					
ANR	3185730	Identifier	code		3185640	1					
ANR	3185731	RelationalExpression	i < count		3185640	1		<			
ANR	3185732	Identifier	i		3185640	0					
ANR	3185733	Identifier	count		3185640	1					
ANR	3185734	PostIncDecOperationExpression	i ++	339:51:10878:10880	3185640	2	True				
ANR	3185735	Identifier	i		3185640	0					
ANR	3185736	IncDec	++		3185640	1					
ANR	3185737	CompoundStatement		23:56:684:684	3185640	3					
ANR	3185738	Statement	DateFormat	340:2:10887:10896	3185640	0	True				
ANR	3185739	Statement	*	340:12:10897:10897	3185640	1	True				
ANR	3185740	Statement	df	340:14:10899:10900	3185640	2	True				
ANR	3185741	Statement	=	340:17:10902:10902	3185640	3	True				
ANR	3185742	Statement	dynamic_cast	340:19:10904:10915	3185640	4	True				
ANR	3185743	Statement	<	340:31:10916:10916	3185640	5	True				
ANR	3185744	Statement	DateFormat	340:32:10917:10926	3185640	6	True				
ANR	3185745	Statement	*	340:42:10927:10927	3185640	7	True				
ANR	3185746	Statement	>	340:43:10928:10928	3185640	8	True				
ANR	3185747	Statement	(	340:44:10929:10929	3185640	9	True				
ANR	3185748	Statement	const_cast	341:3:10934:10943	3185640	10	True				
ANR	3185749	Statement	<	341:13:10944:10944	3185640	11	True				
ANR	3185750	Statement	Format	341:14:10945:10950	3185640	12	True				
ANR	3185751	Statement	*	341:21:10952:10952	3185640	13	True				
ANR	3185752	Statement	>	341:22:10953:10953	3185640	14	True				
ANR	3185753	Statement	(	341:23:10954:10954	3185640	15	True				
ANR	3185754	Statement	formats	341:24:10955:10961	3185640	16	True				
ANR	3185755	Statement	[	341:31:10962:10962	3185640	17	True				
ANR	3185756	Statement	i	341:32:10963:10963	3185640	18	True				
ANR	3185757	Statement	]	341:33:10964:10964	3185640	19	True				
ANR	3185758	Statement	)	341:34:10965:10965	3185640	20	True				
ANR	3185759	Statement	)	341:35:10966:10966	3185640	21	True				
ANR	3185760	ExpressionStatement		341:36:10967:10967	3185640	22	True				
ANR	3185761	IfStatement	if ( df == NULL )		3185640	23					
ANR	3185762	Condition	df == NULL	342:6:10975:10984	3185640	0	True				
ANR	3185763	EqualityExpression	df == NULL		3185640	0		==			
ANR	3185764	Identifier	df		3185640	0					
ANR	3185765	Identifier	NULL		3185640	1					
ANR	3185766	CompoundStatement		26:18:788:788	3185640	1					
ANR	3185767	ContinueStatement	continue ;	343:3:10992:11000	3185640	0	True				
ANR	3185768	IfStatement	if ( used_tz == NULL )		3185640	24					
ANR	3185769	Condition	used_tz == NULL	346:6:11013:11027	3185640	0	True				
ANR	3185770	EqualityExpression	used_tz == NULL		3185640	0		==			
ANR	3185771	Identifier	used_tz		3185640	0					
ANR	3185772	Identifier	NULL		3185640	1					
ANR	3185773	CompoundStatement		31:3:836:865	3185640	1					
ANR	3185774	IdentifierDeclStatement	"zval nullzv , * zvptr = & nullzv ;"	347:3:11035:11064	3185640	0	True				
ANR	3185775	IdentifierDecl	nullzv		3185640	0					
ANR	3185776	IdentifierDeclType	zval		3185640	0					
ANR	3185777	Identifier	nullzv		3185640	1					
ANR	3185778	IdentifierDecl	* zvptr = & nullzv		3185640	1					
ANR	3185779	IdentifierDeclType	zval *		3185640	0					
ANR	3185780	Identifier	zvptr		3185640	1					
ANR	3185781	AssignmentExpression	* zvptr = & nullzv		3185640	2		=			
ANR	3185782	Identifier	zvptr		3185640	0					
ANR	3185783	UnaryOperationExpression	& nullzv		3185640	1					
ANR	3185784	UnaryOperator	&		3185640	0					
ANR	3185785	Identifier	nullzv		3185640	1					
ANR	3185786	ExpressionStatement	ZVAL_NULL ( zvptr )	348:3:11069:11085	3185640	1	True				
ANR	3185787	CallExpression	ZVAL_NULL ( zvptr )		3185640	0					
ANR	3185788	Callee	ZVAL_NULL		3185640	0					
ANR	3185789	Identifier	ZVAL_NULL		3185640	0					
ANR	3185790	ArgumentList	zvptr		3185640	1					
ANR	3185791	Argument	zvptr		3185640	0					
ANR	3185792	Identifier	zvptr		3185640	0					
ANR	3185793	ExpressionStatement	"used_tz = timezone_process_timezone_argument ( zvptr , & err , ""msgfmt_format"" )"	349:3:11090:11164	3185640	2	True				
ANR	3185794	AssignmentExpression	"used_tz = timezone_process_timezone_argument ( zvptr , & err , ""msgfmt_format"" )"		3185640	0		=			
ANR	3185795	Identifier	used_tz		3185640	0					
ANR	3185796	CallExpression	"timezone_process_timezone_argument ( zvptr , & err , ""msgfmt_format"" )"		3185640	1					
ANR	3185797	Callee	timezone_process_timezone_argument		3185640	0					
ANR	3185798	Identifier	timezone_process_timezone_argument		3185640	0					
ANR	3185799	ArgumentList	zvptr		3185640	1					
ANR	3185800	Argument	zvptr		3185640	0					
ANR	3185801	Identifier	zvptr		3185640	0					
ANR	3185802	Argument	& err		3185640	1					
ANR	3185803	UnaryOperationExpression	& err		3185640	0					
ANR	3185804	UnaryOperator	&		3185640	0					
ANR	3185805	Identifier	err		3185640	1					
ANR	3185806	Argument	"""msgfmt_format"""		3185640	2					
ANR	3185807	PrimaryExpression	"""msgfmt_format"""		3185640	0					
ANR	3185808	IfStatement	if ( used_tz == NULL )		3185640	3					
ANR	3185809	Condition	used_tz == NULL	350:7:11173:11187	3185640	0	True				
ANR	3185810	EqualityExpression	used_tz == NULL		3185640	0		==			
ANR	3185811	Identifier	used_tz		3185640	0					
ANR	3185812	Identifier	NULL		3185640	1					
ANR	3185813	CompoundStatement		34:24:991:991	3185640	1					
ANR	3185814	ContinueStatement	continue ;	351:4:11196:11204	3185640	0	True				
ANR	3185815	ExpressionStatement	df -> setTimeZone ( * used_tz )	355:2:11218:11243	3185640	25	True				
ANR	3185816	CallExpression	df -> setTimeZone ( * used_tz )		3185640	0					
ANR	3185817	Callee	df -> setTimeZone		3185640	0					
ANR	3185818	PtrMemberAccess	df -> setTimeZone		3185640	0					
ANR	3185819	Identifier	df		3185640	0					
ANR	3185820	Identifier	setTimeZone		3185640	1					
ANR	3185821	ArgumentList	* used_tz		3185640	1					
ANR	3185822	Argument	* used_tz		3185640	0					
ANR	3185823	UnaryOperationExpression	* used_tz		3185640	0					
ANR	3185824	UnaryOperator	*		3185640	0					
ANR	3185825	Identifier	used_tz		3185640	1					
ANR	3185826	IfStatement	if ( U_SUCCESS ( err . code ) )		3185640	8					
ANR	3185827	Condition	U_SUCCESS ( err . code )	358:5:11254:11272	3185640	0	True				
ANR	3185828	CallExpression	U_SUCCESS ( err . code )		3185640	0					
ANR	3185829	Callee	U_SUCCESS		3185640	0					
ANR	3185830	Identifier	U_SUCCESS		3185640	0					
ANR	3185831	ArgumentList	err . code		3185640	1					
ANR	3185832	Argument	err . code		3185640	0					
ANR	3185833	MemberAccess	err . code		3185640	0					
ANR	3185834	Identifier	err		3185640	0					
ANR	3185835	Identifier	code		3185640	1					
ANR	3185836	CompoundStatement		42:26:1076:1076	3185640	1					
ANR	3185837	ExpressionStatement	mfo -> mf_data . tz_set = 1	359:2:11279:11302	3185640	0	True				
ANR	3185838	AssignmentExpression	mfo -> mf_data . tz_set = 1		3185640	0		=			
ANR	3185839	MemberAccess	mfo -> mf_data . tz_set		3185640	0					
ANR	3185840	PtrMemberAccess	mfo -> mf_data		3185640	0					
ANR	3185841	Identifier	mfo		3185640	0					
ANR	3185842	Identifier	mf_data		3185640	1					
ANR	3185843	Identifier	tz_set		3185640	1					
ANR	3185844	PrimaryExpression	1		3185640	1					
ANR	3185845	ReturnType	static void		3185640	1					
ANR	3185846	Identifier	umsg_set_timezone		3185640	2					
ANR	3185847	ParameterList	"MessageFormatter_object * mfo , intl_error & err"		3185640	3					
ANR	3185848	Parameter	MessageFormatter_object * mfo	315:30:10142:10169	3185640	0	True				
ANR	3185849	ParameterType	MessageFormatter_object *		3185640	0					
ANR	3185850	Identifier	mfo		3185640	1					
ANR	3185851	Parameter	intl_error & err	316:9:10181:10195	3185640	1	True				
ANR	3185852	ParameterType	intl_error &		3185640	0					
ANR	3185853	Identifier	err		3185640	1					
ANR	3185854	CFGEntryNode	ENTRY		3185640		True				
ANR	3185855	CFGExitNode	EXIT		3185640		True				
ANR	3185856	Symbol	* mfo		3185640						
ANR	3185857	Symbol	df		3185640						
ANR	3185858	Symbol	NULL		3185640						
ANR	3185859	Symbol	formats		3185640						
ANR	3185860	Symbol	err		3185640						
ANR	3185861	Symbol	* used_tz		3185640						
ANR	3185862	Symbol	count		3185640						
ANR	3185863	Symbol	i		3185640						
ANR	3185864	Symbol	mfo -> mf_data		3185640						
ANR	3185865	Symbol	err . code		3185640						
ANR	3185866	Symbol	& err		3185640						
ANR	3185867	Symbol	U_MEMORY_ALLOCATION_ERROR		3185640						
ANR	3185868	Symbol	U_SUCCESS		3185640						
ANR	3185869	Symbol	mfo -> mf_data . tz_set		3185640						
ANR	3185870	Symbol	& nullzv		3185640						
ANR	3185871	Symbol	timezone_process_timezone_argument		3185640						
ANR	3185872	Symbol	mfo		3185640						
ANR	3185873	Symbol	mf		3185640						
ANR	3185874	Symbol	nullzv		3185640						
ANR	3185875	Symbol	used_tz		3185640						
ANR	3185876	Symbol	* mf		3185640						
ANR	3185877	Symbol	zvptr		3185640						
ANR	3185878	Symbol	mfo -> mf_data . umsgf		3185640						
ANR	3185879	Symbol	mf -> getFormats		3185640						
ANR	3185880	Function	umsg_format_helper	363:0:11310:18916							
ANR	3185881	FunctionDef	"umsg_format_helper (MessageFormatter_object * mfo , HashTable * args , UChar * * formatted , int32_t * formatted_len)"		3185880	0					
ANR	3185882	CompoundStatement		367:0:11456:18916	3185880	0					
ANR	3185883	IdentifierDeclStatement	int arg_count = zend_hash_num_elements ( args ) ;	368:1:11459:11503	3185880	0	True				
ANR	3185884	IdentifierDecl	arg_count = zend_hash_num_elements ( args )		3185880	0					
ANR	3185885	IdentifierDeclType	int		3185880	0					
ANR	3185886	Identifier	arg_count		3185880	1					
ANR	3185887	AssignmentExpression	arg_count = zend_hash_num_elements ( args )		3185880	2		=			
ANR	3185888	Identifier	arg_count		3185880	0					
ANR	3185889	CallExpression	zend_hash_num_elements ( args )		3185880	1					
ANR	3185890	Callee	zend_hash_num_elements		3185880	0					
ANR	3185891	Identifier	zend_hash_num_elements		3185880	0					
ANR	3185892	ArgumentList	args		3185880	1					
ANR	3185893	Argument	args		3185880	0					
ANR	3185894	Identifier	args		3185880	0					
ANR	3185895	IdentifierDeclStatement	std :: vector < Formattable > fargs ;	369:1:11506:11536	3185880	1	True				
ANR	3185896	IdentifierDecl	fargs		3185880	0					
ANR	3185897	IdentifierDeclType	std :: vector < Formattable >		3185880	0					
ANR	3185898	Identifier	fargs		3185880	1					
ANR	3185899	IdentifierDeclStatement	std :: vector < UnicodeString > farg_names ;	370:1:11539:11576	3185880	2	True				
ANR	3185900	IdentifierDecl	farg_names		3185880	0					
ANR	3185901	IdentifierDeclType	std :: vector < UnicodeString >		3185880	0					
ANR	3185902	Identifier	farg_names		3185880	1					
ANR	3185903	IdentifierDeclStatement	MessageFormat * mf = ( MessageFormat * ) mfo -> mf_data . umsgf ;	371:1:11579:11634	3185880	3	True				
ANR	3185904	IdentifierDecl	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		3185880	0					
ANR	3185905	IdentifierDeclType	MessageFormat *		3185880	0					
ANR	3185906	Identifier	mf		3185880	1					
ANR	3185907	AssignmentExpression	* mf = ( MessageFormat * ) mfo -> mf_data . umsgf		3185880	2		=			
ANR	3185908	Identifier	mf		3185880	0					
ANR	3185909	CastExpression	( MessageFormat * ) mfo -> mf_data . umsgf		3185880	1					
ANR	3185910	CastTarget	MessageFormat *		3185880	0					
ANR	3185911	MemberAccess	mfo -> mf_data . umsgf		3185880	1					
ANR	3185912	PtrMemberAccess	mfo -> mf_data		3185880	0					
ANR	3185913	Identifier	mfo		3185880	0					
ANR	3185914	Identifier	mf_data		3185880	1					
ANR	3185915	Identifier	umsgf		3185880	1					
ANR	3185916	IdentifierDeclStatement	HashTable * types ;	372:1:11637:11653	3185880	4	True				
ANR	3185917	IdentifierDecl	* types		3185880	0					
ANR	3185918	IdentifierDeclType	HashTable *		3185880	0					
ANR	3185919	Identifier	types		3185880	1					
ANR	3185920	IdentifierDeclStatement	intl_error & err = INTL_DATA_ERROR ( mfo ) ;	373:1:11656:11694	3185880	5	True				
ANR	3185921	IdentifierDecl	& err = INTL_DATA_ERROR ( mfo )		3185880	0					
ANR	3185922	IdentifierDeclType	intl_error &		3185880	0					
ANR	3185923	Identifier	err		3185880	1					
ANR	3185924	AssignmentExpression	& err = INTL_DATA_ERROR ( mfo )		3185880	2		=			
ANR	3185925	Identifier	err		3185880	0					
ANR	3185926	CallExpression	INTL_DATA_ERROR ( mfo )		3185880	1					
ANR	3185927	Callee	INTL_DATA_ERROR		3185880	0					
ANR	3185928	Identifier	INTL_DATA_ERROR		3185880	0					
ANR	3185929	ArgumentList	mfo		3185880	1					
ANR	3185930	Argument	mfo		3185880	0					
ANR	3185931	Identifier	mfo		3185880	0					
ANR	3185932	IfStatement	if ( U_FAILURE ( err . code ) )		3185880	6					
ANR	3185933	Condition	U_FAILURE ( err . code )	375:5:11702:11720	3185880	0	True				
ANR	3185934	CallExpression	U_FAILURE ( err . code )		3185880	0					
ANR	3185935	Callee	U_FAILURE		3185880	0					
ANR	3185936	Identifier	U_FAILURE		3185880	0					
ANR	3185937	ArgumentList	err . code		3185880	1					
ANR	3185938	Argument	err . code		3185880	0					
ANR	3185939	MemberAccess	err . code		3185880	0					
ANR	3185940	Identifier	err		3185880	0					
ANR	3185941	Identifier	code		3185880	1					
ANR	3185942	CompoundStatement		9:26:266:266	3185880	1					
ANR	3185943	ReturnStatement	return ;	376:2:11727:11733	3185880	0	True				
ANR	3185944	ExpressionStatement	"types = umsg_get_types ( mfo , err )"	379:1:11740:11772	3185880	7	True				
ANR	3185945	AssignmentExpression	"types = umsg_get_types ( mfo , err )"		3185880	0		=			
ANR	3185946	Identifier	types		3185880	0					
ANR	3185947	CallExpression	"umsg_get_types ( mfo , err )"		3185880	1					
ANR	3185948	Callee	umsg_get_types		3185880	0					
ANR	3185949	Identifier	umsg_get_types		3185880	0					
ANR	3185950	ArgumentList	mfo		3185880	1					
ANR	3185951	Argument	mfo		3185880	0					
ANR	3185952	Identifier	mfo		3185880	0					
ANR	3185953	Argument	err		3185880	1					
ANR	3185954	Identifier	err		3185880	0					
ANR	3185955	ExpressionStatement	"umsg_set_timezone ( mfo , err )"	381:1:11776:11803	3185880	8	True				
ANR	3185956	CallExpression	"umsg_set_timezone ( mfo , err )"		3185880	0					
ANR	3185957	Callee	umsg_set_timezone		3185880	0					
ANR	3185958	Identifier	umsg_set_timezone		3185880	0					
ANR	3185959	ArgumentList	mfo		3185880	1					
ANR	3185960	Argument	mfo		3185880	0					
ANR	3185961	Identifier	mfo		3185880	0					
ANR	3185962	Argument	err		3185880	1					
ANR	3185963	Identifier	err		3185880	0					
ANR	3185964	ExpressionStatement	fargs . resize ( arg_count )	383:1:11807:11830	3185880	9	True				
ANR	3185965	CallExpression	fargs . resize ( arg_count )		3185880	0					
ANR	3185966	Callee	fargs . resize		3185880	0					
ANR	3185967	MemberAccess	fargs . resize		3185880	0					
ANR	3185968	Identifier	fargs		3185880	0					
ANR	3185969	Identifier	resize		3185880	1					
ANR	3185970	ArgumentList	arg_count		3185880	1					
ANR	3185971	Argument	arg_count		3185880	0					
ANR	3185972	Identifier	arg_count		3185880	0					
ANR	3185973	ExpressionStatement	farg_names . resize ( arg_count )	384:1:11833:11861	3185880	10	True				
ANR	3185974	CallExpression	farg_names . resize ( arg_count )		3185880	0					
ANR	3185975	Callee	farg_names . resize		3185880	0					
ANR	3185976	MemberAccess	farg_names . resize		3185880	0					
ANR	3185977	Identifier	farg_names		3185880	0					
ANR	3185978	Identifier	resize		3185880	1					
ANR	3185979	ArgumentList	arg_count		3185880	1					
ANR	3185980	Argument	arg_count		3185880	0					
ANR	3185981	Identifier	arg_count		3185880	0					
ANR	3185982	IdentifierDeclStatement	int argNum = 0 ;	386:1:11865:11882	3185880	11	True				
ANR	3185983	IdentifierDecl	argNum = 0		3185880	0					
ANR	3185984	IdentifierDeclType	int		3185880	0					
ANR	3185985	Identifier	argNum		3185880	1					
ANR	3185986	AssignmentExpression	argNum = 0		3185880	2		=			
ANR	3185987	Identifier	argNum		3185880	0					
ANR	3185988	PrimaryExpression	0		3185880	1					
ANR	3185989	IdentifierDeclStatement	zval * elem ;	387:1:11885:11897	3185880	12	True				
ANR	3185990	IdentifierDecl	* elem		3185880	0					
ANR	3185991	IdentifierDeclType	zval *		3185880	0					
ANR	3185992	Identifier	elem		3185880	1					
ANR	3185993	IdentifierDeclStatement	zend_string * str_index ;	390:1:11927:11950	3185880	13	True				
ANR	3185994	IdentifierDecl	* str_index		3185880	0					
ANR	3185995	IdentifierDeclType	zend_string *		3185880	0					
ANR	3185996	Identifier	str_index		3185880	1					
ANR	3185997	IdentifierDeclStatement	zend_ulong num_index ;	391:1:11953:11975	3185880	14	True				
ANR	3185998	IdentifierDecl	num_index		3185880	0					
ANR	3185999	IdentifierDeclType	zend_ulong		3185880	0					
ANR	3186000	Identifier	num_index		3185880	1					
ANR	3186001	Statement	ZEND_HASH_FOREACH_KEY_VAL	393:1:11979:12003	3185880	15	True				
ANR	3186002	Statement	(	393:26:12004:12004	3185880	16	True				
ANR	3186003	Statement	args	393:27:12005:12008	3185880	17	True				
ANR	3186004	Statement	","	393:31:12009:12009	3185880	18	True				
ANR	3186005	Statement	num_index	393:33:12011:12019	3185880	19	True				
ANR	3186006	Statement	","	393:42:12020:12020	3185880	20	True				
ANR	3186007	Statement	str_index	393:44:12022:12030	3185880	21	True				
ANR	3186008	Statement	","	393:53:12031:12031	3185880	22	True				
ANR	3186009	Statement	elem	393:55:12033:12036	3185880	23	True				
ANR	3186010	Statement	)	393:59:12037:12037	3185880	24	True				
ANR	3186011	CompoundStatement		30:2:673:762	3185880	25					
ANR	3186012	IdentifierDeclStatement	Formattable & formattable = fargs [ argNum ] ;	394:2:12043:12083	3185880	0	True				
ANR	3186013	IdentifierDecl	& formattable = fargs [ argNum ]		3185880	0					
ANR	3186014	IdentifierDeclType	Formattable &		3185880	0					
ANR	3186015	Identifier	formattable		3185880	1					
ANR	3186016	AssignmentExpression	& formattable = fargs [ argNum ]		3185880	2		=			
ANR	3186017	Identifier	formattable		3185880	0					
ANR	3186018	ArrayIndexing	fargs [ argNum ]		3185880	1					
ANR	3186019	Identifier	fargs		3185880	0					
ANR	3186020	Identifier	argNum		3185880	1					
ANR	3186021	IdentifierDeclStatement	UnicodeString & key = farg_names [ argNum ] ;	395:2:12087:12126	3185880	1	True				
ANR	3186022	IdentifierDecl	& key = farg_names [ argNum ]		3185880	0					
ANR	3186023	IdentifierDeclType	UnicodeString &		3185880	0					
ANR	3186024	Identifier	key		3185880	1					
ANR	3186025	AssignmentExpression	& key = farg_names [ argNum ]		3185880	2		=			
ANR	3186026	Identifier	key		3185880	0					
ANR	3186027	ArrayIndexing	farg_names [ argNum ]		3185880	1					
ANR	3186028	Identifier	farg_names		3185880	0					
ANR	3186029	Identifier	argNum		3185880	1					
ANR	3186030	IdentifierDeclStatement	"Formattable :: Type argType = Formattable :: kObject , * storedArgType = NULL ;"	396:2:12130:12219	3185880	2	True				
ANR	3186031	IdentifierDecl	argType = Formattable :: kObject		3185880	0					
ANR	3186032	IdentifierDeclType	Formattable :: Type		3185880	0					
ANR	3186033	Identifier	argType		3185880	1					
ANR	3186034	AssignmentExpression	argType = Formattable :: kObject		3185880	2		=			
ANR	3186035	Identifier	Formattable :: kObject		3185880	0					
ANR	3186036	Identifier	Formattable :: kObject		3185880	1					
ANR	3186037	IdentifierDecl	* storedArgType = NULL		3185880	1					
ANR	3186038	IdentifierDeclType	Formattable :: Type *		3185880	0					
ANR	3186039	Identifier	storedArgType		3185880	1					
ANR	3186040	AssignmentExpression	* storedArgType = NULL		3185880	2		=			
ANR	3186041	Identifier	NULL		3185880	0					
ANR	3186042	Identifier	NULL		3185880	1					
ANR	3186043	IfStatement	if ( ! U_SUCCESS ( err . code ) )		3185880	3					
ANR	3186044	Condition	! U_SUCCESS ( err . code )	398:6:12227:12246	3185880	0	True				
ANR	3186045	UnaryOperationExpression	! U_SUCCESS ( err . code )		3185880	0					
ANR	3186046	UnaryOperator	!		3185880	0					
ANR	3186047	CallExpression	U_SUCCESS ( err . code )		3185880	1					
ANR	3186048	Callee	U_SUCCESS		3185880	0					
ANR	3186049	Identifier	U_SUCCESS		3185880	0					
ANR	3186050	ArgumentList	err . code		3185880	1					
ANR	3186051	Argument	err . code		3185880	0					
ANR	3186052	MemberAccess	err . code		3185880	0					
ANR	3186053	Identifier	err		3185880	0					
ANR	3186054	Identifier	code		3185880	1					
ANR	3186055	CompoundStatement		32:28:792:792	3185880	1					
ANR	3186056	BreakStatement	break ;	399:3:12254:12259	3185880	0	True				
ANR	3186057	IfStatement	if ( str_index == NULL )		3185880	4					
ANR	3186058	Condition	str_index == NULL	402:6:12309:12325	3185880	0	True				
ANR	3186059	EqualityExpression	str_index == NULL		3185880	0		==			
ANR	3186060	Identifier	str_index		3185880	0					
ANR	3186061	Identifier	NULL		3185880	1					
ANR	3186062	CompoundStatement		45:5:1137:1193	3185880	1					
ANR	3186063	IfStatement	if ( num_index > ( zend_ulong ) INT32_MAX )		3185880	0					
ANR	3186064	Condition	num_index > ( zend_ulong ) INT32_MAX	404:7:12409:12441	3185880	0	True				
ANR	3186065	RelationalExpression	num_index > ( zend_ulong ) INT32_MAX		3185880	0		>			
ANR	3186066	Identifier	num_index		3185880	0					
ANR	3186067	CastExpression	( zend_ulong ) INT32_MAX		3185880	1					
ANR	3186068	CastTarget	zend_ulong		3185880	0					
ANR	3186069	Identifier	INT32_MAX		3185880	1					
ANR	3186070	CompoundStatement		38:42:987:987	3185880	1					
ANR	3186071	ExpressionStatement	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , ""Found negative or too large array key"" , 0 )"	405:4:12450:12546	3185880	0	True				
ANR	3186072	CallExpression	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , ""Found negative or too large array key"" , 0 )"		3185880	0					
ANR	3186073	Callee	intl_errors_set		3185880	0					
ANR	3186074	Identifier	intl_errors_set		3185880	0					
ANR	3186075	ArgumentList	& err		3185880	1					
ANR	3186076	Argument	& err		3185880	0					
ANR	3186077	UnaryOperationExpression	& err		3185880	0					
ANR	3186078	UnaryOperator	&		3185880	0					
ANR	3186079	Identifier	err		3185880	1					
ANR	3186080	Argument	U_ILLEGAL_ARGUMENT_ERROR		3185880	1					
ANR	3186081	Identifier	U_ILLEGAL_ARGUMENT_ERROR		3185880	0					
ANR	3186082	Argument	"""Found negative or too large array key"""		3185880	2					
ANR	3186083	PrimaryExpression	"""Found negative or too large array key"""		3185880	0					
ANR	3186084	Argument	0		3185880	3					
ANR	3186085	PrimaryExpression	0		3185880	0					
ANR	3186086	ContinueStatement	continue ;	407:4:12552:12560	3185880	1	True				
ANR	3186087	IdentifierDeclStatement	UChar temp [ 16 ] ;	410:5:12573:12587	3185880	1	True				
ANR	3186088	IdentifierDecl	temp [ 16 ]		3185880	0					
ANR	3186089	IdentifierDeclType	UChar [ 16 ]		3185880	0					
ANR	3186090	Identifier	temp		3185880	1					
ANR	3186091	PrimaryExpression	16		3185880	2					
ANR	3186092	IdentifierDeclStatement	"int32_t len = u_sprintf ( temp , ""%u"" , ( uint32_t ) num_index ) ;"	411:5:12594:12650	3185880	2	True				
ANR	3186093	IdentifierDecl	"len = u_sprintf ( temp , ""%u"" , ( uint32_t ) num_index )"		3185880	0					
ANR	3186094	IdentifierDeclType	int32_t		3185880	0					
ANR	3186095	Identifier	len		3185880	1					
ANR	3186096	AssignmentExpression	"len = u_sprintf ( temp , ""%u"" , ( uint32_t ) num_index )"		3185880	2		=			
ANR	3186097	Identifier	len		3185880	0					
ANR	3186098	CallExpression	"u_sprintf ( temp , ""%u"" , ( uint32_t ) num_index )"		3185880	1					
ANR	3186099	Callee	u_sprintf		3185880	0					
ANR	3186100	Identifier	u_sprintf		3185880	0					
ANR	3186101	ArgumentList	temp		3185880	1					
ANR	3186102	Argument	temp		3185880	0					
ANR	3186103	Identifier	temp		3185880	0					
ANR	3186104	Argument	"""%u"""		3185880	1					
ANR	3186105	PrimaryExpression	"""%u"""		3185880	0					
ANR	3186106	Argument	( uint32_t ) num_index		3185880	2					
ANR	3186107	CastExpression	( uint32_t ) num_index		3185880	0					
ANR	3186108	CastTarget	uint32_t		3185880	0					
ANR	3186109	Identifier	num_index		3185880	1					
ANR	3186110	ExpressionStatement	"key . append ( temp , len )"	412:5:12657:12678	3185880	3	True				
ANR	3186111	CallExpression	"key . append ( temp , len )"		3185880	0					
ANR	3186112	Callee	key . append		3185880	0					
ANR	3186113	MemberAccess	key . append		3185880	0					
ANR	3186114	Identifier	key		3185880	0					
ANR	3186115	Identifier	append		3185880	1					
ANR	3186116	ArgumentList	temp		3185880	1					
ANR	3186117	Argument	temp		3185880	0					
ANR	3186118	Identifier	temp		3185880	0					
ANR	3186119	Argument	len		3185880	1					
ANR	3186120	Identifier	len		3185880	0					
ANR	3186121	ExpressionStatement	"storedArgType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( types , ( zend_ulong ) num_index )"	414:5:12686:12776	3185880	4	True				
ANR	3186122	AssignmentExpression	"storedArgType = ( Formattable :: Type * ) zend_hash_index_find_ptr ( types , ( zend_ulong ) num_index )"		3185880	0		=			
ANR	3186123	Identifier	storedArgType		3185880	0					
ANR	3186124	CastExpression	"( Formattable :: Type * ) zend_hash_index_find_ptr ( types , ( zend_ulong ) num_index )"		3185880	1					
ANR	3186125	CastTarget	Formattable :: Type *		3185880	0					
ANR	3186126	CallExpression	"zend_hash_index_find_ptr ( types , ( zend_ulong ) num_index )"		3185880	1					
ANR	3186127	Callee	zend_hash_index_find_ptr		3185880	0					
ANR	3186128	Identifier	zend_hash_index_find_ptr		3185880	0					
ANR	3186129	ArgumentList	types		3185880	1					
ANR	3186130	Argument	types		3185880	0					
ANR	3186131	Identifier	types		3185880	0					
ANR	3186132	Argument	( zend_ulong ) num_index		3185880	1					
ANR	3186133	CastExpression	( zend_ulong ) num_index		3185880	0					
ANR	3186134	CastTarget	zend_ulong		3185880	0					
ANR	3186135	Identifier	num_index		3185880	1					
ANR	3186136	ElseStatement	else		3185880	0					
ANR	3186137	CompoundStatement		49:9:1330:1330	3185880	0					
ANR	3186138	ExpressionStatement	"intl_stringFromChar ( key , ZSTR_VAL ( str_index ) , ZSTR_LEN ( str_index ) , & err . code )"	416:3:12825:12902	3185880	0	True				
ANR	3186139	CallExpression	"intl_stringFromChar ( key , ZSTR_VAL ( str_index ) , ZSTR_LEN ( str_index ) , & err . code )"		3185880	0					
ANR	3186140	Callee	intl_stringFromChar		3185880	0					
ANR	3186141	Identifier	intl_stringFromChar		3185880	0					
ANR	3186142	ArgumentList	key		3185880	1					
ANR	3186143	Argument	key		3185880	0					
ANR	3186144	Identifier	key		3185880	0					
ANR	3186145	Argument	ZSTR_VAL ( str_index )		3185880	1					
ANR	3186146	CallExpression	ZSTR_VAL ( str_index )		3185880	0					
ANR	3186147	Callee	ZSTR_VAL		3185880	0					
ANR	3186148	Identifier	ZSTR_VAL		3185880	0					
ANR	3186149	ArgumentList	str_index		3185880	1					
ANR	3186150	Argument	str_index		3185880	0					
ANR	3186151	Identifier	str_index		3185880	0					
ANR	3186152	Argument	ZSTR_LEN ( str_index )		3185880	2					
ANR	3186153	CallExpression	ZSTR_LEN ( str_index )		3185880	0					
ANR	3186154	Callee	ZSTR_LEN		3185880	0					
ANR	3186155	Identifier	ZSTR_LEN		3185880	0					
ANR	3186156	ArgumentList	str_index		3185880	1					
ANR	3186157	Argument	str_index		3185880	0					
ANR	3186158	Identifier	str_index		3185880	0					
ANR	3186159	Argument	& err . code		3185880	3					
ANR	3186160	UnaryOperationExpression	& err . code		3185880	0					
ANR	3186161	UnaryOperator	&		3185880	0					
ANR	3186162	MemberAccess	err . code		3185880	1					
ANR	3186163	Identifier	err		3185880	0					
ANR	3186164	Identifier	code		3185880	1					
ANR	3186165	IfStatement	if ( U_FAILURE ( err . code ) )		3185880	1					
ANR	3186166	Condition	U_FAILURE ( err . code )	418:7:12912:12930	3185880	0	True				
ANR	3186167	CallExpression	U_FAILURE ( err . code )		3185880	0					
ANR	3186168	Callee	U_FAILURE		3185880	0					
ANR	3186169	Identifier	U_FAILURE		3185880	0					
ANR	3186170	ArgumentList	err . code		3185880	1					
ANR	3186171	Argument	err . code		3185880	0					
ANR	3186172	MemberAccess	err . code		3185880	0					
ANR	3186173	Identifier	err		3185880	0					
ANR	3186174	Identifier	code		3185880	1					
ANR	3186175	CompoundStatement		53:4:1482:1495	3185880	1					
ANR	3186176	IdentifierDeclStatement	char * message ;	419:4:12939:12952	3185880	0	True				
ANR	3186177	IdentifierDecl	* message		3185880	0					
ANR	3186178	IdentifierDeclType	char *		3185880	0					
ANR	3186179	Identifier	message		3185880	1					
ANR	3186180	ExpressionStatement	"spprintf ( & message , 0 , ""Invalid UTF-8 data in argument key: '%s'"" , ZSTR_VAL ( str_index ) )"	420:4:12958:13049	3185880	1	True				
ANR	3186181	CallExpression	"spprintf ( & message , 0 , ""Invalid UTF-8 data in argument key: '%s'"" , ZSTR_VAL ( str_index ) )"		3185880	0					
ANR	3186182	Callee	spprintf		3185880	0					
ANR	3186183	Identifier	spprintf		3185880	0					
ANR	3186184	ArgumentList	& message		3185880	1					
ANR	3186185	Argument	& message		3185880	0					
ANR	3186186	UnaryOperationExpression	& message		3185880	0					
ANR	3186187	UnaryOperator	&		3185880	0					
ANR	3186188	Identifier	message		3185880	1					
ANR	3186189	Argument	0		3185880	1					
ANR	3186190	PrimaryExpression	0		3185880	0					
ANR	3186191	Argument	"""Invalid UTF-8 data in argument key: '%s'"""		3185880	2					
ANR	3186192	PrimaryExpression	"""Invalid UTF-8 data in argument key: '%s'"""		3185880	0					
ANR	3186193	Argument	ZSTR_VAL ( str_index )		3185880	3					
ANR	3186194	CallExpression	ZSTR_VAL ( str_index )		3185880	0					
ANR	3186195	Callee	ZSTR_VAL		3185880	0					
ANR	3186196	Identifier	ZSTR_VAL		3185880	0					
ANR	3186197	ArgumentList	str_index		3185880	1					
ANR	3186198	Argument	str_index		3185880	0					
ANR	3186199	Identifier	str_index		3185880	0					
ANR	3186200	ExpressionStatement	"intl_errors_set ( & err , err . code , message , 1 )"	422:4:13055:13098	3185880	2	True				
ANR	3186201	CallExpression	"intl_errors_set ( & err , err . code , message , 1 )"		3185880	0					
ANR	3186202	Callee	intl_errors_set		3185880	0					
ANR	3186203	Identifier	intl_errors_set		3185880	0					
ANR	3186204	ArgumentList	& err		3185880	1					
ANR	3186205	Argument	& err		3185880	0					
ANR	3186206	UnaryOperationExpression	& err		3185880	0					
ANR	3186207	UnaryOperator	&		3185880	0					
ANR	3186208	Identifier	err		3185880	1					
ANR	3186209	Argument	err . code		3185880	1					
ANR	3186210	MemberAccess	err . code		3185880	0					
ANR	3186211	Identifier	err		3185880	0					
ANR	3186212	Identifier	code		3185880	1					
ANR	3186213	Argument	message		3185880	2					
ANR	3186214	Identifier	message		3185880	0					
ANR	3186215	Argument	1		3185880	3					
ANR	3186216	PrimaryExpression	1		3185880	0					
ANR	3186217	ExpressionStatement	efree ( message )	423:4:13104:13118	3185880	3	True				
ANR	3186218	CallExpression	efree ( message )		3185880	0					
ANR	3186219	Callee	efree		3185880	0					
ANR	3186220	Identifier	efree		3185880	0					
ANR	3186221	ArgumentList	message		3185880	1					
ANR	3186222	Argument	message		3185880	0					
ANR	3186223	Identifier	message		3185880	0					
ANR	3186224	ContinueStatement	continue ;	424:4:13124:13132	3185880	4	True				
ANR	3186225	ExpressionStatement	"storedArgType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( types , ( char * ) key . getBuffer ( ) , key . length ( ) )"	427:3:13143:13246	3185880	2	True				
ANR	3186226	AssignmentExpression	"storedArgType = ( Formattable :: Type * ) zend_hash_str_find_ptr ( types , ( char * ) key . getBuffer ( ) , key . length ( ) )"		3185880	0		=			
ANR	3186227	Identifier	storedArgType		3185880	0					
ANR	3186228	CastExpression	"( Formattable :: Type * ) zend_hash_str_find_ptr ( types , ( char * ) key . getBuffer ( ) , key . length ( ) )"		3185880	1					
ANR	3186229	CastTarget	Formattable :: Type *		3185880	0					
ANR	3186230	CallExpression	"zend_hash_str_find_ptr ( types , ( char * ) key . getBuffer ( ) , key . length ( ) )"		3185880	1					
ANR	3186231	Callee	zend_hash_str_find_ptr		3185880	0					
ANR	3186232	Identifier	zend_hash_str_find_ptr		3185880	0					
ANR	3186233	ArgumentList	types		3185880	1					
ANR	3186234	Argument	types		3185880	0					
ANR	3186235	Identifier	types		3185880	0					
ANR	3186236	Argument	( char * ) key . getBuffer ( )		3185880	1					
ANR	3186237	CastExpression	( char * ) key . getBuffer ( )		3185880	0					
ANR	3186238	CastTarget	char *		3185880	0					
ANR	3186239	CallExpression	key . getBuffer ( )		3185880	1					
ANR	3186240	Callee	key . getBuffer		3185880	0					
ANR	3186241	MemberAccess	key . getBuffer		3185880	0					
ANR	3186242	Identifier	key		3185880	0					
ANR	3186243	Identifier	getBuffer		3185880	1					
ANR	3186244	ArgumentList			3185880	1					
ANR	3186245	Argument	key . length ( )		3185880	2					
ANR	3186246	CallExpression	key . length ( )		3185880	0					
ANR	3186247	Callee	key . length		3185880	0					
ANR	3186248	MemberAccess	key . length		3185880	0					
ANR	3186249	Identifier	key		3185880	0					
ANR	3186250	Identifier	length		3185880	1					
ANR	3186251	ArgumentList			3185880	1					
ANR	3186252	IfStatement	if ( storedArgType != NULL )		3185880	5					
ANR	3186253	Condition	storedArgType != NULL	430:6:13259:13279	3185880	0	True				
ANR	3186254	EqualityExpression	storedArgType != NULL		3185880	0		!=			
ANR	3186255	Identifier	storedArgType		3185880	0					
ANR	3186256	Identifier	NULL		3185880	1					
ANR	3186257	CompoundStatement		64:29:1825:1825	3185880	1					
ANR	3186258	ExpressionStatement	argType = * storedArgType	431:3:13287:13311	3185880	0	True				
ANR	3186259	AssignmentExpression	argType = * storedArgType		3185880	0		=			
ANR	3186260	Identifier	argType		3185880	0					
ANR	3186261	UnaryOperationExpression	* storedArgType		3185880	1					
ANR	3186262	UnaryOperator	*		3185880	0					
ANR	3186263	Identifier	storedArgType		3185880	1					
ANR	3186264	IfStatement	if ( argType != Formattable :: kObject )		3185880	6					
ANR	3186265	Condition	argType != Formattable :: kObject	436:6:13431:13461	3185880	0	True				
ANR	3186266	EqualityExpression	argType != Formattable :: kObject		3185880	0		!=			
ANR	3186267	Identifier	argType		3185880	0					
ANR	3186268	Identifier	Formattable :: kObject		3185880	1					
ANR	3186269	CompoundStatement		70:39:2007:2007	3185880	1					
ANR	3186270	SwitchStatement	switch ( argType )		3185880	0					
ANR	3186271	Condition	argType	437:11:13477:13483	3185880	0	True				
ANR	3186272	Identifier	argType		3185880	0					
ANR	3186273	CompoundStatement		71:20:2029:2029	3185880	1					
ANR	3186274	Label	case Formattable :: kString :	438:3:13491:13516	3185880	0	True				
ANR	3186275	Identifier	Formattable :: kString		3185880	0					
ANR	3186276	CompoundStatement		82:5:2326:2367	3185880	1					
ANR	3186277	Label	string_arg :	440:1:13525:13535	3185880	0	True				
ANR	3186278	Identifier	string_arg		3185880	0					
ANR	3186279	ExpressionStatement	convert_to_string_ex ( elem )	446:5:13749:13775	3185880	1	True				
ANR	3186280	CallExpression	convert_to_string_ex ( elem )		3185880	0					
ANR	3186281	Callee	convert_to_string_ex		3185880	0					
ANR	3186282	Identifier	convert_to_string_ex		3185880	0					
ANR	3186283	ArgumentList	elem		3185880	1					
ANR	3186284	Argument	elem		3185880	0					
ANR	3186285	Identifier	elem		3185880	0					
ANR	3186286	IdentifierDeclStatement	UnicodeString * text = new UnicodeString ( ) ;	448:5:13783:13824	3185880	2	True				
ANR	3186287	IdentifierDecl	* text = new UnicodeString ( )		3185880	0					
ANR	3186288	IdentifierDeclType	UnicodeString *		3185880	0					
ANR	3186289	Identifier	text		3185880	1					
ANR	3186290	AssignmentExpression	* text = new UnicodeString ( )		3185880	2		=			
ANR	3186291	Identifier	text		3185880	0					
ANR	3186292	UnaryExpression	new UnicodeString ( )		3185880	1					
ANR	3186293	ExpressionStatement	"intl_stringFromChar ( * text , Z_STRVAL_P ( elem ) , Z_STRLEN_P ( elem ) , & err . code )"	449:5:13831:13910	3185880	3	True				
ANR	3186294	CallExpression	"intl_stringFromChar ( * text , Z_STRVAL_P ( elem ) , Z_STRLEN_P ( elem ) , & err . code )"		3185880	0					
ANR	3186295	Callee	intl_stringFromChar		3185880	0					
ANR	3186296	Identifier	intl_stringFromChar		3185880	0					
ANR	3186297	ArgumentList	* text		3185880	1					
ANR	3186298	Argument	* text		3185880	0					
ANR	3186299	UnaryOperationExpression	* text		3185880	0					
ANR	3186300	UnaryOperator	*		3185880	0					
ANR	3186301	Identifier	text		3185880	1					
ANR	3186302	Argument	Z_STRVAL_P ( elem )		3185880	1					
ANR	3186303	CallExpression	Z_STRVAL_P ( elem )		3185880	0					
ANR	3186304	Callee	Z_STRVAL_P		3185880	0					
ANR	3186305	Identifier	Z_STRVAL_P		3185880	0					
ANR	3186306	ArgumentList	elem		3185880	1					
ANR	3186307	Argument	elem		3185880	0					
ANR	3186308	Identifier	elem		3185880	0					
ANR	3186309	Argument	Z_STRLEN_P ( elem )		3185880	2					
ANR	3186310	CallExpression	Z_STRLEN_P ( elem )		3185880	0					
ANR	3186311	Callee	Z_STRLEN_P		3185880	0					
ANR	3186312	Identifier	Z_STRLEN_P		3185880	0					
ANR	3186313	ArgumentList	elem		3185880	1					
ANR	3186314	Argument	elem		3185880	0					
ANR	3186315	Identifier	elem		3185880	0					
ANR	3186316	Argument	& err . code		3185880	3					
ANR	3186317	UnaryOperationExpression	& err . code		3185880	0					
ANR	3186318	UnaryOperator	&		3185880	0					
ANR	3186319	MemberAccess	err . code		3185880	1					
ANR	3186320	Identifier	err		3185880	0					
ANR	3186321	Identifier	code		3185880	1					
ANR	3186322	IfStatement	if ( U_FAILURE ( err . code ) )		3185880	4					
ANR	3186323	Condition	U_FAILURE ( err . code )	452:9:13922:13940	3185880	0	True				
ANR	3186324	CallExpression	U_FAILURE ( err . code )		3185880	0					
ANR	3186325	Callee	U_FAILURE		3185880	0					
ANR	3186326	Identifier	U_FAILURE		3185880	0					
ANR	3186327	ArgumentList	err . code		3185880	1					
ANR	3186328	Argument	err . code		3185880	0					
ANR	3186329	MemberAccess	err . code		3185880	0					
ANR	3186330	Identifier	err		3185880	0					
ANR	3186331	Identifier	code		3185880	1					
ANR	3186332	CompoundStatement		87:6:2494:2507	3185880	1					
ANR	3186333	IdentifierDeclStatement	char * message ;	453:6:13951:13964	3185880	0	True				
ANR	3186334	IdentifierDecl	* message		3185880	0					
ANR	3186335	IdentifierDeclType	char *		3185880	0					
ANR	3186336	Identifier	message		3185880	1					
ANR	3186337	Statement	spprintf	454:6:13972:13979	3185880	1	True				
ANR	3186338	Statement	(	454:14:13980:13980	3185880	2	True				
ANR	3186339	Statement	&	454:15:13981:13981	3185880	3	True				
ANR	3186340	Statement	message	454:16:13982:13988	3185880	4	True				
ANR	3186341	Statement	","	454:23:13989:13989	3185880	5	True				
ANR	3186342	Statement	0	454:25:13991:13991	3185880	6	True				
ANR	3186343	Statement	","	454:26:13992:13992	3185880	7	True				
ANR	3186344	Statement	"""Invalid UTF-8 data in string argument: """	454:28:13994:14034	3185880	8	True				
ANR	3186345	Statement	"""'%s'"""	455:7:14043:14048	3185880	9	True				
ANR	3186346	Statement	","	455:13:14049:14049	3185880	10	True				
ANR	3186347	Statement	Z_STRVAL_P	455:15:14051:14060	3185880	11	True				
ANR	3186348	Statement	(	455:25:14061:14061	3185880	12	True				
ANR	3186349	Statement	elem	455:26:14062:14065	3185880	13	True				
ANR	3186350	Statement	)	455:30:14066:14066	3185880	14	True				
ANR	3186351	Statement	)	455:31:14067:14067	3185880	15	True				
ANR	3186352	ExpressionStatement		455:32:14068:14068	3185880	16	True				
ANR	3186353	ExpressionStatement	"intl_errors_set ( & err , err . code , message , 1 )"	456:6:14076:14119	3185880	17	True				
ANR	3186354	CallExpression	"intl_errors_set ( & err , err . code , message , 1 )"		3185880	0					
ANR	3186355	Callee	intl_errors_set		3185880	0					
ANR	3186356	Identifier	intl_errors_set		3185880	0					
ANR	3186357	ArgumentList	& err		3185880	1					
ANR	3186358	Argument	& err		3185880	0					
ANR	3186359	UnaryOperationExpression	& err		3185880	0					
ANR	3186360	UnaryOperator	&		3185880	0					
ANR	3186361	Identifier	err		3185880	1					
ANR	3186362	Argument	err . code		3185880	1					
ANR	3186363	MemberAccess	err . code		3185880	0					
ANR	3186364	Identifier	err		3185880	0					
ANR	3186365	Identifier	code		3185880	1					
ANR	3186366	Argument	message		3185880	2					
ANR	3186367	Identifier	message		3185880	0					
ANR	3186368	Argument	1		3185880	3					
ANR	3186369	PrimaryExpression	1		3185880	0					
ANR	3186370	ExpressionStatement	efree ( message )	457:6:14127:14141	3185880	18	True				
ANR	3186371	CallExpression	efree ( message )		3185880	0					
ANR	3186372	Callee	efree		3185880	0					
ANR	3186373	Identifier	efree		3185880	0					
ANR	3186374	ArgumentList	message		3185880	1					
ANR	3186375	Argument	message		3185880	0					
ANR	3186376	Identifier	message		3185880	0					
ANR	3186377	Statement	delete	458:6:14149:14154	3185880	19	True				
ANR	3186378	ExpressionStatement	text	458:13:14156:14160	3185880	20	True				
ANR	3186379	Identifier	text		3185880	0					
ANR	3186380	ContinueStatement	continue ;	459:6:14168:14176	3185880	21	True				
ANR	3186381	ExpressionStatement	formattable . adoptString ( text )	461:5:14190:14219	3185880	5	True				
ANR	3186382	CallExpression	formattable . adoptString ( text )		3185880	0					
ANR	3186383	Callee	formattable . adoptString		3185880	0					
ANR	3186384	MemberAccess	formattable . adoptString		3185880	0					
ANR	3186385	Identifier	formattable		3185880	0					
ANR	3186386	Identifier	adoptString		3185880	1					
ANR	3186387	ArgumentList	text		3185880	1					
ANR	3186388	Argument	text		3185880	0					
ANR	3186389	Identifier	text		3185880	0					
ANR	3186390	BreakStatement	break ;	462:5:14226:14231	3185880	6	True				
ANR	3186391	Label	case Formattable :: kDouble :	464:3:14242:14267	3185880	2	True				
ANR	3186392	Identifier	Formattable :: kDouble		3185880	0					
ANR	3186393	CompoundStatement		100:5:2823:2831	3185880	3					
ANR	3186394	IdentifierDeclStatement	double d ;	466:5:14280:14288	3185880	0	True				
ANR	3186395	IdentifierDecl	d		3185880	0					
ANR	3186396	IdentifierDeclType	double		3185880	0					
ANR	3186397	Identifier	d		3185880	1					
ANR	3186398	IfStatement	if ( Z_TYPE_P ( elem ) == IS_DOUBLE )		3185880	1					
ANR	3186399	Condition	Z_TYPE_P ( elem ) == IS_DOUBLE	467:9:14299:14325	3185880	0	True				
ANR	3186400	EqualityExpression	Z_TYPE_P ( elem ) == IS_DOUBLE		3185880	0		==			
ANR	3186401	CallExpression	Z_TYPE_P ( elem )		3185880	0					
ANR	3186402	Callee	Z_TYPE_P		3185880	0					
ANR	3186403	Identifier	Z_TYPE_P		3185880	0					
ANR	3186404	ArgumentList	elem		3185880	1					
ANR	3186405	Argument	elem		3185880	0					
ANR	3186406	Identifier	elem		3185880	0					
ANR	3186407	Identifier	IS_DOUBLE		3185880	1					
ANR	3186408	CompoundStatement		101:38:2871:2871	3185880	1					
ANR	3186409	ExpressionStatement	d = Z_DVAL_P ( elem )	468:6:14336:14354	3185880	0	True				
ANR	3186410	AssignmentExpression	d = Z_DVAL_P ( elem )		3185880	0		=			
ANR	3186411	Identifier	d		3185880	0					
ANR	3186412	CallExpression	Z_DVAL_P ( elem )		3185880	1					
ANR	3186413	Callee	Z_DVAL_P		3185880	0					
ANR	3186414	Identifier	Z_DVAL_P		3185880	0					
ANR	3186415	ArgumentList	elem		3185880	1					
ANR	3186416	Argument	elem		3185880	0					
ANR	3186417	Identifier	elem		3185880	0					
ANR	3186418	ElseStatement	else		3185880	0					
ANR	3186419	IfStatement	if ( Z_TYPE_P ( elem ) == IS_LONG )		3185880	0					
ANR	3186420	Condition	Z_TYPE_P ( elem ) == IS_LONG	469:16:14372:14396	3185880	0	True				
ANR	3186421	EqualityExpression	Z_TYPE_P ( elem ) == IS_LONG		3185880	0		==			
ANR	3186422	CallExpression	Z_TYPE_P ( elem )		3185880	0					
ANR	3186423	Callee	Z_TYPE_P		3185880	0					
ANR	3186424	Identifier	Z_TYPE_P		3185880	0					
ANR	3186425	ArgumentList	elem		3185880	1					
ANR	3186426	Argument	elem		3185880	0					
ANR	3186427	Identifier	elem		3185880	0					
ANR	3186428	Identifier	IS_LONG		3185880	1					
ANR	3186429	CompoundStatement		103:43:2942:2942	3185880	1					
ANR	3186430	ExpressionStatement	d = ( double ) Z_LVAL_P ( elem )	470:6:14407:14433	3185880	0	True				
ANR	3186431	AssignmentExpression	d = ( double ) Z_LVAL_P ( elem )		3185880	0		=			
ANR	3186432	Identifier	d		3185880	0					
ANR	3186433	CastExpression	( double ) Z_LVAL_P ( elem )		3185880	1					
ANR	3186434	CastTarget	double		3185880	0					
ANR	3186435	CallExpression	Z_LVAL_P ( elem )		3185880	1					
ANR	3186436	Callee	Z_LVAL_P		3185880	0					
ANR	3186437	Identifier	Z_LVAL_P		3185880	0					
ANR	3186438	ArgumentList	elem		3185880	1					
ANR	3186439	Argument	elem		3185880	0					
ANR	3186440	Identifier	elem		3185880	0					
ANR	3186441	ElseStatement	else		3185880	0					
ANR	3186442	CompoundStatement		105:12:2990:2990	3185880	0					
ANR	3186443	ExpressionStatement	SEPARATE_ZVAL_IF_NOT_REF ( elem )	472:6:14455:14485	3185880	0	True				
ANR	3186444	CallExpression	SEPARATE_ZVAL_IF_NOT_REF ( elem )		3185880	0					
ANR	3186445	Callee	SEPARATE_ZVAL_IF_NOT_REF		3185880	0					
ANR	3186446	Identifier	SEPARATE_ZVAL_IF_NOT_REF		3185880	0					
ANR	3186447	ArgumentList	elem		3185880	1					
ANR	3186448	Argument	elem		3185880	0					
ANR	3186449	Identifier	elem		3185880	0					
ANR	3186450	ExpressionStatement	convert_scalar_to_number ( elem )	473:6:14493:14523	3185880	1	True				
ANR	3186451	CallExpression	convert_scalar_to_number ( elem )		3185880	0					
ANR	3186452	Callee	convert_scalar_to_number		3185880	0					
ANR	3186453	Identifier	convert_scalar_to_number		3185880	0					
ANR	3186454	ArgumentList	elem		3185880	1					
ANR	3186455	Argument	elem		3185880	0					
ANR	3186456	Identifier	elem		3185880	0					
ANR	3186457	ExpressionStatement	d = ( Z_TYPE_P ( elem ) == IS_DOUBLE ) ? Z_DVAL_P ( elem ) : ( double ) Z_LVAL_P ( elem )	474:6:14531:14620	3185880	2	True				
ANR	3186458	AssignmentExpression	d = ( Z_TYPE_P ( elem ) == IS_DOUBLE ) ? Z_DVAL_P ( elem ) : ( double ) Z_LVAL_P ( elem )		3185880	0		=			
ANR	3186459	Identifier	d		3185880	0					
ANR	3186460	ConditionalExpression	( Z_TYPE_P ( elem ) == IS_DOUBLE ) ? Z_DVAL_P ( elem ) : ( double ) Z_LVAL_P ( elem )		3185880	1					
ANR	3186461	Condition	Z_TYPE_P ( elem ) == IS_DOUBLE		3185880	0					
ANR	3186462	EqualityExpression	Z_TYPE_P ( elem ) == IS_DOUBLE		3185880	0		==			
ANR	3186463	CallExpression	Z_TYPE_P ( elem )		3185880	0					
ANR	3186464	Callee	Z_TYPE_P		3185880	0					
ANR	3186465	Identifier	Z_TYPE_P		3185880	0					
ANR	3186466	ArgumentList	elem		3185880	1					
ANR	3186467	Argument	elem		3185880	0					
ANR	3186468	Identifier	elem		3185880	0					
ANR	3186469	Identifier	IS_DOUBLE		3185880	1					
ANR	3186470	CallExpression	Z_DVAL_P ( elem )		3185880	1					
ANR	3186471	Callee	Z_DVAL_P		3185880	0					
ANR	3186472	Identifier	Z_DVAL_P		3185880	0					
ANR	3186473	ArgumentList	elem		3185880	1					
ANR	3186474	Argument	elem		3185880	0					
ANR	3186475	Identifier	elem		3185880	0					
ANR	3186476	CastExpression	( double ) Z_LVAL_P ( elem )		3185880	2					
ANR	3186477	CastTarget	double		3185880	0					
ANR	3186478	CallExpression	Z_LVAL_P ( elem )		3185880	1					
ANR	3186479	Callee	Z_LVAL_P		3185880	0					
ANR	3186480	Identifier	Z_LVAL_P		3185880	0					
ANR	3186481	ArgumentList	elem		3185880	1					
ANR	3186482	Argument	elem		3185880	0					
ANR	3186483	Identifier	elem		3185880	0					
ANR	3186484	ExpressionStatement	formattable . setDouble ( d )	478:5:14634:14658	3185880	2	True				
ANR	3186485	CallExpression	formattable . setDouble ( d )		3185880	0					
ANR	3186486	Callee	formattable . setDouble		3185880	0					
ANR	3186487	MemberAccess	formattable . setDouble		3185880	0					
ANR	3186488	Identifier	formattable		3185880	0					
ANR	3186489	Identifier	setDouble		3185880	1					
ANR	3186490	ArgumentList	d		3185880	1					
ANR	3186491	Argument	d		3185880	0					
ANR	3186492	Identifier	d		3185880	0					
ANR	3186493	BreakStatement	break ;	479:5:14665:14670	3185880	3	True				
ANR	3186494	Label	case Formattable :: kLong :	481:3:14681:14704	3185880	4	True				
ANR	3186495	Identifier	Formattable :: kLong		3185880	0					
ANR	3186496	CompoundStatement		117:5:3260:3278	3185880	5					
ANR	3186497	IdentifierDeclStatement	int32_t tInt32 = 0 ;	483:5:14717:14735	3185880	0	True				
ANR	3186498	IdentifierDecl	tInt32 = 0		3185880	0					
ANR	3186499	IdentifierDeclType	int32_t		3185880	0					
ANR	3186500	Identifier	tInt32		3185880	1					
ANR	3186501	AssignmentExpression	tInt32 = 0		3185880	2		=			
ANR	3186502	Identifier	tInt32		3185880	0					
ANR	3186503	PrimaryExpression	0		3185880	1					
ANR	3186504	Label	retry_klong :	484:0:14737:14748	3185880	1	True				
ANR	3186505	Identifier	retry_klong		3185880	0					
ANR	3186506	IfStatement	if ( Z_TYPE_P ( elem ) == IS_DOUBLE )		3185880	2					
ANR	3186507	Condition	Z_TYPE_P ( elem ) == IS_DOUBLE	485:9:14759:14785	3185880	0	True				
ANR	3186508	EqualityExpression	Z_TYPE_P ( elem ) == IS_DOUBLE		3185880	0		==			
ANR	3186509	CallExpression	Z_TYPE_P ( elem )		3185880	0					
ANR	3186510	Callee	Z_TYPE_P		3185880	0					
ANR	3186511	Identifier	Z_TYPE_P		3185880	0					
ANR	3186512	ArgumentList	elem		3185880	1					
ANR	3186513	Argument	elem		3185880	0					
ANR	3186514	Identifier	elem		3185880	0					
ANR	3186515	Identifier	IS_DOUBLE		3185880	1					
ANR	3186516	CompoundStatement		119:38:3331:3331	3185880	1					
ANR	3186517	IfStatement	if ( Z_DVAL_P ( elem ) > ( double ) INT32_MAX || Z_DVAL_P ( elem ) < ( double ) INT32_MIN )		3185880	0					
ANR	3186518	Condition	Z_DVAL_P ( elem ) > ( double ) INT32_MAX || Z_DVAL_P ( elem ) < ( double ) INT32_MIN	486:10:14800:14879	3185880	0	True				
ANR	3186519	OrExpression	Z_DVAL_P ( elem ) > ( double ) INT32_MAX || Z_DVAL_P ( elem ) < ( double ) INT32_MIN		3185880	0		||			
ANR	3186520	RelationalExpression	Z_DVAL_P ( elem ) > ( double ) INT32_MAX		3185880	0		>			
ANR	3186521	CallExpression	Z_DVAL_P ( elem )		3185880	0					
ANR	3186522	Callee	Z_DVAL_P		3185880	0					
ANR	3186523	Identifier	Z_DVAL_P		3185880	0					
ANR	3186524	ArgumentList	elem		3185880	1					
ANR	3186525	Argument	elem		3185880	0					
ANR	3186526	Identifier	elem		3185880	0					
ANR	3186527	CastExpression	( double ) INT32_MAX		3185880	1					
ANR	3186528	CastTarget	double		3185880	0					
ANR	3186529	Identifier	INT32_MAX		3185880	1					
ANR	3186530	RelationalExpression	Z_DVAL_P ( elem ) < ( double ) INT32_MIN		3185880	1		<			
ANR	3186531	CallExpression	Z_DVAL_P ( elem )		3185880	0					
ANR	3186532	Callee	Z_DVAL_P		3185880	0					
ANR	3186533	Identifier	Z_DVAL_P		3185880	0					
ANR	3186534	ArgumentList	elem		3185880	1					
ANR	3186535	Argument	elem		3185880	0					
ANR	3186536	Identifier	elem		3185880	0					
ANR	3186537	CastExpression	( double ) INT32_MIN		3185880	1					
ANR	3186538	CastTarget	double		3185880	0					
ANR	3186539	Identifier	INT32_MIN		3185880	1					
ANR	3186540	CompoundStatement		121:44:3425:3425	3185880	1					
ANR	3186541	Statement	intl_errors_set	488:7:14891:14905	3185880	0	True				
ANR	3186542	Statement	(	488:22:14906:14906	3185880	1	True				
ANR	3186543	Statement	&	488:23:14907:14907	3185880	2	True				
ANR	3186544	Statement	err	488:24:14908:14910	3185880	3	True				
ANR	3186545	Statement	","	488:27:14911:14911	3185880	4	True				
ANR	3186546	Statement	U_ILLEGAL_ARGUMENT_ERROR	488:29:14913:14936	3185880	5	True				
ANR	3186547	Statement	","	488:53:14937:14937	3185880	6	True				
ANR	3186548	Statement	"""Found PHP float with absolute value too large for """	489:8:14947:14998	3185880	7	True				
ANR	3186549	Statement	"""32 bit integer argument"""	490:8:15008:15032	3185880	8	True				
ANR	3186550	Statement	","	490:33:15033:15033	3185880	9	True				
ANR	3186551	Statement	0	490:35:15035:15035	3185880	10	True				
ANR	3186552	Statement	)	490:36:15036:15036	3185880	11	True				
ANR	3186553	ExpressionStatement		490:37:15037:15037	3185880	12	True				
ANR	3186554	ElseStatement	else		3185880	0					
ANR	3186555	CompoundStatement		125:13:3595:3595	3185880	0					
ANR	3186556	ExpressionStatement	tInt32 = ( int32_t ) Z_DVAL_P ( elem )	492:7:15061:15093	3185880	0	True				
ANR	3186557	AssignmentExpression	tInt32 = ( int32_t ) Z_DVAL_P ( elem )		3185880	0		=			
ANR	3186558	Identifier	tInt32		3185880	0					
ANR	3186559	CastExpression	( int32_t ) Z_DVAL_P ( elem )		3185880	1					
ANR	3186560	CastTarget	int32_t		3185880	0					
ANR	3186561	CallExpression	Z_DVAL_P ( elem )		3185880	1					
ANR	3186562	Callee	Z_DVAL_P		3185880	0					
ANR	3186563	Identifier	Z_DVAL_P		3185880	0					
ANR	3186564	ArgumentList	elem		3185880	1					
ANR	3186565	Argument	elem		3185880	0					
ANR	3186566	Identifier	elem		3185880	0					
ANR	3186567	ElseStatement	else		3185880	0					
ANR	3186568	IfStatement	if ( Z_TYPE_P ( elem ) == IS_LONG )		3185880	0					
ANR	3186569	Condition	Z_TYPE_P ( elem ) == IS_LONG	494:16:15119:15143	3185880	0	True				
ANR	3186570	EqualityExpression	Z_TYPE_P ( elem ) == IS_LONG		3185880	0		==			
ANR	3186571	CallExpression	Z_TYPE_P ( elem )		3185880	0					
ANR	3186572	Callee	Z_TYPE_P		3185880	0					
ANR	3186573	Identifier	Z_TYPE_P		3185880	0					
ANR	3186574	ArgumentList	elem		3185880	1					
ANR	3186575	Argument	elem		3185880	0					
ANR	3186576	Identifier	elem		3185880	0					
ANR	3186577	Identifier	IS_LONG		3185880	1					
ANR	3186578	CompoundStatement		128:43:3689:3689	3185880	1					
ANR	3186579	IfStatement	if ( Z_LVAL_P ( elem ) > INT32_MAX || Z_LVAL_P ( elem ) < INT32_MIN )		3185880	0					
ANR	3186580	Condition	Z_LVAL_P ( elem ) > INT32_MAX || Z_LVAL_P ( elem ) < INT32_MIN	495:10:15158:15221	3185880	0	True				
ANR	3186581	OrExpression	Z_LVAL_P ( elem ) > INT32_MAX || Z_LVAL_P ( elem ) < INT32_MIN		3185880	0		||			
ANR	3186582	RelationalExpression	Z_LVAL_P ( elem ) > INT32_MAX		3185880	0		>			
ANR	3186583	CallExpression	Z_LVAL_P ( elem )		3185880	0					
ANR	3186584	Callee	Z_LVAL_P		3185880	0					
ANR	3186585	Identifier	Z_LVAL_P		3185880	0					
ANR	3186586	ArgumentList	elem		3185880	1					
ANR	3186587	Argument	elem		3185880	0					
ANR	3186588	Identifier	elem		3185880	0					
ANR	3186589	Identifier	INT32_MAX		3185880	1					
ANR	3186590	RelationalExpression	Z_LVAL_P ( elem ) < INT32_MIN		3185880	1		<			
ANR	3186591	CallExpression	Z_LVAL_P ( elem )		3185880	0					
ANR	3186592	Callee	Z_LVAL_P		3185880	0					
ANR	3186593	Identifier	Z_LVAL_P		3185880	0					
ANR	3186594	ArgumentList	elem		3185880	1					
ANR	3186595	Argument	elem		3185880	0					
ANR	3186596	Identifier	elem		3185880	0					
ANR	3186597	Identifier	INT32_MIN		3185880	1					
ANR	3186598	CompoundStatement		130:36:3767:3767	3185880	1					
ANR	3186599	Statement	intl_errors_set	497:7:15233:15247	3185880	0	True				
ANR	3186600	Statement	(	497:22:15248:15248	3185880	1	True				
ANR	3186601	Statement	&	497:23:15249:15249	3185880	2	True				
ANR	3186602	Statement	err	497:24:15250:15252	3185880	3	True				
ANR	3186603	Statement	","	497:27:15253:15253	3185880	4	True				
ANR	3186604	Statement	U_ILLEGAL_ARGUMENT_ERROR	497:29:15255:15278	3185880	5	True				
ANR	3186605	Statement	","	497:53:15279:15279	3185880	6	True				
ANR	3186606	Statement	"""Found PHP integer with absolute value too large """	498:8:15289:15338	3185880	7	True				
ANR	3186607	Statement	"""for 32 bit integer argument"""	499:8:15348:15376	3185880	8	True				
ANR	3186608	Statement	","	499:37:15377:15377	3185880	9	True				
ANR	3186609	Statement	0	499:39:15379:15379	3185880	10	True				
ANR	3186610	Statement	)	499:40:15380:15380	3185880	11	True				
ANR	3186611	ExpressionStatement		499:41:15381:15381	3185880	12	True				
ANR	3186612	ElseStatement	else		3185880	0					
ANR	3186613	CompoundStatement		134:13:3939:3939	3185880	0					
ANR	3186614	ExpressionStatement	tInt32 = ( int32_t ) Z_LVAL_P ( elem )	501:7:15405:15437	3185880	0	True				
ANR	3186615	AssignmentExpression	tInt32 = ( int32_t ) Z_LVAL_P ( elem )		3185880	0		=			
ANR	3186616	Identifier	tInt32		3185880	0					
ANR	3186617	CastExpression	( int32_t ) Z_LVAL_P ( elem )		3185880	1					
ANR	3186618	CastTarget	int32_t		3185880	0					
ANR	3186619	CallExpression	Z_LVAL_P ( elem )		3185880	1					
ANR	3186620	Callee	Z_LVAL_P		3185880	0					
ANR	3186621	Identifier	Z_LVAL_P		3185880	0					
ANR	3186622	ArgumentList	elem		3185880	1					
ANR	3186623	Argument	elem		3185880	0					
ANR	3186624	Identifier	elem		3185880	0					
ANR	3186625	ElseStatement	else		3185880	0					
ANR	3186626	CompoundStatement		137:12:4002:4002	3185880	0					
ANR	3186627	ExpressionStatement	SEPARATE_ZVAL_IF_NOT_REF ( elem )	504:6:15467:15497	3185880	0	True				
ANR	3186628	CallExpression	SEPARATE_ZVAL_IF_NOT_REF ( elem )		3185880	0					
ANR	3186629	Callee	SEPARATE_ZVAL_IF_NOT_REF		3185880	0					
ANR	3186630	Identifier	SEPARATE_ZVAL_IF_NOT_REF		3185880	0					
ANR	3186631	ArgumentList	elem		3185880	1					
ANR	3186632	Argument	elem		3185880	0					
ANR	3186633	Identifier	elem		3185880	0					
ANR	3186634	ExpressionStatement	convert_scalar_to_number ( elem )	505:6:15505:15535	3185880	1	True				
ANR	3186635	CallExpression	convert_scalar_to_number ( elem )		3185880	0					
ANR	3186636	Callee	convert_scalar_to_number		3185880	0					
ANR	3186637	Identifier	convert_scalar_to_number		3185880	0					
ANR	3186638	ArgumentList	elem		3185880	1					
ANR	3186639	Argument	elem		3185880	0					
ANR	3186640	Identifier	elem		3185880	0					
ANR	3186641	GotoStatement	goto retry_klong ;	506:6:15543:15559	3185880	2	True				
ANR	3186642	Identifier	retry_klong		3185880	0					
ANR	3186643	ExpressionStatement	formattable . setLong ( tInt32 )	508:5:15573:15600	3185880	3	True				
ANR	3186644	CallExpression	formattable . setLong ( tInt32 )		3185880	0					
ANR	3186645	Callee	formattable . setLong		3185880	0					
ANR	3186646	MemberAccess	formattable . setLong		3185880	0					
ANR	3186647	Identifier	formattable		3185880	0					
ANR	3186648	Identifier	setLong		3185880	1					
ANR	3186649	ArgumentList	tInt32		3185880	1					
ANR	3186650	Argument	tInt32		3185880	0					
ANR	3186651	Identifier	tInt32		3185880	0					
ANR	3186652	BreakStatement	break ;	509:5:15607:15612	3185880	4	True				
ANR	3186653	Label	case Formattable :: kInt64 :	511:3:15623:15647	3185880	6	True				
ANR	3186654	Identifier	Formattable :: kInt64		3185880	0					
ANR	3186655	CompoundStatement		147:5:4203:4221	3185880	7					
ANR	3186656	IdentifierDeclStatement	int64_t tInt64 = 0 ;	513:5:15660:15678	3185880	0	True				
ANR	3186657	IdentifierDecl	tInt64 = 0		3185880	0					
ANR	3186658	IdentifierDeclType	int64_t		3185880	0					
ANR	3186659	Identifier	tInt64		3185880	1					
ANR	3186660	AssignmentExpression	tInt64 = 0		3185880	2		=			
ANR	3186661	Identifier	tInt64		3185880	0					
ANR	3186662	PrimaryExpression	0		3185880	1					
ANR	3186663	Label	retry_kint64 :	514:0:15680:15692	3185880	1	True				
ANR	3186664	Identifier	retry_kint64		3185880	0					
ANR	3186665	IfStatement	if ( Z_TYPE_P ( elem ) == IS_DOUBLE )		3185880	2					
ANR	3186666	Condition	Z_TYPE_P ( elem ) == IS_DOUBLE	515:9:15703:15729	3185880	0	True				
ANR	3186667	EqualityExpression	Z_TYPE_P ( elem ) == IS_DOUBLE		3185880	0		==			
ANR	3186668	CallExpression	Z_TYPE_P ( elem )		3185880	0					
ANR	3186669	Callee	Z_TYPE_P		3185880	0					
ANR	3186670	Identifier	Z_TYPE_P		3185880	0					
ANR	3186671	ArgumentList	elem		3185880	1					
ANR	3186672	Argument	elem		3185880	0					
ANR	3186673	Identifier	elem		3185880	0					
ANR	3186674	Identifier	IS_DOUBLE		3185880	1					
ANR	3186675	CompoundStatement		149:38:4275:4275	3185880	1					
ANR	3186676	IfStatement	if ( Z_DVAL_P ( elem ) > ( double ) U_INT64_MAX || Z_DVAL_P ( elem ) < ( double ) U_INT64_MIN )		3185880	0					
ANR	3186677	Condition	Z_DVAL_P ( elem ) > ( double ) U_INT64_MAX || Z_DVAL_P ( elem ) < ( double ) U_INT64_MIN	516:10:15744:15827	3185880	0	True				
ANR	3186678	OrExpression	Z_DVAL_P ( elem ) > ( double ) U_INT64_MAX || Z_DVAL_P ( elem ) < ( double ) U_INT64_MIN		3185880	0		||			
ANR	3186679	RelationalExpression	Z_DVAL_P ( elem ) > ( double ) U_INT64_MAX		3185880	0		>			
ANR	3186680	CallExpression	Z_DVAL_P ( elem )		3185880	0					
ANR	3186681	Callee	Z_DVAL_P		3185880	0					
ANR	3186682	Identifier	Z_DVAL_P		3185880	0					
ANR	3186683	ArgumentList	elem		3185880	1					
ANR	3186684	Argument	elem		3185880	0					
ANR	3186685	Identifier	elem		3185880	0					
ANR	3186686	CastExpression	( double ) U_INT64_MAX		3185880	1					
ANR	3186687	CastTarget	double		3185880	0					
ANR	3186688	Identifier	U_INT64_MAX		3185880	1					
ANR	3186689	RelationalExpression	Z_DVAL_P ( elem ) < ( double ) U_INT64_MIN		3185880	1		<			
ANR	3186690	CallExpression	Z_DVAL_P ( elem )		3185880	0					
ANR	3186691	Callee	Z_DVAL_P		3185880	0					
ANR	3186692	Identifier	Z_DVAL_P		3185880	0					
ANR	3186693	ArgumentList	elem		3185880	1					
ANR	3186694	Argument	elem		3185880	0					
ANR	3186695	Identifier	elem		3185880	0					
ANR	3186696	CastExpression	( double ) U_INT64_MIN		3185880	1					
ANR	3186697	CastTarget	double		3185880	0					
ANR	3186698	Identifier	U_INT64_MIN		3185880	1					
ANR	3186699	CompoundStatement		151:46:4373:4373	3185880	1					
ANR	3186700	Statement	intl_errors_set	518:7:15839:15853	3185880	0	True				
ANR	3186701	Statement	(	518:22:15854:15854	3185880	1	True				
ANR	3186702	Statement	&	518:23:15855:15855	3185880	2	True				
ANR	3186703	Statement	err	518:24:15856:15858	3185880	3	True				
ANR	3186704	Statement	","	518:27:15859:15859	3185880	4	True				
ANR	3186705	Statement	U_ILLEGAL_ARGUMENT_ERROR	518:29:15861:15884	3185880	5	True				
ANR	3186706	Statement	","	518:53:15885:15885	3185880	6	True				
ANR	3186707	Statement	"""Found PHP float with absolute value too large for """	519:8:15895:15946	3185880	7	True				
ANR	3186708	Statement	"""64 bit integer argument"""	520:8:15956:15980	3185880	8	True				
ANR	3186709	Statement	","	520:33:15981:15981	3185880	9	True				
ANR	3186710	Statement	0	520:35:15983:15983	3185880	10	True				
ANR	3186711	Statement	)	520:36:15984:15984	3185880	11	True				
ANR	3186712	ExpressionStatement		520:37:15985:15985	3185880	12	True				
ANR	3186713	ElseStatement	else		3185880	0					
ANR	3186714	CompoundStatement		155:13:4543:4543	3185880	0					
ANR	3186715	ExpressionStatement	tInt64 = ( int64_t ) Z_DVAL_P ( elem )	522:7:16009:16041	3185880	0	True				
ANR	3186716	AssignmentExpression	tInt64 = ( int64_t ) Z_DVAL_P ( elem )		3185880	0		=			
ANR	3186717	Identifier	tInt64		3185880	0					
ANR	3186718	CastExpression	( int64_t ) Z_DVAL_P ( elem )		3185880	1					
ANR	3186719	CastTarget	int64_t		3185880	0					
ANR	3186720	CallExpression	Z_DVAL_P ( elem )		3185880	1					
ANR	3186721	Callee	Z_DVAL_P		3185880	0					
ANR	3186722	Identifier	Z_DVAL_P		3185880	0					
ANR	3186723	ArgumentList	elem		3185880	1					
ANR	3186724	Argument	elem		3185880	0					
ANR	3186725	Identifier	elem		3185880	0					
ANR	3186726	ElseStatement	else		3185880	0					
ANR	3186727	IfStatement	if ( Z_TYPE_P ( elem ) == IS_LONG )		3185880	0					
ANR	3186728	Condition	Z_TYPE_P ( elem ) == IS_LONG	524:16:16067:16091	3185880	0	True				
ANR	3186729	EqualityExpression	Z_TYPE_P ( elem ) == IS_LONG		3185880	0		==			
ANR	3186730	CallExpression	Z_TYPE_P ( elem )		3185880	0					
ANR	3186731	Callee	Z_TYPE_P		3185880	0					
ANR	3186732	Identifier	Z_TYPE_P		3185880	0					
ANR	3186733	ArgumentList	elem		3185880	1					
ANR	3186734	Argument	elem		3185880	0					
ANR	3186735	Identifier	elem		3185880	0					
ANR	3186736	Identifier	IS_LONG		3185880	1					
ANR	3186737	CompoundStatement		158:43:4637:4637	3185880	1					
ANR	3186738	ExpressionStatement	tInt64 = ( int64_t ) Z_LVAL_P ( elem )	526:6:16152:16184	3185880	0	True				
ANR	3186739	AssignmentExpression	tInt64 = ( int64_t ) Z_LVAL_P ( elem )		3185880	0		=			
ANR	3186740	Identifier	tInt64		3185880	0					
ANR	3186741	CastExpression	( int64_t ) Z_LVAL_P ( elem )		3185880	1					
ANR	3186742	CastTarget	int64_t		3185880	0					
ANR	3186743	CallExpression	Z_LVAL_P ( elem )		3185880	1					
ANR	3186744	Callee	Z_LVAL_P		3185880	0					
ANR	3186745	Identifier	Z_LVAL_P		3185880	0					
ANR	3186746	ArgumentList	elem		3185880	1					
ANR	3186747	Argument	elem		3185880	0					
ANR	3186748	Identifier	elem		3185880	0					
ANR	3186749	ElseStatement	else		3185880	0					
ANR	3186750	CompoundStatement		161:12:4741:4741	3185880	0					
ANR	3186751	ExpressionStatement	SEPARATE_ZVAL_IF_NOT_REF ( elem )	528:6:16206:16236	3185880	0	True				
ANR	3186752	CallExpression	SEPARATE_ZVAL_IF_NOT_REF ( elem )		3185880	0					
ANR	3186753	Callee	SEPARATE_ZVAL_IF_NOT_REF		3185880	0					
ANR	3186754	Identifier	SEPARATE_ZVAL_IF_NOT_REF		3185880	0					
ANR	3186755	ArgumentList	elem		3185880	1					
ANR	3186756	Argument	elem		3185880	0					
ANR	3186757	Identifier	elem		3185880	0					
ANR	3186758	ExpressionStatement	convert_scalar_to_number ( elem )	529:6:16244:16274	3185880	1	True				
ANR	3186759	CallExpression	convert_scalar_to_number ( elem )		3185880	0					
ANR	3186760	Callee	convert_scalar_to_number		3185880	0					
ANR	3186761	Identifier	convert_scalar_to_number		3185880	0					
ANR	3186762	ArgumentList	elem		3185880	1					
ANR	3186763	Argument	elem		3185880	0					
ANR	3186764	Identifier	elem		3185880	0					
ANR	3186765	GotoStatement	goto retry_kint64 ;	530:6:16282:16299	3185880	2	True				
ANR	3186766	Identifier	retry_kint64		3185880	0					
ANR	3186767	ExpressionStatement	formattable . setInt64 ( tInt64 )	532:5:16313:16341	3185880	3	True				
ANR	3186768	CallExpression	formattable . setInt64 ( tInt64 )		3185880	0					
ANR	3186769	Callee	formattable . setInt64		3185880	0					
ANR	3186770	MemberAccess	formattable . setInt64		3185880	0					
ANR	3186771	Identifier	formattable		3185880	0					
ANR	3186772	Identifier	setInt64		3185880	1					
ANR	3186773	ArgumentList	tInt64		3185880	1					
ANR	3186774	Argument	tInt64		3185880	0					
ANR	3186775	Identifier	tInt64		3185880	0					
ANR	3186776	BreakStatement	break ;	533:5:16348:16353	3185880	4	True				
ANR	3186777	Label	case Formattable :: kDate :	535:3:16364:16387	3185880	8	True				
ANR	3186778	Identifier	Formattable :: kDate		3185880	0					
ANR	3186779	CompoundStatement		171:5:4943:5003	3185880	9					
ANR	3186780	IdentifierDeclStatement	"double dd = intl_zval_to_millis ( elem , & err , ""msgfmt_format"" ) ;"	537:5:16400:16460	3185880	0	True				
ANR	3186781	IdentifierDecl	"dd = intl_zval_to_millis ( elem , & err , ""msgfmt_format"" )"		3185880	0					
ANR	3186782	IdentifierDeclType	double		3185880	0					
ANR	3186783	Identifier	dd		3185880	1					
ANR	3186784	AssignmentExpression	"dd = intl_zval_to_millis ( elem , & err , ""msgfmt_format"" )"		3185880	2		=			
ANR	3186785	Identifier	dd		3185880	0					
ANR	3186786	CallExpression	"intl_zval_to_millis ( elem , & err , ""msgfmt_format"" )"		3185880	1					
ANR	3186787	Callee	intl_zval_to_millis		3185880	0					
ANR	3186788	Identifier	intl_zval_to_millis		3185880	0					
ANR	3186789	ArgumentList	elem		3185880	1					
ANR	3186790	Argument	elem		3185880	0					
ANR	3186791	Identifier	elem		3185880	0					
ANR	3186792	Argument	& err		3185880	1					
ANR	3186793	UnaryOperationExpression	& err		3185880	0					
ANR	3186794	UnaryOperator	&		3185880	0					
ANR	3186795	Identifier	err		3185880	1					
ANR	3186796	Argument	"""msgfmt_format"""		3185880	2					
ANR	3186797	PrimaryExpression	"""msgfmt_format"""		3185880	0					
ANR	3186798	IfStatement	if ( U_FAILURE ( err . code ) )		3185880	1					
ANR	3186799	Condition	U_FAILURE ( err . code )	538:9:16471:16489	3185880	0	True				
ANR	3186800	CallExpression	U_FAILURE ( err . code )		3185880	0					
ANR	3186801	Callee	U_FAILURE		3185880	0					
ANR	3186802	Identifier	U_FAILURE		3185880	0					
ANR	3186803	ArgumentList	err . code		3185880	1					
ANR	3186804	Argument	err . code		3185880	0					
ANR	3186805	MemberAccess	err . code		3185880	0					
ANR	3186806	Identifier	err		3185880	0					
ANR	3186807	Identifier	code		3185880	1					
ANR	3186808	CompoundStatement		175:6:5090:5122	3185880	1					
ANR	3186809	IdentifierDeclStatement	char * message ;	539:6:16500:16513	3185880	0	True				
ANR	3186810	IdentifierDecl	* message		3185880	0					
ANR	3186811	IdentifierDeclType	char *		3185880	0					
ANR	3186812	Identifier	message		3185880	1					
ANR	3186813	IdentifierDeclStatement	zend_string * u8key ;	540:6:16521:16539	3185880	1	True				
ANR	3186814	IdentifierDecl	* u8key		3185880	0					
ANR	3186815	IdentifierDeclType	zend_string *		3185880	0					
ANR	3186816	Identifier	u8key		3185880	1					
ANR	3186817	IdentifierDeclStatement	UErrorCode status = UErrorCode ( ) ;	541:6:16547:16579	3185880	2	True				
ANR	3186818	IdentifierDecl	status = UErrorCode ( )		3185880	0					
ANR	3186819	IdentifierDeclType	UErrorCode		3185880	0					
ANR	3186820	Identifier	status		3185880	1					
ANR	3186821	AssignmentExpression	status = UErrorCode ( )		3185880	2		=			
ANR	3186822	Identifier	status		3185880	0					
ANR	3186823	CallExpression	UErrorCode ( )		3185880	1					
ANR	3186824	Callee	UErrorCode		3185880	0					
ANR	3186825	Identifier	UErrorCode		3185880	0					
ANR	3186826	ArgumentList			3185880	1					
ANR	3186827	ExpressionStatement	"u8key = intl_charFromString ( key , & status )"	542:6:16587:16628	3185880	3	True				
ANR	3186828	AssignmentExpression	"u8key = intl_charFromString ( key , & status )"		3185880	0		=			
ANR	3186829	Identifier	u8key		3185880	0					
ANR	3186830	CallExpression	"intl_charFromString ( key , & status )"		3185880	1					
ANR	3186831	Callee	intl_charFromString		3185880	0					
ANR	3186832	Identifier	intl_charFromString		3185880	0					
ANR	3186833	ArgumentList	key		3185880	1					
ANR	3186834	Argument	key		3185880	0					
ANR	3186835	Identifier	key		3185880	0					
ANR	3186836	Argument	& status		3185880	1					
ANR	3186837	UnaryOperationExpression	& status		3185880	0					
ANR	3186838	UnaryOperator	&		3185880	0					
ANR	3186839	Identifier	status		3185880	1					
ANR	3186840	IfStatement	if ( u8key )		3185880	4					
ANR	3186841	Condition	u8key	543:10:16640:16644	3185880	0	True				
ANR	3186842	Identifier	u8key		3185880	0					
ANR	3186843	CompoundStatement		177:17:5190:5190	3185880	1					
ANR	3186844	Statement	spprintf	544:7:16656:16663	3185880	0	True				
ANR	3186845	Statement	(	544:15:16664:16664	3185880	1	True				
ANR	3186846	Statement	&	544:16:16665:16665	3185880	2	True				
ANR	3186847	Statement	message	544:17:16666:16672	3185880	3	True				
ANR	3186848	Statement	","	544:24:16673:16673	3185880	4	True				
ANR	3186849	Statement	0	544:26:16675:16675	3185880	5	True				
ANR	3186850	Statement	","	544:27:16676:16676	3185880	6	True				
ANR	3186851	Statement	"""The argument for key '%s' """	544:29:16678:16705	3185880	7	True				
ANR	3186852	Statement	"""cannot be used as a date or time"""	545:8:16715:16748	3185880	8	True				
ANR	3186853	Statement	","	545:42:16749:16749	3185880	9	True				
ANR	3186854	Statement	ZSTR_VAL	545:44:16751:16758	3185880	10	True				
ANR	3186855	Statement	(	545:52:16759:16759	3185880	11	True				
ANR	3186856	Statement	u8key	545:53:16760:16764	3185880	12	True				
ANR	3186857	Statement	)	545:58:16765:16765	3185880	13	True				
ANR	3186858	Statement	)	545:59:16766:16766	3185880	14	True				
ANR	3186859	ExpressionStatement		545:60:16767:16767	3185880	15	True				
ANR	3186860	ExpressionStatement	"intl_errors_set ( & err , err . code , message , 1 )"	546:7:16776:16819	3185880	16	True				
ANR	3186861	CallExpression	"intl_errors_set ( & err , err . code , message , 1 )"		3185880	0					
ANR	3186862	Callee	intl_errors_set		3185880	0					
ANR	3186863	Identifier	intl_errors_set		3185880	0					
ANR	3186864	ArgumentList	& err		3185880	1					
ANR	3186865	Argument	& err		3185880	0					
ANR	3186866	UnaryOperationExpression	& err		3185880	0					
ANR	3186867	UnaryOperator	&		3185880	0					
ANR	3186868	Identifier	err		3185880	1					
ANR	3186869	Argument	err . code		3185880	1					
ANR	3186870	MemberAccess	err . code		3185880	0					
ANR	3186871	Identifier	err		3185880	0					
ANR	3186872	Identifier	code		3185880	1					
ANR	3186873	Argument	message		3185880	2					
ANR	3186874	Identifier	message		3185880	0					
ANR	3186875	Argument	1		3185880	3					
ANR	3186876	PrimaryExpression	1		3185880	0					
ANR	3186877	ExpressionStatement	zend_string_release ( u8key )	547:7:16828:16854	3185880	17	True				
ANR	3186878	CallExpression	zend_string_release ( u8key )		3185880	0					
ANR	3186879	Callee	zend_string_release		3185880	0					
ANR	3186880	Identifier	zend_string_release		3185880	0					
ANR	3186881	ArgumentList	u8key		3185880	1					
ANR	3186882	Argument	u8key		3185880	0					
ANR	3186883	Identifier	u8key		3185880	0					
ANR	3186884	ExpressionStatement	efree ( message )	548:7:16863:16877	3185880	18	True				
ANR	3186885	CallExpression	efree ( message )		3185880	0					
ANR	3186886	Callee	efree		3185880	0					
ANR	3186887	Identifier	efree		3185880	0					
ANR	3186888	ArgumentList	message		3185880	1					
ANR	3186889	Argument	message		3185880	0					
ANR	3186890	Identifier	message		3185880	0					
ANR	3186891	ContinueStatement	continue ;	550:6:16893:16901	3185880	5	True				
ANR	3186892	ExpressionStatement	formattable . setDate ( dd )	552:5:16915:16938	3185880	2	True				
ANR	3186893	CallExpression	formattable . setDate ( dd )		3185880	0					
ANR	3186894	Callee	formattable . setDate		3185880	0					
ANR	3186895	MemberAccess	formattable . setDate		3185880	0					
ANR	3186896	Identifier	formattable		3185880	0					
ANR	3186897	Identifier	setDate		3185880	1					
ANR	3186898	ArgumentList	dd		3185880	1					
ANR	3186899	Argument	dd		3185880	0					
ANR	3186900	Identifier	dd		3185880	0					
ANR	3186901	BreakStatement	break ;	553:5:16945:16950	3185880	3	True				
ANR	3186902	Label	default :	555:3:16961:16968	3185880	10	True				
ANR	3186903	Identifier	default		3185880	0					
ANR	3186904	ExpressionStatement	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , ""Found unsupported argument type"" , 0 )"	556:4:16974:17064	3185880	11	True				
ANR	3186905	CallExpression	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , ""Found unsupported argument type"" , 0 )"		3185880	0					
ANR	3186906	Callee	intl_errors_set		3185880	0					
ANR	3186907	Identifier	intl_errors_set		3185880	0					
ANR	3186908	ArgumentList	& err		3185880	1					
ANR	3186909	Argument	& err		3185880	0					
ANR	3186910	UnaryOperationExpression	& err		3185880	0					
ANR	3186911	UnaryOperator	&		3185880	0					
ANR	3186912	Identifier	err		3185880	1					
ANR	3186913	Argument	U_ILLEGAL_ARGUMENT_ERROR		3185880	1					
ANR	3186914	Identifier	U_ILLEGAL_ARGUMENT_ERROR		3185880	0					
ANR	3186915	Argument	"""Found unsupported argument type"""		3185880	2					
ANR	3186916	PrimaryExpression	"""Found unsupported argument type"""		3185880	0					
ANR	3186917	Argument	0		3185880	3					
ANR	3186918	PrimaryExpression	0		3185880	0					
ANR	3186919	BreakStatement	break ;	558:4:17070:17075	3185880	12	True				
ANR	3186920	ElseStatement	else		3185880	0					
ANR	3186921	CompoundStatement		194:9:5634:5634	3185880	0					
ANR	3186922	SwitchStatement	switch ( Z_TYPE_P ( elem ) )		3185880	0					
ANR	3186923	Condition	Z_TYPE_P ( elem )	564:11:17341:17354	3185880	0	True				
ANR	3186924	CallExpression	Z_TYPE_P ( elem )		3185880	0					
ANR	3186925	Callee	Z_TYPE_P		3185880	0					
ANR	3186926	Identifier	Z_TYPE_P		3185880	0					
ANR	3186927	ArgumentList	elem		3185880	1					
ANR	3186928	Argument	elem		3185880	0					
ANR	3186929	Identifier	elem		3185880	0					
ANR	3186930	CompoundStatement		198:27:5900:5900	3185880	1					
ANR	3186931	Label	case IS_DOUBLE :	565:3:17362:17376	3185880	0	True				
ANR	3186932	Identifier	IS_DOUBLE		3185880	0					
ANR	3186933	ExpressionStatement	formattable . setDouble ( Z_DVAL_P ( elem ) )	566:4:17382:17419	3185880	1	True				
ANR	3186934	CallExpression	formattable . setDouble ( Z_DVAL_P ( elem ) )		3185880	0					
ANR	3186935	Callee	formattable . setDouble		3185880	0					
ANR	3186936	MemberAccess	formattable . setDouble		3185880	0					
ANR	3186937	Identifier	formattable		3185880	0					
ANR	3186938	Identifier	setDouble		3185880	1					
ANR	3186939	ArgumentList	Z_DVAL_P ( elem )		3185880	1					
ANR	3186940	Argument	Z_DVAL_P ( elem )		3185880	0					
ANR	3186941	CallExpression	Z_DVAL_P ( elem )		3185880	0					
ANR	3186942	Callee	Z_DVAL_P		3185880	0					
ANR	3186943	Identifier	Z_DVAL_P		3185880	0					
ANR	3186944	ArgumentList	elem		3185880	1					
ANR	3186945	Argument	elem		3185880	0					
ANR	3186946	Identifier	elem		3185880	0					
ANR	3186947	BreakStatement	break ;	567:4:17425:17430	3185880	2	True				
ANR	3186948	Label	case IS_TRUE :	568:3:17435:17447	3185880	3	True				
ANR	3186949	Identifier	IS_TRUE		3185880	0					
ANR	3186950	Label	case IS_FALSE :	569:3:17452:17465	3185880	4	True				
ANR	3186951	Identifier	IS_FALSE		3185880	0					
ANR	3186952	ExpressionStatement	convert_to_long_ex ( elem )	570:4:17471:17495	3185880	5	True				
ANR	3186953	CallExpression	convert_to_long_ex ( elem )		3185880	0					
ANR	3186954	Callee	convert_to_long_ex		3185880	0					
ANR	3186955	Identifier	convert_to_long_ex		3185880	0					
ANR	3186956	ArgumentList	elem		3185880	1					
ANR	3186957	Argument	elem		3185880	0					
ANR	3186958	Identifier	elem		3185880	0					
ANR	3186959	Label	case IS_LONG :	572:3:17534:17546	3185880	6	True				
ANR	3186960	Identifier	IS_LONG		3185880	0					
ANR	3186961	ExpressionStatement	formattable . setInt64 ( ( int64_t ) Z_LVAL_P ( elem ) )	573:4:17552:17597	3185880	7	True				
ANR	3186962	CallExpression	formattable . setInt64 ( ( int64_t ) Z_LVAL_P ( elem ) )		3185880	0					
ANR	3186963	Callee	formattable . setInt64		3185880	0					
ANR	3186964	MemberAccess	formattable . setInt64		3185880	0					
ANR	3186965	Identifier	formattable		3185880	0					
ANR	3186966	Identifier	setInt64		3185880	1					
ANR	3186967	ArgumentList	( int64_t ) Z_LVAL_P ( elem )		3185880	1					
ANR	3186968	Argument	( int64_t ) Z_LVAL_P ( elem )		3185880	0					
ANR	3186969	CastExpression	( int64_t ) Z_LVAL_P ( elem )		3185880	0					
ANR	3186970	CastTarget	int64_t		3185880	0					
ANR	3186971	CallExpression	Z_LVAL_P ( elem )		3185880	1					
ANR	3186972	Callee	Z_LVAL_P		3185880	0					
ANR	3186973	Identifier	Z_LVAL_P		3185880	0					
ANR	3186974	ArgumentList	elem		3185880	1					
ANR	3186975	Argument	elem		3185880	0					
ANR	3186976	Identifier	elem		3185880	0					
ANR	3186977	BreakStatement	break ;	574:4:17603:17608	3185880	8	True				
ANR	3186978	Label	case IS_NULL :	575:3:17613:17625	3185880	9	True				
ANR	3186979	Identifier	IS_NULL		3185880	0					
ANR	3186980	ExpressionStatement	formattable . setInt64 ( ( int64_t ) 0 )	576:4:17631:17663	3185880	10	True				
ANR	3186981	CallExpression	formattable . setInt64 ( ( int64_t ) 0 )		3185880	0					
ANR	3186982	Callee	formattable . setInt64		3185880	0					
ANR	3186983	MemberAccess	formattable . setInt64		3185880	0					
ANR	3186984	Identifier	formattable		3185880	0					
ANR	3186985	Identifier	setInt64		3185880	1					
ANR	3186986	ArgumentList	( int64_t ) 0		3185880	1					
ANR	3186987	Argument	( int64_t ) 0		3185880	0					
ANR	3186988	CastExpression	( int64_t ) 0		3185880	0					
ANR	3186989	CastTarget	int64_t		3185880	0					
ANR	3186990	PrimaryExpression	0		3185880	1					
ANR	3186991	BreakStatement	break ;	577:4:17669:17674	3185880	11	True				
ANR	3186992	Label	case IS_STRING :	578:3:17679:17693	3185880	12	True				
ANR	3186993	Identifier	IS_STRING		3185880	0					
ANR	3186994	Label	case IS_OBJECT :	579:3:17698:17712	3185880	13	True				
ANR	3186995	Identifier	IS_OBJECT		3185880	0					
ANR	3186996	GotoStatement	goto string_arg ;	580:4:17718:17733	3185880	14	True				
ANR	3186997	Identifier	string_arg		3185880	0					
ANR	3186998	Label	default :	581:3:17738:17745	3185880	15	True				
ANR	3186999	Identifier	default		3185880	0					
ANR	3187000	CompoundStatement		219:5:6346:6378	3185880	16					
ANR	3187001	IdentifierDeclStatement	char * message ;	583:5:17758:17771	3185880	0	True				
ANR	3187002	IdentifierDecl	* message		3185880	0					
ANR	3187003	IdentifierDeclType	char *		3185880	0					
ANR	3187004	Identifier	message		3185880	1					
ANR	3187005	IdentifierDeclStatement	zend_string * u8key ;	584:5:17778:17796	3185880	1	True				
ANR	3187006	IdentifierDecl	* u8key		3185880	0					
ANR	3187007	IdentifierDeclType	zend_string *		3185880	0					
ANR	3187008	Identifier	u8key		3185880	1					
ANR	3187009	IdentifierDeclStatement	UErrorCode status = UErrorCode ( ) ;	585:5:17803:17835	3185880	2	True				
ANR	3187010	IdentifierDecl	status = UErrorCode ( )		3185880	0					
ANR	3187011	IdentifierDeclType	UErrorCode		3185880	0					
ANR	3187012	Identifier	status		3185880	1					
ANR	3187013	AssignmentExpression	status = UErrorCode ( )		3185880	2		=			
ANR	3187014	Identifier	status		3185880	0					
ANR	3187015	CallExpression	UErrorCode ( )		3185880	1					
ANR	3187016	Callee	UErrorCode		3185880	0					
ANR	3187017	Identifier	UErrorCode		3185880	0					
ANR	3187018	ArgumentList			3185880	1					
ANR	3187019	ExpressionStatement	"u8key = intl_charFromString ( key , & status )"	586:5:17842:17883	3185880	3	True				
ANR	3187020	AssignmentExpression	"u8key = intl_charFromString ( key , & status )"		3185880	0		=			
ANR	3187021	Identifier	u8key		3185880	0					
ANR	3187022	CallExpression	"intl_charFromString ( key , & status )"		3185880	1					
ANR	3187023	Callee	intl_charFromString		3185880	0					
ANR	3187024	Identifier	intl_charFromString		3185880	0					
ANR	3187025	ArgumentList	key		3185880	1					
ANR	3187026	Argument	key		3185880	0					
ANR	3187027	Identifier	key		3185880	0					
ANR	3187028	Argument	& status		3185880	1					
ANR	3187029	UnaryOperationExpression	& status		3185880	0					
ANR	3187030	UnaryOperator	&		3185880	0					
ANR	3187031	Identifier	status		3185880	1					
ANR	3187032	IfStatement	if ( u8key )		3185880	4					
ANR	3187033	Condition	u8key	587:9:17894:17898	3185880	0	True				
ANR	3187034	Identifier	u8key		3185880	0					
ANR	3187035	CompoundStatement		221:16:6444:6444	3185880	1					
ANR	3187036	Statement	spprintf	588:6:17909:17916	3185880	0	True				
ANR	3187037	Statement	(	588:14:17917:17917	3185880	1	True				
ANR	3187038	Statement	&	588:15:17918:17918	3185880	2	True				
ANR	3187039	Statement	message	588:16:17919:17925	3185880	3	True				
ANR	3187040	Statement	","	588:23:17926:17926	3185880	4	True				
ANR	3187041	Statement	0	588:25:17928:17928	3185880	5	True				
ANR	3187042	Statement	","	588:26:17929:17929	3185880	6	True				
ANR	3187043	Statement	"""No strategy to convert the """	588:28:17931:17959	3185880	7	True				
ANR	3187044	Statement	"""value given for the argument with key '%s' """	589:7:17968:18012	3185880	8	True				
ANR	3187045	Statement	"""is available"""	590:7:18021:18034	3185880	9	True				
ANR	3187046	Statement	","	590:21:18035:18035	3185880	10	True				
ANR	3187047	Statement	ZSTR_VAL	590:23:18037:18044	3185880	11	True				
ANR	3187048	Statement	(	590:31:18045:18045	3185880	12	True				
ANR	3187049	Statement	u8key	590:32:18046:18050	3185880	13	True				
ANR	3187050	Statement	)	590:37:18051:18051	3185880	14	True				
ANR	3187051	Statement	)	590:38:18052:18052	3185880	15	True				
ANR	3187052	ExpressionStatement		590:39:18053:18053	3185880	16	True				
ANR	3187053	ExpressionStatement	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , message , 1 )"	591:6:18061:18127	3185880	17	True				
ANR	3187054	CallExpression	"intl_errors_set ( & err , U_ILLEGAL_ARGUMENT_ERROR , message , 1 )"		3185880	0					
ANR	3187055	Callee	intl_errors_set		3185880	0					
ANR	3187056	Identifier	intl_errors_set		3185880	0					
ANR	3187057	ArgumentList	& err		3185880	1					
ANR	3187058	Argument	& err		3185880	0					
ANR	3187059	UnaryOperationExpression	& err		3185880	0					
ANR	3187060	UnaryOperator	&		3185880	0					
ANR	3187061	Identifier	err		3185880	1					
ANR	3187062	Argument	U_ILLEGAL_ARGUMENT_ERROR		3185880	1					
ANR	3187063	Identifier	U_ILLEGAL_ARGUMENT_ERROR		3185880	0					
ANR	3187064	Argument	message		3185880	2					
ANR	3187065	Identifier	message		3185880	0					
ANR	3187066	Argument	1		3185880	3					
ANR	3187067	PrimaryExpression	1		3185880	0					
ANR	3187068	ExpressionStatement	zend_string_release ( u8key )	593:6:18135:18161	3185880	18	True				
ANR	3187069	CallExpression	zend_string_release ( u8key )		3185880	0					
ANR	3187070	Callee	zend_string_release		3185880	0					
ANR	3187071	Identifier	zend_string_release		3185880	0					
ANR	3187072	ArgumentList	u8key		3185880	1					
ANR	3187073	Argument	u8key		3185880	0					
ANR	3187074	Identifier	u8key		3185880	0					
ANR	3187075	ExpressionStatement	efree ( message )	594:6:18169:18183	3185880	19	True				
ANR	3187076	CallExpression	efree ( message )		3185880	0					
ANR	3187077	Callee	efree		3185880	0					
ANR	3187078	Identifier	efree		3185880	0					
ANR	3187079	ArgumentList	message		3185880	1					
ANR	3187080	Argument	message		3185880	0					
ANR	3187081	Identifier	message		3185880	0					
ANR	3187082	ExpressionStatement	argNum ++	599:2:18209:18217	3185880	7	True				
ANR	3187083	PostIncDecOperationExpression	argNum ++		3185880	0					
ANR	3187084	Identifier	argNum		3185880	0					
ANR	3187085	IncDec	++		3185880	1					
ANR	3187086	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	600:3:18222:18245	3185880	26	True				
ANR	3187087	CallExpression	ZEND_HASH_FOREACH_END ( )		3185880	0					
ANR	3187088	Callee	ZEND_HASH_FOREACH_END		3185880	0					
ANR	3187089	Identifier	ZEND_HASH_FOREACH_END		3185880	0					
ANR	3187090	ArgumentList			3185880	1					
ANR	3187091	IfStatement	if ( U_FAILURE ( err . code ) )		3185880	27					
ANR	3187092	Condition	U_FAILURE ( err . code )	602:5:18279:18297	3185880	0	True				
ANR	3187093	CallExpression	U_FAILURE ( err . code )		3185880	0					
ANR	3187094	Callee	U_FAILURE		3185880	0					
ANR	3187095	Identifier	U_FAILURE		3185880	0					
ANR	3187096	ArgumentList	err . code		3185880	1					
ANR	3187097	Argument	err . code		3185880	0					
ANR	3187098	MemberAccess	err . code		3185880	0					
ANR	3187099	Identifier	err		3185880	0					
ANR	3187100	Identifier	code		3185880	1					
ANR	3187101	CompoundStatement		236:26:6843:6843	3185880	1					
ANR	3187102	ReturnStatement	return ;	603:2:18304:18310	3185880	0	True				
ANR	3187103	IdentifierDeclStatement	UnicodeString resultStr ;	606:1:18317:18340	3185880	28	True				
ANR	3187104	IdentifierDecl	resultStr		3185880	0					
ANR	3187105	IdentifierDeclType	UnicodeString		3185880	0					
ANR	3187106	Identifier	resultStr		3185880	1					
ANR	3187107	IdentifierDeclStatement	FieldPosition fieldPosition ( 0 ) ;	607:1:18343:18373	3185880	29	True				
ANR	3187108	IdentifierDecl	fieldPosition ( 0 )		3185880	0					
ANR	3187109	IdentifierDeclType	FieldPosition		3185880	0					
ANR	3187110	Identifier	fieldPosition		3185880	1					
ANR	3187111	PrimaryExpression	0		3185880	2					
ANR	3187112	ExpressionStatement	"mf -> format ( farg_names . empty ( ) ? NULL : & farg_names [ 0 ] , fargs . empty ( ) ? NULL : & fargs [ 0 ] , arg_count , resultStr , err . code )"	610:1:18403:18525	3185880	30	True				
ANR	3187113	CallExpression	"mf -> format ( farg_names . empty ( ) ? NULL : & farg_names [ 0 ] , fargs . empty ( ) ? NULL : & fargs [ 0 ] , arg_count , resultStr , err . code )"		3185880	0					
ANR	3187114	Callee	mf -> format		3185880	0					
ANR	3187115	PtrMemberAccess	mf -> format		3185880	0					
ANR	3187116	Identifier	mf		3185880	0					
ANR	3187117	Identifier	format		3185880	1					
ANR	3187118	ArgumentList	farg_names . empty ( ) ? NULL : & farg_names [ 0 ]		3185880	1					
ANR	3187119	Argument	farg_names . empty ( ) ? NULL : & farg_names [ 0 ]		3185880	0					
ANR	3187120	ConditionalExpression	farg_names . empty ( ) ? NULL : & farg_names [ 0 ]		3185880	0					
ANR	3187121	Condition	farg_names . empty ( )		3185880	0					
ANR	3187122	CallExpression	farg_names . empty ( )		3185880	0					
ANR	3187123	Callee	farg_names . empty		3185880	0					
ANR	3187124	MemberAccess	farg_names . empty		3185880	0					
ANR	3187125	Identifier	farg_names		3185880	0					
ANR	3187126	Identifier	empty		3185880	1					
ANR	3187127	ArgumentList			3185880	1					
ANR	3187128	Identifier	NULL		3185880	1					
ANR	3187129	UnaryOperationExpression	& farg_names [ 0 ]		3185880	2					
ANR	3187130	UnaryOperator	&		3185880	0					
ANR	3187131	ArrayIndexing	farg_names [ 0 ]		3185880	1					
ANR	3187132	Identifier	farg_names		3185880	0					
ANR	3187133	PrimaryExpression	0		3185880	1					
ANR	3187134	Argument	fargs . empty ( ) ? NULL : & fargs [ 0 ]		3185880	1					
ANR	3187135	ConditionalExpression	fargs . empty ( ) ? NULL : & fargs [ 0 ]		3185880	0					
ANR	3187136	Condition	fargs . empty ( )		3185880	0					
ANR	3187137	CallExpression	fargs . empty ( )		3185880	0					
ANR	3187138	Callee	fargs . empty		3185880	0					
ANR	3187139	MemberAccess	fargs . empty		3185880	0					
ANR	3187140	Identifier	fargs		3185880	0					
ANR	3187141	Identifier	empty		3185880	1					
ANR	3187142	ArgumentList			3185880	1					
ANR	3187143	Identifier	NULL		3185880	1					
ANR	3187144	UnaryOperationExpression	& fargs [ 0 ]		3185880	2					
ANR	3187145	UnaryOperator	&		3185880	0					
ANR	3187146	ArrayIndexing	fargs [ 0 ]		3185880	1					
ANR	3187147	Identifier	fargs		3185880	0					
ANR	3187148	PrimaryExpression	0		3185880	1					
ANR	3187149	Argument	arg_count		3185880	2					
ANR	3187150	Identifier	arg_count		3185880	0					
ANR	3187151	Argument	resultStr		3185880	3					
ANR	3187152	Identifier	resultStr		3185880	0					
ANR	3187153	Argument	err . code		3185880	4					
ANR	3187154	MemberAccess	err . code		3185880	0					
ANR	3187155	Identifier	err		3185880	0					
ANR	3187156	Identifier	code		3185880	1					
ANR	3187157	IfStatement	if ( U_FAILURE ( err . code ) )		3185880	31					
ANR	3187158	Condition	U_FAILURE ( err . code )	613:5:18533:18551	3185880	0	True				
ANR	3187159	CallExpression	U_FAILURE ( err . code )		3185880	0					
ANR	3187160	Callee	U_FAILURE		3185880	0					
ANR	3187161	Identifier	U_FAILURE		3185880	0					
ANR	3187162	ArgumentList	err . code		3185880	1					
ANR	3187163	Argument	err . code		3185880	0					
ANR	3187164	MemberAccess	err . code		3185880	0					
ANR	3187165	Identifier	err		3185880	0					
ANR	3187166	Identifier	code		3185880	1					
ANR	3187167	CompoundStatement		247:26:7097:7097	3185880	1					
ANR	3187168	ExpressionStatement	"intl_errors_set ( & err , err . code , ""Call to ICU MessageFormat::format() has failed"" , 0 )"	614:2:18558:18645	3185880	0	True				
ANR	3187169	CallExpression	"intl_errors_set ( & err , err . code , ""Call to ICU MessageFormat::format() has failed"" , 0 )"		3185880	0					
ANR	3187170	Callee	intl_errors_set		3185880	0					
ANR	3187171	Identifier	intl_errors_set		3185880	0					
ANR	3187172	ArgumentList	& err		3185880	1					
ANR	3187173	Argument	& err		3185880	0					
ANR	3187174	UnaryOperationExpression	& err		3185880	0					
ANR	3187175	UnaryOperator	&		3185880	0					
ANR	3187176	Identifier	err		3185880	1					
ANR	3187177	Argument	err . code		3185880	1					
ANR	3187178	MemberAccess	err . code		3185880	0					
ANR	3187179	Identifier	err		3185880	0					
ANR	3187180	Identifier	code		3185880	1					
ANR	3187181	Argument	"""Call to ICU MessageFormat::format() has failed"""		3185880	2					
ANR	3187182	PrimaryExpression	"""Call to ICU MessageFormat::format() has failed"""		3185880	0					
ANR	3187183	Argument	0		3185880	3					
ANR	3187184	PrimaryExpression	0		3185880	0					
ANR	3187185	ReturnStatement	return ;	616:2:18649:18655	3185880	1	True				
ANR	3187186	ExpressionStatement	* formatted_len = resultStr . length ( )	619:1:18662:18697	3185880	32	True				
ANR	3187187	AssignmentExpression	* formatted_len = resultStr . length ( )		3185880	0		=			
ANR	3187188	UnaryOperationExpression	* formatted_len		3185880	0					
ANR	3187189	UnaryOperator	*		3185880	0					
ANR	3187190	Identifier	formatted_len		3185880	1					
ANR	3187191	CallExpression	resultStr . length ( )		3185880	1					
ANR	3187192	Callee	resultStr . length		3185880	0					
ANR	3187193	MemberAccess	resultStr . length		3185880	0					
ANR	3187194	Identifier	resultStr		3185880	0					
ANR	3187195	Identifier	length		3185880	1					
ANR	3187196	ArgumentList			3185880	1					
ANR	3187197	ExpressionStatement	* formatted = eumalloc ( * formatted_len + 1 )	620:1:18700:18739	3185880	33	True				
ANR	3187198	AssignmentExpression	* formatted = eumalloc ( * formatted_len + 1 )		3185880	0		=			
ANR	3187199	UnaryOperationExpression	* formatted		3185880	0					
ANR	3187200	UnaryOperator	*		3185880	0					
ANR	3187201	Identifier	formatted		3185880	1					
ANR	3187202	CallExpression	eumalloc ( * formatted_len + 1 )		3185880	1					
ANR	3187203	Callee	eumalloc		3185880	0					
ANR	3187204	Identifier	eumalloc		3185880	0					
ANR	3187205	ArgumentList	* formatted_len + 1		3185880	1					
ANR	3187206	Argument	* formatted_len + 1		3185880	0					
ANR	3187207	AdditiveExpression	* formatted_len + 1		3185880	0		+			
ANR	3187208	UnaryOperationExpression	* formatted_len		3185880	0					
ANR	3187209	UnaryOperator	*		3185880	0					
ANR	3187210	Identifier	formatted_len		3185880	1					
ANR	3187211	PrimaryExpression	1		3185880	1					
ANR	3187212	ExpressionStatement	"resultStr . extract ( * formatted , * formatted_len + 1 , err . code )"	621:1:18742:18799	3185880	34	True				
ANR	3187213	CallExpression	"resultStr . extract ( * formatted , * formatted_len + 1 , err . code )"		3185880	0					
ANR	3187214	Callee	resultStr . extract		3185880	0					
ANR	3187215	MemberAccess	resultStr . extract		3185880	0					
ANR	3187216	Identifier	resultStr		3185880	0					
ANR	3187217	Identifier	extract		3185880	1					
ANR	3187218	ArgumentList	* formatted		3185880	1					
ANR	3187219	Argument	* formatted		3185880	0					
ANR	3187220	UnaryOperationExpression	* formatted		3185880	0					
ANR	3187221	UnaryOperator	*		3185880	0					
ANR	3187222	Identifier	formatted		3185880	1					
ANR	3187223	Argument	* formatted_len + 1		3185880	1					
ANR	3187224	AdditiveExpression	* formatted_len + 1		3185880	0		+			
ANR	3187225	UnaryOperationExpression	* formatted_len		3185880	0					
ANR	3187226	UnaryOperator	*		3185880	0					
ANR	3187227	Identifier	formatted_len		3185880	1					
ANR	3187228	PrimaryExpression	1		3185880	1					
ANR	3187229	Argument	err . code		3185880	2					
ANR	3187230	MemberAccess	err . code		3185880	0					
ANR	3187231	Identifier	err		3185880	0					
ANR	3187232	Identifier	code		3185880	1					
ANR	3187233	IfStatement	if ( U_FAILURE ( err . code ) )		3185880	35					
ANR	3187234	Condition	U_FAILURE ( err . code )	622:5:18806:18824	3185880	0	True				
ANR	3187235	CallExpression	U_FAILURE ( err . code )		3185880	0					
ANR	3187236	Callee	U_FAILURE		3185880	0					
ANR	3187237	Identifier	U_FAILURE		3185880	0					
ANR	3187238	ArgumentList	err . code		3185880	1					
ANR	3187239	Argument	err . code		3185880	0					
ANR	3187240	MemberAccess	err . code		3185880	0					
ANR	3187241	Identifier	err		3185880	0					
ANR	3187242	Identifier	code		3185880	1					
ANR	3187243	CompoundStatement		256:26:7370:7370	3185880	1					
ANR	3187244	ExpressionStatement	"intl_errors_set ( & err , err . code , ""Error copying format() result"" , 0 )"	623:2:18831:18901	3185880	0	True				
ANR	3187245	CallExpression	"intl_errors_set ( & err , err . code , ""Error copying format() result"" , 0 )"		3185880	0					
ANR	3187246	Callee	intl_errors_set		3185880	0					
ANR	3187247	Identifier	intl_errors_set		3185880	0					
ANR	3187248	ArgumentList	& err		3185880	1					
ANR	3187249	Argument	& err		3185880	0					
ANR	3187250	UnaryOperationExpression	& err		3185880	0					
ANR	3187251	UnaryOperator	&		3185880	0					
ANR	3187252	Identifier	err		3185880	1					
ANR	3187253	Argument	err . code		3185880	1					
ANR	3187254	MemberAccess	err . code		3185880	0					
ANR	3187255	Identifier	err		3185880	0					
ANR	3187256	Identifier	code		3185880	1					
ANR	3187257	Argument	"""Error copying format() result"""		3185880	2					
ANR	3187258	PrimaryExpression	"""Error copying format() result"""		3185880	0					
ANR	3187259	Argument	0		3185880	3					
ANR	3187260	PrimaryExpression	0		3185880	0					
ANR	3187261	ReturnStatement	return ;	625:2:18905:18911	3185880	1	True				
ANR	3187262	ReturnType	U_CFUNC void		3185880	1					
ANR	3187263	Identifier	umsg_format_helper		3185880	2					
ANR	3187264	ParameterList	"MessageFormatter_object * mfo , HashTable * args , UChar * * formatted , int32_t * formatted_len"		3185880	3					
ANR	3187265	Parameter	MessageFormatter_object * mfo	363:32:11342:11369	3185880	0	True				
ANR	3187266	ParameterType	MessageFormatter_object *		3185880	0					
ANR	3187267	Identifier	mfo		3185880	1					
ANR	3187268	Parameter	HashTable * args	364:8:11380:11394	3185880	1	True				
ANR	3187269	ParameterType	HashTable *		3185880	0					
ANR	3187270	Identifier	args		3185880	1					
ANR	3187271	Parameter	UChar * * formatted	365:8:11405:11421	3185880	2	True				
ANR	3187272	ParameterType	UChar * *		3185880	0					
ANR	3187273	Identifier	formatted		3185880	1					
ANR	3187274	Parameter	int32_t * formatted_len	366:8:11432:11453	3185880	3	True				
ANR	3187275	ParameterType	int32_t *		3185880	0					
ANR	3187276	Identifier	formatted_len		3185880	1					
ANR	3187277	CFGEntryNode	ENTRY		3185880		True				
ANR	3187278	CFGExitNode	EXIT		3185880		True				
ANR	3187279	CFGErrorNode	ERROR		3185880		True				
ANR	3187280	Symbol	dd		3185880						
ANR	3187281	Symbol	eumalloc		3185880						
ANR	3187282	Symbol	* farg_names		3185880						
ANR	3187283	Symbol	fargs		3185880						
ANR	3187284	Symbol	farg_names		3185880						
ANR	3187285	Symbol	& err . code		3185880						
ANR	3187286	Symbol	key . getBuffer		3185880						
ANR	3187287	Symbol	Formattable :: kObject		3185880						
ANR	3187288	Symbol	len		3185880						
ANR	3187289	Symbol	u8key		3185880						
ANR	3187290	Symbol	mf		3185880						
ANR	3187291	Symbol	u_sprintf		3185880						
ANR	3187292	Symbol	text		3185880						
ANR	3187293	Symbol	umsg_get_types		3185880						
ANR	3187294	Symbol	elem		3185880						
ANR	3187295	Symbol	str_index		3185880						
ANR	3187296	Symbol	* storedArgType		3185880						
ANR	3187297	Symbol	NULL		3185880						
ANR	3187298	Symbol	zend_hash_index_find_ptr		3185880						
ANR	3187299	Symbol	argType		3185880						
ANR	3187300	Symbol	farg_names . empty		3185880						
ANR	3187301	Symbol	argNum		3185880						
ANR	3187302	Symbol	& status		3185880						
ANR	3187303	Symbol	Z_DVAL_P		3185880						
ANR	3187304	Symbol	U_SUCCESS		3185880						
ANR	3187305	Symbol	UErrorCode		3185880						
ANR	3187306	Symbol	INTL_DATA_ERROR		3185880						
ANR	3187307	Symbol	* argNum		3185880						
ANR	3187308	Symbol	key . length		3185880						
ANR	3187309	Symbol	fieldPosition		3185880						
ANR	3187310	Symbol	& message		3185880						
ANR	3187311	Symbol	num_index		3185880						
ANR	3187312	Symbol	formattable		3185880						
ANR	3187313	Symbol	formatted_len		3185880						
ANR	3187314	Symbol	mfo -> mf_data . umsgf		3185880						
ANR	3187315	Symbol	status		3185880						
ANR	3187316	Symbol	formatted		3185880						
ANR	3187317	Symbol	* text		3185880						
ANR	3187318	Symbol	err . code		3185880						
ANR	3187319	Symbol	& err		3185880						
ANR	3187320	Symbol	U_FAILURE		3185880						
ANR	3187321	Symbol	tInt32		3185880						
ANR	3187322	Symbol	IS_LONG		3185880						
ANR	3187323	Symbol	zend_hash_str_find_ptr		3185880						
ANR	3187324	Symbol	Z_STRLEN_P		3185880						
ANR	3187325	Symbol	key		3185880						
ANR	3187326	Symbol	U_INT64_MIN		3185880						
ANR	3187327	Symbol	resultStr		3185880						
ANR	3187328	Symbol	* mfo		3185880						
ANR	3187329	Symbol	U_INT64_MAX		3185880						
ANR	3187330	Symbol	types		3185880						
ANR	3187331	Symbol	temp		3185880						
ANR	3187332	Symbol	err		3185880						
ANR	3187333	Symbol	d		3185880						
ANR	3187334	Symbol	zend_hash_num_elements		3185880						
ANR	3187335	Symbol	U_ILLEGAL_ARGUMENT_ERROR		3185880						
ANR	3187336	Symbol	resultStr . length		3185880						
ANR	3187337	Symbol	* fargs		3185880						
ANR	3187338	Symbol	intl_zval_to_millis		3185880						
ANR	3187339	Symbol	* formatted		3185880						
ANR	3187340	Symbol	mfo -> mf_data		3185880						
ANR	3187341	Symbol	intl_charFromString		3185880						
ANR	3187342	Symbol	message		3185880						
ANR	3187343	Symbol	Z_TYPE_P		3185880						
ANR	3187344	Symbol	INT32_MAX		3185880						
ANR	3187345	Symbol	Z_STRVAL_P		3185880						
ANR	3187346	Symbol	ZSTR_VAL		3185880						
ANR	3187347	Symbol	Z_LVAL_P		3185880						
ANR	3187348	Symbol	args		3185880						
ANR	3187349	Symbol	storedArgType		3185880						
ANR	3187350	Symbol	tInt64		3185880						
ANR	3187351	Symbol	fargs . empty		3185880						
ANR	3187352	Symbol	mfo		3185880						
ANR	3187353	Symbol	ZSTR_LEN		3185880						
ANR	3187354	Symbol	IS_DOUBLE		3185880						
ANR	3187355	Symbol	* formatted_len		3185880						
ANR	3187356	Symbol	arg_count		3185880						
ANR	3187357	Symbol	INT32_MIN		3185880						
ANR	3187358	DeclStmt									
ANR	3187359	Decl							int	int	j
ANR	3187360	Function	umsg_parse_helper	631:0:18996:20641							
ANR	3187361	FunctionDef	"umsg_parse_helper (UMessageFormat * fmt , int * count , zval * * args , UChar * source , int32_t source_len , UErrorCode * status)"		3187360	0					
ANR	3187362	CompoundStatement		632:0:19128:20641	3187360	0					
ANR	3187363	IdentifierDeclStatement	"UnicodeString srcString ( source , source_len ) ;"	633:4:19134:19177	3187360	0	True				
ANR	3187364	IdentifierDecl	"srcString ( source , source_len )"		3187360	0					
ANR	3187365	IdentifierDeclType	UnicodeString		3187360	0					
ANR	3187366	Identifier	srcString		3187360	1					
ANR	3187367	Expression	"source , source_len"		3187360	2					
ANR	3187368	Identifier	source		3187360	0					
ANR	3187369	Identifier	source_len		3187360	1					
ANR	3187370	IdentifierDeclStatement	"Formattable * fargs = ( ( const MessageFormat * ) fmt ) -> parse ( srcString , * count , * status ) ;"	634:4:19183:19266	3187360	1	True				
ANR	3187371	IdentifierDecl	"* fargs = ( ( const MessageFormat * ) fmt ) -> parse ( srcString , * count , * status )"		3187360	0					
ANR	3187372	IdentifierDeclType	Formattable *		3187360	0					
ANR	3187373	Identifier	fargs		3187360	1					
ANR	3187374	AssignmentExpression	"* fargs = ( ( const MessageFormat * ) fmt ) -> parse ( srcString , * count , * status )"		3187360	2		=			
ANR	3187375	Identifier	fargs		3187360	0					
ANR	3187376	CallExpression	"( ( const MessageFormat * ) fmt ) -> parse ( srcString , * count , * status )"		3187360	1					
ANR	3187377	Callee	( ( const MessageFormat * ) fmt ) -> parse		3187360	0					
ANR	3187378	PtrMemberAccess	( ( const MessageFormat * ) fmt ) -> parse		3187360	0					
ANR	3187379	CastExpression	( const MessageFormat * ) fmt		3187360	0					
ANR	3187380	CastTarget	const MessageFormat *		3187360	0					
ANR	3187381	Identifier	fmt		3187360	1					
ANR	3187382	Identifier	parse		3187360	1					
ANR	3187383	ArgumentList	srcString		3187360	1					
ANR	3187384	Argument	srcString		3187360	0					
ANR	3187385	Identifier	srcString		3187360	0					
ANR	3187386	Argument	* count		3187360	1					
ANR	3187387	UnaryOperationExpression	* count		3187360	0					
ANR	3187388	UnaryOperator	*		3187360	0					
ANR	3187389	Identifier	count		3187360	1					
ANR	3187390	Argument	* status		3187360	2					
ANR	3187391	UnaryOperationExpression	* status		3187360	0					
ANR	3187392	UnaryOperator	*		3187360	0					
ANR	3187393	Identifier	status		3187360	1					
ANR	3187394	IfStatement	if ( U_FAILURE ( * status ) )		3187360	2					
ANR	3187395	Condition	U_FAILURE ( * status )	636:4:19273:19290	3187360	0	True				
ANR	3187396	CallExpression	U_FAILURE ( * status )		3187360	0					
ANR	3187397	Callee	U_FAILURE		3187360	0					
ANR	3187398	Identifier	U_FAILURE		3187360	0					
ANR	3187399	ArgumentList	* status		3187360	1					
ANR	3187400	Argument	* status		3187360	0					
ANR	3187401	UnaryOperationExpression	* status		3187360	0					
ANR	3187402	UnaryOperator	*		3187360	0					
ANR	3187403	Identifier	status		3187360	1					
ANR	3187404	CompoundStatement		5:24:164:164	3187360	1					
ANR	3187405	ReturnStatement	return ;	637:2:19297:19303	3187360	0	True				
ANR	3187406	ExpressionStatement	"* args = ( zval * ) safe_emalloc ( * count , sizeof ( zval ) , 0 )"	640:1:19310:19363	3187360	3	True				
ANR	3187407	AssignmentExpression	"* args = ( zval * ) safe_emalloc ( * count , sizeof ( zval ) , 0 )"		3187360	0		=			
ANR	3187408	UnaryOperationExpression	* args		3187360	0					
ANR	3187409	UnaryOperator	*		3187360	0					
ANR	3187410	Identifier	args		3187360	1					
ANR	3187411	CastExpression	"( zval * ) safe_emalloc ( * count , sizeof ( zval ) , 0 )"		3187360	1					
ANR	3187412	CastTarget	zval *		3187360	0					
ANR	3187413	CallExpression	"safe_emalloc ( * count , sizeof ( zval ) , 0 )"		3187360	1					
ANR	3187414	Callee	safe_emalloc		3187360	0					
ANR	3187415	Identifier	safe_emalloc		3187360	0					
ANR	3187416	ArgumentList	* count		3187360	1					
ANR	3187417	Argument	* count		3187360	0					
ANR	3187418	UnaryOperationExpression	* count		3187360	0					
ANR	3187419	UnaryOperator	*		3187360	0					
ANR	3187420	Identifier	count		3187360	1					
ANR	3187421	Argument	sizeof ( zval )		3187360	1					
ANR	3187422	SizeofExpression	sizeof ( zval )		3187360	0					
ANR	3187423	Sizeof	sizeof		3187360	0					
ANR	3187424	SizeofOperand	zval		3187360	1					
ANR	3187425	Argument	0		3187360	2					
ANR	3187426	PrimaryExpression	0		3187360	0					
ANR	3187427	ForStatement	for ( int32_t i = 0 ; i < * count ; i ++ )		3187360	4					
ANR	3187428	ForInit	int32_t i = 0 ;	643:8:19412:19425	3187360	0	True				
ANR	3187429	IdentifierDeclStatement	int32_t i = 0 ;		3187360	0					
ANR	3187430	IdentifierDecl	i = 0		3187360	0					
ANR	3187431	IdentifierDeclType	int32_t		3187360	0					
ANR	3187432	Identifier	i		3187360	1					
ANR	3187433	AssignmentExpression	i = 0		3187360	2		=			
ANR	3187434	Identifier	i		3187360	0					
ANR	3187435	PrimaryExpression	0		3187360	1					
ANR	3187436	Condition	i < * count	643:23:19427:19436	3187360	1	True				
ANR	3187437	RelationalExpression	i < * count		3187360	0		<			
ANR	3187438	Identifier	i		3187360	0					
ANR	3187439	UnaryOperationExpression	* count		3187360	1					
ANR	3187440	UnaryOperator	*		3187360	0					
ANR	3187441	Identifier	count		3187360	1					
ANR	3187442	PostIncDecOperationExpression	i ++	643:35:19439:19441	3187360	2	True				
ANR	3187443	Identifier	i		3187360	0					
ANR	3187444	IncDec	++		3187360	1					
ANR	3187445	CompoundStatement		16:2:378:396	3187360	3					
ANR	3187446	IdentifierDeclStatement	int64_t aInt64 ;	644:5:19451:19465	3187360	0	True				
ANR	3187447	IdentifierDecl	aInt64		3187360	0					
ANR	3187448	IdentifierDeclType	int64_t		3187360	0					
ANR	3187449	Identifier	aInt64		3187360	1					
ANR	3187450	IdentifierDeclStatement	double aDate ;	645:2:19469:19481	3187360	1	True				
ANR	3187451	IdentifierDecl	aDate		3187360	0					
ANR	3187452	IdentifierDeclType	double		3187360	0					
ANR	3187453	Identifier	aDate		3187360	1					
ANR	3187454	IdentifierDeclStatement	UnicodeString temp ;	646:2:19485:19503	3187360	2	True				
ANR	3187455	IdentifierDecl	temp		3187360	0					
ANR	3187456	IdentifierDeclType	UnicodeString		3187360	0					
ANR	3187457	Identifier	temp		3187360	1					
ANR	3187458	IdentifierDeclStatement	zend_string * u8str ;	647:2:19507:19525	3187360	3	True				
ANR	3187459	IdentifierDecl	* u8str		3187360	0					
ANR	3187460	IdentifierDeclType	zend_string *		3187360	0					
ANR	3187461	Identifier	u8str		3187360	1					
ANR	3187462	SwitchStatement	switch ( fargs [ i ] . getType ( ) )		3187360	4					
ANR	3187463	Condition	fargs [ i ] . getType ( )	649:9:19537:19554	3187360	0	True				
ANR	3187464	CallExpression	fargs [ i ] . getType ( )		3187360	0					
ANR	3187465	Callee	fargs [ i ] . getType		3187360	0					
ANR	3187466	MemberAccess	fargs [ i ] . getType		3187360	0					
ANR	3187467	ArrayIndexing	fargs [ i ]		3187360	0					
ANR	3187468	Identifier	fargs		3187360	0					
ANR	3187469	Identifier	i		3187360	1					
ANR	3187470	Identifier	getType		3187360	1					
ANR	3187471	ArgumentList			3187360	1					
ANR	3187472	CompoundStatement		18:29:428:428	3187360	1					
ANR	3187473	Label	case Formattable :: kDate :	650:8:19567:19590	3187360	0	True				
ANR	3187474	Identifier	Formattable :: kDate		3187360	0					
ANR	3187475	ExpressionStatement	aDate = ( ( double ) fargs [ i ] . getDate ( ) ) / U_MILLIS_PER_SECOND	651:3:19595:19651	3187360	1	True				
ANR	3187476	AssignmentExpression	aDate = ( ( double ) fargs [ i ] . getDate ( ) ) / U_MILLIS_PER_SECOND		3187360	0		=			
ANR	3187477	Identifier	aDate		3187360	0					
ANR	3187478	MultiplicativeExpression	( ( double ) fargs [ i ] . getDate ( ) ) / U_MILLIS_PER_SECOND		3187360	1		/			
ANR	3187479	CastExpression	( double ) fargs [ i ] . getDate ( )		3187360	0					
ANR	3187480	CastTarget	double		3187360	0					
ANR	3187481	CallExpression	fargs [ i ] . getDate ( )		3187360	1					
ANR	3187482	Callee	fargs [ i ] . getDate		3187360	0					
ANR	3187483	MemberAccess	fargs [ i ] . getDate		3187360	0					
ANR	3187484	ArrayIndexing	fargs [ i ]		3187360	0					
ANR	3187485	Identifier	fargs		3187360	0					
ANR	3187486	Identifier	i		3187360	1					
ANR	3187487	Identifier	getDate		3187360	1					
ANR	3187488	ArgumentList			3187360	1					
ANR	3187489	Identifier	U_MILLIS_PER_SECOND		3187360	1					
ANR	3187490	ExpressionStatement	"ZVAL_DOUBLE ( & ( * args ) [ i ] , aDate )"	652:3:19656:19687	3187360	2	True				
ANR	3187491	CallExpression	"ZVAL_DOUBLE ( & ( * args ) [ i ] , aDate )"		3187360	0					
ANR	3187492	Callee	ZVAL_DOUBLE		3187360	0					
ANR	3187493	Identifier	ZVAL_DOUBLE		3187360	0					
ANR	3187494	ArgumentList	& ( * args ) [ i ]		3187360	1					
ANR	3187495	Argument	& ( * args ) [ i ]		3187360	0					
ANR	3187496	UnaryOperationExpression	& ( * args ) [ i ]		3187360	0					
ANR	3187497	UnaryOperator	&		3187360	0					
ANR	3187498	ArrayIndexing	( * args ) [ i ]		3187360	1					
ANR	3187499	UnaryOperationExpression	* args		3187360	0					
ANR	3187500	UnaryOperator	*		3187360	0					
ANR	3187501	Identifier	args		3187360	1					
ANR	3187502	Identifier	i		3187360	1					
ANR	3187503	Argument	aDate		3187360	1					
ANR	3187504	Identifier	aDate		3187360	0					
ANR	3187505	BreakStatement	break ;	653:12:19701:19706	3187360	3	True				
ANR	3187506	Label	case Formattable :: kDouble :	655:8:19717:19742	3187360	4	True				
ANR	3187507	Identifier	Formattable :: kDouble		3187360	0					
ANR	3187508	ExpressionStatement	"ZVAL_DOUBLE ( & ( * args ) [ i ] , ( double ) fargs [ i ] . getDouble ( ) )"	656:3:19747:19801	3187360	5	True				
ANR	3187509	CallExpression	"ZVAL_DOUBLE ( & ( * args ) [ i ] , ( double ) fargs [ i ] . getDouble ( ) )"		3187360	0					
ANR	3187510	Callee	ZVAL_DOUBLE		3187360	0					
ANR	3187511	Identifier	ZVAL_DOUBLE		3187360	0					
ANR	3187512	ArgumentList	& ( * args ) [ i ]		3187360	1					
ANR	3187513	Argument	& ( * args ) [ i ]		3187360	0					
ANR	3187514	UnaryOperationExpression	& ( * args ) [ i ]		3187360	0					
ANR	3187515	UnaryOperator	&		3187360	0					
ANR	3187516	ArrayIndexing	( * args ) [ i ]		3187360	1					
ANR	3187517	UnaryOperationExpression	* args		3187360	0					
ANR	3187518	UnaryOperator	*		3187360	0					
ANR	3187519	Identifier	args		3187360	1					
ANR	3187520	Identifier	i		3187360	1					
ANR	3187521	Argument	( double ) fargs [ i ] . getDouble ( )		3187360	1					
ANR	3187522	CastExpression	( double ) fargs [ i ] . getDouble ( )		3187360	0					
ANR	3187523	CastTarget	double		3187360	0					
ANR	3187524	CallExpression	fargs [ i ] . getDouble ( )		3187360	1					
ANR	3187525	Callee	fargs [ i ] . getDouble		3187360	0					
ANR	3187526	MemberAccess	fargs [ i ] . getDouble		3187360	0					
ANR	3187527	ArrayIndexing	fargs [ i ]		3187360	0					
ANR	3187528	Identifier	fargs		3187360	0					
ANR	3187529	Identifier	i		3187360	1					
ANR	3187530	Identifier	getDouble		3187360	1					
ANR	3187531	ArgumentList			3187360	1					
ANR	3187532	BreakStatement	break ;	657:12:19815:19820	3187360	6	True				
ANR	3187533	Label	case Formattable :: kLong :	659:8:19831:19854	3187360	7	True				
ANR	3187534	Identifier	Formattable :: kLong		3187360	0					
ANR	3187535	ExpressionStatement	"ZVAL_LONG ( & ( * args ) [ i ] , fargs [ i ] . getLong ( ) )"	660:3:19859:19901	3187360	8	True				
ANR	3187536	CallExpression	"ZVAL_LONG ( & ( * args ) [ i ] , fargs [ i ] . getLong ( ) )"		3187360	0					
ANR	3187537	Callee	ZVAL_LONG		3187360	0					
ANR	3187538	Identifier	ZVAL_LONG		3187360	0					
ANR	3187539	ArgumentList	& ( * args ) [ i ]		3187360	1					
ANR	3187540	Argument	& ( * args ) [ i ]		3187360	0					
ANR	3187541	UnaryOperationExpression	& ( * args ) [ i ]		3187360	0					
ANR	3187542	UnaryOperator	&		3187360	0					
ANR	3187543	ArrayIndexing	( * args ) [ i ]		3187360	1					
ANR	3187544	UnaryOperationExpression	* args		3187360	0					
ANR	3187545	UnaryOperator	*		3187360	0					
ANR	3187546	Identifier	args		3187360	1					
ANR	3187547	Identifier	i		3187360	1					
ANR	3187548	Argument	fargs [ i ] . getLong ( )		3187360	1					
ANR	3187549	CallExpression	fargs [ i ] . getLong ( )		3187360	0					
ANR	3187550	Callee	fargs [ i ] . getLong		3187360	0					
ANR	3187551	MemberAccess	fargs [ i ] . getLong		3187360	0					
ANR	3187552	ArrayIndexing	fargs [ i ]		3187360	0					
ANR	3187553	Identifier	fargs		3187360	0					
ANR	3187554	Identifier	i		3187360	1					
ANR	3187555	Identifier	getLong		3187360	1					
ANR	3187556	ArgumentList			3187360	1					
ANR	3187557	BreakStatement	break ;	661:12:19915:19920	3187360	9	True				
ANR	3187558	Label	case Formattable :: kInt64 :	663:8:19931:19955	3187360	10	True				
ANR	3187559	Identifier	Formattable :: kInt64		3187360	0					
ANR	3187560	ExpressionStatement	aInt64 = fargs [ i ] . getInt64 ( )	664:12:19969:19997	3187360	11	True				
ANR	3187561	AssignmentExpression	aInt64 = fargs [ i ] . getInt64 ( )		3187360	0		=			
ANR	3187562	Identifier	aInt64		3187360	0					
ANR	3187563	CallExpression	fargs [ i ] . getInt64 ( )		3187360	1					
ANR	3187564	Callee	fargs [ i ] . getInt64		3187360	0					
ANR	3187565	MemberAccess	fargs [ i ] . getInt64		3187360	0					
ANR	3187566	ArrayIndexing	fargs [ i ]		3187360	0					
ANR	3187567	Identifier	fargs		3187360	0					
ANR	3187568	Identifier	i		3187360	1					
ANR	3187569	Identifier	getInt64		3187360	1					
ANR	3187570	ArgumentList			3187360	1					
ANR	3187571	IfStatement	if ( aInt64 > ZEND_LONG_MAX || aInt64 < - ZEND_LONG_MAX )		3187360	12					
ANR	3187572	Condition	aInt64 > ZEND_LONG_MAX || aInt64 < - ZEND_LONG_MAX	665:6:20005:20053	3187360	0	True				
ANR	3187573	OrExpression	aInt64 > ZEND_LONG_MAX || aInt64 < - ZEND_LONG_MAX		3187360	0		||			
ANR	3187574	RelationalExpression	aInt64 > ZEND_LONG_MAX		3187360	0		>			
ANR	3187575	Identifier	aInt64		3187360	0					
ANR	3187576	Identifier	ZEND_LONG_MAX		3187360	1					
ANR	3187577	RelationalExpression	aInt64 < - ZEND_LONG_MAX		3187360	1		<			
ANR	3187578	Identifier	aInt64		3187360	0					
ANR	3187579	UnaryOperationExpression	- ZEND_LONG_MAX		3187360	1					
ANR	3187580	UnaryOperator	-		3187360	0					
ANR	3187581	Identifier	ZEND_LONG_MAX		3187360	1					
ANR	3187582	CompoundStatement		34:57:927:927	3187360	1					
ANR	3187583	ExpressionStatement	"ZVAL_DOUBLE ( & ( * args ) [ i ] , ( double ) aInt64 )"	666:4:20062:20102	3187360	0	True				
ANR	3187584	CallExpression	"ZVAL_DOUBLE ( & ( * args ) [ i ] , ( double ) aInt64 )"		3187360	0					
ANR	3187585	Callee	ZVAL_DOUBLE		3187360	0					
ANR	3187586	Identifier	ZVAL_DOUBLE		3187360	0					
ANR	3187587	ArgumentList	& ( * args ) [ i ]		3187360	1					
ANR	3187588	Argument	& ( * args ) [ i ]		3187360	0					
ANR	3187589	UnaryOperationExpression	& ( * args ) [ i ]		3187360	0					
ANR	3187590	UnaryOperator	&		3187360	0					
ANR	3187591	ArrayIndexing	( * args ) [ i ]		3187360	1					
ANR	3187592	UnaryOperationExpression	* args		3187360	0					
ANR	3187593	UnaryOperator	*		3187360	0					
ANR	3187594	Identifier	args		3187360	1					
ANR	3187595	Identifier	i		3187360	1					
ANR	3187596	Argument	( double ) aInt64		3187360	1					
ANR	3187597	CastExpression	( double ) aInt64		3187360	0					
ANR	3187598	CastTarget	double		3187360	0					
ANR	3187599	Identifier	aInt64		3187360	1					
ANR	3187600	ElseStatement	else		3187360	0					
ANR	3187601	CompoundStatement		36:10:985:985	3187360	0					
ANR	3187602	ExpressionStatement	"ZVAL_LONG ( & ( * args ) [ i ] , ( zend_long ) aInt64 )"	668:4:20120:20161	3187360	0	True				
ANR	3187603	CallExpression	"ZVAL_LONG ( & ( * args ) [ i ] , ( zend_long ) aInt64 )"		3187360	0					
ANR	3187604	Callee	ZVAL_LONG		3187360	0					
ANR	3187605	Identifier	ZVAL_LONG		3187360	0					
ANR	3187606	ArgumentList	& ( * args ) [ i ]		3187360	1					
ANR	3187607	Argument	& ( * args ) [ i ]		3187360	0					
ANR	3187608	UnaryOperationExpression	& ( * args ) [ i ]		3187360	0					
ANR	3187609	UnaryOperator	&		3187360	0					
ANR	3187610	ArrayIndexing	( * args ) [ i ]		3187360	1					
ANR	3187611	UnaryOperationExpression	* args		3187360	0					
ANR	3187612	UnaryOperator	*		3187360	0					
ANR	3187613	Identifier	args		3187360	1					
ANR	3187614	Identifier	i		3187360	1					
ANR	3187615	Argument	( zend_long ) aInt64		3187360	1					
ANR	3187616	CastExpression	( zend_long ) aInt64		3187360	0					
ANR	3187617	CastTarget	zend_long		3187360	0					
ANR	3187618	Identifier	aInt64		3187360	1					
ANR	3187619	BreakStatement	break ;	670:12:20180:20185	3187360	13	True				
ANR	3187620	Label	case Formattable :: kString :	672:8:20196:20221	3187360	14	True				
ANR	3187621	Identifier	Formattable :: kString		3187360	0					
ANR	3187622	ExpressionStatement	fargs [ i ] . getString ( temp )	673:12:20235:20259	3187360	15	True				
ANR	3187623	CallExpression	fargs [ i ] . getString ( temp )		3187360	0					
ANR	3187624	Callee	fargs [ i ] . getString		3187360	0					
ANR	3187625	MemberAccess	fargs [ i ] . getString		3187360	0					
ANR	3187626	ArrayIndexing	fargs [ i ]		3187360	0					
ANR	3187627	Identifier	fargs		3187360	0					
ANR	3187628	Identifier	i		3187360	1					
ANR	3187629	Identifier	getString		3187360	1					
ANR	3187630	ArgumentList	temp		3187360	1					
ANR	3187631	Argument	temp		3187360	0					
ANR	3187632	Identifier	temp		3187360	0					
ANR	3187633	ExpressionStatement	"u8str = intl_convert_utf16_to_utf8 ( temp . getBuffer ( ) , temp . length ( ) , status )"	674:3:20264:20339	3187360	16	True				
ANR	3187634	AssignmentExpression	"u8str = intl_convert_utf16_to_utf8 ( temp . getBuffer ( ) , temp . length ( ) , status )"		3187360	0		=			
ANR	3187635	Identifier	u8str		3187360	0					
ANR	3187636	CallExpression	"intl_convert_utf16_to_utf8 ( temp . getBuffer ( ) , temp . length ( ) , status )"		3187360	1					
ANR	3187637	Callee	intl_convert_utf16_to_utf8		3187360	0					
ANR	3187638	Identifier	intl_convert_utf16_to_utf8		3187360	0					
ANR	3187639	ArgumentList	temp . getBuffer ( )		3187360	1					
ANR	3187640	Argument	temp . getBuffer ( )		3187360	0					
ANR	3187641	CallExpression	temp . getBuffer ( )		3187360	0					
ANR	3187642	Callee	temp . getBuffer		3187360	0					
ANR	3187643	MemberAccess	temp . getBuffer		3187360	0					
ANR	3187644	Identifier	temp		3187360	0					
ANR	3187645	Identifier	getBuffer		3187360	1					
ANR	3187646	ArgumentList			3187360	1					
ANR	3187647	Argument	temp . length ( )		3187360	1					
ANR	3187648	CallExpression	temp . length ( )		3187360	0					
ANR	3187649	Callee	temp . length		3187360	0					
ANR	3187650	MemberAccess	temp . length		3187360	0					
ANR	3187651	Identifier	temp		3187360	0					
ANR	3187652	Identifier	length		3187360	1					
ANR	3187653	ArgumentList			3187360	1					
ANR	3187654	Argument	status		3187360	2					
ANR	3187655	Identifier	status		3187360	0					
ANR	3187656	IfStatement	if ( ! u8str )		3187360	17					
ANR	3187657	Condition	! u8str	675:6:20347:20352	3187360	0	True				
ANR	3187658	UnaryOperationExpression	! u8str		3187360	0					
ANR	3187659	UnaryOperator	!		3187360	0					
ANR	3187660	Identifier	u8str		3187360	1					
ANR	3187661	CompoundStatement		44:14:1226:1226	3187360	1					
ANR	3187662	ExpressionStatement	cleanup_zvals ( )	676:4:20361:20376	3187360	0	True				
ANR	3187663	CallExpression	cleanup_zvals ( )		3187360	0					
ANR	3187664	Callee	cleanup_zvals		3187360	0					
ANR	3187665	Identifier	cleanup_zvals		3187360	0					
ANR	3187666	ArgumentList			3187360	1					
ANR	3187667	ReturnStatement	return ;	677:4:20382:20388	3187360	1	True				
ANR	3187668	ExpressionStatement	"ZVAL_NEW_STR ( & ( * args ) [ i ] , u8str )"	679:3:20398:20430	3187360	18	True				
ANR	3187669	CallExpression	"ZVAL_NEW_STR ( & ( * args ) [ i ] , u8str )"		3187360	0					
ANR	3187670	Callee	ZVAL_NEW_STR		3187360	0					
ANR	3187671	Identifier	ZVAL_NEW_STR		3187360	0					
ANR	3187672	ArgumentList	& ( * args ) [ i ]		3187360	1					
ANR	3187673	Argument	& ( * args ) [ i ]		3187360	0					
ANR	3187674	UnaryOperationExpression	& ( * args ) [ i ]		3187360	0					
ANR	3187675	UnaryOperator	&		3187360	0					
ANR	3187676	ArrayIndexing	( * args ) [ i ]		3187360	1					
ANR	3187677	UnaryOperationExpression	* args		3187360	0					
ANR	3187678	UnaryOperator	*		3187360	0					
ANR	3187679	Identifier	args		3187360	1					
ANR	3187680	Identifier	i		3187360	1					
ANR	3187681	Argument	u8str		3187360	1					
ANR	3187682	Identifier	u8str		3187360	0					
ANR	3187683	BreakStatement	break ;	680:12:20444:20449	3187360	19	True				
ANR	3187684	Label	case Formattable :: kObject :	682:8:20460:20485	3187360	20	True				
ANR	3187685	Identifier	Formattable :: kObject		3187360	0					
ANR	3187686	Label	case Formattable :: kArray :	683:8:20495:20519	3187360	21	True				
ANR	3187687	Identifier	Formattable :: kArray		3187360	0					
ANR	3187688	ExpressionStatement	* status = U_ILLEGAL_ARGUMENT_ERROR	684:12:20533:20567	3187360	22	True				
ANR	3187689	AssignmentExpression	* status = U_ILLEGAL_ARGUMENT_ERROR		3187360	0		=			
ANR	3187690	UnaryOperationExpression	* status		3187360	0					
ANR	3187691	UnaryOperator	*		3187360	0					
ANR	3187692	Identifier	status		3187360	1					
ANR	3187693	Identifier	U_ILLEGAL_ARGUMENT_ERROR		3187360	1					
ANR	3187694	ExpressionStatement	cleanup_zvals ( )	685:3:20572:20587	3187360	23	True				
ANR	3187695	CallExpression	cleanup_zvals ( )		3187360	0					
ANR	3187696	Callee	cleanup_zvals		3187360	0					
ANR	3187697	Identifier	cleanup_zvals		3187360	0					
ANR	3187698	ArgumentList			3187360	1					
ANR	3187699	BreakStatement	break ;	686:12:20601:20606	3187360	24	True				
ANR	3187700	Statement	delete	689:1:20625:20630	3187360	5	True				
ANR	3187701	Statement	[	689:7:20631:20631	3187360	6	True				
ANR	3187702	Statement	]	689:8:20632:20632	3187360	7	True				
ANR	3187703	ExpressionStatement	fargs	689:10:20634:20639	3187360	8	True				
ANR	3187704	Identifier	fargs		3187360	0					
ANR	3187705	ReturnType	U_CFUNC void		3187360	1					
ANR	3187706	Identifier	umsg_parse_helper		3187360	2					
ANR	3187707	ParameterList	"UMessageFormat * fmt , int * count , zval * * args , UChar * source , int32_t source_len , UErrorCode * status"		3187360	3					
ANR	3187708	Parameter	UMessageFormat * fmt	631:31:19027:19045	3187360	0	True				
ANR	3187709	ParameterType	UMessageFormat *		3187360	0					
ANR	3187710	Identifier	fmt		3187360	1					
ANR	3187711	Parameter	int * count	631:52:19048:19057	3187360	1	True				
ANR	3187712	ParameterType	int *		3187360	0					
ANR	3187713	Identifier	count		3187360	1					
ANR	3187714	Parameter	zval * * args	631:64:19060:19070	3187360	2	True				
ANR	3187715	ParameterType	zval * *		3187360	0					
ANR	3187716	Identifier	args		3187360	1					
ANR	3187717	Parameter	UChar * source	631:77:19073:19085	3187360	3	True				
ANR	3187718	ParameterType	UChar *		3187360	0					
ANR	3187719	Identifier	source		3187360	1					
ANR	3187720	Parameter	int32_t source_len	631:92:19088:19105	3187360	4	True				
ANR	3187721	ParameterType	int32_t		3187360	0					
ANR	3187722	Identifier	source_len		3187360	1					
ANR	3187723	Parameter	UErrorCode * status	631:112:19108:19125	3187360	5	True				
ANR	3187724	ParameterType	UErrorCode *		3187360	0					
ANR	3187725	Identifier	status		3187360	1					
ANR	3187726	CFGEntryNode	ENTRY		3187360		True				
ANR	3187727	CFGExitNode	EXIT		3187360		True				
ANR	3187728	Symbol	ZEND_LONG_MAX		3187360						
ANR	3187729	Symbol	* fmt		3187360						
ANR	3187730	Symbol	fargs		3187360						
ANR	3187731	Symbol	intl_convert_utf16_to_utf8		3187360						
ANR	3187732	Symbol	source		3187360						
ANR	3187733	Symbol	fmt		3187360						
ANR	3187734	Symbol	* args		3187360						
ANR	3187735	Symbol	U_FAILURE		3187360						
ANR	3187736	Symbol	* count		3187360						
ANR	3187737	Symbol	srcString		3187360						
ANR	3187738	Symbol	aDate		3187360						
ANR	3187739	Symbol	U_MILLIS_PER_SECOND		3187360						
ANR	3187740	Symbol	fargs [ i ] . getDouble		3187360						
ANR	3187741	Symbol	temp . getBuffer		3187360						
ANR	3187742	Symbol	temp		3187360						
ANR	3187743	Symbol	( ( const MessageFormat * ) fmt ) -> parse		3187360						
ANR	3187744	Symbol	u8str		3187360						
ANR	3187745	Symbol	fargs [ i ] . getLong		3187360						
ANR	3187746	Symbol	U_ILLEGAL_ARGUMENT_ERROR		3187360						
ANR	3187747	Symbol	fargs [ i ] . getType		3187360						
ANR	3187748	Symbol	* fargs		3187360						
ANR	3187749	Symbol	count		3187360						
ANR	3187750	Symbol	i		3187360						
ANR	3187751	Symbol	fargs [ i ] . getDate		3187360						
ANR	3187752	Symbol	* status		3187360						
ANR	3187753	Symbol	args		3187360						
ANR	3187754	Symbol	aInt64		3187360						
ANR	3187755	Symbol	* i		3187360						
ANR	3187756	Symbol	source_len		3187360						
ANR	3187757	Symbol	temp . length		3187360						
ANR	3187758	Symbol	safe_emalloc		3187360						
ANR	3187759	Symbol	fargs [ i ] . getInt64		3187360						
ANR	3187760	Symbol	status		3187360						
