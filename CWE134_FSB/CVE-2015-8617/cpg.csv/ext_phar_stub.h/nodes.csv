command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1832612	File	data/converged/CVE-2015-8617_php-src/ext_phar_stub.h								
ANR	1832613	Function	phar_get_stub	21:0:1144:8761							
ANR	1832614	FunctionDef	"phar_get_stub (const char * index_php , const char * web , const int name_len , const int web_len)"		1832613	0					
ANR	1832615	CompoundStatement		22:0:1264:8761	1832613	0					
ANR	1832616	Statement	static	23:1:1267:1272	1832613	0	True				
ANR	1832617	IdentifierDeclStatement	"const char newstub0 [ ] = ""<?php\\n\\n$web = '"" ;"	23:8:1274:1317	1832613	1	True				
ANR	1832618	IdentifierDecl	"newstub0 [ ] = ""<?php\\n\\n$web = '"""		1832613	0					
ANR	1832619	IdentifierDeclType	const char [ ]		1832613	0					
ANR	1832620	Identifier	newstub0		1832613	1					
ANR	1832621	AssignmentExpression	"newstub0 [ ] = ""<?php\\n\\n$web = '"""		1832613	2		=			
ANR	1832622	Identifier	newstub0		1832613	0					
ANR	1832623	PrimaryExpression	"""<?php\\n\\n$web = '"""		1832613	1					
ANR	1832624	Statement	static	24:1:1320:1325	1832613	2	True				
ANR	1832625	IdentifierDeclStatement	"const char newstub1_0 [ ] = ""';\\n\\nif (in_array('phar', stream_get_wrappers()) && class_exists('Phar', 0)) {\\nPhar::interceptFileFuncs();\\nset_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());\\nPhar::webPhar(null, $web);\\ninclude 'phar://' . __FILE__ . '/' . Extract_Phar::START;\\nreturn;\\n}\\n\\nif (@(isset($_SERVER['REQUEST_URI']) && isset($_SERVER['REQUEST_METHOD']) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {\\nExtract_Phar::go(true);\\n$mimes = array(\\n'phps' => 2,\\n'c' => 'text/plain',\\n'cc' => 'text/plain',\\n'cpp' => 'text/plain',\\n'c++' => 'text/plain',\\n'dtd' => 'text/plain',\\n'h' => 'text/plain',\\n'log' => 'text/plain',\\n'rng' => 'text/plain',\\n'txt' => 'text/plain',\\n'xsd' => 'text/plain',\\n'php' => 1,\\n'inc' => 1,\\n'avi' => 'video/avi',\\n'bmp' => 'image/bmp',\\n'css' => 'text/css',\\n'gif' => 'image/gif',\\n'htm' => 'text/html',\\n'html' => 'text/html',\\n'htmls' => 'text/html',\\n'ico' => 'image/x-ico',\\n'jpe' => 'image/jpeg',\\n'jpg' => 'image/jpeg',\\n'jpeg' => 'image/jpeg',\\n'js' => 'application/x-javascript',\\n'midi' => 'audio/midi',\\n'mid' => 'audio/midi',\\n'mod' => 'audio/mod',\\n'mov' => 'movie/quicktime',\\n'mp3' => 'audio/mp3',\\n'mpg' => 'video/mpeg',\\n'mpeg' => 'video/mpeg',\\n'pdf' => 'application/pdf',\\n'png' => 'image/png',\\n'swf' => 'application/shockwave-flash',\\n'tif' => 'image/tiff',\\n'tiff' => 'image/tiff',\\n'wav' => 'audio/wav',\\n'xbm' => 'image/xbm',\\n'xml' => 'text/xml',\\n);\\n\\nheader(\\""Cache-Control: no-cache, must-revalidate\\"");\\nheader(\\""Pragma: no-cache\\"");\\n\\n$basename = basename(__FILE__);\\nif (!strpos($_SERVER['REQUEST_URI'], $basename)) {\\nchdir(Extract_Phar::$temp);\\ninclude $web;\\nreturn;\\n}\\n$pt = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], $basename) + strlen($basename));\\nif (!$pt || $pt == '/') {\\n$pt = $web;\\nheader('HTTP/1.1 301 Moved Permanently');\\nheader('Location: ' . $_SERVER['REQUEST_URI'] . '/' . $pt);\\nexit;\\n}\\n$a = realpath(Extract_Phar::$temp . DIRECTORY_SEPARATOR . $pt);\\nif (!$a || strlen(dirname($a)) < strlen("" ;"	24:8:1327:3401	1832613	3	True				
ANR	1832626	IdentifierDecl	"newstub1_0 [ ] = ""';\\n\\nif (in_array('phar', stream_get_wrappers()) && class_exists('Phar', 0)) {\\nPhar::interceptFileFuncs();\\nset_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());\\nPhar::webPhar(null, $web);\\ninclude 'phar://' . __FILE__ . '/' . Extract_Phar::START;\\nreturn;\\n}\\n\\nif (@(isset($_SERVER['REQUEST_URI']) && isset($_SERVER['REQUEST_METHOD']) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {\\nExtract_Phar::go(true);\\n$mimes = array(\\n'phps' => 2,\\n'c' => 'text/plain',\\n'cc' => 'text/plain',\\n'cpp' => 'text/plain',\\n'c++' => 'text/plain',\\n'dtd' => 'text/plain',\\n'h' => 'text/plain',\\n'log' => 'text/plain',\\n'rng' => 'text/plain',\\n'txt' => 'text/plain',\\n'xsd' => 'text/plain',\\n'php' => 1,\\n'inc' => 1,\\n'avi' => 'video/avi',\\n'bmp' => 'image/bmp',\\n'css' => 'text/css',\\n'gif' => 'image/gif',\\n'htm' => 'text/html',\\n'html' => 'text/html',\\n'htmls' => 'text/html',\\n'ico' => 'image/x-ico',\\n'jpe' => 'image/jpeg',\\n'jpg' => 'image/jpeg',\\n'jpeg' => 'image/jpeg',\\n'js' => 'application/x-javascript',\\n'midi' => 'audio/midi',\\n'mid' => 'audio/midi',\\n'mod' => 'audio/mod',\\n'mov' => 'movie/quicktime',\\n'mp3' => 'audio/mp3',\\n'mpg' => 'video/mpeg',\\n'mpeg' => 'video/mpeg',\\n'pdf' => 'application/pdf',\\n'png' => 'image/png',\\n'swf' => 'application/shockwave-flash',\\n'tif' => 'image/tiff',\\n'tiff' => 'image/tiff',\\n'wav' => 'audio/wav',\\n'xbm' => 'image/xbm',\\n'xml' => 'text/xml',\\n);\\n\\nheader(\\""Cache-Control: no-cache, must-revalidate\\"");\\nheader(\\""Pragma: no-cache\\"");\\n\\n$basename = basename(__FILE__);\\nif (!strpos($_SERVER['REQUEST_URI'], $basename)) {\\nchdir(Extract_Phar::$temp);\\ninclude $web;\\nreturn;\\n}\\n$pt = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], $basename) + strlen($basename));\\nif (!$pt || $pt == '/') {\\n$pt = $web;\\nheader('HTTP/1.1 301 Moved Permanently');\\nheader('Location: ' . $_SERVER['REQUEST_URI'] . '/' . $pt);\\nexit;\\n}\\n$a = realpath(Extract_Phar::$temp . DIRECTORY_SEPARATOR . $pt);\\nif (!$a || strlen(dirname($a)) < strlen("""		1832613	0					
ANR	1832627	IdentifierDeclType	const char [ ]		1832613	0					
ANR	1832628	Identifier	newstub1_0		1832613	1					
ANR	1832629	AssignmentExpression	"newstub1_0 [ ] = ""';\\n\\nif (in_array('phar', stream_get_wrappers()) && class_exists('Phar', 0)) {\\nPhar::interceptFileFuncs();\\nset_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());\\nPhar::webPhar(null, $web);\\ninclude 'phar://' . __FILE__ . '/' . Extract_Phar::START;\\nreturn;\\n}\\n\\nif (@(isset($_SERVER['REQUEST_URI']) && isset($_SERVER['REQUEST_METHOD']) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {\\nExtract_Phar::go(true);\\n$mimes = array(\\n'phps' => 2,\\n'c' => 'text/plain',\\n'cc' => 'text/plain',\\n'cpp' => 'text/plain',\\n'c++' => 'text/plain',\\n'dtd' => 'text/plain',\\n'h' => 'text/plain',\\n'log' => 'text/plain',\\n'rng' => 'text/plain',\\n'txt' => 'text/plain',\\n'xsd' => 'text/plain',\\n'php' => 1,\\n'inc' => 1,\\n'avi' => 'video/avi',\\n'bmp' => 'image/bmp',\\n'css' => 'text/css',\\n'gif' => 'image/gif',\\n'htm' => 'text/html',\\n'html' => 'text/html',\\n'htmls' => 'text/html',\\n'ico' => 'image/x-ico',\\n'jpe' => 'image/jpeg',\\n'jpg' => 'image/jpeg',\\n'jpeg' => 'image/jpeg',\\n'js' => 'application/x-javascript',\\n'midi' => 'audio/midi',\\n'mid' => 'audio/midi',\\n'mod' => 'audio/mod',\\n'mov' => 'movie/quicktime',\\n'mp3' => 'audio/mp3',\\n'mpg' => 'video/mpeg',\\n'mpeg' => 'video/mpeg',\\n'pdf' => 'application/pdf',\\n'png' => 'image/png',\\n'swf' => 'application/shockwave-flash',\\n'tif' => 'image/tiff',\\n'tiff' => 'image/tiff',\\n'wav' => 'audio/wav',\\n'xbm' => 'image/xbm',\\n'xml' => 'text/xml',\\n);\\n\\nheader(\\""Cache-Control: no-cache, must-revalidate\\"");\\nheader(\\""Pragma: no-cache\\"");\\n\\n$basename = basename(__FILE__);\\nif (!strpos($_SERVER['REQUEST_URI'], $basename)) {\\nchdir(Extract_Phar::$temp);\\ninclude $web;\\nreturn;\\n}\\n$pt = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], $basename) + strlen($basename));\\nif (!$pt || $pt == '/') {\\n$pt = $web;\\nheader('HTTP/1.1 301 Moved Permanently');\\nheader('Location: ' . $_SERVER['REQUEST_URI'] . '/' . $pt);\\nexit;\\n}\\n$a = realpath(Extract_Phar::$temp . DIRECTORY_SEPARATOR . $pt);\\nif (!$a || strlen(dirname($a)) < strlen("""		1832613	2		=			
ANR	1832630	Identifier	newstub1_0		1832613	0					
ANR	1832631	PrimaryExpression	"""';\\n\\nif (in_array('phar', stream_get_wrappers()) && class_exists('Phar', 0)) {\\nPhar::interceptFileFuncs();\\nset_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());\\nPhar::webPhar(null, $web);\\ninclude 'phar://' . __FILE__ . '/' . Extract_Phar::START;\\nreturn;\\n}\\n\\nif (@(isset($_SERVER['REQUEST_URI']) && isset($_SERVER['REQUEST_METHOD']) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {\\nExtract_Phar::go(true);\\n$mimes = array(\\n'phps' => 2,\\n'c' => 'text/plain',\\n'cc' => 'text/plain',\\n'cpp' => 'text/plain',\\n'c++' => 'text/plain',\\n'dtd' => 'text/plain',\\n'h' => 'text/plain',\\n'log' => 'text/plain',\\n'rng' => 'text/plain',\\n'txt' => 'text/plain',\\n'xsd' => 'text/plain',\\n'php' => 1,\\n'inc' => 1,\\n'avi' => 'video/avi',\\n'bmp' => 'image/bmp',\\n'css' => 'text/css',\\n'gif' => 'image/gif',\\n'htm' => 'text/html',\\n'html' => 'text/html',\\n'htmls' => 'text/html',\\n'ico' => 'image/x-ico',\\n'jpe' => 'image/jpeg',\\n'jpg' => 'image/jpeg',\\n'jpeg' => 'image/jpeg',\\n'js' => 'application/x-javascript',\\n'midi' => 'audio/midi',\\n'mid' => 'audio/midi',\\n'mod' => 'audio/mod',\\n'mov' => 'movie/quicktime',\\n'mp3' => 'audio/mp3',\\n'mpg' => 'video/mpeg',\\n'mpeg' => 'video/mpeg',\\n'pdf' => 'application/pdf',\\n'png' => 'image/png',\\n'swf' => 'application/shockwave-flash',\\n'tif' => 'image/tiff',\\n'tiff' => 'image/tiff',\\n'wav' => 'audio/wav',\\n'xbm' => 'image/xbm',\\n'xml' => 'text/xml',\\n);\\n\\nheader(\\""Cache-Control: no-cache, must-revalidate\\"");\\nheader(\\""Pragma: no-cache\\"");\\n\\n$basename = basename(__FILE__);\\nif (!strpos($_SERVER['REQUEST_URI'], $basename)) {\\nchdir(Extract_Phar::$temp);\\ninclude $web;\\nreturn;\\n}\\n$pt = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], $basename) + strlen($basename));\\nif (!$pt || $pt == '/') {\\n$pt = $web;\\nheader('HTTP/1.1 301 Moved Permanently');\\nheader('Location: ' . $_SERVER['REQUEST_URI'] . '/' . $pt);\\nexit;\\n}\\n$a = realpath(Extract_Phar::$temp . DIRECTORY_SEPARATOR . $pt);\\nif (!$a || strlen(dirname($a)) < strlen("""		1832613	1					
ANR	1832632	Statement	static	25:1:3404:3409	1832613	4	True				
ANR	1832633	IdentifierDeclStatement	"const char newstub1_1 [ ] = ""Extract_Phar::$temp)) {\\nheader('HTTP/1.0 404 Not Found');\\necho \\""<html>\\\\n <head>\\\\n  <title>File Not Found<title>\\\\n </head>\\\\n <body>\\\\n  <h1>404 - File \\"", $pt, \\"" Not Found</h1>\\\\n </body>\\\\n</html>\\"";\\nexit;\\n}\\n$b = pathinfo($a);\\nif (!isset($b['extension'])) {\\nheader('Content-Type: text/plain');\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\nif (isset($mimes[$b['extension']])) {\\nif ($mimes[$b['extension']] === 1) {\\ninclude $a;\\nexit;\\n}\\nif ($mimes[$b['extension']] === 2) {\\nhighlight_file($a);\\nexit;\\n}\\nheader('Content-Type: ' .$mimes[$b['extension']]);\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\n}\\n\\nclass Extract_Phar\\n{\\nstatic $temp;\\nstatic $origdir;\\nconst GZ = 0x1000;\\nconst BZ2 = 0x2000;\\nconst MASK = 0x3000;\\nconst START = '"" ;"	25:8:3411:4245	1832613	5	True				
ANR	1832634	IdentifierDecl	"newstub1_1 [ ] = ""Extract_Phar::$temp)) {\\nheader('HTTP/1.0 404 Not Found');\\necho \\""<html>\\\\n <head>\\\\n  <title>File Not Found<title>\\\\n </head>\\\\n <body>\\\\n  <h1>404 - File \\"", $pt, \\"" Not Found</h1>\\\\n </body>\\\\n</html>\\"";\\nexit;\\n}\\n$b = pathinfo($a);\\nif (!isset($b['extension'])) {\\nheader('Content-Type: text/plain');\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\nif (isset($mimes[$b['extension']])) {\\nif ($mimes[$b['extension']] === 1) {\\ninclude $a;\\nexit;\\n}\\nif ($mimes[$b['extension']] === 2) {\\nhighlight_file($a);\\nexit;\\n}\\nheader('Content-Type: ' .$mimes[$b['extension']]);\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\n}\\n\\nclass Extract_Phar\\n{\\nstatic $temp;\\nstatic $origdir;\\nconst GZ = 0x1000;\\nconst BZ2 = 0x2000;\\nconst MASK = 0x3000;\\nconst START = '"""		1832613	0					
ANR	1832635	IdentifierDeclType	const char [ ]		1832613	0					
ANR	1832636	Identifier	newstub1_1		1832613	1					
ANR	1832637	AssignmentExpression	"newstub1_1 [ ] = ""Extract_Phar::$temp)) {\\nheader('HTTP/1.0 404 Not Found');\\necho \\""<html>\\\\n <head>\\\\n  <title>File Not Found<title>\\\\n </head>\\\\n <body>\\\\n  <h1>404 - File \\"", $pt, \\"" Not Found</h1>\\\\n </body>\\\\n</html>\\"";\\nexit;\\n}\\n$b = pathinfo($a);\\nif (!isset($b['extension'])) {\\nheader('Content-Type: text/plain');\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\nif (isset($mimes[$b['extension']])) {\\nif ($mimes[$b['extension']] === 1) {\\ninclude $a;\\nexit;\\n}\\nif ($mimes[$b['extension']] === 2) {\\nhighlight_file($a);\\nexit;\\n}\\nheader('Content-Type: ' .$mimes[$b['extension']]);\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\n}\\n\\nclass Extract_Phar\\n{\\nstatic $temp;\\nstatic $origdir;\\nconst GZ = 0x1000;\\nconst BZ2 = 0x2000;\\nconst MASK = 0x3000;\\nconst START = '"""		1832613	2		=			
ANR	1832638	Identifier	newstub1_1		1832613	0					
ANR	1832639	PrimaryExpression	"""Extract_Phar::$temp)) {\\nheader('HTTP/1.0 404 Not Found');\\necho \\""<html>\\\\n <head>\\\\n  <title>File Not Found<title>\\\\n </head>\\\\n <body>\\\\n  <h1>404 - File \\"", $pt, \\"" Not Found</h1>\\\\n </body>\\\\n</html>\\"";\\nexit;\\n}\\n$b = pathinfo($a);\\nif (!isset($b['extension'])) {\\nheader('Content-Type: text/plain');\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\nif (isset($mimes[$b['extension']])) {\\nif ($mimes[$b['extension']] === 1) {\\ninclude $a;\\nexit;\\n}\\nif ($mimes[$b['extension']] === 2) {\\nhighlight_file($a);\\nexit;\\n}\\nheader('Content-Type: ' .$mimes[$b['extension']]);\\nheader('Content-Length: ' . filesize($a));\\nreadfile($a);\\nexit;\\n}\\n}\\n\\nclass Extract_Phar\\n{\\nstatic $temp;\\nstatic $origdir;\\nconst GZ = 0x1000;\\nconst BZ2 = 0x2000;\\nconst MASK = 0x3000;\\nconst START = '"""		1832613	1					
ANR	1832640	Statement	static	26:1:4248:4253	1832613	6	True				
ANR	1832641	IdentifierDeclStatement	"const char newstub2 [ ] = ""';\\nconst LEN = "" ;"	26:8:4255:4297	1832613	7	True				
ANR	1832642	IdentifierDecl	"newstub2 [ ] = ""';\\nconst LEN = """		1832613	0					
ANR	1832643	IdentifierDeclType	const char [ ]		1832613	0					
ANR	1832644	Identifier	newstub2		1832613	1					
ANR	1832645	AssignmentExpression	"newstub2 [ ] = ""';\\nconst LEN = """		1832613	2		=			
ANR	1832646	Identifier	newstub2		1832613	0					
ANR	1832647	PrimaryExpression	"""';\\nconst LEN = """		1832613	1					
ANR	1832648	Statement	static	27:1:4300:4305	1832613	8	True				
ANR	1832649	IdentifierDeclStatement	"const char newstub3_0 [ ] = "";\\n\\nstatic function go($return = false)\\n{\\n$fp = fopen(__FILE__, 'rb');\\nfseek($fp, self::LEN);\\n$L = unpack('V', $a = (binary)fread($fp, 4));\\n$m = (binary)'';\\n\\ndo {\\n$read = 8192;\\nif ($L[1] - strlen($m) < 8192) {\\n$read = $L[1] - strlen($m);\\n}\\n$last = (binary)fread($fp, $read);\\n$m .= $last;\\n} while (strlen($last) && strlen($m) < $L[1]);\\n\\nif (strlen($m) < $L[1]) {\\ndie('ERROR: manifest length read was \\""' .\\nstrlen($m) .'\\"" should be \\""' .\\n$L[1] . '\\""');\\n}\\n\\n$info = self::_unpack($m);\\n$f = $info['c'];\\n\\nif ($f & self::GZ) {\\nif (!function_exists('gzinflate')) {\\ndie('Error: zlib extension is not enabled -' .\\n' gzinflate() function needed for zlib-compressed .phars');\\n}\\n}\\n\\nif ($f & self::BZ2) {\\nif (!function_exists('bzdecompress')) {\\ndie('Error: bzip2 extension is not enabled -' .\\n' bzdecompress() function needed for bz2-compressed .phars');\\n}\\n}\\n\\n$temp = self::tmpdir();\\n\\nif (!$temp || !is_writable($temp)) {\\n$sessionpath = session_save_path();\\nif (strpos ($sessionpath, \\"";\\"") !== false)\\n$sessionpath = substr ($sessionpath, strpos ($sessionpath, \\"";\\"")+1);\\nif (!file_exists($sessionpath) || !is_dir($sessionpath)) {\\ndie('Could not locate temporary directory to extract phar');\\n}\\n$temp = $sessionpath;\\n}\\n\\n$temp .= '/pharextract/'.basename(__FILE__, '.phar');\\nself::$temp = $temp;\\nself::$origdir = getcwd();\\n@mkdir($temp, 0777, true);\\n$temp = realpath($temp);\\n\\nif (!file_exists($temp . DIRECTORY_SEPARATOR . md5_file(__FILE__))) {\\nself::_removeTmpFiles($temp, getcwd());\\n@mkdir($temp, 0777, true);\\n@file_put_contents($temp . '/' . md5_file(__FILE__), '');\\n\\nforeach ($info['m'] as $path => $file) {\\n$a = !file_exists(dirname($temp . '/' . $path));\\n@mkdir(dirname($temp . '/' . $path), 0777, true);\\nclearstatcache();\\n\\nif ($path[strlen($path) - 1] == '/') {\\n@mkdir($temp . '/' . $path, 0777);\\n} else {\\nfile_put_contents($temp . '/' . $path, self::extractFile($path, $file, $fp));\\n@chmod($temp . '/' . $path, 0666);\\n}\\n}\\n}\\n\\nchdir($temp);\\n\\nif (!$return) {\\ninclude self::ST"" ;"	27:8:4307:6381	1832613	9	True				
ANR	1832650	IdentifierDecl	"newstub3_0 [ ] = "";\\n\\nstatic function go($return = false)\\n{\\n$fp = fopen(__FILE__, 'rb');\\nfseek($fp, self::LEN);\\n$L = unpack('V', $a = (binary)fread($fp, 4));\\n$m = (binary)'';\\n\\ndo {\\n$read = 8192;\\nif ($L[1] - strlen($m) < 8192) {\\n$read = $L[1] - strlen($m);\\n}\\n$last = (binary)fread($fp, $read);\\n$m .= $last;\\n} while (strlen($last) && strlen($m) < $L[1]);\\n\\nif (strlen($m) < $L[1]) {\\ndie('ERROR: manifest length read was \\""' .\\nstrlen($m) .'\\"" should be \\""' .\\n$L[1] . '\\""');\\n}\\n\\n$info = self::_unpack($m);\\n$f = $info['c'];\\n\\nif ($f & self::GZ) {\\nif (!function_exists('gzinflate')) {\\ndie('Error: zlib extension is not enabled -' .\\n' gzinflate() function needed for zlib-compressed .phars');\\n}\\n}\\n\\nif ($f & self::BZ2) {\\nif (!function_exists('bzdecompress')) {\\ndie('Error: bzip2 extension is not enabled -' .\\n' bzdecompress() function needed for bz2-compressed .phars');\\n}\\n}\\n\\n$temp = self::tmpdir();\\n\\nif (!$temp || !is_writable($temp)) {\\n$sessionpath = session_save_path();\\nif (strpos ($sessionpath, \\"";\\"") !== false)\\n$sessionpath = substr ($sessionpath, strpos ($sessionpath, \\"";\\"")+1);\\nif (!file_exists($sessionpath) || !is_dir($sessionpath)) {\\ndie('Could not locate temporary directory to extract phar');\\n}\\n$temp = $sessionpath;\\n}\\n\\n$temp .= '/pharextract/'.basename(__FILE__, '.phar');\\nself::$temp = $temp;\\nself::$origdir = getcwd();\\n@mkdir($temp, 0777, true);\\n$temp = realpath($temp);\\n\\nif (!file_exists($temp . DIRECTORY_SEPARATOR . md5_file(__FILE__))) {\\nself::_removeTmpFiles($temp, getcwd());\\n@mkdir($temp, 0777, true);\\n@file_put_contents($temp . '/' . md5_file(__FILE__), '');\\n\\nforeach ($info['m'] as $path => $file) {\\n$a = !file_exists(dirname($temp . '/' . $path));\\n@mkdir(dirname($temp . '/' . $path), 0777, true);\\nclearstatcache();\\n\\nif ($path[strlen($path) - 1] == '/') {\\n@mkdir($temp . '/' . $path, 0777);\\n} else {\\nfile_put_contents($temp . '/' . $path, self::extractFile($path, $file, $fp));\\n@chmod($temp . '/' . $path, 0666);\\n}\\n}\\n}\\n\\nchdir($temp);\\n\\nif (!$return) {\\ninclude self::ST"""		1832613	0					
ANR	1832651	IdentifierDeclType	const char [ ]		1832613	0					
ANR	1832652	Identifier	newstub3_0		1832613	1					
ANR	1832653	AssignmentExpression	"newstub3_0 [ ] = "";\\n\\nstatic function go($return = false)\\n{\\n$fp = fopen(__FILE__, 'rb');\\nfseek($fp, self::LEN);\\n$L = unpack('V', $a = (binary)fread($fp, 4));\\n$m = (binary)'';\\n\\ndo {\\n$read = 8192;\\nif ($L[1] - strlen($m) < 8192) {\\n$read = $L[1] - strlen($m);\\n}\\n$last = (binary)fread($fp, $read);\\n$m .= $last;\\n} while (strlen($last) && strlen($m) < $L[1]);\\n\\nif (strlen($m) < $L[1]) {\\ndie('ERROR: manifest length read was \\""' .\\nstrlen($m) .'\\"" should be \\""' .\\n$L[1] . '\\""');\\n}\\n\\n$info = self::_unpack($m);\\n$f = $info['c'];\\n\\nif ($f & self::GZ) {\\nif (!function_exists('gzinflate')) {\\ndie('Error: zlib extension is not enabled -' .\\n' gzinflate() function needed for zlib-compressed .phars');\\n}\\n}\\n\\nif ($f & self::BZ2) {\\nif (!function_exists('bzdecompress')) {\\ndie('Error: bzip2 extension is not enabled -' .\\n' bzdecompress() function needed for bz2-compressed .phars');\\n}\\n}\\n\\n$temp = self::tmpdir();\\n\\nif (!$temp || !is_writable($temp)) {\\n$sessionpath = session_save_path();\\nif (strpos ($sessionpath, \\"";\\"") !== false)\\n$sessionpath = substr ($sessionpath, strpos ($sessionpath, \\"";\\"")+1);\\nif (!file_exists($sessionpath) || !is_dir($sessionpath)) {\\ndie('Could not locate temporary directory to extract phar');\\n}\\n$temp = $sessionpath;\\n}\\n\\n$temp .= '/pharextract/'.basename(__FILE__, '.phar');\\nself::$temp = $temp;\\nself::$origdir = getcwd();\\n@mkdir($temp, 0777, true);\\n$temp = realpath($temp);\\n\\nif (!file_exists($temp . DIRECTORY_SEPARATOR . md5_file(__FILE__))) {\\nself::_removeTmpFiles($temp, getcwd());\\n@mkdir($temp, 0777, true);\\n@file_put_contents($temp . '/' . md5_file(__FILE__), '');\\n\\nforeach ($info['m'] as $path => $file) {\\n$a = !file_exists(dirname($temp . '/' . $path));\\n@mkdir(dirname($temp . '/' . $path), 0777, true);\\nclearstatcache();\\n\\nif ($path[strlen($path) - 1] == '/') {\\n@mkdir($temp . '/' . $path, 0777);\\n} else {\\nfile_put_contents($temp . '/' . $path, self::extractFile($path, $file, $fp));\\n@chmod($temp . '/' . $path, 0666);\\n}\\n}\\n}\\n\\nchdir($temp);\\n\\nif (!$return) {\\ninclude self::ST"""		1832613	2		=			
ANR	1832654	Identifier	newstub3_0		1832613	0					
ANR	1832655	PrimaryExpression	""";\\n\\nstatic function go($return = false)\\n{\\n$fp = fopen(__FILE__, 'rb');\\nfseek($fp, self::LEN);\\n$L = unpack('V', $a = (binary)fread($fp, 4));\\n$m = (binary)'';\\n\\ndo {\\n$read = 8192;\\nif ($L[1] - strlen($m) < 8192) {\\n$read = $L[1] - strlen($m);\\n}\\n$last = (binary)fread($fp, $read);\\n$m .= $last;\\n} while (strlen($last) && strlen($m) < $L[1]);\\n\\nif (strlen($m) < $L[1]) {\\ndie('ERROR: manifest length read was \\""' .\\nstrlen($m) .'\\"" should be \\""' .\\n$L[1] . '\\""');\\n}\\n\\n$info = self::_unpack($m);\\n$f = $info['c'];\\n\\nif ($f & self::GZ) {\\nif (!function_exists('gzinflate')) {\\ndie('Error: zlib extension is not enabled -' .\\n' gzinflate() function needed for zlib-compressed .phars');\\n}\\n}\\n\\nif ($f & self::BZ2) {\\nif (!function_exists('bzdecompress')) {\\ndie('Error: bzip2 extension is not enabled -' .\\n' bzdecompress() function needed for bz2-compressed .phars');\\n}\\n}\\n\\n$temp = self::tmpdir();\\n\\nif (!$temp || !is_writable($temp)) {\\n$sessionpath = session_save_path();\\nif (strpos ($sessionpath, \\"";\\"") !== false)\\n$sessionpath = substr ($sessionpath, strpos ($sessionpath, \\"";\\"")+1);\\nif (!file_exists($sessionpath) || !is_dir($sessionpath)) {\\ndie('Could not locate temporary directory to extract phar');\\n}\\n$temp = $sessionpath;\\n}\\n\\n$temp .= '/pharextract/'.basename(__FILE__, '.phar');\\nself::$temp = $temp;\\nself::$origdir = getcwd();\\n@mkdir($temp, 0777, true);\\n$temp = realpath($temp);\\n\\nif (!file_exists($temp . DIRECTORY_SEPARATOR . md5_file(__FILE__))) {\\nself::_removeTmpFiles($temp, getcwd());\\n@mkdir($temp, 0777, true);\\n@file_put_contents($temp . '/' . md5_file(__FILE__), '');\\n\\nforeach ($info['m'] as $path => $file) {\\n$a = !file_exists(dirname($temp . '/' . $path));\\n@mkdir(dirname($temp . '/' . $path), 0777, true);\\nclearstatcache();\\n\\nif ($path[strlen($path) - 1] == '/') {\\n@mkdir($temp . '/' . $path, 0777);\\n} else {\\nfile_put_contents($temp . '/' . $path, self::extractFile($path, $file, $fp));\\n@chmod($temp . '/' . $path, 0666);\\n}\\n}\\n}\\n\\nchdir($temp);\\n\\nif (!$return) {\\ninclude self::ST"""		1832613	1					
ANR	1832656	Statement	static	28:1:6384:6389	1832613	10	True				
ANR	1832657	IdentifierDeclStatement	"const char newstub3_1 [ ] = ""ART;\\n}\\n}\\n\\nstatic function tmpdir()\\n{\\nif (strpos(PHP_OS, 'WIN') !== false) {\\nif ($var = getenv('TMP') ? getenv('TMP') : getenv('TEMP')) {\\nreturn $var;\\n}\\nif (is_dir('/temp') || mkdir('/temp')) {\\nreturn realpath('/temp');\\n}\\nreturn false;\\n}\\nif ($var = getenv('TMPDIR')) {\\nreturn $var;\\n}\\nreturn realpath('/tmp');\\n}\\n\\nstatic function _unpack($m)\\n{\\n$info = unpack('V', substr($m, 0, 4));\\n $l = unpack('V', substr($m, 10, 4));\\n$m = substr($m, 14 + $l[1]);\\n$s = unpack('V', substr($m, 0, 4));\\n$o = 0;\\n$start = 4 + $s[1];\\n$ret['c'] = 0;\\n\\nfor ($i = 0; $i < $info[1]; $i++) {\\n $len = unpack('V', substr($m, $start, 4));\\n$start += 4;\\n $savepath = substr($m, $start, $len[1]);\\n$start += $len[1];\\n   $ret['m'][$savepath] = array_values(unpack('Va/Vb/Vc/Vd/Ve/Vf', substr($m, $start, 24)));\\n$ret['m'][$savepath][3] = sprintf('%u', $ret['m'][$savepath][3]\\n& 0xffffffff);\\n$ret['m'][$savepath][7] = $o;\\n$o += $ret['m'][$savepath][2];\\n$start += 24 + $ret['m'][$savepath][5];\\n$ret['c'] |= $ret['m'][$savepath][4] & self::MASK;\\n}\\nreturn $ret;\\n}\\n\\nstatic function extractFile($path, $entry, $fp)\\n{\\n$data = '';\\n$c = $entry[2];\\n\\nwhile ($c) {\\nif ($c < 8192) {\\n$data .= @fread($fp, $c);\\n$c = 0;\\n} else {\\n$c -= 8192;\\n$data .= @fread($fp, 8192);\\n}\\n}\\n\\nif ($entry[4] & self::GZ) {\\n$data = gzinflate($data);\\n} elseif ($entry[4] & self::BZ2) {\\n$data = bzdecompress($data);\\n}\\n\\nif (strlen($data) != $entry[0]) {\\ndie(\\""Invalid internal .phar file (size error \\"" . strlen($data) . \\"" != \\"" .\\n$stat[7] . \\"")\\"");\\n}\\n\\nif ($entry[3] != sprintf(\\""%u\\"", crc32((binary)$data) & 0xffffffff)) {\\ndie(\\""Invalid internal .phar file (checksum error)\\"");\\n}\\n\\nreturn $data;\\n}\\n\\nstatic function _removeTmpFiles($temp, $origdir)\\n{\\nchdir($temp);\\n\\nforeach (glob('*') as $f) {\\nif (file_exists($f)) {\\nis_dir($f) ? @rmdir($f) : @unlink($f);\\nif (file_exists($f) && is_dir($f)) {\\nself::_removeTmpFiles($f, getcwd());\\n}\\n}\\n}\\n\\n@rmdir($temp);\\nclearstatcache();\\nchdir($origdir);\\n}\\n}\\n\\nExtract_Phar::go();\\n__HALT_COMPIL"" ;"	28:8:6391:8465	1832613	11	True				
ANR	1832658	IdentifierDecl	"newstub3_1 [ ] = ""ART;\\n}\\n}\\n\\nstatic function tmpdir()\\n{\\nif (strpos(PHP_OS, 'WIN') !== false) {\\nif ($var = getenv('TMP') ? getenv('TMP') : getenv('TEMP')) {\\nreturn $var;\\n}\\nif (is_dir('/temp') || mkdir('/temp')) {\\nreturn realpath('/temp');\\n}\\nreturn false;\\n}\\nif ($var = getenv('TMPDIR')) {\\nreturn $var;\\n}\\nreturn realpath('/tmp');\\n}\\n\\nstatic function _unpack($m)\\n{\\n$info = unpack('V', substr($m, 0, 4));\\n $l = unpack('V', substr($m, 10, 4));\\n$m = substr($m, 14 + $l[1]);\\n$s = unpack('V', substr($m, 0, 4));\\n$o = 0;\\n$start = 4 + $s[1];\\n$ret['c'] = 0;\\n\\nfor ($i = 0; $i < $info[1]; $i++) {\\n $len = unpack('V', substr($m, $start, 4));\\n$start += 4;\\n $savepath = substr($m, $start, $len[1]);\\n$start += $len[1];\\n   $ret['m'][$savepath] = array_values(unpack('Va/Vb/Vc/Vd/Ve/Vf', substr($m, $start, 24)));\\n$ret['m'][$savepath][3] = sprintf('%u', $ret['m'][$savepath][3]\\n& 0xffffffff);\\n$ret['m'][$savepath][7] = $o;\\n$o += $ret['m'][$savepath][2];\\n$start += 24 + $ret['m'][$savepath][5];\\n$ret['c'] |= $ret['m'][$savepath][4] & self::MASK;\\n}\\nreturn $ret;\\n}\\n\\nstatic function extractFile($path, $entry, $fp)\\n{\\n$data = '';\\n$c = $entry[2];\\n\\nwhile ($c) {\\nif ($c < 8192) {\\n$data .= @fread($fp, $c);\\n$c = 0;\\n} else {\\n$c -= 8192;\\n$data .= @fread($fp, 8192);\\n}\\n}\\n\\nif ($entry[4] & self::GZ) {\\n$data = gzinflate($data);\\n} elseif ($entry[4] & self::BZ2) {\\n$data = bzdecompress($data);\\n}\\n\\nif (strlen($data) != $entry[0]) {\\ndie(\\""Invalid internal .phar file (size error \\"" . strlen($data) . \\"" != \\"" .\\n$stat[7] . \\"")\\"");\\n}\\n\\nif ($entry[3] != sprintf(\\""%u\\"", crc32((binary)$data) & 0xffffffff)) {\\ndie(\\""Invalid internal .phar file (checksum error)\\"");\\n}\\n\\nreturn $data;\\n}\\n\\nstatic function _removeTmpFiles($temp, $origdir)\\n{\\nchdir($temp);\\n\\nforeach (glob('*') as $f) {\\nif (file_exists($f)) {\\nis_dir($f) ? @rmdir($f) : @unlink($f);\\nif (file_exists($f) && is_dir($f)) {\\nself::_removeTmpFiles($f, getcwd());\\n}\\n}\\n}\\n\\n@rmdir($temp);\\nclearstatcache();\\nchdir($origdir);\\n}\\n}\\n\\nExtract_Phar::go();\\n__HALT_COMPIL"""		1832613	0					
ANR	1832659	IdentifierDeclType	const char [ ]		1832613	0					
ANR	1832660	Identifier	newstub3_1		1832613	1					
ANR	1832661	AssignmentExpression	"newstub3_1 [ ] = ""ART;\\n}\\n}\\n\\nstatic function tmpdir()\\n{\\nif (strpos(PHP_OS, 'WIN') !== false) {\\nif ($var = getenv('TMP') ? getenv('TMP') : getenv('TEMP')) {\\nreturn $var;\\n}\\nif (is_dir('/temp') || mkdir('/temp')) {\\nreturn realpath('/temp');\\n}\\nreturn false;\\n}\\nif ($var = getenv('TMPDIR')) {\\nreturn $var;\\n}\\nreturn realpath('/tmp');\\n}\\n\\nstatic function _unpack($m)\\n{\\n$info = unpack('V', substr($m, 0, 4));\\n $l = unpack('V', substr($m, 10, 4));\\n$m = substr($m, 14 + $l[1]);\\n$s = unpack('V', substr($m, 0, 4));\\n$o = 0;\\n$start = 4 + $s[1];\\n$ret['c'] = 0;\\n\\nfor ($i = 0; $i < $info[1]; $i++) {\\n $len = unpack('V', substr($m, $start, 4));\\n$start += 4;\\n $savepath = substr($m, $start, $len[1]);\\n$start += $len[1];\\n   $ret['m'][$savepath] = array_values(unpack('Va/Vb/Vc/Vd/Ve/Vf', substr($m, $start, 24)));\\n$ret['m'][$savepath][3] = sprintf('%u', $ret['m'][$savepath][3]\\n& 0xffffffff);\\n$ret['m'][$savepath][7] = $o;\\n$o += $ret['m'][$savepath][2];\\n$start += 24 + $ret['m'][$savepath][5];\\n$ret['c'] |= $ret['m'][$savepath][4] & self::MASK;\\n}\\nreturn $ret;\\n}\\n\\nstatic function extractFile($path, $entry, $fp)\\n{\\n$data = '';\\n$c = $entry[2];\\n\\nwhile ($c) {\\nif ($c < 8192) {\\n$data .= @fread($fp, $c);\\n$c = 0;\\n} else {\\n$c -= 8192;\\n$data .= @fread($fp, 8192);\\n}\\n}\\n\\nif ($entry[4] & self::GZ) {\\n$data = gzinflate($data);\\n} elseif ($entry[4] & self::BZ2) {\\n$data = bzdecompress($data);\\n}\\n\\nif (strlen($data) != $entry[0]) {\\ndie(\\""Invalid internal .phar file (size error \\"" . strlen($data) . \\"" != \\"" .\\n$stat[7] . \\"")\\"");\\n}\\n\\nif ($entry[3] != sprintf(\\""%u\\"", crc32((binary)$data) & 0xffffffff)) {\\ndie(\\""Invalid internal .phar file (checksum error)\\"");\\n}\\n\\nreturn $data;\\n}\\n\\nstatic function _removeTmpFiles($temp, $origdir)\\n{\\nchdir($temp);\\n\\nforeach (glob('*') as $f) {\\nif (file_exists($f)) {\\nis_dir($f) ? @rmdir($f) : @unlink($f);\\nif (file_exists($f) && is_dir($f)) {\\nself::_removeTmpFiles($f, getcwd());\\n}\\n}\\n}\\n\\n@rmdir($temp);\\nclearstatcache();\\nchdir($origdir);\\n}\\n}\\n\\nExtract_Phar::go();\\n__HALT_COMPIL"""		1832613	2		=			
ANR	1832662	Identifier	newstub3_1		1832613	0					
ANR	1832663	PrimaryExpression	"""ART;\\n}\\n}\\n\\nstatic function tmpdir()\\n{\\nif (strpos(PHP_OS, 'WIN') !== false) {\\nif ($var = getenv('TMP') ? getenv('TMP') : getenv('TEMP')) {\\nreturn $var;\\n}\\nif (is_dir('/temp') || mkdir('/temp')) {\\nreturn realpath('/temp');\\n}\\nreturn false;\\n}\\nif ($var = getenv('TMPDIR')) {\\nreturn $var;\\n}\\nreturn realpath('/tmp');\\n}\\n\\nstatic function _unpack($m)\\n{\\n$info = unpack('V', substr($m, 0, 4));\\n $l = unpack('V', substr($m, 10, 4));\\n$m = substr($m, 14 + $l[1]);\\n$s = unpack('V', substr($m, 0, 4));\\n$o = 0;\\n$start = 4 + $s[1];\\n$ret['c'] = 0;\\n\\nfor ($i = 0; $i < $info[1]; $i++) {\\n $len = unpack('V', substr($m, $start, 4));\\n$start += 4;\\n $savepath = substr($m, $start, $len[1]);\\n$start += $len[1];\\n   $ret['m'][$savepath] = array_values(unpack('Va/Vb/Vc/Vd/Ve/Vf', substr($m, $start, 24)));\\n$ret['m'][$savepath][3] = sprintf('%u', $ret['m'][$savepath][3]\\n& 0xffffffff);\\n$ret['m'][$savepath][7] = $o;\\n$o += $ret['m'][$savepath][2];\\n$start += 24 + $ret['m'][$savepath][5];\\n$ret['c'] |= $ret['m'][$savepath][4] & self::MASK;\\n}\\nreturn $ret;\\n}\\n\\nstatic function extractFile($path, $entry, $fp)\\n{\\n$data = '';\\n$c = $entry[2];\\n\\nwhile ($c) {\\nif ($c < 8192) {\\n$data .= @fread($fp, $c);\\n$c = 0;\\n} else {\\n$c -= 8192;\\n$data .= @fread($fp, 8192);\\n}\\n}\\n\\nif ($entry[4] & self::GZ) {\\n$data = gzinflate($data);\\n} elseif ($entry[4] & self::BZ2) {\\n$data = bzdecompress($data);\\n}\\n\\nif (strlen($data) != $entry[0]) {\\ndie(\\""Invalid internal .phar file (size error \\"" . strlen($data) . \\"" != \\"" .\\n$stat[7] . \\"")\\"");\\n}\\n\\nif ($entry[3] != sprintf(\\""%u\\"", crc32((binary)$data) & 0xffffffff)) {\\ndie(\\""Invalid internal .phar file (checksum error)\\"");\\n}\\n\\nreturn $data;\\n}\\n\\nstatic function _removeTmpFiles($temp, $origdir)\\n{\\nchdir($temp);\\n\\nforeach (glob('*') as $f) {\\nif (file_exists($f)) {\\nis_dir($f) ? @rmdir($f) : @unlink($f);\\nif (file_exists($f) && is_dir($f)) {\\nself::_removeTmpFiles($f, getcwd());\\n}\\n}\\n}\\n\\n@rmdir($temp);\\nclearstatcache();\\nchdir($origdir);\\n}\\n}\\n\\nExtract_Phar::go();\\n__HALT_COMPIL"""		1832613	1					
ANR	1832664	Statement	static	29:1:8468:8473	1832613	12	True				
ANR	1832665	IdentifierDeclStatement	"const char newstub3_2 [ ] = ""ER(); ?>"" ;"	29:8:8475:8511	1832613	13	True				
ANR	1832666	IdentifierDecl	"newstub3_2 [ ] = ""ER(); ?>"""		1832613	0					
ANR	1832667	IdentifierDeclType	const char [ ]		1832613	0					
ANR	1832668	Identifier	newstub3_2		1832613	1					
ANR	1832669	AssignmentExpression	"newstub3_2 [ ] = ""ER(); ?>"""		1832613	2		=			
ANR	1832670	Identifier	newstub3_2		1832613	0					
ANR	1832671	PrimaryExpression	"""ER(); ?>"""		1832613	1					
ANR	1832672	Statement	static	31:1:8515:8520	1832613	14	True				
ANR	1832673	IdentifierDeclStatement	const int newstub_len = 6665 ;	31:8:8522:8550	1832613	15	True				
ANR	1832674	IdentifierDecl	newstub_len = 6665		1832613	0					
ANR	1832675	IdentifierDeclType	const int		1832613	0					
ANR	1832676	Identifier	newstub_len		1832613	1					
ANR	1832677	AssignmentExpression	newstub_len = 6665		1832613	2		=			
ANR	1832678	Identifier	newstub_len		1832613	0					
ANR	1832679	PrimaryExpression	6665		1832613	1					
ANR	1832680	ReturnStatement	"return strpprintf ( name_len + web_len + newstub_len , ""%s%s%s%s%s%s%d%s%s%s"" , newstub0 , web , newstub1_0 , newstub1_1 , index_php , newstub2 , name_len + web_len + newstub_len , newstub3_0 , newstub3_1 , newstub3_2 ) ;"	33:1:8554:8759	1832613	16	True				
ANR	1832681	CallExpression	"strpprintf ( name_len + web_len + newstub_len , ""%s%s%s%s%s%s%d%s%s%s"" , newstub0 , web , newstub1_0 , newstub1_1 , index_php , newstub2 , name_len + web_len + newstub_len , newstub3_0 , newstub3_1 , newstub3_2 )"		1832613	0					
ANR	1832682	Callee	strpprintf		1832613	0					
ANR	1832683	Identifier	strpprintf		1832613	0					
ANR	1832684	ArgumentList	name_len + web_len + newstub_len		1832613	1					
ANR	1832685	Argument	name_len + web_len + newstub_len		1832613	0					
ANR	1832686	AdditiveExpression	name_len + web_len + newstub_len		1832613	0		+			
ANR	1832687	Identifier	name_len		1832613	0					
ANR	1832688	AdditiveExpression	web_len + newstub_len		1832613	1		+			
ANR	1832689	Identifier	web_len		1832613	0					
ANR	1832690	Identifier	newstub_len		1832613	1					
ANR	1832691	Argument	"""%s%s%s%s%s%s%d%s%s%s"""		1832613	1					
ANR	1832692	PrimaryExpression	"""%s%s%s%s%s%s%d%s%s%s"""		1832613	0					
ANR	1832693	Argument	newstub0		1832613	2					
ANR	1832694	Identifier	newstub0		1832613	0					
ANR	1832695	Argument	web		1832613	3					
ANR	1832696	Identifier	web		1832613	0					
ANR	1832697	Argument	newstub1_0		1832613	4					
ANR	1832698	Identifier	newstub1_0		1832613	0					
ANR	1832699	Argument	newstub1_1		1832613	5					
ANR	1832700	Identifier	newstub1_1		1832613	0					
ANR	1832701	Argument	index_php		1832613	6					
ANR	1832702	Identifier	index_php		1832613	0					
ANR	1832703	Argument	newstub2		1832613	7					
ANR	1832704	Identifier	newstub2		1832613	0					
ANR	1832705	Argument	name_len + web_len + newstub_len		1832613	8					
ANR	1832706	AdditiveExpression	name_len + web_len + newstub_len		1832613	0		+			
ANR	1832707	Identifier	name_len		1832613	0					
ANR	1832708	AdditiveExpression	web_len + newstub_len		1832613	1		+			
ANR	1832709	Identifier	web_len		1832613	0					
ANR	1832710	Identifier	newstub_len		1832613	1					
ANR	1832711	Argument	newstub3_0		1832613	9					
ANR	1832712	Identifier	newstub3_0		1832613	0					
ANR	1832713	Argument	newstub3_1		1832613	10					
ANR	1832714	Identifier	newstub3_1		1832613	0					
ANR	1832715	Argument	newstub3_2		1832613	11					
ANR	1832716	Identifier	newstub3_2		1832613	0					
ANR	1832717	ReturnType	static inline zend_string *		1832613	1					
ANR	1832718	Identifier	phar_get_stub		1832613	2					
ANR	1832719	ParameterList	"const char * index_php , const char * web , const int name_len , const int web_len"		1832613	3					
ANR	1832720	Parameter	const char * index_php	21:41:1185:1205	1832613	0	True				
ANR	1832721	ParameterType	const char *		1832613	0					
ANR	1832722	Identifier	index_php		1832613	1					
ANR	1832723	Parameter	const char * web	21:64:1208:1222	1832613	1	True				
ANR	1832724	ParameterType	const char *		1832613	0					
ANR	1832725	Identifier	web		1832613	1					
ANR	1832726	Parameter	const int name_len	21:81:1225:1242	1832613	2	True				
ANR	1832727	ParameterType	const int		1832613	0					
ANR	1832728	Identifier	name_len		1832613	1					
ANR	1832729	Parameter	const int web_len	21:101:1245:1261	1832613	3	True				
ANR	1832730	ParameterType	const int		1832613	0					
ANR	1832731	Identifier	web_len		1832613	1					
ANR	1832732	CFGEntryNode	ENTRY		1832613		True				
ANR	1832733	CFGExitNode	EXIT		1832613		True				
ANR	1832734	Symbol	newstub3_1		1832613						
ANR	1832735	Symbol	newstub3_0		1832613						
ANR	1832736	Symbol	newstub1_1		1832613						
ANR	1832737	Symbol	newstub1_0		1832613						
ANR	1832738	Symbol	newstub_len		1832613						
ANR	1832739	Symbol	index_php		1832613						
ANR	1832740	Symbol	strpprintf		1832613						
ANR	1832741	Symbol	newstub3_2		1832613						
ANR	1832742	Symbol	newstub0		1832613						
ANR	1832743	Symbol	web		1832613						
ANR	1832744	Symbol	newstub2		1832613						
ANR	1832745	Symbol	web_len		1832613						
ANR	1832746	Symbol	name_len		1832613						
