command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1268885	File	data/converged/CVE-2015-8617_php-src/ext_mbstring_ucgendat_ucgendat.c								
ANR	1268886	DeclStmt									
ANR	1268887	Decl							ac_uint2	ac_uint2 [ 2 ]	hdr
ANR	1268888	ClassDef	<unnamed>	69:8:2464:2511							
ANR	1268889	DeclStmt									
ANR	1268890	Decl							char	char *	name
ANR	1268891	DeclStmt									
ANR	1268892	Decl							int	int	len
ANR	1268893	DeclStmt									
ANR	1268894	Decl									_prop_t
ANR	1268895	DeclStmt									
ANR	1268896	Decl							_prop_t	_prop_t [ NUMPROPS ]	props
ANR	1268897	ClassDef	<unnamed>	100:8:3540:3620							
ANR	1268898	DeclStmt									
ANR	1268899	Decl							ac_uint4	ac_uint4 *	ranges
ANR	1268900	DeclStmt									
ANR	1268901	Decl							ac_uint2	ac_uint2	used
ANR	1268902	DeclStmt									
ANR	1268903	Decl							ac_uint2	ac_uint2	size
ANR	1268904	DeclStmt									
ANR	1268905	Decl									_ranges_t
ANR	1268906	DeclStmt									
ANR	1268907	Decl							_ranges_t	_ranges_t [ NUMPROPS ]	proptbl
ANR	1268908	DeclStmt									
ANR	1268909	Decl							ac_uint2	ac_uint2 [ NEEDPROPS ]	propcnt
ANR	1268910	DeclStmt									
ANR	1268911	Decl							ac_uint4	ac_uint4 [ 64 ]	dectmp
ANR	1268912	DeclStmt									
ANR	1268913	Decl							ac_uint4	ac_uint4	dectmp_size
ANR	1268914	ClassDef	<unnamed>	120:8:3943:4042							
ANR	1268915	DeclStmt									
ANR	1268916	Decl							ac_uint4	ac_uint4	code
ANR	1268917	DeclStmt									
ANR	1268918	Decl							ac_uint2	ac_uint2	size
ANR	1268919	DeclStmt									
ANR	1268920	Decl							ac_uint2	ac_uint2	used
ANR	1268921	DeclStmt									
ANR	1268922	Decl							ac_uint4	ac_uint4 *	decomp
ANR	1268923	DeclStmt									
ANR	1268924	Decl									_decomp_t
ANR	1268925	DeclStmt									
ANR	1268926	Decl							_decomp_t	_decomp_t *	decomps
ANR	1268927	DeclStmt									
ANR	1268928	Decl							ac_uint4	ac_uint4	decomps_used
ANR	1268929	DeclStmt									
ANR	1268930	Decl							ac_uint4	ac_uint4	decomps_size
ANR	1268931	DeclStmt									
ANR	1268932	Decl							_decomp_t	_decomp_t *	kdecomps
ANR	1268933	DeclStmt									
ANR	1268934	Decl							ac_uint4	ac_uint4	kdecomps_used
ANR	1268935	DeclStmt									
ANR	1268936	Decl							ac_uint4	ac_uint4	kdecomps_size
ANR	1268937	DeclStmt									
ANR	1268938	Decl							ac_uint4	ac_uint4 [ 8192 ]	compexs
ANR	1268939	ClassDef	<unnamed>	150:8:4705:4802							
ANR	1268940	DeclStmt									
ANR	1268941	Decl							ac_uint4	ac_uint4	comp
ANR	1268942	DeclStmt									
ANR	1268943	Decl							ac_uint4	ac_uint4	count
ANR	1268944	DeclStmt									
ANR	1268945	Decl							ac_uint4	ac_uint4	code1
ANR	1268946	DeclStmt									
ANR	1268947	Decl							ac_uint4	ac_uint4	code2
ANR	1268948	DeclStmt									
ANR	1268949	Decl									_comp_t
ANR	1268950	DeclStmt									
ANR	1268951	Decl							_comp_t	_comp_t *	comps
ANR	1268952	DeclStmt									
ANR	1268953	Decl							ac_uint4	ac_uint4	comps_used
ANR	1268954	ClassDef	<unnamed>	165:8:4941:5019							
ANR	1268955	DeclStmt									
ANR	1268956	Decl							ac_uint4	ac_uint4	key
ANR	1268957	DeclStmt									
ANR	1268958	Decl							ac_uint4	ac_uint4	other1
ANR	1268959	DeclStmt									
ANR	1268960	Decl							ac_uint4	ac_uint4	other2
ANR	1268961	DeclStmt									
ANR	1268962	Decl									_case_t
ANR	1268963	DeclStmt									
ANR	1268964	Decl							_case_t	_case_t *	upper
ANR	1268965	DeclStmt									
ANR	1268966	Decl							_case_t	_case_t *	lower
ANR	1268967	DeclStmt									
ANR	1268968	Decl							_case_t	_case_t *	title
ANR	1268969	DeclStmt									
ANR	1268970	Decl							ac_uint4	ac_uint4	upper_used
ANR	1268971	DeclStmt									
ANR	1268972	Decl							ac_uint4	ac_uint4	upper_size
ANR	1268973	DeclStmt									
ANR	1268974	Decl							ac_uint4	ac_uint4	lower_used
ANR	1268975	DeclStmt									
ANR	1268976	Decl							ac_uint4	ac_uint4	lower_size
ANR	1268977	DeclStmt									
ANR	1268978	Decl							ac_uint4	ac_uint4	title_used
ANR	1268979	DeclStmt									
ANR	1268980	Decl							ac_uint4	ac_uint4	title_size
ANR	1268981	DeclStmt									
ANR	1268982	Decl							ac_uint4	ac_uint4 [ 3 ]	cases
ANR	1268983	DeclStmt									
ANR	1268984	Decl							ac_uint4	ac_uint4 *	ccl
ANR	1268985	DeclStmt									
ANR	1268986	Decl							ac_uint4	ac_uint4	ccl_used
ANR	1268987	DeclStmt									
ANR	1268988	Decl							ac_uint4	ac_uint4	ccl_size
ANR	1268989	ClassDef	<unnamed>	196:8:5546:5604							
ANR	1268990	DeclStmt									
ANR	1268991	Decl							ac_uint4	ac_uint4	code
ANR	1268992	DeclStmt									
ANR	1268993	Decl							ac_uint4	ac_uint4	idx
ANR	1268994	DeclStmt									
ANR	1268995	Decl									_codeidx_t
ANR	1268996	ClassDef	<unnamed>	201:8:5615:5676							
ANR	1268997	DeclStmt									
ANR	1268998	Decl							short	short	numerator
ANR	1268999	DeclStmt									
ANR	1269000	Decl							short	short	denominator
ANR	1269001	DeclStmt									
ANR	1269002	Decl									_num_t
ANR	1269003	DeclStmt									
ANR	1269004	Decl							_codeidx_t	_codeidx_t *	ncodes
ANR	1269005	DeclStmt									
ANR	1269006	Decl							ac_uint4	ac_uint4	ncodes_used
ANR	1269007	DeclStmt									
ANR	1269008	Decl							ac_uint4	ac_uint4	ncodes_size
ANR	1269009	DeclStmt									
ANR	1269010	Decl							_num_t	_num_t *	nums
ANR	1269011	DeclStmt									
ANR	1269012	Decl							ac_uint4	ac_uint4	nums_used
ANR	1269013	DeclStmt									
ANR	1269014	Decl							ac_uint4	ac_uint4	nums_size
ANR	1269015	DeclStmt									
ANR	1269016	Decl							_num_t	_num_t *	nums
ANR	1269017	DeclStmt									
ANR	1269018	Decl							ac_uint4	ac_uint4	nums_used
ANR	1269019	DeclStmt									
ANR	1269020	Decl							ac_uint4	ac_uint4	nums_size
ANR	1269021	Function	add_range	224:0:6012:8497							
ANR	1269022	FunctionDef	"add_range (ac_uint4 start , ac_uint4 end , char * p1 , char * p2)"		1269021	0					
ANR	1269023	CompoundStatement		226:0:6084:8497	1269021	0					
ANR	1269024	IdentifierDeclStatement	"int i , j , k , len ;"	227:4:6090:6106	1269021	0	True				
ANR	1269025	IdentifierDecl	i		1269021	0					
ANR	1269026	IdentifierDeclType	int		1269021	0					
ANR	1269027	Identifier	i		1269021	1					
ANR	1269028	IdentifierDecl	j		1269021	1					
ANR	1269029	IdentifierDeclType	int		1269021	0					
ANR	1269030	Identifier	j		1269021	1					
ANR	1269031	IdentifierDecl	k		1269021	2					
ANR	1269032	IdentifierDeclType	int		1269021	0					
ANR	1269033	Identifier	k		1269021	1					
ANR	1269034	IdentifierDecl	len		1269021	3					
ANR	1269035	IdentifierDeclType	int		1269021	0					
ANR	1269036	Identifier	len		1269021	1					
ANR	1269037	IdentifierDeclStatement	_ranges_t * rlp ;	228:4:6112:6126	1269021	1	True				
ANR	1269038	IdentifierDecl	* rlp		1269021	0					
ANR	1269039	IdentifierDeclType	_ranges_t *		1269021	0					
ANR	1269040	Identifier	rlp		1269021	1					
ANR	1269041	IdentifierDeclStatement	char * name ;	229:4:6132:6142	1269021	2	True				
ANR	1269042	IdentifierDecl	* name		1269021	0					
ANR	1269043	IdentifierDeclType	char *		1269021	0					
ANR	1269044	Identifier	name		1269021	1					
ANR	1269045	ForStatement	for ( k = 0 ; k < 2 ; k ++ )		1269021	3					
ANR	1269046	ForInit	k = 0 ;	231:9:6154:6159	1269021	0	True				
ANR	1269047	AssignmentExpression	k = 0		1269021	0		=			
ANR	1269048	Identifier	k		1269021	0					
ANR	1269049	PrimaryExpression	0		1269021	1					
ANR	1269050	Condition	k < 2	231:16:6161:6165	1269021	1	True				
ANR	1269051	RelationalExpression	k < 2		1269021	0		<			
ANR	1269052	Identifier	k		1269021	0					
ANR	1269053	PrimaryExpression	2		1269021	1					
ANR	1269054	PostIncDecOperationExpression	k ++	231:23:6168:6170	1269021	2	True				
ANR	1269055	Identifier	k		1269021	0					
ANR	1269056	IncDec	++		1269021	1					
ANR	1269057	CompoundStatement		6:28:88:88	1269021	3					
ANR	1269058	IfStatement	if ( k == 0 )		1269021	0					
ANR	1269059	Condition	k == 0	232:12:6187:6192	1269021	0	True				
ANR	1269060	EqualityExpression	k == 0		1269021	0		==			
ANR	1269061	Identifier	k		1269021	0					
ANR	1269062	PrimaryExpression	0		1269021	1					
ANR	1269063	CompoundStatement		7:20:110:110	1269021	1					
ANR	1269064	ExpressionStatement	name = p1	233:12:6209:6218	1269021	0	True				
ANR	1269065	AssignmentExpression	name = p1		1269021	0		=			
ANR	1269066	Identifier	name		1269021	0					
ANR	1269067	Identifier	p1		1269021	1					
ANR	1269068	ExpressionStatement	len = 2	234:12:6232:6239	1269021	1	True				
ANR	1269069	AssignmentExpression	len = 2		1269021	0		=			
ANR	1269070	Identifier	len		1269021	0					
ANR	1269071	PrimaryExpression	2		1269021	1					
ANR	1269072	ElseStatement	else		1269021	0					
ANR	1269073	CompoundStatement		10:15:171:171	1269021	0					
ANR	1269074	IfStatement	if ( p2 == 0 )		1269021	0					
ANR	1269075	Condition	p2 == 0	236:16:6274:6280	1269021	0	True				
ANR	1269076	EqualityExpression	p2 == 0		1269021	0		==			
ANR	1269077	Identifier	p2		1269021	0					
ANR	1269078	PrimaryExpression	0		1269021	1					
ANR	1269079	BreakStatement	break ;	237:14:6297:6302	1269021	1	True				
ANR	1269080	ExpressionStatement	name = p2	239:12:6317:6326	1269021	1	True				
ANR	1269081	AssignmentExpression	name = p2		1269021	0		=			
ANR	1269082	Identifier	name		1269021	0					
ANR	1269083	Identifier	p2		1269021	1					
ANR	1269084	ExpressionStatement	len = 1	240:12:6340:6347	1269021	2	True				
ANR	1269085	AssignmentExpression	len = 1		1269021	0		=			
ANR	1269086	Identifier	len		1269021	0					
ANR	1269087	PrimaryExpression	1		1269021	1					
ANR	1269088	ForStatement	for ( i = 0 ; i < NUMPROPS ; i ++ )		1269021	1					
ANR	1269089	ForInit	i = 0 ;	243:13:6373:6378	1269021	0	True				
ANR	1269090	AssignmentExpression	i = 0		1269021	0		=			
ANR	1269091	Identifier	i		1269021	0					
ANR	1269092	PrimaryExpression	0		1269021	1					
ANR	1269093	Condition	i < NUMPROPS	243:20:6380:6391	1269021	1	True				
ANR	1269094	RelationalExpression	i < NUMPROPS		1269021	0		<			
ANR	1269095	Identifier	i		1269021	0					
ANR	1269096	Identifier	NUMPROPS		1269021	1					
ANR	1269097	PostIncDecOperationExpression	i ++	243:34:6394:6396	1269021	2	True				
ANR	1269098	Identifier	i		1269021	0					
ANR	1269099	IncDec	++		1269021	1					
ANR	1269100	CompoundStatement		18:39:314:314	1269021	3					
ANR	1269101	IfStatement	"if ( props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0 )"		1269021	0					
ANR	1269102	Condition	"props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0"	244:16:6417:6476	1269021	0	True				
ANR	1269103	AndExpression	"props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0"		1269021	0		&&			
ANR	1269104	EqualityExpression	props [ i ] . len == len		1269021	0		==			
ANR	1269105	MemberAccess	props [ i ] . len		1269021	0					
ANR	1269106	ArrayIndexing	props [ i ]		1269021	0					
ANR	1269107	Identifier	props		1269021	0					
ANR	1269108	Identifier	i		1269021	1					
ANR	1269109	Identifier	len		1269021	1					
ANR	1269110	Identifier	len		1269021	1					
ANR	1269111	EqualityExpression	"memcmp ( props [ i ] . name , name , len ) == 0"		1269021	1		==			
ANR	1269112	CallExpression	"memcmp ( props [ i ] . name , name , len )"		1269021	0					
ANR	1269113	Callee	memcmp		1269021	0					
ANR	1269114	Identifier	memcmp		1269021	0					
ANR	1269115	ArgumentList	props [ i ] . name		1269021	1					
ANR	1269116	Argument	props [ i ] . name		1269021	0					
ANR	1269117	MemberAccess	props [ i ] . name		1269021	0					
ANR	1269118	ArrayIndexing	props [ i ]		1269021	0					
ANR	1269119	Identifier	props		1269021	0					
ANR	1269120	Identifier	i		1269021	1					
ANR	1269121	Identifier	name		1269021	1					
ANR	1269122	Argument	name		1269021	1					
ANR	1269123	Identifier	name		1269021	0					
ANR	1269124	Argument	len		1269021	2					
ANR	1269125	Identifier	len		1269021	0					
ANR	1269126	PrimaryExpression	0		1269021	1					
ANR	1269127	BreakStatement	break ;	245:14:6493:6498	1269021	1	True				
ANR	1269128	IfStatement	if ( i == NUMPROPS )		1269021	2					
ANR	1269129	Condition	i == NUMPROPS	248:12:6523:6535	1269021	0	True				
ANR	1269130	EqualityExpression	i == NUMPROPS		1269021	0		==			
ANR	1269131	Identifier	i		1269021	0					
ANR	1269132	Identifier	NUMPROPS		1269021	1					
ANR	1269133	ContinueStatement	continue ;	249:10:6548:6556	1269021	1	True				
ANR	1269134	ExpressionStatement	rlp = & proptbl [ i ]	251:8:6567:6584	1269021	3	True				
ANR	1269135	AssignmentExpression	rlp = & proptbl [ i ]		1269021	0		=			
ANR	1269136	Identifier	rlp		1269021	0					
ANR	1269137	UnaryOperationExpression	& proptbl [ i ]		1269021	1					
ANR	1269138	UnaryOperator	&		1269021	0					
ANR	1269139	ArrayIndexing	proptbl [ i ]		1269021	1					
ANR	1269140	Identifier	proptbl		1269021	0					
ANR	1269141	Identifier	i		1269021	1					
ANR	1269142	IfStatement	if ( rlp -> used == rlp -> size )		1269021	4					
ANR	1269143	Condition	rlp -> used == rlp -> size	256:12:6669:6690	1269021	0	True				
ANR	1269144	EqualityExpression	rlp -> used == rlp -> size		1269021	0		==			
ANR	1269145	PtrMemberAccess	rlp -> used		1269021	0					
ANR	1269146	Identifier	rlp		1269021	0					
ANR	1269147	Identifier	used		1269021	1					
ANR	1269148	PtrMemberAccess	rlp -> size		1269021	1					
ANR	1269149	Identifier	rlp		1269021	0					
ANR	1269150	Identifier	size		1269021	1					
ANR	1269151	CompoundStatement		31:36:608:608	1269021	1					
ANR	1269152	IfStatement	if ( rlp -> size == 0 )		1269021	0					
ANR	1269153	Condition	rlp -> size == 0	257:16:6711:6724	1269021	0	True				
ANR	1269154	EqualityExpression	rlp -> size == 0		1269021	0		==			
ANR	1269155	PtrMemberAccess	rlp -> size		1269021	0					
ANR	1269156	Identifier	rlp		1269021	0					
ANR	1269157	Identifier	size		1269021	1					
ANR	1269158	PrimaryExpression	0		1269021	1					
ANR	1269159	ExpressionStatement	rlp -> ranges = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )	258:14:6741:6815	1269021	1	True				
ANR	1269160	AssignmentExpression	rlp -> ranges = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )		1269021	0		=			
ANR	1269161	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269162	Identifier	rlp		1269021	0					
ANR	1269163	Identifier	ranges		1269021	1					
ANR	1269164	CastExpression	( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )		1269021	1					
ANR	1269165	CastTarget	ac_uint4 *		1269021	0					
ANR	1269166	CallExpression	malloc ( sizeof ( ac_uint4 ) << 3 )		1269021	1					
ANR	1269167	Callee	malloc		1269021	0					
ANR	1269168	Identifier	malloc		1269021	0					
ANR	1269169	ArgumentList	sizeof ( ac_uint4 ) << 3		1269021	1					
ANR	1269170	Argument	sizeof ( ac_uint4 ) << 3		1269021	0					
ANR	1269171	ShiftExpression	sizeof ( ac_uint4 ) << 3		1269021	0		<<			
ANR	1269172	SizeofExpression	sizeof ( ac_uint4 )		1269021	0					
ANR	1269173	Sizeof	sizeof		1269021	0					
ANR	1269174	SizeofOperand	ac_uint4		1269021	1					
ANR	1269175	PrimaryExpression	3		1269021	1					
ANR	1269176	ElseStatement	else		1269021	0					
ANR	1269177	ExpressionStatement	"rlp -> ranges = ( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"	261:14:6848:6984	1269021	0	True				
ANR	1269178	AssignmentExpression	"rlp -> ranges = ( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		1269021	0		=			
ANR	1269179	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269180	Identifier	rlp		1269021	0					
ANR	1269181	Identifier	ranges		1269021	1					
ANR	1269182	CastExpression	"( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		1269021	1					
ANR	1269183	CastTarget	ac_uint4 *		1269021	0					
ANR	1269184	CallExpression	"realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		1269021	1					
ANR	1269185	Callee	realloc		1269021	0					
ANR	1269186	Identifier	realloc		1269021	0					
ANR	1269187	ArgumentList	( char * ) rlp -> ranges		1269021	1					
ANR	1269188	Argument	( char * ) rlp -> ranges		1269021	0					
ANR	1269189	CastExpression	( char * ) rlp -> ranges		1269021	0					
ANR	1269190	CastTarget	char *		1269021	0					
ANR	1269191	PtrMemberAccess	rlp -> ranges		1269021	1					
ANR	1269192	Identifier	rlp		1269021	0					
ANR	1269193	Identifier	ranges		1269021	1					
ANR	1269194	Argument	sizeof ( ac_uint4 ) * ( rlp -> size + 8 )		1269021	1					
ANR	1269195	MultiplicativeExpression	sizeof ( ac_uint4 ) * ( rlp -> size + 8 )		1269021	0		*			
ANR	1269196	SizeofExpression	sizeof ( ac_uint4 )		1269021	0					
ANR	1269197	Sizeof	sizeof		1269021	0					
ANR	1269198	SizeofOperand	ac_uint4		1269021	1					
ANR	1269199	AdditiveExpression	rlp -> size + 8		1269021	1		+			
ANR	1269200	PtrMemberAccess	rlp -> size		1269021	0					
ANR	1269201	Identifier	rlp		1269021	0					
ANR	1269202	Identifier	size		1269021	1					
ANR	1269203	PrimaryExpression	8		1269021	1					
ANR	1269204	ExpressionStatement	rlp -> size += 8	264:12:6998:7012	1269021	1	True				
ANR	1269205	AssignmentExpression	rlp -> size += 8		1269021	0		+=			
ANR	1269206	PtrMemberAccess	rlp -> size		1269021	0					
ANR	1269207	Identifier	rlp		1269021	0					
ANR	1269208	Identifier	size		1269021	1					
ANR	1269209	PrimaryExpression	8		1269021	1					
ANR	1269210	IfStatement	if ( rlp -> used == 0 )		1269021	5					
ANR	1269211	Condition	rlp -> used == 0	271:12:7156:7169	1269021	0	True				
ANR	1269212	EqualityExpression	rlp -> used == 0		1269021	0		==			
ANR	1269213	PtrMemberAccess	rlp -> used		1269021	0					
ANR	1269214	Identifier	rlp		1269021	0					
ANR	1269215	Identifier	used		1269021	1					
ANR	1269216	PrimaryExpression	0		1269021	1					
ANR	1269217	CompoundStatement		46:28:1087:1087	1269021	1					
ANR	1269218	ExpressionStatement	rlp -> ranges [ 0 ] = start	272:12:7186:7208	1269021	0	True				
ANR	1269219	AssignmentExpression	rlp -> ranges [ 0 ] = start		1269021	0		=			
ANR	1269220	ArrayIndexing	rlp -> ranges [ 0 ]		1269021	0					
ANR	1269221	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269222	Identifier	rlp		1269021	0					
ANR	1269223	Identifier	ranges		1269021	1					
ANR	1269224	PrimaryExpression	0		1269021	1					
ANR	1269225	Identifier	start		1269021	1					
ANR	1269226	ExpressionStatement	rlp -> ranges [ 1 ] = end	273:12:7222:7242	1269021	1	True				
ANR	1269227	AssignmentExpression	rlp -> ranges [ 1 ] = end		1269021	0		=			
ANR	1269228	ArrayIndexing	rlp -> ranges [ 1 ]		1269021	0					
ANR	1269229	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269230	Identifier	rlp		1269021	0					
ANR	1269231	Identifier	ranges		1269021	1					
ANR	1269232	PrimaryExpression	1		1269021	1					
ANR	1269233	Identifier	end		1269021	1					
ANR	1269234	ExpressionStatement	rlp -> used += 2	274:12:7256:7270	1269021	2	True				
ANR	1269235	AssignmentExpression	rlp -> used += 2		1269021	0		+=			
ANR	1269236	PtrMemberAccess	rlp -> used		1269021	0					
ANR	1269237	Identifier	rlp		1269021	0					
ANR	1269238	Identifier	used		1269021	1					
ANR	1269239	PrimaryExpression	2		1269021	1					
ANR	1269240	ContinueStatement	continue ;	275:12:7284:7292	1269021	3	True				
ANR	1269241	ExpressionStatement	j = rlp -> used - 1	281:8:7397:7414	1269021	6	True				
ANR	1269242	AssignmentExpression	j = rlp -> used - 1		1269021	0		=			
ANR	1269243	Identifier	j		1269021	0					
ANR	1269244	AdditiveExpression	rlp -> used - 1		1269021	1		-			
ANR	1269245	PtrMemberAccess	rlp -> used		1269021	0					
ANR	1269246	Identifier	rlp		1269021	0					
ANR	1269247	Identifier	used		1269021	1					
ANR	1269248	PrimaryExpression	1		1269021	1					
ANR	1269249	IfStatement	if ( start > rlp -> ranges [ j ] )		1269021	7					
ANR	1269250	Condition	start > rlp -> ranges [ j ]	282:12:7428:7449	1269021	0	True				
ANR	1269251	RelationalExpression	start > rlp -> ranges [ j ]		1269021	0		>			
ANR	1269252	Identifier	start		1269021	0					
ANR	1269253	ArrayIndexing	rlp -> ranges [ j ]		1269021	1					
ANR	1269254	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269255	Identifier	rlp		1269021	0					
ANR	1269256	Identifier	ranges		1269021	1					
ANR	1269257	Identifier	j		1269021	1					
ANR	1269258	CompoundStatement		57:36:1367:1367	1269021	1					
ANR	1269259	ExpressionStatement	j = rlp -> used	283:12:7466:7479	1269021	0	True				
ANR	1269260	AssignmentExpression	j = rlp -> used		1269021	0		=			
ANR	1269261	Identifier	j		1269021	0					
ANR	1269262	PtrMemberAccess	rlp -> used		1269021	1					
ANR	1269263	Identifier	rlp		1269021	0					
ANR	1269264	Identifier	used		1269021	1					
ANR	1269265	ExpressionStatement	rlp -> ranges [ j ++ ] = start	284:12:7493:7517	1269021	1	True				
ANR	1269266	AssignmentExpression	rlp -> ranges [ j ++ ] = start		1269021	0		=			
ANR	1269267	ArrayIndexing	rlp -> ranges [ j ++ ]		1269021	0					
ANR	1269268	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269269	Identifier	rlp		1269021	0					
ANR	1269270	Identifier	ranges		1269021	1					
ANR	1269271	PostIncDecOperationExpression	j ++		1269021	1					
ANR	1269272	Identifier	j		1269021	0					
ANR	1269273	IncDec	++		1269021	1					
ANR	1269274	Identifier	start		1269021	1					
ANR	1269275	ExpressionStatement	rlp -> ranges [ j ++ ] = end	285:12:7531:7553	1269021	2	True				
ANR	1269276	AssignmentExpression	rlp -> ranges [ j ++ ] = end		1269021	0		=			
ANR	1269277	ArrayIndexing	rlp -> ranges [ j ++ ]		1269021	0					
ANR	1269278	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269279	Identifier	rlp		1269021	0					
ANR	1269280	Identifier	ranges		1269021	1					
ANR	1269281	PostIncDecOperationExpression	j ++		1269021	1					
ANR	1269282	Identifier	j		1269021	0					
ANR	1269283	IncDec	++		1269021	1					
ANR	1269284	Identifier	end		1269021	1					
ANR	1269285	ExpressionStatement	rlp -> used = j	286:12:7567:7580	1269021	3	True				
ANR	1269286	AssignmentExpression	rlp -> used = j		1269021	0		=			
ANR	1269287	PtrMemberAccess	rlp -> used		1269021	0					
ANR	1269288	Identifier	rlp		1269021	0					
ANR	1269289	Identifier	used		1269021	1					
ANR	1269290	Identifier	j		1269021	1					
ANR	1269291	ContinueStatement	continue ;	287:12:7594:7602	1269021	4	True				
ANR	1269292	ForStatement	for ( i = 0 ; i < rlp -> used && start > rlp -> ranges [ i + 1 ] + 1 ; i += 2 )		1269021	8					
ANR	1269293	ForInit	i = 0 ;	293:13:7698:7703	1269021	0	True				
ANR	1269294	AssignmentExpression	i = 0		1269021	0		=			
ANR	1269295	Identifier	i		1269021	0					
ANR	1269296	PrimaryExpression	0		1269021	1					
ANR	1269297	Condition	i < rlp -> used && start > rlp -> ranges [ i + 1 ] + 1	294:13:7718:7764	1269021	1	True				
ANR	1269298	AndExpression	i < rlp -> used && start > rlp -> ranges [ i + 1 ] + 1		1269021	0		&&			
ANR	1269299	RelationalExpression	i < rlp -> used		1269021	0		<			
ANR	1269300	Identifier	i		1269021	0					
ANR	1269301	PtrMemberAccess	rlp -> used		1269021	1					
ANR	1269302	Identifier	rlp		1269021	0					
ANR	1269303	Identifier	used		1269021	1					
ANR	1269304	RelationalExpression	start > rlp -> ranges [ i + 1 ] + 1		1269021	1		>			
ANR	1269305	Identifier	start		1269021	0					
ANR	1269306	AdditiveExpression	rlp -> ranges [ i + 1 ] + 1		1269021	1		+			
ANR	1269307	ArrayIndexing	rlp -> ranges [ i + 1 ]		1269021	0					
ANR	1269308	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269309	Identifier	rlp		1269021	0					
ANR	1269310	Identifier	ranges		1269021	1					
ANR	1269311	AdditiveExpression	i + 1		1269021	1		+			
ANR	1269312	Identifier	i		1269021	0					
ANR	1269313	PrimaryExpression	1		1269021	1					
ANR	1269314	PrimaryExpression	1		1269021	1					
ANR	1269315	AssignmentExpression	i += 2	294:62:7767:7772	1269021	2	True	+=			
ANR	1269316	Identifier	i		1269021	0					
ANR	1269317	PrimaryExpression	2		1269021	1					
ANR	1269318	ExpressionStatement		294:70:7775:7775	1269021	3	True				
ANR	1269319	IfStatement	if ( rlp -> ranges [ i ] <= start && start <= rlp -> ranges [ i + 1 ] + 1 )		1269021	9					
ANR	1269320	Condition	rlp -> ranges [ i ] <= start && start <= rlp -> ranges [ i + 1 ] + 1	300:12:7968:8025	1269021	0	True				
ANR	1269321	AndExpression	rlp -> ranges [ i ] <= start && start <= rlp -> ranges [ i + 1 ] + 1		1269021	0		&&			
ANR	1269322	RelationalExpression	rlp -> ranges [ i ] <= start		1269021	0		<=			
ANR	1269323	ArrayIndexing	rlp -> ranges [ i ]		1269021	0					
ANR	1269324	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269325	Identifier	rlp		1269021	0					
ANR	1269326	Identifier	ranges		1269021	1					
ANR	1269327	Identifier	i		1269021	1					
ANR	1269328	Identifier	start		1269021	1					
ANR	1269329	RelationalExpression	start <= rlp -> ranges [ i + 1 ] + 1		1269021	1		<=			
ANR	1269330	Identifier	start		1269021	0					
ANR	1269331	AdditiveExpression	rlp -> ranges [ i + 1 ] + 1		1269021	1		+			
ANR	1269332	ArrayIndexing	rlp -> ranges [ i + 1 ]		1269021	0					
ANR	1269333	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269334	Identifier	rlp		1269021	0					
ANR	1269335	Identifier	ranges		1269021	1					
ANR	1269336	AdditiveExpression	i + 1		1269021	1		+			
ANR	1269337	Identifier	i		1269021	0					
ANR	1269338	PrimaryExpression	1		1269021	1					
ANR	1269339	PrimaryExpression	1		1269021	1					
ANR	1269340	CompoundStatement		75:72:1943:1943	1269021	1					
ANR	1269341	ExpressionStatement	rlp -> ranges [ i + 1 ] = end	301:12:8042:8066	1269021	0	True				
ANR	1269342	AssignmentExpression	rlp -> ranges [ i + 1 ] = end		1269021	0		=			
ANR	1269343	ArrayIndexing	rlp -> ranges [ i + 1 ]		1269021	0					
ANR	1269344	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269345	Identifier	rlp		1269021	0					
ANR	1269346	Identifier	ranges		1269021	1					
ANR	1269347	AdditiveExpression	i + 1		1269021	1		+			
ANR	1269348	Identifier	i		1269021	0					
ANR	1269349	PrimaryExpression	1		1269021	1					
ANR	1269350	Identifier	end		1269021	1					
ANR	1269351	ReturnStatement	return ;	302:12:8080:8086	1269021	1	True				
ANR	1269352	ForStatement	for ( j = rlp -> used ; j > i ; j -= 2 )		1269021	10					
ANR	1269353	ForInit	j = rlp -> used ;	308:13:8180:8193	1269021	0	True				
ANR	1269354	AssignmentExpression	j = rlp -> used		1269021	0		=			
ANR	1269355	Identifier	j		1269021	0					
ANR	1269356	PtrMemberAccess	rlp -> used		1269021	1					
ANR	1269357	Identifier	rlp		1269021	0					
ANR	1269358	Identifier	used		1269021	1					
ANR	1269359	Condition	j > i	308:28:8195:8199	1269021	1	True				
ANR	1269360	RelationalExpression	j > i		1269021	0		>			
ANR	1269361	Identifier	j		1269021	0					
ANR	1269362	Identifier	i		1269021	1					
ANR	1269363	AssignmentExpression	j -= 2	308:35:8202:8207	1269021	2	True	-=			
ANR	1269364	Identifier	j		1269021	0					
ANR	1269365	PrimaryExpression	2		1269021	1					
ANR	1269366	CompoundStatement		83:43:2125:2125	1269021	3					
ANR	1269367	ExpressionStatement	rlp -> ranges [ j ] = rlp -> ranges [ j - 2 ]	309:12:8224:8259	1269021	0	True				
ANR	1269368	AssignmentExpression	rlp -> ranges [ j ] = rlp -> ranges [ j - 2 ]		1269021	0		=			
ANR	1269369	ArrayIndexing	rlp -> ranges [ j ]		1269021	0					
ANR	1269370	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269371	Identifier	rlp		1269021	0					
ANR	1269372	Identifier	ranges		1269021	1					
ANR	1269373	Identifier	j		1269021	1					
ANR	1269374	ArrayIndexing	rlp -> ranges [ j - 2 ]		1269021	1					
ANR	1269375	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269376	Identifier	rlp		1269021	0					
ANR	1269377	Identifier	ranges		1269021	1					
ANR	1269378	AdditiveExpression	j - 2		1269021	1		-			
ANR	1269379	Identifier	j		1269021	0					
ANR	1269380	PrimaryExpression	2		1269021	1					
ANR	1269381	ExpressionStatement	rlp -> ranges [ j + 1 ] = rlp -> ranges [ j - 1 ]	310:12:8273:8312	1269021	1	True				
ANR	1269382	AssignmentExpression	rlp -> ranges [ j + 1 ] = rlp -> ranges [ j - 1 ]		1269021	0		=			
ANR	1269383	ArrayIndexing	rlp -> ranges [ j + 1 ]		1269021	0					
ANR	1269384	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269385	Identifier	rlp		1269021	0					
ANR	1269386	Identifier	ranges		1269021	1					
ANR	1269387	AdditiveExpression	j + 1		1269021	1		+			
ANR	1269388	Identifier	j		1269021	0					
ANR	1269389	PrimaryExpression	1		1269021	1					
ANR	1269390	ArrayIndexing	rlp -> ranges [ j - 1 ]		1269021	1					
ANR	1269391	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269392	Identifier	rlp		1269021	0					
ANR	1269393	Identifier	ranges		1269021	1					
ANR	1269394	AdditiveExpression	j - 1		1269021	1		-			
ANR	1269395	Identifier	j		1269021	0					
ANR	1269396	PrimaryExpression	1		1269021	1					
ANR	1269397	ExpressionStatement	rlp -> ranges [ i ] = start	316:8:8409:8431	1269021	11	True				
ANR	1269398	AssignmentExpression	rlp -> ranges [ i ] = start		1269021	0		=			
ANR	1269399	ArrayIndexing	rlp -> ranges [ i ]		1269021	0					
ANR	1269400	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269401	Identifier	rlp		1269021	0					
ANR	1269402	Identifier	ranges		1269021	1					
ANR	1269403	Identifier	i		1269021	1					
ANR	1269404	Identifier	start		1269021	1					
ANR	1269405	ExpressionStatement	rlp -> ranges [ i + 1 ] = end	317:8:8441:8465	1269021	12	True				
ANR	1269406	AssignmentExpression	rlp -> ranges [ i + 1 ] = end		1269021	0		=			
ANR	1269407	ArrayIndexing	rlp -> ranges [ i + 1 ]		1269021	0					
ANR	1269408	PtrMemberAccess	rlp -> ranges		1269021	0					
ANR	1269409	Identifier	rlp		1269021	0					
ANR	1269410	Identifier	ranges		1269021	1					
ANR	1269411	AdditiveExpression	i + 1		1269021	1		+			
ANR	1269412	Identifier	i		1269021	0					
ANR	1269413	PrimaryExpression	1		1269021	1					
ANR	1269414	Identifier	end		1269021	1					
ANR	1269415	ExpressionStatement	rlp -> used += 2	318:8:8475:8489	1269021	13	True				
ANR	1269416	AssignmentExpression	rlp -> used += 2		1269021	0		+=			
ANR	1269417	PtrMemberAccess	rlp -> used		1269021	0					
ANR	1269418	Identifier	rlp		1269021	0					
ANR	1269419	Identifier	used		1269021	1					
ANR	1269420	PrimaryExpression	2		1269021	1					
ANR	1269421	ReturnType	static void		1269021	1					
ANR	1269422	Identifier	add_range		1269021	2					
ANR	1269423	ParameterList	"ac_uint4 start , ac_uint4 end , char * p1 , char * p2"		1269021	3					
ANR	1269424	Parameter	ac_uint4 start	225:10:6034:6047	1269021	0	True				
ANR	1269425	ParameterType	ac_uint4		1269021	0					
ANR	1269426	Identifier	start		1269021	1					
ANR	1269427	Parameter	ac_uint4 end	225:26:6050:6061	1269021	1	True				
ANR	1269428	ParameterType	ac_uint4		1269021	0					
ANR	1269429	Identifier	end		1269021	1					
ANR	1269430	Parameter	char * p1	225:40:6064:6071	1269021	2	True				
ANR	1269431	ParameterType	char *		1269021	0					
ANR	1269432	Identifier	p1		1269021	1					
ANR	1269433	Parameter	char * p2	225:50:6074:6081	1269021	3	True				
ANR	1269434	ParameterType	char *		1269021	0					
ANR	1269435	Identifier	p2		1269021	1					
ANR	1269436	CFGEntryNode	ENTRY		1269021		True				
ANR	1269437	CFGExitNode	EXIT		1269021		True				
ANR	1269438	Symbol	p1		1269021						
ANR	1269439	Symbol	rlp -> size		1269021						
ANR	1269440	Symbol	p2		1269021						
ANR	1269441	Symbol	rlp -> used		1269021						
ANR	1269442	Symbol	rlp -> ranges		1269021						
ANR	1269443	Symbol	* * rlp		1269021						
ANR	1269444	Symbol	realloc		1269021						
ANR	1269445	Symbol	memcmp		1269021						
ANR	1269446	Symbol	len		1269021						
ANR	1269447	Symbol	end		1269021						
ANR	1269448	Symbol	* rlp		1269021						
ANR	1269449	Symbol	malloc		1269021						
ANR	1269450	Symbol	props [ i ] . name		1269021						
ANR	1269451	Symbol	start		1269021						
ANR	1269452	Symbol	proptbl		1269021						
ANR	1269453	Symbol	i		1269021						
ANR	1269454	Symbol	j		1269021						
ANR	1269455	Symbol	NUMPROPS		1269021						
ANR	1269456	Symbol	k		1269021						
ANR	1269457	Symbol	props		1269021						
ANR	1269458	Symbol	* rlp -> ranges		1269021						
ANR	1269459	Symbol	* i		1269021						
ANR	1269460	Symbol	* j		1269021						
ANR	1269461	Symbol	rlp		1269021						
ANR	1269462	Symbol	name		1269021						
ANR	1269463	Symbol	* props		1269021						
ANR	1269464	Symbol	props [ i ] . len		1269021						
ANR	1269465	Function	ordered_range_insert	322:0:8500:11508							
ANR	1269466	FunctionDef	"ordered_range_insert (ac_uint4 c , char * name , int len)"		1269465	0					
ANR	1269467	CompoundStatement		324:0:8566:11508	1269465	0					
ANR	1269468	IdentifierDeclStatement	"int i , j ;"	325:4:8572:8580	1269465	0	True				
ANR	1269469	IdentifierDecl	i		1269465	0					
ANR	1269470	IdentifierDeclType	int		1269465	0					
ANR	1269471	Identifier	i		1269465	1					
ANR	1269472	IdentifierDecl	j		1269465	1					
ANR	1269473	IdentifierDeclType	int		1269465	0					
ANR	1269474	Identifier	j		1269465	1					
ANR	1269475	IdentifierDeclStatement	"ac_uint4 s , e ;"	326:4:8586:8599	1269465	1	True				
ANR	1269476	IdentifierDecl	s		1269465	0					
ANR	1269477	IdentifierDeclType	ac_uint4		1269465	0					
ANR	1269478	Identifier	s		1269465	1					
ANR	1269479	IdentifierDecl	e		1269465	1					
ANR	1269480	IdentifierDeclType	ac_uint4		1269465	0					
ANR	1269481	Identifier	e		1269465	1					
ANR	1269482	IdentifierDeclStatement	_ranges_t * rlp ;	327:4:8605:8619	1269465	2	True				
ANR	1269483	IdentifierDecl	* rlp		1269465	0					
ANR	1269484	IdentifierDeclType	_ranges_t *		1269465	0					
ANR	1269485	Identifier	rlp		1269465	1					
ANR	1269486	IfStatement	if ( len == 0 )		1269465	3					
ANR	1269487	Condition	len == 0	329:8:8630:8637	1269465	0	True				
ANR	1269488	EqualityExpression	len == 0		1269465	0		==			
ANR	1269489	Identifier	len		1269465	0					
ANR	1269490	PrimaryExpression	0		1269465	1					
ANR	1269491	ReturnStatement	return ;	330:6:8646:8652	1269465	1	True				
ANR	1269492	IfStatement	"if ( ( len == 2 && memcmp ( name , ""BN"" , 2 ) == 0 ) || ( len == 3 && ( memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0 ) ) )"		1269465	4					
ANR	1269493	Condition	"( len == 2 && memcmp ( name , ""BN"" , 2 ) == 0 ) || ( len == 3 && ( memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0 ) )"	335:8:8743:9021	1269465	0	True				
ANR	1269494	OrExpression	"( len == 2 && memcmp ( name , ""BN"" , 2 ) == 0 ) || ( len == 3 && ( memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0 ) )"		1269465	0		||			
ANR	1269495	AndExpression	"len == 2 && memcmp ( name , ""BN"" , 2 ) == 0"		1269465	0		&&			
ANR	1269496	EqualityExpression	len == 2		1269465	0		==			
ANR	1269497	Identifier	len		1269465	0					
ANR	1269498	PrimaryExpression	2		1269465	1					
ANR	1269499	EqualityExpression	"memcmp ( name , ""BN"" , 2 ) == 0"		1269465	1		==			
ANR	1269500	CallExpression	"memcmp ( name , ""BN"" , 2 )"		1269465	0					
ANR	1269501	Callee	memcmp		1269465	0					
ANR	1269502	Identifier	memcmp		1269465	0					
ANR	1269503	ArgumentList	name		1269465	1					
ANR	1269504	Argument	name		1269465	0					
ANR	1269505	Identifier	name		1269465	0					
ANR	1269506	Argument	"""BN"""		1269465	1					
ANR	1269507	PrimaryExpression	"""BN"""		1269465	0					
ANR	1269508	Argument	2		1269465	2					
ANR	1269509	PrimaryExpression	2		1269465	0					
ANR	1269510	PrimaryExpression	0		1269465	1					
ANR	1269511	AndExpression	"len == 3 && ( memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0 )"		1269465	1		&&			
ANR	1269512	EqualityExpression	len == 3		1269465	0		==			
ANR	1269513	Identifier	len		1269465	0					
ANR	1269514	PrimaryExpression	3		1269465	1					
ANR	1269515	OrExpression	"memcmp ( name , ""NSM"" , 3 ) == 0 || memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		1269465	1		||			
ANR	1269516	EqualityExpression	"memcmp ( name , ""NSM"" , 3 ) == 0"		1269465	0		==			
ANR	1269517	CallExpression	"memcmp ( name , ""NSM"" , 3 )"		1269465	0					
ANR	1269518	Callee	memcmp		1269465	0					
ANR	1269519	Identifier	memcmp		1269465	0					
ANR	1269520	ArgumentList	name		1269465	1					
ANR	1269521	Argument	name		1269465	0					
ANR	1269522	Identifier	name		1269465	0					
ANR	1269523	Argument	"""NSM"""		1269465	1					
ANR	1269524	PrimaryExpression	"""NSM"""		1269465	0					
ANR	1269525	Argument	3		1269465	2					
ANR	1269526	PrimaryExpression	3		1269465	0					
ANR	1269527	PrimaryExpression	0		1269465	1					
ANR	1269528	OrExpression	"memcmp ( name , ""PDF"" , 3 ) == 0 || memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		1269465	1		||			
ANR	1269529	EqualityExpression	"memcmp ( name , ""PDF"" , 3 ) == 0"		1269465	0		==			
ANR	1269530	CallExpression	"memcmp ( name , ""PDF"" , 3 )"		1269465	0					
ANR	1269531	Callee	memcmp		1269465	0					
ANR	1269532	Identifier	memcmp		1269465	0					
ANR	1269533	ArgumentList	name		1269465	1					
ANR	1269534	Argument	name		1269465	0					
ANR	1269535	Identifier	name		1269465	0					
ANR	1269536	Argument	"""PDF"""		1269465	1					
ANR	1269537	PrimaryExpression	"""PDF"""		1269465	0					
ANR	1269538	Argument	3		1269465	2					
ANR	1269539	PrimaryExpression	3		1269465	0					
ANR	1269540	PrimaryExpression	0		1269465	1					
ANR	1269541	OrExpression	"memcmp ( name , ""LRE"" , 3 ) == 0 || memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		1269465	1		||			
ANR	1269542	EqualityExpression	"memcmp ( name , ""LRE"" , 3 ) == 0"		1269465	0		==			
ANR	1269543	CallExpression	"memcmp ( name , ""LRE"" , 3 )"		1269465	0					
ANR	1269544	Callee	memcmp		1269465	0					
ANR	1269545	Identifier	memcmp		1269465	0					
ANR	1269546	ArgumentList	name		1269465	1					
ANR	1269547	Argument	name		1269465	0					
ANR	1269548	Identifier	name		1269465	0					
ANR	1269549	Argument	"""LRE"""		1269465	1					
ANR	1269550	PrimaryExpression	"""LRE"""		1269465	0					
ANR	1269551	Argument	3		1269465	2					
ANR	1269552	PrimaryExpression	3		1269465	0					
ANR	1269553	PrimaryExpression	0		1269465	1					
ANR	1269554	OrExpression	"memcmp ( name , ""LRO"" , 3 ) == 0 || memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		1269465	1		||			
ANR	1269555	EqualityExpression	"memcmp ( name , ""LRO"" , 3 ) == 0"		1269465	0		==			
ANR	1269556	CallExpression	"memcmp ( name , ""LRO"" , 3 )"		1269465	0					
ANR	1269557	Callee	memcmp		1269465	0					
ANR	1269558	Identifier	memcmp		1269465	0					
ANR	1269559	ArgumentList	name		1269465	1					
ANR	1269560	Argument	name		1269465	0					
ANR	1269561	Identifier	name		1269465	0					
ANR	1269562	Argument	"""LRO"""		1269465	1					
ANR	1269563	PrimaryExpression	"""LRO"""		1269465	0					
ANR	1269564	Argument	3		1269465	2					
ANR	1269565	PrimaryExpression	3		1269465	0					
ANR	1269566	PrimaryExpression	0		1269465	1					
ANR	1269567	OrExpression	"memcmp ( name , ""RLE"" , 3 ) == 0 || memcmp ( name , ""RLO"" , 3 ) == 0"		1269465	1		||			
ANR	1269568	EqualityExpression	"memcmp ( name , ""RLE"" , 3 ) == 0"		1269465	0		==			
ANR	1269569	CallExpression	"memcmp ( name , ""RLE"" , 3 )"		1269465	0					
ANR	1269570	Callee	memcmp		1269465	0					
ANR	1269571	Identifier	memcmp		1269465	0					
ANR	1269572	ArgumentList	name		1269465	1					
ANR	1269573	Argument	name		1269465	0					
ANR	1269574	Identifier	name		1269465	0					
ANR	1269575	Argument	"""RLE"""		1269465	1					
ANR	1269576	PrimaryExpression	"""RLE"""		1269465	0					
ANR	1269577	Argument	3		1269465	2					
ANR	1269578	PrimaryExpression	3		1269465	0					
ANR	1269579	PrimaryExpression	0		1269465	1					
ANR	1269580	EqualityExpression	"memcmp ( name , ""RLO"" , 3 ) == 0"		1269465	1		==			
ANR	1269581	CallExpression	"memcmp ( name , ""RLO"" , 3 )"		1269465	0					
ANR	1269582	Callee	memcmp		1269465	0					
ANR	1269583	Identifier	memcmp		1269465	0					
ANR	1269584	ArgumentList	name		1269465	1					
ANR	1269585	Argument	name		1269465	0					
ANR	1269586	Identifier	name		1269465	0					
ANR	1269587	Argument	"""RLO"""		1269465	1					
ANR	1269588	PrimaryExpression	"""RLO"""		1269465	0					
ANR	1269589	Argument	3		1269465	2					
ANR	1269590	PrimaryExpression	3		1269465	0					
ANR	1269591	PrimaryExpression	0		1269465	1					
ANR	1269592	CompoundStatement		16:72:457:457	1269465	1					
ANR	1269593	ExpressionStatement	len = 2	344:8:9161:9168	1269465	0	True				
ANR	1269594	AssignmentExpression	len = 2		1269465	0		=			
ANR	1269595	Identifier	len		1269465	0					
ANR	1269596	PrimaryExpression	2		1269465	1					
ANR	1269597	ExpressionStatement	"name = ""ON"""	345:8:9178:9189	1269465	1	True				
ANR	1269598	AssignmentExpression	"name = ""ON"""		1269465	0		=			
ANR	1269599	Identifier	name		1269465	0					
ANR	1269600	PrimaryExpression	"""ON"""		1269465	1					
ANR	1269601	ForStatement	for ( i = 0 ; i < NUMPROPS ; i ++ )		1269465	5					
ANR	1269602	ForInit	i = 0 ;	348:9:9207:9212	1269465	0	True				
ANR	1269603	AssignmentExpression	i = 0		1269465	0		=			
ANR	1269604	Identifier	i		1269465	0					
ANR	1269605	PrimaryExpression	0		1269465	1					
ANR	1269606	Condition	i < NUMPROPS	348:16:9214:9225	1269465	1	True				
ANR	1269607	RelationalExpression	i < NUMPROPS		1269465	0		<			
ANR	1269608	Identifier	i		1269465	0					
ANR	1269609	Identifier	NUMPROPS		1269465	1					
ANR	1269610	PostIncDecOperationExpression	i ++	348:30:9228:9230	1269465	2	True				
ANR	1269611	Identifier	i		1269465	0					
ANR	1269612	IncDec	++		1269465	1					
ANR	1269613	CompoundStatement		25:35:666:666	1269465	3					
ANR	1269614	IfStatement	"if ( props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0 )"		1269465	0					
ANR	1269615	Condition	"props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0"	349:12:9247:9306	1269465	0	True				
ANR	1269616	AndExpression	"props [ i ] . len == len && memcmp ( props [ i ] . name , name , len ) == 0"		1269465	0		&&			
ANR	1269617	EqualityExpression	props [ i ] . len == len		1269465	0		==			
ANR	1269618	MemberAccess	props [ i ] . len		1269465	0					
ANR	1269619	ArrayIndexing	props [ i ]		1269465	0					
ANR	1269620	Identifier	props		1269465	0					
ANR	1269621	Identifier	i		1269465	1					
ANR	1269622	Identifier	len		1269465	1					
ANR	1269623	Identifier	len		1269465	1					
ANR	1269624	EqualityExpression	"memcmp ( props [ i ] . name , name , len ) == 0"		1269465	1		==			
ANR	1269625	CallExpression	"memcmp ( props [ i ] . name , name , len )"		1269465	0					
ANR	1269626	Callee	memcmp		1269465	0					
ANR	1269627	Identifier	memcmp		1269465	0					
ANR	1269628	ArgumentList	props [ i ] . name		1269465	1					
ANR	1269629	Argument	props [ i ] . name		1269465	0					
ANR	1269630	MemberAccess	props [ i ] . name		1269465	0					
ANR	1269631	ArrayIndexing	props [ i ]		1269465	0					
ANR	1269632	Identifier	props		1269465	0					
ANR	1269633	Identifier	i		1269465	1					
ANR	1269634	Identifier	name		1269465	1					
ANR	1269635	Argument	name		1269465	1					
ANR	1269636	Identifier	name		1269465	0					
ANR	1269637	Argument	len		1269465	2					
ANR	1269638	Identifier	len		1269465	0					
ANR	1269639	PrimaryExpression	0		1269465	1					
ANR	1269640	BreakStatement	break ;	350:10:9319:9324	1269465	1	True				
ANR	1269641	IfStatement	if ( i == NUMPROPS )		1269465	6					
ANR	1269642	Condition	i == NUMPROPS	353:8:9341:9353	1269465	0	True				
ANR	1269643	EqualityExpression	i == NUMPROPS		1269465	0		==			
ANR	1269644	Identifier	i		1269465	0					
ANR	1269645	Identifier	NUMPROPS		1269465	1					
ANR	1269646	ReturnStatement	return ;	354:6:9362:9368	1269465	1	True				
ANR	1269647	ExpressionStatement	rlp = & proptbl [ i ]	359:4:9440:9457	1269465	7	True				
ANR	1269648	AssignmentExpression	rlp = & proptbl [ i ]		1269465	0		=			
ANR	1269649	Identifier	rlp		1269465	0					
ANR	1269650	UnaryOperationExpression	& proptbl [ i ]		1269465	1					
ANR	1269651	UnaryOperator	&		1269465	0					
ANR	1269652	ArrayIndexing	proptbl [ i ]		1269465	1					
ANR	1269653	Identifier	proptbl		1269465	0					
ANR	1269654	Identifier	i		1269465	1					
ANR	1269655	IfStatement	if ( rlp -> used == rlp -> size )		1269465	8					
ANR	1269656	Condition	rlp -> used == rlp -> size	364:8:9526:9547	1269465	0	True				
ANR	1269657	EqualityExpression	rlp -> used == rlp -> size		1269465	0		==			
ANR	1269658	PtrMemberAccess	rlp -> used		1269465	0					
ANR	1269659	Identifier	rlp		1269465	0					
ANR	1269660	Identifier	used		1269465	1					
ANR	1269661	PtrMemberAccess	rlp -> size		1269465	1					
ANR	1269662	Identifier	rlp		1269465	0					
ANR	1269663	Identifier	size		1269465	1					
ANR	1269664	CompoundStatement		41:32:983:983	1269465	1					
ANR	1269665	IfStatement	if ( rlp -> size == 0 )		1269465	0					
ANR	1269666	Condition	rlp -> size == 0	365:12:9564:9577	1269465	0	True				
ANR	1269667	EqualityExpression	rlp -> size == 0		1269465	0		==			
ANR	1269668	PtrMemberAccess	rlp -> size		1269465	0					
ANR	1269669	Identifier	rlp		1269465	0					
ANR	1269670	Identifier	size		1269465	1					
ANR	1269671	PrimaryExpression	0		1269465	1					
ANR	1269672	ExpressionStatement	rlp -> ranges = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )	366:10:9590:9660	1269465	1	True				
ANR	1269673	AssignmentExpression	rlp -> ranges = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )		1269465	0		=			
ANR	1269674	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269675	Identifier	rlp		1269465	0					
ANR	1269676	Identifier	ranges		1269465	1					
ANR	1269677	CastExpression	( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) << 3 )		1269465	1					
ANR	1269678	CastTarget	ac_uint4 *		1269465	0					
ANR	1269679	CallExpression	malloc ( sizeof ( ac_uint4 ) << 3 )		1269465	1					
ANR	1269680	Callee	malloc		1269465	0					
ANR	1269681	Identifier	malloc		1269465	0					
ANR	1269682	ArgumentList	sizeof ( ac_uint4 ) << 3		1269465	1					
ANR	1269683	Argument	sizeof ( ac_uint4 ) << 3		1269465	0					
ANR	1269684	ShiftExpression	sizeof ( ac_uint4 ) << 3		1269465	0		<<			
ANR	1269685	SizeofExpression	sizeof ( ac_uint4 )		1269465	0					
ANR	1269686	Sizeof	sizeof		1269465	0					
ANR	1269687	SizeofOperand	ac_uint4		1269465	1					
ANR	1269688	PrimaryExpression	3		1269465	1					
ANR	1269689	ElseStatement	else		1269465	0					
ANR	1269690	ExpressionStatement	"rlp -> ranges = ( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"	369:10:9685:9813	1269465	0	True				
ANR	1269691	AssignmentExpression	"rlp -> ranges = ( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		1269465	0		=			
ANR	1269692	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269693	Identifier	rlp		1269465	0					
ANR	1269694	Identifier	ranges		1269465	1					
ANR	1269695	CastExpression	"( ac_uint4 * ) realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		1269465	1					
ANR	1269696	CastTarget	ac_uint4 *		1269465	0					
ANR	1269697	CallExpression	"realloc ( ( char * ) rlp -> ranges , sizeof ( ac_uint4 ) * ( rlp -> size + 8 ) )"		1269465	1					
ANR	1269698	Callee	realloc		1269465	0					
ANR	1269699	Identifier	realloc		1269465	0					
ANR	1269700	ArgumentList	( char * ) rlp -> ranges		1269465	1					
ANR	1269701	Argument	( char * ) rlp -> ranges		1269465	0					
ANR	1269702	CastExpression	( char * ) rlp -> ranges		1269465	0					
ANR	1269703	CastTarget	char *		1269465	0					
ANR	1269704	PtrMemberAccess	rlp -> ranges		1269465	1					
ANR	1269705	Identifier	rlp		1269465	0					
ANR	1269706	Identifier	ranges		1269465	1					
ANR	1269707	Argument	sizeof ( ac_uint4 ) * ( rlp -> size + 8 )		1269465	1					
ANR	1269708	MultiplicativeExpression	sizeof ( ac_uint4 ) * ( rlp -> size + 8 )		1269465	0		*			
ANR	1269709	SizeofExpression	sizeof ( ac_uint4 )		1269465	0					
ANR	1269710	Sizeof	sizeof		1269465	0					
ANR	1269711	SizeofOperand	ac_uint4		1269465	1					
ANR	1269712	AdditiveExpression	rlp -> size + 8		1269465	1		+			
ANR	1269713	PtrMemberAccess	rlp -> size		1269465	0					
ANR	1269714	Identifier	rlp		1269465	0					
ANR	1269715	Identifier	size		1269465	1					
ANR	1269716	PrimaryExpression	8		1269465	1					
ANR	1269717	ExpressionStatement	rlp -> size += 8	372:8:9823:9837	1269465	1	True				
ANR	1269718	AssignmentExpression	rlp -> size += 8		1269465	0		+=			
ANR	1269719	PtrMemberAccess	rlp -> size		1269465	0					
ANR	1269720	Identifier	rlp		1269465	0					
ANR	1269721	Identifier	size		1269465	1					
ANR	1269722	PrimaryExpression	8		1269465	1					
ANR	1269723	IfStatement	if ( rlp -> used == 0 )		1269465	9					
ANR	1269724	Condition	rlp -> used == 0	379:8:9957:9970	1269465	0	True				
ANR	1269725	EqualityExpression	rlp -> used == 0		1269465	0		==			
ANR	1269726	PtrMemberAccess	rlp -> used		1269465	0					
ANR	1269727	Identifier	rlp		1269465	0					
ANR	1269728	Identifier	used		1269465	1					
ANR	1269729	PrimaryExpression	0		1269465	1					
ANR	1269730	CompoundStatement		56:24:1406:1406	1269465	1					
ANR	1269731	ExpressionStatement	rlp -> ranges [ 0 ] = rlp -> ranges [ 1 ] = c	380:8:9983:10018	1269465	0	True				
ANR	1269732	AssignmentExpression	rlp -> ranges [ 0 ] = rlp -> ranges [ 1 ] = c		1269465	0		=			
ANR	1269733	ArrayIndexing	rlp -> ranges [ 0 ]		1269465	0					
ANR	1269734	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269735	Identifier	rlp		1269465	0					
ANR	1269736	Identifier	ranges		1269465	1					
ANR	1269737	PrimaryExpression	0		1269465	1					
ANR	1269738	AssignmentExpression	rlp -> ranges [ 1 ] = c		1269465	1		=			
ANR	1269739	ArrayIndexing	rlp -> ranges [ 1 ]		1269465	0					
ANR	1269740	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269741	Identifier	rlp		1269465	0					
ANR	1269742	Identifier	ranges		1269465	1					
ANR	1269743	PrimaryExpression	1		1269465	1					
ANR	1269744	Identifier	c		1269465	1					
ANR	1269745	ExpressionStatement	rlp -> used += 2	381:8:10028:10042	1269465	1	True				
ANR	1269746	AssignmentExpression	rlp -> used += 2		1269465	0		+=			
ANR	1269747	PtrMemberAccess	rlp -> used		1269465	0					
ANR	1269748	Identifier	rlp		1269465	0					
ANR	1269749	Identifier	used		1269465	1					
ANR	1269750	PrimaryExpression	2		1269465	1					
ANR	1269751	ReturnStatement	return ;	382:8:10052:10058	1269465	2	True				
ANR	1269752	ExpressionStatement	j = rlp -> used - 1	389:4:10181:10198	1269465	10	True				
ANR	1269753	AssignmentExpression	j = rlp -> used - 1		1269465	0		=			
ANR	1269754	Identifier	j		1269465	0					
ANR	1269755	AdditiveExpression	rlp -> used - 1		1269465	1		-			
ANR	1269756	PtrMemberAccess	rlp -> used		1269465	0					
ANR	1269757	Identifier	rlp		1269465	0					
ANR	1269758	Identifier	used		1269465	1					
ANR	1269759	PrimaryExpression	1		1269465	1					
ANR	1269760	ExpressionStatement	e = rlp -> ranges [ j ]	390:4:10204:10222	1269465	11	True				
ANR	1269761	AssignmentExpression	e = rlp -> ranges [ j ]		1269465	0		=			
ANR	1269762	Identifier	e		1269465	0					
ANR	1269763	ArrayIndexing	rlp -> ranges [ j ]		1269465	1					
ANR	1269764	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269765	Identifier	rlp		1269465	0					
ANR	1269766	Identifier	ranges		1269465	1					
ANR	1269767	Identifier	j		1269465	1					
ANR	1269768	ExpressionStatement	s = rlp -> ranges [ j - 1 ]	391:4:10228:10250	1269465	12	True				
ANR	1269769	AssignmentExpression	s = rlp -> ranges [ j - 1 ]		1269465	0		=			
ANR	1269770	Identifier	s		1269465	0					
ANR	1269771	ArrayIndexing	rlp -> ranges [ j - 1 ]		1269465	1					
ANR	1269772	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269773	Identifier	rlp		1269465	0					
ANR	1269774	Identifier	ranges		1269465	1					
ANR	1269775	AdditiveExpression	j - 1		1269465	1		-			
ANR	1269776	Identifier	j		1269465	0					
ANR	1269777	PrimaryExpression	1		1269465	1					
ANR	1269778	IfStatement	if ( c == e + 1 )		1269465	13					
ANR	1269779	Condition	c == e + 1	393:8:10261:10270	1269465	0	True				
ANR	1269780	EqualityExpression	c == e + 1		1269465	0		==			
ANR	1269781	Identifier	c		1269465	0					
ANR	1269782	AdditiveExpression	e + 1		1269465	1		+			
ANR	1269783	Identifier	e		1269465	0					
ANR	1269784	PrimaryExpression	1		1269465	1					
ANR	1269785	CompoundStatement		70:20:1706:1706	1269465	1					
ANR	1269786	ExpressionStatement	rlp -> ranges [ j ] = c	397:8:10340:10358	1269465	0	True				
ANR	1269787	AssignmentExpression	rlp -> ranges [ j ] = c		1269465	0		=			
ANR	1269788	ArrayIndexing	rlp -> ranges [ j ]		1269465	0					
ANR	1269789	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269790	Identifier	rlp		1269465	0					
ANR	1269791	Identifier	ranges		1269465	1					
ANR	1269792	Identifier	j		1269465	1					
ANR	1269793	Identifier	c		1269465	1					
ANR	1269794	ReturnStatement	return ;	398:8:10368:10374	1269465	1	True				
ANR	1269795	IfStatement	if ( c > e + 1 )		1269465	14					
ANR	1269796	Condition	c > e + 1	401:8:10391:10399	1269465	0	True				
ANR	1269797	RelationalExpression	c > e + 1		1269465	0		>			
ANR	1269798	Identifier	c		1269465	0					
ANR	1269799	AdditiveExpression	e + 1		1269465	1		+			
ANR	1269800	Identifier	e		1269465	0					
ANR	1269801	PrimaryExpression	1		1269465	1					
ANR	1269802	CompoundStatement		78:19:1835:1835	1269465	1					
ANR	1269803	ExpressionStatement	j = rlp -> used	405:8:10478:10491	1269465	0	True				
ANR	1269804	AssignmentExpression	j = rlp -> used		1269465	0		=			
ANR	1269805	Identifier	j		1269465	0					
ANR	1269806	PtrMemberAccess	rlp -> used		1269465	1					
ANR	1269807	Identifier	rlp		1269465	0					
ANR	1269808	Identifier	used		1269465	1					
ANR	1269809	ExpressionStatement	rlp -> ranges [ j ] = rlp -> ranges [ j + 1 ] = c	406:8:10501:10540	1269465	1	True				
ANR	1269810	AssignmentExpression	rlp -> ranges [ j ] = rlp -> ranges [ j + 1 ] = c		1269465	0		=			
ANR	1269811	ArrayIndexing	rlp -> ranges [ j ]		1269465	0					
ANR	1269812	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269813	Identifier	rlp		1269465	0					
ANR	1269814	Identifier	ranges		1269465	1					
ANR	1269815	Identifier	j		1269465	1					
ANR	1269816	AssignmentExpression	rlp -> ranges [ j + 1 ] = c		1269465	1		=			
ANR	1269817	ArrayIndexing	rlp -> ranges [ j + 1 ]		1269465	0					
ANR	1269818	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269819	Identifier	rlp		1269465	0					
ANR	1269820	Identifier	ranges		1269465	1					
ANR	1269821	AdditiveExpression	j + 1		1269465	1		+			
ANR	1269822	Identifier	j		1269465	0					
ANR	1269823	PrimaryExpression	1		1269465	1					
ANR	1269824	Identifier	c		1269465	1					
ANR	1269825	ExpressionStatement	rlp -> used += 2	407:8:10550:10564	1269465	2	True				
ANR	1269826	AssignmentExpression	rlp -> used += 2		1269465	0		+=			
ANR	1269827	PtrMemberAccess	rlp -> used		1269465	0					
ANR	1269828	Identifier	rlp		1269465	0					
ANR	1269829	Identifier	used		1269465	1					
ANR	1269830	PrimaryExpression	2		1269465	1					
ANR	1269831	ReturnStatement	return ;	408:8:10574:10580	1269465	3	True				
ANR	1269832	IfStatement	if ( c >= s )		1269465	15					
ANR	1269833	Condition	c >= s	411:8:10597:10602	1269465	0	True				
ANR	1269834	RelationalExpression	c >= s		1269465	0		>=			
ANR	1269835	Identifier	c		1269465	0					
ANR	1269836	Identifier	s		1269465	1					
ANR	1269837	ReturnStatement	return ;	415:6:10708:10714	1269465	1	True				
ANR	1269838	ForStatement	for ( i = 0 ; i < rlp -> used && c > rlp -> ranges [ i + 1 ] + 1 ; i += 2 )		1269465	16					
ANR	1269839	ForInit	i = 0 ;	421:9:10857:10862	1269465	0	True				
ANR	1269840	AssignmentExpression	i = 0		1269465	0		=			
ANR	1269841	Identifier	i		1269465	0					
ANR	1269842	PrimaryExpression	0		1269465	1					
ANR	1269843	Condition	i < rlp -> used && c > rlp -> ranges [ i + 1 ] + 1	422:9:10873:10915	1269465	1	True				
ANR	1269844	AndExpression	i < rlp -> used && c > rlp -> ranges [ i + 1 ] + 1		1269465	0		&&			
ANR	1269845	RelationalExpression	i < rlp -> used		1269465	0		<			
ANR	1269846	Identifier	i		1269465	0					
ANR	1269847	PtrMemberAccess	rlp -> used		1269465	1					
ANR	1269848	Identifier	rlp		1269465	0					
ANR	1269849	Identifier	used		1269465	1					
ANR	1269850	RelationalExpression	c > rlp -> ranges [ i + 1 ] + 1		1269465	1		>			
ANR	1269851	Identifier	c		1269465	0					
ANR	1269852	AdditiveExpression	rlp -> ranges [ i + 1 ] + 1		1269465	1		+			
ANR	1269853	ArrayIndexing	rlp -> ranges [ i + 1 ]		1269465	0					
ANR	1269854	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269855	Identifier	rlp		1269465	0					
ANR	1269856	Identifier	ranges		1269465	1					
ANR	1269857	AdditiveExpression	i + 1		1269465	1		+			
ANR	1269858	Identifier	i		1269465	0					
ANR	1269859	PrimaryExpression	1		1269465	1					
ANR	1269860	PrimaryExpression	1		1269465	1					
ANR	1269861	AssignmentExpression	i += 2	422:54:10918:10923	1269465	2	True	+=			
ANR	1269862	Identifier	i		1269465	0					
ANR	1269863	PrimaryExpression	2		1269465	1					
ANR	1269864	ExpressionStatement		422:62:10926:10926	1269465	3	True				
ANR	1269865	ExpressionStatement	s = rlp -> ranges [ i ]	424:4:10933:10951	1269465	17	True				
ANR	1269866	AssignmentExpression	s = rlp -> ranges [ i ]		1269465	0		=			
ANR	1269867	Identifier	s		1269465	0					
ANR	1269868	ArrayIndexing	rlp -> ranges [ i ]		1269465	1					
ANR	1269869	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269870	Identifier	rlp		1269465	0					
ANR	1269871	Identifier	ranges		1269465	1					
ANR	1269872	Identifier	i		1269465	1					
ANR	1269873	ExpressionStatement	e = rlp -> ranges [ i + 1 ]	425:4:10957:10979	1269465	18	True				
ANR	1269874	AssignmentExpression	e = rlp -> ranges [ i + 1 ]		1269465	0		=			
ANR	1269875	Identifier	e		1269465	0					
ANR	1269876	ArrayIndexing	rlp -> ranges [ i + 1 ]		1269465	1					
ANR	1269877	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269878	Identifier	rlp		1269465	0					
ANR	1269879	Identifier	ranges		1269465	1					
ANR	1269880	AdditiveExpression	i + 1		1269465	1		+			
ANR	1269881	Identifier	i		1269465	0					
ANR	1269882	PrimaryExpression	1		1269465	1					
ANR	1269883	IfStatement	if ( c == e + 1 )		1269465	19					
ANR	1269884	Condition	c == e + 1	427:8:10990:10999	1269465	0	True				
ANR	1269885	EqualityExpression	c == e + 1		1269465	0		==			
ANR	1269886	Identifier	c		1269465	0					
ANR	1269887	AdditiveExpression	e + 1		1269465	1		+			
ANR	1269888	Identifier	e		1269465	0					
ANR	1269889	PrimaryExpression	1		1269465	1					
ANR	1269890	ExpressionStatement	rlp -> ranges [ i + 1 ] = c	431:6:11069:11091	1269465	1	True				
ANR	1269891	AssignmentExpression	rlp -> ranges [ i + 1 ] = c		1269465	0		=			
ANR	1269892	ArrayIndexing	rlp -> ranges [ i + 1 ]		1269465	0					
ANR	1269893	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269894	Identifier	rlp		1269465	0					
ANR	1269895	Identifier	ranges		1269465	1					
ANR	1269896	AdditiveExpression	i + 1		1269465	1		+			
ANR	1269897	Identifier	i		1269465	0					
ANR	1269898	PrimaryExpression	1		1269465	1					
ANR	1269899	Identifier	c		1269465	1					
ANR	1269900	ElseStatement	else		1269465	0					
ANR	1269901	IfStatement	if ( c < s )		1269465	0					
ANR	1269902	Condition	c < s	432:13:11106:11110	1269465	0	True				
ANR	1269903	RelationalExpression	c < s		1269465	0		<			
ANR	1269904	Identifier	c		1269465	0					
ANR	1269905	Identifier	s		1269465	1					
ANR	1269906	CompoundStatement		109:20:2546:2546	1269465	1					
ANR	1269907	ForStatement	for ( j = rlp -> used ; j > i ; j -= 2 )		1269465	0					
ANR	1269908	ForInit	j = rlp -> used ;	437:13:11284:11297	1269465	0	True				
ANR	1269909	AssignmentExpression	j = rlp -> used		1269465	0		=			
ANR	1269910	Identifier	j		1269465	0					
ANR	1269911	PtrMemberAccess	rlp -> used		1269465	1					
ANR	1269912	Identifier	rlp		1269465	0					
ANR	1269913	Identifier	used		1269465	1					
ANR	1269914	Condition	j > i	437:28:11299:11303	1269465	1	True				
ANR	1269915	RelationalExpression	j > i		1269465	0		>			
ANR	1269916	Identifier	j		1269465	0					
ANR	1269917	Identifier	i		1269465	1					
ANR	1269918	AssignmentExpression	j -= 2	437:35:11306:11311	1269465	2	True	-=			
ANR	1269919	Identifier	j		1269465	0					
ANR	1269920	PrimaryExpression	2		1269465	1					
ANR	1269921	CompoundStatement		114:43:2747:2747	1269465	3					
ANR	1269922	ExpressionStatement	rlp -> ranges [ j ] = rlp -> ranges [ j - 2 ]	438:12:11328:11363	1269465	0	True				
ANR	1269923	AssignmentExpression	rlp -> ranges [ j ] = rlp -> ranges [ j - 2 ]		1269465	0		=			
ANR	1269924	ArrayIndexing	rlp -> ranges [ j ]		1269465	0					
ANR	1269925	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269926	Identifier	rlp		1269465	0					
ANR	1269927	Identifier	ranges		1269465	1					
ANR	1269928	Identifier	j		1269465	1					
ANR	1269929	ArrayIndexing	rlp -> ranges [ j - 2 ]		1269465	1					
ANR	1269930	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269931	Identifier	rlp		1269465	0					
ANR	1269932	Identifier	ranges		1269465	1					
ANR	1269933	AdditiveExpression	j - 2		1269465	1		-			
ANR	1269934	Identifier	j		1269465	0					
ANR	1269935	PrimaryExpression	2		1269465	1					
ANR	1269936	ExpressionStatement	rlp -> ranges [ j + 1 ] = rlp -> ranges [ j - 1 ]	439:12:11377:11416	1269465	1	True				
ANR	1269937	AssignmentExpression	rlp -> ranges [ j + 1 ] = rlp -> ranges [ j - 1 ]		1269465	0		=			
ANR	1269938	ArrayIndexing	rlp -> ranges [ j + 1 ]		1269465	0					
ANR	1269939	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269940	Identifier	rlp		1269465	0					
ANR	1269941	Identifier	ranges		1269465	1					
ANR	1269942	AdditiveExpression	j + 1		1269465	1		+			
ANR	1269943	Identifier	j		1269465	0					
ANR	1269944	PrimaryExpression	1		1269465	1					
ANR	1269945	ArrayIndexing	rlp -> ranges [ j - 1 ]		1269465	1					
ANR	1269946	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269947	Identifier	rlp		1269465	0					
ANR	1269948	Identifier	ranges		1269465	1					
ANR	1269949	AdditiveExpression	j - 1		1269465	1		-			
ANR	1269950	Identifier	j		1269465	0					
ANR	1269951	PrimaryExpression	1		1269465	1					
ANR	1269952	ExpressionStatement	rlp -> ranges [ i ] = rlp -> ranges [ i + 1 ] = c	441:8:11436:11475	1269465	1	True				
ANR	1269953	AssignmentExpression	rlp -> ranges [ i ] = rlp -> ranges [ i + 1 ] = c		1269465	0		=			
ANR	1269954	ArrayIndexing	rlp -> ranges [ i ]		1269465	0					
ANR	1269955	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269956	Identifier	rlp		1269465	0					
ANR	1269957	Identifier	ranges		1269465	1					
ANR	1269958	Identifier	i		1269465	1					
ANR	1269959	AssignmentExpression	rlp -> ranges [ i + 1 ] = c		1269465	1		=			
ANR	1269960	ArrayIndexing	rlp -> ranges [ i + 1 ]		1269465	0					
ANR	1269961	PtrMemberAccess	rlp -> ranges		1269465	0					
ANR	1269962	Identifier	rlp		1269465	0					
ANR	1269963	Identifier	ranges		1269465	1					
ANR	1269964	AdditiveExpression	i + 1		1269465	1		+			
ANR	1269965	Identifier	i		1269465	0					
ANR	1269966	PrimaryExpression	1		1269465	1					
ANR	1269967	Identifier	c		1269465	1					
ANR	1269968	ExpressionStatement	rlp -> used += 2	443:8:11486:11500	1269465	2	True				
ANR	1269969	AssignmentExpression	rlp -> used += 2		1269465	0		+=			
ANR	1269970	PtrMemberAccess	rlp -> used		1269465	0					
ANR	1269971	Identifier	rlp		1269465	0					
ANR	1269972	Identifier	used		1269465	1					
ANR	1269973	PrimaryExpression	2		1269465	1					
ANR	1269974	ReturnType	static void		1269465	1					
ANR	1269975	Identifier	ordered_range_insert		1269465	2					
ANR	1269976	ParameterList	"ac_uint4 c , char * name , int len"		1269465	3					
ANR	1269977	Parameter	ac_uint4 c	323:21:8533:8542	1269465	0	True				
ANR	1269978	ParameterType	ac_uint4		1269465	0					
ANR	1269979	Identifier	c		1269465	1					
ANR	1269980	Parameter	char * name	323:33:8545:8554	1269465	1	True				
ANR	1269981	ParameterType	char *		1269465	0					
ANR	1269982	Identifier	name		1269465	1					
ANR	1269983	Parameter	int len	323:45:8557:8563	1269465	2	True				
ANR	1269984	ParameterType	int		1269465	0					
ANR	1269985	Identifier	len		1269465	1					
ANR	1269986	CFGEntryNode	ENTRY		1269465		True				
ANR	1269987	CFGExitNode	EXIT		1269465		True				
ANR	1269988	Symbol	rlp -> size		1269465						
ANR	1269989	Symbol	rlp -> used		1269465						
ANR	1269990	Symbol	rlp -> ranges		1269465						
ANR	1269991	Symbol	* * rlp		1269465						
ANR	1269992	Symbol	realloc		1269465						
ANR	1269993	Symbol	memcmp		1269465						
ANR	1269994	Symbol	len		1269465						
ANR	1269995	Symbol	* rlp		1269465						
ANR	1269996	Symbol	malloc		1269465						
ANR	1269997	Symbol	c		1269465						
ANR	1269998	Symbol	e		1269465						
ANR	1269999	Symbol	props [ i ] . name		1269465						
ANR	1270000	Symbol	proptbl		1269465						
ANR	1270001	Symbol	i		1269465						
ANR	1270002	Symbol	j		1269465						
ANR	1270003	Symbol	NUMPROPS		1269465						
ANR	1270004	Symbol	props		1269465						
ANR	1270005	Symbol	* rlp -> ranges		1269465						
ANR	1270006	Symbol	s		1269465						
ANR	1270007	Symbol	* i		1269465						
ANR	1270008	Symbol	* j		1269465						
ANR	1270009	Symbol	rlp		1269465						
ANR	1270010	Symbol	name		1269465						
ANR	1270011	Symbol	* props		1269465						
ANR	1270012	Symbol	props [ i ] . len		1269465						
ANR	1270013	Function	add_decomp	447:0:11511:13957							
ANR	1270014	FunctionDef	"add_decomp (ac_uint4 code , short compat)"		1270013	0					
ANR	1270015	CompoundStatement		449:0:11563:13957	1270013	0					
ANR	1270016	IdentifierDeclStatement	"ac_uint4 i , j , size ;"	450:4:11569:11588	1270013	0	True				
ANR	1270017	IdentifierDecl	i		1270013	0					
ANR	1270018	IdentifierDeclType	ac_uint4		1270013	0					
ANR	1270019	Identifier	i		1270013	1					
ANR	1270020	IdentifierDecl	j		1270013	1					
ANR	1270021	IdentifierDeclType	ac_uint4		1270013	0					
ANR	1270022	Identifier	j		1270013	1					
ANR	1270023	IdentifierDecl	size		1270013	2					
ANR	1270024	IdentifierDeclType	ac_uint4		1270013	0					
ANR	1270025	Identifier	size		1270013	1					
ANR	1270026	IdentifierDeclStatement	_decomp_t * * pdecomps ;	451:4:11594:11614	1270013	1	True				
ANR	1270027	IdentifierDecl	* * pdecomps		1270013	0					
ANR	1270028	IdentifierDeclType	_decomp_t * *		1270013	0					
ANR	1270029	Identifier	pdecomps		1270013	1					
ANR	1270030	IdentifierDeclStatement	ac_uint4 * pdecomps_used ;	452:4:11620:11643	1270013	2	True				
ANR	1270031	IdentifierDecl	* pdecomps_used		1270013	0					
ANR	1270032	IdentifierDeclType	ac_uint4 *		1270013	0					
ANR	1270033	Identifier	pdecomps_used		1270013	1					
ANR	1270034	IdentifierDeclStatement	ac_uint4 * pdecomps_size ;	453:4:11649:11672	1270013	3	True				
ANR	1270035	IdentifierDecl	* pdecomps_size		1270013	0					
ANR	1270036	IdentifierDeclType	ac_uint4 *		1270013	0					
ANR	1270037	Identifier	pdecomps_size		1270013	1					
ANR	1270038	IfStatement	if ( compat )		1270013	4					
ANR	1270039	Condition	compat	455:8:11683:11688	1270013	0	True				
ANR	1270040	Identifier	compat		1270013	0					
ANR	1270041	CompoundStatement		7:16:127:127	1270013	1					
ANR	1270042	ExpressionStatement	pdecomps = & kdecomps	456:1:11694:11714	1270013	0	True				
ANR	1270043	AssignmentExpression	pdecomps = & kdecomps		1270013	0		=			
ANR	1270044	Identifier	pdecomps		1270013	0					
ANR	1270045	UnaryOperationExpression	& kdecomps		1270013	1					
ANR	1270046	UnaryOperator	&		1270013	0					
ANR	1270047	Identifier	kdecomps		1270013	1					
ANR	1270048	ExpressionStatement	pdecomps_used = & kdecomps_used	457:1:11717:11747	1270013	1	True				
ANR	1270049	AssignmentExpression	pdecomps_used = & kdecomps_used		1270013	0		=			
ANR	1270050	Identifier	pdecomps_used		1270013	0					
ANR	1270051	UnaryOperationExpression	& kdecomps_used		1270013	1					
ANR	1270052	UnaryOperator	&		1270013	0					
ANR	1270053	Identifier	kdecomps_used		1270013	1					
ANR	1270054	ExpressionStatement	pdecomps_size = & kdecomps_size	458:1:11750:11780	1270013	2	True				
ANR	1270055	AssignmentExpression	pdecomps_size = & kdecomps_size		1270013	0		=			
ANR	1270056	Identifier	pdecomps_size		1270013	0					
ANR	1270057	UnaryOperationExpression	& kdecomps_size		1270013	1					
ANR	1270058	UnaryOperator	&		1270013	0					
ANR	1270059	Identifier	kdecomps_size		1270013	1					
ANR	1270060	ElseStatement	else		1270013	0					
ANR	1270061	CompoundStatement		11:11:229:229	1270013	0					
ANR	1270062	ExpressionStatement	pdecomps = & decomps	460:1:11796:11815	1270013	0	True				
ANR	1270063	AssignmentExpression	pdecomps = & decomps		1270013	0		=			
ANR	1270064	Identifier	pdecomps		1270013	0					
ANR	1270065	UnaryOperationExpression	& decomps		1270013	1					
ANR	1270066	UnaryOperator	&		1270013	0					
ANR	1270067	Identifier	decomps		1270013	1					
ANR	1270068	ExpressionStatement	pdecomps_used = & decomps_used	461:1:11818:11847	1270013	1	True				
ANR	1270069	AssignmentExpression	pdecomps_used = & decomps_used		1270013	0		=			
ANR	1270070	Identifier	pdecomps_used		1270013	0					
ANR	1270071	UnaryOperationExpression	& decomps_used		1270013	1					
ANR	1270072	UnaryOperator	&		1270013	0					
ANR	1270073	Identifier	decomps_used		1270013	1					
ANR	1270074	ExpressionStatement	pdecomps_size = & decomps_size	462:1:11850:11879	1270013	2	True				
ANR	1270075	AssignmentExpression	pdecomps_size = & decomps_size		1270013	0		=			
ANR	1270076	Identifier	pdecomps_size		1270013	0					
ANR	1270077	UnaryOperationExpression	& decomps_size		1270013	1					
ANR	1270078	UnaryOperator	&		1270013	0					
ANR	1270079	Identifier	decomps_size		1270013	1					
ANR	1270080	IfStatement	if ( ! compat )		1270013	5					
ANR	1270081	Condition	! compat	468:8:11958:11964	1270013	0	True				
ANR	1270082	UnaryOperationExpression	! compat		1270013	0					
ANR	1270083	UnaryOperator	!		1270013	0					
ANR	1270084	Identifier	compat		1270013	1					
ANR	1270085	CompoundStatement		20:17:403:403	1270013	1					
ANR	1270086	ExpressionStatement	"ordered_range_insert ( code , ""Cm"" , 2 )"	469:1:11970:12005	1270013	0	True				
ANR	1270087	CallExpression	"ordered_range_insert ( code , ""Cm"" , 2 )"		1270013	0					
ANR	1270088	Callee	ordered_range_insert		1270013	0					
ANR	1270089	Identifier	ordered_range_insert		1270013	0					
ANR	1270090	ArgumentList	code		1270013	1					
ANR	1270091	Argument	code		1270013	0					
ANR	1270092	Identifier	code		1270013	0					
ANR	1270093	Argument	"""Cm"""		1270013	1					
ANR	1270094	PrimaryExpression	"""Cm"""		1270013	0					
ANR	1270095	Argument	2		1270013	2					
ANR	1270096	PrimaryExpression	2		1270013	0					
ANR	1270097	ForStatement	for ( i = 0 ; i < * pdecomps_used && code > ( * pdecomps ) [ i ] . code ; i ++ )		1270013	6					
ANR	1270098	ForInit	i = 0 ;	475:9:12086:12091	1270013	0	True				
ANR	1270099	AssignmentExpression	i = 0		1270013	0		=			
ANR	1270100	Identifier	i		1270013	0					
ANR	1270101	PrimaryExpression	0		1270013	1					
ANR	1270102	Condition	i < * pdecomps_used && code > ( * pdecomps ) [ i ] . code	475:16:12093:12140	1270013	1	True				
ANR	1270103	AndExpression	i < * pdecomps_used && code > ( * pdecomps ) [ i ] . code		1270013	0		&&			
ANR	1270104	RelationalExpression	i < * pdecomps_used		1270013	0		<			
ANR	1270105	Identifier	i		1270013	0					
ANR	1270106	UnaryOperationExpression	* pdecomps_used		1270013	1					
ANR	1270107	UnaryOperator	*		1270013	0					
ANR	1270108	Identifier	pdecomps_used		1270013	1					
ANR	1270109	RelationalExpression	code > ( * pdecomps ) [ i ] . code		1270013	1		>			
ANR	1270110	Identifier	code		1270013	0					
ANR	1270111	MemberAccess	( * pdecomps ) [ i ] . code		1270013	1					
ANR	1270112	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270113	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270114	UnaryOperator	*		1270013	0					
ANR	1270115	Identifier	pdecomps		1270013	1					
ANR	1270116	Identifier	i		1270013	1					
ANR	1270117	Identifier	code		1270013	1					
ANR	1270118	PostIncDecOperationExpression	i ++	475:66:12143:12145	1270013	2	True				
ANR	1270119	Identifier	i		1270013	0					
ANR	1270120	IncDec	++		1270013	1					
ANR	1270121	ExpressionStatement		475:71:12148:12148	1270013	3	True				
ANR	1270122	IfStatement	if ( * pdecomps_used == * pdecomps_size )		1270013	7					
ANR	1270123	Condition	* pdecomps_used == * pdecomps_size	480:8:12221:12252	1270013	0	True				
ANR	1270124	EqualityExpression	* pdecomps_used == * pdecomps_size		1270013	0		==			
ANR	1270125	UnaryOperationExpression	* pdecomps_used		1270013	0					
ANR	1270126	UnaryOperator	*		1270013	0					
ANR	1270127	Identifier	pdecomps_used		1270013	1					
ANR	1270128	UnaryOperationExpression	* pdecomps_size		1270013	1					
ANR	1270129	UnaryOperator	*		1270013	0					
ANR	1270130	Identifier	pdecomps_size		1270013	1					
ANR	1270131	CompoundStatement		32:42:691:691	1270013	1					
ANR	1270132	IfStatement	if ( * pdecomps_size == 0 )		1270013	0					
ANR	1270133	Condition	* pdecomps_size == 0	481:12:12269:12287	1270013	0	True				
ANR	1270134	EqualityExpression	* pdecomps_size == 0		1270013	0		==			
ANR	1270135	UnaryOperationExpression	* pdecomps_size		1270013	0					
ANR	1270136	UnaryOperator	*		1270013	0					
ANR	1270137	Identifier	pdecomps_size		1270013	1					
ANR	1270138	PrimaryExpression	0		1270013	1					
ANR	1270139	ExpressionStatement	* pdecomps = ( _decomp_t * ) malloc ( sizeof ( _decomp_t ) << 3 )	482:10:12300:12356	1270013	1	True				
ANR	1270140	AssignmentExpression	* pdecomps = ( _decomp_t * ) malloc ( sizeof ( _decomp_t ) << 3 )		1270013	0		=			
ANR	1270141	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270142	UnaryOperator	*		1270013	0					
ANR	1270143	Identifier	pdecomps		1270013	1					
ANR	1270144	CastExpression	( _decomp_t * ) malloc ( sizeof ( _decomp_t ) << 3 )		1270013	1					
ANR	1270145	CastTarget	_decomp_t *		1270013	0					
ANR	1270146	CallExpression	malloc ( sizeof ( _decomp_t ) << 3 )		1270013	1					
ANR	1270147	Callee	malloc		1270013	0					
ANR	1270148	Identifier	malloc		1270013	0					
ANR	1270149	ArgumentList	sizeof ( _decomp_t ) << 3		1270013	1					
ANR	1270150	Argument	sizeof ( _decomp_t ) << 3		1270013	0					
ANR	1270151	ShiftExpression	sizeof ( _decomp_t ) << 3		1270013	0		<<			
ANR	1270152	SizeofExpression	sizeof ( _decomp_t )		1270013	0					
ANR	1270153	Sizeof	sizeof		1270013	0					
ANR	1270154	SizeofOperand	_decomp_t		1270013	1					
ANR	1270155	PrimaryExpression	3		1270013	1					
ANR	1270156	ElseStatement	else		1270013	0					
ANR	1270157	ExpressionStatement	"* pdecomps = ( _decomp_t * ) realloc ( ( char * ) * pdecomps , sizeof ( _decomp_t ) * ( * pdecomps_size + 8 ) )"	484:10:12381:12512	1270013	0	True				
ANR	1270158	AssignmentExpression	"* pdecomps = ( _decomp_t * ) realloc ( ( char * ) * pdecomps , sizeof ( _decomp_t ) * ( * pdecomps_size + 8 ) )"		1270013	0		=			
ANR	1270159	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270160	UnaryOperator	*		1270013	0					
ANR	1270161	Identifier	pdecomps		1270013	1					
ANR	1270162	CastExpression	"( _decomp_t * ) realloc ( ( char * ) * pdecomps , sizeof ( _decomp_t ) * ( * pdecomps_size + 8 ) )"		1270013	1					
ANR	1270163	CastTarget	_decomp_t *		1270013	0					
ANR	1270164	CallExpression	"realloc ( ( char * ) * pdecomps , sizeof ( _decomp_t ) * ( * pdecomps_size + 8 ) )"		1270013	1					
ANR	1270165	Callee	realloc		1270013	0					
ANR	1270166	Identifier	realloc		1270013	0					
ANR	1270167	ArgumentList	( char * ) * pdecomps		1270013	1					
ANR	1270168	Argument	( char * ) * pdecomps		1270013	0					
ANR	1270169	CastExpression	( char * ) * pdecomps		1270013	0					
ANR	1270170	CastTarget	char *		1270013	0					
ANR	1270171	UnaryOperationExpression	* pdecomps		1270013	1					
ANR	1270172	UnaryOperator	*		1270013	0					
ANR	1270173	Identifier	pdecomps		1270013	1					
ANR	1270174	Argument	sizeof ( _decomp_t ) * ( * pdecomps_size + 8 )		1270013	1					
ANR	1270175	MultiplicativeExpression	sizeof ( _decomp_t ) * ( * pdecomps_size + 8 )		1270013	0		*			
ANR	1270176	SizeofExpression	sizeof ( _decomp_t )		1270013	0					
ANR	1270177	Sizeof	sizeof		1270013	0					
ANR	1270178	SizeofOperand	_decomp_t		1270013	1					
ANR	1270179	AdditiveExpression	* pdecomps_size + 8		1270013	1		+			
ANR	1270180	UnaryOperationExpression	* pdecomps_size		1270013	0					
ANR	1270181	UnaryOperator	*		1270013	0					
ANR	1270182	Identifier	pdecomps_size		1270013	1					
ANR	1270183	PrimaryExpression	8		1270013	1					
ANR	1270184	ExpressionStatement	"( void ) memset ( ( char * ) ( * pdecomps + * pdecomps_size ) , '\\0' , sizeof ( _decomp_t ) << 3 )"	487:8:12522:12626	1270013	1	True				
ANR	1270185	CastExpression	"( void ) memset ( ( char * ) ( * pdecomps + * pdecomps_size ) , '\\0' , sizeof ( _decomp_t ) << 3 )"		1270013	0					
ANR	1270186	CastTarget	void		1270013	0					
ANR	1270187	CallExpression	"memset ( ( char * ) ( * pdecomps + * pdecomps_size ) , '\\0' , sizeof ( _decomp_t ) << 3 )"		1270013	1					
ANR	1270188	Callee	memset		1270013	0					
ANR	1270189	Identifier	memset		1270013	0					
ANR	1270190	ArgumentList	( char * ) ( * pdecomps + * pdecomps_size )		1270013	1					
ANR	1270191	Argument	( char * ) ( * pdecomps + * pdecomps_size )		1270013	0					
ANR	1270192	CastExpression	( char * ) ( * pdecomps + * pdecomps_size )		1270013	0					
ANR	1270193	CastTarget	char *		1270013	0					
ANR	1270194	AdditiveExpression	* pdecomps + * pdecomps_size		1270013	1		+			
ANR	1270195	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270196	UnaryOperator	*		1270013	0					
ANR	1270197	Identifier	pdecomps		1270013	1					
ANR	1270198	UnaryOperationExpression	* pdecomps_size		1270013	1					
ANR	1270199	UnaryOperator	*		1270013	0					
ANR	1270200	Identifier	pdecomps_size		1270013	1					
ANR	1270201	Argument	'\\0'		1270013	1					
ANR	1270202	PrimaryExpression	'\\0'		1270013	0					
ANR	1270203	Argument	sizeof ( _decomp_t ) << 3		1270013	2					
ANR	1270204	ShiftExpression	sizeof ( _decomp_t ) << 3		1270013	0		<<			
ANR	1270205	SizeofExpression	sizeof ( _decomp_t )		1270013	0					
ANR	1270206	Sizeof	sizeof		1270013	0					
ANR	1270207	SizeofOperand	_decomp_t		1270013	1					
ANR	1270208	PrimaryExpression	3		1270013	1					
ANR	1270209	ExpressionStatement	* pdecomps_size += 8	489:8:12636:12655	1270013	2	True				
ANR	1270210	AssignmentExpression	* pdecomps_size += 8		1270013	0		+=			
ANR	1270211	UnaryOperationExpression	* pdecomps_size		1270013	0					
ANR	1270212	UnaryOperator	*		1270013	0					
ANR	1270213	Identifier	pdecomps_size		1270013	1					
ANR	1270214	PrimaryExpression	8		1270013	1					
ANR	1270215	IfStatement	if ( i < * pdecomps_used && code != ( * pdecomps ) [ i ] . code )		1270013	8					
ANR	1270216	Condition	i < * pdecomps_used && code != ( * pdecomps ) [ i ] . code	492:8:12672:12720	1270013	0	True				
ANR	1270217	AndExpression	i < * pdecomps_used && code != ( * pdecomps ) [ i ] . code		1270013	0		&&			
ANR	1270218	RelationalExpression	i < * pdecomps_used		1270013	0		<			
ANR	1270219	Identifier	i		1270013	0					
ANR	1270220	UnaryOperationExpression	* pdecomps_used		1270013	1					
ANR	1270221	UnaryOperator	*		1270013	0					
ANR	1270222	Identifier	pdecomps_used		1270013	1					
ANR	1270223	EqualityExpression	code != ( * pdecomps ) [ i ] . code		1270013	1		!=			
ANR	1270224	Identifier	code		1270013	0					
ANR	1270225	MemberAccess	( * pdecomps ) [ i ] . code		1270013	1					
ANR	1270226	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270227	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270228	UnaryOperator	*		1270013	0					
ANR	1270229	Identifier	pdecomps		1270013	1					
ANR	1270230	Identifier	i		1270013	1					
ANR	1270231	Identifier	code		1270013	1					
ANR	1270232	CompoundStatement		44:59:1159:1159	1270013	1					
ANR	1270233	ForStatement	for ( j = * pdecomps_used ; j > i ; j -- )		1270013	0					
ANR	1270234	ForInit	j = * pdecomps_used ;	496:13:12826:12844	1270013	0	True				
ANR	1270235	AssignmentExpression	j = * pdecomps_used		1270013	0		=			
ANR	1270236	Identifier	j		1270013	0					
ANR	1270237	UnaryOperationExpression	* pdecomps_used		1270013	1					
ANR	1270238	UnaryOperator	*		1270013	0					
ANR	1270239	Identifier	pdecomps_used		1270013	1					
ANR	1270240	Condition	j > i	496:33:12846:12850	1270013	1	True				
ANR	1270241	RelationalExpression	j > i		1270013	0		>			
ANR	1270242	Identifier	j		1270013	0					
ANR	1270243	Identifier	i		1270013	1					
ANR	1270244	PostIncDecOperationExpression	j --	496:40:12853:12855	1270013	2	True				
ANR	1270245	Identifier	j		1270013	0					
ANR	1270246	IncDec	--		1270013	1					
ANR	1270247	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) & ( * pdecomps ) [ j ] , ( char * ) & ( * pdecomps ) [ j - 1 ] , sizeof ( _decomp_t ) )"	497:10:12868:12983	1270013	3	True				
ANR	1270248	CastExpression	"( void ) AC_MEMCPY ( ( char * ) & ( * pdecomps ) [ j ] , ( char * ) & ( * pdecomps ) [ j - 1 ] , sizeof ( _decomp_t ) )"		1270013	0					
ANR	1270249	CastTarget	void		1270013	0					
ANR	1270250	CallExpression	"AC_MEMCPY ( ( char * ) & ( * pdecomps ) [ j ] , ( char * ) & ( * pdecomps ) [ j - 1 ] , sizeof ( _decomp_t ) )"		1270013	1					
ANR	1270251	Callee	AC_MEMCPY		1270013	0					
ANR	1270252	Identifier	AC_MEMCPY		1270013	0					
ANR	1270253	ArgumentList	( char * ) & ( * pdecomps ) [ j ]		1270013	1					
ANR	1270254	Argument	( char * ) & ( * pdecomps ) [ j ]		1270013	0					
ANR	1270255	CastExpression	( char * ) & ( * pdecomps ) [ j ]		1270013	0					
ANR	1270256	CastTarget	char *		1270013	0					
ANR	1270257	UnaryOperationExpression	& ( * pdecomps ) [ j ]		1270013	1					
ANR	1270258	UnaryOperator	&		1270013	0					
ANR	1270259	ArrayIndexing	( * pdecomps ) [ j ]		1270013	1					
ANR	1270260	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270261	UnaryOperator	*		1270013	0					
ANR	1270262	Identifier	pdecomps		1270013	1					
ANR	1270263	Identifier	j		1270013	1					
ANR	1270264	Argument	( char * ) & ( * pdecomps ) [ j - 1 ]		1270013	1					
ANR	1270265	CastExpression	( char * ) & ( * pdecomps ) [ j - 1 ]		1270013	0					
ANR	1270266	CastTarget	char *		1270013	0					
ANR	1270267	UnaryOperationExpression	& ( * pdecomps ) [ j - 1 ]		1270013	1					
ANR	1270268	UnaryOperator	&		1270013	0					
ANR	1270269	ArrayIndexing	( * pdecomps ) [ j - 1 ]		1270013	1					
ANR	1270270	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270271	UnaryOperator	*		1270013	0					
ANR	1270272	Identifier	pdecomps		1270013	1					
ANR	1270273	AdditiveExpression	j - 1		1270013	1		-			
ANR	1270274	Identifier	j		1270013	0					
ANR	1270275	PrimaryExpression	1		1270013	1					
ANR	1270276	Argument	sizeof ( _decomp_t )		1270013	2					
ANR	1270277	SizeofExpression	sizeof ( _decomp_t )		1270013	0					
ANR	1270278	Sizeof	sizeof		1270013	0					
ANR	1270279	SizeofOperand	_decomp_t		1270013	1					
ANR	1270280	ExpressionStatement	size = dectmp_size + ( 4 - ( dectmp_size & 3 ) )	504:4:13053:13097	1270013	9	True				
ANR	1270281	AssignmentExpression	size = dectmp_size + ( 4 - ( dectmp_size & 3 ) )		1270013	0		=			
ANR	1270282	Identifier	size		1270013	0					
ANR	1270283	AdditiveExpression	dectmp_size + ( 4 - ( dectmp_size & 3 ) )		1270013	1		+			
ANR	1270284	Identifier	dectmp_size		1270013	0					
ANR	1270285	AdditiveExpression	4 - ( dectmp_size & 3 )		1270013	1		-			
ANR	1270286	PrimaryExpression	4		1270013	0					
ANR	1270287	BitAndExpression	dectmp_size & 3		1270013	1		&			
ANR	1270288	Identifier	dectmp_size		1270013	0					
ANR	1270289	PrimaryExpression	3		1270013	1					
ANR	1270290	IfStatement	if ( ( * pdecomps ) [ i ] . size < size )		1270013	10					
ANR	1270291	Condition	( * pdecomps ) [ i ] . size < size	505:8:13107:13132	1270013	0	True				
ANR	1270292	RelationalExpression	( * pdecomps ) [ i ] . size < size		1270013	0		<			
ANR	1270293	MemberAccess	( * pdecomps ) [ i ] . size		1270013	0					
ANR	1270294	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270295	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270296	UnaryOperator	*		1270013	0					
ANR	1270297	Identifier	pdecomps		1270013	1					
ANR	1270298	Identifier	i		1270013	1					
ANR	1270299	Identifier	size		1270013	1					
ANR	1270300	Identifier	size		1270013	1					
ANR	1270301	CompoundStatement		57:36:1571:1571	1270013	1					
ANR	1270302	IfStatement	if ( ( * pdecomps ) [ i ] . size == 0 )		1270013	0					
ANR	1270303	Condition	( * pdecomps ) [ i ] . size == 0	506:12:13149:13172	1270013	0	True				
ANR	1270304	EqualityExpression	( * pdecomps ) [ i ] . size == 0		1270013	0		==			
ANR	1270305	MemberAccess	( * pdecomps ) [ i ] . size		1270013	0					
ANR	1270306	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270307	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270308	UnaryOperator	*		1270013	0					
ANR	1270309	Identifier	pdecomps		1270013	1					
ANR	1270310	Identifier	i		1270013	1					
ANR	1270311	Identifier	size		1270013	1					
ANR	1270312	PrimaryExpression	0		1270013	1					
ANR	1270313	ExpressionStatement	( * pdecomps ) [ i ] . decomp = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * size )	507:10:13185:13267	1270013	1	True				
ANR	1270314	AssignmentExpression	( * pdecomps ) [ i ] . decomp = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * size )		1270013	0		=			
ANR	1270315	MemberAccess	( * pdecomps ) [ i ] . decomp		1270013	0					
ANR	1270316	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270317	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270318	UnaryOperator	*		1270013	0					
ANR	1270319	Identifier	pdecomps		1270013	1					
ANR	1270320	Identifier	i		1270013	1					
ANR	1270321	Identifier	decomp		1270013	1					
ANR	1270322	CastExpression	( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * size )		1270013	1					
ANR	1270323	CastTarget	ac_uint4 *		1270013	0					
ANR	1270324	CallExpression	malloc ( sizeof ( ac_uint4 ) * size )		1270013	1					
ANR	1270325	Callee	malloc		1270013	0					
ANR	1270326	Identifier	malloc		1270013	0					
ANR	1270327	ArgumentList	sizeof ( ac_uint4 ) * size		1270013	1					
ANR	1270328	Argument	sizeof ( ac_uint4 ) * size		1270013	0					
ANR	1270329	MultiplicativeExpression	sizeof ( ac_uint4 ) * size		1270013	0		*			
ANR	1270330	SizeofExpression	sizeof ( ac_uint4 )		1270013	0					
ANR	1270331	Sizeof	sizeof		1270013	0					
ANR	1270332	SizeofOperand	ac_uint4		1270013	1					
ANR	1270333	Identifier	size		1270013	1					
ANR	1270334	ElseStatement	else		1270013	0					
ANR	1270335	ExpressionStatement	"( * pdecomps ) [ i ] . decomp = ( ac_uint4 * ) realloc ( ( char * ) ( * pdecomps ) [ i ] . decomp , sizeof ( ac_uint4 ) * size )"	510:10:13292:13429	1270013	0	True				
ANR	1270336	AssignmentExpression	"( * pdecomps ) [ i ] . decomp = ( ac_uint4 * ) realloc ( ( char * ) ( * pdecomps ) [ i ] . decomp , sizeof ( ac_uint4 ) * size )"		1270013	0		=			
ANR	1270337	MemberAccess	( * pdecomps ) [ i ] . decomp		1270013	0					
ANR	1270338	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270339	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270340	UnaryOperator	*		1270013	0					
ANR	1270341	Identifier	pdecomps		1270013	1					
ANR	1270342	Identifier	i		1270013	1					
ANR	1270343	Identifier	decomp		1270013	1					
ANR	1270344	CastExpression	"( ac_uint4 * ) realloc ( ( char * ) ( * pdecomps ) [ i ] . decomp , sizeof ( ac_uint4 ) * size )"		1270013	1					
ANR	1270345	CastTarget	ac_uint4 *		1270013	0					
ANR	1270346	CallExpression	"realloc ( ( char * ) ( * pdecomps ) [ i ] . decomp , sizeof ( ac_uint4 ) * size )"		1270013	1					
ANR	1270347	Callee	realloc		1270013	0					
ANR	1270348	Identifier	realloc		1270013	0					
ANR	1270349	ArgumentList	( char * ) ( * pdecomps ) [ i ] . decomp		1270013	1					
ANR	1270350	Argument	( char * ) ( * pdecomps ) [ i ] . decomp		1270013	0					
ANR	1270351	CastExpression	( char * ) ( * pdecomps ) [ i ] . decomp		1270013	0					
ANR	1270352	CastTarget	char *		1270013	0					
ANR	1270353	MemberAccess	( * pdecomps ) [ i ] . decomp		1270013	1					
ANR	1270354	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270355	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270356	UnaryOperator	*		1270013	0					
ANR	1270357	Identifier	pdecomps		1270013	1					
ANR	1270358	Identifier	i		1270013	1					
ANR	1270359	Identifier	decomp		1270013	1					
ANR	1270360	Argument	sizeof ( ac_uint4 ) * size		1270013	1					
ANR	1270361	MultiplicativeExpression	sizeof ( ac_uint4 ) * size		1270013	0		*			
ANR	1270362	SizeofExpression	sizeof ( ac_uint4 )		1270013	0					
ANR	1270363	Sizeof	sizeof		1270013	0					
ANR	1270364	SizeofOperand	ac_uint4		1270013	1					
ANR	1270365	Identifier	size		1270013	1					
ANR	1270366	ExpressionStatement	( * pdecomps ) [ i ] . size = size	513:8:13439:13465	1270013	1	True				
ANR	1270367	AssignmentExpression	( * pdecomps ) [ i ] . size = size		1270013	0		=			
ANR	1270368	MemberAccess	( * pdecomps ) [ i ] . size		1270013	0					
ANR	1270369	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270370	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270371	UnaryOperator	*		1270013	0					
ANR	1270372	Identifier	pdecomps		1270013	1					
ANR	1270373	Identifier	i		1270013	1					
ANR	1270374	Identifier	size		1270013	1					
ANR	1270375	Identifier	size		1270013	1					
ANR	1270376	IfStatement	if ( ( * pdecomps ) [ i ] . code != code )		1270013	11					
ANR	1270377	Condition	( * pdecomps ) [ i ] . code != code	516:8:13482:13508	1270013	0	True				
ANR	1270378	EqualityExpression	( * pdecomps ) [ i ] . code != code		1270013	0		!=			
ANR	1270379	MemberAccess	( * pdecomps ) [ i ] . code		1270013	0					
ANR	1270380	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270381	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270382	UnaryOperator	*		1270013	0					
ANR	1270383	Identifier	pdecomps		1270013	1					
ANR	1270384	Identifier	i		1270013	1					
ANR	1270385	Identifier	code		1270013	1					
ANR	1270386	Identifier	code		1270013	1					
ANR	1270387	ExpressionStatement	( * pdecomps_used ) ++	517:6:13517:13535	1270013	1	True				
ANR	1270388	PostIncDecOperationExpression	( * pdecomps_used ) ++		1270013	0					
ANR	1270389	UnaryOperationExpression	* pdecomps_used		1270013	0					
ANR	1270390	UnaryOperator	*		1270013	0					
ANR	1270391	Identifier	pdecomps_used		1270013	1					
ANR	1270392	IncDec	++		1270013	1					
ANR	1270393	ExpressionStatement	( * pdecomps ) [ i ] . code = code	519:4:13542:13568	1270013	12	True				
ANR	1270394	AssignmentExpression	( * pdecomps ) [ i ] . code = code		1270013	0		=			
ANR	1270395	MemberAccess	( * pdecomps ) [ i ] . code		1270013	0					
ANR	1270396	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270397	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270398	UnaryOperator	*		1270013	0					
ANR	1270399	Identifier	pdecomps		1270013	1					
ANR	1270400	Identifier	i		1270013	1					
ANR	1270401	Identifier	code		1270013	1					
ANR	1270402	Identifier	code		1270013	1					
ANR	1270403	ExpressionStatement	( * pdecomps ) [ i ] . used = dectmp_size	520:4:13574:13607	1270013	13	True				
ANR	1270404	AssignmentExpression	( * pdecomps ) [ i ] . used = dectmp_size		1270013	0		=			
ANR	1270405	MemberAccess	( * pdecomps ) [ i ] . used		1270013	0					
ANR	1270406	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270407	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270408	UnaryOperator	*		1270013	0					
ANR	1270409	Identifier	pdecomps		1270013	1					
ANR	1270410	Identifier	i		1270013	1					
ANR	1270411	Identifier	used		1270013	1					
ANR	1270412	Identifier	dectmp_size		1270013	1					
ANR	1270413	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) ( * pdecomps ) [ i ] . decomp , ( char * ) dectmp , sizeof ( ac_uint4 ) * dectmp_size )"	521:4:13613:13728	1270013	14	True				
ANR	1270414	CastExpression	"( void ) AC_MEMCPY ( ( char * ) ( * pdecomps ) [ i ] . decomp , ( char * ) dectmp , sizeof ( ac_uint4 ) * dectmp_size )"		1270013	0					
ANR	1270415	CastTarget	void		1270013	0					
ANR	1270416	CallExpression	"AC_MEMCPY ( ( char * ) ( * pdecomps ) [ i ] . decomp , ( char * ) dectmp , sizeof ( ac_uint4 ) * dectmp_size )"		1270013	1					
ANR	1270417	Callee	AC_MEMCPY		1270013	0					
ANR	1270418	Identifier	AC_MEMCPY		1270013	0					
ANR	1270419	ArgumentList	( char * ) ( * pdecomps ) [ i ] . decomp		1270013	1					
ANR	1270420	Argument	( char * ) ( * pdecomps ) [ i ] . decomp		1270013	0					
ANR	1270421	CastExpression	( char * ) ( * pdecomps ) [ i ] . decomp		1270013	0					
ANR	1270422	CastTarget	char *		1270013	0					
ANR	1270423	MemberAccess	( * pdecomps ) [ i ] . decomp		1270013	1					
ANR	1270424	ArrayIndexing	( * pdecomps ) [ i ]		1270013	0					
ANR	1270425	UnaryOperationExpression	* pdecomps		1270013	0					
ANR	1270426	UnaryOperator	*		1270013	0					
ANR	1270427	Identifier	pdecomps		1270013	1					
ANR	1270428	Identifier	i		1270013	1					
ANR	1270429	Identifier	decomp		1270013	1					
ANR	1270430	Argument	( char * ) dectmp		1270013	1					
ANR	1270431	CastExpression	( char * ) dectmp		1270013	0					
ANR	1270432	CastTarget	char *		1270013	0					
ANR	1270433	Identifier	dectmp		1270013	1					
ANR	1270434	Argument	sizeof ( ac_uint4 ) * dectmp_size		1270013	2					
ANR	1270435	MultiplicativeExpression	sizeof ( ac_uint4 ) * dectmp_size		1270013	0		*			
ANR	1270436	SizeofExpression	sizeof ( ac_uint4 )		1270013	0					
ANR	1270437	Sizeof	sizeof		1270013	0					
ANR	1270438	SizeofOperand	ac_uint4		1270013	1					
ANR	1270439	Identifier	dectmp_size		1270013	1					
ANR	1270440	IfStatement	if ( ! compat && dectmp_size == 2 )		1270013	15					
ANR	1270441	Condition	! compat && dectmp_size == 2	528:8:13908:13934	1270013	0	True				
ANR	1270442	AndExpression	! compat && dectmp_size == 2		1270013	0		&&			
ANR	1270443	UnaryOperationExpression	! compat		1270013	0					
ANR	1270444	UnaryOperator	!		1270013	0					
ANR	1270445	Identifier	compat		1270013	1					
ANR	1270446	EqualityExpression	dectmp_size == 2		1270013	1		==			
ANR	1270447	Identifier	dectmp_size		1270013	0					
ANR	1270448	PrimaryExpression	2		1270013	1					
ANR	1270449	ExpressionStatement	comps_used ++	529:6:13943:13955	1270013	1	True				
ANR	1270450	PostIncDecOperationExpression	comps_used ++		1270013	0					
ANR	1270451	Identifier	comps_used		1270013	0					
ANR	1270452	IncDec	++		1270013	1					
ANR	1270453	ReturnType	static void		1270013	1					
ANR	1270454	Identifier	add_decomp		1270013	2					
ANR	1270455	ParameterList	"ac_uint4 code , short compat"		1270013	3					
ANR	1270456	Parameter	ac_uint4 code	448:11:11534:11546	1270013	0	True				
ANR	1270457	ParameterType	ac_uint4		1270013	0					
ANR	1270458	Identifier	code		1270013	1					
ANR	1270459	Parameter	short compat	448:26:11549:11560	1270013	1	True				
ANR	1270460	ParameterType	short		1270013	0					
ANR	1270461	Identifier	compat		1270013	1					
ANR	1270462	CFGEntryNode	ENTRY		1270013		True				
ANR	1270463	CFGExitNode	EXIT		1270013		True				
ANR	1270464	Symbol	pdecomps		1270013						
ANR	1270465	Symbol	pdecomps_size		1270013						
ANR	1270466	Symbol	code		1270013						
ANR	1270467	Symbol	& kdecomps_used		1270013						
ANR	1270468	Symbol	comps_used		1270013						
ANR	1270469	Symbol	pdecomps_used		1270013						
ANR	1270470	Symbol	& kdecomps_size		1270013						
ANR	1270471	Symbol	realloc		1270013						
ANR	1270472	Symbol	dectmp_size		1270013						
ANR	1270473	Symbol	& kdecomps		1270013						
ANR	1270474	Symbol	& decomps_size		1270013						
ANR	1270475	Symbol	* pdecomps_size		1270013						
ANR	1270476	Symbol	& decomps		1270013						
ANR	1270477	Symbol	& decomps_used		1270013						
ANR	1270478	Symbol	* pdecomps_used		1270013						
ANR	1270479	Symbol	* * pdecomps		1270013						
ANR	1270480	Symbol	( * pdecomps ) [ i ] . code		1270013						
ANR	1270481	Symbol	malloc		1270013						
ANR	1270482	Symbol	( * pdecomps ) [ i ] . decomp		1270013						
ANR	1270483	Symbol	* pdecomps		1270013						
ANR	1270484	Symbol	i		1270013						
ANR	1270485	Symbol	j		1270013						
ANR	1270486	Symbol	* i		1270013						
ANR	1270487	Symbol	size		1270013						
ANR	1270488	Symbol	( * pdecomps ) [ i ] . used		1270013						
ANR	1270489	Symbol	dectmp		1270013						
ANR	1270490	Symbol	( * pdecomps ) [ i ] . size		1270013						
ANR	1270491	Symbol	compat		1270013						
ANR	1270492	Function	add_title	532:0:13960:14905							
ANR	1270493	FunctionDef	add_title (ac_uint4 code)		1270492	0					
ANR	1270494	CompoundStatement		534:0:13997:14905	1270492	0					
ANR	1270495	IdentifierDeclStatement	"ac_uint4 i , j ;"	535:4:14003:14016	1270492	0	True				
ANR	1270496	IdentifierDecl	i		1270492	0					
ANR	1270497	IdentifierDeclType	ac_uint4		1270492	0					
ANR	1270498	Identifier	i		1270492	1					
ANR	1270499	IdentifierDecl	j		1270492	1					
ANR	1270500	IdentifierDeclType	ac_uint4		1270492	0					
ANR	1270501	Identifier	j		1270492	1					
ANR	1270502	ExpressionStatement	cases [ 2 ] = code	540:4:14076:14091	1270492	1	True				
ANR	1270503	AssignmentExpression	cases [ 2 ] = code		1270492	0		=			
ANR	1270504	ArrayIndexing	cases [ 2 ]		1270492	0					
ANR	1270505	Identifier	cases		1270492	0					
ANR	1270506	PrimaryExpression	2		1270492	1					
ANR	1270507	Identifier	code		1270492	1					
ANR	1270508	IfStatement	if ( title_used == title_size )		1270492	2					
ANR	1270509	Condition	title_used == title_size	542:8:14102:14125	1270492	0	True				
ANR	1270510	EqualityExpression	title_used == title_size		1270492	0		==			
ANR	1270511	Identifier	title_used		1270492	0					
ANR	1270512	Identifier	title_size		1270492	1					
ANR	1270513	CompoundStatement		9:34:130:130	1270492	1					
ANR	1270514	IfStatement	if ( title_size == 0 )		1270492	0					
ANR	1270515	Condition	title_size == 0	543:12:14142:14156	1270492	0	True				
ANR	1270516	EqualityExpression	title_size == 0		1270492	0		==			
ANR	1270517	Identifier	title_size		1270492	0					
ANR	1270518	PrimaryExpression	0		1270492	1					
ANR	1270519	ExpressionStatement	title = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )	544:10:14169:14217	1270492	1	True				
ANR	1270520	AssignmentExpression	title = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		1270492	0		=			
ANR	1270521	Identifier	title		1270492	0					
ANR	1270522	CastExpression	( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		1270492	1					
ANR	1270523	CastTarget	_case_t *		1270492	0					
ANR	1270524	CallExpression	malloc ( sizeof ( _case_t ) << 3 )		1270492	1					
ANR	1270525	Callee	malloc		1270492	0					
ANR	1270526	Identifier	malloc		1270492	0					
ANR	1270527	ArgumentList	sizeof ( _case_t ) << 3		1270492	1					
ANR	1270528	Argument	sizeof ( _case_t ) << 3		1270492	0					
ANR	1270529	ShiftExpression	sizeof ( _case_t ) << 3		1270492	0		<<			
ANR	1270530	SizeofExpression	sizeof ( _case_t )		1270492	0					
ANR	1270531	Sizeof	sizeof		1270492	0					
ANR	1270532	SizeofOperand	_case_t		1270492	1					
ANR	1270533	PrimaryExpression	3		1270492	1					
ANR	1270534	ElseStatement	else		1270492	0					
ANR	1270535	ExpressionStatement	"title = ( _case_t * ) realloc ( ( char * ) title , sizeof ( _case_t ) * ( title_size + 8 ) )"	546:10:14242:14359	1270492	0	True				
ANR	1270536	AssignmentExpression	"title = ( _case_t * ) realloc ( ( char * ) title , sizeof ( _case_t ) * ( title_size + 8 ) )"		1270492	0		=			
ANR	1270537	Identifier	title		1270492	0					
ANR	1270538	CastExpression	"( _case_t * ) realloc ( ( char * ) title , sizeof ( _case_t ) * ( title_size + 8 ) )"		1270492	1					
ANR	1270539	CastTarget	_case_t *		1270492	0					
ANR	1270540	CallExpression	"realloc ( ( char * ) title , sizeof ( _case_t ) * ( title_size + 8 ) )"		1270492	1					
ANR	1270541	Callee	realloc		1270492	0					
ANR	1270542	Identifier	realloc		1270492	0					
ANR	1270543	ArgumentList	( char * ) title		1270492	1					
ANR	1270544	Argument	( char * ) title		1270492	0					
ANR	1270545	CastExpression	( char * ) title		1270492	0					
ANR	1270546	CastTarget	char *		1270492	0					
ANR	1270547	Identifier	title		1270492	1					
ANR	1270548	Argument	sizeof ( _case_t ) * ( title_size + 8 )		1270492	1					
ANR	1270549	MultiplicativeExpression	sizeof ( _case_t ) * ( title_size + 8 )		1270492	0		*			
ANR	1270550	SizeofExpression	sizeof ( _case_t )		1270492	0					
ANR	1270551	Sizeof	sizeof		1270492	0					
ANR	1270552	SizeofOperand	_case_t		1270492	1					
ANR	1270553	AdditiveExpression	title_size + 8		1270492	1		+			
ANR	1270554	Identifier	title_size		1270492	0					
ANR	1270555	PrimaryExpression	8		1270492	1					
ANR	1270556	ExpressionStatement	title_size += 8	548:8:14369:14384	1270492	1	True				
ANR	1270557	AssignmentExpression	title_size += 8		1270492	0		+=			
ANR	1270558	Identifier	title_size		1270492	0					
ANR	1270559	PrimaryExpression	8		1270492	1					
ANR	1270560	ForStatement	for ( i = 0 ; i < title_used && code > title [ i ] . key ; i ++ )		1270492	3					
ANR	1270561	ForInit	i = 0 ;	554:9:14452:14457	1270492	0	True				
ANR	1270562	AssignmentExpression	i = 0		1270492	0		=			
ANR	1270563	Identifier	i		1270492	0					
ANR	1270564	PrimaryExpression	0		1270492	1					
ANR	1270565	Condition	i < title_used && code > title [ i ] . key	554:16:14459:14495	1270492	1	True				
ANR	1270566	AndExpression	i < title_used && code > title [ i ] . key		1270492	0		&&			
ANR	1270567	RelationalExpression	i < title_used		1270492	0		<			
ANR	1270568	Identifier	i		1270492	0					
ANR	1270569	Identifier	title_used		1270492	1					
ANR	1270570	RelationalExpression	code > title [ i ] . key		1270492	1		>			
ANR	1270571	Identifier	code		1270492	0					
ANR	1270572	MemberAccess	title [ i ] . key		1270492	1					
ANR	1270573	ArrayIndexing	title [ i ]		1270492	0					
ANR	1270574	Identifier	title		1270492	0					
ANR	1270575	Identifier	i		1270492	1					
ANR	1270576	Identifier	key		1270492	1					
ANR	1270577	PostIncDecOperationExpression	i ++	554:55:14498:14500	1270492	2	True				
ANR	1270578	Identifier	i		1270492	0					
ANR	1270579	IncDec	++		1270492	1					
ANR	1270580	ExpressionStatement		554:60:14503:14503	1270492	3	True				
ANR	1270581	IfStatement	if ( i < title_used )		1270492	4					
ANR	1270582	Condition	i < title_used	556:8:14514:14527	1270492	0	True				
ANR	1270583	RelationalExpression	i < title_used		1270492	0		<			
ANR	1270584	Identifier	i		1270492	0					
ANR	1270585	Identifier	title_used		1270492	1					
ANR	1270586	CompoundStatement		23:24:532:532	1270492	1					
ANR	1270587	ForStatement	for ( j = title_used ; j > i ; j -- )		1270492	0					
ANR	1270588	ForInit	j = title_used ;	560:13:14606:14620	1270492	0	True				
ANR	1270589	AssignmentExpression	j = title_used		1270492	0		=			
ANR	1270590	Identifier	j		1270492	0					
ANR	1270591	Identifier	title_used		1270492	1					
ANR	1270592	Condition	j > i	560:29:14622:14626	1270492	1	True				
ANR	1270593	RelationalExpression	j > i		1270492	0		>			
ANR	1270594	Identifier	j		1270492	0					
ANR	1270595	Identifier	i		1270492	1					
ANR	1270596	PostIncDecOperationExpression	j --	560:36:14629:14631	1270492	2	True				
ANR	1270597	Identifier	j		1270492	0					
ANR	1270598	IncDec	--		1270492	1					
ANR	1270599	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) & title [ j ] , ( char * ) & title [ j - 1 ] , sizeof ( _case_t ) )"	561:10:14644:14745	1270492	3	True				
ANR	1270600	CastExpression	"( void ) AC_MEMCPY ( ( char * ) & title [ j ] , ( char * ) & title [ j - 1 ] , sizeof ( _case_t ) )"		1270492	0					
ANR	1270601	CastTarget	void		1270492	0					
ANR	1270602	CallExpression	"AC_MEMCPY ( ( char * ) & title [ j ] , ( char * ) & title [ j - 1 ] , sizeof ( _case_t ) )"		1270492	1					
ANR	1270603	Callee	AC_MEMCPY		1270492	0					
ANR	1270604	Identifier	AC_MEMCPY		1270492	0					
ANR	1270605	ArgumentList	( char * ) & title [ j ]		1270492	1					
ANR	1270606	Argument	( char * ) & title [ j ]		1270492	0					
ANR	1270607	CastExpression	( char * ) & title [ j ]		1270492	0					
ANR	1270608	CastTarget	char *		1270492	0					
ANR	1270609	UnaryOperationExpression	& title [ j ]		1270492	1					
ANR	1270610	UnaryOperator	&		1270492	0					
ANR	1270611	ArrayIndexing	title [ j ]		1270492	1					
ANR	1270612	Identifier	title		1270492	0					
ANR	1270613	Identifier	j		1270492	1					
ANR	1270614	Argument	( char * ) & title [ j - 1 ]		1270492	1					
ANR	1270615	CastExpression	( char * ) & title [ j - 1 ]		1270492	0					
ANR	1270616	CastTarget	char *		1270492	0					
ANR	1270617	UnaryOperationExpression	& title [ j - 1 ]		1270492	1					
ANR	1270618	UnaryOperator	&		1270492	0					
ANR	1270619	ArrayIndexing	title [ j - 1 ]		1270492	1					
ANR	1270620	Identifier	title		1270492	0					
ANR	1270621	AdditiveExpression	j - 1		1270492	1		-			
ANR	1270622	Identifier	j		1270492	0					
ANR	1270623	PrimaryExpression	1		1270492	1					
ANR	1270624	Argument	sizeof ( _case_t )		1270492	2					
ANR	1270625	SizeofExpression	sizeof ( _case_t )		1270492	0					
ANR	1270626	Sizeof	sizeof		1270492	0					
ANR	1270627	SizeofOperand	_case_t		1270492	1					
ANR	1270628	ExpressionStatement	title [ i ] . key = cases [ 2 ]	565:4:14758:14781	1270492	5	True				
ANR	1270629	AssignmentExpression	title [ i ] . key = cases [ 2 ]		1270492	0		=			
ANR	1270630	MemberAccess	title [ i ] . key		1270492	0					
ANR	1270631	ArrayIndexing	title [ i ]		1270492	0					
ANR	1270632	Identifier	title		1270492	0					
ANR	1270633	Identifier	i		1270492	1					
ANR	1270634	Identifier	key		1270492	1					
ANR	1270635	ArrayIndexing	cases [ 2 ]		1270492	1					
ANR	1270636	Identifier	cases		1270492	0					
ANR	1270637	PrimaryExpression	2		1270492	1					
ANR	1270638	ExpressionStatement	title [ i ] . other1 = cases [ 0 ]	566:4:14802:14828	1270492	6	True				
ANR	1270639	AssignmentExpression	title [ i ] . other1 = cases [ 0 ]		1270492	0		=			
ANR	1270640	MemberAccess	title [ i ] . other1		1270492	0					
ANR	1270641	ArrayIndexing	title [ i ]		1270492	0					
ANR	1270642	Identifier	title		1270492	0					
ANR	1270643	Identifier	i		1270492	1					
ANR	1270644	Identifier	other1		1270492	1					
ANR	1270645	ArrayIndexing	cases [ 0 ]		1270492	1					
ANR	1270646	Identifier	cases		1270492	0					
ANR	1270647	PrimaryExpression	0		1270492	1					
ANR	1270648	ExpressionStatement	title [ i ] . other2 = cases [ 1 ]	567:4:14846:14872	1270492	7	True				
ANR	1270649	AssignmentExpression	title [ i ] . other2 = cases [ 1 ]		1270492	0		=			
ANR	1270650	MemberAccess	title [ i ] . other2		1270492	0					
ANR	1270651	ArrayIndexing	title [ i ]		1270492	0					
ANR	1270652	Identifier	title		1270492	0					
ANR	1270653	Identifier	i		1270492	1					
ANR	1270654	Identifier	other2		1270492	1					
ANR	1270655	ArrayIndexing	cases [ 1 ]		1270492	1					
ANR	1270656	Identifier	cases		1270492	0					
ANR	1270657	PrimaryExpression	1		1270492	1					
ANR	1270658	ExpressionStatement	title_used ++	569:4:14891:14903	1270492	8	True				
ANR	1270659	PostIncDecOperationExpression	title_used ++		1270492	0					
ANR	1270660	Identifier	title_used		1270492	0					
ANR	1270661	IncDec	++		1270492	1					
ANR	1270662	ReturnType	static void		1270492	1					
ANR	1270663	Identifier	add_title		1270492	2					
ANR	1270664	ParameterList	ac_uint4 code		1270492	3					
ANR	1270665	Parameter	ac_uint4 code	533:10:13982:13994	1270492	0	True				
ANR	1270666	ParameterType	ac_uint4		1270492	0					
ANR	1270667	Identifier	code		1270492	1					
ANR	1270668	CFGEntryNode	ENTRY		1270492		True				
ANR	1270669	CFGExitNode	EXIT		1270492		True				
ANR	1270670	Symbol	malloc		1270492						
ANR	1270671	Symbol	code		1270492						
ANR	1270672	Symbol	cases		1270492						
ANR	1270673	Symbol	title_size		1270492						
ANR	1270674	Symbol	i		1270492						
ANR	1270675	Symbol	title_used		1270492						
ANR	1270676	Symbol	j		1270492						
ANR	1270677	Symbol	realloc		1270492						
ANR	1270678	Symbol	* cases		1270492						
ANR	1270679	Symbol	title		1270492						
ANR	1270680	Symbol	title [ i ] . other1		1270492						
ANR	1270681	Symbol	title [ i ] . other2		1270492						
ANR	1270682	Symbol	title [ i ] . key		1270492						
ANR	1270683	Symbol	* i		1270492						
ANR	1270684	Symbol	* title		1270492						
ANR	1270685	Function	add_upper	572:0:14908:16014							
ANR	1270686	FunctionDef	add_upper (ac_uint4 code)		1270685	0					
ANR	1270687	CompoundStatement		574:0:14945:16014	1270685	0					
ANR	1270688	IdentifierDeclStatement	"ac_uint4 i , j ;"	575:4:14951:14964	1270685	0	True				
ANR	1270689	IdentifierDecl	i		1270685	0					
ANR	1270690	IdentifierDeclType	ac_uint4		1270685	0					
ANR	1270691	Identifier	i		1270685	1					
ANR	1270692	IdentifierDecl	j		1270685	1					
ANR	1270693	IdentifierDeclType	ac_uint4		1270685	0					
ANR	1270694	Identifier	j		1270685	1					
ANR	1270695	ExpressionStatement	cases [ 0 ] = code	580:4:15024:15039	1270685	1	True				
ANR	1270696	AssignmentExpression	cases [ 0 ] = code		1270685	0		=			
ANR	1270697	ArrayIndexing	cases [ 0 ]		1270685	0					
ANR	1270698	Identifier	cases		1270685	0					
ANR	1270699	PrimaryExpression	0		1270685	1					
ANR	1270700	Identifier	code		1270685	1					
ANR	1270701	IfStatement	if ( cases [ 2 ] == 0 )		1270685	2					
ANR	1270702	Condition	cases [ 2 ] == 0	586:8:15164:15176	1270685	0	True				
ANR	1270703	EqualityExpression	cases [ 2 ] == 0		1270685	0		==			
ANR	1270704	ArrayIndexing	cases [ 2 ]		1270685	0					
ANR	1270705	Identifier	cases		1270685	0					
ANR	1270706	PrimaryExpression	2		1270685	1					
ANR	1270707	PrimaryExpression	0		1270685	1					
ANR	1270708	ExpressionStatement	cases [ 2 ] = code	587:6:15185:15200	1270685	1	True				
ANR	1270709	AssignmentExpression	cases [ 2 ] = code		1270685	0		=			
ANR	1270710	ArrayIndexing	cases [ 2 ]		1270685	0					
ANR	1270711	Identifier	cases		1270685	0					
ANR	1270712	PrimaryExpression	2		1270685	1					
ANR	1270713	Identifier	code		1270685	1					
ANR	1270714	IfStatement	if ( upper_used == upper_size )		1270685	3					
ANR	1270715	Condition	upper_used == upper_size	589:8:15211:15234	1270685	0	True				
ANR	1270716	EqualityExpression	upper_used == upper_size		1270685	0		==			
ANR	1270717	Identifier	upper_used		1270685	0					
ANR	1270718	Identifier	upper_size		1270685	1					
ANR	1270719	CompoundStatement		16:34:291:291	1270685	1					
ANR	1270720	IfStatement	if ( upper_size == 0 )		1270685	0					
ANR	1270721	Condition	upper_size == 0	590:12:15251:15265	1270685	0	True				
ANR	1270722	EqualityExpression	upper_size == 0		1270685	0		==			
ANR	1270723	Identifier	upper_size		1270685	0					
ANR	1270724	PrimaryExpression	0		1270685	1					
ANR	1270725	ExpressionStatement	upper = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )	591:10:15278:15326	1270685	1	True				
ANR	1270726	AssignmentExpression	upper = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		1270685	0		=			
ANR	1270727	Identifier	upper		1270685	0					
ANR	1270728	CastExpression	( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		1270685	1					
ANR	1270729	CastTarget	_case_t *		1270685	0					
ANR	1270730	CallExpression	malloc ( sizeof ( _case_t ) << 3 )		1270685	1					
ANR	1270731	Callee	malloc		1270685	0					
ANR	1270732	Identifier	malloc		1270685	0					
ANR	1270733	ArgumentList	sizeof ( _case_t ) << 3		1270685	1					
ANR	1270734	Argument	sizeof ( _case_t ) << 3		1270685	0					
ANR	1270735	ShiftExpression	sizeof ( _case_t ) << 3		1270685	0		<<			
ANR	1270736	SizeofExpression	sizeof ( _case_t )		1270685	0					
ANR	1270737	Sizeof	sizeof		1270685	0					
ANR	1270738	SizeofOperand	_case_t		1270685	1					
ANR	1270739	PrimaryExpression	3		1270685	1					
ANR	1270740	ElseStatement	else		1270685	0					
ANR	1270741	ExpressionStatement	"upper = ( _case_t * ) realloc ( ( char * ) upper , sizeof ( _case_t ) * ( upper_size + 8 ) )"	593:10:15351:15468	1270685	0	True				
ANR	1270742	AssignmentExpression	"upper = ( _case_t * ) realloc ( ( char * ) upper , sizeof ( _case_t ) * ( upper_size + 8 ) )"		1270685	0		=			
ANR	1270743	Identifier	upper		1270685	0					
ANR	1270744	CastExpression	"( _case_t * ) realloc ( ( char * ) upper , sizeof ( _case_t ) * ( upper_size + 8 ) )"		1270685	1					
ANR	1270745	CastTarget	_case_t *		1270685	0					
ANR	1270746	CallExpression	"realloc ( ( char * ) upper , sizeof ( _case_t ) * ( upper_size + 8 ) )"		1270685	1					
ANR	1270747	Callee	realloc		1270685	0					
ANR	1270748	Identifier	realloc		1270685	0					
ANR	1270749	ArgumentList	( char * ) upper		1270685	1					
ANR	1270750	Argument	( char * ) upper		1270685	0					
ANR	1270751	CastExpression	( char * ) upper		1270685	0					
ANR	1270752	CastTarget	char *		1270685	0					
ANR	1270753	Identifier	upper		1270685	1					
ANR	1270754	Argument	sizeof ( _case_t ) * ( upper_size + 8 )		1270685	1					
ANR	1270755	MultiplicativeExpression	sizeof ( _case_t ) * ( upper_size + 8 )		1270685	0		*			
ANR	1270756	SizeofExpression	sizeof ( _case_t )		1270685	0					
ANR	1270757	Sizeof	sizeof		1270685	0					
ANR	1270758	SizeofOperand	_case_t		1270685	1					
ANR	1270759	AdditiveExpression	upper_size + 8		1270685	1		+			
ANR	1270760	Identifier	upper_size		1270685	0					
ANR	1270761	PrimaryExpression	8		1270685	1					
ANR	1270762	ExpressionStatement	upper_size += 8	595:8:15478:15493	1270685	1	True				
ANR	1270763	AssignmentExpression	upper_size += 8		1270685	0		+=			
ANR	1270764	Identifier	upper_size		1270685	0					
ANR	1270765	PrimaryExpression	8		1270685	1					
ANR	1270766	ForStatement	for ( i = 0 ; i < upper_used && code > upper [ i ] . key ; i ++ )		1270685	4					
ANR	1270767	ForInit	i = 0 ;	601:9:15561:15566	1270685	0	True				
ANR	1270768	AssignmentExpression	i = 0		1270685	0		=			
ANR	1270769	Identifier	i		1270685	0					
ANR	1270770	PrimaryExpression	0		1270685	1					
ANR	1270771	Condition	i < upper_used && code > upper [ i ] . key	601:16:15568:15604	1270685	1	True				
ANR	1270772	AndExpression	i < upper_used && code > upper [ i ] . key		1270685	0		&&			
ANR	1270773	RelationalExpression	i < upper_used		1270685	0		<			
ANR	1270774	Identifier	i		1270685	0					
ANR	1270775	Identifier	upper_used		1270685	1					
ANR	1270776	RelationalExpression	code > upper [ i ] . key		1270685	1		>			
ANR	1270777	Identifier	code		1270685	0					
ANR	1270778	MemberAccess	upper [ i ] . key		1270685	1					
ANR	1270779	ArrayIndexing	upper [ i ]		1270685	0					
ANR	1270780	Identifier	upper		1270685	0					
ANR	1270781	Identifier	i		1270685	1					
ANR	1270782	Identifier	key		1270685	1					
ANR	1270783	PostIncDecOperationExpression	i ++	601:55:15607:15609	1270685	2	True				
ANR	1270784	Identifier	i		1270685	0					
ANR	1270785	IncDec	++		1270685	1					
ANR	1270786	ExpressionStatement		601:60:15612:15612	1270685	3	True				
ANR	1270787	IfStatement	if ( i < upper_used )		1270685	5					
ANR	1270788	Condition	i < upper_used	603:8:15623:15636	1270685	0	True				
ANR	1270789	RelationalExpression	i < upper_used		1270685	0		<			
ANR	1270790	Identifier	i		1270685	0					
ANR	1270791	Identifier	upper_used		1270685	1					
ANR	1270792	CompoundStatement		30:24:693:693	1270685	1					
ANR	1270793	ForStatement	for ( j = upper_used ; j > i ; j -- )		1270685	0					
ANR	1270794	ForInit	j = upper_used ;	607:13:15715:15729	1270685	0	True				
ANR	1270795	AssignmentExpression	j = upper_used		1270685	0		=			
ANR	1270796	Identifier	j		1270685	0					
ANR	1270797	Identifier	upper_used		1270685	1					
ANR	1270798	Condition	j > i	607:29:15731:15735	1270685	1	True				
ANR	1270799	RelationalExpression	j > i		1270685	0		>			
ANR	1270800	Identifier	j		1270685	0					
ANR	1270801	Identifier	i		1270685	1					
ANR	1270802	PostIncDecOperationExpression	j --	607:36:15738:15740	1270685	2	True				
ANR	1270803	Identifier	j		1270685	0					
ANR	1270804	IncDec	--		1270685	1					
ANR	1270805	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) & upper [ j ] , ( char * ) & upper [ j - 1 ] , sizeof ( _case_t ) )"	608:10:15753:15854	1270685	3	True				
ANR	1270806	CastExpression	"( void ) AC_MEMCPY ( ( char * ) & upper [ j ] , ( char * ) & upper [ j - 1 ] , sizeof ( _case_t ) )"		1270685	0					
ANR	1270807	CastTarget	void		1270685	0					
ANR	1270808	CallExpression	"AC_MEMCPY ( ( char * ) & upper [ j ] , ( char * ) & upper [ j - 1 ] , sizeof ( _case_t ) )"		1270685	1					
ANR	1270809	Callee	AC_MEMCPY		1270685	0					
ANR	1270810	Identifier	AC_MEMCPY		1270685	0					
ANR	1270811	ArgumentList	( char * ) & upper [ j ]		1270685	1					
ANR	1270812	Argument	( char * ) & upper [ j ]		1270685	0					
ANR	1270813	CastExpression	( char * ) & upper [ j ]		1270685	0					
ANR	1270814	CastTarget	char *		1270685	0					
ANR	1270815	UnaryOperationExpression	& upper [ j ]		1270685	1					
ANR	1270816	UnaryOperator	&		1270685	0					
ANR	1270817	ArrayIndexing	upper [ j ]		1270685	1					
ANR	1270818	Identifier	upper		1270685	0					
ANR	1270819	Identifier	j		1270685	1					
ANR	1270820	Argument	( char * ) & upper [ j - 1 ]		1270685	1					
ANR	1270821	CastExpression	( char * ) & upper [ j - 1 ]		1270685	0					
ANR	1270822	CastTarget	char *		1270685	0					
ANR	1270823	UnaryOperationExpression	& upper [ j - 1 ]		1270685	1					
ANR	1270824	UnaryOperator	&		1270685	0					
ANR	1270825	ArrayIndexing	upper [ j - 1 ]		1270685	1					
ANR	1270826	Identifier	upper		1270685	0					
ANR	1270827	AdditiveExpression	j - 1		1270685	1		-			
ANR	1270828	Identifier	j		1270685	0					
ANR	1270829	PrimaryExpression	1		1270685	1					
ANR	1270830	Argument	sizeof ( _case_t )		1270685	2					
ANR	1270831	SizeofExpression	sizeof ( _case_t )		1270685	0					
ANR	1270832	Sizeof	sizeof		1270685	0					
ANR	1270833	SizeofOperand	_case_t		1270685	1					
ANR	1270834	ExpressionStatement	upper [ i ] . key = cases [ 0 ]	612:4:15867:15890	1270685	6	True				
ANR	1270835	AssignmentExpression	upper [ i ] . key = cases [ 0 ]		1270685	0		=			
ANR	1270836	MemberAccess	upper [ i ] . key		1270685	0					
ANR	1270837	ArrayIndexing	upper [ i ]		1270685	0					
ANR	1270838	Identifier	upper		1270685	0					
ANR	1270839	Identifier	i		1270685	1					
ANR	1270840	Identifier	key		1270685	1					
ANR	1270841	ArrayIndexing	cases [ 0 ]		1270685	1					
ANR	1270842	Identifier	cases		1270685	0					
ANR	1270843	PrimaryExpression	0		1270685	1					
ANR	1270844	ExpressionStatement	upper [ i ] . other1 = cases [ 1 ]	613:4:15911:15937	1270685	7	True				
ANR	1270845	AssignmentExpression	upper [ i ] . other1 = cases [ 1 ]		1270685	0		=			
ANR	1270846	MemberAccess	upper [ i ] . other1		1270685	0					
ANR	1270847	ArrayIndexing	upper [ i ]		1270685	0					
ANR	1270848	Identifier	upper		1270685	0					
ANR	1270849	Identifier	i		1270685	1					
ANR	1270850	Identifier	other1		1270685	1					
ANR	1270851	ArrayIndexing	cases [ 1 ]		1270685	1					
ANR	1270852	Identifier	cases		1270685	0					
ANR	1270853	PrimaryExpression	1		1270685	1					
ANR	1270854	ExpressionStatement	upper [ i ] . other2 = cases [ 2 ]	614:4:15955:15981	1270685	8	True				
ANR	1270855	AssignmentExpression	upper [ i ] . other2 = cases [ 2 ]		1270685	0		=			
ANR	1270856	MemberAccess	upper [ i ] . other2		1270685	0					
ANR	1270857	ArrayIndexing	upper [ i ]		1270685	0					
ANR	1270858	Identifier	upper		1270685	0					
ANR	1270859	Identifier	i		1270685	1					
ANR	1270860	Identifier	other2		1270685	1					
ANR	1270861	ArrayIndexing	cases [ 2 ]		1270685	1					
ANR	1270862	Identifier	cases		1270685	0					
ANR	1270863	PrimaryExpression	2		1270685	1					
ANR	1270864	ExpressionStatement	upper_used ++	616:4:16000:16012	1270685	9	True				
ANR	1270865	PostIncDecOperationExpression	upper_used ++		1270685	0					
ANR	1270866	Identifier	upper_used		1270685	0					
ANR	1270867	IncDec	++		1270685	1					
ANR	1270868	ReturnType	static void		1270685	1					
ANR	1270869	Identifier	add_upper		1270685	2					
ANR	1270870	ParameterList	ac_uint4 code		1270685	3					
ANR	1270871	Parameter	ac_uint4 code	573:10:14930:14942	1270685	0	True				
ANR	1270872	ParameterType	ac_uint4		1270685	0					
ANR	1270873	Identifier	code		1270685	1					
ANR	1270874	CFGEntryNode	ENTRY		1270685		True				
ANR	1270875	CFGExitNode	EXIT		1270685		True				
ANR	1270876	Symbol	malloc		1270685						
ANR	1270877	Symbol	code		1270685						
ANR	1270878	Symbol	cases		1270685						
ANR	1270879	Symbol	upper		1270685						
ANR	1270880	Symbol	i		1270685						
ANR	1270881	Symbol	j		1270685						
ANR	1270882	Symbol	* upper		1270685						
ANR	1270883	Symbol	realloc		1270685						
ANR	1270884	Symbol	* cases		1270685						
ANR	1270885	Symbol	upper [ i ] . other1		1270685						
ANR	1270886	Symbol	upper_size		1270685						
ANR	1270887	Symbol	upper [ i ] . other2		1270685						
ANR	1270888	Symbol	upper_used		1270685						
ANR	1270889	Symbol	* i		1270685						
ANR	1270890	Symbol	upper [ i ] . key		1270685						
ANR	1270891	Function	add_lower	619:0:16017:17121							
ANR	1270892	FunctionDef	add_lower (ac_uint4 code)		1270891	0					
ANR	1270893	CompoundStatement		621:0:16054:17121	1270891	0					
ANR	1270894	IdentifierDeclStatement	"ac_uint4 i , j ;"	622:4:16060:16073	1270891	0	True				
ANR	1270895	IdentifierDecl	i		1270891	0					
ANR	1270896	IdentifierDeclType	ac_uint4		1270891	0					
ANR	1270897	Identifier	i		1270891	1					
ANR	1270898	IdentifierDecl	j		1270891	1					
ANR	1270899	IdentifierDeclType	ac_uint4		1270891	0					
ANR	1270900	Identifier	j		1270891	1					
ANR	1270901	ExpressionStatement	cases [ 1 ] = code	627:4:16133:16148	1270891	1	True				
ANR	1270902	AssignmentExpression	cases [ 1 ] = code		1270891	0		=			
ANR	1270903	ArrayIndexing	cases [ 1 ]		1270891	0					
ANR	1270904	Identifier	cases		1270891	0					
ANR	1270905	PrimaryExpression	1		1270891	1					
ANR	1270906	Identifier	code		1270891	1					
ANR	1270907	IfStatement	if ( cases [ 2 ] == 0 )		1270891	2					
ANR	1270908	Condition	cases [ 2 ] == 0	633:8:16267:16279	1270891	0	True				
ANR	1270909	EqualityExpression	cases [ 2 ] == 0		1270891	0		==			
ANR	1270910	ArrayIndexing	cases [ 2 ]		1270891	0					
ANR	1270911	Identifier	cases		1270891	0					
ANR	1270912	PrimaryExpression	2		1270891	1					
ANR	1270913	PrimaryExpression	0		1270891	1					
ANR	1270914	ExpressionStatement	cases [ 2 ] = cases [ 0 ]	634:6:16288:16307	1270891	1	True				
ANR	1270915	AssignmentExpression	cases [ 2 ] = cases [ 0 ]		1270891	0		=			
ANR	1270916	ArrayIndexing	cases [ 2 ]		1270891	0					
ANR	1270917	Identifier	cases		1270891	0					
ANR	1270918	PrimaryExpression	2		1270891	1					
ANR	1270919	ArrayIndexing	cases [ 0 ]		1270891	1					
ANR	1270920	Identifier	cases		1270891	0					
ANR	1270921	PrimaryExpression	0		1270891	1					
ANR	1270922	IfStatement	if ( lower_used == lower_size )		1270891	3					
ANR	1270923	Condition	lower_used == lower_size	636:8:16318:16341	1270891	0	True				
ANR	1270924	EqualityExpression	lower_used == lower_size		1270891	0		==			
ANR	1270925	Identifier	lower_used		1270891	0					
ANR	1270926	Identifier	lower_size		1270891	1					
ANR	1270927	CompoundStatement		16:34:289:289	1270891	1					
ANR	1270928	IfStatement	if ( lower_size == 0 )		1270891	0					
ANR	1270929	Condition	lower_size == 0	637:12:16358:16372	1270891	0	True				
ANR	1270930	EqualityExpression	lower_size == 0		1270891	0		==			
ANR	1270931	Identifier	lower_size		1270891	0					
ANR	1270932	PrimaryExpression	0		1270891	1					
ANR	1270933	ExpressionStatement	lower = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )	638:10:16385:16433	1270891	1	True				
ANR	1270934	AssignmentExpression	lower = ( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		1270891	0		=			
ANR	1270935	Identifier	lower		1270891	0					
ANR	1270936	CastExpression	( _case_t * ) malloc ( sizeof ( _case_t ) << 3 )		1270891	1					
ANR	1270937	CastTarget	_case_t *		1270891	0					
ANR	1270938	CallExpression	malloc ( sizeof ( _case_t ) << 3 )		1270891	1					
ANR	1270939	Callee	malloc		1270891	0					
ANR	1270940	Identifier	malloc		1270891	0					
ANR	1270941	ArgumentList	sizeof ( _case_t ) << 3		1270891	1					
ANR	1270942	Argument	sizeof ( _case_t ) << 3		1270891	0					
ANR	1270943	ShiftExpression	sizeof ( _case_t ) << 3		1270891	0		<<			
ANR	1270944	SizeofExpression	sizeof ( _case_t )		1270891	0					
ANR	1270945	Sizeof	sizeof		1270891	0					
ANR	1270946	SizeofOperand	_case_t		1270891	1					
ANR	1270947	PrimaryExpression	3		1270891	1					
ANR	1270948	ElseStatement	else		1270891	0					
ANR	1270949	ExpressionStatement	"lower = ( _case_t * ) realloc ( ( char * ) lower , sizeof ( _case_t ) * ( lower_size + 8 ) )"	640:10:16458:16575	1270891	0	True				
ANR	1270950	AssignmentExpression	"lower = ( _case_t * ) realloc ( ( char * ) lower , sizeof ( _case_t ) * ( lower_size + 8 ) )"		1270891	0		=			
ANR	1270951	Identifier	lower		1270891	0					
ANR	1270952	CastExpression	"( _case_t * ) realloc ( ( char * ) lower , sizeof ( _case_t ) * ( lower_size + 8 ) )"		1270891	1					
ANR	1270953	CastTarget	_case_t *		1270891	0					
ANR	1270954	CallExpression	"realloc ( ( char * ) lower , sizeof ( _case_t ) * ( lower_size + 8 ) )"		1270891	1					
ANR	1270955	Callee	realloc		1270891	0					
ANR	1270956	Identifier	realloc		1270891	0					
ANR	1270957	ArgumentList	( char * ) lower		1270891	1					
ANR	1270958	Argument	( char * ) lower		1270891	0					
ANR	1270959	CastExpression	( char * ) lower		1270891	0					
ANR	1270960	CastTarget	char *		1270891	0					
ANR	1270961	Identifier	lower		1270891	1					
ANR	1270962	Argument	sizeof ( _case_t ) * ( lower_size + 8 )		1270891	1					
ANR	1270963	MultiplicativeExpression	sizeof ( _case_t ) * ( lower_size + 8 )		1270891	0		*			
ANR	1270964	SizeofExpression	sizeof ( _case_t )		1270891	0					
ANR	1270965	Sizeof	sizeof		1270891	0					
ANR	1270966	SizeofOperand	_case_t		1270891	1					
ANR	1270967	AdditiveExpression	lower_size + 8		1270891	1		+			
ANR	1270968	Identifier	lower_size		1270891	0					
ANR	1270969	PrimaryExpression	8		1270891	1					
ANR	1270970	ExpressionStatement	lower_size += 8	642:8:16585:16600	1270891	1	True				
ANR	1270971	AssignmentExpression	lower_size += 8		1270891	0		+=			
ANR	1270972	Identifier	lower_size		1270891	0					
ANR	1270973	PrimaryExpression	8		1270891	1					
ANR	1270974	ForStatement	for ( i = 0 ; i < lower_used && code > lower [ i ] . key ; i ++ )		1270891	4					
ANR	1270975	ForInit	i = 0 ;	648:9:16668:16673	1270891	0	True				
ANR	1270976	AssignmentExpression	i = 0		1270891	0		=			
ANR	1270977	Identifier	i		1270891	0					
ANR	1270978	PrimaryExpression	0		1270891	1					
ANR	1270979	Condition	i < lower_used && code > lower [ i ] . key	648:16:16675:16711	1270891	1	True				
ANR	1270980	AndExpression	i < lower_used && code > lower [ i ] . key		1270891	0		&&			
ANR	1270981	RelationalExpression	i < lower_used		1270891	0		<			
ANR	1270982	Identifier	i		1270891	0					
ANR	1270983	Identifier	lower_used		1270891	1					
ANR	1270984	RelationalExpression	code > lower [ i ] . key		1270891	1		>			
ANR	1270985	Identifier	code		1270891	0					
ANR	1270986	MemberAccess	lower [ i ] . key		1270891	1					
ANR	1270987	ArrayIndexing	lower [ i ]		1270891	0					
ANR	1270988	Identifier	lower		1270891	0					
ANR	1270989	Identifier	i		1270891	1					
ANR	1270990	Identifier	key		1270891	1					
ANR	1270991	PostIncDecOperationExpression	i ++	648:55:16714:16716	1270891	2	True				
ANR	1270992	Identifier	i		1270891	0					
ANR	1270993	IncDec	++		1270891	1					
ANR	1270994	ExpressionStatement		648:60:16719:16719	1270891	3	True				
ANR	1270995	IfStatement	if ( i < lower_used )		1270891	5					
ANR	1270996	Condition	i < lower_used	650:8:16730:16743	1270891	0	True				
ANR	1270997	RelationalExpression	i < lower_used		1270891	0		<			
ANR	1270998	Identifier	i		1270891	0					
ANR	1270999	Identifier	lower_used		1270891	1					
ANR	1271000	CompoundStatement		30:24:691:691	1270891	1					
ANR	1271001	ForStatement	for ( j = lower_used ; j > i ; j -- )		1270891	0					
ANR	1271002	ForInit	j = lower_used ;	654:13:16822:16836	1270891	0	True				
ANR	1271003	AssignmentExpression	j = lower_used		1270891	0		=			
ANR	1271004	Identifier	j		1270891	0					
ANR	1271005	Identifier	lower_used		1270891	1					
ANR	1271006	Condition	j > i	654:29:16838:16842	1270891	1	True				
ANR	1271007	RelationalExpression	j > i		1270891	0		>			
ANR	1271008	Identifier	j		1270891	0					
ANR	1271009	Identifier	i		1270891	1					
ANR	1271010	PostIncDecOperationExpression	j --	654:36:16845:16847	1270891	2	True				
ANR	1271011	Identifier	j		1270891	0					
ANR	1271012	IncDec	--		1270891	1					
ANR	1271013	ExpressionStatement	"( void ) AC_MEMCPY ( ( char * ) & lower [ j ] , ( char * ) & lower [ j - 1 ] , sizeof ( _case_t ) )"	655:10:16860:16961	1270891	3	True				
ANR	1271014	CastExpression	"( void ) AC_MEMCPY ( ( char * ) & lower [ j ] , ( char * ) & lower [ j - 1 ] , sizeof ( _case_t ) )"		1270891	0					
ANR	1271015	CastTarget	void		1270891	0					
ANR	1271016	CallExpression	"AC_MEMCPY ( ( char * ) & lower [ j ] , ( char * ) & lower [ j - 1 ] , sizeof ( _case_t ) )"		1270891	1					
ANR	1271017	Callee	AC_MEMCPY		1270891	0					
ANR	1271018	Identifier	AC_MEMCPY		1270891	0					
ANR	1271019	ArgumentList	( char * ) & lower [ j ]		1270891	1					
ANR	1271020	Argument	( char * ) & lower [ j ]		1270891	0					
ANR	1271021	CastExpression	( char * ) & lower [ j ]		1270891	0					
ANR	1271022	CastTarget	char *		1270891	0					
ANR	1271023	UnaryOperationExpression	& lower [ j ]		1270891	1					
ANR	1271024	UnaryOperator	&		1270891	0					
ANR	1271025	ArrayIndexing	lower [ j ]		1270891	1					
ANR	1271026	Identifier	lower		1270891	0					
ANR	1271027	Identifier	j		1270891	1					
ANR	1271028	Argument	( char * ) & lower [ j - 1 ]		1270891	1					
ANR	1271029	CastExpression	( char * ) & lower [ j - 1 ]		1270891	0					
ANR	1271030	CastTarget	char *		1270891	0					
ANR	1271031	UnaryOperationExpression	& lower [ j - 1 ]		1270891	1					
ANR	1271032	UnaryOperator	&		1270891	0					
ANR	1271033	ArrayIndexing	lower [ j - 1 ]		1270891	1					
ANR	1271034	Identifier	lower		1270891	0					
ANR	1271035	AdditiveExpression	j - 1		1270891	1		-			
ANR	1271036	Identifier	j		1270891	0					
ANR	1271037	PrimaryExpression	1		1270891	1					
ANR	1271038	Argument	sizeof ( _case_t )		1270891	2					
ANR	1271039	SizeofExpression	sizeof ( _case_t )		1270891	0					
ANR	1271040	Sizeof	sizeof		1270891	0					
ANR	1271041	SizeofOperand	_case_t		1270891	1					
ANR	1271042	ExpressionStatement	lower [ i ] . key = cases [ 1 ]	659:4:16974:16997	1270891	6	True				
ANR	1271043	AssignmentExpression	lower [ i ] . key = cases [ 1 ]		1270891	0		=			
ANR	1271044	MemberAccess	lower [ i ] . key		1270891	0					
ANR	1271045	ArrayIndexing	lower [ i ]		1270891	0					
ANR	1271046	Identifier	lower		1270891	0					
ANR	1271047	Identifier	i		1270891	1					
ANR	1271048	Identifier	key		1270891	1					
ANR	1271049	ArrayIndexing	cases [ 1 ]		1270891	1					
ANR	1271050	Identifier	cases		1270891	0					
ANR	1271051	PrimaryExpression	1		1270891	1					
ANR	1271052	ExpressionStatement	lower [ i ] . other1 = cases [ 0 ]	660:4:17018:17044	1270891	7	True				
ANR	1271053	AssignmentExpression	lower [ i ] . other1 = cases [ 0 ]		1270891	0		=			
ANR	1271054	MemberAccess	lower [ i ] . other1		1270891	0					
ANR	1271055	ArrayIndexing	lower [ i ]		1270891	0					
ANR	1271056	Identifier	lower		1270891	0					
ANR	1271057	Identifier	i		1270891	1					
ANR	1271058	Identifier	other1		1270891	1					
ANR	1271059	ArrayIndexing	cases [ 0 ]		1270891	1					
ANR	1271060	Identifier	cases		1270891	0					
ANR	1271061	PrimaryExpression	0		1270891	1					
ANR	1271062	ExpressionStatement	lower [ i ] . other2 = cases [ 2 ]	661:4:17062:17088	1270891	8	True				
ANR	1271063	AssignmentExpression	lower [ i ] . other2 = cases [ 2 ]		1270891	0		=			
ANR	1271064	MemberAccess	lower [ i ] . other2		1270891	0					
ANR	1271065	ArrayIndexing	lower [ i ]		1270891	0					
ANR	1271066	Identifier	lower		1270891	0					
ANR	1271067	Identifier	i		1270891	1					
ANR	1271068	Identifier	other2		1270891	1					
ANR	1271069	ArrayIndexing	cases [ 2 ]		1270891	1					
ANR	1271070	Identifier	cases		1270891	0					
ANR	1271071	PrimaryExpression	2		1270891	1					
ANR	1271072	ExpressionStatement	lower_used ++	663:4:17107:17119	1270891	9	True				
ANR	1271073	PostIncDecOperationExpression	lower_used ++		1270891	0					
ANR	1271074	Identifier	lower_used		1270891	0					
ANR	1271075	IncDec	++		1270891	1					
ANR	1271076	ReturnType	static void		1270891	1					
ANR	1271077	Identifier	add_lower		1270891	2					
ANR	1271078	ParameterList	ac_uint4 code		1270891	3					
ANR	1271079	Parameter	ac_uint4 code	620:10:16039:16051	1270891	0	True				
ANR	1271080	ParameterType	ac_uint4		1270891	0					
ANR	1271081	Identifier	code		1270891	1					
ANR	1271082	CFGEntryNode	ENTRY		1270891		True				
ANR	1271083	CFGExitNode	EXIT		1270891		True				
ANR	1271084	Symbol	malloc		1270891						
ANR	1271085	Symbol	code		1270891						
ANR	1271086	Symbol	cases		1270891						
ANR	1271087	Symbol	lower		1270891						
ANR	1271088	Symbol	i		1270891						
ANR	1271089	Symbol	j		1270891						
ANR	1271090	Symbol	realloc		1270891						
ANR	1271091	Symbol	* cases		1270891						
ANR	1271092	Symbol	* lower		1270891						
ANR	1271093	Symbol	lower [ i ] . other2		1270891						
ANR	1271094	Symbol	lower [ i ] . other1		1270891						
ANR	1271095	Symbol	lower [ i ] . key		1270891						
ANR	1271096	Symbol	* i		1270891						
ANR	1271097	Symbol	lower_used		1270891						
ANR	1271098	Symbol	lower_size		1270891						
ANR	1271099	Function	ordered_ccl_insert	666:0:17124:18876							
ANR	1271100	FunctionDef	"ordered_ccl_insert (ac_uint4 c , ac_uint4 ccl_code)"		1271099	0					
ANR	1271101	CompoundStatement		668:0:17186:18876	1271099	0					
ANR	1271102	IdentifierDeclStatement	"ac_uint4 i , j ;"	669:4:17192:17205	1271099	0	True				
ANR	1271103	IdentifierDecl	i		1271099	0					
ANR	1271104	IdentifierDeclType	ac_uint4		1271099	0					
ANR	1271105	Identifier	i		1271099	1					
ANR	1271106	IdentifierDecl	j		1271099	1					
ANR	1271107	IdentifierDeclType	ac_uint4		1271099	0					
ANR	1271108	Identifier	j		1271099	1					
ANR	1271109	IfStatement	if ( ccl_used == ccl_size )		1271099	1					
ANR	1271110	Condition	ccl_used == ccl_size	671:8:17216:17235	1271099	0	True				
ANR	1271111	EqualityExpression	ccl_used == ccl_size		1271099	0		==			
ANR	1271112	Identifier	ccl_used		1271099	0					
ANR	1271113	Identifier	ccl_size		1271099	1					
ANR	1271114	CompoundStatement		4:30:51:51	1271099	1					
ANR	1271115	IfStatement	if ( ccl_size == 0 )		1271099	0					
ANR	1271116	Condition	ccl_size == 0	672:12:17252:17264	1271099	0	True				
ANR	1271117	EqualityExpression	ccl_size == 0		1271099	0		==			
ANR	1271118	Identifier	ccl_size		1271099	0					
ANR	1271119	PrimaryExpression	0		1271099	1					
ANR	1271120	ExpressionStatement	ccl = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * 24 )	673:10:17277:17325	1271099	1	True				
ANR	1271121	AssignmentExpression	ccl = ( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * 24 )		1271099	0		=			
ANR	1271122	Identifier	ccl		1271099	0					
ANR	1271123	CastExpression	( ac_uint4 * ) malloc ( sizeof ( ac_uint4 ) * 24 )		1271099	1					
ANR	1271124	CastTarget	ac_uint4 *		1271099	0					
ANR	1271125	CallExpression	malloc ( sizeof ( ac_uint4 ) * 24 )		1271099	1					
ANR	1271126	Callee	malloc		1271099	0					
ANR	1271127	Identifier	malloc		1271099	0					
ANR	1271128	ArgumentList	sizeof ( ac_uint4 ) * 24		1271099	1					
ANR	1271129	Argument	sizeof ( ac_uint4 ) * 24		1271099	0					
ANR	1271130	MultiplicativeExpression	sizeof ( ac_uint4 ) * 24		1271099	0		*			
ANR	1271131	SizeofExpression	sizeof ( ac_uint4 )		1271099	0					
ANR	1271132	Sizeof	sizeof		1271099	0					
ANR	1271133	SizeofOperand	ac_uint4		1271099	1					
ANR	1271134	PrimaryExpression	24		1271099	1					
ANR	1271135	ElseStatement	else		1271099	0					
ANR	1271136	ExpressionStatement	"ccl = ( ac_uint4 * ) realloc ( ( char * ) ccl , sizeof ( ac_uint4 ) * ( ccl_size + 24 ) )"	675:10:17350:17440	1271099	0	True				
ANR	1271137	AssignmentExpression	"ccl = ( ac_uint4 * ) realloc ( ( char * ) ccl , sizeof ( ac_uint4 ) * ( ccl_size + 24 ) )"		1271099	0		=			
ANR	1271138	Identifier	ccl		1271099	0					
ANR	1271139	CastExpression	"( ac_uint4 * ) realloc ( ( char * ) ccl , sizeof ( ac_uint4 ) * ( ccl_size + 24 ) )"		1271099	1					
ANR	1271140	CastTarget	ac_uint4 *		1271099	0					
ANR	1271141	CallExpression	"realloc ( ( char * ) ccl , sizeof ( ac_uint4 ) * ( ccl_size + 24 ) )"		1271099	1					
ANR	1271142	Callee	realloc		1271099	0					
ANR	1271143	Identifier	realloc		1271099	0					
ANR	1271144	ArgumentList	( char * ) ccl		1271099	1					
ANR	1271145	Argument	( char * ) ccl		1271099	0					
ANR	1271146	CastExpression	( char * ) ccl		1271099	0					
ANR	1271147	CastTarget	char *		1271099	0					
ANR	1271148	Identifier	ccl		1271099	1					
ANR	1271149	Argument	sizeof ( ac_uint4 ) * ( ccl_size + 24 )		1271099	1					
ANR	1271150	MultiplicativeExpression	sizeof ( ac_uint4 ) * ( ccl_size + 24 )		1271099	0		*			
ANR	1271151	SizeofExpression	sizeof ( ac_uint4 )		1271099	0					
ANR	1271152	Sizeof	sizeof		1271099	0					
ANR	1271153	SizeofOperand	ac_uint4		1271099	1					
ANR	1271154	AdditiveExpression	ccl_size + 24		1271099	1		+			
ANR	1271155	Identifier	ccl_size		1271099	0					
ANR	1271156	PrimaryExpression	24		1271099	1					
ANR	1271157	ExpressionStatement	ccl_size += 24	677:8:17450:17464	1271099	1	True				
ANR	1271158	AssignmentExpression	ccl_size += 24		1271099	0		+=			
ANR	1271159	Identifier	ccl_size		1271099	0					
ANR	1271160	PrimaryExpression	24		1271099	1					
ANR	1271161	IfStatement	if ( ccl_used == 0 )		1271099	2					
ANR	1271162	Condition	ccl_used == 0	683:8:17535:17547	1271099	0	True				
ANR	1271163	EqualityExpression	ccl_used == 0		1271099	0		==			
ANR	1271164	Identifier	ccl_used		1271099	0					
ANR	1271165	PrimaryExpression	0		1271099	1					
ANR	1271166	CompoundStatement		16:23:363:363	1271099	1					
ANR	1271167	ExpressionStatement	ccl [ 0 ] = ccl [ 1 ] = c	684:8:17560:17579	1271099	0	True				
ANR	1271168	AssignmentExpression	ccl [ 0 ] = ccl [ 1 ] = c		1271099	0		=			
ANR	1271169	ArrayIndexing	ccl [ 0 ]		1271099	0					
ANR	1271170	Identifier	ccl		1271099	0					
ANR	1271171	PrimaryExpression	0		1271099	1					
ANR	1271172	AssignmentExpression	ccl [ 1 ] = c		1271099	1		=			
ANR	1271173	ArrayIndexing	ccl [ 1 ]		1271099	0					
ANR	1271174	Identifier	ccl		1271099	0					
ANR	1271175	PrimaryExpression	1		1271099	1					
ANR	1271176	Identifier	c		1271099	1					
ANR	1271177	ExpressionStatement	ccl [ 2 ] = ccl_code	685:8:17589:17606	1271099	1	True				
ANR	1271178	AssignmentExpression	ccl [ 2 ] = ccl_code		1271099	0		=			
ANR	1271179	ArrayIndexing	ccl [ 2 ]		1271099	0					
ANR	1271180	Identifier	ccl		1271099	0					
ANR	1271181	PrimaryExpression	2		1271099	1					
ANR	1271182	Identifier	ccl_code		1271099	1					
ANR	1271183	ExpressionStatement	ccl_used += 3	686:8:17616:17629	1271099	2	True				
ANR	1271184	AssignmentExpression	ccl_used += 3		1271099	0		+=			
ANR	1271185	Identifier	ccl_used		1271099	0					
ANR	1271186	PrimaryExpression	3		1271099	1					
ANR	1271187	ReturnStatement	return ;	687:8:17639:17645	1271099	3	True				
ANR	1271188	IfStatement	if ( ccl_code == ccl [ ccl_used - 1 ] && c == ccl [ ccl_used - 2 ] + 1 )		1271099	3					
ANR	1271189	Condition	ccl_code == ccl [ ccl_used - 1 ] && c == ccl [ ccl_used - 2 ] + 1	694:8:17810:17868	1271099	0	True				
ANR	1271190	AndExpression	ccl_code == ccl [ ccl_used - 1 ] && c == ccl [ ccl_used - 2 ] + 1		1271099	0		&&			
ANR	1271191	EqualityExpression	ccl_code == ccl [ ccl_used - 1 ]		1271099	0		==			
ANR	1271192	Identifier	ccl_code		1271099	0					
ANR	1271193	ArrayIndexing	ccl [ ccl_used - 1 ]		1271099	1					
ANR	1271194	Identifier	ccl		1271099	0					
ANR	1271195	AdditiveExpression	ccl_used - 1		1271099	1		-			
ANR	1271196	Identifier	ccl_used		1271099	0					
ANR	1271197	PrimaryExpression	1		1271099	1					
ANR	1271198	EqualityExpression	c == ccl [ ccl_used - 2 ] + 1		1271099	1		==			
ANR	1271199	Identifier	c		1271099	0					
ANR	1271200	AdditiveExpression	ccl [ ccl_used - 2 ] + 1		1271099	1		+			
ANR	1271201	ArrayIndexing	ccl [ ccl_used - 2 ]		1271099	0					
ANR	1271202	Identifier	ccl		1271099	0					
ANR	1271203	AdditiveExpression	ccl_used - 2		1271099	1		-			
ANR	1271204	Identifier	ccl_used		1271099	0					
ANR	1271205	PrimaryExpression	2		1271099	1					
ANR	1271206	PrimaryExpression	1		1271099	1					
ANR	1271207	CompoundStatement		27:69:684:684	1271099	1					
ANR	1271208	ExpressionStatement	ccl [ ccl_used - 2 ] = c	695:8:17881:17902	1271099	0	True				
ANR	1271209	AssignmentExpression	ccl [ ccl_used - 2 ] = c		1271099	0		=			
ANR	1271210	ArrayIndexing	ccl [ ccl_used - 2 ]		1271099	0					
ANR	1271211	Identifier	ccl		1271099	0					
ANR	1271212	AdditiveExpression	ccl_used - 2		1271099	1		-			
ANR	1271213	Identifier	ccl_used		1271099	0					
ANR	1271214	PrimaryExpression	2		1271099	1					
ANR	1271215	Identifier	c		1271099	1					
ANR	1271216	ReturnStatement	return ;	696:8:17912:17918	1271099	1	True				
ANR	1271217	IfStatement	if ( c > ccl [ ccl_used - 2 ] + 1 || ( c == ccl [ ccl_used - 2 ] + 1 && ccl_code != ccl [ ccl_used - 1 ] ) )		1271099	4					
ANR	1271218	Condition	c > ccl [ ccl_used - 2 ] + 1 || ( c == ccl [ ccl_used - 2 ] + 1 && ccl_code != ccl [ ccl_used - 1 ] )	702:8:18017:18114	1271099	0	True				
ANR	1271219	OrExpression	c > ccl [ ccl_used - 2 ] + 1 || ( c == ccl [ ccl_used - 2 ] + 1 && ccl_code != ccl [ ccl_used - 1 ] )		1271099	0		||			
ANR	1271220	RelationalExpression	c > ccl [ ccl_used - 2 ] + 1		1271099	0		>			
ANR	1271221	Identifier	c		1271099	0					
ANR	1271222	AdditiveExpression	ccl [ ccl_used - 2 ] + 1		1271099	1		+			
ANR	1271223	ArrayIndexing	ccl [ ccl_used - 2 ]		1271099	0					
ANR	1271224	Identifier	ccl		1271099	0					
ANR	1271225	AdditiveExpression	ccl_used - 2		1271099	1		-			
ANR	1271226	Identifier	ccl_used		1271099	0					
ANR	1271227	PrimaryExpression	2		1271099	1					
ANR	1271228	PrimaryExpression	1		1271099	1					
ANR	1271229	AndExpression	c == ccl [ ccl_used - 2 ] + 1 && ccl_code != ccl [ ccl_used - 1 ]		1271099	1		&&			
ANR	1271230	EqualityExpression	c == ccl [ ccl_used - 2 ] + 1		1271099	0		==			
ANR	1271231	Identifier	c		1271099	0					
ANR	1271232	AdditiveExpression	ccl [ ccl_used - 2 ] + 1		1271099	1		+			
ANR	1271233	ArrayIndexing	ccl [ ccl_used - 2 ]		1271099	0					
ANR	1271234	Identifier	ccl		1271099	0					
ANR	1271235	AdditiveExpression	ccl_used - 2		1271099	1		-			
ANR	1271236	Identifier	ccl_used		1271099	0					
ANR	1271237	PrimaryExpression	2		1271099	1					
ANR	1271238	PrimaryExpression	1		1271099	1					
ANR	1271239	EqualityExpression	ccl_code != ccl [ ccl_used - 1 ]		1271099	1		!=			
ANR	1271240	Identifier	ccl_code		1271099	0					
ANR	1271241	ArrayIndexing	ccl [ ccl_used - 1 ]		1271099	1					
ANR	1271242	Identifier	ccl		1271099	0					
ANR	1271243	AdditiveExpression	ccl_used - 1		1271099	1		-			
ANR	1271244	Identifier	ccl_used		1271099	0					
ANR	1271245	PrimaryExpression	1		1271099	1					
ANR	1271246	CompoundStatement		36:71:930:930	1271099	1					
ANR	1271247	ExpressionStatement	ccl [ ccl_used ++ ] = c	704:8:18127:18146	1271099	0	True				
ANR	1271248	AssignmentExpression	ccl [ ccl_used ++ ] = c		1271099	0		=			
ANR	1271249	ArrayIndexing	ccl [ ccl_used ++ ]		1271099	0					
ANR	1271250	Identifier	ccl		1271099	0					
ANR	1271251	PostIncDecOperationExpression	ccl_used ++		1271099	1					
ANR	1271252	Identifier	ccl_used		1271099	0					
ANR	1271253	IncDec	++		1271099	1					
ANR	1271254	Identifier	c		1271099	1					
ANR	1271255	ExpressionStatement	ccl [ ccl_used ++ ] = c	705:8:18156:18175	1271099	1	True				
ANR	1271256	AssignmentExpression	ccl [ ccl_used ++ ] = c		1271099	0		=			
ANR	1271257	ArrayIndexing	ccl [ ccl_used ++ ]		1271099	0					
ANR	1271258	Identifier	ccl		1271099	0					
ANR	1271259	PostIncDecOperationExpression	ccl_used ++		1271099	1					
ANR	1271260	Identifier	ccl_used		1271099	0					
ANR	1271261	IncDec	++		1271099	1					
ANR	1271262	Identifier	c		1271099	1					
ANR	1271263	ExpressionStatement	ccl [ ccl_used ++ ] = ccl_code	706:8:18185:18211	1271099	2	True				
ANR	1271264	AssignmentExpression	ccl [ ccl_used ++ ] = ccl_code		1271099	0		=			
ANR	1271265	ArrayIndexing	ccl [ ccl_used ++ ]		1271099	0					
ANR	1271266	Identifier	ccl		1271099	0					
ANR	1271267	PostIncDecOperationExpression	ccl_used ++		1271099	1					
ANR	1271268	Identifier	ccl_used		1271099	0					
ANR	1271269	IncDec	++		1271099	1					
ANR	1271270	Identifier	ccl_code		1271099	1					
ANR	1271271	ReturnStatement	return ;	707:8:18221:18227	1271099	3	True				
ANR	1271272	ForStatement	for ( i = 0 ; i < ccl_used && c > ccl [ i + 1 ] + 1 ; i += 3 )		1271099	5					
ANR	1271273	ForInit	i = 0 ;	713:9:18324:18329	1271099	0	True				
ANR	1271274	AssignmentExpression	i = 0		1271099	0		=			
ANR	1271275	Identifier	i		1271099	0					
ANR	1271276	PrimaryExpression	0		1271099	1					
ANR	1271277	Condition	i < ccl_used && c > ccl [ i + 1 ] + 1	713:16:18331:18364	1271099	1	True				
ANR	1271278	AndExpression	i < ccl_used && c > ccl [ i + 1 ] + 1		1271099	0		&&			
ANR	1271279	RelationalExpression	i < ccl_used		1271099	0		<			
ANR	1271280	Identifier	i		1271099	0					
ANR	1271281	Identifier	ccl_used		1271099	1					
ANR	1271282	RelationalExpression	c > ccl [ i + 1 ] + 1		1271099	1		>			
ANR	1271283	Identifier	c		1271099	0					
ANR	1271284	AdditiveExpression	ccl [ i + 1 ] + 1		1271099	1		+			
ANR	1271285	ArrayIndexing	ccl [ i + 1 ]		1271099	0					
ANR	1271286	Identifier	ccl		1271099	0					
ANR	1271287	AdditiveExpression	i + 1		1271099	1		+			
ANR	1271288	Identifier	i		1271099	0					
ANR	1271289	PrimaryExpression	1		1271099	1					
ANR	1271290	PrimaryExpression	1		1271099	1					
ANR	1271291	AssignmentExpression	i += 3	713:52:18367:18372	1271099	2	True	+=			
ANR	1271292	Identifier	i		1271099	0					
ANR	1271293	PrimaryExpression	3		1271099	1					
ANR	1271294	ExpressionStatement		713:60:18375:18375	1271099	3	True				
ANR	1271295	IfStatement	if ( ccl_code == ccl [ i + 2 ] && c == ccl [ i + 1 ] + 1 )		1271099	6					
ANR	1271296	Condition	ccl_code == ccl [ i + 2 ] && c == ccl [ i + 1 ] + 1	715:8:18386:18430	1271099	0	True				
ANR	1271297	AndExpression	ccl_code == ccl [ i + 2 ] && c == ccl [ i + 1 ] + 1		1271099	0		&&			
ANR	1271298	EqualityExpression	ccl_code == ccl [ i + 2 ]		1271099	0		==			
ANR	1271299	Identifier	ccl_code		1271099	0					
ANR	1271300	ArrayIndexing	ccl [ i + 2 ]		1271099	1					
ANR	1271301	Identifier	ccl		1271099	0					
ANR	1271302	AdditiveExpression	i + 2		1271099	1		+			
ANR	1271303	Identifier	i		1271099	0					
ANR	1271304	PrimaryExpression	2		1271099	1					
ANR	1271305	EqualityExpression	c == ccl [ i + 1 ] + 1		1271099	1		==			
ANR	1271306	Identifier	c		1271099	0					
ANR	1271307	AdditiveExpression	ccl [ i + 1 ] + 1		1271099	1		+			
ANR	1271308	ArrayIndexing	ccl [ i + 1 ]		1271099	0					
ANR	1271309	Identifier	ccl		1271099	0					
ANR	1271310	AdditiveExpression	i + 1		1271099	1		+			
ANR	1271311	Identifier	i		1271099	0					
ANR	1271312	PrimaryExpression	1		1271099	1					
ANR	1271313	PrimaryExpression	1		1271099	1					
ANR	1271314	CompoundStatement		48:55:1246:1246	1271099	1					
ANR	1271315	ExpressionStatement	ccl [ i + 1 ] = c	719:8:18503:18517	1271099	0	True				
ANR	1271316	AssignmentExpression	ccl [ i + 1 ] = c		1271099	0		=			
ANR	1271317	ArrayIndexing	ccl [ i + 1 ]		1271099	0					
ANR	1271318	Identifier	ccl		1271099	0					
ANR	1271319	AdditiveExpression	i + 1		1271099	1		+			
ANR	1271320	Identifier	i		1271099	0					
ANR	1271321	PrimaryExpression	1		1271099	1					
ANR	1271322	Identifier	c		1271099	1					
ANR	1271323	ReturnStatement	return ;	720:8:18527:18533	1271099	1	True				
ANR	1271324	ElseStatement	else		1271099	0					
ANR	1271325	IfStatement	if ( c < ccl [ i ] )		1271099	0					
ANR	1271326	Condition	c < ccl [ i ]	721:15:18550:18559	1271099	0	True				
ANR	1271327	RelationalExpression	c < ccl [ i ]		1271099	0		<			
ANR	1271328	Identifier	c		1271099	0					
ANR	1271329	ArrayIndexing	ccl [ i ]		1271099	1					
ANR	1271330	Identifier	ccl		1271099	0					
ANR	1271331	Identifier	i		1271099	1					
ANR	1271332	CompoundStatement		54:27:1375:1375	1271099	1					
ANR	1271333	ForStatement	for ( j = ccl_used ; j > i ; j -= 3 )		1271099	0					
ANR	1271334	ForInit	j = ccl_used ;	725:13:18658:18670	1271099	0	True				
ANR	1271335	AssignmentExpression	j = ccl_used		1271099	0		=			
ANR	1271336	Identifier	j		1271099	0					
ANR	1271337	Identifier	ccl_used		1271099	1					
ANR	1271338	Condition	j > i	725:27:18672:18676	1271099	1	True				
ANR	1271339	RelationalExpression	j > i		1271099	0		>			
ANR	1271340	Identifier	j		1271099	0					
ANR	1271341	Identifier	i		1271099	1					
ANR	1271342	AssignmentExpression	j -= 3	725:34:18679:18684	1271099	2	True	-=			
ANR	1271343	Identifier	j		1271099	0					
ANR	1271344	PrimaryExpression	3		1271099	1					
ANR	1271345	CompoundStatement		58:42:1500:1500	1271099	3					
ANR	1271346	ExpressionStatement	ccl [ j ] = ccl [ j - 3 ]	726:12:18701:18720	1271099	0	True				
ANR	1271347	AssignmentExpression	ccl [ j ] = ccl [ j - 3 ]		1271099	0		=			
ANR	1271348	ArrayIndexing	ccl [ j ]		1271099	0					
ANR	1271349	Identifier	ccl		1271099	0					
ANR	1271350	Identifier	j		1271099	1					
ANR	1271351	ArrayIndexing	ccl [ j - 3 ]		1271099	1					
ANR	1271352	Identifier	ccl		1271099	0					
ANR	1271353	AdditiveExpression	j - 3		1271099	1		-			
ANR	1271354	Identifier	j		1271099	0					
ANR	1271355	PrimaryExpression	3		1271099	1					
ANR	1271356	ExpressionStatement	ccl [ j - 1 ] = ccl [ j - 4 ]	727:12:18734:18757	1271099	1	True				
ANR	1271357	AssignmentExpression	ccl [ j - 1 ] = ccl [ j - 4 ]		1271099	0		=			
ANR	1271358	ArrayIndexing	ccl [ j - 1 ]		1271099	0					
ANR	1271359	Identifier	ccl		1271099	0					
ANR	1271360	AdditiveExpression	j - 1		1271099	1		-			
ANR	1271361	Identifier	j		1271099	0					
ANR	1271362	PrimaryExpression	1		1271099	1					
ANR	1271363	ArrayIndexing	ccl [ j - 4 ]		1271099	1					
ANR	1271364	Identifier	ccl		1271099	0					
ANR	1271365	AdditiveExpression	j - 4		1271099	1		-			
ANR	1271366	Identifier	j		1271099	0					
ANR	1271367	PrimaryExpression	4		1271099	1					
ANR	1271368	ExpressionStatement	ccl [ j - 2 ] = ccl [ j - 5 ]	728:12:18771:18794	1271099	2	True				
ANR	1271369	AssignmentExpression	ccl [ j - 2 ] = ccl [ j - 5 ]		1271099	0		=			
ANR	1271370	ArrayIndexing	ccl [ j - 2 ]		1271099	0					
ANR	1271371	Identifier	ccl		1271099	0					
ANR	1271372	AdditiveExpression	j - 2		1271099	1		-			
ANR	1271373	Identifier	j		1271099	0					
ANR	1271374	PrimaryExpression	2		1271099	1					
ANR	1271375	ArrayIndexing	ccl [ j - 5 ]		1271099	1					
ANR	1271376	Identifier	ccl		1271099	0					
ANR	1271377	AdditiveExpression	j - 5		1271099	1		-			
ANR	1271378	Identifier	j		1271099	0					
ANR	1271379	PrimaryExpression	5		1271099	1					
ANR	1271380	ExpressionStatement	ccl [ i ] = ccl [ i + 1 ] = c	730:8:18814:18837	1271099	1	True				
ANR	1271381	AssignmentExpression	ccl [ i ] = ccl [ i + 1 ] = c		1271099	0		=			
ANR	1271382	ArrayIndexing	ccl [ i ]		1271099	0					
ANR	1271383	Identifier	ccl		1271099	0					
ANR	1271384	Identifier	i		1271099	1					
ANR	1271385	AssignmentExpression	ccl [ i + 1 ] = c		1271099	1		=			
ANR	1271386	ArrayIndexing	ccl [ i + 1 ]		1271099	0					
ANR	1271387	Identifier	ccl		1271099	0					
ANR	1271388	AdditiveExpression	i + 1		1271099	1		+			
ANR	1271389	Identifier	i		1271099	0					
ANR	1271390	PrimaryExpression	1		1271099	1					
ANR	1271391	Identifier	c		1271099	1					
ANR	1271392	ExpressionStatement	ccl [ i + 2 ] = ccl_code	731:8:18847:18868	1271099	2	True				
ANR	1271393	AssignmentExpression	ccl [ i + 2 ] = ccl_code		1271099	0		=			
ANR	1271394	ArrayIndexing	ccl [ i + 2 ]		1271099	0					
ANR	1271395	Identifier	ccl		1271099	0					
ANR	1271396	AdditiveExpression	i + 2		1271099	1		+			
ANR	1271397	Identifier	i		1271099	0					
ANR	1271398	PrimaryExpression	2		1271099	1					
ANR	1271399	Identifier	ccl_code		1271099	1					
ANR	1271400	ReturnType	static void		1271099	1					
ANR	1271401	Identifier	ordered_ccl_insert		1271099	2					
ANR	1271402	ParameterList	"ac_uint4 c , ac_uint4 ccl_code"		1271099	3					
ANR	1271403	Parameter	ac_uint4 c	667:19:17155:17164	1271099	0	True				
ANR	1271404	ParameterType	ac_uint4		1271099	0					
ANR	1271405	Identifier	c		1271099	1					
ANR	1271406	Parameter	ac_uint4 ccl_code	667:31:17167:17183	1271099	1	True				
ANR	1271407	ParameterType	ac_uint4		1271099	0					
ANR	1271408	Identifier	ccl_code		1271099	1					
ANR	1271409	CFGEntryNode	ENTRY		1271099		True				
ANR	1271410	CFGExitNode	EXIT		1271099		True				
ANR	1271411	Symbol	malloc		1271099						
ANR	1271412	Symbol	c		1271099						
ANR	1271413	Symbol	i		1271099						
ANR	1271414	Symbol	* ccl		1271099						
ANR	1271415	Symbol	j		1271099						
ANR	1271416	Symbol	ccl_used		1271099						
ANR	1271417	Symbol	realloc		1271099						
ANR	1271418	Symbol	ccl_size		1271099						
ANR	1271419	Symbol	ccl		1271099						
ANR	1271420	Symbol	ccl_code		1271099						
ANR	1271421	Symbol	* ccl_used		1271099						
ANR	1271422	Symbol	* i		1271099						
ANR	1271423	Symbol	* j		1271099						
ANR	1271424	Function	make_number	739:0:18979:19640							
ANR	1271425	FunctionDef	"make_number (short num , short denom)"		1271424	0					
ANR	1271426	CompoundStatement		741:0:19031:19640	1271424	0					
ANR	1271427	IdentifierDeclStatement	ac_uint4 n ;	742:4:19037:19047	1271424	0	True				
ANR	1271428	IdentifierDecl	n		1271424	0					
ANR	1271429	IdentifierDeclType	ac_uint4		1271424	0					
ANR	1271430	Identifier	n		1271424	1					
ANR	1271431	ForStatement	for ( n = 0 ; n < nums_used ; n ++ )		1271424	1					
ANR	1271432	ForInit	n = 0 ;	747:9:19121:19126	1271424	0	True				
ANR	1271433	AssignmentExpression	n = 0		1271424	0		=			
ANR	1271434	Identifier	n		1271424	0					
ANR	1271435	PrimaryExpression	0		1271424	1					
ANR	1271436	Condition	n < nums_used	747:16:19128:19140	1271424	1	True				
ANR	1271437	RelationalExpression	n < nums_used		1271424	0		<			
ANR	1271438	Identifier	n		1271424	0					
ANR	1271439	Identifier	nums_used		1271424	1					
ANR	1271440	PostIncDecOperationExpression	n ++	747:31:19143:19145	1271424	2	True				
ANR	1271441	Identifier	n		1271424	0					
ANR	1271442	IncDec	++		1271424	1					
ANR	1271443	CompoundStatement		7:36:116:116	1271424	3					
ANR	1271444	IfStatement	if ( nums [ n ] . numerator == num && nums [ n ] . denominator == denom )		1271424	0					
ANR	1271445	Condition	nums [ n ] . numerator == num && nums [ n ] . denominator == denom	748:12:19162:19217	1271424	0	True				
ANR	1271446	AndExpression	nums [ n ] . numerator == num && nums [ n ] . denominator == denom		1271424	0		&&			
ANR	1271447	EqualityExpression	nums [ n ] . numerator == num		1271424	0		==			
ANR	1271448	MemberAccess	nums [ n ] . numerator		1271424	0					
ANR	1271449	ArrayIndexing	nums [ n ]		1271424	0					
ANR	1271450	Identifier	nums		1271424	0					
ANR	1271451	Identifier	n		1271424	1					
ANR	1271452	Identifier	numerator		1271424	1					
ANR	1271453	Identifier	num		1271424	1					
ANR	1271454	EqualityExpression	nums [ n ] . denominator == denom		1271424	1		==			
ANR	1271455	MemberAccess	nums [ n ] . denominator		1271424	0					
ANR	1271456	ArrayIndexing	nums [ n ]		1271424	0					
ANR	1271457	Identifier	nums		1271424	0					
ANR	1271458	Identifier	n		1271424	1					
ANR	1271459	Identifier	denominator		1271424	1					
ANR	1271460	Identifier	denom		1271424	1					
ANR	1271461	ReturnStatement	return n << 1 ;	749:10:19230:19243	1271424	1	True				
ANR	1271462	ShiftExpression	n << 1		1271424	0		<<			
ANR	1271463	Identifier	n		1271424	0					
ANR	1271464	PrimaryExpression	1		1271424	1					
ANR	1271465	IfStatement	if ( nums_used == nums_size )		1271424	2					
ANR	1271466	Condition	nums_used == nums_size	752:8:19260:19281	1271424	0	True				
ANR	1271467	EqualityExpression	nums_used == nums_size		1271424	0		==			
ANR	1271468	Identifier	nums_used		1271424	0					
ANR	1271469	Identifier	nums_size		1271424	1					
ANR	1271470	CompoundStatement		12:32:252:252	1271424	1					
ANR	1271471	IfStatement	if ( nums_size == 0 )		1271424	0					
ANR	1271472	Condition	nums_size == 0	753:12:19298:19311	1271424	0	True				
ANR	1271473	EqualityExpression	nums_size == 0		1271424	0		==			
ANR	1271474	Identifier	nums_size		1271424	0					
ANR	1271475	PrimaryExpression	0		1271424	1					
ANR	1271476	ExpressionStatement	nums = ( _num_t * ) malloc ( sizeof ( _num_t ) << 3 )	754:10:19324:19369	1271424	1	True				
ANR	1271477	AssignmentExpression	nums = ( _num_t * ) malloc ( sizeof ( _num_t ) << 3 )		1271424	0		=			
ANR	1271478	Identifier	nums		1271424	0					
ANR	1271479	CastExpression	( _num_t * ) malloc ( sizeof ( _num_t ) << 3 )		1271424	1					
ANR	1271480	CastTarget	_num_t *		1271424	0					
ANR	1271481	CallExpression	malloc ( sizeof ( _num_t ) << 3 )		1271424	1					
ANR	1271482	Callee	malloc		1271424	0					
ANR	1271483	Identifier	malloc		1271424	0					
ANR	1271484	ArgumentList	sizeof ( _num_t ) << 3		1271424	1					
ANR	1271485	Argument	sizeof ( _num_t ) << 3		1271424	0					
ANR	1271486	ShiftExpression	sizeof ( _num_t ) << 3		1271424	0		<<			
ANR	1271487	SizeofExpression	sizeof ( _num_t )		1271424	0					
ANR	1271488	Sizeof	sizeof		1271424	0					
ANR	1271489	SizeofOperand	_num_t		1271424	1					
ANR	1271490	PrimaryExpression	3		1271424	1					
ANR	1271491	ElseStatement	else		1271424	0					
ANR	1271492	ExpressionStatement	"nums = ( _num_t * ) realloc ( ( char * ) nums , sizeof ( _num_t ) * ( nums_size + 8 ) )"	756:10:19394:19504	1271424	0	True				
ANR	1271493	AssignmentExpression	"nums = ( _num_t * ) realloc ( ( char * ) nums , sizeof ( _num_t ) * ( nums_size + 8 ) )"		1271424	0		=			
ANR	1271494	Identifier	nums		1271424	0					
ANR	1271495	CastExpression	"( _num_t * ) realloc ( ( char * ) nums , sizeof ( _num_t ) * ( nums_size + 8 ) )"		1271424	1					
ANR	1271496	CastTarget	_num_t *		1271424	0					
ANR	1271497	CallExpression	"realloc ( ( char * ) nums , sizeof ( _num_t ) * ( nums_size + 8 ) )"		1271424	1					
ANR	1271498	Callee	realloc		1271424	0					
ANR	1271499	Identifier	realloc		1271424	0					
ANR	1271500	ArgumentList	( char * ) nums		1271424	1					
ANR	1271501	Argument	( char * ) nums		1271424	0					
ANR	1271502	CastExpression	( char * ) nums		1271424	0					
ANR	1271503	CastTarget	char *		1271424	0					
ANR	1271504	Identifier	nums		1271424	1					
ANR	1271505	Argument	sizeof ( _num_t ) * ( nums_size + 8 )		1271424	1					
ANR	1271506	MultiplicativeExpression	sizeof ( _num_t ) * ( nums_size + 8 )		1271424	0		*			
ANR	1271507	SizeofExpression	sizeof ( _num_t )		1271424	0					
ANR	1271508	Sizeof	sizeof		1271424	0					
ANR	1271509	SizeofOperand	_num_t		1271424	1					
ANR	1271510	AdditiveExpression	nums_size + 8		1271424	1		+			
ANR	1271511	Identifier	nums_size		1271424	0					
ANR	1271512	PrimaryExpression	8		1271424	1					
ANR	1271513	ExpressionStatement	nums_size += 8	758:8:19514:19528	1271424	1	True				
ANR	1271514	AssignmentExpression	nums_size += 8		1271424	0		+=			
ANR	1271515	Identifier	nums_size		1271424	0					
ANR	1271516	PrimaryExpression	8		1271424	1					
ANR	1271517	ExpressionStatement	n = nums_used ++	761:4:19541:19556	1271424	3	True				
ANR	1271518	AssignmentExpression	n = nums_used ++		1271424	0		=			
ANR	1271519	Identifier	n		1271424	0					
ANR	1271520	PostIncDecOperationExpression	nums_used ++		1271424	1					
ANR	1271521	Identifier	nums_used		1271424	0					
ANR	1271522	IncDec	++		1271424	1					
ANR	1271523	ExpressionStatement	nums [ n ] . numerator = num	762:4:19562:19585	1271424	4	True				
ANR	1271524	AssignmentExpression	nums [ n ] . numerator = num		1271424	0		=			
ANR	1271525	MemberAccess	nums [ n ] . numerator		1271424	0					
ANR	1271526	ArrayIndexing	nums [ n ]		1271424	0					
ANR	1271527	Identifier	nums		1271424	0					
ANR	1271528	Identifier	n		1271424	1					
ANR	1271529	Identifier	numerator		1271424	1					
ANR	1271530	Identifier	num		1271424	1					
ANR	1271531	ExpressionStatement	nums [ n ] . denominator = denom	763:4:19591:19618	1271424	5	True				
ANR	1271532	AssignmentExpression	nums [ n ] . denominator = denom		1271424	0		=			
ANR	1271533	MemberAccess	nums [ n ] . denominator		1271424	0					
ANR	1271534	ArrayIndexing	nums [ n ]		1271424	0					
ANR	1271535	Identifier	nums		1271424	0					
ANR	1271536	Identifier	n		1271424	1					
ANR	1271537	Identifier	denominator		1271424	1					
ANR	1271538	Identifier	denom		1271424	1					
ANR	1271539	ReturnStatement	return n << 1 ;	765:4:19625:19638	1271424	6	True				
ANR	1271540	ShiftExpression	n << 1		1271424	0		<<			
ANR	1271541	Identifier	n		1271424	0					
ANR	1271542	PrimaryExpression	1		1271424	1					
ANR	1271543	ReturnType	static ac_uint4		1271424	1					
ANR	1271544	Identifier	make_number		1271424	2					
ANR	1271545	ParameterList	"short num , short denom"		1271424	3					
ANR	1271546	Parameter	short num	740:12:19007:19015	1271424	0	True				
ANR	1271547	ParameterType	short		1271424	0					
ANR	1271548	Identifier	num		1271424	1					
ANR	1271549	Parameter	short denom	740:23:19018:19028	1271424	1	True				
ANR	1271550	ParameterType	short		1271424	0					
ANR	1271551	Identifier	denom		1271424	1					
ANR	1271552	CFGEntryNode	ENTRY		1271424		True				
ANR	1271553	CFGExitNode	EXIT		1271424		True				
ANR	1271554	Symbol	nums [ n ] . denominator		1271424						
ANR	1271555	Symbol	* nums		1271424						
ANR	1271556	Symbol	malloc		1271424						
ANR	1271557	Symbol	nums_size		1271424						
ANR	1271558	Symbol	num		1271424						
ANR	1271559	Symbol	nums_used		1271424						
ANR	1271560	Symbol	* n		1271424						
ANR	1271561	Symbol	denom		1271424						
ANR	1271562	Symbol	realloc		1271424						
ANR	1271563	Symbol	n		1271424						
ANR	1271564	Symbol	nums		1271424						
ANR	1271565	Symbol	nums [ n ] . numerator		1271424						
ANR	1271566	Function	add_number	768:0:19643:20785							
ANR	1271567	FunctionDef	"add_number (ac_uint4 code , short num , short denom)"		1271566	0					
ANR	1271568	CompoundStatement		770:0:19705:20785	1271566	0					
ANR	1271569	IdentifierDeclStatement	"ac_uint4 i , j ;"	771:4:19711:19724	1271566	0	True				
ANR	1271570	IdentifierDecl	i		1271566	0					
ANR	1271571	IdentifierDeclType	ac_uint4		1271566	0					
ANR	1271572	Identifier	i		1271566	1					
ANR	1271573	IdentifierDecl	j		1271566	1					
ANR	1271574	IdentifierDeclType	ac_uint4		1271566	0					
ANR	1271575	Identifier	j		1271566	1					
ANR	1271576	ForStatement	for ( i = 0 ; i < ncodes_used && code > ncodes [ i ] . code ; i ++ )		1271566	1					
ANR	1271577	ForInit	i = 0 ;	776:9:19784:19789	1271566	0	True				
ANR	1271578	AssignmentExpression	i = 0		1271566	0		=			
ANR	1271579	Identifier	i		1271566	0					
ANR	1271580	PrimaryExpression	0		1271566	1					
ANR	1271581	Condition	i < ncodes_used && code > ncodes [ i ] . code	776:16:19791:19830	1271566	1	True				
ANR	1271582	AndExpression	i < ncodes_used && code > ncodes [ i ] . code		1271566	0		&&			
ANR	1271583	RelationalExpression	i < ncodes_used		1271566	0		<			
ANR	1271584	Identifier	i		1271566	0					
ANR	1271585	Identifier	ncodes_used		1271566	1					
ANR	1271586	RelationalExpression	code > ncodes [ i ] . code		1271566	1		>			
ANR	1271587	Identifier	code		1271566	0					
ANR	1271588	MemberAccess	ncodes [ i ] . code		1271566	1					
ANR	1271589	ArrayIndexing	ncodes [ i ]		1271566	0					
ANR	1271590	Identifier	ncodes		1271566	0					
ANR	1271591	Identifier	i		1271566	1					
ANR	1271592	Identifier	code		1271566	1					
ANR	1271593	PostIncDecOperationExpression	i ++	776:58:19833:19835	1271566	2	True				
ANR	1271594	Identifier	i		1271566	0					
ANR	1271595	IncDec	++		1271566	1					
ANR	1271596	ExpressionStatement		776:63:19838:19838	1271566	3	True				
ANR	1271597	IfStatement	if ( i < ncodes_used && code == ncodes [ i ] . code )		1271566	2					
ANR	1271598	Condition	i < ncodes_used && code == ncodes [ i ] . code	782:8:19969:20009	1271566	0	True				
ANR	1271599	AndExpression	i < ncodes_used && code == ncodes [ i ] . code		1271566	0		&&			
ANR	1271600	RelationalExpression	i < ncodes_used		1271566	0		<			
ANR	1271601	Identifier	i		1271566	0					
ANR	1271602	Identifier	ncodes_used		1271566	1					
ANR	1271603	EqualityExpression	code == ncodes [ i ] . code		1271566	1		==			
ANR	1271604	Identifier	code		1271566	0					
ANR	1271605	MemberAccess	ncodes [ i ] . code		1271566	1					
ANR	1271606	ArrayIndexing	ncodes [ i ]		1271566	0					
ANR	1271607	Identifier	ncodes		1271566	0					
ANR	1271608	Identifier	i		1271566	1					
ANR	1271609	Identifier	code		1271566	1					
ANR	1271610	CompoundStatement		13:51:306:306	1271566	1					
ANR	1271611	ExpressionStatement	"ncodes [ i ] . idx = make_number ( num , denom )"	783:8:20022:20061	1271566	0	True				
ANR	1271612	AssignmentExpression	"ncodes [ i ] . idx = make_number ( num , denom )"		1271566	0		=			
ANR	1271613	MemberAccess	ncodes [ i ] . idx		1271566	0					
ANR	1271614	ArrayIndexing	ncodes [ i ]		1271566	0					
ANR	1271615	Identifier	ncodes		1271566	0					
ANR	1271616	Identifier	i		1271566	1					
ANR	1271617	Identifier	idx		1271566	1					
ANR	1271618	CallExpression	"make_number ( num , denom )"		1271566	1					
ANR	1271619	Callee	make_number		1271566	0					
ANR	1271620	Identifier	make_number		1271566	0					
ANR	1271621	ArgumentList	num		1271566	1					
ANR	1271622	Argument	num		1271566	0					
ANR	1271623	Identifier	num		1271566	0					
ANR	1271624	Argument	denom		1271566	1					
ANR	1271625	Identifier	denom		1271566	0					
ANR	1271626	ReturnStatement	return ;	784:8:20071:20077	1271566	1	True				
ANR	1271627	IfStatement	if ( ncodes_used == ncodes_size )		1271566	3					
ANR	1271628	Condition	ncodes_used == ncodes_size	790:8:20147:20172	1271566	0	True				
ANR	1271629	EqualityExpression	ncodes_used == ncodes_size		1271566	0		==			
ANR	1271630	Identifier	ncodes_used		1271566	0					
ANR	1271631	Identifier	ncodes_size		1271566	1					
ANR	1271632	CompoundStatement		21:36:469:469	1271566	1					
ANR	1271633	IfStatement	if ( ncodes_size == 0 )		1271566	0					
ANR	1271634	Condition	ncodes_size == 0	791:12:20189:20204	1271566	0	True				
ANR	1271635	EqualityExpression	ncodes_size == 0		1271566	0		==			
ANR	1271636	Identifier	ncodes_size		1271566	0					
ANR	1271637	PrimaryExpression	0		1271566	1					
ANR	1271638	ExpressionStatement	ncodes = ( _codeidx_t * ) malloc ( sizeof ( _codeidx_t ) << 3 )	792:10:20217:20272	1271566	1	True				
ANR	1271639	AssignmentExpression	ncodes = ( _codeidx_t * ) malloc ( sizeof ( _codeidx_t ) << 3 )		1271566	0		=			
ANR	1271640	Identifier	ncodes		1271566	0					
ANR	1271641	CastExpression	( _codeidx_t * ) malloc ( sizeof ( _codeidx_t ) << 3 )		1271566	1					
ANR	1271642	CastTarget	_codeidx_t *		1271566	0					
ANR	1271643	CallExpression	malloc ( sizeof ( _codeidx_t ) << 3 )		1271566	1					
ANR	1271644	Callee	malloc		1271566	0					
ANR	1271645	Identifier	malloc		1271566	0					
ANR	1271646	ArgumentList	sizeof ( _codeidx_t ) << 3		1271566	1					
ANR	1271647	Argument	sizeof ( _codeidx_t ) << 3		1271566	0					
ANR	1271648	ShiftExpression	sizeof ( _codeidx_t ) << 3		1271566	0		<<			
ANR	1271649	SizeofExpression	sizeof ( _codeidx_t )		1271566	0					
ANR	1271650	Sizeof	sizeof		1271566	0					
ANR	1271651	SizeofOperand	_codeidx_t		1271566	1					
ANR	1271652	PrimaryExpression	3		1271566	1					
ANR	1271653	ElseStatement	else		1271566	0					
ANR	1271654	ExpressionStatement	"ncodes = ( _codeidx_t * ) realloc ( ( char * ) ncodes , sizeof ( _codeidx_t ) * ( ncodes_size + 8 ) )"	794:10:20297:20399	1271566	0	True				
ANR	1271655	AssignmentExpression	"ncodes = ( _codeidx_t * ) realloc ( ( char * ) ncodes , sizeof ( _codeidx_t ) * ( ncodes_size + 8 ) )"		1271566	0		=			
ANR	1271656	Identifier	ncodes		1271566	0					
ANR	1271657	CastExpression	"( _codeidx_t * ) realloc ( ( char * ) ncodes , sizeof ( _codeidx_t ) * ( ncodes_size + 8 ) )"		1271566	1					
ANR	1271658	CastTarget	_codeidx_t *		1271566	0					
ANR	1271659	CallExpression	"realloc ( ( char * ) ncodes , sizeof ( _codeidx_t ) * ( ncodes_size + 8 ) )"		1271566	1					
ANR	1271660	Callee	realloc		1271566	0					
ANR	1271661	Identifier	realloc		1271566	0					
ANR	1271662	ArgumentList	( char * ) ncodes		1271566	1					
ANR	1271663	Argument	( char * ) ncodes		1271566	0					
ANR	1271664	CastExpression	( char * ) ncodes		1271566	0					
ANR	1271665	CastTarget	char *		1271566	0					
ANR	1271666	Identifier	ncodes		1271566	1					
ANR	1271667	Argument	sizeof ( _codeidx_t ) * ( ncodes_size + 8 )		1271566	1					
ANR	1271668	MultiplicativeExpression	sizeof ( _codeidx_t ) * ( ncodes_size + 8 )		1271566	0		*			
ANR	1271669	SizeofExpression	sizeof ( _codeidx_t )		1271566	0					
ANR	1271670	Sizeof	sizeof		1271566	0					
ANR	1271671	SizeofOperand	_codeidx_t		1271566	1					
ANR	1271672	AdditiveExpression	ncodes_size + 8		1271566	1		+			
ANR	1271673	Identifier	ncodes_size		1271566	0					
ANR	1271674	PrimaryExpression	8		1271566	1					
ANR	1271675	ExpressionStatement	ncodes_size += 8	797:8:20410:20426	1271566	1	True				
ANR	1271676	AssignmentExpression	ncodes_size += 8		1271566	0		+=			
ANR	1271677	Identifier	ncodes_size		1271566	0					
ANR	1271678	PrimaryExpression	8		1271566	1					
ANR	1271679	IfStatement	if ( i < ncodes_used )		1271566	4					
ANR	1271680	Condition	i < ncodes_used	803:8:20518:20532	1271566	0	True				
ANR	1271681	RelationalExpression	i < ncodes_used		1271566	0		<			
ANR	1271682	Identifier	i		1271566	0					
ANR	1271683	Identifier	ncodes_used		1271566	1					
ANR	1271684	CompoundStatement		34:25:829:829	1271566	1					
ANR	1271685	ForStatement	for ( j = ncodes_used ; j > i ; j -- )		1271566	0					
ANR	1271686	ForInit	j = ncodes_used ;	804:13:20550:20565	1271566	0	True				
ANR	1271687	AssignmentExpression	j = ncodes_used		1271566	0		=			
ANR	1271688	Identifier	j		1271566	0					
ANR	1271689	Identifier	ncodes_used		1271566	1					
ANR	1271690	Condition	j > i	804:30:20567:20571	1271566	1	True				
ANR	1271691	RelationalExpression	j > i		1271566	0		>			
ANR	1271692	Identifier	j		1271566	0					
ANR	1271693	Identifier	i		1271566	1					
ANR	1271694	PostIncDecOperationExpression	j --	804:37:20574:20576	1271566	2	True				
ANR	1271695	Identifier	j		1271566	0					
ANR	1271696	IncDec	--		1271566	1					
ANR	1271697	CompoundStatement		35:42:873:873	1271566	3					
ANR	1271698	ExpressionStatement	ncodes [ j ] . code = ncodes [ j - 1 ] . code	805:12:20593:20628	1271566	0	True				
ANR	1271699	AssignmentExpression	ncodes [ j ] . code = ncodes [ j - 1 ] . code		1271566	0		=			
ANR	1271700	MemberAccess	ncodes [ j ] . code		1271566	0					
ANR	1271701	ArrayIndexing	ncodes [ j ]		1271566	0					
ANR	1271702	Identifier	ncodes		1271566	0					
ANR	1271703	Identifier	j		1271566	1					
ANR	1271704	Identifier	code		1271566	1					
ANR	1271705	MemberAccess	ncodes [ j - 1 ] . code		1271566	1					
ANR	1271706	ArrayIndexing	ncodes [ j - 1 ]		1271566	0					
ANR	1271707	Identifier	ncodes		1271566	0					
ANR	1271708	AdditiveExpression	j - 1		1271566	1		-			
ANR	1271709	Identifier	j		1271566	0					
ANR	1271710	PrimaryExpression	1		1271566	1					
ANR	1271711	Identifier	code		1271566	1					
ANR	1271712	ExpressionStatement	ncodes [ j ] . idx = ncodes [ j - 1 ] . idx	806:12:20642:20675	1271566	1	True				
ANR	1271713	AssignmentExpression	ncodes [ j ] . idx = ncodes [ j - 1 ] . idx		1271566	0		=			
ANR	1271714	MemberAccess	ncodes [ j ] . idx		1271566	0					
ANR	1271715	ArrayIndexing	ncodes [ j ]		1271566	0					
ANR	1271716	Identifier	ncodes		1271566	0					
ANR	1271717	Identifier	j		1271566	1					
ANR	1271718	Identifier	idx		1271566	1					
ANR	1271719	MemberAccess	ncodes [ j - 1 ] . idx		1271566	1					
ANR	1271720	ArrayIndexing	ncodes [ j - 1 ]		1271566	0					
ANR	1271721	Identifier	ncodes		1271566	0					
ANR	1271722	AdditiveExpression	j - 1		1271566	1		-			
ANR	1271723	Identifier	j		1271566	0					
ANR	1271724	PrimaryExpression	1		1271566	1					
ANR	1271725	Identifier	idx		1271566	1					
ANR	1271726	ExpressionStatement	ncodes [ i ] . code = code	809:4:20697:20718	1271566	5	True				
ANR	1271727	AssignmentExpression	ncodes [ i ] . code = code		1271566	0		=			
ANR	1271728	MemberAccess	ncodes [ i ] . code		1271566	0					
ANR	1271729	ArrayIndexing	ncodes [ i ]		1271566	0					
ANR	1271730	Identifier	ncodes		1271566	0					
ANR	1271731	Identifier	i		1271566	1					
ANR	1271732	Identifier	code		1271566	1					
ANR	1271733	Identifier	code		1271566	1					
ANR	1271734	ExpressionStatement	"ncodes [ i ] . idx = make_number ( num , denom )"	810:4:20724:20763	1271566	6	True				
ANR	1271735	AssignmentExpression	"ncodes [ i ] . idx = make_number ( num , denom )"		1271566	0		=			
ANR	1271736	MemberAccess	ncodes [ i ] . idx		1271566	0					
ANR	1271737	ArrayIndexing	ncodes [ i ]		1271566	0					
ANR	1271738	Identifier	ncodes		1271566	0					
ANR	1271739	Identifier	i		1271566	1					
ANR	1271740	Identifier	idx		1271566	1					
ANR	1271741	CallExpression	"make_number ( num , denom )"		1271566	1					
ANR	1271742	Callee	make_number		1271566	0					
ANR	1271743	Identifier	make_number		1271566	0					
ANR	1271744	ArgumentList	num		1271566	1					
ANR	1271745	Argument	num		1271566	0					
ANR	1271746	Identifier	num		1271566	0					
ANR	1271747	Argument	denom		1271566	1					
ANR	1271748	Identifier	denom		1271566	0					
ANR	1271749	ExpressionStatement	ncodes_used ++	812:4:20770:20783	1271566	7	True				
ANR	1271750	PostIncDecOperationExpression	ncodes_used ++		1271566	0					
ANR	1271751	Identifier	ncodes_used		1271566	0					
ANR	1271752	IncDec	++		1271566	1					
ANR	1271753	ReturnType	static void		1271566	1					
ANR	1271754	Identifier	add_number		1271566	2					
ANR	1271755	ParameterList	"ac_uint4 code , short num , short denom"		1271566	3					
ANR	1271756	Parameter	ac_uint4 code	769:11:19666:19678	1271566	0	True				
ANR	1271757	ParameterType	ac_uint4		1271566	0					
ANR	1271758	Identifier	code		1271566	1					
ANR	1271759	Parameter	short num	769:26:19681:19689	1271566	1	True				
ANR	1271760	ParameterType	short		1271566	0					
ANR	1271761	Identifier	num		1271566	1					
ANR	1271762	Parameter	short denom	769:37:19692:19702	1271566	2	True				
ANR	1271763	ParameterType	short		1271566	0					
ANR	1271764	Identifier	denom		1271566	1					
ANR	1271765	CFGEntryNode	ENTRY		1271566		True				
ANR	1271766	CFGExitNode	EXIT		1271566		True				
ANR	1271767	Symbol	malloc		1271566						
ANR	1271768	Symbol	ncodes [ i ] . code		1271566						
ANR	1271769	Symbol	code		1271566						
ANR	1271770	Symbol	ncodes		1271566						
ANR	1271771	Symbol	num		1271566						
ANR	1271772	Symbol	ncodes [ j ] . code		1271566						
ANR	1271773	Symbol	i		1271566						
ANR	1271774	Symbol	ncodes [ i ] . idx		1271566						
ANR	1271775	Symbol	j		1271566						
ANR	1271776	Symbol	realloc		1271566						
ANR	1271777	Symbol	* i		1271566						
ANR	1271778	Symbol	* j		1271566						
ANR	1271779	Symbol	ncodes_used		1271566						
ANR	1271780	Symbol	make_number		1271566						
ANR	1271781	Symbol	ncodes [ j ] . idx		1271566						
ANR	1271782	Symbol	ncodes [ j - 1 ] . idx		1271566						
ANR	1271783	Symbol	ncodes_size		1271566						
ANR	1271784	Symbol	* ncodes		1271566						
ANR	1271785	Symbol	ncodes [ j - 1 ] . code		1271566						
ANR	1271786	Symbol	denom		1271566						
ANR	1271787	Function	read_cdata	819:0:20881:29123							
ANR	1271788	FunctionDef	read_cdata (FILE * in)		1271787	0					
ANR	1271789	CompoundStatement		821:0:20914:29123	1271787	0					
ANR	1271790	IdentifierDeclStatement	"ac_uint4 i , lineno , skip , code , ccl_code ;"	822:4:20920:20960	1271787	0	True				
ANR	1271791	IdentifierDecl	i		1271787	0					
ANR	1271792	IdentifierDeclType	ac_uint4		1271787	0					
ANR	1271793	Identifier	i		1271787	1					
ANR	1271794	IdentifierDecl	lineno		1271787	1					
ANR	1271795	IdentifierDeclType	ac_uint4		1271787	0					
ANR	1271796	Identifier	lineno		1271787	1					
ANR	1271797	IdentifierDecl	skip		1271787	2					
ANR	1271798	IdentifierDeclType	ac_uint4		1271787	0					
ANR	1271799	Identifier	skip		1271787	1					
ANR	1271800	IdentifierDecl	code		1271787	3					
ANR	1271801	IdentifierDeclType	ac_uint4		1271787	0					
ANR	1271802	Identifier	code		1271787	1					
ANR	1271803	IdentifierDecl	ccl_code		1271787	4					
ANR	1271804	IdentifierDeclType	ac_uint4		1271787	0					
ANR	1271805	Identifier	ccl_code		1271787	1					
ANR	1271806	IdentifierDeclStatement	"short wnum , neg , number [ 2 ] , compat ;"	823:4:20966:21000	1271787	1	True				
ANR	1271807	IdentifierDecl	wnum		1271787	0					
ANR	1271808	IdentifierDeclType	short		1271787	0					
ANR	1271809	Identifier	wnum		1271787	1					
ANR	1271810	IdentifierDecl	neg		1271787	1					
ANR	1271811	IdentifierDeclType	short		1271787	0					
ANR	1271812	Identifier	neg		1271787	1					
ANR	1271813	IdentifierDecl	number [ 2 ]		1271787	2					
ANR	1271814	IdentifierDeclType	short [ 2 ]		1271787	0					
ANR	1271815	Identifier	number		1271787	1					
ANR	1271816	PrimaryExpression	2		1271787	2					
ANR	1271817	IdentifierDecl	compat		1271787	3					
ANR	1271818	IdentifierDeclType	short		1271787	0					
ANR	1271819	Identifier	compat		1271787	1					
ANR	1271820	IdentifierDeclStatement	"char line [ 512 ] , * s , * e ;"	824:4:21006:21028	1271787	2	True				
ANR	1271821	IdentifierDecl	line [ 512 ]		1271787	0					
ANR	1271822	IdentifierDeclType	char [ 512 ]		1271787	0					
ANR	1271823	Identifier	line		1271787	1					
ANR	1271824	PrimaryExpression	512		1271787	2					
ANR	1271825	IdentifierDecl	* s		1271787	1					
ANR	1271826	IdentifierDeclType	char *		1271787	0					
ANR	1271827	Identifier	s		1271787	1					
ANR	1271828	IdentifierDecl	* e		1271787	2					
ANR	1271829	IdentifierDeclType	char *		1271787	0					
ANR	1271830	Identifier	e		1271787	1					
ANR	1271831	ExpressionStatement	lineno = skip = 0	826:4:21035:21052	1271787	3	True				
ANR	1271832	AssignmentExpression	lineno = skip = 0		1271787	0		=			
ANR	1271833	Identifier	lineno		1271787	0					
ANR	1271834	AssignmentExpression	skip = 0		1271787	1		=			
ANR	1271835	Identifier	skip		1271787	0					
ANR	1271836	PrimaryExpression	0		1271787	1					
ANR	1271837	WhileStatement	"while ( fgets ( line , sizeof ( line ) , in ) )"		1271787	4					
ANR	1271838	Condition	"fgets ( line , sizeof ( line ) , in )"	827:11:21065:21093	1271787	0	True				
ANR	1271839	CallExpression	"fgets ( line , sizeof ( line ) , in )"		1271787	0					
ANR	1271840	Callee	fgets		1271787	0					
ANR	1271841	Identifier	fgets		1271787	0					
ANR	1271842	ArgumentList	line		1271787	1					
ANR	1271843	Argument	line		1271787	0					
ANR	1271844	Identifier	line		1271787	0					
ANR	1271845	Argument	sizeof ( line )		1271787	1					
ANR	1271846	SizeofExpression	sizeof ( line )		1271787	0					
ANR	1271847	Sizeof	sizeof		1271787	0					
ANR	1271848	SizeofOperand	line		1271787	1					
ANR	1271849	Argument	in		1271787	2					
ANR	1271850	Identifier	in		1271787	0					
ANR	1271851	CompoundStatement		7:42:181:181	1271787	1					
ANR	1271852	IfStatement	"if ( ( s = strchr ( line , '\\n' ) ) )"		1271787	0					
ANR	1271853	Condition	"s = strchr ( line , '\\n' )"	828:5:21103:21124	1271787	0	True				
ANR	1271854	AssignmentExpression	"s = strchr ( line , '\\n' )"		1271787	0		=			
ANR	1271855	Identifier	s		1271787	0					
ANR	1271856	CallExpression	"strchr ( line , '\\n' )"		1271787	1					
ANR	1271857	Callee	strchr		1271787	0					
ANR	1271858	Identifier	strchr		1271787	0					
ANR	1271859	ArgumentList	line		1271787	1					
ANR	1271860	Argument	line		1271787	0					
ANR	1271861	Identifier	line		1271787	0					
ANR	1271862	Argument	'\\n'		1271787	1					
ANR	1271863	PrimaryExpression	'\\n'		1271787	0					
ANR	1271864	ExpressionStatement	* s = '\\0'	828:30:21128:21137	1271787	1	True				
ANR	1271865	AssignmentExpression	* s = '\\0'		1271787	0		=			
ANR	1271866	UnaryOperationExpression	* s		1271787	0					
ANR	1271867	UnaryOperator	*		1271787	0					
ANR	1271868	Identifier	s		1271787	1					
ANR	1271869	PrimaryExpression	'\\0'		1271787	1					
ANR	1271870	ExpressionStatement	lineno ++	829:8:21147:21155	1271787	1	True				
ANR	1271871	PostIncDecOperationExpression	lineno ++		1271787	0					
ANR	1271872	Identifier	lineno		1271787	0					
ANR	1271873	IncDec	++		1271787	1					
ANR	1271874	IfStatement	if ( line [ 0 ] == 0 || line [ 0 ] == '#' )		1271787	2					
ANR	1271875	Condition	line [ 0 ] == 0 || line [ 0 ] == '#'	834:12:21254:21283	1271787	0	True				
ANR	1271876	OrExpression	line [ 0 ] == 0 || line [ 0 ] == '#'		1271787	0		||			
ANR	1271877	EqualityExpression	line [ 0 ] == 0		1271787	0		==			
ANR	1271878	ArrayIndexing	line [ 0 ]		1271787	0					
ANR	1271879	Identifier	line		1271787	0					
ANR	1271880	PrimaryExpression	0		1271787	1					
ANR	1271881	PrimaryExpression	0		1271787	1					
ANR	1271882	EqualityExpression	line [ 0 ] == '#'		1271787	1		==			
ANR	1271883	ArrayIndexing	line [ 0 ]		1271787	0					
ANR	1271884	Identifier	line		1271787	0					
ANR	1271885	PrimaryExpression	0		1271787	1					
ANR	1271886	PrimaryExpression	'#'		1271787	1					
ANR	1271887	ContinueStatement	continue ;	835:10:21296:21304	1271787	1	True				
ANR	1271888	IfStatement	if ( skip )		1271787	3					
ANR	1271889	Condition	skip	840:12:21394:21397	1271787	0	True				
ANR	1271890	Identifier	skip		1271787	0					
ANR	1271891	CompoundStatement		20:18:485:485	1271787	1					
ANR	1271892	ExpressionStatement	skip --	841:12:21414:21420	1271787	0	True				
ANR	1271893	PostIncDecOperationExpression	skip --		1271787	0					
ANR	1271894	Identifier	skip		1271787	0					
ANR	1271895	IncDec	--		1271787	1					
ANR	1271896	ContinueStatement	continue ;	842:12:21434:21442	1271787	1	True				
ANR	1271897	ForStatement	"for ( s = line , i = code = 0 ; * s != ';' && i < 6 ; i ++ , s ++ )"		1271787	4					
ANR	1271898	ForInit	"s = line , i = code = 0 ;"	849:13:21614:21636	1271787	0	True				
ANR	1271899	Expression	"s = line , i = code = 0"		1271787	0					
ANR	1271900	AssignmentExpression	s = line		1271787	0		=			
ANR	1271901	Identifier	s		1271787	0					
ANR	1271902	Identifier	line		1271787	1					
ANR	1271903	AssignmentExpression	i = code = 0		1271787	1		=			
ANR	1271904	Identifier	i		1271787	0					
ANR	1271905	AssignmentExpression	code = 0		1271787	1		=			
ANR	1271906	Identifier	code		1271787	0					
ANR	1271907	PrimaryExpression	0		1271787	1					
ANR	1271908	Condition	* s != ';' && i < 6	849:37:21638:21655	1271787	1	True				
ANR	1271909	AndExpression	* s != ';' && i < 6		1271787	0		&&			
ANR	1271910	EqualityExpression	* s != ';'		1271787	0		!=			
ANR	1271911	UnaryOperationExpression	* s		1271787	0					
ANR	1271912	UnaryOperator	*		1271787	0					
ANR	1271913	Identifier	s		1271787	1					
ANR	1271914	PrimaryExpression	';'		1271787	1					
ANR	1271915	RelationalExpression	i < 6		1271787	1		<			
ANR	1271916	Identifier	i		1271787	0					
ANR	1271917	PrimaryExpression	6		1271787	1					
ANR	1271918	Expression	"i ++ , s ++"	849:57:21658:21665	1271787	2	True				
ANR	1271919	PostIncDecOperationExpression	i ++		1271787	0					
ANR	1271920	Identifier	i		1271787	0					
ANR	1271921	IncDec	++		1271787	1					
ANR	1271922	PostIncDecOperationExpression	s ++		1271787	1					
ANR	1271923	Identifier	s		1271787	0					
ANR	1271924	IncDec	++		1271787	1					
ANR	1271925	CompoundStatement		29:67:753:753	1271787	3					
ANR	1271926	ExpressionStatement	code <<= 4	850:12:21682:21692	1271787	0	True				
ANR	1271927	AssignmentExpression	code <<= 4		1271787	0		<<=			
ANR	1271928	Identifier	code		1271787	0					
ANR	1271929	PrimaryExpression	4		1271787	1					
ANR	1271930	IfStatement	if ( * s >= '0' && * s <= '9' )		1271787	1					
ANR	1271931	Condition	* s >= '0' && * s <= '9'	851:16:21710:21731	1271787	0	True				
ANR	1271932	AndExpression	* s >= '0' && * s <= '9'		1271787	0		&&			
ANR	1271933	RelationalExpression	* s >= '0'		1271787	0		>=			
ANR	1271934	UnaryOperationExpression	* s		1271787	0					
ANR	1271935	UnaryOperator	*		1271787	0					
ANR	1271936	Identifier	s		1271787	1					
ANR	1271937	PrimaryExpression	'0'		1271787	1					
ANR	1271938	RelationalExpression	* s <= '9'		1271787	1		<=			
ANR	1271939	UnaryOperationExpression	* s		1271787	0					
ANR	1271940	UnaryOperator	*		1271787	0					
ANR	1271941	Identifier	s		1271787	1					
ANR	1271942	PrimaryExpression	'9'		1271787	1					
ANR	1271943	ExpressionStatement	code += * s - '0'	852:14:21748:21764	1271787	1	True				
ANR	1271944	AssignmentExpression	code += * s - '0'		1271787	0		+=			
ANR	1271945	Identifier	code		1271787	0					
ANR	1271946	AdditiveExpression	* s - '0'		1271787	1		-			
ANR	1271947	UnaryOperationExpression	* s		1271787	0					
ANR	1271948	UnaryOperator	*		1271787	0					
ANR	1271949	Identifier	s		1271787	1					
ANR	1271950	PrimaryExpression	'0'		1271787	1					
ANR	1271951	ElseStatement	else		1271787	0					
ANR	1271952	IfStatement	if ( * s >= 'A' && * s <= 'F' )		1271787	0					
ANR	1271953	Condition	* s >= 'A' && * s <= 'F'	853:21:21787:21808	1271787	0	True				
ANR	1271954	AndExpression	* s >= 'A' && * s <= 'F'		1271787	0		&&			
ANR	1271955	RelationalExpression	* s >= 'A'		1271787	0		>=			
ANR	1271956	UnaryOperationExpression	* s		1271787	0					
ANR	1271957	UnaryOperator	*		1271787	0					
ANR	1271958	Identifier	s		1271787	1					
ANR	1271959	PrimaryExpression	'A'		1271787	1					
ANR	1271960	RelationalExpression	* s <= 'F'		1271787	1		<=			
ANR	1271961	UnaryOperationExpression	* s		1271787	0					
ANR	1271962	UnaryOperator	*		1271787	0					
ANR	1271963	Identifier	s		1271787	1					
ANR	1271964	PrimaryExpression	'F'		1271787	1					
ANR	1271965	ExpressionStatement	code += ( * s - 'A' ) + 10	854:14:21825:21848	1271787	1	True				
ANR	1271966	AssignmentExpression	code += ( * s - 'A' ) + 10		1271787	0		+=			
ANR	1271967	Identifier	code		1271787	0					
ANR	1271968	AdditiveExpression	( * s - 'A' ) + 10		1271787	1		+			
ANR	1271969	AdditiveExpression	* s - 'A'		1271787	0		-			
ANR	1271970	UnaryOperationExpression	* s		1271787	0					
ANR	1271971	UnaryOperator	*		1271787	0					
ANR	1271972	Identifier	s		1271787	1					
ANR	1271973	PrimaryExpression	'A'		1271787	1					
ANR	1271974	PrimaryExpression	10		1271787	1					
ANR	1271975	ElseStatement	else		1271787	0					
ANR	1271976	IfStatement	if ( * s >= 'a' && * s <= 'f' )		1271787	0					
ANR	1271977	Condition	* s >= 'a' && * s <= 'f'	855:21:21871:21892	1271787	0	True				
ANR	1271978	AndExpression	* s >= 'a' && * s <= 'f'		1271787	0		&&			
ANR	1271979	RelationalExpression	* s >= 'a'		1271787	0		>=			
ANR	1271980	UnaryOperationExpression	* s		1271787	0					
ANR	1271981	UnaryOperator	*		1271787	0					
ANR	1271982	Identifier	s		1271787	1					
ANR	1271983	PrimaryExpression	'a'		1271787	1					
ANR	1271984	RelationalExpression	* s <= 'f'		1271787	1		<=			
ANR	1271985	UnaryOperationExpression	* s		1271787	0					
ANR	1271986	UnaryOperator	*		1271787	0					
ANR	1271987	Identifier	s		1271787	1					
ANR	1271988	PrimaryExpression	'f'		1271787	1					
ANR	1271989	ExpressionStatement	code += ( * s - 'a' ) + 10	856:14:21909:21932	1271787	1	True				
ANR	1271990	AssignmentExpression	code += ( * s - 'a' ) + 10		1271787	0		+=			
ANR	1271991	Identifier	code		1271787	0					
ANR	1271992	AdditiveExpression	( * s - 'a' ) + 10		1271787	1		+			
ANR	1271993	AdditiveExpression	* s - 'a'		1271787	0		-			
ANR	1271994	UnaryOperationExpression	* s		1271787	0					
ANR	1271995	UnaryOperator	*		1271787	0					
ANR	1271996	Identifier	s		1271787	1					
ANR	1271997	PrimaryExpression	'a'		1271787	1					
ANR	1271998	PrimaryExpression	10		1271787	1					
ANR	1271999	SwitchStatement	switch ( code )		1271787	5					
ANR	1272000	Condition	code	868:16:22293:22296	1271787	0	True				
ANR	1272001	Identifier	code		1271787	0					
ANR	1272002	CompoundStatement		48:22:1384:1384	1271787	1					
ANR	1272003	Label	case 0x3400 :	869:3:22304:22315	1271787	0	True				
ANR	1272004	ExpressionStatement	"add_range ( 0x3400 , 0x4db5 , ""Lo"" , ""L"" )"	871:12:22366:22402	1271787	1	True				
ANR	1272005	CallExpression	"add_range ( 0x3400 , 0x4db5 , ""Lo"" , ""L"" )"		1271787	0					
ANR	1272006	Callee	add_range		1271787	0					
ANR	1272007	Identifier	add_range		1271787	0					
ANR	1272008	ArgumentList	0x3400		1271787	1					
ANR	1272009	Argument	0x3400		1271787	0					
ANR	1272010	PrimaryExpression	0x3400		1271787	0					
ANR	1272011	Argument	0x4db5		1271787	1					
ANR	1272012	PrimaryExpression	0x4db5		1271787	0					
ANR	1272013	Argument	"""Lo"""		1271787	2					
ANR	1272014	PrimaryExpression	"""Lo"""		1271787	0					
ANR	1272015	Argument	"""L"""		1271787	3					
ANR	1272016	PrimaryExpression	"""L"""		1271787	0					
ANR	1272017	ExpressionStatement	"add_range ( 0x3400 , 0x4db5 , ""Cp"" , 0 )"	873:12:22417:22451	1271787	2	True				
ANR	1272018	CallExpression	"add_range ( 0x3400 , 0x4db5 , ""Cp"" , 0 )"		1271787	0					
ANR	1272019	Callee	add_range		1271787	0					
ANR	1272020	Identifier	add_range		1271787	0					
ANR	1272021	ArgumentList	0x3400		1271787	1					
ANR	1272022	Argument	0x3400		1271787	0					
ANR	1272023	PrimaryExpression	0x3400		1271787	0					
ANR	1272024	Argument	0x4db5		1271787	1					
ANR	1272025	PrimaryExpression	0x4db5		1271787	0					
ANR	1272026	Argument	"""Cp"""		1271787	2					
ANR	1272027	PrimaryExpression	"""Cp"""		1271787	0					
ANR	1272028	Argument	0		1271787	3					
ANR	1272029	PrimaryExpression	0		1271787	0					
ANR	1272030	ExpressionStatement	skip = 1	875:5:22459:22467	1271787	3	True				
ANR	1272031	AssignmentExpression	skip = 1		1271787	0		=			
ANR	1272032	Identifier	skip		1271787	0					
ANR	1272033	PrimaryExpression	1		1271787	1					
ANR	1272034	BreakStatement	break ;	876:5:22474:22479	1271787	4	True				
ANR	1272035	Label	case 0x4e00 :	877:10:22491:22502	1271787	5	True				
ANR	1272036	ExpressionStatement	"add_range ( 0x4e00 , 0x9fff , ""Lo"" , ""L"" )"	881:12:22582:22618	1271787	6	True				
ANR	1272037	CallExpression	"add_range ( 0x4e00 , 0x9fff , ""Lo"" , ""L"" )"		1271787	0					
ANR	1272038	Callee	add_range		1271787	0					
ANR	1272039	Identifier	add_range		1271787	0					
ANR	1272040	ArgumentList	0x4e00		1271787	1					
ANR	1272041	Argument	0x4e00		1271787	0					
ANR	1272042	PrimaryExpression	0x4e00		1271787	0					
ANR	1272043	Argument	0x9fff		1271787	1					
ANR	1272044	PrimaryExpression	0x9fff		1271787	0					
ANR	1272045	Argument	"""Lo"""		1271787	2					
ANR	1272046	PrimaryExpression	"""Lo"""		1271787	0					
ANR	1272047	Argument	"""L"""		1271787	3					
ANR	1272048	PrimaryExpression	"""L"""		1271787	0					
ANR	1272049	ExpressionStatement	"add_range ( 0x4e00 , 0x9fa5 , ""Cp"" , 0 )"	886:12:22723:22757	1271787	7	True				
ANR	1272050	CallExpression	"add_range ( 0x4e00 , 0x9fa5 , ""Cp"" , 0 )"		1271787	0					
ANR	1272051	Callee	add_range		1271787	0					
ANR	1272052	Identifier	add_range		1271787	0					
ANR	1272053	ArgumentList	0x4e00		1271787	1					
ANR	1272054	Argument	0x4e00		1271787	0					
ANR	1272055	PrimaryExpression	0x4e00		1271787	0					
ANR	1272056	Argument	0x9fa5		1271787	1					
ANR	1272057	PrimaryExpression	0x9fa5		1271787	0					
ANR	1272058	Argument	"""Cp"""		1271787	2					
ANR	1272059	PrimaryExpression	"""Cp"""		1271787	0					
ANR	1272060	Argument	0		1271787	3					
ANR	1272061	PrimaryExpression	0		1271787	0					
ANR	1272062	ExpressionStatement	skip = 1	888:12:22772:22780	1271787	8	True				
ANR	1272063	AssignmentExpression	skip = 1		1271787	0		=			
ANR	1272064	Identifier	skip		1271787	0					
ANR	1272065	PrimaryExpression	1		1271787	1					
ANR	1272066	BreakStatement	break ;	889:12:22794:22799	1271787	9	True				
ANR	1272067	Label	case 0xac00 :	890:10:22811:22822	1271787	10	True				
ANR	1272068	ExpressionStatement	"add_range ( 0xac00 , 0xd7a3 , ""Lo"" , ""L"" )"	894:12:22904:22940	1271787	11	True				
ANR	1272069	CallExpression	"add_range ( 0xac00 , 0xd7a3 , ""Lo"" , ""L"" )"		1271787	0					
ANR	1272070	Callee	add_range		1271787	0					
ANR	1272071	Identifier	add_range		1271787	0					
ANR	1272072	ArgumentList	0xac00		1271787	1					
ANR	1272073	Argument	0xac00		1271787	0					
ANR	1272074	PrimaryExpression	0xac00		1271787	0					
ANR	1272075	Argument	0xd7a3		1271787	1					
ANR	1272076	PrimaryExpression	0xd7a3		1271787	0					
ANR	1272077	Argument	"""Lo"""		1271787	2					
ANR	1272078	PrimaryExpression	"""Lo"""		1271787	0					
ANR	1272079	Argument	"""L"""		1271787	3					
ANR	1272080	PrimaryExpression	"""L"""		1271787	0					
ANR	1272081	ExpressionStatement	"add_range ( 0xac00 , 0xd7a3 , ""Cp"" , 0 )"	899:12:23045:23079	1271787	12	True				
ANR	1272082	CallExpression	"add_range ( 0xac00 , 0xd7a3 , ""Cp"" , 0 )"		1271787	0					
ANR	1272083	Callee	add_range		1271787	0					
ANR	1272084	Identifier	add_range		1271787	0					
ANR	1272085	ArgumentList	0xac00		1271787	1					
ANR	1272086	Argument	0xac00		1271787	0					
ANR	1272087	PrimaryExpression	0xac00		1271787	0					
ANR	1272088	Argument	0xd7a3		1271787	1					
ANR	1272089	PrimaryExpression	0xd7a3		1271787	0					
ANR	1272090	Argument	"""Cp"""		1271787	2					
ANR	1272091	PrimaryExpression	"""Cp"""		1271787	0					
ANR	1272092	Argument	0		1271787	3					
ANR	1272093	PrimaryExpression	0		1271787	0					
ANR	1272094	ExpressionStatement	skip = 1	901:12:23094:23102	1271787	13	True				
ANR	1272095	AssignmentExpression	skip = 1		1271787	0		=			
ANR	1272096	Identifier	skip		1271787	0					
ANR	1272097	PrimaryExpression	1		1271787	1					
ANR	1272098	BreakStatement	break ;	902:12:23116:23121	1271787	14	True				
ANR	1272099	Label	case 0xd800 :	903:10:23133:23144	1271787	15	True				
ANR	1272100	ExpressionStatement	"add_range ( 0x010000 , 0x10ffff , ""Cs"" , ""L"" )"	908:12:23286:23326	1271787	16	True				
ANR	1272101	CallExpression	"add_range ( 0x010000 , 0x10ffff , ""Cs"" , ""L"" )"		1271787	0					
ANR	1272102	Callee	add_range		1271787	0					
ANR	1272103	Identifier	add_range		1271787	0					
ANR	1272104	ArgumentList	0x010000		1271787	1					
ANR	1272105	Argument	0x010000		1271787	0					
ANR	1272106	PrimaryExpression	0x010000		1271787	0					
ANR	1272107	Argument	0x10ffff		1271787	1					
ANR	1272108	PrimaryExpression	0x10ffff		1271787	0					
ANR	1272109	Argument	"""Cs"""		1271787	2					
ANR	1272110	PrimaryExpression	"""Cs"""		1271787	0					
ANR	1272111	Argument	"""L"""		1271787	3					
ANR	1272112	PrimaryExpression	"""L"""		1271787	0					
ANR	1272113	ExpressionStatement	skip = 5	909:12:23340:23348	1271787	17	True				
ANR	1272114	AssignmentExpression	skip = 5		1271787	0		=			
ANR	1272115	Identifier	skip		1271787	0					
ANR	1272116	PrimaryExpression	5		1271787	1					
ANR	1272117	BreakStatement	break ;	910:12:23362:23367	1271787	18	True				
ANR	1272118	Label	case 0xe000 :	911:10:23379:23390	1271787	19	True				
ANR	1272119	ExpressionStatement	"add_range ( 0xe000 , 0xf8ff , ""Co"" , ""L"" )"	915:12:23511:23547	1271787	20	True				
ANR	1272120	CallExpression	"add_range ( 0xe000 , 0xf8ff , ""Co"" , ""L"" )"		1271787	0					
ANR	1272121	Callee	add_range		1271787	0					
ANR	1272122	Identifier	add_range		1271787	0					
ANR	1272123	ArgumentList	0xe000		1271787	1					
ANR	1272124	Argument	0xe000		1271787	0					
ANR	1272125	PrimaryExpression	0xe000		1271787	0					
ANR	1272126	Argument	0xf8ff		1271787	1					
ANR	1272127	PrimaryExpression	0xf8ff		1271787	0					
ANR	1272128	Argument	"""Co"""		1271787	2					
ANR	1272129	PrimaryExpression	"""Co"""		1271787	0					
ANR	1272130	Argument	"""L"""		1271787	3					
ANR	1272131	PrimaryExpression	"""L"""		1271787	0					
ANR	1272132	ExpressionStatement	skip = 1	916:12:23561:23569	1271787	21	True				
ANR	1272133	AssignmentExpression	skip = 1		1271787	0		=			
ANR	1272134	Identifier	skip		1271787	0					
ANR	1272135	PrimaryExpression	1		1271787	1					
ANR	1272136	BreakStatement	break ;	917:12:23583:23588	1271787	22	True				
ANR	1272137	Label	case 0xf900 :	918:10:23600:23611	1271787	23	True				
ANR	1272138	ExpressionStatement	"add_range ( 0xf900 , 0xfaff , ""Lo"" , ""L"" )"	922:12:23699:23735	1271787	24	True				
ANR	1272139	CallExpression	"add_range ( 0xf900 , 0xfaff , ""Lo"" , ""L"" )"		1271787	0					
ANR	1272140	Callee	add_range		1271787	0					
ANR	1272141	Identifier	add_range		1271787	0					
ANR	1272142	ArgumentList	0xf900		1271787	1					
ANR	1272143	Argument	0xf900		1271787	0					
ANR	1272144	PrimaryExpression	0xf900		1271787	0					
ANR	1272145	Argument	0xfaff		1271787	1					
ANR	1272146	PrimaryExpression	0xfaff		1271787	0					
ANR	1272147	Argument	"""Lo"""		1271787	2					
ANR	1272148	PrimaryExpression	"""Lo"""		1271787	0					
ANR	1272149	Argument	"""L"""		1271787	3					
ANR	1272150	PrimaryExpression	"""L"""		1271787	0					
ANR	1272151	ExpressionStatement	"add_range ( 0xf900 , 0xfaff , ""Cp"" , 0 )"	927:12:23840:23874	1271787	25	True				
ANR	1272152	CallExpression	"add_range ( 0xf900 , 0xfaff , ""Cp"" , 0 )"		1271787	0					
ANR	1272153	Callee	add_range		1271787	0					
ANR	1272154	Identifier	add_range		1271787	0					
ANR	1272155	ArgumentList	0xf900		1271787	1					
ANR	1272156	Argument	0xf900		1271787	0					
ANR	1272157	PrimaryExpression	0xf900		1271787	0					
ANR	1272158	Argument	0xfaff		1271787	1					
ANR	1272159	PrimaryExpression	0xfaff		1271787	0					
ANR	1272160	Argument	"""Cp"""		1271787	2					
ANR	1272161	PrimaryExpression	"""Cp"""		1271787	0					
ANR	1272162	Argument	0		1271787	3					
ANR	1272163	PrimaryExpression	0		1271787	0					
ANR	1272164	ExpressionStatement	skip = 1	929:12:23889:23897	1271787	26	True				
ANR	1272165	AssignmentExpression	skip = 1		1271787	0		=			
ANR	1272166	Identifier	skip		1271787	0					
ANR	1272167	PrimaryExpression	1		1271787	1					
ANR	1272168	BreakStatement	break ;	930:5:23904:23909	1271787	27	True				
ANR	1272169	Label	case 0x20000 :	931:3:23914:23926	1271787	28	True				
ANR	1272170	ExpressionStatement	"add_range ( 0x20000 , 0x2a6d6 , ""Lo"" , ""L"" )"	933:12:23977:24015	1271787	29	True				
ANR	1272171	CallExpression	"add_range ( 0x20000 , 0x2a6d6 , ""Lo"" , ""L"" )"		1271787	0					
ANR	1272172	Callee	add_range		1271787	0					
ANR	1272173	Identifier	add_range		1271787	0					
ANR	1272174	ArgumentList	0x20000		1271787	1					
ANR	1272175	Argument	0x20000		1271787	0					
ANR	1272176	PrimaryExpression	0x20000		1271787	0					
ANR	1272177	Argument	0x2a6d6		1271787	1					
ANR	1272178	PrimaryExpression	0x2a6d6		1271787	0					
ANR	1272179	Argument	"""Lo"""		1271787	2					
ANR	1272180	PrimaryExpression	"""Lo"""		1271787	0					
ANR	1272181	Argument	"""L"""		1271787	3					
ANR	1272182	PrimaryExpression	"""L"""		1271787	0					
ANR	1272183	ExpressionStatement	"add_range ( 0x20000 , 0x2a6d6 , ""Cp"" , 0 )"	935:12:24030:24066	1271787	30	True				
ANR	1272184	CallExpression	"add_range ( 0x20000 , 0x2a6d6 , ""Cp"" , 0 )"		1271787	0					
ANR	1272185	Callee	add_range		1271787	0					
ANR	1272186	Identifier	add_range		1271787	0					
ANR	1272187	ArgumentList	0x20000		1271787	1					
ANR	1272188	Argument	0x20000		1271787	0					
ANR	1272189	PrimaryExpression	0x20000		1271787	0					
ANR	1272190	Argument	0x2a6d6		1271787	1					
ANR	1272191	PrimaryExpression	0x2a6d6		1271787	0					
ANR	1272192	Argument	"""Cp"""		1271787	2					
ANR	1272193	PrimaryExpression	"""Cp"""		1271787	0					
ANR	1272194	Argument	0		1271787	3					
ANR	1272195	PrimaryExpression	0		1271787	0					
ANR	1272196	ExpressionStatement	skip = 1	937:5:24074:24082	1271787	31	True				
ANR	1272197	AssignmentExpression	skip = 1		1271787	0		=			
ANR	1272198	Identifier	skip		1271787	0					
ANR	1272199	PrimaryExpression	1		1271787	1					
ANR	1272200	BreakStatement	break ;	938:5:24089:24094	1271787	32	True				
ANR	1272201	Label	case 0xf0000 :	939:3:24099:24111	1271787	33	True				
ANR	1272202	ExpressionStatement	"add_range ( 0xf0000 , 0xffffd , ""Co"" , ""L"" )"	941:5:24150:24188	1271787	34	True				
ANR	1272203	CallExpression	"add_range ( 0xf0000 , 0xffffd , ""Co"" , ""L"" )"		1271787	0					
ANR	1272204	Callee	add_range		1271787	0					
ANR	1272205	Identifier	add_range		1271787	0					
ANR	1272206	ArgumentList	0xf0000		1271787	1					
ANR	1272207	Argument	0xf0000		1271787	0					
ANR	1272208	PrimaryExpression	0xf0000		1271787	0					
ANR	1272209	Argument	0xffffd		1271787	1					
ANR	1272210	PrimaryExpression	0xffffd		1271787	0					
ANR	1272211	Argument	"""Co"""		1271787	2					
ANR	1272212	PrimaryExpression	"""Co"""		1271787	0					
ANR	1272213	Argument	"""L"""		1271787	3					
ANR	1272214	PrimaryExpression	"""L"""		1271787	0					
ANR	1272215	ExpressionStatement	skip = 1	942:5:24195:24203	1271787	35	True				
ANR	1272216	AssignmentExpression	skip = 1		1271787	0		=			
ANR	1272217	Identifier	skip		1271787	0					
ANR	1272218	PrimaryExpression	1		1271787	1					
ANR	1272219	BreakStatement	break ;	943:5:24210:24215	1271787	36	True				
ANR	1272220	Label	case 0x100000 :	945:3:24221:24234	1271787	37	True				
ANR	1272221	ExpressionStatement	"add_range ( 0x100000 , 0x10fffd , ""Co"" , ""L"" )"	947:5:24273:24313	1271787	38	True				
ANR	1272222	CallExpression	"add_range ( 0x100000 , 0x10fffd , ""Co"" , ""L"" )"		1271787	0					
ANR	1272223	Callee	add_range		1271787	0					
ANR	1272224	Identifier	add_range		1271787	0					
ANR	1272225	ArgumentList	0x100000		1271787	1					
ANR	1272226	Argument	0x100000		1271787	0					
ANR	1272227	PrimaryExpression	0x100000		1271787	0					
ANR	1272228	Argument	0x10fffd		1271787	1					
ANR	1272229	PrimaryExpression	0x10fffd		1271787	0					
ANR	1272230	Argument	"""Co"""		1271787	2					
ANR	1272231	PrimaryExpression	"""Co"""		1271787	0					
ANR	1272232	Argument	"""L"""		1271787	3					
ANR	1272233	PrimaryExpression	"""L"""		1271787	0					
ANR	1272234	ExpressionStatement	skip = 1	948:5:24320:24328	1271787	39	True				
ANR	1272235	AssignmentExpression	skip = 1		1271787	0		=			
ANR	1272236	Identifier	skip		1271787	0					
ANR	1272237	PrimaryExpression	1		1271787	1					
ANR	1272238	BreakStatement	break ;	949:5:24335:24340	1271787	40	True				
ANR	1272239	IfStatement	if ( skip )		1271787	6					
ANR	1272240	Condition	skip	952:12:24365:24368	1271787	0	True				
ANR	1272241	Identifier	skip		1271787	0					
ANR	1272242	ContinueStatement	continue ;	953:10:24381:24389	1271787	1	True				
ANR	1272243	ExpressionStatement	"ordered_range_insert ( code , ""Cp"" , 2 )"	958:8:24472:24507	1271787	7	True				
ANR	1272244	CallExpression	"ordered_range_insert ( code , ""Cp"" , 2 )"		1271787	0					
ANR	1272245	Callee	ordered_range_insert		1271787	0					
ANR	1272246	Identifier	ordered_range_insert		1271787	0					
ANR	1272247	ArgumentList	code		1271787	1					
ANR	1272248	Argument	code		1271787	0					
ANR	1272249	Identifier	code		1271787	0					
ANR	1272250	Argument	"""Cp"""		1271787	1					
ANR	1272251	PrimaryExpression	"""Cp"""		1271787	0					
ANR	1272252	Argument	2		1271787	2					
ANR	1272253	PrimaryExpression	2		1271787	0					
ANR	1272254	ForStatement	for ( i = 0 ; * s != 0 && i < 2 ; s ++ )		1271787	8					
ANR	1272255	ForInit	i = 0 ;	963:13:24600:24605	1271787	0	True				
ANR	1272256	AssignmentExpression	i = 0		1271787	0		=			
ANR	1272257	Identifier	i		1271787	0					
ANR	1272258	PrimaryExpression	0		1271787	1					
ANR	1272259	Condition	* s != 0 && i < 2	963:20:24607:24622	1271787	1	True				
ANR	1272260	AndExpression	* s != 0 && i < 2		1271787	0		&&			
ANR	1272261	EqualityExpression	* s != 0		1271787	0		!=			
ANR	1272262	UnaryOperationExpression	* s		1271787	0					
ANR	1272263	UnaryOperator	*		1271787	0					
ANR	1272264	Identifier	s		1271787	1					
ANR	1272265	PrimaryExpression	0		1271787	1					
ANR	1272266	RelationalExpression	i < 2		1271787	1		<			
ANR	1272267	Identifier	i		1271787	0					
ANR	1272268	PrimaryExpression	2		1271787	1					
ANR	1272269	PostIncDecOperationExpression	s ++	963:38:24625:24627	1271787	2	True				
ANR	1272270	Identifier	s		1271787	0					
ANR	1272271	IncDec	++		1271787	1					
ANR	1272272	CompoundStatement		143:43:3715:3715	1271787	3					
ANR	1272273	IfStatement	if ( * s == ';' )		1271787	0					
ANR	1272274	Condition	* s == ';'	964:16:24648:24656	1271787	0	True				
ANR	1272275	EqualityExpression	* s == ';'		1271787	0		==			
ANR	1272276	UnaryOperationExpression	* s		1271787	0					
ANR	1272277	UnaryOperator	*		1271787	0					
ANR	1272278	Identifier	s		1271787	1					
ANR	1272279	PrimaryExpression	';'		1271787	1					
ANR	1272280	ExpressionStatement	i ++	965:14:24673:24676	1271787	1	True				
ANR	1272281	PostIncDecOperationExpression	i ++		1271787	0					
ANR	1272282	Identifier	i		1271787	0					
ANR	1272283	IncDec	++		1271787	1					
ANR	1272284	ForStatement	for ( e = s ; * e && * e != ';' ; e ++ )		1271787	9					
ANR	1272285	ForInit	e = s ;	967:13:24701:24706	1271787	0	True				
ANR	1272286	AssignmentExpression	e = s		1271787	0		=			
ANR	1272287	Identifier	e		1271787	0					
ANR	1272288	Identifier	s		1271787	1					
ANR	1272289	Condition	* e && * e != ';'	967:20:24708:24722	1271787	1	True				
ANR	1272290	AndExpression	* e && * e != ';'		1271787	0		&&			
ANR	1272291	UnaryOperationExpression	* e		1271787	0					
ANR	1272292	UnaryOperator	*		1271787	0					
ANR	1272293	Identifier	e		1271787	1					
ANR	1272294	EqualityExpression	* e != ';'		1271787	1		!=			
ANR	1272295	UnaryOperationExpression	* e		1271787	0					
ANR	1272296	UnaryOperator	*		1271787	0					
ANR	1272297	Identifier	e		1271787	1					
ANR	1272298	PrimaryExpression	';'		1271787	1					
ANR	1272299	PostIncDecOperationExpression	e ++	967:37:24725:24727	1271787	2	True				
ANR	1272300	Identifier	e		1271787	0					
ANR	1272301	IncDec	++		1271787	1					
ANR	1272302	ExpressionStatement		967:42:24730:24730	1271787	3	True				
ANR	1272303	ExpressionStatement	"ordered_range_insert ( code , s , e - s )"	969:8:24741:24777	1271787	10	True				
ANR	1272304	CallExpression	"ordered_range_insert ( code , s , e - s )"		1271787	0					
ANR	1272305	Callee	ordered_range_insert		1271787	0					
ANR	1272306	Identifier	ordered_range_insert		1271787	0					
ANR	1272307	ArgumentList	code		1271787	1					
ANR	1272308	Argument	code		1271787	0					
ANR	1272309	Identifier	code		1271787	0					
ANR	1272310	Argument	s		1271787	1					
ANR	1272311	Identifier	s		1271787	0					
ANR	1272312	Argument	e - s		1271787	2					
ANR	1272313	AdditiveExpression	e - s		1271787	0		-			
ANR	1272314	Identifier	e		1271787	0					
ANR	1272315	Identifier	s		1271787	1					
ANR	1272316	ForStatement	for ( s = e ; * s != 0 && i < 3 ; s ++ )		1271787	11					
ANR	1272317	ForInit	s = e ;	974:13:24860:24865	1271787	0	True				
ANR	1272318	AssignmentExpression	s = e		1271787	0		=			
ANR	1272319	Identifier	s		1271787	0					
ANR	1272320	Identifier	e		1271787	1					
ANR	1272321	Condition	* s != 0 && i < 3	974:20:24867:24882	1271787	1	True				
ANR	1272322	AndExpression	* s != 0 && i < 3		1271787	0		&&			
ANR	1272323	EqualityExpression	* s != 0		1271787	0		!=			
ANR	1272324	UnaryOperationExpression	* s		1271787	0					
ANR	1272325	UnaryOperator	*		1271787	0					
ANR	1272326	Identifier	s		1271787	1					
ANR	1272327	PrimaryExpression	0		1271787	1					
ANR	1272328	RelationalExpression	i < 3		1271787	1		<			
ANR	1272329	Identifier	i		1271787	0					
ANR	1272330	PrimaryExpression	3		1271787	1					
ANR	1272331	PostIncDecOperationExpression	s ++	974:38:24885:24887	1271787	2	True				
ANR	1272332	Identifier	s		1271787	0					
ANR	1272333	IncDec	++		1271787	1					
ANR	1272334	CompoundStatement		154:43:3975:3975	1271787	3					
ANR	1272335	IfStatement	if ( * s == ';' )		1271787	0					
ANR	1272336	Condition	* s == ';'	975:16:24908:24916	1271787	0	True				
ANR	1272337	EqualityExpression	* s == ';'		1271787	0		==			
ANR	1272338	UnaryOperationExpression	* s		1271787	0					
ANR	1272339	UnaryOperator	*		1271787	0					
ANR	1272340	Identifier	s		1271787	1					
ANR	1272341	PrimaryExpression	';'		1271787	1					
ANR	1272342	ExpressionStatement	i ++	976:14:24933:24936	1271787	1	True				
ANR	1272343	PostIncDecOperationExpression	i ++		1271787	0					
ANR	1272344	Identifier	i		1271787	0					
ANR	1272345	IncDec	++		1271787	1					
ANR	1272346	ForStatement	"for ( ccl_code = 0 , e = s ; * e && * e != ';' ; e ++ )"		1271787	12					
ANR	1272347	ForInit	"ccl_code = 0 , e = s ;"	982:13:25043:25062	1271787	0	True				
ANR	1272348	Expression	"ccl_code = 0 , e = s"		1271787	0					
ANR	1272349	AssignmentExpression	ccl_code = 0		1271787	0		=			
ANR	1272350	Identifier	ccl_code		1271787	0					
ANR	1272351	PrimaryExpression	0		1271787	1					
ANR	1272352	AssignmentExpression	e = s		1271787	1		=			
ANR	1272353	Identifier	e		1271787	0					
ANR	1272354	Identifier	s		1271787	1					
ANR	1272355	Condition	* e && * e != ';'	982:34:25064:25078	1271787	1	True				
ANR	1272356	AndExpression	* e && * e != ';'		1271787	0		&&			
ANR	1272357	UnaryOperationExpression	* e		1271787	0					
ANR	1272358	UnaryOperator	*		1271787	0					
ANR	1272359	Identifier	e		1271787	1					
ANR	1272360	EqualityExpression	* e != ';'		1271787	1		!=			
ANR	1272361	UnaryOperationExpression	* e		1271787	0					
ANR	1272362	UnaryOperator	*		1271787	0					
ANR	1272363	Identifier	e		1271787	1					
ANR	1272364	PrimaryExpression	';'		1271787	1					
ANR	1272365	PostIncDecOperationExpression	e ++	982:51:25081:25083	1271787	2	True				
ANR	1272366	Identifier	e		1271787	0					
ANR	1272367	IncDec	++		1271787	1					
ANR	1272368	ExpressionStatement	ccl_code = ( ccl_code * 10 ) + ( * e - '0' )	983:10:25096:25135	1271787	3	True				
ANR	1272369	AssignmentExpression	ccl_code = ( ccl_code * 10 ) + ( * e - '0' )		1271787	0		=			
ANR	1272370	Identifier	ccl_code		1271787	0					
ANR	1272371	AdditiveExpression	( ccl_code * 10 ) + ( * e - '0' )		1271787	1		+			
ANR	1272372	MultiplicativeExpression	ccl_code * 10		1271787	0		*			
ANR	1272373	Identifier	ccl_code		1271787	0					
ANR	1272374	PrimaryExpression	10		1271787	1					
ANR	1272375	AdditiveExpression	* e - '0'		1271787	1		-			
ANR	1272376	UnaryOperationExpression	* e		1271787	0					
ANR	1272377	UnaryOperator	*		1271787	0					
ANR	1272378	Identifier	e		1271787	1					
ANR	1272379	PrimaryExpression	'0'		1271787	1					
ANR	1272380	IfStatement	if ( ccl_code != 0 )		1271787	13					
ANR	1272381	Condition	ccl_code != 0	988:12:25210:25222	1271787	0	True				
ANR	1272382	EqualityExpression	ccl_code != 0		1271787	0		!=			
ANR	1272383	Identifier	ccl_code		1271787	0					
ANR	1272384	PrimaryExpression	0		1271787	1					
ANR	1272385	ExpressionStatement	"ordered_ccl_insert ( code , ccl_code )"	989:10:25235:25269	1271787	1	True				
ANR	1272386	CallExpression	"ordered_ccl_insert ( code , ccl_code )"		1271787	0					
ANR	1272387	Callee	ordered_ccl_insert		1271787	0					
ANR	1272388	Identifier	ordered_ccl_insert		1271787	0					
ANR	1272389	ArgumentList	code		1271787	1					
ANR	1272390	Argument	code		1271787	0					
ANR	1272391	Identifier	code		1271787	0					
ANR	1272392	Argument	ccl_code		1271787	1					
ANR	1272393	Identifier	ccl_code		1271787	0					
ANR	1272394	ForStatement	for ( s = e ; * s != 0 && i < 4 ; s ++ )		1271787	14					
ANR	1272395	ForInit	s = e ;	994:13:25363:25368	1271787	0	True				
ANR	1272396	AssignmentExpression	s = e		1271787	0		=			
ANR	1272397	Identifier	s		1271787	0					
ANR	1272398	Identifier	e		1271787	1					
ANR	1272399	Condition	* s != 0 && i < 4	994:20:25370:25385	1271787	1	True				
ANR	1272400	AndExpression	* s != 0 && i < 4		1271787	0		&&			
ANR	1272401	EqualityExpression	* s != 0		1271787	0		!=			
ANR	1272402	UnaryOperationExpression	* s		1271787	0					
ANR	1272403	UnaryOperator	*		1271787	0					
ANR	1272404	Identifier	s		1271787	1					
ANR	1272405	PrimaryExpression	0		1271787	1					
ANR	1272406	RelationalExpression	i < 4		1271787	1		<			
ANR	1272407	Identifier	i		1271787	0					
ANR	1272408	PrimaryExpression	4		1271787	1					
ANR	1272409	PostIncDecOperationExpression	s ++	994:38:25388:25390	1271787	2	True				
ANR	1272410	Identifier	s		1271787	0					
ANR	1272411	IncDec	++		1271787	1					
ANR	1272412	CompoundStatement		174:43:4478:4478	1271787	3					
ANR	1272413	IfStatement	if ( * s == ';' )		1271787	0					
ANR	1272414	Condition	* s == ';'	995:16:25411:25419	1271787	0	True				
ANR	1272415	EqualityExpression	* s == ';'		1271787	0		==			
ANR	1272416	UnaryOperationExpression	* s		1271787	0					
ANR	1272417	UnaryOperator	*		1271787	0					
ANR	1272418	Identifier	s		1271787	1					
ANR	1272419	PrimaryExpression	';'		1271787	1					
ANR	1272420	ExpressionStatement	i ++	996:14:25436:25439	1271787	1	True				
ANR	1272421	PostIncDecOperationExpression	i ++		1271787	0					
ANR	1272422	Identifier	i		1271787	0					
ANR	1272423	IncDec	++		1271787	1					
ANR	1272424	ForStatement	for ( e = s ; * e && * e != ';' ; e ++ )		1271787	15					
ANR	1272425	ForInit	e = s ;	998:13:25464:25469	1271787	0	True				
ANR	1272426	AssignmentExpression	e = s		1271787	0		=			
ANR	1272427	Identifier	e		1271787	0					
ANR	1272428	Identifier	s		1271787	1					
ANR	1272429	Condition	* e && * e != ';'	998:20:25471:25485	1271787	1	True				
ANR	1272430	AndExpression	* e && * e != ';'		1271787	0		&&			
ANR	1272431	UnaryOperationExpression	* e		1271787	0					
ANR	1272432	UnaryOperator	*		1271787	0					
ANR	1272433	Identifier	e		1271787	1					
ANR	1272434	EqualityExpression	* e != ';'		1271787	1		!=			
ANR	1272435	UnaryOperationExpression	* e		1271787	0					
ANR	1272436	UnaryOperator	*		1271787	0					
ANR	1272437	Identifier	e		1271787	1					
ANR	1272438	PrimaryExpression	';'		1271787	1					
ANR	1272439	PostIncDecOperationExpression	e ++	998:37:25488:25490	1271787	2	True				
ANR	1272440	Identifier	e		1271787	0					
ANR	1272441	IncDec	++		1271787	1					
ANR	1272442	ExpressionStatement		998:42:25493:25493	1271787	3	True				
ANR	1272443	ExpressionStatement	"ordered_range_insert ( code , s , e - s )"	1000:8:25504:25540	1271787	16	True				
ANR	1272444	CallExpression	"ordered_range_insert ( code , s , e - s )"		1271787	0					
ANR	1272445	Callee	ordered_range_insert		1271787	0					
ANR	1272446	Identifier	ordered_range_insert		1271787	0					
ANR	1272447	ArgumentList	code		1271787	1					
ANR	1272448	Argument	code		1271787	0					
ANR	1272449	Identifier	code		1271787	0					
ANR	1272450	Argument	s		1271787	1					
ANR	1272451	Identifier	s		1271787	0					
ANR	1272452	Argument	e - s		1271787	2					
ANR	1272453	AdditiveExpression	e - s		1271787	0		-			
ANR	1272454	Identifier	e		1271787	0					
ANR	1272455	Identifier	s		1271787	1					
ANR	1272456	ExpressionStatement	s = ++ e	1005:8:25612:25619	1271787	17	True				
ANR	1272457	AssignmentExpression	s = ++ e		1271787	0		=			
ANR	1272458	Identifier	s		1271787	0					
ANR	1272459	UnaryExpression	++ e		1271787	1					
ANR	1272460	IncDec	++		1271787	0					
ANR	1272461	Identifier	e		1271787	1					
ANR	1272462	IfStatement	if ( * s != ';' )		1271787	18					
ANR	1272463	Condition	* s != ';'	1006:12:25633:25641	1271787	0	True				
ANR	1272464	EqualityExpression	* s != ';'		1271787	0		!=			
ANR	1272465	UnaryOperationExpression	* s		1271787	0					
ANR	1272466	UnaryOperator	*		1271787	0					
ANR	1272467	Identifier	s		1271787	1					
ANR	1272468	PrimaryExpression	';'		1271787	1					
ANR	1272469	CompoundStatement		186:23:4729:4729	1271787	1					
ANR	1272470	ExpressionStatement	compat = * s == '<'	1007:5:25651:25669	1271787	0	True				
ANR	1272471	AssignmentExpression	compat = * s == '<'		1271787	0		=			
ANR	1272472	Identifier	compat		1271787	0					
ANR	1272473	EqualityExpression	* s == '<'		1271787	1		==			
ANR	1272474	UnaryOperationExpression	* s		1271787	0					
ANR	1272475	UnaryOperator	*		1271787	0					
ANR	1272476	Identifier	s		1271787	1					
ANR	1272477	PrimaryExpression	'<'		1271787	1					
ANR	1272478	IfStatement	if ( compat )		1271787	1					
ANR	1272479	Condition	compat	1008:9:25680:25685	1271787	0	True				
ANR	1272480	Identifier	compat		1271787	0					
ANR	1272481	CompoundStatement		188:17:4773:4773	1271787	1					
ANR	1272482	WhileStatement	while ( * s ++ != '>' )		1271787	0					
ANR	1272483	Condition	* s ++ != '>'	1012:9:25750:25760	1271787	0	True				
ANR	1272484	EqualityExpression	* s ++ != '>'		1271787	0		!=			
ANR	1272485	UnaryOperationExpression	* s ++		1271787	0					
ANR	1272486	UnaryOperator	*		1271787	0					
ANR	1272487	PostIncDecOperationExpression	s ++		1271787	1					
ANR	1272488	Identifier	s		1271787	0					
ANR	1272489	IncDec	++		1271787	1					
ANR	1272490	PrimaryExpression	'>'		1271787	1					
ANR	1272491	ExpressionStatement		1012:21:25762:25762	1271787	1	True				
ANR	1272492	ForStatement	for ( dectmp_size = 0 ; * s != ';' ; )		1271787	2					
ANR	1272493	ForInit	dectmp_size = 0 ;	1017:17:25874:25889	1271787	0	True				
ANR	1272494	AssignmentExpression	dectmp_size = 0		1271787	0		=			
ANR	1272495	Identifier	dectmp_size		1271787	0					
ANR	1272496	PrimaryExpression	0		1271787	1					
ANR	1272497	Condition	* s != ';'	1017:34:25891:25899	1271787	1	True				
ANR	1272498	EqualityExpression	* s != ';'		1271787	0		!=			
ANR	1272499	UnaryOperationExpression	* s		1271787	0					
ANR	1272500	UnaryOperator	*		1271787	0					
ANR	1272501	Identifier	s		1271787	1					
ANR	1272502	PrimaryExpression	';'		1271787	1					
ANR	1272503	CompoundStatement		197:47:4989:4989	1271787	2					
ANR	1272504	WhileStatement	while ( ! ishdigit ( * s ) )		1271787	0					
ANR	1272505	Condition	! ishdigit ( * s )	1021:23:26020:26032	1271787	0	True				
ANR	1272506	UnaryOperationExpression	! ishdigit ( * s )		1271787	0					
ANR	1272507	UnaryOperator	!		1271787	0					
ANR	1272508	CallExpression	ishdigit ( * s )		1271787	1					
ANR	1272509	Callee	ishdigit		1271787	0					
ANR	1272510	Identifier	ishdigit		1271787	0					
ANR	1272511	ArgumentList	* s		1271787	1					
ANR	1272512	Argument	* s		1271787	0					
ANR	1272513	UnaryOperationExpression	* s		1271787	0					
ANR	1272514	UnaryOperator	*		1271787	0					
ANR	1272515	Identifier	s		1271787	1					
ANR	1272516	ExpressionStatement	s ++	1022:5:26040:26043	1271787	1	True				
ANR	1272517	PostIncDecOperationExpression	s ++		1271787	0					
ANR	1272518	Identifier	s		1271787	0					
ANR	1272519	IncDec	++		1271787	1					
ANR	1272520	ForStatement	for ( dectmp [ dectmp_size ] = 0 ; ishdigit ( * s ) ; s ++ )		1271787	1					
ANR	1272521	ForInit	dectmp [ dectmp_size ] = 0 ;	1024:21:26067:26090	1271787	0	True				
ANR	1272522	AssignmentExpression	dectmp [ dectmp_size ] = 0		1271787	0		=			
ANR	1272523	ArrayIndexing	dectmp [ dectmp_size ]		1271787	0					
ANR	1272524	Identifier	dectmp		1271787	0					
ANR	1272525	Identifier	dectmp_size		1271787	1					
ANR	1272526	PrimaryExpression	0		1271787	1					
ANR	1272527	Condition	ishdigit ( * s )	1024:46:26092:26103	1271787	1	True				
ANR	1272528	CallExpression	ishdigit ( * s )		1271787	0					
ANR	1272529	Callee	ishdigit		1271787	0					
ANR	1272530	Identifier	ishdigit		1271787	0					
ANR	1272531	ArgumentList	* s		1271787	1					
ANR	1272532	Argument	* s		1271787	0					
ANR	1272533	UnaryOperationExpression	* s		1271787	0					
ANR	1272534	UnaryOperator	*		1271787	0					
ANR	1272535	Identifier	s		1271787	1					
ANR	1272536	PostIncDecOperationExpression	s ++	1024:60:26106:26108	1271787	2	True				
ANR	1272537	Identifier	s		1271787	0					
ANR	1272538	IncDec	++		1271787	1					
ANR	1272539	CompoundStatement		204:65:5196:5196	1271787	3					
ANR	1272540	ExpressionStatement	dectmp [ dectmp_size ] <<= 4	1025:20:26133:26158	1271787	0	True				
ANR	1272541	AssignmentExpression	dectmp [ dectmp_size ] <<= 4		1271787	0		<<=			
ANR	1272542	ArrayIndexing	dectmp [ dectmp_size ]		1271787	0					
ANR	1272543	Identifier	dectmp		1271787	0					
ANR	1272544	Identifier	dectmp_size		1271787	1					
ANR	1272545	PrimaryExpression	4		1271787	1					
ANR	1272546	IfStatement	if ( * s >= '0' && * s <= '9' )		1271787	1					
ANR	1272547	Condition	* s >= '0' && * s <= '9'	1026:24:26184:26205	1271787	0	True				
ANR	1272548	AndExpression	* s >= '0' && * s <= '9'		1271787	0		&&			
ANR	1272549	RelationalExpression	* s >= '0'		1271787	0		>=			
ANR	1272550	UnaryOperationExpression	* s		1271787	0					
ANR	1272551	UnaryOperator	*		1271787	0					
ANR	1272552	Identifier	s		1271787	1					
ANR	1272553	PrimaryExpression	'0'		1271787	1					
ANR	1272554	RelationalExpression	* s <= '9'		1271787	1		<=			
ANR	1272555	UnaryOperationExpression	* s		1271787	0					
ANR	1272556	UnaryOperator	*		1271787	0					
ANR	1272557	Identifier	s		1271787	1					
ANR	1272558	PrimaryExpression	'9'		1271787	1					
ANR	1272559	ExpressionStatement	dectmp [ dectmp_size ] += * s - '0'	1027:22:26230:26261	1271787	1	True				
ANR	1272560	AssignmentExpression	dectmp [ dectmp_size ] += * s - '0'		1271787	0		+=			
ANR	1272561	ArrayIndexing	dectmp [ dectmp_size ]		1271787	0					
ANR	1272562	Identifier	dectmp		1271787	0					
ANR	1272563	Identifier	dectmp_size		1271787	1					
ANR	1272564	AdditiveExpression	* s - '0'		1271787	1		-			
ANR	1272565	UnaryOperationExpression	* s		1271787	0					
ANR	1272566	UnaryOperator	*		1271787	0					
ANR	1272567	Identifier	s		1271787	1					
ANR	1272568	PrimaryExpression	'0'		1271787	1					
ANR	1272569	ElseStatement	else		1271787	0					
ANR	1272570	IfStatement	if ( * s >= 'A' && * s <= 'F' )		1271787	0					
ANR	1272571	Condition	* s >= 'A' && * s <= 'F'	1028:29:26292:26313	1271787	0	True				
ANR	1272572	AndExpression	* s >= 'A' && * s <= 'F'		1271787	0		&&			
ANR	1272573	RelationalExpression	* s >= 'A'		1271787	0		>=			
ANR	1272574	UnaryOperationExpression	* s		1271787	0					
ANR	1272575	UnaryOperator	*		1271787	0					
ANR	1272576	Identifier	s		1271787	1					
ANR	1272577	PrimaryExpression	'A'		1271787	1					
ANR	1272578	RelationalExpression	* s <= 'F'		1271787	1		<=			
ANR	1272579	UnaryOperationExpression	* s		1271787	0					
ANR	1272580	UnaryOperator	*		1271787	0					
ANR	1272581	Identifier	s		1271787	1					
ANR	1272582	PrimaryExpression	'F'		1271787	1					
ANR	1272583	ExpressionStatement	dectmp [ dectmp_size ] += ( * s - 'A' ) + 10	1029:22:26338:26376	1271787	1	True				
ANR	1272584	AssignmentExpression	dectmp [ dectmp_size ] += ( * s - 'A' ) + 10		1271787	0		+=			
ANR	1272585	ArrayIndexing	dectmp [ dectmp_size ]		1271787	0					
ANR	1272586	Identifier	dectmp		1271787	0					
ANR	1272587	Identifier	dectmp_size		1271787	1					
ANR	1272588	AdditiveExpression	( * s - 'A' ) + 10		1271787	1		+			
ANR	1272589	AdditiveExpression	* s - 'A'		1271787	0		-			
ANR	1272590	UnaryOperationExpression	* s		1271787	0					
ANR	1272591	UnaryOperator	*		1271787	0					
ANR	1272592	Identifier	s		1271787	1					
ANR	1272593	PrimaryExpression	'A'		1271787	1					
ANR	1272594	PrimaryExpression	10		1271787	1					
ANR	1272595	ElseStatement	else		1271787	0					
ANR	1272596	IfStatement	if ( * s >= 'a' && * s <= 'f' )		1271787	0					
ANR	1272597	Condition	* s >= 'a' && * s <= 'f'	1030:29:26407:26428	1271787	0	True				
ANR	1272598	AndExpression	* s >= 'a' && * s <= 'f'		1271787	0		&&			
ANR	1272599	RelationalExpression	* s >= 'a'		1271787	0		>=			
ANR	1272600	UnaryOperationExpression	* s		1271787	0					
ANR	1272601	UnaryOperator	*		1271787	0					
ANR	1272602	Identifier	s		1271787	1					
ANR	1272603	PrimaryExpression	'a'		1271787	1					
ANR	1272604	RelationalExpression	* s <= 'f'		1271787	1		<=			
ANR	1272605	UnaryOperationExpression	* s		1271787	0					
ANR	1272606	UnaryOperator	*		1271787	0					
ANR	1272607	Identifier	s		1271787	1					
ANR	1272608	PrimaryExpression	'f'		1271787	1					
ANR	1272609	ExpressionStatement	dectmp [ dectmp_size ] += ( * s - 'a' ) + 10	1031:22:26453:26491	1271787	1	True				
ANR	1272610	AssignmentExpression	dectmp [ dectmp_size ] += ( * s - 'a' ) + 10		1271787	0		+=			
ANR	1272611	ArrayIndexing	dectmp [ dectmp_size ]		1271787	0					
ANR	1272612	Identifier	dectmp		1271787	0					
ANR	1272613	Identifier	dectmp_size		1271787	1					
ANR	1272614	AdditiveExpression	( * s - 'a' ) + 10		1271787	1		+			
ANR	1272615	AdditiveExpression	* s - 'a'		1271787	0		-			
ANR	1272616	UnaryOperationExpression	* s		1271787	0					
ANR	1272617	UnaryOperator	*		1271787	0					
ANR	1272618	Identifier	s		1271787	1					
ANR	1272619	PrimaryExpression	'a'		1271787	1					
ANR	1272620	PrimaryExpression	10		1271787	1					
ANR	1272621	ExpressionStatement	dectmp_size ++	1033:16:26527:26540	1271787	2	True				
ANR	1272622	PostIncDecOperationExpression	dectmp_size ++		1271787	0					
ANR	1272623	Identifier	dectmp_size		1271787	0					
ANR	1272624	IncDec	++		1271787	1					
ANR	1272625	IfStatement	if ( dectmp_size > 0 )		1271787	3					
ANR	1272626	Condition	dectmp_size > 0	1040:16:26742:26756	1271787	0	True				
ANR	1272627	RelationalExpression	dectmp_size > 0		1271787	0		>			
ANR	1272628	Identifier	dectmp_size		1271787	0					
ANR	1272629	PrimaryExpression	0		1271787	1					
ANR	1272630	CompoundStatement		220:33:5844:5844	1271787	1					
ANR	1272631	IfStatement	if ( ! compat )		1271787	0					
ANR	1272632	Condition	! compat	1041:6:26767:26773	1271787	0	True				
ANR	1272633	UnaryOperationExpression	! compat		1271787	0					
ANR	1272634	UnaryOperator	!		1271787	0					
ANR	1272635	Identifier	compat		1271787	1					
ANR	1272636	CompoundStatement		221:15:5861:5861	1271787	1					
ANR	1272637	ExpressionStatement	"add_decomp ( code , 0 )"	1042:6:26784:26803	1271787	0	True				
ANR	1272638	CallExpression	"add_decomp ( code , 0 )"		1271787	0					
ANR	1272639	Callee	add_decomp		1271787	0					
ANR	1272640	Identifier	add_decomp		1271787	0					
ANR	1272641	ArgumentList	code		1271787	1					
ANR	1272642	Argument	code		1271787	0					
ANR	1272643	Identifier	code		1271787	0					
ANR	1272644	Argument	0		1271787	1					
ANR	1272645	PrimaryExpression	0		1271787	0					
ANR	1272646	ExpressionStatement	"add_decomp ( code , 1 )"	1044:2:26811:26830	1271787	1	True				
ANR	1272647	CallExpression	"add_decomp ( code , 1 )"		1271787	0					
ANR	1272648	Callee	add_decomp		1271787	0					
ANR	1272649	Identifier	add_decomp		1271787	0					
ANR	1272650	ArgumentList	code		1271787	1					
ANR	1272651	Argument	code		1271787	0					
ANR	1272652	Identifier	code		1271787	0					
ANR	1272653	Argument	1		1271787	1					
ANR	1272654	PrimaryExpression	1		1271787	0					
ANR	1272655	ForStatement	for ( i = 0 ; i < 3 && * s ; s ++ )		1271787	19					
ANR	1272656	ForInit	i = 0 ;	1051:13:26923:26928	1271787	0	True				
ANR	1272657	AssignmentExpression	i = 0		1271787	0		=			
ANR	1272658	Identifier	i		1271787	0					
ANR	1272659	PrimaryExpression	0		1271787	1					
ANR	1272660	Condition	i < 3 && * s	1051:20:26930:26940	1271787	1	True				
ANR	1272661	AndExpression	i < 3 && * s		1271787	0		&&			
ANR	1272662	RelationalExpression	i < 3		1271787	0		<			
ANR	1272663	Identifier	i		1271787	0					
ANR	1272664	PrimaryExpression	3		1271787	1					
ANR	1272665	UnaryOperationExpression	* s		1271787	1					
ANR	1272666	UnaryOperator	*		1271787	0					
ANR	1272667	Identifier	s		1271787	1					
ANR	1272668	PostIncDecOperationExpression	s ++	1051:33:26943:26945	1271787	2	True				
ANR	1272669	Identifier	s		1271787	0					
ANR	1272670	IncDec	++		1271787	1					
ANR	1272671	CompoundStatement		231:38:6033:6033	1271787	3					
ANR	1272672	IfStatement	if ( * s == ';' )		1271787	0					
ANR	1272673	Condition	* s == ';'	1052:16:26966:26974	1271787	0	True				
ANR	1272674	EqualityExpression	* s == ';'		1271787	0		==			
ANR	1272675	UnaryOperationExpression	* s		1271787	0					
ANR	1272676	UnaryOperator	*		1271787	0					
ANR	1272677	Identifier	s		1271787	1					
ANR	1272678	PrimaryExpression	';'		1271787	1					
ANR	1272679	ExpressionStatement	i ++	1053:14:26991:26994	1271787	1	True				
ANR	1272680	PostIncDecOperationExpression	i ++		1271787	0					
ANR	1272681	Identifier	i		1271787	0					
ANR	1272682	IncDec	++		1271787	1					
ANR	1272683	ExpressionStatement	number [ 0 ] = number [ 1 ] = 0	1059:8:27069:27094	1271787	20	True				
ANR	1272684	AssignmentExpression	number [ 0 ] = number [ 1 ] = 0		1271787	0		=			
ANR	1272685	ArrayIndexing	number [ 0 ]		1271787	0					
ANR	1272686	Identifier	number		1271787	0					
ANR	1272687	PrimaryExpression	0		1271787	1					
ANR	1272688	AssignmentExpression	number [ 1 ] = 0		1271787	1		=			
ANR	1272689	ArrayIndexing	number [ 1 ]		1271787	0					
ANR	1272690	Identifier	number		1271787	0					
ANR	1272691	PrimaryExpression	1		1271787	1					
ANR	1272692	PrimaryExpression	0		1271787	1					
ANR	1272693	ForStatement	"for ( e = s , neg = wnum = 0 ; * e && * e != ';' ; e ++ )"		1271787	21					
ANR	1272694	ForInit	"e = s , neg = wnum = 0 ;"	1060:13:27109:27130	1271787	0	True				
ANR	1272695	Expression	"e = s , neg = wnum = 0"		1271787	0					
ANR	1272696	AssignmentExpression	e = s		1271787	0		=			
ANR	1272697	Identifier	e		1271787	0					
ANR	1272698	Identifier	s		1271787	1					
ANR	1272699	AssignmentExpression	neg = wnum = 0		1271787	1		=			
ANR	1272700	Identifier	neg		1271787	0					
ANR	1272701	AssignmentExpression	wnum = 0		1271787	1		=			
ANR	1272702	Identifier	wnum		1271787	0					
ANR	1272703	PrimaryExpression	0		1271787	1					
ANR	1272704	Condition	* e && * e != ';'	1060:36:27132:27146	1271787	1	True				
ANR	1272705	AndExpression	* e && * e != ';'		1271787	0		&&			
ANR	1272706	UnaryOperationExpression	* e		1271787	0					
ANR	1272707	UnaryOperator	*		1271787	0					
ANR	1272708	Identifier	e		1271787	1					
ANR	1272709	EqualityExpression	* e != ';'		1271787	1		!=			
ANR	1272710	UnaryOperationExpression	* e		1271787	0					
ANR	1272711	UnaryOperator	*		1271787	0					
ANR	1272712	Identifier	e		1271787	1					
ANR	1272713	PrimaryExpression	';'		1271787	1					
ANR	1272714	PostIncDecOperationExpression	e ++	1060:53:27149:27151	1271787	2	True				
ANR	1272715	Identifier	e		1271787	0					
ANR	1272716	IncDec	++		1271787	1					
ANR	1272717	CompoundStatement		240:58:6239:6239	1271787	3					
ANR	1272718	IfStatement	if ( * e == '-' )		1271787	0					
ANR	1272719	Condition	* e == '-'	1061:16:27172:27180	1271787	0	True				
ANR	1272720	EqualityExpression	* e == '-'		1271787	0		==			
ANR	1272721	UnaryOperationExpression	* e		1271787	0					
ANR	1272722	UnaryOperator	*		1271787	0					
ANR	1272723	Identifier	e		1271787	1					
ANR	1272724	PrimaryExpression	'-'		1271787	1					
ANR	1272725	CompoundStatement		241:27:6268:6268	1271787	1					
ANR	1272726	ExpressionStatement	neg = 1	1062:16:27201:27208	1271787	0	True				
ANR	1272727	AssignmentExpression	neg = 1		1271787	0		=			
ANR	1272728	Identifier	neg		1271787	0					
ANR	1272729	PrimaryExpression	1		1271787	1					
ANR	1272730	ContinueStatement	continue ;	1063:16:27226:27234	1271787	1	True				
ANR	1272731	IfStatement	if ( * e == '/' )		1271787	1					
ANR	1272732	Condition	* e == '/'	1066:16:27267:27275	1271787	0	True				
ANR	1272733	EqualityExpression	* e == '/'		1271787	0		==			
ANR	1272734	UnaryOperationExpression	* e		1271787	0					
ANR	1272735	UnaryOperator	*		1271787	0					
ANR	1272736	Identifier	e		1271787	1					
ANR	1272737	PrimaryExpression	'/'		1271787	1					
ANR	1272738	CompoundStatement		246:27:6363:6363	1271787	1					
ANR	1272739	IfStatement	if ( neg )		1271787	0					
ANR	1272740	Condition	neg	1070:20:27396:27398	1271787	0	True				
ANR	1272741	Identifier	neg		1271787	0					
ANR	1272742	ExpressionStatement	number [ wnum ] *= - 1	1071:18:27419:27437	1271787	1	True				
ANR	1272743	AssignmentExpression	number [ wnum ] *= - 1		1271787	0		*=			
ANR	1272744	ArrayIndexing	number [ wnum ]		1271787	0					
ANR	1272745	Identifier	number		1271787	0					
ANR	1272746	Identifier	wnum		1271787	1					
ANR	1272747	UnaryOperationExpression	- 1		1271787	1					
ANR	1272748	UnaryOperator	-		1271787	0					
ANR	1272749	PrimaryExpression	1		1271787	1					
ANR	1272750	ExpressionStatement	neg = 0	1072:16:27455:27462	1271787	1	True				
ANR	1272751	AssignmentExpression	neg = 0		1271787	0		=			
ANR	1272752	Identifier	neg		1271787	0					
ANR	1272753	PrimaryExpression	0		1271787	1					
ANR	1272754	ExpressionStatement	e ++	1073:16:27480:27483	1271787	2	True				
ANR	1272755	PostIncDecOperationExpression	e ++		1271787	0					
ANR	1272756	Identifier	e		1271787	0					
ANR	1272757	IncDec	++		1271787	1					
ANR	1272758	ExpressionStatement	wnum ++	1074:16:27501:27507	1271787	3	True				
ANR	1272759	PostIncDecOperationExpression	wnum ++		1271787	0					
ANR	1272760	Identifier	wnum		1271787	0					
ANR	1272761	IncDec	++		1271787	1					
ANR	1272762	ExpressionStatement	number [ wnum ] = ( number [ wnum ] * 10 ) + ( * e - '0' )	1076:12:27535:27582	1271787	2	True				
ANR	1272763	AssignmentExpression	number [ wnum ] = ( number [ wnum ] * 10 ) + ( * e - '0' )		1271787	0		=			
ANR	1272764	ArrayIndexing	number [ wnum ]		1271787	0					
ANR	1272765	Identifier	number		1271787	0					
ANR	1272766	Identifier	wnum		1271787	1					
ANR	1272767	AdditiveExpression	( number [ wnum ] * 10 ) + ( * e - '0' )		1271787	1		+			
ANR	1272768	MultiplicativeExpression	number [ wnum ] * 10		1271787	0		*			
ANR	1272769	ArrayIndexing	number [ wnum ]		1271787	0					
ANR	1272770	Identifier	number		1271787	0					
ANR	1272771	Identifier	wnum		1271787	1					
ANR	1272772	PrimaryExpression	10		1271787	1					
ANR	1272773	AdditiveExpression	* e - '0'		1271787	1		-			
ANR	1272774	UnaryOperationExpression	* e		1271787	0					
ANR	1272775	UnaryOperator	*		1271787	0					
ANR	1272776	Identifier	e		1271787	1					
ANR	1272777	PrimaryExpression	'0'		1271787	1					
ANR	1272778	IfStatement	if ( e > s )		1271787	22					
ANR	1272779	Condition	e > s	1079:12:27607:27611	1271787	0	True				
ANR	1272780	RelationalExpression	e > s		1271787	0		>			
ANR	1272781	Identifier	e		1271787	0					
ANR	1272782	Identifier	s		1271787	1					
ANR	1272783	CompoundStatement		259:19:6699:6699	1271787	1					
ANR	1272784	IfStatement	if ( wnum == 0 )		1271787	0					
ANR	1272785	Condition	wnum == 0	1083:16:27741:27749	1271787	0	True				
ANR	1272786	EqualityExpression	wnum == 0		1271787	0		==			
ANR	1272787	Identifier	wnum		1271787	0					
ANR	1272788	PrimaryExpression	0		1271787	1					
ANR	1272789	ExpressionStatement	number [ 1 ] = 1	1084:14:27766:27779	1271787	1	True				
ANR	1272790	AssignmentExpression	number [ 1 ] = 1		1271787	0		=			
ANR	1272791	ArrayIndexing	number [ 1 ]		1271787	0					
ANR	1272792	Identifier	number		1271787	0					
ANR	1272793	PrimaryExpression	1		1271787	1					
ANR	1272794	PrimaryExpression	1		1271787	1					
ANR	1272795	ExpressionStatement	"add_number ( code , number [ 0 ] , number [ 1 ] )"	1086:12:27794:27832	1271787	1	True				
ANR	1272796	CallExpression	"add_number ( code , number [ 0 ] , number [ 1 ] )"		1271787	0					
ANR	1272797	Callee	add_number		1271787	0					
ANR	1272798	Identifier	add_number		1271787	0					
ANR	1272799	ArgumentList	code		1271787	1					
ANR	1272800	Argument	code		1271787	0					
ANR	1272801	Identifier	code		1271787	0					
ANR	1272802	Argument	number [ 0 ]		1271787	1					
ANR	1272803	ArrayIndexing	number [ 0 ]		1271787	0					
ANR	1272804	Identifier	number		1271787	0					
ANR	1272805	PrimaryExpression	0		1271787	1					
ANR	1272806	Argument	number [ 1 ]		1271787	2					
ANR	1272807	ArrayIndexing	number [ 1 ]		1271787	0					
ANR	1272808	Identifier	number		1271787	0					
ANR	1272809	PrimaryExpression	1		1271787	1					
ANR	1272810	ForStatement	"for ( s = e , i = 0 ; i < 4 && * s ; s ++ )"		1271787	23					
ANR	1272811	ForInit	"s = e , i = 0 ;"	1092:13:27941:27953	1271787	0	True				
ANR	1272812	Expression	"s = e , i = 0"		1271787	0					
ANR	1272813	AssignmentExpression	s = e		1271787	0		=			
ANR	1272814	Identifier	s		1271787	0					
ANR	1272815	Identifier	e		1271787	1					
ANR	1272816	AssignmentExpression	i = 0		1271787	1		=			
ANR	1272817	Identifier	i		1271787	0					
ANR	1272818	PrimaryExpression	0		1271787	1					
ANR	1272819	Condition	i < 4 && * s	1092:27:27955:27965	1271787	1	True				
ANR	1272820	AndExpression	i < 4 && * s		1271787	0		&&			
ANR	1272821	RelationalExpression	i < 4		1271787	0		<			
ANR	1272822	Identifier	i		1271787	0					
ANR	1272823	PrimaryExpression	4		1271787	1					
ANR	1272824	UnaryOperationExpression	* s		1271787	1					
ANR	1272825	UnaryOperator	*		1271787	0					
ANR	1272826	Identifier	s		1271787	1					
ANR	1272827	PostIncDecOperationExpression	s ++	1092:40:27968:27970	1271787	2	True				
ANR	1272828	Identifier	s		1271787	0					
ANR	1272829	IncDec	++		1271787	1					
ANR	1272830	CompoundStatement		272:45:7058:7058	1271787	3					
ANR	1272831	IfStatement	if ( * s == ';' )		1271787	0					
ANR	1272832	Condition	* s == ';'	1093:16:27991:27999	1271787	0	True				
ANR	1272833	EqualityExpression	* s == ';'		1271787	0		==			
ANR	1272834	UnaryOperationExpression	* s		1271787	0					
ANR	1272835	UnaryOperator	*		1271787	0					
ANR	1272836	Identifier	s		1271787	1					
ANR	1272837	PrimaryExpression	';'		1271787	1					
ANR	1272838	ExpressionStatement	i ++	1094:14:28016:28019	1271787	1	True				
ANR	1272839	PostIncDecOperationExpression	i ++		1271787	0					
ANR	1272840	Identifier	i		1271787	0					
ANR	1272841	IncDec	++		1271787	1					
ANR	1272842	ExpressionStatement	cases [ 0 ] = cases [ 1 ] = cases [ 2 ] = 0	1100:8:28101:28135	1271787	24	True				
ANR	1272843	AssignmentExpression	cases [ 0 ] = cases [ 1 ] = cases [ 2 ] = 0		1271787	0		=			
ANR	1272844	ArrayIndexing	cases [ 0 ]		1271787	0					
ANR	1272845	Identifier	cases		1271787	0					
ANR	1272846	PrimaryExpression	0		1271787	1					
ANR	1272847	AssignmentExpression	cases [ 1 ] = cases [ 2 ] = 0		1271787	1		=			
ANR	1272848	ArrayIndexing	cases [ 1 ]		1271787	0					
ANR	1272849	Identifier	cases		1271787	0					
ANR	1272850	PrimaryExpression	1		1271787	1					
ANR	1272851	AssignmentExpression	cases [ 2 ] = 0		1271787	1		=			
ANR	1272852	ArrayIndexing	cases [ 2 ]		1271787	0					
ANR	1272853	Identifier	cases		1271787	0					
ANR	1272854	PrimaryExpression	2		1271787	1					
ANR	1272855	PrimaryExpression	0		1271787	1					
ANR	1272856	ForStatement	for ( i = 0 ; i < 3 ; i ++ )		1271787	25					
ANR	1272857	ForInit	i = 0 ;	1101:13:28150:28155	1271787	0	True				
ANR	1272858	AssignmentExpression	i = 0		1271787	0		=			
ANR	1272859	Identifier	i		1271787	0					
ANR	1272860	PrimaryExpression	0		1271787	1					
ANR	1272861	Condition	i < 3	1101:20:28157:28161	1271787	1	True				
ANR	1272862	RelationalExpression	i < 3		1271787	0		<			
ANR	1272863	Identifier	i		1271787	0					
ANR	1272864	PrimaryExpression	3		1271787	1					
ANR	1272865	PostIncDecOperationExpression	i ++	1101:27:28164:28166	1271787	2	True				
ANR	1272866	Identifier	i		1271787	0					
ANR	1272867	IncDec	++		1271787	1					
ANR	1272868	CompoundStatement		281:32:7254:7254	1271787	3					
ANR	1272869	WhileStatement	while ( ishdigit ( * s ) )		1271787	0					
ANR	1272870	Condition	ishdigit ( * s )	1102:19:28190:28201	1271787	0	True				
ANR	1272871	CallExpression	ishdigit ( * s )		1271787	0					
ANR	1272872	Callee	ishdigit		1271787	0					
ANR	1272873	Identifier	ishdigit		1271787	0					
ANR	1272874	ArgumentList	* s		1271787	1					
ANR	1272875	Argument	* s		1271787	0					
ANR	1272876	UnaryOperationExpression	* s		1271787	0					
ANR	1272877	UnaryOperator	*		1271787	0					
ANR	1272878	Identifier	s		1271787	1					
ANR	1272879	CompoundStatement		282:33:7289:7289	1271787	1					
ANR	1272880	ExpressionStatement	cases [ i ] <<= 4	1103:16:28222:28236	1271787	0	True				
ANR	1272881	AssignmentExpression	cases [ i ] <<= 4		1271787	0		<<=			
ANR	1272882	ArrayIndexing	cases [ i ]		1271787	0					
ANR	1272883	Identifier	cases		1271787	0					
ANR	1272884	Identifier	i		1271787	1					
ANR	1272885	PrimaryExpression	4		1271787	1					
ANR	1272886	IfStatement	if ( * s >= '0' && * s <= '9' )		1271787	1					
ANR	1272887	Condition	* s >= '0' && * s <= '9'	1104:20:28258:28279	1271787	0	True				
ANR	1272888	AndExpression	* s >= '0' && * s <= '9'		1271787	0		&&			
ANR	1272889	RelationalExpression	* s >= '0'		1271787	0		>=			
ANR	1272890	UnaryOperationExpression	* s		1271787	0					
ANR	1272891	UnaryOperator	*		1271787	0					
ANR	1272892	Identifier	s		1271787	1					
ANR	1272893	PrimaryExpression	'0'		1271787	1					
ANR	1272894	RelationalExpression	* s <= '9'		1271787	1		<=			
ANR	1272895	UnaryOperationExpression	* s		1271787	0					
ANR	1272896	UnaryOperator	*		1271787	0					
ANR	1272897	Identifier	s		1271787	1					
ANR	1272898	PrimaryExpression	'9'		1271787	1					
ANR	1272899	ExpressionStatement	cases [ i ] += * s - '0'	1105:18:28300:28320	1271787	1	True				
ANR	1272900	AssignmentExpression	cases [ i ] += * s - '0'		1271787	0		+=			
ANR	1272901	ArrayIndexing	cases [ i ]		1271787	0					
ANR	1272902	Identifier	cases		1271787	0					
ANR	1272903	Identifier	i		1271787	1					
ANR	1272904	AdditiveExpression	* s - '0'		1271787	1		-			
ANR	1272905	UnaryOperationExpression	* s		1271787	0					
ANR	1272906	UnaryOperator	*		1271787	0					
ANR	1272907	Identifier	s		1271787	1					
ANR	1272908	PrimaryExpression	'0'		1271787	1					
ANR	1272909	ElseStatement	else		1271787	0					
ANR	1272910	IfStatement	if ( * s >= 'A' && * s <= 'F' )		1271787	0					
ANR	1272911	Condition	* s >= 'A' && * s <= 'F'	1106:25:28347:28368	1271787	0	True				
ANR	1272912	AndExpression	* s >= 'A' && * s <= 'F'		1271787	0		&&			
ANR	1272913	RelationalExpression	* s >= 'A'		1271787	0		>=			
ANR	1272914	UnaryOperationExpression	* s		1271787	0					
ANR	1272915	UnaryOperator	*		1271787	0					
ANR	1272916	Identifier	s		1271787	1					
ANR	1272917	PrimaryExpression	'A'		1271787	1					
ANR	1272918	RelationalExpression	* s <= 'F'		1271787	1		<=			
ANR	1272919	UnaryOperationExpression	* s		1271787	0					
ANR	1272920	UnaryOperator	*		1271787	0					
ANR	1272921	Identifier	s		1271787	1					
ANR	1272922	PrimaryExpression	'F'		1271787	1					
ANR	1272923	ExpressionStatement	cases [ i ] += ( * s - 'A' ) + 10	1107:18:28389:28416	1271787	1	True				
ANR	1272924	AssignmentExpression	cases [ i ] += ( * s - 'A' ) + 10		1271787	0		+=			
ANR	1272925	ArrayIndexing	cases [ i ]		1271787	0					
ANR	1272926	Identifier	cases		1271787	0					
ANR	1272927	Identifier	i		1271787	1					
ANR	1272928	AdditiveExpression	( * s - 'A' ) + 10		1271787	1		+			
ANR	1272929	AdditiveExpression	* s - 'A'		1271787	0		-			
ANR	1272930	UnaryOperationExpression	* s		1271787	0					
ANR	1272931	UnaryOperator	*		1271787	0					
ANR	1272932	Identifier	s		1271787	1					
ANR	1272933	PrimaryExpression	'A'		1271787	1					
ANR	1272934	PrimaryExpression	10		1271787	1					
ANR	1272935	ElseStatement	else		1271787	0					
ANR	1272936	IfStatement	if ( * s >= 'a' && * s <= 'f' )		1271787	0					
ANR	1272937	Condition	* s >= 'a' && * s <= 'f'	1108:25:28443:28464	1271787	0	True				
ANR	1272938	AndExpression	* s >= 'a' && * s <= 'f'		1271787	0		&&			
ANR	1272939	RelationalExpression	* s >= 'a'		1271787	0		>=			
ANR	1272940	UnaryOperationExpression	* s		1271787	0					
ANR	1272941	UnaryOperator	*		1271787	0					
ANR	1272942	Identifier	s		1271787	1					
ANR	1272943	PrimaryExpression	'a'		1271787	1					
ANR	1272944	RelationalExpression	* s <= 'f'		1271787	1		<=			
ANR	1272945	UnaryOperationExpression	* s		1271787	0					
ANR	1272946	UnaryOperator	*		1271787	0					
ANR	1272947	Identifier	s		1271787	1					
ANR	1272948	PrimaryExpression	'f'		1271787	1					
ANR	1272949	ExpressionStatement	cases [ i ] += ( * s - 'a' ) + 10	1109:18:28485:28512	1271787	1	True				
ANR	1272950	AssignmentExpression	cases [ i ] += ( * s - 'a' ) + 10		1271787	0		+=			
ANR	1272951	ArrayIndexing	cases [ i ]		1271787	0					
ANR	1272952	Identifier	cases		1271787	0					
ANR	1272953	Identifier	i		1271787	1					
ANR	1272954	AdditiveExpression	( * s - 'a' ) + 10		1271787	1		+			
ANR	1272955	AdditiveExpression	* s - 'a'		1271787	0		-			
ANR	1272956	UnaryOperationExpression	* s		1271787	0					
ANR	1272957	UnaryOperator	*		1271787	0					
ANR	1272958	Identifier	s		1271787	1					
ANR	1272959	PrimaryExpression	'a'		1271787	1					
ANR	1272960	PrimaryExpression	10		1271787	1					
ANR	1272961	ExpressionStatement	s ++	1110:16:28530:28533	1271787	2	True				
ANR	1272962	PostIncDecOperationExpression	s ++		1271787	0					
ANR	1272963	Identifier	s		1271787	0					
ANR	1272964	IncDec	++		1271787	1					
ANR	1272965	IfStatement	if ( * s == ';' )		1271787	1					
ANR	1272966	Condition	* s == ';'	1112:16:28565:28573	1271787	0	True				
ANR	1272967	EqualityExpression	* s == ';'		1271787	0		==			
ANR	1272968	UnaryOperationExpression	* s		1271787	0					
ANR	1272969	UnaryOperator	*		1271787	0					
ANR	1272970	Identifier	s		1271787	1					
ANR	1272971	PrimaryExpression	';'		1271787	1					
ANR	1272972	ExpressionStatement	s ++	1113:14:28590:28593	1271787	1	True				
ANR	1272973	PostIncDecOperationExpression	s ++		1271787	0					
ANR	1272974	Identifier	s		1271787	0					
ANR	1272975	IncDec	++		1271787	1					
ANR	1272976	IfStatement	if ( cases [ 0 ] && cases [ 1 ] )		1271787	26					
ANR	1272977	Condition	cases [ 0 ] && cases [ 1 ]	1115:12:28617:28636	1271787	0	True				
ANR	1272978	AndExpression	cases [ 0 ] && cases [ 1 ]		1271787	0		&&			
ANR	1272979	ArrayIndexing	cases [ 0 ]		1271787	0					
ANR	1272980	Identifier	cases		1271787	0					
ANR	1272981	PrimaryExpression	0		1271787	1					
ANR	1272982	ArrayIndexing	cases [ 1 ]		1271787	1					
ANR	1272983	Identifier	cases		1271787	0					
ANR	1272984	PrimaryExpression	1		1271787	1					
ANR	1272985	ExpressionStatement	add_title ( code )	1119:10:28750:28765	1271787	1	True				
ANR	1272986	CallExpression	add_title ( code )		1271787	0					
ANR	1272987	Callee	add_title		1271787	0					
ANR	1272988	Identifier	add_title		1271787	0					
ANR	1272989	ArgumentList	code		1271787	1					
ANR	1272990	Argument	code		1271787	0					
ANR	1272991	Identifier	code		1271787	0					
ANR	1272992	ElseStatement	else		1271787	0					
ANR	1272993	IfStatement	if ( cases [ 1 ] )		1271787	0					
ANR	1272994	Condition	cases [ 1 ]	1120:17:28784:28791	1271787	0	True				
ANR	1272995	ArrayIndexing	cases [ 1 ]		1271787	0					
ANR	1272996	Identifier	cases		1271787	0					
ANR	1272997	PrimaryExpression	1		1271787	1					
ANR	1272998	ExpressionStatement	add_upper ( code )	1125:10:28925:28940	1271787	1	True				
ANR	1272999	CallExpression	add_upper ( code )		1271787	0					
ANR	1273000	Callee	add_upper		1271787	0					
ANR	1273001	Identifier	add_upper		1271787	0					
ANR	1273002	ArgumentList	code		1271787	1					
ANR	1273003	Argument	code		1271787	0					
ANR	1273004	Identifier	code		1271787	0					
ANR	1273005	ElseStatement	else		1271787	0					
ANR	1273006	IfStatement	if ( cases [ 0 ] )		1271787	0					
ANR	1273007	Condition	cases [ 0 ]	1126:17:28959:28966	1271787	0	True				
ANR	1273008	ArrayIndexing	cases [ 0 ]		1271787	0					
ANR	1273009	Identifier	cases		1271787	0					
ANR	1273010	PrimaryExpression	0		1271787	1					
ANR	1273011	ExpressionStatement	add_lower ( code )	1131:10:29100:29115	1271787	1	True				
ANR	1273012	CallExpression	add_lower ( code )		1271787	0					
ANR	1273013	Callee	add_lower		1271787	0					
ANR	1273014	Identifier	add_lower		1271787	0					
ANR	1273015	ArgumentList	code		1271787	1					
ANR	1273016	Argument	code		1271787	0					
ANR	1273017	Identifier	code		1271787	0					
ANR	1273018	ReturnType	static void		1271787	1					
ANR	1273019	Identifier	read_cdata		1271787	2					
ANR	1273020	ParameterList	FILE * in		1271787	3					
ANR	1273021	Parameter	FILE * in	820:11:20904:20911	1271787	0	True				
ANR	1273022	ParameterType	FILE *		1271787	0					
ANR	1273023	Identifier	in		1271787	1					
ANR	1273024	CFGEntryNode	ENTRY		1271787		True				
ANR	1273025	CFGExitNode	EXIT		1271787		True				
ANR	1273026	Symbol	* s ++		1271787						
ANR	1273027	Symbol	code		1271787						
ANR	1273028	Symbol	* wnum		1271787						
ANR	1273029	Symbol	line		1271787						
ANR	1273030	Symbol	strchr		1271787						
ANR	1273031	Symbol	skip		1271787						
ANR	1273032	Symbol	* line		1271787						
ANR	1273033	Symbol	* cases		1271787						
ANR	1273034	Symbol	fgets		1271787						
ANR	1273035	Symbol	dectmp_size		1271787						
ANR	1273036	Symbol	* dectmp		1271787						
ANR	1273037	Symbol	neg		1271787						
ANR	1273038	Symbol	number		1271787						
ANR	1273039	Symbol	ccl_code		1271787						
ANR	1273040	Symbol	wnum		1271787						
ANR	1273041	Symbol	ishdigit		1271787						
ANR	1273042	Symbol	cases		1271787						
ANR	1273043	Symbol	in		1271787						
ANR	1273044	Symbol	e		1271787						
ANR	1273045	Symbol	i		1271787						
ANR	1273046	Symbol	* dectmp_size		1271787						
ANR	1273047	Symbol	* number		1271787						
ANR	1273048	Symbol	* e		1271787						
ANR	1273049	Symbol	lineno		1271787						
ANR	1273050	Symbol	s		1271787						
ANR	1273051	Symbol	* i		1271787						
ANR	1273052	Symbol	dectmp		1271787						
ANR	1273053	Symbol	compat		1271787						
ANR	1273054	Symbol	* s		1271787						
ANR	1273055	Function	find_decomp	1137:0:29133:29559							
ANR	1273056	FunctionDef	"find_decomp (ac_uint4 code , short compat)"		1273055	0					
ANR	1273057	CompoundStatement		1139:0:29193:29559	1273055	0					
ANR	1273058	IdentifierDeclStatement	"long l , r , m ;"	1140:4:29199:29211	1273055	0	True				
ANR	1273059	IdentifierDecl	l		1273055	0					
ANR	1273060	IdentifierDeclType	long		1273055	0					
ANR	1273061	Identifier	l		1273055	1					
ANR	1273062	IdentifierDecl	r		1273055	1					
ANR	1273063	IdentifierDeclType	long		1273055	0					
ANR	1273064	Identifier	r		1273055	1					
ANR	1273065	IdentifierDecl	m		1273055	2					
ANR	1273066	IdentifierDeclType	long		1273055	0					
ANR	1273067	Identifier	m		1273055	1					
ANR	1273068	IdentifierDeclStatement	_decomp_t * decs ;	1141:4:29217:29232	1273055	1	True				
ANR	1273069	IdentifierDecl	* decs		1273055	0					
ANR	1273070	IdentifierDeclType	_decomp_t *		1273055	0					
ANR	1273071	Identifier	decs		1273055	1					
ANR	1273072	ExpressionStatement	l = 0	1143:4:29239:29244	1273055	2	True				
ANR	1273073	AssignmentExpression	l = 0		1273055	0		=			
ANR	1273074	Identifier	l		1273055	0					
ANR	1273075	PrimaryExpression	0		1273055	1					
ANR	1273076	ExpressionStatement	r = ( compat ? kdecomps_used : decomps_used ) - 1	1144:4:29250:29297	1273055	3	True				
ANR	1273077	AssignmentExpression	r = ( compat ? kdecomps_used : decomps_used ) - 1		1273055	0		=			
ANR	1273078	Identifier	r		1273055	0					
ANR	1273079	AdditiveExpression	( compat ? kdecomps_used : decomps_used ) - 1		1273055	1		-			
ANR	1273080	ConditionalExpression	compat ? kdecomps_used : decomps_used		1273055	0					
ANR	1273081	Condition	compat		1273055	0					
ANR	1273082	Identifier	compat		1273055	0					
ANR	1273083	Identifier	kdecomps_used		1273055	1					
ANR	1273084	Identifier	decomps_used		1273055	2					
ANR	1273085	PrimaryExpression	1		1273055	1					
ANR	1273086	ExpressionStatement	decs = compat ? kdecomps : decomps	1145:4:29303:29337	1273055	4	True				
ANR	1273087	AssignmentExpression	decs = compat ? kdecomps : decomps		1273055	0		=			
ANR	1273088	Identifier	decs		1273055	0					
ANR	1273089	ConditionalExpression	compat ? kdecomps : decomps		1273055	1					
ANR	1273090	Condition	compat		1273055	0					
ANR	1273091	Identifier	compat		1273055	0					
ANR	1273092	Identifier	kdecomps		1273055	1					
ANR	1273093	Identifier	decomps		1273055	2					
ANR	1273094	WhileStatement	while ( l <= r )		1273055	5					
ANR	1273095	Condition	l <= r	1146:11:29350:29355	1273055	0	True				
ANR	1273096	RelationalExpression	l <= r		1273055	0		<=			
ANR	1273097	Identifier	l		1273055	0					
ANR	1273098	Identifier	r		1273055	1					
ANR	1273099	CompoundStatement		8:19:164:164	1273055	1					
ANR	1273100	ExpressionStatement	m = ( l + r ) >> 1	1147:8:29368:29384	1273055	0	True				
ANR	1273101	AssignmentExpression	m = ( l + r ) >> 1		1273055	0		=			
ANR	1273102	Identifier	m		1273055	0					
ANR	1273103	ShiftExpression	( l + r ) >> 1		1273055	1		>>			
ANR	1273104	AdditiveExpression	l + r		1273055	0		+			
ANR	1273105	Identifier	l		1273055	0					
ANR	1273106	Identifier	r		1273055	1					
ANR	1273107	PrimaryExpression	1		1273055	1					
ANR	1273108	IfStatement	if ( code > decs [ m ] . code )		1273055	1					
ANR	1273109	Condition	code > decs [ m ] . code	1148:12:29398:29416	1273055	0	True				
ANR	1273110	RelationalExpression	code > decs [ m ] . code		1273055	0		>			
ANR	1273111	Identifier	code		1273055	0					
ANR	1273112	MemberAccess	decs [ m ] . code		1273055	1					
ANR	1273113	ArrayIndexing	decs [ m ]		1273055	0					
ANR	1273114	Identifier	decs		1273055	0					
ANR	1273115	Identifier	m		1273055	1					
ANR	1273116	Identifier	code		1273055	1					
ANR	1273117	ExpressionStatement	l = m + 1	1149:10:29429:29438	1273055	1	True				
ANR	1273118	AssignmentExpression	l = m + 1		1273055	0		=			
ANR	1273119	Identifier	l		1273055	0					
ANR	1273120	AdditiveExpression	m + 1		1273055	1		+			
ANR	1273121	Identifier	m		1273055	0					
ANR	1273122	PrimaryExpression	1		1273055	1					
ANR	1273123	ElseStatement	else		1273055	0					
ANR	1273124	IfStatement	if ( code < decs [ m ] . code )		1273055	0					
ANR	1273125	Condition	code < decs [ m ] . code	1150:17:29457:29475	1273055	0	True				
ANR	1273126	RelationalExpression	code < decs [ m ] . code		1273055	0		<			
ANR	1273127	Identifier	code		1273055	0					
ANR	1273128	MemberAccess	decs [ m ] . code		1273055	1					
ANR	1273129	ArrayIndexing	decs [ m ]		1273055	0					
ANR	1273130	Identifier	decs		1273055	0					
ANR	1273131	Identifier	m		1273055	1					
ANR	1273132	Identifier	code		1273055	1					
ANR	1273133	ExpressionStatement	r = m - 1	1151:10:29488:29497	1273055	1	True				
ANR	1273134	AssignmentExpression	r = m - 1		1273055	0		=			
ANR	1273135	Identifier	r		1273055	0					
ANR	1273136	AdditiveExpression	m - 1		1273055	1		-			
ANR	1273137	Identifier	m		1273055	0					
ANR	1273138	PrimaryExpression	1		1273055	1					
ANR	1273139	ElseStatement	else		1273055	0					
ANR	1273140	ReturnStatement	return & decs [ m ] ;	1153:10:29522:29537	1273055	0	True				
ANR	1273141	UnaryOperationExpression	& decs [ m ]		1273055	0					
ANR	1273142	UnaryOperator	&		1273055	0					
ANR	1273143	ArrayIndexing	decs [ m ]		1273055	1					
ANR	1273144	Identifier	decs		1273055	0					
ANR	1273145	Identifier	m		1273055	1					
ANR	1273146	ReturnStatement	return 0 ;	1155:4:29549:29557	1273055	6	True				
ANR	1273147	PrimaryExpression	0		1273055	0					
ANR	1273148	ReturnType	static _decomp_t *		1273055	1					
ANR	1273149	Identifier	find_decomp		1273055	2					
ANR	1273150	ParameterList	"ac_uint4 code , short compat"		1273055	3					
ANR	1273151	Parameter	ac_uint4 code	1138:12:29164:29176	1273055	0	True				
ANR	1273152	ParameterType	ac_uint4		1273055	0					
ANR	1273153	Identifier	code		1273055	1					
ANR	1273154	Parameter	short compat	1138:27:29179:29190	1273055	1	True				
ANR	1273155	ParameterType	short		1273055	0					
ANR	1273156	Identifier	compat		1273055	1					
ANR	1273157	CFGEntryNode	ENTRY		1273055		True				
ANR	1273158	CFGExitNode	EXIT		1273055		True				
ANR	1273159	Symbol	code		1273055						
ANR	1273160	Symbol	decomps_used		1273055						
ANR	1273161	Symbol	l		1273055						
ANR	1273162	Symbol	decomps		1273055						
ANR	1273163	Symbol	m		1273055						
ANR	1273164	Symbol	decs [ m ] . code		1273055						
ANR	1273165	Symbol	r		1273055						
ANR	1273166	Symbol	kdecomps		1273055						
ANR	1273167	Symbol	* m		1273055						
ANR	1273168	Symbol	kdecomps_used		1273055						
ANR	1273169	Symbol	* decs		1273055						
ANR	1273170	Symbol	compat		1273055						
ANR	1273171	Symbol	decs		1273055						
ANR	1273172	Function	decomp_it	1158:0:29562:29845							
ANR	1273173	FunctionDef	"decomp_it (_decomp_t * d , short compat)"		1273172	0					
ANR	1273174	CompoundStatement		1160:0:29612:29845	1273172	0					
ANR	1273175	IdentifierDeclStatement	ac_uint4 i ;	1161:4:29618:29628	1273172	0	True				
ANR	1273176	IdentifierDecl	i		1273172	0					
ANR	1273177	IdentifierDeclType	ac_uint4		1273172	0					
ANR	1273178	Identifier	i		1273172	1					
ANR	1273179	IdentifierDeclStatement	_decomp_t * dp ;	1162:4:29634:29647	1273172	1	True				
ANR	1273180	IdentifierDecl	* dp		1273172	0					
ANR	1273181	IdentifierDeclType	_decomp_t *		1273172	0					
ANR	1273182	Identifier	dp		1273172	1					
ANR	1273183	ForStatement	for ( i = 0 ; i < d -> used ; i ++ )		1273172	2					
ANR	1273184	ForInit	i = 0 ;	1164:9:29659:29664	1273172	0	True				
ANR	1273185	AssignmentExpression	i = 0		1273172	0		=			
ANR	1273186	Identifier	i		1273172	0					
ANR	1273187	PrimaryExpression	0		1273172	1					
ANR	1273188	Condition	i < d -> used	1164:16:29666:29676	1273172	1	True				
ANR	1273189	RelationalExpression	i < d -> used		1273172	0		<			
ANR	1273190	Identifier	i		1273172	0					
ANR	1273191	PtrMemberAccess	d -> used		1273172	1					
ANR	1273192	Identifier	d		1273172	0					
ANR	1273193	Identifier	used		1273172	1					
ANR	1273194	PostIncDecOperationExpression	i ++	1164:29:29679:29681	1273172	2	True				
ANR	1273195	Identifier	i		1273172	0					
ANR	1273196	IncDec	++		1273172	1					
ANR	1273197	CompoundStatement		5:34:71:71	1273172	3					
ANR	1273198	IfStatement	"if ( ( dp = find_decomp ( d -> decomp [ i ] , compat ) ) != 0 )"		1273172	0					
ANR	1273199	Condition	"( dp = find_decomp ( d -> decomp [ i ] , compat ) ) != 0"	1165:12:29698:29742	1273172	0	True				
ANR	1273200	EqualityExpression	"( dp = find_decomp ( d -> decomp [ i ] , compat ) ) != 0"		1273172	0		!=			
ANR	1273201	AssignmentExpression	"dp = find_decomp ( d -> decomp [ i ] , compat )"		1273172	0		=			
ANR	1273202	Identifier	dp		1273172	0					
ANR	1273203	CallExpression	"find_decomp ( d -> decomp [ i ] , compat )"		1273172	1					
ANR	1273204	Callee	find_decomp		1273172	0					
ANR	1273205	Identifier	find_decomp		1273172	0					
ANR	1273206	ArgumentList	d -> decomp [ i ]		1273172	1					
ANR	1273207	Argument	d -> decomp [ i ]		1273172	0					
ANR	1273208	ArrayIndexing	d -> decomp [ i ]		1273172	0					
ANR	1273209	PtrMemberAccess	d -> decomp		1273172	0					
ANR	1273210	Identifier	d		1273172	0					
ANR	1273211	Identifier	decomp		1273172	1					
ANR	1273212	Identifier	i		1273172	1					
ANR	1273213	Argument	compat		1273172	1					
ANR	1273214	Identifier	compat		1273172	0					
ANR	1273215	PrimaryExpression	0		1273172	1					
ANR	1273216	ExpressionStatement	"decomp_it ( dp , compat )"	1166:10:29755:29776	1273172	1	True				
ANR	1273217	CallExpression	"decomp_it ( dp , compat )"		1273172	0					
ANR	1273218	Callee	decomp_it		1273172	0					
ANR	1273219	Identifier	decomp_it		1273172	0					
ANR	1273220	ArgumentList	dp		1273172	1					
ANR	1273221	Argument	dp		1273172	0					
ANR	1273222	Identifier	dp		1273172	0					
ANR	1273223	Argument	compat		1273172	1					
ANR	1273224	Identifier	compat		1273172	0					
ANR	1273225	ElseStatement	else		1273172	0					
ANR	1273226	ExpressionStatement	dectmp [ dectmp_size ++ ] = d -> decomp [ i ]	1168:10:29801:29837	1273172	0	True				
ANR	1273227	AssignmentExpression	dectmp [ dectmp_size ++ ] = d -> decomp [ i ]		1273172	0		=			
ANR	1273228	ArrayIndexing	dectmp [ dectmp_size ++ ]		1273172	0					
ANR	1273229	Identifier	dectmp		1273172	0					
ANR	1273230	PostIncDecOperationExpression	dectmp_size ++		1273172	1					
ANR	1273231	Identifier	dectmp_size		1273172	0					
ANR	1273232	IncDec	++		1273172	1					
ANR	1273233	ArrayIndexing	d -> decomp [ i ]		1273172	1					
ANR	1273234	PtrMemberAccess	d -> decomp		1273172	0					
ANR	1273235	Identifier	d		1273172	0					
ANR	1273236	Identifier	decomp		1273172	1					
ANR	1273237	Identifier	i		1273172	1					
ANR	1273238	ReturnType	static void		1273172	1					
ANR	1273239	Identifier	decomp_it		1273172	2					
ANR	1273240	ParameterList	"_decomp_t * d , short compat"		1273172	3					
ANR	1273241	Parameter	_decomp_t * d	1159:10:29584:29595	1273172	0	True				
ANR	1273242	ParameterType	_decomp_t *		1273172	0					
ANR	1273243	Identifier	d		1273172	1					
ANR	1273244	Parameter	short compat	1159:24:29598:29609	1273172	1	True				
ANR	1273245	ParameterType	short		1273172	0					
ANR	1273246	Identifier	compat		1273172	1					
ANR	1273247	CFGEntryNode	ENTRY		1273172		True				
ANR	1273248	CFGExitNode	EXIT		1273172		True				
ANR	1273249	Symbol	d		1273172						
ANR	1273250	Symbol	* * d		1273172						
ANR	1273251	Symbol	i		1273172						
ANR	1273252	Symbol	dp		1273172						
ANR	1273253	Symbol	* d		1273172						
ANR	1273254	Symbol	dectmp_size		1273172						
ANR	1273255	Symbol	d -> used		1273172						
ANR	1273256	Symbol	* dectmp		1273172						
ANR	1273257	Symbol	* i		1273172						
ANR	1273258	Symbol	dectmp		1273172						
ANR	1273259	Symbol	find_decomp		1273172						
ANR	1273260	Symbol	compat		1273172						
ANR	1273261	Symbol	d -> decomp		1273172						
ANR	1273262	Symbol	* d -> decomp		1273172						
ANR	1273263	Function	expand_decomp	1177:0:29952:30363							
ANR	1273264	FunctionDef	expand_decomp ()		1273263	0					
ANR	1273265	CompoundStatement		1179:0:29984:30363	1273263	0					
ANR	1273266	IdentifierDeclStatement	ac_uint4 i ;	1180:4:29990:30000	1273263	0	True				
ANR	1273267	IdentifierDecl	i		1273263	0					
ANR	1273268	IdentifierDeclType	ac_uint4		1273263	0					
ANR	1273269	Identifier	i		1273263	1					
ANR	1273270	ForStatement	for ( i = 0 ; i < decomps_used ; i ++ )		1273263	1					
ANR	1273271	ForInit	i = 0 ;	1182:9:30012:30017	1273263	0	True				
ANR	1273272	AssignmentExpression	i = 0		1273263	0		=			
ANR	1273273	Identifier	i		1273263	0					
ANR	1273274	PrimaryExpression	0		1273263	1					
ANR	1273275	Condition	i < decomps_used	1182:16:30019:30034	1273263	1	True				
ANR	1273276	RelationalExpression	i < decomps_used		1273263	0		<			
ANR	1273277	Identifier	i		1273263	0					
ANR	1273278	Identifier	decomps_used		1273263	1					
ANR	1273279	PostIncDecOperationExpression	i ++	1182:34:30037:30039	1273263	2	True				
ANR	1273280	Identifier	i		1273263	0					
ANR	1273281	IncDec	++		1273263	1					
ANR	1273282	CompoundStatement		4:39:57:57	1273263	3					
ANR	1273283	ExpressionStatement	dectmp_size = 0	1183:8:30052:30067	1273263	0	True				
ANR	1273284	AssignmentExpression	dectmp_size = 0		1273263	0		=			
ANR	1273285	Identifier	dectmp_size		1273263	0					
ANR	1273286	PrimaryExpression	0		1273263	1					
ANR	1273287	ExpressionStatement	"decomp_it ( & decomps [ i ] , 0 )"	1184:8:30077:30102	1273263	1	True				
ANR	1273288	CallExpression	"decomp_it ( & decomps [ i ] , 0 )"		1273263	0					
ANR	1273289	Callee	decomp_it		1273263	0					
ANR	1273290	Identifier	decomp_it		1273263	0					
ANR	1273291	ArgumentList	& decomps [ i ]		1273263	1					
ANR	1273292	Argument	& decomps [ i ]		1273263	0					
ANR	1273293	UnaryOperationExpression	& decomps [ i ]		1273263	0					
ANR	1273294	UnaryOperator	&		1273263	0					
ANR	1273295	ArrayIndexing	decomps [ i ]		1273263	1					
ANR	1273296	Identifier	decomps		1273263	0					
ANR	1273297	Identifier	i		1273263	1					
ANR	1273298	Argument	0		1273263	1					
ANR	1273299	PrimaryExpression	0		1273263	0					
ANR	1273300	IfStatement	if ( dectmp_size > 0 )		1273263	2					
ANR	1273301	Condition	dectmp_size > 0	1185:12:30116:30130	1273263	0	True				
ANR	1273302	RelationalExpression	dectmp_size > 0		1273263	0		>			
ANR	1273303	Identifier	dectmp_size		1273263	0					
ANR	1273304	PrimaryExpression	0		1273263	1					
ANR	1273305	ExpressionStatement	"add_decomp ( decomps [ i ] . code , 0 )"	1186:10:30143:30173	1273263	1	True				
ANR	1273306	CallExpression	"add_decomp ( decomps [ i ] . code , 0 )"		1273263	0					
ANR	1273307	Callee	add_decomp		1273263	0					
ANR	1273308	Identifier	add_decomp		1273263	0					
ANR	1273309	ArgumentList	decomps [ i ] . code		1273263	1					
ANR	1273310	Argument	decomps [ i ] . code		1273263	0					
ANR	1273311	MemberAccess	decomps [ i ] . code		1273263	0					
ANR	1273312	ArrayIndexing	decomps [ i ]		1273263	0					
ANR	1273313	Identifier	decomps		1273263	0					
ANR	1273314	Identifier	i		1273263	1					
ANR	1273315	Identifier	code		1273263	1					
ANR	1273316	Argument	0		1273263	1					
ANR	1273317	PrimaryExpression	0		1273263	0					
ANR	1273318	ForStatement	for ( i = 0 ; i < kdecomps_used ; i ++ )		1273263	2					
ANR	1273319	ForInit	i = 0 ;	1189:9:30191:30196	1273263	0	True				
ANR	1273320	AssignmentExpression	i = 0		1273263	0		=			
ANR	1273321	Identifier	i		1273263	0					
ANR	1273322	PrimaryExpression	0		1273263	1					
ANR	1273323	Condition	i < kdecomps_used	1189:16:30198:30214	1273263	1	True				
ANR	1273324	RelationalExpression	i < kdecomps_used		1273263	0		<			
ANR	1273325	Identifier	i		1273263	0					
ANR	1273326	Identifier	kdecomps_used		1273263	1					
ANR	1273327	PostIncDecOperationExpression	i ++	1189:35:30217:30219	1273263	2	True				
ANR	1273328	Identifier	i		1273263	0					
ANR	1273329	IncDec	++		1273263	1					
ANR	1273330	CompoundStatement		11:40:237:237	1273263	3					
ANR	1273331	ExpressionStatement	dectmp_size = 0	1190:8:30232:30247	1273263	0	True				
ANR	1273332	AssignmentExpression	dectmp_size = 0		1273263	0		=			
ANR	1273333	Identifier	dectmp_size		1273263	0					
ANR	1273334	PrimaryExpression	0		1273263	1					
ANR	1273335	ExpressionStatement	"decomp_it ( & kdecomps [ i ] , 1 )"	1191:8:30257:30283	1273263	1	True				
ANR	1273336	CallExpression	"decomp_it ( & kdecomps [ i ] , 1 )"		1273263	0					
ANR	1273337	Callee	decomp_it		1273263	0					
ANR	1273338	Identifier	decomp_it		1273263	0					
ANR	1273339	ArgumentList	& kdecomps [ i ]		1273263	1					
ANR	1273340	Argument	& kdecomps [ i ]		1273263	0					
ANR	1273341	UnaryOperationExpression	& kdecomps [ i ]		1273263	0					
ANR	1273342	UnaryOperator	&		1273263	0					
ANR	1273343	ArrayIndexing	kdecomps [ i ]		1273263	1					
ANR	1273344	Identifier	kdecomps		1273263	0					
ANR	1273345	Identifier	i		1273263	1					
ANR	1273346	Argument	1		1273263	1					
ANR	1273347	PrimaryExpression	1		1273263	0					
ANR	1273348	IfStatement	if ( dectmp_size > 0 )		1273263	2					
ANR	1273349	Condition	dectmp_size > 0	1192:12:30297:30311	1273263	0	True				
ANR	1273350	RelationalExpression	dectmp_size > 0		1273263	0		>			
ANR	1273351	Identifier	dectmp_size		1273263	0					
ANR	1273352	PrimaryExpression	0		1273263	1					
ANR	1273353	ExpressionStatement	"add_decomp ( kdecomps [ i ] . code , 1 )"	1193:10:30324:30355	1273263	1	True				
ANR	1273354	CallExpression	"add_decomp ( kdecomps [ i ] . code , 1 )"		1273263	0					
ANR	1273355	Callee	add_decomp		1273263	0					
ANR	1273356	Identifier	add_decomp		1273263	0					
ANR	1273357	ArgumentList	kdecomps [ i ] . code		1273263	1					
ANR	1273358	Argument	kdecomps [ i ] . code		1273263	0					
ANR	1273359	MemberAccess	kdecomps [ i ] . code		1273263	0					
ANR	1273360	ArrayIndexing	kdecomps [ i ]		1273263	0					
ANR	1273361	Identifier	kdecomps		1273263	0					
ANR	1273362	Identifier	i		1273263	1					
ANR	1273363	Identifier	code		1273263	1					
ANR	1273364	Argument	1		1273263	1					
ANR	1273365	PrimaryExpression	1		1273263	0					
ANR	1273366	ReturnType	static void		1273263	1					
ANR	1273367	Identifier	expand_decomp		1273263	2					
ANR	1273368	ParameterList			1273263	3					
ANR	1273369	CFGEntryNode	ENTRY		1273263		True				
ANR	1273370	CFGExitNode	EXIT		1273263		True				
ANR	1273371	Symbol	* decomps		1273263						
ANR	1273372	Symbol	decomps_used		1273263						
ANR	1273373	Symbol	* i		1273263						
ANR	1273374	Symbol	kdecomps		1273263						
ANR	1273375	Symbol	decomps [ i ] . code		1273263						
ANR	1273376	Symbol	i		1273263						
ANR	1273377	Symbol	* kdecomps		1273263						
ANR	1273378	Symbol	kdecomps_used		1273263						
ANR	1273379	Symbol	decomps		1273263						
ANR	1273380	Symbol	kdecomps [ i ] . code		1273263						
ANR	1273381	Symbol	dectmp_size		1273263						
ANR	1273382	Function	cmpcomps	1197:0:30366:30602							
ANR	1273383	FunctionDef	"cmpcomps (const void * v_comp1 , const void * v_comp2)"		1273382	0					
ANR	1273384	CompoundStatement		1199:0:30428:30602	1273382	0					
ANR	1273385	IdentifierDeclStatement	"const _comp_t * comp1 = v_comp1 , * comp2 = v_comp2 ;"	1200:1:30431:30479	1273382	0	True				
ANR	1273386	IdentifierDecl	* comp1 = v_comp1		1273382	0					
ANR	1273387	IdentifierDeclType	const _comp_t *		1273382	0					
ANR	1273388	Identifier	comp1		1273382	1					
ANR	1273389	AssignmentExpression	* comp1 = v_comp1		1273382	2		=			
ANR	1273390	Identifier	v_comp1		1273382	0					
ANR	1273391	Identifier	v_comp1		1273382	1					
ANR	1273392	IdentifierDecl	* comp2 = v_comp2		1273382	1					
ANR	1273393	IdentifierDeclType	const _comp_t *		1273382	0					
ANR	1273394	Identifier	comp2		1273382	1					
ANR	1273395	AssignmentExpression	* comp2 = v_comp2		1273382	2		=			
ANR	1273396	Identifier	v_comp2		1273382	0					
ANR	1273397	Identifier	v_comp2		1273382	1					
ANR	1273398	IdentifierDeclStatement	long diff = comp1 -> code1 - comp2 -> code1 ;	1201:4:30485:30524	1273382	1	True				
ANR	1273399	IdentifierDecl	diff = comp1 -> code1 - comp2 -> code1		1273382	0					
ANR	1273400	IdentifierDeclType	long		1273382	0					
ANR	1273401	Identifier	diff		1273382	1					
ANR	1273402	AssignmentExpression	diff = comp1 -> code1 - comp2 -> code1		1273382	2		=			
ANR	1273403	Identifier	diff		1273382	0					
ANR	1273404	AdditiveExpression	comp1 -> code1 - comp2 -> code1		1273382	1		-			
ANR	1273405	PtrMemberAccess	comp1 -> code1		1273382	0					
ANR	1273406	Identifier	comp1		1273382	0					
ANR	1273407	Identifier	code1		1273382	1					
ANR	1273408	PtrMemberAccess	comp2 -> code1		1273382	1					
ANR	1273409	Identifier	comp2		1273382	0					
ANR	1273410	Identifier	code1		1273382	1					
ANR	1273411	IfStatement	if ( ! diff )		1273382	2					
ANR	1273412	Condition	! diff	1203:8:30535:30539	1273382	0	True				
ANR	1273413	UnaryOperationExpression	! diff		1273382	0					
ANR	1273414	UnaryOperator	!		1273382	0					
ANR	1273415	Identifier	diff		1273382	1					
ANR	1273416	ExpressionStatement	diff = comp1 -> code2 - comp2 -> code2	1204:1:30543:30577	1273382	1	True				
ANR	1273417	AssignmentExpression	diff = comp1 -> code2 - comp2 -> code2		1273382	0		=			
ANR	1273418	Identifier	diff		1273382	0					
ANR	1273419	AdditiveExpression	comp1 -> code2 - comp2 -> code2		1273382	1		-			
ANR	1273420	PtrMemberAccess	comp1 -> code2		1273382	0					
ANR	1273421	Identifier	comp1		1273382	0					
ANR	1273422	Identifier	code2		1273382	1					
ANR	1273423	PtrMemberAccess	comp2 -> code2		1273382	1					
ANR	1273424	Identifier	comp2		1273382	0					
ANR	1273425	Identifier	code2		1273382	1					
ANR	1273426	ReturnStatement	return ( int ) diff ;	1205:4:30583:30600	1273382	3	True				
ANR	1273427	CastExpression	( int ) diff		1273382	0					
ANR	1273428	CastTarget	int		1273382	0					
ANR	1273429	Identifier	diff		1273382	1					
ANR	1273430	ReturnType	static int		1273382	1					
ANR	1273431	Identifier	cmpcomps		1273382	2					
ANR	1273432	ParameterList	"const void * v_comp1 , const void * v_comp2"		1273382	3					
ANR	1273433	Parameter	const void * v_comp1	1198:9:30386:30404	1273382	0	True				
ANR	1273434	ParameterType	const void *		1273382	0					
ANR	1273435	Identifier	v_comp1		1273382	1					
ANR	1273436	Parameter	const void * v_comp2	1198:30:30407:30425	1273382	1	True				
ANR	1273437	ParameterType	const void *		1273382	0					
ANR	1273438	Identifier	v_comp2		1273382	1					
ANR	1273439	CFGEntryNode	ENTRY		1273382		True				
ANR	1273440	CFGExitNode	EXIT		1273382		True				
ANR	1273441	Symbol	comp2		1273382						
ANR	1273442	Symbol	comp1		1273382						
ANR	1273443	Symbol	comp2 -> code2		1273382						
ANR	1273444	Symbol	comp2 -> code1		1273382						
ANR	1273445	Symbol	v_comp2		1273382						
ANR	1273446	Symbol	comp1 -> code2		1273382						
ANR	1273447	Symbol	* comp2		1273382						
ANR	1273448	Symbol	diff		1273382						
ANR	1273449	Symbol	v_comp1		1273382						
ANR	1273450	Symbol	* comp1		1273382						
ANR	1273451	Symbol	comp1 -> code1		1273382						
ANR	1273452	Function	read_compexdata	1213:0:30655:31485							
ANR	1273453	FunctionDef	read_compexdata (FILE * in)		1273452	0					
ANR	1273454	CompoundStatement		1215:0:30693:31485	1273452	0					
ANR	1273455	IdentifierDeclStatement	ac_uint2 i ;	1216:4:30699:30709	1273452	0	True				
ANR	1273456	IdentifierDecl	i		1273452	0					
ANR	1273457	IdentifierDeclType	ac_uint2		1273452	0					
ANR	1273458	Identifier	i		1273452	1					
ANR	1273459	IdentifierDeclStatement	ac_uint4 code ;	1217:4:30715:30728	1273452	1	True				
ANR	1273460	IdentifierDecl	code		1273452	0					
ANR	1273461	IdentifierDeclType	ac_uint4		1273452	0					
ANR	1273462	Identifier	code		1273452	1					
ANR	1273463	IdentifierDeclStatement	"char line [ 512 ] , * s ;"	1218:4:30734:30752	1273452	2	True				
ANR	1273464	IdentifierDecl	line [ 512 ]		1273452	0					
ANR	1273465	IdentifierDeclType	char [ 512 ]		1273452	0					
ANR	1273466	Identifier	line		1273452	1					
ANR	1273467	PrimaryExpression	512		1273452	2					
ANR	1273468	IdentifierDecl	* s		1273452	1					
ANR	1273469	IdentifierDeclType	char *		1273452	0					
ANR	1273470	Identifier	s		1273452	1					
ANR	1273471	ExpressionStatement	"( void ) memset ( ( char * ) compexs , 0 , sizeof ( compexs ) )"	1220:4:30759:30810	1273452	3	True				
ANR	1273472	CastExpression	"( void ) memset ( ( char * ) compexs , 0 , sizeof ( compexs ) )"		1273452	0					
ANR	1273473	CastTarget	void		1273452	0					
ANR	1273474	CallExpression	"memset ( ( char * ) compexs , 0 , sizeof ( compexs ) )"		1273452	1					
ANR	1273475	Callee	memset		1273452	0					
ANR	1273476	Identifier	memset		1273452	0					
ANR	1273477	ArgumentList	( char * ) compexs		1273452	1					
ANR	1273478	Argument	( char * ) compexs		1273452	0					
ANR	1273479	CastExpression	( char * ) compexs		1273452	0					
ANR	1273480	CastTarget	char *		1273452	0					
ANR	1273481	Identifier	compexs		1273452	1					
ANR	1273482	Argument	0		1273452	1					
ANR	1273483	PrimaryExpression	0		1273452	0					
ANR	1273484	Argument	sizeof ( compexs )		1273452	2					
ANR	1273485	SizeofExpression	sizeof ( compexs )		1273452	0					
ANR	1273486	Sizeof	sizeof		1273452	0					
ANR	1273487	SizeofOperand	compexs		1273452	1					
ANR	1273488	WhileStatement	"while ( fgets ( line , sizeof ( line ) , in ) )"		1273452	4					
ANR	1273489	Condition	"fgets ( line , sizeof ( line ) , in )"	1222:11:30824:30852	1273452	0	True				
ANR	1273490	CallExpression	"fgets ( line , sizeof ( line ) , in )"		1273452	0					
ANR	1273491	Callee	fgets		1273452	0					
ANR	1273492	Identifier	fgets		1273452	0					
ANR	1273493	ArgumentList	line		1273452	1					
ANR	1273494	Argument	line		1273452	0					
ANR	1273495	Identifier	line		1273452	0					
ANR	1273496	Argument	sizeof ( line )		1273452	1					
ANR	1273497	SizeofExpression	sizeof ( line )		1273452	0					
ANR	1273498	Sizeof	sizeof		1273452	0					
ANR	1273499	SizeofOperand	line		1273452	1					
ANR	1273500	Argument	in		1273452	2					
ANR	1273501	Identifier	in		1273452	0					
ANR	1273502	CompoundStatement		8:42:161:161	1273452	1					
ANR	1273503	IfStatement	"if ( ( s = strchr ( line , '\\n' ) ) )"		1273452	0					
ANR	1273504	Condition	"s = strchr ( line , '\\n' )"	1223:5:30862:30883	1273452	0	True				
ANR	1273505	AssignmentExpression	"s = strchr ( line , '\\n' )"		1273452	0		=			
ANR	1273506	Identifier	s		1273452	0					
ANR	1273507	CallExpression	"strchr ( line , '\\n' )"		1273452	1					
ANR	1273508	Callee	strchr		1273452	0					
ANR	1273509	Identifier	strchr		1273452	0					
ANR	1273510	ArgumentList	line		1273452	1					
ANR	1273511	Argument	line		1273452	0					
ANR	1273512	Identifier	line		1273452	0					
ANR	1273513	Argument	'\\n'		1273452	1					
ANR	1273514	PrimaryExpression	'\\n'		1273452	0					
ANR	1273515	ExpressionStatement	* s = '\\0'	1223:30:30887:30896	1273452	1	True				
ANR	1273516	AssignmentExpression	* s = '\\0'		1273452	0		=			
ANR	1273517	UnaryOperationExpression	* s		1273452	0					
ANR	1273518	UnaryOperator	*		1273452	0					
ANR	1273519	Identifier	s		1273452	1					
ANR	1273520	PrimaryExpression	'\\0'		1273452	1					
ANR	1273521	IfStatement	if ( line [ 0 ] == 0 || line [ 0 ] == '#' )		1273452	1					
ANR	1273522	Condition	line [ 0 ] == 0 || line [ 0 ] == '#'	1227:12:30994:31023	1273452	0	True				
ANR	1273523	OrExpression	line [ 0 ] == 0 || line [ 0 ] == '#'		1273452	0		||			
ANR	1273524	EqualityExpression	line [ 0 ] == 0		1273452	0		==			
ANR	1273525	ArrayIndexing	line [ 0 ]		1273452	0					
ANR	1273526	Identifier	line		1273452	0					
ANR	1273527	PrimaryExpression	0		1273452	1					
ANR	1273528	PrimaryExpression	0		1273452	1					
ANR	1273529	EqualityExpression	line [ 0 ] == '#'		1273452	1		==			
ANR	1273530	ArrayIndexing	line [ 0 ]		1273452	0					
ANR	1273531	Identifier	line		1273452	0					
ANR	1273532	PrimaryExpression	0		1273452	1					
ANR	1273533	PrimaryExpression	'#'		1273452	1					
ANR	1273534	ContinueStatement	continue ;	1228:5:31031:31039	1273452	1	True				
ANR	1273535	ForStatement	"for ( s = line , i = code = 0 ; * s != '#' && i < 6 ; i ++ , s ++ )"		1273452	2					
ANR	1273536	ForInit	"s = line , i = code = 0 ;"	1234:6:31115:31137	1273452	0	True				
ANR	1273537	Expression	"s = line , i = code = 0"		1273452	0					
ANR	1273538	AssignmentExpression	s = line		1273452	0		=			
ANR	1273539	Identifier	s		1273452	0					
ANR	1273540	Identifier	line		1273452	1					
ANR	1273541	AssignmentExpression	i = code = 0		1273452	1		=			
ANR	1273542	Identifier	i		1273452	0					
ANR	1273543	AssignmentExpression	code = 0		1273452	1		=			
ANR	1273544	Identifier	code		1273452	0					
ANR	1273545	PrimaryExpression	0		1273452	1					
ANR	1273546	Condition	* s != '#' && i < 6	1234:30:31139:31156	1273452	1	True				
ANR	1273547	AndExpression	* s != '#' && i < 6		1273452	0		&&			
ANR	1273548	EqualityExpression	* s != '#'		1273452	0		!=			
ANR	1273549	UnaryOperationExpression	* s		1273452	0					
ANR	1273550	UnaryOperator	*		1273452	0					
ANR	1273551	Identifier	s		1273452	1					
ANR	1273552	PrimaryExpression	'#'		1273452	1					
ANR	1273553	RelationalExpression	i < 6		1273452	1		<			
ANR	1273554	Identifier	i		1273452	0					
ANR	1273555	PrimaryExpression	6		1273452	1					
ANR	1273556	Expression	"i ++ , s ++"	1234:50:31159:31166	1273452	2	True				
ANR	1273557	PostIncDecOperationExpression	i ++		1273452	0					
ANR	1273558	Identifier	i		1273452	0					
ANR	1273559	IncDec	++		1273452	1					
ANR	1273560	PostIncDecOperationExpression	s ++		1273452	1					
ANR	1273561	Identifier	s		1273452	0					
ANR	1273562	IncDec	++		1273452	1					
ANR	1273563	CompoundStatement		20:60:475:475	1273452	3					
ANR	1273564	IfStatement	if ( isspace ( ( unsigned char ) * s ) )		1273452	0					
ANR	1273565	Condition	isspace ( ( unsigned char ) * s )	1235:9:31180:31205	1273452	0	True				
ANR	1273566	CallExpression	isspace ( ( unsigned char ) * s )		1273452	0					
ANR	1273567	Callee	isspace		1273452	0					
ANR	1273568	Identifier	isspace		1273452	0					
ANR	1273569	ArgumentList	( unsigned char ) * s		1273452	1					
ANR	1273570	Argument	( unsigned char ) * s		1273452	0					
ANR	1273571	CastExpression	( unsigned char ) * s		1273452	0					
ANR	1273572	CastTarget	unsigned char		1273452	0					
ANR	1273573	UnaryOperationExpression	* s		1273452	1					
ANR	1273574	UnaryOperator	*		1273452	0					
ANR	1273575	Identifier	s		1273452	1					
ANR	1273576	BreakStatement	break ;	1235:37:31208:31213	1273452	1	True				
ANR	1273577	ExpressionStatement	code <<= 4	1236:12:31227:31237	1273452	1	True				
ANR	1273578	AssignmentExpression	code <<= 4		1273452	0		<<=			
ANR	1273579	Identifier	code		1273452	0					
ANR	1273580	PrimaryExpression	4		1273452	1					
ANR	1273581	IfStatement	if ( * s >= '0' && * s <= '9' )		1273452	2					
ANR	1273582	Condition	* s >= '0' && * s <= '9'	1237:16:31255:31276	1273452	0	True				
ANR	1273583	AndExpression	* s >= '0' && * s <= '9'		1273452	0		&&			
ANR	1273584	RelationalExpression	* s >= '0'		1273452	0		>=			
ANR	1273585	UnaryOperationExpression	* s		1273452	0					
ANR	1273586	UnaryOperator	*		1273452	0					
ANR	1273587	Identifier	s		1273452	1					
ANR	1273588	PrimaryExpression	'0'		1273452	1					
ANR	1273589	RelationalExpression	* s <= '9'		1273452	1		<=			
ANR	1273590	UnaryOperationExpression	* s		1273452	0					
ANR	1273591	UnaryOperator	*		1273452	0					
ANR	1273592	Identifier	s		1273452	1					
ANR	1273593	PrimaryExpression	'9'		1273452	1					
ANR	1273594	ExpressionStatement	code += * s - '0'	1238:2:31281:31297	1273452	1	True				
ANR	1273595	AssignmentExpression	code += * s - '0'		1273452	0		+=			
ANR	1273596	Identifier	code		1273452	0					
ANR	1273597	AdditiveExpression	* s - '0'		1273452	1		-			
ANR	1273598	UnaryOperationExpression	* s		1273452	0					
ANR	1273599	UnaryOperator	*		1273452	0					
ANR	1273600	Identifier	s		1273452	1					
ANR	1273601	PrimaryExpression	'0'		1273452	1					
ANR	1273602	ElseStatement	else		1273452	0					
ANR	1273603	IfStatement	if ( * s >= 'A' && * s <= 'F' )		1273452	0					
ANR	1273604	Condition	* s >= 'A' && * s <= 'F'	1239:21:31320:31341	1273452	0	True				
ANR	1273605	AndExpression	* s >= 'A' && * s <= 'F'		1273452	0		&&			
ANR	1273606	RelationalExpression	* s >= 'A'		1273452	0		>=			
ANR	1273607	UnaryOperationExpression	* s		1273452	0					
ANR	1273608	UnaryOperator	*		1273452	0					
ANR	1273609	Identifier	s		1273452	1					
ANR	1273610	PrimaryExpression	'A'		1273452	1					
ANR	1273611	RelationalExpression	* s <= 'F'		1273452	1		<=			
ANR	1273612	UnaryOperationExpression	* s		1273452	0					
ANR	1273613	UnaryOperator	*		1273452	0					
ANR	1273614	Identifier	s		1273452	1					
ANR	1273615	PrimaryExpression	'F'		1273452	1					
ANR	1273616	ExpressionStatement	code += ( * s - 'A' ) + 10	1240:2:31346:31369	1273452	1	True				
ANR	1273617	AssignmentExpression	code += ( * s - 'A' ) + 10		1273452	0		+=			
ANR	1273618	Identifier	code		1273452	0					
ANR	1273619	AdditiveExpression	( * s - 'A' ) + 10		1273452	1		+			
ANR	1273620	AdditiveExpression	* s - 'A'		1273452	0		-			
ANR	1273621	UnaryOperationExpression	* s		1273452	0					
ANR	1273622	UnaryOperator	*		1273452	0					
ANR	1273623	Identifier	s		1273452	1					
ANR	1273624	PrimaryExpression	'A'		1273452	1					
ANR	1273625	PrimaryExpression	10		1273452	1					
ANR	1273626	ElseStatement	else		1273452	0					
ANR	1273627	IfStatement	if ( * s >= 'a' && * s <= 'f' )		1273452	0					
ANR	1273628	Condition	* s >= 'a' && * s <= 'f'	1241:21:31392:31413	1273452	0	True				
ANR	1273629	AndExpression	* s >= 'a' && * s <= 'f'		1273452	0		&&			
ANR	1273630	RelationalExpression	* s >= 'a'		1273452	0		>=			
ANR	1273631	UnaryOperationExpression	* s		1273452	0					
ANR	1273632	UnaryOperator	*		1273452	0					
ANR	1273633	Identifier	s		1273452	1					
ANR	1273634	PrimaryExpression	'a'		1273452	1					
ANR	1273635	RelationalExpression	* s <= 'f'		1273452	1		<=			
ANR	1273636	UnaryOperationExpression	* s		1273452	0					
ANR	1273637	UnaryOperator	*		1273452	0					
ANR	1273638	Identifier	s		1273452	1					
ANR	1273639	PrimaryExpression	'f'		1273452	1					
ANR	1273640	ExpressionStatement	code += ( * s - 'a' ) + 10	1242:2:31418:31441	1273452	1	True				
ANR	1273641	AssignmentExpression	code += ( * s - 'a' ) + 10		1273452	0		+=			
ANR	1273642	Identifier	code		1273452	0					
ANR	1273643	AdditiveExpression	( * s - 'a' ) + 10		1273452	1		+			
ANR	1273644	AdditiveExpression	* s - 'a'		1273452	0		-			
ANR	1273645	UnaryOperationExpression	* s		1273452	0					
ANR	1273646	UnaryOperator	*		1273452	0					
ANR	1273647	Identifier	s		1273452	1					
ANR	1273648	PrimaryExpression	'a'		1273452	1					
ANR	1273649	PrimaryExpression	10		1273452	1					
ANR	1273650	ExpressionStatement	COMPEX_SET ( code )	1244:8:31461:31477	1273452	3	True				
ANR	1273651	CallExpression	COMPEX_SET ( code )		1273452	0					
ANR	1273652	Callee	COMPEX_SET		1273452	0					
ANR	1273653	Identifier	COMPEX_SET		1273452	0					
ANR	1273654	ArgumentList	code		1273452	1					
ANR	1273655	Argument	code		1273452	0					
ANR	1273656	Identifier	code		1273452	0					
ANR	1273657	ReturnType	static void		1273452	1					
ANR	1273658	Identifier	read_compexdata		1273452	2					
ANR	1273659	ParameterList	FILE * in		1273452	3					
ANR	1273660	Parameter	FILE * in	1214:16:30683:30690	1273452	0	True				
ANR	1273661	ParameterType	FILE *		1273452	0					
ANR	1273662	Identifier	in		1273452	1					
ANR	1273663	CFGEntryNode	ENTRY		1273452		True				
ANR	1273664	CFGExitNode	EXIT		1273452		True				
ANR	1273665	Symbol	code		1273452						
ANR	1273666	Symbol	s		1273452						
ANR	1273667	Symbol	in		1273452						
ANR	1273668	Symbol	line		1273452						
ANR	1273669	Symbol	compexs		1273452						
ANR	1273670	Symbol	isspace		1273452						
ANR	1273671	Symbol	i		1273452						
ANR	1273672	Symbol	strchr		1273452						
ANR	1273673	Symbol	* line		1273452						
ANR	1273674	Symbol	* s		1273452						
ANR	1273675	Symbol	fgets		1273452						
ANR	1273676	Function	create_comps	1253:0:31560:32027							
ANR	1273677	FunctionDef	create_comps ()		1273676	0					
ANR	1273678	CompoundStatement		1255:0:31591:32027	1273676	0					
ANR	1273679	IdentifierDeclStatement	"ac_uint4 i , cu ;"	1256:4:31597:31611	1273676	0	True				
ANR	1273680	IdentifierDecl	i		1273676	0					
ANR	1273681	IdentifierDeclType	ac_uint4		1273676	0					
ANR	1273682	Identifier	i		1273676	1					
ANR	1273683	IdentifierDecl	cu		1273676	1					
ANR	1273684	IdentifierDeclType	ac_uint4		1273676	0					
ANR	1273685	Identifier	cu		1273676	1					
ANR	1273686	ExpressionStatement	comps = ( _comp_t * ) malloc ( comps_used * sizeof ( _comp_t ) )	1258:4:31618:31674	1273676	1	True				
ANR	1273687	AssignmentExpression	comps = ( _comp_t * ) malloc ( comps_used * sizeof ( _comp_t ) )		1273676	0		=			
ANR	1273688	Identifier	comps		1273676	0					
ANR	1273689	CastExpression	( _comp_t * ) malloc ( comps_used * sizeof ( _comp_t ) )		1273676	1					
ANR	1273690	CastTarget	_comp_t *		1273676	0					
ANR	1273691	CallExpression	malloc ( comps_used * sizeof ( _comp_t ) )		1273676	1					
ANR	1273692	Callee	malloc		1273676	0					
ANR	1273693	Identifier	malloc		1273676	0					
ANR	1273694	ArgumentList	comps_used * sizeof ( _comp_t )		1273676	1					
ANR	1273695	Argument	comps_used * sizeof ( _comp_t )		1273676	0					
ANR	1273696	MultiplicativeExpression	comps_used * sizeof ( _comp_t )		1273676	0		*			
ANR	1273697	Identifier	comps_used		1273676	0					
ANR	1273698	SizeofExpression	sizeof ( _comp_t )		1273676	1					
ANR	1273699	Sizeof	sizeof		1273676	0					
ANR	1273700	SizeofOperand	_comp_t		1273676	1					
ANR	1273701	ForStatement	for ( i = cu = 0 ; i < decomps_used ; i ++ )		1273676	2					
ANR	1273702	ForInit	i = cu = 0 ;	1260:9:31686:31696	1273676	0	True				
ANR	1273703	AssignmentExpression	i = cu = 0		1273676	0		=			
ANR	1273704	Identifier	i		1273676	0					
ANR	1273705	AssignmentExpression	cu = 0		1273676	1		=			
ANR	1273706	Identifier	cu		1273676	0					
ANR	1273707	PrimaryExpression	0		1273676	1					
ANR	1273708	Condition	i < decomps_used	1260:21:31698:31713	1273676	1	True				
ANR	1273709	RelationalExpression	i < decomps_used		1273676	0		<			
ANR	1273710	Identifier	i		1273676	0					
ANR	1273711	Identifier	decomps_used		1273676	1					
ANR	1273712	PostIncDecOperationExpression	i ++	1260:39:31716:31718	1273676	2	True				
ANR	1273713	Identifier	i		1273676	0					
ANR	1273714	IncDec	++		1273676	1					
ANR	1273715	CompoundStatement		6:44:129:129	1273676	3					
ANR	1273716	IfStatement	if ( decomps [ i ] . used != 2 || COMPEX_TEST ( decomps [ i ] . code ) )		1273676	0					
ANR	1273717	Condition	decomps [ i ] . used != 2 || COMPEX_TEST ( decomps [ i ] . code )	1261:5:31728:31779	1273676	0	True				
ANR	1273718	OrExpression	decomps [ i ] . used != 2 || COMPEX_TEST ( decomps [ i ] . code )		1273676	0		||			
ANR	1273719	EqualityExpression	decomps [ i ] . used != 2		1273676	0		!=			
ANR	1273720	MemberAccess	decomps [ i ] . used		1273676	0					
ANR	1273721	ArrayIndexing	decomps [ i ]		1273676	0					
ANR	1273722	Identifier	decomps		1273676	0					
ANR	1273723	Identifier	i		1273676	1					
ANR	1273724	Identifier	used		1273676	1					
ANR	1273725	PrimaryExpression	2		1273676	1					
ANR	1273726	CallExpression	COMPEX_TEST ( decomps [ i ] . code )		1273676	1					
ANR	1273727	Callee	COMPEX_TEST		1273676	0					
ANR	1273728	Identifier	COMPEX_TEST		1273676	0					
ANR	1273729	ArgumentList	decomps [ i ] . code		1273676	1					
ANR	1273730	Argument	decomps [ i ] . code		1273676	0					
ANR	1273731	MemberAccess	decomps [ i ] . code		1273676	0					
ANR	1273732	ArrayIndexing	decomps [ i ]		1273676	0					
ANR	1273733	Identifier	decomps		1273676	0					
ANR	1273734	Identifier	i		1273676	1					
ANR	1273735	Identifier	code		1273676	1					
ANR	1273736	ContinueStatement	continue ;	1262:5:31787:31795	1273676	1	True				
ANR	1273737	ExpressionStatement	comps [ cu ] . comp = decomps [ i ] . code	1263:1:31798:31830	1273676	1	True				
ANR	1273738	AssignmentExpression	comps [ cu ] . comp = decomps [ i ] . code		1273676	0		=			
ANR	1273739	MemberAccess	comps [ cu ] . comp		1273676	0					
ANR	1273740	ArrayIndexing	comps [ cu ]		1273676	0					
ANR	1273741	Identifier	comps		1273676	0					
ANR	1273742	Identifier	cu		1273676	1					
ANR	1273743	Identifier	comp		1273676	1					
ANR	1273744	MemberAccess	decomps [ i ] . code		1273676	1					
ANR	1273745	ArrayIndexing	decomps [ i ]		1273676	0					
ANR	1273746	Identifier	decomps		1273676	0					
ANR	1273747	Identifier	i		1273676	1					
ANR	1273748	Identifier	code		1273676	1					
ANR	1273749	ExpressionStatement	comps [ cu ] . count = 2	1264:1:31833:31852	1273676	2	True				
ANR	1273750	AssignmentExpression	comps [ cu ] . count = 2		1273676	0		=			
ANR	1273751	MemberAccess	comps [ cu ] . count		1273676	0					
ANR	1273752	ArrayIndexing	comps [ cu ]		1273676	0					
ANR	1273753	Identifier	comps		1273676	0					
ANR	1273754	Identifier	cu		1273676	1					
ANR	1273755	Identifier	count		1273676	1					
ANR	1273756	PrimaryExpression	2		1273676	1					
ANR	1273757	ExpressionStatement	comps [ cu ] . code1 = decomps [ i ] . decomp [ 0 ]	1265:1:31855:31893	1273676	3	True				
ANR	1273758	AssignmentExpression	comps [ cu ] . code1 = decomps [ i ] . decomp [ 0 ]		1273676	0		=			
ANR	1273759	MemberAccess	comps [ cu ] . code1		1273676	0					
ANR	1273760	ArrayIndexing	comps [ cu ]		1273676	0					
ANR	1273761	Identifier	comps		1273676	0					
ANR	1273762	Identifier	cu		1273676	1					
ANR	1273763	Identifier	code1		1273676	1					
ANR	1273764	ArrayIndexing	decomps [ i ] . decomp [ 0 ]		1273676	1					
ANR	1273765	MemberAccess	decomps [ i ] . decomp		1273676	0					
ANR	1273766	ArrayIndexing	decomps [ i ]		1273676	0					
ANR	1273767	Identifier	decomps		1273676	0					
ANR	1273768	Identifier	i		1273676	1					
ANR	1273769	Identifier	decomp		1273676	1					
ANR	1273770	PrimaryExpression	0		1273676	1					
ANR	1273771	ExpressionStatement	comps [ cu ] . code2 = decomps [ i ] . decomp [ 1 ]	1266:1:31896:31934	1273676	4	True				
ANR	1273772	AssignmentExpression	comps [ cu ] . code2 = decomps [ i ] . decomp [ 1 ]		1273676	0		=			
ANR	1273773	MemberAccess	comps [ cu ] . code2		1273676	0					
ANR	1273774	ArrayIndexing	comps [ cu ]		1273676	0					
ANR	1273775	Identifier	comps		1273676	0					
ANR	1273776	Identifier	cu		1273676	1					
ANR	1273777	Identifier	code2		1273676	1					
ANR	1273778	ArrayIndexing	decomps [ i ] . decomp [ 1 ]		1273676	1					
ANR	1273779	MemberAccess	decomps [ i ] . decomp		1273676	0					
ANR	1273780	ArrayIndexing	decomps [ i ]		1273676	0					
ANR	1273781	Identifier	decomps		1273676	0					
ANR	1273782	Identifier	i		1273676	1					
ANR	1273783	Identifier	decomp		1273676	1					
ANR	1273784	PrimaryExpression	1		1273676	1					
ANR	1273785	ExpressionStatement	cu ++	1267:1:31937:31941	1273676	5	True				
ANR	1273786	PostIncDecOperationExpression	cu ++		1273676	0					
ANR	1273787	Identifier	cu		1273676	0					
ANR	1273788	IncDec	++		1273676	1					
ANR	1273789	ExpressionStatement	comps_used = cu	1269:4:31953:31968	1273676	3	True				
ANR	1273790	AssignmentExpression	comps_used = cu		1273676	0		=			
ANR	1273791	Identifier	comps_used		1273676	0					
ANR	1273792	Identifier	cu		1273676	1					
ANR	1273793	ExpressionStatement	"qsort ( comps , comps_used , sizeof ( _comp_t ) , cmpcomps )"	1270:4:31974:32025	1273676	4	True				
ANR	1273794	CallExpression	"qsort ( comps , comps_used , sizeof ( _comp_t ) , cmpcomps )"		1273676	0					
ANR	1273795	Callee	qsort		1273676	0					
ANR	1273796	Identifier	qsort		1273676	0					
ANR	1273797	ArgumentList	comps		1273676	1					
ANR	1273798	Argument	comps		1273676	0					
ANR	1273799	Identifier	comps		1273676	0					
ANR	1273800	Argument	comps_used		1273676	1					
ANR	1273801	Identifier	comps_used		1273676	0					
ANR	1273802	Argument	sizeof ( _comp_t )		1273676	2					
ANR	1273803	SizeofExpression	sizeof ( _comp_t )		1273676	0					
ANR	1273804	Sizeof	sizeof		1273676	0					
ANR	1273805	SizeofOperand	_comp_t		1273676	1					
ANR	1273806	Argument	cmpcomps		1273676	3					
ANR	1273807	Identifier	cmpcomps		1273676	0					
ANR	1273808	ReturnType	static void		1273676	1					
ANR	1273809	Identifier	create_comps		1273676	2					
ANR	1273810	ParameterList			1273676	3					
ANR	1273811	CFGEntryNode	ENTRY		1273676		True				
ANR	1273812	CFGExitNode	EXIT		1273676		True				
ANR	1273813	Symbol	malloc		1273676						
ANR	1273814	Symbol	comps [ cu ] . comp		1273676						
ANR	1273815	Symbol	* decomps		1273676						
ANR	1273816	Symbol	* * i		1273676						
ANR	1273817	Symbol	comps		1273676						
ANR	1273818	Symbol	comps_used		1273676						
ANR	1273819	Symbol	decomps_used		1273676						
ANR	1273820	Symbol	i		1273676						
ANR	1273821	Symbol	* comps		1273676						
ANR	1273822	Symbol	decomps [ i ] . decomp		1273676						
ANR	1273823	Symbol	decomps		1273676						
ANR	1273824	Symbol	cu		1273676						
ANR	1273825	Symbol	* i		1273676						
ANR	1273826	Symbol	comps [ cu ] . count		1273676						
ANR	1273827	Symbol	* * decomps		1273676						
ANR	1273828	Symbol	decomps [ i ] . code		1273676						
ANR	1273829	Symbol	comps [ cu ] . code2		1273676						
ANR	1273830	Symbol	* cu		1273676						
ANR	1273831	Symbol	comps [ cu ] . code1		1273676						
ANR	1273832	Symbol	COMPEX_TEST		1273676						
ANR	1273833	Symbol	* decomps [ i ] . decomp		1273676						
ANR	1273834	Symbol	decomps [ i ] . used		1273676						
ANR	1273835	Symbol	cmpcomps		1273676						
ANR	1273836	Function	write_case	1276:0:32056:32362							
ANR	1273837	FunctionDef	"write_case (FILE * out , _case_t * tab , int num , int first)"		1273836	0					
ANR	1273838	CompoundStatement		1278:0:32124:32362	1273836	0					
ANR	1273839	IdentifierDeclStatement	int i ;	1279:4:32130:32135	1273836	0	True				
ANR	1273840	IdentifierDecl	i		1273836	0					
ANR	1273841	IdentifierDeclType	int		1273836	0					
ANR	1273842	Identifier	i		1273836	1					
ANR	1273843	ForStatement	for ( i = 0 ; i < num ; i ++ )		1273836	1					
ANR	1273844	ForInit	i = 0 ;	1281:9:32147:32150	1273836	0	True				
ANR	1273845	AssignmentExpression	i = 0		1273836	0		=			
ANR	1273846	Identifier	i		1273836	0					
ANR	1273847	PrimaryExpression	0		1273836	1					
ANR	1273848	Condition	i < num	1281:14:32152:32156	1273836	1	True				
ANR	1273849	RelationalExpression	i < num		1273836	0		<			
ANR	1273850	Identifier	i		1273836	0					
ANR	1273851	Identifier	num		1273836	1					
ANR	1273852	PostIncDecOperationExpression	i ++	1281:21:32159:32161	1273836	2	True				
ANR	1273853	Identifier	i		1273836	0					
ANR	1273854	IncDec	++		1273836	1					
ANR	1273855	CompoundStatement		4:26:39:39	1273836	3					
ANR	1273856	IfStatement	if ( first )		1273836	0					
ANR	1273857	Condition	first	1282:5:32171:32175	1273836	0	True				
ANR	1273858	Identifier	first		1273836	0					
ANR	1273859	ExpressionStatement	first = 0	1282:12:32178:32187	1273836	1	True				
ANR	1273860	AssignmentExpression	first = 0		1273836	0		=			
ANR	1273861	Identifier	first		1273836	0					
ANR	1273862	PrimaryExpression	0		1273836	1					
ANR	1273863	ElseStatement	else		1273836	0					
ANR	1273864	ExpressionStatement	"fprintf ( out , "","" )"	1283:6:32195:32212	1273836	0	True				
ANR	1273865	CallExpression	"fprintf ( out , "","" )"		1273836	0					
ANR	1273866	Callee	fprintf		1273836	0					
ANR	1273867	Identifier	fprintf		1273836	0					
ANR	1273868	ArgumentList	out		1273836	1					
ANR	1273869	Argument	out		1273836	0					
ANR	1273870	Identifier	out		1273836	0					
ANR	1273871	Argument	""","""		1273836	1					
ANR	1273872	PrimaryExpression	""","""		1273836	0					
ANR	1273873	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx, 0x%08lx"" , ( unsigned long ) tab [ i ] . key , ( unsigned long ) tab [ i ] . other1 , ( unsigned long ) tab [ i ] . other2 )"	1284:1:32215:32354	1273836	1	True				
ANR	1273874	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx, 0x%08lx"" , ( unsigned long ) tab [ i ] . key , ( unsigned long ) tab [ i ] . other1 , ( unsigned long ) tab [ i ] . other2 )"		1273836	0					
ANR	1273875	Callee	fprintf		1273836	0					
ANR	1273876	Identifier	fprintf		1273836	0					
ANR	1273877	ArgumentList	out		1273836	1					
ANR	1273878	Argument	out		1273836	0					
ANR	1273879	Identifier	out		1273836	0					
ANR	1273880	Argument	"""\\n\\t0x%08lx, 0x%08lx, 0x%08lx"""		1273836	1					
ANR	1273881	PrimaryExpression	"""\\n\\t0x%08lx, 0x%08lx, 0x%08lx"""		1273836	0					
ANR	1273882	Argument	( unsigned long ) tab [ i ] . key		1273836	2					
ANR	1273883	CastExpression	( unsigned long ) tab [ i ] . key		1273836	0					
ANR	1273884	CastTarget	unsigned long		1273836	0					
ANR	1273885	MemberAccess	tab [ i ] . key		1273836	1					
ANR	1273886	ArrayIndexing	tab [ i ]		1273836	0					
ANR	1273887	Identifier	tab		1273836	0					
ANR	1273888	Identifier	i		1273836	1					
ANR	1273889	Identifier	key		1273836	1					
ANR	1273890	Argument	( unsigned long ) tab [ i ] . other1		1273836	3					
ANR	1273891	CastExpression	( unsigned long ) tab [ i ] . other1		1273836	0					
ANR	1273892	CastTarget	unsigned long		1273836	0					
ANR	1273893	MemberAccess	tab [ i ] . other1		1273836	1					
ANR	1273894	ArrayIndexing	tab [ i ]		1273836	0					
ANR	1273895	Identifier	tab		1273836	0					
ANR	1273896	Identifier	i		1273836	1					
ANR	1273897	Identifier	other1		1273836	1					
ANR	1273898	Argument	( unsigned long ) tab [ i ] . other2		1273836	4					
ANR	1273899	CastExpression	( unsigned long ) tab [ i ] . other2		1273836	0					
ANR	1273900	CastTarget	unsigned long		1273836	0					
ANR	1273901	MemberAccess	tab [ i ] . other2		1273836	1					
ANR	1273902	ArrayIndexing	tab [ i ]		1273836	0					
ANR	1273903	Identifier	tab		1273836	0					
ANR	1273904	Identifier	i		1273836	1					
ANR	1273905	Identifier	other2		1273836	1					
ANR	1273906	ReturnType	static void		1273836	1					
ANR	1273907	Identifier	write_case		1273836	2					
ANR	1273908	ParameterList	"FILE * out , _case_t * tab , int num , int first"		1273836	3					
ANR	1273909	Parameter	FILE * out	1277:11:32079:32087	1273836	0	True				
ANR	1273910	ParameterType	FILE *		1273836	0					
ANR	1273911	Identifier	out		1273836	1					
ANR	1273912	Parameter	_case_t * tab	1277:22:32090:32101	1273836	1	True				
ANR	1273913	ParameterType	_case_t *		1273836	0					
ANR	1273914	Identifier	tab		1273836	1					
ANR	1273915	Parameter	int num	1277:36:32104:32110	1273836	2	True				
ANR	1273916	ParameterType	int		1273836	0					
ANR	1273917	Identifier	num		1273836	1					
ANR	1273918	Parameter	int first	1277:45:32113:32121	1273836	3	True				
ANR	1273919	ParameterType	int		1273836	0					
ANR	1273920	Identifier	first		1273836	1					
ANR	1273921	CFGEntryNode	ENTRY		1273836		True				
ANR	1273922	CFGExitNode	EXIT		1273836		True				
ANR	1273923	Symbol	tab [ i ] . other1		1273836						
ANR	1273924	Symbol	* i		1273836						
ANR	1273925	Symbol	tab [ i ] . other2		1273836						
ANR	1273926	Symbol	tab		1273836						
ANR	1273927	Symbol	num		1273836						
ANR	1273928	Symbol	i		1273836						
ANR	1273929	Symbol	tab [ i ] . key		1273836						
ANR	1273930	Symbol	first		1273836						
ANR	1273931	Symbol	out		1273836						
ANR	1273932	Symbol	* tab		1273836						
ANR	1273933	Function	write_cdata	1294:0:32403:48686							
ANR	1273934	FunctionDef	write_cdata (char * opath)		1273933	0					
ANR	1273935	CompoundStatement		1296:0:32440:48686	1273933	0					
ANR	1273936	IdentifierDeclStatement	FILE * out ;	1297:4:32446:32455	1273933	0	True				
ANR	1273937	IdentifierDecl	* out		1273933	0					
ANR	1273938	IdentifierDeclType	FILE *		1273933	0					
ANR	1273939	Identifier	out		1273933	1					
ANR	1273940	IdentifierDeclStatement	ac_uint4 bytes ;	1298:1:32458:32472	1273933	1	True				
ANR	1273941	IdentifierDecl	bytes		1273933	0					
ANR	1273942	IdentifierDeclType	ac_uint4		1273933	0					
ANR	1273943	Identifier	bytes		1273933	1					
ANR	1273944	IdentifierDeclStatement	"ac_uint4 i , idx , nprops ;"	1299:4:32478:32501	1273933	2	True				
ANR	1273945	IdentifierDecl	i		1273933	0					
ANR	1273946	IdentifierDeclType	ac_uint4		1273933	0					
ANR	1273947	Identifier	i		1273933	1					
ANR	1273948	IdentifierDecl	idx		1273933	1					
ANR	1273949	IdentifierDeclType	ac_uint4		1273933	0					
ANR	1273950	Identifier	idx		1273933	1					
ANR	1273951	IdentifierDecl	nprops		1273933	2					
ANR	1273952	IdentifierDeclType	ac_uint4		1273933	0					
ANR	1273953	Identifier	nprops		1273933	1					
ANR	1273954	IdentifierDeclStatement	ac_uint2 casecnt [ 2 ] ;	1301:4:32528:32547	1273933	3	True				
ANR	1273955	IdentifierDecl	casecnt [ 2 ]		1273933	0					
ANR	1273956	IdentifierDeclType	ac_uint2 [ 2 ]		1273933	0					
ANR	1273957	Identifier	casecnt		1273933	1					
ANR	1273958	PrimaryExpression	2		1273933	2					
ANR	1273959	IdentifierDeclStatement	char path [ BUFSIZ ] ;	1303:4:32560:32577	1273933	4	True				
ANR	1273960	IdentifierDecl	path [ BUFSIZ ]		1273933	0					
ANR	1273961	IdentifierDeclType	char [ BUFSIZ ]		1273933	0					
ANR	1273962	Identifier	path		1273933	1					
ANR	1273963	Identifier	BUFSIZ		1273933	2					
ANR	1273964	IdentifierDeclStatement	"int j , k ;"	1305:4:32601:32609	1273933	5	True				
ANR	1273965	IdentifierDecl	j		1273933	0					
ANR	1273966	IdentifierDeclType	int		1273933	0					
ANR	1273967	Identifier	j		1273933	1					
ANR	1273968	IdentifierDecl	k		1273933	1					
ANR	1273969	IdentifierDeclType	int		1273933	0					
ANR	1273970	Identifier	k		1273933	1					
ANR	1273971	Statement	snprintf	1316:4:32850:32857	1273933	6	True				
ANR	1273972	Statement	(	1316:12:32858:32858	1273933	7	True				
ANR	1273973	Statement	path	1316:13:32859:32862	1273933	8	True				
ANR	1273974	Statement	","	1316:17:32863:32863	1273933	9	True				
ANR	1273975	Statement	sizeof	1316:19:32865:32870	1273933	10	True				
ANR	1273976	Statement	path	1316:26:32872:32875	1273933	11	True				
ANR	1273977	Statement	","	1316:30:32876:32876	1273933	12	True				
ANR	1273978	Statement	"""%s"""	1316:32:32878:32881	1273933	13	True				
ANR	1273979	Statement	LDAP_DIRSEP	1316:37:32883:32893	1273933	14	True				
ANR	1273980	Statement	"""uctable.h"""	1316:49:32895:32905	1273933	15	True				
ANR	1273981	Statement	","	1316:60:32906:32906	1273933	16	True				
ANR	1273982	Statement	opath	1316:62:32908:32912	1273933	17	True				
ANR	1273983	Statement	)	1316:67:32913:32913	1273933	18	True				
ANR	1273984	ExpressionStatement		1316:68:32914:32914	1273933	19	True				
ANR	1273985	IfStatement	"if ( ( out = fopen ( path , ""w"" ) ) == 0 )"		1273933	20					
ANR	1273986	Condition	"( out = fopen ( path , ""w"" ) ) == 0"	1317:8:32924:32952	1273933	0	True				
ANR	1273987	EqualityExpression	"( out = fopen ( path , ""w"" ) ) == 0"		1273933	0		==			
ANR	1273988	AssignmentExpression	"out = fopen ( path , ""w"" )"		1273933	0		=			
ANR	1273989	Identifier	out		1273933	0					
ANR	1273990	CallExpression	"fopen ( path , ""w"" )"		1273933	1					
ANR	1273991	Callee	fopen		1273933	0					
ANR	1273992	Identifier	fopen		1273933	0					
ANR	1273993	ArgumentList	path		1273933	1					
ANR	1273994	Argument	path		1273933	0					
ANR	1273995	Identifier	path		1273933	0					
ANR	1273996	Argument	"""w"""		1273933	1					
ANR	1273997	PrimaryExpression	"""w"""		1273933	0					
ANR	1273998	PrimaryExpression	0		1273933	1					
ANR	1273999	ReturnStatement	return ;	1318:6:32961:32967	1273933	1	True				
ANR	1274000	ForStatement	for ( i = idx = 0 ; i < NUMPROPS ; i ++ )		1273933	21					
ANR	1274001	ForInit	i = idx = 0 ;	1333:9:33349:33360	1273933	0	True				
ANR	1274002	AssignmentExpression	i = idx = 0		1273933	0		=			
ANR	1274003	Identifier	i		1273933	0					
ANR	1274004	AssignmentExpression	idx = 0		1273933	1		=			
ANR	1274005	Identifier	idx		1273933	0					
ANR	1274006	PrimaryExpression	0		1273933	1					
ANR	1274007	Condition	i < NUMPROPS	1333:22:33362:33373	1273933	1	True				
ANR	1274008	RelationalExpression	i < NUMPROPS		1273933	0		<			
ANR	1274009	Identifier	i		1273933	0					
ANR	1274010	Identifier	NUMPROPS		1273933	1					
ANR	1274011	PostIncDecOperationExpression	i ++	1333:36:33376:33378	1273933	2	True				
ANR	1274012	Identifier	i		1273933	0					
ANR	1274013	IncDec	++		1273933	1					
ANR	1274014	CompoundStatement		38:41:940:940	1273933	3					
ANR	1274015	ExpressionStatement	propcnt [ i ] = ( proptbl [ i ] . used != 0 ) ? idx : 0xffff	1334:8:33391:33441	1273933	0	True				
ANR	1274016	AssignmentExpression	propcnt [ i ] = ( proptbl [ i ] . used != 0 ) ? idx : 0xffff		1273933	0		=			
ANR	1274017	ArrayIndexing	propcnt [ i ]		1273933	0					
ANR	1274018	Identifier	propcnt		1273933	0					
ANR	1274019	Identifier	i		1273933	1					
ANR	1274020	ConditionalExpression	( proptbl [ i ] . used != 0 ) ? idx : 0xffff		1273933	1					
ANR	1274021	Condition	proptbl [ i ] . used != 0		1273933	0					
ANR	1274022	EqualityExpression	proptbl [ i ] . used != 0		1273933	0		!=			
ANR	1274023	MemberAccess	proptbl [ i ] . used		1273933	0					
ANR	1274024	ArrayIndexing	proptbl [ i ]		1273933	0					
ANR	1274025	Identifier	proptbl		1273933	0					
ANR	1274026	Identifier	i		1273933	1					
ANR	1274027	Identifier	used		1273933	1					
ANR	1274028	PrimaryExpression	0		1273933	1					
ANR	1274029	Identifier	idx		1273933	1					
ANR	1274030	PrimaryExpression	0xffff		1273933	2					
ANR	1274031	ExpressionStatement	idx += proptbl [ i ] . used	1335:8:33451:33473	1273933	1	True				
ANR	1274032	AssignmentExpression	idx += proptbl [ i ] . used		1273933	0		+=			
ANR	1274033	Identifier	idx		1273933	0					
ANR	1274034	MemberAccess	proptbl [ i ] . used		1273933	1					
ANR	1274035	ArrayIndexing	proptbl [ i ]		1273933	0					
ANR	1274036	Identifier	proptbl		1273933	0					
ANR	1274037	Identifier	i		1273933	1					
ANR	1274038	Identifier	used		1273933	1					
ANR	1274039	ExpressionStatement	propcnt [ i ] = idx	1342:4:33606:33622	1273933	22	True				
ANR	1274040	AssignmentExpression	propcnt [ i ] = idx		1273933	0		=			
ANR	1274041	ArrayIndexing	propcnt [ i ]		1273933	0					
ANR	1274042	Identifier	propcnt		1273933	0					
ANR	1274043	Identifier	i		1273933	1					
ANR	1274044	Identifier	idx		1273933	1					
ANR	1274045	ExpressionStatement	hdr [ 1 ] = NUMPROPS	1349:4:33818:33835	1273933	23	True				
ANR	1274046	AssignmentExpression	hdr [ 1 ] = NUMPROPS		1273933	0		=			
ANR	1274047	ArrayIndexing	hdr [ 1 ]		1273933	0					
ANR	1274048	Identifier	hdr		1273933	0					
ANR	1274049	PrimaryExpression	1		1273933	1					
ANR	1274050	Identifier	NUMPROPS		1273933	1					
ANR	1274051	IfStatement	if ( ( bytes = sizeof ( ac_uint2 ) * ( NUMPROPS + 1 ) ) & 3 )		1273933	24					
ANR	1274052	Condition	( bytes = sizeof ( ac_uint2 ) * ( NUMPROPS + 1 ) ) & 3	1355:8:33963:34009	1273933	0	True				
ANR	1274053	BitAndExpression	( bytes = sizeof ( ac_uint2 ) * ( NUMPROPS + 1 ) ) & 3		1273933	0		&			
ANR	1274054	AssignmentExpression	bytes = sizeof ( ac_uint2 ) * ( NUMPROPS + 1 )		1273933	0		=			
ANR	1274055	Identifier	bytes		1273933	0					
ANR	1274056	MultiplicativeExpression	sizeof ( ac_uint2 ) * ( NUMPROPS + 1 )		1273933	1		*			
ANR	1274057	SizeofExpression	sizeof ( ac_uint2 )		1273933	0					
ANR	1274058	Sizeof	sizeof		1273933	0					
ANR	1274059	SizeofOperand	ac_uint2		1273933	1					
ANR	1274060	AdditiveExpression	NUMPROPS + 1		1273933	1		+			
ANR	1274061	Identifier	NUMPROPS		1273933	0					
ANR	1274062	PrimaryExpression	1		1273933	1					
ANR	1274063	PrimaryExpression	3		1273933	1					
ANR	1274064	ExpressionStatement	bytes += 4 - ( bytes & 3 )	1356:6:34018:34042	1273933	1	True				
ANR	1274065	AssignmentExpression	bytes += 4 - ( bytes & 3 )		1273933	0		+=			
ANR	1274066	Identifier	bytes		1273933	0					
ANR	1274067	AdditiveExpression	4 - ( bytes & 3 )		1273933	1		-			
ANR	1274068	PrimaryExpression	4		1273933	0					
ANR	1274069	BitAndExpression	bytes & 3		1273933	1		&			
ANR	1274070	Identifier	bytes		1273933	0					
ANR	1274071	PrimaryExpression	3		1273933	1					
ANR	1274072	ExpressionStatement	nprops = bytes / sizeof ( ac_uint2 )	1357:4:34048:34081	1273933	25	True				
ANR	1274073	AssignmentExpression	nprops = bytes / sizeof ( ac_uint2 )		1273933	0		=			
ANR	1274074	Identifier	nprops		1273933	0					
ANR	1274075	MultiplicativeExpression	bytes / sizeof ( ac_uint2 )		1273933	1		/			
ANR	1274076	Identifier	bytes		1273933	0					
ANR	1274077	SizeofExpression	sizeof ( ac_uint2 )		1273933	1					
ANR	1274078	Sizeof	sizeof		1273933	0					
ANR	1274079	SizeofOperand	ac_uint2		1273933	1					
ANR	1274080	ExpressionStatement	bytes += sizeof ( ac_uint4 ) * idx	1358:4:34087:34118	1273933	26	True				
ANR	1274081	AssignmentExpression	bytes += sizeof ( ac_uint4 ) * idx		1273933	0		+=			
ANR	1274082	Identifier	bytes		1273933	0					
ANR	1274083	MultiplicativeExpression	sizeof ( ac_uint4 ) * idx		1273933	1		*			
ANR	1274084	SizeofExpression	sizeof ( ac_uint4 )		1273933	0					
ANR	1274085	Sizeof	sizeof		1273933	0					
ANR	1274086	SizeofOperand	ac_uint4		1273933	1					
ANR	1274087	Identifier	idx		1273933	1					
ANR	1274088	Statement	fprintf	1361:4:34143:34149	1273933	27	True				
ANR	1274089	Statement	(	1361:11:34150:34150	1273933	28	True				
ANR	1274090	Statement	out	1361:12:34151:34153	1273933	29	True				
ANR	1274091	Statement	","	1361:15:34154:34154	1273933	30	True				
ANR	1274092	Statement	"""/* This file was generated from a modified version UCData's ucgendat.\\n"""	1362:8:34164:34236	1273933	31	True				
ANR	1274093	Statement	""" *\\n"""	1363:8:34246:34251	1273933	32	True				
ANR	1274094	Statement	""" *                     DO NOT EDIT THIS FILE!\\n"""	1364:8:34261:34309	1273933	33	True				
ANR	1274095	Statement	""" * \\n"""	1365:8:34319:34325	1273933	34	True				
ANR	1274096	Statement	""" * Instead, compile ucgendat.c (bundled with PHP in ext/mbstring), download\\n"""	1366:8:34335:34413	1273933	35	True				
ANR	1274097	Statement	""" * the appropriate UnicodeData-x.x.x.txt and CompositionExclusions-x.x.x.txt\\n"""	1367:8:34423:34502	1273933	36	True				
ANR	1274098	Statement	""" * files from  http://www.unicode.org/Public/ and run this program.\\n"""	1368:8:34512:34582	1273933	37	True				
ANR	1274099	Statement	""" *\\n"""	1369:8:34592:34597	1273933	38	True				
ANR	1274100	Statement	""" * More information can be found in the UCData package. Unfortunately,\\n"""	1370:8:34607:34680	1273933	39	True				
ANR	1274101	Statement	""" * the project's page doesn't seem to be live anymore, so you can use\\n"""	1371:8:34690:34762	1273933	40	True				
ANR	1274102	Statement	""" * OpenLDAPs modified copy (look in libraries/liblunicode/ucdata) */\\n\\n"""	1372:8:34772:34845	1273933	41	True				
ANR	1274103	Statement	)	1372:82:34846:34846	1273933	42	True				
ANR	1274104	ExpressionStatement		1372:83:34847:34847	1273933	43	True				
ANR	1274105	Statement	fprintf	1374:4:34854:34860	1273933	44	True				
ANR	1274106	Statement	(	1374:11:34861:34861	1273933	45	True				
ANR	1274107	Statement	out	1374:12:34862:34864	1273933	46	True				
ANR	1274108	Statement	","	1374:15:34865:34865	1273933	47	True				
ANR	1274109	Statement	PREF	1374:17:34867:34870	1273933	48	True				
ANR	1274110	Statement	"""unsigned short _ucprop_size = %d;\\n\\n"""	1374:22:34872:34910	1273933	49	True				
ANR	1274111	Statement	","	1374:61:34911:34911	1273933	50	True				
ANR	1274112	Statement	NUMPROPS	1374:63:34913:34920	1273933	51	True				
ANR	1274113	Statement	)	1374:71:34921:34921	1273933	52	True				
ANR	1274114	ExpressionStatement		1374:72:34922:34922	1273933	53	True				
ANR	1274115	Statement	fprintf	1376:4:34929:34935	1273933	54	True				
ANR	1274116	Statement	(	1376:11:34936:34936	1273933	55	True				
ANR	1274117	Statement	out	1376:12:34937:34939	1273933	56	True				
ANR	1274118	Statement	","	1376:15:34940:34940	1273933	57	True				
ANR	1274119	Statement	PREF	1376:17:34942:34945	1273933	58	True				
ANR	1274120	Statement	"""unsigned short  _ucprop_offsets[] = {"""	1376:22:34947:34985	1273933	59	True				
ANR	1274121	Statement	)	1376:61:34986:34986	1273933	60	True				
ANR	1274122	ExpressionStatement		1376:62:34987:34987	1273933	61	True				
ANR	1274123	ForStatement	for ( i = 0 ; i < nprops ; i ++ )		1273933	62					
ANR	1274124	ForInit	i = 0 ;	1378:9:34999:35004	1273933	0	True				
ANR	1274125	AssignmentExpression	i = 0		1273933	0		=			
ANR	1274126	Identifier	i		1273933	0					
ANR	1274127	PrimaryExpression	0		1273933	1					
ANR	1274128	Condition	i < nprops	1378:16:35006:35013	1273933	1	True				
ANR	1274129	RelationalExpression	i < nprops		1273933	0		<			
ANR	1274130	Identifier	i		1273933	0					
ANR	1274131	Identifier	nprops		1273933	1					
ANR	1274132	PostIncDecOperationExpression	i ++	1378:26:35016:35018	1273933	2	True				
ANR	1274133	Identifier	i		1273933	0					
ANR	1274134	IncDec	++		1273933	1					
ANR	1274135	CompoundStatement		83:31:2580:2580	1273933	3					
ANR	1274136	IfStatement	if ( i )		1273933	0					
ANR	1274137	Condition	i	1379:11:35034:35034	1273933	0	True				
ANR	1274138	Identifier	i		1273933	0					
ANR	1274139	ExpressionStatement	"fprintf ( out , "","" )"	1379:14:35037:35054	1273933	1	True				
ANR	1274140	CallExpression	"fprintf ( out , "","" )"		1273933	0					
ANR	1274141	Callee	fprintf		1273933	0					
ANR	1274142	Identifier	fprintf		1273933	0					
ANR	1274143	ArgumentList	out		1273933	1					
ANR	1274144	Argument	out		1273933	0					
ANR	1274145	Identifier	out		1273933	0					
ANR	1274146	Argument	""","""		1273933	1					
ANR	1274147	PrimaryExpression	""","""		1273933	0					
ANR	1274148	IfStatement	if ( ! ( i & 7 ) )		1273933	1					
ANR	1274149	Condition	! ( i & 7 )	1380:11:35067:35072	1273933	0	True				
ANR	1274150	UnaryOperationExpression	! ( i & 7 )		1273933	0					
ANR	1274151	UnaryOperator	!		1273933	0					
ANR	1274152	BitAndExpression	i & 7		1273933	1		&			
ANR	1274153	Identifier	i		1273933	0					
ANR	1274154	PrimaryExpression	7		1273933	1					
ANR	1274155	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1380:19:35075:35095	1273933	1	True				
ANR	1274156	CallExpression	"fprintf ( out , ""\\n\\t"" )"		1273933	0					
ANR	1274157	Callee	fprintf		1273933	0					
ANR	1274158	Identifier	fprintf		1273933	0					
ANR	1274159	ArgumentList	out		1273933	1					
ANR	1274160	Argument	out		1273933	0					
ANR	1274161	Identifier	out		1273933	0					
ANR	1274162	Argument	"""\\n\\t"""		1273933	1					
ANR	1274163	PrimaryExpression	"""\\n\\t"""		1273933	0					
ANR	1274164	ElseStatement	else		1273933	0					
ANR	1274165	ExpressionStatement	"fprintf ( out , "" "" )"	1381:12:35109:35126	1273933	0	True				
ANR	1274166	CallExpression	"fprintf ( out , "" "" )"		1273933	0					
ANR	1274167	Callee	fprintf		1273933	0					
ANR	1274168	Identifier	fprintf		1273933	0					
ANR	1274169	ArgumentList	out		1273933	1					
ANR	1274170	Argument	out		1273933	0					
ANR	1274171	Identifier	out		1273933	0					
ANR	1274172	Argument	""" """		1273933	1					
ANR	1274173	PrimaryExpression	""" """		1273933	0					
ANR	1274174	ExpressionStatement	"fprintf ( out , ""0x%04x"" , propcnt [ i ] )"	1382:7:35135:35169	1273933	2	True				
ANR	1274175	CallExpression	"fprintf ( out , ""0x%04x"" , propcnt [ i ] )"		1273933	0					
ANR	1274176	Callee	fprintf		1273933	0					
ANR	1274177	Identifier	fprintf		1273933	0					
ANR	1274178	ArgumentList	out		1273933	1					
ANR	1274179	Argument	out		1273933	0					
ANR	1274180	Identifier	out		1273933	0					
ANR	1274181	Argument	"""0x%04x"""		1273933	1					
ANR	1274182	PrimaryExpression	"""0x%04x"""		1273933	0					
ANR	1274183	Argument	propcnt [ i ]		1273933	2					
ANR	1274184	ArrayIndexing	propcnt [ i ]		1273933	0					
ANR	1274185	Identifier	propcnt		1273933	0					
ANR	1274186	Identifier	i		1273933	1					
ANR	1274187	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1384:4:35181:35205	1273933	63	True				
ANR	1274188	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		1273933	0					
ANR	1274189	Callee	fprintf		1273933	0					
ANR	1274190	Identifier	fprintf		1273933	0					
ANR	1274191	ArgumentList	out		1273933	1					
ANR	1274192	Argument	out		1273933	0					
ANR	1274193	Identifier	out		1273933	0					
ANR	1274194	Argument	"""\\n};\\n\\n"""		1273933	1					
ANR	1274195	PrimaryExpression	"""\\n};\\n\\n"""		1273933	0					
ANR	1274196	Statement	fprintf	1386:4:35212:35218	1273933	64	True				
ANR	1274197	Statement	(	1386:11:35219:35219	1273933	65	True				
ANR	1274198	Statement	out	1386:12:35220:35222	1273933	66	True				
ANR	1274199	Statement	","	1386:15:35223:35223	1273933	67	True				
ANR	1274200	Statement	PREF	1386:17:35225:35228	1273933	68	True				
ANR	1274201	Statement	"""unsigned int _ucprop_ranges[] = {"""	1386:22:35230:35264	1273933	69	True				
ANR	1274202	Statement	)	1386:57:35265:35265	1273933	70	True				
ANR	1274203	ExpressionStatement		1386:58:35266:35266	1273933	71	True				
ANR	1274204	ExpressionStatement	k = 0	1388:4:35273:35278	1273933	72	True				
ANR	1274205	AssignmentExpression	k = 0		1273933	0		=			
ANR	1274206	Identifier	k		1273933	0					
ANR	1274207	PrimaryExpression	0		1273933	1					
ANR	1274208	ForStatement	for ( i = 0 ; i < NUMPROPS ; i ++ )		1273933	73					
ANR	1274209	ForInit	i = 0 ;	1389:9:35289:35294	1273933	0	True				
ANR	1274210	AssignmentExpression	i = 0		1273933	0		=			
ANR	1274211	Identifier	i		1273933	0					
ANR	1274212	PrimaryExpression	0		1273933	1					
ANR	1274213	Condition	i < NUMPROPS	1389:16:35296:35307	1273933	1	True				
ANR	1274214	RelationalExpression	i < NUMPROPS		1273933	0		<			
ANR	1274215	Identifier	i		1273933	0					
ANR	1274216	Identifier	NUMPROPS		1273933	1					
ANR	1274217	PostIncDecOperationExpression	i ++	1389:30:35310:35312	1273933	2	True				
ANR	1274218	Identifier	i		1273933	0					
ANR	1274219	IncDec	++		1273933	1					
ANR	1274220	CompoundStatement		94:35:2874:2874	1273933	3					
ANR	1274221	IfStatement	if ( proptbl [ i ] . used > 0 )		1273933	0					
ANR	1274222	Condition	proptbl [ i ] . used > 0	1390:5:35322:35340	1273933	0	True				
ANR	1274223	RelationalExpression	proptbl [ i ] . used > 0		1273933	0		>			
ANR	1274224	MemberAccess	proptbl [ i ] . used		1273933	0					
ANR	1274225	ArrayIndexing	proptbl [ i ]		1273933	0					
ANR	1274226	Identifier	proptbl		1273933	0					
ANR	1274227	Identifier	i		1273933	1					
ANR	1274228	Identifier	used		1273933	1					
ANR	1274229	PrimaryExpression	0		1273933	1					
ANR	1274230	CompoundStatement		95:26:2902:2902	1273933	1					
ANR	1274231	ForStatement	for ( j = 0 ; j < proptbl [ i ] . used ; j ++ )		1273933	0					
ANR	1274232	ForInit	j = 0 ;	1391:8:35353:35356	1273933	0	True				
ANR	1274233	AssignmentExpression	j = 0		1273933	0		=			
ANR	1274234	Identifier	j		1273933	0					
ANR	1274235	PrimaryExpression	0		1273933	1					
ANR	1274236	Condition	j < proptbl [ i ] . used	1391:13:35358:35374	1273933	1	True				
ANR	1274237	RelationalExpression	j < proptbl [ i ] . used		1273933	0		<			
ANR	1274238	Identifier	j		1273933	0					
ANR	1274239	MemberAccess	proptbl [ i ] . used		1273933	1					
ANR	1274240	ArrayIndexing	proptbl [ i ]		1273933	0					
ANR	1274241	Identifier	proptbl		1273933	0					
ANR	1274242	Identifier	i		1273933	1					
ANR	1274243	Identifier	used		1273933	1					
ANR	1274244	PostIncDecOperationExpression	j ++	1391:32:35377:35379	1273933	2	True				
ANR	1274245	Identifier	j		1273933	0					
ANR	1274246	IncDec	++		1273933	1					
ANR	1274247	CompoundStatement		96:37:2941:2941	1273933	3					
ANR	1274248	IfStatement	if ( k )		1273933	0					
ANR	1274249	Condition	k	1392:9:35393:35393	1273933	0	True				
ANR	1274250	Identifier	k		1273933	0					
ANR	1274251	ExpressionStatement	"fprintf ( out , "","" )"	1392:12:35396:35413	1273933	1	True				
ANR	1274252	CallExpression	"fprintf ( out , "","" )"		1273933	0					
ANR	1274253	Callee	fprintf		1273933	0					
ANR	1274254	Identifier	fprintf		1273933	0					
ANR	1274255	ArgumentList	out		1273933	1					
ANR	1274256	Argument	out		1273933	0					
ANR	1274257	Identifier	out		1273933	0					
ANR	1274258	Argument	""","""		1273933	1					
ANR	1274259	PrimaryExpression	""","""		1273933	0					
ANR	1274260	IfStatement	if ( ! ( k & 3 ) )		1273933	1					
ANR	1274261	Condition	! ( k & 3 )	1393:9:35424:35429	1273933	0	True				
ANR	1274262	UnaryOperationExpression	! ( k & 3 )		1273933	0					
ANR	1274263	UnaryOperator	!		1273933	0					
ANR	1274264	BitAndExpression	k & 3		1273933	1		&			
ANR	1274265	Identifier	k		1273933	0					
ANR	1274266	PrimaryExpression	3		1273933	1					
ANR	1274267	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1393:17:35432:35451	1273933	1	True				
ANR	1274268	CallExpression	"fprintf ( out , ""\\n\\t"" )"		1273933	0					
ANR	1274269	Callee	fprintf		1273933	0					
ANR	1274270	Identifier	fprintf		1273933	0					
ANR	1274271	ArgumentList	out		1273933	1					
ANR	1274272	Argument	out		1273933	0					
ANR	1274273	Identifier	out		1273933	0					
ANR	1274274	Argument	"""\\n\\t"""		1273933	1					
ANR	1274275	PrimaryExpression	"""\\n\\t"""		1273933	0					
ANR	1274276	ElseStatement	else		1273933	0					
ANR	1274277	ExpressionStatement	"fprintf ( out , "" "" )"	1394:10:35463:35480	1273933	0	True				
ANR	1274278	CallExpression	"fprintf ( out , "" "" )"		1273933	0					
ANR	1274279	Callee	fprintf		1273933	0					
ANR	1274280	Identifier	fprintf		1273933	0					
ANR	1274281	ArgumentList	out		1273933	1					
ANR	1274282	Argument	out		1273933	0					
ANR	1274283	Identifier	out		1273933	0					
ANR	1274284	Argument	""" """		1273933	1					
ANR	1274285	PrimaryExpression	""" """		1273933	0					
ANR	1274286	ExpressionStatement	k ++	1395:5:35487:35490	1273933	2	True				
ANR	1274287	PostIncDecOperationExpression	k ++		1273933	0					
ANR	1274288	Identifier	k		1273933	0					
ANR	1274289	IncDec	++		1273933	1					
ANR	1274290	ExpressionStatement	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) proptbl [ i ] . ranges [ j ] )"	1396:5:35497:35558	1273933	3	True				
ANR	1274291	CallExpression	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) proptbl [ i ] . ranges [ j ] )"		1273933	0					
ANR	1274292	Callee	fprintf		1273933	0					
ANR	1274293	Identifier	fprintf		1273933	0					
ANR	1274294	ArgumentList	out		1273933	1					
ANR	1274295	Argument	out		1273933	0					
ANR	1274296	Identifier	out		1273933	0					
ANR	1274297	Argument	"""0x%08lx"""		1273933	1					
ANR	1274298	PrimaryExpression	"""0x%08lx"""		1273933	0					
ANR	1274299	Argument	( unsigned long ) proptbl [ i ] . ranges [ j ]		1273933	2					
ANR	1274300	CastExpression	( unsigned long ) proptbl [ i ] . ranges [ j ]		1273933	0					
ANR	1274301	CastTarget	unsigned long		1273933	0					
ANR	1274302	ArrayIndexing	proptbl [ i ] . ranges [ j ]		1273933	1					
ANR	1274303	MemberAccess	proptbl [ i ] . ranges		1273933	0					
ANR	1274304	ArrayIndexing	proptbl [ i ]		1273933	0					
ANR	1274305	Identifier	proptbl		1273933	0					
ANR	1274306	Identifier	i		1273933	1					
ANR	1274307	Identifier	ranges		1273933	1					
ANR	1274308	Identifier	j		1273933	1					
ANR	1274309	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1400:4:35578:35602	1273933	74	True				
ANR	1274310	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		1273933	0					
ANR	1274311	Callee	fprintf		1273933	0					
ANR	1274312	Identifier	fprintf		1273933	0					
ANR	1274313	ArgumentList	out		1273933	1					
ANR	1274314	Argument	out		1273933	0					
ANR	1274315	Identifier	out		1273933	0					
ANR	1274316	Argument	"""\\n};\\n\\n"""		1273933	1					
ANR	1274317	PrimaryExpression	"""\\n};\\n\\n"""		1273933	0					
ANR	1274318	Statement	fprintf	1436:4:36391:36397	1273933	75	True				
ANR	1274319	Statement	(	1436:11:36398:36398	1273933	76	True				
ANR	1274320	Statement	out	1436:12:36399:36401	1273933	77	True				
ANR	1274321	Statement	","	1436:15:36402:36402	1273933	78	True				
ANR	1274322	Statement	PREF	1436:17:36404:36407	1273933	79	True				
ANR	1274323	Statement	"""unsigned int _uccase_size = %ld;\\n\\n"""	1436:22:36409:36446	1273933	80	True				
ANR	1274324	Statement	","	1436:60:36447:36447	1273933	81	True				
ANR	1274325	Statement	(	1437:8:36457:36457	1273933	82	True				
ANR	1274326	Statement	long	1437:9:36458:36461	1273933	83	True				
ANR	1274327	Statement	)	1437:13:36462:36462	1273933	84	True				
ANR	1274328	Statement	(	1437:15:36464:36464	1273933	85	True				
ANR	1274329	Statement	upper_used	1437:16:36465:36474	1273933	86	True				
ANR	1274330	Statement	+	1437:27:36476:36476	1273933	87	True				
ANR	1274331	Statement	lower_used	1437:29:36478:36487	1273933	88	True				
ANR	1274332	Statement	+	1437:40:36489:36489	1273933	89	True				
ANR	1274333	Statement	title_used	1437:42:36491:36500	1273933	90	True				
ANR	1274334	Statement	)	1437:52:36501:36501	1273933	91	True				
ANR	1274335	Statement	)	1437:53:36502:36502	1273933	92	True				
ANR	1274336	ExpressionStatement		1437:54:36503:36503	1273933	93	True				
ANR	1274337	Statement	fprintf	1439:4:36510:36516	1273933	94	True				
ANR	1274338	Statement	(	1439:11:36517:36517	1273933	95	True				
ANR	1274339	Statement	out	1439:12:36518:36520	1273933	96	True				
ANR	1274340	Statement	","	1439:15:36521:36521	1273933	97	True				
ANR	1274341	Statement	"""/* Starting indexes of the case tables\\n"""	1440:8:36531:36572	1273933	98	True				
ANR	1274342	Statement	""" * UpperIndex = 0\\n"""	1441:8:36582:36602	1273933	99	True				
ANR	1274343	Statement	""" * LowerIndex = _uccase_len[0]\\n"""	1442:8:36612:36645	1273933	100	True				
ANR	1274344	Statement	""" * TitleIndex = LowerIndex + _uccase_len[1] */\\n\\n"""	1443:8:36655:36706	1273933	101	True				
ANR	1274345	Statement	)	1443:60:36707:36707	1273933	102	True				
ANR	1274346	ExpressionStatement		1443:61:36708:36708	1273933	103	True				
ANR	1274347	Statement	fprintf	1444:4:36714:36720	1273933	104	True				
ANR	1274348	Statement	(	1444:11:36721:36721	1273933	105	True				
ANR	1274349	Statement	out	1444:12:36722:36724	1273933	106	True				
ANR	1274350	Statement	","	1444:15:36725:36725	1273933	107	True				
ANR	1274351	Statement	PREF	1444:17:36727:36730	1273933	108	True				
ANR	1274352	Statement	"""unsigned short _uccase_len[2] = {%ld, %ld};\\n\\n"""	1444:22:36732:36780	1273933	109	True				
ANR	1274353	Statement	","	1444:71:36781:36781	1273933	110	True				
ANR	1274354	Statement	(	1445:8:36791:36791	1273933	111	True				
ANR	1274355	Statement	long	1445:9:36792:36795	1273933	112	True				
ANR	1274356	Statement	)	1445:13:36796:36796	1273933	113	True				
ANR	1274357	Statement	upper_used	1445:15:36798:36807	1273933	114	True				
ANR	1274358	Statement	*	1445:26:36809:36809	1273933	115	True				
ANR	1274359	Statement	3	1445:28:36811:36811	1273933	116	True				
ANR	1274360	Statement	","	1445:29:36812:36812	1273933	117	True				
ANR	1274361	Statement	(	1445:31:36814:36814	1273933	118	True				
ANR	1274362	Statement	long	1445:32:36815:36818	1273933	119	True				
ANR	1274363	Statement	)	1445:36:36819:36819	1273933	120	True				
ANR	1274364	Statement	lower_used	1445:38:36821:36830	1273933	121	True				
ANR	1274365	Statement	*	1445:49:36832:36832	1273933	122	True				
ANR	1274366	Statement	3	1445:51:36834:36834	1273933	123	True				
ANR	1274367	Statement	)	1445:52:36835:36835	1273933	124	True				
ANR	1274368	ExpressionStatement		1445:53:36836:36836	1273933	125	True				
ANR	1274369	Statement	fprintf	1446:4:36842:36848	1273933	126	True				
ANR	1274370	Statement	(	1446:11:36849:36849	1273933	127	True				
ANR	1274371	Statement	out	1446:12:36850:36852	1273933	128	True				
ANR	1274372	Statement	","	1446:15:36853:36853	1273933	129	True				
ANR	1274373	Statement	PREF	1446:17:36855:36858	1273933	130	True				
ANR	1274374	Statement	"""unsigned int _uccase_map[] = {"""	1446:22:36860:36891	1273933	131	True				
ANR	1274375	Statement	)	1446:54:36892:36892	1273933	132	True				
ANR	1274376	ExpressionStatement		1446:55:36893:36893	1273933	133	True				
ANR	1274377	IfStatement	if ( upper_used > 0 )		1273933	134					
ANR	1274378	Condition	upper_used > 0	1448:8:36904:36917	1273933	0	True				
ANR	1274379	RelationalExpression	upper_used > 0		1273933	0		>			
ANR	1274380	Identifier	upper_used		1273933	0					
ANR	1274381	PrimaryExpression	0		1273933	1					
ANR	1274382	ExpressionStatement	"write_case ( out , upper , upper_used , 1 )"	1452:6:36982:37019	1273933	1	True				
ANR	1274383	CallExpression	"write_case ( out , upper , upper_used , 1 )"		1273933	0					
ANR	1274384	Callee	write_case		1273933	0					
ANR	1274385	Identifier	write_case		1273933	0					
ANR	1274386	ArgumentList	out		1273933	1					
ANR	1274387	Argument	out		1273933	0					
ANR	1274388	Identifier	out		1273933	0					
ANR	1274389	Argument	upper		1273933	1					
ANR	1274390	Identifier	upper		1273933	0					
ANR	1274391	Argument	upper_used		1273933	2					
ANR	1274392	Identifier	upper_used		1273933	0					
ANR	1274393	Argument	1		1273933	3					
ANR	1274394	PrimaryExpression	1		1273933	0					
ANR	1274395	IfStatement	if ( lower_used > 0 )		1273933	135					
ANR	1274396	Condition	lower_used > 0	1454:8:37030:37043	1273933	0	True				
ANR	1274397	RelationalExpression	lower_used > 0		1273933	0		>			
ANR	1274398	Identifier	lower_used		1273933	0					
ANR	1274399	PrimaryExpression	0		1273933	1					
ANR	1274400	ExpressionStatement	"write_case ( out , lower , lower_used , ! upper_used )"	1458:6:37108:37155	1273933	1	True				
ANR	1274401	CallExpression	"write_case ( out , lower , lower_used , ! upper_used )"		1273933	0					
ANR	1274402	Callee	write_case		1273933	0					
ANR	1274403	Identifier	write_case		1273933	0					
ANR	1274404	ArgumentList	out		1273933	1					
ANR	1274405	Argument	out		1273933	0					
ANR	1274406	Identifier	out		1273933	0					
ANR	1274407	Argument	lower		1273933	1					
ANR	1274408	Identifier	lower		1273933	0					
ANR	1274409	Argument	lower_used		1273933	2					
ANR	1274410	Identifier	lower_used		1273933	0					
ANR	1274411	Argument	! upper_used		1273933	3					
ANR	1274412	UnaryOperationExpression	! upper_used		1273933	0					
ANR	1274413	UnaryOperator	!		1273933	0					
ANR	1274414	Identifier	upper_used		1273933	1					
ANR	1274415	IfStatement	if ( title_used > 0 )		1273933	136					
ANR	1274416	Condition	title_used > 0	1460:8:37166:37179	1273933	0	True				
ANR	1274417	RelationalExpression	title_used > 0		1273933	0		>			
ANR	1274418	Identifier	title_used		1273933	0					
ANR	1274419	PrimaryExpression	0		1273933	1					
ANR	1274420	ExpressionStatement	"write_case ( out , title , title_used , ! ( upper_used || lower_used ) )"	1464:6:37244:37305	1273933	1	True				
ANR	1274421	CallExpression	"write_case ( out , title , title_used , ! ( upper_used || lower_used ) )"		1273933	0					
ANR	1274422	Callee	write_case		1273933	0					
ANR	1274423	Identifier	write_case		1273933	0					
ANR	1274424	ArgumentList	out		1273933	1					
ANR	1274425	Argument	out		1273933	0					
ANR	1274426	Identifier	out		1273933	0					
ANR	1274427	Argument	title		1273933	1					
ANR	1274428	Identifier	title		1273933	0					
ANR	1274429	Argument	title_used		1273933	2					
ANR	1274430	Identifier	title_used		1273933	0					
ANR	1274431	Argument	! ( upper_used || lower_used )		1273933	3					
ANR	1274432	UnaryOperationExpression	! ( upper_used || lower_used )		1273933	0					
ANR	1274433	UnaryOperator	!		1273933	0					
ANR	1274434	OrExpression	upper_used || lower_used		1273933	1		||			
ANR	1274435	Identifier	upper_used		1273933	0					
ANR	1274436	Identifier	lower_used		1273933	1					
ANR	1274437	IfStatement	if ( ! ( upper_used || lower_used || title_used ) )		1273933	137					
ANR	1274438	Condition	! ( upper_used || lower_used || title_used )	1466:8:37316:37356	1273933	0	True				
ANR	1274439	UnaryOperationExpression	! ( upper_used || lower_used || title_used )		1273933	0					
ANR	1274440	UnaryOperator	!		1273933	0					
ANR	1274441	OrExpression	upper_used || lower_used || title_used		1273933	1		||			
ANR	1274442	Identifier	upper_used		1273933	0					
ANR	1274443	OrExpression	lower_used || title_used		1273933	1		||			
ANR	1274444	Identifier	lower_used		1273933	0					
ANR	1274445	Identifier	title_used		1273933	1					
ANR	1274446	ExpressionStatement	"fprintf ( out , ""\\t0"" )"	1467:1:37360:37379	1273933	1	True				
ANR	1274447	CallExpression	"fprintf ( out , ""\\t0"" )"		1273933	0					
ANR	1274448	Callee	fprintf		1273933	0					
ANR	1274449	Identifier	fprintf		1273933	0					
ANR	1274450	ArgumentList	out		1273933	1					
ANR	1274451	Argument	out		1273933	0					
ANR	1274452	Identifier	out		1273933	0					
ANR	1274453	Argument	"""\\t0"""		1273933	1					
ANR	1274454	PrimaryExpression	"""\\t0"""		1273933	0					
ANR	1274455	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1469:4:37386:37410	1273933	138	True				
ANR	1274456	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		1273933	0					
ANR	1274457	Callee	fprintf		1273933	0					
ANR	1274458	Identifier	fprintf		1273933	0					
ANR	1274459	ArgumentList	out		1273933	1					
ANR	1274460	Argument	out		1273933	0					
ANR	1274461	Identifier	out		1273933	0					
ANR	1274462	Argument	"""\\n};\\n\\n"""		1273933	1					
ANR	1274463	PrimaryExpression	"""\\n};\\n\\n"""		1273933	0					
ANR	1274464	ExpressionStatement	create_comps ( )	1527:4:38700:38714	1273933	139	True				
ANR	1274465	CallExpression	create_comps ( )		1273933	0					
ANR	1274466	Callee	create_comps		1273933	0					
ANR	1274467	Identifier	create_comps		1273933	0					
ANR	1274468	ArgumentList			1273933	1					
ANR	1274469	Statement	fprintf	1530:4:38739:38745	1273933	140	True				
ANR	1274470	Statement	(	1530:11:38746:38746	1273933	141	True				
ANR	1274471	Statement	out	1530:12:38747:38749	1273933	142	True				
ANR	1274472	Statement	","	1530:15:38750:38750	1273933	143	True				
ANR	1274473	Statement	PREF	1530:17:38752:38755	1273933	144	True				
ANR	1274474	Statement	"""ac_uint4 _uccomp_size = %ld;\\n\\n"""	1530:22:38757:38790	1273933	145	True				
ANR	1274475	Statement	","	1530:56:38791:38791	1273933	146	True				
ANR	1274476	Statement	comps_used	1531:8:38801:38810	1273933	147	True				
ANR	1274477	Statement	*	1531:19:38812:38812	1273933	148	True				
ANR	1274478	Statement	4L	1531:21:38814:38815	1273933	149	True				
ANR	1274479	Statement	)	1531:23:38816:38816	1273933	150	True				
ANR	1274480	ExpressionStatement		1531:24:38817:38817	1273933	151	True				
ANR	1274481	Statement	fprintf	1533:4:38824:38830	1273933	152	True				
ANR	1274482	Statement	(	1533:11:38831:38831	1273933	153	True				
ANR	1274483	Statement	out	1533:12:38832:38834	1273933	154	True				
ANR	1274484	Statement	","	1533:15:38835:38835	1273933	155	True				
ANR	1274485	Statement	PREF	1533:17:38837:38840	1273933	156	True				
ANR	1274486	Statement	"""ac_uint4 _uccomp_data[] = {"""	1533:22:38842:38870	1273933	157	True				
ANR	1274487	Statement	)	1533:51:38871:38871	1273933	158	True				
ANR	1274488	ExpressionStatement		1533:52:38872:38872	1273933	159	True				
ANR	1274489	IfStatement	if ( comps_used > 0 )		1273933	160					
ANR	1274490	Condition	comps_used > 0	1538:8:38945:38958	1273933	0	True				
ANR	1274491	RelationalExpression	comps_used > 0		1273933	0		>			
ANR	1274492	Identifier	comps_used		1273933	0					
ANR	1274493	PrimaryExpression	0		1273933	1					
ANR	1274494	CompoundStatement		243:24:6520:6520	1273933	1					
ANR	1274495	ForStatement	for ( i = 0 ; i < comps_used ; i ++ )		1273933	0					
ANR	1274496	ForInit	i = 0 ;	1539:6:38969:38972	1273933	0	True				
ANR	1274497	AssignmentExpression	i = 0		1273933	0		=			
ANR	1274498	Identifier	i		1273933	0					
ANR	1274499	PrimaryExpression	0		1273933	1					
ANR	1274500	Condition	i < comps_used	1539:11:38974:38985	1273933	1	True				
ANR	1274501	RelationalExpression	i < comps_used		1273933	0		<			
ANR	1274502	Identifier	i		1273933	0					
ANR	1274503	Identifier	comps_used		1273933	1					
ANR	1274504	PostIncDecOperationExpression	i ++	1539:25:38988:38990	1273933	2	True				
ANR	1274505	Identifier	i		1273933	0					
ANR	1274506	IncDec	++		1273933	1					
ANR	1274507	CompoundStatement		244:30:6552:6552	1273933	3					
ANR	1274508	IfStatement	if ( i )		1273933	0					
ANR	1274509	Condition	i	1540:9:39004:39004	1273933	0	True				
ANR	1274510	Identifier	i		1273933	0					
ANR	1274511	ExpressionStatement	"fprintf ( out , "","" )"	1540:12:39007:39024	1273933	1	True				
ANR	1274512	CallExpression	"fprintf ( out , "","" )"		1273933	0					
ANR	1274513	Callee	fprintf		1273933	0					
ANR	1274514	Identifier	fprintf		1273933	0					
ANR	1274515	ArgumentList	out		1273933	1					
ANR	1274516	Argument	out		1273933	0					
ANR	1274517	Identifier	out		1273933	0					
ANR	1274518	Argument	""","""		1273933	1					
ANR	1274519	PrimaryExpression	""","""		1273933	0					
ANR	1274520	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx"" , ( unsigned long ) comps [ i ] . comp , ( unsigned long ) comps [ i ] . count , ( unsigned long ) comps [ i ] . code1 , ( unsigned long ) comps [ i ] . code2 )"	1541:5:39031:39230	1273933	1	True				
ANR	1274521	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx"" , ( unsigned long ) comps [ i ] . comp , ( unsigned long ) comps [ i ] . count , ( unsigned long ) comps [ i ] . code1 , ( unsigned long ) comps [ i ] . code2 )"		1273933	0					
ANR	1274522	Callee	fprintf		1273933	0					
ANR	1274523	Identifier	fprintf		1273933	0					
ANR	1274524	ArgumentList	out		1273933	1					
ANR	1274525	Argument	out		1273933	0					
ANR	1274526	Identifier	out		1273933	0					
ANR	1274527	Argument	"""\\n\\t0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx"""		1273933	1					
ANR	1274528	PrimaryExpression	"""\\n\\t0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx"""		1273933	0					
ANR	1274529	Argument	( unsigned long ) comps [ i ] . comp		1273933	2					
ANR	1274530	CastExpression	( unsigned long ) comps [ i ] . comp		1273933	0					
ANR	1274531	CastTarget	unsigned long		1273933	0					
ANR	1274532	MemberAccess	comps [ i ] . comp		1273933	1					
ANR	1274533	ArrayIndexing	comps [ i ]		1273933	0					
ANR	1274534	Identifier	comps		1273933	0					
ANR	1274535	Identifier	i		1273933	1					
ANR	1274536	Identifier	comp		1273933	1					
ANR	1274537	Argument	( unsigned long ) comps [ i ] . count		1273933	3					
ANR	1274538	CastExpression	( unsigned long ) comps [ i ] . count		1273933	0					
ANR	1274539	CastTarget	unsigned long		1273933	0					
ANR	1274540	MemberAccess	comps [ i ] . count		1273933	1					
ANR	1274541	ArrayIndexing	comps [ i ]		1273933	0					
ANR	1274542	Identifier	comps		1273933	0					
ANR	1274543	Identifier	i		1273933	1					
ANR	1274544	Identifier	count		1273933	1					
ANR	1274545	Argument	( unsigned long ) comps [ i ] . code1		1273933	4					
ANR	1274546	CastExpression	( unsigned long ) comps [ i ] . code1		1273933	0					
ANR	1274547	CastTarget	unsigned long		1273933	0					
ANR	1274548	MemberAccess	comps [ i ] . code1		1273933	1					
ANR	1274549	ArrayIndexing	comps [ i ]		1273933	0					
ANR	1274550	Identifier	comps		1273933	0					
ANR	1274551	Identifier	i		1273933	1					
ANR	1274552	Identifier	code1		1273933	1					
ANR	1274553	Argument	( unsigned long ) comps [ i ] . code2		1273933	5					
ANR	1274554	CastExpression	( unsigned long ) comps [ i ] . code2		1273933	0					
ANR	1274555	CastTarget	unsigned long		1273933	0					
ANR	1274556	MemberAccess	comps [ i ] . code2		1273933	1					
ANR	1274557	ArrayIndexing	comps [ i ]		1273933	0					
ANR	1274558	Identifier	comps		1273933	0					
ANR	1274559	Identifier	i		1273933	1					
ANR	1274560	Identifier	code2		1273933	1					
ANR	1274561	ElseStatement	else		1273933	0					
ANR	1274562	CompoundStatement		250:11:6805:6805	1273933	0					
ANR	1274563	ExpressionStatement	"fprintf ( out , ""\\t0"" )"	1546:1:39249:39268	1273933	0	True				
ANR	1274564	CallExpression	"fprintf ( out , ""\\t0"" )"		1273933	0					
ANR	1274565	Callee	fprintf		1273933	0					
ANR	1274566	Identifier	fprintf		1273933	0					
ANR	1274567	ArgumentList	out		1273933	1					
ANR	1274568	Argument	out		1273933	0					
ANR	1274569	Identifier	out		1273933	0					
ANR	1274570	Argument	"""\\t0"""		1273933	1					
ANR	1274571	PrimaryExpression	"""\\t0"""		1273933	0					
ANR	1274572	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1548:4:39280:39304	1273933	161	True				
ANR	1274573	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		1273933	0					
ANR	1274574	Callee	fprintf		1273933	0					
ANR	1274575	Identifier	fprintf		1273933	0					
ANR	1274576	ArgumentList	out		1273933	1					
ANR	1274577	Argument	out		1273933	0					
ANR	1274578	Identifier	out		1273933	0					
ANR	1274579	Argument	"""\\n};\\n\\n"""		1273933	1					
ANR	1274580	PrimaryExpression	"""\\n};\\n\\n"""		1273933	0					
ANR	1274581	ExpressionStatement	expand_decomp ( )	1587:4:40246:40261	1273933	162	True				
ANR	1274582	CallExpression	expand_decomp ( )		1273933	0					
ANR	1274583	Callee	expand_decomp		1273933	0					
ANR	1274584	Identifier	expand_decomp		1273933	0					
ANR	1274585	ArgumentList			1273933	1					
ANR	1274586	Statement	fprintf	1590:4:40286:40292	1273933	163	True				
ANR	1274587	Statement	(	1590:11:40293:40293	1273933	164	True				
ANR	1274588	Statement	out	1590:12:40294:40296	1273933	165	True				
ANR	1274589	Statement	","	1590:15:40297:40297	1273933	166	True				
ANR	1274590	Statement	PREF	1590:17:40299:40302	1273933	167	True				
ANR	1274591	Statement	"""ac_uint4 _ucdcmp_size = %ld;\\n\\n"""	1590:22:40304:40337	1273933	168	True				
ANR	1274592	Statement	","	1590:56:40338:40338	1273933	169	True				
ANR	1274593	Statement	decomps_used	1591:8:40348:40359	1273933	170	True				
ANR	1274594	Statement	*	1591:21:40361:40361	1273933	171	True				
ANR	1274595	Statement	2L	1591:23:40363:40364	1273933	172	True				
ANR	1274596	Statement	)	1591:25:40365:40365	1273933	173	True				
ANR	1274597	ExpressionStatement		1591:26:40366:40366	1273933	174	True				
ANR	1274598	Statement	fprintf	1593:4:40373:40379	1273933	175	True				
ANR	1274599	Statement	(	1593:11:40380:40380	1273933	176	True				
ANR	1274600	Statement	out	1593:12:40381:40383	1273933	177	True				
ANR	1274601	Statement	","	1593:15:40384:40384	1273933	178	True				
ANR	1274602	Statement	PREF	1593:17:40386:40389	1273933	179	True				
ANR	1274603	Statement	"""ac_uint4 _ucdcmp_nodes[] = {"""	1593:22:40391:40420	1273933	180	True				
ANR	1274604	Statement	)	1593:52:40421:40421	1273933	181	True				
ANR	1274605	ExpressionStatement		1593:53:40422:40422	1273933	182	True				
ANR	1274606	IfStatement	if ( decomps_used )		1273933	183					
ANR	1274607	Condition	decomps_used	1595:8:40433:40444	1273933	0	True				
ANR	1274608	Identifier	decomps_used		1273933	0					
ANR	1274609	CompoundStatement		300:22:8006:8006	1273933	1					
ANR	1274610	ForStatement	for ( i = idx = 0 ; i < decomps_used ; i ++ )		1273933	0					
ANR	1274611	ForInit	i = idx = 0 ;	1599:6:40500:40511	1273933	0	True				
ANR	1274612	AssignmentExpression	i = idx = 0		1273933	0		=			
ANR	1274613	Identifier	i		1273933	0					
ANR	1274614	AssignmentExpression	idx = 0		1273933	1		=			
ANR	1274615	Identifier	idx		1273933	0					
ANR	1274616	PrimaryExpression	0		1273933	1					
ANR	1274617	Condition	i < decomps_used	1599:19:40513:40528	1273933	1	True				
ANR	1274618	RelationalExpression	i < decomps_used		1273933	0		<			
ANR	1274619	Identifier	i		1273933	0					
ANR	1274620	Identifier	decomps_used		1273933	1					
ANR	1274621	PostIncDecOperationExpression	i ++	1599:37:40531:40533	1273933	2	True				
ANR	1274622	Identifier	i		1273933	0					
ANR	1274623	IncDec	++		1273933	1					
ANR	1274624	CompoundStatement		304:42:8095:8095	1273933	3					
ANR	1274625	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx,"" , ( unsigned long ) decomps [ i ] . code , ( unsigned long ) idx )"	1600:5:40543:40643	1273933	0	True				
ANR	1274626	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx,"" , ( unsigned long ) decomps [ i ] . code , ( unsigned long ) idx )"		1273933	0					
ANR	1274627	Callee	fprintf		1273933	0					
ANR	1274628	Identifier	fprintf		1273933	0					
ANR	1274629	ArgumentList	out		1273933	1					
ANR	1274630	Argument	out		1273933	0					
ANR	1274631	Identifier	out		1273933	0					
ANR	1274632	Argument	"""\\n\\t0x%08lx, 0x%08lx,"""		1273933	1					
ANR	1274633	PrimaryExpression	"""\\n\\t0x%08lx, 0x%08lx,"""		1273933	0					
ANR	1274634	Argument	( unsigned long ) decomps [ i ] . code		1273933	2					
ANR	1274635	CastExpression	( unsigned long ) decomps [ i ] . code		1273933	0					
ANR	1274636	CastTarget	unsigned long		1273933	0					
ANR	1274637	MemberAccess	decomps [ i ] . code		1273933	1					
ANR	1274638	ArrayIndexing	decomps [ i ]		1273933	0					
ANR	1274639	Identifier	decomps		1273933	0					
ANR	1274640	Identifier	i		1273933	1					
ANR	1274641	Identifier	code		1273933	1					
ANR	1274642	Argument	( unsigned long ) idx		1273933	3					
ANR	1274643	CastExpression	( unsigned long ) idx		1273933	0					
ANR	1274644	CastTarget	unsigned long		1273933	0					
ANR	1274645	Identifier	idx		1273933	1					
ANR	1274646	ExpressionStatement	idx += decomps [ i ] . used	1602:5:40650:40672	1273933	1	True				
ANR	1274647	AssignmentExpression	idx += decomps [ i ] . used		1273933	0		+=			
ANR	1274648	Identifier	idx		1273933	0					
ANR	1274649	MemberAccess	decomps [ i ] . used		1273933	1					
ANR	1274650	ArrayIndexing	decomps [ i ]		1273933	0					
ANR	1274651	Identifier	decomps		1273933	0					
ANR	1274652	Identifier	i		1273933	1					
ANR	1274653	Identifier	used		1273933	1					
ANR	1274654	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx\\n};\\n\\n"" , ( unsigned long ) idx )"	1608:1:40742:40798	1273933	1	True				
ANR	1274655	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx\\n};\\n\\n"" , ( unsigned long ) idx )"		1273933	0					
ANR	1274656	Callee	fprintf		1273933	0					
ANR	1274657	Identifier	fprintf		1273933	0					
ANR	1274658	ArgumentList	out		1273933	1					
ANR	1274659	Argument	out		1273933	0					
ANR	1274660	Identifier	out		1273933	0					
ANR	1274661	Argument	"""\\n\\t0x%08lx\\n};\\n\\n"""		1273933	1					
ANR	1274662	PrimaryExpression	"""\\n\\t0x%08lx\\n};\\n\\n"""		1273933	0					
ANR	1274663	Argument	( unsigned long ) idx		1273933	2					
ANR	1274664	CastExpression	( unsigned long ) idx		1273933	0					
ANR	1274665	CastTarget	unsigned long		1273933	0					
ANR	1274666	Identifier	idx		1273933	1					
ANR	1274667	Statement	fprintf	1610:1:40802:40808	1273933	2	True				
ANR	1274668	Statement	(	1610:8:40809:40809	1273933	3	True				
ANR	1274669	Statement	out	1610:9:40810:40812	1273933	4	True				
ANR	1274670	Statement	","	1610:12:40813:40813	1273933	5	True				
ANR	1274671	Statement	PREF	1610:14:40815:40818	1273933	6	True				
ANR	1274672	Statement	"""ac_uint4 _ucdcmp_decomp[] = {"""	1610:19:40820:40850	1273933	7	True				
ANR	1274673	Statement	)	1610:50:40851:40851	1273933	8	True				
ANR	1274674	ExpressionStatement		1610:51:40852:40852	1273933	9	True				
ANR	1274675	ExpressionStatement	k = 0	1614:1:40905:40910	1273933	10	True				
ANR	1274676	AssignmentExpression	k = 0		1273933	0		=			
ANR	1274677	Identifier	k		1273933	0					
ANR	1274678	PrimaryExpression	0		1273933	1					
ANR	1274679	ForStatement	for ( i = 0 ; i < decomps_used ; i ++ )		1273933	11					
ANR	1274680	ForInit	i = 0 ;	1615:6:40918:40923	1273933	0	True				
ANR	1274681	AssignmentExpression	i = 0		1273933	0		=			
ANR	1274682	Identifier	i		1273933	0					
ANR	1274683	PrimaryExpression	0		1273933	1					
ANR	1274684	Condition	i < decomps_used	1615:13:40925:40940	1273933	1	True				
ANR	1274685	RelationalExpression	i < decomps_used		1273933	0		<			
ANR	1274686	Identifier	i		1273933	0					
ANR	1274687	Identifier	decomps_used		1273933	1					
ANR	1274688	PostIncDecOperationExpression	i ++	1615:31:40943:40945	1273933	2	True				
ANR	1274689	Identifier	i		1273933	0					
ANR	1274690	IncDec	++		1273933	1					
ANR	1274691	ForStatement	for ( j = 0 ; j < decomps [ i ] . used ; j ++ )		1273933	3					
ANR	1274692	ForInit	j = 0 ;	1616:8:40956:40959	1273933	0	True				
ANR	1274693	AssignmentExpression	j = 0		1273933	0		=			
ANR	1274694	Identifier	j		1273933	0					
ANR	1274695	PrimaryExpression	0		1273933	1					
ANR	1274696	Condition	j < decomps [ i ] . used	1616:13:40961:40977	1273933	1	True				
ANR	1274697	RelationalExpression	j < decomps [ i ] . used		1273933	0		<			
ANR	1274698	Identifier	j		1273933	0					
ANR	1274699	MemberAccess	decomps [ i ] . used		1273933	1					
ANR	1274700	ArrayIndexing	decomps [ i ]		1273933	0					
ANR	1274701	Identifier	decomps		1273933	0					
ANR	1274702	Identifier	i		1273933	1					
ANR	1274703	Identifier	used		1273933	1					
ANR	1274704	PostIncDecOperationExpression	j ++	1616:32:40980:40982	1273933	2	True				
ANR	1274705	Identifier	j		1273933	0					
ANR	1274706	IncDec	++		1273933	1					
ANR	1274707	CompoundStatement		321:37:8544:8544	1273933	3					
ANR	1274708	IfStatement	if ( k )		1273933	0					
ANR	1274709	Condition	k	1617:9:40996:40996	1273933	0	True				
ANR	1274710	Identifier	k		1273933	0					
ANR	1274711	ExpressionStatement	"fprintf ( out , "","" )"	1617:12:40999:41016	1273933	1	True				
ANR	1274712	CallExpression	"fprintf ( out , "","" )"		1273933	0					
ANR	1274713	Callee	fprintf		1273933	0					
ANR	1274714	Identifier	fprintf		1273933	0					
ANR	1274715	ArgumentList	out		1273933	1					
ANR	1274716	Argument	out		1273933	0					
ANR	1274717	Identifier	out		1273933	0					
ANR	1274718	Argument	""","""		1273933	1					
ANR	1274719	PrimaryExpression	""","""		1273933	0					
ANR	1274720	IfStatement	if ( ! ( k & 3 ) )		1273933	1					
ANR	1274721	Condition	! ( k & 3 )	1618:9:41027:41032	1273933	0	True				
ANR	1274722	UnaryOperationExpression	! ( k & 3 )		1273933	0					
ANR	1274723	UnaryOperator	!		1273933	0					
ANR	1274724	BitAndExpression	k & 3		1273933	1		&			
ANR	1274725	Identifier	k		1273933	0					
ANR	1274726	PrimaryExpression	3		1273933	1					
ANR	1274727	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1618:17:41035:41054	1273933	1	True				
ANR	1274728	CallExpression	"fprintf ( out , ""\\n\\t"" )"		1273933	0					
ANR	1274729	Callee	fprintf		1273933	0					
ANR	1274730	Identifier	fprintf		1273933	0					
ANR	1274731	ArgumentList	out		1273933	1					
ANR	1274732	Argument	out		1273933	0					
ANR	1274733	Identifier	out		1273933	0					
ANR	1274734	Argument	"""\\n\\t"""		1273933	1					
ANR	1274735	PrimaryExpression	"""\\n\\t"""		1273933	0					
ANR	1274736	ElseStatement	else		1273933	0					
ANR	1274737	ExpressionStatement	"fprintf ( out , "" "" )"	1619:10:41066:41083	1273933	0	True				
ANR	1274738	CallExpression	"fprintf ( out , "" "" )"		1273933	0					
ANR	1274739	Callee	fprintf		1273933	0					
ANR	1274740	Identifier	fprintf		1273933	0					
ANR	1274741	ArgumentList	out		1273933	1					
ANR	1274742	Argument	out		1273933	0					
ANR	1274743	Identifier	out		1273933	0					
ANR	1274744	Argument	""" """		1273933	1					
ANR	1274745	PrimaryExpression	""" """		1273933	0					
ANR	1274746	ExpressionStatement	k ++	1620:5:41090:41093	1273933	2	True				
ANR	1274747	PostIncDecOperationExpression	k ++		1273933	0					
ANR	1274748	Identifier	k		1273933	0					
ANR	1274749	IncDec	++		1273933	1					
ANR	1274750	ExpressionStatement	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) decomps [ i ] . decomp [ j ] )"	1621:5:41100:41161	1273933	3	True				
ANR	1274751	CallExpression	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) decomps [ i ] . decomp [ j ] )"		1273933	0					
ANR	1274752	Callee	fprintf		1273933	0					
ANR	1274753	Identifier	fprintf		1273933	0					
ANR	1274754	ArgumentList	out		1273933	1					
ANR	1274755	Argument	out		1273933	0					
ANR	1274756	Identifier	out		1273933	0					
ANR	1274757	Argument	"""0x%08lx"""		1273933	1					
ANR	1274758	PrimaryExpression	"""0x%08lx"""		1273933	0					
ANR	1274759	Argument	( unsigned long ) decomps [ i ] . decomp [ j ]		1273933	2					
ANR	1274760	CastExpression	( unsigned long ) decomps [ i ] . decomp [ j ]		1273933	0					
ANR	1274761	CastTarget	unsigned long		1273933	0					
ANR	1274762	ArrayIndexing	decomps [ i ] . decomp [ j ]		1273933	1					
ANR	1274763	MemberAccess	decomps [ i ] . decomp		1273933	0					
ANR	1274764	ArrayIndexing	decomps [ i ]		1273933	0					
ANR	1274765	Identifier	decomps		1273933	0					
ANR	1274766	Identifier	i		1273933	1					
ANR	1274767	Identifier	decomp		1273933	1					
ANR	1274768	Identifier	j		1273933	1					
ANR	1274769	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1623:1:41169:41193	1273933	12	True				
ANR	1274770	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		1273933	0					
ANR	1274771	Callee	fprintf		1273933	0					
ANR	1274772	Identifier	fprintf		1273933	0					
ANR	1274773	ArgumentList	out		1273933	1					
ANR	1274774	Argument	out		1273933	0					
ANR	1274775	Identifier	out		1273933	0					
ANR	1274776	Argument	"""\\n};\\n\\n"""		1273933	1					
ANR	1274777	PrimaryExpression	"""\\n};\\n\\n"""		1273933	0					
ANR	1274778	Statement	fprintf	1682:4:42728:42734	1273933	184	True				
ANR	1274779	Statement	(	1682:11:42735:42735	1273933	185	True				
ANR	1274780	Statement	out	1682:12:42736:42738	1273933	186	True				
ANR	1274781	Statement	","	1682:15:42739:42739	1273933	187	True				
ANR	1274782	Statement	PREF	1682:17:42741:42744	1273933	188	True				
ANR	1274783	Statement	"""ac_uint4 _uckdcmp_size = %ld;\\n\\n"""	1682:22:42746:42780	1273933	189	True				
ANR	1274784	Statement	","	1682:57:42781:42781	1273933	190	True				
ANR	1274785	Statement	kdecomps_used	1683:8:42791:42803	1273933	191	True				
ANR	1274786	Statement	*	1683:22:42805:42805	1273933	192	True				
ANR	1274787	Statement	2L	1683:24:42807:42808	1273933	193	True				
ANR	1274788	Statement	)	1683:26:42809:42809	1273933	194	True				
ANR	1274789	ExpressionStatement		1683:27:42810:42810	1273933	195	True				
ANR	1274790	Statement	fprintf	1685:4:42817:42823	1273933	196	True				
ANR	1274791	Statement	(	1685:11:42824:42824	1273933	197	True				
ANR	1274792	Statement	out	1685:12:42825:42827	1273933	198	True				
ANR	1274793	Statement	","	1685:15:42828:42828	1273933	199	True				
ANR	1274794	Statement	PREF	1685:17:42830:42833	1273933	200	True				
ANR	1274795	Statement	"""ac_uint4 _uckdcmp_nodes[] = {"""	1685:22:42835:42865	1273933	201	True				
ANR	1274796	Statement	)	1685:53:42866:42866	1273933	202	True				
ANR	1274797	ExpressionStatement		1685:54:42867:42867	1273933	203	True				
ANR	1274798	IfStatement	if ( kdecomps_used )		1273933	204					
ANR	1274799	Condition	kdecomps_used	1687:8:42878:42890	1273933	0	True				
ANR	1274800	Identifier	kdecomps_used		1273933	0					
ANR	1274801	CompoundStatement		392:23:10452:10452	1273933	1					
ANR	1274802	ForStatement	for ( i = idx = 0 ; i < kdecomps_used ; i ++ )		1273933	0					
ANR	1274803	ForInit	i = idx = 0 ;	1691:6:42947:42958	1273933	0	True				
ANR	1274804	AssignmentExpression	i = idx = 0		1273933	0		=			
ANR	1274805	Identifier	i		1273933	0					
ANR	1274806	AssignmentExpression	idx = 0		1273933	1		=			
ANR	1274807	Identifier	idx		1273933	0					
ANR	1274808	PrimaryExpression	0		1273933	1					
ANR	1274809	Condition	i < kdecomps_used	1691:19:42960:42976	1273933	1	True				
ANR	1274810	RelationalExpression	i < kdecomps_used		1273933	0		<			
ANR	1274811	Identifier	i		1273933	0					
ANR	1274812	Identifier	kdecomps_used		1273933	1					
ANR	1274813	PostIncDecOperationExpression	i ++	1691:38:42979:42981	1273933	2	True				
ANR	1274814	Identifier	i		1273933	0					
ANR	1274815	IncDec	++		1273933	1					
ANR	1274816	CompoundStatement		396:43:10543:10543	1273933	3					
ANR	1274817	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx,"" , ( unsigned long ) kdecomps [ i ] . code , ( unsigned long ) idx )"	1692:5:42991:43092	1273933	0	True				
ANR	1274818	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx, 0x%08lx,"" , ( unsigned long ) kdecomps [ i ] . code , ( unsigned long ) idx )"		1273933	0					
ANR	1274819	Callee	fprintf		1273933	0					
ANR	1274820	Identifier	fprintf		1273933	0					
ANR	1274821	ArgumentList	out		1273933	1					
ANR	1274822	Argument	out		1273933	0					
ANR	1274823	Identifier	out		1273933	0					
ANR	1274824	Argument	"""\\n\\t0x%08lx, 0x%08lx,"""		1273933	1					
ANR	1274825	PrimaryExpression	"""\\n\\t0x%08lx, 0x%08lx,"""		1273933	0					
ANR	1274826	Argument	( unsigned long ) kdecomps [ i ] . code		1273933	2					
ANR	1274827	CastExpression	( unsigned long ) kdecomps [ i ] . code		1273933	0					
ANR	1274828	CastTarget	unsigned long		1273933	0					
ANR	1274829	MemberAccess	kdecomps [ i ] . code		1273933	1					
ANR	1274830	ArrayIndexing	kdecomps [ i ]		1273933	0					
ANR	1274831	Identifier	kdecomps		1273933	0					
ANR	1274832	Identifier	i		1273933	1					
ANR	1274833	Identifier	code		1273933	1					
ANR	1274834	Argument	( unsigned long ) idx		1273933	3					
ANR	1274835	CastExpression	( unsigned long ) idx		1273933	0					
ANR	1274836	CastTarget	unsigned long		1273933	0					
ANR	1274837	Identifier	idx		1273933	1					
ANR	1274838	ExpressionStatement	idx += kdecomps [ i ] . used	1694:5:43099:43122	1273933	1	True				
ANR	1274839	AssignmentExpression	idx += kdecomps [ i ] . used		1273933	0		+=			
ANR	1274840	Identifier	idx		1273933	0					
ANR	1274841	MemberAccess	kdecomps [ i ] . used		1273933	1					
ANR	1274842	ArrayIndexing	kdecomps [ i ]		1273933	0					
ANR	1274843	Identifier	kdecomps		1273933	0					
ANR	1274844	Identifier	i		1273933	1					
ANR	1274845	Identifier	used		1273933	1					
ANR	1274846	ExpressionStatement	"fprintf ( out , ""\\n\\t0x%08lx\\n};\\n\\n"" , ( unsigned long ) idx )"	1700:1:43192:43248	1273933	1	True				
ANR	1274847	CallExpression	"fprintf ( out , ""\\n\\t0x%08lx\\n};\\n\\n"" , ( unsigned long ) idx )"		1273933	0					
ANR	1274848	Callee	fprintf		1273933	0					
ANR	1274849	Identifier	fprintf		1273933	0					
ANR	1274850	ArgumentList	out		1273933	1					
ANR	1274851	Argument	out		1273933	0					
ANR	1274852	Identifier	out		1273933	0					
ANR	1274853	Argument	"""\\n\\t0x%08lx\\n};\\n\\n"""		1273933	1					
ANR	1274854	PrimaryExpression	"""\\n\\t0x%08lx\\n};\\n\\n"""		1273933	0					
ANR	1274855	Argument	( unsigned long ) idx		1273933	2					
ANR	1274856	CastExpression	( unsigned long ) idx		1273933	0					
ANR	1274857	CastTarget	unsigned long		1273933	0					
ANR	1274858	Identifier	idx		1273933	1					
ANR	1274859	Statement	fprintf	1702:1:43252:43258	1273933	2	True				
ANR	1274860	Statement	(	1702:8:43259:43259	1273933	3	True				
ANR	1274861	Statement	out	1702:9:43260:43262	1273933	4	True				
ANR	1274862	Statement	","	1702:12:43263:43263	1273933	5	True				
ANR	1274863	Statement	PREF	1702:14:43265:43268	1273933	6	True				
ANR	1274864	Statement	"""ac_uint4 _uckdcmp_decomp[] = {"""	1702:19:43270:43301	1273933	7	True				
ANR	1274865	Statement	)	1702:51:43302:43302	1273933	8	True				
ANR	1274866	ExpressionStatement		1702:52:43303:43303	1273933	9	True				
ANR	1274867	ExpressionStatement	k = 0	1707:1:43357:43362	1273933	10	True				
ANR	1274868	AssignmentExpression	k = 0		1273933	0		=			
ANR	1274869	Identifier	k		1273933	0					
ANR	1274870	PrimaryExpression	0		1273933	1					
ANR	1274871	ForStatement	for ( i = 0 ; i < kdecomps_used ; i ++ )		1273933	11					
ANR	1274872	ForInit	i = 0 ;	1708:6:43370:43375	1273933	0	True				
ANR	1274873	AssignmentExpression	i = 0		1273933	0		=			
ANR	1274874	Identifier	i		1273933	0					
ANR	1274875	PrimaryExpression	0		1273933	1					
ANR	1274876	Condition	i < kdecomps_used	1708:13:43377:43393	1273933	1	True				
ANR	1274877	RelationalExpression	i < kdecomps_used		1273933	0		<			
ANR	1274878	Identifier	i		1273933	0					
ANR	1274879	Identifier	kdecomps_used		1273933	1					
ANR	1274880	PostIncDecOperationExpression	i ++	1708:32:43396:43398	1273933	2	True				
ANR	1274881	Identifier	i		1273933	0					
ANR	1274882	IncDec	++		1273933	1					
ANR	1274883	ForStatement	for ( j = 0 ; j < kdecomps [ i ] . used ; j ++ )		1273933	3					
ANR	1274884	ForInit	j = 0 ;	1709:8:43409:43412	1273933	0	True				
ANR	1274885	AssignmentExpression	j = 0		1273933	0		=			
ANR	1274886	Identifier	j		1273933	0					
ANR	1274887	PrimaryExpression	0		1273933	1					
ANR	1274888	Condition	j < kdecomps [ i ] . used	1709:13:43414:43431	1273933	1	True				
ANR	1274889	RelationalExpression	j < kdecomps [ i ] . used		1273933	0		<			
ANR	1274890	Identifier	j		1273933	0					
ANR	1274891	MemberAccess	kdecomps [ i ] . used		1273933	1					
ANR	1274892	ArrayIndexing	kdecomps [ i ]		1273933	0					
ANR	1274893	Identifier	kdecomps		1273933	0					
ANR	1274894	Identifier	i		1273933	1					
ANR	1274895	Identifier	used		1273933	1					
ANR	1274896	PostIncDecOperationExpression	j ++	1709:33:43434:43436	1273933	2	True				
ANR	1274897	Identifier	j		1273933	0					
ANR	1274898	IncDec	++		1273933	1					
ANR	1274899	CompoundStatement		414:38:10998:10998	1273933	3					
ANR	1274900	IfStatement	if ( k )		1273933	0					
ANR	1274901	Condition	k	1710:9:43450:43450	1273933	0	True				
ANR	1274902	Identifier	k		1273933	0					
ANR	1274903	ExpressionStatement	"fprintf ( out , "","" )"	1710:12:43453:43470	1273933	1	True				
ANR	1274904	CallExpression	"fprintf ( out , "","" )"		1273933	0					
ANR	1274905	Callee	fprintf		1273933	0					
ANR	1274906	Identifier	fprintf		1273933	0					
ANR	1274907	ArgumentList	out		1273933	1					
ANR	1274908	Argument	out		1273933	0					
ANR	1274909	Identifier	out		1273933	0					
ANR	1274910	Argument	""","""		1273933	1					
ANR	1274911	PrimaryExpression	""","""		1273933	0					
ANR	1274912	IfStatement	if ( ! ( k & 3 ) )		1273933	1					
ANR	1274913	Condition	! ( k & 3 )	1711:9:43481:43486	1273933	0	True				
ANR	1274914	UnaryOperationExpression	! ( k & 3 )		1273933	0					
ANR	1274915	UnaryOperator	!		1273933	0					
ANR	1274916	BitAndExpression	k & 3		1273933	1		&			
ANR	1274917	Identifier	k		1273933	0					
ANR	1274918	PrimaryExpression	3		1273933	1					
ANR	1274919	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1711:17:43489:43508	1273933	1	True				
ANR	1274920	CallExpression	"fprintf ( out , ""\\n\\t"" )"		1273933	0					
ANR	1274921	Callee	fprintf		1273933	0					
ANR	1274922	Identifier	fprintf		1273933	0					
ANR	1274923	ArgumentList	out		1273933	1					
ANR	1274924	Argument	out		1273933	0					
ANR	1274925	Identifier	out		1273933	0					
ANR	1274926	Argument	"""\\n\\t"""		1273933	1					
ANR	1274927	PrimaryExpression	"""\\n\\t"""		1273933	0					
ANR	1274928	ElseStatement	else		1273933	0					
ANR	1274929	ExpressionStatement	"fprintf ( out , "" "" )"	1712:10:43520:43537	1273933	0	True				
ANR	1274930	CallExpression	"fprintf ( out , "" "" )"		1273933	0					
ANR	1274931	Callee	fprintf		1273933	0					
ANR	1274932	Identifier	fprintf		1273933	0					
ANR	1274933	ArgumentList	out		1273933	1					
ANR	1274934	Argument	out		1273933	0					
ANR	1274935	Identifier	out		1273933	0					
ANR	1274936	Argument	""" """		1273933	1					
ANR	1274937	PrimaryExpression	""" """		1273933	0					
ANR	1274938	ExpressionStatement	k ++	1713:5:43544:43547	1273933	2	True				
ANR	1274939	PostIncDecOperationExpression	k ++		1273933	0					
ANR	1274940	Identifier	k		1273933	0					
ANR	1274941	IncDec	++		1273933	1					
ANR	1274942	ExpressionStatement	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) kdecomps [ i ] . decomp [ j ] )"	1714:5:43554:43616	1273933	3	True				
ANR	1274943	CallExpression	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) kdecomps [ i ] . decomp [ j ] )"		1273933	0					
ANR	1274944	Callee	fprintf		1273933	0					
ANR	1274945	Identifier	fprintf		1273933	0					
ANR	1274946	ArgumentList	out		1273933	1					
ANR	1274947	Argument	out		1273933	0					
ANR	1274948	Identifier	out		1273933	0					
ANR	1274949	Argument	"""0x%08lx"""		1273933	1					
ANR	1274950	PrimaryExpression	"""0x%08lx"""		1273933	0					
ANR	1274951	Argument	( unsigned long ) kdecomps [ i ] . decomp [ j ]		1273933	2					
ANR	1274952	CastExpression	( unsigned long ) kdecomps [ i ] . decomp [ j ]		1273933	0					
ANR	1274953	CastTarget	unsigned long		1273933	0					
ANR	1274954	ArrayIndexing	kdecomps [ i ] . decomp [ j ]		1273933	1					
ANR	1274955	MemberAccess	kdecomps [ i ] . decomp		1273933	0					
ANR	1274956	ArrayIndexing	kdecomps [ i ]		1273933	0					
ANR	1274957	Identifier	kdecomps		1273933	0					
ANR	1274958	Identifier	i		1273933	1					
ANR	1274959	Identifier	decomp		1273933	1					
ANR	1274960	Identifier	j		1273933	1					
ANR	1274961	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1716:1:43624:43648	1273933	12	True				
ANR	1274962	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		1273933	0					
ANR	1274963	Callee	fprintf		1273933	0					
ANR	1274964	Identifier	fprintf		1273933	0					
ANR	1274965	ArgumentList	out		1273933	1					
ANR	1274966	Argument	out		1273933	0					
ANR	1274967	Identifier	out		1273933	0					
ANR	1274968	Argument	"""\\n};\\n\\n"""		1273933	1					
ANR	1274969	PrimaryExpression	"""\\n};\\n\\n"""		1273933	0					
ANR	1274970	Statement	fprintf	1780:4:45393:45399	1273933	205	True				
ANR	1274971	Statement	(	1780:11:45400:45400	1273933	206	True				
ANR	1274972	Statement	out	1780:12:45401:45403	1273933	207	True				
ANR	1274973	Statement	","	1780:15:45404:45404	1273933	208	True				
ANR	1274974	Statement	PREF	1780:17:45406:45409	1273933	209	True				
ANR	1274975	Statement	"""ac_uint4 _uccmcl_size = %ld;\\n\\n"""	1780:22:45411:45444	1273933	210	True				
ANR	1274976	Statement	","	1780:56:45445:45445	1273933	211	True				
ANR	1274977	Statement	(	1780:58:45447:45447	1273933	212	True				
ANR	1274978	Statement	long	1780:59:45448:45451	1273933	213	True				
ANR	1274979	Statement	)	1780:63:45452:45452	1273933	214	True				
ANR	1274980	Statement	ccl_used	1780:65:45454:45461	1273933	215	True				
ANR	1274981	Statement	)	1780:73:45462:45462	1273933	216	True				
ANR	1274982	ExpressionStatement		1780:74:45463:45463	1273933	217	True				
ANR	1274983	Statement	fprintf	1782:4:45470:45476	1273933	218	True				
ANR	1274984	Statement	(	1782:11:45477:45477	1273933	219	True				
ANR	1274985	Statement	out	1782:12:45478:45480	1273933	220	True				
ANR	1274986	Statement	","	1782:15:45481:45481	1273933	221	True				
ANR	1274987	Statement	PREF	1782:17:45483:45486	1273933	222	True				
ANR	1274988	Statement	"""ac_uint4 _uccmcl_nodes[] = {"""	1782:22:45488:45517	1273933	223	True				
ANR	1274989	Statement	)	1782:52:45518:45518	1273933	224	True				
ANR	1274990	ExpressionStatement		1782:53:45519:45519	1273933	225	True				
ANR	1274991	IfStatement	if ( ccl_used > 0 )		1273933	226					
ANR	1274992	Condition	ccl_used > 0	1784:8:45530:45541	1273933	0	True				
ANR	1274993	RelationalExpression	ccl_used > 0		1273933	0		>			
ANR	1274994	Identifier	ccl_used		1273933	0					
ANR	1274995	PrimaryExpression	0		1273933	1					
ANR	1274996	CompoundStatement		489:22:13103:13103	1273933	1					
ANR	1274997	ForStatement	for ( i = 0 ; i < ccl_used ; i ++ )		1273933	0					
ANR	1274998	ForInit	i = 0 ;	1788:6:45603:45608	1273933	0	True				
ANR	1274999	AssignmentExpression	i = 0		1273933	0		=			
ANR	1275000	Identifier	i		1273933	0					
ANR	1275001	PrimaryExpression	0		1273933	1					
ANR	1275002	Condition	i < ccl_used	1788:13:45610:45619	1273933	1	True				
ANR	1275003	RelationalExpression	i < ccl_used		1273933	0		<			
ANR	1275004	Identifier	i		1273933	0					
ANR	1275005	Identifier	ccl_used		1273933	1					
ANR	1275006	PostIncDecOperationExpression	i ++	1788:25:45622:45624	1273933	2	True				
ANR	1275007	Identifier	i		1273933	0					
ANR	1275008	IncDec	++		1273933	1					
ANR	1275009	CompoundStatement		493:30:13186:13186	1273933	3					
ANR	1275010	IfStatement	if ( i )		1273933	0					
ANR	1275011	Condition	i	1789:9:45638:45638	1273933	0	True				
ANR	1275012	Identifier	i		1273933	0					
ANR	1275013	ExpressionStatement	"fprintf ( out , "","" )"	1789:12:45641:45658	1273933	1	True				
ANR	1275014	CallExpression	"fprintf ( out , "","" )"		1273933	0					
ANR	1275015	Callee	fprintf		1273933	0					
ANR	1275016	Identifier	fprintf		1273933	0					
ANR	1275017	ArgumentList	out		1273933	1					
ANR	1275018	Argument	out		1273933	0					
ANR	1275019	Identifier	out		1273933	0					
ANR	1275020	Argument	""","""		1273933	1					
ANR	1275021	PrimaryExpression	""","""		1273933	0					
ANR	1275022	IfStatement	if ( ! ( i & 3 ) )		1273933	1					
ANR	1275023	Condition	! ( i & 3 )	1790:9:45669:45674	1273933	0	True				
ANR	1275024	UnaryOperationExpression	! ( i & 3 )		1273933	0					
ANR	1275025	UnaryOperator	!		1273933	0					
ANR	1275026	BitAndExpression	i & 3		1273933	1		&			
ANR	1275027	Identifier	i		1273933	0					
ANR	1275028	PrimaryExpression	3		1273933	1					
ANR	1275029	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1790:17:45677:45697	1273933	1	True				
ANR	1275030	CallExpression	"fprintf ( out , ""\\n\\t"" )"		1273933	0					
ANR	1275031	Callee	fprintf		1273933	0					
ANR	1275032	Identifier	fprintf		1273933	0					
ANR	1275033	ArgumentList	out		1273933	1					
ANR	1275034	Argument	out		1273933	0					
ANR	1275035	Identifier	out		1273933	0					
ANR	1275036	Argument	"""\\n\\t"""		1273933	1					
ANR	1275037	PrimaryExpression	"""\\n\\t"""		1273933	0					
ANR	1275038	ElseStatement	else		1273933	0					
ANR	1275039	ExpressionStatement	"fprintf ( out , "" "" )"	1791:10:45709:45726	1273933	0	True				
ANR	1275040	CallExpression	"fprintf ( out , "" "" )"		1273933	0					
ANR	1275041	Callee	fprintf		1273933	0					
ANR	1275042	Identifier	fprintf		1273933	0					
ANR	1275043	ArgumentList	out		1273933	1					
ANR	1275044	Argument	out		1273933	0					
ANR	1275045	Identifier	out		1273933	0					
ANR	1275046	Argument	""" """		1273933	1					
ANR	1275047	PrimaryExpression	""" """		1273933	0					
ANR	1275048	ExpressionStatement	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) ccl [ i ] )"	1792:5:45733:45780	1273933	2	True				
ANR	1275049	CallExpression	"fprintf ( out , ""0x%08lx"" , ( unsigned long ) ccl [ i ] )"		1273933	0					
ANR	1275050	Callee	fprintf		1273933	0					
ANR	1275051	Identifier	fprintf		1273933	0					
ANR	1275052	ArgumentList	out		1273933	1					
ANR	1275053	Argument	out		1273933	0					
ANR	1275054	Identifier	out		1273933	0					
ANR	1275055	Argument	"""0x%08lx"""		1273933	1					
ANR	1275056	PrimaryExpression	"""0x%08lx"""		1273933	0					
ANR	1275057	Argument	( unsigned long ) ccl [ i ]		1273933	2					
ANR	1275058	CastExpression	( unsigned long ) ccl [ i ]		1273933	0					
ANR	1275059	CastTarget	unsigned long		1273933	0					
ANR	1275060	ArrayIndexing	ccl [ i ]		1273933	1					
ANR	1275061	Identifier	ccl		1273933	0					
ANR	1275062	Identifier	i		1273933	1					
ANR	1275063	ElseStatement	else		1273933	0					
ANR	1275064	CompoundStatement		499:11:13355:13355	1273933	0					
ANR	1275065	ExpressionStatement	"fprintf ( out , ""\\t0"" )"	1795:1:45799:45818	1273933	0	True				
ANR	1275066	CallExpression	"fprintf ( out , ""\\t0"" )"		1273933	0					
ANR	1275067	Callee	fprintf		1273933	0					
ANR	1275068	Identifier	fprintf		1273933	0					
ANR	1275069	ArgumentList	out		1273933	1					
ANR	1275070	Argument	out		1273933	0					
ANR	1275071	Identifier	out		1273933	0					
ANR	1275072	Argument	"""\\t0"""		1273933	1					
ANR	1275073	PrimaryExpression	"""\\t0"""		1273933	0					
ANR	1275074	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1797:4:45830:45854	1273933	227	True				
ANR	1275075	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		1273933	0					
ANR	1275076	Callee	fprintf		1273933	0					
ANR	1275077	Identifier	fprintf		1273933	0					
ANR	1275078	ArgumentList	out		1273933	1					
ANR	1275079	Argument	out		1273933	0					
ANR	1275080	Identifier	out		1273933	0					
ANR	1275081	Argument	"""\\n};\\n\\n"""		1273933	1					
ANR	1275082	PrimaryExpression	"""\\n};\\n\\n"""		1273933	0					
ANR	1275083	Statement	fprintf	1839:4:46843:46849	1273933	228	True				
ANR	1275084	Statement	(	1839:11:46850:46850	1273933	229	True				
ANR	1275085	Statement	out	1839:12:46851:46853	1273933	230	True				
ANR	1275086	Statement	","	1839:15:46854:46854	1273933	231	True				
ANR	1275087	Statement	PREF	1839:17:46856:46859	1273933	232	True				
ANR	1275088	Statement	"""ac_uint4 _ucnum_size = %lu;\\n\\n"""	1839:22:46861:46893	1273933	233	True				
ANR	1275089	Statement	","	1839:55:46894:46894	1273933	234	True				
ANR	1275090	Statement	(	1840:8:46904:46904	1273933	235	True				
ANR	1275091	Statement	unsigned	1840:9:46905:46912	1273933	236	True				
ANR	1275092	Statement	long	1840:18:46914:46917	1273933	237	True				
ANR	1275093	Statement	)	1840:22:46918:46918	1273933	238	True				
ANR	1275094	Statement	ncodes_used	1840:23:46919:46929	1273933	239	True				
ANR	1275095	Statement	<<	1840:34:46930:46931	1273933	240	True				
ANR	1275096	Statement	1	1840:36:46932:46932	1273933	241	True				
ANR	1275097	Statement	)	1840:37:46933:46933	1273933	242	True				
ANR	1275098	ExpressionStatement		1840:38:46934:46934	1273933	243	True				
ANR	1275099	Statement	fprintf	1842:4:46941:46947	1273933	244	True				
ANR	1275100	Statement	(	1842:11:46948:46948	1273933	245	True				
ANR	1275101	Statement	out	1842:12:46949:46951	1273933	246	True				
ANR	1275102	Statement	","	1842:15:46952:46952	1273933	247	True				
ANR	1275103	Statement	PREF	1842:17:46954:46957	1273933	248	True				
ANR	1275104	Statement	"""ac_uint4 _ucnum_nodes[] = {"""	1842:22:46959:46987	1273933	249	True				
ANR	1275105	Statement	)	1842:51:46988:46988	1273933	250	True				
ANR	1275106	ExpressionStatement		1842:52:46989:46989	1273933	251	True				
ANR	1275107	IfStatement	if ( ncodes_used > 0 )		1273933	252					
ANR	1275108	Condition	ncodes_used > 0	1847:8:47069:47083	1273933	0	True				
ANR	1275109	RelationalExpression	ncodes_used > 0		1273933	0		>			
ANR	1275110	Identifier	ncodes_used		1273933	0					
ANR	1275111	PrimaryExpression	0		1273933	1					
ANR	1275112	CompoundStatement		552:25:14645:14645	1273933	1					
ANR	1275113	ForStatement	for ( i = 0 ; i < ncodes_used ; i ++ )		1273933	0					
ANR	1275114	ForInit	i = 0 ;	1848:6:47094:47099	1273933	0	True				
ANR	1275115	AssignmentExpression	i = 0		1273933	0		=			
ANR	1275116	Identifier	i		1273933	0					
ANR	1275117	PrimaryExpression	0		1273933	1					
ANR	1275118	Condition	i < ncodes_used	1848:13:47101:47113	1273933	1	True				
ANR	1275119	RelationalExpression	i < ncodes_used		1273933	0		<			
ANR	1275120	Identifier	i		1273933	0					
ANR	1275121	Identifier	ncodes_used		1273933	1					
ANR	1275122	PostIncDecOperationExpression	i ++	1848:28:47116:47118	1273933	2	True				
ANR	1275123	Identifier	i		1273933	0					
ANR	1275124	IncDec	++		1273933	1					
ANR	1275125	CompoundStatement		553:33:14680:14680	1273933	3					
ANR	1275126	IfStatement	if ( i )		1273933	0					
ANR	1275127	Condition	i	1849:9:47132:47132	1273933	0	True				
ANR	1275128	Identifier	i		1273933	0					
ANR	1275129	ExpressionStatement	"fprintf ( out , "","" )"	1849:12:47135:47152	1273933	1	True				
ANR	1275130	CallExpression	"fprintf ( out , "","" )"		1273933	0					
ANR	1275131	Callee	fprintf		1273933	0					
ANR	1275132	Identifier	fprintf		1273933	0					
ANR	1275133	ArgumentList	out		1273933	1					
ANR	1275134	Argument	out		1273933	0					
ANR	1275135	Identifier	out		1273933	0					
ANR	1275136	Argument	""","""		1273933	1					
ANR	1275137	PrimaryExpression	""","""		1273933	0					
ANR	1275138	IfStatement	if ( ! ( i & 1 ) )		1273933	1					
ANR	1275139	Condition	! ( i & 1 )	1850:9:47163:47168	1273933	0	True				
ANR	1275140	UnaryOperationExpression	! ( i & 1 )		1273933	0					
ANR	1275141	UnaryOperator	!		1273933	0					
ANR	1275142	BitAndExpression	i & 1		1273933	1		&			
ANR	1275143	Identifier	i		1273933	0					
ANR	1275144	PrimaryExpression	1		1273933	1					
ANR	1275145	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1850:17:47171:47191	1273933	1	True				
ANR	1275146	CallExpression	"fprintf ( out , ""\\n\\t"" )"		1273933	0					
ANR	1275147	Callee	fprintf		1273933	0					
ANR	1275148	Identifier	fprintf		1273933	0					
ANR	1275149	ArgumentList	out		1273933	1					
ANR	1275150	Argument	out		1273933	0					
ANR	1275151	Identifier	out		1273933	0					
ANR	1275152	Argument	"""\\n\\t"""		1273933	1					
ANR	1275153	PrimaryExpression	"""\\n\\t"""		1273933	0					
ANR	1275154	ElseStatement	else		1273933	0					
ANR	1275155	ExpressionStatement	"fprintf ( out , "" "" )"	1851:10:47203:47220	1273933	0	True				
ANR	1275156	CallExpression	"fprintf ( out , "" "" )"		1273933	0					
ANR	1275157	Callee	fprintf		1273933	0					
ANR	1275158	Identifier	fprintf		1273933	0					
ANR	1275159	ArgumentList	out		1273933	1					
ANR	1275160	Argument	out		1273933	0					
ANR	1275161	Identifier	out		1273933	0					
ANR	1275162	Argument	""" """		1273933	1					
ANR	1275163	PrimaryExpression	""" """		1273933	0					
ANR	1275164	ExpressionStatement	"fprintf ( out , ""0x%08lx, 0x%08lx"" , ( unsigned long ) ncodes [ i ] . code , ( unsigned long ) ncodes [ i ] . idx )"	1852:5:47227:47331	1273933	2	True				
ANR	1275165	CallExpression	"fprintf ( out , ""0x%08lx, 0x%08lx"" , ( unsigned long ) ncodes [ i ] . code , ( unsigned long ) ncodes [ i ] . idx )"		1273933	0					
ANR	1275166	Callee	fprintf		1273933	0					
ANR	1275167	Identifier	fprintf		1273933	0					
ANR	1275168	ArgumentList	out		1273933	1					
ANR	1275169	Argument	out		1273933	0					
ANR	1275170	Identifier	out		1273933	0					
ANR	1275171	Argument	"""0x%08lx, 0x%08lx"""		1273933	1					
ANR	1275172	PrimaryExpression	"""0x%08lx, 0x%08lx"""		1273933	0					
ANR	1275173	Argument	( unsigned long ) ncodes [ i ] . code		1273933	2					
ANR	1275174	CastExpression	( unsigned long ) ncodes [ i ] . code		1273933	0					
ANR	1275175	CastTarget	unsigned long		1273933	0					
ANR	1275176	MemberAccess	ncodes [ i ] . code		1273933	1					
ANR	1275177	ArrayIndexing	ncodes [ i ]		1273933	0					
ANR	1275178	Identifier	ncodes		1273933	0					
ANR	1275179	Identifier	i		1273933	1					
ANR	1275180	Identifier	code		1273933	1					
ANR	1275181	Argument	( unsigned long ) ncodes [ i ] . idx		1273933	3					
ANR	1275182	CastExpression	( unsigned long ) ncodes [ i ] . idx		1273933	0					
ANR	1275183	CastTarget	unsigned long		1273933	0					
ANR	1275184	MemberAccess	ncodes [ i ] . idx		1273933	1					
ANR	1275185	ArrayIndexing	ncodes [ i ]		1273933	0					
ANR	1275186	Identifier	ncodes		1273933	0					
ANR	1275187	Identifier	i		1273933	1					
ANR	1275188	Identifier	idx		1273933	1					
ANR	1275189	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1855:1:47337:47361	1273933	1	True				
ANR	1275190	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		1273933	0					
ANR	1275191	Callee	fprintf		1273933	0					
ANR	1275192	Identifier	fprintf		1273933	0					
ANR	1275193	ArgumentList	out		1273933	1					
ANR	1275194	Argument	out		1273933	0					
ANR	1275195	Identifier	out		1273933	0					
ANR	1275196	Argument	"""\\n};\\n\\n"""		1273933	1					
ANR	1275197	PrimaryExpression	"""\\n};\\n\\n"""		1273933	0					
ANR	1275198	Statement	fprintf	1857:1:47365:47371	1273933	2	True				
ANR	1275199	Statement	(	1857:8:47372:47372	1273933	3	True				
ANR	1275200	Statement	out	1857:9:47373:47375	1273933	4	True				
ANR	1275201	Statement	","	1857:12:47376:47376	1273933	5	True				
ANR	1275202	Statement	PREF	1857:14:47378:47381	1273933	6	True				
ANR	1275203	Statement	"""short _ucnum_vals[] = {"""	1857:19:47383:47407	1273933	7	True				
ANR	1275204	Statement	)	1857:44:47408:47408	1273933	8	True				
ANR	1275205	ExpressionStatement		1857:45:47409:47409	1273933	9	True				
ANR	1275206	ForStatement	for ( i = 0 ; i < nums_used ; i ++ )		1273933	10					
ANR	1275207	ForInit	i = 0 ;	1858:6:47417:47422	1273933	0	True				
ANR	1275208	AssignmentExpression	i = 0		1273933	0		=			
ANR	1275209	Identifier	i		1273933	0					
ANR	1275210	PrimaryExpression	0		1273933	1					
ANR	1275211	Condition	i < nums_used	1858:13:47424:47434	1273933	1	True				
ANR	1275212	RelationalExpression	i < nums_used		1273933	0		<			
ANR	1275213	Identifier	i		1273933	0					
ANR	1275214	Identifier	nums_used		1273933	1					
ANR	1275215	PostIncDecOperationExpression	i ++	1858:26:47437:47439	1273933	2	True				
ANR	1275216	Identifier	i		1273933	0					
ANR	1275217	IncDec	++		1273933	1					
ANR	1275218	CompoundStatement		563:31:15001:15001	1273933	3					
ANR	1275219	IfStatement	if ( i )		1273933	0					
ANR	1275220	Condition	i	1859:9:47453:47453	1273933	0	True				
ANR	1275221	Identifier	i		1273933	0					
ANR	1275222	ExpressionStatement	"fprintf ( out , "","" )"	1859:12:47456:47473	1273933	1	True				
ANR	1275223	CallExpression	"fprintf ( out , "","" )"		1273933	0					
ANR	1275224	Callee	fprintf		1273933	0					
ANR	1275225	Identifier	fprintf		1273933	0					
ANR	1275226	ArgumentList	out		1273933	1					
ANR	1275227	Argument	out		1273933	0					
ANR	1275228	Identifier	out		1273933	0					
ANR	1275229	Argument	""","""		1273933	1					
ANR	1275230	PrimaryExpression	""","""		1273933	0					
ANR	1275231	IfStatement	if ( ! ( i & 3 ) )		1273933	1					
ANR	1275232	Condition	! ( i & 3 )	1860:9:47484:47489	1273933	0	True				
ANR	1275233	UnaryOperationExpression	! ( i & 3 )		1273933	0					
ANR	1275234	UnaryOperator	!		1273933	0					
ANR	1275235	BitAndExpression	i & 3		1273933	1		&			
ANR	1275236	Identifier	i		1273933	0					
ANR	1275237	PrimaryExpression	3		1273933	1					
ANR	1275238	ExpressionStatement	"fprintf ( out , ""\\n\\t"" )"	1860:17:47492:47512	1273933	1	True				
ANR	1275239	CallExpression	"fprintf ( out , ""\\n\\t"" )"		1273933	0					
ANR	1275240	Callee	fprintf		1273933	0					
ANR	1275241	Identifier	fprintf		1273933	0					
ANR	1275242	ArgumentList	out		1273933	1					
ANR	1275243	Argument	out		1273933	0					
ANR	1275244	Identifier	out		1273933	0					
ANR	1275245	Argument	"""\\n\\t"""		1273933	1					
ANR	1275246	PrimaryExpression	"""\\n\\t"""		1273933	0					
ANR	1275247	ElseStatement	else		1273933	0					
ANR	1275248	ExpressionStatement	"fprintf ( out , "" "" )"	1861:10:47524:47541	1273933	0	True				
ANR	1275249	CallExpression	"fprintf ( out , "" "" )"		1273933	0					
ANR	1275250	Callee	fprintf		1273933	0					
ANR	1275251	Identifier	fprintf		1273933	0					
ANR	1275252	ArgumentList	out		1273933	1					
ANR	1275253	Argument	out		1273933	0					
ANR	1275254	Identifier	out		1273933	0					
ANR	1275255	Argument	""" """		1273933	1					
ANR	1275256	PrimaryExpression	""" """		1273933	0					
ANR	1275257	IfStatement	if ( nums [ i ] . numerator < 0 )		1273933	2					
ANR	1275258	Condition	nums [ i ] . numerator < 0	1862:9:47552:47572	1273933	0	True				
ANR	1275259	RelationalExpression	nums [ i ] . numerator < 0		1273933	0		<			
ANR	1275260	MemberAccess	nums [ i ] . numerator		1273933	0					
ANR	1275261	ArrayIndexing	nums [ i ]		1273933	0					
ANR	1275262	Identifier	nums		1273933	0					
ANR	1275263	Identifier	i		1273933	1					
ANR	1275264	Identifier	numerator		1273933	1					
ANR	1275265	PrimaryExpression	0		1273933	1					
ANR	1275266	CompoundStatement		567:32:15134:15134	1273933	1					
ANR	1275267	ExpressionStatement	"fprintf ( out , ""%6d, 0x%04x"" , nums [ i ] . numerator , nums [ i ] . denominator )"	1863:2:47579:47650	1273933	0	True				
ANR	1275268	CallExpression	"fprintf ( out , ""%6d, 0x%04x"" , nums [ i ] . numerator , nums [ i ] . denominator )"		1273933	0					
ANR	1275269	Callee	fprintf		1273933	0					
ANR	1275270	Identifier	fprintf		1273933	0					
ANR	1275271	ArgumentList	out		1273933	1					
ANR	1275272	Argument	out		1273933	0					
ANR	1275273	Identifier	out		1273933	0					
ANR	1275274	Argument	"""%6d, 0x%04x"""		1273933	1					
ANR	1275275	PrimaryExpression	"""%6d, 0x%04x"""		1273933	0					
ANR	1275276	Argument	nums [ i ] . numerator		1273933	2					
ANR	1275277	MemberAccess	nums [ i ] . numerator		1273933	0					
ANR	1275278	ArrayIndexing	nums [ i ]		1273933	0					
ANR	1275279	Identifier	nums		1273933	0					
ANR	1275280	Identifier	i		1273933	1					
ANR	1275281	Identifier	numerator		1273933	1					
ANR	1275282	Argument	nums [ i ] . denominator		1273933	3					
ANR	1275283	MemberAccess	nums [ i ] . denominator		1273933	0					
ANR	1275284	ArrayIndexing	nums [ i ]		1273933	0					
ANR	1275285	Identifier	nums		1273933	0					
ANR	1275286	Identifier	i		1273933	1					
ANR	1275287	Identifier	denominator		1273933	1					
ANR	1275288	ElseStatement	else		1273933	0					
ANR	1275289	CompoundStatement		570:12:15223:15223	1273933	0					
ANR	1275290	ExpressionStatement	"fprintf ( out , ""0x%04x, 0x%04x"" , nums [ i ] . numerator , nums [ i ] . denominator )"	1866:2:47668:47742	1273933	0	True				
ANR	1275291	CallExpression	"fprintf ( out , ""0x%04x, 0x%04x"" , nums [ i ] . numerator , nums [ i ] . denominator )"		1273933	0					
ANR	1275292	Callee	fprintf		1273933	0					
ANR	1275293	Identifier	fprintf		1273933	0					
ANR	1275294	ArgumentList	out		1273933	1					
ANR	1275295	Argument	out		1273933	0					
ANR	1275296	Identifier	out		1273933	0					
ANR	1275297	Argument	"""0x%04x, 0x%04x"""		1273933	1					
ANR	1275298	PrimaryExpression	"""0x%04x, 0x%04x"""		1273933	0					
ANR	1275299	Argument	nums [ i ] . numerator		1273933	2					
ANR	1275300	MemberAccess	nums [ i ] . numerator		1273933	0					
ANR	1275301	ArrayIndexing	nums [ i ]		1273933	0					
ANR	1275302	Identifier	nums		1273933	0					
ANR	1275303	Identifier	i		1273933	1					
ANR	1275304	Identifier	numerator		1273933	1					
ANR	1275305	Argument	nums [ i ] . denominator		1273933	3					
ANR	1275306	MemberAccess	nums [ i ] . denominator		1273933	0					
ANR	1275307	ArrayIndexing	nums [ i ]		1273933	0					
ANR	1275308	Identifier	nums		1273933	0					
ANR	1275309	Identifier	i		1273933	1					
ANR	1275310	Identifier	denominator		1273933	1					
ANR	1275311	ExpressionStatement	"fprintf ( out , ""\\n};\\n\\n"" )"	1870:1:47755:47779	1273933	11	True				
ANR	1275312	CallExpression	"fprintf ( out , ""\\n};\\n\\n"" )"		1273933	0					
ANR	1275313	Callee	fprintf		1273933	0					
ANR	1275314	Identifier	fprintf		1273933	0					
ANR	1275315	ArgumentList	out		1273933	1					
ANR	1275316	Argument	out		1273933	0					
ANR	1275317	Identifier	out		1273933	0					
ANR	1275318	Argument	"""\\n};\\n\\n"""		1273933	1					
ANR	1275319	PrimaryExpression	"""\\n};\\n\\n"""		1273933	0					
ANR	1275320	ExpressionStatement	fclose ( out )	1908:4:48673:48684	1273933	253	True				
ANR	1275321	CallExpression	fclose ( out )		1273933	0					
ANR	1275322	Callee	fclose		1273933	0					
ANR	1275323	Identifier	fclose		1273933	0					
ANR	1275324	ArgumentList	out		1273933	1					
ANR	1275325	Argument	out		1273933	0					
ANR	1275326	Identifier	out		1273933	0					
ANR	1275327	ReturnType	static void		1273933	1					
ANR	1275328	Identifier	write_cdata		1273933	2					
ANR	1275329	ParameterList	char * opath		1273933	3					
ANR	1275330	Parameter	char * opath	1295:12:32427:32437	1273933	0	True				
ANR	1275331	ParameterType	char *		1273933	0					
ANR	1275332	Identifier	opath		1273933	1					
ANR	1275333	CFGEntryNode	ENTRY		1273933		True				
ANR	1275334	CFGExitNode	EXIT		1273933		True				
ANR	1275335	Symbol	comps_used		1273933						
ANR	1275336	Symbol	upper		1273933						
ANR	1275337	Symbol	nums_used		1273933						
ANR	1275338	Symbol	title_used		1273933						
ANR	1275339	Symbol	ncodes [ i ] . idx		1273933						
ANR	1275340	Symbol	decomps		1273933						
ANR	1275341	Symbol	ccl		1273933						
ANR	1275342	Symbol	path		1273933						
ANR	1275343	Symbol	kdecomps		1273933						
ANR	1275344	Symbol	decomps [ i ] . code		1273933						
ANR	1275345	Symbol	lower_used		1273933						
ANR	1275346	Symbol	* decomps [ i ] . decomp		1273933						
ANR	1275347	Symbol	nums		1273933						
ANR	1275348	Symbol	* * i		1273933						
ANR	1275349	Symbol	* decomps		1273933						
ANR	1275350	Symbol	ncodes		1273933						
ANR	1275351	Symbol	lower		1273933						
ANR	1275352	Symbol	nums [ i ] . denominator		1273933						
ANR	1275353	Symbol	* * proptbl		1273933						
ANR	1275354	Symbol	NUMPROPS		1273933						
ANR	1275355	Symbol	casecnt		1273933						
ANR	1275356	Symbol	propcnt		1273933						
ANR	1275357	Symbol	kdecomps_used		1273933						
ANR	1275358	Symbol	* ncodes		1273933						
ANR	1275359	Symbol	* proptbl [ i ] . ranges		1273933						
ANR	1275360	Symbol	comps [ i ] . count		1273933						
ANR	1275361	Symbol	idx		1273933						
ANR	1275362	Symbol	* kdecomps [ i ] . decomp		1273933						
ANR	1275363	Symbol	* nums		1273933						
ANR	1275364	Symbol	* propcnt		1273933						
ANR	1275365	Symbol	opath		1273933						
ANR	1275366	Symbol	proptbl [ i ] . ranges		1273933						
ANR	1275367	Symbol	* comps		1273933						
ANR	1275368	Symbol	* ccl		1273933						
ANR	1275369	Symbol	ccl_used		1273933						
ANR	1275370	Symbol	decomps [ i ] . decomp		1273933						
ANR	1275371	Symbol	title		1273933						
ANR	1275372	Symbol	out		1273933						
ANR	1275373	Symbol	kdecomps [ i ] . used		1273933						
ANR	1275374	Symbol	nprops		1273933						
ANR	1275375	Symbol	kdecomps [ i ] . decomp		1273933						
ANR	1275376	Symbol	* hdr		1273933						
ANR	1275377	Symbol	comps [ i ] . comp		1273933						
ANR	1275378	Symbol	fopen		1273933						
ANR	1275379	Symbol	comps [ i ] . code2		1273933						
ANR	1275380	Symbol	ncodes [ i ] . code		1273933						
ANR	1275381	Symbol	comps		1273933						
ANR	1275382	Symbol	decomps_used		1273933						
ANR	1275383	Symbol	* * kdecomps		1273933						
ANR	1275384	Symbol	proptbl		1273933						
ANR	1275385	Symbol	i		1273933						
ANR	1275386	Symbol	* kdecomps		1273933						
ANR	1275387	Symbol	j		1273933						
ANR	1275388	Symbol	k		1273933						
ANR	1275389	Symbol	proptbl [ i ] . used		1273933						
ANR	1275390	Symbol	upper_used		1273933						
ANR	1275391	Symbol	comps [ i ] . code1		1273933						
ANR	1275392	Symbol	* i		1273933						
ANR	1275393	Symbol	* j		1273933						
ANR	1275394	Symbol	* * decomps		1273933						
ANR	1275395	Symbol	ncodes_used		1273933						
ANR	1275396	Symbol	bytes		1273933						
ANR	1275397	Symbol	* proptbl		1273933						
ANR	1275398	Symbol	hdr		1273933						
ANR	1275399	Symbol	nums [ i ] . numerator		1273933						
ANR	1275400	Symbol	kdecomps [ i ] . code		1273933						
ANR	1275401	Symbol	decomps [ i ] . used		1273933						
ANR	1275402	Function	usage	1911:0:48689:49181							
ANR	1275403	FunctionDef	usage (char * prog)		1275402	0					
ANR	1275404	CompoundStatement		1913:0:48719:49181	1275402	0					
ANR	1275405	ExpressionStatement	"fprintf ( stderr , ""Usage: %s [-o output-directory|-x composition-exclusions]"" , prog )"	1914:4:48725:48819	1275402	0	True				
ANR	1275406	CallExpression	"fprintf ( stderr , ""Usage: %s [-o output-directory|-x composition-exclusions]"" , prog )"		1275402	0					
ANR	1275407	Callee	fprintf		1275402	0					
ANR	1275408	Identifier	fprintf		1275402	0					
ANR	1275409	ArgumentList	stderr		1275402	1					
ANR	1275410	Argument	stderr		1275402	0					
ANR	1275411	Identifier	stderr		1275402	0					
ANR	1275412	Argument	"""Usage: %s [-o output-directory|-x composition-exclusions]"""		1275402	1					
ANR	1275413	PrimaryExpression	"""Usage: %s [-o output-directory|-x composition-exclusions]"""		1275402	0					
ANR	1275414	Argument	prog		1275402	2					
ANR	1275415	Identifier	prog		1275402	0					
ANR	1275416	ExpressionStatement	"fprintf ( stderr , "" datafile1 datafile2 ...\\n\\n"" )"	1916:4:48825:48872	1275402	1	True				
ANR	1275417	CallExpression	"fprintf ( stderr , "" datafile1 datafile2 ...\\n\\n"" )"		1275402	0					
ANR	1275418	Callee	fprintf		1275402	0					
ANR	1275419	Identifier	fprintf		1275402	0					
ANR	1275420	ArgumentList	stderr		1275402	1					
ANR	1275421	Argument	stderr		1275402	0					
ANR	1275422	Identifier	stderr		1275402	0					
ANR	1275423	Argument	""" datafile1 datafile2 ...\\n\\n"""		1275402	1					
ANR	1275424	PrimaryExpression	""" datafile1 datafile2 ...\\n\\n"""		1275402	0					
ANR	1275425	ExpressionStatement	"fprintf ( stderr , ""-o output-directory\\n\\t\\tWrite the output files to a different"" )"	1917:4:48878:48971	1275402	2	True				
ANR	1275426	CallExpression	"fprintf ( stderr , ""-o output-directory\\n\\t\\tWrite the output files to a different"" )"		1275402	0					
ANR	1275427	Callee	fprintf		1275402	0					
ANR	1275428	Identifier	fprintf		1275402	0					
ANR	1275429	ArgumentList	stderr		1275402	1					
ANR	1275430	Argument	stderr		1275402	0					
ANR	1275431	Identifier	stderr		1275402	0					
ANR	1275432	Argument	"""-o output-directory\\n\\t\\tWrite the output files to a different"""		1275402	1					
ANR	1275433	PrimaryExpression	"""-o output-directory\\n\\t\\tWrite the output files to a different"""		1275402	0					
ANR	1275434	ExpressionStatement	"fprintf ( stderr , "" directory (default: .).\\n"" )"	1919:4:48977:49022	1275402	3	True				
ANR	1275435	CallExpression	"fprintf ( stderr , "" directory (default: .).\\n"" )"		1275402	0					
ANR	1275436	Callee	fprintf		1275402	0					
ANR	1275437	Identifier	fprintf		1275402	0					
ANR	1275438	ArgumentList	stderr		1275402	1					
ANR	1275439	Argument	stderr		1275402	0					
ANR	1275440	Identifier	stderr		1275402	0					
ANR	1275441	Argument	""" directory (default: .).\\n"""		1275402	1					
ANR	1275442	PrimaryExpression	""" directory (default: .).\\n"""		1275402	0					
ANR	1275443	ExpressionStatement	"fprintf ( stderr , ""-x composition-exclusion\\n\\t\\tFile of composition codes"" )"	1920:4:49028:49114	1275402	4	True				
ANR	1275444	CallExpression	"fprintf ( stderr , ""-x composition-exclusion\\n\\t\\tFile of composition codes"" )"		1275402	0					
ANR	1275445	Callee	fprintf		1275402	0					
ANR	1275446	Identifier	fprintf		1275402	0					
ANR	1275447	ArgumentList	stderr		1275402	1					
ANR	1275448	Argument	stderr		1275402	0					
ANR	1275449	Identifier	stderr		1275402	0					
ANR	1275450	Argument	"""-x composition-exclusion\\n\\t\\tFile of composition codes"""		1275402	1					
ANR	1275451	PrimaryExpression	"""-x composition-exclusion\\n\\t\\tFile of composition codes"""		1275402	0					
ANR	1275452	ExpressionStatement	"fprintf ( stderr , "" that should be excluded.\\n"" )"	1922:4:49120:49166	1275402	5	True				
ANR	1275453	CallExpression	"fprintf ( stderr , "" that should be excluded.\\n"" )"		1275402	0					
ANR	1275454	Callee	fprintf		1275402	0					
ANR	1275455	Identifier	fprintf		1275402	0					
ANR	1275456	ArgumentList	stderr		1275402	1					
ANR	1275457	Argument	stderr		1275402	0					
ANR	1275458	Identifier	stderr		1275402	0					
ANR	1275459	Argument	""" that should be excluded.\\n"""		1275402	1					
ANR	1275460	PrimaryExpression	""" that should be excluded.\\n"""		1275402	0					
ANR	1275461	ExpressionStatement	exit ( 1 )	1923:4:49172:49179	1275402	6	True				
ANR	1275462	CallExpression	exit ( 1 )		1275402	0					
ANR	1275463	Callee	exit		1275402	0					
ANR	1275464	Identifier	exit		1275402	0					
ANR	1275465	ArgumentList	1		1275402	1					
ANR	1275466	Argument	1		1275402	0					
ANR	1275467	PrimaryExpression	1		1275402	0					
ANR	1275468	ReturnType	static void		1275402	1					
ANR	1275469	Identifier	usage		1275402	2					
ANR	1275470	ParameterList	char * prog		1275402	3					
ANR	1275471	Parameter	char * prog	1912:6:48707:48716	1275402	0	True				
ANR	1275472	ParameterType	char *		1275402	0					
ANR	1275473	Identifier	prog		1275402	1					
ANR	1275474	CFGEntryNode	ENTRY		1275402		True				
ANR	1275475	CFGExitNode	EXIT		1275402		True				
ANR	1275476	Symbol	stderr		1275402						
ANR	1275477	Symbol	prog		1275402						
ANR	1275478	Function	main	1926:0:49184:50544							
ANR	1275479	FunctionDef	"main (int argc , char * argv [ ])"		1275478	0					
ANR	1275480	CompoundStatement		1928:0:49217:50544	1275478	0					
ANR	1275481	IdentifierDeclStatement	FILE * in ;	1929:4:49223:49231	1275478	0	True				
ANR	1275482	IdentifierDecl	* in		1275478	0					
ANR	1275483	IdentifierDeclType	FILE *		1275478	0					
ANR	1275484	Identifier	in		1275478	1					
ANR	1275485	IdentifierDeclStatement	"char * prog , * opath ;"	1930:4:49237:49255	1275478	1	True				
ANR	1275486	IdentifierDecl	* prog		1275478	0					
ANR	1275487	IdentifierDeclType	char *		1275478	0					
ANR	1275488	Identifier	prog		1275478	1					
ANR	1275489	IdentifierDecl	* opath		1275478	1					
ANR	1275490	IdentifierDeclType	char *		1275478	0					
ANR	1275491	Identifier	opath		1275478	1					
ANR	1275492	ExpressionStatement	prog = argv [ 1 ]	1932:4:49262:49276	1275478	2	True				
ANR	1275493	AssignmentExpression	prog = argv [ 1 ]		1275478	0		=			
ANR	1275494	Identifier	prog		1275478	0					
ANR	1275495	ArrayIndexing	argv [ 1 ]		1275478	1					
ANR	1275496	Identifier	argv		1275478	0					
ANR	1275497	PrimaryExpression	1		1275478	1					
ANR	1275498	ExpressionStatement	opath = 0	1934:4:49283:49292	1275478	3	True				
ANR	1275499	AssignmentExpression	opath = 0		1275478	0		=			
ANR	1275500	Identifier	opath		1275478	0					
ANR	1275501	PrimaryExpression	0		1275478	1					
ANR	1275502	ExpressionStatement	in = stdin	1935:4:49298:49308	1275478	4	True				
ANR	1275503	AssignmentExpression	in = stdin		1275478	0		=			
ANR	1275504	Identifier	in		1275478	0					
ANR	1275505	Identifier	stdin		1275478	1					
ANR	1275506	ExpressionStatement	argc --	1937:4:49315:49321	1275478	5	True				
ANR	1275507	PostIncDecOperationExpression	argc --		1275478	0					
ANR	1275508	Identifier	argc		1275478	0					
ANR	1275509	IncDec	--		1275478	1					
ANR	1275510	ExpressionStatement	argv ++	1938:4:49327:49333	1275478	6	True				
ANR	1275511	PostIncDecOperationExpression	argv ++		1275478	0					
ANR	1275512	Identifier	argv		1275478	0					
ANR	1275513	IncDec	++		1275478	1					
ANR	1275514	WhileStatement	while ( argc > 0 )		1275478	7					
ANR	1275515	Condition	argc > 0	1940:11:49347:49354	1275478	0	True				
ANR	1275516	RelationalExpression	argc > 0		1275478	0		>			
ANR	1275517	Identifier	argc		1275478	0					
ANR	1275518	PrimaryExpression	0		1275478	1					
ANR	1275519	CompoundStatement		13:21:139:139	1275478	1					
ANR	1275520	IfStatement	if ( argv [ 0 ] [ 0 ] == '-' )		1275478	0					
ANR	1275521	Condition	argv [ 0 ] [ 0 ] == '-'	1941:12:49371:49387	1275478	0	True				
ANR	1275522	EqualityExpression	argv [ 0 ] [ 0 ] == '-'		1275478	0		==			
ANR	1275523	ArrayIndexing	argv [ 0 ] [ 0 ]		1275478	0					
ANR	1275524	ArrayIndexing	argv [ 0 ]		1275478	0					
ANR	1275525	Identifier	argv		1275478	0					
ANR	1275526	PrimaryExpression	0		1275478	1					
ANR	1275527	PrimaryExpression	0		1275478	1					
ANR	1275528	PrimaryExpression	'-'		1275478	1					
ANR	1275529	CompoundStatement		14:31:172:172	1275478	1					
ANR	1275530	SwitchStatement	switch ( argv [ 0 ] [ 1 ] )		1275478	0					
ANR	1275531	Condition	argv [ 0 ] [ 1 ]	1942:20:49412:49421	1275478	0	True				
ANR	1275532	ArrayIndexing	argv [ 0 ] [ 1 ]		1275478	0					
ANR	1275533	ArrayIndexing	argv [ 0 ]		1275478	0					
ANR	1275534	Identifier	argv		1275478	0					
ANR	1275535	PrimaryExpression	0		1275478	1					
ANR	1275536	PrimaryExpression	1		1275478	1					
ANR	1275537	CompoundStatement		15:32:206:206	1275478	1					
ANR	1275538	Label	case 'o' :	1943:14:49440:49448	1275478	0	True				
ANR	1275539	ExpressionStatement	argc --	1944:16:49466:49472	1275478	1	True				
ANR	1275540	PostIncDecOperationExpression	argc --		1275478	0					
ANR	1275541	Identifier	argc		1275478	0					
ANR	1275542	IncDec	--		1275478	1					
ANR	1275543	ExpressionStatement	argv ++	1945:16:49490:49496	1275478	2	True				
ANR	1275544	PostIncDecOperationExpression	argv ++		1275478	0					
ANR	1275545	Identifier	argv		1275478	0					
ANR	1275546	IncDec	++		1275478	1					
ANR	1275547	ExpressionStatement	opath = argv [ 0 ]	1946:16:49514:49529	1275478	3	True				
ANR	1275548	AssignmentExpression	opath = argv [ 0 ]		1275478	0		=			
ANR	1275549	Identifier	opath		1275478	0					
ANR	1275550	ArrayIndexing	argv [ 0 ]		1275478	1					
ANR	1275551	Identifier	argv		1275478	0					
ANR	1275552	PrimaryExpression	0		1275478	1					
ANR	1275553	BreakStatement	break ;	1947:16:49547:49552	1275478	4	True				
ANR	1275554	Label	case 'x' :	1948:14:49568:49576	1275478	5	True				
ANR	1275555	ExpressionStatement	argc --	1949:16:49594:49600	1275478	6	True				
ANR	1275556	PostIncDecOperationExpression	argc --		1275478	0					
ANR	1275557	Identifier	argc		1275478	0					
ANR	1275558	IncDec	--		1275478	1					
ANR	1275559	ExpressionStatement	argv ++	1950:16:49618:49624	1275478	7	True				
ANR	1275560	PostIncDecOperationExpression	argv ++		1275478	0					
ANR	1275561	Identifier	argv		1275478	0					
ANR	1275562	IncDec	++		1275478	1					
ANR	1275563	IfStatement	"if ( ( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0 )"		1275478	8					
ANR	1275564	Condition	"( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0"	1951:20:49646:49676	1275478	0	True				
ANR	1275565	EqualityExpression	"( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0"		1275478	0		==			
ANR	1275566	AssignmentExpression	"in = fopen ( argv [ 0 ] , ""r"" )"		1275478	0		=			
ANR	1275567	Identifier	in		1275478	0					
ANR	1275568	CallExpression	"fopen ( argv [ 0 ] , ""r"" )"		1275478	1					
ANR	1275569	Callee	fopen		1275478	0					
ANR	1275570	Identifier	fopen		1275478	0					
ANR	1275571	ArgumentList	argv [ 0 ]		1275478	1					
ANR	1275572	Argument	argv [ 0 ]		1275478	0					
ANR	1275573	ArrayIndexing	argv [ 0 ]		1275478	0					
ANR	1275574	Identifier	argv		1275478	0					
ANR	1275575	PrimaryExpression	0		1275478	1					
ANR	1275576	Argument	"""r"""		1275478	1					
ANR	1275577	PrimaryExpression	"""r"""		1275478	0					
ANR	1275578	PrimaryExpression	0		1275478	1					
ANR	1275579	ExpressionStatement	"fprintf ( stderr , ""%s: unable to open composition exclusion file %s\\n"" , prog , argv [ 0 ] )"	1952:18:49697:49833	1275478	1	True				
ANR	1275580	CallExpression	"fprintf ( stderr , ""%s: unable to open composition exclusion file %s\\n"" , prog , argv [ 0 ] )"		1275478	0					
ANR	1275581	Callee	fprintf		1275478	0					
ANR	1275582	Identifier	fprintf		1275478	0					
ANR	1275583	ArgumentList	stderr		1275478	1					
ANR	1275584	Argument	stderr		1275478	0					
ANR	1275585	Identifier	stderr		1275478	0					
ANR	1275586	Argument	"""%s: unable to open composition exclusion file %s\\n"""		1275478	1					
ANR	1275587	PrimaryExpression	"""%s: unable to open composition exclusion file %s\\n"""		1275478	0					
ANR	1275588	Argument	prog		1275478	2					
ANR	1275589	Identifier	prog		1275478	0					
ANR	1275590	Argument	argv [ 0 ]		1275478	3					
ANR	1275591	ArrayIndexing	argv [ 0 ]		1275478	0					
ANR	1275592	Identifier	argv		1275478	0					
ANR	1275593	PrimaryExpression	0		1275478	1					
ANR	1275594	ElseStatement	else		1275478	0					
ANR	1275595	CompoundStatement		28:21:638:638	1275478	0					
ANR	1275596	ExpressionStatement	read_compexdata ( in )	1956:20:49878:49897	1275478	0	True				
ANR	1275597	CallExpression	read_compexdata ( in )		1275478	0					
ANR	1275598	Callee	read_compexdata		1275478	0					
ANR	1275599	Identifier	read_compexdata		1275478	0					
ANR	1275600	ArgumentList	in		1275478	1					
ANR	1275601	Argument	in		1275478	0					
ANR	1275602	Identifier	in		1275478	0					
ANR	1275603	ExpressionStatement	fclose ( in )	1957:20:49919:49929	1275478	1	True				
ANR	1275604	CallExpression	fclose ( in )		1275478	0					
ANR	1275605	Callee	fclose		1275478	0					
ANR	1275606	Identifier	fclose		1275478	0					
ANR	1275607	ArgumentList	in		1275478	1					
ANR	1275608	Argument	in		1275478	0					
ANR	1275609	Identifier	in		1275478	0					
ANR	1275610	ExpressionStatement	in = 0	1958:20:49951:49957	1275478	2	True				
ANR	1275611	AssignmentExpression	in = 0		1275478	0		=			
ANR	1275612	Identifier	in		1275478	0					
ANR	1275613	PrimaryExpression	0		1275478	1					
ANR	1275614	BreakStatement	break ;	1960:16:49993:49998	1275478	9	True				
ANR	1275615	Label	default :	1961:14:50014:50021	1275478	10	True				
ANR	1275616	Identifier	default		1275478	0					
ANR	1275617	ExpressionStatement	usage ( prog )	1962:16:50039:50050	1275478	11	True				
ANR	1275618	CallExpression	usage ( prog )		1275478	0					
ANR	1275619	Callee	usage		1275478	0					
ANR	1275620	Identifier	usage		1275478	0					
ANR	1275621	ArgumentList	prog		1275478	1					
ANR	1275622	Argument	prog		1275478	0					
ANR	1275623	Identifier	prog		1275478	0					
ANR	1275624	ElseStatement	else		1275478	0					
ANR	1275625	CompoundStatement		37:15:863:863	1275478	0					
ANR	1275626	IfStatement	if ( in != stdin && in != NULL )		1275478	0					
ANR	1275627	Condition	in != stdin && in != NULL	1965:16:50099:50123	1275478	0	True				
ANR	1275628	AndExpression	in != stdin && in != NULL		1275478	0		&&			
ANR	1275629	EqualityExpression	in != stdin		1275478	0		!=			
ANR	1275630	Identifier	in		1275478	0					
ANR	1275631	Identifier	stdin		1275478	1					
ANR	1275632	EqualityExpression	in != NULL		1275478	1		!=			
ANR	1275633	Identifier	in		1275478	0					
ANR	1275634	Identifier	NULL		1275478	1					
ANR	1275635	ExpressionStatement	fclose ( in )	1966:14:50140:50150	1275478	1	True				
ANR	1275636	CallExpression	fclose ( in )		1275478	0					
ANR	1275637	Callee	fclose		1275478	0					
ANR	1275638	Identifier	fclose		1275478	0					
ANR	1275639	ArgumentList	in		1275478	1					
ANR	1275640	Argument	in		1275478	0					
ANR	1275641	Identifier	in		1275478	0					
ANR	1275642	IfStatement	"if ( ( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0 )"		1275478	1					
ANR	1275643	Condition	"( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0"	1967:16:50168:50198	1275478	0	True				
ANR	1275644	EqualityExpression	"( in = fopen ( argv [ 0 ] , ""r"" ) ) == 0"		1275478	0		==			
ANR	1275645	AssignmentExpression	"in = fopen ( argv [ 0 ] , ""r"" )"		1275478	0		=			
ANR	1275646	Identifier	in		1275478	0					
ANR	1275647	CallExpression	"fopen ( argv [ 0 ] , ""r"" )"		1275478	1					
ANR	1275648	Callee	fopen		1275478	0					
ANR	1275649	Identifier	fopen		1275478	0					
ANR	1275650	ArgumentList	argv [ 0 ]		1275478	1					
ANR	1275651	Argument	argv [ 0 ]		1275478	0					
ANR	1275652	ArrayIndexing	argv [ 0 ]		1275478	0					
ANR	1275653	Identifier	argv		1275478	0					
ANR	1275654	PrimaryExpression	0		1275478	1					
ANR	1275655	Argument	"""r"""		1275478	1					
ANR	1275656	PrimaryExpression	"""r"""		1275478	0					
ANR	1275657	PrimaryExpression	0		1275478	1					
ANR	1275658	ExpressionStatement	"fprintf ( stderr , ""%s: unable to open ctype file %s\\n"" , prog , argv [ 0 ] )"	1968:14:50215:50305	1275478	1	True				
ANR	1275659	CallExpression	"fprintf ( stderr , ""%s: unable to open ctype file %s\\n"" , prog , argv [ 0 ] )"		1275478	0					
ANR	1275660	Callee	fprintf		1275478	0					
ANR	1275661	Identifier	fprintf		1275478	0					
ANR	1275662	ArgumentList	stderr		1275478	1					
ANR	1275663	Argument	stderr		1275478	0					
ANR	1275664	Identifier	stderr		1275478	0					
ANR	1275665	Argument	"""%s: unable to open ctype file %s\\n"""		1275478	1					
ANR	1275666	PrimaryExpression	"""%s: unable to open ctype file %s\\n"""		1275478	0					
ANR	1275667	Argument	prog		1275478	2					
ANR	1275668	Identifier	prog		1275478	0					
ANR	1275669	Argument	argv [ 0 ]		1275478	3					
ANR	1275670	ArrayIndexing	argv [ 0 ]		1275478	0					
ANR	1275671	Identifier	argv		1275478	0					
ANR	1275672	PrimaryExpression	0		1275478	1					
ANR	1275673	ElseStatement	else		1275478	0					
ANR	1275674	CompoundStatement		43:17:1106:1106	1275478	0					
ANR	1275675	ExpressionStatement	read_cdata ( in )	1971:16:50342:50356	1275478	0	True				
ANR	1275676	CallExpression	read_cdata ( in )		1275478	0					
ANR	1275677	Callee	read_cdata		1275478	0					
ANR	1275678	Identifier	read_cdata		1275478	0					
ANR	1275679	ArgumentList	in		1275478	1					
ANR	1275680	Argument	in		1275478	0					
ANR	1275681	Identifier	in		1275478	0					
ANR	1275682	ExpressionStatement	fclose ( in )	1972:16:50374:50384	1275478	1	True				
ANR	1275683	CallExpression	fclose ( in )		1275478	0					
ANR	1275684	Callee	fclose		1275478	0					
ANR	1275685	Identifier	fclose		1275478	0					
ANR	1275686	ArgumentList	in		1275478	1					
ANR	1275687	Argument	in		1275478	0					
ANR	1275688	Identifier	in		1275478	0					
ANR	1275689	ExpressionStatement	in = 0	1973:16:50402:50408	1275478	2	True				
ANR	1275690	AssignmentExpression	in = 0		1275478	0		=			
ANR	1275691	Identifier	in		1275478	0					
ANR	1275692	PrimaryExpression	0		1275478	1					
ANR	1275693	ExpressionStatement	argc --	1976:8:50435:50441	1275478	1	True				
ANR	1275694	PostIncDecOperationExpression	argc --		1275478	0					
ANR	1275695	Identifier	argc		1275478	0					
ANR	1275696	IncDec	--		1275478	1					
ANR	1275697	ExpressionStatement	argv ++	1977:8:50451:50457	1275478	2	True				
ANR	1275698	PostIncDecOperationExpression	argv ++		1275478	0					
ANR	1275699	Identifier	argv		1275478	0					
ANR	1275700	IncDec	++		1275478	1					
ANR	1275701	IfStatement	if ( opath == 0 )		1275478	8					
ANR	1275702	Condition	opath == 0	1980:8:50474:50483	1275478	0	True				
ANR	1275703	EqualityExpression	opath == 0		1275478	0		==			
ANR	1275704	Identifier	opath		1275478	0					
ANR	1275705	PrimaryExpression	0		1275478	1					
ANR	1275706	ExpressionStatement	"opath = ""."""	1981:6:50492:50503	1275478	1	True				
ANR	1275707	AssignmentExpression	"opath = ""."""		1275478	0		=			
ANR	1275708	Identifier	opath		1275478	0					
ANR	1275709	PrimaryExpression	"""."""		1275478	1					
ANR	1275710	ExpressionStatement	write_cdata ( opath )	1982:4:50509:50527	1275478	9	True				
ANR	1275711	CallExpression	write_cdata ( opath )		1275478	0					
ANR	1275712	Callee	write_cdata		1275478	0					
ANR	1275713	Identifier	write_cdata		1275478	0					
ANR	1275714	ArgumentList	opath		1275478	1					
ANR	1275715	Argument	opath		1275478	0					
ANR	1275716	Identifier	opath		1275478	0					
ANR	1275717	ReturnStatement	return 0 ;	1984:4:50534:50542	1275478	10	True				
ANR	1275718	PrimaryExpression	0		1275478	0					
ANR	1275719	ReturnType	int		1275478	1					
ANR	1275720	Identifier	main		1275478	2					
ANR	1275721	ParameterList	"int argc , char * argv [ ]"		1275478	3					
ANR	1275722	Parameter	int argc	1927:5:49193:49200	1275478	0	True				
ANR	1275723	ParameterType	int		1275478	0					
ANR	1275724	Identifier	argc		1275478	1					
ANR	1275725	Parameter	char * argv [ ]	1927:15:49203:49214	1275478	1	True				
ANR	1275726	ParameterType	char * [ ]		1275478	0					
ANR	1275727	Identifier	argv		1275478	1					
ANR	1275728	CFGEntryNode	ENTRY		1275478		True				
ANR	1275729	CFGExitNode	EXIT		1275478		True				
ANR	1275730	Symbol	argc		1275478						
ANR	1275731	Symbol	fopen		1275478						
ANR	1275732	Symbol	stdin		1275478						
ANR	1275733	Symbol	NULL		1275478						
ANR	1275734	Symbol	opath		1275478						
ANR	1275735	Symbol	in		1275478						
ANR	1275736	Symbol	* * argv		1275478						
ANR	1275737	Symbol	* argv		1275478						
ANR	1275738	Symbol	stderr		1275478						
ANR	1275739	Symbol	argv		1275478						
ANR	1275740	Symbol	prog		1275478						
