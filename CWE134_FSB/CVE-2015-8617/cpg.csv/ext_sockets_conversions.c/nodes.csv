command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2010243	File	data/converged/CVE-2015-8617_php-src/ext_sockets_conversions.c								
ANR	2010244	DeclStmt									
ANR	2010245	Decl							unsigned short	unsigned short	sa_family_t
ANR	2010246	ClassDef	_ser_context	70:0:1740:1941							
ANR	2010247	DeclStmt									
ANR	2010248	Decl							HashTable	HashTable	params
ANR	2010249	DeclStmt									
ANR	2010250	Decl							struct err_s	struct err_s	err
ANR	2010251	DeclStmt									
ANR	2010252	Decl							zend_llist	zend_llist	keys
ANR	2010253	Decl							zend_llist	zend_llist	allocations
ANR	2010254	DeclStmt									
ANR	2010255	Decl							php_socket	php_socket *	sock
ANR	2010256	ClassDef	_res_context	78:0:1944:2063							
ANR	2010257	DeclStmt									
ANR	2010258	Decl							HashTable	HashTable	params
ANR	2010259	DeclStmt									
ANR	2010260	Decl							struct err_s	struct err_s	err
ANR	2010261	DeclStmt									
ANR	2010262	Decl							zend_llist	zend_llist	keys
ANR	2010263	ClassDef	<unnamed>	84:8:2075:2459							
ANR	2010264	DeclStmt									
ANR	2010265	Decl							const char	const char *	name
ANR	2010266	DeclStmt									
ANR	2010267	Decl							unsigned	unsigned	name_size
ANR	2010268	DeclStmt									
ANR	2010269	Decl							int	int	required
ANR	2010270	DeclStmt									
ANR	2010271	Decl							size_t	size_t	field_offset
ANR	2010272	DeclStmt									
ANR	2010273	Decl							from_zval_write_field	from_zval_write_field *	from_zval
ANR	2010274	DeclStmt									
ANR	2010275	Decl							to_zval_read_field	to_zval_read_field *	to_zval
ANR	2010276	DeclStmt									
ANR	2010277	Decl									field_descriptor
ANR	2010278	DeclStmt									
ANR	2010279	Decl							const struct key_value	const struct key_value [ ]	empty_key_value_list
ANR	2010280	Function	param_get_bool	107:0:2652:2843							
ANR	2010281	FunctionDef	"param_get_bool (void * ctx , const char * key , int def)"		2010280	0					
ANR	2010282	CompoundStatement		108:0:2715:2843	2010280	0					
ANR	2010283	IdentifierDeclStatement	int * elem ;	109:1:2718:2727	2010280	0	True				
ANR	2010284	IdentifierDecl	* elem		2010280	0					
ANR	2010285	IdentifierDeclType	int *		2010280	0					
ANR	2010286	Identifier	elem		2010280	1					
ANR	2010287	IfStatement	"if ( ( elem = zend_hash_str_find_ptr ( ctx , key , strlen ( key ) ) ) != NULL )"		2010280	1					
ANR	2010288	Condition	"( elem = zend_hash_str_find_ptr ( ctx , key , strlen ( key ) ) ) != NULL"	110:5:2734:2795	2010280	0	True				
ANR	2010289	EqualityExpression	"( elem = zend_hash_str_find_ptr ( ctx , key , strlen ( key ) ) ) != NULL"		2010280	0		!=			
ANR	2010290	AssignmentExpression	"elem = zend_hash_str_find_ptr ( ctx , key , strlen ( key ) )"		2010280	0		=			
ANR	2010291	Identifier	elem		2010280	0					
ANR	2010292	CallExpression	"zend_hash_str_find_ptr ( ctx , key , strlen ( key ) )"		2010280	1					
ANR	2010293	Callee	zend_hash_str_find_ptr		2010280	0					
ANR	2010294	Identifier	zend_hash_str_find_ptr		2010280	0					
ANR	2010295	ArgumentList	ctx		2010280	1					
ANR	2010296	Argument	ctx		2010280	0					
ANR	2010297	Identifier	ctx		2010280	0					
ANR	2010298	Argument	key		2010280	1					
ANR	2010299	Identifier	key		2010280	0					
ANR	2010300	Argument	strlen ( key )		2010280	2					
ANR	2010301	CallExpression	strlen ( key )		2010280	0					
ANR	2010302	Callee	strlen		2010280	0					
ANR	2010303	Identifier	strlen		2010280	0					
ANR	2010304	ArgumentList	key		2010280	1					
ANR	2010305	Argument	key		2010280	0					
ANR	2010306	Identifier	key		2010280	0					
ANR	2010307	Identifier	NULL		2010280	1					
ANR	2010308	CompoundStatement		3:69:82:82	2010280	1					
ANR	2010309	ReturnStatement	return * elem ;	111:2:2802:2814	2010280	0	True				
ANR	2010310	UnaryOperationExpression	* elem		2010280	0					
ANR	2010311	UnaryOperator	*		2010280	0					
ANR	2010312	Identifier	elem		2010280	1					
ANR	2010313	ElseStatement	else		2010280	0					
ANR	2010314	CompoundStatement		5:8:108:108	2010280	0					
ANR	2010315	ReturnStatement	return def ;	113:2:2828:2838	2010280	0	True				
ANR	2010316	Identifier	def		2010280	0					
ANR	2010317	ReturnType	static int		2010280	1					
ANR	2010318	Identifier	param_get_bool		2010280	2					
ANR	2010319	ParameterList	"void * ctx , const char * key , int def"		2010280	3					
ANR	2010320	Parameter	void * ctx	107:26:2678:2686	2010280	0	True				
ANR	2010321	ParameterType	void *		2010280	0					
ANR	2010322	Identifier	ctx		2010280	1					
ANR	2010323	Parameter	const char * key	107:37:2689:2703	2010280	1	True				
ANR	2010324	ParameterType	const char *		2010280	0					
ANR	2010325	Identifier	key		2010280	1					
ANR	2010326	Parameter	int def	107:54:2706:2712	2010280	2	True				
ANR	2010327	ParameterType	int		2010280	0					
ANR	2010328	Identifier	def		2010280	1					
ANR	2010329	CFGEntryNode	ENTRY		2010280		True				
ANR	2010330	CFGExitNode	EXIT		2010280		True				
ANR	2010331	Symbol	elem		2010280						
ANR	2010332	Symbol	strlen		2010280						
ANR	2010333	Symbol	NULL		2010280						
ANR	2010334	Symbol	def		2010280						
ANR	2010335	Symbol	ctx		2010280						
ANR	2010336	Symbol	zend_hash_str_find_ptr		2010280						
ANR	2010337	Symbol	* elem		2010280						
ANR	2010338	Symbol	key		2010280						
ANR	2010339	Function	accounted_emalloc	118:0:2859:3033							
ANR	2010340	FunctionDef	"accounted_emalloc (size_t alloc_size , ser_context * ctx)"		2010339	0					
ANR	2010341	CompoundStatement		119:0:2934:3033	2010339	0					
ANR	2010342	IdentifierDeclStatement	void * ret = emalloc ( alloc_size ) ;	120:1:2937:2968	2010339	0	True				
ANR	2010343	IdentifierDecl	* ret = emalloc ( alloc_size )		2010339	0					
ANR	2010344	IdentifierDeclType	void *		2010339	0					
ANR	2010345	Identifier	ret		2010339	1					
ANR	2010346	AssignmentExpression	* ret = emalloc ( alloc_size )		2010339	2		=			
ANR	2010347	Identifier	ret		2010339	0					
ANR	2010348	CallExpression	emalloc ( alloc_size )		2010339	1					
ANR	2010349	Callee	emalloc		2010339	0					
ANR	2010350	Identifier	emalloc		2010339	0					
ANR	2010351	ArgumentList	alloc_size		2010339	1					
ANR	2010352	Argument	alloc_size		2010339	0					
ANR	2010353	Identifier	alloc_size		2010339	0					
ANR	2010354	ExpressionStatement	"zend_llist_add_element ( & ctx -> allocations , & ret )"	121:1:2971:3018	2010339	1	True				
ANR	2010355	CallExpression	"zend_llist_add_element ( & ctx -> allocations , & ret )"		2010339	0					
ANR	2010356	Callee	zend_llist_add_element		2010339	0					
ANR	2010357	Identifier	zend_llist_add_element		2010339	0					
ANR	2010358	ArgumentList	& ctx -> allocations		2010339	1					
ANR	2010359	Argument	& ctx -> allocations		2010339	0					
ANR	2010360	UnaryOperationExpression	& ctx -> allocations		2010339	0					
ANR	2010361	UnaryOperator	&		2010339	0					
ANR	2010362	PtrMemberAccess	ctx -> allocations		2010339	1					
ANR	2010363	Identifier	ctx		2010339	0					
ANR	2010364	Identifier	allocations		2010339	1					
ANR	2010365	Argument	& ret		2010339	1					
ANR	2010366	UnaryOperationExpression	& ret		2010339	0					
ANR	2010367	UnaryOperator	&		2010339	0					
ANR	2010368	Identifier	ret		2010339	1					
ANR	2010369	ReturnStatement	return ret ;	122:1:3021:3031	2010339	2	True				
ANR	2010370	Identifier	ret		2010339	0					
ANR	2010371	ReturnType	static inline void *		2010339	1					
ANR	2010372	Identifier	accounted_emalloc		2010339	2					
ANR	2010373	ParameterList	"size_t alloc_size , ser_context * ctx"		2010339	3					
ANR	2010374	Parameter	size_t alloc_size	118:38:2897:2913	2010339	0	True				
ANR	2010375	ParameterType	size_t		2010339	0					
ANR	2010376	Identifier	alloc_size		2010339	1					
ANR	2010377	Parameter	ser_context * ctx	118:57:2916:2931	2010339	1	True				
ANR	2010378	ParameterType	ser_context *		2010339	0					
ANR	2010379	Identifier	ctx		2010339	1					
ANR	2010380	CFGEntryNode	ENTRY		2010339		True				
ANR	2010381	CFGExitNode	EXIT		2010339		True				
ANR	2010382	Symbol	ret		2010339						
ANR	2010383	Symbol	& ret		2010339						
ANR	2010384	Symbol	& ctx -> allocations		2010339						
ANR	2010385	Symbol	emalloc		2010339						
ANR	2010386	Symbol	ctx		2010339						
ANR	2010387	Symbol	alloc_size		2010339						
ANR	2010388	Function	accounted_ecalloc	124:0:3035:3230							
ANR	2010389	FunctionDef	"accounted_ecalloc (size_t nmemb , size_t alloc_size , ser_context * ctx)"		2010388	0					
ANR	2010390	CompoundStatement		125:0:3124:3230	2010388	0					
ANR	2010391	IdentifierDeclStatement	"void * ret = ecalloc ( nmemb , alloc_size ) ;"	126:1:3127:3165	2010388	0	True				
ANR	2010392	IdentifierDecl	"* ret = ecalloc ( nmemb , alloc_size )"		2010388	0					
ANR	2010393	IdentifierDeclType	void *		2010388	0					
ANR	2010394	Identifier	ret		2010388	1					
ANR	2010395	AssignmentExpression	"* ret = ecalloc ( nmemb , alloc_size )"		2010388	2		=			
ANR	2010396	Identifier	ret		2010388	0					
ANR	2010397	CallExpression	"ecalloc ( nmemb , alloc_size )"		2010388	1					
ANR	2010398	Callee	ecalloc		2010388	0					
ANR	2010399	Identifier	ecalloc		2010388	0					
ANR	2010400	ArgumentList	nmemb		2010388	1					
ANR	2010401	Argument	nmemb		2010388	0					
ANR	2010402	Identifier	nmemb		2010388	0					
ANR	2010403	Argument	alloc_size		2010388	1					
ANR	2010404	Identifier	alloc_size		2010388	0					
ANR	2010405	ExpressionStatement	"zend_llist_add_element ( & ctx -> allocations , & ret )"	127:1:3168:3215	2010388	1	True				
ANR	2010406	CallExpression	"zend_llist_add_element ( & ctx -> allocations , & ret )"		2010388	0					
ANR	2010407	Callee	zend_llist_add_element		2010388	0					
ANR	2010408	Identifier	zend_llist_add_element		2010388	0					
ANR	2010409	ArgumentList	& ctx -> allocations		2010388	1					
ANR	2010410	Argument	& ctx -> allocations		2010388	0					
ANR	2010411	UnaryOperationExpression	& ctx -> allocations		2010388	0					
ANR	2010412	UnaryOperator	&		2010388	0					
ANR	2010413	PtrMemberAccess	ctx -> allocations		2010388	1					
ANR	2010414	Identifier	ctx		2010388	0					
ANR	2010415	Identifier	allocations		2010388	1					
ANR	2010416	Argument	& ret		2010388	1					
ANR	2010417	UnaryOperationExpression	& ret		2010388	0					
ANR	2010418	UnaryOperator	&		2010388	0					
ANR	2010419	Identifier	ret		2010388	1					
ANR	2010420	ReturnStatement	return ret ;	128:1:3218:3228	2010388	2	True				
ANR	2010421	Identifier	ret		2010388	0					
ANR	2010422	ReturnType	static inline void *		2010388	1					
ANR	2010423	Identifier	accounted_ecalloc		2010388	2					
ANR	2010424	ParameterList	"size_t nmemb , size_t alloc_size , ser_context * ctx"		2010388	3					
ANR	2010425	Parameter	size_t nmemb	124:38:3073:3084	2010388	0	True				
ANR	2010426	ParameterType	size_t		2010388	0					
ANR	2010427	Identifier	nmemb		2010388	1					
ANR	2010428	Parameter	size_t alloc_size	124:52:3087:3103	2010388	1	True				
ANR	2010429	ParameterType	size_t		2010388	0					
ANR	2010430	Identifier	alloc_size		2010388	1					
ANR	2010431	Parameter	ser_context * ctx	124:71:3106:3121	2010388	2	True				
ANR	2010432	ParameterType	ser_context *		2010388	0					
ANR	2010433	Identifier	ctx		2010388	1					
ANR	2010434	CFGEntryNode	ENTRY		2010388		True				
ANR	2010435	CFGExitNode	EXIT		2010388		True				
ANR	2010436	Symbol	ret		2010388						
ANR	2010437	Symbol	& ret		2010388						
ANR	2010438	Symbol	& ctx -> allocations		2010388						
ANR	2010439	Symbol	ctx		2010388						
ANR	2010440	Symbol	ecalloc		2010388						
ANR	2010441	Symbol	nmemb		2010388						
ANR	2010442	Symbol	alloc_size		2010388						
ANR	2010443	Function	accounted_safe_ecalloc	130:0:3232:3509							
ANR	2010444	FunctionDef	"accounted_safe_ecalloc (size_t nmemb , size_t alloc_size , size_t offset , ser_context * ctx)"		2010443	0					
ANR	2010445	CompoundStatement		131:0:3341:3509	2010443	0					
ANR	2010446	IdentifierDeclStatement	"void * ret = safe_emalloc ( nmemb , alloc_size , offset ) ;"	132:1:3344:3395	2010443	0	True				
ANR	2010447	IdentifierDecl	"* ret = safe_emalloc ( nmemb , alloc_size , offset )"		2010443	0					
ANR	2010448	IdentifierDeclType	void *		2010443	0					
ANR	2010449	Identifier	ret		2010443	1					
ANR	2010450	AssignmentExpression	"* ret = safe_emalloc ( nmemb , alloc_size , offset )"		2010443	2		=			
ANR	2010451	Identifier	ret		2010443	0					
ANR	2010452	CallExpression	"safe_emalloc ( nmemb , alloc_size , offset )"		2010443	1					
ANR	2010453	Callee	safe_emalloc		2010443	0					
ANR	2010454	Identifier	safe_emalloc		2010443	0					
ANR	2010455	ArgumentList	nmemb		2010443	1					
ANR	2010456	Argument	nmemb		2010443	0					
ANR	2010457	Identifier	nmemb		2010443	0					
ANR	2010458	Argument	alloc_size		2010443	1					
ANR	2010459	Identifier	alloc_size		2010443	0					
ANR	2010460	Argument	offset		2010443	2					
ANR	2010461	Identifier	offset		2010443	0					
ANR	2010462	ExpressionStatement	"memset ( ret , '\\0' , nmemb * alloc_size + offset )"	133:1:3398:3444	2010443	1	True				
ANR	2010463	CallExpression	"memset ( ret , '\\0' , nmemb * alloc_size + offset )"		2010443	0					
ANR	2010464	Callee	memset		2010443	0					
ANR	2010465	Identifier	memset		2010443	0					
ANR	2010466	ArgumentList	ret		2010443	1					
ANR	2010467	Argument	ret		2010443	0					
ANR	2010468	Identifier	ret		2010443	0					
ANR	2010469	Argument	'\\0'		2010443	1					
ANR	2010470	PrimaryExpression	'\\0'		2010443	0					
ANR	2010471	Argument	nmemb * alloc_size + offset		2010443	2					
ANR	2010472	AdditiveExpression	nmemb * alloc_size + offset		2010443	0		+			
ANR	2010473	MultiplicativeExpression	nmemb * alloc_size		2010443	0		*			
ANR	2010474	Identifier	nmemb		2010443	0					
ANR	2010475	Identifier	alloc_size		2010443	1					
ANR	2010476	Identifier	offset		2010443	1					
ANR	2010477	ExpressionStatement	"zend_llist_add_element ( & ctx -> allocations , & ret )"	134:1:3447:3494	2010443	2	True				
ANR	2010478	CallExpression	"zend_llist_add_element ( & ctx -> allocations , & ret )"		2010443	0					
ANR	2010479	Callee	zend_llist_add_element		2010443	0					
ANR	2010480	Identifier	zend_llist_add_element		2010443	0					
ANR	2010481	ArgumentList	& ctx -> allocations		2010443	1					
ANR	2010482	Argument	& ctx -> allocations		2010443	0					
ANR	2010483	UnaryOperationExpression	& ctx -> allocations		2010443	0					
ANR	2010484	UnaryOperator	&		2010443	0					
ANR	2010485	PtrMemberAccess	ctx -> allocations		2010443	1					
ANR	2010486	Identifier	ctx		2010443	0					
ANR	2010487	Identifier	allocations		2010443	1					
ANR	2010488	Argument	& ret		2010443	1					
ANR	2010489	UnaryOperationExpression	& ret		2010443	0					
ANR	2010490	UnaryOperator	&		2010443	0					
ANR	2010491	Identifier	ret		2010443	1					
ANR	2010492	ReturnStatement	return ret ;	135:1:3497:3507	2010443	3	True				
ANR	2010493	Identifier	ret		2010443	0					
ANR	2010494	ReturnType	static inline void *		2010443	1					
ANR	2010495	Identifier	accounted_safe_ecalloc		2010443	2					
ANR	2010496	ParameterList	"size_t nmemb , size_t alloc_size , size_t offset , ser_context * ctx"		2010443	3					
ANR	2010497	Parameter	size_t nmemb	130:43:3275:3286	2010443	0	True				
ANR	2010498	ParameterType	size_t		2010443	0					
ANR	2010499	Identifier	nmemb		2010443	1					
ANR	2010500	Parameter	size_t alloc_size	130:57:3289:3305	2010443	1	True				
ANR	2010501	ParameterType	size_t		2010443	0					
ANR	2010502	Identifier	alloc_size		2010443	1					
ANR	2010503	Parameter	size_t offset	130:76:3308:3320	2010443	2	True				
ANR	2010504	ParameterType	size_t		2010443	0					
ANR	2010505	Identifier	offset		2010443	1					
ANR	2010506	Parameter	ser_context * ctx	130:91:3323:3338	2010443	3	True				
ANR	2010507	ParameterType	ser_context *		2010443	0					
ANR	2010508	Identifier	ctx		2010443	1					
ANR	2010509	CFGEntryNode	ENTRY		2010443		True				
ANR	2010510	CFGExitNode	EXIT		2010443		True				
ANR	2010511	Symbol	ret		2010443						
ANR	2010512	Symbol	& ret		2010443						
ANR	2010513	Symbol	& ctx -> allocations		2010443						
ANR	2010514	Symbol	offset		2010443						
ANR	2010515	Symbol	ctx		2010443						
ANR	2010516	Symbol	nmemb		2010443						
ANR	2010517	Symbol	safe_emalloc		2010443						
ANR	2010518	Symbol	alloc_size		2010443						
ANR	2010519	Function	do_from_to_zval_err	139:0:3525:4464							
ANR	2010520	FunctionDef	"do_from_to_zval_err (struct err_s * err , zend_llist * keys , const char * what_conv , const char * fmt , va_list ap)"		2010519	0					
ANR	2010521	CompoundStatement		144:0:3678:4464	2010519	0					
ANR	2010522	IdentifierDeclStatement	smart_str path = { 0 } ;	145:1:3681:3703	2010519	0	True				
ANR	2010523	IdentifierDecl	path = { 0 }		2010519	0					
ANR	2010524	IdentifierDeclType	smart_str		2010519	0					
ANR	2010525	Identifier	path		2010519	1					
ANR	2010526	AssignmentExpression	path = { 0 }		2010519	2		=			
ANR	2010527	Identifier	path		2010519	0					
ANR	2010528	InitializerList	0		2010519	1					
ANR	2010529	PrimaryExpression	0		2010519	0					
ANR	2010530	IdentifierDeclStatement	const char * * node ;	146:1:3706:3725	2010519	1	True				
ANR	2010531	IdentifierDecl	* * node		2010519	0					
ANR	2010532	IdentifierDeclType	const char * *		2010519	0					
ANR	2010533	Identifier	node		2010519	1					
ANR	2010534	IdentifierDeclStatement	char * user_msg ;	147:1:3728:3745	2010519	2	True				
ANR	2010535	IdentifierDecl	* user_msg		2010519	0					
ANR	2010536	IdentifierDeclType	char *		2010519	0					
ANR	2010537	Identifier	user_msg		2010519	1					
ANR	2010538	IdentifierDeclStatement	int user_msg_size ;	148:1:3748:3769	2010519	3	True				
ANR	2010539	IdentifierDecl	user_msg_size		2010519	0					
ANR	2010540	IdentifierDeclType	int		2010519	0					
ANR	2010541	Identifier	user_msg_size		2010519	1					
ANR	2010542	IdentifierDeclStatement	zend_llist_position pos ;	149:1:3772:3795	2010519	4	True				
ANR	2010543	IdentifierDecl	pos		2010519	0					
ANR	2010544	IdentifierDeclType	zend_llist_position		2010519	0					
ANR	2010545	Identifier	pos		2010519	1					
ANR	2010546	IfStatement	if ( err -> has_error )		2010519	5					
ANR	2010547	Condition	err -> has_error	151:5:3803:3816	2010519	0	True				
ANR	2010548	PtrMemberAccess	err -> has_error		2010519	0					
ANR	2010549	Identifier	err		2010519	0					
ANR	2010550	Identifier	has_error		2010519	1					
ANR	2010551	CompoundStatement		8:21:140:140	2010519	1					
ANR	2010552	ReturnStatement	return ;	152:2:3823:3829	2010519	0	True				
ANR	2010553	ForStatement	"for ( node = zend_llist_get_first_ex ( keys , & pos ) ; node != NULL ; node = zend_llist_get_next_ex ( keys , & pos ) )"		2010519	6					
ANR	2010554	ForInit	"node = zend_llist_get_first_ex ( keys , & pos ) ;"	155:6:3841:3883	2010519	0	True				
ANR	2010555	AssignmentExpression	"node = zend_llist_get_first_ex ( keys , & pos )"		2010519	0		=			
ANR	2010556	Identifier	node		2010519	0					
ANR	2010557	CallExpression	"zend_llist_get_first_ex ( keys , & pos )"		2010519	1					
ANR	2010558	Callee	zend_llist_get_first_ex		2010519	0					
ANR	2010559	Identifier	zend_llist_get_first_ex		2010519	0					
ANR	2010560	ArgumentList	keys		2010519	1					
ANR	2010561	Argument	keys		2010519	0					
ANR	2010562	Identifier	keys		2010519	0					
ANR	2010563	Argument	& pos		2010519	1					
ANR	2010564	UnaryOperationExpression	& pos		2010519	0					
ANR	2010565	UnaryOperator	&		2010519	0					
ANR	2010566	Identifier	pos		2010519	1					
ANR	2010567	Condition	node != NULL	156:3:3888:3899	2010519	1	True				
ANR	2010568	EqualityExpression	node != NULL		2010519	0		!=			
ANR	2010569	Identifier	node		2010519	0					
ANR	2010570	Identifier	NULL		2010519	1					
ANR	2010571	AssignmentExpression	"node = zend_llist_get_next_ex ( keys , & pos )"	157:3:3905:3945	2010519	2	True	=			
ANR	2010572	Identifier	node		2010519	0					
ANR	2010573	CallExpression	"zend_llist_get_next_ex ( keys , & pos )"		2010519	1					
ANR	2010574	Callee	zend_llist_get_next_ex		2010519	0					
ANR	2010575	Identifier	zend_llist_get_next_ex		2010519	0					
ANR	2010576	ArgumentList	keys		2010519	1					
ANR	2010577	Argument	keys		2010519	0					
ANR	2010578	Identifier	keys		2010519	0					
ANR	2010579	Argument	& pos		2010519	1					
ANR	2010580	UnaryOperationExpression	& pos		2010519	0					
ANR	2010581	UnaryOperator	&		2010519	0					
ANR	2010582	Identifier	pos		2010519	1					
ANR	2010583	CompoundStatement		14:46:269:269	2010519	3					
ANR	2010584	ExpressionStatement	"smart_str_appends ( & path , * node )"	158:2:3952:3983	2010519	0	True				
ANR	2010585	CallExpression	"smart_str_appends ( & path , * node )"		2010519	0					
ANR	2010586	Callee	smart_str_appends		2010519	0					
ANR	2010587	Identifier	smart_str_appends		2010519	0					
ANR	2010588	ArgumentList	& path		2010519	1					
ANR	2010589	Argument	& path		2010519	0					
ANR	2010590	UnaryOperationExpression	& path		2010519	0					
ANR	2010591	UnaryOperator	&		2010519	0					
ANR	2010592	Identifier	path		2010519	1					
ANR	2010593	Argument	* node		2010519	1					
ANR	2010594	UnaryOperationExpression	* node		2010519	0					
ANR	2010595	UnaryOperator	*		2010519	0					
ANR	2010596	Identifier	node		2010519	1					
ANR	2010597	ExpressionStatement	"smart_str_appends ( & path , "" > "" )"	159:2:3987:4018	2010519	1	True				
ANR	2010598	CallExpression	"smart_str_appends ( & path , "" > "" )"		2010519	0					
ANR	2010599	Callee	smart_str_appends		2010519	0					
ANR	2010600	Identifier	smart_str_appends		2010519	0					
ANR	2010601	ArgumentList	& path		2010519	1					
ANR	2010602	Argument	& path		2010519	0					
ANR	2010603	UnaryOperationExpression	& path		2010519	0					
ANR	2010604	UnaryOperator	&		2010519	0					
ANR	2010605	Identifier	path		2010519	1					
ANR	2010606	Argument	""" > """		2010519	1					
ANR	2010607	PrimaryExpression	""" > """		2010519	0					
ANR	2010608	IfStatement	if ( path . s && ZSTR_LEN ( path . s ) > 3 )		2010519	7					
ANR	2010609	Condition	path . s && ZSTR_LEN ( path . s ) > 3	162:5:4029:4058	2010519	0	True				
ANR	2010610	AndExpression	path . s && ZSTR_LEN ( path . s ) > 3		2010519	0		&&			
ANR	2010611	MemberAccess	path . s		2010519	0					
ANR	2010612	Identifier	path		2010519	0					
ANR	2010613	Identifier	s		2010519	1					
ANR	2010614	RelationalExpression	ZSTR_LEN ( path . s ) > 3		2010519	1		>			
ANR	2010615	CallExpression	ZSTR_LEN ( path . s )		2010519	0					
ANR	2010616	Callee	ZSTR_LEN		2010519	0					
ANR	2010617	Identifier	ZSTR_LEN		2010519	0					
ANR	2010618	ArgumentList	path . s		2010519	1					
ANR	2010619	Argument	path . s		2010519	0					
ANR	2010620	MemberAccess	path . s		2010519	0					
ANR	2010621	Identifier	path		2010519	0					
ANR	2010622	Identifier	s		2010519	1					
ANR	2010623	PrimaryExpression	3		2010519	1					
ANR	2010624	CompoundStatement		19:37:382:382	2010519	1					
ANR	2010625	ExpressionStatement	ZSTR_LEN ( path . s ) -= 3	163:2:4065:4086	2010519	0	True				
ANR	2010626	AssignmentExpression	ZSTR_LEN ( path . s ) -= 3		2010519	0		-=			
ANR	2010627	CallExpression	ZSTR_LEN ( path . s )		2010519	0					
ANR	2010628	Callee	ZSTR_LEN		2010519	0					
ANR	2010629	Identifier	ZSTR_LEN		2010519	0					
ANR	2010630	ArgumentList	path . s		2010519	1					
ANR	2010631	Argument	path . s		2010519	0					
ANR	2010632	MemberAccess	path . s		2010519	0					
ANR	2010633	Identifier	path		2010519	0					
ANR	2010634	Identifier	s		2010519	1					
ANR	2010635	PrimaryExpression	3		2010519	1					
ANR	2010636	ExpressionStatement	smart_str_0 ( & path )	165:1:4092:4110	2010519	8	True				
ANR	2010637	CallExpression	smart_str_0 ( & path )		2010519	0					
ANR	2010638	Callee	smart_str_0		2010519	0					
ANR	2010639	Identifier	smart_str_0		2010519	0					
ANR	2010640	ArgumentList	& path		2010519	1					
ANR	2010641	Argument	& path		2010519	0					
ANR	2010642	UnaryOperationExpression	& path		2010519	0					
ANR	2010643	UnaryOperator	&		2010519	0					
ANR	2010644	Identifier	path		2010519	1					
ANR	2010645	ExpressionStatement	"user_msg_size = vspprintf ( & user_msg , 0 , fmt , ap )"	167:1:4114:4162	2010519	9	True				
ANR	2010646	AssignmentExpression	"user_msg_size = vspprintf ( & user_msg , 0 , fmt , ap )"		2010519	0		=			
ANR	2010647	Identifier	user_msg_size		2010519	0					
ANR	2010648	CallExpression	"vspprintf ( & user_msg , 0 , fmt , ap )"		2010519	1					
ANR	2010649	Callee	vspprintf		2010519	0					
ANR	2010650	Identifier	vspprintf		2010519	0					
ANR	2010651	ArgumentList	& user_msg		2010519	1					
ANR	2010652	Argument	& user_msg		2010519	0					
ANR	2010653	UnaryOperationExpression	& user_msg		2010519	0					
ANR	2010654	UnaryOperator	&		2010519	0					
ANR	2010655	Identifier	user_msg		2010519	1					
ANR	2010656	Argument	0		2010519	1					
ANR	2010657	PrimaryExpression	0		2010519	0					
ANR	2010658	Argument	fmt		2010519	2					
ANR	2010659	Identifier	fmt		2010519	0					
ANR	2010660	Argument	ap		2010519	3					
ANR	2010661	Identifier	ap		2010519	0					
ANR	2010662	ExpressionStatement	err -> has_error = 1	169:1:4166:4184	2010519	10	True				
ANR	2010663	AssignmentExpression	err -> has_error = 1		2010519	0		=			
ANR	2010664	PtrMemberAccess	err -> has_error		2010519	0					
ANR	2010665	Identifier	err		2010519	0					
ANR	2010666	Identifier	has_error		2010519	1					
ANR	2010667	PrimaryExpression	1		2010519	1					
ANR	2010668	ExpressionStatement	err -> level = E_WARNING	170:1:4187:4209	2010519	11	True				
ANR	2010669	AssignmentExpression	err -> level = E_WARNING		2010519	0		=			
ANR	2010670	PtrMemberAccess	err -> level		2010519	0					
ANR	2010671	Identifier	err		2010519	0					
ANR	2010672	Identifier	level		2010519	1					
ANR	2010673	Identifier	E_WARNING		2010519	1					
ANR	2010674	ExpressionStatement	"spprintf ( & err -> msg , 0 , ""error converting %s data (path: %s): %.*s"" , what_conv , path . s && * ZSTR_VAL ( path . s ) != '\\0' ? ZSTR_VAL ( path . s ) : ""unavailable"" , user_msg_size , user_msg )"	171:1:4212:4396	2010519	12	True				
ANR	2010675	CallExpression	"spprintf ( & err -> msg , 0 , ""error converting %s data (path: %s): %.*s"" , what_conv , path . s && * ZSTR_VAL ( path . s ) != '\\0' ? ZSTR_VAL ( path . s ) : ""unavailable"" , user_msg_size , user_msg )"		2010519	0					
ANR	2010676	Callee	spprintf		2010519	0					
ANR	2010677	Identifier	spprintf		2010519	0					
ANR	2010678	ArgumentList	& err -> msg		2010519	1					
ANR	2010679	Argument	& err -> msg		2010519	0					
ANR	2010680	UnaryOperationExpression	& err -> msg		2010519	0					
ANR	2010681	UnaryOperator	&		2010519	0					
ANR	2010682	PtrMemberAccess	err -> msg		2010519	1					
ANR	2010683	Identifier	err		2010519	0					
ANR	2010684	Identifier	msg		2010519	1					
ANR	2010685	Argument	0		2010519	1					
ANR	2010686	PrimaryExpression	0		2010519	0					
ANR	2010687	Argument	"""error converting %s data (path: %s): %.*s"""		2010519	2					
ANR	2010688	PrimaryExpression	"""error converting %s data (path: %s): %.*s"""		2010519	0					
ANR	2010689	Argument	what_conv		2010519	3					
ANR	2010690	Identifier	what_conv		2010519	0					
ANR	2010691	Argument	"path . s && * ZSTR_VAL ( path . s ) != '\\0' ? ZSTR_VAL ( path . s ) : ""unavailable"""		2010519	4					
ANR	2010692	ConditionalExpression	"path . s && * ZSTR_VAL ( path . s ) != '\\0' ? ZSTR_VAL ( path . s ) : ""unavailable"""		2010519	0					
ANR	2010693	Condition	path . s && * ZSTR_VAL ( path . s ) != '\\0'		2010519	0					
ANR	2010694	AndExpression	path . s && * ZSTR_VAL ( path . s ) != '\\0'		2010519	0		&&			
ANR	2010695	MemberAccess	path . s		2010519	0					
ANR	2010696	Identifier	path		2010519	0					
ANR	2010697	Identifier	s		2010519	1					
ANR	2010698	EqualityExpression	* ZSTR_VAL ( path . s ) != '\\0'		2010519	1		!=			
ANR	2010699	UnaryOperationExpression	* ZSTR_VAL ( path . s )		2010519	0					
ANR	2010700	UnaryOperator	*		2010519	0					
ANR	2010701	CallExpression	ZSTR_VAL ( path . s )		2010519	1					
ANR	2010702	Callee	ZSTR_VAL		2010519	0					
ANR	2010703	Identifier	ZSTR_VAL		2010519	0					
ANR	2010704	ArgumentList	path . s		2010519	1					
ANR	2010705	Argument	path . s		2010519	0					
ANR	2010706	MemberAccess	path . s		2010519	0					
ANR	2010707	Identifier	path		2010519	0					
ANR	2010708	Identifier	s		2010519	1					
ANR	2010709	PrimaryExpression	'\\0'		2010519	1					
ANR	2010710	CallExpression	ZSTR_VAL ( path . s )		2010519	1					
ANR	2010711	Callee	ZSTR_VAL		2010519	0					
ANR	2010712	Identifier	ZSTR_VAL		2010519	0					
ANR	2010713	ArgumentList	path . s		2010519	1					
ANR	2010714	Argument	path . s		2010519	0					
ANR	2010715	MemberAccess	path . s		2010519	0					
ANR	2010716	Identifier	path		2010519	0					
ANR	2010717	Identifier	s		2010519	1					
ANR	2010718	PrimaryExpression	"""unavailable"""		2010519	2					
ANR	2010719	Argument	user_msg_size		2010519	5					
ANR	2010720	Identifier	user_msg_size		2010519	0					
ANR	2010721	Argument	user_msg		2010519	6					
ANR	2010722	Identifier	user_msg		2010519	0					
ANR	2010723	ExpressionStatement	err -> should_free = 1	175:1:4399:4419	2010519	13	True				
ANR	2010724	AssignmentExpression	err -> should_free = 1		2010519	0		=			
ANR	2010725	PtrMemberAccess	err -> should_free		2010519	0					
ANR	2010726	Identifier	err		2010519	0					
ANR	2010727	Identifier	should_free		2010519	1					
ANR	2010728	PrimaryExpression	1		2010519	1					
ANR	2010729	ExpressionStatement	efree ( user_msg )	177:1:4423:4438	2010519	14	True				
ANR	2010730	CallExpression	efree ( user_msg )		2010519	0					
ANR	2010731	Callee	efree		2010519	0					
ANR	2010732	Identifier	efree		2010519	0					
ANR	2010733	ArgumentList	user_msg		2010519	1					
ANR	2010734	Argument	user_msg		2010519	0					
ANR	2010735	Identifier	user_msg		2010519	0					
ANR	2010736	ExpressionStatement	smart_str_free ( & path )	178:1:4441:4462	2010519	15	True				
ANR	2010737	CallExpression	smart_str_free ( & path )		2010519	0					
ANR	2010738	Callee	smart_str_free		2010519	0					
ANR	2010739	Identifier	smart_str_free		2010519	0					
ANR	2010740	ArgumentList	& path		2010519	1					
ANR	2010741	Argument	& path		2010519	0					
ANR	2010742	UnaryOperationExpression	& path		2010519	0					
ANR	2010743	UnaryOperator	&		2010519	0					
ANR	2010744	Identifier	path		2010519	1					
ANR	2010745	ReturnType	static void		2010519	1					
ANR	2010746	Identifier	do_from_to_zval_err		2010519	2					
ANR	2010747	ParameterList	"struct err_s * err , zend_llist * keys , const char * what_conv , const char * fmt , va_list ap"		2010519	3					
ANR	2010748	Parameter	struct err_s * err	139:32:3557:3573	2010519	0	True				
ANR	2010749	ParameterType	struct err_s *		2010519	0					
ANR	2010750	Identifier	err		2010519	1					
ANR	2010751	Parameter	zend_llist * keys	140:8:3584:3599	2010519	1	True				
ANR	2010752	ParameterType	zend_llist *		2010519	0					
ANR	2010753	Identifier	keys		2010519	1					
ANR	2010754	Parameter	const char * what_conv	141:8:3610:3630	2010519	2	True				
ANR	2010755	ParameterType	const char *		2010519	0					
ANR	2010756	Identifier	what_conv		2010519	1					
ANR	2010757	Parameter	const char * fmt	142:8:3641:3655	2010519	3	True				
ANR	2010758	ParameterType	const char *		2010519	0					
ANR	2010759	Identifier	fmt		2010519	1					
ANR	2010760	Parameter	va_list ap	143:8:3666:3675	2010519	4	True				
ANR	2010761	ParameterType	va_list		2010519	0					
ANR	2010762	Identifier	ap		2010519	1					
ANR	2010763	CFGEntryNode	ENTRY		2010519		True				
ANR	2010764	CFGExitNode	EXIT		2010519		True				
ANR	2010765	Symbol	keys		2010519						
ANR	2010766	Symbol	fmt		2010519						
ANR	2010767	Symbol	& path		2010519						
ANR	2010768	Symbol	& user_msg		2010519						
ANR	2010769	Symbol	E_WARNING		2010519						
ANR	2010770	Symbol	path		2010519						
ANR	2010771	Symbol	err -> has_error		2010519						
ANR	2010772	Symbol	pos		2010519						
ANR	2010773	Symbol	zend_llist_get_next_ex		2010519						
ANR	2010774	Symbol	* node		2010519						
ANR	2010775	Symbol	& err -> msg		2010519						
ANR	2010776	Symbol	* ZSTR_VAL		2010519						
ANR	2010777	Symbol	NULL		2010519						
ANR	2010778	Symbol	err		2010519						
ANR	2010779	Symbol	what_conv		2010519						
ANR	2010780	Symbol	vspprintf		2010519						
ANR	2010781	Symbol	ap		2010519						
ANR	2010782	Symbol	user_msg		2010519						
ANR	2010783	Symbol	ZSTR_VAL		2010519						
ANR	2010784	Symbol	user_msg_size		2010519						
ANR	2010785	Symbol	* err		2010519						
ANR	2010786	Symbol	node		2010519						
ANR	2010787	Symbol	err -> level		2010519						
ANR	2010788	Symbol	ZSTR_LEN		2010519						
ANR	2010789	Symbol	* ZSTR_VAL ( path . s )		2010519						
ANR	2010790	Symbol	& pos		2010519						
ANR	2010791	Symbol	zend_llist_get_first_ex		2010519						
ANR	2010792	Symbol	path . s		2010519						
ANR	2010793	Symbol	err -> should_free		2010519						
ANR	2010794	Function	do_from_zval_err	181:0:4502:4682							
ANR	2010795	FunctionDef	"do_from_zval_err (ser_context * ctx , const char * fmt)"		2010794	0					
ANR	2010796	CompoundStatement		182:0:4571:4682	2010794	0					
ANR	2010797	IdentifierDeclStatement	va_list ap ;	183:1:4574:4584	2010794	0	True				
ANR	2010798	IdentifierDecl	ap		2010794	0					
ANR	2010799	IdentifierDeclType	va_list		2010794	0					
ANR	2010800	Identifier	ap		2010794	1					
ANR	2010801	ExpressionStatement	"va_start ( ap , fmt )"	185:1:4588:4605	2010794	1	True				
ANR	2010802	CallExpression	"va_start ( ap , fmt )"		2010794	0					
ANR	2010803	Callee	va_start		2010794	0					
ANR	2010804	Identifier	va_start		2010794	0					
ANR	2010805	ArgumentList	ap		2010794	1					
ANR	2010806	Argument	ap		2010794	0					
ANR	2010807	Identifier	ap		2010794	0					
ANR	2010808	Argument	fmt		2010794	1					
ANR	2010809	Identifier	fmt		2010794	0					
ANR	2010810	ExpressionStatement	"do_from_to_zval_err ( & ctx -> err , & ctx -> keys , ""user"" , fmt , ap )"	186:1:4608:4667	2010794	2	True				
ANR	2010811	CallExpression	"do_from_to_zval_err ( & ctx -> err , & ctx -> keys , ""user"" , fmt , ap )"		2010794	0					
ANR	2010812	Callee	do_from_to_zval_err		2010794	0					
ANR	2010813	Identifier	do_from_to_zval_err		2010794	0					
ANR	2010814	ArgumentList	& ctx -> err		2010794	1					
ANR	2010815	Argument	& ctx -> err		2010794	0					
ANR	2010816	UnaryOperationExpression	& ctx -> err		2010794	0					
ANR	2010817	UnaryOperator	&		2010794	0					
ANR	2010818	PtrMemberAccess	ctx -> err		2010794	1					
ANR	2010819	Identifier	ctx		2010794	0					
ANR	2010820	Identifier	err		2010794	1					
ANR	2010821	Argument	& ctx -> keys		2010794	1					
ANR	2010822	UnaryOperationExpression	& ctx -> keys		2010794	0					
ANR	2010823	UnaryOperator	&		2010794	0					
ANR	2010824	PtrMemberAccess	ctx -> keys		2010794	1					
ANR	2010825	Identifier	ctx		2010794	0					
ANR	2010826	Identifier	keys		2010794	1					
ANR	2010827	Argument	"""user"""		2010794	2					
ANR	2010828	PrimaryExpression	"""user"""		2010794	0					
ANR	2010829	Argument	fmt		2010794	3					
ANR	2010830	Identifier	fmt		2010794	0					
ANR	2010831	Argument	ap		2010794	4					
ANR	2010832	Identifier	ap		2010794	0					
ANR	2010833	ExpressionStatement	va_end ( ap )	187:1:4670:4680	2010794	3	True				
ANR	2010834	CallExpression	va_end ( ap )		2010794	0					
ANR	2010835	Callee	va_end		2010794	0					
ANR	2010836	Identifier	va_end		2010794	0					
ANR	2010837	ArgumentList	ap		2010794	1					
ANR	2010838	Argument	ap		2010794	0					
ANR	2010839	Identifier	ap		2010794	0					
ANR	2010840	ReturnType	static void		2010794	1					
ANR	2010841	Identifier	do_from_zval_err		2010794	2					
ANR	2010842	ParameterList	"ser_context * ctx , const char * fmt"		2010794	3					
ANR	2010843	Parameter	ser_context * ctx	181:29:4531:4546	2010794	0	True				
ANR	2010844	ParameterType	ser_context *		2010794	0					
ANR	2010845	Identifier	ctx		2010794	1					
ANR	2010846	Parameter	const char * fmt	181:47:4549:4563	2010794	1	True				
ANR	2010847	ParameterType	const char *		2010794	0					
ANR	2010848	Identifier	fmt		2010794	1					
ANR	2010849	CFGEntryNode	ENTRY		2010794		True				
ANR	2010850	CFGExitNode	EXIT		2010794		True				
ANR	2010851	Symbol	& ctx -> keys		2010794						
ANR	2010852	Symbol	ctx		2010794						
ANR	2010853	Symbol	fmt		2010794						
ANR	2010854	Symbol	ap		2010794						
ANR	2010855	Symbol	& ctx -> err		2010794						
ANR	2010856	Function	do_to_zval_err	190:0:4720:4900							
ANR	2010857	FunctionDef	"do_to_zval_err (res_context * ctx , const char * fmt)"		2010856	0					
ANR	2010858	CompoundStatement		191:0:4787:4900	2010856	0					
ANR	2010859	IdentifierDeclStatement	va_list ap ;	192:1:4790:4800	2010856	0	True				
ANR	2010860	IdentifierDecl	ap		2010856	0					
ANR	2010861	IdentifierDeclType	va_list		2010856	0					
ANR	2010862	Identifier	ap		2010856	1					
ANR	2010863	ExpressionStatement	"va_start ( ap , fmt )"	194:1:4804:4821	2010856	1	True				
ANR	2010864	CallExpression	"va_start ( ap , fmt )"		2010856	0					
ANR	2010865	Callee	va_start		2010856	0					
ANR	2010866	Identifier	va_start		2010856	0					
ANR	2010867	ArgumentList	ap		2010856	1					
ANR	2010868	Argument	ap		2010856	0					
ANR	2010869	Identifier	ap		2010856	0					
ANR	2010870	Argument	fmt		2010856	1					
ANR	2010871	Identifier	fmt		2010856	0					
ANR	2010872	ExpressionStatement	"do_from_to_zval_err ( & ctx -> err , & ctx -> keys , ""native"" , fmt , ap )"	195:1:4824:4885	2010856	2	True				
ANR	2010873	CallExpression	"do_from_to_zval_err ( & ctx -> err , & ctx -> keys , ""native"" , fmt , ap )"		2010856	0					
ANR	2010874	Callee	do_from_to_zval_err		2010856	0					
ANR	2010875	Identifier	do_from_to_zval_err		2010856	0					
ANR	2010876	ArgumentList	& ctx -> err		2010856	1					
ANR	2010877	Argument	& ctx -> err		2010856	0					
ANR	2010878	UnaryOperationExpression	& ctx -> err		2010856	0					
ANR	2010879	UnaryOperator	&		2010856	0					
ANR	2010880	PtrMemberAccess	ctx -> err		2010856	1					
ANR	2010881	Identifier	ctx		2010856	0					
ANR	2010882	Identifier	err		2010856	1					
ANR	2010883	Argument	& ctx -> keys		2010856	1					
ANR	2010884	UnaryOperationExpression	& ctx -> keys		2010856	0					
ANR	2010885	UnaryOperator	&		2010856	0					
ANR	2010886	PtrMemberAccess	ctx -> keys		2010856	1					
ANR	2010887	Identifier	ctx		2010856	0					
ANR	2010888	Identifier	keys		2010856	1					
ANR	2010889	Argument	"""native"""		2010856	2					
ANR	2010890	PrimaryExpression	"""native"""		2010856	0					
ANR	2010891	Argument	fmt		2010856	3					
ANR	2010892	Identifier	fmt		2010856	0					
ANR	2010893	Argument	ap		2010856	4					
ANR	2010894	Identifier	ap		2010856	0					
ANR	2010895	ExpressionStatement	va_end ( ap )	196:1:4888:4898	2010856	3	True				
ANR	2010896	CallExpression	va_end ( ap )		2010856	0					
ANR	2010897	Callee	va_end		2010856	0					
ANR	2010898	Identifier	va_end		2010856	0					
ANR	2010899	ArgumentList	ap		2010856	1					
ANR	2010900	Argument	ap		2010856	0					
ANR	2010901	Identifier	ap		2010856	0					
ANR	2010902	ReturnType	static void		2010856	1					
ANR	2010903	Identifier	do_to_zval_err		2010856	2					
ANR	2010904	ParameterList	"res_context * ctx , const char * fmt"		2010856	3					
ANR	2010905	Parameter	res_context * ctx	190:27:4747:4762	2010856	0	True				
ANR	2010906	ParameterType	res_context *		2010856	0					
ANR	2010907	Identifier	ctx		2010856	1					
ANR	2010908	Parameter	const char * fmt	190:45:4765:4779	2010856	1	True				
ANR	2010909	ParameterType	const char *		2010856	0					
ANR	2010910	Identifier	fmt		2010856	1					
ANR	2010911	CFGEntryNode	ENTRY		2010856		True				
ANR	2010912	CFGExitNode	EXIT		2010856		True				
ANR	2010913	Symbol	& ctx -> keys		2010856						
ANR	2010914	Symbol	ctx		2010856						
ANR	2010915	Symbol	fmt		2010856						
ANR	2010916	Symbol	ap		2010856						
ANR	2010917	Symbol	& ctx -> err		2010856						
ANR	2010918	Function	err_msg_dispose	199:0:4903:5078							
ANR	2010919	FunctionDef	err_msg_dispose (struct err_s * err)		2010918	0					
ANR	2010920	CompoundStatement		200:0:4943:5078	2010918	0					
ANR	2010921	IfStatement	if ( err -> msg != NULL )		2010918	0					
ANR	2010922	Condition	err -> msg != NULL	201:5:4950:4965	2010918	0	True				
ANR	2010923	EqualityExpression	err -> msg != NULL		2010918	0		!=			
ANR	2010924	PtrMemberAccess	err -> msg		2010918	0					
ANR	2010925	Identifier	err		2010918	0					
ANR	2010926	Identifier	msg		2010918	1					
ANR	2010927	Identifier	NULL		2010918	1					
ANR	2010928	CompoundStatement		2:23:24:24	2010918	1					
ANR	2010929	ExpressionStatement	"php_error_docref0 ( NULL , err -> level , ""%s"" , err -> msg )"	202:2:4972:5023	2010918	0	True				
ANR	2010930	CallExpression	"php_error_docref0 ( NULL , err -> level , ""%s"" , err -> msg )"		2010918	0					
ANR	2010931	Callee	php_error_docref0		2010918	0					
ANR	2010932	Identifier	php_error_docref0		2010918	0					
ANR	2010933	ArgumentList	NULL		2010918	1					
ANR	2010934	Argument	NULL		2010918	0					
ANR	2010935	Identifier	NULL		2010918	0					
ANR	2010936	Argument	err -> level		2010918	1					
ANR	2010937	PtrMemberAccess	err -> level		2010918	0					
ANR	2010938	Identifier	err		2010918	0					
ANR	2010939	Identifier	level		2010918	1					
ANR	2010940	Argument	"""%s"""		2010918	2					
ANR	2010941	PrimaryExpression	"""%s"""		2010918	0					
ANR	2010942	Argument	err -> msg		2010918	3					
ANR	2010943	PtrMemberAccess	err -> msg		2010918	0					
ANR	2010944	Identifier	err		2010918	0					
ANR	2010945	Identifier	msg		2010918	1					
ANR	2010946	IfStatement	if ( err -> should_free )		2010918	1					
ANR	2010947	Condition	err -> should_free	203:6:5031:5046	2010918	0	True				
ANR	2010948	PtrMemberAccess	err -> should_free		2010918	0					
ANR	2010949	Identifier	err		2010918	0					
ANR	2010950	Identifier	should_free		2010918	1					
ANR	2010951	CompoundStatement		4:24:105:105	2010918	1					
ANR	2010952	ExpressionStatement	efree ( err -> msg )	204:3:5054:5069	2010918	0	True				
ANR	2010953	CallExpression	efree ( err -> msg )		2010918	0					
ANR	2010954	Callee	efree		2010918	0					
ANR	2010955	Identifier	efree		2010918	0					
ANR	2010956	ArgumentList	err -> msg		2010918	1					
ANR	2010957	Argument	err -> msg		2010918	0					
ANR	2010958	PtrMemberAccess	err -> msg		2010918	0					
ANR	2010959	Identifier	err		2010918	0					
ANR	2010960	Identifier	msg		2010918	1					
ANR	2010961	ReturnType	void		2010918	1					
ANR	2010962	Identifier	err_msg_dispose		2010918	2					
ANR	2010963	ParameterList	struct err_s * err		2010918	3					
ANR	2010964	Parameter	struct err_s * err	199:21:4924:4940	2010918	0	True				
ANR	2010965	ParameterType	struct err_s *		2010918	0					
ANR	2010966	Identifier	err		2010918	1					
ANR	2010967	CFGEntryNode	ENTRY		2010918		True				
ANR	2010968	CFGExitNode	EXIT		2010918		True				
ANR	2010969	Symbol	* err		2010918						
ANR	2010970	Symbol	NULL		2010918						
ANR	2010971	Symbol	err		2010918						
ANR	2010972	Symbol	err -> level		2010918						
ANR	2010973	Symbol	err -> msg		2010918						
ANR	2010974	Symbol	err -> should_free		2010918						
ANR	2010975	Function	allocations_dispose	208:0:5080:5212							
ANR	2010976	FunctionDef	allocations_dispose (zend_llist * * allocations)		2010975	0					
ANR	2010977	CompoundStatement		209:0:5131:5212	2010975	0					
ANR	2010978	ExpressionStatement	zend_llist_destroy ( * allocations )	210:1:5134:5166	2010975	0	True				
ANR	2010979	CallExpression	zend_llist_destroy ( * allocations )		2010975	0					
ANR	2010980	Callee	zend_llist_destroy		2010975	0					
ANR	2010981	Identifier	zend_llist_destroy		2010975	0					
ANR	2010982	ArgumentList	* allocations		2010975	1					
ANR	2010983	Argument	* allocations		2010975	0					
ANR	2010984	UnaryOperationExpression	* allocations		2010975	0					
ANR	2010985	UnaryOperator	*		2010975	0					
ANR	2010986	Identifier	allocations		2010975	1					
ANR	2010987	ExpressionStatement	efree ( * allocations )	211:1:5169:5188	2010975	1	True				
ANR	2010988	CallExpression	efree ( * allocations )		2010975	0					
ANR	2010989	Callee	efree		2010975	0					
ANR	2010990	Identifier	efree		2010975	0					
ANR	2010991	ArgumentList	* allocations		2010975	1					
ANR	2010992	Argument	* allocations		2010975	0					
ANR	2010993	UnaryOperationExpression	* allocations		2010975	0					
ANR	2010994	UnaryOperator	*		2010975	0					
ANR	2010995	Identifier	allocations		2010975	1					
ANR	2010996	ExpressionStatement	* allocations = NULL	212:1:5191:5210	2010975	2	True				
ANR	2010997	AssignmentExpression	* allocations = NULL		2010975	0		=			
ANR	2010998	UnaryOperationExpression	* allocations		2010975	0					
ANR	2010999	UnaryOperator	*		2010975	0					
ANR	2011000	Identifier	allocations		2010975	1					
ANR	2011001	Identifier	NULL		2010975	1					
ANR	2011002	ReturnType	void		2010975	1					
ANR	2011003	Identifier	allocations_dispose		2010975	2					
ANR	2011004	ParameterList	zend_llist * * allocations		2010975	3					
ANR	2011005	Parameter	zend_llist * * allocations	208:25:5105:5128	2010975	0	True				
ANR	2011006	ParameterType	zend_llist * *		2010975	0					
ANR	2011007	Identifier	allocations		2010975	1					
ANR	2011008	CFGEntryNode	ENTRY		2010975		True				
ANR	2011009	CFGExitNode	EXIT		2010975		True				
ANR	2011010	Symbol	NULL		2010975						
ANR	2011011	Symbol	allocations		2010975						
ANR	2011012	Symbol	* allocations		2010975						
ANR	2011013	Function	from_array_iterate	215:0:5215:5917							
ANR	2011014	FunctionDef	"from_array_iterate (const zval * arr , void ( * func ) ( zval * elem , unsigned i , void * * args , ser_context * ctx ) , void * * args , ser_context * ctx)"		2011013	0					
ANR	2011015	CompoundStatement		219:0:5400:5917	2011013	0					
ANR	2011016	IdentifierDeclStatement	unsigned i ;	220:1:5403:5414	2011013	0	True				
ANR	2011017	IdentifierDecl	i		2011013	0					
ANR	2011018	IdentifierDeclType	unsigned		2011013	0					
ANR	2011019	Identifier	i		2011013	1					
ANR	2011020	IdentifierDeclStatement	zval * elem ;	221:1:5417:5429	2011013	1	True				
ANR	2011021	IdentifierDecl	* elem		2011013	0					
ANR	2011022	IdentifierDeclType	zval *		2011013	0					
ANR	2011023	Identifier	elem		2011013	1					
ANR	2011024	IdentifierDeclStatement	"char buf [ sizeof ( ""element #4294967295"" ) ] ;"	222:1:5432:5473	2011013	2	True				
ANR	2011025	IdentifierDecl	"buf [ sizeof ( ""element #4294967295"" ) ]"		2011013	0					
ANR	2011026	IdentifierDeclType	"char [ sizeof ( ""element #4294967295"" ) ]"		2011013	0					
ANR	2011027	Identifier	buf		2011013	1					
ANR	2011028	SizeofExpression	"sizeof ( ""element #4294967295"" )"		2011013	2					
ANR	2011029	Sizeof	sizeof		2011013	0					
ANR	2011030	PrimaryExpression	"""element #4294967295"""		2011013	1					
ANR	2011031	IdentifierDeclStatement	char * bufp = buf ;	223:1:5476:5494	2011013	3	True				
ANR	2011032	IdentifierDecl	* bufp = buf		2011013	0					
ANR	2011033	IdentifierDeclType	char *		2011013	0					
ANR	2011034	Identifier	bufp		2011013	1					
ANR	2011035	AssignmentExpression	* bufp = buf		2011013	2		=			
ANR	2011036	Identifier	buf		2011013	0					
ANR	2011037	Identifier	buf		2011013	1					
ANR	2011038	ExpressionStatement	i = 1	226:1:5532:5537	2011013	4	True				
ANR	2011039	AssignmentExpression	i = 1		2011013	0		=			
ANR	2011040	Identifier	i		2011013	0					
ANR	2011041	PrimaryExpression	1		2011013	1					
ANR	2011042	Statement	ZEND_HASH_FOREACH_VAL	227:1:5540:5560	2011013	5	True				
ANR	2011043	Statement	(	227:22:5561:5561	2011013	6	True				
ANR	2011044	Statement	Z_ARRVAL_P	227:23:5562:5571	2011013	7	True				
ANR	2011045	Statement	(	227:33:5572:5572	2011013	8	True				
ANR	2011046	Statement	arr	227:34:5573:5575	2011013	9	True				
ANR	2011047	Statement	)	227:37:5576:5576	2011013	10	True				
ANR	2011048	Statement	","	227:38:5577:5577	2011013	11	True				
ANR	2011049	Statement	elem	227:40:5579:5582	2011013	12	True				
ANR	2011050	Statement	)	227:44:5583:5583	2011013	13	True				
ANR	2011051	CompoundStatement		9:46:184:184	2011013	14					
ANR	2011052	IfStatement	"if ( snprintf ( buf , sizeof ( buf ) , ""element #%u"" , i ) >= sizeof ( buf ) )"		2011013	0					
ANR	2011053	Condition	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , i ) >= sizeof ( buf )"	228:6:5593:5651	2011013	0	True				
ANR	2011054	RelationalExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , i ) >= sizeof ( buf )"		2011013	0		>=			
ANR	2011055	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , i )"		2011013	0					
ANR	2011056	Callee	snprintf		2011013	0					
ANR	2011057	Identifier	snprintf		2011013	0					
ANR	2011058	ArgumentList	buf		2011013	1					
ANR	2011059	Argument	buf		2011013	0					
ANR	2011060	Identifier	buf		2011013	0					
ANR	2011061	Argument	sizeof ( buf )		2011013	1					
ANR	2011062	SizeofExpression	sizeof ( buf )		2011013	0					
ANR	2011063	Sizeof	sizeof		2011013	0					
ANR	2011064	SizeofOperand	buf		2011013	1					
ANR	2011065	Argument	"""element #%u"""		2011013	2					
ANR	2011066	PrimaryExpression	"""element #%u"""		2011013	0					
ANR	2011067	Argument	i		2011013	3					
ANR	2011068	Identifier	i		2011013	0					
ANR	2011069	SizeofExpression	sizeof ( buf )		2011013	1					
ANR	2011070	Sizeof	sizeof		2011013	0					
ANR	2011071	SizeofOperand	buf		2011013	1					
ANR	2011072	CompoundStatement		10:67:253:253	2011013	1					
ANR	2011073	ExpressionStatement	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"	229:3:5659:5700	2011013	0	True				
ANR	2011074	CallExpression	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"		2011013	0					
ANR	2011075	Callee	memcpy		2011013	0					
ANR	2011076	Identifier	memcpy		2011013	0					
ANR	2011077	ArgumentList	buf		2011013	1					
ANR	2011078	Argument	buf		2011013	0					
ANR	2011079	Identifier	buf		2011013	0					
ANR	2011080	Argument	"""element"""		2011013	1					
ANR	2011081	PrimaryExpression	"""element"""		2011013	0					
ANR	2011082	Argument	"sizeof ( ""element"" )"		2011013	2					
ANR	2011083	SizeofExpression	"sizeof ( ""element"" )"		2011013	0					
ANR	2011084	Sizeof	sizeof		2011013	0					
ANR	2011085	PrimaryExpression	"""element"""		2011013	1					
ANR	2011086	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , & bufp )"	231:2:5708:5749	2011013	1	True				
ANR	2011087	CallExpression	"zend_llist_add_element ( & ctx -> keys , & bufp )"		2011013	0					
ANR	2011088	Callee	zend_llist_add_element		2011013	0					
ANR	2011089	Identifier	zend_llist_add_element		2011013	0					
ANR	2011090	ArgumentList	& ctx -> keys		2011013	1					
ANR	2011091	Argument	& ctx -> keys		2011013	0					
ANR	2011092	UnaryOperationExpression	& ctx -> keys		2011013	0					
ANR	2011093	UnaryOperator	&		2011013	0					
ANR	2011094	PtrMemberAccess	ctx -> keys		2011013	1					
ANR	2011095	Identifier	ctx		2011013	0					
ANR	2011096	Identifier	keys		2011013	1					
ANR	2011097	Argument	& bufp		2011013	1					
ANR	2011098	UnaryOperationExpression	& bufp		2011013	0					
ANR	2011099	UnaryOperator	&		2011013	0					
ANR	2011100	Identifier	bufp		2011013	1					
ANR	2011101	ExpressionStatement	"func ( elem , i , args , ctx )"	233:2:5754:5778	2011013	2	True				
ANR	2011102	CallExpression	"func ( elem , i , args , ctx )"		2011013	0					
ANR	2011103	Callee	func		2011013	0					
ANR	2011104	Identifier	func		2011013	0					
ANR	2011105	ArgumentList	elem		2011013	1					
ANR	2011106	Argument	elem		2011013	0					
ANR	2011107	Identifier	elem		2011013	0					
ANR	2011108	Argument	i		2011013	1					
ANR	2011109	Identifier	i		2011013	0					
ANR	2011110	Argument	args		2011013	2					
ANR	2011111	Identifier	args		2011013	0					
ANR	2011112	Argument	ctx		2011013	3					
ANR	2011113	Identifier	ctx		2011013	0					
ANR	2011114	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	235:2:5783:5817	2011013	3	True				
ANR	2011115	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		2011013	0					
ANR	2011116	Callee	zend_llist_remove_tail		2011013	0					
ANR	2011117	Identifier	zend_llist_remove_tail		2011013	0					
ANR	2011118	ArgumentList	& ctx -> keys		2011013	1					
ANR	2011119	Argument	& ctx -> keys		2011013	0					
ANR	2011120	UnaryOperationExpression	& ctx -> keys		2011013	0					
ANR	2011121	UnaryOperator	&		2011013	0					
ANR	2011122	PtrMemberAccess	ctx -> keys		2011013	1					
ANR	2011123	Identifier	ctx		2011013	0					
ANR	2011124	Identifier	keys		2011013	1					
ANR	2011125	IfStatement	if ( ctx -> err . has_error )		2011013	4					
ANR	2011126	Condition	ctx -> err . has_error	236:6:5825:5842	2011013	0	True				
ANR	2011127	MemberAccess	ctx -> err . has_error		2011013	0					
ANR	2011128	PtrMemberAccess	ctx -> err		2011013	0					
ANR	2011129	Identifier	ctx		2011013	0					
ANR	2011130	Identifier	err		2011013	1					
ANR	2011131	Identifier	has_error		2011013	1					
ANR	2011132	CompoundStatement		18:26:444:444	2011013	1					
ANR	2011133	BreakStatement	break ;	237:3:5850:5855	2011013	0	True				
ANR	2011134	ExpressionStatement	i ++	239:2:5863:5866	2011013	5	True				
ANR	2011135	PostIncDecOperationExpression	i ++		2011013	0					
ANR	2011136	Identifier	i		2011013	0					
ANR	2011137	IncDec	++		2011013	1					
ANR	2011138	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	240:6:5874:5897	2011013	15	True				
ANR	2011139	CallExpression	ZEND_HASH_FOREACH_END ( )		2011013	0					
ANR	2011140	Callee	ZEND_HASH_FOREACH_END		2011013	0					
ANR	2011141	Identifier	ZEND_HASH_FOREACH_END		2011013	0					
ANR	2011142	ArgumentList			2011013	1					
ANR	2011143	ReturnStatement	return i - 1 ;	242:4:5904:5915	2011013	16	True				
ANR	2011144	AdditiveExpression	i - 1		2011013	0		-			
ANR	2011145	Identifier	i		2011013	0					
ANR	2011146	PrimaryExpression	1		2011013	1					
ANR	2011147	ReturnType	static unsigned		2011013	1					
ANR	2011148	Identifier	from_array_iterate		2011013	2					
ANR	2011149	ParameterList	"const zval * arr , void ( * func ) ( zval * elem , unsigned i , void * * args , ser_context * ctx ) , void * * args , ser_context * ctx"		2011013	3					
ANR	2011150	Parameter	const zval * arr	215:35:5250:5264	2011013	0	True				
ANR	2011151	ParameterType	const zval *		2011013	0					
ANR	2011152	Identifier	arr		2011013	1					
ANR	2011153	Parameter	"void ( * func ) ( zval * elem , unsigned i , void * * args , ser_context * ctx )"	216:11:5278:5344	2011013	1	True				
ANR	2011154	ParameterType	"(( zval * elem , unsigned i , void * * args , ser_context * ctx ) void) *"		2011013	0					
ANR	2011155	Identifier	func		2011013	1					
ANR	2011156	Parameter	void * * args	217:11:5358:5368	2011013	2	True				
ANR	2011157	ParameterType	void * *		2011013	0					
ANR	2011158	Identifier	args		2011013	1					
ANR	2011159	Parameter	ser_context * ctx	218:11:5382:5397	2011013	3	True				
ANR	2011160	ParameterType	ser_context *		2011013	0					
ANR	2011161	Identifier	ctx		2011013	1					
ANR	2011162	CFGEntryNode	ENTRY		2011013		True				
ANR	2011163	CFGExitNode	EXIT		2011013		True				
ANR	2011164	CFGErrorNode	ERROR		2011013		True				
ANR	2011165	Symbol	arr		2011013						
ANR	2011166	Symbol	elem		2011013						
ANR	2011167	Symbol	& ctx -> keys		2011013						
ANR	2011168	Symbol	ctx		2011013						
ANR	2011169	Symbol	ctx -> err . has_error		2011013						
ANR	2011170	Symbol	i		2011013						
ANR	2011171	Symbol	* ctx		2011013						
ANR	2011172	Symbol	ctx -> err		2011013						
ANR	2011173	Symbol	args		2011013						
ANR	2011174	Symbol	buf		2011013						
ANR	2011175	Symbol	bufp		2011013						
ANR	2011176	Symbol	func		2011013						
ANR	2011177	Symbol	& bufp		2011013						
ANR	2011178	Symbol	snprintf		2011013						
ANR	2011179	Function	from_zval_write_aggregation	246:0:5957:6910							
ANR	2011180	FunctionDef	"from_zval_write_aggregation (const zval * container , char * structure , const field_descriptor * descriptors , ser_context * ctx)"		2011179	0					
ANR	2011181	CompoundStatement		250:0:6122:6910	2011179	0					
ANR	2011182	IdentifierDeclStatement	const field_descriptor * descr ;	251:1:6125:6154	2011179	0	True				
ANR	2011183	IdentifierDecl	* descr		2011179	0					
ANR	2011184	IdentifierDeclType	const field_descriptor *		2011179	0					
ANR	2011185	Identifier	descr		2011179	1					
ANR	2011186	IdentifierDeclStatement	zval * elem ;	252:1:6157:6171	2011179	1	True				
ANR	2011187	IdentifierDecl	* elem		2011179	0					
ANR	2011188	IdentifierDeclType	zval *		2011179	0					
ANR	2011189	Identifier	elem		2011179	1					
ANR	2011190	IfStatement	if ( Z_TYPE_P ( container ) != IS_ARRAY )		2011179	2					
ANR	2011191	Condition	Z_TYPE_P ( container ) != IS_ARRAY	254:5:6179:6209	2011179	0	True				
ANR	2011192	EqualityExpression	Z_TYPE_P ( container ) != IS_ARRAY		2011179	0		!=			
ANR	2011193	CallExpression	Z_TYPE_P ( container )		2011179	0					
ANR	2011194	Callee	Z_TYPE_P		2011179	0					
ANR	2011195	Identifier	Z_TYPE_P		2011179	0					
ANR	2011196	ArgumentList	container		2011179	1					
ANR	2011197	Argument	container		2011179	0					
ANR	2011198	Identifier	container		2011179	0					
ANR	2011199	Identifier	IS_ARRAY		2011179	1					
ANR	2011200	CompoundStatement		5:38:89:89	2011179	1					
ANR	2011201	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	255:2:6216:6269	2011179	0	True				
ANR	2011202	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		2011179	0					
ANR	2011203	Callee	do_from_zval_err		2011179	0					
ANR	2011204	Identifier	do_from_zval_err		2011179	0					
ANR	2011205	ArgumentList	ctx		2011179	1					
ANR	2011206	Argument	ctx		2011179	0					
ANR	2011207	Identifier	ctx		2011179	0					
ANR	2011208	Argument	"""%s"""		2011179	1					
ANR	2011209	PrimaryExpression	"""%s"""		2011179	0					
ANR	2011210	Argument	"""expected an array here"""		2011179	2					
ANR	2011211	PrimaryExpression	"""expected an array here"""		2011179	0					
ANR	2011212	ForStatement	for ( descr = descriptors ; descr -> name != NULL && ! ctx -> err . has_error ; descr ++ )		2011179	3					
ANR	2011213	ForInit	descr = descriptors ;	258:6:6281:6300	2011179	0	True				
ANR	2011214	AssignmentExpression	descr = descriptors		2011179	0		=			
ANR	2011215	Identifier	descr		2011179	0					
ANR	2011216	Identifier	descriptors		2011179	1					
ANR	2011217	Condition	descr -> name != NULL && ! ctx -> err . has_error	258:27:6302:6343	2011179	1	True				
ANR	2011218	AndExpression	descr -> name != NULL && ! ctx -> err . has_error		2011179	0		&&			
ANR	2011219	EqualityExpression	descr -> name != NULL		2011179	0		!=			
ANR	2011220	PtrMemberAccess	descr -> name		2011179	0					
ANR	2011221	Identifier	descr		2011179	0					
ANR	2011222	Identifier	name		2011179	1					
ANR	2011223	Identifier	NULL		2011179	1					
ANR	2011224	UnaryOperationExpression	! ctx -> err . has_error		2011179	1					
ANR	2011225	UnaryOperator	!		2011179	0					
ANR	2011226	MemberAccess	ctx -> err . has_error		2011179	1					
ANR	2011227	PtrMemberAccess	ctx -> err		2011179	0					
ANR	2011228	Identifier	ctx		2011179	0					
ANR	2011229	Identifier	err		2011179	1					
ANR	2011230	Identifier	has_error		2011179	1					
ANR	2011231	PostIncDecOperationExpression	descr ++	258:71:6346:6352	2011179	2	True				
ANR	2011232	Identifier	descr		2011179	0					
ANR	2011233	IncDec	++		2011179	1					
ANR	2011234	CompoundStatement		9:80:232:232	2011179	3					
ANR	2011235	IfStatement	"if ( ( elem = zend_hash_str_find ( Z_ARRVAL_P ( container ) , descr -> name , descr -> name_size - 1 ) ) != NULL )"		2011179	0					
ANR	2011236	Condition	"( elem = zend_hash_str_find ( Z_ARRVAL_P ( container ) , descr -> name , descr -> name_size - 1 ) ) != NULL"	259:6:6363:6459	2011179	0	True				
ANR	2011237	EqualityExpression	"( elem = zend_hash_str_find ( Z_ARRVAL_P ( container ) , descr -> name , descr -> name_size - 1 ) ) != NULL"		2011179	0		!=			
ANR	2011238	AssignmentExpression	"elem = zend_hash_str_find ( Z_ARRVAL_P ( container ) , descr -> name , descr -> name_size - 1 )"		2011179	0		=			
ANR	2011239	Identifier	elem		2011179	0					
ANR	2011240	CallExpression	"zend_hash_str_find ( Z_ARRVAL_P ( container ) , descr -> name , descr -> name_size - 1 )"		2011179	1					
ANR	2011241	Callee	zend_hash_str_find		2011179	0					
ANR	2011242	Identifier	zend_hash_str_find		2011179	0					
ANR	2011243	ArgumentList	Z_ARRVAL_P ( container )		2011179	1					
ANR	2011244	Argument	Z_ARRVAL_P ( container )		2011179	0					
ANR	2011245	CallExpression	Z_ARRVAL_P ( container )		2011179	0					
ANR	2011246	Callee	Z_ARRVAL_P		2011179	0					
ANR	2011247	Identifier	Z_ARRVAL_P		2011179	0					
ANR	2011248	ArgumentList	container		2011179	1					
ANR	2011249	Argument	container		2011179	0					
ANR	2011250	Identifier	container		2011179	0					
ANR	2011251	Argument	descr -> name		2011179	1					
ANR	2011252	PtrMemberAccess	descr -> name		2011179	0					
ANR	2011253	Identifier	descr		2011179	0					
ANR	2011254	Identifier	name		2011179	1					
ANR	2011255	Argument	descr -> name_size - 1		2011179	2					
ANR	2011256	AdditiveExpression	descr -> name_size - 1		2011179	0		-			
ANR	2011257	PtrMemberAccess	descr -> name_size		2011179	0					
ANR	2011258	Identifier	descr		2011179	0					
ANR	2011259	Identifier	name_size		2011179	1					
ANR	2011260	PrimaryExpression	1		2011179	1					
ANR	2011261	Identifier	NULL		2011179	1					
ANR	2011262	CompoundStatement		11:49:339:339	2011179	1					
ANR	2011263	IfStatement	if ( descr -> from_zval == NULL )		2011179	0					
ANR	2011264	Condition	descr -> from_zval == NULL	262:7:6472:6495	2011179	0	True				
ANR	2011265	EqualityExpression	descr -> from_zval == NULL		2011179	0		==			
ANR	2011266	PtrMemberAccess	descr -> from_zval		2011179	0					
ANR	2011267	Identifier	descr		2011179	0					
ANR	2011268	Identifier	from_zval		2011179	1					
ANR	2011269	Identifier	NULL		2011179	1					
ANR	2011270	CompoundStatement		13:33:375:375	2011179	1					
ANR	2011271	Statement	do_from_zval_err	263:4:6504:6519	2011179	0	True				
ANR	2011272	Statement	(	263:20:6520:6520	2011179	1	True				
ANR	2011273	Statement	ctx	263:21:6521:6523	2011179	2	True				
ANR	2011274	Statement	","	263:24:6524:6524	2011179	3	True				
ANR	2011275	Statement	"""No information on how to convert value """	263:26:6526:6566	2011179	4	True				
ANR	2011276	Statement	"""of key '%s'"""	264:6:6574:6586	2011179	5	True				
ANR	2011277	Statement	","	264:19:6587:6587	2011179	6	True				
ANR	2011278	Statement	descr	264:21:6589:6593	2011179	7	True				
ANR	2011279	Statement	->	264:26:6594:6595	2011179	8	True				
ANR	2011280	Statement	name	264:28:6596:6599	2011179	9	True				
ANR	2011281	Statement	)	264:32:6600:6600	2011179	10	True				
ANR	2011282	ExpressionStatement		264:33:6601:6601	2011179	11	True				
ANR	2011283	BreakStatement	break ;	265:4:6607:6612	2011179	12	True				
ANR	2011284	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , ( void * ) & descr -> name )"	268:3:6623:6678	2011179	1	True				
ANR	2011285	CallExpression	"zend_llist_add_element ( & ctx -> keys , ( void * ) & descr -> name )"		2011179	0					
ANR	2011286	Callee	zend_llist_add_element		2011179	0					
ANR	2011287	Identifier	zend_llist_add_element		2011179	0					
ANR	2011288	ArgumentList	& ctx -> keys		2011179	1					
ANR	2011289	Argument	& ctx -> keys		2011179	0					
ANR	2011290	UnaryOperationExpression	& ctx -> keys		2011179	0					
ANR	2011291	UnaryOperator	&		2011179	0					
ANR	2011292	PtrMemberAccess	ctx -> keys		2011179	1					
ANR	2011293	Identifier	ctx		2011179	0					
ANR	2011294	Identifier	keys		2011179	1					
ANR	2011295	Argument	( void * ) & descr -> name		2011179	1					
ANR	2011296	CastExpression	( void * ) & descr -> name		2011179	0					
ANR	2011297	CastTarget	void *		2011179	0					
ANR	2011298	UnaryOperationExpression	& descr -> name		2011179	1					
ANR	2011299	UnaryOperator	&		2011179	0					
ANR	2011300	PtrMemberAccess	descr -> name		2011179	1					
ANR	2011301	Identifier	descr		2011179	0					
ANR	2011302	Identifier	name		2011179	1					
ANR	2011303	ExpressionStatement	"descr -> from_zval ( elem , ( ( char * ) structure ) + descr -> field_offset , ctx )"	269:3:6683:6752	2011179	2	True				
ANR	2011304	CallExpression	"descr -> from_zval ( elem , ( ( char * ) structure ) + descr -> field_offset , ctx )"		2011179	0					
ANR	2011305	Callee	descr -> from_zval		2011179	0					
ANR	2011306	PtrMemberAccess	descr -> from_zval		2011179	0					
ANR	2011307	Identifier	descr		2011179	0					
ANR	2011308	Identifier	from_zval		2011179	1					
ANR	2011309	ArgumentList	elem		2011179	1					
ANR	2011310	Argument	elem		2011179	0					
ANR	2011311	Identifier	elem		2011179	0					
ANR	2011312	Argument	( ( char * ) structure ) + descr -> field_offset		2011179	1					
ANR	2011313	AdditiveExpression	( ( char * ) structure ) + descr -> field_offset		2011179	0		+			
ANR	2011314	CastExpression	( char * ) structure		2011179	0					
ANR	2011315	CastTarget	char *		2011179	0					
ANR	2011316	Identifier	structure		2011179	1					
ANR	2011317	PtrMemberAccess	descr -> field_offset		2011179	1					
ANR	2011318	Identifier	descr		2011179	0					
ANR	2011319	Identifier	field_offset		2011179	1					
ANR	2011320	Argument	ctx		2011179	2					
ANR	2011321	Identifier	ctx		2011179	0					
ANR	2011322	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	270:3:6757:6791	2011179	3	True				
ANR	2011323	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		2011179	0					
ANR	2011324	Callee	zend_llist_remove_tail		2011179	0					
ANR	2011325	Identifier	zend_llist_remove_tail		2011179	0					
ANR	2011326	ArgumentList	& ctx -> keys		2011179	1					
ANR	2011327	Argument	& ctx -> keys		2011179	0					
ANR	2011328	UnaryOperationExpression	& ctx -> keys		2011179	0					
ANR	2011329	UnaryOperator	&		2011179	0					
ANR	2011330	PtrMemberAccess	ctx -> keys		2011179	1					
ANR	2011331	Identifier	ctx		2011179	0					
ANR	2011332	Identifier	keys		2011179	1					
ANR	2011333	ElseStatement	else		2011179	0					
ANR	2011334	IfStatement	if ( descr -> required )		2011179	0					
ANR	2011335	Condition	descr -> required	272:13:6807:6821	2011179	0	True				
ANR	2011336	PtrMemberAccess	descr -> required		2011179	0					
ANR	2011337	Identifier	descr		2011179	0					
ANR	2011338	Identifier	required		2011179	1					
ANR	2011339	CompoundStatement		23:30:701:701	2011179	1					
ANR	2011340	ExpressionStatement	"do_from_zval_err ( ctx , ""The key '%s' is required"" , descr -> name )"	273:3:6829:6891	2011179	0	True				
ANR	2011341	CallExpression	"do_from_zval_err ( ctx , ""The key '%s' is required"" , descr -> name )"		2011179	0					
ANR	2011342	Callee	do_from_zval_err		2011179	0					
ANR	2011343	Identifier	do_from_zval_err		2011179	0					
ANR	2011344	ArgumentList	ctx		2011179	1					
ANR	2011345	Argument	ctx		2011179	0					
ANR	2011346	Identifier	ctx		2011179	0					
ANR	2011347	Argument	"""The key '%s' is required"""		2011179	1					
ANR	2011348	PrimaryExpression	"""The key '%s' is required"""		2011179	0					
ANR	2011349	Argument	descr -> name		2011179	2					
ANR	2011350	PtrMemberAccess	descr -> name		2011179	0					
ANR	2011351	Identifier	descr		2011179	0					
ANR	2011352	Identifier	name		2011179	1					
ANR	2011353	BreakStatement	break ;	274:3:6896:6901	2011179	1	True				
ANR	2011354	ReturnType	static void		2011179	1					
ANR	2011355	Identifier	from_zval_write_aggregation		2011179	2					
ANR	2011356	ParameterList	"const zval * container , char * structure , const field_descriptor * descriptors , ser_context * ctx"		2011179	3					
ANR	2011357	Parameter	const zval * container	246:40:5997:6017	2011179	0	True				
ANR	2011358	ParameterType	const zval *		2011179	0					
ANR	2011359	Identifier	container		2011179	1					
ANR	2011360	Parameter	char * structure	247:10:6030:6044	2011179	1	True				
ANR	2011361	ParameterType	char *		2011179	0					
ANR	2011362	Identifier	structure		2011179	1					
ANR	2011363	Parameter	const field_descriptor * descriptors	248:10:6057:6091	2011179	2	True				
ANR	2011364	ParameterType	const field_descriptor *		2011179	0					
ANR	2011365	Identifier	descriptors		2011179	1					
ANR	2011366	Parameter	ser_context * ctx	249:10:6104:6119	2011179	3	True				
ANR	2011367	ParameterType	ser_context *		2011179	0					
ANR	2011368	Identifier	ctx		2011179	1					
ANR	2011369	CFGEntryNode	ENTRY		2011179		True				
ANR	2011370	CFGExitNode	EXIT		2011179		True				
ANR	2011371	Symbol	container		2011179						
ANR	2011372	Symbol	elem		2011179						
ANR	2011373	Symbol	NULL		2011179						
ANR	2011374	Symbol	& ctx -> keys		2011179						
ANR	2011375	Symbol	ctx		2011179						
ANR	2011376	Symbol	ctx -> err . has_error		2011179						
ANR	2011377	Symbol	descr -> required		2011179						
ANR	2011378	Symbol	descr -> field_offset		2011179						
ANR	2011379	Symbol	Z_TYPE_P		2011179						
ANR	2011380	Symbol	& descr -> name		2011179						
ANR	2011381	Symbol	structure		2011179						
ANR	2011382	Symbol	* ctx		2011179						
ANR	2011383	Symbol	ctx -> err		2011179						
ANR	2011384	Symbol	descr -> from_zval		2011179						
ANR	2011385	Symbol	descriptors		2011179						
ANR	2011386	Symbol	descr		2011179						
ANR	2011387	Symbol	zend_hash_str_find		2011179						
ANR	2011388	Symbol	IS_ARRAY		2011179						
ANR	2011389	Symbol	descr -> name		2011179						
ANR	2011390	Symbol	descr -> name_size		2011179						
ANR	2011391	Symbol	* descr		2011179						
ANR	2011392	Symbol	Z_ARRVAL_P		2011179						
ANR	2011393	Function	to_zval_read_aggregation	278:0:6912:7750							
ANR	2011394	FunctionDef	"to_zval_read_aggregation (const char * structure , zval * zarr , const field_descriptor * descriptors , res_context * ctx)"		2011393	0					
ANR	2011395	CompoundStatement		282:0:7093:7750	2011393	0					
ANR	2011396	IdentifierDeclStatement	const field_descriptor * descr ;	283:1:7096:7125	2011393	0	True				
ANR	2011397	IdentifierDecl	* descr		2011393	0					
ANR	2011398	IdentifierDeclType	const field_descriptor *		2011393	0					
ANR	2011399	Identifier	descr		2011393	1					
ANR	2011400	ExpressionStatement	assert ( Z_TYPE_P ( zarr ) == IS_ARRAY )	285:1:7129:7163	2011393	1	True				
ANR	2011401	CallExpression	assert ( Z_TYPE_P ( zarr ) == IS_ARRAY )		2011393	0					
ANR	2011402	Callee	assert		2011393	0					
ANR	2011403	Identifier	assert		2011393	0					
ANR	2011404	ArgumentList	Z_TYPE_P ( zarr ) == IS_ARRAY		2011393	1					
ANR	2011405	Argument	Z_TYPE_P ( zarr ) == IS_ARRAY		2011393	0					
ANR	2011406	EqualityExpression	Z_TYPE_P ( zarr ) == IS_ARRAY		2011393	0		==			
ANR	2011407	CallExpression	Z_TYPE_P ( zarr )		2011393	0					
ANR	2011408	Callee	Z_TYPE_P		2011393	0					
ANR	2011409	Identifier	Z_TYPE_P		2011393	0					
ANR	2011410	ArgumentList	zarr		2011393	1					
ANR	2011411	Argument	zarr		2011393	0					
ANR	2011412	Identifier	zarr		2011393	0					
ANR	2011413	Identifier	IS_ARRAY		2011393	1					
ANR	2011414	ExpressionStatement	assert ( Z_ARRVAL_P ( zarr ) != NULL )	286:1:7166:7198	2011393	2	True				
ANR	2011415	CallExpression	assert ( Z_ARRVAL_P ( zarr ) != NULL )		2011393	0					
ANR	2011416	Callee	assert		2011393	0					
ANR	2011417	Identifier	assert		2011393	0					
ANR	2011418	ArgumentList	Z_ARRVAL_P ( zarr ) != NULL		2011393	1					
ANR	2011419	Argument	Z_ARRVAL_P ( zarr ) != NULL		2011393	0					
ANR	2011420	EqualityExpression	Z_ARRVAL_P ( zarr ) != NULL		2011393	0		!=			
ANR	2011421	CallExpression	Z_ARRVAL_P ( zarr )		2011393	0					
ANR	2011422	Callee	Z_ARRVAL_P		2011393	0					
ANR	2011423	Identifier	Z_ARRVAL_P		2011393	0					
ANR	2011424	ArgumentList	zarr		2011393	1					
ANR	2011425	Argument	zarr		2011393	0					
ANR	2011426	Identifier	zarr		2011393	0					
ANR	2011427	Identifier	NULL		2011393	1					
ANR	2011428	ForStatement	for ( descr = descriptors ; descr -> name != NULL && ! ctx -> err . has_error ; descr ++ )		2011393	3					
ANR	2011429	ForInit	descr = descriptors ;	288:6:7207:7226	2011393	0	True				
ANR	2011430	AssignmentExpression	descr = descriptors		2011393	0		=			
ANR	2011431	Identifier	descr		2011393	0					
ANR	2011432	Identifier	descriptors		2011393	1					
ANR	2011433	Condition	descr -> name != NULL && ! ctx -> err . has_error	288:27:7228:7269	2011393	1	True				
ANR	2011434	AndExpression	descr -> name != NULL && ! ctx -> err . has_error		2011393	0		&&			
ANR	2011435	EqualityExpression	descr -> name != NULL		2011393	0		!=			
ANR	2011436	PtrMemberAccess	descr -> name		2011393	0					
ANR	2011437	Identifier	descr		2011393	0					
ANR	2011438	Identifier	name		2011393	1					
ANR	2011439	Identifier	NULL		2011393	1					
ANR	2011440	UnaryOperationExpression	! ctx -> err . has_error		2011393	1					
ANR	2011441	UnaryOperator	!		2011393	0					
ANR	2011442	MemberAccess	ctx -> err . has_error		2011393	1					
ANR	2011443	PtrMemberAccess	ctx -> err		2011393	0					
ANR	2011444	Identifier	ctx		2011393	0					
ANR	2011445	Identifier	err		2011393	1					
ANR	2011446	Identifier	has_error		2011393	1					
ANR	2011447	PostIncDecOperationExpression	descr ++	288:71:7272:7278	2011393	2	True				
ANR	2011448	Identifier	descr		2011393	0					
ANR	2011449	IncDec	++		2011393	1					
ANR	2011450	CompoundStatement		8:2:191:208	2011393	3					
ANR	2011451	IdentifierDeclStatement	"zval * new_zv , tmp ;"	289:2:7285:7302	2011393	0	True				
ANR	2011452	IdentifierDecl	* new_zv		2011393	0					
ANR	2011453	IdentifierDeclType	zval *		2011393	0					
ANR	2011454	Identifier	new_zv		2011393	1					
ANR	2011455	IdentifierDecl	tmp		2011393	1					
ANR	2011456	IdentifierDeclType	zval		2011393	0					
ANR	2011457	Identifier	tmp		2011393	1					
ANR	2011458	IfStatement	if ( descr -> to_zval == NULL )		2011393	1					
ANR	2011459	Condition	descr -> to_zval == NULL	291:6:7311:7332	2011393	0	True				
ANR	2011460	EqualityExpression	descr -> to_zval == NULL		2011393	0		==			
ANR	2011461	PtrMemberAccess	descr -> to_zval		2011393	0					
ANR	2011462	Identifier	descr		2011393	0					
ANR	2011463	Identifier	to_zval		2011393	1					
ANR	2011464	Identifier	NULL		2011393	1					
ANR	2011465	CompoundStatement		10:30:241:241	2011393	1					
ANR	2011466	Statement	do_to_zval_err	292:3:7340:7353	2011393	0	True				
ANR	2011467	Statement	(	292:17:7354:7354	2011393	1	True				
ANR	2011468	Statement	ctx	292:18:7355:7357	2011393	2	True				
ANR	2011469	Statement	","	292:21:7358:7358	2011393	3	True				
ANR	2011470	Statement	"""No information on how to convert native """	292:23:7360:7401	2011393	4	True				
ANR	2011471	Statement	"""field into value for key '%s'"""	293:5:7408:7438	2011393	5	True				
ANR	2011472	Statement	","	293:36:7439:7439	2011393	6	True				
ANR	2011473	Statement	descr	293:38:7441:7445	2011393	7	True				
ANR	2011474	Statement	->	293:43:7446:7447	2011393	8	True				
ANR	2011475	Statement	name	293:45:7448:7451	2011393	9	True				
ANR	2011476	Statement	)	293:49:7452:7452	2011393	10	True				
ANR	2011477	ExpressionStatement		293:50:7453:7453	2011393	11	True				
ANR	2011478	BreakStatement	break ;	294:3:7458:7463	2011393	12	True				
ANR	2011479	ExpressionStatement	ZVAL_NULL ( & tmp )	297:2:7472:7487	2011393	2	True				
ANR	2011480	CallExpression	ZVAL_NULL ( & tmp )		2011393	0					
ANR	2011481	Callee	ZVAL_NULL		2011393	0					
ANR	2011482	Identifier	ZVAL_NULL		2011393	0					
ANR	2011483	ArgumentList	& tmp		2011393	1					
ANR	2011484	Argument	& tmp		2011393	0					
ANR	2011485	UnaryOperationExpression	& tmp		2011393	0					
ANR	2011486	UnaryOperator	&		2011393	0					
ANR	2011487	Identifier	tmp		2011393	1					
ANR	2011488	ExpressionStatement	"new_zv = zend_symtable_str_update ( Z_ARRVAL_P ( zarr ) , descr -> name , descr -> name_size - 1 , & tmp )"	298:2:7491:7583	2011393	3	True				
ANR	2011489	AssignmentExpression	"new_zv = zend_symtable_str_update ( Z_ARRVAL_P ( zarr ) , descr -> name , descr -> name_size - 1 , & tmp )"		2011393	0		=			
ANR	2011490	Identifier	new_zv		2011393	0					
ANR	2011491	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( zarr ) , descr -> name , descr -> name_size - 1 , & tmp )"		2011393	1					
ANR	2011492	Callee	zend_symtable_str_update		2011393	0					
ANR	2011493	Identifier	zend_symtable_str_update		2011393	0					
ANR	2011494	ArgumentList	Z_ARRVAL_P ( zarr )		2011393	1					
ANR	2011495	Argument	Z_ARRVAL_P ( zarr )		2011393	0					
ANR	2011496	CallExpression	Z_ARRVAL_P ( zarr )		2011393	0					
ANR	2011497	Callee	Z_ARRVAL_P		2011393	0					
ANR	2011498	Identifier	Z_ARRVAL_P		2011393	0					
ANR	2011499	ArgumentList	zarr		2011393	1					
ANR	2011500	Argument	zarr		2011393	0					
ANR	2011501	Identifier	zarr		2011393	0					
ANR	2011502	Argument	descr -> name		2011393	1					
ANR	2011503	PtrMemberAccess	descr -> name		2011393	0					
ANR	2011504	Identifier	descr		2011393	0					
ANR	2011505	Identifier	name		2011393	1					
ANR	2011506	Argument	descr -> name_size - 1		2011393	2					
ANR	2011507	AdditiveExpression	descr -> name_size - 1		2011393	0		-			
ANR	2011508	PtrMemberAccess	descr -> name_size		2011393	0					
ANR	2011509	Identifier	descr		2011393	0					
ANR	2011510	Identifier	name_size		2011393	1					
ANR	2011511	PrimaryExpression	1		2011393	1					
ANR	2011512	Argument	& tmp		2011393	3					
ANR	2011513	UnaryOperationExpression	& tmp		2011393	0					
ANR	2011514	UnaryOperator	&		2011393	0					
ANR	2011515	Identifier	tmp		2011393	1					
ANR	2011516	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , ( void * ) & descr -> name )"	300:2:7588:7643	2011393	4	True				
ANR	2011517	CallExpression	"zend_llist_add_element ( & ctx -> keys , ( void * ) & descr -> name )"		2011393	0					
ANR	2011518	Callee	zend_llist_add_element		2011393	0					
ANR	2011519	Identifier	zend_llist_add_element		2011393	0					
ANR	2011520	ArgumentList	& ctx -> keys		2011393	1					
ANR	2011521	Argument	& ctx -> keys		2011393	0					
ANR	2011522	UnaryOperationExpression	& ctx -> keys		2011393	0					
ANR	2011523	UnaryOperator	&		2011393	0					
ANR	2011524	PtrMemberAccess	ctx -> keys		2011393	1					
ANR	2011525	Identifier	ctx		2011393	0					
ANR	2011526	Identifier	keys		2011393	1					
ANR	2011527	Argument	( void * ) & descr -> name		2011393	1					
ANR	2011528	CastExpression	( void * ) & descr -> name		2011393	0					
ANR	2011529	CastTarget	void *		2011393	0					
ANR	2011530	UnaryOperationExpression	& descr -> name		2011393	1					
ANR	2011531	UnaryOperator	&		2011393	0					
ANR	2011532	PtrMemberAccess	descr -> name		2011393	1					
ANR	2011533	Identifier	descr		2011393	0					
ANR	2011534	Identifier	name		2011393	1					
ANR	2011535	ExpressionStatement	"descr -> to_zval ( structure + descr -> field_offset , new_zv , ctx )"	301:2:7647:7707	2011393	5	True				
ANR	2011536	CallExpression	"descr -> to_zval ( structure + descr -> field_offset , new_zv , ctx )"		2011393	0					
ANR	2011537	Callee	descr -> to_zval		2011393	0					
ANR	2011538	PtrMemberAccess	descr -> to_zval		2011393	0					
ANR	2011539	Identifier	descr		2011393	0					
ANR	2011540	Identifier	to_zval		2011393	1					
ANR	2011541	ArgumentList	structure + descr -> field_offset		2011393	1					
ANR	2011542	Argument	structure + descr -> field_offset		2011393	0					
ANR	2011543	AdditiveExpression	structure + descr -> field_offset		2011393	0		+			
ANR	2011544	Identifier	structure		2011393	0					
ANR	2011545	PtrMemberAccess	descr -> field_offset		2011393	1					
ANR	2011546	Identifier	descr		2011393	0					
ANR	2011547	Identifier	field_offset		2011393	1					
ANR	2011548	Argument	new_zv		2011393	1					
ANR	2011549	Identifier	new_zv		2011393	0					
ANR	2011550	Argument	ctx		2011393	2					
ANR	2011551	Identifier	ctx		2011393	0					
ANR	2011552	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	302:2:7711:7745	2011393	6	True				
ANR	2011553	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		2011393	0					
ANR	2011554	Callee	zend_llist_remove_tail		2011393	0					
ANR	2011555	Identifier	zend_llist_remove_tail		2011393	0					
ANR	2011556	ArgumentList	& ctx -> keys		2011393	1					
ANR	2011557	Argument	& ctx -> keys		2011393	0					
ANR	2011558	UnaryOperationExpression	& ctx -> keys		2011393	0					
ANR	2011559	UnaryOperator	&		2011393	0					
ANR	2011560	PtrMemberAccess	ctx -> keys		2011393	1					
ANR	2011561	Identifier	ctx		2011393	0					
ANR	2011562	Identifier	keys		2011393	1					
ANR	2011563	ReturnType	static void		2011393	1					
ANR	2011564	Identifier	to_zval_read_aggregation		2011393	2					
ANR	2011565	ParameterList	"const char * structure , zval * zarr , const field_descriptor * descriptors , res_context * ctx"		2011393	3					
ANR	2011566	Parameter	const char * structure	278:37:6949:6969	2011393	0	True				
ANR	2011567	ParameterType	const char *		2011393	0					
ANR	2011568	Identifier	structure		2011393	1					
ANR	2011569	Parameter	zval * zarr	279:10:6982:6991	2011393	1	True				
ANR	2011570	ParameterType	zval *		2011393	0					
ANR	2011571	Identifier	zarr		2011393	1					
ANR	2011572	Parameter	const field_descriptor * descriptors	280:10:7028:7062	2011393	2	True				
ANR	2011573	ParameterType	const field_descriptor *		2011393	0					
ANR	2011574	Identifier	descriptors		2011393	1					
ANR	2011575	Parameter	res_context * ctx	281:10:7075:7090	2011393	3	True				
ANR	2011576	ParameterType	res_context *		2011393	0					
ANR	2011577	Identifier	ctx		2011393	1					
ANR	2011578	CFGEntryNode	ENTRY		2011393		True				
ANR	2011579	CFGExitNode	EXIT		2011393		True				
ANR	2011580	Symbol	new_zv		2011393						
ANR	2011581	Symbol	NULL		2011393						
ANR	2011582	Symbol	& ctx -> keys		2011393						
ANR	2011583	Symbol	ctx		2011393						
ANR	2011584	Symbol	descr -> to_zval		2011393						
ANR	2011585	Symbol	ctx -> err . has_error		2011393						
ANR	2011586	Symbol	descr -> field_offset		2011393						
ANR	2011587	Symbol	zend_symtable_str_update		2011393						
ANR	2011588	Symbol	Z_TYPE_P		2011393						
ANR	2011589	Symbol	& descr -> name		2011393						
ANR	2011590	Symbol	structure		2011393						
ANR	2011591	Symbol	* ctx		2011393						
ANR	2011592	Symbol	ctx -> err		2011393						
ANR	2011593	Symbol	descriptors		2011393						
ANR	2011594	Symbol	descr		2011393						
ANR	2011595	Symbol	IS_ARRAY		2011393						
ANR	2011596	Symbol	tmp		2011393						
ANR	2011597	Symbol	descr -> name		2011393						
ANR	2011598	Symbol	descr -> name_size		2011393						
ANR	2011599	Symbol	* descr		2011393						
ANR	2011600	Symbol	& tmp		2011393						
ANR	2011601	Symbol	Z_ARRVAL_P		2011393						
ANR	2011602	Symbol	zarr		2011393						
ANR	2011603	Function	from_zval_integer_common	307:0:7784:8999							
ANR	2011604	FunctionDef	"from_zval_integer_common (const zval * arr_value , ser_context * ctx)"		2011603	0					
ANR	2011605	CompoundStatement		308:0:7867:8999	2011603	0					
ANR	2011606	IdentifierDeclStatement	zend_long ret = 0 ;	309:1:7870:7887	2011603	0	True				
ANR	2011607	IdentifierDecl	ret = 0		2011603	0					
ANR	2011608	IdentifierDeclType	zend_long		2011603	0					
ANR	2011609	Identifier	ret		2011603	1					
ANR	2011610	AssignmentExpression	ret = 0		2011603	2		=			
ANR	2011611	Identifier	ret		2011603	0					
ANR	2011612	PrimaryExpression	0		2011603	1					
ANR	2011613	IdentifierDeclStatement	zval lzval ;	310:1:7890:7900	2011603	1	True				
ANR	2011614	IdentifierDecl	lzval		2011603	0					
ANR	2011615	IdentifierDeclType	zval		2011603	0					
ANR	2011616	Identifier	lzval		2011603	1					
ANR	2011617	ExpressionStatement	ZVAL_NULL ( & lzval )	312:1:7904:7921	2011603	2	True				
ANR	2011618	CallExpression	ZVAL_NULL ( & lzval )		2011603	0					
ANR	2011619	Callee	ZVAL_NULL		2011603	0					
ANR	2011620	Identifier	ZVAL_NULL		2011603	0					
ANR	2011621	ArgumentList	& lzval		2011603	1					
ANR	2011622	Argument	& lzval		2011603	0					
ANR	2011623	UnaryOperationExpression	& lzval		2011603	0					
ANR	2011624	UnaryOperator	&		2011603	0					
ANR	2011625	Identifier	lzval		2011603	1					
ANR	2011626	IfStatement	if ( Z_TYPE_P ( arr_value ) != IS_LONG )		2011603	3					
ANR	2011627	Condition	Z_TYPE_P ( arr_value ) != IS_LONG	313:5:7928:7957	2011603	0	True				
ANR	2011628	EqualityExpression	Z_TYPE_P ( arr_value ) != IS_LONG		2011603	0		!=			
ANR	2011629	CallExpression	Z_TYPE_P ( arr_value )		2011603	0					
ANR	2011630	Callee	Z_TYPE_P		2011603	0					
ANR	2011631	Identifier	Z_TYPE_P		2011603	0					
ANR	2011632	ArgumentList	arr_value		2011603	1					
ANR	2011633	Argument	arr_value		2011603	0					
ANR	2011634	Identifier	arr_value		2011603	0					
ANR	2011635	Identifier	IS_LONG		2011603	1					
ANR	2011636	CompoundStatement		6:37:92:92	2011603	1					
ANR	2011637	ExpressionStatement	"ZVAL_COPY ( & lzval , ( zval * ) arr_value )"	314:2:7964:8000	2011603	0	True				
ANR	2011638	CallExpression	"ZVAL_COPY ( & lzval , ( zval * ) arr_value )"		2011603	0					
ANR	2011639	Callee	ZVAL_COPY		2011603	0					
ANR	2011640	Identifier	ZVAL_COPY		2011603	0					
ANR	2011641	ArgumentList	& lzval		2011603	1					
ANR	2011642	Argument	& lzval		2011603	0					
ANR	2011643	UnaryOperationExpression	& lzval		2011603	0					
ANR	2011644	UnaryOperator	&		2011603	0					
ANR	2011645	Identifier	lzval		2011603	1					
ANR	2011646	Argument	( zval * ) arr_value		2011603	1					
ANR	2011647	CastExpression	( zval * ) arr_value		2011603	0					
ANR	2011648	CastTarget	zval *		2011603	0					
ANR	2011649	Identifier	arr_value		2011603	1					
ANR	2011650	ExpressionStatement	arr_value = & lzval	315:2:8004:8022	2011603	1	True				
ANR	2011651	AssignmentExpression	arr_value = & lzval		2011603	0		=			
ANR	2011652	Identifier	arr_value		2011603	0					
ANR	2011653	UnaryOperationExpression	& lzval		2011603	1					
ANR	2011654	UnaryOperator	&		2011603	0					
ANR	2011655	Identifier	lzval		2011603	1					
ANR	2011656	SwitchStatement	switch ( Z_TYPE_P ( arr_value ) )		2011603	4					
ANR	2011657	Condition	Z_TYPE_P ( arr_value )	318:9:8037:8055	2011603	0	True				
ANR	2011658	CallExpression	Z_TYPE_P ( arr_value )		2011603	0					
ANR	2011659	Callee	Z_TYPE_P		2011603	0					
ANR	2011660	Identifier	Z_TYPE_P		2011603	0					
ANR	2011661	ArgumentList	arr_value		2011603	1					
ANR	2011662	Argument	arr_value		2011603	0					
ANR	2011663	Identifier	arr_value		2011603	0					
ANR	2011664	CompoundStatement		11:30:190:190	2011603	1					
ANR	2011665	Label	case IS_LONG :	319:1:8061:8073	2011603	0	True				
ANR	2011666	Identifier	IS_LONG		2011603	0					
ANR	2011667	Label	long_case :	320:0:8075:8084	2011603	1	True				
ANR	2011668	Identifier	long_case		2011603	0					
ANR	2011669	ExpressionStatement	ret = Z_LVAL_P ( arr_value )	321:2:8088:8113	2011603	2	True				
ANR	2011670	AssignmentExpression	ret = Z_LVAL_P ( arr_value )		2011603	0		=			
ANR	2011671	Identifier	ret		2011603	0					
ANR	2011672	CallExpression	Z_LVAL_P ( arr_value )		2011603	1					
ANR	2011673	Callee	Z_LVAL_P		2011603	0					
ANR	2011674	Identifier	Z_LVAL_P		2011603	0					
ANR	2011675	ArgumentList	arr_value		2011603	1					
ANR	2011676	Argument	arr_value		2011603	0					
ANR	2011677	Identifier	arr_value		2011603	0					
ANR	2011678	BreakStatement	break ;	322:2:8117:8122	2011603	3	True				
ANR	2011679	Label	case IS_DOUBLE :	325:1:8170:8184	2011603	4	True				
ANR	2011680	Identifier	IS_DOUBLE		2011603	0					
ANR	2011681	Label	double_case :	326:0:8186:8197	2011603	5	True				
ANR	2011682	Identifier	double_case		2011603	0					
ANR	2011683	ExpressionStatement	convert_to_long ( & lzval )	327:2:8201:8224	2011603	6	True				
ANR	2011684	CallExpression	convert_to_long ( & lzval )		2011603	0					
ANR	2011685	Callee	convert_to_long		2011603	0					
ANR	2011686	Identifier	convert_to_long		2011603	0					
ANR	2011687	ArgumentList	& lzval		2011603	1					
ANR	2011688	Argument	& lzval		2011603	0					
ANR	2011689	UnaryOperationExpression	& lzval		2011603	0					
ANR	2011690	UnaryOperator	&		2011603	0					
ANR	2011691	Identifier	lzval		2011603	1					
ANR	2011692	GotoStatement	goto long_case ;	328:2:8228:8242	2011603	7	True				
ANR	2011693	Identifier	long_case		2011603	0					
ANR	2011694	Label	case IS_OBJECT :	330:1:8246:8260	2011603	8	True				
ANR	2011695	Identifier	IS_OBJECT		2011603	0					
ANR	2011696	Label	case IS_STRING :	331:1:8263:8277	2011603	9	True				
ANR	2011697	Identifier	IS_STRING		2011603	0					
ANR	2011698	CompoundStatement		26:2:433:444	2011603	10					
ANR	2011699	IdentifierDeclStatement	zend_long lval ;	332:2:8283:8297	2011603	0	True				
ANR	2011700	IdentifierDecl	lval		2011603	0					
ANR	2011701	IdentifierDeclType	zend_long		2011603	0					
ANR	2011702	Identifier	lval		2011603	1					
ANR	2011703	IdentifierDeclStatement	double dval ;	333:2:8301:8312	2011603	1	True				
ANR	2011704	IdentifierDecl	dval		2011603	0					
ANR	2011705	IdentifierDeclType	double		2011603	0					
ANR	2011706	Identifier	dval		2011603	1					
ANR	2011707	ExpressionStatement	convert_to_string ( & lzval )	335:2:8317:8342	2011603	2	True				
ANR	2011708	CallExpression	convert_to_string ( & lzval )		2011603	0					
ANR	2011709	Callee	convert_to_string		2011603	0					
ANR	2011710	Identifier	convert_to_string		2011603	0					
ANR	2011711	ArgumentList	& lzval		2011603	1					
ANR	2011712	Argument	& lzval		2011603	0					
ANR	2011713	UnaryOperationExpression	& lzval		2011603	0					
ANR	2011714	UnaryOperator	&		2011603	0					
ANR	2011715	Identifier	lzval		2011603	1					
ANR	2011716	SwitchStatement	"switch ( is_numeric_string ( Z_STRVAL ( lzval ) , Z_STRLEN ( lzval ) , & lval , & dval , 0 ) )"		2011603	3					
ANR	2011717	Condition	"is_numeric_string ( Z_STRVAL ( lzval ) , Z_STRLEN ( lzval ) , & lval , & dval , 0 )"	337:10:8355:8422	2011603	0	True				
ANR	2011718	CallExpression	"is_numeric_string ( Z_STRVAL ( lzval ) , Z_STRLEN ( lzval ) , & lval , & dval , 0 )"		2011603	0					
ANR	2011719	Callee	is_numeric_string		2011603	0					
ANR	2011720	Identifier	is_numeric_string		2011603	0					
ANR	2011721	ArgumentList	Z_STRVAL ( lzval )		2011603	1					
ANR	2011722	Argument	Z_STRVAL ( lzval )		2011603	0					
ANR	2011723	CallExpression	Z_STRVAL ( lzval )		2011603	0					
ANR	2011724	Callee	Z_STRVAL		2011603	0					
ANR	2011725	Identifier	Z_STRVAL		2011603	0					
ANR	2011726	ArgumentList	lzval		2011603	1					
ANR	2011727	Argument	lzval		2011603	0					
ANR	2011728	Identifier	lzval		2011603	0					
ANR	2011729	Argument	Z_STRLEN ( lzval )		2011603	1					
ANR	2011730	CallExpression	Z_STRLEN ( lzval )		2011603	0					
ANR	2011731	Callee	Z_STRLEN		2011603	0					
ANR	2011732	Identifier	Z_STRLEN		2011603	0					
ANR	2011733	ArgumentList	lzval		2011603	1					
ANR	2011734	Argument	lzval		2011603	0					
ANR	2011735	Identifier	lzval		2011603	0					
ANR	2011736	Argument	& lval		2011603	2					
ANR	2011737	UnaryOperationExpression	& lval		2011603	0					
ANR	2011738	UnaryOperator	&		2011603	0					
ANR	2011739	Identifier	lval		2011603	1					
ANR	2011740	Argument	& dval		2011603	3					
ANR	2011741	UnaryOperationExpression	& dval		2011603	0					
ANR	2011742	UnaryOperator	&		2011603	0					
ANR	2011743	Identifier	dval		2011603	1					
ANR	2011744	Argument	0		2011603	4					
ANR	2011745	PrimaryExpression	0		2011603	0					
ANR	2011746	CompoundStatement		30:80:557:557	2011603	1					
ANR	2011747	Label	case IS_DOUBLE :	338:2:8429:8443	2011603	0	True				
ANR	2011748	Identifier	IS_DOUBLE		2011603	0					
ANR	2011749	ExpressionStatement	zval_dtor ( & lzval )	339:3:8448:8465	2011603	1	True				
ANR	2011750	CallExpression	zval_dtor ( & lzval )		2011603	0					
ANR	2011751	Callee	zval_dtor		2011603	0					
ANR	2011752	Identifier	zval_dtor		2011603	0					
ANR	2011753	ArgumentList	& lzval		2011603	1					
ANR	2011754	Argument	& lzval		2011603	0					
ANR	2011755	UnaryOperationExpression	& lzval		2011603	0					
ANR	2011756	UnaryOperator	&		2011603	0					
ANR	2011757	Identifier	lzval		2011603	1					
ANR	2011758	ExpressionStatement	"ZVAL_DOUBLE ( & lzval , dval )"	340:3:8470:8495	2011603	2	True				
ANR	2011759	CallExpression	"ZVAL_DOUBLE ( & lzval , dval )"		2011603	0					
ANR	2011760	Callee	ZVAL_DOUBLE		2011603	0					
ANR	2011761	Identifier	ZVAL_DOUBLE		2011603	0					
ANR	2011762	ArgumentList	& lzval		2011603	1					
ANR	2011763	Argument	& lzval		2011603	0					
ANR	2011764	UnaryOperationExpression	& lzval		2011603	0					
ANR	2011765	UnaryOperator	&		2011603	0					
ANR	2011766	Identifier	lzval		2011603	1					
ANR	2011767	Argument	dval		2011603	1					
ANR	2011768	Identifier	dval		2011603	0					
ANR	2011769	GotoStatement	goto double_case ;	341:3:8500:8516	2011603	3	True				
ANR	2011770	Identifier	double_case		2011603	0					
ANR	2011771	Label	case IS_LONG :	343:2:8521:8533	2011603	4	True				
ANR	2011772	Identifier	IS_LONG		2011603	0					
ANR	2011773	ExpressionStatement	zval_dtor ( & lzval )	344:3:8538:8555	2011603	5	True				
ANR	2011774	CallExpression	zval_dtor ( & lzval )		2011603	0					
ANR	2011775	Callee	zval_dtor		2011603	0					
ANR	2011776	Identifier	zval_dtor		2011603	0					
ANR	2011777	ArgumentList	& lzval		2011603	1					
ANR	2011778	Argument	& lzval		2011603	0					
ANR	2011779	UnaryOperationExpression	& lzval		2011603	0					
ANR	2011780	UnaryOperator	&		2011603	0					
ANR	2011781	Identifier	lzval		2011603	1					
ANR	2011782	ExpressionStatement	"ZVAL_LONG ( & lzval , lval )"	345:3:8560:8583	2011603	6	True				
ANR	2011783	CallExpression	"ZVAL_LONG ( & lzval , lval )"		2011603	0					
ANR	2011784	Callee	ZVAL_LONG		2011603	0					
ANR	2011785	Identifier	ZVAL_LONG		2011603	0					
ANR	2011786	ArgumentList	& lzval		2011603	1					
ANR	2011787	Argument	& lzval		2011603	0					
ANR	2011788	UnaryOperationExpression	& lzval		2011603	0					
ANR	2011789	UnaryOperator	&		2011603	0					
ANR	2011790	Identifier	lzval		2011603	1					
ANR	2011791	Argument	lval		2011603	1					
ANR	2011792	Identifier	lval		2011603	0					
ANR	2011793	GotoStatement	goto long_case ;	346:3:8588:8602	2011603	7	True				
ANR	2011794	Identifier	long_case		2011603	0					
ANR	2011795	Statement	do_from_zval_err	350:2:8666:8681	2011603	4	True				
ANR	2011796	Statement	(	350:18:8682:8682	2011603	5	True				
ANR	2011797	Statement	ctx	350:19:8683:8685	2011603	6	True				
ANR	2011798	Statement	","	350:22:8686:8686	2011603	7	True				
ANR	2011799	Statement	"""expected an integer, but got a non numeric """	350:24:8688:8732	2011603	8	True				
ANR	2011800	Statement	"""string (possibly from a converted object): '%s'"""	351:4:8738:8786	2011603	9	True				
ANR	2011801	Statement	","	351:53:8787:8787	2011603	10	True				
ANR	2011802	Statement	Z_STRVAL_P	351:55:8789:8798	2011603	11	True				
ANR	2011803	Statement	(	351:65:8799:8799	2011603	12	True				
ANR	2011804	Statement	arr_value	351:66:8800:8808	2011603	13	True				
ANR	2011805	Statement	)	351:75:8809:8809	2011603	14	True				
ANR	2011806	Statement	)	351:76:8810:8810	2011603	15	True				
ANR	2011807	ExpressionStatement		351:77:8811:8811	2011603	16	True				
ANR	2011808	BreakStatement	break ;	352:2:8815:8820	2011603	17	True				
ANR	2011809	Label	default :	355:1:8827:8834	2011603	11	True				
ANR	2011810	Identifier	default		2011603	0					
ANR	2011811	Statement	do_from_zval_err	356:2:8838:8853	2011603	12	True				
ANR	2011812	Statement	(	356:18:8854:8854	2011603	13	True				
ANR	2011813	Statement	ctx	356:19:8855:8857	2011603	14	True				
ANR	2011814	Statement	","	356:22:8858:8858	2011603	15	True				
ANR	2011815	Statement	"""%s"""	356:24:8860:8863	2011603	16	True				
ANR	2011816	Statement	","	356:28:8864:8864	2011603	17	True				
ANR	2011817	Statement	"""expected an integer, either of a PHP """	356:30:8866:8904	2011603	18	True				
ANR	2011818	Statement	"""integer type or of a convertible type"""	357:4:8910:8948	2011603	19	True				
ANR	2011819	Statement	)	357:43:8949:8949	2011603	20	True				
ANR	2011820	ExpressionStatement		357:44:8950:8950	2011603	21	True				
ANR	2011821	BreakStatement	break ;	358:2:8954:8959	2011603	22	True				
ANR	2011822	ExpressionStatement	zval_dtor ( & lzval )	361:1:8966:8983	2011603	5	True				
ANR	2011823	CallExpression	zval_dtor ( & lzval )		2011603	0					
ANR	2011824	Callee	zval_dtor		2011603	0					
ANR	2011825	Identifier	zval_dtor		2011603	0					
ANR	2011826	ArgumentList	& lzval		2011603	1					
ANR	2011827	Argument	& lzval		2011603	0					
ANR	2011828	UnaryOperationExpression	& lzval		2011603	0					
ANR	2011829	UnaryOperator	&		2011603	0					
ANR	2011830	Identifier	lzval		2011603	1					
ANR	2011831	ReturnStatement	return ret ;	363:1:8987:8997	2011603	6	True				
ANR	2011832	Identifier	ret		2011603	0					
ANR	2011833	ReturnType	static zend_long		2011603	1					
ANR	2011834	Identifier	from_zval_integer_common		2011603	2					
ANR	2011835	ParameterList	"const zval * arr_value , ser_context * ctx"		2011603	3					
ANR	2011836	Parameter	const zval * arr_value	307:42:7826:7846	2011603	0	True				
ANR	2011837	ParameterType	const zval *		2011603	0					
ANR	2011838	Identifier	arr_value		2011603	1					
ANR	2011839	Parameter	ser_context * ctx	307:65:7849:7864	2011603	1	True				
ANR	2011840	ParameterType	ser_context *		2011603	0					
ANR	2011841	Identifier	ctx		2011603	1					
ANR	2011842	CFGEntryNode	ENTRY		2011603		True				
ANR	2011843	CFGExitNode	EXIT		2011603		True				
ANR	2011844	Symbol	ret		2011603						
ANR	2011845	Symbol	& lval		2011603						
ANR	2011846	Symbol	ctx		2011603						
ANR	2011847	Symbol	lval		2011603						
ANR	2011848	Symbol	& lzval		2011603						
ANR	2011849	Symbol	Z_STRLEN		2011603						
ANR	2011850	Symbol	Z_TYPE_P		2011603						
ANR	2011851	Symbol	Z_LVAL_P		2011603						
ANR	2011852	Symbol	arr_value		2011603						
ANR	2011853	Symbol	dval		2011603						
ANR	2011854	Symbol	is_numeric_string		2011603						
ANR	2011855	Symbol	IS_LONG		2011603						
ANR	2011856	Symbol	Z_STRVAL		2011603						
ANR	2011857	Symbol	lzval		2011603						
ANR	2011858	Symbol	& dval		2011603						
ANR	2011859	Function	from_zval_write_int	365:0:9001:9406							
ANR	2011860	FunctionDef	"from_zval_write_int (const zval * arr_value , char * field , ser_context * ctx)"		2011859	0					
ANR	2011861	CompoundStatement		366:0:9080:9406	2011859	0					
ANR	2011862	IdentifierDeclStatement	zend_long lval ;	367:1:9083:9097	2011859	0	True				
ANR	2011863	IdentifierDecl	lval		2011859	0					
ANR	2011864	IdentifierDeclType	zend_long		2011859	0					
ANR	2011865	Identifier	lval		2011859	1					
ANR	2011866	IdentifierDeclStatement	int ival ;	368:1:9100:9108	2011859	1	True				
ANR	2011867	IdentifierDecl	ival		2011859	0					
ANR	2011868	IdentifierDeclType	int		2011859	0					
ANR	2011869	Identifier	ival		2011859	1					
ANR	2011870	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	370:1:9112:9159	2011859	2	True				
ANR	2011871	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		2011859	0		=			
ANR	2011872	Identifier	lval		2011859	0					
ANR	2011873	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		2011859	1					
ANR	2011874	Callee	from_zval_integer_common		2011859	0					
ANR	2011875	Identifier	from_zval_integer_common		2011859	0					
ANR	2011876	ArgumentList	arr_value		2011859	1					
ANR	2011877	Argument	arr_value		2011859	0					
ANR	2011878	Identifier	arr_value		2011859	0					
ANR	2011879	Argument	ctx		2011859	1					
ANR	2011880	Identifier	ctx		2011859	0					
ANR	2011881	IfStatement	if ( ctx -> err . has_error )		2011859	3					
ANR	2011882	Condition	ctx -> err . has_error	371:5:9166:9183	2011859	0	True				
ANR	2011883	MemberAccess	ctx -> err . has_error		2011859	0					
ANR	2011884	PtrMemberAccess	ctx -> err		2011859	0					
ANR	2011885	Identifier	ctx		2011859	0					
ANR	2011886	Identifier	err		2011859	1					
ANR	2011887	Identifier	has_error		2011859	1					
ANR	2011888	CompoundStatement		6:25:105:105	2011859	1					
ANR	2011889	ReturnStatement	return ;	372:2:9190:9196	2011859	0	True				
ANR	2011890	IfStatement	if ( lval > INT_MAX || lval < INT_MIN )		2011859	4					
ANR	2011891	Condition	lval > INT_MAX || lval < INT_MIN	375:5:9207:9238	2011859	0	True				
ANR	2011892	OrExpression	lval > INT_MAX || lval < INT_MIN		2011859	0		||			
ANR	2011893	RelationalExpression	lval > INT_MAX		2011859	0		>			
ANR	2011894	Identifier	lval		2011859	0					
ANR	2011895	Identifier	INT_MAX		2011859	1					
ANR	2011896	RelationalExpression	lval < INT_MIN		2011859	1		<			
ANR	2011897	Identifier	lval		2011859	0					
ANR	2011898	Identifier	INT_MIN		2011859	1					
ANR	2011899	CompoundStatement		10:39:160:160	2011859	1					
ANR	2011900	Statement	do_from_zval_err	376:2:9245:9260	2011859	0	True				
ANR	2011901	Statement	(	376:18:9261:9261	2011859	1	True				
ANR	2011902	Statement	ctx	376:19:9262:9264	2011859	2	True				
ANR	2011903	Statement	","	376:22:9265:9265	2011859	3	True				
ANR	2011904	Statement	"""%s"""	376:24:9267:9270	2011859	4	True				
ANR	2011905	Statement	","	376:28:9271:9271	2011859	5	True				
ANR	2011906	Statement	"""given PHP integer is out of bounds """	376:30:9273:9309	2011859	6	True				
ANR	2011907	Statement	"""for a native int"""	377:4:9315:9332	2011859	7	True				
ANR	2011908	Statement	)	377:22:9333:9333	2011859	8	True				
ANR	2011909	ExpressionStatement		377:23:9334:9334	2011859	9	True				
ANR	2011910	ReturnStatement	return ;	378:2:9338:9344	2011859	10	True				
ANR	2011911	ExpressionStatement	ival = ( int ) lval	381:1:9351:9367	2011859	5	True				
ANR	2011912	AssignmentExpression	ival = ( int ) lval		2011859	0		=			
ANR	2011913	Identifier	ival		2011859	0					
ANR	2011914	CastExpression	( int ) lval		2011859	1					
ANR	2011915	CastTarget	int		2011859	0					
ANR	2011916	Identifier	lval		2011859	1					
ANR	2011917	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	382:1:9370:9404	2011859	6	True				
ANR	2011918	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		2011859	0					
ANR	2011919	Callee	memcpy		2011859	0					
ANR	2011920	Identifier	memcpy		2011859	0					
ANR	2011921	ArgumentList	field		2011859	1					
ANR	2011922	Argument	field		2011859	0					
ANR	2011923	Identifier	field		2011859	0					
ANR	2011924	Argument	& ival		2011859	1					
ANR	2011925	UnaryOperationExpression	& ival		2011859	0					
ANR	2011926	UnaryOperator	&		2011859	0					
ANR	2011927	Identifier	ival		2011859	1					
ANR	2011928	Argument	sizeof ( ival )		2011859	2					
ANR	2011929	SizeofExpression	sizeof ( ival )		2011859	0					
ANR	2011930	Sizeof	sizeof		2011859	0					
ANR	2011931	SizeofOperand	ival		2011859	1					
ANR	2011932	ReturnType	void		2011859	1					
ANR	2011933	Identifier	from_zval_write_int		2011859	2					
ANR	2011934	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		2011859	3					
ANR	2011935	Parameter	const zval * arr_value	365:25:9026:9046	2011859	0	True				
ANR	2011936	ParameterType	const zval *		2011859	0					
ANR	2011937	Identifier	arr_value		2011859	1					
ANR	2011938	Parameter	char * field	365:48:9049:9059	2011859	1	True				
ANR	2011939	ParameterType	char *		2011859	0					
ANR	2011940	Identifier	field		2011859	1					
ANR	2011941	Parameter	ser_context * ctx	365:61:9062:9077	2011859	2	True				
ANR	2011942	ParameterType	ser_context *		2011859	0					
ANR	2011943	Identifier	ctx		2011859	1					
ANR	2011944	CFGEntryNode	ENTRY		2011859		True				
ANR	2011945	CFGExitNode	EXIT		2011859		True				
ANR	2011946	Symbol	arr_value		2011859						
ANR	2011947	Symbol	field		2011859						
ANR	2011948	Symbol	ctx		2011859						
ANR	2011949	Symbol	lval		2011859						
ANR	2011950	Symbol	ctx -> err . has_error		2011859						
ANR	2011951	Symbol	INT_MAX		2011859						
ANR	2011952	Symbol	ival		2011859						
ANR	2011953	Symbol	from_zval_integer_common		2011859						
ANR	2011954	Symbol	* ctx		2011859						
ANR	2011955	Symbol	ctx -> err		2011859						
ANR	2011956	Symbol	INT_MIN		2011859						
ANR	2011957	Symbol	& ival		2011859						
ANR	2011958	Function	from_zval_write_uint32	384:0:9408:9886							
ANR	2011959	FunctionDef	"from_zval_write_uint32 (const zval * arr_value , char * field , ser_context * ctx)"		2011958	0					
ANR	2011960	CompoundStatement		385:0:9497:9886	2011958	0					
ANR	2011961	IdentifierDeclStatement	zend_long lval ;	386:1:9500:9514	2011958	0	True				
ANR	2011962	IdentifierDecl	lval		2011958	0					
ANR	2011963	IdentifierDeclType	zend_long		2011958	0					
ANR	2011964	Identifier	lval		2011958	1					
ANR	2011965	IdentifierDeclStatement	uint32_t ival ;	387:1:9517:9530	2011958	1	True				
ANR	2011966	IdentifierDecl	ival		2011958	0					
ANR	2011967	IdentifierDeclType	uint32_t		2011958	0					
ANR	2011968	Identifier	ival		2011958	1					
ANR	2011969	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	389:1:9534:9581	2011958	2	True				
ANR	2011970	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		2011958	0		=			
ANR	2011971	Identifier	lval		2011958	0					
ANR	2011972	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		2011958	1					
ANR	2011973	Callee	from_zval_integer_common		2011958	0					
ANR	2011974	Identifier	from_zval_integer_common		2011958	0					
ANR	2011975	ArgumentList	arr_value		2011958	1					
ANR	2011976	Argument	arr_value		2011958	0					
ANR	2011977	Identifier	arr_value		2011958	0					
ANR	2011978	Argument	ctx		2011958	1					
ANR	2011979	Identifier	ctx		2011958	0					
ANR	2011980	IfStatement	if ( ctx -> err . has_error )		2011958	3					
ANR	2011981	Condition	ctx -> err . has_error	390:5:9588:9605	2011958	0	True				
ANR	2011982	MemberAccess	ctx -> err . has_error		2011958	0					
ANR	2011983	PtrMemberAccess	ctx -> err		2011958	0					
ANR	2011984	Identifier	ctx		2011958	0					
ANR	2011985	Identifier	err		2011958	1					
ANR	2011986	Identifier	has_error		2011958	1					
ANR	2011987	CompoundStatement		6:25:110:110	2011958	1					
ANR	2011988	ReturnStatement	return ;	391:2:9612:9618	2011958	0	True				
ANR	2011989	IfStatement	if ( sizeof ( zend_long ) > sizeof ( uint32_t ) && ( lval < 0 || lval > 0xFFFFFFFF ) )		2011958	4					
ANR	2011990	Condition	sizeof ( zend_long ) > sizeof ( uint32_t ) && ( lval < 0 || lval > 0xFFFFFFFF )	394:5:9629:9699	2011958	0	True				
ANR	2011991	AndExpression	sizeof ( zend_long ) > sizeof ( uint32_t ) && ( lval < 0 || lval > 0xFFFFFFFF )		2011958	0		&&			
ANR	2011992	RelationalExpression	sizeof ( zend_long ) > sizeof ( uint32_t )		2011958	0		>			
ANR	2011993	SizeofExpression	sizeof ( zend_long )		2011958	0					
ANR	2011994	Sizeof	sizeof		2011958	0					
ANR	2011995	SizeofOperand	zend_long		2011958	1					
ANR	2011996	SizeofExpression	sizeof ( uint32_t )		2011958	1					
ANR	2011997	Sizeof	sizeof		2011958	0					
ANR	2011998	SizeofOperand	uint32_t		2011958	1					
ANR	2011999	OrExpression	lval < 0 || lval > 0xFFFFFFFF		2011958	1		||			
ANR	2012000	RelationalExpression	lval < 0		2011958	0		<			
ANR	2012001	Identifier	lval		2011958	0					
ANR	2012002	PrimaryExpression	0		2011958	1					
ANR	2012003	RelationalExpression	lval > 0xFFFFFFFF		2011958	1		>			
ANR	2012004	Identifier	lval		2011958	0					
ANR	2012005	PrimaryExpression	0xFFFFFFFF		2011958	1					
ANR	2012006	CompoundStatement		10:78:204:204	2011958	1					
ANR	2012007	Statement	do_from_zval_err	395:2:9706:9721	2011958	0	True				
ANR	2012008	Statement	(	395:18:9722:9722	2011958	1	True				
ANR	2012009	Statement	ctx	395:19:9723:9725	2011958	2	True				
ANR	2012010	Statement	","	395:22:9726:9726	2011958	3	True				
ANR	2012011	Statement	"""%s"""	395:24:9728:9731	2011958	4	True				
ANR	2012012	Statement	","	395:28:9732:9732	2011958	5	True				
ANR	2012013	Statement	"""given PHP integer is out of bounds """	395:30:9734:9770	2011958	6	True				
ANR	2012014	Statement	"""for an unsigned 32-bit integer"""	396:4:9776:9807	2011958	7	True				
ANR	2012015	Statement	)	396:36:9808:9808	2011958	8	True				
ANR	2012016	ExpressionStatement		396:37:9809:9809	2011958	9	True				
ANR	2012017	ReturnStatement	return ;	397:2:9813:9819	2011958	10	True				
ANR	2012018	ExpressionStatement	ival = ( uint32_t ) lval	400:1:9826:9847	2011958	5	True				
ANR	2012019	AssignmentExpression	ival = ( uint32_t ) lval		2011958	0		=			
ANR	2012020	Identifier	ival		2011958	0					
ANR	2012021	CastExpression	( uint32_t ) lval		2011958	1					
ANR	2012022	CastTarget	uint32_t		2011958	0					
ANR	2012023	Identifier	lval		2011958	1					
ANR	2012024	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	401:1:9850:9884	2011958	6	True				
ANR	2012025	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		2011958	0					
ANR	2012026	Callee	memcpy		2011958	0					
ANR	2012027	Identifier	memcpy		2011958	0					
ANR	2012028	ArgumentList	field		2011958	1					
ANR	2012029	Argument	field		2011958	0					
ANR	2012030	Identifier	field		2011958	0					
ANR	2012031	Argument	& ival		2011958	1					
ANR	2012032	UnaryOperationExpression	& ival		2011958	0					
ANR	2012033	UnaryOperator	&		2011958	0					
ANR	2012034	Identifier	ival		2011958	1					
ANR	2012035	Argument	sizeof ( ival )		2011958	2					
ANR	2012036	SizeofExpression	sizeof ( ival )		2011958	0					
ANR	2012037	Sizeof	sizeof		2011958	0					
ANR	2012038	SizeofOperand	ival		2011958	1					
ANR	2012039	ReturnType	static void		2011958	1					
ANR	2012040	Identifier	from_zval_write_uint32		2011958	2					
ANR	2012041	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		2011958	3					
ANR	2012042	Parameter	const zval * arr_value	384:35:9443:9463	2011958	0	True				
ANR	2012043	ParameterType	const zval *		2011958	0					
ANR	2012044	Identifier	arr_value		2011958	1					
ANR	2012045	Parameter	char * field	384:58:9466:9476	2011958	1	True				
ANR	2012046	ParameterType	char *		2011958	0					
ANR	2012047	Identifier	field		2011958	1					
ANR	2012048	Parameter	ser_context * ctx	384:71:9479:9494	2011958	2	True				
ANR	2012049	ParameterType	ser_context *		2011958	0					
ANR	2012050	Identifier	ctx		2011958	1					
ANR	2012051	CFGEntryNode	ENTRY		2011958		True				
ANR	2012052	CFGExitNode	EXIT		2011958		True				
ANR	2012053	Symbol	arr_value		2011958						
ANR	2012054	Symbol	field		2011958						
ANR	2012055	Symbol	ctx		2011958						
ANR	2012056	Symbol	lval		2011958						
ANR	2012057	Symbol	ctx -> err . has_error		2011958						
ANR	2012058	Symbol	ival		2011958						
ANR	2012059	Symbol	from_zval_integer_common		2011958						
ANR	2012060	Symbol	* ctx		2011958						
ANR	2012061	Symbol	ctx -> err		2011958						
ANR	2012062	Symbol	& ival		2011958						
ANR	2012063	Function	from_zval_write_net_uint16	403:0:9888:10331							
ANR	2012064	FunctionDef	"from_zval_write_net_uint16 (const zval * arr_value , char * field , ser_context * ctx)"		2012063	0					
ANR	2012065	CompoundStatement		404:0:9981:10331	2012063	0					
ANR	2012066	IdentifierDeclStatement	zend_long lval ;	405:1:9984:9998	2012063	0	True				
ANR	2012067	IdentifierDecl	lval		2012063	0					
ANR	2012068	IdentifierDeclType	zend_long		2012063	0					
ANR	2012069	Identifier	lval		2012063	1					
ANR	2012070	IdentifierDeclStatement	uint16_t ival ;	406:1:10001:10014	2012063	1	True				
ANR	2012071	IdentifierDecl	ival		2012063	0					
ANR	2012072	IdentifierDeclType	uint16_t		2012063	0					
ANR	2012073	Identifier	ival		2012063	1					
ANR	2012074	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	408:1:10018:10065	2012063	2	True				
ANR	2012075	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		2012063	0		=			
ANR	2012076	Identifier	lval		2012063	0					
ANR	2012077	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		2012063	1					
ANR	2012078	Callee	from_zval_integer_common		2012063	0					
ANR	2012079	Identifier	from_zval_integer_common		2012063	0					
ANR	2012080	ArgumentList	arr_value		2012063	1					
ANR	2012081	Argument	arr_value		2012063	0					
ANR	2012082	Identifier	arr_value		2012063	0					
ANR	2012083	Argument	ctx		2012063	1					
ANR	2012084	Identifier	ctx		2012063	0					
ANR	2012085	IfStatement	if ( ctx -> err . has_error )		2012063	3					
ANR	2012086	Condition	ctx -> err . has_error	409:5:10072:10089	2012063	0	True				
ANR	2012087	MemberAccess	ctx -> err . has_error		2012063	0					
ANR	2012088	PtrMemberAccess	ctx -> err		2012063	0					
ANR	2012089	Identifier	ctx		2012063	0					
ANR	2012090	Identifier	err		2012063	1					
ANR	2012091	Identifier	has_error		2012063	1					
ANR	2012092	CompoundStatement		6:25:110:110	2012063	1					
ANR	2012093	ReturnStatement	return ;	410:2:10096:10102	2012063	0	True				
ANR	2012094	IfStatement	if ( lval < 0 || lval > 0xFFFF )		2012063	4					
ANR	2012095	Condition	lval < 0 || lval > 0xFFFF	413:5:10113:10137	2012063	0	True				
ANR	2012096	OrExpression	lval < 0 || lval > 0xFFFF		2012063	0		||			
ANR	2012097	RelationalExpression	lval < 0		2012063	0		<			
ANR	2012098	Identifier	lval		2012063	0					
ANR	2012099	PrimaryExpression	0		2012063	1					
ANR	2012100	RelationalExpression	lval > 0xFFFF		2012063	1		>			
ANR	2012101	Identifier	lval		2012063	0					
ANR	2012102	PrimaryExpression	0xFFFF		2012063	1					
ANR	2012103	CompoundStatement		10:32:158:158	2012063	1					
ANR	2012104	Statement	do_from_zval_err	414:2:10144:10159	2012063	0	True				
ANR	2012105	Statement	(	414:18:10160:10160	2012063	1	True				
ANR	2012106	Statement	ctx	414:19:10161:10163	2012063	2	True				
ANR	2012107	Statement	","	414:22:10164:10164	2012063	3	True				
ANR	2012108	Statement	"""%s"""	414:24:10166:10169	2012063	4	True				
ANR	2012109	Statement	","	414:28:10170:10170	2012063	5	True				
ANR	2012110	Statement	"""given PHP integer is out of bounds """	414:30:10172:10208	2012063	6	True				
ANR	2012111	Statement	"""for an unsigned 16-bit integer"""	415:4:10214:10245	2012063	7	True				
ANR	2012112	Statement	)	415:36:10246:10246	2012063	8	True				
ANR	2012113	ExpressionStatement		415:37:10247:10247	2012063	9	True				
ANR	2012114	ReturnStatement	return ;	416:2:10251:10257	2012063	10	True				
ANR	2012115	ExpressionStatement	ival = htons ( ( uint16_t ) lval )	419:1:10264:10292	2012063	5	True				
ANR	2012116	AssignmentExpression	ival = htons ( ( uint16_t ) lval )		2012063	0		=			
ANR	2012117	Identifier	ival		2012063	0					
ANR	2012118	CallExpression	htons ( ( uint16_t ) lval )		2012063	1					
ANR	2012119	Callee	htons		2012063	0					
ANR	2012120	Identifier	htons		2012063	0					
ANR	2012121	ArgumentList	( uint16_t ) lval		2012063	1					
ANR	2012122	Argument	( uint16_t ) lval		2012063	0					
ANR	2012123	CastExpression	( uint16_t ) lval		2012063	0					
ANR	2012124	CastTarget	uint16_t		2012063	0					
ANR	2012125	Identifier	lval		2012063	1					
ANR	2012126	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	420:1:10295:10329	2012063	6	True				
ANR	2012127	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		2012063	0					
ANR	2012128	Callee	memcpy		2012063	0					
ANR	2012129	Identifier	memcpy		2012063	0					
ANR	2012130	ArgumentList	field		2012063	1					
ANR	2012131	Argument	field		2012063	0					
ANR	2012132	Identifier	field		2012063	0					
ANR	2012133	Argument	& ival		2012063	1					
ANR	2012134	UnaryOperationExpression	& ival		2012063	0					
ANR	2012135	UnaryOperator	&		2012063	0					
ANR	2012136	Identifier	ival		2012063	1					
ANR	2012137	Argument	sizeof ( ival )		2012063	2					
ANR	2012138	SizeofExpression	sizeof ( ival )		2012063	0					
ANR	2012139	Sizeof	sizeof		2012063	0					
ANR	2012140	SizeofOperand	ival		2012063	1					
ANR	2012141	ReturnType	static void		2012063	1					
ANR	2012142	Identifier	from_zval_write_net_uint16		2012063	2					
ANR	2012143	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		2012063	3					
ANR	2012144	Parameter	const zval * arr_value	403:39:9927:9947	2012063	0	True				
ANR	2012145	ParameterType	const zval *		2012063	0					
ANR	2012146	Identifier	arr_value		2012063	1					
ANR	2012147	Parameter	char * field	403:62:9950:9960	2012063	1	True				
ANR	2012148	ParameterType	char *		2012063	0					
ANR	2012149	Identifier	field		2012063	1					
ANR	2012150	Parameter	ser_context * ctx	403:75:9963:9978	2012063	2	True				
ANR	2012151	ParameterType	ser_context *		2012063	0					
ANR	2012152	Identifier	ctx		2012063	1					
ANR	2012153	CFGEntryNode	ENTRY		2012063		True				
ANR	2012154	CFGExitNode	EXIT		2012063		True				
ANR	2012155	Symbol	arr_value		2012063						
ANR	2012156	Symbol	field		2012063						
ANR	2012157	Symbol	ctx		2012063						
ANR	2012158	Symbol	lval		2012063						
ANR	2012159	Symbol	htons		2012063						
ANR	2012160	Symbol	ctx -> err . has_error		2012063						
ANR	2012161	Symbol	ival		2012063						
ANR	2012162	Symbol	from_zval_integer_common		2012063						
ANR	2012163	Symbol	* ctx		2012063						
ANR	2012164	Symbol	ctx -> err		2012063						
ANR	2012165	Symbol	& ival		2012063						
ANR	2012166	Function	from_zval_write_sa_family	422:0:10333:10806							
ANR	2012167	FunctionDef	"from_zval_write_sa_family (const zval * arr_value , char * field , ser_context * ctx)"		2012166	0					
ANR	2012168	CompoundStatement		423:0:10425:10806	2012166	0					
ANR	2012169	IdentifierDeclStatement	zend_long lval ;	424:1:10428:10442	2012166	0	True				
ANR	2012170	IdentifierDecl	lval		2012166	0					
ANR	2012171	IdentifierDeclType	zend_long		2012166	0					
ANR	2012172	Identifier	lval		2012166	1					
ANR	2012173	IdentifierDeclStatement	sa_family_t ival ;	425:1:10445:10461	2012166	1	True				
ANR	2012174	IdentifierDecl	ival		2012166	0					
ANR	2012175	IdentifierDeclType	sa_family_t		2012166	0					
ANR	2012176	Identifier	ival		2012166	1					
ANR	2012177	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	427:1:10465:10512	2012166	2	True				
ANR	2012178	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		2012166	0		=			
ANR	2012179	Identifier	lval		2012166	0					
ANR	2012180	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		2012166	1					
ANR	2012181	Callee	from_zval_integer_common		2012166	0					
ANR	2012182	Identifier	from_zval_integer_common		2012166	0					
ANR	2012183	ArgumentList	arr_value		2012166	1					
ANR	2012184	Argument	arr_value		2012166	0					
ANR	2012185	Identifier	arr_value		2012166	0					
ANR	2012186	Argument	ctx		2012166	1					
ANR	2012187	Identifier	ctx		2012166	0					
ANR	2012188	IfStatement	if ( ctx -> err . has_error )		2012166	3					
ANR	2012189	Condition	ctx -> err . has_error	428:5:10519:10536	2012166	0	True				
ANR	2012190	MemberAccess	ctx -> err . has_error		2012166	0					
ANR	2012191	PtrMemberAccess	ctx -> err		2012166	0					
ANR	2012192	Identifier	ctx		2012166	0					
ANR	2012193	Identifier	err		2012166	1					
ANR	2012194	Identifier	has_error		2012166	1					
ANR	2012195	CompoundStatement		6:25:113:113	2012166	1					
ANR	2012196	ReturnStatement	return ;	429:2:10543:10549	2012166	0	True				
ANR	2012197	IfStatement	if ( lval < 0 || lval > ( sa_family_t ) - 1 )		2012166	4					
ANR	2012198	Condition	lval < 0 || lval > ( sa_family_t ) - 1	432:5:10560:10593	2012166	0	True				
ANR	2012199	OrExpression	lval < 0 || lval > ( sa_family_t ) - 1		2012166	0		||			
ANR	2012200	RelationalExpression	lval < 0		2012166	0		<			
ANR	2012201	Identifier	lval		2012166	0					
ANR	2012202	PrimaryExpression	0		2012166	1					
ANR	2012203	RelationalExpression	lval > ( sa_family_t ) - 1		2012166	1		>			
ANR	2012204	Identifier	lval		2012166	0					
ANR	2012205	CastExpression	( sa_family_t ) - 1		2012166	1					
ANR	2012206	CastTarget	sa_family_t		2012166	0					
ANR	2012207	UnaryOperationExpression	- 1		2012166	1					
ANR	2012208	UnaryOperator	-		2012166	0					
ANR	2012209	PrimaryExpression	1		2012166	1					
ANR	2012210	CompoundStatement		10:41:170:170	2012166	1					
ANR	2012211	Statement	do_from_zval_err	433:2:10630:10645	2012166	0	True				
ANR	2012212	Statement	(	433:18:10646:10646	2012166	1	True				
ANR	2012213	Statement	ctx	433:19:10647:10649	2012166	2	True				
ANR	2012214	Statement	","	433:22:10650:10650	2012166	3	True				
ANR	2012215	Statement	"""%s"""	433:24:10652:10655	2012166	4	True				
ANR	2012216	Statement	","	433:28:10656:10656	2012166	5	True				
ANR	2012217	Statement	"""given PHP integer is out of bounds """	433:30:10658:10694	2012166	6	True				
ANR	2012218	Statement	"""for a sa_family_t value"""	434:4:10700:10724	2012166	7	True				
ANR	2012219	Statement	)	434:29:10725:10725	2012166	8	True				
ANR	2012220	ExpressionStatement		434:30:10726:10726	2012166	9	True				
ANR	2012221	ReturnStatement	return ;	435:2:10730:10736	2012166	10	True				
ANR	2012222	ExpressionStatement	ival = ( sa_family_t ) lval	438:1:10743:10767	2012166	5	True				
ANR	2012223	AssignmentExpression	ival = ( sa_family_t ) lval		2012166	0		=			
ANR	2012224	Identifier	ival		2012166	0					
ANR	2012225	CastExpression	( sa_family_t ) lval		2012166	1					
ANR	2012226	CastTarget	sa_family_t		2012166	0					
ANR	2012227	Identifier	lval		2012166	1					
ANR	2012228	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	439:1:10770:10804	2012166	6	True				
ANR	2012229	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		2012166	0					
ANR	2012230	Callee	memcpy		2012166	0					
ANR	2012231	Identifier	memcpy		2012166	0					
ANR	2012232	ArgumentList	field		2012166	1					
ANR	2012233	Argument	field		2012166	0					
ANR	2012234	Identifier	field		2012166	0					
ANR	2012235	Argument	& ival		2012166	1					
ANR	2012236	UnaryOperationExpression	& ival		2012166	0					
ANR	2012237	UnaryOperator	&		2012166	0					
ANR	2012238	Identifier	ival		2012166	1					
ANR	2012239	Argument	sizeof ( ival )		2012166	2					
ANR	2012240	SizeofExpression	sizeof ( ival )		2012166	0					
ANR	2012241	Sizeof	sizeof		2012166	0					
ANR	2012242	SizeofOperand	ival		2012166	1					
ANR	2012243	ReturnType	static void		2012166	1					
ANR	2012244	Identifier	from_zval_write_sa_family		2012166	2					
ANR	2012245	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		2012166	3					
ANR	2012246	Parameter	const zval * arr_value	422:38:10371:10391	2012166	0	True				
ANR	2012247	ParameterType	const zval *		2012166	0					
ANR	2012248	Identifier	arr_value		2012166	1					
ANR	2012249	Parameter	char * field	422:61:10394:10404	2012166	1	True				
ANR	2012250	ParameterType	char *		2012166	0					
ANR	2012251	Identifier	field		2012166	1					
ANR	2012252	Parameter	ser_context * ctx	422:74:10407:10422	2012166	2	True				
ANR	2012253	ParameterType	ser_context *		2012166	0					
ANR	2012254	Identifier	ctx		2012166	1					
ANR	2012255	CFGEntryNode	ENTRY		2012166		True				
ANR	2012256	CFGExitNode	EXIT		2012166		True				
ANR	2012257	Symbol	arr_value		2012166						
ANR	2012258	Symbol	field		2012166						
ANR	2012259	Symbol	ctx		2012166						
ANR	2012260	Symbol	lval		2012166						
ANR	2012261	Symbol	ctx -> err . has_error		2012166						
ANR	2012262	Symbol	ival		2012166						
ANR	2012263	Symbol	from_zval_integer_common		2012166						
ANR	2012264	Symbol	* ctx		2012166						
ANR	2012265	Symbol	ctx -> err		2012166						
ANR	2012266	Symbol	& ival		2012166						
ANR	2012267	Function	from_zval_write_pid_t	441:0:10808:11248							
ANR	2012268	FunctionDef	"from_zval_write_pid_t (const zval * arr_value , char * field , ser_context * ctx)"		2012267	0					
ANR	2012269	CompoundStatement		442:0:10896:11248	2012267	0					
ANR	2012270	IdentifierDeclStatement	zend_long lval ;	443:1:10899:10913	2012267	0	True				
ANR	2012271	IdentifierDecl	lval		2012267	0					
ANR	2012272	IdentifierDeclType	zend_long		2012267	0					
ANR	2012273	Identifier	lval		2012267	1					
ANR	2012274	IdentifierDeclStatement	pid_t ival ;	444:1:10916:10926	2012267	1	True				
ANR	2012275	IdentifierDecl	ival		2012267	0					
ANR	2012276	IdentifierDeclType	pid_t		2012267	0					
ANR	2012277	Identifier	ival		2012267	1					
ANR	2012278	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	446:1:10930:10977	2012267	2	True				
ANR	2012279	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		2012267	0		=			
ANR	2012280	Identifier	lval		2012267	0					
ANR	2012281	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		2012267	1					
ANR	2012282	Callee	from_zval_integer_common		2012267	0					
ANR	2012283	Identifier	from_zval_integer_common		2012267	0					
ANR	2012284	ArgumentList	arr_value		2012267	1					
ANR	2012285	Argument	arr_value		2012267	0					
ANR	2012286	Identifier	arr_value		2012267	0					
ANR	2012287	Argument	ctx		2012267	1					
ANR	2012288	Identifier	ctx		2012267	0					
ANR	2012289	IfStatement	if ( ctx -> err . has_error )		2012267	3					
ANR	2012290	Condition	ctx -> err . has_error	447:5:10984:11001	2012267	0	True				
ANR	2012291	MemberAccess	ctx -> err . has_error		2012267	0					
ANR	2012292	PtrMemberAccess	ctx -> err		2012267	0					
ANR	2012293	Identifier	ctx		2012267	0					
ANR	2012294	Identifier	err		2012267	1					
ANR	2012295	Identifier	has_error		2012267	1					
ANR	2012296	CompoundStatement		6:25:107:107	2012267	1					
ANR	2012297	ReturnStatement	return ;	448:2:11008:11014	2012267	0	True				
ANR	2012298	IfStatement	if ( lval < 0 || ( pid_t ) lval != lval )		2012267	4					
ANR	2012299	Condition	lval < 0 || ( pid_t ) lval != lval	451:5:11025:11055	2012267	0	True				
ANR	2012300	OrExpression	lval < 0 || ( pid_t ) lval != lval		2012267	0		||			
ANR	2012301	RelationalExpression	lval < 0		2012267	0		<			
ANR	2012302	Identifier	lval		2012267	0					
ANR	2012303	PrimaryExpression	0		2012267	1					
ANR	2012304	EqualityExpression	( pid_t ) lval != lval		2012267	1		!=			
ANR	2012305	CastExpression	( pid_t ) lval		2012267	0					
ANR	2012306	CastTarget	pid_t		2012267	0					
ANR	2012307	Identifier	lval		2012267	1					
ANR	2012308	Identifier	lval		2012267	1					
ANR	2012309	CompoundStatement		10:38:161:161	2012267	1					
ANR	2012310	Statement	do_from_zval_err	452:2:11084:11099	2012267	0	True				
ANR	2012311	Statement	(	452:18:11100:11100	2012267	1	True				
ANR	2012312	Statement	ctx	452:19:11101:11103	2012267	2	True				
ANR	2012313	Statement	","	452:22:11104:11104	2012267	3	True				
ANR	2012314	Statement	"""%s"""	452:24:11106:11109	2012267	4	True				
ANR	2012315	Statement	","	452:28:11110:11110	2012267	5	True				
ANR	2012316	Statement	"""given PHP integer is out of bounds """	452:30:11112:11148	2012267	6	True				
ANR	2012317	Statement	"""for a pid_t value"""	453:4:11154:11172	2012267	7	True				
ANR	2012318	Statement	)	453:23:11173:11173	2012267	8	True				
ANR	2012319	ExpressionStatement		453:24:11174:11174	2012267	9	True				
ANR	2012320	ReturnStatement	return ;	454:2:11178:11184	2012267	10	True				
ANR	2012321	ExpressionStatement	ival = ( pid_t ) lval	457:1:11191:11209	2012267	5	True				
ANR	2012322	AssignmentExpression	ival = ( pid_t ) lval		2012267	0		=			
ANR	2012323	Identifier	ival		2012267	0					
ANR	2012324	CastExpression	( pid_t ) lval		2012267	1					
ANR	2012325	CastTarget	pid_t		2012267	0					
ANR	2012326	Identifier	lval		2012267	1					
ANR	2012327	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	458:1:11212:11246	2012267	6	True				
ANR	2012328	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		2012267	0					
ANR	2012329	Callee	memcpy		2012267	0					
ANR	2012330	Identifier	memcpy		2012267	0					
ANR	2012331	ArgumentList	field		2012267	1					
ANR	2012332	Argument	field		2012267	0					
ANR	2012333	Identifier	field		2012267	0					
ANR	2012334	Argument	& ival		2012267	1					
ANR	2012335	UnaryOperationExpression	& ival		2012267	0					
ANR	2012336	UnaryOperator	&		2012267	0					
ANR	2012337	Identifier	ival		2012267	1					
ANR	2012338	Argument	sizeof ( ival )		2012267	2					
ANR	2012339	SizeofExpression	sizeof ( ival )		2012267	0					
ANR	2012340	Sizeof	sizeof		2012267	0					
ANR	2012341	SizeofOperand	ival		2012267	1					
ANR	2012342	ReturnType	static void		2012267	1					
ANR	2012343	Identifier	from_zval_write_pid_t		2012267	2					
ANR	2012344	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		2012267	3					
ANR	2012345	Parameter	const zval * arr_value	441:34:10842:10862	2012267	0	True				
ANR	2012346	ParameterType	const zval *		2012267	0					
ANR	2012347	Identifier	arr_value		2012267	1					
ANR	2012348	Parameter	char * field	441:57:10865:10875	2012267	1	True				
ANR	2012349	ParameterType	char *		2012267	0					
ANR	2012350	Identifier	field		2012267	1					
ANR	2012351	Parameter	ser_context * ctx	441:70:10878:10893	2012267	2	True				
ANR	2012352	ParameterType	ser_context *		2012267	0					
ANR	2012353	Identifier	ctx		2012267	1					
ANR	2012354	CFGEntryNode	ENTRY		2012267		True				
ANR	2012355	CFGExitNode	EXIT		2012267		True				
ANR	2012356	Symbol	arr_value		2012267						
ANR	2012357	Symbol	field		2012267						
ANR	2012358	Symbol	ctx		2012267						
ANR	2012359	Symbol	lval		2012267						
ANR	2012360	Symbol	ctx -> err . has_error		2012267						
ANR	2012361	Symbol	ival		2012267						
ANR	2012362	Symbol	from_zval_integer_common		2012267						
ANR	2012363	Symbol	* ctx		2012267						
ANR	2012364	Symbol	ctx -> err		2012267						
ANR	2012365	Symbol	& ival		2012267						
ANR	2012366	Function	from_zval_write_uid_t	460:0:11250:11991							
ANR	2012367	FunctionDef	"from_zval_write_uid_t (const zval * arr_value , char * field , ser_context * ctx)"		2012366	0					
ANR	2012368	CompoundStatement		461:0:11338:11991	2012366	0					
ANR	2012369	IdentifierDeclStatement	zend_long lval ;	462:1:11341:11355	2012366	0	True				
ANR	2012370	IdentifierDecl	lval		2012366	0					
ANR	2012371	IdentifierDeclType	zend_long		2012366	0					
ANR	2012372	Identifier	lval		2012366	1					
ANR	2012373	IdentifierDeclStatement	uid_t ival ;	463:1:11358:11368	2012366	1	True				
ANR	2012374	IdentifierDecl	ival		2012366	0					
ANR	2012375	IdentifierDeclType	uid_t		2012366	0					
ANR	2012376	Identifier	ival		2012366	1					
ANR	2012377	ExpressionStatement	"lval = from_zval_integer_common ( arr_value , ctx )"	465:1:11372:11419	2012366	2	True				
ANR	2012378	AssignmentExpression	"lval = from_zval_integer_common ( arr_value , ctx )"		2012366	0		=			
ANR	2012379	Identifier	lval		2012366	0					
ANR	2012380	CallExpression	"from_zval_integer_common ( arr_value , ctx )"		2012366	1					
ANR	2012381	Callee	from_zval_integer_common		2012366	0					
ANR	2012382	Identifier	from_zval_integer_common		2012366	0					
ANR	2012383	ArgumentList	arr_value		2012366	1					
ANR	2012384	Argument	arr_value		2012366	0					
ANR	2012385	Identifier	arr_value		2012366	0					
ANR	2012386	Argument	ctx		2012366	1					
ANR	2012387	Identifier	ctx		2012366	0					
ANR	2012388	IfStatement	if ( ctx -> err . has_error )		2012366	3					
ANR	2012389	Condition	ctx -> err . has_error	466:5:11426:11443	2012366	0	True				
ANR	2012390	MemberAccess	ctx -> err . has_error		2012366	0					
ANR	2012391	PtrMemberAccess	ctx -> err		2012366	0					
ANR	2012392	Identifier	ctx		2012366	0					
ANR	2012393	Identifier	err		2012366	1					
ANR	2012394	Identifier	has_error		2012366	1					
ANR	2012395	CompoundStatement		6:25:107:107	2012366	1					
ANR	2012396	ReturnStatement	return ;	467:2:11450:11456	2012366	0	True				
ANR	2012397	IfStatement	if ( ( uid_t ) - 1 > ( uid_t ) 0 )		2012366	4					
ANR	2012398	Condition	( uid_t ) - 1 > ( uid_t ) 0	471:5:11527:11546	2012366	0	True				
ANR	2012399	RelationalExpression	( uid_t ) - 1 > ( uid_t ) 0		2012366	0		>			
ANR	2012400	CastExpression	( uid_t ) - 1		2012366	0					
ANR	2012401	CastTarget	uid_t		2012366	0					
ANR	2012402	UnaryOperationExpression	- 1		2012366	1					
ANR	2012403	UnaryOperator	-		2012366	0					
ANR	2012404	PrimaryExpression	1		2012366	1					
ANR	2012405	CastExpression	( uid_t ) 0		2012366	1					
ANR	2012406	CastTarget	uid_t		2012366	0					
ANR	2012407	PrimaryExpression	0		2012366	1					
ANR	2012408	CompoundStatement		11:27:210:210	2012366	1					
ANR	2012409	IfStatement	if ( sizeof ( zend_long ) > sizeof ( uid_t ) && ( lval < 0 || ( uid_t ) lval != lval ) )		2012366	0					
ANR	2012410	Condition	sizeof ( zend_long ) > sizeof ( uid_t ) && ( lval < 0 || ( uid_t ) lval != lval )	472:6:11557:11626	2012366	0	True				
ANR	2012411	AndExpression	sizeof ( zend_long ) > sizeof ( uid_t ) && ( lval < 0 || ( uid_t ) lval != lval )		2012366	0		&&			
ANR	2012412	RelationalExpression	sizeof ( zend_long ) > sizeof ( uid_t )		2012366	0		>			
ANR	2012413	SizeofExpression	sizeof ( zend_long )		2012366	0					
ANR	2012414	Sizeof	sizeof		2012366	0					
ANR	2012415	SizeofOperand	zend_long		2012366	1					
ANR	2012416	SizeofExpression	sizeof ( uid_t )		2012366	1					
ANR	2012417	Sizeof	sizeof		2012366	0					
ANR	2012418	SizeofOperand	uid_t		2012366	1					
ANR	2012419	OrExpression	lval < 0 || ( uid_t ) lval != lval		2012366	1		||			
ANR	2012420	RelationalExpression	lval < 0		2012366	0		<			
ANR	2012421	Identifier	lval		2012366	0					
ANR	2012422	PrimaryExpression	0		2012366	1					
ANR	2012423	EqualityExpression	( uid_t ) lval != lval		2012366	1		!=			
ANR	2012424	CastExpression	( uid_t ) lval		2012366	0					
ANR	2012425	CastTarget	uid_t		2012366	0					
ANR	2012426	Identifier	lval		2012366	1					
ANR	2012427	Identifier	lval		2012366	1					
ANR	2012428	CompoundStatement		12:78:290:290	2012366	1					
ANR	2012429	Statement	do_from_zval_err	473:3:11634:11649	2012366	0	True				
ANR	2012430	Statement	(	473:19:11650:11650	2012366	1	True				
ANR	2012431	Statement	ctx	473:20:11651:11653	2012366	2	True				
ANR	2012432	Statement	","	473:23:11654:11654	2012366	3	True				
ANR	2012433	Statement	"""%s"""	473:25:11656:11659	2012366	4	True				
ANR	2012434	Statement	","	473:29:11660:11660	2012366	5	True				
ANR	2012435	Statement	"""given PHP integer is out of bounds """	473:31:11662:11698	2012366	6	True				
ANR	2012436	Statement	"""for a uid_t value"""	474:5:11705:11723	2012366	7	True				
ANR	2012437	Statement	)	474:24:11724:11724	2012366	8	True				
ANR	2012438	ExpressionStatement		474:25:11725:11725	2012366	9	True				
ANR	2012439	ReturnStatement	return ;	475:3:11730:11736	2012366	10	True				
ANR	2012440	ElseStatement	else		2012366	0					
ANR	2012441	CompoundStatement		17:8:411:411	2012366	0					
ANR	2012442	IfStatement	if ( sizeof ( zend_long ) > sizeof ( uid_t ) && ( uid_t ) lval != lval )		2012366	0					
ANR	2012443	Condition	sizeof ( zend_long ) > sizeof ( uid_t ) && ( uid_t ) lval != lval	478:6:11758:11813	2012366	0	True				
ANR	2012444	AndExpression	sizeof ( zend_long ) > sizeof ( uid_t ) && ( uid_t ) lval != lval		2012366	0		&&			
ANR	2012445	RelationalExpression	sizeof ( zend_long ) > sizeof ( uid_t )		2012366	0		>			
ANR	2012446	SizeofExpression	sizeof ( zend_long )		2012366	0					
ANR	2012447	Sizeof	sizeof		2012366	0					
ANR	2012448	SizeofOperand	zend_long		2012366	1					
ANR	2012449	SizeofExpression	sizeof ( uid_t )		2012366	1					
ANR	2012450	Sizeof	sizeof		2012366	0					
ANR	2012451	SizeofOperand	uid_t		2012366	1					
ANR	2012452	EqualityExpression	( uid_t ) lval != lval		2012366	1		!=			
ANR	2012453	CastExpression	( uid_t ) lval		2012366	0					
ANR	2012454	CastTarget	uid_t		2012366	0					
ANR	2012455	Identifier	lval		2012366	1					
ANR	2012456	Identifier	lval		2012366	1					
ANR	2012457	CompoundStatement		18:64:477:477	2012366	1					
ANR	2012458	Statement	do_from_zval_err	479:3:11821:11836	2012366	0	True				
ANR	2012459	Statement	(	479:19:11837:11837	2012366	1	True				
ANR	2012460	Statement	ctx	479:20:11838:11840	2012366	2	True				
ANR	2012461	Statement	","	479:23:11841:11841	2012366	3	True				
ANR	2012462	Statement	"""%s"""	479:25:11843:11846	2012366	4	True				
ANR	2012463	Statement	","	479:29:11847:11847	2012366	5	True				
ANR	2012464	Statement	"""given PHP integer is out of bounds """	479:31:11849:11885	2012366	6	True				
ANR	2012465	Statement	"""for a uid_t value"""	480:5:11892:11910	2012366	7	True				
ANR	2012466	Statement	)	480:24:11911:11911	2012366	8	True				
ANR	2012467	ExpressionStatement		480:25:11912:11912	2012366	9	True				
ANR	2012468	ReturnStatement	return ;	481:3:11917:11923	2012366	10	True				
ANR	2012469	ExpressionStatement	ival = ( uid_t ) lval	485:1:11934:11952	2012366	5	True				
ANR	2012470	AssignmentExpression	ival = ( uid_t ) lval		2012366	0		=			
ANR	2012471	Identifier	ival		2012366	0					
ANR	2012472	CastExpression	( uid_t ) lval		2012366	1					
ANR	2012473	CastTarget	uid_t		2012366	0					
ANR	2012474	Identifier	lval		2012366	1					
ANR	2012475	ExpressionStatement	"memcpy ( field , & ival , sizeof ( ival ) )"	486:1:11955:11989	2012366	6	True				
ANR	2012476	CallExpression	"memcpy ( field , & ival , sizeof ( ival ) )"		2012366	0					
ANR	2012477	Callee	memcpy		2012366	0					
ANR	2012478	Identifier	memcpy		2012366	0					
ANR	2012479	ArgumentList	field		2012366	1					
ANR	2012480	Argument	field		2012366	0					
ANR	2012481	Identifier	field		2012366	0					
ANR	2012482	Argument	& ival		2012366	1					
ANR	2012483	UnaryOperationExpression	& ival		2012366	0					
ANR	2012484	UnaryOperator	&		2012366	0					
ANR	2012485	Identifier	ival		2012366	1					
ANR	2012486	Argument	sizeof ( ival )		2012366	2					
ANR	2012487	SizeofExpression	sizeof ( ival )		2012366	0					
ANR	2012488	Sizeof	sizeof		2012366	0					
ANR	2012489	SizeofOperand	ival		2012366	1					
ANR	2012490	ReturnType	static void		2012366	1					
ANR	2012491	Identifier	from_zval_write_uid_t		2012366	2					
ANR	2012492	ParameterList	"const zval * arr_value , char * field , ser_context * ctx"		2012366	3					
ANR	2012493	Parameter	const zval * arr_value	460:34:11284:11304	2012366	0	True				
ANR	2012494	ParameterType	const zval *		2012366	0					
ANR	2012495	Identifier	arr_value		2012366	1					
ANR	2012496	Parameter	char * field	460:57:11307:11317	2012366	1	True				
ANR	2012497	ParameterType	char *		2012366	0					
ANR	2012498	Identifier	field		2012366	1					
ANR	2012499	Parameter	ser_context * ctx	460:70:11320:11335	2012366	2	True				
ANR	2012500	ParameterType	ser_context *		2012366	0					
ANR	2012501	Identifier	ctx		2012366	1					
ANR	2012502	CFGEntryNode	ENTRY		2012366		True				
ANR	2012503	CFGExitNode	EXIT		2012366		True				
ANR	2012504	Symbol	arr_value		2012366						
ANR	2012505	Symbol	field		2012366						
ANR	2012506	Symbol	ctx		2012366						
ANR	2012507	Symbol	lval		2012366						
ANR	2012508	Symbol	ctx -> err . has_error		2012366						
ANR	2012509	Symbol	ival		2012366						
ANR	2012510	Symbol	from_zval_integer_common		2012366						
ANR	2012511	Symbol	* ctx		2012366						
ANR	2012512	Symbol	ctx -> err		2012366						
ANR	2012513	Symbol	& ival		2012366						
ANR	2012514	Function	to_zval_read_int	489:0:11994:12145							
ANR	2012515	FunctionDef	"to_zval_read_int (const char * data , zval * zv , res_context * ctx)"		2012514	0					
ANR	2012516	CompoundStatement		490:0:12062:12145	2012514	0					
ANR	2012517	IdentifierDeclStatement	int ival ;	491:1:12065:12073	2012514	0	True				
ANR	2012518	IdentifierDecl	ival		2012514	0					
ANR	2012519	IdentifierDeclType	int		2012514	0					
ANR	2012520	Identifier	ival		2012514	1					
ANR	2012521	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	492:1:12076:12109	2012514	1	True				
ANR	2012522	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		2012514	0					
ANR	2012523	Callee	memcpy		2012514	0					
ANR	2012524	Identifier	memcpy		2012514	0					
ANR	2012525	ArgumentList	& ival		2012514	1					
ANR	2012526	Argument	& ival		2012514	0					
ANR	2012527	UnaryOperationExpression	& ival		2012514	0					
ANR	2012528	UnaryOperator	&		2012514	0					
ANR	2012529	Identifier	ival		2012514	1					
ANR	2012530	Argument	data		2012514	1					
ANR	2012531	Identifier	data		2012514	0					
ANR	2012532	Argument	sizeof ( ival )		2012514	2					
ANR	2012533	SizeofExpression	sizeof ( ival )		2012514	0					
ANR	2012534	Sizeof	sizeof		2012514	0					
ANR	2012535	SizeofOperand	ival		2012514	1					
ANR	2012536	ExpressionStatement	"ZVAL_LONG ( zv , ( zend_long ) ival )"	494:1:12113:12143	2012514	2	True				
ANR	2012537	CallExpression	"ZVAL_LONG ( zv , ( zend_long ) ival )"		2012514	0					
ANR	2012538	Callee	ZVAL_LONG		2012514	0					
ANR	2012539	Identifier	ZVAL_LONG		2012514	0					
ANR	2012540	ArgumentList	zv		2012514	1					
ANR	2012541	Argument	zv		2012514	0					
ANR	2012542	Identifier	zv		2012514	0					
ANR	2012543	Argument	( zend_long ) ival		2012514	1					
ANR	2012544	CastExpression	( zend_long ) ival		2012514	0					
ANR	2012545	CastTarget	zend_long		2012514	0					
ANR	2012546	Identifier	ival		2012514	1					
ANR	2012547	ReturnType	void		2012514	1					
ANR	2012548	Identifier	to_zval_read_int		2012514	2					
ANR	2012549	ParameterList	"const char * data , zval * zv , res_context * ctx"		2012514	3					
ANR	2012550	Parameter	const char * data	489:22:12016:12031	2012514	0	True				
ANR	2012551	ParameterType	const char *		2012514	0					
ANR	2012552	Identifier	data		2012514	1					
ANR	2012553	Parameter	zval * zv	489:40:12034:12041	2012514	1	True				
ANR	2012554	ParameterType	zval *		2012514	0					
ANR	2012555	Identifier	zv		2012514	1					
ANR	2012556	Parameter	res_context * ctx	489:50:12044:12059	2012514	2	True				
ANR	2012557	ParameterType	res_context *		2012514	0					
ANR	2012558	Identifier	ctx		2012514	1					
ANR	2012559	CFGEntryNode	ENTRY		2012514		True				
ANR	2012560	CFGExitNode	EXIT		2012514		True				
ANR	2012561	Symbol	data		2012514						
ANR	2012562	Symbol	ctx		2012514						
ANR	2012563	Symbol	ival		2012514						
ANR	2012564	Symbol	zv		2012514						
ANR	2012565	Symbol	& ival		2012514						
ANR	2012566	Function	to_zval_read_unsigned	496:0:12147:12315							
ANR	2012567	FunctionDef	"to_zval_read_unsigned (const char * data , zval * zv , res_context * ctx)"		2012566	0					
ANR	2012568	CompoundStatement		497:0:12227:12315	2012566	0					
ANR	2012569	IdentifierDeclStatement	unsigned ival ;	498:1:12230:12243	2012566	0	True				
ANR	2012570	IdentifierDecl	ival		2012566	0					
ANR	2012571	IdentifierDeclType	unsigned		2012566	0					
ANR	2012572	Identifier	ival		2012566	1					
ANR	2012573	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	499:1:12246:12279	2012566	1	True				
ANR	2012574	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		2012566	0					
ANR	2012575	Callee	memcpy		2012566	0					
ANR	2012576	Identifier	memcpy		2012566	0					
ANR	2012577	ArgumentList	& ival		2012566	1					
ANR	2012578	Argument	& ival		2012566	0					
ANR	2012579	UnaryOperationExpression	& ival		2012566	0					
ANR	2012580	UnaryOperator	&		2012566	0					
ANR	2012581	Identifier	ival		2012566	1					
ANR	2012582	Argument	data		2012566	1					
ANR	2012583	Identifier	data		2012566	0					
ANR	2012584	Argument	sizeof ( ival )		2012566	2					
ANR	2012585	SizeofExpression	sizeof ( ival )		2012566	0					
ANR	2012586	Sizeof	sizeof		2012566	0					
ANR	2012587	SizeofOperand	ival		2012566	1					
ANR	2012588	ExpressionStatement	"ZVAL_LONG ( zv , ( zend_long ) ival )"	501:1:12283:12313	2012566	2	True				
ANR	2012589	CallExpression	"ZVAL_LONG ( zv , ( zend_long ) ival )"		2012566	0					
ANR	2012590	Callee	ZVAL_LONG		2012566	0					
ANR	2012591	Identifier	ZVAL_LONG		2012566	0					
ANR	2012592	ArgumentList	zv		2012566	1					
ANR	2012593	Argument	zv		2012566	0					
ANR	2012594	Identifier	zv		2012566	0					
ANR	2012595	Argument	( zend_long ) ival		2012566	1					
ANR	2012596	CastExpression	( zend_long ) ival		2012566	0					
ANR	2012597	CastTarget	zend_long		2012566	0					
ANR	2012598	Identifier	ival		2012566	1					
ANR	2012599	ReturnType	static void		2012566	1					
ANR	2012600	Identifier	to_zval_read_unsigned		2012566	2					
ANR	2012601	ParameterList	"const char * data , zval * zv , res_context * ctx"		2012566	3					
ANR	2012602	Parameter	const char * data	496:34:12181:12196	2012566	0	True				
ANR	2012603	ParameterType	const char *		2012566	0					
ANR	2012604	Identifier	data		2012566	1					
ANR	2012605	Parameter	zval * zv	496:52:12199:12206	2012566	1	True				
ANR	2012606	ParameterType	zval *		2012566	0					
ANR	2012607	Identifier	zv		2012566	1					
ANR	2012608	Parameter	res_context * ctx	496:62:12209:12224	2012566	2	True				
ANR	2012609	ParameterType	res_context *		2012566	0					
ANR	2012610	Identifier	ctx		2012566	1					
ANR	2012611	CFGEntryNode	ENTRY		2012566		True				
ANR	2012612	CFGExitNode	EXIT		2012566		True				
ANR	2012613	Symbol	data		2012566						
ANR	2012614	Symbol	ctx		2012566						
ANR	2012615	Symbol	ival		2012566						
ANR	2012616	Symbol	zv		2012566						
ANR	2012617	Symbol	& ival		2012566						
ANR	2012618	Function	to_zval_read_net_uint16	503:0:12317:12494							
ANR	2012619	FunctionDef	"to_zval_read_net_uint16 (const char * data , zval * zv , res_context * ctx)"		2012618	0					
ANR	2012620	CompoundStatement		504:0:12399:12494	2012618	0					
ANR	2012621	IdentifierDeclStatement	uint16_t ival ;	505:1:12402:12415	2012618	0	True				
ANR	2012622	IdentifierDecl	ival		2012618	0					
ANR	2012623	IdentifierDeclType	uint16_t		2012618	0					
ANR	2012624	Identifier	ival		2012618	1					
ANR	2012625	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	506:1:12418:12451	2012618	1	True				
ANR	2012626	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		2012618	0					
ANR	2012627	Callee	memcpy		2012618	0					
ANR	2012628	Identifier	memcpy		2012618	0					
ANR	2012629	ArgumentList	& ival		2012618	1					
ANR	2012630	Argument	& ival		2012618	0					
ANR	2012631	UnaryOperationExpression	& ival		2012618	0					
ANR	2012632	UnaryOperator	&		2012618	0					
ANR	2012633	Identifier	ival		2012618	1					
ANR	2012634	Argument	data		2012618	1					
ANR	2012635	Identifier	data		2012618	0					
ANR	2012636	Argument	sizeof ( ival )		2012618	2					
ANR	2012637	SizeofExpression	sizeof ( ival )		2012618	0					
ANR	2012638	Sizeof	sizeof		2012618	0					
ANR	2012639	SizeofOperand	ival		2012618	1					
ANR	2012640	ExpressionStatement	"ZVAL_LONG ( zv , ( zend_long ) ntohs ( ival ) )"	508:1:12455:12492	2012618	2	True				
ANR	2012641	CallExpression	"ZVAL_LONG ( zv , ( zend_long ) ntohs ( ival ) )"		2012618	0					
ANR	2012642	Callee	ZVAL_LONG		2012618	0					
ANR	2012643	Identifier	ZVAL_LONG		2012618	0					
ANR	2012644	ArgumentList	zv		2012618	1					
ANR	2012645	Argument	zv		2012618	0					
ANR	2012646	Identifier	zv		2012618	0					
ANR	2012647	Argument	( zend_long ) ntohs ( ival )		2012618	1					
ANR	2012648	CastExpression	( zend_long ) ntohs ( ival )		2012618	0					
ANR	2012649	CastTarget	zend_long		2012618	0					
ANR	2012650	CallExpression	ntohs ( ival )		2012618	1					
ANR	2012651	Callee	ntohs		2012618	0					
ANR	2012652	Identifier	ntohs		2012618	0					
ANR	2012653	ArgumentList	ival		2012618	1					
ANR	2012654	Argument	ival		2012618	0					
ANR	2012655	Identifier	ival		2012618	0					
ANR	2012656	ReturnType	static void		2012618	1					
ANR	2012657	Identifier	to_zval_read_net_uint16		2012618	2					
ANR	2012658	ParameterList	"const char * data , zval * zv , res_context * ctx"		2012618	3					
ANR	2012659	Parameter	const char * data	503:36:12353:12368	2012618	0	True				
ANR	2012660	ParameterType	const char *		2012618	0					
ANR	2012661	Identifier	data		2012618	1					
ANR	2012662	Parameter	zval * zv	503:54:12371:12378	2012618	1	True				
ANR	2012663	ParameterType	zval *		2012618	0					
ANR	2012664	Identifier	zv		2012618	1					
ANR	2012665	Parameter	res_context * ctx	503:64:12381:12396	2012618	2	True				
ANR	2012666	ParameterType	res_context *		2012618	0					
ANR	2012667	Identifier	ctx		2012618	1					
ANR	2012668	CFGEntryNode	ENTRY		2012618		True				
ANR	2012669	CFGExitNode	EXIT		2012618		True				
ANR	2012670	Symbol	ntohs		2012618						
ANR	2012671	Symbol	data		2012618						
ANR	2012672	Symbol	ctx		2012618						
ANR	2012673	Symbol	ival		2012618						
ANR	2012674	Symbol	zv		2012618						
ANR	2012675	Symbol	& ival		2012618						
ANR	2012676	Function	to_zval_read_uint32	510:0:12496:12662							
ANR	2012677	FunctionDef	"to_zval_read_uint32 (const char * data , zval * zv , res_context * ctx)"		2012676	0					
ANR	2012678	CompoundStatement		511:0:12574:12662	2012676	0					
ANR	2012679	IdentifierDeclStatement	uint32_t ival ;	512:1:12577:12590	2012676	0	True				
ANR	2012680	IdentifierDecl	ival		2012676	0					
ANR	2012681	IdentifierDeclType	uint32_t		2012676	0					
ANR	2012682	Identifier	ival		2012676	1					
ANR	2012683	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	513:1:12593:12626	2012676	1	True				
ANR	2012684	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		2012676	0					
ANR	2012685	Callee	memcpy		2012676	0					
ANR	2012686	Identifier	memcpy		2012676	0					
ANR	2012687	ArgumentList	& ival		2012676	1					
ANR	2012688	Argument	& ival		2012676	0					
ANR	2012689	UnaryOperationExpression	& ival		2012676	0					
ANR	2012690	UnaryOperator	&		2012676	0					
ANR	2012691	Identifier	ival		2012676	1					
ANR	2012692	Argument	data		2012676	1					
ANR	2012693	Identifier	data		2012676	0					
ANR	2012694	Argument	sizeof ( ival )		2012676	2					
ANR	2012695	SizeofExpression	sizeof ( ival )		2012676	0					
ANR	2012696	Sizeof	sizeof		2012676	0					
ANR	2012697	SizeofOperand	ival		2012676	1					
ANR	2012698	ExpressionStatement	"ZVAL_LONG ( zv , ( zend_long ) ival )"	515:1:12630:12660	2012676	2	True				
ANR	2012699	CallExpression	"ZVAL_LONG ( zv , ( zend_long ) ival )"		2012676	0					
ANR	2012700	Callee	ZVAL_LONG		2012676	0					
ANR	2012701	Identifier	ZVAL_LONG		2012676	0					
ANR	2012702	ArgumentList	zv		2012676	1					
ANR	2012703	Argument	zv		2012676	0					
ANR	2012704	Identifier	zv		2012676	0					
ANR	2012705	Argument	( zend_long ) ival		2012676	1					
ANR	2012706	CastExpression	( zend_long ) ival		2012676	0					
ANR	2012707	CastTarget	zend_long		2012676	0					
ANR	2012708	Identifier	ival		2012676	1					
ANR	2012709	ReturnType	static void		2012676	1					
ANR	2012710	Identifier	to_zval_read_uint32		2012676	2					
ANR	2012711	ParameterList	"const char * data , zval * zv , res_context * ctx"		2012676	3					
ANR	2012712	Parameter	const char * data	510:32:12528:12543	2012676	0	True				
ANR	2012713	ParameterType	const char *		2012676	0					
ANR	2012714	Identifier	data		2012676	1					
ANR	2012715	Parameter	zval * zv	510:50:12546:12553	2012676	1	True				
ANR	2012716	ParameterType	zval *		2012676	0					
ANR	2012717	Identifier	zv		2012676	1					
ANR	2012718	Parameter	res_context * ctx	510:60:12556:12571	2012676	2	True				
ANR	2012719	ParameterType	res_context *		2012676	0					
ANR	2012720	Identifier	ctx		2012676	1					
ANR	2012721	CFGEntryNode	ENTRY		2012676		True				
ANR	2012722	CFGExitNode	EXIT		2012676		True				
ANR	2012723	Symbol	data		2012676						
ANR	2012724	Symbol	ctx		2012676						
ANR	2012725	Symbol	ival		2012676						
ANR	2012726	Symbol	zv		2012676						
ANR	2012727	Symbol	& ival		2012676						
ANR	2012728	Function	to_zval_read_sa_family	517:0:12664:12836							
ANR	2012729	FunctionDef	"to_zval_read_sa_family (const char * data , zval * zv , res_context * ctx)"		2012728	0					
ANR	2012730	CompoundStatement		518:0:12745:12836	2012728	0					
ANR	2012731	IdentifierDeclStatement	sa_family_t ival ;	519:1:12748:12764	2012728	0	True				
ANR	2012732	IdentifierDecl	ival		2012728	0					
ANR	2012733	IdentifierDeclType	sa_family_t		2012728	0					
ANR	2012734	Identifier	ival		2012728	1					
ANR	2012735	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	520:1:12767:12800	2012728	1	True				
ANR	2012736	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		2012728	0					
ANR	2012737	Callee	memcpy		2012728	0					
ANR	2012738	Identifier	memcpy		2012728	0					
ANR	2012739	ArgumentList	& ival		2012728	1					
ANR	2012740	Argument	& ival		2012728	0					
ANR	2012741	UnaryOperationExpression	& ival		2012728	0					
ANR	2012742	UnaryOperator	&		2012728	0					
ANR	2012743	Identifier	ival		2012728	1					
ANR	2012744	Argument	data		2012728	1					
ANR	2012745	Identifier	data		2012728	0					
ANR	2012746	Argument	sizeof ( ival )		2012728	2					
ANR	2012747	SizeofExpression	sizeof ( ival )		2012728	0					
ANR	2012748	Sizeof	sizeof		2012728	0					
ANR	2012749	SizeofOperand	ival		2012728	1					
ANR	2012750	ExpressionStatement	"ZVAL_LONG ( zv , ( zend_long ) ival )"	522:1:12804:12834	2012728	2	True				
ANR	2012751	CallExpression	"ZVAL_LONG ( zv , ( zend_long ) ival )"		2012728	0					
ANR	2012752	Callee	ZVAL_LONG		2012728	0					
ANR	2012753	Identifier	ZVAL_LONG		2012728	0					
ANR	2012754	ArgumentList	zv		2012728	1					
ANR	2012755	Argument	zv		2012728	0					
ANR	2012756	Identifier	zv		2012728	0					
ANR	2012757	Argument	( zend_long ) ival		2012728	1					
ANR	2012758	CastExpression	( zend_long ) ival		2012728	0					
ANR	2012759	CastTarget	zend_long		2012728	0					
ANR	2012760	Identifier	ival		2012728	1					
ANR	2012761	ReturnType	static void		2012728	1					
ANR	2012762	Identifier	to_zval_read_sa_family		2012728	2					
ANR	2012763	ParameterList	"const char * data , zval * zv , res_context * ctx"		2012728	3					
ANR	2012764	Parameter	const char * data	517:35:12699:12714	2012728	0	True				
ANR	2012765	ParameterType	const char *		2012728	0					
ANR	2012766	Identifier	data		2012728	1					
ANR	2012767	Parameter	zval * zv	517:53:12717:12724	2012728	1	True				
ANR	2012768	ParameterType	zval *		2012728	0					
ANR	2012769	Identifier	zv		2012728	1					
ANR	2012770	Parameter	res_context * ctx	517:63:12727:12742	2012728	2	True				
ANR	2012771	ParameterType	res_context *		2012728	0					
ANR	2012772	Identifier	ctx		2012728	1					
ANR	2012773	CFGEntryNode	ENTRY		2012728		True				
ANR	2012774	CFGExitNode	EXIT		2012728		True				
ANR	2012775	Symbol	data		2012728						
ANR	2012776	Symbol	ctx		2012728						
ANR	2012777	Symbol	ival		2012728						
ANR	2012778	Symbol	zv		2012728						
ANR	2012779	Symbol	& ival		2012728						
ANR	2012780	Function	to_zval_read_pid_t	524:0:12838:13000							
ANR	2012781	FunctionDef	"to_zval_read_pid_t (const char * data , zval * zv , res_context * ctx)"		2012780	0					
ANR	2012782	CompoundStatement		525:0:12915:13000	2012780	0					
ANR	2012783	IdentifierDeclStatement	pid_t ival ;	526:1:12918:12928	2012780	0	True				
ANR	2012784	IdentifierDecl	ival		2012780	0					
ANR	2012785	IdentifierDeclType	pid_t		2012780	0					
ANR	2012786	Identifier	ival		2012780	1					
ANR	2012787	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	527:1:12931:12964	2012780	1	True				
ANR	2012788	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		2012780	0					
ANR	2012789	Callee	memcpy		2012780	0					
ANR	2012790	Identifier	memcpy		2012780	0					
ANR	2012791	ArgumentList	& ival		2012780	1					
ANR	2012792	Argument	& ival		2012780	0					
ANR	2012793	UnaryOperationExpression	& ival		2012780	0					
ANR	2012794	UnaryOperator	&		2012780	0					
ANR	2012795	Identifier	ival		2012780	1					
ANR	2012796	Argument	data		2012780	1					
ANR	2012797	Identifier	data		2012780	0					
ANR	2012798	Argument	sizeof ( ival )		2012780	2					
ANR	2012799	SizeofExpression	sizeof ( ival )		2012780	0					
ANR	2012800	Sizeof	sizeof		2012780	0					
ANR	2012801	SizeofOperand	ival		2012780	1					
ANR	2012802	ExpressionStatement	"ZVAL_LONG ( zv , ( zend_long ) ival )"	529:1:12968:12998	2012780	2	True				
ANR	2012803	CallExpression	"ZVAL_LONG ( zv , ( zend_long ) ival )"		2012780	0					
ANR	2012804	Callee	ZVAL_LONG		2012780	0					
ANR	2012805	Identifier	ZVAL_LONG		2012780	0					
ANR	2012806	ArgumentList	zv		2012780	1					
ANR	2012807	Argument	zv		2012780	0					
ANR	2012808	Identifier	zv		2012780	0					
ANR	2012809	Argument	( zend_long ) ival		2012780	1					
ANR	2012810	CastExpression	( zend_long ) ival		2012780	0					
ANR	2012811	CastTarget	zend_long		2012780	0					
ANR	2012812	Identifier	ival		2012780	1					
ANR	2012813	ReturnType	static void		2012780	1					
ANR	2012814	Identifier	to_zval_read_pid_t		2012780	2					
ANR	2012815	ParameterList	"const char * data , zval * zv , res_context * ctx"		2012780	3					
ANR	2012816	Parameter	const char * data	524:31:12869:12884	2012780	0	True				
ANR	2012817	ParameterType	const char *		2012780	0					
ANR	2012818	Identifier	data		2012780	1					
ANR	2012819	Parameter	zval * zv	524:49:12887:12894	2012780	1	True				
ANR	2012820	ParameterType	zval *		2012780	0					
ANR	2012821	Identifier	zv		2012780	1					
ANR	2012822	Parameter	res_context * ctx	524:59:12897:12912	2012780	2	True				
ANR	2012823	ParameterType	res_context *		2012780	0					
ANR	2012824	Identifier	ctx		2012780	1					
ANR	2012825	CFGEntryNode	ENTRY		2012780		True				
ANR	2012826	CFGExitNode	EXIT		2012780		True				
ANR	2012827	Symbol	data		2012780						
ANR	2012828	Symbol	ctx		2012780						
ANR	2012829	Symbol	ival		2012780						
ANR	2012830	Symbol	zv		2012780						
ANR	2012831	Symbol	& ival		2012780						
ANR	2012832	Function	to_zval_read_uid_t	531:0:13002:13164							
ANR	2012833	FunctionDef	"to_zval_read_uid_t (const char * data , zval * zv , res_context * ctx)"		2012832	0					
ANR	2012834	CompoundStatement		532:0:13079:13164	2012832	0					
ANR	2012835	IdentifierDeclStatement	uid_t ival ;	533:1:13082:13092	2012832	0	True				
ANR	2012836	IdentifierDecl	ival		2012832	0					
ANR	2012837	IdentifierDeclType	uid_t		2012832	0					
ANR	2012838	Identifier	ival		2012832	1					
ANR	2012839	ExpressionStatement	"memcpy ( & ival , data , sizeof ( ival ) )"	534:1:13095:13128	2012832	1	True				
ANR	2012840	CallExpression	"memcpy ( & ival , data , sizeof ( ival ) )"		2012832	0					
ANR	2012841	Callee	memcpy		2012832	0					
ANR	2012842	Identifier	memcpy		2012832	0					
ANR	2012843	ArgumentList	& ival		2012832	1					
ANR	2012844	Argument	& ival		2012832	0					
ANR	2012845	UnaryOperationExpression	& ival		2012832	0					
ANR	2012846	UnaryOperator	&		2012832	0					
ANR	2012847	Identifier	ival		2012832	1					
ANR	2012848	Argument	data		2012832	1					
ANR	2012849	Identifier	data		2012832	0					
ANR	2012850	Argument	sizeof ( ival )		2012832	2					
ANR	2012851	SizeofExpression	sizeof ( ival )		2012832	0					
ANR	2012852	Sizeof	sizeof		2012832	0					
ANR	2012853	SizeofOperand	ival		2012832	1					
ANR	2012854	ExpressionStatement	"ZVAL_LONG ( zv , ( zend_long ) ival )"	536:1:13132:13162	2012832	2	True				
ANR	2012855	CallExpression	"ZVAL_LONG ( zv , ( zend_long ) ival )"		2012832	0					
ANR	2012856	Callee	ZVAL_LONG		2012832	0					
ANR	2012857	Identifier	ZVAL_LONG		2012832	0					
ANR	2012858	ArgumentList	zv		2012832	1					
ANR	2012859	Argument	zv		2012832	0					
ANR	2012860	Identifier	zv		2012832	0					
ANR	2012861	Argument	( zend_long ) ival		2012832	1					
ANR	2012862	CastExpression	( zend_long ) ival		2012832	0					
ANR	2012863	CastTarget	zend_long		2012832	0					
ANR	2012864	Identifier	ival		2012832	1					
ANR	2012865	ReturnType	static void		2012832	1					
ANR	2012866	Identifier	to_zval_read_uid_t		2012832	2					
ANR	2012867	ParameterList	"const char * data , zval * zv , res_context * ctx"		2012832	3					
ANR	2012868	Parameter	const char * data	531:31:13033:13048	2012832	0	True				
ANR	2012869	ParameterType	const char *		2012832	0					
ANR	2012870	Identifier	data		2012832	1					
ANR	2012871	Parameter	zval * zv	531:49:13051:13058	2012832	1	True				
ANR	2012872	ParameterType	zval *		2012832	0					
ANR	2012873	Identifier	zv		2012832	1					
ANR	2012874	Parameter	res_context * ctx	531:59:13061:13076	2012832	2	True				
ANR	2012875	ParameterType	res_context *		2012832	0					
ANR	2012876	Identifier	ctx		2012832	1					
ANR	2012877	CFGEntryNode	ENTRY		2012832		True				
ANR	2012878	CFGExitNode	EXIT		2012832		True				
ANR	2012879	Symbol	data		2012832						
ANR	2012880	Symbol	ctx		2012832						
ANR	2012881	Symbol	ival		2012832						
ANR	2012882	Symbol	zv		2012832						
ANR	2012883	Symbol	& ival		2012832						
ANR	2012884	Function	from_zval_write_sin_addr	540:0:13198:13776							
ANR	2012885	FunctionDef	"from_zval_write_sin_addr (const zval * zaddr_str , char * inaddr , ser_context * ctx)"		2012884	0					
ANR	2012886	CompoundStatement		541:0:13290:13776	2012884	0					
ANR	2012887	IdentifierDeclStatement	int res ;	542:1:13293:13304	2012884	0	True				
ANR	2012888	IdentifierDecl	res		2012884	0					
ANR	2012889	IdentifierDeclType	int		2012884	0					
ANR	2012890	Identifier	res		2012884	1					
ANR	2012891	IdentifierDeclStatement	struct sockaddr_in saddr = { 0 } ;	543:1:13307:13337	2012884	1	True				
ANR	2012892	IdentifierDecl	saddr = { 0 }		2012884	0					
ANR	2012893	IdentifierDeclType	struct sockaddr_in		2012884	0					
ANR	2012894	Identifier	saddr		2012884	1					
ANR	2012895	AssignmentExpression	saddr = { 0 }		2012884	2		=			
ANR	2012896	Identifier	saddr		2012884	0					
ANR	2012897	InitializerList	0		2012884	1					
ANR	2012898	PrimaryExpression	0		2012884	0					
ANR	2012899	IdentifierDeclStatement	zend_string * addr_str ;	544:1:13340:13363	2012884	2	True				
ANR	2012900	IdentifierDecl	* addr_str		2012884	0					
ANR	2012901	IdentifierDeclType	zend_string *		2012884	0					
ANR	2012902	Identifier	addr_str		2012884	1					
ANR	2012903	ExpressionStatement	addr_str = zval_get_string ( ( zval * ) zaddr_str )	546:1:13367:13413	2012884	3	True				
ANR	2012904	AssignmentExpression	addr_str = zval_get_string ( ( zval * ) zaddr_str )		2012884	0		=			
ANR	2012905	Identifier	addr_str		2012884	0					
ANR	2012906	CallExpression	zval_get_string ( ( zval * ) zaddr_str )		2012884	1					
ANR	2012907	Callee	zval_get_string		2012884	0					
ANR	2012908	Identifier	zval_get_string		2012884	0					
ANR	2012909	ArgumentList	( zval * ) zaddr_str		2012884	1					
ANR	2012910	Argument	( zval * ) zaddr_str		2012884	0					
ANR	2012911	CastExpression	( zval * ) zaddr_str		2012884	0					
ANR	2012912	CastTarget	zval *		2012884	0					
ANR	2012913	Identifier	zaddr_str		2012884	1					
ANR	2012914	ExpressionStatement	"res = php_set_inet_addr ( & saddr , ZSTR_VAL ( addr_str ) , ctx -> sock )"	547:1:13416:13478	2012884	4	True				
ANR	2012915	AssignmentExpression	"res = php_set_inet_addr ( & saddr , ZSTR_VAL ( addr_str ) , ctx -> sock )"		2012884	0		=			
ANR	2012916	Identifier	res		2012884	0					
ANR	2012917	CallExpression	"php_set_inet_addr ( & saddr , ZSTR_VAL ( addr_str ) , ctx -> sock )"		2012884	1					
ANR	2012918	Callee	php_set_inet_addr		2012884	0					
ANR	2012919	Identifier	php_set_inet_addr		2012884	0					
ANR	2012920	ArgumentList	& saddr		2012884	1					
ANR	2012921	Argument	& saddr		2012884	0					
ANR	2012922	UnaryOperationExpression	& saddr		2012884	0					
ANR	2012923	UnaryOperator	&		2012884	0					
ANR	2012924	Identifier	saddr		2012884	1					
ANR	2012925	Argument	ZSTR_VAL ( addr_str )		2012884	1					
ANR	2012926	CallExpression	ZSTR_VAL ( addr_str )		2012884	0					
ANR	2012927	Callee	ZSTR_VAL		2012884	0					
ANR	2012928	Identifier	ZSTR_VAL		2012884	0					
ANR	2012929	ArgumentList	addr_str		2012884	1					
ANR	2012930	Argument	addr_str		2012884	0					
ANR	2012931	Identifier	addr_str		2012884	0					
ANR	2012932	Argument	ctx -> sock		2012884	2					
ANR	2012933	PtrMemberAccess	ctx -> sock		2012884	0					
ANR	2012934	Identifier	ctx		2012884	0					
ANR	2012935	Identifier	sock		2012884	1					
ANR	2012936	IfStatement	if ( res )		2012884	5					
ANR	2012937	Condition	res	548:5:13485:13487	2012884	0	True				
ANR	2012938	Identifier	res		2012884	0					
ANR	2012939	CompoundStatement		8:10:199:199	2012884	1					
ANR	2012940	ExpressionStatement	"memcpy ( inaddr , & saddr . sin_addr , sizeof saddr . sin_addr )"	549:2:13494:13548	2012884	0	True				
ANR	2012941	CallExpression	"memcpy ( inaddr , & saddr . sin_addr , sizeof saddr . sin_addr )"		2012884	0					
ANR	2012942	Callee	memcpy		2012884	0					
ANR	2012943	Identifier	memcpy		2012884	0					
ANR	2012944	ArgumentList	inaddr		2012884	1					
ANR	2012945	Argument	inaddr		2012884	0					
ANR	2012946	Identifier	inaddr		2012884	0					
ANR	2012947	Argument	& saddr . sin_addr		2012884	1					
ANR	2012948	UnaryOperationExpression	& saddr . sin_addr		2012884	0					
ANR	2012949	UnaryOperator	&		2012884	0					
ANR	2012950	MemberAccess	saddr . sin_addr		2012884	1					
ANR	2012951	Identifier	saddr		2012884	0					
ANR	2012952	Identifier	sin_addr		2012884	1					
ANR	2012953	Argument	sizeof saddr . sin_addr		2012884	2					
ANR	2012954	SizeofExpression	sizeof saddr . sin_addr		2012884	0					
ANR	2012955	Sizeof	sizeof		2012884	0					
ANR	2012956	MemberAccess	saddr . sin_addr		2012884	1					
ANR	2012957	Identifier	saddr		2012884	0					
ANR	2012958	Identifier	sin_addr		2012884	1					
ANR	2012959	ElseStatement	else		2012884	0					
ANR	2012960	CompoundStatement		10:8:267:267	2012884	0					
ANR	2012961	Statement	do_from_zval_err	552:2:13630:13645	2012884	0	True				
ANR	2012962	Statement	(	552:18:13646:13646	2012884	1	True				
ANR	2012963	Statement	ctx	552:19:13647:13649	2012884	2	True				
ANR	2012964	Statement	","	552:22:13650:13650	2012884	3	True				
ANR	2012965	Statement	"""could not resolve address '%s' to get an AF_INET """	552:24:13652:13702	2012884	4	True				
ANR	2012966	Statement	"""address"""	553:4:13708:13716	2012884	5	True				
ANR	2012967	Statement	","	553:13:13717:13717	2012884	6	True				
ANR	2012968	Statement	ZSTR_VAL	553:15:13719:13726	2012884	7	True				
ANR	2012969	Statement	(	553:23:13727:13727	2012884	8	True				
ANR	2012970	Statement	addr_str	553:24:13728:13735	2012884	9	True				
ANR	2012971	Statement	)	553:32:13736:13736	2012884	10	True				
ANR	2012972	Statement	)	553:33:13737:13737	2012884	11	True				
ANR	2012973	ExpressionStatement		553:34:13738:13738	2012884	12	True				
ANR	2012974	ExpressionStatement	zend_string_release ( addr_str )	556:1:13745:13774	2012884	6	True				
ANR	2012975	CallExpression	zend_string_release ( addr_str )		2012884	0					
ANR	2012976	Callee	zend_string_release		2012884	0					
ANR	2012977	Identifier	zend_string_release		2012884	0					
ANR	2012978	ArgumentList	addr_str		2012884	1					
ANR	2012979	Argument	addr_str		2012884	0					
ANR	2012980	Identifier	addr_str		2012884	0					
ANR	2012981	ReturnType	static void		2012884	1					
ANR	2012982	Identifier	from_zval_write_sin_addr		2012884	2					
ANR	2012983	ParameterList	"const zval * zaddr_str , char * inaddr , ser_context * ctx"		2012884	3					
ANR	2012984	Parameter	const zval * zaddr_str	540:37:13235:13255	2012884	0	True				
ANR	2012985	ParameterType	const zval *		2012884	0					
ANR	2012986	Identifier	zaddr_str		2012884	1					
ANR	2012987	Parameter	char * inaddr	540:60:13258:13269	2012884	1	True				
ANR	2012988	ParameterType	char *		2012884	0					
ANR	2012989	Identifier	inaddr		2012884	1					
ANR	2012990	Parameter	ser_context * ctx	540:74:13272:13287	2012884	2	True				
ANR	2012991	ParameterType	ser_context *		2012884	0					
ANR	2012992	Identifier	ctx		2012884	1					
ANR	2012993	CFGEntryNode	ENTRY		2012884		True				
ANR	2012994	CFGExitNode	EXIT		2012884		True				
ANR	2012995	Symbol	& saddr		2012884						
ANR	2012996	Symbol	res		2012884						
ANR	2012997	Symbol	& saddr . sin_addr		2012884						
ANR	2012998	Symbol	ctx		2012884						
ANR	2012999	Symbol	saddr		2012884						
ANR	2013000	Symbol	saddr . sin_addr		2012884						
ANR	2013001	Symbol	zval_get_string		2012884						
ANR	2013002	Symbol	zaddr_str		2012884						
ANR	2013003	Symbol	php_set_inet_addr		2012884						
ANR	2013004	Symbol	* ctx		2012884						
ANR	2013005	Symbol	ZSTR_VAL		2012884						
ANR	2013006	Symbol	ctx -> sock		2012884						
ANR	2013007	Symbol	addr_str		2012884						
ANR	2013008	Symbol	inaddr		2012884						
ANR	2013009	Function	to_zval_read_sin_addr	558:0:13778:14280							
ANR	2013010	FunctionDef	"to_zval_read_sin_addr (const char * data , zval * zv , res_context * ctx)"		2013009	0					
ANR	2013011	CompoundStatement		559:0:13858:14280	2013009	0					
ANR	2013012	IdentifierDeclStatement	const struct in_addr * addr = ( const struct in_addr * ) data ;	560:1:13861:13918	2013009	0	True				
ANR	2013013	IdentifierDecl	* addr = ( const struct in_addr * ) data		2013009	0					
ANR	2013014	IdentifierDeclType	const struct in_addr *		2013009	0					
ANR	2013015	Identifier	addr		2013009	1					
ANR	2013016	AssignmentExpression	* addr = ( const struct in_addr * ) data		2013009	2		=			
ANR	2013017	Identifier	addr		2013009	0					
ANR	2013018	CastExpression	( const struct in_addr * ) data		2013009	1					
ANR	2013019	CastTarget	const struct in_addr *		2013009	0					
ANR	2013020	Identifier	data		2013009	1					
ANR	2013021	IdentifierDeclStatement	socklen_t size = INET_ADDRSTRLEN ;	561:1:13921:13953	2013009	1	True				
ANR	2013022	IdentifierDecl	size = INET_ADDRSTRLEN		2013009	0					
ANR	2013023	IdentifierDeclType	socklen_t		2013009	0					
ANR	2013024	Identifier	size		2013009	1					
ANR	2013025	AssignmentExpression	size = INET_ADDRSTRLEN		2013009	2		=			
ANR	2013026	Identifier	INET_ADDRSTRLEN		2013009	0					
ANR	2013027	Identifier	INET_ADDRSTRLEN		2013009	1					
ANR	2013028	IdentifierDeclStatement	"zend_string * str = zend_string_alloc ( size - 1 , 0 ) ;"	562:1:13956:14005	2013009	2	True				
ANR	2013029	IdentifierDecl	"* str = zend_string_alloc ( size - 1 , 0 )"		2013009	0					
ANR	2013030	IdentifierDeclType	zend_string *		2013009	0					
ANR	2013031	Identifier	str		2013009	1					
ANR	2013032	AssignmentExpression	"* str = zend_string_alloc ( size - 1 , 0 )"		2013009	2		=			
ANR	2013033	Identifier	str		2013009	0					
ANR	2013034	CallExpression	"zend_string_alloc ( size - 1 , 0 )"		2013009	1					
ANR	2013035	Callee	zend_string_alloc		2013009	0					
ANR	2013036	Identifier	zend_string_alloc		2013009	0					
ANR	2013037	ArgumentList	size - 1		2013009	1					
ANR	2013038	Argument	size - 1		2013009	0					
ANR	2013039	AdditiveExpression	size - 1		2013009	0		-			
ANR	2013040	Identifier	size		2013009	0					
ANR	2013041	PrimaryExpression	1		2013009	1					
ANR	2013042	Argument	0		2013009	1					
ANR	2013043	PrimaryExpression	0		2013009	0					
ANR	2013044	ExpressionStatement	"memset ( ZSTR_VAL ( str ) , '\\0' , size )"	563:1:14008:14041	2013009	3	True				
ANR	2013045	CallExpression	"memset ( ZSTR_VAL ( str ) , '\\0' , size )"		2013009	0					
ANR	2013046	Callee	memset		2013009	0					
ANR	2013047	Identifier	memset		2013009	0					
ANR	2013048	ArgumentList	ZSTR_VAL ( str )		2013009	1					
ANR	2013049	Argument	ZSTR_VAL ( str )		2013009	0					
ANR	2013050	CallExpression	ZSTR_VAL ( str )		2013009	0					
ANR	2013051	Callee	ZSTR_VAL		2013009	0					
ANR	2013052	Identifier	ZSTR_VAL		2013009	0					
ANR	2013053	ArgumentList	str		2013009	1					
ANR	2013054	Argument	str		2013009	0					
ANR	2013055	Identifier	str		2013009	0					
ANR	2013056	Argument	'\\0'		2013009	1					
ANR	2013057	PrimaryExpression	'\\0'		2013009	0					
ANR	2013058	Argument	size		2013009	2					
ANR	2013059	Identifier	size		2013009	0					
ANR	2013060	ExpressionStatement	"ZVAL_NEW_STR ( zv , str )"	565:1:14045:14066	2013009	4	True				
ANR	2013061	CallExpression	"ZVAL_NEW_STR ( zv , str )"		2013009	0					
ANR	2013062	Callee	ZVAL_NEW_STR		2013009	0					
ANR	2013063	Identifier	ZVAL_NEW_STR		2013009	0					
ANR	2013064	ArgumentList	zv		2013009	1					
ANR	2013065	Argument	zv		2013009	0					
ANR	2013066	Identifier	zv		2013009	0					
ANR	2013067	Argument	str		2013009	1					
ANR	2013068	Identifier	str		2013009	0					
ANR	2013069	IfStatement	"if ( inet_ntop ( AF_INET , addr , Z_STRVAL_P ( zv ) , size ) == NULL )"		2013009	5					
ANR	2013070	Condition	"inet_ntop ( AF_INET , addr , Z_STRVAL_P ( zv ) , size ) == NULL"	567:5:14074:14127	2013009	0	True				
ANR	2013071	EqualityExpression	"inet_ntop ( AF_INET , addr , Z_STRVAL_P ( zv ) , size ) == NULL"		2013009	0		==			
ANR	2013072	CallExpression	"inet_ntop ( AF_INET , addr , Z_STRVAL_P ( zv ) , size )"		2013009	0					
ANR	2013073	Callee	inet_ntop		2013009	0					
ANR	2013074	Identifier	inet_ntop		2013009	0					
ANR	2013075	ArgumentList	AF_INET		2013009	1					
ANR	2013076	Argument	AF_INET		2013009	0					
ANR	2013077	Identifier	AF_INET		2013009	0					
ANR	2013078	Argument	addr		2013009	1					
ANR	2013079	Identifier	addr		2013009	0					
ANR	2013080	Argument	Z_STRVAL_P ( zv )		2013009	2					
ANR	2013081	CallExpression	Z_STRVAL_P ( zv )		2013009	0					
ANR	2013082	Callee	Z_STRVAL_P		2013009	0					
ANR	2013083	Identifier	Z_STRVAL_P		2013009	0					
ANR	2013084	ArgumentList	zv		2013009	1					
ANR	2013085	Argument	zv		2013009	0					
ANR	2013086	Identifier	zv		2013009	0					
ANR	2013087	Argument	size		2013009	3					
ANR	2013088	Identifier	size		2013009	0					
ANR	2013089	Identifier	NULL		2013009	1					
ANR	2013090	CompoundStatement		9:61:271:271	2013009	1					
ANR	2013091	Statement	do_to_zval_err	568:2:14134:14147	2013009	0	True				
ANR	2013092	Statement	(	568:16:14148:14148	2013009	1	True				
ANR	2013093	Statement	ctx	568:17:14149:14151	2013009	2	True				
ANR	2013094	Statement	","	568:20:14152:14152	2013009	3	True				
ANR	2013095	Statement	"""could not convert IPv4 address to string """	568:22:14154:14196	2013009	4	True				
ANR	2013096	Statement	"""(errno %d)"""	569:4:14202:14213	2013009	5	True				
ANR	2013097	Statement	","	569:16:14214:14214	2013009	6	True				
ANR	2013098	Statement	errno	569:18:14216:14220	2013009	7	True				
ANR	2013099	Statement	)	569:23:14221:14221	2013009	8	True				
ANR	2013100	ExpressionStatement		569:24:14222:14222	2013009	9	True				
ANR	2013101	ReturnStatement	return ;	570:2:14226:14232	2013009	10	True				
ANR	2013102	ExpressionStatement	Z_STRLEN_P ( zv ) = strlen ( Z_STRVAL_P ( zv ) )	573:1:14239:14278	2013009	6	True				
ANR	2013103	AssignmentExpression	Z_STRLEN_P ( zv ) = strlen ( Z_STRVAL_P ( zv ) )		2013009	0		=			
ANR	2013104	CallExpression	Z_STRLEN_P ( zv )		2013009	0					
ANR	2013105	Callee	Z_STRLEN_P		2013009	0					
ANR	2013106	Identifier	Z_STRLEN_P		2013009	0					
ANR	2013107	ArgumentList	zv		2013009	1					
ANR	2013108	Argument	zv		2013009	0					
ANR	2013109	Identifier	zv		2013009	0					
ANR	2013110	CallExpression	strlen ( Z_STRVAL_P ( zv ) )		2013009	1					
ANR	2013111	Callee	strlen		2013009	0					
ANR	2013112	Identifier	strlen		2013009	0					
ANR	2013113	ArgumentList	Z_STRVAL_P ( zv )		2013009	1					
ANR	2013114	Argument	Z_STRVAL_P ( zv )		2013009	0					
ANR	2013115	CallExpression	Z_STRVAL_P ( zv )		2013009	0					
ANR	2013116	Callee	Z_STRVAL_P		2013009	0					
ANR	2013117	Identifier	Z_STRVAL_P		2013009	0					
ANR	2013118	ArgumentList	zv		2013009	1					
ANR	2013119	Argument	zv		2013009	0					
ANR	2013120	Identifier	zv		2013009	0					
ANR	2013121	ReturnType	static void		2013009	1					
ANR	2013122	Identifier	to_zval_read_sin_addr		2013009	2					
ANR	2013123	ParameterList	"const char * data , zval * zv , res_context * ctx"		2013009	3					
ANR	2013124	Parameter	const char * data	558:34:13812:13827	2013009	0	True				
ANR	2013125	ParameterType	const char *		2013009	0					
ANR	2013126	Identifier	data		2013009	1					
ANR	2013127	Parameter	zval * zv	558:52:13830:13837	2013009	1	True				
ANR	2013128	ParameterType	zval *		2013009	0					
ANR	2013129	Identifier	zv		2013009	1					
ANR	2013130	Parameter	res_context * ctx	558:62:13840:13855	2013009	2	True				
ANR	2013131	ParameterType	res_context *		2013009	0					
ANR	2013132	Identifier	ctx		2013009	1					
ANR	2013133	CFGEntryNode	ENTRY		2013009		True				
ANR	2013134	CFGExitNode	EXIT		2013009		True				
ANR	2013135	Symbol	zend_string_alloc		2013009						
ANR	2013136	Symbol	NULL		2013009						
ANR	2013137	Symbol	data		2013009						
ANR	2013138	Symbol	ctx		2013009						
ANR	2013139	Symbol	INET_ADDRSTRLEN		2013009						
ANR	2013140	Symbol	AF_INET		2013009						
ANR	2013141	Symbol	Z_STRVAL_P		2013009						
ANR	2013142	Symbol	ZSTR_VAL		2013009						
ANR	2013143	Symbol	str		2013009						
ANR	2013144	Symbol	strlen		2013009						
ANR	2013145	Symbol	size		2013009						
ANR	2013146	Symbol	inet_ntop		2013009						
ANR	2013147	Symbol	Z_STRLEN_P		2013009						
ANR	2013148	Symbol	zv		2013009						
ANR	2013149	Symbol	addr		2013009						
ANR	2013150	DeclStmt									
ANR	2013151	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_sockaddr_in
ANR	2013152	Function	from_zval_write_sockaddr_in	581:0:14723:14903							
ANR	2013153	FunctionDef	"from_zval_write_sockaddr_in (const zval * container , char * sockaddr , ser_context * ctx)"		2013152	0					
ANR	2013154	CompoundStatement		582:0:14820:14903	2013152	0					
ANR	2013155	ExpressionStatement	"from_zval_write_aggregation ( container , sockaddr , descriptors_sockaddr_in , ctx )"	583:1:14823:14901	2013152	0	True				
ANR	2013156	CallExpression	"from_zval_write_aggregation ( container , sockaddr , descriptors_sockaddr_in , ctx )"		2013152	0					
ANR	2013157	Callee	from_zval_write_aggregation		2013152	0					
ANR	2013158	Identifier	from_zval_write_aggregation		2013152	0					
ANR	2013159	ArgumentList	container		2013152	1					
ANR	2013160	Argument	container		2013152	0					
ANR	2013161	Identifier	container		2013152	0					
ANR	2013162	Argument	sockaddr		2013152	1					
ANR	2013163	Identifier	sockaddr		2013152	0					
ANR	2013164	Argument	descriptors_sockaddr_in		2013152	2					
ANR	2013165	Identifier	descriptors_sockaddr_in		2013152	0					
ANR	2013166	Argument	ctx		2013152	3					
ANR	2013167	Identifier	ctx		2013152	0					
ANR	2013168	ReturnType	static void		2013152	1					
ANR	2013169	Identifier	from_zval_write_sockaddr_in		2013152	2					
ANR	2013170	ParameterList	"const zval * container , char * sockaddr , ser_context * ctx"		2013152	3					
ANR	2013171	Parameter	const zval * container	581:40:14763:14783	2013152	0	True				
ANR	2013172	ParameterType	const zval *		2013152	0					
ANR	2013173	Identifier	container		2013152	1					
ANR	2013174	Parameter	char * sockaddr	581:63:14786:14799	2013152	1	True				
ANR	2013175	ParameterType	char *		2013152	0					
ANR	2013176	Identifier	sockaddr		2013152	1					
ANR	2013177	Parameter	ser_context * ctx	581:79:14802:14817	2013152	2	True				
ANR	2013178	ParameterType	ser_context *		2013152	0					
ANR	2013179	Identifier	ctx		2013152	1					
ANR	2013180	CFGEntryNode	ENTRY		2013152		True				
ANR	2013181	CFGExitNode	EXIT		2013152		True				
ANR	2013182	Symbol	container		2013152						
ANR	2013183	Symbol	ctx		2013152						
ANR	2013184	Symbol	sockaddr		2013152						
ANR	2013185	Symbol	descriptors_sockaddr_in		2013152						
ANR	2013186	Function	to_zval_read_sockaddr_in	585:0:14905:15057							
ANR	2013187	FunctionDef	"to_zval_read_sockaddr_in (const char * data , zval * zv , res_context * ctx)"		2013186	0					
ANR	2013188	CompoundStatement		586:0:14988:15057	2013186	0					
ANR	2013189	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_in , ctx )"	587:1:14991:15055	2013186	0	True				
ANR	2013190	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_in , ctx )"		2013186	0					
ANR	2013191	Callee	to_zval_read_aggregation		2013186	0					
ANR	2013192	Identifier	to_zval_read_aggregation		2013186	0					
ANR	2013193	ArgumentList	data		2013186	1					
ANR	2013194	Argument	data		2013186	0					
ANR	2013195	Identifier	data		2013186	0					
ANR	2013196	Argument	zv		2013186	1					
ANR	2013197	Identifier	zv		2013186	0					
ANR	2013198	Argument	descriptors_sockaddr_in		2013186	2					
ANR	2013199	Identifier	descriptors_sockaddr_in		2013186	0					
ANR	2013200	Argument	ctx		2013186	3					
ANR	2013201	Identifier	ctx		2013186	0					
ANR	2013202	ReturnType	static void		2013186	1					
ANR	2013203	Identifier	to_zval_read_sockaddr_in		2013186	2					
ANR	2013204	ParameterList	"const char * data , zval * zv , res_context * ctx"		2013186	3					
ANR	2013205	Parameter	const char * data	585:37:14942:14957	2013186	0	True				
ANR	2013206	ParameterType	const char *		2013186	0					
ANR	2013207	Identifier	data		2013186	1					
ANR	2013208	Parameter	zval * zv	585:55:14960:14967	2013186	1	True				
ANR	2013209	ParameterType	zval *		2013186	0					
ANR	2013210	Identifier	zv		2013186	1					
ANR	2013211	Parameter	res_context * ctx	585:65:14970:14985	2013186	2	True				
ANR	2013212	ParameterType	res_context *		2013186	0					
ANR	2013213	Identifier	ctx		2013186	1					
ANR	2013214	CFGEntryNode	ENTRY		2013186		True				
ANR	2013215	CFGExitNode	EXIT		2013186		True				
ANR	2013216	Symbol	data		2013186						
ANR	2013217	Symbol	ctx		2013186						
ANR	2013218	Symbol	descriptors_sockaddr_in		2013186						
ANR	2013219	Symbol	zv		2013186						
ANR	2013220	Function	from_zval_write_sin6_addr	590:0:15073:15662							
ANR	2013221	FunctionDef	"from_zval_write_sin6_addr (const zval * zaddr_str , char * addr6 , ser_context * ctx)"		2013220	0					
ANR	2013222	CompoundStatement		591:0:15165:15662	2013220	0					
ANR	2013223	IdentifierDeclStatement	int res ;	592:1:15168:15179	2013220	0	True				
ANR	2013224	IdentifierDecl	res		2013220	0					
ANR	2013225	IdentifierDeclType	int		2013220	0					
ANR	2013226	Identifier	res		2013220	1					
ANR	2013227	IdentifierDeclStatement	struct sockaddr_in6 saddr6 = { 0 } ;	593:1:15182:15214	2013220	1	True				
ANR	2013228	IdentifierDecl	saddr6 = { 0 }		2013220	0					
ANR	2013229	IdentifierDeclType	struct sockaddr_in6		2013220	0					
ANR	2013230	Identifier	saddr6		2013220	1					
ANR	2013231	AssignmentExpression	saddr6 = { 0 }		2013220	2		=			
ANR	2013232	Identifier	saddr6		2013220	0					
ANR	2013233	InitializerList	0		2013220	1					
ANR	2013234	PrimaryExpression	0		2013220	0					
ANR	2013235	IdentifierDeclStatement	zend_string * addr_str ;	594:1:15217:15240	2013220	2	True				
ANR	2013236	IdentifierDecl	* addr_str		2013220	0					
ANR	2013237	IdentifierDeclType	zend_string *		2013220	0					
ANR	2013238	Identifier	addr_str		2013220	1					
ANR	2013239	ExpressionStatement	addr_str = zval_get_string ( ( zval * ) zaddr_str )	596:1:15244:15290	2013220	3	True				
ANR	2013240	AssignmentExpression	addr_str = zval_get_string ( ( zval * ) zaddr_str )		2013220	0		=			
ANR	2013241	Identifier	addr_str		2013220	0					
ANR	2013242	CallExpression	zval_get_string ( ( zval * ) zaddr_str )		2013220	1					
ANR	2013243	Callee	zval_get_string		2013220	0					
ANR	2013244	Identifier	zval_get_string		2013220	0					
ANR	2013245	ArgumentList	( zval * ) zaddr_str		2013220	1					
ANR	2013246	Argument	( zval * ) zaddr_str		2013220	0					
ANR	2013247	CastExpression	( zval * ) zaddr_str		2013220	0					
ANR	2013248	CastTarget	zval *		2013220	0					
ANR	2013249	Identifier	zaddr_str		2013220	1					
ANR	2013250	ExpressionStatement	"res = php_set_inet6_addr ( & saddr6 , ZSTR_VAL ( addr_str ) , ctx -> sock )"	597:1:15293:15357	2013220	4	True				
ANR	2013251	AssignmentExpression	"res = php_set_inet6_addr ( & saddr6 , ZSTR_VAL ( addr_str ) , ctx -> sock )"		2013220	0		=			
ANR	2013252	Identifier	res		2013220	0					
ANR	2013253	CallExpression	"php_set_inet6_addr ( & saddr6 , ZSTR_VAL ( addr_str ) , ctx -> sock )"		2013220	1					
ANR	2013254	Callee	php_set_inet6_addr		2013220	0					
ANR	2013255	Identifier	php_set_inet6_addr		2013220	0					
ANR	2013256	ArgumentList	& saddr6		2013220	1					
ANR	2013257	Argument	& saddr6		2013220	0					
ANR	2013258	UnaryOperationExpression	& saddr6		2013220	0					
ANR	2013259	UnaryOperator	&		2013220	0					
ANR	2013260	Identifier	saddr6		2013220	1					
ANR	2013261	Argument	ZSTR_VAL ( addr_str )		2013220	1					
ANR	2013262	CallExpression	ZSTR_VAL ( addr_str )		2013220	0					
ANR	2013263	Callee	ZSTR_VAL		2013220	0					
ANR	2013264	Identifier	ZSTR_VAL		2013220	0					
ANR	2013265	ArgumentList	addr_str		2013220	1					
ANR	2013266	Argument	addr_str		2013220	0					
ANR	2013267	Identifier	addr_str		2013220	0					
ANR	2013268	Argument	ctx -> sock		2013220	2					
ANR	2013269	PtrMemberAccess	ctx -> sock		2013220	0					
ANR	2013270	Identifier	ctx		2013220	0					
ANR	2013271	Identifier	sock		2013220	1					
ANR	2013272	IfStatement	if ( res )		2013220	5					
ANR	2013273	Condition	res	598:5:15364:15366	2013220	0	True				
ANR	2013274	Identifier	res		2013220	0					
ANR	2013275	CompoundStatement		8:10:203:203	2013220	1					
ANR	2013276	ExpressionStatement	"memcpy ( addr6 , & saddr6 . sin6_addr , sizeof saddr6 . sin6_addr )"	599:2:15373:15430	2013220	0	True				
ANR	2013277	CallExpression	"memcpy ( addr6 , & saddr6 . sin6_addr , sizeof saddr6 . sin6_addr )"		2013220	0					
ANR	2013278	Callee	memcpy		2013220	0					
ANR	2013279	Identifier	memcpy		2013220	0					
ANR	2013280	ArgumentList	addr6		2013220	1					
ANR	2013281	Argument	addr6		2013220	0					
ANR	2013282	Identifier	addr6		2013220	0					
ANR	2013283	Argument	& saddr6 . sin6_addr		2013220	1					
ANR	2013284	UnaryOperationExpression	& saddr6 . sin6_addr		2013220	0					
ANR	2013285	UnaryOperator	&		2013220	0					
ANR	2013286	MemberAccess	saddr6 . sin6_addr		2013220	1					
ANR	2013287	Identifier	saddr6		2013220	0					
ANR	2013288	Identifier	sin6_addr		2013220	1					
ANR	2013289	Argument	sizeof saddr6 . sin6_addr		2013220	2					
ANR	2013290	SizeofExpression	sizeof saddr6 . sin6_addr		2013220	0					
ANR	2013291	Sizeof	sizeof		2013220	0					
ANR	2013292	MemberAccess	saddr6 . sin6_addr		2013220	1					
ANR	2013293	Identifier	saddr6		2013220	0					
ANR	2013294	Identifier	sin6_addr		2013220	1					
ANR	2013295	ElseStatement	else		2013220	0					
ANR	2013296	CompoundStatement		10:8:274:274	2013220	0					
ANR	2013297	Statement	do_from_zval_err	602:2:15512:15527	2013220	0	True				
ANR	2013298	Statement	(	602:18:15528:15528	2013220	1	True				
ANR	2013299	Statement	ctx	602:19:15529:15531	2013220	2	True				
ANR	2013300	Statement	","	602:22:15532:15532	2013220	3	True				
ANR	2013301	Statement	"""could not resolve address '%s' to get an AF_INET6 """	602:24:15534:15585	2013220	4	True				
ANR	2013302	Statement	"""address"""	603:4:15591:15599	2013220	5	True				
ANR	2013303	Statement	","	603:13:15600:15600	2013220	6	True				
ANR	2013304	Statement	Z_STRVAL_P	603:15:15602:15611	2013220	7	True				
ANR	2013305	Statement	(	603:25:15612:15612	2013220	8	True				
ANR	2013306	Statement	zaddr_str	603:26:15613:15621	2013220	9	True				
ANR	2013307	Statement	)	603:35:15622:15622	2013220	10	True				
ANR	2013308	Statement	)	603:36:15623:15623	2013220	11	True				
ANR	2013309	ExpressionStatement		603:37:15624:15624	2013220	12	True				
ANR	2013310	ExpressionStatement	zend_string_release ( addr_str )	606:1:15631:15660	2013220	6	True				
ANR	2013311	CallExpression	zend_string_release ( addr_str )		2013220	0					
ANR	2013312	Callee	zend_string_release		2013220	0					
ANR	2013313	Identifier	zend_string_release		2013220	0					
ANR	2013314	ArgumentList	addr_str		2013220	1					
ANR	2013315	Argument	addr_str		2013220	0					
ANR	2013316	Identifier	addr_str		2013220	0					
ANR	2013317	ReturnType	static void		2013220	1					
ANR	2013318	Identifier	from_zval_write_sin6_addr		2013220	2					
ANR	2013319	ParameterList	"const zval * zaddr_str , char * addr6 , ser_context * ctx"		2013220	3					
ANR	2013320	Parameter	const zval * zaddr_str	590:38:15111:15131	2013220	0	True				
ANR	2013321	ParameterType	const zval *		2013220	0					
ANR	2013322	Identifier	zaddr_str		2013220	1					
ANR	2013323	Parameter	char * addr6	590:61:15134:15144	2013220	1	True				
ANR	2013324	ParameterType	char *		2013220	0					
ANR	2013325	Identifier	addr6		2013220	1					
ANR	2013326	Parameter	ser_context * ctx	590:74:15147:15162	2013220	2	True				
ANR	2013327	ParameterType	ser_context *		2013220	0					
ANR	2013328	Identifier	ctx		2013220	1					
ANR	2013329	CFGEntryNode	ENTRY		2013220		True				
ANR	2013330	CFGExitNode	EXIT		2013220		True				
ANR	2013331	Symbol	addr6		2013220						
ANR	2013332	Symbol	res		2013220						
ANR	2013333	Symbol	ctx		2013220						
ANR	2013334	Symbol	zval_get_string		2013220						
ANR	2013335	Symbol	zaddr_str		2013220						
ANR	2013336	Symbol	* ctx		2013220						
ANR	2013337	Symbol	ZSTR_VAL		2013220						
ANR	2013338	Symbol	saddr6		2013220						
ANR	2013339	Symbol	& saddr6 . sin6_addr		2013220						
ANR	2013340	Symbol	php_set_inet6_addr		2013220						
ANR	2013341	Symbol	ctx -> sock		2013220						
ANR	2013342	Symbol	addr_str		2013220						
ANR	2013343	Symbol	& saddr6		2013220						
ANR	2013344	Symbol	saddr6 . sin6_addr		2013220						
ANR	2013345	Function	to_zval_read_sin6_addr	608:0:15664:16172							
ANR	2013346	FunctionDef	"to_zval_read_sin6_addr (const char * data , zval * zv , res_context * ctx)"		2013345	0					
ANR	2013347	CompoundStatement		609:0:15745:16172	2013345	0					
ANR	2013348	IdentifierDeclStatement	const struct in6_addr * addr = ( const struct in6_addr * ) data ;	610:1:15748:15807	2013345	0	True				
ANR	2013349	IdentifierDecl	* addr = ( const struct in6_addr * ) data		2013345	0					
ANR	2013350	IdentifierDeclType	const struct in6_addr *		2013345	0					
ANR	2013351	Identifier	addr		2013345	1					
ANR	2013352	AssignmentExpression	* addr = ( const struct in6_addr * ) data		2013345	2		=			
ANR	2013353	Identifier	addr		2013345	0					
ANR	2013354	CastExpression	( const struct in6_addr * ) data		2013345	1					
ANR	2013355	CastTarget	const struct in6_addr *		2013345	0					
ANR	2013356	Identifier	data		2013345	1					
ANR	2013357	IdentifierDeclStatement	socklen_t size = INET6_ADDRSTRLEN ;	611:1:15810:15843	2013345	1	True				
ANR	2013358	IdentifierDecl	size = INET6_ADDRSTRLEN		2013345	0					
ANR	2013359	IdentifierDeclType	socklen_t		2013345	0					
ANR	2013360	Identifier	size		2013345	1					
ANR	2013361	AssignmentExpression	size = INET6_ADDRSTRLEN		2013345	2		=			
ANR	2013362	Identifier	INET6_ADDRSTRLEN		2013345	0					
ANR	2013363	Identifier	INET6_ADDRSTRLEN		2013345	1					
ANR	2013364	IdentifierDeclStatement	"zend_string * str = zend_string_alloc ( size - 1 , 0 ) ;"	612:1:15846:15895	2013345	2	True				
ANR	2013365	IdentifierDecl	"* str = zend_string_alloc ( size - 1 , 0 )"		2013345	0					
ANR	2013366	IdentifierDeclType	zend_string *		2013345	0					
ANR	2013367	Identifier	str		2013345	1					
ANR	2013368	AssignmentExpression	"* str = zend_string_alloc ( size - 1 , 0 )"		2013345	2		=			
ANR	2013369	Identifier	str		2013345	0					
ANR	2013370	CallExpression	"zend_string_alloc ( size - 1 , 0 )"		2013345	1					
ANR	2013371	Callee	zend_string_alloc		2013345	0					
ANR	2013372	Identifier	zend_string_alloc		2013345	0					
ANR	2013373	ArgumentList	size - 1		2013345	1					
ANR	2013374	Argument	size - 1		2013345	0					
ANR	2013375	AdditiveExpression	size - 1		2013345	0		-			
ANR	2013376	Identifier	size		2013345	0					
ANR	2013377	PrimaryExpression	1		2013345	1					
ANR	2013378	Argument	0		2013345	1					
ANR	2013379	PrimaryExpression	0		2013345	0					
ANR	2013380	ExpressionStatement	"memset ( ZSTR_VAL ( str ) , '\\0' , size )"	614:1:15899:15932	2013345	3	True				
ANR	2013381	CallExpression	"memset ( ZSTR_VAL ( str ) , '\\0' , size )"		2013345	0					
ANR	2013382	Callee	memset		2013345	0					
ANR	2013383	Identifier	memset		2013345	0					
ANR	2013384	ArgumentList	ZSTR_VAL ( str )		2013345	1					
ANR	2013385	Argument	ZSTR_VAL ( str )		2013345	0					
ANR	2013386	CallExpression	ZSTR_VAL ( str )		2013345	0					
ANR	2013387	Callee	ZSTR_VAL		2013345	0					
ANR	2013388	Identifier	ZSTR_VAL		2013345	0					
ANR	2013389	ArgumentList	str		2013345	1					
ANR	2013390	Argument	str		2013345	0					
ANR	2013391	Identifier	str		2013345	0					
ANR	2013392	Argument	'\\0'		2013345	1					
ANR	2013393	PrimaryExpression	'\\0'		2013345	0					
ANR	2013394	Argument	size		2013345	2					
ANR	2013395	Identifier	size		2013345	0					
ANR	2013396	ExpressionStatement	"ZVAL_NEW_STR ( zv , str )"	616:1:15936:15957	2013345	4	True				
ANR	2013397	CallExpression	"ZVAL_NEW_STR ( zv , str )"		2013345	0					
ANR	2013398	Callee	ZVAL_NEW_STR		2013345	0					
ANR	2013399	Identifier	ZVAL_NEW_STR		2013345	0					
ANR	2013400	ArgumentList	zv		2013345	1					
ANR	2013401	Argument	zv		2013345	0					
ANR	2013402	Identifier	zv		2013345	0					
ANR	2013403	Argument	str		2013345	1					
ANR	2013404	Identifier	str		2013345	0					
ANR	2013405	IfStatement	"if ( inet_ntop ( AF_INET6 , addr , Z_STRVAL_P ( zv ) , size ) == NULL )"		2013345	5					
ANR	2013406	Condition	"inet_ntop ( AF_INET6 , addr , Z_STRVAL_P ( zv ) , size ) == NULL"	618:5:15965:16019	2013345	0	True				
ANR	2013407	EqualityExpression	"inet_ntop ( AF_INET6 , addr , Z_STRVAL_P ( zv ) , size ) == NULL"		2013345	0		==			
ANR	2013408	CallExpression	"inet_ntop ( AF_INET6 , addr , Z_STRVAL_P ( zv ) , size )"		2013345	0					
ANR	2013409	Callee	inet_ntop		2013345	0					
ANR	2013410	Identifier	inet_ntop		2013345	0					
ANR	2013411	ArgumentList	AF_INET6		2013345	1					
ANR	2013412	Argument	AF_INET6		2013345	0					
ANR	2013413	Identifier	AF_INET6		2013345	0					
ANR	2013414	Argument	addr		2013345	1					
ANR	2013415	Identifier	addr		2013345	0					
ANR	2013416	Argument	Z_STRVAL_P ( zv )		2013345	2					
ANR	2013417	CallExpression	Z_STRVAL_P ( zv )		2013345	0					
ANR	2013418	Callee	Z_STRVAL_P		2013345	0					
ANR	2013419	Identifier	Z_STRVAL_P		2013345	0					
ANR	2013420	ArgumentList	zv		2013345	1					
ANR	2013421	Argument	zv		2013345	0					
ANR	2013422	Identifier	zv		2013345	0					
ANR	2013423	Argument	size		2013345	3					
ANR	2013424	Identifier	size		2013345	0					
ANR	2013425	Identifier	NULL		2013345	1					
ANR	2013426	CompoundStatement		10:62:276:276	2013345	1					
ANR	2013427	Statement	do_to_zval_err	619:2:16026:16039	2013345	0	True				
ANR	2013428	Statement	(	619:16:16040:16040	2013345	1	True				
ANR	2013429	Statement	ctx	619:17:16041:16043	2013345	2	True				
ANR	2013430	Statement	","	619:20:16044:16044	2013345	3	True				
ANR	2013431	Statement	"""could not convert IPv6 address to string """	619:22:16046:16088	2013345	4	True				
ANR	2013432	Statement	"""(errno %d)"""	620:4:16094:16105	2013345	5	True				
ANR	2013433	Statement	","	620:16:16106:16106	2013345	6	True				
ANR	2013434	Statement	errno	620:18:16108:16112	2013345	7	True				
ANR	2013435	Statement	)	620:23:16113:16113	2013345	8	True				
ANR	2013436	ExpressionStatement		620:24:16114:16114	2013345	9	True				
ANR	2013437	ReturnStatement	return ;	621:2:16118:16124	2013345	10	True				
ANR	2013438	ExpressionStatement	Z_STRLEN_P ( zv ) = strlen ( Z_STRVAL_P ( zv ) )	624:1:16131:16170	2013345	6	True				
ANR	2013439	AssignmentExpression	Z_STRLEN_P ( zv ) = strlen ( Z_STRVAL_P ( zv ) )		2013345	0		=			
ANR	2013440	CallExpression	Z_STRLEN_P ( zv )		2013345	0					
ANR	2013441	Callee	Z_STRLEN_P		2013345	0					
ANR	2013442	Identifier	Z_STRLEN_P		2013345	0					
ANR	2013443	ArgumentList	zv		2013345	1					
ANR	2013444	Argument	zv		2013345	0					
ANR	2013445	Identifier	zv		2013345	0					
ANR	2013446	CallExpression	strlen ( Z_STRVAL_P ( zv ) )		2013345	1					
ANR	2013447	Callee	strlen		2013345	0					
ANR	2013448	Identifier	strlen		2013345	0					
ANR	2013449	ArgumentList	Z_STRVAL_P ( zv )		2013345	1					
ANR	2013450	Argument	Z_STRVAL_P ( zv )		2013345	0					
ANR	2013451	CallExpression	Z_STRVAL_P ( zv )		2013345	0					
ANR	2013452	Callee	Z_STRVAL_P		2013345	0					
ANR	2013453	Identifier	Z_STRVAL_P		2013345	0					
ANR	2013454	ArgumentList	zv		2013345	1					
ANR	2013455	Argument	zv		2013345	0					
ANR	2013456	Identifier	zv		2013345	0					
ANR	2013457	ReturnType	static void		2013345	1					
ANR	2013458	Identifier	to_zval_read_sin6_addr		2013345	2					
ANR	2013459	ParameterList	"const char * data , zval * zv , res_context * ctx"		2013345	3					
ANR	2013460	Parameter	const char * data	608:35:15699:15714	2013345	0	True				
ANR	2013461	ParameterType	const char *		2013345	0					
ANR	2013462	Identifier	data		2013345	1					
ANR	2013463	Parameter	zval * zv	608:53:15717:15724	2013345	1	True				
ANR	2013464	ParameterType	zval *		2013345	0					
ANR	2013465	Identifier	zv		2013345	1					
ANR	2013466	Parameter	res_context * ctx	608:63:15727:15742	2013345	2	True				
ANR	2013467	ParameterType	res_context *		2013345	0					
ANR	2013468	Identifier	ctx		2013345	1					
ANR	2013469	CFGEntryNode	ENTRY		2013345		True				
ANR	2013470	CFGExitNode	EXIT		2013345		True				
ANR	2013471	Symbol	zend_string_alloc		2013345						
ANR	2013472	Symbol	NULL		2013345						
ANR	2013473	Symbol	data		2013345						
ANR	2013474	Symbol	ctx		2013345						
ANR	2013475	Symbol	INET6_ADDRSTRLEN		2013345						
ANR	2013476	Symbol	Z_STRVAL_P		2013345						
ANR	2013477	Symbol	AF_INET6		2013345						
ANR	2013478	Symbol	ZSTR_VAL		2013345						
ANR	2013479	Symbol	str		2013345						
ANR	2013480	Symbol	strlen		2013345						
ANR	2013481	Symbol	size		2013345						
ANR	2013482	Symbol	inet_ntop		2013345						
ANR	2013483	Symbol	Z_STRLEN_P		2013345						
ANR	2013484	Symbol	zv		2013345						
ANR	2013485	Symbol	addr		2013345						
ANR	2013486	DeclStmt									
ANR	2013487	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_sockaddr_in6
ANR	2013488	Function	from_zval_write_sockaddr_in6	634:0:16884:17068							
ANR	2013489	FunctionDef	"from_zval_write_sockaddr_in6 (const zval * container , char * sockaddr6 , ser_context * ctx)"		2013488	0					
ANR	2013490	CompoundStatement		635:0:16983:17068	2013488	0					
ANR	2013491	ExpressionStatement	"from_zval_write_aggregation ( container , sockaddr6 , descriptors_sockaddr_in6 , ctx )"	636:1:16986:17066	2013488	0	True				
ANR	2013492	CallExpression	"from_zval_write_aggregation ( container , sockaddr6 , descriptors_sockaddr_in6 , ctx )"		2013488	0					
ANR	2013493	Callee	from_zval_write_aggregation		2013488	0					
ANR	2013494	Identifier	from_zval_write_aggregation		2013488	0					
ANR	2013495	ArgumentList	container		2013488	1					
ANR	2013496	Argument	container		2013488	0					
ANR	2013497	Identifier	container		2013488	0					
ANR	2013498	Argument	sockaddr6		2013488	1					
ANR	2013499	Identifier	sockaddr6		2013488	0					
ANR	2013500	Argument	descriptors_sockaddr_in6		2013488	2					
ANR	2013501	Identifier	descriptors_sockaddr_in6		2013488	0					
ANR	2013502	Argument	ctx		2013488	3					
ANR	2013503	Identifier	ctx		2013488	0					
ANR	2013504	ReturnType	static void		2013488	1					
ANR	2013505	Identifier	from_zval_write_sockaddr_in6		2013488	2					
ANR	2013506	ParameterList	"const zval * container , char * sockaddr6 , ser_context * ctx"		2013488	3					
ANR	2013507	Parameter	const zval * container	634:41:16925:16945	2013488	0	True				
ANR	2013508	ParameterType	const zval *		2013488	0					
ANR	2013509	Identifier	container		2013488	1					
ANR	2013510	Parameter	char * sockaddr6	634:64:16948:16962	2013488	1	True				
ANR	2013511	ParameterType	char *		2013488	0					
ANR	2013512	Identifier	sockaddr6		2013488	1					
ANR	2013513	Parameter	ser_context * ctx	634:81:16965:16980	2013488	2	True				
ANR	2013514	ParameterType	ser_context *		2013488	0					
ANR	2013515	Identifier	ctx		2013488	1					
ANR	2013516	CFGEntryNode	ENTRY		2013488		True				
ANR	2013517	CFGExitNode	EXIT		2013488		True				
ANR	2013518	Symbol	container		2013488						
ANR	2013519	Symbol	sockaddr6		2013488						
ANR	2013520	Symbol	ctx		2013488						
ANR	2013521	Symbol	descriptors_sockaddr_in6		2013488						
ANR	2013522	Function	to_zval_read_sockaddr_in6	638:0:17070:17224							
ANR	2013523	FunctionDef	"to_zval_read_sockaddr_in6 (const char * data , zval * zv , res_context * ctx)"		2013522	0					
ANR	2013524	CompoundStatement		639:0:17154:17224	2013522	0					
ANR	2013525	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_in6 , ctx )"	640:1:17157:17222	2013522	0	True				
ANR	2013526	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_in6 , ctx )"		2013522	0					
ANR	2013527	Callee	to_zval_read_aggregation		2013522	0					
ANR	2013528	Identifier	to_zval_read_aggregation		2013522	0					
ANR	2013529	ArgumentList	data		2013522	1					
ANR	2013530	Argument	data		2013522	0					
ANR	2013531	Identifier	data		2013522	0					
ANR	2013532	Argument	zv		2013522	1					
ANR	2013533	Identifier	zv		2013522	0					
ANR	2013534	Argument	descriptors_sockaddr_in6		2013522	2					
ANR	2013535	Identifier	descriptors_sockaddr_in6		2013522	0					
ANR	2013536	Argument	ctx		2013522	3					
ANR	2013537	Identifier	ctx		2013522	0					
ANR	2013538	ReturnType	static void		2013522	1					
ANR	2013539	Identifier	to_zval_read_sockaddr_in6		2013522	2					
ANR	2013540	ParameterList	"const char * data , zval * zv , res_context * ctx"		2013522	3					
ANR	2013541	Parameter	const char * data	638:38:17108:17123	2013522	0	True				
ANR	2013542	ParameterType	const char *		2013522	0					
ANR	2013543	Identifier	data		2013522	1					
ANR	2013544	Parameter	zval * zv	638:56:17126:17133	2013522	1	True				
ANR	2013545	ParameterType	zval *		2013522	0					
ANR	2013546	Identifier	zv		2013522	1					
ANR	2013547	Parameter	res_context * ctx	638:66:17136:17151	2013522	2	True				
ANR	2013548	ParameterType	res_context *		2013522	0					
ANR	2013549	Identifier	ctx		2013522	1					
ANR	2013550	CFGEntryNode	ENTRY		2013522		True				
ANR	2013551	CFGExitNode	EXIT		2013522		True				
ANR	2013552	Symbol	data		2013522						
ANR	2013553	Symbol	ctx		2013522						
ANR	2013554	Symbol	zv		2013522						
ANR	2013555	Symbol	descriptors_sockaddr_in6		2013522						
ANR	2013556	Function	from_zval_write_sun_path	643:0:17249:18113							
ANR	2013557	FunctionDef	"from_zval_write_sun_path (const zval * path , char * sockaddr_un_c , ser_context * ctx)"		2013556	0					
ANR	2013558	CompoundStatement		644:0:17343:18113	2013556	0					
ANR	2013559	IdentifierDeclStatement	zend_string * path_str ;	645:1:17346:17369	2013556	0	True				
ANR	2013560	IdentifierDecl	* path_str		2013556	0					
ANR	2013561	IdentifierDeclType	zend_string *		2013556	0					
ANR	2013562	Identifier	path_str		2013556	1					
ANR	2013563	IdentifierDeclStatement	struct sockaddr_un * saddr = ( struct sockaddr_un * ) sockaddr_un_c ;	646:1:17372:17434	2013556	1	True				
ANR	2013564	IdentifierDecl	* saddr = ( struct sockaddr_un * ) sockaddr_un_c		2013556	0					
ANR	2013565	IdentifierDeclType	struct sockaddr_un *		2013556	0					
ANR	2013566	Identifier	saddr		2013556	1					
ANR	2013567	AssignmentExpression	* saddr = ( struct sockaddr_un * ) sockaddr_un_c		2013556	2		=			
ANR	2013568	Identifier	saddr		2013556	0					
ANR	2013569	CastExpression	( struct sockaddr_un * ) sockaddr_un_c		2013556	1					
ANR	2013570	CastTarget	struct sockaddr_un *		2013556	0					
ANR	2013571	Identifier	sockaddr_un_c		2013556	1					
ANR	2013572	ExpressionStatement	path_str = zval_get_string ( ( zval * ) path )	648:1:17438:17479	2013556	2	True				
ANR	2013573	AssignmentExpression	path_str = zval_get_string ( ( zval * ) path )		2013556	0		=			
ANR	2013574	Identifier	path_str		2013556	0					
ANR	2013575	CallExpression	zval_get_string ( ( zval * ) path )		2013556	1					
ANR	2013576	Callee	zval_get_string		2013556	0					
ANR	2013577	Identifier	zval_get_string		2013556	0					
ANR	2013578	ArgumentList	( zval * ) path		2013556	1					
ANR	2013579	Argument	( zval * ) path		2013556	0					
ANR	2013580	CastExpression	( zval * ) path		2013556	0					
ANR	2013581	CastTarget	zval *		2013556	0					
ANR	2013582	Identifier	path		2013556	1					
ANR	2013583	IfStatement	if ( ZSTR_LEN ( path_str ) == 0 )		2013556	3					
ANR	2013584	Condition	ZSTR_LEN ( path_str ) == 0	653:5:17676:17698	2013556	0	True				
ANR	2013585	EqualityExpression	ZSTR_LEN ( path_str ) == 0		2013556	0		==			
ANR	2013586	CallExpression	ZSTR_LEN ( path_str )		2013556	0					
ANR	2013587	Callee	ZSTR_LEN		2013556	0					
ANR	2013588	Identifier	ZSTR_LEN		2013556	0					
ANR	2013589	ArgumentList	path_str		2013556	1					
ANR	2013590	Argument	path_str		2013556	0					
ANR	2013591	Identifier	path_str		2013556	0					
ANR	2013592	PrimaryExpression	0		2013556	1					
ANR	2013593	CompoundStatement		10:30:357:357	2013556	1					
ANR	2013594	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""the path is cannot be empty"" )"	654:2:17705:17763	2013556	0	True				
ANR	2013595	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""the path is cannot be empty"" )"		2013556	0					
ANR	2013596	Callee	do_from_zval_err		2013556	0					
ANR	2013597	Identifier	do_from_zval_err		2013556	0					
ANR	2013598	ArgumentList	ctx		2013556	1					
ANR	2013599	Argument	ctx		2013556	0					
ANR	2013600	Identifier	ctx		2013556	0					
ANR	2013601	Argument	"""%s"""		2013556	1					
ANR	2013602	PrimaryExpression	"""%s"""		2013556	0					
ANR	2013603	Argument	"""the path is cannot be empty"""		2013556	2					
ANR	2013604	PrimaryExpression	"""the path is cannot be empty"""		2013556	0					
ANR	2013605	ReturnStatement	return ;	655:2:17767:17773	2013556	1	True				
ANR	2013606	IfStatement	if ( ZSTR_LEN ( path_str ) >= sizeof ( saddr -> sun_path ) )		2013556	4					
ANR	2013607	Condition	ZSTR_LEN ( path_str ) >= sizeof ( saddr -> sun_path )	657:5:17783:17827	2013556	0	True				
ANR	2013608	RelationalExpression	ZSTR_LEN ( path_str ) >= sizeof ( saddr -> sun_path )		2013556	0		>=			
ANR	2013609	CallExpression	ZSTR_LEN ( path_str )		2013556	0					
ANR	2013610	Callee	ZSTR_LEN		2013556	0					
ANR	2013611	Identifier	ZSTR_LEN		2013556	0					
ANR	2013612	ArgumentList	path_str		2013556	1					
ANR	2013613	Argument	path_str		2013556	0					
ANR	2013614	Identifier	path_str		2013556	0					
ANR	2013615	SizeofExpression	sizeof ( saddr -> sun_path )		2013556	1					
ANR	2013616	Sizeof	sizeof		2013556	0					
ANR	2013617	PtrMemberAccess	saddr -> sun_path		2013556	1					
ANR	2013618	Identifier	saddr		2013556	0					
ANR	2013619	Identifier	sun_path		2013556	1					
ANR	2013620	CompoundStatement		14:52:486:486	2013556	1					
ANR	2013621	Statement	do_from_zval_err	658:2:17834:17849	2013556	0	True				
ANR	2013622	Statement	(	658:18:17850:17850	2013556	1	True				
ANR	2013623	Statement	ctx	658:19:17851:17853	2013556	2	True				
ANR	2013624	Statement	","	658:22:17854:17854	2013556	3	True				
ANR	2013625	Statement	"""the path is too long, the maximum permitted """	658:24:17856:17901	2013556	4	True				
ANR	2013626	Statement	"""length is %ld"""	659:4:17907:17921	2013556	5	True				
ANR	2013627	Statement	","	659:19:17922:17922	2013556	6	True				
ANR	2013628	Statement	sizeof	659:21:17924:17929	2013556	7	True				
ANR	2013629	Statement	(	659:27:17930:17930	2013556	8	True				
ANR	2013630	Statement	saddr	659:28:17931:17935	2013556	9	True				
ANR	2013631	Statement	->	659:33:17936:17937	2013556	10	True				
ANR	2013632	Statement	sun_path	659:35:17938:17945	2013556	11	True				
ANR	2013633	Statement	)	659:43:17946:17946	2013556	12	True				
ANR	2013634	Statement	-	659:45:17948:17948	2013556	13	True				
ANR	2013635	Statement	1	659:47:17950:17950	2013556	14	True				
ANR	2013636	Statement	)	659:48:17951:17951	2013556	15	True				
ANR	2013637	ExpressionStatement		659:49:17952:17952	2013556	16	True				
ANR	2013638	ReturnStatement	return ;	660:2:17956:17962	2013556	17	True				
ANR	2013639	ExpressionStatement	"memcpy ( & saddr -> sun_path , ZSTR_VAL ( path_str ) , ZSTR_LEN ( path_str ) )"	663:1:17969:18033	2013556	5	True				
ANR	2013640	CallExpression	"memcpy ( & saddr -> sun_path , ZSTR_VAL ( path_str ) , ZSTR_LEN ( path_str ) )"		2013556	0					
ANR	2013641	Callee	memcpy		2013556	0					
ANR	2013642	Identifier	memcpy		2013556	0					
ANR	2013643	ArgumentList	& saddr -> sun_path		2013556	1					
ANR	2013644	Argument	& saddr -> sun_path		2013556	0					
ANR	2013645	UnaryOperationExpression	& saddr -> sun_path		2013556	0					
ANR	2013646	UnaryOperator	&		2013556	0					
ANR	2013647	PtrMemberAccess	saddr -> sun_path		2013556	1					
ANR	2013648	Identifier	saddr		2013556	0					
ANR	2013649	Identifier	sun_path		2013556	1					
ANR	2013650	Argument	ZSTR_VAL ( path_str )		2013556	1					
ANR	2013651	CallExpression	ZSTR_VAL ( path_str )		2013556	0					
ANR	2013652	Callee	ZSTR_VAL		2013556	0					
ANR	2013653	Identifier	ZSTR_VAL		2013556	0					
ANR	2013654	ArgumentList	path_str		2013556	1					
ANR	2013655	Argument	path_str		2013556	0					
ANR	2013656	Identifier	path_str		2013556	0					
ANR	2013657	Argument	ZSTR_LEN ( path_str )		2013556	2					
ANR	2013658	CallExpression	ZSTR_LEN ( path_str )		2013556	0					
ANR	2013659	Callee	ZSTR_LEN		2013556	0					
ANR	2013660	Identifier	ZSTR_LEN		2013556	0					
ANR	2013661	ArgumentList	path_str		2013556	1					
ANR	2013662	Argument	path_str		2013556	0					
ANR	2013663	Identifier	path_str		2013556	0					
ANR	2013664	ExpressionStatement	saddr -> sun_path [ ZSTR_LEN ( path_str ) ] = '\\0'	664:1:18036:18078	2013556	6	True				
ANR	2013665	AssignmentExpression	saddr -> sun_path [ ZSTR_LEN ( path_str ) ] = '\\0'		2013556	0		=			
ANR	2013666	ArrayIndexing	saddr -> sun_path [ ZSTR_LEN ( path_str ) ]		2013556	0					
ANR	2013667	PtrMemberAccess	saddr -> sun_path		2013556	0					
ANR	2013668	Identifier	saddr		2013556	0					
ANR	2013669	Identifier	sun_path		2013556	1					
ANR	2013670	CallExpression	ZSTR_LEN ( path_str )		2013556	1					
ANR	2013671	Callee	ZSTR_LEN		2013556	0					
ANR	2013672	Identifier	ZSTR_LEN		2013556	0					
ANR	2013673	ArgumentList	path_str		2013556	1					
ANR	2013674	Argument	path_str		2013556	0					
ANR	2013675	Identifier	path_str		2013556	0					
ANR	2013676	PrimaryExpression	'\\0'		2013556	1					
ANR	2013677	ExpressionStatement	zend_string_release ( path_str )	666:1:18082:18111	2013556	7	True				
ANR	2013678	CallExpression	zend_string_release ( path_str )		2013556	0					
ANR	2013679	Callee	zend_string_release		2013556	0					
ANR	2013680	Identifier	zend_string_release		2013556	0					
ANR	2013681	ArgumentList	path_str		2013556	1					
ANR	2013682	Argument	path_str		2013556	0					
ANR	2013683	Identifier	path_str		2013556	0					
ANR	2013684	ReturnType	static void		2013556	1					
ANR	2013685	Identifier	from_zval_write_sun_path		2013556	2					
ANR	2013686	ParameterList	"const zval * path , char * sockaddr_un_c , ser_context * ctx"		2013556	3					
ANR	2013687	Parameter	const zval * path	643:37:17286:17301	2013556	0	True				
ANR	2013688	ParameterType	const zval *		2013556	0					
ANR	2013689	Identifier	path		2013556	1					
ANR	2013690	Parameter	char * sockaddr_un_c	643:55:17304:17322	2013556	1	True				
ANR	2013691	ParameterType	char *		2013556	0					
ANR	2013692	Identifier	sockaddr_un_c		2013556	1					
ANR	2013693	Parameter	ser_context * ctx	643:76:17325:17340	2013556	2	True				
ANR	2013694	ParameterType	ser_context *		2013556	0					
ANR	2013695	Identifier	ctx		2013556	1					
ANR	2013696	CFGEntryNode	ENTRY		2013556		True				
ANR	2013697	CFGExitNode	EXIT		2013556		True				
ANR	2013698	Symbol	saddr -> sun_path		2013556						
ANR	2013699	Symbol	ctx		2013556						
ANR	2013700	Symbol	saddr		2013556						
ANR	2013701	Symbol	zval_get_string		2013556						
ANR	2013702	Symbol	* saddr		2013556						
ANR	2013703	Symbol	* saddr -> sun_path		2013556						
ANR	2013704	Symbol	path_str		2013556						
ANR	2013705	Symbol	ZSTR_VAL		2013556						
ANR	2013706	Symbol	path		2013556						
ANR	2013707	Symbol	* ZSTR_LEN		2013556						
ANR	2013708	Symbol	sockaddr_un_c		2013556						
ANR	2013709	Symbol	ZSTR_LEN		2013556						
ANR	2013710	Symbol	* * saddr		2013556						
ANR	2013711	Symbol	& saddr -> sun_path		2013556						
ANR	2013712	Function	to_zval_read_sun_path	668:0:18115:18506							
ANR	2013713	FunctionDef	"to_zval_read_sun_path (const char * data , zval * zv , res_context * ctx)"		2013712	0					
ANR	2013714	CompoundStatement		668:80:18195:18506	2013712	0					
ANR	2013715	IdentifierDeclStatement	struct sockaddr_un * saddr = ( struct sockaddr_un * ) data ;	669:1:18198:18251	2013712	0	True				
ANR	2013716	IdentifierDecl	* saddr = ( struct sockaddr_un * ) data		2013712	0					
ANR	2013717	IdentifierDeclType	struct sockaddr_un *		2013712	0					
ANR	2013718	Identifier	saddr		2013712	1					
ANR	2013719	AssignmentExpression	* saddr = ( struct sockaddr_un * ) data		2013712	2		=			
ANR	2013720	Identifier	saddr		2013712	0					
ANR	2013721	CastExpression	( struct sockaddr_un * ) data		2013712	1					
ANR	2013722	CastTarget	struct sockaddr_un *		2013712	0					
ANR	2013723	Identifier	data		2013712	1					
ANR	2013724	IdentifierDeclStatement	char * nul_pos ;	670:1:18254:18267	2013712	1	True				
ANR	2013725	IdentifierDecl	* nul_pos		2013712	0					
ANR	2013726	IdentifierDeclType	char *		2013712	0					
ANR	2013727	Identifier	nul_pos		2013712	1					
ANR	2013728	ExpressionStatement	"nul_pos = memchr ( & saddr -> sun_path , '\\0' , sizeof ( saddr -> sun_path ) )"	672:1:18271:18336	2013712	2	True				
ANR	2013729	AssignmentExpression	"nul_pos = memchr ( & saddr -> sun_path , '\\0' , sizeof ( saddr -> sun_path ) )"		2013712	0		=			
ANR	2013730	Identifier	nul_pos		2013712	0					
ANR	2013731	CallExpression	"memchr ( & saddr -> sun_path , '\\0' , sizeof ( saddr -> sun_path ) )"		2013712	1					
ANR	2013732	Callee	memchr		2013712	0					
ANR	2013733	Identifier	memchr		2013712	0					
ANR	2013734	ArgumentList	& saddr -> sun_path		2013712	1					
ANR	2013735	Argument	& saddr -> sun_path		2013712	0					
ANR	2013736	UnaryOperationExpression	& saddr -> sun_path		2013712	0					
ANR	2013737	UnaryOperator	&		2013712	0					
ANR	2013738	PtrMemberAccess	saddr -> sun_path		2013712	1					
ANR	2013739	Identifier	saddr		2013712	0					
ANR	2013740	Identifier	sun_path		2013712	1					
ANR	2013741	Argument	'\\0'		2013712	1					
ANR	2013742	PrimaryExpression	'\\0'		2013712	0					
ANR	2013743	Argument	sizeof ( saddr -> sun_path )		2013712	2					
ANR	2013744	SizeofExpression	sizeof ( saddr -> sun_path )		2013712	0					
ANR	2013745	Sizeof	sizeof		2013712	0					
ANR	2013746	PtrMemberAccess	saddr -> sun_path		2013712	1					
ANR	2013747	Identifier	saddr		2013712	0					
ANR	2013748	Identifier	sun_path		2013712	1					
ANR	2013749	IfStatement	if ( nul_pos == NULL )		2013712	3					
ANR	2013750	Condition	nul_pos == NULL	673:5:18343:18357	2013712	0	True				
ANR	2013751	EqualityExpression	nul_pos == NULL		2013712	0		==			
ANR	2013752	Identifier	nul_pos		2013712	0					
ANR	2013753	Identifier	NULL		2013712	1					
ANR	2013754	CompoundStatement		6:22:164:164	2013712	1					
ANR	2013755	ExpressionStatement	"do_to_zval_err ( ctx , ""could not find a NUL in the path"" )"	674:2:18364:18419	2013712	0	True				
ANR	2013756	CallExpression	"do_to_zval_err ( ctx , ""could not find a NUL in the path"" )"		2013712	0					
ANR	2013757	Callee	do_to_zval_err		2013712	0					
ANR	2013758	Identifier	do_to_zval_err		2013712	0					
ANR	2013759	ArgumentList	ctx		2013712	1					
ANR	2013760	Argument	ctx		2013712	0					
ANR	2013761	Identifier	ctx		2013712	0					
ANR	2013762	Argument	"""could not find a NUL in the path"""		2013712	1					
ANR	2013763	PrimaryExpression	"""could not find a NUL in the path"""		2013712	0					
ANR	2013764	ReturnStatement	return ;	675:2:18423:18429	2013712	1	True				
ANR	2013765	ExpressionStatement	"ZVAL_STRINGL ( zv , saddr -> sun_path , nul_pos - ( char * ) & saddr -> sun_path )"	678:1:18436:18504	2013712	4	True				
ANR	2013766	CallExpression	"ZVAL_STRINGL ( zv , saddr -> sun_path , nul_pos - ( char * ) & saddr -> sun_path )"		2013712	0					
ANR	2013767	Callee	ZVAL_STRINGL		2013712	0					
ANR	2013768	Identifier	ZVAL_STRINGL		2013712	0					
ANR	2013769	ArgumentList	zv		2013712	1					
ANR	2013770	Argument	zv		2013712	0					
ANR	2013771	Identifier	zv		2013712	0					
ANR	2013772	Argument	saddr -> sun_path		2013712	1					
ANR	2013773	PtrMemberAccess	saddr -> sun_path		2013712	0					
ANR	2013774	Identifier	saddr		2013712	0					
ANR	2013775	Identifier	sun_path		2013712	1					
ANR	2013776	Argument	nul_pos - ( char * ) & saddr -> sun_path		2013712	2					
ANR	2013777	AdditiveExpression	nul_pos - ( char * ) & saddr -> sun_path		2013712	0		-			
ANR	2013778	Identifier	nul_pos		2013712	0					
ANR	2013779	CastExpression	( char * ) & saddr -> sun_path		2013712	1					
ANR	2013780	CastTarget	char *		2013712	0					
ANR	2013781	UnaryOperationExpression	& saddr -> sun_path		2013712	1					
ANR	2013782	UnaryOperator	&		2013712	0					
ANR	2013783	PtrMemberAccess	saddr -> sun_path		2013712	1					
ANR	2013784	Identifier	saddr		2013712	0					
ANR	2013785	Identifier	sun_path		2013712	1					
ANR	2013786	ReturnType	static void		2013712	1					
ANR	2013787	Identifier	to_zval_read_sun_path		2013712	2					
ANR	2013788	ParameterList	"const char * data , zval * zv , res_context * ctx"		2013712	3					
ANR	2013789	Parameter	const char * data	668:34:18149:18164	2013712	0	True				
ANR	2013790	ParameterType	const char *		2013712	0					
ANR	2013791	Identifier	data		2013712	1					
ANR	2013792	Parameter	zval * zv	668:52:18167:18174	2013712	1	True				
ANR	2013793	ParameterType	zval *		2013712	0					
ANR	2013794	Identifier	zv		2013712	1					
ANR	2013795	Parameter	res_context * ctx	668:62:18177:18192	2013712	2	True				
ANR	2013796	ParameterType	res_context *		2013712	0					
ANR	2013797	Identifier	ctx		2013712	1					
ANR	2013798	CFGEntryNode	ENTRY		2013712		True				
ANR	2013799	CFGExitNode	EXIT		2013712		True				
ANR	2013800	Symbol	saddr -> sun_path		2013712						
ANR	2013801	Symbol	NULL		2013712						
ANR	2013802	Symbol	data		2013712						
ANR	2013803	Symbol	ctx		2013712						
ANR	2013804	Symbol	saddr		2013712						
ANR	2013805	Symbol	nul_pos		2013712						
ANR	2013806	Symbol	memchr		2013712						
ANR	2013807	Symbol	zv		2013712						
ANR	2013808	Symbol	* saddr		2013712						
ANR	2013809	Symbol	& saddr -> sun_path		2013712						
ANR	2013810	DeclStmt									
ANR	2013811	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_sockaddr_un
ANR	2013812	Function	from_zval_write_sockaddr_un	685:0:18788:18968							
ANR	2013813	FunctionDef	"from_zval_write_sockaddr_un (const zval * container , char * sockaddr , ser_context * ctx)"		2013812	0					
ANR	2013814	CompoundStatement		686:0:18885:18968	2013812	0					
ANR	2013815	ExpressionStatement	"from_zval_write_aggregation ( container , sockaddr , descriptors_sockaddr_un , ctx )"	687:1:18888:18966	2013812	0	True				
ANR	2013816	CallExpression	"from_zval_write_aggregation ( container , sockaddr , descriptors_sockaddr_un , ctx )"		2013812	0					
ANR	2013817	Callee	from_zval_write_aggregation		2013812	0					
ANR	2013818	Identifier	from_zval_write_aggregation		2013812	0					
ANR	2013819	ArgumentList	container		2013812	1					
ANR	2013820	Argument	container		2013812	0					
ANR	2013821	Identifier	container		2013812	0					
ANR	2013822	Argument	sockaddr		2013812	1					
ANR	2013823	Identifier	sockaddr		2013812	0					
ANR	2013824	Argument	descriptors_sockaddr_un		2013812	2					
ANR	2013825	Identifier	descriptors_sockaddr_un		2013812	0					
ANR	2013826	Argument	ctx		2013812	3					
ANR	2013827	Identifier	ctx		2013812	0					
ANR	2013828	ReturnType	static void		2013812	1					
ANR	2013829	Identifier	from_zval_write_sockaddr_un		2013812	2					
ANR	2013830	ParameterList	"const zval * container , char * sockaddr , ser_context * ctx"		2013812	3					
ANR	2013831	Parameter	const zval * container	685:40:18828:18848	2013812	0	True				
ANR	2013832	ParameterType	const zval *		2013812	0					
ANR	2013833	Identifier	container		2013812	1					
ANR	2013834	Parameter	char * sockaddr	685:63:18851:18864	2013812	1	True				
ANR	2013835	ParameterType	char *		2013812	0					
ANR	2013836	Identifier	sockaddr		2013812	1					
ANR	2013837	Parameter	ser_context * ctx	685:79:18867:18882	2013812	2	True				
ANR	2013838	ParameterType	ser_context *		2013812	0					
ANR	2013839	Identifier	ctx		2013812	1					
ANR	2013840	CFGEntryNode	ENTRY		2013812		True				
ANR	2013841	CFGExitNode	EXIT		2013812		True				
ANR	2013842	Symbol	container		2013812						
ANR	2013843	Symbol	descriptors_sockaddr_un		2013812						
ANR	2013844	Symbol	ctx		2013812						
ANR	2013845	Symbol	sockaddr		2013812						
ANR	2013846	Function	to_zval_read_sockaddr_un	689:0:18970:19122							
ANR	2013847	FunctionDef	"to_zval_read_sockaddr_un (const char * data , zval * zv , res_context * ctx)"		2013846	0					
ANR	2013848	CompoundStatement		690:0:19053:19122	2013846	0					
ANR	2013849	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_un , ctx )"	691:1:19056:19120	2013846	0	True				
ANR	2013850	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_sockaddr_un , ctx )"		2013846	0					
ANR	2013851	Callee	to_zval_read_aggregation		2013846	0					
ANR	2013852	Identifier	to_zval_read_aggregation		2013846	0					
ANR	2013853	ArgumentList	data		2013846	1					
ANR	2013854	Argument	data		2013846	0					
ANR	2013855	Identifier	data		2013846	0					
ANR	2013856	Argument	zv		2013846	1					
ANR	2013857	Identifier	zv		2013846	0					
ANR	2013858	Argument	descriptors_sockaddr_un		2013846	2					
ANR	2013859	Identifier	descriptors_sockaddr_un		2013846	0					
ANR	2013860	Argument	ctx		2013846	3					
ANR	2013861	Identifier	ctx		2013846	0					
ANR	2013862	ReturnType	static void		2013846	1					
ANR	2013863	Identifier	to_zval_read_sockaddr_un		2013846	2					
ANR	2013864	ParameterList	"const char * data , zval * zv , res_context * ctx"		2013846	3					
ANR	2013865	Parameter	const char * data	689:37:19007:19022	2013846	0	True				
ANR	2013866	ParameterType	const char *		2013846	0					
ANR	2013867	Identifier	data		2013846	1					
ANR	2013868	Parameter	zval * zv	689:55:19025:19032	2013846	1	True				
ANR	2013869	ParameterType	zval *		2013846	0					
ANR	2013870	Identifier	zv		2013846	1					
ANR	2013871	Parameter	res_context * ctx	689:65:19035:19050	2013846	2	True				
ANR	2013872	ParameterType	res_context *		2013846	0					
ANR	2013873	Identifier	ctx		2013846	1					
ANR	2013874	CFGEntryNode	ENTRY		2013846		True				
ANR	2013875	CFGExitNode	EXIT		2013846		True				
ANR	2013876	Symbol	data		2013846						
ANR	2013877	Symbol	descriptors_sockaddr_un		2013846						
ANR	2013878	Symbol	ctx		2013846						
ANR	2013879	Symbol	zv		2013846						
ANR	2013880	Function	from_zval_write_sockaddr_aux	693:0:19124:22000							
ANR	2013881	FunctionDef	"from_zval_write_sockaddr_aux (const zval * container , struct sockaddr * * sockaddr_ptr , socklen_t * sockaddr_len , ser_context * ctx)"		2013880	0					
ANR	2013882	CompoundStatement		697:0:19296:22000	2013880	0					
ANR	2013883	IdentifierDeclStatement	int family ;	698:1:19299:19310	2013880	0	True				
ANR	2013884	IdentifierDecl	family		2013880	0					
ANR	2013885	IdentifierDeclType	int		2013880	0					
ANR	2013886	Identifier	family		2013880	1					
ANR	2013887	IdentifierDeclStatement	zval * elem ;	699:1:19313:19323	2013880	1	True				
ANR	2013888	IdentifierDecl	* elem		2013880	0					
ANR	2013889	IdentifierDeclType	zval *		2013880	0					
ANR	2013890	Identifier	elem		2013880	1					
ANR	2013891	IdentifierDeclStatement	int fill_sockaddr ;	700:1:19326:19344	2013880	2	True				
ANR	2013892	IdentifierDecl	fill_sockaddr		2013880	0					
ANR	2013893	IdentifierDeclType	int		2013880	0					
ANR	2013894	Identifier	fill_sockaddr		2013880	1					
ANR	2013895	IfStatement	if ( Z_TYPE_P ( container ) != IS_ARRAY )		2013880	3					
ANR	2013896	Condition	Z_TYPE_P ( container ) != IS_ARRAY	702:5:19352:19382	2013880	0	True				
ANR	2013897	EqualityExpression	Z_TYPE_P ( container ) != IS_ARRAY		2013880	0		!=			
ANR	2013898	CallExpression	Z_TYPE_P ( container )		2013880	0					
ANR	2013899	Callee	Z_TYPE_P		2013880	0					
ANR	2013900	Identifier	Z_TYPE_P		2013880	0					
ANR	2013901	ArgumentList	container		2013880	1					
ANR	2013902	Argument	container		2013880	0					
ANR	2013903	Identifier	container		2013880	0					
ANR	2013904	Identifier	IS_ARRAY		2013880	1					
ANR	2013905	CompoundStatement		6:38:88:88	2013880	1					
ANR	2013906	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	703:2:19389:19442	2013880	0	True				
ANR	2013907	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		2013880	0					
ANR	2013908	Callee	do_from_zval_err		2013880	0					
ANR	2013909	Identifier	do_from_zval_err		2013880	0					
ANR	2013910	ArgumentList	ctx		2013880	1					
ANR	2013911	Argument	ctx		2013880	0					
ANR	2013912	Identifier	ctx		2013880	0					
ANR	2013913	Argument	"""%s"""		2013880	1					
ANR	2013914	PrimaryExpression	"""%s"""		2013880	0					
ANR	2013915	Argument	"""expected an array here"""		2013880	2					
ANR	2013916	PrimaryExpression	"""expected an array here"""		2013880	0					
ANR	2013917	ReturnStatement	return ;	704:2:19446:19452	2013880	1	True				
ANR	2013918	ExpressionStatement	"fill_sockaddr = param_get_bool ( ctx , KEY_FILL_SOCKADDR , 1 )"	707:1:19459:19516	2013880	4	True				
ANR	2013919	AssignmentExpression	"fill_sockaddr = param_get_bool ( ctx , KEY_FILL_SOCKADDR , 1 )"		2013880	0		=			
ANR	2013920	Identifier	fill_sockaddr		2013880	0					
ANR	2013921	CallExpression	"param_get_bool ( ctx , KEY_FILL_SOCKADDR , 1 )"		2013880	1					
ANR	2013922	Callee	param_get_bool		2013880	0					
ANR	2013923	Identifier	param_get_bool		2013880	0					
ANR	2013924	ArgumentList	ctx		2013880	1					
ANR	2013925	Argument	ctx		2013880	0					
ANR	2013926	Identifier	ctx		2013880	0					
ANR	2013927	Argument	KEY_FILL_SOCKADDR		2013880	1					
ANR	2013928	Identifier	KEY_FILL_SOCKADDR		2013880	0					
ANR	2013929	Argument	1		2013880	2					
ANR	2013930	PrimaryExpression	1		2013880	0					
ANR	2013931	IfStatement	"if ( ( elem = zend_hash_str_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) - 1 ) ) != NULL && Z_TYPE_P ( elem ) != IS_NULL )"		2013880	5					
ANR	2013932	Condition	"( elem = zend_hash_str_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) - 1 ) ) != NULL && Z_TYPE_P ( elem ) != IS_NULL"	709:5:19524:19645	2013880	0	True				
ANR	2013933	AndExpression	"( elem = zend_hash_str_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) - 1 ) ) != NULL && Z_TYPE_P ( elem ) != IS_NULL"		2013880	0		&&			
ANR	2013934	EqualityExpression	"( elem = zend_hash_str_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) - 1 ) ) != NULL"		2013880	0		!=			
ANR	2013935	AssignmentExpression	"elem = zend_hash_str_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) - 1 )"		2013880	0		=			
ANR	2013936	Identifier	elem		2013880	0					
ANR	2013937	CallExpression	"zend_hash_str_find ( Z_ARRVAL_P ( container ) , ""family"" , sizeof ( ""family"" ) - 1 )"		2013880	1					
ANR	2013938	Callee	zend_hash_str_find		2013880	0					
ANR	2013939	Identifier	zend_hash_str_find		2013880	0					
ANR	2013940	ArgumentList	Z_ARRVAL_P ( container )		2013880	1					
ANR	2013941	Argument	Z_ARRVAL_P ( container )		2013880	0					
ANR	2013942	CallExpression	Z_ARRVAL_P ( container )		2013880	0					
ANR	2013943	Callee	Z_ARRVAL_P		2013880	0					
ANR	2013944	Identifier	Z_ARRVAL_P		2013880	0					
ANR	2013945	ArgumentList	container		2013880	1					
ANR	2013946	Argument	container		2013880	0					
ANR	2013947	Identifier	container		2013880	0					
ANR	2013948	Argument	"""family"""		2013880	1					
ANR	2013949	PrimaryExpression	"""family"""		2013880	0					
ANR	2013950	Argument	"sizeof ( ""family"" ) - 1"		2013880	2					
ANR	2013951	AdditiveExpression	"sizeof ( ""family"" ) - 1"		2013880	0		-			
ANR	2013952	SizeofExpression	"sizeof ( ""family"" )"		2013880	0					
ANR	2013953	Sizeof	sizeof		2013880	0					
ANR	2013954	PrimaryExpression	"""family"""		2013880	1					
ANR	2013955	PrimaryExpression	1		2013880	1					
ANR	2013956	Identifier	NULL		2013880	1					
ANR	2013957	EqualityExpression	Z_TYPE_P ( elem ) != IS_NULL		2013880	1		!=			
ANR	2013958	CallExpression	Z_TYPE_P ( elem )		2013880	0					
ANR	2013959	Callee	Z_TYPE_P		2013880	0					
ANR	2013960	Identifier	Z_TYPE_P		2013880	0					
ANR	2013961	ArgumentList	elem		2013880	1					
ANR	2013962	Argument	elem		2013880	0					
ANR	2013963	Identifier	elem		2013880	0					
ANR	2013964	Identifier	IS_NULL		2013880	1					
ANR	2013965	CompoundStatement		15:2:355:382	2013880	1					
ANR	2013966	IdentifierDeclStatement	"const char * node = ""family"" ;"	711:2:19652:19679	2013880	0	True				
ANR	2013967	IdentifierDecl	"* node = ""family"""		2013880	0					
ANR	2013968	IdentifierDeclType	const char *		2013880	0					
ANR	2013969	Identifier	node		2013880	1					
ANR	2013970	AssignmentExpression	"* node = ""family"""		2013880	2		=			
ANR	2013971	Identifier	node		2013880	0					
ANR	2013972	PrimaryExpression	"""family"""		2013880	1					
ANR	2013973	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , & node )"	712:2:19683:19724	2013880	1	True				
ANR	2013974	CallExpression	"zend_llist_add_element ( & ctx -> keys , & node )"		2013880	0					
ANR	2013975	Callee	zend_llist_add_element		2013880	0					
ANR	2013976	Identifier	zend_llist_add_element		2013880	0					
ANR	2013977	ArgumentList	& ctx -> keys		2013880	1					
ANR	2013978	Argument	& ctx -> keys		2013880	0					
ANR	2013979	UnaryOperationExpression	& ctx -> keys		2013880	0					
ANR	2013980	UnaryOperator	&		2013880	0					
ANR	2013981	PtrMemberAccess	ctx -> keys		2013880	1					
ANR	2013982	Identifier	ctx		2013880	0					
ANR	2013983	Identifier	keys		2013880	1					
ANR	2013984	Argument	& node		2013880	1					
ANR	2013985	UnaryOperationExpression	& node		2013880	0					
ANR	2013986	UnaryOperator	&		2013880	0					
ANR	2013987	Identifier	node		2013880	1					
ANR	2013988	ExpressionStatement	"from_zval_write_int ( elem , ( char * ) & family , ctx )"	713:2:19728:19774	2013880	2	True				
ANR	2013989	CallExpression	"from_zval_write_int ( elem , ( char * ) & family , ctx )"		2013880	0					
ANR	2013990	Callee	from_zval_write_int		2013880	0					
ANR	2013991	Identifier	from_zval_write_int		2013880	0					
ANR	2013992	ArgumentList	elem		2013880	1					
ANR	2013993	Argument	elem		2013880	0					
ANR	2013994	Identifier	elem		2013880	0					
ANR	2013995	Argument	( char * ) & family		2013880	1					
ANR	2013996	CastExpression	( char * ) & family		2013880	0					
ANR	2013997	CastTarget	char *		2013880	0					
ANR	2013998	UnaryOperationExpression	& family		2013880	1					
ANR	2013999	UnaryOperator	&		2013880	0					
ANR	2014000	Identifier	family		2013880	1					
ANR	2014001	Argument	ctx		2013880	2					
ANR	2014002	Identifier	ctx		2013880	0					
ANR	2014003	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	714:2:19778:19812	2013880	3	True				
ANR	2014004	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		2013880	0					
ANR	2014005	Callee	zend_llist_remove_tail		2013880	0					
ANR	2014006	Identifier	zend_llist_remove_tail		2013880	0					
ANR	2014007	ArgumentList	& ctx -> keys		2013880	1					
ANR	2014008	Argument	& ctx -> keys		2013880	0					
ANR	2014009	UnaryOperationExpression	& ctx -> keys		2013880	0					
ANR	2014010	UnaryOperator	&		2013880	0					
ANR	2014011	PtrMemberAccess	ctx -> keys		2013880	1					
ANR	2014012	Identifier	ctx		2013880	0					
ANR	2014013	Identifier	keys		2013880	1					
ANR	2014014	ElseStatement	else		2013880	0					
ANR	2014015	CompoundStatement		19:8:525:525	2013880	0					
ANR	2014016	ExpressionStatement	family = ctx -> sock -> type	716:2:19826:19850	2013880	0	True				
ANR	2014017	AssignmentExpression	family = ctx -> sock -> type		2013880	0		=			
ANR	2014018	Identifier	family		2013880	0					
ANR	2014019	PtrMemberAccess	ctx -> sock -> type		2013880	1					
ANR	2014020	PtrMemberAccess	ctx -> sock		2013880	0					
ANR	2014021	Identifier	ctx		2013880	0					
ANR	2014022	Identifier	sock		2013880	1					
ANR	2014023	Identifier	type		2013880	1					
ANR	2014024	SwitchStatement	switch ( family )		2013880	6					
ANR	2014025	Condition	family	719:9:19865:19870	2013880	0	True				
ANR	2014026	Identifier	family		2013880	0					
ANR	2014027	CompoundStatement		23:17:576:576	2013880	1					
ANR	2014028	Label	case AF_INET :	720:1:19876:19888	2013880	0	True				
ANR	2014029	Identifier	AF_INET		2013880	0					
ANR	2014030	IfStatement	if ( ctx -> sock -> type != AF_INET && ctx -> sock -> type != AF_INET6 )		2013880	1					
ANR	2014031	Condition	ctx -> sock -> type != AF_INET && ctx -> sock -> type != AF_INET6	722:6:19965:20021	2013880	0	True				
ANR	2014032	AndExpression	ctx -> sock -> type != AF_INET && ctx -> sock -> type != AF_INET6		2013880	0		&&			
ANR	2014033	EqualityExpression	ctx -> sock -> type != AF_INET		2013880	0		!=			
ANR	2014034	PtrMemberAccess	ctx -> sock -> type		2013880	0					
ANR	2014035	PtrMemberAccess	ctx -> sock		2013880	0					
ANR	2014036	Identifier	ctx		2013880	0					
ANR	2014037	Identifier	sock		2013880	1					
ANR	2014038	Identifier	type		2013880	1					
ANR	2014039	Identifier	AF_INET		2013880	1					
ANR	2014040	EqualityExpression	ctx -> sock -> type != AF_INET6		2013880	1		!=			
ANR	2014041	PtrMemberAccess	ctx -> sock -> type		2013880	0					
ANR	2014042	PtrMemberAccess	ctx -> sock		2013880	0					
ANR	2014043	Identifier	ctx		2013880	0					
ANR	2014044	Identifier	sock		2013880	1					
ANR	2014045	Identifier	type		2013880	1					
ANR	2014046	Identifier	AF_INET6		2013880	1					
ANR	2014047	CompoundStatement		26:65:727:727	2013880	1					
ANR	2014048	Statement	do_from_zval_err	723:3:20029:20044	2013880	0	True				
ANR	2014049	Statement	(	723:19:20045:20045	2013880	1	True				
ANR	2014050	Statement	ctx	723:20:20046:20048	2013880	2	True				
ANR	2014051	Statement	","	723:23:20049:20049	2013880	3	True				
ANR	2014052	Statement	"""the specified family (number %d) is not """	723:25:20051:20092	2013880	4	True				
ANR	2014053	Statement	"""supported on this socket"""	724:5:20099:20124	2013880	5	True				
ANR	2014054	Statement	","	724:31:20125:20125	2013880	6	True				
ANR	2014055	Statement	family	724:33:20127:20132	2013880	7	True				
ANR	2014056	Statement	)	724:39:20133:20133	2013880	8	True				
ANR	2014057	ExpressionStatement		724:40:20134:20134	2013880	9	True				
ANR	2014058	ReturnStatement	return ;	725:3:20139:20145	2013880	10	True				
ANR	2014059	ExpressionStatement	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in ) , ctx )"	727:2:20153:20222	2013880	2	True				
ANR	2014060	AssignmentExpression	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in ) , ctx )"		2013880	0		=			
ANR	2014061	UnaryOperationExpression	* sockaddr_ptr		2013880	0					
ANR	2014062	UnaryOperator	*		2013880	0					
ANR	2014063	Identifier	sockaddr_ptr		2013880	1					
ANR	2014064	CallExpression	"accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in ) , ctx )"		2013880	1					
ANR	2014065	Callee	accounted_ecalloc		2013880	0					
ANR	2014066	Identifier	accounted_ecalloc		2013880	0					
ANR	2014067	ArgumentList	1		2013880	1					
ANR	2014068	Argument	1		2013880	0					
ANR	2014069	PrimaryExpression	1		2013880	0					
ANR	2014070	Argument	sizeof ( struct sockaddr_in )		2013880	1					
ANR	2014071	SizeofExpression	sizeof ( struct sockaddr_in )		2013880	0					
ANR	2014072	Sizeof	sizeof		2013880	0					
ANR	2014073	SizeofOperand	struct sockaddr_in		2013880	1					
ANR	2014074	Argument	ctx		2013880	2					
ANR	2014075	Identifier	ctx		2013880	0					
ANR	2014076	ExpressionStatement	* sockaddr_len = sizeof ( struct sockaddr_in )	728:2:20226:20268	2013880	3	True				
ANR	2014077	AssignmentExpression	* sockaddr_len = sizeof ( struct sockaddr_in )		2013880	0		=			
ANR	2014078	UnaryOperationExpression	* sockaddr_len		2013880	0					
ANR	2014079	UnaryOperator	*		2013880	0					
ANR	2014080	Identifier	sockaddr_len		2013880	1					
ANR	2014081	SizeofExpression	sizeof ( struct sockaddr_in )		2013880	1					
ANR	2014082	Sizeof	sizeof		2013880	0					
ANR	2014083	SizeofOperand	struct sockaddr_in		2013880	1					
ANR	2014084	IfStatement	if ( fill_sockaddr )		2013880	4					
ANR	2014085	Condition	fill_sockaddr	729:6:20276:20288	2013880	0	True				
ANR	2014086	Identifier	fill_sockaddr		2013880	0					
ANR	2014087	CompoundStatement		33:21:994:994	2013880	1					
ANR	2014088	ExpressionStatement	"from_zval_write_sockaddr_in ( container , ( char * ) * sockaddr_ptr , ctx )"	730:3:20296:20361	2013880	0	True				
ANR	2014089	CallExpression	"from_zval_write_sockaddr_in ( container , ( char * ) * sockaddr_ptr , ctx )"		2013880	0					
ANR	2014090	Callee	from_zval_write_sockaddr_in		2013880	0					
ANR	2014091	Identifier	from_zval_write_sockaddr_in		2013880	0					
ANR	2014092	ArgumentList	container		2013880	1					
ANR	2014093	Argument	container		2013880	0					
ANR	2014094	Identifier	container		2013880	0					
ANR	2014095	Argument	( char * ) * sockaddr_ptr		2013880	1					
ANR	2014096	CastExpression	( char * ) * sockaddr_ptr		2013880	0					
ANR	2014097	CastTarget	char *		2013880	0					
ANR	2014098	UnaryOperationExpression	* sockaddr_ptr		2013880	1					
ANR	2014099	UnaryOperator	*		2013880	0					
ANR	2014100	Identifier	sockaddr_ptr		2013880	1					
ANR	2014101	Argument	ctx		2013880	2					
ANR	2014102	Identifier	ctx		2013880	0					
ANR	2014103	ExpressionStatement	( * sockaddr_ptr ) -> sa_family = AF_INET	731:3:20366:20402	2013880	1	True				
ANR	2014104	AssignmentExpression	( * sockaddr_ptr ) -> sa_family = AF_INET		2013880	0		=			
ANR	2014105	PtrMemberAccess	( * sockaddr_ptr ) -> sa_family		2013880	0					
ANR	2014106	UnaryOperationExpression	* sockaddr_ptr		2013880	0					
ANR	2014107	UnaryOperator	*		2013880	0					
ANR	2014108	Identifier	sockaddr_ptr		2013880	1					
ANR	2014109	Identifier	sa_family		2013880	1					
ANR	2014110	Identifier	AF_INET		2013880	1					
ANR	2014111	BreakStatement	break ;	733:2:20410:20415	2013880	5	True				
ANR	2014112	Label	case AF_INET6 :	736:1:20433:20446	2013880	6	True				
ANR	2014113	Identifier	AF_INET6		2013880	0					
ANR	2014114	IfStatement	if ( ctx -> sock -> type != AF_INET6 )		2013880	7					
ANR	2014115	Condition	ctx -> sock -> type != AF_INET6	737:6:20454:20480	2013880	0	True				
ANR	2014116	EqualityExpression	ctx -> sock -> type != AF_INET6		2013880	0		!=			
ANR	2014117	PtrMemberAccess	ctx -> sock -> type		2013880	0					
ANR	2014118	PtrMemberAccess	ctx -> sock		2013880	0					
ANR	2014119	Identifier	ctx		2013880	0					
ANR	2014120	Identifier	sock		2013880	1					
ANR	2014121	Identifier	type		2013880	1					
ANR	2014122	Identifier	AF_INET6		2013880	1					
ANR	2014123	CompoundStatement		41:35:1186:1186	2013880	1					
ANR	2014124	Statement	do_from_zval_err	738:3:20488:20503	2013880	0	True				
ANR	2014125	Statement	(	738:19:20504:20504	2013880	1	True				
ANR	2014126	Statement	ctx	738:20:20505:20507	2013880	2	True				
ANR	2014127	Statement	","	738:23:20508:20508	2013880	3	True				
ANR	2014128	Statement	"""the specified family (AF_INET6) is not """	738:25:20510:20550	2013880	4	True				
ANR	2014129	Statement	"""supported on this socket"""	739:5:20557:20582	2013880	5	True				
ANR	2014130	Statement	)	739:31:20583:20583	2013880	6	True				
ANR	2014131	ExpressionStatement		739:32:20584:20584	2013880	7	True				
ANR	2014132	ReturnStatement	return ;	740:3:20589:20595	2013880	8	True				
ANR	2014133	ExpressionStatement	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in6 ) , ctx )"	742:2:20603:20673	2013880	8	True				
ANR	2014134	AssignmentExpression	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in6 ) , ctx )"		2013880	0		=			
ANR	2014135	UnaryOperationExpression	* sockaddr_ptr		2013880	0					
ANR	2014136	UnaryOperator	*		2013880	0					
ANR	2014137	Identifier	sockaddr_ptr		2013880	1					
ANR	2014138	CallExpression	"accounted_ecalloc ( 1 , sizeof ( struct sockaddr_in6 ) , ctx )"		2013880	1					
ANR	2014139	Callee	accounted_ecalloc		2013880	0					
ANR	2014140	Identifier	accounted_ecalloc		2013880	0					
ANR	2014141	ArgumentList	1		2013880	1					
ANR	2014142	Argument	1		2013880	0					
ANR	2014143	PrimaryExpression	1		2013880	0					
ANR	2014144	Argument	sizeof ( struct sockaddr_in6 )		2013880	1					
ANR	2014145	SizeofExpression	sizeof ( struct sockaddr_in6 )		2013880	0					
ANR	2014146	Sizeof	sizeof		2013880	0					
ANR	2014147	SizeofOperand	struct sockaddr_in6		2013880	1					
ANR	2014148	Argument	ctx		2013880	2					
ANR	2014149	Identifier	ctx		2013880	0					
ANR	2014150	ExpressionStatement	* sockaddr_len = sizeof ( struct sockaddr_in6 )	743:2:20677:20720	2013880	9	True				
ANR	2014151	AssignmentExpression	* sockaddr_len = sizeof ( struct sockaddr_in6 )		2013880	0		=			
ANR	2014152	UnaryOperationExpression	* sockaddr_len		2013880	0					
ANR	2014153	UnaryOperator	*		2013880	0					
ANR	2014154	Identifier	sockaddr_len		2013880	1					
ANR	2014155	SizeofExpression	sizeof ( struct sockaddr_in6 )		2013880	1					
ANR	2014156	Sizeof	sizeof		2013880	0					
ANR	2014157	SizeofOperand	struct sockaddr_in6		2013880	1					
ANR	2014158	IfStatement	if ( fill_sockaddr )		2013880	10					
ANR	2014159	Condition	fill_sockaddr	744:6:20728:20740	2013880	0	True				
ANR	2014160	Identifier	fill_sockaddr		2013880	0					
ANR	2014161	CompoundStatement		48:21:1446:1446	2013880	1					
ANR	2014162	ExpressionStatement	"from_zval_write_sockaddr_in6 ( container , ( char * ) * sockaddr_ptr , ctx )"	745:3:20748:20814	2013880	0	True				
ANR	2014163	CallExpression	"from_zval_write_sockaddr_in6 ( container , ( char * ) * sockaddr_ptr , ctx )"		2013880	0					
ANR	2014164	Callee	from_zval_write_sockaddr_in6		2013880	0					
ANR	2014165	Identifier	from_zval_write_sockaddr_in6		2013880	0					
ANR	2014166	ArgumentList	container		2013880	1					
ANR	2014167	Argument	container		2013880	0					
ANR	2014168	Identifier	container		2013880	0					
ANR	2014169	Argument	( char * ) * sockaddr_ptr		2013880	1					
ANR	2014170	CastExpression	( char * ) * sockaddr_ptr		2013880	0					
ANR	2014171	CastTarget	char *		2013880	0					
ANR	2014172	UnaryOperationExpression	* sockaddr_ptr		2013880	1					
ANR	2014173	UnaryOperator	*		2013880	0					
ANR	2014174	Identifier	sockaddr_ptr		2013880	1					
ANR	2014175	Argument	ctx		2013880	2					
ANR	2014176	Identifier	ctx		2013880	0					
ANR	2014177	ExpressionStatement	( * sockaddr_ptr ) -> sa_family = AF_INET6	746:3:20819:20856	2013880	1	True				
ANR	2014178	AssignmentExpression	( * sockaddr_ptr ) -> sa_family = AF_INET6		2013880	0		=			
ANR	2014179	PtrMemberAccess	( * sockaddr_ptr ) -> sa_family		2013880	0					
ANR	2014180	UnaryOperationExpression	* sockaddr_ptr		2013880	0					
ANR	2014181	UnaryOperator	*		2013880	0					
ANR	2014182	Identifier	sockaddr_ptr		2013880	1					
ANR	2014183	Identifier	sa_family		2013880	1					
ANR	2014184	Identifier	AF_INET6		2013880	1					
ANR	2014185	BreakStatement	break ;	748:2:20864:20869	2013880	11	True				
ANR	2014186	Label	case AF_UNIX :	751:1:20896:20908	2013880	12	True				
ANR	2014187	Identifier	AF_UNIX		2013880	0					
ANR	2014188	IfStatement	if ( ctx -> sock -> type != AF_UNIX )		2013880	13					
ANR	2014189	Condition	ctx -> sock -> type != AF_UNIX	752:6:20916:20941	2013880	0	True				
ANR	2014190	EqualityExpression	ctx -> sock -> type != AF_UNIX		2013880	0		!=			
ANR	2014191	PtrMemberAccess	ctx -> sock -> type		2013880	0					
ANR	2014192	PtrMemberAccess	ctx -> sock		2013880	0					
ANR	2014193	Identifier	ctx		2013880	0					
ANR	2014194	Identifier	sock		2013880	1					
ANR	2014195	Identifier	type		2013880	1					
ANR	2014196	Identifier	AF_UNIX		2013880	1					
ANR	2014197	CompoundStatement		56:34:1647:1647	2013880	1					
ANR	2014198	Statement	do_from_zval_err	753:3:20949:20964	2013880	0	True				
ANR	2014199	Statement	(	753:19:20965:20965	2013880	1	True				
ANR	2014200	Statement	ctx	753:20:20966:20968	2013880	2	True				
ANR	2014201	Statement	","	753:23:20969:20969	2013880	3	True				
ANR	2014202	Statement	"""the specified family (AF_UNIX) is not """	753:25:20971:21010	2013880	4	True				
ANR	2014203	Statement	"""supported on this socket"""	754:5:21017:21042	2013880	5	True				
ANR	2014204	Statement	)	754:31:21043:21043	2013880	6	True				
ANR	2014205	ExpressionStatement		754:32:21044:21044	2013880	7	True				
ANR	2014206	ReturnStatement	return ;	755:3:21049:21055	2013880	8	True				
ANR	2014207	ExpressionStatement	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_un ) , ctx )"	757:2:21063:21132	2013880	14	True				
ANR	2014208	AssignmentExpression	"* sockaddr_ptr = accounted_ecalloc ( 1 , sizeof ( struct sockaddr_un ) , ctx )"		2013880	0		=			
ANR	2014209	UnaryOperationExpression	* sockaddr_ptr		2013880	0					
ANR	2014210	UnaryOperator	*		2013880	0					
ANR	2014211	Identifier	sockaddr_ptr		2013880	1					
ANR	2014212	CallExpression	"accounted_ecalloc ( 1 , sizeof ( struct sockaddr_un ) , ctx )"		2013880	1					
ANR	2014213	Callee	accounted_ecalloc		2013880	0					
ANR	2014214	Identifier	accounted_ecalloc		2013880	0					
ANR	2014215	ArgumentList	1		2013880	1					
ANR	2014216	Argument	1		2013880	0					
ANR	2014217	PrimaryExpression	1		2013880	0					
ANR	2014218	Argument	sizeof ( struct sockaddr_un )		2013880	1					
ANR	2014219	SizeofExpression	sizeof ( struct sockaddr_un )		2013880	0					
ANR	2014220	Sizeof	sizeof		2013880	0					
ANR	2014221	SizeofOperand	struct sockaddr_un		2013880	1					
ANR	2014222	Argument	ctx		2013880	2					
ANR	2014223	Identifier	ctx		2013880	0					
ANR	2014224	IfStatement	if ( fill_sockaddr )		2013880	15					
ANR	2014225	Condition	fill_sockaddr	758:6:21140:21152	2013880	0	True				
ANR	2014226	Identifier	fill_sockaddr		2013880	0					
ANR	2014227	CompoundStatement		63:3:1863:1927	2013880	1					
ANR	2014228	IdentifierDeclStatement	struct sockaddr_un * sock_un = ( struct sockaddr_un * ) * sockaddr_ptr ;	759:3:21160:21224	2013880	0	True				
ANR	2014229	IdentifierDecl	* sock_un = ( struct sockaddr_un * ) * sockaddr_ptr		2013880	0					
ANR	2014230	IdentifierDeclType	struct sockaddr_un *		2013880	0					
ANR	2014231	Identifier	sock_un		2013880	1					
ANR	2014232	AssignmentExpression	* sock_un = ( struct sockaddr_un * ) * sockaddr_ptr		2013880	2		=			
ANR	2014233	Identifier	sock_un		2013880	0					
ANR	2014234	CastExpression	( struct sockaddr_un * ) * sockaddr_ptr		2013880	1					
ANR	2014235	CastTarget	struct sockaddr_un *		2013880	0					
ANR	2014236	UnaryOperationExpression	* sockaddr_ptr		2013880	1					
ANR	2014237	UnaryOperator	*		2013880	0					
ANR	2014238	Identifier	sockaddr_ptr		2013880	1					
ANR	2014239	ExpressionStatement	"from_zval_write_sockaddr_un ( container , ( char * ) * sockaddr_ptr , ctx )"	761:3:21230:21295	2013880	1	True				
ANR	2014240	CallExpression	"from_zval_write_sockaddr_un ( container , ( char * ) * sockaddr_ptr , ctx )"		2013880	0					
ANR	2014241	Callee	from_zval_write_sockaddr_un		2013880	0					
ANR	2014242	Identifier	from_zval_write_sockaddr_un		2013880	0					
ANR	2014243	ArgumentList	container		2013880	1					
ANR	2014244	Argument	container		2013880	0					
ANR	2014245	Identifier	container		2013880	0					
ANR	2014246	Argument	( char * ) * sockaddr_ptr		2013880	1					
ANR	2014247	CastExpression	( char * ) * sockaddr_ptr		2013880	0					
ANR	2014248	CastTarget	char *		2013880	0					
ANR	2014249	UnaryOperationExpression	* sockaddr_ptr		2013880	1					
ANR	2014250	UnaryOperator	*		2013880	0					
ANR	2014251	Identifier	sockaddr_ptr		2013880	1					
ANR	2014252	Argument	ctx		2013880	2					
ANR	2014253	Identifier	ctx		2013880	0					
ANR	2014254	ExpressionStatement	( * sockaddr_ptr ) -> sa_family = AF_UNIX	762:3:21300:21336	2013880	2	True				
ANR	2014255	AssignmentExpression	( * sockaddr_ptr ) -> sa_family = AF_UNIX		2013880	0		=			
ANR	2014256	PtrMemberAccess	( * sockaddr_ptr ) -> sa_family		2013880	0					
ANR	2014257	UnaryOperationExpression	* sockaddr_ptr		2013880	0					
ANR	2014258	UnaryOperator	*		2013880	0					
ANR	2014259	Identifier	sockaddr_ptr		2013880	1					
ANR	2014260	Identifier	sa_family		2013880	1					
ANR	2014261	Identifier	AF_UNIX		2013880	1					
ANR	2014262	Statement	*	768:3:21623:21623	2013880	3	True				
ANR	2014263	Statement	sockaddr_len	768:4:21624:21635	2013880	4	True				
ANR	2014264	Statement	=	768:17:21637:21637	2013880	5	True				
ANR	2014265	Statement	offsetof	768:19:21639:21646	2013880	6	True				
ANR	2014266	Statement	(	768:27:21647:21647	2013880	7	True				
ANR	2014267	Statement	struct	768:28:21648:21653	2013880	8	True				
ANR	2014268	Statement	sockaddr_un	768:35:21655:21665	2013880	9	True				
ANR	2014269	Statement	","	768:46:21666:21666	2013880	10	True				
ANR	2014270	Statement	sun_path	768:48:21668:21675	2013880	11	True				
ANR	2014271	Statement	)	768:56:21676:21676	2013880	12	True				
ANR	2014272	ExpressionStatement	+ ( sock_un -> sun_path [ 0 ] == '\\0' ? ( 1 + strlen ( & sock_un -> sun_path [ 1 ] ) ) : strlen ( sock_un -> sun_path ) )	768:58:21678:21791	2013880	13	True				
ANR	2014273	UnaryOperationExpression	+ ( sock_un -> sun_path [ 0 ] == '\\0' ? ( 1 + strlen ( & sock_un -> sun_path [ 1 ] ) ) : strlen ( sock_un -> sun_path ) )		2013880	0					
ANR	2014274	UnaryOperator	+		2013880	0					
ANR	2014275	ConditionalExpression	sock_un -> sun_path [ 0 ] == '\\0' ? ( 1 + strlen ( & sock_un -> sun_path [ 1 ] ) ) : strlen ( sock_un -> sun_path )		2013880	1					
ANR	2014276	Condition	sock_un -> sun_path [ 0 ] == '\\0'		2013880	0					
ANR	2014277	EqualityExpression	sock_un -> sun_path [ 0 ] == '\\0'		2013880	0		==			
ANR	2014278	ArrayIndexing	sock_un -> sun_path [ 0 ]		2013880	0					
ANR	2014279	PtrMemberAccess	sock_un -> sun_path		2013880	0					
ANR	2014280	Identifier	sock_un		2013880	0					
ANR	2014281	Identifier	sun_path		2013880	1					
ANR	2014282	PrimaryExpression	0		2013880	1					
ANR	2014283	PrimaryExpression	'\\0'		2013880	1					
ANR	2014284	AdditiveExpression	1 + strlen ( & sock_un -> sun_path [ 1 ] )		2013880	1		+			
ANR	2014285	PrimaryExpression	1		2013880	0					
ANR	2014286	CallExpression	strlen ( & sock_un -> sun_path [ 1 ] )		2013880	1					
ANR	2014287	Callee	strlen		2013880	0					
ANR	2014288	Identifier	strlen		2013880	0					
ANR	2014289	ArgumentList	& sock_un -> sun_path [ 1 ]		2013880	1					
ANR	2014290	Argument	& sock_un -> sun_path [ 1 ]		2013880	0					
ANR	2014291	UnaryOperationExpression	& sock_un -> sun_path [ 1 ]		2013880	0					
ANR	2014292	UnaryOperator	&		2013880	0					
ANR	2014293	ArrayIndexing	sock_un -> sun_path [ 1 ]		2013880	1					
ANR	2014294	PtrMemberAccess	sock_un -> sun_path		2013880	0					
ANR	2014295	Identifier	sock_un		2013880	0					
ANR	2014296	Identifier	sun_path		2013880	1					
ANR	2014297	PrimaryExpression	1		2013880	1					
ANR	2014298	CallExpression	strlen ( sock_un -> sun_path )		2013880	2					
ANR	2014299	Callee	strlen		2013880	0					
ANR	2014300	Identifier	strlen		2013880	0					
ANR	2014301	ArgumentList	sock_un -> sun_path		2013880	1					
ANR	2014302	Argument	sock_un -> sun_path		2013880	0					
ANR	2014303	PtrMemberAccess	sock_un -> sun_path		2013880	0					
ANR	2014304	Identifier	sock_un		2013880	0					
ANR	2014305	Identifier	sun_path		2013880	1					
ANR	2014306	ElseStatement	else		2013880	0					
ANR	2014307	CompoundStatement		76:9:2505:2505	2013880	0					
ANR	2014308	ExpressionStatement	* sockaddr_len = sizeof ( struct sockaddr_un )	773:3:21807:21849	2013880	0	True				
ANR	2014309	AssignmentExpression	* sockaddr_len = sizeof ( struct sockaddr_un )		2013880	0		=			
ANR	2014310	UnaryOperationExpression	* sockaddr_len		2013880	0					
ANR	2014311	UnaryOperator	*		2013880	0					
ANR	2014312	Identifier	sockaddr_len		2013880	1					
ANR	2014313	SizeofExpression	sizeof ( struct sockaddr_un )		2013880	1					
ANR	2014314	Sizeof	sizeof		2013880	0					
ANR	2014315	SizeofOperand	struct sockaddr_un		2013880	1					
ANR	2014316	BreakStatement	break ;	775:2:21857:21862	2013880	16	True				
ANR	2014317	Label	default :	777:1:21866:21873	2013880	17	True				
ANR	2014318	Identifier	default		2013880	0					
ANR	2014319	Statement	do_from_zval_err	778:2:21877:21892	2013880	18	True				
ANR	2014320	Statement	(	778:18:21893:21893	2013880	19	True				
ANR	2014321	Statement	ctx	778:19:21894:21896	2013880	20	True				
ANR	2014322	Statement	","	778:22:21897:21897	2013880	21	True				
ANR	2014323	Statement	"""%s"""	778:24:21899:21902	2013880	22	True				
ANR	2014324	Statement	","	778:28:21903:21903	2013880	23	True				
ANR	2014325	Statement	"""the only families currently supported are """	778:30:21905:21948	2013880	24	True				
ANR	2014326	Statement	"""AF_INET, AF_INET6 and AF_UNIX"""	779:4:21954:21984	2013880	25	True				
ANR	2014327	Statement	)	779:35:21985:21985	2013880	26	True				
ANR	2014328	ExpressionStatement		779:36:21986:21986	2013880	27	True				
ANR	2014329	BreakStatement	break ;	780:2:21990:21995	2013880	28	True				
ANR	2014330	ReturnType	static void		2013880	1					
ANR	2014331	Identifier	from_zval_write_sockaddr_aux		2013880	2					
ANR	2014332	ParameterList	"const zval * container , struct sockaddr * * sockaddr_ptr , socklen_t * sockaddr_len , ser_context * ctx"		2013880	3					
ANR	2014333	Parameter	const zval * container	693:41:19165:19185	2013880	0	True				
ANR	2014334	ParameterType	const zval *		2013880	0					
ANR	2014335	Identifier	container		2013880	1					
ANR	2014336	Parameter	struct sockaddr * * sockaddr_ptr	694:11:19199:19228	2013880	1	True				
ANR	2014337	ParameterType	struct sockaddr * *		2013880	0					
ANR	2014338	Identifier	sockaddr_ptr		2013880	1					
ANR	2014339	Parameter	socklen_t * sockaddr_len	695:11:19242:19264	2013880	2	True				
ANR	2014340	ParameterType	socklen_t *		2013880	0					
ANR	2014341	Identifier	sockaddr_len		2013880	1					
ANR	2014342	Parameter	ser_context * ctx	696:11:19278:19293	2013880	3	True				
ANR	2014343	ParameterType	ser_context *		2013880	0					
ANR	2014344	Identifier	ctx		2013880	1					
ANR	2014345	CFGEntryNode	ENTRY		2013880		True				
ANR	2014346	CFGExitNode	EXIT		2013880		True				
ANR	2014347	Symbol	container		2013880						
ANR	2014348	Symbol	param_get_bool		2013880						
ANR	2014349	Symbol	& ctx -> keys		2013880						
ANR	2014350	Symbol	* sock_un -> sun_path		2013880						
ANR	2014351	Symbol	* ctx -> sock		2013880						
ANR	2014352	Symbol	* * sock_un		2013880						
ANR	2014353	Symbol	* sockaddr_ptr		2013880						
ANR	2014354	Symbol	sock_un		2013880						
ANR	2014355	Symbol	KEY_FILL_SOCKADDR		2013880						
ANR	2014356	Symbol	accounted_ecalloc		2013880						
ANR	2014357	Symbol	& family		2013880						
ANR	2014358	Symbol	zend_hash_str_find		2013880						
ANR	2014359	Symbol	IS_NULL		2013880						
ANR	2014360	Symbol	IS_ARRAY		2013880						
ANR	2014361	Symbol	* sockaddr_len		2013880						
ANR	2014362	Symbol	sock_un -> sun_path		2013880						
ANR	2014363	Symbol	fill_sockaddr		2013880						
ANR	2014364	Symbol	sockaddr_len		2013880						
ANR	2014365	Symbol	Z_ARRVAL_P		2013880						
ANR	2014366	Symbol	ctx -> sock -> type		2013880						
ANR	2014367	Symbol	( * sockaddr_ptr ) -> sa_family		2013880						
ANR	2014368	Symbol	elem		2013880						
ANR	2014369	Symbol	* * sockaddr_ptr		2013880						
ANR	2014370	Symbol	NULL		2013880						
ANR	2014371	Symbol	* sock_un		2013880						
ANR	2014372	Symbol	ctx		2013880						
ANR	2014373	Symbol	AF_UNIX		2013880						
ANR	2014374	Symbol	AF_INET		2013880						
ANR	2014375	Symbol	Z_TYPE_P		2013880						
ANR	2014376	Symbol	* ctx		2013880						
ANR	2014377	Symbol	AF_INET6		2013880						
ANR	2014378	Symbol	node		2013880						
ANR	2014379	Symbol	& node		2013880						
ANR	2014380	Symbol	sockaddr_ptr		2013880						
ANR	2014381	Symbol	ctx -> sock		2013880						
ANR	2014382	Symbol	* * ctx		2013880						
ANR	2014383	Symbol	family		2013880						
ANR	2014384	Function	to_zval_read_sockaddr_aux	783:0:22002:22667							
ANR	2014385	FunctionDef	"to_zval_read_sockaddr_aux (const char * sockaddr_c , zval * zv , res_context * ctx)"		2014384	0					
ANR	2014386	CompoundStatement		784:0:22092:22667	2014384	0					
ANR	2014387	IdentifierDeclStatement	const struct sockaddr * saddr = ( struct sockaddr * ) sockaddr_c ;	785:1:22095:22155	2014384	0	True				
ANR	2014388	IdentifierDecl	* saddr = ( struct sockaddr * ) sockaddr_c		2014384	0					
ANR	2014389	IdentifierDeclType	const struct sockaddr *		2014384	0					
ANR	2014390	Identifier	saddr		2014384	1					
ANR	2014391	AssignmentExpression	* saddr = ( struct sockaddr * ) sockaddr_c		2014384	2		=			
ANR	2014392	Identifier	saddr		2014384	0					
ANR	2014393	CastExpression	( struct sockaddr * ) sockaddr_c		2014384	1					
ANR	2014394	CastTarget	struct sockaddr *		2014384	0					
ANR	2014395	Identifier	sockaddr_c		2014384	1					
ANR	2014396	IfStatement	if ( saddr -> sa_family == 0 )		2014384	1					
ANR	2014397	Condition	saddr -> sa_family == 0	787:5:22163:22183	2014384	0	True				
ANR	2014398	EqualityExpression	saddr -> sa_family == 0		2014384	0		==			
ANR	2014399	PtrMemberAccess	saddr -> sa_family		2014384	0					
ANR	2014400	Identifier	saddr		2014384	0					
ANR	2014401	Identifier	sa_family		2014384	1					
ANR	2014402	PrimaryExpression	0		2014384	1					
ANR	2014403	CompoundStatement		4:28:93:93	2014384	1					
ANR	2014404	ExpressionStatement	ZVAL_NULL ( zv )	788:2:22190:22203	2014384	0	True				
ANR	2014405	CallExpression	ZVAL_NULL ( zv )		2014384	0					
ANR	2014406	Callee	ZVAL_NULL		2014384	0					
ANR	2014407	Identifier	ZVAL_NULL		2014384	0					
ANR	2014408	ArgumentList	zv		2014384	1					
ANR	2014409	Argument	zv		2014384	0					
ANR	2014410	Identifier	zv		2014384	0					
ANR	2014411	ReturnStatement	return ;	789:2:22207:22213	2014384	1	True				
ANR	2014412	ExpressionStatement	array_init ( zv )	792:1:22220:22234	2014384	2	True				
ANR	2014413	CallExpression	array_init ( zv )		2014384	0					
ANR	2014414	Callee	array_init		2014384	0					
ANR	2014415	Identifier	array_init		2014384	0					
ANR	2014416	ArgumentList	zv		2014384	1					
ANR	2014417	Argument	zv		2014384	0					
ANR	2014418	Identifier	zv		2014384	0					
ANR	2014419	SwitchStatement	switch ( saddr -> sa_family )		2014384	3					
ANR	2014420	Condition	saddr -> sa_family	794:9:22246:22261	2014384	0	True				
ANR	2014421	PtrMemberAccess	saddr -> sa_family		2014384	0					
ANR	2014422	Identifier	saddr		2014384	0					
ANR	2014423	Identifier	sa_family		2014384	1					
ANR	2014424	CompoundStatement		11:27:171:171	2014384	1					
ANR	2014425	Label	case AF_INET :	795:1:22267:22279	2014384	0	True				
ANR	2014426	Identifier	AF_INET		2014384	0					
ANR	2014427	ExpressionStatement	"to_zval_read_sockaddr_in ( sockaddr_c , zv , ctx )"	796:2:22283:22328	2014384	1	True				
ANR	2014428	CallExpression	"to_zval_read_sockaddr_in ( sockaddr_c , zv , ctx )"		2014384	0					
ANR	2014429	Callee	to_zval_read_sockaddr_in		2014384	0					
ANR	2014430	Identifier	to_zval_read_sockaddr_in		2014384	0					
ANR	2014431	ArgumentList	sockaddr_c		2014384	1					
ANR	2014432	Argument	sockaddr_c		2014384	0					
ANR	2014433	Identifier	sockaddr_c		2014384	0					
ANR	2014434	Argument	zv		2014384	1					
ANR	2014435	Identifier	zv		2014384	0					
ANR	2014436	Argument	ctx		2014384	2					
ANR	2014437	Identifier	ctx		2014384	0					
ANR	2014438	BreakStatement	break ;	797:2:22332:22337	2014384	2	True				
ANR	2014439	Label	case AF_INET6 :	800:1:22355:22368	2014384	3	True				
ANR	2014440	Identifier	AF_INET6		2014384	0					
ANR	2014441	ExpressionStatement	"to_zval_read_sockaddr_in6 ( sockaddr_c , zv , ctx )"	801:2:22372:22418	2014384	4	True				
ANR	2014442	CallExpression	"to_zval_read_sockaddr_in6 ( sockaddr_c , zv , ctx )"		2014384	0					
ANR	2014443	Callee	to_zval_read_sockaddr_in6		2014384	0					
ANR	2014444	Identifier	to_zval_read_sockaddr_in6		2014384	0					
ANR	2014445	ArgumentList	sockaddr_c		2014384	1					
ANR	2014446	Argument	sockaddr_c		2014384	0					
ANR	2014447	Identifier	sockaddr_c		2014384	0					
ANR	2014448	Argument	zv		2014384	1					
ANR	2014449	Identifier	zv		2014384	0					
ANR	2014450	Argument	ctx		2014384	2					
ANR	2014451	Identifier	ctx		2014384	0					
ANR	2014452	BreakStatement	break ;	802:2:22422:22427	2014384	5	True				
ANR	2014453	Label	case AF_UNIX :	805:1:22454:22466	2014384	6	True				
ANR	2014454	Identifier	AF_UNIX		2014384	0					
ANR	2014455	ExpressionStatement	"to_zval_read_sockaddr_un ( sockaddr_c , zv , ctx )"	806:2:22470:22515	2014384	7	True				
ANR	2014456	CallExpression	"to_zval_read_sockaddr_un ( sockaddr_c , zv , ctx )"		2014384	0					
ANR	2014457	Callee	to_zval_read_sockaddr_un		2014384	0					
ANR	2014458	Identifier	to_zval_read_sockaddr_un		2014384	0					
ANR	2014459	ArgumentList	sockaddr_c		2014384	1					
ANR	2014460	Argument	sockaddr_c		2014384	0					
ANR	2014461	Identifier	sockaddr_c		2014384	0					
ANR	2014462	Argument	zv		2014384	1					
ANR	2014463	Identifier	zv		2014384	0					
ANR	2014464	Argument	ctx		2014384	2					
ANR	2014465	Identifier	ctx		2014384	0					
ANR	2014466	BreakStatement	break ;	807:2:22519:22524	2014384	8	True				
ANR	2014467	Label	default :	809:1:22528:22535	2014384	9	True				
ANR	2014468	Identifier	default		2014384	0					
ANR	2014469	Statement	do_to_zval_err	810:2:22539:22552	2014384	10	True				
ANR	2014470	Statement	(	810:16:22553:22553	2014384	11	True				
ANR	2014471	Statement	ctx	810:17:22554:22556	2014384	12	True				
ANR	2014472	Statement	","	810:20:22557:22557	2014384	13	True				
ANR	2014473	Statement	"""cannot read struct sockaddr with family %d; """	810:22:22559:22604	2014384	14	True				
ANR	2014474	Statement	"""not supported"""	811:4:22610:22624	2014384	15	True				
ANR	2014475	Statement	","	811:19:22625:22625	2014384	16	True				
ANR	2014476	Statement	(	812:4:22631:22631	2014384	17	True				
ANR	2014477	Statement	int	812:5:22632:22634	2014384	18	True				
ANR	2014478	Statement	)	812:8:22635:22635	2014384	19	True				
ANR	2014479	Statement	saddr	812:9:22636:22640	2014384	20	True				
ANR	2014480	Statement	->	812:14:22641:22642	2014384	21	True				
ANR	2014481	Statement	sa_family	812:16:22643:22651	2014384	22	True				
ANR	2014482	Statement	)	812:25:22652:22652	2014384	23	True				
ANR	2014483	ExpressionStatement		812:26:22653:22653	2014384	24	True				
ANR	2014484	BreakStatement	break ;	813:2:22657:22662	2014384	25	True				
ANR	2014485	ReturnType	static void		2014384	1					
ANR	2014486	Identifier	to_zval_read_sockaddr_aux		2014384	2					
ANR	2014487	ParameterList	"const char * sockaddr_c , zval * zv , res_context * ctx"		2014384	3					
ANR	2014488	Parameter	const char * sockaddr_c	783:38:22040:22061	2014384	0	True				
ANR	2014489	ParameterType	const char *		2014384	0					
ANR	2014490	Identifier	sockaddr_c		2014384	1					
ANR	2014491	Parameter	zval * zv	783:62:22064:22071	2014384	1	True				
ANR	2014492	ParameterType	zval *		2014384	0					
ANR	2014493	Identifier	zv		2014384	1					
ANR	2014494	Parameter	res_context * ctx	783:72:22074:22089	2014384	2	True				
ANR	2014495	ParameterType	res_context *		2014384	0					
ANR	2014496	Identifier	ctx		2014384	1					
ANR	2014497	CFGEntryNode	ENTRY		2014384		True				
ANR	2014498	CFGExitNode	EXIT		2014384		True				
ANR	2014499	Symbol	sockaddr_c		2014384						
ANR	2014500	Symbol	ctx		2014384						
ANR	2014501	Symbol	saddr		2014384						
ANR	2014502	Symbol	zv		2014384						
ANR	2014503	Symbol	* saddr		2014384						
ANR	2014504	Symbol	saddr -> sa_family		2014384						
ANR	2014505	Function	from_zval_write_control	827:0:22986:25188							
ANR	2014506	FunctionDef	"from_zval_write_control (const zval * arr , void * * control_buf , zend_llist_element * alloc , size_t * control_len , size_t * offset , ser_context * ctx)"		2014505	0					
ANR	2014507	CompoundStatement		833:0:23199:25188	2014505	0					
ANR	2014508	IdentifierDeclStatement	struct cmsghdr * cmsghdr ;	834:1:23202:23226	2014505	0	True				
ANR	2014509	IdentifierDecl	* cmsghdr		2014505	0					
ANR	2014510	IdentifierDeclType	struct cmsghdr *		2014505	0					
ANR	2014511	Identifier	cmsghdr		2014505	1					
ANR	2014512	IdentifierDeclStatement	"int level , type ;"	835:1:23229:23254	2014505	1	True				
ANR	2014513	IdentifierDecl	level		2014505	0					
ANR	2014514	IdentifierDeclType	int		2014505	0					
ANR	2014515	Identifier	level		2014505	1					
ANR	2014516	IdentifierDecl	type		2014505	1					
ANR	2014517	IdentifierDeclType	int		2014505	0					
ANR	2014518	Identifier	type		2014505	1					
ANR	2014519	IdentifierDeclStatement	"size_t data_len , req_space , space_left ;"	837:1:23257:23310	2014505	2	True				
ANR	2014520	IdentifierDecl	data_len		2014505	0					
ANR	2014521	IdentifierDeclType	size_t		2014505	0					
ANR	2014522	Identifier	data_len		2014505	1					
ANR	2014523	IdentifierDecl	req_space		2014505	1					
ANR	2014524	IdentifierDeclType	size_t		2014505	0					
ANR	2014525	Identifier	req_space		2014505	1					
ANR	2014526	IdentifierDecl	space_left		2014505	2					
ANR	2014527	IdentifierDeclType	size_t		2014505	0					
ANR	2014528	Identifier	space_left		2014505	1					
ANR	2014529	IdentifierDeclStatement	ancillary_reg_entry * entry ;	840:1:23313:23339	2014505	3	True				
ANR	2014530	IdentifierDecl	* entry		2014505	0					
ANR	2014531	IdentifierDeclType	ancillary_reg_entry *		2014505	0					
ANR	2014532	Identifier	entry		2014505	1					
ANR	2014533	Statement	static	842:1:23343:23348	2014505	4	True				
ANR	2014534	IdentifierDeclStatement	"const field_descriptor descriptor_level [ ] = { { ""level"" , sizeof ( ""level"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } } ;"	842:8:23350:23466	2014505	5	True				
ANR	2014535	IdentifierDecl	"descriptor_level [ ] = { { ""level"" , sizeof ( ""level"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } }"		2014505	0					
ANR	2014536	IdentifierDeclType	const field_descriptor [ ]		2014505	0					
ANR	2014537	Identifier	descriptor_level		2014505	1					
ANR	2014538	AssignmentExpression	"descriptor_level [ ] = { { ""level"" , sizeof ( ""level"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } }"		2014505	2		=			
ANR	2014539	Identifier	descriptor_level		2014505	0					
ANR	2014540	InitializerList	"""level"""		2014505	1					
ANR	2014541	InitializerList	"""level"""		2014505	0					
ANR	2014542	PrimaryExpression	"""level"""		2014505	0					
ANR	2014543	SizeofExpression	"sizeof ( ""level"" )"		2014505	1					
ANR	2014544	Sizeof	sizeof		2014505	0					
ANR	2014545	PrimaryExpression	"""level"""		2014505	1					
ANR	2014546	PrimaryExpression	0		2014505	2					
ANR	2014547	PrimaryExpression	0		2014505	3					
ANR	2014548	Identifier	from_zval_write_int		2014505	4					
ANR	2014549	PrimaryExpression	0		2014505	5					
ANR	2014550	InitializerList	0		2014505	1					
ANR	2014551	PrimaryExpression	0		2014505	0					
ANR	2014552	Statement	static	846:1:23469:23474	2014505	6	True				
ANR	2014553	IdentifierDeclStatement	"const field_descriptor descriptor_type [ ] = { { ""type"" , sizeof ( ""type"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } } ;"	846:8:23476:23589	2014505	7	True				
ANR	2014554	IdentifierDecl	"descriptor_type [ ] = { { ""type"" , sizeof ( ""type"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } }"		2014505	0					
ANR	2014555	IdentifierDeclType	const field_descriptor [ ]		2014505	0					
ANR	2014556	Identifier	descriptor_type		2014505	1					
ANR	2014557	AssignmentExpression	"descriptor_type [ ] = { { ""type"" , sizeof ( ""type"" ) , 0 , 0 , from_zval_write_int , 0 } , { 0 } }"		2014505	2		=			
ANR	2014558	Identifier	descriptor_type		2014505	0					
ANR	2014559	InitializerList	"""type"""		2014505	1					
ANR	2014560	InitializerList	"""type"""		2014505	0					
ANR	2014561	PrimaryExpression	"""type"""		2014505	0					
ANR	2014562	SizeofExpression	"sizeof ( ""type"" )"		2014505	1					
ANR	2014563	Sizeof	sizeof		2014505	0					
ANR	2014564	PrimaryExpression	"""type"""		2014505	1					
ANR	2014565	PrimaryExpression	0		2014505	2					
ANR	2014566	PrimaryExpression	0		2014505	3					
ANR	2014567	Identifier	from_zval_write_int		2014505	4					
ANR	2014568	PrimaryExpression	0		2014505	5					
ANR	2014569	InitializerList	0		2014505	1					
ANR	2014570	PrimaryExpression	0		2014505	0					
ANR	2014571	IdentifierDeclStatement	"field_descriptor descriptor_data [ ] = { { ""data"" , sizeof ( ""data"" ) , 0 , 0 , 0 , 0 } , { 0 } } ;"	850:1:23592:23681	2014505	8	True				
ANR	2014572	IdentifierDecl	"descriptor_data [ ] = { { ""data"" , sizeof ( ""data"" ) , 0 , 0 , 0 , 0 } , { 0 } }"		2014505	0					
ANR	2014573	IdentifierDeclType	field_descriptor [ ]		2014505	0					
ANR	2014574	Identifier	descriptor_data		2014505	1					
ANR	2014575	AssignmentExpression	"descriptor_data [ ] = { { ""data"" , sizeof ( ""data"" ) , 0 , 0 , 0 , 0 } , { 0 } }"		2014505	2		=			
ANR	2014576	Identifier	descriptor_data		2014505	0					
ANR	2014577	InitializerList	"""data"""		2014505	1					
ANR	2014578	InitializerList	"""data"""		2014505	0					
ANR	2014579	PrimaryExpression	"""data"""		2014505	0					
ANR	2014580	SizeofExpression	"sizeof ( ""data"" )"		2014505	1					
ANR	2014581	Sizeof	sizeof		2014505	0					
ANR	2014582	PrimaryExpression	"""data"""		2014505	1					
ANR	2014583	PrimaryExpression	0		2014505	2					
ANR	2014584	PrimaryExpression	0		2014505	3					
ANR	2014585	PrimaryExpression	0		2014505	4					
ANR	2014586	PrimaryExpression	0		2014505	5					
ANR	2014587	InitializerList	0		2014505	1					
ANR	2014588	PrimaryExpression	0		2014505	0					
ANR	2014589	ExpressionStatement	"from_zval_write_aggregation ( arr , ( char * ) & level , descriptor_level , ctx )"	855:1:23685:23756	2014505	9	True				
ANR	2014590	CallExpression	"from_zval_write_aggregation ( arr , ( char * ) & level , descriptor_level , ctx )"		2014505	0					
ANR	2014591	Callee	from_zval_write_aggregation		2014505	0					
ANR	2014592	Identifier	from_zval_write_aggregation		2014505	0					
ANR	2014593	ArgumentList	arr		2014505	1					
ANR	2014594	Argument	arr		2014505	0					
ANR	2014595	Identifier	arr		2014505	0					
ANR	2014596	Argument	( char * ) & level		2014505	1					
ANR	2014597	CastExpression	( char * ) & level		2014505	0					
ANR	2014598	CastTarget	char *		2014505	0					
ANR	2014599	UnaryOperationExpression	& level		2014505	1					
ANR	2014600	UnaryOperator	&		2014505	0					
ANR	2014601	Identifier	level		2014505	1					
ANR	2014602	Argument	descriptor_level		2014505	2					
ANR	2014603	Identifier	descriptor_level		2014505	0					
ANR	2014604	Argument	ctx		2014505	3					
ANR	2014605	Identifier	ctx		2014505	0					
ANR	2014606	IfStatement	if ( ctx -> err . has_error )		2014505	10					
ANR	2014607	Condition	ctx -> err . has_error	856:5:23763:23780	2014505	0	True				
ANR	2014608	MemberAccess	ctx -> err . has_error		2014505	0					
ANR	2014609	PtrMemberAccess	ctx -> err		2014505	0					
ANR	2014610	Identifier	ctx		2014505	0					
ANR	2014611	Identifier	err		2014505	1					
ANR	2014612	Identifier	has_error		2014505	1					
ANR	2014613	CompoundStatement		24:25:583:583	2014505	1					
ANR	2014614	ReturnStatement	return ;	857:2:23787:23793	2014505	0	True				
ANR	2014615	ExpressionStatement	"from_zval_write_aggregation ( arr , ( char * ) & type , descriptor_type , ctx )"	859:1:23799:23868	2014505	11	True				
ANR	2014616	CallExpression	"from_zval_write_aggregation ( arr , ( char * ) & type , descriptor_type , ctx )"		2014505	0					
ANR	2014617	Callee	from_zval_write_aggregation		2014505	0					
ANR	2014618	Identifier	from_zval_write_aggregation		2014505	0					
ANR	2014619	ArgumentList	arr		2014505	1					
ANR	2014620	Argument	arr		2014505	0					
ANR	2014621	Identifier	arr		2014505	0					
ANR	2014622	Argument	( char * ) & type		2014505	1					
ANR	2014623	CastExpression	( char * ) & type		2014505	0					
ANR	2014624	CastTarget	char *		2014505	0					
ANR	2014625	UnaryOperationExpression	& type		2014505	1					
ANR	2014626	UnaryOperator	&		2014505	0					
ANR	2014627	Identifier	type		2014505	1					
ANR	2014628	Argument	descriptor_type		2014505	2					
ANR	2014629	Identifier	descriptor_type		2014505	0					
ANR	2014630	Argument	ctx		2014505	3					
ANR	2014631	Identifier	ctx		2014505	0					
ANR	2014632	IfStatement	if ( ctx -> err . has_error )		2014505	12					
ANR	2014633	Condition	ctx -> err . has_error	860:5:23875:23892	2014505	0	True				
ANR	2014634	MemberAccess	ctx -> err . has_error		2014505	0					
ANR	2014635	PtrMemberAccess	ctx -> err		2014505	0					
ANR	2014636	Identifier	ctx		2014505	0					
ANR	2014637	Identifier	err		2014505	1					
ANR	2014638	Identifier	has_error		2014505	1					
ANR	2014639	CompoundStatement		28:25:695:695	2014505	1					
ANR	2014640	ReturnStatement	return ;	861:2:23899:23905	2014505	0	True				
ANR	2014641	ExpressionStatement	"entry = get_ancillary_reg_entry ( level , type )"	864:1:23912:23956	2014505	13	True				
ANR	2014642	AssignmentExpression	"entry = get_ancillary_reg_entry ( level , type )"		2014505	0		=			
ANR	2014643	Identifier	entry		2014505	0					
ANR	2014644	CallExpression	"get_ancillary_reg_entry ( level , type )"		2014505	1					
ANR	2014645	Callee	get_ancillary_reg_entry		2014505	0					
ANR	2014646	Identifier	get_ancillary_reg_entry		2014505	0					
ANR	2014647	ArgumentList	level		2014505	1					
ANR	2014648	Argument	level		2014505	0					
ANR	2014649	Identifier	level		2014505	0					
ANR	2014650	Argument	type		2014505	1					
ANR	2014651	Identifier	type		2014505	0					
ANR	2014652	IfStatement	if ( entry == NULL )		2014505	14					
ANR	2014653	Condition	entry == NULL	865:5:23963:23975	2014505	0	True				
ANR	2014654	EqualityExpression	entry == NULL		2014505	0		==			
ANR	2014655	Identifier	entry		2014505	0					
ANR	2014656	Identifier	NULL		2014505	1					
ANR	2014657	CompoundStatement		33:20:778:778	2014505	1					
ANR	2014658	ExpressionStatement	"do_from_zval_err ( ctx , ""cmsghdr with level %d and type %d not supported"" , level , type )"	866:2:23982:24071	2014505	0	True				
ANR	2014659	CallExpression	"do_from_zval_err ( ctx , ""cmsghdr with level %d and type %d not supported"" , level , type )"		2014505	0					
ANR	2014660	Callee	do_from_zval_err		2014505	0					
ANR	2014661	Identifier	do_from_zval_err		2014505	0					
ANR	2014662	ArgumentList	ctx		2014505	1					
ANR	2014663	Argument	ctx		2014505	0					
ANR	2014664	Identifier	ctx		2014505	0					
ANR	2014665	Argument	"""cmsghdr with level %d and type %d not supported"""		2014505	1					
ANR	2014666	PrimaryExpression	"""cmsghdr with level %d and type %d not supported"""		2014505	0					
ANR	2014667	Argument	level		2014505	2					
ANR	2014668	Identifier	level		2014505	0					
ANR	2014669	Argument	type		2014505	3					
ANR	2014670	Identifier	type		2014505	0					
ANR	2014671	ReturnStatement	return ;	868:2:24075:24081	2014505	1	True				
ANR	2014672	IfStatement	if ( entry -> calc_space )		2014505	15					
ANR	2014673	Condition	entry -> calc_space	871:5:24092:24108	2014505	0	True				
ANR	2014674	PtrMemberAccess	entry -> calc_space		2014505	0					
ANR	2014675	Identifier	entry		2014505	0					
ANR	2014676	Identifier	calc_space		2014505	1					
ANR	2014677	CompoundStatement		40:2:915:930	2014505	1					
ANR	2014678	IdentifierDeclStatement	zval * data_elem ;	872:2:24115:24130	2014505	0	True				
ANR	2014679	IdentifierDecl	* data_elem		2014505	0					
ANR	2014680	IdentifierDeclType	zval *		2014505	0					
ANR	2014681	Identifier	data_elem		2014505	1					
ANR	2014682	IfStatement	"if ( ( data_elem = zend_hash_str_find ( Z_ARRVAL_P ( arr ) , ""data"" , sizeof ( ""data"" ) - 1 ) ) == NULL )"		2014505	1					
ANR	2014683	Condition	"( data_elem = zend_hash_str_find ( Z_ARRVAL_P ( arr ) , ""data"" , sizeof ( ""data"" ) - 1 ) ) == NULL"	874:6:24181:24265	2014505	0	True				
ANR	2014684	EqualityExpression	"( data_elem = zend_hash_str_find ( Z_ARRVAL_P ( arr ) , ""data"" , sizeof ( ""data"" ) - 1 ) ) == NULL"		2014505	0		==			
ANR	2014685	AssignmentExpression	"data_elem = zend_hash_str_find ( Z_ARRVAL_P ( arr ) , ""data"" , sizeof ( ""data"" ) - 1 )"		2014505	0		=			
ANR	2014686	Identifier	data_elem		2014505	0					
ANR	2014687	CallExpression	"zend_hash_str_find ( Z_ARRVAL_P ( arr ) , ""data"" , sizeof ( ""data"" ) - 1 )"		2014505	1					
ANR	2014688	Callee	zend_hash_str_find		2014505	0					
ANR	2014689	Identifier	zend_hash_str_find		2014505	0					
ANR	2014690	ArgumentList	Z_ARRVAL_P ( arr )		2014505	1					
ANR	2014691	Argument	Z_ARRVAL_P ( arr )		2014505	0					
ANR	2014692	CallExpression	Z_ARRVAL_P ( arr )		2014505	0					
ANR	2014693	Callee	Z_ARRVAL_P		2014505	0					
ANR	2014694	Identifier	Z_ARRVAL_P		2014505	0					
ANR	2014695	ArgumentList	arr		2014505	1					
ANR	2014696	Argument	arr		2014505	0					
ANR	2014697	Identifier	arr		2014505	0					
ANR	2014698	Argument	"""data"""		2014505	1					
ANR	2014699	PrimaryExpression	"""data"""		2014505	0					
ANR	2014700	Argument	"sizeof ( ""data"" ) - 1"		2014505	2					
ANR	2014701	AdditiveExpression	"sizeof ( ""data"" ) - 1"		2014505	0		-			
ANR	2014702	SizeofExpression	"sizeof ( ""data"" )"		2014505	0					
ANR	2014703	Sizeof	sizeof		2014505	0					
ANR	2014704	PrimaryExpression	"""data"""		2014505	1					
ANR	2014705	PrimaryExpression	1		2014505	1					
ANR	2014706	Identifier	NULL		2014505	1					
ANR	2014707	CompoundStatement		42:93:1068:1068	2014505	1					
ANR	2014708	ExpressionStatement	"do_from_zval_err ( ctx , ""cmsghdr should have a 'data' element here"" )"	875:3:24273:24339	2014505	0	True				
ANR	2014709	CallExpression	"do_from_zval_err ( ctx , ""cmsghdr should have a 'data' element here"" )"		2014505	0					
ANR	2014710	Callee	do_from_zval_err		2014505	0					
ANR	2014711	Identifier	do_from_zval_err		2014505	0					
ANR	2014712	ArgumentList	ctx		2014505	1					
ANR	2014713	Argument	ctx		2014505	0					
ANR	2014714	Identifier	ctx		2014505	0					
ANR	2014715	Argument	"""cmsghdr should have a 'data' element here"""		2014505	1					
ANR	2014716	PrimaryExpression	"""cmsghdr should have a 'data' element here"""		2014505	0					
ANR	2014717	ReturnStatement	return ;	876:3:24344:24350	2014505	1	True				
ANR	2014718	ExpressionStatement	"data_len = entry -> calc_space ( data_elem , ctx )"	878:2:24358:24402	2014505	2	True				
ANR	2014719	AssignmentExpression	"data_len = entry -> calc_space ( data_elem , ctx )"		2014505	0		=			
ANR	2014720	Identifier	data_len		2014505	0					
ANR	2014721	CallExpression	"entry -> calc_space ( data_elem , ctx )"		2014505	1					
ANR	2014722	Callee	entry -> calc_space		2014505	0					
ANR	2014723	PtrMemberAccess	entry -> calc_space		2014505	0					
ANR	2014724	Identifier	entry		2014505	0					
ANR	2014725	Identifier	calc_space		2014505	1					
ANR	2014726	ArgumentList	data_elem		2014505	1					
ANR	2014727	Argument	data_elem		2014505	0					
ANR	2014728	Identifier	data_elem		2014505	0					
ANR	2014729	Argument	ctx		2014505	1					
ANR	2014730	Identifier	ctx		2014505	0					
ANR	2014731	IfStatement	if ( ctx -> err . has_error )		2014505	3					
ANR	2014732	Condition	ctx -> err . has_error	879:6:24410:24427	2014505	0	True				
ANR	2014733	MemberAccess	ctx -> err . has_error		2014505	0					
ANR	2014734	PtrMemberAccess	ctx -> err		2014505	0					
ANR	2014735	Identifier	ctx		2014505	0					
ANR	2014736	Identifier	err		2014505	1					
ANR	2014737	Identifier	has_error		2014505	1					
ANR	2014738	CompoundStatement		47:26:1230:1230	2014505	1					
ANR	2014739	ReturnStatement	return ;	880:3:24435:24441	2014505	0	True				
ANR	2014740	ElseStatement	else		2014505	0					
ANR	2014741	CompoundStatement		50:8:1255:1255	2014505	0					
ANR	2014742	ExpressionStatement	data_len = entry -> size	883:2:24459:24481	2014505	0	True				
ANR	2014743	AssignmentExpression	data_len = entry -> size		2014505	0		=			
ANR	2014744	Identifier	data_len		2014505	0					
ANR	2014745	PtrMemberAccess	entry -> size		2014505	1					
ANR	2014746	Identifier	entry		2014505	0					
ANR	2014747	Identifier	size		2014505	1					
ANR	2014748	ExpressionStatement	req_space = CMSG_SPACE ( data_len )	885:1:24487:24519	2014505	16	True				
ANR	2014749	AssignmentExpression	req_space = CMSG_SPACE ( data_len )		2014505	0		=			
ANR	2014750	Identifier	req_space		2014505	0					
ANR	2014751	CallExpression	CMSG_SPACE ( data_len )		2014505	1					
ANR	2014752	Callee	CMSG_SPACE		2014505	0					
ANR	2014753	Identifier	CMSG_SPACE		2014505	0					
ANR	2014754	ArgumentList	data_len		2014505	1					
ANR	2014755	Argument	data_len		2014505	0					
ANR	2014756	Identifier	data_len		2014505	0					
ANR	2014757	ExpressionStatement	space_left = * control_len - * offset	886:1:24522:24557	2014505	17	True				
ANR	2014758	AssignmentExpression	space_left = * control_len - * offset		2014505	0		=			
ANR	2014759	Identifier	space_left		2014505	0					
ANR	2014760	AdditiveExpression	* control_len - * offset		2014505	1		-			
ANR	2014761	UnaryOperationExpression	* control_len		2014505	0					
ANR	2014762	UnaryOperator	*		2014505	0					
ANR	2014763	Identifier	control_len		2014505	1					
ANR	2014764	UnaryOperationExpression	* offset		2014505	1					
ANR	2014765	UnaryOperator	*		2014505	0					
ANR	2014766	Identifier	offset		2014505	1					
ANR	2014767	ExpressionStatement	assert ( * control_len >= * offset )	887:1:24560:24591	2014505	18	True				
ANR	2014768	CallExpression	assert ( * control_len >= * offset )		2014505	0					
ANR	2014769	Callee	assert		2014505	0					
ANR	2014770	Identifier	assert		2014505	0					
ANR	2014771	ArgumentList	* control_len >= * offset		2014505	1					
ANR	2014772	Argument	* control_len >= * offset		2014505	0					
ANR	2014773	RelationalExpression	* control_len >= * offset		2014505	0		>=			
ANR	2014774	UnaryOperationExpression	* control_len		2014505	0					
ANR	2014775	UnaryOperator	*		2014505	0					
ANR	2014776	Identifier	control_len		2014505	1					
ANR	2014777	UnaryOperationExpression	* offset		2014505	1					
ANR	2014778	UnaryOperator	*		2014505	0					
ANR	2014779	Identifier	offset		2014505	1					
ANR	2014780	IfStatement	if ( space_left < req_space )		2014505	19					
ANR	2014781	Condition	space_left < req_space	889:5:24599:24620	2014505	0	True				
ANR	2014782	RelationalExpression	space_left < req_space		2014505	0		<			
ANR	2014783	Identifier	space_left		2014505	0					
ANR	2014784	Identifier	req_space		2014505	1					
ANR	2014785	CompoundStatement		57:29:1423:1423	2014505	1					
ANR	2014786	ExpressionStatement	"* control_buf = safe_erealloc ( * control_buf , 2 , req_space , * control_len )"	890:2:24627:24697	2014505	0	True				
ANR	2014787	AssignmentExpression	"* control_buf = safe_erealloc ( * control_buf , 2 , req_space , * control_len )"		2014505	0		=			
ANR	2014788	UnaryOperationExpression	* control_buf		2014505	0					
ANR	2014789	UnaryOperator	*		2014505	0					
ANR	2014790	Identifier	control_buf		2014505	1					
ANR	2014791	CallExpression	"safe_erealloc ( * control_buf , 2 , req_space , * control_len )"		2014505	1					
ANR	2014792	Callee	safe_erealloc		2014505	0					
ANR	2014793	Identifier	safe_erealloc		2014505	0					
ANR	2014794	ArgumentList	* control_buf		2014505	1					
ANR	2014795	Argument	* control_buf		2014505	0					
ANR	2014796	UnaryOperationExpression	* control_buf		2014505	0					
ANR	2014797	UnaryOperator	*		2014505	0					
ANR	2014798	Identifier	control_buf		2014505	1					
ANR	2014799	Argument	2		2014505	1					
ANR	2014800	PrimaryExpression	2		2014505	0					
ANR	2014801	Argument	req_space		2014505	2					
ANR	2014802	Identifier	req_space		2014505	0					
ANR	2014803	Argument	* control_len		2014505	3					
ANR	2014804	UnaryOperationExpression	* control_len		2014505	0					
ANR	2014805	UnaryOperator	*		2014505	0					
ANR	2014806	Identifier	control_len		2014505	1					
ANR	2014807	ExpressionStatement	* control_len += 2 * req_space	891:2:24701:24730	2014505	1	True				
ANR	2014808	AssignmentExpression	* control_len += 2 * req_space		2014505	0		+=			
ANR	2014809	UnaryOperationExpression	* control_len		2014505	0					
ANR	2014810	UnaryOperator	*		2014505	0					
ANR	2014811	Identifier	control_len		2014505	1					
ANR	2014812	MultiplicativeExpression	2 * req_space		2014505	1		*			
ANR	2014813	PrimaryExpression	2		2014505	0					
ANR	2014814	Identifier	req_space		2014505	1					
ANR	2014815	ExpressionStatement	"memset ( ( char * ) * control_buf + * offset , '\\0' , * control_len - * offset )"	892:2:24734:24802	2014505	2	True				
ANR	2014816	CallExpression	"memset ( ( char * ) * control_buf + * offset , '\\0' , * control_len - * offset )"		2014505	0					
ANR	2014817	Callee	memset		2014505	0					
ANR	2014818	Identifier	memset		2014505	0					
ANR	2014819	ArgumentList	( char * ) * control_buf + * offset		2014505	1					
ANR	2014820	Argument	( char * ) * control_buf + * offset		2014505	0					
ANR	2014821	AdditiveExpression	( char * ) * control_buf + * offset		2014505	0		+			
ANR	2014822	CastExpression	( char * ) * control_buf		2014505	0					
ANR	2014823	CastTarget	char *		2014505	0					
ANR	2014824	UnaryOperationExpression	* control_buf		2014505	1					
ANR	2014825	UnaryOperator	*		2014505	0					
ANR	2014826	Identifier	control_buf		2014505	1					
ANR	2014827	UnaryOperationExpression	* offset		2014505	1					
ANR	2014828	UnaryOperator	*		2014505	0					
ANR	2014829	Identifier	offset		2014505	1					
ANR	2014830	Argument	'\\0'		2014505	1					
ANR	2014831	PrimaryExpression	'\\0'		2014505	0					
ANR	2014832	Argument	* control_len - * offset		2014505	2					
ANR	2014833	AdditiveExpression	* control_len - * offset		2014505	0		-			
ANR	2014834	UnaryOperationExpression	* control_len		2014505	0					
ANR	2014835	UnaryOperator	*		2014505	0					
ANR	2014836	Identifier	control_len		2014505	1					
ANR	2014837	UnaryOperationExpression	* offset		2014505	1					
ANR	2014838	UnaryOperator	*		2014505	0					
ANR	2014839	Identifier	offset		2014505	1					
ANR	2014840	ExpressionStatement	"memcpy ( & alloc -> data , control_buf , sizeof * control_buf )"	893:2:24806:24860	2014505	3	True				
ANR	2014841	CallExpression	"memcpy ( & alloc -> data , control_buf , sizeof * control_buf )"		2014505	0					
ANR	2014842	Callee	memcpy		2014505	0					
ANR	2014843	Identifier	memcpy		2014505	0					
ANR	2014844	ArgumentList	& alloc -> data		2014505	1					
ANR	2014845	Argument	& alloc -> data		2014505	0					
ANR	2014846	UnaryOperationExpression	& alloc -> data		2014505	0					
ANR	2014847	UnaryOperator	&		2014505	0					
ANR	2014848	PtrMemberAccess	alloc -> data		2014505	1					
ANR	2014849	Identifier	alloc		2014505	0					
ANR	2014850	Identifier	data		2014505	1					
ANR	2014851	Argument	control_buf		2014505	1					
ANR	2014852	Identifier	control_buf		2014505	0					
ANR	2014853	Argument	sizeof * control_buf		2014505	2					
ANR	2014854	SizeofExpression	sizeof * control_buf		2014505	0					
ANR	2014855	Sizeof	sizeof		2014505	0					
ANR	2014856	UnaryOperationExpression	* control_buf		2014505	1					
ANR	2014857	UnaryOperator	*		2014505	0					
ANR	2014858	Identifier	control_buf		2014505	1					
ANR	2014859	ExpressionStatement	cmsghdr = ( struct cmsghdr * ) ( ( ( char * ) * control_buf ) + * offset )	896:1:24867:24927	2014505	20	True				
ANR	2014860	AssignmentExpression	cmsghdr = ( struct cmsghdr * ) ( ( ( char * ) * control_buf ) + * offset )		2014505	0		=			
ANR	2014861	Identifier	cmsghdr		2014505	0					
ANR	2014862	CastExpression	( struct cmsghdr * ) ( ( ( char * ) * control_buf ) + * offset )		2014505	1					
ANR	2014863	CastTarget	struct cmsghdr *		2014505	0					
ANR	2014864	AdditiveExpression	( ( char * ) * control_buf ) + * offset		2014505	1		+			
ANR	2014865	CastExpression	( char * ) * control_buf		2014505	0					
ANR	2014866	CastTarget	char *		2014505	0					
ANR	2014867	UnaryOperationExpression	* control_buf		2014505	1					
ANR	2014868	UnaryOperator	*		2014505	0					
ANR	2014869	Identifier	control_buf		2014505	1					
ANR	2014870	UnaryOperationExpression	* offset		2014505	1					
ANR	2014871	UnaryOperator	*		2014505	0					
ANR	2014872	Identifier	offset		2014505	1					
ANR	2014873	ExpressionStatement	cmsghdr -> cmsg_level = level	897:1:24930:24957	2014505	21	True				
ANR	2014874	AssignmentExpression	cmsghdr -> cmsg_level = level		2014505	0		=			
ANR	2014875	PtrMemberAccess	cmsghdr -> cmsg_level		2014505	0					
ANR	2014876	Identifier	cmsghdr		2014505	0					
ANR	2014877	Identifier	cmsg_level		2014505	1					
ANR	2014878	Identifier	level		2014505	1					
ANR	2014879	ExpressionStatement	cmsghdr -> cmsg_type = type	898:1:24960:24985	2014505	22	True				
ANR	2014880	AssignmentExpression	cmsghdr -> cmsg_type = type		2014505	0		=			
ANR	2014881	PtrMemberAccess	cmsghdr -> cmsg_type		2014505	0					
ANR	2014882	Identifier	cmsghdr		2014505	0					
ANR	2014883	Identifier	cmsg_type		2014505	1					
ANR	2014884	Identifier	type		2014505	1					
ANR	2014885	ExpressionStatement	cmsghdr -> cmsg_len = CMSG_LEN ( data_len )	899:1:24988:25026	2014505	23	True				
ANR	2014886	AssignmentExpression	cmsghdr -> cmsg_len = CMSG_LEN ( data_len )		2014505	0		=			
ANR	2014887	PtrMemberAccess	cmsghdr -> cmsg_len		2014505	0					
ANR	2014888	Identifier	cmsghdr		2014505	0					
ANR	2014889	Identifier	cmsg_len		2014505	1					
ANR	2014890	CallExpression	CMSG_LEN ( data_len )		2014505	1					
ANR	2014891	Callee	CMSG_LEN		2014505	0					
ANR	2014892	Identifier	CMSG_LEN		2014505	0					
ANR	2014893	ArgumentList	data_len		2014505	1					
ANR	2014894	Argument	data_len		2014505	0					
ANR	2014895	Identifier	data_len		2014505	0					
ANR	2014896	ExpressionStatement	descriptor_data [ 0 ] . from_zval = entry -> from_array	901:1:25030:25078	2014505	24	True				
ANR	2014897	AssignmentExpression	descriptor_data [ 0 ] . from_zval = entry -> from_array		2014505	0		=			
ANR	2014898	MemberAccess	descriptor_data [ 0 ] . from_zval		2014505	0					
ANR	2014899	ArrayIndexing	descriptor_data [ 0 ]		2014505	0					
ANR	2014900	Identifier	descriptor_data		2014505	0					
ANR	2014901	PrimaryExpression	0		2014505	1					
ANR	2014902	Identifier	from_zval		2014505	1					
ANR	2014903	PtrMemberAccess	entry -> from_array		2014505	1					
ANR	2014904	Identifier	entry		2014505	0					
ANR	2014905	Identifier	from_array		2014505	1					
ANR	2014906	ExpressionStatement	"from_zval_write_aggregation ( arr , ( char * ) CMSG_DATA ( cmsghdr ) , descriptor_data , ctx )"	902:1:25081:25162	2014505	25	True				
ANR	2014907	CallExpression	"from_zval_write_aggregation ( arr , ( char * ) CMSG_DATA ( cmsghdr ) , descriptor_data , ctx )"		2014505	0					
ANR	2014908	Callee	from_zval_write_aggregation		2014505	0					
ANR	2014909	Identifier	from_zval_write_aggregation		2014505	0					
ANR	2014910	ArgumentList	arr		2014505	1					
ANR	2014911	Argument	arr		2014505	0					
ANR	2014912	Identifier	arr		2014505	0					
ANR	2014913	Argument	( char * ) CMSG_DATA ( cmsghdr )		2014505	1					
ANR	2014914	CastExpression	( char * ) CMSG_DATA ( cmsghdr )		2014505	0					
ANR	2014915	CastTarget	char *		2014505	0					
ANR	2014916	CallExpression	CMSG_DATA ( cmsghdr )		2014505	1					
ANR	2014917	Callee	CMSG_DATA		2014505	0					
ANR	2014918	Identifier	CMSG_DATA		2014505	0					
ANR	2014919	ArgumentList	cmsghdr		2014505	1					
ANR	2014920	Argument	cmsghdr		2014505	0					
ANR	2014921	Identifier	cmsghdr		2014505	0					
ANR	2014922	Argument	descriptor_data		2014505	2					
ANR	2014923	Identifier	descriptor_data		2014505	0					
ANR	2014924	Argument	ctx		2014505	3					
ANR	2014925	Identifier	ctx		2014505	0					
ANR	2014926	ExpressionStatement	* offset += req_space	904:1:25166:25186	2014505	26	True				
ANR	2014927	AssignmentExpression	* offset += req_space		2014505	0		+=			
ANR	2014928	UnaryOperationExpression	* offset		2014505	0					
ANR	2014929	UnaryOperator	*		2014505	0					
ANR	2014930	Identifier	offset		2014505	1					
ANR	2014931	Identifier	req_space		2014505	1					
ANR	2014932	ReturnType	static void		2014505	1					
ANR	2014933	Identifier	from_zval_write_control		2014505	2					
ANR	2014934	ParameterList	"const zval * arr , void * * control_buf , zend_llist_element * alloc , size_t * control_len , size_t * offset , ser_context * ctx"		2014505	3					
ANR	2014935	Parameter	const zval * arr	827:36:23022:23038	2014505	0	True				
ANR	2014936	ParameterType	const zval *		2014505	0					
ANR	2014937	Identifier	arr		2014505	1					
ANR	2014938	Parameter	void * * control_buf	828:9:23050:23070	2014505	1	True				
ANR	2014939	ParameterType	void * *		2014505	0					
ANR	2014940	Identifier	control_buf		2014505	1					
ANR	2014941	Parameter	zend_llist_element * alloc	829:9:23082:23106	2014505	2	True				
ANR	2014942	ParameterType	zend_llist_element *		2014505	0					
ANR	2014943	Identifier	alloc		2014505	1					
ANR	2014944	Parameter	size_t * control_len	830:9:23118:23139	2014505	3	True				
ANR	2014945	ParameterType	size_t *		2014505	0					
ANR	2014946	Identifier	control_len		2014505	1					
ANR	2014947	Parameter	size_t * offset	831:9:23151:23167	2014505	4	True				
ANR	2014948	ParameterType	size_t *		2014505	0					
ANR	2014949	Identifier	offset		2014505	1					
ANR	2014950	Parameter	ser_context * ctx	832:9:23179:23196	2014505	5	True				
ANR	2014951	ParameterType	ser_context *		2014505	0					
ANR	2014952	Identifier	ctx		2014505	1					
ANR	2014953	CFGEntryNode	ENTRY		2014505		True				
ANR	2014954	CFGExitNode	EXIT		2014505		True				
ANR	2014955	Symbol	descriptor_data		2014505						
ANR	2014956	Symbol	CMSG_DATA		2014505						
ANR	2014957	Symbol	* control_len		2014505						
ANR	2014958	Symbol	cmsghdr -> cmsg_level		2014505						
ANR	2014959	Symbol	descriptor_type		2014505						
ANR	2014960	Symbol	type		2014505						
ANR	2014961	Symbol	ctx -> err		2014505						
ANR	2014962	Symbol	* descriptor_data		2014505						
ANR	2014963	Symbol	CMSG_LEN		2014505						
ANR	2014964	Symbol	entry -> from_array		2014505						
ANR	2014965	Symbol	zend_hash_str_find		2014505						
ANR	2014966	Symbol	data_elem		2014505						
ANR	2014967	Symbol	entry -> calc_space		2014505						
ANR	2014968	Symbol	CMSG_SPACE		2014505						
ANR	2014969	Symbol	control_buf		2014505						
ANR	2014970	Symbol	Z_ARRVAL_P		2014505						
ANR	2014971	Symbol	& alloc -> data		2014505						
ANR	2014972	Symbol	* entry		2014505						
ANR	2014973	Symbol	arr		2014505						
ANR	2014974	Symbol	* control_buf		2014505						
ANR	2014975	Symbol	& level		2014505						
ANR	2014976	Symbol	NULL		2014505						
ANR	2014977	Symbol	offset		2014505						
ANR	2014978	Symbol	level		2014505						
ANR	2014979	Symbol	& type		2014505						
ANR	2014980	Symbol	ctx		2014505						
ANR	2014981	Symbol	safe_erealloc		2014505						
ANR	2014982	Symbol	data_len		2014505						
ANR	2014983	Symbol	ctx -> err . has_error		2014505						
ANR	2014984	Symbol	descriptor_data [ 0 ] . from_zval		2014505						
ANR	2014985	Symbol	* ctx		2014505						
ANR	2014986	Symbol	* cmsghdr		2014505						
ANR	2014987	Symbol	req_space		2014505						
ANR	2014988	Symbol	space_left		2014505						
ANR	2014989	Symbol	entry		2014505						
ANR	2014990	Symbol	get_ancillary_reg_entry		2014505						
ANR	2014991	Symbol	from_zval_write_int		2014505						
ANR	2014992	Symbol	cmsghdr -> cmsg_len		2014505						
ANR	2014993	Symbol	entry -> size		2014505						
ANR	2014994	Symbol	cmsghdr		2014505						
ANR	2014995	Symbol	cmsghdr -> cmsg_type		2014505						
ANR	2014996	Symbol	descriptor_level		2014505						
ANR	2014997	Symbol	* offset		2014505						
ANR	2014998	Symbol	control_len		2014505						
ANR	2014999	Symbol	alloc		2014505						
ANR	2015000	Function	from_zval_write_control_array	906:0:25190:26502							
ANR	2015001	FunctionDef	"from_zval_write_control_array (const zval * arr , char * msghdr_c , ser_context * ctx)"		2015000	0					
ANR	2015002	CompoundStatement		907:0:25283:26502	2015000	0					
ANR	2015003	IdentifierDeclStatement	"char buf [ sizeof ( ""element #4294967295"" ) ] ;"	908:1:25286:25328	2015000	0	True				
ANR	2015004	IdentifierDecl	"buf [ sizeof ( ""element #4294967295"" ) ]"		2015000	0					
ANR	2015005	IdentifierDeclType	"char [ sizeof ( ""element #4294967295"" ) ]"		2015000	0					
ANR	2015006	Identifier	buf		2015000	1					
ANR	2015007	SizeofExpression	"sizeof ( ""element #4294967295"" )"		2015000	2					
ANR	2015008	Sizeof	sizeof		2015000	0					
ANR	2015009	PrimaryExpression	"""element #4294967295"""		2015000	1					
ANR	2015010	IdentifierDeclStatement	char * bufp = buf ;	909:1:25331:25350	2015000	1	True				
ANR	2015011	IdentifierDecl	* bufp = buf		2015000	0					
ANR	2015012	IdentifierDeclType	char *		2015000	0					
ANR	2015013	Identifier	bufp		2015000	1					
ANR	2015014	AssignmentExpression	* bufp = buf		2015000	2		=			
ANR	2015015	Identifier	buf		2015000	0					
ANR	2015016	Identifier	buf		2015000	1					
ANR	2015017	IdentifierDeclStatement	zval * elem ;	910:1:25353:25366	2015000	2	True				
ANR	2015018	IdentifierDecl	* elem		2015000	0					
ANR	2015019	IdentifierDeclType	zval *		2015000	0					
ANR	2015020	Identifier	elem		2015000	1					
ANR	2015021	IdentifierDeclStatement	uint32_t i = 0 ;	911:1:25369:25385	2015000	3	True				
ANR	2015022	IdentifierDecl	i = 0		2015000	0					
ANR	2015023	IdentifierDeclType	uint32_t		2015000	0					
ANR	2015024	Identifier	i		2015000	1					
ANR	2015025	AssignmentExpression	i = 0		2015000	2		=			
ANR	2015026	Identifier	i		2015000	0					
ANR	2015027	PrimaryExpression	0		2015000	1					
ANR	2015028	IdentifierDeclStatement	int num_elems ;	912:1:25388:25405	2015000	4	True				
ANR	2015029	IdentifierDecl	num_elems		2015000	0					
ANR	2015030	IdentifierDeclType	int		2015000	0					
ANR	2015031	Identifier	num_elems		2015000	1					
ANR	2015032	IdentifierDeclStatement	void * control_buf ;	913:1:25408:25428	2015000	5	True				
ANR	2015033	IdentifierDecl	* control_buf		2015000	0					
ANR	2015034	IdentifierDeclType	void *		2015000	0					
ANR	2015035	Identifier	control_buf		2015000	1					
ANR	2015036	IdentifierDeclStatement	zend_llist_element * alloc ;	914:1:25431:25456	2015000	6	True				
ANR	2015037	IdentifierDecl	* alloc		2015000	0					
ANR	2015038	IdentifierDeclType	zend_llist_element *		2015000	0					
ANR	2015039	Identifier	alloc		2015000	1					
ANR	2015040	IdentifierDeclStatement	"size_t control_len , cur_offset ;"	915:1:25459:25498	2015000	7	True				
ANR	2015041	IdentifierDecl	control_len		2015000	0					
ANR	2015042	IdentifierDeclType	size_t		2015000	0					
ANR	2015043	Identifier	control_len		2015000	1					
ANR	2015044	IdentifierDecl	cur_offset		2015000	1					
ANR	2015045	IdentifierDeclType	size_t		2015000	0					
ANR	2015046	Identifier	cur_offset		2015000	1					
ANR	2015047	IdentifierDeclStatement	struct msghdr * msg = ( struct msghdr * ) msghdr_c ;	917:1:25501:25547	2015000	8	True				
ANR	2015048	IdentifierDecl	* msg = ( struct msghdr * ) msghdr_c		2015000	0					
ANR	2015049	IdentifierDeclType	struct msghdr *		2015000	0					
ANR	2015050	Identifier	msg		2015000	1					
ANR	2015051	AssignmentExpression	* msg = ( struct msghdr * ) msghdr_c		2015000	2		=			
ANR	2015052	Identifier	msg		2015000	0					
ANR	2015053	CastExpression	( struct msghdr * ) msghdr_c		2015000	1					
ANR	2015054	CastTarget	struct msghdr *		2015000	0					
ANR	2015055	Identifier	msghdr_c		2015000	1					
ANR	2015056	IfStatement	if ( Z_TYPE_P ( arr ) != IS_ARRAY )		2015000	9					
ANR	2015057	Condition	Z_TYPE_P ( arr ) != IS_ARRAY	919:5:25555:25579	2015000	0	True				
ANR	2015058	EqualityExpression	Z_TYPE_P ( arr ) != IS_ARRAY		2015000	0		!=			
ANR	2015059	CallExpression	Z_TYPE_P ( arr )		2015000	0					
ANR	2015060	Callee	Z_TYPE_P		2015000	0					
ANR	2015061	Identifier	Z_TYPE_P		2015000	0					
ANR	2015062	ArgumentList	arr		2015000	1					
ANR	2015063	Argument	arr		2015000	0					
ANR	2015064	Identifier	arr		2015000	0					
ANR	2015065	Identifier	IS_ARRAY		2015000	1					
ANR	2015066	CompoundStatement		13:32:298:298	2015000	1					
ANR	2015067	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	920:2:25586:25639	2015000	0	True				
ANR	2015068	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		2015000	0					
ANR	2015069	Callee	do_from_zval_err		2015000	0					
ANR	2015070	Identifier	do_from_zval_err		2015000	0					
ANR	2015071	ArgumentList	ctx		2015000	1					
ANR	2015072	Argument	ctx		2015000	0					
ANR	2015073	Identifier	ctx		2015000	0					
ANR	2015074	Argument	"""%s"""		2015000	1					
ANR	2015075	PrimaryExpression	"""%s"""		2015000	0					
ANR	2015076	Argument	"""expected an array here"""		2015000	2					
ANR	2015077	PrimaryExpression	"""expected an array here"""		2015000	0					
ANR	2015078	ReturnStatement	return ;	921:2:25643:25649	2015000	1	True				
ANR	2015079	ExpressionStatement	num_elems = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )	924:1:25656:25707	2015000	10	True				
ANR	2015080	AssignmentExpression	num_elems = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		2015000	0		=			
ANR	2015081	Identifier	num_elems		2015000	0					
ANR	2015082	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		2015000	1					
ANR	2015083	Callee	zend_hash_num_elements		2015000	0					
ANR	2015084	Identifier	zend_hash_num_elements		2015000	0					
ANR	2015085	ArgumentList	Z_ARRVAL_P ( arr )		2015000	1					
ANR	2015086	Argument	Z_ARRVAL_P ( arr )		2015000	0					
ANR	2015087	CallExpression	Z_ARRVAL_P ( arr )		2015000	0					
ANR	2015088	Callee	Z_ARRVAL_P		2015000	0					
ANR	2015089	Identifier	Z_ARRVAL_P		2015000	0					
ANR	2015090	ArgumentList	arr		2015000	1					
ANR	2015091	Argument	arr		2015000	0					
ANR	2015092	Identifier	arr		2015000	0					
ANR	2015093	IfStatement	if ( num_elems == 0 )		2015000	11					
ANR	2015094	Condition	num_elems == 0	925:5:25714:25727	2015000	0	True				
ANR	2015095	EqualityExpression	num_elems == 0		2015000	0		==			
ANR	2015096	Identifier	num_elems		2015000	0					
ANR	2015097	PrimaryExpression	0		2015000	1					
ANR	2015098	CompoundStatement		19:21:446:446	2015000	1					
ANR	2015099	ReturnStatement	return ;	926:2:25734:25740	2015000	0	True				
ANR	2015100	ExpressionStatement	"control_buf = accounted_safe_ecalloc ( num_elems , CMSG_SPACE ( 20 ) , 0 , ctx )"	930:1:25788:25859	2015000	12	True				
ANR	2015101	AssignmentExpression	"control_buf = accounted_safe_ecalloc ( num_elems , CMSG_SPACE ( 20 ) , 0 , ctx )"		2015000	0		=			
ANR	2015102	Identifier	control_buf		2015000	0					
ANR	2015103	CallExpression	"accounted_safe_ecalloc ( num_elems , CMSG_SPACE ( 20 ) , 0 , ctx )"		2015000	1					
ANR	2015104	Callee	accounted_safe_ecalloc		2015000	0					
ANR	2015105	Identifier	accounted_safe_ecalloc		2015000	0					
ANR	2015106	ArgumentList	num_elems		2015000	1					
ANR	2015107	Argument	num_elems		2015000	0					
ANR	2015108	Identifier	num_elems		2015000	0					
ANR	2015109	Argument	CMSG_SPACE ( 20 )		2015000	1					
ANR	2015110	CallExpression	CMSG_SPACE ( 20 )		2015000	0					
ANR	2015111	Callee	CMSG_SPACE		2015000	0					
ANR	2015112	Identifier	CMSG_SPACE		2015000	0					
ANR	2015113	ArgumentList	20		2015000	1					
ANR	2015114	Argument	20		2015000	0					
ANR	2015115	PrimaryExpression	20		2015000	0					
ANR	2015116	Argument	0		2015000	2					
ANR	2015117	PrimaryExpression	0		2015000	0					
ANR	2015118	Argument	ctx		2015000	3					
ANR	2015119	Identifier	ctx		2015000	0					
ANR	2015120	ExpressionStatement	alloc = ctx -> allocations . tail	931:1:25862:25892	2015000	13	True				
ANR	2015121	AssignmentExpression	alloc = ctx -> allocations . tail		2015000	0		=			
ANR	2015122	Identifier	alloc		2015000	0					
ANR	2015123	MemberAccess	ctx -> allocations . tail		2015000	1					
ANR	2015124	PtrMemberAccess	ctx -> allocations		2015000	0					
ANR	2015125	Identifier	ctx		2015000	0					
ANR	2015126	Identifier	allocations		2015000	1					
ANR	2015127	Identifier	tail		2015000	1					
ANR	2015128	ExpressionStatement	control_len = ( size_t ) num_elems * CMSG_SPACE ( 20 )	932:1:25895:25943	2015000	14	True				
ANR	2015129	AssignmentExpression	control_len = ( size_t ) num_elems * CMSG_SPACE ( 20 )		2015000	0		=			
ANR	2015130	Identifier	control_len		2015000	0					
ANR	2015131	MultiplicativeExpression	( size_t ) num_elems * CMSG_SPACE ( 20 )		2015000	1		*			
ANR	2015132	CastExpression	( size_t ) num_elems		2015000	0					
ANR	2015133	CastTarget	size_t		2015000	0					
ANR	2015134	Identifier	num_elems		2015000	1					
ANR	2015135	CallExpression	CMSG_SPACE ( 20 )		2015000	1					
ANR	2015136	Callee	CMSG_SPACE		2015000	0					
ANR	2015137	Identifier	CMSG_SPACE		2015000	0					
ANR	2015138	ArgumentList	20		2015000	1					
ANR	2015139	Argument	20		2015000	0					
ANR	2015140	PrimaryExpression	20		2015000	0					
ANR	2015141	ExpressionStatement	cur_offset = 0	933:1:25946:25960	2015000	15	True				
ANR	2015142	AssignmentExpression	cur_offset = 0		2015000	0		=			
ANR	2015143	Identifier	cur_offset		2015000	0					
ANR	2015144	PrimaryExpression	0		2015000	1					
ANR	2015145	Statement	ZEND_HASH_FOREACH_VAL	935:1:25964:25984	2015000	16	True				
ANR	2015146	Statement	(	935:22:25985:25985	2015000	17	True				
ANR	2015147	Statement	Z_ARRVAL_P	935:23:25986:25995	2015000	18	True				
ANR	2015148	Statement	(	935:33:25996:25996	2015000	19	True				
ANR	2015149	Statement	arr	935:34:25997:25999	2015000	20	True				
ANR	2015150	Statement	)	935:37:26000:26000	2015000	21	True				
ANR	2015151	Statement	","	935:38:26001:26001	2015000	22	True				
ANR	2015152	Statement	elem	935:40:26003:26006	2015000	23	True				
ANR	2015153	Statement	)	935:44:26007:26007	2015000	24	True				
ANR	2015154	CompoundStatement		29:46:725:725	2015000	25					
ANR	2015155	IfStatement	if ( ctx -> err . has_error )		2015000	0					
ANR	2015156	Condition	ctx -> err . has_error	936:6:26017:26034	2015000	0	True				
ANR	2015157	MemberAccess	ctx -> err . has_error		2015000	0					
ANR	2015158	PtrMemberAccess	ctx -> err		2015000	0					
ANR	2015159	Identifier	ctx		2015000	0					
ANR	2015160	Identifier	err		2015000	1					
ANR	2015161	Identifier	has_error		2015000	1					
ANR	2015162	CompoundStatement		30:26:753:753	2015000	1					
ANR	2015163	BreakStatement	break ;	937:3:26042:26047	2015000	0	True				
ANR	2015164	IfStatement	"if ( snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf ) )"		2015000	1					
ANR	2015165	Condition	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf )"	940:6:26060:26130	2015000	0	True				
ANR	2015166	RelationalExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf )"		2015000	0		>=			
ANR	2015167	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ )"		2015000	0					
ANR	2015168	Callee	snprintf		2015000	0					
ANR	2015169	Identifier	snprintf		2015000	0					
ANR	2015170	ArgumentList	buf		2015000	1					
ANR	2015171	Argument	buf		2015000	0					
ANR	2015172	Identifier	buf		2015000	0					
ANR	2015173	Argument	sizeof ( buf )		2015000	1					
ANR	2015174	SizeofExpression	sizeof ( buf )		2015000	0					
ANR	2015175	Sizeof	sizeof		2015000	0					
ANR	2015176	SizeofOperand	buf		2015000	1					
ANR	2015177	Argument	"""element #%u"""		2015000	2					
ANR	2015178	PrimaryExpression	"""element #%u"""		2015000	0					
ANR	2015179	Argument	( unsigned ) i ++		2015000	3					
ANR	2015180	CastExpression	( unsigned ) i ++		2015000	0					
ANR	2015181	CastTarget	unsigned		2015000	0					
ANR	2015182	PostIncDecOperationExpression	i ++		2015000	1					
ANR	2015183	Identifier	i		2015000	0					
ANR	2015184	IncDec	++		2015000	1					
ANR	2015185	SizeofExpression	sizeof ( buf )		2015000	1					
ANR	2015186	Sizeof	sizeof		2015000	0					
ANR	2015187	SizeofOperand	buf		2015000	1					
ANR	2015188	CompoundStatement		34:79:849:849	2015000	1					
ANR	2015189	ExpressionStatement	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"	941:3:26138:26179	2015000	0	True				
ANR	2015190	CallExpression	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"		2015000	0					
ANR	2015191	Callee	memcpy		2015000	0					
ANR	2015192	Identifier	memcpy		2015000	0					
ANR	2015193	ArgumentList	buf		2015000	1					
ANR	2015194	Argument	buf		2015000	0					
ANR	2015195	Identifier	buf		2015000	0					
ANR	2015196	Argument	"""element"""		2015000	1					
ANR	2015197	PrimaryExpression	"""element"""		2015000	0					
ANR	2015198	Argument	"sizeof ( ""element"" )"		2015000	2					
ANR	2015199	SizeofExpression	"sizeof ( ""element"" )"		2015000	0					
ANR	2015200	Sizeof	sizeof		2015000	0					
ANR	2015201	PrimaryExpression	"""element"""		2015000	1					
ANR	2015202	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , & bufp )"	943:2:26187:26228	2015000	2	True				
ANR	2015203	CallExpression	"zend_llist_add_element ( & ctx -> keys , & bufp )"		2015000	0					
ANR	2015204	Callee	zend_llist_add_element		2015000	0					
ANR	2015205	Identifier	zend_llist_add_element		2015000	0					
ANR	2015206	ArgumentList	& ctx -> keys		2015000	1					
ANR	2015207	Argument	& ctx -> keys		2015000	0					
ANR	2015208	UnaryOperationExpression	& ctx -> keys		2015000	0					
ANR	2015209	UnaryOperator	&		2015000	0					
ANR	2015210	PtrMemberAccess	ctx -> keys		2015000	1					
ANR	2015211	Identifier	ctx		2015000	0					
ANR	2015212	Identifier	keys		2015000	1					
ANR	2015213	Argument	& bufp		2015000	1					
ANR	2015214	UnaryOperationExpression	& bufp		2015000	0					
ANR	2015215	UnaryOperator	&		2015000	0					
ANR	2015216	Identifier	bufp		2015000	1					
ANR	2015217	ExpressionStatement	"from_zval_write_control ( elem , & control_buf , alloc , & control_len , & cur_offset , ctx )"	945:2:26233:26315	2015000	3	True				
ANR	2015218	CallExpression	"from_zval_write_control ( elem , & control_buf , alloc , & control_len , & cur_offset , ctx )"		2015000	0					
ANR	2015219	Callee	from_zval_write_control		2015000	0					
ANR	2015220	Identifier	from_zval_write_control		2015000	0					
ANR	2015221	ArgumentList	elem		2015000	1					
ANR	2015222	Argument	elem		2015000	0					
ANR	2015223	Identifier	elem		2015000	0					
ANR	2015224	Argument	& control_buf		2015000	1					
ANR	2015225	UnaryOperationExpression	& control_buf		2015000	0					
ANR	2015226	UnaryOperator	&		2015000	0					
ANR	2015227	Identifier	control_buf		2015000	1					
ANR	2015228	Argument	alloc		2015000	2					
ANR	2015229	Identifier	alloc		2015000	0					
ANR	2015230	Argument	& control_len		2015000	3					
ANR	2015231	UnaryOperationExpression	& control_len		2015000	0					
ANR	2015232	UnaryOperator	&		2015000	0					
ANR	2015233	Identifier	control_len		2015000	1					
ANR	2015234	Argument	& cur_offset		2015000	4					
ANR	2015235	UnaryOperationExpression	& cur_offset		2015000	0					
ANR	2015236	UnaryOperator	&		2015000	0					
ANR	2015237	Identifier	cur_offset		2015000	1					
ANR	2015238	Argument	ctx		2015000	5					
ANR	2015239	Identifier	ctx		2015000	0					
ANR	2015240	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	947:2:26320:26354	2015000	4	True				
ANR	2015241	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		2015000	0					
ANR	2015242	Callee	zend_llist_remove_tail		2015000	0					
ANR	2015243	Identifier	zend_llist_remove_tail		2015000	0					
ANR	2015244	ArgumentList	& ctx -> keys		2015000	1					
ANR	2015245	Argument	& ctx -> keys		2015000	0					
ANR	2015246	UnaryOperationExpression	& ctx -> keys		2015000	0					
ANR	2015247	UnaryOperator	&		2015000	0					
ANR	2015248	PtrMemberAccess	ctx -> keys		2015000	1					
ANR	2015249	Identifier	ctx		2015000	0					
ANR	2015250	Identifier	keys		2015000	1					
ANR	2015251	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	948:3:26359:26382	2015000	26	True				
ANR	2015252	CallExpression	ZEND_HASH_FOREACH_END ( )		2015000	0					
ANR	2015253	Callee	ZEND_HASH_FOREACH_END		2015000	0					
ANR	2015254	Identifier	ZEND_HASH_FOREACH_END		2015000	0					
ANR	2015255	ArgumentList			2015000	1					
ANR	2015256	ExpressionStatement	msg -> msg_control = control_buf	950:4:26389:26419	2015000	27	True				
ANR	2015257	AssignmentExpression	msg -> msg_control = control_buf		2015000	0		=			
ANR	2015258	PtrMemberAccess	msg -> msg_control		2015000	0					
ANR	2015259	Identifier	msg		2015000	0					
ANR	2015260	Identifier	msg_control		2015000	1					
ANR	2015261	Identifier	control_buf		2015000	1					
ANR	2015262	ExpressionStatement	msg -> msg_controllen = cur_offset	951:4:26425:26457	2015000	28	True				
ANR	2015263	AssignmentExpression	msg -> msg_controllen = cur_offset		2015000	0		=			
ANR	2015264	PtrMemberAccess	msg -> msg_controllen		2015000	0					
ANR	2015265	Identifier	msg		2015000	0					
ANR	2015266	Identifier	msg_controllen		2015000	1					
ANR	2015267	Identifier	cur_offset		2015000	1					
ANR	2015268	ReturnType	static void		2015000	1					
ANR	2015269	Identifier	from_zval_write_control_array		2015000	2					
ANR	2015270	ParameterList	"const zval * arr , char * msghdr_c , ser_context * ctx"		2015000	3					
ANR	2015271	Parameter	const zval * arr	906:42:25232:25246	2015000	0	True				
ANR	2015272	ParameterType	const zval *		2015000	0					
ANR	2015273	Identifier	arr		2015000	1					
ANR	2015274	Parameter	char * msghdr_c	906:59:25249:25262	2015000	1	True				
ANR	2015275	ParameterType	char *		2015000	0					
ANR	2015276	Identifier	msghdr_c		2015000	1					
ANR	2015277	Parameter	ser_context * ctx	906:75:25265:25280	2015000	2	True				
ANR	2015278	ParameterType	ser_context *		2015000	0					
ANR	2015279	Identifier	ctx		2015000	1					
ANR	2015280	CFGEntryNode	ENTRY		2015000		True				
ANR	2015281	CFGExitNode	EXIT		2015000		True				
ANR	2015282	CFGErrorNode	ERROR		2015000		True				
ANR	2015283	Symbol	msg		2015000						
ANR	2015284	Symbol	msghdr_c		2015000						
ANR	2015285	Symbol	& ctx -> keys		2015000						
ANR	2015286	Symbol	accounted_safe_ecalloc		2015000						
ANR	2015287	Symbol	msg -> msg_control		2015000						
ANR	2015288	Symbol	ctx -> err		2015000						
ANR	2015289	Symbol	IS_ARRAY		2015000						
ANR	2015290	Symbol	& control_len		2015000						
ANR	2015291	Symbol	CMSG_SPACE		2015000						
ANR	2015292	Symbol	control_buf		2015000						
ANR	2015293	Symbol	ctx -> allocations		2015000						
ANR	2015294	Symbol	Z_ARRVAL_P		2015000						
ANR	2015295	Symbol	msg -> msg_controllen		2015000						
ANR	2015296	Symbol	& bufp		2015000						
ANR	2015297	Symbol	snprintf		2015000						
ANR	2015298	Symbol	arr		2015000						
ANR	2015299	Symbol	elem		2015000						
ANR	2015300	Symbol	& cur_offset		2015000						
ANR	2015301	Symbol	zend_hash_num_elements		2015000						
ANR	2015302	Symbol	ctx		2015000						
ANR	2015303	Symbol	cur_offset		2015000						
ANR	2015304	Symbol	ctx -> err . has_error		2015000						
ANR	2015305	Symbol	i		2015000						
ANR	2015306	Symbol	* msg		2015000						
ANR	2015307	Symbol	Z_TYPE_P		2015000						
ANR	2015308	Symbol	* ctx		2015000						
ANR	2015309	Symbol	ctx -> allocations . tail		2015000						
ANR	2015310	Symbol	buf		2015000						
ANR	2015311	Symbol	bufp		2015000						
ANR	2015312	Symbol	& control_buf		2015000						
ANR	2015313	Symbol	control_len		2015000						
ANR	2015314	Symbol	alloc		2015000						
ANR	2015315	Symbol	num_elems		2015000						
ANR	2015316	Function	to_zval_read_cmsg_data	953:0:26504:27597							
ANR	2015317	FunctionDef	"to_zval_read_cmsg_data (const char * cmsghdr_c , zval * zv , res_context * ctx)"		2015316	0					
ANR	2015318	CompoundStatement		954:0:26590:27597	2015316	0					
ANR	2015319	IdentifierDeclStatement	const struct cmsghdr * cmsg = ( const struct cmsghdr * ) cmsghdr_c ;	955:1:26593:26655	2015316	0	True				
ANR	2015320	IdentifierDecl	* cmsg = ( const struct cmsghdr * ) cmsghdr_c		2015316	0					
ANR	2015321	IdentifierDeclType	const struct cmsghdr *		2015316	0					
ANR	2015322	Identifier	cmsg		2015316	1					
ANR	2015323	AssignmentExpression	* cmsg = ( const struct cmsghdr * ) cmsghdr_c		2015316	2		=			
ANR	2015324	Identifier	cmsg		2015316	0					
ANR	2015325	CastExpression	( const struct cmsghdr * ) cmsghdr_c		2015316	1					
ANR	2015326	CastTarget	const struct cmsghdr *		2015316	0					
ANR	2015327	Identifier	cmsghdr_c		2015316	1					
ANR	2015328	IdentifierDeclStatement	ancillary_reg_entry * entry ;	956:1:26658:26685	2015316	1	True				
ANR	2015329	IdentifierDecl	* entry		2015316	0					
ANR	2015330	IdentifierDeclType	ancillary_reg_entry *		2015316	0					
ANR	2015331	Identifier	entry		2015316	1					
ANR	2015332	IdentifierDeclStatement	"size_t len , * len_p = & len ;"	957:1:26688:26724	2015316	2	True				
ANR	2015333	IdentifierDecl	len		2015316	0					
ANR	2015334	IdentifierDeclType	size_t		2015316	0					
ANR	2015335	Identifier	len		2015316	1					
ANR	2015336	IdentifierDecl	* len_p = & len		2015316	1					
ANR	2015337	IdentifierDeclType	size_t *		2015316	0					
ANR	2015338	Identifier	len_p		2015316	1					
ANR	2015339	AssignmentExpression	* len_p = & len		2015316	2		=			
ANR	2015340	Identifier	len_p		2015316	0					
ANR	2015341	UnaryOperationExpression	& len		2015316	1					
ANR	2015342	UnaryOperator	&		2015316	0					
ANR	2015343	Identifier	len		2015316	1					
ANR	2015344	ExpressionStatement	"entry = get_ancillary_reg_entry ( cmsg -> cmsg_level , cmsg -> cmsg_type )"	960:1:26728:26794	2015316	3	True				
ANR	2015345	AssignmentExpression	"entry = get_ancillary_reg_entry ( cmsg -> cmsg_level , cmsg -> cmsg_type )"		2015316	0		=			
ANR	2015346	Identifier	entry		2015316	0					
ANR	2015347	CallExpression	"get_ancillary_reg_entry ( cmsg -> cmsg_level , cmsg -> cmsg_type )"		2015316	1					
ANR	2015348	Callee	get_ancillary_reg_entry		2015316	0					
ANR	2015349	Identifier	get_ancillary_reg_entry		2015316	0					
ANR	2015350	ArgumentList	cmsg -> cmsg_level		2015316	1					
ANR	2015351	Argument	cmsg -> cmsg_level		2015316	0					
ANR	2015352	PtrMemberAccess	cmsg -> cmsg_level		2015316	0					
ANR	2015353	Identifier	cmsg		2015316	0					
ANR	2015354	Identifier	cmsg_level		2015316	1					
ANR	2015355	Argument	cmsg -> cmsg_type		2015316	1					
ANR	2015356	PtrMemberAccess	cmsg -> cmsg_type		2015316	0					
ANR	2015357	Identifier	cmsg		2015316	0					
ANR	2015358	Identifier	cmsg_type		2015316	1					
ANR	2015359	IfStatement	if ( entry == NULL )		2015316	4					
ANR	2015360	Condition	entry == NULL	961:5:26801:26813	2015316	0	True				
ANR	2015361	EqualityExpression	entry == NULL		2015316	0		==			
ANR	2015362	Identifier	entry		2015316	0					
ANR	2015363	Identifier	NULL		2015316	1					
ANR	2015364	CompoundStatement		8:20:225:225	2015316	1					
ANR	2015365	ExpressionStatement	"do_to_zval_err ( ctx , ""cmsghdr with level %d and type %d not supported"" , cmsg -> cmsg_level , cmsg -> cmsg_type )"	962:2:26820:26929	2015316	0	True				
ANR	2015366	CallExpression	"do_to_zval_err ( ctx , ""cmsghdr with level %d and type %d not supported"" , cmsg -> cmsg_level , cmsg -> cmsg_type )"		2015316	0					
ANR	2015367	Callee	do_to_zval_err		2015316	0					
ANR	2015368	Identifier	do_to_zval_err		2015316	0					
ANR	2015369	ArgumentList	ctx		2015316	1					
ANR	2015370	Argument	ctx		2015316	0					
ANR	2015371	Identifier	ctx		2015316	0					
ANR	2015372	Argument	"""cmsghdr with level %d and type %d not supported"""		2015316	1					
ANR	2015373	PrimaryExpression	"""cmsghdr with level %d and type %d not supported"""		2015316	0					
ANR	2015374	Argument	cmsg -> cmsg_level		2015316	2					
ANR	2015375	PtrMemberAccess	cmsg -> cmsg_level		2015316	0					
ANR	2015376	Identifier	cmsg		2015316	0					
ANR	2015377	Identifier	cmsg_level		2015316	1					
ANR	2015378	Argument	cmsg -> cmsg_type		2015316	3					
ANR	2015379	PtrMemberAccess	cmsg -> cmsg_type		2015316	0					
ANR	2015380	Identifier	cmsg		2015316	0					
ANR	2015381	Identifier	cmsg_type		2015316	1					
ANR	2015382	ReturnStatement	return ;	964:2:26933:26939	2015316	1	True				
ANR	2015383	IfStatement	if ( CMSG_LEN ( entry -> size ) > cmsg -> cmsg_len )		2015316	5					
ANR	2015384	Condition	CMSG_LEN ( entry -> size ) > cmsg -> cmsg_len	966:5:26949:26986	2015316	0	True				
ANR	2015385	RelationalExpression	CMSG_LEN ( entry -> size ) > cmsg -> cmsg_len		2015316	0		>			
ANR	2015386	CallExpression	CMSG_LEN ( entry -> size )		2015316	0					
ANR	2015387	Callee	CMSG_LEN		2015316	0					
ANR	2015388	Identifier	CMSG_LEN		2015316	0					
ANR	2015389	ArgumentList	entry -> size		2015316	1					
ANR	2015390	Argument	entry -> size		2015316	0					
ANR	2015391	PtrMemberAccess	entry -> size		2015316	0					
ANR	2015392	Identifier	entry		2015316	0					
ANR	2015393	Identifier	size		2015316	1					
ANR	2015394	PtrMemberAccess	cmsg -> cmsg_len		2015316	1					
ANR	2015395	Identifier	cmsg		2015316	0					
ANR	2015396	Identifier	cmsg_len		2015316	1					
ANR	2015397	CompoundStatement		13:45:398:398	2015316	1					
ANR	2015398	Statement	do_to_zval_err	967:2:26993:27006	2015316	0	True				
ANR	2015399	Statement	(	967:16:27007:27007	2015316	1	True				
ANR	2015400	Statement	ctx	967:17:27008:27010	2015316	2	True				
ANR	2015401	Statement	","	967:20:27011:27011	2015316	3	True				
ANR	2015402	Statement	"""the cmsghdr structure is unexpectedly small; """	967:22:27013:27059	2015316	4	True				
ANR	2015403	Statement	"""expected a length of at least %pd, but got %pd"""	968:4:27065:27112	2015316	5	True				
ANR	2015404	Statement	","	968:52:27113:27113	2015316	6	True				
ANR	2015405	Statement	(	969:4:27119:27119	2015316	7	True				
ANR	2015406	Statement	zend_long	969:5:27120:27128	2015316	8	True				
ANR	2015407	Statement	)	969:14:27129:27129	2015316	9	True				
ANR	2015408	Statement	CMSG_LEN	969:15:27130:27137	2015316	10	True				
ANR	2015409	Statement	(	969:23:27138:27138	2015316	11	True				
ANR	2015410	Statement	entry	969:24:27139:27143	2015316	12	True				
ANR	2015411	Statement	->	969:29:27144:27145	2015316	13	True				
ANR	2015412	Statement	size	969:31:27146:27149	2015316	14	True				
ANR	2015413	Statement	)	969:35:27150:27150	2015316	15	True				
ANR	2015414	Statement	","	969:36:27151:27151	2015316	16	True				
ANR	2015415	Statement	(	969:38:27153:27153	2015316	17	True				
ANR	2015416	Statement	zend_long	969:39:27154:27162	2015316	18	True				
ANR	2015417	Statement	)	969:48:27163:27163	2015316	19	True				
ANR	2015418	Statement	cmsg	969:49:27164:27167	2015316	20	True				
ANR	2015419	Statement	->	969:53:27168:27169	2015316	21	True				
ANR	2015420	Statement	cmsg_len	969:55:27170:27177	2015316	22	True				
ANR	2015421	Statement	)	969:63:27178:27178	2015316	23	True				
ANR	2015422	ExpressionStatement		969:64:27179:27179	2015316	24	True				
ANR	2015423	ReturnStatement	return ;	970:2:27183:27189	2015316	25	True				
ANR	2015424	ExpressionStatement	len = ( size_t ) cmsg -> cmsg_len	973:1:27196:27224	2015316	6	True				
ANR	2015425	AssignmentExpression	len = ( size_t ) cmsg -> cmsg_len		2015316	0		=			
ANR	2015426	Identifier	len		2015316	0					
ANR	2015427	CastExpression	( size_t ) cmsg -> cmsg_len		2015316	1					
ANR	2015428	CastTarget	size_t		2015316	0					
ANR	2015429	PtrMemberAccess	cmsg -> cmsg_len		2015316	1					
ANR	2015430	Identifier	cmsg		2015316	0					
ANR	2015431	Identifier	cmsg_len		2015316	1					
ANR	2015432	IfStatement	"if ( zend_hash_str_add_ptr ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 , len_p ) == NULL )"		2015316	7					
ANR	2015433	Condition	"zend_hash_str_add_ptr ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 , len_p ) == NULL"	975:5:27286:27375	2015316	0	True				
ANR	2015434	EqualityExpression	"zend_hash_str_add_ptr ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 , len_p ) == NULL"		2015316	0		==			
ANR	2015435	CallExpression	"zend_hash_str_add_ptr ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 , len_p )"		2015316	0					
ANR	2015436	Callee	zend_hash_str_add_ptr		2015316	0					
ANR	2015437	Identifier	zend_hash_str_add_ptr		2015316	0					
ANR	2015438	ArgumentList	& ctx -> params		2015316	1					
ANR	2015439	Argument	& ctx -> params		2015316	0					
ANR	2015440	UnaryOperationExpression	& ctx -> params		2015316	0					
ANR	2015441	UnaryOperator	&		2015316	0					
ANR	2015442	PtrMemberAccess	ctx -> params		2015316	1					
ANR	2015443	Identifier	ctx		2015316	0					
ANR	2015444	Identifier	params		2015316	1					
ANR	2015445	Argument	KEY_CMSG_LEN		2015316	1					
ANR	2015446	Identifier	KEY_CMSG_LEN		2015316	0					
ANR	2015447	Argument	sizeof ( KEY_CMSG_LEN ) - 1		2015316	2					
ANR	2015448	AdditiveExpression	sizeof ( KEY_CMSG_LEN ) - 1		2015316	0		-			
ANR	2015449	SizeofExpression	sizeof ( KEY_CMSG_LEN )		2015316	0					
ANR	2015450	Sizeof	sizeof		2015316	0					
ANR	2015451	SizeofOperand	KEY_CMSG_LEN		2015316	1					
ANR	2015452	PrimaryExpression	1		2015316	1					
ANR	2015453	Argument	len_p		2015316	3					
ANR	2015454	Identifier	len_p		2015316	0					
ANR	2015455	Identifier	NULL		2015316	1					
ANR	2015456	CompoundStatement		22:97:787:787	2015316	1					
ANR	2015457	Statement	do_to_zval_err	976:2:27382:27395	2015316	0	True				
ANR	2015458	Statement	(	976:16:27396:27396	2015316	1	True				
ANR	2015459	Statement	ctx	976:17:27397:27399	2015316	2	True				
ANR	2015460	Statement	","	976:20:27400:27400	2015316	3	True				
ANR	2015461	Statement	"""%s"""	976:22:27402:27405	2015316	4	True				
ANR	2015462	Statement	","	976:26:27406:27406	2015316	5	True				
ANR	2015463	Statement	"""could not set parameter """	976:28:27408:27433	2015316	6	True				
ANR	2015464	Statement	KEY_CMSG_LEN	976:55:27435:27446	2015316	7	True				
ANR	2015465	Statement	)	976:67:27447:27447	2015316	8	True				
ANR	2015466	ExpressionStatement		976:68:27448:27448	2015316	9	True				
ANR	2015467	ReturnStatement	return ;	977:2:27452:27458	2015316	10	True				
ANR	2015468	ExpressionStatement	"entry -> to_array ( ( const char * ) CMSG_DATA ( cmsg ) , zv , ctx )"	980:1:27465:27520	2015316	8	True				
ANR	2015469	CallExpression	"entry -> to_array ( ( const char * ) CMSG_DATA ( cmsg ) , zv , ctx )"		2015316	0					
ANR	2015470	Callee	entry -> to_array		2015316	0					
ANR	2015471	PtrMemberAccess	entry -> to_array		2015316	0					
ANR	2015472	Identifier	entry		2015316	0					
ANR	2015473	Identifier	to_array		2015316	1					
ANR	2015474	ArgumentList	( const char * ) CMSG_DATA ( cmsg )		2015316	1					
ANR	2015475	Argument	( const char * ) CMSG_DATA ( cmsg )		2015316	0					
ANR	2015476	CastExpression	( const char * ) CMSG_DATA ( cmsg )		2015316	0					
ANR	2015477	CastTarget	const char *		2015316	0					
ANR	2015478	CallExpression	CMSG_DATA ( cmsg )		2015316	1					
ANR	2015479	Callee	CMSG_DATA		2015316	0					
ANR	2015480	Identifier	CMSG_DATA		2015316	0					
ANR	2015481	ArgumentList	cmsg		2015316	1					
ANR	2015482	Argument	cmsg		2015316	0					
ANR	2015483	Identifier	cmsg		2015316	0					
ANR	2015484	Argument	zv		2015316	1					
ANR	2015485	Identifier	zv		2015316	0					
ANR	2015486	Argument	ctx		2015316	2					
ANR	2015487	Identifier	ctx		2015316	0					
ANR	2015488	ExpressionStatement	"zend_hash_str_del ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 )"	982:1:27524:27595	2015316	9	True				
ANR	2015489	CallExpression	"zend_hash_str_del ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 )"		2015316	0					
ANR	2015490	Callee	zend_hash_str_del		2015316	0					
ANR	2015491	Identifier	zend_hash_str_del		2015316	0					
ANR	2015492	ArgumentList	& ctx -> params		2015316	1					
ANR	2015493	Argument	& ctx -> params		2015316	0					
ANR	2015494	UnaryOperationExpression	& ctx -> params		2015316	0					
ANR	2015495	UnaryOperator	&		2015316	0					
ANR	2015496	PtrMemberAccess	ctx -> params		2015316	1					
ANR	2015497	Identifier	ctx		2015316	0					
ANR	2015498	Identifier	params		2015316	1					
ANR	2015499	Argument	KEY_CMSG_LEN		2015316	1					
ANR	2015500	Identifier	KEY_CMSG_LEN		2015316	0					
ANR	2015501	Argument	sizeof ( KEY_CMSG_LEN ) - 1		2015316	2					
ANR	2015502	AdditiveExpression	sizeof ( KEY_CMSG_LEN ) - 1		2015316	0		-			
ANR	2015503	SizeofExpression	sizeof ( KEY_CMSG_LEN )		2015316	0					
ANR	2015504	Sizeof	sizeof		2015316	0					
ANR	2015505	SizeofOperand	KEY_CMSG_LEN		2015316	1					
ANR	2015506	PrimaryExpression	1		2015316	1					
ANR	2015507	ReturnType	static void		2015316	1					
ANR	2015508	Identifier	to_zval_read_cmsg_data		2015316	2					
ANR	2015509	ParameterList	"const char * cmsghdr_c , zval * zv , res_context * ctx"		2015316	3					
ANR	2015510	Parameter	const char * cmsghdr_c	953:35:26539:26559	2015316	0	True				
ANR	2015511	ParameterType	const char *		2015316	0					
ANR	2015512	Identifier	cmsghdr_c		2015316	1					
ANR	2015513	Parameter	zval * zv	953:58:26562:26569	2015316	1	True				
ANR	2015514	ParameterType	zval *		2015316	0					
ANR	2015515	Identifier	zv		2015316	1					
ANR	2015516	Parameter	res_context * ctx	953:68:26572:26587	2015316	2	True				
ANR	2015517	ParameterType	res_context *		2015316	0					
ANR	2015518	Identifier	ctx		2015316	1					
ANR	2015519	CFGEntryNode	ENTRY		2015316		True				
ANR	2015520	CFGExitNode	EXIT		2015316		True				
ANR	2015521	Symbol	CMSG_DATA		2015316						
ANR	2015522	Symbol	NULL		2015316						
ANR	2015523	Symbol	ctx		2015316						
ANR	2015524	Symbol	len_p		2015316						
ANR	2015525	Symbol	* cmsg		2015316						
ANR	2015526	Symbol	cmsg -> cmsg_level		2015316						
ANR	2015527	Symbol	zend_hash_str_add_ptr		2015316						
ANR	2015528	Symbol	cmsg		2015316						
ANR	2015529	Symbol	entry		2015316						
ANR	2015530	Symbol	get_ancillary_reg_entry		2015316						
ANR	2015531	Symbol	CMSG_LEN		2015316						
ANR	2015532	Symbol	cmsghdr_c		2015316						
ANR	2015533	Symbol	cmsg -> cmsg_type		2015316						
ANR	2015534	Symbol	len		2015316						
ANR	2015535	Symbol	entry -> size		2015316						
ANR	2015536	Symbol	KEY_CMSG_LEN		2015316						
ANR	2015537	Symbol	& ctx -> params		2015316						
ANR	2015538	Symbol	zv		2015316						
ANR	2015539	Symbol	& len		2015316						
ANR	2015540	Symbol	* entry		2015316						
ANR	2015541	Symbol	cmsg -> cmsg_len		2015316						
ANR	2015542	Function	to_zval_read_control	984:0:27599:28163							
ANR	2015543	FunctionDef	"to_zval_read_control (const char * cmsghdr_c , zval * zv , res_context * ctx)"		2015542	0					
ANR	2015544	CompoundStatement		985:0:27683:28163	2015542	0					
ANR	2015545	Statement	static	987:1:27752:27757	2015542	0	True				
ANR	2015546	Statement	const	987:8:27759:27763	2015542	1	True				
ANR	2015547	Statement	field_descriptor	987:14:27765:27780	2015542	2	True				
ANR	2015548	Statement	descriptors	987:31:27782:27792	2015542	3	True				
ANR	2015549	Statement	[	987:42:27793:27793	2015542	4	True				
ANR	2015550	Statement	]	987:43:27794:27794	2015542	5	True				
ANR	2015551	Statement	=	987:45:27796:27796	2015542	6	True				
ANR	2015552	CompoundStatement		3:47:114:114	2015542	7					
ANR	2015553	CompoundStatement		4:3:119:119	2015542	0					
ANR	2015554	Statement	"""level"""	988:4:27804:27810	2015542	0	True				
ANR	2015555	Statement	","	988:11:27811:27811	2015542	1	True				
ANR	2015556	Statement	sizeof	988:13:27813:27818	2015542	2	True				
ANR	2015557	Statement	(	988:19:27819:27819	2015542	3	True				
ANR	2015558	Statement	"""level"""	988:20:27820:27826	2015542	4	True				
ANR	2015559	Statement	)	988:27:27827:27827	2015542	5	True				
ANR	2015560	Statement	","	988:28:27828:27828	2015542	6	True				
ANR	2015561	Statement	0	988:30:27830:27830	2015542	7	True				
ANR	2015562	Statement	","	988:31:27831:27831	2015542	8	True				
ANR	2015563	Statement	offsetof	988:33:27833:27840	2015542	9	True				
ANR	2015564	Statement	(	988:41:27841:27841	2015542	10	True				
ANR	2015565	Statement	struct	988:42:27842:27847	2015542	11	True				
ANR	2015566	Statement	cmsghdr	988:49:27849:27855	2015542	12	True				
ANR	2015567	Statement	","	988:56:27856:27856	2015542	13	True				
ANR	2015568	Statement	cmsg_level	988:58:27858:27867	2015542	14	True				
ANR	2015569	Statement	)	988:68:27868:27868	2015542	15	True				
ANR	2015570	Statement	","	988:69:27869:27869	2015542	16	True				
ANR	2015571	Statement	0	988:71:27871:27871	2015542	17	True				
ANR	2015572	Statement	","	988:72:27872:27872	2015542	18	True				
ANR	2015573	Statement	to_zval_read_int	988:74:27874:27889	2015542	19	True				
ANR	2015574	Statement	","	988:91:27891:27891	2015542	1	True				
ANR	2015575	CompoundStatement		5:3:212:212	2015542	2					
ANR	2015576	Statement	"""type"""	989:4:27897:27902	2015542	0	True				
ANR	2015577	Statement	","	989:10:27903:27903	2015542	1	True				
ANR	2015578	Statement	sizeof	989:12:27905:27910	2015542	2	True				
ANR	2015579	Statement	(	989:18:27911:27911	2015542	3	True				
ANR	2015580	Statement	"""type"""	989:19:27912:27917	2015542	4	True				
ANR	2015581	Statement	)	989:25:27918:27918	2015542	5	True				
ANR	2015582	Statement	","	989:26:27919:27919	2015542	6	True				
ANR	2015583	Statement	0	989:28:27921:27921	2015542	7	True				
ANR	2015584	Statement	","	989:29:27922:27922	2015542	8	True				
ANR	2015585	Statement	offsetof	989:31:27924:27931	2015542	9	True				
ANR	2015586	Statement	(	989:39:27932:27932	2015542	10	True				
ANR	2015587	Statement	struct	989:40:27933:27938	2015542	11	True				
ANR	2015588	Statement	cmsghdr	989:47:27940:27946	2015542	12	True				
ANR	2015589	Statement	","	989:54:27947:27947	2015542	13	True				
ANR	2015590	Statement	cmsg_type	989:56:27949:27957	2015542	14	True				
ANR	2015591	Statement	)	989:65:27958:27958	2015542	15	True				
ANR	2015592	Statement	","	989:66:27959:27959	2015542	16	True				
ANR	2015593	Statement	0	989:68:27961:27961	2015542	17	True				
ANR	2015594	Statement	","	989:69:27962:27962	2015542	18	True				
ANR	2015595	Statement	to_zval_read_int	989:71:27964:27979	2015542	19	True				
ANR	2015596	Statement	","	989:88:27981:27981	2015542	3	True				
ANR	2015597	CompoundStatement		6:3:302:302	2015542	4					
ANR	2015598	Statement	"""data"""	990:4:27987:27992	2015542	0	True				
ANR	2015599	Statement	","	990:10:27993:27993	2015542	1	True				
ANR	2015600	Statement	sizeof	990:12:27995:28000	2015542	2	True				
ANR	2015601	Statement	(	990:18:28001:28001	2015542	3	True				
ANR	2015602	Statement	"""data"""	990:19:28002:28007	2015542	4	True				
ANR	2015603	Statement	)	990:25:28008:28008	2015542	5	True				
ANR	2015604	Statement	","	990:26:28009:28009	2015542	6	True				
ANR	2015605	Statement	0	990:28:28011:28011	2015542	7	True				
ANR	2015606	Statement	","	990:29:28012:28012	2015542	8	True				
ANR	2015607	Statement	0	990:31:28014:28014	2015542	9	True				
ANR	2015608	Statement	","	990:53:28036:28036	2015542	10	True				
ANR	2015609	Statement	0	990:55:28038:28038	2015542	11	True				
ANR	2015610	Statement	","	990:56:28039:28039	2015542	12	True				
ANR	2015611	Statement	to_zval_read_cmsg_data	990:58:28041:28062	2015542	13	True				
ANR	2015612	Statement	","	990:81:28064:28064	2015542	5	True				
ANR	2015613	CompoundStatement		7:3:385:385	2015542	6					
ANR	2015614	Statement	0	991:4:28070:28070	2015542	0	True				
ANR	2015615	ExpressionStatement		992:2:28075:28075	2015542	8	True				
ANR	2015616	ExpressionStatement	"array_init_size ( zv , 3 )"	994:1:28079:28101	2015542	9	True				
ANR	2015617	CallExpression	"array_init_size ( zv , 3 )"		2015542	0					
ANR	2015618	Callee	array_init_size		2015542	0					
ANR	2015619	Identifier	array_init_size		2015542	0					
ANR	2015620	ArgumentList	zv		2015542	1					
ANR	2015621	Argument	zv		2015542	0					
ANR	2015622	Identifier	zv		2015542	0					
ANR	2015623	Argument	3		2015542	1					
ANR	2015624	PrimaryExpression	3		2015542	0					
ANR	2015625	ExpressionStatement	"to_zval_read_aggregation ( cmsghdr_c , zv , descriptors , ctx )"	995:1:28104:28161	2015542	10	True				
ANR	2015626	CallExpression	"to_zval_read_aggregation ( cmsghdr_c , zv , descriptors , ctx )"		2015542	0					
ANR	2015627	Callee	to_zval_read_aggregation		2015542	0					
ANR	2015628	Identifier	to_zval_read_aggregation		2015542	0					
ANR	2015629	ArgumentList	cmsghdr_c		2015542	1					
ANR	2015630	Argument	cmsghdr_c		2015542	0					
ANR	2015631	Identifier	cmsghdr_c		2015542	0					
ANR	2015632	Argument	zv		2015542	1					
ANR	2015633	Identifier	zv		2015542	0					
ANR	2015634	Argument	descriptors		2015542	2					
ANR	2015635	Identifier	descriptors		2015542	0					
ANR	2015636	Argument	ctx		2015542	3					
ANR	2015637	Identifier	ctx		2015542	0					
ANR	2015638	ReturnType	static void		2015542	1					
ANR	2015639	Identifier	to_zval_read_control		2015542	2					
ANR	2015640	ParameterList	"const char * cmsghdr_c , zval * zv , res_context * ctx"		2015542	3					
ANR	2015641	Parameter	const char * cmsghdr_c	984:33:27632:27652	2015542	0	True				
ANR	2015642	ParameterType	const char *		2015542	0					
ANR	2015643	Identifier	cmsghdr_c		2015542	1					
ANR	2015644	Parameter	zval * zv	984:56:27655:27662	2015542	1	True				
ANR	2015645	ParameterType	zval *		2015542	0					
ANR	2015646	Identifier	zv		2015542	1					
ANR	2015647	Parameter	res_context * ctx	984:66:27665:27680	2015542	2	True				
ANR	2015648	ParameterType	res_context *		2015542	0					
ANR	2015649	Identifier	ctx		2015542	1					
ANR	2015650	CFGEntryNode	ENTRY		2015542		True				
ANR	2015651	CFGExitNode	EXIT		2015542		True				
ANR	2015652	Symbol	descriptors		2015542						
ANR	2015653	Symbol	cmsghdr_c		2015542						
ANR	2015654	Symbol	ctx		2015542						
ANR	2015655	Symbol	zv		2015542						
ANR	2015656	Function	to_zval_read_control_array	997:0:28165:29107							
ANR	2015657	FunctionDef	"to_zval_read_control_array (const char * msghdr_c , zval * zv , res_context * ctx)"		2015656	0					
ANR	2015658	CompoundStatement		998:0:28254:29107	2015656	0					
ANR	2015659	IdentifierDeclStatement	struct msghdr * msg = ( struct msghdr * ) msghdr_c ;	999:1:28257:28303	2015656	0	True				
ANR	2015660	IdentifierDecl	* msg = ( struct msghdr * ) msghdr_c		2015656	0					
ANR	2015661	IdentifierDeclType	struct msghdr *		2015656	0					
ANR	2015662	Identifier	msg		2015656	1					
ANR	2015663	AssignmentExpression	* msg = ( struct msghdr * ) msghdr_c		2015656	2		=			
ANR	2015664	Identifier	msg		2015656	0					
ANR	2015665	CastExpression	( struct msghdr * ) msghdr_c		2015656	1					
ANR	2015666	CastTarget	struct msghdr *		2015656	0					
ANR	2015667	Identifier	msghdr_c		2015656	1					
ANR	2015668	IdentifierDeclStatement	struct cmsghdr * cmsg ;	1000:1:28306:28326	2015656	1	True				
ANR	2015669	IdentifierDecl	* cmsg		2015656	0					
ANR	2015670	IdentifierDeclType	struct cmsghdr *		2015656	0					
ANR	2015671	Identifier	cmsg		2015656	1					
ANR	2015672	IdentifierDeclStatement	"char buf [ sizeof ( ""element #4294967295"" ) ] ;"	1001:1:28329:28370	2015656	2	True				
ANR	2015673	IdentifierDecl	"buf [ sizeof ( ""element #4294967295"" ) ]"		2015656	0					
ANR	2015674	IdentifierDeclType	"char [ sizeof ( ""element #4294967295"" ) ]"		2015656	0					
ANR	2015675	Identifier	buf		2015656	1					
ANR	2015676	SizeofExpression	"sizeof ( ""element #4294967295"" )"		2015656	2					
ANR	2015677	Sizeof	sizeof		2015656	0					
ANR	2015678	PrimaryExpression	"""element #4294967295"""		2015656	1					
ANR	2015679	IdentifierDeclStatement	char * bufp = buf ;	1002:1:28373:28391	2015656	3	True				
ANR	2015680	IdentifierDecl	* bufp = buf		2015656	0					
ANR	2015681	IdentifierDeclType	char *		2015656	0					
ANR	2015682	Identifier	bufp		2015656	1					
ANR	2015683	AssignmentExpression	* bufp = buf		2015656	2		=			
ANR	2015684	Identifier	buf		2015656	0					
ANR	2015685	Identifier	buf		2015656	1					
ANR	2015686	IdentifierDeclStatement	uint32_t i = 1 ;	1003:1:28394:28409	2015656	4	True				
ANR	2015687	IdentifierDecl	i = 1		2015656	0					
ANR	2015688	IdentifierDeclType	uint32_t		2015656	0					
ANR	2015689	Identifier	i		2015656	1					
ANR	2015690	AssignmentExpression	i = 1		2015656	2		=			
ANR	2015691	Identifier	i		2015656	0					
ANR	2015692	PrimaryExpression	1		2015656	1					
ANR	2015693	ExpressionStatement	array_init ( zv )	1012:1:28607:28621	2015656	5	True				
ANR	2015694	CallExpression	array_init ( zv )		2015656	0					
ANR	2015695	Callee	array_init		2015656	0					
ANR	2015696	Identifier	array_init		2015656	0					
ANR	2015697	ArgumentList	zv		2015656	1					
ANR	2015698	Argument	zv		2015656	0					
ANR	2015699	Identifier	zv		2015656	0					
ANR	2015700	ForStatement	"for ( cmsg = CMSG_FIRSTHDR ( msg ) ; cmsg != NULL && ! ctx -> err . has_error ; cmsg = CMSG_NXTHDR ( msg , cmsg ) )"		2015656	6					
ANR	2015701	ForInit	cmsg = CMSG_FIRSTHDR ( msg ) ;	1014:6:28630:28655	2015656	0	True				
ANR	2015702	AssignmentExpression	cmsg = CMSG_FIRSTHDR ( msg )		2015656	0		=			
ANR	2015703	Identifier	cmsg		2015656	0					
ANR	2015704	CallExpression	CMSG_FIRSTHDR ( msg )		2015656	1					
ANR	2015705	Callee	CMSG_FIRSTHDR		2015656	0					
ANR	2015706	Identifier	CMSG_FIRSTHDR		2015656	0					
ANR	2015707	ArgumentList	msg		2015656	1					
ANR	2015708	Argument	msg		2015656	0					
ANR	2015709	Identifier	msg		2015656	0					
ANR	2015710	Condition	cmsg != NULL && ! ctx -> err . has_error	1015:3:28660:28694	2015656	1	True				
ANR	2015711	AndExpression	cmsg != NULL && ! ctx -> err . has_error		2015656	0		&&			
ANR	2015712	EqualityExpression	cmsg != NULL		2015656	0		!=			
ANR	2015713	Identifier	cmsg		2015656	0					
ANR	2015714	Identifier	NULL		2015656	1					
ANR	2015715	UnaryOperationExpression	! ctx -> err . has_error		2015656	1					
ANR	2015716	UnaryOperator	!		2015656	0					
ANR	2015717	MemberAccess	ctx -> err . has_error		2015656	1					
ANR	2015718	PtrMemberAccess	ctx -> err		2015656	0					
ANR	2015719	Identifier	ctx		2015656	0					
ANR	2015720	Identifier	err		2015656	1					
ANR	2015721	Identifier	has_error		2015656	1					
ANR	2015722	AssignmentExpression	"cmsg = CMSG_NXTHDR ( msg , cmsg )"	1016:3:28700:28728	2015656	2	True	=			
ANR	2015723	Identifier	cmsg		2015656	0					
ANR	2015724	CallExpression	"CMSG_NXTHDR ( msg , cmsg )"		2015656	1					
ANR	2015725	Callee	CMSG_NXTHDR		2015656	0					
ANR	2015726	Identifier	CMSG_NXTHDR		2015656	0					
ANR	2015727	ArgumentList	msg		2015656	1					
ANR	2015728	Argument	msg		2015656	0					
ANR	2015729	Identifier	msg		2015656	0					
ANR	2015730	Argument	cmsg		2015656	1					
ANR	2015731	Identifier	cmsg		2015656	0					
ANR	2015732	CompoundStatement		20:2:480:495	2015656	3					
ANR	2015733	IdentifierDeclStatement	"zval * elem , tmp ;"	1017:2:28735:28750	2015656	0	True				
ANR	2015734	IdentifierDecl	* elem		2015656	0					
ANR	2015735	IdentifierDeclType	zval *		2015656	0					
ANR	2015736	Identifier	elem		2015656	1					
ANR	2015737	IdentifierDecl	tmp		2015656	1					
ANR	2015738	IdentifierDeclType	zval		2015656	0					
ANR	2015739	Identifier	tmp		2015656	1					
ANR	2015740	ExpressionStatement	ZVAL_NULL ( & tmp )	1019:2:28755:28770	2015656	1	True				
ANR	2015741	CallExpression	ZVAL_NULL ( & tmp )		2015656	0					
ANR	2015742	Callee	ZVAL_NULL		2015656	0					
ANR	2015743	Identifier	ZVAL_NULL		2015656	0					
ANR	2015744	ArgumentList	& tmp		2015656	1					
ANR	2015745	Argument	& tmp		2015656	0					
ANR	2015746	UnaryOperationExpression	& tmp		2015656	0					
ANR	2015747	UnaryOperator	&		2015656	0					
ANR	2015748	Identifier	tmp		2015656	1					
ANR	2015749	ExpressionStatement	"elem = zend_hash_next_index_insert ( Z_ARRVAL_P ( zv ) , & tmp )"	1020:2:28774:28830	2015656	2	True				
ANR	2015750	AssignmentExpression	"elem = zend_hash_next_index_insert ( Z_ARRVAL_P ( zv ) , & tmp )"		2015656	0		=			
ANR	2015751	Identifier	elem		2015656	0					
ANR	2015752	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( zv ) , & tmp )"		2015656	1					
ANR	2015753	Callee	zend_hash_next_index_insert		2015656	0					
ANR	2015754	Identifier	zend_hash_next_index_insert		2015656	0					
ANR	2015755	ArgumentList	Z_ARRVAL_P ( zv )		2015656	1					
ANR	2015756	Argument	Z_ARRVAL_P ( zv )		2015656	0					
ANR	2015757	CallExpression	Z_ARRVAL_P ( zv )		2015656	0					
ANR	2015758	Callee	Z_ARRVAL_P		2015656	0					
ANR	2015759	Identifier	Z_ARRVAL_P		2015656	0					
ANR	2015760	ArgumentList	zv		2015656	1					
ANR	2015761	Argument	zv		2015656	0					
ANR	2015762	Identifier	zv		2015656	0					
ANR	2015763	Argument	& tmp		2015656	1					
ANR	2015764	UnaryOperationExpression	& tmp		2015656	0					
ANR	2015765	UnaryOperator	&		2015656	0					
ANR	2015766	Identifier	tmp		2015656	1					
ANR	2015767	IfStatement	"if ( snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf ) )"		2015656	3					
ANR	2015768	Condition	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf )"	1022:6:28839:28909	2015656	0	True				
ANR	2015769	RelationalExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ ) >= sizeof ( buf )"		2015656	0		>=			
ANR	2015770	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""element #%u"" , ( unsigned ) i ++ )"		2015656	0					
ANR	2015771	Callee	snprintf		2015656	0					
ANR	2015772	Identifier	snprintf		2015656	0					
ANR	2015773	ArgumentList	buf		2015656	1					
ANR	2015774	Argument	buf		2015656	0					
ANR	2015775	Identifier	buf		2015656	0					
ANR	2015776	Argument	sizeof ( buf )		2015656	1					
ANR	2015777	SizeofExpression	sizeof ( buf )		2015656	0					
ANR	2015778	Sizeof	sizeof		2015656	0					
ANR	2015779	SizeofOperand	buf		2015656	1					
ANR	2015780	Argument	"""element #%u"""		2015656	2					
ANR	2015781	PrimaryExpression	"""element #%u"""		2015656	0					
ANR	2015782	Argument	( unsigned ) i ++		2015656	3					
ANR	2015783	CastExpression	( unsigned ) i ++		2015656	0					
ANR	2015784	CastTarget	unsigned		2015656	0					
ANR	2015785	PostIncDecOperationExpression	i ++		2015656	1					
ANR	2015786	Identifier	i		2015656	0					
ANR	2015787	IncDec	++		2015656	1					
ANR	2015788	SizeofExpression	sizeof ( buf )		2015656	1					
ANR	2015789	Sizeof	sizeof		2015656	0					
ANR	2015790	SizeofOperand	buf		2015656	1					
ANR	2015791	CompoundStatement		25:79:657:657	2015656	1					
ANR	2015792	ExpressionStatement	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"	1023:3:28917:28958	2015656	0	True				
ANR	2015793	CallExpression	"memcpy ( buf , ""element"" , sizeof ( ""element"" ) )"		2015656	0					
ANR	2015794	Callee	memcpy		2015656	0					
ANR	2015795	Identifier	memcpy		2015656	0					
ANR	2015796	ArgumentList	buf		2015656	1					
ANR	2015797	Argument	buf		2015656	0					
ANR	2015798	Identifier	buf		2015656	0					
ANR	2015799	Argument	"""element"""		2015656	1					
ANR	2015800	PrimaryExpression	"""element"""		2015656	0					
ANR	2015801	Argument	"sizeof ( ""element"" )"		2015656	2					
ANR	2015802	SizeofExpression	"sizeof ( ""element"" )"		2015656	0					
ANR	2015803	Sizeof	sizeof		2015656	0					
ANR	2015804	PrimaryExpression	"""element"""		2015656	1					
ANR	2015805	ExpressionStatement	"zend_llist_add_element ( & ctx -> keys , & bufp )"	1025:2:28966:29007	2015656	4	True				
ANR	2015806	CallExpression	"zend_llist_add_element ( & ctx -> keys , & bufp )"		2015656	0					
ANR	2015807	Callee	zend_llist_add_element		2015656	0					
ANR	2015808	Identifier	zend_llist_add_element		2015656	0					
ANR	2015809	ArgumentList	& ctx -> keys		2015656	1					
ANR	2015810	Argument	& ctx -> keys		2015656	0					
ANR	2015811	UnaryOperationExpression	& ctx -> keys		2015656	0					
ANR	2015812	UnaryOperator	&		2015656	0					
ANR	2015813	PtrMemberAccess	ctx -> keys		2015656	1					
ANR	2015814	Identifier	ctx		2015656	0					
ANR	2015815	Identifier	keys		2015656	1					
ANR	2015816	Argument	& bufp		2015656	1					
ANR	2015817	UnaryOperationExpression	& bufp		2015656	0					
ANR	2015818	UnaryOperator	&		2015656	0					
ANR	2015819	Identifier	bufp		2015656	1					
ANR	2015820	ExpressionStatement	"to_zval_read_control ( ( const char * ) cmsg , elem , ctx )"	1027:2:29012:29063	2015656	5	True				
ANR	2015821	CallExpression	"to_zval_read_control ( ( const char * ) cmsg , elem , ctx )"		2015656	0					
ANR	2015822	Callee	to_zval_read_control		2015656	0					
ANR	2015823	Identifier	to_zval_read_control		2015656	0					
ANR	2015824	ArgumentList	( const char * ) cmsg		2015656	1					
ANR	2015825	Argument	( const char * ) cmsg		2015656	0					
ANR	2015826	CastExpression	( const char * ) cmsg		2015656	0					
ANR	2015827	CastTarget	const char *		2015656	0					
ANR	2015828	Identifier	cmsg		2015656	1					
ANR	2015829	Argument	elem		2015656	1					
ANR	2015830	Identifier	elem		2015656	0					
ANR	2015831	Argument	ctx		2015656	2					
ANR	2015832	Identifier	ctx		2015656	0					
ANR	2015833	ExpressionStatement	zend_llist_remove_tail ( & ctx -> keys )	1029:2:29068:29102	2015656	6	True				
ANR	2015834	CallExpression	zend_llist_remove_tail ( & ctx -> keys )		2015656	0					
ANR	2015835	Callee	zend_llist_remove_tail		2015656	0					
ANR	2015836	Identifier	zend_llist_remove_tail		2015656	0					
ANR	2015837	ArgumentList	& ctx -> keys		2015656	1					
ANR	2015838	Argument	& ctx -> keys		2015656	0					
ANR	2015839	UnaryOperationExpression	& ctx -> keys		2015656	0					
ANR	2015840	UnaryOperator	&		2015656	0					
ANR	2015841	PtrMemberAccess	ctx -> keys		2015656	1					
ANR	2015842	Identifier	ctx		2015656	0					
ANR	2015843	Identifier	keys		2015656	1					
ANR	2015844	ReturnType	static void		2015656	1					
ANR	2015845	Identifier	to_zval_read_control_array		2015656	2					
ANR	2015846	ParameterList	"const char * msghdr_c , zval * zv , res_context * ctx"		2015656	3					
ANR	2015847	Parameter	const char * msghdr_c	997:39:28204:28223	2015656	0	True				
ANR	2015848	ParameterType	const char *		2015656	0					
ANR	2015849	Identifier	msghdr_c		2015656	1					
ANR	2015850	Parameter	zval * zv	997:61:28226:28233	2015656	1	True				
ANR	2015851	ParameterType	zval *		2015656	0					
ANR	2015852	Identifier	zv		2015656	1					
ANR	2015853	Parameter	res_context * ctx	997:71:28236:28251	2015656	2	True				
ANR	2015854	ParameterType	res_context *		2015656	0					
ANR	2015855	Identifier	ctx		2015656	1					
ANR	2015856	CFGEntryNode	ENTRY		2015656		True				
ANR	2015857	CFGExitNode	EXIT		2015656		True				
ANR	2015858	Symbol	msg		2015656						
ANR	2015859	Symbol	elem		2015656						
ANR	2015860	Symbol	msghdr_c		2015656						
ANR	2015861	Symbol	zend_hash_next_index_insert		2015656						
ANR	2015862	Symbol	NULL		2015656						
ANR	2015863	Symbol	& ctx -> keys		2015656						
ANR	2015864	Symbol	CMSG_FIRSTHDR		2015656						
ANR	2015865	Symbol	ctx		2015656						
ANR	2015866	Symbol	ctx -> err . has_error		2015656						
ANR	2015867	Symbol	i		2015656						
ANR	2015868	Symbol	* ctx		2015656						
ANR	2015869	Symbol	ctx -> err		2015656						
ANR	2015870	Symbol	cmsg		2015656						
ANR	2015871	Symbol	buf		2015656						
ANR	2015872	Symbol	bufp		2015656						
ANR	2015873	Symbol	CMSG_NXTHDR		2015656						
ANR	2015874	Symbol	tmp		2015656						
ANR	2015875	Symbol	& tmp		2015656						
ANR	2015876	Symbol	zv		2015656						
ANR	2015877	Symbol	Z_ARRVAL_P		2015656						
ANR	2015878	Symbol	& bufp		2015656						
ANR	2015879	Symbol	snprintf		2015656						
ANR	2015880	Function	from_zval_write_name	1034:0:29139:29479							
ANR	2015881	FunctionDef	"from_zval_write_name (const zval * zname_arr , char * msghdr_c , ser_context * ctx)"		2015880	0					
ANR	2015882	CompoundStatement		1035:0:29229:29479	2015880	0					
ANR	2015883	IdentifierDeclStatement	struct sockaddr * sockaddr ;	1036:1:29232:29257	2015880	0	True				
ANR	2015884	IdentifierDecl	* sockaddr		2015880	0					
ANR	2015885	IdentifierDeclType	struct sockaddr *		2015880	0					
ANR	2015886	Identifier	sockaddr		2015880	1					
ANR	2015887	IdentifierDeclStatement	socklen_t sockaddr_len ;	1037:1:29260:29283	2015880	1	True				
ANR	2015888	IdentifierDecl	sockaddr_len		2015880	0					
ANR	2015889	IdentifierDeclType	socklen_t		2015880	0					
ANR	2015890	Identifier	sockaddr_len		2015880	1					
ANR	2015891	IdentifierDeclStatement	struct msghdr * msghdr = ( struct msghdr * ) msghdr_c ;	1038:1:29286:29335	2015880	2	True				
ANR	2015892	IdentifierDecl	* msghdr = ( struct msghdr * ) msghdr_c		2015880	0					
ANR	2015893	IdentifierDeclType	struct msghdr *		2015880	0					
ANR	2015894	Identifier	msghdr		2015880	1					
ANR	2015895	AssignmentExpression	* msghdr = ( struct msghdr * ) msghdr_c		2015880	2		=			
ANR	2015896	Identifier	msghdr		2015880	0					
ANR	2015897	CastExpression	( struct msghdr * ) msghdr_c		2015880	1					
ANR	2015898	CastTarget	struct msghdr *		2015880	0					
ANR	2015899	Identifier	msghdr_c		2015880	1					
ANR	2015900	ExpressionStatement	"from_zval_write_sockaddr_aux ( zname_arr , & sockaddr , & sockaddr_len , ctx )"	1040:1:29339:29409	2015880	3	True				
ANR	2015901	CallExpression	"from_zval_write_sockaddr_aux ( zname_arr , & sockaddr , & sockaddr_len , ctx )"		2015880	0					
ANR	2015902	Callee	from_zval_write_sockaddr_aux		2015880	0					
ANR	2015903	Identifier	from_zval_write_sockaddr_aux		2015880	0					
ANR	2015904	ArgumentList	zname_arr		2015880	1					
ANR	2015905	Argument	zname_arr		2015880	0					
ANR	2015906	Identifier	zname_arr		2015880	0					
ANR	2015907	Argument	& sockaddr		2015880	1					
ANR	2015908	UnaryOperationExpression	& sockaddr		2015880	0					
ANR	2015909	UnaryOperator	&		2015880	0					
ANR	2015910	Identifier	sockaddr		2015880	1					
ANR	2015911	Argument	& sockaddr_len		2015880	2					
ANR	2015912	UnaryOperationExpression	& sockaddr_len		2015880	0					
ANR	2015913	UnaryOperator	&		2015880	0					
ANR	2015914	Identifier	sockaddr_len		2015880	1					
ANR	2015915	Argument	ctx		2015880	3					
ANR	2015916	Identifier	ctx		2015880	0					
ANR	2015917	ExpressionStatement	msghdr -> msg_name = sockaddr	1042:1:29413:29440	2015880	4	True				
ANR	2015918	AssignmentExpression	msghdr -> msg_name = sockaddr		2015880	0		=			
ANR	2015919	PtrMemberAccess	msghdr -> msg_name		2015880	0					
ANR	2015920	Identifier	msghdr		2015880	0					
ANR	2015921	Identifier	msg_name		2015880	1					
ANR	2015922	Identifier	sockaddr		2015880	1					
ANR	2015923	ExpressionStatement	msghdr -> msg_namelen = sockaddr_len	1043:1:29443:29477	2015880	5	True				
ANR	2015924	AssignmentExpression	msghdr -> msg_namelen = sockaddr_len		2015880	0		=			
ANR	2015925	PtrMemberAccess	msghdr -> msg_namelen		2015880	0					
ANR	2015926	Identifier	msghdr		2015880	0					
ANR	2015927	Identifier	msg_namelen		2015880	1					
ANR	2015928	Identifier	sockaddr_len		2015880	1					
ANR	2015929	ReturnType	static void		2015880	1					
ANR	2015930	Identifier	from_zval_write_name		2015880	2					
ANR	2015931	ParameterList	"const zval * zname_arr , char * msghdr_c , ser_context * ctx"		2015880	3					
ANR	2015932	Parameter	const zval * zname_arr	1034:33:29172:29192	2015880	0	True				
ANR	2015933	ParameterType	const zval *		2015880	0					
ANR	2015934	Identifier	zname_arr		2015880	1					
ANR	2015935	Parameter	char * msghdr_c	1034:56:29195:29208	2015880	1	True				
ANR	2015936	ParameterType	char *		2015880	0					
ANR	2015937	Identifier	msghdr_c		2015880	1					
ANR	2015938	Parameter	ser_context * ctx	1034:72:29211:29226	2015880	2	True				
ANR	2015939	ParameterType	ser_context *		2015880	0					
ANR	2015940	Identifier	ctx		2015880	1					
ANR	2015941	CFGEntryNode	ENTRY		2015880		True				
ANR	2015942	CFGExitNode	EXIT		2015880		True				
ANR	2015943	Symbol	msghdr		2015880						
ANR	2015944	Symbol	zname_arr		2015880						
ANR	2015945	Symbol	msghdr_c		2015880						
ANR	2015946	Symbol	msghdr -> msg_name		2015880						
ANR	2015947	Symbol	ctx		2015880						
ANR	2015948	Symbol	* msghdr		2015880						
ANR	2015949	Symbol	& sockaddr_len		2015880						
ANR	2015950	Symbol	sockaddr		2015880						
ANR	2015951	Symbol	sockaddr_len		2015880						
ANR	2015952	Symbol	& sockaddr		2015880						
ANR	2015953	Symbol	msghdr -> msg_namelen		2015880						
ANR	2015954	Function	to_zval_read_name	1045:0:29481:29702							
ANR	2015955	FunctionDef	"to_zval_read_name (const char * sockaddr_p , zval * zv , res_context * ctx)"		2015954	0					
ANR	2015956	CompoundStatement		1046:0:29563:29702	2015954	0					
ANR	2015957	IdentifierDeclStatement	void * name = ( void * ) * ( void * * ) sockaddr_p ;	1047:1:29566:29605	2015954	0	True				
ANR	2015958	IdentifierDecl	* name = ( void * ) * ( void * * ) sockaddr_p		2015954	0					
ANR	2015959	IdentifierDeclType	void *		2015954	0					
ANR	2015960	Identifier	name		2015954	1					
ANR	2015961	AssignmentExpression	* name = ( void * ) * ( void * * ) sockaddr_p		2015954	2		=			
ANR	2015962	Identifier	name		2015954	0					
ANR	2015963	CastExpression	( void * ) * ( void * * ) sockaddr_p		2015954	1					
ANR	2015964	CastTarget	void *		2015954	0					
ANR	2015965	UnaryOperationExpression	* ( void * * ) sockaddr_p		2015954	1					
ANR	2015966	UnaryOperator	*		2015954	0					
ANR	2015967	CastExpression	( void * * ) sockaddr_p		2015954	1					
ANR	2015968	CastTarget	void * *		2015954	0					
ANR	2015969	Identifier	sockaddr_p		2015954	1					
ANR	2015970	IfStatement	if ( name == NULL )		2015954	1					
ANR	2015971	Condition	name == NULL	1048:5:29612:29623	2015954	0	True				
ANR	2015972	EqualityExpression	name == NULL		2015954	0		==			
ANR	2015973	Identifier	name		2015954	0					
ANR	2015974	Identifier	NULL		2015954	1					
ANR	2015975	CompoundStatement		3:19:62:62	2015954	1					
ANR	2015976	ExpressionStatement	ZVAL_NULL ( zv )	1049:2:29630:29643	2015954	0	True				
ANR	2015977	CallExpression	ZVAL_NULL ( zv )		2015954	0					
ANR	2015978	Callee	ZVAL_NULL		2015954	0					
ANR	2015979	Identifier	ZVAL_NULL		2015954	0					
ANR	2015980	ArgumentList	zv		2015954	1					
ANR	2015981	Argument	zv		2015954	0					
ANR	2015982	Identifier	zv		2015954	0					
ANR	2015983	ElseStatement	else		2015954	0					
ANR	2015984	CompoundStatement		5:8:89:89	2015954	0					
ANR	2015985	ExpressionStatement	"to_zval_read_sockaddr_aux ( name , zv , ctx )"	1051:2:29657:29697	2015954	0	True				
ANR	2015986	CallExpression	"to_zval_read_sockaddr_aux ( name , zv , ctx )"		2015954	0					
ANR	2015987	Callee	to_zval_read_sockaddr_aux		2015954	0					
ANR	2015988	Identifier	to_zval_read_sockaddr_aux		2015954	0					
ANR	2015989	ArgumentList	name		2015954	1					
ANR	2015990	Argument	name		2015954	0					
ANR	2015991	Identifier	name		2015954	0					
ANR	2015992	Argument	zv		2015954	1					
ANR	2015993	Identifier	zv		2015954	0					
ANR	2015994	Argument	ctx		2015954	2					
ANR	2015995	Identifier	ctx		2015954	0					
ANR	2015996	ReturnType	static void		2015954	1					
ANR	2015997	Identifier	to_zval_read_name		2015954	2					
ANR	2015998	ParameterList	"const char * sockaddr_p , zval * zv , res_context * ctx"		2015954	3					
ANR	2015999	Parameter	const char * sockaddr_p	1045:30:29511:29532	2015954	0	True				
ANR	2016000	ParameterType	const char *		2015954	0					
ANR	2016001	Identifier	sockaddr_p		2015954	1					
ANR	2016002	Parameter	zval * zv	1045:54:29535:29542	2015954	1	True				
ANR	2016003	ParameterType	zval *		2015954	0					
ANR	2016004	Identifier	zv		2015954	1					
ANR	2016005	Parameter	res_context * ctx	1045:64:29545:29560	2015954	2	True				
ANR	2016006	ParameterType	res_context *		2015954	0					
ANR	2016007	Identifier	ctx		2015954	1					
ANR	2016008	CFGEntryNode	ENTRY		2015954		True				
ANR	2016009	CFGExitNode	EXIT		2015954		True				
ANR	2016010	Symbol	* ( void * * ) sockaddr_p		2015954						
ANR	2016011	Symbol	NULL		2015954						
ANR	2016012	Symbol	ctx		2015954						
ANR	2016013	Symbol	* sockaddr_p		2015954						
ANR	2016014	Symbol	name		2015954						
ANR	2016015	Symbol	sockaddr_p		2015954						
ANR	2016016	Symbol	zv		2015954						
ANR	2016017	Function	from_zval_write_msghdr_buffer_size	1054:0:29704:30357							
ANR	2016018	FunctionDef	"from_zval_write_msghdr_buffer_size (const zval * elem , char * msghdr_c , ser_context * ctx)"		2016017	0					
ANR	2016019	CompoundStatement		1055:0:29803:30357	2016017	0					
ANR	2016020	IdentifierDeclStatement	zend_long lval ;	1056:1:29806:29820	2016017	0	True				
ANR	2016021	IdentifierDecl	lval		2016017	0					
ANR	2016022	IdentifierDeclType	zend_long		2016017	0					
ANR	2016023	Identifier	lval		2016017	1					
ANR	2016024	IdentifierDeclStatement	struct msghdr * msghdr = ( struct msghdr * ) msghdr_c ;	1057:1:29823:29872	2016017	1	True				
ANR	2016025	IdentifierDecl	* msghdr = ( struct msghdr * ) msghdr_c		2016017	0					
ANR	2016026	IdentifierDeclType	struct msghdr *		2016017	0					
ANR	2016027	Identifier	msghdr		2016017	1					
ANR	2016028	AssignmentExpression	* msghdr = ( struct msghdr * ) msghdr_c		2016017	2		=			
ANR	2016029	Identifier	msghdr		2016017	0					
ANR	2016030	CastExpression	( struct msghdr * ) msghdr_c		2016017	1					
ANR	2016031	CastTarget	struct msghdr *		2016017	0					
ANR	2016032	Identifier	msghdr_c		2016017	1					
ANR	2016033	ExpressionStatement	"lval = from_zval_integer_common ( elem , ctx )"	1059:1:29876:29918	2016017	2	True				
ANR	2016034	AssignmentExpression	"lval = from_zval_integer_common ( elem , ctx )"		2016017	0		=			
ANR	2016035	Identifier	lval		2016017	0					
ANR	2016036	CallExpression	"from_zval_integer_common ( elem , ctx )"		2016017	1					
ANR	2016037	Callee	from_zval_integer_common		2016017	0					
ANR	2016038	Identifier	from_zval_integer_common		2016017	0					
ANR	2016039	ArgumentList	elem		2016017	1					
ANR	2016040	Argument	elem		2016017	0					
ANR	2016041	Identifier	elem		2016017	0					
ANR	2016042	Argument	ctx		2016017	1					
ANR	2016043	Identifier	ctx		2016017	0					
ANR	2016044	IfStatement	if ( ctx -> err . has_error )		2016017	3					
ANR	2016045	Condition	ctx -> err . has_error	1060:5:29925:29942	2016017	0	True				
ANR	2016046	MemberAccess	ctx -> err . has_error		2016017	0					
ANR	2016047	PtrMemberAccess	ctx -> err		2016017	0					
ANR	2016048	Identifier	ctx		2016017	0					
ANR	2016049	Identifier	err		2016017	1					
ANR	2016050	Identifier	has_error		2016017	1					
ANR	2016051	CompoundStatement		6:25:141:141	2016017	1					
ANR	2016052	ReturnStatement	return ;	1061:2:29949:29955	2016017	0	True				
ANR	2016053	IfStatement	if ( lval < 0 || lval > MAX_USER_BUFF_SIZE )		2016017	4					
ANR	2016054	Condition	lval < 0 || lval > MAX_USER_BUFF_SIZE	1064:5:29966:30002	2016017	0	True				
ANR	2016055	OrExpression	lval < 0 || lval > MAX_USER_BUFF_SIZE		2016017	0		||			
ANR	2016056	RelationalExpression	lval < 0		2016017	0		<			
ANR	2016057	Identifier	lval		2016017	0					
ANR	2016058	PrimaryExpression	0		2016017	1					
ANR	2016059	RelationalExpression	lval > MAX_USER_BUFF_SIZE		2016017	1		>			
ANR	2016060	Identifier	lval		2016017	0					
ANR	2016061	Identifier	MAX_USER_BUFF_SIZE		2016017	1					
ANR	2016062	CompoundStatement		10:44:201:201	2016017	1					
ANR	2016063	Statement	do_from_zval_err	1065:2:30009:30024	2016017	0	True				
ANR	2016064	Statement	(	1065:18:30025:30025	2016017	1	True				
ANR	2016065	Statement	ctx	1065:19:30026:30028	2016017	2	True				
ANR	2016066	Statement	","	1065:22:30029:30029	2016017	3	True				
ANR	2016067	Statement	"""the buffer size must be between 1 and %pd; """	1065:24:30031:30075	2016017	4	True				
ANR	2016068	Statement	"""given %pd"""	1066:4:30081:30091	2016017	5	True				
ANR	2016069	Statement	","	1066:15:30092:30092	2016017	6	True				
ANR	2016070	Statement	(	1066:17:30094:30094	2016017	7	True				
ANR	2016071	Statement	zend_long	1066:18:30095:30103	2016017	8	True				
ANR	2016072	Statement	)	1066:27:30104:30104	2016017	9	True				
ANR	2016073	Statement	MAX_USER_BUFF_SIZE	1066:28:30105:30122	2016017	10	True				
ANR	2016074	Statement	","	1066:46:30123:30123	2016017	11	True				
ANR	2016075	Statement	lval	1066:48:30125:30128	2016017	12	True				
ANR	2016076	Statement	)	1066:52:30129:30129	2016017	13	True				
ANR	2016077	ExpressionStatement		1066:53:30130:30130	2016017	14	True				
ANR	2016078	ReturnStatement	return ;	1067:2:30134:30140	2016017	15	True				
ANR	2016079	ExpressionStatement	msghdr -> msg_iovlen = 1	1070:1:30147:30169	2016017	5	True				
ANR	2016080	AssignmentExpression	msghdr -> msg_iovlen = 1		2016017	0		=			
ANR	2016081	PtrMemberAccess	msghdr -> msg_iovlen		2016017	0					
ANR	2016082	Identifier	msghdr		2016017	0					
ANR	2016083	Identifier	msg_iovlen		2016017	1					
ANR	2016084	PrimaryExpression	1		2016017	1					
ANR	2016085	ExpressionStatement	"msghdr -> msg_iov = accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"	1071:1:30172:30242	2016017	6	True				
ANR	2016086	AssignmentExpression	"msghdr -> msg_iov = accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"		2016017	0		=			
ANR	2016087	PtrMemberAccess	msghdr -> msg_iov		2016017	0					
ANR	2016088	Identifier	msghdr		2016017	0					
ANR	2016089	Identifier	msg_iov		2016017	1					
ANR	2016090	CallExpression	"accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"		2016017	1					
ANR	2016091	Callee	accounted_emalloc		2016017	0					
ANR	2016092	Identifier	accounted_emalloc		2016017	0					
ANR	2016093	ArgumentList	sizeof ( * msghdr -> msg_iov ) * 1		2016017	1					
ANR	2016094	Argument	sizeof ( * msghdr -> msg_iov ) * 1		2016017	0					
ANR	2016095	MultiplicativeExpression	sizeof ( * msghdr -> msg_iov ) * 1		2016017	0		*			
ANR	2016096	SizeofExpression	sizeof ( * msghdr -> msg_iov )		2016017	0					
ANR	2016097	Sizeof	sizeof		2016017	0					
ANR	2016098	UnaryOperationExpression	* msghdr -> msg_iov		2016017	1					
ANR	2016099	UnaryOperator	*		2016017	0					
ANR	2016100	PtrMemberAccess	msghdr -> msg_iov		2016017	1					
ANR	2016101	Identifier	msghdr		2016017	0					
ANR	2016102	Identifier	msg_iov		2016017	1					
ANR	2016103	PrimaryExpression	1		2016017	1					
ANR	2016104	Argument	ctx		2016017	1					
ANR	2016105	Identifier	ctx		2016017	0					
ANR	2016106	ExpressionStatement	"msghdr -> msg_iov [ 0 ] . iov_base = accounted_emalloc ( ( size_t ) lval , ctx )"	1072:1:30245:30311	2016017	7	True				
ANR	2016107	AssignmentExpression	"msghdr -> msg_iov [ 0 ] . iov_base = accounted_emalloc ( ( size_t ) lval , ctx )"		2016017	0		=			
ANR	2016108	MemberAccess	msghdr -> msg_iov [ 0 ] . iov_base		2016017	0					
ANR	2016109	ArrayIndexing	msghdr -> msg_iov [ 0 ]		2016017	0					
ANR	2016110	PtrMemberAccess	msghdr -> msg_iov		2016017	0					
ANR	2016111	Identifier	msghdr		2016017	0					
ANR	2016112	Identifier	msg_iov		2016017	1					
ANR	2016113	PrimaryExpression	0		2016017	1					
ANR	2016114	Identifier	iov_base		2016017	1					
ANR	2016115	CallExpression	"accounted_emalloc ( ( size_t ) lval , ctx )"		2016017	1					
ANR	2016116	Callee	accounted_emalloc		2016017	0					
ANR	2016117	Identifier	accounted_emalloc		2016017	0					
ANR	2016118	ArgumentList	( size_t ) lval		2016017	1					
ANR	2016119	Argument	( size_t ) lval		2016017	0					
ANR	2016120	CastExpression	( size_t ) lval		2016017	0					
ANR	2016121	CastTarget	size_t		2016017	0					
ANR	2016122	Identifier	lval		2016017	1					
ANR	2016123	Argument	ctx		2016017	1					
ANR	2016124	Identifier	ctx		2016017	0					
ANR	2016125	ExpressionStatement	msghdr -> msg_iov [ 0 ] . iov_len = ( size_t ) lval	1073:1:30314:30355	2016017	8	True				
ANR	2016126	AssignmentExpression	msghdr -> msg_iov [ 0 ] . iov_len = ( size_t ) lval		2016017	0		=			
ANR	2016127	MemberAccess	msghdr -> msg_iov [ 0 ] . iov_len		2016017	0					
ANR	2016128	ArrayIndexing	msghdr -> msg_iov [ 0 ]		2016017	0					
ANR	2016129	PtrMemberAccess	msghdr -> msg_iov		2016017	0					
ANR	2016130	Identifier	msghdr		2016017	0					
ANR	2016131	Identifier	msg_iov		2016017	1					
ANR	2016132	PrimaryExpression	0		2016017	1					
ANR	2016133	Identifier	iov_len		2016017	1					
ANR	2016134	CastExpression	( size_t ) lval		2016017	1					
ANR	2016135	CastTarget	size_t		2016017	0					
ANR	2016136	Identifier	lval		2016017	1					
ANR	2016137	ReturnType	static void		2016017	1					
ANR	2016138	Identifier	from_zval_write_msghdr_buffer_size		2016017	2					
ANR	2016139	ParameterList	"const zval * elem , char * msghdr_c , ser_context * ctx"		2016017	3					
ANR	2016140	Parameter	const zval * elem	1054:47:29751:29766	2016017	0	True				
ANR	2016141	ParameterType	const zval *		2016017	0					
ANR	2016142	Identifier	elem		2016017	1					
ANR	2016143	Parameter	char * msghdr_c	1054:65:29769:29782	2016017	1	True				
ANR	2016144	ParameterType	char *		2016017	0					
ANR	2016145	Identifier	msghdr_c		2016017	1					
ANR	2016146	Parameter	ser_context * ctx	1054:81:29785:29800	2016017	2	True				
ANR	2016147	ParameterType	ser_context *		2016017	0					
ANR	2016148	Identifier	ctx		2016017	1					
ANR	2016149	CFGEntryNode	ENTRY		2016017		True				
ANR	2016150	CFGExitNode	EXIT		2016017		True				
ANR	2016151	Symbol	elem		2016017						
ANR	2016152	Symbol	msghdr_c		2016017						
ANR	2016153	Symbol	ctx		2016017						
ANR	2016154	Symbol	lval		2016017						
ANR	2016155	Symbol	msghdr -> msg_iovlen		2016017						
ANR	2016156	Symbol	ctx -> err . has_error		2016017						
ANR	2016157	Symbol	from_zval_integer_common		2016017						
ANR	2016158	Symbol	msghdr -> msg_iov [ 0 ] . iov_len		2016017						
ANR	2016159	Symbol	ctx -> err		2016017						
ANR	2016160	Symbol	* ctx		2016017						
ANR	2016161	Symbol	msghdr		2016017						
ANR	2016162	Symbol	msghdr -> msg_iov [ 0 ] . iov_base		2016017						
ANR	2016163	Symbol	* msghdr -> msg_iov		2016017						
ANR	2016164	Symbol	MAX_USER_BUFF_SIZE		2016017						
ANR	2016165	Symbol	msghdr -> msg_iov		2016017						
ANR	2016166	Symbol	* msghdr		2016017						
ANR	2016167	Symbol	* * msghdr		2016017						
ANR	2016168	Symbol	accounted_emalloc		2016017						
ANR	2016169	Function	from_zval_write_iov_array_aux	1075:0:30359:30794							
ANR	2016170	FunctionDef	"from_zval_write_iov_array_aux (zval * elem , unsigned i , void * * args , ser_context * ctx)"		2016169	0					
ANR	2016171	CompoundStatement		1076:0:30456:30794	2016169	0					
ANR	2016172	IdentifierDeclStatement	struct msghdr * msg = args [ 0 ] ;	1077:1:30459:30487	2016169	0	True				
ANR	2016173	IdentifierDecl	* msg = args [ 0 ]		2016169	0					
ANR	2016174	IdentifierDeclType	struct msghdr *		2016169	0					
ANR	2016175	Identifier	msg		2016169	1					
ANR	2016176	AssignmentExpression	* msg = args [ 0 ]		2016169	2		=			
ANR	2016177	Identifier	msg		2016169	0					
ANR	2016178	ArrayIndexing	args [ 0 ]		2016169	1					
ANR	2016179	Identifier	args		2016169	0					
ANR	2016180	PrimaryExpression	0		2016169	1					
ANR	2016181	IdentifierDeclStatement	size_t len ;	1078:1:30490:30502	2016169	1	True				
ANR	2016182	IdentifierDecl	len		2016169	0					
ANR	2016183	IdentifierDeclType	size_t		2016169	0					
ANR	2016184	Identifier	len		2016169	1					
ANR	2016185	IfStatement	if ( Z_REFCOUNTED_P ( elem ) )		2016169	2					
ANR	2016186	Condition	Z_REFCOUNTED_P ( elem )	1080:5:30510:30529	2016169	0	True				
ANR	2016187	CallExpression	Z_REFCOUNTED_P ( elem )		2016169	0					
ANR	2016188	Callee	Z_REFCOUNTED_P		2016169	0					
ANR	2016189	Identifier	Z_REFCOUNTED_P		2016169	0					
ANR	2016190	ArgumentList	elem		2016169	1					
ANR	2016191	Argument	elem		2016169	0					
ANR	2016192	Identifier	elem		2016169	0					
ANR	2016193	CompoundStatement		5:27:75:75	2016169	1					
ANR	2016194	ExpressionStatement	Z_ADDREF_P ( elem )	1081:2:30536:30552	2016169	0	True				
ANR	2016195	CallExpression	Z_ADDREF_P ( elem )		2016169	0					
ANR	2016196	Callee	Z_ADDREF_P		2016169	0					
ANR	2016197	Identifier	Z_ADDREF_P		2016169	0					
ANR	2016198	ArgumentList	elem		2016169	1					
ANR	2016199	Argument	elem		2016169	0					
ANR	2016200	Identifier	elem		2016169	0					
ANR	2016201	ExpressionStatement	convert_to_string_ex ( elem )	1083:1:30558:30584	2016169	3	True				
ANR	2016202	CallExpression	convert_to_string_ex ( elem )		2016169	0					
ANR	2016203	Callee	convert_to_string_ex		2016169	0					
ANR	2016204	Identifier	convert_to_string_ex		2016169	0					
ANR	2016205	ArgumentList	elem		2016169	1					
ANR	2016206	Argument	elem		2016169	0					
ANR	2016207	Identifier	elem		2016169	0					
ANR	2016208	ExpressionStatement	len = Z_STRLEN_P ( elem )	1085:1:30588:30610	2016169	4	True				
ANR	2016209	AssignmentExpression	len = Z_STRLEN_P ( elem )		2016169	0		=			
ANR	2016210	Identifier	len		2016169	0					
ANR	2016211	CallExpression	Z_STRLEN_P ( elem )		2016169	1					
ANR	2016212	Callee	Z_STRLEN_P		2016169	0					
ANR	2016213	Identifier	Z_STRLEN_P		2016169	0					
ANR	2016214	ArgumentList	elem		2016169	1					
ANR	2016215	Argument	elem		2016169	0					
ANR	2016216	Identifier	elem		2016169	0					
ANR	2016217	ExpressionStatement	"msg -> msg_iov [ i - 1 ] . iov_base = accounted_emalloc ( len , ctx )"	1086:1:30613:30671	2016169	5	True				
ANR	2016218	AssignmentExpression	"msg -> msg_iov [ i - 1 ] . iov_base = accounted_emalloc ( len , ctx )"		2016169	0		=			
ANR	2016219	MemberAccess	msg -> msg_iov [ i - 1 ] . iov_base		2016169	0					
ANR	2016220	ArrayIndexing	msg -> msg_iov [ i - 1 ]		2016169	0					
ANR	2016221	PtrMemberAccess	msg -> msg_iov		2016169	0					
ANR	2016222	Identifier	msg		2016169	0					
ANR	2016223	Identifier	msg_iov		2016169	1					
ANR	2016224	AdditiveExpression	i - 1		2016169	1		-			
ANR	2016225	Identifier	i		2016169	0					
ANR	2016226	PrimaryExpression	1		2016169	1					
ANR	2016227	Identifier	iov_base		2016169	1					
ANR	2016228	CallExpression	"accounted_emalloc ( len , ctx )"		2016169	1					
ANR	2016229	Callee	accounted_emalloc		2016169	0					
ANR	2016230	Identifier	accounted_emalloc		2016169	0					
ANR	2016231	ArgumentList	len		2016169	1					
ANR	2016232	Argument	len		2016169	0					
ANR	2016233	Identifier	len		2016169	0					
ANR	2016234	Argument	ctx		2016169	1					
ANR	2016235	Identifier	ctx		2016169	0					
ANR	2016236	ExpressionStatement	msg -> msg_iov [ i - 1 ] . iov_len = len	1087:1:30674:30707	2016169	6	True				
ANR	2016237	AssignmentExpression	msg -> msg_iov [ i - 1 ] . iov_len = len		2016169	0		=			
ANR	2016238	MemberAccess	msg -> msg_iov [ i - 1 ] . iov_len		2016169	0					
ANR	2016239	ArrayIndexing	msg -> msg_iov [ i - 1 ]		2016169	0					
ANR	2016240	PtrMemberAccess	msg -> msg_iov		2016169	0					
ANR	2016241	Identifier	msg		2016169	0					
ANR	2016242	Identifier	msg_iov		2016169	1					
ANR	2016243	AdditiveExpression	i - 1		2016169	1		-			
ANR	2016244	Identifier	i		2016169	0					
ANR	2016245	PrimaryExpression	1		2016169	1					
ANR	2016246	Identifier	iov_len		2016169	1					
ANR	2016247	Identifier	len		2016169	1					
ANR	2016248	ExpressionStatement	"memcpy ( msg -> msg_iov [ i - 1 ] . iov_base , Z_STRVAL_P ( elem ) , len )"	1088:1:30710:30769	2016169	7	True				
ANR	2016249	CallExpression	"memcpy ( msg -> msg_iov [ i - 1 ] . iov_base , Z_STRVAL_P ( elem ) , len )"		2016169	0					
ANR	2016250	Callee	memcpy		2016169	0					
ANR	2016251	Identifier	memcpy		2016169	0					
ANR	2016252	ArgumentList	msg -> msg_iov [ i - 1 ] . iov_base		2016169	1					
ANR	2016253	Argument	msg -> msg_iov [ i - 1 ] . iov_base		2016169	0					
ANR	2016254	MemberAccess	msg -> msg_iov [ i - 1 ] . iov_base		2016169	0					
ANR	2016255	ArrayIndexing	msg -> msg_iov [ i - 1 ]		2016169	0					
ANR	2016256	PtrMemberAccess	msg -> msg_iov		2016169	0					
ANR	2016257	Identifier	msg		2016169	0					
ANR	2016258	Identifier	msg_iov		2016169	1					
ANR	2016259	AdditiveExpression	i - 1		2016169	1		-			
ANR	2016260	Identifier	i		2016169	0					
ANR	2016261	PrimaryExpression	1		2016169	1					
ANR	2016262	Identifier	iov_base		2016169	1					
ANR	2016263	Argument	Z_STRVAL_P ( elem )		2016169	1					
ANR	2016264	CallExpression	Z_STRVAL_P ( elem )		2016169	0					
ANR	2016265	Callee	Z_STRVAL_P		2016169	0					
ANR	2016266	Identifier	Z_STRVAL_P		2016169	0					
ANR	2016267	ArgumentList	elem		2016169	1					
ANR	2016268	Argument	elem		2016169	0					
ANR	2016269	Identifier	elem		2016169	0					
ANR	2016270	Argument	len		2016169	2					
ANR	2016271	Identifier	len		2016169	0					
ANR	2016272	ExpressionStatement	zval_ptr_dtor ( elem )	1090:1:30773:30792	2016169	8	True				
ANR	2016273	CallExpression	zval_ptr_dtor ( elem )		2016169	0					
ANR	2016274	Callee	zval_ptr_dtor		2016169	0					
ANR	2016275	Identifier	zval_ptr_dtor		2016169	0					
ANR	2016276	ArgumentList	elem		2016169	1					
ANR	2016277	Argument	elem		2016169	0					
ANR	2016278	Identifier	elem		2016169	0					
ANR	2016279	ReturnType	static void		2016169	1					
ANR	2016280	Identifier	from_zval_write_iov_array_aux		2016169	2					
ANR	2016281	ParameterList	"zval * elem , unsigned i , void * * args , ser_context * ctx"		2016169	3					
ANR	2016282	Parameter	zval * elem	1075:42:30401:30410	2016169	0	True				
ANR	2016283	ParameterType	zval *		2016169	0					
ANR	2016284	Identifier	elem		2016169	1					
ANR	2016285	Parameter	unsigned i	1075:54:30413:30422	2016169	1	True				
ANR	2016286	ParameterType	unsigned		2016169	0					
ANR	2016287	Identifier	i		2016169	1					
ANR	2016288	Parameter	void * * args	1075:66:30425:30435	2016169	2	True				
ANR	2016289	ParameterType	void * *		2016169	0					
ANR	2016290	Identifier	args		2016169	1					
ANR	2016291	Parameter	ser_context * ctx	1075:79:30438:30453	2016169	3	True				
ANR	2016292	ParameterType	ser_context *		2016169	0					
ANR	2016293	Identifier	ctx		2016169	1					
ANR	2016294	CFGEntryNode	ENTRY		2016169		True				
ANR	2016295	CFGExitNode	EXIT		2016169		True				
ANR	2016296	Symbol	elem		2016169						
ANR	2016297	Symbol	msg		2016169						
ANR	2016298	Symbol	ctx		2016169						
ANR	2016299	Symbol	i		2016169						
ANR	2016300	Symbol	msg -> msg_iov [ i - 1 ] . iov_len		2016169						
ANR	2016301	Symbol	* msg		2016169						
ANR	2016302	Symbol	* msg -> msg_iov		2016169						
ANR	2016303	Symbol	Z_STRVAL_P		2016169						
ANR	2016304	Symbol	* args		2016169						
ANR	2016305	Symbol	args		2016169						
ANR	2016306	Symbol	* i		2016169						
ANR	2016307	Symbol	len		2016169						
ANR	2016308	Symbol	* * msg		2016169						
ANR	2016309	Symbol	Z_STRLEN_P		2016169						
ANR	2016310	Symbol	msg -> msg_iov		2016169						
ANR	2016311	Symbol	Z_REFCOUNTED_P		2016169						
ANR	2016312	Symbol	msg -> msg_iov [ i - 1 ] . iov_base		2016169						
ANR	2016313	Symbol	accounted_emalloc		2016169						
ANR	2016314	Function	from_zval_write_iov_array	1092:0:30796:31345							
ANR	2016315	FunctionDef	"from_zval_write_iov_array (const zval * arr , char * msghdr_c , ser_context * ctx)"		2016314	0					
ANR	2016316	CompoundStatement		1093:0:30885:31345	2016314	0					
ANR	2016317	IdentifierDeclStatement	int num_elem ;	1094:1:30888:30903	2016314	0	True				
ANR	2016318	IdentifierDecl	num_elem		2016314	0					
ANR	2016319	IdentifierDeclType	int		2016314	0					
ANR	2016320	Identifier	num_elem		2016314	1					
ANR	2016321	IdentifierDeclStatement	struct msghdr * msg = ( struct msghdr * ) msghdr_c ;	1095:1:30906:30951	2016314	1	True				
ANR	2016322	IdentifierDecl	* msg = ( struct msghdr * ) msghdr_c		2016314	0					
ANR	2016323	IdentifierDeclType	struct msghdr *		2016314	0					
ANR	2016324	Identifier	msg		2016314	1					
ANR	2016325	AssignmentExpression	* msg = ( struct msghdr * ) msghdr_c		2016314	2		=			
ANR	2016326	Identifier	msg		2016314	0					
ANR	2016327	CastExpression	( struct msghdr * ) msghdr_c		2016314	1					
ANR	2016328	CastTarget	struct msghdr *		2016314	0					
ANR	2016329	Identifier	msghdr_c		2016314	1					
ANR	2016330	IfStatement	if ( Z_TYPE_P ( arr ) != IS_ARRAY )		2016314	2					
ANR	2016331	Condition	Z_TYPE_P ( arr ) != IS_ARRAY	1097:5:30959:30983	2016314	0	True				
ANR	2016332	EqualityExpression	Z_TYPE_P ( arr ) != IS_ARRAY		2016314	0		!=			
ANR	2016333	CallExpression	Z_TYPE_P ( arr )		2016314	0					
ANR	2016334	Callee	Z_TYPE_P		2016314	0					
ANR	2016335	Identifier	Z_TYPE_P		2016314	0					
ANR	2016336	ArgumentList	arr		2016314	1					
ANR	2016337	Argument	arr		2016314	0					
ANR	2016338	Identifier	arr		2016314	0					
ANR	2016339	Identifier	IS_ARRAY		2016314	1					
ANR	2016340	CompoundStatement		5:32:100:100	2016314	1					
ANR	2016341	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	1098:2:30990:31043	2016314	0	True				
ANR	2016342	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		2016314	0					
ANR	2016343	Callee	do_from_zval_err		2016314	0					
ANR	2016344	Identifier	do_from_zval_err		2016314	0					
ANR	2016345	ArgumentList	ctx		2016314	1					
ANR	2016346	Argument	ctx		2016314	0					
ANR	2016347	Identifier	ctx		2016314	0					
ANR	2016348	Argument	"""%s"""		2016314	1					
ANR	2016349	PrimaryExpression	"""%s"""		2016314	0					
ANR	2016350	Argument	"""expected an array here"""		2016314	2					
ANR	2016351	PrimaryExpression	"""expected an array here"""		2016314	0					
ANR	2016352	ReturnStatement	return ;	1099:2:31047:31053	2016314	1	True				
ANR	2016353	ExpressionStatement	num_elem = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )	1102:1:31060:31110	2016314	3	True				
ANR	2016354	AssignmentExpression	num_elem = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		2016314	0		=			
ANR	2016355	Identifier	num_elem		2016314	0					
ANR	2016356	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		2016314	1					
ANR	2016357	Callee	zend_hash_num_elements		2016314	0					
ANR	2016358	Identifier	zend_hash_num_elements		2016314	0					
ANR	2016359	ArgumentList	Z_ARRVAL_P ( arr )		2016314	1					
ANR	2016360	Argument	Z_ARRVAL_P ( arr )		2016314	0					
ANR	2016361	CallExpression	Z_ARRVAL_P ( arr )		2016314	0					
ANR	2016362	Callee	Z_ARRVAL_P		2016314	0					
ANR	2016363	Identifier	Z_ARRVAL_P		2016314	0					
ANR	2016364	ArgumentList	arr		2016314	1					
ANR	2016365	Argument	arr		2016314	0					
ANR	2016366	Identifier	arr		2016314	0					
ANR	2016367	IfStatement	if ( num_elem == 0 )		2016314	4					
ANR	2016368	Condition	num_elem == 0	1103:5:31117:31129	2016314	0	True				
ANR	2016369	EqualityExpression	num_elem == 0		2016314	0		==			
ANR	2016370	Identifier	num_elem		2016314	0					
ANR	2016371	PrimaryExpression	0		2016314	1					
ANR	2016372	CompoundStatement		11:20:246:246	2016314	1					
ANR	2016373	ReturnStatement	return ;	1104:2:31136:31142	2016314	0	True				
ANR	2016374	ExpressionStatement	"msg -> msg_iov = accounted_safe_ecalloc ( num_elem , sizeof * msg -> msg_iov , 0 , ctx )"	1107:1:31149:31226	2016314	5	True				
ANR	2016375	AssignmentExpression	"msg -> msg_iov = accounted_safe_ecalloc ( num_elem , sizeof * msg -> msg_iov , 0 , ctx )"		2016314	0		=			
ANR	2016376	PtrMemberAccess	msg -> msg_iov		2016314	0					
ANR	2016377	Identifier	msg		2016314	0					
ANR	2016378	Identifier	msg_iov		2016314	1					
ANR	2016379	CallExpression	"accounted_safe_ecalloc ( num_elem , sizeof * msg -> msg_iov , 0 , ctx )"		2016314	1					
ANR	2016380	Callee	accounted_safe_ecalloc		2016314	0					
ANR	2016381	Identifier	accounted_safe_ecalloc		2016314	0					
ANR	2016382	ArgumentList	num_elem		2016314	1					
ANR	2016383	Argument	num_elem		2016314	0					
ANR	2016384	Identifier	num_elem		2016314	0					
ANR	2016385	Argument	sizeof * msg -> msg_iov		2016314	1					
ANR	2016386	SizeofExpression	sizeof * msg -> msg_iov		2016314	0					
ANR	2016387	Sizeof	sizeof		2016314	0					
ANR	2016388	UnaryOperationExpression	* msg -> msg_iov		2016314	1					
ANR	2016389	UnaryOperator	*		2016314	0					
ANR	2016390	PtrMemberAccess	msg -> msg_iov		2016314	1					
ANR	2016391	Identifier	msg		2016314	0					
ANR	2016392	Identifier	msg_iov		2016314	1					
ANR	2016393	Argument	0		2016314	2					
ANR	2016394	PrimaryExpression	0		2016314	0					
ANR	2016395	Argument	ctx		2016314	3					
ANR	2016396	Identifier	ctx		2016314	0					
ANR	2016397	ExpressionStatement	msg -> msg_iovlen = ( size_t ) num_elem	1108:1:31229:31263	2016314	6	True				
ANR	2016398	AssignmentExpression	msg -> msg_iovlen = ( size_t ) num_elem		2016314	0		=			
ANR	2016399	PtrMemberAccess	msg -> msg_iovlen		2016314	0					
ANR	2016400	Identifier	msg		2016314	0					
ANR	2016401	Identifier	msg_iovlen		2016314	1					
ANR	2016402	CastExpression	( size_t ) num_elem		2016314	1					
ANR	2016403	CastTarget	size_t		2016314	0					
ANR	2016404	Identifier	num_elem		2016314	1					
ANR	2016405	ExpressionStatement	"from_array_iterate ( arr , from_zval_write_iov_array_aux , ( void * * ) & msg , ctx )"	1110:4:31270:31343	2016314	7	True				
ANR	2016406	CallExpression	"from_array_iterate ( arr , from_zval_write_iov_array_aux , ( void * * ) & msg , ctx )"		2016314	0					
ANR	2016407	Callee	from_array_iterate		2016314	0					
ANR	2016408	Identifier	from_array_iterate		2016314	0					
ANR	2016409	ArgumentList	arr		2016314	1					
ANR	2016410	Argument	arr		2016314	0					
ANR	2016411	Identifier	arr		2016314	0					
ANR	2016412	Argument	from_zval_write_iov_array_aux		2016314	1					
ANR	2016413	Identifier	from_zval_write_iov_array_aux		2016314	0					
ANR	2016414	Argument	( void * * ) & msg		2016314	2					
ANR	2016415	CastExpression	( void * * ) & msg		2016314	0					
ANR	2016416	CastTarget	void * *		2016314	0					
ANR	2016417	UnaryOperationExpression	& msg		2016314	1					
ANR	2016418	UnaryOperator	&		2016314	0					
ANR	2016419	Identifier	msg		2016314	1					
ANR	2016420	Argument	ctx		2016314	3					
ANR	2016421	Identifier	ctx		2016314	0					
ANR	2016422	ReturnType	static void		2016314	1					
ANR	2016423	Identifier	from_zval_write_iov_array		2016314	2					
ANR	2016424	ParameterList	"const zval * arr , char * msghdr_c , ser_context * ctx"		2016314	3					
ANR	2016425	Parameter	const zval * arr	1092:38:30834:30848	2016314	0	True				
ANR	2016426	ParameterType	const zval *		2016314	0					
ANR	2016427	Identifier	arr		2016314	1					
ANR	2016428	Parameter	char * msghdr_c	1092:55:30851:30864	2016314	1	True				
ANR	2016429	ParameterType	char *		2016314	0					
ANR	2016430	Identifier	msghdr_c		2016314	1					
ANR	2016431	Parameter	ser_context * ctx	1092:71:30867:30882	2016314	2	True				
ANR	2016432	ParameterType	ser_context *		2016314	0					
ANR	2016433	Identifier	ctx		2016314	1					
ANR	2016434	CFGEntryNode	ENTRY		2016314		True				
ANR	2016435	CFGExitNode	EXIT		2016314		True				
ANR	2016436	Symbol	arr		2016314						
ANR	2016437	Symbol	msg		2016314						
ANR	2016438	Symbol	& msg		2016314						
ANR	2016439	Symbol	msghdr_c		2016314						
ANR	2016440	Symbol	zend_hash_num_elements		2016314						
ANR	2016441	Symbol	ctx		2016314						
ANR	2016442	Symbol	* msg		2016314						
ANR	2016443	Symbol	num_elem		2016314						
ANR	2016444	Symbol	Z_TYPE_P		2016314						
ANR	2016445	Symbol	accounted_safe_ecalloc		2016314						
ANR	2016446	Symbol	* msg -> msg_iov		2016314						
ANR	2016447	Symbol	IS_ARRAY		2016314						
ANR	2016448	Symbol	* * msg		2016314						
ANR	2016449	Symbol	from_zval_write_iov_array_aux		2016314						
ANR	2016450	Symbol	msg -> msg_iov		2016314						
ANR	2016451	Symbol	Z_ARRVAL_P		2016314						
ANR	2016452	Symbol	msg -> msg_iovlen		2016314						
ANR	2016453	Function	from_zval_write_controllen	1112:0:31347:31855							
ANR	2016454	FunctionDef	"from_zval_write_controllen (const zval * elem , char * msghdr_c , ser_context * ctx)"		2016453	0					
ANR	2016455	CompoundStatement		1113:0:31438:31855	2016453	0					
ANR	2016456	IdentifierDeclStatement	struct msghdr * msghdr = ( struct msghdr * ) msghdr_c ;	1114:1:31441:31490	2016453	0	True				
ANR	2016457	IdentifierDecl	* msghdr = ( struct msghdr * ) msghdr_c		2016453	0					
ANR	2016458	IdentifierDeclType	struct msghdr *		2016453	0					
ANR	2016459	Identifier	msghdr		2016453	1					
ANR	2016460	AssignmentExpression	* msghdr = ( struct msghdr * ) msghdr_c		2016453	2		=			
ANR	2016461	Identifier	msghdr		2016453	0					
ANR	2016462	CastExpression	( struct msghdr * ) msghdr_c		2016453	1					
ANR	2016463	CastTarget	struct msghdr *		2016453	0					
ANR	2016464	Identifier	msghdr_c		2016453	1					
ANR	2016465	IdentifierDeclStatement	uint32_t len ;	1115:1:31493:31505	2016453	1	True				
ANR	2016466	IdentifierDecl	len		2016453	0					
ANR	2016467	IdentifierDeclType	uint32_t		2016453	0					
ANR	2016468	Identifier	len		2016453	1					
ANR	2016469	ExpressionStatement	"from_zval_write_uint32 ( elem , ( char * ) & len , ctx )"	1120:1:31620:31666	2016453	2	True				
ANR	2016470	CallExpression	"from_zval_write_uint32 ( elem , ( char * ) & len , ctx )"		2016453	0					
ANR	2016471	Callee	from_zval_write_uint32		2016453	0					
ANR	2016472	Identifier	from_zval_write_uint32		2016453	0					
ANR	2016473	ArgumentList	elem		2016453	1					
ANR	2016474	Argument	elem		2016453	0					
ANR	2016475	Identifier	elem		2016453	0					
ANR	2016476	Argument	( char * ) & len		2016453	1					
ANR	2016477	CastExpression	( char * ) & len		2016453	0					
ANR	2016478	CastTarget	char *		2016453	0					
ANR	2016479	UnaryOperationExpression	& len		2016453	1					
ANR	2016480	UnaryOperator	&		2016453	0					
ANR	2016481	Identifier	len		2016453	1					
ANR	2016482	Argument	ctx		2016453	2					
ANR	2016483	Identifier	ctx		2016453	0					
ANR	2016484	IfStatement	if ( ! ctx -> err . has_error && len == 0 )		2016453	3					
ANR	2016485	Condition	! ctx -> err . has_error && len == 0	1121:5:31673:31703	2016453	0	True				
ANR	2016486	AndExpression	! ctx -> err . has_error && len == 0		2016453	0		&&			
ANR	2016487	UnaryOperationExpression	! ctx -> err . has_error		2016453	0					
ANR	2016488	UnaryOperator	!		2016453	0					
ANR	2016489	MemberAccess	ctx -> err . has_error		2016453	1					
ANR	2016490	PtrMemberAccess	ctx -> err		2016453	0					
ANR	2016491	Identifier	ctx		2016453	0					
ANR	2016492	Identifier	err		2016453	1					
ANR	2016493	Identifier	has_error		2016453	1					
ANR	2016494	EqualityExpression	len == 0		2016453	1		==			
ANR	2016495	Identifier	len		2016453	0					
ANR	2016496	PrimaryExpression	0		2016453	1					
ANR	2016497	CompoundStatement		9:38:267:267	2016453	1					
ANR	2016498	ExpressionStatement	"do_from_zval_err ( ctx , ""controllen cannot be 0"" )"	1122:2:31710:31757	2016453	0	True				
ANR	2016499	CallExpression	"do_from_zval_err ( ctx , ""controllen cannot be 0"" )"		2016453	0					
ANR	2016500	Callee	do_from_zval_err		2016453	0					
ANR	2016501	Identifier	do_from_zval_err		2016453	0					
ANR	2016502	ArgumentList	ctx		2016453	1					
ANR	2016503	Argument	ctx		2016453	0					
ANR	2016504	Identifier	ctx		2016453	0					
ANR	2016505	Argument	"""controllen cannot be 0"""		2016453	1					
ANR	2016506	PrimaryExpression	"""controllen cannot be 0"""		2016453	0					
ANR	2016507	ReturnStatement	return ;	1123:2:31761:31767	2016453	1	True				
ANR	2016508	ExpressionStatement	"msghdr -> msg_control = accounted_emalloc ( len , ctx )"	1125:1:31773:31822	2016453	4	True				
ANR	2016509	AssignmentExpression	"msghdr -> msg_control = accounted_emalloc ( len , ctx )"		2016453	0		=			
ANR	2016510	PtrMemberAccess	msghdr -> msg_control		2016453	0					
ANR	2016511	Identifier	msghdr		2016453	0					
ANR	2016512	Identifier	msg_control		2016453	1					
ANR	2016513	CallExpression	"accounted_emalloc ( len , ctx )"		2016453	1					
ANR	2016514	Callee	accounted_emalloc		2016453	0					
ANR	2016515	Identifier	accounted_emalloc		2016453	0					
ANR	2016516	ArgumentList	len		2016453	1					
ANR	2016517	Argument	len		2016453	0					
ANR	2016518	Identifier	len		2016453	0					
ANR	2016519	Argument	ctx		2016453	1					
ANR	2016520	Identifier	ctx		2016453	0					
ANR	2016521	ExpressionStatement	msghdr -> msg_controllen = len	1126:1:31825:31853	2016453	5	True				
ANR	2016522	AssignmentExpression	msghdr -> msg_controllen = len		2016453	0		=			
ANR	2016523	PtrMemberAccess	msghdr -> msg_controllen		2016453	0					
ANR	2016524	Identifier	msghdr		2016453	0					
ANR	2016525	Identifier	msg_controllen		2016453	1					
ANR	2016526	Identifier	len		2016453	1					
ANR	2016527	ReturnType	static void		2016453	1					
ANR	2016528	Identifier	from_zval_write_controllen		2016453	2					
ANR	2016529	ParameterList	"const zval * elem , char * msghdr_c , ser_context * ctx"		2016453	3					
ANR	2016530	Parameter	const zval * elem	1112:39:31386:31401	2016453	0	True				
ANR	2016531	ParameterType	const zval *		2016453	0					
ANR	2016532	Identifier	elem		2016453	1					
ANR	2016533	Parameter	char * msghdr_c	1112:57:31404:31417	2016453	1	True				
ANR	2016534	ParameterType	char *		2016453	0					
ANR	2016535	Identifier	msghdr_c		2016453	1					
ANR	2016536	Parameter	ser_context * ctx	1112:73:31420:31435	2016453	2	True				
ANR	2016537	ParameterType	ser_context *		2016453	0					
ANR	2016538	Identifier	ctx		2016453	1					
ANR	2016539	CFGEntryNode	ENTRY		2016453		True				
ANR	2016540	CFGExitNode	EXIT		2016453		True				
ANR	2016541	Symbol	elem		2016453						
ANR	2016542	Symbol	msghdr_c		2016453						
ANR	2016543	Symbol	ctx		2016453						
ANR	2016544	Symbol	msghdr -> msg_control		2016453						
ANR	2016545	Symbol	ctx -> err . has_error		2016453						
ANR	2016546	Symbol	ctx -> err		2016453						
ANR	2016547	Symbol	* ctx		2016453						
ANR	2016548	Symbol	msghdr -> msg_controllen		2016453						
ANR	2016549	Symbol	msghdr		2016453						
ANR	2016550	Symbol	len		2016453						
ANR	2016551	Symbol	* msghdr		2016453						
ANR	2016552	Symbol	& len		2016453						
ANR	2016553	Symbol	accounted_emalloc		2016453						
ANR	2016554	Function	from_zval_write_msghdr_send	1128:0:31857:32277							
ANR	2016555	FunctionDef	"from_zval_write_msghdr_send (const zval * container , char * msghdr_c , ser_context * ctx)"		2016554	0					
ANR	2016556	CompoundStatement		1129:0:31947:32277	2016554	0					
ANR	2016557	Statement	static	1130:1:31950:31955	2016554	0	True				
ANR	2016558	IdentifierDeclStatement	"const field_descriptor descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""iov"" , sizeof ( ""iov"" ) , 0 , 0 , from_zval_write_iov_array , 0 } , { ""control"" , sizeof ( ""control"" ) , 0 , 0 , from_zval_write_control_array , 0 } , { 0 } } ;"	1130:8:31957:32205	2016554	1	True				
ANR	2016559	IdentifierDecl	"descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""iov"" , sizeof ( ""iov"" ) , 0 , 0 , from_zval_write_iov_array , 0 } , { ""control"" , sizeof ( ""control"" ) , 0 , 0 , from_zval_write_control_array , 0 } , { 0 } }"		2016554	0					
ANR	2016560	IdentifierDeclType	const field_descriptor [ ]		2016554	0					
ANR	2016561	Identifier	descriptors		2016554	1					
ANR	2016562	AssignmentExpression	"descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""iov"" , sizeof ( ""iov"" ) , 0 , 0 , from_zval_write_iov_array , 0 } , { ""control"" , sizeof ( ""control"" ) , 0 , 0 , from_zval_write_control_array , 0 } , { 0 } }"		2016554	2		=			
ANR	2016563	Identifier	descriptors		2016554	0					
ANR	2016564	InitializerList	"""name"""		2016554	1					
ANR	2016565	InitializerList	"""name"""		2016554	0					
ANR	2016566	PrimaryExpression	"""name"""		2016554	0					
ANR	2016567	SizeofExpression	"sizeof ( ""name"" )"		2016554	1					
ANR	2016568	Sizeof	sizeof		2016554	0					
ANR	2016569	PrimaryExpression	"""name"""		2016554	1					
ANR	2016570	PrimaryExpression	0		2016554	2					
ANR	2016571	PrimaryExpression	0		2016554	3					
ANR	2016572	Identifier	from_zval_write_name		2016554	4					
ANR	2016573	PrimaryExpression	0		2016554	5					
ANR	2016574	InitializerList	"""iov"""		2016554	1					
ANR	2016575	PrimaryExpression	"""iov"""		2016554	0					
ANR	2016576	SizeofExpression	"sizeof ( ""iov"" )"		2016554	1					
ANR	2016577	Sizeof	sizeof		2016554	0					
ANR	2016578	PrimaryExpression	"""iov"""		2016554	1					
ANR	2016579	PrimaryExpression	0		2016554	2					
ANR	2016580	PrimaryExpression	0		2016554	3					
ANR	2016581	Identifier	from_zval_write_iov_array		2016554	4					
ANR	2016582	PrimaryExpression	0		2016554	5					
ANR	2016583	InitializerList	"""control"""		2016554	2					
ANR	2016584	PrimaryExpression	"""control"""		2016554	0					
ANR	2016585	SizeofExpression	"sizeof ( ""control"" )"		2016554	1					
ANR	2016586	Sizeof	sizeof		2016554	0					
ANR	2016587	PrimaryExpression	"""control"""		2016554	1					
ANR	2016588	PrimaryExpression	0		2016554	2					
ANR	2016589	PrimaryExpression	0		2016554	3					
ANR	2016590	Identifier	from_zval_write_control_array		2016554	4					
ANR	2016591	PrimaryExpression	0		2016554	5					
ANR	2016592	InitializerList	0		2016554	3					
ANR	2016593	PrimaryExpression	0		2016554	0					
ANR	2016594	ExpressionStatement	"from_zval_write_aggregation ( container , msghdr_c , descriptors , ctx )"	1137:1:32209:32275	2016554	2	True				
ANR	2016595	CallExpression	"from_zval_write_aggregation ( container , msghdr_c , descriptors , ctx )"		2016554	0					
ANR	2016596	Callee	from_zval_write_aggregation		2016554	0					
ANR	2016597	Identifier	from_zval_write_aggregation		2016554	0					
ANR	2016598	ArgumentList	container		2016554	1					
ANR	2016599	Argument	container		2016554	0					
ANR	2016600	Identifier	container		2016554	0					
ANR	2016601	Argument	msghdr_c		2016554	1					
ANR	2016602	Identifier	msghdr_c		2016554	0					
ANR	2016603	Argument	descriptors		2016554	2					
ANR	2016604	Identifier	descriptors		2016554	0					
ANR	2016605	Argument	ctx		2016554	3					
ANR	2016606	Identifier	ctx		2016554	0					
ANR	2016607	ReturnType	void		2016554	1					
ANR	2016608	Identifier	from_zval_write_msghdr_send		2016554	2					
ANR	2016609	ParameterList	"const zval * container , char * msghdr_c , ser_context * ctx"		2016554	3					
ANR	2016610	Parameter	const zval * container	1128:33:31890:31910	2016554	0	True				
ANR	2016611	ParameterType	const zval *		2016554	0					
ANR	2016612	Identifier	container		2016554	1					
ANR	2016613	Parameter	char * msghdr_c	1128:56:31913:31926	2016554	1	True				
ANR	2016614	ParameterType	char *		2016554	0					
ANR	2016615	Identifier	msghdr_c		2016554	1					
ANR	2016616	Parameter	ser_context * ctx	1128:72:31929:31944	2016554	2	True				
ANR	2016617	ParameterType	ser_context *		2016554	0					
ANR	2016618	Identifier	ctx		2016554	1					
ANR	2016619	CFGEntryNode	ENTRY		2016554		True				
ANR	2016620	CFGExitNode	EXIT		2016554		True				
ANR	2016621	Symbol	container		2016554						
ANR	2016622	Symbol	msghdr_c		2016554						
ANR	2016623	Symbol	descriptors		2016554						
ANR	2016624	Symbol	from_zval_write_iov_array		2016554						
ANR	2016625	Symbol	ctx		2016554						
ANR	2016626	Symbol	from_zval_write_control_array		2016554						
ANR	2016627	Symbol	from_zval_write_name		2016554						
ANR	2016628	Function	from_zval_write_msghdr_recv	1139:0:32279:33900							
ANR	2016629	FunctionDef	"from_zval_write_msghdr_recv (const zval * container , char * msghdr_c , ser_context * ctx)"		2016628	0					
ANR	2016630	CompoundStatement		1140:0:32369:33900	2016628	0					
ANR	2016631	Statement	static	1155:1:32837:32842	2016628	0	True				
ANR	2016632	IdentifierDeclStatement	"const field_descriptor descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""buffer_size"" , sizeof ( ""buffer_size"" ) , 0 , 0 , from_zval_write_msghdr_buffer_size , 0 } , { ""controllen"" , sizeof ( ""controllen"" ) , 1 , 0 , from_zval_write_controllen , 0 } , { 0 } } ;"	1155:8:32844:33120	2016628	1	True				
ANR	2016633	IdentifierDecl	"descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""buffer_size"" , sizeof ( ""buffer_size"" ) , 0 , 0 , from_zval_write_msghdr_buffer_size , 0 } , { ""controllen"" , sizeof ( ""controllen"" ) , 1 , 0 , from_zval_write_controllen , 0 } , { 0 } }"		2016628	0					
ANR	2016634	IdentifierDeclType	const field_descriptor [ ]		2016628	0					
ANR	2016635	Identifier	descriptors		2016628	1					
ANR	2016636	AssignmentExpression	"descriptors [ ] = { { ""name"" , sizeof ( ""name"" ) , 0 , 0 , from_zval_write_name , 0 } , { ""buffer_size"" , sizeof ( ""buffer_size"" ) , 0 , 0 , from_zval_write_msghdr_buffer_size , 0 } , { ""controllen"" , sizeof ( ""controllen"" ) , 1 , 0 , from_zval_write_controllen , 0 } , { 0 } }"		2016628	2		=			
ANR	2016637	Identifier	descriptors		2016628	0					
ANR	2016638	InitializerList	"""name"""		2016628	1					
ANR	2016639	InitializerList	"""name"""		2016628	0					
ANR	2016640	PrimaryExpression	"""name"""		2016628	0					
ANR	2016641	SizeofExpression	"sizeof ( ""name"" )"		2016628	1					
ANR	2016642	Sizeof	sizeof		2016628	0					
ANR	2016643	PrimaryExpression	"""name"""		2016628	1					
ANR	2016644	PrimaryExpression	0		2016628	2					
ANR	2016645	PrimaryExpression	0		2016628	3					
ANR	2016646	Identifier	from_zval_write_name		2016628	4					
ANR	2016647	PrimaryExpression	0		2016628	5					
ANR	2016648	InitializerList	"""buffer_size"""		2016628	1					
ANR	2016649	PrimaryExpression	"""buffer_size"""		2016628	0					
ANR	2016650	SizeofExpression	"sizeof ( ""buffer_size"" )"		2016628	1					
ANR	2016651	Sizeof	sizeof		2016628	0					
ANR	2016652	PrimaryExpression	"""buffer_size"""		2016628	1					
ANR	2016653	PrimaryExpression	0		2016628	2					
ANR	2016654	PrimaryExpression	0		2016628	3					
ANR	2016655	Identifier	from_zval_write_msghdr_buffer_size		2016628	4					
ANR	2016656	PrimaryExpression	0		2016628	5					
ANR	2016657	InitializerList	"""controllen"""		2016628	2					
ANR	2016658	PrimaryExpression	"""controllen"""		2016628	0					
ANR	2016659	SizeofExpression	"sizeof ( ""controllen"" )"		2016628	1					
ANR	2016660	Sizeof	sizeof		2016628	0					
ANR	2016661	PrimaryExpression	"""controllen"""		2016628	1					
ANR	2016662	PrimaryExpression	1		2016628	2					
ANR	2016663	PrimaryExpression	0		2016628	3					
ANR	2016664	Identifier	from_zval_write_controllen		2016628	4					
ANR	2016665	PrimaryExpression	0		2016628	5					
ANR	2016666	InitializerList	0		2016628	3					
ANR	2016667	PrimaryExpression	0		2016628	0					
ANR	2016668	IdentifierDeclStatement	struct msghdr * msghdr = ( struct msghdr * ) msghdr_c ;	1161:1:33123:33173	2016628	2	True				
ANR	2016669	IdentifierDecl	* msghdr = ( struct msghdr * ) msghdr_c		2016628	0					
ANR	2016670	IdentifierDeclType	struct msghdr *		2016628	0					
ANR	2016671	Identifier	msghdr		2016628	1					
ANR	2016672	AssignmentExpression	* msghdr = ( struct msghdr * ) msghdr_c		2016628	2		=			
ANR	2016673	Identifier	msghdr		2016628	0					
ANR	2016674	CastExpression	( struct msghdr * ) msghdr_c		2016628	1					
ANR	2016675	CastTarget	struct msghdr *		2016628	0					
ANR	2016676	Identifier	msghdr_c		2016628	1					
ANR	2016677	IdentifierDeclStatement	"const int falsev = 0 , * falsevp = & falsev ;"	1162:1:33176:33222	2016628	3	True				
ANR	2016678	IdentifierDecl	falsev = 0		2016628	0					
ANR	2016679	IdentifierDeclType	const int		2016628	0					
ANR	2016680	Identifier	falsev		2016628	1					
ANR	2016681	AssignmentExpression	falsev = 0		2016628	2		=			
ANR	2016682	Identifier	falsev		2016628	0					
ANR	2016683	PrimaryExpression	0		2016628	1					
ANR	2016684	IdentifierDecl	* falsevp = & falsev		2016628	1					
ANR	2016685	IdentifierDeclType	const int *		2016628	0					
ANR	2016686	Identifier	falsevp		2016628	1					
ANR	2016687	AssignmentExpression	* falsevp = & falsev		2016628	2		=			
ANR	2016688	Identifier	falsevp		2016628	0					
ANR	2016689	UnaryOperationExpression	& falsev		2016628	1					
ANR	2016690	UnaryOperator	&		2016628	0					
ANR	2016691	Identifier	falsev		2016628	1					
ANR	2016692	IfStatement	"if ( zend_hash_str_add_ptr ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) - 1 , ( void * ) falsevp ) == NULL )"		2016628	4					
ANR	2016693	Condition	"zend_hash_str_add_ptr ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) - 1 , ( void * ) falsevp ) == NULL"	1165:5:33230:33339	2016628	0	True				
ANR	2016694	EqualityExpression	"zend_hash_str_add_ptr ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) - 1 , ( void * ) falsevp ) == NULL"		2016628	0		==			
ANR	2016695	CallExpression	"zend_hash_str_add_ptr ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) - 1 , ( void * ) falsevp )"		2016628	0					
ANR	2016696	Callee	zend_hash_str_add_ptr		2016628	0					
ANR	2016697	Identifier	zend_hash_str_add_ptr		2016628	0					
ANR	2016698	ArgumentList	& ctx -> params		2016628	1					
ANR	2016699	Argument	& ctx -> params		2016628	0					
ANR	2016700	UnaryOperationExpression	& ctx -> params		2016628	0					
ANR	2016701	UnaryOperator	&		2016628	0					
ANR	2016702	PtrMemberAccess	ctx -> params		2016628	1					
ANR	2016703	Identifier	ctx		2016628	0					
ANR	2016704	Identifier	params		2016628	1					
ANR	2016705	Argument	KEY_FILL_SOCKADDR		2016628	1					
ANR	2016706	Identifier	KEY_FILL_SOCKADDR		2016628	0					
ANR	2016707	Argument	sizeof ( KEY_FILL_SOCKADDR ) - 1		2016628	2					
ANR	2016708	AdditiveExpression	sizeof ( KEY_FILL_SOCKADDR ) - 1		2016628	0		-			
ANR	2016709	SizeofExpression	sizeof ( KEY_FILL_SOCKADDR )		2016628	0					
ANR	2016710	Sizeof	sizeof		2016628	0					
ANR	2016711	SizeofOperand	KEY_FILL_SOCKADDR		2016628	1					
ANR	2016712	PrimaryExpression	1		2016628	1					
ANR	2016713	Argument	( void * ) falsevp		2016628	3					
ANR	2016714	CastExpression	( void * ) falsevp		2016628	0					
ANR	2016715	CastTarget	void *		2016628	0					
ANR	2016716	Identifier	falsevp		2016628	1					
ANR	2016717	Identifier	NULL		2016628	1					
ANR	2016718	CompoundStatement		26:117:972:972	2016628	1					
ANR	2016719	ExpressionStatement	"do_from_zval_err ( ctx , ""could not add fill_sockaddr; this is a bug"" )"	1166:2:33346:33413	2016628	0	True				
ANR	2016720	CallExpression	"do_from_zval_err ( ctx , ""could not add fill_sockaddr; this is a bug"" )"		2016628	0					
ANR	2016721	Callee	do_from_zval_err		2016628	0					
ANR	2016722	Identifier	do_from_zval_err		2016628	0					
ANR	2016723	ArgumentList	ctx		2016628	1					
ANR	2016724	Argument	ctx		2016628	0					
ANR	2016725	Identifier	ctx		2016628	0					
ANR	2016726	Argument	"""could not add fill_sockaddr; this is a bug"""		2016628	1					
ANR	2016727	PrimaryExpression	"""could not add fill_sockaddr; this is a bug"""		2016628	0					
ANR	2016728	ReturnStatement	return ;	1167:2:33417:33423	2016628	1	True				
ANR	2016729	ExpressionStatement	"from_zval_write_aggregation ( container , msghdr_c , descriptors , ctx )"	1170:1:33430:33496	2016628	5	True				
ANR	2016730	CallExpression	"from_zval_write_aggregation ( container , msghdr_c , descriptors , ctx )"		2016628	0					
ANR	2016731	Callee	from_zval_write_aggregation		2016628	0					
ANR	2016732	Identifier	from_zval_write_aggregation		2016628	0					
ANR	2016733	ArgumentList	container		2016628	1					
ANR	2016734	Argument	container		2016628	0					
ANR	2016735	Identifier	container		2016628	0					
ANR	2016736	Argument	msghdr_c		2016628	1					
ANR	2016737	Identifier	msghdr_c		2016628	0					
ANR	2016738	Argument	descriptors		2016628	2					
ANR	2016739	Identifier	descriptors		2016628	0					
ANR	2016740	Argument	ctx		2016628	3					
ANR	2016741	Identifier	ctx		2016628	0					
ANR	2016742	ExpressionStatement	"zend_hash_str_del ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) - 1 )"	1172:1:33500:33581	2016628	6	True				
ANR	2016743	CallExpression	"zend_hash_str_del ( & ctx -> params , KEY_FILL_SOCKADDR , sizeof ( KEY_FILL_SOCKADDR ) - 1 )"		2016628	0					
ANR	2016744	Callee	zend_hash_str_del		2016628	0					
ANR	2016745	Identifier	zend_hash_str_del		2016628	0					
ANR	2016746	ArgumentList	& ctx -> params		2016628	1					
ANR	2016747	Argument	& ctx -> params		2016628	0					
ANR	2016748	UnaryOperationExpression	& ctx -> params		2016628	0					
ANR	2016749	UnaryOperator	&		2016628	0					
ANR	2016750	PtrMemberAccess	ctx -> params		2016628	1					
ANR	2016751	Identifier	ctx		2016628	0					
ANR	2016752	Identifier	params		2016628	1					
ANR	2016753	Argument	KEY_FILL_SOCKADDR		2016628	1					
ANR	2016754	Identifier	KEY_FILL_SOCKADDR		2016628	0					
ANR	2016755	Argument	sizeof ( KEY_FILL_SOCKADDR ) - 1		2016628	2					
ANR	2016756	AdditiveExpression	sizeof ( KEY_FILL_SOCKADDR ) - 1		2016628	0		-			
ANR	2016757	SizeofExpression	sizeof ( KEY_FILL_SOCKADDR )		2016628	0					
ANR	2016758	Sizeof	sizeof		2016628	0					
ANR	2016759	SizeofOperand	KEY_FILL_SOCKADDR		2016628	1					
ANR	2016760	PrimaryExpression	1		2016628	1					
ANR	2016761	IfStatement	if ( ctx -> err . has_error )		2016628	7					
ANR	2016762	Condition	ctx -> err . has_error	1173:5:33588:33605	2016628	0	True				
ANR	2016763	MemberAccess	ctx -> err . has_error		2016628	0					
ANR	2016764	PtrMemberAccess	ctx -> err		2016628	0					
ANR	2016765	Identifier	ctx		2016628	0					
ANR	2016766	Identifier	err		2016628	1					
ANR	2016767	Identifier	has_error		2016628	1					
ANR	2016768	CompoundStatement		34:25:1238:1238	2016628	1					
ANR	2016769	ReturnStatement	return ;	1174:2:33612:33618	2016628	0	True				
ANR	2016770	IfStatement	if ( msghdr -> msg_iovlen == 0 )		2016628	8					
ANR	2016771	Condition	msghdr -> msg_iovlen == 0	1177:5:33629:33651	2016628	0	True				
ANR	2016772	EqualityExpression	msghdr -> msg_iovlen == 0		2016628	0		==			
ANR	2016773	PtrMemberAccess	msghdr -> msg_iovlen		2016628	0					
ANR	2016774	Identifier	msghdr		2016628	0					
ANR	2016775	Identifier	msg_iovlen		2016628	1					
ANR	2016776	PrimaryExpression	0		2016628	1					
ANR	2016777	CompoundStatement		38:30:1284:1284	2016628	1					
ANR	2016778	ExpressionStatement	msghdr -> msg_iovlen = 1	1178:2:33658:33680	2016628	0	True				
ANR	2016779	AssignmentExpression	msghdr -> msg_iovlen = 1		2016628	0		=			
ANR	2016780	PtrMemberAccess	msghdr -> msg_iovlen		2016628	0					
ANR	2016781	Identifier	msghdr		2016628	0					
ANR	2016782	Identifier	msg_iovlen		2016628	1					
ANR	2016783	PrimaryExpression	1		2016628	1					
ANR	2016784	ExpressionStatement	"msghdr -> msg_iov = accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"	1179:2:33684:33754	2016628	1	True				
ANR	2016785	AssignmentExpression	"msghdr -> msg_iov = accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"		2016628	0		=			
ANR	2016786	PtrMemberAccess	msghdr -> msg_iov		2016628	0					
ANR	2016787	Identifier	msghdr		2016628	0					
ANR	2016788	Identifier	msg_iov		2016628	1					
ANR	2016789	CallExpression	"accounted_emalloc ( sizeof ( * msghdr -> msg_iov ) * 1 , ctx )"		2016628	1					
ANR	2016790	Callee	accounted_emalloc		2016628	0					
ANR	2016791	Identifier	accounted_emalloc		2016628	0					
ANR	2016792	ArgumentList	sizeof ( * msghdr -> msg_iov ) * 1		2016628	1					
ANR	2016793	Argument	sizeof ( * msghdr -> msg_iov ) * 1		2016628	0					
ANR	2016794	MultiplicativeExpression	sizeof ( * msghdr -> msg_iov ) * 1		2016628	0		*			
ANR	2016795	SizeofExpression	sizeof ( * msghdr -> msg_iov )		2016628	0					
ANR	2016796	Sizeof	sizeof		2016628	0					
ANR	2016797	UnaryOperationExpression	* msghdr -> msg_iov		2016628	1					
ANR	2016798	UnaryOperator	*		2016628	0					
ANR	2016799	PtrMemberAccess	msghdr -> msg_iov		2016628	1					
ANR	2016800	Identifier	msghdr		2016628	0					
ANR	2016801	Identifier	msg_iov		2016628	1					
ANR	2016802	PrimaryExpression	1		2016628	1					
ANR	2016803	Argument	ctx		2016628	1					
ANR	2016804	Identifier	ctx		2016628	0					
ANR	2016805	ExpressionStatement	"msghdr -> msg_iov [ 0 ] . iov_base = accounted_emalloc ( ( size_t ) DEFAULT_BUFF_SIZE , ctx )"	1180:2:33758:33837	2016628	2	True				
ANR	2016806	AssignmentExpression	"msghdr -> msg_iov [ 0 ] . iov_base = accounted_emalloc ( ( size_t ) DEFAULT_BUFF_SIZE , ctx )"		2016628	0		=			
ANR	2016807	MemberAccess	msghdr -> msg_iov [ 0 ] . iov_base		2016628	0					
ANR	2016808	ArrayIndexing	msghdr -> msg_iov [ 0 ]		2016628	0					
ANR	2016809	PtrMemberAccess	msghdr -> msg_iov		2016628	0					
ANR	2016810	Identifier	msghdr		2016628	0					
ANR	2016811	Identifier	msg_iov		2016628	1					
ANR	2016812	PrimaryExpression	0		2016628	1					
ANR	2016813	Identifier	iov_base		2016628	1					
ANR	2016814	CallExpression	"accounted_emalloc ( ( size_t ) DEFAULT_BUFF_SIZE , ctx )"		2016628	1					
ANR	2016815	Callee	accounted_emalloc		2016628	0					
ANR	2016816	Identifier	accounted_emalloc		2016628	0					
ANR	2016817	ArgumentList	( size_t ) DEFAULT_BUFF_SIZE		2016628	1					
ANR	2016818	Argument	( size_t ) DEFAULT_BUFF_SIZE		2016628	0					
ANR	2016819	CastExpression	( size_t ) DEFAULT_BUFF_SIZE		2016628	0					
ANR	2016820	CastTarget	size_t		2016628	0					
ANR	2016821	Identifier	DEFAULT_BUFF_SIZE		2016628	1					
ANR	2016822	Argument	ctx		2016628	1					
ANR	2016823	Identifier	ctx		2016628	0					
ANR	2016824	ExpressionStatement	msghdr -> msg_iov [ 0 ] . iov_len = ( size_t ) DEFAULT_BUFF_SIZE	1181:2:33841:33895	2016628	3	True				
ANR	2016825	AssignmentExpression	msghdr -> msg_iov [ 0 ] . iov_len = ( size_t ) DEFAULT_BUFF_SIZE		2016628	0		=			
ANR	2016826	MemberAccess	msghdr -> msg_iov [ 0 ] . iov_len		2016628	0					
ANR	2016827	ArrayIndexing	msghdr -> msg_iov [ 0 ]		2016628	0					
ANR	2016828	PtrMemberAccess	msghdr -> msg_iov		2016628	0					
ANR	2016829	Identifier	msghdr		2016628	0					
ANR	2016830	Identifier	msg_iov		2016628	1					
ANR	2016831	PrimaryExpression	0		2016628	1					
ANR	2016832	Identifier	iov_len		2016628	1					
ANR	2016833	CastExpression	( size_t ) DEFAULT_BUFF_SIZE		2016628	1					
ANR	2016834	CastTarget	size_t		2016628	0					
ANR	2016835	Identifier	DEFAULT_BUFF_SIZE		2016628	1					
ANR	2016836	ReturnType	void		2016628	1					
ANR	2016837	Identifier	from_zval_write_msghdr_recv		2016628	2					
ANR	2016838	ParameterList	"const zval * container , char * msghdr_c , ser_context * ctx"		2016628	3					
ANR	2016839	Parameter	const zval * container	1139:33:32312:32332	2016628	0	True				
ANR	2016840	ParameterType	const zval *		2016628	0					
ANR	2016841	Identifier	container		2016628	1					
ANR	2016842	Parameter	char * msghdr_c	1139:56:32335:32348	2016628	1	True				
ANR	2016843	ParameterType	char *		2016628	0					
ANR	2016844	Identifier	msghdr_c		2016628	1					
ANR	2016845	Parameter	ser_context * ctx	1139:72:32351:32366	2016628	2	True				
ANR	2016846	ParameterType	ser_context *		2016628	0					
ANR	2016847	Identifier	ctx		2016628	1					
ANR	2016848	CFGEntryNode	ENTRY		2016628		True				
ANR	2016849	CFGExitNode	EXIT		2016628		True				
ANR	2016850	Symbol	container		2016628						
ANR	2016851	Symbol	msghdr_c		2016628						
ANR	2016852	Symbol	msghdr -> msg_iovlen		2016628						
ANR	2016853	Symbol	from_zval_write_controllen		2016628						
ANR	2016854	Symbol	from_zval_write_name		2016628						
ANR	2016855	Symbol	ctx -> err		2016628						
ANR	2016856	Symbol	msghdr		2016628						
ANR	2016857	Symbol	descriptors		2016628						
ANR	2016858	Symbol	KEY_FILL_SOCKADDR		2016628						
ANR	2016859	Symbol	msghdr -> msg_iov [ 0 ] . iov_base		2016628						
ANR	2016860	Symbol	* msghdr -> msg_iov		2016628						
ANR	2016861	Symbol	msghdr -> msg_iov		2016628						
ANR	2016862	Symbol	* * msghdr		2016628						
ANR	2016863	Symbol	accounted_emalloc		2016628						
ANR	2016864	Symbol	& falsev		2016628						
ANR	2016865	Symbol	NULL		2016628						
ANR	2016866	Symbol	ctx		2016628						
ANR	2016867	Symbol	from_zval_write_msghdr_buffer_size		2016628						
ANR	2016868	Symbol	ctx -> err . has_error		2016628						
ANR	2016869	Symbol	falsev		2016628						
ANR	2016870	Symbol	zend_hash_str_add_ptr		2016628						
ANR	2016871	Symbol	msghdr -> msg_iov [ 0 ] . iov_len		2016628						
ANR	2016872	Symbol	* ctx		2016628						
ANR	2016873	Symbol	falsevp		2016628						
ANR	2016874	Symbol	DEFAULT_BUFF_SIZE		2016628						
ANR	2016875	Symbol	* msghdr		2016628						
ANR	2016876	Symbol	& ctx -> params		2016628						
ANR	2016877	Function	to_zval_read_iov	1185:0:33903:34917							
ANR	2016878	FunctionDef	"to_zval_read_iov (const char * msghdr_c , zval * zv , res_context * ctx)"		2016877	0					
ANR	2016879	CompoundStatement		1186:0:33982:34917	2016877	0					
ANR	2016880	IdentifierDeclStatement	const struct msghdr * msghdr = ( const struct msghdr * ) msghdr_c ;	1187:1:33985:34046	2016877	0	True				
ANR	2016881	IdentifierDecl	* msghdr = ( const struct msghdr * ) msghdr_c		2016877	0					
ANR	2016882	IdentifierDeclType	const struct msghdr *		2016877	0					
ANR	2016883	Identifier	msghdr		2016877	1					
ANR	2016884	AssignmentExpression	* msghdr = ( const struct msghdr * ) msghdr_c		2016877	2		=			
ANR	2016885	Identifier	msghdr		2016877	0					
ANR	2016886	CastExpression	( const struct msghdr * ) msghdr_c		2016877	1					
ANR	2016887	CastTarget	const struct msghdr *		2016877	0					
ANR	2016888	Identifier	msghdr_c		2016877	1					
ANR	2016889	IdentifierDeclStatement	size_t iovlen = msghdr -> msg_iovlen ;	1188:1:34049:34086	2016877	1	True				
ANR	2016890	IdentifierDecl	iovlen = msghdr -> msg_iovlen		2016877	0					
ANR	2016891	IdentifierDeclType	size_t		2016877	0					
ANR	2016892	Identifier	iovlen		2016877	1					
ANR	2016893	AssignmentExpression	iovlen = msghdr -> msg_iovlen		2016877	2		=			
ANR	2016894	Identifier	iovlen		2016877	0					
ANR	2016895	PtrMemberAccess	msghdr -> msg_iovlen		2016877	1					
ANR	2016896	Identifier	msghdr		2016877	0					
ANR	2016897	Identifier	msg_iovlen		2016877	1					
ANR	2016898	IdentifierDeclStatement	"ssize_t * recvmsg_ret , bytes_left ;"	1189:1:34089:34130	2016877	2	True				
ANR	2016899	IdentifierDecl	* recvmsg_ret		2016877	0					
ANR	2016900	IdentifierDeclType	ssize_t *		2016877	0					
ANR	2016901	Identifier	recvmsg_ret		2016877	1					
ANR	2016902	IdentifierDecl	bytes_left		2016877	1					
ANR	2016903	IdentifierDeclType	ssize_t		2016877	0					
ANR	2016904	Identifier	bytes_left		2016877	1					
ANR	2016905	IdentifierDeclStatement	uint i ;	1191:1:34133:34142	2016877	3	True				
ANR	2016906	IdentifierDecl	i		2016877	0					
ANR	2016907	IdentifierDeclType	uint		2016877	0					
ANR	2016908	Identifier	i		2016877	1					
ANR	2016909	IfStatement	if ( iovlen > UINT_MAX )		2016877	4					
ANR	2016910	Condition	iovlen > UINT_MAX	1193:5:34150:34166	2016877	0	True				
ANR	2016911	RelationalExpression	iovlen > UINT_MAX		2016877	0		>			
ANR	2016912	Identifier	iovlen		2016877	0					
ANR	2016913	Identifier	UINT_MAX		2016877	1					
ANR	2016914	CompoundStatement		8:24:186:186	2016877	1					
ANR	2016915	ExpressionStatement	"do_to_zval_err ( ctx , ""unexpectedly large value for iov_len: %lu"" , ( unsigned long ) iovlen )"	1194:2:34173:34264	2016877	0	True				
ANR	2016916	CallExpression	"do_to_zval_err ( ctx , ""unexpectedly large value for iov_len: %lu"" , ( unsigned long ) iovlen )"		2016877	0					
ANR	2016917	Callee	do_to_zval_err		2016877	0					
ANR	2016918	Identifier	do_to_zval_err		2016877	0					
ANR	2016919	ArgumentList	ctx		2016877	1					
ANR	2016920	Argument	ctx		2016877	0					
ANR	2016921	Identifier	ctx		2016877	0					
ANR	2016922	Argument	"""unexpectedly large value for iov_len: %lu"""		2016877	1					
ANR	2016923	PrimaryExpression	"""unexpectedly large value for iov_len: %lu"""		2016877	0					
ANR	2016924	Argument	( unsigned long ) iovlen		2016877	2					
ANR	2016925	CastExpression	( unsigned long ) iovlen		2016877	0					
ANR	2016926	CastTarget	unsigned long		2016877	0					
ANR	2016927	Identifier	iovlen		2016877	1					
ANR	2016928	ExpressionStatement	"array_init_size ( zv , ( uint ) iovlen )"	1197:1:34270:34303	2016877	5	True				
ANR	2016929	CallExpression	"array_init_size ( zv , ( uint ) iovlen )"		2016877	0					
ANR	2016930	Callee	array_init_size		2016877	0					
ANR	2016931	Identifier	array_init_size		2016877	0					
ANR	2016932	ArgumentList	zv		2016877	1					
ANR	2016933	Argument	zv		2016877	0					
ANR	2016934	Identifier	zv		2016877	0					
ANR	2016935	Argument	( uint ) iovlen		2016877	1					
ANR	2016936	CastExpression	( uint ) iovlen		2016877	0					
ANR	2016937	CastTarget	uint		2016877	0					
ANR	2016938	Identifier	iovlen		2016877	1					
ANR	2016939	IfStatement	"if ( ( recvmsg_ret = zend_hash_str_find_ptr ( & ctx -> params , KEY_RECVMSG_RET , sizeof ( KEY_RECVMSG_RET ) - 1 ) ) == NULL )"		2016877	6					
ANR	2016940	Condition	"( recvmsg_ret = zend_hash_str_find_ptr ( & ctx -> params , KEY_RECVMSG_RET , sizeof ( KEY_RECVMSG_RET ) - 1 ) ) == NULL"	1199:5:34311:34416	2016877	0	True				
ANR	2016941	EqualityExpression	"( recvmsg_ret = zend_hash_str_find_ptr ( & ctx -> params , KEY_RECVMSG_RET , sizeof ( KEY_RECVMSG_RET ) - 1 ) ) == NULL"		2016877	0		==			
ANR	2016942	AssignmentExpression	"recvmsg_ret = zend_hash_str_find_ptr ( & ctx -> params , KEY_RECVMSG_RET , sizeof ( KEY_RECVMSG_RET ) - 1 )"		2016877	0		=			
ANR	2016943	Identifier	recvmsg_ret		2016877	0					
ANR	2016944	CallExpression	"zend_hash_str_find_ptr ( & ctx -> params , KEY_RECVMSG_RET , sizeof ( KEY_RECVMSG_RET ) - 1 )"		2016877	1					
ANR	2016945	Callee	zend_hash_str_find_ptr		2016877	0					
ANR	2016946	Identifier	zend_hash_str_find_ptr		2016877	0					
ANR	2016947	ArgumentList	& ctx -> params		2016877	1					
ANR	2016948	Argument	& ctx -> params		2016877	0					
ANR	2016949	UnaryOperationExpression	& ctx -> params		2016877	0					
ANR	2016950	UnaryOperator	&		2016877	0					
ANR	2016951	PtrMemberAccess	ctx -> params		2016877	1					
ANR	2016952	Identifier	ctx		2016877	0					
ANR	2016953	Identifier	params		2016877	1					
ANR	2016954	Argument	KEY_RECVMSG_RET		2016877	1					
ANR	2016955	Identifier	KEY_RECVMSG_RET		2016877	0					
ANR	2016956	Argument	sizeof ( KEY_RECVMSG_RET ) - 1		2016877	2					
ANR	2016957	AdditiveExpression	sizeof ( KEY_RECVMSG_RET ) - 1		2016877	0		-			
ANR	2016958	SizeofExpression	sizeof ( KEY_RECVMSG_RET )		2016877	0					
ANR	2016959	Sizeof	sizeof		2016877	0					
ANR	2016960	SizeofOperand	KEY_RECVMSG_RET		2016877	1					
ANR	2016961	PrimaryExpression	1		2016877	1					
ANR	2016962	Identifier	NULL		2016877	1					
ANR	2016963	CompoundStatement		14:113:436:436	2016877	1					
ANR	2016964	ExpressionStatement	"do_to_zval_err ( ctx , ""recvmsg_ret not found in params. This is a bug"" )"	1200:2:34423:34492	2016877	0	True				
ANR	2016965	CallExpression	"do_to_zval_err ( ctx , ""recvmsg_ret not found in params. This is a bug"" )"		2016877	0					
ANR	2016966	Callee	do_to_zval_err		2016877	0					
ANR	2016967	Identifier	do_to_zval_err		2016877	0					
ANR	2016968	ArgumentList	ctx		2016877	1					
ANR	2016969	Argument	ctx		2016877	0					
ANR	2016970	Identifier	ctx		2016877	0					
ANR	2016971	Argument	"""recvmsg_ret not found in params. This is a bug"""		2016877	1					
ANR	2016972	PrimaryExpression	"""recvmsg_ret not found in params. This is a bug"""		2016877	0					
ANR	2016973	ReturnStatement	return ;	1201:2:34496:34502	2016877	1	True				
ANR	2016974	ExpressionStatement	bytes_left = * recvmsg_ret	1203:1:34508:34533	2016877	7	True				
ANR	2016975	AssignmentExpression	bytes_left = * recvmsg_ret		2016877	0		=			
ANR	2016976	Identifier	bytes_left		2016877	0					
ANR	2016977	UnaryOperationExpression	* recvmsg_ret		2016877	1					
ANR	2016978	UnaryOperator	*		2016877	0					
ANR	2016979	Identifier	recvmsg_ret		2016877	1					
ANR	2016980	ForStatement	for ( i = 0 ; bytes_left > 0 && i < ( uint ) iovlen ; i ++ )		2016877	8					
ANR	2016981	ForInit	i = 0 ;	1205:6:34542:34547	2016877	0	True				
ANR	2016982	AssignmentExpression	i = 0		2016877	0		=			
ANR	2016983	Identifier	i		2016877	0					
ANR	2016984	PrimaryExpression	0		2016877	1					
ANR	2016985	Condition	bytes_left > 0 && i < ( uint ) iovlen	1205:13:34549:34582	2016877	1	True				
ANR	2016986	AndExpression	bytes_left > 0 && i < ( uint ) iovlen		2016877	0		&&			
ANR	2016987	RelationalExpression	bytes_left > 0		2016877	0		>			
ANR	2016988	Identifier	bytes_left		2016877	0					
ANR	2016989	PrimaryExpression	0		2016877	1					
ANR	2016990	RelationalExpression	i < ( uint ) iovlen		2016877	1		<			
ANR	2016991	Identifier	i		2016877	0					
ANR	2016992	CastExpression	( uint ) iovlen		2016877	1					
ANR	2016993	CastTarget	uint		2016877	0					
ANR	2016994	Identifier	iovlen		2016877	1					
ANR	2016995	PostIncDecOperationExpression	i ++	1205:49:34585:34587	2016877	2	True				
ANR	2016996	Identifier	i		2016877	0					
ANR	2016997	IncDec	++		2016877	1					
ANR	2016998	CompoundStatement		23:2:692:736	2016877	3					
ANR	2016999	IdentifierDeclStatement	zval elem ;	1206:2:34594:34603	2016877	0	True				
ANR	2017000	IdentifierDecl	elem		2016877	0					
ANR	2017001	IdentifierDeclType	zval		2016877	0					
ANR	2017002	Identifier	elem		2016877	1					
ANR	2017003	IdentifierDeclStatement	"size_t len = MIN ( msghdr -> msg_iov [ i ] . iov_len , ( size_t ) bytes_left ) ;"	1207:2:34607:34671	2016877	1	True				
ANR	2017004	IdentifierDecl	"len = MIN ( msghdr -> msg_iov [ i ] . iov_len , ( size_t ) bytes_left )"		2016877	0					
ANR	2017005	IdentifierDeclType	size_t		2016877	0					
ANR	2017006	Identifier	len		2016877	1					
ANR	2017007	AssignmentExpression	"len = MIN ( msghdr -> msg_iov [ i ] . iov_len , ( size_t ) bytes_left )"		2016877	2		=			
ANR	2017008	Identifier	len		2016877	0					
ANR	2017009	CallExpression	"MIN ( msghdr -> msg_iov [ i ] . iov_len , ( size_t ) bytes_left )"		2016877	1					
ANR	2017010	Callee	MIN		2016877	0					
ANR	2017011	Identifier	MIN		2016877	0					
ANR	2017012	ArgumentList	msghdr -> msg_iov [ i ] . iov_len		2016877	1					
ANR	2017013	Argument	msghdr -> msg_iov [ i ] . iov_len		2016877	0					
ANR	2017014	MemberAccess	msghdr -> msg_iov [ i ] . iov_len		2016877	0					
ANR	2017015	ArrayIndexing	msghdr -> msg_iov [ i ]		2016877	0					
ANR	2017016	PtrMemberAccess	msghdr -> msg_iov		2016877	0					
ANR	2017017	Identifier	msghdr		2016877	0					
ANR	2017018	Identifier	msg_iov		2016877	1					
ANR	2017019	Identifier	i		2016877	1					
ANR	2017020	Identifier	iov_len		2016877	1					
ANR	2017021	Argument	( size_t ) bytes_left		2016877	1					
ANR	2017022	CastExpression	( size_t ) bytes_left		2016877	0					
ANR	2017023	CastTarget	size_t		2016877	0					
ANR	2017024	Identifier	bytes_left		2016877	1					
ANR	2017025	IdentifierDeclStatement	"zend_string * buf = zend_string_alloc ( len , 0 ) ;"	1208:2:34675:34719	2016877	2	True				
ANR	2017026	IdentifierDecl	"* buf = zend_string_alloc ( len , 0 )"		2016877	0					
ANR	2017027	IdentifierDeclType	zend_string *		2016877	0					
ANR	2017028	Identifier	buf		2016877	1					
ANR	2017029	AssignmentExpression	"* buf = zend_string_alloc ( len , 0 )"		2016877	2		=			
ANR	2017030	Identifier	buf		2016877	0					
ANR	2017031	CallExpression	"zend_string_alloc ( len , 0 )"		2016877	1					
ANR	2017032	Callee	zend_string_alloc		2016877	0					
ANR	2017033	Identifier	zend_string_alloc		2016877	0					
ANR	2017034	ArgumentList	len		2016877	1					
ANR	2017035	Argument	len		2016877	0					
ANR	2017036	Identifier	len		2016877	0					
ANR	2017037	Argument	0		2016877	1					
ANR	2017038	PrimaryExpression	0		2016877	0					
ANR	2017039	ExpressionStatement	"memcpy ( ZSTR_VAL ( buf ) , msghdr -> msg_iov [ i ] . iov_base , ZSTR_LEN ( buf ) )"	1210:2:34724:34789	2016877	3	True				
ANR	2017040	CallExpression	"memcpy ( ZSTR_VAL ( buf ) , msghdr -> msg_iov [ i ] . iov_base , ZSTR_LEN ( buf ) )"		2016877	0					
ANR	2017041	Callee	memcpy		2016877	0					
ANR	2017042	Identifier	memcpy		2016877	0					
ANR	2017043	ArgumentList	ZSTR_VAL ( buf )		2016877	1					
ANR	2017044	Argument	ZSTR_VAL ( buf )		2016877	0					
ANR	2017045	CallExpression	ZSTR_VAL ( buf )		2016877	0					
ANR	2017046	Callee	ZSTR_VAL		2016877	0					
ANR	2017047	Identifier	ZSTR_VAL		2016877	0					
ANR	2017048	ArgumentList	buf		2016877	1					
ANR	2017049	Argument	buf		2016877	0					
ANR	2017050	Identifier	buf		2016877	0					
ANR	2017051	Argument	msghdr -> msg_iov [ i ] . iov_base		2016877	1					
ANR	2017052	MemberAccess	msghdr -> msg_iov [ i ] . iov_base		2016877	0					
ANR	2017053	ArrayIndexing	msghdr -> msg_iov [ i ]		2016877	0					
ANR	2017054	PtrMemberAccess	msghdr -> msg_iov		2016877	0					
ANR	2017055	Identifier	msghdr		2016877	0					
ANR	2017056	Identifier	msg_iov		2016877	1					
ANR	2017057	Identifier	i		2016877	1					
ANR	2017058	Identifier	iov_base		2016877	1					
ANR	2017059	Argument	ZSTR_LEN ( buf )		2016877	2					
ANR	2017060	CallExpression	ZSTR_LEN ( buf )		2016877	0					
ANR	2017061	Callee	ZSTR_LEN		2016877	0					
ANR	2017062	Identifier	ZSTR_LEN		2016877	0					
ANR	2017063	ArgumentList	buf		2016877	1					
ANR	2017064	Argument	buf		2016877	0					
ANR	2017065	Identifier	buf		2016877	0					
ANR	2017066	ExpressionStatement	ZSTR_VAL ( buf ) [ ZSTR_LEN ( buf ) ] = '\\0'	1211:2:34793:34828	2016877	4	True				
ANR	2017067	AssignmentExpression	ZSTR_VAL ( buf ) [ ZSTR_LEN ( buf ) ] = '\\0'		2016877	0		=			
ANR	2017068	ArrayIndexing	ZSTR_VAL ( buf ) [ ZSTR_LEN ( buf ) ]		2016877	0					
ANR	2017069	CallExpression	ZSTR_VAL ( buf )		2016877	0					
ANR	2017070	Callee	ZSTR_VAL		2016877	0					
ANR	2017071	Identifier	ZSTR_VAL		2016877	0					
ANR	2017072	ArgumentList	buf		2016877	1					
ANR	2017073	Argument	buf		2016877	0					
ANR	2017074	Identifier	buf		2016877	0					
ANR	2017075	CallExpression	ZSTR_LEN ( buf )		2016877	1					
ANR	2017076	Callee	ZSTR_LEN		2016877	0					
ANR	2017077	Identifier	ZSTR_LEN		2016877	0					
ANR	2017078	ArgumentList	buf		2016877	1					
ANR	2017079	Argument	buf		2016877	0					
ANR	2017080	Identifier	buf		2016877	0					
ANR	2017081	PrimaryExpression	'\\0'		2016877	1					
ANR	2017082	ExpressionStatement	"ZVAL_NEW_STR ( & elem , buf )"	1213:2:34833:34857	2016877	5	True				
ANR	2017083	CallExpression	"ZVAL_NEW_STR ( & elem , buf )"		2016877	0					
ANR	2017084	Callee	ZVAL_NEW_STR		2016877	0					
ANR	2017085	Identifier	ZVAL_NEW_STR		2016877	0					
ANR	2017086	ArgumentList	& elem		2016877	1					
ANR	2017087	Argument	& elem		2016877	0					
ANR	2017088	UnaryOperationExpression	& elem		2016877	0					
ANR	2017089	UnaryOperator	&		2016877	0					
ANR	2017090	Identifier	elem		2016877	1					
ANR	2017091	Argument	buf		2016877	1					
ANR	2017092	Identifier	buf		2016877	0					
ANR	2017093	ExpressionStatement	"add_next_index_zval ( zv , & elem )"	1214:2:34861:34891	2016877	6	True				
ANR	2017094	CallExpression	"add_next_index_zval ( zv , & elem )"		2016877	0					
ANR	2017095	Callee	add_next_index_zval		2016877	0					
ANR	2017096	Identifier	add_next_index_zval		2016877	0					
ANR	2017097	ArgumentList	zv		2016877	1					
ANR	2017098	Argument	zv		2016877	0					
ANR	2017099	Identifier	zv		2016877	0					
ANR	2017100	Argument	& elem		2016877	1					
ANR	2017101	UnaryOperationExpression	& elem		2016877	0					
ANR	2017102	UnaryOperator	&		2016877	0					
ANR	2017103	Identifier	elem		2016877	1					
ANR	2017104	ExpressionStatement	bytes_left -= len	1215:2:34895:34912	2016877	7	True				
ANR	2017105	AssignmentExpression	bytes_left -= len		2016877	0		-=			
ANR	2017106	Identifier	bytes_left		2016877	0					
ANR	2017107	Identifier	len		2016877	1					
ANR	2017108	ReturnType	static void		2016877	1					
ANR	2017109	Identifier	to_zval_read_iov		2016877	2					
ANR	2017110	ParameterList	"const char * msghdr_c , zval * zv , res_context * ctx"		2016877	3					
ANR	2017111	Parameter	const char * msghdr_c	1185:29:33932:33951	2016877	0	True				
ANR	2017112	ParameterType	const char *		2016877	0					
ANR	2017113	Identifier	msghdr_c		2016877	1					
ANR	2017114	Parameter	zval * zv	1185:51:33954:33961	2016877	1	True				
ANR	2017115	ParameterType	zval *		2016877	0					
ANR	2017116	Identifier	zv		2016877	1					
ANR	2017117	Parameter	res_context * ctx	1185:61:33964:33979	2016877	2	True				
ANR	2017118	ParameterType	res_context *		2016877	0					
ANR	2017119	Identifier	ctx		2016877	1					
ANR	2017120	CFGEntryNode	ENTRY		2016877		True				
ANR	2017121	CFGExitNode	EXIT		2016877		True				
ANR	2017122	Symbol	msghdr_c		2016877						
ANR	2017123	Symbol	& elem		2016877						
ANR	2017124	Symbol	iovlen		2016877						
ANR	2017125	Symbol	msghdr -> msg_iovlen		2016877						
ANR	2017126	Symbol	UINT_MAX		2016877						
ANR	2017127	Symbol	msghdr		2016877						
ANR	2017128	Symbol	msghdr -> msg_iov [ i ] . iov_len		2016877						
ANR	2017129	Symbol	recvmsg_ret		2016877						
ANR	2017130	Symbol	* msghdr -> msg_iov		2016877						
ANR	2017131	Symbol	* ZSTR_LEN		2016877						
ANR	2017132	Symbol	len		2016877						
ANR	2017133	Symbol	msghdr -> msg_iov		2016877						
ANR	2017134	Symbol	zend_hash_str_find_ptr		2016877						
ANR	2017135	Symbol	* * msghdr		2016877						
ANR	2017136	Symbol	* ZSTR_VAL		2016877						
ANR	2017137	Symbol	elem		2016877						
ANR	2017138	Symbol	zend_string_alloc		2016877						
ANR	2017139	Symbol	NULL		2016877						
ANR	2017140	Symbol	* recvmsg_ret		2016877						
ANR	2017141	Symbol	bytes_left		2016877						
ANR	2017142	Symbol	ctx		2016877						
ANR	2017143	Symbol	KEY_RECVMSG_RET		2016877						
ANR	2017144	Symbol	i		2016877						
ANR	2017145	Symbol	msghdr -> msg_iov [ i ] . iov_base		2016877						
ANR	2017146	Symbol	ZSTR_VAL		2016877						
ANR	2017147	Symbol	buf		2016877						
ANR	2017148	Symbol	* i		2016877						
ANR	2017149	Symbol	MIN		2016877						
ANR	2017150	Symbol	* msghdr		2016877						
ANR	2017151	Symbol	& ctx -> params		2016877						
ANR	2017152	Symbol	ZSTR_LEN		2016877						
ANR	2017153	Symbol	zv		2016877						
ANR	2017154	Function	to_zval_read_msghdr	1218:0:34919:35448							
ANR	2017155	FunctionDef	"to_zval_read_msghdr (const char * msghdr_c , zval * zv , res_context * ctx)"		2017154	0					
ANR	2017156	CompoundStatement		1219:0:34994:35448	2017154	0					
ANR	2017157	Statement	static	1220:1:34997:35002	2017154	0	True				
ANR	2017158	Statement	const	1220:8:35004:35008	2017154	1	True				
ANR	2017159	Statement	field_descriptor	1220:14:35010:35025	2017154	2	True				
ANR	2017160	Statement	descriptors	1220:31:35027:35037	2017154	3	True				
ANR	2017161	Statement	[	1220:42:35038:35038	2017154	4	True				
ANR	2017162	Statement	]	1220:43:35039:35039	2017154	5	True				
ANR	2017163	Statement	=	1220:45:35041:35041	2017154	6	True				
ANR	2017164	CompoundStatement		2:47:48:48	2017154	7					
ANR	2017165	CompoundStatement		3:3:53:53	2017154	0					
ANR	2017166	Statement	"""name"""	1221:4:35049:35054	2017154	0	True				
ANR	2017167	Statement	","	1221:10:35055:35055	2017154	1	True				
ANR	2017168	Statement	sizeof	1221:12:35057:35062	2017154	2	True				
ANR	2017169	Statement	(	1221:18:35063:35063	2017154	3	True				
ANR	2017170	Statement	"""name"""	1221:19:35064:35069	2017154	4	True				
ANR	2017171	Statement	)	1221:25:35070:35070	2017154	5	True				
ANR	2017172	Statement	","	1221:26:35071:35071	2017154	6	True				
ANR	2017173	Statement	0	1221:28:35073:35073	2017154	7	True				
ANR	2017174	Statement	","	1221:29:35074:35074	2017154	8	True				
ANR	2017175	Statement	offsetof	1221:31:35076:35083	2017154	9	True				
ANR	2017176	Statement	(	1221:39:35084:35084	2017154	10	True				
ANR	2017177	Statement	struct	1221:40:35085:35090	2017154	11	True				
ANR	2017178	Statement	msghdr	1221:47:35092:35097	2017154	12	True				
ANR	2017179	Statement	","	1221:53:35098:35098	2017154	13	True				
ANR	2017180	Statement	msg_name	1221:55:35100:35107	2017154	14	True				
ANR	2017181	Statement	)	1221:63:35108:35108	2017154	15	True				
ANR	2017182	Statement	","	1221:64:35109:35109	2017154	16	True				
ANR	2017183	Statement	0	1221:66:35111:35111	2017154	17	True				
ANR	2017184	Statement	","	1221:67:35112:35112	2017154	18	True				
ANR	2017185	Statement	to_zval_read_name	1221:69:35114:35130	2017154	19	True				
ANR	2017186	Statement	","	1221:87:35132:35132	2017154	1	True				
ANR	2017187	CompoundStatement		4:3:142:142	2017154	2					
ANR	2017188	Statement	"""control"""	1222:4:35138:35146	2017154	0	True				
ANR	2017189	Statement	","	1222:13:35147:35147	2017154	1	True				
ANR	2017190	Statement	sizeof	1222:15:35149:35154	2017154	2	True				
ANR	2017191	Statement	(	1222:21:35155:35155	2017154	3	True				
ANR	2017192	Statement	"""control"""	1222:22:35156:35164	2017154	4	True				
ANR	2017193	Statement	)	1222:31:35165:35165	2017154	5	True				
ANR	2017194	Statement	","	1222:32:35166:35166	2017154	6	True				
ANR	2017195	Statement	0	1222:34:35168:35168	2017154	7	True				
ANR	2017196	Statement	","	1222:35:35169:35169	2017154	8	True				
ANR	2017197	Statement	0	1222:37:35171:35171	2017154	9	True				
ANR	2017198	Statement	","	1222:38:35172:35172	2017154	10	True				
ANR	2017199	Statement	0	1222:40:35174:35174	2017154	11	True				
ANR	2017200	Statement	","	1222:41:35175:35175	2017154	12	True				
ANR	2017201	Statement	to_zval_read_control_array	1222:43:35177:35202	2017154	13	True				
ANR	2017202	Statement	","	1222:70:35204:35204	2017154	3	True				
ANR	2017203	CompoundStatement		5:3:214:214	2017154	4					
ANR	2017204	Statement	"""iov"""	1223:4:35210:35214	2017154	0	True				
ANR	2017205	Statement	","	1223:9:35215:35215	2017154	1	True				
ANR	2017206	Statement	sizeof	1223:11:35217:35222	2017154	2	True				
ANR	2017207	Statement	(	1223:17:35223:35223	2017154	3	True				
ANR	2017208	Statement	"""iov"""	1223:18:35224:35228	2017154	4	True				
ANR	2017209	Statement	)	1223:23:35229:35229	2017154	5	True				
ANR	2017210	Statement	","	1223:24:35230:35230	2017154	6	True				
ANR	2017211	Statement	0	1223:26:35232:35232	2017154	7	True				
ANR	2017212	Statement	","	1223:27:35233:35233	2017154	8	True				
ANR	2017213	Statement	0	1223:29:35235:35235	2017154	9	True				
ANR	2017214	Statement	","	1223:30:35236:35236	2017154	10	True				
ANR	2017215	Statement	0	1223:32:35238:35238	2017154	11	True				
ANR	2017216	Statement	","	1223:33:35239:35239	2017154	12	True				
ANR	2017217	Statement	to_zval_read_iov	1223:35:35241:35256	2017154	13	True				
ANR	2017218	Statement	","	1223:52:35258:35258	2017154	5	True				
ANR	2017219	CompoundStatement		6:3:268:268	2017154	6					
ANR	2017220	Statement	"""flags"""	1224:4:35264:35270	2017154	0	True				
ANR	2017221	Statement	","	1224:11:35271:35271	2017154	1	True				
ANR	2017222	Statement	sizeof	1224:13:35273:35278	2017154	2	True				
ANR	2017223	Statement	(	1224:19:35279:35279	2017154	3	True				
ANR	2017224	Statement	"""flags"""	1224:20:35280:35286	2017154	4	True				
ANR	2017225	Statement	)	1224:27:35287:35287	2017154	5	True				
ANR	2017226	Statement	","	1224:28:35288:35288	2017154	6	True				
ANR	2017227	Statement	0	1224:30:35290:35290	2017154	7	True				
ANR	2017228	Statement	","	1224:31:35291:35291	2017154	8	True				
ANR	2017229	Statement	offsetof	1224:33:35293:35300	2017154	9	True				
ANR	2017230	Statement	(	1224:41:35301:35301	2017154	10	True				
ANR	2017231	Statement	struct	1224:42:35302:35307	2017154	11	True				
ANR	2017232	Statement	msghdr	1224:49:35309:35314	2017154	12	True				
ANR	2017233	Statement	","	1224:55:35315:35315	2017154	13	True				
ANR	2017234	Statement	msg_flags	1224:57:35317:35325	2017154	14	True				
ANR	2017235	Statement	)	1224:66:35326:35326	2017154	15	True				
ANR	2017236	Statement	","	1224:67:35327:35327	2017154	16	True				
ANR	2017237	Statement	0	1224:69:35329:35329	2017154	17	True				
ANR	2017238	Statement	","	1224:70:35330:35330	2017154	18	True				
ANR	2017239	Statement	to_zval_read_int	1224:72:35332:35347	2017154	19	True				
ANR	2017240	Statement	","	1224:89:35349:35349	2017154	7	True				
ANR	2017241	CompoundStatement		7:3:359:359	2017154	8					
ANR	2017242	Statement	0	1225:4:35355:35355	2017154	0	True				
ANR	2017243	ExpressionStatement		1226:2:35360:35360	2017154	8	True				
ANR	2017244	ExpressionStatement	"array_init_size ( zv , 4 )"	1228:1:35364:35386	2017154	9	True				
ANR	2017245	CallExpression	"array_init_size ( zv , 4 )"		2017154	0					
ANR	2017246	Callee	array_init_size		2017154	0					
ANR	2017247	Identifier	array_init_size		2017154	0					
ANR	2017248	ArgumentList	zv		2017154	1					
ANR	2017249	Argument	zv		2017154	0					
ANR	2017250	Identifier	zv		2017154	0					
ANR	2017251	Argument	4		2017154	1					
ANR	2017252	PrimaryExpression	4		2017154	0					
ANR	2017253	ExpressionStatement	"to_zval_read_aggregation ( msghdr_c , zv , descriptors , ctx )"	1230:1:35390:35446	2017154	10	True				
ANR	2017254	CallExpression	"to_zval_read_aggregation ( msghdr_c , zv , descriptors , ctx )"		2017154	0					
ANR	2017255	Callee	to_zval_read_aggregation		2017154	0					
ANR	2017256	Identifier	to_zval_read_aggregation		2017154	0					
ANR	2017257	ArgumentList	msghdr_c		2017154	1					
ANR	2017258	Argument	msghdr_c		2017154	0					
ANR	2017259	Identifier	msghdr_c		2017154	0					
ANR	2017260	Argument	zv		2017154	1					
ANR	2017261	Identifier	zv		2017154	0					
ANR	2017262	Argument	descriptors		2017154	2					
ANR	2017263	Identifier	descriptors		2017154	0					
ANR	2017264	Argument	ctx		2017154	3					
ANR	2017265	Identifier	ctx		2017154	0					
ANR	2017266	ReturnType	void		2017154	1					
ANR	2017267	Identifier	to_zval_read_msghdr		2017154	2					
ANR	2017268	ParameterList	"const char * msghdr_c , zval * zv , res_context * ctx"		2017154	3					
ANR	2017269	Parameter	const char * msghdr_c	1218:25:34944:34963	2017154	0	True				
ANR	2017270	ParameterType	const char *		2017154	0					
ANR	2017271	Identifier	msghdr_c		2017154	1					
ANR	2017272	Parameter	zval * zv	1218:47:34966:34973	2017154	1	True				
ANR	2017273	ParameterType	zval *		2017154	0					
ANR	2017274	Identifier	zv		2017154	1					
ANR	2017275	Parameter	res_context * ctx	1218:57:34976:34991	2017154	2	True				
ANR	2017276	ParameterType	res_context *		2017154	0					
ANR	2017277	Identifier	ctx		2017154	1					
ANR	2017278	CFGEntryNode	ENTRY		2017154		True				
ANR	2017279	CFGExitNode	EXIT		2017154		True				
ANR	2017280	Symbol	msghdr_c		2017154						
ANR	2017281	Symbol	descriptors		2017154						
ANR	2017282	Symbol	ctx		2017154						
ANR	2017283	Symbol	zv		2017154						
ANR	2017284	Function	from_zval_write_ifindex	1234:0:35482:37059							
ANR	2017285	FunctionDef	"from_zval_write_ifindex (const zval * zv , char * uinteger , ser_context * ctx)"		2017284	0					
ANR	2017286	CompoundStatement		1235:0:35568:37059	2017284	0					
ANR	2017287	IdentifierDeclStatement	unsigned ret = 0 ;	1236:1:35571:35587	2017284	0	True				
ANR	2017288	IdentifierDecl	ret = 0		2017284	0					
ANR	2017289	IdentifierDeclType	unsigned		2017284	0					
ANR	2017290	Identifier	ret		2017284	1					
ANR	2017291	AssignmentExpression	ret = 0		2017284	2		=			
ANR	2017292	Identifier	ret		2017284	0					
ANR	2017293	PrimaryExpression	0		2017284	1					
ANR	2017294	IfStatement	if ( Z_TYPE_P ( zv ) == IS_LONG )		2017284	1					
ANR	2017295	Condition	Z_TYPE_P ( zv ) == IS_LONG	1238:5:35595:35617	2017284	0	True				
ANR	2017296	EqualityExpression	Z_TYPE_P ( zv ) == IS_LONG		2017284	0		==			
ANR	2017297	CallExpression	Z_TYPE_P ( zv )		2017284	0					
ANR	2017298	Callee	Z_TYPE_P		2017284	0					
ANR	2017299	Identifier	Z_TYPE_P		2017284	0					
ANR	2017300	ArgumentList	zv		2017284	1					
ANR	2017301	Argument	zv		2017284	0					
ANR	2017302	Identifier	zv		2017284	0					
ANR	2017303	Identifier	IS_LONG		2017284	1					
ANR	2017304	CompoundStatement		4:30:51:51	2017284	1					
ANR	2017305	IfStatement	if ( Z_LVAL_P ( zv ) < 0 || Z_LVAL_P ( zv ) > UINT_MAX )		2017284	0					
ANR	2017306	Condition	Z_LVAL_P ( zv ) < 0 || Z_LVAL_P ( zv ) > UINT_MAX	1239:6:35628:35670	2017284	0	True				
ANR	2017307	OrExpression	Z_LVAL_P ( zv ) < 0 || Z_LVAL_P ( zv ) > UINT_MAX		2017284	0		||			
ANR	2017308	RelationalExpression	Z_LVAL_P ( zv ) < 0		2017284	0		<			
ANR	2017309	CallExpression	Z_LVAL_P ( zv )		2017284	0					
ANR	2017310	Callee	Z_LVAL_P		2017284	0					
ANR	2017311	Identifier	Z_LVAL_P		2017284	0					
ANR	2017312	ArgumentList	zv		2017284	1					
ANR	2017313	Argument	zv		2017284	0					
ANR	2017314	Identifier	zv		2017284	0					
ANR	2017315	PrimaryExpression	0		2017284	1					
ANR	2017316	RelationalExpression	Z_LVAL_P ( zv ) > UINT_MAX		2017284	1		>			
ANR	2017317	CallExpression	Z_LVAL_P ( zv )		2017284	0					
ANR	2017318	Callee	Z_LVAL_P		2017284	0					
ANR	2017319	Identifier	Z_LVAL_P		2017284	0					
ANR	2017320	ArgumentList	zv		2017284	1					
ANR	2017321	Argument	zv		2017284	0					
ANR	2017322	Identifier	zv		2017284	0					
ANR	2017323	Identifier	UINT_MAX		2017284	1					
ANR	2017324	CompoundStatement		5:51:104:104	2017284	1					
ANR	2017325	Statement	do_from_zval_err	1240:3:35716:35731	2017284	0	True				
ANR	2017326	Statement	(	1240:19:35732:35732	2017284	1	True				
ANR	2017327	Statement	ctx	1240:20:35733:35735	2017284	2	True				
ANR	2017328	Statement	","	1240:23:35736:35736	2017284	3	True				
ANR	2017329	Statement	"""the interface index cannot be negative or """	1240:25:35738:35781	2017284	4	True				
ANR	2017330	Statement	"""larger than %u; given %pd"""	1241:5:35788:35814	2017284	5	True				
ANR	2017331	Statement	","	1241:32:35815:35815	2017284	6	True				
ANR	2017332	Statement	UINT_MAX	1241:34:35817:35824	2017284	7	True				
ANR	2017333	Statement	","	1241:42:35825:35825	2017284	8	True				
ANR	2017334	Statement	Z_LVAL_P	1241:44:35827:35834	2017284	9	True				
ANR	2017335	Statement	(	1241:52:35835:35835	2017284	10	True				
ANR	2017336	Statement	zv	1241:53:35836:35837	2017284	11	True				
ANR	2017337	Statement	)	1241:55:35838:35838	2017284	12	True				
ANR	2017338	Statement	)	1241:56:35839:35839	2017284	13	True				
ANR	2017339	ExpressionStatement		1241:57:35840:35840	2017284	14	True				
ANR	2017340	ElseStatement	else		2017284	0					
ANR	2017341	CompoundStatement		8:9:282:282	2017284	0					
ANR	2017342	ExpressionStatement	ret = ( unsigned ) Z_LVAL_P ( zv )	1243:3:35856:35884	2017284	0	True				
ANR	2017343	AssignmentExpression	ret = ( unsigned ) Z_LVAL_P ( zv )		2017284	0		=			
ANR	2017344	Identifier	ret		2017284	0					
ANR	2017345	CastExpression	( unsigned ) Z_LVAL_P ( zv )		2017284	1					
ANR	2017346	CastTarget	unsigned		2017284	0					
ANR	2017347	CallExpression	Z_LVAL_P ( zv )		2017284	1					
ANR	2017348	Callee	Z_LVAL_P		2017284	0					
ANR	2017349	Identifier	Z_LVAL_P		2017284	0					
ANR	2017350	ArgumentList	zv		2017284	1					
ANR	2017351	Argument	zv		2017284	0					
ANR	2017352	Identifier	zv		2017284	0					
ANR	2017353	ElseStatement	else		2017284	0					
ANR	2017354	CompoundStatement		12:2:333:349	2017284	0					
ANR	2017355	IdentifierDeclStatement	zend_string * str ;	1246:2:35902:35918	2017284	0	True				
ANR	2017356	IdentifierDecl	* str		2017284	0					
ANR	2017357	IdentifierDeclType	zend_string *		2017284	0					
ANR	2017358	Identifier	str		2017284	1					
ANR	2017359	ExpressionStatement	str = zval_get_string ( ( zval * ) zv )	1248:2:35923:35957	2017284	1	True				
ANR	2017360	AssignmentExpression	str = zval_get_string ( ( zval * ) zv )		2017284	0		=			
ANR	2017361	Identifier	str		2017284	0					
ANR	2017362	CallExpression	zval_get_string ( ( zval * ) zv )		2017284	1					
ANR	2017363	Callee	zval_get_string		2017284	0					
ANR	2017364	Identifier	zval_get_string		2017284	0					
ANR	2017365	ArgumentList	( zval * ) zv		2017284	1					
ANR	2017366	Argument	( zval * ) zv		2017284	0					
ANR	2017367	CastExpression	( zval * ) zv		2017284	0					
ANR	2017368	CastTarget	zval *		2017284	0					
ANR	2017369	Identifier	zv		2017284	1					
ANR	2017370	ExpressionStatement	ret = if_nametoindex ( ZSTR_VAL ( str ) )	1251:2:35986:36021	2017284	2	True				
ANR	2017371	AssignmentExpression	ret = if_nametoindex ( ZSTR_VAL ( str ) )		2017284	0		=			
ANR	2017372	Identifier	ret		2017284	0					
ANR	2017373	CallExpression	if_nametoindex ( ZSTR_VAL ( str ) )		2017284	1					
ANR	2017374	Callee	if_nametoindex		2017284	0					
ANR	2017375	Identifier	if_nametoindex		2017284	0					
ANR	2017376	ArgumentList	ZSTR_VAL ( str )		2017284	1					
ANR	2017377	Argument	ZSTR_VAL ( str )		2017284	0					
ANR	2017378	CallExpression	ZSTR_VAL ( str )		2017284	0					
ANR	2017379	Callee	ZSTR_VAL		2017284	0					
ANR	2017380	Identifier	ZSTR_VAL		2017284	0					
ANR	2017381	ArgumentList	str		2017284	1					
ANR	2017382	Argument	str		2017284	0					
ANR	2017383	Identifier	str		2017284	0					
ANR	2017384	IfStatement	if ( ret == 0 )		2017284	3					
ANR	2017385	Condition	ret == 0	1252:6:36029:36036	2017284	0	True				
ANR	2017386	EqualityExpression	ret == 0		2017284	0		==			
ANR	2017387	Identifier	ret		2017284	0					
ANR	2017388	PrimaryExpression	0		2017284	1					
ANR	2017389	CompoundStatement		18:16:470:470	2017284	1					
ANR	2017390	ExpressionStatement	"do_from_zval_err ( ctx , ""no interface with name \\""%s\\"" could be found"" , ZSTR_VAL ( str ) )"	1253:3:36044:36128	2017284	0	True				
ANR	2017391	CallExpression	"do_from_zval_err ( ctx , ""no interface with name \\""%s\\"" could be found"" , ZSTR_VAL ( str ) )"		2017284	0					
ANR	2017392	Callee	do_from_zval_err		2017284	0					
ANR	2017393	Identifier	do_from_zval_err		2017284	0					
ANR	2017394	ArgumentList	ctx		2017284	1					
ANR	2017395	Argument	ctx		2017284	0					
ANR	2017396	Identifier	ctx		2017284	0					
ANR	2017397	Argument	"""no interface with name \\""%s\\"" could be found"""		2017284	1					
ANR	2017398	PrimaryExpression	"""no interface with name \\""%s\\"" could be found"""		2017284	0					
ANR	2017399	Argument	ZSTR_VAL ( str )		2017284	2					
ANR	2017400	CallExpression	ZSTR_VAL ( str )		2017284	0					
ANR	2017401	Callee	ZSTR_VAL		2017284	0					
ANR	2017402	Identifier	ZSTR_VAL		2017284	0					
ANR	2017403	ArgumentList	str		2017284	1					
ANR	2017404	Argument	str		2017284	0					
ANR	2017405	Identifier	str		2017284	0					
ANR	2017406	ExpressionStatement	zend_string_release ( str )	1280:2:36959:36983	2017284	4	True				
ANR	2017407	CallExpression	zend_string_release ( str )		2017284	0					
ANR	2017408	Callee	zend_string_release		2017284	0					
ANR	2017409	Identifier	zend_string_release		2017284	0					
ANR	2017410	ArgumentList	str		2017284	1					
ANR	2017411	Argument	str		2017284	0					
ANR	2017412	Identifier	str		2017284	0					
ANR	2017413	IfStatement	if ( ! ctx -> err . has_error )		2017284	2					
ANR	2017414	Condition	! ctx -> err . has_error	1283:5:36994:37012	2017284	0	True				
ANR	2017415	UnaryOperationExpression	! ctx -> err . has_error		2017284	0					
ANR	2017416	UnaryOperator	!		2017284	0					
ANR	2017417	MemberAccess	ctx -> err . has_error		2017284	1					
ANR	2017418	PtrMemberAccess	ctx -> err		2017284	0					
ANR	2017419	Identifier	ctx		2017284	0					
ANR	2017420	Identifier	err		2017284	1					
ANR	2017421	Identifier	has_error		2017284	1					
ANR	2017422	CompoundStatement		49:26:1446:1446	2017284	1					
ANR	2017423	ExpressionStatement	"memcpy ( uinteger , & ret , sizeof ( ret ) )"	1284:2:37019:37054	2017284	0	True				
ANR	2017424	CallExpression	"memcpy ( uinteger , & ret , sizeof ( ret ) )"		2017284	0					
ANR	2017425	Callee	memcpy		2017284	0					
ANR	2017426	Identifier	memcpy		2017284	0					
ANR	2017427	ArgumentList	uinteger		2017284	1					
ANR	2017428	Argument	uinteger		2017284	0					
ANR	2017429	Identifier	uinteger		2017284	0					
ANR	2017430	Argument	& ret		2017284	1					
ANR	2017431	UnaryOperationExpression	& ret		2017284	0					
ANR	2017432	UnaryOperator	&		2017284	0					
ANR	2017433	Identifier	ret		2017284	1					
ANR	2017434	Argument	sizeof ( ret )		2017284	2					
ANR	2017435	SizeofExpression	sizeof ( ret )		2017284	0					
ANR	2017436	Sizeof	sizeof		2017284	0					
ANR	2017437	SizeofOperand	ret		2017284	1					
ANR	2017438	ReturnType	static void		2017284	1					
ANR	2017439	Identifier	from_zval_write_ifindex		2017284	2					
ANR	2017440	ParameterList	"const zval * zv , char * uinteger , ser_context * ctx"		2017284	3					
ANR	2017441	Parameter	const zval * zv	1234:36:35518:35531	2017284	0	True				
ANR	2017442	ParameterType	const zval *		2017284	0					
ANR	2017443	Identifier	zv		2017284	1					
ANR	2017444	Parameter	char * uinteger	1234:52:35534:35547	2017284	1	True				
ANR	2017445	ParameterType	char *		2017284	0					
ANR	2017446	Identifier	uinteger		2017284	1					
ANR	2017447	Parameter	ser_context * ctx	1234:68:35550:35565	2017284	2	True				
ANR	2017448	ParameterType	ser_context *		2017284	0					
ANR	2017449	Identifier	ctx		2017284	1					
ANR	2017450	CFGEntryNode	ENTRY		2017284		True				
ANR	2017451	CFGExitNode	EXIT		2017284		True				
ANR	2017452	Symbol	ret		2017284						
ANR	2017453	Symbol	& ret		2017284						
ANR	2017454	Symbol	ctx		2017284						
ANR	2017455	Symbol	ctx -> err . has_error		2017284						
ANR	2017456	Symbol	zval_get_string		2017284						
ANR	2017457	Symbol	if_nametoindex		2017284						
ANR	2017458	Symbol	Z_TYPE_P		2017284						
ANR	2017459	Symbol	ctx -> err		2017284						
ANR	2017460	Symbol	* ctx		2017284						
ANR	2017461	Symbol	Z_LVAL_P		2017284						
ANR	2017462	Symbol	UINT_MAX		2017284						
ANR	2017463	Symbol	ZSTR_VAL		2017284						
ANR	2017464	Symbol	str		2017284						
ANR	2017465	Symbol	uinteger		2017284						
ANR	2017466	Symbol	IS_LONG		2017284						
ANR	2017467	Symbol	zv		2017284						
ANR	2017468	DeclStmt									
ANR	2017469	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_in6_pktinfo
ANR	2017470	Function	from_zval_write_in6_pktinfo	1295:0:37463:37646							
ANR	2017471	FunctionDef	"from_zval_write_in6_pktinfo (const zval * container , char * in6_pktinfo_c , ser_context * ctx)"		2017470	0					
ANR	2017472	CompoundStatement		1296:0:37558:37646	2017470	0					
ANR	2017473	ExpressionStatement	"from_zval_write_aggregation ( container , in6_pktinfo_c , descriptors_in6_pktinfo , ctx )"	1297:1:37561:37644	2017470	0	True				
ANR	2017474	CallExpression	"from_zval_write_aggregation ( container , in6_pktinfo_c , descriptors_in6_pktinfo , ctx )"		2017470	0					
ANR	2017475	Callee	from_zval_write_aggregation		2017470	0					
ANR	2017476	Identifier	from_zval_write_aggregation		2017470	0					
ANR	2017477	ArgumentList	container		2017470	1					
ANR	2017478	Argument	container		2017470	0					
ANR	2017479	Identifier	container		2017470	0					
ANR	2017480	Argument	in6_pktinfo_c		2017470	1					
ANR	2017481	Identifier	in6_pktinfo_c		2017470	0					
ANR	2017482	Argument	descriptors_in6_pktinfo		2017470	2					
ANR	2017483	Identifier	descriptors_in6_pktinfo		2017470	0					
ANR	2017484	Argument	ctx		2017470	3					
ANR	2017485	Identifier	ctx		2017470	0					
ANR	2017486	ReturnType	void		2017470	1					
ANR	2017487	Identifier	from_zval_write_in6_pktinfo		2017470	2					
ANR	2017488	ParameterList	"const zval * container , char * in6_pktinfo_c , ser_context * ctx"		2017470	3					
ANR	2017489	Parameter	const zval * container	1295:33:37496:37516	2017470	0	True				
ANR	2017490	ParameterType	const zval *		2017470	0					
ANR	2017491	Identifier	container		2017470	1					
ANR	2017492	Parameter	char * in6_pktinfo_c	1295:56:37519:37537	2017470	1	True				
ANR	2017493	ParameterType	char *		2017470	0					
ANR	2017494	Identifier	in6_pktinfo_c		2017470	1					
ANR	2017495	Parameter	ser_context * ctx	1295:77:37540:37555	2017470	2	True				
ANR	2017496	ParameterType	ser_context *		2017470	0					
ANR	2017497	Identifier	ctx		2017470	1					
ANR	2017498	CFGEntryNode	ENTRY		2017470		True				
ANR	2017499	CFGExitNode	EXIT		2017470		True				
ANR	2017500	Symbol	container		2017470						
ANR	2017501	Symbol	in6_pktinfo_c		2017470						
ANR	2017502	Symbol	descriptors_in6_pktinfo		2017470						
ANR	2017503	Symbol	ctx		2017470						
ANR	2017504	Function	to_zval_read_in6_pktinfo	1299:0:37648:37819							
ANR	2017505	FunctionDef	"to_zval_read_in6_pktinfo (const char * data , zval * zv , res_context * ctx)"		2017504	0					
ANR	2017506	CompoundStatement		1300:0:37724:37819	2017504	0					
ANR	2017507	ExpressionStatement	"array_init_size ( zv , 2 )"	1301:1:37727:37749	2017504	0	True				
ANR	2017508	CallExpression	"array_init_size ( zv , 2 )"		2017504	0					
ANR	2017509	Callee	array_init_size		2017504	0					
ANR	2017510	Identifier	array_init_size		2017504	0					
ANR	2017511	ArgumentList	zv		2017504	1					
ANR	2017512	Argument	zv		2017504	0					
ANR	2017513	Identifier	zv		2017504	0					
ANR	2017514	Argument	2		2017504	1					
ANR	2017515	PrimaryExpression	2		2017504	0					
ANR	2017516	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_in6_pktinfo , ctx )"	1303:1:37753:37817	2017504	1	True				
ANR	2017517	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_in6_pktinfo , ctx )"		2017504	0					
ANR	2017518	Callee	to_zval_read_aggregation		2017504	0					
ANR	2017519	Identifier	to_zval_read_aggregation		2017504	0					
ANR	2017520	ArgumentList	data		2017504	1					
ANR	2017521	Argument	data		2017504	0					
ANR	2017522	Identifier	data		2017504	0					
ANR	2017523	Argument	zv		2017504	1					
ANR	2017524	Identifier	zv		2017504	0					
ANR	2017525	Argument	descriptors_in6_pktinfo		2017504	2					
ANR	2017526	Identifier	descriptors_in6_pktinfo		2017504	0					
ANR	2017527	Argument	ctx		2017504	3					
ANR	2017528	Identifier	ctx		2017504	0					
ANR	2017529	ReturnType	void		2017504	1					
ANR	2017530	Identifier	to_zval_read_in6_pktinfo		2017504	2					
ANR	2017531	ParameterList	"const char * data , zval * zv , res_context * ctx"		2017504	3					
ANR	2017532	Parameter	const char * data	1299:30:37678:37693	2017504	0	True				
ANR	2017533	ParameterType	const char *		2017504	0					
ANR	2017534	Identifier	data		2017504	1					
ANR	2017535	Parameter	zval * zv	1299:48:37696:37703	2017504	1	True				
ANR	2017536	ParameterType	zval *		2017504	0					
ANR	2017537	Identifier	zv		2017504	1					
ANR	2017538	Parameter	res_context * ctx	1299:58:37706:37721	2017504	2	True				
ANR	2017539	ParameterType	res_context *		2017504	0					
ANR	2017540	Identifier	ctx		2017504	1					
ANR	2017541	CFGEntryNode	ENTRY		2017504		True				
ANR	2017542	CFGExitNode	EXIT		2017504		True				
ANR	2017543	Symbol	descriptors_in6_pktinfo		2017504						
ANR	2017544	Symbol	data		2017504						
ANR	2017545	Symbol	ctx		2017504						
ANR	2017546	Symbol	zv		2017504						
ANR	2017547	DeclStmt									
ANR	2017548	Decl							const field_descriptor	const field_descriptor [ ]	descriptors_ucred
ANR	2017549	Function	from_zval_write_ucred	1316:0:38301:38460							
ANR	2017550	FunctionDef	"from_zval_write_ucred (const zval * container , char * ucred_c , ser_context * ctx)"		2017549	0					
ANR	2017551	CompoundStatement		1317:0:38384:38460	2017549	0					
ANR	2017552	ExpressionStatement	"from_zval_write_aggregation ( container , ucred_c , descriptors_ucred , ctx )"	1318:1:38387:38458	2017549	0	True				
ANR	2017553	CallExpression	"from_zval_write_aggregation ( container , ucred_c , descriptors_ucred , ctx )"		2017549	0					
ANR	2017554	Callee	from_zval_write_aggregation		2017549	0					
ANR	2017555	Identifier	from_zval_write_aggregation		2017549	0					
ANR	2017556	ArgumentList	container		2017549	1					
ANR	2017557	Argument	container		2017549	0					
ANR	2017558	Identifier	container		2017549	0					
ANR	2017559	Argument	ucred_c		2017549	1					
ANR	2017560	Identifier	ucred_c		2017549	0					
ANR	2017561	Argument	descriptors_ucred		2017549	2					
ANR	2017562	Identifier	descriptors_ucred		2017549	0					
ANR	2017563	Argument	ctx		2017549	3					
ANR	2017564	Identifier	ctx		2017549	0					
ANR	2017565	ReturnType	void		2017549	1					
ANR	2017566	Identifier	from_zval_write_ucred		2017549	2					
ANR	2017567	ParameterList	"const zval * container , char * ucred_c , ser_context * ctx"		2017549	3					
ANR	2017568	Parameter	const zval * container	1316:27:38328:38348	2017549	0	True				
ANR	2017569	ParameterType	const zval *		2017549	0					
ANR	2017570	Identifier	container		2017549	1					
ANR	2017571	Parameter	char * ucred_c	1316:50:38351:38363	2017549	1	True				
ANR	2017572	ParameterType	char *		2017549	0					
ANR	2017573	Identifier	ucred_c		2017549	1					
ANR	2017574	Parameter	ser_context * ctx	1316:65:38366:38381	2017549	2	True				
ANR	2017575	ParameterType	ser_context *		2017549	0					
ANR	2017576	Identifier	ctx		2017549	1					
ANR	2017577	CFGEntryNode	ENTRY		2017549		True				
ANR	2017578	CFGExitNode	EXIT		2017549		True				
ANR	2017579	Symbol	container		2017549						
ANR	2017580	Symbol	ctx		2017549						
ANR	2017581	Symbol	ucred_c		2017549						
ANR	2017582	Symbol	descriptors_ucred		2017549						
ANR	2017583	Function	to_zval_read_ucred	1320:0:38462:38621							
ANR	2017584	FunctionDef	"to_zval_read_ucred (const char * data , zval * zv , res_context * ctx)"		2017583	0					
ANR	2017585	CompoundStatement		1321:0:38532:38621	2017583	0					
ANR	2017586	ExpressionStatement	"array_init_size ( zv , 3 )"	1322:1:38535:38557	2017583	0	True				
ANR	2017587	CallExpression	"array_init_size ( zv , 3 )"		2017583	0					
ANR	2017588	Callee	array_init_size		2017583	0					
ANR	2017589	Identifier	array_init_size		2017583	0					
ANR	2017590	ArgumentList	zv		2017583	1					
ANR	2017591	Argument	zv		2017583	0					
ANR	2017592	Identifier	zv		2017583	0					
ANR	2017593	Argument	3		2017583	1					
ANR	2017594	PrimaryExpression	3		2017583	0					
ANR	2017595	ExpressionStatement	"to_zval_read_aggregation ( data , zv , descriptors_ucred , ctx )"	1324:1:38561:38619	2017583	1	True				
ANR	2017596	CallExpression	"to_zval_read_aggregation ( data , zv , descriptors_ucred , ctx )"		2017583	0					
ANR	2017597	Callee	to_zval_read_aggregation		2017583	0					
ANR	2017598	Identifier	to_zval_read_aggregation		2017583	0					
ANR	2017599	ArgumentList	data		2017583	1					
ANR	2017600	Argument	data		2017583	0					
ANR	2017601	Identifier	data		2017583	0					
ANR	2017602	Argument	zv		2017583	1					
ANR	2017603	Identifier	zv		2017583	0					
ANR	2017604	Argument	descriptors_ucred		2017583	2					
ANR	2017605	Identifier	descriptors_ucred		2017583	0					
ANR	2017606	Argument	ctx		2017583	3					
ANR	2017607	Identifier	ctx		2017583	0					
ANR	2017608	ReturnType	void		2017583	1					
ANR	2017609	Identifier	to_zval_read_ucred		2017583	2					
ANR	2017610	ParameterList	"const char * data , zval * zv , res_context * ctx"		2017583	3					
ANR	2017611	Parameter	const char * data	1320:24:38486:38501	2017583	0	True				
ANR	2017612	ParameterType	const char *		2017583	0					
ANR	2017613	Identifier	data		2017583	1					
ANR	2017614	Parameter	zval * zv	1320:42:38504:38511	2017583	1	True				
ANR	2017615	ParameterType	zval *		2017583	0					
ANR	2017616	Identifier	zv		2017583	1					
ANR	2017617	Parameter	res_context * ctx	1320:52:38514:38529	2017583	2	True				
ANR	2017618	ParameterType	res_context *		2017583	0					
ANR	2017619	Identifier	ctx		2017583	1					
ANR	2017620	CFGEntryNode	ENTRY		2017583		True				
ANR	2017621	CFGExitNode	EXIT		2017583		True				
ANR	2017622	Symbol	data		2017583						
ANR	2017623	Symbol	ctx		2017583						
ANR	2017624	Symbol	descriptors_ucred		2017583						
ANR	2017625	Symbol	zv		2017583						
ANR	2017626	Function	calculate_scm_rights_space	1330:0:38682:39129							
ANR	2017627	FunctionDef	"calculate_scm_rights_space (const zval * arr , ser_context * ctx)"		2017626	0					
ANR	2017628	CompoundStatement		1331:0:38751:39129	2017626	0					
ANR	2017629	IdentifierDeclStatement	int num_elems ;	1332:1:38754:38767	2017626	0	True				
ANR	2017630	IdentifierDecl	num_elems		2017626	0					
ANR	2017631	IdentifierDeclType	int		2017626	0					
ANR	2017632	Identifier	num_elems		2017626	1					
ANR	2017633	IfStatement	if ( Z_TYPE_P ( arr ) != IS_ARRAY )		2017626	1					
ANR	2017634	Condition	Z_TYPE_P ( arr ) != IS_ARRAY	1334:5:38775:38799	2017626	0	True				
ANR	2017635	EqualityExpression	Z_TYPE_P ( arr ) != IS_ARRAY		2017626	0		!=			
ANR	2017636	CallExpression	Z_TYPE_P ( arr )		2017626	0					
ANR	2017637	Callee	Z_TYPE_P		2017626	0					
ANR	2017638	Identifier	Z_TYPE_P		2017626	0					
ANR	2017639	ArgumentList	arr		2017626	1					
ANR	2017640	Argument	arr		2017626	0					
ANR	2017641	Identifier	arr		2017626	0					
ANR	2017642	Identifier	IS_ARRAY		2017626	1					
ANR	2017643	CompoundStatement		4:32:50:50	2017626	1					
ANR	2017644	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	1335:2:38806:38859	2017626	0	True				
ANR	2017645	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		2017626	0					
ANR	2017646	Callee	do_from_zval_err		2017626	0					
ANR	2017647	Identifier	do_from_zval_err		2017626	0					
ANR	2017648	ArgumentList	ctx		2017626	1					
ANR	2017649	Argument	ctx		2017626	0					
ANR	2017650	Identifier	ctx		2017626	0					
ANR	2017651	Argument	"""%s"""		2017626	1					
ANR	2017652	PrimaryExpression	"""%s"""		2017626	0					
ANR	2017653	Argument	"""expected an array here"""		2017626	2					
ANR	2017654	PrimaryExpression	"""expected an array here"""		2017626	0					
ANR	2017655	ReturnStatement	return ( size_t ) - 1 ;	1336:2:38863:38880	2017626	1	True				
ANR	2017656	CastExpression	( size_t ) - 1		2017626	0					
ANR	2017657	CastTarget	size_t		2017626	0					
ANR	2017658	UnaryOperationExpression	- 1		2017626	1					
ANR	2017659	UnaryOperator	-		2017626	0					
ANR	2017660	PrimaryExpression	1		2017626	1					
ANR	2017661	ExpressionStatement	num_elems = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )	1339:1:38887:38938	2017626	2	True				
ANR	2017662	AssignmentExpression	num_elems = zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		2017626	0		=			
ANR	2017663	Identifier	num_elems		2017626	0					
ANR	2017664	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		2017626	1					
ANR	2017665	Callee	zend_hash_num_elements		2017626	0					
ANR	2017666	Identifier	zend_hash_num_elements		2017626	0					
ANR	2017667	ArgumentList	Z_ARRVAL_P ( arr )		2017626	1					
ANR	2017668	Argument	Z_ARRVAL_P ( arr )		2017626	0					
ANR	2017669	CallExpression	Z_ARRVAL_P ( arr )		2017626	0					
ANR	2017670	Callee	Z_ARRVAL_P		2017626	0					
ANR	2017671	Identifier	Z_ARRVAL_P		2017626	0					
ANR	2017672	ArgumentList	arr		2017626	1					
ANR	2017673	Argument	arr		2017626	0					
ANR	2017674	Identifier	arr		2017626	0					
ANR	2017675	IfStatement	if ( num_elems == 0 )		2017626	3					
ANR	2017676	Condition	num_elems == 0	1340:5:38945:38958	2017626	0	True				
ANR	2017677	EqualityExpression	num_elems == 0		2017626	0		==			
ANR	2017678	Identifier	num_elems		2017626	0					
ANR	2017679	PrimaryExpression	0		2017626	1					
ANR	2017680	CompoundStatement		10:21:209:209	2017626	1					
ANR	2017681	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected at least one element in this array"" )"	1341:2:38965:39039	2017626	0	True				
ANR	2017682	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected at least one element in this array"" )"		2017626	0					
ANR	2017683	Callee	do_from_zval_err		2017626	0					
ANR	2017684	Identifier	do_from_zval_err		2017626	0					
ANR	2017685	ArgumentList	ctx		2017626	1					
ANR	2017686	Argument	ctx		2017626	0					
ANR	2017687	Identifier	ctx		2017626	0					
ANR	2017688	Argument	"""%s"""		2017626	1					
ANR	2017689	PrimaryExpression	"""%s"""		2017626	0					
ANR	2017690	Argument	"""expected at least one element in this array"""		2017626	2					
ANR	2017691	PrimaryExpression	"""expected at least one element in this array"""		2017626	0					
ANR	2017692	ReturnStatement	return ( size_t ) - 1 ;	1342:2:39043:39060	2017626	1	True				
ANR	2017693	CastExpression	( size_t ) - 1		2017626	0					
ANR	2017694	CastTarget	size_t		2017626	0					
ANR	2017695	UnaryOperationExpression	- 1		2017626	1					
ANR	2017696	UnaryOperator	-		2017626	0					
ANR	2017697	PrimaryExpression	1		2017626	1					
ANR	2017698	ReturnStatement	return zend_hash_num_elements ( Z_ARRVAL_P ( arr ) ) * sizeof ( int ) ;	1345:1:39067:39127	2017626	4	True				
ANR	2017699	MultiplicativeExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) ) * sizeof ( int )		2017626	0		*			
ANR	2017700	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( arr ) )		2017626	0					
ANR	2017701	Callee	zend_hash_num_elements		2017626	0					
ANR	2017702	Identifier	zend_hash_num_elements		2017626	0					
ANR	2017703	ArgumentList	Z_ARRVAL_P ( arr )		2017626	1					
ANR	2017704	Argument	Z_ARRVAL_P ( arr )		2017626	0					
ANR	2017705	CallExpression	Z_ARRVAL_P ( arr )		2017626	0					
ANR	2017706	Callee	Z_ARRVAL_P		2017626	0					
ANR	2017707	Identifier	Z_ARRVAL_P		2017626	0					
ANR	2017708	ArgumentList	arr		2017626	1					
ANR	2017709	Argument	arr		2017626	0					
ANR	2017710	Identifier	arr		2017626	0					
ANR	2017711	SizeofExpression	sizeof ( int )		2017626	1					
ANR	2017712	Sizeof	sizeof		2017626	0					
ANR	2017713	SizeofOperand	int		2017626	1					
ANR	2017714	ReturnType	size_t		2017626	1					
ANR	2017715	Identifier	calculate_scm_rights_space		2017626	2					
ANR	2017716	ParameterList	"const zval * arr , ser_context * ctx"		2017626	3					
ANR	2017717	Parameter	const zval * arr	1330:34:38716:38730	2017626	0	True				
ANR	2017718	ParameterType	const zval *		2017626	0					
ANR	2017719	Identifier	arr		2017626	1					
ANR	2017720	Parameter	ser_context * ctx	1330:51:38733:38748	2017626	1	True				
ANR	2017721	ParameterType	ser_context *		2017626	0					
ANR	2017722	Identifier	ctx		2017626	1					
ANR	2017723	CFGEntryNode	ENTRY		2017626		True				
ANR	2017724	CFGExitNode	EXIT		2017626		True				
ANR	2017725	Symbol	arr		2017626						
ANR	2017726	Symbol	IS_ARRAY		2017626						
ANR	2017727	Symbol	zend_hash_num_elements		2017626						
ANR	2017728	Symbol	ctx		2017626						
ANR	2017729	Symbol	Z_TYPE_P		2017626						
ANR	2017730	Symbol	Z_ARRVAL_P		2017626						
ANR	2017731	Symbol	num_elems		2017626						
ANR	2017732	Function	from_zval_write_fd_array_aux	1347:0:39131:39947							
ANR	2017733	FunctionDef	"from_zval_write_fd_array_aux (zval * elem , unsigned i , void * * args , ser_context * ctx)"		2017732	0					
ANR	2017734	CompoundStatement		1348:0:39227:39947	2017732	0					
ANR	2017735	IdentifierDeclStatement	int * iarr = args [ 0 ] ;	1349:1:39230:39249	2017732	0	True				
ANR	2017736	IdentifierDecl	* iarr = args [ 0 ]		2017732	0					
ANR	2017737	IdentifierDeclType	int *		2017732	0					
ANR	2017738	Identifier	iarr		2017732	1					
ANR	2017739	AssignmentExpression	* iarr = args [ 0 ]		2017732	2		=			
ANR	2017740	Identifier	iarr		2017732	0					
ANR	2017741	ArrayIndexing	args [ 0 ]		2017732	1					
ANR	2017742	Identifier	args		2017732	0					
ANR	2017743	PrimaryExpression	0		2017732	1					
ANR	2017744	IfStatement	if ( Z_TYPE_P ( elem ) == IS_RESOURCE )		2017732	1					
ANR	2017745	Condition	Z_TYPE_P ( elem ) == IS_RESOURCE	1351:5:39257:39285	2017732	0	True				
ANR	2017746	EqualityExpression	Z_TYPE_P ( elem ) == IS_RESOURCE		2017732	0		==			
ANR	2017747	CallExpression	Z_TYPE_P ( elem )		2017732	0					
ANR	2017748	Callee	Z_TYPE_P		2017732	0					
ANR	2017749	Identifier	Z_TYPE_P		2017732	0					
ANR	2017750	ArgumentList	elem		2017732	1					
ANR	2017751	Argument	elem		2017732	0					
ANR	2017752	Identifier	elem		2017732	0					
ANR	2017753	Identifier	IS_RESOURCE		2017732	1					
ANR	2017754	CompoundStatement		6:2:86:102	2017732	1					
ANR	2017755	IdentifierDeclStatement	php_stream * stream ;	1352:2:39292:39310	2017732	0	True				
ANR	2017756	IdentifierDecl	* stream		2017732	0					
ANR	2017757	IdentifierDeclType	php_stream *		2017732	0					
ANR	2017758	Identifier	stream		2017732	1					
ANR	2017759	IdentifierDeclStatement	php_socket * sock ;	1353:2:39314:39330	2017732	1	True				
ANR	2017760	IdentifierDecl	* sock		2017732	0					
ANR	2017761	IdentifierDeclType	php_socket *		2017732	0					
ANR	2017762	Identifier	sock		2017732	1					
ANR	2017763	ExpressionStatement	"sock = ( php_socket * ) zend_fetch_resource_ex ( elem , NULL , php_sockets_le_socket ( ) )"	1355:2:39335:39415	2017732	2	True				
ANR	2017764	AssignmentExpression	"sock = ( php_socket * ) zend_fetch_resource_ex ( elem , NULL , php_sockets_le_socket ( ) )"		2017732	0		=			
ANR	2017765	Identifier	sock		2017732	0					
ANR	2017766	CastExpression	"( php_socket * ) zend_fetch_resource_ex ( elem , NULL , php_sockets_le_socket ( ) )"		2017732	1					
ANR	2017767	CastTarget	php_socket *		2017732	0					
ANR	2017768	CallExpression	"zend_fetch_resource_ex ( elem , NULL , php_sockets_le_socket ( ) )"		2017732	1					
ANR	2017769	Callee	zend_fetch_resource_ex		2017732	0					
ANR	2017770	Identifier	zend_fetch_resource_ex		2017732	0					
ANR	2017771	ArgumentList	elem		2017732	1					
ANR	2017772	Argument	elem		2017732	0					
ANR	2017773	Identifier	elem		2017732	0					
ANR	2017774	Argument	NULL		2017732	1					
ANR	2017775	Identifier	NULL		2017732	0					
ANR	2017776	Argument	php_sockets_le_socket ( )		2017732	2					
ANR	2017777	CallExpression	php_sockets_le_socket ( )		2017732	0					
ANR	2017778	Callee	php_sockets_le_socket		2017732	0					
ANR	2017779	Identifier	php_sockets_le_socket		2017732	0					
ANR	2017780	ArgumentList			2017732	1					
ANR	2017781	IfStatement	if ( sock )		2017732	3					
ANR	2017782	Condition	sock	1356:6:39423:39426	2017732	0	True				
ANR	2017783	Identifier	sock		2017732	0					
ANR	2017784	CompoundStatement		9:12:201:201	2017732	1					
ANR	2017785	ExpressionStatement	iarr [ i ] = sock -> bsd_socket	1357:3:39434:39460	2017732	0	True				
ANR	2017786	AssignmentExpression	iarr [ i ] = sock -> bsd_socket		2017732	0		=			
ANR	2017787	ArrayIndexing	iarr [ i ]		2017732	0					
ANR	2017788	Identifier	iarr		2017732	0					
ANR	2017789	Identifier	i		2017732	1					
ANR	2017790	PtrMemberAccess	sock -> bsd_socket		2017732	1					
ANR	2017791	Identifier	sock		2017732	0					
ANR	2017792	Identifier	bsd_socket		2017732	1					
ANR	2017793	ReturnStatement	return ;	1358:3:39465:39471	2017732	1	True				
ANR	2017794	ExpressionStatement	"stream = ( php_stream * ) zend_fetch_resource2_ex ( elem , NULL , php_file_le_stream ( ) , php_file_le_pstream ( ) )"	1361:2:39480:39583	2017732	4	True				
ANR	2017795	AssignmentExpression	"stream = ( php_stream * ) zend_fetch_resource2_ex ( elem , NULL , php_file_le_stream ( ) , php_file_le_pstream ( ) )"		2017732	0		=			
ANR	2017796	Identifier	stream		2017732	0					
ANR	2017797	CastExpression	"( php_stream * ) zend_fetch_resource2_ex ( elem , NULL , php_file_le_stream ( ) , php_file_le_pstream ( ) )"		2017732	1					
ANR	2017798	CastTarget	php_stream *		2017732	0					
ANR	2017799	CallExpression	"zend_fetch_resource2_ex ( elem , NULL , php_file_le_stream ( ) , php_file_le_pstream ( ) )"		2017732	1					
ANR	2017800	Callee	zend_fetch_resource2_ex		2017732	0					
ANR	2017801	Identifier	zend_fetch_resource2_ex		2017732	0					
ANR	2017802	ArgumentList	elem		2017732	1					
ANR	2017803	Argument	elem		2017732	0					
ANR	2017804	Identifier	elem		2017732	0					
ANR	2017805	Argument	NULL		2017732	1					
ANR	2017806	Identifier	NULL		2017732	0					
ANR	2017807	Argument	php_file_le_stream ( )		2017732	2					
ANR	2017808	CallExpression	php_file_le_stream ( )		2017732	0					
ANR	2017809	Callee	php_file_le_stream		2017732	0					
ANR	2017810	Identifier	php_file_le_stream		2017732	0					
ANR	2017811	ArgumentList			2017732	1					
ANR	2017812	Argument	php_file_le_pstream ( )		2017732	3					
ANR	2017813	CallExpression	php_file_le_pstream ( )		2017732	0					
ANR	2017814	Callee	php_file_le_pstream		2017732	0					
ANR	2017815	Identifier	php_file_le_pstream		2017732	0					
ANR	2017816	ArgumentList			2017732	1					
ANR	2017817	IfStatement	if ( stream == NULL )		2017732	5					
ANR	2017818	Condition	stream == NULL	1362:6:39591:39604	2017732	0	True				
ANR	2017819	EqualityExpression	stream == NULL		2017732	0		==			
ANR	2017820	Identifier	stream		2017732	0					
ANR	2017821	Identifier	NULL		2017732	1					
ANR	2017822	CompoundStatement		15:22:379:379	2017732	1					
ANR	2017823	ExpressionStatement	"do_from_zval_err ( ctx , ""resource is not a stream or a socket"" )"	1363:3:39612:39673	2017732	0	True				
ANR	2017824	CallExpression	"do_from_zval_err ( ctx , ""resource is not a stream or a socket"" )"		2017732	0					
ANR	2017825	Callee	do_from_zval_err		2017732	0					
ANR	2017826	Identifier	do_from_zval_err		2017732	0					
ANR	2017827	ArgumentList	ctx		2017732	1					
ANR	2017828	Argument	ctx		2017732	0					
ANR	2017829	Identifier	ctx		2017732	0					
ANR	2017830	Argument	"""resource is not a stream or a socket"""		2017732	1					
ANR	2017831	PrimaryExpression	"""resource is not a stream or a socket"""		2017732	0					
ANR	2017832	ReturnStatement	return ;	1364:3:39678:39684	2017732	1	True				
ANR	2017833	IfStatement	"if ( php_stream_cast ( stream , PHP_STREAM_AS_FD , ( void * * ) & iarr [ i - 1 ] , REPORT_ERRORS ) == FAILURE )"		2017732	6					
ANR	2017834	Condition	"php_stream_cast ( stream , PHP_STREAM_AS_FD , ( void * * ) & iarr [ i - 1 ] , REPORT_ERRORS ) == FAILURE"	1367:6:39697:39790	2017732	0	True				
ANR	2017835	EqualityExpression	"php_stream_cast ( stream , PHP_STREAM_AS_FD , ( void * * ) & iarr [ i - 1 ] , REPORT_ERRORS ) == FAILURE"		2017732	0		==			
ANR	2017836	CallExpression	"php_stream_cast ( stream , PHP_STREAM_AS_FD , ( void * * ) & iarr [ i - 1 ] , REPORT_ERRORS )"		2017732	0					
ANR	2017837	Callee	php_stream_cast		2017732	0					
ANR	2017838	Identifier	php_stream_cast		2017732	0					
ANR	2017839	ArgumentList	stream		2017732	1					
ANR	2017840	Argument	stream		2017732	0					
ANR	2017841	Identifier	stream		2017732	0					
ANR	2017842	Argument	PHP_STREAM_AS_FD		2017732	1					
ANR	2017843	Identifier	PHP_STREAM_AS_FD		2017732	0					
ANR	2017844	Argument	( void * * ) & iarr [ i - 1 ]		2017732	2					
ANR	2017845	CastExpression	( void * * ) & iarr [ i - 1 ]		2017732	0					
ANR	2017846	CastTarget	void * *		2017732	0					
ANR	2017847	UnaryOperationExpression	& iarr [ i - 1 ]		2017732	1					
ANR	2017848	UnaryOperator	&		2017732	0					
ANR	2017849	ArrayIndexing	iarr [ i - 1 ]		2017732	1					
ANR	2017850	Identifier	iarr		2017732	0					
ANR	2017851	AdditiveExpression	i - 1		2017732	1		-			
ANR	2017852	Identifier	i		2017732	0					
ANR	2017853	PrimaryExpression	1		2017732	1					
ANR	2017854	Argument	REPORT_ERRORS		2017732	3					
ANR	2017855	Identifier	REPORT_ERRORS		2017732	0					
ANR	2017856	Identifier	FAILURE		2017732	1					
ANR	2017857	CompoundStatement		21:31:565:565	2017732	1					
ANR	2017858	ExpressionStatement	"do_from_zval_err ( ctx , ""cast stream to file descriptor failed"" )"	1369:3:39798:39860	2017732	0	True				
ANR	2017859	CallExpression	"do_from_zval_err ( ctx , ""cast stream to file descriptor failed"" )"		2017732	0					
ANR	2017860	Callee	do_from_zval_err		2017732	0					
ANR	2017861	Identifier	do_from_zval_err		2017732	0					
ANR	2017862	ArgumentList	ctx		2017732	1					
ANR	2017863	Argument	ctx		2017732	0					
ANR	2017864	Identifier	ctx		2017732	0					
ANR	2017865	Argument	"""cast stream to file descriptor failed"""		2017732	1					
ANR	2017866	PrimaryExpression	"""cast stream to file descriptor failed"""		2017732	0					
ANR	2017867	ReturnStatement	return ;	1370:3:39865:39871	2017732	1	True				
ANR	2017868	ElseStatement	else		2017732	0					
ANR	2017869	CompoundStatement		25:8:657:657	2017732	0					
ANR	2017870	ExpressionStatement	"do_from_zval_err ( ctx , ""expected a resource variable"" )"	1373:2:39889:39942	2017732	0	True				
ANR	2017871	CallExpression	"do_from_zval_err ( ctx , ""expected a resource variable"" )"		2017732	0					
ANR	2017872	Callee	do_from_zval_err		2017732	0					
ANR	2017873	Identifier	do_from_zval_err		2017732	0					
ANR	2017874	ArgumentList	ctx		2017732	1					
ANR	2017875	Argument	ctx		2017732	0					
ANR	2017876	Identifier	ctx		2017732	0					
ANR	2017877	Argument	"""expected a resource variable"""		2017732	1					
ANR	2017878	PrimaryExpression	"""expected a resource variable"""		2017732	0					
ANR	2017879	ReturnType	static void		2017732	1					
ANR	2017880	Identifier	from_zval_write_fd_array_aux		2017732	2					
ANR	2017881	ParameterList	"zval * elem , unsigned i , void * * args , ser_context * ctx"		2017732	3					
ANR	2017882	Parameter	zval * elem	1347:41:39172:39181	2017732	0	True				
ANR	2017883	ParameterType	zval *		2017732	0					
ANR	2017884	Identifier	elem		2017732	1					
ANR	2017885	Parameter	unsigned i	1347:53:39184:39193	2017732	1	True				
ANR	2017886	ParameterType	unsigned		2017732	0					
ANR	2017887	Identifier	i		2017732	1					
ANR	2017888	Parameter	void * * args	1347:65:39196:39206	2017732	2	True				
ANR	2017889	ParameterType	void * *		2017732	0					
ANR	2017890	Identifier	args		2017732	1					
ANR	2017891	Parameter	ser_context * ctx	1347:78:39209:39224	2017732	3	True				
ANR	2017892	ParameterType	ser_context *		2017732	0					
ANR	2017893	Identifier	ctx		2017732	1					
ANR	2017894	CFGEntryNode	ENTRY		2017732		True				
ANR	2017895	CFGExitNode	EXIT		2017732		True				
ANR	2017896	Symbol	elem		2017732						
ANR	2017897	Symbol	NULL		2017732						
ANR	2017898	Symbol	ctx		2017732						
ANR	2017899	Symbol	sock -> bsd_socket		2017732						
ANR	2017900	Symbol	php_stream_cast		2017732						
ANR	2017901	Symbol	i		2017732						
ANR	2017902	Symbol	iarr		2017732						
ANR	2017903	Symbol	PHP_STREAM_AS_FD		2017732						
ANR	2017904	Symbol	Z_TYPE_P		2017732						
ANR	2017905	Symbol	FAILURE		2017732						
ANR	2017906	Symbol	* args		2017732						
ANR	2017907	Symbol	args		2017732						
ANR	2017908	Symbol	sock		2017732						
ANR	2017909	Symbol	* iarr		2017732						
ANR	2017910	Symbol	* i		2017732						
ANR	2017911	Symbol	REPORT_ERRORS		2017732						
ANR	2017912	Symbol	stream		2017732						
ANR	2017913	Symbol	zend_fetch_resource_ex		2017732						
ANR	2017914	Symbol	zend_fetch_resource2_ex		2017732						
ANR	2017915	Symbol	php_file_le_pstream		2017732						
ANR	2017916	Symbol	php_file_le_stream		2017732						
ANR	2017917	Symbol	php_sockets_le_socket		2017732						
ANR	2017918	Symbol	IS_RESOURCE		2017732						
ANR	2017919	Symbol	* sock		2017732						
ANR	2017920	Function	from_zval_write_fd_array	1376:0:39949:40218							
ANR	2017921	FunctionDef	"from_zval_write_fd_array (const zval * arr , char * int_arr , ser_context * ctx)"		2017920	0					
ANR	2017922	CompoundStatement		1377:0:40029:40218	2017920	0					
ANR	2017923	IfStatement	if ( Z_TYPE_P ( arr ) != IS_ARRAY )		2017920	0					
ANR	2017924	Condition	Z_TYPE_P ( arr ) != IS_ARRAY	1378:5:40036:40060	2017920	0	True				
ANR	2017925	EqualityExpression	Z_TYPE_P ( arr ) != IS_ARRAY		2017920	0		!=			
ANR	2017926	CallExpression	Z_TYPE_P ( arr )		2017920	0					
ANR	2017927	Callee	Z_TYPE_P		2017920	0					
ANR	2017928	Identifier	Z_TYPE_P		2017920	0					
ANR	2017929	ArgumentList	arr		2017920	1					
ANR	2017930	Argument	arr		2017920	0					
ANR	2017931	Identifier	arr		2017920	0					
ANR	2017932	Identifier	IS_ARRAY		2017920	1					
ANR	2017933	CompoundStatement		2:32:33:33	2017920	1					
ANR	2017934	ExpressionStatement	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"	1379:2:40067:40120	2017920	0	True				
ANR	2017935	CallExpression	"do_from_zval_err ( ctx , ""%s"" , ""expected an array here"" )"		2017920	0					
ANR	2017936	Callee	do_from_zval_err		2017920	0					
ANR	2017937	Identifier	do_from_zval_err		2017920	0					
ANR	2017938	ArgumentList	ctx		2017920	1					
ANR	2017939	Argument	ctx		2017920	0					
ANR	2017940	Identifier	ctx		2017920	0					
ANR	2017941	Argument	"""%s"""		2017920	1					
ANR	2017942	PrimaryExpression	"""%s"""		2017920	0					
ANR	2017943	Argument	"""expected an array here"""		2017920	2					
ANR	2017944	PrimaryExpression	"""expected an array here"""		2017920	0					
ANR	2017945	ReturnStatement	return ;	1380:2:40124:40130	2017920	1	True				
ANR	2017946	ExpressionStatement	"from_array_iterate ( arr , & from_zval_write_fd_array_aux , ( void * * ) & int_arr , ctx )"	1383:3:40139:40216	2017920	1	True				
ANR	2017947	CallExpression	"from_array_iterate ( arr , & from_zval_write_fd_array_aux , ( void * * ) & int_arr , ctx )"		2017920	0					
ANR	2017948	Callee	from_array_iterate		2017920	0					
ANR	2017949	Identifier	from_array_iterate		2017920	0					
ANR	2017950	ArgumentList	arr		2017920	1					
ANR	2017951	Argument	arr		2017920	0					
ANR	2017952	Identifier	arr		2017920	0					
ANR	2017953	Argument	& from_zval_write_fd_array_aux		2017920	1					
ANR	2017954	UnaryOperationExpression	& from_zval_write_fd_array_aux		2017920	0					
ANR	2017955	UnaryOperator	&		2017920	0					
ANR	2017956	Identifier	from_zval_write_fd_array_aux		2017920	1					
ANR	2017957	Argument	( void * * ) & int_arr		2017920	2					
ANR	2017958	CastExpression	( void * * ) & int_arr		2017920	0					
ANR	2017959	CastTarget	void * *		2017920	0					
ANR	2017960	UnaryOperationExpression	& int_arr		2017920	1					
ANR	2017961	UnaryOperator	&		2017920	0					
ANR	2017962	Identifier	int_arr		2017920	1					
ANR	2017963	Argument	ctx		2017920	3					
ANR	2017964	Identifier	ctx		2017920	0					
ANR	2017965	ReturnType	void		2017920	1					
ANR	2017966	Identifier	from_zval_write_fd_array		2017920	2					
ANR	2017967	ParameterList	"const zval * arr , char * int_arr , ser_context * ctx"		2017920	3					
ANR	2017968	Parameter	const zval * arr	1376:30:39979:39993	2017920	0	True				
ANR	2017969	ParameterType	const zval *		2017920	0					
ANR	2017970	Identifier	arr		2017920	1					
ANR	2017971	Parameter	char * int_arr	1376:47:39996:40008	2017920	1	True				
ANR	2017972	ParameterType	char *		2017920	0					
ANR	2017973	Identifier	int_arr		2017920	1					
ANR	2017974	Parameter	ser_context * ctx	1376:62:40011:40026	2017920	2	True				
ANR	2017975	ParameterType	ser_context *		2017920	0					
ANR	2017976	Identifier	ctx		2017920	1					
ANR	2017977	CFGEntryNode	ENTRY		2017920		True				
ANR	2017978	CFGExitNode	EXIT		2017920		True				
ANR	2017979	Symbol	arr		2017920						
ANR	2017980	Symbol	int_arr		2017920						
ANR	2017981	Symbol	IS_ARRAY		2017920						
ANR	2017982	Symbol	ctx		2017920						
ANR	2017983	Symbol	& int_arr		2017920						
ANR	2017984	Symbol	Z_TYPE_P		2017920						
ANR	2017985	Symbol	& from_zval_write_fd_array_aux		2017920						
ANR	2017986	Function	to_zval_read_fd_array	1385:0:40220:41629							
ANR	2017987	FunctionDef	"to_zval_read_fd_array (const char * data , zval * zv , res_context * ctx)"		2017986	0					
ANR	2017988	CompoundStatement		1386:0:40293:41629	2017986	0					
ANR	2017989	IdentifierDeclStatement	size_t * cmsg_len ;	1387:1:40296:40314	2017986	0	True				
ANR	2017990	IdentifierDecl	* cmsg_len		2017986	0					
ANR	2017991	IdentifierDeclType	size_t *		2017986	0					
ANR	2017992	Identifier	cmsg_len		2017986	1					
ANR	2017993	IdentifierDeclStatement	"int num_elems , i ;"	1388:1:40317:40341	2017986	1	True				
ANR	2017994	IdentifierDecl	num_elems		2017986	0					
ANR	2017995	IdentifierDeclType	int		2017986	0					
ANR	2017996	Identifier	num_elems		2017986	1					
ANR	2017997	IdentifierDecl	i		2017986	1					
ANR	2017998	IdentifierDeclType	int		2017986	0					
ANR	2017999	Identifier	i		2017986	1					
ANR	2018000	IdentifierDeclStatement	struct cmsghdr * dummy_cmsg = 0 ;	1390:1:40344:40374	2017986	2	True				
ANR	2018001	IdentifierDecl	* dummy_cmsg = 0		2017986	0					
ANR	2018002	IdentifierDeclType	struct cmsghdr *		2017986	0					
ANR	2018003	Identifier	dummy_cmsg		2017986	1					
ANR	2018004	AssignmentExpression	* dummy_cmsg = 0		2017986	2		=			
ANR	2018005	Identifier	dummy_cmsg		2017986	0					
ANR	2018006	PrimaryExpression	0		2017986	1					
ANR	2018007	IdentifierDeclStatement	size_t data_offset ;	1391:1:40377:40397	2017986	3	True				
ANR	2018008	IdentifierDecl	data_offset		2017986	0					
ANR	2018009	IdentifierDeclType	size_t		2017986	0					
ANR	2018010	Identifier	data_offset		2017986	1					
ANR	2018011	ExpressionStatement	data_offset = ( unsigned char * ) CMSG_DATA ( dummy_cmsg ) - ( unsigned char * ) dummy_cmsg	1393:1:40401:40486	2017986	4	True				
ANR	2018012	AssignmentExpression	data_offset = ( unsigned char * ) CMSG_DATA ( dummy_cmsg ) - ( unsigned char * ) dummy_cmsg		2017986	0		=			
ANR	2018013	Identifier	data_offset		2017986	0					
ANR	2018014	AdditiveExpression	( unsigned char * ) CMSG_DATA ( dummy_cmsg ) - ( unsigned char * ) dummy_cmsg		2017986	1		-			
ANR	2018015	CastExpression	( unsigned char * ) CMSG_DATA ( dummy_cmsg )		2017986	0					
ANR	2018016	CastTarget	unsigned char *		2017986	0					
ANR	2018017	CallExpression	CMSG_DATA ( dummy_cmsg )		2017986	1					
ANR	2018018	Callee	CMSG_DATA		2017986	0					
ANR	2018019	Identifier	CMSG_DATA		2017986	0					
ANR	2018020	ArgumentList	dummy_cmsg		2017986	1					
ANR	2018021	Argument	dummy_cmsg		2017986	0					
ANR	2018022	Identifier	dummy_cmsg		2017986	0					
ANR	2018023	CastExpression	( unsigned char * ) dummy_cmsg		2017986	1					
ANR	2018024	CastTarget	unsigned char *		2017986	0					
ANR	2018025	Identifier	dummy_cmsg		2017986	1					
ANR	2018026	IfStatement	"if ( ( cmsg_len = zend_hash_str_find_ptr ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 ) ) == NULL )"		2017986	5					
ANR	2018027	Condition	"( cmsg_len = zend_hash_str_find_ptr ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 ) ) == NULL"	1396:5:40494:40590	2017986	0	True				
ANR	2018028	EqualityExpression	"( cmsg_len = zend_hash_str_find_ptr ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 ) ) == NULL"		2017986	0		==			
ANR	2018029	AssignmentExpression	"cmsg_len = zend_hash_str_find_ptr ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 )"		2017986	0		=			
ANR	2018030	Identifier	cmsg_len		2017986	0					
ANR	2018031	CallExpression	"zend_hash_str_find_ptr ( & ctx -> params , KEY_CMSG_LEN , sizeof ( KEY_CMSG_LEN ) - 1 )"		2017986	1					
ANR	2018032	Callee	zend_hash_str_find_ptr		2017986	0					
ANR	2018033	Identifier	zend_hash_str_find_ptr		2017986	0					
ANR	2018034	ArgumentList	& ctx -> params		2017986	1					
ANR	2018035	Argument	& ctx -> params		2017986	0					
ANR	2018036	UnaryOperationExpression	& ctx -> params		2017986	0					
ANR	2018037	UnaryOperator	&		2017986	0					
ANR	2018038	PtrMemberAccess	ctx -> params		2017986	1					
ANR	2018039	Identifier	ctx		2017986	0					
ANR	2018040	Identifier	params		2017986	1					
ANR	2018041	Argument	KEY_CMSG_LEN		2017986	1					
ANR	2018042	Identifier	KEY_CMSG_LEN		2017986	0					
ANR	2018043	Argument	sizeof ( KEY_CMSG_LEN ) - 1		2017986	2					
ANR	2018044	AdditiveExpression	sizeof ( KEY_CMSG_LEN ) - 1		2017986	0		-			
ANR	2018045	SizeofExpression	sizeof ( KEY_CMSG_LEN )		2017986	0					
ANR	2018046	Sizeof	sizeof		2017986	0					
ANR	2018047	SizeofOperand	KEY_CMSG_LEN		2017986	1					
ANR	2018048	PrimaryExpression	1		2017986	1					
ANR	2018049	Identifier	NULL		2017986	1					
ANR	2018050	CompoundStatement		11:104:299:299	2017986	1					
ANR	2018051	Statement	do_to_zval_err	1397:2:40597:40610	2017986	0	True				
ANR	2018052	Statement	(	1397:16:40611:40611	2017986	1	True				
ANR	2018053	Statement	ctx	1397:17:40612:40614	2017986	2	True				
ANR	2018054	Statement	","	1397:20:40615:40615	2017986	3	True				
ANR	2018055	Statement	"""could not get value of parameter """	1397:22:40617:40651	2017986	4	True				
ANR	2018056	Statement	KEY_CMSG_LEN	1397:58:40653:40664	2017986	5	True				
ANR	2018057	Statement	)	1397:70:40665:40665	2017986	6	True				
ANR	2018058	ExpressionStatement		1397:71:40666:40666	2017986	7	True				
ANR	2018059	ReturnStatement	return ;	1398:2:40670:40676	2017986	8	True				
ANR	2018060	IfStatement	if ( * cmsg_len < data_offset )		2017986	6					
ANR	2018061	Condition	* cmsg_len < data_offset	1401:5:40687:40709	2017986	0	True				
ANR	2018062	RelationalExpression	* cmsg_len < data_offset		2017986	0		<			
ANR	2018063	UnaryOperationExpression	* cmsg_len		2017986	0					
ANR	2018064	UnaryOperator	*		2017986	0					
ANR	2018065	Identifier	cmsg_len		2017986	1					
ANR	2018066	Identifier	data_offset		2017986	1					
ANR	2018067	CompoundStatement		16:30:418:418	2017986	1					
ANR	2018068	Statement	do_to_zval_err	1402:2:40716:40729	2017986	0	True				
ANR	2018069	Statement	(	1402:16:40730:40730	2017986	1	True				
ANR	2018070	Statement	ctx	1402:17:40731:40733	2017986	2	True				
ANR	2018071	Statement	","	1402:20:40734:40734	2017986	3	True				
ANR	2018072	Statement	"""length of cmsg is smaller than its data member """	1402:22:40736:40784	2017986	4	True				
ANR	2018073	Statement	"""offset (%pd vs %pd)"""	1403:4:40790:40810	2017986	5	True				
ANR	2018074	Statement	","	1403:25:40811:40811	2017986	6	True				
ANR	2018075	Statement	(	1403:27:40813:40813	2017986	7	True				
ANR	2018076	Statement	zend_long	1403:28:40814:40822	2017986	8	True				
ANR	2018077	Statement	)	1403:37:40823:40823	2017986	9	True				
ANR	2018078	Statement	*	1403:38:40824:40824	2017986	10	True				
ANR	2018079	Statement	cmsg_len	1403:39:40825:40832	2017986	11	True				
ANR	2018080	Statement	","	1403:47:40833:40833	2017986	12	True				
ANR	2018081	Statement	(	1403:49:40835:40835	2017986	13	True				
ANR	2018082	Statement	zend_long	1403:50:40836:40844	2017986	14	True				
ANR	2018083	Statement	)	1403:59:40845:40845	2017986	15	True				
ANR	2018084	Statement	data_offset	1403:60:40846:40856	2017986	16	True				
ANR	2018085	Statement	)	1403:71:40857:40857	2017986	17	True				
ANR	2018086	ExpressionStatement		1403:72:40858:40858	2017986	18	True				
ANR	2018087	ReturnStatement	return ;	1404:2:40862:40868	2017986	19	True				
ANR	2018088	ExpressionStatement	num_elems = ( * cmsg_len - data_offset ) / sizeof ( int )	1406:1:40874:40925	2017986	7	True				
ANR	2018089	AssignmentExpression	num_elems = ( * cmsg_len - data_offset ) / sizeof ( int )		2017986	0		=			
ANR	2018090	Identifier	num_elems		2017986	0					
ANR	2018091	MultiplicativeExpression	( * cmsg_len - data_offset ) / sizeof ( int )		2017986	1		/			
ANR	2018092	AdditiveExpression	* cmsg_len - data_offset		2017986	0		-			
ANR	2018093	UnaryOperationExpression	* cmsg_len		2017986	0					
ANR	2018094	UnaryOperator	*		2017986	0					
ANR	2018095	Identifier	cmsg_len		2017986	1					
ANR	2018096	Identifier	data_offset		2017986	1					
ANR	2018097	SizeofExpression	sizeof ( int )		2017986	1					
ANR	2018098	Sizeof	sizeof		2017986	0					
ANR	2018099	SizeofOperand	int		2017986	1					
ANR	2018100	ExpressionStatement	"array_init_size ( zv , num_elems )"	1408:1:40929:40959	2017986	8	True				
ANR	2018101	CallExpression	"array_init_size ( zv , num_elems )"		2017986	0					
ANR	2018102	Callee	array_init_size		2017986	0					
ANR	2018103	Identifier	array_init_size		2017986	0					
ANR	2018104	ArgumentList	zv		2017986	1					
ANR	2018105	Argument	zv		2017986	0					
ANR	2018106	Identifier	zv		2017986	0					
ANR	2018107	Argument	num_elems		2017986	1					
ANR	2018108	Identifier	num_elems		2017986	0					
ANR	2018109	ForStatement	for ( i = 0 ; i < num_elems ; i ++ )		2017986	9					
ANR	2018110	ForInit	i = 0 ;	1410:6:40968:40973	2017986	0	True				
ANR	2018111	AssignmentExpression	i = 0		2017986	0		=			
ANR	2018112	Identifier	i		2017986	0					
ANR	2018113	PrimaryExpression	0		2017986	1					
ANR	2018114	Condition	i < num_elems	1410:13:40975:40987	2017986	1	True				
ANR	2018115	RelationalExpression	i < num_elems		2017986	0		<			
ANR	2018116	Identifier	i		2017986	0					
ANR	2018117	Identifier	num_elems		2017986	1					
ANR	2018118	PostIncDecOperationExpression	i ++	1410:28:40990:40992	2017986	2	True				
ANR	2018119	Identifier	i		2017986	0					
ANR	2018120	IncDec	++		2017986	1					
ANR	2018121	CompoundStatement		28:2:731:750	2017986	3					
ANR	2018122	IdentifierDeclStatement	zval elem ;	1411:2:40999:41009	2017986	0	True				
ANR	2018123	IdentifierDecl	elem		2017986	0					
ANR	2018124	IdentifierDeclType	zval		2017986	0					
ANR	2018125	Identifier	elem		2017986	1					
ANR	2018126	IdentifierDeclStatement	int fd ;	1412:2:41013:41021	2017986	1	True				
ANR	2018127	IdentifierDecl	fd		2017986	0					
ANR	2018128	IdentifierDeclType	int		2017986	0					
ANR	2018129	Identifier	fd		2017986	1					
ANR	2018130	IdentifierDeclStatement	struct stat statbuf ;	1413:2:41025:41044	2017986	2	True				
ANR	2018131	IdentifierDecl	statbuf		2017986	0					
ANR	2018132	IdentifierDeclType	struct stat		2017986	0					
ANR	2018133	Identifier	statbuf		2017986	1					
ANR	2018134	ExpressionStatement	fd = * ( ( int * ) data + i )	1415:2:41049:41072	2017986	3	True				
ANR	2018135	AssignmentExpression	fd = * ( ( int * ) data + i )		2017986	0		=			
ANR	2018136	Identifier	fd		2017986	0					
ANR	2018137	UnaryOperationExpression	* ( ( int * ) data + i )		2017986	1					
ANR	2018138	UnaryOperator	*		2017986	0					
ANR	2018139	AdditiveExpression	( int * ) data + i		2017986	1		+			
ANR	2018140	CastExpression	( int * ) data		2017986	0					
ANR	2018141	CastTarget	int *		2017986	0					
ANR	2018142	Identifier	data		2017986	1					
ANR	2018143	Identifier	i		2017986	1					
ANR	2018144	IfStatement	"if ( fstat ( fd , & statbuf ) == - 1 )"		2017986	4					
ANR	2018145	Condition	"fstat ( fd , & statbuf ) == - 1"	1418:6:41124:41148	2017986	0	True				
ANR	2018146	EqualityExpression	"fstat ( fd , & statbuf ) == - 1"		2017986	0		==			
ANR	2018147	CallExpression	"fstat ( fd , & statbuf )"		2017986	0					
ANR	2018148	Callee	fstat		2017986	0					
ANR	2018149	Identifier	fstat		2017986	0					
ANR	2018150	ArgumentList	fd		2017986	1					
ANR	2018151	Argument	fd		2017986	0					
ANR	2018152	Identifier	fd		2017986	0					
ANR	2018153	Argument	& statbuf		2017986	1					
ANR	2018154	UnaryOperationExpression	& statbuf		2017986	0					
ANR	2018155	UnaryOperator	&		2017986	0					
ANR	2018156	Identifier	statbuf		2017986	1					
ANR	2018157	UnaryOperationExpression	- 1		2017986	1					
ANR	2018158	UnaryOperator	-		2017986	0					
ANR	2018159	PrimaryExpression	1		2017986	1					
ANR	2018160	CompoundStatement		33:33:857:857	2017986	1					
ANR	2018161	Statement	do_to_zval_err	1419:3:41156:41169	2017986	0	True				
ANR	2018162	Statement	(	1419:17:41170:41170	2017986	1	True				
ANR	2018163	Statement	ctx	1419:18:41171:41173	2017986	2	True				
ANR	2018164	Statement	","	1419:21:41174:41174	2017986	3	True				
ANR	2018165	Statement	"""error creating resource for received file """	1419:23:41176:41219	2017986	4	True				
ANR	2018166	Statement	"""descriptor %d: fstat() call failed with errno %d"""	1420:5:41226:41275	2017986	5	True				
ANR	2018167	Statement	","	1420:55:41276:41276	2017986	6	True				
ANR	2018168	Statement	fd	1420:57:41278:41279	2017986	7	True				
ANR	2018169	Statement	","	1420:59:41280:41280	2017986	8	True				
ANR	2018170	Statement	errno	1420:61:41282:41286	2017986	9	True				
ANR	2018171	Statement	)	1420:66:41287:41287	2017986	10	True				
ANR	2018172	ExpressionStatement		1420:67:41288:41288	2017986	11	True				
ANR	2018173	ReturnStatement	return ;	1421:3:41293:41299	2017986	12	True				
ANR	2018174	IfStatement	if ( S_ISSOCK ( statbuf . st_mode ) )		2017986	5					
ANR	2018175	Condition	S_ISSOCK ( statbuf . st_mode )	1423:6:41311:41335	2017986	0	True				
ANR	2018176	CallExpression	S_ISSOCK ( statbuf . st_mode )		2017986	0					
ANR	2018177	Callee	S_ISSOCK		2017986	0					
ANR	2018178	Identifier	S_ISSOCK		2017986	0					
ANR	2018179	ArgumentList	statbuf . st_mode		2017986	1					
ANR	2018180	Argument	statbuf . st_mode		2017986	0					
ANR	2018181	MemberAccess	statbuf . st_mode		2017986	0					
ANR	2018182	Identifier	statbuf		2017986	0					
ANR	2018183	Identifier	st_mode		2017986	1					
ANR	2018184	CompoundStatement		39:3:1049:1101	2017986	1					
ANR	2018185	IdentifierDeclStatement	php_socket * sock = socket_import_file_descriptor ( fd ) ;	1424:3:41343:41395	2017986	0	True				
ANR	2018186	IdentifierDecl	* sock = socket_import_file_descriptor ( fd )		2017986	0					
ANR	2018187	IdentifierDeclType	php_socket *		2017986	0					
ANR	2018188	Identifier	sock		2017986	1					
ANR	2018189	AssignmentExpression	* sock = socket_import_file_descriptor ( fd )		2017986	2		=			
ANR	2018190	Identifier	sock		2017986	0					
ANR	2018191	CallExpression	socket_import_file_descriptor ( fd )		2017986	1					
ANR	2018192	Callee	socket_import_file_descriptor		2017986	0					
ANR	2018193	Identifier	socket_import_file_descriptor		2017986	0					
ANR	2018194	ArgumentList	fd		2017986	1					
ANR	2018195	Argument	fd		2017986	0					
ANR	2018196	Identifier	fd		2017986	0					
ANR	2018197	ExpressionStatement	"ZVAL_RES ( & elem , zend_register_resource ( sock , php_sockets_le_socket ( ) ) )"	1425:3:41400:41470	2017986	1	True				
ANR	2018198	CallExpression	"ZVAL_RES ( & elem , zend_register_resource ( sock , php_sockets_le_socket ( ) ) )"		2017986	0					
ANR	2018199	Callee	ZVAL_RES		2017986	0					
ANR	2018200	Identifier	ZVAL_RES		2017986	0					
ANR	2018201	ArgumentList	& elem		2017986	1					
ANR	2018202	Argument	& elem		2017986	0					
ANR	2018203	UnaryOperationExpression	& elem		2017986	0					
ANR	2018204	UnaryOperator	&		2017986	0					
ANR	2018205	Identifier	elem		2017986	1					
ANR	2018206	Argument	"zend_register_resource ( sock , php_sockets_le_socket ( ) )"		2017986	1					
ANR	2018207	CallExpression	"zend_register_resource ( sock , php_sockets_le_socket ( ) )"		2017986	0					
ANR	2018208	Callee	zend_register_resource		2017986	0					
ANR	2018209	Identifier	zend_register_resource		2017986	0					
ANR	2018210	ArgumentList	sock		2017986	1					
ANR	2018211	Argument	sock		2017986	0					
ANR	2018212	Identifier	sock		2017986	0					
ANR	2018213	Argument	php_sockets_le_socket ( )		2017986	1					
ANR	2018214	CallExpression	php_sockets_le_socket ( )		2017986	0					
ANR	2018215	Callee	php_sockets_le_socket		2017986	0					
ANR	2018216	Identifier	php_sockets_le_socket		2017986	0					
ANR	2018217	ArgumentList			2017986	1					
ANR	2018218	ElseStatement	else		2017986	0					
ANR	2018219	CompoundStatement		42:3:1192:1253	2017986	0					
ANR	2018220	IdentifierDeclStatement	"php_stream * stream = php_stream_fopen_from_fd ( fd , ""rw"" , NULL ) ;"	1427:3:41486:41547	2017986	0	True				
ANR	2018221	IdentifierDecl	"* stream = php_stream_fopen_from_fd ( fd , ""rw"" , NULL )"		2017986	0					
ANR	2018222	IdentifierDeclType	php_stream *		2017986	0					
ANR	2018223	Identifier	stream		2017986	1					
ANR	2018224	AssignmentExpression	"* stream = php_stream_fopen_from_fd ( fd , ""rw"" , NULL )"		2017986	2		=			
ANR	2018225	Identifier	stream		2017986	0					
ANR	2018226	CallExpression	"php_stream_fopen_from_fd ( fd , ""rw"" , NULL )"		2017986	1					
ANR	2018227	Callee	php_stream_fopen_from_fd		2017986	0					
ANR	2018228	Identifier	php_stream_fopen_from_fd		2017986	0					
ANR	2018229	ArgumentList	fd		2017986	1					
ANR	2018230	Argument	fd		2017986	0					
ANR	2018231	Identifier	fd		2017986	0					
ANR	2018232	Argument	"""rw"""		2017986	1					
ANR	2018233	PrimaryExpression	"""rw"""		2017986	0					
ANR	2018234	Argument	NULL		2017986	2					
ANR	2018235	Identifier	NULL		2017986	0					
ANR	2018236	ExpressionStatement	"php_stream_to_zval ( stream , & elem )"	1428:3:41552:41585	2017986	1	True				
ANR	2018237	CallExpression	"php_stream_to_zval ( stream , & elem )"		2017986	0					
ANR	2018238	Callee	php_stream_to_zval		2017986	0					
ANR	2018239	Identifier	php_stream_to_zval		2017986	0					
ANR	2018240	ArgumentList	stream		2017986	1					
ANR	2018241	Argument	stream		2017986	0					
ANR	2018242	Identifier	stream		2017986	0					
ANR	2018243	Argument	& elem		2017986	1					
ANR	2018244	UnaryOperationExpression	& elem		2017986	0					
ANR	2018245	UnaryOperator	&		2017986	0					
ANR	2018246	Identifier	elem		2017986	1					
ANR	2018247	ExpressionStatement	"add_next_index_zval ( zv , & elem )"	1431:2:41594:41624	2017986	6	True				
ANR	2018248	CallExpression	"add_next_index_zval ( zv , & elem )"		2017986	0					
ANR	2018249	Callee	add_next_index_zval		2017986	0					
ANR	2018250	Identifier	add_next_index_zval		2017986	0					
ANR	2018251	ArgumentList	zv		2017986	1					
ANR	2018252	Argument	zv		2017986	0					
ANR	2018253	Identifier	zv		2017986	0					
ANR	2018254	Argument	& elem		2017986	1					
ANR	2018255	UnaryOperationExpression	& elem		2017986	0					
ANR	2018256	UnaryOperator	&		2017986	0					
ANR	2018257	Identifier	elem		2017986	1					
ANR	2018258	ReturnType	void		2017986	1					
ANR	2018259	Identifier	to_zval_read_fd_array		2017986	2					
ANR	2018260	ParameterList	"const char * data , zval * zv , res_context * ctx"		2017986	3					
ANR	2018261	Parameter	const char * data	1385:27:40247:40262	2017986	0	True				
ANR	2018262	ParameterType	const char *		2017986	0					
ANR	2018263	Identifier	data		2017986	1					
ANR	2018264	Parameter	zval * zv	1385:45:40265:40272	2017986	1	True				
ANR	2018265	ParameterType	zval *		2017986	0					
ANR	2018266	Identifier	zv		2017986	1					
ANR	2018267	Parameter	res_context * ctx	1385:55:40275:40290	2017986	2	True				
ANR	2018268	ParameterType	res_context *		2017986	0					
ANR	2018269	Identifier	ctx		2017986	1					
ANR	2018270	CFGEntryNode	ENTRY		2017986		True				
ANR	2018271	CFGExitNode	EXIT		2017986		True				
ANR	2018272	Symbol	CMSG_DATA		2017986						
ANR	2018273	Symbol	* cmsg_len		2017986						
ANR	2018274	Symbol	& elem		2017986						
ANR	2018275	Symbol	data		2017986						
ANR	2018276	Symbol	php_stream_fopen_from_fd		2017986						
ANR	2018277	Symbol	stream		2017986						
ANR	2018278	Symbol	zend_register_resource		2017986						
ANR	2018279	Symbol	zend_hash_str_find_ptr		2017986						
ANR	2018280	Symbol	socket_import_file_descriptor		2017986						
ANR	2018281	Symbol	& statbuf		2017986						
ANR	2018282	Symbol	php_sockets_le_socket		2017986						
ANR	2018283	Symbol	elem		2017986						
ANR	2018284	Symbol	statbuf . st_mode		2017986						
ANR	2018285	Symbol	S_ISSOCK		2017986						
ANR	2018286	Symbol	NULL		2017986						
ANR	2018287	Symbol	cmsg_len		2017986						
ANR	2018288	Symbol	ctx		2017986						
ANR	2018289	Symbol	i		2017986						
ANR	2018290	Symbol	fstat		2017986						
ANR	2018291	Symbol	* ( ( int * ) data + i )		2017986						
ANR	2018292	Symbol	data_offset		2017986						
ANR	2018293	Symbol	sock		2017986						
ANR	2018294	Symbol	* i		2017986						
ANR	2018295	Symbol	statbuf		2017986						
ANR	2018296	Symbol	KEY_CMSG_LEN		2017986						
ANR	2018297	Symbol	dummy_cmsg		2017986						
ANR	2018298	Symbol	& ctx -> params		2017986						
ANR	2018299	Symbol	zv		2017986						
ANR	2018300	Symbol	num_elems		2017986						
ANR	2018301	Symbol	* data		2017986						
ANR	2018302	Symbol	fd		2017986						
ANR	2018303	Function	free_from_zval_allocation	1437:0:41673:41766							
ANR	2018304	FunctionDef	free_from_zval_allocation (void * alloc_ptr_ptr)		2018303	0					
ANR	2018305	CompoundStatement		1438:0:41732:41766	2018303	0					
ANR	2018306	ExpressionStatement	efree ( * ( void * * ) alloc_ptr_ptr )	1439:1:41735:41764	2018303	0	True				
ANR	2018307	CallExpression	efree ( * ( void * * ) alloc_ptr_ptr )		2018303	0					
ANR	2018308	Callee	efree		2018303	0					
ANR	2018309	Identifier	efree		2018303	0					
ANR	2018310	ArgumentList	* ( void * * ) alloc_ptr_ptr		2018303	1					
ANR	2018311	Argument	* ( void * * ) alloc_ptr_ptr		2018303	0					
ANR	2018312	UnaryOperationExpression	* ( void * * ) alloc_ptr_ptr		2018303	0					
ANR	2018313	UnaryOperator	*		2018303	0					
ANR	2018314	CastExpression	( void * * ) alloc_ptr_ptr		2018303	1					
ANR	2018315	CastTarget	void * *		2018303	0					
ANR	2018316	Identifier	alloc_ptr_ptr		2018303	1					
ANR	2018317	ReturnType	static void		2018303	1					
ANR	2018318	Identifier	free_from_zval_allocation		2018303	2					
ANR	2018319	ParameterList	void * alloc_ptr_ptr		2018303	3					
ANR	2018320	Parameter	void * alloc_ptr_ptr	1437:38:41711:41729	2018303	0	True				
ANR	2018321	ParameterType	void *		2018303	0					
ANR	2018322	Identifier	alloc_ptr_ptr		2018303	1					
ANR	2018323	CFGEntryNode	ENTRY		2018303		True				
ANR	2018324	CFGExitNode	EXIT		2018303		True				
ANR	2018325	Symbol	alloc_ptr_ptr		2018303						
ANR	2018326	Symbol	* ( void * * ) alloc_ptr_ptr		2018303						
ANR	2018327	Symbol	* alloc_ptr_ptr		2018303						
ANR	2018328	Function	from_zval_run_conversions	1441:0:41768:42907							
ANR	2018329	FunctionDef	"from_zval_run_conversions (const zval * container , php_socket * sock , from_zval_write_field * writer , size_t struct_size , const char * top_name , zend_llist * * allocations , struct err_s * err)"		2018328	0					
ANR	2018330	CompoundStatement		1448:0:42043:42907	2018328	0					
ANR	2018331	IdentifierDeclStatement	ser_context ctx ;	1449:1:42046:42061	2018328	0	True				
ANR	2018332	IdentifierDecl	ctx		2018328	0					
ANR	2018333	IdentifierDeclType	ser_context		2018328	0					
ANR	2018334	Identifier	ctx		2018328	1					
ANR	2018335	IdentifierDeclStatement	char * structure ;	1450:1:42064:42079	2018328	1	True				
ANR	2018336	IdentifierDecl	* structure		2018328	0					
ANR	2018337	IdentifierDeclType	char *		2018328	0					
ANR	2018338	Identifier	structure		2018328	1					
ANR	2018339	ExpressionStatement	* allocations = NULL	1452:1:42083:42102	2018328	2	True				
ANR	2018340	AssignmentExpression	* allocations = NULL		2018328	0		=			
ANR	2018341	UnaryOperationExpression	* allocations		2018328	0					
ANR	2018342	UnaryOperator	*		2018328	0					
ANR	2018343	Identifier	allocations		2018328	1					
ANR	2018344	Identifier	NULL		2018328	1					
ANR	2018345	IfStatement	if ( err -> has_error )		2018328	3					
ANR	2018346	Condition	err -> has_error	1454:5:42110:42123	2018328	0	True				
ANR	2018347	PtrMemberAccess	err -> has_error		2018328	0					
ANR	2018348	Identifier	err		2018328	0					
ANR	2018349	Identifier	has_error		2018328	1					
ANR	2018350	CompoundStatement		7:21:82:82	2018328	1					
ANR	2018351	ReturnStatement	return NULL ;	1455:2:42130:42141	2018328	0	True				
ANR	2018352	Identifier	NULL		2018328	0					
ANR	2018353	ExpressionStatement	"memset ( & ctx , 0 , sizeof ( ctx ) )"	1458:1:42148:42176	2018328	4	True				
ANR	2018354	CallExpression	"memset ( & ctx , 0 , sizeof ( ctx ) )"		2018328	0					
ANR	2018355	Callee	memset		2018328	0					
ANR	2018356	Identifier	memset		2018328	0					
ANR	2018357	ArgumentList	& ctx		2018328	1					
ANR	2018358	Argument	& ctx		2018328	0					
ANR	2018359	UnaryOperationExpression	& ctx		2018328	0					
ANR	2018360	UnaryOperator	&		2018328	0					
ANR	2018361	Identifier	ctx		2018328	1					
ANR	2018362	Argument	0		2018328	1					
ANR	2018363	PrimaryExpression	0		2018328	0					
ANR	2018364	Argument	sizeof ( ctx )		2018328	2					
ANR	2018365	SizeofExpression	sizeof ( ctx )		2018328	0					
ANR	2018366	Sizeof	sizeof		2018328	0					
ANR	2018367	SizeofOperand	ctx		2018328	1					
ANR	2018368	ExpressionStatement	"zend_hash_init ( & ctx . params , 8 , NULL , NULL , 0 )"	1459:1:42179:42224	2018328	5	True				
ANR	2018369	CallExpression	"zend_hash_init ( & ctx . params , 8 , NULL , NULL , 0 )"		2018328	0					
ANR	2018370	Callee	zend_hash_init		2018328	0					
ANR	2018371	Identifier	zend_hash_init		2018328	0					
ANR	2018372	ArgumentList	& ctx . params		2018328	1					
ANR	2018373	Argument	& ctx . params		2018328	0					
ANR	2018374	UnaryOperationExpression	& ctx . params		2018328	0					
ANR	2018375	UnaryOperator	&		2018328	0					
ANR	2018376	MemberAccess	ctx . params		2018328	1					
ANR	2018377	Identifier	ctx		2018328	0					
ANR	2018378	Identifier	params		2018328	1					
ANR	2018379	Argument	8		2018328	1					
ANR	2018380	PrimaryExpression	8		2018328	0					
ANR	2018381	Argument	NULL		2018328	2					
ANR	2018382	Identifier	NULL		2018328	0					
ANR	2018383	Argument	NULL		2018328	3					
ANR	2018384	Identifier	NULL		2018328	0					
ANR	2018385	Argument	0		2018328	4					
ANR	2018386	PrimaryExpression	0		2018328	0					
ANR	2018387	ExpressionStatement	"zend_llist_init ( & ctx . keys , sizeof ( const char * ) , NULL , 0 )"	1460:1:42227:42284	2018328	6	True				
ANR	2018388	CallExpression	"zend_llist_init ( & ctx . keys , sizeof ( const char * ) , NULL , 0 )"		2018328	0					
ANR	2018389	Callee	zend_llist_init		2018328	0					
ANR	2018390	Identifier	zend_llist_init		2018328	0					
ANR	2018391	ArgumentList	& ctx . keys		2018328	1					
ANR	2018392	Argument	& ctx . keys		2018328	0					
ANR	2018393	UnaryOperationExpression	& ctx . keys		2018328	0					
ANR	2018394	UnaryOperator	&		2018328	0					
ANR	2018395	MemberAccess	ctx . keys		2018328	1					
ANR	2018396	Identifier	ctx		2018328	0					
ANR	2018397	Identifier	keys		2018328	1					
ANR	2018398	Argument	sizeof ( const char * )		2018328	1					
ANR	2018399	SizeofExpression	sizeof ( const char * )		2018328	0					
ANR	2018400	Sizeof	sizeof		2018328	0					
ANR	2018401	SizeofOperand	const char *		2018328	1					
ANR	2018402	Argument	NULL		2018328	2					
ANR	2018403	Identifier	NULL		2018328	0					
ANR	2018404	Argument	0		2018328	3					
ANR	2018405	PrimaryExpression	0		2018328	0					
ANR	2018406	ExpressionStatement	"zend_llist_init ( & ctx . allocations , sizeof ( void * ) , & free_from_zval_allocation , 0 )"	1461:1:42287:42367	2018328	7	True				
ANR	2018407	CallExpression	"zend_llist_init ( & ctx . allocations , sizeof ( void * ) , & free_from_zval_allocation , 0 )"		2018328	0					
ANR	2018408	Callee	zend_llist_init		2018328	0					
ANR	2018409	Identifier	zend_llist_init		2018328	0					
ANR	2018410	ArgumentList	& ctx . allocations		2018328	1					
ANR	2018411	Argument	& ctx . allocations		2018328	0					
ANR	2018412	UnaryOperationExpression	& ctx . allocations		2018328	0					
ANR	2018413	UnaryOperator	&		2018328	0					
ANR	2018414	MemberAccess	ctx . allocations		2018328	1					
ANR	2018415	Identifier	ctx		2018328	0					
ANR	2018416	Identifier	allocations		2018328	1					
ANR	2018417	Argument	sizeof ( void * )		2018328	1					
ANR	2018418	SizeofExpression	sizeof ( void * )		2018328	0					
ANR	2018419	Sizeof	sizeof		2018328	0					
ANR	2018420	SizeofOperand	void *		2018328	1					
ANR	2018421	Argument	& free_from_zval_allocation		2018328	2					
ANR	2018422	UnaryOperationExpression	& free_from_zval_allocation		2018328	0					
ANR	2018423	UnaryOperator	&		2018328	0					
ANR	2018424	Identifier	free_from_zval_allocation		2018328	1					
ANR	2018425	Argument	0		2018328	3					
ANR	2018426	PrimaryExpression	0		2018328	0					
ANR	2018427	ExpressionStatement	ctx . sock = sock	1462:1:42370:42385	2018328	8	True				
ANR	2018428	AssignmentExpression	ctx . sock = sock		2018328	0		=			
ANR	2018429	MemberAccess	ctx . sock		2018328	0					
ANR	2018430	Identifier	ctx		2018328	0					
ANR	2018431	Identifier	sock		2018328	1					
ANR	2018432	Identifier	sock		2018328	1					
ANR	2018433	ExpressionStatement	"structure = ecalloc ( 1 , struct_size )"	1464:1:42389:42424	2018328	9	True				
ANR	2018434	AssignmentExpression	"structure = ecalloc ( 1 , struct_size )"		2018328	0		=			
ANR	2018435	Identifier	structure		2018328	0					
ANR	2018436	CallExpression	"ecalloc ( 1 , struct_size )"		2018328	1					
ANR	2018437	Callee	ecalloc		2018328	0					
ANR	2018438	Identifier	ecalloc		2018328	0					
ANR	2018439	ArgumentList	1		2018328	1					
ANR	2018440	Argument	1		2018328	0					
ANR	2018441	PrimaryExpression	1		2018328	0					
ANR	2018442	Argument	struct_size		2018328	1					
ANR	2018443	Identifier	struct_size		2018328	0					
ANR	2018444	ExpressionStatement	"zend_llist_add_element ( & ctx . keys , & top_name )"	1466:1:42428:42472	2018328	10	True				
ANR	2018445	CallExpression	"zend_llist_add_element ( & ctx . keys , & top_name )"		2018328	0					
ANR	2018446	Callee	zend_llist_add_element		2018328	0					
ANR	2018447	Identifier	zend_llist_add_element		2018328	0					
ANR	2018448	ArgumentList	& ctx . keys		2018328	1					
ANR	2018449	Argument	& ctx . keys		2018328	0					
ANR	2018450	UnaryOperationExpression	& ctx . keys		2018328	0					
ANR	2018451	UnaryOperator	&		2018328	0					
ANR	2018452	MemberAccess	ctx . keys		2018328	1					
ANR	2018453	Identifier	ctx		2018328	0					
ANR	2018454	Identifier	keys		2018328	1					
ANR	2018455	Argument	& top_name		2018328	1					
ANR	2018456	UnaryOperationExpression	& top_name		2018328	0					
ANR	2018457	UnaryOperator	&		2018328	0					
ANR	2018458	Identifier	top_name		2018328	1					
ANR	2018459	ExpressionStatement	"zend_llist_add_element ( & ctx . allocations , & structure )"	1467:1:42475:42527	2018328	11	True				
ANR	2018460	CallExpression	"zend_llist_add_element ( & ctx . allocations , & structure )"		2018328	0					
ANR	2018461	Callee	zend_llist_add_element		2018328	0					
ANR	2018462	Identifier	zend_llist_add_element		2018328	0					
ANR	2018463	ArgumentList	& ctx . allocations		2018328	1					
ANR	2018464	Argument	& ctx . allocations		2018328	0					
ANR	2018465	UnaryOperationExpression	& ctx . allocations		2018328	0					
ANR	2018466	UnaryOperator	&		2018328	0					
ANR	2018467	MemberAccess	ctx . allocations		2018328	1					
ANR	2018468	Identifier	ctx		2018328	0					
ANR	2018469	Identifier	allocations		2018328	1					
ANR	2018470	Argument	& structure		2018328	1					
ANR	2018471	UnaryOperationExpression	& structure		2018328	0					
ANR	2018472	UnaryOperator	&		2018328	0					
ANR	2018473	Identifier	structure		2018328	1					
ANR	2018474	ExpressionStatement	"writer ( container , structure , & ctx )"	1470:1:42548:42582	2018328	12	True				
ANR	2018475	CallExpression	"writer ( container , structure , & ctx )"		2018328	0					
ANR	2018476	Callee	writer		2018328	0					
ANR	2018477	Identifier	writer		2018328	0					
ANR	2018478	ArgumentList	container		2018328	1					
ANR	2018479	Argument	container		2018328	0					
ANR	2018480	Identifier	container		2018328	0					
ANR	2018481	Argument	structure		2018328	1					
ANR	2018482	Identifier	structure		2018328	0					
ANR	2018483	Argument	& ctx		2018328	2					
ANR	2018484	UnaryOperationExpression	& ctx		2018328	0					
ANR	2018485	UnaryOperator	&		2018328	0					
ANR	2018486	Identifier	ctx		2018328	1					
ANR	2018487	IfStatement	if ( ctx . err . has_error )		2018328	13					
ANR	2018488	Condition	ctx . err . has_error	1472:5:42590:42606	2018328	0	True				
ANR	2018489	MemberAccess	ctx . err . has_error		2018328	0					
ANR	2018490	MemberAccess	ctx . err		2018328	0					
ANR	2018491	Identifier	ctx		2018328	0					
ANR	2018492	Identifier	err		2018328	1					
ANR	2018493	Identifier	has_error		2018328	1					
ANR	2018494	CompoundStatement		25:24:565:565	2018328	1					
ANR	2018495	ExpressionStatement	zend_llist_destroy ( & ctx . allocations )	1473:2:42613:42649	2018328	0	True				
ANR	2018496	CallExpression	zend_llist_destroy ( & ctx . allocations )		2018328	0					
ANR	2018497	Callee	zend_llist_destroy		2018328	0					
ANR	2018498	Identifier	zend_llist_destroy		2018328	0					
ANR	2018499	ArgumentList	& ctx . allocations		2018328	1					
ANR	2018500	Argument	& ctx . allocations		2018328	0					
ANR	2018501	UnaryOperationExpression	& ctx . allocations		2018328	0					
ANR	2018502	UnaryOperator	&		2018328	0					
ANR	2018503	MemberAccess	ctx . allocations		2018328	1					
ANR	2018504	Identifier	ctx		2018328	0					
ANR	2018505	Identifier	allocations		2018328	1					
ANR	2018506	ExpressionStatement	structure = NULL	1474:2:42689:42705	2018328	1	True				
ANR	2018507	AssignmentExpression	structure = NULL		2018328	0		=			
ANR	2018508	Identifier	structure		2018328	0					
ANR	2018509	Identifier	NULL		2018328	1					
ANR	2018510	ExpressionStatement	* err = ctx . err	1475:2:42709:42723	2018328	2	True				
ANR	2018511	AssignmentExpression	* err = ctx . err		2018328	0		=			
ANR	2018512	UnaryOperationExpression	* err		2018328	0					
ANR	2018513	UnaryOperator	*		2018328	0					
ANR	2018514	Identifier	err		2018328	1					
ANR	2018515	MemberAccess	ctx . err		2018328	1					
ANR	2018516	Identifier	ctx		2018328	0					
ANR	2018517	Identifier	err		2018328	1					
ANR	2018518	ElseStatement	else		2018328	0					
ANR	2018519	CompoundStatement		29:8:689:689	2018328	0					
ANR	2018520	ExpressionStatement	* allocations = emalloc ( sizeof * * allocations )	1477:2:42737:42781	2018328	0	True				
ANR	2018521	AssignmentExpression	* allocations = emalloc ( sizeof * * allocations )		2018328	0		=			
ANR	2018522	UnaryOperationExpression	* allocations		2018328	0					
ANR	2018523	UnaryOperator	*		2018328	0					
ANR	2018524	Identifier	allocations		2018328	1					
ANR	2018525	CallExpression	emalloc ( sizeof * * allocations )		2018328	1					
ANR	2018526	Callee	emalloc		2018328	0					
ANR	2018527	Identifier	emalloc		2018328	0					
ANR	2018528	ArgumentList	sizeof * * allocations		2018328	1					
ANR	2018529	Argument	sizeof * * allocations		2018328	0					
ANR	2018530	SizeofExpression	sizeof * * allocations		2018328	0					
ANR	2018531	Sizeof	sizeof		2018328	0					
ANR	2018532	UnaryOperationExpression	* * allocations		2018328	1					
ANR	2018533	UnaryOperator	*		2018328	0					
ANR	2018534	UnaryOperationExpression	* allocations		2018328	1					
ANR	2018535	UnaryOperator	*		2018328	0					
ANR	2018536	Identifier	allocations		2018328	1					
ANR	2018537	ExpressionStatement	* * allocations = ctx . allocations	1478:2:42785:42816	2018328	1	True				
ANR	2018538	AssignmentExpression	* * allocations = ctx . allocations		2018328	0		=			
ANR	2018539	UnaryOperationExpression	* * allocations		2018328	0					
ANR	2018540	UnaryOperator	*		2018328	0					
ANR	2018541	UnaryOperationExpression	* allocations		2018328	1					
ANR	2018542	UnaryOperator	*		2018328	0					
ANR	2018543	Identifier	allocations		2018328	1					
ANR	2018544	MemberAccess	ctx . allocations		2018328	1					
ANR	2018545	Identifier	ctx		2018328	0					
ANR	2018546	Identifier	allocations		2018328	1					
ANR	2018547	ExpressionStatement	zend_llist_destroy ( & ctx . keys )	1481:1:42823:42852	2018328	14	True				
ANR	2018548	CallExpression	zend_llist_destroy ( & ctx . keys )		2018328	0					
ANR	2018549	Callee	zend_llist_destroy		2018328	0					
ANR	2018550	Identifier	zend_llist_destroy		2018328	0					
ANR	2018551	ArgumentList	& ctx . keys		2018328	1					
ANR	2018552	Argument	& ctx . keys		2018328	0					
ANR	2018553	UnaryOperationExpression	& ctx . keys		2018328	0					
ANR	2018554	UnaryOperator	&		2018328	0					
ANR	2018555	MemberAccess	ctx . keys		2018328	1					
ANR	2018556	Identifier	ctx		2018328	0					
ANR	2018557	Identifier	keys		2018328	1					
ANR	2018558	ExpressionStatement	zend_hash_destroy ( & ctx . params )	1482:1:42855:42885	2018328	15	True				
ANR	2018559	CallExpression	zend_hash_destroy ( & ctx . params )		2018328	0					
ANR	2018560	Callee	zend_hash_destroy		2018328	0					
ANR	2018561	Identifier	zend_hash_destroy		2018328	0					
ANR	2018562	ArgumentList	& ctx . params		2018328	1					
ANR	2018563	Argument	& ctx . params		2018328	0					
ANR	2018564	UnaryOperationExpression	& ctx . params		2018328	0					
ANR	2018565	UnaryOperator	&		2018328	0					
ANR	2018566	MemberAccess	ctx . params		2018328	1					
ANR	2018567	Identifier	ctx		2018328	0					
ANR	2018568	Identifier	params		2018328	1					
ANR	2018569	ReturnStatement	return structure ;	1484:1:42889:42905	2018328	16	True				
ANR	2018570	Identifier	structure		2018328	0					
ANR	2018571	ReturnType	void *		2018328	1					
ANR	2018572	Identifier	from_zval_run_conversions		2018328	2					
ANR	2018573	ParameterList	"const zval * container , php_socket * sock , from_zval_write_field * writer , size_t struct_size , const char * top_name , zend_llist * * allocations , struct err_s * err"		2018328	3					
ANR	2018574	Parameter	const zval * container	1441:32:41800:41822	2018328	0	True				
ANR	2018575	ParameterType	const zval *		2018328	0					
ANR	2018576	Identifier	container		2018328	1					
ANR	2018577	Parameter	php_socket * sock	1442:8:41833:41850	2018328	1	True				
ANR	2018578	ParameterType	php_socket *		2018328	0					
ANR	2018579	Identifier	sock		2018328	1					
ANR	2018580	Parameter	from_zval_write_field * writer	1443:8:41861:41889	2018328	2	True				
ANR	2018581	ParameterType	from_zval_write_field *		2018328	0					
ANR	2018582	Identifier	writer		2018328	1					
ANR	2018583	Parameter	size_t struct_size	1444:8:41900:41920	2018328	3	True				
ANR	2018584	ParameterType	size_t		2018328	0					
ANR	2018585	Identifier	struct_size		2018328	1					
ANR	2018586	Parameter	const char * top_name	1445:8:41931:41952	2018328	4	True				
ANR	2018587	ParameterType	const char *		2018328	0					
ANR	2018588	Identifier	top_name		2018328	1					
ANR	2018589	Parameter	zend_llist * * allocations	1446:8:41963:41988	2018328	5	True				
ANR	2018590	ParameterType	zend_llist * *		2018328	0					
ANR	2018591	Identifier	allocations		2018328	1					
ANR	2018592	Parameter	struct err_s * err	1447:8:42009:42027	2018328	6	True				
ANR	2018593	ParameterType	struct err_s *		2018328	0					
ANR	2018594	Identifier	err		2018328	1					
ANR	2018595	CFGEntryNode	ENTRY		2018328		True				
ANR	2018596	CFGExitNode	EXIT		2018328		True				
ANR	2018597	Symbol	container		2018328						
ANR	2018598	Symbol	& ctx . allocations		2018328						
ANR	2018599	Symbol	& structure		2018328						
ANR	2018600	Symbol	& ctx		2018328						
ANR	2018601	Symbol	ctx . allocations		2018328						
ANR	2018602	Symbol	& ctx . params		2018328						
ANR	2018603	Symbol	err -> has_error		2018328						
ANR	2018604	Symbol	& free_from_zval_allocation		2018328						
ANR	2018605	Symbol	emalloc		2018328						
ANR	2018606	Symbol	* * allocations		2018328						
ANR	2018607	Symbol	allocations		2018328						
ANR	2018608	Symbol	ecalloc		2018328						
ANR	2018609	Symbol	top_name		2018328						
ANR	2018610	Symbol	& ctx . keys		2018328						
ANR	2018611	Symbol	NULL		2018328						
ANR	2018612	Symbol	err		2018328						
ANR	2018613	Symbol	ctx . err		2018328						
ANR	2018614	Symbol	ctx		2018328						
ANR	2018615	Symbol	* allocations		2018328						
ANR	2018616	Symbol	ctx . err . has_error		2018328						
ANR	2018617	Symbol	structure		2018328						
ANR	2018618	Symbol	* err		2018328						
ANR	2018619	Symbol	sock		2018328						
ANR	2018620	Symbol	& top_name		2018328						
ANR	2018621	Symbol	struct_size		2018328						
ANR	2018622	Symbol	ctx . sock		2018328						
ANR	2018623	Symbol	writer		2018328						
ANR	2018624	Function	to_zval_run_conversions	1486:0:42909:43789							
ANR	2018625	FunctionDef	"to_zval_run_conversions (const char * structure , to_zval_read_field * reader , const char * top_name , const struct key_value * key_value_pairs , struct err_s * err , zval * zv)"		2018624	0					
ANR	2018626	CompoundStatement		1491:0:43118:43789	2018624	0					
ANR	2018627	IdentifierDeclStatement	res_context ctx ;	1492:1:43121:43139	2018624	0	True				
ANR	2018628	IdentifierDecl	ctx		2018624	0					
ANR	2018629	IdentifierDeclType	res_context		2018624	0					
ANR	2018630	Identifier	ctx		2018624	1					
ANR	2018631	IdentifierDeclStatement	const struct key_value * kv ;	1493:1:43142:43168	2018624	1	True				
ANR	2018632	IdentifierDecl	* kv		2018624	0					
ANR	2018633	IdentifierDeclType	const struct key_value *		2018624	0					
ANR	2018634	Identifier	kv		2018624	1					
ANR	2018635	IfStatement	if ( err -> has_error )		2018624	2					
ANR	2018636	Condition	err -> has_error	1495:5:43176:43189	2018624	0	True				
ANR	2018637	PtrMemberAccess	err -> has_error		2018624	0					
ANR	2018638	Identifier	err		2018624	0					
ANR	2018639	Identifier	has_error		2018624	1					
ANR	2018640	CompoundStatement		5:21:73:73	2018624	1					
ANR	2018641	ReturnStatement	return NULL ;	1496:2:43196:43207	2018624	0	True				
ANR	2018642	Identifier	NULL		2018624	0					
ANR	2018643	ExpressionStatement	"memset ( & ctx , 0 , sizeof ( ctx ) )"	1499:1:43214:43242	2018624	3	True				
ANR	2018644	CallExpression	"memset ( & ctx , 0 , sizeof ( ctx ) )"		2018624	0					
ANR	2018645	Callee	memset		2018624	0					
ANR	2018646	Identifier	memset		2018624	0					
ANR	2018647	ArgumentList	& ctx		2018624	1					
ANR	2018648	Argument	& ctx		2018624	0					
ANR	2018649	UnaryOperationExpression	& ctx		2018624	0					
ANR	2018650	UnaryOperator	&		2018624	0					
ANR	2018651	Identifier	ctx		2018624	1					
ANR	2018652	Argument	0		2018624	1					
ANR	2018653	PrimaryExpression	0		2018624	0					
ANR	2018654	Argument	sizeof ( ctx )		2018624	2					
ANR	2018655	SizeofExpression	sizeof ( ctx )		2018624	0					
ANR	2018656	Sizeof	sizeof		2018624	0					
ANR	2018657	SizeofOperand	ctx		2018624	1					
ANR	2018658	ExpressionStatement	"zend_llist_init ( & ctx . keys , sizeof ( const char * ) , NULL , 0 )"	1500:1:43245:43302	2018624	4	True				
ANR	2018659	CallExpression	"zend_llist_init ( & ctx . keys , sizeof ( const char * ) , NULL , 0 )"		2018624	0					
ANR	2018660	Callee	zend_llist_init		2018624	0					
ANR	2018661	Identifier	zend_llist_init		2018624	0					
ANR	2018662	ArgumentList	& ctx . keys		2018624	1					
ANR	2018663	Argument	& ctx . keys		2018624	0					
ANR	2018664	UnaryOperationExpression	& ctx . keys		2018624	0					
ANR	2018665	UnaryOperator	&		2018624	0					
ANR	2018666	MemberAccess	ctx . keys		2018624	1					
ANR	2018667	Identifier	ctx		2018624	0					
ANR	2018668	Identifier	keys		2018624	1					
ANR	2018669	Argument	sizeof ( const char * )		2018624	1					
ANR	2018670	SizeofExpression	sizeof ( const char * )		2018624	0					
ANR	2018671	Sizeof	sizeof		2018624	0					
ANR	2018672	SizeofOperand	const char *		2018624	1					
ANR	2018673	Argument	NULL		2018624	2					
ANR	2018674	Identifier	NULL		2018624	0					
ANR	2018675	Argument	0		2018624	3					
ANR	2018676	PrimaryExpression	0		2018624	0					
ANR	2018677	ExpressionStatement	"zend_llist_add_element ( & ctx . keys , & top_name )"	1501:1:43305:43349	2018624	5	True				
ANR	2018678	CallExpression	"zend_llist_add_element ( & ctx . keys , & top_name )"		2018624	0					
ANR	2018679	Callee	zend_llist_add_element		2018624	0					
ANR	2018680	Identifier	zend_llist_add_element		2018624	0					
ANR	2018681	ArgumentList	& ctx . keys		2018624	1					
ANR	2018682	Argument	& ctx . keys		2018624	0					
ANR	2018683	UnaryOperationExpression	& ctx . keys		2018624	0					
ANR	2018684	UnaryOperator	&		2018624	0					
ANR	2018685	MemberAccess	ctx . keys		2018624	1					
ANR	2018686	Identifier	ctx		2018624	0					
ANR	2018687	Identifier	keys		2018624	1					
ANR	2018688	Argument	& top_name		2018624	1					
ANR	2018689	UnaryOperationExpression	& top_name		2018624	0					
ANR	2018690	UnaryOperator	&		2018624	0					
ANR	2018691	Identifier	top_name		2018624	1					
ANR	2018692	ExpressionStatement	"zend_hash_init ( & ctx . params , 8 , NULL , NULL , 0 )"	1503:1:43353:43398	2018624	6	True				
ANR	2018693	CallExpression	"zend_hash_init ( & ctx . params , 8 , NULL , NULL , 0 )"		2018624	0					
ANR	2018694	Callee	zend_hash_init		2018624	0					
ANR	2018695	Identifier	zend_hash_init		2018624	0					
ANR	2018696	ArgumentList	& ctx . params		2018624	1					
ANR	2018697	Argument	& ctx . params		2018624	0					
ANR	2018698	UnaryOperationExpression	& ctx . params		2018624	0					
ANR	2018699	UnaryOperator	&		2018624	0					
ANR	2018700	MemberAccess	ctx . params		2018624	1					
ANR	2018701	Identifier	ctx		2018624	0					
ANR	2018702	Identifier	params		2018624	1					
ANR	2018703	Argument	8		2018624	1					
ANR	2018704	PrimaryExpression	8		2018624	0					
ANR	2018705	Argument	NULL		2018624	2					
ANR	2018706	Identifier	NULL		2018624	0					
ANR	2018707	Argument	NULL		2018624	3					
ANR	2018708	Identifier	NULL		2018624	0					
ANR	2018709	Argument	0		2018624	4					
ANR	2018710	PrimaryExpression	0		2018624	0					
ANR	2018711	ForStatement	for ( kv = key_value_pairs ; kv -> key != NULL ; kv ++ )		2018624	7					
ANR	2018712	ForInit	kv = key_value_pairs ;	1504:6:43406:43426	2018624	0	True				
ANR	2018713	AssignmentExpression	kv = key_value_pairs		2018624	0		=			
ANR	2018714	Identifier	kv		2018624	0					
ANR	2018715	Identifier	key_value_pairs		2018624	1					
ANR	2018716	Condition	kv -> key != NULL	1504:28:43428:43442	2018624	1	True				
ANR	2018717	EqualityExpression	kv -> key != NULL		2018624	0		!=			
ANR	2018718	PtrMemberAccess	kv -> key		2018624	0					
ANR	2018719	Identifier	kv		2018624	0					
ANR	2018720	Identifier	key		2018624	1					
ANR	2018721	Identifier	NULL		2018624	1					
ANR	2018722	PostIncDecOperationExpression	kv ++	1504:45:43445:43448	2018624	2	True				
ANR	2018723	Identifier	kv		2018624	0					
ANR	2018724	IncDec	++		2018624	1					
ANR	2018725	CompoundStatement		14:51:332:332	2018624	3					
ANR	2018726	ExpressionStatement	"zend_hash_str_update_ptr ( & ctx . params , kv -> key , kv -> key_size - 1 , kv -> value )"	1505:2:43455:43530	2018624	0	True				
ANR	2018727	CallExpression	"zend_hash_str_update_ptr ( & ctx . params , kv -> key , kv -> key_size - 1 , kv -> value )"		2018624	0					
ANR	2018728	Callee	zend_hash_str_update_ptr		2018624	0					
ANR	2018729	Identifier	zend_hash_str_update_ptr		2018624	0					
ANR	2018730	ArgumentList	& ctx . params		2018624	1					
ANR	2018731	Argument	& ctx . params		2018624	0					
ANR	2018732	UnaryOperationExpression	& ctx . params		2018624	0					
ANR	2018733	UnaryOperator	&		2018624	0					
ANR	2018734	MemberAccess	ctx . params		2018624	1					
ANR	2018735	Identifier	ctx		2018624	0					
ANR	2018736	Identifier	params		2018624	1					
ANR	2018737	Argument	kv -> key		2018624	1					
ANR	2018738	PtrMemberAccess	kv -> key		2018624	0					
ANR	2018739	Identifier	kv		2018624	0					
ANR	2018740	Identifier	key		2018624	1					
ANR	2018741	Argument	kv -> key_size - 1		2018624	2					
ANR	2018742	AdditiveExpression	kv -> key_size - 1		2018624	0		-			
ANR	2018743	PtrMemberAccess	kv -> key_size		2018624	0					
ANR	2018744	Identifier	kv		2018624	0					
ANR	2018745	Identifier	key_size		2018624	1					
ANR	2018746	PrimaryExpression	1		2018624	1					
ANR	2018747	Argument	kv -> value		2018624	3					
ANR	2018748	PtrMemberAccess	kv -> value		2018624	0					
ANR	2018749	Identifier	kv		2018624	0					
ANR	2018750	Identifier	value		2018624	1					
ANR	2018751	ExpressionStatement	ZVAL_NULL ( zv )	1508:1:43537:43550	2018624	8	True				
ANR	2018752	CallExpression	ZVAL_NULL ( zv )		2018624	0					
ANR	2018753	Callee	ZVAL_NULL		2018624	0					
ANR	2018754	Identifier	ZVAL_NULL		2018624	0					
ANR	2018755	ArgumentList	zv		2018624	1					
ANR	2018756	Argument	zv		2018624	0					
ANR	2018757	Identifier	zv		2018624	0					
ANR	2018758	ExpressionStatement	"reader ( structure , zv , & ctx )"	1510:1:43570:43597	2018624	9	True				
ANR	2018759	CallExpression	"reader ( structure , zv , & ctx )"		2018624	0					
ANR	2018760	Callee	reader		2018624	0					
ANR	2018761	Identifier	reader		2018624	0					
ANR	2018762	ArgumentList	structure		2018624	1					
ANR	2018763	Argument	structure		2018624	0					
ANR	2018764	Identifier	structure		2018624	0					
ANR	2018765	Argument	zv		2018624	1					
ANR	2018766	Identifier	zv		2018624	0					
ANR	2018767	Argument	& ctx		2018624	2					
ANR	2018768	UnaryOperationExpression	& ctx		2018624	0					
ANR	2018769	UnaryOperator	&		2018624	0					
ANR	2018770	Identifier	ctx		2018624	1					
ANR	2018771	IfStatement	if ( ctx . err . has_error )		2018624	10					
ANR	2018772	Condition	ctx . err . has_error	1512:5:43605:43621	2018624	0	True				
ANR	2018773	MemberAccess	ctx . err . has_error		2018624	0					
ANR	2018774	MemberAccess	ctx . err		2018624	0					
ANR	2018775	Identifier	ctx		2018624	0					
ANR	2018776	Identifier	err		2018624	1					
ANR	2018777	Identifier	has_error		2018624	1					
ANR	2018778	CompoundStatement		22:24:505:505	2018624	1					
ANR	2018779	ExpressionStatement	zval_ptr_dtor ( zv )	1513:2:43628:43645	2018624	0	True				
ANR	2018780	CallExpression	zval_ptr_dtor ( zv )		2018624	0					
ANR	2018781	Callee	zval_ptr_dtor		2018624	0					
ANR	2018782	Identifier	zval_ptr_dtor		2018624	0					
ANR	2018783	ArgumentList	zv		2018624	1					
ANR	2018784	Argument	zv		2018624	0					
ANR	2018785	Identifier	zv		2018624	0					
ANR	2018786	ExpressionStatement	ZVAL_UNDEF ( zv )	1514:2:43649:43663	2018624	1	True				
ANR	2018787	CallExpression	ZVAL_UNDEF ( zv )		2018624	0					
ANR	2018788	Callee	ZVAL_UNDEF		2018624	0					
ANR	2018789	Identifier	ZVAL_UNDEF		2018624	0					
ANR	2018790	ArgumentList	zv		2018624	1					
ANR	2018791	Argument	zv		2018624	0					
ANR	2018792	Identifier	zv		2018624	0					
ANR	2018793	ExpressionStatement	* err = ctx . err	1515:2:43667:43681	2018624	2	True				
ANR	2018794	AssignmentExpression	* err = ctx . err		2018624	0		=			
ANR	2018795	UnaryOperationExpression	* err		2018624	0					
ANR	2018796	UnaryOperator	*		2018624	0					
ANR	2018797	Identifier	err		2018624	1					
ANR	2018798	MemberAccess	ctx . err		2018624	1					
ANR	2018799	Identifier	ctx		2018624	0					
ANR	2018800	Identifier	err		2018624	1					
ANR	2018801	ExpressionStatement	zend_llist_destroy ( & ctx . keys )	1518:1:43688:43717	2018624	11	True				
ANR	2018802	CallExpression	zend_llist_destroy ( & ctx . keys )		2018624	0					
ANR	2018803	Callee	zend_llist_destroy		2018624	0					
ANR	2018804	Identifier	zend_llist_destroy		2018624	0					
ANR	2018805	ArgumentList	& ctx . keys		2018624	1					
ANR	2018806	Argument	& ctx . keys		2018624	0					
ANR	2018807	UnaryOperationExpression	& ctx . keys		2018624	0					
ANR	2018808	UnaryOperator	&		2018624	0					
ANR	2018809	MemberAccess	ctx . keys		2018624	1					
ANR	2018810	Identifier	ctx		2018624	0					
ANR	2018811	Identifier	keys		2018624	1					
ANR	2018812	ExpressionStatement	zend_hash_destroy ( & ctx . params )	1519:1:43720:43750	2018624	12	True				
ANR	2018813	CallExpression	zend_hash_destroy ( & ctx . params )		2018624	0					
ANR	2018814	Callee	zend_hash_destroy		2018624	0					
ANR	2018815	Identifier	zend_hash_destroy		2018624	0					
ANR	2018816	ArgumentList	& ctx . params		2018624	1					
ANR	2018817	Argument	& ctx . params		2018624	0					
ANR	2018818	UnaryOperationExpression	& ctx . params		2018624	0					
ANR	2018819	UnaryOperator	&		2018624	0					
ANR	2018820	MemberAccess	ctx . params		2018624	1					
ANR	2018821	Identifier	ctx		2018624	0					
ANR	2018822	Identifier	params		2018624	1					
ANR	2018823	ReturnStatement	return Z_ISUNDEF_P ( zv ) ? NULL : zv ;	1521:1:43754:43787	2018624	13	True				
ANR	2018824	ConditionalExpression	Z_ISUNDEF_P ( zv ) ? NULL : zv		2018624	0					
ANR	2018825	Condition	Z_ISUNDEF_P ( zv )		2018624	0					
ANR	2018826	CallExpression	Z_ISUNDEF_P ( zv )		2018624	0					
ANR	2018827	Callee	Z_ISUNDEF_P		2018624	0					
ANR	2018828	Identifier	Z_ISUNDEF_P		2018624	0					
ANR	2018829	ArgumentList	zv		2018624	1					
ANR	2018830	Argument	zv		2018624	0					
ANR	2018831	Identifier	zv		2018624	0					
ANR	2018832	Identifier	NULL		2018624	1					
ANR	2018833	Identifier	zv		2018624	2					
ANR	2018834	ReturnType	zval *		2018624	1					
ANR	2018835	Identifier	to_zval_run_conversions		2018624	2					
ANR	2018836	ParameterList	"const char * structure , to_zval_read_field * reader , const char * top_name , const struct key_value * key_value_pairs , struct err_s * err , zval * zv"		2018624	3					
ANR	2018837	Parameter	const char * structure	1486:30:42939:42959	2018624	0	True				
ANR	2018838	ParameterType	const char *		2018624	0					
ANR	2018839	Identifier	structure		2018624	1					
ANR	2018840	Parameter	to_zval_read_field * reader	1487:9:42971:42996	2018624	1	True				
ANR	2018841	ParameterType	to_zval_read_field *		2018624	0					
ANR	2018842	Identifier	reader		2018624	1					
ANR	2018843	Parameter	const char * top_name	1488:9:43008:43027	2018624	2	True				
ANR	2018844	ParameterType	const char *		2018624	0					
ANR	2018845	Identifier	top_name		2018624	1					
ANR	2018846	Parameter	const struct key_value * key_value_pairs	1489:9:43039:43077	2018624	3	True				
ANR	2018847	ParameterType	const struct key_value *		2018624	0					
ANR	2018848	Identifier	key_value_pairs		2018624	1					
ANR	2018849	Parameter	struct err_s * err	1490:9:43089:43105	2018624	4	True				
ANR	2018850	ParameterType	struct err_s *		2018624	0					
ANR	2018851	Identifier	err		2018624	1					
ANR	2018852	Parameter	zval * zv	1490:28:43108:43115	2018624	5	True				
ANR	2018853	ParameterType	zval *		2018624	0					
ANR	2018854	Identifier	zv		2018624	1					
ANR	2018855	CFGEntryNode	ENTRY		2018624		True				
ANR	2018856	CFGExitNode	EXIT		2018624		True				
ANR	2018857	Symbol	NULL		2018624						
ANR	2018858	Symbol	err		2018624						
ANR	2018859	Symbol	ctx . err		2018624						
ANR	2018860	Symbol	reader		2018624						
ANR	2018861	Symbol	ctx		2018624						
ANR	2018862	Symbol	ctx . err . has_error		2018624						
ANR	2018863	Symbol	& ctx		2018624						
ANR	2018864	Symbol	kv -> value		2018624						
ANR	2018865	Symbol	key_value_pairs		2018624						
ANR	2018866	Symbol	kv		2018624						
ANR	2018867	Symbol	structure		2018624						
ANR	2018868	Symbol	kv -> key_size		2018624						
ANR	2018869	Symbol	& ctx . params		2018624						
ANR	2018870	Symbol	* err		2018624						
ANR	2018871	Symbol	err -> has_error		2018624						
ANR	2018872	Symbol	& top_name		2018624						
ANR	2018873	Symbol	* kv		2018624						
ANR	2018874	Symbol	kv -> key		2018624						
ANR	2018875	Symbol	Z_ISUNDEF_P		2018624						
ANR	2018876	Symbol	zv		2018624						
ANR	2018877	Symbol	top_name		2018624						
ANR	2018878	Symbol	& ctx . keys		2018624						
