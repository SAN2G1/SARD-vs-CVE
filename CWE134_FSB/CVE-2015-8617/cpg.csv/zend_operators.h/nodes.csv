command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4164414	File	data/converged/CVE-2015-8617_php-src/zend_operators.h								
ANR	4164415	DeclStmt									
ANR	4164416	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	add_function
ANR	4164417	DeclStmt									
ANR	4164418	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	sub_function
ANR	4164419	DeclStmt									
ANR	4164420	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	mul_function
ANR	4164421	DeclStmt									
ANR	4164422	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	pow_function
ANR	4164423	DeclStmt									
ANR	4164424	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	div_function
ANR	4164425	DeclStmt									
ANR	4164426	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	mod_function
ANR	4164427	DeclStmt									
ANR	4164428	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	boolean_xor_function
ANR	4164429	DeclStmt									
ANR	4164430	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 )"	boolean_not_function
ANR	4164431	DeclStmt									
ANR	4164432	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 )"	bitwise_not_function
ANR	4164433	DeclStmt									
ANR	4164434	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	bitwise_or_function
ANR	4164435	DeclStmt									
ANR	4164436	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	bitwise_and_function
ANR	4164437	DeclStmt									
ANR	4164438	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	bitwise_xor_function
ANR	4164439	DeclStmt									
ANR	4164440	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	shift_left_function
ANR	4164441	DeclStmt									
ANR	4164442	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	shift_right_function
ANR	4164443	DeclStmt									
ANR	4164444	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	concat_function
ANR	4164445	DeclStmt									
ANR	4164446	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	zend_is_identical
ANR	4164447	DeclStmt									
ANR	4164448	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_equal_function
ANR	4164449	DeclStmt									
ANR	4164450	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_identical_function
ANR	4164451	DeclStmt									
ANR	4164452	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_not_identical_function
ANR	4164453	DeclStmt									
ANR	4164454	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_not_equal_function
ANR	4164455	DeclStmt									
ANR	4164456	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_smaller_function
ANR	4164457	DeclStmt									
ANR	4164458	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_smaller_or_equal_function
ANR	4164459	DeclStmt									
ANR	4164460	Decl							ZEND_API zend_bool ZEND_FASTCALL	"ZEND_API zend_bool ZEND_FASTCALL ( const zend_class_entry * instance_ce , const zend_class_entry * ce , zend_bool interfaces_only )"	instanceof_function_ex
ANR	4164461	DeclStmt									
ANR	4164462	Decl							ZEND_API zend_bool ZEND_FASTCALL	"ZEND_API zend_bool ZEND_FASTCALL ( const zend_class_entry * instance_ce , const zend_class_entry * ce )"	instanceof_function
ANR	4164463	DeclStmt									
ANR	4164464	Decl							ZEND_API zend_uchar ZEND_FASTCALL	"ZEND_API zend_uchar ZEND_FASTCALL ( const char * str , size_t length , zend_long * lval , double * dval , int allow_errors , int * oflow_info )"	_is_numeric_string_ex
ANR	4164465	DeclStmt									
ANR	4164466	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( const char * haystack , const char * needle , size_t needle_len , const char * end )"	zend_memnstr_ex
ANR	4164467	DeclStmt									
ANR	4164468	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( const char * haystack , const char * needle , size_t needle_len , const char * end )"	zend_memnrstr_ex
ANR	4164469	Function	zend_dval_to_lval	104:0:5311:5507							
ANR	4164470	FunctionDef	zend_dval_to_lval (double d)		4164469	0					
ANR	4164471	CompoundStatement		105:0:5375:5507	4164469	0					
ANR	4164472	IfStatement	if ( EXPECTED ( zend_finite ( d ) ) && EXPECTED ( ! zend_isnan ( d ) ) )		4164469	0					
ANR	4164473	Condition	EXPECTED ( zend_finite ( d ) ) && EXPECTED ( ! zend_isnan ( d ) )	106:8:5385:5436	4164469	0	True				
ANR	4164474	AndExpression	EXPECTED ( zend_finite ( d ) ) && EXPECTED ( ! zend_isnan ( d ) )		4164469	0		&&			
ANR	4164475	CallExpression	EXPECTED ( zend_finite ( d ) )		4164469	0					
ANR	4164476	Callee	EXPECTED		4164469	0					
ANR	4164477	Identifier	EXPECTED		4164469	0					
ANR	4164478	ArgumentList	zend_finite ( d )		4164469	1					
ANR	4164479	Argument	zend_finite ( d )		4164469	0					
ANR	4164480	CallExpression	zend_finite ( d )		4164469	0					
ANR	4164481	Callee	zend_finite		4164469	0					
ANR	4164482	Identifier	zend_finite		4164469	0					
ANR	4164483	ArgumentList	d		4164469	1					
ANR	4164484	Argument	d		4164469	0					
ANR	4164485	Identifier	d		4164469	0					
ANR	4164486	CallExpression	EXPECTED ( ! zend_isnan ( d ) )		4164469	1					
ANR	4164487	Callee	EXPECTED		4164469	0					
ANR	4164488	Identifier	EXPECTED		4164469	0					
ANR	4164489	ArgumentList	! zend_isnan ( d )		4164469	1					
ANR	4164490	Argument	! zend_isnan ( d )		4164469	0					
ANR	4164491	UnaryOperationExpression	! zend_isnan ( d )		4164469	0					
ANR	4164492	UnaryOperator	!		4164469	0					
ANR	4164493	CallExpression	zend_isnan ( d )		4164469	1					
ANR	4164494	Callee	zend_isnan		4164469	0					
ANR	4164495	Identifier	zend_isnan		4164469	0					
ANR	4164496	ArgumentList	d		4164469	1					
ANR	4164497	Argument	d		4164469	0					
ANR	4164498	Identifier	d		4164469	0					
ANR	4164499	CompoundStatement		2:62:63:63	4164469	1					
ANR	4164500	ReturnStatement	return ( zend_long ) d ;	107:8:5449:5468	4164469	0	True				
ANR	4164501	CastExpression	( zend_long ) d		4164469	0					
ANR	4164502	CastTarget	zend_long		4164469	0					
ANR	4164503	Identifier	d		4164469	1					
ANR	4164504	ElseStatement	else		4164469	0					
ANR	4164505	CompoundStatement		4:11:105:105	4164469	0					
ANR	4164506	ReturnStatement	return 0 ;	109:8:5491:5499	4164469	0	True				
ANR	4164507	PrimaryExpression	0		4164469	0					
ANR	4164508	ReturnType	static zend_always_inline zend_long		4164469	1					
ANR	4164509	Identifier	zend_dval_to_lval		4164469	2					
ANR	4164510	ParameterList	double d		4164469	3					
ANR	4164511	Parameter	double d	104:54:5365:5372	4164469	0	True				
ANR	4164512	ParameterType	double		4164469	0					
ANR	4164513	Identifier	d		4164469	1					
ANR	4164514	CFGEntryNode	ENTRY		4164469		True				
ANR	4164515	CFGExitNode	EXIT		4164469		True				
ANR	4164516	Symbol	zend_finite		4164469						
ANR	4164517	Symbol	d		4164469						
ANR	4164518	Symbol	zend_isnan		4164469						
ANR	4164519	Symbol	EXPECTED		4164469						
ANR	4164520	DeclStmt									
ANR	4164521	Decl							ZEND_API zend_long ZEND_FASTCALL	ZEND_API zend_long ZEND_FASTCALL ( double d )	zend_dval_to_lval_slow
ANR	4164522	Function	zend_dval_to_lval	115:0:5583:5828							
ANR	4164523	FunctionDef	zend_dval_to_lval (double d)		4164522	0					
ANR	4164524	CompoundStatement		116:0:5647:5828	4164522	0					
ANR	4164525	IfStatement	if ( UNEXPECTED ( ! zend_finite ( d ) ) || UNEXPECTED ( zend_isnan ( d ) ) )		4164522	0					
ANR	4164526	Condition	UNEXPECTED ( ! zend_finite ( d ) ) || UNEXPECTED ( zend_isnan ( d ) )	117:5:5654:5709	4164522	0	True				
ANR	4164527	OrExpression	UNEXPECTED ( ! zend_finite ( d ) ) || UNEXPECTED ( zend_isnan ( d ) )		4164522	0		||			
ANR	4164528	CallExpression	UNEXPECTED ( ! zend_finite ( d ) )		4164522	0					
ANR	4164529	Callee	UNEXPECTED		4164522	0					
ANR	4164530	Identifier	UNEXPECTED		4164522	0					
ANR	4164531	ArgumentList	! zend_finite ( d )		4164522	1					
ANR	4164532	Argument	! zend_finite ( d )		4164522	0					
ANR	4164533	UnaryOperationExpression	! zend_finite ( d )		4164522	0					
ANR	4164534	UnaryOperator	!		4164522	0					
ANR	4164535	CallExpression	zend_finite ( d )		4164522	1					
ANR	4164536	Callee	zend_finite		4164522	0					
ANR	4164537	Identifier	zend_finite		4164522	0					
ANR	4164538	ArgumentList	d		4164522	1					
ANR	4164539	Argument	d		4164522	0					
ANR	4164540	Identifier	d		4164522	0					
ANR	4164541	CallExpression	UNEXPECTED ( zend_isnan ( d ) )		4164522	1					
ANR	4164542	Callee	UNEXPECTED		4164522	0					
ANR	4164543	Identifier	UNEXPECTED		4164522	0					
ANR	4164544	ArgumentList	zend_isnan ( d )		4164522	1					
ANR	4164545	Argument	zend_isnan ( d )		4164522	0					
ANR	4164546	CallExpression	zend_isnan ( d )		4164522	0					
ANR	4164547	Callee	zend_isnan		4164522	0					
ANR	4164548	Identifier	zend_isnan		4164522	0					
ANR	4164549	ArgumentList	d		4164522	1					
ANR	4164550	Argument	d		4164522	0					
ANR	4164551	Identifier	d		4164522	0					
ANR	4164552	CompoundStatement		2:63:64:64	4164522	1					
ANR	4164553	ReturnStatement	return 0 ;	118:2:5716:5724	4164522	0	True				
ANR	4164554	PrimaryExpression	0		4164522	0					
ANR	4164555	ElseStatement	else		4164522	0					
ANR	4164556	IfStatement	if ( ! ZEND_DOUBLE_FITS_LONG ( d ) )		4164522	0					
ANR	4164557	Condition	! ZEND_DOUBLE_FITS_LONG ( d )	119:12:5738:5762	4164522	0	True				
ANR	4164558	UnaryOperationExpression	! ZEND_DOUBLE_FITS_LONG ( d )		4164522	0					
ANR	4164559	UnaryOperator	!		4164522	0					
ANR	4164560	CallExpression	ZEND_DOUBLE_FITS_LONG ( d )		4164522	1					
ANR	4164561	Callee	ZEND_DOUBLE_FITS_LONG		4164522	0					
ANR	4164562	Identifier	ZEND_DOUBLE_FITS_LONG		4164522	0					
ANR	4164563	ArgumentList	d		4164522	1					
ANR	4164564	Argument	d		4164522	0					
ANR	4164565	Identifier	d		4164522	0					
ANR	4164566	CompoundStatement		4:39:117:117	4164522	1					
ANR	4164567	ReturnStatement	return zend_dval_to_lval_slow ( d ) ;	120:2:5769:5801	4164522	0	True				
ANR	4164568	CallExpression	zend_dval_to_lval_slow ( d )		4164522	0					
ANR	4164569	Callee	zend_dval_to_lval_slow		4164522	0					
ANR	4164570	Identifier	zend_dval_to_lval_slow		4164522	0					
ANR	4164571	ArgumentList	d		4164522	1					
ANR	4164572	Argument	d		4164522	0					
ANR	4164573	Identifier	d		4164522	0					
ANR	4164574	ReturnStatement	return ( zend_long ) d ;	122:1:5807:5826	4164522	1	True				
ANR	4164575	CastExpression	( zend_long ) d		4164522	0					
ANR	4164576	CastTarget	zend_long		4164522	0					
ANR	4164577	Identifier	d		4164522	1					
ANR	4164578	ReturnType	static zend_always_inline zend_long		4164522	1					
ANR	4164579	Identifier	zend_dval_to_lval		4164522	2					
ANR	4164580	ParameterList	double d		4164522	3					
ANR	4164581	Parameter	double d	115:54:5637:5644	4164522	0	True				
ANR	4164582	ParameterType	double		4164522	0					
ANR	4164583	Identifier	d		4164522	1					
ANR	4164584	CFGEntryNode	ENTRY		4164522		True				
ANR	4164585	CFGExitNode	EXIT		4164522		True				
ANR	4164586	Symbol	UNEXPECTED		4164522						
ANR	4164587	Symbol	zend_finite		4164522						
ANR	4164588	Symbol	d		4164522						
ANR	4164589	Symbol	zend_isnan		4164522						
ANR	4164590	Symbol	ZEND_DOUBLE_FITS_LONG		4164522						
ANR	4164591	Symbol	zend_dval_to_lval_slow		4164522						
ANR	4164592	Function	is_numeric_string_ex	130:0:5986:6260							
ANR	4164593	FunctionDef	"is_numeric_string_ex (const char * str , size_t length , zend_long * lval , double * dval , int allow_errors , int * oflow_info)"		4164592	0					
ANR	4164594	CompoundStatement		131:0:6142:6260	4164592	0					
ANR	4164595	IfStatement	if ( * str > '9' )		4164592	0					
ANR	4164596	Condition	* str > '9'	132:5:6149:6158	4164592	0	True				
ANR	4164597	RelationalExpression	* str > '9'		4164592	0		>			
ANR	4164598	UnaryOperationExpression	* str		4164592	0					
ANR	4164599	UnaryOperator	*		4164592	0					
ANR	4164600	Identifier	str		4164592	1					
ANR	4164601	PrimaryExpression	'9'		4164592	1					
ANR	4164602	CompoundStatement		2:17:18:18	4164592	1					
ANR	4164603	ReturnStatement	return 0 ;	133:2:6165:6173	4164592	0	True				
ANR	4164604	PrimaryExpression	0		4164592	0					
ANR	4164605	ReturnStatement	"return _is_numeric_string_ex ( str , length , lval , dval , allow_errors , oflow_info ) ;"	135:1:6179:6258	4164592	1	True				
ANR	4164606	CallExpression	"_is_numeric_string_ex ( str , length , lval , dval , allow_errors , oflow_info )"		4164592	0					
ANR	4164607	Callee	_is_numeric_string_ex		4164592	0					
ANR	4164608	Identifier	_is_numeric_string_ex		4164592	0					
ANR	4164609	ArgumentList	str		4164592	1					
ANR	4164610	Argument	str		4164592	0					
ANR	4164611	Identifier	str		4164592	0					
ANR	4164612	Argument	length		4164592	1					
ANR	4164613	Identifier	length		4164592	0					
ANR	4164614	Argument	lval		4164592	2					
ANR	4164615	Identifier	lval		4164592	0					
ANR	4164616	Argument	dval		4164592	3					
ANR	4164617	Identifier	dval		4164592	0					
ANR	4164618	Argument	allow_errors		4164592	4					
ANR	4164619	Identifier	allow_errors		4164592	0					
ANR	4164620	Argument	oflow_info		4164592	5					
ANR	4164621	Identifier	oflow_info		4164592	0					
ANR	4164622	ReturnType	static zend_always_inline zend_uchar		4164592	1					
ANR	4164623	Identifier	is_numeric_string_ex		4164592	2					
ANR	4164624	ParameterList	"const char * str , size_t length , zend_long * lval , double * dval , int allow_errors , int * oflow_info"		4164592	3					
ANR	4164625	Parameter	const char * str	130:58:6044:6058	4164592	0	True				
ANR	4164626	ParameterType	const char *		4164592	0					
ANR	4164627	Identifier	str		4164592	1					
ANR	4164628	Parameter	size_t length	130:75:6061:6073	4164592	1	True				
ANR	4164629	ParameterType	size_t		4164592	0					
ANR	4164630	Identifier	length		4164592	1					
ANR	4164631	Parameter	zend_long * lval	130:90:6076:6090	4164592	2	True				
ANR	4164632	ParameterType	zend_long *		4164592	0					
ANR	4164633	Identifier	lval		4164592	1					
ANR	4164634	Parameter	double * dval	130:107:6093:6104	4164592	3	True				
ANR	4164635	ParameterType	double *		4164592	0					
ANR	4164636	Identifier	dval		4164592	1					
ANR	4164637	Parameter	int allow_errors	130:121:6107:6122	4164592	4	True				
ANR	4164638	ParameterType	int		4164592	0					
ANR	4164639	Identifier	allow_errors		4164592	1					
ANR	4164640	Parameter	int * oflow_info	130:139:6125:6139	4164592	5	True				
ANR	4164641	ParameterType	int *		4164592	0					
ANR	4164642	Identifier	oflow_info		4164592	1					
ANR	4164643	CFGEntryNode	ENTRY		4164592		True				
ANR	4164644	CFGExitNode	EXIT		4164592		True				
ANR	4164645	Symbol	str		4164592						
ANR	4164646	Symbol	dval		4164592						
ANR	4164647	Symbol	allow_errors		4164592						
ANR	4164648	Symbol	lval		4164592						
ANR	4164649	Symbol	length		4164592						
ANR	4164650	Symbol	oflow_info		4164592						
ANR	4164651	Symbol	* str		4164592						
ANR	4164652	Symbol	_is_numeric_string_ex		4164592						
ANR	4164653	Function	is_numeric_string	138:0:6263:6479							
ANR	4164654	FunctionDef	"is_numeric_string (const char * str , size_t length , zend_long * lval , double * dval , int allow_errors)"		4164653	0					
ANR	4164655	CompoundStatement		138:136:6399:6479	4164653	0					
ANR	4164656	ReturnStatement	"return is_numeric_string_ex ( str , length , lval , dval , allow_errors , NULL ) ;"	139:4:6405:6477	4164653	0	True				
ANR	4164657	CallExpression	"is_numeric_string_ex ( str , length , lval , dval , allow_errors , NULL )"		4164653	0					
ANR	4164658	Callee	is_numeric_string_ex		4164653	0					
ANR	4164659	Identifier	is_numeric_string_ex		4164653	0					
ANR	4164660	ArgumentList	str		4164653	1					
ANR	4164661	Argument	str		4164653	0					
ANR	4164662	Identifier	str		4164653	0					
ANR	4164663	Argument	length		4164653	1					
ANR	4164664	Identifier	length		4164653	0					
ANR	4164665	Argument	lval		4164653	2					
ANR	4164666	Identifier	lval		4164653	0					
ANR	4164667	Argument	dval		4164653	3					
ANR	4164668	Identifier	dval		4164653	0					
ANR	4164669	Argument	allow_errors		4164653	4					
ANR	4164670	Identifier	allow_errors		4164653	0					
ANR	4164671	Argument	NULL		4164653	5					
ANR	4164672	Identifier	NULL		4164653	0					
ANR	4164673	ReturnType	static zend_always_inline zend_uchar		4164653	1					
ANR	4164674	Identifier	is_numeric_string		4164653	2					
ANR	4164675	ParameterList	"const char * str , size_t length , zend_long * lval , double * dval , int allow_errors"		4164653	3					
ANR	4164676	Parameter	const char * str	138:55:6318:6332	4164653	0	True				
ANR	4164677	ParameterType	const char *		4164653	0					
ANR	4164678	Identifier	str		4164653	1					
ANR	4164679	Parameter	size_t length	138:72:6335:6347	4164653	1	True				
ANR	4164680	ParameterType	size_t		4164653	0					
ANR	4164681	Identifier	length		4164653	1					
ANR	4164682	Parameter	zend_long * lval	138:87:6350:6364	4164653	2	True				
ANR	4164683	ParameterType	zend_long *		4164653	0					
ANR	4164684	Identifier	lval		4164653	1					
ANR	4164685	Parameter	double * dval	138:104:6367:6378	4164653	3	True				
ANR	4164686	ParameterType	double *		4164653	0					
ANR	4164687	Identifier	dval		4164653	1					
ANR	4164688	Parameter	int allow_errors	138:118:6381:6396	4164653	4	True				
ANR	4164689	ParameterType	int		4164653	0					
ANR	4164690	Identifier	allow_errors		4164653	1					
ANR	4164691	CFGEntryNode	ENTRY		4164653		True				
ANR	4164692	CFGExitNode	EXIT		4164653		True				
ANR	4164693	Symbol	str		4164653						
ANR	4164694	Symbol	dval		4164653						
ANR	4164695	Symbol	NULL		4164653						
ANR	4164696	Symbol	allow_errors		4164653						
ANR	4164697	Symbol	lval		4164653						
ANR	4164698	Symbol	length		4164653						
ANR	4164699	Symbol	is_numeric_string_ex		4164653						
ANR	4164700	DeclStmt									
ANR	4164701	Decl							ZEND_API zend_uchar ZEND_FASTCALL	"ZEND_API zend_uchar ZEND_FASTCALL ( const zend_string * str , zend_long * lval , double * dval )"	is_numeric_str_function
ANR	4164702	Function	zend_memnstr	144:26:6623:7416							
ANR	4164703	FunctionDef	"zend_memnstr (const char * haystack , const char * needle , size_t needle_len , const char * end)"		4164702	0					
ANR	4164704	CompoundStatement		146:0:6727:7416	4164702	0					
ANR	4164705	IdentifierDeclStatement	const char * p = haystack ;	147:1:6730:6754	4164702	0	True				
ANR	4164706	IdentifierDecl	* p = haystack		4164702	0					
ANR	4164707	IdentifierDeclType	const char *		4164702	0					
ANR	4164708	Identifier	p		4164702	1					
ANR	4164709	AssignmentExpression	* p = haystack		4164702	2		=			
ANR	4164710	Identifier	haystack		4164702	0					
ANR	4164711	Identifier	haystack		4164702	1					
ANR	4164712	IdentifierDeclStatement	const char ne = needle [ needle_len - 1 ] ;	148:1:6757:6793	4164702	1	True				
ANR	4164713	IdentifierDecl	ne = needle [ needle_len - 1 ]		4164702	0					
ANR	4164714	IdentifierDeclType	const char		4164702	0					
ANR	4164715	Identifier	ne		4164702	1					
ANR	4164716	AssignmentExpression	ne = needle [ needle_len - 1 ]		4164702	2		=			
ANR	4164717	Identifier	ne		4164702	0					
ANR	4164718	ArrayIndexing	needle [ needle_len - 1 ]		4164702	1					
ANR	4164719	Identifier	needle		4164702	0					
ANR	4164720	AdditiveExpression	needle_len - 1		4164702	1		-			
ANR	4164721	Identifier	needle_len		4164702	0					
ANR	4164722	PrimaryExpression	1		4164702	1					
ANR	4164723	IdentifierDeclStatement	ptrdiff_t off_p ;	149:1:6796:6811	4164702	2	True				
ANR	4164724	IdentifierDecl	off_p		4164702	0					
ANR	4164725	IdentifierDeclType	ptrdiff_t		4164702	0					
ANR	4164726	Identifier	off_p		4164702	1					
ANR	4164727	IdentifierDeclStatement	size_t off_s ;	150:1:6814:6826	4164702	3	True				
ANR	4164728	IdentifierDecl	off_s		4164702	0					
ANR	4164729	IdentifierDeclType	size_t		4164702	0					
ANR	4164730	Identifier	off_s		4164702	1					
ANR	4164731	IfStatement	if ( needle_len == 1 )		4164702	4					
ANR	4164732	Condition	needle_len == 1	152:5:6834:6848	4164702	0	True				
ANR	4164733	EqualityExpression	needle_len == 1		4164702	0		==			
ANR	4164734	Identifier	needle_len		4164702	0					
ANR	4164735	PrimaryExpression	1		4164702	1					
ANR	4164736	CompoundStatement		7:22:123:123	4164702	1					
ANR	4164737	ReturnStatement	"return ( const char * ) memchr ( p , * needle , ( end - p ) ) ;"	153:2:6855:6903	4164702	0	True				
ANR	4164738	CastExpression	"( const char * ) memchr ( p , * needle , ( end - p ) )"		4164702	0					
ANR	4164739	CastTarget	const char *		4164702	0					
ANR	4164740	CallExpression	"memchr ( p , * needle , ( end - p ) )"		4164702	1					
ANR	4164741	Callee	memchr		4164702	0					
ANR	4164742	Identifier	memchr		4164702	0					
ANR	4164743	ArgumentList	p		4164702	1					
ANR	4164744	Argument	p		4164702	0					
ANR	4164745	Identifier	p		4164702	0					
ANR	4164746	Argument	* needle		4164702	1					
ANR	4164747	UnaryOperationExpression	* needle		4164702	0					
ANR	4164748	UnaryOperator	*		4164702	0					
ANR	4164749	Identifier	needle		4164702	1					
ANR	4164750	Argument	end - p		4164702	2					
ANR	4164751	AdditiveExpression	end - p		4164702	0		-			
ANR	4164752	Identifier	end		4164702	0					
ANR	4164753	Identifier	p		4164702	1					
ANR	4164754	ExpressionStatement	off_p = end - haystack	156:1:6910:6932	4164702	5	True				
ANR	4164755	AssignmentExpression	off_p = end - haystack		4164702	0		=			
ANR	4164756	Identifier	off_p		4164702	0					
ANR	4164757	AdditiveExpression	end - haystack		4164702	1		-			
ANR	4164758	Identifier	end		4164702	0					
ANR	4164759	Identifier	haystack		4164702	1					
ANR	4164760	ExpressionStatement	off_s = ( off_p > 0 ) ? ( size_t ) off_p : 0	157:1:6935:6974	4164702	6	True				
ANR	4164761	AssignmentExpression	off_s = ( off_p > 0 ) ? ( size_t ) off_p : 0		4164702	0		=			
ANR	4164762	Identifier	off_s		4164702	0					
ANR	4164763	ConditionalExpression	( off_p > 0 ) ? ( size_t ) off_p : 0		4164702	1					
ANR	4164764	Condition	off_p > 0		4164702	0					
ANR	4164765	RelationalExpression	off_p > 0		4164702	0		>			
ANR	4164766	Identifier	off_p		4164702	0					
ANR	4164767	PrimaryExpression	0		4164702	1					
ANR	4164768	CastExpression	( size_t ) off_p		4164702	1					
ANR	4164769	CastTarget	size_t		4164702	0					
ANR	4164770	Identifier	off_p		4164702	1					
ANR	4164771	PrimaryExpression	0		4164702	2					
ANR	4164772	IfStatement	if ( needle_len > off_s )		4164702	7					
ANR	4164773	Condition	needle_len > off_s	159:5:6982:6999	4164702	0	True				
ANR	4164774	RelationalExpression	needle_len > off_s		4164702	0		>			
ANR	4164775	Identifier	needle_len		4164702	0					
ANR	4164776	Identifier	off_s		4164702	1					
ANR	4164777	CompoundStatement		14:25:274:274	4164702	1					
ANR	4164778	ReturnStatement	return NULL ;	160:2:7006:7017	4164702	0	True				
ANR	4164779	Identifier	NULL		4164702	0					
ANR	4164780	IfStatement	if ( EXPECTED ( off_s < 1024 || needle_len < 3 ) )		4164702	8					
ANR	4164781	Condition	EXPECTED ( off_s < 1024 || needle_len < 3 )	163:5:7028:7067	4164702	0	True				
ANR	4164782	CallExpression	EXPECTED ( off_s < 1024 || needle_len < 3 )		4164702	0					
ANR	4164783	Callee	EXPECTED		4164702	0					
ANR	4164784	Identifier	EXPECTED		4164702	0					
ANR	4164785	ArgumentList	off_s < 1024 || needle_len < 3		4164702	1					
ANR	4164786	Argument	off_s < 1024 || needle_len < 3		4164702	0					
ANR	4164787	OrExpression	off_s < 1024 || needle_len < 3		4164702	0		||			
ANR	4164788	RelationalExpression	off_s < 1024		4164702	0		<			
ANR	4164789	Identifier	off_s		4164702	0					
ANR	4164790	PrimaryExpression	1024		4164702	1					
ANR	4164791	RelationalExpression	needle_len < 3		4164702	1		<			
ANR	4164792	Identifier	needle_len		4164702	0					
ANR	4164793	PrimaryExpression	3		4164702	1					
ANR	4164794	CompoundStatement		18:47:342:342	4164702	1					
ANR	4164795	ExpressionStatement	end -= needle_len	164:2:7074:7091	4164702	0	True				
ANR	4164796	AssignmentExpression	end -= needle_len		4164702	0		-=			
ANR	4164797	Identifier	end		4164702	0					
ANR	4164798	Identifier	needle_len		4164702	1					
ANR	4164799	WhileStatement	while ( p <= end )		4164702	1					
ANR	4164800	Condition	p <= end	166:9:7103:7110	4164702	0	True				
ANR	4164801	RelationalExpression	p <= end		4164702	0		<=			
ANR	4164802	Identifier	p		4164702	0					
ANR	4164803	Identifier	end		4164702	1					
ANR	4164804	CompoundStatement		21:19:385:385	4164702	1					
ANR	4164805	IfStatement	"if ( ( p = ( const char * ) memchr ( p , * needle , ( end - p + 1 ) ) ) && ne == p [ needle_len - 1 ] )"		4164702	0					
ANR	4164806	Condition	"( p = ( const char * ) memchr ( p , * needle , ( end - p + 1 ) ) ) && ne == p [ needle_len - 1 ]"	167:7:7122:7195	4164702	0	True				
ANR	4164807	AndExpression	"( p = ( const char * ) memchr ( p , * needle , ( end - p + 1 ) ) ) && ne == p [ needle_len - 1 ]"		4164702	0		&&			
ANR	4164808	AssignmentExpression	"p = ( const char * ) memchr ( p , * needle , ( end - p + 1 ) )"		4164702	0		=			
ANR	4164809	Identifier	p		4164702	0					
ANR	4164810	CastExpression	"( const char * ) memchr ( p , * needle , ( end - p + 1 ) )"		4164702	1					
ANR	4164811	CastTarget	const char *		4164702	0					
ANR	4164812	CallExpression	"memchr ( p , * needle , ( end - p + 1 ) )"		4164702	1					
ANR	4164813	Callee	memchr		4164702	0					
ANR	4164814	Identifier	memchr		4164702	0					
ANR	4164815	ArgumentList	p		4164702	1					
ANR	4164816	Argument	p		4164702	0					
ANR	4164817	Identifier	p		4164702	0					
ANR	4164818	Argument	* needle		4164702	1					
ANR	4164819	UnaryOperationExpression	* needle		4164702	0					
ANR	4164820	UnaryOperator	*		4164702	0					
ANR	4164821	Identifier	needle		4164702	1					
ANR	4164822	Argument	end - p + 1		4164702	2					
ANR	4164823	AdditiveExpression	end - p + 1		4164702	0		-			
ANR	4164824	Identifier	end		4164702	0					
ANR	4164825	AdditiveExpression	p + 1		4164702	1		+			
ANR	4164826	Identifier	p		4164702	0					
ANR	4164827	PrimaryExpression	1		4164702	1					
ANR	4164828	EqualityExpression	ne == p [ needle_len - 1 ]		4164702	1		==			
ANR	4164829	Identifier	ne		4164702	0					
ANR	4164830	ArrayIndexing	p [ needle_len - 1 ]		4164702	1					
ANR	4164831	Identifier	p		4164702	0					
ANR	4164832	AdditiveExpression	needle_len - 1		4164702	1		-			
ANR	4164833	Identifier	needle_len		4164702	0					
ANR	4164834	PrimaryExpression	1		4164702	1					
ANR	4164835	CompoundStatement		22:83:470:470	4164702	1					
ANR	4164836	IfStatement	"if ( ! memcmp ( needle , p , needle_len - 1 ) )"		4164702	0					
ANR	4164837	Condition	"! memcmp ( needle , p , needle_len - 1 )"	168:8:7208:7239	4164702	0	True				
ANR	4164838	UnaryOperationExpression	"! memcmp ( needle , p , needle_len - 1 )"		4164702	0					
ANR	4164839	UnaryOperator	!		4164702	0					
ANR	4164840	CallExpression	"memcmp ( needle , p , needle_len - 1 )"		4164702	1					
ANR	4164841	Callee	memcmp		4164702	0					
ANR	4164842	Identifier	memcmp		4164702	0					
ANR	4164843	ArgumentList	needle		4164702	1					
ANR	4164844	Argument	needle		4164702	0					
ANR	4164845	Identifier	needle		4164702	0					
ANR	4164846	Argument	p		4164702	1					
ANR	4164847	Identifier	p		4164702	0					
ANR	4164848	Argument	needle_len - 1		4164702	2					
ANR	4164849	AdditiveExpression	needle_len - 1		4164702	0		-			
ANR	4164850	Identifier	needle_len		4164702	0					
ANR	4164851	PrimaryExpression	1		4164702	1					
ANR	4164852	CompoundStatement		23:42:514:514	4164702	1					
ANR	4164853	ReturnStatement	return p ;	169:5:7249:7257	4164702	0	True				
ANR	4164854	Identifier	p		4164702	0					
ANR	4164855	IfStatement	if ( p == NULL )		4164702	1					
ANR	4164856	Condition	p == NULL	173:7:7278:7286	4164702	0	True				
ANR	4164857	EqualityExpression	p == NULL		4164702	0		==			
ANR	4164858	Identifier	p		4164702	0					
ANR	4164859	Identifier	NULL		4164702	1					
ANR	4164860	CompoundStatement		28:18:561:561	4164702	1					
ANR	4164861	ReturnStatement	return NULL ;	174:4:7295:7306	4164702	0	True				
ANR	4164862	Identifier	NULL		4164702	0					
ANR	4164863	ExpressionStatement	p ++	177:3:7317:7320	4164702	2	True				
ANR	4164864	PostIncDecOperationExpression	p ++		4164702	0					
ANR	4164865	Identifier	p		4164702	0					
ANR	4164866	IncDec	++		4164702	1					
ANR	4164867	ReturnStatement	return NULL ;	180:2:7329:7340	4164702	2	True				
ANR	4164868	Identifier	NULL		4164702	0					
ANR	4164869	ElseStatement	else		4164702	0					
ANR	4164870	CompoundStatement		36:8:622:622	4164702	0					
ANR	4164871	ReturnStatement	"return zend_memnstr_ex ( haystack , needle , needle_len , end ) ;"	182:2:7354:7411	4164702	0	True				
ANR	4164872	CallExpression	"zend_memnstr_ex ( haystack , needle , needle_len , end )"		4164702	0					
ANR	4164873	Callee	zend_memnstr_ex		4164702	0					
ANR	4164874	Identifier	zend_memnstr_ex		4164702	0					
ANR	4164875	ArgumentList	haystack		4164702	1					
ANR	4164876	Argument	haystack		4164702	0					
ANR	4164877	Identifier	haystack		4164702	0					
ANR	4164878	Argument	needle		4164702	1					
ANR	4164879	Identifier	needle		4164702	0					
ANR	4164880	Argument	needle_len		4164702	2					
ANR	4164881	Identifier	needle_len		4164702	0					
ANR	4164882	Argument	end		4164702	3					
ANR	4164883	Identifier	end		4164702	0					
ANR	4164884	ReturnType	const char *		4164702	1					
ANR	4164885	Identifier	zend_memnstr		4164702	2					
ANR	4164886	ParameterList	"const char * haystack , const char * needle , size_t needle_len , const char * end"		4164702	3					
ANR	4164887	Parameter	const char * haystack	145:13:6649:6668	4164702	0	True				
ANR	4164888	ParameterType	const char *		4164702	0					
ANR	4164889	Identifier	haystack		4164702	1					
ANR	4164890	Parameter	const char * needle	145:35:6671:6688	4164702	1	True				
ANR	4164891	ParameterType	const char *		4164702	0					
ANR	4164892	Identifier	needle		4164702	1					
ANR	4164893	Parameter	size_t needle_len	145:55:6691:6707	4164702	2	True				
ANR	4164894	ParameterType	size_t		4164702	0					
ANR	4164895	Identifier	needle_len		4164702	1					
ANR	4164896	Parameter	const char * end	145:74:6710:6724	4164702	3	True				
ANR	4164897	ParameterType	const char *		4164702	0					
ANR	4164898	Identifier	end		4164702	1					
ANR	4164899	CFGEntryNode	ENTRY		4164702		True				
ANR	4164900	CFGExitNode	EXIT		4164702		True				
ANR	4164901	Symbol	NULL		4164702						
ANR	4164902	Symbol	* needle		4164702						
ANR	4164903	Symbol	* needle_len		4164702						
ANR	4164904	Symbol	off_p		4164702						
ANR	4164905	Symbol	off_s		4164702						
ANR	4164906	Symbol	p		4164702						
ANR	4164907	Symbol	zend_memnstr_ex		4164702						
ANR	4164908	Symbol	haystack		4164702						
ANR	4164909	Symbol	memcmp		4164702						
ANR	4164910	Symbol	ne		4164702						
ANR	4164911	Symbol	end		4164702						
ANR	4164912	Symbol	memchr		4164702						
ANR	4164913	Symbol	* p		4164702						
ANR	4164914	Symbol	needle		4164702						
ANR	4164915	Symbol	EXPECTED		4164702						
ANR	4164916	Symbol	needle_len		4164702						
ANR	4164917	Function	zend_memrchr	186:26:7445:7740							
ANR	4164918	FunctionDef	"zend_memrchr (const void * s , int c , size_t n)"		4164917	0					
ANR	4164919	CompoundStatement		187:0:7502:7740	4164917	0					
ANR	4164920	Statement	register	188:1:7505:7512	4164917	0	True				
ANR	4164921	IdentifierDeclStatement	const unsigned char * e ;	188:10:7514:7536	4164917	1	True				
ANR	4164922	IdentifierDecl	* e		4164917	0					
ANR	4164923	IdentifierDeclType	const unsigned char *		4164917	0					
ANR	4164924	Identifier	e		4164917	1					
ANR	4164925	IfStatement	if ( n <= 0 )		4164917	2					
ANR	4164926	Condition	n <= 0	189:5:7543:7548	4164917	0	True				
ANR	4164927	RelationalExpression	n <= 0		4164917	0		<=			
ANR	4164928	Identifier	n		4164917	0					
ANR	4164929	PrimaryExpression	0		4164917	1					
ANR	4164930	CompoundStatement		3:13:48:48	4164917	1					
ANR	4164931	ReturnStatement	return NULL ;	190:2:7555:7566	4164917	0	True				
ANR	4164932	Identifier	NULL		4164917	0					
ANR	4164933	ForStatement	for ( e = ( const unsigned char * ) s + n - 1 ; e >= ( const unsigned char * ) s ; e -- )		4164917	3					
ANR	4164934	ForInit	e = ( const unsigned char * ) s + n - 1 ;	193:6:7578:7614	4164917	0	True				
ANR	4164935	AssignmentExpression	e = ( const unsigned char * ) s + n - 1		4164917	0		=			
ANR	4164936	Identifier	e		4164917	0					
ANR	4164937	AdditiveExpression	( const unsigned char * ) s + n - 1		4164917	1		+			
ANR	4164938	CastExpression	( const unsigned char * ) s		4164917	0					
ANR	4164939	CastTarget	const unsigned char *		4164917	0					
ANR	4164940	Identifier	s		4164917	1					
ANR	4164941	AdditiveExpression	n - 1		4164917	1		-			
ANR	4164942	Identifier	n		4164917	0					
ANR	4164943	PrimaryExpression	1		4164917	1					
ANR	4164944	Condition	e >= ( const unsigned char * ) s	193:44:7616:7644	4164917	1	True				
ANR	4164945	RelationalExpression	e >= ( const unsigned char * ) s		4164917	0		>=			
ANR	4164946	Identifier	e		4164917	0					
ANR	4164947	CastExpression	( const unsigned char * ) s		4164917	1					
ANR	4164948	CastTarget	const unsigned char *		4164917	0					
ANR	4164949	Identifier	s		4164917	1					
ANR	4164950	PostIncDecOperationExpression	e --	193:75:7647:7649	4164917	2	True				
ANR	4164951	Identifier	e		4164917	0					
ANR	4164952	IncDec	--		4164917	1					
ANR	4164953	CompoundStatement		7:80:149:149	4164917	3					
ANR	4164954	IfStatement	if ( * e == ( const unsigned char ) c )		4164917	0					
ANR	4164955	Condition	* e == ( const unsigned char ) c	194:6:7660:7687	4164917	0	True				
ANR	4164956	EqualityExpression	* e == ( const unsigned char ) c		4164917	0		==			
ANR	4164957	UnaryOperationExpression	* e		4164917	0					
ANR	4164958	UnaryOperator	*		4164917	0					
ANR	4164959	Identifier	e		4164917	1					
ANR	4164960	CastExpression	( const unsigned char ) c		4164917	1					
ANR	4164961	CastTarget	const unsigned char		4164917	0					
ANR	4164962	Identifier	c		4164917	1					
ANR	4164963	CompoundStatement		8:36:187:187	4164917	1					
ANR	4164964	ReturnStatement	return ( const void * ) e ;	195:3:7695:7717	4164917	0	True				
ANR	4164965	CastExpression	( const void * ) e		4164917	0					
ANR	4164966	CastTarget	const void *		4164917	0					
ANR	4164967	Identifier	e		4164917	1					
ANR	4164968	ReturnStatement	return NULL ;	198:1:7727:7738	4164917	4	True				
ANR	4164969	Identifier	NULL		4164917	0					
ANR	4164970	ReturnType	const void *		4164917	1					
ANR	4164971	Identifier	zend_memrchr		4164917	2					
ANR	4164972	ParameterList	"const void * s , int c , size_t n"		4164917	3					
ANR	4164973	Parameter	const void * s	186:51:7470:7482	4164917	0	True				
ANR	4164974	ParameterType	const void *		4164917	0					
ANR	4164975	Identifier	s		4164917	1					
ANR	4164976	Parameter	int c	186:66:7485:7489	4164917	1	True				
ANR	4164977	ParameterType	int		4164917	0					
ANR	4164978	Identifier	c		4164917	1					
ANR	4164979	Parameter	size_t n	186:73:7492:7499	4164917	2	True				
ANR	4164980	ParameterType	size_t		4164917	0					
ANR	4164981	Identifier	n		4164917	1					
ANR	4164982	CFGEntryNode	ENTRY		4164917		True				
ANR	4164983	CFGExitNode	EXIT		4164917		True				
ANR	4164984	Symbol	s		4164917						
ANR	4164985	Symbol	c		4164917						
ANR	4164986	Symbol	NULL		4164917						
ANR	4164987	Symbol	e		4164917						
ANR	4164988	Symbol	n		4164917						
ANR	4164989	Symbol	* e		4164917						
ANR	4164990	Function	zend_memnrstr	202:26:7770:8597							
ANR	4164991	FunctionDef	"zend_memnrstr (const char * haystack , const char * needle , size_t needle_len , char * end)"		4164990	0					
ANR	4164992	CompoundStatement		204:0:7869:8597	4164990	0					
ANR	4164993	IdentifierDeclStatement	const char * p = end ;	205:4:7875:7894	4164990	0	True				
ANR	4164994	IdentifierDecl	* p = end		4164990	0					
ANR	4164995	IdentifierDeclType	const char *		4164990	0					
ANR	4164996	Identifier	p		4164990	1					
ANR	4164997	AssignmentExpression	* p = end		4164990	2		=			
ANR	4164998	Identifier	end		4164990	0					
ANR	4164999	Identifier	end		4164990	1					
ANR	4165000	IdentifierDeclStatement	const char ne = needle [ needle_len - 1 ] ;	206:4:7900:7936	4164990	1	True				
ANR	4165001	IdentifierDecl	ne = needle [ needle_len - 1 ]		4164990	0					
ANR	4165002	IdentifierDeclType	const char		4164990	0					
ANR	4165003	Identifier	ne		4164990	1					
ANR	4165004	AssignmentExpression	ne = needle [ needle_len - 1 ]		4164990	2		=			
ANR	4165005	Identifier	ne		4164990	0					
ANR	4165006	ArrayIndexing	needle [ needle_len - 1 ]		4164990	1					
ANR	4165007	Identifier	needle		4164990	0					
ANR	4165008	AdditiveExpression	needle_len - 1		4164990	1		-			
ANR	4165009	Identifier	needle_len		4164990	0					
ANR	4165010	PrimaryExpression	1		4164990	1					
ANR	4165011	IdentifierDeclStatement	ptrdiff_t off_p ;	207:4:7942:7957	4164990	2	True				
ANR	4165012	IdentifierDecl	off_p		4164990	0					
ANR	4165013	IdentifierDeclType	ptrdiff_t		4164990	0					
ANR	4165014	Identifier	off_p		4164990	1					
ANR	4165015	IdentifierDeclStatement	size_t off_s ;	208:4:7963:7975	4164990	3	True				
ANR	4165016	IdentifierDecl	off_s		4164990	0					
ANR	4165017	IdentifierDeclType	size_t		4164990	0					
ANR	4165018	Identifier	off_s		4164990	1					
ANR	4165019	IfStatement	if ( needle_len == 1 )		4164990	4					
ANR	4165020	Condition	needle_len == 1	210:8:7986:8000	4164990	0	True				
ANR	4165021	EqualityExpression	needle_len == 1		4164990	0		==			
ANR	4165022	Identifier	needle_len		4164990	0					
ANR	4165023	PrimaryExpression	1		4164990	1					
ANR	4165024	CompoundStatement		7:25:133:133	4164990	1					
ANR	4165025	ReturnStatement	"return ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) ) ;"	211:8:8013:8081	4164990	0	True				
ANR	4165026	CastExpression	"( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) )"		4164990	0					
ANR	4165027	CastTarget	const char *		4164990	0					
ANR	4165028	CallExpression	"zend_memrchr ( haystack , * needle , ( p - haystack ) )"		4164990	1					
ANR	4165029	Callee	zend_memrchr		4164990	0					
ANR	4165030	Identifier	zend_memrchr		4164990	0					
ANR	4165031	ArgumentList	haystack		4164990	1					
ANR	4165032	Argument	haystack		4164990	0					
ANR	4165033	Identifier	haystack		4164990	0					
ANR	4165034	Argument	* needle		4164990	1					
ANR	4165035	UnaryOperationExpression	* needle		4164990	0					
ANR	4165036	UnaryOperator	*		4164990	0					
ANR	4165037	Identifier	needle		4164990	1					
ANR	4165038	Argument	p - haystack		4164990	2					
ANR	4165039	AdditiveExpression	p - haystack		4164990	0		-			
ANR	4165040	Identifier	p		4164990	0					
ANR	4165041	Identifier	haystack		4164990	1					
ANR	4165042	ExpressionStatement	off_p = end - haystack	214:4:8094:8116	4164990	5	True				
ANR	4165043	AssignmentExpression	off_p = end - haystack		4164990	0		=			
ANR	4165044	Identifier	off_p		4164990	0					
ANR	4165045	AdditiveExpression	end - haystack		4164990	1		-			
ANR	4165046	Identifier	end		4164990	0					
ANR	4165047	Identifier	haystack		4164990	1					
ANR	4165048	ExpressionStatement	off_s = ( off_p > 0 ) ? ( size_t ) off_p : 0	215:4:8122:8161	4164990	6	True				
ANR	4165049	AssignmentExpression	off_s = ( off_p > 0 ) ? ( size_t ) off_p : 0		4164990	0		=			
ANR	4165050	Identifier	off_s		4164990	0					
ANR	4165051	ConditionalExpression	( off_p > 0 ) ? ( size_t ) off_p : 0		4164990	1					
ANR	4165052	Condition	off_p > 0		4164990	0					
ANR	4165053	RelationalExpression	off_p > 0		4164990	0		>			
ANR	4165054	Identifier	off_p		4164990	0					
ANR	4165055	PrimaryExpression	0		4164990	1					
ANR	4165056	CastExpression	( size_t ) off_p		4164990	1					
ANR	4165057	CastTarget	size_t		4164990	0					
ANR	4165058	Identifier	off_p		4164990	1					
ANR	4165059	PrimaryExpression	0		4164990	2					
ANR	4165060	IfStatement	if ( needle_len > off_s )		4164990	7					
ANR	4165061	Condition	needle_len > off_s	217:8:8172:8189	4164990	0	True				
ANR	4165062	RelationalExpression	needle_len > off_s		4164990	0		>			
ANR	4165063	Identifier	needle_len		4164990	0					
ANR	4165064	Identifier	off_s		4164990	1					
ANR	4165065	CompoundStatement		14:28:322:322	4164990	1					
ANR	4165066	ReturnStatement	return NULL ;	218:8:8202:8213	4164990	0	True				
ANR	4165067	Identifier	NULL		4164990	0					
ANR	4165068	IfStatement	if ( EXPECTED ( off_s < 1024 || needle_len < 3 ) )		4164990	8					
ANR	4165069	Condition	EXPECTED ( off_s < 1024 || needle_len < 3 )	221:5:8227:8266	4164990	0	True				
ANR	4165070	CallExpression	EXPECTED ( off_s < 1024 || needle_len < 3 )		4164990	0					
ANR	4165071	Callee	EXPECTED		4164990	0					
ANR	4165072	Identifier	EXPECTED		4164990	0					
ANR	4165073	ArgumentList	off_s < 1024 || needle_len < 3		4164990	1					
ANR	4165074	Argument	off_s < 1024 || needle_len < 3		4164990	0					
ANR	4165075	OrExpression	off_s < 1024 || needle_len < 3		4164990	0		||			
ANR	4165076	RelationalExpression	off_s < 1024		4164990	0		<			
ANR	4165077	Identifier	off_s		4164990	0					
ANR	4165078	PrimaryExpression	1024		4164990	1					
ANR	4165079	RelationalExpression	needle_len < 3		4164990	1		<			
ANR	4165080	Identifier	needle_len		4164990	0					
ANR	4165081	PrimaryExpression	3		4164990	1					
ANR	4165082	CompoundStatement		18:47:399:399	4164990	1					
ANR	4165083	ExpressionStatement	p -= needle_len	222:2:8273:8288	4164990	0	True				
ANR	4165084	AssignmentExpression	p -= needle_len		4164990	0		-=			
ANR	4165085	Identifier	p		4164990	0					
ANR	4165086	Identifier	needle_len		4164990	1					
ANR	4165087	DoStatement	do		4164990	1					
ANR	4165088	CompoundStatement		21:5:426:426	4164990	0					
ANR	4165089	IfStatement	"if ( ( p = ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 ) ) && ne == p [ needle_len - 1 ] )"		4164990	0					
ANR	4165090	Condition	"( p = ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 ) ) && ne == p [ needle_len - 1 ]"	225:7:8305:8400	4164990	0	True				
ANR	4165091	AndExpression	"( p = ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 ) ) && ne == p [ needle_len - 1 ]"		4164990	0		&&			
ANR	4165092	AssignmentExpression	"p = ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 )"		4164990	0		=			
ANR	4165093	Identifier	p		4164990	0					
ANR	4165094	CastExpression	"( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 )"		4164990	1					
ANR	4165095	CastTarget	const char *		4164990	0					
ANR	4165096	CallExpression	"zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 )"		4164990	1					
ANR	4165097	Callee	zend_memrchr		4164990	0					
ANR	4165098	Identifier	zend_memrchr		4164990	0					
ANR	4165099	ArgumentList	haystack		4164990	1					
ANR	4165100	Argument	haystack		4164990	0					
ANR	4165101	Identifier	haystack		4164990	0					
ANR	4165102	Argument	* needle		4164990	1					
ANR	4165103	UnaryOperationExpression	* needle		4164990	0					
ANR	4165104	UnaryOperator	*		4164990	0					
ANR	4165105	Identifier	needle		4164990	1					
ANR	4165106	Argument	( p - haystack ) + 1		4164990	2					
ANR	4165107	AdditiveExpression	( p - haystack ) + 1		4164990	0		+			
ANR	4165108	AdditiveExpression	p - haystack		4164990	0		-			
ANR	4165109	Identifier	p		4164990	0					
ANR	4165110	Identifier	haystack		4164990	1					
ANR	4165111	PrimaryExpression	1		4164990	1					
ANR	4165112	EqualityExpression	ne == p [ needle_len - 1 ]		4164990	1		==			
ANR	4165113	Identifier	ne		4164990	0					
ANR	4165114	ArrayIndexing	p [ needle_len - 1 ]		4164990	1					
ANR	4165115	Identifier	p		4164990	0					
ANR	4165116	AdditiveExpression	needle_len - 1		4164990	1		-			
ANR	4165117	Identifier	needle_len		4164990	0					
ANR	4165118	PrimaryExpression	1		4164990	1					
ANR	4165119	CompoundStatement		22:105:533:533	4164990	1					
ANR	4165120	IfStatement	"if ( ! memcmp ( needle , p , needle_len - 1 ) )"		4164990	0					
ANR	4165121	Condition	"! memcmp ( needle , p , needle_len - 1 )"	226:8:8413:8446	4164990	0	True				
ANR	4165122	UnaryOperationExpression	"! memcmp ( needle , p , needle_len - 1 )"		4164990	0					
ANR	4165123	UnaryOperator	!		4164990	0					
ANR	4165124	CallExpression	"memcmp ( needle , p , needle_len - 1 )"		4164990	1					
ANR	4165125	Callee	memcmp		4164990	0					
ANR	4165126	Identifier	memcmp		4164990	0					
ANR	4165127	ArgumentList	needle		4164990	1					
ANR	4165128	Argument	needle		4164990	0					
ANR	4165129	Identifier	needle		4164990	0					
ANR	4165130	Argument	p		4164990	1					
ANR	4165131	Identifier	p		4164990	0					
ANR	4165132	Argument	needle_len - 1		4164990	2					
ANR	4165133	AdditiveExpression	needle_len - 1		4164990	0		-			
ANR	4165134	Identifier	needle_len		4164990	0					
ANR	4165135	PrimaryExpression	1		4164990	1					
ANR	4165136	CompoundStatement		23:44:579:579	4164990	1					
ANR	4165137	ReturnStatement	return p ;	227:5:8456:8464	4164990	0	True				
ANR	4165138	Identifier	p		4164990	0					
ANR	4165139	Condition	p -- >= haystack	230:11:8488:8502	4164990	1	True				
ANR	4165140	RelationalExpression	p -- >= haystack		4164990	0		>=			
ANR	4165141	PostIncDecOperationExpression	p --		4164990	0					
ANR	4165142	Identifier	p		4164990	0					
ANR	4165143	IncDec	--		4164990	1					
ANR	4165144	Identifier	haystack		4164990	1					
ANR	4165145	ReturnStatement	return NULL ;	232:2:8509:8520	4164990	2	True				
ANR	4165146	Identifier	NULL		4164990	0					
ANR	4165147	ElseStatement	else		4164990	0					
ANR	4165148	CompoundStatement		30:8:660:660	4164990	0					
ANR	4165149	ReturnStatement	"return zend_memnrstr_ex ( haystack , needle , needle_len , end ) ;"	234:2:8534:8592	4164990	0	True				
ANR	4165150	CallExpression	"zend_memnrstr_ex ( haystack , needle , needle_len , end )"		4164990	0					
ANR	4165151	Callee	zend_memnrstr_ex		4164990	0					
ANR	4165152	Identifier	zend_memnrstr_ex		4164990	0					
ANR	4165153	ArgumentList	haystack		4164990	1					
ANR	4165154	Argument	haystack		4164990	0					
ANR	4165155	Identifier	haystack		4164990	0					
ANR	4165156	Argument	needle		4164990	1					
ANR	4165157	Identifier	needle		4164990	0					
ANR	4165158	Argument	needle_len		4164990	2					
ANR	4165159	Identifier	needle_len		4164990	0					
ANR	4165160	Argument	end		4164990	3					
ANR	4165161	Identifier	end		4164990	0					
ANR	4165162	ReturnType	const char *		4164990	1					
ANR	4165163	Identifier	zend_memnrstr		4164990	2					
ANR	4165164	ParameterList	"const char * haystack , const char * needle , size_t needle_len , char * end"		4164990	3					
ANR	4165165	Parameter	const char * haystack	203:14:7797:7816	4164990	0	True				
ANR	4165166	ParameterType	const char *		4164990	0					
ANR	4165167	Identifier	haystack		4164990	1					
ANR	4165168	Parameter	const char * needle	203:36:7819:7836	4164990	1	True				
ANR	4165169	ParameterType	const char *		4164990	0					
ANR	4165170	Identifier	needle		4164990	1					
ANR	4165171	Parameter	size_t needle_len	203:56:7839:7855	4164990	2	True				
ANR	4165172	ParameterType	size_t		4164990	0					
ANR	4165173	Identifier	needle_len		4164990	1					
ANR	4165174	Parameter	char * end	203:75:7858:7866	4164990	3	True				
ANR	4165175	ParameterType	char *		4164990	0					
ANR	4165176	Identifier	end		4164990	1					
ANR	4165177	CFGEntryNode	ENTRY		4164990		True				
ANR	4165178	CFGExitNode	EXIT		4164990		True				
ANR	4165179	Symbol	zend_memrchr		4164990						
ANR	4165180	Symbol	NULL		4164990						
ANR	4165181	Symbol	* needle		4164990						
ANR	4165182	Symbol	zend_memnrstr_ex		4164990						
ANR	4165183	Symbol	* needle_len		4164990						
ANR	4165184	Symbol	off_p		4164990						
ANR	4165185	Symbol	off_s		4164990						
ANR	4165186	Symbol	p		4164990						
ANR	4165187	Symbol	haystack		4164990						
ANR	4165188	Symbol	memcmp		4164990						
ANR	4165189	Symbol	ne		4164990						
ANR	4165190	Symbol	end		4164990						
ANR	4165191	Symbol	* p		4164990						
ANR	4165192	Symbol	needle		4164990						
ANR	4165193	Symbol	EXPECTED		4164990						
ANR	4165194	Symbol	needle_len		4164990						
ANR	4165195	DeclStmt									
ANR	4165196	Decl							ZEND_API int ZEND_FASTCALL	ZEND_API int ZEND_FASTCALL ( zval * op1 )	increment_function
ANR	4165197	DeclStmt									
ANR	4165198	Decl							ZEND_API int ZEND_FASTCALL	ZEND_API int ZEND_FASTCALL ( zval * op2 )	decrement_function
ANR	4165199	DeclStmt									
ANR	4165200	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_scalar_to_number
ANR	4165201	DeclStmt									
ANR	4165202	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_long
ANR	4165203	DeclStmt									
ANR	4165204	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_double
ANR	4165205	DeclStmt									
ANR	4165206	Decl							ZEND_API void ZEND_FASTCALL	"ZEND_API void ZEND_FASTCALL ( zval * op , int base )"	convert_to_long_base
ANR	4165207	DeclStmt									
ANR	4165208	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_null
ANR	4165209	DeclStmt									
ANR	4165210	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_boolean
ANR	4165211	DeclStmt									
ANR	4165212	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_array
ANR	4165213	DeclStmt									
ANR	4165214	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_object
ANR	4165215	DeclStmt									
ANR	4165216	Decl							ZEND_API zend_long ZEND_FASTCALL	ZEND_API zend_long ZEND_FASTCALL ( zval * op )	_zval_get_long_func
ANR	4165217	DeclStmt									
ANR	4165218	Decl							ZEND_API double ZEND_FASTCALL	ZEND_API double ZEND_FASTCALL ( zval * op )	_zval_get_double_func
ANR	4165219	DeclStmt									
ANR	4165220	Decl							ZEND_FASTCALL	ZEND_FASTCALL ( zval * op )	_zval_get_string_func
ANR	4165221	Function	_zval_get_long	259:0:9718:9855							
ANR	4165222	FunctionDef	_zval_get_long (zval * op)		4165221	0					
ANR	4165223	CompoundStatement		259:61:9779:9855	4165221	0					
ANR	4165224	ReturnStatement	return Z_TYPE_P ( op ) == IS_LONG ? Z_LVAL_P ( op ) : _zval_get_long_func ( op ) ;	260:1:9782:9853	4165221	0	True				
ANR	4165225	ConditionalExpression	Z_TYPE_P ( op ) == IS_LONG ? Z_LVAL_P ( op ) : _zval_get_long_func ( op )		4165221	0					
ANR	4165226	Condition	Z_TYPE_P ( op ) == IS_LONG		4165221	0					
ANR	4165227	EqualityExpression	Z_TYPE_P ( op ) == IS_LONG		4165221	0		==			
ANR	4165228	CallExpression	Z_TYPE_P ( op )		4165221	0					
ANR	4165229	Callee	Z_TYPE_P		4165221	0					
ANR	4165230	Identifier	Z_TYPE_P		4165221	0					
ANR	4165231	ArgumentList	op		4165221	1					
ANR	4165232	Argument	op		4165221	0					
ANR	4165233	Identifier	op		4165221	0					
ANR	4165234	Identifier	IS_LONG		4165221	1					
ANR	4165235	CallExpression	Z_LVAL_P ( op )		4165221	1					
ANR	4165236	Callee	Z_LVAL_P		4165221	0					
ANR	4165237	Identifier	Z_LVAL_P		4165221	0					
ANR	4165238	ArgumentList	op		4165221	1					
ANR	4165239	Argument	op		4165221	0					
ANR	4165240	Identifier	op		4165221	0					
ANR	4165241	CallExpression	_zval_get_long_func ( op )		4165221	2					
ANR	4165242	Callee	_zval_get_long_func		4165221	0					
ANR	4165243	Identifier	_zval_get_long_func		4165221	0					
ANR	4165244	ArgumentList	op		4165221	1					
ANR	4165245	Argument	op		4165221	0					
ANR	4165246	Identifier	op		4165221	0					
ANR	4165247	ReturnType	static zend_always_inline zend_long		4165221	1					
ANR	4165248	Identifier	_zval_get_long		4165221	2					
ANR	4165249	ParameterList	zval * op		4165221	3					
ANR	4165250	Parameter	zval * op	259:51:9769:9776	4165221	0	True				
ANR	4165251	ParameterType	zval *		4165221	0					
ANR	4165252	Identifier	op		4165221	1					
ANR	4165253	CFGEntryNode	ENTRY		4165221		True				
ANR	4165254	CFGExitNode	EXIT		4165221		True				
ANR	4165255	Symbol	op		4165221						
ANR	4165256	Symbol	IS_LONG		4165221						
ANR	4165257	Symbol	_zval_get_long_func		4165221						
ANR	4165258	Symbol	Z_TYPE_P		4165221						
ANR	4165259	Symbol	Z_LVAL_P		4165221						
ANR	4165260	Function	_zval_get_double	262:0:9857:9997							
ANR	4165261	FunctionDef	_zval_get_double (zval * op)		4165260	0					
ANR	4165262	CompoundStatement		262:60:9917:9997	4165260	0					
ANR	4165263	ReturnStatement	return Z_TYPE_P ( op ) == IS_DOUBLE ? Z_DVAL_P ( op ) : _zval_get_double_func ( op ) ;	263:1:9920:9995	4165260	0	True				
ANR	4165264	ConditionalExpression	Z_TYPE_P ( op ) == IS_DOUBLE ? Z_DVAL_P ( op ) : _zval_get_double_func ( op )		4165260	0					
ANR	4165265	Condition	Z_TYPE_P ( op ) == IS_DOUBLE		4165260	0					
ANR	4165266	EqualityExpression	Z_TYPE_P ( op ) == IS_DOUBLE		4165260	0		==			
ANR	4165267	CallExpression	Z_TYPE_P ( op )		4165260	0					
ANR	4165268	Callee	Z_TYPE_P		4165260	0					
ANR	4165269	Identifier	Z_TYPE_P		4165260	0					
ANR	4165270	ArgumentList	op		4165260	1					
ANR	4165271	Argument	op		4165260	0					
ANR	4165272	Identifier	op		4165260	0					
ANR	4165273	Identifier	IS_DOUBLE		4165260	1					
ANR	4165274	CallExpression	Z_DVAL_P ( op )		4165260	1					
ANR	4165275	Callee	Z_DVAL_P		4165260	0					
ANR	4165276	Identifier	Z_DVAL_P		4165260	0					
ANR	4165277	ArgumentList	op		4165260	1					
ANR	4165278	Argument	op		4165260	0					
ANR	4165279	Identifier	op		4165260	0					
ANR	4165280	CallExpression	_zval_get_double_func ( op )		4165260	2					
ANR	4165281	Callee	_zval_get_double_func		4165260	0					
ANR	4165282	Identifier	_zval_get_double_func		4165260	0					
ANR	4165283	ArgumentList	op		4165260	1					
ANR	4165284	Argument	op		4165260	0					
ANR	4165285	Identifier	op		4165260	0					
ANR	4165286	ReturnType	static zend_always_inline double		4165260	1					
ANR	4165287	Identifier	_zval_get_double		4165260	2					
ANR	4165288	ParameterList	zval * op		4165260	3					
ANR	4165289	Parameter	zval * op	262:50:9907:9914	4165260	0	True				
ANR	4165290	ParameterType	zval *		4165260	0					
ANR	4165291	Identifier	op		4165260	1					
ANR	4165292	CFGEntryNode	ENTRY		4165260		True				
ANR	4165293	CFGExitNode	EXIT		4165260		True				
ANR	4165294	Symbol	op		4165260						
ANR	4165295	Symbol	IS_DOUBLE		4165260						
ANR	4165296	Symbol	Z_TYPE_P		4165260						
ANR	4165297	Symbol	Z_DVAL_P		4165260						
ANR	4165298	Symbol	_zval_get_double_func		4165260						
ANR	4165299	Function	_zval_get_string	265:0:9999:10162							
ANR	4165300	FunctionDef	_zval_get_string (zval * op)		4165299	0					
ANR	4165301	CompoundStatement		265:66:10065:10162	4165299	0					
ANR	4165302	ReturnStatement	return Z_TYPE_P ( op ) == IS_STRING ? zend_string_copy ( Z_STR_P ( op ) ) : _zval_get_string_func ( op ) ;	266:1:10068:10160	4165299	0	True				
ANR	4165303	ConditionalExpression	Z_TYPE_P ( op ) == IS_STRING ? zend_string_copy ( Z_STR_P ( op ) ) : _zval_get_string_func ( op )		4165299	0					
ANR	4165304	Condition	Z_TYPE_P ( op ) == IS_STRING		4165299	0					
ANR	4165305	EqualityExpression	Z_TYPE_P ( op ) == IS_STRING		4165299	0		==			
ANR	4165306	CallExpression	Z_TYPE_P ( op )		4165299	0					
ANR	4165307	Callee	Z_TYPE_P		4165299	0					
ANR	4165308	Identifier	Z_TYPE_P		4165299	0					
ANR	4165309	ArgumentList	op		4165299	1					
ANR	4165310	Argument	op		4165299	0					
ANR	4165311	Identifier	op		4165299	0					
ANR	4165312	Identifier	IS_STRING		4165299	1					
ANR	4165313	CallExpression	zend_string_copy ( Z_STR_P ( op ) )		4165299	1					
ANR	4165314	Callee	zend_string_copy		4165299	0					
ANR	4165315	Identifier	zend_string_copy		4165299	0					
ANR	4165316	ArgumentList	Z_STR_P ( op )		4165299	1					
ANR	4165317	Argument	Z_STR_P ( op )		4165299	0					
ANR	4165318	CallExpression	Z_STR_P ( op )		4165299	0					
ANR	4165319	Callee	Z_STR_P		4165299	0					
ANR	4165320	Identifier	Z_STR_P		4165299	0					
ANR	4165321	ArgumentList	op		4165299	1					
ANR	4165322	Argument	op		4165299	0					
ANR	4165323	Identifier	op		4165299	0					
ANR	4165324	CallExpression	_zval_get_string_func ( op )		4165299	2					
ANR	4165325	Callee	_zval_get_string_func		4165299	0					
ANR	4165326	Identifier	_zval_get_string_func		4165299	0					
ANR	4165327	ArgumentList	op		4165299	1					
ANR	4165328	Argument	op		4165299	0					
ANR	4165329	Identifier	op		4165299	0					
ANR	4165330	ReturnType	static zend_always_inline zend_string *		4165299	1					
ANR	4165331	Identifier	_zval_get_string		4165299	2					
ANR	4165332	ParameterList	zval * op		4165299	3					
ANR	4165333	Parameter	zval * op	265:56:10055:10062	4165299	0	True				
ANR	4165334	ParameterType	zval *		4165299	0					
ANR	4165335	Identifier	op		4165299	1					
ANR	4165336	CFGEntryNode	ENTRY		4165299		True				
ANR	4165337	CFGExitNode	EXIT		4165299		True				
ANR	4165338	Symbol	op		4165299						
ANR	4165339	Symbol	_zval_get_string_func		4165299						
ANR	4165340	Symbol	IS_STRING		4165299						
ANR	4165341	Symbol	zend_string_copy		4165299						
ANR	4165342	Symbol	Z_STR_P		4165299						
ANR	4165343	Symbol	Z_TYPE_P		4165299						
ANR	4165344	DeclStmt									
ANR	4165345	Decl							ZEND_API int ZEND_FASTCALL	ZEND_API int ZEND_FASTCALL ( zval * op )	zend_is_true
ANR	4165346	DeclStmt									
ANR	4165347	Decl							ZEND_API int ZEND_FASTCALL	ZEND_API int ZEND_FASTCALL ( zval * op )	zend_object_is_true
ANR	4165348	Function	i_zend_is_true	283:0:10693:11471							
ANR	4165349	FunctionDef	i_zend_is_true (zval * op)		4165348	0					
ANR	4165350	CompoundStatement		284:0:10748:11471	4165348	0					
ANR	4165351	IdentifierDeclStatement	int result = 0 ;	285:1:10751:10765	4165348	0	True				
ANR	4165352	IdentifierDecl	result = 0		4165348	0					
ANR	4165353	IdentifierDeclType	int		4165348	0					
ANR	4165354	Identifier	result		4165348	1					
ANR	4165355	AssignmentExpression	result = 0		4165348	2		=			
ANR	4165356	Identifier	result		4165348	0					
ANR	4165357	PrimaryExpression	0		4165348	1					
ANR	4165358	Label	again :	287:0:10768:10773	4165348	1	True				
ANR	4165359	Identifier	again		4165348	0					
ANR	4165360	SwitchStatement	switch ( Z_TYPE_P ( op ) )		4165348	2					
ANR	4165361	Condition	Z_TYPE_P ( op )	288:9:10784:10795	4165348	0	True				
ANR	4165362	CallExpression	Z_TYPE_P ( op )		4165348	0					
ANR	4165363	Callee	Z_TYPE_P		4165348	0					
ANR	4165364	Identifier	Z_TYPE_P		4165348	0					
ANR	4165365	ArgumentList	op		4165348	1					
ANR	4165366	Argument	op		4165348	0					
ANR	4165367	Identifier	op		4165348	0					
ANR	4165368	CompoundStatement		5:23:49:49	4165348	1					
ANR	4165369	Label	case IS_TRUE :	289:2:10802:10814	4165348	0	True				
ANR	4165370	Identifier	IS_TRUE		4165348	0					
ANR	4165371	ExpressionStatement	result = 1	290:3:10819:10829	4165348	1	True				
ANR	4165372	AssignmentExpression	result = 1		4165348	0		=			
ANR	4165373	Identifier	result		4165348	0					
ANR	4165374	PrimaryExpression	1		4165348	1					
ANR	4165375	BreakStatement	break ;	291:3:10834:10839	4165348	2	True				
ANR	4165376	Label	case IS_LONG :	292:2:10843:10855	4165348	3	True				
ANR	4165377	Identifier	IS_LONG		4165348	0					
ANR	4165378	IfStatement	if ( Z_LVAL_P ( op ) )		4165348	4					
ANR	4165379	Condition	Z_LVAL_P ( op )	293:7:10864:10875	4165348	0	True				
ANR	4165380	CallExpression	Z_LVAL_P ( op )		4165348	0					
ANR	4165381	Callee	Z_LVAL_P		4165348	0					
ANR	4165382	Identifier	Z_LVAL_P		4165348	0					
ANR	4165383	ArgumentList	op		4165348	1					
ANR	4165384	Argument	op		4165348	0					
ANR	4165385	Identifier	op		4165348	0					
ANR	4165386	CompoundStatement		10:21:129:129	4165348	1					
ANR	4165387	ExpressionStatement	result = 1	294:4:10884:10894	4165348	0	True				
ANR	4165388	AssignmentExpression	result = 1		4165348	0		=			
ANR	4165389	Identifier	result		4165348	0					
ANR	4165390	PrimaryExpression	1		4165348	1					
ANR	4165391	BreakStatement	break ;	296:3:10904:10909	4165348	5	True				
ANR	4165392	Label	case IS_DOUBLE :	297:2:10913:10927	4165348	6	True				
ANR	4165393	Identifier	IS_DOUBLE		4165348	0					
ANR	4165394	IfStatement	if ( Z_DVAL_P ( op ) )		4165348	7					
ANR	4165395	Condition	Z_DVAL_P ( op )	298:7:10936:10947	4165348	0	True				
ANR	4165396	CallExpression	Z_DVAL_P ( op )		4165348	0					
ANR	4165397	Callee	Z_DVAL_P		4165348	0					
ANR	4165398	Identifier	Z_DVAL_P		4165348	0					
ANR	4165399	ArgumentList	op		4165348	1					
ANR	4165400	Argument	op		4165348	0					
ANR	4165401	Identifier	op		4165348	0					
ANR	4165402	CompoundStatement		15:21:201:201	4165348	1					
ANR	4165403	ExpressionStatement	result = 1	299:4:10956:10966	4165348	0	True				
ANR	4165404	AssignmentExpression	result = 1		4165348	0		=			
ANR	4165405	Identifier	result		4165348	0					
ANR	4165406	PrimaryExpression	1		4165348	1					
ANR	4165407	BreakStatement	break ;	301:3:10976:10981	4165348	8	True				
ANR	4165408	Label	case IS_STRING :	302:2:10985:10999	4165348	9	True				
ANR	4165409	Identifier	IS_STRING		4165348	0					
ANR	4165410	IfStatement	if ( Z_STRLEN_P ( op ) > 1 || ( Z_STRLEN_P ( op ) && Z_STRVAL_P ( op ) [ 0 ] != '0' ) )		4165348	10					
ANR	4165411	Condition	Z_STRLEN_P ( op ) > 1 || ( Z_STRLEN_P ( op ) && Z_STRVAL_P ( op ) [ 0 ] != '0' )	303:7:11008:11073	4165348	0	True				
ANR	4165412	OrExpression	Z_STRLEN_P ( op ) > 1 || ( Z_STRLEN_P ( op ) && Z_STRVAL_P ( op ) [ 0 ] != '0' )		4165348	0		||			
ANR	4165413	RelationalExpression	Z_STRLEN_P ( op ) > 1		4165348	0		>			
ANR	4165414	CallExpression	Z_STRLEN_P ( op )		4165348	0					
ANR	4165415	Callee	Z_STRLEN_P		4165348	0					
ANR	4165416	Identifier	Z_STRLEN_P		4165348	0					
ANR	4165417	ArgumentList	op		4165348	1					
ANR	4165418	Argument	op		4165348	0					
ANR	4165419	Identifier	op		4165348	0					
ANR	4165420	PrimaryExpression	1		4165348	1					
ANR	4165421	AndExpression	Z_STRLEN_P ( op ) && Z_STRVAL_P ( op ) [ 0 ] != '0'		4165348	1		&&			
ANR	4165422	CallExpression	Z_STRLEN_P ( op )		4165348	0					
ANR	4165423	Callee	Z_STRLEN_P		4165348	0					
ANR	4165424	Identifier	Z_STRLEN_P		4165348	0					
ANR	4165425	ArgumentList	op		4165348	1					
ANR	4165426	Argument	op		4165348	0					
ANR	4165427	Identifier	op		4165348	0					
ANR	4165428	EqualityExpression	Z_STRVAL_P ( op ) [ 0 ] != '0'		4165348	1		!=			
ANR	4165429	ArrayIndexing	Z_STRVAL_P ( op ) [ 0 ]		4165348	0					
ANR	4165430	CallExpression	Z_STRVAL_P ( op )		4165348	0					
ANR	4165431	Callee	Z_STRVAL_P		4165348	0					
ANR	4165432	Identifier	Z_STRVAL_P		4165348	0					
ANR	4165433	ArgumentList	op		4165348	1					
ANR	4165434	Argument	op		4165348	0					
ANR	4165435	Identifier	op		4165348	0					
ANR	4165436	PrimaryExpression	0		4165348	1					
ANR	4165437	PrimaryExpression	'0'		4165348	1					
ANR	4165438	CompoundStatement		20:75:327:327	4165348	1					
ANR	4165439	ExpressionStatement	result = 1	304:4:11082:11092	4165348	0	True				
ANR	4165440	AssignmentExpression	result = 1		4165348	0		=			
ANR	4165441	Identifier	result		4165348	0					
ANR	4165442	PrimaryExpression	1		4165348	1					
ANR	4165443	BreakStatement	break ;	306:3:11102:11107	4165348	11	True				
ANR	4165444	Label	case IS_ARRAY :	307:2:11111:11124	4165348	12	True				
ANR	4165445	Identifier	IS_ARRAY		4165348	0					
ANR	4165446	IfStatement	if ( zend_hash_num_elements ( Z_ARRVAL_P ( op ) ) )		4165348	13					
ANR	4165447	Condition	zend_hash_num_elements ( Z_ARRVAL_P ( op ) )	308:7:11133:11170	4165348	0	True				
ANR	4165448	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( op ) )		4165348	0					
ANR	4165449	Callee	zend_hash_num_elements		4165348	0					
ANR	4165450	Identifier	zend_hash_num_elements		4165348	0					
ANR	4165451	ArgumentList	Z_ARRVAL_P ( op )		4165348	1					
ANR	4165452	Argument	Z_ARRVAL_P ( op )		4165348	0					
ANR	4165453	CallExpression	Z_ARRVAL_P ( op )		4165348	0					
ANR	4165454	Callee	Z_ARRVAL_P		4165348	0					
ANR	4165455	Identifier	Z_ARRVAL_P		4165348	0					
ANR	4165456	ArgumentList	op		4165348	1					
ANR	4165457	Argument	op		4165348	0					
ANR	4165458	Identifier	op		4165348	0					
ANR	4165459	CompoundStatement		25:47:424:424	4165348	1					
ANR	4165460	ExpressionStatement	result = 1	309:4:11179:11189	4165348	0	True				
ANR	4165461	AssignmentExpression	result = 1		4165348	0		=			
ANR	4165462	Identifier	result		4165348	0					
ANR	4165463	PrimaryExpression	1		4165348	1					
ANR	4165464	BreakStatement	break ;	311:3:11199:11204	4165348	14	True				
ANR	4165465	Label	case IS_OBJECT :	312:2:11208:11222	4165348	15	True				
ANR	4165466	Identifier	IS_OBJECT		4165348	0					
ANR	4165467	ExpressionStatement	result = zend_object_is_true ( op )	313:3:11227:11259	4165348	16	True				
ANR	4165468	AssignmentExpression	result = zend_object_is_true ( op )		4165348	0		=			
ANR	4165469	Identifier	result		4165348	0					
ANR	4165470	CallExpression	zend_object_is_true ( op )		4165348	1					
ANR	4165471	Callee	zend_object_is_true		4165348	0					
ANR	4165472	Identifier	zend_object_is_true		4165348	0					
ANR	4165473	ArgumentList	op		4165348	1					
ANR	4165474	Argument	op		4165348	0					
ANR	4165475	Identifier	op		4165348	0					
ANR	4165476	BreakStatement	break ;	314:3:11264:11269	4165348	17	True				
ANR	4165477	Label	case IS_RESOURCE :	315:2:11273:11289	4165348	18	True				
ANR	4165478	Identifier	IS_RESOURCE		4165348	0					
ANR	4165479	IfStatement	if ( EXPECTED ( Z_RES_HANDLE_P ( op ) ) )		4165348	19					
ANR	4165480	Condition	EXPECTED ( Z_RES_HANDLE_P ( op ) )	316:7:11298:11325	4165348	0	True				
ANR	4165481	CallExpression	EXPECTED ( Z_RES_HANDLE_P ( op ) )		4165348	0					
ANR	4165482	Callee	EXPECTED		4165348	0					
ANR	4165483	Identifier	EXPECTED		4165348	0					
ANR	4165484	ArgumentList	Z_RES_HANDLE_P ( op )		4165348	1					
ANR	4165485	Argument	Z_RES_HANDLE_P ( op )		4165348	0					
ANR	4165486	CallExpression	Z_RES_HANDLE_P ( op )		4165348	0					
ANR	4165487	Callee	Z_RES_HANDLE_P		4165348	0					
ANR	4165488	Identifier	Z_RES_HANDLE_P		4165348	0					
ANR	4165489	ArgumentList	op		4165348	1					
ANR	4165490	Argument	op		4165348	0					
ANR	4165491	Identifier	op		4165348	0					
ANR	4165492	CompoundStatement		33:37:579:579	4165348	1					
ANR	4165493	ExpressionStatement	result = 1	317:4:11334:11344	4165348	0	True				
ANR	4165494	AssignmentExpression	result = 1		4165348	0		=			
ANR	4165495	Identifier	result		4165348	0					
ANR	4165496	PrimaryExpression	1		4165348	1					
ANR	4165497	BreakStatement	break ;	319:3:11354:11359	4165348	20	True				
ANR	4165498	Label	case IS_REFERENCE :	320:2:11363:11380	4165348	21	True				
ANR	4165499	Identifier	IS_REFERENCE		4165348	0					
ANR	4165500	ExpressionStatement	op = Z_REFVAL_P ( op )	321:3:11385:11404	4165348	22	True				
ANR	4165501	AssignmentExpression	op = Z_REFVAL_P ( op )		4165348	0		=			
ANR	4165502	Identifier	op		4165348	0					
ANR	4165503	CallExpression	Z_REFVAL_P ( op )		4165348	1					
ANR	4165504	Callee	Z_REFVAL_P		4165348	0					
ANR	4165505	Identifier	Z_REFVAL_P		4165348	0					
ANR	4165506	ArgumentList	op		4165348	1					
ANR	4165507	Argument	op		4165348	0					
ANR	4165508	Identifier	op		4165348	0					
ANR	4165509	GotoStatement	goto again ;	322:3:11409:11419	4165348	23	True				
ANR	4165510	Identifier	again		4165348	0					
ANR	4165511	BreakStatement	break ;	323:3:11424:11429	4165348	24	True				
ANR	4165512	Label	default :	324:2:11433:11440	4165348	25	True				
ANR	4165513	Identifier	default		4165348	0					
ANR	4165514	BreakStatement	break ;	325:3:11445:11450	4165348	26	True				
ANR	4165515	ReturnStatement	return result ;	327:1:11456:11469	4165348	3	True				
ANR	4165516	Identifier	result		4165348	0					
ANR	4165517	ReturnType	static zend_always_inline int		4165348	1					
ANR	4165518	Identifier	i_zend_is_true		4165348	2					
ANR	4165519	ParameterList	zval * op		4165348	3					
ANR	4165520	Parameter	zval * op	283:45:10738:10745	4165348	0	True				
ANR	4165521	ParameterType	zval *		4165348	0					
ANR	4165522	Identifier	op		4165348	1					
ANR	4165523	CFGEntryNode	ENTRY		4165348		True				
ANR	4165524	CFGExitNode	EXIT		4165348		True				
ANR	4165525	Symbol	Z_RES_HANDLE_P		4165348						
ANR	4165526	Symbol	op		4165348						
ANR	4165527	Symbol	zend_hash_num_elements		4165348						
ANR	4165528	Symbol	Z_TYPE_P		4165348						
ANR	4165529	Symbol	Z_STRVAL_P		4165348						
ANR	4165530	Symbol	Z_DVAL_P		4165348						
ANR	4165531	Symbol	Z_LVAL_P		4165348						
ANR	4165532	Symbol	result		4165348						
ANR	4165533	Symbol	zend_object_is_true		4165348						
ANR	4165534	Symbol	Z_REFVAL_P		4165348						
ANR	4165535	Symbol	Z_STRLEN_P		4165348						
ANR	4165536	Symbol	* Z_STRVAL_P		4165348						
ANR	4165537	Symbol	Z_ARRVAL_P		4165348						
ANR	4165538	Symbol	EXPECTED		4165348						
ANR	4165539	DeclStmt									
ANR	4165540	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	compare_function
ANR	4165541	DeclStmt									
ANR	4165542	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	numeric_compare_function
ANR	4165543	DeclStmt									
ANR	4165544	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 , zend_bool case_insensitive )"	string_compare_function_ex
ANR	4165545	DeclStmt									
ANR	4165546	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	string_compare_function
ANR	4165547	DeclStmt									
ANR	4165548	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	string_case_compare_function
ANR	4165549	DeclStmt									
ANR	4165550	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	string_locale_compare_function
ANR	4165551	DeclStmt									
ANR	4165552	Decl							ZEND_API void ZEND_FASTCALL	"ZEND_API void ZEND_FASTCALL ( char * str , size_t length )"	zend_str_tolower
ANR	4165553	DeclStmt									
ANR	4165554	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( char * dest , const char * source , size_t length )"	zend_str_tolower_copy
ANR	4165555	DeclStmt									
ANR	4165556	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( const char * source , size_t length )"	zend_str_tolower_dup
ANR	4165557	DeclStmt									
ANR	4165558	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( const char * source , size_t length )"	zend_str_tolower_dup_ex
ANR	4165559	DeclStmt									
ANR	4165560	Decl							ZEND_FASTCALL	ZEND_FASTCALL ( zend_string * str )	zend_string_tolower
ANR	4165561	DeclStmt									
ANR	4165562	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * s1 , zval * s2 )"	zend_binary_zval_strcmp
ANR	4165563	DeclStmt									
ANR	4165564	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * s1 , zval * s2 , zval * s3 )"	zend_binary_zval_strncmp
ANR	4165565	DeclStmt									
ANR	4165566	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * s1 , zval * s2 )"	zend_binary_zval_strcasecmp
ANR	4165567	DeclStmt									
ANR	4165568	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * s1 , zval * s2 , zval * s3 )"	zend_binary_zval_strncasecmp
ANR	4165569	DeclStmt									
ANR	4165570	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 )"	zend_binary_strcmp
ANR	4165571	DeclStmt									
ANR	4165572	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 , size_t length )"	zend_binary_strncmp
ANR	4165573	DeclStmt									
ANR	4165574	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 )"	zend_binary_strcasecmp
ANR	4165575	DeclStmt									
ANR	4165576	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 , size_t length )"	zend_binary_strncasecmp
ANR	4165577	DeclStmt									
ANR	4165578	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 )"	zend_binary_strcasecmp_l
ANR	4165579	DeclStmt									
ANR	4165580	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 , size_t length )"	zend_binary_strncasecmp_l
ANR	4165581	DeclStmt									
ANR	4165582	Decl							ZEND_API zend_long ZEND_FASTCALL	"ZEND_API zend_long ZEND_FASTCALL ( zend_string * s1 , zend_string * s2 )"	zendi_smart_strcmp
ANR	4165583	DeclStmt									
ANR	4165584	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( HashTable * ht1 , HashTable * ht2 )"	zend_compare_symbol_tables
ANR	4165585	DeclStmt									
ANR	4165586	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * a1 , zval * a2 )"	zend_compare_arrays
ANR	4165587	DeclStmt									
ANR	4165588	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * o1 , zval * o2 )"	zend_compare_objects
ANR	4165589	DeclStmt									
ANR	4165590	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * str , int str_len )"	zend_atoi
ANR	4165591	DeclStmt									
ANR	4165592	Decl							ZEND_API zend_long ZEND_FASTCALL	"ZEND_API zend_long ZEND_FASTCALL ( const char * str , int str_len )"	zend_atol
ANR	4165593	DeclStmt									
ANR	4165594	Decl							convert_to_	convert_to_ ( pzv )	lower_type
ANR	4165595	DeclStmt									
ANR	4165596	Decl							ZEND_API void	ZEND_API void ( void )	zend_update_current_locale
ANR	4165597	Function	fast_long_increment_function	435:0:16175:16942							
ANR	4165598	FunctionDef	fast_long_increment_function (zval * op1)		4165597	0					
ANR	4165599	CompoundStatement		436:0:16246:16942	4165597	0					
ANR	4165600	Statement	__asm__	438:1:16292:16298	4165597	0	True				
ANR	4165601	Statement	(	438:8:16299:16299	4165597	1	True				
ANR	4165602	Statement	"""incl (%0)\\n\\t"""	439:2:16303:16317	4165597	2	True				
ANR	4165603	Statement	"""jno  0f\\n\\t"""	440:2:16321:16333	4165597	3	True				
ANR	4165604	Statement	"""movl $0x0, (%0)\\n\\t"""	441:2:16337:16357	4165597	4	True				
ANR	4165605	Statement	"""movl $0x41e00000, 0x4(%0)\\n\\t"""	442:2:16361:16391	4165597	5	True				
ANR	4165606	Statement	"""movl %1, %c2(%0)\\n"""	443:2:16395:16414	4165597	6	True				
ANR	4165607	Statement	"""0:"""	444:2:16418:16421	4165597	7	True				
ANR	4165608	Statement	:	445:2:16425:16425	4165597	8	True				
ANR	4165609	Statement	:	446:2:16429:16429	4165597	9	True				
ANR	4165610	Statement	"""r"""	446:4:16431:16433	4165597	10	True				
ANR	4165611	Statement	(	446:7:16434:16434	4165597	11	True				
ANR	4165612	Statement	&	446:8:16435:16435	4165597	12	True				
ANR	4165613	Statement	op1	446:9:16436:16438	4165597	13	True				
ANR	4165614	Statement	->	446:12:16439:16440	4165597	14	True				
ANR	4165615	Statement	value	446:14:16441:16445	4165597	15	True				
ANR	4165616	Statement	)	446:19:16446:16446	4165597	16	True				
ANR	4165617	Statement	","	446:20:16447:16447	4165597	17	True				
ANR	4165618	Statement	"""n"""	447:4:16453:16455	4165597	18	True				
ANR	4165619	Statement	(	447:7:16456:16456	4165597	19	True				
ANR	4165620	Statement	IS_DOUBLE	447:8:16457:16465	4165597	20	True				
ANR	4165621	Statement	)	447:17:16466:16466	4165597	21	True				
ANR	4165622	Statement	","	447:18:16467:16467	4165597	22	True				
ANR	4165623	Statement	"""n"""	448:4:16473:16475	4165597	23	True				
ANR	4165624	Statement	(	448:7:16476:16476	4165597	24	True				
ANR	4165625	Statement	ZVAL_OFFSETOF_TYPE	448:8:16477:16494	4165597	25	True				
ANR	4165626	Statement	)	448:26:16495:16495	4165597	26	True				
ANR	4165627	Statement	:	449:2:16499:16499	4165597	27	True				
ANR	4165628	Statement	"""cc"""	449:4:16501:16504	4165597	28	True				
ANR	4165629	Statement	)	449:8:16505:16505	4165597	29	True				
ANR	4165630	ExpressionStatement		449:9:16506:16506	4165597	30	True				
ANR	4165631	ReturnType	static zend_always_inline void		4165597	1					
ANR	4165632	Identifier	fast_long_increment_function		4165597	2					
ANR	4165633	ParameterList	zval * op1		4165597	3					
ANR	4165634	Parameter	zval * op1	435:60:16235:16243	4165597	0	True				
ANR	4165635	ParameterType	zval *		4165597	0					
ANR	4165636	Identifier	op1		4165597	1					
ANR	4165637	CFGEntryNode	ENTRY		4165597		True				
ANR	4165638	CFGExitNode	EXIT		4165597		True				
ANR	4165639	Symbol	op1		4165597						
ANR	4165640	Function	fast_long_decrement_function	473:0:16945:17724							
ANR	4165641	FunctionDef	fast_long_decrement_function (zval * op1)		4165640	0					
ANR	4165642	CompoundStatement		474:0:17016:17724	4165640	0					
ANR	4165643	Statement	__asm__	476:1:17062:17068	4165640	0	True				
ANR	4165644	Statement	(	476:8:17069:17069	4165640	1	True				
ANR	4165645	Statement	"""decl (%0)\\n\\t"""	477:2:17073:17087	4165640	2	True				
ANR	4165646	Statement	"""jno  0f\\n\\t"""	478:2:17091:17103	4165640	3	True				
ANR	4165647	Statement	"""movl $0x00200000, (%0)\\n\\t"""	479:2:17107:17134	4165640	4	True				
ANR	4165648	Statement	"""movl $0xc1e00000, 0x4(%0)\\n\\t"""	480:2:17138:17168	4165640	5	True				
ANR	4165649	Statement	"""movl %1,%c2(%0)\\n"""	481:2:17172:17190	4165640	6	True				
ANR	4165650	Statement	"""0:"""	482:2:17194:17197	4165640	7	True				
ANR	4165651	Statement	:	483:2:17201:17201	4165640	8	True				
ANR	4165652	Statement	:	484:2:17205:17205	4165640	9	True				
ANR	4165653	Statement	"""r"""	484:4:17207:17209	4165640	10	True				
ANR	4165654	Statement	(	484:7:17210:17210	4165640	11	True				
ANR	4165655	Statement	&	484:8:17211:17211	4165640	12	True				
ANR	4165656	Statement	op1	484:9:17212:17214	4165640	13	True				
ANR	4165657	Statement	->	484:12:17215:17216	4165640	14	True				
ANR	4165658	Statement	value	484:14:17217:17221	4165640	15	True				
ANR	4165659	Statement	)	484:19:17222:17222	4165640	16	True				
ANR	4165660	Statement	","	484:20:17223:17223	4165640	17	True				
ANR	4165661	Statement	"""n"""	485:4:17229:17231	4165640	18	True				
ANR	4165662	Statement	(	485:7:17232:17232	4165640	19	True				
ANR	4165663	Statement	IS_DOUBLE	485:8:17233:17241	4165640	20	True				
ANR	4165664	Statement	)	485:17:17242:17242	4165640	21	True				
ANR	4165665	Statement	","	485:18:17243:17243	4165640	22	True				
ANR	4165666	Statement	"""n"""	486:4:17249:17251	4165640	23	True				
ANR	4165667	Statement	(	486:7:17252:17252	4165640	24	True				
ANR	4165668	Statement	ZVAL_OFFSETOF_TYPE	486:8:17253:17270	4165640	25	True				
ANR	4165669	Statement	)	486:26:17271:17271	4165640	26	True				
ANR	4165670	Statement	:	487:2:17275:17275	4165640	27	True				
ANR	4165671	Statement	"""cc"""	487:4:17277:17280	4165640	28	True				
ANR	4165672	Statement	)	487:8:17281:17281	4165640	29	True				
ANR	4165673	ExpressionStatement		487:9:17282:17282	4165640	30	True				
ANR	4165674	ReturnType	static zend_always_inline void		4165640	1					
ANR	4165675	Identifier	fast_long_decrement_function		4165640	2					
ANR	4165676	ParameterList	zval * op1		4165640	3					
ANR	4165677	Parameter	zval * op1	473:60:17005:17013	4165640	0	True				
ANR	4165678	ParameterType	zval *		4165640	0					
ANR	4165679	Identifier	op1		4165640	1					
ANR	4165680	CFGEntryNode	ENTRY		4165640		True				
ANR	4165681	CFGExitNode	EXIT		4165640		True				
ANR	4165682	Symbol	op1		4165640						
ANR	4165683	Function	fast_long_add_function	511:0:17727:19311							
ANR	4165684	FunctionDef	"fast_long_add_function (zval * result , zval * op1 , zval * op2)"		4165683	0					
ANR	4165685	CompoundStatement		512:0:17817:19311	4165683	0					
ANR	4165686	Statement	__asm__	514:1:17906:17912	4165683	0	True				
ANR	4165687	Statement	(	514:8:17913:17913	4165683	1	True				
ANR	4165688	Statement	"""movl\\t(%1), %%eax\\n\\t"""	515:2:17917:17938	4165683	2	True				
ANR	4165689	Statement	"""addl   (%2), %%eax\\n\\t"""	516:2:17942:17965	4165683	3	True				
ANR	4165690	Statement	"""jo     0f\\n\\t"""	517:2:17969:17983	4165683	4	True				
ANR	4165691	Statement	"""movl   %%eax, (%0)\\n\\t"""	518:2:17987:18010	4165683	5	True				
ANR	4165692	Statement	"""movl   %3, %c5(%0)\\n\\t"""	519:2:18014:18037	4165683	6	True				
ANR	4165693	Statement	"""jmp    1f\\n"""	520:2:18041:18053	4165683	7	True				
ANR	4165694	Statement	"""0:\\n\\t"""	521:2:18057:18064	4165683	8	True				
ANR	4165695	Statement	"""fildl\\t(%1)\\n\\t"""	522:2:18068:18083	4165683	9	True				
ANR	4165696	Statement	"""fildl\\t(%2)\\n\\t"""	523:2:18087:18102	4165683	10	True				
ANR	4165697	Statement	"""faddp\\t%%st, %%st(1)\\n\\t"""	524:2:18106:18130	4165683	11	True				
ANR	4165698	Statement	"""movl   %4, %c5(%0)\\n\\t"""	525:2:18134:18157	4165683	12	True				
ANR	4165699	Statement	"""fstpl\\t(%0)\\n"""	526:2:18161:18174	4165683	13	True				
ANR	4165700	Statement	"""1:"""	527:2:18178:18181	4165683	14	True				
ANR	4165701	Statement	:	528:2:18185:18185	4165683	15	True				
ANR	4165702	Statement	:	529:2:18189:18189	4165683	16	True				
ANR	4165703	Statement	"""r"""	529:4:18191:18193	4165683	17	True				
ANR	4165704	Statement	(	529:7:18194:18194	4165683	18	True				
ANR	4165705	Statement	&	529:8:18195:18195	4165683	19	True				
ANR	4165706	Statement	result	529:9:18196:18201	4165683	20	True				
ANR	4165707	Statement	->	529:15:18202:18203	4165683	21	True				
ANR	4165708	Statement	value	529:17:18204:18208	4165683	22	True				
ANR	4165709	Statement	)	529:22:18209:18209	4165683	23	True				
ANR	4165710	Statement	","	529:23:18210:18210	4165683	24	True				
ANR	4165711	Statement	"""r"""	530:4:18216:18218	4165683	25	True				
ANR	4165712	Statement	(	530:7:18219:18219	4165683	26	True				
ANR	4165713	Statement	&	530:8:18220:18220	4165683	27	True				
ANR	4165714	Statement	op1	530:9:18221:18223	4165683	28	True				
ANR	4165715	Statement	->	530:12:18224:18225	4165683	29	True				
ANR	4165716	Statement	value	530:14:18226:18230	4165683	30	True				
ANR	4165717	Statement	)	530:19:18231:18231	4165683	31	True				
ANR	4165718	Statement	","	530:20:18232:18232	4165683	32	True				
ANR	4165719	Statement	"""r"""	531:4:18238:18240	4165683	33	True				
ANR	4165720	Statement	(	531:7:18241:18241	4165683	34	True				
ANR	4165721	Statement	&	531:8:18242:18242	4165683	35	True				
ANR	4165722	Statement	op2	531:9:18243:18245	4165683	36	True				
ANR	4165723	Statement	->	531:12:18246:18247	4165683	37	True				
ANR	4165724	Statement	value	531:14:18248:18252	4165683	38	True				
ANR	4165725	Statement	)	531:19:18253:18253	4165683	39	True				
ANR	4165726	Statement	","	531:20:18254:18254	4165683	40	True				
ANR	4165727	Statement	"""n"""	532:4:18260:18262	4165683	41	True				
ANR	4165728	Statement	(	532:7:18263:18263	4165683	42	True				
ANR	4165729	Statement	IS_LONG	532:8:18264:18270	4165683	43	True				
ANR	4165730	Statement	)	532:15:18271:18271	4165683	44	True				
ANR	4165731	Statement	","	532:16:18272:18272	4165683	45	True				
ANR	4165732	Statement	"""n"""	533:4:18278:18280	4165683	46	True				
ANR	4165733	Statement	(	533:7:18281:18281	4165683	47	True				
ANR	4165734	Statement	IS_DOUBLE	533:8:18282:18290	4165683	48	True				
ANR	4165735	Statement	)	533:17:18291:18291	4165683	49	True				
ANR	4165736	Statement	","	533:18:18292:18292	4165683	50	True				
ANR	4165737	Statement	"""n"""	534:4:18298:18300	4165683	51	True				
ANR	4165738	Statement	(	534:7:18301:18301	4165683	52	True				
ANR	4165739	Statement	ZVAL_OFFSETOF_TYPE	534:8:18302:18319	4165683	53	True				
ANR	4165740	Statement	)	534:26:18320:18320	4165683	54	True				
ANR	4165741	Statement	:	535:2:18324:18324	4165683	55	True				
ANR	4165742	Statement	"""eax"""	535:4:18326:18330	4165683	56	True				
ANR	4165743	Statement	","	535:9:18331:18331	4165683	57	True				
ANR	4165744	Statement	"""cc"""	535:10:18332:18335	4165683	58	True				
ANR	4165745	Statement	)	535:14:18336:18336	4165683	59	True				
ANR	4165746	ExpressionStatement		535:15:18337:18337	4165683	60	True				
ANR	4165747	ReturnType	static zend_always_inline void		4165683	1					
ANR	4165748	Identifier	fast_long_add_function		4165683	2					
ANR	4165749	ParameterList	"zval * result , zval * op1 , zval * op2"		4165683	3					
ANR	4165750	Parameter	zval * result	511:54:17781:17792	4165683	0	True				
ANR	4165751	ParameterType	zval *		4165683	0					
ANR	4165752	Identifier	result		4165683	1					
ANR	4165753	Parameter	zval * op1	511:68:17795:17803	4165683	1	True				
ANR	4165754	ParameterType	zval *		4165683	0					
ANR	4165755	Identifier	op1		4165683	1					
ANR	4165756	Parameter	zval * op2	511:79:17806:17814	4165683	2	True				
ANR	4165757	ParameterType	zval *		4165683	0					
ANR	4165758	Identifier	op2		4165683	1					
ANR	4165759	CFGEntryNode	ENTRY		4165683		True				
ANR	4165760	CFGExitNode	EXIT		4165683		True				
ANR	4165761	Symbol	result		4165683						
ANR	4165762	Symbol	op2		4165683						
ANR	4165763	Symbol	op1		4165683						
ANR	4165764	Function	fast_add_function	575:0:19314:20046							
ANR	4165765	FunctionDef	"fast_add_function (zval * result , zval * op1 , zval * op2)"		4165764	0					
ANR	4165766	CompoundStatement		576:0:19398:20046	4165764	0					
ANR	4165767	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG ) )		4165764	0					
ANR	4165768	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )	577:5:19405:19438	4165764	0	True				
ANR	4165769	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )		4165764	0					
ANR	4165770	Callee	EXPECTED		4165764	0					
ANR	4165771	Identifier	EXPECTED		4165764	0					
ANR	4165772	ArgumentList	Z_TYPE_P ( op1 ) == IS_LONG		4165764	1					
ANR	4165773	Argument	Z_TYPE_P ( op1 ) == IS_LONG		4165764	0					
ANR	4165774	EqualityExpression	Z_TYPE_P ( op1 ) == IS_LONG		4165764	0		==			
ANR	4165775	CallExpression	Z_TYPE_P ( op1 )		4165764	0					
ANR	4165776	Callee	Z_TYPE_P		4165764	0					
ANR	4165777	Identifier	Z_TYPE_P		4165764	0					
ANR	4165778	ArgumentList	op1		4165764	1					
ANR	4165779	Argument	op1		4165764	0					
ANR	4165780	Identifier	op1		4165764	0					
ANR	4165781	Identifier	IS_LONG		4165764	1					
ANR	4165782	CompoundStatement		2:41:42:42	4165764	1					
ANR	4165783	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		4165764	0					
ANR	4165784	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	578:6:19449:19482	4165764	0	True				
ANR	4165785	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		4165764	0					
ANR	4165786	Callee	EXPECTED		4165764	0					
ANR	4165787	Identifier	EXPECTED		4165764	0					
ANR	4165788	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		4165764	1					
ANR	4165789	Argument	Z_TYPE_P ( op2 ) == IS_LONG		4165764	0					
ANR	4165790	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		4165764	0		==			
ANR	4165791	CallExpression	Z_TYPE_P ( op2 )		4165764	0					
ANR	4165792	Callee	Z_TYPE_P		4165764	0					
ANR	4165793	Identifier	Z_TYPE_P		4165764	0					
ANR	4165794	ArgumentList	op2		4165764	1					
ANR	4165795	Argument	op2		4165764	0					
ANR	4165796	Identifier	op2		4165764	0					
ANR	4165797	Identifier	IS_LONG		4165764	1					
ANR	4165798	CompoundStatement		3:42:86:86	4165764	1					
ANR	4165799	ExpressionStatement	"fast_long_add_function ( result , op1 , op2 )"	579:3:19490:19530	4165764	0	True				
ANR	4165800	CallExpression	"fast_long_add_function ( result , op1 , op2 )"		4165764	0					
ANR	4165801	Callee	fast_long_add_function		4165764	0					
ANR	4165802	Identifier	fast_long_add_function		4165764	0					
ANR	4165803	ArgumentList	result		4165764	1					
ANR	4165804	Argument	result		4165764	0					
ANR	4165805	Identifier	result		4165764	0					
ANR	4165806	Argument	op1		4165764	1					
ANR	4165807	Identifier	op1		4165764	0					
ANR	4165808	Argument	op2		4165764	2					
ANR	4165809	Identifier	op2		4165764	0					
ANR	4165810	ReturnStatement	return SUCCESS ;	580:3:19535:19549	4165764	1	True				
ANR	4165811	Identifier	SUCCESS		4165764	0					
ANR	4165812	ElseStatement	else		4165764	0					
ANR	4165813	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE ) )		4165764	0					
ANR	4165814	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )	581:13:19564:19599	4165764	0	True				
ANR	4165815	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )		4165764	0					
ANR	4165816	Callee	EXPECTED		4165764	0					
ANR	4165817	Identifier	EXPECTED		4165764	0					
ANR	4165818	ArgumentList	Z_TYPE_P ( op2 ) == IS_DOUBLE		4165764	1					
ANR	4165819	Argument	Z_TYPE_P ( op2 ) == IS_DOUBLE		4165764	0					
ANR	4165820	EqualityExpression	Z_TYPE_P ( op2 ) == IS_DOUBLE		4165764	0		==			
ANR	4165821	CallExpression	Z_TYPE_P ( op2 )		4165764	0					
ANR	4165822	Callee	Z_TYPE_P		4165764	0					
ANR	4165823	Identifier	Z_TYPE_P		4165764	0					
ANR	4165824	ArgumentList	op2		4165764	1					
ANR	4165825	Argument	op2		4165764	0					
ANR	4165826	Identifier	op2		4165764	0					
ANR	4165827	Identifier	IS_DOUBLE		4165764	1					
ANR	4165828	CompoundStatement		6:51:203:203	4165764	1					
ANR	4165829	ExpressionStatement	"ZVAL_DOUBLE ( result , ( ( double ) Z_LVAL_P ( op1 ) ) + Z_DVAL_P ( op2 ) )"	582:3:19607:19667	4165764	0	True				
ANR	4165830	CallExpression	"ZVAL_DOUBLE ( result , ( ( double ) Z_LVAL_P ( op1 ) ) + Z_DVAL_P ( op2 ) )"		4165764	0					
ANR	4165831	Callee	ZVAL_DOUBLE		4165764	0					
ANR	4165832	Identifier	ZVAL_DOUBLE		4165764	0					
ANR	4165833	ArgumentList	result		4165764	1					
ANR	4165834	Argument	result		4165764	0					
ANR	4165835	Identifier	result		4165764	0					
ANR	4165836	Argument	( ( double ) Z_LVAL_P ( op1 ) ) + Z_DVAL_P ( op2 )		4165764	1					
ANR	4165837	AdditiveExpression	( ( double ) Z_LVAL_P ( op1 ) ) + Z_DVAL_P ( op2 )		4165764	0		+			
ANR	4165838	CastExpression	( double ) Z_LVAL_P ( op1 )		4165764	0					
ANR	4165839	CastTarget	double		4165764	0					
ANR	4165840	CallExpression	Z_LVAL_P ( op1 )		4165764	1					
ANR	4165841	Callee	Z_LVAL_P		4165764	0					
ANR	4165842	Identifier	Z_LVAL_P		4165764	0					
ANR	4165843	ArgumentList	op1		4165764	1					
ANR	4165844	Argument	op1		4165764	0					
ANR	4165845	Identifier	op1		4165764	0					
ANR	4165846	CallExpression	Z_DVAL_P ( op2 )		4165764	1					
ANR	4165847	Callee	Z_DVAL_P		4165764	0					
ANR	4165848	Identifier	Z_DVAL_P		4165764	0					
ANR	4165849	ArgumentList	op2		4165764	1					
ANR	4165850	Argument	op2		4165764	0					
ANR	4165851	Identifier	op2		4165764	0					
ANR	4165852	ReturnStatement	return SUCCESS ;	583:3:19672:19686	4165764	1	True				
ANR	4165853	Identifier	SUCCESS		4165764	0					
ANR	4165854	ElseStatement	else		4165764	0					
ANR	4165855	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE ) )		4165764	0					
ANR	4165856	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE )	585:12:19704:19739	4165764	0	True				
ANR	4165857	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE )		4165764	0					
ANR	4165858	Callee	EXPECTED		4165764	0					
ANR	4165859	Identifier	EXPECTED		4165764	0					
ANR	4165860	ArgumentList	Z_TYPE_P ( op1 ) == IS_DOUBLE		4165764	1					
ANR	4165861	Argument	Z_TYPE_P ( op1 ) == IS_DOUBLE		4165764	0					
ANR	4165862	EqualityExpression	Z_TYPE_P ( op1 ) == IS_DOUBLE		4165764	0		==			
ANR	4165863	CallExpression	Z_TYPE_P ( op1 )		4165764	0					
ANR	4165864	Callee	Z_TYPE_P		4165764	0					
ANR	4165865	Identifier	Z_TYPE_P		4165764	0					
ANR	4165866	ArgumentList	op1		4165764	1					
ANR	4165867	Argument	op1		4165764	0					
ANR	4165868	Identifier	op1		4165764	0					
ANR	4165869	Identifier	IS_DOUBLE		4165764	1					
ANR	4165870	CompoundStatement		10:50:343:343	4165764	1					
ANR	4165871	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE ) )		4165764	0					
ANR	4165872	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )	586:6:19750:19785	4165764	0	True				
ANR	4165873	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )		4165764	0					
ANR	4165874	Callee	EXPECTED		4165764	0					
ANR	4165875	Identifier	EXPECTED		4165764	0					
ANR	4165876	ArgumentList	Z_TYPE_P ( op2 ) == IS_DOUBLE		4165764	1					
ANR	4165877	Argument	Z_TYPE_P ( op2 ) == IS_DOUBLE		4165764	0					
ANR	4165878	EqualityExpression	Z_TYPE_P ( op2 ) == IS_DOUBLE		4165764	0		==			
ANR	4165879	CallExpression	Z_TYPE_P ( op2 )		4165764	0					
ANR	4165880	Callee	Z_TYPE_P		4165764	0					
ANR	4165881	Identifier	Z_TYPE_P		4165764	0					
ANR	4165882	ArgumentList	op2		4165764	1					
ANR	4165883	Argument	op2		4165764	0					
ANR	4165884	Identifier	op2		4165764	0					
ANR	4165885	Identifier	IS_DOUBLE		4165764	1					
ANR	4165886	CompoundStatement		11:44:389:389	4165764	1					
ANR	4165887	ExpressionStatement	"ZVAL_DOUBLE ( result , Z_DVAL_P ( op1 ) + Z_DVAL_P ( op2 ) )"	587:3:19793:19843	4165764	0	True				
ANR	4165888	CallExpression	"ZVAL_DOUBLE ( result , Z_DVAL_P ( op1 ) + Z_DVAL_P ( op2 ) )"		4165764	0					
ANR	4165889	Callee	ZVAL_DOUBLE		4165764	0					
ANR	4165890	Identifier	ZVAL_DOUBLE		4165764	0					
ANR	4165891	ArgumentList	result		4165764	1					
ANR	4165892	Argument	result		4165764	0					
ANR	4165893	Identifier	result		4165764	0					
ANR	4165894	Argument	Z_DVAL_P ( op1 ) + Z_DVAL_P ( op2 )		4165764	1					
ANR	4165895	AdditiveExpression	Z_DVAL_P ( op1 ) + Z_DVAL_P ( op2 )		4165764	0		+			
ANR	4165896	CallExpression	Z_DVAL_P ( op1 )		4165764	0					
ANR	4165897	Callee	Z_DVAL_P		4165764	0					
ANR	4165898	Identifier	Z_DVAL_P		4165764	0					
ANR	4165899	ArgumentList	op1		4165764	1					
ANR	4165900	Argument	op1		4165764	0					
ANR	4165901	Identifier	op1		4165764	0					
ANR	4165902	CallExpression	Z_DVAL_P ( op2 )		4165764	1					
ANR	4165903	Callee	Z_DVAL_P		4165764	0					
ANR	4165904	Identifier	Z_DVAL_P		4165764	0					
ANR	4165905	ArgumentList	op2		4165764	1					
ANR	4165906	Argument	op2		4165764	0					
ANR	4165907	Identifier	op2		4165764	0					
ANR	4165908	ReturnStatement	return SUCCESS ;	588:3:19848:19862	4165764	1	True				
ANR	4165909	Identifier	SUCCESS		4165764	0					
ANR	4165910	ElseStatement	else		4165764	0					
ANR	4165911	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		4165764	0					
ANR	4165912	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	589:13:19877:19910	4165764	0	True				
ANR	4165913	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		4165764	0					
ANR	4165914	Callee	EXPECTED		4165764	0					
ANR	4165915	Identifier	EXPECTED		4165764	0					
ANR	4165916	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		4165764	1					
ANR	4165917	Argument	Z_TYPE_P ( op2 ) == IS_LONG		4165764	0					
ANR	4165918	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		4165764	0		==			
ANR	4165919	CallExpression	Z_TYPE_P ( op2 )		4165764	0					
ANR	4165920	Callee	Z_TYPE_P		4165764	0					
ANR	4165921	Identifier	Z_TYPE_P		4165764	0					
ANR	4165922	ArgumentList	op2		4165764	1					
ANR	4165923	Argument	op2		4165764	0					
ANR	4165924	Identifier	op2		4165764	0					
ANR	4165925	Identifier	IS_LONG		4165764	1					
ANR	4165926	CompoundStatement		14:49:514:514	4165764	1					
ANR	4165927	ExpressionStatement	"ZVAL_DOUBLE ( result , Z_DVAL_P ( op1 ) + ( ( double ) Z_LVAL_P ( op2 ) ) )"	590:3:19918:19978	4165764	0	True				
ANR	4165928	CallExpression	"ZVAL_DOUBLE ( result , Z_DVAL_P ( op1 ) + ( ( double ) Z_LVAL_P ( op2 ) ) )"		4165764	0					
ANR	4165929	Callee	ZVAL_DOUBLE		4165764	0					
ANR	4165930	Identifier	ZVAL_DOUBLE		4165764	0					
ANR	4165931	ArgumentList	result		4165764	1					
ANR	4165932	Argument	result		4165764	0					
ANR	4165933	Identifier	result		4165764	0					
ANR	4165934	Argument	Z_DVAL_P ( op1 ) + ( ( double ) Z_LVAL_P ( op2 ) )		4165764	1					
ANR	4165935	AdditiveExpression	Z_DVAL_P ( op1 ) + ( ( double ) Z_LVAL_P ( op2 ) )		4165764	0		+			
ANR	4165936	CallExpression	Z_DVAL_P ( op1 )		4165764	0					
ANR	4165937	Callee	Z_DVAL_P		4165764	0					
ANR	4165938	Identifier	Z_DVAL_P		4165764	0					
ANR	4165939	ArgumentList	op1		4165764	1					
ANR	4165940	Argument	op1		4165764	0					
ANR	4165941	Identifier	op1		4165764	0					
ANR	4165942	CastExpression	( double ) Z_LVAL_P ( op2 )		4165764	1					
ANR	4165943	CastTarget	double		4165764	0					
ANR	4165944	CallExpression	Z_LVAL_P ( op2 )		4165764	1					
ANR	4165945	Callee	Z_LVAL_P		4165764	0					
ANR	4165946	Identifier	Z_LVAL_P		4165764	0					
ANR	4165947	ArgumentList	op2		4165764	1					
ANR	4165948	Argument	op2		4165764	0					
ANR	4165949	Identifier	op2		4165764	0					
ANR	4165950	ReturnStatement	return SUCCESS ;	591:3:19983:19997	4165764	1	True				
ANR	4165951	Identifier	SUCCESS		4165764	0					
ANR	4165952	ReturnStatement	"return add_function ( result , op1 , op2 ) ;"	594:1:20007:20044	4165764	1	True				
ANR	4165953	CallExpression	"add_function ( result , op1 , op2 )"		4165764	0					
ANR	4165954	Callee	add_function		4165764	0					
ANR	4165955	Identifier	add_function		4165764	0					
ANR	4165956	ArgumentList	result		4165764	1					
ANR	4165957	Argument	result		4165764	0					
ANR	4165958	Identifier	result		4165764	0					
ANR	4165959	Argument	op1		4165764	1					
ANR	4165960	Identifier	op1		4165764	0					
ANR	4165961	Argument	op2		4165764	2					
ANR	4165962	Identifier	op2		4165764	0					
ANR	4165963	ReturnType	static zend_always_inline int		4165764	1					
ANR	4165964	Identifier	fast_add_function		4165764	2					
ANR	4165965	ParameterList	"zval * result , zval * op1 , zval * op2"		4165764	3					
ANR	4165966	Parameter	zval * result	575:48:19362:19373	4165764	0	True				
ANR	4165967	ParameterType	zval *		4165764	0					
ANR	4165968	Identifier	result		4165764	1					
ANR	4165969	Parameter	zval * op1	575:62:19376:19384	4165764	1	True				
ANR	4165970	ParameterType	zval *		4165764	0					
ANR	4165971	Identifier	op1		4165764	1					
ANR	4165972	Parameter	zval * op2	575:73:19387:19395	4165764	2	True				
ANR	4165973	ParameterType	zval *		4165764	0					
ANR	4165974	Identifier	op2		4165764	1					
ANR	4165975	CFGEntryNode	ENTRY		4165764		True				
ANR	4165976	CFGExitNode	EXIT		4165764		True				
ANR	4165977	Symbol	result		4165764						
ANR	4165978	Symbol	op2		4165764						
ANR	4165979	Symbol	op1		4165764						
ANR	4165980	Symbol	SUCCESS		4165764						
ANR	4165981	Symbol	IS_LONG		4165764						
ANR	4165982	Symbol	IS_DOUBLE		4165764						
ANR	4165983	Symbol	Z_TYPE_P		4165764						
ANR	4165984	Symbol	add_function		4165764						
ANR	4165985	Symbol	EXPECTED		4165764						
ANR	4165986	Symbol	Z_DVAL_P		4165764						
ANR	4165987	Symbol	Z_LVAL_P		4165764						
ANR	4165988	Function	fast_long_sub_function	597:0:20049:21772							
ANR	4165989	FunctionDef	"fast_long_sub_function (zval * result , zval * op1 , zval * op2)"		4165988	0					
ANR	4165990	CompoundStatement		598:0:20139:21772	4165988	0					
ANR	4165991	Statement	__asm__	600:1:20228:20234	4165988	0	True				
ANR	4165992	Statement	(	600:8:20235:20235	4165988	1	True				
ANR	4165993	Statement	"""movl\\t(%1), %%eax\\n\\t"""	601:2:20239:20260	4165988	2	True				
ANR	4165994	Statement	"""subl   (%2), %%eax\\n\\t"""	602:2:20264:20287	4165988	3	True				
ANR	4165995	Statement	"""jo     0f\\n\\t"""	603:2:20291:20305	4165988	4	True				
ANR	4165996	Statement	"""movl   %%eax, (%0)\\n\\t"""	604:2:20309:20332	4165988	5	True				
ANR	4165997	Statement	"""movl   %3, %c5(%0)\\n\\t"""	605:2:20336:20359	4165988	6	True				
ANR	4165998	Statement	"""jmp    1f\\n"""	606:2:20363:20375	4165988	7	True				
ANR	4165999	Statement	"""0:\\n\\t"""	607:2:20379:20386	4165988	8	True				
ANR	4166000	Statement	"""fildl\\t(%2)\\n\\t"""	608:2:20390:20405	4165988	9	True				
ANR	4166001	Statement	"""fildl\\t(%1)\\n\\t"""	609:2:20409:20424	4165988	10	True				
ANR	4166002	Statement	"""fsubp  %%st(1), %%st\\n\\t"""	611:2:20526:20551	4165988	11	True				
ANR	4166003	Statement	"""movl   %4, %c5(%0)\\n\\t"""	615:2:20618:20641	4165988	12	True				
ANR	4166004	Statement	"""fstpl\\t(%0)\\n"""	616:2:20645:20658	4165988	13	True				
ANR	4166005	Statement	"""1:"""	617:2:20662:20665	4165988	14	True				
ANR	4166006	Statement	:	618:2:20669:20669	4165988	15	True				
ANR	4166007	Statement	:	619:2:20673:20673	4165988	16	True				
ANR	4166008	Statement	"""r"""	619:4:20675:20677	4165988	17	True				
ANR	4166009	Statement	(	619:7:20678:20678	4165988	18	True				
ANR	4166010	Statement	&	619:8:20679:20679	4165988	19	True				
ANR	4166011	Statement	result	619:9:20680:20685	4165988	20	True				
ANR	4166012	Statement	->	619:15:20686:20687	4165988	21	True				
ANR	4166013	Statement	value	619:17:20688:20692	4165988	22	True				
ANR	4166014	Statement	)	619:22:20693:20693	4165988	23	True				
ANR	4166015	Statement	","	619:23:20694:20694	4165988	24	True				
ANR	4166016	Statement	"""r"""	620:4:20700:20702	4165988	25	True				
ANR	4166017	Statement	(	620:7:20703:20703	4165988	26	True				
ANR	4166018	Statement	&	620:8:20704:20704	4165988	27	True				
ANR	4166019	Statement	op1	620:9:20705:20707	4165988	28	True				
ANR	4166020	Statement	->	620:12:20708:20709	4165988	29	True				
ANR	4166021	Statement	value	620:14:20710:20714	4165988	30	True				
ANR	4166022	Statement	)	620:19:20715:20715	4165988	31	True				
ANR	4166023	Statement	","	620:20:20716:20716	4165988	32	True				
ANR	4166024	Statement	"""r"""	621:4:20722:20724	4165988	33	True				
ANR	4166025	Statement	(	621:7:20725:20725	4165988	34	True				
ANR	4166026	Statement	&	621:8:20726:20726	4165988	35	True				
ANR	4166027	Statement	op2	621:9:20727:20729	4165988	36	True				
ANR	4166028	Statement	->	621:12:20730:20731	4165988	37	True				
ANR	4166029	Statement	value	621:14:20732:20736	4165988	38	True				
ANR	4166030	Statement	)	621:19:20737:20737	4165988	39	True				
ANR	4166031	Statement	","	621:20:20738:20738	4165988	40	True				
ANR	4166032	Statement	"""n"""	622:4:20744:20746	4165988	41	True				
ANR	4166033	Statement	(	622:7:20747:20747	4165988	42	True				
ANR	4166034	Statement	IS_LONG	622:8:20748:20754	4165988	43	True				
ANR	4166035	Statement	)	622:15:20755:20755	4165988	44	True				
ANR	4166036	Statement	","	622:16:20756:20756	4165988	45	True				
ANR	4166037	Statement	"""n"""	623:4:20762:20764	4165988	46	True				
ANR	4166038	Statement	(	623:7:20765:20765	4165988	47	True				
ANR	4166039	Statement	IS_DOUBLE	623:8:20766:20774	4165988	48	True				
ANR	4166040	Statement	)	623:17:20775:20775	4165988	49	True				
ANR	4166041	Statement	","	623:18:20776:20776	4165988	50	True				
ANR	4166042	Statement	"""n"""	624:4:20782:20784	4165988	51	True				
ANR	4166043	Statement	(	624:7:20785:20785	4165988	52	True				
ANR	4166044	Statement	ZVAL_OFFSETOF_TYPE	624:8:20786:20803	4165988	53	True				
ANR	4166045	Statement	)	624:26:20804:20804	4165988	54	True				
ANR	4166046	Statement	:	625:2:20808:20808	4165988	55	True				
ANR	4166047	Statement	"""eax"""	625:4:20810:20814	4165988	56	True				
ANR	4166048	Statement	","	625:9:20815:20815	4165988	57	True				
ANR	4166049	Statement	"""cc"""	625:10:20816:20819	4165988	58	True				
ANR	4166050	Statement	)	625:14:20820:20820	4165988	59	True				
ANR	4166051	ExpressionStatement		625:15:20821:20821	4165988	60	True				
ANR	4166052	ReturnType	static zend_always_inline void		4165988	1					
ANR	4166053	Identifier	fast_long_sub_function		4165988	2					
ANR	4166054	ParameterList	"zval * result , zval * op1 , zval * op2"		4165988	3					
ANR	4166055	Parameter	zval * result	597:54:20103:20114	4165988	0	True				
ANR	4166056	ParameterType	zval *		4165988	0					
ANR	4166057	Identifier	result		4165988	1					
ANR	4166058	Parameter	zval * op1	597:68:20117:20125	4165988	1	True				
ANR	4166059	ParameterType	zval *		4165988	0					
ANR	4166060	Identifier	op1		4165988	1					
ANR	4166061	Parameter	zval * op2	597:79:20128:20136	4165988	2	True				
ANR	4166062	ParameterType	zval *		4165988	0					
ANR	4166063	Identifier	op2		4165988	1					
ANR	4166064	CFGEntryNode	ENTRY		4165988		True				
ANR	4166065	CFGExitNode	EXIT		4165988		True				
ANR	4166066	Symbol	result		4165988						
ANR	4166067	Symbol	op2		4165988						
ANR	4166068	Symbol	op1		4165988						
ANR	4166069	Function	fast_div_function	663:0:21775:21901							
ANR	4166070	FunctionDef	"fast_div_function (zval * result , zval * op1 , zval * op2)"		4166069	0					
ANR	4166071	CompoundStatement		664:0:21859:21901	4166069	0					
ANR	4166072	ReturnStatement	"return div_function ( result , op1 , op2 ) ;"	665:1:21862:21899	4166069	0	True				
ANR	4166073	CallExpression	"div_function ( result , op1 , op2 )"		4166069	0					
ANR	4166074	Callee	div_function		4166069	0					
ANR	4166075	Identifier	div_function		4166069	0					
ANR	4166076	ArgumentList	result		4166069	1					
ANR	4166077	Argument	result		4166069	0					
ANR	4166078	Identifier	result		4166069	0					
ANR	4166079	Argument	op1		4166069	1					
ANR	4166080	Identifier	op1		4166069	0					
ANR	4166081	Argument	op2		4166069	2					
ANR	4166082	Identifier	op2		4166069	0					
ANR	4166083	ReturnType	static zend_always_inline int		4166069	1					
ANR	4166084	Identifier	fast_div_function		4166069	2					
ANR	4166085	ParameterList	"zval * result , zval * op1 , zval * op2"		4166069	3					
ANR	4166086	Parameter	zval * result	663:48:21823:21834	4166069	0	True				
ANR	4166087	ParameterType	zval *		4166069	0					
ANR	4166088	Identifier	result		4166069	1					
ANR	4166089	Parameter	zval * op1	663:62:21837:21845	4166069	1	True				
ANR	4166090	ParameterType	zval *		4166069	0					
ANR	4166091	Identifier	op1		4166069	1					
ANR	4166092	Parameter	zval * op2	663:73:21848:21856	4166069	2	True				
ANR	4166093	ParameterType	zval *		4166069	0					
ANR	4166094	Identifier	op2		4166069	1					
ANR	4166095	CFGEntryNode	ENTRY		4166069		True				
ANR	4166096	CFGExitNode	EXIT		4166069		True				
ANR	4166097	Symbol	result		4166069						
ANR	4166098	Symbol	op2		4166069						
ANR	4166099	Symbol	op1		4166069						
ANR	4166100	Symbol	div_function		4166069						
ANR	4166101	Function	fast_equal_check_function	668:0:21904:23015							
ANR	4166102	FunctionDef	"fast_equal_check_function (zval * op1 , zval * op2)"		4166101	0					
ANR	4166103	CompoundStatement		669:0:21982:23015	4166101	0					
ANR	4166104	IdentifierDeclStatement	zval result ;	670:1:21985:21996	4166101	0	True				
ANR	4166105	IdentifierDecl	result		4166101	0					
ANR	4166106	IdentifierDeclType	zval		4166101	0					
ANR	4166107	Identifier	result		4166101	1					
ANR	4166108	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG ) )		4166101	1					
ANR	4166109	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )	671:5:22003:22036	4166101	0	True				
ANR	4166110	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )		4166101	0					
ANR	4166111	Callee	EXPECTED		4166101	0					
ANR	4166112	Identifier	EXPECTED		4166101	0					
ANR	4166113	ArgumentList	Z_TYPE_P ( op1 ) == IS_LONG		4166101	1					
ANR	4166114	Argument	Z_TYPE_P ( op1 ) == IS_LONG		4166101	0					
ANR	4166115	EqualityExpression	Z_TYPE_P ( op1 ) == IS_LONG		4166101	0		==			
ANR	4166116	CallExpression	Z_TYPE_P ( op1 )		4166101	0					
ANR	4166117	Callee	Z_TYPE_P		4166101	0					
ANR	4166118	Identifier	Z_TYPE_P		4166101	0					
ANR	4166119	ArgumentList	op1		4166101	1					
ANR	4166120	Argument	op1		4166101	0					
ANR	4166121	Identifier	op1		4166101	0					
ANR	4166122	Identifier	IS_LONG		4166101	1					
ANR	4166123	CompoundStatement		3:41:56:56	4166101	1					
ANR	4166124	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		4166101	0					
ANR	4166125	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	672:6:22047:22080	4166101	0	True				
ANR	4166126	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		4166101	0					
ANR	4166127	Callee	EXPECTED		4166101	0					
ANR	4166128	Identifier	EXPECTED		4166101	0					
ANR	4166129	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		4166101	1					
ANR	4166130	Argument	Z_TYPE_P ( op2 ) == IS_LONG		4166101	0					
ANR	4166131	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		4166101	0		==			
ANR	4166132	CallExpression	Z_TYPE_P ( op2 )		4166101	0					
ANR	4166133	Callee	Z_TYPE_P		4166101	0					
ANR	4166134	Identifier	Z_TYPE_P		4166101	0					
ANR	4166135	ArgumentList	op2		4166101	1					
ANR	4166136	Argument	op2		4166101	0					
ANR	4166137	Identifier	op2		4166101	0					
ANR	4166138	Identifier	IS_LONG		4166101	1					
ANR	4166139	CompoundStatement		4:42:100:100	4166101	1					
ANR	4166140	ReturnStatement	return Z_LVAL_P ( op1 ) == Z_LVAL_P ( op2 ) ;	673:3:22088:22125	4166101	0	True				
ANR	4166141	EqualityExpression	Z_LVAL_P ( op1 ) == Z_LVAL_P ( op2 )		4166101	0		==			
ANR	4166142	CallExpression	Z_LVAL_P ( op1 )		4166101	0					
ANR	4166143	Callee	Z_LVAL_P		4166101	0					
ANR	4166144	Identifier	Z_LVAL_P		4166101	0					
ANR	4166145	ArgumentList	op1		4166101	1					
ANR	4166146	Argument	op1		4166101	0					
ANR	4166147	Identifier	op1		4166101	0					
ANR	4166148	CallExpression	Z_LVAL_P ( op2 )		4166101	1					
ANR	4166149	Callee	Z_LVAL_P		4166101	0					
ANR	4166150	Identifier	Z_LVAL_P		4166101	0					
ANR	4166151	ArgumentList	op2		4166101	1					
ANR	4166152	Argument	op2		4166101	0					
ANR	4166153	Identifier	op2		4166101	0					
ANR	4166154	ElseStatement	else		4166101	0					
ANR	4166155	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE ) )		4166101	0					
ANR	4166156	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )	674:13:22140:22175	4166101	0	True				
ANR	4166157	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )		4166101	0					
ANR	4166158	Callee	EXPECTED		4166101	0					
ANR	4166159	Identifier	EXPECTED		4166101	0					
ANR	4166160	ArgumentList	Z_TYPE_P ( op2 ) == IS_DOUBLE		4166101	1					
ANR	4166161	Argument	Z_TYPE_P ( op2 ) == IS_DOUBLE		4166101	0					
ANR	4166162	EqualityExpression	Z_TYPE_P ( op2 ) == IS_DOUBLE		4166101	0		==			
ANR	4166163	CallExpression	Z_TYPE_P ( op2 )		4166101	0					
ANR	4166164	Callee	Z_TYPE_P		4166101	0					
ANR	4166165	Identifier	Z_TYPE_P		4166101	0					
ANR	4166166	ArgumentList	op2		4166101	1					
ANR	4166167	Argument	op2		4166101	0					
ANR	4166168	Identifier	op2		4166101	0					
ANR	4166169	Identifier	IS_DOUBLE		4166101	1					
ANR	4166170	CompoundStatement		6:51:195:195	4166101	1					
ANR	4166171	ReturnStatement	return ( ( double ) Z_LVAL_P ( op1 ) ) == Z_DVAL_P ( op2 ) ;	675:3:22183:22230	4166101	0	True				
ANR	4166172	EqualityExpression	( ( double ) Z_LVAL_P ( op1 ) ) == Z_DVAL_P ( op2 )		4166101	0		==			
ANR	4166173	CastExpression	( double ) Z_LVAL_P ( op1 )		4166101	0					
ANR	4166174	CastTarget	double		4166101	0					
ANR	4166175	CallExpression	Z_LVAL_P ( op1 )		4166101	1					
ANR	4166176	Callee	Z_LVAL_P		4166101	0					
ANR	4166177	Identifier	Z_LVAL_P		4166101	0					
ANR	4166178	ArgumentList	op1		4166101	1					
ANR	4166179	Argument	op1		4166101	0					
ANR	4166180	Identifier	op1		4166101	0					
ANR	4166181	CallExpression	Z_DVAL_P ( op2 )		4166101	1					
ANR	4166182	Callee	Z_DVAL_P		4166101	0					
ANR	4166183	Identifier	Z_DVAL_P		4166101	0					
ANR	4166184	ArgumentList	op2		4166101	1					
ANR	4166185	Argument	op2		4166101	0					
ANR	4166186	Identifier	op2		4166101	0					
ANR	4166187	ElseStatement	else		4166101	0					
ANR	4166188	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE ) )		4166101	0					
ANR	4166189	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE )	677:12:22248:22283	4166101	0	True				
ANR	4166190	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE )		4166101	0					
ANR	4166191	Callee	EXPECTED		4166101	0					
ANR	4166192	Identifier	EXPECTED		4166101	0					
ANR	4166193	ArgumentList	Z_TYPE_P ( op1 ) == IS_DOUBLE		4166101	1					
ANR	4166194	Argument	Z_TYPE_P ( op1 ) == IS_DOUBLE		4166101	0					
ANR	4166195	EqualityExpression	Z_TYPE_P ( op1 ) == IS_DOUBLE		4166101	0		==			
ANR	4166196	CallExpression	Z_TYPE_P ( op1 )		4166101	0					
ANR	4166197	Callee	Z_TYPE_P		4166101	0					
ANR	4166198	Identifier	Z_TYPE_P		4166101	0					
ANR	4166199	ArgumentList	op1		4166101	1					
ANR	4166200	Argument	op1		4166101	0					
ANR	4166201	Identifier	op1		4166101	0					
ANR	4166202	Identifier	IS_DOUBLE		4166101	1					
ANR	4166203	CompoundStatement		9:50:303:303	4166101	1					
ANR	4166204	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE ) )		4166101	0					
ANR	4166205	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )	678:6:22294:22329	4166101	0	True				
ANR	4166206	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )		4166101	0					
ANR	4166207	Callee	EXPECTED		4166101	0					
ANR	4166208	Identifier	EXPECTED		4166101	0					
ANR	4166209	ArgumentList	Z_TYPE_P ( op2 ) == IS_DOUBLE		4166101	1					
ANR	4166210	Argument	Z_TYPE_P ( op2 ) == IS_DOUBLE		4166101	0					
ANR	4166211	EqualityExpression	Z_TYPE_P ( op2 ) == IS_DOUBLE		4166101	0		==			
ANR	4166212	CallExpression	Z_TYPE_P ( op2 )		4166101	0					
ANR	4166213	Callee	Z_TYPE_P		4166101	0					
ANR	4166214	Identifier	Z_TYPE_P		4166101	0					
ANR	4166215	ArgumentList	op2		4166101	1					
ANR	4166216	Argument	op2		4166101	0					
ANR	4166217	Identifier	op2		4166101	0					
ANR	4166218	Identifier	IS_DOUBLE		4166101	1					
ANR	4166219	CompoundStatement		10:44:349:349	4166101	1					
ANR	4166220	ReturnStatement	return Z_DVAL_P ( op1 ) == Z_DVAL_P ( op2 ) ;	679:3:22337:22374	4166101	0	True				
ANR	4166221	EqualityExpression	Z_DVAL_P ( op1 ) == Z_DVAL_P ( op2 )		4166101	0		==			
ANR	4166222	CallExpression	Z_DVAL_P ( op1 )		4166101	0					
ANR	4166223	Callee	Z_DVAL_P		4166101	0					
ANR	4166224	Identifier	Z_DVAL_P		4166101	0					
ANR	4166225	ArgumentList	op1		4166101	1					
ANR	4166226	Argument	op1		4166101	0					
ANR	4166227	Identifier	op1		4166101	0					
ANR	4166228	CallExpression	Z_DVAL_P ( op2 )		4166101	1					
ANR	4166229	Callee	Z_DVAL_P		4166101	0					
ANR	4166230	Identifier	Z_DVAL_P		4166101	0					
ANR	4166231	ArgumentList	op2		4166101	1					
ANR	4166232	Argument	op2		4166101	0					
ANR	4166233	Identifier	op2		4166101	0					
ANR	4166234	ElseStatement	else		4166101	0					
ANR	4166235	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		4166101	0					
ANR	4166236	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	680:13:22389:22422	4166101	0	True				
ANR	4166237	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		4166101	0					
ANR	4166238	Callee	EXPECTED		4166101	0					
ANR	4166239	Identifier	EXPECTED		4166101	0					
ANR	4166240	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		4166101	1					
ANR	4166241	Argument	Z_TYPE_P ( op2 ) == IS_LONG		4166101	0					
ANR	4166242	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		4166101	0		==			
ANR	4166243	CallExpression	Z_TYPE_P ( op2 )		4166101	0					
ANR	4166244	Callee	Z_TYPE_P		4166101	0					
ANR	4166245	Identifier	Z_TYPE_P		4166101	0					
ANR	4166246	ArgumentList	op2		4166101	1					
ANR	4166247	Argument	op2		4166101	0					
ANR	4166248	Identifier	op2		4166101	0					
ANR	4166249	Identifier	IS_LONG		4166101	1					
ANR	4166250	CompoundStatement		12:49:442:442	4166101	1					
ANR	4166251	ReturnStatement	return Z_DVAL_P ( op1 ) == ( ( double ) Z_LVAL_P ( op2 ) ) ;	681:3:22430:22477	4166101	0	True				
ANR	4166252	EqualityExpression	Z_DVAL_P ( op1 ) == ( ( double ) Z_LVAL_P ( op2 ) )		4166101	0		==			
ANR	4166253	CallExpression	Z_DVAL_P ( op1 )		4166101	0					
ANR	4166254	Callee	Z_DVAL_P		4166101	0					
ANR	4166255	Identifier	Z_DVAL_P		4166101	0					
ANR	4166256	ArgumentList	op1		4166101	1					
ANR	4166257	Argument	op1		4166101	0					
ANR	4166258	Identifier	op1		4166101	0					
ANR	4166259	CastExpression	( double ) Z_LVAL_P ( op2 )		4166101	1					
ANR	4166260	CastTarget	double		4166101	0					
ANR	4166261	CallExpression	Z_LVAL_P ( op2 )		4166101	1					
ANR	4166262	Callee	Z_LVAL_P		4166101	0					
ANR	4166263	Identifier	Z_LVAL_P		4166101	0					
ANR	4166264	ArgumentList	op2		4166101	1					
ANR	4166265	Argument	op2		4166101	0					
ANR	4166266	Identifier	op2		4166101	0					
ANR	4166267	ElseStatement	else		4166101	0					
ANR	4166268	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_STRING ) )		4166101	0					
ANR	4166269	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_STRING )	683:12:22495:22530	4166101	0	True				
ANR	4166270	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_STRING )		4166101	0					
ANR	4166271	Callee	EXPECTED		4166101	0					
ANR	4166272	Identifier	EXPECTED		4166101	0					
ANR	4166273	ArgumentList	Z_TYPE_P ( op1 ) == IS_STRING		4166101	1					
ANR	4166274	Argument	Z_TYPE_P ( op1 ) == IS_STRING		4166101	0					
ANR	4166275	EqualityExpression	Z_TYPE_P ( op1 ) == IS_STRING		4166101	0		==			
ANR	4166276	CallExpression	Z_TYPE_P ( op1 )		4166101	0					
ANR	4166277	Callee	Z_TYPE_P		4166101	0					
ANR	4166278	Identifier	Z_TYPE_P		4166101	0					
ANR	4166279	ArgumentList	op1		4166101	1					
ANR	4166280	Argument	op1		4166101	0					
ANR	4166281	Identifier	op1		4166101	0					
ANR	4166282	Identifier	IS_STRING		4166101	1					
ANR	4166283	CompoundStatement		15:50:550:550	4166101	1					
ANR	4166284	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING ) )		4166101	0					
ANR	4166285	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING )	684:6:22541:22576	4166101	0	True				
ANR	4166286	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING )		4166101	0					
ANR	4166287	Callee	EXPECTED		4166101	0					
ANR	4166288	Identifier	EXPECTED		4166101	0					
ANR	4166289	ArgumentList	Z_TYPE_P ( op2 ) == IS_STRING		4166101	1					
ANR	4166290	Argument	Z_TYPE_P ( op2 ) == IS_STRING		4166101	0					
ANR	4166291	EqualityExpression	Z_TYPE_P ( op2 ) == IS_STRING		4166101	0		==			
ANR	4166292	CallExpression	Z_TYPE_P ( op2 )		4166101	0					
ANR	4166293	Callee	Z_TYPE_P		4166101	0					
ANR	4166294	Identifier	Z_TYPE_P		4166101	0					
ANR	4166295	ArgumentList	op2		4166101	1					
ANR	4166296	Argument	op2		4166101	0					
ANR	4166297	Identifier	op2		4166101	0					
ANR	4166298	Identifier	IS_STRING		4166101	1					
ANR	4166299	CompoundStatement		16:44:596:596	4166101	1					
ANR	4166300	IfStatement	if ( Z_STR_P ( op1 ) == Z_STR_P ( op2 ) )		4166101	0					
ANR	4166301	Condition	Z_STR_P ( op1 ) == Z_STR_P ( op2 )	685:7:22588:22615	4166101	0	True				
ANR	4166302	EqualityExpression	Z_STR_P ( op1 ) == Z_STR_P ( op2 )		4166101	0		==			
ANR	4166303	CallExpression	Z_STR_P ( op1 )		4166101	0					
ANR	4166304	Callee	Z_STR_P		4166101	0					
ANR	4166305	Identifier	Z_STR_P		4166101	0					
ANR	4166306	ArgumentList	op1		4166101	1					
ANR	4166307	Argument	op1		4166101	0					
ANR	4166308	Identifier	op1		4166101	0					
ANR	4166309	CallExpression	Z_STR_P ( op2 )		4166101	1					
ANR	4166310	Callee	Z_STR_P		4166101	0					
ANR	4166311	Identifier	Z_STR_P		4166101	0					
ANR	4166312	ArgumentList	op2		4166101	1					
ANR	4166313	Argument	op2		4166101	0					
ANR	4166314	Identifier	op2		4166101	0					
ANR	4166315	CompoundStatement		17:37:635:635	4166101	1					
ANR	4166316	ReturnStatement	return 1 ;	686:4:22624:22632	4166101	0	True				
ANR	4166317	PrimaryExpression	1		4166101	0					
ANR	4166318	ElseStatement	else		4166101	0					
ANR	4166319	IfStatement	if ( Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9' )		4166101	0					
ANR	4166320	Condition	Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9'	687:14:22648:22699	4166101	0	True				
ANR	4166321	OrExpression	Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9'		4166101	0		||			
ANR	4166322	RelationalExpression	Z_STRVAL_P ( op1 ) [ 0 ] > '9'		4166101	0		>			
ANR	4166323	ArrayIndexing	Z_STRVAL_P ( op1 ) [ 0 ]		4166101	0					
ANR	4166324	CallExpression	Z_STRVAL_P ( op1 )		4166101	0					
ANR	4166325	Callee	Z_STRVAL_P		4166101	0					
ANR	4166326	Identifier	Z_STRVAL_P		4166101	0					
ANR	4166327	ArgumentList	op1		4166101	1					
ANR	4166328	Argument	op1		4166101	0					
ANR	4166329	Identifier	op1		4166101	0					
ANR	4166330	PrimaryExpression	0		4166101	1					
ANR	4166331	PrimaryExpression	'9'		4166101	1					
ANR	4166332	RelationalExpression	Z_STRVAL_P ( op2 ) [ 0 ] > '9'		4166101	1		>			
ANR	4166333	ArrayIndexing	Z_STRVAL_P ( op2 ) [ 0 ]		4166101	0					
ANR	4166334	CallExpression	Z_STRVAL_P ( op2 )		4166101	0					
ANR	4166335	Callee	Z_STRVAL_P		4166101	0					
ANR	4166336	Identifier	Z_STRVAL_P		4166101	0					
ANR	4166337	ArgumentList	op2		4166101	1					
ANR	4166338	Argument	op2		4166101	0					
ANR	4166339	Identifier	op2		4166101	0					
ANR	4166340	PrimaryExpression	0		4166101	1					
ANR	4166341	PrimaryExpression	'9'		4166101	1					
ANR	4166342	CompoundStatement		19:68:719:719	4166101	1					
ANR	4166343	IfStatement	if ( Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 ) )		4166101	0					
ANR	4166344	Condition	Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 )	688:8:22712:22745	4166101	0	True				
ANR	4166345	EqualityExpression	Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 )		4166101	0		!=			
ANR	4166346	CallExpression	Z_STRLEN_P ( op1 )		4166101	0					
ANR	4166347	Callee	Z_STRLEN_P		4166101	0					
ANR	4166348	Identifier	Z_STRLEN_P		4166101	0					
ANR	4166349	ArgumentList	op1		4166101	1					
ANR	4166350	Argument	op1		4166101	0					
ANR	4166351	Identifier	op1		4166101	0					
ANR	4166352	CallExpression	Z_STRLEN_P ( op2 )		4166101	1					
ANR	4166353	Callee	Z_STRLEN_P		4166101	0					
ANR	4166354	Identifier	Z_STRLEN_P		4166101	0					
ANR	4166355	ArgumentList	op2		4166101	1					
ANR	4166356	Argument	op2		4166101	0					
ANR	4166357	Identifier	op2		4166101	0					
ANR	4166358	CompoundStatement		20:44:765:765	4166101	1					
ANR	4166359	ReturnStatement	return 0 ;	689:5:22755:22763	4166101	0	True				
ANR	4166360	PrimaryExpression	0		4166101	0					
ANR	4166361	ElseStatement	else		4166101	0					
ANR	4166362	CompoundStatement		22:11:793:793	4166101	0					
ANR	4166363	ReturnStatement	"return memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) ) == 0 ;"	691:5:22783:22852	4166101	0	True				
ANR	4166364	EqualityExpression	"memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) ) == 0"		4166101	0		==			
ANR	4166365	CallExpression	"memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) )"		4166101	0					
ANR	4166366	Callee	memcmp		4166101	0					
ANR	4166367	Identifier	memcmp		4166101	0					
ANR	4166368	ArgumentList	Z_STRVAL_P ( op1 )		4166101	1					
ANR	4166369	Argument	Z_STRVAL_P ( op1 )		4166101	0					
ANR	4166370	CallExpression	Z_STRVAL_P ( op1 )		4166101	0					
ANR	4166371	Callee	Z_STRVAL_P		4166101	0					
ANR	4166372	Identifier	Z_STRVAL_P		4166101	0					
ANR	4166373	ArgumentList	op1		4166101	1					
ANR	4166374	Argument	op1		4166101	0					
ANR	4166375	Identifier	op1		4166101	0					
ANR	4166376	Argument	Z_STRVAL_P ( op2 )		4166101	1					
ANR	4166377	CallExpression	Z_STRVAL_P ( op2 )		4166101	0					
ANR	4166378	Callee	Z_STRVAL_P		4166101	0					
ANR	4166379	Identifier	Z_STRVAL_P		4166101	0					
ANR	4166380	ArgumentList	op2		4166101	1					
ANR	4166381	Argument	op2		4166101	0					
ANR	4166382	Identifier	op2		4166101	0					
ANR	4166383	Argument	Z_STRLEN_P ( op1 )		4166101	2					
ANR	4166384	CallExpression	Z_STRLEN_P ( op1 )		4166101	0					
ANR	4166385	Callee	Z_STRLEN_P		4166101	0					
ANR	4166386	Identifier	Z_STRLEN_P		4166101	0					
ANR	4166387	ArgumentList	op1		4166101	1					
ANR	4166388	Argument	op1		4166101	0					
ANR	4166389	Identifier	op1		4166101	0					
ANR	4166390	PrimaryExpression	0		4166101	1					
ANR	4166391	ElseStatement	else		4166101	0					
ANR	4166392	CompoundStatement		25:10:887:887	4166101	0					
ANR	4166393	ReturnStatement	"return zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) ) == 0 ;"	694:4:22876:22934	4166101	0	True				
ANR	4166394	EqualityExpression	"zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) ) == 0"		4166101	0		==			
ANR	4166395	CallExpression	"zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) )"		4166101	0					
ANR	4166396	Callee	zendi_smart_strcmp		4166101	0					
ANR	4166397	Identifier	zendi_smart_strcmp		4166101	0					
ANR	4166398	ArgumentList	Z_STR_P ( op1 )		4166101	1					
ANR	4166399	Argument	Z_STR_P ( op1 )		4166101	0					
ANR	4166400	CallExpression	Z_STR_P ( op1 )		4166101	0					
ANR	4166401	Callee	Z_STR_P		4166101	0					
ANR	4166402	Identifier	Z_STR_P		4166101	0					
ANR	4166403	ArgumentList	op1		4166101	1					
ANR	4166404	Argument	op1		4166101	0					
ANR	4166405	Identifier	op1		4166101	0					
ANR	4166406	Argument	Z_STR_P ( op2 )		4166101	1					
ANR	4166407	CallExpression	Z_STR_P ( op2 )		4166101	0					
ANR	4166408	Callee	Z_STR_P		4166101	0					
ANR	4166409	Identifier	Z_STR_P		4166101	0					
ANR	4166410	ArgumentList	op2		4166101	1					
ANR	4166411	Argument	op2		4166101	0					
ANR	4166412	Identifier	op2		4166101	0					
ANR	4166413	PrimaryExpression	0		4166101	1					
ANR	4166414	ExpressionStatement	"compare_function ( & result , op1 , op2 )"	698:1:22949:22984	4166101	2	True				
ANR	4166415	CallExpression	"compare_function ( & result , op1 , op2 )"		4166101	0					
ANR	4166416	Callee	compare_function		4166101	0					
ANR	4166417	Identifier	compare_function		4166101	0					
ANR	4166418	ArgumentList	& result		4166101	1					
ANR	4166419	Argument	& result		4166101	0					
ANR	4166420	UnaryOperationExpression	& result		4166101	0					
ANR	4166421	UnaryOperator	&		4166101	0					
ANR	4166422	Identifier	result		4166101	1					
ANR	4166423	Argument	op1		4166101	1					
ANR	4166424	Identifier	op1		4166101	0					
ANR	4166425	Argument	op2		4166101	2					
ANR	4166426	Identifier	op2		4166101	0					
ANR	4166427	ReturnStatement	return Z_LVAL ( result ) == 0 ;	699:1:22987:23013	4166101	3	True				
ANR	4166428	EqualityExpression	Z_LVAL ( result ) == 0		4166101	0		==			
ANR	4166429	CallExpression	Z_LVAL ( result )		4166101	0					
ANR	4166430	Callee	Z_LVAL		4166101	0					
ANR	4166431	Identifier	Z_LVAL		4166101	0					
ANR	4166432	ArgumentList	result		4166101	1					
ANR	4166433	Argument	result		4166101	0					
ANR	4166434	Identifier	result		4166101	0					
ANR	4166435	PrimaryExpression	0		4166101	1					
ANR	4166436	ReturnType	static zend_always_inline int		4166101	1					
ANR	4166437	Identifier	fast_equal_check_function		4166101	2					
ANR	4166438	ParameterList	"zval * op1 , zval * op2"		4166101	3					
ANR	4166439	Parameter	zval * op1	668:56:21960:21968	4166101	0	True				
ANR	4166440	ParameterType	zval *		4166101	0					
ANR	4166441	Identifier	op1		4166101	1					
ANR	4166442	Parameter	zval * op2	668:67:21971:21979	4166101	1	True				
ANR	4166443	ParameterType	zval *		4166101	0					
ANR	4166444	Identifier	op2		4166101	1					
ANR	4166445	CFGEntryNode	ENTRY		4166101		True				
ANR	4166446	CFGExitNode	EXIT		4166101		True				
ANR	4166447	Symbol	Z_LVAL		4166101						
ANR	4166448	Symbol	Z_TYPE_P		4166101						
ANR	4166449	Symbol	Z_STRVAL_P		4166101						
ANR	4166450	Symbol	Z_DVAL_P		4166101						
ANR	4166451	Symbol	zendi_smart_strcmp		4166101						
ANR	4166452	Symbol	Z_LVAL_P		4166101						
ANR	4166453	Symbol	op2		4166101						
ANR	4166454	Symbol	result		4166101						
ANR	4166455	Symbol	op1		4166101						
ANR	4166456	Symbol	memcmp		4166101						
ANR	4166457	Symbol	IS_LONG		4166101						
ANR	4166458	Symbol	& result		4166101						
ANR	4166459	Symbol	IS_DOUBLE		4166101						
ANR	4166460	Symbol	Z_STRLEN_P		4166101						
ANR	4166461	Symbol	IS_STRING		4166101						
ANR	4166462	Symbol	Z_STR_P		4166101						
ANR	4166463	Symbol	* Z_STRVAL_P		4166101						
ANR	4166464	Symbol	EXPECTED		4166101						
ANR	4166465	Function	fast_equal_check_long	702:0:23018:23262							
ANR	4166466	FunctionDef	"fast_equal_check_long (zval * op1 , zval * op2)"		4166465	0					
ANR	4166467	CompoundStatement		703:0:23092:23262	4166465	0					
ANR	4166468	IdentifierDeclStatement	zval result ;	704:1:23095:23106	4166465	0	True				
ANR	4166469	IdentifierDecl	result		4166465	0					
ANR	4166470	IdentifierDeclType	zval		4166465	0					
ANR	4166471	Identifier	result		4166465	1					
ANR	4166472	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		4166465	1					
ANR	4166473	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	705:5:23113:23146	4166465	0	True				
ANR	4166474	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		4166465	0					
ANR	4166475	Callee	EXPECTED		4166465	0					
ANR	4166476	Identifier	EXPECTED		4166465	0					
ANR	4166477	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		4166465	1					
ANR	4166478	Argument	Z_TYPE_P ( op2 ) == IS_LONG		4166465	0					
ANR	4166479	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		4166465	0		==			
ANR	4166480	CallExpression	Z_TYPE_P ( op2 )		4166465	0					
ANR	4166481	Callee	Z_TYPE_P		4166465	0					
ANR	4166482	Identifier	Z_TYPE_P		4166465	0					
ANR	4166483	ArgumentList	op2		4166465	1					
ANR	4166484	Argument	op2		4166465	0					
ANR	4166485	Identifier	op2		4166465	0					
ANR	4166486	Identifier	IS_LONG		4166465	1					
ANR	4166487	CompoundStatement		3:41:56:56	4166465	1					
ANR	4166488	ReturnStatement	return Z_LVAL_P ( op1 ) == Z_LVAL_P ( op2 ) ;	706:2:23153:23190	4166465	0	True				
ANR	4166489	EqualityExpression	Z_LVAL_P ( op1 ) == Z_LVAL_P ( op2 )		4166465	0		==			
ANR	4166490	CallExpression	Z_LVAL_P ( op1 )		4166465	0					
ANR	4166491	Callee	Z_LVAL_P		4166465	0					
ANR	4166492	Identifier	Z_LVAL_P		4166465	0					
ANR	4166493	ArgumentList	op1		4166465	1					
ANR	4166494	Argument	op1		4166465	0					
ANR	4166495	Identifier	op1		4166465	0					
ANR	4166496	CallExpression	Z_LVAL_P ( op2 )		4166465	1					
ANR	4166497	Callee	Z_LVAL_P		4166465	0					
ANR	4166498	Identifier	Z_LVAL_P		4166465	0					
ANR	4166499	ArgumentList	op2		4166465	1					
ANR	4166500	Argument	op2		4166465	0					
ANR	4166501	Identifier	op2		4166465	0					
ANR	4166502	ExpressionStatement	"compare_function ( & result , op1 , op2 )"	708:1:23196:23231	4166465	2	True				
ANR	4166503	CallExpression	"compare_function ( & result , op1 , op2 )"		4166465	0					
ANR	4166504	Callee	compare_function		4166465	0					
ANR	4166505	Identifier	compare_function		4166465	0					
ANR	4166506	ArgumentList	& result		4166465	1					
ANR	4166507	Argument	& result		4166465	0					
ANR	4166508	UnaryOperationExpression	& result		4166465	0					
ANR	4166509	UnaryOperator	&		4166465	0					
ANR	4166510	Identifier	result		4166465	1					
ANR	4166511	Argument	op1		4166465	1					
ANR	4166512	Identifier	op1		4166465	0					
ANR	4166513	Argument	op2		4166465	2					
ANR	4166514	Identifier	op2		4166465	0					
ANR	4166515	ReturnStatement	return Z_LVAL ( result ) == 0 ;	709:1:23234:23260	4166465	3	True				
ANR	4166516	EqualityExpression	Z_LVAL ( result ) == 0		4166465	0		==			
ANR	4166517	CallExpression	Z_LVAL ( result )		4166465	0					
ANR	4166518	Callee	Z_LVAL		4166465	0					
ANR	4166519	Identifier	Z_LVAL		4166465	0					
ANR	4166520	ArgumentList	result		4166465	1					
ANR	4166521	Argument	result		4166465	0					
ANR	4166522	Identifier	result		4166465	0					
ANR	4166523	PrimaryExpression	0		4166465	1					
ANR	4166524	ReturnType	static zend_always_inline int		4166465	1					
ANR	4166525	Identifier	fast_equal_check_long		4166465	2					
ANR	4166526	ParameterList	"zval * op1 , zval * op2"		4166465	3					
ANR	4166527	Parameter	zval * op1	702:52:23070:23078	4166465	0	True				
ANR	4166528	ParameterType	zval *		4166465	0					
ANR	4166529	Identifier	op1		4166465	1					
ANR	4166530	Parameter	zval * op2	702:63:23081:23089	4166465	1	True				
ANR	4166531	ParameterType	zval *		4166465	0					
ANR	4166532	Identifier	op2		4166465	1					
ANR	4166533	CFGEntryNode	ENTRY		4166465		True				
ANR	4166534	CFGExitNode	EXIT		4166465		True				
ANR	4166535	Symbol	op2		4166465						
ANR	4166536	Symbol	result		4166465						
ANR	4166537	Symbol	op1		4166465						
ANR	4166538	Symbol	IS_LONG		4166465						
ANR	4166539	Symbol	& result		4166465						
ANR	4166540	Symbol	Z_LVAL		4166465						
ANR	4166541	Symbol	Z_TYPE_P		4166465						
ANR	4166542	Symbol	EXPECTED		4166465						
ANR	4166543	Symbol	Z_LVAL_P		4166465						
ANR	4166544	Function	fast_equal_check_string	712:0:23265:23821							
ANR	4166545	FunctionDef	"fast_equal_check_string (zval * op1 , zval * op2)"		4166544	0					
ANR	4166546	CompoundStatement		713:0:23341:23821	4166544	0					
ANR	4166547	IdentifierDeclStatement	zval result ;	714:1:23344:23355	4166544	0	True				
ANR	4166548	IdentifierDecl	result		4166544	0					
ANR	4166549	IdentifierDeclType	zval		4166544	0					
ANR	4166550	Identifier	result		4166544	1					
ANR	4166551	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING ) )		4166544	1					
ANR	4166552	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING )	715:5:23362:23397	4166544	0	True				
ANR	4166553	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING )		4166544	0					
ANR	4166554	Callee	EXPECTED		4166544	0					
ANR	4166555	Identifier	EXPECTED		4166544	0					
ANR	4166556	ArgumentList	Z_TYPE_P ( op2 ) == IS_STRING		4166544	1					
ANR	4166557	Argument	Z_TYPE_P ( op2 ) == IS_STRING		4166544	0					
ANR	4166558	EqualityExpression	Z_TYPE_P ( op2 ) == IS_STRING		4166544	0		==			
ANR	4166559	CallExpression	Z_TYPE_P ( op2 )		4166544	0					
ANR	4166560	Callee	Z_TYPE_P		4166544	0					
ANR	4166561	Identifier	Z_TYPE_P		4166544	0					
ANR	4166562	ArgumentList	op2		4166544	1					
ANR	4166563	Argument	op2		4166544	0					
ANR	4166564	Identifier	op2		4166544	0					
ANR	4166565	Identifier	IS_STRING		4166544	1					
ANR	4166566	CompoundStatement		3:43:58:58	4166544	1					
ANR	4166567	IfStatement	if ( Z_STR_P ( op1 ) == Z_STR_P ( op2 ) )		4166544	0					
ANR	4166568	Condition	Z_STR_P ( op1 ) == Z_STR_P ( op2 )	716:6:23408:23435	4166544	0	True				
ANR	4166569	EqualityExpression	Z_STR_P ( op1 ) == Z_STR_P ( op2 )		4166544	0		==			
ANR	4166570	CallExpression	Z_STR_P ( op1 )		4166544	0					
ANR	4166571	Callee	Z_STR_P		4166544	0					
ANR	4166572	Identifier	Z_STR_P		4166544	0					
ANR	4166573	ArgumentList	op1		4166544	1					
ANR	4166574	Argument	op1		4166544	0					
ANR	4166575	Identifier	op1		4166544	0					
ANR	4166576	CallExpression	Z_STR_P ( op2 )		4166544	1					
ANR	4166577	Callee	Z_STR_P		4166544	0					
ANR	4166578	Identifier	Z_STR_P		4166544	0					
ANR	4166579	ArgumentList	op2		4166544	1					
ANR	4166580	Argument	op2		4166544	0					
ANR	4166581	Identifier	op2		4166544	0					
ANR	4166582	CompoundStatement		4:36:96:96	4166544	1					
ANR	4166583	ReturnStatement	return 1 ;	717:3:23443:23451	4166544	0	True				
ANR	4166584	PrimaryExpression	1		4166544	0					
ANR	4166585	ElseStatement	else		4166544	0					
ANR	4166586	IfStatement	if ( Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9' )		4166544	0					
ANR	4166587	Condition	Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9'	718:13:23466:23517	4166544	0	True				
ANR	4166588	OrExpression	Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9'		4166544	0		||			
ANR	4166589	RelationalExpression	Z_STRVAL_P ( op1 ) [ 0 ] > '9'		4166544	0		>			
ANR	4166590	ArrayIndexing	Z_STRVAL_P ( op1 ) [ 0 ]		4166544	0					
ANR	4166591	CallExpression	Z_STRVAL_P ( op1 )		4166544	0					
ANR	4166592	Callee	Z_STRVAL_P		4166544	0					
ANR	4166593	Identifier	Z_STRVAL_P		4166544	0					
ANR	4166594	ArgumentList	op1		4166544	1					
ANR	4166595	Argument	op1		4166544	0					
ANR	4166596	Identifier	op1		4166544	0					
ANR	4166597	PrimaryExpression	0		4166544	1					
ANR	4166598	PrimaryExpression	'9'		4166544	1					
ANR	4166599	RelationalExpression	Z_STRVAL_P ( op2 ) [ 0 ] > '9'		4166544	1		>			
ANR	4166600	ArrayIndexing	Z_STRVAL_P ( op2 ) [ 0 ]		4166544	0					
ANR	4166601	CallExpression	Z_STRVAL_P ( op2 )		4166544	0					
ANR	4166602	Callee	Z_STRVAL_P		4166544	0					
ANR	4166603	Identifier	Z_STRVAL_P		4166544	0					
ANR	4166604	ArgumentList	op2		4166544	1					
ANR	4166605	Argument	op2		4166544	0					
ANR	4166606	Identifier	op2		4166544	0					
ANR	4166607	PrimaryExpression	0		4166544	1					
ANR	4166608	PrimaryExpression	'9'		4166544	1					
ANR	4166609	CompoundStatement		6:67:178:178	4166544	1					
ANR	4166610	IfStatement	if ( Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 ) )		4166544	0					
ANR	4166611	Condition	Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 )	719:7:23529:23562	4166544	0	True				
ANR	4166612	EqualityExpression	Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 )		4166544	0		!=			
ANR	4166613	CallExpression	Z_STRLEN_P ( op1 )		4166544	0					
ANR	4166614	Callee	Z_STRLEN_P		4166544	0					
ANR	4166615	Identifier	Z_STRLEN_P		4166544	0					
ANR	4166616	ArgumentList	op1		4166544	1					
ANR	4166617	Argument	op1		4166544	0					
ANR	4166618	Identifier	op1		4166544	0					
ANR	4166619	CallExpression	Z_STRLEN_P ( op2 )		4166544	1					
ANR	4166620	Callee	Z_STRLEN_P		4166544	0					
ANR	4166621	Identifier	Z_STRLEN_P		4166544	0					
ANR	4166622	ArgumentList	op2		4166544	1					
ANR	4166623	Argument	op2		4166544	0					
ANR	4166624	Identifier	op2		4166544	0					
ANR	4166625	CompoundStatement		7:43:223:223	4166544	1					
ANR	4166626	ReturnStatement	return 0 ;	720:4:23571:23579	4166544	0	True				
ANR	4166627	PrimaryExpression	0		4166544	0					
ANR	4166628	ElseStatement	else		4166544	0					
ANR	4166629	CompoundStatement		9:10:249:249	4166544	0					
ANR	4166630	ReturnStatement	"return memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) ) == 0 ;"	722:4:23597:23666	4166544	0	True				
ANR	4166631	EqualityExpression	"memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) ) == 0"		4166544	0		==			
ANR	4166632	CallExpression	"memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) )"		4166544	0					
ANR	4166633	Callee	memcmp		4166544	0					
ANR	4166634	Identifier	memcmp		4166544	0					
ANR	4166635	ArgumentList	Z_STRVAL_P ( op1 )		4166544	1					
ANR	4166636	Argument	Z_STRVAL_P ( op1 )		4166544	0					
ANR	4166637	CallExpression	Z_STRVAL_P ( op1 )		4166544	0					
ANR	4166638	Callee	Z_STRVAL_P		4166544	0					
ANR	4166639	Identifier	Z_STRVAL_P		4166544	0					
ANR	4166640	ArgumentList	op1		4166544	1					
ANR	4166641	Argument	op1		4166544	0					
ANR	4166642	Identifier	op1		4166544	0					
ANR	4166643	Argument	Z_STRVAL_P ( op2 )		4166544	1					
ANR	4166644	CallExpression	Z_STRVAL_P ( op2 )		4166544	0					
ANR	4166645	Callee	Z_STRVAL_P		4166544	0					
ANR	4166646	Identifier	Z_STRVAL_P		4166544	0					
ANR	4166647	ArgumentList	op2		4166544	1					
ANR	4166648	Argument	op2		4166544	0					
ANR	4166649	Identifier	op2		4166544	0					
ANR	4166650	Argument	Z_STRLEN_P ( op1 )		4166544	2					
ANR	4166651	CallExpression	Z_STRLEN_P ( op1 )		4166544	0					
ANR	4166652	Callee	Z_STRLEN_P		4166544	0					
ANR	4166653	Identifier	Z_STRLEN_P		4166544	0					
ANR	4166654	ArgumentList	op1		4166544	1					
ANR	4166655	Argument	op1		4166544	0					
ANR	4166656	Identifier	op1		4166544	0					
ANR	4166657	PrimaryExpression	0		4166544	1					
ANR	4166658	ElseStatement	else		4166544	0					
ANR	4166659	CompoundStatement		12:9:340:340	4166544	0					
ANR	4166660	ReturnStatement	"return zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) ) == 0 ;"	725:3:23687:23745	4166544	0	True				
ANR	4166661	EqualityExpression	"zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) ) == 0"		4166544	0		==			
ANR	4166662	CallExpression	"zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) )"		4166544	0					
ANR	4166663	Callee	zendi_smart_strcmp		4166544	0					
ANR	4166664	Identifier	zendi_smart_strcmp		4166544	0					
ANR	4166665	ArgumentList	Z_STR_P ( op1 )		4166544	1					
ANR	4166666	Argument	Z_STR_P ( op1 )		4166544	0					
ANR	4166667	CallExpression	Z_STR_P ( op1 )		4166544	0					
ANR	4166668	Callee	Z_STR_P		4166544	0					
ANR	4166669	Identifier	Z_STR_P		4166544	0					
ANR	4166670	ArgumentList	op1		4166544	1					
ANR	4166671	Argument	op1		4166544	0					
ANR	4166672	Identifier	op1		4166544	0					
ANR	4166673	Argument	Z_STR_P ( op2 )		4166544	1					
ANR	4166674	CallExpression	Z_STR_P ( op2 )		4166544	0					
ANR	4166675	Callee	Z_STR_P		4166544	0					
ANR	4166676	Identifier	Z_STR_P		4166544	0					
ANR	4166677	ArgumentList	op2		4166544	1					
ANR	4166678	Argument	op2		4166544	0					
ANR	4166679	Identifier	op2		4166544	0					
ANR	4166680	PrimaryExpression	0		4166544	1					
ANR	4166681	ExpressionStatement	"compare_function ( & result , op1 , op2 )"	728:1:23755:23790	4166544	2	True				
ANR	4166682	CallExpression	"compare_function ( & result , op1 , op2 )"		4166544	0					
ANR	4166683	Callee	compare_function		4166544	0					
ANR	4166684	Identifier	compare_function		4166544	0					
ANR	4166685	ArgumentList	& result		4166544	1					
ANR	4166686	Argument	& result		4166544	0					
ANR	4166687	UnaryOperationExpression	& result		4166544	0					
ANR	4166688	UnaryOperator	&		4166544	0					
ANR	4166689	Identifier	result		4166544	1					
ANR	4166690	Argument	op1		4166544	1					
ANR	4166691	Identifier	op1		4166544	0					
ANR	4166692	Argument	op2		4166544	2					
ANR	4166693	Identifier	op2		4166544	0					
ANR	4166694	ReturnStatement	return Z_LVAL ( result ) == 0 ;	729:1:23793:23819	4166544	3	True				
ANR	4166695	EqualityExpression	Z_LVAL ( result ) == 0		4166544	0		==			
ANR	4166696	CallExpression	Z_LVAL ( result )		4166544	0					
ANR	4166697	Callee	Z_LVAL		4166544	0					
ANR	4166698	Identifier	Z_LVAL		4166544	0					
ANR	4166699	ArgumentList	result		4166544	1					
ANR	4166700	Argument	result		4166544	0					
ANR	4166701	Identifier	result		4166544	0					
ANR	4166702	PrimaryExpression	0		4166544	1					
ANR	4166703	ReturnType	static zend_always_inline int		4166544	1					
ANR	4166704	Identifier	fast_equal_check_string		4166544	2					
ANR	4166705	ParameterList	"zval * op1 , zval * op2"		4166544	3					
ANR	4166706	Parameter	zval * op1	712:54:23319:23327	4166544	0	True				
ANR	4166707	ParameterType	zval *		4166544	0					
ANR	4166708	Identifier	op1		4166544	1					
ANR	4166709	Parameter	zval * op2	712:65:23330:23338	4166544	1	True				
ANR	4166710	ParameterType	zval *		4166544	0					
ANR	4166711	Identifier	op2		4166544	1					
ANR	4166712	CFGEntryNode	ENTRY		4166544		True				
ANR	4166713	CFGExitNode	EXIT		4166544		True				
ANR	4166714	Symbol	Z_LVAL		4166544						
ANR	4166715	Symbol	Z_TYPE_P		4166544						
ANR	4166716	Symbol	Z_STRVAL_P		4166544						
ANR	4166717	Symbol	zendi_smart_strcmp		4166544						
ANR	4166718	Symbol	op2		4166544						
ANR	4166719	Symbol	result		4166544						
ANR	4166720	Symbol	op1		4166544						
ANR	4166721	Symbol	memcmp		4166544						
ANR	4166722	Symbol	& result		4166544						
ANR	4166723	Symbol	Z_STRLEN_P		4166544						
ANR	4166724	Symbol	IS_STRING		4166544						
ANR	4166725	Symbol	Z_STR_P		4166544						
ANR	4166726	Symbol	* Z_STRVAL_P		4166544						
ANR	4166727	Symbol	EXPECTED		4166544						
ANR	4166728	Function	fast_is_identical_function	732:0:23824:24048							
ANR	4166729	FunctionDef	"fast_is_identical_function (zval * op1 , zval * op2)"		4166728	0					
ANR	4166730	CompoundStatement		733:0:23903:24048	4166728	0					
ANR	4166731	IfStatement	if ( Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 ) )		4166728	0					
ANR	4166732	Condition	Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 )	734:5:23910:23939	4166728	0	True				
ANR	4166733	EqualityExpression	Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 )		4166728	0		!=			
ANR	4166734	CallExpression	Z_TYPE_P ( op1 )		4166728	0					
ANR	4166735	Callee	Z_TYPE_P		4166728	0					
ANR	4166736	Identifier	Z_TYPE_P		4166728	0					
ANR	4166737	ArgumentList	op1		4166728	1					
ANR	4166738	Argument	op1		4166728	0					
ANR	4166739	Identifier	op1		4166728	0					
ANR	4166740	CallExpression	Z_TYPE_P ( op2 )		4166728	1					
ANR	4166741	Callee	Z_TYPE_P		4166728	0					
ANR	4166742	Identifier	Z_TYPE_P		4166728	0					
ANR	4166743	ArgumentList	op2		4166728	1					
ANR	4166744	Argument	op2		4166728	0					
ANR	4166745	Identifier	op2		4166728	0					
ANR	4166746	CompoundStatement		2:37:38:38	4166728	1					
ANR	4166747	ReturnStatement	return 0 ;	735:2:23946:23954	4166728	0	True				
ANR	4166748	PrimaryExpression	0		4166728	0					
ANR	4166749	ElseStatement	else		4166728	0					
ANR	4166750	IfStatement	if ( Z_TYPE_P ( op1 ) <= IS_TRUE )		4166728	0					
ANR	4166751	Condition	Z_TYPE_P ( op1 ) <= IS_TRUE	736:12:23968:23991	4166728	0	True				
ANR	4166752	RelationalExpression	Z_TYPE_P ( op1 ) <= IS_TRUE		4166728	0		<=			
ANR	4166753	CallExpression	Z_TYPE_P ( op1 )		4166728	0					
ANR	4166754	Callee	Z_TYPE_P		4166728	0					
ANR	4166755	Identifier	Z_TYPE_P		4166728	0					
ANR	4166756	ArgumentList	op1		4166728	1					
ANR	4166757	Argument	op1		4166728	0					
ANR	4166758	Identifier	op1		4166728	0					
ANR	4166759	Identifier	IS_TRUE		4166728	1					
ANR	4166760	CompoundStatement		4:38:90:90	4166728	1					
ANR	4166761	ReturnStatement	return 1 ;	737:2:23998:24006	4166728	0	True				
ANR	4166762	PrimaryExpression	1		4166728	0					
ANR	4166763	ReturnStatement	"return zend_is_identical ( op1 , op2 ) ;"	739:1:24012:24046	4166728	1	True				
ANR	4166764	CallExpression	"zend_is_identical ( op1 , op2 )"		4166728	0					
ANR	4166765	Callee	zend_is_identical		4166728	0					
ANR	4166766	Identifier	zend_is_identical		4166728	0					
ANR	4166767	ArgumentList	op1		4166728	1					
ANR	4166768	Argument	op1		4166728	0					
ANR	4166769	Identifier	op1		4166728	0					
ANR	4166770	Argument	op2		4166728	1					
ANR	4166771	Identifier	op2		4166728	0					
ANR	4166772	ReturnType	static zend_always_inline int		4166728	1					
ANR	4166773	Identifier	fast_is_identical_function		4166728	2					
ANR	4166774	ParameterList	"zval * op1 , zval * op2"		4166728	3					
ANR	4166775	Parameter	zval * op1	732:57:23881:23889	4166728	0	True				
ANR	4166776	ParameterType	zval *		4166728	0					
ANR	4166777	Identifier	op1		4166728	1					
ANR	4166778	Parameter	zval * op2	732:68:23892:23900	4166728	1	True				
ANR	4166779	ParameterType	zval *		4166728	0					
ANR	4166780	Identifier	op2		4166728	1					
ANR	4166781	CFGEntryNode	ENTRY		4166728		True				
ANR	4166782	CFGExitNode	EXIT		4166728		True				
ANR	4166783	Symbol	op2		4166728						
ANR	4166784	Symbol	op1		4166728						
ANR	4166785	Symbol	zend_is_identical		4166728						
ANR	4166786	Symbol	IS_TRUE		4166728						
ANR	4166787	Symbol	Z_TYPE_P		4166728						
ANR	4166788	Function	fast_is_not_identical_function	742:0:24051:24280							
ANR	4166789	FunctionDef	"fast_is_not_identical_function (zval * op1 , zval * op2)"		4166788	0					
ANR	4166790	CompoundStatement		743:0:24134:24280	4166788	0					
ANR	4166791	IfStatement	if ( Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 ) )		4166788	0					
ANR	4166792	Condition	Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 )	744:5:24141:24170	4166788	0	True				
ANR	4166793	EqualityExpression	Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 )		4166788	0		!=			
ANR	4166794	CallExpression	Z_TYPE_P ( op1 )		4166788	0					
ANR	4166795	Callee	Z_TYPE_P		4166788	0					
ANR	4166796	Identifier	Z_TYPE_P		4166788	0					
ANR	4166797	ArgumentList	op1		4166788	1					
ANR	4166798	Argument	op1		4166788	0					
ANR	4166799	Identifier	op1		4166788	0					
ANR	4166800	CallExpression	Z_TYPE_P ( op2 )		4166788	1					
ANR	4166801	Callee	Z_TYPE_P		4166788	0					
ANR	4166802	Identifier	Z_TYPE_P		4166788	0					
ANR	4166803	ArgumentList	op2		4166788	1					
ANR	4166804	Argument	op2		4166788	0					
ANR	4166805	Identifier	op2		4166788	0					
ANR	4166806	CompoundStatement		2:37:38:38	4166788	1					
ANR	4166807	ReturnStatement	return 1 ;	745:2:24177:24185	4166788	0	True				
ANR	4166808	PrimaryExpression	1		4166788	0					
ANR	4166809	ElseStatement	else		4166788	0					
ANR	4166810	IfStatement	if ( Z_TYPE_P ( op1 ) <= IS_TRUE )		4166788	0					
ANR	4166811	Condition	Z_TYPE_P ( op1 ) <= IS_TRUE	746:12:24199:24222	4166788	0	True				
ANR	4166812	RelationalExpression	Z_TYPE_P ( op1 ) <= IS_TRUE		4166788	0		<=			
ANR	4166813	CallExpression	Z_TYPE_P ( op1 )		4166788	0					
ANR	4166814	Callee	Z_TYPE_P		4166788	0					
ANR	4166815	Identifier	Z_TYPE_P		4166788	0					
ANR	4166816	ArgumentList	op1		4166788	1					
ANR	4166817	Argument	op1		4166788	0					
ANR	4166818	Identifier	op1		4166788	0					
ANR	4166819	Identifier	IS_TRUE		4166788	1					
ANR	4166820	CompoundStatement		4:38:90:90	4166788	1					
ANR	4166821	ReturnStatement	return 0 ;	747:2:24229:24237	4166788	0	True				
ANR	4166822	PrimaryExpression	0		4166788	0					
ANR	4166823	ReturnStatement	"return ! zend_is_identical ( op1 , op2 ) ;"	749:1:24243:24278	4166788	1	True				
ANR	4166824	UnaryOperationExpression	"! zend_is_identical ( op1 , op2 )"		4166788	0					
ANR	4166825	UnaryOperator	!		4166788	0					
ANR	4166826	CallExpression	"zend_is_identical ( op1 , op2 )"		4166788	1					
ANR	4166827	Callee	zend_is_identical		4166788	0					
ANR	4166828	Identifier	zend_is_identical		4166788	0					
ANR	4166829	ArgumentList	op1		4166788	1					
ANR	4166830	Argument	op1		4166788	0					
ANR	4166831	Identifier	op1		4166788	0					
ANR	4166832	Argument	op2		4166788	1					
ANR	4166833	Identifier	op2		4166788	0					
ANR	4166834	ReturnType	static zend_always_inline int		4166788	1					
ANR	4166835	Identifier	fast_is_not_identical_function		4166788	2					
ANR	4166836	ParameterList	"zval * op1 , zval * op2"		4166788	3					
ANR	4166837	Parameter	zval * op1	742:61:24112:24120	4166788	0	True				
ANR	4166838	ParameterType	zval *		4166788	0					
ANR	4166839	Identifier	op1		4166788	1					
ANR	4166840	Parameter	zval * op2	742:72:24123:24131	4166788	1	True				
ANR	4166841	ParameterType	zval *		4166788	0					
ANR	4166842	Identifier	op2		4166788	1					
ANR	4166843	CFGEntryNode	ENTRY		4166788		True				
ANR	4166844	CFGExitNode	EXIT		4166788		True				
ANR	4166845	Symbol	op2		4166788						
ANR	4166846	Symbol	op1		4166788						
ANR	4166847	Symbol	zend_is_identical		4166788						
ANR	4166848	Symbol	IS_TRUE		4166788						
ANR	4166849	Symbol	Z_TYPE_P		4166788						
ANR	4166850	DeclStmt									
ANR	4166851	Decl							int	int	ret
ANR	4166852	DeclStmt									
ANR	4166853	Decl							zval	zval	rv
ANR	4166854	DeclStmt									
ANR	4166855	Decl							zval	zval *	objval
ANR	4166856	Function	zend_print_ulong_to_buf	792:0:27560:27747							
ANR	4166857	FunctionDef	"zend_print_ulong_to_buf (char * buf , zend_ulong num)"		4166856	0					
ANR	4166858	CompoundStatement		792:83:27643:27747	4166856	0					
ANR	4166859	ExpressionStatement	* buf = '\\0'	793:1:27646:27657	4166856	0	True				
ANR	4166860	AssignmentExpression	* buf = '\\0'		4166856	0		=			
ANR	4166861	UnaryOperationExpression	* buf		4166856	0					
ANR	4166862	UnaryOperator	*		4166856	0					
ANR	4166863	Identifier	buf		4166856	1					
ANR	4166864	PrimaryExpression	'\\0'		4166856	1					
ANR	4166865	DoStatement	do		4166856	1					
ANR	4166866	CompoundStatement		3:4:19:19	4166856	0					
ANR	4166867	ExpressionStatement	* -- buf = ( char ) ( num % 10 ) + '0'	795:2:27667:27699	4166856	0	True				
ANR	4166868	AssignmentExpression	* -- buf = ( char ) ( num % 10 ) + '0'		4166856	0		=			
ANR	4166869	UnaryOperationExpression	* -- buf		4166856	0					
ANR	4166870	UnaryOperator	*		4166856	0					
ANR	4166871	UnaryExpression	-- buf		4166856	1					
ANR	4166872	IncDec	--		4166856	0					
ANR	4166873	Identifier	buf		4166856	1					
ANR	4166874	AdditiveExpression	( char ) ( num % 10 ) + '0'		4166856	1		+			
ANR	4166875	CastExpression	( char ) ( num % 10 )		4166856	0					
ANR	4166876	CastTarget	char		4166856	0					
ANR	4166877	MultiplicativeExpression	num % 10		4166856	1		%			
ANR	4166878	Identifier	num		4166856	0					
ANR	4166879	PrimaryExpression	10		4166856	1					
ANR	4166880	PrimaryExpression	'0'		4166856	1					
ANR	4166881	ExpressionStatement	num /= 10	796:2:27703:27712	4166856	1	True				
ANR	4166882	AssignmentExpression	num /= 10		4166856	0		/=			
ANR	4166883	Identifier	num		4166856	0					
ANR	4166884	PrimaryExpression	10		4166856	1					
ANR	4166885	Condition	num > 0	797:10:27724:27730	4166856	1	True				
ANR	4166886	RelationalExpression	num > 0		4166856	0		>			
ANR	4166887	Identifier	num		4166856	0					
ANR	4166888	PrimaryExpression	0		4166856	1					
ANR	4166889	ReturnStatement	return buf ;	798:1:27735:27745	4166856	2	True				
ANR	4166890	Identifier	buf		4166856	0					
ANR	4166891	ReturnType	static zend_always_inline char *		4166856	1					
ANR	4166892	Identifier	zend_print_ulong_to_buf		4166856	2					
ANR	4166893	ParameterList	"char * buf , zend_ulong num"		4166856	3					
ANR	4166894	Parameter	char * buf	792:56:27616:27624	4166856	0	True				
ANR	4166895	ParameterType	char *		4166856	0					
ANR	4166896	Identifier	buf		4166856	1					
ANR	4166897	Parameter	zend_ulong num	792:67:27627:27640	4166856	1	True				
ANR	4166898	ParameterType	zend_ulong		4166856	0					
ANR	4166899	Identifier	num		4166856	1					
ANR	4166900	CFGEntryNode	ENTRY		4166856		True				
ANR	4166901	CFGExitNode	EXIT		4166856		True				
ANR	4166902	Symbol	buf		4166856						
ANR	4166903	Symbol	* buf		4166856						
ANR	4166904	Symbol	* -- buf		4166856						
ANR	4166905	Symbol	num		4166856						
ANR	4166906	Function	zend_print_long_to_buf	802:0:27792:28065							
ANR	4166907	FunctionDef	"zend_print_long_to_buf (char * buf , zend_long num)"		4166906	0					
ANR	4166908	CompoundStatement		802:81:27873:28065	4166906	0					
ANR	4166909	IfStatement	if ( num < 0 )		4166906	0					
ANR	4166910	Condition	num < 0	803:5:27880:27886	4166906	0	True				
ANR	4166911	RelationalExpression	num < 0		4166906	0		<			
ANR	4166912	Identifier	num		4166906	0					
ANR	4166913	PrimaryExpression	0		4166906	1					
ANR	4166914	CompoundStatement		3:5:22:90	4166906	1					
ANR	4166915	IdentifierDeclStatement	"char * result = zend_print_ulong_to_buf ( buf , ~ ( ( zend_ulong ) num ) + 1 ) ;"	804:5:27896:27964	4166906	0	True				
ANR	4166916	IdentifierDecl	"* result = zend_print_ulong_to_buf ( buf , ~ ( ( zend_ulong ) num ) + 1 )"		4166906	0					
ANR	4166917	IdentifierDeclType	char *		4166906	0					
ANR	4166918	Identifier	result		4166906	1					
ANR	4166919	AssignmentExpression	"* result = zend_print_ulong_to_buf ( buf , ~ ( ( zend_ulong ) num ) + 1 )"		4166906	2		=			
ANR	4166920	Identifier	result		4166906	0					
ANR	4166921	CallExpression	"zend_print_ulong_to_buf ( buf , ~ ( ( zend_ulong ) num ) + 1 )"		4166906	1					
ANR	4166922	Callee	zend_print_ulong_to_buf		4166906	0					
ANR	4166923	Identifier	zend_print_ulong_to_buf		4166906	0					
ANR	4166924	ArgumentList	buf		4166906	1					
ANR	4166925	Argument	buf		4166906	0					
ANR	4166926	Identifier	buf		4166906	0					
ANR	4166927	Argument	~ ( ( zend_ulong ) num ) + 1		4166906	1					
ANR	4166928	AdditiveExpression	~ ( ( zend_ulong ) num ) + 1		4166906	0		+			
ANR	4166929	UnaryOperationExpression	~ ( ( zend_ulong ) num )		4166906	0					
ANR	4166930	UnaryOperator	~		4166906	0					
ANR	4166931	CastExpression	( zend_ulong ) num		4166906	1					
ANR	4166932	CastTarget	zend_ulong		4166906	0					
ANR	4166933	Identifier	num		4166906	1					
ANR	4166934	PrimaryExpression	1		4166906	1					
ANR	4166935	ExpressionStatement	* -- result = '-'	805:5:27971:27986	4166906	1	True				
ANR	4166936	AssignmentExpression	* -- result = '-'		4166906	0		=			
ANR	4166937	UnaryOperationExpression	* -- result		4166906	0					
ANR	4166938	UnaryOperator	*		4166906	0					
ANR	4166939	UnaryExpression	-- result		4166906	1					
ANR	4166940	IncDec	--		4166906	0					
ANR	4166941	Identifier	result		4166906	1					
ANR	4166942	PrimaryExpression	'-'		4166906	1					
ANR	4166943	ReturnStatement	return result ;	806:2:27990:28003	4166906	2	True				
ANR	4166944	Identifier	result		4166906	0					
ANR	4166945	ElseStatement	else		4166906	0					
ANR	4166946	CompoundStatement		6:8:139:139	4166906	0					
ANR	4166947	ReturnStatement	"return zend_print_ulong_to_buf ( buf , num ) ;"	808:5:28020:28060	4166906	0	True				
ANR	4166948	CallExpression	"zend_print_ulong_to_buf ( buf , num )"		4166906	0					
ANR	4166949	Callee	zend_print_ulong_to_buf		4166906	0					
ANR	4166950	Identifier	zend_print_ulong_to_buf		4166906	0					
ANR	4166951	ArgumentList	buf		4166906	1					
ANR	4166952	Argument	buf		4166906	0					
ANR	4166953	Identifier	buf		4166906	0					
ANR	4166954	Argument	num		4166906	1					
ANR	4166955	Identifier	num		4166906	0					
ANR	4166956	ReturnType	static zend_always_inline char *		4166906	1					
ANR	4166957	Identifier	zend_print_long_to_buf		4166906	2					
ANR	4166958	ParameterList	"char * buf , zend_long num"		4166906	3					
ANR	4166959	Parameter	char * buf	802:55:27847:27855	4166906	0	True				
ANR	4166960	ParameterType	char *		4166906	0					
ANR	4166961	Identifier	buf		4166906	1					
ANR	4166962	Parameter	zend_long num	802:66:27858:27870	4166906	1	True				
ANR	4166963	ParameterType	zend_long		4166906	0					
ANR	4166964	Identifier	num		4166906	1					
ANR	4166965	CFGEntryNode	ENTRY		4166906		True				
ANR	4166966	CFGExitNode	EXIT		4166906		True				
ANR	4166967	Symbol	result		4166906						
ANR	4166968	Symbol	buf		4166906						
ANR	4166969	Symbol	* -- result		4166906						
ANR	4166970	Symbol	* result		4166906						
ANR	4166971	Symbol	num		4166906						
ANR	4166972	Symbol	zend_print_ulong_to_buf		4166906						
ANR	4166973	DeclStmt									
ANR	4166974	Decl							ZEND_FASTCALL	ZEND_FASTCALL ( zend_long num )	zend_long_to_str
