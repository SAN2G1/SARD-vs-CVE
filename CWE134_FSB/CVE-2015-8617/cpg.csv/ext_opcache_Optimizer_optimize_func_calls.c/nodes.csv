command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1373061	File	data/converged/CVE-2015-8617_php-src/ext_opcache_Optimizer_optimize_func_calls.c								
ANR	1373062	ClassDef	_optimizer_call_info	36:8:1642:1739							
ANR	1373063	DeclStmt									
ANR	1373064	Decl							zend_function	zend_function *	func
ANR	1373065	DeclStmt									
ANR	1373066	Decl							zend_op	zend_op *	opline
ANR	1373067	DeclStmt									
ANR	1373068	Decl							_optimizer_call_info	_optimizer_call_info	optimizer_call_info
ANR	1373069	Function	optimize_func_calls	41:0:1742:6149							
ANR	1373070	FunctionDef	"optimize_func_calls (zend_op_array * op_array , zend_optimizer_ctx * ctx)"		1373069	0					
ANR	1373071	CompoundStatement		42:0:1817:6149	1373069	0					
ANR	1373072	IdentifierDeclStatement	zend_op * opline = op_array -> opcodes ;	43:1:1820:1855	1373069	0	True				
ANR	1373073	IdentifierDecl	* opline = op_array -> opcodes		1373069	0					
ANR	1373074	IdentifierDeclType	zend_op *		1373069	0					
ANR	1373075	Identifier	opline		1373069	1					
ANR	1373076	AssignmentExpression	* opline = op_array -> opcodes		1373069	2		=			
ANR	1373077	Identifier	opline		1373069	0					
ANR	1373078	PtrMemberAccess	op_array -> opcodes		1373069	1					
ANR	1373079	Identifier	op_array		1373069	0					
ANR	1373080	Identifier	opcodes		1373069	1					
ANR	1373081	IdentifierDeclStatement	zend_op * end = opline + op_array -> last ;	44:1:1858:1896	1373069	1	True				
ANR	1373082	IdentifierDecl	* end = opline + op_array -> last		1373069	0					
ANR	1373083	IdentifierDeclType	zend_op *		1373069	0					
ANR	1373084	Identifier	end		1373069	1					
ANR	1373085	AssignmentExpression	* end = opline + op_array -> last		1373069	2		=			
ANR	1373086	Identifier	end		1373069	0					
ANR	1373087	AdditiveExpression	opline + op_array -> last		1373069	1		+			
ANR	1373088	Identifier	opline		1373069	0					
ANR	1373089	PtrMemberAccess	op_array -> last		1373069	1					
ANR	1373090	Identifier	op_array		1373069	0					
ANR	1373091	Identifier	last		1373069	1					
ANR	1373092	IdentifierDeclStatement	int call = 0 ;	45:1:1899:1911	1373069	2	True				
ANR	1373093	IdentifierDecl	call = 0		1373069	0					
ANR	1373094	IdentifierDeclType	int		1373069	0					
ANR	1373095	Identifier	call		1373069	1					
ANR	1373096	AssignmentExpression	call = 0		1373069	2		=			
ANR	1373097	Identifier	call		1373069	0					
ANR	1373098	PrimaryExpression	0		1373069	1					
ANR	1373099	IdentifierDeclStatement	void * checkpoint ;	46:1:1914:1930	1373069	3	True				
ANR	1373100	IdentifierDecl	* checkpoint		1373069	0					
ANR	1373101	IdentifierDeclType	void *		1373069	0					
ANR	1373102	Identifier	checkpoint		1373069	1					
ANR	1373103	IdentifierDeclStatement	optimizer_call_info * call_stack ;	47:1:1933:1964	1373069	4	True				
ANR	1373104	IdentifierDecl	* call_stack		1373069	0					
ANR	1373105	IdentifierDeclType	optimizer_call_info *		1373069	0					
ANR	1373106	Identifier	call_stack		1373069	1					
ANR	1373107	IfStatement	if ( op_array -> last < 2 )		1373069	5					
ANR	1373108	Condition	op_array -> last < 2	49:5:1972:1989	1373069	0	True				
ANR	1373109	RelationalExpression	op_array -> last < 2		1373069	0		<			
ANR	1373110	PtrMemberAccess	op_array -> last		1373069	0					
ANR	1373111	Identifier	op_array		1373069	0					
ANR	1373112	Identifier	last		1373069	1					
ANR	1373113	PrimaryExpression	2		1373069	1					
ANR	1373114	CompoundStatement		8:25:174:174	1373069	1					
ANR	1373115	ReturnStatement	return ;	50:2:1996:2002	1373069	0	True				
ANR	1373116	ExpressionStatement	checkpoint = zend_arena_checkpoint ( ctx -> arena )	53:1:2009:2055	1373069	6	True				
ANR	1373117	AssignmentExpression	checkpoint = zend_arena_checkpoint ( ctx -> arena )		1373069	0		=			
ANR	1373118	Identifier	checkpoint		1373069	0					
ANR	1373119	CallExpression	zend_arena_checkpoint ( ctx -> arena )		1373069	1					
ANR	1373120	Callee	zend_arena_checkpoint		1373069	0					
ANR	1373121	Identifier	zend_arena_checkpoint		1373069	0					
ANR	1373122	ArgumentList	ctx -> arena		1373069	1					
ANR	1373123	Argument	ctx -> arena		1373069	0					
ANR	1373124	PtrMemberAccess	ctx -> arena		1373069	0					
ANR	1373125	Identifier	ctx		1373069	0					
ANR	1373126	Identifier	arena		1373069	1					
ANR	1373127	ExpressionStatement	"call_stack = zend_arena_calloc ( & ctx -> arena , op_array -> last / 2 , sizeof ( optimizer_call_info ) )"	54:1:2058:2150	1373069	7	True				
ANR	1373128	AssignmentExpression	"call_stack = zend_arena_calloc ( & ctx -> arena , op_array -> last / 2 , sizeof ( optimizer_call_info ) )"		1373069	0		=			
ANR	1373129	Identifier	call_stack		1373069	0					
ANR	1373130	CallExpression	"zend_arena_calloc ( & ctx -> arena , op_array -> last / 2 , sizeof ( optimizer_call_info ) )"		1373069	1					
ANR	1373131	Callee	zend_arena_calloc		1373069	0					
ANR	1373132	Identifier	zend_arena_calloc		1373069	0					
ANR	1373133	ArgumentList	& ctx -> arena		1373069	1					
ANR	1373134	Argument	& ctx -> arena		1373069	0					
ANR	1373135	UnaryOperationExpression	& ctx -> arena		1373069	0					
ANR	1373136	UnaryOperator	&		1373069	0					
ANR	1373137	PtrMemberAccess	ctx -> arena		1373069	1					
ANR	1373138	Identifier	ctx		1373069	0					
ANR	1373139	Identifier	arena		1373069	1					
ANR	1373140	Argument	op_array -> last / 2		1373069	1					
ANR	1373141	MultiplicativeExpression	op_array -> last / 2		1373069	0		/			
ANR	1373142	PtrMemberAccess	op_array -> last		1373069	0					
ANR	1373143	Identifier	op_array		1373069	0					
ANR	1373144	Identifier	last		1373069	1					
ANR	1373145	PrimaryExpression	2		1373069	1					
ANR	1373146	Argument	sizeof ( optimizer_call_info )		1373069	2					
ANR	1373147	SizeofExpression	sizeof ( optimizer_call_info )		1373069	0					
ANR	1373148	Sizeof	sizeof		1373069	0					
ANR	1373149	SizeofOperand	optimizer_call_info		1373069	1					
ANR	1373150	WhileStatement	while ( opline < end )		1373069	8					
ANR	1373151	Condition	opline < end	55:8:2160:2171	1373069	0	True				
ANR	1373152	RelationalExpression	opline < end		1373069	0		<			
ANR	1373153	Identifier	opline		1373069	0					
ANR	1373154	Identifier	end		1373069	1					
ANR	1373155	CompoundStatement		14:22:356:356	1373069	1					
ANR	1373156	SwitchStatement	switch ( opline -> opcode )		1373069	0					
ANR	1373157	Condition	opline -> opcode	56:10:2186:2199	1373069	0	True				
ANR	1373158	PtrMemberAccess	opline -> opcode		1373069	0					
ANR	1373159	Identifier	opline		1373069	0					
ANR	1373160	Identifier	opcode		1373069	1					
ANR	1373161	CompoundStatement		15:26:384:384	1373069	1					
ANR	1373162	Label	case ZEND_INIT_FCALL_BY_NAME :	57:3:2207:2235	1373069	0	True				
ANR	1373163	Identifier	ZEND_INIT_FCALL_BY_NAME		1373069	0					
ANR	1373164	Label	case ZEND_INIT_NS_FCALL_BY_NAME :	58:3:2240:2271	1373069	1	True				
ANR	1373165	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		1373069	0					
ANR	1373166	IfStatement	if ( ZEND_OP2_IS_CONST_STRING ( opline ) )		1373069	2					
ANR	1373167	Condition	ZEND_OP2_IS_CONST_STRING ( opline )	59:8:2281:2312	1373069	0	True				
ANR	1373168	CallExpression	ZEND_OP2_IS_CONST_STRING ( opline )		1373069	0					
ANR	1373169	Callee	ZEND_OP2_IS_CONST_STRING		1373069	0					
ANR	1373170	Identifier	ZEND_OP2_IS_CONST_STRING		1373069	0					
ANR	1373171	ArgumentList	opline		1373069	1					
ANR	1373172	Argument	opline		1373069	0					
ANR	1373173	Identifier	opline		1373069	0					
ANR	1373174	CompoundStatement		20:5:530:597	1373069	1					
ANR	1373175	IdentifierDeclStatement	zend_function * func ;	60:5:2322:2341	1373069	0	True				
ANR	1373176	IdentifierDecl	* func		1373069	0					
ANR	1373177	IdentifierDeclType	zend_function *		1373069	0					
ANR	1373178	Identifier	func		1373069	1					
ANR	1373179	IdentifierDeclStatement	zval * function_name = & op_array -> literals [ opline -> op2 . constant + 1 ] ;	61:5:2348:2415	1373069	1	True				
ANR	1373180	IdentifierDecl	* function_name = & op_array -> literals [ opline -> op2 . constant + 1 ]		1373069	0					
ANR	1373181	IdentifierDeclType	zval *		1373069	0					
ANR	1373182	Identifier	function_name		1373069	1					
ANR	1373183	AssignmentExpression	* function_name = & op_array -> literals [ opline -> op2 . constant + 1 ]		1373069	2		=			
ANR	1373184	Identifier	function_name		1373069	0					
ANR	1373185	UnaryOperationExpression	& op_array -> literals [ opline -> op2 . constant + 1 ]		1373069	1					
ANR	1373186	UnaryOperator	&		1373069	0					
ANR	1373187	ArrayIndexing	op_array -> literals [ opline -> op2 . constant + 1 ]		1373069	1					
ANR	1373188	PtrMemberAccess	op_array -> literals		1373069	0					
ANR	1373189	Identifier	op_array		1373069	0					
ANR	1373190	Identifier	literals		1373069	1					
ANR	1373191	AdditiveExpression	opline -> op2 . constant + 1		1373069	1		+			
ANR	1373192	MemberAccess	opline -> op2 . constant		1373069	0					
ANR	1373193	PtrMemberAccess	opline -> op2		1373069	0					
ANR	1373194	Identifier	opline		1373069	0					
ANR	1373195	Identifier	op2		1373069	1					
ANR	1373196	Identifier	constant		1373069	1					
ANR	1373197	PrimaryExpression	1		1373069	1					
ANR	1373198	IfStatement	"if ( ( func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) ) ) != NULL )"		1373069	2					
ANR	1373199	Condition	"( func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) ) ) != NULL"	62:9:2426:2521	1373069	0	True				
ANR	1373200	EqualityExpression	"( func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) ) ) != NULL"		1373069	0		!=			
ANR	1373201	AssignmentExpression	"func = zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) )"		1373069	0		=			
ANR	1373202	Identifier	func		1373069	0					
ANR	1373203	CallExpression	"zend_hash_find_ptr ( & ctx -> script -> function_table , Z_STR_P ( function_name ) )"		1373069	1					
ANR	1373204	Callee	zend_hash_find_ptr		1373069	0					
ANR	1373205	Identifier	zend_hash_find_ptr		1373069	0					
ANR	1373206	ArgumentList	& ctx -> script -> function_table		1373069	1					
ANR	1373207	Argument	& ctx -> script -> function_table		1373069	0					
ANR	1373208	UnaryOperationExpression	& ctx -> script -> function_table		1373069	0					
ANR	1373209	UnaryOperator	&		1373069	0					
ANR	1373210	PtrMemberAccess	ctx -> script -> function_table		1373069	1					
ANR	1373211	PtrMemberAccess	ctx -> script		1373069	0					
ANR	1373212	Identifier	ctx		1373069	0					
ANR	1373213	Identifier	script		1373069	1					
ANR	1373214	Identifier	function_table		1373069	1					
ANR	1373215	Argument	Z_STR_P ( function_name )		1373069	1					
ANR	1373216	CallExpression	Z_STR_P ( function_name )		1373069	0					
ANR	1373217	Callee	Z_STR_P		1373069	0					
ANR	1373218	Identifier	Z_STR_P		1373069	0					
ANR	1373219	ArgumentList	function_name		1373069	1					
ANR	1373220	Argument	function_name		1373069	0					
ANR	1373221	Identifier	function_name		1373069	0					
ANR	1373222	Identifier	NULL		1373069	1					
ANR	1373223	CompoundStatement		22:41:706:706	1373069	1					
ANR	1373224	ExpressionStatement	call_stack [ call ] . func = func	64:6:2532:2560	1373069	0	True				
ANR	1373225	AssignmentExpression	call_stack [ call ] . func = func		1373069	0		=			
ANR	1373226	MemberAccess	call_stack [ call ] . func		1373069	0					
ANR	1373227	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373228	Identifier	call_stack		1373069	0					
ANR	1373229	Identifier	call		1373069	1					
ANR	1373230	Identifier	func		1373069	1					
ANR	1373231	Identifier	func		1373069	1					
ANR	1373232	Label	case ZEND_NEW :	68:3:2616:2629	1373069	3	True				
ANR	1373233	Identifier	ZEND_NEW		1373069	0					
ANR	1373234	Label	case ZEND_INIT_DYNAMIC_CALL :	69:3:2634:2661	1373069	4	True				
ANR	1373235	Identifier	ZEND_INIT_DYNAMIC_CALL		1373069	0					
ANR	1373236	Label	case ZEND_INIT_METHOD_CALL :	70:3:2666:2692	1373069	5	True				
ANR	1373237	Identifier	ZEND_INIT_METHOD_CALL		1373069	0					
ANR	1373238	Label	case ZEND_INIT_STATIC_METHOD_CALL :	71:3:2697:2730	1373069	6	True				
ANR	1373239	Identifier	ZEND_INIT_STATIC_METHOD_CALL		1373069	0					
ANR	1373240	Label	case ZEND_INIT_FCALL :	72:3:2735:2755	1373069	7	True				
ANR	1373241	Identifier	ZEND_INIT_FCALL		1373069	0					
ANR	1373242	Label	case ZEND_INIT_USER_CALL :	73:3:2760:2784	1373069	8	True				
ANR	1373243	Identifier	ZEND_INIT_USER_CALL		1373069	0					
ANR	1373244	ExpressionStatement	call_stack [ call ] . opline = opline	74:4:2790:2822	1373069	9	True				
ANR	1373245	AssignmentExpression	call_stack [ call ] . opline = opline		1373069	0		=			
ANR	1373246	MemberAccess	call_stack [ call ] . opline		1373069	0					
ANR	1373247	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373248	Identifier	call_stack		1373069	0					
ANR	1373249	Identifier	call		1373069	1					
ANR	1373250	Identifier	opline		1373069	1					
ANR	1373251	Identifier	opline		1373069	1					
ANR	1373252	ExpressionStatement	call ++	75:4:2828:2834	1373069	10	True				
ANR	1373253	PostIncDecOperationExpression	call ++		1373069	0					
ANR	1373254	Identifier	call		1373069	0					
ANR	1373255	IncDec	++		1373069	1					
ANR	1373256	BreakStatement	break ;	76:4:2840:2845	1373069	11	True				
ANR	1373257	Label	case ZEND_DO_FCALL :	77:3:2850:2868	1373069	12	True				
ANR	1373258	Identifier	ZEND_DO_FCALL		1373069	0					
ANR	1373259	Label	case ZEND_DO_ICALL :	78:3:2873:2891	1373069	13	True				
ANR	1373260	Identifier	ZEND_DO_ICALL		1373069	0					
ANR	1373261	Label	case ZEND_DO_UCALL :	79:3:2896:2914	1373069	14	True				
ANR	1373262	Identifier	ZEND_DO_UCALL		1373069	0					
ANR	1373263	Label	case ZEND_DO_FCALL_BY_NAME :	80:3:2919:2945	1373069	15	True				
ANR	1373264	Identifier	ZEND_DO_FCALL_BY_NAME		1373069	0					
ANR	1373265	ExpressionStatement	call --	81:4:2951:2957	1373069	16	True				
ANR	1373266	PostIncDecOperationExpression	call --		1373069	0					
ANR	1373267	Identifier	call		1373069	0					
ANR	1373268	IncDec	--		1373069	1					
ANR	1373269	IfStatement	if ( call_stack [ call ] . func && call_stack [ call ] . opline )		1373069	17					
ANR	1373270	Condition	call_stack [ call ] . func && call_stack [ call ] . opline	82:8:2967:3014	1373069	0	True				
ANR	1373271	AndExpression	call_stack [ call ] . func && call_stack [ call ] . opline		1373069	0		&&			
ANR	1373272	MemberAccess	call_stack [ call ] . func		1373069	0					
ANR	1373273	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373274	Identifier	call_stack		1373069	0					
ANR	1373275	Identifier	call		1373069	1					
ANR	1373276	Identifier	func		1373069	1					
ANR	1373277	MemberAccess	call_stack [ call ] . opline		1373069	1					
ANR	1373278	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373279	Identifier	call_stack		1373069	0					
ANR	1373280	Identifier	call		1373069	1					
ANR	1373281	Identifier	opline		1373069	1					
ANR	1373282	CompoundStatement		42:5:1206:1246	1373069	1					
ANR	1373283	IdentifierDeclStatement	zend_op * fcall = call_stack [ call ] . opline ;	83:5:3024:3064	1373069	0	True				
ANR	1373284	IdentifierDecl	* fcall = call_stack [ call ] . opline		1373069	0					
ANR	1373285	IdentifierDeclType	zend_op *		1373069	0					
ANR	1373286	Identifier	fcall		1373069	1					
ANR	1373287	AssignmentExpression	* fcall = call_stack [ call ] . opline		1373069	2		=			
ANR	1373288	Identifier	fcall		1373069	0					
ANR	1373289	MemberAccess	call_stack [ call ] . opline		1373069	1					
ANR	1373290	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373291	Identifier	call_stack		1373069	0					
ANR	1373292	Identifier	call		1373069	1					
ANR	1373293	Identifier	opline		1373069	1					
ANR	1373294	IfStatement	if ( fcall -> opcode == ZEND_INIT_FCALL_BY_NAME )		1373069	1					
ANR	1373295	Condition	fcall -> opcode == ZEND_INIT_FCALL_BY_NAME	85:9:3076:3115	1373069	0	True				
ANR	1373296	EqualityExpression	fcall -> opcode == ZEND_INIT_FCALL_BY_NAME		1373069	0		==			
ANR	1373297	PtrMemberAccess	fcall -> opcode		1373069	0					
ANR	1373298	Identifier	fcall		1373069	0					
ANR	1373299	Identifier	opcode		1373069	1					
ANR	1373300	Identifier	ZEND_INIT_FCALL_BY_NAME		1373069	1					
ANR	1373301	CompoundStatement		44:51:1300:1300	1373069	1					
ANR	1373302	ExpressionStatement	fcall -> opcode = ZEND_INIT_FCALL	86:6:3126:3157	1373069	0	True				
ANR	1373303	AssignmentExpression	fcall -> opcode = ZEND_INIT_FCALL		1373069	0		=			
ANR	1373304	PtrMemberAccess	fcall -> opcode		1373069	0					
ANR	1373305	Identifier	fcall		1373069	0					
ANR	1373306	Identifier	opcode		1373069	1					
ANR	1373307	Identifier	ZEND_INIT_FCALL		1373069	1					
ANR	1373308	ExpressionStatement	"fcall -> op1 . num = zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"	87:6:3165:3251	1373069	1	True				
ANR	1373309	AssignmentExpression	"fcall -> op1 . num = zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"		1373069	0		=			
ANR	1373310	MemberAccess	fcall -> op1 . num		1373069	0					
ANR	1373311	PtrMemberAccess	fcall -> op1		1373069	0					
ANR	1373312	Identifier	fcall		1373069	0					
ANR	1373313	Identifier	op1		1373069	1					
ANR	1373314	Identifier	num		1373069	1					
ANR	1373315	CallExpression	"zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"		1373069	1					
ANR	1373316	Callee	zend_vm_calc_used_stack		1373069	0					
ANR	1373317	Identifier	zend_vm_calc_used_stack		1373069	0					
ANR	1373318	ArgumentList	fcall -> extended_value		1373069	1					
ANR	1373319	Argument	fcall -> extended_value		1373069	0					
ANR	1373320	PtrMemberAccess	fcall -> extended_value		1373069	0					
ANR	1373321	Identifier	fcall		1373069	0					
ANR	1373322	Identifier	extended_value		1373069	1					
ANR	1373323	Argument	call_stack [ call ] . func		1373069	1					
ANR	1373324	MemberAccess	call_stack [ call ] . func		1373069	0					
ANR	1373325	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373326	Identifier	call_stack		1373069	0					
ANR	1373327	Identifier	call		1373069	1					
ANR	1373328	Identifier	func		1373069	1					
ANR	1373329	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] ) = Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )	88:6:3259:3372	1373069	2	True				
ANR	1373330	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] ) = Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )		1373069	0		=			
ANR	1373331	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] )		1373069	0					
ANR	1373332	Callee	Z_CACHE_SLOT		1373069	0					
ANR	1373333	Identifier	Z_CACHE_SLOT		1373069	0					
ANR	1373334	ArgumentList	op_array -> literals [ fcall -> op2 . constant + 1 ]		1373069	1					
ANR	1373335	Argument	op_array -> literals [ fcall -> op2 . constant + 1 ]		1373069	0					
ANR	1373336	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant + 1 ]		1373069	0					
ANR	1373337	PtrMemberAccess	op_array -> literals		1373069	0					
ANR	1373338	Identifier	op_array		1373069	0					
ANR	1373339	Identifier	literals		1373069	1					
ANR	1373340	AdditiveExpression	fcall -> op2 . constant + 1		1373069	1		+			
ANR	1373341	MemberAccess	fcall -> op2 . constant		1373069	0					
ANR	1373342	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373343	Identifier	fcall		1373069	0					
ANR	1373344	Identifier	op2		1373069	1					
ANR	1373345	Identifier	constant		1373069	1					
ANR	1373346	PrimaryExpression	1		1373069	1					
ANR	1373347	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )		1373069	1					
ANR	1373348	Callee	Z_CACHE_SLOT		1373069	0					
ANR	1373349	Identifier	Z_CACHE_SLOT		1373069	0					
ANR	1373350	ArgumentList	op_array -> literals [ fcall -> op2 . constant ]		1373069	1					
ANR	1373351	Argument	op_array -> literals [ fcall -> op2 . constant ]		1373069	0					
ANR	1373352	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant ]		1373069	0					
ANR	1373353	PtrMemberAccess	op_array -> literals		1373069	0					
ANR	1373354	Identifier	op_array		1373069	0					
ANR	1373355	Identifier	literals		1373069	1					
ANR	1373356	MemberAccess	fcall -> op2 . constant		1373069	1					
ANR	1373357	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373358	Identifier	fcall		1373069	0					
ANR	1373359	Identifier	op2		1373069	1					
ANR	1373360	Identifier	constant		1373069	1					
ANR	1373361	ExpressionStatement	literal_dtor ( & ZEND_OP2_LITERAL ( fcall ) )	89:6:3380:3418	1373069	3	True				
ANR	1373362	CallExpression	literal_dtor ( & ZEND_OP2_LITERAL ( fcall ) )		1373069	0					
ANR	1373363	Callee	literal_dtor		1373069	0					
ANR	1373364	Identifier	literal_dtor		1373069	0					
ANR	1373365	ArgumentList	& ZEND_OP2_LITERAL ( fcall )		1373069	1					
ANR	1373366	Argument	& ZEND_OP2_LITERAL ( fcall )		1373069	0					
ANR	1373367	UnaryOperationExpression	& ZEND_OP2_LITERAL ( fcall )		1373069	0					
ANR	1373368	UnaryOperator	&		1373069	0					
ANR	1373369	CallExpression	ZEND_OP2_LITERAL ( fcall )		1373069	1					
ANR	1373370	Callee	ZEND_OP2_LITERAL		1373069	0					
ANR	1373371	Identifier	ZEND_OP2_LITERAL		1373069	0					
ANR	1373372	ArgumentList	fcall		1373069	1					
ANR	1373373	Argument	fcall		1373069	0					
ANR	1373374	Identifier	fcall		1373069	0					
ANR	1373375	ExpressionStatement	fcall -> op2 . constant = fcall -> op2 . constant + 1	90:6:3426:3471	1373069	4	True				
ANR	1373376	AssignmentExpression	fcall -> op2 . constant = fcall -> op2 . constant + 1		1373069	0		=			
ANR	1373377	MemberAccess	fcall -> op2 . constant		1373069	0					
ANR	1373378	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373379	Identifier	fcall		1373069	0					
ANR	1373380	Identifier	op2		1373069	1					
ANR	1373381	Identifier	constant		1373069	1					
ANR	1373382	AdditiveExpression	fcall -> op2 . constant + 1		1373069	1		+			
ANR	1373383	MemberAccess	fcall -> op2 . constant		1373069	0					
ANR	1373384	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373385	Identifier	fcall		1373069	0					
ANR	1373386	Identifier	op2		1373069	1					
ANR	1373387	Identifier	constant		1373069	1					
ANR	1373388	PrimaryExpression	1		1373069	1					
ANR	1373389	ExpressionStatement	"opline -> opcode = zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"	91:6:3479:3552	1373069	5	True				
ANR	1373390	AssignmentExpression	"opline -> opcode = zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"		1373069	0		=			
ANR	1373391	PtrMemberAccess	opline -> opcode		1373069	0					
ANR	1373392	Identifier	opline		1373069	0					
ANR	1373393	Identifier	opcode		1373069	1					
ANR	1373394	CallExpression	"zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"		1373069	1					
ANR	1373395	Callee	zend_get_call_op		1373069	0					
ANR	1373396	Identifier	zend_get_call_op		1373069	0					
ANR	1373397	ArgumentList	ZEND_INIT_FCALL		1373069	1					
ANR	1373398	Argument	ZEND_INIT_FCALL		1373069	0					
ANR	1373399	Identifier	ZEND_INIT_FCALL		1373069	0					
ANR	1373400	Argument	call_stack [ call ] . func		1373069	1					
ANR	1373401	MemberAccess	call_stack [ call ] . func		1373069	0					
ANR	1373402	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373403	Identifier	call_stack		1373069	0					
ANR	1373404	Identifier	call		1373069	1					
ANR	1373405	Identifier	func		1373069	1					
ANR	1373406	ElseStatement	else		1373069	0					
ANR	1373407	IfStatement	if ( fcall -> opcode == ZEND_INIT_NS_FCALL_BY_NAME )		1373069	0					
ANR	1373408	Condition	fcall -> opcode == ZEND_INIT_NS_FCALL_BY_NAME	92:16:3570:3612	1373069	0	True				
ANR	1373409	EqualityExpression	fcall -> opcode == ZEND_INIT_NS_FCALL_BY_NAME		1373069	0		==			
ANR	1373410	PtrMemberAccess	fcall -> opcode		1373069	0					
ANR	1373411	Identifier	fcall		1373069	0					
ANR	1373412	Identifier	opcode		1373069	1					
ANR	1373413	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		1373069	1					
ANR	1373414	CompoundStatement		51:61:1797:1797	1373069	1					
ANR	1373415	ExpressionStatement	fcall -> opcode = ZEND_INIT_FCALL	93:6:3623:3654	1373069	0	True				
ANR	1373416	AssignmentExpression	fcall -> opcode = ZEND_INIT_FCALL		1373069	0		=			
ANR	1373417	PtrMemberAccess	fcall -> opcode		1373069	0					
ANR	1373418	Identifier	fcall		1373069	0					
ANR	1373419	Identifier	opcode		1373069	1					
ANR	1373420	Identifier	ZEND_INIT_FCALL		1373069	1					
ANR	1373421	ExpressionStatement	"fcall -> op1 . num = zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"	94:6:3662:3748	1373069	1	True				
ANR	1373422	AssignmentExpression	"fcall -> op1 . num = zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"		1373069	0		=			
ANR	1373423	MemberAccess	fcall -> op1 . num		1373069	0					
ANR	1373424	PtrMemberAccess	fcall -> op1		1373069	0					
ANR	1373425	Identifier	fcall		1373069	0					
ANR	1373426	Identifier	op1		1373069	1					
ANR	1373427	Identifier	num		1373069	1					
ANR	1373428	CallExpression	"zend_vm_calc_used_stack ( fcall -> extended_value , call_stack [ call ] . func )"		1373069	1					
ANR	1373429	Callee	zend_vm_calc_used_stack		1373069	0					
ANR	1373430	Identifier	zend_vm_calc_used_stack		1373069	0					
ANR	1373431	ArgumentList	fcall -> extended_value		1373069	1					
ANR	1373432	Argument	fcall -> extended_value		1373069	0					
ANR	1373433	PtrMemberAccess	fcall -> extended_value		1373069	0					
ANR	1373434	Identifier	fcall		1373069	0					
ANR	1373435	Identifier	extended_value		1373069	1					
ANR	1373436	Argument	call_stack [ call ] . func		1373069	1					
ANR	1373437	MemberAccess	call_stack [ call ] . func		1373069	0					
ANR	1373438	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373439	Identifier	call_stack		1373069	0					
ANR	1373440	Identifier	call		1373069	1					
ANR	1373441	Identifier	func		1373069	1					
ANR	1373442	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] ) = Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )	95:6:3756:3869	1373069	2	True				
ANR	1373443	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] ) = Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )		1373069	0		=			
ANR	1373444	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant + 1 ] )		1373069	0					
ANR	1373445	Callee	Z_CACHE_SLOT		1373069	0					
ANR	1373446	Identifier	Z_CACHE_SLOT		1373069	0					
ANR	1373447	ArgumentList	op_array -> literals [ fcall -> op2 . constant + 1 ]		1373069	1					
ANR	1373448	Argument	op_array -> literals [ fcall -> op2 . constant + 1 ]		1373069	0					
ANR	1373449	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant + 1 ]		1373069	0					
ANR	1373450	PtrMemberAccess	op_array -> literals		1373069	0					
ANR	1373451	Identifier	op_array		1373069	0					
ANR	1373452	Identifier	literals		1373069	1					
ANR	1373453	AdditiveExpression	fcall -> op2 . constant + 1		1373069	1		+			
ANR	1373454	MemberAccess	fcall -> op2 . constant		1373069	0					
ANR	1373455	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373456	Identifier	fcall		1373069	0					
ANR	1373457	Identifier	op2		1373069	1					
ANR	1373458	Identifier	constant		1373069	1					
ANR	1373459	PrimaryExpression	1		1373069	1					
ANR	1373460	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ fcall -> op2 . constant ] )		1373069	1					
ANR	1373461	Callee	Z_CACHE_SLOT		1373069	0					
ANR	1373462	Identifier	Z_CACHE_SLOT		1373069	0					
ANR	1373463	ArgumentList	op_array -> literals [ fcall -> op2 . constant ]		1373069	1					
ANR	1373464	Argument	op_array -> literals [ fcall -> op2 . constant ]		1373069	0					
ANR	1373465	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant ]		1373069	0					
ANR	1373466	PtrMemberAccess	op_array -> literals		1373069	0					
ANR	1373467	Identifier	op_array		1373069	0					
ANR	1373468	Identifier	literals		1373069	1					
ANR	1373469	MemberAccess	fcall -> op2 . constant		1373069	1					
ANR	1373470	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373471	Identifier	fcall		1373069	0					
ANR	1373472	Identifier	op2		1373069	1					
ANR	1373473	Identifier	constant		1373069	1					
ANR	1373474	ExpressionStatement	literal_dtor ( & op_array -> literals [ fcall -> op2 . constant ] )	96:6:3877:3931	1373069	3	True				
ANR	1373475	CallExpression	literal_dtor ( & op_array -> literals [ fcall -> op2 . constant ] )		1373069	0					
ANR	1373476	Callee	literal_dtor		1373069	0					
ANR	1373477	Identifier	literal_dtor		1373069	0					
ANR	1373478	ArgumentList	& op_array -> literals [ fcall -> op2 . constant ]		1373069	1					
ANR	1373479	Argument	& op_array -> literals [ fcall -> op2 . constant ]		1373069	0					
ANR	1373480	UnaryOperationExpression	& op_array -> literals [ fcall -> op2 . constant ]		1373069	0					
ANR	1373481	UnaryOperator	&		1373069	0					
ANR	1373482	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant ]		1373069	1					
ANR	1373483	PtrMemberAccess	op_array -> literals		1373069	0					
ANR	1373484	Identifier	op_array		1373069	0					
ANR	1373485	Identifier	literals		1373069	1					
ANR	1373486	MemberAccess	fcall -> op2 . constant		1373069	1					
ANR	1373487	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373488	Identifier	fcall		1373069	0					
ANR	1373489	Identifier	op2		1373069	1					
ANR	1373490	Identifier	constant		1373069	1					
ANR	1373491	ExpressionStatement	literal_dtor ( & op_array -> literals [ fcall -> op2 . constant + 2 ] )	97:6:3939:3997	1373069	4	True				
ANR	1373492	CallExpression	literal_dtor ( & op_array -> literals [ fcall -> op2 . constant + 2 ] )		1373069	0					
ANR	1373493	Callee	literal_dtor		1373069	0					
ANR	1373494	Identifier	literal_dtor		1373069	0					
ANR	1373495	ArgumentList	& op_array -> literals [ fcall -> op2 . constant + 2 ]		1373069	1					
ANR	1373496	Argument	& op_array -> literals [ fcall -> op2 . constant + 2 ]		1373069	0					
ANR	1373497	UnaryOperationExpression	& op_array -> literals [ fcall -> op2 . constant + 2 ]		1373069	0					
ANR	1373498	UnaryOperator	&		1373069	0					
ANR	1373499	ArrayIndexing	op_array -> literals [ fcall -> op2 . constant + 2 ]		1373069	1					
ANR	1373500	PtrMemberAccess	op_array -> literals		1373069	0					
ANR	1373501	Identifier	op_array		1373069	0					
ANR	1373502	Identifier	literals		1373069	1					
ANR	1373503	AdditiveExpression	fcall -> op2 . constant + 2		1373069	1		+			
ANR	1373504	MemberAccess	fcall -> op2 . constant		1373069	0					
ANR	1373505	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373506	Identifier	fcall		1373069	0					
ANR	1373507	Identifier	op2		1373069	1					
ANR	1373508	Identifier	constant		1373069	1					
ANR	1373509	PrimaryExpression	2		1373069	1					
ANR	1373510	ExpressionStatement	fcall -> op2 . constant = fcall -> op2 . constant + 1	98:6:4005:4050	1373069	5	True				
ANR	1373511	AssignmentExpression	fcall -> op2 . constant = fcall -> op2 . constant + 1		1373069	0		=			
ANR	1373512	MemberAccess	fcall -> op2 . constant		1373069	0					
ANR	1373513	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373514	Identifier	fcall		1373069	0					
ANR	1373515	Identifier	op2		1373069	1					
ANR	1373516	Identifier	constant		1373069	1					
ANR	1373517	AdditiveExpression	fcall -> op2 . constant + 1		1373069	1		+			
ANR	1373518	MemberAccess	fcall -> op2 . constant		1373069	0					
ANR	1373519	PtrMemberAccess	fcall -> op2		1373069	0					
ANR	1373520	Identifier	fcall		1373069	0					
ANR	1373521	Identifier	op2		1373069	1					
ANR	1373522	Identifier	constant		1373069	1					
ANR	1373523	PrimaryExpression	1		1373069	1					
ANR	1373524	ExpressionStatement	"opline -> opcode = zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"	99:6:4058:4131	1373069	6	True				
ANR	1373525	AssignmentExpression	"opline -> opcode = zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"		1373069	0		=			
ANR	1373526	PtrMemberAccess	opline -> opcode		1373069	0					
ANR	1373527	Identifier	opline		1373069	0					
ANR	1373528	Identifier	opcode		1373069	1					
ANR	1373529	CallExpression	"zend_get_call_op ( ZEND_INIT_FCALL , call_stack [ call ] . func )"		1373069	1					
ANR	1373530	Callee	zend_get_call_op		1373069	0					
ANR	1373531	Identifier	zend_get_call_op		1373069	0					
ANR	1373532	ArgumentList	ZEND_INIT_FCALL		1373069	1					
ANR	1373533	Argument	ZEND_INIT_FCALL		1373069	0					
ANR	1373534	Identifier	ZEND_INIT_FCALL		1373069	0					
ANR	1373535	Argument	call_stack [ call ] . func		1373069	1					
ANR	1373536	MemberAccess	call_stack [ call ] . func		1373069	0					
ANR	1373537	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373538	Identifier	call_stack		1373069	0					
ANR	1373539	Identifier	call		1373069	1					
ANR	1373540	Identifier	func		1373069	1					
ANR	1373541	ElseStatement	else		1373069	0					
ANR	1373542	CompoundStatement		59:12:2327:2327	1373069	0					
ANR	1373543	ExpressionStatement	ZEND_ASSERT ( 0 )	101:6:4153:4167	1373069	0	True				
ANR	1373544	CallExpression	ZEND_ASSERT ( 0 )		1373069	0					
ANR	1373545	Callee	ZEND_ASSERT		1373069	0					
ANR	1373546	Identifier	ZEND_ASSERT		1373069	0					
ANR	1373547	ArgumentList	0		1373069	1					
ANR	1373548	Argument	0		1373069	0					
ANR	1373549	PrimaryExpression	0		1373069	0					
ANR	1373550	ExpressionStatement	call_stack [ call ] . func = NULL	104:4:4186:4214	1373069	18	True				
ANR	1373551	AssignmentExpression	call_stack [ call ] . func = NULL		1373069	0		=			
ANR	1373552	MemberAccess	call_stack [ call ] . func		1373069	0					
ANR	1373553	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373554	Identifier	call_stack		1373069	0					
ANR	1373555	Identifier	call		1373069	1					
ANR	1373556	Identifier	func		1373069	1					
ANR	1373557	Identifier	NULL		1373069	1					
ANR	1373558	ExpressionStatement	call_stack [ call ] . opline = NULL	105:4:4220:4250	1373069	19	True				
ANR	1373559	AssignmentExpression	call_stack [ call ] . opline = NULL		1373069	0		=			
ANR	1373560	MemberAccess	call_stack [ call ] . opline		1373069	0					
ANR	1373561	ArrayIndexing	call_stack [ call ]		1373069	0					
ANR	1373562	Identifier	call_stack		1373069	0					
ANR	1373563	Identifier	call		1373069	1					
ANR	1373564	Identifier	opline		1373069	1					
ANR	1373565	Identifier	NULL		1373069	1					
ANR	1373566	BreakStatement	break ;	106:4:4256:4261	1373069	20	True				
ANR	1373567	Label	case ZEND_FETCH_FUNC_ARG :	107:3:4266:4290	1373069	21	True				
ANR	1373568	Identifier	ZEND_FETCH_FUNC_ARG		1373069	0					
ANR	1373569	Label	case ZEND_FETCH_OBJ_FUNC_ARG :	108:3:4295:4323	1373069	22	True				
ANR	1373570	Identifier	ZEND_FETCH_OBJ_FUNC_ARG		1373069	0					
ANR	1373571	Label	case ZEND_FETCH_DIM_FUNC_ARG :	109:3:4328:4356	1373069	23	True				
ANR	1373572	Identifier	ZEND_FETCH_DIM_FUNC_ARG		1373069	0					
ANR	1373573	IfStatement	if ( call_stack [ call - 1 ] . func )		1373069	24					
ANR	1373574	Condition	call_stack [ call - 1 ] . func	110:8:4366:4390	1373069	0	True				
ANR	1373575	MemberAccess	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373576	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373577	Identifier	call_stack		1373069	0					
ANR	1373578	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373579	Identifier	call		1373069	0					
ANR	1373580	PrimaryExpression	1		1373069	1					
ANR	1373581	Identifier	func		1373069	1					
ANR	1373582	CompoundStatement		69:35:2575:2575	1373069	1					
ANR	1373583	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , ( opline -> extended_value & ZEND_FETCH_ARG_MASK ) ) )"		1373069	0					
ANR	1373584	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , ( opline -> extended_value & ZEND_FETCH_ARG_MASK ) )"	111:9:4404:4503	1373069	0	True				
ANR	1373585	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , ( opline -> extended_value & ZEND_FETCH_ARG_MASK ) )"		1373069	0					
ANR	1373586	Callee	ARG_SHOULD_BE_SENT_BY_REF		1373069	0					
ANR	1373587	Identifier	ARG_SHOULD_BE_SENT_BY_REF		1373069	0					
ANR	1373588	ArgumentList	call_stack [ call - 1 ] . func		1373069	1					
ANR	1373589	Argument	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373590	MemberAccess	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373591	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373592	Identifier	call_stack		1373069	0					
ANR	1373593	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373594	Identifier	call		1373069	0					
ANR	1373595	PrimaryExpression	1		1373069	1					
ANR	1373596	Identifier	func		1373069	1					
ANR	1373597	Argument	opline -> extended_value & ZEND_FETCH_ARG_MASK		1373069	1					
ANR	1373598	BitAndExpression	opline -> extended_value & ZEND_FETCH_ARG_MASK		1373069	0		&			
ANR	1373599	PtrMemberAccess	opline -> extended_value		1373069	0					
ANR	1373600	Identifier	opline		1373069	0					
ANR	1373601	Identifier	extended_value		1373069	1					
ANR	1373602	Identifier	ZEND_FETCH_ARG_MASK		1373069	1					
ANR	1373603	CompoundStatement		70:111:2688:2688	1373069	1					
ANR	1373604	ExpressionStatement	opline -> extended_value &= ZEND_FETCH_TYPE_MASK	112:6:4514:4560	1373069	0	True				
ANR	1373605	AssignmentExpression	opline -> extended_value &= ZEND_FETCH_TYPE_MASK		1373069	0		&=			
ANR	1373606	PtrMemberAccess	opline -> extended_value		1373069	0					
ANR	1373607	Identifier	opline		1373069	0					
ANR	1373608	Identifier	extended_value		1373069	1					
ANR	1373609	Identifier	ZEND_FETCH_TYPE_MASK		1373069	1					
ANR	1373610	ExpressionStatement	opline -> opcode -= 9	113:6:4568:4587	1373069	1	True				
ANR	1373611	AssignmentExpression	opline -> opcode -= 9		1373069	0		-=			
ANR	1373612	PtrMemberAccess	opline -> opcode		1373069	0					
ANR	1373613	Identifier	opline		1373069	0					
ANR	1373614	Identifier	opcode		1373069	1					
ANR	1373615	PrimaryExpression	9		1373069	1					
ANR	1373616	ElseStatement	else		1373069	0					
ANR	1373617	CompoundStatement		73:12:2783:2783	1373069	0					
ANR	1373618	ExpressionStatement	opline -> extended_value &= ZEND_FETCH_TYPE_MASK	115:6:4609:4655	1373069	0	True				
ANR	1373619	AssignmentExpression	opline -> extended_value &= ZEND_FETCH_TYPE_MASK		1373069	0		&=			
ANR	1373620	PtrMemberAccess	opline -> extended_value		1373069	0					
ANR	1373621	Identifier	opline		1373069	0					
ANR	1373622	Identifier	extended_value		1373069	1					
ANR	1373623	Identifier	ZEND_FETCH_TYPE_MASK		1373069	1					
ANR	1373624	ExpressionStatement	opline -> opcode -= 12	116:6:4663:4683	1373069	1	True				
ANR	1373625	AssignmentExpression	opline -> opcode -= 12		1373069	0		-=			
ANR	1373626	PtrMemberAccess	opline -> opcode		1373069	0					
ANR	1373627	Identifier	opline		1373069	0					
ANR	1373628	Identifier	opcode		1373069	1					
ANR	1373629	PrimaryExpression	12		1373069	1					
ANR	1373630	BreakStatement	break ;	119:4:4702:4707	1373069	25	True				
ANR	1373631	Label	case ZEND_SEND_VAL_EX :	120:3:4712:4733	1373069	26	True				
ANR	1373632	Identifier	ZEND_SEND_VAL_EX		1373069	0					
ANR	1373633	IfStatement	if ( call_stack [ call - 1 ] . func )		1373069	27					
ANR	1373634	Condition	call_stack [ call - 1 ] . func	121:8:4743:4767	1373069	0	True				
ANR	1373635	MemberAccess	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373636	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373637	Identifier	call_stack		1373069	0					
ANR	1373638	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373639	Identifier	call		1373069	0					
ANR	1373640	PrimaryExpression	1		1373069	1					
ANR	1373641	Identifier	func		1373069	1					
ANR	1373642	CompoundStatement		80:35:2952:2952	1373069	1					
ANR	1373643	IfStatement	"if ( ARG_MUST_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num ) )"		1373069	0					
ANR	1373644	Condition	"ARG_MUST_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"	122:9:4781:4847	1373069	0	True				
ANR	1373645	CallExpression	"ARG_MUST_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"		1373069	0					
ANR	1373646	Callee	ARG_MUST_BE_SENT_BY_REF		1373069	0					
ANR	1373647	Identifier	ARG_MUST_BE_SENT_BY_REF		1373069	0					
ANR	1373648	ArgumentList	call_stack [ call - 1 ] . func		1373069	1					
ANR	1373649	Argument	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373650	MemberAccess	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373651	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373652	Identifier	call_stack		1373069	0					
ANR	1373653	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373654	Identifier	call		1373069	0					
ANR	1373655	PrimaryExpression	1		1373069	1					
ANR	1373656	Identifier	func		1373069	1					
ANR	1373657	Argument	opline -> op2 . num		1373069	1					
ANR	1373658	MemberAccess	opline -> op2 . num		1373069	0					
ANR	1373659	PtrMemberAccess	opline -> op2		1373069	0					
ANR	1373660	Identifier	opline		1373069	0					
ANR	1373661	Identifier	op2		1373069	1					
ANR	1373662	Identifier	num		1373069	1					
ANR	1373663	CompoundStatement		81:78:3032:3032	1373069	1					
ANR	1373664	ExpressionStatement	call_stack [ call - 1 ] . opline = NULL	124:6:4930:4964	1373069	0	True				
ANR	1373665	AssignmentExpression	call_stack [ call - 1 ] . opline = NULL		1373069	0		=			
ANR	1373666	MemberAccess	call_stack [ call - 1 ] . opline		1373069	0					
ANR	1373667	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373668	Identifier	call_stack		1373069	0					
ANR	1373669	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373670	Identifier	call		1373069	0					
ANR	1373671	PrimaryExpression	1		1373069	1					
ANR	1373672	Identifier	opline		1373069	1					
ANR	1373673	Identifier	NULL		1373069	1					
ANR	1373674	ElseStatement	else		1373069	0					
ANR	1373675	CompoundStatement		84:12:3160:3160	1373069	0					
ANR	1373676	ExpressionStatement	opline -> opcode = ZEND_SEND_VAL	126:6:4986:5016	1373069	0	True				
ANR	1373677	AssignmentExpression	opline -> opcode = ZEND_SEND_VAL		1373069	0		=			
ANR	1373678	PtrMemberAccess	opline -> opcode		1373069	0					
ANR	1373679	Identifier	opline		1373069	0					
ANR	1373680	Identifier	opcode		1373069	1					
ANR	1373681	Identifier	ZEND_SEND_VAL		1373069	1					
ANR	1373682	BreakStatement	break ;	129:4:5035:5040	1373069	28	True				
ANR	1373683	Label	case ZEND_SEND_VAR_EX :	130:3:5045:5066	1373069	29	True				
ANR	1373684	Identifier	ZEND_SEND_VAR_EX		1373069	0					
ANR	1373685	IfStatement	if ( call_stack [ call - 1 ] . func )		1373069	30					
ANR	1373686	Condition	call_stack [ call - 1 ] . func	131:8:5076:5100	1373069	0	True				
ANR	1373687	MemberAccess	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373688	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373689	Identifier	call_stack		1373069	0					
ANR	1373690	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373691	Identifier	call		1373069	0					
ANR	1373692	PrimaryExpression	1		1373069	1					
ANR	1373693	Identifier	func		1373069	1					
ANR	1373694	CompoundStatement		90:35:3285:3285	1373069	1					
ANR	1373695	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num ) )"		1373069	0					
ANR	1373696	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"	132:9:5114:5182	1373069	0	True				
ANR	1373697	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"		1373069	0					
ANR	1373698	Callee	ARG_SHOULD_BE_SENT_BY_REF		1373069	0					
ANR	1373699	Identifier	ARG_SHOULD_BE_SENT_BY_REF		1373069	0					
ANR	1373700	ArgumentList	call_stack [ call - 1 ] . func		1373069	1					
ANR	1373701	Argument	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373702	MemberAccess	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373703	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373704	Identifier	call_stack		1373069	0					
ANR	1373705	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373706	Identifier	call		1373069	0					
ANR	1373707	PrimaryExpression	1		1373069	1					
ANR	1373708	Identifier	func		1373069	1					
ANR	1373709	Argument	opline -> op2 . num		1373069	1					
ANR	1373710	MemberAccess	opline -> op2 . num		1373069	0					
ANR	1373711	PtrMemberAccess	opline -> op2		1373069	0					
ANR	1373712	Identifier	opline		1373069	0					
ANR	1373713	Identifier	op2		1373069	1					
ANR	1373714	Identifier	num		1373069	1					
ANR	1373715	CompoundStatement		91:80:3367:3367	1373069	1					
ANR	1373716	ExpressionStatement	opline -> opcode = ZEND_SEND_REF	133:6:5193:5223	1373069	0	True				
ANR	1373717	AssignmentExpression	opline -> opcode = ZEND_SEND_REF		1373069	0		=			
ANR	1373718	PtrMemberAccess	opline -> opcode		1373069	0					
ANR	1373719	Identifier	opline		1373069	0					
ANR	1373720	Identifier	opcode		1373069	1					
ANR	1373721	Identifier	ZEND_SEND_REF		1373069	1					
ANR	1373722	ElseStatement	else		1373069	0					
ANR	1373723	CompoundStatement		93:12:3419:3419	1373069	0					
ANR	1373724	ExpressionStatement	opline -> opcode = ZEND_SEND_VAR	135:6:5245:5275	1373069	0	True				
ANR	1373725	AssignmentExpression	opline -> opcode = ZEND_SEND_VAR		1373069	0		=			
ANR	1373726	PtrMemberAccess	opline -> opcode		1373069	0					
ANR	1373727	Identifier	opline		1373069	0					
ANR	1373728	Identifier	opcode		1373069	1					
ANR	1373729	Identifier	ZEND_SEND_VAR		1373069	1					
ANR	1373730	BreakStatement	break ;	138:4:5294:5299	1373069	31	True				
ANR	1373731	Label	case ZEND_SEND_VAR_NO_REF :	139:3:5304:5329	1373069	32	True				
ANR	1373732	Identifier	ZEND_SEND_VAR_NO_REF		1373069	0					
ANR	1373733	IfStatement	if ( ! ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND ) && call_stack [ call - 1 ] . func )		1373069	33					
ANR	1373734	Condition	! ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND ) && call_stack [ call - 1 ] . func	140:8:5339:5422	1373069	0	True				
ANR	1373735	AndExpression	! ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND ) && call_stack [ call - 1 ] . func		1373069	0		&&			
ANR	1373736	UnaryOperationExpression	! ( opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND )		1373069	0					
ANR	1373737	UnaryOperator	!		1373069	0					
ANR	1373738	BitAndExpression	opline -> extended_value & ZEND_ARG_COMPILE_TIME_BOUND		1373069	1		&			
ANR	1373739	PtrMemberAccess	opline -> extended_value		1373069	0					
ANR	1373740	Identifier	opline		1373069	0					
ANR	1373741	Identifier	extended_value		1373069	1					
ANR	1373742	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		1373069	1					
ANR	1373743	MemberAccess	call_stack [ call - 1 ] . func		1373069	1					
ANR	1373744	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373745	Identifier	call_stack		1373069	0					
ANR	1373746	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373747	Identifier	call		1373069	0					
ANR	1373748	PrimaryExpression	1		1373069	1					
ANR	1373749	Identifier	func		1373069	1					
ANR	1373750	CompoundStatement		99:94:3607:3607	1373069	1					
ANR	1373751	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num ) )"		1373069	0					
ANR	1373752	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"	141:9:5436:5504	1373069	0	True				
ANR	1373753	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( call_stack [ call - 1 ] . func , opline -> op2 . num )"		1373069	0					
ANR	1373754	Callee	ARG_SHOULD_BE_SENT_BY_REF		1373069	0					
ANR	1373755	Identifier	ARG_SHOULD_BE_SENT_BY_REF		1373069	0					
ANR	1373756	ArgumentList	call_stack [ call - 1 ] . func		1373069	1					
ANR	1373757	Argument	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373758	MemberAccess	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373759	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373760	Identifier	call_stack		1373069	0					
ANR	1373761	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373762	Identifier	call		1373069	0					
ANR	1373763	PrimaryExpression	1		1373069	1					
ANR	1373764	Identifier	func		1373069	1					
ANR	1373765	Argument	opline -> op2 . num		1373069	1					
ANR	1373766	MemberAccess	opline -> op2 . num		1373069	0					
ANR	1373767	PtrMemberAccess	opline -> op2		1373069	0					
ANR	1373768	Identifier	opline		1373069	0					
ANR	1373769	Identifier	op2		1373069	1					
ANR	1373770	Identifier	num		1373069	1					
ANR	1373771	CompoundStatement		100:80:3689:3689	1373069	1					
ANR	1373772	ExpressionStatement	opline -> extended_value |= ZEND_ARG_COMPILE_TIME_BOUND | ZEND_ARG_SEND_BY_REF	142:6:5515:5591	1373069	0	True				
ANR	1373773	AssignmentExpression	opline -> extended_value |= ZEND_ARG_COMPILE_TIME_BOUND | ZEND_ARG_SEND_BY_REF		1373069	0		|=			
ANR	1373774	PtrMemberAccess	opline -> extended_value		1373069	0					
ANR	1373775	Identifier	opline		1373069	0					
ANR	1373776	Identifier	extended_value		1373069	1					
ANR	1373777	InclusiveOrExpression	ZEND_ARG_COMPILE_TIME_BOUND | ZEND_ARG_SEND_BY_REF		1373069	1		|			
ANR	1373778	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		1373069	0					
ANR	1373779	Identifier	ZEND_ARG_SEND_BY_REF		1373069	1					
ANR	1373780	ElseStatement	else		1373069	0					
ANR	1373781	CompoundStatement		102:12:3787:3787	1373069	0					
ANR	1373782	ExpressionStatement	opline -> opcode = ZEND_SEND_VAR	144:6:5613:5643	1373069	0	True				
ANR	1373783	AssignmentExpression	opline -> opcode = ZEND_SEND_VAR		1373069	0		=			
ANR	1373784	PtrMemberAccess	opline -> opcode		1373069	0					
ANR	1373785	Identifier	opline		1373069	0					
ANR	1373786	Identifier	opcode		1373069	1					
ANR	1373787	Identifier	ZEND_SEND_VAR		1373069	1					
ANR	1373788	ExpressionStatement	opline -> extended_value = 0	145:6:5651:5677	1373069	1	True				
ANR	1373789	AssignmentExpression	opline -> extended_value = 0		1373069	0		=			
ANR	1373790	PtrMemberAccess	opline -> extended_value		1373069	0					
ANR	1373791	Identifier	opline		1373069	0					
ANR	1373792	Identifier	extended_value		1373069	1					
ANR	1373793	PrimaryExpression	0		1373069	1					
ANR	1373794	BreakStatement	break ;	148:4:5696:5701	1373069	34	True				
ANR	1373795	Label	case ZEND_SEND_REF :	150:3:5712:5730	1373069	35	True				
ANR	1373796	Identifier	ZEND_SEND_REF		1373069	0					
ANR	1373797	IfStatement	if ( opline -> extended_value != ZEND_ARG_COMPILE_TIME_BOUND && call_stack [ call - 1 ] . func )		1373069	36					
ANR	1373798	Condition	opline -> extended_value != ZEND_ARG_COMPILE_TIME_BOUND && call_stack [ call - 1 ] . func	151:8:5740:5821	1373069	0	True				
ANR	1373799	AndExpression	opline -> extended_value != ZEND_ARG_COMPILE_TIME_BOUND && call_stack [ call - 1 ] . func		1373069	0		&&			
ANR	1373800	EqualityExpression	opline -> extended_value != ZEND_ARG_COMPILE_TIME_BOUND		1373069	0		!=			
ANR	1373801	PtrMemberAccess	opline -> extended_value		1373069	0					
ANR	1373802	Identifier	opline		1373069	0					
ANR	1373803	Identifier	extended_value		1373069	1					
ANR	1373804	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		1373069	1					
ANR	1373805	MemberAccess	call_stack [ call - 1 ] . func		1373069	1					
ANR	1373806	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373807	Identifier	call_stack		1373069	0					
ANR	1373808	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373809	Identifier	call		1373069	0					
ANR	1373810	PrimaryExpression	1		1373069	1					
ANR	1373811	Identifier	func		1373069	1					
ANR	1373812	CompoundStatement		110:92:4006:4006	1373069	1					
ANR	1373813	ExpressionStatement	call_stack [ call - 1 ] . opline = NULL	153:5:5885:5919	1373069	0	True				
ANR	1373814	AssignmentExpression	call_stack [ call - 1 ] . opline = NULL		1373069	0		=			
ANR	1373815	MemberAccess	call_stack [ call - 1 ] . opline		1373069	0					
ANR	1373816	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373817	Identifier	call_stack		1373069	0					
ANR	1373818	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373819	Identifier	call		1373069	0					
ANR	1373820	PrimaryExpression	1		1373069	1					
ANR	1373821	Identifier	opline		1373069	1					
ANR	1373822	Identifier	NULL		1373069	1					
ANR	1373823	BreakStatement	break ;	155:4:5931:5936	1373069	37	True				
ANR	1373824	Label	case ZEND_SEND_UNPACK :	157:3:5948:5969	1373069	38	True				
ANR	1373825	Identifier	ZEND_SEND_UNPACK		1373069	0					
ANR	1373826	ExpressionStatement	call_stack [ call - 1 ] . func = NULL	158:4:5975:6007	1373069	39	True				
ANR	1373827	AssignmentExpression	call_stack [ call - 1 ] . func = NULL		1373069	0		=			
ANR	1373828	MemberAccess	call_stack [ call - 1 ] . func		1373069	0					
ANR	1373829	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373830	Identifier	call_stack		1373069	0					
ANR	1373831	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373832	Identifier	call		1373069	0					
ANR	1373833	PrimaryExpression	1		1373069	1					
ANR	1373834	Identifier	func		1373069	1					
ANR	1373835	Identifier	NULL		1373069	1					
ANR	1373836	ExpressionStatement	call_stack [ call - 1 ] . opline = NULL	159:4:6013:6047	1373069	40	True				
ANR	1373837	AssignmentExpression	call_stack [ call - 1 ] . opline = NULL		1373069	0		=			
ANR	1373838	MemberAccess	call_stack [ call - 1 ] . opline		1373069	0					
ANR	1373839	ArrayIndexing	call_stack [ call - 1 ]		1373069	0					
ANR	1373840	Identifier	call_stack		1373069	0					
ANR	1373841	AdditiveExpression	call - 1		1373069	1		-			
ANR	1373842	Identifier	call		1373069	0					
ANR	1373843	PrimaryExpression	1		1373069	1					
ANR	1373844	Identifier	opline		1373069	1					
ANR	1373845	Identifier	NULL		1373069	1					
ANR	1373846	BreakStatement	break ;	160:4:6053:6058	1373069	41	True				
ANR	1373847	Label	default :	161:3:6063:6070	1373069	42	True				
ANR	1373848	Identifier	default		1373069	0					
ANR	1373849	BreakStatement	break ;	162:4:6076:6081	1373069	43	True				
ANR	1373850	ExpressionStatement	opline ++	164:2:6089:6097	1373069	1	True				
ANR	1373851	PostIncDecOperationExpression	opline ++		1373069	0					
ANR	1373852	Identifier	opline		1373069	0					
ANR	1373853	IncDec	++		1373069	1					
ANR	1373854	ExpressionStatement	"zend_arena_release ( & ctx -> arena , checkpoint )"	167:1:6104:6147	1373069	9	True				
ANR	1373855	CallExpression	"zend_arena_release ( & ctx -> arena , checkpoint )"		1373069	0					
ANR	1373856	Callee	zend_arena_release		1373069	0					
ANR	1373857	Identifier	zend_arena_release		1373069	0					
ANR	1373858	ArgumentList	& ctx -> arena		1373069	1					
ANR	1373859	Argument	& ctx -> arena		1373069	0					
ANR	1373860	UnaryOperationExpression	& ctx -> arena		1373069	0					
ANR	1373861	UnaryOperator	&		1373069	0					
ANR	1373862	PtrMemberAccess	ctx -> arena		1373069	1					
ANR	1373863	Identifier	ctx		1373069	0					
ANR	1373864	Identifier	arena		1373069	1					
ANR	1373865	Argument	checkpoint		1373069	1					
ANR	1373866	Identifier	checkpoint		1373069	0					
ANR	1373867	ReturnType	void		1373069	1					
ANR	1373868	Identifier	optimize_func_calls		1373069	2					
ANR	1373869	ParameterList	"zend_op_array * op_array , zend_optimizer_ctx * ctx"		1373069	3					
ANR	1373870	Parameter	zend_op_array * op_array	41:25:1767:1789	1373069	0	True				
ANR	1373871	ParameterType	zend_op_array *		1373069	0					
ANR	1373872	Identifier	op_array		1373069	1					
ANR	1373873	Parameter	zend_optimizer_ctx * ctx	41:50:1792:1814	1373069	1	True				
ANR	1373874	ParameterType	zend_optimizer_ctx *		1373069	0					
ANR	1373875	Identifier	ctx		1373069	1					
ANR	1373876	CFGEntryNode	ENTRY		1373069		True				
ANR	1373877	CFGExitNode	EXIT		1373069		True				
ANR	1373878	Symbol	checkpoint		1373069						
ANR	1373879	Symbol	ZEND_SEND_REF		1373069						
ANR	1373880	Symbol	zend_arena_calloc		1373069						
ANR	1373881	Symbol	ZEND_FETCH_ARG_MASK		1373069						
ANR	1373882	Symbol	* call		1373069						
ANR	1373883	Symbol	& ctx -> script -> function_table		1373069						
ANR	1373884	Symbol	* op_array -> literals		1373069						
ANR	1373885	Symbol	opline -> extended_value		1373069						
ANR	1373886	Symbol	fcall		1373069						
ANR	1373887	Symbol	opline		1373069						
ANR	1373888	Symbol	ZEND_INIT_FCALL		1373069						
ANR	1373889	Symbol	zend_hash_find_ptr		1373069						
ANR	1373890	Symbol	NULL		1373069						
ANR	1373891	Symbol	ZEND_INIT_NS_FCALL_BY_NAME		1373069						
ANR	1373892	Symbol	ctx		1373069						
ANR	1373893	Symbol	ctx -> script		1373069						
ANR	1373894	Symbol	fcall -> op2		1373069						
ANR	1373895	Symbol	fcall -> op1		1373069						
ANR	1373896	Symbol	ARG_MUST_BE_SENT_BY_REF		1373069						
ANR	1373897	Symbol	* fcall -> op2		1373069						
ANR	1373898	Symbol	* op_array		1373069						
ANR	1373899	Symbol	op_array -> last		1373069						
ANR	1373900	Symbol	fcall -> extended_value		1373069						
ANR	1373901	Symbol	call_stack [ call ] . opline		1373069						
ANR	1373902	Symbol	ZEND_SEND_VAL		1373069						
ANR	1373903	Symbol	op_array -> literals		1373069						
ANR	1373904	Symbol	ZEND_SEND_VAR		1373069						
ANR	1373905	Symbol	Z_STR_P		1373069						
ANR	1373906	Symbol	* * op_array		1373069						
ANR	1373907	Symbol	zend_vm_calc_used_stack		1373069						
ANR	1373908	Symbol	ZEND_ARG_SEND_BY_REF		1373069						
ANR	1373909	Symbol	ARG_SHOULD_BE_SENT_BY_REF		1373069						
ANR	1373910	Symbol	opline -> op2		1373069						
ANR	1373911	Symbol	call_stack [ call - 1 ] . opline		1373069						
ANR	1373912	Symbol	fcall -> op2 . constant		1373069						
ANR	1373913	Symbol	fcall -> op1 . num		1373069						
ANR	1373914	Symbol	* call_stack		1373069						
ANR	1373915	Symbol	fcall -> opcode		1373069						
ANR	1373916	Symbol	call_stack [ call ] . func		1373069						
ANR	1373917	Symbol	op_array -> opcodes		1373069						
ANR	1373918	Symbol	* * fcall		1373069						
ANR	1373919	Symbol	end		1373069						
ANR	1373920	Symbol	ZEND_OP2_IS_CONST_STRING		1373069						
ANR	1373921	Symbol	* fcall -> op2 . constant		1373069						
ANR	1373922	Symbol	call_stack [ call - 1 ] . func		1373069						
ANR	1373923	Symbol	& ZEND_OP2_LITERAL		1373069						
ANR	1373924	Symbol	opline -> op2 . num		1373069						
ANR	1373925	Symbol	* fcall		1373069						
ANR	1373926	Symbol	zend_get_call_op		1373069						
ANR	1373927	Symbol	zend_arena_checkpoint		1373069						
ANR	1373928	Symbol	ZEND_FETCH_TYPE_MASK		1373069						
ANR	1373929	Symbol	* ctx		1373069						
ANR	1373930	Symbol	call		1373069						
ANR	1373931	Symbol	& ctx -> arena		1373069						
ANR	1373932	Symbol	* opline		1373069						
ANR	1373933	Symbol	func		1373069						
ANR	1373934	Symbol	opline -> opcode		1373069						
ANR	1373935	Symbol	function_name		1373069						
ANR	1373936	Symbol	opline -> op2 . constant		1373069						
ANR	1373937	Symbol	Z_CACHE_SLOT		1373069						
ANR	1373938	Symbol	ZEND_ARG_COMPILE_TIME_BOUND		1373069						
ANR	1373939	Symbol	call_stack		1373069						
ANR	1373940	Symbol	ctx -> arena		1373069						
ANR	1373941	Symbol	op_array		1373069						
ANR	1373942	Symbol	ZEND_INIT_FCALL_BY_NAME		1373069						
