command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1198558	File	data/converged/CVE-2015-8617_php-src/ext_mbstring_oniguruma_regexec.c								
ANR	1198559	DeclStmt									
ANR	1198560	Decl							void	void ( OnigCaptureTreeNode * node )	history_tree_free
ANR	1198561	Function	history_tree_clear	43:0:1937:2403							
ANR	1198562	FunctionDef	history_tree_clear (OnigCaptureTreeNode * node)		1198561	0					
ANR	1198563	CompoundStatement		45:0:1995:2403	1198561	0					
ANR	1198564	IdentifierDeclStatement	int i ;	46:2:1999:2004	1198561	0	True				
ANR	1198565	IdentifierDecl	i		1198561	0					
ANR	1198566	IdentifierDeclType	int		1198561	0					
ANR	1198567	Identifier	i		1198561	1					
ANR	1198568	IfStatement	if ( IS_NOT_NULL ( node ) )		1198561	1					
ANR	1198569	Condition	IS_NOT_NULL ( node )	48:6:2013:2029	1198561	0	True				
ANR	1198570	CallExpression	IS_NOT_NULL ( node )		1198561	0					
ANR	1198571	Callee	IS_NOT_NULL		1198561	0					
ANR	1198572	Identifier	IS_NOT_NULL		1198561	0					
ANR	1198573	ArgumentList	node		1198561	1					
ANR	1198574	Argument	node		1198561	0					
ANR	1198575	Identifier	node		1198561	0					
ANR	1198576	CompoundStatement		4:25:36:36	1198561	1					
ANR	1198577	ForStatement	for ( i = 0 ; i < node -> num_childs ; i ++ )		1198561	0					
ANR	1198578	ForInit	i = 0 ;	49:9:2043:2048	1198561	0	True				
ANR	1198579	AssignmentExpression	i = 0		1198561	0		=			
ANR	1198580	Identifier	i		1198561	0					
ANR	1198581	PrimaryExpression	0		1198561	1					
ANR	1198582	Condition	i < node -> num_childs	49:16:2050:2069	1198561	1	True				
ANR	1198583	RelationalExpression	i < node -> num_childs		1198561	0		<			
ANR	1198584	Identifier	i		1198561	0					
ANR	1198585	PtrMemberAccess	node -> num_childs		1198561	1					
ANR	1198586	Identifier	node		1198561	0					
ANR	1198587	Identifier	num_childs		1198561	1					
ANR	1198588	PostIncDecOperationExpression	i ++	49:38:2072:2074	1198561	2	True				
ANR	1198589	Identifier	i		1198561	0					
ANR	1198590	IncDec	++		1198561	1					
ANR	1198591	CompoundStatement		5:43:81:81	1198561	3					
ANR	1198592	IfStatement	if ( IS_NOT_NULL ( node -> childs [ i ] ) )		1198561	0					
ANR	1198593	Condition	IS_NOT_NULL ( node -> childs [ i ] )	50:10:2089:2116	1198561	0	True				
ANR	1198594	CallExpression	IS_NOT_NULL ( node -> childs [ i ] )		1198561	0					
ANR	1198595	Callee	IS_NOT_NULL		1198561	0					
ANR	1198596	Identifier	IS_NOT_NULL		1198561	0					
ANR	1198597	ArgumentList	node -> childs [ i ]		1198561	1					
ANR	1198598	Argument	node -> childs [ i ]		1198561	0					
ANR	1198599	ArrayIndexing	node -> childs [ i ]		1198561	0					
ANR	1198600	PtrMemberAccess	node -> childs		1198561	0					
ANR	1198601	Identifier	node		1198561	0					
ANR	1198602	Identifier	childs		1198561	1					
ANR	1198603	Identifier	i		1198561	1					
ANR	1198604	CompoundStatement		6:40:123:123	1198561	1					
ANR	1198605	ExpressionStatement	history_tree_free ( node -> childs [ i ] )	51:8:2129:2163	1198561	0	True				
ANR	1198606	CallExpression	history_tree_free ( node -> childs [ i ] )		1198561	0					
ANR	1198607	Callee	history_tree_free		1198561	0					
ANR	1198608	Identifier	history_tree_free		1198561	0					
ANR	1198609	ArgumentList	node -> childs [ i ]		1198561	1					
ANR	1198610	Argument	node -> childs [ i ]		1198561	0					
ANR	1198611	ArrayIndexing	node -> childs [ i ]		1198561	0					
ANR	1198612	PtrMemberAccess	node -> childs		1198561	0					
ANR	1198613	Identifier	node		1198561	0					
ANR	1198614	Identifier	childs		1198561	1					
ANR	1198615	Identifier	i		1198561	1					
ANR	1198616	ForStatement	for ( i = 0 ; i < node -> allocated ; i ++ )		1198561	1					
ANR	1198617	ForInit	i = 0 ;	54:9:2188:2193	1198561	0	True				
ANR	1198618	AssignmentExpression	i = 0		1198561	0		=			
ANR	1198619	Identifier	i		1198561	0					
ANR	1198620	PrimaryExpression	0		1198561	1					
ANR	1198621	Condition	i < node -> allocated	54:16:2195:2213	1198561	1	True				
ANR	1198622	RelationalExpression	i < node -> allocated		1198561	0		<			
ANR	1198623	Identifier	i		1198561	0					
ANR	1198624	PtrMemberAccess	node -> allocated		1198561	1					
ANR	1198625	Identifier	node		1198561	0					
ANR	1198626	Identifier	allocated		1198561	1					
ANR	1198627	PostIncDecOperationExpression	i ++	54:37:2216:2218	1198561	2	True				
ANR	1198628	Identifier	i		1198561	0					
ANR	1198629	IncDec	++		1198561	1					
ANR	1198630	CompoundStatement		10:42:225:225	1198561	3					
ANR	1198631	ExpressionStatement	node -> childs [ i ] = ( OnigCaptureTreeNode * ) 0	55:6:2229:2271	1198561	0	True				
ANR	1198632	AssignmentExpression	node -> childs [ i ] = ( OnigCaptureTreeNode * ) 0		1198561	0		=			
ANR	1198633	ArrayIndexing	node -> childs [ i ]		1198561	0					
ANR	1198634	PtrMemberAccess	node -> childs		1198561	0					
ANR	1198635	Identifier	node		1198561	0					
ANR	1198636	Identifier	childs		1198561	1					
ANR	1198637	Identifier	i		1198561	1					
ANR	1198638	CastExpression	( OnigCaptureTreeNode * ) 0		1198561	1					
ANR	1198639	CastTarget	OnigCaptureTreeNode *		1198561	0					
ANR	1198640	PrimaryExpression	0		1198561	1					
ANR	1198641	ExpressionStatement	node -> num_childs = 0	57:4:2283:2303	1198561	2	True				
ANR	1198642	AssignmentExpression	node -> num_childs = 0		1198561	0		=			
ANR	1198643	PtrMemberAccess	node -> num_childs		1198561	0					
ANR	1198644	Identifier	node		1198561	0					
ANR	1198645	Identifier	num_childs		1198561	1					
ANR	1198646	PrimaryExpression	0		1198561	1					
ANR	1198647	ExpressionStatement	node -> beg = ONIG_REGION_NOTPOS	58:4:2309:2339	1198561	3	True				
ANR	1198648	AssignmentExpression	node -> beg = ONIG_REGION_NOTPOS		1198561	0		=			
ANR	1198649	PtrMemberAccess	node -> beg		1198561	0					
ANR	1198650	Identifier	node		1198561	0					
ANR	1198651	Identifier	beg		1198561	1					
ANR	1198652	Identifier	ONIG_REGION_NOTPOS		1198561	1					
ANR	1198653	ExpressionStatement	node -> end = ONIG_REGION_NOTPOS	59:4:2345:2375	1198561	4	True				
ANR	1198654	AssignmentExpression	node -> end = ONIG_REGION_NOTPOS		1198561	0		=			
ANR	1198655	PtrMemberAccess	node -> end		1198561	0					
ANR	1198656	Identifier	node		1198561	0					
ANR	1198657	Identifier	end		1198561	1					
ANR	1198658	Identifier	ONIG_REGION_NOTPOS		1198561	1					
ANR	1198659	ExpressionStatement	node -> group = - 1	60:4:2381:2397	1198561	5	True				
ANR	1198660	AssignmentExpression	node -> group = - 1		1198561	0		=			
ANR	1198661	PtrMemberAccess	node -> group		1198561	0					
ANR	1198662	Identifier	node		1198561	0					
ANR	1198663	Identifier	group		1198561	1					
ANR	1198664	UnaryOperationExpression	- 1		1198561	1					
ANR	1198665	UnaryOperator	-		1198561	0					
ANR	1198666	PrimaryExpression	1		1198561	1					
ANR	1198667	ReturnType	static void		1198561	1					
ANR	1198668	Identifier	history_tree_clear		1198561	2					
ANR	1198669	ParameterList	OnigCaptureTreeNode * node		1198561	3					
ANR	1198670	Parameter	OnigCaptureTreeNode * node	44:19:1968:1992	1198561	0	True				
ANR	1198671	ParameterType	OnigCaptureTreeNode *		1198561	0					
ANR	1198672	Identifier	node		1198561	1					
ANR	1198673	CFGEntryNode	ENTRY		1198561		True				
ANR	1198674	CFGExitNode	EXIT		1198561		True				
ANR	1198675	Symbol	node -> allocated		1198561						
ANR	1198676	Symbol	IS_NOT_NULL		1198561						
ANR	1198677	Symbol	i		1198561						
ANR	1198678	Symbol	* node -> childs		1198561						
ANR	1198679	Symbol	node -> beg		1198561						
ANR	1198680	Symbol	node -> group		1198561						
ANR	1198681	Symbol	ONIG_REGION_NOTPOS		1198561						
ANR	1198682	Symbol	node -> end		1198561						
ANR	1198683	Symbol	node		1198561						
ANR	1198684	Symbol	* i		1198561						
ANR	1198685	Symbol	* * node		1198561						
ANR	1198686	Symbol	node -> childs		1198561						
ANR	1198687	Symbol	* node		1198561						
ANR	1198688	Symbol	node -> num_childs		1198561						
ANR	1198689	Function	history_tree_free	64:0:2406:2508							
ANR	1198690	FunctionDef	history_tree_free (OnigCaptureTreeNode * node)		1198689	0					
ANR	1198691	CompoundStatement		66:0:2463:2508	1198689	0					
ANR	1198692	ExpressionStatement	history_tree_clear ( node )	67:2:2467:2491	1198689	0	True				
ANR	1198693	CallExpression	history_tree_clear ( node )		1198689	0					
ANR	1198694	Callee	history_tree_clear		1198689	0					
ANR	1198695	Identifier	history_tree_clear		1198689	0					
ANR	1198696	ArgumentList	node		1198689	1					
ANR	1198697	Argument	node		1198689	0					
ANR	1198698	Identifier	node		1198689	0					
ANR	1198699	ExpressionStatement	xfree ( node )	68:2:2495:2506	1198689	1	True				
ANR	1198700	CallExpression	xfree ( node )		1198689	0					
ANR	1198701	Callee	xfree		1198689	0					
ANR	1198702	Identifier	xfree		1198689	0					
ANR	1198703	ArgumentList	node		1198689	1					
ANR	1198704	Argument	node		1198689	0					
ANR	1198705	Identifier	node		1198689	0					
ANR	1198706	ReturnType	static void		1198689	1					
ANR	1198707	Identifier	history_tree_free		1198689	2					
ANR	1198708	ParameterList	OnigCaptureTreeNode * node		1198689	3					
ANR	1198709	Parameter	OnigCaptureTreeNode * node	65:18:2436:2460	1198689	0	True				
ANR	1198710	ParameterType	OnigCaptureTreeNode *		1198689	0					
ANR	1198711	Identifier	node		1198689	1					
ANR	1198712	CFGEntryNode	ENTRY		1198689		True				
ANR	1198713	CFGExitNode	EXIT		1198689		True				
ANR	1198714	Symbol	node		1198689						
ANR	1198715	Function	history_root_free	71:0:2511:2688							
ANR	1198716	FunctionDef	history_root_free (OnigRegion * r)		1198715	0					
ANR	1198717	CompoundStatement		73:0:2556:2688	1198715	0					
ANR	1198718	IfStatement	if ( IS_NOT_NULL ( r -> history_root ) )		1198715	0					
ANR	1198719	Condition	IS_NOT_NULL ( r -> history_root )	74:6:2564:2591	1198715	0	True				
ANR	1198720	CallExpression	IS_NOT_NULL ( r -> history_root )		1198715	0					
ANR	1198721	Callee	IS_NOT_NULL		1198715	0					
ANR	1198722	Identifier	IS_NOT_NULL		1198715	0					
ANR	1198723	ArgumentList	r -> history_root		1198715	1					
ANR	1198724	Argument	r -> history_root		1198715	0					
ANR	1198725	PtrMemberAccess	r -> history_root		1198715	0					
ANR	1198726	Identifier	r		1198715	0					
ANR	1198727	Identifier	history_root		1198715	1					
ANR	1198728	CompoundStatement		2:36:37:37	1198715	1					
ANR	1198729	ExpressionStatement	history_tree_free ( r -> history_root )	75:4:2600:2634	1198715	0	True				
ANR	1198730	CallExpression	history_tree_free ( r -> history_root )		1198715	0					
ANR	1198731	Callee	history_tree_free		1198715	0					
ANR	1198732	Identifier	history_tree_free		1198715	0					
ANR	1198733	ArgumentList	r -> history_root		1198715	1					
ANR	1198734	Argument	r -> history_root		1198715	0					
ANR	1198735	PtrMemberAccess	r -> history_root		1198715	0					
ANR	1198736	Identifier	r		1198715	0					
ANR	1198737	Identifier	history_root		1198715	1					
ANR	1198738	ExpressionStatement	r -> history_root = ( OnigCaptureTreeNode * ) 0	76:4:2640:2682	1198715	1	True				
ANR	1198739	AssignmentExpression	r -> history_root = ( OnigCaptureTreeNode * ) 0		1198715	0		=			
ANR	1198740	PtrMemberAccess	r -> history_root		1198715	0					
ANR	1198741	Identifier	r		1198715	0					
ANR	1198742	Identifier	history_root		1198715	1					
ANR	1198743	CastExpression	( OnigCaptureTreeNode * ) 0		1198715	1					
ANR	1198744	CastTarget	OnigCaptureTreeNode *		1198715	0					
ANR	1198745	PrimaryExpression	0		1198715	1					
ANR	1198746	ReturnType	static void		1198715	1					
ANR	1198747	Identifier	history_root_free		1198715	2					
ANR	1198748	ParameterList	OnigRegion * r		1198715	3					
ANR	1198749	Parameter	OnigRegion * r	72:18:2541:2553	1198715	0	True				
ANR	1198750	ParameterType	OnigRegion *		1198715	0					
ANR	1198751	Identifier	r		1198715	1					
ANR	1198752	CFGEntryNode	ENTRY		1198715		True				
ANR	1198753	CFGExitNode	EXIT		1198715		True				
ANR	1198754	Symbol	r		1198715						
ANR	1198755	Symbol	IS_NOT_NULL		1198715						
ANR	1198756	Symbol	r -> history_root		1198715						
ANR	1198757	Symbol	* r		1198715						
ANR	1198758	Function	history_node_new	80:0:2691:3090							
ANR	1198759	FunctionDef	history_node_new ()		1198758	0					
ANR	1198760	CompoundStatement		82:0:2742:3090	1198758	0					
ANR	1198761	IdentifierDeclStatement	OnigCaptureTreeNode * node ;	83:2:2746:2771	1198758	0	True				
ANR	1198762	IdentifierDecl	* node		1198758	0					
ANR	1198763	IdentifierDeclType	OnigCaptureTreeNode *		1198758	0					
ANR	1198764	Identifier	node		1198758	1					
ANR	1198765	ExpressionStatement	node = ( OnigCaptureTreeNode * ) xmalloc ( sizeof ( OnigCaptureTreeNode ) )	85:2:2776:2842	1198758	1	True				
ANR	1198766	AssignmentExpression	node = ( OnigCaptureTreeNode * ) xmalloc ( sizeof ( OnigCaptureTreeNode ) )		1198758	0		=			
ANR	1198767	Identifier	node		1198758	0					
ANR	1198768	CastExpression	( OnigCaptureTreeNode * ) xmalloc ( sizeof ( OnigCaptureTreeNode ) )		1198758	1					
ANR	1198769	CastTarget	OnigCaptureTreeNode *		1198758	0					
ANR	1198770	CallExpression	xmalloc ( sizeof ( OnigCaptureTreeNode ) )		1198758	1					
ANR	1198771	Callee	xmalloc		1198758	0					
ANR	1198772	Identifier	xmalloc		1198758	0					
ANR	1198773	ArgumentList	sizeof ( OnigCaptureTreeNode )		1198758	1					
ANR	1198774	Argument	sizeof ( OnigCaptureTreeNode )		1198758	0					
ANR	1198775	SizeofExpression	sizeof ( OnigCaptureTreeNode )		1198758	0					
ANR	1198776	Sizeof	sizeof		1198758	0					
ANR	1198777	SizeofOperand	OnigCaptureTreeNode		1198758	1					
ANR	1198778	ExpressionStatement	CHECK_NULL_RETURN ( node )	86:2:2846:2869	1198758	2	True				
ANR	1198779	CallExpression	CHECK_NULL_RETURN ( node )		1198758	0					
ANR	1198780	Callee	CHECK_NULL_RETURN		1198758	0					
ANR	1198781	Identifier	CHECK_NULL_RETURN		1198758	0					
ANR	1198782	ArgumentList	node		1198758	1					
ANR	1198783	Argument	node		1198758	0					
ANR	1198784	Identifier	node		1198758	0					
ANR	1198785	ExpressionStatement	node -> childs = ( OnigCaptureTreeNode * * ) 0	87:2:2873:2917	1198758	3	True				
ANR	1198786	AssignmentExpression	node -> childs = ( OnigCaptureTreeNode * * ) 0		1198758	0		=			
ANR	1198787	PtrMemberAccess	node -> childs		1198758	0					
ANR	1198788	Identifier	node		1198758	0					
ANR	1198789	Identifier	childs		1198758	1					
ANR	1198790	CastExpression	( OnigCaptureTreeNode * * ) 0		1198758	1					
ANR	1198791	CastTarget	OnigCaptureTreeNode * *		1198758	0					
ANR	1198792	PrimaryExpression	0		1198758	1					
ANR	1198793	ExpressionStatement	node -> allocated = 0	88:2:2921:2941	1198758	4	True				
ANR	1198794	AssignmentExpression	node -> allocated = 0		1198758	0		=			
ANR	1198795	PtrMemberAccess	node -> allocated		1198758	0					
ANR	1198796	Identifier	node		1198758	0					
ANR	1198797	Identifier	allocated		1198758	1					
ANR	1198798	PrimaryExpression	0		1198758	1					
ANR	1198799	ExpressionStatement	node -> num_childs = 0	89:2:2945:2965	1198758	5	True				
ANR	1198800	AssignmentExpression	node -> num_childs = 0		1198758	0		=			
ANR	1198801	PtrMemberAccess	node -> num_childs		1198758	0					
ANR	1198802	Identifier	node		1198758	0					
ANR	1198803	Identifier	num_childs		1198758	1					
ANR	1198804	PrimaryExpression	0		1198758	1					
ANR	1198805	ExpressionStatement	node -> group = - 1	90:2:2969:2990	1198758	6	True				
ANR	1198806	AssignmentExpression	node -> group = - 1		1198758	0		=			
ANR	1198807	PtrMemberAccess	node -> group		1198758	0					
ANR	1198808	Identifier	node		1198758	0					
ANR	1198809	Identifier	group		1198758	1					
ANR	1198810	UnaryOperationExpression	- 1		1198758	1					
ANR	1198811	UnaryOperator	-		1198758	0					
ANR	1198812	PrimaryExpression	1		1198758	1					
ANR	1198813	ExpressionStatement	node -> beg = ONIG_REGION_NOTPOS	91:2:2994:3031	1198758	7	True				
ANR	1198814	AssignmentExpression	node -> beg = ONIG_REGION_NOTPOS		1198758	0		=			
ANR	1198815	PtrMemberAccess	node -> beg		1198758	0					
ANR	1198816	Identifier	node		1198758	0					
ANR	1198817	Identifier	beg		1198758	1					
ANR	1198818	Identifier	ONIG_REGION_NOTPOS		1198758	1					
ANR	1198819	ExpressionStatement	node -> end = ONIG_REGION_NOTPOS	92:2:3035:3072	1198758	8	True				
ANR	1198820	AssignmentExpression	node -> end = ONIG_REGION_NOTPOS		1198758	0		=			
ANR	1198821	PtrMemberAccess	node -> end		1198758	0					
ANR	1198822	Identifier	node		1198758	0					
ANR	1198823	Identifier	end		1198758	1					
ANR	1198824	Identifier	ONIG_REGION_NOTPOS		1198758	1					
ANR	1198825	ReturnStatement	return node ;	94:2:3077:3088	1198758	9	True				
ANR	1198826	Identifier	node		1198758	0					
ANR	1198827	ReturnType	static OnigCaptureTreeNode *		1198758	1					
ANR	1198828	Identifier	history_node_new		1198758	2					
ANR	1198829	ParameterList			1198758	3					
ANR	1198830	CFGEntryNode	ENTRY		1198758		True				
ANR	1198831	CFGExitNode	EXIT		1198758		True				
ANR	1198832	Symbol	node -> end		1198758						
ANR	1198833	Symbol	node		1198758						
ANR	1198834	Symbol	node -> allocated		1198758						
ANR	1198835	Symbol	node -> childs		1198758						
ANR	1198836	Symbol	xmalloc		1198758						
ANR	1198837	Symbol	node -> beg		1198758						
ANR	1198838	Symbol	* node		1198758						
ANR	1198839	Symbol	node -> group		1198758						
ANR	1198840	Symbol	node -> num_childs		1198758						
ANR	1198841	Symbol	ONIG_REGION_NOTPOS		1198758						
ANR	1198842	Function	history_tree_add_child	97:0:3093:3940							
ANR	1198843	FunctionDef	"history_tree_add_child (OnigCaptureTreeNode * parent , OnigCaptureTreeNode * child)"		1198842	0					
ANR	1198844	CompoundStatement		99:0:3184:3940	1198842	0					
ANR	1198845	Statement	define	100:1:3187:3192	1198842	0	True				
ANR	1198846	Statement	HISTORY_TREE_INIT_ALLOC_SIZE	100:8:3194:3221	1198842	1	True				
ANR	1198847	Statement	8	100:38:3224:3224	1198842	2	True				
ANR	1198848	IfStatement	if ( parent -> num_childs >= parent -> allocated )		1198842	3					
ANR	1198849	Condition	parent -> num_childs >= parent -> allocated	102:6:3233:3271	1198842	0	True				
ANR	1198850	RelationalExpression	parent -> num_childs >= parent -> allocated		1198842	0		>=			
ANR	1198851	PtrMemberAccess	parent -> num_childs		1198842	0					
ANR	1198852	Identifier	parent		1198842	0					
ANR	1198853	Identifier	num_childs		1198842	1					
ANR	1198854	PtrMemberAccess	parent -> allocated		1198842	1					
ANR	1198855	Identifier	parent		1198842	0					
ANR	1198856	Identifier	allocated		1198842	1					
ANR	1198857	CompoundStatement		5:4:95:103	1198842	1					
ANR	1198858	IdentifierDeclStatement	"int n , i ;"	103:4:3280:3288	1198842	0	True				
ANR	1198859	IdentifierDecl	n		1198842	0					
ANR	1198860	IdentifierDeclType	int		1198842	0					
ANR	1198861	Identifier	n		1198842	1					
ANR	1198862	IdentifierDecl	i		1198842	1					
ANR	1198863	IdentifierDeclType	int		1198842	0					
ANR	1198864	Identifier	i		1198842	1					
ANR	1198865	IfStatement	if ( IS_NULL ( parent -> childs ) )		1198842	1					
ANR	1198866	Condition	IS_NULL ( parent -> childs )	105:8:3299:3321	1198842	0	True				
ANR	1198867	CallExpression	IS_NULL ( parent -> childs )		1198842	0					
ANR	1198868	Callee	IS_NULL		1198842	0					
ANR	1198869	Identifier	IS_NULL		1198842	0					
ANR	1198870	ArgumentList	parent -> childs		1198842	1					
ANR	1198871	Argument	parent -> childs		1198842	0					
ANR	1198872	PtrMemberAccess	parent -> childs		1198842	0					
ANR	1198873	Identifier	parent		1198842	0					
ANR	1198874	Identifier	childs		1198842	1					
ANR	1198875	CompoundStatement		7:33:139:139	1198842	1					
ANR	1198876	ExpressionStatement	n = HISTORY_TREE_INIT_ALLOC_SIZE	106:6:3332:3364	1198842	0	True				
ANR	1198877	AssignmentExpression	n = HISTORY_TREE_INIT_ALLOC_SIZE		1198842	0		=			
ANR	1198878	Identifier	n		1198842	0					
ANR	1198879	Identifier	HISTORY_TREE_INIT_ALLOC_SIZE		1198842	1					
ANR	1198880	ExpressionStatement	parent -> childs = ( OnigCaptureTreeNode * * ) xmalloc ( sizeof ( OnigCaptureTreeNode * ) * n )	107:6:3372:3462	1198842	1	True				
ANR	1198881	AssignmentExpression	parent -> childs = ( OnigCaptureTreeNode * * ) xmalloc ( sizeof ( OnigCaptureTreeNode * ) * n )		1198842	0		=			
ANR	1198882	PtrMemberAccess	parent -> childs		1198842	0					
ANR	1198883	Identifier	parent		1198842	0					
ANR	1198884	Identifier	childs		1198842	1					
ANR	1198885	CastExpression	( OnigCaptureTreeNode * * ) xmalloc ( sizeof ( OnigCaptureTreeNode * ) * n )		1198842	1					
ANR	1198886	CastTarget	OnigCaptureTreeNode * *		1198842	0					
ANR	1198887	CallExpression	xmalloc ( sizeof ( OnigCaptureTreeNode * ) * n )		1198842	1					
ANR	1198888	Callee	xmalloc		1198842	0					
ANR	1198889	Identifier	xmalloc		1198842	0					
ANR	1198890	ArgumentList	sizeof ( OnigCaptureTreeNode * ) * n		1198842	1					
ANR	1198891	Argument	sizeof ( OnigCaptureTreeNode * ) * n		1198842	0					
ANR	1198892	MultiplicativeExpression	sizeof ( OnigCaptureTreeNode * ) * n		1198842	0		*			
ANR	1198893	SizeofExpression	sizeof ( OnigCaptureTreeNode * )		1198842	0					
ANR	1198894	Sizeof	sizeof		1198842	0					
ANR	1198895	SizeofOperand	OnigCaptureTreeNode *		1198842	1					
ANR	1198896	Identifier	n		1198842	1					
ANR	1198897	ElseStatement	else		1198842	0					
ANR	1198898	CompoundStatement		12:9:294:294	1198842	0					
ANR	1198899	ExpressionStatement	n = parent -> allocated * 2	111:6:3487:3512	1198842	0	True				
ANR	1198900	AssignmentExpression	n = parent -> allocated * 2		1198842	0		=			
ANR	1198901	Identifier	n		1198842	0					
ANR	1198902	MultiplicativeExpression	parent -> allocated * 2		1198842	1		*			
ANR	1198903	PtrMemberAccess	parent -> allocated		1198842	0					
ANR	1198904	Identifier	parent		1198842	0					
ANR	1198905	Identifier	allocated		1198842	1					
ANR	1198906	PrimaryExpression	2		1198842	1					
ANR	1198907	ExpressionStatement	"parent -> childs = ( OnigCaptureTreeNode * * ) xrealloc ( parent -> childs , sizeof ( OnigCaptureTreeNode * ) * n )"	112:6:3520:3668	1198842	1	True				
ANR	1198908	AssignmentExpression	"parent -> childs = ( OnigCaptureTreeNode * * ) xrealloc ( parent -> childs , sizeof ( OnigCaptureTreeNode * ) * n )"		1198842	0		=			
ANR	1198909	PtrMemberAccess	parent -> childs		1198842	0					
ANR	1198910	Identifier	parent		1198842	0					
ANR	1198911	Identifier	childs		1198842	1					
ANR	1198912	CastExpression	"( OnigCaptureTreeNode * * ) xrealloc ( parent -> childs , sizeof ( OnigCaptureTreeNode * ) * n )"		1198842	1					
ANR	1198913	CastTarget	OnigCaptureTreeNode * *		1198842	0					
ANR	1198914	CallExpression	"xrealloc ( parent -> childs , sizeof ( OnigCaptureTreeNode * ) * n )"		1198842	1					
ANR	1198915	Callee	xrealloc		1198842	0					
ANR	1198916	Identifier	xrealloc		1198842	0					
ANR	1198917	ArgumentList	parent -> childs		1198842	1					
ANR	1198918	Argument	parent -> childs		1198842	0					
ANR	1198919	PtrMemberAccess	parent -> childs		1198842	0					
ANR	1198920	Identifier	parent		1198842	0					
ANR	1198921	Identifier	childs		1198842	1					
ANR	1198922	Argument	sizeof ( OnigCaptureTreeNode * ) * n		1198842	1					
ANR	1198923	MultiplicativeExpression	sizeof ( OnigCaptureTreeNode * ) * n		1198842	0		*			
ANR	1198924	SizeofExpression	sizeof ( OnigCaptureTreeNode * )		1198842	0					
ANR	1198925	Sizeof	sizeof		1198842	0					
ANR	1198926	SizeofOperand	OnigCaptureTreeNode *		1198842	1					
ANR	1198927	Identifier	n		1198842	1					
ANR	1198928	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( parent -> childs )	116:4:3680:3720	1198842	2	True				
ANR	1198929	CallExpression	CHECK_NULL_RETURN_MEMERR ( parent -> childs )		1198842	0					
ANR	1198930	Callee	CHECK_NULL_RETURN_MEMERR		1198842	0					
ANR	1198931	Identifier	CHECK_NULL_RETURN_MEMERR		1198842	0					
ANR	1198932	ArgumentList	parent -> childs		1198842	1					
ANR	1198933	Argument	parent -> childs		1198842	0					
ANR	1198934	PtrMemberAccess	parent -> childs		1198842	0					
ANR	1198935	Identifier	parent		1198842	0					
ANR	1198936	Identifier	childs		1198842	1					
ANR	1198937	ForStatement	for ( i = parent -> allocated ; i < n ; i ++ )		1198842	3					
ANR	1198938	ForInit	i = parent -> allocated ;	117:9:3731:3752	1198842	0	True				
ANR	1198939	AssignmentExpression	i = parent -> allocated		1198842	0		=			
ANR	1198940	Identifier	i		1198842	0					
ANR	1198941	PtrMemberAccess	parent -> allocated		1198842	1					
ANR	1198942	Identifier	parent		1198842	0					
ANR	1198943	Identifier	allocated		1198842	1					
ANR	1198944	Condition	i < n	117:32:3754:3758	1198842	1	True				
ANR	1198945	RelationalExpression	i < n		1198842	0		<			
ANR	1198946	Identifier	i		1198842	0					
ANR	1198947	Identifier	n		1198842	1					
ANR	1198948	PostIncDecOperationExpression	i ++	117:39:3761:3763	1198842	2	True				
ANR	1198949	Identifier	i		1198842	0					
ANR	1198950	IncDec	++		1198842	1					
ANR	1198951	CompoundStatement		19:44:581:581	1198842	3					
ANR	1198952	ExpressionStatement	parent -> childs [ i ] = ( OnigCaptureTreeNode * ) 0	118:6:3774:3818	1198842	0	True				
ANR	1198953	AssignmentExpression	parent -> childs [ i ] = ( OnigCaptureTreeNode * ) 0		1198842	0		=			
ANR	1198954	ArrayIndexing	parent -> childs [ i ]		1198842	0					
ANR	1198955	PtrMemberAccess	parent -> childs		1198842	0					
ANR	1198956	Identifier	parent		1198842	0					
ANR	1198957	Identifier	childs		1198842	1					
ANR	1198958	Identifier	i		1198842	1					
ANR	1198959	CastExpression	( OnigCaptureTreeNode * ) 0		1198842	1					
ANR	1198960	CastTarget	OnigCaptureTreeNode *		1198842	0					
ANR	1198961	PrimaryExpression	0		1198842	1					
ANR	1198962	ExpressionStatement	parent -> allocated = n	120:4:3830:3851	1198842	4	True				
ANR	1198963	AssignmentExpression	parent -> allocated = n		1198842	0		=			
ANR	1198964	PtrMemberAccess	parent -> allocated		1198842	0					
ANR	1198965	Identifier	parent		1198842	0					
ANR	1198966	Identifier	allocated		1198842	1					
ANR	1198967	Identifier	n		1198842	1					
ANR	1198968	ExpressionStatement	parent -> childs [ parent -> num_childs ] = child	123:2:3860:3902	1198842	4	True				
ANR	1198969	AssignmentExpression	parent -> childs [ parent -> num_childs ] = child		1198842	0		=			
ANR	1198970	ArrayIndexing	parent -> childs [ parent -> num_childs ]		1198842	0					
ANR	1198971	PtrMemberAccess	parent -> childs		1198842	0					
ANR	1198972	Identifier	parent		1198842	0					
ANR	1198973	Identifier	childs		1198842	1					
ANR	1198974	PtrMemberAccess	parent -> num_childs		1198842	1					
ANR	1198975	Identifier	parent		1198842	0					
ANR	1198976	Identifier	num_childs		1198842	1					
ANR	1198977	Identifier	child		1198842	1					
ANR	1198978	ExpressionStatement	parent -> num_childs ++	124:2:3906:3926	1198842	5	True				
ANR	1198979	PostIncDecOperationExpression	parent -> num_childs ++		1198842	0					
ANR	1198980	PtrMemberAccess	parent -> num_childs		1198842	0					
ANR	1198981	Identifier	parent		1198842	0					
ANR	1198982	Identifier	num_childs		1198842	1					
ANR	1198983	IncDec	++		1198842	1					
ANR	1198984	ReturnStatement	return 0 ;	125:2:3930:3938	1198842	6	True				
ANR	1198985	PrimaryExpression	0		1198842	0					
ANR	1198986	ReturnType	static int		1198842	1					
ANR	1198987	Identifier	history_tree_add_child		1198842	2					
ANR	1198988	ParameterList	"OnigCaptureTreeNode * parent , OnigCaptureTreeNode * child"		1198842	3					
ANR	1198989	Parameter	OnigCaptureTreeNode * parent	98:23:3127:3153	1198842	0	True				
ANR	1198990	ParameterType	OnigCaptureTreeNode *		1198842	0					
ANR	1198991	Identifier	parent		1198842	1					
ANR	1198992	Parameter	OnigCaptureTreeNode * child	98:52:3156:3181	1198842	1	True				
ANR	1198993	ParameterType	OnigCaptureTreeNode *		1198842	0					
ANR	1198994	Identifier	child		1198842	1					
ANR	1198995	CFGEntryNode	ENTRY		1198842		True				
ANR	1198996	CFGExitNode	EXIT		1198842		True				
ANR	1198997	Symbol	parent		1198842						
ANR	1198998	Symbol	parent -> allocated		1198842						
ANR	1198999	Symbol	* parent -> num_childs		1198842						
ANR	1199000	Symbol	* parent		1198842						
ANR	1199001	Symbol	parent -> num_childs		1198842						
ANR	1199002	Symbol	* * parent		1198842						
ANR	1199003	Symbol	i		1198842						
ANR	1199004	Symbol	* parent -> childs		1198842						
ANR	1199005	Symbol	n		1198842						
ANR	1199006	Symbol	parent -> childs		1198842						
ANR	1199007	Symbol	* i		1198842						
ANR	1199008	Symbol	IS_NULL		1198842						
ANR	1199009	Symbol	xmalloc		1198842						
ANR	1199010	Symbol	HISTORY_TREE_INIT_ALLOC_SIZE		1198842						
ANR	1199011	Symbol	xrealloc		1198842						
ANR	1199012	Symbol	child		1198842						
ANR	1199013	Function	history_tree_clone	128:0:3943:4436							
ANR	1199014	FunctionDef	history_tree_clone (OnigCaptureTreeNode * node)		1199013	0					
ANR	1199015	CompoundStatement		130:0:4017:4436	1199013	0					
ANR	1199016	IdentifierDeclStatement	int i ;	131:2:4021:4026	1199013	0	True				
ANR	1199017	IdentifierDecl	i		1199013	0					
ANR	1199018	IdentifierDeclType	int		1199013	0					
ANR	1199019	Identifier	i		1199013	1					
ANR	1199020	IdentifierDeclStatement	"OnigCaptureTreeNode * clone , * child ;"	132:2:4030:4064	1199013	1	True				
ANR	1199021	IdentifierDecl	* clone		1199013	0					
ANR	1199022	IdentifierDeclType	OnigCaptureTreeNode *		1199013	0					
ANR	1199023	Identifier	clone		1199013	1					
ANR	1199024	IdentifierDecl	* child		1199013	1					
ANR	1199025	IdentifierDeclType	OnigCaptureTreeNode *		1199013	0					
ANR	1199026	Identifier	child		1199013	1					
ANR	1199027	ExpressionStatement	clone = history_node_new ( )	134:2:4069:4095	1199013	2	True				
ANR	1199028	AssignmentExpression	clone = history_node_new ( )		1199013	0		=			
ANR	1199029	Identifier	clone		1199013	0					
ANR	1199030	CallExpression	history_node_new ( )		1199013	1					
ANR	1199031	Callee	history_node_new		1199013	0					
ANR	1199032	Identifier	history_node_new		1199013	0					
ANR	1199033	ArgumentList			1199013	1					
ANR	1199034	ExpressionStatement	CHECK_NULL_RETURN ( clone )	135:2:4099:4123	1199013	3	True				
ANR	1199035	CallExpression	CHECK_NULL_RETURN ( clone )		1199013	0					
ANR	1199036	Callee	CHECK_NULL_RETURN		1199013	0					
ANR	1199037	Identifier	CHECK_NULL_RETURN		1199013	0					
ANR	1199038	ArgumentList	clone		1199013	1					
ANR	1199039	Argument	clone		1199013	0					
ANR	1199040	Identifier	clone		1199013	0					
ANR	1199041	ExpressionStatement	clone -> beg = node -> beg	137:2:4128:4150	1199013	4	True				
ANR	1199042	AssignmentExpression	clone -> beg = node -> beg		1199013	0		=			
ANR	1199043	PtrMemberAccess	clone -> beg		1199013	0					
ANR	1199044	Identifier	clone		1199013	0					
ANR	1199045	Identifier	beg		1199013	1					
ANR	1199046	PtrMemberAccess	node -> beg		1199013	1					
ANR	1199047	Identifier	node		1199013	0					
ANR	1199048	Identifier	beg		1199013	1					
ANR	1199049	ExpressionStatement	clone -> end = node -> end	138:2:4154:4176	1199013	5	True				
ANR	1199050	AssignmentExpression	clone -> end = node -> end		1199013	0		=			
ANR	1199051	PtrMemberAccess	clone -> end		1199013	0					
ANR	1199052	Identifier	clone		1199013	0					
ANR	1199053	Identifier	end		1199013	1					
ANR	1199054	PtrMemberAccess	node -> end		1199013	1					
ANR	1199055	Identifier	node		1199013	0					
ANR	1199056	Identifier	end		1199013	1					
ANR	1199057	ForStatement	for ( i = 0 ; i < node -> num_childs ; i ++ )		1199013	6					
ANR	1199058	ForInit	i = 0 ;	139:7:4185:4190	1199013	0	True				
ANR	1199059	AssignmentExpression	i = 0		1199013	0		=			
ANR	1199060	Identifier	i		1199013	0					
ANR	1199061	PrimaryExpression	0		1199013	1					
ANR	1199062	Condition	i < node -> num_childs	139:14:4192:4211	1199013	1	True				
ANR	1199063	RelationalExpression	i < node -> num_childs		1199013	0		<			
ANR	1199064	Identifier	i		1199013	0					
ANR	1199065	PtrMemberAccess	node -> num_childs		1199013	1					
ANR	1199066	Identifier	node		1199013	0					
ANR	1199067	Identifier	num_childs		1199013	1					
ANR	1199068	PostIncDecOperationExpression	i ++	139:36:4214:4216	1199013	2	True				
ANR	1199069	Identifier	i		1199013	0					
ANR	1199070	IncDec	++		1199013	1					
ANR	1199071	CompoundStatement		10:41:201:201	1199013	3					
ANR	1199072	ExpressionStatement	child = history_tree_clone ( node -> childs [ i ] )	140:4:4225:4268	1199013	0	True				
ANR	1199073	AssignmentExpression	child = history_tree_clone ( node -> childs [ i ] )		1199013	0		=			
ANR	1199074	Identifier	child		1199013	0					
ANR	1199075	CallExpression	history_tree_clone ( node -> childs [ i ] )		1199013	1					
ANR	1199076	Callee	history_tree_clone		1199013	0					
ANR	1199077	Identifier	history_tree_clone		1199013	0					
ANR	1199078	ArgumentList	node -> childs [ i ]		1199013	1					
ANR	1199079	Argument	node -> childs [ i ]		1199013	0					
ANR	1199080	ArrayIndexing	node -> childs [ i ]		1199013	0					
ANR	1199081	PtrMemberAccess	node -> childs		1199013	0					
ANR	1199082	Identifier	node		1199013	0					
ANR	1199083	Identifier	childs		1199013	1					
ANR	1199084	Identifier	i		1199013	1					
ANR	1199085	IfStatement	if ( IS_NULL ( child ) )		1199013	1					
ANR	1199086	Condition	IS_NULL ( child )	141:8:4278:4291	1199013	0	True				
ANR	1199087	CallExpression	IS_NULL ( child )		1199013	0					
ANR	1199088	Callee	IS_NULL		1199013	0					
ANR	1199089	Identifier	IS_NULL		1199013	0					
ANR	1199090	ArgumentList	child		1199013	1					
ANR	1199091	Argument	child		1199013	0					
ANR	1199092	Identifier	child		1199013	0					
ANR	1199093	CompoundStatement		12:24:276:276	1199013	1					
ANR	1199094	ExpressionStatement	history_tree_free ( clone )	142:6:4302:4326	1199013	0	True				
ANR	1199095	CallExpression	history_tree_free ( clone )		1199013	0					
ANR	1199096	Callee	history_tree_free		1199013	0					
ANR	1199097	Identifier	history_tree_free		1199013	0					
ANR	1199098	ArgumentList	clone		1199013	1					
ANR	1199099	Argument	clone		1199013	0					
ANR	1199100	Identifier	clone		1199013	0					
ANR	1199101	ReturnStatement	return ( OnigCaptureTreeNode * ) 0 ;	143:6:4334:4365	1199013	1	True				
ANR	1199102	CastExpression	( OnigCaptureTreeNode * ) 0		1199013	0					
ANR	1199103	CastTarget	OnigCaptureTreeNode *		1199013	0					
ANR	1199104	PrimaryExpression	0		1199013	1					
ANR	1199105	ExpressionStatement	"history_tree_add_child ( clone , child )"	145:4:4377:4413	1199013	2	True				
ANR	1199106	CallExpression	"history_tree_add_child ( clone , child )"		1199013	0					
ANR	1199107	Callee	history_tree_add_child		1199013	0					
ANR	1199108	Identifier	history_tree_add_child		1199013	0					
ANR	1199109	ArgumentList	clone		1199013	1					
ANR	1199110	Argument	clone		1199013	0					
ANR	1199111	Identifier	clone		1199013	0					
ANR	1199112	Argument	child		1199013	1					
ANR	1199113	Identifier	child		1199013	0					
ANR	1199114	ReturnStatement	return clone ;	148:2:4422:4434	1199013	7	True				
ANR	1199115	Identifier	clone		1199013	0					
ANR	1199116	ReturnType	static OnigCaptureTreeNode *		1199013	1					
ANR	1199117	Identifier	history_tree_clone		1199013	2					
ANR	1199118	ParameterList	OnigCaptureTreeNode * node		1199013	3					
ANR	1199119	Parameter	OnigCaptureTreeNode * node	129:19:3990:4014	1199013	0	True				
ANR	1199120	ParameterType	OnigCaptureTreeNode *		1199013	0					
ANR	1199121	Identifier	node		1199013	1					
ANR	1199122	CFGEntryNode	ENTRY		1199013		True				
ANR	1199123	CFGExitNode	EXIT		1199013		True				
ANR	1199124	Symbol	* clone		1199013						
ANR	1199125	Symbol	clone -> beg		1199013						
ANR	1199126	Symbol	i		1199013						
ANR	1199127	Symbol	node -> beg		1199013						
ANR	1199128	Symbol	* node -> childs		1199013						
ANR	1199129	Symbol	history_tree_clone		1199013						
ANR	1199130	Symbol	node -> end		1199013						
ANR	1199131	Symbol	node		1199013						
ANR	1199132	Symbol	* i		1199013						
ANR	1199133	Symbol	* * node		1199013						
ANR	1199134	Symbol	node -> childs		1199013						
ANR	1199135	Symbol	IS_NULL		1199013						
ANR	1199136	Symbol	clone		1199013						
ANR	1199137	Symbol	* node		1199013						
ANR	1199138	Symbol	history_node_new		1199013						
ANR	1199139	Symbol	node -> num_childs		1199013						
ANR	1199140	Symbol	child		1199013						
ANR	1199141	Symbol	clone -> end		1199013						
ANR	1199142	Function	onig_get_capture_tree	151:0:4439:4543							
ANR	1199143	FunctionDef	onig_get_capture_tree (OnigRegion * region)		1199142	0					
ANR	1199144	CompoundStatement		153:0:4510:4543	1199142	0					
ANR	1199145	ReturnStatement	return region -> history_root ;	154:2:4514:4541	1199142	0	True				
ANR	1199146	PtrMemberAccess	region -> history_root		1199142	0					
ANR	1199147	Identifier	region		1199142	0					
ANR	1199148	Identifier	history_root		1199142	1					
ANR	1199149	ReturnType	extern OnigCaptureTreeNode *		1199142	1					
ANR	1199150	Identifier	onig_get_capture_tree		1199142	2					
ANR	1199151	ParameterList	OnigRegion * region		1199142	3					
ANR	1199152	Parameter	OnigRegion * region	152:22:4490:4507	1199142	0	True				
ANR	1199153	ParameterType	OnigRegion *		1199142	0					
ANR	1199154	Identifier	region		1199142	1					
ANR	1199155	CFGEntryNode	ENTRY		1199142		True				
ANR	1199156	CFGExitNode	EXIT		1199142		True				
ANR	1199157	Symbol	region -> history_root		1199142						
ANR	1199158	Symbol	* region		1199142						
ANR	1199159	Symbol	region		1199142						
ANR	1199160	Function	onig_region_clear	158:0:4579:4809							
ANR	1199161	FunctionDef	onig_region_clear (OnigRegion * region)		1199160	0					
ANR	1199162	CompoundStatement		160:0:4629:4809	1199160	0					
ANR	1199163	IdentifierDeclStatement	int i ;	161:2:4633:4638	1199160	0	True				
ANR	1199164	IdentifierDecl	i		1199160	0					
ANR	1199165	IdentifierDeclType	int		1199160	0					
ANR	1199166	Identifier	i		1199160	1					
ANR	1199167	ForStatement	for ( i = 0 ; i < region -> num_regs ; i ++ )		1199160	1					
ANR	1199168	ForInit	i = 0 ;	163:7:4648:4653	1199160	0	True				
ANR	1199169	AssignmentExpression	i = 0		1199160	0		=			
ANR	1199170	Identifier	i		1199160	0					
ANR	1199171	PrimaryExpression	0		1199160	1					
ANR	1199172	Condition	i < region -> num_regs	163:14:4655:4674	1199160	1	True				
ANR	1199173	RelationalExpression	i < region -> num_regs		1199160	0		<			
ANR	1199174	Identifier	i		1199160	0					
ANR	1199175	PtrMemberAccess	region -> num_regs		1199160	1					
ANR	1199176	Identifier	region		1199160	0					
ANR	1199177	Identifier	num_regs		1199160	1					
ANR	1199178	PostIncDecOperationExpression	i ++	163:36:4677:4679	1199160	2	True				
ANR	1199179	Identifier	i		1199160	0					
ANR	1199180	IncDec	++		1199160	1					
ANR	1199181	CompoundStatement		4:41:52:52	1199160	3					
ANR	1199182	ExpressionStatement	region -> beg [ i ] = region -> end [ i ] = ONIG_REGION_NOTPOS	164:4:4688:4740	1199160	0	True				
ANR	1199183	AssignmentExpression	region -> beg [ i ] = region -> end [ i ] = ONIG_REGION_NOTPOS		1199160	0		=			
ANR	1199184	ArrayIndexing	region -> beg [ i ]		1199160	0					
ANR	1199185	PtrMemberAccess	region -> beg		1199160	0					
ANR	1199186	Identifier	region		1199160	0					
ANR	1199187	Identifier	beg		1199160	1					
ANR	1199188	Identifier	i		1199160	1					
ANR	1199189	AssignmentExpression	region -> end [ i ] = ONIG_REGION_NOTPOS		1199160	1		=			
ANR	1199190	ArrayIndexing	region -> end [ i ]		1199160	0					
ANR	1199191	PtrMemberAccess	region -> end		1199160	0					
ANR	1199192	Identifier	region		1199160	0					
ANR	1199193	Identifier	end		1199160	1					
ANR	1199194	Identifier	i		1199160	1					
ANR	1199195	Identifier	ONIG_REGION_NOTPOS		1199160	1					
ANR	1199196	ExpressionStatement	history_root_free ( region )	167:2:4775:4800	1199160	2	True				
ANR	1199197	CallExpression	history_root_free ( region )		1199160	0					
ANR	1199198	Callee	history_root_free		1199160	0					
ANR	1199199	Identifier	history_root_free		1199160	0					
ANR	1199200	ArgumentList	region		1199160	1					
ANR	1199201	Argument	region		1199160	0					
ANR	1199202	Identifier	region		1199160	0					
ANR	1199203	ReturnType	extern void		1199160	1					
ANR	1199204	Identifier	onig_region_clear		1199160	2					
ANR	1199205	ParameterList	OnigRegion * region		1199160	3					
ANR	1199206	Parameter	OnigRegion * region	159:18:4609:4626	1199160	0	True				
ANR	1199207	ParameterType	OnigRegion *		1199160	0					
ANR	1199208	Identifier	region		1199160	1					
ANR	1199209	CFGEntryNode	ENTRY		1199160		True				
ANR	1199210	CFGExitNode	EXIT		1199160		True				
ANR	1199211	Symbol	region -> num_regs		1199160						
ANR	1199212	Symbol	* region -> end		1199160						
ANR	1199213	Symbol	* i		1199160						
ANR	1199214	Symbol	region -> end		1199160						
ANR	1199215	Symbol	* region -> beg		1199160						
ANR	1199216	Symbol	i		1199160						
ANR	1199217	Symbol	* region		1199160						
ANR	1199218	Symbol	region -> beg		1199160						
ANR	1199219	Symbol	* * region		1199160						
ANR	1199220	Symbol	region		1199160						
ANR	1199221	Symbol	ONIG_REGION_NOTPOS		1199160						
ANR	1199222	Function	onig_region_resize	171:0:4812:5472							
ANR	1199223	FunctionDef	"onig_region_resize (OnigRegion * region , int n)"		1199222	0					
ANR	1199224	CompoundStatement		173:0:4869:5472	1199222	0					
ANR	1199225	ExpressionStatement	region -> num_regs = n	174:2:4873:4893	1199222	0	True				
ANR	1199226	AssignmentExpression	region -> num_regs = n		1199222	0		=			
ANR	1199227	PtrMemberAccess	region -> num_regs		1199222	0					
ANR	1199228	Identifier	region		1199222	0					
ANR	1199229	Identifier	num_regs		1199222	1					
ANR	1199230	Identifier	n		1199222	1					
ANR	1199231	IfStatement	if ( n < ONIG_NREGION )		1199222	1					
ANR	1199232	Condition	n < ONIG_NREGION	176:6:4902:4917	1199222	0	True				
ANR	1199233	RelationalExpression	n < ONIG_NREGION		1199222	0		<			
ANR	1199234	Identifier	n		1199222	0					
ANR	1199235	Identifier	ONIG_NREGION		1199222	1					
ANR	1199236	ExpressionStatement	n = ONIG_NREGION	177:4:4924:4940	1199222	1	True				
ANR	1199237	AssignmentExpression	n = ONIG_NREGION		1199222	0		=			
ANR	1199238	Identifier	n		1199222	0					
ANR	1199239	Identifier	ONIG_NREGION		1199222	1					
ANR	1199240	IfStatement	if ( region -> allocated == 0 )		1199222	2					
ANR	1199241	Condition	region -> allocated == 0	179:6:4949:4970	1199222	0	True				
ANR	1199242	EqualityExpression	region -> allocated == 0		1199222	0		==			
ANR	1199243	PtrMemberAccess	region -> allocated		1199222	0					
ANR	1199244	Identifier	region		1199222	0					
ANR	1199245	Identifier	allocated		1199222	1					
ANR	1199246	PrimaryExpression	0		1199222	1					
ANR	1199247	CompoundStatement		7:30:103:103	1199222	1					
ANR	1199248	ExpressionStatement	region -> beg = ( int * ) xmalloc ( n * sizeof ( int ) )	180:4:4979:5024	1199222	0	True				
ANR	1199249	AssignmentExpression	region -> beg = ( int * ) xmalloc ( n * sizeof ( int ) )		1199222	0		=			
ANR	1199250	PtrMemberAccess	region -> beg		1199222	0					
ANR	1199251	Identifier	region		1199222	0					
ANR	1199252	Identifier	beg		1199222	1					
ANR	1199253	CastExpression	( int * ) xmalloc ( n * sizeof ( int ) )		1199222	1					
ANR	1199254	CastTarget	int *		1199222	0					
ANR	1199255	CallExpression	xmalloc ( n * sizeof ( int ) )		1199222	1					
ANR	1199256	Callee	xmalloc		1199222	0					
ANR	1199257	Identifier	xmalloc		1199222	0					
ANR	1199258	ArgumentList	n * sizeof ( int )		1199222	1					
ANR	1199259	Argument	n * sizeof ( int )		1199222	0					
ANR	1199260	MultiplicativeExpression	n * sizeof ( int )		1199222	0		*			
ANR	1199261	Identifier	n		1199222	0					
ANR	1199262	SizeofExpression	sizeof ( int )		1199222	1					
ANR	1199263	Sizeof	sizeof		1199222	0					
ANR	1199264	SizeofOperand	int		1199222	1					
ANR	1199265	ExpressionStatement	region -> end = ( int * ) xmalloc ( n * sizeof ( int ) )	181:4:5030:5075	1199222	1	True				
ANR	1199266	AssignmentExpression	region -> end = ( int * ) xmalloc ( n * sizeof ( int ) )		1199222	0		=			
ANR	1199267	PtrMemberAccess	region -> end		1199222	0					
ANR	1199268	Identifier	region		1199222	0					
ANR	1199269	Identifier	end		1199222	1					
ANR	1199270	CastExpression	( int * ) xmalloc ( n * sizeof ( int ) )		1199222	1					
ANR	1199271	CastTarget	int *		1199222	0					
ANR	1199272	CallExpression	xmalloc ( n * sizeof ( int ) )		1199222	1					
ANR	1199273	Callee	xmalloc		1199222	0					
ANR	1199274	Identifier	xmalloc		1199222	0					
ANR	1199275	ArgumentList	n * sizeof ( int )		1199222	1					
ANR	1199276	Argument	n * sizeof ( int )		1199222	0					
ANR	1199277	MultiplicativeExpression	n * sizeof ( int )		1199222	0		*			
ANR	1199278	Identifier	n		1199222	0					
ANR	1199279	SizeofExpression	sizeof ( int )		1199222	1					
ANR	1199280	Sizeof	sizeof		1199222	0					
ANR	1199281	SizeofOperand	int		1199222	1					
ANR	1199282	IfStatement	if ( region -> beg == 0 || region -> end == 0 )		1199222	2					
ANR	1199283	Condition	region -> beg == 0 || region -> end == 0	183:8:5086:5121	1199222	0	True				
ANR	1199284	OrExpression	region -> beg == 0 || region -> end == 0		1199222	0		||			
ANR	1199285	EqualityExpression	region -> beg == 0		1199222	0		==			
ANR	1199286	PtrMemberAccess	region -> beg		1199222	0					
ANR	1199287	Identifier	region		1199222	0					
ANR	1199288	Identifier	beg		1199222	1					
ANR	1199289	PrimaryExpression	0		1199222	1					
ANR	1199290	EqualityExpression	region -> end == 0		1199222	1		==			
ANR	1199291	PtrMemberAccess	region -> end		1199222	0					
ANR	1199292	Identifier	region		1199222	0					
ANR	1199293	Identifier	end		1199222	1					
ANR	1199294	PrimaryExpression	0		1199222	1					
ANR	1199295	ReturnStatement	return ONIGERR_MEMORY ;	184:6:5130:5151	1199222	1	True				
ANR	1199296	Identifier	ONIGERR_MEMORY		1199222	0					
ANR	1199297	ExpressionStatement	region -> allocated = n	186:4:5158:5179	1199222	3	True				
ANR	1199298	AssignmentExpression	region -> allocated = n		1199222	0		=			
ANR	1199299	PtrMemberAccess	region -> allocated		1199222	0					
ANR	1199300	Identifier	region		1199222	0					
ANR	1199301	Identifier	allocated		1199222	1					
ANR	1199302	Identifier	n		1199222	1					
ANR	1199303	ElseStatement	else		1199222	0					
ANR	1199304	IfStatement	if ( region -> allocated < n )		1199222	0					
ANR	1199305	Condition	region -> allocated < n	188:11:5196:5216	1199222	0	True				
ANR	1199306	RelationalExpression	region -> allocated < n		1199222	0		<			
ANR	1199307	PtrMemberAccess	region -> allocated		1199222	0					
ANR	1199308	Identifier	region		1199222	0					
ANR	1199309	Identifier	allocated		1199222	1					
ANR	1199310	Identifier	n		1199222	1					
ANR	1199311	CompoundStatement		16:34:349:349	1199222	1					
ANR	1199312	ExpressionStatement	"region -> beg = ( int * ) xrealloc ( region -> beg , n * sizeof ( int ) )"	189:4:5225:5284	1199222	0	True				
ANR	1199313	AssignmentExpression	"region -> beg = ( int * ) xrealloc ( region -> beg , n * sizeof ( int ) )"		1199222	0		=			
ANR	1199314	PtrMemberAccess	region -> beg		1199222	0					
ANR	1199315	Identifier	region		1199222	0					
ANR	1199316	Identifier	beg		1199222	1					
ANR	1199317	CastExpression	"( int * ) xrealloc ( region -> beg , n * sizeof ( int ) )"		1199222	1					
ANR	1199318	CastTarget	int *		1199222	0					
ANR	1199319	CallExpression	"xrealloc ( region -> beg , n * sizeof ( int ) )"		1199222	1					
ANR	1199320	Callee	xrealloc		1199222	0					
ANR	1199321	Identifier	xrealloc		1199222	0					
ANR	1199322	ArgumentList	region -> beg		1199222	1					
ANR	1199323	Argument	region -> beg		1199222	0					
ANR	1199324	PtrMemberAccess	region -> beg		1199222	0					
ANR	1199325	Identifier	region		1199222	0					
ANR	1199326	Identifier	beg		1199222	1					
ANR	1199327	Argument	n * sizeof ( int )		1199222	1					
ANR	1199328	MultiplicativeExpression	n * sizeof ( int )		1199222	0		*			
ANR	1199329	Identifier	n		1199222	0					
ANR	1199330	SizeofExpression	sizeof ( int )		1199222	1					
ANR	1199331	Sizeof	sizeof		1199222	0					
ANR	1199332	SizeofOperand	int		1199222	1					
ANR	1199333	ExpressionStatement	"region -> end = ( int * ) xrealloc ( region -> end , n * sizeof ( int ) )"	190:4:5290:5349	1199222	1	True				
ANR	1199334	AssignmentExpression	"region -> end = ( int * ) xrealloc ( region -> end , n * sizeof ( int ) )"		1199222	0		=			
ANR	1199335	PtrMemberAccess	region -> end		1199222	0					
ANR	1199336	Identifier	region		1199222	0					
ANR	1199337	Identifier	end		1199222	1					
ANR	1199338	CastExpression	"( int * ) xrealloc ( region -> end , n * sizeof ( int ) )"		1199222	1					
ANR	1199339	CastTarget	int *		1199222	0					
ANR	1199340	CallExpression	"xrealloc ( region -> end , n * sizeof ( int ) )"		1199222	1					
ANR	1199341	Callee	xrealloc		1199222	0					
ANR	1199342	Identifier	xrealloc		1199222	0					
ANR	1199343	ArgumentList	region -> end		1199222	1					
ANR	1199344	Argument	region -> end		1199222	0					
ANR	1199345	PtrMemberAccess	region -> end		1199222	0					
ANR	1199346	Identifier	region		1199222	0					
ANR	1199347	Identifier	end		1199222	1					
ANR	1199348	Argument	n * sizeof ( int )		1199222	1					
ANR	1199349	MultiplicativeExpression	n * sizeof ( int )		1199222	0		*			
ANR	1199350	Identifier	n		1199222	0					
ANR	1199351	SizeofExpression	sizeof ( int )		1199222	1					
ANR	1199352	Sizeof	sizeof		1199222	0					
ANR	1199353	SizeofOperand	int		1199222	1					
ANR	1199354	IfStatement	if ( region -> beg == 0 || region -> end == 0 )		1199222	2					
ANR	1199355	Condition	region -> beg == 0 || region -> end == 0	192:8:5360:5395	1199222	0	True				
ANR	1199356	OrExpression	region -> beg == 0 || region -> end == 0		1199222	0		||			
ANR	1199357	EqualityExpression	region -> beg == 0		1199222	0		==			
ANR	1199358	PtrMemberAccess	region -> beg		1199222	0					
ANR	1199359	Identifier	region		1199222	0					
ANR	1199360	Identifier	beg		1199222	1					
ANR	1199361	PrimaryExpression	0		1199222	1					
ANR	1199362	EqualityExpression	region -> end == 0		1199222	1		==			
ANR	1199363	PtrMemberAccess	region -> end		1199222	0					
ANR	1199364	Identifier	region		1199222	0					
ANR	1199365	Identifier	end		1199222	1					
ANR	1199366	PrimaryExpression	0		1199222	1					
ANR	1199367	ReturnStatement	return ONIGERR_MEMORY ;	193:6:5404:5425	1199222	1	True				
ANR	1199368	Identifier	ONIGERR_MEMORY		1199222	0					
ANR	1199369	ExpressionStatement	region -> allocated = n	195:4:5432:5453	1199222	3	True				
ANR	1199370	AssignmentExpression	region -> allocated = n		1199222	0		=			
ANR	1199371	PtrMemberAccess	region -> allocated		1199222	0					
ANR	1199372	Identifier	region		1199222	0					
ANR	1199373	Identifier	allocated		1199222	1					
ANR	1199374	Identifier	n		1199222	1					
ANR	1199375	ReturnStatement	return 0 ;	198:2:5462:5470	1199222	3	True				
ANR	1199376	PrimaryExpression	0		1199222	0					
ANR	1199377	ReturnType	extern int		1199222	1					
ANR	1199378	Identifier	onig_region_resize		1199222	2					
ANR	1199379	ParameterList	"OnigRegion * region , int n"		1199222	3					
ANR	1199380	Parameter	OnigRegion * region	172:19:4842:4859	1199222	0	True				
ANR	1199381	ParameterType	OnigRegion *		1199222	0					
ANR	1199382	Identifier	region		1199222	1					
ANR	1199383	Parameter	int n	172:39:4862:4866	1199222	1	True				
ANR	1199384	ParameterType	int		1199222	0					
ANR	1199385	Identifier	n		1199222	1					
ANR	1199386	CFGEntryNode	ENTRY		1199222		True				
ANR	1199387	CFGExitNode	EXIT		1199222		True				
ANR	1199388	Symbol	region -> num_regs		1199222						
ANR	1199389	Symbol	region -> end		1199222						
ANR	1199390	Symbol	xmalloc		1199222						
ANR	1199391	Symbol	ONIGERR_MEMORY		1199222						
ANR	1199392	Symbol	* region		1199222						
ANR	1199393	Symbol	region -> allocated		1199222						
ANR	1199394	Symbol	region -> beg		1199222						
ANR	1199395	Symbol	region		1199222						
ANR	1199396	Symbol	xrealloc		1199222						
ANR	1199397	Symbol	ONIG_NREGION		1199222						
ANR	1199398	Symbol	n		1199222						
ANR	1199399	Function	onig_region_resize_clear	201:0:5475:5654							
ANR	1199400	FunctionDef	"onig_region_resize_clear (OnigRegion * region , int n)"		1199399	0					
ANR	1199401	CompoundStatement		203:0:5538:5654	1199399	0					
ANR	1199402	IdentifierDeclStatement	int r ;	204:2:5542:5547	1199399	0	True				
ANR	1199403	IdentifierDecl	r		1199399	0					
ANR	1199404	IdentifierDeclType	int		1199399	0					
ANR	1199405	Identifier	r		1199399	1					
ANR	1199406	ExpressionStatement	"r = onig_region_resize ( region , n )"	206:2:5554:5587	1199399	1	True				
ANR	1199407	AssignmentExpression	"r = onig_region_resize ( region , n )"		1199399	0		=			
ANR	1199408	Identifier	r		1199399	0					
ANR	1199409	CallExpression	"onig_region_resize ( region , n )"		1199399	1					
ANR	1199410	Callee	onig_region_resize		1199399	0					
ANR	1199411	Identifier	onig_region_resize		1199399	0					
ANR	1199412	ArgumentList	region		1199399	1					
ANR	1199413	Argument	region		1199399	0					
ANR	1199414	Identifier	region		1199399	0					
ANR	1199415	Argument	n		1199399	1					
ANR	1199416	Identifier	n		1199399	0					
ANR	1199417	IfStatement	if ( r != 0 )		1199399	2					
ANR	1199418	Condition	r != 0	207:6:5595:5600	1199399	0	True				
ANR	1199419	EqualityExpression	r != 0		1199399	0		!=			
ANR	1199420	Identifier	r		1199399	0					
ANR	1199421	PrimaryExpression	0		1199399	1					
ANR	1199422	ReturnStatement	return r ;	207:14:5603:5611	1199399	1	True				
ANR	1199423	Identifier	r		1199399	0					
ANR	1199424	ExpressionStatement	onig_region_clear ( region )	208:2:5615:5640	1199399	3	True				
ANR	1199425	CallExpression	onig_region_clear ( region )		1199399	0					
ANR	1199426	Callee	onig_region_clear		1199399	0					
ANR	1199427	Identifier	onig_region_clear		1199399	0					
ANR	1199428	ArgumentList	region		1199399	1					
ANR	1199429	Argument	region		1199399	0					
ANR	1199430	Identifier	region		1199399	0					
ANR	1199431	ReturnStatement	return 0 ;	209:2:5644:5652	1199399	4	True				
ANR	1199432	PrimaryExpression	0		1199399	0					
ANR	1199433	ReturnType	static int		1199399	1					
ANR	1199434	Identifier	onig_region_resize_clear		1199399	2					
ANR	1199435	ParameterList	"OnigRegion * region , int n"		1199399	3					
ANR	1199436	Parameter	OnigRegion * region	202:25:5511:5528	1199399	0	True				
ANR	1199437	ParameterType	OnigRegion *		1199399	0					
ANR	1199438	Identifier	region		1199399	1					
ANR	1199439	Parameter	int n	202:45:5531:5535	1199399	1	True				
ANR	1199440	ParameterType	int		1199399	0					
ANR	1199441	Identifier	n		1199399	1					
ANR	1199442	CFGEntryNode	ENTRY		1199399		True				
ANR	1199443	CFGExitNode	EXIT		1199399		True				
ANR	1199444	Symbol	r		1199399						
ANR	1199445	Symbol	onig_region_resize		1199399						
ANR	1199446	Symbol	region		1199399						
ANR	1199447	Symbol	n		1199399						
ANR	1199448	Function	onig_region_set	212:0:5661:5959							
ANR	1199449	FunctionDef	"onig_region_set (OnigRegion * region , int at , int beg , int end)"		1199448	0					
ANR	1199450	CompoundStatement		214:0:5734:5959	1199448	0					
ANR	1199451	IfStatement	if ( at < 0 )		1199448	0					
ANR	1199452	Condition	at < 0	215:6:5742:5747	1199448	0	True				
ANR	1199453	RelationalExpression	at < 0		1199448	0		<			
ANR	1199454	Identifier	at		1199448	0					
ANR	1199455	PrimaryExpression	0		1199448	1					
ANR	1199456	ReturnStatement	return ONIGERR_INVALID_ARGUMENT ;	215:14:5750:5781	1199448	1	True				
ANR	1199457	Identifier	ONIGERR_INVALID_ARGUMENT		1199448	0					
ANR	1199458	IfStatement	if ( at >= region -> allocated )		1199448	1					
ANR	1199459	Condition	at >= region -> allocated	217:6:5790:5812	1199448	0	True				
ANR	1199460	RelationalExpression	at >= region -> allocated		1199448	0		>=			
ANR	1199461	Identifier	at		1199448	0					
ANR	1199462	PtrMemberAccess	region -> allocated		1199448	1					
ANR	1199463	Identifier	region		1199448	0					
ANR	1199464	Identifier	allocated		1199448	1					
ANR	1199465	CompoundStatement		5:4:86:128	1199448	1					
ANR	1199466	IdentifierDeclStatement	"int r = onig_region_resize ( region , at + 1 ) ;"	218:4:5821:5863	1199448	0	True				
ANR	1199467	IdentifierDecl	"r = onig_region_resize ( region , at + 1 )"		1199448	0					
ANR	1199468	IdentifierDeclType	int		1199448	0					
ANR	1199469	Identifier	r		1199448	1					
ANR	1199470	AssignmentExpression	"r = onig_region_resize ( region , at + 1 )"		1199448	2		=			
ANR	1199471	Identifier	r		1199448	0					
ANR	1199472	CallExpression	"onig_region_resize ( region , at + 1 )"		1199448	1					
ANR	1199473	Callee	onig_region_resize		1199448	0					
ANR	1199474	Identifier	onig_region_resize		1199448	0					
ANR	1199475	ArgumentList	region		1199448	1					
ANR	1199476	Argument	region		1199448	0					
ANR	1199477	Identifier	region		1199448	0					
ANR	1199478	Argument	at + 1		1199448	1					
ANR	1199479	AdditiveExpression	at + 1		1199448	0		+			
ANR	1199480	Identifier	at		1199448	0					
ANR	1199481	PrimaryExpression	1		1199448	1					
ANR	1199482	IfStatement	if ( r < 0 )		1199448	1					
ANR	1199483	Condition	r < 0	219:8:5873:5877	1199448	0	True				
ANR	1199484	RelationalExpression	r < 0		1199448	0		<			
ANR	1199485	Identifier	r		1199448	0					
ANR	1199486	PrimaryExpression	0		1199448	1					
ANR	1199487	ReturnStatement	return r ;	219:15:5880:5888	1199448	1	True				
ANR	1199488	Identifier	r		1199448	0					
ANR	1199489	ExpressionStatement	region -> beg [ at ] = beg	222:2:5899:5920	1199448	2	True				
ANR	1199490	AssignmentExpression	region -> beg [ at ] = beg		1199448	0		=			
ANR	1199491	ArrayIndexing	region -> beg [ at ]		1199448	0					
ANR	1199492	PtrMemberAccess	region -> beg		1199448	0					
ANR	1199493	Identifier	region		1199448	0					
ANR	1199494	Identifier	beg		1199448	1					
ANR	1199495	Identifier	at		1199448	1					
ANR	1199496	Identifier	beg		1199448	1					
ANR	1199497	ExpressionStatement	region -> end [ at ] = end	223:2:5924:5945	1199448	3	True				
ANR	1199498	AssignmentExpression	region -> end [ at ] = end		1199448	0		=			
ANR	1199499	ArrayIndexing	region -> end [ at ]		1199448	0					
ANR	1199500	PtrMemberAccess	region -> end		1199448	0					
ANR	1199501	Identifier	region		1199448	0					
ANR	1199502	Identifier	end		1199448	1					
ANR	1199503	Identifier	at		1199448	1					
ANR	1199504	Identifier	end		1199448	1					
ANR	1199505	ReturnStatement	return 0 ;	224:2:5949:5957	1199448	4	True				
ANR	1199506	PrimaryExpression	0		1199448	0					
ANR	1199507	ReturnType	extern int		1199448	1					
ANR	1199508	Identifier	onig_region_set		1199448	2					
ANR	1199509	ParameterList	"OnigRegion * region , int at , int beg , int end"		1199448	3					
ANR	1199510	Parameter	OnigRegion * region	213:16:5688:5705	1199448	0	True				
ANR	1199511	ParameterType	OnigRegion *		1199448	0					
ANR	1199512	Identifier	region		1199448	1					
ANR	1199513	Parameter	int at	213:36:5708:5713	1199448	1	True				
ANR	1199514	ParameterType	int		1199448	0					
ANR	1199515	Identifier	at		1199448	1					
ANR	1199516	Parameter	int beg	213:44:5716:5722	1199448	2	True				
ANR	1199517	ParameterType	int		1199448	0					
ANR	1199518	Identifier	beg		1199448	1					
ANR	1199519	Parameter	int end	213:53:5725:5731	1199448	3	True				
ANR	1199520	ParameterType	int		1199448	0					
ANR	1199521	Identifier	end		1199448	1					
ANR	1199522	CFGEntryNode	ENTRY		1199448		True				
ANR	1199523	CFGExitNode	EXIT		1199448		True				
ANR	1199524	Symbol	* region -> end		1199448						
ANR	1199525	Symbol	beg		1199448						
ANR	1199526	Symbol	* region -> beg		1199448						
ANR	1199527	Symbol	ONIGERR_INVALID_ARGUMENT		1199448						
ANR	1199528	Symbol	* region		1199448						
ANR	1199529	Symbol	region -> allocated		1199448						
ANR	1199530	Symbol	region -> beg		1199448						
ANR	1199531	Symbol	r		1199448						
ANR	1199532	Symbol	at		1199448						
ANR	1199533	Symbol	region -> end		1199448						
ANR	1199534	Symbol	onig_region_resize		1199448						
ANR	1199535	Symbol	end		1199448						
ANR	1199536	Symbol	* at		1199448						
ANR	1199537	Symbol	* * region		1199448						
ANR	1199538	Symbol	region		1199448						
ANR	1199539	Function	onig_region_init	227:0:5962:6190							
ANR	1199540	FunctionDef	onig_region_init (OnigRegion * region)		1199539	0					
ANR	1199541	CompoundStatement		229:0:6011:6190	1199539	0					
ANR	1199542	ExpressionStatement	region -> num_regs = 0	230:2:6015:6039	1199539	0	True				
ANR	1199543	AssignmentExpression	region -> num_regs = 0		1199539	0		=			
ANR	1199544	PtrMemberAccess	region -> num_regs		1199539	0					
ANR	1199545	Identifier	region		1199539	0					
ANR	1199546	Identifier	num_regs		1199539	1					
ANR	1199547	PrimaryExpression	0		1199539	1					
ANR	1199548	ExpressionStatement	region -> allocated = 0	231:2:6043:6067	1199539	1	True				
ANR	1199549	AssignmentExpression	region -> allocated = 0		1199539	0		=			
ANR	1199550	PtrMemberAccess	region -> allocated		1199539	0					
ANR	1199551	Identifier	region		1199539	0					
ANR	1199552	Identifier	allocated		1199539	1					
ANR	1199553	PrimaryExpression	0		1199539	1					
ANR	1199554	ExpressionStatement	region -> beg = ( int * ) 0	232:2:6071:6102	1199539	2	True				
ANR	1199555	AssignmentExpression	region -> beg = ( int * ) 0		1199539	0		=			
ANR	1199556	PtrMemberAccess	region -> beg		1199539	0					
ANR	1199557	Identifier	region		1199539	0					
ANR	1199558	Identifier	beg		1199539	1					
ANR	1199559	CastExpression	( int * ) 0		1199539	1					
ANR	1199560	CastTarget	int *		1199539	0					
ANR	1199561	PrimaryExpression	0		1199539	1					
ANR	1199562	ExpressionStatement	region -> end = ( int * ) 0	233:2:6106:6137	1199539	3	True				
ANR	1199563	AssignmentExpression	region -> end = ( int * ) 0		1199539	0		=			
ANR	1199564	PtrMemberAccess	region -> end		1199539	0					
ANR	1199565	Identifier	region		1199539	0					
ANR	1199566	Identifier	end		1199539	1					
ANR	1199567	CastExpression	( int * ) 0		1199539	1					
ANR	1199568	CastTarget	int *		1199539	0					
ANR	1199569	PrimaryExpression	0		1199539	1					
ANR	1199570	ExpressionStatement	region -> history_root = ( OnigCaptureTreeNode * ) 0	234:2:6141:6188	1199539	4	True				
ANR	1199571	AssignmentExpression	region -> history_root = ( OnigCaptureTreeNode * ) 0		1199539	0		=			
ANR	1199572	PtrMemberAccess	region -> history_root		1199539	0					
ANR	1199573	Identifier	region		1199539	0					
ANR	1199574	Identifier	history_root		1199539	1					
ANR	1199575	CastExpression	( OnigCaptureTreeNode * ) 0		1199539	1					
ANR	1199576	CastTarget	OnigCaptureTreeNode *		1199539	0					
ANR	1199577	PrimaryExpression	0		1199539	1					
ANR	1199578	ReturnType	extern void		1199539	1					
ANR	1199579	Identifier	onig_region_init		1199539	2					
ANR	1199580	ParameterList	OnigRegion * region		1199539	3					
ANR	1199581	Parameter	OnigRegion * region	228:17:5991:6008	1199539	0	True				
ANR	1199582	ParameterType	OnigRegion *		1199539	0					
ANR	1199583	Identifier	region		1199539	1					
ANR	1199584	CFGEntryNode	ENTRY		1199539		True				
ANR	1199585	CFGExitNode	EXIT		1199539		True				
ANR	1199586	Symbol	region -> num_regs		1199539						
ANR	1199587	Symbol	region -> end		1199539						
ANR	1199588	Symbol	region -> history_root		1199539						
ANR	1199589	Symbol	* region		1199539						
ANR	1199590	Symbol	region -> allocated		1199539						
ANR	1199591	Symbol	region -> beg		1199539						
ANR	1199592	Symbol	region		1199539						
ANR	1199593	Function	onig_region_new	237:0:6193:6338							
ANR	1199594	FunctionDef	onig_region_new ()		1199593	0					
ANR	1199595	CompoundStatement		239:0:6234:6338	1199593	0					
ANR	1199596	IdentifierDeclStatement	OnigRegion * r ;	240:2:6238:6251	1199593	0	True				
ANR	1199597	IdentifierDecl	* r		1199593	0					
ANR	1199598	IdentifierDeclType	OnigRegion *		1199593	0					
ANR	1199599	Identifier	r		1199593	1					
ANR	1199600	ExpressionStatement	r = ( OnigRegion * ) xmalloc ( sizeof ( OnigRegion ) )	242:2:6256:6301	1199593	1	True				
ANR	1199601	AssignmentExpression	r = ( OnigRegion * ) xmalloc ( sizeof ( OnigRegion ) )		1199593	0		=			
ANR	1199602	Identifier	r		1199593	0					
ANR	1199603	CastExpression	( OnigRegion * ) xmalloc ( sizeof ( OnigRegion ) )		1199593	1					
ANR	1199604	CastTarget	OnigRegion *		1199593	0					
ANR	1199605	CallExpression	xmalloc ( sizeof ( OnigRegion ) )		1199593	1					
ANR	1199606	Callee	xmalloc		1199593	0					
ANR	1199607	Identifier	xmalloc		1199593	0					
ANR	1199608	ArgumentList	sizeof ( OnigRegion )		1199593	1					
ANR	1199609	Argument	sizeof ( OnigRegion )		1199593	0					
ANR	1199610	SizeofExpression	sizeof ( OnigRegion )		1199593	0					
ANR	1199611	Sizeof	sizeof		1199593	0					
ANR	1199612	SizeofOperand	OnigRegion		1199593	1					
ANR	1199613	ExpressionStatement	onig_region_init ( r )	243:2:6305:6324	1199593	2	True				
ANR	1199614	CallExpression	onig_region_init ( r )		1199593	0					
ANR	1199615	Callee	onig_region_init		1199593	0					
ANR	1199616	Identifier	onig_region_init		1199593	0					
ANR	1199617	ArgumentList	r		1199593	1					
ANR	1199618	Argument	r		1199593	0					
ANR	1199619	Identifier	r		1199593	0					
ANR	1199620	ReturnStatement	return r ;	244:2:6328:6336	1199593	3	True				
ANR	1199621	Identifier	r		1199593	0					
ANR	1199622	ReturnType	extern OnigRegion *		1199593	1					
ANR	1199623	Identifier	onig_region_new		1199593	2					
ANR	1199624	ParameterList			1199593	3					
ANR	1199625	CFGEntryNode	ENTRY		1199593		True				
ANR	1199626	CFGExitNode	EXIT		1199593		True				
ANR	1199627	Symbol	r		1199593						
ANR	1199628	Symbol	xmalloc		1199593						
ANR	1199629	Function	onig_region_free	247:0:6341:6630							
ANR	1199630	FunctionDef	"onig_region_free (OnigRegion * r , int free_self)"		1199629	0					
ANR	1199631	CompoundStatement		249:0:6400:6630	1199629	0					
ANR	1199632	IfStatement	if ( r )		1199629	0					
ANR	1199633	Condition	r	250:6:6408:6408	1199629	0	True				
ANR	1199634	Identifier	r		1199629	0					
ANR	1199635	CompoundStatement		2:9:10:10	1199629	1					
ANR	1199636	IfStatement	if ( r -> allocated > 0 )		1199629	0					
ANR	1199637	Condition	r -> allocated > 0	251:8:6421:6436	1199629	0	True				
ANR	1199638	RelationalExpression	r -> allocated > 0		1199629	0		>			
ANR	1199639	PtrMemberAccess	r -> allocated		1199629	0					
ANR	1199640	Identifier	r		1199629	0					
ANR	1199641	Identifier	allocated		1199629	1					
ANR	1199642	PrimaryExpression	0		1199629	1					
ANR	1199643	CompoundStatement		3:26:38:38	1199629	1					
ANR	1199644	IfStatement	if ( r -> beg )		1199629	0					
ANR	1199645	Condition	r -> beg	252:10:6451:6456	1199629	0	True				
ANR	1199646	PtrMemberAccess	r -> beg		1199629	0					
ANR	1199647	Identifier	r		1199629	0					
ANR	1199648	Identifier	beg		1199629	1					
ANR	1199649	ExpressionStatement	xfree ( r -> beg )	252:18:6459:6472	1199629	1	True				
ANR	1199650	CallExpression	xfree ( r -> beg )		1199629	0					
ANR	1199651	Callee	xfree		1199629	0					
ANR	1199652	Identifier	xfree		1199629	0					
ANR	1199653	ArgumentList	r -> beg		1199629	1					
ANR	1199654	Argument	r -> beg		1199629	0					
ANR	1199655	PtrMemberAccess	r -> beg		1199629	0					
ANR	1199656	Identifier	r		1199629	0					
ANR	1199657	Identifier	beg		1199629	1					
ANR	1199658	IfStatement	if ( r -> end )		1199629	1					
ANR	1199659	Condition	r -> end	253:10:6484:6489	1199629	0	True				
ANR	1199660	PtrMemberAccess	r -> end		1199629	0					
ANR	1199661	Identifier	r		1199629	0					
ANR	1199662	Identifier	end		1199629	1					
ANR	1199663	ExpressionStatement	xfree ( r -> end )	253:18:6492:6505	1199629	1	True				
ANR	1199664	CallExpression	xfree ( r -> end )		1199629	0					
ANR	1199665	Callee	xfree		1199629	0					
ANR	1199666	Identifier	xfree		1199629	0					
ANR	1199667	ArgumentList	r -> end		1199629	1					
ANR	1199668	Argument	r -> end		1199629	0					
ANR	1199669	PtrMemberAccess	r -> end		1199629	0					
ANR	1199670	Identifier	r		1199629	0					
ANR	1199671	Identifier	end		1199629	1					
ANR	1199672	ExpressionStatement	r -> allocated = 0	254:6:6513:6529	1199629	2	True				
ANR	1199673	AssignmentExpression	r -> allocated = 0		1199629	0		=			
ANR	1199674	PtrMemberAccess	r -> allocated		1199629	0					
ANR	1199675	Identifier	r		1199629	0					
ANR	1199676	Identifier	allocated		1199629	1					
ANR	1199677	PrimaryExpression	0		1199629	1					
ANR	1199678	ExpressionStatement	history_root_free ( r )	257:4:6568:6588	1199629	1	True				
ANR	1199679	CallExpression	history_root_free ( r )		1199629	0					
ANR	1199680	Callee	history_root_free		1199629	0					
ANR	1199681	Identifier	history_root_free		1199629	0					
ANR	1199682	ArgumentList	r		1199629	1					
ANR	1199683	Argument	r		1199629	0					
ANR	1199684	Identifier	r		1199629	0					
ANR	1199685	IfStatement	if ( free_self )		1199629	2					
ANR	1199686	Condition	free_self	259:8:6605:6613	1199629	0	True				
ANR	1199687	Identifier	free_self		1199629	0					
ANR	1199688	ExpressionStatement	xfree ( r )	259:19:6616:6624	1199629	1	True				
ANR	1199689	CallExpression	xfree ( r )		1199629	0					
ANR	1199690	Callee	xfree		1199629	0					
ANR	1199691	Identifier	xfree		1199629	0					
ANR	1199692	ArgumentList	r		1199629	1					
ANR	1199693	Argument	r		1199629	0					
ANR	1199694	Identifier	r		1199629	0					
ANR	1199695	ReturnType	extern void		1199629	1					
ANR	1199696	Identifier	onig_region_free		1199629	2					
ANR	1199697	ParameterList	"OnigRegion * r , int free_self"		1199629	3					
ANR	1199698	Parameter	OnigRegion * r	248:17:6370:6382	1199629	0	True				
ANR	1199699	ParameterType	OnigRegion *		1199629	0					
ANR	1199700	Identifier	r		1199629	1					
ANR	1199701	Parameter	int free_self	248:32:6385:6397	1199629	1	True				
ANR	1199702	ParameterType	int		1199629	0					
ANR	1199703	Identifier	free_self		1199629	1					
ANR	1199704	CFGEntryNode	ENTRY		1199629		True				
ANR	1199705	CFGExitNode	EXIT		1199629		True				
ANR	1199706	Symbol	r		1199629						
ANR	1199707	Symbol	r -> beg		1199629						
ANR	1199708	Symbol	free_self		1199629						
ANR	1199709	Symbol	r -> end		1199629						
ANR	1199710	Symbol	* r		1199629						
ANR	1199711	Symbol	r -> allocated		1199629						
ANR	1199712	Function	onig_region_copy	263:0:6633:7480							
ANR	1199713	FunctionDef	"onig_region_copy (OnigRegion * to , OnigRegion * from)"		1199712	0					
ANR	1199714	CompoundStatement		265:0:6696:7480	1199712	0					
ANR	1199715	Statement	define	266:1:6699:6704	1199712	0	True				
ANR	1199716	Statement	RREGC_SIZE	266:8:6706:6715	1199712	1	True				
ANR	1199717	Statement	(	266:21:6719:6719	1199712	2	True				
ANR	1199718	Statement	sizeof	266:22:6720:6725	1199712	3	True				
ANR	1199719	Statement	(	266:28:6726:6726	1199712	4	True				
ANR	1199720	Statement	int	266:29:6727:6729	1199712	5	True				
ANR	1199721	Statement	)	266:32:6730:6730	1199712	6	True				
ANR	1199722	Statement	*	266:34:6732:6732	1199712	7	True				
ANR	1199723	Statement	from	266:36:6734:6737	1199712	8	True				
ANR	1199724	Statement	->	266:40:6738:6739	1199712	9	True				
ANR	1199725	Statement	num_regs	266:42:6740:6747	1199712	10	True				
ANR	1199726	Statement	)	266:50:6748:6748	1199712	11	True				
ANR	1199727	IdentifierDeclStatement	int i ;	267:2:6752:6757	1199712	12	True				
ANR	1199728	IdentifierDecl	i		1199712	0					
ANR	1199729	IdentifierDeclType	int		1199712	0					
ANR	1199730	Identifier	i		1199712	1					
ANR	1199731	IfStatement	if ( to == from )		1199712	13					
ANR	1199732	Condition	to == from	269:6:6766:6775	1199712	0	True				
ANR	1199733	EqualityExpression	to == from		1199712	0		==			
ANR	1199734	Identifier	to		1199712	0					
ANR	1199735	Identifier	from		1199712	1					
ANR	1199736	ReturnStatement	return ;	269:18:6778:6784	1199712	1	True				
ANR	1199737	IfStatement	if ( to -> allocated == 0 )		1199712	14					
ANR	1199738	Condition	to -> allocated == 0	271:6:6793:6810	1199712	0	True				
ANR	1199739	EqualityExpression	to -> allocated == 0		1199712	0		==			
ANR	1199740	PtrMemberAccess	to -> allocated		1199712	0					
ANR	1199741	Identifier	to		1199712	0					
ANR	1199742	Identifier	allocated		1199712	1					
ANR	1199743	PrimaryExpression	0		1199712	1					
ANR	1199744	CompoundStatement		7:26:116:116	1199712	1					
ANR	1199745	IfStatement	if ( from -> num_regs > 0 )		1199712	0					
ANR	1199746	Condition	from -> num_regs > 0	272:8:6823:6840	1199712	0	True				
ANR	1199747	RelationalExpression	from -> num_regs > 0		1199712	0		>			
ANR	1199748	PtrMemberAccess	from -> num_regs		1199712	0					
ANR	1199749	Identifier	from		1199712	0					
ANR	1199750	Identifier	num_regs		1199712	1					
ANR	1199751	PrimaryExpression	0		1199712	1					
ANR	1199752	CompoundStatement		8:28:146:146	1199712	1					
ANR	1199753	ExpressionStatement	to -> beg = ( int * ) xmalloc ( RREGC_SIZE )	273:6:6851:6887	1199712	0	True				
ANR	1199754	AssignmentExpression	to -> beg = ( int * ) xmalloc ( RREGC_SIZE )		1199712	0		=			
ANR	1199755	PtrMemberAccess	to -> beg		1199712	0					
ANR	1199756	Identifier	to		1199712	0					
ANR	1199757	Identifier	beg		1199712	1					
ANR	1199758	CastExpression	( int * ) xmalloc ( RREGC_SIZE )		1199712	1					
ANR	1199759	CastTarget	int *		1199712	0					
ANR	1199760	CallExpression	xmalloc ( RREGC_SIZE )		1199712	1					
ANR	1199761	Callee	xmalloc		1199712	0					
ANR	1199762	Identifier	xmalloc		1199712	0					
ANR	1199763	ArgumentList	RREGC_SIZE		1199712	1					
ANR	1199764	Argument	RREGC_SIZE		1199712	0					
ANR	1199765	Identifier	RREGC_SIZE		1199712	0					
ANR	1199766	ExpressionStatement	to -> end = ( int * ) xmalloc ( RREGC_SIZE )	274:6:6895:6931	1199712	1	True				
ANR	1199767	AssignmentExpression	to -> end = ( int * ) xmalloc ( RREGC_SIZE )		1199712	0		=			
ANR	1199768	PtrMemberAccess	to -> end		1199712	0					
ANR	1199769	Identifier	to		1199712	0					
ANR	1199770	Identifier	end		1199712	1					
ANR	1199771	CastExpression	( int * ) xmalloc ( RREGC_SIZE )		1199712	1					
ANR	1199772	CastTarget	int *		1199712	0					
ANR	1199773	CallExpression	xmalloc ( RREGC_SIZE )		1199712	1					
ANR	1199774	Callee	xmalloc		1199712	0					
ANR	1199775	Identifier	xmalloc		1199712	0					
ANR	1199776	ArgumentList	RREGC_SIZE		1199712	1					
ANR	1199777	Argument	RREGC_SIZE		1199712	0					
ANR	1199778	Identifier	RREGC_SIZE		1199712	0					
ANR	1199779	ExpressionStatement	to -> allocated = from -> num_regs	275:6:6939:6969	1199712	2	True				
ANR	1199780	AssignmentExpression	to -> allocated = from -> num_regs		1199712	0		=			
ANR	1199781	PtrMemberAccess	to -> allocated		1199712	0					
ANR	1199782	Identifier	to		1199712	0					
ANR	1199783	Identifier	allocated		1199712	1					
ANR	1199784	PtrMemberAccess	from -> num_regs		1199712	1					
ANR	1199785	Identifier	from		1199712	0					
ANR	1199786	Identifier	num_regs		1199712	1					
ANR	1199787	ElseStatement	else		1199712	0					
ANR	1199788	IfStatement	if ( to -> allocated < from -> num_regs )		1199712	0					
ANR	1199789	Condition	to -> allocated < from -> num_regs	278:11:6992:7021	1199712	0	True				
ANR	1199790	RelationalExpression	to -> allocated < from -> num_regs		1199712	0		<			
ANR	1199791	PtrMemberAccess	to -> allocated		1199712	0					
ANR	1199792	Identifier	to		1199712	0					
ANR	1199793	Identifier	allocated		1199712	1					
ANR	1199794	PtrMemberAccess	from -> num_regs		1199712	1					
ANR	1199795	Identifier	from		1199712	0					
ANR	1199796	Identifier	num_regs		1199712	1					
ANR	1199797	CompoundStatement		14:43:327:327	1199712	1					
ANR	1199798	ExpressionStatement	"to -> beg = ( int * ) xrealloc ( to -> beg , RREGC_SIZE )"	279:4:7030:7076	1199712	0	True				
ANR	1199799	AssignmentExpression	"to -> beg = ( int * ) xrealloc ( to -> beg , RREGC_SIZE )"		1199712	0		=			
ANR	1199800	PtrMemberAccess	to -> beg		1199712	0					
ANR	1199801	Identifier	to		1199712	0					
ANR	1199802	Identifier	beg		1199712	1					
ANR	1199803	CastExpression	"( int * ) xrealloc ( to -> beg , RREGC_SIZE )"		1199712	1					
ANR	1199804	CastTarget	int *		1199712	0					
ANR	1199805	CallExpression	"xrealloc ( to -> beg , RREGC_SIZE )"		1199712	1					
ANR	1199806	Callee	xrealloc		1199712	0					
ANR	1199807	Identifier	xrealloc		1199712	0					
ANR	1199808	ArgumentList	to -> beg		1199712	1					
ANR	1199809	Argument	to -> beg		1199712	0					
ANR	1199810	PtrMemberAccess	to -> beg		1199712	0					
ANR	1199811	Identifier	to		1199712	0					
ANR	1199812	Identifier	beg		1199712	1					
ANR	1199813	Argument	RREGC_SIZE		1199712	1					
ANR	1199814	Identifier	RREGC_SIZE		1199712	0					
ANR	1199815	ExpressionStatement	"to -> end = ( int * ) xrealloc ( to -> end , RREGC_SIZE )"	280:4:7082:7128	1199712	1	True				
ANR	1199816	AssignmentExpression	"to -> end = ( int * ) xrealloc ( to -> end , RREGC_SIZE )"		1199712	0		=			
ANR	1199817	PtrMemberAccess	to -> end		1199712	0					
ANR	1199818	Identifier	to		1199712	0					
ANR	1199819	Identifier	end		1199712	1					
ANR	1199820	CastExpression	"( int * ) xrealloc ( to -> end , RREGC_SIZE )"		1199712	1					
ANR	1199821	CastTarget	int *		1199712	0					
ANR	1199822	CallExpression	"xrealloc ( to -> end , RREGC_SIZE )"		1199712	1					
ANR	1199823	Callee	xrealloc		1199712	0					
ANR	1199824	Identifier	xrealloc		1199712	0					
ANR	1199825	ArgumentList	to -> end		1199712	1					
ANR	1199826	Argument	to -> end		1199712	0					
ANR	1199827	PtrMemberAccess	to -> end		1199712	0					
ANR	1199828	Identifier	to		1199712	0					
ANR	1199829	Identifier	end		1199712	1					
ANR	1199830	Argument	RREGC_SIZE		1199712	1					
ANR	1199831	Identifier	RREGC_SIZE		1199712	0					
ANR	1199832	ExpressionStatement	to -> allocated = from -> num_regs	281:4:7134:7164	1199712	2	True				
ANR	1199833	AssignmentExpression	to -> allocated = from -> num_regs		1199712	0		=			
ANR	1199834	PtrMemberAccess	to -> allocated		1199712	0					
ANR	1199835	Identifier	to		1199712	0					
ANR	1199836	Identifier	allocated		1199712	1					
ANR	1199837	PtrMemberAccess	from -> num_regs		1199712	1					
ANR	1199838	Identifier	from		1199712	0					
ANR	1199839	Identifier	num_regs		1199712	1					
ANR	1199840	ForStatement	for ( i = 0 ; i < from -> num_regs ; i ++ )		1199712	15					
ANR	1199841	ForInit	i = 0 ;	284:7:7178:7183	1199712	0	True				
ANR	1199842	AssignmentExpression	i = 0		1199712	0		=			
ANR	1199843	Identifier	i		1199712	0					
ANR	1199844	PrimaryExpression	0		1199712	1					
ANR	1199845	Condition	i < from -> num_regs	284:14:7185:7202	1199712	1	True				
ANR	1199846	RelationalExpression	i < from -> num_regs		1199712	0		<			
ANR	1199847	Identifier	i		1199712	0					
ANR	1199848	PtrMemberAccess	from -> num_regs		1199712	1					
ANR	1199849	Identifier	from		1199712	0					
ANR	1199850	Identifier	num_regs		1199712	1					
ANR	1199851	PostIncDecOperationExpression	i ++	284:34:7205:7207	1199712	2	True				
ANR	1199852	Identifier	i		1199712	0					
ANR	1199853	IncDec	++		1199712	1					
ANR	1199854	CompoundStatement		20:39:513:513	1199712	3					
ANR	1199855	ExpressionStatement	to -> beg [ i ] = from -> beg [ i ]	285:4:7216:7241	1199712	0	True				
ANR	1199856	AssignmentExpression	to -> beg [ i ] = from -> beg [ i ]		1199712	0		=			
ANR	1199857	ArrayIndexing	to -> beg [ i ]		1199712	0					
ANR	1199858	PtrMemberAccess	to -> beg		1199712	0					
ANR	1199859	Identifier	to		1199712	0					
ANR	1199860	Identifier	beg		1199712	1					
ANR	1199861	Identifier	i		1199712	1					
ANR	1199862	ArrayIndexing	from -> beg [ i ]		1199712	1					
ANR	1199863	PtrMemberAccess	from -> beg		1199712	0					
ANR	1199864	Identifier	from		1199712	0					
ANR	1199865	Identifier	beg		1199712	1					
ANR	1199866	Identifier	i		1199712	1					
ANR	1199867	ExpressionStatement	to -> end [ i ] = from -> end [ i ]	286:4:7247:7272	1199712	1	True				
ANR	1199868	AssignmentExpression	to -> end [ i ] = from -> end [ i ]		1199712	0		=			
ANR	1199869	ArrayIndexing	to -> end [ i ]		1199712	0					
ANR	1199870	PtrMemberAccess	to -> end		1199712	0					
ANR	1199871	Identifier	to		1199712	0					
ANR	1199872	Identifier	end		1199712	1					
ANR	1199873	Identifier	i		1199712	1					
ANR	1199874	ArrayIndexing	from -> end [ i ]		1199712	1					
ANR	1199875	PtrMemberAccess	from -> end		1199712	0					
ANR	1199876	Identifier	from		1199712	0					
ANR	1199877	Identifier	end		1199712	1					
ANR	1199878	Identifier	i		1199712	1					
ANR	1199879	ExpressionStatement	to -> num_regs = from -> num_regs	288:2:7280:7309	1199712	16	True				
ANR	1199880	AssignmentExpression	to -> num_regs = from -> num_regs		1199712	0		=			
ANR	1199881	PtrMemberAccess	to -> num_regs		1199712	0					
ANR	1199882	Identifier	to		1199712	0					
ANR	1199883	Identifier	num_regs		1199712	1					
ANR	1199884	PtrMemberAccess	from -> num_regs		1199712	1					
ANR	1199885	Identifier	from		1199712	0					
ANR	1199886	Identifier	num_regs		1199712	1					
ANR	1199887	ExpressionStatement	history_root_free ( to )	291:2:7341:7362	1199712	17	True				
ANR	1199888	CallExpression	history_root_free ( to )		1199712	0					
ANR	1199889	Callee	history_root_free		1199712	0					
ANR	1199890	Identifier	history_root_free		1199712	0					
ANR	1199891	ArgumentList	to		1199712	1					
ANR	1199892	Argument	to		1199712	0					
ANR	1199893	Identifier	to		1199712	0					
ANR	1199894	IfStatement	if ( IS_NOT_NULL ( from -> history_root ) )		1199712	18					
ANR	1199895	Condition	IS_NOT_NULL ( from -> history_root )	293:6:7371:7401	1199712	0	True				
ANR	1199896	CallExpression	IS_NOT_NULL ( from -> history_root )		1199712	0					
ANR	1199897	Callee	IS_NOT_NULL		1199712	0					
ANR	1199898	Identifier	IS_NOT_NULL		1199712	0					
ANR	1199899	ArgumentList	from -> history_root		1199712	1					
ANR	1199900	Argument	from -> history_root		1199712	0					
ANR	1199901	PtrMemberAccess	from -> history_root		1199712	0					
ANR	1199902	Identifier	from		1199712	0					
ANR	1199903	Identifier	history_root		1199712	1					
ANR	1199904	CompoundStatement		29:39:707:707	1199712	1					
ANR	1199905	ExpressionStatement	to -> history_root = history_tree_clone ( from -> history_root )	294:4:7410:7467	1199712	0	True				
ANR	1199906	AssignmentExpression	to -> history_root = history_tree_clone ( from -> history_root )		1199712	0		=			
ANR	1199907	PtrMemberAccess	to -> history_root		1199712	0					
ANR	1199908	Identifier	to		1199712	0					
ANR	1199909	Identifier	history_root		1199712	1					
ANR	1199910	CallExpression	history_tree_clone ( from -> history_root )		1199712	1					
ANR	1199911	Callee	history_tree_clone		1199712	0					
ANR	1199912	Identifier	history_tree_clone		1199712	0					
ANR	1199913	ArgumentList	from -> history_root		1199712	1					
ANR	1199914	Argument	from -> history_root		1199712	0					
ANR	1199915	PtrMemberAccess	from -> history_root		1199712	0					
ANR	1199916	Identifier	from		1199712	0					
ANR	1199917	Identifier	history_root		1199712	1					
ANR	1199918	ReturnType	extern void		1199712	1					
ANR	1199919	Identifier	onig_region_copy		1199712	2					
ANR	1199920	ParameterList	"OnigRegion * to , OnigRegion * from"		1199712	3					
ANR	1199921	Parameter	OnigRegion * to	264:17:6662:6675	1199712	0	True				
ANR	1199922	ParameterType	OnigRegion *		1199712	0					
ANR	1199923	Identifier	to		1199712	1					
ANR	1199924	Parameter	OnigRegion * from	264:33:6678:6693	1199712	1	True				
ANR	1199925	ParameterType	OnigRegion *		1199712	0					
ANR	1199926	Identifier	from		1199712	1					
ANR	1199927	CFGEntryNode	ENTRY		1199712		True				
ANR	1199928	CFGExitNode	EXIT		1199712		True				
ANR	1199929	Symbol	to -> end		1199712						
ANR	1199930	Symbol	* * from		1199712						
ANR	1199931	Symbol	IS_NOT_NULL		1199712						
ANR	1199932	Symbol	to -> allocated		1199712						
ANR	1199933	Symbol	* to -> beg		1199712						
ANR	1199934	Symbol	from -> end		1199712						
ANR	1199935	Symbol	* from -> beg		1199712						
ANR	1199936	Symbol	xmalloc		1199712						
ANR	1199937	Symbol	* to -> end		1199712						
ANR	1199938	Symbol	from		1199712						
ANR	1199939	Symbol	to -> num_regs		1199712						
ANR	1199940	Symbol	xrealloc		1199712						
ANR	1199941	Symbol	from -> num_regs		1199712						
ANR	1199942	Symbol	from -> beg		1199712						
ANR	1199943	Symbol	* to		1199712						
ANR	1199944	Symbol	* * to		1199712						
ANR	1199945	Symbol	to -> history_root		1199712						
ANR	1199946	Symbol	from -> history_root		1199712						
ANR	1199947	Symbol	i		1199712						
ANR	1199948	Symbol	RREGC_SIZE		1199712						
ANR	1199949	Symbol	history_tree_clone		1199712						
ANR	1199950	Symbol	* from -> end		1199712						
ANR	1199951	Symbol	* i		1199712						
ANR	1199952	Symbol	to -> beg		1199712						
ANR	1199953	Symbol	to		1199712						
ANR	1199954	Symbol	* from		1199712						
ANR	1199955	DeclStmt									
ANR	1199956	Decl							unsigned int	unsigned int	size
ANR	1199957	DeclStmt									
ANR	1199958	Decl							unsigned int	unsigned int	MatchStackLimitSize
ANR	1199959	Function	onig_get_match_stack_limit_size	414:7:11329:11412							
ANR	1199960	FunctionDef	onig_get_match_stack_limit_size ()		1199959	0					
ANR	1199961	CompoundStatement		416:0:11380:11412	1199959	0					
ANR	1199962	ReturnStatement	return MatchStackLimitSize ;	417:2:11384:11410	1199959	0	True				
ANR	1199963	Identifier	MatchStackLimitSize		1199959	0					
ANR	1199964	ReturnType	unsigned int		1199959	1					
ANR	1199965	Identifier	onig_get_match_stack_limit_size		1199959	2					
ANR	1199966	ParameterList			1199959	3					
ANR	1199967	CFGEntryNode	ENTRY		1199959		True				
ANR	1199968	CFGExitNode	EXIT		1199959		True				
ANR	1199969	Symbol	MatchStackLimitSize		1199959						
ANR	1199970	Function	onig_set_match_stack_limit_size	420:0:11415:11521							
ANR	1199971	FunctionDef	onig_set_match_stack_limit_size (unsigned int size)		1199970	0					
ANR	1199972	CompoundStatement		422:0:11477:11521	1199970	0					
ANR	1199973	ExpressionStatement	MatchStackLimitSize = size	423:2:11481:11507	1199970	0	True				
ANR	1199974	AssignmentExpression	MatchStackLimitSize = size		1199970	0		=			
ANR	1199975	Identifier	MatchStackLimitSize		1199970	0					
ANR	1199976	Identifier	size		1199970	1					
ANR	1199977	ReturnStatement	return 0 ;	424:2:11511:11519	1199970	1	True				
ANR	1199978	PrimaryExpression	0		1199970	0					
ANR	1199979	ReturnType	extern int		1199970	1					
ANR	1199980	Identifier	onig_set_match_stack_limit_size		1199970	2					
ANR	1199981	ParameterList	unsigned int size		1199970	3					
ANR	1199982	Parameter	unsigned int size	421:32:11458:11474	1199970	0	True				
ANR	1199983	ParameterType	unsigned int		1199970	0					
ANR	1199984	Identifier	size		1199970	1					
ANR	1199985	CFGEntryNode	ENTRY		1199970		True				
ANR	1199986	CFGExitNode	EXIT		1199970		True				
ANR	1199987	Symbol	size		1199970						
ANR	1199988	Symbol	MatchStackLimitSize		1199970						
ANR	1199989	Function	stack_double	427:0:11524:12621							
ANR	1199990	FunctionDef	"stack_double (OnigStackType * * arg_stk_base , OnigStackType * * arg_stk_end , OnigStackType * * arg_stk , OnigStackType * stk_alloc , OnigMatchArg * msa)"		1199989	0					
ANR	1199991	CompoundStatement		430:0:11683:12621	1199989	0					
ANR	1199992	IdentifierDeclStatement	unsigned int n ;	431:2:11687:11701	1199989	0	True				
ANR	1199993	IdentifierDecl	n		1199989	0					
ANR	1199994	IdentifierDeclType	unsigned int		1199989	0					
ANR	1199995	Identifier	n		1199989	1					
ANR	1199996	IdentifierDeclStatement	"OnigStackType * x , * stk_base , * stk_end , * stk ;"	432:2:11705:11748	1199989	1	True				
ANR	1199997	IdentifierDecl	* x		1199989	0					
ANR	1199998	IdentifierDeclType	OnigStackType *		1199989	0					
ANR	1199999	Identifier	x		1199989	1					
ANR	1200000	IdentifierDecl	* stk_base		1199989	1					
ANR	1200001	IdentifierDeclType	OnigStackType *		1199989	0					
ANR	1200002	Identifier	stk_base		1199989	1					
ANR	1200003	IdentifierDecl	* stk_end		1199989	2					
ANR	1200004	IdentifierDeclType	OnigStackType *		1199989	0					
ANR	1200005	Identifier	stk_end		1199989	1					
ANR	1200006	IdentifierDecl	* stk		1199989	3					
ANR	1200007	IdentifierDeclType	OnigStackType *		1199989	0					
ANR	1200008	Identifier	stk		1199989	1					
ANR	1200009	ExpressionStatement	stk_base = * arg_stk_base	434:2:11753:11777	1199989	2	True				
ANR	1200010	AssignmentExpression	stk_base = * arg_stk_base		1199989	0		=			
ANR	1200011	Identifier	stk_base		1199989	0					
ANR	1200012	UnaryOperationExpression	* arg_stk_base		1199989	1					
ANR	1200013	UnaryOperator	*		1199989	0					
ANR	1200014	Identifier	arg_stk_base		1199989	1					
ANR	1200015	ExpressionStatement	stk_end = * arg_stk_end	435:2:11781:11804	1199989	3	True				
ANR	1200016	AssignmentExpression	stk_end = * arg_stk_end		1199989	0		=			
ANR	1200017	Identifier	stk_end		1199989	0					
ANR	1200018	UnaryOperationExpression	* arg_stk_end		1199989	1					
ANR	1200019	UnaryOperator	*		1199989	0					
ANR	1200020	Identifier	arg_stk_end		1199989	1					
ANR	1200021	ExpressionStatement	stk = * arg_stk	436:2:11808:11827	1199989	4	True				
ANR	1200022	AssignmentExpression	stk = * arg_stk		1199989	0		=			
ANR	1200023	Identifier	stk		1199989	0					
ANR	1200024	UnaryOperationExpression	* arg_stk		1199989	1					
ANR	1200025	UnaryOperator	*		1199989	0					
ANR	1200026	Identifier	arg_stk		1199989	1					
ANR	1200027	ExpressionStatement	n = stk_end - stk_base	438:2:11832:11854	1199989	5	True				
ANR	1200028	AssignmentExpression	n = stk_end - stk_base		1199989	0		=			
ANR	1200029	Identifier	n		1199989	0					
ANR	1200030	AdditiveExpression	stk_end - stk_base		1199989	1		-			
ANR	1200031	Identifier	stk_end		1199989	0					
ANR	1200032	Identifier	stk_base		1199989	1					
ANR	1200033	IfStatement	if ( stk_base == stk_alloc && IS_NULL ( msa -> stack_p ) )		1199989	6					
ANR	1200034	Condition	stk_base == stk_alloc && IS_NULL ( msa -> stack_p )	439:6:11862:11907	1199989	0	True				
ANR	1200035	AndExpression	stk_base == stk_alloc && IS_NULL ( msa -> stack_p )		1199989	0		&&			
ANR	1200036	EqualityExpression	stk_base == stk_alloc		1199989	0		==			
ANR	1200037	Identifier	stk_base		1199989	0					
ANR	1200038	Identifier	stk_alloc		1199989	1					
ANR	1200039	CallExpression	IS_NULL ( msa -> stack_p )		1199989	1					
ANR	1200040	Callee	IS_NULL		1199989	0					
ANR	1200041	Identifier	IS_NULL		1199989	0					
ANR	1200042	ArgumentList	msa -> stack_p		1199989	1					
ANR	1200043	Argument	msa -> stack_p		1199989	0					
ANR	1200044	PtrMemberAccess	msa -> stack_p		1199989	0					
ANR	1200045	Identifier	msa		1199989	0					
ANR	1200046	Identifier	stack_p		1199989	1					
ANR	1200047	CompoundStatement		10:54:226:226	1199989	1					
ANR	1200048	ExpressionStatement	x = ( OnigStackType * ) xmalloc ( sizeof ( OnigStackType ) * n * 2 )	440:4:11916:11975	1199989	0	True				
ANR	1200049	AssignmentExpression	x = ( OnigStackType * ) xmalloc ( sizeof ( OnigStackType ) * n * 2 )		1199989	0		=			
ANR	1200050	Identifier	x		1199989	0					
ANR	1200051	CastExpression	( OnigStackType * ) xmalloc ( sizeof ( OnigStackType ) * n * 2 )		1199989	1					
ANR	1200052	CastTarget	OnigStackType *		1199989	0					
ANR	1200053	CallExpression	xmalloc ( sizeof ( OnigStackType ) * n * 2 )		1199989	1					
ANR	1200054	Callee	xmalloc		1199989	0					
ANR	1200055	Identifier	xmalloc		1199989	0					
ANR	1200056	ArgumentList	sizeof ( OnigStackType ) * n * 2		1199989	1					
ANR	1200057	Argument	sizeof ( OnigStackType ) * n * 2		1199989	0					
ANR	1200058	MultiplicativeExpression	sizeof ( OnigStackType ) * n * 2		1199989	0		*			
ANR	1200059	SizeofExpression	sizeof ( OnigStackType )		1199989	0					
ANR	1200060	Sizeof	sizeof		1199989	0					
ANR	1200061	SizeofOperand	OnigStackType		1199989	1					
ANR	1200062	MultiplicativeExpression	n * 2		1199989	1		*			
ANR	1200063	Identifier	n		1199989	0					
ANR	1200064	PrimaryExpression	2		1199989	1					
ANR	1200065	IfStatement	if ( IS_NULL ( x ) )		1199989	1					
ANR	1200066	Condition	IS_NULL ( x )	441:8:11985:11994	1199989	0	True				
ANR	1200067	CallExpression	IS_NULL ( x )		1199989	0					
ANR	1200068	Callee	IS_NULL		1199989	0					
ANR	1200069	Identifier	IS_NULL		1199989	0					
ANR	1200070	ArgumentList	x		1199989	1					
ANR	1200071	Argument	x		1199989	0					
ANR	1200072	Identifier	x		1199989	0					
ANR	1200073	CompoundStatement		12:20:313:313	1199989	1					
ANR	1200074	ExpressionStatement	STACK_SAVE	442:6:12005:12015	1199989	0	True				
ANR	1200075	Identifier	STACK_SAVE		1199989	0					
ANR	1200076	ReturnStatement	return ONIGERR_MEMORY ;	443:6:12023:12044	1199989	1	True				
ANR	1200077	Identifier	ONIGERR_MEMORY		1199989	0					
ANR	1200078	ExpressionStatement	"xmemcpy ( x , stk_base , n * sizeof ( OnigStackType ) )"	445:4:12056:12103	1199989	2	True				
ANR	1200079	CallExpression	"xmemcpy ( x , stk_base , n * sizeof ( OnigStackType ) )"		1199989	0					
ANR	1200080	Callee	xmemcpy		1199989	0					
ANR	1200081	Identifier	xmemcpy		1199989	0					
ANR	1200082	ArgumentList	x		1199989	1					
ANR	1200083	Argument	x		1199989	0					
ANR	1200084	Identifier	x		1199989	0					
ANR	1200085	Argument	stk_base		1199989	1					
ANR	1200086	Identifier	stk_base		1199989	0					
ANR	1200087	Argument	n * sizeof ( OnigStackType )		1199989	2					
ANR	1200088	MultiplicativeExpression	n * sizeof ( OnigStackType )		1199989	0		*			
ANR	1200089	Identifier	n		1199989	0					
ANR	1200090	SizeofExpression	sizeof ( OnigStackType )		1199989	1					
ANR	1200091	Sizeof	sizeof		1199989	0					
ANR	1200092	SizeofOperand	OnigStackType		1199989	1					
ANR	1200093	ExpressionStatement	n *= 2	446:4:12109:12115	1199989	3	True				
ANR	1200094	AssignmentExpression	n *= 2		1199989	0		*=			
ANR	1200095	Identifier	n		1199989	0					
ANR	1200096	PrimaryExpression	2		1199989	1					
ANR	1200097	ElseStatement	else		1199989	0					
ANR	1200098	CompoundStatement		19:7:444:444	1199989	0					
ANR	1200099	ExpressionStatement	n *= 2	449:4:12134:12140	1199989	0	True				
ANR	1200100	AssignmentExpression	n *= 2		1199989	0		*=			
ANR	1200101	Identifier	n		1199989	0					
ANR	1200102	PrimaryExpression	2		1199989	1					
ANR	1200103	IfStatement	if ( MatchStackLimitSize != 0 && n > MatchStackLimitSize )		1199989	1					
ANR	1200104	Condition	MatchStackLimitSize != 0 && n > MatchStackLimitSize	450:8:12150:12200	1199989	0	True				
ANR	1200105	AndExpression	MatchStackLimitSize != 0 && n > MatchStackLimitSize		1199989	0		&&			
ANR	1200106	EqualityExpression	MatchStackLimitSize != 0		1199989	0		!=			
ANR	1200107	Identifier	MatchStackLimitSize		1199989	0					
ANR	1200108	PrimaryExpression	0		1199989	1					
ANR	1200109	RelationalExpression	n > MatchStackLimitSize		1199989	1		>			
ANR	1200110	Identifier	n		1199989	0					
ANR	1200111	Identifier	MatchStackLimitSize		1199989	1					
ANR	1200112	CompoundStatement		21:61:519:519	1199989	1					
ANR	1200113	IfStatement	if ( ( unsigned int ) ( stk_end - stk_base ) == MatchStackLimitSize )		1199989	0					
ANR	1200114	Condition	( unsigned int ) ( stk_end - stk_base ) == MatchStackLimitSize	451:10:12215:12272	1199989	0	True				
ANR	1200115	EqualityExpression	( unsigned int ) ( stk_end - stk_base ) == MatchStackLimitSize		1199989	0		==			
ANR	1200116	CastExpression	( unsigned int ) ( stk_end - stk_base )		1199989	0					
ANR	1200117	CastTarget	unsigned int		1199989	0					
ANR	1200118	AdditiveExpression	stk_end - stk_base		1199989	1		-			
ANR	1200119	Identifier	stk_end		1199989	0					
ANR	1200120	Identifier	stk_base		1199989	1					
ANR	1200121	Identifier	MatchStackLimitSize		1199989	1					
ANR	1200122	ReturnStatement	return ONIGERR_MATCH_STACK_LIMIT_OVER ;	452:8:12283:12320	1199989	1	True				
ANR	1200123	Identifier	ONIGERR_MATCH_STACK_LIMIT_OVER		1199989	0					
ANR	1200124	ElseStatement	else		1199989	0					
ANR	1200125	ExpressionStatement	n = MatchStackLimitSize	454:8:12341:12364	1199989	0	True				
ANR	1200126	AssignmentExpression	n = MatchStackLimitSize		1199989	0		=			
ANR	1200127	Identifier	n		1199989	0					
ANR	1200128	Identifier	MatchStackLimitSize		1199989	1					
ANR	1200129	ExpressionStatement	"x = ( OnigStackType * ) xrealloc ( stk_base , sizeof ( OnigStackType ) * n )"	456:4:12376:12442	1199989	2	True				
ANR	1200130	AssignmentExpression	"x = ( OnigStackType * ) xrealloc ( stk_base , sizeof ( OnigStackType ) * n )"		1199989	0		=			
ANR	1200131	Identifier	x		1199989	0					
ANR	1200132	CastExpression	"( OnigStackType * ) xrealloc ( stk_base , sizeof ( OnigStackType ) * n )"		1199989	1					
ANR	1200133	CastTarget	OnigStackType *		1199989	0					
ANR	1200134	CallExpression	"xrealloc ( stk_base , sizeof ( OnigStackType ) * n )"		1199989	1					
ANR	1200135	Callee	xrealloc		1199989	0					
ANR	1200136	Identifier	xrealloc		1199989	0					
ANR	1200137	ArgumentList	stk_base		1199989	1					
ANR	1200138	Argument	stk_base		1199989	0					
ANR	1200139	Identifier	stk_base		1199989	0					
ANR	1200140	Argument	sizeof ( OnigStackType ) * n		1199989	1					
ANR	1200141	MultiplicativeExpression	sizeof ( OnigStackType ) * n		1199989	0		*			
ANR	1200142	SizeofExpression	sizeof ( OnigStackType )		1199989	0					
ANR	1200143	Sizeof	sizeof		1199989	0					
ANR	1200144	SizeofOperand	OnigStackType		1199989	1					
ANR	1200145	Identifier	n		1199989	1					
ANR	1200146	IfStatement	if ( IS_NULL ( x ) )		1199989	3					
ANR	1200147	Condition	IS_NULL ( x )	457:8:12452:12461	1199989	0	True				
ANR	1200148	CallExpression	IS_NULL ( x )		1199989	0					
ANR	1200149	Callee	IS_NULL		1199989	0					
ANR	1200150	Identifier	IS_NULL		1199989	0					
ANR	1200151	ArgumentList	x		1199989	1					
ANR	1200152	Argument	x		1199989	0					
ANR	1200153	Identifier	x		1199989	0					
ANR	1200154	CompoundStatement		28:20:780:780	1199989	1					
ANR	1200155	ExpressionStatement	STACK_SAVE	458:6:12472:12482	1199989	0	True				
ANR	1200156	Identifier	STACK_SAVE		1199989	0					
ANR	1200157	ReturnStatement	return ONIGERR_MEMORY ;	459:6:12490:12511	1199989	1	True				
ANR	1200158	Identifier	ONIGERR_MEMORY		1199989	0					
ANR	1200159	ExpressionStatement	* arg_stk = x + ( stk - stk_base )	462:2:12525:12561	1199989	7	True				
ANR	1200160	AssignmentExpression	* arg_stk = x + ( stk - stk_base )		1199989	0		=			
ANR	1200161	UnaryOperationExpression	* arg_stk		1199989	0					
ANR	1200162	UnaryOperator	*		1199989	0					
ANR	1200163	Identifier	arg_stk		1199989	1					
ANR	1200164	AdditiveExpression	x + ( stk - stk_base )		1199989	1		+			
ANR	1200165	Identifier	x		1199989	0					
ANR	1200166	AdditiveExpression	stk - stk_base		1199989	1		-			
ANR	1200167	Identifier	stk		1199989	0					
ANR	1200168	Identifier	stk_base		1199989	1					
ANR	1200169	ExpressionStatement	* arg_stk_base = x	463:2:12565:12582	1199989	8	True				
ANR	1200170	AssignmentExpression	* arg_stk_base = x		1199989	0		=			
ANR	1200171	UnaryOperationExpression	* arg_stk_base		1199989	0					
ANR	1200172	UnaryOperator	*		1199989	0					
ANR	1200173	Identifier	arg_stk_base		1199989	1					
ANR	1200174	Identifier	x		1199989	1					
ANR	1200175	ExpressionStatement	* arg_stk_end = x + n	464:2:12586:12607	1199989	9	True				
ANR	1200176	AssignmentExpression	* arg_stk_end = x + n		1199989	0		=			
ANR	1200177	UnaryOperationExpression	* arg_stk_end		1199989	0					
ANR	1200178	UnaryOperator	*		1199989	0					
ANR	1200179	Identifier	arg_stk_end		1199989	1					
ANR	1200180	AdditiveExpression	x + n		1199989	1		+			
ANR	1200181	Identifier	x		1199989	0					
ANR	1200182	Identifier	n		1199989	1					
ANR	1200183	ReturnStatement	return 0 ;	465:2:12611:12619	1199989	10	True				
ANR	1200184	PrimaryExpression	0		1199989	0					
ANR	1200185	ReturnType	static int		1199989	1					
ANR	1200186	Identifier	stack_double		1199989	2					
ANR	1200187	ParameterList	"OnigStackType * * arg_stk_base , OnigStackType * * arg_stk_end , OnigStackType * * arg_stk , OnigStackType * stk_alloc , OnigMatchArg * msa"		1199989	3					
ANR	1200188	Parameter	OnigStackType * * arg_stk_base	428:13:11548:11575	1199989	0	True				
ANR	1200189	ParameterType	OnigStackType * *		1199989	0					
ANR	1200190	Identifier	arg_stk_base		1199989	1					
ANR	1200191	Parameter	OnigStackType * * arg_stk_end	428:43:11578:11604	1199989	1	True				
ANR	1200192	ParameterType	OnigStackType * *		1199989	0					
ANR	1200193	Identifier	arg_stk_end		1199989	1					
ANR	1200194	Parameter	OnigStackType * * arg_stk	429:6:11613:11635	1199989	2	True				
ANR	1200195	ParameterType	OnigStackType * *		1199989	0					
ANR	1200196	Identifier	arg_stk		1199989	1					
ANR	1200197	Parameter	OnigStackType * stk_alloc	429:31:11638:11661	1199989	3	True				
ANR	1200198	ParameterType	OnigStackType *		1199989	0					
ANR	1200199	Identifier	stk_alloc		1199989	1					
ANR	1200200	Parameter	OnigMatchArg * msa	429:57:11664:11680	1199989	4	True				
ANR	1200201	ParameterType	OnigMatchArg *		1199989	0					
ANR	1200202	Identifier	msa		1199989	1					
ANR	1200203	CFGEntryNode	ENTRY		1199989		True				
ANR	1200204	CFGExitNode	EXIT		1199989		True				
ANR	1200205	Symbol	* msa		1199989						
ANR	1200206	Symbol	stk_alloc		1199989						
ANR	1200207	Symbol	ONIGERR_MEMORY		1199989						
ANR	1200208	Symbol	stk_end		1199989						
ANR	1200209	Symbol	stk		1199989						
ANR	1200210	Symbol	n		1199989						
ANR	1200211	Symbol	* arg_stk_end		1199989						
ANR	1200212	Symbol	* arg_stk_base		1199989						
ANR	1200213	Symbol	IS_NULL		1199989						
ANR	1200214	Symbol	xmalloc		1199989						
ANR	1200215	Symbol	ONIGERR_MATCH_STACK_LIMIT_OVER		1199989						
ANR	1200216	Symbol	* arg_stk		1199989						
ANR	1200217	Symbol	MatchStackLimitSize		1199989						
ANR	1200218	Symbol	x		1199989						
ANR	1200219	Symbol	msa -> stack_p		1199989						
ANR	1200220	Symbol	msa		1199989						
ANR	1200221	Symbol	arg_stk		1199989						
ANR	1200222	Symbol	xrealloc		1199989						
ANR	1200223	Symbol	arg_stk_base		1199989						
ANR	1200224	Symbol	arg_stk_end		1199989						
ANR	1200225	Symbol	stk_base		1199989						
ANR	1200226	DeclStmt									
ANR	1200227	Decl							int	int	r
ANR	1200228	DeclStmt									
ANR	1200229	Decl							int	int	x
ANR	1200230	DeclStmt									
ANR	1200231	Decl							int	int	x
ANR	1200232	DeclStmt									
ANR	1200233	Decl							int	int	level
ANR	1200234	DeclStmt									
ANR	1200235	Decl							int	int	level
ANR	1200236	DeclStmt									
ANR	1200237	Decl							OnigStackType	OnigStackType *	k
ANR	1200238	DeclStmt									
ANR	1200239	Decl							OnigStackType	OnigStackType *	k
ANR	1200240	DeclStmt									
ANR	1200241	Decl							int	int	level
ANR	1200242	DeclStmt									
ANR	1200243	Decl							OnigStackType	OnigStackType *	k
ANR	1200244	DeclStmt									
ANR	1200245	Decl							OnigStackType	OnigStackType *	k
ANR	1200246	DeclStmt									
ANR	1200247	Decl							UChar	UChar *	endp
ANR	1200248	DeclStmt									
ANR	1200249	Decl							int	int	level
ANR	1200250	DeclStmt									
ANR	1200251	Decl							OnigStackType	OnigStackType *	k
ANR	1200252	DeclStmt									
ANR	1200253	Decl							UChar	UChar *	endp
ANR	1200254	DeclStmt									
ANR	1200255	Decl							int	int	level
ANR	1200256	DeclStmt									
ANR	1200257	Decl							int	int	level
ANR	1200258	DeclStmt									
ANR	1200259	Decl							OnigStackType	OnigStackType *	k
ANR	1200260	Function	string_cmp_ic	976:0:26046:26696							
ANR	1200261	FunctionDef	"string_cmp_ic (OnigEncoding enc , int case_fold_flag , UChar * s1 , UChar * * ps2 , int mblen)"		1200260	0					
ANR	1200262	CompoundStatement		978:0:26148:26696	1200260	0					
ANR	1200263	IdentifierDeclStatement	UChar buf1 [ ONIGENC_MBC_CASE_FOLD_MAXLEN ] ;	979:2:26152:26192	1200260	0	True				
ANR	1200264	IdentifierDecl	buf1 [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]		1200260	0					
ANR	1200265	IdentifierDeclType	UChar [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]		1200260	0					
ANR	1200266	Identifier	buf1		1200260	1					
ANR	1200267	Identifier	ONIGENC_MBC_CASE_FOLD_MAXLEN		1200260	2					
ANR	1200268	IdentifierDeclStatement	UChar buf2 [ ONIGENC_MBC_CASE_FOLD_MAXLEN ] ;	980:2:26196:26236	1200260	1	True				
ANR	1200269	IdentifierDecl	buf2 [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]		1200260	0					
ANR	1200270	IdentifierDeclType	UChar [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]		1200260	0					
ANR	1200271	Identifier	buf2		1200260	1					
ANR	1200272	Identifier	ONIGENC_MBC_CASE_FOLD_MAXLEN		1200260	2					
ANR	1200273	IdentifierDeclStatement	"UChar * p1 , * p2 , * end1 , * s2 , * end2 ;"	981:2:26240:26273	1200260	2	True				
ANR	1200274	IdentifierDecl	* p1		1200260	0					
ANR	1200275	IdentifierDeclType	UChar *		1200260	0					
ANR	1200276	Identifier	p1		1200260	1					
ANR	1200277	IdentifierDecl	* p2		1200260	1					
ANR	1200278	IdentifierDeclType	UChar *		1200260	0					
ANR	1200279	Identifier	p2		1200260	1					
ANR	1200280	IdentifierDecl	* end1		1200260	2					
ANR	1200281	IdentifierDeclType	UChar *		1200260	0					
ANR	1200282	Identifier	end1		1200260	1					
ANR	1200283	IdentifierDecl	* s2		1200260	3					
ANR	1200284	IdentifierDeclType	UChar *		1200260	0					
ANR	1200285	Identifier	s2		1200260	1					
ANR	1200286	IdentifierDecl	* end2		1200260	4					
ANR	1200287	IdentifierDeclType	UChar *		1200260	0					
ANR	1200288	Identifier	end2		1200260	1					
ANR	1200289	IdentifierDeclStatement	"int len1 , len2 ;"	982:2:26277:26291	1200260	3	True				
ANR	1200290	IdentifierDecl	len1		1200260	0					
ANR	1200291	IdentifierDeclType	int		1200260	0					
ANR	1200292	Identifier	len1		1200260	1					
ANR	1200293	IdentifierDecl	len2		1200260	1					
ANR	1200294	IdentifierDeclType	int		1200260	0					
ANR	1200295	Identifier	len2		1200260	1					
ANR	1200296	ExpressionStatement	s2 = * ps2	984:2:26296:26307	1200260	4	True				
ANR	1200297	AssignmentExpression	s2 = * ps2		1200260	0		=			
ANR	1200298	Identifier	s2		1200260	0					
ANR	1200299	UnaryOperationExpression	* ps2		1200260	1					
ANR	1200300	UnaryOperator	*		1200260	0					
ANR	1200301	Identifier	ps2		1200260	1					
ANR	1200302	ExpressionStatement	end1 = s1 + mblen	985:2:26311:26328	1200260	5	True				
ANR	1200303	AssignmentExpression	end1 = s1 + mblen		1200260	0		=			
ANR	1200304	Identifier	end1		1200260	0					
ANR	1200305	AdditiveExpression	s1 + mblen		1200260	1		+			
ANR	1200306	Identifier	s1		1200260	0					
ANR	1200307	Identifier	mblen		1200260	1					
ANR	1200308	ExpressionStatement	end2 = s2 + mblen	986:2:26332:26349	1200260	6	True				
ANR	1200309	AssignmentExpression	end2 = s2 + mblen		1200260	0		=			
ANR	1200310	Identifier	end2		1200260	0					
ANR	1200311	AdditiveExpression	s2 + mblen		1200260	1		+			
ANR	1200312	Identifier	s2		1200260	0					
ANR	1200313	Identifier	mblen		1200260	1					
ANR	1200314	WhileStatement	while ( s1 < end1 )		1200260	7					
ANR	1200315	Condition	s1 < end1	987:9:26360:26368	1200260	0	True				
ANR	1200316	RelationalExpression	s1 < end1		1200260	0		<			
ANR	1200317	Identifier	s1		1200260	0					
ANR	1200318	Identifier	end1		1200260	1					
ANR	1200319	CompoundStatement		10:20:222:222	1200260	1					
ANR	1200320	ExpressionStatement	"len1 = ONIGENC_MBC_CASE_FOLD ( enc , case_fold_flag , & s1 , end1 , buf1 )"	988:4:26377:26443	1200260	0	True				
ANR	1200321	AssignmentExpression	"len1 = ONIGENC_MBC_CASE_FOLD ( enc , case_fold_flag , & s1 , end1 , buf1 )"		1200260	0		=			
ANR	1200322	Identifier	len1		1200260	0					
ANR	1200323	CallExpression	"ONIGENC_MBC_CASE_FOLD ( enc , case_fold_flag , & s1 , end1 , buf1 )"		1200260	1					
ANR	1200324	Callee	ONIGENC_MBC_CASE_FOLD		1200260	0					
ANR	1200325	Identifier	ONIGENC_MBC_CASE_FOLD		1200260	0					
ANR	1200326	ArgumentList	enc		1200260	1					
ANR	1200327	Argument	enc		1200260	0					
ANR	1200328	Identifier	enc		1200260	0					
ANR	1200329	Argument	case_fold_flag		1200260	1					
ANR	1200330	Identifier	case_fold_flag		1200260	0					
ANR	1200331	Argument	& s1		1200260	2					
ANR	1200332	UnaryOperationExpression	& s1		1200260	0					
ANR	1200333	UnaryOperator	&		1200260	0					
ANR	1200334	Identifier	s1		1200260	1					
ANR	1200335	Argument	end1		1200260	3					
ANR	1200336	Identifier	end1		1200260	0					
ANR	1200337	Argument	buf1		1200260	4					
ANR	1200338	Identifier	buf1		1200260	0					
ANR	1200339	ExpressionStatement	"len2 = ONIGENC_MBC_CASE_FOLD ( enc , case_fold_flag , & s2 , end2 , buf2 )"	989:4:26449:26515	1200260	1	True				
ANR	1200340	AssignmentExpression	"len2 = ONIGENC_MBC_CASE_FOLD ( enc , case_fold_flag , & s2 , end2 , buf2 )"		1200260	0		=			
ANR	1200341	Identifier	len2		1200260	0					
ANR	1200342	CallExpression	"ONIGENC_MBC_CASE_FOLD ( enc , case_fold_flag , & s2 , end2 , buf2 )"		1200260	1					
ANR	1200343	Callee	ONIGENC_MBC_CASE_FOLD		1200260	0					
ANR	1200344	Identifier	ONIGENC_MBC_CASE_FOLD		1200260	0					
ANR	1200345	ArgumentList	enc		1200260	1					
ANR	1200346	Argument	enc		1200260	0					
ANR	1200347	Identifier	enc		1200260	0					
ANR	1200348	Argument	case_fold_flag		1200260	1					
ANR	1200349	Identifier	case_fold_flag		1200260	0					
ANR	1200350	Argument	& s2		1200260	2					
ANR	1200351	UnaryOperationExpression	& s2		1200260	0					
ANR	1200352	UnaryOperator	&		1200260	0					
ANR	1200353	Identifier	s2		1200260	1					
ANR	1200354	Argument	end2		1200260	3					
ANR	1200355	Identifier	end2		1200260	0					
ANR	1200356	Argument	buf2		1200260	4					
ANR	1200357	Identifier	buf2		1200260	0					
ANR	1200358	IfStatement	if ( len1 != len2 )		1200260	2					
ANR	1200359	Condition	len1 != len2	990:8:26525:26536	1200260	0	True				
ANR	1200360	EqualityExpression	len1 != len2		1200260	0		!=			
ANR	1200361	Identifier	len1		1200260	0					
ANR	1200362	Identifier	len2		1200260	1					
ANR	1200363	ReturnStatement	return 0 ;	990:22:26539:26547	1200260	1	True				
ANR	1200364	PrimaryExpression	0		1200260	0					
ANR	1200365	ExpressionStatement	p1 = buf1	991:4:26553:26562	1200260	3	True				
ANR	1200366	AssignmentExpression	p1 = buf1		1200260	0		=			
ANR	1200367	Identifier	p1		1200260	0					
ANR	1200368	Identifier	buf1		1200260	1					
ANR	1200369	ExpressionStatement	p2 = buf2	992:4:26568:26577	1200260	4	True				
ANR	1200370	AssignmentExpression	p2 = buf2		1200260	0		=			
ANR	1200371	Identifier	p2		1200260	0					
ANR	1200372	Identifier	buf2		1200260	1					
ANR	1200373	WhileStatement	while ( len1 -- > 0 )		1200260	5					
ANR	1200374	Condition	len1 -- > 0	993:11:26590:26599	1200260	0	True				
ANR	1200375	RelationalExpression	len1 -- > 0		1200260	0		>			
ANR	1200376	PostIncDecOperationExpression	len1 --		1200260	0					
ANR	1200377	Identifier	len1		1200260	0					
ANR	1200378	IncDec	--		1200260	1					
ANR	1200379	PrimaryExpression	0		1200260	1					
ANR	1200380	CompoundStatement		16:23:453:453	1200260	1					
ANR	1200381	IfStatement	if ( * p1 != * p2 )		1200260	0					
ANR	1200382	Condition	* p1 != * p2	994:10:26614:26623	1200260	0	True				
ANR	1200383	EqualityExpression	* p1 != * p2		1200260	0		!=			
ANR	1200384	UnaryOperationExpression	* p1		1200260	0					
ANR	1200385	UnaryOperator	*		1200260	0					
ANR	1200386	Identifier	p1		1200260	1					
ANR	1200387	UnaryOperationExpression	* p2		1200260	1					
ANR	1200388	UnaryOperator	*		1200260	0					
ANR	1200389	Identifier	p2		1200260	1					
ANR	1200390	ReturnStatement	return 0 ;	994:22:26626:26634	1200260	1	True				
ANR	1200391	PrimaryExpression	0		1200260	0					
ANR	1200392	ExpressionStatement	p1 ++	995:6:26642:26646	1200260	1	True				
ANR	1200393	PostIncDecOperationExpression	p1 ++		1200260	0					
ANR	1200394	Identifier	p1		1200260	0					
ANR	1200395	IncDec	++		1200260	1					
ANR	1200396	ExpressionStatement	p2 ++	996:6:26654:26658	1200260	2	True				
ANR	1200397	PostIncDecOperationExpression	p2 ++		1200260	0					
ANR	1200398	Identifier	p2		1200260	0					
ANR	1200399	IncDec	++		1200260	1					
ANR	1200400	ExpressionStatement	* ps2 = s2	1000:2:26673:26682	1200260	8	True				
ANR	1200401	AssignmentExpression	* ps2 = s2		1200260	0		=			
ANR	1200402	UnaryOperationExpression	* ps2		1200260	0					
ANR	1200403	UnaryOperator	*		1200260	0					
ANR	1200404	Identifier	ps2		1200260	1					
ANR	1200405	Identifier	s2		1200260	1					
ANR	1200406	ReturnStatement	return 1 ;	1001:2:26686:26694	1200260	9	True				
ANR	1200407	PrimaryExpression	1		1200260	0					
ANR	1200408	ReturnType	static int		1200260	1					
ANR	1200409	Identifier	string_cmp_ic		1200260	2					
ANR	1200410	ParameterList	"OnigEncoding enc , int case_fold_flag , UChar * s1 , UChar * * ps2 , int mblen"		1200260	3					
ANR	1200411	Parameter	OnigEncoding enc	976:25:26071:26086	1200260	0	True				
ANR	1200412	ParameterType	OnigEncoding		1200260	0					
ANR	1200413	Identifier	enc		1200260	1					
ANR	1200414	Parameter	int case_fold_flag	976:43:26089:26106	1200260	1	True				
ANR	1200415	ParameterType	int		1200260	0					
ANR	1200416	Identifier	case_fold_flag		1200260	1					
ANR	1200417	Parameter	UChar * s1	977:4:26113:26121	1200260	2	True				
ANR	1200418	ParameterType	UChar *		1200260	0					
ANR	1200419	Identifier	s1		1200260	1					
ANR	1200420	Parameter	UChar * * ps2	977:15:26124:26134	1200260	3	True				
ANR	1200421	ParameterType	UChar * *		1200260	0					
ANR	1200422	Identifier	ps2		1200260	1					
ANR	1200423	Parameter	int mblen	977:28:26137:26145	1200260	4	True				
ANR	1200424	ParameterType	int		1200260	0					
ANR	1200425	Identifier	mblen		1200260	1					
ANR	1200426	CFGEntryNode	ENTRY		1200260		True				
ANR	1200427	CFGExitNode	EXIT		1200260		True				
ANR	1200428	Symbol	p1		1200260						
ANR	1200429	Symbol	p2		1200260						
ANR	1200430	Symbol	* p1		1200260						
ANR	1200431	Symbol	& s2		1200260						
ANR	1200432	Symbol	& s1		1200260						
ANR	1200433	Symbol	* p2		1200260						
ANR	1200434	Symbol	ps2		1200260						
ANR	1200435	Symbol	mblen		1200260						
ANR	1200436	Symbol	len1		1200260						
ANR	1200437	Symbol	len2		1200260						
ANR	1200438	Symbol	buf1		1200260						
ANR	1200439	Symbol	case_fold_flag		1200260						
ANR	1200440	Symbol	buf2		1200260						
ANR	1200441	Symbol	ONIGENC_MBC_CASE_FOLD		1200260						
ANR	1200442	Symbol	end2		1200260						
ANR	1200443	Symbol	end1		1200260						
ANR	1200444	Symbol	* ps2		1200260						
ANR	1200445	Symbol	enc		1200260						
ANR	1200446	Symbol	s1		1200260						
ANR	1200447	Symbol	s2		1200260						
ANR	1200448	Function	make_capture_history_tree	1036:0:27668:28756							
ANR	1200449	FunctionDef	"make_capture_history_tree (OnigCaptureTreeNode * node , OnigStackType * * kp , OnigStackType * stk_top , UChar * str , regex_t * reg)"		1200448	0					
ANR	1200450	CompoundStatement		1039:0:27828:28756	1200448	0					
ANR	1200451	IdentifierDeclStatement	"int n , r ;"	1040:2:27832:27840	1200448	0	True				
ANR	1200452	IdentifierDecl	n		1200448	0					
ANR	1200453	IdentifierDeclType	int		1200448	0					
ANR	1200454	Identifier	n		1200448	1					
ANR	1200455	IdentifierDecl	r		1200448	1					
ANR	1200456	IdentifierDeclType	int		1200448	0					
ANR	1200457	Identifier	r		1200448	1					
ANR	1200458	IdentifierDeclStatement	OnigCaptureTreeNode * child ;	1041:2:27844:27870	1200448	1	True				
ANR	1200459	IdentifierDecl	* child		1200448	0					
ANR	1200460	IdentifierDeclType	OnigCaptureTreeNode *		1200448	0					
ANR	1200461	Identifier	child		1200448	1					
ANR	1200462	IdentifierDeclStatement	OnigStackType * k = * kp ;	1042:2:27874:27896	1200448	2	True				
ANR	1200463	IdentifierDecl	* k = * kp		1200448	0					
ANR	1200464	IdentifierDeclType	OnigStackType *		1200448	0					
ANR	1200465	Identifier	k		1200448	1					
ANR	1200466	AssignmentExpression	* k = * kp		1200448	2		=			
ANR	1200467	Identifier	k		1200448	0					
ANR	1200468	UnaryOperationExpression	* kp		1200448	1					
ANR	1200469	UnaryOperator	*		1200448	0					
ANR	1200470	Identifier	kp		1200448	1					
ANR	1200471	WhileStatement	while ( k < stk_top )		1200448	3					
ANR	1200472	Condition	k < stk_top	1044:9:27908:27918	1200448	0	True				
ANR	1200473	RelationalExpression	k < stk_top		1200448	0		<			
ANR	1200474	Identifier	k		1200448	0					
ANR	1200475	Identifier	stk_top		1200448	1					
ANR	1200476	CompoundStatement		6:22:92:92	1200448	1					
ANR	1200477	IfStatement	if ( k -> type == STK_MEM_START )		1200448	0					
ANR	1200478	Condition	k -> type == STK_MEM_START	1045:8:27931:27954	1200448	0	True				
ANR	1200479	EqualityExpression	k -> type == STK_MEM_START		1200448	0		==			
ANR	1200480	PtrMemberAccess	k -> type		1200448	0					
ANR	1200481	Identifier	k		1200448	0					
ANR	1200482	Identifier	type		1200448	1					
ANR	1200483	Identifier	STK_MEM_START		1200448	1					
ANR	1200484	CompoundStatement		7:34:128:128	1200448	1					
ANR	1200485	ExpressionStatement	n = k -> u . mem . num	1046:6:27965:27981	1200448	0	True				
ANR	1200486	AssignmentExpression	n = k -> u . mem . num		1200448	0		=			
ANR	1200487	Identifier	n		1200448	0					
ANR	1200488	MemberAccess	k -> u . mem . num		1200448	1					
ANR	1200489	MemberAccess	k -> u . mem		1200448	0					
ANR	1200490	PtrMemberAccess	k -> u		1200448	0					
ANR	1200491	Identifier	k		1200448	0					
ANR	1200492	Identifier	u		1200448	1					
ANR	1200493	Identifier	mem		1200448	1					
ANR	1200494	Identifier	num		1200448	1					
ANR	1200495	IfStatement	"if ( n <= ONIG_MAX_CAPTURE_HISTORY_GROUP && BIT_STATUS_AT ( reg -> capture_history , n ) != 0 )"		1200448	1					
ANR	1200496	Condition	"n <= ONIG_MAX_CAPTURE_HISTORY_GROUP && BIT_STATUS_AT ( reg -> capture_history , n ) != 0"	1047:10:27993:28084	1200448	0	True				
ANR	1200497	AndExpression	"n <= ONIG_MAX_CAPTURE_HISTORY_GROUP && BIT_STATUS_AT ( reg -> capture_history , n ) != 0"		1200448	0		&&			
ANR	1200498	RelationalExpression	n <= ONIG_MAX_CAPTURE_HISTORY_GROUP		1200448	0		<=			
ANR	1200499	Identifier	n		1200448	0					
ANR	1200500	Identifier	ONIG_MAX_CAPTURE_HISTORY_GROUP		1200448	1					
ANR	1200501	EqualityExpression	"BIT_STATUS_AT ( reg -> capture_history , n ) != 0"		1200448	1		!=			
ANR	1200502	CallExpression	"BIT_STATUS_AT ( reg -> capture_history , n )"		1200448	0					
ANR	1200503	Callee	BIT_STATUS_AT		1200448	0					
ANR	1200504	Identifier	BIT_STATUS_AT		1200448	0					
ANR	1200505	ArgumentList	reg -> capture_history		1200448	1					
ANR	1200506	Argument	reg -> capture_history		1200448	0					
ANR	1200507	PtrMemberAccess	reg -> capture_history		1200448	0					
ANR	1200508	Identifier	reg		1200448	0					
ANR	1200509	Identifier	capture_history		1200448	1					
ANR	1200510	Argument	n		1200448	1					
ANR	1200511	Identifier	n		1200448	0					
ANR	1200512	PrimaryExpression	0		1200448	1					
ANR	1200513	CompoundStatement		10:55:258:258	1200448	1					
ANR	1200514	ExpressionStatement	child = history_node_new ( )	1049:8:28097:28123	1200448	0	True				
ANR	1200515	AssignmentExpression	child = history_node_new ( )		1200448	0		=			
ANR	1200516	Identifier	child		1200448	0					
ANR	1200517	CallExpression	history_node_new ( )		1200448	1					
ANR	1200518	Callee	history_node_new		1200448	0					
ANR	1200519	Identifier	history_node_new		1200448	0					
ANR	1200520	ArgumentList			1200448	1					
ANR	1200521	ExpressionStatement	CHECK_NULL_RETURN_MEMERR ( child )	1050:8:28133:28164	1200448	1	True				
ANR	1200522	CallExpression	CHECK_NULL_RETURN_MEMERR ( child )		1200448	0					
ANR	1200523	Callee	CHECK_NULL_RETURN_MEMERR		1200448	0					
ANR	1200524	Identifier	CHECK_NULL_RETURN_MEMERR		1200448	0					
ANR	1200525	ArgumentList	child		1200448	1					
ANR	1200526	Argument	child		1200448	0					
ANR	1200527	Identifier	child		1200448	0					
ANR	1200528	ExpressionStatement	child -> group = n	1051:8:28174:28190	1200448	2	True				
ANR	1200529	AssignmentExpression	child -> group = n		1200448	0		=			
ANR	1200530	PtrMemberAccess	child -> group		1200448	0					
ANR	1200531	Identifier	child		1200448	0					
ANR	1200532	Identifier	group		1200448	1					
ANR	1200533	Identifier	n		1200448	1					
ANR	1200534	ExpressionStatement	child -> beg = ( int ) ( k -> u . mem . pstr - str )	1052:8:28200:28240	1200448	3	True				
ANR	1200535	AssignmentExpression	child -> beg = ( int ) ( k -> u . mem . pstr - str )		1200448	0		=			
ANR	1200536	PtrMemberAccess	child -> beg		1200448	0					
ANR	1200537	Identifier	child		1200448	0					
ANR	1200538	Identifier	beg		1200448	1					
ANR	1200539	CastExpression	( int ) ( k -> u . mem . pstr - str )		1200448	1					
ANR	1200540	CastTarget	int		1200448	0					
ANR	1200541	AdditiveExpression	k -> u . mem . pstr - str		1200448	1		-			
ANR	1200542	MemberAccess	k -> u . mem . pstr		1200448	0					
ANR	1200543	MemberAccess	k -> u . mem		1200448	0					
ANR	1200544	PtrMemberAccess	k -> u		1200448	0					
ANR	1200545	Identifier	k		1200448	0					
ANR	1200546	Identifier	u		1200448	1					
ANR	1200547	Identifier	mem		1200448	1					
ANR	1200548	Identifier	pstr		1200448	1					
ANR	1200549	Identifier	str		1200448	1					
ANR	1200550	ExpressionStatement	"r = history_tree_add_child ( node , child )"	1053:8:28250:28289	1200448	4	True				
ANR	1200551	AssignmentExpression	"r = history_tree_add_child ( node , child )"		1200448	0		=			
ANR	1200552	Identifier	r		1200448	0					
ANR	1200553	CallExpression	"history_tree_add_child ( node , child )"		1200448	1					
ANR	1200554	Callee	history_tree_add_child		1200448	0					
ANR	1200555	Identifier	history_tree_add_child		1200448	0					
ANR	1200556	ArgumentList	node		1200448	1					
ANR	1200557	Argument	node		1200448	0					
ANR	1200558	Identifier	node		1200448	0					
ANR	1200559	Argument	child		1200448	1					
ANR	1200560	Identifier	child		1200448	0					
ANR	1200561	IfStatement	if ( r != 0 )		1200448	5					
ANR	1200562	Condition	r != 0	1054:12:28303:28308	1200448	0	True				
ANR	1200563	EqualityExpression	r != 0		1200448	0		!=			
ANR	1200564	Identifier	r		1200448	0					
ANR	1200565	PrimaryExpression	0		1200448	1					
ANR	1200566	ReturnStatement	return r ;	1054:20:28311:28319	1200448	1	True				
ANR	1200567	Identifier	r		1200448	0					
ANR	1200568	ExpressionStatement	* kp = ( k + 1 )	1055:8:28329:28342	1200448	6	True				
ANR	1200569	AssignmentExpression	* kp = ( k + 1 )		1200448	0		=			
ANR	1200570	UnaryOperationExpression	* kp		1200448	0					
ANR	1200571	UnaryOperator	*		1200448	0					
ANR	1200572	Identifier	kp		1200448	1					
ANR	1200573	AdditiveExpression	k + 1		1200448	1		+			
ANR	1200574	Identifier	k		1200448	0					
ANR	1200575	PrimaryExpression	1		1200448	1					
ANR	1200576	ExpressionStatement	"r = make_capture_history_tree ( child , kp , stk_top , str , reg )"	1056:8:28352:28411	1200448	7	True				
ANR	1200577	AssignmentExpression	"r = make_capture_history_tree ( child , kp , stk_top , str , reg )"		1200448	0		=			
ANR	1200578	Identifier	r		1200448	0					
ANR	1200579	CallExpression	"make_capture_history_tree ( child , kp , stk_top , str , reg )"		1200448	1					
ANR	1200580	Callee	make_capture_history_tree		1200448	0					
ANR	1200581	Identifier	make_capture_history_tree		1200448	0					
ANR	1200582	ArgumentList	child		1200448	1					
ANR	1200583	Argument	child		1200448	0					
ANR	1200584	Identifier	child		1200448	0					
ANR	1200585	Argument	kp		1200448	1					
ANR	1200586	Identifier	kp		1200448	0					
ANR	1200587	Argument	stk_top		1200448	2					
ANR	1200588	Identifier	stk_top		1200448	0					
ANR	1200589	Argument	str		1200448	3					
ANR	1200590	Identifier	str		1200448	0					
ANR	1200591	Argument	reg		1200448	4					
ANR	1200592	Identifier	reg		1200448	0					
ANR	1200593	IfStatement	if ( r != 0 )		1200448	8					
ANR	1200594	Condition	r != 0	1057:12:28425:28430	1200448	0	True				
ANR	1200595	EqualityExpression	r != 0		1200448	0		!=			
ANR	1200596	Identifier	r		1200448	0					
ANR	1200597	PrimaryExpression	0		1200448	1					
ANR	1200598	ReturnStatement	return r ;	1057:20:28433:28441	1200448	1	True				
ANR	1200599	Identifier	r		1200448	0					
ANR	1200600	ExpressionStatement	k = * kp	1059:8:28452:28459	1200448	9	True				
ANR	1200601	AssignmentExpression	k = * kp		1200448	0		=			
ANR	1200602	Identifier	k		1200448	0					
ANR	1200603	UnaryOperationExpression	* kp		1200448	1					
ANR	1200604	UnaryOperator	*		1200448	0					
ANR	1200605	Identifier	kp		1200448	1					
ANR	1200606	ExpressionStatement	child -> end = ( int ) ( k -> u . mem . pstr - str )	1060:8:28469:28509	1200448	10	True				
ANR	1200607	AssignmentExpression	child -> end = ( int ) ( k -> u . mem . pstr - str )		1200448	0		=			
ANR	1200608	PtrMemberAccess	child -> end		1200448	0					
ANR	1200609	Identifier	child		1200448	0					
ANR	1200610	Identifier	end		1200448	1					
ANR	1200611	CastExpression	( int ) ( k -> u . mem . pstr - str )		1200448	1					
ANR	1200612	CastTarget	int		1200448	0					
ANR	1200613	AdditiveExpression	k -> u . mem . pstr - str		1200448	1		-			
ANR	1200614	MemberAccess	k -> u . mem . pstr		1200448	0					
ANR	1200615	MemberAccess	k -> u . mem		1200448	0					
ANR	1200616	PtrMemberAccess	k -> u		1200448	0					
ANR	1200617	Identifier	k		1200448	0					
ANR	1200618	Identifier	u		1200448	1					
ANR	1200619	Identifier	mem		1200448	1					
ANR	1200620	Identifier	pstr		1200448	1					
ANR	1200621	Identifier	str		1200448	1					
ANR	1200622	ElseStatement	else		1200448	0					
ANR	1200623	IfStatement	if ( k -> type == STK_MEM_END )		1200448	0					
ANR	1200624	Condition	k -> type == STK_MEM_END	1063:13:28538:28559	1200448	0	True				
ANR	1200625	EqualityExpression	k -> type == STK_MEM_END		1200448	0		==			
ANR	1200626	PtrMemberAccess	k -> type		1200448	0					
ANR	1200627	Identifier	k		1200448	0					
ANR	1200628	Identifier	type		1200448	1					
ANR	1200629	Identifier	STK_MEM_END		1200448	1					
ANR	1200630	CompoundStatement		25:37:733:733	1200448	1					
ANR	1200631	IfStatement	if ( k -> u . mem . num == node -> group )		1200448	0					
ANR	1200632	Condition	k -> u . mem . num == node -> group	1064:10:28574:28600	1200448	0	True				
ANR	1200633	EqualityExpression	k -> u . mem . num == node -> group		1200448	0		==			
ANR	1200634	MemberAccess	k -> u . mem . num		1200448	0					
ANR	1200635	MemberAccess	k -> u . mem		1200448	0					
ANR	1200636	PtrMemberAccess	k -> u		1200448	0					
ANR	1200637	Identifier	k		1200448	0					
ANR	1200638	Identifier	u		1200448	1					
ANR	1200639	Identifier	mem		1200448	1					
ANR	1200640	Identifier	num		1200448	1					
ANR	1200641	PtrMemberAccess	node -> group		1200448	1					
ANR	1200642	Identifier	node		1200448	0					
ANR	1200643	Identifier	group		1200448	1					
ANR	1200644	CompoundStatement		26:39:774:774	1200448	1					
ANR	1200645	ExpressionStatement	node -> end = ( int ) ( k -> u . mem . pstr - str )	1065:8:28613:28652	1200448	0	True				
ANR	1200646	AssignmentExpression	node -> end = ( int ) ( k -> u . mem . pstr - str )		1200448	0		=			
ANR	1200647	PtrMemberAccess	node -> end		1200448	0					
ANR	1200648	Identifier	node		1200448	0					
ANR	1200649	Identifier	end		1200448	1					
ANR	1200650	CastExpression	( int ) ( k -> u . mem . pstr - str )		1200448	1					
ANR	1200651	CastTarget	int		1200448	0					
ANR	1200652	AdditiveExpression	k -> u . mem . pstr - str		1200448	1		-			
ANR	1200653	MemberAccess	k -> u . mem . pstr		1200448	0					
ANR	1200654	MemberAccess	k -> u . mem		1200448	0					
ANR	1200655	PtrMemberAccess	k -> u		1200448	0					
ANR	1200656	Identifier	k		1200448	0					
ANR	1200657	Identifier	u		1200448	1					
ANR	1200658	Identifier	mem		1200448	1					
ANR	1200659	Identifier	pstr		1200448	1					
ANR	1200660	Identifier	str		1200448	1					
ANR	1200661	ExpressionStatement	* kp = k	1066:8:28662:28669	1200448	1	True				
ANR	1200662	AssignmentExpression	* kp = k		1200448	0		=			
ANR	1200663	UnaryOperationExpression	* kp		1200448	0					
ANR	1200664	UnaryOperator	*		1200448	0					
ANR	1200665	Identifier	kp		1200448	1					
ANR	1200666	Identifier	k		1200448	1					
ANR	1200667	ReturnStatement	return 0 ;	1067:8:28679:28687	1200448	2	True				
ANR	1200668	PrimaryExpression	0		1200448	0					
ANR	1200669	ExpressionStatement	k ++	1070:4:28707:28710	1200448	1	True				
ANR	1200670	PostIncDecOperationExpression	k ++		1200448	0					
ANR	1200671	Identifier	k		1200448	0					
ANR	1200672	IncDec	++		1200448	1					
ANR	1200673	ReturnStatement	return 1 ;	1073:2:28719:28727	1200448	4	True				
ANR	1200674	PrimaryExpression	1		1200448	0					
ANR	1200675	ReturnType	static int		1200448	1					
ANR	1200676	Identifier	make_capture_history_tree		1200448	2					
ANR	1200677	ParameterList	"OnigCaptureTreeNode * node , OnigStackType * * kp , OnigStackType * stk_top , UChar * str , regex_t * reg"		1200448	3					
ANR	1200678	Parameter	OnigCaptureTreeNode * node	1037:26:27705:27729	1200448	0	True				
ANR	1200679	ParameterType	OnigCaptureTreeNode *		1200448	0					
ANR	1200680	Identifier	node		1200448	1					
ANR	1200681	Parameter	OnigStackType * * kp	1037:53:27732:27749	1200448	1	True				
ANR	1200682	ParameterType	OnigStackType * *		1200448	0					
ANR	1200683	Identifier	kp		1200448	1					
ANR	1200684	Parameter	OnigStackType * stk_top	1038:26:27778:27799	1200448	2	True				
ANR	1200685	ParameterType	OnigStackType *		1200448	0					
ANR	1200686	Identifier	stk_top		1200448	1					
ANR	1200687	Parameter	UChar * str	1038:50:27802:27811	1200448	3	True				
ANR	1200688	ParameterType	UChar *		1200448	0					
ANR	1200689	Identifier	str		1200448	1					
ANR	1200690	Parameter	regex_t * reg	1038:62:27814:27825	1200448	4	True				
ANR	1200691	ParameterType	regex_t *		1200448	0					
ANR	1200692	Identifier	reg		1200448	1					
ANR	1200693	CFGEntryNode	ENTRY		1200448		True				
ANR	1200694	CFGExitNode	EXIT		1200448		True				
ANR	1200695	Symbol	child -> beg		1200448						
ANR	1200696	Symbol	k -> u . mem . pstr		1200448						
ANR	1200697	Symbol	ONIG_MAX_CAPTURE_HISTORY_GROUP		1200448						
ANR	1200698	Symbol	* kp		1200448						
ANR	1200699	Symbol	history_tree_add_child		1200448						
ANR	1200700	Symbol	reg		1200448						
ANR	1200701	Symbol	k -> u . mem . num		1200448						
ANR	1200702	Symbol	make_capture_history_tree		1200448						
ANR	1200703	Symbol	* node		1200448						
ANR	1200704	Symbol	history_node_new		1200448						
ANR	1200705	Symbol	STK_MEM_START		1200448						
ANR	1200706	Symbol	BIT_STATUS_AT		1200448						
ANR	1200707	Symbol	* child		1200448						
ANR	1200708	Symbol	kp		1200448						
ANR	1200709	Symbol	k -> type		1200448						
ANR	1200710	Symbol	reg -> capture_history		1200448						
ANR	1200711	Symbol	child -> end		1200448						
ANR	1200712	Symbol	node -> group		1200448						
ANR	1200713	Symbol	k		1200448						
ANR	1200714	Symbol	n		1200448						
ANR	1200715	Symbol	stk_top		1200448						
ANR	1200716	Symbol	str		1200448						
ANR	1200717	Symbol	node -> end		1200448						
ANR	1200718	Symbol	node		1200448						
ANR	1200719	Symbol	r		1200448						
ANR	1200720	Symbol	* k		1200448						
ANR	1200721	Symbol	k -> u		1200448						
ANR	1200722	Symbol	k -> u . mem		1200448						
ANR	1200723	Symbol	child -> group		1200448						
ANR	1200724	Symbol	* reg		1200448						
ANR	1200725	Symbol	STK_MEM_END		1200448						
ANR	1200726	Symbol	child		1200448						
ANR	1200727	Function	mem_is_in_memp	1078:0:28796:28990							
ANR	1200728	FunctionDef	"mem_is_in_memp (int mem , int num , UChar * memp)"		1200727	0					
ANR	1200729	CompoundStatement		1079:0:28853:28990	1200727	0					
ANR	1200730	IdentifierDeclStatement	int i ;	1080:2:28857:28862	1200727	0	True				
ANR	1200731	IdentifierDecl	i		1200727	0					
ANR	1200732	IdentifierDeclType	int		1200727	0					
ANR	1200733	Identifier	i		1200727	1					
ANR	1200734	IdentifierDeclStatement	MemNumType m ;	1081:2:28866:28878	1200727	1	True				
ANR	1200735	IdentifierDecl	m		1200727	0					
ANR	1200736	IdentifierDeclType	MemNumType		1200727	0					
ANR	1200737	Identifier	m		1200727	1					
ANR	1200738	ForStatement	for ( i = 0 ; i < num ; i ++ )		1200727	2					
ANR	1200739	ForInit	i = 0 ;	1083:7:28888:28893	1200727	0	True				
ANR	1200740	AssignmentExpression	i = 0		1200727	0		=			
ANR	1200741	Identifier	i		1200727	0					
ANR	1200742	PrimaryExpression	0		1200727	1					
ANR	1200743	Condition	i < num	1083:14:28895:28901	1200727	1	True				
ANR	1200744	RelationalExpression	i < num		1200727	0		<			
ANR	1200745	Identifier	i		1200727	0					
ANR	1200746	Identifier	num		1200727	1					
ANR	1200747	PostIncDecOperationExpression	i ++	1083:23:28904:28906	1200727	2	True				
ANR	1200748	Identifier	i		1200727	0					
ANR	1200749	IncDec	++		1200727	1					
ANR	1200750	CompoundStatement		5:28:55:55	1200727	3					
ANR	1200751	ExpressionStatement	"GET_MEMNUM_INC ( m , memp )"	1084:4:28915:28938	1200727	0	True				
ANR	1200752	CallExpression	"GET_MEMNUM_INC ( m , memp )"		1200727	0					
ANR	1200753	Callee	GET_MEMNUM_INC		1200727	0					
ANR	1200754	Identifier	GET_MEMNUM_INC		1200727	0					
ANR	1200755	ArgumentList	m		1200727	1					
ANR	1200756	Argument	m		1200727	0					
ANR	1200757	Identifier	m		1200727	0					
ANR	1200758	Argument	memp		1200727	1					
ANR	1200759	Identifier	memp		1200727	0					
ANR	1200760	IfStatement	if ( mem == ( int ) m )		1200727	1					
ANR	1200761	Condition	mem == ( int ) m	1085:8:28948:28961	1200727	0	True				
ANR	1200762	EqualityExpression	mem == ( int ) m		1200727	0		==			
ANR	1200763	Identifier	mem		1200727	0					
ANR	1200764	CastExpression	( int ) m		1200727	1					
ANR	1200765	CastTarget	int		1200727	0					
ANR	1200766	Identifier	m		1200727	1					
ANR	1200767	ReturnStatement	return 1 ;	1085:24:28964:28972	1200727	1	True				
ANR	1200768	PrimaryExpression	1		1200727	0					
ANR	1200769	ReturnStatement	return 0 ;	1087:2:28980:28988	1200727	3	True				
ANR	1200770	PrimaryExpression	0		1200727	0					
ANR	1200771	ReturnType	static int		1200727	1					
ANR	1200772	Identifier	mem_is_in_memp		1200727	2					
ANR	1200773	ParameterList	"int mem , int num , UChar * memp"		1200727	3					
ANR	1200774	Parameter	int mem	1078:26:28822:28828	1200727	0	True				
ANR	1200775	ParameterType	int		1200727	0					
ANR	1200776	Identifier	mem		1200727	1					
ANR	1200777	Parameter	int num	1078:35:28831:28837	1200727	1	True				
ANR	1200778	ParameterType	int		1200727	0					
ANR	1200779	Identifier	num		1200727	1					
ANR	1200780	Parameter	UChar * memp	1078:44:28840:28850	1200727	2	True				
ANR	1200781	ParameterType	UChar *		1200727	0					
ANR	1200782	Identifier	memp		1200727	1					
ANR	1200783	CFGEntryNode	ENTRY		1200727		True				
ANR	1200784	CFGExitNode	EXIT		1200727		True				
ANR	1200785	Symbol	mem		1200727						
ANR	1200786	Symbol	num		1200727						
ANR	1200787	Symbol	memp		1200727						
ANR	1200788	Symbol	i		1200727						
ANR	1200789	Symbol	m		1200727						
ANR	1200790	Function	backref_match_at_nested_level	1090:0:28993:30227							
ANR	1200791	FunctionDef	"backref_match_at_nested_level (regex_t * reg , OnigStackType * top , OnigStackType * stk_base , int ignore_case , int case_fold_flag , int nest , int mem_num , UChar * memp , UChar * * s , const UChar * send)"		1200790	0					
ANR	1200792	CompoundStatement		1094:0:29205:30227	1200790	0					
ANR	1200793	IdentifierDeclStatement	"UChar * ss , * p , * pstart , * pend = NULL_UCHARP ;"	1095:2:29209:29252	1200790	0	True				
ANR	1200794	IdentifierDecl	* ss		1200790	0					
ANR	1200795	IdentifierDeclType	UChar *		1200790	0					
ANR	1200796	Identifier	ss		1200790	1					
ANR	1200797	IdentifierDecl	* p		1200790	1					
ANR	1200798	IdentifierDeclType	UChar *		1200790	0					
ANR	1200799	Identifier	p		1200790	1					
ANR	1200800	IdentifierDecl	* pstart		1200790	2					
ANR	1200801	IdentifierDeclType	UChar *		1200790	0					
ANR	1200802	Identifier	pstart		1200790	1					
ANR	1200803	IdentifierDecl	* pend = NULL_UCHARP		1200790	3					
ANR	1200804	IdentifierDeclType	UChar *		1200790	0					
ANR	1200805	Identifier	pend		1200790	1					
ANR	1200806	AssignmentExpression	* pend = NULL_UCHARP		1200790	2		=			
ANR	1200807	Identifier	NULL_UCHARP		1200790	0					
ANR	1200808	Identifier	NULL_UCHARP		1200790	1					
ANR	1200809	IdentifierDeclStatement	int level ;	1096:2:29256:29265	1200790	1	True				
ANR	1200810	IdentifierDecl	level		1200790	0					
ANR	1200811	IdentifierDeclType	int		1200790	0					
ANR	1200812	Identifier	level		1200790	1					
ANR	1200813	IdentifierDeclStatement	OnigStackType * k ;	1097:2:29269:29285	1200790	2	True				
ANR	1200814	IdentifierDecl	* k		1200790	0					
ANR	1200815	IdentifierDeclType	OnigStackType *		1200790	0					
ANR	1200816	Identifier	k		1200790	1					
ANR	1200817	ExpressionStatement	level = 0	1099:2:29290:29299	1200790	3	True				
ANR	1200818	AssignmentExpression	level = 0		1200790	0		=			
ANR	1200819	Identifier	level		1200790	0					
ANR	1200820	PrimaryExpression	0		1200790	1					
ANR	1200821	ExpressionStatement	k = top	1100:2:29303:29310	1200790	4	True				
ANR	1200822	AssignmentExpression	k = top		1200790	0		=			
ANR	1200823	Identifier	k		1200790	0					
ANR	1200824	Identifier	top		1200790	1					
ANR	1200825	ExpressionStatement	k --	1101:2:29314:29317	1200790	5	True				
ANR	1200826	PostIncDecOperationExpression	k --		1200790	0					
ANR	1200827	Identifier	k		1200790	0					
ANR	1200828	IncDec	--		1200790	1					
ANR	1200829	WhileStatement	while ( k >= stk_base )		1200790	6					
ANR	1200830	Condition	k >= stk_base	1102:9:29328:29340	1200790	0	True				
ANR	1200831	RelationalExpression	k >= stk_base		1200790	0		>=			
ANR	1200832	Identifier	k		1200790	0					
ANR	1200833	Identifier	stk_base		1200790	1					
ANR	1200834	CompoundStatement		9:24:137:137	1200790	1					
ANR	1200835	IfStatement	if ( k -> type == STK_CALL_FRAME )		1200790	0					
ANR	1200836	Condition	k -> type == STK_CALL_FRAME	1103:8:29353:29377	1200790	0	True				
ANR	1200837	EqualityExpression	k -> type == STK_CALL_FRAME		1200790	0		==			
ANR	1200838	PtrMemberAccess	k -> type		1200790	0					
ANR	1200839	Identifier	k		1200790	0					
ANR	1200840	Identifier	type		1200790	1					
ANR	1200841	Identifier	STK_CALL_FRAME		1200790	1					
ANR	1200842	CompoundStatement		10:35:174:174	1200790	1					
ANR	1200843	ExpressionStatement	level --	1104:6:29388:29395	1200790	0	True				
ANR	1200844	PostIncDecOperationExpression	level --		1200790	0					
ANR	1200845	Identifier	level		1200790	0					
ANR	1200846	IncDec	--		1200790	1					
ANR	1200847	ElseStatement	else		1200790	0					
ANR	1200848	IfStatement	if ( k -> type == STK_RETURN )		1200790	0					
ANR	1200849	Condition	k -> type == STK_RETURN	1106:13:29416:29436	1200790	0	True				
ANR	1200850	EqualityExpression	k -> type == STK_RETURN		1200790	0		==			
ANR	1200851	PtrMemberAccess	k -> type		1200790	0					
ANR	1200852	Identifier	k		1200790	0					
ANR	1200853	Identifier	type		1200790	1					
ANR	1200854	Identifier	STK_RETURN		1200790	1					
ANR	1200855	CompoundStatement		13:36:233:233	1200790	1					
ANR	1200856	ExpressionStatement	level ++	1107:6:29447:29454	1200790	0	True				
ANR	1200857	PostIncDecOperationExpression	level ++		1200790	0					
ANR	1200858	Identifier	level		1200790	0					
ANR	1200859	IncDec	++		1200790	1					
ANR	1200860	ElseStatement	else		1200790	0					
ANR	1200861	IfStatement	if ( level == nest )		1200790	0					
ANR	1200862	Condition	level == nest	1109:13:29475:29487	1200790	0	True				
ANR	1200863	EqualityExpression	level == nest		1200790	0		==			
ANR	1200864	Identifier	level		1200790	0					
ANR	1200865	Identifier	nest		1200790	1					
ANR	1200866	CompoundStatement		16:28:284:284	1200790	1					
ANR	1200867	IfStatement	if ( k -> type == STK_MEM_START )		1200790	0					
ANR	1200868	Condition	k -> type == STK_MEM_START	1110:10:29502:29525	1200790	0	True				
ANR	1200869	EqualityExpression	k -> type == STK_MEM_START		1200790	0		==			
ANR	1200870	PtrMemberAccess	k -> type		1200790	0					
ANR	1200871	Identifier	k		1200790	0					
ANR	1200872	Identifier	type		1200790	1					
ANR	1200873	Identifier	STK_MEM_START		1200790	1					
ANR	1200874	CompoundStatement		17:36:322:322	1200790	1					
ANR	1200875	IfStatement	"if ( mem_is_in_memp ( k -> u . mem . num , mem_num , memp ) )"		1200790	0					
ANR	1200876	Condition	"mem_is_in_memp ( k -> u . mem . num , mem_num , memp )"	1111:5:29535:29577	1200790	0	True				
ANR	1200877	CallExpression	"mem_is_in_memp ( k -> u . mem . num , mem_num , memp )"		1200790	0					
ANR	1200878	Callee	mem_is_in_memp		1200790	0					
ANR	1200879	Identifier	mem_is_in_memp		1200790	0					
ANR	1200880	ArgumentList	k -> u . mem . num		1200790	1					
ANR	1200881	Argument	k -> u . mem . num		1200790	0					
ANR	1200882	MemberAccess	k -> u . mem . num		1200790	0					
ANR	1200883	MemberAccess	k -> u . mem		1200790	0					
ANR	1200884	PtrMemberAccess	k -> u		1200790	0					
ANR	1200885	Identifier	k		1200790	0					
ANR	1200886	Identifier	u		1200790	1					
ANR	1200887	Identifier	mem		1200790	1					
ANR	1200888	Identifier	num		1200790	1					
ANR	1200889	Argument	mem_num		1200790	1					
ANR	1200890	Identifier	mem_num		1200790	0					
ANR	1200891	Argument	memp		1200790	2					
ANR	1200892	Identifier	memp		1200790	0					
ANR	1200893	CompoundStatement		18:50:374:374	1200790	1					
ANR	1200894	ExpressionStatement	pstart = k -> u . mem . pstr	1112:3:29585:29607	1200790	0	True				
ANR	1200895	AssignmentExpression	pstart = k -> u . mem . pstr		1200790	0		=			
ANR	1200896	Identifier	pstart		1200790	0					
ANR	1200897	MemberAccess	k -> u . mem . pstr		1200790	1					
ANR	1200898	MemberAccess	k -> u . mem		1200790	0					
ANR	1200899	PtrMemberAccess	k -> u		1200790	0					
ANR	1200900	Identifier	k		1200790	0					
ANR	1200901	Identifier	u		1200790	1					
ANR	1200902	Identifier	mem		1200790	1					
ANR	1200903	Identifier	pstr		1200790	1					
ANR	1200904	IfStatement	if ( pend != NULL_UCHARP )		1200790	1					
ANR	1200905	Condition	pend != NULL_UCHARP	1113:7:29616:29634	1200790	0	True				
ANR	1200906	EqualityExpression	pend != NULL_UCHARP		1200790	0		!=			
ANR	1200907	Identifier	pend		1200790	0					
ANR	1200908	Identifier	NULL_UCHARP		1200790	1					
ANR	1200909	CompoundStatement		20:28:431:431	1200790	1					
ANR	1200910	IfStatement	if ( pend - pstart > send - * s )		1200790	0					
ANR	1200911	Condition	pend - pstart > send - * s	1114:9:29648:29672	1200790	0	True				
ANR	1200912	RelationalExpression	pend - pstart > send - * s		1200790	0		>			
ANR	1200913	AdditiveExpression	pend - pstart		1200790	0		-			
ANR	1200914	Identifier	pend		1200790	0					
ANR	1200915	Identifier	pstart		1200790	1					
ANR	1200916	AdditiveExpression	send - * s		1200790	1		-			
ANR	1200917	Identifier	send		1200790	0					
ANR	1200918	UnaryOperationExpression	* s		1200790	1					
ANR	1200919	UnaryOperator	*		1200790	0					
ANR	1200920	Identifier	s		1200790	1					
ANR	1200921	ReturnStatement	return 0 ;	1114:36:29675:29683	1200790	1	True				
ANR	1200922	PrimaryExpression	0		1200790	0					
ANR	1200923	ExpressionStatement	p = pstart	1115:5:29714:29725	1200790	1	True				
ANR	1200924	AssignmentExpression	p = pstart		1200790	0		=			
ANR	1200925	Identifier	p		1200790	0					
ANR	1200926	Identifier	pstart		1200790	1					
ANR	1200927	ExpressionStatement	ss = * s	1116:5:29732:29739	1200790	2	True				
ANR	1200928	AssignmentExpression	ss = * s		1200790	0		=			
ANR	1200929	Identifier	ss		1200790	0					
ANR	1200930	UnaryOperationExpression	* s		1200790	1					
ANR	1200931	UnaryOperator	*		1200790	0					
ANR	1200932	Identifier	s		1200790	1					
ANR	1200933	IfStatement	if ( ignore_case != 0 )		1200790	3					
ANR	1200934	Condition	ignore_case != 0	1118:9:29751:29766	1200790	0	True				
ANR	1200935	EqualityExpression	ignore_case != 0		1200790	0		!=			
ANR	1200936	Identifier	ignore_case		1200790	0					
ANR	1200937	PrimaryExpression	0		1200790	1					
ANR	1200938	CompoundStatement		25:27:563:563	1200790	1					
ANR	1200939	IfStatement	"if ( string_cmp_ic ( reg -> enc , case_fold_flag , pstart , & ss , ( int ) ( pend - pstart ) ) == 0 )"		1200790	0					
ANR	1200940	Condition	"string_cmp_ic ( reg -> enc , case_fold_flag , pstart , & ss , ( int ) ( pend - pstart ) ) == 0"	1119:11:29782:29865	1200790	0	True				
ANR	1200941	EqualityExpression	"string_cmp_ic ( reg -> enc , case_fold_flag , pstart , & ss , ( int ) ( pend - pstart ) ) == 0"		1200790	0		==			
ANR	1200942	CallExpression	"string_cmp_ic ( reg -> enc , case_fold_flag , pstart , & ss , ( int ) ( pend - pstart ) )"		1200790	0					
ANR	1200943	Callee	string_cmp_ic		1200790	0					
ANR	1200944	Identifier	string_cmp_ic		1200790	0					
ANR	1200945	ArgumentList	reg -> enc		1200790	1					
ANR	1200946	Argument	reg -> enc		1200790	0					
ANR	1200947	PtrMemberAccess	reg -> enc		1200790	0					
ANR	1200948	Identifier	reg		1200790	0					
ANR	1200949	Identifier	enc		1200790	1					
ANR	1200950	Argument	case_fold_flag		1200790	1					
ANR	1200951	Identifier	case_fold_flag		1200790	0					
ANR	1200952	Argument	pstart		1200790	2					
ANR	1200953	Identifier	pstart		1200790	0					
ANR	1200954	Argument	& ss		1200790	3					
ANR	1200955	UnaryOperationExpression	& ss		1200790	0					
ANR	1200956	UnaryOperator	&		1200790	0					
ANR	1200957	Identifier	ss		1200790	1					
ANR	1200958	Argument	( int ) ( pend - pstart )		1200790	4					
ANR	1200959	CastExpression	( int ) ( pend - pstart )		1200790	0					
ANR	1200960	CastTarget	int		1200790	0					
ANR	1200961	AdditiveExpression	pend - pstart		1200790	1		-			
ANR	1200962	Identifier	pend		1200790	0					
ANR	1200963	Identifier	pstart		1200790	1					
ANR	1200964	PrimaryExpression	0		1200790	1					
ANR	1200965	ReturnStatement	return 0 ;	1121:2:29870:29878	1200790	1	True				
ANR	1200966	PrimaryExpression	0		1200790	0					
ANR	1200967	ElseStatement	else		1200790	0					
ANR	1200968	CompoundStatement		30:10:715:715	1200790	0					
ANR	1200969	WhileStatement	while ( p < pend )		1200790	0					
ANR	1200970	Condition	p < pend	1124:14:29937:29944	1200790	0	True				
ANR	1200971	RelationalExpression	p < pend		1200790	0		<			
ANR	1200972	Identifier	p		1200790	0					
ANR	1200973	Identifier	pend		1200790	1					
ANR	1200974	CompoundStatement		31:24:741:741	1200790	1					
ANR	1200975	IfStatement	if ( * p ++ != * ss ++ )		1200790	0					
ANR	1200976	Condition	* p ++ != * ss ++	1125:6:29955:29967	1200790	0	True				
ANR	1200977	EqualityExpression	* p ++ != * ss ++		1200790	0		!=			
ANR	1200978	UnaryOperationExpression	* p ++		1200790	0					
ANR	1200979	UnaryOperator	*		1200790	0					
ANR	1200980	PostIncDecOperationExpression	p ++		1200790	1					
ANR	1200981	Identifier	p		1200790	0					
ANR	1200982	IncDec	++		1200790	1					
ANR	1200983	UnaryOperationExpression	* ss ++		1200790	1					
ANR	1200984	UnaryOperator	*		1200790	0					
ANR	1200985	PostIncDecOperationExpression	ss ++		1200790	1					
ANR	1200986	Identifier	ss		1200790	0					
ANR	1200987	IncDec	++		1200790	1					
ANR	1200988	ReturnStatement	return 0 ;	1125:21:29970:29978	1200790	1	True				
ANR	1200989	PrimaryExpression	0		1200790	0					
ANR	1200990	ExpressionStatement	* s = ss	1129:5:30026:30033	1200790	4	True				
ANR	1200991	AssignmentExpression	* s = ss		1200790	0		=			
ANR	1200992	UnaryOperationExpression	* s		1200790	0					
ANR	1200993	UnaryOperator	*		1200790	0					
ANR	1200994	Identifier	s		1200790	1					
ANR	1200995	Identifier	ss		1200790	1					
ANR	1200996	ReturnStatement	return 1 ;	1130:5:30040:30048	1200790	5	True				
ANR	1200997	PrimaryExpression	1		1200790	0					
ANR	1200998	ElseStatement	else		1200790	0					
ANR	1200999	IfStatement	if ( k -> type == STK_MEM_END )		1200790	0					
ANR	1201000	Condition	k -> type == STK_MEM_END	1134:15:30081:30102	1200790	0	True				
ANR	1201001	EqualityExpression	k -> type == STK_MEM_END		1200790	0		==			
ANR	1201002	PtrMemberAccess	k -> type		1200790	0					
ANR	1201003	Identifier	k		1200790	0					
ANR	1201004	Identifier	type		1200790	1					
ANR	1201005	Identifier	STK_MEM_END		1200790	1					
ANR	1201006	CompoundStatement		41:39:899:899	1200790	1					
ANR	1201007	IfStatement	"if ( mem_is_in_memp ( k -> u . mem . num , mem_num , memp ) )"		1200790	0					
ANR	1201008	Condition	"mem_is_in_memp ( k -> u . mem . num , mem_num , memp )"	1135:5:30112:30154	1200790	0	True				
ANR	1201009	CallExpression	"mem_is_in_memp ( k -> u . mem . num , mem_num , memp )"		1200790	0					
ANR	1201010	Callee	mem_is_in_memp		1200790	0					
ANR	1201011	Identifier	mem_is_in_memp		1200790	0					
ANR	1201012	ArgumentList	k -> u . mem . num		1200790	1					
ANR	1201013	Argument	k -> u . mem . num		1200790	0					
ANR	1201014	MemberAccess	k -> u . mem . num		1200790	0					
ANR	1201015	MemberAccess	k -> u . mem		1200790	0					
ANR	1201016	PtrMemberAccess	k -> u		1200790	0					
ANR	1201017	Identifier	k		1200790	0					
ANR	1201018	Identifier	u		1200790	1					
ANR	1201019	Identifier	mem		1200790	1					
ANR	1201020	Identifier	num		1200790	1					
ANR	1201021	Argument	mem_num		1200790	1					
ANR	1201022	Identifier	mem_num		1200790	0					
ANR	1201023	Argument	memp		1200790	2					
ANR	1201024	Identifier	memp		1200790	0					
ANR	1201025	CompoundStatement		42:50:951:951	1200790	1					
ANR	1201026	ExpressionStatement	pend = k -> u . mem . pstr	1136:3:30162:30182	1200790	0	True				
ANR	1201027	AssignmentExpression	pend = k -> u . mem . pstr		1200790	0		=			
ANR	1201028	Identifier	pend		1200790	0					
ANR	1201029	MemberAccess	k -> u . mem . pstr		1200790	1					
ANR	1201030	MemberAccess	k -> u . mem		1200790	0					
ANR	1201031	PtrMemberAccess	k -> u		1200790	0					
ANR	1201032	Identifier	k		1200790	0					
ANR	1201033	Identifier	u		1200790	1					
ANR	1201034	Identifier	mem		1200790	1					
ANR	1201035	Identifier	pstr		1200790	1					
ANR	1201036	ExpressionStatement	k --	1140:4:30205:30208	1200790	1	True				
ANR	1201037	PostIncDecOperationExpression	k --		1200790	0					
ANR	1201038	Identifier	k		1200790	0					
ANR	1201039	IncDec	--		1200790	1					
ANR	1201040	ReturnStatement	return 0 ;	1143:2:30217:30225	1200790	7	True				
ANR	1201041	PrimaryExpression	0		1200790	0					
ANR	1201042	ReturnType	static int		1200790	1					
ANR	1201043	Identifier	backref_match_at_nested_level		1200790	2					
ANR	1201044	ParameterList	"regex_t * reg , OnigStackType * top , OnigStackType * stk_base , int ignore_case , int case_fold_flag , int nest , int mem_num , UChar * memp , UChar * * s , const UChar * send"		1200790	3					
ANR	1201045	Parameter	regex_t * reg	1090:41:29034:29045	1200790	0	True				
ANR	1201046	ParameterType	regex_t *		1200790	0					
ANR	1201047	Identifier	reg		1200790	1					
ANR	1201048	Parameter	OnigStackType * top	1091:4:29051:29068	1200790	1	True				
ANR	1201049	ParameterType	OnigStackType *		1200790	0					
ANR	1201050	Identifier	top		1200790	1					
ANR	1201051	Parameter	OnigStackType * stk_base	1091:24:29071:29093	1200790	2	True				
ANR	1201052	ParameterType	OnigStackType *		1200790	0					
ANR	1201053	Identifier	stk_base		1200790	1					
ANR	1201054	Parameter	int ignore_case	1092:4:29099:29113	1200790	3	True				
ANR	1201055	ParameterType	int		1200790	0					
ANR	1201056	Identifier	ignore_case		1200790	1					
ANR	1201057	Parameter	int case_fold_flag	1092:21:29116:29133	1200790	4	True				
ANR	1201058	ParameterType	int		1200790	0					
ANR	1201059	Identifier	case_fold_flag		1200790	1					
ANR	1201060	Parameter	int nest	1093:4:29139:29146	1200790	5	True				
ANR	1201061	ParameterType	int		1200790	0					
ANR	1201062	Identifier	nest		1200790	1					
ANR	1201063	Parameter	int mem_num	1093:14:29149:29159	1200790	6	True				
ANR	1201064	ParameterType	int		1200790	0					
ANR	1201065	Identifier	mem_num		1200790	1					
ANR	1201066	Parameter	UChar * memp	1093:27:29162:29172	1200790	7	True				
ANR	1201067	ParameterType	UChar *		1200790	0					
ANR	1201068	Identifier	memp		1200790	1					
ANR	1201069	Parameter	UChar * * s	1093:40:29175:29183	1200790	8	True				
ANR	1201070	ParameterType	UChar * *		1200790	0					
ANR	1201071	Identifier	s		1200790	1					
ANR	1201072	Parameter	const UChar * send	1093:51:29186:29202	1200790	9	True				
ANR	1201073	ParameterType	const UChar *		1200790	0					
ANR	1201074	Identifier	send		1200790	1					
ANR	1201075	CFGEntryNode	ENTRY		1200790		True				
ANR	1201076	CFGExitNode	EXIT		1200790		True				
ANR	1201077	Symbol	* ss ++		1200790						
ANR	1201078	Symbol	k -> u . mem . pstr		1200790						
ANR	1201079	Symbol	string_cmp_ic		1200790						
ANR	1201080	Symbol	memp		1200790						
ANR	1201081	Symbol	STK_RETURN		1200790						
ANR	1201082	Symbol	mem_is_in_memp		1200790						
ANR	1201083	Symbol	& ss		1200790						
ANR	1201084	Symbol	ignore_case		1200790						
ANR	1201085	Symbol	case_fold_flag		1200790						
ANR	1201086	Symbol	mem_num		1200790						
ANR	1201087	Symbol	top		1200790						
ANR	1201088	Symbol	reg		1200790						
ANR	1201089	Symbol	k -> u . mem . num		1200790						
ANR	1201090	Symbol	pstart		1200790						
ANR	1201091	Symbol	pend		1200790						
ANR	1201092	Symbol	ss		1200790						
ANR	1201093	Symbol	STK_MEM_START		1200790						
ANR	1201094	Symbol	level		1200790						
ANR	1201095	Symbol	* p ++		1200790						
ANR	1201096	Symbol	k -> type		1200790						
ANR	1201097	Symbol	nest		1200790						
ANR	1201098	Symbol	k		1200790						
ANR	1201099	Symbol	reg -> enc		1200790						
ANR	1201100	Symbol	p		1200790						
ANR	1201101	Symbol	s		1200790						
ANR	1201102	Symbol	NULL_UCHARP		1200790						
ANR	1201103	Symbol	* k		1200790						
ANR	1201104	Symbol	k -> u		1200790						
ANR	1201105	Symbol	STK_CALL_FRAME		1200790						
ANR	1201106	Symbol	k -> u . mem		1200790						
ANR	1201107	Symbol	send		1200790						
ANR	1201108	Symbol	* s		1200790						
ANR	1201109	Symbol	* reg		1200790						
ANR	1201110	Symbol	STK_MEM_END		1200790						
ANR	1201111	Symbol	stk_base		1200790						
ANR	1201112	DeclStmt									
ANR	1201113	Decl							struct timeval	struct timeval	ts
ANR	1201114	Decl							struct timeval	struct timeval	te
ANR	1201115	DeclStmt									
ANR	1201116	Decl							struct tms	struct tms	ts
ANR	1201117	Decl							struct tms	struct tms	te
ANR	1201118	DeclStmt									
ANR	1201119	Decl							int	int [ 256 ]	OpCounter
ANR	1201120	DeclStmt									
ANR	1201121	Decl							int	int [ 256 ]	OpPrevCounter
ANR	1201122	DeclStmt									
ANR	1201123	Decl							unsigned long	unsigned long [ 256 ]	OpTime
ANR	1201124	DeclStmt									
ANR	1201125	Decl							int	int	OpCurr
ANR	1201126	DeclStmt									
ANR	1201127	Decl							int	int	OpPrevTarget
ANR	1201128	DeclStmt									
ANR	1201129	Decl							int	int	MaxStackDepth
ANR	1201130	Function	onig_statistics_init	1191:0:31293:31454							
ANR	1201131	FunctionDef	onig_statistics_init ()		1201130	0					
ANR	1201132	CompoundStatement		1193:0:31332:31454	1201130	0					
ANR	1201133	IdentifierDeclStatement	int i ;	1194:2:31336:31341	1201130	0	True				
ANR	1201134	IdentifierDecl	i		1201130	0					
ANR	1201135	IdentifierDeclType	int		1201130	0					
ANR	1201136	Identifier	i		1201130	1					
ANR	1201137	ForStatement	for ( i = 0 ; i < 256 ; i ++ )		1201130	1					
ANR	1201138	ForInit	i = 0 ;	1195:7:31350:31355	1201130	0	True				
ANR	1201139	AssignmentExpression	i = 0		1201130	0		=			
ANR	1201140	Identifier	i		1201130	0					
ANR	1201141	PrimaryExpression	0		1201130	1					
ANR	1201142	Condition	i < 256	1195:14:31357:31363	1201130	1	True				
ANR	1201143	RelationalExpression	i < 256		1201130	0		<			
ANR	1201144	Identifier	i		1201130	0					
ANR	1201145	PrimaryExpression	256		1201130	1					
ANR	1201146	PostIncDecOperationExpression	i ++	1195:23:31366:31368	1201130	2	True				
ANR	1201147	Identifier	i		1201130	0					
ANR	1201148	IncDec	++		1201130	1					
ANR	1201149	CompoundStatement		3:28:38:38	1201130	3					
ANR	1201150	ExpressionStatement	OpCounter [ i ] = OpPrevCounter [ i ] = 0	1196:4:31377:31412	1201130	0	True				
ANR	1201151	AssignmentExpression	OpCounter [ i ] = OpPrevCounter [ i ] = 0		1201130	0		=			
ANR	1201152	ArrayIndexing	OpCounter [ i ]		1201130	0					
ANR	1201153	Identifier	OpCounter		1201130	0					
ANR	1201154	Identifier	i		1201130	1					
ANR	1201155	AssignmentExpression	OpPrevCounter [ i ] = 0		1201130	1		=			
ANR	1201156	ArrayIndexing	OpPrevCounter [ i ]		1201130	0					
ANR	1201157	Identifier	OpPrevCounter		1201130	0					
ANR	1201158	Identifier	i		1201130	1					
ANR	1201159	PrimaryExpression	0		1201130	1					
ANR	1201160	ExpressionStatement	OpTime [ i ] = 0	1196:41:31414:31427	1201130	1	True				
ANR	1201161	AssignmentExpression	OpTime [ i ] = 0		1201130	0		=			
ANR	1201162	ArrayIndexing	OpTime [ i ]		1201130	0					
ANR	1201163	Identifier	OpTime		1201130	0					
ANR	1201164	Identifier	i		1201130	1					
ANR	1201165	PrimaryExpression	0		1201130	1					
ANR	1201166	ExpressionStatement	MaxStackDepth = 0	1198:2:31435:31452	1201130	2	True				
ANR	1201167	AssignmentExpression	MaxStackDepth = 0		1201130	0		=			
ANR	1201168	Identifier	MaxStackDepth		1201130	0					
ANR	1201169	PrimaryExpression	0		1201130	1					
ANR	1201170	ReturnType	extern void		1201130	1					
ANR	1201171	Identifier	onig_statistics_init		1201130	2					
ANR	1201172	ParameterList			1201130	3					
ANR	1201173	CFGEntryNode	ENTRY		1201130		True				
ANR	1201174	CFGExitNode	EXIT		1201130		True				
ANR	1201175	Symbol	* OpCounter		1201130						
ANR	1201176	Symbol	MaxStackDepth		1201130						
ANR	1201177	Symbol	* i		1201130						
ANR	1201178	Symbol	* OpPrevCounter		1201130						
ANR	1201179	Symbol	OpPrevCounter		1201130						
ANR	1201180	Symbol	i		1201130						
ANR	1201181	Symbol	OpCounter		1201130						
ANR	1201182	Symbol	* OpTime		1201130						
ANR	1201183	Symbol	OpTime		1201130						
ANR	1201184	Function	onig_print_statistics	1201:0:31457:31778							
ANR	1201185	FunctionDef	onig_print_statistics (FILE * f)		1201184	0					
ANR	1201186	CompoundStatement		1203:0:31500:31778	1201184	0					
ANR	1201187	IdentifierDeclStatement	int i ;	1204:2:31504:31509	1201184	0	True				
ANR	1201188	IdentifierDecl	i		1201184	0					
ANR	1201189	IdentifierDeclType	int		1201184	0					
ANR	1201190	Identifier	i		1201184	1					
ANR	1201191	ExpressionStatement	"fprintf ( f , ""   count      prev        time\\n"" )"	1205:2:31513:31559	1201184	1	True				
ANR	1201192	CallExpression	"fprintf ( f , ""   count      prev        time\\n"" )"		1201184	0					
ANR	1201193	Callee	fprintf		1201184	0					
ANR	1201194	Identifier	fprintf		1201184	0					
ANR	1201195	ArgumentList	f		1201184	1					
ANR	1201196	Argument	f		1201184	0					
ANR	1201197	Identifier	f		1201184	0					
ANR	1201198	Argument	"""   count      prev        time\\n"""		1201184	1					
ANR	1201199	PrimaryExpression	"""   count      prev        time\\n"""		1201184	0					
ANR	1201200	ForStatement	for ( i = 0 ; OnigOpInfo [ i ] . opcode >= 0 ; i ++ )		1201184	2					
ANR	1201201	ForInit	i = 0 ;	1206:7:31568:31573	1201184	0	True				
ANR	1201202	AssignmentExpression	i = 0		1201184	0		=			
ANR	1201203	Identifier	i		1201184	0					
ANR	1201204	PrimaryExpression	0		1201184	1					
ANR	1201205	Condition	OnigOpInfo [ i ] . opcode >= 0	1206:14:31575:31599	1201184	1	True				
ANR	1201206	RelationalExpression	OnigOpInfo [ i ] . opcode >= 0		1201184	0		>=			
ANR	1201207	MemberAccess	OnigOpInfo [ i ] . opcode		1201184	0					
ANR	1201208	ArrayIndexing	OnigOpInfo [ i ]		1201184	0					
ANR	1201209	Identifier	OnigOpInfo		1201184	0					
ANR	1201210	Identifier	i		1201184	1					
ANR	1201211	Identifier	opcode		1201184	1					
ANR	1201212	PrimaryExpression	0		1201184	1					
ANR	1201213	PostIncDecOperationExpression	i ++	1206:41:31602:31604	1201184	2	True				
ANR	1201214	Identifier	i		1201184	0					
ANR	1201215	IncDec	++		1201184	1					
ANR	1201216	CompoundStatement		4:46:106:106	1201184	3					
ANR	1201217	ExpressionStatement	"fprintf ( f , ""%8d: %8d: %10ld: %s\\n"" , OpCounter [ i ] , OpPrevCounter [ i ] , OpTime [ i ] , OnigOpInfo [ i ] . name )"	1207:4:31613:31716	1201184	0	True				
ANR	1201218	CallExpression	"fprintf ( f , ""%8d: %8d: %10ld: %s\\n"" , OpCounter [ i ] , OpPrevCounter [ i ] , OpTime [ i ] , OnigOpInfo [ i ] . name )"		1201184	0					
ANR	1201219	Callee	fprintf		1201184	0					
ANR	1201220	Identifier	fprintf		1201184	0					
ANR	1201221	ArgumentList	f		1201184	1					
ANR	1201222	Argument	f		1201184	0					
ANR	1201223	Identifier	f		1201184	0					
ANR	1201224	Argument	"""%8d: %8d: %10ld: %s\\n"""		1201184	1					
ANR	1201225	PrimaryExpression	"""%8d: %8d: %10ld: %s\\n"""		1201184	0					
ANR	1201226	Argument	OpCounter [ i ]		1201184	2					
ANR	1201227	ArrayIndexing	OpCounter [ i ]		1201184	0					
ANR	1201228	Identifier	OpCounter		1201184	0					
ANR	1201229	Identifier	i		1201184	1					
ANR	1201230	Argument	OpPrevCounter [ i ]		1201184	3					
ANR	1201231	ArrayIndexing	OpPrevCounter [ i ]		1201184	0					
ANR	1201232	Identifier	OpPrevCounter		1201184	0					
ANR	1201233	Identifier	i		1201184	1					
ANR	1201234	Argument	OpTime [ i ]		1201184	4					
ANR	1201235	ArrayIndexing	OpTime [ i ]		1201184	0					
ANR	1201236	Identifier	OpTime		1201184	0					
ANR	1201237	Identifier	i		1201184	1					
ANR	1201238	Argument	OnigOpInfo [ i ] . name		1201184	5					
ANR	1201239	MemberAccess	OnigOpInfo [ i ] . name		1201184	0					
ANR	1201240	ArrayIndexing	OnigOpInfo [ i ]		1201184	0					
ANR	1201241	Identifier	OnigOpInfo		1201184	0					
ANR	1201242	Identifier	i		1201184	1					
ANR	1201243	Identifier	name		1201184	1					
ANR	1201244	ExpressionStatement	"fprintf ( f , ""\\nmax stack depth: %d\\n"" , MaxStackDepth )"	1210:2:31724:31776	1201184	3	True				
ANR	1201245	CallExpression	"fprintf ( f , ""\\nmax stack depth: %d\\n"" , MaxStackDepth )"		1201184	0					
ANR	1201246	Callee	fprintf		1201184	0					
ANR	1201247	Identifier	fprintf		1201184	0					
ANR	1201248	ArgumentList	f		1201184	1					
ANR	1201249	Argument	f		1201184	0					
ANR	1201250	Identifier	f		1201184	0					
ANR	1201251	Argument	"""\\nmax stack depth: %d\\n"""		1201184	1					
ANR	1201252	PrimaryExpression	"""\\nmax stack depth: %d\\n"""		1201184	0					
ANR	1201253	Argument	MaxStackDepth		1201184	2					
ANR	1201254	Identifier	MaxStackDepth		1201184	0					
ANR	1201255	ReturnType	extern void		1201184	1					
ANR	1201256	Identifier	onig_print_statistics		1201184	2					
ANR	1201257	ParameterList	FILE * f		1201184	3					
ANR	1201258	Parameter	FILE * f	1202:22:31491:31497	1201184	0	True				
ANR	1201259	ParameterType	FILE *		1201184	0					
ANR	1201260	Identifier	f		1201184	1					
ANR	1201261	CFGEntryNode	ENTRY		1201184		True				
ANR	1201262	CFGExitNode	EXIT		1201184		True				
ANR	1201263	Symbol	* OpCounter		1201184						
ANR	1201264	Symbol	MaxStackDepth		1201184						
ANR	1201265	Symbol	* OnigOpInfo		1201184						
ANR	1201266	Symbol	OpPrevCounter		1201184						
ANR	1201267	Symbol	f		1201184						
ANR	1201268	Symbol	OnigOpInfo		1201184						
ANR	1201269	Symbol	i		1201184						
ANR	1201270	Symbol	OpCounter		1201184						
ANR	1201271	Symbol	OpTime		1201184						
ANR	1201272	Symbol	OnigOpInfo [ i ] . opcode		1201184						
ANR	1201273	Symbol	* i		1201184						
ANR	1201274	Symbol	* OpPrevCounter		1201184						
ANR	1201275	Symbol	* OpTime		1201184						
ANR	1201276	Symbol	OnigOpInfo [ i ] . name		1201184						
ANR	1201277	DeclStmt									
ANR	1201278	Decl							int	int	regoff_t
ANR	1201279	ClassDef	<unnamed>	1230:8:32053:32118							
ANR	1201280	DeclStmt									
ANR	1201281	Decl							regoff_t	regoff_t	rm_so
ANR	1201282	DeclStmt									
ANR	1201283	Decl							regoff_t	regoff_t	rm_eo
ANR	1201284	DeclStmt									
ANR	1201285	Decl									posix_regmatch_t
ANR	1201286	DeclStmt									
ANR	1201287	Decl							UChar	UChar [ ]	FinishCode
ANR	1201288	DeclStmt									
ANR	1201289	Decl							int	int	i
ANR	1201290	Decl							int	int	n
ANR	1201291	Decl							int	int	num_mem
ANR	1201292	Decl							int	int	best_len
ANR	1201293	Decl							int	int	pop_level
ANR	1201294	DeclStmt									
ANR	1201295	Decl							LengthType	LengthType	tlen
ANR	1201296	Decl							LengthType	LengthType	tlen2
ANR	1201297	DeclStmt									
ANR	1201298	Decl							MemNumType	MemNumType	mem
ANR	1201299	DeclStmt									
ANR	1201300	Decl							RelAddrType	RelAddrType	addr
ANR	1201301	DeclStmt									
ANR	1201302	Decl							OnigOptionType	OnigOptionType	option
ANR	1201303	DeclStmt									
ANR	1201304	Decl							OnigEncoding	OnigEncoding	encode
ANR	1201305	DeclStmt									
ANR	1201306	Decl							OnigCaseFoldType	OnigCaseFoldType	case_fold_flag
ANR	1201307	DeclStmt									
ANR	1201308	Decl							UChar	UChar *	s
ANR	1201309	Decl							UChar	UChar *	q
ANR	1201310	Decl							UChar	UChar *	sbegin
ANR	1201311	DeclStmt									
ANR	1201312	Decl							UChar	UChar *	p
ANR	1201313	DeclStmt									
ANR	1201314	Decl							char	char *	alloca_base
ANR	1201315	DeclStmt									
ANR	1201316	Decl							OnigStackType	OnigStackType *	stk_alloc
ANR	1201317	Decl							OnigStackType	OnigStackType *	stk_base
ANR	1201318	Decl							OnigStackType	OnigStackType *	stk
ANR	1201319	Decl							OnigStackType	OnigStackType *	stk_end
ANR	1201320	DeclStmt									
ANR	1201321	Decl							OnigStackType	OnigStackType *	stkp
ANR	1201322	DeclStmt									
ANR	1201323	Decl							OnigStackIndex	OnigStackIndex	si
ANR	1201324	DeclStmt									
ANR	1201325	Decl							OnigStackIndex	OnigStackIndex *	repeat_stk
ANR	1201326	DeclStmt									
ANR	1201327	Decl							OnigStackIndex	OnigStackIndex *	mem_start_stk
ANR	1201328	Decl							OnigStackIndex	OnigStackIndex *	mem_end_stk
ANR	1201329	DeclStmt									
ANR	1201330	Decl							int	int	scv
ANR	1201331	DeclStmt									
ANR	1201332	Decl							unsigned char	unsigned char *	state_check_buff
ANR	1201333	DeclStmt									
ANR	1201334	Decl							int	int	num_comb_exp_check
ANR	1201335	DeclStmt									
ANR	1201336	Decl							UChar	UChar *	q
ANR	1201337	Decl							UChar	UChar *	bp
ANR	1201338	Decl							UChar	UChar [ 50 ]	buf
ANR	1201339	DeclStmt									
ANR	1201340	Decl							int	int	len
ANR	1201341	DeclStmt									
ANR	1201342	Decl							OnigRegion	OnigRegion *	region
ANR	1201343	DeclStmt									
ANR	1201344	Decl							posix_regmatch_t	posix_regmatch_t *	rmt
ANR	1201345	DeclStmt									
ANR	1201346	Decl							int	int	r
ANR	1201347	DeclStmt									
ANR	1201348	Decl							OnigCaptureTreeNode	OnigCaptureTreeNode *	node
ANR	1201349	DeclStmt									
ANR	1201350	Decl							int	int	len
ANR	1201351	DeclStmt									
ANR	1201352	Decl							UChar	UChar *	q
ANR	1201353	Decl							UChar	UChar [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]	lowbuf
ANR	1201354	DeclStmt									
ANR	1201355	Decl							int	int	len
ANR	1201356	DeclStmt									
ANR	1201357	Decl							UChar	UChar *	q
ANR	1201358	Decl							UChar	UChar *	endp
ANR	1201359	Decl							UChar	UChar [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]	lowbuf
ANR	1201360	DeclStmt									
ANR	1201361	Decl							OnigCodePoint	OnigCodePoint	code
ANR	1201362	DeclStmt									
ANR	1201363	Decl							UChar	UChar *	ss
ANR	1201364	DeclStmt									
ANR	1201365	Decl							int	int	mb_len
ANR	1201366	DeclStmt									
ANR	1201367	Decl							OnigCodePoint	OnigCodePoint	code
ANR	1201368	DeclStmt									
ANR	1201369	Decl							UChar	UChar *	ss
ANR	1201370	DeclStmt									
ANR	1201371	Decl							int	int	mb_len
ANR	1201372	DeclStmt									
ANR	1201373	Decl							OnigCodePoint	OnigCodePoint	code
ANR	1201374	DeclStmt									
ANR	1201375	Decl							void	void *	node
ANR	1201376	DeclStmt									
ANR	1201377	Decl							int	int	mb_len
ANR	1201378	DeclStmt									
ANR	1201379	Decl							UChar	UChar *	ss
ANR	1201380	DeclStmt									
ANR	1201381	Decl							UChar	UChar *	ss
ANR	1201382	DeclStmt									
ANR	1201383	Decl							int	int	len
ANR	1201384	DeclStmt									
ANR	1201385	Decl							UChar	UChar *	pstart
ANR	1201386	Decl							UChar	UChar *	pend
ANR	1201387	DeclStmt									
ANR	1201388	Decl							int	int	len
ANR	1201389	DeclStmt									
ANR	1201390	Decl							UChar	UChar *	pstart
ANR	1201391	Decl							UChar	UChar *	pend
ANR	1201392	DeclStmt									
ANR	1201393	Decl							int	int	len
ANR	1201394	Decl							int	int	is_fail
ANR	1201395	DeclStmt									
ANR	1201396	Decl							UChar	UChar *	pstart
ANR	1201397	Decl							UChar	UChar *	pend
ANR	1201398	Decl							UChar	UChar *	swork
ANR	1201399	DeclStmt									
ANR	1201400	Decl							int	int	len
ANR	1201401	Decl							int	int	is_fail
ANR	1201402	DeclStmt									
ANR	1201403	Decl							UChar	UChar *	pstart
ANR	1201404	Decl							UChar	UChar *	pend
ANR	1201405	Decl							UChar	UChar *	swork
ANR	1201406	DeclStmt									
ANR	1201407	Decl							int	int	len
ANR	1201408	DeclStmt									
ANR	1201409	Decl							OnigOptionType	OnigOptionType	ic
ANR	1201410	DeclStmt									
ANR	1201411	Decl							LengthType	LengthType	level
ANR	1201412	DeclStmt									
ANR	1201413	Decl							int	int	isnull
ANR	1201414	DeclStmt									
ANR	1201415	Decl							int	int	isnull
ANR	1201416	DeclStmt									
ANR	1201417	Decl							int	int	isnull
ANR	1201418	DeclStmt									
ANR	1201419	Decl							UChar	UChar *	pcode
ANR	1201420	Function	slow_search	2740:0:67476:68033							
ANR	1201421	FunctionDef	"slow_search (OnigEncoding enc , UChar * target , UChar * target_end , const UChar * text , const UChar * text_end , UChar * text_range)"		1201420	0					
ANR	1201422	CompoundStatement		2743:0:67620:68033	1201420	0					
ANR	1201423	IdentifierDeclStatement	"UChar * t , * p , * s , * end ;"	2744:2:67624:67646	1201420	0	True				
ANR	1201424	IdentifierDecl	* t		1201420	0					
ANR	1201425	IdentifierDeclType	UChar *		1201420	0					
ANR	1201426	Identifier	t		1201420	1					
ANR	1201427	IdentifierDecl	* p		1201420	1					
ANR	1201428	IdentifierDeclType	UChar *		1201420	0					
ANR	1201429	Identifier	p		1201420	1					
ANR	1201430	IdentifierDecl	* s		1201420	2					
ANR	1201431	IdentifierDeclType	UChar *		1201420	0					
ANR	1201432	Identifier	s		1201420	1					
ANR	1201433	IdentifierDecl	* end		1201420	3					
ANR	1201434	IdentifierDeclType	UChar *		1201420	0					
ANR	1201435	Identifier	end		1201420	1					
ANR	1201436	ExpressionStatement	end = ( UChar * ) text_end	2746:2:67651:67674	1201420	1	True				
ANR	1201437	AssignmentExpression	end = ( UChar * ) text_end		1201420	0		=			
ANR	1201438	Identifier	end		1201420	0					
ANR	1201439	CastExpression	( UChar * ) text_end		1201420	1					
ANR	1201440	CastTarget	UChar *		1201420	0					
ANR	1201441	Identifier	text_end		1201420	1					
ANR	1201442	ExpressionStatement	end -= target_end - target - 1	2747:2:67678:67708	1201420	2	True				
ANR	1201443	AssignmentExpression	end -= target_end - target - 1		1201420	0		-=			
ANR	1201444	Identifier	end		1201420	0					
ANR	1201445	AdditiveExpression	target_end - target - 1		1201420	1		-			
ANR	1201446	Identifier	target_end		1201420	0					
ANR	1201447	AdditiveExpression	target - 1		1201420	1		-			
ANR	1201448	Identifier	target		1201420	0					
ANR	1201449	PrimaryExpression	1		1201420	1					
ANR	1201450	IfStatement	if ( end > text_range )		1201420	3					
ANR	1201451	Condition	end > text_range	2748:6:67716:67731	1201420	0	True				
ANR	1201452	RelationalExpression	end > text_range		1201420	0		>			
ANR	1201453	Identifier	end		1201420	0					
ANR	1201454	Identifier	text_range		1201420	1					
ANR	1201455	ExpressionStatement	end = text_range	2749:4:67738:67754	1201420	1	True				
ANR	1201456	AssignmentExpression	end = text_range		1201420	0		=			
ANR	1201457	Identifier	end		1201420	0					
ANR	1201458	Identifier	text_range		1201420	1					
ANR	1201459	ExpressionStatement	s = ( UChar * ) text	2751:2:67759:67776	1201420	4	True				
ANR	1201460	AssignmentExpression	s = ( UChar * ) text		1201420	0		=			
ANR	1201461	Identifier	s		1201420	0					
ANR	1201462	CastExpression	( UChar * ) text		1201420	1					
ANR	1201463	CastTarget	UChar *		1201420	0					
ANR	1201464	Identifier	text		1201420	1					
ANR	1201465	WhileStatement	while ( s < end )		1201420	5					
ANR	1201466	Condition	s < end	2753:9:67788:67794	1201420	0	True				
ANR	1201467	RelationalExpression	s < end		1201420	0		<			
ANR	1201468	Identifier	s		1201420	0					
ANR	1201469	Identifier	end		1201420	1					
ANR	1201470	CompoundStatement		11:18:176:176	1201420	1					
ANR	1201471	IfStatement	if ( * s == * target )		1201420	0					
ANR	1201472	Condition	* s == * target	2754:8:67807:67819	1201420	0	True				
ANR	1201473	EqualityExpression	* s == * target		1201420	0		==			
ANR	1201474	UnaryOperationExpression	* s		1201420	0					
ANR	1201475	UnaryOperator	*		1201420	0					
ANR	1201476	Identifier	s		1201420	1					
ANR	1201477	UnaryOperationExpression	* target		1201420	1					
ANR	1201478	UnaryOperator	*		1201420	0					
ANR	1201479	Identifier	target		1201420	1					
ANR	1201480	CompoundStatement		12:23:201:201	1201420	1					
ANR	1201481	ExpressionStatement	p = s + 1	2755:6:67830:67839	1201420	0	True				
ANR	1201482	AssignmentExpression	p = s + 1		1201420	0		=			
ANR	1201483	Identifier	p		1201420	0					
ANR	1201484	AdditiveExpression	s + 1		1201420	1		+			
ANR	1201485	Identifier	s		1201420	0					
ANR	1201486	PrimaryExpression	1		1201420	1					
ANR	1201487	ExpressionStatement	t = target + 1	2756:6:67847:67861	1201420	1	True				
ANR	1201488	AssignmentExpression	t = target + 1		1201420	0		=			
ANR	1201489	Identifier	t		1201420	0					
ANR	1201490	AdditiveExpression	target + 1		1201420	1		+			
ANR	1201491	Identifier	target		1201420	0					
ANR	1201492	PrimaryExpression	1		1201420	1					
ANR	1201493	WhileStatement	while ( t < target_end )		1201420	2					
ANR	1201494	Condition	t < target_end	2757:13:67876:67889	1201420	0	True				
ANR	1201495	RelationalExpression	t < target_end		1201420	0		<			
ANR	1201496	Identifier	t		1201420	0					
ANR	1201497	Identifier	target_end		1201420	1					
ANR	1201498	CompoundStatement		15:29:271:271	1201420	1					
ANR	1201499	IfStatement	if ( * t != * p ++ )		1201420	0					
ANR	1201500	Condition	* t != * p ++	2758:5:67899:67908	1201420	0	True				
ANR	1201501	EqualityExpression	* t != * p ++		1201420	0		!=			
ANR	1201502	UnaryOperationExpression	* t		1201420	0					
ANR	1201503	UnaryOperator	*		1201420	0					
ANR	1201504	Identifier	t		1201420	1					
ANR	1201505	UnaryOperationExpression	* p ++		1201420	1					
ANR	1201506	UnaryOperator	*		1201420	0					
ANR	1201507	PostIncDecOperationExpression	p ++		1201420	1					
ANR	1201508	Identifier	p		1201420	0					
ANR	1201509	IncDec	++		1201420	1					
ANR	1201510	BreakStatement	break ;	2759:3:67914:67919	1201420	1	True				
ANR	1201511	ExpressionStatement	t ++	2760:1:67922:67925	1201420	1	True				
ANR	1201512	PostIncDecOperationExpression	t ++		1201420	0					
ANR	1201513	Identifier	t		1201420	0					
ANR	1201514	IncDec	++		1201420	1					
ANR	1201515	IfStatement	if ( t == target_end )		1201420	3					
ANR	1201516	Condition	t == target_end	2762:10:67945:67959	1201420	0	True				
ANR	1201517	EqualityExpression	t == target_end		1201420	0		==			
ANR	1201518	Identifier	t		1201420	0					
ANR	1201519	Identifier	target_end		1201420	1					
ANR	1201520	ReturnStatement	return s ;	2763:1:67963:67971	1201420	1	True				
ANR	1201521	Identifier	s		1201420	0					
ANR	1201522	ExpressionStatement	"s += enclen ( enc , s )"	2765:4:67983:68002	1201420	1	True				
ANR	1201523	AssignmentExpression	"s += enclen ( enc , s )"		1201420	0		+=			
ANR	1201524	Identifier	s		1201420	0					
ANR	1201525	CallExpression	"enclen ( enc , s )"		1201420	1					
ANR	1201526	Callee	enclen		1201420	0					
ANR	1201527	Identifier	enclen		1201420	0					
ANR	1201528	ArgumentList	enc		1201420	1					
ANR	1201529	Argument	enc		1201420	0					
ANR	1201530	Identifier	enc		1201420	0					
ANR	1201531	Argument	s		1201420	1					
ANR	1201532	Identifier	s		1201420	0					
ANR	1201533	ReturnStatement	return ( UChar * ) NULL ;	2768:2:68011:68031	1201420	6	True				
ANR	1201534	CastExpression	( UChar * ) NULL		1201420	0					
ANR	1201535	CastTarget	UChar *		1201420	0					
ANR	1201536	Identifier	NULL		1201420	1					
ANR	1201537	ReturnType	static UChar *		1201420	1					
ANR	1201538	Identifier	slow_search		1201420	2					
ANR	1201539	ParameterList	"OnigEncoding enc , UChar * target , UChar * target_end , const UChar * text , const UChar * text_end , UChar * text_range"		1201420	3					
ANR	1201540	Parameter	OnigEncoding enc	2741:12:67502:67517	1201420	0	True				
ANR	1201541	ParameterType	OnigEncoding		1201420	0					
ANR	1201542	Identifier	enc		1201420	1					
ANR	1201543	Parameter	UChar * target	2741:30:67520:67532	1201420	1	True				
ANR	1201544	ParameterType	UChar *		1201420	0					
ANR	1201545	Identifier	target		1201420	1					
ANR	1201546	Parameter	UChar * target_end	2741:45:67535:67551	1201420	2	True				
ANR	1201547	ParameterType	UChar *		1201420	0					
ANR	1201548	Identifier	target_end		1201420	1					
ANR	1201549	Parameter	const UChar * text	2742:5:67559:67575	1201420	3	True				
ANR	1201550	ParameterType	const UChar *		1201420	0					
ANR	1201551	Identifier	text		1201420	1					
ANR	1201552	Parameter	const UChar * text_end	2742:24:67578:67598	1201420	4	True				
ANR	1201553	ParameterType	const UChar *		1201420	0					
ANR	1201554	Identifier	text_end		1201420	1					
ANR	1201555	Parameter	UChar * text_range	2742:47:67601:67617	1201420	5	True				
ANR	1201556	ParameterType	UChar *		1201420	0					
ANR	1201557	Identifier	text_range		1201420	1					
ANR	1201558	CFGEntryNode	ENTRY		1201420		True				
ANR	1201559	CFGExitNode	EXIT		1201420		True				
ANR	1201560	Symbol	NULL		1201420						
ANR	1201561	Symbol	* p ++		1201420						
ANR	1201562	Symbol	target_end		1201420						
ANR	1201563	Symbol	enclen		1201420						
ANR	1201564	Symbol	target		1201420						
ANR	1201565	Symbol	p		1201420						
ANR	1201566	Symbol	* target		1201420						
ANR	1201567	Symbol	s		1201420						
ANR	1201568	Symbol	t		1201420						
ANR	1201569	Symbol	end		1201420						
ANR	1201570	Symbol	enc		1201420						
ANR	1201571	Symbol	text		1201420						
ANR	1201572	Symbol	text_end		1201420						
ANR	1201573	Symbol	text_range		1201420						
ANR	1201574	Symbol	* s		1201420						
ANR	1201575	Symbol	* t		1201420						
ANR	1201576	Function	str_lower_case_match	2771:0:68036:68479							
ANR	1201577	FunctionDef	"str_lower_case_match (OnigEncoding enc , int case_fold_flag , const UChar * t , const UChar * tend , const UChar * p , const UChar * end)"		1201576	0					
ANR	1201578	CompoundStatement		2775:0:68203:68479	1201576	0					
ANR	1201579	IdentifierDeclStatement	int lowlen ;	2776:2:68207:68217	1201576	0	True				
ANR	1201580	IdentifierDecl	lowlen		1201576	0					
ANR	1201581	IdentifierDeclType	int		1201576	0					
ANR	1201582	Identifier	lowlen		1201576	1					
ANR	1201583	IdentifierDeclStatement	"UChar * q , lowbuf [ ONIGENC_MBC_CASE_FOLD_MAXLEN ] ;"	2777:2:68221:68267	1201576	1	True				
ANR	1201584	IdentifierDecl	* q		1201576	0					
ANR	1201585	IdentifierDeclType	UChar *		1201576	0					
ANR	1201586	Identifier	q		1201576	1					
ANR	1201587	IdentifierDecl	lowbuf [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]		1201576	1					
ANR	1201588	IdentifierDeclType	UChar [ ONIGENC_MBC_CASE_FOLD_MAXLEN ]		1201576	0					
ANR	1201589	Identifier	lowbuf		1201576	1					
ANR	1201590	Identifier	ONIGENC_MBC_CASE_FOLD_MAXLEN		1201576	2					
ANR	1201591	WhileStatement	while ( t < tend )		1201576	2					
ANR	1201592	Condition	t < tend	2779:9:68279:68286	1201576	0	True				
ANR	1201593	RelationalExpression	t < tend		1201576	0		<			
ANR	1201594	Identifier	t		1201576	0					
ANR	1201595	Identifier	tend		1201576	1					
ANR	1201596	CompoundStatement		5:19:85:85	1201576	1					
ANR	1201597	ExpressionStatement	"lowlen = ONIGENC_MBC_CASE_FOLD ( enc , case_fold_flag , & p , end , lowbuf )"	2780:4:68295:68363	1201576	0	True				
ANR	1201598	AssignmentExpression	"lowlen = ONIGENC_MBC_CASE_FOLD ( enc , case_fold_flag , & p , end , lowbuf )"		1201576	0		=			
ANR	1201599	Identifier	lowlen		1201576	0					
ANR	1201600	CallExpression	"ONIGENC_MBC_CASE_FOLD ( enc , case_fold_flag , & p , end , lowbuf )"		1201576	1					
ANR	1201601	Callee	ONIGENC_MBC_CASE_FOLD		1201576	0					
ANR	1201602	Identifier	ONIGENC_MBC_CASE_FOLD		1201576	0					
ANR	1201603	ArgumentList	enc		1201576	1					
ANR	1201604	Argument	enc		1201576	0					
ANR	1201605	Identifier	enc		1201576	0					
ANR	1201606	Argument	case_fold_flag		1201576	1					
ANR	1201607	Identifier	case_fold_flag		1201576	0					
ANR	1201608	Argument	& p		1201576	2					
ANR	1201609	UnaryOperationExpression	& p		1201576	0					
ANR	1201610	UnaryOperator	&		1201576	0					
ANR	1201611	Identifier	p		1201576	1					
ANR	1201612	Argument	end		1201576	3					
ANR	1201613	Identifier	end		1201576	0					
ANR	1201614	Argument	lowbuf		1201576	4					
ANR	1201615	Identifier	lowbuf		1201576	0					
ANR	1201616	ExpressionStatement	q = lowbuf	2781:4:68369:68379	1201576	1	True				
ANR	1201617	AssignmentExpression	q = lowbuf		1201576	0		=			
ANR	1201618	Identifier	q		1201576	0					
ANR	1201619	Identifier	lowbuf		1201576	1					
ANR	1201620	WhileStatement	while ( lowlen > 0 )		1201576	2					
ANR	1201621	Condition	lowlen > 0	2782:11:68392:68401	1201576	0	True				
ANR	1201622	RelationalExpression	lowlen > 0		1201576	0		>			
ANR	1201623	Identifier	lowlen		1201576	0					
ANR	1201624	PrimaryExpression	0		1201576	1					
ANR	1201625	CompoundStatement		8:23:200:200	1201576	1					
ANR	1201626	IfStatement	if ( * t ++ != * q ++ )		1201576	0					
ANR	1201627	Condition	* t ++ != * q ++	2783:10:68416:68427	1201576	0	True				
ANR	1201628	EqualityExpression	* t ++ != * q ++		1201576	0		!=			
ANR	1201629	UnaryOperationExpression	* t ++		1201576	0					
ANR	1201630	UnaryOperator	*		1201576	0					
ANR	1201631	PostIncDecOperationExpression	t ++		1201576	1					
ANR	1201632	Identifier	t		1201576	0					
ANR	1201633	IncDec	++		1201576	1					
ANR	1201634	UnaryOperationExpression	* q ++		1201576	1					
ANR	1201635	UnaryOperator	*		1201576	0					
ANR	1201636	PostIncDecOperationExpression	q ++		1201576	1					
ANR	1201637	Identifier	q		1201576	0					
ANR	1201638	IncDec	++		1201576	1					
ANR	1201639	ReturnStatement	return 0 ;	2783:24:68430:68438	1201576	1	True				
ANR	1201640	PrimaryExpression	0		1201576	0					
ANR	1201641	ExpressionStatement	lowlen --	2784:6:68446:68454	1201576	1	True				
ANR	1201642	PostIncDecOperationExpression	lowlen --		1201576	0					
ANR	1201643	Identifier	lowlen		1201576	0					
ANR	1201644	IncDec	--		1201576	1					
ANR	1201645	ReturnStatement	return 1 ;	2788:2:68469:68477	1201576	3	True				
ANR	1201646	PrimaryExpression	1		1201576	0					
ANR	1201647	ReturnType	static int		1201576	1					
ANR	1201648	Identifier	str_lower_case_match		1201576	2					
ANR	1201649	ParameterList	"OnigEncoding enc , int case_fold_flag , const UChar * t , const UChar * tend , const UChar * p , const UChar * end"		1201576	3					
ANR	1201650	Parameter	OnigEncoding enc	2772:21:68068:68083	1201576	0	True				
ANR	1201651	ParameterType	OnigEncoding		1201576	0					
ANR	1201652	Identifier	enc		1201576	1					
ANR	1201653	Parameter	int case_fold_flag	2772:39:68086:68103	1201576	1	True				
ANR	1201654	ParameterType	int		1201576	0					
ANR	1201655	Identifier	case_fold_flag		1201576	1					
ANR	1201656	Parameter	const UChar * t	2773:21:68127:68140	1201576	2	True				
ANR	1201657	ParameterType	const UChar *		1201576	0					
ANR	1201658	Identifier	t		1201576	1					
ANR	1201659	Parameter	const UChar * tend	2773:37:68143:68159	1201576	3	True				
ANR	1201660	ParameterType	const UChar *		1201576	0					
ANR	1201661	Identifier	tend		1201576	1					
ANR	1201662	Parameter	const UChar * p	2774:7:68169:68182	1201576	4	True				
ANR	1201663	ParameterType	const UChar *		1201576	0					
ANR	1201664	Identifier	p		1201576	1					
ANR	1201665	Parameter	const UChar * end	2774:23:68185:68200	1201576	5	True				
ANR	1201666	ParameterType	const UChar *		1201576	0					
ANR	1201667	Identifier	end		1201576	1					
ANR	1201668	CFGEntryNode	ENTRY		1201576		True				
ANR	1201669	CFGExitNode	EXIT		1201576		True				
ANR	1201670	Symbol	lowbuf		1201576						
ANR	1201671	Symbol	* t ++		1201576						
ANR	1201672	Symbol	* q ++		1201576						
ANR	1201673	Symbol	p		1201576						
ANR	1201674	Symbol	case_fold_flag		1201576						
ANR	1201675	Symbol	tend		1201576						
ANR	1201676	Symbol	q		1201576						
ANR	1201677	Symbol	t		1201576						
ANR	1201678	Symbol	ONIGENC_MBC_CASE_FOLD		1201576						
ANR	1201679	Symbol	& p		1201576						
ANR	1201680	Symbol	end		1201576						
ANR	1201681	Symbol	enc		1201576						
ANR	1201682	Symbol	lowlen		1201576						
ANR	1201683	Function	slow_search_ic	2791:0:68482:68994							
ANR	1201684	FunctionDef	"slow_search_ic (OnigEncoding enc , int case_fold_flag , UChar * target , UChar * target_end , const UChar * text , const UChar * text_end , UChar * text_range)"		1201683	0					
ANR	1201685	CompoundStatement		2795:0:68660:68994	1201683	0					
ANR	1201686	IdentifierDeclStatement	"UChar * s , * end ;"	2796:2:68664:68678	1201683	0	True				
ANR	1201687	IdentifierDecl	* s		1201683	0					
ANR	1201688	IdentifierDeclType	UChar *		1201683	0					
ANR	1201689	Identifier	s		1201683	1					
ANR	1201690	IdentifierDecl	* end		1201683	1					
ANR	1201691	IdentifierDeclType	UChar *		1201683	0					
ANR	1201692	Identifier	end		1201683	1					
ANR	1201693	ExpressionStatement	end = ( UChar * ) text_end	2798:2:68683:68706	1201683	1	True				
ANR	1201694	AssignmentExpression	end = ( UChar * ) text_end		1201683	0		=			
ANR	1201695	Identifier	end		1201683	0					
ANR	1201696	CastExpression	( UChar * ) text_end		1201683	1					
ANR	1201697	CastTarget	UChar *		1201683	0					
ANR	1201698	Identifier	text_end		1201683	1					
ANR	1201699	ExpressionStatement	end -= target_end - target - 1	2799:2:68710:68740	1201683	2	True				
ANR	1201700	AssignmentExpression	end -= target_end - target - 1		1201683	0		-=			
ANR	1201701	Identifier	end		1201683	0					
ANR	1201702	AdditiveExpression	target_end - target - 1		1201683	1		-			
ANR	1201703	Identifier	target_end		1201683	0					
ANR	1201704	AdditiveExpression	target - 1		1201683	1		-			
ANR	1201705	Identifier	target		1201683	0					
ANR	1201706	PrimaryExpression	1		1201683	1					
ANR	1201707	IfStatement	if ( end > text_range )		1201683	3					
ANR	1201708	Condition	end > text_range	2800:6:68748:68763	1201683	0	True				
ANR	1201709	RelationalExpression	end > text_range		1201683	0		>			
ANR	1201710	Identifier	end		1201683	0					
ANR	1201711	Identifier	text_range		1201683	1					
ANR	1201712	ExpressionStatement	end = text_range	2801:4:68770:68786	1201683	1	True				
ANR	1201713	AssignmentExpression	end = text_range		1201683	0		=			
ANR	1201714	Identifier	end		1201683	0					
ANR	1201715	Identifier	text_range		1201683	1					
ANR	1201716	ExpressionStatement	s = ( UChar * ) text	2803:2:68791:68808	1201683	4	True				
ANR	1201717	AssignmentExpression	s = ( UChar * ) text		1201683	0		=			
ANR	1201718	Identifier	s		1201683	0					
ANR	1201719	CastExpression	( UChar * ) text		1201683	1					
ANR	1201720	CastTarget	UChar *		1201683	0					
ANR	1201721	Identifier	text		1201683	1					
ANR	1201722	WhileStatement	while ( s < end )		1201683	5					
ANR	1201723	Condition	s < end	2805:9:68820:68826	1201683	0	True				
ANR	1201724	RelationalExpression	s < end		1201683	0		<			
ANR	1201725	Identifier	s		1201683	0					
ANR	1201726	Identifier	end		1201683	1					
ANR	1201727	CompoundStatement		11:18:168:168	1201683	1					
ANR	1201728	IfStatement	"if ( str_lower_case_match ( enc , case_fold_flag , target , target_end , s , text_end ) )"		1201683	0					
ANR	1201729	Condition	"str_lower_case_match ( enc , case_fold_flag , target , target_end , s , text_end )"	2806:8:68839:68920	1201683	0	True				
ANR	1201730	CallExpression	"str_lower_case_match ( enc , case_fold_flag , target , target_end , s , text_end )"		1201683	0					
ANR	1201731	Callee	str_lower_case_match		1201683	0					
ANR	1201732	Identifier	str_lower_case_match		1201683	0					
ANR	1201733	ArgumentList	enc		1201683	1					
ANR	1201734	Argument	enc		1201683	0					
ANR	1201735	Identifier	enc		1201683	0					
ANR	1201736	Argument	case_fold_flag		1201683	1					
ANR	1201737	Identifier	case_fold_flag		1201683	0					
ANR	1201738	Argument	target		1201683	2					
ANR	1201739	Identifier	target		1201683	0					
ANR	1201740	Argument	target_end		1201683	3					
ANR	1201741	Identifier	target_end		1201683	0					
ANR	1201742	Argument	s		1201683	4					
ANR	1201743	Identifier	s		1201683	0					
ANR	1201744	Argument	text_end		1201683	5					
ANR	1201745	Identifier	text_end		1201683	0					
ANR	1201746	ReturnStatement	return s ;	2808:6:68929:68937	1201683	1	True				
ANR	1201747	Identifier	s		1201683	0					
ANR	1201748	ExpressionStatement	"s += enclen ( enc , s )"	2810:4:68944:68963	1201683	1	True				
ANR	1201749	AssignmentExpression	"s += enclen ( enc , s )"		1201683	0		+=			
ANR	1201750	Identifier	s		1201683	0					
ANR	1201751	CallExpression	"enclen ( enc , s )"		1201683	1					
ANR	1201752	Callee	enclen		1201683	0					
ANR	1201753	Identifier	enclen		1201683	0					
ANR	1201754	ArgumentList	enc		1201683	1					
ANR	1201755	Argument	enc		1201683	0					
ANR	1201756	Identifier	enc		1201683	0					
ANR	1201757	Argument	s		1201683	1					
ANR	1201758	Identifier	s		1201683	0					
ANR	1201759	ReturnStatement	return ( UChar * ) NULL ;	2813:2:68972:68992	1201683	6	True				
ANR	1201760	CastExpression	( UChar * ) NULL		1201683	0					
ANR	1201761	CastTarget	UChar *		1201683	0					
ANR	1201762	Identifier	NULL		1201683	1					
ANR	1201763	ReturnType	static UChar *		1201683	1					
ANR	1201764	Identifier	slow_search_ic		1201683	2					
ANR	1201765	ParameterList	"OnigEncoding enc , int case_fold_flag , UChar * target , UChar * target_end , const UChar * text , const UChar * text_end , UChar * text_range"		1201683	3					
ANR	1201766	Parameter	OnigEncoding enc	2792:15:68511:68526	1201683	0	True				
ANR	1201767	ParameterType	OnigEncoding		1201683	0					
ANR	1201768	Identifier	enc		1201683	1					
ANR	1201769	Parameter	int case_fold_flag	2792:33:68529:68546	1201683	1	True				
ANR	1201770	ParameterType	int		1201683	0					
ANR	1201771	Identifier	case_fold_flag		1201683	1					
ANR	1201772	Parameter	UChar * target	2793:8:68557:68569	1201683	2	True				
ANR	1201773	ParameterType	UChar *		1201683	0					
ANR	1201774	Identifier	target		1201683	1					
ANR	1201775	Parameter	UChar * target_end	2793:23:68572:68588	1201683	3	True				
ANR	1201776	ParameterType	UChar *		1201683	0					
ANR	1201777	Identifier	target_end		1201683	1					
ANR	1201778	Parameter	const UChar * text	2794:8:68599:68615	1201683	4	True				
ANR	1201779	ParameterType	const UChar *		1201683	0					
ANR	1201780	Identifier	text		1201683	1					
ANR	1201781	Parameter	const UChar * text_end	2794:27:68618:68638	1201683	5	True				
ANR	1201782	ParameterType	const UChar *		1201683	0					
ANR	1201783	Identifier	text_end		1201683	1					
ANR	1201784	Parameter	UChar * text_range	2794:50:68641:68657	1201683	6	True				
ANR	1201785	ParameterType	UChar *		1201683	0					
ANR	1201786	Identifier	text_range		1201683	1					
ANR	1201787	CFGEntryNode	ENTRY		1201683		True				
ANR	1201788	CFGExitNode	EXIT		1201683		True				
ANR	1201789	Symbol	case_fold_flag		1201683						
ANR	1201790	Symbol	s		1201683						
ANR	1201791	Symbol	NULL		1201683						
ANR	1201792	Symbol	str_lower_case_match		1201683						
ANR	1201793	Symbol	target_end		1201683						
ANR	1201794	Symbol	end		1201683						
ANR	1201795	Symbol	enc		1201683						
ANR	1201796	Symbol	text		1201683						
ANR	1201797	Symbol	text_end		1201683						
ANR	1201798	Symbol	text_range		1201683						
ANR	1201799	Symbol	enclen		1201683						
ANR	1201800	Symbol	target		1201683						
ANR	1201801	Function	slow_search_backward	2816:0:68997:69685							
ANR	1201802	FunctionDef	"slow_search_backward (OnigEncoding enc , UChar * target , UChar * target_end , const UChar * text , const UChar * adjust_text , const UChar * text_end , const UChar * text_start)"		1201801	0					
ANR	1201803	CompoundStatement		2820:0:69191:69685	1201801	0					
ANR	1201804	IdentifierDeclStatement	"UChar * t , * p , * s ;"	2821:2:69195:69211	1201801	0	True				
ANR	1201805	IdentifierDecl	* t		1201801	0					
ANR	1201806	IdentifierDeclType	UChar *		1201801	0					
ANR	1201807	Identifier	t		1201801	1					
ANR	1201808	IdentifierDecl	* p		1201801	1					
ANR	1201809	IdentifierDeclType	UChar *		1201801	0					
ANR	1201810	Identifier	p		1201801	1					
ANR	1201811	IdentifierDecl	* s		1201801	2					
ANR	1201812	IdentifierDeclType	UChar *		1201801	0					
ANR	1201813	Identifier	s		1201801	1					
ANR	1201814	ExpressionStatement	s = ( UChar * ) text_end	2823:2:69216:69237	1201801	1	True				
ANR	1201815	AssignmentExpression	s = ( UChar * ) text_end		1201801	0		=			
ANR	1201816	Identifier	s		1201801	0					
ANR	1201817	CastExpression	( UChar * ) text_end		1201801	1					
ANR	1201818	CastTarget	UChar *		1201801	0					
ANR	1201819	Identifier	text_end		1201801	1					
ANR	1201820	ExpressionStatement	s -= ( target_end - target )	2824:2:69241:69267	1201801	2	True				
ANR	1201821	AssignmentExpression	s -= ( target_end - target )		1201801	0		-=			
ANR	1201822	Identifier	s		1201801	0					
ANR	1201823	AdditiveExpression	target_end - target		1201801	1		-			
ANR	1201824	Identifier	target_end		1201801	0					
ANR	1201825	Identifier	target		1201801	1					
ANR	1201826	IfStatement	if ( s > text_start )		1201801	3					
ANR	1201827	Condition	s > text_start	2825:6:69275:69288	1201801	0	True				
ANR	1201828	RelationalExpression	s > text_start		1201801	0		>			
ANR	1201829	Identifier	s		1201801	0					
ANR	1201830	Identifier	text_start		1201801	1					
ANR	1201831	ExpressionStatement	s = ( UChar * ) text_start	2826:4:69295:69318	1201801	1	True				
ANR	1201832	AssignmentExpression	s = ( UChar * ) text_start		1201801	0		=			
ANR	1201833	Identifier	s		1201801	0					
ANR	1201834	CastExpression	( UChar * ) text_start		1201801	1					
ANR	1201835	CastTarget	UChar *		1201801	0					
ANR	1201836	Identifier	text_start		1201801	1					
ANR	1201837	ElseStatement	else		1201801	0					
ANR	1201838	ExpressionStatement	"s = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( enc , adjust_text , s )"	2828:4:69331:69385	1201801	0	True				
ANR	1201839	AssignmentExpression	"s = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( enc , adjust_text , s )"		1201801	0		=			
ANR	1201840	Identifier	s		1201801	0					
ANR	1201841	CallExpression	"ONIGENC_LEFT_ADJUST_CHAR_HEAD ( enc , adjust_text , s )"		1201801	1					
ANR	1201842	Callee	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1201801	0					
ANR	1201843	Identifier	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1201801	0					
ANR	1201844	ArgumentList	enc		1201801	1					
ANR	1201845	Argument	enc		1201801	0					
ANR	1201846	Identifier	enc		1201801	0					
ANR	1201847	Argument	adjust_text		1201801	1					
ANR	1201848	Identifier	adjust_text		1201801	0					
ANR	1201849	Argument	s		1201801	2					
ANR	1201850	Identifier	s		1201801	0					
ANR	1201851	WhileStatement	while ( s >= text )		1201801	4					
ANR	1201852	Condition	s >= text	2830:9:69397:69405	1201801	0	True				
ANR	1201853	RelationalExpression	s >= text		1201801	0		>=			
ANR	1201854	Identifier	s		1201801	0					
ANR	1201855	Identifier	text		1201801	1					
ANR	1201856	CompoundStatement		11:20:216:216	1201801	1					
ANR	1201857	IfStatement	if ( * s == * target )		1201801	0					
ANR	1201858	Condition	* s == * target	2831:8:69418:69430	1201801	0	True				
ANR	1201859	EqualityExpression	* s == * target		1201801	0		==			
ANR	1201860	UnaryOperationExpression	* s		1201801	0					
ANR	1201861	UnaryOperator	*		1201801	0					
ANR	1201862	Identifier	s		1201801	1					
ANR	1201863	UnaryOperationExpression	* target		1201801	1					
ANR	1201864	UnaryOperator	*		1201801	0					
ANR	1201865	Identifier	target		1201801	1					
ANR	1201866	CompoundStatement		12:23:241:241	1201801	1					
ANR	1201867	ExpressionStatement	p = s + 1	2832:6:69441:69450	1201801	0	True				
ANR	1201868	AssignmentExpression	p = s + 1		1201801	0		=			
ANR	1201869	Identifier	p		1201801	0					
ANR	1201870	AdditiveExpression	s + 1		1201801	1		+			
ANR	1201871	Identifier	s		1201801	0					
ANR	1201872	PrimaryExpression	1		1201801	1					
ANR	1201873	ExpressionStatement	t = target + 1	2833:6:69458:69472	1201801	1	True				
ANR	1201874	AssignmentExpression	t = target + 1		1201801	0		=			
ANR	1201875	Identifier	t		1201801	0					
ANR	1201876	AdditiveExpression	target + 1		1201801	1		+			
ANR	1201877	Identifier	target		1201801	0					
ANR	1201878	PrimaryExpression	1		1201801	1					
ANR	1201879	WhileStatement	while ( t < target_end )		1201801	2					
ANR	1201880	Condition	t < target_end	2834:13:69487:69500	1201801	0	True				
ANR	1201881	RelationalExpression	t < target_end		1201801	0		<			
ANR	1201882	Identifier	t		1201801	0					
ANR	1201883	Identifier	target_end		1201801	1					
ANR	1201884	CompoundStatement		15:29:311:311	1201801	1					
ANR	1201885	IfStatement	if ( * t != * p ++ )		1201801	0					
ANR	1201886	Condition	* t != * p ++	2835:5:69510:69519	1201801	0	True				
ANR	1201887	EqualityExpression	* t != * p ++		1201801	0		!=			
ANR	1201888	UnaryOperationExpression	* t		1201801	0					
ANR	1201889	UnaryOperator	*		1201801	0					
ANR	1201890	Identifier	t		1201801	1					
ANR	1201891	UnaryOperationExpression	* p ++		1201801	1					
ANR	1201892	UnaryOperator	*		1201801	0					
ANR	1201893	PostIncDecOperationExpression	p ++		1201801	1					
ANR	1201894	Identifier	p		1201801	0					
ANR	1201895	IncDec	++		1201801	1					
ANR	1201896	BreakStatement	break ;	2836:3:69525:69530	1201801	1	True				
ANR	1201897	ExpressionStatement	t ++	2837:1:69533:69536	1201801	1	True				
ANR	1201898	PostIncDecOperationExpression	t ++		1201801	0					
ANR	1201899	Identifier	t		1201801	0					
ANR	1201900	IncDec	++		1201801	1					
ANR	1201901	IfStatement	if ( t == target_end )		1201801	3					
ANR	1201902	Condition	t == target_end	2839:10:69556:69570	1201801	0	True				
ANR	1201903	EqualityExpression	t == target_end		1201801	0		==			
ANR	1201904	Identifier	t		1201801	0					
ANR	1201905	Identifier	target_end		1201801	1					
ANR	1201906	ReturnStatement	return s ;	2840:1:69574:69582	1201801	1	True				
ANR	1201907	Identifier	s		1201801	0					
ANR	1201908	ExpressionStatement	"s = ( UChar * ) onigenc_get_prev_char_head ( enc , adjust_text , s )"	2842:4:69594:69654	1201801	1	True				
ANR	1201909	AssignmentExpression	"s = ( UChar * ) onigenc_get_prev_char_head ( enc , adjust_text , s )"		1201801	0		=			
ANR	1201910	Identifier	s		1201801	0					
ANR	1201911	CastExpression	"( UChar * ) onigenc_get_prev_char_head ( enc , adjust_text , s )"		1201801	1					
ANR	1201912	CastTarget	UChar *		1201801	0					
ANR	1201913	CallExpression	"onigenc_get_prev_char_head ( enc , adjust_text , s )"		1201801	1					
ANR	1201914	Callee	onigenc_get_prev_char_head		1201801	0					
ANR	1201915	Identifier	onigenc_get_prev_char_head		1201801	0					
ANR	1201916	ArgumentList	enc		1201801	1					
ANR	1201917	Argument	enc		1201801	0					
ANR	1201918	Identifier	enc		1201801	0					
ANR	1201919	Argument	adjust_text		1201801	1					
ANR	1201920	Identifier	adjust_text		1201801	0					
ANR	1201921	Argument	s		1201801	2					
ANR	1201922	Identifier	s		1201801	0					
ANR	1201923	ReturnStatement	return ( UChar * ) NULL ;	2845:2:69663:69683	1201801	5	True				
ANR	1201924	CastExpression	( UChar * ) NULL		1201801	0					
ANR	1201925	CastTarget	UChar *		1201801	0					
ANR	1201926	Identifier	NULL		1201801	1					
ANR	1201927	ReturnType	static UChar *		1201801	1					
ANR	1201928	Identifier	slow_search_backward		1201801	2					
ANR	1201929	ParameterList	"OnigEncoding enc , UChar * target , UChar * target_end , const UChar * text , const UChar * adjust_text , const UChar * text_end , const UChar * text_start"		1201801	3					
ANR	1201930	Parameter	OnigEncoding enc	2817:21:69032:69047	1201801	0	True				
ANR	1201931	ParameterType	OnigEncoding		1201801	0					
ANR	1201932	Identifier	enc		1201801	1					
ANR	1201933	Parameter	UChar * target	2817:39:69050:69062	1201801	1	True				
ANR	1201934	ParameterType	UChar *		1201801	0					
ANR	1201935	Identifier	target		1201801	1					
ANR	1201936	Parameter	UChar * target_end	2817:54:69065:69081	1201801	2	True				
ANR	1201937	ParameterType	UChar *		1201801	0					
ANR	1201938	Identifier	target_end		1201801	1					
ANR	1201939	Parameter	const UChar * text	2818:7:69091:69107	1201801	3	True				
ANR	1201940	ParameterType	const UChar *		1201801	0					
ANR	1201941	Identifier	text		1201801	1					
ANR	1201942	Parameter	const UChar * adjust_text	2818:26:69110:69133	1201801	4	True				
ANR	1201943	ParameterType	const UChar *		1201801	0					
ANR	1201944	Identifier	adjust_text		1201801	1					
ANR	1201945	Parameter	const UChar * text_end	2819:7:69143:69163	1201801	5	True				
ANR	1201946	ParameterType	const UChar *		1201801	0					
ANR	1201947	Identifier	text_end		1201801	1					
ANR	1201948	Parameter	const UChar * text_start	2819:30:69166:69188	1201801	6	True				
ANR	1201949	ParameterType	const UChar *		1201801	0					
ANR	1201950	Identifier	text_start		1201801	1					
ANR	1201951	CFGEntryNode	ENTRY		1201801		True				
ANR	1201952	CFGExitNode	EXIT		1201801		True				
ANR	1201953	Symbol	NULL		1201801						
ANR	1201954	Symbol	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1201801						
ANR	1201955	Symbol	* p ++		1201801						
ANR	1201956	Symbol	target_end		1201801						
ANR	1201957	Symbol	onigenc_get_prev_char_head		1201801						
ANR	1201958	Symbol	target		1201801						
ANR	1201959	Symbol	p		1201801						
ANR	1201960	Symbol	* target		1201801						
ANR	1201961	Symbol	s		1201801						
ANR	1201962	Symbol	t		1201801						
ANR	1201963	Symbol	adjust_text		1201801						
ANR	1201964	Symbol	enc		1201801						
ANR	1201965	Symbol	text		1201801						
ANR	1201966	Symbol	text_end		1201801						
ANR	1201967	Symbol	* s		1201801						
ANR	1201968	Symbol	text_start		1201801						
ANR	1201969	Symbol	* t		1201801						
ANR	1201970	Function	slow_search_backward_ic	2848:0:69688:70336							
ANR	1201971	FunctionDef	"slow_search_backward_ic (OnigEncoding enc , int case_fold_flag , UChar * target , UChar * target_end , const UChar * text , const UChar * adjust_text , const UChar * text_end , const UChar * text_start)"		1201970	0					
ANR	1201972	CompoundStatement		2853:0:69900:70336	1201970	0					
ANR	1201973	IdentifierDeclStatement	UChar * s ;	2854:2:69904:69912	1201970	0	True				
ANR	1201974	IdentifierDecl	* s		1201970	0					
ANR	1201975	IdentifierDeclType	UChar *		1201970	0					
ANR	1201976	Identifier	s		1201970	1					
ANR	1201977	ExpressionStatement	s = ( UChar * ) text_end	2856:2:69917:69938	1201970	1	True				
ANR	1201978	AssignmentExpression	s = ( UChar * ) text_end		1201970	0		=			
ANR	1201979	Identifier	s		1201970	0					
ANR	1201980	CastExpression	( UChar * ) text_end		1201970	1					
ANR	1201981	CastTarget	UChar *		1201970	0					
ANR	1201982	Identifier	text_end		1201970	1					
ANR	1201983	ExpressionStatement	s -= ( target_end - target )	2857:2:69942:69968	1201970	2	True				
ANR	1201984	AssignmentExpression	s -= ( target_end - target )		1201970	0		-=			
ANR	1201985	Identifier	s		1201970	0					
ANR	1201986	AdditiveExpression	target_end - target		1201970	1		-			
ANR	1201987	Identifier	target_end		1201970	0					
ANR	1201988	Identifier	target		1201970	1					
ANR	1201989	IfStatement	if ( s > text_start )		1201970	3					
ANR	1201990	Condition	s > text_start	2858:6:69976:69989	1201970	0	True				
ANR	1201991	RelationalExpression	s > text_start		1201970	0		>			
ANR	1201992	Identifier	s		1201970	0					
ANR	1201993	Identifier	text_start		1201970	1					
ANR	1201994	ExpressionStatement	s = ( UChar * ) text_start	2859:4:69996:70019	1201970	1	True				
ANR	1201995	AssignmentExpression	s = ( UChar * ) text_start		1201970	0		=			
ANR	1201996	Identifier	s		1201970	0					
ANR	1201997	CastExpression	( UChar * ) text_start		1201970	1					
ANR	1201998	CastTarget	UChar *		1201970	0					
ANR	1201999	Identifier	text_start		1201970	1					
ANR	1202000	ElseStatement	else		1201970	0					
ANR	1202001	ExpressionStatement	"s = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( enc , adjust_text , s )"	2861:4:70032:70086	1201970	0	True				
ANR	1202002	AssignmentExpression	"s = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( enc , adjust_text , s )"		1201970	0		=			
ANR	1202003	Identifier	s		1201970	0					
ANR	1202004	CallExpression	"ONIGENC_LEFT_ADJUST_CHAR_HEAD ( enc , adjust_text , s )"		1201970	1					
ANR	1202005	Callee	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1201970	0					
ANR	1202006	Identifier	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1201970	0					
ANR	1202007	ArgumentList	enc		1201970	1					
ANR	1202008	Argument	enc		1201970	0					
ANR	1202009	Identifier	enc		1201970	0					
ANR	1202010	Argument	adjust_text		1201970	1					
ANR	1202011	Identifier	adjust_text		1201970	0					
ANR	1202012	Argument	s		1201970	2					
ANR	1202013	Identifier	s		1201970	0					
ANR	1202014	WhileStatement	while ( s >= text )		1201970	4					
ANR	1202015	Condition	s >= text	2863:9:70098:70106	1201970	0	True				
ANR	1202016	RelationalExpression	s >= text		1201970	0		>=			
ANR	1202017	Identifier	s		1201970	0					
ANR	1202018	Identifier	text		1201970	1					
ANR	1202019	CompoundStatement		11:20:208:208	1201970	1					
ANR	1202020	IfStatement	"if ( str_lower_case_match ( enc , case_fold_flag , target , target_end , s , text_end ) )"		1201970	0					
ANR	1202021	Condition	"str_lower_case_match ( enc , case_fold_flag , target , target_end , s , text_end )"	2864:8:70119:70221	1201970	0	True				
ANR	1202022	CallExpression	"str_lower_case_match ( enc , case_fold_flag , target , target_end , s , text_end )"		1201970	0					
ANR	1202023	Callee	str_lower_case_match		1201970	0					
ANR	1202024	Identifier	str_lower_case_match		1201970	0					
ANR	1202025	ArgumentList	enc		1201970	1					
ANR	1202026	Argument	enc		1201970	0					
ANR	1202027	Identifier	enc		1201970	0					
ANR	1202028	Argument	case_fold_flag		1201970	1					
ANR	1202029	Identifier	case_fold_flag		1201970	0					
ANR	1202030	Argument	target		1201970	2					
ANR	1202031	Identifier	target		1201970	0					
ANR	1202032	Argument	target_end		1201970	3					
ANR	1202033	Identifier	target_end		1201970	0					
ANR	1202034	Argument	s		1201970	4					
ANR	1202035	Identifier	s		1201970	0					
ANR	1202036	Argument	text_end		1201970	5					
ANR	1202037	Identifier	text_end		1201970	0					
ANR	1202038	ReturnStatement	return s ;	2866:6:70230:70238	1201970	1	True				
ANR	1202039	Identifier	s		1201970	0					
ANR	1202040	ExpressionStatement	"s = ( UChar * ) onigenc_get_prev_char_head ( enc , adjust_text , s )"	2868:4:70245:70305	1201970	1	True				
ANR	1202041	AssignmentExpression	"s = ( UChar * ) onigenc_get_prev_char_head ( enc , adjust_text , s )"		1201970	0		=			
ANR	1202042	Identifier	s		1201970	0					
ANR	1202043	CastExpression	"( UChar * ) onigenc_get_prev_char_head ( enc , adjust_text , s )"		1201970	1					
ANR	1202044	CastTarget	UChar *		1201970	0					
ANR	1202045	CallExpression	"onigenc_get_prev_char_head ( enc , adjust_text , s )"		1201970	1					
ANR	1202046	Callee	onigenc_get_prev_char_head		1201970	0					
ANR	1202047	Identifier	onigenc_get_prev_char_head		1201970	0					
ANR	1202048	ArgumentList	enc		1201970	1					
ANR	1202049	Argument	enc		1201970	0					
ANR	1202050	Identifier	enc		1201970	0					
ANR	1202051	Argument	adjust_text		1201970	1					
ANR	1202052	Identifier	adjust_text		1201970	0					
ANR	1202053	Argument	s		1201970	2					
ANR	1202054	Identifier	s		1201970	0					
ANR	1202055	ReturnStatement	return ( UChar * ) NULL ;	2871:2:70314:70334	1201970	5	True				
ANR	1202056	CastExpression	( UChar * ) NULL		1201970	0					
ANR	1202057	CastTarget	UChar *		1201970	0					
ANR	1202058	Identifier	NULL		1201970	1					
ANR	1202059	ReturnType	static UChar *		1201970	1					
ANR	1202060	Identifier	slow_search_backward_ic		1201970	2					
ANR	1202061	ParameterList	"OnigEncoding enc , int case_fold_flag , UChar * target , UChar * target_end , const UChar * text , const UChar * adjust_text , const UChar * text_end , const UChar * text_start"		1201970	3					
ANR	1202062	Parameter	OnigEncoding enc	2849:24:69726:69741	1201970	0	True				
ANR	1202063	ParameterType	OnigEncoding		1201970	0					
ANR	1202064	Identifier	enc		1201970	1					
ANR	1202065	Parameter	int case_fold_flag	2849:42:69744:69761	1201970	1	True				
ANR	1202066	ParameterType	int		1201970	0					
ANR	1202067	Identifier	case_fold_flag		1201970	1					
ANR	1202068	Parameter	UChar * target	2850:3:69767:69779	1201970	2	True				
ANR	1202069	ParameterType	UChar *		1201970	0					
ANR	1202070	Identifier	target		1201970	1					
ANR	1202071	Parameter	UChar * target_end	2850:18:69782:69798	1201970	3	True				
ANR	1202072	ParameterType	UChar *		1201970	0					
ANR	1202073	Identifier	target_end		1201970	1					
ANR	1202074	Parameter	const UChar * text	2851:3:69804:69820	1201970	4	True				
ANR	1202075	ParameterType	const UChar *		1201970	0					
ANR	1202076	Identifier	text		1201970	1					
ANR	1202077	Parameter	const UChar * adjust_text	2851:22:69823:69846	1201970	5	True				
ANR	1202078	ParameterType	const UChar *		1201970	0					
ANR	1202079	Identifier	adjust_text		1201970	1					
ANR	1202080	Parameter	const UChar * text_end	2852:3:69852:69872	1201970	6	True				
ANR	1202081	ParameterType	const UChar *		1201970	0					
ANR	1202082	Identifier	text_end		1201970	1					
ANR	1202083	Parameter	const UChar * text_start	2852:26:69875:69897	1201970	7	True				
ANR	1202084	ParameterType	const UChar *		1201970	0					
ANR	1202085	Identifier	text_start		1201970	1					
ANR	1202086	CFGEntryNode	ENTRY		1201970		True				
ANR	1202087	CFGExitNode	EXIT		1201970		True				
ANR	1202088	Symbol	NULL		1201970						
ANR	1202089	Symbol	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1201970						
ANR	1202090	Symbol	target_end		1201970						
ANR	1202091	Symbol	onigenc_get_prev_char_head		1201970						
ANR	1202092	Symbol	target		1201970						
ANR	1202093	Symbol	case_fold_flag		1201970						
ANR	1202094	Symbol	s		1201970						
ANR	1202095	Symbol	str_lower_case_match		1201970						
ANR	1202096	Symbol	adjust_text		1201970						
ANR	1202097	Symbol	enc		1201970						
ANR	1202098	Symbol	text		1201970						
ANR	1202099	Symbol	text_end		1201970						
ANR	1202100	Symbol	text_start		1201970						
ANR	1202101	Function	bm_search_notrev	2874:0:70339:71525							
ANR	1202102	FunctionDef	"bm_search_notrev (regex_t * reg , const UChar * target , const UChar * target_end , const UChar * text , const UChar * text_end , const UChar * text_range)"		1202101	0					
ANR	1202103	CompoundStatement		2878:0:70503:71525	1202101	0					
ANR	1202104	IdentifierDeclStatement	"const UChar * s , * se , * t , * p , * end ;"	2879:2:70507:70540	1202101	0	True				
ANR	1202105	IdentifierDecl	* s		1202101	0					
ANR	1202106	IdentifierDeclType	const UChar *		1202101	0					
ANR	1202107	Identifier	s		1202101	1					
ANR	1202108	IdentifierDecl	* se		1202101	1					
ANR	1202109	IdentifierDeclType	const UChar *		1202101	0					
ANR	1202110	Identifier	se		1202101	1					
ANR	1202111	IdentifierDecl	* t		1202101	2					
ANR	1202112	IdentifierDeclType	const UChar *		1202101	0					
ANR	1202113	Identifier	t		1202101	1					
ANR	1202114	IdentifierDecl	* p		1202101	3					
ANR	1202115	IdentifierDeclType	const UChar *		1202101	0					
ANR	1202116	Identifier	p		1202101	1					
ANR	1202117	IdentifierDecl	* end		1202101	4					
ANR	1202118	IdentifierDeclType	const UChar *		1202101	0					
ANR	1202119	Identifier	end		1202101	1					
ANR	1202120	IdentifierDeclStatement	const UChar * tail ;	2880:2:70544:70561	1202101	1	True				
ANR	1202121	IdentifierDecl	* tail		1202101	0					
ANR	1202122	IdentifierDeclType	const UChar *		1202101	0					
ANR	1202123	Identifier	tail		1202101	1					
ANR	1202124	IdentifierDeclStatement	"int skip , tlen1 ;"	2881:2:70565:70580	1202101	2	True				
ANR	1202125	IdentifierDecl	skip		1202101	0					
ANR	1202126	IdentifierDeclType	int		1202101	0					
ANR	1202127	Identifier	skip		1202101	1					
ANR	1202128	IdentifierDecl	tlen1		1202101	1					
ANR	1202129	IdentifierDeclType	int		1202101	0					
ANR	1202130	Identifier	tlen1		1202101	1					
ANR	1202131	ExpressionStatement	"fprintf ( stderr , ""bm_search_notrev: text: %d, text_end: %d, text_range: %d\\n"" , ( int ) text , ( int ) text_end , ( int ) text_range )"	2884:2:70610:70736	1202101	3	True				
ANR	1202132	CallExpression	"fprintf ( stderr , ""bm_search_notrev: text: %d, text_end: %d, text_range: %d\\n"" , ( int ) text , ( int ) text_end , ( int ) text_range )"		1202101	0					
ANR	1202133	Callee	fprintf		1202101	0					
ANR	1202134	Identifier	fprintf		1202101	0					
ANR	1202135	ArgumentList	stderr		1202101	1					
ANR	1202136	Argument	stderr		1202101	0					
ANR	1202137	Identifier	stderr		1202101	0					
ANR	1202138	Argument	"""bm_search_notrev: text: %d, text_end: %d, text_range: %d\\n"""		1202101	1					
ANR	1202139	PrimaryExpression	"""bm_search_notrev: text: %d, text_end: %d, text_range: %d\\n"""		1202101	0					
ANR	1202140	Argument	( int ) text		1202101	2					
ANR	1202141	CastExpression	( int ) text		1202101	0					
ANR	1202142	CastTarget	int		1202101	0					
ANR	1202143	Identifier	text		1202101	1					
ANR	1202144	Argument	( int ) text_end		1202101	3					
ANR	1202145	CastExpression	( int ) text_end		1202101	0					
ANR	1202146	CastTarget	int		1202101	0					
ANR	1202147	Identifier	text_end		1202101	1					
ANR	1202148	Argument	( int ) text_range		1202101	4					
ANR	1202149	CastExpression	( int ) text_range		1202101	0					
ANR	1202150	CastTarget	int		1202101	0					
ANR	1202151	Identifier	text_range		1202101	1					
ANR	1202152	ExpressionStatement	tail = target_end - 1	2888:2:70748:70769	1202101	4	True				
ANR	1202153	AssignmentExpression	tail = target_end - 1		1202101	0		=			
ANR	1202154	Identifier	tail		1202101	0					
ANR	1202155	AdditiveExpression	target_end - 1		1202101	1		-			
ANR	1202156	Identifier	target_end		1202101	0					
ANR	1202157	PrimaryExpression	1		1202101	1					
ANR	1202158	ExpressionStatement	tlen1 = tail - target	2889:2:70773:70794	1202101	5	True				
ANR	1202159	AssignmentExpression	tlen1 = tail - target		1202101	0		=			
ANR	1202160	Identifier	tlen1		1202101	0					
ANR	1202161	AdditiveExpression	tail - target		1202101	1		-			
ANR	1202162	Identifier	tail		1202101	0					
ANR	1202163	Identifier	target		1202101	1					
ANR	1202164	ExpressionStatement	end = text_range	2890:2:70798:70814	1202101	6	True				
ANR	1202165	AssignmentExpression	end = text_range		1202101	0		=			
ANR	1202166	Identifier	end		1202101	0					
ANR	1202167	Identifier	text_range		1202101	1					
ANR	1202168	IfStatement	if ( end + tlen1 > text_end )		1202101	7					
ANR	1202169	Condition	end + tlen1 > text_end	2891:6:70822:70843	1202101	0	True				
ANR	1202170	RelationalExpression	end + tlen1 > text_end		1202101	0		>			
ANR	1202171	AdditiveExpression	end + tlen1		1202101	0		+			
ANR	1202172	Identifier	end		1202101	0					
ANR	1202173	Identifier	tlen1		1202101	1					
ANR	1202174	Identifier	text_end		1202101	1					
ANR	1202175	ExpressionStatement	end = text_end - tlen1	2892:4:70850:70872	1202101	1	True				
ANR	1202176	AssignmentExpression	end = text_end - tlen1		1202101	0		=			
ANR	1202177	Identifier	end		1202101	0					
ANR	1202178	AdditiveExpression	text_end - tlen1		1202101	1		-			
ANR	1202179	Identifier	text_end		1202101	0					
ANR	1202180	Identifier	tlen1		1202101	1					
ANR	1202181	ExpressionStatement	s = text	2894:2:70877:70885	1202101	8	True				
ANR	1202182	AssignmentExpression	s = text		1202101	0		=			
ANR	1202183	Identifier	s		1202101	0					
ANR	1202184	Identifier	text		1202101	1					
ANR	1202185	IfStatement	if ( IS_NULL ( reg -> int_map ) )		1202101	9					
ANR	1202186	Condition	IS_NULL ( reg -> int_map )	2896:6:70894:70914	1202101	0	True				
ANR	1202187	CallExpression	IS_NULL ( reg -> int_map )		1202101	0					
ANR	1202188	Callee	IS_NULL		1202101	0					
ANR	1202189	Identifier	IS_NULL		1202101	0					
ANR	1202190	ArgumentList	reg -> int_map		1202101	1					
ANR	1202191	Argument	reg -> int_map		1202101	0					
ANR	1202192	PtrMemberAccess	reg -> int_map		1202101	0					
ANR	1202193	Identifier	reg		1202101	0					
ANR	1202194	Identifier	int_map		1202101	1					
ANR	1202195	CompoundStatement		19:29:413:413	1202101	1					
ANR	1202196	WhileStatement	while ( s < end )		1202101	0					
ANR	1202197	Condition	s < end	2897:11:70930:70936	1202101	0	True				
ANR	1202198	RelationalExpression	s < end		1202101	0		<			
ANR	1202199	Identifier	s		1202101	0					
ANR	1202200	Identifier	end		1202101	1					
ANR	1202201	CompoundStatement		20:20:435:435	1202101	1					
ANR	1202202	ExpressionStatement	p = se = s + tlen1	2898:6:70947:70965	1202101	0	True				
ANR	1202203	AssignmentExpression	p = se = s + tlen1		1202101	0		=			
ANR	1202204	Identifier	p		1202101	0					
ANR	1202205	AssignmentExpression	se = s + tlen1		1202101	1		=			
ANR	1202206	Identifier	se		1202101	0					
ANR	1202207	AdditiveExpression	s + tlen1		1202101	1		+			
ANR	1202208	Identifier	s		1202101	0					
ANR	1202209	Identifier	tlen1		1202101	1					
ANR	1202210	ExpressionStatement	t = tail	2899:6:70973:70981	1202101	1	True				
ANR	1202211	AssignmentExpression	t = tail		1202101	0		=			
ANR	1202212	Identifier	t		1202101	0					
ANR	1202213	Identifier	tail		1202101	1					
ANR	1202214	WhileStatement	while ( * p == * t )		1202101	2					
ANR	1202215	Condition	* p == * t	2900:13:70996:71003	1202101	0	True				
ANR	1202216	EqualityExpression	* p == * t		1202101	0		==			
ANR	1202217	UnaryOperationExpression	* p		1202101	0					
ANR	1202218	UnaryOperator	*		1202101	0					
ANR	1202219	Identifier	p		1202101	1					
ANR	1202220	UnaryOperationExpression	* t		1202101	1					
ANR	1202221	UnaryOperator	*		1202101	0					
ANR	1202222	Identifier	t		1202101	1					
ANR	1202223	CompoundStatement		23:23:502:502	1202101	1					
ANR	1202224	IfStatement	if ( t == target )		1202101	0					
ANR	1202225	Condition	t == target	2901:5:71013:71023	1202101	0	True				
ANR	1202226	EqualityExpression	t == target		1202101	0		==			
ANR	1202227	Identifier	t		1202101	0					
ANR	1202228	Identifier	target		1202101	1					
ANR	1202229	ReturnStatement	return ( UChar * ) s ;	2901:18:71026:71043	1202101	1	True				
ANR	1202230	CastExpression	( UChar * ) s		1202101	0					
ANR	1202231	CastTarget	UChar *		1202101	0					
ANR	1202232	Identifier	s		1202101	1					
ANR	1202233	ExpressionStatement	p --	2902:1:71046:71049	1202101	1	True				
ANR	1202234	PostIncDecOperationExpression	p --		1202101	0					
ANR	1202235	Identifier	p		1202101	0					
ANR	1202236	IncDec	--		1202101	1					
ANR	1202237	ExpressionStatement	t --	2902:6:71051:71054	1202101	2	True				
ANR	1202238	PostIncDecOperationExpression	t --		1202101	0					
ANR	1202239	Identifier	t		1202101	0					
ANR	1202240	IncDec	--		1202101	1					
ANR	1202241	ExpressionStatement	skip = reg -> map [ * se ]	2904:6:71070:71090	1202101	3	True				
ANR	1202242	AssignmentExpression	skip = reg -> map [ * se ]		1202101	0		=			
ANR	1202243	Identifier	skip		1202101	0					
ANR	1202244	ArrayIndexing	reg -> map [ * se ]		1202101	1					
ANR	1202245	PtrMemberAccess	reg -> map		1202101	0					
ANR	1202246	Identifier	reg		1202101	0					
ANR	1202247	Identifier	map		1202101	1					
ANR	1202248	UnaryOperationExpression	* se		1202101	1					
ANR	1202249	UnaryOperator	*		1202101	0					
ANR	1202250	Identifier	se		1202101	1					
ANR	1202251	ExpressionStatement	t = s	2905:6:71098:71103	1202101	4	True				
ANR	1202252	AssignmentExpression	t = s		1202101	0		=			
ANR	1202253	Identifier	t		1202101	0					
ANR	1202254	Identifier	s		1202101	1					
ANR	1202255	DoStatement	do		1202101	5					
ANR	1202256	CompoundStatement		29:9:610:610	1202101	0					
ANR	1202257	ExpressionStatement	"s += enclen ( reg -> enc , s )"	2907:8:71124:71148	1202101	0	True				
ANR	1202258	AssignmentExpression	"s += enclen ( reg -> enc , s )"		1202101	0		+=			
ANR	1202259	Identifier	s		1202101	0					
ANR	1202260	CallExpression	"enclen ( reg -> enc , s )"		1202101	1					
ANR	1202261	Callee	enclen		1202101	0					
ANR	1202262	Identifier	enclen		1202101	0					
ANR	1202263	ArgumentList	reg -> enc		1202101	1					
ANR	1202264	Argument	reg -> enc		1202101	0					
ANR	1202265	PtrMemberAccess	reg -> enc		1202101	0					
ANR	1202266	Identifier	reg		1202101	0					
ANR	1202267	Identifier	enc		1202101	1					
ANR	1202268	Argument	s		1202101	1					
ANR	1202269	Identifier	s		1202101	0					
ANR	1202270	Condition	( s - t ) < skip && s < end	2908:15:71165:71189	1202101	1	True				
ANR	1202271	AndExpression	( s - t ) < skip && s < end		1202101	0		&&			
ANR	1202272	RelationalExpression	( s - t ) < skip		1202101	0		<			
ANR	1202273	AdditiveExpression	s - t		1202101	0		-			
ANR	1202274	Identifier	s		1202101	0					
ANR	1202275	Identifier	t		1202101	1					
ANR	1202276	Identifier	skip		1202101	1					
ANR	1202277	RelationalExpression	s < end		1202101	1		<			
ANR	1202278	Identifier	s		1202101	0					
ANR	1202279	Identifier	end		1202101	1					
ANR	1202280	ElseStatement	else		1202101	0					
ANR	1202281	CompoundStatement		34:7:706:706	1202101	0					
ANR	1202282	WhileStatement	while ( s < end )		1202101	0					
ANR	1202283	Condition	s < end	2912:11:71223:71229	1202101	0	True				
ANR	1202284	RelationalExpression	s < end		1202101	0		<			
ANR	1202285	Identifier	s		1202101	0					
ANR	1202286	Identifier	end		1202101	1					
ANR	1202287	CompoundStatement		35:20:728:728	1202101	1					
ANR	1202288	ExpressionStatement	p = se = s + tlen1	2913:6:71240:71258	1202101	0	True				
ANR	1202289	AssignmentExpression	p = se = s + tlen1		1202101	0		=			
ANR	1202290	Identifier	p		1202101	0					
ANR	1202291	AssignmentExpression	se = s + tlen1		1202101	1		=			
ANR	1202292	Identifier	se		1202101	0					
ANR	1202293	AdditiveExpression	s + tlen1		1202101	1		+			
ANR	1202294	Identifier	s		1202101	0					
ANR	1202295	Identifier	tlen1		1202101	1					
ANR	1202296	ExpressionStatement	t = tail	2914:6:71266:71274	1202101	1	True				
ANR	1202297	AssignmentExpression	t = tail		1202101	0		=			
ANR	1202298	Identifier	t		1202101	0					
ANR	1202299	Identifier	tail		1202101	1					
ANR	1202300	WhileStatement	while ( * p == * t )		1202101	2					
ANR	1202301	Condition	* p == * t	2915:13:71289:71296	1202101	0	True				
ANR	1202302	EqualityExpression	* p == * t		1202101	0		==			
ANR	1202303	UnaryOperationExpression	* p		1202101	0					
ANR	1202304	UnaryOperator	*		1202101	0					
ANR	1202305	Identifier	p		1202101	1					
ANR	1202306	UnaryOperationExpression	* t		1202101	1					
ANR	1202307	UnaryOperator	*		1202101	0					
ANR	1202308	Identifier	t		1202101	1					
ANR	1202309	CompoundStatement		38:23:795:795	1202101	1					
ANR	1202310	IfStatement	if ( t == target )		1202101	0					
ANR	1202311	Condition	t == target	2916:5:71306:71316	1202101	0	True				
ANR	1202312	EqualityExpression	t == target		1202101	0		==			
ANR	1202313	Identifier	t		1202101	0					
ANR	1202314	Identifier	target		1202101	1					
ANR	1202315	ReturnStatement	return ( UChar * ) s ;	2916:18:71319:71336	1202101	1	True				
ANR	1202316	CastExpression	( UChar * ) s		1202101	0					
ANR	1202317	CastTarget	UChar *		1202101	0					
ANR	1202318	Identifier	s		1202101	1					
ANR	1202319	ExpressionStatement	p --	2917:1:71339:71342	1202101	1	True				
ANR	1202320	PostIncDecOperationExpression	p --		1202101	0					
ANR	1202321	Identifier	p		1202101	0					
ANR	1202322	IncDec	--		1202101	1					
ANR	1202323	ExpressionStatement	t --	2917:6:71344:71347	1202101	2	True				
ANR	1202324	PostIncDecOperationExpression	t --		1202101	0					
ANR	1202325	Identifier	t		1202101	0					
ANR	1202326	IncDec	--		1202101	1					
ANR	1202327	ExpressionStatement	skip = reg -> int_map [ * se ]	2919:6:71363:71387	1202101	3	True				
ANR	1202328	AssignmentExpression	skip = reg -> int_map [ * se ]		1202101	0		=			
ANR	1202329	Identifier	skip		1202101	0					
ANR	1202330	ArrayIndexing	reg -> int_map [ * se ]		1202101	1					
ANR	1202331	PtrMemberAccess	reg -> int_map		1202101	0					
ANR	1202332	Identifier	reg		1202101	0					
ANR	1202333	Identifier	int_map		1202101	1					
ANR	1202334	UnaryOperationExpression	* se		1202101	1					
ANR	1202335	UnaryOperator	*		1202101	0					
ANR	1202336	Identifier	se		1202101	1					
ANR	1202337	ExpressionStatement	t = s	2920:6:71395:71400	1202101	4	True				
ANR	1202338	AssignmentExpression	t = s		1202101	0		=			
ANR	1202339	Identifier	t		1202101	0					
ANR	1202340	Identifier	s		1202101	1					
ANR	1202341	DoStatement	do		1202101	5					
ANR	1202342	CompoundStatement		44:9:907:907	1202101	0					
ANR	1202343	ExpressionStatement	"s += enclen ( reg -> enc , s )"	2922:8:71421:71445	1202101	0	True				
ANR	1202344	AssignmentExpression	"s += enclen ( reg -> enc , s )"		1202101	0		+=			
ANR	1202345	Identifier	s		1202101	0					
ANR	1202346	CallExpression	"enclen ( reg -> enc , s )"		1202101	1					
ANR	1202347	Callee	enclen		1202101	0					
ANR	1202348	Identifier	enclen		1202101	0					
ANR	1202349	ArgumentList	reg -> enc		1202101	1					
ANR	1202350	Argument	reg -> enc		1202101	0					
ANR	1202351	PtrMemberAccess	reg -> enc		1202101	0					
ANR	1202352	Identifier	reg		1202101	0					
ANR	1202353	Identifier	enc		1202101	1					
ANR	1202354	Argument	s		1202101	1					
ANR	1202355	Identifier	s		1202101	0					
ANR	1202356	Condition	( s - t ) < skip && s < end	2923:15:71462:71486	1202101	1	True				
ANR	1202357	AndExpression	( s - t ) < skip && s < end		1202101	0		&&			
ANR	1202358	RelationalExpression	( s - t ) < skip		1202101	0		<			
ANR	1202359	AdditiveExpression	s - t		1202101	0		-			
ANR	1202360	Identifier	s		1202101	0					
ANR	1202361	Identifier	t		1202101	1					
ANR	1202362	Identifier	skip		1202101	1					
ANR	1202363	RelationalExpression	s < end		1202101	1		<			
ANR	1202364	Identifier	s		1202101	0					
ANR	1202365	Identifier	end		1202101	1					
ANR	1202366	ReturnStatement	return ( UChar * ) NULL ;	2927:2:71503:71523	1202101	10	True				
ANR	1202367	CastExpression	( UChar * ) NULL		1202101	0					
ANR	1202368	CastTarget	UChar *		1202101	0					
ANR	1202369	Identifier	NULL		1202101	1					
ANR	1202370	ReturnType	static UChar *		1202101	1					
ANR	1202371	Identifier	bm_search_notrev		1202101	2					
ANR	1202372	ParameterList	"regex_t * reg , const UChar * target , const UChar * target_end , const UChar * text , const UChar * text_end , const UChar * text_range"		1202101	3					
ANR	1202373	Parameter	regex_t * reg	2875:17:70370:70381	1202101	0	True				
ANR	1202374	ParameterType	regex_t *		1202101	0					
ANR	1202375	Identifier	reg		1202101	1					
ANR	1202376	Parameter	const UChar * target	2875:31:70384:70402	1202101	1	True				
ANR	1202377	ParameterType	const UChar *		1202101	0					
ANR	1202378	Identifier	target		1202101	1					
ANR	1202379	Parameter	const UChar * target_end	2875:52:70405:70427	1202101	2	True				
ANR	1202380	ParameterType	const UChar *		1202101	0					
ANR	1202381	Identifier	target_end		1202101	1					
ANR	1202382	Parameter	const UChar * text	2876:3:70433:70449	1202101	3	True				
ANR	1202383	ParameterType	const UChar *		1202101	0					
ANR	1202384	Identifier	text		1202101	1					
ANR	1202385	Parameter	const UChar * text_end	2876:22:70452:70472	1202101	4	True				
ANR	1202386	ParameterType	const UChar *		1202101	0					
ANR	1202387	Identifier	text_end		1202101	1					
ANR	1202388	Parameter	const UChar * text_range	2877:3:70478:70500	1202101	5	True				
ANR	1202389	ParameterType	const UChar *		1202101	0					
ANR	1202390	Identifier	text_range		1202101	1					
ANR	1202391	CFGEntryNode	ENTRY		1202101		True				
ANR	1202392	CFGExitNode	EXIT		1202101		True				
ANR	1202393	Symbol	skip		1202101						
ANR	1202394	Symbol	se		1202101						
ANR	1202395	Symbol	IS_NULL		1202101						
ANR	1202396	Symbol	reg		1202101						
ANR	1202397	Symbol	end		1202101						
ANR	1202398	Symbol	text		1202101						
ANR	1202399	Symbol	* se		1202101						
ANR	1202400	Symbol	text_range		1202101						
ANR	1202401	Symbol	reg -> map		1202101						
ANR	1202402	Symbol	NULL		1202101						
ANR	1202403	Symbol	tlen1		1202101						
ANR	1202404	Symbol	tail		1202101						
ANR	1202405	Symbol	target_end		1202101						
ANR	1202406	Symbol	* * reg		1202101						
ANR	1202407	Symbol	* reg -> int_map		1202101						
ANR	1202408	Symbol	stderr		1202101						
ANR	1202409	Symbol	enclen		1202101						
ANR	1202410	Symbol	target		1202101						
ANR	1202411	Symbol	reg -> enc		1202101						
ANR	1202412	Symbol	p		1202101						
ANR	1202413	Symbol	reg -> int_map		1202101						
ANR	1202414	Symbol	s		1202101						
ANR	1202415	Symbol	t		1202101						
ANR	1202416	Symbol	* p		1202101						
ANR	1202417	Symbol	text_end		1202101						
ANR	1202418	Symbol	* reg -> map		1202101						
ANR	1202419	Symbol	* * se		1202101						
ANR	1202420	Symbol	* reg		1202101						
ANR	1202421	Symbol	* t		1202101						
ANR	1202422	Function	bm_search	2930:0:71528:72316							
ANR	1202423	FunctionDef	"bm_search (regex_t * reg , const UChar * target , const UChar * target_end , const UChar * text , const UChar * text_end , const UChar * text_range)"		1202422	0					
ANR	1202424	CompoundStatement		2933:0:71682:72316	1202422	0					
ANR	1202425	IdentifierDeclStatement	"const UChar * s , * t , * p , * end ;"	2934:2:71686:71714	1202422	0	True				
ANR	1202426	IdentifierDecl	* s		1202422	0					
ANR	1202427	IdentifierDeclType	const UChar *		1202422	0					
ANR	1202428	Identifier	s		1202422	1					
ANR	1202429	IdentifierDecl	* t		1202422	1					
ANR	1202430	IdentifierDeclType	const UChar *		1202422	0					
ANR	1202431	Identifier	t		1202422	1					
ANR	1202432	IdentifierDecl	* p		1202422	2					
ANR	1202433	IdentifierDeclType	const UChar *		1202422	0					
ANR	1202434	Identifier	p		1202422	1					
ANR	1202435	IdentifierDecl	* end		1202422	3					
ANR	1202436	IdentifierDeclType	const UChar *		1202422	0					
ANR	1202437	Identifier	end		1202422	1					
ANR	1202438	IdentifierDeclStatement	const UChar * tail ;	2935:2:71718:71735	1202422	1	True				
ANR	1202439	IdentifierDecl	* tail		1202422	0					
ANR	1202440	IdentifierDeclType	const UChar *		1202422	0					
ANR	1202441	Identifier	tail		1202422	1					
ANR	1202442	ExpressionStatement	end = text_range + ( target_end - target ) - 1	2937:2:71740:71784	1202422	2	True				
ANR	1202443	AssignmentExpression	end = text_range + ( target_end - target ) - 1		1202422	0		=			
ANR	1202444	Identifier	end		1202422	0					
ANR	1202445	AdditiveExpression	text_range + ( target_end - target ) - 1		1202422	1		+			
ANR	1202446	Identifier	text_range		1202422	0					
ANR	1202447	AdditiveExpression	( target_end - target ) - 1		1202422	1		-			
ANR	1202448	AdditiveExpression	target_end - target		1202422	0		-			
ANR	1202449	Identifier	target_end		1202422	0					
ANR	1202450	Identifier	target		1202422	1					
ANR	1202451	PrimaryExpression	1		1202422	1					
ANR	1202452	IfStatement	if ( end > text_end )		1202422	3					
ANR	1202453	Condition	end > text_end	2938:6:71792:71805	1202422	0	True				
ANR	1202454	RelationalExpression	end > text_end		1202422	0		>			
ANR	1202455	Identifier	end		1202422	0					
ANR	1202456	Identifier	text_end		1202422	1					
ANR	1202457	ExpressionStatement	end = text_end	2939:4:71812:71826	1202422	1	True				
ANR	1202458	AssignmentExpression	end = text_end		1202422	0		=			
ANR	1202459	Identifier	end		1202422	0					
ANR	1202460	Identifier	text_end		1202422	1					
ANR	1202461	ExpressionStatement	tail = target_end - 1	2941:2:71831:71852	1202422	4	True				
ANR	1202462	AssignmentExpression	tail = target_end - 1		1202422	0		=			
ANR	1202463	Identifier	tail		1202422	0					
ANR	1202464	AdditiveExpression	target_end - 1		1202422	1		-			
ANR	1202465	Identifier	target_end		1202422	0					
ANR	1202466	PrimaryExpression	1		1202422	1					
ANR	1202467	ExpressionStatement	s = text + ( target_end - target ) - 1	2942:2:71856:71892	1202422	5	True				
ANR	1202468	AssignmentExpression	s = text + ( target_end - target ) - 1		1202422	0		=			
ANR	1202469	Identifier	s		1202422	0					
ANR	1202470	AdditiveExpression	text + ( target_end - target ) - 1		1202422	1		+			
ANR	1202471	Identifier	text		1202422	0					
ANR	1202472	AdditiveExpression	( target_end - target ) - 1		1202422	1		-			
ANR	1202473	AdditiveExpression	target_end - target		1202422	0		-			
ANR	1202474	Identifier	target_end		1202422	0					
ANR	1202475	Identifier	target		1202422	1					
ANR	1202476	PrimaryExpression	1		1202422	1					
ANR	1202477	IfStatement	if ( IS_NULL ( reg -> int_map ) )		1202422	6					
ANR	1202478	Condition	IS_NULL ( reg -> int_map )	2943:6:71900:71920	1202422	0	True				
ANR	1202479	CallExpression	IS_NULL ( reg -> int_map )		1202422	0					
ANR	1202480	Callee	IS_NULL		1202422	0					
ANR	1202481	Identifier	IS_NULL		1202422	0					
ANR	1202482	ArgumentList	reg -> int_map		1202422	1					
ANR	1202483	Argument	reg -> int_map		1202422	0					
ANR	1202484	PtrMemberAccess	reg -> int_map		1202422	0					
ANR	1202485	Identifier	reg		1202422	0					
ANR	1202486	Identifier	int_map		1202422	1					
ANR	1202487	CompoundStatement		11:29:240:240	1202422	1					
ANR	1202488	WhileStatement	while ( s < end )		1202422	0					
ANR	1202489	Condition	s < end	2944:11:71936:71942	1202422	0	True				
ANR	1202490	RelationalExpression	s < end		1202422	0		<			
ANR	1202491	Identifier	s		1202422	0					
ANR	1202492	Identifier	end		1202422	1					
ANR	1202493	CompoundStatement		12:20:262:262	1202422	1					
ANR	1202494	ExpressionStatement	p = s	2945:6:71953:71958	1202422	0	True				
ANR	1202495	AssignmentExpression	p = s		1202422	0		=			
ANR	1202496	Identifier	p		1202422	0					
ANR	1202497	Identifier	s		1202422	1					
ANR	1202498	ExpressionStatement	t = tail	2946:6:71966:71974	1202422	1	True				
ANR	1202499	AssignmentExpression	t = tail		1202422	0		=			
ANR	1202500	Identifier	t		1202422	0					
ANR	1202501	Identifier	tail		1202422	1					
ANR	1202502	WhileStatement	while ( * p == * t )		1202422	2					
ANR	1202503	Condition	* p == * t	2947:13:71989:71996	1202422	0	True				
ANR	1202504	EqualityExpression	* p == * t		1202422	0		==			
ANR	1202505	UnaryOperationExpression	* p		1202422	0					
ANR	1202506	UnaryOperator	*		1202422	0					
ANR	1202507	Identifier	p		1202422	1					
ANR	1202508	UnaryOperationExpression	* t		1202422	1					
ANR	1202509	UnaryOperator	*		1202422	0					
ANR	1202510	Identifier	t		1202422	1					
ANR	1202511	CompoundStatement		15:23:316:316	1202422	1					
ANR	1202512	IfStatement	if ( t == target )		1202422	0					
ANR	1202513	Condition	t == target	2948:5:72006:72016	1202422	0	True				
ANR	1202514	EqualityExpression	t == target		1202422	0		==			
ANR	1202515	Identifier	t		1202422	0					
ANR	1202516	Identifier	target		1202422	1					
ANR	1202517	ReturnStatement	return ( UChar * ) p ;	2948:18:72019:72036	1202422	1	True				
ANR	1202518	CastExpression	( UChar * ) p		1202422	0					
ANR	1202519	CastTarget	UChar *		1202422	0					
ANR	1202520	Identifier	p		1202422	1					
ANR	1202521	ExpressionStatement	p --	2949:1:72039:72042	1202422	1	True				
ANR	1202522	PostIncDecOperationExpression	p --		1202422	0					
ANR	1202523	Identifier	p		1202422	0					
ANR	1202524	IncDec	--		1202422	1					
ANR	1202525	ExpressionStatement	t --	2949:6:72044:72047	1202422	2	True				
ANR	1202526	PostIncDecOperationExpression	t --		1202422	0					
ANR	1202527	Identifier	t		1202422	0					
ANR	1202528	IncDec	--		1202422	1					
ANR	1202529	ExpressionStatement	s += reg -> map [ * s ]	2951:6:72063:72080	1202422	3	True				
ANR	1202530	AssignmentExpression	s += reg -> map [ * s ]		1202422	0		+=			
ANR	1202531	Identifier	s		1202422	0					
ANR	1202532	ArrayIndexing	reg -> map [ * s ]		1202422	1					
ANR	1202533	PtrMemberAccess	reg -> map		1202422	0					
ANR	1202534	Identifier	reg		1202422	0					
ANR	1202535	Identifier	map		1202422	1					
ANR	1202536	UnaryOperationExpression	* s		1202422	1					
ANR	1202537	UnaryOperator	*		1202422	0					
ANR	1202538	Identifier	s		1202422	1					
ANR	1202539	ElseStatement	else		1202422	0					
ANR	1202540	CompoundStatement		22:7:416:416	1202422	0					
ANR	1202541	WhileStatement	while ( s < end )		1202422	0					
ANR	1202542	Condition	s < end	2955:11:72132:72138	1202422	0	True				
ANR	1202543	RelationalExpression	s < end		1202422	0		<			
ANR	1202544	Identifier	s		1202422	0					
ANR	1202545	Identifier	end		1202422	1					
ANR	1202546	CompoundStatement		23:20:458:458	1202422	1					
ANR	1202547	ExpressionStatement	p = s	2956:6:72149:72154	1202422	0	True				
ANR	1202548	AssignmentExpression	p = s		1202422	0		=			
ANR	1202549	Identifier	p		1202422	0					
ANR	1202550	Identifier	s		1202422	1					
ANR	1202551	ExpressionStatement	t = tail	2957:6:72162:72170	1202422	1	True				
ANR	1202552	AssignmentExpression	t = tail		1202422	0		=			
ANR	1202553	Identifier	t		1202422	0					
ANR	1202554	Identifier	tail		1202422	1					
ANR	1202555	WhileStatement	while ( * p == * t )		1202422	2					
ANR	1202556	Condition	* p == * t	2958:13:72185:72192	1202422	0	True				
ANR	1202557	EqualityExpression	* p == * t		1202422	0		==			
ANR	1202558	UnaryOperationExpression	* p		1202422	0					
ANR	1202559	UnaryOperator	*		1202422	0					
ANR	1202560	Identifier	p		1202422	1					
ANR	1202561	UnaryOperationExpression	* t		1202422	1					
ANR	1202562	UnaryOperator	*		1202422	0					
ANR	1202563	Identifier	t		1202422	1					
ANR	1202564	CompoundStatement		26:23:512:512	1202422	1					
ANR	1202565	IfStatement	if ( t == target )		1202422	0					
ANR	1202566	Condition	t == target	2959:5:72202:72212	1202422	0	True				
ANR	1202567	EqualityExpression	t == target		1202422	0		==			
ANR	1202568	Identifier	t		1202422	0					
ANR	1202569	Identifier	target		1202422	1					
ANR	1202570	ReturnStatement	return ( UChar * ) p ;	2959:18:72215:72232	1202422	1	True				
ANR	1202571	CastExpression	( UChar * ) p		1202422	0					
ANR	1202572	CastTarget	UChar *		1202422	0					
ANR	1202573	Identifier	p		1202422	1					
ANR	1202574	ExpressionStatement	p --	2960:1:72235:72238	1202422	1	True				
ANR	1202575	PostIncDecOperationExpression	p --		1202422	0					
ANR	1202576	Identifier	p		1202422	0					
ANR	1202577	IncDec	--		1202422	1					
ANR	1202578	ExpressionStatement	t --	2960:6:72240:72243	1202422	2	True				
ANR	1202579	PostIncDecOperationExpression	t --		1202422	0					
ANR	1202580	Identifier	t		1202422	0					
ANR	1202581	IncDec	--		1202422	1					
ANR	1202582	ExpressionStatement	s += reg -> int_map [ * s ]	2962:6:72259:72280	1202422	3	True				
ANR	1202583	AssignmentExpression	s += reg -> int_map [ * s ]		1202422	0		+=			
ANR	1202584	Identifier	s		1202422	0					
ANR	1202585	ArrayIndexing	reg -> int_map [ * s ]		1202422	1					
ANR	1202586	PtrMemberAccess	reg -> int_map		1202422	0					
ANR	1202587	Identifier	reg		1202422	0					
ANR	1202588	Identifier	int_map		1202422	1					
ANR	1202589	UnaryOperationExpression	* s		1202422	1					
ANR	1202590	UnaryOperator	*		1202422	0					
ANR	1202591	Identifier	s		1202422	1					
ANR	1202592	ReturnStatement	return ( UChar * ) NULL ;	2965:2:72294:72314	1202422	7	True				
ANR	1202593	CastExpression	( UChar * ) NULL		1202422	0					
ANR	1202594	CastTarget	UChar *		1202422	0					
ANR	1202595	Identifier	NULL		1202422	1					
ANR	1202596	ReturnType	static UChar *		1202422	1					
ANR	1202597	Identifier	bm_search		1202422	2					
ANR	1202598	ParameterList	"regex_t * reg , const UChar * target , const UChar * target_end , const UChar * text , const UChar * text_end , const UChar * text_range"		1202422	3					
ANR	1202599	Parameter	regex_t * reg	2931:10:71552:71563	1202422	0	True				
ANR	1202600	ParameterType	regex_t *		1202422	0					
ANR	1202601	Identifier	reg		1202422	1					
ANR	1202602	Parameter	const UChar * target	2931:24:71566:71584	1202422	1	True				
ANR	1202603	ParameterType	const UChar *		1202422	0					
ANR	1202604	Identifier	target		1202422	1					
ANR	1202605	Parameter	const UChar * target_end	2931:45:71587:71609	1202422	2	True				
ANR	1202606	ParameterType	const UChar *		1202422	0					
ANR	1202607	Identifier	target_end		1202422	1					
ANR	1202608	Parameter	const UChar * text	2932:3:71615:71631	1202422	3	True				
ANR	1202609	ParameterType	const UChar *		1202422	0					
ANR	1202610	Identifier	text		1202422	1					
ANR	1202611	Parameter	const UChar * text_end	2932:22:71634:71654	1202422	4	True				
ANR	1202612	ParameterType	const UChar *		1202422	0					
ANR	1202613	Identifier	text_end		1202422	1					
ANR	1202614	Parameter	const UChar * text_range	2932:45:71657:71679	1202422	5	True				
ANR	1202615	ParameterType	const UChar *		1202422	0					
ANR	1202616	Identifier	text_range		1202422	1					
ANR	1202617	CFGEntryNode	ENTRY		1202422		True				
ANR	1202618	CFGExitNode	EXIT		1202422		True				
ANR	1202619	Symbol	reg -> map		1202422						
ANR	1202620	Symbol	NULL		1202422						
ANR	1202621	Symbol	tail		1202422						
ANR	1202622	Symbol	target_end		1202422						
ANR	1202623	Symbol	* * reg		1202422						
ANR	1202624	Symbol	* reg -> int_map		1202422						
ANR	1202625	Symbol	target		1202422						
ANR	1202626	Symbol	p		1202422						
ANR	1202627	Symbol	reg -> int_map		1202422						
ANR	1202628	Symbol	s		1202422						
ANR	1202629	Symbol	t		1202422						
ANR	1202630	Symbol	IS_NULL		1202422						
ANR	1202631	Symbol	reg		1202422						
ANR	1202632	Symbol	* * s		1202422						
ANR	1202633	Symbol	end		1202422						
ANR	1202634	Symbol	* p		1202422						
ANR	1202635	Symbol	text		1202422						
ANR	1202636	Symbol	text_end		1202422						
ANR	1202637	Symbol	* reg -> map		1202422						
ANR	1202638	Symbol	text_range		1202422						
ANR	1202639	Symbol	* s		1202422						
ANR	1202640	Symbol	* reg		1202422						
ANR	1202641	Symbol	* t		1202422						
ANR	1202642	Function	set_bm_backward_skip	2968:0:72319:72739							
ANR	1202643	FunctionDef	"set_bm_backward_skip (UChar * s , UChar * end , OnigEncoding enc ARG_UNUSED , int * * skip)"		1202642	0					
ANR	1202644	CompoundStatement		2972:0:72429:72739	1202642	0					
ANR	1202645	IdentifierDeclStatement	"int i , len ;"	2973:2:72433:72443	1202642	0	True				
ANR	1202646	IdentifierDecl	i		1202642	0					
ANR	1202647	IdentifierDeclType	int		1202642	0					
ANR	1202648	Identifier	i		1202642	1					
ANR	1202649	IdentifierDecl	len		1202642	1					
ANR	1202650	IdentifierDeclType	int		1202642	0					
ANR	1202651	Identifier	len		1202642	1					
ANR	1202652	IfStatement	if ( IS_NULL ( * skip ) )		1202642	1					
ANR	1202653	Condition	IS_NULL ( * skip )	2975:6:72452:72465	1202642	0	True				
ANR	1202654	CallExpression	IS_NULL ( * skip )		1202642	0					
ANR	1202655	Callee	IS_NULL		1202642	0					
ANR	1202656	Identifier	IS_NULL		1202642	0					
ANR	1202657	ArgumentList	* skip		1202642	1					
ANR	1202658	Argument	* skip		1202642	0					
ANR	1202659	UnaryOperationExpression	* skip		1202642	0					
ANR	1202660	UnaryOperator	*		1202642	0					
ANR	1202661	Identifier	skip		1202642	1					
ANR	1202662	CompoundStatement		4:22:38:38	1202642	1					
ANR	1202663	ExpressionStatement	* skip = ( int * ) xmalloc ( sizeof ( int ) * ONIG_CHAR_TABLE_SIZE )	2976:4:72474:72532	1202642	0	True				
ANR	1202664	AssignmentExpression	* skip = ( int * ) xmalloc ( sizeof ( int ) * ONIG_CHAR_TABLE_SIZE )		1202642	0		=			
ANR	1202665	UnaryOperationExpression	* skip		1202642	0					
ANR	1202666	UnaryOperator	*		1202642	0					
ANR	1202667	Identifier	skip		1202642	1					
ANR	1202668	CastExpression	( int * ) xmalloc ( sizeof ( int ) * ONIG_CHAR_TABLE_SIZE )		1202642	1					
ANR	1202669	CastTarget	int *		1202642	0					
ANR	1202670	CallExpression	xmalloc ( sizeof ( int ) * ONIG_CHAR_TABLE_SIZE )		1202642	1					
ANR	1202671	Callee	xmalloc		1202642	0					
ANR	1202672	Identifier	xmalloc		1202642	0					
ANR	1202673	ArgumentList	sizeof ( int ) * ONIG_CHAR_TABLE_SIZE		1202642	1					
ANR	1202674	Argument	sizeof ( int ) * ONIG_CHAR_TABLE_SIZE		1202642	0					
ANR	1202675	MultiplicativeExpression	sizeof ( int ) * ONIG_CHAR_TABLE_SIZE		1202642	0		*			
ANR	1202676	SizeofExpression	sizeof ( int )		1202642	0					
ANR	1202677	Sizeof	sizeof		1202642	0					
ANR	1202678	SizeofOperand	int		1202642	1					
ANR	1202679	Identifier	ONIG_CHAR_TABLE_SIZE		1202642	1					
ANR	1202680	IfStatement	if ( IS_NULL ( * skip ) )		1202642	1					
ANR	1202681	Condition	IS_NULL ( * skip )	2977:8:72542:72555	1202642	0	True				
ANR	1202682	CallExpression	IS_NULL ( * skip )		1202642	0					
ANR	1202683	Callee	IS_NULL		1202642	0					
ANR	1202684	Identifier	IS_NULL		1202642	0					
ANR	1202685	ArgumentList	* skip		1202642	1					
ANR	1202686	Argument	* skip		1202642	0					
ANR	1202687	UnaryOperationExpression	* skip		1202642	0					
ANR	1202688	UnaryOperator	*		1202642	0					
ANR	1202689	Identifier	skip		1202642	1					
ANR	1202690	ReturnStatement	return ONIGERR_MEMORY ;	2977:24:72558:72579	1202642	1	True				
ANR	1202691	Identifier	ONIGERR_MEMORY		1202642	0					
ANR	1202692	ExpressionStatement	len = end - s	2980:2:72588:72601	1202642	2	True				
ANR	1202693	AssignmentExpression	len = end - s		1202642	0		=			
ANR	1202694	Identifier	len		1202642	0					
ANR	1202695	AdditiveExpression	end - s		1202642	1		-			
ANR	1202696	Identifier	end		1202642	0					
ANR	1202697	Identifier	s		1202642	1					
ANR	1202698	ForStatement	for ( i = 0 ; i < ONIG_CHAR_TABLE_SIZE ; i ++ )		1202642	3					
ANR	1202699	ForInit	i = 0 ;	2981:7:72610:72615	1202642	0	True				
ANR	1202700	AssignmentExpression	i = 0		1202642	0		=			
ANR	1202701	Identifier	i		1202642	0					
ANR	1202702	PrimaryExpression	0		1202642	1					
ANR	1202703	Condition	i < ONIG_CHAR_TABLE_SIZE	2981:14:72617:72640	1202642	1	True				
ANR	1202704	RelationalExpression	i < ONIG_CHAR_TABLE_SIZE		1202642	0		<			
ANR	1202705	Identifier	i		1202642	0					
ANR	1202706	Identifier	ONIG_CHAR_TABLE_SIZE		1202642	1					
ANR	1202707	PostIncDecOperationExpression	i ++	2981:40:72643:72645	1202642	2	True				
ANR	1202708	Identifier	i		1202642	0					
ANR	1202709	IncDec	++		1202642	1					
ANR	1202710	ExpressionStatement	( * skip ) [ i ] = len	2982:4:72652:72668	1202642	3	True				
ANR	1202711	AssignmentExpression	( * skip ) [ i ] = len		1202642	0		=			
ANR	1202712	ArrayIndexing	( * skip ) [ i ]		1202642	0					
ANR	1202713	UnaryOperationExpression	* skip		1202642	0					
ANR	1202714	UnaryOperator	*		1202642	0					
ANR	1202715	Identifier	skip		1202642	1					
ANR	1202716	Identifier	i		1202642	1					
ANR	1202717	Identifier	len		1202642	1					
ANR	1202718	ForStatement	for ( i = len - 1 ; i > 0 ; i -- )		1202642	4					
ANR	1202719	ForInit	i = len - 1 ;	2984:7:72678:72689	1202642	0	True				
ANR	1202720	AssignmentExpression	i = len - 1		1202642	0		=			
ANR	1202721	Identifier	i		1202642	0					
ANR	1202722	AdditiveExpression	len - 1		1202642	1		-			
ANR	1202723	Identifier	len		1202642	0					
ANR	1202724	PrimaryExpression	1		1202642	1					
ANR	1202725	Condition	i > 0	2984:20:72691:72695	1202642	1	True				
ANR	1202726	RelationalExpression	i > 0		1202642	0		>			
ANR	1202727	Identifier	i		1202642	0					
ANR	1202728	PrimaryExpression	0		1202642	1					
ANR	1202729	PostIncDecOperationExpression	i --	2984:27:72698:72700	1202642	2	True				
ANR	1202730	Identifier	i		1202642	0					
ANR	1202731	IncDec	--		1202642	1					
ANR	1202732	ExpressionStatement	( * skip ) [ s [ i ] ] = i	2985:4:72707:72724	1202642	3	True				
ANR	1202733	AssignmentExpression	( * skip ) [ s [ i ] ] = i		1202642	0		=			
ANR	1202734	ArrayIndexing	( * skip ) [ s [ i ] ]		1202642	0					
ANR	1202735	UnaryOperationExpression	* skip		1202642	0					
ANR	1202736	UnaryOperator	*		1202642	0					
ANR	1202737	Identifier	skip		1202642	1					
ANR	1202738	ArrayIndexing	s [ i ]		1202642	1					
ANR	1202739	Identifier	s		1202642	0					
ANR	1202740	Identifier	i		1202642	1					
ANR	1202741	Identifier	i		1202642	1					
ANR	1202742	ReturnStatement	return 0 ;	2987:2:72729:72737	1202642	5	True				
ANR	1202743	PrimaryExpression	0		1202642	0					
ANR	1202744	ReturnType	static int		1202642	1					
ANR	1202745	Identifier	set_bm_backward_skip		1202642	2					
ANR	1202746	ParameterList	"UChar * s , UChar * end , OnigEncoding enc ARG_UNUSED , int * * skip"		1202642	3					
ANR	1202747	Parameter	UChar * s	2969:21:72351:72358	1202642	0	True				
ANR	1202748	ParameterType	UChar *		1202642	0					
ANR	1202749	Identifier	s		1202642	1					
ANR	1202750	Parameter	UChar * end	2969:31:72361:72370	1202642	1	True				
ANR	1202751	ParameterType	UChar *		1202642	0					
ANR	1202752	Identifier	end		1202642	1					
ANR	1202753	Parameter	OnigEncoding enc ARG_UNUSED	2969:43:72373:72399	1202642	2	True				
ANR	1202754	ParameterType	OnigEncoding enc		1202642	0					
ANR	1202755	Identifier	ARG_UNUSED		1202642	1					
ANR	1202756	Parameter	int * * skip	2970:7:72409:72418	1202642	3	True				
ANR	1202757	ParameterType	int * *		1202642	0					
ANR	1202758	Identifier	skip		1202642	1					
ANR	1202759	CFGEntryNode	ENTRY		1202642		True				
ANR	1202760	CFGExitNode	EXIT		1202642		True				
ANR	1202761	Symbol	* * i		1202642						
ANR	1202762	Symbol	ONIGERR_MEMORY		1202642						
ANR	1202763	Symbol	i		1202642						
ANR	1202764	Symbol	skip		1202642						
ANR	1202765	Symbol	ARG_UNUSED		1202642						
ANR	1202766	Symbol	* skip		1202642						
ANR	1202767	Symbol	s		1202642						
ANR	1202768	Symbol	ONIG_CHAR_TABLE_SIZE		1202642						
ANR	1202769	Symbol	* i		1202642						
ANR	1202770	Symbol	len		1202642						
ANR	1202771	Symbol	IS_NULL		1202642						
ANR	1202772	Symbol	xmalloc		1202642						
ANR	1202773	Symbol	* * skip		1202642						
ANR	1202774	Symbol	* * s		1202642						
ANR	1202775	Symbol	end		1202642						
ANR	1202776	Symbol	* s		1202642						
ANR	1202777	Function	bm_search_backward	2990:0:72742:73415							
ANR	1202778	FunctionDef	"bm_search_backward (regex_t * reg , const UChar * target , const UChar * target_end , const UChar * text , const UChar * adjust_text , const UChar * text_end , const UChar * text_start)"		1202777	0					
ANR	1202779	CompoundStatement		2994:0:72938:73415	1202777	0					
ANR	1202780	IdentifierDeclStatement	"const UChar * s , * t , * p ;"	2995:2:72942:72964	1202777	0	True				
ANR	1202781	IdentifierDecl	* s		1202777	0					
ANR	1202782	IdentifierDeclType	const UChar *		1202777	0					
ANR	1202783	Identifier	s		1202777	1					
ANR	1202784	IdentifierDecl	* t		1202777	1					
ANR	1202785	IdentifierDeclType	const UChar *		1202777	0					
ANR	1202786	Identifier	t		1202777	1					
ANR	1202787	IdentifierDecl	* p		1202777	2					
ANR	1202788	IdentifierDeclType	const UChar *		1202777	0					
ANR	1202789	Identifier	p		1202777	1					
ANR	1202790	ExpressionStatement	s = text_end - ( target_end - target )	2997:2:72969:73005	1202777	1	True				
ANR	1202791	AssignmentExpression	s = text_end - ( target_end - target )		1202777	0		=			
ANR	1202792	Identifier	s		1202777	0					
ANR	1202793	AdditiveExpression	text_end - ( target_end - target )		1202777	1		-			
ANR	1202794	Identifier	text_end		1202777	0					
ANR	1202795	AdditiveExpression	target_end - target		1202777	1		-			
ANR	1202796	Identifier	target_end		1202777	0					
ANR	1202797	Identifier	target		1202777	1					
ANR	1202798	IfStatement	if ( text_start < s )		1202777	2					
ANR	1202799	Condition	text_start < s	2998:6:73013:73026	1202777	0	True				
ANR	1202800	RelationalExpression	text_start < s		1202777	0		<			
ANR	1202801	Identifier	text_start		1202777	0					
ANR	1202802	Identifier	s		1202777	1					
ANR	1202803	ExpressionStatement	s = text_start	2999:4:73033:73047	1202777	1	True				
ANR	1202804	AssignmentExpression	s = text_start		1202777	0		=			
ANR	1202805	Identifier	s		1202777	0					
ANR	1202806	Identifier	text_start		1202777	1					
ANR	1202807	ElseStatement	else		1202777	0					
ANR	1202808	ExpressionStatement	"s = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , adjust_text , s )"	3001:4:73060:73119	1202777	0	True				
ANR	1202809	AssignmentExpression	"s = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , adjust_text , s )"		1202777	0		=			
ANR	1202810	Identifier	s		1202777	0					
ANR	1202811	CallExpression	"ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , adjust_text , s )"		1202777	1					
ANR	1202812	Callee	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1202777	0					
ANR	1202813	Identifier	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1202777	0					
ANR	1202814	ArgumentList	reg -> enc		1202777	1					
ANR	1202815	Argument	reg -> enc		1202777	0					
ANR	1202816	PtrMemberAccess	reg -> enc		1202777	0					
ANR	1202817	Identifier	reg		1202777	0					
ANR	1202818	Identifier	enc		1202777	1					
ANR	1202819	Argument	adjust_text		1202777	1					
ANR	1202820	Identifier	adjust_text		1202777	0					
ANR	1202821	Argument	s		1202777	2					
ANR	1202822	Identifier	s		1202777	0					
ANR	1202823	WhileStatement	while ( s >= text )		1202777	3					
ANR	1202824	Condition	s >= text	3003:9:73131:73139	1202777	0	True				
ANR	1202825	RelationalExpression	s >= text		1202777	0		>=			
ANR	1202826	Identifier	s		1202777	0					
ANR	1202827	Identifier	text		1202777	1					
ANR	1202828	CompoundStatement		10:20:203:203	1202777	1					
ANR	1202829	ExpressionStatement	p = s	3004:4:73148:73153	1202777	0	True				
ANR	1202830	AssignmentExpression	p = s		1202777	0		=			
ANR	1202831	Identifier	p		1202777	0					
ANR	1202832	Identifier	s		1202777	1					
ANR	1202833	ExpressionStatement	t = target	3005:4:73159:73169	1202777	1	True				
ANR	1202834	AssignmentExpression	t = target		1202777	0		=			
ANR	1202835	Identifier	t		1202777	0					
ANR	1202836	Identifier	target		1202777	1					
ANR	1202837	WhileStatement	while ( t < target_end && * p == * t )		1202777	2					
ANR	1202838	Condition	t < target_end && * p == * t	3006:11:73182:73207	1202777	0	True				
ANR	1202839	AndExpression	t < target_end && * p == * t		1202777	0		&&			
ANR	1202840	RelationalExpression	t < target_end		1202777	0		<			
ANR	1202841	Identifier	t		1202777	0					
ANR	1202842	Identifier	target_end		1202777	1					
ANR	1202843	EqualityExpression	* p == * t		1202777	1		==			
ANR	1202844	UnaryOperationExpression	* p		1202777	0					
ANR	1202845	UnaryOperator	*		1202777	0					
ANR	1202846	Identifier	p		1202777	1					
ANR	1202847	UnaryOperationExpression	* t		1202777	1					
ANR	1202848	UnaryOperator	*		1202777	0					
ANR	1202849	Identifier	t		1202777	1					
ANR	1202850	CompoundStatement		13:39:271:271	1202777	1					
ANR	1202851	ExpressionStatement	p ++	3007:6:73218:73221	1202777	0	True				
ANR	1202852	PostIncDecOperationExpression	p ++		1202777	0					
ANR	1202853	Identifier	p		1202777	0					
ANR	1202854	IncDec	++		1202777	1					
ANR	1202855	ExpressionStatement	t ++	3007:11:73223:73226	1202777	1	True				
ANR	1202856	PostIncDecOperationExpression	t ++		1202777	0					
ANR	1202857	Identifier	t		1202777	0					
ANR	1202858	IncDec	++		1202777	1					
ANR	1202859	IfStatement	if ( t == target_end )		1202777	3					
ANR	1202860	Condition	t == target_end	3009:8:73242:73256	1202777	0	True				
ANR	1202861	EqualityExpression	t == target_end		1202777	0		==			
ANR	1202862	Identifier	t		1202777	0					
ANR	1202863	Identifier	target_end		1202777	1					
ANR	1202864	ReturnStatement	return ( UChar * ) s ;	3010:6:73265:73282	1202777	1	True				
ANR	1202865	CastExpression	( UChar * ) s		1202777	0					
ANR	1202866	CastTarget	UChar *		1202777	0					
ANR	1202867	Identifier	s		1202777	1					
ANR	1202868	ExpressionStatement	s -= reg -> int_map_backward [ * s ]	3012:4:73289:73319	1202777	4	True				
ANR	1202869	AssignmentExpression	s -= reg -> int_map_backward [ * s ]		1202777	0		-=			
ANR	1202870	Identifier	s		1202777	0					
ANR	1202871	ArrayIndexing	reg -> int_map_backward [ * s ]		1202777	1					
ANR	1202872	PtrMemberAccess	reg -> int_map_backward		1202777	0					
ANR	1202873	Identifier	reg		1202777	0					
ANR	1202874	Identifier	int_map_backward		1202777	1					
ANR	1202875	UnaryOperationExpression	* s		1202777	1					
ANR	1202876	UnaryOperator	*		1202777	0					
ANR	1202877	Identifier	s		1202777	1					
ANR	1202878	ExpressionStatement	"s = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , adjust_text , s )"	3013:4:73325:73384	1202777	5	True				
ANR	1202879	AssignmentExpression	"s = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , adjust_text , s )"		1202777	0		=			
ANR	1202880	Identifier	s		1202777	0					
ANR	1202881	CallExpression	"ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , adjust_text , s )"		1202777	1					
ANR	1202882	Callee	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1202777	0					
ANR	1202883	Identifier	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1202777	0					
ANR	1202884	ArgumentList	reg -> enc		1202777	1					
ANR	1202885	Argument	reg -> enc		1202777	0					
ANR	1202886	PtrMemberAccess	reg -> enc		1202777	0					
ANR	1202887	Identifier	reg		1202777	0					
ANR	1202888	Identifier	enc		1202777	1					
ANR	1202889	Argument	adjust_text		1202777	1					
ANR	1202890	Identifier	adjust_text		1202777	0					
ANR	1202891	Argument	s		1202777	2					
ANR	1202892	Identifier	s		1202777	0					
ANR	1202893	ReturnStatement	return ( UChar * ) NULL ;	3016:2:73393:73413	1202777	4	True				
ANR	1202894	CastExpression	( UChar * ) NULL		1202777	0					
ANR	1202895	CastTarget	UChar *		1202777	0					
ANR	1202896	Identifier	NULL		1202777	1					
ANR	1202897	ReturnType	static UChar *		1202777	1					
ANR	1202898	Identifier	bm_search_backward		1202777	2					
ANR	1202899	ParameterList	"regex_t * reg , const UChar * target , const UChar * target_end , const UChar * text , const UChar * adjust_text , const UChar * text_end , const UChar * text_start"		1202777	3					
ANR	1202900	Parameter	regex_t * reg	2991:19:72775:72786	1202777	0	True				
ANR	1202901	ParameterType	regex_t *		1202777	0					
ANR	1202902	Identifier	reg		1202777	1					
ANR	1202903	Parameter	const UChar * target	2991:33:72789:72807	1202777	1	True				
ANR	1202904	ParameterType	const UChar *		1202777	0					
ANR	1202905	Identifier	target		1202777	1					
ANR	1202906	Parameter	const UChar * target_end	2991:54:72810:72832	1202777	2	True				
ANR	1202907	ParameterType	const UChar *		1202777	0					
ANR	1202908	Identifier	target_end		1202777	1					
ANR	1202909	Parameter	const UChar * text	2992:5:72840:72856	1202777	3	True				
ANR	1202910	ParameterType	const UChar *		1202777	0					
ANR	1202911	Identifier	text		1202777	1					
ANR	1202912	Parameter	const UChar * adjust_text	2992:24:72859:72882	1202777	4	True				
ANR	1202913	ParameterType	const UChar *		1202777	0					
ANR	1202914	Identifier	adjust_text		1202777	1					
ANR	1202915	Parameter	const UChar * text_end	2993:5:72890:72910	1202777	5	True				
ANR	1202916	ParameterType	const UChar *		1202777	0					
ANR	1202917	Identifier	text_end		1202777	1					
ANR	1202918	Parameter	const UChar * text_start	2993:28:72913:72935	1202777	6	True				
ANR	1202919	ParameterType	const UChar *		1202777	0					
ANR	1202920	Identifier	text_start		1202777	1					
ANR	1202921	CFGEntryNode	ENTRY		1202777		True				
ANR	1202922	CFGExitNode	EXIT		1202777		True				
ANR	1202923	Symbol	NULL		1202777						
ANR	1202924	Symbol	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1202777						
ANR	1202925	Symbol	* reg -> int_map_backward		1202777						
ANR	1202926	Symbol	target_end		1202777						
ANR	1202927	Symbol	* * reg		1202777						
ANR	1202928	Symbol	target		1202777						
ANR	1202929	Symbol	reg -> enc		1202777						
ANR	1202930	Symbol	p		1202777						
ANR	1202931	Symbol	reg -> int_map_backward		1202777						
ANR	1202932	Symbol	s		1202777						
ANR	1202933	Symbol	t		1202777						
ANR	1202934	Symbol	reg		1202777						
ANR	1202935	Symbol	* * s		1202777						
ANR	1202936	Symbol	adjust_text		1202777						
ANR	1202937	Symbol	* p		1202777						
ANR	1202938	Symbol	text		1202777						
ANR	1202939	Symbol	text_end		1202777						
ANR	1202940	Symbol	* s		1202777						
ANR	1202941	Symbol	text_start		1202777						
ANR	1202942	Symbol	* reg		1202777						
ANR	1202943	Symbol	* t		1202777						
ANR	1202944	Function	map_search	3019:0:73418:73667							
ANR	1202945	FunctionDef	"map_search (OnigEncoding enc , UChar map [ ] , const UChar * text , const UChar * text_range)"		1202944	0					
ANR	1202946	CompoundStatement		3022:0:73522:73667	1202944	0					
ANR	1202947	IdentifierDeclStatement	const UChar * s = text ;	3023:2:73526:73547	1202944	0	True				
ANR	1202948	IdentifierDecl	* s = text		1202944	0					
ANR	1202949	IdentifierDeclType	const UChar *		1202944	0					
ANR	1202950	Identifier	s		1202944	1					
ANR	1202951	AssignmentExpression	* s = text		1202944	2		=			
ANR	1202952	Identifier	text		1202944	0					
ANR	1202953	Identifier	text		1202944	1					
ANR	1202954	WhileStatement	while ( s < text_range )		1202944	1					
ANR	1202955	Condition	s < text_range	3025:9:73559:73572	1202944	0	True				
ANR	1202956	RelationalExpression	s < text_range		1202944	0		<			
ANR	1202957	Identifier	s		1202944	0					
ANR	1202958	Identifier	text_range		1202944	1					
ANR	1202959	CompoundStatement		4:25:52:52	1202944	1					
ANR	1202960	IfStatement	if ( map [ * s ] )		1202944	0					
ANR	1202961	Condition	map [ * s ]	3026:8:73585:73591	1202944	0	True				
ANR	1202962	ArrayIndexing	map [ * s ]		1202944	0					
ANR	1202963	Identifier	map		1202944	0					
ANR	1202964	UnaryOperationExpression	* s		1202944	1					
ANR	1202965	UnaryOperator	*		1202944	0					
ANR	1202966	Identifier	s		1202944	1					
ANR	1202967	ReturnStatement	return ( UChar * ) s ;	3026:17:73594:73611	1202944	1	True				
ANR	1202968	CastExpression	( UChar * ) s		1202944	0					
ANR	1202969	CastTarget	UChar *		1202944	0					
ANR	1202970	Identifier	s		1202944	1					
ANR	1202971	ExpressionStatement	"s += enclen ( enc , s )"	3028:4:73618:73637	1202944	1	True				
ANR	1202972	AssignmentExpression	"s += enclen ( enc , s )"		1202944	0		+=			
ANR	1202973	Identifier	s		1202944	0					
ANR	1202974	CallExpression	"enclen ( enc , s )"		1202944	1					
ANR	1202975	Callee	enclen		1202944	0					
ANR	1202976	Identifier	enclen		1202944	0					
ANR	1202977	ArgumentList	enc		1202944	1					
ANR	1202978	Argument	enc		1202944	0					
ANR	1202979	Identifier	enc		1202944	0					
ANR	1202980	Argument	s		1202944	1					
ANR	1202981	Identifier	s		1202944	0					
ANR	1202982	ReturnStatement	return ( UChar * ) NULL ;	3030:2:73645:73665	1202944	2	True				
ANR	1202983	CastExpression	( UChar * ) NULL		1202944	0					
ANR	1202984	CastTarget	UChar *		1202944	0					
ANR	1202985	Identifier	NULL		1202944	1					
ANR	1202986	ReturnType	static UChar *		1202944	1					
ANR	1202987	Identifier	map_search		1202944	2					
ANR	1202988	ParameterList	"OnigEncoding enc , UChar map [ ] , const UChar * text , const UChar * text_range"		1202944	3					
ANR	1202989	Parameter	OnigEncoding enc	3020:11:73443:73458	1202944	0	True				
ANR	1202990	ParameterType	OnigEncoding		1202944	0					
ANR	1202991	Identifier	enc		1202944	1					
ANR	1202992	Parameter	UChar map [ ]	3020:29:73461:73471	1202944	1	True				
ANR	1202993	ParameterType	UChar [ ]		1202944	0					
ANR	1202994	Identifier	map		1202944	1					
ANR	1202995	Parameter	const UChar * text	3021:4:73478:73494	1202944	2	True				
ANR	1202996	ParameterType	const UChar *		1202944	0					
ANR	1202997	Identifier	text		1202944	1					
ANR	1202998	Parameter	const UChar * text_range	3021:23:73497:73519	1202944	3	True				
ANR	1202999	ParameterType	const UChar *		1202944	0					
ANR	1203000	Identifier	text_range		1202944	1					
ANR	1203001	CFGEntryNode	ENTRY		1202944		True				
ANR	1203002	CFGExitNode	EXIT		1202944		True				
ANR	1203003	Symbol	s		1202944						
ANR	1203004	Symbol	NULL		1202944						
ANR	1203005	Symbol	* map		1202944						
ANR	1203006	Symbol	* * s		1202944						
ANR	1203007	Symbol	enc		1202944						
ANR	1203008	Symbol	text		1202944						
ANR	1203009	Symbol	text_range		1202944						
ANR	1203010	Symbol	map		1202944						
ANR	1203011	Symbol	* s		1202944						
ANR	1203012	Symbol	enclen		1202944						
ANR	1203013	Function	map_search_backward	3033:0:73670:73995							
ANR	1203014	FunctionDef	"map_search_backward (OnigEncoding enc , UChar map [ ] , const UChar * text , const UChar * adjust_text , const UChar * text_start)"		1203013	0					
ANR	1203015	CompoundStatement		3037:0:73817:73995	1203013	0					
ANR	1203016	IdentifierDeclStatement	const UChar * s = text_start ;	3038:2:73821:73848	1203013	0	True				
ANR	1203017	IdentifierDecl	* s = text_start		1203013	0					
ANR	1203018	IdentifierDeclType	const UChar *		1203013	0					
ANR	1203019	Identifier	s		1203013	1					
ANR	1203020	AssignmentExpression	* s = text_start		1203013	2		=			
ANR	1203021	Identifier	text_start		1203013	0					
ANR	1203022	Identifier	text_start		1203013	1					
ANR	1203023	WhileStatement	while ( s >= text )		1203013	1					
ANR	1203024	Condition	s >= text	3040:9:73860:73868	1203013	0	True				
ANR	1203025	RelationalExpression	s >= text		1203013	0		>=			
ANR	1203026	Identifier	s		1203013	0					
ANR	1203027	Identifier	text		1203013	1					
ANR	1203028	CompoundStatement		4:20:53:53	1203013	1					
ANR	1203029	IfStatement	if ( map [ * s ] )		1203013	0					
ANR	1203030	Condition	map [ * s ]	3041:8:73881:73887	1203013	0	True				
ANR	1203031	ArrayIndexing	map [ * s ]		1203013	0					
ANR	1203032	Identifier	map		1203013	0					
ANR	1203033	UnaryOperationExpression	* s		1203013	1					
ANR	1203034	UnaryOperator	*		1203013	0					
ANR	1203035	Identifier	s		1203013	1					
ANR	1203036	ReturnStatement	return ( UChar * ) s ;	3041:17:73890:73907	1203013	1	True				
ANR	1203037	CastExpression	( UChar * ) s		1203013	0					
ANR	1203038	CastTarget	UChar *		1203013	0					
ANR	1203039	Identifier	s		1203013	1					
ANR	1203040	ExpressionStatement	"s = onigenc_get_prev_char_head ( enc , adjust_text , s )"	3043:4:73914:73965	1203013	1	True				
ANR	1203041	AssignmentExpression	"s = onigenc_get_prev_char_head ( enc , adjust_text , s )"		1203013	0		=			
ANR	1203042	Identifier	s		1203013	0					
ANR	1203043	CallExpression	"onigenc_get_prev_char_head ( enc , adjust_text , s )"		1203013	1					
ANR	1203044	Callee	onigenc_get_prev_char_head		1203013	0					
ANR	1203045	Identifier	onigenc_get_prev_char_head		1203013	0					
ANR	1203046	ArgumentList	enc		1203013	1					
ANR	1203047	Argument	enc		1203013	0					
ANR	1203048	Identifier	enc		1203013	0					
ANR	1203049	Argument	adjust_text		1203013	1					
ANR	1203050	Identifier	adjust_text		1203013	0					
ANR	1203051	Argument	s		1203013	2					
ANR	1203052	Identifier	s		1203013	0					
ANR	1203053	ReturnStatement	return ( UChar * ) NULL ;	3045:2:73973:73993	1203013	2	True				
ANR	1203054	CastExpression	( UChar * ) NULL		1203013	0					
ANR	1203055	CastTarget	UChar *		1203013	0					
ANR	1203056	Identifier	NULL		1203013	1					
ANR	1203057	ReturnType	static UChar *		1203013	1					
ANR	1203058	Identifier	map_search_backward		1203013	2					
ANR	1203059	ParameterList	"OnigEncoding enc , UChar map [ ] , const UChar * text , const UChar * adjust_text , const UChar * text_start"		1203013	3					
ANR	1203060	Parameter	OnigEncoding enc	3034:20:73704:73719	1203013	0	True				
ANR	1203061	ParameterType	OnigEncoding		1203013	0					
ANR	1203062	Identifier	enc		1203013	1					
ANR	1203063	Parameter	UChar map [ ]	3034:38:73722:73732	1203013	1	True				
ANR	1203064	ParameterType	UChar [ ]		1203013	0					
ANR	1203065	Identifier	map		1203013	1					
ANR	1203066	Parameter	const UChar * text	3035:6:73741:73757	1203013	2	True				
ANR	1203067	ParameterType	const UChar *		1203013	0					
ANR	1203068	Identifier	text		1203013	1					
ANR	1203069	Parameter	const UChar * adjust_text	3035:25:73760:73783	1203013	3	True				
ANR	1203070	ParameterType	const UChar *		1203013	0					
ANR	1203071	Identifier	adjust_text		1203013	1					
ANR	1203072	Parameter	const UChar * text_start	3036:6:73792:73814	1203013	4	True				
ANR	1203073	ParameterType	const UChar *		1203013	0					
ANR	1203074	Identifier	text_start		1203013	1					
ANR	1203075	CFGEntryNode	ENTRY		1203013		True				
ANR	1203076	CFGExitNode	EXIT		1203013		True				
ANR	1203077	Symbol	s		1203013						
ANR	1203078	Symbol	NULL		1203013						
ANR	1203079	Symbol	* map		1203013						
ANR	1203080	Symbol	* * s		1203013						
ANR	1203081	Symbol	onigenc_get_prev_char_head		1203013						
ANR	1203082	Symbol	adjust_text		1203013						
ANR	1203083	Symbol	enc		1203013						
ANR	1203084	Symbol	text		1203013						
ANR	1203085	Symbol	map		1203013						
ANR	1203086	Symbol	* s		1203013						
ANR	1203087	Symbol	text_start		1203013						
ANR	1203088	Function	onig_match	3048:0:73998:75470							
ANR	1203089	FunctionDef	"onig_match (regex_t * reg , const UChar * str , const UChar * end , const UChar * at , OnigRegion * region , OnigOptionType option)"		1203088	0					
ANR	1203090	CompoundStatement		3051:0:74135:75470	1203088	0					
ANR	1203091	IdentifierDeclStatement	int r ;	3052:2:74139:74144	1203088	0	True				
ANR	1203092	IdentifierDecl	r		1203088	0					
ANR	1203093	IdentifierDeclType	int		1203088	0					
ANR	1203094	Identifier	r		1203088	1					
ANR	1203095	IdentifierDeclStatement	UChar * prev ;	3053:2:74148:74159	1203088	1	True				
ANR	1203096	IdentifierDecl	* prev		1203088	0					
ANR	1203097	IdentifierDeclType	UChar *		1203088	0					
ANR	1203098	Identifier	prev		1203088	1					
ANR	1203099	IdentifierDeclStatement	OnigMatchArg msa ;	3054:2:74163:74179	1203088	2	True				
ANR	1203100	IdentifierDecl	msa		1203088	0					
ANR	1203101	IdentifierDeclType	OnigMatchArg		1203088	0					
ANR	1203102	Identifier	msa		1203088	1					
ANR	1203103	Label	start :	3057:1:74250:74255	1203088	3	True				
ANR	1203104	Identifier	start		1203088	0					
ANR	1203105	ExpressionStatement	THREAD_ATOMIC_START	3058:2:74259:74278	1203088	4	True				
ANR	1203106	Identifier	THREAD_ATOMIC_START		1203088	0					
ANR	1203107	IfStatement	if ( ONIG_STATE ( reg ) >= ONIG_STATE_NORMAL )		1203088	5					
ANR	1203108	Condition	ONIG_STATE ( reg ) >= ONIG_STATE_NORMAL	3059:6:74286:74321	1203088	0	True				
ANR	1203109	RelationalExpression	ONIG_STATE ( reg ) >= ONIG_STATE_NORMAL		1203088	0		>=			
ANR	1203110	CallExpression	ONIG_STATE ( reg )		1203088	0					
ANR	1203111	Callee	ONIG_STATE		1203088	0					
ANR	1203112	Identifier	ONIG_STATE		1203088	0					
ANR	1203113	ArgumentList	reg		1203088	1					
ANR	1203114	Argument	reg		1203088	0					
ANR	1203115	Identifier	reg		1203088	0					
ANR	1203116	Identifier	ONIG_STATE_NORMAL		1203088	1					
ANR	1203117	CompoundStatement		9:44:188:188	1203088	1					
ANR	1203118	ExpressionStatement	ONIG_STATE_INC ( reg )	3060:4:74330:74349	1203088	0	True				
ANR	1203119	CallExpression	ONIG_STATE_INC ( reg )		1203088	0					
ANR	1203120	Callee	ONIG_STATE_INC		1203088	0					
ANR	1203121	Identifier	ONIG_STATE_INC		1203088	0					
ANR	1203122	ArgumentList	reg		1203088	1					
ANR	1203123	Argument	reg		1203088	0					
ANR	1203124	Identifier	reg		1203088	0					
ANR	1203125	IfStatement	if ( IS_NOT_NULL ( reg -> chain ) && ONIG_STATE ( reg ) == ONIG_STATE_NORMAL )		1203088	1					
ANR	1203126	Condition	IS_NOT_NULL ( reg -> chain ) && ONIG_STATE ( reg ) == ONIG_STATE_NORMAL	3061:8:74359:74421	1203088	0	True				
ANR	1203127	AndExpression	IS_NOT_NULL ( reg -> chain ) && ONIG_STATE ( reg ) == ONIG_STATE_NORMAL		1203088	0		&&			
ANR	1203128	CallExpression	IS_NOT_NULL ( reg -> chain )		1203088	0					
ANR	1203129	Callee	IS_NOT_NULL		1203088	0					
ANR	1203130	Identifier	IS_NOT_NULL		1203088	0					
ANR	1203131	ArgumentList	reg -> chain		1203088	1					
ANR	1203132	Argument	reg -> chain		1203088	0					
ANR	1203133	PtrMemberAccess	reg -> chain		1203088	0					
ANR	1203134	Identifier	reg		1203088	0					
ANR	1203135	Identifier	chain		1203088	1					
ANR	1203136	EqualityExpression	ONIG_STATE ( reg ) == ONIG_STATE_NORMAL		1203088	1		==			
ANR	1203137	CallExpression	ONIG_STATE ( reg )		1203088	0					
ANR	1203138	Callee	ONIG_STATE		1203088	0					
ANR	1203139	Identifier	ONIG_STATE		1203088	0					
ANR	1203140	ArgumentList	reg		1203088	1					
ANR	1203141	Argument	reg		1203088	0					
ANR	1203142	Identifier	reg		1203088	0					
ANR	1203143	Identifier	ONIG_STATE_NORMAL		1203088	1					
ANR	1203144	CompoundStatement		11:73:288:288	1203088	1					
ANR	1203145	ExpressionStatement	onig_chain_reduce ( reg )	3062:6:74432:74454	1203088	0	True				
ANR	1203146	CallExpression	onig_chain_reduce ( reg )		1203088	0					
ANR	1203147	Callee	onig_chain_reduce		1203088	0					
ANR	1203148	Identifier	onig_chain_reduce		1203088	0					
ANR	1203149	ArgumentList	reg		1203088	1					
ANR	1203150	Argument	reg		1203088	0					
ANR	1203151	Identifier	reg		1203088	0					
ANR	1203152	ExpressionStatement	ONIG_STATE_INC ( reg )	3063:6:74462:74481	1203088	1	True				
ANR	1203153	CallExpression	ONIG_STATE_INC ( reg )		1203088	0					
ANR	1203154	Callee	ONIG_STATE_INC		1203088	0					
ANR	1203155	Identifier	ONIG_STATE_INC		1203088	0					
ANR	1203156	ArgumentList	reg		1203088	1					
ANR	1203157	Argument	reg		1203088	0					
ANR	1203158	Identifier	reg		1203088	0					
ANR	1203159	ElseStatement	else		1203088	0					
ANR	1203160	CompoundStatement		17:4:370:375	1203088	0					
ANR	1203161	IdentifierDeclStatement	int n ;	3067:4:74506:74511	1203088	0	True				
ANR	1203162	IdentifierDecl	n		1203088	0					
ANR	1203163	IdentifierDeclType	int		1203088	0					
ANR	1203164	Identifier	n		1203088	1					
ANR	1203165	ExpressionStatement	THREAD_ATOMIC_END	3069:4:74518:74535	1203088	1	True				
ANR	1203166	Identifier	THREAD_ATOMIC_END		1203088	0					
ANR	1203167	ExpressionStatement	n = 0	3070:4:74541:74546	1203088	2	True				
ANR	1203168	AssignmentExpression	n = 0		1203088	0		=			
ANR	1203169	Identifier	n		1203088	0					
ANR	1203170	PrimaryExpression	0		1203088	1					
ANR	1203171	WhileStatement	while ( ONIG_STATE ( reg ) < ONIG_STATE_NORMAL )		1203088	3					
ANR	1203172	Condition	ONIG_STATE ( reg ) < ONIG_STATE_NORMAL	3071:11:74559:74593	1203088	0	True				
ANR	1203173	RelationalExpression	ONIG_STATE ( reg ) < ONIG_STATE_NORMAL		1203088	0		<			
ANR	1203174	CallExpression	ONIG_STATE ( reg )		1203088	0					
ANR	1203175	Callee	ONIG_STATE		1203088	0					
ANR	1203176	Identifier	ONIG_STATE		1203088	0					
ANR	1203177	ArgumentList	reg		1203088	1					
ANR	1203178	Argument	reg		1203088	0					
ANR	1203179	Identifier	reg		1203088	0					
ANR	1203180	Identifier	ONIG_STATE_NORMAL		1203088	1					
ANR	1203181	CompoundStatement		21:48:460:460	1203088	1					
ANR	1203182	IfStatement	if ( ++ n > THREAD_PASS_LIMIT_COUNT )		1203088	0					
ANR	1203183	Condition	++ n > THREAD_PASS_LIMIT_COUNT	3072:10:74608:74636	1203088	0	True				
ANR	1203184	RelationalExpression	++ n > THREAD_PASS_LIMIT_COUNT		1203088	0		>			
ANR	1203185	UnaryExpression	++ n		1203088	0					
ANR	1203186	IncDec	++		1203088	0					
ANR	1203187	Identifier	n		1203088	1					
ANR	1203188	Identifier	THREAD_PASS_LIMIT_COUNT		1203088	1					
ANR	1203189	ReturnStatement	return ONIGERR_OVER_THREAD_PASS_LIMIT_COUNT ;	3073:1:74640:74683	1203088	1	True				
ANR	1203190	Identifier	ONIGERR_OVER_THREAD_PASS_LIMIT_COUNT		1203088	0					
ANR	1203191	ExpressionStatement	THREAD_PASS	3074:6:74691:74702	1203088	1	True				
ANR	1203192	Identifier	THREAD_PASS		1203088	0					
ANR	1203193	GotoStatement	goto start ;	3076:4:74714:74724	1203088	4	True				
ANR	1203194	Identifier	start		1203088	0					
ANR	1203195	ExpressionStatement	THREAD_ATOMIC_END	3078:2:74732:74749	1203088	6	True				
ANR	1203196	Identifier	THREAD_ATOMIC_END		1203088	0					
ANR	1203197	ExpressionStatement	"MATCH_ARG_INIT ( msa , option , region , at )"	3081:2:74812:74851	1203088	7	True				
ANR	1203198	CallExpression	"MATCH_ARG_INIT ( msa , option , region , at )"		1203088	0					
ANR	1203199	Callee	MATCH_ARG_INIT		1203088	0					
ANR	1203200	Identifier	MATCH_ARG_INIT		1203088	0					
ANR	1203201	ArgumentList	msa		1203088	1					
ANR	1203202	Argument	msa		1203088	0					
ANR	1203203	Identifier	msa		1203088	0					
ANR	1203204	Argument	option		1203088	1					
ANR	1203205	Identifier	option		1203088	0					
ANR	1203206	Argument	region		1203088	2					
ANR	1203207	Identifier	region		1203088	0					
ANR	1203208	Argument	at		1203088	3					
ANR	1203209	Identifier	at		1203088	0					
ANR	1203210	CompoundStatement		34:4:764:785	1203088	8					
ANR	1203211	IdentifierDeclStatement	int offset = at - str ;	3084:4:74900:74921	1203088	0	True				
ANR	1203212	IdentifierDecl	offset = at - str		1203088	0					
ANR	1203213	IdentifierDeclType	int		1203088	0					
ANR	1203214	Identifier	offset		1203088	1					
ANR	1203215	AssignmentExpression	offset = at - str		1203088	2		=			
ANR	1203216	Identifier	offset		1203088	0					
ANR	1203217	AdditiveExpression	at - str		1203088	1		-			
ANR	1203218	Identifier	at		1203088	0					
ANR	1203219	Identifier	str		1203088	1					
ANR	1203220	ExpressionStatement	"STATE_CHECK_BUFF_INIT ( msa , end - str , offset , reg -> num_comb_exp_check )"	3085:4:74927:74997	1203088	1	True				
ANR	1203221	CallExpression	"STATE_CHECK_BUFF_INIT ( msa , end - str , offset , reg -> num_comb_exp_check )"		1203088	0					
ANR	1203222	Callee	STATE_CHECK_BUFF_INIT		1203088	0					
ANR	1203223	Identifier	STATE_CHECK_BUFF_INIT		1203088	0					
ANR	1203224	ArgumentList	msa		1203088	1					
ANR	1203225	Argument	msa		1203088	0					
ANR	1203226	Identifier	msa		1203088	0					
ANR	1203227	Argument	end - str		1203088	1					
ANR	1203228	AdditiveExpression	end - str		1203088	0		-			
ANR	1203229	Identifier	end		1203088	0					
ANR	1203230	Identifier	str		1203088	1					
ANR	1203231	Argument	offset		1203088	2					
ANR	1203232	Identifier	offset		1203088	0					
ANR	1203233	Argument	reg -> num_comb_exp_check		1203088	3					
ANR	1203234	PtrMemberAccess	reg -> num_comb_exp_check		1203088	0					
ANR	1203235	Identifier	reg		1203088	0					
ANR	1203236	Identifier	num_comb_exp_check		1203088	1					
ANR	1203237	Statement	if	3089:2:75013:75014	1203088	9	True				
ANR	1203238	Statement	(	3089:5:75016:75016	1203088	10	True				
ANR	1203239	Statement	region	3089:6:75017:75022	1203088	11	True				
ANR	1203240	Statement	&&	3091:6:75065:75066	1203088	12	True				
ANR	1203241	Statement	!	3091:9:75068:75068	1203088	13	True				
ANR	1203242	Statement	IS_POSIX_REGION	3091:10:75069:75083	1203088	14	True				
ANR	1203243	Statement	(	3091:25:75084:75084	1203088	15	True				
ANR	1203244	Statement	option	3091:26:75085:75090	1203088	16	True				
ANR	1203245	Statement	)	3091:32:75091:75091	1203088	17	True				
ANR	1203246	Statement	)	3093:6:75106:75106	1203088	18	True				
ANR	1203247	CompoundStatement		43:8:972:972	1203088	19					
ANR	1203248	ExpressionStatement	"r = onig_region_resize_clear ( region , reg -> num_mem + 1 )"	3094:4:75114:75168	1203088	0	True				
ANR	1203249	AssignmentExpression	"r = onig_region_resize_clear ( region , reg -> num_mem + 1 )"		1203088	0		=			
ANR	1203250	Identifier	r		1203088	0					
ANR	1203251	CallExpression	"onig_region_resize_clear ( region , reg -> num_mem + 1 )"		1203088	1					
ANR	1203252	Callee	onig_region_resize_clear		1203088	0					
ANR	1203253	Identifier	onig_region_resize_clear		1203088	0					
ANR	1203254	ArgumentList	region		1203088	1					
ANR	1203255	Argument	region		1203088	0					
ANR	1203256	Identifier	region		1203088	0					
ANR	1203257	Argument	reg -> num_mem + 1		1203088	1					
ANR	1203258	AdditiveExpression	reg -> num_mem + 1		1203088	0		+			
ANR	1203259	PtrMemberAccess	reg -> num_mem		1203088	0					
ANR	1203260	Identifier	reg		1203088	0					
ANR	1203261	Identifier	num_mem		1203088	1					
ANR	1203262	PrimaryExpression	1		1203088	1					
ANR	1203263	ReturnType	extern int		1203088	1					
ANR	1203264	Identifier	onig_match		1203088	2					
ANR	1203265	ParameterList	"regex_t * reg , const UChar * str , const UChar * end , const UChar * at , OnigRegion * region , OnigOptionType option"		1203088	3					
ANR	1203266	Parameter	regex_t * reg	3049:11:74020:74031	1203088	0	True				
ANR	1203267	ParameterType	regex_t *		1203088	0					
ANR	1203268	Identifier	reg		1203088	1					
ANR	1203269	Parameter	const UChar * str	3049:25:74034:74049	1203088	1	True				
ANR	1203270	ParameterType	const UChar *		1203088	0					
ANR	1203271	Identifier	str		1203088	1					
ANR	1203272	Parameter	const UChar * end	3049:43:74052:74067	1203088	2	True				
ANR	1203273	ParameterType	const UChar *		1203088	0					
ANR	1203274	Identifier	end		1203088	1					
ANR	1203275	Parameter	const UChar * at	3049:61:74070:74084	1203088	3	True				
ANR	1203276	ParameterType	const UChar *		1203088	0					
ANR	1203277	Identifier	at		1203088	1					
ANR	1203278	Parameter	OnigRegion * region	3049:78:74087:74104	1203088	4	True				
ANR	1203279	ParameterType	OnigRegion *		1203088	0					
ANR	1203280	Identifier	region		1203088	1					
ANR	1203281	Parameter	OnigOptionType option	3050:5:74112:74132	1203088	5	True				
ANR	1203282	ParameterType	OnigOptionType		1203088	0					
ANR	1203283	Identifier	option		1203088	1					
ANR	1203284	CFGEntryNode	ENTRY		1203088		True				
ANR	1203285	CFGExitNode	EXIT		1203088		True				
ANR	1203286	Symbol	IS_NOT_NULL		1203088						
ANR	1203287	Symbol	ONIGERR_OVER_THREAD_PASS_LIMIT_COUNT		1203088						
ANR	1203288	Symbol	offset		1203088						
ANR	1203289	Symbol	ONIG_STATE		1203088						
ANR	1203290	Symbol	prev		1203088						
ANR	1203291	Symbol	n		1203088						
ANR	1203292	Symbol	onig_region_resize_clear		1203088						
ANR	1203293	Symbol	str		1203088						
ANR	1203294	Symbol	r		1203088						
ANR	1203295	Symbol	at		1203088						
ANR	1203296	Symbol	THREAD_PASS_LIMIT_COUNT		1203088						
ANR	1203297	Symbol	reg		1203088						
ANR	1203298	Symbol	reg -> num_comb_exp_check		1203088						
ANR	1203299	Symbol	reg -> chain		1203088						
ANR	1203300	Symbol	end		1203088						
ANR	1203301	Symbol	msa		1203088						
ANR	1203302	Symbol	region		1203088						
ANR	1203303	Symbol	* reg		1203088						
ANR	1203304	Symbol	reg -> num_mem		1203088						
ANR	1203305	Symbol	option		1203088						
ANR	1203306	Symbol	ONIG_STATE_NORMAL		1203088						
ANR	1203307	Function	forward_search_range	3113:0:75473:78701							
ANR	1203308	FunctionDef	"forward_search_range (regex_t * reg , const UChar * str , const UChar * end , UChar * s , UChar * range , UChar * * low , UChar * * high , UChar * * low_prev)"		1203307	0					
ANR	1203309	CompoundStatement		3116:0:75631:78701	1203307	0					
ANR	1203310	IdentifierDeclStatement	"UChar * p , * pprev = ( UChar * ) NULL ;"	3117:2:75635:75667	1203307	0	True				
ANR	1203311	IdentifierDecl	* p		1203307	0					
ANR	1203312	IdentifierDeclType	UChar *		1203307	0					
ANR	1203313	Identifier	p		1203307	1					
ANR	1203314	IdentifierDecl	* pprev = ( UChar * ) NULL		1203307	1					
ANR	1203315	IdentifierDeclType	UChar *		1203307	0					
ANR	1203316	Identifier	pprev		1203307	1					
ANR	1203317	AssignmentExpression	* pprev = ( UChar * ) NULL		1203307	2		=			
ANR	1203318	Identifier	pprev		1203307	0					
ANR	1203319	CastExpression	( UChar * ) NULL		1203307	1					
ANR	1203320	CastTarget	UChar *		1203307	0					
ANR	1203321	Identifier	NULL		1203307	1					
ANR	1203322	ExpressionStatement	"fprintf ( stderr , ""forward_search_range: str: %d, end: %d, s: %d, range: %d\\n"" , ( int ) str , ( int ) end , ( int ) s , ( int ) range )"	3120:2:75697:75821	1203307	1	True				
ANR	1203323	CallExpression	"fprintf ( stderr , ""forward_search_range: str: %d, end: %d, s: %d, range: %d\\n"" , ( int ) str , ( int ) end , ( int ) s , ( int ) range )"		1203307	0					
ANR	1203324	Callee	fprintf		1203307	0					
ANR	1203325	Identifier	fprintf		1203307	0					
ANR	1203326	ArgumentList	stderr		1203307	1					
ANR	1203327	Argument	stderr		1203307	0					
ANR	1203328	Identifier	stderr		1203307	0					
ANR	1203329	Argument	"""forward_search_range: str: %d, end: %d, s: %d, range: %d\\n"""		1203307	1					
ANR	1203330	PrimaryExpression	"""forward_search_range: str: %d, end: %d, s: %d, range: %d\\n"""		1203307	0					
ANR	1203331	Argument	( int ) str		1203307	2					
ANR	1203332	CastExpression	( int ) str		1203307	0					
ANR	1203333	CastTarget	int		1203307	0					
ANR	1203334	Identifier	str		1203307	1					
ANR	1203335	Argument	( int ) end		1203307	3					
ANR	1203336	CastExpression	( int ) end		1203307	0					
ANR	1203337	CastTarget	int		1203307	0					
ANR	1203338	Identifier	end		1203307	1					
ANR	1203339	Argument	( int ) s		1203307	4					
ANR	1203340	CastExpression	( int ) s		1203307	0					
ANR	1203341	CastTarget	int		1203307	0					
ANR	1203342	Identifier	s		1203307	1					
ANR	1203343	Argument	( int ) range		1203307	5					
ANR	1203344	CastExpression	( int ) range		1203307	0					
ANR	1203345	CastTarget	int		1203307	0					
ANR	1203346	Identifier	range		1203307	1					
ANR	1203347	ExpressionStatement	p = s	3124:2:75833:75838	1203307	2	True				
ANR	1203348	AssignmentExpression	p = s		1203307	0		=			
ANR	1203349	Identifier	p		1203307	0					
ANR	1203350	Identifier	s		1203307	1					
ANR	1203351	IfStatement	if ( reg -> dmin > 0 )		1203307	3					
ANR	1203352	Condition	reg -> dmin > 0	3125:6:75846:75858	1203307	0	True				
ANR	1203353	RelationalExpression	reg -> dmin > 0		1203307	0		>			
ANR	1203354	PtrMemberAccess	reg -> dmin		1203307	0					
ANR	1203355	Identifier	reg		1203307	0					
ANR	1203356	Identifier	dmin		1203307	1					
ANR	1203357	PrimaryExpression	0		1203307	1					
ANR	1203358	CompoundStatement		10:21:229:229	1203307	1					
ANR	1203359	IfStatement	if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) )		1203307	0					
ANR	1203360	Condition	ONIGENC_IS_SINGLEBYTE ( reg -> enc )	3126:8:75871:75901	1203307	0	True				
ANR	1203361	CallExpression	ONIGENC_IS_SINGLEBYTE ( reg -> enc )		1203307	0					
ANR	1203362	Callee	ONIGENC_IS_SINGLEBYTE		1203307	0					
ANR	1203363	Identifier	ONIGENC_IS_SINGLEBYTE		1203307	0					
ANR	1203364	ArgumentList	reg -> enc		1203307	1					
ANR	1203365	Argument	reg -> enc		1203307	0					
ANR	1203366	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203367	Identifier	reg		1203307	0					
ANR	1203368	Identifier	enc		1203307	1					
ANR	1203369	CompoundStatement		11:41:272:272	1203307	1					
ANR	1203370	ExpressionStatement	p += reg -> dmin	3127:6:75912:75926	1203307	0	True				
ANR	1203371	AssignmentExpression	p += reg -> dmin		1203307	0		+=			
ANR	1203372	Identifier	p		1203307	0					
ANR	1203373	PtrMemberAccess	reg -> dmin		1203307	1					
ANR	1203374	Identifier	reg		1203307	0					
ANR	1203375	Identifier	dmin		1203307	1					
ANR	1203376	ElseStatement	else		1203307	0					
ANR	1203377	CompoundStatement		15:6:319:343	1203307	0					
ANR	1203378	IdentifierDeclStatement	UChar * q = p + reg -> dmin ;	3130:6:75951:75975	1203307	0	True				
ANR	1203379	IdentifierDecl	* q = p + reg -> dmin		1203307	0					
ANR	1203380	IdentifierDeclType	UChar *		1203307	0					
ANR	1203381	Identifier	q		1203307	1					
ANR	1203382	AssignmentExpression	* q = p + reg -> dmin		1203307	2		=			
ANR	1203383	Identifier	q		1203307	0					
ANR	1203384	AdditiveExpression	p + reg -> dmin		1203307	1		+			
ANR	1203385	Identifier	p		1203307	0					
ANR	1203386	PtrMemberAccess	reg -> dmin		1203307	1					
ANR	1203387	Identifier	reg		1203307	0					
ANR	1203388	Identifier	dmin		1203307	1					
ANR	1203389	WhileStatement	while ( p < q )		1203307	1					
ANR	1203390	Condition	p < q	3131:13:75990:75994	1203307	0	True				
ANR	1203391	RelationalExpression	p < q		1203307	0		<			
ANR	1203392	Identifier	p		1203307	0					
ANR	1203393	Identifier	q		1203307	1					
ANR	1203394	ExpressionStatement	"p += enclen ( reg -> enc , p )"	3131:20:75997:76021	1203307	1	True				
ANR	1203395	AssignmentExpression	"p += enclen ( reg -> enc , p )"		1203307	0		+=			
ANR	1203396	Identifier	p		1203307	0					
ANR	1203397	CallExpression	"enclen ( reg -> enc , p )"		1203307	1					
ANR	1203398	Callee	enclen		1203307	0					
ANR	1203399	Identifier	enclen		1203307	0					
ANR	1203400	ArgumentList	reg -> enc		1203307	1					
ANR	1203401	Argument	reg -> enc		1203307	0					
ANR	1203402	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203403	Identifier	reg		1203307	0					
ANR	1203404	Identifier	enc		1203307	1					
ANR	1203405	Argument	p		1203307	1					
ANR	1203406	Identifier	p		1203307	0					
ANR	1203407	Label	retry :	3135:1:76035:76040	1203307	4	True				
ANR	1203408	Identifier	retry		1203307	0					
ANR	1203409	SwitchStatement	switch ( reg -> optimize )		1203307	5					
ANR	1203410	Condition	reg -> optimize	3136:10:76052:76064	1203307	0	True				
ANR	1203411	PtrMemberAccess	reg -> optimize		1203307	0					
ANR	1203412	Identifier	reg		1203307	0					
ANR	1203413	Identifier	optimize		1203307	1					
ANR	1203414	CompoundStatement		21:25:435:435	1203307	1					
ANR	1203415	Label	case ONIG_OPTIMIZE_EXACT :	3137:2:76071:76095	1203307	0	True				
ANR	1203416	Identifier	ONIG_OPTIMIZE_EXACT		1203307	0					
ANR	1203417	ExpressionStatement	"p = slow_search ( reg -> enc , reg -> exact , reg -> exact_end , p , end , range )"	3138:4:76101:76169	1203307	1	True				
ANR	1203418	AssignmentExpression	"p = slow_search ( reg -> enc , reg -> exact , reg -> exact_end , p , end , range )"		1203307	0		=			
ANR	1203419	Identifier	p		1203307	0					
ANR	1203420	CallExpression	"slow_search ( reg -> enc , reg -> exact , reg -> exact_end , p , end , range )"		1203307	1					
ANR	1203421	Callee	slow_search		1203307	0					
ANR	1203422	Identifier	slow_search		1203307	0					
ANR	1203423	ArgumentList	reg -> enc		1203307	1					
ANR	1203424	Argument	reg -> enc		1203307	0					
ANR	1203425	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203426	Identifier	reg		1203307	0					
ANR	1203427	Identifier	enc		1203307	1					
ANR	1203428	Argument	reg -> exact		1203307	1					
ANR	1203429	PtrMemberAccess	reg -> exact		1203307	0					
ANR	1203430	Identifier	reg		1203307	0					
ANR	1203431	Identifier	exact		1203307	1					
ANR	1203432	Argument	reg -> exact_end		1203307	2					
ANR	1203433	PtrMemberAccess	reg -> exact_end		1203307	0					
ANR	1203434	Identifier	reg		1203307	0					
ANR	1203435	Identifier	exact_end		1203307	1					
ANR	1203436	Argument	p		1203307	3					
ANR	1203437	Identifier	p		1203307	0					
ANR	1203438	Argument	end		1203307	4					
ANR	1203439	Identifier	end		1203307	0					
ANR	1203440	Argument	range		1203307	5					
ANR	1203441	Identifier	range		1203307	0					
ANR	1203442	BreakStatement	break ;	3139:4:76175:76180	1203307	2	True				
ANR	1203443	Label	case ONIG_OPTIMIZE_EXACT_IC :	3140:2:76184:76211	1203307	3	True				
ANR	1203444	Identifier	ONIG_OPTIMIZE_EXACT_IC		1203307	0					
ANR	1203445	ExpressionStatement	"p = slow_search_ic ( reg -> enc , reg -> case_fold_flag , reg -> exact , reg -> exact_end , p , end , range )"	3141:4:76217:76332	1203307	4	True				
ANR	1203446	AssignmentExpression	"p = slow_search_ic ( reg -> enc , reg -> case_fold_flag , reg -> exact , reg -> exact_end , p , end , range )"		1203307	0		=			
ANR	1203447	Identifier	p		1203307	0					
ANR	1203448	CallExpression	"slow_search_ic ( reg -> enc , reg -> case_fold_flag , reg -> exact , reg -> exact_end , p , end , range )"		1203307	1					
ANR	1203449	Callee	slow_search_ic		1203307	0					
ANR	1203450	Identifier	slow_search_ic		1203307	0					
ANR	1203451	ArgumentList	reg -> enc		1203307	1					
ANR	1203452	Argument	reg -> enc		1203307	0					
ANR	1203453	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203454	Identifier	reg		1203307	0					
ANR	1203455	Identifier	enc		1203307	1					
ANR	1203456	Argument	reg -> case_fold_flag		1203307	1					
ANR	1203457	PtrMemberAccess	reg -> case_fold_flag		1203307	0					
ANR	1203458	Identifier	reg		1203307	0					
ANR	1203459	Identifier	case_fold_flag		1203307	1					
ANR	1203460	Argument	reg -> exact		1203307	2					
ANR	1203461	PtrMemberAccess	reg -> exact		1203307	0					
ANR	1203462	Identifier	reg		1203307	0					
ANR	1203463	Identifier	exact		1203307	1					
ANR	1203464	Argument	reg -> exact_end		1203307	3					
ANR	1203465	PtrMemberAccess	reg -> exact_end		1203307	0					
ANR	1203466	Identifier	reg		1203307	0					
ANR	1203467	Identifier	exact_end		1203307	1					
ANR	1203468	Argument	p		1203307	4					
ANR	1203469	Identifier	p		1203307	0					
ANR	1203470	Argument	end		1203307	5					
ANR	1203471	Identifier	end		1203307	0					
ANR	1203472	Argument	range		1203307	6					
ANR	1203473	Identifier	range		1203307	0					
ANR	1203474	BreakStatement	break ;	3143:4:76338:76343	1203307	5	True				
ANR	1203475	Label	case ONIG_OPTIMIZE_EXACT_BM :	3145:2:76348:76375	1203307	6	True				
ANR	1203476	Identifier	ONIG_OPTIMIZE_EXACT_BM		1203307	0					
ANR	1203477	ExpressionStatement	"p = bm_search ( reg , reg -> exact , reg -> exact_end , p , end , range )"	3146:4:76381:76442	1203307	7	True				
ANR	1203478	AssignmentExpression	"p = bm_search ( reg , reg -> exact , reg -> exact_end , p , end , range )"		1203307	0		=			
ANR	1203479	Identifier	p		1203307	0					
ANR	1203480	CallExpression	"bm_search ( reg , reg -> exact , reg -> exact_end , p , end , range )"		1203307	1					
ANR	1203481	Callee	bm_search		1203307	0					
ANR	1203482	Identifier	bm_search		1203307	0					
ANR	1203483	ArgumentList	reg		1203307	1					
ANR	1203484	Argument	reg		1203307	0					
ANR	1203485	Identifier	reg		1203307	0					
ANR	1203486	Argument	reg -> exact		1203307	1					
ANR	1203487	PtrMemberAccess	reg -> exact		1203307	0					
ANR	1203488	Identifier	reg		1203307	0					
ANR	1203489	Identifier	exact		1203307	1					
ANR	1203490	Argument	reg -> exact_end		1203307	2					
ANR	1203491	PtrMemberAccess	reg -> exact_end		1203307	0					
ANR	1203492	Identifier	reg		1203307	0					
ANR	1203493	Identifier	exact_end		1203307	1					
ANR	1203494	Argument	p		1203307	3					
ANR	1203495	Identifier	p		1203307	0					
ANR	1203496	Argument	end		1203307	4					
ANR	1203497	Identifier	end		1203307	0					
ANR	1203498	Argument	range		1203307	5					
ANR	1203499	Identifier	range		1203307	0					
ANR	1203500	BreakStatement	break ;	3147:4:76448:76453	1203307	8	True				
ANR	1203501	Label	case ONIG_OPTIMIZE_EXACT_BM_NOT_REV :	3149:2:76458:76493	1203307	9	True				
ANR	1203502	Identifier	ONIG_OPTIMIZE_EXACT_BM_NOT_REV		1203307	0					
ANR	1203503	ExpressionStatement	"p = bm_search_notrev ( reg , reg -> exact , reg -> exact_end , p , end , range )"	3150:4:76499:76567	1203307	10	True				
ANR	1203504	AssignmentExpression	"p = bm_search_notrev ( reg , reg -> exact , reg -> exact_end , p , end , range )"		1203307	0		=			
ANR	1203505	Identifier	p		1203307	0					
ANR	1203506	CallExpression	"bm_search_notrev ( reg , reg -> exact , reg -> exact_end , p , end , range )"		1203307	1					
ANR	1203507	Callee	bm_search_notrev		1203307	0					
ANR	1203508	Identifier	bm_search_notrev		1203307	0					
ANR	1203509	ArgumentList	reg		1203307	1					
ANR	1203510	Argument	reg		1203307	0					
ANR	1203511	Identifier	reg		1203307	0					
ANR	1203512	Argument	reg -> exact		1203307	1					
ANR	1203513	PtrMemberAccess	reg -> exact		1203307	0					
ANR	1203514	Identifier	reg		1203307	0					
ANR	1203515	Identifier	exact		1203307	1					
ANR	1203516	Argument	reg -> exact_end		1203307	2					
ANR	1203517	PtrMemberAccess	reg -> exact_end		1203307	0					
ANR	1203518	Identifier	reg		1203307	0					
ANR	1203519	Identifier	exact_end		1203307	1					
ANR	1203520	Argument	p		1203307	3					
ANR	1203521	Identifier	p		1203307	0					
ANR	1203522	Argument	end		1203307	4					
ANR	1203523	Identifier	end		1203307	0					
ANR	1203524	Argument	range		1203307	5					
ANR	1203525	Identifier	range		1203307	0					
ANR	1203526	BreakStatement	break ;	3151:4:76573:76578	1203307	11	True				
ANR	1203527	Label	case ONIG_OPTIMIZE_MAP :	3153:2:76583:76605	1203307	12	True				
ANR	1203528	Identifier	ONIG_OPTIMIZE_MAP		1203307	0					
ANR	1203529	ExpressionStatement	"p = map_search ( reg -> enc , reg -> map , p , range )"	3154:4:76611:76655	1203307	13	True				
ANR	1203530	AssignmentExpression	"p = map_search ( reg -> enc , reg -> map , p , range )"		1203307	0		=			
ANR	1203531	Identifier	p		1203307	0					
ANR	1203532	CallExpression	"map_search ( reg -> enc , reg -> map , p , range )"		1203307	1					
ANR	1203533	Callee	map_search		1203307	0					
ANR	1203534	Identifier	map_search		1203307	0					
ANR	1203535	ArgumentList	reg -> enc		1203307	1					
ANR	1203536	Argument	reg -> enc		1203307	0					
ANR	1203537	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203538	Identifier	reg		1203307	0					
ANR	1203539	Identifier	enc		1203307	1					
ANR	1203540	Argument	reg -> map		1203307	1					
ANR	1203541	PtrMemberAccess	reg -> map		1203307	0					
ANR	1203542	Identifier	reg		1203307	0					
ANR	1203543	Identifier	map		1203307	1					
ANR	1203544	Argument	p		1203307	2					
ANR	1203545	Identifier	p		1203307	0					
ANR	1203546	Argument	range		1203307	3					
ANR	1203547	Identifier	range		1203307	0					
ANR	1203548	BreakStatement	break ;	3155:4:76661:76666	1203307	14	True				
ANR	1203549	IfStatement	if ( p && p < range )		1203307	6					
ANR	1203550	Condition	p && p < range	3158:6:76679:76692	1203307	0	True				
ANR	1203551	AndExpression	p && p < range		1203307	0		&&			
ANR	1203552	Identifier	p		1203307	0					
ANR	1203553	RelationalExpression	p < range		1203307	1		<			
ANR	1203554	Identifier	p		1203307	0					
ANR	1203555	Identifier	range		1203307	1					
ANR	1203556	CompoundStatement		43:22:1063:1063	1203307	1					
ANR	1203557	IfStatement	if ( p - reg -> dmin < s )		1203307	0					
ANR	1203558	Condition	p - reg -> dmin < s	3159:8:76705:76721	1203307	0	True				
ANR	1203559	RelationalExpression	p - reg -> dmin < s		1203307	0		<			
ANR	1203560	AdditiveExpression	p - reg -> dmin		1203307	0		-			
ANR	1203561	Identifier	p		1203307	0					
ANR	1203562	PtrMemberAccess	reg -> dmin		1203307	1					
ANR	1203563	Identifier	reg		1203307	0					
ANR	1203564	Identifier	dmin		1203307	1					
ANR	1203565	Identifier	s		1203307	1					
ANR	1203566	CompoundStatement		44:27:1092:1092	1203307	1					
ANR	1203567	Label	retry_gate :	3160:4:76730:76740	1203307	0	True				
ANR	1203568	Identifier	retry_gate		1203307	0					
ANR	1203569	ExpressionStatement	pprev = p	3161:6:76748:76757	1203307	1	True				
ANR	1203570	AssignmentExpression	pprev = p		1203307	0		=			
ANR	1203571	Identifier	pprev		1203307	0					
ANR	1203572	Identifier	p		1203307	1					
ANR	1203573	ExpressionStatement	"p += enclen ( reg -> enc , p )"	3162:6:76765:76789	1203307	2	True				
ANR	1203574	AssignmentExpression	"p += enclen ( reg -> enc , p )"		1203307	0		+=			
ANR	1203575	Identifier	p		1203307	0					
ANR	1203576	CallExpression	"enclen ( reg -> enc , p )"		1203307	1					
ANR	1203577	Callee	enclen		1203307	0					
ANR	1203578	Identifier	enclen		1203307	0					
ANR	1203579	ArgumentList	reg -> enc		1203307	1					
ANR	1203580	Argument	reg -> enc		1203307	0					
ANR	1203581	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203582	Identifier	reg		1203307	0					
ANR	1203583	Identifier	enc		1203307	1					
ANR	1203584	Argument	p		1203307	1					
ANR	1203585	Identifier	p		1203307	0					
ANR	1203586	GotoStatement	goto retry ;	3163:6:76797:76807	1203307	3	True				
ANR	1203587	Identifier	retry		1203307	0					
ANR	1203588	IfStatement	if ( reg -> sub_anchor )		1203307	1					
ANR	1203589	Condition	reg -> sub_anchor	3166:8:76824:76838	1203307	0	True				
ANR	1203590	PtrMemberAccess	reg -> sub_anchor		1203307	0					
ANR	1203591	Identifier	reg		1203307	0					
ANR	1203592	Identifier	sub_anchor		1203307	1					
ANR	1203593	CompoundStatement		52:6:1217:1228	1203307	1					
ANR	1203594	IdentifierDeclStatement	UChar * prev ;	3167:6:76849:76860	1203307	0	True				
ANR	1203595	IdentifierDecl	* prev		1203307	0					
ANR	1203596	IdentifierDeclType	UChar *		1203307	0					
ANR	1203597	Identifier	prev		1203307	1					
ANR	1203598	SwitchStatement	switch ( reg -> sub_anchor )		1203307	1					
ANR	1203599	Condition	reg -> sub_anchor	3169:14:76877:76891	1203307	0	True				
ANR	1203600	PtrMemberAccess	reg -> sub_anchor		1203307	0					
ANR	1203601	Identifier	reg		1203307	0					
ANR	1203602	Identifier	sub_anchor		1203307	1					
ANR	1203603	CompoundStatement		54:31:1262:1262	1203307	1					
ANR	1203604	Label	case ANCHOR_BEGIN_LINE :	3170:6:76902:76924	1203307	0	True				
ANR	1203605	Identifier	ANCHOR_BEGIN_LINE		1203307	0					
ANR	1203606	IfStatement	if ( ! ON_STR_BEGIN ( p ) )		1203307	1					
ANR	1203607	Condition	! ON_STR_BEGIN ( p )	3171:5:76931:76946	1203307	0	True				
ANR	1203608	UnaryOperationExpression	! ON_STR_BEGIN ( p )		1203307	0					
ANR	1203609	UnaryOperator	!		1203307	0					
ANR	1203610	CallExpression	ON_STR_BEGIN ( p )		1203307	1					
ANR	1203611	Callee	ON_STR_BEGIN		1203307	0					
ANR	1203612	Identifier	ON_STR_BEGIN		1203307	0					
ANR	1203613	ArgumentList	p		1203307	1					
ANR	1203614	Argument	p		1203307	0					
ANR	1203615	Identifier	p		1203307	0					
ANR	1203616	CompoundStatement		56:23:1317:1317	1203307	1					
ANR	1203617	ExpressionStatement	"prev = onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"	3172:3:76954:77032	1203307	0	True				
ANR	1203618	AssignmentExpression	"prev = onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"		1203307	0		=			
ANR	1203619	Identifier	prev		1203307	0					
ANR	1203620	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"		1203307	1					
ANR	1203621	Callee	onigenc_get_prev_char_head		1203307	0					
ANR	1203622	Identifier	onigenc_get_prev_char_head		1203307	0					
ANR	1203623	ArgumentList	reg -> enc		1203307	1					
ANR	1203624	Argument	reg -> enc		1203307	0					
ANR	1203625	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203626	Identifier	reg		1203307	0					
ANR	1203627	Identifier	enc		1203307	1					
ANR	1203628	Argument	pprev ? pprev : str		1203307	1					
ANR	1203629	ConditionalExpression	pprev ? pprev : str		1203307	0					
ANR	1203630	Condition	pprev		1203307	0					
ANR	1203631	Identifier	pprev		1203307	0					
ANR	1203632	Identifier	pprev		1203307	1					
ANR	1203633	Identifier	str		1203307	2					
ANR	1203634	Argument	p		1203307	2					
ANR	1203635	Identifier	p		1203307	0					
ANR	1203636	IfStatement	"if ( ! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end ) )"		1203307	1					
ANR	1203637	Condition	"! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"	3174:7:77041:77084	1203307	0	True				
ANR	1203638	UnaryOperationExpression	"! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"		1203307	0					
ANR	1203639	UnaryOperator	!		1203307	0					
ANR	1203640	CallExpression	"ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"		1203307	1					
ANR	1203641	Callee	ONIGENC_IS_MBC_NEWLINE		1203307	0					
ANR	1203642	Identifier	ONIGENC_IS_MBC_NEWLINE		1203307	0					
ANR	1203643	ArgumentList	reg -> enc		1203307	1					
ANR	1203644	Argument	reg -> enc		1203307	0					
ANR	1203645	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203646	Identifier	reg		1203307	0					
ANR	1203647	Identifier	enc		1203307	1					
ANR	1203648	Argument	prev		1203307	1					
ANR	1203649	Identifier	prev		1203307	0					
ANR	1203650	Argument	end		1203307	2					
ANR	1203651	Identifier	end		1203307	0					
ANR	1203652	GotoStatement	goto retry_gate ;	3175:5:77092:77107	1203307	1	True				
ANR	1203653	Identifier	retry_gate		1203307	0					
ANR	1203654	BreakStatement	break ;	3177:1:77113:77118	1203307	2	True				
ANR	1203655	Label	case ANCHOR_END_LINE :	3179:6:77127:77147	1203307	3	True				
ANR	1203656	Identifier	ANCHOR_END_LINE		1203307	0					
ANR	1203657	IfStatement	if ( ON_STR_END ( p ) )		1203307	4					
ANR	1203658	Condition	ON_STR_END ( p )	3180:5:77154:77166	1203307	0	True				
ANR	1203659	CallExpression	ON_STR_END ( p )		1203307	0					
ANR	1203660	Callee	ON_STR_END		1203307	0					
ANR	1203661	Identifier	ON_STR_END		1203307	0					
ANR	1203662	ArgumentList	p		1203307	1					
ANR	1203663	Argument	p		1203307	0					
ANR	1203664	Identifier	p		1203307	0					
ANR	1203665	CompoundStatement		65:20:1537:1537	1203307	1					
ANR	1203666	ExpressionStatement	"prev = ( UChar * ) onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"	3182:3:77226:77313	1203307	0	True				
ANR	1203667	AssignmentExpression	"prev = ( UChar * ) onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"		1203307	0		=			
ANR	1203668	Identifier	prev		1203307	0					
ANR	1203669	CastExpression	"( UChar * ) onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"		1203307	1					
ANR	1203670	CastTarget	UChar *		1203307	0					
ANR	1203671	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"		1203307	1					
ANR	1203672	Callee	onigenc_get_prev_char_head		1203307	0					
ANR	1203673	Identifier	onigenc_get_prev_char_head		1203307	0					
ANR	1203674	ArgumentList	reg -> enc		1203307	1					
ANR	1203675	Argument	reg -> enc		1203307	0					
ANR	1203676	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203677	Identifier	reg		1203307	0					
ANR	1203678	Identifier	enc		1203307	1					
ANR	1203679	Argument	pprev ? pprev : str		1203307	1					
ANR	1203680	ConditionalExpression	pprev ? pprev : str		1203307	0					
ANR	1203681	Condition	pprev		1203307	0					
ANR	1203682	Identifier	pprev		1203307	0					
ANR	1203683	Identifier	pprev		1203307	1					
ANR	1203684	Identifier	str		1203307	2					
ANR	1203685	Argument	p		1203307	2					
ANR	1203686	Identifier	p		1203307	0					
ANR	1203687	IfStatement	"if ( prev && ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end ) )"		1203307	1					
ANR	1203688	Condition	"prev && ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"	3184:7:77322:77372	1203307	0	True				
ANR	1203689	AndExpression	"prev && ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"		1203307	0		&&			
ANR	1203690	Identifier	prev		1203307	0					
ANR	1203691	CallExpression	"ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"		1203307	1					
ANR	1203692	Callee	ONIGENC_IS_MBC_NEWLINE		1203307	0					
ANR	1203693	Identifier	ONIGENC_IS_MBC_NEWLINE		1203307	0					
ANR	1203694	ArgumentList	reg -> enc		1203307	1					
ANR	1203695	Argument	reg -> enc		1203307	0					
ANR	1203696	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203697	Identifier	reg		1203307	0					
ANR	1203698	Identifier	enc		1203307	1					
ANR	1203699	Argument	prev		1203307	1					
ANR	1203700	Identifier	prev		1203307	0					
ANR	1203701	Argument	end		1203307	2					
ANR	1203702	Identifier	end		1203307	0					
ANR	1203703	GotoStatement	goto retry_gate ;	3185:5:77380:77395	1203307	1	True				
ANR	1203704	Identifier	retry_gate		1203307	0					
ANR	1203705	ElseStatement	else		1203307	0					
ANR	1203706	Statement	if	3188:6:77413:77414	1203307	0	True				
ANR	1203707	Statement	(	3188:9:77416:77416	1203307	5	True				
ANR	1203708	Statement	!	3188:10:77417:77417	1203307	6	True				
ANR	1203709	Statement	ONIGENC_IS_MBC_NEWLINE	3188:12:77419:77440	1203307	7	True				
ANR	1203710	Statement	(	3188:34:77441:77441	1203307	8	True				
ANR	1203711	Statement	reg	3188:35:77442:77444	1203307	9	True				
ANR	1203712	Statement	->	3188:38:77445:77446	1203307	10	True				
ANR	1203713	Statement	enc	3188:40:77447:77449	1203307	11	True				
ANR	1203714	Statement	","	3188:43:77450:77450	1203307	12	True				
ANR	1203715	Statement	p	3188:45:77452:77452	1203307	13	True				
ANR	1203716	Statement	","	3188:46:77453:77453	1203307	14	True				
ANR	1203717	Statement	end	3188:48:77455:77457	1203307	15	True				
ANR	1203718	Statement	)	3188:51:77458:77458	1203307	16	True				
ANR	1203719	Statement	&&	3190:14:77509:77510	1203307	17	True				
ANR	1203720	Statement	!	3190:17:77512:77512	1203307	18	True				
ANR	1203721	Statement	ONIGENC_IS_MBC_CRNL	3190:19:77514:77532	1203307	19	True				
ANR	1203722	Statement	(	3190:38:77533:77533	1203307	20	True				
ANR	1203723	Statement	reg	3190:39:77534:77536	1203307	21	True				
ANR	1203724	Statement	->	3190:42:77537:77538	1203307	22	True				
ANR	1203725	Statement	enc	3190:44:77539:77541	1203307	23	True				
ANR	1203726	Statement	","	3190:47:77542:77542	1203307	24	True				
ANR	1203727	Statement	p	3190:49:77544:77544	1203307	25	True				
ANR	1203728	Statement	","	3190:50:77545:77545	1203307	26	True				
ANR	1203729	Statement	end	3190:52:77547:77549	1203307	27	True				
ANR	1203730	Statement	)	3190:55:77550:77550	1203307	28	True				
ANR	1203731	Statement	)	3192:16:77575:77575	1203307	29	True				
ANR	1203732	GotoStatement	goto retry_gate ;	3193:3:77580:77595	1203307	30	True				
ANR	1203733	Identifier	retry_gate		1203307	0					
ANR	1203734	BreakStatement	break ;	3194:1:77598:77603	1203307	31	True				
ANR	1203735	IfStatement	if ( reg -> dmax == 0 )		1203307	2					
ANR	1203736	Condition	reg -> dmax == 0	3198:8:77628:77641	1203307	0	True				
ANR	1203737	EqualityExpression	reg -> dmax == 0		1203307	0		==			
ANR	1203738	PtrMemberAccess	reg -> dmax		1203307	0					
ANR	1203739	Identifier	reg		1203307	0					
ANR	1203740	Identifier	dmax		1203307	1					
ANR	1203741	PrimaryExpression	0		1203307	1					
ANR	1203742	CompoundStatement		83:24:2012:2012	1203307	1					
ANR	1203743	ExpressionStatement	* low = p	3199:6:77652:77660	1203307	0	True				
ANR	1203744	AssignmentExpression	* low = p		1203307	0		=			
ANR	1203745	UnaryOperationExpression	* low		1203307	0					
ANR	1203746	UnaryOperator	*		1203307	0					
ANR	1203747	Identifier	low		1203307	1					
ANR	1203748	Identifier	p		1203307	1					
ANR	1203749	IfStatement	if ( low_prev )		1203307	1					
ANR	1203750	Condition	low_prev	3200:10:77672:77679	1203307	0	True				
ANR	1203751	Identifier	low_prev		1203307	0					
ANR	1203752	CompoundStatement		85:20:2050:2050	1203307	1					
ANR	1203753	IfStatement	if ( * low > s )		1203307	0					
ANR	1203754	Condition	* low > s	3201:5:77689:77696	1203307	0	True				
ANR	1203755	RelationalExpression	* low > s		1203307	0		>			
ANR	1203756	UnaryOperationExpression	* low		1203307	0					
ANR	1203757	UnaryOperator	*		1203307	0					
ANR	1203758	Identifier	low		1203307	1					
ANR	1203759	Identifier	s		1203307	1					
ANR	1203760	ExpressionStatement	"* low_prev = onigenc_get_prev_char_head ( reg -> enc , s , p )"	3202:3:77702:77756	1203307	1	True				
ANR	1203761	AssignmentExpression	"* low_prev = onigenc_get_prev_char_head ( reg -> enc , s , p )"		1203307	0		=			
ANR	1203762	UnaryOperationExpression	* low_prev		1203307	0					
ANR	1203763	UnaryOperator	*		1203307	0					
ANR	1203764	Identifier	low_prev		1203307	1					
ANR	1203765	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , s , p )"		1203307	1					
ANR	1203766	Callee	onigenc_get_prev_char_head		1203307	0					
ANR	1203767	Identifier	onigenc_get_prev_char_head		1203307	0					
ANR	1203768	ArgumentList	reg -> enc		1203307	1					
ANR	1203769	Argument	reg -> enc		1203307	0					
ANR	1203770	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203771	Identifier	reg		1203307	0					
ANR	1203772	Identifier	enc		1203307	1					
ANR	1203773	Argument	s		1203307	1					
ANR	1203774	Identifier	s		1203307	0					
ANR	1203775	Argument	p		1203307	2					
ANR	1203776	Identifier	p		1203307	0					
ANR	1203777	ElseStatement	else		1203307	0					
ANR	1203778	ExpressionStatement	"* low_prev = onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"	3204:3:77767:77848	1203307	0	True				
ANR	1203779	AssignmentExpression	"* low_prev = onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"		1203307	0		=			
ANR	1203780	UnaryOperationExpression	* low_prev		1203307	0					
ANR	1203781	UnaryOperator	*		1203307	0					
ANR	1203782	Identifier	low_prev		1203307	1					
ANR	1203783	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , p )"		1203307	1					
ANR	1203784	Callee	onigenc_get_prev_char_head		1203307	0					
ANR	1203785	Identifier	onigenc_get_prev_char_head		1203307	0					
ANR	1203786	ArgumentList	reg -> enc		1203307	1					
ANR	1203787	Argument	reg -> enc		1203307	0					
ANR	1203788	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203789	Identifier	reg		1203307	0					
ANR	1203790	Identifier	enc		1203307	1					
ANR	1203791	Argument	pprev ? pprev : str		1203307	1					
ANR	1203792	ConditionalExpression	pprev ? pprev : str		1203307	0					
ANR	1203793	Condition	pprev		1203307	0					
ANR	1203794	Identifier	pprev		1203307	0					
ANR	1203795	Identifier	pprev		1203307	1					
ANR	1203796	Identifier	str		1203307	2					
ANR	1203797	Argument	p		1203307	2					
ANR	1203798	Identifier	p		1203307	0					
ANR	1203799	ElseStatement	else		1203307	0					
ANR	1203800	CompoundStatement		93:9:2241:2241	1203307	0					
ANR	1203801	IfStatement	if ( reg -> dmax != ONIG_INFINITE_DISTANCE )		1203307	0					
ANR	1203802	Condition	reg -> dmax != ONIG_INFINITE_DISTANCE	3209:10:77885:77919	1203307	0	True				
ANR	1203803	EqualityExpression	reg -> dmax != ONIG_INFINITE_DISTANCE		1203307	0		!=			
ANR	1203804	PtrMemberAccess	reg -> dmax		1203307	0					
ANR	1203805	Identifier	reg		1203307	0					
ANR	1203806	Identifier	dmax		1203307	1					
ANR	1203807	Identifier	ONIG_INFINITE_DISTANCE		1203307	1					
ANR	1203808	CompoundStatement		94:47:2290:2290	1203307	1					
ANR	1203809	ExpressionStatement	* low = p - reg -> dmax	3210:1:77925:77945	1203307	0	True				
ANR	1203810	AssignmentExpression	* low = p - reg -> dmax		1203307	0		=			
ANR	1203811	UnaryOperationExpression	* low		1203307	0					
ANR	1203812	UnaryOperator	*		1203307	0					
ANR	1203813	Identifier	low		1203307	1					
ANR	1203814	AdditiveExpression	p - reg -> dmax		1203307	1		-			
ANR	1203815	Identifier	p		1203307	0					
ANR	1203816	PtrMemberAccess	reg -> dmax		1203307	1					
ANR	1203817	Identifier	reg		1203307	0					
ANR	1203818	Identifier	dmax		1203307	1					
ANR	1203819	IfStatement	if ( * low > s )		1203307	1					
ANR	1203820	Condition	* low > s	3211:5:77952:77959	1203307	0	True				
ANR	1203821	RelationalExpression	* low > s		1203307	0		>			
ANR	1203822	UnaryOperationExpression	* low		1203307	0					
ANR	1203823	UnaryOperator	*		1203307	0					
ANR	1203824	Identifier	low		1203307	1					
ANR	1203825	Identifier	s		1203307	1					
ANR	1203826	CompoundStatement		96:15:2330:2330	1203307	1					
ANR	1203827	ExpressionStatement	"* low = onigenc_get_right_adjust_char_head_with_prev ( reg -> enc , s , * low , ( const UChar * * ) low_prev )"	3212:3:77967:78076	1203307	0	True				
ANR	1203828	AssignmentExpression	"* low = onigenc_get_right_adjust_char_head_with_prev ( reg -> enc , s , * low , ( const UChar * * ) low_prev )"		1203307	0		=			
ANR	1203829	UnaryOperationExpression	* low		1203307	0					
ANR	1203830	UnaryOperator	*		1203307	0					
ANR	1203831	Identifier	low		1203307	1					
ANR	1203832	CallExpression	"onigenc_get_right_adjust_char_head_with_prev ( reg -> enc , s , * low , ( const UChar * * ) low_prev )"		1203307	1					
ANR	1203833	Callee	onigenc_get_right_adjust_char_head_with_prev		1203307	0					
ANR	1203834	Identifier	onigenc_get_right_adjust_char_head_with_prev		1203307	0					
ANR	1203835	ArgumentList	reg -> enc		1203307	1					
ANR	1203836	Argument	reg -> enc		1203307	0					
ANR	1203837	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203838	Identifier	reg		1203307	0					
ANR	1203839	Identifier	enc		1203307	1					
ANR	1203840	Argument	s		1203307	1					
ANR	1203841	Identifier	s		1203307	0					
ANR	1203842	Argument	* low		1203307	2					
ANR	1203843	UnaryOperationExpression	* low		1203307	0					
ANR	1203844	UnaryOperator	*		1203307	0					
ANR	1203845	Identifier	low		1203307	1					
ANR	1203846	Argument	( const UChar * * ) low_prev		1203307	3					
ANR	1203847	CastExpression	( const UChar * * ) low_prev		1203307	0					
ANR	1203848	CastTarget	const UChar * *		1203307	0					
ANR	1203849	Identifier	low_prev		1203307	1					
ANR	1203850	IfStatement	if ( low_prev && IS_NULL ( * low_prev ) )		1203307	1					
ANR	1203851	Condition	low_prev && IS_NULL ( * low_prev )	3214:7:78085:78114	1203307	0	True				
ANR	1203852	AndExpression	low_prev && IS_NULL ( * low_prev )		1203307	0		&&			
ANR	1203853	Identifier	low_prev		1203307	0					
ANR	1203854	CallExpression	IS_NULL ( * low_prev )		1203307	1					
ANR	1203855	Callee	IS_NULL		1203307	0					
ANR	1203856	Identifier	IS_NULL		1203307	0					
ANR	1203857	ArgumentList	* low_prev		1203307	1					
ANR	1203858	Argument	* low_prev		1203307	0					
ANR	1203859	UnaryOperationExpression	* low_prev		1203307	0					
ANR	1203860	UnaryOperator	*		1203307	0					
ANR	1203861	Identifier	low_prev		1203307	1					
ANR	1203862	ExpressionStatement	"* low_prev = onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : s ) , * low )"	3215:5:78122:78206	1203307	1	True				
ANR	1203863	AssignmentExpression	"* low_prev = onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : s ) , * low )"		1203307	0		=			
ANR	1203864	UnaryOperationExpression	* low_prev		1203307	0					
ANR	1203865	UnaryOperator	*		1203307	0					
ANR	1203866	Identifier	low_prev		1203307	1					
ANR	1203867	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : s ) , * low )"		1203307	1					
ANR	1203868	Callee	onigenc_get_prev_char_head		1203307	0					
ANR	1203869	Identifier	onigenc_get_prev_char_head		1203307	0					
ANR	1203870	ArgumentList	reg -> enc		1203307	1					
ANR	1203871	Argument	reg -> enc		1203307	0					
ANR	1203872	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203873	Identifier	reg		1203307	0					
ANR	1203874	Identifier	enc		1203307	1					
ANR	1203875	Argument	pprev ? pprev : s		1203307	1					
ANR	1203876	ConditionalExpression	pprev ? pprev : s		1203307	0					
ANR	1203877	Condition	pprev		1203307	0					
ANR	1203878	Identifier	pprev		1203307	0					
ANR	1203879	Identifier	pprev		1203307	1					
ANR	1203880	Identifier	s		1203307	2					
ANR	1203881	Argument	* low		1203307	2					
ANR	1203882	UnaryOperationExpression	* low		1203307	0					
ANR	1203883	UnaryOperator	*		1203307	0					
ANR	1203884	Identifier	low		1203307	1					
ANR	1203885	ElseStatement	else		1203307	0					
ANR	1203886	CompoundStatement		103:6:2585:2585	1203307	0					
ANR	1203887	IfStatement	if ( low_prev )		1203307	0					
ANR	1203888	Condition	low_prev	3219:7:78226:78233	1203307	0	True				
ANR	1203889	Identifier	low_prev		1203307	0					
ANR	1203890	ExpressionStatement	"* low_prev = onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , * low )"	3220:5:78241:78330	1203307	1	True				
ANR	1203891	AssignmentExpression	"* low_prev = onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , * low )"		1203307	0		=			
ANR	1203892	UnaryOperationExpression	* low_prev		1203307	0					
ANR	1203893	UnaryOperator	*		1203307	0					
ANR	1203894	Identifier	low_prev		1203307	1					
ANR	1203895	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , ( pprev ? pprev : str ) , * low )"		1203307	1					
ANR	1203896	Callee	onigenc_get_prev_char_head		1203307	0					
ANR	1203897	Identifier	onigenc_get_prev_char_head		1203307	0					
ANR	1203898	ArgumentList	reg -> enc		1203307	1					
ANR	1203899	Argument	reg -> enc		1203307	0					
ANR	1203900	PtrMemberAccess	reg -> enc		1203307	0					
ANR	1203901	Identifier	reg		1203307	0					
ANR	1203902	Identifier	enc		1203307	1					
ANR	1203903	Argument	pprev ? pprev : str		1203307	1					
ANR	1203904	ConditionalExpression	pprev ? pprev : str		1203307	0					
ANR	1203905	Condition	pprev		1203307	0					
ANR	1203906	Identifier	pprev		1203307	0					
ANR	1203907	Identifier	pprev		1203307	1					
ANR	1203908	Identifier	str		1203307	2					
ANR	1203909	Argument	* low		1203307	2					
ANR	1203910	UnaryOperationExpression	* low		1203307	0					
ANR	1203911	UnaryOperator	*		1203307	0					
ANR	1203912	Identifier	low		1203307	1					
ANR	1203913	ExpressionStatement	* high = p - reg -> dmin	3226:4:78423:78444	1203307	3	True				
ANR	1203914	AssignmentExpression	* high = p - reg -> dmin		1203307	0		=			
ANR	1203915	UnaryOperationExpression	* high		1203307	0					
ANR	1203916	UnaryOperator	*		1203307	0					
ANR	1203917	Identifier	high		1203307	1					
ANR	1203918	AdditiveExpression	p - reg -> dmin		1203307	1		-			
ANR	1203919	Identifier	p		1203307	0					
ANR	1203920	PtrMemberAccess	reg -> dmin		1203307	1					
ANR	1203921	Identifier	reg		1203307	0					
ANR	1203922	Identifier	dmin		1203307	1					
ANR	1203923	ExpressionStatement	"fprintf ( stderr , ""forward_search_range success: low: %d, high: %d, dmin: %d, dmax: %d\\n"" , ( int ) ( * low - str ) , ( int ) ( * high - str ) , reg -> dmin , reg -> dmax )"	3229:4:78476:78636	1203307	4	True				
ANR	1203924	CallExpression	"fprintf ( stderr , ""forward_search_range success: low: %d, high: %d, dmin: %d, dmax: %d\\n"" , ( int ) ( * low - str ) , ( int ) ( * high - str ) , reg -> dmin , reg -> dmax )"		1203307	0					
ANR	1203925	Callee	fprintf		1203307	0					
ANR	1203926	Identifier	fprintf		1203307	0					
ANR	1203927	ArgumentList	stderr		1203307	1					
ANR	1203928	Argument	stderr		1203307	0					
ANR	1203929	Identifier	stderr		1203307	0					
ANR	1203930	Argument	"""forward_search_range success: low: %d, high: %d, dmin: %d, dmax: %d\\n"""		1203307	1					
ANR	1203931	PrimaryExpression	"""forward_search_range success: low: %d, high: %d, dmin: %d, dmax: %d\\n"""		1203307	0					
ANR	1203932	Argument	( int ) ( * low - str )		1203307	2					
ANR	1203933	CastExpression	( int ) ( * low - str )		1203307	0					
ANR	1203934	CastTarget	int		1203307	0					
ANR	1203935	AdditiveExpression	* low - str		1203307	1		-			
ANR	1203936	UnaryOperationExpression	* low		1203307	0					
ANR	1203937	UnaryOperator	*		1203307	0					
ANR	1203938	Identifier	low		1203307	1					
ANR	1203939	Identifier	str		1203307	1					
ANR	1203940	Argument	( int ) ( * high - str )		1203307	3					
ANR	1203941	CastExpression	( int ) ( * high - str )		1203307	0					
ANR	1203942	CastTarget	int		1203307	0					
ANR	1203943	AdditiveExpression	* high - str		1203307	1		-			
ANR	1203944	UnaryOperationExpression	* high		1203307	0					
ANR	1203945	UnaryOperator	*		1203307	0					
ANR	1203946	Identifier	high		1203307	1					
ANR	1203947	Identifier	str		1203307	1					
ANR	1203948	Argument	reg -> dmin		1203307	4					
ANR	1203949	PtrMemberAccess	reg -> dmin		1203307	0					
ANR	1203950	Identifier	reg		1203307	0					
ANR	1203951	Identifier	dmin		1203307	1					
ANR	1203952	Argument	reg -> dmax		1203307	5					
ANR	1203953	PtrMemberAccess	reg -> dmax		1203307	0					
ANR	1203954	Identifier	reg		1203307	0					
ANR	1203955	Identifier	dmax		1203307	1					
ANR	1203956	ReturnStatement	return 1 ;	3233:4:78649:78657	1203307	5	True				
ANR	1203957	PrimaryExpression	1		1203307	0					
ANR	1203958	ReturnStatement	return 0 ;	3236:2:78680:78688	1203307	7	True				
ANR	1203959	PrimaryExpression	0		1203307	0					
ANR	1203960	ReturnType	static int		1203307	1					
ANR	1203961	Identifier	forward_search_range		1203307	2					
ANR	1203962	ParameterList	"regex_t * reg , const UChar * str , const UChar * end , UChar * s , UChar * range , UChar * * low , UChar * * high , UChar * * low_prev"		1203307	3					
ANR	1203963	Parameter	regex_t * reg	3114:21:75505:75516	1203307	0	True				
ANR	1203964	ParameterType	regex_t *		1203307	0					
ANR	1203965	Identifier	reg		1203307	1					
ANR	1203966	Parameter	const UChar * str	3114:35:75519:75534	1203307	1	True				
ANR	1203967	ParameterType	const UChar *		1203307	0					
ANR	1203968	Identifier	str		1203307	1					
ANR	1203969	Parameter	const UChar * end	3114:53:75537:75552	1203307	2	True				
ANR	1203970	ParameterType	const UChar *		1203307	0					
ANR	1203971	Identifier	end		1203307	1					
ANR	1203972	Parameter	UChar * s	3114:71:75555:75562	1203307	3	True				
ANR	1203973	ParameterType	UChar *		1203307	0					
ANR	1203974	Identifier	s		1203307	1					
ANR	1203975	Parameter	UChar * range	3115:7:75572:75583	1203307	4	True				
ANR	1203976	ParameterType	UChar *		1203307	0					
ANR	1203977	Identifier	range		1203307	1					
ANR	1203978	Parameter	UChar * * low	3115:21:75586:75596	1203307	5	True				
ANR	1203979	ParameterType	UChar * *		1203307	0					
ANR	1203980	Identifier	low		1203307	1					
ANR	1203981	Parameter	UChar * * high	3115:34:75599:75610	1203307	6	True				
ANR	1203982	ParameterType	UChar * *		1203307	0					
ANR	1203983	Identifier	high		1203307	1					
ANR	1203984	Parameter	UChar * * low_prev	3115:48:75613:75628	1203307	7	True				
ANR	1203985	ParameterType	UChar * *		1203307	0					
ANR	1203986	Identifier	low_prev		1203307	1					
ANR	1203987	CFGEntryNode	ENTRY		1203307		True				
ANR	1203988	CFGExitNode	EXIT		1203307		True				
ANR	1203989	Symbol	onigenc_get_right_adjust_char_head_with_prev		1203307						
ANR	1203990	Symbol	reg -> dmin		1203307						
ANR	1203991	Symbol	prev		1203307						
ANR	1203992	Symbol	* high		1203307						
ANR	1203993	Symbol	onigenc_get_prev_char_head		1203307						
ANR	1203994	Symbol	range		1203307						
ANR	1203995	Symbol	ON_STR_BEGIN		1203307						
ANR	1203996	Symbol	map_search		1203307						
ANR	1203997	Symbol	ONIGENC_IS_MBC_NEWLINE		1203307						
ANR	1203998	Symbol	reg -> exact_end		1203307						
ANR	1203999	Symbol	ONIG_INFINITE_DISTANCE		1203307						
ANR	1204000	Symbol	high		1203307						
ANR	1204001	Symbol	ON_STR_END		1203307						
ANR	1204002	Symbol	IS_NULL		1203307						
ANR	1204003	Symbol	reg		1203307						
ANR	1204004	Symbol	low		1203307						
ANR	1204005	Symbol	reg -> optimize		1203307						
ANR	1204006	Symbol	reg -> sub_anchor		1203307						
ANR	1204007	Symbol	* low_prev		1203307						
ANR	1204008	Symbol	end		1203307						
ANR	1204009	Symbol	slow_search		1203307						
ANR	1204010	Symbol	ONIGENC_IS_SINGLEBYTE		1203307						
ANR	1204011	Symbol	bm_search		1203307						
ANR	1204012	Symbol	reg -> map		1203307						
ANR	1204013	Symbol	NULL		1203307						
ANR	1204014	Symbol	low_prev		1203307						
ANR	1204015	Symbol	stderr		1203307						
ANR	1204016	Symbol	enclen		1203307						
ANR	1204017	Symbol	reg -> enc		1203307						
ANR	1204018	Symbol	slow_search_ic		1203307						
ANR	1204019	Symbol	str		1203307						
ANR	1204020	Symbol	p		1203307						
ANR	1204021	Symbol	q		1203307						
ANR	1204022	Symbol	s		1203307						
ANR	1204023	Symbol	reg -> dmax		1203307						
ANR	1204024	Symbol	reg -> exact		1203307						
ANR	1204025	Symbol	reg -> case_fold_flag		1203307						
ANR	1204026	Symbol	bm_search_notrev		1203307						
ANR	1204027	Symbol	pprev		1203307						
ANR	1204028	Symbol	* reg		1203307						
ANR	1204029	Symbol	* low		1203307						
ANR	1204030	Function	backward_search_range	3244:0:78854:81497							
ANR	1204031	FunctionDef	"backward_search_range (regex_t * reg , const UChar * str , const UChar * end , UChar * s , const UChar * range , UChar * adjrange , UChar * * low , UChar * * high)"		1204030	0					
ANR	1204032	CompoundStatement		3248:0:79027:81497	1204030	0					
ANR	1204033	IdentifierDeclStatement	int r ;	3249:2:79031:79036	1204030	0	True				
ANR	1204034	IdentifierDecl	r		1204030	0					
ANR	1204035	IdentifierDeclType	int		1204030	0					
ANR	1204036	Identifier	r		1204030	1					
ANR	1204037	IdentifierDeclStatement	UChar * p ;	3250:2:79040:79048	1204030	1	True				
ANR	1204038	IdentifierDecl	* p		1204030	0					
ANR	1204039	IdentifierDeclType	UChar *		1204030	0					
ANR	1204040	Identifier	p		1204030	1					
ANR	1204041	ExpressionStatement	range += reg -> dmin	3252:2:79053:79071	1204030	2	True				
ANR	1204042	AssignmentExpression	range += reg -> dmin		1204030	0		+=			
ANR	1204043	Identifier	range		1204030	0					
ANR	1204044	PtrMemberAccess	reg -> dmin		1204030	1					
ANR	1204045	Identifier	reg		1204030	0					
ANR	1204046	Identifier	dmin		1204030	1					
ANR	1204047	ExpressionStatement	p = s	3253:2:79075:79080	1204030	3	True				
ANR	1204048	AssignmentExpression	p = s		1204030	0		=			
ANR	1204049	Identifier	p		1204030	0					
ANR	1204050	Identifier	s		1204030	1					
ANR	1204051	Label	retry :	3255:1:79084:79089	1204030	4	True				
ANR	1204052	Identifier	retry		1204030	0					
ANR	1204053	SwitchStatement	switch ( reg -> optimize )		1204030	5					
ANR	1204054	Condition	reg -> optimize	3256:10:79101:79113	1204030	0	True				
ANR	1204055	PtrMemberAccess	reg -> optimize		1204030	0					
ANR	1204056	Identifier	reg		1204030	0					
ANR	1204057	Identifier	optimize		1204030	1					
ANR	1204058	CompoundStatement		9:25:88:88	1204030	1					
ANR	1204059	Label	case ONIG_OPTIMIZE_EXACT :	3257:2:79120:79144	1204030	0	True				
ANR	1204060	Identifier	ONIG_OPTIMIZE_EXACT		1204030	0					
ANR	1204061	Label	exact_method :	3258:2:79148:79160	1204030	1	True				
ANR	1204062	Identifier	exact_method		1204030	0					
ANR	1204063	ExpressionStatement	"p = slow_search_backward ( reg -> enc , reg -> exact , reg -> exact_end , range , adjrange , end , p )"	3259:4:79166:79261	1204030	2	True				
ANR	1204064	AssignmentExpression	"p = slow_search_backward ( reg -> enc , reg -> exact , reg -> exact_end , range , adjrange , end , p )"		1204030	0		=			
ANR	1204065	Identifier	p		1204030	0					
ANR	1204066	CallExpression	"slow_search_backward ( reg -> enc , reg -> exact , reg -> exact_end , range , adjrange , end , p )"		1204030	1					
ANR	1204067	Callee	slow_search_backward		1204030	0					
ANR	1204068	Identifier	slow_search_backward		1204030	0					
ANR	1204069	ArgumentList	reg -> enc		1204030	1					
ANR	1204070	Argument	reg -> enc		1204030	0					
ANR	1204071	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204072	Identifier	reg		1204030	0					
ANR	1204073	Identifier	enc		1204030	1					
ANR	1204074	Argument	reg -> exact		1204030	1					
ANR	1204075	PtrMemberAccess	reg -> exact		1204030	0					
ANR	1204076	Identifier	reg		1204030	0					
ANR	1204077	Identifier	exact		1204030	1					
ANR	1204078	Argument	reg -> exact_end		1204030	2					
ANR	1204079	PtrMemberAccess	reg -> exact_end		1204030	0					
ANR	1204080	Identifier	reg		1204030	0					
ANR	1204081	Identifier	exact_end		1204030	1					
ANR	1204082	Argument	range		1204030	3					
ANR	1204083	Identifier	range		1204030	0					
ANR	1204084	Argument	adjrange		1204030	4					
ANR	1204085	Identifier	adjrange		1204030	0					
ANR	1204086	Argument	end		1204030	5					
ANR	1204087	Identifier	end		1204030	0					
ANR	1204088	Argument	p		1204030	6					
ANR	1204089	Identifier	p		1204030	0					
ANR	1204090	BreakStatement	break ;	3261:4:79267:79272	1204030	3	True				
ANR	1204091	Label	case ONIG_OPTIMIZE_EXACT_IC :	3263:2:79277:79304	1204030	4	True				
ANR	1204092	Identifier	ONIG_OPTIMIZE_EXACT_IC		1204030	0					
ANR	1204093	ExpressionStatement	"p = slow_search_backward_ic ( reg -> enc , reg -> case_fold_flag , reg -> exact , reg -> exact_end , range , adjrange , end , p )"	3264:4:79310:79485	1204030	5	True				
ANR	1204094	AssignmentExpression	"p = slow_search_backward_ic ( reg -> enc , reg -> case_fold_flag , reg -> exact , reg -> exact_end , range , adjrange , end , p )"		1204030	0		=			
ANR	1204095	Identifier	p		1204030	0					
ANR	1204096	CallExpression	"slow_search_backward_ic ( reg -> enc , reg -> case_fold_flag , reg -> exact , reg -> exact_end , range , adjrange , end , p )"		1204030	1					
ANR	1204097	Callee	slow_search_backward_ic		1204030	0					
ANR	1204098	Identifier	slow_search_backward_ic		1204030	0					
ANR	1204099	ArgumentList	reg -> enc		1204030	1					
ANR	1204100	Argument	reg -> enc		1204030	0					
ANR	1204101	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204102	Identifier	reg		1204030	0					
ANR	1204103	Identifier	enc		1204030	1					
ANR	1204104	Argument	reg -> case_fold_flag		1204030	1					
ANR	1204105	PtrMemberAccess	reg -> case_fold_flag		1204030	0					
ANR	1204106	Identifier	reg		1204030	0					
ANR	1204107	Identifier	case_fold_flag		1204030	1					
ANR	1204108	Argument	reg -> exact		1204030	2					
ANR	1204109	PtrMemberAccess	reg -> exact		1204030	0					
ANR	1204110	Identifier	reg		1204030	0					
ANR	1204111	Identifier	exact		1204030	1					
ANR	1204112	Argument	reg -> exact_end		1204030	3					
ANR	1204113	PtrMemberAccess	reg -> exact_end		1204030	0					
ANR	1204114	Identifier	reg		1204030	0					
ANR	1204115	Identifier	exact_end		1204030	1					
ANR	1204116	Argument	range		1204030	4					
ANR	1204117	Identifier	range		1204030	0					
ANR	1204118	Argument	adjrange		1204030	5					
ANR	1204119	Identifier	adjrange		1204030	0					
ANR	1204120	Argument	end		1204030	6					
ANR	1204121	Identifier	end		1204030	0					
ANR	1204122	Argument	p		1204030	7					
ANR	1204123	Identifier	p		1204030	0					
ANR	1204124	BreakStatement	break ;	3267:4:79491:79496	1204030	6	True				
ANR	1204125	Label	case ONIG_OPTIMIZE_EXACT_BM :	3269:2:79501:79528	1204030	7	True				
ANR	1204126	Identifier	ONIG_OPTIMIZE_EXACT_BM		1204030	0					
ANR	1204127	Label	case ONIG_OPTIMIZE_EXACT_BM_NOT_REV :	3270:2:79532:79567	1204030	8	True				
ANR	1204128	Identifier	ONIG_OPTIMIZE_EXACT_BM_NOT_REV		1204030	0					
ANR	1204129	IfStatement	if ( IS_NULL ( reg -> int_map_backward ) )		1204030	9					
ANR	1204130	Condition	IS_NULL ( reg -> int_map_backward )	3271:8:79577:79606	1204030	0	True				
ANR	1204131	CallExpression	IS_NULL ( reg -> int_map_backward )		1204030	0					
ANR	1204132	Callee	IS_NULL		1204030	0					
ANR	1204133	Identifier	IS_NULL		1204030	0					
ANR	1204134	ArgumentList	reg -> int_map_backward		1204030	1					
ANR	1204135	Argument	reg -> int_map_backward		1204030	0					
ANR	1204136	PtrMemberAccess	reg -> int_map_backward		1204030	0					
ANR	1204137	Identifier	reg		1204030	0					
ANR	1204138	Identifier	int_map_backward		1204030	1					
ANR	1204139	CompoundStatement		24:40:581:581	1204030	1					
ANR	1204140	IfStatement	if ( s - range < BM_BACKWARD_SEARCH_LENGTH_THRESHOLD )		1204030	0					
ANR	1204141	Condition	s - range < BM_BACKWARD_SEARCH_LENGTH_THRESHOLD	3272:10:79621:79667	1204030	0	True				
ANR	1204142	RelationalExpression	s - range < BM_BACKWARD_SEARCH_LENGTH_THRESHOLD		1204030	0		<			
ANR	1204143	AdditiveExpression	s - range		1204030	0		-			
ANR	1204144	Identifier	s		1204030	0					
ANR	1204145	Identifier	range		1204030	1					
ANR	1204146	Identifier	BM_BACKWARD_SEARCH_LENGTH_THRESHOLD		1204030	1					
ANR	1204147	GotoStatement	goto exact_method ;	3273:1:79671:79688	1204030	1	True				
ANR	1204148	Identifier	exact_method		1204030	0					
ANR	1204149	ExpressionStatement	"r = set_bm_backward_skip ( reg -> exact , reg -> exact_end , reg -> enc , & ( reg -> int_map_backward ) )"	3275:6:79697:79795	1204030	1	True				
ANR	1204150	AssignmentExpression	"r = set_bm_backward_skip ( reg -> exact , reg -> exact_end , reg -> enc , & ( reg -> int_map_backward ) )"		1204030	0		=			
ANR	1204151	Identifier	r		1204030	0					
ANR	1204152	CallExpression	"set_bm_backward_skip ( reg -> exact , reg -> exact_end , reg -> enc , & ( reg -> int_map_backward ) )"		1204030	1					
ANR	1204153	Callee	set_bm_backward_skip		1204030	0					
ANR	1204154	Identifier	set_bm_backward_skip		1204030	0					
ANR	1204155	ArgumentList	reg -> exact		1204030	1					
ANR	1204156	Argument	reg -> exact		1204030	0					
ANR	1204157	PtrMemberAccess	reg -> exact		1204030	0					
ANR	1204158	Identifier	reg		1204030	0					
ANR	1204159	Identifier	exact		1204030	1					
ANR	1204160	Argument	reg -> exact_end		1204030	1					
ANR	1204161	PtrMemberAccess	reg -> exact_end		1204030	0					
ANR	1204162	Identifier	reg		1204030	0					
ANR	1204163	Identifier	exact_end		1204030	1					
ANR	1204164	Argument	reg -> enc		1204030	2					
ANR	1204165	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204166	Identifier	reg		1204030	0					
ANR	1204167	Identifier	enc		1204030	1					
ANR	1204168	Argument	& ( reg -> int_map_backward )		1204030	3					
ANR	1204169	UnaryOperationExpression	& ( reg -> int_map_backward )		1204030	0					
ANR	1204170	UnaryOperator	&		1204030	0					
ANR	1204171	PtrMemberAccess	reg -> int_map_backward		1204030	1					
ANR	1204172	Identifier	reg		1204030	0					
ANR	1204173	Identifier	int_map_backward		1204030	1					
ANR	1204174	IfStatement	if ( r )		1204030	2					
ANR	1204175	Condition	r	3277:10:79807:79807	1204030	0	True				
ANR	1204176	Identifier	r		1204030	0					
ANR	1204177	ReturnStatement	return r ;	3277:13:79810:79818	1204030	1	True				
ANR	1204178	Identifier	r		1204030	0					
ANR	1204179	ExpressionStatement	"p = bm_search_backward ( reg , reg -> exact , reg -> exact_end , range , adjrange , end , p )"	3279:4:79830:79916	1204030	10	True				
ANR	1204180	AssignmentExpression	"p = bm_search_backward ( reg , reg -> exact , reg -> exact_end , range , adjrange , end , p )"		1204030	0		=			
ANR	1204181	Identifier	p		1204030	0					
ANR	1204182	CallExpression	"bm_search_backward ( reg , reg -> exact , reg -> exact_end , range , adjrange , end , p )"		1204030	1					
ANR	1204183	Callee	bm_search_backward		1204030	0					
ANR	1204184	Identifier	bm_search_backward		1204030	0					
ANR	1204185	ArgumentList	reg		1204030	1					
ANR	1204186	Argument	reg		1204030	0					
ANR	1204187	Identifier	reg		1204030	0					
ANR	1204188	Argument	reg -> exact		1204030	1					
ANR	1204189	PtrMemberAccess	reg -> exact		1204030	0					
ANR	1204190	Identifier	reg		1204030	0					
ANR	1204191	Identifier	exact		1204030	1					
ANR	1204192	Argument	reg -> exact_end		1204030	2					
ANR	1204193	PtrMemberAccess	reg -> exact_end		1204030	0					
ANR	1204194	Identifier	reg		1204030	0					
ANR	1204195	Identifier	exact_end		1204030	1					
ANR	1204196	Argument	range		1204030	3					
ANR	1204197	Identifier	range		1204030	0					
ANR	1204198	Argument	adjrange		1204030	4					
ANR	1204199	Identifier	adjrange		1204030	0					
ANR	1204200	Argument	end		1204030	5					
ANR	1204201	Identifier	end		1204030	0					
ANR	1204202	Argument	p		1204030	6					
ANR	1204203	Identifier	p		1204030	0					
ANR	1204204	BreakStatement	break ;	3281:4:79922:79927	1204030	11	True				
ANR	1204205	Label	case ONIG_OPTIMIZE_MAP :	3283:2:79932:79954	1204030	12	True				
ANR	1204206	Identifier	ONIG_OPTIMIZE_MAP		1204030	0					
ANR	1204207	ExpressionStatement	"p = map_search_backward ( reg -> enc , reg -> map , range , adjrange , p )"	3284:4:79960:80023	1204030	13	True				
ANR	1204208	AssignmentExpression	"p = map_search_backward ( reg -> enc , reg -> map , range , adjrange , p )"		1204030	0		=			
ANR	1204209	Identifier	p		1204030	0					
ANR	1204210	CallExpression	"map_search_backward ( reg -> enc , reg -> map , range , adjrange , p )"		1204030	1					
ANR	1204211	Callee	map_search_backward		1204030	0					
ANR	1204212	Identifier	map_search_backward		1204030	0					
ANR	1204213	ArgumentList	reg -> enc		1204030	1					
ANR	1204214	Argument	reg -> enc		1204030	0					
ANR	1204215	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204216	Identifier	reg		1204030	0					
ANR	1204217	Identifier	enc		1204030	1					
ANR	1204218	Argument	reg -> map		1204030	1					
ANR	1204219	PtrMemberAccess	reg -> map		1204030	0					
ANR	1204220	Identifier	reg		1204030	0					
ANR	1204221	Identifier	map		1204030	1					
ANR	1204222	Argument	range		1204030	2					
ANR	1204223	Identifier	range		1204030	0					
ANR	1204224	Argument	adjrange		1204030	3					
ANR	1204225	Identifier	adjrange		1204030	0					
ANR	1204226	Argument	p		1204030	4					
ANR	1204227	Identifier	p		1204030	0					
ANR	1204228	BreakStatement	break ;	3285:4:80029:80034	1204030	14	True				
ANR	1204229	IfStatement	if ( p )		1204030	6					
ANR	1204230	Condition	p	3288:6:80047:80047	1204030	0	True				
ANR	1204231	Identifier	p		1204030	0					
ANR	1204232	CompoundStatement		41:9:1022:1022	1204030	1					
ANR	1204233	IfStatement	if ( reg -> sub_anchor )		1204030	0					
ANR	1204234	Condition	reg -> sub_anchor	3289:8:80060:80074	1204030	0	True				
ANR	1204235	PtrMemberAccess	reg -> sub_anchor		1204030	0					
ANR	1204236	Identifier	reg		1204030	0					
ANR	1204237	Identifier	sub_anchor		1204030	1					
ANR	1204238	CompoundStatement		43:6:1057:1068	1204030	1					
ANR	1204239	IdentifierDeclStatement	UChar * prev ;	3290:6:80085:80096	1204030	0	True				
ANR	1204240	IdentifierDecl	* prev		1204030	0					
ANR	1204241	IdentifierDeclType	UChar *		1204030	0					
ANR	1204242	Identifier	prev		1204030	1					
ANR	1204243	SwitchStatement	switch ( reg -> sub_anchor )		1204030	1					
ANR	1204244	Condition	reg -> sub_anchor	3292:14:80113:80127	1204030	0	True				
ANR	1204245	PtrMemberAccess	reg -> sub_anchor		1204030	0					
ANR	1204246	Identifier	reg		1204030	0					
ANR	1204247	Identifier	sub_anchor		1204030	1					
ANR	1204248	CompoundStatement		45:31:1102:1102	1204030	1					
ANR	1204249	Label	case ANCHOR_BEGIN_LINE :	3293:6:80138:80160	1204030	0	True				
ANR	1204250	Identifier	ANCHOR_BEGIN_LINE		1204030	0					
ANR	1204251	IfStatement	if ( ! ON_STR_BEGIN ( p ) )		1204030	1					
ANR	1204252	Condition	! ON_STR_BEGIN ( p )	3294:5:80167:80182	1204030	0	True				
ANR	1204253	UnaryOperationExpression	! ON_STR_BEGIN ( p )		1204030	0					
ANR	1204254	UnaryOperator	!		1204030	0					
ANR	1204255	CallExpression	ON_STR_BEGIN ( p )		1204030	1					
ANR	1204256	Callee	ON_STR_BEGIN		1204030	0					
ANR	1204257	Identifier	ON_STR_BEGIN		1204030	0					
ANR	1204258	ArgumentList	p		1204030	1					
ANR	1204259	Argument	p		1204030	0					
ANR	1204260	Identifier	p		1204030	0					
ANR	1204261	CompoundStatement		47:23:1157:1157	1204030	1					
ANR	1204262	ExpressionStatement	"prev = onigenc_get_prev_char_head ( reg -> enc , str , p )"	3295:3:80190:80241	1204030	0	True				
ANR	1204263	AssignmentExpression	"prev = onigenc_get_prev_char_head ( reg -> enc , str , p )"		1204030	0		=			
ANR	1204264	Identifier	prev		1204030	0					
ANR	1204265	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , str , p )"		1204030	1					
ANR	1204266	Callee	onigenc_get_prev_char_head		1204030	0					
ANR	1204267	Identifier	onigenc_get_prev_char_head		1204030	0					
ANR	1204268	ArgumentList	reg -> enc		1204030	1					
ANR	1204269	Argument	reg -> enc		1204030	0					
ANR	1204270	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204271	Identifier	reg		1204030	0					
ANR	1204272	Identifier	enc		1204030	1					
ANR	1204273	Argument	str		1204030	1					
ANR	1204274	Identifier	str		1204030	0					
ANR	1204275	Argument	p		1204030	2					
ANR	1204276	Identifier	p		1204030	0					
ANR	1204277	IfStatement	"if ( ! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end ) )"		1204030	1					
ANR	1204278	Condition	"! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"	3296:7:80250:80293	1204030	0	True				
ANR	1204279	UnaryOperationExpression	"! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"		1204030	0					
ANR	1204280	UnaryOperator	!		1204030	0					
ANR	1204281	CallExpression	"ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"		1204030	1					
ANR	1204282	Callee	ONIGENC_IS_MBC_NEWLINE		1204030	0					
ANR	1204283	Identifier	ONIGENC_IS_MBC_NEWLINE		1204030	0					
ANR	1204284	ArgumentList	reg -> enc		1204030	1					
ANR	1204285	Argument	reg -> enc		1204030	0					
ANR	1204286	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204287	Identifier	reg		1204030	0					
ANR	1204288	Identifier	enc		1204030	1					
ANR	1204289	Argument	prev		1204030	1					
ANR	1204290	Identifier	prev		1204030	0					
ANR	1204291	Argument	end		1204030	2					
ANR	1204292	Identifier	end		1204030	0					
ANR	1204293	CompoundStatement		49:53:1268:1268	1204030	1					
ANR	1204294	ExpressionStatement	p = prev	3297:5:80303:80311	1204030	0	True				
ANR	1204295	AssignmentExpression	p = prev		1204030	0		=			
ANR	1204296	Identifier	p		1204030	0					
ANR	1204297	Identifier	prev		1204030	1					
ANR	1204298	GotoStatement	goto retry ;	3298:5:80318:80328	1204030	1	True				
ANR	1204299	Identifier	retry		1204030	0					
ANR	1204300	BreakStatement	break ;	3301:1:80339:80344	1204030	2	True				
ANR	1204301	Label	case ANCHOR_END_LINE :	3303:6:80353:80373	1204030	3	True				
ANR	1204302	Identifier	ANCHOR_END_LINE		1204030	0					
ANR	1204303	IfStatement	if ( ON_STR_END ( p ) )		1204030	4					
ANR	1204304	Condition	ON_STR_END ( p )	3304:5:80380:80392	1204030	0	True				
ANR	1204305	CallExpression	ON_STR_END ( p )		1204030	0					
ANR	1204306	Callee	ON_STR_END		1204030	0					
ANR	1204307	Identifier	ON_STR_END		1204030	0					
ANR	1204308	ArgumentList	p		1204030	1					
ANR	1204309	Argument	p		1204030	0					
ANR	1204310	Identifier	p		1204030	0					
ANR	1204311	CompoundStatement		57:20:1367:1367	1204030	1					
ANR	1204312	ExpressionStatement	"prev = onigenc_get_prev_char_head ( reg -> enc , adjrange , p )"	3306:3:80452:80508	1204030	0	True				
ANR	1204313	AssignmentExpression	"prev = onigenc_get_prev_char_head ( reg -> enc , adjrange , p )"		1204030	0		=			
ANR	1204314	Identifier	prev		1204030	0					
ANR	1204315	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , adjrange , p )"		1204030	1					
ANR	1204316	Callee	onigenc_get_prev_char_head		1204030	0					
ANR	1204317	Identifier	onigenc_get_prev_char_head		1204030	0					
ANR	1204318	ArgumentList	reg -> enc		1204030	1					
ANR	1204319	Argument	reg -> enc		1204030	0					
ANR	1204320	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204321	Identifier	reg		1204030	0					
ANR	1204322	Identifier	enc		1204030	1					
ANR	1204323	Argument	adjrange		1204030	1					
ANR	1204324	Identifier	adjrange		1204030	0					
ANR	1204325	Argument	p		1204030	2					
ANR	1204326	Identifier	p		1204030	0					
ANR	1204327	IfStatement	if ( IS_NULL ( prev ) )		1204030	1					
ANR	1204328	Condition	IS_NULL ( prev )	3307:7:80517:80529	1204030	0	True				
ANR	1204329	CallExpression	IS_NULL ( prev )		1204030	0					
ANR	1204330	Callee	IS_NULL		1204030	0					
ANR	1204331	Identifier	IS_NULL		1204030	0					
ANR	1204332	ArgumentList	prev		1204030	1					
ANR	1204333	Argument	prev		1204030	0					
ANR	1204334	Identifier	prev		1204030	0					
ANR	1204335	GotoStatement	goto fail ;	3307:22:80532:80541	1204030	1	True				
ANR	1204336	Identifier	fail		1204030	0					
ANR	1204337	IfStatement	"if ( ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end ) )"		1204030	2					
ANR	1204338	Condition	"ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"	3308:7:80550:80592	1204030	0	True				
ANR	1204339	CallExpression	"ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"		1204030	0					
ANR	1204340	Callee	ONIGENC_IS_MBC_NEWLINE		1204030	0					
ANR	1204341	Identifier	ONIGENC_IS_MBC_NEWLINE		1204030	0					
ANR	1204342	ArgumentList	reg -> enc		1204030	1					
ANR	1204343	Argument	reg -> enc		1204030	0					
ANR	1204344	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204345	Identifier	reg		1204030	0					
ANR	1204346	Identifier	enc		1204030	1					
ANR	1204347	Argument	prev		1204030	1					
ANR	1204348	Identifier	prev		1204030	0					
ANR	1204349	Argument	end		1204030	2					
ANR	1204350	Identifier	end		1204030	0					
ANR	1204351	CompoundStatement		61:52:1567:1567	1204030	1					
ANR	1204352	ExpressionStatement	p = prev	3309:5:80602:80610	1204030	0	True				
ANR	1204353	AssignmentExpression	p = prev		1204030	0		=			
ANR	1204354	Identifier	p		1204030	0					
ANR	1204355	Identifier	prev		1204030	1					
ANR	1204356	GotoStatement	goto retry ;	3310:5:80617:80627	1204030	1	True				
ANR	1204357	Identifier	retry		1204030	0					
ANR	1204358	ElseStatement	else		1204030	0					
ANR	1204359	Statement	if	3314:6:80650:80651	1204030	0	True				
ANR	1204360	Statement	(	3314:9:80653:80653	1204030	5	True				
ANR	1204361	Statement	!	3314:10:80654:80654	1204030	6	True				
ANR	1204362	Statement	ONIGENC_IS_MBC_NEWLINE	3314:12:80656:80677	1204030	7	True				
ANR	1204363	Statement	(	3314:34:80678:80678	1204030	8	True				
ANR	1204364	Statement	reg	3314:35:80679:80681	1204030	9	True				
ANR	1204365	Statement	->	3314:38:80682:80683	1204030	10	True				
ANR	1204366	Statement	enc	3314:40:80684:80686	1204030	11	True				
ANR	1204367	Statement	","	3314:43:80687:80687	1204030	12	True				
ANR	1204368	Statement	p	3314:45:80689:80689	1204030	13	True				
ANR	1204369	Statement	","	3314:46:80690:80690	1204030	14	True				
ANR	1204370	Statement	end	3314:48:80692:80694	1204030	15	True				
ANR	1204371	Statement	)	3314:51:80695:80695	1204030	16	True				
ANR	1204372	Statement	&&	3316:14:80746:80747	1204030	17	True				
ANR	1204373	Statement	!	3316:17:80749:80749	1204030	18	True				
ANR	1204374	Statement	ONIGENC_IS_MBC_CRNL	3316:19:80751:80769	1204030	19	True				
ANR	1204375	Statement	(	3316:38:80770:80770	1204030	20	True				
ANR	1204376	Statement	reg	3316:39:80771:80773	1204030	21	True				
ANR	1204377	Statement	->	3316:42:80774:80775	1204030	22	True				
ANR	1204378	Statement	enc	3316:44:80776:80778	1204030	23	True				
ANR	1204379	Statement	","	3316:47:80779:80779	1204030	24	True				
ANR	1204380	Statement	p	3316:49:80781:80781	1204030	25	True				
ANR	1204381	Statement	","	3316:50:80782:80782	1204030	26	True				
ANR	1204382	Statement	end	3316:52:80784:80786	1204030	27	True				
ANR	1204383	Statement	)	3316:55:80787:80787	1204030	28	True				
ANR	1204384	Statement	)	3318:16:80812:80812	1204030	29	True				
ANR	1204385	CompoundStatement		71:18:1786:1786	1204030	30					
ANR	1204386	ExpressionStatement	"p = onigenc_get_prev_char_head ( reg -> enc , adjrange , p )"	3319:3:80819:80872	1204030	0	True				
ANR	1204387	AssignmentExpression	"p = onigenc_get_prev_char_head ( reg -> enc , adjrange , p )"		1204030	0		=			
ANR	1204388	Identifier	p		1204030	0					
ANR	1204389	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , adjrange , p )"		1204030	1					
ANR	1204390	Callee	onigenc_get_prev_char_head		1204030	0					
ANR	1204391	Identifier	onigenc_get_prev_char_head		1204030	0					
ANR	1204392	ArgumentList	reg -> enc		1204030	1					
ANR	1204393	Argument	reg -> enc		1204030	0					
ANR	1204394	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204395	Identifier	reg		1204030	0					
ANR	1204396	Identifier	enc		1204030	1					
ANR	1204397	Argument	adjrange		1204030	1					
ANR	1204398	Identifier	adjrange		1204030	0					
ANR	1204399	Argument	p		1204030	2					
ANR	1204400	Identifier	p		1204030	0					
ANR	1204401	IfStatement	if ( IS_NULL ( p ) )		1204030	1					
ANR	1204402	Condition	IS_NULL ( p )	3320:7:80881:80890	1204030	0	True				
ANR	1204403	CallExpression	IS_NULL ( p )		1204030	0					
ANR	1204404	Callee	IS_NULL		1204030	0					
ANR	1204405	Identifier	IS_NULL		1204030	0					
ANR	1204406	ArgumentList	p		1204030	1					
ANR	1204407	Argument	p		1204030	0					
ANR	1204408	Identifier	p		1204030	0					
ANR	1204409	GotoStatement	goto fail ;	3320:19:80893:80902	1204030	1	True				
ANR	1204410	Identifier	fail		1204030	0					
ANR	1204411	GotoStatement	goto retry ;	3321:3:80907:80917	1204030	2	True				
ANR	1204412	Identifier	retry		1204030	0					
ANR	1204413	BreakStatement	break ;	3323:1:80923:80928	1204030	31	True				
ANR	1204414	IfStatement	if ( reg -> dmax != ONIG_INFINITE_DISTANCE )		1204030	1					
ANR	1204415	Condition	reg -> dmax != ONIG_INFINITE_DISTANCE	3328:8:81023:81057	1204030	0	True				
ANR	1204416	EqualityExpression	reg -> dmax != ONIG_INFINITE_DISTANCE		1204030	0		!=			
ANR	1204417	PtrMemberAccess	reg -> dmax		1204030	0					
ANR	1204418	Identifier	reg		1204030	0					
ANR	1204419	Identifier	dmax		1204030	1					
ANR	1204420	Identifier	ONIG_INFINITE_DISTANCE		1204030	1					
ANR	1204421	CompoundStatement		81:45:2032:2032	1204030	1					
ANR	1204422	ExpressionStatement	* low = p - reg -> dmax	3329:6:81068:81089	1204030	0	True				
ANR	1204423	AssignmentExpression	* low = p - reg -> dmax		1204030	0		=			
ANR	1204424	UnaryOperationExpression	* low		1204030	0					
ANR	1204425	UnaryOperator	*		1204030	0					
ANR	1204426	Identifier	low		1204030	1					
ANR	1204427	AdditiveExpression	p - reg -> dmax		1204030	1		-			
ANR	1204428	Identifier	p		1204030	0					
ANR	1204429	PtrMemberAccess	reg -> dmax		1204030	1					
ANR	1204430	Identifier	reg		1204030	0					
ANR	1204431	Identifier	dmax		1204030	1					
ANR	1204432	ExpressionStatement	* high = p - reg -> dmin	3330:6:81097:81118	1204030	1	True				
ANR	1204433	AssignmentExpression	* high = p - reg -> dmin		1204030	0		=			
ANR	1204434	UnaryOperationExpression	* high		1204030	0					
ANR	1204435	UnaryOperator	*		1204030	0					
ANR	1204436	Identifier	high		1204030	1					
ANR	1204437	AdditiveExpression	p - reg -> dmin		1204030	1		-			
ANR	1204438	Identifier	p		1204030	0					
ANR	1204439	PtrMemberAccess	reg -> dmin		1204030	1					
ANR	1204440	Identifier	reg		1204030	0					
ANR	1204441	Identifier	dmin		1204030	1					
ANR	1204442	ExpressionStatement	"* high = onigenc_get_right_adjust_char_head ( reg -> enc , adjrange , * high )"	3331:6:81126:81195	1204030	2	True				
ANR	1204443	AssignmentExpression	"* high = onigenc_get_right_adjust_char_head ( reg -> enc , adjrange , * high )"		1204030	0		=			
ANR	1204444	UnaryOperationExpression	* high		1204030	0					
ANR	1204445	UnaryOperator	*		1204030	0					
ANR	1204446	Identifier	high		1204030	1					
ANR	1204447	CallExpression	"onigenc_get_right_adjust_char_head ( reg -> enc , adjrange , * high )"		1204030	1					
ANR	1204448	Callee	onigenc_get_right_adjust_char_head		1204030	0					
ANR	1204449	Identifier	onigenc_get_right_adjust_char_head		1204030	0					
ANR	1204450	ArgumentList	reg -> enc		1204030	1					
ANR	1204451	Argument	reg -> enc		1204030	0					
ANR	1204452	PtrMemberAccess	reg -> enc		1204030	0					
ANR	1204453	Identifier	reg		1204030	0					
ANR	1204454	Identifier	enc		1204030	1					
ANR	1204455	Argument	adjrange		1204030	1					
ANR	1204456	Identifier	adjrange		1204030	0					
ANR	1204457	Argument	* high		1204030	2					
ANR	1204458	UnaryOperationExpression	* high		1204030	0					
ANR	1204459	UnaryOperator	*		1204030	0					
ANR	1204460	Identifier	high		1204030	1					
ANR	1204461	ExpressionStatement	"fprintf ( stderr , ""backward_search_range: low: %d, high: %d\\n"" , ( int ) ( * low - str ) , ( int ) ( * high - str ) )"	3335:4:81233:81340	1204030	2	True				
ANR	1204462	CallExpression	"fprintf ( stderr , ""backward_search_range: low: %d, high: %d\\n"" , ( int ) ( * low - str ) , ( int ) ( * high - str ) )"		1204030	0					
ANR	1204463	Callee	fprintf		1204030	0					
ANR	1204464	Identifier	fprintf		1204030	0					
ANR	1204465	ArgumentList	stderr		1204030	1					
ANR	1204466	Argument	stderr		1204030	0					
ANR	1204467	Identifier	stderr		1204030	0					
ANR	1204468	Argument	"""backward_search_range: low: %d, high: %d\\n"""		1204030	1					
ANR	1204469	PrimaryExpression	"""backward_search_range: low: %d, high: %d\\n"""		1204030	0					
ANR	1204470	Argument	( int ) ( * low - str )		1204030	2					
ANR	1204471	CastExpression	( int ) ( * low - str )		1204030	0					
ANR	1204472	CastTarget	int		1204030	0					
ANR	1204473	AdditiveExpression	* low - str		1204030	1		-			
ANR	1204474	UnaryOperationExpression	* low		1204030	0					
ANR	1204475	UnaryOperator	*		1204030	0					
ANR	1204476	Identifier	low		1204030	1					
ANR	1204477	Identifier	str		1204030	1					
ANR	1204478	Argument	( int ) ( * high - str )		1204030	3					
ANR	1204479	CastExpression	( int ) ( * high - str )		1204030	0					
ANR	1204480	CastTarget	int		1204030	0					
ANR	1204481	AdditiveExpression	* high - str		1204030	1		-			
ANR	1204482	UnaryOperationExpression	* high		1204030	0					
ANR	1204483	UnaryOperator	*		1204030	0					
ANR	1204484	Identifier	high		1204030	1					
ANR	1204485	Identifier	str		1204030	1					
ANR	1204486	ReturnStatement	return 1 ;	3338:4:81353:81361	1204030	3	True				
ANR	1204487	PrimaryExpression	1		1204030	0					
ANR	1204488	Label	fail :	3341:1:81383:81387	1204030	7	True				
ANR	1204489	Identifier	fail		1204030	0					
ANR	1204490	ExpressionStatement	"fprintf ( stderr , ""backward_search_range: fail.\\n"" )"	3343:2:81416:81465	1204030	8	True				
ANR	1204491	CallExpression	"fprintf ( stderr , ""backward_search_range: fail.\\n"" )"		1204030	0					
ANR	1204492	Callee	fprintf		1204030	0					
ANR	1204493	Identifier	fprintf		1204030	0					
ANR	1204494	ArgumentList	stderr		1204030	1					
ANR	1204495	Argument	stderr		1204030	0					
ANR	1204496	Identifier	stderr		1204030	0					
ANR	1204497	Argument	"""backward_search_range: fail.\\n"""		1204030	1					
ANR	1204498	PrimaryExpression	"""backward_search_range: fail.\\n"""		1204030	0					
ANR	1204499	ReturnStatement	return 0 ;	3345:2:81476:81484	1204030	9	True				
ANR	1204500	PrimaryExpression	0		1204030	0					
ANR	1204501	ReturnType	static int		1204030	1					
ANR	1204502	Identifier	backward_search_range		1204030	2					
ANR	1204503	ParameterList	"regex_t * reg , const UChar * str , const UChar * end , UChar * s , const UChar * range , UChar * adjrange , UChar * * low , UChar * * high"		1204030	3					
ANR	1204504	Parameter	regex_t * reg	3245:22:78887:78898	1204030	0	True				
ANR	1204505	ParameterType	regex_t *		1204030	0					
ANR	1204506	Identifier	reg		1204030	1					
ANR	1204507	Parameter	const UChar * str	3245:36:78901:78916	1204030	1	True				
ANR	1204508	ParameterType	const UChar *		1204030	0					
ANR	1204509	Identifier	str		1204030	1					
ANR	1204510	Parameter	const UChar * end	3245:54:78919:78934	1204030	2	True				
ANR	1204511	ParameterType	const UChar *		1204030	0					
ANR	1204512	Identifier	end		1204030	1					
ANR	1204513	Parameter	UChar * s	3246:8:78945:78952	1204030	3	True				
ANR	1204514	ParameterType	UChar *		1204030	0					
ANR	1204515	Identifier	s		1204030	1					
ANR	1204516	Parameter	const UChar * range	3246:18:78955:78972	1204030	4	True				
ANR	1204517	ParameterType	const UChar *		1204030	0					
ANR	1204518	Identifier	range		1204030	1					
ANR	1204519	Parameter	UChar * adjrange	3246:38:78975:78989	1204030	5	True				
ANR	1204520	ParameterType	UChar *		1204030	0					
ANR	1204521	Identifier	adjrange		1204030	1					
ANR	1204522	Parameter	UChar * * low	3247:8:79000:79010	1204030	6	True				
ANR	1204523	ParameterType	UChar * *		1204030	0					
ANR	1204524	Identifier	low		1204030	1					
ANR	1204525	Parameter	UChar * * high	3247:21:79013:79024	1204030	7	True				
ANR	1204526	ParameterType	UChar * *		1204030	0					
ANR	1204527	Identifier	high		1204030	1					
ANR	1204528	CFGEntryNode	ENTRY		1204030		True				
ANR	1204529	CFGExitNode	EXIT		1204030		True				
ANR	1204530	Symbol	reg -> dmin		1204030						
ANR	1204531	Symbol	prev		1204030						
ANR	1204532	Symbol	* high		1204030						
ANR	1204533	Symbol	onigenc_get_prev_char_head		1204030						
ANR	1204534	Symbol	range		1204030						
ANR	1204535	Symbol	map_search_backward		1204030						
ANR	1204536	Symbol	ON_STR_BEGIN		1204030						
ANR	1204537	Symbol	ONIGENC_IS_MBC_NEWLINE		1204030						
ANR	1204538	Symbol	reg -> exact_end		1204030						
ANR	1204539	Symbol	reg -> int_map_backward		1204030						
ANR	1204540	Symbol	ONIG_INFINITE_DISTANCE		1204030						
ANR	1204541	Symbol	high		1204030						
ANR	1204542	Symbol	ON_STR_END		1204030						
ANR	1204543	Symbol	IS_NULL		1204030						
ANR	1204544	Symbol	reg		1204030						
ANR	1204545	Symbol	low		1204030						
ANR	1204546	Symbol	reg -> optimize		1204030						
ANR	1204547	Symbol	reg -> sub_anchor		1204030						
ANR	1204548	Symbol	end		1204030						
ANR	1204549	Symbol	set_bm_backward_skip		1204030						
ANR	1204550	Symbol	bm_search_backward		1204030						
ANR	1204551	Symbol	adjrange		1204030						
ANR	1204552	Symbol	reg -> map		1204030						
ANR	1204553	Symbol	onigenc_get_right_adjust_char_head		1204030						
ANR	1204554	Symbol	stderr		1204030						
ANR	1204555	Symbol	reg -> enc		1204030						
ANR	1204556	Symbol	BM_BACKWARD_SEARCH_LENGTH_THRESHOLD		1204030						
ANR	1204557	Symbol	str		1204030						
ANR	1204558	Symbol	p		1204030						
ANR	1204559	Symbol	r		1204030						
ANR	1204560	Symbol	s		1204030						
ANR	1204561	Symbol	reg -> dmax		1204030						
ANR	1204562	Symbol	reg -> exact		1204030						
ANR	1204563	Symbol	reg -> case_fold_flag		1204030						
ANR	1204564	Symbol	& reg -> int_map_backward		1204030						
ANR	1204565	Symbol	slow_search_backward		1204030						
ANR	1204566	Symbol	* reg		1204030						
ANR	1204567	Symbol	slow_search_backward_ic		1204030						
ANR	1204568	Symbol	* low		1204030						
ANR	1204569	Function	onig_search	3349:0:81501:91929							
ANR	1204570	FunctionDef	"onig_search (regex_t * reg , const UChar * str , const UChar * end , const UChar * start , const UChar * range , OnigRegion * region , OnigOptionType option)"		1204569	0					
ANR	1204571	CompoundStatement		3352:0:81662:91929	1204569	0					
ANR	1204572	IdentifierDeclStatement	int r ;	3353:2:81666:81671	1204569	0	True				
ANR	1204573	IdentifierDecl	r		1204569	0					
ANR	1204574	IdentifierDeclType	int		1204569	0					
ANR	1204575	Identifier	r		1204569	1					
ANR	1204576	IdentifierDeclStatement	"UChar * s , * prev ;"	3354:2:81675:81690	1204569	1	True				
ANR	1204577	IdentifierDecl	* s		1204569	0					
ANR	1204578	IdentifierDeclType	UChar *		1204569	0					
ANR	1204579	Identifier	s		1204569	1					
ANR	1204580	IdentifierDecl	* prev		1204569	1					
ANR	1204581	IdentifierDeclType	UChar *		1204569	0					
ANR	1204582	Identifier	prev		1204569	1					
ANR	1204583	IdentifierDeclStatement	OnigMatchArg msa ;	3355:2:81694:81710	1204569	2	True				
ANR	1204584	IdentifierDecl	msa		1204569	0					
ANR	1204585	IdentifierDeclType	OnigMatchArg		1204569	0					
ANR	1204586	Identifier	msa		1204569	1					
ANR	1204587	IdentifierDeclStatement	const UChar * orig_start = start ;	3356:2:81714:81745	1204569	3	True				
ANR	1204588	IdentifierDecl	* orig_start = start		1204569	0					
ANR	1204589	IdentifierDeclType	const UChar *		1204569	0					
ANR	1204590	Identifier	orig_start		1204569	1					
ANR	1204591	AssignmentExpression	* orig_start = start		1204569	2		=			
ANR	1204592	Identifier	start		1204569	0					
ANR	1204593	Identifier	start		1204569	1					
ANR	1204594	IdentifierDeclStatement	const UChar * orig_range = range ;	3358:2:81806:81837	1204569	4	True				
ANR	1204595	IdentifierDecl	* orig_range = range		1204569	0					
ANR	1204596	IdentifierDeclType	const UChar *		1204569	0					
ANR	1204597	Identifier	orig_range		1204569	1					
ANR	1204598	AssignmentExpression	* orig_range = range		1204569	2		=			
ANR	1204599	Identifier	range		1204569	0					
ANR	1204600	Identifier	range		1204569	1					
ANR	1204601	Label	start :	3362:1:81915:81920	1204569	5	True				
ANR	1204602	Identifier	start		1204569	0					
ANR	1204603	ExpressionStatement	THREAD_ATOMIC_START	3363:2:81924:81943	1204569	6	True				
ANR	1204604	Identifier	THREAD_ATOMIC_START		1204569	0					
ANR	1204605	IfStatement	if ( ONIG_STATE ( reg ) >= ONIG_STATE_NORMAL )		1204569	7					
ANR	1204606	Condition	ONIG_STATE ( reg ) >= ONIG_STATE_NORMAL	3364:6:81951:81986	1204569	0	True				
ANR	1204607	RelationalExpression	ONIG_STATE ( reg ) >= ONIG_STATE_NORMAL		1204569	0		>=			
ANR	1204608	CallExpression	ONIG_STATE ( reg )		1204569	0					
ANR	1204609	Callee	ONIG_STATE		1204569	0					
ANR	1204610	Identifier	ONIG_STATE		1204569	0					
ANR	1204611	ArgumentList	reg		1204569	1					
ANR	1204612	Argument	reg		1204569	0					
ANR	1204613	Identifier	reg		1204569	0					
ANR	1204614	Identifier	ONIG_STATE_NORMAL		1204569	1					
ANR	1204615	CompoundStatement		13:44:326:326	1204569	1					
ANR	1204616	ExpressionStatement	ONIG_STATE_INC ( reg )	3365:4:81995:82014	1204569	0	True				
ANR	1204617	CallExpression	ONIG_STATE_INC ( reg )		1204569	0					
ANR	1204618	Callee	ONIG_STATE_INC		1204569	0					
ANR	1204619	Identifier	ONIG_STATE_INC		1204569	0					
ANR	1204620	ArgumentList	reg		1204569	1					
ANR	1204621	Argument	reg		1204569	0					
ANR	1204622	Identifier	reg		1204569	0					
ANR	1204623	IfStatement	if ( IS_NOT_NULL ( reg -> chain ) && ONIG_STATE ( reg ) == ONIG_STATE_NORMAL )		1204569	1					
ANR	1204624	Condition	IS_NOT_NULL ( reg -> chain ) && ONIG_STATE ( reg ) == ONIG_STATE_NORMAL	3366:8:82024:82086	1204569	0	True				
ANR	1204625	AndExpression	IS_NOT_NULL ( reg -> chain ) && ONIG_STATE ( reg ) == ONIG_STATE_NORMAL		1204569	0		&&			
ANR	1204626	CallExpression	IS_NOT_NULL ( reg -> chain )		1204569	0					
ANR	1204627	Callee	IS_NOT_NULL		1204569	0					
ANR	1204628	Identifier	IS_NOT_NULL		1204569	0					
ANR	1204629	ArgumentList	reg -> chain		1204569	1					
ANR	1204630	Argument	reg -> chain		1204569	0					
ANR	1204631	PtrMemberAccess	reg -> chain		1204569	0					
ANR	1204632	Identifier	reg		1204569	0					
ANR	1204633	Identifier	chain		1204569	1					
ANR	1204634	EqualityExpression	ONIG_STATE ( reg ) == ONIG_STATE_NORMAL		1204569	1		==			
ANR	1204635	CallExpression	ONIG_STATE ( reg )		1204569	0					
ANR	1204636	Callee	ONIG_STATE		1204569	0					
ANR	1204637	Identifier	ONIG_STATE		1204569	0					
ANR	1204638	ArgumentList	reg		1204569	1					
ANR	1204639	Argument	reg		1204569	0					
ANR	1204640	Identifier	reg		1204569	0					
ANR	1204641	Identifier	ONIG_STATE_NORMAL		1204569	1					
ANR	1204642	CompoundStatement		15:73:426:426	1204569	1					
ANR	1204643	ExpressionStatement	onig_chain_reduce ( reg )	3367:6:82097:82119	1204569	0	True				
ANR	1204644	CallExpression	onig_chain_reduce ( reg )		1204569	0					
ANR	1204645	Callee	onig_chain_reduce		1204569	0					
ANR	1204646	Identifier	onig_chain_reduce		1204569	0					
ANR	1204647	ArgumentList	reg		1204569	1					
ANR	1204648	Argument	reg		1204569	0					
ANR	1204649	Identifier	reg		1204569	0					
ANR	1204650	ExpressionStatement	ONIG_STATE_INC ( reg )	3368:6:82127:82146	1204569	1	True				
ANR	1204651	CallExpression	ONIG_STATE_INC ( reg )		1204569	0					
ANR	1204652	Callee	ONIG_STATE_INC		1204569	0					
ANR	1204653	Identifier	ONIG_STATE_INC		1204569	0					
ANR	1204654	ArgumentList	reg		1204569	1					
ANR	1204655	Argument	reg		1204569	0					
ANR	1204656	Identifier	reg		1204569	0					
ANR	1204657	ElseStatement	else		1204569	0					
ANR	1204658	CompoundStatement		21:4:508:513	1204569	0					
ANR	1204659	IdentifierDeclStatement	int n ;	3372:4:82171:82176	1204569	0	True				
ANR	1204660	IdentifierDecl	n		1204569	0					
ANR	1204661	IdentifierDeclType	int		1204569	0					
ANR	1204662	Identifier	n		1204569	1					
ANR	1204663	ExpressionStatement	THREAD_ATOMIC_END	3374:4:82183:82200	1204569	1	True				
ANR	1204664	Identifier	THREAD_ATOMIC_END		1204569	0					
ANR	1204665	ExpressionStatement	n = 0	3375:4:82206:82211	1204569	2	True				
ANR	1204666	AssignmentExpression	n = 0		1204569	0		=			
ANR	1204667	Identifier	n		1204569	0					
ANR	1204668	PrimaryExpression	0		1204569	1					
ANR	1204669	WhileStatement	while ( ONIG_STATE ( reg ) < ONIG_STATE_NORMAL )		1204569	3					
ANR	1204670	Condition	ONIG_STATE ( reg ) < ONIG_STATE_NORMAL	3376:11:82224:82258	1204569	0	True				
ANR	1204671	RelationalExpression	ONIG_STATE ( reg ) < ONIG_STATE_NORMAL		1204569	0		<			
ANR	1204672	CallExpression	ONIG_STATE ( reg )		1204569	0					
ANR	1204673	Callee	ONIG_STATE		1204569	0					
ANR	1204674	Identifier	ONIG_STATE		1204569	0					
ANR	1204675	ArgumentList	reg		1204569	1					
ANR	1204676	Argument	reg		1204569	0					
ANR	1204677	Identifier	reg		1204569	0					
ANR	1204678	Identifier	ONIG_STATE_NORMAL		1204569	1					
ANR	1204679	CompoundStatement		25:48:598:598	1204569	1					
ANR	1204680	IfStatement	if ( ++ n > THREAD_PASS_LIMIT_COUNT )		1204569	0					
ANR	1204681	Condition	++ n > THREAD_PASS_LIMIT_COUNT	3377:10:82273:82301	1204569	0	True				
ANR	1204682	RelationalExpression	++ n > THREAD_PASS_LIMIT_COUNT		1204569	0		>			
ANR	1204683	UnaryExpression	++ n		1204569	0					
ANR	1204684	IncDec	++		1204569	0					
ANR	1204685	Identifier	n		1204569	1					
ANR	1204686	Identifier	THREAD_PASS_LIMIT_COUNT		1204569	1					
ANR	1204687	ReturnStatement	return ONIGERR_OVER_THREAD_PASS_LIMIT_COUNT ;	3378:1:82305:82348	1204569	1	True				
ANR	1204688	Identifier	ONIGERR_OVER_THREAD_PASS_LIMIT_COUNT		1204569	0					
ANR	1204689	ExpressionStatement	THREAD_PASS	3379:6:82356:82367	1204569	1	True				
ANR	1204690	Identifier	THREAD_PASS		1204569	0					
ANR	1204691	GotoStatement	goto start ;	3381:4:82379:82389	1204569	4	True				
ANR	1204692	Identifier	start		1204569	0					
ANR	1204693	ExpressionStatement	THREAD_ATOMIC_END	3383:2:82397:82414	1204569	8	True				
ANR	1204694	Identifier	THREAD_ATOMIC_END		1204569	0					
ANR	1204695	ExpressionStatement	"fprintf ( stderr , ""onig_search (entry point): str: %d, end: %d, start: %d, range: %d\\n"" , ( int ) str , ( int ) ( end - str ) , ( int ) ( start - str ) , ( int ) ( range - str ) )"	3387:2:82502:82670	1204569	9	True				
ANR	1204696	CallExpression	"fprintf ( stderr , ""onig_search (entry point): str: %d, end: %d, start: %d, range: %d\\n"" , ( int ) str , ( int ) ( end - str ) , ( int ) ( start - str ) , ( int ) ( range - str ) )"		1204569	0					
ANR	1204697	Callee	fprintf		1204569	0					
ANR	1204698	Identifier	fprintf		1204569	0					
ANR	1204699	ArgumentList	stderr		1204569	1					
ANR	1204700	Argument	stderr		1204569	0					
ANR	1204701	Identifier	stderr		1204569	0					
ANR	1204702	Argument	"""onig_search (entry point): str: %d, end: %d, start: %d, range: %d\\n"""		1204569	1					
ANR	1204703	PrimaryExpression	"""onig_search (entry point): str: %d, end: %d, start: %d, range: %d\\n"""		1204569	0					
ANR	1204704	Argument	( int ) str		1204569	2					
ANR	1204705	CastExpression	( int ) str		1204569	0					
ANR	1204706	CastTarget	int		1204569	0					
ANR	1204707	Identifier	str		1204569	1					
ANR	1204708	Argument	( int ) ( end - str )		1204569	3					
ANR	1204709	CastExpression	( int ) ( end - str )		1204569	0					
ANR	1204710	CastTarget	int		1204569	0					
ANR	1204711	AdditiveExpression	end - str		1204569	1		-			
ANR	1204712	Identifier	end		1204569	0					
ANR	1204713	Identifier	str		1204569	1					
ANR	1204714	Argument	( int ) ( start - str )		1204569	4					
ANR	1204715	CastExpression	( int ) ( start - str )		1204569	0					
ANR	1204716	CastTarget	int		1204569	0					
ANR	1204717	AdditiveExpression	start - str		1204569	1		-			
ANR	1204718	Identifier	start		1204569	0					
ANR	1204719	Identifier	str		1204569	1					
ANR	1204720	Argument	( int ) ( range - str )		1204569	5					
ANR	1204721	CastExpression	( int ) ( range - str )		1204569	0					
ANR	1204722	CastTarget	int		1204569	0					
ANR	1204723	AdditiveExpression	range - str		1204569	1		-			
ANR	1204724	Identifier	range		1204569	0					
ANR	1204725	Identifier	str		1204569	1					
ANR	1204726	Statement	if	3392:2:82682:82683	1204569	10	True				
ANR	1204727	Statement	(	3392:5:82685:82685	1204569	11	True				
ANR	1204728	Statement	region	3392:6:82686:82691	1204569	12	True				
ANR	1204729	Statement	&&	3394:6:82734:82735	1204569	13	True				
ANR	1204730	Statement	!	3394:9:82737:82737	1204569	14	True				
ANR	1204731	Statement	IS_POSIX_REGION	3394:10:82738:82752	1204569	15	True				
ANR	1204732	Statement	(	3394:25:82753:82753	1204569	16	True				
ANR	1204733	Statement	option	3394:26:82754:82759	1204569	17	True				
ANR	1204734	Statement	)	3394:32:82760:82760	1204569	18	True				
ANR	1204735	Statement	)	3396:6:82775:82775	1204569	19	True				
ANR	1204736	CompoundStatement		45:8:1114:1114	1204569	20					
ANR	1204737	ExpressionStatement	"r = onig_region_resize_clear ( region , reg -> num_mem + 1 )"	3397:4:82783:82837	1204569	0	True				
ANR	1204738	AssignmentExpression	"r = onig_region_resize_clear ( region , reg -> num_mem + 1 )"		1204569	0		=			
ANR	1204739	Identifier	r		1204569	0					
ANR	1204740	CallExpression	"onig_region_resize_clear ( region , reg -> num_mem + 1 )"		1204569	1					
ANR	1204741	Callee	onig_region_resize_clear		1204569	0					
ANR	1204742	Identifier	onig_region_resize_clear		1204569	0					
ANR	1204743	ArgumentList	region		1204569	1					
ANR	1204744	Argument	region		1204569	0					
ANR	1204745	Identifier	region		1204569	0					
ANR	1204746	Argument	reg -> num_mem + 1		1204569	1					
ANR	1204747	AdditiveExpression	reg -> num_mem + 1		1204569	0		+			
ANR	1204748	PtrMemberAccess	reg -> num_mem		1204569	0					
ANR	1204749	Identifier	reg		1204569	0					
ANR	1204750	Identifier	num_mem		1204569	1					
ANR	1204751	PrimaryExpression	1		1204569	1					
ANR	1204752	IfStatement	if ( r )		1204569	1					
ANR	1204753	Condition	r	3398:8:82847:82847	1204569	0	True				
ANR	1204754	Identifier	r		1204569	0					
ANR	1204755	GotoStatement	goto finish_no_msa ;	3398:11:82850:82868	1204569	1	True				
ANR	1204756	Identifier	finish_no_msa		1204569	0					
ANR	1204757	IfStatement	if ( start > end || start < str )		1204569	21					
ANR	1204758	Condition	start > end || start < str	3401:6:82881:82906	1204569	0	True				
ANR	1204759	OrExpression	start > end || start < str		1204569	0		||			
ANR	1204760	RelationalExpression	start > end		1204569	0		>			
ANR	1204761	Identifier	start		1204569	0					
ANR	1204762	Identifier	end		1204569	1					
ANR	1204763	RelationalExpression	start < str		1204569	1		<			
ANR	1204764	Identifier	start		1204569	0					
ANR	1204765	Identifier	str		1204569	1					
ANR	1204766	GotoStatement	goto mismatch_no_msa ;	3401:34:82909:82929	1204569	1	True				
ANR	1204767	Identifier	mismatch_no_msa		1204569	0					
ANR	1204768	Statement	define	3406:1:83035:83040	1204569	22	True				
ANR	1204769	Statement	MATCH_AND_RETURN_CHECK	3406:8:83042:83063	1204569	23	True				
ANR	1204770	ExpressionStatement	"( upper_range ) r = match_at ( reg , str , end , ( upper_range ) , s , prev , & msa )"	3406:30:83064:83139	1204569	24	True				
ANR	1204771	AssignmentExpression	"( upper_range ) r = match_at ( reg , str , end , ( upper_range ) , s , prev , & msa )"		1204569	0		=			
ANR	1204772	CastExpression	( upper_range ) r		1204569	0					
ANR	1204773	CastTarget	upper_range		1204569	0					
ANR	1204774	Identifier	r		1204569	1					
ANR	1204775	CallExpression	"match_at ( reg , str , end , ( upper_range ) , s , prev , & msa )"		1204569	1					
ANR	1204776	Callee	match_at		1204569	0					
ANR	1204777	Identifier	match_at		1204569	0					
ANR	1204778	ArgumentList	reg		1204569	1					
ANR	1204779	Argument	reg		1204569	0					
ANR	1204780	Identifier	reg		1204569	0					
ANR	1204781	Argument	str		1204569	1					
ANR	1204782	Identifier	str		1204569	0					
ANR	1204783	Argument	end		1204569	2					
ANR	1204784	Identifier	end		1204569	0					
ANR	1204785	Argument	upper_range		1204569	3					
ANR	1204786	Identifier	upper_range		1204569	0					
ANR	1204787	Argument	s		1204569	4					
ANR	1204788	Identifier	s		1204569	0					
ANR	1204789	Argument	prev		1204569	5					
ANR	1204790	Identifier	prev		1204569	0					
ANR	1204791	Argument	& msa		1204569	6					
ANR	1204792	UnaryOperationExpression	& msa		1204569	0					
ANR	1204793	UnaryOperator	&		1204569	0					
ANR	1204794	Identifier	msa		1204569	1					
ANR	1204795	IfStatement	if ( r != ONIG_MISMATCH )		1204569	25					
ANR	1204796	Condition	r != ONIG_MISMATCH	3408:6:83149:83166	1204569	0	True				
ANR	1204797	EqualityExpression	r != ONIG_MISMATCH		1204569	0		!=			
ANR	1204798	Identifier	r		1204569	0					
ANR	1204799	Identifier	ONIG_MISMATCH		1204569	1					
ANR	1204800	CompoundStatement		57:26:1506:1506	1204569	1					
ANR	1204801	IfStatement	if ( r >= 0 )		1204569	0					
ANR	1204802	Condition	r >= 0	3409:8:83180:83185	1204569	0	True				
ANR	1204803	RelationalExpression	r >= 0		1204569	0		>=			
ANR	1204804	Identifier	r		1204569	0					
ANR	1204805	PrimaryExpression	0		1204569	1					
ANR	1204806	CompoundStatement		58:16:1525:1525	1204569	1					
ANR	1204807	IfStatement	if ( ! IS_FIND_LONGEST ( reg -> options ) )		1204569	0					
ANR	1204808	Condition	! IS_FIND_LONGEST ( reg -> options )	3410:10:83201:83231	1204569	0	True				
ANR	1204809	UnaryOperationExpression	! IS_FIND_LONGEST ( reg -> options )		1204569	0					
ANR	1204810	UnaryOperator	!		1204569	0					
ANR	1204811	CallExpression	IS_FIND_LONGEST ( reg -> options )		1204569	1					
ANR	1204812	Callee	IS_FIND_LONGEST		1204569	0					
ANR	1204813	Identifier	IS_FIND_LONGEST		1204569	0					
ANR	1204814	ArgumentList	reg -> options		1204569	1					
ANR	1204815	Argument	reg -> options		1204569	0					
ANR	1204816	PtrMemberAccess	reg -> options		1204569	0					
ANR	1204817	Identifier	reg		1204569	0					
ANR	1204818	Identifier	options		1204569	1					
ANR	1204819	CompoundStatement		59:43:1571:1571	1204569	1					
ANR	1204820	GotoStatement	goto match ;	3411:8:83245:83255	1204569	0	True				
ANR	1204821	Identifier	match		1204569	0					
ANR	1204822	ElseStatement	else		1204569	0					
ANR	1204823	GotoStatement	goto finish ;	3414:9:83283:83294	1204569	0	True				
ANR	1204824	Identifier	finish		1204569	0					
ANR	1204825	IfStatement	if ( reg -> anchor != 0 && str < end )		1204569	26					
ANR	1204826	Condition	reg -> anchor != 0 && str < end	3452:6:84272:84300	1204569	0	True				
ANR	1204827	AndExpression	reg -> anchor != 0 && str < end		1204569	0		&&			
ANR	1204828	EqualityExpression	reg -> anchor != 0		1204569	0		!=			
ANR	1204829	PtrMemberAccess	reg -> anchor		1204569	0					
ANR	1204830	Identifier	reg		1204569	0					
ANR	1204831	Identifier	anchor		1204569	1					
ANR	1204832	PrimaryExpression	0		1204569	1					
ANR	1204833	RelationalExpression	str < end		1204569	1		<			
ANR	1204834	Identifier	str		1204569	0					
ANR	1204835	Identifier	end		1204569	1					
ANR	1204836	CompoundStatement		102:4:2646:2680	1204569	1					
ANR	1204837	IdentifierDeclStatement	"UChar * min_semi_end , * max_semi_end ;"	3453:4:84309:84343	1204569	0	True				
ANR	1204838	IdentifierDecl	* min_semi_end		1204569	0					
ANR	1204839	IdentifierDeclType	UChar *		1204569	0					
ANR	1204840	Identifier	min_semi_end		1204569	1					
ANR	1204841	IdentifierDecl	* max_semi_end		1204569	1					
ANR	1204842	IdentifierDeclType	UChar *		1204569	0					
ANR	1204843	Identifier	max_semi_end		1204569	1					
ANR	1204844	IfStatement	if ( reg -> anchor & ANCHOR_BEGIN_POSITION )		1204569	1					
ANR	1204845	Condition	reg -> anchor & ANCHOR_BEGIN_POSITION	3455:8:84354:84388	1204569	0	True				
ANR	1204846	BitAndExpression	reg -> anchor & ANCHOR_BEGIN_POSITION		1204569	0		&			
ANR	1204847	PtrMemberAccess	reg -> anchor		1204569	0					
ANR	1204848	Identifier	reg		1204569	0					
ANR	1204849	Identifier	anchor		1204569	1					
ANR	1204850	Identifier	ANCHOR_BEGIN_POSITION		1204569	1					
ANR	1204851	CompoundStatement		104:45:2728:2728	1204569	1					
ANR	1204852	Label	begin_position :	3457:4:84436:84450	1204569	0	True				
ANR	1204853	Identifier	begin_position		1204569	0					
ANR	1204854	IfStatement	if ( range > start )		1204569	1					
ANR	1204855	Condition	range > start	3458:10:84462:84474	1204569	0	True				
ANR	1204856	RelationalExpression	range > start		1204569	0		>			
ANR	1204857	Identifier	range		1204569	0					
ANR	1204858	Identifier	start		1204569	1					
ANR	1204859	ExpressionStatement	range = start + 1	3459:1:84478:84495	1204569	1	True				
ANR	1204860	AssignmentExpression	range = start + 1		1204569	0		=			
ANR	1204861	Identifier	range		1204569	0					
ANR	1204862	AdditiveExpression	start + 1		1204569	1		+			
ANR	1204863	Identifier	start		1204569	0					
ANR	1204864	PrimaryExpression	1		1204569	1					
ANR	1204865	ElseStatement	else		1204569	0					
ANR	1204866	ExpressionStatement	range = start	3461:1:84509:84522	1204569	0	True				
ANR	1204867	AssignmentExpression	range = start		1204569	0		=			
ANR	1204868	Identifier	range		1204569	0					
ANR	1204869	Identifier	start		1204569	1					
ANR	1204870	ElseStatement	else		1204569	0					
ANR	1204871	IfStatement	if ( reg -> anchor & ANCHOR_BEGIN_BUF )		1204569	0					
ANR	1204872	Condition	reg -> anchor & ANCHOR_BEGIN_BUF	3463:13:84543:84572	1204569	0	True				
ANR	1204873	BitAndExpression	reg -> anchor & ANCHOR_BEGIN_BUF		1204569	0		&			
ANR	1204874	PtrMemberAccess	reg -> anchor		1204569	0					
ANR	1204875	Identifier	reg		1204569	0					
ANR	1204876	Identifier	anchor		1204569	1					
ANR	1204877	Identifier	ANCHOR_BEGIN_BUF		1204569	1					
ANR	1204878	CompoundStatement		112:45:2912:2912	1204569	1					
ANR	1204879	IfStatement	if ( range > start )		1204569	0					
ANR	1204880	Condition	range > start	3465:10:84624:84636	1204569	0	True				
ANR	1204881	RelationalExpression	range > start		1204569	0		>			
ANR	1204882	Identifier	range		1204569	0					
ANR	1204883	Identifier	start		1204569	1					
ANR	1204884	CompoundStatement		114:25:2976:2976	1204569	1					
ANR	1204885	IfStatement	if ( start != str )		1204569	0					
ANR	1204886	Condition	start != str	3466:5:84646:84657	1204569	0	True				
ANR	1204887	EqualityExpression	start != str		1204569	0		!=			
ANR	1204888	Identifier	start		1204569	0					
ANR	1204889	Identifier	str		1204569	1					
ANR	1204890	GotoStatement	goto mismatch_no_msa ;	3466:19:84660:84680	1204569	1	True				
ANR	1204891	Identifier	mismatch_no_msa		1204569	0					
ANR	1204892	ExpressionStatement	range = str + 1	3467:1:84683:84698	1204569	1	True				
ANR	1204893	AssignmentExpression	range = str + 1		1204569	0		=			
ANR	1204894	Identifier	range		1204569	0					
ANR	1204895	AdditiveExpression	str + 1		1204569	1		+			
ANR	1204896	Identifier	str		1204569	0					
ANR	1204897	PrimaryExpression	1		1204569	1					
ANR	1204898	ElseStatement	else		1204569	0					
ANR	1204899	CompoundStatement		118:11:3056:3056	1204569	0					
ANR	1204900	IfStatement	if ( range <= str )		1204569	0					
ANR	1204901	Condition	range <= str	3470:5:84726:84737	1204569	0	True				
ANR	1204902	RelationalExpression	range <= str		1204569	0		<=			
ANR	1204903	Identifier	range		1204569	0					
ANR	1204904	Identifier	str		1204569	1					
ANR	1204905	CompoundStatement		119:19:3077:3077	1204569	1					
ANR	1204906	ExpressionStatement	start = str	3471:3:84745:84756	1204569	0	True				
ANR	1204907	AssignmentExpression	start = str		1204569	0		=			
ANR	1204908	Identifier	start		1204569	0					
ANR	1204909	Identifier	str		1204569	1					
ANR	1204910	ExpressionStatement	range = str	3472:3:84761:84772	1204569	1	True				
ANR	1204911	AssignmentExpression	range = str		1204569	0		=			
ANR	1204912	Identifier	range		1204569	0					
ANR	1204913	Identifier	str		1204569	1					
ANR	1204914	ElseStatement	else		1204569	0					
ANR	1204915	GotoStatement	goto mismatch_no_msa ;	3475:3:84786:84806	1204569	0	True				
ANR	1204916	Identifier	mismatch_no_msa		1204569	0					
ANR	1204917	ElseStatement	else		1204569	0					
ANR	1204918	IfStatement	if ( reg -> anchor & ANCHOR_END_BUF )		1204569	0					
ANR	1204919	Condition	reg -> anchor & ANCHOR_END_BUF	3478:13:84835:84862	1204569	0	True				
ANR	1204920	BitAndExpression	reg -> anchor & ANCHOR_END_BUF		1204569	0		&			
ANR	1204921	PtrMemberAccess	reg -> anchor		1204569	0					
ANR	1204922	Identifier	reg		1204569	0					
ANR	1204923	Identifier	anchor		1204569	1					
ANR	1204924	Identifier	ANCHOR_END_BUF		1204569	1					
ANR	1204925	CompoundStatement		127:43:3202:3202	1204569	1					
ANR	1204926	ExpressionStatement	min_semi_end = max_semi_end = ( UChar * ) end	3479:6:84873:84915	1204569	0	True				
ANR	1204927	AssignmentExpression	min_semi_end = max_semi_end = ( UChar * ) end		1204569	0		=			
ANR	1204928	Identifier	min_semi_end		1204569	0					
ANR	1204929	AssignmentExpression	max_semi_end = ( UChar * ) end		1204569	1		=			
ANR	1204930	Identifier	max_semi_end		1204569	0					
ANR	1204931	CastExpression	( UChar * ) end		1204569	1					
ANR	1204932	CastTarget	UChar *		1204569	0					
ANR	1204933	Identifier	end		1204569	1					
ANR	1204934	Label	end_buf :	3481:4:84922:84929	1204569	1	True				
ANR	1204935	Identifier	end_buf		1204569	0					
ANR	1204936	IfStatement	if ( ( OnigDistance ) ( max_semi_end - str ) < reg -> anchor_dmin )		1204569	2					
ANR	1204937	Condition	( OnigDistance ) ( max_semi_end - str ) < reg -> anchor_dmin	3482:10:84941:84994	1204569	0	True				
ANR	1204938	RelationalExpression	( OnigDistance ) ( max_semi_end - str ) < reg -> anchor_dmin		1204569	0		<			
ANR	1204939	CastExpression	( OnigDistance ) ( max_semi_end - str )		1204569	0					
ANR	1204940	CastTarget	OnigDistance		1204569	0					
ANR	1204941	AdditiveExpression	max_semi_end - str		1204569	1		-			
ANR	1204942	Identifier	max_semi_end		1204569	0					
ANR	1204943	Identifier	str		1204569	1					
ANR	1204944	PtrMemberAccess	reg -> anchor_dmin		1204569	1					
ANR	1204945	Identifier	reg		1204569	0					
ANR	1204946	Identifier	anchor_dmin		1204569	1					
ANR	1204947	GotoStatement	goto mismatch_no_msa ;	3483:1:84998:85018	1204569	1	True				
ANR	1204948	Identifier	mismatch_no_msa		1204569	0					
ANR	1204949	IfStatement	if ( range > start )		1204569	3					
ANR	1204950	Condition	range > start	3485:10:85031:85043	1204569	0	True				
ANR	1204951	RelationalExpression	range > start		1204569	0		>			
ANR	1204952	Identifier	range		1204569	0					
ANR	1204953	Identifier	start		1204569	1					
ANR	1204954	CompoundStatement		134:25:3383:3383	1204569	1					
ANR	1204955	IfStatement	if ( ( OnigDistance ) ( min_semi_end - start ) > reg -> anchor_dmax )		1204569	0					
ANR	1204956	Condition	( OnigDistance ) ( min_semi_end - start ) > reg -> anchor_dmax	3486:5:85053:85108	1204569	0	True				
ANR	1204957	RelationalExpression	( OnigDistance ) ( min_semi_end - start ) > reg -> anchor_dmax		1204569	0		>			
ANR	1204958	CastExpression	( OnigDistance ) ( min_semi_end - start )		1204569	0					
ANR	1204959	CastTarget	OnigDistance		1204569	0					
ANR	1204960	AdditiveExpression	min_semi_end - start		1204569	1		-			
ANR	1204961	Identifier	min_semi_end		1204569	0					
ANR	1204962	Identifier	start		1204569	1					
ANR	1204963	PtrMemberAccess	reg -> anchor_dmax		1204569	1					
ANR	1204964	Identifier	reg		1204569	0					
ANR	1204965	Identifier	anchor_dmax		1204569	1					
ANR	1204966	CompoundStatement		135:63:3448:3448	1204569	1					
ANR	1204967	ExpressionStatement	start = min_semi_end - reg -> anchor_dmax	3487:3:85116:85155	1204569	0	True				
ANR	1204968	AssignmentExpression	start = min_semi_end - reg -> anchor_dmax		1204569	0		=			
ANR	1204969	Identifier	start		1204569	0					
ANR	1204970	AdditiveExpression	min_semi_end - reg -> anchor_dmax		1204569	1		-			
ANR	1204971	Identifier	min_semi_end		1204569	0					
ANR	1204972	PtrMemberAccess	reg -> anchor_dmax		1204569	1					
ANR	1204973	Identifier	reg		1204569	0					
ANR	1204974	Identifier	anchor_dmax		1204569	1					
ANR	1204975	IfStatement	if ( start < end )		1204569	1					
ANR	1204976	Condition	start < end	3488:7:85164:85174	1204569	0	True				
ANR	1204977	RelationalExpression	start < end		1204569	0		<			
ANR	1204978	Identifier	start		1204569	0					
ANR	1204979	Identifier	end		1204569	1					
ANR	1204980	ExpressionStatement	"start = onigenc_get_right_adjust_char_head ( reg -> enc , str , start )"	3489:5:85182:85246	1204569	1	True				
ANR	1204981	AssignmentExpression	"start = onigenc_get_right_adjust_char_head ( reg -> enc , str , start )"		1204569	0		=			
ANR	1204982	Identifier	start		1204569	0					
ANR	1204983	CallExpression	"onigenc_get_right_adjust_char_head ( reg -> enc , str , start )"		1204569	1					
ANR	1204984	Callee	onigenc_get_right_adjust_char_head		1204569	0					
ANR	1204985	Identifier	onigenc_get_right_adjust_char_head		1204569	0					
ANR	1204986	ArgumentList	reg -> enc		1204569	1					
ANR	1204987	Argument	reg -> enc		1204569	0					
ANR	1204988	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1204989	Identifier	reg		1204569	0					
ANR	1204990	Identifier	enc		1204569	1					
ANR	1204991	Argument	str		1204569	1					
ANR	1204992	Identifier	str		1204569	0					
ANR	1204993	Argument	start		1204569	2					
ANR	1204994	Identifier	start		1204569	0					
ANR	1204995	ElseStatement	else		1204569	0					
ANR	1204996	CompoundStatement		139:8:3593:3593	1204569	0					
ANR	1204997	ExpressionStatement	"start = onigenc_get_prev_char_head ( reg -> enc , str , end )"	3491:5:85293:85347	1204569	0	True				
ANR	1204998	AssignmentExpression	"start = onigenc_get_prev_char_head ( reg -> enc , str , end )"		1204569	0		=			
ANR	1204999	Identifier	start		1204569	0					
ANR	1205000	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , str , end )"		1204569	1					
ANR	1205001	Callee	onigenc_get_prev_char_head		1204569	0					
ANR	1205002	Identifier	onigenc_get_prev_char_head		1204569	0					
ANR	1205003	ArgumentList	reg -> enc		1204569	1					
ANR	1205004	Argument	reg -> enc		1204569	0					
ANR	1205005	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205006	Identifier	reg		1204569	0					
ANR	1205007	Identifier	enc		1204569	1					
ANR	1205008	Argument	str		1204569	1					
ANR	1205009	Identifier	str		1204569	0					
ANR	1205010	Argument	end		1204569	2					
ANR	1205011	Identifier	end		1204569	0					
ANR	1205012	IfStatement	if ( ( OnigDistance ) ( max_semi_end - ( range - 1 ) ) < reg -> anchor_dmin )		1204569	1					
ANR	1205013	Condition	( OnigDistance ) ( max_semi_end - ( range - 1 ) ) < reg -> anchor_dmin	3494:5:85362:85423	1204569	0	True				
ANR	1205014	RelationalExpression	( OnigDistance ) ( max_semi_end - ( range - 1 ) ) < reg -> anchor_dmin		1204569	0		<			
ANR	1205015	CastExpression	( OnigDistance ) ( max_semi_end - ( range - 1 ) )		1204569	0					
ANR	1205016	CastTarget	OnigDistance		1204569	0					
ANR	1205017	AdditiveExpression	max_semi_end - ( range - 1 )		1204569	1		-			
ANR	1205018	Identifier	max_semi_end		1204569	0					
ANR	1205019	AdditiveExpression	range - 1		1204569	1		-			
ANR	1205020	Identifier	range		1204569	0					
ANR	1205021	PrimaryExpression	1		1204569	1					
ANR	1205022	PtrMemberAccess	reg -> anchor_dmin		1204569	1					
ANR	1205023	Identifier	reg		1204569	0					
ANR	1205024	Identifier	anchor_dmin		1204569	1					
ANR	1205025	CompoundStatement		143:69:3763:3763	1204569	1					
ANR	1205026	ExpressionStatement	range = max_semi_end - reg -> anchor_dmin + 1	3495:3:85431:85474	1204569	0	True				
ANR	1205027	AssignmentExpression	range = max_semi_end - reg -> anchor_dmin + 1		1204569	0		=			
ANR	1205028	Identifier	range		1204569	0					
ANR	1205029	AdditiveExpression	max_semi_end - reg -> anchor_dmin + 1		1204569	1		-			
ANR	1205030	Identifier	max_semi_end		1204569	0					
ANR	1205031	AdditiveExpression	reg -> anchor_dmin + 1		1204569	1		+			
ANR	1205032	PtrMemberAccess	reg -> anchor_dmin		1204569	0					
ANR	1205033	Identifier	reg		1204569	0					
ANR	1205034	Identifier	anchor_dmin		1204569	1					
ANR	1205035	PrimaryExpression	1		1204569	1					
ANR	1205036	IfStatement	if ( start >= range )		1204569	2					
ANR	1205037	Condition	start >= range	3498:5:85485:85498	1204569	0	True				
ANR	1205038	RelationalExpression	start >= range		1204569	0		>=			
ANR	1205039	Identifier	start		1204569	0					
ANR	1205040	Identifier	range		1204569	1					
ANR	1205041	GotoStatement	goto mismatch_no_msa ;	3498:21:85501:85521	1204569	1	True				
ANR	1205042	Identifier	mismatch_no_msa		1204569	0					
ANR	1205043	ElseStatement	else		1204569	0					
ANR	1205044	CompoundStatement		149:11:3879:3879	1204569	0					
ANR	1205045	IfStatement	if ( ( OnigDistance ) ( min_semi_end - range ) > reg -> anchor_dmax )		1204569	0					
ANR	1205046	Condition	( OnigDistance ) ( min_semi_end - range ) > reg -> anchor_dmax	3501:5:85549:85604	1204569	0	True				
ANR	1205047	RelationalExpression	( OnigDistance ) ( min_semi_end - range ) > reg -> anchor_dmax		1204569	0		>			
ANR	1205048	CastExpression	( OnigDistance ) ( min_semi_end - range )		1204569	0					
ANR	1205049	CastTarget	OnigDistance		1204569	0					
ANR	1205050	AdditiveExpression	min_semi_end - range		1204569	1		-			
ANR	1205051	Identifier	min_semi_end		1204569	0					
ANR	1205052	Identifier	range		1204569	1					
ANR	1205053	PtrMemberAccess	reg -> anchor_dmax		1204569	1					
ANR	1205054	Identifier	reg		1204569	0					
ANR	1205055	Identifier	anchor_dmax		1204569	1					
ANR	1205056	CompoundStatement		150:63:3944:3944	1204569	1					
ANR	1205057	ExpressionStatement	range = min_semi_end - reg -> anchor_dmax	3502:3:85612:85651	1204569	0	True				
ANR	1205058	AssignmentExpression	range = min_semi_end - reg -> anchor_dmax		1204569	0		=			
ANR	1205059	Identifier	range		1204569	0					
ANR	1205060	AdditiveExpression	min_semi_end - reg -> anchor_dmax		1204569	1		-			
ANR	1205061	Identifier	min_semi_end		1204569	0					
ANR	1205062	PtrMemberAccess	reg -> anchor_dmax		1204569	1					
ANR	1205063	Identifier	reg		1204569	0					
ANR	1205064	Identifier	anchor_dmax		1204569	1					
ANR	1205065	IfStatement	if ( ( OnigDistance ) ( max_semi_end - start ) < reg -> anchor_dmin )		1204569	1					
ANR	1205066	Condition	( OnigDistance ) ( max_semi_end - start ) < reg -> anchor_dmin	3504:5:85661:85716	1204569	0	True				
ANR	1205067	RelationalExpression	( OnigDistance ) ( max_semi_end - start ) < reg -> anchor_dmin		1204569	0		<			
ANR	1205068	CastExpression	( OnigDistance ) ( max_semi_end - start )		1204569	0					
ANR	1205069	CastTarget	OnigDistance		1204569	0					
ANR	1205070	AdditiveExpression	max_semi_end - start		1204569	1		-			
ANR	1205071	Identifier	max_semi_end		1204569	0					
ANR	1205072	Identifier	start		1204569	1					
ANR	1205073	PtrMemberAccess	reg -> anchor_dmin		1204569	1					
ANR	1205074	Identifier	reg		1204569	0					
ANR	1205075	Identifier	anchor_dmin		1204569	1					
ANR	1205076	CompoundStatement		153:63:4056:4056	1204569	1					
ANR	1205077	ExpressionStatement	start = max_semi_end - reg -> anchor_dmin	3505:3:85724:85763	1204569	0	True				
ANR	1205078	AssignmentExpression	start = max_semi_end - reg -> anchor_dmin		1204569	0		=			
ANR	1205079	Identifier	start		1204569	0					
ANR	1205080	AdditiveExpression	max_semi_end - reg -> anchor_dmin		1204569	1		-			
ANR	1205081	Identifier	max_semi_end		1204569	0					
ANR	1205082	PtrMemberAccess	reg -> anchor_dmin		1204569	1					
ANR	1205083	Identifier	reg		1204569	0					
ANR	1205084	Identifier	anchor_dmin		1204569	1					
ANR	1205085	ExpressionStatement	"start = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , str , start )"	3506:3:85768:85827	1204569	1	True				
ANR	1205086	AssignmentExpression	"start = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , str , start )"		1204569	0		=			
ANR	1205087	Identifier	start		1204569	0					
ANR	1205088	CallExpression	"ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , str , start )"		1204569	1					
ANR	1205089	Callee	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1204569	0					
ANR	1205090	Identifier	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1204569	0					
ANR	1205091	ArgumentList	reg -> enc		1204569	1					
ANR	1205092	Argument	reg -> enc		1204569	0					
ANR	1205093	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205094	Identifier	reg		1204569	0					
ANR	1205095	Identifier	enc		1204569	1					
ANR	1205096	Argument	str		1204569	1					
ANR	1205097	Identifier	str		1204569	0					
ANR	1205098	Argument	start		1204569	2					
ANR	1205099	Identifier	start		1204569	0					
ANR	1205100	IfStatement	if ( range > start )		1204569	2					
ANR	1205101	Condition	range > start	3508:5:85837:85849	1204569	0	True				
ANR	1205102	RelationalExpression	range > start		1204569	0		>			
ANR	1205103	Identifier	range		1204569	0					
ANR	1205104	Identifier	start		1204569	1					
ANR	1205105	GotoStatement	goto mismatch_no_msa ;	3508:20:85852:85872	1204569	1	True				
ANR	1205106	Identifier	mismatch_no_msa		1204569	0					
ANR	1205107	ElseStatement	else		1204569	0					
ANR	1205108	IfStatement	if ( reg -> anchor & ANCHOR_SEMI_END_BUF )		1204569	0					
ANR	1205109	Condition	reg -> anchor & ANCHOR_SEMI_END_BUF	3511:13:85901:85933	1204569	0	True				
ANR	1205110	BitAndExpression	reg -> anchor & ANCHOR_SEMI_END_BUF		1204569	0		&			
ANR	1205111	PtrMemberAccess	reg -> anchor		1204569	0					
ANR	1205112	Identifier	reg		1204569	0					
ANR	1205113	Identifier	anchor		1204569	1					
ANR	1205114	Identifier	ANCHOR_SEMI_END_BUF		1204569	1					
ANR	1205115	CompoundStatement		161:6:4281:4338	1204569	1					
ANR	1205116	IdentifierDeclStatement	"UChar * pre_end = ONIGENC_STEP_BACK ( reg -> enc , str , end , 1 ) ;"	3512:6:85944:86001	1204569	0	True				
ANR	1205117	IdentifierDecl	"* pre_end = ONIGENC_STEP_BACK ( reg -> enc , str , end , 1 )"		1204569	0					
ANR	1205118	IdentifierDeclType	UChar *		1204569	0					
ANR	1205119	Identifier	pre_end		1204569	1					
ANR	1205120	AssignmentExpression	"* pre_end = ONIGENC_STEP_BACK ( reg -> enc , str , end , 1 )"		1204569	2		=			
ANR	1205121	Identifier	pre_end		1204569	0					
ANR	1205122	CallExpression	"ONIGENC_STEP_BACK ( reg -> enc , str , end , 1 )"		1204569	1					
ANR	1205123	Callee	ONIGENC_STEP_BACK		1204569	0					
ANR	1205124	Identifier	ONIGENC_STEP_BACK		1204569	0					
ANR	1205125	ArgumentList	reg -> enc		1204569	1					
ANR	1205126	Argument	reg -> enc		1204569	0					
ANR	1205127	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205128	Identifier	reg		1204569	0					
ANR	1205129	Identifier	enc		1204569	1					
ANR	1205130	Argument	str		1204569	1					
ANR	1205131	Identifier	str		1204569	0					
ANR	1205132	Argument	end		1204569	2					
ANR	1205133	Identifier	end		1204569	0					
ANR	1205134	Argument	1		1204569	3					
ANR	1205135	PrimaryExpression	1		1204569	0					
ANR	1205136	ExpressionStatement	max_semi_end = ( UChar * ) end	3514:6:86010:86037	1204569	1	True				
ANR	1205137	AssignmentExpression	max_semi_end = ( UChar * ) end		1204569	0		=			
ANR	1205138	Identifier	max_semi_end		1204569	0					
ANR	1205139	CastExpression	( UChar * ) end		1204569	1					
ANR	1205140	CastTarget	UChar *		1204569	0					
ANR	1205141	Identifier	end		1204569	1					
ANR	1205142	IfStatement	"if ( ONIGENC_IS_MBC_NEWLINE ( reg -> enc , pre_end , end ) )"		1204569	2					
ANR	1205143	Condition	"ONIGENC_IS_MBC_NEWLINE ( reg -> enc , pre_end , end )"	3515:10:86049:86094	1204569	0	True				
ANR	1205144	CallExpression	"ONIGENC_IS_MBC_NEWLINE ( reg -> enc , pre_end , end )"		1204569	0					
ANR	1205145	Callee	ONIGENC_IS_MBC_NEWLINE		1204569	0					
ANR	1205146	Identifier	ONIGENC_IS_MBC_NEWLINE		1204569	0					
ANR	1205147	ArgumentList	reg -> enc		1204569	1					
ANR	1205148	Argument	reg -> enc		1204569	0					
ANR	1205149	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205150	Identifier	reg		1204569	0					
ANR	1205151	Identifier	enc		1204569	1					
ANR	1205152	Argument	pre_end		1204569	1					
ANR	1205153	Identifier	pre_end		1204569	0					
ANR	1205154	Argument	end		1204569	2					
ANR	1205155	Identifier	end		1204569	0					
ANR	1205156	CompoundStatement		164:58:4434:4434	1204569	1					
ANR	1205157	ExpressionStatement	min_semi_end = pre_end	3516:1:86100:86122	1204569	0	True				
ANR	1205158	AssignmentExpression	min_semi_end = pre_end		1204569	0		=			
ANR	1205159	Identifier	min_semi_end		1204569	0					
ANR	1205160	Identifier	pre_end		1204569	1					
ANR	1205161	ExpressionStatement	"pre_end = ONIGENC_STEP_BACK ( reg -> enc , str , pre_end , 1 )"	3519:1:86161:86215	1204569	1	True				
ANR	1205162	AssignmentExpression	"pre_end = ONIGENC_STEP_BACK ( reg -> enc , str , pre_end , 1 )"		1204569	0		=			
ANR	1205163	Identifier	pre_end		1204569	0					
ANR	1205164	CallExpression	"ONIGENC_STEP_BACK ( reg -> enc , str , pre_end , 1 )"		1204569	1					
ANR	1205165	Callee	ONIGENC_STEP_BACK		1204569	0					
ANR	1205166	Identifier	ONIGENC_STEP_BACK		1204569	0					
ANR	1205167	ArgumentList	reg -> enc		1204569	1					
ANR	1205168	Argument	reg -> enc		1204569	0					
ANR	1205169	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205170	Identifier	reg		1204569	0					
ANR	1205171	Identifier	enc		1204569	1					
ANR	1205172	Argument	str		1204569	1					
ANR	1205173	Identifier	str		1204569	0					
ANR	1205174	Argument	pre_end		1204569	2					
ANR	1205175	Identifier	pre_end		1204569	0					
ANR	1205176	Argument	1		1204569	3					
ANR	1205177	PrimaryExpression	1		1204569	0					
ANR	1205178	IfStatement	"if ( IS_NOT_NULL ( pre_end ) && ONIGENC_IS_MBC_CRNL ( reg -> enc , pre_end , end ) )"		1204569	2					
ANR	1205179	Condition	"IS_NOT_NULL ( pre_end ) && ONIGENC_IS_MBC_CRNL ( reg -> enc , pre_end , end )"	3520:5:86222:86293	1204569	0	True				
ANR	1205180	AndExpression	"IS_NOT_NULL ( pre_end ) && ONIGENC_IS_MBC_CRNL ( reg -> enc , pre_end , end )"		1204569	0		&&			
ANR	1205181	CallExpression	IS_NOT_NULL ( pre_end )		1204569	0					
ANR	1205182	Callee	IS_NOT_NULL		1204569	0					
ANR	1205183	Identifier	IS_NOT_NULL		1204569	0					
ANR	1205184	ArgumentList	pre_end		1204569	1					
ANR	1205185	Argument	pre_end		1204569	0					
ANR	1205186	Identifier	pre_end		1204569	0					
ANR	1205187	CallExpression	"ONIGENC_IS_MBC_CRNL ( reg -> enc , pre_end , end )"		1204569	1					
ANR	1205188	Callee	ONIGENC_IS_MBC_CRNL		1204569	0					
ANR	1205189	Identifier	ONIGENC_IS_MBC_CRNL		1204569	0					
ANR	1205190	ArgumentList	reg -> enc		1204569	1					
ANR	1205191	Argument	reg -> enc		1204569	0					
ANR	1205192	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205193	Identifier	reg		1204569	0					
ANR	1205194	Identifier	enc		1204569	1					
ANR	1205195	Argument	pre_end		1204569	1					
ANR	1205196	Identifier	pre_end		1204569	0					
ANR	1205197	Argument	end		1204569	2					
ANR	1205198	Identifier	end		1204569	0					
ANR	1205199	CompoundStatement		170:50:4633:4633	1204569	1					
ANR	1205200	ExpressionStatement	min_semi_end = pre_end	3522:3:86301:86323	1204569	0	True				
ANR	1205201	AssignmentExpression	min_semi_end = pre_end		1204569	0		=			
ANR	1205202	Identifier	min_semi_end		1204569	0					
ANR	1205203	Identifier	pre_end		1204569	1					
ANR	1205204	IfStatement	if ( min_semi_end > str && start <= min_semi_end )		1204569	3					
ANR	1205205	Condition	min_semi_end > str && start <= min_semi_end	3525:5:86340:86382	1204569	0	True				
ANR	1205206	AndExpression	min_semi_end > str && start <= min_semi_end		1204569	0		&&			
ANR	1205207	RelationalExpression	min_semi_end > str		1204569	0		>			
ANR	1205208	Identifier	min_semi_end		1204569	0					
ANR	1205209	Identifier	str		1204569	1					
ANR	1205210	RelationalExpression	start <= min_semi_end		1204569	1		<=			
ANR	1205211	Identifier	start		1204569	0					
ANR	1205212	Identifier	min_semi_end		1204569	1					
ANR	1205213	CompoundStatement		174:50:4722:4722	1204569	1					
ANR	1205214	GotoStatement	goto end_buf ;	3526:3:86390:86402	1204569	0	True				
ANR	1205215	Identifier	end_buf		1204569	0					
ANR	1205216	ElseStatement	else		1204569	0					
ANR	1205217	CompoundStatement		178:11:4763:4763	1204569	0					
ANR	1205218	ExpressionStatement	min_semi_end = ( UChar * ) end	3530:1:86429:86456	1204569	0	True				
ANR	1205219	AssignmentExpression	min_semi_end = ( UChar * ) end		1204569	0		=			
ANR	1205220	Identifier	min_semi_end		1204569	0					
ANR	1205221	CastExpression	( UChar * ) end		1204569	1					
ANR	1205222	CastTarget	UChar *		1204569	0					
ANR	1205223	Identifier	end		1204569	1					
ANR	1205224	GotoStatement	goto end_buf ;	3531:1:86459:86471	1204569	1	True				
ANR	1205225	Identifier	end_buf		1204569	0					
ANR	1205226	ElseStatement	else		1204569	0					
ANR	1205227	IfStatement	if ( ( reg -> anchor & ANCHOR_ANYCHAR_STAR_ML ) )		1204569	0					
ANR	1205228	Condition	reg -> anchor & ANCHOR_ANYCHAR_STAR_ML	3534:13:86500:86537	1204569	0	True				
ANR	1205229	BitAndExpression	reg -> anchor & ANCHOR_ANYCHAR_STAR_ML		1204569	0		&			
ANR	1205230	PtrMemberAccess	reg -> anchor		1204569	0					
ANR	1205231	Identifier	reg		1204569	0					
ANR	1205232	Identifier	anchor		1204569	1					
ANR	1205233	Identifier	ANCHOR_ANYCHAR_STAR_ML		1204569	1					
ANR	1205234	CompoundStatement		183:53:4877:4877	1204569	1					
ANR	1205235	GotoStatement	goto begin_position ;	3535:6:86548:86567	1204569	0	True				
ANR	1205236	Identifier	begin_position		1204569	0					
ANR	1205237	ElseStatement	else		1204569	0					
ANR	1205238	IfStatement	if ( str == end )		1204569	0					
ANR	1205239	Condition	str == end	3538:11:86590:86599	1204569	0	True				
ANR	1205240	EqualityExpression	str == end		1204569	0		==			
ANR	1205241	Identifier	str		1204569	0					
ANR	1205242	Identifier	end		1204569	1					
ANR	1205243	CompoundStatement		188:11:4971:5022	1204569	1					
ANR	1205244	Statement	static	3539:4:86627:86632	1204569	0	True				
ANR	1205245	IdentifierDeclStatement	"const UChar * address_for_empty_string = ( UChar * ) """" ;"	3539:11:86634:86685	1204569	1	True				
ANR	1205246	IdentifierDecl	"* address_for_empty_string = ( UChar * ) """""		1204569	0					
ANR	1205247	IdentifierDeclType	const UChar *		1204569	0					
ANR	1205248	Identifier	address_for_empty_string		1204569	1					
ANR	1205249	AssignmentExpression	"* address_for_empty_string = ( UChar * ) """""		1204569	2		=			
ANR	1205250	Identifier	address_for_empty_string		1204569	0					
ANR	1205251	CastExpression	"( UChar * ) """""		1204569	1					
ANR	1205252	CastTarget	UChar *		1204569	0					
ANR	1205253	PrimaryExpression	""""""		1204569	1					
ANR	1205254	ExpressionStatement	"fprintf ( stderr , ""onig_search: empty string.\\n"" )"	3542:4:86717:86764	1204569	2	True				
ANR	1205255	CallExpression	"fprintf ( stderr , ""onig_search: empty string.\\n"" )"		1204569	0					
ANR	1205256	Callee	fprintf		1204569	0					
ANR	1205257	Identifier	fprintf		1204569	0					
ANR	1205258	ArgumentList	stderr		1204569	1					
ANR	1205259	Argument	stderr		1204569	0					
ANR	1205260	Identifier	stderr		1204569	0					
ANR	1205261	Argument	"""onig_search: empty string.\\n"""		1204569	1					
ANR	1205262	PrimaryExpression	"""onig_search: empty string.\\n"""		1204569	0					
ANR	1205263	IfStatement	if ( reg -> threshold_len == 0 )		1204569	3					
ANR	1205264	Condition	reg -> threshold_len == 0	3545:8:86782:86804	1204569	0	True				
ANR	1205265	EqualityExpression	reg -> threshold_len == 0		1204569	0		==			
ANR	1205266	PtrMemberAccess	reg -> threshold_len		1204569	0					
ANR	1205267	Identifier	reg		1204569	0					
ANR	1205268	Identifier	threshold_len		1204569	1					
ANR	1205269	PrimaryExpression	0		1204569	1					
ANR	1205270	CompoundStatement		194:33:5144:5144	1204569	1					
ANR	1205271	ExpressionStatement	start = end = str = address_for_empty_string	3546:6:86815:86859	1204569	0	True				
ANR	1205272	AssignmentExpression	start = end = str = address_for_empty_string		1204569	0		=			
ANR	1205273	Identifier	start		1204569	0					
ANR	1205274	AssignmentExpression	end = str = address_for_empty_string		1204569	1		=			
ANR	1205275	Identifier	end		1204569	0					
ANR	1205276	AssignmentExpression	str = address_for_empty_string		1204569	1		=			
ANR	1205277	Identifier	str		1204569	0					
ANR	1205278	Identifier	address_for_empty_string		1204569	1					
ANR	1205279	ExpressionStatement	s = ( UChar * ) start	3547:6:86867:86885	1204569	1	True				
ANR	1205280	AssignmentExpression	s = ( UChar * ) start		1204569	0		=			
ANR	1205281	Identifier	s		1204569	0					
ANR	1205282	CastExpression	( UChar * ) start		1204569	1					
ANR	1205283	CastTarget	UChar *		1204569	0					
ANR	1205284	Identifier	start		1204569	1					
ANR	1205285	ExpressionStatement	prev = ( UChar * ) NULL	3548:6:86893:86913	1204569	2	True				
ANR	1205286	AssignmentExpression	prev = ( UChar * ) NULL		1204569	0		=			
ANR	1205287	Identifier	prev		1204569	0					
ANR	1205288	CastExpression	( UChar * ) NULL		1204569	1					
ANR	1205289	CastTarget	UChar *		1204569	0					
ANR	1205290	Identifier	NULL		1204569	1					
ANR	1205291	ExpressionStatement	"MATCH_ARG_INIT ( msa , option , region , start )"	3550:6:86922:86964	1204569	3	True				
ANR	1205292	CallExpression	"MATCH_ARG_INIT ( msa , option , region , start )"		1204569	0					
ANR	1205293	Callee	MATCH_ARG_INIT		1204569	0					
ANR	1205294	Identifier	MATCH_ARG_INIT		1204569	0					
ANR	1205295	ArgumentList	msa		1204569	1					
ANR	1205296	Argument	msa		1204569	0					
ANR	1205297	Identifier	msa		1204569	0					
ANR	1205298	Argument	option		1204569	1					
ANR	1205299	Identifier	option		1204569	0					
ANR	1205300	Argument	region		1204569	2					
ANR	1205301	Identifier	region		1204569	0					
ANR	1205302	Argument	start		1204569	3					
ANR	1205303	Identifier	start		1204569	0					
ANR	1205304	ExpressionStatement	msa . state_check_buff = ( void * ) 0	3552:6:87011:87043	1204569	4	True				
ANR	1205305	AssignmentExpression	msa . state_check_buff = ( void * ) 0		1204569	0		=			
ANR	1205306	MemberAccess	msa . state_check_buff		1204569	0					
ANR	1205307	Identifier	msa		1204569	0					
ANR	1205308	Identifier	state_check_buff		1204569	1					
ANR	1205309	CastExpression	( void * ) 0		1204569	1					
ANR	1205310	CastTarget	void *		1204569	0					
ANR	1205311	PrimaryExpression	0		1204569	1					
ANR	1205312	ExpressionStatement	msa . state_check_buff_size = 0	3553:6:87051:87080	1204569	5	True				
ANR	1205313	AssignmentExpression	msa . state_check_buff_size = 0		1204569	0		=			
ANR	1205314	MemberAccess	msa . state_check_buff_size		1204569	0					
ANR	1205315	Identifier	msa		1204569	0					
ANR	1205316	Identifier	state_check_buff_size		1204569	1					
ANR	1205317	PrimaryExpression	0		1204569	1					
ANR	1205318	ExpressionStatement	MATCH_AND_RETURN_CHECK ( end )	3555:6:87125:87152	1204569	6	True				
ANR	1205319	CallExpression	MATCH_AND_RETURN_CHECK ( end )		1204569	0					
ANR	1205320	Callee	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205321	Identifier	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205322	ArgumentList	end		1204569	1					
ANR	1205323	Argument	end		1204569	0					
ANR	1205324	Identifier	end		1204569	0					
ANR	1205325	GotoStatement	goto mismatch ;	3556:6:87160:87173	1204569	7	True				
ANR	1205326	Identifier	mismatch		1204569	0					
ANR	1205327	GotoStatement	goto mismatch_no_msa ;	3558:4:87185:87205	1204569	4	True				
ANR	1205328	Identifier	mismatch_no_msa		1204569	0					
ANR	1205329	ExpressionStatement	"fprintf ( stderr , ""onig_search(apply anchor): end: %d, start: %d, range: %d\\n"" , ( int ) ( end - str ) , ( int ) ( start - str ) , ( int ) ( range - str ) )"	3562:2:87239:87380	1204569	27	True				
ANR	1205330	CallExpression	"fprintf ( stderr , ""onig_search(apply anchor): end: %d, start: %d, range: %d\\n"" , ( int ) ( end - str ) , ( int ) ( start - str ) , ( int ) ( range - str ) )"		1204569	0					
ANR	1205331	Callee	fprintf		1204569	0					
ANR	1205332	Identifier	fprintf		1204569	0					
ANR	1205333	ArgumentList	stderr		1204569	1					
ANR	1205334	Argument	stderr		1204569	0					
ANR	1205335	Identifier	stderr		1204569	0					
ANR	1205336	Argument	"""onig_search(apply anchor): end: %d, start: %d, range: %d\\n"""		1204569	1					
ANR	1205337	PrimaryExpression	"""onig_search(apply anchor): end: %d, start: %d, range: %d\\n"""		1204569	0					
ANR	1205338	Argument	( int ) ( end - str )		1204569	2					
ANR	1205339	CastExpression	( int ) ( end - str )		1204569	0					
ANR	1205340	CastTarget	int		1204569	0					
ANR	1205341	AdditiveExpression	end - str		1204569	1		-			
ANR	1205342	Identifier	end		1204569	0					
ANR	1205343	Identifier	str		1204569	1					
ANR	1205344	Argument	( int ) ( start - str )		1204569	3					
ANR	1205345	CastExpression	( int ) ( start - str )		1204569	0					
ANR	1205346	CastTarget	int		1204569	0					
ANR	1205347	AdditiveExpression	start - str		1204569	1		-			
ANR	1205348	Identifier	start		1204569	0					
ANR	1205349	Identifier	str		1204569	1					
ANR	1205350	Argument	( int ) ( range - str )		1204569	4					
ANR	1205351	CastExpression	( int ) ( range - str )		1204569	0					
ANR	1205352	CastTarget	int		1204569	0					
ANR	1205353	AdditiveExpression	range - str		1204569	1		-			
ANR	1205354	Identifier	range		1204569	0					
ANR	1205355	Identifier	str		1204569	1					
ANR	1205356	ExpressionStatement	"MATCH_ARG_INIT ( msa , option , region , orig_start )"	3566:2:87392:87439	1204569	28	True				
ANR	1205357	CallExpression	"MATCH_ARG_INIT ( msa , option , region , orig_start )"		1204569	0					
ANR	1205358	Callee	MATCH_ARG_INIT		1204569	0					
ANR	1205359	Identifier	MATCH_ARG_INIT		1204569	0					
ANR	1205360	ArgumentList	msa		1204569	1					
ANR	1205361	Argument	msa		1204569	0					
ANR	1205362	Identifier	msa		1204569	0					
ANR	1205363	Argument	option		1204569	1					
ANR	1205364	Identifier	option		1204569	0					
ANR	1205365	Argument	region		1204569	2					
ANR	1205366	Identifier	region		1204569	0					
ANR	1205367	Argument	orig_start		1204569	3					
ANR	1205368	Identifier	orig_start		1204569	0					
ANR	1205369	CompoundStatement		218:4:5825:5863	1204569	29					
ANR	1205370	IdentifierDeclStatement	"int offset = ( MIN ( start , range ) - str ) ;"	3569:4:87488:87526	1204569	0	True				
ANR	1205371	IdentifierDecl	"offset = ( MIN ( start , range ) - str )"		1204569	0					
ANR	1205372	IdentifierDeclType	int		1204569	0					
ANR	1205373	Identifier	offset		1204569	1					
ANR	1205374	AssignmentExpression	"offset = ( MIN ( start , range ) - str )"		1204569	2		=			
ANR	1205375	Identifier	offset		1204569	0					
ANR	1205376	AdditiveExpression	"MIN ( start , range ) - str"		1204569	1		-			
ANR	1205377	CallExpression	"MIN ( start , range )"		1204569	0					
ANR	1205378	Callee	MIN		1204569	0					
ANR	1205379	Identifier	MIN		1204569	0					
ANR	1205380	ArgumentList	start		1204569	1					
ANR	1205381	Argument	start		1204569	0					
ANR	1205382	Identifier	start		1204569	0					
ANR	1205383	Argument	range		1204569	1					
ANR	1205384	Identifier	range		1204569	0					
ANR	1205385	Identifier	str		1204569	1					
ANR	1205386	ExpressionStatement	"STATE_CHECK_BUFF_INIT ( msa , end - str , offset , reg -> num_comb_exp_check )"	3570:4:87532:87602	1204569	1	True				
ANR	1205387	CallExpression	"STATE_CHECK_BUFF_INIT ( msa , end - str , offset , reg -> num_comb_exp_check )"		1204569	0					
ANR	1205388	Callee	STATE_CHECK_BUFF_INIT		1204569	0					
ANR	1205389	Identifier	STATE_CHECK_BUFF_INIT		1204569	0					
ANR	1205390	ArgumentList	msa		1204569	1					
ANR	1205391	Argument	msa		1204569	0					
ANR	1205392	Identifier	msa		1204569	0					
ANR	1205393	Argument	end - str		1204569	1					
ANR	1205394	AdditiveExpression	end - str		1204569	0		-			
ANR	1205395	Identifier	end		1204569	0					
ANR	1205396	Identifier	str		1204569	1					
ANR	1205397	Argument	offset		1204569	2					
ANR	1205398	Identifier	offset		1204569	0					
ANR	1205399	Argument	reg -> num_comb_exp_check		1204569	3					
ANR	1205400	PtrMemberAccess	reg -> num_comb_exp_check		1204569	0					
ANR	1205401	Identifier	reg		1204569	0					
ANR	1205402	Identifier	num_comb_exp_check		1204569	1					
ANR	1205403	ExpressionStatement	s = ( UChar * ) start	3574:2:87618:87636	1204569	30	True				
ANR	1205404	AssignmentExpression	s = ( UChar * ) start		1204569	0		=			
ANR	1205405	Identifier	s		1204569	0					
ANR	1205406	CastExpression	( UChar * ) start		1204569	1					
ANR	1205407	CastTarget	UChar *		1204569	0					
ANR	1205408	Identifier	start		1204569	1					
ANR	1205409	IfStatement	if ( range > start )		1204569	31					
ANR	1205410	Condition	range > start	3575:6:87644:87656	1204569	0	True				
ANR	1205411	RelationalExpression	range > start		1204569	0		>			
ANR	1205412	Identifier	range		1204569	0					
ANR	1205413	Identifier	start		1204569	1					
ANR	1205414	CompoundStatement		224:21:5996:5996	1204569	1					
ANR	1205415	IfStatement	if ( s > str )		1204569	0					
ANR	1205416	Condition	s > str	3576:8:87692:87698	1204569	0	True				
ANR	1205417	RelationalExpression	s > str		1204569	0		>			
ANR	1205418	Identifier	s		1204569	0					
ANR	1205419	Identifier	str		1204569	1					
ANR	1205420	ExpressionStatement	"prev = onigenc_get_prev_char_head ( reg -> enc , str , s )"	3577:6:87707:87758	1204569	1	True				
ANR	1205421	AssignmentExpression	"prev = onigenc_get_prev_char_head ( reg -> enc , str , s )"		1204569	0		=			
ANR	1205422	Identifier	prev		1204569	0					
ANR	1205423	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , str , s )"		1204569	1					
ANR	1205424	Callee	onigenc_get_prev_char_head		1204569	0					
ANR	1205425	Identifier	onigenc_get_prev_char_head		1204569	0					
ANR	1205426	ArgumentList	reg -> enc		1204569	1					
ANR	1205427	Argument	reg -> enc		1204569	0					
ANR	1205428	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205429	Identifier	reg		1204569	0					
ANR	1205430	Identifier	enc		1204569	1					
ANR	1205431	Argument	str		1204569	1					
ANR	1205432	Identifier	str		1204569	0					
ANR	1205433	Argument	s		1204569	2					
ANR	1205434	Identifier	s		1204569	0					
ANR	1205435	ElseStatement	else		1204569	0					
ANR	1205436	ExpressionStatement	prev = ( UChar * ) NULL	3579:6:87775:87795	1204569	0	True				
ANR	1205437	AssignmentExpression	prev = ( UChar * ) NULL		1204569	0		=			
ANR	1205438	Identifier	prev		1204569	0					
ANR	1205439	CastExpression	( UChar * ) NULL		1204569	1					
ANR	1205440	CastTarget	UChar *		1204569	0					
ANR	1205441	Identifier	NULL		1204569	1					
ANR	1205442	IfStatement	if ( reg -> optimize != ONIG_OPTIMIZE_NONE )		1204569	1					
ANR	1205443	Condition	reg -> optimize != ONIG_OPTIMIZE_NONE	3581:8:87806:87840	1204569	0	True				
ANR	1205444	EqualityExpression	reg -> optimize != ONIG_OPTIMIZE_NONE		1204569	0		!=			
ANR	1205445	PtrMemberAccess	reg -> optimize		1204569	0					
ANR	1205446	Identifier	reg		1204569	0					
ANR	1205447	Identifier	optimize		1204569	1					
ANR	1205448	Identifier	ONIG_OPTIMIZE_NONE		1204569	1					
ANR	1205449	CompoundStatement		231:6:6188:6228	1204569	1					
ANR	1205450	IdentifierDeclStatement	"UChar * sch_range , * low , * high , * low_prev ;"	3582:6:87851:87891	1204569	0	True				
ANR	1205451	IdentifierDecl	* sch_range		1204569	0					
ANR	1205452	IdentifierDeclType	UChar *		1204569	0					
ANR	1205453	Identifier	sch_range		1204569	1					
ANR	1205454	IdentifierDecl	* low		1204569	1					
ANR	1205455	IdentifierDeclType	UChar *		1204569	0					
ANR	1205456	Identifier	low		1204569	1					
ANR	1205457	IdentifierDecl	* high		1204569	2					
ANR	1205458	IdentifierDeclType	UChar *		1204569	0					
ANR	1205459	Identifier	high		1204569	1					
ANR	1205460	IdentifierDecl	* low_prev		1204569	3					
ANR	1205461	IdentifierDeclType	UChar *		1204569	0					
ANR	1205462	Identifier	low_prev		1204569	1					
ANR	1205463	ExpressionStatement	sch_range = ( UChar * ) range	3584:6:87900:87926	1204569	1	True				
ANR	1205464	AssignmentExpression	sch_range = ( UChar * ) range		1204569	0		=			
ANR	1205465	Identifier	sch_range		1204569	0					
ANR	1205466	CastExpression	( UChar * ) range		1204569	1					
ANR	1205467	CastTarget	UChar *		1204569	0					
ANR	1205468	Identifier	range		1204569	1					
ANR	1205469	IfStatement	if ( reg -> dmax != 0 )		1204569	2					
ANR	1205470	Condition	reg -> dmax != 0	3585:10:87938:87951	1204569	0	True				
ANR	1205471	EqualityExpression	reg -> dmax != 0		1204569	0		!=			
ANR	1205472	PtrMemberAccess	reg -> dmax		1204569	0					
ANR	1205473	Identifier	reg		1204569	0					
ANR	1205474	Identifier	dmax		1204569	1					
ANR	1205475	PrimaryExpression	0		1204569	1					
ANR	1205476	CompoundStatement		234:26:6291:6291	1204569	1					
ANR	1205477	IfStatement	if ( reg -> dmax == ONIG_INFINITE_DISTANCE )		1204569	0					
ANR	1205478	Condition	reg -> dmax == ONIG_INFINITE_DISTANCE	3586:5:87961:87995	1204569	0	True				
ANR	1205479	EqualityExpression	reg -> dmax == ONIG_INFINITE_DISTANCE		1204569	0		==			
ANR	1205480	PtrMemberAccess	reg -> dmax		1204569	0					
ANR	1205481	Identifier	reg		1204569	0					
ANR	1205482	Identifier	dmax		1204569	1					
ANR	1205483	Identifier	ONIG_INFINITE_DISTANCE		1204569	1					
ANR	1205484	ExpressionStatement	sch_range = ( UChar * ) end	3587:3:88001:88025	1204569	1	True				
ANR	1205485	AssignmentExpression	sch_range = ( UChar * ) end		1204569	0		=			
ANR	1205486	Identifier	sch_range		1204569	0					
ANR	1205487	CastExpression	( UChar * ) end		1204569	1					
ANR	1205488	CastTarget	UChar *		1204569	0					
ANR	1205489	Identifier	end		1204569	1					
ANR	1205490	ElseStatement	else		1204569	0					
ANR	1205491	CompoundStatement		237:6:6370:6370	1204569	0					
ANR	1205492	ExpressionStatement	sch_range += reg -> dmax	3589:3:88038:88060	1204569	0	True				
ANR	1205493	AssignmentExpression	sch_range += reg -> dmax		1204569	0		+=			
ANR	1205494	Identifier	sch_range		1204569	0					
ANR	1205495	PtrMemberAccess	reg -> dmax		1204569	1					
ANR	1205496	Identifier	reg		1204569	0					
ANR	1205497	Identifier	dmax		1204569	1					
ANR	1205498	IfStatement	if ( sch_range > end )		1204569	1					
ANR	1205499	Condition	sch_range > end	3590:7:88069:88083	1204569	0	True				
ANR	1205500	RelationalExpression	sch_range > end		1204569	0		>			
ANR	1205501	Identifier	sch_range		1204569	0					
ANR	1205502	Identifier	end		1204569	1					
ANR	1205503	ExpressionStatement	sch_range = ( UChar * ) end	3590:24:88086:88110	1204569	1	True				
ANR	1205504	AssignmentExpression	sch_range = ( UChar * ) end		1204569	0		=			
ANR	1205505	Identifier	sch_range		1204569	0					
ANR	1205506	CastExpression	( UChar * ) end		1204569	1					
ANR	1205507	CastTarget	UChar *		1204569	0					
ANR	1205508	Identifier	end		1204569	1					
ANR	1205509	IfStatement	if ( ( end - start ) < reg -> threshold_len )		1204569	3					
ANR	1205510	Condition	( end - start ) < reg -> threshold_len	3594:10:88134:88167	1204569	0	True				
ANR	1205511	RelationalExpression	( end - start ) < reg -> threshold_len		1204569	0		<			
ANR	1205512	AdditiveExpression	end - start		1204569	0		-			
ANR	1205513	Identifier	end		1204569	0					
ANR	1205514	Identifier	start		1204569	1					
ANR	1205515	PtrMemberAccess	reg -> threshold_len		1204569	1					
ANR	1205516	Identifier	reg		1204569	0					
ANR	1205517	Identifier	threshold_len		1204569	1					
ANR	1205518	GotoStatement	goto mismatch ;	3595:8:88178:88191	1204569	1	True				
ANR	1205519	Identifier	mismatch		1204569	0					
ANR	1205520	IfStatement	if ( reg -> dmax != ONIG_INFINITE_DISTANCE )		1204569	4					
ANR	1205521	Condition	reg -> dmax != ONIG_INFINITE_DISTANCE	3597:10:88204:88238	1204569	0	True				
ANR	1205522	EqualityExpression	reg -> dmax != ONIG_INFINITE_DISTANCE		1204569	0		!=			
ANR	1205523	PtrMemberAccess	reg -> dmax		1204569	0					
ANR	1205524	Identifier	reg		1204569	0					
ANR	1205525	Identifier	dmax		1204569	1					
ANR	1205526	Identifier	ONIG_INFINITE_DISTANCE		1204569	1					
ANR	1205527	CompoundStatement		246:47:6578:6578	1204569	1					
ANR	1205528	DoStatement	do		1204569	0					
ANR	1205529	CompoundStatement		247:4:6584:6584	1204569	0					
ANR	1205530	IfStatement	"if ( ! forward_search_range ( reg , str , end , s , sch_range , & low , & high , & low_prev ) )"		1204569	0					
ANR	1205531	Condition	"! forward_search_range ( reg , str , end , s , sch_range , & low , & high , & low_prev )"	3599:7:88256:88339	1204569	0	True				
ANR	1205532	UnaryOperationExpression	"! forward_search_range ( reg , str , end , s , sch_range , & low , & high , & low_prev )"		1204569	0					
ANR	1205533	UnaryOperator	!		1204569	0					
ANR	1205534	CallExpression	"forward_search_range ( reg , str , end , s , sch_range , & low , & high , & low_prev )"		1204569	1					
ANR	1205535	Callee	forward_search_range		1204569	0					
ANR	1205536	Identifier	forward_search_range		1204569	0					
ANR	1205537	ArgumentList	reg		1204569	1					
ANR	1205538	Argument	reg		1204569	0					
ANR	1205539	Identifier	reg		1204569	0					
ANR	1205540	Argument	str		1204569	1					
ANR	1205541	Identifier	str		1204569	0					
ANR	1205542	Argument	end		1204569	2					
ANR	1205543	Identifier	end		1204569	0					
ANR	1205544	Argument	s		1204569	3					
ANR	1205545	Identifier	s		1204569	0					
ANR	1205546	Argument	sch_range		1204569	4					
ANR	1205547	Identifier	sch_range		1204569	0					
ANR	1205548	Argument	& low		1204569	5					
ANR	1205549	UnaryOperationExpression	& low		1204569	0					
ANR	1205550	UnaryOperator	&		1204569	0					
ANR	1205551	Identifier	low		1204569	1					
ANR	1205552	Argument	& high		1204569	6					
ANR	1205553	UnaryOperationExpression	& high		1204569	0					
ANR	1205554	UnaryOperator	&		1204569	0					
ANR	1205555	Identifier	high		1204569	1					
ANR	1205556	Argument	& low_prev		1204569	7					
ANR	1205557	UnaryOperationExpression	& low_prev		1204569	0					
ANR	1205558	UnaryOperator	&		1204569	0					
ANR	1205559	Identifier	low_prev		1204569	1					
ANR	1205560	GotoStatement	goto mismatch ;	3600:34:88342:88355	1204569	1	True				
ANR	1205561	Identifier	mismatch		1204569	0					
ANR	1205562	IfStatement	if ( s < low )		1204569	1					
ANR	1205563	Condition	s < low	3601:7:88364:88370	1204569	0	True				
ANR	1205564	RelationalExpression	s < low		1204569	0		<			
ANR	1205565	Identifier	s		1204569	0					
ANR	1205566	Identifier	low		1204569	1					
ANR	1205567	CompoundStatement		250:16:6710:6710	1204569	1					
ANR	1205568	ExpressionStatement	s = low	3602:5:88380:88390	1204569	0	True				
ANR	1205569	AssignmentExpression	s = low		1204569	0		=			
ANR	1205570	Identifier	s		1204569	0					
ANR	1205571	Identifier	low		1204569	1					
ANR	1205572	ExpressionStatement	prev = low_prev	3603:5:88397:88412	1204569	1	True				
ANR	1205573	AssignmentExpression	prev = low_prev		1204569	0		=			
ANR	1205574	Identifier	prev		1204569	0					
ANR	1205575	Identifier	low_prev		1204569	1					
ANR	1205576	WhileStatement	while ( s <= high )		1204569	2					
ANR	1205577	Condition	s <= high	3605:10:88429:88437	1204569	0	True				
ANR	1205578	RelationalExpression	s <= high		1204569	0		<=			
ANR	1205579	Identifier	s		1204569	0					
ANR	1205580	Identifier	high		1204569	1					
ANR	1205581	CompoundStatement		254:21:6777:6777	1204569	1					
ANR	1205582	ExpressionStatement	MATCH_AND_RETURN_CHECK ( orig_range )	3606:5:88447:88481	1204569	0	True				
ANR	1205583	CallExpression	MATCH_AND_RETURN_CHECK ( orig_range )		1204569	0					
ANR	1205584	Callee	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205585	Identifier	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205586	ArgumentList	orig_range		1204569	1					
ANR	1205587	Argument	orig_range		1204569	0					
ANR	1205588	Identifier	orig_range		1204569	0					
ANR	1205589	ExpressionStatement	prev = s	3607:5:88488:88496	1204569	1	True				
ANR	1205590	AssignmentExpression	prev = s		1204569	0		=			
ANR	1205591	Identifier	prev		1204569	0					
ANR	1205592	Identifier	s		1204569	1					
ANR	1205593	ExpressionStatement	"s += enclen ( reg -> enc , s )"	3608:5:88503:88527	1204569	2	True				
ANR	1205594	AssignmentExpression	"s += enclen ( reg -> enc , s )"		1204569	0		+=			
ANR	1205595	Identifier	s		1204569	0					
ANR	1205596	CallExpression	"enclen ( reg -> enc , s )"		1204569	1					
ANR	1205597	Callee	enclen		1204569	0					
ANR	1205598	Identifier	enclen		1204569	0					
ANR	1205599	ArgumentList	reg -> enc		1204569	1					
ANR	1205600	Argument	reg -> enc		1204569	0					
ANR	1205601	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205602	Identifier	reg		1204569	0					
ANR	1205603	Identifier	enc		1204569	1					
ANR	1205604	Argument	s		1204569	1					
ANR	1205605	Identifier	s		1204569	0					
ANR	1205606	Condition	s < range	3610:10:88544:88552	1204569	1	True				
ANR	1205607	RelationalExpression	s < range		1204569	0		<			
ANR	1205608	Identifier	s		1204569	0					
ANR	1205609	Identifier	range		1204569	1					
ANR	1205610	GotoStatement	goto mismatch ;	3611:1:88557:88570	1204569	1	True				
ANR	1205611	Identifier	mismatch		1204569	0					
ANR	1205612	ElseStatement	else		1204569	0					
ANR	1205613	CompoundStatement		262:11:6928:6928	1204569	0					
ANR	1205614	IfStatement	"if ( ! forward_search_range ( reg , str , end , s , sch_range , & low , & high , ( UChar * * ) NULL ) )"		1204569	0					
ANR	1205615	Condition	"! forward_search_range ( reg , str , end , s , sch_range , & low , & high , ( UChar * * ) NULL )"	3614:5:88616:88702	1204569	0	True				
ANR	1205616	UnaryOperationExpression	"! forward_search_range ( reg , str , end , s , sch_range , & low , & high , ( UChar * * ) NULL )"		1204569	0					
ANR	1205617	UnaryOperator	!		1204569	0					
ANR	1205618	CallExpression	"forward_search_range ( reg , str , end , s , sch_range , & low , & high , ( UChar * * ) NULL )"		1204569	1					
ANR	1205619	Callee	forward_search_range		1204569	0					
ANR	1205620	Identifier	forward_search_range		1204569	0					
ANR	1205621	ArgumentList	reg		1204569	1					
ANR	1205622	Argument	reg		1204569	0					
ANR	1205623	Identifier	reg		1204569	0					
ANR	1205624	Argument	str		1204569	1					
ANR	1205625	Identifier	str		1204569	0					
ANR	1205626	Argument	end		1204569	2					
ANR	1205627	Identifier	end		1204569	0					
ANR	1205628	Argument	s		1204569	3					
ANR	1205629	Identifier	s		1204569	0					
ANR	1205630	Argument	sch_range		1204569	4					
ANR	1205631	Identifier	sch_range		1204569	0					
ANR	1205632	Argument	& low		1204569	5					
ANR	1205633	UnaryOperationExpression	& low		1204569	0					
ANR	1205634	UnaryOperator	&		1204569	0					
ANR	1205635	Identifier	low		1204569	1					
ANR	1205636	Argument	& high		1204569	6					
ANR	1205637	UnaryOperationExpression	& high		1204569	0					
ANR	1205638	UnaryOperator	&		1204569	0					
ANR	1205639	Identifier	high		1204569	1					
ANR	1205640	Argument	( UChar * * ) NULL		1204569	7					
ANR	1205641	CastExpression	( UChar * * ) NULL		1204569	0					
ANR	1205642	CastTarget	UChar * *		1204569	0					
ANR	1205643	Identifier	NULL		1204569	1					
ANR	1205644	GotoStatement	goto mismatch ;	3615:37:88705:88718	1204569	1	True				
ANR	1205645	Identifier	mismatch		1204569	0					
ANR	1205646	IfStatement	if ( ( reg -> anchor & ANCHOR_ANYCHAR_STAR ) != 0 )		1204569	1					
ANR	1205647	Condition	( reg -> anchor & ANCHOR_ANYCHAR_STAR ) != 0	3617:12:88733:88772	1204569	0	True				
ANR	1205648	EqualityExpression	( reg -> anchor & ANCHOR_ANYCHAR_STAR ) != 0		1204569	0		!=			
ANR	1205649	BitAndExpression	reg -> anchor & ANCHOR_ANYCHAR_STAR		1204569	0		&			
ANR	1205650	PtrMemberAccess	reg -> anchor		1204569	0					
ANR	1205651	Identifier	reg		1204569	0					
ANR	1205652	Identifier	anchor		1204569	1					
ANR	1205653	Identifier	ANCHOR_ANYCHAR_STAR		1204569	1					
ANR	1205654	PrimaryExpression	0		1204569	1					
ANR	1205655	CompoundStatement		266:54:7112:7112	1204569	1					
ANR	1205656	DoStatement	do		1204569	0					
ANR	1205657	CompoundStatement		267:13:7127:7127	1204569	0					
ANR	1205658	ExpressionStatement	MATCH_AND_RETURN_CHECK ( orig_range )	3619:12:88804:88838	1204569	0	True				
ANR	1205659	CallExpression	MATCH_AND_RETURN_CHECK ( orig_range )		1204569	0					
ANR	1205660	Callee	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205661	Identifier	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205662	ArgumentList	orig_range		1204569	1					
ANR	1205663	Argument	orig_range		1204569	0					
ANR	1205664	Identifier	orig_range		1204569	0					
ANR	1205665	ExpressionStatement	prev = s	3620:12:88852:88860	1204569	1	True				
ANR	1205666	AssignmentExpression	prev = s		1204569	0		=			
ANR	1205667	Identifier	prev		1204569	0					
ANR	1205668	Identifier	s		1204569	1					
ANR	1205669	ExpressionStatement	"s += enclen ( reg -> enc , s )"	3621:12:88874:88898	1204569	2	True				
ANR	1205670	AssignmentExpression	"s += enclen ( reg -> enc , s )"		1204569	0		+=			
ANR	1205671	Identifier	s		1204569	0					
ANR	1205672	CallExpression	"enclen ( reg -> enc , s )"		1204569	1					
ANR	1205673	Callee	enclen		1204569	0					
ANR	1205674	Identifier	enclen		1204569	0					
ANR	1205675	ArgumentList	reg -> enc		1204569	1					
ANR	1205676	Argument	reg -> enc		1204569	0					
ANR	1205677	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205678	Identifier	reg		1204569	0					
ANR	1205679	Identifier	enc		1204569	1					
ANR	1205680	Argument	s		1204569	1					
ANR	1205681	Identifier	s		1204569	0					
ANR	1205682	WhileStatement	"while ( ! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end ) && s < range )"		1204569	3					
ANR	1205683	Condition	"! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end ) && s < range"	3623:19:88920:88976	1204569	0	True				
ANR	1205684	AndExpression	"! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end ) && s < range"		1204569	0		&&			
ANR	1205685	UnaryOperationExpression	"! ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"		1204569	0					
ANR	1205686	UnaryOperator	!		1204569	0					
ANR	1205687	CallExpression	"ONIGENC_IS_MBC_NEWLINE ( reg -> enc , prev , end )"		1204569	1					
ANR	1205688	Callee	ONIGENC_IS_MBC_NEWLINE		1204569	0					
ANR	1205689	Identifier	ONIGENC_IS_MBC_NEWLINE		1204569	0					
ANR	1205690	ArgumentList	reg -> enc		1204569	1					
ANR	1205691	Argument	reg -> enc		1204569	0					
ANR	1205692	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205693	Identifier	reg		1204569	0					
ANR	1205694	Identifier	enc		1204569	1					
ANR	1205695	Argument	prev		1204569	1					
ANR	1205696	Identifier	prev		1204569	0					
ANR	1205697	Argument	end		1204569	2					
ANR	1205698	Identifier	end		1204569	0					
ANR	1205699	RelationalExpression	s < range		1204569	1		<			
ANR	1205700	Identifier	s		1204569	0					
ANR	1205701	Identifier	range		1204569	1					
ANR	1205702	CompoundStatement		272:78:7316:7316	1204569	1					
ANR	1205703	ExpressionStatement	prev = s	3624:14:88995:89003	1204569	0	True				
ANR	1205704	AssignmentExpression	prev = s		1204569	0		=			
ANR	1205705	Identifier	prev		1204569	0					
ANR	1205706	Identifier	s		1204569	1					
ANR	1205707	ExpressionStatement	"s += enclen ( reg -> enc , s )"	3625:14:89019:89043	1204569	1	True				
ANR	1205708	AssignmentExpression	"s += enclen ( reg -> enc , s )"		1204569	0		+=			
ANR	1205709	Identifier	s		1204569	0					
ANR	1205710	CallExpression	"enclen ( reg -> enc , s )"		1204569	1					
ANR	1205711	Callee	enclen		1204569	0					
ANR	1205712	Identifier	enclen		1204569	0					
ANR	1205713	ArgumentList	reg -> enc		1204569	1					
ANR	1205714	Argument	reg -> enc		1204569	0					
ANR	1205715	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205716	Identifier	reg		1204569	0					
ANR	1205717	Identifier	enc		1204569	1					
ANR	1205718	Argument	s		1204569	1					
ANR	1205719	Identifier	s		1204569	0					
ANR	1205720	Condition	s < range	3627:19:89078:89086	1204569	1	True				
ANR	1205721	RelationalExpression	s < range		1204569	0		<			
ANR	1205722	Identifier	s		1204569	0					
ANR	1205723	Identifier	range		1204569	1					
ANR	1205724	GotoStatement	goto mismatch ;	3628:10:89100:89113	1204569	1	True				
ANR	1205725	Identifier	mismatch		1204569	0					
ANR	1205726	DoStatement	do		1204569	2					
ANR	1205727	CompoundStatement		282:7:7484:7484	1204569	0					
ANR	1205728	ExpressionStatement	MATCH_AND_RETURN_CHECK ( orig_range )	3634:6:89155:89189	1204569	0	True				
ANR	1205729	CallExpression	MATCH_AND_RETURN_CHECK ( orig_range )		1204569	0					
ANR	1205730	Callee	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205731	Identifier	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205732	ArgumentList	orig_range		1204569	1					
ANR	1205733	Argument	orig_range		1204569	0					
ANR	1205734	Identifier	orig_range		1204569	0					
ANR	1205735	ExpressionStatement	prev = s	3635:6:89197:89205	1204569	1	True				
ANR	1205736	AssignmentExpression	prev = s		1204569	0		=			
ANR	1205737	Identifier	prev		1204569	0					
ANR	1205738	Identifier	s		1204569	1					
ANR	1205739	ExpressionStatement	"s += enclen ( reg -> enc , s )"	3636:6:89213:89237	1204569	2	True				
ANR	1205740	AssignmentExpression	"s += enclen ( reg -> enc , s )"		1204569	0		+=			
ANR	1205741	Identifier	s		1204569	0					
ANR	1205742	CallExpression	"enclen ( reg -> enc , s )"		1204569	1					
ANR	1205743	Callee	enclen		1204569	0					
ANR	1205744	Identifier	enclen		1204569	0					
ANR	1205745	ArgumentList	reg -> enc		1204569	1					
ANR	1205746	Argument	reg -> enc		1204569	0					
ANR	1205747	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205748	Identifier	reg		1204569	0					
ANR	1205749	Identifier	enc		1204569	1					
ANR	1205750	Argument	s		1204569	1					
ANR	1205751	Identifier	s		1204569	0					
ANR	1205752	Condition	s < range	3637:13:89252:89260	1204569	1	True				
ANR	1205753	RelationalExpression	s < range		1204569	0		<			
ANR	1205754	Identifier	s		1204569	0					
ANR	1205755	Identifier	range		1204569	1					
ANR	1205756	IfStatement	if ( s == range )		1204569	3					
ANR	1205757	Condition	s == range	3639:8:89273:89282	1204569	0	True				
ANR	1205758	EqualityExpression	s == range		1204569	0		==			
ANR	1205759	Identifier	s		1204569	0					
ANR	1205760	Identifier	range		1204569	1					
ANR	1205761	CompoundStatement		288:20:7622:7622	1204569	1					
ANR	1205762	ExpressionStatement	MATCH_AND_RETURN_CHECK ( orig_range )	3640:6:89329:89363	1204569	0	True				
ANR	1205763	CallExpression	MATCH_AND_RETURN_CHECK ( orig_range )		1204569	0					
ANR	1205764	Callee	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205765	Identifier	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205766	ArgumentList	orig_range		1204569	1					
ANR	1205767	Argument	orig_range		1204569	0					
ANR	1205768	Identifier	orig_range		1204569	0					
ANR	1205769	ElseStatement	else		1204569	0					
ANR	1205770	CompoundStatement		292:7:7719:7719	1204569	0					
ANR	1205771	IfStatement	if ( orig_start < end )		1204569	0					
ANR	1205772	Condition	orig_start < end	3645:8:89472:89487	1204569	0	True				
ANR	1205773	RelationalExpression	orig_start < end		1204569	0		<			
ANR	1205774	Identifier	orig_start		1204569	0					
ANR	1205775	Identifier	end		1204569	1					
ANR	1205776	ExpressionStatement	"orig_start += enclen ( reg -> enc , orig_start )"	3646:6:89496:89538	1204569	1	True				
ANR	1205777	AssignmentExpression	"orig_start += enclen ( reg -> enc , orig_start )"		1204569	0		+=			
ANR	1205778	Identifier	orig_start		1204569	0					
ANR	1205779	CallExpression	"enclen ( reg -> enc , orig_start )"		1204569	1					
ANR	1205780	Callee	enclen		1204569	0					
ANR	1205781	Identifier	enclen		1204569	0					
ANR	1205782	ArgumentList	reg -> enc		1204569	1					
ANR	1205783	Argument	reg -> enc		1204569	0					
ANR	1205784	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205785	Identifier	reg		1204569	0					
ANR	1205786	Identifier	enc		1204569	1					
ANR	1205787	Argument	orig_start		1204569	1					
ANR	1205788	Identifier	orig_start		1204569	0					
ANR	1205789	IfStatement	if ( reg -> optimize != ONIG_OPTIMIZE_NONE )		1204569	1					
ANR	1205790	Condition	reg -> optimize != ONIG_OPTIMIZE_NONE	3649:8:89577:89611	1204569	0	True				
ANR	1205791	EqualityExpression	reg -> optimize != ONIG_OPTIMIZE_NONE		1204569	0		!=			
ANR	1205792	PtrMemberAccess	reg -> optimize		1204569	0					
ANR	1205793	Identifier	reg		1204569	0					
ANR	1205794	Identifier	optimize		1204569	1					
ANR	1205795	Identifier	ONIG_OPTIMIZE_NONE		1204569	1					
ANR	1205796	CompoundStatement		299:6:7959:7999	1204569	1					
ANR	1205797	IdentifierDeclStatement	"UChar * low , * high , * adjrange , * sch_start ;"	3650:6:89622:89662	1204569	0	True				
ANR	1205798	IdentifierDecl	* low		1204569	0					
ANR	1205799	IdentifierDeclType	UChar *		1204569	0					
ANR	1205800	Identifier	low		1204569	1					
ANR	1205801	IdentifierDecl	* high		1204569	1					
ANR	1205802	IdentifierDeclType	UChar *		1204569	0					
ANR	1205803	Identifier	high		1204569	1					
ANR	1205804	IdentifierDecl	* adjrange		1204569	2					
ANR	1205805	IdentifierDeclType	UChar *		1204569	0					
ANR	1205806	Identifier	adjrange		1204569	1					
ANR	1205807	IdentifierDecl	* sch_start		1204569	3					
ANR	1205808	IdentifierDeclType	UChar *		1204569	0					
ANR	1205809	Identifier	sch_start		1204569	1					
ANR	1205810	IfStatement	if ( range < end )		1204569	1					
ANR	1205811	Condition	range < end	3652:10:89675:89685	1204569	0	True				
ANR	1205812	RelationalExpression	range < end		1204569	0		<			
ANR	1205813	Identifier	range		1204569	0					
ANR	1205814	Identifier	end		1204569	1					
ANR	1205815	ExpressionStatement	"adjrange = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , str , range )"	3653:1:89689:89751	1204569	1	True				
ANR	1205816	AssignmentExpression	"adjrange = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , str , range )"		1204569	0		=			
ANR	1205817	Identifier	adjrange		1204569	0					
ANR	1205818	CallExpression	"ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , str , range )"		1204569	1					
ANR	1205819	Callee	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1204569	0					
ANR	1205820	Identifier	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1204569	0					
ANR	1205821	ArgumentList	reg -> enc		1204569	1					
ANR	1205822	Argument	reg -> enc		1204569	0					
ANR	1205823	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205824	Identifier	reg		1204569	0					
ANR	1205825	Identifier	enc		1204569	1					
ANR	1205826	Argument	str		1204569	1					
ANR	1205827	Identifier	str		1204569	0					
ANR	1205828	Argument	range		1204569	2					
ANR	1205829	Identifier	range		1204569	0					
ANR	1205830	ElseStatement	else		1204569	0					
ANR	1205831	ExpressionStatement	adjrange = ( UChar * ) end	3655:1:89765:89788	1204569	0	True				
ANR	1205832	AssignmentExpression	adjrange = ( UChar * ) end		1204569	0		=			
ANR	1205833	Identifier	adjrange		1204569	0					
ANR	1205834	CastExpression	( UChar * ) end		1204569	1					
ANR	1205835	CastTarget	UChar *		1204569	0					
ANR	1205836	Identifier	end		1204569	1					
ANR	1205837	IfStatement	if ( reg -> dmax != ONIG_INFINITE_DISTANCE && ( end - range ) >= reg -> threshold_len )		1204569	2					
ANR	1205838	Condition	reg -> dmax != ONIG_INFINITE_DISTANCE && ( end - range ) >= reg -> threshold_len	3657:10:89801:89877	1204569	0	True				
ANR	1205839	AndExpression	reg -> dmax != ONIG_INFINITE_DISTANCE && ( end - range ) >= reg -> threshold_len		1204569	0		&&			
ANR	1205840	EqualityExpression	reg -> dmax != ONIG_INFINITE_DISTANCE		1204569	0		!=			
ANR	1205841	PtrMemberAccess	reg -> dmax		1204569	0					
ANR	1205842	Identifier	reg		1204569	0					
ANR	1205843	Identifier	dmax		1204569	1					
ANR	1205844	Identifier	ONIG_INFINITE_DISTANCE		1204569	1					
ANR	1205845	RelationalExpression	( end - range ) >= reg -> threshold_len		1204569	1		>=			
ANR	1205846	AdditiveExpression	end - range		1204569	0		-			
ANR	1205847	Identifier	end		1204569	0					
ANR	1205848	Identifier	range		1204569	1					
ANR	1205849	PtrMemberAccess	reg -> threshold_len		1204569	1					
ANR	1205850	Identifier	reg		1204569	0					
ANR	1205851	Identifier	threshold_len		1204569	1					
ANR	1205852	CompoundStatement		307:40:8217:8217	1204569	1					
ANR	1205853	DoStatement	do		1204569	0					
ANR	1205854	CompoundStatement		308:4:8223:8223	1204569	0					
ANR	1205855	ExpressionStatement	sch_start = s + reg -> dmax	3660:3:89891:89916	1204569	0	True				
ANR	1205856	AssignmentExpression	sch_start = s + reg -> dmax		1204569	0		=			
ANR	1205857	Identifier	sch_start		1204569	0					
ANR	1205858	AdditiveExpression	s + reg -> dmax		1204569	1		+			
ANR	1205859	Identifier	s		1204569	0					
ANR	1205860	PtrMemberAccess	reg -> dmax		1204569	1					
ANR	1205861	Identifier	reg		1204569	0					
ANR	1205862	Identifier	dmax		1204569	1					
ANR	1205863	IfStatement	if ( sch_start > end )		1204569	1					
ANR	1205864	Condition	sch_start > end	3661:7:89925:89939	1204569	0	True				
ANR	1205865	RelationalExpression	sch_start > end		1204569	0		>			
ANR	1205866	Identifier	sch_start		1204569	0					
ANR	1205867	Identifier	end		1204569	1					
ANR	1205868	ExpressionStatement	sch_start = ( UChar * ) end	3661:24:89942:89966	1204569	1	True				
ANR	1205869	AssignmentExpression	sch_start = ( UChar * ) end		1204569	0		=			
ANR	1205870	Identifier	sch_start		1204569	0					
ANR	1205871	CastExpression	( UChar * ) end		1204569	1					
ANR	1205872	CastTarget	UChar *		1204569	0					
ANR	1205873	Identifier	end		1204569	1					
ANR	1205874	IfStatement	"if ( backward_search_range ( reg , str , end , sch_start , range , adjrange , & low , & high ) <= 0 )"		1204569	2					
ANR	1205875	Condition	"backward_search_range ( reg , str , end , sch_start , range , adjrange , & low , & high ) <= 0"	3662:7:89975:90064	1204569	0	True				
ANR	1205876	RelationalExpression	"backward_search_range ( reg , str , end , sch_start , range , adjrange , & low , & high ) <= 0"		1204569	0		<=			
ANR	1205877	CallExpression	"backward_search_range ( reg , str , end , sch_start , range , adjrange , & low , & high )"		1204569	0					
ANR	1205878	Callee	backward_search_range		1204569	0					
ANR	1205879	Identifier	backward_search_range		1204569	0					
ANR	1205880	ArgumentList	reg		1204569	1					
ANR	1205881	Argument	reg		1204569	0					
ANR	1205882	Identifier	reg		1204569	0					
ANR	1205883	Argument	str		1204569	1					
ANR	1205884	Identifier	str		1204569	0					
ANR	1205885	Argument	end		1204569	2					
ANR	1205886	Identifier	end		1204569	0					
ANR	1205887	Argument	sch_start		1204569	3					
ANR	1205888	Identifier	sch_start		1204569	0					
ANR	1205889	Argument	range		1204569	4					
ANR	1205890	Identifier	range		1204569	0					
ANR	1205891	Argument	adjrange		1204569	5					
ANR	1205892	Identifier	adjrange		1204569	0					
ANR	1205893	Argument	& low		1204569	6					
ANR	1205894	UnaryOperationExpression	& low		1204569	0					
ANR	1205895	UnaryOperator	&		1204569	0					
ANR	1205896	Identifier	low		1204569	1					
ANR	1205897	Argument	& high		1204569	7					
ANR	1205898	UnaryOperationExpression	& high		1204569	0					
ANR	1205899	UnaryOperator	&		1204569	0					
ANR	1205900	Identifier	high		1204569	1					
ANR	1205901	PrimaryExpression	0		1204569	1					
ANR	1205902	GotoStatement	goto mismatch ;	3664:5:90072:90085	1204569	1	True				
ANR	1205903	Identifier	mismatch		1204569	0					
ANR	1205904	IfStatement	if ( s > high )		1204569	3					
ANR	1205905	Condition	s > high	3666:7:90095:90102	1204569	0	True				
ANR	1205906	RelationalExpression	s > high		1204569	0		>			
ANR	1205907	Identifier	s		1204569	0					
ANR	1205908	Identifier	high		1204569	1					
ANR	1205909	ExpressionStatement	s = high	3667:5:90110:90118	1204569	1	True				
ANR	1205910	AssignmentExpression	s = high		1204569	0		=			
ANR	1205911	Identifier	s		1204569	0					
ANR	1205912	Identifier	high		1204569	1					
ANR	1205913	WhileStatement	while ( s >= low )		1204569	4					
ANR	1205914	Condition	s >= low	3669:10:90131:90138	1204569	0	True				
ANR	1205915	RelationalExpression	s >= low		1204569	0		>=			
ANR	1205916	Identifier	s		1204569	0					
ANR	1205917	Identifier	low		1204569	1					
ANR	1205918	CompoundStatement		318:20:8478:8478	1204569	1					
ANR	1205919	ExpressionStatement	"prev = onigenc_get_prev_char_head ( reg -> enc , str , s )"	3670:5:90148:90199	1204569	0	True				
ANR	1205920	AssignmentExpression	"prev = onigenc_get_prev_char_head ( reg -> enc , str , s )"		1204569	0		=			
ANR	1205921	Identifier	prev		1204569	0					
ANR	1205922	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , str , s )"		1204569	1					
ANR	1205923	Callee	onigenc_get_prev_char_head		1204569	0					
ANR	1205924	Identifier	onigenc_get_prev_char_head		1204569	0					
ANR	1205925	ArgumentList	reg -> enc		1204569	1					
ANR	1205926	Argument	reg -> enc		1204569	0					
ANR	1205927	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1205928	Identifier	reg		1204569	0					
ANR	1205929	Identifier	enc		1204569	1					
ANR	1205930	Argument	str		1204569	1					
ANR	1205931	Identifier	str		1204569	0					
ANR	1205932	Argument	s		1204569	2					
ANR	1205933	Identifier	s		1204569	0					
ANR	1205934	ExpressionStatement	MATCH_AND_RETURN_CHECK ( orig_start )	3671:5:90206:90240	1204569	1	True				
ANR	1205935	CallExpression	MATCH_AND_RETURN_CHECK ( orig_start )		1204569	0					
ANR	1205936	Callee	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205937	Identifier	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1205938	ArgumentList	orig_start		1204569	1					
ANR	1205939	Argument	orig_start		1204569	0					
ANR	1205940	Identifier	orig_start		1204569	0					
ANR	1205941	ExpressionStatement	s = prev	3672:5:90247:90255	1204569	2	True				
ANR	1205942	AssignmentExpression	s = prev		1204569	0		=			
ANR	1205943	Identifier	s		1204569	0					
ANR	1205944	Identifier	prev		1204569	1					
ANR	1205945	Condition	s >= range	3674:10:90272:90281	1204569	1	True				
ANR	1205946	RelationalExpression	s >= range		1204569	0		>=			
ANR	1205947	Identifier	s		1204569	0					
ANR	1205948	Identifier	range		1204569	1					
ANR	1205949	GotoStatement	goto mismatch ;	3675:1:90286:90299	1204569	1	True				
ANR	1205950	Identifier	mismatch		1204569	0					
ANR	1205951	ElseStatement	else		1204569	0					
ANR	1205952	CompoundStatement		326:11:8657:8657	1204569	0					
ANR	1205953	IfStatement	if ( ( end - range ) < reg -> threshold_len )		1204569	0					
ANR	1205954	Condition	( end - range ) < reg -> threshold_len	3678:5:90345:90378	1204569	0	True				
ANR	1205955	RelationalExpression	( end - range ) < reg -> threshold_len		1204569	0		<			
ANR	1205956	AdditiveExpression	end - range		1204569	0		-			
ANR	1205957	Identifier	end		1204569	0					
ANR	1205958	Identifier	range		1204569	1					
ANR	1205959	PtrMemberAccess	reg -> threshold_len		1204569	1					
ANR	1205960	Identifier	reg		1204569	0					
ANR	1205961	Identifier	threshold_len		1204569	1					
ANR	1205962	GotoStatement	goto mismatch ;	3678:41:90381:90394	1204569	1	True				
ANR	1205963	Identifier	mismatch		1204569	0					
ANR	1205964	ExpressionStatement	sch_start = s	3680:1:90398:90411	1204569	1	True				
ANR	1205965	AssignmentExpression	sch_start = s		1204569	0		=			
ANR	1205966	Identifier	sch_start		1204569	0					
ANR	1205967	Identifier	s		1204569	1					
ANR	1205968	IfStatement	if ( reg -> dmax != 0 )		1204569	2					
ANR	1205969	Condition	reg -> dmax != 0	3681:5:90418:90431	1204569	0	True				
ANR	1205970	EqualityExpression	reg -> dmax != 0		1204569	0		!=			
ANR	1205971	PtrMemberAccess	reg -> dmax		1204569	0					
ANR	1205972	Identifier	reg		1204569	0					
ANR	1205973	Identifier	dmax		1204569	1					
ANR	1205974	PrimaryExpression	0		1204569	1					
ANR	1205975	CompoundStatement		330:21:8771:8771	1204569	1					
ANR	1205976	IfStatement	if ( reg -> dmax == ONIG_INFINITE_DISTANCE )		1204569	0					
ANR	1205977	Condition	reg -> dmax == ONIG_INFINITE_DISTANCE	3682:7:90443:90477	1204569	0	True				
ANR	1205978	EqualityExpression	reg -> dmax == ONIG_INFINITE_DISTANCE		1204569	0		==			
ANR	1205979	PtrMemberAccess	reg -> dmax		1204569	0					
ANR	1205980	Identifier	reg		1204569	0					
ANR	1205981	Identifier	dmax		1204569	1					
ANR	1205982	Identifier	ONIG_INFINITE_DISTANCE		1204569	1					
ANR	1205983	ExpressionStatement	sch_start = ( UChar * ) end	3683:5:90485:90509	1204569	1	True				
ANR	1205984	AssignmentExpression	sch_start = ( UChar * ) end		1204569	0		=			
ANR	1205985	Identifier	sch_start		1204569	0					
ANR	1205986	CastExpression	( UChar * ) end		1204569	1					
ANR	1205987	CastTarget	UChar *		1204569	0					
ANR	1205988	Identifier	end		1204569	1					
ANR	1205989	ElseStatement	else		1204569	0					
ANR	1205990	CompoundStatement		333:8:8856:8856	1204569	0					
ANR	1205991	ExpressionStatement	sch_start += reg -> dmax	3685:5:90526:90548	1204569	0	True				
ANR	1205992	AssignmentExpression	sch_start += reg -> dmax		1204569	0		+=			
ANR	1205993	Identifier	sch_start		1204569	0					
ANR	1205994	PtrMemberAccess	reg -> dmax		1204569	1					
ANR	1205995	Identifier	reg		1204569	0					
ANR	1205996	Identifier	dmax		1204569	1					
ANR	1205997	IfStatement	if ( sch_start > end )		1204569	1					
ANR	1205998	Condition	sch_start > end	3686:9:90559:90573	1204569	0	True				
ANR	1205999	RelationalExpression	sch_start > end		1204569	0		>			
ANR	1206000	Identifier	sch_start		1204569	0					
ANR	1206001	Identifier	end		1204569	1					
ANR	1206002	ExpressionStatement	sch_start = ( UChar * ) end	3686:26:90576:90600	1204569	1	True				
ANR	1206003	AssignmentExpression	sch_start = ( UChar * ) end		1204569	0		=			
ANR	1206004	Identifier	sch_start		1204569	0					
ANR	1206005	CastExpression	( UChar * ) end		1204569	1					
ANR	1206006	CastTarget	UChar *		1204569	0					
ANR	1206007	Identifier	end		1204569	1					
ANR	1206008	ElseStatement	else		1204569	0					
ANR	1206009	ExpressionStatement	"sch_start = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , start , sch_start )"	3688:7:90619:90698	1204569	0	True				
ANR	1206010	AssignmentExpression	"sch_start = ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , start , sch_start )"		1204569	0		=			
ANR	1206011	Identifier	sch_start		1204569	0					
ANR	1206012	CallExpression	"ONIGENC_LEFT_ADJUST_CHAR_HEAD ( reg -> enc , start , sch_start )"		1204569	1					
ANR	1206013	Callee	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1204569	0					
ANR	1206014	Identifier	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1204569	0					
ANR	1206015	ArgumentList	reg -> enc		1204569	1					
ANR	1206016	Argument	reg -> enc		1204569	0					
ANR	1206017	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1206018	Identifier	reg		1204569	0					
ANR	1206019	Identifier	enc		1204569	1					
ANR	1206020	Argument	start		1204569	1					
ANR	1206021	Identifier	start		1204569	0					
ANR	1206022	Argument	sch_start		1204569	2					
ANR	1206023	Identifier	sch_start		1204569	0					
ANR	1206024	IfStatement	"if ( backward_search_range ( reg , str , end , sch_start , range , adjrange , & low , & high ) <= 0 )"		1204569	3					
ANR	1206025	Condition	"backward_search_range ( reg , str , end , sch_start , range , adjrange , & low , & high ) <= 0"	3692:5:90713:90800	1204569	0	True				
ANR	1206026	RelationalExpression	"backward_search_range ( reg , str , end , sch_start , range , adjrange , & low , & high ) <= 0"		1204569	0		<=			
ANR	1206027	CallExpression	"backward_search_range ( reg , str , end , sch_start , range , adjrange , & low , & high )"		1204569	0					
ANR	1206028	Callee	backward_search_range		1204569	0					
ANR	1206029	Identifier	backward_search_range		1204569	0					
ANR	1206030	ArgumentList	reg		1204569	1					
ANR	1206031	Argument	reg		1204569	0					
ANR	1206032	Identifier	reg		1204569	0					
ANR	1206033	Argument	str		1204569	1					
ANR	1206034	Identifier	str		1204569	0					
ANR	1206035	Argument	end		1204569	2					
ANR	1206036	Identifier	end		1204569	0					
ANR	1206037	Argument	sch_start		1204569	3					
ANR	1206038	Identifier	sch_start		1204569	0					
ANR	1206039	Argument	range		1204569	4					
ANR	1206040	Identifier	range		1204569	0					
ANR	1206041	Argument	adjrange		1204569	5					
ANR	1206042	Identifier	adjrange		1204569	0					
ANR	1206043	Argument	& low		1204569	6					
ANR	1206044	UnaryOperationExpression	& low		1204569	0					
ANR	1206045	UnaryOperator	&		1204569	0					
ANR	1206046	Identifier	low		1204569	1					
ANR	1206047	Argument	& high		1204569	7					
ANR	1206048	UnaryOperationExpression	& high		1204569	0					
ANR	1206049	UnaryOperator	&		1204569	0					
ANR	1206050	Identifier	high		1204569	1					
ANR	1206051	PrimaryExpression	0		1204569	1					
ANR	1206052	GotoStatement	goto mismatch ;	3693:25:90803:90816	1204569	1	True				
ANR	1206053	Identifier	mismatch		1204569	0					
ANR	1206054	DoStatement	do		1204569	2					
ANR	1206055	CompoundStatement		346:7:9177:9177	1204569	0					
ANR	1206056	ExpressionStatement	"prev = onigenc_get_prev_char_head ( reg -> enc , str , s )"	3698:6:90848:90899	1204569	0	True				
ANR	1206057	AssignmentExpression	"prev = onigenc_get_prev_char_head ( reg -> enc , str , s )"		1204569	0		=			
ANR	1206058	Identifier	prev		1204569	0					
ANR	1206059	CallExpression	"onigenc_get_prev_char_head ( reg -> enc , str , s )"		1204569	1					
ANR	1206060	Callee	onigenc_get_prev_char_head		1204569	0					
ANR	1206061	Identifier	onigenc_get_prev_char_head		1204569	0					
ANR	1206062	ArgumentList	reg -> enc		1204569	1					
ANR	1206063	Argument	reg -> enc		1204569	0					
ANR	1206064	PtrMemberAccess	reg -> enc		1204569	0					
ANR	1206065	Identifier	reg		1204569	0					
ANR	1206066	Identifier	enc		1204569	1					
ANR	1206067	Argument	str		1204569	1					
ANR	1206068	Identifier	str		1204569	0					
ANR	1206069	Argument	s		1204569	2					
ANR	1206070	Identifier	s		1204569	0					
ANR	1206071	ExpressionStatement	MATCH_AND_RETURN_CHECK ( orig_start )	3699:6:90907:90941	1204569	1	True				
ANR	1206072	CallExpression	MATCH_AND_RETURN_CHECK ( orig_start )		1204569	0					
ANR	1206073	Callee	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1206074	Identifier	MATCH_AND_RETURN_CHECK		1204569	0					
ANR	1206075	ArgumentList	orig_start		1204569	1					
ANR	1206076	Argument	orig_start		1204569	0					
ANR	1206077	Identifier	orig_start		1204569	0					
ANR	1206078	ExpressionStatement	s = prev	3700:6:90949:90957	1204569	2	True				
ANR	1206079	AssignmentExpression	s = prev		1204569	0		=			
ANR	1206080	Identifier	s		1204569	0					
ANR	1206081	Identifier	prev		1204569	1					
ANR	1206082	Condition	s >= range	3701:13:90972:90981	1204569	1	True				
ANR	1206083	RelationalExpression	s >= range		1204569	0		>=			
ANR	1206084	Identifier	s		1204569	0					
ANR	1206085	Identifier	range		1204569	1					
ANR	1206086	Label	mismatch :	3704:1:90991:90999	1204569	32	True				
ANR	1206087	Identifier	mismatch		1204569	0					
ANR	1206088	IfStatement	if ( IS_FIND_LONGEST ( reg -> options ) )		1204569	33					
ANR	1206089	Condition	IS_FIND_LONGEST ( reg -> options )	3706:6:91051:91079	1204569	0	True				
ANR	1206090	CallExpression	IS_FIND_LONGEST ( reg -> options )		1204569	0					
ANR	1206091	Callee	IS_FIND_LONGEST		1204569	0					
ANR	1206092	Identifier	IS_FIND_LONGEST		1204569	0					
ANR	1206093	ArgumentList	reg -> options		1204569	1					
ANR	1206094	Argument	reg -> options		1204569	0					
ANR	1206095	PtrMemberAccess	reg -> options		1204569	0					
ANR	1206096	Identifier	reg		1204569	0					
ANR	1206097	Identifier	options		1204569	1					
ANR	1206098	CompoundStatement		355:37:9419:9419	1204569	1					
ANR	1206099	IfStatement	if ( msa . best_len >= 0 )		1204569	0					
ANR	1206100	Condition	msa . best_len >= 0	3707:8:91092:91108	1204569	0	True				
ANR	1206101	RelationalExpression	msa . best_len >= 0		1204569	0		>=			
ANR	1206102	MemberAccess	msa . best_len		1204569	0					
ANR	1206103	Identifier	msa		1204569	0					
ANR	1206104	Identifier	best_len		1204569	1					
ANR	1206105	PrimaryExpression	0		1204569	1					
ANR	1206106	CompoundStatement		356:27:9448:9448	1204569	1					
ANR	1206107	ExpressionStatement	s = msa . best_s	3708:6:91119:91133	1204569	0	True				
ANR	1206108	AssignmentExpression	s = msa . best_s		1204569	0		=			
ANR	1206109	Identifier	s		1204569	0					
ANR	1206110	MemberAccess	msa . best_s		1204569	1					
ANR	1206111	Identifier	msa		1204569	0					
ANR	1206112	Identifier	best_s		1204569	1					
ANR	1206113	GotoStatement	goto match ;	3709:6:91141:91151	1204569	1	True				
ANR	1206114	Identifier	match		1204569	0					
ANR	1206115	ExpressionStatement	r = ONIG_MISMATCH	3713:2:91172:91189	1204569	34	True				
ANR	1206116	AssignmentExpression	r = ONIG_MISMATCH		1204569	0		=			
ANR	1206117	Identifier	r		1204569	0					
ANR	1206118	Identifier	ONIG_MISMATCH		1204569	1					
ANR	1206119	Label	finish :	3715:1:91193:91199	1204569	35	True				
ANR	1206120	Identifier	finish		1204569	0					
ANR	1206121	ExpressionStatement	MATCH_ARG_FREE ( msa )	3716:2:91203:91222	1204569	36	True				
ANR	1206122	CallExpression	MATCH_ARG_FREE ( msa )		1204569	0					
ANR	1206123	Callee	MATCH_ARG_FREE		1204569	0					
ANR	1206124	Identifier	MATCH_ARG_FREE		1204569	0					
ANR	1206125	ArgumentList	msa		1204569	1					
ANR	1206126	Argument	msa		1204569	0					
ANR	1206127	Identifier	msa		1204569	0					
ANR	1206128	ExpressionStatement	ONIG_STATE_DEC_THREAD ( reg )	3717:2:91226:91252	1204569	37	True				
ANR	1206129	CallExpression	ONIG_STATE_DEC_THREAD ( reg )		1204569	0					
ANR	1206130	Callee	ONIG_STATE_DEC_THREAD		1204569	0					
ANR	1206131	Identifier	ONIG_STATE_DEC_THREAD		1204569	0					
ANR	1206132	ArgumentList	reg		1204569	1					
ANR	1206133	Argument	reg		1204569	0					
ANR	1206134	Identifier	reg		1204569	0					
ANR	1206135	Statement	if	3721:2:91367:91368	1204569	38	True				
ANR	1206136	Statement	(	3721:5:91370:91370	1204569	39	True				
ANR	1206137	Statement	IS_FIND_NOT_EMPTY	3721:6:91371:91387	1204569	40	True				
ANR	1206138	Statement	(	3721:23:91388:91388	1204569	41	True				
ANR	1206139	Statement	reg	3721:24:91389:91391	1204569	42	True				
ANR	1206140	Statement	->	3721:27:91392:91393	1204569	43	True				
ANR	1206141	Statement	options	3721:29:91394:91400	1204569	44	True				
ANR	1206142	Statement	)	3721:36:91401:91401	1204569	45	True				
ANR	1206143	Statement	&&	3721:38:91403:91404	1204569	46	True				
ANR	1206144	Statement	region	3721:41:91406:91411	1204569	47	True				
ANR	1206145	Statement	&&	3723:6:91454:91455	1204569	48	True				
ANR	1206146	Statement	!	3723:9:91457:91457	1204569	49	True				
ANR	1206147	Statement	IS_POSIX_REGION	3723:10:91458:91472	1204569	50	True				
ANR	1206148	Statement	(	3723:25:91473:91473	1204569	51	True				
ANR	1206149	Statement	option	3723:26:91474:91479	1204569	52	True				
ANR	1206150	Statement	)	3723:32:91480:91480	1204569	53	True				
ANR	1206151	Statement	)	3725:6:91495:91495	1204569	54	True				
ANR	1206152	CompoundStatement		374:8:9834:9834	1204569	55					
ANR	1206153	ExpressionStatement	onig_region_clear ( region )	3726:4:91503:91528	1204569	0	True				
ANR	1206154	CallExpression	onig_region_clear ( region )		1204569	0					
ANR	1206155	Callee	onig_region_clear		1204569	0					
ANR	1206156	Identifier	onig_region_clear		1204569	0					
ANR	1206157	ArgumentList	region		1204569	1					
ANR	1206158	Argument	region		1204569	0					
ANR	1206159	Identifier	region		1204569	0					
ANR	1206160	IfStatement	if ( r != ONIG_MISMATCH )		1204569	56					
ANR	1206161	Condition	r != ONIG_MISMATCH	3730:6:91559:91576	1204569	0	True				
ANR	1206162	EqualityExpression	r != ONIG_MISMATCH		1204569	0		!=			
ANR	1206163	Identifier	r		1204569	0					
ANR	1206164	Identifier	ONIG_MISMATCH		1204569	1					
ANR	1206165	ExpressionStatement	"fprintf ( stderr , ""onig_search: error %d\\n"" , r )"	3731:4:91583:91628	1204569	1	True				
ANR	1206166	CallExpression	"fprintf ( stderr , ""onig_search: error %d\\n"" , r )"		1204569	0					
ANR	1206167	Callee	fprintf		1204569	0					
ANR	1206168	Identifier	fprintf		1204569	0					
ANR	1206169	ArgumentList	stderr		1204569	1					
ANR	1206170	Argument	stderr		1204569	0					
ANR	1206171	Identifier	stderr		1204569	0					
ANR	1206172	Argument	"""onig_search: error %d\\n"""		1204569	1					
ANR	1206173	PrimaryExpression	"""onig_search: error %d\\n"""		1204569	0					
ANR	1206174	Argument	r		1204569	2					
ANR	1206175	Identifier	r		1204569	0					
ANR	1206176	ReturnStatement	return r ;	3733:2:91639:91647	1204569	57	True				
ANR	1206177	Identifier	r		1204569	0					
ANR	1206178	Label	mismatch_no_msa :	3735:1:91651:91666	1204569	58	True				
ANR	1206179	Identifier	mismatch_no_msa		1204569	0					
ANR	1206180	ExpressionStatement	r = ONIG_MISMATCH	3736:2:91670:91687	1204569	59	True				
ANR	1206181	AssignmentExpression	r = ONIG_MISMATCH		1204569	0		=			
ANR	1206182	Identifier	r		1204569	0					
ANR	1206183	Identifier	ONIG_MISMATCH		1204569	1					
ANR	1206184	Label	finish_no_msa :	3737:1:91690:91703	1204569	60	True				
ANR	1206185	Identifier	finish_no_msa		1204569	0					
ANR	1206186	ExpressionStatement	ONIG_STATE_DEC_THREAD ( reg )	3738:2:91707:91733	1204569	61	True				
ANR	1206187	CallExpression	ONIG_STATE_DEC_THREAD ( reg )		1204569	0					
ANR	1206188	Callee	ONIG_STATE_DEC_THREAD		1204569	0					
ANR	1206189	Identifier	ONIG_STATE_DEC_THREAD		1204569	0					
ANR	1206190	ArgumentList	reg		1204569	1					
ANR	1206191	Argument	reg		1204569	0					
ANR	1206192	Identifier	reg		1204569	0					
ANR	1206193	IfStatement	if ( r != ONIG_MISMATCH )		1204569	62					
ANR	1206194	Condition	r != ONIG_MISMATCH	3740:6:91759:91776	1204569	0	True				
ANR	1206195	EqualityExpression	r != ONIG_MISMATCH		1204569	0		!=			
ANR	1206196	Identifier	r		1204569	0					
ANR	1206197	Identifier	ONIG_MISMATCH		1204569	1					
ANR	1206198	ExpressionStatement	"fprintf ( stderr , ""onig_search: error %d\\n"" , r )"	3741:4:91783:91828	1204569	1	True				
ANR	1206199	CallExpression	"fprintf ( stderr , ""onig_search: error %d\\n"" , r )"		1204569	0					
ANR	1206200	Callee	fprintf		1204569	0					
ANR	1206201	Identifier	fprintf		1204569	0					
ANR	1206202	ArgumentList	stderr		1204569	1					
ANR	1206203	Argument	stderr		1204569	0					
ANR	1206204	Identifier	stderr		1204569	0					
ANR	1206205	Argument	"""onig_search: error %d\\n"""		1204569	1					
ANR	1206206	PrimaryExpression	"""onig_search: error %d\\n"""		1204569	0					
ANR	1206207	Argument	r		1204569	2					
ANR	1206208	Identifier	r		1204569	0					
ANR	1206209	ReturnStatement	return r ;	3743:2:91839:91847	1204569	63	True				
ANR	1206210	Identifier	r		1204569	0					
ANR	1206211	Label	match :	3745:1:91851:91856	1204569	64	True				
ANR	1206212	Identifier	match		1204569	0					
ANR	1206213	ExpressionStatement	ONIG_STATE_DEC_THREAD ( reg )	3746:2:91860:91886	1204569	65	True				
ANR	1206214	CallExpression	ONIG_STATE_DEC_THREAD ( reg )		1204569	0					
ANR	1206215	Callee	ONIG_STATE_DEC_THREAD		1204569	0					
ANR	1206216	Identifier	ONIG_STATE_DEC_THREAD		1204569	0					
ANR	1206217	ArgumentList	reg		1204569	1					
ANR	1206218	Argument	reg		1204569	0					
ANR	1206219	Identifier	reg		1204569	0					
ANR	1206220	ExpressionStatement	MATCH_ARG_FREE ( msa )	3747:2:91890:91909	1204569	66	True				
ANR	1206221	CallExpression	MATCH_ARG_FREE ( msa )		1204569	0					
ANR	1206222	Callee	MATCH_ARG_FREE		1204569	0					
ANR	1206223	Identifier	MATCH_ARG_FREE		1204569	0					
ANR	1206224	ArgumentList	msa		1204569	1					
ANR	1206225	Argument	msa		1204569	0					
ANR	1206226	Identifier	msa		1204569	0					
ANR	1206227	ReturnStatement	return s - str ;	3748:2:91913:91927	1204569	67	True				
ANR	1206228	AdditiveExpression	s - str		1204569	0		-			
ANR	1206229	Identifier	s		1204569	0					
ANR	1206230	Identifier	str		1204569	1					
ANR	1206231	ReturnType	extern int		1204569	1					
ANR	1206232	Identifier	onig_search		1204569	2					
ANR	1206233	ParameterList	"regex_t * reg , const UChar * str , const UChar * end , const UChar * start , const UChar * range , OnigRegion * region , OnigOptionType option"		1204569	3					
ANR	1206234	Parameter	regex_t * reg	3350:12:81524:81535	1204569	0	True				
ANR	1206235	ParameterType	regex_t *		1204569	0					
ANR	1206236	Identifier	reg		1204569	1					
ANR	1206237	Parameter	const UChar * str	3350:26:81538:81553	1204569	1	True				
ANR	1206238	ParameterType	const UChar *		1204569	0					
ANR	1206239	Identifier	str		1204569	1					
ANR	1206240	Parameter	const UChar * end	3350:44:81556:81571	1204569	2	True				
ANR	1206241	ParameterType	const UChar *		1204569	0					
ANR	1206242	Identifier	end		1204569	1					
ANR	1206243	Parameter	const UChar * start	3351:5:81579:81596	1204569	3	True				
ANR	1206244	ParameterType	const UChar *		1204569	0					
ANR	1206245	Identifier	start		1204569	1					
ANR	1206246	Parameter	const UChar * range	3351:25:81599:81616	1204569	4	True				
ANR	1206247	ParameterType	const UChar *		1204569	0					
ANR	1206248	Identifier	range		1204569	1					
ANR	1206249	Parameter	OnigRegion * region	3351:45:81619:81636	1204569	5	True				
ANR	1206250	ParameterType	OnigRegion *		1204569	0					
ANR	1206251	Identifier	region		1204569	1					
ANR	1206252	Parameter	OnigOptionType option	3351:65:81639:81659	1204569	6	True				
ANR	1206253	ParameterType	OnigOptionType		1204569	0					
ANR	1206254	Identifier	option		1204569	1					
ANR	1206255	CFGEntryNode	ENTRY		1204569		True				
ANR	1206256	CFGExitNode	EXIT		1204569		True				
ANR	1206257	Symbol	ANCHOR_END_BUF		1204569						
ANR	1206258	Symbol	min_semi_end		1204569						
ANR	1206259	Symbol	ONIG_STATE		1204569						
ANR	1206260	Symbol	prev		1204569						
ANR	1206261	Symbol	reg -> threshold_len		1204569						
ANR	1206262	Symbol	max_semi_end		1204569						
ANR	1206263	Symbol	ONIGENC_IS_MBC_NEWLINE		1204569						
ANR	1206264	Symbol	onig_region_resize_clear		1204569						
ANR	1206265	Symbol	orig_start		1204569						
ANR	1206266	Symbol	ONIG_INFINITE_DISTANCE		1204569						
ANR	1206267	Symbol	high		1204569						
ANR	1206268	Symbol	msa . state_check_buff_size		1204569						
ANR	1206269	Symbol	reg		1204569						
ANR	1206270	Symbol	reg -> anchor_dmax		1204569						
ANR	1206271	Symbol	msa . state_check_buff		1204569						
ANR	1206272	Symbol	reg -> options		1204569						
ANR	1206273	Symbol	reg -> optimize		1204569						
ANR	1206274	Symbol	ONIG_OPTIMIZE_NONE		1204569						
ANR	1206275	Symbol	& high		1204569						
ANR	1206276	Symbol	reg -> chain		1204569						
ANR	1206277	Symbol	NULL		1204569						
ANR	1206278	Symbol	ONIGERR_OVER_THREAD_PASS_LIMIT_COUNT		1204569						
ANR	1206279	Symbol	offset		1204569						
ANR	1206280	Symbol	& msa		1204569						
ANR	1206281	Symbol	ANCHOR_BEGIN_POSITION		1204569						
ANR	1206282	Symbol	reg -> anchor_dmin		1204569						
ANR	1206283	Symbol	forward_search_range		1204569						
ANR	1206284	Symbol	stderr		1204569						
ANR	1206285	Symbol	reg -> enc		1204569						
ANR	1206286	Symbol	str		1204569						
ANR	1206287	Symbol	backward_search_range		1204569						
ANR	1206288	Symbol	MIN		1204569						
ANR	1206289	Symbol	reg -> dmax		1204569						
ANR	1206290	Symbol	region		1204569						
ANR	1206291	Symbol	sch_range		1204569						
ANR	1206292	Symbol	option		1204569						
ANR	1206293	Symbol	ONIG_STATE_NORMAL		1204569						
ANR	1206294	Symbol	& low_prev		1204569						
ANR	1206295	Symbol	pre_end		1204569						
ANR	1206296	Symbol	IS_NOT_NULL		1204569						
ANR	1206297	Symbol	ANCHOR_SEMI_END_BUF		1204569						
ANR	1206298	Symbol	reg -> anchor		1204569						
ANR	1206299	Symbol	ANCHOR_BEGIN_BUF		1204569						
ANR	1206300	Symbol	onigenc_get_prev_char_head		1204569						
ANR	1206301	Symbol	range		1204569						
ANR	1206302	Symbol	IS_FIND_LONGEST		1204569						
ANR	1206303	Symbol	low		1204569						
ANR	1206304	Symbol	reg -> num_comb_exp_check		1204569						
ANR	1206305	Symbol	end		1204569						
ANR	1206306	Symbol	ONIGENC_IS_MBC_CRNL		1204569						
ANR	1206307	Symbol	address_for_empty_string		1204569						
ANR	1206308	Symbol	reg -> num_mem		1204569						
ANR	1206309	Symbol	match_at		1204569						
ANR	1206310	Symbol	orig_range		1204569						
ANR	1206311	Symbol	ANCHOR_ANYCHAR_STAR_ML		1204569						
ANR	1206312	Symbol	adjrange		1204569						
ANR	1206313	Symbol	ONIGENC_LEFT_ADJUST_CHAR_HEAD		1204569						
ANR	1206314	Symbol	ONIGENC_STEP_BACK		1204569						
ANR	1206315	Symbol	upper_range		1204569						
ANR	1206316	Symbol	start		1204569						
ANR	1206317	Symbol	onigenc_get_right_adjust_char_head		1204569						
ANR	1206318	Symbol	low_prev		1204569						
ANR	1206319	Symbol	enclen		1204569						
ANR	1206320	Symbol	n		1204569						
ANR	1206321	Symbol	msa . best_s		1204569						
ANR	1206322	Symbol	r		1204569						
ANR	1206323	Symbol	s		1204569						
ANR	1206324	Symbol	THREAD_PASS_LIMIT_COUNT		1204569						
ANR	1206325	Symbol	msa . best_len		1204569						
ANR	1206326	Symbol	ONIG_MISMATCH		1204569						
ANR	1206327	Symbol	msa		1204569						
ANR	1206328	Symbol	sch_start		1204569						
ANR	1206329	Symbol	& low		1204569						
ANR	1206330	Symbol	ANCHOR_ANYCHAR_STAR		1204569						
ANR	1206331	Symbol	* reg		1204569						
ANR	1206332	Function	onig_get_encoding	3751:0:91932:92005							
ANR	1206333	FunctionDef	onig_get_encoding (regex_t * reg)		1206332	0					
ANR	1206334	CompoundStatement		3753:0:91984:92005	1206332	0					
ANR	1206335	ReturnStatement	return reg -> enc ;	3754:2:91988:92003	1206332	0	True				
ANR	1206336	PtrMemberAccess	reg -> enc		1206332	0					
ANR	1206337	Identifier	reg		1206332	0					
ANR	1206338	Identifier	enc		1206332	1					
ANR	1206339	ReturnType	extern OnigEncoding		1206332	1					
ANR	1206340	Identifier	onig_get_encoding		1206332	2					
ANR	1206341	ParameterList	regex_t * reg		1206332	3					
ANR	1206342	Parameter	regex_t * reg	3752:18:91970:91981	1206332	0	True				
ANR	1206343	ParameterType	regex_t *		1206332	0					
ANR	1206344	Identifier	reg		1206332	1					
ANR	1206345	CFGEntryNode	ENTRY		1206332		True				
ANR	1206346	CFGExitNode	EXIT		1206332		True				
ANR	1206347	Symbol	reg		1206332						
ANR	1206348	Symbol	* reg		1206332						
ANR	1206349	Symbol	reg -> enc		1206332						
ANR	1206350	Function	onig_get_options	3757:0:92008:92086							
ANR	1206351	FunctionDef	onig_get_options (regex_t * reg)		1206350	0					
ANR	1206352	CompoundStatement		3759:0:92061:92086	1206350	0					
ANR	1206353	ReturnStatement	return reg -> options ;	3760:2:92065:92084	1206350	0	True				
ANR	1206354	PtrMemberAccess	reg -> options		1206350	0					
ANR	1206355	Identifier	reg		1206350	0					
ANR	1206356	Identifier	options		1206350	1					
ANR	1206357	ReturnType	extern OnigOptionType		1206350	1					
ANR	1206358	Identifier	onig_get_options		1206350	2					
ANR	1206359	ParameterList	regex_t * reg		1206350	3					
ANR	1206360	Parameter	regex_t * reg	3758:17:92047:92058	1206350	0	True				
ANR	1206361	ParameterType	regex_t *		1206350	0					
ANR	1206362	Identifier	reg		1206350	1					
ANR	1206363	CFGEntryNode	ENTRY		1206350		True				
ANR	1206364	CFGExitNode	EXIT		1206350		True				
ANR	1206365	Symbol	reg		1206350						
ANR	1206366	Symbol	reg -> options		1206350						
ANR	1206367	Symbol	* reg		1206350						
ANR	1206368	Function	onig_get_case_fold_flag	3763:0:92089:92184							
ANR	1206369	FunctionDef	onig_get_case_fold_flag (regex_t * reg)		1206368	0					
ANR	1206370	CompoundStatement		3765:0:92152:92184	1206368	0					
ANR	1206371	ReturnStatement	return reg -> case_fold_flag ;	3766:2:92156:92182	1206368	0	True				
ANR	1206372	PtrMemberAccess	reg -> case_fold_flag		1206368	0					
ANR	1206373	Identifier	reg		1206368	0					
ANR	1206374	Identifier	case_fold_flag		1206368	1					
ANR	1206375	ReturnType	extern OnigCaseFoldType		1206368	1					
ANR	1206376	Identifier	onig_get_case_fold_flag		1206368	2					
ANR	1206377	ParameterList	regex_t * reg		1206368	3					
ANR	1206378	Parameter	regex_t * reg	3764:24:92138:92149	1206368	0	True				
ANR	1206379	ParameterType	regex_t *		1206368	0					
ANR	1206380	Identifier	reg		1206368	1					
ANR	1206381	CFGEntryNode	ENTRY		1206368		True				
ANR	1206382	CFGExitNode	EXIT		1206368		True				
ANR	1206383	Symbol	reg		1206368						
ANR	1206384	Symbol	reg -> case_fold_flag		1206368						
ANR	1206385	Symbol	* reg		1206368						
ANR	1206386	Function	onig_get_syntax	3769:0:92187:92264							
ANR	1206387	FunctionDef	onig_get_syntax (regex_t * reg)		1206386	0					
ANR	1206388	CompoundStatement		3771:0:92240:92264	1206386	0					
ANR	1206389	ReturnStatement	return reg -> syntax ;	3772:2:92244:92262	1206386	0	True				
ANR	1206390	PtrMemberAccess	reg -> syntax		1206386	0					
ANR	1206391	Identifier	reg		1206386	0					
ANR	1206392	Identifier	syntax		1206386	1					
ANR	1206393	ReturnType	extern OnigSyntaxType *		1206386	1					
ANR	1206394	Identifier	onig_get_syntax		1206386	2					
ANR	1206395	ParameterList	regex_t * reg		1206386	3					
ANR	1206396	Parameter	regex_t * reg	3770:16:92226:92237	1206386	0	True				
ANR	1206397	ParameterType	regex_t *		1206386	0					
ANR	1206398	Identifier	reg		1206386	1					
ANR	1206399	CFGEntryNode	ENTRY		1206386		True				
ANR	1206400	CFGExitNode	EXIT		1206386		True				
ANR	1206401	Symbol	reg		1206386						
ANR	1206402	Symbol	reg -> syntax		1206386						
ANR	1206403	Symbol	* reg		1206386						
ANR	1206404	Function	onig_number_of_captures	3775:0:92267:92341							
ANR	1206405	FunctionDef	onig_number_of_captures (regex_t * reg)		1206404	0					
ANR	1206406	CompoundStatement		3777:0:92316:92341	1206404	0					
ANR	1206407	ReturnStatement	return reg -> num_mem ;	3778:2:92320:92339	1206404	0	True				
ANR	1206408	PtrMemberAccess	reg -> num_mem		1206404	0					
ANR	1206409	Identifier	reg		1206404	0					
ANR	1206410	Identifier	num_mem		1206404	1					
ANR	1206411	ReturnType	extern int		1206404	1					
ANR	1206412	Identifier	onig_number_of_captures		1206404	2					
ANR	1206413	ParameterList	regex_t * reg		1206404	3					
ANR	1206414	Parameter	regex_t * reg	3776:24:92302:92313	1206404	0	True				
ANR	1206415	ParameterType	regex_t *		1206404	0					
ANR	1206416	Identifier	reg		1206404	1					
ANR	1206417	CFGEntryNode	ENTRY		1206404		True				
ANR	1206418	CFGExitNode	EXIT		1206404		True				
ANR	1206419	Symbol	reg		1206404						
ANR	1206420	Symbol	reg -> num_mem		1206404						
ANR	1206421	Symbol	* reg		1206404						
ANR	1206422	Function	onig_number_of_capture_histories	3781:0:92344:92616							
ANR	1206423	FunctionDef	onig_number_of_capture_histories (regex_t * reg)		1206422	0					
ANR	1206424	CompoundStatement		3783:0:92402:92616	1206422	0					
ANR	1206425	IdentifierDeclStatement	"int i , n ;"	3785:2:92433:92441	1206422	0	True				
ANR	1206426	IdentifierDecl	i		1206422	0					
ANR	1206427	IdentifierDeclType	int		1206422	0					
ANR	1206428	Identifier	i		1206422	1					
ANR	1206429	IdentifierDecl	n		1206422	1					
ANR	1206430	IdentifierDeclType	int		1206422	0					
ANR	1206431	Identifier	n		1206422	1					
ANR	1206432	ExpressionStatement	n = 0	3787:2:92446:92451	1206422	1	True				
ANR	1206433	AssignmentExpression	n = 0		1206422	0		=			
ANR	1206434	Identifier	n		1206422	0					
ANR	1206435	PrimaryExpression	0		1206422	1					
ANR	1206436	ForStatement	for ( i = 0 ; i <= ONIG_MAX_CAPTURE_HISTORY_GROUP ; i ++ )		1206422	2					
ANR	1206437	ForInit	i = 0 ;	3788:7:92460:92465	1206422	0	True				
ANR	1206438	AssignmentExpression	i = 0		1206422	0		=			
ANR	1206439	Identifier	i		1206422	0					
ANR	1206440	PrimaryExpression	0		1206422	1					
ANR	1206441	Condition	i <= ONIG_MAX_CAPTURE_HISTORY_GROUP	3788:14:92467:92501	1206422	1	True				
ANR	1206442	RelationalExpression	i <= ONIG_MAX_CAPTURE_HISTORY_GROUP		1206422	0		<=			
ANR	1206443	Identifier	i		1206422	0					
ANR	1206444	Identifier	ONIG_MAX_CAPTURE_HISTORY_GROUP		1206422	1					
ANR	1206445	PostIncDecOperationExpression	i ++	3788:51:92504:92506	1206422	2	True				
ANR	1206446	Identifier	i		1206422	0					
ANR	1206447	IncDec	++		1206422	1					
ANR	1206448	CompoundStatement		6:56:106:106	1206422	3					
ANR	1206449	IfStatement	"if ( BIT_STATUS_AT ( reg -> capture_history , i ) != 0 )"		1206422	0					
ANR	1206450	Condition	"BIT_STATUS_AT ( reg -> capture_history , i ) != 0"	3789:8:92519:92561	1206422	0	True				
ANR	1206451	EqualityExpression	"BIT_STATUS_AT ( reg -> capture_history , i ) != 0"		1206422	0		!=			
ANR	1206452	CallExpression	"BIT_STATUS_AT ( reg -> capture_history , i )"		1206422	0					
ANR	1206453	Callee	BIT_STATUS_AT		1206422	0					
ANR	1206454	Identifier	BIT_STATUS_AT		1206422	0					
ANR	1206455	ArgumentList	reg -> capture_history		1206422	1					
ANR	1206456	Argument	reg -> capture_history		1206422	0					
ANR	1206457	PtrMemberAccess	reg -> capture_history		1206422	0					
ANR	1206458	Identifier	reg		1206422	0					
ANR	1206459	Identifier	capture_history		1206422	1					
ANR	1206460	Argument	i		1206422	1					
ANR	1206461	Identifier	i		1206422	0					
ANR	1206462	PrimaryExpression	0		1206422	1					
ANR	1206463	ExpressionStatement	n ++	3790:6:92570:92573	1206422	1	True				
ANR	1206464	PostIncDecOperationExpression	n ++		1206422	0					
ANR	1206465	Identifier	n		1206422	0					
ANR	1206466	IncDec	++		1206422	1					
ANR	1206467	ReturnStatement	return n ;	3792:2:92581:92589	1206422	3	True				
ANR	1206468	Identifier	n		1206422	0					
ANR	1206469	ReturnType	extern int		1206422	1					
ANR	1206470	Identifier	onig_number_of_capture_histories		1206422	2					
ANR	1206471	ParameterList	regex_t * reg		1206422	3					
ANR	1206472	Parameter	regex_t * reg	3782:33:92388:92399	1206422	0	True				
ANR	1206473	ParameterType	regex_t *		1206422	0					
ANR	1206474	Identifier	reg		1206422	1					
ANR	1206475	CFGEntryNode	ENTRY		1206422		True				
ANR	1206476	CFGExitNode	EXIT		1206422		True				
ANR	1206477	Symbol	BIT_STATUS_AT		1206422						
ANR	1206478	Symbol	reg		1206422						
ANR	1206479	Symbol	ONIG_MAX_CAPTURE_HISTORY_GROUP		1206422						
ANR	1206480	Symbol	i		1206422						
ANR	1206481	Symbol	reg -> capture_history		1206422						
ANR	1206482	Symbol	n		1206422						
ANR	1206483	Symbol	* reg		1206422						
ANR	1206484	Function	onig_copy_encoding	3798:0:92619:92703							
ANR	1206485	FunctionDef	"onig_copy_encoding (OnigEncoding to , OnigEncoding from)"		1206484	0					
ANR	1206486	CompoundStatement		3800:0:92686:92703	1206484	0					
ANR	1206487	ExpressionStatement	* to = * from	3801:2:92690:92701	1206484	0	True				
ANR	1206488	AssignmentExpression	* to = * from		1206484	0		=			
ANR	1206489	UnaryOperationExpression	* to		1206484	0					
ANR	1206490	UnaryOperator	*		1206484	0					
ANR	1206491	Identifier	to		1206484	1					
ANR	1206492	UnaryOperationExpression	* from		1206484	1					
ANR	1206493	UnaryOperator	*		1206484	0					
ANR	1206494	Identifier	from		1206484	1					
ANR	1206495	ReturnType	extern void		1206484	1					
ANR	1206496	Identifier	onig_copy_encoding		1206484	2					
ANR	1206497	ParameterList	"OnigEncoding to , OnigEncoding from"		1206484	3					
ANR	1206498	Parameter	OnigEncoding to	3799:19:92650:92664	1206484	0	True				
ANR	1206499	ParameterType	OnigEncoding		1206484	0					
ANR	1206500	Identifier	to		1206484	1					
ANR	1206501	Parameter	OnigEncoding from	3799:36:92667:92683	1206484	1	True				
ANR	1206502	ParameterType	OnigEncoding		1206484	0					
ANR	1206503	Identifier	from		1206484	1					
ANR	1206504	CFGEntryNode	ENTRY		1206484		True				
ANR	1206505	CFGExitNode	EXIT		1206484		True				
ANR	1206506	Symbol	* to		1206484						
ANR	1206507	Symbol	from		1206484						
ANR	1206508	Symbol	to		1206484						
ANR	1206509	Symbol	* from		1206484						
