command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3986192	File	data/converged/CVE-2015-8617_php-src/zend_execute.h								
ANR	3986193	DeclStmt									
ANR	3986194	Decl							ZEND_API extern void ( * ) ( zend_execute_data * execute_data )	ZEND_API extern void ( * ) ( zend_execute_data * execute_data )	zend_execute_ex
ANR	3986195	DeclStmt									
ANR	3986196	Decl							"ZEND_API extern void ( * ) ( zend_execute_data * execute_data , zval * return_value )"	"ZEND_API extern void ( * ) ( zend_execute_data * execute_data , zval * return_value )"	zend_execute_internal
ANR	3986197	DeclStmt									
ANR	3986198	Decl							void	void ( void )	init_executor
ANR	3986199	DeclStmt									
ANR	3986200	Decl							void	void ( void )	shutdown_executor
ANR	3986201	DeclStmt									
ANR	3986202	Decl							void	void ( void )	shutdown_destructors
ANR	3986203	DeclStmt									
ANR	3986204	Decl							ZEND_API void	"ZEND_API void ( zend_execute_data * execute_data , zend_op_array * op_array , zval * return_value )"	zend_init_execute_data
ANR	3986205	DeclStmt									
ANR	3986206	Decl							ZEND_API zend_execute_data	"ZEND_API zend_execute_data * ( zend_execute_data * call , zend_op_array * op_array , zval * return_value )"	zend_create_generator_execute_data
ANR	3986207	DeclStmt									
ANR	3986208	Decl							ZEND_API void	"ZEND_API void ( zend_op_array * op_array , zval * return_value )"	zend_execute
ANR	3986209	DeclStmt									
ANR	3986210	Decl							ZEND_API void	ZEND_API void ( zend_execute_data * execute_data )	execute_ex
ANR	3986211	DeclStmt									
ANR	3986212	Decl							ZEND_API void	"ZEND_API void ( zend_execute_data * execute_data , zval * return_value )"	execute_internal
ANR	3986213	DeclStmt									
ANR	3986214	Decl							ZEND_API zend_class_entry	ZEND_API zend_class_entry * ( zend_string * name )	zend_lookup_class
ANR	3986215	DeclStmt									
ANR	3986216	Decl							ZEND_API zend_class_entry	"ZEND_API zend_class_entry * ( zend_string * name , const zval * key , int use_autoload )"	zend_lookup_class_ex
ANR	3986217	DeclStmt									
ANR	3986218	Decl							ZEND_API zend_class_entry	ZEND_API zend_class_entry * ( zend_execute_data * ex )	zend_get_called_scope
ANR	3986219	DeclStmt									
ANR	3986220	Decl							ZEND_API zend_object	ZEND_API zend_object * ( zend_execute_data * ex )	zend_get_this_object
ANR	3986221	DeclStmt									
ANR	3986222	Decl							ZEND_API int	"ZEND_API int ( char * str , zval * retval_ptr , char * string_name )"	zend_eval_string
ANR	3986223	DeclStmt									
ANR	3986224	Decl							ZEND_API int	"ZEND_API int ( char * str , size_t str_len , zval * retval_ptr , char * string_name )"	zend_eval_stringl
ANR	3986225	DeclStmt									
ANR	3986226	Decl							ZEND_API int	"ZEND_API int ( char * str , zval * retval_ptr , char * string_name , int handle_exceptions )"	zend_eval_string_ex
ANR	3986227	DeclStmt									
ANR	3986228	Decl							ZEND_API int	"ZEND_API int ( char * str , size_t str_len , zval * retval_ptr , char * string_name , int handle_exceptions )"	zend_eval_stringl_ex
ANR	3986229	DeclStmt									
ANR	3986230	Decl							ZEND_API void ZEND_FASTCALL	"ZEND_API void ZEND_FASTCALL ( zend_function * zf , uint32_t arg_num , zval * arg )"	zend_check_internal_arg_type
ANR	3986231	DeclStmt									
ANR	3986232	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zend_function * zf , uint32_t arg_num , zval * arg , zval * default_value , void * * cache_slot )"	zend_check_arg_type
ANR	3986233	DeclStmt									
ANR	3986234	Decl							ZEND_API void ZEND_FASTCALL	"ZEND_API void ZEND_FASTCALL ( zend_execute_data * execute_data , uint32_t arg_num , void * * cache_slot )"	zend_check_missing_arg
ANR	3986235	Function	zend_assign_to_variable	57:0:3314:5817							
ANR	3986236	FunctionDef	"zend_assign_to_variable (zval * variable_ptr , zval * value , zend_uchar value_type)"		3986235	0					
ANR	3986237	CompoundStatement		58:0:3426:5817	3986235	0					
ANR	3986238	IdentifierDeclStatement	zend_refcounted * ref = NULL ;	59:1:3429:3456	3986235	0	True				
ANR	3986239	IdentifierDecl	* ref = NULL		3986235	0					
ANR	3986240	IdentifierDeclType	zend_refcounted *		3986235	0					
ANR	3986241	Identifier	ref		3986235	1					
ANR	3986242	AssignmentExpression	* ref = NULL		3986235	2		=			
ANR	3986243	Identifier	NULL		3986235	0					
ANR	3986244	Identifier	NULL		3986235	1					
ANR	3986245	IfStatement	"if ( ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && Z_ISREF_P ( value ) )"		3986235	1					
ANR	3986246	Condition	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && Z_ISREF_P ( value )"	61:5:3464:3530	3986235	0	True				
ANR	3986247	AndExpression	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && Z_ISREF_P ( value )"		3986235	0		&&			
ANR	3986248	CallExpression	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 )"		3986235	0					
ANR	3986249	Callee	ZEND_CONST_COND		3986235	0					
ANR	3986250	Identifier	ZEND_CONST_COND		3986235	0					
ANR	3986251	ArgumentList	value_type & ( IS_VAR | IS_CV )		3986235	1					
ANR	3986252	Argument	value_type & ( IS_VAR | IS_CV )		3986235	0					
ANR	3986253	BitAndExpression	value_type & ( IS_VAR | IS_CV )		3986235	0		&			
ANR	3986254	Identifier	value_type		3986235	0					
ANR	3986255	InclusiveOrExpression	IS_VAR | IS_CV		3986235	1		|			
ANR	3986256	Identifier	IS_VAR		3986235	0					
ANR	3986257	Identifier	IS_CV		3986235	1					
ANR	3986258	Argument	1		3986235	1					
ANR	3986259	PrimaryExpression	1		3986235	0					
ANR	3986260	CallExpression	Z_ISREF_P ( value )		3986235	1					
ANR	3986261	Callee	Z_ISREF_P		3986235	0					
ANR	3986262	Identifier	Z_ISREF_P		3986235	0					
ANR	3986263	ArgumentList	value		3986235	1					
ANR	3986264	Argument	value		3986235	0					
ANR	3986265	Identifier	value		3986235	0					
ANR	3986266	CompoundStatement		4:74:106:106	3986235	1					
ANR	3986267	ExpressionStatement	ref = Z_COUNTED_P ( value )	62:2:3537:3561	3986235	0	True				
ANR	3986268	AssignmentExpression	ref = Z_COUNTED_P ( value )		3986235	0		=			
ANR	3986269	Identifier	ref		3986235	0					
ANR	3986270	CallExpression	Z_COUNTED_P ( value )		3986235	1					
ANR	3986271	Callee	Z_COUNTED_P		3986235	0					
ANR	3986272	Identifier	Z_COUNTED_P		3986235	0					
ANR	3986273	ArgumentList	value		3986235	1					
ANR	3986274	Argument	value		3986235	0					
ANR	3986275	Identifier	value		3986235	0					
ANR	3986276	ExpressionStatement	value = Z_REFVAL_P ( value )	63:2:3565:3590	3986235	1	True				
ANR	3986277	AssignmentExpression	value = Z_REFVAL_P ( value )		3986235	0		=			
ANR	3986278	Identifier	value		3986235	0					
ANR	3986279	CallExpression	Z_REFVAL_P ( value )		3986235	1					
ANR	3986280	Callee	Z_REFVAL_P		3986235	0					
ANR	3986281	Identifier	Z_REFVAL_P		3986235	0					
ANR	3986282	ArgumentList	value		3986235	1					
ANR	3986283	Argument	value		3986235	0					
ANR	3986284	Identifier	value		3986235	0					
ANR	3986285	DoStatement	do		3986235	2					
ANR	3986286	CompoundStatement		9:4:173:173	3986235	0					
ANR	3986287	IfStatement	if ( UNEXPECTED ( Z_REFCOUNTED_P ( variable_ptr ) ) )		3986235	0					
ANR	3986288	Condition	UNEXPECTED ( Z_REFCOUNTED_P ( variable_ptr ) )	67:6:3608:3647	3986235	0	True				
ANR	3986289	CallExpression	UNEXPECTED ( Z_REFCOUNTED_P ( variable_ptr ) )		3986235	0					
ANR	3986290	Callee	UNEXPECTED		3986235	0					
ANR	3986291	Identifier	UNEXPECTED		3986235	0					
ANR	3986292	ArgumentList	Z_REFCOUNTED_P ( variable_ptr )		3986235	1					
ANR	3986293	Argument	Z_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986294	CallExpression	Z_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986295	Callee	Z_REFCOUNTED_P		3986235	0					
ANR	3986296	Identifier	Z_REFCOUNTED_P		3986235	0					
ANR	3986297	ArgumentList	variable_ptr		3986235	1					
ANR	3986298	Argument	variable_ptr		3986235	0					
ANR	3986299	Identifier	variable_ptr		3986235	0					
ANR	3986300	CompoundStatement		11:3:228:252	3986235	1					
ANR	3986301	IdentifierDeclStatement	zend_refcounted * garbage ;	68:3:3655:3679	3986235	0	True				
ANR	3986302	IdentifierDecl	* garbage		3986235	0					
ANR	3986303	IdentifierDeclType	zend_refcounted *		3986235	0					
ANR	3986304	Identifier	garbage		3986235	1					
ANR	3986305	IfStatement	if ( Z_ISREF_P ( variable_ptr ) )		3986235	1					
ANR	3986306	Condition	Z_ISREF_P ( variable_ptr )	70:7:3689:3711	3986235	0	True				
ANR	3986307	CallExpression	Z_ISREF_P ( variable_ptr )		3986235	0					
ANR	3986308	Callee	Z_ISREF_P		3986235	0					
ANR	3986309	Identifier	Z_ISREF_P		3986235	0					
ANR	3986310	ArgumentList	variable_ptr		3986235	1					
ANR	3986311	Argument	variable_ptr		3986235	0					
ANR	3986312	Identifier	variable_ptr		3986235	0					
ANR	3986313	CompoundStatement		13:32:287:287	3986235	1					
ANR	3986314	ExpressionStatement	variable_ptr = Z_REFVAL_P ( variable_ptr )	71:4:3720:3759	3986235	0	True				
ANR	3986315	AssignmentExpression	variable_ptr = Z_REFVAL_P ( variable_ptr )		3986235	0		=			
ANR	3986316	Identifier	variable_ptr		3986235	0					
ANR	3986317	CallExpression	Z_REFVAL_P ( variable_ptr )		3986235	1					
ANR	3986318	Callee	Z_REFVAL_P		3986235	0					
ANR	3986319	Identifier	Z_REFVAL_P		3986235	0					
ANR	3986320	ArgumentList	variable_ptr		3986235	1					
ANR	3986321	Argument	variable_ptr		3986235	0					
ANR	3986322	Identifier	variable_ptr		3986235	0					
ANR	3986323	IfStatement	if ( EXPECTED ( ! Z_REFCOUNTED_P ( variable_ptr ) ) )		3986235	1					
ANR	3986324	Condition	EXPECTED ( ! Z_REFCOUNTED_P ( variable_ptr ) )	72:8:3769:3807	3986235	0	True				
ANR	3986325	CallExpression	EXPECTED ( ! Z_REFCOUNTED_P ( variable_ptr ) )		3986235	0					
ANR	3986326	Callee	EXPECTED		3986235	0					
ANR	3986327	Identifier	EXPECTED		3986235	0					
ANR	3986328	ArgumentList	! Z_REFCOUNTED_P ( variable_ptr )		3986235	1					
ANR	3986329	Argument	! Z_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986330	UnaryOperationExpression	! Z_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986331	UnaryOperator	!		3986235	0					
ANR	3986332	CallExpression	Z_REFCOUNTED_P ( variable_ptr )		3986235	1					
ANR	3986333	Callee	Z_REFCOUNTED_P		3986235	0					
ANR	3986334	Identifier	Z_REFCOUNTED_P		3986235	0					
ANR	3986335	ArgumentList	variable_ptr		3986235	1					
ANR	3986336	Argument	variable_ptr		3986235	0					
ANR	3986337	Identifier	variable_ptr		3986235	0					
ANR	3986338	CompoundStatement		15:49:383:383	3986235	1					
ANR	3986339	BreakStatement	break ;	73:5:3817:3822	3986235	0	True				
ANR	3986340	IfStatement	"if ( Z_TYPE_P ( variable_ptr ) == IS_OBJECT && UNEXPECTED ( Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL ) )"		3986235	2					
ANR	3986341	Condition	"Z_TYPE_P ( variable_ptr ) == IS_OBJECT && UNEXPECTED ( Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL )"	76:7:3842:3941	3986235	0	True				
ANR	3986342	AndExpression	"Z_TYPE_P ( variable_ptr ) == IS_OBJECT && UNEXPECTED ( Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL )"		3986235	0		&&			
ANR	3986343	EqualityExpression	Z_TYPE_P ( variable_ptr ) == IS_OBJECT		3986235	0		==			
ANR	3986344	CallExpression	Z_TYPE_P ( variable_ptr )		3986235	0					
ANR	3986345	Callee	Z_TYPE_P		3986235	0					
ANR	3986346	Identifier	Z_TYPE_P		3986235	0					
ANR	3986347	ArgumentList	variable_ptr		3986235	1					
ANR	3986348	Argument	variable_ptr		3986235	0					
ANR	3986349	Identifier	variable_ptr		3986235	0					
ANR	3986350	Identifier	IS_OBJECT		3986235	1					
ANR	3986351	CallExpression	"UNEXPECTED ( Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL )"		3986235	1					
ANR	3986352	Callee	UNEXPECTED		3986235	0					
ANR	3986353	Identifier	UNEXPECTED		3986235	0					
ANR	3986354	ArgumentList	"Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL"		3986235	1					
ANR	3986355	Argument	"Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL"		3986235	0					
ANR	3986356	EqualityExpression	"Z_OBJ_HANDLER_P ( variable_ptr , set ) != NULL"		3986235	0		!=			
ANR	3986357	CallExpression	"Z_OBJ_HANDLER_P ( variable_ptr , set )"		3986235	0					
ANR	3986358	Callee	Z_OBJ_HANDLER_P		3986235	0					
ANR	3986359	Identifier	Z_OBJ_HANDLER_P		3986235	0					
ANR	3986360	ArgumentList	variable_ptr		3986235	1					
ANR	3986361	Argument	variable_ptr		3986235	0					
ANR	3986362	Identifier	variable_ptr		3986235	0					
ANR	3986363	Argument	set		3986235	1					
ANR	3986364	Identifier	set		3986235	0					
ANR	3986365	Identifier	NULL		3986235	1					
ANR	3986366	CompoundStatement		20:63:517:517	3986235	1					
ANR	3986367	ExpressionStatement	"Z_OBJ_HANDLER_P ( variable_ptr , set ) ( variable_ptr , value )"	78:4:3950:4005	3986235	0	True				
ANR	3986368	CallExpression	"Z_OBJ_HANDLER_P ( variable_ptr , set ) ( variable_ptr , value )"		3986235	0					
ANR	3986369	Callee	"Z_OBJ_HANDLER_P ( variable_ptr , set )"		3986235	0					
ANR	3986370	CallExpression	"Z_OBJ_HANDLER_P ( variable_ptr , set )"		3986235	0					
ANR	3986371	Callee	Z_OBJ_HANDLER_P		3986235	0					
ANR	3986372	Identifier	Z_OBJ_HANDLER_P		3986235	0					
ANR	3986373	ArgumentList	variable_ptr		3986235	1					
ANR	3986374	Argument	variable_ptr		3986235	0					
ANR	3986375	Identifier	variable_ptr		3986235	0					
ANR	3986376	Argument	set		3986235	1					
ANR	3986377	Identifier	set		3986235	0					
ANR	3986378	ArgumentList	variable_ptr		3986235	1					
ANR	3986379	Argument	variable_ptr		3986235	0					
ANR	3986380	Identifier	variable_ptr		3986235	0					
ANR	3986381	Argument	value		3986235	1					
ANR	3986382	Identifier	value		3986235	0					
ANR	3986383	ReturnStatement	return variable_ptr ;	79:4:4011:4030	3986235	1	True				
ANR	3986384	Identifier	variable_ptr		3986235	0					
ANR	3986385	IfStatement	"if ( ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && variable_ptr == value )"		3986235	3					
ANR	3986386	Condition	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && variable_ptr == value"	81:7:4044:4115	3986235	0	True				
ANR	3986387	AndExpression	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 ) && variable_ptr == value"		3986235	0		&&			
ANR	3986388	CallExpression	"ZEND_CONST_COND ( value_type & ( IS_VAR | IS_CV ) , 1 )"		3986235	0					
ANR	3986389	Callee	ZEND_CONST_COND		3986235	0					
ANR	3986390	Identifier	ZEND_CONST_COND		3986235	0					
ANR	3986391	ArgumentList	value_type & ( IS_VAR | IS_CV )		3986235	1					
ANR	3986392	Argument	value_type & ( IS_VAR | IS_CV )		3986235	0					
ANR	3986393	BitAndExpression	value_type & ( IS_VAR | IS_CV )		3986235	0		&			
ANR	3986394	Identifier	value_type		3986235	0					
ANR	3986395	InclusiveOrExpression	IS_VAR | IS_CV		3986235	1		|			
ANR	3986396	Identifier	IS_VAR		3986235	0					
ANR	3986397	Identifier	IS_CV		3986235	1					
ANR	3986398	Argument	1		3986235	1					
ANR	3986399	PrimaryExpression	1		3986235	0					
ANR	3986400	EqualityExpression	variable_ptr == value		3986235	1		==			
ANR	3986401	Identifier	variable_ptr		3986235	0					
ANR	3986402	Identifier	value		3986235	1					
ANR	3986403	CompoundStatement		24:81:691:691	3986235	1					
ANR	3986404	ReturnStatement	return variable_ptr ;	82:4:4124:4143	3986235	0	True				
ANR	3986405	Identifier	variable_ptr		3986235	0					
ANR	3986406	ExpressionStatement	garbage = Z_COUNTED_P ( variable_ptr )	84:3:4153:4188	3986235	4	True				
ANR	3986407	AssignmentExpression	garbage = Z_COUNTED_P ( variable_ptr )		3986235	0		=			
ANR	3986408	Identifier	garbage		3986235	0					
ANR	3986409	CallExpression	Z_COUNTED_P ( variable_ptr )		3986235	1					
ANR	3986410	Callee	Z_COUNTED_P		3986235	0					
ANR	3986411	Identifier	Z_COUNTED_P		3986235	0					
ANR	3986412	ArgumentList	variable_ptr		3986235	1					
ANR	3986413	Argument	variable_ptr		3986235	0					
ANR	3986414	Identifier	variable_ptr		3986235	0					
ANR	3986415	IfStatement	if ( -- GC_REFCOUNT ( garbage ) == 0 )		3986235	5					
ANR	3986416	Condition	-- GC_REFCOUNT ( garbage ) == 0	85:7:4197:4223	3986235	0	True				
ANR	3986417	EqualityExpression	-- GC_REFCOUNT ( garbage ) == 0		3986235	0		==			
ANR	3986418	UnaryExpression	-- GC_REFCOUNT ( garbage )		3986235	0					
ANR	3986419	IncDec	--		3986235	0					
ANR	3986420	CallExpression	GC_REFCOUNT ( garbage )		3986235	1					
ANR	3986421	Callee	GC_REFCOUNT		3986235	0					
ANR	3986422	Identifier	GC_REFCOUNT		3986235	0					
ANR	3986423	ArgumentList	garbage		3986235	1					
ANR	3986424	Argument	garbage		3986235	0					
ANR	3986425	Identifier	garbage		3986235	0					
ANR	3986426	PrimaryExpression	0		3986235	1					
ANR	3986427	CompoundStatement		28:36:799:799	3986235	1					
ANR	3986428	ExpressionStatement	"ZVAL_COPY_VALUE ( variable_ptr , value )"	86:4:4232:4268	3986235	0	True				
ANR	3986429	CallExpression	"ZVAL_COPY_VALUE ( variable_ptr , value )"		3986235	0					
ANR	3986430	Callee	ZVAL_COPY_VALUE		3986235	0					
ANR	3986431	Identifier	ZVAL_COPY_VALUE		3986235	0					
ANR	3986432	ArgumentList	variable_ptr		3986235	1					
ANR	3986433	Argument	variable_ptr		3986235	0					
ANR	3986434	Identifier	variable_ptr		3986235	0					
ANR	3986435	Argument	value		3986235	1					
ANR	3986436	Identifier	value		3986235	0					
ANR	3986437	IfStatement	if ( value_type == IS_CONST )		3986235	1					
ANR	3986438	Condition	value_type == IS_CONST	87:8:4278:4299	3986235	0	True				
ANR	3986439	EqualityExpression	value_type == IS_CONST		3986235	0		==			
ANR	3986440	Identifier	value_type		3986235	0					
ANR	3986441	Identifier	IS_CONST		3986235	1					
ANR	3986442	CompoundStatement		30:32:875:875	3986235	1					
ANR	3986443	IfStatement	if ( UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) ) )		3986235	0					
ANR	3986444	Condition	UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) )	89:9:4381:4422	3986235	0	True				
ANR	3986445	CallExpression	UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) )		3986235	0					
ANR	3986446	Callee	UNEXPECTED		3986235	0					
ANR	3986447	Identifier	UNEXPECTED		3986235	0					
ANR	3986448	ArgumentList	Z_OPT_COPYABLE_P ( variable_ptr )		3986235	1					
ANR	3986449	Argument	Z_OPT_COPYABLE_P ( variable_ptr )		3986235	0					
ANR	3986450	CallExpression	Z_OPT_COPYABLE_P ( variable_ptr )		3986235	0					
ANR	3986451	Callee	Z_OPT_COPYABLE_P		3986235	0					
ANR	3986452	Identifier	Z_OPT_COPYABLE_P		3986235	0					
ANR	3986453	ArgumentList	variable_ptr		3986235	1					
ANR	3986454	Argument	variable_ptr		3986235	0					
ANR	3986455	Identifier	variable_ptr		3986235	0					
ANR	3986456	CompoundStatement		32:53:998:998	3986235	1					
ANR	3986457	ExpressionStatement	zval_copy_ctor_func ( variable_ptr )	90:6:4433:4466	3986235	0	True				
ANR	3986458	CallExpression	zval_copy_ctor_func ( variable_ptr )		3986235	0					
ANR	3986459	Callee	zval_copy_ctor_func		3986235	0					
ANR	3986460	Identifier	zval_copy_ctor_func		3986235	0					
ANR	3986461	ArgumentList	variable_ptr		3986235	1					
ANR	3986462	Argument	variable_ptr		3986235	0					
ANR	3986463	Identifier	variable_ptr		3986235	0					
ANR	3986464	ElseStatement	else		3986235	0					
ANR	3986465	IfStatement	if ( value_type == IS_CV )		3986235	0					
ANR	3986466	Condition	value_type == IS_CV	92:15:4490:4508	3986235	0	True				
ANR	3986467	EqualityExpression	value_type == IS_CV		3986235	0		==			
ANR	3986468	Identifier	value_type		3986235	0					
ANR	3986469	Identifier	IS_CV		3986235	1					
ANR	3986470	CompoundStatement		35:36:1084:1084	3986235	1					
ANR	3986471	IfStatement	if ( UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) ) )		3986235	0					
ANR	3986472	Condition	UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )	93:9:4522:4565	3986235	0	True				
ANR	3986473	CallExpression	UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )		3986235	0					
ANR	3986474	Callee	UNEXPECTED		3986235	0					
ANR	3986475	Identifier	UNEXPECTED		3986235	0					
ANR	3986476	ArgumentList	Z_OPT_REFCOUNTED_P ( variable_ptr )		3986235	1					
ANR	3986477	Argument	Z_OPT_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986478	CallExpression	Z_OPT_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986479	Callee	Z_OPT_REFCOUNTED_P		3986235	0					
ANR	3986480	Identifier	Z_OPT_REFCOUNTED_P		3986235	0					
ANR	3986481	ArgumentList	variable_ptr		3986235	1					
ANR	3986482	Argument	variable_ptr		3986235	0					
ANR	3986483	Identifier	variable_ptr		3986235	0					
ANR	3986484	CompoundStatement		36:55:1141:1141	3986235	1					
ANR	3986485	ExpressionStatement	Z_ADDREF_P ( variable_ptr )	94:6:4576:4600	3986235	0	True				
ANR	3986486	CallExpression	Z_ADDREF_P ( variable_ptr )		3986235	0					
ANR	3986487	Callee	Z_ADDREF_P		3986235	0					
ANR	3986488	Identifier	Z_ADDREF_P		3986235	0					
ANR	3986489	ArgumentList	variable_ptr		3986235	1					
ANR	3986490	Argument	variable_ptr		3986235	0					
ANR	3986491	Identifier	variable_ptr		3986235	0					
ANR	3986492	ElseStatement	else		3986235	0					
ANR	3986493	IfStatement	"if ( ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref ) )"		3986235	0					
ANR	3986494	Condition	"ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref )"	96:15:4624:4682	3986235	0	True				
ANR	3986495	AndExpression	"ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref )"		3986235	0		&&			
ANR	3986496	CallExpression	"ZEND_CONST_COND ( value_type == IS_VAR , 1 )"		3986235	0					
ANR	3986497	Callee	ZEND_CONST_COND		3986235	0					
ANR	3986498	Identifier	ZEND_CONST_COND		3986235	0					
ANR	3986499	ArgumentList	value_type == IS_VAR		3986235	1					
ANR	3986500	Argument	value_type == IS_VAR		3986235	0					
ANR	3986501	EqualityExpression	value_type == IS_VAR		3986235	0		==			
ANR	3986502	Identifier	value_type		3986235	0					
ANR	3986503	Identifier	IS_VAR		3986235	1					
ANR	3986504	Argument	1		3986235	1					
ANR	3986505	PrimaryExpression	1		3986235	0					
ANR	3986506	CallExpression	UNEXPECTED ( ref )		3986235	1					
ANR	3986507	Callee	UNEXPECTED		3986235	0					
ANR	3986508	Identifier	UNEXPECTED		3986235	0					
ANR	3986509	ArgumentList	ref		3986235	1					
ANR	3986510	Argument	ref		3986235	0					
ANR	3986511	Identifier	ref		3986235	0					
ANR	3986512	CompoundStatement		39:76:1258:1258	3986235	1					
ANR	3986513	IfStatement	if ( UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 ) )		3986235	0					
ANR	3986514	Condition	UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 )	97:9:4696:4730	3986235	0	True				
ANR	3986515	CallExpression	UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 )		3986235	0					
ANR	3986516	Callee	UNEXPECTED		3986235	0					
ANR	3986517	Identifier	UNEXPECTED		3986235	0					
ANR	3986518	ArgumentList	-- GC_REFCOUNT ( ref ) == 0		3986235	1					
ANR	3986519	Argument	-- GC_REFCOUNT ( ref ) == 0		3986235	0					
ANR	3986520	EqualityExpression	-- GC_REFCOUNT ( ref ) == 0		3986235	0		==			
ANR	3986521	UnaryExpression	-- GC_REFCOUNT ( ref )		3986235	0					
ANR	3986522	IncDec	--		3986235	0					
ANR	3986523	CallExpression	GC_REFCOUNT ( ref )		3986235	1					
ANR	3986524	Callee	GC_REFCOUNT		3986235	0					
ANR	3986525	Identifier	GC_REFCOUNT		3986235	0					
ANR	3986526	ArgumentList	ref		3986235	1					
ANR	3986527	Argument	ref		3986235	0					
ANR	3986528	Identifier	ref		3986235	0					
ANR	3986529	PrimaryExpression	0		3986235	1					
ANR	3986530	CompoundStatement		40:46:1306:1306	3986235	1					
ANR	3986531	ExpressionStatement	"efree_size ( ref , sizeof ( zend_reference ) )"	98:6:4741:4780	3986235	0	True				
ANR	3986532	CallExpression	"efree_size ( ref , sizeof ( zend_reference ) )"		3986235	0					
ANR	3986533	Callee	efree_size		3986235	0					
ANR	3986534	Identifier	efree_size		3986235	0					
ANR	3986535	ArgumentList	ref		3986235	1					
ANR	3986536	Argument	ref		3986235	0					
ANR	3986537	Identifier	ref		3986235	0					
ANR	3986538	Argument	sizeof ( zend_reference )		3986235	1					
ANR	3986539	SizeofExpression	sizeof ( zend_reference )		3986235	0					
ANR	3986540	Sizeof	sizeof		3986235	0					
ANR	3986541	SizeofOperand	zend_reference		3986235	1					
ANR	3986542	ElseStatement	else		3986235	0					
ANR	3986543	IfStatement	if ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )		3986235	0					
ANR	3986544	Condition	Z_OPT_REFCOUNTED_P ( variable_ptr )	99:16:4798:4829	3986235	0	True				
ANR	3986545	CallExpression	Z_OPT_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986546	Callee	Z_OPT_REFCOUNTED_P		3986235	0					
ANR	3986547	Identifier	Z_OPT_REFCOUNTED_P		3986235	0					
ANR	3986548	ArgumentList	variable_ptr		3986235	1					
ANR	3986549	Argument	variable_ptr		3986235	0					
ANR	3986550	Identifier	variable_ptr		3986235	0					
ANR	3986551	CompoundStatement		42:50:1405:1405	3986235	1					
ANR	3986552	ExpressionStatement	Z_ADDREF_P ( variable_ptr )	100:6:4840:4864	3986235	0	True				
ANR	3986553	CallExpression	Z_ADDREF_P ( variable_ptr )		3986235	0					
ANR	3986554	Callee	Z_ADDREF_P		3986235	0					
ANR	3986555	Identifier	Z_ADDREF_P		3986235	0					
ANR	3986556	ArgumentList	variable_ptr		3986235	1					
ANR	3986557	Argument	variable_ptr		3986235	0					
ANR	3986558	Identifier	variable_ptr		3986235	0					
ANR	3986559	ExpressionStatement	zval_dtor_func_for_ptr ( garbage )	103:4:4883:4914	3986235	2	True				
ANR	3986560	CallExpression	zval_dtor_func_for_ptr ( garbage )		3986235	0					
ANR	3986561	Callee	zval_dtor_func_for_ptr		3986235	0					
ANR	3986562	Identifier	zval_dtor_func_for_ptr		3986235	0					
ANR	3986563	ArgumentList	garbage		3986235	1					
ANR	3986564	Argument	garbage		3986235	0					
ANR	3986565	Identifier	garbage		3986235	0					
ANR	3986566	ReturnStatement	return variable_ptr ;	104:4:4920:4939	3986235	3	True				
ANR	3986567	Identifier	variable_ptr		3986235	0					
ANR	3986568	ElseStatement	else		3986235	0					
ANR	3986569	CompoundStatement		48:10:1524:1524	3986235	0					
ANR	3986570	IfStatement	if ( ( Z_COLLECTABLE_P ( variable_ptr ) ) && UNEXPECTED ( ! GC_INFO ( garbage ) ) )		3986235	0					
ANR	3986571	Condition	( Z_COLLECTABLE_P ( variable_ptr ) ) && UNEXPECTED ( ! GC_INFO ( garbage ) )	107:8:5057:5128	3986235	0	True				
ANR	3986572	AndExpression	( Z_COLLECTABLE_P ( variable_ptr ) ) && UNEXPECTED ( ! GC_INFO ( garbage ) )		3986235	0		&&			
ANR	3986573	CallExpression	Z_COLLECTABLE_P ( variable_ptr )		3986235	0					
ANR	3986574	Callee	Z_COLLECTABLE_P		3986235	0					
ANR	3986575	Identifier	Z_COLLECTABLE_P		3986235	0					
ANR	3986576	ArgumentList	variable_ptr		3986235	1					
ANR	3986577	Argument	variable_ptr		3986235	0					
ANR	3986578	Identifier	variable_ptr		3986235	0					
ANR	3986579	CallExpression	UNEXPECTED ( ! GC_INFO ( garbage ) )		3986235	1					
ANR	3986580	Callee	UNEXPECTED		3986235	0					
ANR	3986581	Identifier	UNEXPECTED		3986235	0					
ANR	3986582	ArgumentList	! GC_INFO ( garbage )		3986235	1					
ANR	3986583	Argument	! GC_INFO ( garbage )		3986235	0					
ANR	3986584	UnaryOperationExpression	! GC_INFO ( garbage )		3986235	0					
ANR	3986585	UnaryOperator	!		3986235	0					
ANR	3986586	CallExpression	GC_INFO ( garbage )		3986235	1					
ANR	3986587	Callee	GC_INFO		3986235	0					
ANR	3986588	Identifier	GC_INFO		3986235	0					
ANR	3986589	ArgumentList	garbage		3986235	1					
ANR	3986590	Argument	garbage		3986235	0					
ANR	3986591	Identifier	garbage		3986235	0					
ANR	3986592	CompoundStatement		51:39:1704:1704	3986235	1					
ANR	3986593	ExpressionStatement	gc_possible_root ( garbage )	109:5:5138:5163	3986235	0	True				
ANR	3986594	CallExpression	gc_possible_root ( garbage )		3986235	0					
ANR	3986595	Callee	gc_possible_root		3986235	0					
ANR	3986596	Identifier	gc_possible_root		3986235	0					
ANR	3986597	ArgumentList	garbage		3986235	1					
ANR	3986598	Argument	garbage		3986235	0					
ANR	3986599	Identifier	garbage		3986235	0					
ANR	3986600	Condition	0	113:10:5190:5190	3986235	1	True				
ANR	3986601	PrimaryExpression	0		3986235	0					
ANR	3986602	ExpressionStatement	"ZVAL_COPY_VALUE ( variable_ptr , value )"	115:1:5196:5232	3986235	3	True				
ANR	3986603	CallExpression	"ZVAL_COPY_VALUE ( variable_ptr , value )"		3986235	0					
ANR	3986604	Callee	ZVAL_COPY_VALUE		3986235	0					
ANR	3986605	Identifier	ZVAL_COPY_VALUE		3986235	0					
ANR	3986606	ArgumentList	variable_ptr		3986235	1					
ANR	3986607	Argument	variable_ptr		3986235	0					
ANR	3986608	Identifier	variable_ptr		3986235	0					
ANR	3986609	Argument	value		3986235	1					
ANR	3986610	Identifier	value		3986235	0					
ANR	3986611	IfStatement	if ( value_type == IS_CONST )		3986235	4					
ANR	3986612	Condition	value_type == IS_CONST	116:5:5239:5260	3986235	0	True				
ANR	3986613	EqualityExpression	value_type == IS_CONST		3986235	0		==			
ANR	3986614	Identifier	value_type		3986235	0					
ANR	3986615	Identifier	IS_CONST		3986235	1					
ANR	3986616	CompoundStatement		59:29:1836:1836	3986235	1					
ANR	3986617	IfStatement	if ( UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) ) )		3986235	0					
ANR	3986618	Condition	UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) )	118:6:5336:5377	3986235	0	True				
ANR	3986619	CallExpression	UNEXPECTED ( Z_OPT_COPYABLE_P ( variable_ptr ) )		3986235	0					
ANR	3986620	Callee	UNEXPECTED		3986235	0					
ANR	3986621	Identifier	UNEXPECTED		3986235	0					
ANR	3986622	ArgumentList	Z_OPT_COPYABLE_P ( variable_ptr )		3986235	1					
ANR	3986623	Argument	Z_OPT_COPYABLE_P ( variable_ptr )		3986235	0					
ANR	3986624	CallExpression	Z_OPT_COPYABLE_P ( variable_ptr )		3986235	0					
ANR	3986625	Callee	Z_OPT_COPYABLE_P		3986235	0					
ANR	3986626	Identifier	Z_OPT_COPYABLE_P		3986235	0					
ANR	3986627	ArgumentList	variable_ptr		3986235	1					
ANR	3986628	Argument	variable_ptr		3986235	0					
ANR	3986629	Identifier	variable_ptr		3986235	0					
ANR	3986630	CompoundStatement		61:50:1953:1953	3986235	1					
ANR	3986631	ExpressionStatement	zval_copy_ctor_func ( variable_ptr )	119:3:5385:5418	3986235	0	True				
ANR	3986632	CallExpression	zval_copy_ctor_func ( variable_ptr )		3986235	0					
ANR	3986633	Callee	zval_copy_ctor_func		3986235	0					
ANR	3986634	Identifier	zval_copy_ctor_func		3986235	0					
ANR	3986635	ArgumentList	variable_ptr		3986235	1					
ANR	3986636	Argument	variable_ptr		3986235	0					
ANR	3986637	Identifier	variable_ptr		3986235	0					
ANR	3986638	ElseStatement	else		3986235	0					
ANR	3986639	IfStatement	if ( value_type == IS_CV )		3986235	0					
ANR	3986640	Condition	value_type == IS_CV	121:12:5436:5454	3986235	0	True				
ANR	3986641	EqualityExpression	value_type == IS_CV		3986235	0		==			
ANR	3986642	Identifier	value_type		3986235	0					
ANR	3986643	Identifier	IS_CV		3986235	1					
ANR	3986644	CompoundStatement		64:33:2030:2030	3986235	1					
ANR	3986645	IfStatement	if ( UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) ) )		3986235	0					
ANR	3986646	Condition	UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )	122:6:5465:5508	3986235	0	True				
ANR	3986647	CallExpression	UNEXPECTED ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )		3986235	0					
ANR	3986648	Callee	UNEXPECTED		3986235	0					
ANR	3986649	Identifier	UNEXPECTED		3986235	0					
ANR	3986650	ArgumentList	Z_OPT_REFCOUNTED_P ( variable_ptr )		3986235	1					
ANR	3986651	Argument	Z_OPT_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986652	CallExpression	Z_OPT_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986653	Callee	Z_OPT_REFCOUNTED_P		3986235	0					
ANR	3986654	Identifier	Z_OPT_REFCOUNTED_P		3986235	0					
ANR	3986655	ArgumentList	variable_ptr		3986235	1					
ANR	3986656	Argument	variable_ptr		3986235	0					
ANR	3986657	Identifier	variable_ptr		3986235	0					
ANR	3986658	CompoundStatement		65:52:2084:2084	3986235	1					
ANR	3986659	ExpressionStatement	Z_ADDREF_P ( variable_ptr )	123:3:5516:5540	3986235	0	True				
ANR	3986660	CallExpression	Z_ADDREF_P ( variable_ptr )		3986235	0					
ANR	3986661	Callee	Z_ADDREF_P		3986235	0					
ANR	3986662	Identifier	Z_ADDREF_P		3986235	0					
ANR	3986663	ArgumentList	variable_ptr		3986235	1					
ANR	3986664	Argument	variable_ptr		3986235	0					
ANR	3986665	Identifier	variable_ptr		3986235	0					
ANR	3986666	ElseStatement	else		3986235	0					
ANR	3986667	IfStatement	"if ( ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref ) )"		3986235	0					
ANR	3986668	Condition	"ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref )"	125:12:5558:5616	3986235	0	True				
ANR	3986669	AndExpression	"ZEND_CONST_COND ( value_type == IS_VAR , 1 ) && UNEXPECTED ( ref )"		3986235	0		&&			
ANR	3986670	CallExpression	"ZEND_CONST_COND ( value_type == IS_VAR , 1 )"		3986235	0					
ANR	3986671	Callee	ZEND_CONST_COND		3986235	0					
ANR	3986672	Identifier	ZEND_CONST_COND		3986235	0					
ANR	3986673	ArgumentList	value_type == IS_VAR		3986235	1					
ANR	3986674	Argument	value_type == IS_VAR		3986235	0					
ANR	3986675	EqualityExpression	value_type == IS_VAR		3986235	0		==			
ANR	3986676	Identifier	value_type		3986235	0					
ANR	3986677	Identifier	IS_VAR		3986235	1					
ANR	3986678	Argument	1		3986235	1					
ANR	3986679	PrimaryExpression	1		3986235	0					
ANR	3986680	CallExpression	UNEXPECTED ( ref )		3986235	1					
ANR	3986681	Callee	UNEXPECTED		3986235	0					
ANR	3986682	Identifier	UNEXPECTED		3986235	0					
ANR	3986683	ArgumentList	ref		3986235	1					
ANR	3986684	Argument	ref		3986235	0					
ANR	3986685	Identifier	ref		3986235	0					
ANR	3986686	CompoundStatement		68:73:2192:2192	3986235	1					
ANR	3986687	IfStatement	if ( UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 ) )		3986235	0					
ANR	3986688	Condition	UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 )	126:6:5627:5661	3986235	0	True				
ANR	3986689	CallExpression	UNEXPECTED ( -- GC_REFCOUNT ( ref ) == 0 )		3986235	0					
ANR	3986690	Callee	UNEXPECTED		3986235	0					
ANR	3986691	Identifier	UNEXPECTED		3986235	0					
ANR	3986692	ArgumentList	-- GC_REFCOUNT ( ref ) == 0		3986235	1					
ANR	3986693	Argument	-- GC_REFCOUNT ( ref ) == 0		3986235	0					
ANR	3986694	EqualityExpression	-- GC_REFCOUNT ( ref ) == 0		3986235	0		==			
ANR	3986695	UnaryExpression	-- GC_REFCOUNT ( ref )		3986235	0					
ANR	3986696	IncDec	--		3986235	0					
ANR	3986697	CallExpression	GC_REFCOUNT ( ref )		3986235	1					
ANR	3986698	Callee	GC_REFCOUNT		3986235	0					
ANR	3986699	Identifier	GC_REFCOUNT		3986235	0					
ANR	3986700	ArgumentList	ref		3986235	1					
ANR	3986701	Argument	ref		3986235	0					
ANR	3986702	Identifier	ref		3986235	0					
ANR	3986703	PrimaryExpression	0		3986235	1					
ANR	3986704	CompoundStatement		69:43:2237:2237	3986235	1					
ANR	3986705	ExpressionStatement	"efree_size ( ref , sizeof ( zend_reference ) )"	127:3:5669:5708	3986235	0	True				
ANR	3986706	CallExpression	"efree_size ( ref , sizeof ( zend_reference ) )"		3986235	0					
ANR	3986707	Callee	efree_size		3986235	0					
ANR	3986708	Identifier	efree_size		3986235	0					
ANR	3986709	ArgumentList	ref		3986235	1					
ANR	3986710	Argument	ref		3986235	0					
ANR	3986711	Identifier	ref		3986235	0					
ANR	3986712	Argument	sizeof ( zend_reference )		3986235	1					
ANR	3986713	SizeofExpression	sizeof ( zend_reference )		3986235	0					
ANR	3986714	Sizeof	sizeof		3986235	0					
ANR	3986715	SizeofOperand	zend_reference		3986235	1					
ANR	3986716	ElseStatement	else		3986235	0					
ANR	3986717	IfStatement	if ( Z_OPT_REFCOUNTED_P ( variable_ptr ) )		3986235	0					
ANR	3986718	Condition	Z_OPT_REFCOUNTED_P ( variable_ptr )	128:13:5723:5754	3986235	0	True				
ANR	3986719	CallExpression	Z_OPT_REFCOUNTED_P ( variable_ptr )		3986235	0					
ANR	3986720	Callee	Z_OPT_REFCOUNTED_P		3986235	0					
ANR	3986721	Identifier	Z_OPT_REFCOUNTED_P		3986235	0					
ANR	3986722	ArgumentList	variable_ptr		3986235	1					
ANR	3986723	Argument	variable_ptr		3986235	0					
ANR	3986724	Identifier	variable_ptr		3986235	0					
ANR	3986725	CompoundStatement		71:47:2330:2330	3986235	1					
ANR	3986726	ExpressionStatement	Z_ADDREF_P ( variable_ptr )	129:3:5762:5786	3986235	0	True				
ANR	3986727	CallExpression	Z_ADDREF_P ( variable_ptr )		3986235	0					
ANR	3986728	Callee	Z_ADDREF_P		3986235	0					
ANR	3986729	Identifier	Z_ADDREF_P		3986235	0					
ANR	3986730	ArgumentList	variable_ptr		3986235	1					
ANR	3986731	Argument	variable_ptr		3986235	0					
ANR	3986732	Identifier	variable_ptr		3986235	0					
ANR	3986733	ReturnStatement	return variable_ptr ;	132:1:5796:5815	3986235	5	True				
ANR	3986734	Identifier	variable_ptr		3986235	0					
ANR	3986735	ReturnType	static zend_always_inline zval *		3986235	1					
ANR	3986736	Identifier	zend_assign_to_variable		3986235	2					
ANR	3986737	ParameterList	"zval * variable_ptr , zval * value , zend_uchar value_type"		3986235	3					
ANR	3986738	Parameter	zval * variable_ptr	57:56:3370:3387	3986235	0	True				
ANR	3986739	ParameterType	zval *		3986235	0					
ANR	3986740	Identifier	variable_ptr		3986235	1					
ANR	3986741	Parameter	zval * value	57:76:3390:3400	3986235	1	True				
ANR	3986742	ParameterType	zval *		3986235	0					
ANR	3986743	Identifier	value		3986235	1					
ANR	3986744	Parameter	zend_uchar value_type	57:89:3403:3423	3986235	2	True				
ANR	3986745	ParameterType	zend_uchar		3986235	0					
ANR	3986746	Identifier	value_type		3986235	1					
ANR	3986747	CFGEntryNode	ENTRY		3986235		True				
ANR	3986748	CFGExitNode	EXIT		3986235		True				
ANR	3986749	Symbol	value_type		3986235						
ANR	3986750	Symbol	IS_CV		3986235						
ANR	3986751	Symbol	Z_COLLECTABLE_P		3986235						
ANR	3986752	Symbol	UNEXPECTED		3986235						
ANR	3986753	Symbol	ref		3986235						
ANR	3986754	Symbol	ZEND_CONST_COND		3986235						
ANR	3986755	Symbol	Z_OBJ_HANDLER_P		3986235						
ANR	3986756	Symbol	value		3986235						
ANR	3986757	Symbol	GC_REFCOUNT		3986235						
ANR	3986758	Symbol	Z_OPT_COPYABLE_P		3986235						
ANR	3986759	Symbol	IS_CONST		3986235						
ANR	3986760	Symbol	NULL		3986235						
ANR	3986761	Symbol	Z_COUNTED_P		3986235						
ANR	3986762	Symbol	set		3986235						
ANR	3986763	Symbol	Z_OPT_REFCOUNTED_P		3986235						
ANR	3986764	Symbol	variable_ptr		3986235						
ANR	3986765	Symbol	garbage		3986235						
ANR	3986766	Symbol	Z_TYPE_P		3986235						
ANR	3986767	Symbol	Z_REFVAL_P		3986235						
ANR	3986768	Symbol	Z_REFCOUNTED_P		3986235						
ANR	3986769	Symbol	IS_OBJECT		3986235						
ANR	3986770	Symbol	IS_VAR		3986235						
ANR	3986771	Symbol	EXPECTED		3986235						
ANR	3986772	Symbol	GC_INFO		3986235						
ANR	3986773	Symbol	Z_ISREF_P		3986235						
ANR	3986774	DeclStmt									
ANR	3986775	Decl							ZEND_API int	"ZEND_API int ( zval * pp , zend_bool inline_change )"	zval_update_constant
ANR	3986776	DeclStmt									
ANR	3986777	Decl							ZEND_API int	"ZEND_API int ( zval * pp , zend_bool inline_change , zend_class_entry * scope )"	zval_update_constant_ex
ANR	3986778	ClassDef	_zend_vm_stack	139:0:6043:6112							
ANR	3986779	DeclStmt									
ANR	3986780	Decl							zval	zval *	top
ANR	3986781	DeclStmt									
ANR	3986782	Decl							zval	zval *	end
ANR	3986783	DeclStmt									
ANR	3986784	Decl							zend_vm_stack	zend_vm_stack	prev
ANR	3986785	DeclStmt									
ANR	3986786	Decl							ZEND_API void	ZEND_API void ( void )	zend_vm_stack_init
ANR	3986787	DeclStmt									
ANR	3986788	Decl							ZEND_API void	ZEND_API void ( void )	zend_vm_stack_destroy
ANR	3986789	DeclStmt									
ANR	3986790	Decl							ZEND_API void	ZEND_API void * ( size_t size )	zend_vm_stack_extend
ANR	3986791	Function	zend_vm_stack_push_call_frame_ex	170:0:7277:8072							
ANR	3986792	FunctionDef	"zend_vm_stack_push_call_frame_ex (uint32_t used_stack , uint32_t call_info , zend_function * func , uint32_t num_args , zend_class_entry * called_scope , zend_object * object)"		3986791	0					
ANR	3986793	CompoundStatement		171:0:7489:8072	3986791	0					
ANR	3986794	IdentifierDeclStatement	zend_execute_data * call = ( zend_execute_data * ) EG ( vm_stack_top ) ;	172:1:7492:7554	3986791	0	True				
ANR	3986795	IdentifierDecl	* call = ( zend_execute_data * ) EG ( vm_stack_top )		3986791	0					
ANR	3986796	IdentifierDeclType	zend_execute_data *		3986791	0					
ANR	3986797	Identifier	call		3986791	1					
ANR	3986798	AssignmentExpression	* call = ( zend_execute_data * ) EG ( vm_stack_top )		3986791	2		=			
ANR	3986799	Identifier	call		3986791	0					
ANR	3986800	CastExpression	( zend_execute_data * ) EG ( vm_stack_top )		3986791	1					
ANR	3986801	CastTarget	zend_execute_data *		3986791	0					
ANR	3986802	CallExpression	EG ( vm_stack_top )		3986791	1					
ANR	3986803	Callee	EG		3986791	0					
ANR	3986804	Identifier	EG		3986791	0					
ANR	3986805	ArgumentList	vm_stack_top		3986791	1					
ANR	3986806	Argument	vm_stack_top		3986791	0					
ANR	3986807	Identifier	vm_stack_top		3986791	0					
ANR	3986808	ExpressionStatement	ZEND_ASSERT_VM_STACK_GLOBAL	174:1:7558:7585	3986791	1	True				
ANR	3986809	Identifier	ZEND_ASSERT_VM_STACK_GLOBAL		3986791	0					
ANR	3986810	IfStatement	if ( UNEXPECTED ( used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call ) ) )		3986791	2					
ANR	3986811	Condition	UNEXPECTED ( used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call ) )	176:5:7593:7666	3986791	0	True				
ANR	3986812	CallExpression	UNEXPECTED ( used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call ) )		3986791	0					
ANR	3986813	Callee	UNEXPECTED		3986791	0					
ANR	3986814	Identifier	UNEXPECTED		3986791	0					
ANR	3986815	ArgumentList	used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call )		3986791	1					
ANR	3986816	Argument	used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call )		3986791	0					
ANR	3986817	RelationalExpression	used_stack > ( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call )		3986791	0		>			
ANR	3986818	Identifier	used_stack		3986791	0					
ANR	3986819	CastExpression	( size_t ) ( ( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call )		3986791	1					
ANR	3986820	CastTarget	size_t		3986791	0					
ANR	3986821	AdditiveExpression	( ( char * ) EG ( vm_stack_end ) ) - ( char * ) call		3986791	1		-			
ANR	3986822	CastExpression	( char * ) EG ( vm_stack_end )		3986791	0					
ANR	3986823	CastTarget	char *		3986791	0					
ANR	3986824	CallExpression	EG ( vm_stack_end )		3986791	1					
ANR	3986825	Callee	EG		3986791	0					
ANR	3986826	Identifier	EG		3986791	0					
ANR	3986827	ArgumentList	vm_stack_end		3986791	1					
ANR	3986828	Argument	vm_stack_end		3986791	0					
ANR	3986829	Identifier	vm_stack_end		3986791	0					
ANR	3986830	CastExpression	( char * ) call		3986791	1					
ANR	3986831	CastTarget	char *		3986791	0					
ANR	3986832	Identifier	call		3986791	1					
ANR	3986833	CompoundStatement		6:81:179:179	3986791	1					
ANR	3986834	ExpressionStatement	call = ( zend_execute_data * ) zend_vm_stack_extend ( used_stack )	177:2:7673:7732	3986791	0	True				
ANR	3986835	AssignmentExpression	call = ( zend_execute_data * ) zend_vm_stack_extend ( used_stack )		3986791	0		=			
ANR	3986836	Identifier	call		3986791	0					
ANR	3986837	CastExpression	( zend_execute_data * ) zend_vm_stack_extend ( used_stack )		3986791	1					
ANR	3986838	CastTarget	zend_execute_data *		3986791	0					
ANR	3986839	CallExpression	zend_vm_stack_extend ( used_stack )		3986791	1					
ANR	3986840	Callee	zend_vm_stack_extend		3986791	0					
ANR	3986841	Identifier	zend_vm_stack_extend		3986791	0					
ANR	3986842	ArgumentList	used_stack		3986791	1					
ANR	3986843	Argument	used_stack		3986791	0					
ANR	3986844	Identifier	used_stack		3986791	0					
ANR	3986845	ExpressionStatement	"ZEND_SET_CALL_INFO ( call , call_info | ZEND_CALL_ALLOCATED )"	178:2:7736:7793	3986791	1	True				
ANR	3986846	CallExpression	"ZEND_SET_CALL_INFO ( call , call_info | ZEND_CALL_ALLOCATED )"		3986791	0					
ANR	3986847	Callee	ZEND_SET_CALL_INFO		3986791	0					
ANR	3986848	Identifier	ZEND_SET_CALL_INFO		3986791	0					
ANR	3986849	ArgumentList	call		3986791	1					
ANR	3986850	Argument	call		3986791	0					
ANR	3986851	Identifier	call		3986791	0					
ANR	3986852	Argument	call_info | ZEND_CALL_ALLOCATED		3986791	1					
ANR	3986853	InclusiveOrExpression	call_info | ZEND_CALL_ALLOCATED		3986791	0		|			
ANR	3986854	Identifier	call_info		3986791	0					
ANR	3986855	Identifier	ZEND_CALL_ALLOCATED		3986791	1					
ANR	3986856	ElseStatement	else		3986791	0					
ANR	3986857	CompoundStatement		9:8:313:313	3986791	0					
ANR	3986858	ExpressionStatement	EG ( vm_stack_top ) = ( zval * ) ( ( char * ) call + used_stack )	180:2:7807:7859	3986791	0	True				
ANR	3986859	AssignmentExpression	EG ( vm_stack_top ) = ( zval * ) ( ( char * ) call + used_stack )		3986791	0		=			
ANR	3986860	CallExpression	EG ( vm_stack_top )		3986791	0					
ANR	3986861	Callee	EG		3986791	0					
ANR	3986862	Identifier	EG		3986791	0					
ANR	3986863	ArgumentList	vm_stack_top		3986791	1					
ANR	3986864	Argument	vm_stack_top		3986791	0					
ANR	3986865	Identifier	vm_stack_top		3986791	0					
ANR	3986866	CastExpression	( zval * ) ( ( char * ) call + used_stack )		3986791	1					
ANR	3986867	CastTarget	zval *		3986791	0					
ANR	3986868	AdditiveExpression	( char * ) call + used_stack		3986791	1		+			
ANR	3986869	CastExpression	( char * ) call		3986791	0					
ANR	3986870	CastTarget	char *		3986791	0					
ANR	3986871	Identifier	call		3986791	1					
ANR	3986872	Identifier	used_stack		3986791	1					
ANR	3986873	ExpressionStatement	"ZEND_SET_CALL_INFO ( call , call_info )"	181:2:7863:7898	3986791	1	True				
ANR	3986874	CallExpression	"ZEND_SET_CALL_INFO ( call , call_info )"		3986791	0					
ANR	3986875	Callee	ZEND_SET_CALL_INFO		3986791	0					
ANR	3986876	Identifier	ZEND_SET_CALL_INFO		3986791	0					
ANR	3986877	ArgumentList	call		3986791	1					
ANR	3986878	Argument	call		3986791	0					
ANR	3986879	Identifier	call		3986791	0					
ANR	3986880	Argument	call_info		3986791	1					
ANR	3986881	Identifier	call_info		3986791	0					
ANR	3986882	ExpressionStatement	ZEND_ASSERT_VM_STACK_GLOBAL	184:1:7905:7932	3986791	3	True				
ANR	3986883	Identifier	ZEND_ASSERT_VM_STACK_GLOBAL		3986791	0					
ANR	3986884	ExpressionStatement	call -> func = func	186:1:7936:7953	3986791	4	True				
ANR	3986885	AssignmentExpression	call -> func = func		3986791	0		=			
ANR	3986886	PtrMemberAccess	call -> func		3986791	0					
ANR	3986887	Identifier	call		3986791	0					
ANR	3986888	Identifier	func		3986791	1					
ANR	3986889	Identifier	func		3986791	1					
ANR	3986890	ExpressionStatement	Z_OBJ ( call -> This ) = object	187:1:7956:7982	3986791	5	True				
ANR	3986891	AssignmentExpression	Z_OBJ ( call -> This ) = object		3986791	0		=			
ANR	3986892	CallExpression	Z_OBJ ( call -> This )		3986791	0					
ANR	3986893	Callee	Z_OBJ		3986791	0					
ANR	3986894	Identifier	Z_OBJ		3986791	0					
ANR	3986895	ArgumentList	call -> This		3986791	1					
ANR	3986896	Argument	call -> This		3986791	0					
ANR	3986897	PtrMemberAccess	call -> This		3986791	0					
ANR	3986898	Identifier	call		3986791	0					
ANR	3986899	Identifier	This		3986791	1					
ANR	3986900	Identifier	object		3986791	1					
ANR	3986901	ExpressionStatement	ZEND_CALL_NUM_ARGS ( call ) = num_args	188:1:7985:8020	3986791	6	True				
ANR	3986902	AssignmentExpression	ZEND_CALL_NUM_ARGS ( call ) = num_args		3986791	0		=			
ANR	3986903	CallExpression	ZEND_CALL_NUM_ARGS ( call )		3986791	0					
ANR	3986904	Callee	ZEND_CALL_NUM_ARGS		3986791	0					
ANR	3986905	Identifier	ZEND_CALL_NUM_ARGS		3986791	0					
ANR	3986906	ArgumentList	call		3986791	1					
ANR	3986907	Argument	call		3986791	0					
ANR	3986908	Identifier	call		3986791	0					
ANR	3986909	Identifier	num_args		3986791	1					
ANR	3986910	ExpressionStatement	call -> called_scope = called_scope	189:1:8023:8056	3986791	7	True				
ANR	3986911	AssignmentExpression	call -> called_scope = called_scope		3986791	0		=			
ANR	3986912	PtrMemberAccess	call -> called_scope		3986791	0					
ANR	3986913	Identifier	call		3986791	0					
ANR	3986914	Identifier	called_scope		3986791	1					
ANR	3986915	Identifier	called_scope		3986791	1					
ANR	3986916	ReturnStatement	return call ;	190:1:8059:8070	3986791	8	True				
ANR	3986917	Identifier	call		3986791	0					
ANR	3986918	ReturnType	static zend_always_inline zend_execute_data *		3986791	1					
ANR	3986919	Identifier	zend_vm_stack_push_call_frame_ex		3986791	2					
ANR	3986920	ParameterList	"uint32_t used_stack , uint32_t call_info , zend_function * func , uint32_t num_args , zend_class_entry * called_scope , zend_object * object"		3986791	3					
ANR	3986921	Parameter	uint32_t used_stack	170:78:7355:7373	3986791	0	True				
ANR	3986922	ParameterType	uint32_t		3986791	0					
ANR	3986923	Identifier	used_stack		3986791	1					
ANR	3986924	Parameter	uint32_t call_info	170:99:7376:7393	3986791	1	True				
ANR	3986925	ParameterType	uint32_t		3986791	0					
ANR	3986926	Identifier	call_info		3986791	1					
ANR	3986927	Parameter	zend_function * func	170:119:7396:7414	3986791	2	True				
ANR	3986928	ParameterType	zend_function *		3986791	0					
ANR	3986929	Identifier	func		3986791	1					
ANR	3986930	Parameter	uint32_t num_args	170:140:7417:7433	3986791	3	True				
ANR	3986931	ParameterType	uint32_t		3986791	0					
ANR	3986932	Identifier	num_args		3986791	1					
ANR	3986933	Parameter	zend_class_entry * called_scope	170:159:7436:7465	3986791	4	True				
ANR	3986934	ParameterType	zend_class_entry *		3986791	0					
ANR	3986935	Identifier	called_scope		3986791	1					
ANR	3986936	Parameter	zend_object * object	170:191:7468:7486	3986791	5	True				
ANR	3986937	ParameterType	zend_object *		3986791	0					
ANR	3986938	Identifier	object		3986791	1					
ANR	3986939	CFGEntryNode	ENTRY		3986791		True				
ANR	3986940	CFGExitNode	EXIT		3986791		True				
ANR	3986941	Symbol	call -> This		3986791						
ANR	3986942	Symbol	EG		3986791						
ANR	3986943	Symbol	call -> func		3986791						
ANR	3986944	Symbol	call -> called_scope		3986791						
ANR	3986945	Symbol	called_scope		3986791						
ANR	3986946	Symbol	* call		3986791						
ANR	3986947	Symbol	ZEND_CALL_ALLOCATED		3986791						
ANR	3986948	Symbol	call_info		3986791						
ANR	3986949	Symbol	vm_stack_top		3986791						
ANR	3986950	Symbol	call		3986791						
ANR	3986951	Symbol	UNEXPECTED		3986791						
ANR	3986952	Symbol	Z_OBJ		3986791						
ANR	3986953	Symbol	func		3986791						
ANR	3986954	Symbol	num_args		3986791						
ANR	3986955	Symbol	vm_stack_end		3986791						
ANR	3986956	Symbol	ZEND_CALL_NUM_ARGS		3986791						
ANR	3986957	Symbol	used_stack		3986791						
ANR	3986958	Symbol	zend_vm_stack_extend		3986791						
ANR	3986959	Symbol	object		3986791						
ANR	3986960	Function	zend_vm_calc_used_stack	193:0:8075:8417							
ANR	3986961	FunctionDef	"zend_vm_calc_used_stack (uint32_t num_args , zend_function * func)"		3986960	0					
ANR	3986962	CompoundStatement		194:0:8174:8417	3986960	0					
ANR	3986963	IdentifierDeclStatement	uint32_t used_stack = ZEND_CALL_FRAME_SLOT + num_args ;	195:1:8177:8230	3986960	0	True				
ANR	3986964	IdentifierDecl	used_stack = ZEND_CALL_FRAME_SLOT + num_args		3986960	0					
ANR	3986965	IdentifierDeclType	uint32_t		3986960	0					
ANR	3986966	Identifier	used_stack		3986960	1					
ANR	3986967	AssignmentExpression	used_stack = ZEND_CALL_FRAME_SLOT + num_args		3986960	2		=			
ANR	3986968	Identifier	used_stack		3986960	0					
ANR	3986969	AdditiveExpression	ZEND_CALL_FRAME_SLOT + num_args		3986960	1		+			
ANR	3986970	Identifier	ZEND_CALL_FRAME_SLOT		3986960	0					
ANR	3986971	Identifier	num_args		3986960	1					
ANR	3986972	IfStatement	if ( EXPECTED ( ZEND_USER_CODE ( func -> type ) ) )		3986960	1					
ANR	3986973	Condition	EXPECTED ( ZEND_USER_CODE ( func -> type ) )	197:5:8238:8273	3986960	0	True				
ANR	3986974	CallExpression	EXPECTED ( ZEND_USER_CODE ( func -> type ) )		3986960	0					
ANR	3986975	Callee	EXPECTED		3986960	0					
ANR	3986976	Identifier	EXPECTED		3986960	0					
ANR	3986977	ArgumentList	ZEND_USER_CODE ( func -> type )		3986960	1					
ANR	3986978	Argument	ZEND_USER_CODE ( func -> type )		3986960	0					
ANR	3986979	CallExpression	ZEND_USER_CODE ( func -> type )		3986960	0					
ANR	3986980	Callee	ZEND_USER_CODE		3986960	0					
ANR	3986981	Identifier	ZEND_USER_CODE		3986960	0					
ANR	3986982	ArgumentList	func -> type		3986960	1					
ANR	3986983	Argument	func -> type		3986960	0					
ANR	3986984	PtrMemberAccess	func -> type		3986960	0					
ANR	3986985	Identifier	func		3986960	0					
ANR	3986986	Identifier	type		3986960	1					
ANR	3986987	CompoundStatement		4:43:101:101	3986960	1					
ANR	3986988	ExpressionStatement	"used_stack += func -> op_array . last_var + func -> op_array . T - MIN ( func -> op_array . num_args , num_args )"	198:2:8280:8377	3986960	0	True				
ANR	3986989	AssignmentExpression	"used_stack += func -> op_array . last_var + func -> op_array . T - MIN ( func -> op_array . num_args , num_args )"		3986960	0		+=			
ANR	3986990	Identifier	used_stack		3986960	0					
ANR	3986991	AdditiveExpression	"func -> op_array . last_var + func -> op_array . T - MIN ( func -> op_array . num_args , num_args )"		3986960	1		+			
ANR	3986992	MemberAccess	func -> op_array . last_var		3986960	0					
ANR	3986993	PtrMemberAccess	func -> op_array		3986960	0					
ANR	3986994	Identifier	func		3986960	0					
ANR	3986995	Identifier	op_array		3986960	1					
ANR	3986996	Identifier	last_var		3986960	1					
ANR	3986997	AdditiveExpression	"func -> op_array . T - MIN ( func -> op_array . num_args , num_args )"		3986960	1		-			
ANR	3986998	MemberAccess	func -> op_array . T		3986960	0					
ANR	3986999	PtrMemberAccess	func -> op_array		3986960	0					
ANR	3987000	Identifier	func		3986960	0					
ANR	3987001	Identifier	op_array		3986960	1					
ANR	3987002	Identifier	T		3986960	1					
ANR	3987003	CallExpression	"MIN ( func -> op_array . num_args , num_args )"		3986960	1					
ANR	3987004	Callee	MIN		3986960	0					
ANR	3987005	Identifier	MIN		3986960	0					
ANR	3987006	ArgumentList	func -> op_array . num_args		3986960	1					
ANR	3987007	Argument	func -> op_array . num_args		3986960	0					
ANR	3987008	MemberAccess	func -> op_array . num_args		3986960	0					
ANR	3987009	PtrMemberAccess	func -> op_array		3986960	0					
ANR	3987010	Identifier	func		3986960	0					
ANR	3987011	Identifier	op_array		3986960	1					
ANR	3987012	Identifier	num_args		3986960	1					
ANR	3987013	Argument	num_args		3986960	1					
ANR	3987014	Identifier	num_args		3986960	0					
ANR	3987015	ReturnStatement	return used_stack * sizeof ( zval ) ;	200:1:8383:8415	3986960	2	True				
ANR	3987016	MultiplicativeExpression	used_stack * sizeof ( zval )		3986960	0		*			
ANR	3987017	Identifier	used_stack		3986960	0					
ANR	3987018	SizeofExpression	sizeof ( zval )		3986960	1					
ANR	3987019	Sizeof	sizeof		3986960	0					
ANR	3987020	SizeofOperand	zval		3986960	1					
ANR	3987021	ReturnType	static zend_always_inline uint32_t		3986960	1					
ANR	3987022	Identifier	zend_vm_calc_used_stack		3986960	2					
ANR	3987023	ParameterList	"uint32_t num_args , zend_function * func"		3986960	3					
ANR	3987024	Parameter	uint32_t num_args	193:59:8134:8150	3986960	0	True				
ANR	3987025	ParameterType	uint32_t		3986960	0					
ANR	3987026	Identifier	num_args		3986960	1					
ANR	3987027	Parameter	zend_function * func	193:78:8153:8171	3986960	1	True				
ANR	3987028	ParameterType	zend_function *		3986960	0					
ANR	3987029	Identifier	func		3986960	1					
ANR	3987030	CFGEntryNode	ENTRY		3986960		True				
ANR	3987031	CFGExitNode	EXIT		3986960		True				
ANR	3987032	Symbol	* func		3986960						
ANR	3987033	Symbol	func -> op_array		3986960						
ANR	3987034	Symbol	func -> op_array . last_var		3986960						
ANR	3987035	Symbol	MIN		3986960						
ANR	3987036	Symbol	func		3986960						
ANR	3987037	Symbol	num_args		3986960						
ANR	3987038	Symbol	ZEND_USER_CODE		3986960						
ANR	3987039	Symbol	func -> type		3986960						
ANR	3987040	Symbol	ZEND_CALL_FRAME_SLOT		3986960						
ANR	3987041	Symbol	used_stack		3986960						
ANR	3987042	Symbol	EXPECTED		3986960						
ANR	3987043	Symbol	func -> op_array . T		3986960						
ANR	3987044	Symbol	func -> op_array . num_args		3986960						
ANR	3987045	Function	zend_vm_stack_push_call_frame	203:0:8420:8780							
ANR	3987046	FunctionDef	"zend_vm_stack_push_call_frame (uint32_t call_info , zend_function * func , uint32_t num_args , zend_class_entry * called_scope , zend_object * object)"		3987045	0					
ANR	3987047	CompoundStatement		204:0:8608:8780	3987045	0					
ANR	3987048	IdentifierDeclStatement	"uint32_t used_stack = zend_vm_calc_used_stack ( num_args , func ) ;"	205:1:8611:8672	3987045	0	True				
ANR	3987049	IdentifierDecl	"used_stack = zend_vm_calc_used_stack ( num_args , func )"		3987045	0					
ANR	3987050	IdentifierDeclType	uint32_t		3987045	0					
ANR	3987051	Identifier	used_stack		3987045	1					
ANR	3987052	AssignmentExpression	"used_stack = zend_vm_calc_used_stack ( num_args , func )"		3987045	2		=			
ANR	3987053	Identifier	used_stack		3987045	0					
ANR	3987054	CallExpression	"zend_vm_calc_used_stack ( num_args , func )"		3987045	1					
ANR	3987055	Callee	zend_vm_calc_used_stack		3987045	0					
ANR	3987056	Identifier	zend_vm_calc_used_stack		3987045	0					
ANR	3987057	ArgumentList	num_args		3987045	1					
ANR	3987058	Argument	num_args		3987045	0					
ANR	3987059	Identifier	num_args		3987045	0					
ANR	3987060	Argument	func		3987045	1					
ANR	3987061	Identifier	func		3987045	0					
ANR	3987062	ReturnStatement	"return zend_vm_stack_push_call_frame_ex ( used_stack , call_info , func , num_args , called_scope , object ) ;"	207:1:8676:8778	3987045	1	True				
ANR	3987063	CallExpression	"zend_vm_stack_push_call_frame_ex ( used_stack , call_info , func , num_args , called_scope , object )"		3987045	0					
ANR	3987064	Callee	zend_vm_stack_push_call_frame_ex		3987045	0					
ANR	3987065	Identifier	zend_vm_stack_push_call_frame_ex		3987045	0					
ANR	3987066	ArgumentList	used_stack		3987045	1					
ANR	3987067	Argument	used_stack		3987045	0					
ANR	3987068	Identifier	used_stack		3987045	0					
ANR	3987069	Argument	call_info		3987045	1					
ANR	3987070	Identifier	call_info		3987045	0					
ANR	3987071	Argument	func		3987045	2					
ANR	3987072	Identifier	func		3987045	0					
ANR	3987073	Argument	num_args		3987045	3					
ANR	3987074	Identifier	num_args		3987045	0					
ANR	3987075	Argument	called_scope		3987045	4					
ANR	3987076	Identifier	called_scope		3987045	0					
ANR	3987077	Argument	object		3987045	5					
ANR	3987078	Identifier	object		3987045	0					
ANR	3987079	ReturnType	static zend_always_inline zend_execute_data *		3987045	1					
ANR	3987080	Identifier	zend_vm_stack_push_call_frame		3987045	2					
ANR	3987081	ParameterList	"uint32_t call_info , zend_function * func , uint32_t num_args , zend_class_entry * called_scope , zend_object * object"		3987045	3					
ANR	3987082	Parameter	uint32_t call_info	203:75:8495:8512	3987045	0	True				
ANR	3987083	ParameterType	uint32_t		3987045	0					
ANR	3987084	Identifier	call_info		3987045	1					
ANR	3987085	Parameter	zend_function * func	203:95:8515:8533	3987045	1	True				
ANR	3987086	ParameterType	zend_function *		3987045	0					
ANR	3987087	Identifier	func		3987045	1					
ANR	3987088	Parameter	uint32_t num_args	203:116:8536:8552	3987045	2	True				
ANR	3987089	ParameterType	uint32_t		3987045	0					
ANR	3987090	Identifier	num_args		3987045	1					
ANR	3987091	Parameter	zend_class_entry * called_scope	203:135:8555:8584	3987045	3	True				
ANR	3987092	ParameterType	zend_class_entry *		3987045	0					
ANR	3987093	Identifier	called_scope		3987045	1					
ANR	3987094	Parameter	zend_object * object	203:167:8587:8605	3987045	4	True				
ANR	3987095	ParameterType	zend_object *		3987045	0					
ANR	3987096	Identifier	object		3987045	1					
ANR	3987097	CFGEntryNode	ENTRY		3987045		True				
ANR	3987098	CFGExitNode	EXIT		3987045		True				
ANR	3987099	Symbol	func		3987045						
ANR	3987100	Symbol	num_args		3987045						
ANR	3987101	Symbol	zend_vm_stack_push_call_frame_ex		3987045						
ANR	3987102	Symbol	called_scope		3987045						
ANR	3987103	Symbol	used_stack		3987045						
ANR	3987104	Symbol	zend_vm_calc_used_stack		3987045						
ANR	3987105	Symbol	call_info		3987045						
ANR	3987106	Symbol	object		3987045						
ANR	3987107	Function	zend_vm_stack_free_extra_args_ex	211:0:8783:9375							
ANR	3987108	FunctionDef	"zend_vm_stack_free_extra_args_ex (uint32_t call_info , zend_execute_data * call)"		3987107	0					
ANR	3987109	CompoundStatement		212:0:8892:9375	3987107	0					
ANR	3987110	IfStatement	if ( UNEXPECTED ( call_info & ZEND_CALL_FREE_EXTRA_ARGS ) )		3987107	0					
ANR	3987111	Condition	UNEXPECTED ( call_info & ZEND_CALL_FREE_EXTRA_ARGS )	213:5:8899:8947	3987107	0	True				
ANR	3987112	CallExpression	UNEXPECTED ( call_info & ZEND_CALL_FREE_EXTRA_ARGS )		3987107	0					
ANR	3987113	Callee	UNEXPECTED		3987107	0					
ANR	3987114	Identifier	UNEXPECTED		3987107	0					
ANR	3987115	ArgumentList	call_info & ZEND_CALL_FREE_EXTRA_ARGS		3987107	1					
ANR	3987116	Argument	call_info & ZEND_CALL_FREE_EXTRA_ARGS		3987107	0					
ANR	3987117	BitAndExpression	call_info & ZEND_CALL_FREE_EXTRA_ARGS		3987107	0		&			
ANR	3987118	Identifier	call_info		3987107	0					
ANR	3987119	Identifier	ZEND_CALL_FREE_EXTRA_ARGS		3987107	1					
ANR	3987120	CompoundStatement		4:3:157:231	3987107	1					
ANR	3987121	IdentifierDeclStatement	"zval * end = ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T ) ;"	214:2:8954:9045	3987107	0	True				
ANR	3987122	IdentifierDecl	"* end = ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T )"		3987107	0					
ANR	3987123	IdentifierDeclType	zval *		3987107	0					
ANR	3987124	Identifier	end		3987107	1					
ANR	3987125	AssignmentExpression	"* end = ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T )"		3987107	2		=			
ANR	3987126	Identifier	end		3987107	0					
ANR	3987127	CallExpression	"ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T )"		3987107	1					
ANR	3987128	Callee	ZEND_CALL_VAR_NUM		3987107	0					
ANR	3987129	Identifier	ZEND_CALL_VAR_NUM		3987107	0					
ANR	3987130	ArgumentList	call		3987107	1					
ANR	3987131	Argument	call		3987107	0					
ANR	3987132	Identifier	call		3987107	0					
ANR	3987133	Argument	call -> func -> op_array . last_var + call -> func -> op_array . T		3987107	1					
ANR	3987134	AdditiveExpression	call -> func -> op_array . last_var + call -> func -> op_array . T		3987107	0		+			
ANR	3987135	MemberAccess	call -> func -> op_array . last_var		3987107	0					
ANR	3987136	PtrMemberAccess	call -> func -> op_array		3987107	0					
ANR	3987137	PtrMemberAccess	call -> func		3987107	0					
ANR	3987138	Identifier	call		3987107	0					
ANR	3987139	Identifier	func		3987107	1					
ANR	3987140	Identifier	op_array		3987107	1					
ANR	3987141	Identifier	last_var		3987107	1					
ANR	3987142	MemberAccess	call -> func -> op_array . T		3987107	1					
ANR	3987143	PtrMemberAccess	call -> func -> op_array		3987107	0					
ANR	3987144	PtrMemberAccess	call -> func		3987107	0					
ANR	3987145	Identifier	call		3987107	0					
ANR	3987146	Identifier	func		3987107	1					
ANR	3987147	Identifier	op_array		3987107	1					
ANR	3987148	Identifier	T		3987107	1					
ANR	3987149	IdentifierDeclStatement	zval * p = end + ( ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args ) ;	215:3:9050:9124	3987107	1	True				
ANR	3987150	IdentifierDecl	* p = end + ( ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args )		3987107	0					
ANR	3987151	IdentifierDeclType	zval *		3987107	0					
ANR	3987152	Identifier	p		3987107	1					
ANR	3987153	AssignmentExpression	* p = end + ( ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args )		3987107	2		=			
ANR	3987154	Identifier	p		3987107	0					
ANR	3987155	AdditiveExpression	end + ( ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args )		3987107	1		+			
ANR	3987156	Identifier	end		3987107	0					
ANR	3987157	AdditiveExpression	ZEND_CALL_NUM_ARGS ( call ) - call -> func -> op_array . num_args		3987107	1		-			
ANR	3987158	CallExpression	ZEND_CALL_NUM_ARGS ( call )		3987107	0					
ANR	3987159	Callee	ZEND_CALL_NUM_ARGS		3987107	0					
ANR	3987160	Identifier	ZEND_CALL_NUM_ARGS		3987107	0					
ANR	3987161	ArgumentList	call		3987107	1					
ANR	3987162	Argument	call		3987107	0					
ANR	3987163	Identifier	call		3987107	0					
ANR	3987164	MemberAccess	call -> func -> op_array . num_args		3987107	1					
ANR	3987165	PtrMemberAccess	call -> func -> op_array		3987107	0					
ANR	3987166	PtrMemberAccess	call -> func		3987107	0					
ANR	3987167	Identifier	call		3987107	0					
ANR	3987168	Identifier	func		3987107	1					
ANR	3987169	Identifier	op_array		3987107	1					
ANR	3987170	Identifier	num_args		3987107	1					
ANR	3987171	DoStatement	do		3987107	2					
ANR	3987172	CompoundStatement		5:5:238:238	3987107	0					
ANR	3987173	ExpressionStatement	p --	217:3:9136:9139	3987107	0	True				
ANR	3987174	PostIncDecOperationExpression	p --		3987107	0					
ANR	3987175	Identifier	p		3987107	0					
ANR	3987176	IncDec	--		3987107	1					
ANR	3987177	IfStatement	if ( Z_REFCOUNTED_P ( p ) )		3987107	1					
ANR	3987178	Condition	Z_REFCOUNTED_P ( p )	218:7:9148:9164	3987107	0	True				
ANR	3987179	CallExpression	Z_REFCOUNTED_P ( p )		3987107	0					
ANR	3987180	Callee	Z_REFCOUNTED_P		3987107	0					
ANR	3987181	Identifier	Z_REFCOUNTED_P		3987107	0					
ANR	3987182	ArgumentList	p		3987107	1					
ANR	3987183	Argument	p		3987107	0					
ANR	3987184	Identifier	p		3987107	0					
ANR	3987185	CompoundStatement		7:26:274:274	3987107	1					
ANR	3987186	IfStatement	if ( ! Z_DELREF_P ( p ) )		3987107	0					
ANR	3987187	Condition	! Z_DELREF_P ( p )	219:8:9177:9190	3987107	0	True				
ANR	3987188	UnaryOperationExpression	! Z_DELREF_P ( p )		3987107	0					
ANR	3987189	UnaryOperator	!		3987107	0					
ANR	3987190	CallExpression	Z_DELREF_P ( p )		3987107	1					
ANR	3987191	Callee	Z_DELREF_P		3987107	0					
ANR	3987192	Identifier	Z_DELREF_P		3987107	0					
ANR	3987193	ArgumentList	p		3987107	1					
ANR	3987194	Argument	p		3987107	0					
ANR	3987195	Identifier	p		3987107	0					
ANR	3987196	CompoundStatement		9:5:307:342	3987107	1					
ANR	3987197	IdentifierDeclStatement	zend_refcounted * r = Z_COUNTED_P ( p ) ;	220:5:9200:9235	3987107	0	True				
ANR	3987198	IdentifierDecl	* r = Z_COUNTED_P ( p )		3987107	0					
ANR	3987199	IdentifierDeclType	zend_refcounted *		3987107	0					
ANR	3987200	Identifier	r		3987107	1					
ANR	3987201	AssignmentExpression	* r = Z_COUNTED_P ( p )		3987107	2		=			
ANR	3987202	Identifier	r		3987107	0					
ANR	3987203	CallExpression	Z_COUNTED_P ( p )		3987107	1					
ANR	3987204	Callee	Z_COUNTED_P		3987107	0					
ANR	3987205	Identifier	Z_COUNTED_P		3987107	0					
ANR	3987206	ArgumentList	p		3987107	1					
ANR	3987207	Argument	p		3987107	0					
ANR	3987208	Identifier	p		3987107	0					
ANR	3987209	ExpressionStatement	ZVAL_NULL ( p )	221:5:9242:9254	3987107	1	True				
ANR	3987210	CallExpression	ZVAL_NULL ( p )		3987107	0					
ANR	3987211	Callee	ZVAL_NULL		3987107	0					
ANR	3987212	Identifier	ZVAL_NULL		3987107	0					
ANR	3987213	ArgumentList	p		3987107	1					
ANR	3987214	Argument	p		3987107	0					
ANR	3987215	Identifier	p		3987107	0					
ANR	3987216	ExpressionStatement	zval_dtor_func_for_ptr ( r )	222:5:9261:9286	3987107	2	True				
ANR	3987217	CallExpression	zval_dtor_func_for_ptr ( r )		3987107	0					
ANR	3987218	Callee	zval_dtor_func_for_ptr		3987107	0					
ANR	3987219	Identifier	zval_dtor_func_for_ptr		3987107	0					
ANR	3987220	ArgumentList	r		3987107	1					
ANR	3987221	Argument	r		3987107	0					
ANR	3987222	Identifier	r		3987107	0					
ANR	3987223	ElseStatement	else		3987107	0					
ANR	3987224	CompoundStatement		12:11:406:406	3987107	0					
ANR	3987225	ExpressionStatement	GC_ZVAL_CHECK_POSSIBLE_ROOT ( p )	224:5:9306:9336	3987107	0	True				
ANR	3987226	CallExpression	GC_ZVAL_CHECK_POSSIBLE_ROOT ( p )		3987107	0					
ANR	3987227	Callee	GC_ZVAL_CHECK_POSSIBLE_ROOT		3987107	0					
ANR	3987228	Identifier	GC_ZVAL_CHECK_POSSIBLE_ROOT		3987107	0					
ANR	3987229	ArgumentList	p		3987107	1					
ANR	3987230	Argument	p		3987107	0					
ANR	3987231	Identifier	p		3987107	0					
ANR	3987232	Condition	p != end	227:11:9360:9367	3987107	1	True				
ANR	3987233	EqualityExpression	p != end		3987107	0		!=			
ANR	3987234	Identifier	p		3987107	0					
ANR	3987235	Identifier	end		3987107	1					
ANR	3987236	ReturnType	static zend_always_inline void		3987107	1					
ANR	3987237	Identifier	zend_vm_stack_free_extra_args_ex		3987107	2					
ANR	3987238	ParameterList	"uint32_t call_info , zend_execute_data * call"		3987107	3					
ANR	3987239	Parameter	uint32_t call_info	211:64:8847:8864	3987107	0	True				
ANR	3987240	ParameterType	uint32_t		3987107	0					
ANR	3987241	Identifier	call_info		3987107	1					
ANR	3987242	Parameter	zend_execute_data * call	211:84:8867:8889	3987107	1	True				
ANR	3987243	ParameterType	zend_execute_data *		3987107	0					
ANR	3987244	Identifier	call		3987107	1					
ANR	3987245	CFGEntryNode	ENTRY		3987107		True				
ANR	3987246	CFGExitNode	EXIT		3987107		True				
ANR	3987247	Symbol	call -> func -> op_array		3987107						
ANR	3987248	Symbol	call -> func		3987107						
ANR	3987249	Symbol	call -> func -> op_array . num_args		3987107						
ANR	3987250	Symbol	Z_COUNTED_P		3987107						
ANR	3987251	Symbol	ZEND_CALL_FREE_EXTRA_ARGS		3987107						
ANR	3987252	Symbol	call -> func -> op_array . last_var		3987107						
ANR	3987253	Symbol	* call		3987107						
ANR	3987254	Symbol	call -> func -> op_array . T		3987107						
ANR	3987255	Symbol	call_info		3987107						
ANR	3987256	Symbol	call		3987107						
ANR	3987257	Symbol	UNEXPECTED		3987107						
ANR	3987258	Symbol	p		3987107						
ANR	3987259	Symbol	* call -> func		3987107						
ANR	3987260	Symbol	r		3987107						
ANR	3987261	Symbol	ZEND_CALL_VAR_NUM		3987107						
ANR	3987262	Symbol	Z_DELREF_P		3987107						
ANR	3987263	Symbol	end		3987107						
ANR	3987264	Symbol	ZEND_CALL_NUM_ARGS		3987107						
ANR	3987265	Symbol	Z_REFCOUNTED_P		3987107						
ANR	3987266	Symbol	* * call		3987107						
ANR	3987267	Function	zend_vm_stack_free_extra_args	231:0:9378:9529							
ANR	3987268	FunctionDef	zend_vm_stack_free_extra_args (zend_execute_data * call)		3987267	0					
ANR	3987269	CompoundStatement		232:0:9464:9529	3987267	0					
ANR	3987270	ExpressionStatement	"zend_vm_stack_free_extra_args_ex ( ZEND_CALL_INFO ( call ) , call )"	233:1:9467:9527	3987267	0	True				
ANR	3987271	CallExpression	"zend_vm_stack_free_extra_args_ex ( ZEND_CALL_INFO ( call ) , call )"		3987267	0					
ANR	3987272	Callee	zend_vm_stack_free_extra_args_ex		3987267	0					
ANR	3987273	Identifier	zend_vm_stack_free_extra_args_ex		3987267	0					
ANR	3987274	ArgumentList	ZEND_CALL_INFO ( call )		3987267	1					
ANR	3987275	Argument	ZEND_CALL_INFO ( call )		3987267	0					
ANR	3987276	CallExpression	ZEND_CALL_INFO ( call )		3987267	0					
ANR	3987277	Callee	ZEND_CALL_INFO		3987267	0					
ANR	3987278	Identifier	ZEND_CALL_INFO		3987267	0					
ANR	3987279	ArgumentList	call		3987267	1					
ANR	3987280	Argument	call		3987267	0					
ANR	3987281	Identifier	call		3987267	0					
ANR	3987282	Argument	call		3987267	1					
ANR	3987283	Identifier	call		3987267	0					
ANR	3987284	ReturnType	static zend_always_inline void		3987267	1					
ANR	3987285	Identifier	zend_vm_stack_free_extra_args		3987267	2					
ANR	3987286	ParameterList	zend_execute_data * call		3987267	3					
ANR	3987287	Parameter	zend_execute_data * call	231:61:9439:9461	3987267	0	True				
ANR	3987288	ParameterType	zend_execute_data *		3987267	0					
ANR	3987289	Identifier	call		3987267	1					
ANR	3987290	CFGEntryNode	ENTRY		3987267		True				
ANR	3987291	CFGExitNode	EXIT		3987267		True				
ANR	3987292	Symbol	call		3987267						
ANR	3987293	Symbol	ZEND_CALL_INFO		3987267						
ANR	3987294	Function	zend_vm_stack_free_args	236:0:9532:9958							
ANR	3987295	FunctionDef	zend_vm_stack_free_args (zend_execute_data * call)		3987294	0					
ANR	3987296	CompoundStatement		237:0:9612:9958	3987294	0					
ANR	3987297	IdentifierDeclStatement	uint32_t num_args = ZEND_CALL_NUM_ARGS ( call ) ;	238:1:9615:9659	3987294	0	True				
ANR	3987298	IdentifierDecl	num_args = ZEND_CALL_NUM_ARGS ( call )		3987294	0					
ANR	3987299	IdentifierDeclType	uint32_t		3987294	0					
ANR	3987300	Identifier	num_args		3987294	1					
ANR	3987301	AssignmentExpression	num_args = ZEND_CALL_NUM_ARGS ( call )		3987294	2		=			
ANR	3987302	Identifier	num_args		3987294	0					
ANR	3987303	CallExpression	ZEND_CALL_NUM_ARGS ( call )		3987294	1					
ANR	3987304	Callee	ZEND_CALL_NUM_ARGS		3987294	0					
ANR	3987305	Identifier	ZEND_CALL_NUM_ARGS		3987294	0					
ANR	3987306	ArgumentList	call		3987294	1					
ANR	3987307	Argument	call		3987294	0					
ANR	3987308	Identifier	call		3987294	0					
ANR	3987309	IfStatement	if ( EXPECTED ( num_args > 0 ) )		3987294	1					
ANR	3987310	Condition	EXPECTED ( num_args > 0 )	240:5:9667:9688	3987294	0	True				
ANR	3987311	CallExpression	EXPECTED ( num_args > 0 )		3987294	0					
ANR	3987312	Callee	EXPECTED		3987294	0					
ANR	3987313	Identifier	EXPECTED		3987294	0					
ANR	3987314	ArgumentList	num_args > 0		3987294	1					
ANR	3987315	Argument	num_args > 0		3987294	0					
ANR	3987316	RelationalExpression	num_args > 0		3987294	0		>			
ANR	3987317	Identifier	num_args		3987294	0					
ANR	3987318	PrimaryExpression	0		3987294	1					
ANR	3987319	CompoundStatement		6:2:120:144	3987294	1					
ANR	3987320	IdentifierDeclStatement	"zval * end = ZEND_CALL_ARG ( call , 1 ) ;"	241:2:9695:9729	3987294	0	True				
ANR	3987321	IdentifierDecl	"* end = ZEND_CALL_ARG ( call , 1 )"		3987294	0					
ANR	3987322	IdentifierDeclType	zval *		3987294	0					
ANR	3987323	Identifier	end		3987294	1					
ANR	3987324	AssignmentExpression	"* end = ZEND_CALL_ARG ( call , 1 )"		3987294	2		=			
ANR	3987325	Identifier	end		3987294	0					
ANR	3987326	CallExpression	"ZEND_CALL_ARG ( call , 1 )"		3987294	1					
ANR	3987327	Callee	ZEND_CALL_ARG		3987294	0					
ANR	3987328	Identifier	ZEND_CALL_ARG		3987294	0					
ANR	3987329	ArgumentList	call		3987294	1					
ANR	3987330	Argument	call		3987294	0					
ANR	3987331	Identifier	call		3987294	0					
ANR	3987332	Argument	1		3987294	1					
ANR	3987333	PrimaryExpression	1		3987294	0					
ANR	3987334	IdentifierDeclStatement	zval * p = end + num_args ;	242:2:9733:9757	3987294	1	True				
ANR	3987335	IdentifierDecl	* p = end + num_args		3987294	0					
ANR	3987336	IdentifierDeclType	zval *		3987294	0					
ANR	3987337	Identifier	p		3987294	1					
ANR	3987338	AssignmentExpression	* p = end + num_args		3987294	2		=			
ANR	3987339	Identifier	p		3987294	0					
ANR	3987340	AdditiveExpression	end + num_args		3987294	1		+			
ANR	3987341	Identifier	end		3987294	0					
ANR	3987342	Identifier	num_args		3987294	1					
ANR	3987343	DoStatement	do		3987294	2					
ANR	3987344	CompoundStatement		8:5:152:152	3987294	0					
ANR	3987345	ExpressionStatement	p --	245:3:9770:9773	3987294	0	True				
ANR	3987346	PostIncDecOperationExpression	p --		3987294	0					
ANR	3987347	Identifier	p		3987294	0					
ANR	3987348	IncDec	--		3987294	1					
ANR	3987349	IfStatement	if ( Z_REFCOUNTED_P ( p ) )		3987294	1					
ANR	3987350	Condition	Z_REFCOUNTED_P ( p )	246:7:9782:9798	3987294	0	True				
ANR	3987351	CallExpression	Z_REFCOUNTED_P ( p )		3987294	0					
ANR	3987352	Callee	Z_REFCOUNTED_P		3987294	0					
ANR	3987353	Identifier	Z_REFCOUNTED_P		3987294	0					
ANR	3987354	ArgumentList	p		3987294	1					
ANR	3987355	Argument	p		3987294	0					
ANR	3987356	Identifier	p		3987294	0					
ANR	3987357	CompoundStatement		10:26:188:188	3987294	1					
ANR	3987358	IfStatement	if ( ! Z_DELREF_P ( p ) )		3987294	0					
ANR	3987359	Condition	! Z_DELREF_P ( p )	247:8:9811:9824	3987294	0	True				
ANR	3987360	UnaryOperationExpression	! Z_DELREF_P ( p )		3987294	0					
ANR	3987361	UnaryOperator	!		3987294	0					
ANR	3987362	CallExpression	Z_DELREF_P ( p )		3987294	1					
ANR	3987363	Callee	Z_DELREF_P		3987294	0					
ANR	3987364	Identifier	Z_DELREF_P		3987294	0					
ANR	3987365	ArgumentList	p		3987294	1					
ANR	3987366	Argument	p		3987294	0					
ANR	3987367	Identifier	p		3987294	0					
ANR	3987368	CompoundStatement		12:5:221:256	3987294	1					
ANR	3987369	IdentifierDeclStatement	zend_refcounted * r = Z_COUNTED_P ( p ) ;	248:5:9834:9869	3987294	0	True				
ANR	3987370	IdentifierDecl	* r = Z_COUNTED_P ( p )		3987294	0					
ANR	3987371	IdentifierDeclType	zend_refcounted *		3987294	0					
ANR	3987372	Identifier	r		3987294	1					
ANR	3987373	AssignmentExpression	* r = Z_COUNTED_P ( p )		3987294	2		=			
ANR	3987374	Identifier	r		3987294	0					
ANR	3987375	CallExpression	Z_COUNTED_P ( p )		3987294	1					
ANR	3987376	Callee	Z_COUNTED_P		3987294	0					
ANR	3987377	Identifier	Z_COUNTED_P		3987294	0					
ANR	3987378	ArgumentList	p		3987294	1					
ANR	3987379	Argument	p		3987294	0					
ANR	3987380	Identifier	p		3987294	0					
ANR	3987381	ExpressionStatement	ZVAL_NULL ( p )	249:5:9876:9888	3987294	1	True				
ANR	3987382	CallExpression	ZVAL_NULL ( p )		3987294	0					
ANR	3987383	Callee	ZVAL_NULL		3987294	0					
ANR	3987384	Identifier	ZVAL_NULL		3987294	0					
ANR	3987385	ArgumentList	p		3987294	1					
ANR	3987386	Argument	p		3987294	0					
ANR	3987387	Identifier	p		3987294	0					
ANR	3987388	ExpressionStatement	zval_dtor_func_for_ptr ( r )	250:5:9895:9920	3987294	2	True				
ANR	3987389	CallExpression	zval_dtor_func_for_ptr ( r )		3987294	0					
ANR	3987390	Callee	zval_dtor_func_for_ptr		3987294	0					
ANR	3987391	Identifier	zval_dtor_func_for_ptr		3987294	0					
ANR	3987392	ArgumentList	r		3987294	1					
ANR	3987393	Argument	r		3987294	0					
ANR	3987394	Identifier	r		3987294	0					
ANR	3987395	Condition	p != end	253:11:9944:9951	3987294	1	True				
ANR	3987396	EqualityExpression	p != end		3987294	0		!=			
ANR	3987397	Identifier	p		3987294	0					
ANR	3987398	Identifier	end		3987294	1					
ANR	3987399	ReturnType	static zend_always_inline void		3987294	1					
ANR	3987400	Identifier	zend_vm_stack_free_args		3987294	2					
ANR	3987401	ParameterList	zend_execute_data * call		3987294	3					
ANR	3987402	Parameter	zend_execute_data * call	236:55:9587:9609	3987294	0	True				
ANR	3987403	ParameterType	zend_execute_data *		3987294	0					
ANR	3987404	Identifier	call		3987294	1					
ANR	3987405	CFGEntryNode	ENTRY		3987294		True				
ANR	3987406	CFGExitNode	EXIT		3987294		True				
ANR	3987407	Symbol	call		3987294						
ANR	3987408	Symbol	p		3987294						
ANR	3987409	Symbol	r		3987294						
ANR	3987410	Symbol	Z_COUNTED_P		3987294						
ANR	3987411	Symbol	num_args		3987294						
ANR	3987412	Symbol	ZEND_CALL_ARG		3987294						
ANR	3987413	Symbol	Z_DELREF_P		3987294						
ANR	3987414	Symbol	ZEND_CALL_NUM_ARGS		3987294						
ANR	3987415	Symbol	end		3987294						
ANR	3987416	Symbol	Z_REFCOUNTED_P		3987294						
ANR	3987417	Symbol	EXPECTED		3987294						
ANR	3987418	Function	zend_vm_stack_free_call_frame_ex	257:0:9961:10401							
ANR	3987419	FunctionDef	"zend_vm_stack_free_call_frame_ex (uint32_t call_info , zend_execute_data * call)"		3987418	0					
ANR	3987420	CompoundStatement		258:0:10070:10401	3987418	0					
ANR	3987421	ExpressionStatement	ZEND_ASSERT_VM_STACK_GLOBAL	259:1:10073:10100	3987418	0	True				
ANR	3987422	Identifier	ZEND_ASSERT_VM_STACK_GLOBAL		3987418	0					
ANR	3987423	IfStatement	if ( UNEXPECTED ( call_info & ZEND_CALL_ALLOCATED ) )		3987418	1					
ANR	3987424	Condition	UNEXPECTED ( call_info & ZEND_CALL_ALLOCATED )	261:5:10108:10150	3987418	0	True				
ANR	3987425	CallExpression	UNEXPECTED ( call_info & ZEND_CALL_ALLOCATED )		3987418	0					
ANR	3987426	Callee	UNEXPECTED		3987418	0					
ANR	3987427	Identifier	UNEXPECTED		3987418	0					
ANR	3987428	ArgumentList	call_info & ZEND_CALL_ALLOCATED		3987418	1					
ANR	3987429	Argument	call_info & ZEND_CALL_ALLOCATED		3987418	0					
ANR	3987430	BitAndExpression	call_info & ZEND_CALL_ALLOCATED		3987418	0		&			
ANR	3987431	Identifier	call_info		3987418	0					
ANR	3987432	Identifier	ZEND_CALL_ALLOCATED		3987418	1					
ANR	3987433	CompoundStatement		7:2:121:149	3987418	1					
ANR	3987434	IdentifierDeclStatement	zend_vm_stack p = EG ( vm_stack ) ;	262:2:10157:10187	3987418	0	True				
ANR	3987435	IdentifierDecl	p = EG ( vm_stack )		3987418	0					
ANR	3987436	IdentifierDeclType	zend_vm_stack		3987418	0					
ANR	3987437	Identifier	p		3987418	1					
ANR	3987438	AssignmentExpression	p = EG ( vm_stack )		3987418	2		=			
ANR	3987439	Identifier	p		3987418	0					
ANR	3987440	CallExpression	EG ( vm_stack )		3987418	1					
ANR	3987441	Callee	EG		3987418	0					
ANR	3987442	Identifier	EG		3987418	0					
ANR	3987443	ArgumentList	vm_stack		3987418	1					
ANR	3987444	Argument	vm_stack		3987418	0					
ANR	3987445	Identifier	vm_stack		3987418	0					
ANR	3987446	IdentifierDeclStatement	zend_vm_stack prev = p -> prev ;	264:2:10192:10220	3987418	1	True				
ANR	3987447	IdentifierDecl	prev = p -> prev		3987418	0					
ANR	3987448	IdentifierDeclType	zend_vm_stack		3987418	0					
ANR	3987449	Identifier	prev		3987418	1					
ANR	3987450	AssignmentExpression	prev = p -> prev		3987418	2		=			
ANR	3987451	Identifier	prev		3987418	0					
ANR	3987452	PtrMemberAccess	p -> prev		3987418	1					
ANR	3987453	Identifier	p		3987418	0					
ANR	3987454	Identifier	prev		3987418	1					
ANR	3987455	ExpressionStatement	EG ( vm_stack_top ) = prev -> top	266:2:10225:10253	3987418	2	True				
ANR	3987456	AssignmentExpression	EG ( vm_stack_top ) = prev -> top		3987418	0		=			
ANR	3987457	CallExpression	EG ( vm_stack_top )		3987418	0					
ANR	3987458	Callee	EG		3987418	0					
ANR	3987459	Identifier	EG		3987418	0					
ANR	3987460	ArgumentList	vm_stack_top		3987418	1					
ANR	3987461	Argument	vm_stack_top		3987418	0					
ANR	3987462	Identifier	vm_stack_top		3987418	0					
ANR	3987463	PtrMemberAccess	prev -> top		3987418	1					
ANR	3987464	Identifier	prev		3987418	0					
ANR	3987465	Identifier	top		3987418	1					
ANR	3987466	ExpressionStatement	EG ( vm_stack_end ) = prev -> end	267:2:10257:10285	3987418	3	True				
ANR	3987467	AssignmentExpression	EG ( vm_stack_end ) = prev -> end		3987418	0		=			
ANR	3987468	CallExpression	EG ( vm_stack_end )		3987418	0					
ANR	3987469	Callee	EG		3987418	0					
ANR	3987470	Identifier	EG		3987418	0					
ANR	3987471	ArgumentList	vm_stack_end		3987418	1					
ANR	3987472	Argument	vm_stack_end		3987418	0					
ANR	3987473	Identifier	vm_stack_end		3987418	0					
ANR	3987474	PtrMemberAccess	prev -> end		3987418	1					
ANR	3987475	Identifier	prev		3987418	0					
ANR	3987476	Identifier	end		3987418	1					
ANR	3987477	ExpressionStatement	EG ( vm_stack ) = prev	268:2:10289:10308	3987418	4	True				
ANR	3987478	AssignmentExpression	EG ( vm_stack ) = prev		3987418	0		=			
ANR	3987479	CallExpression	EG ( vm_stack )		3987418	0					
ANR	3987480	Callee	EG		3987418	0					
ANR	3987481	Identifier	EG		3987418	0					
ANR	3987482	ArgumentList	vm_stack		3987418	1					
ANR	3987483	Argument	vm_stack		3987418	0					
ANR	3987484	Identifier	vm_stack		3987418	0					
ANR	3987485	Identifier	prev		3987418	1					
ANR	3987486	ExpressionStatement	efree ( p )	269:2:10312:10320	3987418	5	True				
ANR	3987487	CallExpression	efree ( p )		3987418	0					
ANR	3987488	Callee	efree		3987418	0					
ANR	3987489	Identifier	efree		3987418	0					
ANR	3987490	ArgumentList	p		3987418	1					
ANR	3987491	Argument	p		3987418	0					
ANR	3987492	Identifier	p		3987418	0					
ANR	3987493	ElseStatement	else		3987418	0					
ANR	3987494	CompoundStatement		14:8:260:260	3987418	0					
ANR	3987495	ExpressionStatement	EG ( vm_stack_top ) = ( zval * ) call	272:2:10335:10365	3987418	0	True				
ANR	3987496	AssignmentExpression	EG ( vm_stack_top ) = ( zval * ) call		3987418	0		=			
ANR	3987497	CallExpression	EG ( vm_stack_top )		3987418	0					
ANR	3987498	Callee	EG		3987418	0					
ANR	3987499	Identifier	EG		3987418	0					
ANR	3987500	ArgumentList	vm_stack_top		3987418	1					
ANR	3987501	Argument	vm_stack_top		3987418	0					
ANR	3987502	Identifier	vm_stack_top		3987418	0					
ANR	3987503	CastExpression	( zval * ) call		3987418	1					
ANR	3987504	CastTarget	zval *		3987418	0					
ANR	3987505	Identifier	call		3987418	1					
ANR	3987506	ExpressionStatement	ZEND_ASSERT_VM_STACK_GLOBAL	275:1:10372:10399	3987418	2	True				
ANR	3987507	Identifier	ZEND_ASSERT_VM_STACK_GLOBAL		3987418	0					
ANR	3987508	ReturnType	static zend_always_inline void		3987418	1					
ANR	3987509	Identifier	zend_vm_stack_free_call_frame_ex		3987418	2					
ANR	3987510	ParameterList	"uint32_t call_info , zend_execute_data * call"		3987418	3					
ANR	3987511	Parameter	uint32_t call_info	257:64:10025:10042	3987418	0	True				
ANR	3987512	ParameterType	uint32_t		3987418	0					
ANR	3987513	Identifier	call_info		3987418	1					
ANR	3987514	Parameter	zend_execute_data * call	257:84:10045:10067	3987418	1	True				
ANR	3987515	ParameterType	zend_execute_data *		3987418	0					
ANR	3987516	Identifier	call		3987418	1					
ANR	3987517	CFGEntryNode	ENTRY		3987418		True				
ANR	3987518	CFGExitNode	EXIT		3987418		True				
ANR	3987519	Symbol	p -> prev		3987418						
ANR	3987520	Symbol	prev -> end		3987418						
ANR	3987521	Symbol	EG		3987418						
ANR	3987522	Symbol	prev		3987418						
ANR	3987523	Symbol	* prev		3987418						
ANR	3987524	Symbol	prev -> top		3987418						
ANR	3987525	Symbol	ZEND_CALL_ALLOCATED		3987418						
ANR	3987526	Symbol	call_info		3987418						
ANR	3987527	Symbol	call		3987418						
ANR	3987528	Symbol	UNEXPECTED		3987418						
ANR	3987529	Symbol	p		3987418						
ANR	3987530	Symbol	vm_stack_top		3987418						
ANR	3987531	Symbol	vm_stack		3987418						
ANR	3987532	Symbol	* p		3987418						
ANR	3987533	Symbol	vm_stack_end		3987418						
ANR	3987534	Function	zend_vm_stack_free_call_frame	278:0:10404:10555							
ANR	3987535	FunctionDef	zend_vm_stack_free_call_frame (zend_execute_data * call)		3987534	0					
ANR	3987536	CompoundStatement		279:0:10490:10555	3987534	0					
ANR	3987537	ExpressionStatement	"zend_vm_stack_free_call_frame_ex ( ZEND_CALL_INFO ( call ) , call )"	280:1:10493:10553	3987534	0	True				
ANR	3987538	CallExpression	"zend_vm_stack_free_call_frame_ex ( ZEND_CALL_INFO ( call ) , call )"		3987534	0					
ANR	3987539	Callee	zend_vm_stack_free_call_frame_ex		3987534	0					
ANR	3987540	Identifier	zend_vm_stack_free_call_frame_ex		3987534	0					
ANR	3987541	ArgumentList	ZEND_CALL_INFO ( call )		3987534	1					
ANR	3987542	Argument	ZEND_CALL_INFO ( call )		3987534	0					
ANR	3987543	CallExpression	ZEND_CALL_INFO ( call )		3987534	0					
ANR	3987544	Callee	ZEND_CALL_INFO		3987534	0					
ANR	3987545	Identifier	ZEND_CALL_INFO		3987534	0					
ANR	3987546	ArgumentList	call		3987534	1					
ANR	3987547	Argument	call		3987534	0					
ANR	3987548	Identifier	call		3987534	0					
ANR	3987549	Argument	call		3987534	1					
ANR	3987550	Identifier	call		3987534	0					
ANR	3987551	ReturnType	static zend_always_inline void		3987534	1					
ANR	3987552	Identifier	zend_vm_stack_free_call_frame		3987534	2					
ANR	3987553	ParameterList	zend_execute_data * call		3987534	3					
ANR	3987554	Parameter	zend_execute_data * call	278:61:10465:10487	3987534	0	True				
ANR	3987555	ParameterType	zend_execute_data *		3987534	0					
ANR	3987556	Identifier	call		3987534	1					
ANR	3987557	CFGEntryNode	ENTRY		3987534		True				
ANR	3987558	CFGExitNode	EXIT		3987534		True				
ANR	3987559	Symbol	call		3987534						
ANR	3987560	Symbol	ZEND_CALL_INFO		3987534						
ANR	3987561	DeclStmt									
ANR	3987562	Decl							const char	const char * ( const char * * space )	get_active_class_name
ANR	3987563	DeclStmt									
ANR	3987564	Decl							const char	const char * ( void )	get_active_function_name
ANR	3987565	DeclStmt									
ANR	3987566	Decl							const char	const char * ( void )	zend_get_executed_filename
ANR	3987567	DeclStmt									
ANR	3987568	Decl							ZEND_API zend_string	ZEND_API zend_string * ( void )	zend_get_executed_filename_ex
ANR	3987569	DeclStmt									
ANR	3987570	Decl							ZEND_API uint	ZEND_API uint ( void )	zend_get_executed_lineno
ANR	3987571	DeclStmt									
ANR	3987572	Decl							ZEND_API zend_bool	ZEND_API zend_bool ( void )	zend_is_executing
ANR	3987573	DeclStmt									
ANR	3987574	Decl							ZEND_API void	"ZEND_API void ( zend_long seconds , int reset_signals )"	zend_set_timeout
ANR	3987575	DeclStmt									
ANR	3987576	Decl							ZEND_API void	ZEND_API void ( void )	zend_unset_timeout
ANR	3987577	DeclStmt									
ANR	3987578	Decl							ZEND_API void	ZEND_API void ( int dummy )	zend_timeout
ANR	3987579	DeclStmt									
ANR	3987580	Decl							ZEND_API zend_class_entry	"ZEND_API zend_class_entry * ( zend_string * class_name , int fetch_type )"	zend_fetch_class
ANR	3987581	DeclStmt									
ANR	3987582	Decl							ZEND_API zend_class_entry	"ZEND_API zend_class_entry * ( zend_string * class_name , const zval * key , int fetch_type )"	zend_fetch_class_by_name
ANR	3987583	DeclStmt									
ANR	3987584	Decl							void	void ( zend_class_entry * ce )	zend_verify_abstract_class
ANR	3987585	DeclStmt									
ANR	3987586	Decl							ZEND_API void	"ZEND_API void ( zval * result , zval * container , zval * dim )"	zend_fetch_dimension_by_zval
ANR	3987587	DeclStmt									
ANR	3987588	Decl							ZEND_API zval	"ZEND_API zval * ( const zend_execute_data * execute_data_ptr , uint32_t var )"	zend_get_compiled_variable_value
ANR	3987589	DeclStmt									
ANR	3987590	Decl							ZEND_API int	"ZEND_API int ( zend_uchar opcode , user_opcode_handler_t handler )"	zend_set_user_opcode_handler
ANR	3987591	DeclStmt									
ANR	3987592	Decl							ZEND_API user_opcode_handler_t	ZEND_API user_opcode_handler_t ( zend_uchar opcode )	zend_get_user_opcode_handler
ANR	3987593	DeclStmt									
ANR	3987594	Decl							zval	zval *	zend_free_op
ANR	3987595	DeclStmt									
ANR	3987596	Decl							ZEND_API zval	"ZEND_API zval * ( int op_type , const znode_op * node , const zend_execute_data * execute_data , zend_free_op * should_free , int type )"	zend_get_zval_ptr
ANR	3987597	DeclStmt									
ANR	3987598	Decl							ZEND_API void	ZEND_API void ( zend_array * symbol_table )	zend_clean_and_cache_symbol_table
ANR	3987599	DeclStmt									
ANR	3987600	Decl							void	void ( zend_execute_data * execute_data )	zend_free_compiled_variables
ANR	3987601	DeclStmt									
ANR	3987602	Decl							void	"void ( zend_execute_data * execute_data , uint32_t op_num , uint32_t catch_op_num )"	zend_cleanup_unfinished_execution
ANR	3987603	DeclStmt									
ANR	3987604	Decl							void	void * *	slot
