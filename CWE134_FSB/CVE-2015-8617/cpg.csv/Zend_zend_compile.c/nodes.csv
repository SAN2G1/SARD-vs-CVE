command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	89325	File	data/converged/CVE-2015-8617_php-src/Zend_zend_compile.c								
ANR	89326	DeclStmt									
ANR	89327	Decl							target	target	_type
ANR	89328	DeclStmt									
ANR	89329	Decl							src	src	_type
ANR	89330	ClassDef	_zend_loop_var	57:8:2214:2388							
ANR	89331	DeclStmt									
ANR	89332	Decl							zend_uchar	zend_uchar	opcode
ANR	89333	DeclStmt									
ANR	89334	Decl							zend_uchar	zend_uchar	var_type
ANR	89335	DeclStmt									
ANR	89336	Decl							uint32_t	uint32_t	var_num
ANR	89337	ClassDef	<unnamed>	61:1:2302:2371							
ANR	89338	DeclStmt									
ANR	89339	Decl							uint32_t	uint32_t	try_catch_offset
ANR	89340	DeclStmt									
ANR	89341	Decl							uint32_t	uint32_t	brk_cont_offset
ANR	89342	DeclStmt									
ANR	89343	Decl									u
ANR	89344	DeclStmt									
ANR	89345	Decl							_zend_loop_var	_zend_loop_var	zend_loop_var
ANR	89346	Function	zend_alloc_cache_slot	67:0:2391:2607							
ANR	89347	FunctionDef	zend_alloc_cache_slot (uint32_t literal)		89346	0					
ANR	89348	CompoundStatement		67:59:2450:2607	89346	0					
ANR	89349	IdentifierDeclStatement	zend_op_array * op_array = CG ( active_op_array ) ;	68:1:2453:2498	89346	0	True				
ANR	89350	IdentifierDecl	* op_array = CG ( active_op_array )		89346	0					
ANR	89351	IdentifierDeclType	zend_op_array *		89346	0					
ANR	89352	Identifier	op_array		89346	1					
ANR	89353	AssignmentExpression	* op_array = CG ( active_op_array )		89346	2		=			
ANR	89354	Identifier	op_array		89346	0					
ANR	89355	CallExpression	CG ( active_op_array )		89346	1					
ANR	89356	Callee	CG		89346	0					
ANR	89357	Identifier	CG		89346	0					
ANR	89358	ArgumentList	active_op_array		89346	1					
ANR	89359	Argument	active_op_array		89346	0					
ANR	89360	Identifier	active_op_array		89346	0					
ANR	89361	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ literal ] ) = op_array -> cache_size	69:1:2501:2565	89346	1	True				
ANR	89362	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ literal ] ) = op_array -> cache_size		89346	0		=			
ANR	89363	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ literal ] )		89346	0					
ANR	89364	Callee	Z_CACHE_SLOT		89346	0					
ANR	89365	Identifier	Z_CACHE_SLOT		89346	0					
ANR	89366	ArgumentList	op_array -> literals [ literal ]		89346	1					
ANR	89367	Argument	op_array -> literals [ literal ]		89346	0					
ANR	89368	ArrayIndexing	op_array -> literals [ literal ]		89346	0					
ANR	89369	PtrMemberAccess	op_array -> literals		89346	0					
ANR	89370	Identifier	op_array		89346	0					
ANR	89371	Identifier	literals		89346	1					
ANR	89372	Identifier	literal		89346	1					
ANR	89373	PtrMemberAccess	op_array -> cache_size		89346	1					
ANR	89374	Identifier	op_array		89346	0					
ANR	89375	Identifier	cache_size		89346	1					
ANR	89376	ExpressionStatement	op_array -> cache_size += sizeof ( void * )	70:1:2568:2605	89346	2	True				
ANR	89377	AssignmentExpression	op_array -> cache_size += sizeof ( void * )		89346	0		+=			
ANR	89378	PtrMemberAccess	op_array -> cache_size		89346	0					
ANR	89379	Identifier	op_array		89346	0					
ANR	89380	Identifier	cache_size		89346	1					
ANR	89381	SizeofExpression	sizeof ( void * )		89346	1					
ANR	89382	Sizeof	sizeof		89346	0					
ANR	89383	SizeofOperand	void *		89346	1					
ANR	89384	ReturnType	static inline void		89346	1					
ANR	89385	Identifier	zend_alloc_cache_slot		89346	2					
ANR	89386	ParameterList	uint32_t literal		89346	3					
ANR	89387	Parameter	uint32_t literal	67:41:2432:2447	89346	0	True				
ANR	89388	ParameterType	uint32_t		89346	0					
ANR	89389	Identifier	literal		89346	1					
ANR	89390	CFGEntryNode	ENTRY		89346		True				
ANR	89391	CFGExitNode	EXIT		89346		True				
ANR	89392	Symbol	CG		89346						
ANR	89393	Symbol	op_array -> literals		89346						
ANR	89394	Symbol	active_op_array		89346						
ANR	89395	Symbol	* literal		89346						
ANR	89396	Symbol	Z_CACHE_SLOT		89346						
ANR	89397	Symbol	op_array -> cache_size		89346						
ANR	89398	Symbol	* * op_array		89346						
ANR	89399	Symbol	op_array		89346						
ANR	89400	Symbol	* op_array -> literals		89346						
ANR	89401	Symbol	* op_array		89346						
ANR	89402	Symbol	literal		89346						
ANR	89403	Function	zend_alloc_polymorphic_cache_slot	75:0:2649:2907							
ANR	89404	FunctionDef	zend_alloc_polymorphic_cache_slot (uint32_t literal)		89403	0					
ANR	89405	CompoundStatement		75:71:2720:2907	89403	0					
ANR	89406	IdentifierDeclStatement	zend_op_array * op_array = CG ( active_op_array ) ;	76:1:2723:2768	89403	0	True				
ANR	89407	IdentifierDecl	* op_array = CG ( active_op_array )		89403	0					
ANR	89408	IdentifierDeclType	zend_op_array *		89403	0					
ANR	89409	Identifier	op_array		89403	1					
ANR	89410	AssignmentExpression	* op_array = CG ( active_op_array )		89403	2		=			
ANR	89411	Identifier	op_array		89403	0					
ANR	89412	CallExpression	CG ( active_op_array )		89403	1					
ANR	89413	Callee	CG		89403	0					
ANR	89414	Identifier	CG		89403	0					
ANR	89415	ArgumentList	active_op_array		89403	1					
ANR	89416	Argument	active_op_array		89403	0					
ANR	89417	Identifier	active_op_array		89403	0					
ANR	89418	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ literal ] ) = op_array -> cache_size	77:1:2771:2835	89403	1	True				
ANR	89419	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ literal ] ) = op_array -> cache_size		89403	0		=			
ANR	89420	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ literal ] )		89403	0					
ANR	89421	Callee	Z_CACHE_SLOT		89403	0					
ANR	89422	Identifier	Z_CACHE_SLOT		89403	0					
ANR	89423	ArgumentList	op_array -> literals [ literal ]		89403	1					
ANR	89424	Argument	op_array -> literals [ literal ]		89403	0					
ANR	89425	ArrayIndexing	op_array -> literals [ literal ]		89403	0					
ANR	89426	PtrMemberAccess	op_array -> literals		89403	0					
ANR	89427	Identifier	op_array		89403	0					
ANR	89428	Identifier	literals		89403	1					
ANR	89429	Identifier	literal		89403	1					
ANR	89430	PtrMemberAccess	op_array -> cache_size		89403	1					
ANR	89431	Identifier	op_array		89403	0					
ANR	89432	Identifier	cache_size		89403	1					
ANR	89433	ExpressionStatement	op_array -> cache_size += POLYMORPHIC_CACHE_SLOT_SIZE * sizeof ( void * )	78:1:2838:2905	89403	2	True				
ANR	89434	AssignmentExpression	op_array -> cache_size += POLYMORPHIC_CACHE_SLOT_SIZE * sizeof ( void * )		89403	0		+=			
ANR	89435	PtrMemberAccess	op_array -> cache_size		89403	0					
ANR	89436	Identifier	op_array		89403	0					
ANR	89437	Identifier	cache_size		89403	1					
ANR	89438	MultiplicativeExpression	POLYMORPHIC_CACHE_SLOT_SIZE * sizeof ( void * )		89403	1		*			
ANR	89439	Identifier	POLYMORPHIC_CACHE_SLOT_SIZE		89403	0					
ANR	89440	SizeofExpression	sizeof ( void * )		89403	1					
ANR	89441	Sizeof	sizeof		89403	0					
ANR	89442	SizeofOperand	void *		89403	1					
ANR	89443	ReturnType	static inline void		89403	1					
ANR	89444	Identifier	zend_alloc_polymorphic_cache_slot		89403	2					
ANR	89445	ParameterList	uint32_t literal		89403	3					
ANR	89446	Parameter	uint32_t literal	75:53:2702:2717	89403	0	True				
ANR	89447	ParameterType	uint32_t		89403	0					
ANR	89448	Identifier	literal		89403	1					
ANR	89449	CFGEntryNode	ENTRY		89403		True				
ANR	89450	CFGExitNode	EXIT		89403		True				
ANR	89451	Symbol	CG		89403						
ANR	89452	Symbol	op_array -> literals		89403						
ANR	89453	Symbol	active_op_array		89403						
ANR	89454	Symbol	* literal		89403						
ANR	89455	Symbol	POLYMORPHIC_CACHE_SLOT_SIZE		89403						
ANR	89456	Symbol	Z_CACHE_SLOT		89403						
ANR	89457	Symbol	op_array -> cache_size		89403						
ANR	89458	Symbol	* * op_array		89403						
ANR	89459	Symbol	op_array		89403						
ANR	89460	Symbol	* op_array		89403						
ANR	89461	Symbol	* op_array -> literals		89403						
ANR	89462	Symbol	literal		89403						
ANR	89463	DeclStmt									
ANR	89464	Decl							"ZEND_API zend_op_array * ( * ) ( zend_file_handle * file_handle , int type )"	"ZEND_API zend_op_array * ( * ) ( zend_file_handle * file_handle , int type )"	zend_compile_file
ANR	89465	DeclStmt									
ANR	89466	Decl							"ZEND_API zend_op_array * ( * ) ( zval * source_string , char * filename )"	"ZEND_API zend_op_array * ( * ) ( zval * source_string , char * filename )"	zend_compile_string
ANR	89467	DeclStmt									
ANR	89468	Decl							ZEND_API zend_compiler_globals	ZEND_API zend_compiler_globals	compiler_globals
ANR	89469	DeclStmt									
ANR	89470	Decl							ZEND_API zend_executor_globals	ZEND_API zend_executor_globals	executor_globals
ANR	89471	Function	zend_destroy_property_info_internal	89:0:3201:3387							
ANR	89472	FunctionDef	zend_destroy_property_info_internal (zval * zv)		89471	0					
ANR	89473	CompoundStatement		90:0:3269:3387	89471	0					
ANR	89474	IdentifierDeclStatement	zend_property_info * property_info = Z_PTR_P ( zv ) ;	91:1:3272:3319	89471	0	True				
ANR	89475	IdentifierDecl	* property_info = Z_PTR_P ( zv )		89471	0					
ANR	89476	IdentifierDeclType	zend_property_info *		89471	0					
ANR	89477	Identifier	property_info		89471	1					
ANR	89478	AssignmentExpression	* property_info = Z_PTR_P ( zv )		89471	2		=			
ANR	89479	Identifier	property_info		89471	0					
ANR	89480	CallExpression	Z_PTR_P ( zv )		89471	1					
ANR	89481	Callee	Z_PTR_P		89471	0					
ANR	89482	Identifier	Z_PTR_P		89471	0					
ANR	89483	ArgumentList	zv		89471	1					
ANR	89484	Argument	zv		89471	0					
ANR	89485	Identifier	zv		89471	0					
ANR	89486	ExpressionStatement	zend_string_release ( property_info -> name )	93:1:3323:3363	89471	1	True				
ANR	89487	CallExpression	zend_string_release ( property_info -> name )		89471	0					
ANR	89488	Callee	zend_string_release		89471	0					
ANR	89489	Identifier	zend_string_release		89471	0					
ANR	89490	ArgumentList	property_info -> name		89471	1					
ANR	89491	Argument	property_info -> name		89471	0					
ANR	89492	PtrMemberAccess	property_info -> name		89471	0					
ANR	89493	Identifier	property_info		89471	0					
ANR	89494	Identifier	name		89471	1					
ANR	89495	ExpressionStatement	free ( property_info )	94:1:3366:3385	89471	2	True				
ANR	89496	CallExpression	free ( property_info )		89471	0					
ANR	89497	Callee	free		89471	0					
ANR	89498	Identifier	free		89471	0					
ANR	89499	ArgumentList	property_info		89471	1					
ANR	89500	Argument	property_info		89471	0					
ANR	89501	Identifier	property_info		89471	0					
ANR	89502	ReturnType	static void		89471	1					
ANR	89503	Identifier	zend_destroy_property_info_internal		89471	2					
ANR	89504	ParameterList	zval * zv		89471	3					
ANR	89505	Parameter	zval * zv	89:48:3249:3256	89471	0	True				
ANR	89506	ParameterType	zval *		89471	0					
ANR	89507	Identifier	zv		89471	1					
ANR	89508	CFGEntryNode	ENTRY		89471		True				
ANR	89509	CFGExitNode	EXIT		89471		True				
ANR	89510	Symbol	property_info		89471						
ANR	89511	Symbol	Z_PTR_P		89471						
ANR	89512	Symbol	* property_info		89471						
ANR	89513	Symbol	property_info -> name		89471						
ANR	89514	Symbol	zv		89471						
ANR	89515	Function	zend_new_interned_string_safe	98:0:3400:3688							
ANR	89516	FunctionDef	zend_new_interned_string_safe (zend_string * str)		89515	0					
ANR	89517	CompoundStatement		98:78:3478:3688	89515	0					
ANR	89518	IdentifierDeclStatement	zend_string * interned_str ;	99:1:3481:3506	89515	0	True				
ANR	89519	IdentifierDecl	* interned_str		89515	0					
ANR	89520	IdentifierDeclType	zend_string *		89515	0					
ANR	89521	Identifier	interned_str		89515	1					
ANR	89522	ExpressionStatement	zend_string_addref ( str )	101:1:3510:3533	89515	1	True				
ANR	89523	CallExpression	zend_string_addref ( str )		89515	0					
ANR	89524	Callee	zend_string_addref		89515	0					
ANR	89525	Identifier	zend_string_addref		89515	0					
ANR	89526	ArgumentList	str		89515	1					
ANR	89527	Argument	str		89515	0					
ANR	89528	Identifier	str		89515	0					
ANR	89529	ExpressionStatement	interned_str = zend_new_interned_string ( str )	102:1:3536:3580	89515	2	True				
ANR	89530	AssignmentExpression	interned_str = zend_new_interned_string ( str )		89515	0		=			
ANR	89531	Identifier	interned_str		89515	0					
ANR	89532	CallExpression	zend_new_interned_string ( str )		89515	1					
ANR	89533	Callee	zend_new_interned_string		89515	0					
ANR	89534	Identifier	zend_new_interned_string		89515	0					
ANR	89535	ArgumentList	str		89515	1					
ANR	89536	Argument	str		89515	0					
ANR	89537	Identifier	str		89515	0					
ANR	89538	IfStatement	if ( str != interned_str )		89515	3					
ANR	89539	Condition	str != interned_str	103:5:3587:3605	89515	0	True				
ANR	89540	EqualityExpression	str != interned_str		89515	0		!=			
ANR	89541	Identifier	str		89515	0					
ANR	89542	Identifier	interned_str		89515	1					
ANR	89543	CompoundStatement		6:26:129:129	89515	1					
ANR	89544	ReturnStatement	return interned_str ;	104:2:3612:3631	89515	0	True				
ANR	89545	Identifier	interned_str		89515	0					
ANR	89546	ElseStatement	else		89515	0					
ANR	89547	CompoundStatement		8:8:162:162	89515	0					
ANR	89548	ExpressionStatement	zend_string_release ( str )	106:2:3645:3669	89515	0	True				
ANR	89549	CallExpression	zend_string_release ( str )		89515	0					
ANR	89550	Callee	zend_string_release		89515	0					
ANR	89551	Identifier	zend_string_release		89515	0					
ANR	89552	ArgumentList	str		89515	1					
ANR	89553	Argument	str		89515	0					
ANR	89554	Identifier	str		89515	0					
ANR	89555	ReturnStatement	return str ;	107:2:3673:3683	89515	1	True				
ANR	89556	Identifier	str		89515	0					
ANR	89557	ReturnType	static zend_string *		89515	1					
ANR	89558	Identifier	zend_new_interned_string_safe		89515	2					
ANR	89559	ParameterList	zend_string * str		89515	3					
ANR	89560	Parameter	zend_string * str	98:50:3450:3465	89515	0	True				
ANR	89561	ParameterType	zend_string *		89515	0					
ANR	89562	Identifier	str		89515	1					
ANR	89563	CFGEntryNode	ENTRY		89515		True				
ANR	89564	CFGExitNode	EXIT		89515		True				
ANR	89565	Symbol	str		89515						
ANR	89566	Symbol	interned_str		89515						
ANR	89567	Symbol	zend_new_interned_string		89515						
ANR	89568	Function	zend_build_runtime_definition_key	112:0:3701:4285							
ANR	89569	FunctionDef	"zend_build_runtime_definition_key (zend_string * name , unsigned char * lex_pos)"		89568	0					
ANR	89570	CompoundStatement		113:0:3808:4285	89568	0					
ANR	89571	IdentifierDeclStatement	zend_string * result ;	114:1:3811:3830	89568	0	True				
ANR	89572	IdentifierDecl	* result		89568	0					
ANR	89573	IdentifierDeclType	zend_string *		89568	0					
ANR	89574	Identifier	result		89568	1					
ANR	89575	IdentifierDeclStatement	char char_pos_buf [ 32 ] ;	115:1:3833:3854	89568	1	True				
ANR	89576	IdentifierDecl	char_pos_buf [ 32 ]		89568	0					
ANR	89577	IdentifierDeclType	char [ 32 ]		89568	0					
ANR	89578	Identifier	char_pos_buf		89568	1					
ANR	89579	PrimaryExpression	32		89568	2					
ANR	89580	IdentifierDeclStatement	"size_t char_pos_len = zend_sprintf ( char_pos_buf , ""%p"" , lex_pos ) ;"	116:1:3857:3920	89568	2	True				
ANR	89581	IdentifierDecl	"char_pos_len = zend_sprintf ( char_pos_buf , ""%p"" , lex_pos )"		89568	0					
ANR	89582	IdentifierDeclType	size_t		89568	0					
ANR	89583	Identifier	char_pos_len		89568	1					
ANR	89584	AssignmentExpression	"char_pos_len = zend_sprintf ( char_pos_buf , ""%p"" , lex_pos )"		89568	2		=			
ANR	89585	Identifier	char_pos_len		89568	0					
ANR	89586	CallExpression	"zend_sprintf ( char_pos_buf , ""%p"" , lex_pos )"		89568	1					
ANR	89587	Callee	zend_sprintf		89568	0					
ANR	89588	Identifier	zend_sprintf		89568	0					
ANR	89589	ArgumentList	char_pos_buf		89568	1					
ANR	89590	Argument	char_pos_buf		89568	0					
ANR	89591	Identifier	char_pos_buf		89568	0					
ANR	89592	Argument	"""%p"""		89568	1					
ANR	89593	PrimaryExpression	"""%p"""		89568	0					
ANR	89594	Argument	lex_pos		89568	2					
ANR	89595	Identifier	lex_pos		89568	0					
ANR	89596	IdentifierDeclStatement	zend_string * filename = CG ( active_op_array ) -> filename ;	117:1:3923:3976	89568	3	True				
ANR	89597	IdentifierDecl	* filename = CG ( active_op_array ) -> filename		89568	0					
ANR	89598	IdentifierDeclType	zend_string *		89568	0					
ANR	89599	Identifier	filename		89568	1					
ANR	89600	AssignmentExpression	* filename = CG ( active_op_array ) -> filename		89568	2		=			
ANR	89601	Identifier	filename		89568	0					
ANR	89602	PtrMemberAccess	CG ( active_op_array ) -> filename		89568	1					
ANR	89603	CallExpression	CG ( active_op_array )		89568	0					
ANR	89604	Callee	CG		89568	0					
ANR	89605	Identifier	CG		89568	0					
ANR	89606	ArgumentList	active_op_array		89568	1					
ANR	89607	Argument	active_op_array		89568	0					
ANR	89608	Identifier	active_op_array		89568	0					
ANR	89609	Identifier	filename		89568	1					
ANR	89610	ExpressionStatement	"result = zend_string_alloc ( 1 + ZSTR_LEN ( name ) + ZSTR_LEN ( filename ) + char_pos_len , 0 )"	120:1:4059:4144	89568	4	True				
ANR	89611	AssignmentExpression	"result = zend_string_alloc ( 1 + ZSTR_LEN ( name ) + ZSTR_LEN ( filename ) + char_pos_len , 0 )"		89568	0		=			
ANR	89612	Identifier	result		89568	0					
ANR	89613	CallExpression	"zend_string_alloc ( 1 + ZSTR_LEN ( name ) + ZSTR_LEN ( filename ) + char_pos_len , 0 )"		89568	1					
ANR	89614	Callee	zend_string_alloc		89568	0					
ANR	89615	Identifier	zend_string_alloc		89568	0					
ANR	89616	ArgumentList	1 + ZSTR_LEN ( name ) + ZSTR_LEN ( filename ) + char_pos_len		89568	1					
ANR	89617	Argument	1 + ZSTR_LEN ( name ) + ZSTR_LEN ( filename ) + char_pos_len		89568	0					
ANR	89618	AdditiveExpression	1 + ZSTR_LEN ( name ) + ZSTR_LEN ( filename ) + char_pos_len		89568	0		+			
ANR	89619	PrimaryExpression	1		89568	0					
ANR	89620	AdditiveExpression	ZSTR_LEN ( name ) + ZSTR_LEN ( filename ) + char_pos_len		89568	1		+			
ANR	89621	CallExpression	ZSTR_LEN ( name )		89568	0					
ANR	89622	Callee	ZSTR_LEN		89568	0					
ANR	89623	Identifier	ZSTR_LEN		89568	0					
ANR	89624	ArgumentList	name		89568	1					
ANR	89625	Argument	name		89568	0					
ANR	89626	Identifier	name		89568	0					
ANR	89627	AdditiveExpression	ZSTR_LEN ( filename ) + char_pos_len		89568	1		+			
ANR	89628	CallExpression	ZSTR_LEN ( filename )		89568	0					
ANR	89629	Callee	ZSTR_LEN		89568	0					
ANR	89630	Identifier	ZSTR_LEN		89568	0					
ANR	89631	ArgumentList	filename		89568	1					
ANR	89632	Argument	filename		89568	0					
ANR	89633	Identifier	filename		89568	0					
ANR	89634	Identifier	char_pos_len		89568	1					
ANR	89635	Argument	0		89568	1					
ANR	89636	PrimaryExpression	0		89568	0					
ANR	89637	ExpressionStatement	"sprintf ( ZSTR_VAL ( result ) , ""%c%s%s%s"" , '\\0' , ZSTR_VAL ( name ) , ZSTR_VAL ( filename ) , char_pos_buf )"	121:2:4148:4241	89568	5	True				
ANR	89638	CallExpression	"sprintf ( ZSTR_VAL ( result ) , ""%c%s%s%s"" , '\\0' , ZSTR_VAL ( name ) , ZSTR_VAL ( filename ) , char_pos_buf )"		89568	0					
ANR	89639	Callee	sprintf		89568	0					
ANR	89640	Identifier	sprintf		89568	0					
ANR	89641	ArgumentList	ZSTR_VAL ( result )		89568	1					
ANR	89642	Argument	ZSTR_VAL ( result )		89568	0					
ANR	89643	CallExpression	ZSTR_VAL ( result )		89568	0					
ANR	89644	Callee	ZSTR_VAL		89568	0					
ANR	89645	Identifier	ZSTR_VAL		89568	0					
ANR	89646	ArgumentList	result		89568	1					
ANR	89647	Argument	result		89568	0					
ANR	89648	Identifier	result		89568	0					
ANR	89649	Argument	"""%c%s%s%s"""		89568	1					
ANR	89650	PrimaryExpression	"""%c%s%s%s"""		89568	0					
ANR	89651	Argument	'\\0'		89568	2					
ANR	89652	PrimaryExpression	'\\0'		89568	0					
ANR	89653	Argument	ZSTR_VAL ( name )		89568	3					
ANR	89654	CallExpression	ZSTR_VAL ( name )		89568	0					
ANR	89655	Callee	ZSTR_VAL		89568	0					
ANR	89656	Identifier	ZSTR_VAL		89568	0					
ANR	89657	ArgumentList	name		89568	1					
ANR	89658	Argument	name		89568	0					
ANR	89659	Identifier	name		89568	0					
ANR	89660	Argument	ZSTR_VAL ( filename )		89568	4					
ANR	89661	CallExpression	ZSTR_VAL ( filename )		89568	0					
ANR	89662	Callee	ZSTR_VAL		89568	0					
ANR	89663	Identifier	ZSTR_VAL		89568	0					
ANR	89664	ArgumentList	filename		89568	1					
ANR	89665	Argument	filename		89568	0					
ANR	89666	Identifier	filename		89568	0					
ANR	89667	Argument	char_pos_buf		89568	5					
ANR	89668	Identifier	char_pos_buf		89568	0					
ANR	89669	ReturnStatement	return zend_new_interned_string ( result ) ;	122:1:4244:4283	89568	6	True				
ANR	89670	CallExpression	zend_new_interned_string ( result )		89568	0					
ANR	89671	Callee	zend_new_interned_string		89568	0					
ANR	89672	Identifier	zend_new_interned_string		89568	0					
ANR	89673	ArgumentList	result		89568	1					
ANR	89674	Argument	result		89568	0					
ANR	89675	Identifier	result		89568	0					
ANR	89676	ReturnType	static zend_string *		89568	1					
ANR	89677	Identifier	zend_build_runtime_definition_key		89568	2					
ANR	89678	ParameterList	"zend_string * name , unsigned char * lex_pos"		89568	3					
ANR	89679	Parameter	zend_string * name	112:54:3755:3771	89568	0	True				
ANR	89680	ParameterType	zend_string *		89568	0					
ANR	89681	Identifier	name		89568	1					
ANR	89682	Parameter	unsigned char * lex_pos	112:73:3774:3795	89568	1	True				
ANR	89683	ParameterType	unsigned char *		89568	0					
ANR	89684	Identifier	lex_pos		89568	1					
ANR	89685	CFGEntryNode	ENTRY		89568		True				
ANR	89686	CFGExitNode	EXIT		89568		True				
ANR	89687	Symbol	char_pos_buf		89568						
ANR	89688	Symbol	zend_string_alloc		89568						
ANR	89689	Symbol	CG		89568						
ANR	89690	Symbol	active_op_array		89568						
ANR	89691	Symbol	* CG		89568						
ANR	89692	Symbol	zend_sprintf		89568						
ANR	89693	Symbol	ZSTR_VAL		89568						
ANR	89694	Symbol	result		89568						
ANR	89695	Symbol	filename		89568						
ANR	89696	Symbol	zend_new_interned_string		89568						
ANR	89697	Symbol	lex_pos		89568						
ANR	89698	Symbol	CG ( active_op_array ) -> filename		89568						
ANR	89699	Symbol	name		89568						
ANR	89700	Symbol	ZSTR_LEN		89568						
ANR	89701	Symbol	char_pos_len		89568						
ANR	89702	Function	zend_get_unqualified_name	126:0:4298:4644							
ANR	89703	FunctionDef	"zend_get_unqualified_name (const zend_string * name , const char * * result , size_t * result_len)"		89702	0					
ANR	89704	CompoundStatement		127:0:4417:4644	89702	0					
ANR	89705	IdentifierDeclStatement	"const char * ns_separator = zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) ) ;"	128:1:4420:4497	89702	0	True				
ANR	89706	IdentifierDecl	"* ns_separator = zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		89702	0					
ANR	89707	IdentifierDeclType	const char *		89702	0					
ANR	89708	Identifier	ns_separator		89702	1					
ANR	89709	AssignmentExpression	"* ns_separator = zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		89702	2		=			
ANR	89710	Identifier	ns_separator		89702	0					
ANR	89711	CallExpression	"zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		89702	1					
ANR	89712	Callee	zend_memrchr		89702	0					
ANR	89713	Identifier	zend_memrchr		89702	0					
ANR	89714	ArgumentList	ZSTR_VAL ( name )		89702	1					
ANR	89715	Argument	ZSTR_VAL ( name )		89702	0					
ANR	89716	CallExpression	ZSTR_VAL ( name )		89702	0					
ANR	89717	Callee	ZSTR_VAL		89702	0					
ANR	89718	Identifier	ZSTR_VAL		89702	0					
ANR	89719	ArgumentList	name		89702	1					
ANR	89720	Argument	name		89702	0					
ANR	89721	Identifier	name		89702	0					
ANR	89722	Argument	'\\\\'		89702	1					
ANR	89723	PrimaryExpression	'\\\\'		89702	0					
ANR	89724	Argument	ZSTR_LEN ( name )		89702	2					
ANR	89725	CallExpression	ZSTR_LEN ( name )		89702	0					
ANR	89726	Callee	ZSTR_LEN		89702	0					
ANR	89727	Identifier	ZSTR_LEN		89702	0					
ANR	89728	ArgumentList	name		89702	1					
ANR	89729	Argument	name		89702	0					
ANR	89730	Identifier	name		89702	0					
ANR	89731	IfStatement	if ( ns_separator != NULL )		89702	1					
ANR	89732	Condition	ns_separator != NULL	129:5:4504:4523	89702	0	True				
ANR	89733	EqualityExpression	ns_separator != NULL		89702	0		!=			
ANR	89734	Identifier	ns_separator		89702	0					
ANR	89735	Identifier	NULL		89702	1					
ANR	89736	CompoundStatement		3:27:108:108	89702	1					
ANR	89737	ExpressionStatement	* result = ns_separator + 1	130:2:4530:4556	89702	0	True				
ANR	89738	AssignmentExpression	* result = ns_separator + 1		89702	0		=			
ANR	89739	UnaryOperationExpression	* result		89702	0					
ANR	89740	UnaryOperator	*		89702	0					
ANR	89741	Identifier	result		89702	1					
ANR	89742	AdditiveExpression	ns_separator + 1		89702	1		+			
ANR	89743	Identifier	ns_separator		89702	0					
ANR	89744	PrimaryExpression	1		89702	1					
ANR	89745	ExpressionStatement	* result_len = ZSTR_VAL ( name ) + ZSTR_LEN ( name ) - * result	131:2:4560:4615	89702	1	True				
ANR	89746	AssignmentExpression	* result_len = ZSTR_VAL ( name ) + ZSTR_LEN ( name ) - * result		89702	0		=			
ANR	89747	UnaryOperationExpression	* result_len		89702	0					
ANR	89748	UnaryOperator	*		89702	0					
ANR	89749	Identifier	result_len		89702	1					
ANR	89750	AdditiveExpression	ZSTR_VAL ( name ) + ZSTR_LEN ( name ) - * result		89702	1		+			
ANR	89751	CallExpression	ZSTR_VAL ( name )		89702	0					
ANR	89752	Callee	ZSTR_VAL		89702	0					
ANR	89753	Identifier	ZSTR_VAL		89702	0					
ANR	89754	ArgumentList	name		89702	1					
ANR	89755	Argument	name		89702	0					
ANR	89756	Identifier	name		89702	0					
ANR	89757	AdditiveExpression	ZSTR_LEN ( name ) - * result		89702	1		-			
ANR	89758	CallExpression	ZSTR_LEN ( name )		89702	0					
ANR	89759	Callee	ZSTR_LEN		89702	0					
ANR	89760	Identifier	ZSTR_LEN		89702	0					
ANR	89761	ArgumentList	name		89702	1					
ANR	89762	Argument	name		89702	0					
ANR	89763	Identifier	name		89702	0					
ANR	89764	UnaryOperationExpression	* result		89702	1					
ANR	89765	UnaryOperator	*		89702	0					
ANR	89766	Identifier	result		89702	1					
ANR	89767	ReturnStatement	return 1 ;	132:2:4619:4627	89702	2	True				
ANR	89768	PrimaryExpression	1		89702	0					
ANR	89769	ReturnStatement	return 0 ;	135:1:4634:4642	89702	2	True				
ANR	89770	PrimaryExpression	0		89702	0					
ANR	89771	ReturnType	static zend_bool		89702	1					
ANR	89772	Identifier	zend_get_unqualified_name		89702	2					
ANR	89773	ParameterList	"const zend_string * name , const char * * result , size_t * result_len"		89702	3					
ANR	89774	Parameter	const zend_string * name	126:43:4341:4363	89702	0	True				
ANR	89775	ParameterType	const zend_string *		89702	0					
ANR	89776	Identifier	name		89702	1					
ANR	89777	Parameter	const char * * result	126:68:4366:4384	89702	1	True				
ANR	89778	ParameterType	const char * *		89702	0					
ANR	89779	Identifier	result		89702	1					
ANR	89780	Parameter	size_t * result_len	126:89:4387:4404	89702	2	True				
ANR	89781	ParameterType	size_t *		89702	0					
ANR	89782	Identifier	result_len		89702	1					
ANR	89783	CFGEntryNode	ENTRY		89702		True				
ANR	89784	CFGExitNode	EXIT		89702		True				
ANR	89785	Symbol	result		89702						
ANR	89786	Symbol	ns_separator		89702						
ANR	89787	Symbol	zend_memrchr		89702						
ANR	89788	Symbol	NULL		89702						
ANR	89789	Symbol	* result_len		89702						
ANR	89790	Symbol	* result		89702						
ANR	89791	Symbol	name		89702						
ANR	89792	Symbol	ZSTR_LEN		89702						
ANR	89793	Symbol	result_len		89702						
ANR	89794	Symbol	ZSTR_VAL		89702						
ANR	89795	ClassDef	reserved_class_name	139:0:4657:4718							
ANR	89796	DeclStmt									
ANR	89797	Decl							const char	const char *	name
ANR	89798	DeclStmt									
ANR	89799	Decl							size_t	size_t	len
ANR	89800	DeclStmt									
ANR	89801	Decl							const struct reserved_class_name	const struct reserved_class_name [ ]	reserved_class_names
ANR	89802	Function	zend_is_reserved_class_name	157:0:5030:5508							
ANR	89803	FunctionDef	zend_is_reserved_class_name (const zend_string * name)		89802	0					
ANR	89804	CompoundStatement		158:0:5110:5508	89802	0					
ANR	89805	IdentifierDeclStatement	const struct reserved_class_name * reserved = reserved_class_names ;	159:1:5113:5178	89802	0	True				
ANR	89806	IdentifierDecl	* reserved = reserved_class_names		89802	0					
ANR	89807	IdentifierDeclType	const struct reserved_class_name *		89802	0					
ANR	89808	Identifier	reserved		89802	1					
ANR	89809	AssignmentExpression	* reserved = reserved_class_names		89802	2		=			
ANR	89810	Identifier	reserved_class_names		89802	0					
ANR	89811	Identifier	reserved_class_names		89802	1					
ANR	89812	IdentifierDeclStatement	const char * uqname = ZSTR_VAL ( name ) ;	161:1:5182:5217	89802	1	True				
ANR	89813	IdentifierDecl	* uqname = ZSTR_VAL ( name )		89802	0					
ANR	89814	IdentifierDeclType	const char *		89802	0					
ANR	89815	Identifier	uqname		89802	1					
ANR	89816	AssignmentExpression	* uqname = ZSTR_VAL ( name )		89802	2		=			
ANR	89817	Identifier	uqname		89802	0					
ANR	89818	CallExpression	ZSTR_VAL ( name )		89802	1					
ANR	89819	Callee	ZSTR_VAL		89802	0					
ANR	89820	Identifier	ZSTR_VAL		89802	0					
ANR	89821	ArgumentList	name		89802	1					
ANR	89822	Argument	name		89802	0					
ANR	89823	Identifier	name		89802	0					
ANR	89824	IdentifierDeclStatement	size_t uqname_len = ZSTR_LEN ( name ) ;	162:1:5220:5254	89802	2	True				
ANR	89825	IdentifierDecl	uqname_len = ZSTR_LEN ( name )		89802	0					
ANR	89826	IdentifierDeclType	size_t		89802	0					
ANR	89827	Identifier	uqname_len		89802	1					
ANR	89828	AssignmentExpression	uqname_len = ZSTR_LEN ( name )		89802	2		=			
ANR	89829	Identifier	uqname_len		89802	0					
ANR	89830	CallExpression	ZSTR_LEN ( name )		89802	1					
ANR	89831	Callee	ZSTR_LEN		89802	0					
ANR	89832	Identifier	ZSTR_LEN		89802	0					
ANR	89833	ArgumentList	name		89802	1					
ANR	89834	Argument	name		89802	0					
ANR	89835	Identifier	name		89802	0					
ANR	89836	ExpressionStatement	"zend_get_unqualified_name ( name , & uqname , & uqname_len )"	163:1:5257:5310	89802	3	True				
ANR	89837	CallExpression	"zend_get_unqualified_name ( name , & uqname , & uqname_len )"		89802	0					
ANR	89838	Callee	zend_get_unqualified_name		89802	0					
ANR	89839	Identifier	zend_get_unqualified_name		89802	0					
ANR	89840	ArgumentList	name		89802	1					
ANR	89841	Argument	name		89802	0					
ANR	89842	Identifier	name		89802	0					
ANR	89843	Argument	& uqname		89802	1					
ANR	89844	UnaryOperationExpression	& uqname		89802	0					
ANR	89845	UnaryOperator	&		89802	0					
ANR	89846	Identifier	uqname		89802	1					
ANR	89847	Argument	& uqname_len		89802	2					
ANR	89848	UnaryOperationExpression	& uqname_len		89802	0					
ANR	89849	UnaryOperator	&		89802	0					
ANR	89850	Identifier	uqname_len		89802	1					
ANR	89851	ForStatement	for ( ; reserved -> name ; ++ reserved )		89802	4					
ANR	89852	Condition	reserved -> name	165:8:5321:5334	89802	0	True				
ANR	89853	PtrMemberAccess	reserved -> name		89802	0					
ANR	89854	Identifier	reserved		89802	0					
ANR	89855	Identifier	name		89802	1					
ANR	89856	UnaryExpression	++ reserved	165:24:5337:5346	89802	1	True				
ANR	89857	IncDec	++		89802	0					
ANR	89858	Identifier	reserved		89802	1					
ANR	89859	CompoundStatement		8:36:238:238	89802	2					
ANR	89860	IfStatement	"if ( uqname_len == reserved -> len && zend_binary_strcasecmp ( uqname , uqname_len , reserved -> name , reserved -> len ) == 0 )"		89802	0					
ANR	89861	Condition	"uqname_len == reserved -> len && zend_binary_strcasecmp ( uqname , uqname_len , reserved -> name , reserved -> len ) == 0"	166:6:5357:5468	89802	0	True				
ANR	89862	AndExpression	"uqname_len == reserved -> len && zend_binary_strcasecmp ( uqname , uqname_len , reserved -> name , reserved -> len ) == 0"		89802	0		&&			
ANR	89863	EqualityExpression	uqname_len == reserved -> len		89802	0		==			
ANR	89864	Identifier	uqname_len		89802	0					
ANR	89865	PtrMemberAccess	reserved -> len		89802	1					
ANR	89866	Identifier	reserved		89802	0					
ANR	89867	Identifier	len		89802	1					
ANR	89868	EqualityExpression	"zend_binary_strcasecmp ( uqname , uqname_len , reserved -> name , reserved -> len ) == 0"		89802	1		==			
ANR	89869	CallExpression	"zend_binary_strcasecmp ( uqname , uqname_len , reserved -> name , reserved -> len )"		89802	0					
ANR	89870	Callee	zend_binary_strcasecmp		89802	0					
ANR	89871	Identifier	zend_binary_strcasecmp		89802	0					
ANR	89872	ArgumentList	uqname		89802	1					
ANR	89873	Argument	uqname		89802	0					
ANR	89874	Identifier	uqname		89802	0					
ANR	89875	Argument	uqname_len		89802	1					
ANR	89876	Identifier	uqname_len		89802	0					
ANR	89877	Argument	reserved -> name		89802	2					
ANR	89878	PtrMemberAccess	reserved -> name		89802	0					
ANR	89879	Identifier	reserved		89802	0					
ANR	89880	Identifier	name		89802	1					
ANR	89881	Argument	reserved -> len		89802	3					
ANR	89882	PtrMemberAccess	reserved -> len		89802	0					
ANR	89883	Identifier	reserved		89802	0					
ANR	89884	Identifier	len		89802	1					
ANR	89885	PrimaryExpression	0		89802	1					
ANR	89886	CompoundStatement		11:4:363:363	89802	1					
ANR	89887	ReturnStatement	return 1 ;	169:3:5479:5487	89802	0	True				
ANR	89888	PrimaryExpression	1		89802	0					
ANR	89889	ReturnStatement	return 0 ;	173:1:5498:5506	89802	5	True				
ANR	89890	PrimaryExpression	0		89802	0					
ANR	89891	ReturnType	static zend_bool		89802	1					
ANR	89892	Identifier	zend_is_reserved_class_name		89802	2					
ANR	89893	ParameterList	const zend_string * name		89802	3					
ANR	89894	Parameter	const zend_string * name	157:45:5075:5097	89802	0	True				
ANR	89895	ParameterType	const zend_string *		89802	0					
ANR	89896	Identifier	name		89802	1					
ANR	89897	CFGEntryNode	ENTRY		89802		True				
ANR	89898	CFGExitNode	EXIT		89802		True				
ANR	89899	Symbol	uqname_len		89802						
ANR	89900	Symbol	& uqname_len		89802						
ANR	89901	Symbol	reserved -> len		89802						
ANR	89902	Symbol	& uqname		89802						
ANR	89903	Symbol	zend_binary_strcasecmp		89802						
ANR	89904	Symbol	* reserved		89802						
ANR	89905	Symbol	ZSTR_VAL		89802						
ANR	89906	Symbol	reserved		89802						
ANR	89907	Symbol	uqname		89802						
ANR	89908	Symbol	reserved -> name		89802						
ANR	89909	Symbol	name		89802						
ANR	89910	Symbol	ZSTR_LEN		89802						
ANR	89911	Symbol	reserved_class_names		89802						
ANR	89912	Function	zend_assert_valid_class_name	177:0:5521:5756							
ANR	89913	FunctionDef	zend_assert_valid_class_name (const zend_string * name)		89912	0					
ANR	89914	CompoundStatement		178:0:5599:5756	89912	0					
ANR	89915	IfStatement	if ( zend_is_reserved_class_name ( name ) )		89912	0					
ANR	89916	Condition	zend_is_reserved_class_name ( name )	179:5:5606:5638	89912	0	True				
ANR	89917	CallExpression	zend_is_reserved_class_name ( name )		89912	0					
ANR	89918	Callee	zend_is_reserved_class_name		89912	0					
ANR	89919	Identifier	zend_is_reserved_class_name		89912	0					
ANR	89920	ArgumentList	name		89912	1					
ANR	89921	Argument	name		89912	0					
ANR	89922	Identifier	name		89912	0					
ANR	89923	CompoundStatement		2:40:41:41	89912	1					
ANR	89924	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as class name as it is reserved"" , ZSTR_VAL ( name ) )"	180:2:5645:5751	89912	0	True				
ANR	89925	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as class name as it is reserved"" , ZSTR_VAL ( name ) )"		89912	0					
ANR	89926	Callee	zend_error_noreturn		89912	0					
ANR	89927	Identifier	zend_error_noreturn		89912	0					
ANR	89928	ArgumentList	E_COMPILE_ERROR		89912	1					
ANR	89929	Argument	E_COMPILE_ERROR		89912	0					
ANR	89930	Identifier	E_COMPILE_ERROR		89912	0					
ANR	89931	Argument	"""Cannot use '%s' as class name as it is reserved"""		89912	1					
ANR	89932	PrimaryExpression	"""Cannot use '%s' as class name as it is reserved"""		89912	0					
ANR	89933	Argument	ZSTR_VAL ( name )		89912	2					
ANR	89934	CallExpression	ZSTR_VAL ( name )		89912	0					
ANR	89935	Callee	ZSTR_VAL		89912	0					
ANR	89936	Identifier	ZSTR_VAL		89912	0					
ANR	89937	ArgumentList	name		89912	1					
ANR	89938	Argument	name		89912	0					
ANR	89939	Identifier	name		89912	0					
ANR	89940	ReturnType	ZEND_API void		89912	1					
ANR	89941	Identifier	zend_assert_valid_class_name		89912	2					
ANR	89942	ParameterList	const zend_string * name		89912	3					
ANR	89943	Parameter	const zend_string * name	177:43:5564:5586	89912	0	True				
ANR	89944	ParameterType	const zend_string *		89912	0					
ANR	89945	Identifier	name		89912	1					
ANR	89946	CFGEntryNode	ENTRY		89912		True				
ANR	89947	CFGExitNode	EXIT		89912		True				
ANR	89948	Symbol	zend_is_reserved_class_name		89912						
ANR	89949	Symbol	E_COMPILE_ERROR		89912						
ANR	89950	Symbol	name		89912						
ANR	89951	Symbol	ZSTR_VAL		89912						
ANR	89952	ClassDef	_builtin_type_info	186:8:5777:5891							
ANR	89953	DeclStmt									
ANR	89954	Decl							const char	const char *	name
ANR	89955	DeclStmt									
ANR	89956	Decl							const size_t	const size_t	name_len
ANR	89957	DeclStmt									
ANR	89958	Decl							const zend_uchar	const zend_uchar	type
ANR	89959	DeclStmt									
ANR	89960	Decl							_builtin_type_info	_builtin_type_info	builtin_type_info
ANR	89961	DeclStmt									
ANR	89962	Decl							const builtin_type_info	const builtin_type_info [ ]	builtin_types
ANR	89963	Function	zend_lookup_builtin_type_by_name	201:0:6102:6472							
ANR	89964	FunctionDef	zend_lookup_builtin_type_by_name (const zend_string * name)		89963	0					
ANR	89965	CompoundStatement		202:0:6207:6472	89963	0					
ANR	89966	IdentifierDeclStatement	const builtin_type_info * info = & builtin_types [ 0 ] ;	203:1:6210:6259	89963	0	True				
ANR	89967	IdentifierDecl	* info = & builtin_types [ 0 ]		89963	0					
ANR	89968	IdentifierDeclType	const builtin_type_info *		89963	0					
ANR	89969	Identifier	info		89963	1					
ANR	89970	AssignmentExpression	* info = & builtin_types [ 0 ]		89963	2		=			
ANR	89971	Identifier	info		89963	0					
ANR	89972	UnaryOperationExpression	& builtin_types [ 0 ]		89963	1					
ANR	89973	UnaryOperator	&		89963	0					
ANR	89974	ArrayIndexing	builtin_types [ 0 ]		89963	1					
ANR	89975	Identifier	builtin_types		89963	0					
ANR	89976	PrimaryExpression	0		89963	1					
ANR	89977	ForStatement	for ( ; info -> name ; ++ info )		89963	1					
ANR	89978	Condition	info -> name	205:8:6270:6279	89963	0	True				
ANR	89979	PtrMemberAccess	info -> name		89963	0					
ANR	89980	Identifier	info		89963	0					
ANR	89981	Identifier	name		89963	1					
ANR	89982	UnaryExpression	++ info	205:20:6282:6287	89963	1	True				
ANR	89983	IncDec	++		89963	0					
ANR	89984	Identifier	info		89963	1					
ANR	89985	CompoundStatement		4:28:82:82	89963	2					
ANR	89986	IfStatement	"if ( ZSTR_LEN ( name ) == info -> name_len && zend_binary_strcasecmp ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , info -> name , info -> name_len ) == 0 )"		89963	0					
ANR	89987	Condition	"ZSTR_LEN ( name ) == info -> name_len && zend_binary_strcasecmp ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , info -> name , info -> name_len ) == 0"	206:6:6298:6423	89963	0	True				
ANR	89988	AndExpression	"ZSTR_LEN ( name ) == info -> name_len && zend_binary_strcasecmp ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , info -> name , info -> name_len ) == 0"		89963	0		&&			
ANR	89989	EqualityExpression	ZSTR_LEN ( name ) == info -> name_len		89963	0		==			
ANR	89990	CallExpression	ZSTR_LEN ( name )		89963	0					
ANR	89991	Callee	ZSTR_LEN		89963	0					
ANR	89992	Identifier	ZSTR_LEN		89963	0					
ANR	89993	ArgumentList	name		89963	1					
ANR	89994	Argument	name		89963	0					
ANR	89995	Identifier	name		89963	0					
ANR	89996	PtrMemberAccess	info -> name_len		89963	1					
ANR	89997	Identifier	info		89963	0					
ANR	89998	Identifier	name_len		89963	1					
ANR	89999	EqualityExpression	"zend_binary_strcasecmp ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , info -> name , info -> name_len ) == 0"		89963	1		==			
ANR	90000	CallExpression	"zend_binary_strcasecmp ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , info -> name , info -> name_len )"		89963	0					
ANR	90001	Callee	zend_binary_strcasecmp		89963	0					
ANR	90002	Identifier	zend_binary_strcasecmp		89963	0					
ANR	90003	ArgumentList	ZSTR_VAL ( name )		89963	1					
ANR	90004	Argument	ZSTR_VAL ( name )		89963	0					
ANR	90005	CallExpression	ZSTR_VAL ( name )		89963	0					
ANR	90006	Callee	ZSTR_VAL		89963	0					
ANR	90007	Identifier	ZSTR_VAL		89963	0					
ANR	90008	ArgumentList	name		89963	1					
ANR	90009	Argument	name		89963	0					
ANR	90010	Identifier	name		89963	0					
ANR	90011	Argument	ZSTR_LEN ( name )		89963	1					
ANR	90012	CallExpression	ZSTR_LEN ( name )		89963	0					
ANR	90013	Callee	ZSTR_LEN		89963	0					
ANR	90014	Identifier	ZSTR_LEN		89963	0					
ANR	90015	ArgumentList	name		89963	1					
ANR	90016	Argument	name		89963	0					
ANR	90017	Identifier	name		89963	0					
ANR	90018	Argument	info -> name		89963	2					
ANR	90019	PtrMemberAccess	info -> name		89963	0					
ANR	90020	Identifier	info		89963	0					
ANR	90021	Identifier	name		89963	1					
ANR	90022	Argument	info -> name_len		89963	3					
ANR	90023	PtrMemberAccess	info -> name_len		89963	0					
ANR	90024	Identifier	info		89963	0					
ANR	90025	Identifier	name_len		89963	1					
ANR	90026	PrimaryExpression	0		89963	1					
ANR	90027	CompoundStatement		7:4:221:221	89963	1					
ANR	90028	ReturnStatement	return info -> type ;	209:3:6434:6451	89963	0	True				
ANR	90029	PtrMemberAccess	info -> type		89963	0					
ANR	90030	Identifier	info		89963	0					
ANR	90031	Identifier	type		89963	1					
ANR	90032	ReturnStatement	return 0 ;	213:1:6462:6470	89963	2	True				
ANR	90033	PrimaryExpression	0		89963	0					
ANR	90034	ReturnType	static zend_always_inline zend_uchar		89963	1					
ANR	90035	Identifier	zend_lookup_builtin_type_by_name		89963	2					
ANR	90036	ParameterList	const zend_string * name		89963	3					
ANR	90037	Parameter	const zend_string * name	201:70:6172:6194	89963	0	True				
ANR	90038	ParameterType	const zend_string *		89963	0					
ANR	90039	Identifier	name		89963	1					
ANR	90040	CFGEntryNode	ENTRY		89963		True				
ANR	90041	CFGExitNode	EXIT		89963		True				
ANR	90042	Symbol	info -> type		89963						
ANR	90043	Symbol	zend_binary_strcasecmp		89963						
ANR	90044	Symbol	name		89963						
ANR	90045	Symbol	builtin_types		89963						
ANR	90046	Symbol	ZSTR_LEN		89963						
ANR	90047	Symbol	info -> name		89963						
ANR	90048	Symbol	* info		89963						
ANR	90049	Symbol	info -> name_len		89963						
ANR	90050	Symbol	info		89963						
ANR	90051	Symbol	ZSTR_VAL		89963						
ANR	90052	Function	zend_oparray_context_begin	218:0:6486:6867							
ANR	90053	FunctionDef	zend_oparray_context_begin (zend_oparray_context * prev_context)		90052	0					
ANR	90054	CompoundStatement		219:0:6564:6867	90052	0					
ANR	90055	ExpressionStatement	* prev_context = CG ( context )	220:1:6567:6594	90052	0	True				
ANR	90056	AssignmentExpression	* prev_context = CG ( context )		90052	0		=			
ANR	90057	UnaryOperationExpression	* prev_context		90052	0					
ANR	90058	UnaryOperator	*		90052	0					
ANR	90059	Identifier	prev_context		90052	1					
ANR	90060	CallExpression	CG ( context )		90052	1					
ANR	90061	Callee	CG		90052	0					
ANR	90062	Identifier	CG		90052	0					
ANR	90063	ArgumentList	context		90052	1					
ANR	90064	Argument	context		90052	0					
ANR	90065	Identifier	context		90052	0					
ANR	90066	ExpressionStatement	CG ( context ) . opcodes_size = INITIAL_OP_ARRAY_SIZE	221:1:6597:6645	90052	1	True				
ANR	90067	AssignmentExpression	CG ( context ) . opcodes_size = INITIAL_OP_ARRAY_SIZE		90052	0		=			
ANR	90068	MemberAccess	CG ( context ) . opcodes_size		90052	0					
ANR	90069	CallExpression	CG ( context )		90052	0					
ANR	90070	Callee	CG		90052	0					
ANR	90071	Identifier	CG		90052	0					
ANR	90072	ArgumentList	context		90052	1					
ANR	90073	Argument	context		90052	0					
ANR	90074	Identifier	context		90052	0					
ANR	90075	Identifier	opcodes_size		90052	1					
ANR	90076	Identifier	INITIAL_OP_ARRAY_SIZE		90052	1					
ANR	90077	ExpressionStatement	CG ( context ) . vars_size = 0	222:1:6648:6673	90052	2	True				
ANR	90078	AssignmentExpression	CG ( context ) . vars_size = 0		90052	0		=			
ANR	90079	MemberAccess	CG ( context ) . vars_size		90052	0					
ANR	90080	CallExpression	CG ( context )		90052	0					
ANR	90081	Callee	CG		90052	0					
ANR	90082	Identifier	CG		90052	0					
ANR	90083	ArgumentList	context		90052	1					
ANR	90084	Argument	context		90052	0					
ANR	90085	Identifier	context		90052	0					
ANR	90086	Identifier	vars_size		90052	1					
ANR	90087	PrimaryExpression	0		90052	1					
ANR	90088	ExpressionStatement	CG ( context ) . literals_size = 0	223:1:6676:6705	90052	3	True				
ANR	90089	AssignmentExpression	CG ( context ) . literals_size = 0		90052	0		=			
ANR	90090	MemberAccess	CG ( context ) . literals_size		90052	0					
ANR	90091	CallExpression	CG ( context )		90052	0					
ANR	90092	Callee	CG		90052	0					
ANR	90093	Identifier	CG		90052	0					
ANR	90094	ArgumentList	context		90052	1					
ANR	90095	Argument	context		90052	0					
ANR	90096	Identifier	context		90052	0					
ANR	90097	Identifier	literals_size		90052	1					
ANR	90098	PrimaryExpression	0		90052	1					
ANR	90099	ExpressionStatement	CG ( context ) . current_brk_cont = - 1	224:1:6708:6741	90052	4	True				
ANR	90100	AssignmentExpression	CG ( context ) . current_brk_cont = - 1		90052	0		=			
ANR	90101	MemberAccess	CG ( context ) . current_brk_cont		90052	0					
ANR	90102	CallExpression	CG ( context )		90052	0					
ANR	90103	Callee	CG		90052	0					
ANR	90104	Identifier	CG		90052	0					
ANR	90105	ArgumentList	context		90052	1					
ANR	90106	Argument	context		90052	0					
ANR	90107	Identifier	context		90052	0					
ANR	90108	Identifier	current_brk_cont		90052	1					
ANR	90109	UnaryOperationExpression	- 1		90052	1					
ANR	90110	UnaryOperator	-		90052	0					
ANR	90111	PrimaryExpression	1		90052	1					
ANR	90112	ExpressionStatement	CG ( context ) . backpatch_count = 0	225:1:6744:6775	90052	5	True				
ANR	90113	AssignmentExpression	CG ( context ) . backpatch_count = 0		90052	0		=			
ANR	90114	MemberAccess	CG ( context ) . backpatch_count		90052	0					
ANR	90115	CallExpression	CG ( context )		90052	0					
ANR	90116	Callee	CG		90052	0					
ANR	90117	Identifier	CG		90052	0					
ANR	90118	ArgumentList	context		90052	1					
ANR	90119	Argument	context		90052	0					
ANR	90120	Identifier	context		90052	0					
ANR	90121	Identifier	backpatch_count		90052	1					
ANR	90122	PrimaryExpression	0		90052	1					
ANR	90123	ExpressionStatement	CG ( context ) . in_finally = 0	226:1:6778:6804	90052	6	True				
ANR	90124	AssignmentExpression	CG ( context ) . in_finally = 0		90052	0		=			
ANR	90125	MemberAccess	CG ( context ) . in_finally		90052	0					
ANR	90126	CallExpression	CG ( context )		90052	0					
ANR	90127	Callee	CG		90052	0					
ANR	90128	Identifier	CG		90052	0					
ANR	90129	ArgumentList	context		90052	1					
ANR	90130	Argument	context		90052	0					
ANR	90131	Identifier	context		90052	0					
ANR	90132	Identifier	in_finally		90052	1					
ANR	90133	PrimaryExpression	0		90052	1					
ANR	90134	ExpressionStatement	CG ( context ) . fast_call_var = - 1	227:1:6807:6837	90052	7	True				
ANR	90135	AssignmentExpression	CG ( context ) . fast_call_var = - 1		90052	0		=			
ANR	90136	MemberAccess	CG ( context ) . fast_call_var		90052	0					
ANR	90137	CallExpression	CG ( context )		90052	0					
ANR	90138	Callee	CG		90052	0					
ANR	90139	Identifier	CG		90052	0					
ANR	90140	ArgumentList	context		90052	1					
ANR	90141	Argument	context		90052	0					
ANR	90142	Identifier	context		90052	0					
ANR	90143	Identifier	fast_call_var		90052	1					
ANR	90144	UnaryOperationExpression	- 1		90052	1					
ANR	90145	UnaryOperator	-		90052	0					
ANR	90146	PrimaryExpression	1		90052	1					
ANR	90147	ExpressionStatement	CG ( context ) . labels = NULL	228:1:6840:6865	90052	8	True				
ANR	90148	AssignmentExpression	CG ( context ) . labels = NULL		90052	0		=			
ANR	90149	MemberAccess	CG ( context ) . labels		90052	0					
ANR	90150	CallExpression	CG ( context )		90052	0					
ANR	90151	Callee	CG		90052	0					
ANR	90152	Identifier	CG		90052	0					
ANR	90153	ArgumentList	context		90052	1					
ANR	90154	Argument	context		90052	0					
ANR	90155	Identifier	context		90052	0					
ANR	90156	Identifier	labels		90052	1					
ANR	90157	Identifier	NULL		90052	1					
ANR	90158	ReturnType	void		90052	1					
ANR	90159	Identifier	zend_oparray_context_begin		90052	2					
ANR	90160	ParameterList	zend_oparray_context * prev_context		90052	3					
ANR	90161	Parameter	zend_oparray_context * prev_context	218:32:6518:6551	90052	0	True				
ANR	90162	ParameterType	zend_oparray_context *		90052	0					
ANR	90163	Identifier	prev_context		90052	1					
ANR	90164	CFGEntryNode	ENTRY		90052		True				
ANR	90165	CFGExitNode	EXIT		90052		True				
ANR	90166	Symbol	CG ( context ) . in_finally		90052						
ANR	90167	Symbol	CG ( context ) . vars_size		90052						
ANR	90168	Symbol	NULL		90052						
ANR	90169	Symbol	CG		90052						
ANR	90170	Symbol	* prev_context		90052						
ANR	90171	Symbol	CG ( context ) . literals_size		90052						
ANR	90172	Symbol	CG ( context ) . fast_call_var		90052						
ANR	90173	Symbol	INITIAL_OP_ARRAY_SIZE		90052						
ANR	90174	Symbol	CG ( context ) . backpatch_count		90052						
ANR	90175	Symbol	prev_context		90052						
ANR	90176	Symbol	context		90052						
ANR	90177	Symbol	CG ( context ) . labels		90052						
ANR	90178	Symbol	CG ( context ) . opcodes_size		90052						
ANR	90179	Symbol	CG ( context ) . current_brk_cont		90052						
ANR	90180	Function	zend_oparray_context_end	232:0:6880:7126							
ANR	90181	FunctionDef	zend_oparray_context_end (zend_oparray_context * prev_context)		90180	0					
ANR	90182	CompoundStatement		233:0:6956:7126	90180	0					
ANR	90183	IfStatement	if ( CG ( context ) . labels )		90180	0					
ANR	90184	Condition	CG ( context ) . labels	234:5:6963:6980	90180	0	True				
ANR	90185	MemberAccess	CG ( context ) . labels		90180	0					
ANR	90186	CallExpression	CG ( context )		90180	0					
ANR	90187	Callee	CG		90180	0					
ANR	90188	Identifier	CG		90180	0					
ANR	90189	ArgumentList	context		90180	1					
ANR	90190	Argument	context		90180	0					
ANR	90191	Identifier	context		90180	0					
ANR	90192	Identifier	labels		90180	1					
ANR	90193	CompoundStatement		2:25:26:26	90180	1					
ANR	90194	ExpressionStatement	zend_hash_destroy ( CG ( context ) . labels )	235:2:6987:7024	90180	0	True				
ANR	90195	CallExpression	zend_hash_destroy ( CG ( context ) . labels )		90180	0					
ANR	90196	Callee	zend_hash_destroy		90180	0					
ANR	90197	Identifier	zend_hash_destroy		90180	0					
ANR	90198	ArgumentList	CG ( context ) . labels		90180	1					
ANR	90199	Argument	CG ( context ) . labels		90180	0					
ANR	90200	MemberAccess	CG ( context ) . labels		90180	0					
ANR	90201	CallExpression	CG ( context )		90180	0					
ANR	90202	Callee	CG		90180	0					
ANR	90203	Identifier	CG		90180	0					
ANR	90204	ArgumentList	context		90180	1					
ANR	90205	Argument	context		90180	0					
ANR	90206	Identifier	context		90180	0					
ANR	90207	Identifier	labels		90180	1					
ANR	90208	ExpressionStatement	FREE_HASHTABLE ( CG ( context ) . labels )	236:2:7028:7062	90180	1	True				
ANR	90209	CallExpression	FREE_HASHTABLE ( CG ( context ) . labels )		90180	0					
ANR	90210	Callee	FREE_HASHTABLE		90180	0					
ANR	90211	Identifier	FREE_HASHTABLE		90180	0					
ANR	90212	ArgumentList	CG ( context ) . labels		90180	1					
ANR	90213	Argument	CG ( context ) . labels		90180	0					
ANR	90214	MemberAccess	CG ( context ) . labels		90180	0					
ANR	90215	CallExpression	CG ( context )		90180	0					
ANR	90216	Callee	CG		90180	0					
ANR	90217	Identifier	CG		90180	0					
ANR	90218	ArgumentList	context		90180	1					
ANR	90219	Argument	context		90180	0					
ANR	90220	Identifier	context		90180	0					
ANR	90221	Identifier	labels		90180	1					
ANR	90222	ExpressionStatement	CG ( context ) . labels = NULL	237:2:7066:7091	90180	2	True				
ANR	90223	AssignmentExpression	CG ( context ) . labels = NULL		90180	0		=			
ANR	90224	MemberAccess	CG ( context ) . labels		90180	0					
ANR	90225	CallExpression	CG ( context )		90180	0					
ANR	90226	Callee	CG		90180	0					
ANR	90227	Identifier	CG		90180	0					
ANR	90228	ArgumentList	context		90180	1					
ANR	90229	Argument	context		90180	0					
ANR	90230	Identifier	context		90180	0					
ANR	90231	Identifier	labels		90180	1					
ANR	90232	Identifier	NULL		90180	1					
ANR	90233	ExpressionStatement	CG ( context ) = * prev_context	239:1:7097:7124	90180	1	True				
ANR	90234	AssignmentExpression	CG ( context ) = * prev_context		90180	0		=			
ANR	90235	CallExpression	CG ( context )		90180	0					
ANR	90236	Callee	CG		90180	0					
ANR	90237	Identifier	CG		90180	0					
ANR	90238	ArgumentList	context		90180	1					
ANR	90239	Argument	context		90180	0					
ANR	90240	Identifier	context		90180	0					
ANR	90241	UnaryOperationExpression	* prev_context		90180	1					
ANR	90242	UnaryOperator	*		90180	0					
ANR	90243	Identifier	prev_context		90180	1					
ANR	90244	ReturnType	void		90180	1					
ANR	90245	Identifier	zend_oparray_context_end		90180	2					
ANR	90246	ParameterList	zend_oparray_context * prev_context		90180	3					
ANR	90247	Parameter	zend_oparray_context * prev_context	232:30:6910:6943	90180	0	True				
ANR	90248	ParameterType	zend_oparray_context *		90180	0					
ANR	90249	Identifier	prev_context		90180	1					
ANR	90250	CFGEntryNode	ENTRY		90180		True				
ANR	90251	CFGExitNode	EXIT		90180		True				
ANR	90252	Symbol	NULL		90180						
ANR	90253	Symbol	CG		90180						
ANR	90254	Symbol	* prev_context		90180						
ANR	90255	Symbol	prev_context		90180						
ANR	90256	Symbol	context		90180						
ANR	90257	Symbol	CG ( context ) . labels		90180						
ANR	90258	Function	zend_reset_import_tables	243:0:7139:7559							
ANR	90259	FunctionDef	zend_reset_import_tables ()		90258	0					
ANR	90260	CompoundStatement		244:0:7192:7559	90258	0					
ANR	90261	IfStatement	if ( FC ( imports ) )		90258	0					
ANR	90262	Condition	FC ( imports )	245:5:7199:7209	90258	0	True				
ANR	90263	CallExpression	FC ( imports )		90258	0					
ANR	90264	Callee	FC		90258	0					
ANR	90265	Identifier	FC		90258	0					
ANR	90266	ArgumentList	imports		90258	1					
ANR	90267	Argument	imports		90258	0					
ANR	90268	Identifier	imports		90258	0					
ANR	90269	CompoundStatement		2:18:19:19	90258	1					
ANR	90270	ExpressionStatement	zend_hash_destroy ( FC ( imports ) )	246:2:7216:7246	90258	0	True				
ANR	90271	CallExpression	zend_hash_destroy ( FC ( imports ) )		90258	0					
ANR	90272	Callee	zend_hash_destroy		90258	0					
ANR	90273	Identifier	zend_hash_destroy		90258	0					
ANR	90274	ArgumentList	FC ( imports )		90258	1					
ANR	90275	Argument	FC ( imports )		90258	0					
ANR	90276	CallExpression	FC ( imports )		90258	0					
ANR	90277	Callee	FC		90258	0					
ANR	90278	Identifier	FC		90258	0					
ANR	90279	ArgumentList	imports		90258	1					
ANR	90280	Argument	imports		90258	0					
ANR	90281	Identifier	imports		90258	0					
ANR	90282	ExpressionStatement	efree ( FC ( imports ) )	247:2:7250:7268	90258	1	True				
ANR	90283	CallExpression	efree ( FC ( imports ) )		90258	0					
ANR	90284	Callee	efree		90258	0					
ANR	90285	Identifier	efree		90258	0					
ANR	90286	ArgumentList	FC ( imports )		90258	1					
ANR	90287	Argument	FC ( imports )		90258	0					
ANR	90288	CallExpression	FC ( imports )		90258	0					
ANR	90289	Callee	FC		90258	0					
ANR	90290	Identifier	FC		90258	0					
ANR	90291	ArgumentList	imports		90258	1					
ANR	90292	Argument	imports		90258	0					
ANR	90293	Identifier	imports		90258	0					
ANR	90294	ExpressionStatement	FC ( imports ) = NULL	248:2:7272:7290	90258	2	True				
ANR	90295	AssignmentExpression	FC ( imports ) = NULL		90258	0		=			
ANR	90296	CallExpression	FC ( imports )		90258	0					
ANR	90297	Callee	FC		90258	0					
ANR	90298	Identifier	FC		90258	0					
ANR	90299	ArgumentList	imports		90258	1					
ANR	90300	Argument	imports		90258	0					
ANR	90301	Identifier	imports		90258	0					
ANR	90302	Identifier	NULL		90258	1					
ANR	90303	IfStatement	if ( FC ( imports_function ) )		90258	1					
ANR	90304	Condition	FC ( imports_function )	251:5:7301:7320	90258	0	True				
ANR	90305	CallExpression	FC ( imports_function )		90258	0					
ANR	90306	Callee	FC		90258	0					
ANR	90307	Identifier	FC		90258	0					
ANR	90308	ArgumentList	imports_function		90258	1					
ANR	90309	Argument	imports_function		90258	0					
ANR	90310	Identifier	imports_function		90258	0					
ANR	90311	CompoundStatement		8:27:130:130	90258	1					
ANR	90312	ExpressionStatement	zend_hash_destroy ( FC ( imports_function ) )	252:2:7327:7366	90258	0	True				
ANR	90313	CallExpression	zend_hash_destroy ( FC ( imports_function ) )		90258	0					
ANR	90314	Callee	zend_hash_destroy		90258	0					
ANR	90315	Identifier	zend_hash_destroy		90258	0					
ANR	90316	ArgumentList	FC ( imports_function )		90258	1					
ANR	90317	Argument	FC ( imports_function )		90258	0					
ANR	90318	CallExpression	FC ( imports_function )		90258	0					
ANR	90319	Callee	FC		90258	0					
ANR	90320	Identifier	FC		90258	0					
ANR	90321	ArgumentList	imports_function		90258	1					
ANR	90322	Argument	imports_function		90258	0					
ANR	90323	Identifier	imports_function		90258	0					
ANR	90324	ExpressionStatement	efree ( FC ( imports_function ) )	253:2:7370:7397	90258	1	True				
ANR	90325	CallExpression	efree ( FC ( imports_function ) )		90258	0					
ANR	90326	Callee	efree		90258	0					
ANR	90327	Identifier	efree		90258	0					
ANR	90328	ArgumentList	FC ( imports_function )		90258	1					
ANR	90329	Argument	FC ( imports_function )		90258	0					
ANR	90330	CallExpression	FC ( imports_function )		90258	0					
ANR	90331	Callee	FC		90258	0					
ANR	90332	Identifier	FC		90258	0					
ANR	90333	ArgumentList	imports_function		90258	1					
ANR	90334	Argument	imports_function		90258	0					
ANR	90335	Identifier	imports_function		90258	0					
ANR	90336	ExpressionStatement	FC ( imports_function ) = NULL	254:2:7401:7428	90258	2	True				
ANR	90337	AssignmentExpression	FC ( imports_function ) = NULL		90258	0		=			
ANR	90338	CallExpression	FC ( imports_function )		90258	0					
ANR	90339	Callee	FC		90258	0					
ANR	90340	Identifier	FC		90258	0					
ANR	90341	ArgumentList	imports_function		90258	1					
ANR	90342	Argument	imports_function		90258	0					
ANR	90343	Identifier	imports_function		90258	0					
ANR	90344	Identifier	NULL		90258	1					
ANR	90345	IfStatement	if ( FC ( imports_const ) )		90258	2					
ANR	90346	Condition	FC ( imports_const )	257:5:7439:7455	90258	0	True				
ANR	90347	CallExpression	FC ( imports_const )		90258	0					
ANR	90348	Callee	FC		90258	0					
ANR	90349	Identifier	FC		90258	0					
ANR	90350	ArgumentList	imports_const		90258	1					
ANR	90351	Argument	imports_const		90258	0					
ANR	90352	Identifier	imports_const		90258	0					
ANR	90353	CompoundStatement		14:24:265:265	90258	1					
ANR	90354	ExpressionStatement	zend_hash_destroy ( FC ( imports_const ) )	258:2:7462:7498	90258	0	True				
ANR	90355	CallExpression	zend_hash_destroy ( FC ( imports_const ) )		90258	0					
ANR	90356	Callee	zend_hash_destroy		90258	0					
ANR	90357	Identifier	zend_hash_destroy		90258	0					
ANR	90358	ArgumentList	FC ( imports_const )		90258	1					
ANR	90359	Argument	FC ( imports_const )		90258	0					
ANR	90360	CallExpression	FC ( imports_const )		90258	0					
ANR	90361	Callee	FC		90258	0					
ANR	90362	Identifier	FC		90258	0					
ANR	90363	ArgumentList	imports_const		90258	1					
ANR	90364	Argument	imports_const		90258	0					
ANR	90365	Identifier	imports_const		90258	0					
ANR	90366	ExpressionStatement	efree ( FC ( imports_const ) )	259:2:7502:7526	90258	1	True				
ANR	90367	CallExpression	efree ( FC ( imports_const ) )		90258	0					
ANR	90368	Callee	efree		90258	0					
ANR	90369	Identifier	efree		90258	0					
ANR	90370	ArgumentList	FC ( imports_const )		90258	1					
ANR	90371	Argument	FC ( imports_const )		90258	0					
ANR	90372	CallExpression	FC ( imports_const )		90258	0					
ANR	90373	Callee	FC		90258	0					
ANR	90374	Identifier	FC		90258	0					
ANR	90375	ArgumentList	imports_const		90258	1					
ANR	90376	Argument	imports_const		90258	0					
ANR	90377	Identifier	imports_const		90258	0					
ANR	90378	ExpressionStatement	FC ( imports_const ) = NULL	260:2:7530:7554	90258	2	True				
ANR	90379	AssignmentExpression	FC ( imports_const ) = NULL		90258	0		=			
ANR	90380	CallExpression	FC ( imports_const )		90258	0					
ANR	90381	Callee	FC		90258	0					
ANR	90382	Identifier	FC		90258	0					
ANR	90383	ArgumentList	imports_const		90258	1					
ANR	90384	Argument	imports_const		90258	0					
ANR	90385	Identifier	imports_const		90258	0					
ANR	90386	Identifier	NULL		90258	1					
ANR	90387	ReturnType	static void		90258	1					
ANR	90388	Identifier	zend_reset_import_tables		90258	2					
ANR	90389	ParameterList			90258	3					
ANR	90390	CFGEntryNode	ENTRY		90258		True				
ANR	90391	CFGExitNode	EXIT		90258		True				
ANR	90392	Symbol	imports		90258						
ANR	90393	Symbol	NULL		90258						
ANR	90394	Symbol	imports_const		90258						
ANR	90395	Symbol	FC		90258						
ANR	90396	Symbol	imports_function		90258						
ANR	90397	Function	zend_end_namespace	265:0:7572:7784							
ANR	90398	FunctionDef	zend_end_namespace ()		90397	0					
ANR	90399	CompoundStatement		265:47:7619:7784	90397	0					
ANR	90400	ExpressionStatement	FC ( in_namespace ) = 0	266:1:7622:7642	90397	0	True				
ANR	90401	AssignmentExpression	FC ( in_namespace ) = 0		90397	0		=			
ANR	90402	CallExpression	FC ( in_namespace )		90397	0					
ANR	90403	Callee	FC		90397	0					
ANR	90404	Identifier	FC		90397	0					
ANR	90405	ArgumentList	in_namespace		90397	1					
ANR	90406	Argument	in_namespace		90397	0					
ANR	90407	Identifier	in_namespace		90397	0					
ANR	90408	PrimaryExpression	0		90397	1					
ANR	90409	ExpressionStatement	zend_reset_import_tables ( )	267:1:7645:7671	90397	1	True				
ANR	90410	CallExpression	zend_reset_import_tables ( )		90397	0					
ANR	90411	Callee	zend_reset_import_tables		90397	0					
ANR	90412	Identifier	zend_reset_import_tables		90397	0					
ANR	90413	ArgumentList			90397	1					
ANR	90414	IfStatement	if ( FC ( current_namespace ) )		90397	2					
ANR	90415	Condition	FC ( current_namespace )	268:5:7678:7698	90397	0	True				
ANR	90416	CallExpression	FC ( current_namespace )		90397	0					
ANR	90417	Callee	FC		90397	0					
ANR	90418	Identifier	FC		90397	0					
ANR	90419	ArgumentList	current_namespace		90397	1					
ANR	90420	Argument	current_namespace		90397	0					
ANR	90421	Identifier	current_namespace		90397	0					
ANR	90422	CompoundStatement		4:28:81:81	90397	1					
ANR	90423	ExpressionStatement	zend_string_release ( FC ( current_namespace ) )	269:2:7705:7747	90397	0	True				
ANR	90424	CallExpression	zend_string_release ( FC ( current_namespace ) )		90397	0					
ANR	90425	Callee	zend_string_release		90397	0					
ANR	90426	Identifier	zend_string_release		90397	0					
ANR	90427	ArgumentList	FC ( current_namespace )		90397	1					
ANR	90428	Argument	FC ( current_namespace )		90397	0					
ANR	90429	CallExpression	FC ( current_namespace )		90397	0					
ANR	90430	Callee	FC		90397	0					
ANR	90431	Identifier	FC		90397	0					
ANR	90432	ArgumentList	current_namespace		90397	1					
ANR	90433	Argument	current_namespace		90397	0					
ANR	90434	Identifier	current_namespace		90397	0					
ANR	90435	ExpressionStatement	FC ( current_namespace ) = NULL	270:2:7751:7779	90397	1	True				
ANR	90436	AssignmentExpression	FC ( current_namespace ) = NULL		90397	0		=			
ANR	90437	CallExpression	FC ( current_namespace )		90397	0					
ANR	90438	Callee	FC		90397	0					
ANR	90439	Identifier	FC		90397	0					
ANR	90440	ArgumentList	current_namespace		90397	1					
ANR	90441	Argument	current_namespace		90397	0					
ANR	90442	Identifier	current_namespace		90397	0					
ANR	90443	Identifier	NULL		90397	1					
ANR	90444	ReturnType	static void		90397	1					
ANR	90445	Identifier	zend_end_namespace		90397	2					
ANR	90446	ParameterList			90397	3					
ANR	90447	CFGEntryNode	ENTRY		90397		True				
ANR	90448	CFGExitNode	EXIT		90397		True				
ANR	90449	Symbol	NULL		90397						
ANR	90450	Symbol	in_namespace		90397						
ANR	90451	Symbol	current_namespace		90397						
ANR	90452	Symbol	FC		90397						
ANR	90453	Function	zend_file_context_begin	275:0:7797:8101							
ANR	90454	FunctionDef	zend_file_context_begin (zend_file_context * prev_context)		90453	0					
ANR	90455	CompoundStatement		276:0:7869:8101	90453	0					
ANR	90456	ExpressionStatement	* prev_context = CG ( file_context )	277:1:7872:7904	90453	0	True				
ANR	90457	AssignmentExpression	* prev_context = CG ( file_context )		90453	0		=			
ANR	90458	UnaryOperationExpression	* prev_context		90453	0					
ANR	90459	UnaryOperator	*		90453	0					
ANR	90460	Identifier	prev_context		90453	1					
ANR	90461	CallExpression	CG ( file_context )		90453	1					
ANR	90462	Callee	CG		90453	0					
ANR	90463	Identifier	CG		90453	0					
ANR	90464	ArgumentList	file_context		90453	1					
ANR	90465	Argument	file_context		90453	0					
ANR	90466	Identifier	file_context		90453	0					
ANR	90467	ExpressionStatement	FC ( imports ) = NULL	278:1:7907:7925	90453	1	True				
ANR	90468	AssignmentExpression	FC ( imports ) = NULL		90453	0		=			
ANR	90469	CallExpression	FC ( imports )		90453	0					
ANR	90470	Callee	FC		90453	0					
ANR	90471	Identifier	FC		90453	0					
ANR	90472	ArgumentList	imports		90453	1					
ANR	90473	Argument	imports		90453	0					
ANR	90474	Identifier	imports		90453	0					
ANR	90475	Identifier	NULL		90453	1					
ANR	90476	ExpressionStatement	FC ( imports_function ) = NULL	279:1:7928:7955	90453	2	True				
ANR	90477	AssignmentExpression	FC ( imports_function ) = NULL		90453	0		=			
ANR	90478	CallExpression	FC ( imports_function )		90453	0					
ANR	90479	Callee	FC		90453	0					
ANR	90480	Identifier	FC		90453	0					
ANR	90481	ArgumentList	imports_function		90453	1					
ANR	90482	Argument	imports_function		90453	0					
ANR	90483	Identifier	imports_function		90453	0					
ANR	90484	Identifier	NULL		90453	1					
ANR	90485	ExpressionStatement	FC ( imports_const ) = NULL	280:1:7958:7982	90453	3	True				
ANR	90486	AssignmentExpression	FC ( imports_const ) = NULL		90453	0		=			
ANR	90487	CallExpression	FC ( imports_const )		90453	0					
ANR	90488	Callee	FC		90453	0					
ANR	90489	Identifier	FC		90453	0					
ANR	90490	ArgumentList	imports_const		90453	1					
ANR	90491	Argument	imports_const		90453	0					
ANR	90492	Identifier	imports_const		90453	0					
ANR	90493	Identifier	NULL		90453	1					
ANR	90494	ExpressionStatement	FC ( current_namespace ) = NULL	281:1:7985:8013	90453	4	True				
ANR	90495	AssignmentExpression	FC ( current_namespace ) = NULL		90453	0		=			
ANR	90496	CallExpression	FC ( current_namespace )		90453	0					
ANR	90497	Callee	FC		90453	0					
ANR	90498	Identifier	FC		90453	0					
ANR	90499	ArgumentList	current_namespace		90453	1					
ANR	90500	Argument	current_namespace		90453	0					
ANR	90501	Identifier	current_namespace		90453	0					
ANR	90502	Identifier	NULL		90453	1					
ANR	90503	ExpressionStatement	FC ( in_namespace ) = 0	282:1:8016:8036	90453	5	True				
ANR	90504	AssignmentExpression	FC ( in_namespace ) = 0		90453	0		=			
ANR	90505	CallExpression	FC ( in_namespace )		90453	0					
ANR	90506	Callee	FC		90453	0					
ANR	90507	Identifier	FC		90453	0					
ANR	90508	ArgumentList	in_namespace		90453	1					
ANR	90509	Argument	in_namespace		90453	0					
ANR	90510	Identifier	in_namespace		90453	0					
ANR	90511	PrimaryExpression	0		90453	1					
ANR	90512	ExpressionStatement	FC ( has_bracketed_namespaces ) = 0	283:1:8039:8071	90453	6	True				
ANR	90513	AssignmentExpression	FC ( has_bracketed_namespaces ) = 0		90453	0		=			
ANR	90514	CallExpression	FC ( has_bracketed_namespaces )		90453	0					
ANR	90515	Callee	FC		90453	0					
ANR	90516	Identifier	FC		90453	0					
ANR	90517	ArgumentList	has_bracketed_namespaces		90453	1					
ANR	90518	Argument	has_bracketed_namespaces		90453	0					
ANR	90519	Identifier	has_bracketed_namespaces		90453	0					
ANR	90520	PrimaryExpression	0		90453	1					
ANR	90521	ExpressionStatement	FC ( declarables ) . ticks = 0	284:1:8074:8099	90453	7	True				
ANR	90522	AssignmentExpression	FC ( declarables ) . ticks = 0		90453	0		=			
ANR	90523	MemberAccess	FC ( declarables ) . ticks		90453	0					
ANR	90524	CallExpression	FC ( declarables )		90453	0					
ANR	90525	Callee	FC		90453	0					
ANR	90526	Identifier	FC		90453	0					
ANR	90527	ArgumentList	declarables		90453	1					
ANR	90528	Argument	declarables		90453	0					
ANR	90529	Identifier	declarables		90453	0					
ANR	90530	Identifier	ticks		90453	1					
ANR	90531	PrimaryExpression	0		90453	1					
ANR	90532	ReturnType	void		90453	1					
ANR	90533	Identifier	zend_file_context_begin		90453	2					
ANR	90534	ParameterList	zend_file_context * prev_context		90453	3					
ANR	90535	Parameter	zend_file_context * prev_context	275:29:7826:7856	90453	0	True				
ANR	90536	ParameterType	zend_file_context *		90453	0					
ANR	90537	Identifier	prev_context		90453	1					
ANR	90538	CFGEntryNode	ENTRY		90453		True				
ANR	90539	CFGExitNode	EXIT		90453		True				
ANR	90540	Symbol	imports		90453						
ANR	90541	Symbol	NULL		90453						
ANR	90542	Symbol	CG		90453						
ANR	90543	Symbol	in_namespace		90453						
ANR	90544	Symbol	* prev_context		90453						
ANR	90545	Symbol	has_bracketed_namespaces		90453						
ANR	90546	Symbol	imports_const		90453						
ANR	90547	Symbol	imports_function		90453						
ANR	90548	Symbol	declarables		90453						
ANR	90549	Symbol	current_namespace		90453						
ANR	90550	Symbol	prev_context		90453						
ANR	90551	Symbol	file_context		90453						
ANR	90552	Symbol	FC		90453						
ANR	90553	Symbol	FC ( declarables ) . ticks		90453						
ANR	90554	Function	zend_file_context_end	288:0:8114:8244							
ANR	90555	FunctionDef	zend_file_context_end (zend_file_context * prev_context)		90554	0					
ANR	90556	CompoundStatement		289:0:8184:8244	90554	0					
ANR	90557	ExpressionStatement	zend_end_namespace ( )	290:1:8187:8207	90554	0	True				
ANR	90558	CallExpression	zend_end_namespace ( )		90554	0					
ANR	90559	Callee	zend_end_namespace		90554	0					
ANR	90560	Identifier	zend_end_namespace		90554	0					
ANR	90561	ArgumentList			90554	1					
ANR	90562	ExpressionStatement	CG ( file_context ) = * prev_context	291:1:8210:8242	90554	1	True				
ANR	90563	AssignmentExpression	CG ( file_context ) = * prev_context		90554	0		=			
ANR	90564	CallExpression	CG ( file_context )		90554	0					
ANR	90565	Callee	CG		90554	0					
ANR	90566	Identifier	CG		90554	0					
ANR	90567	ArgumentList	file_context		90554	1					
ANR	90568	Argument	file_context		90554	0					
ANR	90569	Identifier	file_context		90554	0					
ANR	90570	UnaryOperationExpression	* prev_context		90554	1					
ANR	90571	UnaryOperator	*		90554	0					
ANR	90572	Identifier	prev_context		90554	1					
ANR	90573	ReturnType	void		90554	1					
ANR	90574	Identifier	zend_file_context_end		90554	2					
ANR	90575	ParameterList	zend_file_context * prev_context		90554	3					
ANR	90576	Parameter	zend_file_context * prev_context	288:27:8141:8171	90554	0	True				
ANR	90577	ParameterType	zend_file_context *		90554	0					
ANR	90578	Identifier	prev_context		90554	1					
ANR	90579	CFGEntryNode	ENTRY		90554		True				
ANR	90580	CFGExitNode	EXIT		90554		True				
ANR	90581	Symbol	CG		90554						
ANR	90582	Symbol	* prev_context		90554						
ANR	90583	Symbol	prev_context		90554						
ANR	90584	Symbol	file_context		90554						
ANR	90585	Function	zend_init_compiler_data_structures	295:0:8257:8606							
ANR	90586	FunctionDef	zend_init_compiler_data_structures ()		90585	0					
ANR	90587	CompoundStatement		296:0:8313:8606	90585	0					
ANR	90588	ExpressionStatement	"zend_stack_init ( & CG ( loop_var_stack ) , sizeof ( zend_loop_var ) )"	297:1:8316:8375	90585	0	True				
ANR	90589	CallExpression	"zend_stack_init ( & CG ( loop_var_stack ) , sizeof ( zend_loop_var ) )"		90585	0					
ANR	90590	Callee	zend_stack_init		90585	0					
ANR	90591	Identifier	zend_stack_init		90585	0					
ANR	90592	ArgumentList	& CG ( loop_var_stack )		90585	1					
ANR	90593	Argument	& CG ( loop_var_stack )		90585	0					
ANR	90594	UnaryOperationExpression	& CG ( loop_var_stack )		90585	0					
ANR	90595	UnaryOperator	&		90585	0					
ANR	90596	CallExpression	CG ( loop_var_stack )		90585	1					
ANR	90597	Callee	CG		90585	0					
ANR	90598	Identifier	CG		90585	0					
ANR	90599	ArgumentList	loop_var_stack		90585	1					
ANR	90600	Argument	loop_var_stack		90585	0					
ANR	90601	Identifier	loop_var_stack		90585	0					
ANR	90602	Argument	sizeof ( zend_loop_var )		90585	1					
ANR	90603	SizeofExpression	sizeof ( zend_loop_var )		90585	0					
ANR	90604	Sizeof	sizeof		90585	0					
ANR	90605	SizeofOperand	zend_loop_var		90585	1					
ANR	90606	ExpressionStatement	"zend_stack_init ( & CG ( delayed_oplines_stack ) , sizeof ( zend_op ) )"	298:1:8378:8438	90585	1	True				
ANR	90607	CallExpression	"zend_stack_init ( & CG ( delayed_oplines_stack ) , sizeof ( zend_op ) )"		90585	0					
ANR	90608	Callee	zend_stack_init		90585	0					
ANR	90609	Identifier	zend_stack_init		90585	0					
ANR	90610	ArgumentList	& CG ( delayed_oplines_stack )		90585	1					
ANR	90611	Argument	& CG ( delayed_oplines_stack )		90585	0					
ANR	90612	UnaryOperationExpression	& CG ( delayed_oplines_stack )		90585	0					
ANR	90613	UnaryOperator	&		90585	0					
ANR	90614	CallExpression	CG ( delayed_oplines_stack )		90585	1					
ANR	90615	Callee	CG		90585	0					
ANR	90616	Identifier	CG		90585	0					
ANR	90617	ArgumentList	delayed_oplines_stack		90585	1					
ANR	90618	Argument	delayed_oplines_stack		90585	0					
ANR	90619	Identifier	delayed_oplines_stack		90585	0					
ANR	90620	Argument	sizeof ( zend_op )		90585	1					
ANR	90621	SizeofExpression	sizeof ( zend_op )		90585	0					
ANR	90622	Sizeof	sizeof		90585	0					
ANR	90623	SizeofOperand	zend_op		90585	1					
ANR	90624	ExpressionStatement	CG ( active_class_entry ) = NULL	299:1:8441:8470	90585	2	True				
ANR	90625	AssignmentExpression	CG ( active_class_entry ) = NULL		90585	0		=			
ANR	90626	CallExpression	CG ( active_class_entry )		90585	0					
ANR	90627	Callee	CG		90585	0					
ANR	90628	Identifier	CG		90585	0					
ANR	90629	ArgumentList	active_class_entry		90585	1					
ANR	90630	Argument	active_class_entry		90585	0					
ANR	90631	Identifier	active_class_entry		90585	0					
ANR	90632	Identifier	NULL		90585	1					
ANR	90633	ExpressionStatement	CG ( in_compilation ) = 0	300:1:8473:8495	90585	3	True				
ANR	90634	AssignmentExpression	CG ( in_compilation ) = 0		90585	0		=			
ANR	90635	CallExpression	CG ( in_compilation )		90585	0					
ANR	90636	Callee	CG		90585	0					
ANR	90637	Identifier	CG		90585	0					
ANR	90638	ArgumentList	in_compilation		90585	1					
ANR	90639	Argument	in_compilation		90585	0					
ANR	90640	Identifier	in_compilation		90585	0					
ANR	90641	PrimaryExpression	0		90585	1					
ANR	90642	ExpressionStatement	CG ( start_lineno ) = 0	301:1:8498:8518	90585	4	True				
ANR	90643	AssignmentExpression	CG ( start_lineno ) = 0		90585	0		=			
ANR	90644	CallExpression	CG ( start_lineno )		90585	0					
ANR	90645	Callee	CG		90585	0					
ANR	90646	Identifier	CG		90585	0					
ANR	90647	ArgumentList	start_lineno		90585	1					
ANR	90648	Argument	start_lineno		90585	0					
ANR	90649	Identifier	start_lineno		90585	0					
ANR	90650	PrimaryExpression	0		90585	1					
ANR	90651	ExpressionStatement	"zend_hash_init ( & CG ( const_filenames ) , 8 , NULL , NULL , 0 )"	302:1:8521:8575	90585	5	True				
ANR	90652	CallExpression	"zend_hash_init ( & CG ( const_filenames ) , 8 , NULL , NULL , 0 )"		90585	0					
ANR	90653	Callee	zend_hash_init		90585	0					
ANR	90654	Identifier	zend_hash_init		90585	0					
ANR	90655	ArgumentList	& CG ( const_filenames )		90585	1					
ANR	90656	Argument	& CG ( const_filenames )		90585	0					
ANR	90657	UnaryOperationExpression	& CG ( const_filenames )		90585	0					
ANR	90658	UnaryOperator	&		90585	0					
ANR	90659	CallExpression	CG ( const_filenames )		90585	1					
ANR	90660	Callee	CG		90585	0					
ANR	90661	Identifier	CG		90585	0					
ANR	90662	ArgumentList	const_filenames		90585	1					
ANR	90663	Argument	const_filenames		90585	0					
ANR	90664	Identifier	const_filenames		90585	0					
ANR	90665	Argument	8		90585	1					
ANR	90666	PrimaryExpression	8		90585	0					
ANR	90667	Argument	NULL		90585	2					
ANR	90668	Identifier	NULL		90585	0					
ANR	90669	Argument	NULL		90585	3					
ANR	90670	Identifier	NULL		90585	0					
ANR	90671	Argument	0		90585	4					
ANR	90672	PrimaryExpression	0		90585	0					
ANR	90673	ExpressionStatement	CG ( encoding_declared ) = 0	304:1:8579:8604	90585	6	True				
ANR	90674	AssignmentExpression	CG ( encoding_declared ) = 0		90585	0		=			
ANR	90675	CallExpression	CG ( encoding_declared )		90585	0					
ANR	90676	Callee	CG		90585	0					
ANR	90677	Identifier	CG		90585	0					
ANR	90678	ArgumentList	encoding_declared		90585	1					
ANR	90679	Argument	encoding_declared		90585	0					
ANR	90680	Identifier	encoding_declared		90585	0					
ANR	90681	PrimaryExpression	0		90585	1					
ANR	90682	ReturnType	void		90585	1					
ANR	90683	Identifier	zend_init_compiler_data_structures		90585	2					
ANR	90684	ParameterList			90585	3					
ANR	90685	CFGEntryNode	ENTRY		90585		True				
ANR	90686	CFGExitNode	EXIT		90585		True				
ANR	90687	Symbol	NULL		90585						
ANR	90688	Symbol	loop_var_stack		90585						
ANR	90689	Symbol	CG		90585						
ANR	90690	Symbol	encoding_declared		90585						
ANR	90691	Symbol	const_filenames		90585						
ANR	90692	Symbol	active_class_entry		90585						
ANR	90693	Symbol	start_lineno		90585						
ANR	90694	Symbol	delayed_oplines_stack		90585						
ANR	90695	Symbol	in_compilation		90585						
ANR	90696	Symbol	& CG		90585						
ANR	90697	Function	file_handle_dtor	308:0:8619:8713							
ANR	90698	FunctionDef	file_handle_dtor (zend_file_handle * fh)		90697	0					
ANR	90699	CompoundStatement		309:0:8682:8713	90697	0					
ANR	90700	ExpressionStatement	zend_file_handle_dtor ( fh )	311:1:8686:8711	90697	0	True				
ANR	90701	CallExpression	zend_file_handle_dtor ( fh )		90697	0					
ANR	90702	Callee	zend_file_handle_dtor		90697	0					
ANR	90703	Identifier	zend_file_handle_dtor		90697	0					
ANR	90704	ArgumentList	fh		90697	1					
ANR	90705	Argument	fh		90697	0					
ANR	90706	Identifier	fh		90697	0					
ANR	90707	ReturnType	ZEND_API void		90697	1					
ANR	90708	Identifier	file_handle_dtor		90697	2					
ANR	90709	ParameterList	zend_file_handle * fh		90697	3					
ANR	90710	Parameter	zend_file_handle * fh	308:31:8650:8669	90697	0	True				
ANR	90711	ParameterType	zend_file_handle *		90697	0					
ANR	90712	Identifier	fh		90697	1					
ANR	90713	CFGEntryNode	ENTRY		90697		True				
ANR	90714	CFGExitNode	EXIT		90697		True				
ANR	90715	Symbol	fh		90697						
ANR	90716	Function	init_compiler	315:0:8726:9139							
ANR	90717	FunctionDef	init_compiler ()		90716	0					
ANR	90718	CompoundStatement		316:0:8761:9139	90716	0					
ANR	90719	ExpressionStatement	CG ( arena ) = zend_arena_create ( 64 * 1024 )	317:1:8764:8804	90716	0	True				
ANR	90720	AssignmentExpression	CG ( arena ) = zend_arena_create ( 64 * 1024 )		90716	0		=			
ANR	90721	CallExpression	CG ( arena )		90716	0					
ANR	90722	Callee	CG		90716	0					
ANR	90723	Identifier	CG		90716	0					
ANR	90724	ArgumentList	arena		90716	1					
ANR	90725	Argument	arena		90716	0					
ANR	90726	Identifier	arena		90716	0					
ANR	90727	CallExpression	zend_arena_create ( 64 * 1024 )		90716	1					
ANR	90728	Callee	zend_arena_create		90716	0					
ANR	90729	Identifier	zend_arena_create		90716	0					
ANR	90730	ArgumentList	64 * 1024		90716	1					
ANR	90731	Argument	64 * 1024		90716	0					
ANR	90732	MultiplicativeExpression	64 * 1024		90716	0		*			
ANR	90733	PrimaryExpression	64		90716	0					
ANR	90734	PrimaryExpression	1024		90716	1					
ANR	90735	ExpressionStatement	CG ( active_op_array ) = NULL	318:1:8807:8833	90716	1	True				
ANR	90736	AssignmentExpression	CG ( active_op_array ) = NULL		90716	0		=			
ANR	90737	CallExpression	CG ( active_op_array )		90716	0					
ANR	90738	Callee	CG		90716	0					
ANR	90739	Identifier	CG		90716	0					
ANR	90740	ArgumentList	active_op_array		90716	1					
ANR	90741	Argument	active_op_array		90716	0					
ANR	90742	Identifier	active_op_array		90716	0					
ANR	90743	Identifier	NULL		90716	1					
ANR	90744	ExpressionStatement	"memset ( & CG ( context ) , 0 , sizeof ( CG ( context ) ) )"	319:1:8836:8880	90716	2	True				
ANR	90745	CallExpression	"memset ( & CG ( context ) , 0 , sizeof ( CG ( context ) ) )"		90716	0					
ANR	90746	Callee	memset		90716	0					
ANR	90747	Identifier	memset		90716	0					
ANR	90748	ArgumentList	& CG ( context )		90716	1					
ANR	90749	Argument	& CG ( context )		90716	0					
ANR	90750	UnaryOperationExpression	& CG ( context )		90716	0					
ANR	90751	UnaryOperator	&		90716	0					
ANR	90752	CallExpression	CG ( context )		90716	1					
ANR	90753	Callee	CG		90716	0					
ANR	90754	Identifier	CG		90716	0					
ANR	90755	ArgumentList	context		90716	1					
ANR	90756	Argument	context		90716	0					
ANR	90757	Identifier	context		90716	0					
ANR	90758	Argument	0		90716	1					
ANR	90759	PrimaryExpression	0		90716	0					
ANR	90760	Argument	sizeof ( CG ( context ) )		90716	2					
ANR	90761	SizeofExpression	sizeof ( CG ( context ) )		90716	0					
ANR	90762	Sizeof	sizeof		90716	0					
ANR	90763	CallExpression	CG ( context )		90716	1					
ANR	90764	Callee	CG		90716	0					
ANR	90765	Identifier	CG		90716	0					
ANR	90766	ArgumentList	context		90716	1					
ANR	90767	Argument	context		90716	0					
ANR	90768	Identifier	context		90716	0					
ANR	90769	ExpressionStatement	zend_init_compiler_data_structures ( )	320:1:8883:8919	90716	3	True				
ANR	90770	CallExpression	zend_init_compiler_data_structures ( )		90716	0					
ANR	90771	Callee	zend_init_compiler_data_structures		90716	0					
ANR	90772	Identifier	zend_init_compiler_data_structures		90716	0					
ANR	90773	ArgumentList			90716	1					
ANR	90774	ExpressionStatement	zend_init_rsrc_list ( )	321:1:8922:8943	90716	4	True				
ANR	90775	CallExpression	zend_init_rsrc_list ( )		90716	0					
ANR	90776	Callee	zend_init_rsrc_list		90716	0					
ANR	90777	Identifier	zend_init_rsrc_list		90716	0					
ANR	90778	ArgumentList			90716	1					
ANR	90779	ExpressionStatement	"zend_hash_init ( & CG ( filenames_table ) , 8 , NULL , ZVAL_PTR_DTOR , 0 )"	322:1:8946:9009	90716	5	True				
ANR	90780	CallExpression	"zend_hash_init ( & CG ( filenames_table ) , 8 , NULL , ZVAL_PTR_DTOR , 0 )"		90716	0					
ANR	90781	Callee	zend_hash_init		90716	0					
ANR	90782	Identifier	zend_hash_init		90716	0					
ANR	90783	ArgumentList	& CG ( filenames_table )		90716	1					
ANR	90784	Argument	& CG ( filenames_table )		90716	0					
ANR	90785	UnaryOperationExpression	& CG ( filenames_table )		90716	0					
ANR	90786	UnaryOperator	&		90716	0					
ANR	90787	CallExpression	CG ( filenames_table )		90716	1					
ANR	90788	Callee	CG		90716	0					
ANR	90789	Identifier	CG		90716	0					
ANR	90790	ArgumentList	filenames_table		90716	1					
ANR	90791	Argument	filenames_table		90716	0					
ANR	90792	Identifier	filenames_table		90716	0					
ANR	90793	Argument	8		90716	1					
ANR	90794	PrimaryExpression	8		90716	0					
ANR	90795	Argument	NULL		90716	2					
ANR	90796	Identifier	NULL		90716	0					
ANR	90797	Argument	ZVAL_PTR_DTOR		90716	3					
ANR	90798	Identifier	ZVAL_PTR_DTOR		90716	0					
ANR	90799	Argument	0		90716	4					
ANR	90800	PrimaryExpression	0		90716	0					
ANR	90801	Statement	zend_llist_init	323:1:9012:9026	90716	6	True				
ANR	90802	Statement	(	323:16:9027:9027	90716	7	True				
ANR	90803	Statement	&	323:17:9028:9028	90716	8	True				
ANR	90804	Statement	CG	323:18:9029:9030	90716	9	True				
ANR	90805	Statement	(	323:20:9031:9031	90716	10	True				
ANR	90806	Statement	open_files	323:21:9032:9041	90716	11	True				
ANR	90807	Statement	)	323:31:9042:9042	90716	12	True				
ANR	90808	Statement	","	323:32:9043:9043	90716	13	True				
ANR	90809	Statement	sizeof	323:34:9045:9050	90716	14	True				
ANR	90810	Statement	(	323:40:9051:9051	90716	15	True				
ANR	90811	Statement	zend_file_handle	323:41:9052:9067	90716	16	True				
ANR	90812	Statement	)	323:57:9068:9068	90716	17	True				
ANR	90813	Statement	","	323:58:9069:9069	90716	18	True				
ANR	90814	Statement	(	323:60:9071:9071	90716	19	True				
ANR	90815	Statement	void	323:61:9072:9075	90716	20	True				
ANR	90816	Statement	(	323:66:9077:9077	90716	21	True				
ANR	90817	Statement	*	323:67:9078:9078	90716	22	True				
ANR	90818	Statement	)	323:68:9079:9079	90716	23	True				
ANR	90819	Statement	(	323:69:9080:9080	90716	24	True				
ANR	90820	Statement	void	323:70:9081:9084	90716	25	True				
ANR	90821	Statement	*	323:75:9086:9086	90716	26	True				
ANR	90822	Statement	)	323:76:9087:9087	90716	27	True				
ANR	90823	Statement	)	323:77:9088:9088	90716	28	True				
ANR	90824	Statement	file_handle_dtor	323:79:9090:9105	90716	29	True				
ANR	90825	Statement	","	323:95:9106:9106	90716	30	True				
ANR	90826	Statement	0	323:97:9108:9108	90716	31	True				
ANR	90827	Statement	)	323:98:9109:9109	90716	32	True				
ANR	90828	ExpressionStatement		323:99:9110:9110	90716	33	True				
ANR	90829	ExpressionStatement	CG ( unclean_shutdown ) = 0	324:1:9113:9137	90716	34	True				
ANR	90830	AssignmentExpression	CG ( unclean_shutdown ) = 0		90716	0		=			
ANR	90831	CallExpression	CG ( unclean_shutdown )		90716	0					
ANR	90832	Callee	CG		90716	0					
ANR	90833	Identifier	CG		90716	0					
ANR	90834	ArgumentList	unclean_shutdown		90716	1					
ANR	90835	Argument	unclean_shutdown		90716	0					
ANR	90836	Identifier	unclean_shutdown		90716	0					
ANR	90837	PrimaryExpression	0		90716	1					
ANR	90838	ReturnType	void		90716	1					
ANR	90839	Identifier	init_compiler		90716	2					
ANR	90840	ParameterList			90716	3					
ANR	90841	CFGEntryNode	ENTRY		90716		True				
ANR	90842	CFGExitNode	EXIT		90716		True				
ANR	90843	Symbol	unclean_shutdown		90716						
ANR	90844	Symbol	NULL		90716						
ANR	90845	Symbol	CG		90716						
ANR	90846	Symbol	active_op_array		90716						
ANR	90847	Symbol	filenames_table		90716						
ANR	90848	Symbol	zend_arena_create		90716						
ANR	90849	Symbol	context		90716						
ANR	90850	Symbol	arena		90716						
ANR	90851	Symbol	& CG		90716						
ANR	90852	Symbol	ZVAL_PTR_DTOR		90716						
ANR	90853	Function	shutdown_compiler	328:0:9152:9400							
ANR	90854	FunctionDef	shutdown_compiler ()		90853	0					
ANR	90855	CompoundStatement		329:0:9191:9400	90853	0					
ANR	90856	ExpressionStatement	zend_stack_destroy ( & CG ( loop_var_stack ) )	330:1:9194:9233	90853	0	True				
ANR	90857	CallExpression	zend_stack_destroy ( & CG ( loop_var_stack ) )		90853	0					
ANR	90858	Callee	zend_stack_destroy		90853	0					
ANR	90859	Identifier	zend_stack_destroy		90853	0					
ANR	90860	ArgumentList	& CG ( loop_var_stack )		90853	1					
ANR	90861	Argument	& CG ( loop_var_stack )		90853	0					
ANR	90862	UnaryOperationExpression	& CG ( loop_var_stack )		90853	0					
ANR	90863	UnaryOperator	&		90853	0					
ANR	90864	CallExpression	CG ( loop_var_stack )		90853	1					
ANR	90865	Callee	CG		90853	0					
ANR	90866	Identifier	CG		90853	0					
ANR	90867	ArgumentList	loop_var_stack		90853	1					
ANR	90868	Argument	loop_var_stack		90853	0					
ANR	90869	Identifier	loop_var_stack		90853	0					
ANR	90870	ExpressionStatement	zend_stack_destroy ( & CG ( delayed_oplines_stack ) )	331:1:9236:9282	90853	1	True				
ANR	90871	CallExpression	zend_stack_destroy ( & CG ( delayed_oplines_stack ) )		90853	0					
ANR	90872	Callee	zend_stack_destroy		90853	0					
ANR	90873	Identifier	zend_stack_destroy		90853	0					
ANR	90874	ArgumentList	& CG ( delayed_oplines_stack )		90853	1					
ANR	90875	Argument	& CG ( delayed_oplines_stack )		90853	0					
ANR	90876	UnaryOperationExpression	& CG ( delayed_oplines_stack )		90853	0					
ANR	90877	UnaryOperator	&		90853	0					
ANR	90878	CallExpression	CG ( delayed_oplines_stack )		90853	1					
ANR	90879	Callee	CG		90853	0					
ANR	90880	Identifier	CG		90853	0					
ANR	90881	ArgumentList	delayed_oplines_stack		90853	1					
ANR	90882	Argument	delayed_oplines_stack		90853	0					
ANR	90883	Identifier	delayed_oplines_stack		90853	0					
ANR	90884	ExpressionStatement	zend_hash_destroy ( & CG ( filenames_table ) )	332:1:9285:9324	90853	2	True				
ANR	90885	CallExpression	zend_hash_destroy ( & CG ( filenames_table ) )		90853	0					
ANR	90886	Callee	zend_hash_destroy		90853	0					
ANR	90887	Identifier	zend_hash_destroy		90853	0					
ANR	90888	ArgumentList	& CG ( filenames_table )		90853	1					
ANR	90889	Argument	& CG ( filenames_table )		90853	0					
ANR	90890	UnaryOperationExpression	& CG ( filenames_table )		90853	0					
ANR	90891	UnaryOperator	&		90853	0					
ANR	90892	CallExpression	CG ( filenames_table )		90853	1					
ANR	90893	Callee	CG		90853	0					
ANR	90894	Identifier	CG		90853	0					
ANR	90895	ArgumentList	filenames_table		90853	1					
ANR	90896	Argument	filenames_table		90853	0					
ANR	90897	Identifier	filenames_table		90853	0					
ANR	90898	ExpressionStatement	zend_hash_destroy ( & CG ( const_filenames ) )	333:1:9327:9366	90853	3	True				
ANR	90899	CallExpression	zend_hash_destroy ( & CG ( const_filenames ) )		90853	0					
ANR	90900	Callee	zend_hash_destroy		90853	0					
ANR	90901	Identifier	zend_hash_destroy		90853	0					
ANR	90902	ArgumentList	& CG ( const_filenames )		90853	1					
ANR	90903	Argument	& CG ( const_filenames )		90853	0					
ANR	90904	UnaryOperationExpression	& CG ( const_filenames )		90853	0					
ANR	90905	UnaryOperator	&		90853	0					
ANR	90906	CallExpression	CG ( const_filenames )		90853	1					
ANR	90907	Callee	CG		90853	0					
ANR	90908	Identifier	CG		90853	0					
ANR	90909	ArgumentList	const_filenames		90853	1					
ANR	90910	Argument	const_filenames		90853	0					
ANR	90911	Identifier	const_filenames		90853	0					
ANR	90912	ExpressionStatement	zend_arena_destroy ( CG ( arena ) )	334:1:9369:9398	90853	4	True				
ANR	90913	CallExpression	zend_arena_destroy ( CG ( arena ) )		90853	0					
ANR	90914	Callee	zend_arena_destroy		90853	0					
ANR	90915	Identifier	zend_arena_destroy		90853	0					
ANR	90916	ArgumentList	CG ( arena )		90853	1					
ANR	90917	Argument	CG ( arena )		90853	0					
ANR	90918	CallExpression	CG ( arena )		90853	0					
ANR	90919	Callee	CG		90853	0					
ANR	90920	Identifier	CG		90853	0					
ANR	90921	ArgumentList	arena		90853	1					
ANR	90922	Argument	arena		90853	0					
ANR	90923	Identifier	arena		90853	0					
ANR	90924	ReturnType	void		90853	1					
ANR	90925	Identifier	shutdown_compiler		90853	2					
ANR	90926	ParameterList			90853	3					
ANR	90927	CFGEntryNode	ENTRY		90853		True				
ANR	90928	CFGExitNode	EXIT		90853		True				
ANR	90929	Symbol	loop_var_stack		90853						
ANR	90930	Symbol	CG		90853						
ANR	90931	Symbol	const_filenames		90853						
ANR	90932	Symbol	filenames_table		90853						
ANR	90933	Symbol	delayed_oplines_stack		90853						
ANR	90934	Symbol	arena		90853						
ANR	90935	Symbol	& CG		90853						
ANR	90936	Function	zend_set_compiled_filename	338:0:9413:9896							
ANR	90937	FunctionDef	zend_set_compiled_filename (zend_string * new_compiled_filename)		90936	0					
ANR	90938	CompoundStatement		339:0:9508:9896	90936	0					
ANR	90939	IdentifierDeclStatement	"zval * p , rv ;"	340:1:9511:9522	90936	0	True				
ANR	90940	IdentifierDecl	* p		90936	0					
ANR	90941	IdentifierDeclType	zval *		90936	0					
ANR	90942	Identifier	p		90936	1					
ANR	90943	IdentifierDecl	rv		90936	1					
ANR	90944	IdentifierDeclType	zval		90936	0					
ANR	90945	Identifier	rv		90936	1					
ANR	90946	IfStatement	"if ( ( p = zend_hash_find ( & CG ( filenames_table ) , new_compiled_filename ) ) )"		90936	1					
ANR	90947	Condition	"p = zend_hash_find ( & CG ( filenames_table ) , new_compiled_filename )"	342:5:9530:9594	90936	0	True				
ANR	90948	AssignmentExpression	"p = zend_hash_find ( & CG ( filenames_table ) , new_compiled_filename )"		90936	0		=			
ANR	90949	Identifier	p		90936	0					
ANR	90950	CallExpression	"zend_hash_find ( & CG ( filenames_table ) , new_compiled_filename )"		90936	1					
ANR	90951	Callee	zend_hash_find		90936	0					
ANR	90952	Identifier	zend_hash_find		90936	0					
ANR	90953	ArgumentList	& CG ( filenames_table )		90936	1					
ANR	90954	Argument	& CG ( filenames_table )		90936	0					
ANR	90955	UnaryOperationExpression	& CG ( filenames_table )		90936	0					
ANR	90956	UnaryOperator	&		90936	0					
ANR	90957	CallExpression	CG ( filenames_table )		90936	1					
ANR	90958	Callee	CG		90936	0					
ANR	90959	Identifier	CG		90936	0					
ANR	90960	ArgumentList	filenames_table		90936	1					
ANR	90961	Argument	filenames_table		90936	0					
ANR	90962	Identifier	filenames_table		90936	0					
ANR	90963	Argument	new_compiled_filename		90936	1					
ANR	90964	Identifier	new_compiled_filename		90936	0					
ANR	90965	CompoundStatement		4:72:88:88	90936	1					
ANR	90966	ExpressionStatement	ZEND_ASSERT ( Z_TYPE_P ( p ) == IS_STRING )	343:2:9601:9638	90936	0	True				
ANR	90967	CallExpression	ZEND_ASSERT ( Z_TYPE_P ( p ) == IS_STRING )		90936	0					
ANR	90968	Callee	ZEND_ASSERT		90936	0					
ANR	90969	Identifier	ZEND_ASSERT		90936	0					
ANR	90970	ArgumentList	Z_TYPE_P ( p ) == IS_STRING		90936	1					
ANR	90971	Argument	Z_TYPE_P ( p ) == IS_STRING		90936	0					
ANR	90972	EqualityExpression	Z_TYPE_P ( p ) == IS_STRING		90936	0		==			
ANR	90973	CallExpression	Z_TYPE_P ( p )		90936	0					
ANR	90974	Callee	Z_TYPE_P		90936	0					
ANR	90975	Identifier	Z_TYPE_P		90936	0					
ANR	90976	ArgumentList	p		90936	1					
ANR	90977	Argument	p		90936	0					
ANR	90978	Identifier	p		90936	0					
ANR	90979	Identifier	IS_STRING		90936	1					
ANR	90980	ExpressionStatement	CG ( compiled_filename ) = Z_STR_P ( p )	344:2:9642:9676	90936	1	True				
ANR	90981	AssignmentExpression	CG ( compiled_filename ) = Z_STR_P ( p )		90936	0		=			
ANR	90982	CallExpression	CG ( compiled_filename )		90936	0					
ANR	90983	Callee	CG		90936	0					
ANR	90984	Identifier	CG		90936	0					
ANR	90985	ArgumentList	compiled_filename		90936	1					
ANR	90986	Argument	compiled_filename		90936	0					
ANR	90987	Identifier	compiled_filename		90936	0					
ANR	90988	CallExpression	Z_STR_P ( p )		90936	1					
ANR	90989	Callee	Z_STR_P		90936	0					
ANR	90990	Identifier	Z_STR_P		90936	0					
ANR	90991	ArgumentList	p		90936	1					
ANR	90992	Argument	p		90936	0					
ANR	90993	Identifier	p		90936	0					
ANR	90994	ReturnStatement	return Z_STR_P ( p ) ;	345:2:9680:9697	90936	2	True				
ANR	90995	CallExpression	Z_STR_P ( p )		90936	0					
ANR	90996	Callee	Z_STR_P		90936	0					
ANR	90997	Identifier	Z_STR_P		90936	0					
ANR	90998	ArgumentList	p		90936	1					
ANR	90999	Argument	p		90936	0					
ANR	91000	Identifier	p		90936	0					
ANR	91001	ExpressionStatement	"ZVAL_STR_COPY ( & rv , new_compiled_filename )"	348:1:9704:9745	90936	2	True				
ANR	91002	CallExpression	"ZVAL_STR_COPY ( & rv , new_compiled_filename )"		90936	0					
ANR	91003	Callee	ZVAL_STR_COPY		90936	0					
ANR	91004	Identifier	ZVAL_STR_COPY		90936	0					
ANR	91005	ArgumentList	& rv		90936	1					
ANR	91006	Argument	& rv		90936	0					
ANR	91007	UnaryOperationExpression	& rv		90936	0					
ANR	91008	UnaryOperator	&		90936	0					
ANR	91009	Identifier	rv		90936	1					
ANR	91010	Argument	new_compiled_filename		90936	1					
ANR	91011	Identifier	new_compiled_filename		90936	0					
ANR	91012	ExpressionStatement	"zend_hash_update ( & CG ( filenames_table ) , new_compiled_filename , & rv )"	349:1:9748:9814	90936	3	True				
ANR	91013	CallExpression	"zend_hash_update ( & CG ( filenames_table ) , new_compiled_filename , & rv )"		90936	0					
ANR	91014	Callee	zend_hash_update		90936	0					
ANR	91015	Identifier	zend_hash_update		90936	0					
ANR	91016	ArgumentList	& CG ( filenames_table )		90936	1					
ANR	91017	Argument	& CG ( filenames_table )		90936	0					
ANR	91018	UnaryOperationExpression	& CG ( filenames_table )		90936	0					
ANR	91019	UnaryOperator	&		90936	0					
ANR	91020	CallExpression	CG ( filenames_table )		90936	1					
ANR	91021	Callee	CG		90936	0					
ANR	91022	Identifier	CG		90936	0					
ANR	91023	ArgumentList	filenames_table		90936	1					
ANR	91024	Argument	filenames_table		90936	0					
ANR	91025	Identifier	filenames_table		90936	0					
ANR	91026	Argument	new_compiled_filename		90936	1					
ANR	91027	Identifier	new_compiled_filename		90936	0					
ANR	91028	Argument	& rv		90936	2					
ANR	91029	UnaryOperationExpression	& rv		90936	0					
ANR	91030	UnaryOperator	&		90936	0					
ANR	91031	Identifier	rv		90936	1					
ANR	91032	ExpressionStatement	CG ( compiled_filename ) = new_compiled_filename	351:1:9818:9863	90936	4	True				
ANR	91033	AssignmentExpression	CG ( compiled_filename ) = new_compiled_filename		90936	0		=			
ANR	91034	CallExpression	CG ( compiled_filename )		90936	0					
ANR	91035	Callee	CG		90936	0					
ANR	91036	Identifier	CG		90936	0					
ANR	91037	ArgumentList	compiled_filename		90936	1					
ANR	91038	Argument	compiled_filename		90936	0					
ANR	91039	Identifier	compiled_filename		90936	0					
ANR	91040	Identifier	new_compiled_filename		90936	1					
ANR	91041	ReturnStatement	return new_compiled_filename ;	352:1:9866:9894	90936	5	True				
ANR	91042	Identifier	new_compiled_filename		90936	0					
ANR	91043	ReturnType	ZEND_API zend_string *		90936	1					
ANR	91044	Identifier	zend_set_compiled_filename		90936	2					
ANR	91045	ParameterList	zend_string * new_compiled_filename		90936	3					
ANR	91046	Parameter	zend_string * new_compiled_filename	338:49:9462:9495	90936	0	True				
ANR	91047	ParameterType	zend_string *		90936	0					
ANR	91048	Identifier	new_compiled_filename		90936	1					
ANR	91049	CFGEntryNode	ENTRY		90936		True				
ANR	91050	CFGExitNode	EXIT		90936		True				
ANR	91051	Symbol	p		90936						
ANR	91052	Symbol	zend_hash_find		90936						
ANR	91053	Symbol	rv		90936						
ANR	91054	Symbol	CG		90936						
ANR	91055	Symbol	new_compiled_filename		90936						
ANR	91056	Symbol	filenames_table		90936						
ANR	91057	Symbol	IS_STRING		90936						
ANR	91058	Symbol	Z_STR_P		90936						
ANR	91059	Symbol	Z_TYPE_P		90936						
ANR	91060	Symbol	compiled_filename		90936						
ANR	91061	Symbol	& CG		90936						
ANR	91062	Symbol	& rv		90936						
ANR	91063	Function	zend_restore_compiled_filename	356:0:9909:10060							
ANR	91064	FunctionDef	zend_restore_compiled_filename (zend_string * original_compiled_filename)		91063	0					
ANR	91065	CompoundStatement		357:0:10005:10060	91063	0					
ANR	91066	ExpressionStatement	CG ( compiled_filename ) = original_compiled_filename	358:1:10008:10058	91063	0	True				
ANR	91067	AssignmentExpression	CG ( compiled_filename ) = original_compiled_filename		91063	0		=			
ANR	91068	CallExpression	CG ( compiled_filename )		91063	0					
ANR	91069	Callee	CG		91063	0					
ANR	91070	Identifier	CG		91063	0					
ANR	91071	ArgumentList	compiled_filename		91063	1					
ANR	91072	Argument	compiled_filename		91063	0					
ANR	91073	Identifier	compiled_filename		91063	0					
ANR	91074	Identifier	original_compiled_filename		91063	1					
ANR	91075	ReturnType	ZEND_API void		91063	1					
ANR	91076	Identifier	zend_restore_compiled_filename		91063	2					
ANR	91077	ParameterList	zend_string * original_compiled_filename		91063	3					
ANR	91078	Parameter	zend_string * original_compiled_filename	356:45:9954:9992	91063	0	True				
ANR	91079	ParameterType	zend_string *		91063	0					
ANR	91080	Identifier	original_compiled_filename		91063	1					
ANR	91081	CFGEntryNode	ENTRY		91063		True				
ANR	91082	CFGExitNode	EXIT		91063		True				
ANR	91083	Symbol	original_compiled_filename		91063						
ANR	91084	Symbol	CG		91063						
ANR	91085	Symbol	compiled_filename		91063						
ANR	91086	Function	zend_get_compiled_filename	362:0:10073:10171							
ANR	91087	FunctionDef	zend_get_compiled_filename ()		91086	0					
ANR	91088	CompoundStatement		363:0:10138:10171	91086	0					
ANR	91089	ReturnStatement	return CG ( compiled_filename ) ;	364:1:10141:10169	91086	0	True				
ANR	91090	CallExpression	CG ( compiled_filename )		91086	0					
ANR	91091	Callee	CG		91086	0					
ANR	91092	Identifier	CG		91086	0					
ANR	91093	ArgumentList	compiled_filename		91086	1					
ANR	91094	Argument	compiled_filename		91086	0					
ANR	91095	Identifier	compiled_filename		91086	0					
ANR	91096	ReturnType	ZEND_API zend_string *		91086	1					
ANR	91097	Identifier	zend_get_compiled_filename		91086	2					
ANR	91098	ParameterList			91086	3					
ANR	91099	CFGEntryNode	ENTRY		91086		True				
ANR	91100	CFGExitNode	EXIT		91086		True				
ANR	91101	Symbol	CG		91086						
ANR	91102	Symbol	compiled_filename		91086						
ANR	91103	Function	zend_get_compiled_lineno	368:0:10184:10265							
ANR	91104	FunctionDef	zend_get_compiled_lineno ()		91103	0					
ANR	91105	CompoundStatement		369:0:10238:10265	91103	0					
ANR	91106	ReturnStatement	return CG ( zend_lineno ) ;	370:1:10241:10263	91103	0	True				
ANR	91107	CallExpression	CG ( zend_lineno )		91103	0					
ANR	91108	Callee	CG		91103	0					
ANR	91109	Identifier	CG		91103	0					
ANR	91110	ArgumentList	zend_lineno		91103	1					
ANR	91111	Argument	zend_lineno		91103	0					
ANR	91112	Identifier	zend_lineno		91103	0					
ANR	91113	ReturnType	ZEND_API int		91103	1					
ANR	91114	Identifier	zend_get_compiled_lineno		91103	2					
ANR	91115	ParameterList			91103	3					
ANR	91116	CFGEntryNode	ENTRY		91103		True				
ANR	91117	CFGExitNode	EXIT		91103		True				
ANR	91118	Symbol	CG		91103						
ANR	91119	Symbol	zend_lineno		91103						
ANR	91120	Function	zend_is_compiling	374:0:10278:10361							
ANR	91121	FunctionDef	zend_is_compiling ()		91120	0					
ANR	91122	CompoundStatement		375:0:10331:10361	91120	0					
ANR	91123	ReturnStatement	return CG ( in_compilation ) ;	376:1:10334:10359	91120	0	True				
ANR	91124	CallExpression	CG ( in_compilation )		91120	0					
ANR	91125	Callee	CG		91120	0					
ANR	91126	Identifier	CG		91120	0					
ANR	91127	ArgumentList	in_compilation		91120	1					
ANR	91128	Argument	in_compilation		91120	0					
ANR	91129	Identifier	in_compilation		91120	0					
ANR	91130	ReturnType	ZEND_API zend_bool		91120	1					
ANR	91131	Identifier	zend_is_compiling		91120	2					
ANR	91132	ParameterList			91120	3					
ANR	91133	CFGEntryNode	ENTRY		91120		True				
ANR	91134	CFGExitNode	EXIT		91120		True				
ANR	91135	Symbol	CG		91120						
ANR	91136	Symbol	in_compilation		91120						
ANR	91137	Function	get_temporary_variable	380:0:10374:10483							
ANR	91138	FunctionDef	get_temporary_variable (zend_op_array * op_array)		91137	0					
ANR	91139	CompoundStatement		381:0:10448:10483	91137	0					
ANR	91140	ReturnStatement	return ( uint32_t ) op_array -> T ++ ;	382:1:10451:10481	91137	0	True				
ANR	91141	CastExpression	( uint32_t ) op_array -> T ++		91137	0					
ANR	91142	CastTarget	uint32_t		91137	0					
ANR	91143	PostIncDecOperationExpression	op_array -> T ++		91137	1					
ANR	91144	PtrMemberAccess	op_array -> T		91137	0					
ANR	91145	Identifier	op_array		91137	0					
ANR	91146	Identifier	T		91137	1					
ANR	91147	IncDec	++		91137	1					
ANR	91148	ReturnType	static uint32_t		91137	1					
ANR	91149	Identifier	get_temporary_variable		91137	2					
ANR	91150	ParameterList	zend_op_array * op_array		91137	3					
ANR	91151	Parameter	zend_op_array * op_array	380:39:10413:10435	91137	0	True				
ANR	91152	ParameterType	zend_op_array *		91137	0					
ANR	91153	Identifier	op_array		91137	1					
ANR	91154	CFGEntryNode	ENTRY		91137		True				
ANR	91155	CFGExitNode	EXIT		91137		True				
ANR	91156	Symbol	op_array -> T		91137						
ANR	91157	Symbol	op_array		91137						
ANR	91158	Symbol	* op_array		91137						
ANR	91159	Function	lookup_cv	386:0:10496:11365							
ANR	91160	FunctionDef	"lookup_cv (zend_op_array * op_array , zend_string * name)"		91159	0					
ANR	91161	CompoundStatement		386:74:10570:11365	91159	0					
ANR	91162	IdentifierDeclStatement	int i = 0 ;	387:1:10573:10582	91159	0	True				
ANR	91163	IdentifierDecl	i = 0		91159	0					
ANR	91164	IdentifierDeclType	int		91159	0					
ANR	91165	Identifier	i		91159	1					
ANR	91166	AssignmentExpression	i = 0		91159	2		=			
ANR	91167	Identifier	i		91159	0					
ANR	91168	PrimaryExpression	0		91159	1					
ANR	91169	IdentifierDeclStatement	zend_ulong hash_value = zend_string_hash_val ( name ) ;	388:1:10585:10635	91159	1	True				
ANR	91170	IdentifierDecl	hash_value = zend_string_hash_val ( name )		91159	0					
ANR	91171	IdentifierDeclType	zend_ulong		91159	0					
ANR	91172	Identifier	hash_value		91159	1					
ANR	91173	AssignmentExpression	hash_value = zend_string_hash_val ( name )		91159	2		=			
ANR	91174	Identifier	hash_value		91159	0					
ANR	91175	CallExpression	zend_string_hash_val ( name )		91159	1					
ANR	91176	Callee	zend_string_hash_val		91159	0					
ANR	91177	Identifier	zend_string_hash_val		91159	0					
ANR	91178	ArgumentList	name		91159	1					
ANR	91179	Argument	name		91159	0					
ANR	91180	Identifier	name		91159	0					
ANR	91181	WhileStatement	while ( i < op_array -> last_var )		91159	2					
ANR	91182	Condition	i < op_array -> last_var	390:8:10646:10667	91159	0	True				
ANR	91183	RelationalExpression	i < op_array -> last_var		91159	0		<			
ANR	91184	Identifier	i		91159	0					
ANR	91185	PtrMemberAccess	op_array -> last_var		91159	1					
ANR	91186	Identifier	op_array		91159	0					
ANR	91187	Identifier	last_var		91159	1					
ANR	91188	CompoundStatement		5:32:99:99	91159	1					
ANR	91189	IfStatement	"if ( ZSTR_VAL ( op_array -> vars [ i ] ) == ZSTR_VAL ( name ) || ( ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0 ) )"		91159	0					
ANR	91190	Condition	"ZSTR_VAL ( op_array -> vars [ i ] ) == ZSTR_VAL ( name ) || ( ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0 )"	391:6:10678:10912	91159	0	True				
ANR	91191	OrExpression	"ZSTR_VAL ( op_array -> vars [ i ] ) == ZSTR_VAL ( name ) || ( ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0 )"		91159	0		||			
ANR	91192	EqualityExpression	ZSTR_VAL ( op_array -> vars [ i ] ) == ZSTR_VAL ( name )		91159	0		==			
ANR	91193	CallExpression	ZSTR_VAL ( op_array -> vars [ i ] )		91159	0					
ANR	91194	Callee	ZSTR_VAL		91159	0					
ANR	91195	Identifier	ZSTR_VAL		91159	0					
ANR	91196	ArgumentList	op_array -> vars [ i ]		91159	1					
ANR	91197	Argument	op_array -> vars [ i ]		91159	0					
ANR	91198	ArrayIndexing	op_array -> vars [ i ]		91159	0					
ANR	91199	PtrMemberAccess	op_array -> vars		91159	0					
ANR	91200	Identifier	op_array		91159	0					
ANR	91201	Identifier	vars		91159	1					
ANR	91202	Identifier	i		91159	1					
ANR	91203	CallExpression	ZSTR_VAL ( name )		91159	1					
ANR	91204	Callee	ZSTR_VAL		91159	0					
ANR	91205	Identifier	ZSTR_VAL		91159	0					
ANR	91206	ArgumentList	name		91159	1					
ANR	91207	Argument	name		91159	0					
ANR	91208	Identifier	name		91159	0					
ANR	91209	AndExpression	"ZSTR_H ( op_array -> vars [ i ] ) == hash_value && ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0"		91159	1		&&			
ANR	91210	EqualityExpression	ZSTR_H ( op_array -> vars [ i ] ) == hash_value		91159	0		==			
ANR	91211	CallExpression	ZSTR_H ( op_array -> vars [ i ] )		91159	0					
ANR	91212	Callee	ZSTR_H		91159	0					
ANR	91213	Identifier	ZSTR_H		91159	0					
ANR	91214	ArgumentList	op_array -> vars [ i ]		91159	1					
ANR	91215	Argument	op_array -> vars [ i ]		91159	0					
ANR	91216	ArrayIndexing	op_array -> vars [ i ]		91159	0					
ANR	91217	PtrMemberAccess	op_array -> vars		91159	0					
ANR	91218	Identifier	op_array		91159	0					
ANR	91219	Identifier	vars		91159	1					
ANR	91220	Identifier	i		91159	1					
ANR	91221	Identifier	hash_value		91159	1					
ANR	91222	AndExpression	"ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name ) && memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0"		91159	1		&&			
ANR	91223	EqualityExpression	ZSTR_LEN ( op_array -> vars [ i ] ) == ZSTR_LEN ( name )		91159	0		==			
ANR	91224	CallExpression	ZSTR_LEN ( op_array -> vars [ i ] )		91159	0					
ANR	91225	Callee	ZSTR_LEN		91159	0					
ANR	91226	Identifier	ZSTR_LEN		91159	0					
ANR	91227	ArgumentList	op_array -> vars [ i ]		91159	1					
ANR	91228	Argument	op_array -> vars [ i ]		91159	0					
ANR	91229	ArrayIndexing	op_array -> vars [ i ]		91159	0					
ANR	91230	PtrMemberAccess	op_array -> vars		91159	0					
ANR	91231	Identifier	op_array		91159	0					
ANR	91232	Identifier	vars		91159	1					
ANR	91233	Identifier	i		91159	1					
ANR	91234	CallExpression	ZSTR_LEN ( name )		91159	1					
ANR	91235	Callee	ZSTR_LEN		91159	0					
ANR	91236	Identifier	ZSTR_LEN		91159	0					
ANR	91237	ArgumentList	name		91159	1					
ANR	91238	Argument	name		91159	0					
ANR	91239	Identifier	name		91159	0					
ANR	91240	EqualityExpression	"memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) == 0"		91159	1		==			
ANR	91241	CallExpression	"memcmp ( ZSTR_VAL ( op_array -> vars [ i ] ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		91159	0					
ANR	91242	Callee	memcmp		91159	0					
ANR	91243	Identifier	memcmp		91159	0					
ANR	91244	ArgumentList	ZSTR_VAL ( op_array -> vars [ i ] )		91159	1					
ANR	91245	Argument	ZSTR_VAL ( op_array -> vars [ i ] )		91159	0					
ANR	91246	CallExpression	ZSTR_VAL ( op_array -> vars [ i ] )		91159	0					
ANR	91247	Callee	ZSTR_VAL		91159	0					
ANR	91248	Identifier	ZSTR_VAL		91159	0					
ANR	91249	ArgumentList	op_array -> vars [ i ]		91159	1					
ANR	91250	Argument	op_array -> vars [ i ]		91159	0					
ANR	91251	ArrayIndexing	op_array -> vars [ i ]		91159	0					
ANR	91252	PtrMemberAccess	op_array -> vars		91159	0					
ANR	91253	Identifier	op_array		91159	0					
ANR	91254	Identifier	vars		91159	1					
ANR	91255	Identifier	i		91159	1					
ANR	91256	Argument	ZSTR_VAL ( name )		91159	1					
ANR	91257	CallExpression	ZSTR_VAL ( name )		91159	0					
ANR	91258	Callee	ZSTR_VAL		91159	0					
ANR	91259	Identifier	ZSTR_VAL		91159	0					
ANR	91260	ArgumentList	name		91159	1					
ANR	91261	Argument	name		91159	0					
ANR	91262	Identifier	name		91159	0					
ANR	91263	Argument	ZSTR_LEN ( name )		91159	2					
ANR	91264	CallExpression	ZSTR_LEN ( name )		91159	0					
ANR	91265	Callee	ZSTR_LEN		91159	0					
ANR	91266	Identifier	ZSTR_LEN		91159	0					
ANR	91267	ArgumentList	name		91159	1					
ANR	91268	Argument	name		91159	0					
ANR	91269	Identifier	name		91159	0					
ANR	91270	PrimaryExpression	0		91159	1					
ANR	91271	CompoundStatement		9:82:344:344	91159	1					
ANR	91272	ExpressionStatement	zend_string_release ( name )	395:3:10920:10945	91159	0	True				
ANR	91273	CallExpression	zend_string_release ( name )		91159	0					
ANR	91274	Callee	zend_string_release		91159	0					
ANR	91275	Identifier	zend_string_release		91159	0					
ANR	91276	ArgumentList	name		91159	1					
ANR	91277	Argument	name		91159	0					
ANR	91278	Identifier	name		91159	0					
ANR	91279	ReturnStatement	"return ( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i ) ;"	396:3:10950:11003	91159	1	True				
ANR	91280	CastExpression	"( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		91159	0					
ANR	91281	CastTarget	int		91159	0					
ANR	91282	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		91159	1					
ANR	91283	CastTarget	zend_intptr_t		91159	0					
ANR	91284	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , i )"		91159	1					
ANR	91285	Callee	ZEND_CALL_VAR_NUM		91159	0					
ANR	91286	Identifier	ZEND_CALL_VAR_NUM		91159	0					
ANR	91287	ArgumentList	NULL		91159	1					
ANR	91288	Argument	NULL		91159	0					
ANR	91289	Identifier	NULL		91159	0					
ANR	91290	Argument	i		91159	1					
ANR	91291	Identifier	i		91159	0					
ANR	91292	ExpressionStatement	i ++	398:2:11011:11014	91159	1	True				
ANR	91293	PostIncDecOperationExpression	i ++		91159	0					
ANR	91294	Identifier	i		91159	0					
ANR	91295	IncDec	++		91159	1					
ANR	91296	ExpressionStatement	i = op_array -> last_var	400:1:11020:11042	91159	3	True				
ANR	91297	AssignmentExpression	i = op_array -> last_var		91159	0		=			
ANR	91298	Identifier	i		91159	0					
ANR	91299	PtrMemberAccess	op_array -> last_var		91159	1					
ANR	91300	Identifier	op_array		91159	0					
ANR	91301	Identifier	last_var		91159	1					
ANR	91302	ExpressionStatement	op_array -> last_var ++	401:1:11045:11065	91159	4	True				
ANR	91303	PostIncDecOperationExpression	op_array -> last_var ++		91159	0					
ANR	91304	PtrMemberAccess	op_array -> last_var		91159	0					
ANR	91305	Identifier	op_array		91159	0					
ANR	91306	Identifier	last_var		91159	1					
ANR	91307	IncDec	++		91159	1					
ANR	91308	IfStatement	if ( op_array -> last_var > CG ( context ) . vars_size )		91159	5					
ANR	91309	Condition	op_array -> last_var > CG ( context ) . vars_size	402:5:11072:11113	91159	0	True				
ANR	91310	RelationalExpression	op_array -> last_var > CG ( context ) . vars_size		91159	0		>			
ANR	91311	PtrMemberAccess	op_array -> last_var		91159	0					
ANR	91312	Identifier	op_array		91159	0					
ANR	91313	Identifier	last_var		91159	1					
ANR	91314	MemberAccess	CG ( context ) . vars_size		91159	1					
ANR	91315	CallExpression	CG ( context )		91159	0					
ANR	91316	Callee	CG		91159	0					
ANR	91317	Identifier	CG		91159	0					
ANR	91318	ArgumentList	context		91159	1					
ANR	91319	Argument	context		91159	0					
ANR	91320	Identifier	context		91159	0					
ANR	91321	Identifier	vars_size		91159	1					
ANR	91322	CompoundStatement		17:49:545:545	91159	1					
ANR	91323	ExpressionStatement	CG ( context ) . vars_size += 16	403:2:11120:11147	91159	0	True				
ANR	91324	AssignmentExpression	CG ( context ) . vars_size += 16		91159	0		+=			
ANR	91325	MemberAccess	CG ( context ) . vars_size		91159	0					
ANR	91326	CallExpression	CG ( context )		91159	0					
ANR	91327	Callee	CG		91159	0					
ANR	91328	Identifier	CG		91159	0					
ANR	91329	ArgumentList	context		91159	1					
ANR	91330	Argument	context		91159	0					
ANR	91331	Identifier	context		91159	0					
ANR	91332	Identifier	vars_size		91159	1					
ANR	91333	PrimaryExpression	16		91159	1					
ANR	91334	ExpressionStatement	"op_array -> vars = erealloc ( op_array -> vars , CG ( context ) . vars_size * sizeof ( zend_string * ) )"	404:2:11163:11250	91159	1	True				
ANR	91335	AssignmentExpression	"op_array -> vars = erealloc ( op_array -> vars , CG ( context ) . vars_size * sizeof ( zend_string * ) )"		91159	0		=			
ANR	91336	PtrMemberAccess	op_array -> vars		91159	0					
ANR	91337	Identifier	op_array		91159	0					
ANR	91338	Identifier	vars		91159	1					
ANR	91339	CallExpression	"erealloc ( op_array -> vars , CG ( context ) . vars_size * sizeof ( zend_string * ) )"		91159	1					
ANR	91340	Callee	erealloc		91159	0					
ANR	91341	Identifier	erealloc		91159	0					
ANR	91342	ArgumentList	op_array -> vars		91159	1					
ANR	91343	Argument	op_array -> vars		91159	0					
ANR	91344	PtrMemberAccess	op_array -> vars		91159	0					
ANR	91345	Identifier	op_array		91159	0					
ANR	91346	Identifier	vars		91159	1					
ANR	91347	Argument	CG ( context ) . vars_size * sizeof ( zend_string * )		91159	1					
ANR	91348	MultiplicativeExpression	CG ( context ) . vars_size * sizeof ( zend_string * )		91159	0		*			
ANR	91349	MemberAccess	CG ( context ) . vars_size		91159	0					
ANR	91350	CallExpression	CG ( context )		91159	0					
ANR	91351	Callee	CG		91159	0					
ANR	91352	Identifier	CG		91159	0					
ANR	91353	ArgumentList	context		91159	1					
ANR	91354	Argument	context		91159	0					
ANR	91355	Identifier	context		91159	0					
ANR	91356	Identifier	vars_size		91159	1					
ANR	91357	SizeofExpression	sizeof ( zend_string * )		91159	1					
ANR	91358	Sizeof	sizeof		91159	0					
ANR	91359	SizeofOperand	zend_string *		91159	1					
ANR	91360	ExpressionStatement	op_array -> vars [ i ] = zend_new_interned_string ( name )	407:1:11257:11307	91159	6	True				
ANR	91361	AssignmentExpression	op_array -> vars [ i ] = zend_new_interned_string ( name )		91159	0		=			
ANR	91362	ArrayIndexing	op_array -> vars [ i ]		91159	0					
ANR	91363	PtrMemberAccess	op_array -> vars		91159	0					
ANR	91364	Identifier	op_array		91159	0					
ANR	91365	Identifier	vars		91159	1					
ANR	91366	Identifier	i		91159	1					
ANR	91367	CallExpression	zend_new_interned_string ( name )		91159	1					
ANR	91368	Callee	zend_new_interned_string		91159	0					
ANR	91369	Identifier	zend_new_interned_string		91159	0					
ANR	91370	ArgumentList	name		91159	1					
ANR	91371	Argument	name		91159	0					
ANR	91372	Identifier	name		91159	0					
ANR	91373	ReturnStatement	"return ( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i ) ;"	408:1:11310:11363	91159	7	True				
ANR	91374	CastExpression	"( int ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		91159	0					
ANR	91375	CastTarget	int		91159	0					
ANR	91376	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , i )"		91159	1					
ANR	91377	CastTarget	zend_intptr_t		91159	0					
ANR	91378	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , i )"		91159	1					
ANR	91379	Callee	ZEND_CALL_VAR_NUM		91159	0					
ANR	91380	Identifier	ZEND_CALL_VAR_NUM		91159	0					
ANR	91381	ArgumentList	NULL		91159	1					
ANR	91382	Argument	NULL		91159	0					
ANR	91383	Identifier	NULL		91159	0					
ANR	91384	Argument	i		91159	1					
ANR	91385	Identifier	i		91159	0					
ANR	91386	ReturnType	static int		91159	1					
ANR	91387	Identifier	lookup_cv		91159	2					
ANR	91388	ParameterList	"zend_op_array * op_array , zend_string * name"		91159	3					
ANR	91389	Parameter	zend_op_array * op_array	386:21:10517:10539	91159	0	True				
ANR	91390	ParameterType	zend_op_array *		91159	0					
ANR	91391	Identifier	op_array		91159	1					
ANR	91392	Parameter	zend_string * name	386:46:10542:10558	91159	1	True				
ANR	91393	ParameterType	zend_string *		91159	0					
ANR	91394	Identifier	name		91159	1					
ANR	91395	CFGEntryNode	ENTRY		91159		True				
ANR	91396	CFGExitNode	EXIT		91159		True				
ANR	91397	Symbol	CG ( context ) . vars_size		91159						
ANR	91398	Symbol	op_array -> vars		91159						
ANR	91399	Symbol	NULL		91159						
ANR	91400	Symbol	CG		91159						
ANR	91401	Symbol	op_array -> last_var		91159						
ANR	91402	Symbol	i		91159						
ANR	91403	Symbol	ZSTR_H		91159						
ANR	91404	Symbol	* op_array		91159						
ANR	91405	Symbol	ZSTR_VAL		91159						
ANR	91406	Symbol	* op_array -> vars		91159						
ANR	91407	Symbol	memcmp		91159						
ANR	91408	Symbol	* i		91159						
ANR	91409	Symbol	zend_new_interned_string		91159						
ANR	91410	Symbol	ZEND_CALL_VAR_NUM		91159						
ANR	91411	Symbol	name		91159						
ANR	91412	Symbol	ZSTR_LEN		91159						
ANR	91413	Symbol	context		91159						
ANR	91414	Symbol	zend_string_hash_val		91159						
ANR	91415	Symbol	hash_value		91159						
ANR	91416	Symbol	* * op_array		91159						
ANR	91417	Symbol	erealloc		91159						
ANR	91418	Symbol	op_array		91159						
ANR	91419	Function	zend_del_literal	412:0:11378:11609							
ANR	91420	FunctionDef	"zend_del_literal (zend_op_array * op_array , int n)"		91419	0					
ANR	91421	CompoundStatement		413:0:11442:11609	91419	0					
ANR	91422	ExpressionStatement	"zval_dtor ( CT_CONSTANT_EX ( op_array , n ) )"	414:1:11445:11483	91419	0	True				
ANR	91423	CallExpression	"zval_dtor ( CT_CONSTANT_EX ( op_array , n ) )"		91419	0					
ANR	91424	Callee	zval_dtor		91419	0					
ANR	91425	Identifier	zval_dtor		91419	0					
ANR	91426	ArgumentList	"CT_CONSTANT_EX ( op_array , n )"		91419	1					
ANR	91427	Argument	"CT_CONSTANT_EX ( op_array , n )"		91419	0					
ANR	91428	CallExpression	"CT_CONSTANT_EX ( op_array , n )"		91419	0					
ANR	91429	Callee	CT_CONSTANT_EX		91419	0					
ANR	91430	Identifier	CT_CONSTANT_EX		91419	0					
ANR	91431	ArgumentList	op_array		91419	1					
ANR	91432	Argument	op_array		91419	0					
ANR	91433	Identifier	op_array		91419	0					
ANR	91434	Argument	n		91419	1					
ANR	91435	Identifier	n		91419	0					
ANR	91436	IfStatement	if ( n + 1 == op_array -> last_literal )		91419	1					
ANR	91437	Condition	n + 1 == op_array -> last_literal	415:5:11490:11520	91419	0	True				
ANR	91438	EqualityExpression	n + 1 == op_array -> last_literal		91419	0		==			
ANR	91439	AdditiveExpression	n + 1		91419	0		+			
ANR	91440	Identifier	n		91419	0					
ANR	91441	PrimaryExpression	1		91419	1					
ANR	91442	PtrMemberAccess	op_array -> last_literal		91419	1					
ANR	91443	Identifier	op_array		91419	0					
ANR	91444	Identifier	last_literal		91419	1					
ANR	91445	CompoundStatement		3:38:80:80	91419	1					
ANR	91446	ExpressionStatement	op_array -> last_literal --	416:2:11527:11551	91419	0	True				
ANR	91447	PostIncDecOperationExpression	op_array -> last_literal --		91419	0					
ANR	91448	PtrMemberAccess	op_array -> last_literal		91419	0					
ANR	91449	Identifier	op_array		91419	0					
ANR	91450	Identifier	last_literal		91419	1					
ANR	91451	IncDec	--		91419	1					
ANR	91452	ElseStatement	else		91419	0					
ANR	91453	CompoundStatement		5:8:118:118	91419	0					
ANR	91454	ExpressionStatement	"ZVAL_UNDEF ( CT_CONSTANT_EX ( op_array , n ) )"	418:2:11565:11604	91419	0	True				
ANR	91455	CallExpression	"ZVAL_UNDEF ( CT_CONSTANT_EX ( op_array , n ) )"		91419	0					
ANR	91456	Callee	ZVAL_UNDEF		91419	0					
ANR	91457	Identifier	ZVAL_UNDEF		91419	0					
ANR	91458	ArgumentList	"CT_CONSTANT_EX ( op_array , n )"		91419	1					
ANR	91459	Argument	"CT_CONSTANT_EX ( op_array , n )"		91419	0					
ANR	91460	CallExpression	"CT_CONSTANT_EX ( op_array , n )"		91419	0					
ANR	91461	Callee	CT_CONSTANT_EX		91419	0					
ANR	91462	Identifier	CT_CONSTANT_EX		91419	0					
ANR	91463	ArgumentList	op_array		91419	1					
ANR	91464	Argument	op_array		91419	0					
ANR	91465	Identifier	op_array		91419	0					
ANR	91466	Argument	n		91419	1					
ANR	91467	Identifier	n		91419	0					
ANR	91468	ReturnType	void		91419	1					
ANR	91469	Identifier	zend_del_literal		91419	2					
ANR	91470	ParameterList	"zend_op_array * op_array , int n"		91419	3					
ANR	91471	Parameter	zend_op_array * op_array	412:22:11400:11422	91419	0	True				
ANR	91472	ParameterType	zend_op_array *		91419	0					
ANR	91473	Identifier	op_array		91419	1					
ANR	91474	Parameter	int n	412:47:11425:11429	91419	1	True				
ANR	91475	ParameterType	int		91419	0					
ANR	91476	Identifier	n		91419	1					
ANR	91477	CFGEntryNode	ENTRY		91419		True				
ANR	91478	CFGExitNode	EXIT		91419		True				
ANR	91479	Symbol	op_array -> last_literal		91419						
ANR	91480	Symbol	op_array		91419						
ANR	91481	Symbol	n		91419						
ANR	91482	Symbol	* op_array		91419						
ANR	91483	Symbol	CT_CONSTANT_EX		91419						
ANR	91484	Function	zend_insert_literal	424:0:11695:12198							
ANR	91485	FunctionDef	"zend_insert_literal (zend_op_array * op_array , zval * zv , int literal_position)"		91484	0					
ANR	91486	CompoundStatement		425:0:11801:12198	91484	0					
ANR	91487	IfStatement	if ( Z_TYPE_P ( zv ) == IS_STRING || Z_TYPE_P ( zv ) == IS_CONSTANT )		91484	0					
ANR	91488	Condition	Z_TYPE_P ( zv ) == IS_STRING || Z_TYPE_P ( zv ) == IS_CONSTANT	426:5:11808:11863	91484	0	True				
ANR	91489	OrExpression	Z_TYPE_P ( zv ) == IS_STRING || Z_TYPE_P ( zv ) == IS_CONSTANT		91484	0		||			
ANR	91490	EqualityExpression	Z_TYPE_P ( zv ) == IS_STRING		91484	0		==			
ANR	91491	CallExpression	Z_TYPE_P ( zv )		91484	0					
ANR	91492	Callee	Z_TYPE_P		91484	0					
ANR	91493	Identifier	Z_TYPE_P		91484	0					
ANR	91494	ArgumentList	zv		91484	1					
ANR	91495	Argument	zv		91484	0					
ANR	91496	Identifier	zv		91484	0					
ANR	91497	Identifier	IS_STRING		91484	1					
ANR	91498	EqualityExpression	Z_TYPE_P ( zv ) == IS_CONSTANT		91484	1		==			
ANR	91499	CallExpression	Z_TYPE_P ( zv )		91484	0					
ANR	91500	Callee	Z_TYPE_P		91484	0					
ANR	91501	Identifier	Z_TYPE_P		91484	0					
ANR	91502	ArgumentList	zv		91484	1					
ANR	91503	Argument	zv		91484	0					
ANR	91504	Identifier	zv		91484	0					
ANR	91505	Identifier	IS_CONSTANT		91484	1					
ANR	91506	CompoundStatement		2:63:64:64	91484	1					
ANR	91507	ExpressionStatement	zend_string_hash_val ( Z_STR_P ( zv ) )	427:2:11870:11903	91484	0	True				
ANR	91508	CallExpression	zend_string_hash_val ( Z_STR_P ( zv ) )		91484	0					
ANR	91509	Callee	zend_string_hash_val		91484	0					
ANR	91510	Identifier	zend_string_hash_val		91484	0					
ANR	91511	ArgumentList	Z_STR_P ( zv )		91484	1					
ANR	91512	Argument	Z_STR_P ( zv )		91484	0					
ANR	91513	CallExpression	Z_STR_P ( zv )		91484	0					
ANR	91514	Callee	Z_STR_P		91484	0					
ANR	91515	Identifier	Z_STR_P		91484	0					
ANR	91516	ArgumentList	zv		91484	1					
ANR	91517	Argument	zv		91484	0					
ANR	91518	Identifier	zv		91484	0					
ANR	91519	ExpressionStatement	Z_STR_P ( zv ) = zend_new_interned_string ( Z_STR_P ( zv ) )	428:2:11907:11958	91484	1	True				
ANR	91520	AssignmentExpression	Z_STR_P ( zv ) = zend_new_interned_string ( Z_STR_P ( zv ) )		91484	0		=			
ANR	91521	CallExpression	Z_STR_P ( zv )		91484	0					
ANR	91522	Callee	Z_STR_P		91484	0					
ANR	91523	Identifier	Z_STR_P		91484	0					
ANR	91524	ArgumentList	zv		91484	1					
ANR	91525	Argument	zv		91484	0					
ANR	91526	Identifier	zv		91484	0					
ANR	91527	CallExpression	zend_new_interned_string ( Z_STR_P ( zv ) )		91484	1					
ANR	91528	Callee	zend_new_interned_string		91484	0					
ANR	91529	Identifier	zend_new_interned_string		91484	0					
ANR	91530	ArgumentList	Z_STR_P ( zv )		91484	1					
ANR	91531	Argument	Z_STR_P ( zv )		91484	0					
ANR	91532	CallExpression	Z_STR_P ( zv )		91484	0					
ANR	91533	Callee	Z_STR_P		91484	0					
ANR	91534	Identifier	Z_STR_P		91484	0					
ANR	91535	ArgumentList	zv		91484	1					
ANR	91536	Argument	zv		91484	0					
ANR	91537	Identifier	zv		91484	0					
ANR	91538	IfStatement	if ( ZSTR_IS_INTERNED ( Z_STR_P ( zv ) ) )		91484	2					
ANR	91539	Condition	ZSTR_IS_INTERNED ( Z_STR_P ( zv ) )	429:6:11966:11994	91484	0	True				
ANR	91540	CallExpression	ZSTR_IS_INTERNED ( Z_STR_P ( zv ) )		91484	0					
ANR	91541	Callee	ZSTR_IS_INTERNED		91484	0					
ANR	91542	Identifier	ZSTR_IS_INTERNED		91484	0					
ANR	91543	ArgumentList	Z_STR_P ( zv )		91484	1					
ANR	91544	Argument	Z_STR_P ( zv )		91484	0					
ANR	91545	CallExpression	Z_STR_P ( zv )		91484	0					
ANR	91546	Callee	Z_STR_P		91484	0					
ANR	91547	Identifier	Z_STR_P		91484	0					
ANR	91548	ArgumentList	zv		91484	1					
ANR	91549	Argument	zv		91484	0					
ANR	91550	Identifier	zv		91484	0					
ANR	91551	CompoundStatement		5:37:195:195	91484	1					
ANR	91552	ExpressionStatement	Z_TYPE_FLAGS_P ( zv ) &= ~ ( IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE )	430:3:12002:12065	91484	0	True				
ANR	91553	AssignmentExpression	Z_TYPE_FLAGS_P ( zv ) &= ~ ( IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE )		91484	0		&=			
ANR	91554	CallExpression	Z_TYPE_FLAGS_P ( zv )		91484	0					
ANR	91555	Callee	Z_TYPE_FLAGS_P		91484	0					
ANR	91556	Identifier	Z_TYPE_FLAGS_P		91484	0					
ANR	91557	ArgumentList	zv		91484	1					
ANR	91558	Argument	zv		91484	0					
ANR	91559	Identifier	zv		91484	0					
ANR	91560	UnaryOperationExpression	~ ( IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE )		91484	1					
ANR	91561	UnaryOperator	~		91484	0					
ANR	91562	InclusiveOrExpression	IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE		91484	1		|			
ANR	91563	Identifier	IS_TYPE_REFCOUNTED		91484	0					
ANR	91564	Identifier	IS_TYPE_COPYABLE		91484	1					
ANR	91565	ExpressionStatement	"ZVAL_COPY_VALUE ( CT_CONSTANT_EX ( op_array , literal_position ) , zv )"	433:1:12075:12138	91484	1	True				
ANR	91566	CallExpression	"ZVAL_COPY_VALUE ( CT_CONSTANT_EX ( op_array , literal_position ) , zv )"		91484	0					
ANR	91567	Callee	ZVAL_COPY_VALUE		91484	0					
ANR	91568	Identifier	ZVAL_COPY_VALUE		91484	0					
ANR	91569	ArgumentList	"CT_CONSTANT_EX ( op_array , literal_position )"		91484	1					
ANR	91570	Argument	"CT_CONSTANT_EX ( op_array , literal_position )"		91484	0					
ANR	91571	CallExpression	"CT_CONSTANT_EX ( op_array , literal_position )"		91484	0					
ANR	91572	Callee	CT_CONSTANT_EX		91484	0					
ANR	91573	Identifier	CT_CONSTANT_EX		91484	0					
ANR	91574	ArgumentList	op_array		91484	1					
ANR	91575	Argument	op_array		91484	0					
ANR	91576	Identifier	op_array		91484	0					
ANR	91577	Argument	literal_position		91484	1					
ANR	91578	Identifier	literal_position		91484	0					
ANR	91579	Argument	zv		91484	1					
ANR	91580	Identifier	zv		91484	0					
ANR	91581	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ literal_position ] ) = - 1	434:1:12141:12196	91484	2	True				
ANR	91582	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ literal_position ] ) = - 1		91484	0		=			
ANR	91583	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ literal_position ] )		91484	0					
ANR	91584	Callee	Z_CACHE_SLOT		91484	0					
ANR	91585	Identifier	Z_CACHE_SLOT		91484	0					
ANR	91586	ArgumentList	op_array -> literals [ literal_position ]		91484	1					
ANR	91587	Argument	op_array -> literals [ literal_position ]		91484	0					
ANR	91588	ArrayIndexing	op_array -> literals [ literal_position ]		91484	0					
ANR	91589	PtrMemberAccess	op_array -> literals		91484	0					
ANR	91590	Identifier	op_array		91484	0					
ANR	91591	Identifier	literals		91484	1					
ANR	91592	Identifier	literal_position		91484	1					
ANR	91593	UnaryOperationExpression	- 1		91484	1					
ANR	91594	UnaryOperator	-		91484	0					
ANR	91595	PrimaryExpression	1		91484	1					
ANR	91596	ReturnType	static inline void		91484	1					
ANR	91597	Identifier	zend_insert_literal		91484	2					
ANR	91598	ParameterList	"zend_op_array * op_array , zval * zv , int literal_position"		91484	3					
ANR	91599	Parameter	zend_op_array * op_array	424:39:11734:11756	91484	0	True				
ANR	91600	ParameterType	zend_op_array *		91484	0					
ANR	91601	Identifier	op_array		91484	1					
ANR	91602	Parameter	zval * zv	424:64:11759:11766	91484	1	True				
ANR	91603	ParameterType	zval *		91484	0					
ANR	91604	Identifier	zv		91484	1					
ANR	91605	Parameter	int literal_position	424:74:11769:11788	91484	2	True				
ANR	91606	ParameterType	int		91484	0					
ANR	91607	Identifier	literal_position		91484	1					
ANR	91608	CFGEntryNode	ENTRY		91484		True				
ANR	91609	CFGExitNode	EXIT		91484		True				
ANR	91610	Symbol	IS_CONSTANT		91484						
ANR	91611	Symbol	IS_TYPE_COPYABLE		91484						
ANR	91612	Symbol	Z_TYPE_FLAGS_P		91484						
ANR	91613	Symbol	Z_TYPE_P		91484						
ANR	91614	Symbol	IS_TYPE_REFCOUNTED		91484						
ANR	91615	Symbol	* op_array		91484						
ANR	91616	Symbol	* op_array -> literals		91484						
ANR	91617	Symbol	zend_new_interned_string		91484						
ANR	91618	Symbol	* literal_position		91484						
ANR	91619	Symbol	op_array -> literals		91484						
ANR	91620	Symbol	literal_position		91484						
ANR	91621	Symbol	ZSTR_IS_INTERNED		91484						
ANR	91622	Symbol	Z_CACHE_SLOT		91484						
ANR	91623	Symbol	IS_STRING		91484						
ANR	91624	Symbol	Z_STR_P		91484						
ANR	91625	Symbol	zv		91484						
ANR	91626	Symbol	* * op_array		91484						
ANR	91627	Symbol	op_array		91484						
ANR	91628	Symbol	CT_CONSTANT_EX		91484						
ANR	91629	Function	zend_add_literal	441:0:12425:12842							
ANR	91630	FunctionDef	"zend_add_literal (zend_op_array * op_array , zval * zv)"		91629	0					
ANR	91631	CompoundStatement		442:0:12491:12842	91629	0					
ANR	91632	IdentifierDeclStatement	int i = op_array -> last_literal ;	443:1:12494:12524	91629	0	True				
ANR	91633	IdentifierDecl	i = op_array -> last_literal		91629	0					
ANR	91634	IdentifierDeclType	int		91629	0					
ANR	91635	Identifier	i		91629	1					
ANR	91636	AssignmentExpression	i = op_array -> last_literal		91629	2		=			
ANR	91637	Identifier	i		91629	0					
ANR	91638	PtrMemberAccess	op_array -> last_literal		91629	1					
ANR	91639	Identifier	op_array		91629	0					
ANR	91640	Identifier	last_literal		91629	1					
ANR	91641	ExpressionStatement	op_array -> last_literal ++	444:1:12527:12551	91629	1	True				
ANR	91642	PostIncDecOperationExpression	op_array -> last_literal ++		91629	0					
ANR	91643	PtrMemberAccess	op_array -> last_literal		91629	0					
ANR	91644	Identifier	op_array		91629	0					
ANR	91645	Identifier	last_literal		91629	1					
ANR	91646	IncDec	++		91629	1					
ANR	91647	IfStatement	if ( i >= CG ( context ) . literals_size )		91629	2					
ANR	91648	Condition	i >= CG ( context ) . literals_size	445:5:12558:12587	91629	0	True				
ANR	91649	RelationalExpression	i >= CG ( context ) . literals_size		91629	0		>=			
ANR	91650	Identifier	i		91629	0					
ANR	91651	MemberAccess	CG ( context ) . literals_size		91629	1					
ANR	91652	CallExpression	CG ( context )		91629	0					
ANR	91653	Callee	CG		91629	0					
ANR	91654	Identifier	CG		91629	0					
ANR	91655	ArgumentList	context		91629	1					
ANR	91656	Argument	context		91629	0					
ANR	91657	Identifier	context		91629	0					
ANR	91658	Identifier	literals_size		91629	1					
ANR	91659	CompoundStatement		4:37:98:98	91629	1					
ANR	91660	WhileStatement	while ( i >= CG ( context ) . literals_size )		91629	0					
ANR	91661	Condition	i >= CG ( context ) . literals_size	446:9:12601:12630	91629	0	True				
ANR	91662	RelationalExpression	i >= CG ( context ) . literals_size		91629	0		>=			
ANR	91663	Identifier	i		91629	0					
ANR	91664	MemberAccess	CG ( context ) . literals_size		91629	1					
ANR	91665	CallExpression	CG ( context )		91629	0					
ANR	91666	Callee	CG		91629	0					
ANR	91667	Identifier	CG		91629	0					
ANR	91668	ArgumentList	context		91629	1					
ANR	91669	Argument	context		91629	0					
ANR	91670	Identifier	context		91629	0					
ANR	91671	Identifier	literals_size		91629	1					
ANR	91672	CompoundStatement		5:41:141:141	91629	1					
ANR	91673	ExpressionStatement	CG ( context ) . literals_size += 16	447:3:12638:12669	91629	0	True				
ANR	91674	AssignmentExpression	CG ( context ) . literals_size += 16		91629	0		+=			
ANR	91675	MemberAccess	CG ( context ) . literals_size		91629	0					
ANR	91676	CallExpression	CG ( context )		91629	0					
ANR	91677	Callee	CG		91629	0					
ANR	91678	Identifier	CG		91629	0					
ANR	91679	ArgumentList	context		91629	1					
ANR	91680	Argument	context		91629	0					
ANR	91681	Identifier	context		91629	0					
ANR	91682	Identifier	literals_size		91629	1					
ANR	91683	PrimaryExpression	16		91629	1					
ANR	91684	ExpressionStatement	"op_array -> literals = ( zval * ) erealloc ( op_array -> literals , CG ( context ) . literals_size * sizeof ( zval ) )"	449:2:12689:12787	91629	1	True				
ANR	91685	AssignmentExpression	"op_array -> literals = ( zval * ) erealloc ( op_array -> literals , CG ( context ) . literals_size * sizeof ( zval ) )"		91629	0		=			
ANR	91686	PtrMemberAccess	op_array -> literals		91629	0					
ANR	91687	Identifier	op_array		91629	0					
ANR	91688	Identifier	literals		91629	1					
ANR	91689	CastExpression	"( zval * ) erealloc ( op_array -> literals , CG ( context ) . literals_size * sizeof ( zval ) )"		91629	1					
ANR	91690	CastTarget	zval *		91629	0					
ANR	91691	CallExpression	"erealloc ( op_array -> literals , CG ( context ) . literals_size * sizeof ( zval ) )"		91629	1					
ANR	91692	Callee	erealloc		91629	0					
ANR	91693	Identifier	erealloc		91629	0					
ANR	91694	ArgumentList	op_array -> literals		91629	1					
ANR	91695	Argument	op_array -> literals		91629	0					
ANR	91696	PtrMemberAccess	op_array -> literals		91629	0					
ANR	91697	Identifier	op_array		91629	0					
ANR	91698	Identifier	literals		91629	1					
ANR	91699	Argument	CG ( context ) . literals_size * sizeof ( zval )		91629	1					
ANR	91700	MultiplicativeExpression	CG ( context ) . literals_size * sizeof ( zval )		91629	0		*			
ANR	91701	MemberAccess	CG ( context ) . literals_size		91629	0					
ANR	91702	CallExpression	CG ( context )		91629	0					
ANR	91703	Callee	CG		91629	0					
ANR	91704	Identifier	CG		91629	0					
ANR	91705	ArgumentList	context		91629	1					
ANR	91706	Argument	context		91629	0					
ANR	91707	Identifier	context		91629	0					
ANR	91708	Identifier	literals_size		91629	1					
ANR	91709	SizeofExpression	sizeof ( zval )		91629	1					
ANR	91710	Sizeof	sizeof		91629	0					
ANR	91711	SizeofOperand	zval		91629	1					
ANR	91712	ExpressionStatement	"zend_insert_literal ( op_array , zv , i )"	451:1:12793:12829	91629	3	True				
ANR	91713	CallExpression	"zend_insert_literal ( op_array , zv , i )"		91629	0					
ANR	91714	Callee	zend_insert_literal		91629	0					
ANR	91715	Identifier	zend_insert_literal		91629	0					
ANR	91716	ArgumentList	op_array		91629	1					
ANR	91717	Argument	op_array		91629	0					
ANR	91718	Identifier	op_array		91629	0					
ANR	91719	Argument	zv		91629	1					
ANR	91720	Identifier	zv		91629	0					
ANR	91721	Argument	i		91629	2					
ANR	91722	Identifier	i		91629	0					
ANR	91723	ReturnStatement	return i ;	452:1:12832:12840	91629	4	True				
ANR	91724	Identifier	i		91629	0					
ANR	91725	ReturnType	int		91629	1					
ANR	91726	Identifier	zend_add_literal		91629	2					
ANR	91727	ParameterList	"zend_op_array * op_array , zval * zv"		91629	3					
ANR	91728	Parameter	zend_op_array * op_array	441:21:12446:12468	91629	0	True				
ANR	91729	ParameterType	zend_op_array *		91629	0					
ANR	91730	Identifier	op_array		91629	1					
ANR	91731	Parameter	zval * zv	441:46:12471:12478	91629	1	True				
ANR	91732	ParameterType	zval *		91629	0					
ANR	91733	Identifier	zv		91629	1					
ANR	91734	CFGEntryNode	ENTRY		91629		True				
ANR	91735	CFGExitNode	EXIT		91629		True				
ANR	91736	Symbol	CG		91629						
ANR	91737	Symbol	op_array -> last_literal		91629						
ANR	91738	Symbol	op_array -> literals		91629						
ANR	91739	Symbol	context		91629						
ANR	91740	Symbol	i		91629						
ANR	91741	Symbol	CG ( context ) . literals_size		91629						
ANR	91742	Symbol	zv		91629						
ANR	91743	Symbol	erealloc		91629						
ANR	91744	Symbol	op_array		91629						
ANR	91745	Symbol	* op_array		91629						
ANR	91746	Function	zend_add_literal_string	456:0:12855:13067							
ANR	91747	FunctionDef	"zend_add_literal_string (zend_op_array * op_array , zend_string * * str)"		91746	0					
ANR	91748	CompoundStatement		457:0:12951:13067	91746	0					
ANR	91749	IdentifierDeclStatement	int ret ;	458:1:12954:12961	91746	0	True				
ANR	91750	IdentifierDecl	ret		91746	0					
ANR	91751	IdentifierDeclType	int		91746	0					
ANR	91752	Identifier	ret		91746	1					
ANR	91753	IdentifierDeclStatement	zval zv ;	459:1:12964:12971	91746	1	True				
ANR	91754	IdentifierDecl	zv		91746	0					
ANR	91755	IdentifierDeclType	zval		91746	0					
ANR	91756	Identifier	zv		91746	1					
ANR	91757	ExpressionStatement	"ZVAL_STR ( & zv , * str )"	460:1:12974:12993	91746	2	True				
ANR	91758	CallExpression	"ZVAL_STR ( & zv , * str )"		91746	0					
ANR	91759	Callee	ZVAL_STR		91746	0					
ANR	91760	Identifier	ZVAL_STR		91746	0					
ANR	91761	ArgumentList	& zv		91746	1					
ANR	91762	Argument	& zv		91746	0					
ANR	91763	UnaryOperationExpression	& zv		91746	0					
ANR	91764	UnaryOperator	&		91746	0					
ANR	91765	Identifier	zv		91746	1					
ANR	91766	Argument	* str		91746	1					
ANR	91767	UnaryOperationExpression	* str		91746	0					
ANR	91768	UnaryOperator	*		91746	0					
ANR	91769	Identifier	str		91746	1					
ANR	91770	ExpressionStatement	"ret = zend_add_literal ( op_array , & zv )"	461:1:12996:13033	91746	3	True				
ANR	91771	AssignmentExpression	"ret = zend_add_literal ( op_array , & zv )"		91746	0		=			
ANR	91772	Identifier	ret		91746	0					
ANR	91773	CallExpression	"zend_add_literal ( op_array , & zv )"		91746	1					
ANR	91774	Callee	zend_add_literal		91746	0					
ANR	91775	Identifier	zend_add_literal		91746	0					
ANR	91776	ArgumentList	op_array		91746	1					
ANR	91777	Argument	op_array		91746	0					
ANR	91778	Identifier	op_array		91746	0					
ANR	91779	Argument	& zv		91746	1					
ANR	91780	UnaryOperationExpression	& zv		91746	0					
ANR	91781	UnaryOperator	&		91746	0					
ANR	91782	Identifier	zv		91746	1					
ANR	91783	ExpressionStatement	* str = Z_STR ( zv )	462:1:13036:13052	91746	4	True				
ANR	91784	AssignmentExpression	* str = Z_STR ( zv )		91746	0		=			
ANR	91785	UnaryOperationExpression	* str		91746	0					
ANR	91786	UnaryOperator	*		91746	0					
ANR	91787	Identifier	str		91746	1					
ANR	91788	CallExpression	Z_STR ( zv )		91746	1					
ANR	91789	Callee	Z_STR		91746	0					
ANR	91790	Identifier	Z_STR		91746	0					
ANR	91791	ArgumentList	zv		91746	1					
ANR	91792	Argument	zv		91746	0					
ANR	91793	Identifier	zv		91746	0					
ANR	91794	ReturnStatement	return ret ;	463:1:13055:13065	91746	5	True				
ANR	91795	Identifier	ret		91746	0					
ANR	91796	ReturnType	static inline int		91746	1					
ANR	91797	Identifier	zend_add_literal_string		91746	2					
ANR	91798	ParameterList	"zend_op_array * op_array , zend_string * * str"		91746	3					
ANR	91799	Parameter	zend_op_array * op_array	456:42:12897:12919	91746	0	True				
ANR	91800	ParameterType	zend_op_array *		91746	0					
ANR	91801	Identifier	op_array		91746	1					
ANR	91802	Parameter	zend_string * * str	456:67:12922:12938	91746	1	True				
ANR	91803	ParameterType	zend_string * *		91746	0					
ANR	91804	Identifier	str		91746	1					
ANR	91805	CFGEntryNode	ENTRY		91746		True				
ANR	91806	CFGExitNode	EXIT		91746		True				
ANR	91807	Symbol	str		91746						
ANR	91808	Symbol	ret		91746						
ANR	91809	Symbol	& zv		91746						
ANR	91810	Symbol	* str		91746						
ANR	91811	Symbol	zv		91746						
ANR	91812	Symbol	zend_add_literal		91746						
ANR	91813	Symbol	Z_STR		91746						
ANR	91814	Symbol	op_array		91746						
ANR	91815	Function	zend_add_func_name_literal	467:0:13080:13383							
ANR	91816	FunctionDef	"zend_add_func_name_literal (zend_op_array * op_array , zend_string * name)"		91815	0					
ANR	91817	CompoundStatement		468:0:13172:13383	91815	0					
ANR	91818	IdentifierDeclStatement	"int ret = zend_add_literal_string ( op_array , & name ) ;"	470:1:13196:13246	91815	0	True				
ANR	91819	IdentifierDecl	"ret = zend_add_literal_string ( op_array , & name )"		91815	0					
ANR	91820	IdentifierDeclType	int		91815	0					
ANR	91821	Identifier	ret		91815	1					
ANR	91822	AssignmentExpression	"ret = zend_add_literal_string ( op_array , & name )"		91815	2		=			
ANR	91823	Identifier	ret		91815	0					
ANR	91824	CallExpression	"zend_add_literal_string ( op_array , & name )"		91815	1					
ANR	91825	Callee	zend_add_literal_string		91815	0					
ANR	91826	Identifier	zend_add_literal_string		91815	0					
ANR	91827	ArgumentList	op_array		91815	1					
ANR	91828	Argument	op_array		91815	0					
ANR	91829	Identifier	op_array		91815	0					
ANR	91830	Argument	& name		91815	1					
ANR	91831	UnaryOperationExpression	& name		91815	0					
ANR	91832	UnaryOperator	&		91815	0					
ANR	91833	Identifier	name		91815	1					
ANR	91834	IdentifierDeclStatement	zend_string * lc_name = zend_string_tolower ( name ) ;	473:1:13273:13321	91815	1	True				
ANR	91835	IdentifierDecl	* lc_name = zend_string_tolower ( name )		91815	0					
ANR	91836	IdentifierDeclType	zend_string *		91815	0					
ANR	91837	Identifier	lc_name		91815	1					
ANR	91838	AssignmentExpression	* lc_name = zend_string_tolower ( name )		91815	2		=			
ANR	91839	Identifier	lc_name		91815	0					
ANR	91840	CallExpression	zend_string_tolower ( name )		91815	1					
ANR	91841	Callee	zend_string_tolower		91815	0					
ANR	91842	Identifier	zend_string_tolower		91815	0					
ANR	91843	ArgumentList	name		91815	1					
ANR	91844	Argument	name		91815	0					
ANR	91845	Identifier	name		91815	0					
ANR	91846	ExpressionStatement	"zend_add_literal_string ( op_array , & lc_name )"	474:1:13324:13367	91815	2	True				
ANR	91847	CallExpression	"zend_add_literal_string ( op_array , & lc_name )"		91815	0					
ANR	91848	Callee	zend_add_literal_string		91815	0					
ANR	91849	Identifier	zend_add_literal_string		91815	0					
ANR	91850	ArgumentList	op_array		91815	1					
ANR	91851	Argument	op_array		91815	0					
ANR	91852	Identifier	op_array		91815	0					
ANR	91853	Argument	& lc_name		91815	1					
ANR	91854	UnaryOperationExpression	& lc_name		91815	0					
ANR	91855	UnaryOperator	&		91815	0					
ANR	91856	Identifier	lc_name		91815	1					
ANR	91857	ReturnStatement	return ret ;	476:1:13371:13381	91815	3	True				
ANR	91858	Identifier	ret		91815	0					
ANR	91859	ReturnType	static int		91815	1					
ANR	91860	Identifier	zend_add_func_name_literal		91815	2					
ANR	91861	ParameterList	"zend_op_array * op_array , zend_string * name"		91815	3					
ANR	91862	Parameter	zend_op_array * op_array	467:38:13118:13140	91815	0	True				
ANR	91863	ParameterType	zend_op_array *		91815	0					
ANR	91864	Identifier	op_array		91815	1					
ANR	91865	Parameter	zend_string * name	467:63:13143:13159	91815	1	True				
ANR	91866	ParameterType	zend_string *		91815	0					
ANR	91867	Identifier	name		91815	1					
ANR	91868	CFGEntryNode	ENTRY		91815		True				
ANR	91869	CFGExitNode	EXIT		91815		True				
ANR	91870	Symbol	ret		91815						
ANR	91871	Symbol	& lc_name		91815						
ANR	91872	Symbol	zend_add_literal_string		91815						
ANR	91873	Symbol	name		91815						
ANR	91874	Symbol	& name		91815						
ANR	91875	Symbol	lc_name		91815						
ANR	91876	Symbol	op_array		91815						
ANR	91877	Symbol	zend_string_tolower		91815						
ANR	91878	Function	zend_add_ns_func_name_literal	480:0:13396:14071							
ANR	91879	FunctionDef	"zend_add_ns_func_name_literal (zend_op_array * op_array , zend_string * name)"		91878	0					
ANR	91880	CompoundStatement		481:0:13491:14071	91878	0					
ANR	91881	IdentifierDeclStatement	const char * unqualified_name ;	482:1:13494:13522	91878	0	True				
ANR	91882	IdentifierDecl	* unqualified_name		91878	0					
ANR	91883	IdentifierDeclType	const char *		91878	0					
ANR	91884	Identifier	unqualified_name		91878	1					
ANR	91885	IdentifierDeclStatement	size_t unqualified_name_len ;	483:1:13525:13552	91878	1	True				
ANR	91886	IdentifierDecl	unqualified_name_len		91878	0					
ANR	91887	IdentifierDeclType	size_t		91878	0					
ANR	91888	Identifier	unqualified_name_len		91878	1					
ANR	91889	IdentifierDeclStatement	"int ret = zend_add_literal_string ( op_array , & name ) ;"	486:1:13577:13627	91878	2	True				
ANR	91890	IdentifierDecl	"ret = zend_add_literal_string ( op_array , & name )"		91878	0					
ANR	91891	IdentifierDeclType	int		91878	0					
ANR	91892	Identifier	ret		91878	1					
ANR	91893	AssignmentExpression	"ret = zend_add_literal_string ( op_array , & name )"		91878	2		=			
ANR	91894	Identifier	ret		91878	0					
ANR	91895	CallExpression	"zend_add_literal_string ( op_array , & name )"		91878	1					
ANR	91896	Callee	zend_add_literal_string		91878	0					
ANR	91897	Identifier	zend_add_literal_string		91878	0					
ANR	91898	ArgumentList	op_array		91878	1					
ANR	91899	Argument	op_array		91878	0					
ANR	91900	Identifier	op_array		91878	0					
ANR	91901	Argument	& name		91878	1					
ANR	91902	UnaryOperationExpression	& name		91878	0					
ANR	91903	UnaryOperator	&		91878	0					
ANR	91904	Identifier	name		91878	1					
ANR	91905	IdentifierDeclStatement	zend_string * lc_name = zend_string_tolower ( name ) ;	489:1:13654:13702	91878	3	True				
ANR	91906	IdentifierDecl	* lc_name = zend_string_tolower ( name )		91878	0					
ANR	91907	IdentifierDeclType	zend_string *		91878	0					
ANR	91908	Identifier	lc_name		91878	1					
ANR	91909	AssignmentExpression	* lc_name = zend_string_tolower ( name )		91878	2		=			
ANR	91910	Identifier	lc_name		91878	0					
ANR	91911	CallExpression	zend_string_tolower ( name )		91878	1					
ANR	91912	Callee	zend_string_tolower		91878	0					
ANR	91913	Identifier	zend_string_tolower		91878	0					
ANR	91914	ArgumentList	name		91878	1					
ANR	91915	Argument	name		91878	0					
ANR	91916	Identifier	name		91878	0					
ANR	91917	ExpressionStatement	"zend_add_literal_string ( op_array , & lc_name )"	490:1:13705:13748	91878	4	True				
ANR	91918	CallExpression	"zend_add_literal_string ( op_array , & lc_name )"		91878	0					
ANR	91919	Callee	zend_add_literal_string		91878	0					
ANR	91920	Identifier	zend_add_literal_string		91878	0					
ANR	91921	ArgumentList	op_array		91878	1					
ANR	91922	Argument	op_array		91878	0					
ANR	91923	Identifier	op_array		91878	0					
ANR	91924	Argument	& lc_name		91878	1					
ANR	91925	UnaryOperationExpression	& lc_name		91878	0					
ANR	91926	UnaryOperator	&		91878	0					
ANR	91927	Identifier	lc_name		91878	1					
ANR	91928	IfStatement	"if ( zend_get_unqualified_name ( name , & unqualified_name , & unqualified_name_len ) )"		91878	5					
ANR	91929	Condition	"zend_get_unqualified_name ( name , & unqualified_name , & unqualified_name_len )"	493:5:13790:13862	91878	0	True				
ANR	91930	CallExpression	"zend_get_unqualified_name ( name , & unqualified_name , & unqualified_name_len )"		91878	0					
ANR	91931	Callee	zend_get_unqualified_name		91878	0					
ANR	91932	Identifier	zend_get_unqualified_name		91878	0					
ANR	91933	ArgumentList	name		91878	1					
ANR	91934	Argument	name		91878	0					
ANR	91935	Identifier	name		91878	0					
ANR	91936	Argument	& unqualified_name		91878	1					
ANR	91937	UnaryOperationExpression	& unqualified_name		91878	0					
ANR	91938	UnaryOperator	&		91878	0					
ANR	91939	Identifier	unqualified_name		91878	1					
ANR	91940	Argument	& unqualified_name_len		91878	2					
ANR	91941	UnaryOperationExpression	& unqualified_name_len		91878	0					
ANR	91942	UnaryOperator	&		91878	0					
ANR	91943	Identifier	unqualified_name_len		91878	1					
ANR	91944	CompoundStatement		13:80:373:373	91878	1					
ANR	91945	ExpressionStatement	"lc_name = zend_string_alloc ( unqualified_name_len , 0 )"	494:2:13869:13921	91878	0	True				
ANR	91946	AssignmentExpression	"lc_name = zend_string_alloc ( unqualified_name_len , 0 )"		91878	0		=			
ANR	91947	Identifier	lc_name		91878	0					
ANR	91948	CallExpression	"zend_string_alloc ( unqualified_name_len , 0 )"		91878	1					
ANR	91949	Callee	zend_string_alloc		91878	0					
ANR	91950	Identifier	zend_string_alloc		91878	0					
ANR	91951	ArgumentList	unqualified_name_len		91878	1					
ANR	91952	Argument	unqualified_name_len		91878	0					
ANR	91953	Identifier	unqualified_name_len		91878	0					
ANR	91954	Argument	0		91878	1					
ANR	91955	PrimaryExpression	0		91878	0					
ANR	91956	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lc_name ) , unqualified_name , unqualified_name_len )"	495:2:13925:14005	91878	1	True				
ANR	91957	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lc_name ) , unqualified_name , unqualified_name_len )"		91878	0					
ANR	91958	Callee	zend_str_tolower_copy		91878	0					
ANR	91959	Identifier	zend_str_tolower_copy		91878	0					
ANR	91960	ArgumentList	ZSTR_VAL ( lc_name )		91878	1					
ANR	91961	Argument	ZSTR_VAL ( lc_name )		91878	0					
ANR	91962	CallExpression	ZSTR_VAL ( lc_name )		91878	0					
ANR	91963	Callee	ZSTR_VAL		91878	0					
ANR	91964	Identifier	ZSTR_VAL		91878	0					
ANR	91965	ArgumentList	lc_name		91878	1					
ANR	91966	Argument	lc_name		91878	0					
ANR	91967	Identifier	lc_name		91878	0					
ANR	91968	Argument	unqualified_name		91878	1					
ANR	91969	Identifier	unqualified_name		91878	0					
ANR	91970	Argument	unqualified_name_len		91878	2					
ANR	91971	Identifier	unqualified_name_len		91878	0					
ANR	91972	ExpressionStatement	"zend_add_literal_string ( op_array , & lc_name )"	496:2:14009:14052	91878	2	True				
ANR	91973	CallExpression	"zend_add_literal_string ( op_array , & lc_name )"		91878	0					
ANR	91974	Callee	zend_add_literal_string		91878	0					
ANR	91975	Identifier	zend_add_literal_string		91878	0					
ANR	91976	ArgumentList	op_array		91878	1					
ANR	91977	Argument	op_array		91878	0					
ANR	91978	Identifier	op_array		91878	0					
ANR	91979	Argument	& lc_name		91878	1					
ANR	91980	UnaryOperationExpression	& lc_name		91878	0					
ANR	91981	UnaryOperator	&		91878	0					
ANR	91982	Identifier	lc_name		91878	1					
ANR	91983	ReturnStatement	return ret ;	499:1:14059:14069	91878	6	True				
ANR	91984	Identifier	ret		91878	0					
ANR	91985	ReturnType	static int		91878	1					
ANR	91986	Identifier	zend_add_ns_func_name_literal		91878	2					
ANR	91987	ParameterList	"zend_op_array * op_array , zend_string * name"		91878	3					
ANR	91988	Parameter	zend_op_array * op_array	480:41:13437:13459	91878	0	True				
ANR	91989	ParameterType	zend_op_array *		91878	0					
ANR	91990	Identifier	op_array		91878	1					
ANR	91991	Parameter	zend_string * name	480:66:13462:13478	91878	1	True				
ANR	91992	ParameterType	zend_string *		91878	0					
ANR	91993	Identifier	name		91878	1					
ANR	91994	CFGEntryNode	ENTRY		91878		True				
ANR	91995	CFGExitNode	EXIT		91878		True				
ANR	91996	Symbol	unqualified_name_len		91878						
ANR	91997	Symbol	ret		91878						
ANR	91998	Symbol	& unqualified_name_len		91878						
ANR	91999	Symbol	zend_string_alloc		91878						
ANR	92000	Symbol	unqualified_name		91878						
ANR	92001	Symbol	& name		91878						
ANR	92002	Symbol	lc_name		91878						
ANR	92003	Symbol	zend_string_tolower		91878						
ANR	92004	Symbol	& unqualified_name		91878						
ANR	92005	Symbol	ZSTR_VAL		91878						
ANR	92006	Symbol	& lc_name		91878						
ANR	92007	Symbol	zend_add_literal_string		91878						
ANR	92008	Symbol	name		91878						
ANR	92009	Symbol	zend_get_unqualified_name		91878						
ANR	92010	Symbol	op_array		91878						
ANR	92011	Function	zend_add_class_name_literal	503:0:14084:14418							
ANR	92012	FunctionDef	"zend_add_class_name_literal (zend_op_array * op_array , zend_string * name)"		92011	0					
ANR	92013	CompoundStatement		504:0:14177:14418	92011	0					
ANR	92014	IdentifierDeclStatement	"int ret = zend_add_literal_string ( op_array , & name ) ;"	506:1:14201:14251	92011	0	True				
ANR	92015	IdentifierDecl	"ret = zend_add_literal_string ( op_array , & name )"		92011	0					
ANR	92016	IdentifierDeclType	int		92011	0					
ANR	92017	Identifier	ret		92011	1					
ANR	92018	AssignmentExpression	"ret = zend_add_literal_string ( op_array , & name )"		92011	2		=			
ANR	92019	Identifier	ret		92011	0					
ANR	92020	CallExpression	"zend_add_literal_string ( op_array , & name )"		92011	1					
ANR	92021	Callee	zend_add_literal_string		92011	0					
ANR	92022	Identifier	zend_add_literal_string		92011	0					
ANR	92023	ArgumentList	op_array		92011	1					
ANR	92024	Argument	op_array		92011	0					
ANR	92025	Identifier	op_array		92011	0					
ANR	92026	Argument	& name		92011	1					
ANR	92027	UnaryOperationExpression	& name		92011	0					
ANR	92028	UnaryOperator	&		92011	0					
ANR	92029	Identifier	name		92011	1					
ANR	92030	IdentifierDeclStatement	zend_string * lc_name = zend_string_tolower ( name ) ;	509:1:14278:14326	92011	1	True				
ANR	92031	IdentifierDecl	* lc_name = zend_string_tolower ( name )		92011	0					
ANR	92032	IdentifierDeclType	zend_string *		92011	0					
ANR	92033	Identifier	lc_name		92011	1					
ANR	92034	AssignmentExpression	* lc_name = zend_string_tolower ( name )		92011	2		=			
ANR	92035	Identifier	lc_name		92011	0					
ANR	92036	CallExpression	zend_string_tolower ( name )		92011	1					
ANR	92037	Callee	zend_string_tolower		92011	0					
ANR	92038	Identifier	zend_string_tolower		92011	0					
ANR	92039	ArgumentList	name		92011	1					
ANR	92040	Argument	name		92011	0					
ANR	92041	Identifier	name		92011	0					
ANR	92042	ExpressionStatement	"zend_add_literal_string ( op_array , & lc_name )"	510:1:14329:14372	92011	2	True				
ANR	92043	CallExpression	"zend_add_literal_string ( op_array , & lc_name )"		92011	0					
ANR	92044	Callee	zend_add_literal_string		92011	0					
ANR	92045	Identifier	zend_add_literal_string		92011	0					
ANR	92046	ArgumentList	op_array		92011	1					
ANR	92047	Argument	op_array		92011	0					
ANR	92048	Identifier	op_array		92011	0					
ANR	92049	Argument	& lc_name		92011	1					
ANR	92050	UnaryOperationExpression	& lc_name		92011	0					
ANR	92051	UnaryOperator	&		92011	0					
ANR	92052	Identifier	lc_name		92011	1					
ANR	92053	ExpressionStatement	zend_alloc_cache_slot ( ret )	512:1:14376:14402	92011	3	True				
ANR	92054	CallExpression	zend_alloc_cache_slot ( ret )		92011	0					
ANR	92055	Callee	zend_alloc_cache_slot		92011	0					
ANR	92056	Identifier	zend_alloc_cache_slot		92011	0					
ANR	92057	ArgumentList	ret		92011	1					
ANR	92058	Argument	ret		92011	0					
ANR	92059	Identifier	ret		92011	0					
ANR	92060	ReturnStatement	return ret ;	514:1:14406:14416	92011	4	True				
ANR	92061	Identifier	ret		92011	0					
ANR	92062	ReturnType	static int		92011	1					
ANR	92063	Identifier	zend_add_class_name_literal		92011	2					
ANR	92064	ParameterList	"zend_op_array * op_array , zend_string * name"		92011	3					
ANR	92065	Parameter	zend_op_array * op_array	503:39:14123:14145	92011	0	True				
ANR	92066	ParameterType	zend_op_array *		92011	0					
ANR	92067	Identifier	op_array		92011	1					
ANR	92068	Parameter	zend_string * name	503:64:14148:14164	92011	1	True				
ANR	92069	ParameterType	zend_string *		92011	0					
ANR	92070	Identifier	name		92011	1					
ANR	92071	CFGEntryNode	ENTRY		92011		True				
ANR	92072	CFGExitNode	EXIT		92011		True				
ANR	92073	Symbol	ret		92011						
ANR	92074	Symbol	& lc_name		92011						
ANR	92075	Symbol	zend_add_literal_string		92011						
ANR	92076	Symbol	name		92011						
ANR	92077	Symbol	& name		92011						
ANR	92078	Symbol	lc_name		92011						
ANR	92079	Symbol	op_array		92011						
ANR	92080	Symbol	zend_string_tolower		92011						
ANR	92081	Function	zend_add_const_name_literal	518:0:14431:15702							
ANR	92082	FunctionDef	"zend_add_const_name_literal (zend_op_array * op_array , zend_string * name , zend_bool unqualified)"		92081	0					
ANR	92083	CompoundStatement		519:0:14547:15702	92081	0					
ANR	92084	IdentifierDeclStatement	zend_string * tmp_name ;	520:1:14550:14571	92081	0	True				
ANR	92085	IdentifierDecl	* tmp_name		92081	0					
ANR	92086	IdentifierDeclType	zend_string *		92081	0					
ANR	92087	Identifier	tmp_name		92081	1					
ANR	92088	IdentifierDeclStatement	"int ret = zend_add_literal_string ( op_array , & name ) ;"	522:1:14575:14625	92081	1	True				
ANR	92089	IdentifierDecl	"ret = zend_add_literal_string ( op_array , & name )"		92081	0					
ANR	92090	IdentifierDeclType	int		92081	0					
ANR	92091	Identifier	ret		92081	1					
ANR	92092	AssignmentExpression	"ret = zend_add_literal_string ( op_array , & name )"		92081	2		=			
ANR	92093	Identifier	ret		92081	0					
ANR	92094	CallExpression	"zend_add_literal_string ( op_array , & name )"		92081	1					
ANR	92095	Callee	zend_add_literal_string		92081	0					
ANR	92096	Identifier	zend_add_literal_string		92081	0					
ANR	92097	ArgumentList	op_array		92081	1					
ANR	92098	Argument	op_array		92081	0					
ANR	92099	Identifier	op_array		92081	0					
ANR	92100	Argument	& name		92081	1					
ANR	92101	UnaryOperationExpression	& name		92081	0					
ANR	92102	UnaryOperator	&		92081	0					
ANR	92103	Identifier	name		92081	1					
ANR	92104	IdentifierDeclStatement	"size_t ns_len = 0 , after_ns_len = ZSTR_LEN ( name ) ;"	524:1:14629:14677	92081	2	True				
ANR	92105	IdentifierDecl	ns_len = 0		92081	0					
ANR	92106	IdentifierDeclType	size_t		92081	0					
ANR	92107	Identifier	ns_len		92081	1					
ANR	92108	AssignmentExpression	ns_len = 0		92081	2		=			
ANR	92109	Identifier	ns_len		92081	0					
ANR	92110	PrimaryExpression	0		92081	1					
ANR	92111	IdentifierDecl	after_ns_len = ZSTR_LEN ( name )		92081	1					
ANR	92112	IdentifierDeclType	size_t		92081	0					
ANR	92113	Identifier	after_ns_len		92081	1					
ANR	92114	AssignmentExpression	after_ns_len = ZSTR_LEN ( name )		92081	2		=			
ANR	92115	Identifier	after_ns_len		92081	0					
ANR	92116	CallExpression	ZSTR_LEN ( name )		92081	1					
ANR	92117	Callee	ZSTR_LEN		92081	0					
ANR	92118	Identifier	ZSTR_LEN		92081	0					
ANR	92119	ArgumentList	name		92081	1					
ANR	92120	Argument	name		92081	0					
ANR	92121	Identifier	name		92081	0					
ANR	92122	IdentifierDeclStatement	"const char * after_ns = zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) ) ;"	525:1:14680:14753	92081	3	True				
ANR	92123	IdentifierDecl	"* after_ns = zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		92081	0					
ANR	92124	IdentifierDeclType	const char *		92081	0					
ANR	92125	Identifier	after_ns		92081	1					
ANR	92126	AssignmentExpression	"* after_ns = zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		92081	2		=			
ANR	92127	Identifier	after_ns		92081	0					
ANR	92128	CallExpression	"zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		92081	1					
ANR	92129	Callee	zend_memrchr		92081	0					
ANR	92130	Identifier	zend_memrchr		92081	0					
ANR	92131	ArgumentList	ZSTR_VAL ( name )		92081	1					
ANR	92132	Argument	ZSTR_VAL ( name )		92081	0					
ANR	92133	CallExpression	ZSTR_VAL ( name )		92081	0					
ANR	92134	Callee	ZSTR_VAL		92081	0					
ANR	92135	Identifier	ZSTR_VAL		92081	0					
ANR	92136	ArgumentList	name		92081	1					
ANR	92137	Argument	name		92081	0					
ANR	92138	Identifier	name		92081	0					
ANR	92139	Argument	'\\\\'		92081	1					
ANR	92140	PrimaryExpression	'\\\\'		92081	0					
ANR	92141	Argument	ZSTR_LEN ( name )		92081	2					
ANR	92142	CallExpression	ZSTR_LEN ( name )		92081	0					
ANR	92143	Callee	ZSTR_LEN		92081	0					
ANR	92144	Identifier	ZSTR_LEN		92081	0					
ANR	92145	ArgumentList	name		92081	1					
ANR	92146	Argument	name		92081	0					
ANR	92147	Identifier	name		92081	0					
ANR	92148	IfStatement	if ( after_ns )		92081	4					
ANR	92149	Condition	after_ns	526:5:14760:14767	92081	0	True				
ANR	92150	Identifier	after_ns		92081	0					
ANR	92151	CompoundStatement		8:15:222:222	92081	1					
ANR	92152	ExpressionStatement	after_ns += 1	527:2:14774:14787	92081	0	True				
ANR	92153	AssignmentExpression	after_ns += 1		92081	0		+=			
ANR	92154	Identifier	after_ns		92081	0					
ANR	92155	PrimaryExpression	1		92081	1					
ANR	92156	ExpressionStatement	ns_len = after_ns - ZSTR_VAL ( name ) - 1	528:2:14791:14829	92081	1	True				
ANR	92157	AssignmentExpression	ns_len = after_ns - ZSTR_VAL ( name ) - 1		92081	0		=			
ANR	92158	Identifier	ns_len		92081	0					
ANR	92159	AdditiveExpression	after_ns - ZSTR_VAL ( name ) - 1		92081	1		-			
ANR	92160	Identifier	after_ns		92081	0					
ANR	92161	AdditiveExpression	ZSTR_VAL ( name ) - 1		92081	1		-			
ANR	92162	CallExpression	ZSTR_VAL ( name )		92081	0					
ANR	92163	Callee	ZSTR_VAL		92081	0					
ANR	92164	Identifier	ZSTR_VAL		92081	0					
ANR	92165	ArgumentList	name		92081	1					
ANR	92166	Argument	name		92081	0					
ANR	92167	Identifier	name		92081	0					
ANR	92168	PrimaryExpression	1		92081	1					
ANR	92169	ExpressionStatement	after_ns_len = ZSTR_LEN ( name ) - ns_len - 1	529:2:14833:14875	92081	2	True				
ANR	92170	AssignmentExpression	after_ns_len = ZSTR_LEN ( name ) - ns_len - 1		92081	0		=			
ANR	92171	Identifier	after_ns_len		92081	0					
ANR	92172	AdditiveExpression	ZSTR_LEN ( name ) - ns_len - 1		92081	1		-			
ANR	92173	CallExpression	ZSTR_LEN ( name )		92081	0					
ANR	92174	Callee	ZSTR_LEN		92081	0					
ANR	92175	Identifier	ZSTR_LEN		92081	0					
ANR	92176	ArgumentList	name		92081	1					
ANR	92177	Argument	name		92081	0					
ANR	92178	Identifier	name		92081	0					
ANR	92179	AdditiveExpression	ns_len - 1		92081	1		-			
ANR	92180	Identifier	ns_len		92081	0					
ANR	92181	PrimaryExpression	1		92081	1					
ANR	92182	ExpressionStatement	"tmp_name = zend_string_init ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , 0 )"	532:2:14939:15001	92081	3	True				
ANR	92183	AssignmentExpression	"tmp_name = zend_string_init ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , 0 )"		92081	0		=			
ANR	92184	Identifier	tmp_name		92081	0					
ANR	92185	CallExpression	"zend_string_init ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , 0 )"		92081	1					
ANR	92186	Callee	zend_string_init		92081	0					
ANR	92187	Identifier	zend_string_init		92081	0					
ANR	92188	ArgumentList	ZSTR_VAL ( name )		92081	1					
ANR	92189	Argument	ZSTR_VAL ( name )		92081	0					
ANR	92190	CallExpression	ZSTR_VAL ( name )		92081	0					
ANR	92191	Callee	ZSTR_VAL		92081	0					
ANR	92192	Identifier	ZSTR_VAL		92081	0					
ANR	92193	ArgumentList	name		92081	1					
ANR	92194	Argument	name		92081	0					
ANR	92195	Identifier	name		92081	0					
ANR	92196	Argument	ZSTR_LEN ( name )		92081	1					
ANR	92197	CallExpression	ZSTR_LEN ( name )		92081	0					
ANR	92198	Callee	ZSTR_LEN		92081	0					
ANR	92199	Identifier	ZSTR_LEN		92081	0					
ANR	92200	ArgumentList	name		92081	1					
ANR	92201	Argument	name		92081	0					
ANR	92202	Identifier	name		92081	0					
ANR	92203	Argument	0		92081	2					
ANR	92204	PrimaryExpression	0		92081	0					
ANR	92205	ExpressionStatement	"zend_str_tolower ( ZSTR_VAL ( tmp_name ) , ns_len )"	533:2:15005:15049	92081	4	True				
ANR	92206	CallExpression	"zend_str_tolower ( ZSTR_VAL ( tmp_name ) , ns_len )"		92081	0					
ANR	92207	Callee	zend_str_tolower		92081	0					
ANR	92208	Identifier	zend_str_tolower		92081	0					
ANR	92209	ArgumentList	ZSTR_VAL ( tmp_name )		92081	1					
ANR	92210	Argument	ZSTR_VAL ( tmp_name )		92081	0					
ANR	92211	CallExpression	ZSTR_VAL ( tmp_name )		92081	0					
ANR	92212	Callee	ZSTR_VAL		92081	0					
ANR	92213	Identifier	ZSTR_VAL		92081	0					
ANR	92214	ArgumentList	tmp_name		92081	1					
ANR	92215	Argument	tmp_name		92081	0					
ANR	92216	Identifier	tmp_name		92081	0					
ANR	92217	Argument	ns_len		92081	1					
ANR	92218	Identifier	ns_len		92081	0					
ANR	92219	ExpressionStatement	"zend_add_literal_string ( op_array , & tmp_name )"	534:2:15053:15097	92081	5	True				
ANR	92220	CallExpression	"zend_add_literal_string ( op_array , & tmp_name )"		92081	0					
ANR	92221	Callee	zend_add_literal_string		92081	0					
ANR	92222	Identifier	zend_add_literal_string		92081	0					
ANR	92223	ArgumentList	op_array		92081	1					
ANR	92224	Argument	op_array		92081	0					
ANR	92225	Identifier	op_array		92081	0					
ANR	92226	Argument	& tmp_name		92081	1					
ANR	92227	UnaryOperationExpression	& tmp_name		92081	0					
ANR	92228	UnaryOperator	&		92081	0					
ANR	92229	Identifier	tmp_name		92081	1					
ANR	92230	ExpressionStatement	tmp_name = zend_string_tolower ( name )	537:2:15163:15199	92081	6	True				
ANR	92231	AssignmentExpression	tmp_name = zend_string_tolower ( name )		92081	0		=			
ANR	92232	Identifier	tmp_name		92081	0					
ANR	92233	CallExpression	zend_string_tolower ( name )		92081	1					
ANR	92234	Callee	zend_string_tolower		92081	0					
ANR	92235	Identifier	zend_string_tolower		92081	0					
ANR	92236	ArgumentList	name		92081	1					
ANR	92237	Argument	name		92081	0					
ANR	92238	Identifier	name		92081	0					
ANR	92239	ExpressionStatement	"zend_add_literal_string ( op_array , & tmp_name )"	538:2:15203:15247	92081	7	True				
ANR	92240	CallExpression	"zend_add_literal_string ( op_array , & tmp_name )"		92081	0					
ANR	92241	Callee	zend_add_literal_string		92081	0					
ANR	92242	Identifier	zend_add_literal_string		92081	0					
ANR	92243	ArgumentList	op_array		92081	1					
ANR	92244	Argument	op_array		92081	0					
ANR	92245	Identifier	op_array		92081	0					
ANR	92246	Argument	& tmp_name		92081	1					
ANR	92247	UnaryOperationExpression	& tmp_name		92081	0					
ANR	92248	UnaryOperator	&		92081	0					
ANR	92249	Identifier	tmp_name		92081	1					
ANR	92250	IfStatement	if ( ! unqualified )		92081	8					
ANR	92251	Condition	! unqualified	540:6:15256:15267	92081	0	True				
ANR	92252	UnaryOperationExpression	! unqualified		92081	0					
ANR	92253	UnaryOperator	!		92081	0					
ANR	92254	Identifier	unqualified		92081	1					
ANR	92255	CompoundStatement		22:20:722:722	92081	1					
ANR	92256	ReturnStatement	return ret ;	541:3:15275:15285	92081	0	True				
ANR	92257	Identifier	ret		92081	0					
ANR	92258	ElseStatement	else		92081	0					
ANR	92259	CompoundStatement		25:8:751:751	92081	0					
ANR	92260	ExpressionStatement	after_ns = ZSTR_VAL ( name )	544:2:15303:15328	92081	0	True				
ANR	92261	AssignmentExpression	after_ns = ZSTR_VAL ( name )		92081	0		=			
ANR	92262	Identifier	after_ns		92081	0					
ANR	92263	CallExpression	ZSTR_VAL ( name )		92081	1					
ANR	92264	Callee	ZSTR_VAL		92081	0					
ANR	92265	Identifier	ZSTR_VAL		92081	0					
ANR	92266	ArgumentList	name		92081	1					
ANR	92267	Argument	name		92081	0					
ANR	92268	Identifier	name		92081	0					
ANR	92269	ExpressionStatement	"tmp_name = zend_string_init ( after_ns , after_ns_len , 0 )"	548:1:15377:15431	92081	5	True				
ANR	92270	AssignmentExpression	"tmp_name = zend_string_init ( after_ns , after_ns_len , 0 )"		92081	0		=			
ANR	92271	Identifier	tmp_name		92081	0					
ANR	92272	CallExpression	"zend_string_init ( after_ns , after_ns_len , 0 )"		92081	1					
ANR	92273	Callee	zend_string_init		92081	0					
ANR	92274	Identifier	zend_string_init		92081	0					
ANR	92275	ArgumentList	after_ns		92081	1					
ANR	92276	Argument	after_ns		92081	0					
ANR	92277	Identifier	after_ns		92081	0					
ANR	92278	Argument	after_ns_len		92081	1					
ANR	92279	Identifier	after_ns_len		92081	0					
ANR	92280	Argument	0		92081	2					
ANR	92281	PrimaryExpression	0		92081	0					
ANR	92282	ExpressionStatement	"zend_add_literal_string ( op_array , & tmp_name )"	549:1:15434:15478	92081	6	True				
ANR	92283	CallExpression	"zend_add_literal_string ( op_array , & tmp_name )"		92081	0					
ANR	92284	Callee	zend_add_literal_string		92081	0					
ANR	92285	Identifier	zend_add_literal_string		92081	0					
ANR	92286	ArgumentList	op_array		92081	1					
ANR	92287	Argument	op_array		92081	0					
ANR	92288	Identifier	op_array		92081	0					
ANR	92289	Argument	& tmp_name		92081	1					
ANR	92290	UnaryOperationExpression	& tmp_name		92081	0					
ANR	92291	UnaryOperator	&		92081	0					
ANR	92292	Identifier	tmp_name		92081	1					
ANR	92293	ExpressionStatement	"tmp_name = zend_string_alloc ( after_ns_len , 0 )"	552:1:15526:15571	92081	7	True				
ANR	92294	AssignmentExpression	"tmp_name = zend_string_alloc ( after_ns_len , 0 )"		92081	0		=			
ANR	92295	Identifier	tmp_name		92081	0					
ANR	92296	CallExpression	"zend_string_alloc ( after_ns_len , 0 )"		92081	1					
ANR	92297	Callee	zend_string_alloc		92081	0					
ANR	92298	Identifier	zend_string_alloc		92081	0					
ANR	92299	ArgumentList	after_ns_len		92081	1					
ANR	92300	Argument	after_ns_len		92081	0					
ANR	92301	Identifier	after_ns_len		92081	0					
ANR	92302	Argument	0		92081	1					
ANR	92303	PrimaryExpression	0		92081	0					
ANR	92304	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( tmp_name ) , after_ns , after_ns_len )"	553:1:15574:15639	92081	8	True				
ANR	92305	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( tmp_name ) , after_ns , after_ns_len )"		92081	0					
ANR	92306	Callee	zend_str_tolower_copy		92081	0					
ANR	92307	Identifier	zend_str_tolower_copy		92081	0					
ANR	92308	ArgumentList	ZSTR_VAL ( tmp_name )		92081	1					
ANR	92309	Argument	ZSTR_VAL ( tmp_name )		92081	0					
ANR	92310	CallExpression	ZSTR_VAL ( tmp_name )		92081	0					
ANR	92311	Callee	ZSTR_VAL		92081	0					
ANR	92312	Identifier	ZSTR_VAL		92081	0					
ANR	92313	ArgumentList	tmp_name		92081	1					
ANR	92314	Argument	tmp_name		92081	0					
ANR	92315	Identifier	tmp_name		92081	0					
ANR	92316	Argument	after_ns		92081	1					
ANR	92317	Identifier	after_ns		92081	0					
ANR	92318	Argument	after_ns_len		92081	2					
ANR	92319	Identifier	after_ns_len		92081	0					
ANR	92320	ExpressionStatement	"zend_add_literal_string ( op_array , & tmp_name )"	554:1:15642:15686	92081	9	True				
ANR	92321	CallExpression	"zend_add_literal_string ( op_array , & tmp_name )"		92081	0					
ANR	92322	Callee	zend_add_literal_string		92081	0					
ANR	92323	Identifier	zend_add_literal_string		92081	0					
ANR	92324	ArgumentList	op_array		92081	1					
ANR	92325	Argument	op_array		92081	0					
ANR	92326	Identifier	op_array		92081	0					
ANR	92327	Argument	& tmp_name		92081	1					
ANR	92328	UnaryOperationExpression	& tmp_name		92081	0					
ANR	92329	UnaryOperator	&		92081	0					
ANR	92330	Identifier	tmp_name		92081	1					
ANR	92331	ReturnStatement	return ret ;	556:1:15690:15700	92081	10	True				
ANR	92332	Identifier	ret		92081	0					
ANR	92333	ReturnType	static int		92081	1					
ANR	92334	Identifier	zend_add_const_name_literal		92081	2					
ANR	92335	ParameterList	"zend_op_array * op_array , zend_string * name , zend_bool unqualified"		92081	3					
ANR	92336	Parameter	zend_op_array * op_array	518:39:14470:14492	92081	0	True				
ANR	92337	ParameterType	zend_op_array *		92081	0					
ANR	92338	Identifier	op_array		92081	1					
ANR	92339	Parameter	zend_string * name	518:64:14495:14511	92081	1	True				
ANR	92340	ParameterType	zend_string *		92081	0					
ANR	92341	Identifier	name		92081	1					
ANR	92342	Parameter	zend_bool unqualified	518:83:14514:14534	92081	2	True				
ANR	92343	ParameterType	zend_bool		92081	0					
ANR	92344	Identifier	unqualified		92081	1					
ANR	92345	CFGEntryNode	ENTRY		92081		True				
ANR	92346	CFGExitNode	EXIT		92081		True				
ANR	92347	Symbol	ret		92081						
ANR	92348	Symbol	zend_memrchr		92081						
ANR	92349	Symbol	zend_string_alloc		92081						
ANR	92350	Symbol	& name		92081						
ANR	92351	Symbol	after_ns		92081						
ANR	92352	Symbol	ns_len		92081						
ANR	92353	Symbol	zend_string_tolower		92081						
ANR	92354	Symbol	tmp_name		92081						
ANR	92355	Symbol	ZSTR_VAL		92081						
ANR	92356	Symbol	unqualified		92081						
ANR	92357	Symbol	zend_string_init		92081						
ANR	92358	Symbol	zend_add_literal_string		92081						
ANR	92359	Symbol	name		92081						
ANR	92360	Symbol	ZSTR_LEN		92081						
ANR	92361	Symbol	after_ns_len		92081						
ANR	92362	Symbol	& tmp_name		92081						
ANR	92363	Symbol	op_array		92081						
ANR	92364	DeclStmt									
ANR	92365	Decl							zval	zval	_c
ANR	92366	Function	zend_stop_lexing	566:0:15864:16003							
ANR	92367	FunctionDef	zend_stop_lexing ()		92366	0					
ANR	92368	CompoundStatement		567:0:15892:16003	92366	0					
ANR	92369	IfStatement	if ( LANG_SCNG ( on_event ) )		92366	0					
ANR	92370	Condition	LANG_SCNG ( on_event )	568:4:15898:15916	92366	0	True				
ANR	92371	CallExpression	LANG_SCNG ( on_event )		92366	0					
ANR	92372	Callee	LANG_SCNG		92366	0					
ANR	92373	Identifier	LANG_SCNG		92366	0					
ANR	92374	ArgumentList	on_event		92366	1					
ANR	92375	Argument	on_event		92366	0					
ANR	92376	Identifier	on_event		92366	0					
ANR	92377	ExpressionStatement	"LANG_SCNG ( on_event ) ( ON_STOP , END , 0 )"	568:25:15919:15955	92366	1	True				
ANR	92378	CallExpression	"LANG_SCNG ( on_event ) ( ON_STOP , END , 0 )"		92366	0					
ANR	92379	Callee	LANG_SCNG ( on_event )		92366	0					
ANR	92380	CallExpression	LANG_SCNG ( on_event )		92366	0					
ANR	92381	Callee	LANG_SCNG		92366	0					
ANR	92382	Identifier	LANG_SCNG		92366	0					
ANR	92383	ArgumentList	on_event		92366	1					
ANR	92384	Argument	on_event		92366	0					
ANR	92385	Identifier	on_event		92366	0					
ANR	92386	ArgumentList	ON_STOP		92366	1					
ANR	92387	Argument	ON_STOP		92366	0					
ANR	92388	Identifier	ON_STOP		92366	0					
ANR	92389	Argument	END		92366	1					
ANR	92390	Identifier	END		92366	0					
ANR	92391	Argument	0		92366	2					
ANR	92392	PrimaryExpression	0		92366	0					
ANR	92393	ExpressionStatement	LANG_SCNG ( yy_cursor ) = LANG_SCNG ( yy_limit )	570:1:15959:16001	92366	1	True				
ANR	92394	AssignmentExpression	LANG_SCNG ( yy_cursor ) = LANG_SCNG ( yy_limit )		92366	0		=			
ANR	92395	CallExpression	LANG_SCNG ( yy_cursor )		92366	0					
ANR	92396	Callee	LANG_SCNG		92366	0					
ANR	92397	Identifier	LANG_SCNG		92366	0					
ANR	92398	ArgumentList	yy_cursor		92366	1					
ANR	92399	Argument	yy_cursor		92366	0					
ANR	92400	Identifier	yy_cursor		92366	0					
ANR	92401	CallExpression	LANG_SCNG ( yy_limit )		92366	1					
ANR	92402	Callee	LANG_SCNG		92366	0					
ANR	92403	Identifier	LANG_SCNG		92366	0					
ANR	92404	ArgumentList	yy_limit		92366	1					
ANR	92405	Argument	yy_limit		92366	0					
ANR	92406	Identifier	yy_limit		92366	0					
ANR	92407	ReturnType	void		92366	1					
ANR	92408	Identifier	zend_stop_lexing		92366	2					
ANR	92409	ParameterList			92366	3					
ANR	92410	CFGEntryNode	ENTRY		92366		True				
ANR	92411	CFGExitNode	EXIT		92366		True				
ANR	92412	Symbol	yy_limit		92366						
ANR	92413	Symbol	LANG_SCNG		92366						
ANR	92414	Symbol	on_event		92366						
ANR	92415	Symbol	yy_cursor		92366						
ANR	92416	Symbol	END		92366						
ANR	92417	Symbol	ON_STOP		92366						
ANR	92418	Function	zend_begin_loop	573:0:16006:16948							
ANR	92419	FunctionDef	"zend_begin_loop (zend_uchar free_opcode , const znode * loop_var)"		92418	0					
ANR	92420	CompoundStatement		574:0:16098:16948	92418	0					
ANR	92421	IdentifierDeclStatement	zend_brk_cont_element * brk_cont_element ;	575:1:16101:16140	92418	0	True				
ANR	92422	IdentifierDecl	* brk_cont_element		92418	0					
ANR	92423	IdentifierDeclType	zend_brk_cont_element *		92418	0					
ANR	92424	Identifier	brk_cont_element		92418	1					
ANR	92425	IdentifierDeclStatement	int parent = CG ( context ) . current_brk_cont ;	576:1:16143:16184	92418	1	True				
ANR	92426	IdentifierDecl	parent = CG ( context ) . current_brk_cont		92418	0					
ANR	92427	IdentifierDeclType	int		92418	0					
ANR	92428	Identifier	parent		92418	1					
ANR	92429	AssignmentExpression	parent = CG ( context ) . current_brk_cont		92418	2		=			
ANR	92430	Identifier	parent		92418	0					
ANR	92431	MemberAccess	CG ( context ) . current_brk_cont		92418	1					
ANR	92432	CallExpression	CG ( context )		92418	0					
ANR	92433	Callee	CG		92418	0					
ANR	92434	Identifier	CG		92418	0					
ANR	92435	ArgumentList	context		92418	1					
ANR	92436	Argument	context		92418	0					
ANR	92437	Identifier	context		92418	0					
ANR	92438	Identifier	current_brk_cont		92418	1					
ANR	92439	IdentifierDeclStatement	zend_loop_var info = { 0 } ;	577:1:16187:16211	92418	2	True				
ANR	92440	IdentifierDecl	info = { 0 }		92418	0					
ANR	92441	IdentifierDeclType	zend_loop_var		92418	0					
ANR	92442	Identifier	info		92418	1					
ANR	92443	AssignmentExpression	info = { 0 }		92418	2		=			
ANR	92444	Identifier	info		92418	0					
ANR	92445	InitializerList	0		92418	1					
ANR	92446	PrimaryExpression	0		92418	0					
ANR	92447	ExpressionStatement	CG ( context ) . current_brk_cont = CG ( active_op_array ) -> last_brk_cont	579:1:16215:16280	92418	3	True				
ANR	92448	AssignmentExpression	CG ( context ) . current_brk_cont = CG ( active_op_array ) -> last_brk_cont		92418	0		=			
ANR	92449	MemberAccess	CG ( context ) . current_brk_cont		92418	0					
ANR	92450	CallExpression	CG ( context )		92418	0					
ANR	92451	Callee	CG		92418	0					
ANR	92452	Identifier	CG		92418	0					
ANR	92453	ArgumentList	context		92418	1					
ANR	92454	Argument	context		92418	0					
ANR	92455	Identifier	context		92418	0					
ANR	92456	Identifier	current_brk_cont		92418	1					
ANR	92457	PtrMemberAccess	CG ( active_op_array ) -> last_brk_cont		92418	1					
ANR	92458	CallExpression	CG ( active_op_array )		92418	0					
ANR	92459	Callee	CG		92418	0					
ANR	92460	Identifier	CG		92418	0					
ANR	92461	ArgumentList	active_op_array		92418	1					
ANR	92462	Argument	active_op_array		92418	0					
ANR	92463	Identifier	active_op_array		92418	0					
ANR	92464	Identifier	last_brk_cont		92418	1					
ANR	92465	ExpressionStatement	brk_cont_element = get_next_brk_cont_element ( CG ( active_op_array ) )	580:1:16283:16348	92418	4	True				
ANR	92466	AssignmentExpression	brk_cont_element = get_next_brk_cont_element ( CG ( active_op_array ) )		92418	0		=			
ANR	92467	Identifier	brk_cont_element		92418	0					
ANR	92468	CallExpression	get_next_brk_cont_element ( CG ( active_op_array ) )		92418	1					
ANR	92469	Callee	get_next_brk_cont_element		92418	0					
ANR	92470	Identifier	get_next_brk_cont_element		92418	0					
ANR	92471	ArgumentList	CG ( active_op_array )		92418	1					
ANR	92472	Argument	CG ( active_op_array )		92418	0					
ANR	92473	CallExpression	CG ( active_op_array )		92418	0					
ANR	92474	Callee	CG		92418	0					
ANR	92475	Identifier	CG		92418	0					
ANR	92476	ArgumentList	active_op_array		92418	1					
ANR	92477	Argument	active_op_array		92418	0					
ANR	92478	Identifier	active_op_array		92418	0					
ANR	92479	ExpressionStatement	brk_cont_element -> parent = parent	581:1:16351:16384	92418	5	True				
ANR	92480	AssignmentExpression	brk_cont_element -> parent = parent		92418	0		=			
ANR	92481	PtrMemberAccess	brk_cont_element -> parent		92418	0					
ANR	92482	Identifier	brk_cont_element		92418	0					
ANR	92483	Identifier	parent		92418	1					
ANR	92484	Identifier	parent		92418	1					
ANR	92485	IfStatement	if ( loop_var && ( loop_var -> op_type & ( IS_VAR | IS_TMP_VAR ) ) )		92418	6					
ANR	92486	Condition	loop_var && ( loop_var -> op_type & ( IS_VAR | IS_TMP_VAR ) )	583:5:16392:16444	92418	0	True				
ANR	92487	AndExpression	loop_var && ( loop_var -> op_type & ( IS_VAR | IS_TMP_VAR ) )		92418	0		&&			
ANR	92488	Identifier	loop_var		92418	0					
ANR	92489	BitAndExpression	loop_var -> op_type & ( IS_VAR | IS_TMP_VAR )		92418	1		&			
ANR	92490	PtrMemberAccess	loop_var -> op_type		92418	0					
ANR	92491	Identifier	loop_var		92418	0					
ANR	92492	Identifier	op_type		92418	1					
ANR	92493	InclusiveOrExpression	IS_VAR | IS_TMP_VAR		92418	1		|			
ANR	92494	Identifier	IS_VAR		92418	0					
ANR	92495	Identifier	IS_TMP_VAR		92418	1					
ANR	92496	CompoundStatement		10:60:348:348	92418	1					
ANR	92497	ExpressionStatement	info . opcode = free_opcode	584:2:16451:16476	92418	0	True				
ANR	92498	AssignmentExpression	info . opcode = free_opcode		92418	0		=			
ANR	92499	MemberAccess	info . opcode		92418	0					
ANR	92500	Identifier	info		92418	0					
ANR	92501	Identifier	opcode		92418	1					
ANR	92502	Identifier	free_opcode		92418	1					
ANR	92503	ExpressionStatement	info . var_type = loop_var -> op_type	585:2:16480:16513	92418	1	True				
ANR	92504	AssignmentExpression	info . var_type = loop_var -> op_type		92418	0		=			
ANR	92505	MemberAccess	info . var_type		92418	0					
ANR	92506	Identifier	info		92418	0					
ANR	92507	Identifier	var_type		92418	1					
ANR	92508	PtrMemberAccess	loop_var -> op_type		92418	1					
ANR	92509	Identifier	loop_var		92418	0					
ANR	92510	Identifier	op_type		92418	1					
ANR	92511	ExpressionStatement	info . var_num = loop_var -> u . op . var	586:2:16517:16550	92418	2	True				
ANR	92512	AssignmentExpression	info . var_num = loop_var -> u . op . var		92418	0		=			
ANR	92513	MemberAccess	info . var_num		92418	0					
ANR	92514	Identifier	info		92418	0					
ANR	92515	Identifier	var_num		92418	1					
ANR	92516	MemberAccess	loop_var -> u . op . var		92418	1					
ANR	92517	MemberAccess	loop_var -> u . op		92418	0					
ANR	92518	PtrMemberAccess	loop_var -> u		92418	0					
ANR	92519	Identifier	loop_var		92418	0					
ANR	92520	Identifier	u		92418	1					
ANR	92521	Identifier	op		92418	1					
ANR	92522	Identifier	var		92418	1					
ANR	92523	ExpressionStatement	info . u . brk_cont_offset = CG ( context ) . current_brk_cont	587:2:16554:16607	92418	3	True				
ANR	92524	AssignmentExpression	info . u . brk_cont_offset = CG ( context ) . current_brk_cont		92418	0		=			
ANR	92525	MemberAccess	info . u . brk_cont_offset		92418	0					
ANR	92526	MemberAccess	info . u		92418	0					
ANR	92527	Identifier	info		92418	0					
ANR	92528	Identifier	u		92418	1					
ANR	92529	Identifier	brk_cont_offset		92418	1					
ANR	92530	MemberAccess	CG ( context ) . current_brk_cont		92418	1					
ANR	92531	CallExpression	CG ( context )		92418	0					
ANR	92532	Callee	CG		92418	0					
ANR	92533	Identifier	CG		92418	0					
ANR	92534	ArgumentList	context		92418	1					
ANR	92535	Argument	context		92418	0					
ANR	92536	Identifier	context		92418	0					
ANR	92537	Identifier	current_brk_cont		92418	1					
ANR	92538	ExpressionStatement	brk_cont_element -> start = get_next_op_number ( CG ( active_op_array ) )	588:2:16611:16676	92418	4	True				
ANR	92539	AssignmentExpression	brk_cont_element -> start = get_next_op_number ( CG ( active_op_array ) )		92418	0		=			
ANR	92540	PtrMemberAccess	brk_cont_element -> start		92418	0					
ANR	92541	Identifier	brk_cont_element		92418	0					
ANR	92542	Identifier	start		92418	1					
ANR	92543	CallExpression	get_next_op_number ( CG ( active_op_array ) )		92418	1					
ANR	92544	Callee	get_next_op_number		92418	0					
ANR	92545	Identifier	get_next_op_number		92418	0					
ANR	92546	ArgumentList	CG ( active_op_array )		92418	1					
ANR	92547	Argument	CG ( active_op_array )		92418	0					
ANR	92548	CallExpression	CG ( active_op_array )		92418	0					
ANR	92549	Callee	CG		92418	0					
ANR	92550	Identifier	CG		92418	0					
ANR	92551	ArgumentList	active_op_array		92418	1					
ANR	92552	Argument	active_op_array		92418	0					
ANR	92553	Identifier	active_op_array		92418	0					
ANR	92554	ElseStatement	else		92418	0					
ANR	92555	CompoundStatement		16:8:587:587	92418	0					
ANR	92556	ExpressionStatement	info . opcode = ZEND_NOP	590:2:16690:16712	92418	0	True				
ANR	92557	AssignmentExpression	info . opcode = ZEND_NOP		92418	0		=			
ANR	92558	MemberAccess	info . opcode		92418	0					
ANR	92559	Identifier	info		92418	0					
ANR	92560	Identifier	opcode		92418	1					
ANR	92561	Identifier	ZEND_NOP		92418	1					
ANR	92562	ExpressionStatement	brk_cont_element -> start = - 1	593:2:16868:16896	92418	1	True				
ANR	92563	AssignmentExpression	brk_cont_element -> start = - 1		92418	0		=			
ANR	92564	PtrMemberAccess	brk_cont_element -> start		92418	0					
ANR	92565	Identifier	brk_cont_element		92418	0					
ANR	92566	Identifier	start		92418	1					
ANR	92567	UnaryOperationExpression	- 1		92418	1					
ANR	92568	UnaryOperator	-		92418	0					
ANR	92569	PrimaryExpression	1		92418	1					
ANR	92570	ExpressionStatement	"zend_stack_push ( & CG ( loop_var_stack ) , & info )"	596:1:16903:16946	92418	7	True				
ANR	92571	CallExpression	"zend_stack_push ( & CG ( loop_var_stack ) , & info )"		92418	0					
ANR	92572	Callee	zend_stack_push		92418	0					
ANR	92573	Identifier	zend_stack_push		92418	0					
ANR	92574	ArgumentList	& CG ( loop_var_stack )		92418	1					
ANR	92575	Argument	& CG ( loop_var_stack )		92418	0					
ANR	92576	UnaryOperationExpression	& CG ( loop_var_stack )		92418	0					
ANR	92577	UnaryOperator	&		92418	0					
ANR	92578	CallExpression	CG ( loop_var_stack )		92418	1					
ANR	92579	Callee	CG		92418	0					
ANR	92580	Identifier	CG		92418	0					
ANR	92581	ArgumentList	loop_var_stack		92418	1					
ANR	92582	Argument	loop_var_stack		92418	0					
ANR	92583	Identifier	loop_var_stack		92418	0					
ANR	92584	Argument	& info		92418	1					
ANR	92585	UnaryOperationExpression	& info		92418	0					
ANR	92586	UnaryOperator	&		92418	0					
ANR	92587	Identifier	info		92418	1					
ANR	92588	ReturnType	static inline void		92418	1					
ANR	92589	Identifier	zend_begin_loop		92418	2					
ANR	92590	ParameterList	"zend_uchar free_opcode , const znode * loop_var"		92418	3					
ANR	92591	Parameter	zend_uchar free_opcode	573:35:16041:16062	92418	0	True				
ANR	92592	ParameterType	zend_uchar		92418	0					
ANR	92593	Identifier	free_opcode		92418	1					
ANR	92594	Parameter	const znode * loop_var	573:59:16065:16085	92418	1	True				
ANR	92595	ParameterType	const znode *		92418	0					
ANR	92596	Identifier	loop_var		92418	1					
ANR	92597	CFGEntryNode	ENTRY		92418		True				
ANR	92598	CFGExitNode	EXIT		92418		True				
ANR	92599	Symbol	parent		92418						
ANR	92600	Symbol	* CG		92418						
ANR	92601	Symbol	CG ( active_op_array ) -> last_brk_cont		92418						
ANR	92602	Symbol	get_next_brk_cont_element		92418						
ANR	92603	Symbol	& CG		92418						
ANR	92604	Symbol	info . u		92418						
ANR	92605	Symbol	loop_var_stack		92418						
ANR	92606	Symbol	loop_var -> u . op		92418						
ANR	92607	Symbol	context		92418						
ANR	92608	Symbol	free_opcode		92418						
ANR	92609	Symbol	loop_var		92418						
ANR	92610	Symbol	CG ( context ) . current_brk_cont		92418						
ANR	92611	Symbol	info		92418						
ANR	92612	Symbol	IS_TMP_VAR		92418						
ANR	92613	Symbol	* brk_cont_element		92418						
ANR	92614	Symbol	loop_var -> op_type		92418						
ANR	92615	Symbol	CG		92418						
ANR	92616	Symbol	info . var_num		92418						
ANR	92617	Symbol	& info		92418						
ANR	92618	Symbol	active_op_array		92418						
ANR	92619	Symbol	info . opcode		92418						
ANR	92620	Symbol	info . var_type		92418						
ANR	92621	Symbol	brk_cont_element		92418						
ANR	92622	Symbol	* loop_var		92418						
ANR	92623	Symbol	brk_cont_element -> start		92418						
ANR	92624	Symbol	ZEND_NOP		92418						
ANR	92625	Symbol	brk_cont_element -> parent		92418						
ANR	92626	Symbol	info . u . brk_cont_offset		92418						
ANR	92627	Symbol	IS_VAR		92418						
ANR	92628	Symbol	get_next_op_number		92418						
ANR	92629	Symbol	loop_var -> u . op . var		92418						
ANR	92630	Symbol	loop_var -> u		92418						
ANR	92631	Function	zend_end_loop	600:0:16961:17338							
ANR	92632	FunctionDef	zend_end_loop (int cont_addr)		92631	0					
ANR	92633	CompoundStatement		601:0:17019:17338	92631	0					
ANR	92634	IdentifierDeclStatement	zend_brk_cont_element * brk_cont_element = & CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ] ;	602:1:17022:17132	92631	0	True				
ANR	92635	IdentifierDecl	* brk_cont_element = & CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ]		92631	0					
ANR	92636	IdentifierDeclType	zend_brk_cont_element *		92631	0					
ANR	92637	Identifier	brk_cont_element		92631	1					
ANR	92638	AssignmentExpression	* brk_cont_element = & CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ]		92631	2		=			
ANR	92639	Identifier	brk_cont_element		92631	0					
ANR	92640	UnaryOperationExpression	& CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ]		92631	1					
ANR	92641	UnaryOperator	&		92631	0					
ANR	92642	ArrayIndexing	CG ( active_op_array ) -> brk_cont_array [ CG ( context ) . current_brk_cont ]		92631	1					
ANR	92643	PtrMemberAccess	CG ( active_op_array ) -> brk_cont_array		92631	0					
ANR	92644	CallExpression	CG ( active_op_array )		92631	0					
ANR	92645	Callee	CG		92631	0					
ANR	92646	Identifier	CG		92631	0					
ANR	92647	ArgumentList	active_op_array		92631	1					
ANR	92648	Argument	active_op_array		92631	0					
ANR	92649	Identifier	active_op_array		92631	0					
ANR	92650	Identifier	brk_cont_array		92631	1					
ANR	92651	MemberAccess	CG ( context ) . current_brk_cont		92631	1					
ANR	92652	CallExpression	CG ( context )		92631	0					
ANR	92653	Callee	CG		92631	0					
ANR	92654	Identifier	CG		92631	0					
ANR	92655	ArgumentList	context		92631	1					
ANR	92656	Argument	context		92631	0					
ANR	92657	Identifier	context		92631	0					
ANR	92658	Identifier	current_brk_cont		92631	1					
ANR	92659	ExpressionStatement	brk_cont_element -> cont = cont_addr	604:1:17135:17169	92631	1	True				
ANR	92660	AssignmentExpression	brk_cont_element -> cont = cont_addr		92631	0		=			
ANR	92661	PtrMemberAccess	brk_cont_element -> cont		92631	0					
ANR	92662	Identifier	brk_cont_element		92631	0					
ANR	92663	Identifier	cont		92631	1					
ANR	92664	Identifier	cont_addr		92631	1					
ANR	92665	ExpressionStatement	brk_cont_element -> brk = get_next_op_number ( CG ( active_op_array ) )	605:1:17172:17235	92631	2	True				
ANR	92666	AssignmentExpression	brk_cont_element -> brk = get_next_op_number ( CG ( active_op_array ) )		92631	0		=			
ANR	92667	PtrMemberAccess	brk_cont_element -> brk		92631	0					
ANR	92668	Identifier	brk_cont_element		92631	0					
ANR	92669	Identifier	brk		92631	1					
ANR	92670	CallExpression	get_next_op_number ( CG ( active_op_array ) )		92631	1					
ANR	92671	Callee	get_next_op_number		92631	0					
ANR	92672	Identifier	get_next_op_number		92631	0					
ANR	92673	ArgumentList	CG ( active_op_array )		92631	1					
ANR	92674	Argument	CG ( active_op_array )		92631	0					
ANR	92675	CallExpression	CG ( active_op_array )		92631	0					
ANR	92676	Callee	CG		92631	0					
ANR	92677	Identifier	CG		92631	0					
ANR	92678	ArgumentList	active_op_array		92631	1					
ANR	92679	Argument	active_op_array		92631	0					
ANR	92680	Identifier	active_op_array		92631	0					
ANR	92681	ExpressionStatement	CG ( context ) . current_brk_cont = brk_cont_element -> parent	606:1:17238:17293	92631	3	True				
ANR	92682	AssignmentExpression	CG ( context ) . current_brk_cont = brk_cont_element -> parent		92631	0		=			
ANR	92683	MemberAccess	CG ( context ) . current_brk_cont		92631	0					
ANR	92684	CallExpression	CG ( context )		92631	0					
ANR	92685	Callee	CG		92631	0					
ANR	92686	Identifier	CG		92631	0					
ANR	92687	ArgumentList	context		92631	1					
ANR	92688	Argument	context		92631	0					
ANR	92689	Identifier	context		92631	0					
ANR	92690	Identifier	current_brk_cont		92631	1					
ANR	92691	PtrMemberAccess	brk_cont_element -> parent		92631	1					
ANR	92692	Identifier	brk_cont_element		92631	0					
ANR	92693	Identifier	parent		92631	1					
ANR	92694	ExpressionStatement	zend_stack_del_top ( & CG ( loop_var_stack ) )	608:1:17297:17336	92631	4	True				
ANR	92695	CallExpression	zend_stack_del_top ( & CG ( loop_var_stack ) )		92631	0					
ANR	92696	Callee	zend_stack_del_top		92631	0					
ANR	92697	Identifier	zend_stack_del_top		92631	0					
ANR	92698	ArgumentList	& CG ( loop_var_stack )		92631	1					
ANR	92699	Argument	& CG ( loop_var_stack )		92631	0					
ANR	92700	UnaryOperationExpression	& CG ( loop_var_stack )		92631	0					
ANR	92701	UnaryOperator	&		92631	0					
ANR	92702	CallExpression	CG ( loop_var_stack )		92631	1					
ANR	92703	Callee	CG		92631	0					
ANR	92704	Identifier	CG		92631	0					
ANR	92705	ArgumentList	loop_var_stack		92631	1					
ANR	92706	Argument	loop_var_stack		92631	0					
ANR	92707	Identifier	loop_var_stack		92631	0					
ANR	92708	ReturnType	static inline void		92631	1					
ANR	92709	Identifier	zend_end_loop		92631	2					
ANR	92710	ParameterList	int cont_addr		92631	3					
ANR	92711	Parameter	int cont_addr	600:33:16994:17006	92631	0	True				
ANR	92712	ParameterType	int		92631	0					
ANR	92713	Identifier	cont_addr		92631	1					
ANR	92714	CFGEntryNode	ENTRY		92631		True				
ANR	92715	CFGExitNode	EXIT		92631		True				
ANR	92716	Symbol	* brk_cont_element		92631						
ANR	92717	Symbol	brk_cont_element -> cont		92631						
ANR	92718	Symbol	CG		92631						
ANR	92719	Symbol	CG ( active_op_array ) -> brk_cont_array		92631						
ANR	92720	Symbol	active_op_array		92631						
ANR	92721	Symbol	* CG		92631						
ANR	92722	Symbol	brk_cont_element		92631						
ANR	92723	Symbol	& CG		92631						
ANR	92724	Symbol	loop_var_stack		92631						
ANR	92725	Symbol	context		92631						
ANR	92726	Symbol	brk_cont_element -> parent		92631						
ANR	92727	Symbol	brk_cont_element -> brk		92631						
ANR	92728	Symbol	get_next_op_number		92631						
ANR	92729	Symbol	cont_addr		92631						
ANR	92730	Symbol	CG ( context ) . current_brk_cont		92631						
ANR	92731	Function	zend_do_free	612:0:17351:19511							
ANR	92732	FunctionDef	zend_do_free (znode * op1)		92731	0					
ANR	92733	CompoundStatement		613:0:17391:19511	92731	0					
ANR	92734	IfStatement	if ( op1 -> op_type == IS_TMP_VAR )		92731	0					
ANR	92735	Condition	op1 -> op_type == IS_TMP_VAR	614:5:17398:17421	92731	0	True				
ANR	92736	EqualityExpression	op1 -> op_type == IS_TMP_VAR		92731	0		==			
ANR	92737	PtrMemberAccess	op1 -> op_type		92731	0					
ANR	92738	Identifier	op1		92731	0					
ANR	92739	Identifier	op_type		92731	1					
ANR	92740	Identifier	IS_TMP_VAR		92731	1					
ANR	92741	CompoundStatement		3:2:36:86	92731	1					
ANR	92742	IdentifierDeclStatement	zend_op * opline = get_next_op ( CG ( active_op_array ) ) ;	615:2:17428:17478	92731	0	True				
ANR	92743	IdentifierDecl	* opline = get_next_op ( CG ( active_op_array ) )		92731	0					
ANR	92744	IdentifierDeclType	zend_op *		92731	0					
ANR	92745	Identifier	opline		92731	1					
ANR	92746	AssignmentExpression	* opline = get_next_op ( CG ( active_op_array ) )		92731	2		=			
ANR	92747	Identifier	opline		92731	0					
ANR	92748	CallExpression	get_next_op ( CG ( active_op_array ) )		92731	1					
ANR	92749	Callee	get_next_op		92731	0					
ANR	92750	Identifier	get_next_op		92731	0					
ANR	92751	ArgumentList	CG ( active_op_array )		92731	1					
ANR	92752	Argument	CG ( active_op_array )		92731	0					
ANR	92753	CallExpression	CG ( active_op_array )		92731	0					
ANR	92754	Callee	CG		92731	0					
ANR	92755	Identifier	CG		92731	0					
ANR	92756	ArgumentList	active_op_array		92731	1					
ANR	92757	Argument	active_op_array		92731	0					
ANR	92758	Identifier	active_op_array		92731	0					
ANR	92759	ExpressionStatement	opline -> opcode = ZEND_FREE	617:2:17483:17509	92731	1	True				
ANR	92760	AssignmentExpression	opline -> opcode = ZEND_FREE		92731	0		=			
ANR	92761	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92762	Identifier	opline		92731	0					
ANR	92763	Identifier	opcode		92731	1					
ANR	92764	Identifier	ZEND_FREE		92731	1					
ANR	92765	ExpressionStatement	"SET_NODE ( opline -> op1 , op1 )"	618:2:17513:17539	92731	2	True				
ANR	92766	CallExpression	"SET_NODE ( opline -> op1 , op1 )"		92731	0					
ANR	92767	Callee	SET_NODE		92731	0					
ANR	92768	Identifier	SET_NODE		92731	0					
ANR	92769	ArgumentList	opline -> op1		92731	1					
ANR	92770	Argument	opline -> op1		92731	0					
ANR	92771	PtrMemberAccess	opline -> op1		92731	0					
ANR	92772	Identifier	opline		92731	0					
ANR	92773	Identifier	op1		92731	1					
ANR	92774	Argument	op1		92731	1					
ANR	92775	Identifier	op1		92731	0					
ANR	92776	ExpressionStatement	SET_UNUSED ( opline -> op2 )	619:2:17543:17566	92731	3	True				
ANR	92777	CallExpression	SET_UNUSED ( opline -> op2 )		92731	0					
ANR	92778	Callee	SET_UNUSED		92731	0					
ANR	92779	Identifier	SET_UNUSED		92731	0					
ANR	92780	ArgumentList	opline -> op2		92731	1					
ANR	92781	Argument	opline -> op2		92731	0					
ANR	92782	PtrMemberAccess	opline -> op2		92731	0					
ANR	92783	Identifier	opline		92731	0					
ANR	92784	Identifier	op2		92731	1					
ANR	92785	ElseStatement	else		92731	0					
ANR	92786	IfStatement	if ( op1 -> op_type == IS_VAR )		92731	0					
ANR	92787	Condition	op1 -> op_type == IS_VAR	620:12:17580:17599	92731	0	True				
ANR	92788	EqualityExpression	op1 -> op_type == IS_VAR		92731	0		==			
ANR	92789	PtrMemberAccess	op1 -> op_type		92731	0					
ANR	92790	Identifier	op1		92731	0					
ANR	92791	Identifier	op_type		92731	1					
ANR	92792	Identifier	IS_VAR		92731	1					
ANR	92793	CompoundStatement		9:2:214:290	92731	1					
ANR	92794	IdentifierDeclStatement	zend_op * opline = & CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] ;	621:2:17606:17682	92731	0	True				
ANR	92795	IdentifierDecl	* opline = & CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		92731	0					
ANR	92796	IdentifierDeclType	zend_op *		92731	0					
ANR	92797	Identifier	opline		92731	1					
ANR	92798	AssignmentExpression	* opline = & CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		92731	2		=			
ANR	92799	Identifier	opline		92731	0					
ANR	92800	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		92731	1					
ANR	92801	UnaryOperator	&		92731	0					
ANR	92802	ArrayIndexing	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		92731	1					
ANR	92803	PtrMemberAccess	CG ( active_op_array ) -> opcodes		92731	0					
ANR	92804	CallExpression	CG ( active_op_array )		92731	0					
ANR	92805	Callee	CG		92731	0					
ANR	92806	Identifier	CG		92731	0					
ANR	92807	ArgumentList	active_op_array		92731	1					
ANR	92808	Argument	active_op_array		92731	0					
ANR	92809	Identifier	active_op_array		92731	0					
ANR	92810	Identifier	opcodes		92731	1					
ANR	92811	AdditiveExpression	CG ( active_op_array ) -> last - 1		92731	1		-			
ANR	92812	PtrMemberAccess	CG ( active_op_array ) -> last		92731	0					
ANR	92813	CallExpression	CG ( active_op_array )		92731	0					
ANR	92814	Callee	CG		92731	0					
ANR	92815	Identifier	CG		92731	0					
ANR	92816	ArgumentList	active_op_array		92731	1					
ANR	92817	Argument	active_op_array		92731	0					
ANR	92818	Identifier	active_op_array		92731	0					
ANR	92819	Identifier	last		92731	1					
ANR	92820	PrimaryExpression	1		92731	1					
ANR	92821	WhileStatement	while ( opline -> opcode == ZEND_END_SILENCE || opline -> opcode == ZEND_EXT_FCALL_END || opline -> opcode == ZEND_OP_DATA )		92731	1					
ANR	92822	Condition	opline -> opcode == ZEND_END_SILENCE || opline -> opcode == ZEND_EXT_FCALL_END || opline -> opcode == ZEND_OP_DATA	623:9:17694:17801	92731	0	True				
ANR	92823	OrExpression	opline -> opcode == ZEND_END_SILENCE || opline -> opcode == ZEND_EXT_FCALL_END || opline -> opcode == ZEND_OP_DATA		92731	0		||			
ANR	92824	EqualityExpression	opline -> opcode == ZEND_END_SILENCE		92731	0		==			
ANR	92825	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92826	Identifier	opline		92731	0					
ANR	92827	Identifier	opcode		92731	1					
ANR	92828	Identifier	ZEND_END_SILENCE		92731	1					
ANR	92829	OrExpression	opline -> opcode == ZEND_EXT_FCALL_END || opline -> opcode == ZEND_OP_DATA		92731	1		||			
ANR	92830	EqualityExpression	opline -> opcode == ZEND_EXT_FCALL_END		92731	0		==			
ANR	92831	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92832	Identifier	opline		92731	0					
ANR	92833	Identifier	opcode		92731	1					
ANR	92834	Identifier	ZEND_EXT_FCALL_END		92731	1					
ANR	92835	EqualityExpression	opline -> opcode == ZEND_OP_DATA		92731	1		==			
ANR	92836	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92837	Identifier	opline		92731	0					
ANR	92838	Identifier	opcode		92731	1					
ANR	92839	Identifier	ZEND_OP_DATA		92731	1					
ANR	92840	CompoundStatement		11:119:412:412	92731	1					
ANR	92841	ExpressionStatement	opline --	624:3:17809:17817	92731	0	True				
ANR	92842	PostIncDecOperationExpression	opline --		92731	0					
ANR	92843	Identifier	opline		92731	0					
ANR	92844	IncDec	--		92731	1					
ANR	92845	IfStatement	if ( opline -> result_type == IS_VAR && opline -> result . var == op1 -> u . op . var )		92731	2					
ANR	92846	Condition	opline -> result_type == IS_VAR && opline -> result . var == op1 -> u . op . var	626:6:17829:17899	92731	0	True				
ANR	92847	AndExpression	opline -> result_type == IS_VAR && opline -> result . var == op1 -> u . op . var		92731	0		&&			
ANR	92848	EqualityExpression	opline -> result_type == IS_VAR		92731	0		==			
ANR	92849	PtrMemberAccess	opline -> result_type		92731	0					
ANR	92850	Identifier	opline		92731	0					
ANR	92851	Identifier	result_type		92731	1					
ANR	92852	Identifier	IS_VAR		92731	1					
ANR	92853	EqualityExpression	opline -> result . var == op1 -> u . op . var		92731	1		==			
ANR	92854	MemberAccess	opline -> result . var		92731	0					
ANR	92855	PtrMemberAccess	opline -> result		92731	0					
ANR	92856	Identifier	opline		92731	0					
ANR	92857	Identifier	result		92731	1					
ANR	92858	Identifier	var		92731	1					
ANR	92859	MemberAccess	op1 -> u . op . var		92731	1					
ANR	92860	MemberAccess	op1 -> u . op		92731	0					
ANR	92861	PtrMemberAccess	op1 -> u		92731	0					
ANR	92862	Identifier	op1		92731	0					
ANR	92863	Identifier	u		92731	1					
ANR	92864	Identifier	op		92731	1					
ANR	92865	Identifier	var		92731	1					
ANR	92866	CompoundStatement		15:43:510:510	92731	1					
ANR	92867	IfStatement	if ( opline -> opcode == ZEND_FETCH_R || opline -> opcode == ZEND_FETCH_DIM_R || opline -> opcode == ZEND_FETCH_OBJ_R )		92731	0					
ANR	92868	Condition	opline -> opcode == ZEND_FETCH_R || opline -> opcode == ZEND_FETCH_DIM_R || opline -> opcode == ZEND_FETCH_OBJ_R	628:7:17911:18030	92731	0	True				
ANR	92869	OrExpression	opline -> opcode == ZEND_FETCH_R || opline -> opcode == ZEND_FETCH_DIM_R || opline -> opcode == ZEND_FETCH_OBJ_R		92731	0		||			
ANR	92870	EqualityExpression	opline -> opcode == ZEND_FETCH_R		92731	0		==			
ANR	92871	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92872	Identifier	opline		92731	0					
ANR	92873	Identifier	opcode		92731	1					
ANR	92874	Identifier	ZEND_FETCH_R		92731	1					
ANR	92875	OrExpression	opline -> opcode == ZEND_FETCH_DIM_R || opline -> opcode == ZEND_FETCH_OBJ_R		92731	1		||			
ANR	92876	EqualityExpression	opline -> opcode == ZEND_FETCH_DIM_R		92731	0		==			
ANR	92877	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92878	Identifier	opline		92731	0					
ANR	92879	Identifier	opcode		92731	1					
ANR	92880	Identifier	ZEND_FETCH_DIM_R		92731	1					
ANR	92881	EqualityExpression	opline -> opcode == ZEND_FETCH_OBJ_R		92731	1		==			
ANR	92882	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92883	Identifier	opline		92731	0					
ANR	92884	Identifier	opcode		92731	1					
ANR	92885	Identifier	ZEND_FETCH_OBJ_R		92731	1					
ANR	92886	CompoundStatement		18:43:641:641	92731	1					
ANR	92887	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	634:4:18183:18224	92731	0	True				
ANR	92888	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		92731	0		=			
ANR	92889	Identifier	opline		92731	0					
ANR	92890	CallExpression	get_next_op ( CG ( active_op_array ) )		92731	1					
ANR	92891	Callee	get_next_op		92731	0					
ANR	92892	Identifier	get_next_op		92731	0					
ANR	92893	ArgumentList	CG ( active_op_array )		92731	1					
ANR	92894	Argument	CG ( active_op_array )		92731	0					
ANR	92895	CallExpression	CG ( active_op_array )		92731	0					
ANR	92896	Callee	CG		92731	0					
ANR	92897	Identifier	CG		92731	0					
ANR	92898	ArgumentList	active_op_array		92731	1					
ANR	92899	Argument	active_op_array		92731	0					
ANR	92900	Identifier	active_op_array		92731	0					
ANR	92901	ExpressionStatement	opline -> opcode = ZEND_FREE	635:4:18230:18256	92731	1	True				
ANR	92902	AssignmentExpression	opline -> opcode = ZEND_FREE		92731	0		=			
ANR	92903	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92904	Identifier	opline		92731	0					
ANR	92905	Identifier	opcode		92731	1					
ANR	92906	Identifier	ZEND_FREE		92731	1					
ANR	92907	ExpressionStatement	"SET_NODE ( opline -> op1 , op1 )"	636:4:18262:18288	92731	2	True				
ANR	92908	CallExpression	"SET_NODE ( opline -> op1 , op1 )"		92731	0					
ANR	92909	Callee	SET_NODE		92731	0					
ANR	92910	Identifier	SET_NODE		92731	0					
ANR	92911	ArgumentList	opline -> op1		92731	1					
ANR	92912	Argument	opline -> op1		92731	0					
ANR	92913	PtrMemberAccess	opline -> op1		92731	0					
ANR	92914	Identifier	opline		92731	0					
ANR	92915	Identifier	op1		92731	1					
ANR	92916	Argument	op1		92731	1					
ANR	92917	Identifier	op1		92731	0					
ANR	92918	ExpressionStatement	SET_UNUSED ( opline -> op2 )	637:4:18294:18317	92731	3	True				
ANR	92919	CallExpression	SET_UNUSED ( opline -> op2 )		92731	0					
ANR	92920	Callee	SET_UNUSED		92731	0					
ANR	92921	Identifier	SET_UNUSED		92731	0					
ANR	92922	ArgumentList	opline -> op2		92731	1					
ANR	92923	Argument	opline -> op2		92731	0					
ANR	92924	PtrMemberAccess	opline -> op2		92731	0					
ANR	92925	Identifier	opline		92731	0					
ANR	92926	Identifier	op2		92731	1					
ANR	92927	ElseStatement	else		92731	0					
ANR	92928	CompoundStatement		26:10:937:937	92731	0					
ANR	92929	ExpressionStatement	opline -> result_type |= EXT_TYPE_UNUSED	639:4:18335:18373	92731	0	True				
ANR	92930	AssignmentExpression	opline -> result_type |= EXT_TYPE_UNUSED		92731	0		|=			
ANR	92931	PtrMemberAccess	opline -> result_type		92731	0					
ANR	92932	Identifier	opline		92731	0					
ANR	92933	Identifier	result_type		92731	1					
ANR	92934	Identifier	EXT_TYPE_UNUSED		92731	1					
ANR	92935	ElseStatement	else		92731	0					
ANR	92936	CompoundStatement		29:9:997:997	92731	0					
ANR	92937	WhileStatement	while ( opline >= CG ( active_op_array ) -> opcodes )		92731	0					
ANR	92938	Condition	opline >= CG ( active_op_array ) -> opcodes	642:10:18401:18438	92731	0	True				
ANR	92939	RelationalExpression	opline >= CG ( active_op_array ) -> opcodes		92731	0		>=			
ANR	92940	Identifier	opline		92731	0					
ANR	92941	PtrMemberAccess	CG ( active_op_array ) -> opcodes		92731	1					
ANR	92942	CallExpression	CG ( active_op_array )		92731	0					
ANR	92943	Callee	CG		92731	0					
ANR	92944	Identifier	CG		92731	0					
ANR	92945	ArgumentList	active_op_array		92731	1					
ANR	92946	Argument	active_op_array		92731	0					
ANR	92947	Identifier	active_op_array		92731	0					
ANR	92948	Identifier	opcodes		92731	1					
ANR	92949	CompoundStatement		30:50:1049:1049	92731	1					
ANR	92950	IfStatement	if ( opline -> opcode == ZEND_FETCH_LIST && opline -> op1_type == IS_VAR && opline -> op1 . var == op1 -> u . op . var )		92731	0					
ANR	92951	Condition	opline -> opcode == ZEND_FETCH_LIST && opline -> op1_type == IS_VAR && opline -> op1 . var == op1 -> u . op . var	643:8:18451:18565	92731	0	True				
ANR	92952	AndExpression	opline -> opcode == ZEND_FETCH_LIST && opline -> op1_type == IS_VAR && opline -> op1 . var == op1 -> u . op . var		92731	0		&&			
ANR	92953	EqualityExpression	opline -> opcode == ZEND_FETCH_LIST		92731	0		==			
ANR	92954	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92955	Identifier	opline		92731	0					
ANR	92956	Identifier	opcode		92731	1					
ANR	92957	Identifier	ZEND_FETCH_LIST		92731	1					
ANR	92958	AndExpression	opline -> op1_type == IS_VAR && opline -> op1 . var == op1 -> u . op . var		92731	1		&&			
ANR	92959	EqualityExpression	opline -> op1_type == IS_VAR		92731	0		==			
ANR	92960	PtrMemberAccess	opline -> op1_type		92731	0					
ANR	92961	Identifier	opline		92731	0					
ANR	92962	Identifier	op1_type		92731	1					
ANR	92963	Identifier	IS_VAR		92731	1					
ANR	92964	EqualityExpression	opline -> op1 . var == op1 -> u . op . var		92731	1		==			
ANR	92965	MemberAccess	opline -> op1 . var		92731	0					
ANR	92966	PtrMemberAccess	opline -> op1		92731	0					
ANR	92967	Identifier	opline		92731	0					
ANR	92968	Identifier	op1		92731	1					
ANR	92969	Identifier	var		92731	1					
ANR	92970	MemberAccess	op1 -> u . op . var		92731	1					
ANR	92971	MemberAccess	op1 -> u . op		92731	0					
ANR	92972	PtrMemberAccess	op1 -> u		92731	0					
ANR	92973	Identifier	op1		92731	0					
ANR	92974	Identifier	u		92731	1					
ANR	92975	Identifier	op		92731	1					
ANR	92976	Identifier	var		92731	1					
ANR	92977	CompoundStatement		33:42:1176:1176	92731	1					
ANR	92978	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	646:5:18575:18616	92731	0	True				
ANR	92979	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		92731	0		=			
ANR	92980	Identifier	opline		92731	0					
ANR	92981	CallExpression	get_next_op ( CG ( active_op_array ) )		92731	1					
ANR	92982	Callee	get_next_op		92731	0					
ANR	92983	Identifier	get_next_op		92731	0					
ANR	92984	ArgumentList	CG ( active_op_array )		92731	1					
ANR	92985	Argument	CG ( active_op_array )		92731	0					
ANR	92986	CallExpression	CG ( active_op_array )		92731	0					
ANR	92987	Callee	CG		92731	0					
ANR	92988	Identifier	CG		92731	0					
ANR	92989	ArgumentList	active_op_array		92731	1					
ANR	92990	Argument	active_op_array		92731	0					
ANR	92991	Identifier	active_op_array		92731	0					
ANR	92992	ExpressionStatement	opline -> opcode = ZEND_FREE	648:5:18624:18650	92731	1	True				
ANR	92993	AssignmentExpression	opline -> opcode = ZEND_FREE		92731	0		=			
ANR	92994	PtrMemberAccess	opline -> opcode		92731	0					
ANR	92995	Identifier	opline		92731	0					
ANR	92996	Identifier	opcode		92731	1					
ANR	92997	Identifier	ZEND_FREE		92731	1					
ANR	92998	ExpressionStatement	"SET_NODE ( opline -> op1 , op1 )"	649:5:18657:18683	92731	2	True				
ANR	92999	CallExpression	"SET_NODE ( opline -> op1 , op1 )"		92731	0					
ANR	93000	Callee	SET_NODE		92731	0					
ANR	93001	Identifier	SET_NODE		92731	0					
ANR	93002	ArgumentList	opline -> op1		92731	1					
ANR	93003	Argument	opline -> op1		92731	0					
ANR	93004	PtrMemberAccess	opline -> op1		92731	0					
ANR	93005	Identifier	opline		92731	0					
ANR	93006	Identifier	op1		92731	1					
ANR	93007	Argument	op1		92731	1					
ANR	93008	Identifier	op1		92731	0					
ANR	93009	ExpressionStatement	SET_UNUSED ( opline -> op2 )	650:5:18690:18713	92731	3	True				
ANR	93010	CallExpression	SET_UNUSED ( opline -> op2 )		92731	0					
ANR	93011	Callee	SET_UNUSED		92731	0					
ANR	93012	Identifier	SET_UNUSED		92731	0					
ANR	93013	ArgumentList	opline -> op2		92731	1					
ANR	93014	Argument	opline -> op2		92731	0					
ANR	93015	PtrMemberAccess	opline -> op2		92731	0					
ANR	93016	Identifier	opline		92731	0					
ANR	93017	Identifier	op2		92731	1					
ANR	93018	ReturnStatement	return ;	651:5:18720:18726	92731	4	True				
ANR	93019	IfStatement	if ( opline -> result_type == IS_VAR && opline -> result . var == op1 -> u . op . var )		92731	1					
ANR	93020	Condition	opline -> result_type == IS_VAR && opline -> result . var == op1 -> u . op . var	653:8:18742:18812	92731	0	True				
ANR	93021	AndExpression	opline -> result_type == IS_VAR && opline -> result . var == op1 -> u . op . var		92731	0		&&			
ANR	93022	EqualityExpression	opline -> result_type == IS_VAR		92731	0		==			
ANR	93023	PtrMemberAccess	opline -> result_type		92731	0					
ANR	93024	Identifier	opline		92731	0					
ANR	93025	Identifier	result_type		92731	1					
ANR	93026	Identifier	IS_VAR		92731	1					
ANR	93027	EqualityExpression	opline -> result . var == op1 -> u . op . var		92731	1		==			
ANR	93028	MemberAccess	opline -> result . var		92731	0					
ANR	93029	PtrMemberAccess	opline -> result		92731	0					
ANR	93030	Identifier	opline		92731	0					
ANR	93031	Identifier	result		92731	1					
ANR	93032	Identifier	var		92731	1					
ANR	93033	MemberAccess	op1 -> u . op . var		92731	1					
ANR	93034	MemberAccess	op1 -> u . op		92731	0					
ANR	93035	PtrMemberAccess	op1 -> u		92731	0					
ANR	93036	Identifier	op1		92731	0					
ANR	93037	Identifier	u		92731	1					
ANR	93038	Identifier	op		92731	1					
ANR	93039	Identifier	var		92731	1					
ANR	93040	CompoundStatement		42:45:1423:1423	92731	1					
ANR	93041	IfStatement	if ( opline -> opcode == ZEND_NEW )		92731	0					
ANR	93042	Condition	opline -> opcode == ZEND_NEW	655:9:18826:18851	92731	0	True				
ANR	93043	EqualityExpression	opline -> opcode == ZEND_NEW		92731	0		==			
ANR	93044	PtrMemberAccess	opline -> opcode		92731	0					
ANR	93045	Identifier	opline		92731	0					
ANR	93046	Identifier	opcode		92731	1					
ANR	93047	Identifier	ZEND_NEW		92731	1					
ANR	93048	CompoundStatement		43:37:1462:1462	92731	1					
ANR	93049	ExpressionStatement	opline -> result_type |= EXT_TYPE_UNUSED	656:6:18862:18900	92731	0	True				
ANR	93050	AssignmentExpression	opline -> result_type |= EXT_TYPE_UNUSED		92731	0		|=			
ANR	93051	PtrMemberAccess	opline -> result_type		92731	0					
ANR	93052	Identifier	opline		92731	0					
ANR	93053	Identifier	result_type		92731	1					
ANR	93054	Identifier	EXT_TYPE_UNUSED		92731	1					
ANR	93055	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]	657:6:18908:18975	92731	1	True				
ANR	93056	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		92731	0		=			
ANR	93057	Identifier	opline		92731	0					
ANR	93058	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		92731	1					
ANR	93059	UnaryOperator	&		92731	0					
ANR	93060	ArrayIndexing	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		92731	1					
ANR	93061	PtrMemberAccess	CG ( active_op_array ) -> opcodes		92731	0					
ANR	93062	CallExpression	CG ( active_op_array )		92731	0					
ANR	93063	Callee	CG		92731	0					
ANR	93064	Identifier	CG		92731	0					
ANR	93065	ArgumentList	active_op_array		92731	1					
ANR	93066	Argument	active_op_array		92731	0					
ANR	93067	Identifier	active_op_array		92731	0					
ANR	93068	Identifier	opcodes		92731	1					
ANR	93069	AdditiveExpression	CG ( active_op_array ) -> last - 1		92731	1		-			
ANR	93070	PtrMemberAccess	CG ( active_op_array ) -> last		92731	0					
ANR	93071	CallExpression	CG ( active_op_array )		92731	0					
ANR	93072	Callee	CG		92731	0					
ANR	93073	Identifier	CG		92731	0					
ANR	93074	ArgumentList	active_op_array		92731	1					
ANR	93075	Argument	active_op_array		92731	0					
ANR	93076	Identifier	active_op_array		92731	0					
ANR	93077	Identifier	last		92731	1					
ANR	93078	PrimaryExpression	1		92731	1					
ANR	93079	WhileStatement	while ( opline -> opcode != ZEND_DO_FCALL || opline -> op1 . num != ZEND_CALL_CTOR )		92731	2					
ANR	93080	Condition	opline -> opcode != ZEND_DO_FCALL || opline -> op1 . num != ZEND_CALL_CTOR	658:13:18990:19057	92731	0	True				
ANR	93081	OrExpression	opline -> opcode != ZEND_DO_FCALL || opline -> op1 . num != ZEND_CALL_CTOR		92731	0		||			
ANR	93082	EqualityExpression	opline -> opcode != ZEND_DO_FCALL		92731	0		!=			
ANR	93083	PtrMemberAccess	opline -> opcode		92731	0					
ANR	93084	Identifier	opline		92731	0					
ANR	93085	Identifier	opcode		92731	1					
ANR	93086	Identifier	ZEND_DO_FCALL		92731	1					
ANR	93087	EqualityExpression	opline -> op1 . num != ZEND_CALL_CTOR		92731	1		!=			
ANR	93088	MemberAccess	opline -> op1 . num		92731	0					
ANR	93089	PtrMemberAccess	opline -> op1		92731	0					
ANR	93090	Identifier	opline		92731	0					
ANR	93091	Identifier	op1		92731	1					
ANR	93092	Identifier	num		92731	1					
ANR	93093	Identifier	ZEND_CALL_CTOR		92731	1					
ANR	93094	CompoundStatement		46:83:1668:1668	92731	1					
ANR	93095	ExpressionStatement	opline --	659:7:19069:19077	92731	0	True				
ANR	93096	PostIncDecOperationExpression	opline --		92731	0					
ANR	93097	Identifier	opline		92731	0					
ANR	93098	IncDec	--		92731	1					
ANR	93099	ExpressionStatement	opline -> op1 . num |= ZEND_CALL_CTOR_RESULT_UNUSED	661:6:19093:19140	92731	3	True				
ANR	93100	AssignmentExpression	opline -> op1 . num |= ZEND_CALL_CTOR_RESULT_UNUSED		92731	0		|=			
ANR	93101	MemberAccess	opline -> op1 . num		92731	0					
ANR	93102	PtrMemberAccess	opline -> op1		92731	0					
ANR	93103	Identifier	opline		92731	0					
ANR	93104	Identifier	op1		92731	1					
ANR	93105	Identifier	num		92731	1					
ANR	93106	Identifier	ZEND_CALL_CTOR_RESULT_UNUSED		92731	1					
ANR	93107	BreakStatement	break ;	663:5:19154:19159	92731	1	True				
ANR	93108	ExpressionStatement	opline --	665:4:19171:19179	92731	2	True				
ANR	93109	PostIncDecOperationExpression	opline --		92731	0					
ANR	93110	Identifier	opline		92731	0					
ANR	93111	IncDec	--		92731	1					
ANR	93112	ElseStatement	else		92731	0					
ANR	93113	IfStatement	if ( op1 -> op_type == IS_CONST )		92731	0					
ANR	93114	Condition	op1 -> op_type == IS_CONST	668:12:19202:19225	92731	0	True				
ANR	93115	EqualityExpression	op1 -> op_type == IS_CONST		92731	0		==			
ANR	93116	PtrMemberAccess	op1 -> op_type		92731	0					
ANR	93117	Identifier	op1		92731	0					
ANR	93118	Identifier	op_type		92731	1					
ANR	93119	Identifier	IS_CONST		92731	1					
ANR	93120	CompoundStatement		56:38:1836:1836	92731	1					
ANR	93121	ExpressionStatement	zval_ptr_dtor_nogc ( & op1 -> u . constant )	672:2:19470:19506	92731	0	True				
ANR	93122	CallExpression	zval_ptr_dtor_nogc ( & op1 -> u . constant )		92731	0					
ANR	93123	Callee	zval_ptr_dtor_nogc		92731	0					
ANR	93124	Identifier	zval_ptr_dtor_nogc		92731	0					
ANR	93125	ArgumentList	& op1 -> u . constant		92731	1					
ANR	93126	Argument	& op1 -> u . constant		92731	0					
ANR	93127	UnaryOperationExpression	& op1 -> u . constant		92731	0					
ANR	93128	UnaryOperator	&		92731	0					
ANR	93129	MemberAccess	op1 -> u . constant		92731	1					
ANR	93130	PtrMemberAccess	op1 -> u		92731	0					
ANR	93131	Identifier	op1		92731	0					
ANR	93132	Identifier	u		92731	1					
ANR	93133	Identifier	constant		92731	1					
ANR	93134	ReturnType	void		92731	1					
ANR	93135	Identifier	zend_do_free		92731	2					
ANR	93136	ParameterList	znode * op1		92731	3					
ANR	93137	Parameter	znode * op1	612:18:17369:17378	92731	0	True				
ANR	93138	ParameterType	znode *		92731	0					
ANR	93139	Identifier	op1		92731	1					
ANR	93140	CFGEntryNode	ENTRY		92731		True				
ANR	93141	CFGExitNode	EXIT		92731		True				
ANR	93142	Symbol	op1 -> op_type		92731						
ANR	93143	Symbol	opline -> op1		92731						
ANR	93144	Symbol	ZEND_FREE		92731						
ANR	93145	Symbol	opline -> op2		92731						
ANR	93146	Symbol	* CG		92731						
ANR	93147	Symbol	ZEND_OP_DATA		92731						
ANR	93148	Symbol	ZEND_FETCH_LIST		92731						
ANR	93149	Symbol	CG ( active_op_array ) -> opcodes		92731						
ANR	93150	Symbol	opline -> result		92731						
ANR	93151	Symbol	CG ( active_op_array ) -> last		92731						
ANR	93152	Symbol	opline		92731						
ANR	93153	Symbol	ZEND_CALL_CTOR		92731						
ANR	93154	Symbol	ZEND_FETCH_DIM_R		92731						
ANR	93155	Symbol	* op1		92731						
ANR	93156	Symbol	opline -> op1 . var		92731						
ANR	93157	Symbol	EXT_TYPE_UNUSED		92731						
ANR	93158	Symbol	ZEND_END_SILENCE		92731						
ANR	93159	Symbol	ZEND_NEW		92731						
ANR	93160	Symbol	IS_TMP_VAR		92731						
ANR	93161	Symbol	opline -> result_type		92731						
ANR	93162	Symbol	op1 -> u . op . var		92731						
ANR	93163	Symbol	ZEND_FETCH_OBJ_R		92731						
ANR	93164	Symbol	IS_CONST		92731						
ANR	93165	Symbol	get_next_op		92731						
ANR	93166	Symbol	CG		92731						
ANR	93167	Symbol	op1 -> u		92731						
ANR	93168	Symbol	active_op_array		92731						
ANR	93169	Symbol	ZEND_EXT_FCALL_END		92731						
ANR	93170	Symbol	ZEND_FETCH_R		92731						
ANR	93171	Symbol	ZEND_CALL_CTOR_RESULT_UNUSED		92731						
ANR	93172	Symbol	op1 -> u . op		92731						
ANR	93173	Symbol	opline -> op1_type		92731						
ANR	93174	Symbol	op1		92731						
ANR	93175	Symbol	* opline		92731						
ANR	93176	Symbol	ZEND_DO_FCALL		92731						
ANR	93177	Symbol	opline -> opcode		92731						
ANR	93178	Symbol	& op1 -> u		92731						
ANR	93179	Symbol	opline -> op1 . num		92731						
ANR	93180	Symbol	& op1 -> u . constant		92731						
ANR	93181	Symbol	IS_VAR		92731						
ANR	93182	Symbol	opline -> result . var		92731						
ANR	93183	Function	zend_add_class_modifier	677:0:19524:20188							
ANR	93184	FunctionDef	"zend_add_class_modifier (uint32_t flags , uint32_t new_flag)"		93183	0					
ANR	93185	CompoundStatement		678:0:19602:20188	93183	0					
ANR	93186	IdentifierDeclStatement	uint32_t new_flags = flags | new_flag ;	679:1:19605:19642	93183	0	True				
ANR	93187	IdentifierDecl	new_flags = flags | new_flag		93183	0					
ANR	93188	IdentifierDeclType	uint32_t		93183	0					
ANR	93189	Identifier	new_flags		93183	1					
ANR	93190	AssignmentExpression	new_flags = flags | new_flag		93183	2		=			
ANR	93191	Identifier	new_flags		93183	0					
ANR	93192	InclusiveOrExpression	flags | new_flag		93183	1		|			
ANR	93193	Identifier	flags		93183	0					
ANR	93194	Identifier	new_flag		93183	1					
ANR	93195	IfStatement	if ( ( flags & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) && ( new_flag & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) )		93183	1					
ANR	93196	Condition	( flags & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) && ( new_flag & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS )	680:5:19649:19739	93183	0	True				
ANR	93197	AndExpression	( flags & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) && ( new_flag & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS )		93183	0		&&			
ANR	93198	BitAndExpression	flags & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		93183	0		&			
ANR	93199	Identifier	flags		93183	0					
ANR	93200	Identifier	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		93183	1					
ANR	93201	BitAndExpression	new_flag & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		93183	1		&			
ANR	93202	Identifier	new_flag		93183	0					
ANR	93203	Identifier	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		93183	1					
ANR	93204	CompoundStatement		3:98:139:139	93183	1					
ANR	93205	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple abstract modifiers are not allowed"" )"	681:2:19746:19829	93183	0	True				
ANR	93206	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple abstract modifiers are not allowed"" )"		93183	0					
ANR	93207	Callee	zend_error_noreturn		93183	0					
ANR	93208	Identifier	zend_error_noreturn		93183	0					
ANR	93209	ArgumentList	E_COMPILE_ERROR		93183	1					
ANR	93210	Argument	E_COMPILE_ERROR		93183	0					
ANR	93211	Identifier	E_COMPILE_ERROR		93183	0					
ANR	93212	Argument	"""Multiple abstract modifiers are not allowed"""		93183	1					
ANR	93213	PrimaryExpression	"""Multiple abstract modifiers are not allowed"""		93183	0					
ANR	93214	IfStatement	if ( ( flags & ZEND_ACC_FINAL ) && ( new_flag & ZEND_ACC_FINAL ) )		93183	2					
ANR	93215	Condition	( flags & ZEND_ACC_FINAL ) && ( new_flag & ZEND_ACC_FINAL )	683:5:19839:19893	93183	0	True				
ANR	93216	AndExpression	( flags & ZEND_ACC_FINAL ) && ( new_flag & ZEND_ACC_FINAL )		93183	0		&&			
ANR	93217	BitAndExpression	flags & ZEND_ACC_FINAL		93183	0		&			
ANR	93218	Identifier	flags		93183	0					
ANR	93219	Identifier	ZEND_ACC_FINAL		93183	1					
ANR	93220	BitAndExpression	new_flag & ZEND_ACC_FINAL		93183	1		&			
ANR	93221	Identifier	new_flag		93183	0					
ANR	93222	Identifier	ZEND_ACC_FINAL		93183	1					
ANR	93223	CompoundStatement		6:62:293:293	93183	1					
ANR	93224	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple final modifiers are not allowed"" )"	684:2:19900:19980	93183	0	True				
ANR	93225	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple final modifiers are not allowed"" )"		93183	0					
ANR	93226	Callee	zend_error_noreturn		93183	0					
ANR	93227	Identifier	zend_error_noreturn		93183	0					
ANR	93228	ArgumentList	E_COMPILE_ERROR		93183	1					
ANR	93229	Argument	E_COMPILE_ERROR		93183	0					
ANR	93230	Identifier	E_COMPILE_ERROR		93183	0					
ANR	93231	Argument	"""Multiple final modifiers are not allowed"""		93183	1					
ANR	93232	PrimaryExpression	"""Multiple final modifiers are not allowed"""		93183	0					
ANR	93233	IfStatement	if ( ( new_flags & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) && ( new_flags & ZEND_ACC_FINAL ) )		93183	3					
ANR	93234	Condition	( new_flags & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) && ( new_flags & ZEND_ACC_FINAL )	686:5:19990:20067	93183	0	True				
ANR	93235	AndExpression	( new_flags & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) && ( new_flags & ZEND_ACC_FINAL )		93183	0		&&			
ANR	93236	BitAndExpression	new_flags & ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		93183	0		&			
ANR	93237	Identifier	new_flags		93183	0					
ANR	93238	Identifier	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		93183	1					
ANR	93239	BitAndExpression	new_flags & ZEND_ACC_FINAL		93183	1		&			
ANR	93240	Identifier	new_flags		93183	0					
ANR	93241	Identifier	ZEND_ACC_FINAL		93183	1					
ANR	93242	CompoundStatement		9:85:467:467	93183	1					
ANR	93243	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use the final modifier on an abstract class"" )"	687:2:20074:20164	93183	0	True				
ANR	93244	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use the final modifier on an abstract class"" )"		93183	0					
ANR	93245	Callee	zend_error_noreturn		93183	0					
ANR	93246	Identifier	zend_error_noreturn		93183	0					
ANR	93247	ArgumentList	E_COMPILE_ERROR		93183	1					
ANR	93248	Argument	E_COMPILE_ERROR		93183	0					
ANR	93249	Identifier	E_COMPILE_ERROR		93183	0					
ANR	93250	Argument	"""Cannot use the final modifier on an abstract class"""		93183	1					
ANR	93251	PrimaryExpression	"""Cannot use the final modifier on an abstract class"""		93183	0					
ANR	93252	ReturnStatement	return new_flags ;	689:1:20170:20186	93183	4	True				
ANR	93253	Identifier	new_flags		93183	0					
ANR	93254	ReturnType	uint32_t		93183	1					
ANR	93255	Identifier	zend_add_class_modifier		93183	2					
ANR	93256	ParameterList	"uint32_t flags , uint32_t new_flag"		93183	3					
ANR	93257	Parameter	uint32_t flags	677:33:19557:19570	93183	0	True				
ANR	93258	ParameterType	uint32_t		93183	0					
ANR	93259	Identifier	flags		93183	1					
ANR	93260	Parameter	uint32_t new_flag	677:49:19573:19589	93183	1	True				
ANR	93261	ParameterType	uint32_t		93183	0					
ANR	93262	Identifier	new_flag		93183	1					
ANR	93263	CFGEntryNode	ENTRY		93183		True				
ANR	93264	CFGExitNode	EXIT		93183		True				
ANR	93265	Symbol	E_COMPILE_ERROR		93183						
ANR	93266	Symbol	flags		93183						
ANR	93267	Symbol	new_flags		93183						
ANR	93268	Symbol	new_flag		93183						
ANR	93269	Symbol	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		93183						
ANR	93270	Symbol	ZEND_ACC_FINAL		93183						
ANR	93271	Function	zend_add_member_modifier	693:0:20201:21145							
ANR	93272	FunctionDef	"zend_add_member_modifier (uint32_t flags , uint32_t new_flag)"		93271	0					
ANR	93273	CompoundStatement		694:0:20280:21145	93271	0					
ANR	93274	IdentifierDeclStatement	uint32_t new_flags = flags | new_flag ;	695:1:20283:20320	93271	0	True				
ANR	93275	IdentifierDecl	new_flags = flags | new_flag		93271	0					
ANR	93276	IdentifierDeclType	uint32_t		93271	0					
ANR	93277	Identifier	new_flags		93271	1					
ANR	93278	AssignmentExpression	new_flags = flags | new_flag		93271	2		=			
ANR	93279	Identifier	new_flags		93271	0					
ANR	93280	InclusiveOrExpression	flags | new_flag		93271	1		|			
ANR	93281	Identifier	flags		93271	0					
ANR	93282	Identifier	new_flag		93271	1					
ANR	93283	IfStatement	if ( ( flags & ZEND_ACC_PPP_MASK ) && ( new_flag & ZEND_ACC_PPP_MASK ) )		93271	1					
ANR	93284	Condition	( flags & ZEND_ACC_PPP_MASK ) && ( new_flag & ZEND_ACC_PPP_MASK )	696:5:20327:20387	93271	0	True				
ANR	93285	AndExpression	( flags & ZEND_ACC_PPP_MASK ) && ( new_flag & ZEND_ACC_PPP_MASK )		93271	0		&&			
ANR	93286	BitAndExpression	flags & ZEND_ACC_PPP_MASK		93271	0		&			
ANR	93287	Identifier	flags		93271	0					
ANR	93288	Identifier	ZEND_ACC_PPP_MASK		93271	1					
ANR	93289	BitAndExpression	new_flag & ZEND_ACC_PPP_MASK		93271	1		&			
ANR	93290	Identifier	new_flag		93271	0					
ANR	93291	Identifier	ZEND_ACC_PPP_MASK		93271	1					
ANR	93292	CompoundStatement		3:68:109:109	93271	1					
ANR	93293	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple access type modifiers are not allowed"" )"	697:2:20394:20480	93271	0	True				
ANR	93294	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple access type modifiers are not allowed"" )"		93271	0					
ANR	93295	Callee	zend_error_noreturn		93271	0					
ANR	93296	Identifier	zend_error_noreturn		93271	0					
ANR	93297	ArgumentList	E_COMPILE_ERROR		93271	1					
ANR	93298	Argument	E_COMPILE_ERROR		93271	0					
ANR	93299	Identifier	E_COMPILE_ERROR		93271	0					
ANR	93300	Argument	"""Multiple access type modifiers are not allowed"""		93271	1					
ANR	93301	PrimaryExpression	"""Multiple access type modifiers are not allowed"""		93271	0					
ANR	93302	IfStatement	if ( ( flags & ZEND_ACC_ABSTRACT ) && ( new_flag & ZEND_ACC_ABSTRACT ) )		93271	2					
ANR	93303	Condition	( flags & ZEND_ACC_ABSTRACT ) && ( new_flag & ZEND_ACC_ABSTRACT )	699:5:20490:20550	93271	0	True				
ANR	93304	AndExpression	( flags & ZEND_ACC_ABSTRACT ) && ( new_flag & ZEND_ACC_ABSTRACT )		93271	0		&&			
ANR	93305	BitAndExpression	flags & ZEND_ACC_ABSTRACT		93271	0		&			
ANR	93306	Identifier	flags		93271	0					
ANR	93307	Identifier	ZEND_ACC_ABSTRACT		93271	1					
ANR	93308	BitAndExpression	new_flag & ZEND_ACC_ABSTRACT		93271	1		&			
ANR	93309	Identifier	new_flag		93271	0					
ANR	93310	Identifier	ZEND_ACC_ABSTRACT		93271	1					
ANR	93311	CompoundStatement		6:68:272:272	93271	1					
ANR	93312	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple abstract modifiers are not allowed"" )"	700:2:20557:20640	93271	0	True				
ANR	93313	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple abstract modifiers are not allowed"" )"		93271	0					
ANR	93314	Callee	zend_error_noreturn		93271	0					
ANR	93315	Identifier	zend_error_noreturn		93271	0					
ANR	93316	ArgumentList	E_COMPILE_ERROR		93271	1					
ANR	93317	Argument	E_COMPILE_ERROR		93271	0					
ANR	93318	Identifier	E_COMPILE_ERROR		93271	0					
ANR	93319	Argument	"""Multiple abstract modifiers are not allowed"""		93271	1					
ANR	93320	PrimaryExpression	"""Multiple abstract modifiers are not allowed"""		93271	0					
ANR	93321	IfStatement	if ( ( flags & ZEND_ACC_STATIC ) && ( new_flag & ZEND_ACC_STATIC ) )		93271	3					
ANR	93322	Condition	( flags & ZEND_ACC_STATIC ) && ( new_flag & ZEND_ACC_STATIC )	702:5:20650:20706	93271	0	True				
ANR	93323	AndExpression	( flags & ZEND_ACC_STATIC ) && ( new_flag & ZEND_ACC_STATIC )		93271	0		&&			
ANR	93324	BitAndExpression	flags & ZEND_ACC_STATIC		93271	0		&			
ANR	93325	Identifier	flags		93271	0					
ANR	93326	Identifier	ZEND_ACC_STATIC		93271	1					
ANR	93327	BitAndExpression	new_flag & ZEND_ACC_STATIC		93271	1		&			
ANR	93328	Identifier	new_flag		93271	0					
ANR	93329	Identifier	ZEND_ACC_STATIC		93271	1					
ANR	93330	CompoundStatement		9:64:428:428	93271	1					
ANR	93331	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple static modifiers are not allowed"" )"	703:2:20713:20794	93271	0	True				
ANR	93332	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple static modifiers are not allowed"" )"		93271	0					
ANR	93333	Callee	zend_error_noreturn		93271	0					
ANR	93334	Identifier	zend_error_noreturn		93271	0					
ANR	93335	ArgumentList	E_COMPILE_ERROR		93271	1					
ANR	93336	Argument	E_COMPILE_ERROR		93271	0					
ANR	93337	Identifier	E_COMPILE_ERROR		93271	0					
ANR	93338	Argument	"""Multiple static modifiers are not allowed"""		93271	1					
ANR	93339	PrimaryExpression	"""Multiple static modifiers are not allowed"""		93271	0					
ANR	93340	IfStatement	if ( ( flags & ZEND_ACC_FINAL ) && ( new_flag & ZEND_ACC_FINAL ) )		93271	4					
ANR	93341	Condition	( flags & ZEND_ACC_FINAL ) && ( new_flag & ZEND_ACC_FINAL )	705:5:20804:20858	93271	0	True				
ANR	93342	AndExpression	( flags & ZEND_ACC_FINAL ) && ( new_flag & ZEND_ACC_FINAL )		93271	0		&&			
ANR	93343	BitAndExpression	flags & ZEND_ACC_FINAL		93271	0		&			
ANR	93344	Identifier	flags		93271	0					
ANR	93345	Identifier	ZEND_ACC_FINAL		93271	1					
ANR	93346	BitAndExpression	new_flag & ZEND_ACC_FINAL		93271	1		&			
ANR	93347	Identifier	new_flag		93271	0					
ANR	93348	Identifier	ZEND_ACC_FINAL		93271	1					
ANR	93349	CompoundStatement		12:62:580:580	93271	1					
ANR	93350	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple final modifiers are not allowed"" )"	706:2:20865:20945	93271	0	True				
ANR	93351	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Multiple final modifiers are not allowed"" )"		93271	0					
ANR	93352	Callee	zend_error_noreturn		93271	0					
ANR	93353	Identifier	zend_error_noreturn		93271	0					
ANR	93354	ArgumentList	E_COMPILE_ERROR		93271	1					
ANR	93355	Argument	E_COMPILE_ERROR		93271	0					
ANR	93356	Identifier	E_COMPILE_ERROR		93271	0					
ANR	93357	Argument	"""Multiple final modifiers are not allowed"""		93271	1					
ANR	93358	PrimaryExpression	"""Multiple final modifiers are not allowed"""		93271	0					
ANR	93359	IfStatement	if ( ( new_flags & ZEND_ACC_ABSTRACT ) && ( new_flags & ZEND_ACC_FINAL ) )		93271	5					
ANR	93360	Condition	( new_flags & ZEND_ACC_ABSTRACT ) && ( new_flags & ZEND_ACC_FINAL )	708:5:20955:21017	93271	0	True				
ANR	93361	AndExpression	( new_flags & ZEND_ACC_ABSTRACT ) && ( new_flags & ZEND_ACC_FINAL )		93271	0		&&			
ANR	93362	BitAndExpression	new_flags & ZEND_ACC_ABSTRACT		93271	0		&			
ANR	93363	Identifier	new_flags		93271	0					
ANR	93364	Identifier	ZEND_ACC_ABSTRACT		93271	1					
ANR	93365	BitAndExpression	new_flags & ZEND_ACC_FINAL		93271	1		&			
ANR	93366	Identifier	new_flags		93271	0					
ANR	93367	Identifier	ZEND_ACC_FINAL		93271	1					
ANR	93368	CompoundStatement		15:70:739:739	93271	1					
ANR	93369	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use the final modifier on an abstract class member"" )"	709:2:21024:21121	93271	0	True				
ANR	93370	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use the final modifier on an abstract class member"" )"		93271	0					
ANR	93371	Callee	zend_error_noreturn		93271	0					
ANR	93372	Identifier	zend_error_noreturn		93271	0					
ANR	93373	ArgumentList	E_COMPILE_ERROR		93271	1					
ANR	93374	Argument	E_COMPILE_ERROR		93271	0					
ANR	93375	Identifier	E_COMPILE_ERROR		93271	0					
ANR	93376	Argument	"""Cannot use the final modifier on an abstract class member"""		93271	1					
ANR	93377	PrimaryExpression	"""Cannot use the final modifier on an abstract class member"""		93271	0					
ANR	93378	ReturnStatement	return new_flags ;	711:1:21127:21143	93271	6	True				
ANR	93379	Identifier	new_flags		93271	0					
ANR	93380	ReturnType	uint32_t		93271	1					
ANR	93381	Identifier	zend_add_member_modifier		93271	2					
ANR	93382	ParameterList	"uint32_t flags , uint32_t new_flag"		93271	3					
ANR	93383	Parameter	uint32_t flags	693:34:20235:20248	93271	0	True				
ANR	93384	ParameterType	uint32_t		93271	0					
ANR	93385	Identifier	flags		93271	1					
ANR	93386	Parameter	uint32_t new_flag	693:50:20251:20267	93271	1	True				
ANR	93387	ParameterType	uint32_t		93271	0					
ANR	93388	Identifier	new_flag		93271	1					
ANR	93389	CFGEntryNode	ENTRY		93271		True				
ANR	93390	CFGExitNode	EXIT		93271		True				
ANR	93391	Symbol	ZEND_ACC_ABSTRACT		93271						
ANR	93392	Symbol	ZEND_ACC_PPP_MASK		93271						
ANR	93393	Symbol	E_COMPILE_ERROR		93271						
ANR	93394	Symbol	flags		93271						
ANR	93395	Symbol	new_flags		93271						
ANR	93396	Symbol	new_flag		93271						
ANR	93397	Symbol	ZEND_ACC_STATIC		93271						
ANR	93398	Symbol	ZEND_ACC_FINAL		93271						
ANR	93399	Function	zend_concat3	715:0:21158:21572							
ANR	93400	FunctionDef	"zend_concat3 (char * str1 , size_t str1_len , char * str2 , size_t str2_len , char * str3 , size_t str3_len)"		93399	0					
ANR	93401	CompoundStatement		716:0:21281:21572	93399	0					
ANR	93402	IdentifierDeclStatement	size_t len = str1_len + str2_len + str3_len ;	717:1:21284:21327	93399	0	True				
ANR	93403	IdentifierDecl	len = str1_len + str2_len + str3_len		93399	0					
ANR	93404	IdentifierDeclType	size_t		93399	0					
ANR	93405	Identifier	len		93399	1					
ANR	93406	AssignmentExpression	len = str1_len + str2_len + str3_len		93399	2		=			
ANR	93407	Identifier	len		93399	0					
ANR	93408	AdditiveExpression	str1_len + str2_len + str3_len		93399	1		+			
ANR	93409	Identifier	str1_len		93399	0					
ANR	93410	AdditiveExpression	str2_len + str3_len		93399	1		+			
ANR	93411	Identifier	str2_len		93399	0					
ANR	93412	Identifier	str3_len		93399	1					
ANR	93413	IdentifierDeclStatement	"zend_string * res = zend_string_alloc ( len , 0 ) ;"	718:1:21330:21374	93399	1	True				
ANR	93414	IdentifierDecl	"* res = zend_string_alloc ( len , 0 )"		93399	0					
ANR	93415	IdentifierDeclType	zend_string *		93399	0					
ANR	93416	Identifier	res		93399	1					
ANR	93417	AssignmentExpression	"* res = zend_string_alloc ( len , 0 )"		93399	2		=			
ANR	93418	Identifier	res		93399	0					
ANR	93419	CallExpression	"zend_string_alloc ( len , 0 )"		93399	1					
ANR	93420	Callee	zend_string_alloc		93399	0					
ANR	93421	Identifier	zend_string_alloc		93399	0					
ANR	93422	ArgumentList	len		93399	1					
ANR	93423	Argument	len		93399	0					
ANR	93424	Identifier	len		93399	0					
ANR	93425	Argument	0		93399	1					
ANR	93426	PrimaryExpression	0		93399	0					
ANR	93427	ExpressionStatement	"memcpy ( ZSTR_VAL ( res ) , str1 , str1_len )"	720:1:21378:21415	93399	2	True				
ANR	93428	CallExpression	"memcpy ( ZSTR_VAL ( res ) , str1 , str1_len )"		93399	0					
ANR	93429	Callee	memcpy		93399	0					
ANR	93430	Identifier	memcpy		93399	0					
ANR	93431	ArgumentList	ZSTR_VAL ( res )		93399	1					
ANR	93432	Argument	ZSTR_VAL ( res )		93399	0					
ANR	93433	CallExpression	ZSTR_VAL ( res )		93399	0					
ANR	93434	Callee	ZSTR_VAL		93399	0					
ANR	93435	Identifier	ZSTR_VAL		93399	0					
ANR	93436	ArgumentList	res		93399	1					
ANR	93437	Argument	res		93399	0					
ANR	93438	Identifier	res		93399	0					
ANR	93439	Argument	str1		93399	1					
ANR	93440	Identifier	str1		93399	0					
ANR	93441	Argument	str1_len		93399	2					
ANR	93442	Identifier	str1_len		93399	0					
ANR	93443	ExpressionStatement	"memcpy ( ZSTR_VAL ( res ) + str1_len , str2 , str2_len )"	721:1:21418:21466	93399	3	True				
ANR	93444	CallExpression	"memcpy ( ZSTR_VAL ( res ) + str1_len , str2 , str2_len )"		93399	0					
ANR	93445	Callee	memcpy		93399	0					
ANR	93446	Identifier	memcpy		93399	0					
ANR	93447	ArgumentList	ZSTR_VAL ( res ) + str1_len		93399	1					
ANR	93448	Argument	ZSTR_VAL ( res ) + str1_len		93399	0					
ANR	93449	AdditiveExpression	ZSTR_VAL ( res ) + str1_len		93399	0		+			
ANR	93450	CallExpression	ZSTR_VAL ( res )		93399	0					
ANR	93451	Callee	ZSTR_VAL		93399	0					
ANR	93452	Identifier	ZSTR_VAL		93399	0					
ANR	93453	ArgumentList	res		93399	1					
ANR	93454	Argument	res		93399	0					
ANR	93455	Identifier	res		93399	0					
ANR	93456	Identifier	str1_len		93399	1					
ANR	93457	Argument	str2		93399	1					
ANR	93458	Identifier	str2		93399	0					
ANR	93459	Argument	str2_len		93399	2					
ANR	93460	Identifier	str2_len		93399	0					
ANR	93461	ExpressionStatement	"memcpy ( ZSTR_VAL ( res ) + str1_len + str2_len , str3 , str3_len )"	722:1:21469:21528	93399	4	True				
ANR	93462	CallExpression	"memcpy ( ZSTR_VAL ( res ) + str1_len + str2_len , str3 , str3_len )"		93399	0					
ANR	93463	Callee	memcpy		93399	0					
ANR	93464	Identifier	memcpy		93399	0					
ANR	93465	ArgumentList	ZSTR_VAL ( res ) + str1_len + str2_len		93399	1					
ANR	93466	Argument	ZSTR_VAL ( res ) + str1_len + str2_len		93399	0					
ANR	93467	AdditiveExpression	ZSTR_VAL ( res ) + str1_len + str2_len		93399	0		+			
ANR	93468	CallExpression	ZSTR_VAL ( res )		93399	0					
ANR	93469	Callee	ZSTR_VAL		93399	0					
ANR	93470	Identifier	ZSTR_VAL		93399	0					
ANR	93471	ArgumentList	res		93399	1					
ANR	93472	Argument	res		93399	0					
ANR	93473	Identifier	res		93399	0					
ANR	93474	AdditiveExpression	str1_len + str2_len		93399	1		+			
ANR	93475	Identifier	str1_len		93399	0					
ANR	93476	Identifier	str2_len		93399	1					
ANR	93477	Argument	str3		93399	1					
ANR	93478	Identifier	str3		93399	0					
ANR	93479	Argument	str3_len		93399	2					
ANR	93480	Identifier	str3_len		93399	0					
ANR	93481	ExpressionStatement	ZSTR_VAL ( res ) [ len ] = '\\0'	723:1:21531:21556	93399	5	True				
ANR	93482	AssignmentExpression	ZSTR_VAL ( res ) [ len ] = '\\0'		93399	0		=			
ANR	93483	ArrayIndexing	ZSTR_VAL ( res ) [ len ]		93399	0					
ANR	93484	CallExpression	ZSTR_VAL ( res )		93399	0					
ANR	93485	Callee	ZSTR_VAL		93399	0					
ANR	93486	Identifier	ZSTR_VAL		93399	0					
ANR	93487	ArgumentList	res		93399	1					
ANR	93488	Argument	res		93399	0					
ANR	93489	Identifier	res		93399	0					
ANR	93490	Identifier	len		93399	1					
ANR	93491	PrimaryExpression	'\\0'		93399	1					
ANR	93492	ReturnStatement	return res ;	725:1:21560:21570	93399	6	True				
ANR	93493	Identifier	res		93399	0					
ANR	93494	ReturnType	zend_string *		93399	1					
ANR	93495	Identifier	zend_concat3		93399	2					
ANR	93496	ParameterList	"char * str1 , size_t str1_len , char * str2 , size_t str2_len , char * str3 , size_t str3_len"		93399	3					
ANR	93497	Parameter	char * str1	715:26:21184:21193	93399	0	True				
ANR	93498	ParameterType	char *		93399	0					
ANR	93499	Identifier	str1		93399	1					
ANR	93500	Parameter	size_t str1_len	715:38:21196:21210	93399	1	True				
ANR	93501	ParameterType	size_t		93399	0					
ANR	93502	Identifier	str1_len		93399	1					
ANR	93503	Parameter	char * str2	715:55:21213:21222	93399	2	True				
ANR	93504	ParameterType	char *		93399	0					
ANR	93505	Identifier	str2		93399	1					
ANR	93506	Parameter	size_t str2_len	715:67:21225:21239	93399	3	True				
ANR	93507	ParameterType	size_t		93399	0					
ANR	93508	Identifier	str2_len		93399	1					
ANR	93509	Parameter	char * str3	715:84:21242:21251	93399	4	True				
ANR	93510	ParameterType	char *		93399	0					
ANR	93511	Identifier	str3		93399	1					
ANR	93512	Parameter	size_t str3_len	715:96:21254:21268	93399	5	True				
ANR	93513	ParameterType	size_t		93399	0					
ANR	93514	Identifier	str3_len		93399	1					
ANR	93515	CFGEntryNode	ENTRY		93399		True				
ANR	93516	CFGExitNode	EXIT		93399		True				
ANR	93517	Symbol	res		93399						
ANR	93518	Symbol	zend_string_alloc		93399						
ANR	93519	Symbol	str3		93399						
ANR	93520	Symbol	len		93399						
ANR	93521	Symbol	str3_len		93399						
ANR	93522	Symbol	str1		93399						
ANR	93523	Symbol	str1_len		93399						
ANR	93524	Symbol	str2		93399						
ANR	93525	Symbol	str2_len		93399						
ANR	93526	Symbol	ZSTR_VAL		93399						
ANR	93527	Symbol	* len		93399						
ANR	93528	Symbol	* ZSTR_VAL		93399						
ANR	93529	Function	zend_concat_names	728:0:21575:21737							
ANR	93530	FunctionDef	"zend_concat_names (char * name1 , size_t name1_len , char * name2 , size_t name2_len)"		93529	0					
ANR	93531	CompoundStatement		728:93:21668:21737	93529	0					
ANR	93532	ReturnStatement	"return zend_concat3 ( name1 , name1_len , ""\\\\"" , 1 , name2 , name2_len ) ;"	729:1:21671:21735	93529	0	True				
ANR	93533	CallExpression	"zend_concat3 ( name1 , name1_len , ""\\\\"" , 1 , name2 , name2_len )"		93529	0					
ANR	93534	Callee	zend_concat3		93529	0					
ANR	93535	Identifier	zend_concat3		93529	0					
ANR	93536	ArgumentList	name1		93529	1					
ANR	93537	Argument	name1		93529	0					
ANR	93538	Identifier	name1		93529	0					
ANR	93539	Argument	name1_len		93529	1					
ANR	93540	Identifier	name1_len		93529	0					
ANR	93541	Argument	"""\\\\"""		93529	2					
ANR	93542	PrimaryExpression	"""\\\\"""		93529	0					
ANR	93543	Argument	1		93529	3					
ANR	93544	PrimaryExpression	1		93529	0					
ANR	93545	Argument	name2		93529	4					
ANR	93546	Identifier	name2		93529	0					
ANR	93547	Argument	name2_len		93529	5					
ANR	93548	Identifier	name2_len		93529	0					
ANR	93549	ReturnType	zend_string *		93529	1					
ANR	93550	Identifier	zend_concat_names		93529	2					
ANR	93551	ParameterList	"char * name1 , size_t name1_len , char * name2 , size_t name2_len"		93529	3					
ANR	93552	Parameter	char * name1	728:31:21606:21616	93529	0	True				
ANR	93553	ParameterType	char *		93529	0					
ANR	93554	Identifier	name1		93529	1					
ANR	93555	Parameter	size_t name1_len	728:44:21619:21634	93529	1	True				
ANR	93556	ParameterType	size_t		93529	0					
ANR	93557	Identifier	name1_len		93529	1					
ANR	93558	Parameter	char * name2	728:62:21637:21647	93529	2	True				
ANR	93559	ParameterType	char *		93529	0					
ANR	93560	Identifier	name2		93529	1					
ANR	93561	Parameter	size_t name2_len	728:75:21650:21665	93529	3	True				
ANR	93562	ParameterType	size_t		93529	0					
ANR	93563	Identifier	name2_len		93529	1					
ANR	93564	CFGEntryNode	ENTRY		93529		True				
ANR	93565	CFGExitNode	EXIT		93529		True				
ANR	93566	Symbol	name1_len		93529						
ANR	93567	Symbol	name2_len		93529						
ANR	93568	Symbol	name2		93529						
ANR	93569	Symbol	name1		93529						
ANR	93570	Symbol	zend_concat3		93529						
ANR	93571	Function	zend_prefix_with_ns	732:0:21740:22001							
ANR	93572	FunctionDef	zend_prefix_with_ns (zend_string * name)		93571	0					
ANR	93573	CompoundStatement		732:52:21792:22001	93571	0					
ANR	93574	IfStatement	if ( FC ( current_namespace ) )		93571	0					
ANR	93575	Condition	FC ( current_namespace )	733:5:21799:21819	93571	0	True				
ANR	93576	CallExpression	FC ( current_namespace )		93571	0					
ANR	93577	Callee	FC		93571	0					
ANR	93578	Identifier	FC		93571	0					
ANR	93579	ArgumentList	current_namespace		93571	1					
ANR	93580	Argument	current_namespace		93571	0					
ANR	93581	Identifier	current_namespace		93571	0					
ANR	93582	CompoundStatement		3:2:33:72	93571	1					
ANR	93583	IdentifierDeclStatement	zend_string * ns = FC ( current_namespace ) ;	734:2:21826:21865	93571	0	True				
ANR	93584	IdentifierDecl	* ns = FC ( current_namespace )		93571	0					
ANR	93585	IdentifierDeclType	zend_string *		93571	0					
ANR	93586	Identifier	ns		93571	1					
ANR	93587	AssignmentExpression	* ns = FC ( current_namespace )		93571	2		=			
ANR	93588	Identifier	ns		93571	0					
ANR	93589	CallExpression	FC ( current_namespace )		93571	1					
ANR	93590	Callee	FC		93571	0					
ANR	93591	Identifier	FC		93571	0					
ANR	93592	ArgumentList	current_namespace		93571	1					
ANR	93593	Argument	current_namespace		93571	0					
ANR	93594	Identifier	current_namespace		93571	0					
ANR	93595	ReturnStatement	"return zend_concat_names ( ZSTR_VAL ( ns ) , ZSTR_LEN ( ns ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) ;"	735:2:21869:21953	93571	1	True				
ANR	93596	CallExpression	"zend_concat_names ( ZSTR_VAL ( ns ) , ZSTR_LEN ( ns ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		93571	0					
ANR	93597	Callee	zend_concat_names		93571	0					
ANR	93598	Identifier	zend_concat_names		93571	0					
ANR	93599	ArgumentList	ZSTR_VAL ( ns )		93571	1					
ANR	93600	Argument	ZSTR_VAL ( ns )		93571	0					
ANR	93601	CallExpression	ZSTR_VAL ( ns )		93571	0					
ANR	93602	Callee	ZSTR_VAL		93571	0					
ANR	93603	Identifier	ZSTR_VAL		93571	0					
ANR	93604	ArgumentList	ns		93571	1					
ANR	93605	Argument	ns		93571	0					
ANR	93606	Identifier	ns		93571	0					
ANR	93607	Argument	ZSTR_LEN ( ns )		93571	1					
ANR	93608	CallExpression	ZSTR_LEN ( ns )		93571	0					
ANR	93609	Callee	ZSTR_LEN		93571	0					
ANR	93610	Identifier	ZSTR_LEN		93571	0					
ANR	93611	ArgumentList	ns		93571	1					
ANR	93612	Argument	ns		93571	0					
ANR	93613	Identifier	ns		93571	0					
ANR	93614	Argument	ZSTR_VAL ( name )		93571	2					
ANR	93615	CallExpression	ZSTR_VAL ( name )		93571	0					
ANR	93616	Callee	ZSTR_VAL		93571	0					
ANR	93617	Identifier	ZSTR_VAL		93571	0					
ANR	93618	ArgumentList	name		93571	1					
ANR	93619	Argument	name		93571	0					
ANR	93620	Identifier	name		93571	0					
ANR	93621	Argument	ZSTR_LEN ( name )		93571	3					
ANR	93622	CallExpression	ZSTR_LEN ( name )		93571	0					
ANR	93623	Callee	ZSTR_LEN		93571	0					
ANR	93624	Identifier	ZSTR_LEN		93571	0					
ANR	93625	ArgumentList	name		93571	1					
ANR	93626	Argument	name		93571	0					
ANR	93627	Identifier	name		93571	0					
ANR	93628	ElseStatement	else		93571	0					
ANR	93629	CompoundStatement		5:8:170:170	93571	0					
ANR	93630	ReturnStatement	return zend_string_copy ( name ) ;	737:2:21967:21996	93571	0	True				
ANR	93631	CallExpression	zend_string_copy ( name )		93571	0					
ANR	93632	Callee	zend_string_copy		93571	0					
ANR	93633	Identifier	zend_string_copy		93571	0					
ANR	93634	ArgumentList	name		93571	1					
ANR	93635	Argument	name		93571	0					
ANR	93636	Identifier	name		93571	0					
ANR	93637	ReturnType	zend_string *		93571	1					
ANR	93638	Identifier	zend_prefix_with_ns		93571	2					
ANR	93639	ParameterList	zend_string * name		93571	3					
ANR	93640	Parameter	zend_string * name	732:33:21773:21789	93571	0	True				
ANR	93641	ParameterType	zend_string *		93571	0					
ANR	93642	Identifier	name		93571	1					
ANR	93643	CFGEntryNode	ENTRY		93571		True				
ANR	93644	CFGExitNode	EXIT		93571		True				
ANR	93645	Symbol	zend_concat_names		93571						
ANR	93646	Symbol	current_namespace		93571						
ANR	93647	Symbol	ns		93571						
ANR	93648	Symbol	name		93571						
ANR	93649	Symbol	ZSTR_LEN		93571						
ANR	93650	Symbol	zend_string_copy		93571						
ANR	93651	Symbol	FC		93571						
ANR	93652	Symbol	ZSTR_VAL		93571						
ANR	93653	Function	zend_hash_find_ptr_lc	741:0:22004:22331							
ANR	93654	FunctionDef	"zend_hash_find_ptr_lc (HashTable * ht , const char * str , size_t len)"		93653	0					
ANR	93655	CompoundStatement		741:72:22076:22331	93653	0					
ANR	93656	IdentifierDeclStatement	void * result ;	742:1:22079:22091	93653	0	True				
ANR	93657	IdentifierDecl	* result		93653	0					
ANR	93658	IdentifierDeclType	void *		93653	0					
ANR	93659	Identifier	result		93653	1					
ANR	93660	IdentifierDeclStatement	zend_string * lcname ;	743:1:22094:22113	93653	1	True				
ANR	93661	IdentifierDecl	* lcname		93653	0					
ANR	93662	IdentifierDeclType	zend_string *		93653	0					
ANR	93663	Identifier	lcname		93653	1					
ANR	93664	ExpressionStatement	ALLOCA_FLAG ( use_heap )	744:1:22116:22137	93653	2	True				
ANR	93665	CallExpression	ALLOCA_FLAG ( use_heap )		93653	0					
ANR	93666	Callee	ALLOCA_FLAG		93653	0					
ANR	93667	Identifier	ALLOCA_FLAG		93653	0					
ANR	93668	ArgumentList	use_heap		93653	1					
ANR	93669	Argument	use_heap		93653	0					
ANR	93670	Identifier	use_heap		93653	0					
ANR	93671	ExpressionStatement	"ZSTR_ALLOCA_ALLOC ( lcname , len , use_heap )"	746:1:22141:22181	93653	3	True				
ANR	93672	CallExpression	"ZSTR_ALLOCA_ALLOC ( lcname , len , use_heap )"		93653	0					
ANR	93673	Callee	ZSTR_ALLOCA_ALLOC		93653	0					
ANR	93674	Identifier	ZSTR_ALLOCA_ALLOC		93653	0					
ANR	93675	ArgumentList	lcname		93653	1					
ANR	93676	Argument	lcname		93653	0					
ANR	93677	Identifier	lcname		93653	0					
ANR	93678	Argument	len		93653	1					
ANR	93679	Identifier	len		93653	0					
ANR	93680	Argument	use_heap		93653	2					
ANR	93681	Identifier	use_heap		93653	0					
ANR	93682	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , str , len )"	747:1:22184:22233	93653	4	True				
ANR	93683	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , str , len )"		93653	0					
ANR	93684	Callee	zend_str_tolower_copy		93653	0					
ANR	93685	Identifier	zend_str_tolower_copy		93653	0					
ANR	93686	ArgumentList	ZSTR_VAL ( lcname )		93653	1					
ANR	93687	Argument	ZSTR_VAL ( lcname )		93653	0					
ANR	93688	CallExpression	ZSTR_VAL ( lcname )		93653	0					
ANR	93689	Callee	ZSTR_VAL		93653	0					
ANR	93690	Identifier	ZSTR_VAL		93653	0					
ANR	93691	ArgumentList	lcname		93653	1					
ANR	93692	Argument	lcname		93653	0					
ANR	93693	Identifier	lcname		93653	0					
ANR	93694	Argument	str		93653	1					
ANR	93695	Identifier	str		93653	0					
ANR	93696	Argument	len		93653	2					
ANR	93697	Identifier	len		93653	0					
ANR	93698	ExpressionStatement	"result = zend_hash_find_ptr ( ht , lcname )"	748:1:22236:22275	93653	5	True				
ANR	93699	AssignmentExpression	"result = zend_hash_find_ptr ( ht , lcname )"		93653	0		=			
ANR	93700	Identifier	result		93653	0					
ANR	93701	CallExpression	"zend_hash_find_ptr ( ht , lcname )"		93653	1					
ANR	93702	Callee	zend_hash_find_ptr		93653	0					
ANR	93703	Identifier	zend_hash_find_ptr		93653	0					
ANR	93704	ArgumentList	ht		93653	1					
ANR	93705	Argument	ht		93653	0					
ANR	93706	Identifier	ht		93653	0					
ANR	93707	Argument	lcname		93653	1					
ANR	93708	Identifier	lcname		93653	0					
ANR	93709	ExpressionStatement	"ZSTR_ALLOCA_FREE ( lcname , use_heap )"	749:1:22278:22312	93653	6	True				
ANR	93710	CallExpression	"ZSTR_ALLOCA_FREE ( lcname , use_heap )"		93653	0					
ANR	93711	Callee	ZSTR_ALLOCA_FREE		93653	0					
ANR	93712	Identifier	ZSTR_ALLOCA_FREE		93653	0					
ANR	93713	ArgumentList	lcname		93653	1					
ANR	93714	Argument	lcname		93653	0					
ANR	93715	Identifier	lcname		93653	0					
ANR	93716	Argument	use_heap		93653	1					
ANR	93717	Identifier	use_heap		93653	0					
ANR	93718	ReturnStatement	return result ;	751:1:22316:22329	93653	7	True				
ANR	93719	Identifier	result		93653	0					
ANR	93720	ReturnType	void *		93653	1					
ANR	93721	Identifier	zend_hash_find_ptr_lc		93653	2					
ANR	93722	ParameterList	"HashTable * ht , const char * str , size_t len"		93653	3					
ANR	93723	Parameter	HashTable * ht	741:28:22032:22044	93653	0	True				
ANR	93724	ParameterType	HashTable *		93653	0					
ANR	93725	Identifier	ht		93653	1					
ANR	93726	Parameter	const char * str	741:43:22047:22061	93653	1	True				
ANR	93727	ParameterType	const char *		93653	0					
ANR	93728	Identifier	str		93653	1					
ANR	93729	Parameter	size_t len	741:60:22064:22073	93653	2	True				
ANR	93730	ParameterType	size_t		93653	0					
ANR	93731	Identifier	len		93653	1					
ANR	93732	CFGEntryNode	ENTRY		93653		True				
ANR	93733	CFGExitNode	EXIT		93653		True				
ANR	93734	Symbol	str		93653						
ANR	93735	Symbol	result		93653						
ANR	93736	Symbol	lcname		93653						
ANR	93737	Symbol	len		93653						
ANR	93738	Symbol	ht		93653						
ANR	93739	Symbol	zend_hash_find_ptr		93653						
ANR	93740	Symbol	use_heap		93653						
ANR	93741	Symbol	ZSTR_VAL		93653						
ANR	93742	Function	zend_resolve_non_class_name	754:0:22334:23885							
ANR	93743	FunctionDef	"zend_resolve_non_class_name (zend_string * name , uint32_t type , zend_bool * is_fully_qualified , zend_bool case_sensitive , HashTable * current_import_sub)"		93742	0					
ANR	93744	CompoundStatement		757:2:22501:23885	93742	0					
ANR	93745	IdentifierDeclStatement	char * compound ;	758:1:22504:22518	93742	0	True				
ANR	93746	IdentifierDecl	* compound		93742	0					
ANR	93747	IdentifierDeclType	char *		93742	0					
ANR	93748	Identifier	compound		93742	1					
ANR	93749	ExpressionStatement	* is_fully_qualified = 0	759:1:22521:22544	93742	1	True				
ANR	93750	AssignmentExpression	* is_fully_qualified = 0		93742	0		=			
ANR	93751	UnaryOperationExpression	* is_fully_qualified		93742	0					
ANR	93752	UnaryOperator	*		93742	0					
ANR	93753	Identifier	is_fully_qualified		93742	1					
ANR	93754	PrimaryExpression	0		93742	1					
ANR	93755	IfStatement	if ( ZSTR_VAL ( name ) [ 0 ] == '\\\\' )		93742	2					
ANR	93756	Condition	ZSTR_VAL ( name ) [ 0 ] == '\\\\'	761:5:22552:22576	93742	0	True				
ANR	93757	EqualityExpression	ZSTR_VAL ( name ) [ 0 ] == '\\\\'		93742	0		==			
ANR	93758	ArrayIndexing	ZSTR_VAL ( name ) [ 0 ]		93742	0					
ANR	93759	CallExpression	ZSTR_VAL ( name )		93742	0					
ANR	93760	Callee	ZSTR_VAL		93742	0					
ANR	93761	Identifier	ZSTR_VAL		93742	0					
ANR	93762	ArgumentList	name		93742	1					
ANR	93763	Argument	name		93742	0					
ANR	93764	Identifier	name		93742	0					
ANR	93765	PrimaryExpression	0		93742	1					
ANR	93766	PrimaryExpression	'\\\\'		93742	1					
ANR	93767	CompoundStatement		5:32:77:77	93742	1					
ANR	93768	ReturnStatement	"return zend_string_init ( ZSTR_VAL ( name ) + 1 , ZSTR_LEN ( name ) - 1 , 0 ) ;"	763:2:22663:22729	93742	0	True				
ANR	93769	CallExpression	"zend_string_init ( ZSTR_VAL ( name ) + 1 , ZSTR_LEN ( name ) - 1 , 0 )"		93742	0					
ANR	93770	Callee	zend_string_init		93742	0					
ANR	93771	Identifier	zend_string_init		93742	0					
ANR	93772	ArgumentList	ZSTR_VAL ( name ) + 1		93742	1					
ANR	93773	Argument	ZSTR_VAL ( name ) + 1		93742	0					
ANR	93774	AdditiveExpression	ZSTR_VAL ( name ) + 1		93742	0		+			
ANR	93775	CallExpression	ZSTR_VAL ( name )		93742	0					
ANR	93776	Callee	ZSTR_VAL		93742	0					
ANR	93777	Identifier	ZSTR_VAL		93742	0					
ANR	93778	ArgumentList	name		93742	1					
ANR	93779	Argument	name		93742	0					
ANR	93780	Identifier	name		93742	0					
ANR	93781	PrimaryExpression	1		93742	1					
ANR	93782	Argument	ZSTR_LEN ( name ) - 1		93742	1					
ANR	93783	AdditiveExpression	ZSTR_LEN ( name ) - 1		93742	0		-			
ANR	93784	CallExpression	ZSTR_LEN ( name )		93742	0					
ANR	93785	Callee	ZSTR_LEN		93742	0					
ANR	93786	Identifier	ZSTR_LEN		93742	0					
ANR	93787	ArgumentList	name		93742	1					
ANR	93788	Argument	name		93742	0					
ANR	93789	Identifier	name		93742	0					
ANR	93790	PrimaryExpression	1		93742	1					
ANR	93791	Argument	0		93742	2					
ANR	93792	PrimaryExpression	0		93742	0					
ANR	93793	IfStatement	if ( type == ZEND_NAME_FQ )		93742	3					
ANR	93794	Condition	type == ZEND_NAME_FQ	766:5:22740:22759	93742	0	True				
ANR	93795	EqualityExpression	type == ZEND_NAME_FQ		93742	0		==			
ANR	93796	Identifier	type		93742	0					
ANR	93797	Identifier	ZEND_NAME_FQ		93742	1					
ANR	93798	CompoundStatement		10:27:260:260	93742	1					
ANR	93799	ExpressionStatement	* is_fully_qualified = 1	767:2:22766:22789	93742	0	True				
ANR	93800	AssignmentExpression	* is_fully_qualified = 1		93742	0		=			
ANR	93801	UnaryOperationExpression	* is_fully_qualified		93742	0					
ANR	93802	UnaryOperator	*		93742	0					
ANR	93803	Identifier	is_fully_qualified		93742	1					
ANR	93804	PrimaryExpression	1		93742	1					
ANR	93805	ReturnStatement	return zend_string_copy ( name ) ;	768:2:22793:22822	93742	1	True				
ANR	93806	CallExpression	zend_string_copy ( name )		93742	0					
ANR	93807	Callee	zend_string_copy		93742	0					
ANR	93808	Identifier	zend_string_copy		93742	0					
ANR	93809	ArgumentList	name		93742	1					
ANR	93810	Argument	name		93742	0					
ANR	93811	Identifier	name		93742	0					
ANR	93812	IfStatement	if ( type == ZEND_NAME_RELATIVE )		93742	4					
ANR	93813	Condition	type == ZEND_NAME_RELATIVE	771:5:22833:22858	93742	0	True				
ANR	93814	EqualityExpression	type == ZEND_NAME_RELATIVE		93742	0		==			
ANR	93815	Identifier	type		93742	0					
ANR	93816	Identifier	ZEND_NAME_RELATIVE		93742	1					
ANR	93817	CompoundStatement		15:33:359:359	93742	1					
ANR	93818	ExpressionStatement	* is_fully_qualified = 1	772:2:22865:22888	93742	0	True				
ANR	93819	AssignmentExpression	* is_fully_qualified = 1		93742	0		=			
ANR	93820	UnaryOperationExpression	* is_fully_qualified		93742	0					
ANR	93821	UnaryOperator	*		93742	0					
ANR	93822	Identifier	is_fully_qualified		93742	1					
ANR	93823	PrimaryExpression	1		93742	1					
ANR	93824	ReturnStatement	return zend_prefix_with_ns ( name ) ;	773:2:22892:22924	93742	1	True				
ANR	93825	CallExpression	zend_prefix_with_ns ( name )		93742	0					
ANR	93826	Callee	zend_prefix_with_ns		93742	0					
ANR	93827	Identifier	zend_prefix_with_ns		93742	0					
ANR	93828	ArgumentList	name		93742	1					
ANR	93829	Argument	name		93742	0					
ANR	93830	Identifier	name		93742	0					
ANR	93831	IfStatement	if ( current_import_sub )		93742	5					
ANR	93832	Condition	current_import_sub	776:5:22935:22952	93742	0	True				
ANR	93833	Identifier	current_import_sub		93742	0					
ANR	93834	CompoundStatement		22:2:527:551	93742	1					
ANR	93835	IdentifierDeclStatement	zend_string * import_name ;	778:2:23029:23053	93742	0	True				
ANR	93836	IdentifierDecl	* import_name		93742	0					
ANR	93837	IdentifierDeclType	zend_string *		93742	0					
ANR	93838	Identifier	import_name		93742	1					
ANR	93839	IfStatement	if ( case_sensitive )		93742	1					
ANR	93840	Condition	case_sensitive	779:6:23061:23074	93742	0	True				
ANR	93841	Identifier	case_sensitive		93742	0					
ANR	93842	CompoundStatement		23:22:575:575	93742	1					
ANR	93843	ExpressionStatement	"import_name = zend_hash_find_ptr ( current_import_sub , name )"	780:3:23082:23140	93742	0	True				
ANR	93844	AssignmentExpression	"import_name = zend_hash_find_ptr ( current_import_sub , name )"		93742	0		=			
ANR	93845	Identifier	import_name		93742	0					
ANR	93846	CallExpression	"zend_hash_find_ptr ( current_import_sub , name )"		93742	1					
ANR	93847	Callee	zend_hash_find_ptr		93742	0					
ANR	93848	Identifier	zend_hash_find_ptr		93742	0					
ANR	93849	ArgumentList	current_import_sub		93742	1					
ANR	93850	Argument	current_import_sub		93742	0					
ANR	93851	Identifier	current_import_sub		93742	0					
ANR	93852	Argument	name		93742	1					
ANR	93853	Identifier	name		93742	0					
ANR	93854	ElseStatement	else		93742	0					
ANR	93855	CompoundStatement		25:9:649:649	93742	0					
ANR	93856	ExpressionStatement	"import_name = zend_hash_find_ptr_lc ( current_import_sub , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"	782:3:23156:23243	93742	0	True				
ANR	93857	AssignmentExpression	"import_name = zend_hash_find_ptr_lc ( current_import_sub , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		93742	0		=			
ANR	93858	Identifier	import_name		93742	0					
ANR	93859	CallExpression	"zend_hash_find_ptr_lc ( current_import_sub , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		93742	1					
ANR	93860	Callee	zend_hash_find_ptr_lc		93742	0					
ANR	93861	Identifier	zend_hash_find_ptr_lc		93742	0					
ANR	93862	ArgumentList	current_import_sub		93742	1					
ANR	93863	Argument	current_import_sub		93742	0					
ANR	93864	Identifier	current_import_sub		93742	0					
ANR	93865	Argument	ZSTR_VAL ( name )		93742	1					
ANR	93866	CallExpression	ZSTR_VAL ( name )		93742	0					
ANR	93867	Callee	ZSTR_VAL		93742	0					
ANR	93868	Identifier	ZSTR_VAL		93742	0					
ANR	93869	ArgumentList	name		93742	1					
ANR	93870	Argument	name		93742	0					
ANR	93871	Identifier	name		93742	0					
ANR	93872	Argument	ZSTR_LEN ( name )		93742	2					
ANR	93873	CallExpression	ZSTR_LEN ( name )		93742	0					
ANR	93874	Callee	ZSTR_LEN		93742	0					
ANR	93875	Identifier	ZSTR_LEN		93742	0					
ANR	93876	ArgumentList	name		93742	1					
ANR	93877	Argument	name		93742	0					
ANR	93878	Identifier	name		93742	0					
ANR	93879	IfStatement	if ( import_name )		93742	2					
ANR	93880	Condition	import_name	785:6:23256:23266	93742	0	True				
ANR	93881	Identifier	import_name		93742	0					
ANR	93882	CompoundStatement		29:19:767:767	93742	1					
ANR	93883	ExpressionStatement	* is_fully_qualified = 1	786:3:23274:23297	93742	0	True				
ANR	93884	AssignmentExpression	* is_fully_qualified = 1		93742	0		=			
ANR	93885	UnaryOperationExpression	* is_fully_qualified		93742	0					
ANR	93886	UnaryOperator	*		93742	0					
ANR	93887	Identifier	is_fully_qualified		93742	1					
ANR	93888	PrimaryExpression	1		93742	1					
ANR	93889	ReturnStatement	return zend_string_copy ( import_name ) ;	787:3:23302:23338	93742	1	True				
ANR	93890	CallExpression	zend_string_copy ( import_name )		93742	0					
ANR	93891	Callee	zend_string_copy		93742	0					
ANR	93892	Identifier	zend_string_copy		93742	0					
ANR	93893	ArgumentList	import_name		93742	1					
ANR	93894	Argument	import_name		93742	0					
ANR	93895	Identifier	import_name		93742	0					
ANR	93896	ExpressionStatement	"compound = memchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"	791:1:23349:23404	93742	6	True				
ANR	93897	AssignmentExpression	"compound = memchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		93742	0		=			
ANR	93898	Identifier	compound		93742	0					
ANR	93899	CallExpression	"memchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		93742	1					
ANR	93900	Callee	memchr		93742	0					
ANR	93901	Identifier	memchr		93742	0					
ANR	93902	ArgumentList	ZSTR_VAL ( name )		93742	1					
ANR	93903	Argument	ZSTR_VAL ( name )		93742	0					
ANR	93904	CallExpression	ZSTR_VAL ( name )		93742	0					
ANR	93905	Callee	ZSTR_VAL		93742	0					
ANR	93906	Identifier	ZSTR_VAL		93742	0					
ANR	93907	ArgumentList	name		93742	1					
ANR	93908	Argument	name		93742	0					
ANR	93909	Identifier	name		93742	0					
ANR	93910	Argument	'\\\\'		93742	1					
ANR	93911	PrimaryExpression	'\\\\'		93742	0					
ANR	93912	Argument	ZSTR_LEN ( name )		93742	2					
ANR	93913	CallExpression	ZSTR_LEN ( name )		93742	0					
ANR	93914	Callee	ZSTR_LEN		93742	0					
ANR	93915	Identifier	ZSTR_LEN		93742	0					
ANR	93916	ArgumentList	name		93742	1					
ANR	93917	Argument	name		93742	0					
ANR	93918	Identifier	name		93742	0					
ANR	93919	IfStatement	if ( compound )		93742	7					
ANR	93920	Condition	compound	792:5:23411:23418	93742	0	True				
ANR	93921	Identifier	compound		93742	0					
ANR	93922	CompoundStatement		36:15:919:919	93742	1					
ANR	93923	ExpressionStatement	* is_fully_qualified = 1	793:2:23425:23448	93742	0	True				
ANR	93924	AssignmentExpression	* is_fully_qualified = 1		93742	0		=			
ANR	93925	UnaryOperationExpression	* is_fully_qualified		93742	0					
ANR	93926	UnaryOperator	*		93742	0					
ANR	93927	Identifier	is_fully_qualified		93742	1					
ANR	93928	PrimaryExpression	1		93742	1					
ANR	93929	IfStatement	if ( compound && FC ( imports ) )		93742	8					
ANR	93930	Condition	compound && FC ( imports )	796:5:23459:23481	93742	0	True				
ANR	93931	AndExpression	compound && FC ( imports )		93742	0		&&			
ANR	93932	Identifier	compound		93742	0					
ANR	93933	CallExpression	FC ( imports )		93742	1					
ANR	93934	Callee	FC		93742	0					
ANR	93935	Identifier	FC		93742	0					
ANR	93936	ArgumentList	imports		93742	1					
ANR	93937	Argument	imports		93742	0					
ANR	93938	Identifier	imports		93742	0					
ANR	93939	CompoundStatement		43:2:1102:1184	93742	1					
ANR	93940	IdentifierDeclStatement	size_t len = compound - ZSTR_VAL ( name ) ;	798:2:23562:23600	93742	0	True				
ANR	93941	IdentifierDecl	len = compound - ZSTR_VAL ( name )		93742	0					
ANR	93942	IdentifierDeclType	size_t		93742	0					
ANR	93943	Identifier	len		93742	1					
ANR	93944	AssignmentExpression	len = compound - ZSTR_VAL ( name )		93742	2		=			
ANR	93945	Identifier	len		93742	0					
ANR	93946	AdditiveExpression	compound - ZSTR_VAL ( name )		93742	1		-			
ANR	93947	Identifier	compound		93742	0					
ANR	93948	CallExpression	ZSTR_VAL ( name )		93742	1					
ANR	93949	Callee	ZSTR_VAL		93742	0					
ANR	93950	Identifier	ZSTR_VAL		93742	0					
ANR	93951	ArgumentList	name		93742	1					
ANR	93952	Argument	name		93742	0					
ANR	93953	Identifier	name		93742	0					
ANR	93954	IdentifierDeclStatement	"zend_string * import_name = zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , len ) ;"	799:2:23604:23686	93742	1	True				
ANR	93955	IdentifierDecl	"* import_name = zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , len )"		93742	0					
ANR	93956	IdentifierDeclType	zend_string *		93742	0					
ANR	93957	Identifier	import_name		93742	1					
ANR	93958	AssignmentExpression	"* import_name = zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , len )"		93742	2		=			
ANR	93959	Identifier	import_name		93742	0					
ANR	93960	CallExpression	"zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , len )"		93742	1					
ANR	93961	Callee	zend_hash_find_ptr_lc		93742	0					
ANR	93962	Identifier	zend_hash_find_ptr_lc		93742	0					
ANR	93963	ArgumentList	FC ( imports )		93742	1					
ANR	93964	Argument	FC ( imports )		93742	0					
ANR	93965	CallExpression	FC ( imports )		93742	0					
ANR	93966	Callee	FC		93742	0					
ANR	93967	Identifier	FC		93742	0					
ANR	93968	ArgumentList	imports		93742	1					
ANR	93969	Argument	imports		93742	0					
ANR	93970	Identifier	imports		93742	0					
ANR	93971	Argument	ZSTR_VAL ( name )		93742	1					
ANR	93972	CallExpression	ZSTR_VAL ( name )		93742	0					
ANR	93973	Callee	ZSTR_VAL		93742	0					
ANR	93974	Identifier	ZSTR_VAL		93742	0					
ANR	93975	ArgumentList	name		93742	1					
ANR	93976	Argument	name		93742	0					
ANR	93977	Identifier	name		93742	0					
ANR	93978	Argument	len		93742	2					
ANR	93979	Identifier	len		93742	0					
ANR	93980	IfStatement	if ( import_name )		93742	2					
ANR	93981	Condition	import_name	801:6:23695:23705	93742	0	True				
ANR	93982	Identifier	import_name		93742	0					
ANR	93983	CompoundStatement		45:19:1206:1206	93742	1					
ANR	93984	ReturnStatement	"return zend_concat_names ( ZSTR_VAL ( import_name ) , ZSTR_LEN ( import_name ) , ZSTR_VAL ( name ) + len + 1 , ZSTR_LEN ( name ) - len - 1 ) ;"	802:3:23713:23840	93742	0	True				
ANR	93985	CallExpression	"zend_concat_names ( ZSTR_VAL ( import_name ) , ZSTR_LEN ( import_name ) , ZSTR_VAL ( name ) + len + 1 , ZSTR_LEN ( name ) - len - 1 )"		93742	0					
ANR	93986	Callee	zend_concat_names		93742	0					
ANR	93987	Identifier	zend_concat_names		93742	0					
ANR	93988	ArgumentList	ZSTR_VAL ( import_name )		93742	1					
ANR	93989	Argument	ZSTR_VAL ( import_name )		93742	0					
ANR	93990	CallExpression	ZSTR_VAL ( import_name )		93742	0					
ANR	93991	Callee	ZSTR_VAL		93742	0					
ANR	93992	Identifier	ZSTR_VAL		93742	0					
ANR	93993	ArgumentList	import_name		93742	1					
ANR	93994	Argument	import_name		93742	0					
ANR	93995	Identifier	import_name		93742	0					
ANR	93996	Argument	ZSTR_LEN ( import_name )		93742	1					
ANR	93997	CallExpression	ZSTR_LEN ( import_name )		93742	0					
ANR	93998	Callee	ZSTR_LEN		93742	0					
ANR	93999	Identifier	ZSTR_LEN		93742	0					
ANR	94000	ArgumentList	import_name		93742	1					
ANR	94001	Argument	import_name		93742	0					
ANR	94002	Identifier	import_name		93742	0					
ANR	94003	Argument	ZSTR_VAL ( name ) + len + 1		93742	2					
ANR	94004	AdditiveExpression	ZSTR_VAL ( name ) + len + 1		93742	0		+			
ANR	94005	CallExpression	ZSTR_VAL ( name )		93742	0					
ANR	94006	Callee	ZSTR_VAL		93742	0					
ANR	94007	Identifier	ZSTR_VAL		93742	0					
ANR	94008	ArgumentList	name		93742	1					
ANR	94009	Argument	name		93742	0					
ANR	94010	Identifier	name		93742	0					
ANR	94011	AdditiveExpression	len + 1		93742	1		+			
ANR	94012	Identifier	len		93742	0					
ANR	94013	PrimaryExpression	1		93742	1					
ANR	94014	Argument	ZSTR_LEN ( name ) - len - 1		93742	3					
ANR	94015	AdditiveExpression	ZSTR_LEN ( name ) - len - 1		93742	0		-			
ANR	94016	CallExpression	ZSTR_LEN ( name )		93742	0					
ANR	94017	Callee	ZSTR_LEN		93742	0					
ANR	94018	Identifier	ZSTR_LEN		93742	0					
ANR	94019	ArgumentList	name		93742	1					
ANR	94020	Argument	name		93742	0					
ANR	94021	Identifier	name		93742	0					
ANR	94022	AdditiveExpression	len - 1		93742	1		-			
ANR	94023	Identifier	len		93742	0					
ANR	94024	PrimaryExpression	1		93742	1					
ANR	94025	ReturnStatement	return zend_prefix_with_ns ( name ) ;	807:1:23851:23883	93742	9	True				
ANR	94026	CallExpression	zend_prefix_with_ns ( name )		93742	0					
ANR	94027	Callee	zend_prefix_with_ns		93742	0					
ANR	94028	Identifier	zend_prefix_with_ns		93742	0					
ANR	94029	ArgumentList	name		93742	1					
ANR	94030	Argument	name		93742	0					
ANR	94031	Identifier	name		93742	0					
ANR	94032	ReturnType	zend_string *		93742	1					
ANR	94033	Identifier	zend_resolve_non_class_name		93742	2					
ANR	94034	ParameterList	"zend_string * name , uint32_t type , zend_bool * is_fully_qualified , zend_bool case_sensitive , HashTable * current_import_sub"		93742	3					
ANR	94035	Parameter	zend_string * name	755:1:22377:22393	93742	0	True				
ANR	94036	ParameterType	zend_string *		93742	0					
ANR	94037	Identifier	name		93742	1					
ANR	94038	Parameter	uint32_t type	755:20:22396:22408	93742	1	True				
ANR	94039	ParameterType	uint32_t		93742	0					
ANR	94040	Identifier	type		93742	1					
ANR	94041	Parameter	zend_bool * is_fully_qualified	755:35:22411:22439	93742	2	True				
ANR	94042	ParameterType	zend_bool *		93742	0					
ANR	94043	Identifier	is_fully_qualified		93742	1					
ANR	94044	Parameter	zend_bool case_sensitive	756:1:22443:22466	93742	3	True				
ANR	94045	ParameterType	zend_bool		93742	0					
ANR	94046	Identifier	case_sensitive		93742	1					
ANR	94047	Parameter	HashTable * current_import_sub	756:27:22469:22497	93742	4	True				
ANR	94048	ParameterType	HashTable *		93742	0					
ANR	94049	Identifier	current_import_sub		93742	1					
ANR	94050	CFGEntryNode	ENTRY		93742		True				
ANR	94051	CFGExitNode	EXIT		93742		True				
ANR	94052	Symbol	imports		93742						
ANR	94053	Symbol	ZEND_NAME_FQ		93742						
ANR	94054	Symbol	import_name		93742						
ANR	94055	Symbol	zend_string_copy		93742						
ANR	94056	Symbol	zend_prefix_with_ns		93742						
ANR	94057	Symbol	type		93742						
ANR	94058	Symbol	is_fully_qualified		93742						
ANR	94059	Symbol	compound		93742						
ANR	94060	Symbol	ZSTR_VAL		93742						
ANR	94061	Symbol	* is_fully_qualified		93742						
ANR	94062	Symbol	zend_string_init		93742						
ANR	94063	Symbol	zend_hash_find_ptr_lc		93742						
ANR	94064	Symbol	zend_concat_names		93742						
ANR	94065	Symbol	len		93742						
ANR	94066	Symbol	case_sensitive		93742						
ANR	94067	Symbol	ZEND_NAME_RELATIVE		93742						
ANR	94068	Symbol	name		93742						
ANR	94069	Symbol	ZSTR_LEN		93742						
ANR	94070	Symbol	memchr		93742						
ANR	94071	Symbol	zend_hash_find_ptr		93742						
ANR	94072	Symbol	FC		93742						
ANR	94073	Symbol	current_import_sub		93742						
ANR	94074	Symbol	* ZSTR_VAL		93742						
ANR	94075	Function	zend_resolve_function_name	811:0:23898:24112							
ANR	94076	FunctionDef	"zend_resolve_function_name (zend_string * name , uint32_t type , zend_bool * is_fully_qualified)"		94075	0					
ANR	94077	CompoundStatement		812:0:24013:24112	94075	0					
ANR	94078	ReturnStatement	"return zend_resolve_non_class_name ( name , type , is_fully_qualified , 0 , FC ( imports_function ) ) ;"	813:1:24016:24110	94075	0	True				
ANR	94079	CallExpression	"zend_resolve_non_class_name ( name , type , is_fully_qualified , 0 , FC ( imports_function ) )"		94075	0					
ANR	94080	Callee	zend_resolve_non_class_name		94075	0					
ANR	94081	Identifier	zend_resolve_non_class_name		94075	0					
ANR	94082	ArgumentList	name		94075	1					
ANR	94083	Argument	name		94075	0					
ANR	94084	Identifier	name		94075	0					
ANR	94085	Argument	type		94075	1					
ANR	94086	Identifier	type		94075	0					
ANR	94087	Argument	is_fully_qualified		94075	2					
ANR	94088	Identifier	is_fully_qualified		94075	0					
ANR	94089	Argument	0		94075	3					
ANR	94090	PrimaryExpression	0		94075	0					
ANR	94091	Argument	FC ( imports_function )		94075	4					
ANR	94092	CallExpression	FC ( imports_function )		94075	0					
ANR	94093	Callee	FC		94075	0					
ANR	94094	Identifier	FC		94075	0					
ANR	94095	ArgumentList	imports_function		94075	1					
ANR	94096	Argument	imports_function		94075	0					
ANR	94097	Identifier	imports_function		94075	0					
ANR	94098	ReturnType	zend_string *		94075	1					
ANR	94099	Identifier	zend_resolve_function_name		94075	2					
ANR	94100	ParameterList	"zend_string * name , uint32_t type , zend_bool * is_fully_qualified"		94075	3					
ANR	94101	Parameter	zend_string * name	811:40:23938:23954	94075	0	True				
ANR	94102	ParameterType	zend_string *		94075	0					
ANR	94103	Identifier	name		94075	1					
ANR	94104	Parameter	uint32_t type	811:59:23957:23969	94075	1	True				
ANR	94105	ParameterType	uint32_t		94075	0					
ANR	94106	Identifier	type		94075	1					
ANR	94107	Parameter	zend_bool * is_fully_qualified	811:74:23972:24000	94075	2	True				
ANR	94108	ParameterType	zend_bool *		94075	0					
ANR	94109	Identifier	is_fully_qualified		94075	1					
ANR	94110	CFGEntryNode	ENTRY		94075		True				
ANR	94111	CFGExitNode	EXIT		94075		True				
ANR	94112	Symbol	name		94075						
ANR	94113	Symbol	zend_resolve_non_class_name		94075						
ANR	94114	Symbol	type		94075						
ANR	94115	Symbol	is_fully_qualified		94075						
ANR	94116	Symbol	FC		94075						
ANR	94117	Symbol	imports_function		94075						
ANR	94118	Function	zend_resolve_const_name	818:0:24125:24333							
ANR	94119	FunctionDef	"zend_resolve_const_name (zend_string * name , uint32_t type , zend_bool * is_fully_qualified)"		94118	0					
ANR	94120	CompoundStatement		818:112:24237:24333	94118	0					
ANR	94121	ReturnStatement	"return zend_resolve_non_class_name ( name , type , is_fully_qualified , 1 , FC ( imports_const ) ) ;"	819:1:24240:24331	94118	0	True				
ANR	94122	CallExpression	"zend_resolve_non_class_name ( name , type , is_fully_qualified , 1 , FC ( imports_const ) )"		94118	0					
ANR	94123	Callee	zend_resolve_non_class_name		94118	0					
ANR	94124	Identifier	zend_resolve_non_class_name		94118	0					
ANR	94125	ArgumentList	name		94118	1					
ANR	94126	Argument	name		94118	0					
ANR	94127	Identifier	name		94118	0					
ANR	94128	Argument	type		94118	1					
ANR	94129	Identifier	type		94118	0					
ANR	94130	Argument	is_fully_qualified		94118	2					
ANR	94131	Identifier	is_fully_qualified		94118	0					
ANR	94132	Argument	1		94118	3					
ANR	94133	PrimaryExpression	1		94118	0					
ANR	94134	Argument	FC ( imports_const )		94118	4					
ANR	94135	CallExpression	FC ( imports_const )		94118	0					
ANR	94136	Callee	FC		94118	0					
ANR	94137	Identifier	FC		94118	0					
ANR	94138	ArgumentList	imports_const		94118	1					
ANR	94139	Argument	imports_const		94118	0					
ANR	94140	Identifier	imports_const		94118	0					
ANR	94141	ReturnType	zend_string *		94118	1					
ANR	94142	Identifier	zend_resolve_const_name		94118	2					
ANR	94143	ParameterList	"zend_string * name , uint32_t type , zend_bool * is_fully_qualified"		94118	3					
ANR	94144	Parameter	zend_string * name	818:37:24162:24178	94118	0	True				
ANR	94145	ParameterType	zend_string *		94118	0					
ANR	94146	Identifier	name		94118	1					
ANR	94147	Parameter	uint32_t type	818:56:24181:24193	94118	1	True				
ANR	94148	ParameterType	uint32_t		94118	0					
ANR	94149	Identifier	type		94118	1					
ANR	94150	Parameter	zend_bool * is_fully_qualified	818:71:24196:24224	94118	2	True				
ANR	94151	ParameterType	zend_bool *		94118	0					
ANR	94152	Identifier	is_fully_qualified		94118	1					
ANR	94153	CFGEntryNode	ENTRY		94118		True				
ANR	94154	CFGExitNode	EXIT		94118		True				
ANR	94155	Symbol	name		94118						
ANR	94156	Symbol	zend_resolve_non_class_name		94118						
ANR	94157	Symbol	imports_const		94118						
ANR	94158	Symbol	type		94118						
ANR	94159	Symbol	is_fully_qualified		94118						
ANR	94160	Symbol	FC		94118						
ANR	94161	Function	zend_resolve_class_name	824:0:24346:25883							
ANR	94162	FunctionDef	"zend_resolve_class_name (zend_string * name , uint32_t type)"		94161	0					
ANR	94163	CompoundStatement		825:0:24427:25883	94161	0					
ANR	94164	IdentifierDeclStatement	char * compound ;	826:1:24430:24444	94161	0	True				
ANR	94165	IdentifierDecl	* compound		94161	0					
ANR	94166	IdentifierDeclType	char *		94161	0					
ANR	94167	Identifier	compound		94161	1					
ANR	94168	IfStatement	if ( type == ZEND_NAME_RELATIVE )		94161	1					
ANR	94169	Condition	type == ZEND_NAME_RELATIVE	828:5:24452:24477	94161	0	True				
ANR	94170	EqualityExpression	type == ZEND_NAME_RELATIVE		94161	0		==			
ANR	94171	Identifier	type		94161	0					
ANR	94172	Identifier	ZEND_NAME_RELATIVE		94161	1					
ANR	94173	CompoundStatement		4:33:52:52	94161	1					
ANR	94174	ReturnStatement	return zend_prefix_with_ns ( name ) ;	829:2:24484:24516	94161	0	True				
ANR	94175	CallExpression	zend_prefix_with_ns ( name )		94161	0					
ANR	94176	Callee	zend_prefix_with_ns		94161	0					
ANR	94177	Identifier	zend_prefix_with_ns		94161	0					
ANR	94178	ArgumentList	name		94161	1					
ANR	94179	Argument	name		94161	0					
ANR	94180	Identifier	name		94161	0					
ANR	94181	IfStatement	if ( type == ZEND_NAME_FQ || ZSTR_VAL ( name ) [ 0 ] == '\\\\' )		94161	2					
ANR	94182	Condition	type == ZEND_NAME_FQ || ZSTR_VAL ( name ) [ 0 ] == '\\\\'	832:5:24527:24575	94161	0	True				
ANR	94183	OrExpression	type == ZEND_NAME_FQ || ZSTR_VAL ( name ) [ 0 ] == '\\\\'		94161	0		||			
ANR	94184	EqualityExpression	type == ZEND_NAME_FQ		94161	0		==			
ANR	94185	Identifier	type		94161	0					
ANR	94186	Identifier	ZEND_NAME_FQ		94161	1					
ANR	94187	EqualityExpression	ZSTR_VAL ( name ) [ 0 ] == '\\\\'		94161	1		==			
ANR	94188	ArrayIndexing	ZSTR_VAL ( name ) [ 0 ]		94161	0					
ANR	94189	CallExpression	ZSTR_VAL ( name )		94161	0					
ANR	94190	Callee	ZSTR_VAL		94161	0					
ANR	94191	Identifier	ZSTR_VAL		94161	0					
ANR	94192	ArgumentList	name		94161	1					
ANR	94193	Argument	name		94161	0					
ANR	94194	Identifier	name		94161	0					
ANR	94195	PrimaryExpression	0		94161	1					
ANR	94196	PrimaryExpression	'\\\\'		94161	1					
ANR	94197	CompoundStatement		8:56:150:150	94161	1					
ANR	94198	IfStatement	if ( ZSTR_VAL ( name ) [ 0 ] == '\\\\' )		94161	0					
ANR	94199	Condition	ZSTR_VAL ( name ) [ 0 ] == '\\\\'	834:6:24666:24690	94161	0	True				
ANR	94200	EqualityExpression	ZSTR_VAL ( name ) [ 0 ] == '\\\\'		94161	0		==			
ANR	94201	ArrayIndexing	ZSTR_VAL ( name ) [ 0 ]		94161	0					
ANR	94202	CallExpression	ZSTR_VAL ( name )		94161	0					
ANR	94203	Callee	ZSTR_VAL		94161	0					
ANR	94204	Identifier	ZSTR_VAL		94161	0					
ANR	94205	ArgumentList	name		94161	1					
ANR	94206	Argument	name		94161	0					
ANR	94207	Identifier	name		94161	0					
ANR	94208	PrimaryExpression	0		94161	1					
ANR	94209	PrimaryExpression	'\\\\'		94161	1					
ANR	94210	CompoundStatement		10:33:265:265	94161	1					
ANR	94211	ExpressionStatement	"name = zend_string_init ( ZSTR_VAL ( name ) + 1 , ZSTR_LEN ( name ) - 1 , 0 )"	835:3:24698:24764	94161	0	True				
ANR	94212	AssignmentExpression	"name = zend_string_init ( ZSTR_VAL ( name ) + 1 , ZSTR_LEN ( name ) - 1 , 0 )"		94161	0		=			
ANR	94213	Identifier	name		94161	0					
ANR	94214	CallExpression	"zend_string_init ( ZSTR_VAL ( name ) + 1 , ZSTR_LEN ( name ) - 1 , 0 )"		94161	1					
ANR	94215	Callee	zend_string_init		94161	0					
ANR	94216	Identifier	zend_string_init		94161	0					
ANR	94217	ArgumentList	ZSTR_VAL ( name ) + 1		94161	1					
ANR	94218	Argument	ZSTR_VAL ( name ) + 1		94161	0					
ANR	94219	AdditiveExpression	ZSTR_VAL ( name ) + 1		94161	0		+			
ANR	94220	CallExpression	ZSTR_VAL ( name )		94161	0					
ANR	94221	Callee	ZSTR_VAL		94161	0					
ANR	94222	Identifier	ZSTR_VAL		94161	0					
ANR	94223	ArgumentList	name		94161	1					
ANR	94224	Argument	name		94161	0					
ANR	94225	Identifier	name		94161	0					
ANR	94226	PrimaryExpression	1		94161	1					
ANR	94227	Argument	ZSTR_LEN ( name ) - 1		94161	1					
ANR	94228	AdditiveExpression	ZSTR_LEN ( name ) - 1		94161	0		-			
ANR	94229	CallExpression	ZSTR_LEN ( name )		94161	0					
ANR	94230	Callee	ZSTR_LEN		94161	0					
ANR	94231	Identifier	ZSTR_LEN		94161	0					
ANR	94232	ArgumentList	name		94161	1					
ANR	94233	Argument	name		94161	0					
ANR	94234	Identifier	name		94161	0					
ANR	94235	PrimaryExpression	1		94161	1					
ANR	94236	Argument	0		94161	2					
ANR	94237	PrimaryExpression	0		94161	0					
ANR	94238	ElseStatement	else		94161	0					
ANR	94239	CompoundStatement		12:9:347:347	94161	0					
ANR	94240	ExpressionStatement	zend_string_addref ( name )	837:3:24780:24804	94161	0	True				
ANR	94241	CallExpression	zend_string_addref ( name )		94161	0					
ANR	94242	Callee	zend_string_addref		94161	0					
ANR	94243	Identifier	zend_string_addref		94161	0					
ANR	94244	ArgumentList	name		94161	1					
ANR	94245	Argument	name		94161	0					
ANR	94246	Identifier	name		94161	0					
ANR	94247	IfStatement	if ( ZEND_FETCH_CLASS_DEFAULT != zend_get_class_fetch_type ( name ) )		94161	1					
ANR	94248	Condition	ZEND_FETCH_CLASS_DEFAULT != zend_get_class_fetch_type ( name )	840:6:24876:24934	94161	0	True				
ANR	94249	EqualityExpression	ZEND_FETCH_CLASS_DEFAULT != zend_get_class_fetch_type ( name )		94161	0		!=			
ANR	94250	Identifier	ZEND_FETCH_CLASS_DEFAULT		94161	0					
ANR	94251	CallExpression	zend_get_class_fetch_type ( name )		94161	1					
ANR	94252	Callee	zend_get_class_fetch_type		94161	0					
ANR	94253	Identifier	zend_get_class_fetch_type		94161	0					
ANR	94254	ArgumentList	name		94161	1					
ANR	94255	Argument	name		94161	0					
ANR	94256	Identifier	name		94161	0					
ANR	94257	CompoundStatement		16:67:509:509	94161	1					
ANR	94258	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""'\\\\%s' is an invalid class name"" , ZSTR_VAL ( name ) )"	841:3:24942:25029	94161	0	True				
ANR	94259	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""'\\\\%s' is an invalid class name"" , ZSTR_VAL ( name ) )"		94161	0					
ANR	94260	Callee	zend_error_noreturn		94161	0					
ANR	94261	Identifier	zend_error_noreturn		94161	0					
ANR	94262	ArgumentList	E_COMPILE_ERROR		94161	1					
ANR	94263	Argument	E_COMPILE_ERROR		94161	0					
ANR	94264	Identifier	E_COMPILE_ERROR		94161	0					
ANR	94265	Argument	"""'\\\\%s' is an invalid class name"""		94161	1					
ANR	94266	PrimaryExpression	"""'\\\\%s' is an invalid class name"""		94161	0					
ANR	94267	Argument	ZSTR_VAL ( name )		94161	2					
ANR	94268	CallExpression	ZSTR_VAL ( name )		94161	0					
ANR	94269	Callee	ZSTR_VAL		94161	0					
ANR	94270	Identifier	ZSTR_VAL		94161	0					
ANR	94271	ArgumentList	name		94161	1					
ANR	94272	Argument	name		94161	0					
ANR	94273	Identifier	name		94161	0					
ANR	94274	ReturnStatement	return name ;	843:2:25037:25048	94161	2	True				
ANR	94275	Identifier	name		94161	0					
ANR	94276	IfStatement	if ( FC ( imports ) )		94161	3					
ANR	94277	Condition	FC ( imports )	846:5:25059:25069	94161	0	True				
ANR	94278	CallExpression	FC ( imports )		94161	0					
ANR	94279	Callee	FC		94161	0					
ANR	94280	Identifier	FC		94161	0					
ANR	94281	ArgumentList	imports		94161	1					
ANR	94282	Argument	imports		94161	0					
ANR	94283	Identifier	imports		94161	0					
ANR	94284	CompoundStatement		22:18:644:644	94161	1					
ANR	94285	ExpressionStatement	"compound = memchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"	847:2:25076:25131	94161	0	True				
ANR	94286	AssignmentExpression	"compound = memchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		94161	0		=			
ANR	94287	Identifier	compound		94161	0					
ANR	94288	CallExpression	"memchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		94161	1					
ANR	94289	Callee	memchr		94161	0					
ANR	94290	Identifier	memchr		94161	0					
ANR	94291	ArgumentList	ZSTR_VAL ( name )		94161	1					
ANR	94292	Argument	ZSTR_VAL ( name )		94161	0					
ANR	94293	CallExpression	ZSTR_VAL ( name )		94161	0					
ANR	94294	Callee	ZSTR_VAL		94161	0					
ANR	94295	Identifier	ZSTR_VAL		94161	0					
ANR	94296	ArgumentList	name		94161	1					
ANR	94297	Argument	name		94161	0					
ANR	94298	Identifier	name		94161	0					
ANR	94299	Argument	'\\\\'		94161	1					
ANR	94300	PrimaryExpression	'\\\\'		94161	0					
ANR	94301	Argument	ZSTR_LEN ( name )		94161	2					
ANR	94302	CallExpression	ZSTR_LEN ( name )		94161	0					
ANR	94303	Callee	ZSTR_LEN		94161	0					
ANR	94304	Identifier	ZSTR_LEN		94161	0					
ANR	94305	ArgumentList	name		94161	1					
ANR	94306	Argument	name		94161	0					
ANR	94307	Identifier	name		94161	0					
ANR	94308	IfStatement	if ( compound )		94161	1					
ANR	94309	Condition	compound	848:6:25139:25146	94161	0	True				
ANR	94310	Identifier	compound		94161	0					
ANR	94311	CompoundStatement		27:3:844:930	94161	1					
ANR	94312	IdentifierDeclStatement	size_t len = compound - ZSTR_VAL ( name ) ;	850:3:25229:25267	94161	0	True				
ANR	94313	IdentifierDecl	len = compound - ZSTR_VAL ( name )		94161	0					
ANR	94314	IdentifierDeclType	size_t		94161	0					
ANR	94315	Identifier	len		94161	1					
ANR	94316	AssignmentExpression	len = compound - ZSTR_VAL ( name )		94161	2		=			
ANR	94317	Identifier	len		94161	0					
ANR	94318	AdditiveExpression	compound - ZSTR_VAL ( name )		94161	1		-			
ANR	94319	Identifier	compound		94161	0					
ANR	94320	CallExpression	ZSTR_VAL ( name )		94161	1					
ANR	94321	Callee	ZSTR_VAL		94161	0					
ANR	94322	Identifier	ZSTR_VAL		94161	0					
ANR	94323	ArgumentList	name		94161	1					
ANR	94324	Argument	name		94161	0					
ANR	94325	Identifier	name		94161	0					
ANR	94326	IdentifierDeclStatement	"zend_string * import_name = zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , len ) ;"	851:3:25272:25358	94161	1	True				
ANR	94327	IdentifierDecl	"* import_name = zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , len )"		94161	0					
ANR	94328	IdentifierDeclType	zend_string *		94161	0					
ANR	94329	Identifier	import_name		94161	1					
ANR	94330	AssignmentExpression	"* import_name = zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , len )"		94161	2		=			
ANR	94331	Identifier	import_name		94161	0					
ANR	94332	CallExpression	"zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , len )"		94161	1					
ANR	94333	Callee	zend_hash_find_ptr_lc		94161	0					
ANR	94334	Identifier	zend_hash_find_ptr_lc		94161	0					
ANR	94335	ArgumentList	FC ( imports )		94161	1					
ANR	94336	Argument	FC ( imports )		94161	0					
ANR	94337	CallExpression	FC ( imports )		94161	0					
ANR	94338	Callee	FC		94161	0					
ANR	94339	Identifier	FC		94161	0					
ANR	94340	ArgumentList	imports		94161	1					
ANR	94341	Argument	imports		94161	0					
ANR	94342	Identifier	imports		94161	0					
ANR	94343	Argument	ZSTR_VAL ( name )		94161	1					
ANR	94344	CallExpression	ZSTR_VAL ( name )		94161	0					
ANR	94345	Callee	ZSTR_VAL		94161	0					
ANR	94346	Identifier	ZSTR_VAL		94161	0					
ANR	94347	ArgumentList	name		94161	1					
ANR	94348	Argument	name		94161	0					
ANR	94349	Identifier	name		94161	0					
ANR	94350	Argument	len		94161	2					
ANR	94351	Identifier	len		94161	0					
ANR	94352	IfStatement	if ( import_name )		94161	2					
ANR	94353	Condition	import_name	854:7:25368:25378	94161	0	True				
ANR	94354	Identifier	import_name		94161	0					
ANR	94355	CompoundStatement		30:20:953:953	94161	1					
ANR	94356	ReturnStatement	"return zend_concat_names ( ZSTR_VAL ( import_name ) , ZSTR_LEN ( import_name ) , ZSTR_VAL ( name ) + len + 1 , ZSTR_LEN ( name ) - len - 1 ) ;"	855:4:25387:25515	94161	0	True				
ANR	94357	CallExpression	"zend_concat_names ( ZSTR_VAL ( import_name ) , ZSTR_LEN ( import_name ) , ZSTR_VAL ( name ) + len + 1 , ZSTR_LEN ( name ) - len - 1 )"		94161	0					
ANR	94358	Callee	zend_concat_names		94161	0					
ANR	94359	Identifier	zend_concat_names		94161	0					
ANR	94360	ArgumentList	ZSTR_VAL ( import_name )		94161	1					
ANR	94361	Argument	ZSTR_VAL ( import_name )		94161	0					
ANR	94362	CallExpression	ZSTR_VAL ( import_name )		94161	0					
ANR	94363	Callee	ZSTR_VAL		94161	0					
ANR	94364	Identifier	ZSTR_VAL		94161	0					
ANR	94365	ArgumentList	import_name		94161	1					
ANR	94366	Argument	import_name		94161	0					
ANR	94367	Identifier	import_name		94161	0					
ANR	94368	Argument	ZSTR_LEN ( import_name )		94161	1					
ANR	94369	CallExpression	ZSTR_LEN ( import_name )		94161	0					
ANR	94370	Callee	ZSTR_LEN		94161	0					
ANR	94371	Identifier	ZSTR_LEN		94161	0					
ANR	94372	ArgumentList	import_name		94161	1					
ANR	94373	Argument	import_name		94161	0					
ANR	94374	Identifier	import_name		94161	0					
ANR	94375	Argument	ZSTR_VAL ( name ) + len + 1		94161	2					
ANR	94376	AdditiveExpression	ZSTR_VAL ( name ) + len + 1		94161	0		+			
ANR	94377	CallExpression	ZSTR_VAL ( name )		94161	0					
ANR	94378	Callee	ZSTR_VAL		94161	0					
ANR	94379	Identifier	ZSTR_VAL		94161	0					
ANR	94380	ArgumentList	name		94161	1					
ANR	94381	Argument	name		94161	0					
ANR	94382	Identifier	name		94161	0					
ANR	94383	AdditiveExpression	len + 1		94161	1		+			
ANR	94384	Identifier	len		94161	0					
ANR	94385	PrimaryExpression	1		94161	1					
ANR	94386	Argument	ZSTR_LEN ( name ) - len - 1		94161	3					
ANR	94387	AdditiveExpression	ZSTR_LEN ( name ) - len - 1		94161	0		-			
ANR	94388	CallExpression	ZSTR_LEN ( name )		94161	0					
ANR	94389	Callee	ZSTR_LEN		94161	0					
ANR	94390	Identifier	ZSTR_LEN		94161	0					
ANR	94391	ArgumentList	name		94161	1					
ANR	94392	Argument	name		94161	0					
ANR	94393	Identifier	name		94161	0					
ANR	94394	AdditiveExpression	len - 1		94161	1		-			
ANR	94395	Identifier	len		94161	0					
ANR	94396	PrimaryExpression	1		94161	1					
ANR	94397	ElseStatement	else		94161	0					
ANR	94398	CompoundStatement		36:3:1165:1262	94161	0					
ANR	94399	IdentifierDeclStatement	"zend_string * import_name = zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) ;"	860:3:25593:25690	94161	0	True				
ANR	94400	IdentifierDecl	"* import_name = zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		94161	0					
ANR	94401	IdentifierDeclType	zend_string *		94161	0					
ANR	94402	Identifier	import_name		94161	1					
ANR	94403	AssignmentExpression	"* import_name = zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		94161	2		=			
ANR	94404	Identifier	import_name		94161	0					
ANR	94405	CallExpression	"zend_hash_find_ptr_lc ( FC ( imports ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		94161	1					
ANR	94406	Callee	zend_hash_find_ptr_lc		94161	0					
ANR	94407	Identifier	zend_hash_find_ptr_lc		94161	0					
ANR	94408	ArgumentList	FC ( imports )		94161	1					
ANR	94409	Argument	FC ( imports )		94161	0					
ANR	94410	CallExpression	FC ( imports )		94161	0					
ANR	94411	Callee	FC		94161	0					
ANR	94412	Identifier	FC		94161	0					
ANR	94413	ArgumentList	imports		94161	1					
ANR	94414	Argument	imports		94161	0					
ANR	94415	Identifier	imports		94161	0					
ANR	94416	Argument	ZSTR_VAL ( name )		94161	1					
ANR	94417	CallExpression	ZSTR_VAL ( name )		94161	0					
ANR	94418	Callee	ZSTR_VAL		94161	0					
ANR	94419	Identifier	ZSTR_VAL		94161	0					
ANR	94420	ArgumentList	name		94161	1					
ANR	94421	Argument	name		94161	0					
ANR	94422	Identifier	name		94161	0					
ANR	94423	Argument	ZSTR_LEN ( name )		94161	2					
ANR	94424	CallExpression	ZSTR_LEN ( name )		94161	0					
ANR	94425	Callee	ZSTR_LEN		94161	0					
ANR	94426	Identifier	ZSTR_LEN		94161	0					
ANR	94427	ArgumentList	name		94161	1					
ANR	94428	Argument	name		94161	0					
ANR	94429	Identifier	name		94161	0					
ANR	94430	IfStatement	if ( import_name )		94161	1					
ANR	94431	Condition	import_name	863:7:25700:25710	94161	0	True				
ANR	94432	Identifier	import_name		94161	0					
ANR	94433	CompoundStatement		39:20:1285:1285	94161	1					
ANR	94434	ReturnStatement	return zend_string_copy ( import_name ) ;	864:4:25719:25755	94161	0	True				
ANR	94435	CallExpression	zend_string_copy ( import_name )		94161	0					
ANR	94436	Callee	zend_string_copy		94161	0					
ANR	94437	Identifier	zend_string_copy		94161	0					
ANR	94438	ArgumentList	import_name		94161	1					
ANR	94439	Argument	import_name		94161	0					
ANR	94440	Identifier	import_name		94161	0					
ANR	94441	ReturnStatement	return zend_prefix_with_ns ( name ) ;	870:1:25849:25881	94161	4	True				
ANR	94442	CallExpression	zend_prefix_with_ns ( name )		94161	0					
ANR	94443	Callee	zend_prefix_with_ns		94161	0					
ANR	94444	Identifier	zend_prefix_with_ns		94161	0					
ANR	94445	ArgumentList	name		94161	1					
ANR	94446	Argument	name		94161	0					
ANR	94447	Identifier	name		94161	0					
ANR	94448	ReturnType	zend_string *		94161	1					
ANR	94449	Identifier	zend_resolve_class_name		94161	2					
ANR	94450	ParameterList	"zend_string * name , uint32_t type"		94161	3					
ANR	94451	Parameter	zend_string * name	824:37:24383:24399	94161	0	True				
ANR	94452	ParameterType	zend_string *		94161	0					
ANR	94453	Identifier	name		94161	1					
ANR	94454	Parameter	uint32_t type	824:56:24402:24414	94161	1	True				
ANR	94455	ParameterType	uint32_t		94161	0					
ANR	94456	Identifier	type		94161	1					
ANR	94457	CFGEntryNode	ENTRY		94161		True				
ANR	94458	CFGExitNode	EXIT		94161		True				
ANR	94459	Symbol	ZEND_FETCH_CLASS_DEFAULT		94161						
ANR	94460	Symbol	imports		94161						
ANR	94461	Symbol	ZEND_NAME_FQ		94161						
ANR	94462	Symbol	E_COMPILE_ERROR		94161						
ANR	94463	Symbol	import_name		94161						
ANR	94464	Symbol	zend_prefix_with_ns		94161						
ANR	94465	Symbol	zend_string_copy		94161						
ANR	94466	Symbol	type		94161						
ANR	94467	Symbol	compound		94161						
ANR	94468	Symbol	ZSTR_VAL		94161						
ANR	94469	Symbol	zend_string_init		94161						
ANR	94470	Symbol	zend_hash_find_ptr_lc		94161						
ANR	94471	Symbol	zend_concat_names		94161						
ANR	94472	Symbol	len		94161						
ANR	94473	Symbol	ZEND_NAME_RELATIVE		94161						
ANR	94474	Symbol	name		94161						
ANR	94475	Symbol	ZSTR_LEN		94161						
ANR	94476	Symbol	memchr		94161						
ANR	94477	Symbol	FC		94161						
ANR	94478	Symbol	zend_get_class_fetch_type		94161						
ANR	94479	Symbol	* ZSTR_VAL		94161						
ANR	94480	Function	zend_resolve_class_name_ast	874:0:25896:26180							
ANR	94481	FunctionDef	zend_resolve_class_name_ast (zend_ast * ast)		94480	0					
ANR	94482	CompoundStatement		875:0:25962:26180	94480	0					
ANR	94483	IdentifierDeclStatement	zval * class_name = zend_ast_get_zval ( ast ) ;	876:1:25965:26006	94480	0	True				
ANR	94484	IdentifierDecl	* class_name = zend_ast_get_zval ( ast )		94480	0					
ANR	94485	IdentifierDeclType	zval *		94480	0					
ANR	94486	Identifier	class_name		94480	1					
ANR	94487	AssignmentExpression	* class_name = zend_ast_get_zval ( ast )		94480	2		=			
ANR	94488	Identifier	class_name		94480	0					
ANR	94489	CallExpression	zend_ast_get_zval ( ast )		94480	1					
ANR	94490	Callee	zend_ast_get_zval		94480	0					
ANR	94491	Identifier	zend_ast_get_zval		94480	0					
ANR	94492	ArgumentList	ast		94480	1					
ANR	94493	Argument	ast		94480	0					
ANR	94494	Identifier	ast		94480	0					
ANR	94495	IfStatement	if ( Z_TYPE_P ( class_name ) != IS_STRING )		94480	1					
ANR	94496	Condition	Z_TYPE_P ( class_name ) != IS_STRING	877:5:26013:26045	94480	0	True				
ANR	94497	EqualityExpression	Z_TYPE_P ( class_name ) != IS_STRING		94480	0		!=			
ANR	94498	CallExpression	Z_TYPE_P ( class_name )		94480	0					
ANR	94499	Callee	Z_TYPE_P		94480	0					
ANR	94500	Identifier	Z_TYPE_P		94480	0					
ANR	94501	ArgumentList	class_name		94480	1					
ANR	94502	Argument	class_name		94480	0					
ANR	94503	Identifier	class_name		94480	0					
ANR	94504	Identifier	IS_STRING		94480	1					
ANR	94505	CompoundStatement		3:40:85:85	94480	1					
ANR	94506	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Illegal class name"" )"	878:2:26052:26110	94480	0	True				
ANR	94507	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Illegal class name"" )"		94480	0					
ANR	94508	Callee	zend_error_noreturn		94480	0					
ANR	94509	Identifier	zend_error_noreturn		94480	0					
ANR	94510	ArgumentList	E_COMPILE_ERROR		94480	1					
ANR	94511	Argument	E_COMPILE_ERROR		94480	0					
ANR	94512	Identifier	E_COMPILE_ERROR		94480	0					
ANR	94513	Argument	"""Illegal class name"""		94480	1					
ANR	94514	PrimaryExpression	"""Illegal class name"""		94480	0					
ANR	94515	ReturnStatement	"return zend_resolve_class_name ( Z_STR_P ( class_name ) , ast -> attr ) ;"	880:1:26116:26178	94480	2	True				
ANR	94516	CallExpression	"zend_resolve_class_name ( Z_STR_P ( class_name ) , ast -> attr )"		94480	0					
ANR	94517	Callee	zend_resolve_class_name		94480	0					
ANR	94518	Identifier	zend_resolve_class_name		94480	0					
ANR	94519	ArgumentList	Z_STR_P ( class_name )		94480	1					
ANR	94520	Argument	Z_STR_P ( class_name )		94480	0					
ANR	94521	CallExpression	Z_STR_P ( class_name )		94480	0					
ANR	94522	Callee	Z_STR_P		94480	0					
ANR	94523	Identifier	Z_STR_P		94480	0					
ANR	94524	ArgumentList	class_name		94480	1					
ANR	94525	Argument	class_name		94480	0					
ANR	94526	Identifier	class_name		94480	0					
ANR	94527	Argument	ast -> attr		94480	1					
ANR	94528	PtrMemberAccess	ast -> attr		94480	0					
ANR	94529	Identifier	ast		94480	0					
ANR	94530	Identifier	attr		94480	1					
ANR	94531	ReturnType	zend_string *		94480	1					
ANR	94532	Identifier	zend_resolve_class_name_ast		94480	2					
ANR	94533	ParameterList	zend_ast * ast		94480	3					
ANR	94534	Parameter	zend_ast * ast	874:41:25937:25949	94480	0	True				
ANR	94535	ParameterType	zend_ast *		94480	0					
ANR	94536	Identifier	ast		94480	1					
ANR	94537	CFGEntryNode	ENTRY		94480		True				
ANR	94538	CFGExitNode	EXIT		94480		True				
ANR	94539	Symbol	ast -> attr		94480						
ANR	94540	Symbol	ast		94480						
ANR	94541	Symbol	zend_resolve_class_name		94480						
ANR	94542	Symbol	* ast		94480						
ANR	94543	Symbol	E_COMPILE_ERROR		94480						
ANR	94544	Symbol	IS_STRING		94480						
ANR	94545	Symbol	Z_STR_P		94480						
ANR	94546	Symbol	zend_ast_get_zval		94480						
ANR	94547	Symbol	Z_TYPE_P		94480						
ANR	94548	Symbol	class_name		94480						
ANR	94549	Function	label_ptr_dtor	884:0:26193:26288							
ANR	94550	FunctionDef	label_ptr_dtor (zval * zv)		94549	0					
ANR	94551	CompoundStatement		885:0:26240:26288	94549	0					
ANR	94552	ExpressionStatement	"efree_size ( Z_PTR_P ( zv ) , sizeof ( zend_label ) )"	886:1:26243:26286	94549	0	True				
ANR	94553	CallExpression	"efree_size ( Z_PTR_P ( zv ) , sizeof ( zend_label ) )"		94549	0					
ANR	94554	Callee	efree_size		94549	0					
ANR	94555	Identifier	efree_size		94549	0					
ANR	94556	ArgumentList	Z_PTR_P ( zv )		94549	1					
ANR	94557	Argument	Z_PTR_P ( zv )		94549	0					
ANR	94558	CallExpression	Z_PTR_P ( zv )		94549	0					
ANR	94559	Callee	Z_PTR_P		94549	0					
ANR	94560	Identifier	Z_PTR_P		94549	0					
ANR	94561	ArgumentList	zv		94549	1					
ANR	94562	Argument	zv		94549	0					
ANR	94563	Identifier	zv		94549	0					
ANR	94564	Argument	sizeof ( zend_label )		94549	1					
ANR	94565	SizeofExpression	sizeof ( zend_label )		94549	0					
ANR	94566	Sizeof	sizeof		94549	0					
ANR	94567	SizeofOperand	zend_label		94549	1					
ANR	94568	ReturnType	static void		94549	1					
ANR	94569	Identifier	label_ptr_dtor		94549	2					
ANR	94570	ParameterList	zval * zv		94549	3					
ANR	94571	Parameter	zval * zv	884:27:26220:26227	94549	0	True				
ANR	94572	ParameterType	zval *		94549	0					
ANR	94573	Identifier	zv		94549	1					
ANR	94574	CFGEntryNode	ENTRY		94549		True				
ANR	94575	CFGExitNode	EXIT		94549		True				
ANR	94576	Symbol	Z_PTR_P		94549						
ANR	94577	Symbol	zv		94549						
ANR	94578	Function	str_dtor	890:0:26301:26380							
ANR	94579	FunctionDef	str_dtor (zval * zv)		94578	0					
ANR	94580	CompoundStatement		890:42:26343:26380	94578	0					
ANR	94581	ExpressionStatement	zend_string_release ( Z_STR_P ( zv ) )	891:1:26346:26378	94578	0	True				
ANR	94582	CallExpression	zend_string_release ( Z_STR_P ( zv ) )		94578	0					
ANR	94583	Callee	zend_string_release		94578	0					
ANR	94584	Identifier	zend_string_release		94578	0					
ANR	94585	ArgumentList	Z_STR_P ( zv )		94578	1					
ANR	94586	Argument	Z_STR_P ( zv )		94578	0					
ANR	94587	CallExpression	Z_STR_P ( zv )		94578	0					
ANR	94588	Callee	Z_STR_P		94578	0					
ANR	94589	Identifier	Z_STR_P		94578	0					
ANR	94590	ArgumentList	zv		94578	1					
ANR	94591	Argument	zv		94578	0					
ANR	94592	Identifier	zv		94578	0					
ANR	94593	ReturnType	static void		94578	1					
ANR	94594	Identifier	str_dtor		94578	2					
ANR	94595	ParameterList	zval * zv		94578	3					
ANR	94596	Parameter	zval * zv	890:21:26322:26329	94578	0	True				
ANR	94597	ParameterType	zval *		94578	0					
ANR	94598	Identifier	zv		94578	1					
ANR	94599	CFGEntryNode	ENTRY		94578		True				
ANR	94600	CFGExitNode	EXIT		94578		True				
ANR	94601	Symbol	Z_STR_P		94578						
ANR	94602	Symbol	zv		94578						
ANR	94603	DeclStmt									
ANR	94604	Decl							zend_bool	zend_bool ( zend_ast * ast )	zend_is_call
ANR	94605	Function	zend_add_try_element	897:0:26440:26952							
ANR	94606	FunctionDef	zend_add_try_element (uint32_t try_op)		94605	0					
ANR	94607	CompoundStatement		898:0:26504:26952	94605	0					
ANR	94608	IdentifierDeclStatement	zend_op_array * op_array = CG ( active_op_array ) ;	899:1:26507:26552	94605	0	True				
ANR	94609	IdentifierDecl	* op_array = CG ( active_op_array )		94605	0					
ANR	94610	IdentifierDeclType	zend_op_array *		94605	0					
ANR	94611	Identifier	op_array		94605	1					
ANR	94612	AssignmentExpression	* op_array = CG ( active_op_array )		94605	2		=			
ANR	94613	Identifier	op_array		94605	0					
ANR	94614	CallExpression	CG ( active_op_array )		94605	1					
ANR	94615	Callee	CG		94605	0					
ANR	94616	Identifier	CG		94605	0					
ANR	94617	ArgumentList	active_op_array		94605	1					
ANR	94618	Argument	active_op_array		94605	0					
ANR	94619	Identifier	active_op_array		94605	0					
ANR	94620	IdentifierDeclStatement	uint32_t try_catch_offset = op_array -> last_try_catch ++ ;	900:1:26555:26609	94605	1	True				
ANR	94621	IdentifierDecl	try_catch_offset = op_array -> last_try_catch ++		94605	0					
ANR	94622	IdentifierDeclType	uint32_t		94605	0					
ANR	94623	Identifier	try_catch_offset		94605	1					
ANR	94624	AssignmentExpression	try_catch_offset = op_array -> last_try_catch ++		94605	2		=			
ANR	94625	Identifier	try_catch_offset		94605	0					
ANR	94626	PostIncDecOperationExpression	op_array -> last_try_catch ++		94605	1					
ANR	94627	PtrMemberAccess	op_array -> last_try_catch		94605	0					
ANR	94628	Identifier	op_array		94605	0					
ANR	94629	Identifier	last_try_catch		94605	1					
ANR	94630	IncDec	++		94605	1					
ANR	94631	IdentifierDeclStatement	zend_try_catch_element * elem ;	901:1:26612:26640	94605	2	True				
ANR	94632	IdentifierDecl	* elem		94605	0					
ANR	94633	IdentifierDeclType	zend_try_catch_element *		94605	0					
ANR	94634	Identifier	elem		94605	1					
ANR	94635	ExpressionStatement	"op_array -> try_catch_array = safe_erealloc ( op_array -> try_catch_array , sizeof ( zend_try_catch_element ) , op_array -> last_try_catch , 0 )"	903:1:26644:26776	94605	3	True				
ANR	94636	AssignmentExpression	"op_array -> try_catch_array = safe_erealloc ( op_array -> try_catch_array , sizeof ( zend_try_catch_element ) , op_array -> last_try_catch , 0 )"		94605	0		=			
ANR	94637	PtrMemberAccess	op_array -> try_catch_array		94605	0					
ANR	94638	Identifier	op_array		94605	0					
ANR	94639	Identifier	try_catch_array		94605	1					
ANR	94640	CallExpression	"safe_erealloc ( op_array -> try_catch_array , sizeof ( zend_try_catch_element ) , op_array -> last_try_catch , 0 )"		94605	1					
ANR	94641	Callee	safe_erealloc		94605	0					
ANR	94642	Identifier	safe_erealloc		94605	0					
ANR	94643	ArgumentList	op_array -> try_catch_array		94605	1					
ANR	94644	Argument	op_array -> try_catch_array		94605	0					
ANR	94645	PtrMemberAccess	op_array -> try_catch_array		94605	0					
ANR	94646	Identifier	op_array		94605	0					
ANR	94647	Identifier	try_catch_array		94605	1					
ANR	94648	Argument	sizeof ( zend_try_catch_element )		94605	1					
ANR	94649	SizeofExpression	sizeof ( zend_try_catch_element )		94605	0					
ANR	94650	Sizeof	sizeof		94605	0					
ANR	94651	SizeofOperand	zend_try_catch_element		94605	1					
ANR	94652	Argument	op_array -> last_try_catch		94605	2					
ANR	94653	PtrMemberAccess	op_array -> last_try_catch		94605	0					
ANR	94654	Identifier	op_array		94605	0					
ANR	94655	Identifier	last_try_catch		94605	1					
ANR	94656	Argument	0		94605	3					
ANR	94657	PrimaryExpression	0		94605	0					
ANR	94658	ExpressionStatement	elem = & op_array -> try_catch_array [ try_catch_offset ]	906:1:26780:26831	94605	4	True				
ANR	94659	AssignmentExpression	elem = & op_array -> try_catch_array [ try_catch_offset ]		94605	0		=			
ANR	94660	Identifier	elem		94605	0					
ANR	94661	UnaryOperationExpression	& op_array -> try_catch_array [ try_catch_offset ]		94605	1					
ANR	94662	UnaryOperator	&		94605	0					
ANR	94663	ArrayIndexing	op_array -> try_catch_array [ try_catch_offset ]		94605	1					
ANR	94664	PtrMemberAccess	op_array -> try_catch_array		94605	0					
ANR	94665	Identifier	op_array		94605	0					
ANR	94666	Identifier	try_catch_array		94605	1					
ANR	94667	Identifier	try_catch_offset		94605	1					
ANR	94668	ExpressionStatement	elem -> try_op = try_op	907:1:26834:26855	94605	5	True				
ANR	94669	AssignmentExpression	elem -> try_op = try_op		94605	0		=			
ANR	94670	PtrMemberAccess	elem -> try_op		94605	0					
ANR	94671	Identifier	elem		94605	0					
ANR	94672	Identifier	try_op		94605	1					
ANR	94673	Identifier	try_op		94605	1					
ANR	94674	ExpressionStatement	elem -> catch_op = 0	908:1:26858:26876	94605	6	True				
ANR	94675	AssignmentExpression	elem -> catch_op = 0		94605	0		=			
ANR	94676	PtrMemberAccess	elem -> catch_op		94605	0					
ANR	94677	Identifier	elem		94605	0					
ANR	94678	Identifier	catch_op		94605	1					
ANR	94679	PrimaryExpression	0		94605	1					
ANR	94680	ExpressionStatement	elem -> finally_op = 0	909:1:26879:26899	94605	7	True				
ANR	94681	AssignmentExpression	elem -> finally_op = 0		94605	0		=			
ANR	94682	PtrMemberAccess	elem -> finally_op		94605	0					
ANR	94683	Identifier	elem		94605	0					
ANR	94684	Identifier	finally_op		94605	1					
ANR	94685	PrimaryExpression	0		94605	1					
ANR	94686	ExpressionStatement	elem -> finally_end = 0	910:1:26902:26923	94605	8	True				
ANR	94687	AssignmentExpression	elem -> finally_end = 0		94605	0		=			
ANR	94688	PtrMemberAccess	elem -> finally_end		94605	0					
ANR	94689	Identifier	elem		94605	0					
ANR	94690	Identifier	finally_end		94605	1					
ANR	94691	PrimaryExpression	0		94605	1					
ANR	94692	ReturnStatement	return try_catch_offset ;	912:1:26927:26950	94605	9	True				
ANR	94693	Identifier	try_catch_offset		94605	0					
ANR	94694	ReturnType	static uint32_t		94605	1					
ANR	94695	Identifier	zend_add_try_element		94605	2					
ANR	94696	ParameterList	uint32_t try_op		94605	3					
ANR	94697	Parameter	uint32_t try_op	897:37:26477:26491	94605	0	True				
ANR	94698	ParameterType	uint32_t		94605	0					
ANR	94699	Identifier	try_op		94605	1					
ANR	94700	CFGEntryNode	ENTRY		94605		True				
ANR	94701	CFGExitNode	EXIT		94605		True				
ANR	94702	Symbol	elem		94605						
ANR	94703	Symbol	CG		94605						
ANR	94704	Symbol	active_op_array		94605						
ANR	94705	Symbol	safe_erealloc		94605						
ANR	94706	Symbol	try_catch_offset		94605						
ANR	94707	Symbol	elem -> finally_op		94605						
ANR	94708	Symbol	* op_array		94605						
ANR	94709	Symbol	elem -> catch_op		94605						
ANR	94710	Symbol	op_array -> last_try_catch		94605						
ANR	94711	Symbol	try_op		94605						
ANR	94712	Symbol	elem -> try_op		94605						
ANR	94713	Symbol	elem -> finally_end		94605						
ANR	94714	Symbol	op_array -> try_catch_array		94605						
ANR	94715	Symbol	* elem		94605						
ANR	94716	Symbol	op_array		94605						
ANR	94717	Function	function_add_ref	916:0:26965:27544							
ANR	94718	FunctionDef	function_add_ref (zend_function * function)		94717	0					
ANR	94719	CompoundStatement		917:0:27031:27544	94717	0					
ANR	94720	IfStatement	if ( function -> type == ZEND_USER_FUNCTION )		94717	0					
ANR	94721	Condition	function -> type == ZEND_USER_FUNCTION	918:5:27038:27073	94717	0	True				
ANR	94722	EqualityExpression	function -> type == ZEND_USER_FUNCTION		94717	0		==			
ANR	94723	PtrMemberAccess	function -> type		94717	0					
ANR	94724	Identifier	function		94717	0					
ANR	94725	Identifier	type		94717	1					
ANR	94726	Identifier	ZEND_USER_FUNCTION		94717	1					
ANR	94727	CompoundStatement		3:2:48:93	94717	1					
ANR	94728	IdentifierDeclStatement	zend_op_array * op_array = & function -> op_array ;	919:2:27080:27125	94717	0	True				
ANR	94729	IdentifierDecl	* op_array = & function -> op_array		94717	0					
ANR	94730	IdentifierDeclType	zend_op_array *		94717	0					
ANR	94731	Identifier	op_array		94717	1					
ANR	94732	AssignmentExpression	* op_array = & function -> op_array		94717	2		=			
ANR	94733	Identifier	op_array		94717	0					
ANR	94734	UnaryOperationExpression	& function -> op_array		94717	1					
ANR	94735	UnaryOperator	&		94717	0					
ANR	94736	PtrMemberAccess	function -> op_array		94717	1					
ANR	94737	Identifier	function		94717	0					
ANR	94738	Identifier	op_array		94717	1					
ANR	94739	IfStatement	if ( op_array -> refcount )		94717	1					
ANR	94740	Condition	op_array -> refcount	921:6:27134:27151	94717	0	True				
ANR	94741	PtrMemberAccess	op_array -> refcount		94717	0					
ANR	94742	Identifier	op_array		94717	0					
ANR	94743	Identifier	refcount		94717	1					
ANR	94744	CompoundStatement		5:26:122:122	94717	1					
ANR	94745	ExpressionStatement	( * op_array -> refcount ) ++	922:3:27159:27182	94717	0	True				
ANR	94746	PostIncDecOperationExpression	( * op_array -> refcount ) ++		94717	0					
ANR	94747	UnaryOperationExpression	* op_array -> refcount		94717	0					
ANR	94748	UnaryOperator	*		94717	0					
ANR	94749	PtrMemberAccess	op_array -> refcount		94717	1					
ANR	94750	Identifier	op_array		94717	0					
ANR	94751	Identifier	refcount		94717	1					
ANR	94752	IncDec	++		94717	1					
ANR	94753	IfStatement	if ( op_array -> static_variables )		94717	2					
ANR	94754	Condition	op_array -> static_variables	924:6:27194:27219	94717	0	True				
ANR	94755	PtrMemberAccess	op_array -> static_variables		94717	0					
ANR	94756	Identifier	op_array		94717	0					
ANR	94757	Identifier	static_variables		94717	1					
ANR	94758	CompoundStatement		8:34:190:190	94717	1					
ANR	94759	IfStatement	if ( ! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE ) )		94717	0					
ANR	94760	Condition	! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE )	925:7:27231:27290	94717	0	True				
ANR	94761	UnaryOperationExpression	! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE )		94717	0					
ANR	94762	UnaryOperator	!		94717	0					
ANR	94763	BitAndExpression	GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE		94717	1		&			
ANR	94764	CallExpression	GC_FLAGS ( op_array -> static_variables )		94717	0					
ANR	94765	Callee	GC_FLAGS		94717	0					
ANR	94766	Identifier	GC_FLAGS		94717	0					
ANR	94767	ArgumentList	op_array -> static_variables		94717	1					
ANR	94768	Argument	op_array -> static_variables		94717	0					
ANR	94769	PtrMemberAccess	op_array -> static_variables		94717	0					
ANR	94770	Identifier	op_array		94717	0					
ANR	94771	Identifier	static_variables		94717	1					
ANR	94772	Identifier	IS_ARRAY_IMMUTABLE		94717	1					
ANR	94773	CompoundStatement		9:69:261:261	94717	1					
ANR	94774	ExpressionStatement	GC_REFCOUNT ( op_array -> static_variables ) ++	926:4:27299:27340	94717	0	True				
ANR	94775	PostIncDecOperationExpression	GC_REFCOUNT ( op_array -> static_variables ) ++		94717	0					
ANR	94776	CallExpression	GC_REFCOUNT ( op_array -> static_variables )		94717	0					
ANR	94777	Callee	GC_REFCOUNT		94717	0					
ANR	94778	Identifier	GC_REFCOUNT		94717	0					
ANR	94779	ArgumentList	op_array -> static_variables		94717	1					
ANR	94780	Argument	op_array -> static_variables		94717	0					
ANR	94781	PtrMemberAccess	op_array -> static_variables		94717	0					
ANR	94782	Identifier	op_array		94717	0					
ANR	94783	Identifier	static_variables		94717	1					
ANR	94784	IncDec	++		94717	1					
ANR	94785	ExpressionStatement	op_array -> run_time_cache = NULL	929:2:27353:27384	94717	3	True				
ANR	94786	AssignmentExpression	op_array -> run_time_cache = NULL		94717	0		=			
ANR	94787	PtrMemberAccess	op_array -> run_time_cache		94717	0					
ANR	94788	Identifier	op_array		94717	0					
ANR	94789	Identifier	run_time_cache		94717	1					
ANR	94790	Identifier	NULL		94717	1					
ANR	94791	ElseStatement	else		94717	0					
ANR	94792	IfStatement	if ( function -> type == ZEND_INTERNAL_FUNCTION )		94717	0					
ANR	94793	Condition	function -> type == ZEND_INTERNAL_FUNCTION	930:12:27398:27437	94717	0	True				
ANR	94794	EqualityExpression	function -> type == ZEND_INTERNAL_FUNCTION		94717	0		==			
ANR	94795	PtrMemberAccess	function -> type		94717	0					
ANR	94796	Identifier	function		94717	0					
ANR	94797	Identifier	type		94717	1					
ANR	94798	Identifier	ZEND_INTERNAL_FUNCTION		94717	1					
ANR	94799	CompoundStatement		14:54:408:408	94717	1					
ANR	94800	IfStatement	if ( function -> common . function_name )		94717	0					
ANR	94801	Condition	function -> common . function_name	931:6:27448:27477	94717	0	True				
ANR	94802	MemberAccess	function -> common . function_name		94717	0					
ANR	94803	PtrMemberAccess	function -> common		94717	0					
ANR	94804	Identifier	function		94717	0					
ANR	94805	Identifier	common		94717	1					
ANR	94806	Identifier	function_name		94717	1					
ANR	94807	CompoundStatement		15:38:448:448	94717	1					
ANR	94808	ExpressionStatement	zend_string_addref ( function -> common . function_name )	932:3:27485:27535	94717	0	True				
ANR	94809	CallExpression	zend_string_addref ( function -> common . function_name )		94717	0					
ANR	94810	Callee	zend_string_addref		94717	0					
ANR	94811	Identifier	zend_string_addref		94717	0					
ANR	94812	ArgumentList	function -> common . function_name		94717	1					
ANR	94813	Argument	function -> common . function_name		94717	0					
ANR	94814	MemberAccess	function -> common . function_name		94717	0					
ANR	94815	PtrMemberAccess	function -> common		94717	0					
ANR	94816	Identifier	function		94717	0					
ANR	94817	Identifier	common		94717	1					
ANR	94818	Identifier	function_name		94717	1					
ANR	94819	ReturnType	ZEND_API void		94717	1					
ANR	94820	Identifier	function_add_ref		94717	2					
ANR	94821	ParameterList	zend_function * function		94717	3					
ANR	94822	Parameter	zend_function * function	916:31:26996:27018	94717	0	True				
ANR	94823	ParameterType	zend_function *		94717	0					
ANR	94824	Identifier	function		94717	1					
ANR	94825	CFGEntryNode	ENTRY		94717		True				
ANR	94826	CFGExitNode	EXIT		94717		True				
ANR	94827	Symbol	NULL		94717						
ANR	94828	Symbol	function -> common		94717						
ANR	94829	Symbol	* function		94717						
ANR	94830	Symbol	function -> common . function_name		94717						
ANR	94831	Symbol	* op_array -> refcount		94717						
ANR	94832	Symbol	IS_ARRAY_IMMUTABLE		94717						
ANR	94833	Symbol	GC_FLAGS		94717						
ANR	94834	Symbol	op_array -> refcount		94717						
ANR	94835	Symbol	* op_array		94717						
ANR	94836	Symbol	function -> type		94717						
ANR	94837	Symbol	op_array -> run_time_cache		94717						
ANR	94838	Symbol	ZEND_INTERNAL_FUNCTION		94717						
ANR	94839	Symbol	ZEND_USER_FUNCTION		94717						
ANR	94840	Symbol	function		94717						
ANR	94841	Symbol	& function -> op_array		94717						
ANR	94842	Symbol	op_array -> static_variables		94717						
ANR	94843	Symbol	* * op_array		94717						
ANR	94844	Symbol	GC_REFCOUNT		94717						
ANR	94845	Symbol	op_array		94717						
ANR	94846	Function	do_bind_function	938:0:27557:29092							
ANR	94847	FunctionDef	"do_bind_function (const zend_op_array * op_array , const zend_op * opline , HashTable * function_table , zend_bool compile_time)"		94846	0					
ANR	94848	CompoundStatement		939:0:27702:29092	94846	0					
ANR	94849	IdentifierDeclStatement	"zend_function * function , * new_function ;"	940:1:27705:27743	94846	0	True				
ANR	94850	IdentifierDecl	* function		94846	0					
ANR	94851	IdentifierDeclType	zend_function *		94846	0					
ANR	94852	Identifier	function		94846	1					
ANR	94853	IdentifierDecl	* new_function		94846	1					
ANR	94854	IdentifierDeclType	zend_function *		94846	0					
ANR	94855	Identifier	new_function		94846	1					
ANR	94856	IdentifierDeclStatement	"zval * op1 , * op2 ;"	941:1:27746:27761	94846	1	True				
ANR	94857	IdentifierDecl	* op1		94846	0					
ANR	94858	IdentifierDeclType	zval *		94846	0					
ANR	94859	Identifier	op1		94846	1					
ANR	94860	IdentifierDecl	* op2		94846	1					
ANR	94861	IdentifierDeclType	zval *		94846	0					
ANR	94862	Identifier	op2		94846	1					
ANR	94863	IfStatement	if ( compile_time )		94846	2					
ANR	94864	Condition	compile_time	943:5:27769:27780	94846	0	True				
ANR	94865	Identifier	compile_time		94846	0					
ANR	94866	CompoundStatement		5:19:80:80	94846	1					
ANR	94867	ExpressionStatement	"op1 = CT_CONSTANT_EX ( op_array , opline -> op1 . constant )"	944:2:27787:27839	94846	0	True				
ANR	94868	AssignmentExpression	"op1 = CT_CONSTANT_EX ( op_array , opline -> op1 . constant )"		94846	0		=			
ANR	94869	Identifier	op1		94846	0					
ANR	94870	CallExpression	"CT_CONSTANT_EX ( op_array , opline -> op1 . constant )"		94846	1					
ANR	94871	Callee	CT_CONSTANT_EX		94846	0					
ANR	94872	Identifier	CT_CONSTANT_EX		94846	0					
ANR	94873	ArgumentList	op_array		94846	1					
ANR	94874	Argument	op_array		94846	0					
ANR	94875	Identifier	op_array		94846	0					
ANR	94876	Argument	opline -> op1 . constant		94846	1					
ANR	94877	MemberAccess	opline -> op1 . constant		94846	0					
ANR	94878	PtrMemberAccess	opline -> op1		94846	0					
ANR	94879	Identifier	opline		94846	0					
ANR	94880	Identifier	op1		94846	1					
ANR	94881	Identifier	constant		94846	1					
ANR	94882	ExpressionStatement	"op2 = CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"	945:2:27843:27895	94846	1	True				
ANR	94883	AssignmentExpression	"op2 = CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"		94846	0		=			
ANR	94884	Identifier	op2		94846	0					
ANR	94885	CallExpression	"CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"		94846	1					
ANR	94886	Callee	CT_CONSTANT_EX		94846	0					
ANR	94887	Identifier	CT_CONSTANT_EX		94846	0					
ANR	94888	ArgumentList	op_array		94846	1					
ANR	94889	Argument	op_array		94846	0					
ANR	94890	Identifier	op_array		94846	0					
ANR	94891	Argument	opline -> op2 . constant		94846	1					
ANR	94892	MemberAccess	opline -> op2 . constant		94846	0					
ANR	94893	PtrMemberAccess	opline -> op2		94846	0					
ANR	94894	Identifier	opline		94846	0					
ANR	94895	Identifier	op2		94846	1					
ANR	94896	Identifier	constant		94846	1					
ANR	94897	ElseStatement	else		94846	0					
ANR	94898	CompoundStatement		8:8:202:202	94846	0					
ANR	94899	ExpressionStatement	"op1 = RT_CONSTANT ( op_array , opline -> op1 )"	947:2:27909:27949	94846	0	True				
ANR	94900	AssignmentExpression	"op1 = RT_CONSTANT ( op_array , opline -> op1 )"		94846	0		=			
ANR	94901	Identifier	op1		94846	0					
ANR	94902	CallExpression	"RT_CONSTANT ( op_array , opline -> op1 )"		94846	1					
ANR	94903	Callee	RT_CONSTANT		94846	0					
ANR	94904	Identifier	RT_CONSTANT		94846	0					
ANR	94905	ArgumentList	op_array		94846	1					
ANR	94906	Argument	op_array		94846	0					
ANR	94907	Identifier	op_array		94846	0					
ANR	94908	Argument	opline -> op1		94846	1					
ANR	94909	PtrMemberAccess	opline -> op1		94846	0					
ANR	94910	Identifier	opline		94846	0					
ANR	94911	Identifier	op1		94846	1					
ANR	94912	ExpressionStatement	"op2 = RT_CONSTANT ( op_array , opline -> op2 )"	948:2:27953:27993	94846	1	True				
ANR	94913	AssignmentExpression	"op2 = RT_CONSTANT ( op_array , opline -> op2 )"		94846	0		=			
ANR	94914	Identifier	op2		94846	0					
ANR	94915	CallExpression	"RT_CONSTANT ( op_array , opline -> op2 )"		94846	1					
ANR	94916	Callee	RT_CONSTANT		94846	0					
ANR	94917	Identifier	RT_CONSTANT		94846	0					
ANR	94918	ArgumentList	op_array		94846	1					
ANR	94919	Argument	op_array		94846	0					
ANR	94920	Identifier	op_array		94846	0					
ANR	94921	Argument	opline -> op2		94846	1					
ANR	94922	PtrMemberAccess	opline -> op2		94846	0					
ANR	94923	Identifier	opline		94846	0					
ANR	94924	Identifier	op2		94846	1					
ANR	94925	ExpressionStatement	"function = zend_hash_find_ptr ( function_table , Z_STR_P ( op1 ) )"	951:1:28000:28059	94846	3	True				
ANR	94926	AssignmentExpression	"function = zend_hash_find_ptr ( function_table , Z_STR_P ( op1 ) )"		94846	0		=			
ANR	94927	Identifier	function		94846	0					
ANR	94928	CallExpression	"zend_hash_find_ptr ( function_table , Z_STR_P ( op1 ) )"		94846	1					
ANR	94929	Callee	zend_hash_find_ptr		94846	0					
ANR	94930	Identifier	zend_hash_find_ptr		94846	0					
ANR	94931	ArgumentList	function_table		94846	1					
ANR	94932	Argument	function_table		94846	0					
ANR	94933	Identifier	function_table		94846	0					
ANR	94934	Argument	Z_STR_P ( op1 )		94846	1					
ANR	94935	CallExpression	Z_STR_P ( op1 )		94846	0					
ANR	94936	Callee	Z_STR_P		94846	0					
ANR	94937	Identifier	Z_STR_P		94846	0					
ANR	94938	ArgumentList	op1		94846	1					
ANR	94939	Argument	op1		94846	0					
ANR	94940	Identifier	op1		94846	0					
ANR	94941	ExpressionStatement	"new_function = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_op_array ) )"	952:1:28062:28128	94846	4	True				
ANR	94942	AssignmentExpression	"new_function = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_op_array ) )"		94846	0		=			
ANR	94943	Identifier	new_function		94846	0					
ANR	94944	CallExpression	"zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_op_array ) )"		94846	1					
ANR	94945	Callee	zend_arena_alloc		94846	0					
ANR	94946	Identifier	zend_arena_alloc		94846	0					
ANR	94947	ArgumentList	& CG ( arena )		94846	1					
ANR	94948	Argument	& CG ( arena )		94846	0					
ANR	94949	UnaryOperationExpression	& CG ( arena )		94846	0					
ANR	94950	UnaryOperator	&		94846	0					
ANR	94951	CallExpression	CG ( arena )		94846	1					
ANR	94952	Callee	CG		94846	0					
ANR	94953	Identifier	CG		94846	0					
ANR	94954	ArgumentList	arena		94846	1					
ANR	94955	Argument	arena		94846	0					
ANR	94956	Identifier	arena		94846	0					
ANR	94957	Argument	sizeof ( zend_op_array )		94846	1					
ANR	94958	SizeofExpression	sizeof ( zend_op_array )		94846	0					
ANR	94959	Sizeof	sizeof		94846	0					
ANR	94960	SizeofOperand	zend_op_array		94846	1					
ANR	94961	ExpressionStatement	"memcpy ( new_function , function , sizeof ( zend_op_array ) )"	953:1:28131:28184	94846	5	True				
ANR	94962	CallExpression	"memcpy ( new_function , function , sizeof ( zend_op_array ) )"		94846	0					
ANR	94963	Callee	memcpy		94846	0					
ANR	94964	Identifier	memcpy		94846	0					
ANR	94965	ArgumentList	new_function		94846	1					
ANR	94966	Argument	new_function		94846	0					
ANR	94967	Identifier	new_function		94846	0					
ANR	94968	Argument	function		94846	1					
ANR	94969	Identifier	function		94846	0					
ANR	94970	Argument	sizeof ( zend_op_array )		94846	2					
ANR	94971	SizeofExpression	sizeof ( zend_op_array )		94846	0					
ANR	94972	Sizeof	sizeof		94846	0					
ANR	94973	SizeofOperand	zend_op_array		94846	1					
ANR	94974	IfStatement	"if ( zend_hash_add_ptr ( function_table , Z_STR_P ( op2 ) , new_function ) == NULL )"		94846	6					
ANR	94975	Condition	"zend_hash_add_ptr ( function_table , Z_STR_P ( op2 ) , new_function ) == NULL"	954:5:28191:28259	94846	0	True				
ANR	94976	EqualityExpression	"zend_hash_add_ptr ( function_table , Z_STR_P ( op2 ) , new_function ) == NULL"		94846	0		==			
ANR	94977	CallExpression	"zend_hash_add_ptr ( function_table , Z_STR_P ( op2 ) , new_function )"		94846	0					
ANR	94978	Callee	zend_hash_add_ptr		94846	0					
ANR	94979	Identifier	zend_hash_add_ptr		94846	0					
ANR	94980	ArgumentList	function_table		94846	1					
ANR	94981	Argument	function_table		94846	0					
ANR	94982	Identifier	function_table		94846	0					
ANR	94983	Argument	Z_STR_P ( op2 )		94846	1					
ANR	94984	CallExpression	Z_STR_P ( op2 )		94846	0					
ANR	94985	Callee	Z_STR_P		94846	0					
ANR	94986	Identifier	Z_STR_P		94846	0					
ANR	94987	ArgumentList	op2		94846	1					
ANR	94988	Argument	op2		94846	0					
ANR	94989	Identifier	op2		94846	0					
ANR	94990	Argument	new_function		94846	2					
ANR	94991	Identifier	new_function		94846	0					
ANR	94992	Identifier	NULL		94846	1					
ANR	94993	CompoundStatement		18:2:625:652	94846	1					
ANR	94994	IdentifierDeclStatement	int error_level = compile_time ? E_COMPILE_ERROR : E_ERROR ;	955:2:28266:28324	94846	0	True				
ANR	94995	IdentifierDecl	error_level = compile_time ? E_COMPILE_ERROR : E_ERROR		94846	0					
ANR	94996	IdentifierDeclType	int		94846	0					
ANR	94997	Identifier	error_level		94846	1					
ANR	94998	AssignmentExpression	error_level = compile_time ? E_COMPILE_ERROR : E_ERROR		94846	2		=			
ANR	94999	Identifier	error_level		94846	0					
ANR	95000	ConditionalExpression	compile_time ? E_COMPILE_ERROR : E_ERROR		94846	1					
ANR	95001	Condition	compile_time		94846	0					
ANR	95002	Identifier	compile_time		94846	0					
ANR	95003	Identifier	E_COMPILE_ERROR		94846	1					
ANR	95004	Identifier	E_ERROR		94846	2					
ANR	95005	IdentifierDeclStatement	zend_function * old_function ;	956:2:28328:28355	94846	1	True				
ANR	95006	IdentifierDecl	* old_function		94846	0					
ANR	95007	IdentifierDeclType	zend_function *		94846	0					
ANR	95008	Identifier	old_function		94846	1					
ANR	95009	IfStatement	"if ( ( old_function = zend_hash_find_ptr ( function_table , Z_STR_P ( op2 ) ) ) != NULL && old_function -> type == ZEND_USER_FUNCTION && old_function -> op_array . last > 0 )"		94846	2					
ANR	95010	Condition	"( old_function = zend_hash_find_ptr ( function_table , Z_STR_P ( op2 ) ) ) != NULL && old_function -> type == ZEND_USER_FUNCTION && old_function -> op_array . last > 0"	958:6:28364:28521	94846	0	True				
ANR	95011	AndExpression	"( old_function = zend_hash_find_ptr ( function_table , Z_STR_P ( op2 ) ) ) != NULL && old_function -> type == ZEND_USER_FUNCTION && old_function -> op_array . last > 0"		94846	0		&&			
ANR	95012	EqualityExpression	"( old_function = zend_hash_find_ptr ( function_table , Z_STR_P ( op2 ) ) ) != NULL"		94846	0		!=			
ANR	95013	AssignmentExpression	"old_function = zend_hash_find_ptr ( function_table , Z_STR_P ( op2 ) )"		94846	0		=			
ANR	95014	Identifier	old_function		94846	0					
ANR	95015	CallExpression	"zend_hash_find_ptr ( function_table , Z_STR_P ( op2 ) )"		94846	1					
ANR	95016	Callee	zend_hash_find_ptr		94846	0					
ANR	95017	Identifier	zend_hash_find_ptr		94846	0					
ANR	95018	ArgumentList	function_table		94846	1					
ANR	95019	Argument	function_table		94846	0					
ANR	95020	Identifier	function_table		94846	0					
ANR	95021	Argument	Z_STR_P ( op2 )		94846	1					
ANR	95022	CallExpression	Z_STR_P ( op2 )		94846	0					
ANR	95023	Callee	Z_STR_P		94846	0					
ANR	95024	Identifier	Z_STR_P		94846	0					
ANR	95025	ArgumentList	op2		94846	1					
ANR	95026	Argument	op2		94846	0					
ANR	95027	Identifier	op2		94846	0					
ANR	95028	Identifier	NULL		94846	1					
ANR	95029	AndExpression	old_function -> type == ZEND_USER_FUNCTION && old_function -> op_array . last > 0		94846	1		&&			
ANR	95030	EqualityExpression	old_function -> type == ZEND_USER_FUNCTION		94846	0		==			
ANR	95031	PtrMemberAccess	old_function -> type		94846	0					
ANR	95032	Identifier	old_function		94846	0					
ANR	95033	Identifier	type		94846	1					
ANR	95034	Identifier	ZEND_USER_FUNCTION		94846	1					
ANR	95035	RelationalExpression	old_function -> op_array . last > 0		94846	1		>			
ANR	95036	MemberAccess	old_function -> op_array . last		94846	0					
ANR	95037	PtrMemberAccess	old_function -> op_array		94846	0					
ANR	95038	Identifier	old_function		94846	0					
ANR	95039	Identifier	op_array		94846	1					
ANR	95040	Identifier	last		94846	1					
ANR	95041	PrimaryExpression	0		94846	1					
ANR	95042	CompoundStatement		22:39:821:821	94846	1					
ANR	95043	ExpressionStatement	"zend_error_noreturn ( error_level , ""Cannot redeclare %s() (previously declared in %s:%d)"" , ZSTR_VAL ( function -> common . function_name ) , ZSTR_VAL ( old_function -> op_array . filename ) , old_function -> op_array . opcodes [ 0 ] . lineno )"	961:3:28529:28762	94846	0	True				
ANR	95044	CallExpression	"zend_error_noreturn ( error_level , ""Cannot redeclare %s() (previously declared in %s:%d)"" , ZSTR_VAL ( function -> common . function_name ) , ZSTR_VAL ( old_function -> op_array . filename ) , old_function -> op_array . opcodes [ 0 ] . lineno )"		94846	0					
ANR	95045	Callee	zend_error_noreturn		94846	0					
ANR	95046	Identifier	zend_error_noreturn		94846	0					
ANR	95047	ArgumentList	error_level		94846	1					
ANR	95048	Argument	error_level		94846	0					
ANR	95049	Identifier	error_level		94846	0					
ANR	95050	Argument	"""Cannot redeclare %s() (previously declared in %s:%d)"""		94846	1					
ANR	95051	PrimaryExpression	"""Cannot redeclare %s() (previously declared in %s:%d)"""		94846	0					
ANR	95052	Argument	ZSTR_VAL ( function -> common . function_name )		94846	2					
ANR	95053	CallExpression	ZSTR_VAL ( function -> common . function_name )		94846	0					
ANR	95054	Callee	ZSTR_VAL		94846	0					
ANR	95055	Identifier	ZSTR_VAL		94846	0					
ANR	95056	ArgumentList	function -> common . function_name		94846	1					
ANR	95057	Argument	function -> common . function_name		94846	0					
ANR	95058	MemberAccess	function -> common . function_name		94846	0					
ANR	95059	PtrMemberAccess	function -> common		94846	0					
ANR	95060	Identifier	function		94846	0					
ANR	95061	Identifier	common		94846	1					
ANR	95062	Identifier	function_name		94846	1					
ANR	95063	Argument	ZSTR_VAL ( old_function -> op_array . filename )		94846	3					
ANR	95064	CallExpression	ZSTR_VAL ( old_function -> op_array . filename )		94846	0					
ANR	95065	Callee	ZSTR_VAL		94846	0					
ANR	95066	Identifier	ZSTR_VAL		94846	0					
ANR	95067	ArgumentList	old_function -> op_array . filename		94846	1					
ANR	95068	Argument	old_function -> op_array . filename		94846	0					
ANR	95069	MemberAccess	old_function -> op_array . filename		94846	0					
ANR	95070	PtrMemberAccess	old_function -> op_array		94846	0					
ANR	95071	Identifier	old_function		94846	0					
ANR	95072	Identifier	op_array		94846	1					
ANR	95073	Identifier	filename		94846	1					
ANR	95074	Argument	old_function -> op_array . opcodes [ 0 ] . lineno		94846	4					
ANR	95075	MemberAccess	old_function -> op_array . opcodes [ 0 ] . lineno		94846	0					
ANR	95076	ArrayIndexing	old_function -> op_array . opcodes [ 0 ]		94846	0					
ANR	95077	MemberAccess	old_function -> op_array . opcodes		94846	0					
ANR	95078	PtrMemberAccess	old_function -> op_array		94846	0					
ANR	95079	Identifier	old_function		94846	0					
ANR	95080	Identifier	op_array		94846	1					
ANR	95081	Identifier	opcodes		94846	1					
ANR	95082	PrimaryExpression	0		94846	1					
ANR	95083	Identifier	lineno		94846	1					
ANR	95084	ElseStatement	else		94846	0					
ANR	95085	CompoundStatement		27:9:1070:1070	94846	0					
ANR	95086	ExpressionStatement	"zend_error_noreturn ( error_level , ""Cannot redeclare %s()"" , ZSTR_VAL ( function -> common . function_name ) )"	966:3:28778:28877	94846	0	True				
ANR	95087	CallExpression	"zend_error_noreturn ( error_level , ""Cannot redeclare %s()"" , ZSTR_VAL ( function -> common . function_name ) )"		94846	0					
ANR	95088	Callee	zend_error_noreturn		94846	0					
ANR	95089	Identifier	zend_error_noreturn		94846	0					
ANR	95090	ArgumentList	error_level		94846	1					
ANR	95091	Argument	error_level		94846	0					
ANR	95092	Identifier	error_level		94846	0					
ANR	95093	Argument	"""Cannot redeclare %s()"""		94846	1					
ANR	95094	PrimaryExpression	"""Cannot redeclare %s()"""		94846	0					
ANR	95095	Argument	ZSTR_VAL ( function -> common . function_name )		94846	2					
ANR	95096	CallExpression	ZSTR_VAL ( function -> common . function_name )		94846	0					
ANR	95097	Callee	ZSTR_VAL		94846	0					
ANR	95098	Identifier	ZSTR_VAL		94846	0					
ANR	95099	ArgumentList	function -> common . function_name		94846	1					
ANR	95100	Argument	function -> common . function_name		94846	0					
ANR	95101	MemberAccess	function -> common . function_name		94846	0					
ANR	95102	PtrMemberAccess	function -> common		94846	0					
ANR	95103	Identifier	function		94846	0					
ANR	95104	Identifier	common		94846	1					
ANR	95105	Identifier	function_name		94846	1					
ANR	95106	ReturnStatement	return FAILURE ;	968:2:28885:28899	94846	3	True				
ANR	95107	Identifier	FAILURE		94846	0					
ANR	95108	ElseStatement	else		94846	0					
ANR	95109	CompoundStatement		31:8:1206:1206	94846	0					
ANR	95110	IfStatement	if ( function -> op_array . refcount )		94846	0					
ANR	95111	Condition	function -> op_array . refcount	970:6:28917:28943	94846	0	True				
ANR	95112	MemberAccess	function -> op_array . refcount		94846	0					
ANR	95113	PtrMemberAccess	function -> op_array		94846	0					
ANR	95114	Identifier	function		94846	0					
ANR	95115	Identifier	op_array		94846	1					
ANR	95116	Identifier	refcount		94846	1					
ANR	95117	CompoundStatement		32:35:1243:1243	94846	1					
ANR	95118	ExpressionStatement	( * function -> op_array . refcount ) ++	971:3:28951:28983	94846	0	True				
ANR	95119	PostIncDecOperationExpression	( * function -> op_array . refcount ) ++		94846	0					
ANR	95120	UnaryOperationExpression	* function -> op_array . refcount		94846	0					
ANR	95121	UnaryOperator	*		94846	0					
ANR	95122	MemberAccess	function -> op_array . refcount		94846	1					
ANR	95123	PtrMemberAccess	function -> op_array		94846	0					
ANR	95124	Identifier	function		94846	0					
ANR	95125	Identifier	op_array		94846	1					
ANR	95126	Identifier	refcount		94846	1					
ANR	95127	IncDec	++		94846	1					
ANR	95128	ExpressionStatement	function -> op_array . static_variables = NULL	973:2:28991:29033	94846	1	True				
ANR	95129	AssignmentExpression	function -> op_array . static_variables = NULL		94846	0		=			
ANR	95130	MemberAccess	function -> op_array . static_variables		94846	0					
ANR	95131	PtrMemberAccess	function -> op_array		94846	0					
ANR	95132	Identifier	function		94846	0					
ANR	95133	Identifier	op_array		94846	1					
ANR	95134	Identifier	static_variables		94846	1					
ANR	95135	Identifier	NULL		94846	1					
ANR	95136	ReturnStatement	return SUCCESS ;	974:2:29073:29087	94846	2	True				
ANR	95137	Identifier	SUCCESS		94846	0					
ANR	95138	ReturnType	ZEND_API int		94846	1					
ANR	95139	Identifier	do_bind_function		94846	2					
ANR	95140	ParameterList	"const zend_op_array * op_array , const zend_op * opline , HashTable * function_table , zend_bool compile_time"		94846	3					
ANR	95141	Parameter	const zend_op_array * op_array	938:30:27587:27615	94846	0	True				
ANR	95142	ParameterType	const zend_op_array *		94846	0					
ANR	95143	Identifier	op_array		94846	1					
ANR	95144	Parameter	const zend_op * opline	938:61:27618:27638	94846	1	True				
ANR	95145	ParameterType	const zend_op *		94846	0					
ANR	95146	Identifier	opline		94846	1					
ANR	95147	Parameter	HashTable * function_table	938:84:27641:27665	94846	2	True				
ANR	95148	ParameterType	HashTable *		94846	0					
ANR	95149	Identifier	function_table		94846	1					
ANR	95150	Parameter	zend_bool compile_time	938:111:27668:27689	94846	3	True				
ANR	95151	ParameterType	zend_bool		94846	0					
ANR	95152	Identifier	compile_time		94846	1					
ANR	95153	CFGEntryNode	ENTRY		94846		True				
ANR	95154	CFGExitNode	EXIT		94846		True				
ANR	95155	Symbol	compile_time		94846						
ANR	95156	Symbol	E_COMPILE_ERROR		94846						
ANR	95157	Symbol	old_function -> op_array . last		94846						
ANR	95158	Symbol	* old_function -> op_array . opcodes		94846						
ANR	95159	Symbol	arena		94846						
ANR	95160	Symbol	RT_CONSTANT		94846						
ANR	95161	Symbol	* old_function		94846						
ANR	95162	Symbol	function -> op_array . static_variables		94846						
ANR	95163	Symbol	& CG		94846						
ANR	95164	Symbol	opline		94846						
ANR	95165	Symbol	old_function		94846						
ANR	95166	Symbol	ZEND_USER_FUNCTION		94846						
ANR	95167	Symbol	function		94846						
ANR	95168	Symbol	old_function -> op_array . opcodes [ 0 ] . lineno		94846						
ANR	95169	Symbol	zend_hash_find_ptr		94846						
ANR	95170	Symbol	NULL		94846						
ANR	95171	Symbol	zend_arena_alloc		94846						
ANR	95172	Symbol	function -> op_array . refcount		94846						
ANR	95173	Symbol	Z_STR_P		94846						
ANR	95174	Symbol	zend_hash_add_ptr		94846						
ANR	95175	Symbol	function_table		94846						
ANR	95176	Symbol	opline -> op1		94846						
ANR	95177	Symbol	* function -> op_array . refcount		94846						
ANR	95178	Symbol	opline -> op2		94846						
ANR	95179	Symbol	error_level		94846						
ANR	95180	Symbol	old_function -> op_array . filename		94846						
ANR	95181	Symbol	* old_function -> op_array		94846						
ANR	95182	Symbol	function -> common . function_name		94846						
ANR	95183	Symbol	function -> op_array		94846						
ANR	95184	Symbol	opline -> op1 . constant		94846						
ANR	95185	Symbol	* * old_function		94846						
ANR	95186	Symbol	CT_CONSTANT_EX		94846						
ANR	95187	Symbol	old_function -> op_array . opcodes		94846						
ANR	95188	Symbol	* * function		94846						
ANR	95189	Symbol	SUCCESS		94846						
ANR	95190	Symbol	* function -> op_array		94846						
ANR	95191	Symbol	function -> common		94846						
ANR	95192	Symbol	* function		94846						
ANR	95193	Symbol	FAILURE		94846						
ANR	95194	Symbol	ZSTR_VAL		94846						
ANR	95195	Symbol	new_function		94846						
ANR	95196	Symbol	op2		94846						
ANR	95197	Symbol	op1		94846						
ANR	95198	Symbol	E_ERROR		94846						
ANR	95199	Symbol	* opline		94846						
ANR	95200	Symbol	opline -> op2 . constant		94846						
ANR	95201	Symbol	old_function -> type		94846						
ANR	95202	Symbol	old_function -> op_array		94846						
ANR	95203	Symbol	op_array		94846						
ANR	95204	Function	do_bind_class	979:0:29105:30436							
ANR	95205	FunctionDef	"do_bind_class (const zend_op_array * op_array , const zend_op * opline , HashTable * class_table , zend_bool compile_time)"		95204	0					
ANR	95206	CompoundStatement		980:0:29258:30436	95204	0					
ANR	95207	IdentifierDeclStatement	zend_class_entry * ce ;	981:1:29261:29281	95204	0	True				
ANR	95208	IdentifierDecl	* ce		95204	0					
ANR	95209	IdentifierDeclType	zend_class_entry *		95204	0					
ANR	95210	Identifier	ce		95204	1					
ANR	95211	IdentifierDeclStatement	"zval * op1 , * op2 ;"	982:1:29284:29299	95204	1	True				
ANR	95212	IdentifierDecl	* op1		95204	0					
ANR	95213	IdentifierDeclType	zval *		95204	0					
ANR	95214	Identifier	op1		95204	1					
ANR	95215	IdentifierDecl	* op2		95204	1					
ANR	95216	IdentifierDeclType	zval *		95204	0					
ANR	95217	Identifier	op2		95204	1					
ANR	95218	IfStatement	if ( compile_time )		95204	2					
ANR	95219	Condition	compile_time	984:5:29307:29318	95204	0	True				
ANR	95220	Identifier	compile_time		95204	0					
ANR	95221	CompoundStatement		5:19:62:62	95204	1					
ANR	95222	ExpressionStatement	"op1 = CT_CONSTANT_EX ( op_array , opline -> op1 . constant )"	985:2:29325:29377	95204	0	True				
ANR	95223	AssignmentExpression	"op1 = CT_CONSTANT_EX ( op_array , opline -> op1 . constant )"		95204	0		=			
ANR	95224	Identifier	op1		95204	0					
ANR	95225	CallExpression	"CT_CONSTANT_EX ( op_array , opline -> op1 . constant )"		95204	1					
ANR	95226	Callee	CT_CONSTANT_EX		95204	0					
ANR	95227	Identifier	CT_CONSTANT_EX		95204	0					
ANR	95228	ArgumentList	op_array		95204	1					
ANR	95229	Argument	op_array		95204	0					
ANR	95230	Identifier	op_array		95204	0					
ANR	95231	Argument	opline -> op1 . constant		95204	1					
ANR	95232	MemberAccess	opline -> op1 . constant		95204	0					
ANR	95233	PtrMemberAccess	opline -> op1		95204	0					
ANR	95234	Identifier	opline		95204	0					
ANR	95235	Identifier	op1		95204	1					
ANR	95236	Identifier	constant		95204	1					
ANR	95237	ExpressionStatement	"op2 = CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"	986:2:29381:29433	95204	1	True				
ANR	95238	AssignmentExpression	"op2 = CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"		95204	0		=			
ANR	95239	Identifier	op2		95204	0					
ANR	95240	CallExpression	"CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"		95204	1					
ANR	95241	Callee	CT_CONSTANT_EX		95204	0					
ANR	95242	Identifier	CT_CONSTANT_EX		95204	0					
ANR	95243	ArgumentList	op_array		95204	1					
ANR	95244	Argument	op_array		95204	0					
ANR	95245	Identifier	op_array		95204	0					
ANR	95246	Argument	opline -> op2 . constant		95204	1					
ANR	95247	MemberAccess	opline -> op2 . constant		95204	0					
ANR	95248	PtrMemberAccess	opline -> op2		95204	0					
ANR	95249	Identifier	opline		95204	0					
ANR	95250	Identifier	op2		95204	1					
ANR	95251	Identifier	constant		95204	1					
ANR	95252	ElseStatement	else		95204	0					
ANR	95253	CompoundStatement		8:8:184:184	95204	0					
ANR	95254	ExpressionStatement	"op1 = RT_CONSTANT ( op_array , opline -> op1 )"	988:2:29447:29487	95204	0	True				
ANR	95255	AssignmentExpression	"op1 = RT_CONSTANT ( op_array , opline -> op1 )"		95204	0		=			
ANR	95256	Identifier	op1		95204	0					
ANR	95257	CallExpression	"RT_CONSTANT ( op_array , opline -> op1 )"		95204	1					
ANR	95258	Callee	RT_CONSTANT		95204	0					
ANR	95259	Identifier	RT_CONSTANT		95204	0					
ANR	95260	ArgumentList	op_array		95204	1					
ANR	95261	Argument	op_array		95204	0					
ANR	95262	Identifier	op_array		95204	0					
ANR	95263	Argument	opline -> op1		95204	1					
ANR	95264	PtrMemberAccess	opline -> op1		95204	0					
ANR	95265	Identifier	opline		95204	0					
ANR	95266	Identifier	op1		95204	1					
ANR	95267	ExpressionStatement	"op2 = RT_CONSTANT ( op_array , opline -> op2 )"	989:2:29491:29531	95204	1	True				
ANR	95268	AssignmentExpression	"op2 = RT_CONSTANT ( op_array , opline -> op2 )"		95204	0		=			
ANR	95269	Identifier	op2		95204	0					
ANR	95270	CallExpression	"RT_CONSTANT ( op_array , opline -> op2 )"		95204	1					
ANR	95271	Callee	RT_CONSTANT		95204	0					
ANR	95272	Identifier	RT_CONSTANT		95204	0					
ANR	95273	ArgumentList	op_array		95204	1					
ANR	95274	Argument	op_array		95204	0					
ANR	95275	Identifier	op_array		95204	0					
ANR	95276	Argument	opline -> op2		95204	1					
ANR	95277	PtrMemberAccess	opline -> op2		95204	0					
ANR	95278	Identifier	opline		95204	0					
ANR	95279	Identifier	op2		95204	1					
ANR	95280	IfStatement	"if ( ( ce = zend_hash_find_ptr ( class_table , Z_STR_P ( op1 ) ) ) == NULL )"		95204	3					
ANR	95281	Condition	"( ce = zend_hash_find_ptr ( class_table , Z_STR_P ( op1 ) ) ) == NULL"	991:5:29541:29600	95204	0	True				
ANR	95282	EqualityExpression	"( ce = zend_hash_find_ptr ( class_table , Z_STR_P ( op1 ) ) ) == NULL"		95204	0		==			
ANR	95283	AssignmentExpression	"ce = zend_hash_find_ptr ( class_table , Z_STR_P ( op1 ) )"		95204	0		=			
ANR	95284	Identifier	ce		95204	0					
ANR	95285	CallExpression	"zend_hash_find_ptr ( class_table , Z_STR_P ( op1 ) )"		95204	1					
ANR	95286	Callee	zend_hash_find_ptr		95204	0					
ANR	95287	Identifier	zend_hash_find_ptr		95204	0					
ANR	95288	ArgumentList	class_table		95204	1					
ANR	95289	Argument	class_table		95204	0					
ANR	95290	Identifier	class_table		95204	0					
ANR	95291	Argument	Z_STR_P ( op1 )		95204	1					
ANR	95292	CallExpression	Z_STR_P ( op1 )		95204	0					
ANR	95293	Callee	Z_STR_P		95204	0					
ANR	95294	Identifier	Z_STR_P		95204	0					
ANR	95295	ArgumentList	op1		95204	1					
ANR	95296	Argument	op1		95204	0					
ANR	95297	Identifier	op1		95204	0					
ANR	95298	Identifier	NULL		95204	1					
ANR	95299	CompoundStatement		12:67:344:344	95204	1					
ANR	95300	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Internal Zend error - Missing class information for %s"" , Z_STRVAL_P ( op1 ) )"	992:2:29607:29718	95204	0	True				
ANR	95301	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Internal Zend error - Missing class information for %s"" , Z_STRVAL_P ( op1 ) )"		95204	0					
ANR	95302	Callee	zend_error_noreturn		95204	0					
ANR	95303	Identifier	zend_error_noreturn		95204	0					
ANR	95304	ArgumentList	E_COMPILE_ERROR		95204	1					
ANR	95305	Argument	E_COMPILE_ERROR		95204	0					
ANR	95306	Identifier	E_COMPILE_ERROR		95204	0					
ANR	95307	Argument	"""Internal Zend error - Missing class information for %s"""		95204	1					
ANR	95308	PrimaryExpression	"""Internal Zend error - Missing class information for %s"""		95204	0					
ANR	95309	Argument	Z_STRVAL_P ( op1 )		95204	2					
ANR	95310	CallExpression	Z_STRVAL_P ( op1 )		95204	0					
ANR	95311	Callee	Z_STRVAL_P		95204	0					
ANR	95312	Identifier	Z_STRVAL_P		95204	0					
ANR	95313	ArgumentList	op1		95204	1					
ANR	95314	Argument	op1		95204	0					
ANR	95315	Identifier	op1		95204	0					
ANR	95316	ReturnStatement	return NULL ;	993:2:29722:29733	95204	1	True				
ANR	95317	Identifier	NULL		95204	0					
ANR	95318	ExpressionStatement	ce -> refcount ++	995:1:29739:29753	95204	4	True				
ANR	95319	PostIncDecOperationExpression	ce -> refcount ++		95204	0					
ANR	95320	PtrMemberAccess	ce -> refcount		95204	0					
ANR	95321	Identifier	ce		95204	0					
ANR	95322	Identifier	refcount		95204	1					
ANR	95323	IncDec	++		95204	1					
ANR	95324	IfStatement	"if ( zend_hash_add_ptr ( class_table , Z_STR_P ( op2 ) , ce ) == NULL )"		95204	5					
ANR	95325	Condition	"zend_hash_add_ptr ( class_table , Z_STR_P ( op2 ) , ce ) == NULL"	996:5:29760:29815	95204	0	True				
ANR	95326	EqualityExpression	"zend_hash_add_ptr ( class_table , Z_STR_P ( op2 ) , ce ) == NULL"		95204	0		==			
ANR	95327	CallExpression	"zend_hash_add_ptr ( class_table , Z_STR_P ( op2 ) , ce )"		95204	0					
ANR	95328	Callee	zend_hash_add_ptr		95204	0					
ANR	95329	Identifier	zend_hash_add_ptr		95204	0					
ANR	95330	ArgumentList	class_table		95204	1					
ANR	95331	Argument	class_table		95204	0					
ANR	95332	Identifier	class_table		95204	0					
ANR	95333	Argument	Z_STR_P ( op2 )		95204	1					
ANR	95334	CallExpression	Z_STR_P ( op2 )		95204	0					
ANR	95335	Callee	Z_STR_P		95204	0					
ANR	95336	Identifier	Z_STR_P		95204	0					
ANR	95337	ArgumentList	op2		95204	1					
ANR	95338	Argument	op2		95204	0					
ANR	95339	Identifier	op2		95204	0					
ANR	95340	Argument	ce		95204	2					
ANR	95341	Identifier	ce		95204	0					
ANR	95342	Identifier	NULL		95204	1					
ANR	95343	CompoundStatement		17:63:559:559	95204	1					
ANR	95344	ExpressionStatement	ce -> refcount --	997:2:29822:29836	95204	0	True				
ANR	95345	PostIncDecOperationExpression	ce -> refcount --		95204	0					
ANR	95346	PtrMemberAccess	ce -> refcount		95204	0					
ANR	95347	Identifier	ce		95204	0					
ANR	95348	Identifier	refcount		95204	1					
ANR	95349	IncDec	--		95204	1					
ANR	95350	IfStatement	if ( ! compile_time )		95204	1					
ANR	95351	Condition	! compile_time	998:6:29844:29856	95204	0	True				
ANR	95352	UnaryOperationExpression	! compile_time		95204	0					
ANR	95353	UnaryOperator	!		95204	0					
ANR	95354	Identifier	compile_time		95204	1					
ANR	95355	CompoundStatement		19:21:600:600	95204	1					
ANR	95356	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare %s %s, because the name is already in use"" , zend_get_object_type ( ce ) , ZSTR_VAL ( ce -> name ) )"	1004:3:30104:30246	95204	0	True				
ANR	95357	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare %s %s, because the name is already in use"" , zend_get_object_type ( ce ) , ZSTR_VAL ( ce -> name ) )"		95204	0					
ANR	95358	Callee	zend_error_noreturn		95204	0					
ANR	95359	Identifier	zend_error_noreturn		95204	0					
ANR	95360	ArgumentList	E_COMPILE_ERROR		95204	1					
ANR	95361	Argument	E_COMPILE_ERROR		95204	0					
ANR	95362	Identifier	E_COMPILE_ERROR		95204	0					
ANR	95363	Argument	"""Cannot declare %s %s, because the name is already in use"""		95204	1					
ANR	95364	PrimaryExpression	"""Cannot declare %s %s, because the name is already in use"""		95204	0					
ANR	95365	Argument	zend_get_object_type ( ce )		95204	2					
ANR	95366	CallExpression	zend_get_object_type ( ce )		95204	0					
ANR	95367	Callee	zend_get_object_type		95204	0					
ANR	95368	Identifier	zend_get_object_type		95204	0					
ANR	95369	ArgumentList	ce		95204	1					
ANR	95370	Argument	ce		95204	0					
ANR	95371	Identifier	ce		95204	0					
ANR	95372	Argument	ZSTR_VAL ( ce -> name )		95204	3					
ANR	95373	CallExpression	ZSTR_VAL ( ce -> name )		95204	0					
ANR	95374	Callee	ZSTR_VAL		95204	0					
ANR	95375	Identifier	ZSTR_VAL		95204	0					
ANR	95376	ArgumentList	ce -> name		95204	1					
ANR	95377	Argument	ce -> name		95204	0					
ANR	95378	PtrMemberAccess	ce -> name		95204	0					
ANR	95379	Identifier	ce		95204	0					
ANR	95380	Identifier	name		95204	1					
ANR	95381	ReturnStatement	return NULL ;	1006:2:30254:30265	95204	2	True				
ANR	95382	Identifier	NULL		95204	0					
ANR	95383	ElseStatement	else		95204	0					
ANR	95384	CompoundStatement		28:8:1016:1016	95204	0					
ANR	95385	IfStatement	if ( ! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS ) ) )		95204	0					
ANR	95386	Condition	! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS ) )	1008:6:30283:30376	95204	0	True				
ANR	95387	UnaryOperationExpression	! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS ) )		95204	0					
ANR	95388	UnaryOperator	!		95204	0					
ANR	95389	BitAndExpression	ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS )		95204	1		&			
ANR	95390	PtrMemberAccess	ce -> ce_flags		95204	0					
ANR	95391	Identifier	ce		95204	0					
ANR	95392	Identifier	ce_flags		95204	1					
ANR	95393	InclusiveOrExpression	ZEND_ACC_INTERFACE | ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS		95204	1		|			
ANR	95394	Identifier	ZEND_ACC_INTERFACE		95204	0					
ANR	95395	InclusiveOrExpression	ZEND_ACC_IMPLEMENT_INTERFACES | ZEND_ACC_IMPLEMENT_TRAITS		95204	1		|			
ANR	95396	Identifier	ZEND_ACC_IMPLEMENT_INTERFACES		95204	0					
ANR	95397	Identifier	ZEND_ACC_IMPLEMENT_TRAITS		95204	1					
ANR	95398	CompoundStatement		29:102:1120:1120	95204	1					
ANR	95399	ExpressionStatement	zend_verify_abstract_class ( ce )	1009:3:30384:30414	95204	0	True				
ANR	95400	CallExpression	zend_verify_abstract_class ( ce )		95204	0					
ANR	95401	Callee	zend_verify_abstract_class		95204	0					
ANR	95402	Identifier	zend_verify_abstract_class		95204	0					
ANR	95403	ArgumentList	ce		95204	1					
ANR	95404	Argument	ce		95204	0					
ANR	95405	Identifier	ce		95204	0					
ANR	95406	ReturnStatement	return ce ;	1011:2:30422:30431	95204	1	True				
ANR	95407	Identifier	ce		95204	0					
ANR	95408	ReturnType	ZEND_API zend_class_entry *		95204	1					
ANR	95409	Identifier	do_bind_class		95204	2					
ANR	95410	ParameterList	"const zend_op_array * op_array , const zend_op * opline , HashTable * class_table , zend_bool compile_time"		95204	3					
ANR	95411	Parameter	const zend_op_array * op_array	979:41:29146:29174	95204	0	True				
ANR	95412	ParameterType	const zend_op_array *		95204	0					
ANR	95413	Identifier	op_array		95204	1					
ANR	95414	Parameter	const zend_op * opline	979:72:29177:29197	95204	1	True				
ANR	95415	ParameterType	const zend_op *		95204	0					
ANR	95416	Identifier	opline		95204	1					
ANR	95417	Parameter	HashTable * class_table	979:95:29200:29221	95204	2	True				
ANR	95418	ParameterType	HashTable *		95204	0					
ANR	95419	Identifier	class_table		95204	1					
ANR	95420	Parameter	zend_bool compile_time	979:119:29224:29245	95204	3	True				
ANR	95421	ParameterType	zend_bool		95204	0					
ANR	95422	Identifier	compile_time		95204	1					
ANR	95423	CFGEntryNode	ENTRY		95204		True				
ANR	95424	CFGExitNode	EXIT		95204		True				
ANR	95425	Symbol	compile_time		95204						
ANR	95426	Symbol	opline -> op1		95204						
ANR	95427	Symbol	opline -> op2		95204						
ANR	95428	Symbol	zend_get_object_type		95204						
ANR	95429	Symbol	ZEND_ACC_IMPLEMENT_TRAITS		95204						
ANR	95430	Symbol	E_COMPILE_ERROR		95204						
ANR	95431	Symbol	* ce		95204						
ANR	95432	Symbol	RT_CONSTANT		95204						
ANR	95433	Symbol	opline		95204						
ANR	95434	Symbol	opline -> op1 . constant		95204						
ANR	95435	Symbol	ce -> name		95204						
ANR	95436	Symbol	ZEND_ACC_INTERFACE		95204						
ANR	95437	Symbol	class_table		95204						
ANR	95438	Symbol	zend_hash_find_ptr		95204						
ANR	95439	Symbol	CT_CONSTANT_EX		95204						
ANR	95440	Symbol	ce		95204						
ANR	95441	Symbol	NULL		95204						
ANR	95442	Symbol	ce -> refcount		95204						
ANR	95443	Symbol	Z_STRVAL_P		95204						
ANR	95444	Symbol	ZSTR_VAL		95204						
ANR	95445	Symbol	op2		95204						
ANR	95446	Symbol	ZEND_ACC_IMPLEMENT_INTERFACES		95204						
ANR	95447	Symbol	ce -> ce_flags		95204						
ANR	95448	Symbol	op1		95204						
ANR	95449	Symbol	* opline		95204						
ANR	95450	Symbol	opline -> op2 . constant		95204						
ANR	95451	Symbol	Z_STR_P		95204						
ANR	95452	Symbol	zend_hash_add_ptr		95204						
ANR	95453	Symbol	op_array		95204						
ANR	95454	Function	do_bind_inherited_class	1016:0:30449:31946							
ANR	95455	FunctionDef	"do_bind_inherited_class (const zend_op_array * op_array , const zend_op * opline , HashTable * class_table , zend_class_entry * parent_ce , zend_bool compile_time)"		95454	0					
ANR	95456	CompoundStatement		1017:0:30641:31946	95454	0					
ANR	95457	IdentifierDeclStatement	zend_class_entry * ce ;	1018:1:30644:30664	95454	0	True				
ANR	95458	IdentifierDecl	* ce		95454	0					
ANR	95459	IdentifierDeclType	zend_class_entry *		95454	0					
ANR	95460	Identifier	ce		95454	1					
ANR	95461	IdentifierDeclStatement	"zval * op1 , * op2 ;"	1019:1:30667:30682	95454	1	True				
ANR	95462	IdentifierDecl	* op1		95454	0					
ANR	95463	IdentifierDeclType	zval *		95454	0					
ANR	95464	Identifier	op1		95454	1					
ANR	95465	IdentifierDecl	* op2		95454	1					
ANR	95466	IdentifierDeclType	zval *		95454	0					
ANR	95467	Identifier	op2		95454	1					
ANR	95468	IfStatement	if ( compile_time )		95454	2					
ANR	95469	Condition	compile_time	1021:5:30690:30701	95454	0	True				
ANR	95470	Identifier	compile_time		95454	0					
ANR	95471	CompoundStatement		5:19:62:62	95454	1					
ANR	95472	ExpressionStatement	"op1 = CT_CONSTANT_EX ( op_array , opline -> op1 . constant )"	1022:2:30708:30760	95454	0	True				
ANR	95473	AssignmentExpression	"op1 = CT_CONSTANT_EX ( op_array , opline -> op1 . constant )"		95454	0		=			
ANR	95474	Identifier	op1		95454	0					
ANR	95475	CallExpression	"CT_CONSTANT_EX ( op_array , opline -> op1 . constant )"		95454	1					
ANR	95476	Callee	CT_CONSTANT_EX		95454	0					
ANR	95477	Identifier	CT_CONSTANT_EX		95454	0					
ANR	95478	ArgumentList	op_array		95454	1					
ANR	95479	Argument	op_array		95454	0					
ANR	95480	Identifier	op_array		95454	0					
ANR	95481	Argument	opline -> op1 . constant		95454	1					
ANR	95482	MemberAccess	opline -> op1 . constant		95454	0					
ANR	95483	PtrMemberAccess	opline -> op1		95454	0					
ANR	95484	Identifier	opline		95454	0					
ANR	95485	Identifier	op1		95454	1					
ANR	95486	Identifier	constant		95454	1					
ANR	95487	ExpressionStatement	"op2 = CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"	1023:2:30764:30816	95454	1	True				
ANR	95488	AssignmentExpression	"op2 = CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"		95454	0		=			
ANR	95489	Identifier	op2		95454	0					
ANR	95490	CallExpression	"CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"		95454	1					
ANR	95491	Callee	CT_CONSTANT_EX		95454	0					
ANR	95492	Identifier	CT_CONSTANT_EX		95454	0					
ANR	95493	ArgumentList	op_array		95454	1					
ANR	95494	Argument	op_array		95454	0					
ANR	95495	Identifier	op_array		95454	0					
ANR	95496	Argument	opline -> op2 . constant		95454	1					
ANR	95497	MemberAccess	opline -> op2 . constant		95454	0					
ANR	95498	PtrMemberAccess	opline -> op2		95454	0					
ANR	95499	Identifier	opline		95454	0					
ANR	95500	Identifier	op2		95454	1					
ANR	95501	Identifier	constant		95454	1					
ANR	95502	ElseStatement	else		95454	0					
ANR	95503	CompoundStatement		8:8:184:184	95454	0					
ANR	95504	ExpressionStatement	"op1 = RT_CONSTANT ( op_array , opline -> op1 )"	1025:2:30830:30870	95454	0	True				
ANR	95505	AssignmentExpression	"op1 = RT_CONSTANT ( op_array , opline -> op1 )"		95454	0		=			
ANR	95506	Identifier	op1		95454	0					
ANR	95507	CallExpression	"RT_CONSTANT ( op_array , opline -> op1 )"		95454	1					
ANR	95508	Callee	RT_CONSTANT		95454	0					
ANR	95509	Identifier	RT_CONSTANT		95454	0					
ANR	95510	ArgumentList	op_array		95454	1					
ANR	95511	Argument	op_array		95454	0					
ANR	95512	Identifier	op_array		95454	0					
ANR	95513	Argument	opline -> op1		95454	1					
ANR	95514	PtrMemberAccess	opline -> op1		95454	0					
ANR	95515	Identifier	opline		95454	0					
ANR	95516	Identifier	op1		95454	1					
ANR	95517	ExpressionStatement	"op2 = RT_CONSTANT ( op_array , opline -> op2 )"	1026:2:30874:30914	95454	1	True				
ANR	95518	AssignmentExpression	"op2 = RT_CONSTANT ( op_array , opline -> op2 )"		95454	0		=			
ANR	95519	Identifier	op2		95454	0					
ANR	95520	CallExpression	"RT_CONSTANT ( op_array , opline -> op2 )"		95454	1					
ANR	95521	Callee	RT_CONSTANT		95454	0					
ANR	95522	Identifier	RT_CONSTANT		95454	0					
ANR	95523	ArgumentList	op_array		95454	1					
ANR	95524	Argument	op_array		95454	0					
ANR	95525	Identifier	op_array		95454	0					
ANR	95526	Argument	opline -> op2		95454	1					
ANR	95527	PtrMemberAccess	opline -> op2		95454	0					
ANR	95528	Identifier	opline		95454	0					
ANR	95529	Identifier	op2		95454	1					
ANR	95530	ExpressionStatement	"ce = zend_hash_find_ptr ( class_table , Z_STR_P ( op1 ) )"	1029:1:30921:30971	95454	3	True				
ANR	95531	AssignmentExpression	"ce = zend_hash_find_ptr ( class_table , Z_STR_P ( op1 ) )"		95454	0		=			
ANR	95532	Identifier	ce		95454	0					
ANR	95533	CallExpression	"zend_hash_find_ptr ( class_table , Z_STR_P ( op1 ) )"		95454	1					
ANR	95534	Callee	zend_hash_find_ptr		95454	0					
ANR	95535	Identifier	zend_hash_find_ptr		95454	0					
ANR	95536	ArgumentList	class_table		95454	1					
ANR	95537	Argument	class_table		95454	0					
ANR	95538	Identifier	class_table		95454	0					
ANR	95539	Argument	Z_STR_P ( op1 )		95454	1					
ANR	95540	CallExpression	Z_STR_P ( op1 )		95454	0					
ANR	95541	Callee	Z_STR_P		95454	0					
ANR	95542	Identifier	Z_STR_P		95454	0					
ANR	95543	ArgumentList	op1		95454	1					
ANR	95544	Argument	op1		95454	0					
ANR	95545	Identifier	op1		95454	0					
ANR	95546	IfStatement	if ( ! ce )		95454	4					
ANR	95547	Condition	! ce	1031:5:30979:30981	95454	0	True				
ANR	95548	UnaryOperationExpression	! ce		95454	0					
ANR	95549	UnaryOperator	!		95454	0					
ANR	95550	Identifier	ce		95454	1					
ANR	95551	CompoundStatement		15:10:342:342	95454	1					
ANR	95552	IfStatement	if ( ! compile_time )		95454	0					
ANR	95553	Condition	! compile_time	1032:6:30992:31004	95454	0	True				
ANR	95554	UnaryOperationExpression	! compile_time		95454	0					
ANR	95555	UnaryOperator	!		95454	0					
ANR	95556	Identifier	compile_time		95454	1					
ANR	95557	CompoundStatement		16:21:365:365	95454	1					
ANR	95558	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare %s %s, because the name is already in use"" , zend_get_object_type ( Z_OBJCE_P ( op2 ) ) , Z_STRVAL_P ( op2 ) )"	1038:3:31252:31403	95454	0	True				
ANR	95559	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare %s %s, because the name is already in use"" , zend_get_object_type ( Z_OBJCE_P ( op2 ) ) , Z_STRVAL_P ( op2 ) )"		95454	0					
ANR	95560	Callee	zend_error_noreturn		95454	0					
ANR	95561	Identifier	zend_error_noreturn		95454	0					
ANR	95562	ArgumentList	E_COMPILE_ERROR		95454	1					
ANR	95563	Argument	E_COMPILE_ERROR		95454	0					
ANR	95564	Identifier	E_COMPILE_ERROR		95454	0					
ANR	95565	Argument	"""Cannot declare %s %s, because the name is already in use"""		95454	1					
ANR	95566	PrimaryExpression	"""Cannot declare %s %s, because the name is already in use"""		95454	0					
ANR	95567	Argument	zend_get_object_type ( Z_OBJCE_P ( op2 ) )		95454	2					
ANR	95568	CallExpression	zend_get_object_type ( Z_OBJCE_P ( op2 ) )		95454	0					
ANR	95569	Callee	zend_get_object_type		95454	0					
ANR	95570	Identifier	zend_get_object_type		95454	0					
ANR	95571	ArgumentList	Z_OBJCE_P ( op2 )		95454	1					
ANR	95572	Argument	Z_OBJCE_P ( op2 )		95454	0					
ANR	95573	CallExpression	Z_OBJCE_P ( op2 )		95454	0					
ANR	95574	Callee	Z_OBJCE_P		95454	0					
ANR	95575	Identifier	Z_OBJCE_P		95454	0					
ANR	95576	ArgumentList	op2		95454	1					
ANR	95577	Argument	op2		95454	0					
ANR	95578	Identifier	op2		95454	0					
ANR	95579	Argument	Z_STRVAL_P ( op2 )		95454	3					
ANR	95580	CallExpression	Z_STRVAL_P ( op2 )		95454	0					
ANR	95581	Callee	Z_STRVAL_P		95454	0					
ANR	95582	Identifier	Z_STRVAL_P		95454	0					
ANR	95583	ArgumentList	op2		95454	1					
ANR	95584	Argument	op2		95454	0					
ANR	95585	Identifier	op2		95454	0					
ANR	95586	ReturnStatement	return NULL ;	1040:2:31411:31422	95454	1	True				
ANR	95587	Identifier	NULL		95454	0					
ANR	95588	IfStatement	"if ( zend_hash_exists ( class_table , Z_STR_P ( op2 ) ) )"		95454	5					
ANR	95589	Condition	"zend_hash_exists ( class_table , Z_STR_P ( op2 ) )"	1043:5:31433:31475	95454	0	True				
ANR	95590	CallExpression	"zend_hash_exists ( class_table , Z_STR_P ( op2 ) )"		95454	0					
ANR	95591	Callee	zend_hash_exists		95454	0					
ANR	95592	Identifier	zend_hash_exists		95454	0					
ANR	95593	ArgumentList	class_table		95454	1					
ANR	95594	Argument	class_table		95454	0					
ANR	95595	Identifier	class_table		95454	0					
ANR	95596	Argument	Z_STR_P ( op2 )		95454	1					
ANR	95597	CallExpression	Z_STR_P ( op2 )		95454	0					
ANR	95598	Callee	Z_STR_P		95454	0					
ANR	95599	Identifier	Z_STR_P		95454	0					
ANR	95600	ArgumentList	op2		95454	1					
ANR	95601	Argument	op2		95454	0					
ANR	95602	Identifier	op2		95454	0					
ANR	95603	CompoundStatement		27:50:836:836	95454	1					
ANR	95604	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare %s %s, because the name is already in use"" , zend_get_object_type ( ce ) , ZSTR_VAL ( ce -> name ) )"	1044:2:31482:31624	95454	0	True				
ANR	95605	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare %s %s, because the name is already in use"" , zend_get_object_type ( ce ) , ZSTR_VAL ( ce -> name ) )"		95454	0					
ANR	95606	Callee	zend_error_noreturn		95454	0					
ANR	95607	Identifier	zend_error_noreturn		95454	0					
ANR	95608	ArgumentList	E_COMPILE_ERROR		95454	1					
ANR	95609	Argument	E_COMPILE_ERROR		95454	0					
ANR	95610	Identifier	E_COMPILE_ERROR		95454	0					
ANR	95611	Argument	"""Cannot declare %s %s, because the name is already in use"""		95454	1					
ANR	95612	PrimaryExpression	"""Cannot declare %s %s, because the name is already in use"""		95454	0					
ANR	95613	Argument	zend_get_object_type ( ce )		95454	2					
ANR	95614	CallExpression	zend_get_object_type ( ce )		95454	0					
ANR	95615	Callee	zend_get_object_type		95454	0					
ANR	95616	Identifier	zend_get_object_type		95454	0					
ANR	95617	ArgumentList	ce		95454	1					
ANR	95618	Argument	ce		95454	0					
ANR	95619	Identifier	ce		95454	0					
ANR	95620	Argument	ZSTR_VAL ( ce -> name )		95454	3					
ANR	95621	CallExpression	ZSTR_VAL ( ce -> name )		95454	0					
ANR	95622	Callee	ZSTR_VAL		95454	0					
ANR	95623	Identifier	ZSTR_VAL		95454	0					
ANR	95624	ArgumentList	ce -> name		95454	1					
ANR	95625	Argument	ce -> name		95454	0					
ANR	95626	PtrMemberAccess	ce -> name		95454	0					
ANR	95627	Identifier	ce		95454	0					
ANR	95628	Identifier	name		95454	1					
ANR	95629	ExpressionStatement	"zend_do_inheritance ( ce , parent_ce )"	1047:1:31631:31665	95454	6	True				
ANR	95630	CallExpression	"zend_do_inheritance ( ce , parent_ce )"		95454	0					
ANR	95631	Callee	zend_do_inheritance		95454	0					
ANR	95632	Identifier	zend_do_inheritance		95454	0					
ANR	95633	ArgumentList	ce		95454	1					
ANR	95634	Argument	ce		95454	0					
ANR	95635	Identifier	ce		95454	0					
ANR	95636	Argument	parent_ce		95454	1					
ANR	95637	Identifier	parent_ce		95454	0					
ANR	95638	ExpressionStatement	ce -> refcount ++	1049:1:31669:31683	95454	7	True				
ANR	95639	PostIncDecOperationExpression	ce -> refcount ++		95454	0					
ANR	95640	PtrMemberAccess	ce -> refcount		95454	0					
ANR	95641	Identifier	ce		95454	0					
ANR	95642	Identifier	refcount		95454	1					
ANR	95643	IncDec	++		95454	1					
ANR	95644	IfStatement	"if ( zend_hash_add_ptr ( class_table , Z_STR_P ( op2 ) , ce ) == NULL )"		95454	8					
ANR	95645	Condition	"zend_hash_add_ptr ( class_table , Z_STR_P ( op2 ) , ce ) == NULL"	1052:5:31725:31780	95454	0	True				
ANR	95646	EqualityExpression	"zend_hash_add_ptr ( class_table , Z_STR_P ( op2 ) , ce ) == NULL"		95454	0		==			
ANR	95647	CallExpression	"zend_hash_add_ptr ( class_table , Z_STR_P ( op2 ) , ce )"		95454	0					
ANR	95648	Callee	zend_hash_add_ptr		95454	0					
ANR	95649	Identifier	zend_hash_add_ptr		95454	0					
ANR	95650	ArgumentList	class_table		95454	1					
ANR	95651	Argument	class_table		95454	0					
ANR	95652	Identifier	class_table		95454	0					
ANR	95653	Argument	Z_STR_P ( op2 )		95454	1					
ANR	95654	CallExpression	Z_STR_P ( op2 )		95454	0					
ANR	95655	Callee	Z_STR_P		95454	0					
ANR	95656	Identifier	Z_STR_P		95454	0					
ANR	95657	ArgumentList	op2		95454	1					
ANR	95658	Argument	op2		95454	0					
ANR	95659	Identifier	op2		95454	0					
ANR	95660	Argument	ce		95454	2					
ANR	95661	Identifier	ce		95454	0					
ANR	95662	Identifier	NULL		95454	1					
ANR	95663	CompoundStatement		36:63:1141:1141	95454	1					
ANR	95664	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare %s %s, because the name is already in use"" , zend_get_object_type ( ce ) , ZSTR_VAL ( ce -> name ) )"	1053:2:31787:31929	95454	0	True				
ANR	95665	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot declare %s %s, because the name is already in use"" , zend_get_object_type ( ce ) , ZSTR_VAL ( ce -> name ) )"		95454	0					
ANR	95666	Callee	zend_error_noreturn		95454	0					
ANR	95667	Identifier	zend_error_noreturn		95454	0					
ANR	95668	ArgumentList	E_COMPILE_ERROR		95454	1					
ANR	95669	Argument	E_COMPILE_ERROR		95454	0					
ANR	95670	Identifier	E_COMPILE_ERROR		95454	0					
ANR	95671	Argument	"""Cannot declare %s %s, because the name is already in use"""		95454	1					
ANR	95672	PrimaryExpression	"""Cannot declare %s %s, because the name is already in use"""		95454	0					
ANR	95673	Argument	zend_get_object_type ( ce )		95454	2					
ANR	95674	CallExpression	zend_get_object_type ( ce )		95454	0					
ANR	95675	Callee	zend_get_object_type		95454	0					
ANR	95676	Identifier	zend_get_object_type		95454	0					
ANR	95677	ArgumentList	ce		95454	1					
ANR	95678	Argument	ce		95454	0					
ANR	95679	Identifier	ce		95454	0					
ANR	95680	Argument	ZSTR_VAL ( ce -> name )		95454	3					
ANR	95681	CallExpression	ZSTR_VAL ( ce -> name )		95454	0					
ANR	95682	Callee	ZSTR_VAL		95454	0					
ANR	95683	Identifier	ZSTR_VAL		95454	0					
ANR	95684	ArgumentList	ce -> name		95454	1					
ANR	95685	Argument	ce -> name		95454	0					
ANR	95686	PtrMemberAccess	ce -> name		95454	0					
ANR	95687	Identifier	ce		95454	0					
ANR	95688	Identifier	name		95454	1					
ANR	95689	ReturnStatement	return ce ;	1055:1:31935:31944	95454	9	True				
ANR	95690	Identifier	ce		95454	0					
ANR	95691	ReturnType	ZEND_API zend_class_entry *		95454	1					
ANR	95692	Identifier	do_bind_inherited_class		95454	2					
ANR	95693	ParameterList	"const zend_op_array * op_array , const zend_op * opline , HashTable * class_table , zend_class_entry * parent_ce , zend_bool compile_time"		95454	3					
ANR	95694	Parameter	const zend_op_array * op_array	1016:51:30500:30528	95454	0	True				
ANR	95695	ParameterType	const zend_op_array *		95454	0					
ANR	95696	Identifier	op_array		95454	1					
ANR	95697	Parameter	const zend_op * opline	1016:82:30531:30551	95454	1	True				
ANR	95698	ParameterType	const zend_op *		95454	0					
ANR	95699	Identifier	opline		95454	1					
ANR	95700	Parameter	HashTable * class_table	1016:105:30554:30575	95454	2	True				
ANR	95701	ParameterType	HashTable *		95454	0					
ANR	95702	Identifier	class_table		95454	1					
ANR	95703	Parameter	zend_class_entry * parent_ce	1016:129:30578:30604	95454	3	True				
ANR	95704	ParameterType	zend_class_entry *		95454	0					
ANR	95705	Identifier	parent_ce		95454	1					
ANR	95706	Parameter	zend_bool compile_time	1016:158:30607:30628	95454	4	True				
ANR	95707	ParameterType	zend_bool		95454	0					
ANR	95708	Identifier	compile_time		95454	1					
ANR	95709	CFGEntryNode	ENTRY		95454		True				
ANR	95710	CFGExitNode	EXIT		95454		True				
ANR	95711	Symbol	compile_time		95454						
ANR	95712	Symbol	opline -> op1		95454						
ANR	95713	Symbol	opline -> op2		95454						
ANR	95714	Symbol	zend_get_object_type		95454						
ANR	95715	Symbol	E_COMPILE_ERROR		95454						
ANR	95716	Symbol	zend_hash_exists		95454						
ANR	95717	Symbol	* ce		95454						
ANR	95718	Symbol	RT_CONSTANT		95454						
ANR	95719	Symbol	opline		95454						
ANR	95720	Symbol	opline -> op1 . constant		95454						
ANR	95721	Symbol	Z_OBJCE_P		95454						
ANR	95722	Symbol	ce -> name		95454						
ANR	95723	Symbol	class_table		95454						
ANR	95724	Symbol	zend_hash_find_ptr		95454						
ANR	95725	Symbol	CT_CONSTANT_EX		95454						
ANR	95726	Symbol	ce		95454						
ANR	95727	Symbol	NULL		95454						
ANR	95728	Symbol	ce -> refcount		95454						
ANR	95729	Symbol	Z_STRVAL_P		95454						
ANR	95730	Symbol	ZSTR_VAL		95454						
ANR	95731	Symbol	op2		95454						
ANR	95732	Symbol	parent_ce		95454						
ANR	95733	Symbol	op1		95454						
ANR	95734	Symbol	* opline		95454						
ANR	95735	Symbol	opline -> op2 . constant		95454						
ANR	95736	Symbol	Z_STR_P		95454						
ANR	95737	Symbol	zend_hash_add_ptr		95454						
ANR	95738	Symbol	op_array		95454						
ANR	95739	Function	zend_do_early_binding	1059:0:31959:34348							
ANR	95740	FunctionDef	zend_do_early_binding ()		95739	0					
ANR	95741	CompoundStatement		1060:0:32002:34348	95739	0					
ANR	95742	IdentifierDeclStatement	zend_op * opline = & CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] ;	1061:1:32005:32081	95739	0	True				
ANR	95743	IdentifierDecl	* opline = & CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		95739	0					
ANR	95744	IdentifierDeclType	zend_op *		95739	0					
ANR	95745	Identifier	opline		95739	1					
ANR	95746	AssignmentExpression	* opline = & CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		95739	2		=			
ANR	95747	Identifier	opline		95739	0					
ANR	95748	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		95739	1					
ANR	95749	UnaryOperator	&		95739	0					
ANR	95750	ArrayIndexing	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		95739	1					
ANR	95751	PtrMemberAccess	CG ( active_op_array ) -> opcodes		95739	0					
ANR	95752	CallExpression	CG ( active_op_array )		95739	0					
ANR	95753	Callee	CG		95739	0					
ANR	95754	Identifier	CG		95739	0					
ANR	95755	ArgumentList	active_op_array		95739	1					
ANR	95756	Argument	active_op_array		95739	0					
ANR	95757	Identifier	active_op_array		95739	0					
ANR	95758	Identifier	opcodes		95739	1					
ANR	95759	AdditiveExpression	CG ( active_op_array ) -> last - 1		95739	1		-			
ANR	95760	PtrMemberAccess	CG ( active_op_array ) -> last		95739	0					
ANR	95761	CallExpression	CG ( active_op_array )		95739	0					
ANR	95762	Callee	CG		95739	0					
ANR	95763	Identifier	CG		95739	0					
ANR	95764	ArgumentList	active_op_array		95739	1					
ANR	95765	Argument	active_op_array		95739	0					
ANR	95766	Identifier	active_op_array		95739	0					
ANR	95767	Identifier	last		95739	1					
ANR	95768	PrimaryExpression	1		95739	1					
ANR	95769	IdentifierDeclStatement	HashTable * table ;	1062:1:32084:32100	95739	1	True				
ANR	95770	IdentifierDecl	* table		95739	0					
ANR	95771	IdentifierDeclType	HashTable *		95739	0					
ANR	95772	Identifier	table		95739	1					
ANR	95773	WhileStatement	while ( opline -> opcode == ZEND_TICKS && opline > CG ( active_op_array ) -> opcodes )		95739	2					
ANR	95774	Condition	opline -> opcode == ZEND_TICKS && opline > CG ( active_op_array ) -> opcodes	1064:8:32111:32179	95739	0	True				
ANR	95775	AndExpression	opline -> opcode == ZEND_TICKS && opline > CG ( active_op_array ) -> opcodes		95739	0		&&			
ANR	95776	EqualityExpression	opline -> opcode == ZEND_TICKS		95739	0		==			
ANR	95777	PtrMemberAccess	opline -> opcode		95739	0					
ANR	95778	Identifier	opline		95739	0					
ANR	95779	Identifier	opcode		95739	1					
ANR	95780	Identifier	ZEND_TICKS		95739	1					
ANR	95781	RelationalExpression	opline > CG ( active_op_array ) -> opcodes		95739	1		>			
ANR	95782	Identifier	opline		95739	0					
ANR	95783	PtrMemberAccess	CG ( active_op_array ) -> opcodes		95739	1					
ANR	95784	CallExpression	CG ( active_op_array )		95739	0					
ANR	95785	Callee	CG		95739	0					
ANR	95786	Identifier	CG		95739	0					
ANR	95787	ArgumentList	active_op_array		95739	1					
ANR	95788	Argument	active_op_array		95739	0					
ANR	95789	Identifier	active_op_array		95739	0					
ANR	95790	Identifier	opcodes		95739	1					
ANR	95791	CompoundStatement		5:79:179:179	95739	1					
ANR	95792	ExpressionStatement	opline --	1065:2:32186:32194	95739	0	True				
ANR	95793	PostIncDecOperationExpression	opline --		95739	0					
ANR	95794	Identifier	opline		95739	0					
ANR	95795	IncDec	--		95739	1					
ANR	95796	SwitchStatement	switch ( opline -> opcode )		95739	3					
ANR	95797	Condition	opline -> opcode	1068:9:32209:32222	95739	0	True				
ANR	95798	PtrMemberAccess	opline -> opcode		95739	0					
ANR	95799	Identifier	opline		95739	0					
ANR	95800	Identifier	opcode		95739	1					
ANR	95801	CompoundStatement		9:25:222:222	95739	1					
ANR	95802	Label	case ZEND_DECLARE_FUNCTION :	1069:2:32229:32255	95739	0	True				
ANR	95803	Identifier	ZEND_DECLARE_FUNCTION		95739	0					
ANR	95804	IfStatement	"if ( do_bind_function ( CG ( active_op_array ) , opline , CG ( function_table ) , 1 ) == FAILURE )"		95739	1					
ANR	95805	Condition	"do_bind_function ( CG ( active_op_array ) , opline , CG ( function_table ) , 1 ) == FAILURE"	1070:7:32264:32342	95739	0	True				
ANR	95806	EqualityExpression	"do_bind_function ( CG ( active_op_array ) , opline , CG ( function_table ) , 1 ) == FAILURE"		95739	0		==			
ANR	95807	CallExpression	"do_bind_function ( CG ( active_op_array ) , opline , CG ( function_table ) , 1 )"		95739	0					
ANR	95808	Callee	do_bind_function		95739	0					
ANR	95809	Identifier	do_bind_function		95739	0					
ANR	95810	ArgumentList	CG ( active_op_array )		95739	1					
ANR	95811	Argument	CG ( active_op_array )		95739	0					
ANR	95812	CallExpression	CG ( active_op_array )		95739	0					
ANR	95813	Callee	CG		95739	0					
ANR	95814	Identifier	CG		95739	0					
ANR	95815	ArgumentList	active_op_array		95739	1					
ANR	95816	Argument	active_op_array		95739	0					
ANR	95817	Identifier	active_op_array		95739	0					
ANR	95818	Argument	opline		95739	1					
ANR	95819	Identifier	opline		95739	0					
ANR	95820	Argument	CG ( function_table )		95739	2					
ANR	95821	CallExpression	CG ( function_table )		95739	0					
ANR	95822	Callee	CG		95739	0					
ANR	95823	Identifier	CG		95739	0					
ANR	95824	ArgumentList	function_table		95739	1					
ANR	95825	Argument	function_table		95739	0					
ANR	95826	Identifier	function_table		95739	0					
ANR	95827	Argument	1		95739	3					
ANR	95828	PrimaryExpression	1		95739	0					
ANR	95829	Identifier	FAILURE		95739	1					
ANR	95830	CompoundStatement		11:88:342:342	95739	1					
ANR	95831	ReturnStatement	return ;	1071:4:32351:32357	95739	0	True				
ANR	95832	ExpressionStatement	table = CG ( function_table )	1073:3:32367:32393	95739	2	True				
ANR	95833	AssignmentExpression	table = CG ( function_table )		95739	0		=			
ANR	95834	Identifier	table		95739	0					
ANR	95835	CallExpression	CG ( function_table )		95739	1					
ANR	95836	Callee	CG		95739	0					
ANR	95837	Identifier	CG		95739	0					
ANR	95838	ArgumentList	function_table		95739	1					
ANR	95839	Argument	function_table		95739	0					
ANR	95840	Identifier	function_table		95739	0					
ANR	95841	BreakStatement	break ;	1074:3:32398:32403	95739	3	True				
ANR	95842	Label	case ZEND_DECLARE_CLASS :	1075:2:32407:32430	95739	4	True				
ANR	95843	Identifier	ZEND_DECLARE_CLASS		95739	0					
ANR	95844	IfStatement	"if ( do_bind_class ( CG ( active_op_array ) , opline , CG ( class_table ) , 1 ) == NULL )"		95739	5					
ANR	95845	Condition	"do_bind_class ( CG ( active_op_array ) , opline , CG ( class_table ) , 1 ) == NULL"	1076:7:32439:32508	95739	0	True				
ANR	95846	EqualityExpression	"do_bind_class ( CG ( active_op_array ) , opline , CG ( class_table ) , 1 ) == NULL"		95739	0		==			
ANR	95847	CallExpression	"do_bind_class ( CG ( active_op_array ) , opline , CG ( class_table ) , 1 )"		95739	0					
ANR	95848	Callee	do_bind_class		95739	0					
ANR	95849	Identifier	do_bind_class		95739	0					
ANR	95850	ArgumentList	CG ( active_op_array )		95739	1					
ANR	95851	Argument	CG ( active_op_array )		95739	0					
ANR	95852	CallExpression	CG ( active_op_array )		95739	0					
ANR	95853	Callee	CG		95739	0					
ANR	95854	Identifier	CG		95739	0					
ANR	95855	ArgumentList	active_op_array		95739	1					
ANR	95856	Argument	active_op_array		95739	0					
ANR	95857	Identifier	active_op_array		95739	0					
ANR	95858	Argument	opline		95739	1					
ANR	95859	Identifier	opline		95739	0					
ANR	95860	Argument	CG ( class_table )		95739	2					
ANR	95861	CallExpression	CG ( class_table )		95739	0					
ANR	95862	Callee	CG		95739	0					
ANR	95863	Identifier	CG		95739	0					
ANR	95864	ArgumentList	class_table		95739	1					
ANR	95865	Argument	class_table		95739	0					
ANR	95866	Identifier	class_table		95739	0					
ANR	95867	Argument	1		95739	3					
ANR	95868	PrimaryExpression	1		95739	0					
ANR	95869	Identifier	NULL		95739	1					
ANR	95870	CompoundStatement		17:79:508:508	95739	1					
ANR	95871	ReturnStatement	return ;	1077:4:32517:32523	95739	0	True				
ANR	95872	ExpressionStatement	table = CG ( class_table )	1079:3:32533:32556	95739	6	True				
ANR	95873	AssignmentExpression	table = CG ( class_table )		95739	0		=			
ANR	95874	Identifier	table		95739	0					
ANR	95875	CallExpression	CG ( class_table )		95739	1					
ANR	95876	Callee	CG		95739	0					
ANR	95877	Identifier	CG		95739	0					
ANR	95878	ArgumentList	class_table		95739	1					
ANR	95879	Argument	class_table		95739	0					
ANR	95880	Identifier	class_table		95739	0					
ANR	95881	BreakStatement	break ;	1080:3:32561:32566	95739	7	True				
ANR	95882	Label	case ZEND_DECLARE_INHERITED_CLASS :	1081:2:32570:32603	95739	8	True				
ANR	95883	Identifier	ZEND_DECLARE_INHERITED_CLASS		95739	0					
ANR	95884	CompoundStatement		26:4:678:698	95739	9					
ANR	95885	IdentifierDeclStatement	zend_op * fetch_class_opline = opline - 1 ;	1083:4:32614:32652	95739	0	True				
ANR	95886	IdentifierDecl	* fetch_class_opline = opline - 1		95739	0					
ANR	95887	IdentifierDeclType	zend_op *		95739	0					
ANR	95888	Identifier	fetch_class_opline		95739	1					
ANR	95889	AssignmentExpression	* fetch_class_opline = opline - 1		95739	2		=			
ANR	95890	Identifier	fetch_class_opline		95739	0					
ANR	95891	AdditiveExpression	opline - 1		95739	1		-			
ANR	95892	Identifier	opline		95739	0					
ANR	95893	PrimaryExpression	1		95739	1					
ANR	95894	IdentifierDeclStatement	zval * parent_name ;	1084:4:32658:32675	95739	1	True				
ANR	95895	IdentifierDecl	* parent_name		95739	0					
ANR	95896	IdentifierDeclType	zval *		95739	0					
ANR	95897	Identifier	parent_name		95739	1					
ANR	95898	IdentifierDeclStatement	zend_class_entry * ce ;	1085:4:32681:32701	95739	2	True				
ANR	95899	IdentifierDecl	* ce		95739	0					
ANR	95900	IdentifierDeclType	zend_class_entry *		95739	0					
ANR	95901	Identifier	ce		95739	1					
ANR	95902	ExpressionStatement	parent_name = CT_CONSTANT ( fetch_class_opline -> op2 )	1087:4:32708:32758	95739	3	True				
ANR	95903	AssignmentExpression	parent_name = CT_CONSTANT ( fetch_class_opline -> op2 )		95739	0		=			
ANR	95904	Identifier	parent_name		95739	0					
ANR	95905	CallExpression	CT_CONSTANT ( fetch_class_opline -> op2 )		95739	1					
ANR	95906	Callee	CT_CONSTANT		95739	0					
ANR	95907	Identifier	CT_CONSTANT		95739	0					
ANR	95908	ArgumentList	fetch_class_opline -> op2		95739	1					
ANR	95909	Argument	fetch_class_opline -> op2		95739	0					
ANR	95910	PtrMemberAccess	fetch_class_opline -> op2		95739	0					
ANR	95911	Identifier	fetch_class_opline		95739	0					
ANR	95912	Identifier	op2		95739	1					
ANR	95913	IfStatement	"if ( ( ( ce = zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 ) ) == NULL ) || ( ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_CLASSES ) && ( ce -> type == ZEND_INTERNAL_CLASS ) ) )"		95739	4					
ANR	95914	Condition	"( ( ce = zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 ) ) == NULL ) || ( ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_CLASSES ) && ( ce -> type == ZEND_INTERNAL_CLASS ) )"	1088:8:32768:32967	95739	0	True				
ANR	95915	OrExpression	"( ( ce = zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 ) ) == NULL ) || ( ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_CLASSES ) && ( ce -> type == ZEND_INTERNAL_CLASS ) )"		95739	0		||			
ANR	95916	EqualityExpression	"( ce = zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 ) ) == NULL"		95739	0		==			
ANR	95917	AssignmentExpression	"ce = zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 )"		95739	0		=			
ANR	95918	Identifier	ce		95739	0					
ANR	95919	CallExpression	"zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 )"		95739	1					
ANR	95920	Callee	zend_lookup_class_ex		95739	0					
ANR	95921	Identifier	zend_lookup_class_ex		95739	0					
ANR	95922	ArgumentList	Z_STR_P ( parent_name )		95739	1					
ANR	95923	Argument	Z_STR_P ( parent_name )		95739	0					
ANR	95924	CallExpression	Z_STR_P ( parent_name )		95739	0					
ANR	95925	Callee	Z_STR_P		95739	0					
ANR	95926	Identifier	Z_STR_P		95739	0					
ANR	95927	ArgumentList	parent_name		95739	1					
ANR	95928	Argument	parent_name		95739	0					
ANR	95929	Identifier	parent_name		95739	0					
ANR	95930	Argument	parent_name + 1		95739	1					
ANR	95931	AdditiveExpression	parent_name + 1		95739	0		+			
ANR	95932	Identifier	parent_name		95739	0					
ANR	95933	PrimaryExpression	1		95739	1					
ANR	95934	Argument	0		95739	2					
ANR	95935	PrimaryExpression	0		95739	0					
ANR	95936	Identifier	NULL		95739	1					
ANR	95937	AndExpression	( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_CLASSES ) && ( ce -> type == ZEND_INTERNAL_CLASS )		95739	1		&&			
ANR	95938	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_CLASSES		95739	0		&			
ANR	95939	CallExpression	CG ( compiler_options )		95739	0					
ANR	95940	Callee	CG		95739	0					
ANR	95941	Identifier	CG		95739	0					
ANR	95942	ArgumentList	compiler_options		95739	1					
ANR	95943	Argument	compiler_options		95739	0					
ANR	95944	Identifier	compiler_options		95739	0					
ANR	95945	Identifier	ZEND_COMPILE_IGNORE_INTERNAL_CLASSES		95739	1					
ANR	95946	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		95739	1		==			
ANR	95947	PtrMemberAccess	ce -> type		95739	0					
ANR	95948	Identifier	ce		95739	0					
ANR	95949	Identifier	type		95739	1					
ANR	95950	Identifier	ZEND_INTERNAL_CLASS		95739	1					
ANR	95951	CompoundStatement		31:45:967:967	95739	1					
ANR	95952	IfStatement	if ( CG ( compiler_options ) & ZEND_COMPILE_DELAYED_BINDING )		95739	0					
ANR	95953	Condition	CG ( compiler_options ) & ZEND_COMPILE_DELAYED_BINDING	1091:9:32981:33031	95739	0	True				
ANR	95954	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_DELAYED_BINDING		95739	0		&			
ANR	95955	CallExpression	CG ( compiler_options )		95739	0					
ANR	95956	Callee	CG		95739	0					
ANR	95957	Identifier	CG		95739	0					
ANR	95958	ArgumentList	compiler_options		95739	1					
ANR	95959	Argument	compiler_options		95739	0					
ANR	95960	Identifier	compiler_options		95739	0					
ANR	95961	Identifier	ZEND_COMPILE_DELAYED_BINDING		95739	1					
ANR	95962	CompoundStatement		33:6:1039:1097	95739	1					
ANR	95963	IdentifierDeclStatement	uint32_t * opline_num = & CG ( active_op_array ) -> early_binding ;	1092:6:33042:33100	95739	0	True				
ANR	95964	IdentifierDecl	* opline_num = & CG ( active_op_array ) -> early_binding		95739	0					
ANR	95965	IdentifierDeclType	uint32_t *		95739	0					
ANR	95966	Identifier	opline_num		95739	1					
ANR	95967	AssignmentExpression	* opline_num = & CG ( active_op_array ) -> early_binding		95739	2		=			
ANR	95968	Identifier	opline_num		95739	0					
ANR	95969	UnaryOperationExpression	& CG ( active_op_array ) -> early_binding		95739	1					
ANR	95970	UnaryOperator	&		95739	0					
ANR	95971	PtrMemberAccess	CG ( active_op_array ) -> early_binding		95739	1					
ANR	95972	CallExpression	CG ( active_op_array )		95739	0					
ANR	95973	Callee	CG		95739	0					
ANR	95974	Identifier	CG		95739	0					
ANR	95975	ArgumentList	active_op_array		95739	1					
ANR	95976	Argument	active_op_array		95739	0					
ANR	95977	Identifier	active_op_array		95739	0					
ANR	95978	Identifier	early_binding		95739	1					
ANR	95979	WhileStatement	while ( * opline_num != ( uint32_t ) - 1 )		95739	1					
ANR	95980	Condition	* opline_num != ( uint32_t ) - 1	1094:13:33116:33142	95739	0	True				
ANR	95981	EqualityExpression	* opline_num != ( uint32_t ) - 1		95739	0		!=			
ANR	95982	UnaryOperationExpression	* opline_num		95739	0					
ANR	95983	UnaryOperator	*		95739	0					
ANR	95984	Identifier	opline_num		95739	1					
ANR	95985	CastExpression	( uint32_t ) - 1		95739	1					
ANR	95986	CastTarget	uint32_t		95739	0					
ANR	95987	UnaryOperationExpression	- 1		95739	1					
ANR	95988	UnaryOperator	-		95739	0					
ANR	95989	PrimaryExpression	1		95739	1					
ANR	95990	CompoundStatement		35:42:1142:1142	95739	1					
ANR	95991	ExpressionStatement	opline_num = & CG ( active_op_array ) -> opcodes [ * opline_num ] . result . opline_num	1095:7:33154:33227	95739	0	True				
ANR	95992	AssignmentExpression	opline_num = & CG ( active_op_array ) -> opcodes [ * opline_num ] . result . opline_num		95739	0		=			
ANR	95993	Identifier	opline_num		95739	0					
ANR	95994	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ * opline_num ] . result . opline_num		95739	1					
ANR	95995	UnaryOperator	&		95739	0					
ANR	95996	MemberAccess	CG ( active_op_array ) -> opcodes [ * opline_num ] . result . opline_num		95739	1					
ANR	95997	MemberAccess	CG ( active_op_array ) -> opcodes [ * opline_num ] . result		95739	0					
ANR	95998	ArrayIndexing	CG ( active_op_array ) -> opcodes [ * opline_num ]		95739	0					
ANR	95999	PtrMemberAccess	CG ( active_op_array ) -> opcodes		95739	0					
ANR	96000	CallExpression	CG ( active_op_array )		95739	0					
ANR	96001	Callee	CG		95739	0					
ANR	96002	Identifier	CG		95739	0					
ANR	96003	ArgumentList	active_op_array		95739	1					
ANR	96004	Argument	active_op_array		95739	0					
ANR	96005	Identifier	active_op_array		95739	0					
ANR	96006	Identifier	opcodes		95739	1					
ANR	96007	UnaryOperationExpression	* opline_num		95739	1					
ANR	96008	UnaryOperator	*		95739	0					
ANR	96009	Identifier	opline_num		95739	1					
ANR	96010	Identifier	result		95739	1					
ANR	96011	Identifier	opline_num		95739	1					
ANR	96012	ExpressionStatement	* opline_num = opline - CG ( active_op_array ) -> opcodes	1097:6:33243:33294	95739	2	True				
ANR	96013	AssignmentExpression	* opline_num = opline - CG ( active_op_array ) -> opcodes		95739	0		=			
ANR	96014	UnaryOperationExpression	* opline_num		95739	0					
ANR	96015	UnaryOperator	*		95739	0					
ANR	96016	Identifier	opline_num		95739	1					
ANR	96017	AdditiveExpression	opline - CG ( active_op_array ) -> opcodes		95739	1		-			
ANR	96018	Identifier	opline		95739	0					
ANR	96019	PtrMemberAccess	CG ( active_op_array ) -> opcodes		95739	1					
ANR	96020	CallExpression	CG ( active_op_array )		95739	0					
ANR	96021	Callee	CG		95739	0					
ANR	96022	Identifier	CG		95739	0					
ANR	96023	ArgumentList	active_op_array		95739	1					
ANR	96024	Argument	active_op_array		95739	0					
ANR	96025	Identifier	active_op_array		95739	0					
ANR	96026	Identifier	opcodes		95739	1					
ANR	96027	ExpressionStatement	opline -> opcode = ZEND_DECLARE_INHERITED_CLASS_DELAYED	1098:6:33302:33355	95739	3	True				
ANR	96028	AssignmentExpression	opline -> opcode = ZEND_DECLARE_INHERITED_CLASS_DELAYED		95739	0		=			
ANR	96029	PtrMemberAccess	opline -> opcode		95739	0					
ANR	96030	Identifier	opline		95739	0					
ANR	96031	Identifier	opcode		95739	1					
ANR	96032	Identifier	ZEND_DECLARE_INHERITED_CLASS_DELAYED		95739	1					
ANR	96033	ExpressionStatement	opline -> result_type = IS_UNUSED	1099:6:33363:33394	95739	4	True				
ANR	96034	AssignmentExpression	opline -> result_type = IS_UNUSED		95739	0		=			
ANR	96035	PtrMemberAccess	opline -> result_type		95739	0					
ANR	96036	Identifier	opline		95739	0					
ANR	96037	Identifier	result_type		95739	1					
ANR	96038	Identifier	IS_UNUSED		95739	1					
ANR	96039	ExpressionStatement	opline -> result . opline_num = - 1	1100:6:33402:33432	95739	5	True				
ANR	96040	AssignmentExpression	opline -> result . opline_num = - 1		95739	0		=			
ANR	96041	MemberAccess	opline -> result . opline_num		95739	0					
ANR	96042	PtrMemberAccess	opline -> result		95739	0					
ANR	96043	Identifier	opline		95739	0					
ANR	96044	Identifier	result		95739	1					
ANR	96045	Identifier	opline_num		95739	1					
ANR	96046	UnaryOperationExpression	- 1		95739	1					
ANR	96047	UnaryOperator	-		95739	0					
ANR	96048	PrimaryExpression	1		95739	1					
ANR	96049	ReturnStatement	return ;	1102:5:33446:33452	95739	1	True				
ANR	96050	IfStatement	"if ( do_bind_inherited_class ( CG ( active_op_array ) , opline , CG ( class_table ) , ce , 1 ) == NULL )"		95739	5					
ANR	96051	Condition	"do_bind_inherited_class ( CG ( active_op_array ) , opline , CG ( class_table ) , ce , 1 ) == NULL"	1104:8:33468:33551	95739	0	True				
ANR	96052	EqualityExpression	"do_bind_inherited_class ( CG ( active_op_array ) , opline , CG ( class_table ) , ce , 1 ) == NULL"		95739	0		==			
ANR	96053	CallExpression	"do_bind_inherited_class ( CG ( active_op_array ) , opline , CG ( class_table ) , ce , 1 )"		95739	0					
ANR	96054	Callee	do_bind_inherited_class		95739	0					
ANR	96055	Identifier	do_bind_inherited_class		95739	0					
ANR	96056	ArgumentList	CG ( active_op_array )		95739	1					
ANR	96057	Argument	CG ( active_op_array )		95739	0					
ANR	96058	CallExpression	CG ( active_op_array )		95739	0					
ANR	96059	Callee	CG		95739	0					
ANR	96060	Identifier	CG		95739	0					
ANR	96061	ArgumentList	active_op_array		95739	1					
ANR	96062	Argument	active_op_array		95739	0					
ANR	96063	Identifier	active_op_array		95739	0					
ANR	96064	Argument	opline		95739	1					
ANR	96065	Identifier	opline		95739	0					
ANR	96066	Argument	CG ( class_table )		95739	2					
ANR	96067	CallExpression	CG ( class_table )		95739	0					
ANR	96068	Callee	CG		95739	0					
ANR	96069	Identifier	CG		95739	0					
ANR	96070	ArgumentList	class_table		95739	1					
ANR	96071	Argument	class_table		95739	0					
ANR	96072	Identifier	class_table		95739	0					
ANR	96073	Argument	ce		95739	3					
ANR	96074	Identifier	ce		95739	0					
ANR	96075	Argument	1		95739	4					
ANR	96076	PrimaryExpression	1		95739	0					
ANR	96077	Identifier	NULL		95739	1					
ANR	96078	CompoundStatement		45:94:1551:1551	95739	1					
ANR	96079	ReturnStatement	return ;	1105:5:33561:33567	95739	0	True				
ANR	96080	ExpressionStatement	"zend_del_literal ( CG ( active_op_array ) , fetch_class_opline -> op2 . constant )"	1108:4:33631:33702	95739	6	True				
ANR	96081	CallExpression	"zend_del_literal ( CG ( active_op_array ) , fetch_class_opline -> op2 . constant )"		95739	0					
ANR	96082	Callee	zend_del_literal		95739	0					
ANR	96083	Identifier	zend_del_literal		95739	0					
ANR	96084	ArgumentList	CG ( active_op_array )		95739	1					
ANR	96085	Argument	CG ( active_op_array )		95739	0					
ANR	96086	CallExpression	CG ( active_op_array )		95739	0					
ANR	96087	Callee	CG		95739	0					
ANR	96088	Identifier	CG		95739	0					
ANR	96089	ArgumentList	active_op_array		95739	1					
ANR	96090	Argument	active_op_array		95739	0					
ANR	96091	Identifier	active_op_array		95739	0					
ANR	96092	Argument	fetch_class_opline -> op2 . constant		95739	1					
ANR	96093	MemberAccess	fetch_class_opline -> op2 . constant		95739	0					
ANR	96094	PtrMemberAccess	fetch_class_opline -> op2		95739	0					
ANR	96095	Identifier	fetch_class_opline		95739	0					
ANR	96096	Identifier	op2		95739	1					
ANR	96097	Identifier	constant		95739	1					
ANR	96098	ExpressionStatement	MAKE_NOP ( fetch_class_opline )	1109:4:33708:33736	95739	7	True				
ANR	96099	CallExpression	MAKE_NOP ( fetch_class_opline )		95739	0					
ANR	96100	Callee	MAKE_NOP		95739	0					
ANR	96101	Identifier	MAKE_NOP		95739	0					
ANR	96102	ArgumentList	fetch_class_opline		95739	1					
ANR	96103	Argument	fetch_class_opline		95739	0					
ANR	96104	Identifier	fetch_class_opline		95739	0					
ANR	96105	ExpressionStatement	table = CG ( class_table )	1111:4:33743:33766	95739	8	True				
ANR	96106	AssignmentExpression	table = CG ( class_table )		95739	0		=			
ANR	96107	Identifier	table		95739	0					
ANR	96108	CallExpression	CG ( class_table )		95739	1					
ANR	96109	Callee	CG		95739	0					
ANR	96110	Identifier	CG		95739	0					
ANR	96111	ArgumentList	class_table		95739	1					
ANR	96112	Argument	class_table		95739	0					
ANR	96113	Identifier	class_table		95739	0					
ANR	96114	BreakStatement	break ;	1112:4:33772:33777	95739	9	True				
ANR	96115	Label	case ZEND_VERIFY_ABSTRACT_CLASS :	1114:2:33786:33817	95739	10	True				
ANR	96116	Identifier	ZEND_VERIFY_ABSTRACT_CLASS		95739	0					
ANR	96117	Label	case ZEND_ADD_INTERFACE :	1115:2:33821:33844	95739	11	True				
ANR	96118	Identifier	ZEND_ADD_INTERFACE		95739	0					
ANR	96119	Label	case ZEND_ADD_TRAIT :	1116:2:33848:33867	95739	12	True				
ANR	96120	Identifier	ZEND_ADD_TRAIT		95739	0					
ANR	96121	Label	case ZEND_BIND_TRAITS :	1117:2:33871:33892	95739	13	True				
ANR	96122	Identifier	ZEND_BIND_TRAITS		95739	0					
ANR	96123	ReturnStatement	return ;	1120:3:34048:34054	95739	14	True				
ANR	96124	Label	default :	1121:2:34058:34065	95739	15	True				
ANR	96125	Identifier	default		95739	0					
ANR	96126	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Invalid binding type"" )"	1122:3:34070:34130	95739	16	True				
ANR	96127	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Invalid binding type"" )"		95739	0					
ANR	96128	Callee	zend_error_noreturn		95739	0					
ANR	96129	Identifier	zend_error_noreturn		95739	0					
ANR	96130	ArgumentList	E_COMPILE_ERROR		95739	1					
ANR	96131	Argument	E_COMPILE_ERROR		95739	0					
ANR	96132	Identifier	E_COMPILE_ERROR		95739	0					
ANR	96133	Argument	"""Invalid binding type"""		95739	1					
ANR	96134	PrimaryExpression	"""Invalid binding type"""		95739	0					
ANR	96135	ReturnStatement	return ;	1123:3:34135:34141	95739	17	True				
ANR	96136	ExpressionStatement	"zend_hash_del ( table , Z_STR_P ( CT_CONSTANT ( opline -> op1 ) ) )"	1126:1:34148:34203	95739	4	True				
ANR	96137	CallExpression	"zend_hash_del ( table , Z_STR_P ( CT_CONSTANT ( opline -> op1 ) ) )"		95739	0					
ANR	96138	Callee	zend_hash_del		95739	0					
ANR	96139	Identifier	zend_hash_del		95739	0					
ANR	96140	ArgumentList	table		95739	1					
ANR	96141	Argument	table		95739	0					
ANR	96142	Identifier	table		95739	0					
ANR	96143	Argument	Z_STR_P ( CT_CONSTANT ( opline -> op1 ) )		95739	1					
ANR	96144	CallExpression	Z_STR_P ( CT_CONSTANT ( opline -> op1 ) )		95739	0					
ANR	96145	Callee	Z_STR_P		95739	0					
ANR	96146	Identifier	Z_STR_P		95739	0					
ANR	96147	ArgumentList	CT_CONSTANT ( opline -> op1 )		95739	1					
ANR	96148	Argument	CT_CONSTANT ( opline -> op1 )		95739	0					
ANR	96149	CallExpression	CT_CONSTANT ( opline -> op1 )		95739	0					
ANR	96150	Callee	CT_CONSTANT		95739	0					
ANR	96151	Identifier	CT_CONSTANT		95739	0					
ANR	96152	ArgumentList	opline -> op1		95739	1					
ANR	96153	Argument	opline -> op1		95739	0					
ANR	96154	PtrMemberAccess	opline -> op1		95739	0					
ANR	96155	Identifier	opline		95739	0					
ANR	96156	Identifier	op1		95739	1					
ANR	96157	ExpressionStatement	"zend_del_literal ( CG ( active_op_array ) , opline -> op1 . constant )"	1127:1:34206:34265	95739	5	True				
ANR	96158	CallExpression	"zend_del_literal ( CG ( active_op_array ) , opline -> op1 . constant )"		95739	0					
ANR	96159	Callee	zend_del_literal		95739	0					
ANR	96160	Identifier	zend_del_literal		95739	0					
ANR	96161	ArgumentList	CG ( active_op_array )		95739	1					
ANR	96162	Argument	CG ( active_op_array )		95739	0					
ANR	96163	CallExpression	CG ( active_op_array )		95739	0					
ANR	96164	Callee	CG		95739	0					
ANR	96165	Identifier	CG		95739	0					
ANR	96166	ArgumentList	active_op_array		95739	1					
ANR	96167	Argument	active_op_array		95739	0					
ANR	96168	Identifier	active_op_array		95739	0					
ANR	96169	Argument	opline -> op1 . constant		95739	1					
ANR	96170	MemberAccess	opline -> op1 . constant		95739	0					
ANR	96171	PtrMemberAccess	opline -> op1		95739	0					
ANR	96172	Identifier	opline		95739	0					
ANR	96173	Identifier	op1		95739	1					
ANR	96174	Identifier	constant		95739	1					
ANR	96175	ExpressionStatement	"zend_del_literal ( CG ( active_op_array ) , opline -> op2 . constant )"	1128:1:34268:34327	95739	6	True				
ANR	96176	CallExpression	"zend_del_literal ( CG ( active_op_array ) , opline -> op2 . constant )"		95739	0					
ANR	96177	Callee	zend_del_literal		95739	0					
ANR	96178	Identifier	zend_del_literal		95739	0					
ANR	96179	ArgumentList	CG ( active_op_array )		95739	1					
ANR	96180	Argument	CG ( active_op_array )		95739	0					
ANR	96181	CallExpression	CG ( active_op_array )		95739	0					
ANR	96182	Callee	CG		95739	0					
ANR	96183	Identifier	CG		95739	0					
ANR	96184	ArgumentList	active_op_array		95739	1					
ANR	96185	Argument	active_op_array		95739	0					
ANR	96186	Identifier	active_op_array		95739	0					
ANR	96187	Argument	opline -> op2 . constant		95739	1					
ANR	96188	MemberAccess	opline -> op2 . constant		95739	0					
ANR	96189	PtrMemberAccess	opline -> op2		95739	0					
ANR	96190	Identifier	opline		95739	0					
ANR	96191	Identifier	op2		95739	1					
ANR	96192	Identifier	constant		95739	1					
ANR	96193	ExpressionStatement	MAKE_NOP ( opline )	1129:1:34330:34346	95739	7	True				
ANR	96194	CallExpression	MAKE_NOP ( opline )		95739	0					
ANR	96195	Callee	MAKE_NOP		95739	0					
ANR	96196	Identifier	MAKE_NOP		95739	0					
ANR	96197	ArgumentList	opline		95739	1					
ANR	96198	Argument	opline		95739	0					
ANR	96199	Identifier	opline		95739	0					
ANR	96200	ReturnType	void		95739	1					
ANR	96201	Identifier	zend_do_early_binding		95739	2					
ANR	96202	ParameterList			95739	3					
ANR	96203	CFGEntryNode	ENTRY		95739		True				
ANR	96204	CFGExitNode	EXIT		95739		True				
ANR	96205	Symbol	parent_name		95739						
ANR	96206	Symbol	E_COMPILE_ERROR		95739						
ANR	96207	Symbol	* CG		95739						
ANR	96208	Symbol	* ce		95739						
ANR	96209	Symbol	CG ( active_op_array ) -> opcodes		95739						
ANR	96210	Symbol	opline -> result		95739						
ANR	96211	Symbol	fetch_class_opline		95739						
ANR	96212	Symbol	CG ( active_op_array ) -> last		95739						
ANR	96213	Symbol	opline		95739						
ANR	96214	Symbol	ZEND_COMPILE_DELAYED_BINDING		95739						
ANR	96215	Symbol	CT_CONSTANT		95739						
ANR	96216	Symbol	do_bind_class		95739						
ANR	96217	Symbol	& CG ( active_op_array ) -> opcodes [ * opline_num ] . result . opline_num		95739						
ANR	96218	Symbol	* CG ( active_op_array ) -> opcodes		95739						
ANR	96219	Symbol	ZEND_INTERNAL_CLASS		95739						
ANR	96220	Symbol	NULL		95739						
ANR	96221	Symbol	* * opline_num		95739						
ANR	96222	Symbol	* opline_num		95739						
ANR	96223	Symbol	do_bind_inherited_class		95739						
ANR	96224	Symbol	Z_STR_P		95739						
ANR	96225	Symbol	opline_num		95739						
ANR	96226	Symbol	function_table		95739						
ANR	96227	Symbol	zend_lookup_class_ex		95739						
ANR	96228	Symbol	opline -> op1		95739						
ANR	96229	Symbol	ce -> type		95739						
ANR	96230	Symbol	opline -> op2		95739						
ANR	96231	Symbol	fetch_class_opline -> op2 . constant		95739						
ANR	96232	Symbol	compiler_options		95739						
ANR	96233	Symbol	* * CG		95739						
ANR	96234	Symbol	opline -> op1 . constant		95739						
ANR	96235	Symbol	class_table		95739						
ANR	96236	Symbol	ZEND_COMPILE_IGNORE_INTERNAL_CLASSES		95739						
ANR	96237	Symbol	ZEND_TICKS		95739						
ANR	96238	Symbol	ZEND_DECLARE_INHERITED_CLASS_DELAYED		95739						
ANR	96239	Symbol	table		95739						
ANR	96240	Symbol	* fetch_class_opline		95739						
ANR	96241	Symbol	opline -> result_type		95739						
ANR	96242	Symbol	ce		95739						
ANR	96243	Symbol	CG		95739						
ANR	96244	Symbol	opline -> result . opline_num		95739						
ANR	96245	Symbol	active_op_array		95739						
ANR	96246	Symbol	& CG ( active_op_array ) -> opcodes [ * opline_num ] . result		95739						
ANR	96247	Symbol	FAILURE		95739						
ANR	96248	Symbol	* opline		95739						
ANR	96249	Symbol	& CG ( active_op_array ) -> early_binding		95739						
ANR	96250	Symbol	opline -> opcode		95739						
ANR	96251	Symbol	opline -> op2 . constant		95739						
ANR	96252	Symbol	do_bind_function		95739						
ANR	96253	Symbol	fetch_class_opline -> op2		95739						
ANR	96254	Symbol	CG ( active_op_array ) -> opcodes [ * opline_num ] . result		95739						
ANR	96255	Symbol	IS_UNUSED		95739						
ANR	96256	Function	zend_mark_function_as_generator	1133:0:34361:35827							
ANR	96257	FunctionDef	zend_mark_function_as_generator ()		96256	0					
ANR	96258	CompoundStatement		1134:0:34417:35827	96256	0					
ANR	96259	IfStatement	if ( ! CG ( active_op_array ) -> function_name )		96256	0					
ANR	96260	Condition	! CG ( active_op_array ) -> function_name	1135:5:34424:34458	96256	0	True				
ANR	96261	UnaryOperationExpression	! CG ( active_op_array ) -> function_name		96256	0					
ANR	96262	UnaryOperator	!		96256	0					
ANR	96263	PtrMemberAccess	CG ( active_op_array ) -> function_name		96256	1					
ANR	96264	CallExpression	CG ( active_op_array )		96256	0					
ANR	96265	Callee	CG		96256	0					
ANR	96266	Identifier	CG		96256	0					
ANR	96267	ArgumentList	active_op_array		96256	1					
ANR	96268	Argument	active_op_array		96256	0					
ANR	96269	Identifier	active_op_array		96256	0					
ANR	96270	Identifier	function_name		96256	1					
ANR	96271	CompoundStatement		2:42:43:43	96256	1					
ANR	96272	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""The \\""yield\\"" expression can only be used inside a function"" )"	1136:2:34465:34567	96256	0	True				
ANR	96273	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""The \\""yield\\"" expression can only be used inside a function"" )"		96256	0					
ANR	96274	Callee	zend_error_noreturn		96256	0					
ANR	96275	Identifier	zend_error_noreturn		96256	0					
ANR	96276	ArgumentList	E_COMPILE_ERROR		96256	1					
ANR	96277	Argument	E_COMPILE_ERROR		96256	0					
ANR	96278	Identifier	E_COMPILE_ERROR		96256	0					
ANR	96279	Argument	"""The \\""yield\\"" expression can only be used inside a function"""		96256	1					
ANR	96280	PrimaryExpression	"""The \\""yield\\"" expression can only be used inside a function"""		96256	0					
ANR	96281	IfStatement	if ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE )		96256	1					
ANR	96282	Condition	CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE	1139:5:34577:34632	96256	0	True				
ANR	96283	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE		96256	0		&			
ANR	96284	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		96256	0					
ANR	96285	CallExpression	CG ( active_op_array )		96256	0					
ANR	96286	Callee	CG		96256	0					
ANR	96287	Identifier	CG		96256	0					
ANR	96288	ArgumentList	active_op_array		96256	1					
ANR	96289	Argument	active_op_array		96256	0					
ANR	96290	Identifier	active_op_array		96256	0					
ANR	96291	Identifier	fn_flags		96256	1					
ANR	96292	Identifier	ZEND_ACC_HAS_RETURN_TYPE		96256	1					
ANR	96293	CompoundStatement		7:2:221:341	96256	1					
ANR	96294	IdentifierDeclStatement	"const char * msg = ""Generators may only declare a return type of Generator, Iterator or Traversable, %s is not permitted"" ;"	1140:2:34639:34759	96256	0	True				
ANR	96295	IdentifierDecl	"* msg = ""Generators may only declare a return type of Generator, Iterator or Traversable, %s is not permitted"""		96256	0					
ANR	96296	IdentifierDeclType	const char *		96256	0					
ANR	96297	Identifier	msg		96256	1					
ANR	96298	AssignmentExpression	"* msg = ""Generators may only declare a return type of Generator, Iterator or Traversable, %s is not permitted"""		96256	2		=			
ANR	96299	Identifier	msg		96256	0					
ANR	96300	PrimaryExpression	"""Generators may only declare a return type of Generator, Iterator or Traversable, %s is not permitted"""		96256	1					
ANR	96301	IfStatement	if ( ! CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	1					
ANR	96302	Condition	! CG ( active_op_array ) -> arg_info [ - 1 ] . class_name	1141:6:34767:34811	96256	0	True				
ANR	96303	UnaryOperationExpression	! CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96304	UnaryOperator	!		96256	0					
ANR	96305	MemberAccess	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	1					
ANR	96306	ArrayIndexing	CG ( active_op_array ) -> arg_info [ - 1 ]		96256	0					
ANR	96307	PtrMemberAccess	CG ( active_op_array ) -> arg_info		96256	0					
ANR	96308	CallExpression	CG ( active_op_array )		96256	0					
ANR	96309	Callee	CG		96256	0					
ANR	96310	Identifier	CG		96256	0					
ANR	96311	ArgumentList	active_op_array		96256	1					
ANR	96312	Argument	active_op_array		96256	0					
ANR	96313	Identifier	active_op_array		96256	0					
ANR	96314	Identifier	arg_info		96256	1					
ANR	96315	UnaryOperationExpression	- 1		96256	1					
ANR	96316	UnaryOperator	-		96256	0					
ANR	96317	PrimaryExpression	1		96256	1					
ANR	96318	Identifier	class_name		96256	1					
ANR	96319	CompoundStatement		8:53:396:396	96256	1					
ANR	96320	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , msg , zend_get_type_by_const ( CG ( active_op_array ) -> arg_info [ - 1 ] . type_hint ) )"	1142:3:34819:34933	96256	0	True				
ANR	96321	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , msg , zend_get_type_by_const ( CG ( active_op_array ) -> arg_info [ - 1 ] . type_hint ) )"		96256	0					
ANR	96322	Callee	zend_error_noreturn		96256	0					
ANR	96323	Identifier	zend_error_noreturn		96256	0					
ANR	96324	ArgumentList	E_COMPILE_ERROR		96256	1					
ANR	96325	Argument	E_COMPILE_ERROR		96256	0					
ANR	96326	Identifier	E_COMPILE_ERROR		96256	0					
ANR	96327	Argument	msg		96256	1					
ANR	96328	Identifier	msg		96256	0					
ANR	96329	Argument	zend_get_type_by_const ( CG ( active_op_array ) -> arg_info [ - 1 ] . type_hint )		96256	2					
ANR	96330	CallExpression	zend_get_type_by_const ( CG ( active_op_array ) -> arg_info [ - 1 ] . type_hint )		96256	0					
ANR	96331	Callee	zend_get_type_by_const		96256	0					
ANR	96332	Identifier	zend_get_type_by_const		96256	0					
ANR	96333	ArgumentList	CG ( active_op_array ) -> arg_info [ - 1 ] . type_hint		96256	1					
ANR	96334	Argument	CG ( active_op_array ) -> arg_info [ - 1 ] . type_hint		96256	0					
ANR	96335	MemberAccess	CG ( active_op_array ) -> arg_info [ - 1 ] . type_hint		96256	0					
ANR	96336	ArrayIndexing	CG ( active_op_array ) -> arg_info [ - 1 ]		96256	0					
ANR	96337	PtrMemberAccess	CG ( active_op_array ) -> arg_info		96256	0					
ANR	96338	CallExpression	CG ( active_op_array )		96256	0					
ANR	96339	Callee	CG		96256	0					
ANR	96340	Identifier	CG		96256	0					
ANR	96341	ArgumentList	active_op_array		96256	1					
ANR	96342	Argument	active_op_array		96256	0					
ANR	96343	Identifier	active_op_array		96256	0					
ANR	96344	Identifier	arg_info		96256	1					
ANR	96345	UnaryOperationExpression	- 1		96256	1					
ANR	96346	UnaryOperator	-		96256	0					
ANR	96347	PrimaryExpression	1		96256	1					
ANR	96348	Identifier	type_hint		96256	1					
ANR	96349	IfStatement	"if ( ! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Traversable"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Traversable"" ) - 1 , ""Traversable"" , sizeof ( ""Traversable"" ) - 1 ) == 0 ) && ! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Iterator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Iterator"" ) - 1 , ""Iterator"" , sizeof ( ""Iterator"" ) - 1 ) == 0 ) && ! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Generator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Generator"" ) - 1 , ""Generator"" , sizeof ( ""Generator"" ) - 1 ) == 0 ) )"		96256	2					
ANR	96350	Condition	"! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Traversable"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Traversable"" ) - 1 , ""Traversable"" , sizeof ( ""Traversable"" ) - 1 ) == 0 ) && ! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Iterator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Iterator"" ) - 1 , ""Iterator"" , sizeof ( ""Iterator"" ) - 1 ) == 0 ) && ! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Generator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Generator"" ) - 1 , ""Generator"" , sizeof ( ""Generator"" ) - 1 ) == 0 )"	1145:6:34945:35658	96256	0	True				
ANR	96351	AndExpression	"! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Traversable"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Traversable"" ) - 1 , ""Traversable"" , sizeof ( ""Traversable"" ) - 1 ) == 0 ) && ! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Iterator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Iterator"" ) - 1 , ""Iterator"" , sizeof ( ""Iterator"" ) - 1 ) == 0 ) && ! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Generator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Generator"" ) - 1 , ""Generator"" , sizeof ( ""Generator"" ) - 1 ) == 0 )"		96256	0		&&			
ANR	96352	UnaryOperationExpression	"! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Traversable"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Traversable"" ) - 1 , ""Traversable"" , sizeof ( ""Traversable"" ) - 1 ) == 0 )"		96256	0					
ANR	96353	UnaryOperator	!		96256	0					
ANR	96354	AndExpression	"ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Traversable"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Traversable"" ) - 1 , ""Traversable"" , sizeof ( ""Traversable"" ) - 1 ) == 0"		96256	1		&&			
ANR	96355	EqualityExpression	"ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Traversable"" ) - 1"		96256	0		==			
ANR	96356	CallExpression	ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96357	Callee	ZSTR_LEN		96256	0					
ANR	96358	Identifier	ZSTR_LEN		96256	0					
ANR	96359	ArgumentList	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	1					
ANR	96360	Argument	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96361	MemberAccess	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96362	ArrayIndexing	CG ( active_op_array ) -> arg_info [ - 1 ]		96256	0					
ANR	96363	PtrMemberAccess	CG ( active_op_array ) -> arg_info		96256	0					
ANR	96364	CallExpression	CG ( active_op_array )		96256	0					
ANR	96365	Callee	CG		96256	0					
ANR	96366	Identifier	CG		96256	0					
ANR	96367	ArgumentList	active_op_array		96256	1					
ANR	96368	Argument	active_op_array		96256	0					
ANR	96369	Identifier	active_op_array		96256	0					
ANR	96370	Identifier	arg_info		96256	1					
ANR	96371	UnaryOperationExpression	- 1		96256	1					
ANR	96372	UnaryOperator	-		96256	0					
ANR	96373	PrimaryExpression	1		96256	1					
ANR	96374	Identifier	class_name		96256	1					
ANR	96375	AdditiveExpression	"sizeof ( ""Traversable"" ) - 1"		96256	1		-			
ANR	96376	SizeofExpression	"sizeof ( ""Traversable"" )"		96256	0					
ANR	96377	Sizeof	sizeof		96256	0					
ANR	96378	PrimaryExpression	"""Traversable"""		96256	1					
ANR	96379	PrimaryExpression	1		96256	1					
ANR	96380	EqualityExpression	"zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Traversable"" ) - 1 , ""Traversable"" , sizeof ( ""Traversable"" ) - 1 ) == 0"		96256	1		==			
ANR	96381	CallExpression	"zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Traversable"" ) - 1 , ""Traversable"" , sizeof ( ""Traversable"" ) - 1 )"		96256	0					
ANR	96382	Callee	zend_binary_strcasecmp		96256	0					
ANR	96383	Identifier	zend_binary_strcasecmp		96256	0					
ANR	96384	ArgumentList	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	1					
ANR	96385	Argument	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96386	CallExpression	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96387	Callee	ZSTR_VAL		96256	0					
ANR	96388	Identifier	ZSTR_VAL		96256	0					
ANR	96389	ArgumentList	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	1					
ANR	96390	Argument	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96391	MemberAccess	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96392	ArrayIndexing	CG ( active_op_array ) -> arg_info [ - 1 ]		96256	0					
ANR	96393	PtrMemberAccess	CG ( active_op_array ) -> arg_info		96256	0					
ANR	96394	CallExpression	CG ( active_op_array )		96256	0					
ANR	96395	Callee	CG		96256	0					
ANR	96396	Identifier	CG		96256	0					
ANR	96397	ArgumentList	active_op_array		96256	1					
ANR	96398	Argument	active_op_array		96256	0					
ANR	96399	Identifier	active_op_array		96256	0					
ANR	96400	Identifier	arg_info		96256	1					
ANR	96401	UnaryOperationExpression	- 1		96256	1					
ANR	96402	UnaryOperator	-		96256	0					
ANR	96403	PrimaryExpression	1		96256	1					
ANR	96404	Identifier	class_name		96256	1					
ANR	96405	Argument	"sizeof ( ""Traversable"" ) - 1"		96256	1					
ANR	96406	AdditiveExpression	"sizeof ( ""Traversable"" ) - 1"		96256	0		-			
ANR	96407	SizeofExpression	"sizeof ( ""Traversable"" )"		96256	0					
ANR	96408	Sizeof	sizeof		96256	0					
ANR	96409	PrimaryExpression	"""Traversable"""		96256	1					
ANR	96410	PrimaryExpression	1		96256	1					
ANR	96411	Argument	"""Traversable"""		96256	2					
ANR	96412	PrimaryExpression	"""Traversable"""		96256	0					
ANR	96413	Argument	"sizeof ( ""Traversable"" ) - 1"		96256	3					
ANR	96414	AdditiveExpression	"sizeof ( ""Traversable"" ) - 1"		96256	0		-			
ANR	96415	SizeofExpression	"sizeof ( ""Traversable"" )"		96256	0					
ANR	96416	Sizeof	sizeof		96256	0					
ANR	96417	PrimaryExpression	"""Traversable"""		96256	1					
ANR	96418	PrimaryExpression	1		96256	1					
ANR	96419	PrimaryExpression	0		96256	1					
ANR	96420	AndExpression	"! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Iterator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Iterator"" ) - 1 , ""Iterator"" , sizeof ( ""Iterator"" ) - 1 ) == 0 ) && ! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Generator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Generator"" ) - 1 , ""Generator"" , sizeof ( ""Generator"" ) - 1 ) == 0 )"		96256	1		&&			
ANR	96421	UnaryOperationExpression	"! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Iterator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Iterator"" ) - 1 , ""Iterator"" , sizeof ( ""Iterator"" ) - 1 ) == 0 )"		96256	0					
ANR	96422	UnaryOperator	!		96256	0					
ANR	96423	AndExpression	"ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Iterator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Iterator"" ) - 1 , ""Iterator"" , sizeof ( ""Iterator"" ) - 1 ) == 0"		96256	1		&&			
ANR	96424	EqualityExpression	"ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Iterator"" ) - 1"		96256	0		==			
ANR	96425	CallExpression	ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96426	Callee	ZSTR_LEN		96256	0					
ANR	96427	Identifier	ZSTR_LEN		96256	0					
ANR	96428	ArgumentList	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	1					
ANR	96429	Argument	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96430	MemberAccess	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96431	ArrayIndexing	CG ( active_op_array ) -> arg_info [ - 1 ]		96256	0					
ANR	96432	PtrMemberAccess	CG ( active_op_array ) -> arg_info		96256	0					
ANR	96433	CallExpression	CG ( active_op_array )		96256	0					
ANR	96434	Callee	CG		96256	0					
ANR	96435	Identifier	CG		96256	0					
ANR	96436	ArgumentList	active_op_array		96256	1					
ANR	96437	Argument	active_op_array		96256	0					
ANR	96438	Identifier	active_op_array		96256	0					
ANR	96439	Identifier	arg_info		96256	1					
ANR	96440	UnaryOperationExpression	- 1		96256	1					
ANR	96441	UnaryOperator	-		96256	0					
ANR	96442	PrimaryExpression	1		96256	1					
ANR	96443	Identifier	class_name		96256	1					
ANR	96444	AdditiveExpression	"sizeof ( ""Iterator"" ) - 1"		96256	1		-			
ANR	96445	SizeofExpression	"sizeof ( ""Iterator"" )"		96256	0					
ANR	96446	Sizeof	sizeof		96256	0					
ANR	96447	PrimaryExpression	"""Iterator"""		96256	1					
ANR	96448	PrimaryExpression	1		96256	1					
ANR	96449	EqualityExpression	"zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Iterator"" ) - 1 , ""Iterator"" , sizeof ( ""Iterator"" ) - 1 ) == 0"		96256	1		==			
ANR	96450	CallExpression	"zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Iterator"" ) - 1 , ""Iterator"" , sizeof ( ""Iterator"" ) - 1 )"		96256	0					
ANR	96451	Callee	zend_binary_strcasecmp		96256	0					
ANR	96452	Identifier	zend_binary_strcasecmp		96256	0					
ANR	96453	ArgumentList	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	1					
ANR	96454	Argument	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96455	CallExpression	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96456	Callee	ZSTR_VAL		96256	0					
ANR	96457	Identifier	ZSTR_VAL		96256	0					
ANR	96458	ArgumentList	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	1					
ANR	96459	Argument	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96460	MemberAccess	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96461	ArrayIndexing	CG ( active_op_array ) -> arg_info [ - 1 ]		96256	0					
ANR	96462	PtrMemberAccess	CG ( active_op_array ) -> arg_info		96256	0					
ANR	96463	CallExpression	CG ( active_op_array )		96256	0					
ANR	96464	Callee	CG		96256	0					
ANR	96465	Identifier	CG		96256	0					
ANR	96466	ArgumentList	active_op_array		96256	1					
ANR	96467	Argument	active_op_array		96256	0					
ANR	96468	Identifier	active_op_array		96256	0					
ANR	96469	Identifier	arg_info		96256	1					
ANR	96470	UnaryOperationExpression	- 1		96256	1					
ANR	96471	UnaryOperator	-		96256	0					
ANR	96472	PrimaryExpression	1		96256	1					
ANR	96473	Identifier	class_name		96256	1					
ANR	96474	Argument	"sizeof ( ""Iterator"" ) - 1"		96256	1					
ANR	96475	AdditiveExpression	"sizeof ( ""Iterator"" ) - 1"		96256	0		-			
ANR	96476	SizeofExpression	"sizeof ( ""Iterator"" )"		96256	0					
ANR	96477	Sizeof	sizeof		96256	0					
ANR	96478	PrimaryExpression	"""Iterator"""		96256	1					
ANR	96479	PrimaryExpression	1		96256	1					
ANR	96480	Argument	"""Iterator"""		96256	2					
ANR	96481	PrimaryExpression	"""Iterator"""		96256	0					
ANR	96482	Argument	"sizeof ( ""Iterator"" ) - 1"		96256	3					
ANR	96483	AdditiveExpression	"sizeof ( ""Iterator"" ) - 1"		96256	0		-			
ANR	96484	SizeofExpression	"sizeof ( ""Iterator"" )"		96256	0					
ANR	96485	Sizeof	sizeof		96256	0					
ANR	96486	PrimaryExpression	"""Iterator"""		96256	1					
ANR	96487	PrimaryExpression	1		96256	1					
ANR	96488	PrimaryExpression	0		96256	1					
ANR	96489	UnaryOperationExpression	"! ( ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Generator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Generator"" ) - 1 , ""Generator"" , sizeof ( ""Generator"" ) - 1 ) == 0 )"		96256	1					
ANR	96490	UnaryOperator	!		96256	0					
ANR	96491	AndExpression	"ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Generator"" ) - 1 && zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Generator"" ) - 1 , ""Generator"" , sizeof ( ""Generator"" ) - 1 ) == 0"		96256	1		&&			
ANR	96492	EqualityExpression	"ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) == sizeof ( ""Generator"" ) - 1"		96256	0		==			
ANR	96493	CallExpression	ZSTR_LEN ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96494	Callee	ZSTR_LEN		96256	0					
ANR	96495	Identifier	ZSTR_LEN		96256	0					
ANR	96496	ArgumentList	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	1					
ANR	96497	Argument	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96498	MemberAccess	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96499	ArrayIndexing	CG ( active_op_array ) -> arg_info [ - 1 ]		96256	0					
ANR	96500	PtrMemberAccess	CG ( active_op_array ) -> arg_info		96256	0					
ANR	96501	CallExpression	CG ( active_op_array )		96256	0					
ANR	96502	Callee	CG		96256	0					
ANR	96503	Identifier	CG		96256	0					
ANR	96504	ArgumentList	active_op_array		96256	1					
ANR	96505	Argument	active_op_array		96256	0					
ANR	96506	Identifier	active_op_array		96256	0					
ANR	96507	Identifier	arg_info		96256	1					
ANR	96508	UnaryOperationExpression	- 1		96256	1					
ANR	96509	UnaryOperator	-		96256	0					
ANR	96510	PrimaryExpression	1		96256	1					
ANR	96511	Identifier	class_name		96256	1					
ANR	96512	AdditiveExpression	"sizeof ( ""Generator"" ) - 1"		96256	1		-			
ANR	96513	SizeofExpression	"sizeof ( ""Generator"" )"		96256	0					
ANR	96514	Sizeof	sizeof		96256	0					
ANR	96515	PrimaryExpression	"""Generator"""		96256	1					
ANR	96516	PrimaryExpression	1		96256	1					
ANR	96517	EqualityExpression	"zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Generator"" ) - 1 , ""Generator"" , sizeof ( ""Generator"" ) - 1 ) == 0"		96256	1		==			
ANR	96518	CallExpression	"zend_binary_strcasecmp ( ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) , sizeof ( ""Generator"" ) - 1 , ""Generator"" , sizeof ( ""Generator"" ) - 1 )"		96256	0					
ANR	96519	Callee	zend_binary_strcasecmp		96256	0					
ANR	96520	Identifier	zend_binary_strcasecmp		96256	0					
ANR	96521	ArgumentList	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	1					
ANR	96522	Argument	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96523	CallExpression	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96524	Callee	ZSTR_VAL		96256	0					
ANR	96525	Identifier	ZSTR_VAL		96256	0					
ANR	96526	ArgumentList	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	1					
ANR	96527	Argument	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96528	MemberAccess	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96529	ArrayIndexing	CG ( active_op_array ) -> arg_info [ - 1 ]		96256	0					
ANR	96530	PtrMemberAccess	CG ( active_op_array ) -> arg_info		96256	0					
ANR	96531	CallExpression	CG ( active_op_array )		96256	0					
ANR	96532	Callee	CG		96256	0					
ANR	96533	Identifier	CG		96256	0					
ANR	96534	ArgumentList	active_op_array		96256	1					
ANR	96535	Argument	active_op_array		96256	0					
ANR	96536	Identifier	active_op_array		96256	0					
ANR	96537	Identifier	arg_info		96256	1					
ANR	96538	UnaryOperationExpression	- 1		96256	1					
ANR	96539	UnaryOperator	-		96256	0					
ANR	96540	PrimaryExpression	1		96256	1					
ANR	96541	Identifier	class_name		96256	1					
ANR	96542	Argument	"sizeof ( ""Generator"" ) - 1"		96256	1					
ANR	96543	AdditiveExpression	"sizeof ( ""Generator"" ) - 1"		96256	0		-			
ANR	96544	SizeofExpression	"sizeof ( ""Generator"" )"		96256	0					
ANR	96545	Sizeof	sizeof		96256	0					
ANR	96546	PrimaryExpression	"""Generator"""		96256	1					
ANR	96547	PrimaryExpression	1		96256	1					
ANR	96548	Argument	"""Generator"""		96256	2					
ANR	96549	PrimaryExpression	"""Generator"""		96256	0					
ANR	96550	Argument	"sizeof ( ""Generator"" ) - 1"		96256	3					
ANR	96551	AdditiveExpression	"sizeof ( ""Generator"" ) - 1"		96256	0		-			
ANR	96552	SizeofExpression	"sizeof ( ""Generator"" )"		96256	0					
ANR	96553	Sizeof	sizeof		96256	0					
ANR	96554	PrimaryExpression	"""Generator"""		96256	1					
ANR	96555	PrimaryExpression	1		96256	1					
ANR	96556	PrimaryExpression	0		96256	1					
ANR	96557	CompoundStatement		17:152:1243:1243	96256	1					
ANR	96558	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , msg , ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) )"	1151:3:35666:35763	96256	0	True				
ANR	96559	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , msg , ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name ) )"		96256	0					
ANR	96560	Callee	zend_error_noreturn		96256	0					
ANR	96561	Identifier	zend_error_noreturn		96256	0					
ANR	96562	ArgumentList	E_COMPILE_ERROR		96256	1					
ANR	96563	Argument	E_COMPILE_ERROR		96256	0					
ANR	96564	Identifier	E_COMPILE_ERROR		96256	0					
ANR	96565	Argument	msg		96256	1					
ANR	96566	Identifier	msg		96256	0					
ANR	96567	Argument	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	2					
ANR	96568	CallExpression	ZSTR_VAL ( CG ( active_op_array ) -> arg_info [ - 1 ] . class_name )		96256	0					
ANR	96569	Callee	ZSTR_VAL		96256	0					
ANR	96570	Identifier	ZSTR_VAL		96256	0					
ANR	96571	ArgumentList	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	1					
ANR	96572	Argument	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96573	MemberAccess	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256	0					
ANR	96574	ArrayIndexing	CG ( active_op_array ) -> arg_info [ - 1 ]		96256	0					
ANR	96575	PtrMemberAccess	CG ( active_op_array ) -> arg_info		96256	0					
ANR	96576	CallExpression	CG ( active_op_array )		96256	0					
ANR	96577	Callee	CG		96256	0					
ANR	96578	Identifier	CG		96256	0					
ANR	96579	ArgumentList	active_op_array		96256	1					
ANR	96580	Argument	active_op_array		96256	0					
ANR	96581	Identifier	active_op_array		96256	0					
ANR	96582	Identifier	arg_info		96256	1					
ANR	96583	UnaryOperationExpression	- 1		96256	1					
ANR	96584	UnaryOperator	-		96256	0					
ANR	96585	PrimaryExpression	1		96256	1					
ANR	96586	Identifier	class_name		96256	1					
ANR	96587	ExpressionStatement	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_GENERATOR	1155:1:35774:35825	96256	2	True				
ANR	96588	AssignmentExpression	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_GENERATOR		96256	0		|=			
ANR	96589	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		96256	0					
ANR	96590	CallExpression	CG ( active_op_array )		96256	0					
ANR	96591	Callee	CG		96256	0					
ANR	96592	Identifier	CG		96256	0					
ANR	96593	ArgumentList	active_op_array		96256	1					
ANR	96594	Argument	active_op_array		96256	0					
ANR	96595	Identifier	active_op_array		96256	0					
ANR	96596	Identifier	fn_flags		96256	1					
ANR	96597	Identifier	ZEND_ACC_GENERATOR		96256	1					
ANR	96598	ReturnType	static void		96256	1					
ANR	96599	Identifier	zend_mark_function_as_generator		96256	2					
ANR	96600	ParameterList			96256	3					
ANR	96601	CFGEntryNode	ENTRY		96256		True				
ANR	96602	CFGExitNode	EXIT		96256		True				
ANR	96603	Symbol	CG ( active_op_array ) -> function_name		96256						
ANR	96604	Symbol	msg		96256						
ANR	96605	Symbol	zend_get_type_by_const		96256						
ANR	96606	Symbol	CG ( active_op_array ) -> arg_info [ - 1 ] . type_hint		96256						
ANR	96607	Symbol	CG		96256						
ANR	96608	Symbol	active_op_array		96256						
ANR	96609	Symbol	ZEND_ACC_HAS_RETURN_TYPE		96256						
ANR	96610	Symbol	E_COMPILE_ERROR		96256						
ANR	96611	Symbol	zend_binary_strcasecmp		96256						
ANR	96612	Symbol	* CG		96256						
ANR	96613	Symbol	CG ( active_op_array ) -> fn_flags		96256						
ANR	96614	Symbol	ZSTR_VAL		96256						
ANR	96615	Symbol	CG ( active_op_array ) -> arg_info [ - 1 ] . class_name		96256						
ANR	96616	Symbol	* * CG		96256						
ANR	96617	Symbol	CG ( active_op_array ) -> arg_info		96256						
ANR	96618	Symbol	* CG ( active_op_array ) -> arg_info		96256						
ANR	96619	Symbol	ZSTR_LEN		96256						
ANR	96620	Symbol	ZEND_ACC_GENERATOR		96256						
ANR	96621	Function	zend_do_delayed_early_binding	1159:0:35840:36555							
ANR	96622	FunctionDef	zend_do_delayed_early_binding (const zend_op_array * op_array)		96621	0					
ANR	96623	CompoundStatement		1160:0:35925:36555	96621	0					
ANR	96624	IfStatement	if ( op_array -> early_binding != ( uint32_t ) - 1 )		96621	0					
ANR	96625	Condition	op_array -> early_binding != ( uint32_t ) - 1	1161:5:35932:35970	96621	0	True				
ANR	96626	EqualityExpression	op_array -> early_binding != ( uint32_t ) - 1		96621	0		!=			
ANR	96627	PtrMemberAccess	op_array -> early_binding		96621	0					
ANR	96628	Identifier	op_array		96621	0					
ANR	96629	Identifier	early_binding		96621	1					
ANR	96630	CastExpression	( uint32_t ) - 1		96621	1					
ANR	96631	CastTarget	uint32_t		96621	0					
ANR	96632	UnaryOperationExpression	- 1		96621	1					
ANR	96633	UnaryOperator	-		96621	0					
ANR	96634	PrimaryExpression	1		96621	1					
ANR	96635	CompoundStatement		5:2:154:174	96621	1					
ANR	96636	IdentifierDeclStatement	zend_bool orig_in_compilation = CG ( in_compilation ) ;	1162:2:35977:36027	96621	0	True				
ANR	96637	IdentifierDecl	orig_in_compilation = CG ( in_compilation )		96621	0					
ANR	96638	IdentifierDeclType	zend_bool		96621	0					
ANR	96639	Identifier	orig_in_compilation		96621	1					
ANR	96640	AssignmentExpression	orig_in_compilation = CG ( in_compilation )		96621	2		=			
ANR	96641	Identifier	orig_in_compilation		96621	0					
ANR	96642	CallExpression	CG ( in_compilation )		96621	1					
ANR	96643	Callee	CG		96621	0					
ANR	96644	Identifier	CG		96621	0					
ANR	96645	ArgumentList	in_compilation		96621	1					
ANR	96646	Argument	in_compilation		96621	0					
ANR	96647	Identifier	in_compilation		96621	0					
ANR	96648	IdentifierDeclStatement	uint32_t opline_num = op_array -> early_binding ;	1163:2:36031:36076	96621	1	True				
ANR	96649	IdentifierDecl	opline_num = op_array -> early_binding		96621	0					
ANR	96650	IdentifierDeclType	uint32_t		96621	0					
ANR	96651	Identifier	opline_num		96621	1					
ANR	96652	AssignmentExpression	opline_num = op_array -> early_binding		96621	2		=			
ANR	96653	Identifier	opline_num		96621	0					
ANR	96654	PtrMemberAccess	op_array -> early_binding		96621	1					
ANR	96655	Identifier	op_array		96621	0					
ANR	96656	Identifier	early_binding		96621	1					
ANR	96657	IdentifierDeclStatement	zend_class_entry * ce ;	1164:2:36080:36100	96621	2	True				
ANR	96658	IdentifierDecl	* ce		96621	0					
ANR	96659	IdentifierDeclType	zend_class_entry *		96621	0					
ANR	96660	Identifier	ce		96621	1					
ANR	96661	ExpressionStatement	CG ( in_compilation ) = 1	1166:2:36105:36127	96621	3	True				
ANR	96662	AssignmentExpression	CG ( in_compilation ) = 1		96621	0		=			
ANR	96663	CallExpression	CG ( in_compilation )		96621	0					
ANR	96664	Callee	CG		96621	0					
ANR	96665	Identifier	CG		96621	0					
ANR	96666	ArgumentList	in_compilation		96621	1					
ANR	96667	Argument	in_compilation		96621	0					
ANR	96668	Identifier	in_compilation		96621	0					
ANR	96669	PrimaryExpression	1		96621	1					
ANR	96670	WhileStatement	while ( opline_num != ( uint32_t ) - 1 )		96621	4					
ANR	96671	Condition	opline_num != ( uint32_t ) - 1	1167:9:36138:36163	96621	0	True				
ANR	96672	EqualityExpression	opline_num != ( uint32_t ) - 1		96621	0		!=			
ANR	96673	Identifier	opline_num		96621	0					
ANR	96674	CastExpression	( uint32_t ) - 1		96621	1					
ANR	96675	CastTarget	uint32_t		96621	0					
ANR	96676	UnaryOperationExpression	- 1		96621	1					
ANR	96677	UnaryOperator	-		96621	0					
ANR	96678	PrimaryExpression	1		96621	1					
ANR	96679	CompoundStatement		9:3:245:323	96621	1					
ANR	96680	IdentifierDeclStatement	"zval * parent_name = RT_CONSTANT ( op_array , op_array -> opcodes [ opline_num - 1 ] . op2 ) ;"	1168:3:36171:36249	96621	0	True				
ANR	96681	IdentifierDecl	"* parent_name = RT_CONSTANT ( op_array , op_array -> opcodes [ opline_num - 1 ] . op2 )"		96621	0					
ANR	96682	IdentifierDeclType	zval *		96621	0					
ANR	96683	Identifier	parent_name		96621	1					
ANR	96684	AssignmentExpression	"* parent_name = RT_CONSTANT ( op_array , op_array -> opcodes [ opline_num - 1 ] . op2 )"		96621	2		=			
ANR	96685	Identifier	parent_name		96621	0					
ANR	96686	CallExpression	"RT_CONSTANT ( op_array , op_array -> opcodes [ opline_num - 1 ] . op2 )"		96621	1					
ANR	96687	Callee	RT_CONSTANT		96621	0					
ANR	96688	Identifier	RT_CONSTANT		96621	0					
ANR	96689	ArgumentList	op_array		96621	1					
ANR	96690	Argument	op_array		96621	0					
ANR	96691	Identifier	op_array		96621	0					
ANR	96692	Argument	op_array -> opcodes [ opline_num - 1 ] . op2		96621	1					
ANR	96693	MemberAccess	op_array -> opcodes [ opline_num - 1 ] . op2		96621	0					
ANR	96694	ArrayIndexing	op_array -> opcodes [ opline_num - 1 ]		96621	0					
ANR	96695	PtrMemberAccess	op_array -> opcodes		96621	0					
ANR	96696	Identifier	op_array		96621	0					
ANR	96697	Identifier	opcodes		96621	1					
ANR	96698	AdditiveExpression	opline_num - 1		96621	1		-			
ANR	96699	Identifier	opline_num		96621	0					
ANR	96700	PrimaryExpression	1		96621	1					
ANR	96701	Identifier	op2		96621	1					
ANR	96702	IfStatement	"if ( ( ce = zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 ) ) != NULL )"		96621	1					
ANR	96703	Condition	"( ce = zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 ) ) != NULL"	1169:7:36258:36334	96621	0	True				
ANR	96704	EqualityExpression	"( ce = zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 ) ) != NULL"		96621	0		!=			
ANR	96705	AssignmentExpression	"ce = zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 )"		96621	0		=			
ANR	96706	Identifier	ce		96621	0					
ANR	96707	CallExpression	"zend_lookup_class_ex ( Z_STR_P ( parent_name ) , parent_name + 1 , 0 )"		96621	1					
ANR	96708	Callee	zend_lookup_class_ex		96621	0					
ANR	96709	Identifier	zend_lookup_class_ex		96621	0					
ANR	96710	ArgumentList	Z_STR_P ( parent_name )		96621	1					
ANR	96711	Argument	Z_STR_P ( parent_name )		96621	0					
ANR	96712	CallExpression	Z_STR_P ( parent_name )		96621	0					
ANR	96713	Callee	Z_STR_P		96621	0					
ANR	96714	Identifier	Z_STR_P		96621	0					
ANR	96715	ArgumentList	parent_name		96621	1					
ANR	96716	Argument	parent_name		96621	0					
ANR	96717	Identifier	parent_name		96621	0					
ANR	96718	Argument	parent_name + 1		96621	1					
ANR	96719	AdditiveExpression	parent_name + 1		96621	0		+			
ANR	96720	Identifier	parent_name		96621	0					
ANR	96721	PrimaryExpression	1		96621	1					
ANR	96722	Argument	0		96621	2					
ANR	96723	PrimaryExpression	0		96621	0					
ANR	96724	Identifier	NULL		96621	1					
ANR	96725	CompoundStatement		10:86:411:411	96621	1					
ANR	96726	ExpressionStatement	"do_bind_inherited_class ( op_array , & op_array -> opcodes [ opline_num ] , EG ( class_table ) , ce , 0 )"	1170:4:36343:36432	96621	0	True				
ANR	96727	CallExpression	"do_bind_inherited_class ( op_array , & op_array -> opcodes [ opline_num ] , EG ( class_table ) , ce , 0 )"		96621	0					
ANR	96728	Callee	do_bind_inherited_class		96621	0					
ANR	96729	Identifier	do_bind_inherited_class		96621	0					
ANR	96730	ArgumentList	op_array		96621	1					
ANR	96731	Argument	op_array		96621	0					
ANR	96732	Identifier	op_array		96621	0					
ANR	96733	Argument	& op_array -> opcodes [ opline_num ]		96621	1					
ANR	96734	UnaryOperationExpression	& op_array -> opcodes [ opline_num ]		96621	0					
ANR	96735	UnaryOperator	&		96621	0					
ANR	96736	ArrayIndexing	op_array -> opcodes [ opline_num ]		96621	1					
ANR	96737	PtrMemberAccess	op_array -> opcodes		96621	0					
ANR	96738	Identifier	op_array		96621	0					
ANR	96739	Identifier	opcodes		96621	1					
ANR	96740	Identifier	opline_num		96621	1					
ANR	96741	Argument	EG ( class_table )		96621	2					
ANR	96742	CallExpression	EG ( class_table )		96621	0					
ANR	96743	Callee	EG		96621	0					
ANR	96744	Identifier	EG		96621	0					
ANR	96745	ArgumentList	class_table		96621	1					
ANR	96746	Argument	class_table		96621	0					
ANR	96747	Identifier	class_table		96621	0					
ANR	96748	Argument	ce		96621	3					
ANR	96749	Identifier	ce		96621	0					
ANR	96750	Argument	0		96621	4					
ANR	96751	PrimaryExpression	0		96621	0					
ANR	96752	ExpressionStatement	opline_num = op_array -> opcodes [ opline_num ] . result . opline_num	1172:3:36442:36502	96621	2	True				
ANR	96753	AssignmentExpression	opline_num = op_array -> opcodes [ opline_num ] . result . opline_num		96621	0		=			
ANR	96754	Identifier	opline_num		96621	0					
ANR	96755	MemberAccess	op_array -> opcodes [ opline_num ] . result . opline_num		96621	1					
ANR	96756	MemberAccess	op_array -> opcodes [ opline_num ] . result		96621	0					
ANR	96757	ArrayIndexing	op_array -> opcodes [ opline_num ]		96621	0					
ANR	96758	PtrMemberAccess	op_array -> opcodes		96621	0					
ANR	96759	Identifier	op_array		96621	0					
ANR	96760	Identifier	opcodes		96621	1					
ANR	96761	Identifier	opline_num		96621	1					
ANR	96762	Identifier	result		96621	1					
ANR	96763	Identifier	opline_num		96621	1					
ANR	96764	ExpressionStatement	CG ( in_compilation ) = orig_in_compilation	1174:2:36510:36550	96621	5	True				
ANR	96765	AssignmentExpression	CG ( in_compilation ) = orig_in_compilation		96621	0		=			
ANR	96766	CallExpression	CG ( in_compilation )		96621	0					
ANR	96767	Callee	CG		96621	0					
ANR	96768	Identifier	CG		96621	0					
ANR	96769	ArgumentList	in_compilation		96621	1					
ANR	96770	Argument	in_compilation		96621	0					
ANR	96771	Identifier	in_compilation		96621	0					
ANR	96772	Identifier	orig_in_compilation		96621	1					
ANR	96773	ReturnType	ZEND_API void		96621	1					
ANR	96774	Identifier	zend_do_delayed_early_binding		96621	2					
ANR	96775	ParameterList	const zend_op_array * op_array		96621	3					
ANR	96776	Parameter	const zend_op_array * op_array	1159:44:35884:35912	96621	0	True				
ANR	96777	ParameterType	const zend_op_array *		96621	0					
ANR	96778	Identifier	op_array		96621	1					
ANR	96779	CFGEntryNode	ENTRY		96621		True				
ANR	96780	CFGExitNode	EXIT		96621		True				
ANR	96781	Symbol	orig_in_compilation		96621						
ANR	96782	Symbol	parent_name		96621						
ANR	96783	Symbol	zend_lookup_class_ex		96621						
ANR	96784	Symbol	ce		96621						
ANR	96785	Symbol	EG		96621						
ANR	96786	Symbol	NULL		96621						
ANR	96787	Symbol	CG		96621						
ANR	96788	Symbol	op_array -> opcodes [ opline_num - 1 ] . op2		96621						
ANR	96789	Symbol	RT_CONSTANT		96621						
ANR	96790	Symbol	* op_array		96621						
ANR	96791	Symbol	in_compilation		96621						
ANR	96792	Symbol	* opline_num		96621						
ANR	96793	Symbol	op_array -> opcodes [ opline_num ] . result . opline_num		96621						
ANR	96794	Symbol	op_array -> opcodes		96621						
ANR	96795	Symbol	op_array -> early_binding		96621						
ANR	96796	Symbol	op_array -> opcodes [ opline_num ] . result		96621						
ANR	96797	Symbol	opline_num		96621						
ANR	96798	Symbol	Z_STR_P		96621						
ANR	96799	Symbol	* * op_array		96621						
ANR	96800	Symbol	class_table		96621						
ANR	96801	Symbol	op_array		96621						
ANR	96802	Symbol	* op_array -> opcodes		96621						
ANR	96803	Function	zend_mangle_property_name	1179:0:36568:37033							
ANR	96804	FunctionDef	"zend_mangle_property_name (const char * src1 , size_t src1_length , const char * src2 , size_t src2_length , int internal)"		96803	0					
ANR	96805	CompoundStatement		1180:0:36716:37033	96803	0					
ANR	96806	IdentifierDeclStatement	size_t prop_name_length = 1 + src1_length + 1 + src2_length ;	1181:1:36719:36778	96803	0	True				
ANR	96807	IdentifierDecl	prop_name_length = 1 + src1_length + 1 + src2_length		96803	0					
ANR	96808	IdentifierDeclType	size_t		96803	0					
ANR	96809	Identifier	prop_name_length		96803	1					
ANR	96810	AssignmentExpression	prop_name_length = 1 + src1_length + 1 + src2_length		96803	2		=			
ANR	96811	Identifier	prop_name_length		96803	0					
ANR	96812	AdditiveExpression	1 + src1_length + 1 + src2_length		96803	1		+			
ANR	96813	PrimaryExpression	1		96803	0					
ANR	96814	AdditiveExpression	src1_length + 1 + src2_length		96803	1		+			
ANR	96815	Identifier	src1_length		96803	0					
ANR	96816	AdditiveExpression	1 + src2_length		96803	1		+			
ANR	96817	PrimaryExpression	1		96803	0					
ANR	96818	Identifier	src2_length		96803	1					
ANR	96819	IdentifierDeclStatement	"zend_string * prop_name = zend_string_alloc ( prop_name_length , internal ) ;"	1182:1:36781:36851	96803	1	True				
ANR	96820	IdentifierDecl	"* prop_name = zend_string_alloc ( prop_name_length , internal )"		96803	0					
ANR	96821	IdentifierDeclType	zend_string *		96803	0					
ANR	96822	Identifier	prop_name		96803	1					
ANR	96823	AssignmentExpression	"* prop_name = zend_string_alloc ( prop_name_length , internal )"		96803	2		=			
ANR	96824	Identifier	prop_name		96803	0					
ANR	96825	CallExpression	"zend_string_alloc ( prop_name_length , internal )"		96803	1					
ANR	96826	Callee	zend_string_alloc		96803	0					
ANR	96827	Identifier	zend_string_alloc		96803	0					
ANR	96828	ArgumentList	prop_name_length		96803	1					
ANR	96829	Argument	prop_name_length		96803	0					
ANR	96830	Identifier	prop_name_length		96803	0					
ANR	96831	Argument	internal		96803	1					
ANR	96832	Identifier	internal		96803	0					
ANR	96833	ExpressionStatement	ZSTR_VAL ( prop_name ) [ 0 ] = '\\0'	1184:1:36855:36884	96803	2	True				
ANR	96834	AssignmentExpression	ZSTR_VAL ( prop_name ) [ 0 ] = '\\0'		96803	0		=			
ANR	96835	ArrayIndexing	ZSTR_VAL ( prop_name ) [ 0 ]		96803	0					
ANR	96836	CallExpression	ZSTR_VAL ( prop_name )		96803	0					
ANR	96837	Callee	ZSTR_VAL		96803	0					
ANR	96838	Identifier	ZSTR_VAL		96803	0					
ANR	96839	ArgumentList	prop_name		96803	1					
ANR	96840	Argument	prop_name		96803	0					
ANR	96841	Identifier	prop_name		96803	0					
ANR	96842	PrimaryExpression	0		96803	1					
ANR	96843	PrimaryExpression	'\\0'		96803	1					
ANR	96844	ExpressionStatement	"memcpy ( ZSTR_VAL ( prop_name ) + 1 , src1 , src1_length + 1 )"	1185:1:36887:36939	96803	3	True				
ANR	96845	CallExpression	"memcpy ( ZSTR_VAL ( prop_name ) + 1 , src1 , src1_length + 1 )"		96803	0					
ANR	96846	Callee	memcpy		96803	0					
ANR	96847	Identifier	memcpy		96803	0					
ANR	96848	ArgumentList	ZSTR_VAL ( prop_name ) + 1		96803	1					
ANR	96849	Argument	ZSTR_VAL ( prop_name ) + 1		96803	0					
ANR	96850	AdditiveExpression	ZSTR_VAL ( prop_name ) + 1		96803	0		+			
ANR	96851	CallExpression	ZSTR_VAL ( prop_name )		96803	0					
ANR	96852	Callee	ZSTR_VAL		96803	0					
ANR	96853	Identifier	ZSTR_VAL		96803	0					
ANR	96854	ArgumentList	prop_name		96803	1					
ANR	96855	Argument	prop_name		96803	0					
ANR	96856	Identifier	prop_name		96803	0					
ANR	96857	PrimaryExpression	1		96803	1					
ANR	96858	Argument	src1		96803	1					
ANR	96859	Identifier	src1		96803	0					
ANR	96860	Argument	src1_length + 1		96803	2					
ANR	96861	AdditiveExpression	src1_length + 1		96803	0		+			
ANR	96862	Identifier	src1_length		96803	0					
ANR	96863	PrimaryExpression	1		96803	1					
ANR	96864	ExpressionStatement	"memcpy ( ZSTR_VAL ( prop_name ) + 1 + src1_length + 1 , src2 , src2_length + 1 )"	1186:1:36942:37012	96803	4	True				
ANR	96865	CallExpression	"memcpy ( ZSTR_VAL ( prop_name ) + 1 + src1_length + 1 , src2 , src2_length + 1 )"		96803	0					
ANR	96866	Callee	memcpy		96803	0					
ANR	96867	Identifier	memcpy		96803	0					
ANR	96868	ArgumentList	ZSTR_VAL ( prop_name ) + 1 + src1_length + 1		96803	1					
ANR	96869	Argument	ZSTR_VAL ( prop_name ) + 1 + src1_length + 1		96803	0					
ANR	96870	AdditiveExpression	ZSTR_VAL ( prop_name ) + 1 + src1_length + 1		96803	0		+			
ANR	96871	CallExpression	ZSTR_VAL ( prop_name )		96803	0					
ANR	96872	Callee	ZSTR_VAL		96803	0					
ANR	96873	Identifier	ZSTR_VAL		96803	0					
ANR	96874	ArgumentList	prop_name		96803	1					
ANR	96875	Argument	prop_name		96803	0					
ANR	96876	Identifier	prop_name		96803	0					
ANR	96877	AdditiveExpression	1 + src1_length + 1		96803	1		+			
ANR	96878	PrimaryExpression	1		96803	0					
ANR	96879	AdditiveExpression	src1_length + 1		96803	1		+			
ANR	96880	Identifier	src1_length		96803	0					
ANR	96881	PrimaryExpression	1		96803	1					
ANR	96882	Argument	src2		96803	1					
ANR	96883	Identifier	src2		96803	0					
ANR	96884	Argument	src2_length + 1		96803	2					
ANR	96885	AdditiveExpression	src2_length + 1		96803	0		+			
ANR	96886	Identifier	src2_length		96803	0					
ANR	96887	PrimaryExpression	1		96803	1					
ANR	96888	ReturnStatement	return prop_name ;	1187:1:37015:37031	96803	5	True				
ANR	96889	Identifier	prop_name		96803	0					
ANR	96890	ReturnType	ZEND_API zend_string *		96803	1					
ANR	96891	Identifier	zend_mangle_property_name		96803	2					
ANR	96892	ParameterList	"const char * src1 , size_t src1_length , const char * src2 , size_t src2_length , int internal"		96803	3					
ANR	96893	Parameter	const char * src1	1179:48:36616:36631	96803	0	True				
ANR	96894	ParameterType	const char *		96803	0					
ANR	96895	Identifier	src1		96803	1					
ANR	96896	Parameter	size_t src1_length	1179:66:36634:36651	96803	1	True				
ANR	96897	ParameterType	size_t		96803	0					
ANR	96898	Identifier	src1_length		96803	1					
ANR	96899	Parameter	const char * src2	1179:86:36654:36669	96803	2	True				
ANR	96900	ParameterType	const char *		96803	0					
ANR	96901	Identifier	src2		96803	1					
ANR	96902	Parameter	size_t src2_length	1179:104:36672:36689	96803	3	True				
ANR	96903	ParameterType	size_t		96803	0					
ANR	96904	Identifier	src2_length		96803	1					
ANR	96905	Parameter	int internal	1179:124:36692:36703	96803	4	True				
ANR	96906	ParameterType	int		96803	0					
ANR	96907	Identifier	internal		96803	1					
ANR	96908	CFGEntryNode	ENTRY		96803		True				
ANR	96909	CFGExitNode	EXIT		96803		True				
ANR	96910	Symbol	prop_name		96803						
ANR	96911	Symbol	internal		96803						
ANR	96912	Symbol	zend_string_alloc		96803						
ANR	96913	Symbol	src1_length		96803						
ANR	96914	Symbol	src2_length		96803						
ANR	96915	Symbol	src1		96803						
ANR	96916	Symbol	src2		96803						
ANR	96917	Symbol	prop_name_length		96803						
ANR	96918	Symbol	ZSTR_VAL		96803						
ANR	96919	Symbol	* ZSTR_VAL		96803						
ANR	96920	Function	zend_strnlen	1191:0:37046:37197							
ANR	96921	FunctionDef	"zend_strnlen (const char * s , size_t maxlen)"		96920	0					
ANR	96922	CompoundStatement		1192:0:37132:37197	96920	0					
ANR	96923	IdentifierDeclStatement	size_t len = 0 ;	1193:1:37135:37149	96920	0	True				
ANR	96924	IdentifierDecl	len = 0		96920	0					
ANR	96925	IdentifierDeclType	size_t		96920	0					
ANR	96926	Identifier	len		96920	1					
ANR	96927	AssignmentExpression	len = 0		96920	2		=			
ANR	96928	Identifier	len		96920	0					
ANR	96929	PrimaryExpression	0		96920	1					
ANR	96930	WhileStatement	while ( * s ++ && maxlen -- )		96920	1					
ANR	96931	Condition	* s ++ && maxlen --	1194:8:37159:37174	96920	0	True				
ANR	96932	AndExpression	* s ++ && maxlen --		96920	0		&&			
ANR	96933	UnaryOperationExpression	* s ++		96920	0					
ANR	96934	UnaryOperator	*		96920	0					
ANR	96935	PostIncDecOperationExpression	s ++		96920	1					
ANR	96936	Identifier	s		96920	0					
ANR	96937	IncDec	++		96920	1					
ANR	96938	PostIncDecOperationExpression	maxlen --		96920	1					
ANR	96939	Identifier	maxlen		96920	0					
ANR	96940	IncDec	--		96920	1					
ANR	96941	ExpressionStatement	len ++	1194:26:37177:37182	96920	1	True				
ANR	96942	PostIncDecOperationExpression	len ++		96920	0					
ANR	96943	Identifier	len		96920	0					
ANR	96944	IncDec	++		96920	1					
ANR	96945	ReturnStatement	return len ;	1195:1:37185:37195	96920	2	True				
ANR	96946	Identifier	len		96920	0					
ANR	96947	ReturnType	static zend_always_inline size_t		96920	1					
ANR	96948	Identifier	zend_strnlen		96920	2					
ANR	96949	ParameterList	"const char * s , size_t maxlen"		96920	3					
ANR	96950	Parameter	const char * s	1191:46:37092:37104	96920	0	True				
ANR	96951	ParameterType	const char *		96920	0					
ANR	96952	Identifier	s		96920	1					
ANR	96953	Parameter	size_t maxlen	1191:61:37107:37119	96920	1	True				
ANR	96954	ParameterType	size_t		96920	0					
ANR	96955	Identifier	maxlen		96920	1					
ANR	96956	CFGEntryNode	ENTRY		96920		True				
ANR	96957	CFGExitNode	EXIT		96920		True				
ANR	96958	Symbol	* s ++		96920						
ANR	96959	Symbol	s		96920						
ANR	96960	Symbol	len		96920						
ANR	96961	Symbol	maxlen		96920						
ANR	96962	Function	zend_unmangle_property_name_ex	1199:0:37210:38505							
ANR	96963	FunctionDef	"zend_unmangle_property_name_ex (const zend_string * name , const char * * class_name , const char * * prop_name , size_t * prop_len)"		96962	0					
ANR	96964	CompoundStatement		1200:0:37356:38505	96962	0					
ANR	96965	IdentifierDeclStatement	size_t class_name_len ;	1201:1:37359:37380	96962	0	True				
ANR	96966	IdentifierDecl	class_name_len		96962	0					
ANR	96967	IdentifierDeclType	size_t		96962	0					
ANR	96968	Identifier	class_name_len		96962	1					
ANR	96969	IdentifierDeclStatement	size_t anonclass_src_len ;	1202:1:37383:37407	96962	1	True				
ANR	96970	IdentifierDecl	anonclass_src_len		96962	0					
ANR	96971	IdentifierDeclType	size_t		96962	0					
ANR	96972	Identifier	anonclass_src_len		96962	1					
ANR	96973	ExpressionStatement	* class_name = NULL	1204:1:37411:37429	96962	2	True				
ANR	96974	AssignmentExpression	* class_name = NULL		96962	0		=			
ANR	96975	UnaryOperationExpression	* class_name		96962	0					
ANR	96976	UnaryOperator	*		96962	0					
ANR	96977	Identifier	class_name		96962	1					
ANR	96978	Identifier	NULL		96962	1					
ANR	96979	IfStatement	if ( ZSTR_VAL ( name ) [ 0 ] != '\\0' )		96962	3					
ANR	96980	Condition	ZSTR_VAL ( name ) [ 0 ] != '\\0'	1206:5:37437:37461	96962	0	True				
ANR	96981	EqualityExpression	ZSTR_VAL ( name ) [ 0 ] != '\\0'		96962	0		!=			
ANR	96982	ArrayIndexing	ZSTR_VAL ( name ) [ 0 ]		96962	0					
ANR	96983	CallExpression	ZSTR_VAL ( name )		96962	0					
ANR	96984	Callee	ZSTR_VAL		96962	0					
ANR	96985	Identifier	ZSTR_VAL		96962	0					
ANR	96986	ArgumentList	name		96962	1					
ANR	96987	Argument	name		96962	0					
ANR	96988	Identifier	name		96962	0					
ANR	96989	PrimaryExpression	0		96962	1					
ANR	96990	PrimaryExpression	'\\0'		96962	1					
ANR	96991	CompoundStatement		7:32:107:107	96962	1					
ANR	96992	ExpressionStatement	* prop_name = ZSTR_VAL ( name )	1207:2:37468:37495	96962	0	True				
ANR	96993	AssignmentExpression	* prop_name = ZSTR_VAL ( name )		96962	0		=			
ANR	96994	UnaryOperationExpression	* prop_name		96962	0					
ANR	96995	UnaryOperator	*		96962	0					
ANR	96996	Identifier	prop_name		96962	1					
ANR	96997	CallExpression	ZSTR_VAL ( name )		96962	1					
ANR	96998	Callee	ZSTR_VAL		96962	0					
ANR	96999	Identifier	ZSTR_VAL		96962	0					
ANR	97000	ArgumentList	name		96962	1					
ANR	97001	Argument	name		96962	0					
ANR	97002	Identifier	name		96962	0					
ANR	97003	IfStatement	if ( prop_len )		96962	1					
ANR	97004	Condition	prop_len	1208:6:37503:37510	96962	0	True				
ANR	97005	Identifier	prop_len		96962	0					
ANR	97006	CompoundStatement		9:16:156:156	96962	1					
ANR	97007	ExpressionStatement	* prop_len = ZSTR_LEN ( name )	1209:3:37518:37544	96962	0	True				
ANR	97008	AssignmentExpression	* prop_len = ZSTR_LEN ( name )		96962	0		=			
ANR	97009	UnaryOperationExpression	* prop_len		96962	0					
ANR	97010	UnaryOperator	*		96962	0					
ANR	97011	Identifier	prop_len		96962	1					
ANR	97012	CallExpression	ZSTR_LEN ( name )		96962	1					
ANR	97013	Callee	ZSTR_LEN		96962	0					
ANR	97014	Identifier	ZSTR_LEN		96962	0					
ANR	97015	ArgumentList	name		96962	1					
ANR	97016	Argument	name		96962	0					
ANR	97017	Identifier	name		96962	0					
ANR	97018	ReturnStatement	return SUCCESS ;	1211:2:37552:37566	96962	2	True				
ANR	97019	Identifier	SUCCESS		96962	0					
ANR	97020	IfStatement	if ( ZSTR_LEN ( name ) < 3 || ZSTR_VAL ( name ) [ 1 ] == '\\0' )		96962	4					
ANR	97021	Condition	ZSTR_LEN ( name ) < 3 || ZSTR_VAL ( name ) [ 1 ] == '\\0'	1213:5:37576:37622	96962	0	True				
ANR	97022	OrExpression	ZSTR_LEN ( name ) < 3 || ZSTR_VAL ( name ) [ 1 ] == '\\0'		96962	0		||			
ANR	97023	RelationalExpression	ZSTR_LEN ( name ) < 3		96962	0		<			
ANR	97024	CallExpression	ZSTR_LEN ( name )		96962	0					
ANR	97025	Callee	ZSTR_LEN		96962	0					
ANR	97026	Identifier	ZSTR_LEN		96962	0					
ANR	97027	ArgumentList	name		96962	1					
ANR	97028	Argument	name		96962	0					
ANR	97029	Identifier	name		96962	0					
ANR	97030	PrimaryExpression	3		96962	1					
ANR	97031	EqualityExpression	ZSTR_VAL ( name ) [ 1 ] == '\\0'		96962	1		==			
ANR	97032	ArrayIndexing	ZSTR_VAL ( name ) [ 1 ]		96962	0					
ANR	97033	CallExpression	ZSTR_VAL ( name )		96962	0					
ANR	97034	Callee	ZSTR_VAL		96962	0					
ANR	97035	Identifier	ZSTR_VAL		96962	0					
ANR	97036	ArgumentList	name		96962	1					
ANR	97037	Argument	name		96962	0					
ANR	97038	Identifier	name		96962	0					
ANR	97039	PrimaryExpression	1		96962	1					
ANR	97040	PrimaryExpression	'\\0'		96962	1					
ANR	97041	CompoundStatement		14:54:268:268	96962	1					
ANR	97042	ExpressionStatement	"zend_error ( E_NOTICE , ""Illegal member variable name"" )"	1214:2:37629:37681	96962	0	True				
ANR	97043	CallExpression	"zend_error ( E_NOTICE , ""Illegal member variable name"" )"		96962	0					
ANR	97044	Callee	zend_error		96962	0					
ANR	97045	Identifier	zend_error		96962	0					
ANR	97046	ArgumentList	E_NOTICE		96962	1					
ANR	97047	Argument	E_NOTICE		96962	0					
ANR	97048	Identifier	E_NOTICE		96962	0					
ANR	97049	Argument	"""Illegal member variable name"""		96962	1					
ANR	97050	PrimaryExpression	"""Illegal member variable name"""		96962	0					
ANR	97051	ExpressionStatement	* prop_name = ZSTR_VAL ( name )	1215:2:37685:37712	96962	1	True				
ANR	97052	AssignmentExpression	* prop_name = ZSTR_VAL ( name )		96962	0		=			
ANR	97053	UnaryOperationExpression	* prop_name		96962	0					
ANR	97054	UnaryOperator	*		96962	0					
ANR	97055	Identifier	prop_name		96962	1					
ANR	97056	CallExpression	ZSTR_VAL ( name )		96962	1					
ANR	97057	Callee	ZSTR_VAL		96962	0					
ANR	97058	Identifier	ZSTR_VAL		96962	0					
ANR	97059	ArgumentList	name		96962	1					
ANR	97060	Argument	name		96962	0					
ANR	97061	Identifier	name		96962	0					
ANR	97062	IfStatement	if ( prop_len )		96962	2					
ANR	97063	Condition	prop_len	1216:6:37720:37727	96962	0	True				
ANR	97064	Identifier	prop_len		96962	0					
ANR	97065	CompoundStatement		17:16:373:373	96962	1					
ANR	97066	ExpressionStatement	* prop_len = ZSTR_LEN ( name )	1217:3:37735:37761	96962	0	True				
ANR	97067	AssignmentExpression	* prop_len = ZSTR_LEN ( name )		96962	0		=			
ANR	97068	UnaryOperationExpression	* prop_len		96962	0					
ANR	97069	UnaryOperator	*		96962	0					
ANR	97070	Identifier	prop_len		96962	1					
ANR	97071	CallExpression	ZSTR_LEN ( name )		96962	1					
ANR	97072	Callee	ZSTR_LEN		96962	0					
ANR	97073	Identifier	ZSTR_LEN		96962	0					
ANR	97074	ArgumentList	name		96962	1					
ANR	97075	Argument	name		96962	0					
ANR	97076	Identifier	name		96962	0					
ANR	97077	ReturnStatement	return FAILURE ;	1219:2:37769:37783	96962	3	True				
ANR	97078	Identifier	FAILURE		96962	0					
ANR	97079	ExpressionStatement	"class_name_len = zend_strnlen ( ZSTR_VAL ( name ) + 1 , ZSTR_LEN ( name ) - 2 )"	1222:1:37790:37859	96962	5	True				
ANR	97080	AssignmentExpression	"class_name_len = zend_strnlen ( ZSTR_VAL ( name ) + 1 , ZSTR_LEN ( name ) - 2 )"		96962	0		=			
ANR	97081	Identifier	class_name_len		96962	0					
ANR	97082	CallExpression	"zend_strnlen ( ZSTR_VAL ( name ) + 1 , ZSTR_LEN ( name ) - 2 )"		96962	1					
ANR	97083	Callee	zend_strnlen		96962	0					
ANR	97084	Identifier	zend_strnlen		96962	0					
ANR	97085	ArgumentList	ZSTR_VAL ( name ) + 1		96962	1					
ANR	97086	Argument	ZSTR_VAL ( name ) + 1		96962	0					
ANR	97087	AdditiveExpression	ZSTR_VAL ( name ) + 1		96962	0		+			
ANR	97088	CallExpression	ZSTR_VAL ( name )		96962	0					
ANR	97089	Callee	ZSTR_VAL		96962	0					
ANR	97090	Identifier	ZSTR_VAL		96962	0					
ANR	97091	ArgumentList	name		96962	1					
ANR	97092	Argument	name		96962	0					
ANR	97093	Identifier	name		96962	0					
ANR	97094	PrimaryExpression	1		96962	1					
ANR	97095	Argument	ZSTR_LEN ( name ) - 2		96962	1					
ANR	97096	AdditiveExpression	ZSTR_LEN ( name ) - 2		96962	0		-			
ANR	97097	CallExpression	ZSTR_LEN ( name )		96962	0					
ANR	97098	Callee	ZSTR_LEN		96962	0					
ANR	97099	Identifier	ZSTR_LEN		96962	0					
ANR	97100	ArgumentList	name		96962	1					
ANR	97101	Argument	name		96962	0					
ANR	97102	Identifier	name		96962	0					
ANR	97103	PrimaryExpression	2		96962	1					
ANR	97104	IfStatement	if ( class_name_len >= ZSTR_LEN ( name ) - 2 || ZSTR_VAL ( name ) [ class_name_len + 1 ] != '\\0' )		96962	6					
ANR	97105	Condition	class_name_len >= ZSTR_LEN ( name ) - 2 || ZSTR_VAL ( name ) [ class_name_len + 1 ] != '\\0'	1223:5:37866:37947	96962	0	True				
ANR	97106	OrExpression	class_name_len >= ZSTR_LEN ( name ) - 2 || ZSTR_VAL ( name ) [ class_name_len + 1 ] != '\\0'		96962	0		||			
ANR	97107	RelationalExpression	class_name_len >= ZSTR_LEN ( name ) - 2		96962	0		>=			
ANR	97108	Identifier	class_name_len		96962	0					
ANR	97109	AdditiveExpression	ZSTR_LEN ( name ) - 2		96962	1		-			
ANR	97110	CallExpression	ZSTR_LEN ( name )		96962	0					
ANR	97111	Callee	ZSTR_LEN		96962	0					
ANR	97112	Identifier	ZSTR_LEN		96962	0					
ANR	97113	ArgumentList	name		96962	1					
ANR	97114	Argument	name		96962	0					
ANR	97115	Identifier	name		96962	0					
ANR	97116	PrimaryExpression	2		96962	1					
ANR	97117	EqualityExpression	ZSTR_VAL ( name ) [ class_name_len + 1 ] != '\\0'		96962	1		!=			
ANR	97118	ArrayIndexing	ZSTR_VAL ( name ) [ class_name_len + 1 ]		96962	0					
ANR	97119	CallExpression	ZSTR_VAL ( name )		96962	0					
ANR	97120	Callee	ZSTR_VAL		96962	0					
ANR	97121	Identifier	ZSTR_VAL		96962	0					
ANR	97122	ArgumentList	name		96962	1					
ANR	97123	Argument	name		96962	0					
ANR	97124	Identifier	name		96962	0					
ANR	97125	AdditiveExpression	class_name_len + 1		96962	1		+			
ANR	97126	Identifier	class_name_len		96962	0					
ANR	97127	PrimaryExpression	1		96962	1					
ANR	97128	PrimaryExpression	'\\0'		96962	1					
ANR	97129	CompoundStatement		24:89:593:593	96962	1					
ANR	97130	ExpressionStatement	"zend_error ( E_NOTICE , ""Corrupt member variable name"" )"	1224:2:37954:38006	96962	0	True				
ANR	97131	CallExpression	"zend_error ( E_NOTICE , ""Corrupt member variable name"" )"		96962	0					
ANR	97132	Callee	zend_error		96962	0					
ANR	97133	Identifier	zend_error		96962	0					
ANR	97134	ArgumentList	E_NOTICE		96962	1					
ANR	97135	Argument	E_NOTICE		96962	0					
ANR	97136	Identifier	E_NOTICE		96962	0					
ANR	97137	Argument	"""Corrupt member variable name"""		96962	1					
ANR	97138	PrimaryExpression	"""Corrupt member variable name"""		96962	0					
ANR	97139	ExpressionStatement	* prop_name = ZSTR_VAL ( name )	1225:2:38010:38037	96962	1	True				
ANR	97140	AssignmentExpression	* prop_name = ZSTR_VAL ( name )		96962	0		=			
ANR	97141	UnaryOperationExpression	* prop_name		96962	0					
ANR	97142	UnaryOperator	*		96962	0					
ANR	97143	Identifier	prop_name		96962	1					
ANR	97144	CallExpression	ZSTR_VAL ( name )		96962	1					
ANR	97145	Callee	ZSTR_VAL		96962	0					
ANR	97146	Identifier	ZSTR_VAL		96962	0					
ANR	97147	ArgumentList	name		96962	1					
ANR	97148	Argument	name		96962	0					
ANR	97149	Identifier	name		96962	0					
ANR	97150	IfStatement	if ( prop_len )		96962	2					
ANR	97151	Condition	prop_len	1226:6:38045:38052	96962	0	True				
ANR	97152	Identifier	prop_len		96962	0					
ANR	97153	CompoundStatement		27:16:698:698	96962	1					
ANR	97154	ExpressionStatement	* prop_len = ZSTR_LEN ( name )	1227:3:38060:38086	96962	0	True				
ANR	97155	AssignmentExpression	* prop_len = ZSTR_LEN ( name )		96962	0		=			
ANR	97156	UnaryOperationExpression	* prop_len		96962	0					
ANR	97157	UnaryOperator	*		96962	0					
ANR	97158	Identifier	prop_len		96962	1					
ANR	97159	CallExpression	ZSTR_LEN ( name )		96962	1					
ANR	97160	Callee	ZSTR_LEN		96962	0					
ANR	97161	Identifier	ZSTR_LEN		96962	0					
ANR	97162	ArgumentList	name		96962	1					
ANR	97163	Argument	name		96962	0					
ANR	97164	Identifier	name		96962	0					
ANR	97165	ReturnStatement	return FAILURE ;	1229:2:38094:38108	96962	3	True				
ANR	97166	Identifier	FAILURE		96962	0					
ANR	97167	ExpressionStatement	* class_name = ZSTR_VAL ( name ) + 1	1232:1:38115:38147	96962	7	True				
ANR	97168	AssignmentExpression	* class_name = ZSTR_VAL ( name ) + 1		96962	0		=			
ANR	97169	UnaryOperationExpression	* class_name		96962	0					
ANR	97170	UnaryOperator	*		96962	0					
ANR	97171	Identifier	class_name		96962	1					
ANR	97172	AdditiveExpression	ZSTR_VAL ( name ) + 1		96962	1		+			
ANR	97173	CallExpression	ZSTR_VAL ( name )		96962	0					
ANR	97174	Callee	ZSTR_VAL		96962	0					
ANR	97175	Identifier	ZSTR_VAL		96962	0					
ANR	97176	ArgumentList	name		96962	1					
ANR	97177	Argument	name		96962	0					
ANR	97178	Identifier	name		96962	0					
ANR	97179	PrimaryExpression	1		96962	1					
ANR	97180	ExpressionStatement	"anonclass_src_len = zend_strnlen ( * class_name + class_name_len + 1 , ZSTR_LEN ( name ) - class_name_len - 2 )"	1233:1:38150:38253	96962	8	True				
ANR	97181	AssignmentExpression	"anonclass_src_len = zend_strnlen ( * class_name + class_name_len + 1 , ZSTR_LEN ( name ) - class_name_len - 2 )"		96962	0		=			
ANR	97182	Identifier	anonclass_src_len		96962	0					
ANR	97183	CallExpression	"zend_strnlen ( * class_name + class_name_len + 1 , ZSTR_LEN ( name ) - class_name_len - 2 )"		96962	1					
ANR	97184	Callee	zend_strnlen		96962	0					
ANR	97185	Identifier	zend_strnlen		96962	0					
ANR	97186	ArgumentList	* class_name + class_name_len + 1		96962	1					
ANR	97187	Argument	* class_name + class_name_len + 1		96962	0					
ANR	97188	AdditiveExpression	* class_name + class_name_len + 1		96962	0		+			
ANR	97189	UnaryOperationExpression	* class_name		96962	0					
ANR	97190	UnaryOperator	*		96962	0					
ANR	97191	Identifier	class_name		96962	1					
ANR	97192	AdditiveExpression	class_name_len + 1		96962	1		+			
ANR	97193	Identifier	class_name_len		96962	0					
ANR	97194	PrimaryExpression	1		96962	1					
ANR	97195	Argument	ZSTR_LEN ( name ) - class_name_len - 2		96962	1					
ANR	97196	AdditiveExpression	ZSTR_LEN ( name ) - class_name_len - 2		96962	0		-			
ANR	97197	CallExpression	ZSTR_LEN ( name )		96962	0					
ANR	97198	Callee	ZSTR_LEN		96962	0					
ANR	97199	Identifier	ZSTR_LEN		96962	0					
ANR	97200	ArgumentList	name		96962	1					
ANR	97201	Argument	name		96962	0					
ANR	97202	Identifier	name		96962	0					
ANR	97203	AdditiveExpression	class_name_len - 2		96962	1		-			
ANR	97204	Identifier	class_name_len		96962	0					
ANR	97205	PrimaryExpression	2		96962	1					
ANR	97206	IfStatement	if ( class_name_len + anonclass_src_len + 2 != ZSTR_LEN ( name ) )		96962	9					
ANR	97207	Condition	class_name_len + anonclass_src_len + 2 != ZSTR_LEN ( name )	1234:5:38260:38315	96962	0	True				
ANR	97208	EqualityExpression	class_name_len + anonclass_src_len + 2 != ZSTR_LEN ( name )		96962	0		!=			
ANR	97209	AdditiveExpression	class_name_len + anonclass_src_len + 2		96962	0		+			
ANR	97210	Identifier	class_name_len		96962	0					
ANR	97211	AdditiveExpression	anonclass_src_len + 2		96962	1		+			
ANR	97212	Identifier	anonclass_src_len		96962	0					
ANR	97213	PrimaryExpression	2		96962	1					
ANR	97214	CallExpression	ZSTR_LEN ( name )		96962	1					
ANR	97215	Callee	ZSTR_LEN		96962	0					
ANR	97216	Identifier	ZSTR_LEN		96962	0					
ANR	97217	ArgumentList	name		96962	1					
ANR	97218	Argument	name		96962	0					
ANR	97219	Identifier	name		96962	0					
ANR	97220	CompoundStatement		35:63:961:961	96962	1					
ANR	97221	ExpressionStatement	class_name_len += anonclass_src_len + 1	1235:2:38322:38361	96962	0	True				
ANR	97222	AssignmentExpression	class_name_len += anonclass_src_len + 1		96962	0		+=			
ANR	97223	Identifier	class_name_len		96962	0					
ANR	97224	AdditiveExpression	anonclass_src_len + 1		96962	1		+			
ANR	97225	Identifier	anonclass_src_len		96962	0					
ANR	97226	PrimaryExpression	1		96962	1					
ANR	97227	ExpressionStatement	* prop_name = ZSTR_VAL ( name ) + class_name_len + 2	1237:1:38367:38415	96962	10	True				
ANR	97228	AssignmentExpression	* prop_name = ZSTR_VAL ( name ) + class_name_len + 2		96962	0		=			
ANR	97229	UnaryOperationExpression	* prop_name		96962	0					
ANR	97230	UnaryOperator	*		96962	0					
ANR	97231	Identifier	prop_name		96962	1					
ANR	97232	AdditiveExpression	ZSTR_VAL ( name ) + class_name_len + 2		96962	1		+			
ANR	97233	CallExpression	ZSTR_VAL ( name )		96962	0					
ANR	97234	Callee	ZSTR_VAL		96962	0					
ANR	97235	Identifier	ZSTR_VAL		96962	0					
ANR	97236	ArgumentList	name		96962	1					
ANR	97237	Argument	name		96962	0					
ANR	97238	Identifier	name		96962	0					
ANR	97239	AdditiveExpression	class_name_len + 2		96962	1		+			
ANR	97240	Identifier	class_name_len		96962	0					
ANR	97241	PrimaryExpression	2		96962	1					
ANR	97242	IfStatement	if ( prop_len )		96962	11					
ANR	97243	Condition	prop_len	1238:5:38422:38429	96962	0	True				
ANR	97244	Identifier	prop_len		96962	0					
ANR	97245	CompoundStatement		39:15:1075:1075	96962	1					
ANR	97246	ExpressionStatement	* prop_len = ZSTR_LEN ( name ) - class_name_len - 2	1239:2:38436:38483	96962	0	True				
ANR	97247	AssignmentExpression	* prop_len = ZSTR_LEN ( name ) - class_name_len - 2		96962	0		=			
ANR	97248	UnaryOperationExpression	* prop_len		96962	0					
ANR	97249	UnaryOperator	*		96962	0					
ANR	97250	Identifier	prop_len		96962	1					
ANR	97251	AdditiveExpression	ZSTR_LEN ( name ) - class_name_len - 2		96962	1		-			
ANR	97252	CallExpression	ZSTR_LEN ( name )		96962	0					
ANR	97253	Callee	ZSTR_LEN		96962	0					
ANR	97254	Identifier	ZSTR_LEN		96962	0					
ANR	97255	ArgumentList	name		96962	1					
ANR	97256	Argument	name		96962	0					
ANR	97257	Identifier	name		96962	0					
ANR	97258	AdditiveExpression	class_name_len - 2		96962	1		-			
ANR	97259	Identifier	class_name_len		96962	0					
ANR	97260	PrimaryExpression	2		96962	1					
ANR	97261	ReturnStatement	return SUCCESS ;	1241:1:38489:38503	96962	12	True				
ANR	97262	Identifier	SUCCESS		96962	0					
ANR	97263	ReturnType	ZEND_API int		96962	1					
ANR	97264	Identifier	zend_unmangle_property_name_ex		96962	2					
ANR	97265	ParameterList	"const zend_string * name , const char * * class_name , const char * * prop_name , size_t * prop_len"		96962	3					
ANR	97266	Parameter	const zend_string * name	1199:44:37254:37276	96962	0	True				
ANR	97267	ParameterType	const zend_string *		96962	0					
ANR	97268	Identifier	name		96962	1					
ANR	97269	Parameter	const char * * class_name	1199:69:37279:37301	96962	1	True				
ANR	97270	ParameterType	const char * *		96962	0					
ANR	97271	Identifier	class_name		96962	1					
ANR	97272	Parameter	const char * * prop_name	1199:94:37304:37325	96962	2	True				
ANR	97273	ParameterType	const char * *		96962	0					
ANR	97274	Identifier	prop_name		96962	1					
ANR	97275	Parameter	size_t * prop_len	1199:118:37328:37343	96962	3	True				
ANR	97276	ParameterType	size_t *		96962	0					
ANR	97277	Identifier	prop_len		96962	1					
ANR	97278	CFGEntryNode	ENTRY		96962		True				
ANR	97279	CFGExitNode	EXIT		96962		True				
ANR	97280	Symbol	NULL		96962						
ANR	97281	Symbol	* class_name		96962						
ANR	97282	Symbol	SUCCESS		96962						
ANR	97283	Symbol	E_NOTICE		96962						
ANR	97284	Symbol	* prop_len		96962						
ANR	97285	Symbol	FAILURE		96962						
ANR	97286	Symbol	* class_name_len		96962						
ANR	97287	Symbol	ZSTR_VAL		96962						
ANR	97288	Symbol	zend_strnlen		96962						
ANR	97289	Symbol	prop_name		96962						
ANR	97290	Symbol	prop_len		96962						
ANR	97291	Symbol	name		96962						
ANR	97292	Symbol	anonclass_src_len		96962						
ANR	97293	Symbol	ZSTR_LEN		96962						
ANR	97294	Symbol	* prop_name		96962						
ANR	97295	Symbol	class_name_len		96962						
ANR	97296	Symbol	class_name		96962						
ANR	97297	Symbol	* ZSTR_VAL		96962						
ANR	97298	Function	zend_lookup_reserved_const	1245:0:38518:38779							
ANR	97299	FunctionDef	"zend_lookup_reserved_const (const char * name , size_t len)"		97298	0					
ANR	97300	CompoundStatement		1246:0:38607:38779	97298	0					
ANR	97301	IdentifierDeclStatement	"zend_constant * c = zend_hash_find_ptr_lc ( EG ( zend_constants ) , name , len ) ;"	1247:1:38610:38681	97298	0	True				
ANR	97302	IdentifierDecl	"* c = zend_hash_find_ptr_lc ( EG ( zend_constants ) , name , len )"		97298	0					
ANR	97303	IdentifierDeclType	zend_constant *		97298	0					
ANR	97304	Identifier	c		97298	1					
ANR	97305	AssignmentExpression	"* c = zend_hash_find_ptr_lc ( EG ( zend_constants ) , name , len )"		97298	2		=			
ANR	97306	Identifier	c		97298	0					
ANR	97307	CallExpression	"zend_hash_find_ptr_lc ( EG ( zend_constants ) , name , len )"		97298	1					
ANR	97308	Callee	zend_hash_find_ptr_lc		97298	0					
ANR	97309	Identifier	zend_hash_find_ptr_lc		97298	0					
ANR	97310	ArgumentList	EG ( zend_constants )		97298	1					
ANR	97311	Argument	EG ( zend_constants )		97298	0					
ANR	97312	CallExpression	EG ( zend_constants )		97298	0					
ANR	97313	Callee	EG		97298	0					
ANR	97314	Identifier	EG		97298	0					
ANR	97315	ArgumentList	zend_constants		97298	1					
ANR	97316	Argument	zend_constants		97298	0					
ANR	97317	Identifier	zend_constants		97298	0					
ANR	97318	Argument	name		97298	1					
ANR	97319	Identifier	name		97298	0					
ANR	97320	Argument	len		97298	2					
ANR	97321	Identifier	len		97298	0					
ANR	97322	IfStatement	if ( c && ! ( c -> flags & CONST_CS ) && ( c -> flags & CONST_CT_SUBST ) )		97298	1					
ANR	97323	Condition	c && ! ( c -> flags & CONST_CS ) && ( c -> flags & CONST_CT_SUBST )	1248:5:38688:38745	97298	0	True				
ANR	97324	AndExpression	c && ! ( c -> flags & CONST_CS ) && ( c -> flags & CONST_CT_SUBST )		97298	0		&&			
ANR	97325	Identifier	c		97298	0					
ANR	97326	AndExpression	! ( c -> flags & CONST_CS ) && ( c -> flags & CONST_CT_SUBST )		97298	1		&&			
ANR	97327	UnaryOperationExpression	! ( c -> flags & CONST_CS )		97298	0					
ANR	97328	UnaryOperator	!		97298	0					
ANR	97329	BitAndExpression	c -> flags & CONST_CS		97298	1		&			
ANR	97330	PtrMemberAccess	c -> flags		97298	0					
ANR	97331	Identifier	c		97298	0					
ANR	97332	Identifier	flags		97298	1					
ANR	97333	Identifier	CONST_CS		97298	1					
ANR	97334	BitAndExpression	c -> flags & CONST_CT_SUBST		97298	1		&			
ANR	97335	PtrMemberAccess	c -> flags		97298	0					
ANR	97336	Identifier	c		97298	0					
ANR	97337	Identifier	flags		97298	1					
ANR	97338	Identifier	CONST_CT_SUBST		97298	1					
ANR	97339	CompoundStatement		3:65:140:140	97298	1					
ANR	97340	ReturnStatement	return c ;	1249:2:38752:38760	97298	0	True				
ANR	97341	Identifier	c		97298	0					
ANR	97342	ReturnStatement	return NULL ;	1251:1:38766:38777	97298	2	True				
ANR	97343	Identifier	NULL		97298	0					
ANR	97344	ReturnType	static zend_constant *		97298	1					
ANR	97345	Identifier	zend_lookup_reserved_const		97298	2					
ANR	97346	ParameterList	"const char * name , size_t len"		97298	3					
ANR	97347	Parameter	const char * name	1245:49:38567:38582	97298	0	True				
ANR	97348	ParameterType	const char *		97298	0					
ANR	97349	Identifier	name		97298	1					
ANR	97350	Parameter	size_t len	1245:67:38585:38594	97298	1	True				
ANR	97351	ParameterType	size_t		97298	0					
ANR	97352	Identifier	len		97298	1					
ANR	97353	CFGEntryNode	ENTRY		97298		True				
ANR	97354	CFGExitNode	EXIT		97298		True				
ANR	97355	Symbol	CONST_CT_SUBST		97298						
ANR	97356	Symbol	zend_hash_find_ptr_lc		97298						
ANR	97357	Symbol	EG		97298						
ANR	97358	Symbol	CONST_CS		97298						
ANR	97359	Symbol	c		97298						
ANR	97360	Symbol	c -> flags		97298						
ANR	97361	Symbol	NULL		97298						
ANR	97362	Symbol	len		97298						
ANR	97363	Symbol	zend_constants		97298						
ANR	97364	Symbol	name		97298						
ANR	97365	Symbol	* c		97298						
ANR	97366	Function	zend_try_ct_eval_const	1255:0:38792:39712							
ANR	97367	FunctionDef	"zend_try_ct_eval_const (zval * zv , zend_string * name , zend_bool is_fully_qualified)"		97366	0					
ANR	97368	CompoundStatement		1256:0:38901:39712	97366	0					
ANR	97369	IdentifierDeclStatement	zend_constant * c ;	1257:1:38904:38920	97366	0	True				
ANR	97370	IdentifierDecl	* c		97366	0					
ANR	97371	IdentifierDeclType	zend_constant *		97366	0					
ANR	97372	Identifier	c		97366	1					
ANR	97373	ExpressionStatement	"c = zend_hash_find_ptr ( EG ( zend_constants ) , name )"	1260:1:38982:39030	97366	1	True				
ANR	97374	AssignmentExpression	"c = zend_hash_find_ptr ( EG ( zend_constants ) , name )"		97366	0		=			
ANR	97375	Identifier	c		97366	0					
ANR	97376	CallExpression	"zend_hash_find_ptr ( EG ( zend_constants ) , name )"		97366	1					
ANR	97377	Callee	zend_hash_find_ptr		97366	0					
ANR	97378	Identifier	zend_hash_find_ptr		97366	0					
ANR	97379	ArgumentList	EG ( zend_constants )		97366	1					
ANR	97380	Argument	EG ( zend_constants )		97366	0					
ANR	97381	CallExpression	EG ( zend_constants )		97366	0					
ANR	97382	Callee	EG		97366	0					
ANR	97383	Identifier	EG		97366	0					
ANR	97384	ArgumentList	zend_constants		97366	1					
ANR	97385	Argument	zend_constants		97366	0					
ANR	97386	Identifier	zend_constants		97366	0					
ANR	97387	Argument	name		97366	1					
ANR	97388	Identifier	name		97366	0					
ANR	97389	IfStatement	if ( c && ( ( ( c -> flags & CONST_PERSISTENT ) && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION ) ) || ( Z_TYPE ( c -> value ) < IS_OBJECT && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) ) ) )		97366	2					
ANR	97390	Condition	c && ( ( ( c -> flags & CONST_PERSISTENT ) && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION ) ) || ( Z_TYPE ( c -> value ) < IS_OBJECT && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) ) )	1261:5:39037:39267	97366	0	True				
ANR	97391	AndExpression	c && ( ( ( c -> flags & CONST_PERSISTENT ) && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION ) ) || ( Z_TYPE ( c -> value ) < IS_OBJECT && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) ) )		97366	0		&&			
ANR	97392	Identifier	c		97366	0					
ANR	97393	OrExpression	( ( c -> flags & CONST_PERSISTENT ) && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION ) ) || ( Z_TYPE ( c -> value ) < IS_OBJECT && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) )		97366	1		||			
ANR	97394	AndExpression	( c -> flags & CONST_PERSISTENT ) && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION )		97366	0		&&			
ANR	97395	BitAndExpression	c -> flags & CONST_PERSISTENT		97366	0		&			
ANR	97396	PtrMemberAccess	c -> flags		97366	0					
ANR	97397	Identifier	c		97366	0					
ANR	97398	Identifier	flags		97366	1					
ANR	97399	Identifier	CONST_PERSISTENT		97366	1					
ANR	97400	UnaryOperationExpression	! ( CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION )		97366	1					
ANR	97401	UnaryOperator	!		97366	0					
ANR	97402	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		97366	1		&			
ANR	97403	CallExpression	CG ( compiler_options )		97366	0					
ANR	97404	Callee	CG		97366	0					
ANR	97405	Identifier	CG		97366	0					
ANR	97406	ArgumentList	compiler_options		97366	1					
ANR	97407	Argument	compiler_options		97366	0					
ANR	97408	Identifier	compiler_options		97366	0					
ANR	97409	Identifier	ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		97366	1					
ANR	97410	AndExpression	Z_TYPE ( c -> value ) < IS_OBJECT && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION )		97366	1		&&			
ANR	97411	RelationalExpression	Z_TYPE ( c -> value ) < IS_OBJECT		97366	0		<			
ANR	97412	CallExpression	Z_TYPE ( c -> value )		97366	0					
ANR	97413	Callee	Z_TYPE		97366	0					
ANR	97414	Identifier	Z_TYPE		97366	0					
ANR	97415	ArgumentList	c -> value		97366	1					
ANR	97416	Argument	c -> value		97366	0					
ANR	97417	PtrMemberAccess	c -> value		97366	0					
ANR	97418	Identifier	c		97366	0					
ANR	97419	Identifier	value		97366	1					
ANR	97420	Identifier	IS_OBJECT		97366	1					
ANR	97421	UnaryOperationExpression	! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION )		97366	1					
ANR	97422	UnaryOperator	!		97366	0					
ANR	97423	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		97366	1		&			
ANR	97424	CallExpression	CG ( compiler_options )		97366	0					
ANR	97425	Callee	CG		97366	0					
ANR	97426	Identifier	CG		97366	0					
ANR	97427	ArgumentList	compiler_options		97366	1					
ANR	97428	Argument	compiler_options		97366	0					
ANR	97429	Identifier	compiler_options		97366	0					
ANR	97430	Identifier	ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		97366	1					
ANR	97431	CompoundStatement		9:4:368:368	97366	1					
ANR	97432	ExpressionStatement	"ZVAL_DUP ( zv , & c -> value )"	1265:2:39274:39297	97366	0	True				
ANR	97433	CallExpression	"ZVAL_DUP ( zv , & c -> value )"		97366	0					
ANR	97434	Callee	ZVAL_DUP		97366	0					
ANR	97435	Identifier	ZVAL_DUP		97366	0					
ANR	97436	ArgumentList	zv		97366	1					
ANR	97437	Argument	zv		97366	0					
ANR	97438	Identifier	zv		97366	0					
ANR	97439	Argument	& c -> value		97366	1					
ANR	97440	UnaryOperationExpression	& c -> value		97366	0					
ANR	97441	UnaryOperator	&		97366	0					
ANR	97442	PtrMemberAccess	c -> value		97366	1					
ANR	97443	Identifier	c		97366	0					
ANR	97444	Identifier	value		97366	1					
ANR	97445	ReturnStatement	return 1 ;	1266:2:39301:39309	97366	1	True				
ANR	97446	PrimaryExpression	1		97366	0					
ANR	97447	CompoundStatement		17:2:546:580	97366	3					
ANR	97448	IdentifierDeclStatement	const char * lookup_name = ZSTR_VAL ( name ) ;	1271:2:39404:39444	97366	0	True				
ANR	97449	IdentifierDecl	* lookup_name = ZSTR_VAL ( name )		97366	0					
ANR	97450	IdentifierDeclType	const char *		97366	0					
ANR	97451	Identifier	lookup_name		97366	1					
ANR	97452	AssignmentExpression	* lookup_name = ZSTR_VAL ( name )		97366	2		=			
ANR	97453	Identifier	lookup_name		97366	0					
ANR	97454	CallExpression	ZSTR_VAL ( name )		97366	1					
ANR	97455	Callee	ZSTR_VAL		97366	0					
ANR	97456	Identifier	ZSTR_VAL		97366	0					
ANR	97457	ArgumentList	name		97366	1					
ANR	97458	Argument	name		97366	0					
ANR	97459	Identifier	name		97366	0					
ANR	97460	IdentifierDeclStatement	size_t lookup_len = ZSTR_LEN ( name ) ;	1272:2:39448:39482	97366	1	True				
ANR	97461	IdentifierDecl	lookup_len = ZSTR_LEN ( name )		97366	0					
ANR	97462	IdentifierDeclType	size_t		97366	0					
ANR	97463	Identifier	lookup_len		97366	1					
ANR	97464	AssignmentExpression	lookup_len = ZSTR_LEN ( name )		97366	2		=			
ANR	97465	Identifier	lookup_len		97366	0					
ANR	97466	CallExpression	ZSTR_LEN ( name )		97366	1					
ANR	97467	Callee	ZSTR_LEN		97366	0					
ANR	97468	Identifier	ZSTR_LEN		97366	0					
ANR	97469	ArgumentList	name		97366	1					
ANR	97470	Argument	name		97366	0					
ANR	97471	Identifier	name		97366	0					
ANR	97472	IfStatement	if ( ! is_fully_qualified )		97366	2					
ANR	97473	Condition	! is_fully_qualified	1274:6:39491:39509	97366	0	True				
ANR	97474	UnaryOperationExpression	! is_fully_qualified		97366	0					
ANR	97475	UnaryOperator	!		97366	0					
ANR	97476	Identifier	is_fully_qualified		97366	1					
ANR	97477	CompoundStatement		19:27:610:610	97366	1					
ANR	97478	ExpressionStatement	"zend_get_unqualified_name ( name , & lookup_name , & lookup_len )"	1275:3:39517:39575	97366	0	True				
ANR	97479	CallExpression	"zend_get_unqualified_name ( name , & lookup_name , & lookup_len )"		97366	0					
ANR	97480	Callee	zend_get_unqualified_name		97366	0					
ANR	97481	Identifier	zend_get_unqualified_name		97366	0					
ANR	97482	ArgumentList	name		97366	1					
ANR	97483	Argument	name		97366	0					
ANR	97484	Identifier	name		97366	0					
ANR	97485	Argument	& lookup_name		97366	1					
ANR	97486	UnaryOperationExpression	& lookup_name		97366	0					
ANR	97487	UnaryOperator	&		97366	0					
ANR	97488	Identifier	lookup_name		97366	1					
ANR	97489	Argument	& lookup_len		97366	2					
ANR	97490	UnaryOperationExpression	& lookup_len		97366	0					
ANR	97491	UnaryOperator	&		97366	0					
ANR	97492	Identifier	lookup_len		97366	1					
ANR	97493	ExpressionStatement	"c = zend_lookup_reserved_const ( lookup_name , lookup_len )"	1278:2:39584:39639	97366	3	True				
ANR	97494	AssignmentExpression	"c = zend_lookup_reserved_const ( lookup_name , lookup_len )"		97366	0		=			
ANR	97495	Identifier	c		97366	0					
ANR	97496	CallExpression	"zend_lookup_reserved_const ( lookup_name , lookup_len )"		97366	1					
ANR	97497	Callee	zend_lookup_reserved_const		97366	0					
ANR	97498	Identifier	zend_lookup_reserved_const		97366	0					
ANR	97499	ArgumentList	lookup_name		97366	1					
ANR	97500	Argument	lookup_name		97366	0					
ANR	97501	Identifier	lookup_name		97366	0					
ANR	97502	Argument	lookup_len		97366	1					
ANR	97503	Identifier	lookup_len		97366	0					
ANR	97504	IfStatement	if ( c )		97366	4					
ANR	97505	Condition	c	1279:6:39647:39647	97366	0	True				
ANR	97506	Identifier	c		97366	0					
ANR	97507	CompoundStatement		24:9:748:748	97366	1					
ANR	97508	ExpressionStatement	"ZVAL_DUP ( zv , & c -> value )"	1280:3:39655:39678	97366	0	True				
ANR	97509	CallExpression	"ZVAL_DUP ( zv , & c -> value )"		97366	0					
ANR	97510	Callee	ZVAL_DUP		97366	0					
ANR	97511	Identifier	ZVAL_DUP		97366	0					
ANR	97512	ArgumentList	zv		97366	1					
ANR	97513	Argument	zv		97366	0					
ANR	97514	Identifier	zv		97366	0					
ANR	97515	Argument	& c -> value		97366	1					
ANR	97516	UnaryOperationExpression	& c -> value		97366	0					
ANR	97517	UnaryOperator	&		97366	0					
ANR	97518	PtrMemberAccess	c -> value		97366	1					
ANR	97519	Identifier	c		97366	0					
ANR	97520	Identifier	value		97366	1					
ANR	97521	ReturnStatement	return 1 ;	1281:3:39683:39691	97366	1	True				
ANR	97522	PrimaryExpression	1		97366	0					
ANR	97523	ReturnStatement	return 0 ;	1285:1:39702:39710	97366	4	True				
ANR	97524	PrimaryExpression	0		97366	0					
ANR	97525	ReturnType	static zend_bool		97366	1					
ANR	97526	Identifier	zend_try_ct_eval_const		97366	2					
ANR	97527	ParameterList	"zval * zv , zend_string * name , zend_bool is_fully_qualified"		97366	3					
ANR	97528	Parameter	zval * zv	1255:40:38832:38839	97366	0	True				
ANR	97529	ParameterType	zval *		97366	0					
ANR	97530	Identifier	zv		97366	1					
ANR	97531	Parameter	zend_string * name	1255:50:38842:38858	97366	1	True				
ANR	97532	ParameterType	zend_string *		97366	0					
ANR	97533	Identifier	name		97366	1					
ANR	97534	Parameter	zend_bool is_fully_qualified	1255:69:38861:38888	97366	2	True				
ANR	97535	ParameterType	zend_bool		97366	0					
ANR	97536	Identifier	is_fully_qualified		97366	1					
ANR	97537	CFGEntryNode	ENTRY		97366		True				
ANR	97538	CFGExitNode	EXIT		97366		True				
ANR	97539	Symbol	c -> flags		97366						
ANR	97540	Symbol	ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		97366						
ANR	97541	Symbol	Z_TYPE		97366						
ANR	97542	Symbol	c -> value		97366						
ANR	97543	Symbol	compiler_options		97366						
ANR	97544	Symbol	& c -> value		97366						
ANR	97545	Symbol	lookup_name		97366						
ANR	97546	Symbol	lookup_len		97366						
ANR	97547	Symbol	zend_constants		97366						
ANR	97548	Symbol	CONST_PERSISTENT		97366						
ANR	97549	Symbol	ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		97366						
ANR	97550	Symbol	zend_hash_find_ptr		97366						
ANR	97551	Symbol	EG		97366						
ANR	97552	Symbol	c		97366						
ANR	97553	Symbol	CG		97366						
ANR	97554	Symbol	zend_lookup_reserved_const		97366						
ANR	97555	Symbol	is_fully_qualified		97366						
ANR	97556	Symbol	* c		97366						
ANR	97557	Symbol	ZSTR_VAL		97366						
ANR	97558	Symbol	& lookup_len		97366						
ANR	97559	Symbol	name		97366						
ANR	97560	Symbol	ZSTR_LEN		97366						
ANR	97561	Symbol	zv		97366						
ANR	97562	Symbol	IS_OBJECT		97366						
ANR	97563	Symbol	& lookup_name		97366						
ANR	97564	Function	zend_is_scope_known	1289:0:39725:40286							
ANR	97565	FunctionDef	zend_is_scope_known ()		97564	0					
ANR	97566	CompoundStatement		1290:0:39781:40286	97564	0					
ANR	97567	IfStatement	if ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_CLOSURE )		97564	0					
ANR	97568	Condition	CG ( active_op_array ) -> fn_flags & ZEND_ACC_CLOSURE	1291:5:39788:39835	97564	0	True				
ANR	97569	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_CLOSURE		97564	0		&			
ANR	97570	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		97564	0					
ANR	97571	CallExpression	CG ( active_op_array )		97564	0					
ANR	97572	Callee	CG		97564	0					
ANR	97573	Identifier	CG		97564	0					
ANR	97574	ArgumentList	active_op_array		97564	1					
ANR	97575	Argument	active_op_array		97564	0					
ANR	97576	Identifier	active_op_array		97564	0					
ANR	97577	Identifier	fn_flags		97564	1					
ANR	97578	Identifier	ZEND_ACC_CLOSURE		97564	1					
ANR	97579	CompoundStatement		2:55:56:56	97564	1					
ANR	97580	ReturnStatement	return 0 ;	1293:2:39895:39903	97564	0	True				
ANR	97581	PrimaryExpression	0		97564	0					
ANR	97582	IfStatement	if ( ! CG ( active_class_entry ) )		97564	1					
ANR	97583	Condition	! CG ( active_class_entry )	1296:5:39914:39936	97564	0	True				
ANR	97584	UnaryOperationExpression	! CG ( active_class_entry )		97564	0					
ANR	97585	UnaryOperator	!		97564	0					
ANR	97586	CallExpression	CG ( active_class_entry )		97564	1					
ANR	97587	Callee	CG		97564	0					
ANR	97588	Identifier	CG		97564	0					
ANR	97589	ArgumentList	active_class_entry		97564	1					
ANR	97590	Argument	active_class_entry		97564	0					
ANR	97591	Identifier	active_class_entry		97564	0					
ANR	97592	CompoundStatement		7:30:157:157	97564	1					
ANR	97593	ReturnStatement	return CG ( active_op_array ) -> function_name != NULL ;	1299:2:40090:40139	97564	0	True				
ANR	97594	EqualityExpression	CG ( active_op_array ) -> function_name != NULL		97564	0		!=			
ANR	97595	PtrMemberAccess	CG ( active_op_array ) -> function_name		97564	0					
ANR	97596	CallExpression	CG ( active_op_array )		97564	0					
ANR	97597	Callee	CG		97564	0					
ANR	97598	Identifier	CG		97564	0					
ANR	97599	ArgumentList	active_op_array		97564	1					
ANR	97600	Argument	active_op_array		97564	0					
ANR	97601	Identifier	active_op_array		97564	0					
ANR	97602	Identifier	function_name		97564	1					
ANR	97603	Identifier	NULL		97564	1					
ANR	97604	ReturnStatement	return ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) == 0 ;	1303:1:40221:40284	97564	2	True				
ANR	97605	EqualityExpression	( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) == 0		97564	0		==			
ANR	97606	BitAndExpression	CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT		97564	0		&			
ANR	97607	PtrMemberAccess	CG ( active_class_entry ) -> ce_flags		97564	0					
ANR	97608	CallExpression	CG ( active_class_entry )		97564	0					
ANR	97609	Callee	CG		97564	0					
ANR	97610	Identifier	CG		97564	0					
ANR	97611	ArgumentList	active_class_entry		97564	1					
ANR	97612	Argument	active_class_entry		97564	0					
ANR	97613	Identifier	active_class_entry		97564	0					
ANR	97614	Identifier	ce_flags		97564	1					
ANR	97615	Identifier	ZEND_ACC_TRAIT		97564	1					
ANR	97616	PrimaryExpression	0		97564	1					
ANR	97617	ReturnType	static inline zend_bool		97564	1					
ANR	97618	Identifier	zend_is_scope_known		97564	2					
ANR	97619	ParameterList			97564	3					
ANR	97620	CFGEntryNode	ENTRY		97564		True				
ANR	97621	CFGExitNode	EXIT		97564		True				
ANR	97622	Symbol	CG ( active_op_array ) -> function_name		97564						
ANR	97623	Symbol	ZEND_ACC_CLOSURE		97564						
ANR	97624	Symbol	NULL		97564						
ANR	97625	Symbol	CG		97564						
ANR	97626	Symbol	active_op_array		97564						
ANR	97627	Symbol	active_class_entry		97564						
ANR	97628	Symbol	* CG		97564						
ANR	97629	Symbol	CG ( active_class_entry ) -> ce_flags		97564						
ANR	97630	Symbol	CG ( active_op_array ) -> fn_flags		97564						
ANR	97631	Symbol	ZEND_ACC_TRAIT		97564						
ANR	97632	Function	class_name_refers_to_active_ce	1307:0:40299:40660							
ANR	97633	FunctionDef	"class_name_refers_to_active_ce (zend_string * class_name , uint32_t fetch_type)"		97632	0					
ANR	97634	CompoundStatement		1308:0:40410:40660	97632	0					
ANR	97635	IfStatement	if ( ! CG ( active_class_entry ) )		97632	0					
ANR	97636	Condition	! CG ( active_class_entry )	1309:5:40417:40439	97632	0	True				
ANR	97637	UnaryOperationExpression	! CG ( active_class_entry )		97632	0					
ANR	97638	UnaryOperator	!		97632	0					
ANR	97639	CallExpression	CG ( active_class_entry )		97632	1					
ANR	97640	Callee	CG		97632	0					
ANR	97641	Identifier	CG		97632	0					
ANR	97642	ArgumentList	active_class_entry		97632	1					
ANR	97643	Argument	active_class_entry		97632	0					
ANR	97644	Identifier	active_class_entry		97632	0					
ANR	97645	CompoundStatement		2:30:31:31	97632	1					
ANR	97646	ReturnStatement	return 0 ;	1310:2:40446:40454	97632	0	True				
ANR	97647	PrimaryExpression	0		97632	0					
ANR	97648	IfStatement	if ( fetch_type == ZEND_FETCH_CLASS_SELF && zend_is_scope_known ( ) )		97632	1					
ANR	97649	Condition	fetch_type == ZEND_FETCH_CLASS_SELF && zend_is_scope_known ( )	1312:5:40464:40523	97632	0	True				
ANR	97650	AndExpression	fetch_type == ZEND_FETCH_CLASS_SELF && zend_is_scope_known ( )		97632	0		&&			
ANR	97651	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_SELF		97632	0		==			
ANR	97652	Identifier	fetch_type		97632	0					
ANR	97653	Identifier	ZEND_FETCH_CLASS_SELF		97632	1					
ANR	97654	CallExpression	zend_is_scope_known ( )		97632	1					
ANR	97655	Callee	zend_is_scope_known		97632	0					
ANR	97656	Identifier	zend_is_scope_known		97632	0					
ANR	97657	ArgumentList			97632	1					
ANR	97658	CompoundStatement		5:67:115:115	97632	1					
ANR	97659	ReturnStatement	return 1 ;	1313:2:40530:40538	97632	0	True				
ANR	97660	PrimaryExpression	1		97632	0					
ANR	97661	ReturnStatement	"return fetch_type == ZEND_FETCH_CLASS_DEFAULT && zend_string_equals_ci ( class_name , CG ( active_class_entry ) -> name ) ;"	1315:1:40544:40658	97632	2	True				
ANR	97662	AndExpression	"fetch_type == ZEND_FETCH_CLASS_DEFAULT && zend_string_equals_ci ( class_name , CG ( active_class_entry ) -> name )"		97632	0		&&			
ANR	97663	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_DEFAULT		97632	0		==			
ANR	97664	Identifier	fetch_type		97632	0					
ANR	97665	Identifier	ZEND_FETCH_CLASS_DEFAULT		97632	1					
ANR	97666	CallExpression	"zend_string_equals_ci ( class_name , CG ( active_class_entry ) -> name )"		97632	1					
ANR	97667	Callee	zend_string_equals_ci		97632	0					
ANR	97668	Identifier	zend_string_equals_ci		97632	0					
ANR	97669	ArgumentList	class_name		97632	1					
ANR	97670	Argument	class_name		97632	0					
ANR	97671	Identifier	class_name		97632	0					
ANR	97672	Argument	CG ( active_class_entry ) -> name		97632	1					
ANR	97673	PtrMemberAccess	CG ( active_class_entry ) -> name		97632	0					
ANR	97674	CallExpression	CG ( active_class_entry )		97632	0					
ANR	97675	Callee	CG		97632	0					
ANR	97676	Identifier	CG		97632	0					
ANR	97677	ArgumentList	active_class_entry		97632	1					
ANR	97678	Argument	active_class_entry		97632	0					
ANR	97679	Identifier	active_class_entry		97632	0					
ANR	97680	Identifier	name		97632	1					
ANR	97681	ReturnType	static inline zend_bool		97632	1					
ANR	97682	Identifier	class_name_refers_to_active_ce		97632	2					
ANR	97683	ParameterList	"zend_string * class_name , uint32_t fetch_type"		97632	3					
ANR	97684	Parameter	zend_string * class_name	1307:55:40354:40376	97632	0	True				
ANR	97685	ParameterType	zend_string *		97632	0					
ANR	97686	Identifier	class_name		97632	1					
ANR	97687	Parameter	uint32_t fetch_type	1307:80:40379:40397	97632	1	True				
ANR	97688	ParameterType	uint32_t		97632	0					
ANR	97689	Identifier	fetch_type		97632	1					
ANR	97690	CFGEntryNode	ENTRY		97632		True				
ANR	97691	CFGExitNode	EXIT		97632		True				
ANR	97692	Symbol	zend_is_scope_known		97632						
ANR	97693	Symbol	ZEND_FETCH_CLASS_DEFAULT		97632						
ANR	97694	Symbol	fetch_type		97632						
ANR	97695	Symbol	CG		97632						
ANR	97696	Symbol	ZEND_FETCH_CLASS_SELF		97632						
ANR	97697	Symbol	zend_string_equals_ci		97632						
ANR	97698	Symbol	active_class_entry		97632						
ANR	97699	Symbol	* CG		97632						
ANR	97700	Symbol	CG ( active_class_entry ) -> name		97632						
ANR	97701	Symbol	class_name		97632						
ANR	97702	Function	zend_get_class_fetch_type	1320:0:40673:41061							
ANR	97703	FunctionDef	zend_get_class_fetch_type (zend_string * name)		97702	0					
ANR	97704	CompoundStatement		1321:0:40737:41061	97702	0					
ANR	97705	IfStatement	"if ( zend_string_equals_literal_ci ( name , ""self"" ) )"		97702	0					
ANR	97706	Condition	"zend_string_equals_literal_ci ( name , ""self"" )"	1322:5:40744:40786	97702	0	True				
ANR	97707	CallExpression	"zend_string_equals_literal_ci ( name , ""self"" )"		97702	0					
ANR	97708	Callee	zend_string_equals_literal_ci		97702	0					
ANR	97709	Identifier	zend_string_equals_literal_ci		97702	0					
ANR	97710	ArgumentList	name		97702	1					
ANR	97711	Argument	name		97702	0					
ANR	97712	Identifier	name		97702	0					
ANR	97713	Argument	"""self"""		97702	1					
ANR	97714	PrimaryExpression	"""self"""		97702	0					
ANR	97715	CompoundStatement		2:50:51:51	97702	1					
ANR	97716	ReturnStatement	return ZEND_FETCH_CLASS_SELF ;	1323:2:40793:40821	97702	0	True				
ANR	97717	Identifier	ZEND_FETCH_CLASS_SELF		97702	0					
ANR	97718	ElseStatement	else		97702	0					
ANR	97719	IfStatement	"if ( zend_string_equals_literal_ci ( name , ""parent"" ) )"		97702	0					
ANR	97720	Condition	"zend_string_equals_literal_ci ( name , ""parent"" )"	1324:12:40835:40879	97702	0	True				
ANR	97721	CallExpression	"zend_string_equals_literal_ci ( name , ""parent"" )"		97702	0					
ANR	97722	Callee	zend_string_equals_literal_ci		97702	0					
ANR	97723	Identifier	zend_string_equals_literal_ci		97702	0					
ANR	97724	ArgumentList	name		97702	1					
ANR	97725	Argument	name		97702	0					
ANR	97726	Identifier	name		97702	0					
ANR	97727	Argument	"""parent"""		97702	1					
ANR	97728	PrimaryExpression	"""parent"""		97702	0					
ANR	97729	CompoundStatement		4:59:144:144	97702	1					
ANR	97730	ReturnStatement	return ZEND_FETCH_CLASS_PARENT ;	1325:2:40886:40916	97702	0	True				
ANR	97731	Identifier	ZEND_FETCH_CLASS_PARENT		97702	0					
ANR	97732	ElseStatement	else		97702	0					
ANR	97733	IfStatement	"if ( zend_string_equals_literal_ci ( name , ""static"" ) )"		97702	0					
ANR	97734	Condition	"zend_string_equals_literal_ci ( name , ""static"" )"	1326:12:40930:40974	97702	0	True				
ANR	97735	CallExpression	"zend_string_equals_literal_ci ( name , ""static"" )"		97702	0					
ANR	97736	Callee	zend_string_equals_literal_ci		97702	0					
ANR	97737	Identifier	zend_string_equals_literal_ci		97702	0					
ANR	97738	ArgumentList	name		97702	1					
ANR	97739	Argument	name		97702	0					
ANR	97740	Identifier	name		97702	0					
ANR	97741	Argument	"""static"""		97702	1					
ANR	97742	PrimaryExpression	"""static"""		97702	0					
ANR	97743	CompoundStatement		6:59:239:239	97702	1					
ANR	97744	ReturnStatement	return ZEND_FETCH_CLASS_STATIC ;	1327:2:40981:41011	97702	0	True				
ANR	97745	Identifier	ZEND_FETCH_CLASS_STATIC		97702	0					
ANR	97746	ElseStatement	else		97702	0					
ANR	97747	CompoundStatement		8:8:283:283	97702	0					
ANR	97748	ReturnStatement	return ZEND_FETCH_CLASS_DEFAULT ;	1329:2:41025:41056	97702	0	True				
ANR	97749	Identifier	ZEND_FETCH_CLASS_DEFAULT		97702	0					
ANR	97750	ReturnType	uint32_t		97702	1					
ANR	97751	Identifier	zend_get_class_fetch_type		97702	2					
ANR	97752	ParameterList	zend_string * name		97702	3					
ANR	97753	Parameter	zend_string * name	1320:35:40708:40724	97702	0	True				
ANR	97754	ParameterType	zend_string *		97702	0					
ANR	97755	Identifier	name		97702	1					
ANR	97756	CFGEntryNode	ENTRY		97702		True				
ANR	97757	CFGExitNode	EXIT		97702		True				
ANR	97758	Symbol	ZEND_FETCH_CLASS_DEFAULT		97702						
ANR	97759	Symbol	ZEND_FETCH_CLASS_SELF		97702						
ANR	97760	Symbol	ZEND_FETCH_CLASS_STATIC		97702						
ANR	97761	Symbol	name		97702						
ANR	97762	Symbol	ZEND_FETCH_CLASS_PARENT		97702						
ANR	97763	Symbol	zend_string_equals_literal_ci		97702						
ANR	97764	Function	zend_get_class_fetch_type_ast	1334:0:41074:41346							
ANR	97765	FunctionDef	zend_get_class_fetch_type_ast (zend_ast * name_ast)		97764	0					
ANR	97766	CompoundStatement		1335:0:41150:41346	97764	0					
ANR	97767	IfStatement	if ( name_ast -> attr == ZEND_NAME_FQ )		97764	0					
ANR	97768	Condition	name_ast -> attr == ZEND_NAME_FQ	1337:5:41210:41239	97764	0	True				
ANR	97769	EqualityExpression	name_ast -> attr == ZEND_NAME_FQ		97764	0		==			
ANR	97770	PtrMemberAccess	name_ast -> attr		97764	0					
ANR	97771	Identifier	name_ast		97764	0					
ANR	97772	Identifier	attr		97764	1					
ANR	97773	Identifier	ZEND_NAME_FQ		97764	1					
ANR	97774	CompoundStatement		3:37:91:91	97764	1					
ANR	97775	ReturnStatement	return ZEND_FETCH_CLASS_DEFAULT ;	1338:2:41246:41277	97764	0	True				
ANR	97776	Identifier	ZEND_FETCH_CLASS_DEFAULT		97764	0					
ANR	97777	ReturnStatement	return zend_get_class_fetch_type ( zend_ast_get_str ( name_ast ) ) ;	1341:1:41284:41344	97764	1	True				
ANR	97778	CallExpression	zend_get_class_fetch_type ( zend_ast_get_str ( name_ast ) )		97764	0					
ANR	97779	Callee	zend_get_class_fetch_type		97764	0					
ANR	97780	Identifier	zend_get_class_fetch_type		97764	0					
ANR	97781	ArgumentList	zend_ast_get_str ( name_ast )		97764	1					
ANR	97782	Argument	zend_ast_get_str ( name_ast )		97764	0					
ANR	97783	CallExpression	zend_ast_get_str ( name_ast )		97764	0					
ANR	97784	Callee	zend_ast_get_str		97764	0					
ANR	97785	Identifier	zend_ast_get_str		97764	0					
ANR	97786	ArgumentList	name_ast		97764	1					
ANR	97787	Argument	name_ast		97764	0					
ANR	97788	Identifier	name_ast		97764	0					
ANR	97789	ReturnType	static uint32_t		97764	1					
ANR	97790	Identifier	zend_get_class_fetch_type_ast		97764	2					
ANR	97791	ParameterList	zend_ast * name_ast		97764	3					
ANR	97792	Parameter	zend_ast * name_ast	1334:46:41120:41137	97764	0	True				
ANR	97793	ParameterType	zend_ast *		97764	0					
ANR	97794	Identifier	name_ast		97764	1					
ANR	97795	CFGEntryNode	ENTRY		97764		True				
ANR	97796	CFGExitNode	EXIT		97764		True				
ANR	97797	Symbol	* name_ast		97764						
ANR	97798	Symbol	ZEND_FETCH_CLASS_DEFAULT		97764						
ANR	97799	Symbol	zend_ast_get_str		97764						
ANR	97800	Symbol	ZEND_NAME_FQ		97764						
ANR	97801	Symbol	name_ast		97764						
ANR	97802	Symbol	name_ast -> attr		97764						
ANR	97803	Symbol	zend_get_class_fetch_type		97764						
ANR	97804	Function	zend_ensure_valid_class_fetch_type	1345:0:41359:41746							
ANR	97805	FunctionDef	zend_ensure_valid_class_fetch_type (uint32_t fetch_type)		97804	0					
ANR	97806	CompoundStatement		1346:0:41437:41746	97804	0					
ANR	97807	IfStatement	if ( fetch_type != ZEND_FETCH_CLASS_DEFAULT && ! CG ( active_class_entry ) && zend_is_scope_known ( ) )		97804	0					
ANR	97808	Condition	fetch_type != ZEND_FETCH_CLASS_DEFAULT && ! CG ( active_class_entry ) && zend_is_scope_known ( )	1347:5:41444:41533	97804	0	True				
ANR	97809	AndExpression	fetch_type != ZEND_FETCH_CLASS_DEFAULT && ! CG ( active_class_entry ) && zend_is_scope_known ( )		97804	0		&&			
ANR	97810	EqualityExpression	fetch_type != ZEND_FETCH_CLASS_DEFAULT		97804	0		!=			
ANR	97811	Identifier	fetch_type		97804	0					
ANR	97812	Identifier	ZEND_FETCH_CLASS_DEFAULT		97804	1					
ANR	97813	AndExpression	! CG ( active_class_entry ) && zend_is_scope_known ( )		97804	1		&&			
ANR	97814	UnaryOperationExpression	! CG ( active_class_entry )		97804	0					
ANR	97815	UnaryOperator	!		97804	0					
ANR	97816	CallExpression	CG ( active_class_entry )		97804	1					
ANR	97817	Callee	CG		97804	0					
ANR	97818	Identifier	CG		97804	0					
ANR	97819	ArgumentList	active_class_entry		97804	1					
ANR	97820	Argument	active_class_entry		97804	0					
ANR	97821	Identifier	active_class_entry		97804	0					
ANR	97822	CallExpression	zend_is_scope_known ( )		97804	1					
ANR	97823	Callee	zend_is_scope_known		97804	0					
ANR	97824	Identifier	zend_is_scope_known		97804	0					
ANR	97825	ArgumentList			97804	1					
ANR	97826	CompoundStatement		2:97:98:98	97804	1					
ANR	97827	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use \\""%s\\"" when no class scope is active"" , fetch_type == ZEND_FETCH_CLASS_SELF ? ""self"" : fetch_type == ZEND_FETCH_CLASS_PARENT ? ""parent"" : ""static"" )"	1348:2:41540:41741	97804	0	True				
ANR	97828	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use \\""%s\\"" when no class scope is active"" , fetch_type == ZEND_FETCH_CLASS_SELF ? ""self"" : fetch_type == ZEND_FETCH_CLASS_PARENT ? ""parent"" : ""static"" )"		97804	0					
ANR	97829	Callee	zend_error_noreturn		97804	0					
ANR	97830	Identifier	zend_error_noreturn		97804	0					
ANR	97831	ArgumentList	E_COMPILE_ERROR		97804	1					
ANR	97832	Argument	E_COMPILE_ERROR		97804	0					
ANR	97833	Identifier	E_COMPILE_ERROR		97804	0					
ANR	97834	Argument	"""Cannot use \\""%s\\"" when no class scope is active"""		97804	1					
ANR	97835	PrimaryExpression	"""Cannot use \\""%s\\"" when no class scope is active"""		97804	0					
ANR	97836	Argument	"fetch_type == ZEND_FETCH_CLASS_SELF ? ""self"" : fetch_type == ZEND_FETCH_CLASS_PARENT ? ""parent"" : ""static"""		97804	2					
ANR	97837	ConditionalExpression	"fetch_type == ZEND_FETCH_CLASS_SELF ? ""self"" : fetch_type == ZEND_FETCH_CLASS_PARENT ? ""parent"" : ""static"""		97804	0					
ANR	97838	Condition	fetch_type == ZEND_FETCH_CLASS_SELF		97804	0					
ANR	97839	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_SELF		97804	0		==			
ANR	97840	Identifier	fetch_type		97804	0					
ANR	97841	Identifier	ZEND_FETCH_CLASS_SELF		97804	1					
ANR	97842	PrimaryExpression	"""self"""		97804	1					
ANR	97843	ConditionalExpression	"fetch_type == ZEND_FETCH_CLASS_PARENT ? ""parent"" : ""static"""		97804	2					
ANR	97844	Condition	fetch_type == ZEND_FETCH_CLASS_PARENT		97804	0					
ANR	97845	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_PARENT		97804	0		==			
ANR	97846	Identifier	fetch_type		97804	0					
ANR	97847	Identifier	ZEND_FETCH_CLASS_PARENT		97804	1					
ANR	97848	PrimaryExpression	"""parent"""		97804	1					
ANR	97849	PrimaryExpression	"""static"""		97804	2					
ANR	97850	ReturnType	static void		97804	1					
ANR	97851	Identifier	zend_ensure_valid_class_fetch_type		97804	2					
ANR	97852	ParameterList	uint32_t fetch_type		97804	3					
ANR	97853	Parameter	uint32_t fetch_type	1345:47:41406:41424	97804	0	True				
ANR	97854	ParameterType	uint32_t		97804	0					
ANR	97855	Identifier	fetch_type		97804	1					
ANR	97856	CFGEntryNode	ENTRY		97804		True				
ANR	97857	CFGExitNode	EXIT		97804		True				
ANR	97858	Symbol	zend_is_scope_known		97804						
ANR	97859	Symbol	ZEND_FETCH_CLASS_DEFAULT		97804						
ANR	97860	Symbol	fetch_type		97804						
ANR	97861	Symbol	CG		97804						
ANR	97862	Symbol	ZEND_FETCH_CLASS_SELF		97804						
ANR	97863	Symbol	active_class_entry		97804						
ANR	97864	Symbol	E_COMPILE_ERROR		97804						
ANR	97865	Symbol	ZEND_FETCH_CLASS_PARENT		97804						
ANR	97866	Function	zend_try_compile_const_expr_resolve_class_name	1355:0:41759:43034							
ANR	97867	FunctionDef	"zend_try_compile_const_expr_resolve_class_name (zval * zv , zend_ast * class_ast , zend_ast * name_ast , zend_bool constant)"		97866	0					
ANR	97868	CompoundStatement		1356:0:41904:43034	97866	0					
ANR	97869	IdentifierDeclStatement	uint32_t fetch_type ;	1357:1:41907:41926	97866	0	True				
ANR	97870	IdentifierDecl	fetch_type		97866	0					
ANR	97871	IdentifierDeclType	uint32_t		97866	0					
ANR	97872	Identifier	fetch_type		97866	1					
ANR	97873	IfStatement	if ( name_ast -> kind != ZEND_AST_ZVAL )		97866	1					
ANR	97874	Condition	name_ast -> kind != ZEND_AST_ZVAL	1359:5:41934:41964	97866	0	True				
ANR	97875	EqualityExpression	name_ast -> kind != ZEND_AST_ZVAL		97866	0		!=			
ANR	97876	PtrMemberAccess	name_ast -> kind		97866	0					
ANR	97877	Identifier	name_ast		97866	0					
ANR	97878	Identifier	kind		97866	1					
ANR	97879	Identifier	ZEND_AST_ZVAL		97866	1					
ANR	97880	CompoundStatement		4:38:62:62	97866	1					
ANR	97881	ReturnStatement	return 0 ;	1360:2:41971:41979	97866	0	True				
ANR	97882	PrimaryExpression	0		97866	0					
ANR	97883	IfStatement	"if ( ! zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""class"" ) )"		97866	2					
ANR	97884	Condition	"! zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""class"" )"	1363:5:41990:42056	97866	0	True				
ANR	97885	UnaryOperationExpression	"! zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""class"" )"		97866	0					
ANR	97886	UnaryOperator	!		97866	0					
ANR	97887	CallExpression	"zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""class"" )"		97866	1					
ANR	97888	Callee	zend_string_equals_literal_ci		97866	0					
ANR	97889	Identifier	zend_string_equals_literal_ci		97866	0					
ANR	97890	ArgumentList	zend_ast_get_str ( name_ast )		97866	1					
ANR	97891	Argument	zend_ast_get_str ( name_ast )		97866	0					
ANR	97892	CallExpression	zend_ast_get_str ( name_ast )		97866	0					
ANR	97893	Callee	zend_ast_get_str		97866	0					
ANR	97894	Identifier	zend_ast_get_str		97866	0					
ANR	97895	ArgumentList	name_ast		97866	1					
ANR	97896	Argument	name_ast		97866	0					
ANR	97897	Identifier	name_ast		97866	0					
ANR	97898	Argument	"""class"""		97866	1					
ANR	97899	PrimaryExpression	"""class"""		97866	0					
ANR	97900	CompoundStatement		8:74:154:154	97866	1					
ANR	97901	ReturnStatement	return 0 ;	1364:2:42063:42071	97866	0	True				
ANR	97902	PrimaryExpression	0		97866	0					
ANR	97903	IfStatement	if ( class_ast -> kind != ZEND_AST_ZVAL )		97866	3					
ANR	97904	Condition	class_ast -> kind != ZEND_AST_ZVAL	1367:5:42082:42113	97866	0	True				
ANR	97905	EqualityExpression	class_ast -> kind != ZEND_AST_ZVAL		97866	0		!=			
ANR	97906	PtrMemberAccess	class_ast -> kind		97866	0					
ANR	97907	Identifier	class_ast		97866	0					
ANR	97908	Identifier	kind		97866	1					
ANR	97909	Identifier	ZEND_AST_ZVAL		97866	1					
ANR	97910	CompoundStatement		12:39:211:211	97866	1					
ANR	97911	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Dynamic class names are not allowed in compile-time ::class fetch"" )"	1368:2:42120:42228	97866	0	True				
ANR	97912	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Dynamic class names are not allowed in compile-time ::class fetch"" )"		97866	0					
ANR	97913	Callee	zend_error_noreturn		97866	0					
ANR	97914	Identifier	zend_error_noreturn		97866	0					
ANR	97915	ArgumentList	E_COMPILE_ERROR		97866	1					
ANR	97916	Argument	E_COMPILE_ERROR		97866	0					
ANR	97917	Identifier	E_COMPILE_ERROR		97866	0					
ANR	97918	Argument	"""Dynamic class names are not allowed in compile-time ::class fetch"""		97866	1					
ANR	97919	PrimaryExpression	"""Dynamic class names are not allowed in compile-time ::class fetch"""		97866	0					
ANR	97920	ExpressionStatement	fetch_type = zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) )	1372:1:42235:42302	97866	4	True				
ANR	97921	AssignmentExpression	fetch_type = zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) )		97866	0		=			
ANR	97922	Identifier	fetch_type		97866	0					
ANR	97923	CallExpression	zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) )		97866	1					
ANR	97924	Callee	zend_get_class_fetch_type		97866	0					
ANR	97925	Identifier	zend_get_class_fetch_type		97866	0					
ANR	97926	ArgumentList	zend_ast_get_str ( class_ast )		97866	1					
ANR	97927	Argument	zend_ast_get_str ( class_ast )		97866	0					
ANR	97928	CallExpression	zend_ast_get_str ( class_ast )		97866	0					
ANR	97929	Callee	zend_ast_get_str		97866	0					
ANR	97930	Identifier	zend_ast_get_str		97866	0					
ANR	97931	ArgumentList	class_ast		97866	1					
ANR	97932	Argument	class_ast		97866	0					
ANR	97933	Identifier	class_ast		97866	0					
ANR	97934	ExpressionStatement	zend_ensure_valid_class_fetch_type ( fetch_type )	1373:1:42305:42351	97866	5	True				
ANR	97935	CallExpression	zend_ensure_valid_class_fetch_type ( fetch_type )		97866	0					
ANR	97936	Callee	zend_ensure_valid_class_fetch_type		97866	0					
ANR	97937	Identifier	zend_ensure_valid_class_fetch_type		97866	0					
ANR	97938	ArgumentList	fetch_type		97866	1					
ANR	97939	Argument	fetch_type		97866	0					
ANR	97940	Identifier	fetch_type		97866	0					
ANR	97941	SwitchStatement	switch ( fetch_type )		97866	6					
ANR	97942	Condition	fetch_type	1375:9:42363:42372	97866	0	True				
ANR	97943	Identifier	fetch_type		97866	0					
ANR	97944	CompoundStatement		20:21:470:470	97866	1					
ANR	97945	Label	case ZEND_FETCH_CLASS_SELF :	1376:2:42379:42405	97866	0	True				
ANR	97946	Identifier	ZEND_FETCH_CLASS_SELF		97866	0					
ANR	97947	IfStatement	if ( constant || ( CG ( active_class_entry ) && zend_is_scope_known ( ) ) )		97866	1					
ANR	97948	Condition	constant || ( CG ( active_class_entry ) && zend_is_scope_known ( ) )	1377:7:42414:42474	97866	0	True				
ANR	97949	OrExpression	constant || ( CG ( active_class_entry ) && zend_is_scope_known ( ) )		97866	0		||			
ANR	97950	Identifier	constant		97866	0					
ANR	97951	AndExpression	CG ( active_class_entry ) && zend_is_scope_known ( )		97866	1		&&			
ANR	97952	CallExpression	CG ( active_class_entry )		97866	0					
ANR	97953	Callee	CG		97866	0					
ANR	97954	Identifier	CG		97866	0					
ANR	97955	ArgumentList	active_class_entry		97866	1					
ANR	97956	Argument	active_class_entry		97866	0					
ANR	97957	Identifier	active_class_entry		97866	0					
ANR	97958	CallExpression	zend_is_scope_known ( )		97866	1					
ANR	97959	Callee	zend_is_scope_known		97866	0					
ANR	97960	Identifier	zend_is_scope_known		97866	0					
ANR	97961	ArgumentList			97866	1					
ANR	97962	CompoundStatement		22:70:572:572	97866	1					
ANR	97963	ExpressionStatement	"ZVAL_STR_COPY ( zv , CG ( active_class_entry ) -> name )"	1378:4:42483:42530	97866	0	True				
ANR	97964	CallExpression	"ZVAL_STR_COPY ( zv , CG ( active_class_entry ) -> name )"		97866	0					
ANR	97965	Callee	ZVAL_STR_COPY		97866	0					
ANR	97966	Identifier	ZVAL_STR_COPY		97866	0					
ANR	97967	ArgumentList	zv		97866	1					
ANR	97968	Argument	zv		97866	0					
ANR	97969	Identifier	zv		97866	0					
ANR	97970	Argument	CG ( active_class_entry ) -> name		97866	1					
ANR	97971	PtrMemberAccess	CG ( active_class_entry ) -> name		97866	0					
ANR	97972	CallExpression	CG ( active_class_entry )		97866	0					
ANR	97973	Callee	CG		97866	0					
ANR	97974	Identifier	CG		97866	0					
ANR	97975	ArgumentList	active_class_entry		97866	1					
ANR	97976	Argument	active_class_entry		97866	0					
ANR	97977	Identifier	active_class_entry		97866	0					
ANR	97978	Identifier	name		97866	1					
ANR	97979	ElseStatement	else		97866	0					
ANR	97980	CompoundStatement		24:10:637:637	97866	0					
ANR	97981	ExpressionStatement	ZVAL_NULL ( zv )	1380:4:42548:42561	97866	0	True				
ANR	97982	CallExpression	ZVAL_NULL ( zv )		97866	0					
ANR	97983	Callee	ZVAL_NULL		97866	0					
ANR	97984	Identifier	ZVAL_NULL		97866	0					
ANR	97985	ArgumentList	zv		97866	1					
ANR	97986	Argument	zv		97866	0					
ANR	97987	Identifier	zv		97866	0					
ANR	97988	ReturnStatement	return 1 ;	1382:3:42571:42579	97866	2	True				
ANR	97989	PrimaryExpression	1		97866	0					
ANR	97990	Label	case ZEND_FETCH_CLASS_STATIC :	1383:2:42583:42611	97866	3	True				
ANR	97991	Identifier	ZEND_FETCH_CLASS_STATIC		97866	0					
ANR	97992	Label	case ZEND_FETCH_CLASS_PARENT :	1384:2:42615:42643	97866	4	True				
ANR	97993	Identifier	ZEND_FETCH_CLASS_PARENT		97866	0					
ANR	97994	IfStatement	if ( constant )		97866	5					
ANR	97995	Condition	constant	1385:7:42652:42659	97866	0	True				
ANR	97996	Identifier	constant		97866	0					
ANR	97997	CompoundStatement		30:17:757:757	97866	1					
ANR	97998	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s::class cannot be used for compile-time class name resolution"" , fetch_type == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"" )"	1386:4:42668:42847	97866	0	True				
ANR	97999	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s::class cannot be used for compile-time class name resolution"" , fetch_type == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"" )"		97866	0					
ANR	98000	Callee	zend_error_noreturn		97866	0					
ANR	98001	Identifier	zend_error_noreturn		97866	0					
ANR	98002	ArgumentList	E_COMPILE_ERROR		97866	1					
ANR	98003	Argument	E_COMPILE_ERROR		97866	0					
ANR	98004	Identifier	E_COMPILE_ERROR		97866	0					
ANR	98005	Argument	"""%s::class cannot be used for compile-time class name resolution"""		97866	1					
ANR	98006	PrimaryExpression	"""%s::class cannot be used for compile-time class name resolution"""		97866	0					
ANR	98007	Argument	"fetch_type == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"""		97866	2					
ANR	98008	ConditionalExpression	"fetch_type == ZEND_FETCH_CLASS_STATIC ? ""static"" : ""parent"""		97866	0					
ANR	98009	Condition	fetch_type == ZEND_FETCH_CLASS_STATIC		97866	0					
ANR	98010	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_STATIC		97866	0		==			
ANR	98011	Identifier	fetch_type		97866	0					
ANR	98012	Identifier	ZEND_FETCH_CLASS_STATIC		97866	1					
ANR	98013	PrimaryExpression	"""static"""		97866	1					
ANR	98014	PrimaryExpression	"""parent"""		97866	2					
ANR	98015	ElseStatement	else		97866	0					
ANR	98016	CompoundStatement		35:10:954:954	97866	0					
ANR	98017	ExpressionStatement	ZVAL_NULL ( zv )	1391:4:42865:42878	97866	0	True				
ANR	98018	CallExpression	ZVAL_NULL ( zv )		97866	0					
ANR	98019	Callee	ZVAL_NULL		97866	0					
ANR	98020	Identifier	ZVAL_NULL		97866	0					
ANR	98021	ArgumentList	zv		97866	1					
ANR	98022	Argument	zv		97866	0					
ANR	98023	Identifier	zv		97866	0					
ANR	98024	ReturnStatement	return 1 ;	1393:3:42888:42896	97866	6	True				
ANR	98025	PrimaryExpression	1		97866	0					
ANR	98026	Label	case ZEND_FETCH_CLASS_DEFAULT :	1394:2:42900:42929	97866	7	True				
ANR	98027	Identifier	ZEND_FETCH_CLASS_DEFAULT		97866	0					
ANR	98028	ExpressionStatement	"ZVAL_STR ( zv , zend_resolve_class_name_ast ( class_ast ) )"	1395:3:42934:42986	97866	8	True				
ANR	98029	CallExpression	"ZVAL_STR ( zv , zend_resolve_class_name_ast ( class_ast ) )"		97866	0					
ANR	98030	Callee	ZVAL_STR		97866	0					
ANR	98031	Identifier	ZVAL_STR		97866	0					
ANR	98032	ArgumentList	zv		97866	1					
ANR	98033	Argument	zv		97866	0					
ANR	98034	Identifier	zv		97866	0					
ANR	98035	Argument	zend_resolve_class_name_ast ( class_ast )		97866	1					
ANR	98036	CallExpression	zend_resolve_class_name_ast ( class_ast )		97866	0					
ANR	98037	Callee	zend_resolve_class_name_ast		97866	0					
ANR	98038	Identifier	zend_resolve_class_name_ast		97866	0					
ANR	98039	ArgumentList	class_ast		97866	1					
ANR	98040	Argument	class_ast		97866	0					
ANR	98041	Identifier	class_ast		97866	0					
ANR	98042	ReturnStatement	return 1 ;	1396:3:42991:42999	97866	9	True				
ANR	98043	PrimaryExpression	1		97866	0					
ANR	98044	Statement	EMPTY_SWITCH_DEFAULT_CASE	1397:2:43003:43027	97866	10	True				
ANR	98045	Statement	(	1397:27:43028:43028	97866	11	True				
ANR	98046	Statement	)	1397:28:43029:43029	97866	12	True				
ANR	98047	ReturnType	static zend_bool		97866	1					
ANR	98048	Identifier	zend_try_compile_const_expr_resolve_class_name		97866	2					
ANR	98049	ParameterList	"zval * zv , zend_ast * class_ast , zend_ast * name_ast , zend_bool constant"		97866	3					
ANR	98050	Parameter	zval * zv	1355:64:41823:41830	97866	0	True				
ANR	98051	ParameterType	zval *		97866	0					
ANR	98052	Identifier	zv		97866	1					
ANR	98053	Parameter	zend_ast * class_ast	1355:74:41833:41851	97866	1	True				
ANR	98054	ParameterType	zend_ast *		97866	0					
ANR	98055	Identifier	class_ast		97866	1					
ANR	98056	Parameter	zend_ast * name_ast	1355:95:41854:41871	97866	2	True				
ANR	98057	ParameterType	zend_ast *		97866	0					
ANR	98058	Identifier	name_ast		97866	1					
ANR	98059	Parameter	zend_bool constant	1355:115:41874:41891	97866	3	True				
ANR	98060	ParameterType	zend_bool		97866	0					
ANR	98061	Identifier	constant		97866	1					
ANR	98062	CFGEntryNode	ENTRY		97866		True				
ANR	98063	CFGExitNode	EXIT		97866		True				
ANR	98064	Symbol	zend_is_scope_known		97866						
ANR	98065	Symbol	* class_ast		97866						
ANR	98066	Symbol	fetch_type		97866						
ANR	98067	Symbol	constant		97866						
ANR	98068	Symbol	CG		97866						
ANR	98069	Symbol	zend_resolve_class_name_ast		97866						
ANR	98070	Symbol	E_COMPILE_ERROR		97866						
ANR	98071	Symbol	active_class_entry		97866						
ANR	98072	Symbol	* CG		97866						
ANR	98073	Symbol	class_ast		97866						
ANR	98074	Symbol	zend_string_equals_literal_ci		97866						
ANR	98075	Symbol	* name_ast		97866						
ANR	98076	Symbol	class_ast -> kind		97866						
ANR	98077	Symbol	zend_ast_get_str		97866						
ANR	98078	Symbol	name_ast -> kind		97866						
ANR	98079	Symbol	ZEND_FETCH_CLASS_STATIC		97866						
ANR	98080	Symbol	name_ast		97866						
ANR	98081	Symbol	ZEND_AST_ZVAL		97866						
ANR	98082	Symbol	CG ( active_class_entry ) -> name		97866						
ANR	98083	Symbol	zv		97866						
ANR	98084	Symbol	zend_get_class_fetch_type		97866						
ANR	98085	Function	zend_try_ct_eval_class_const	1402:0:43047:43966							
ANR	98086	FunctionDef	"zend_try_ct_eval_class_const (zval * zv , zend_string * class_name , zend_string * name)"		98085	0					
ANR	98087	CompoundStatement		1403:0:43157:43966	98085	0					
ANR	98088	IdentifierDeclStatement	uint32_t fetch_type = zend_get_class_fetch_type ( class_name ) ;	1404:1:43160:43219	98085	0	True				
ANR	98089	IdentifierDecl	fetch_type = zend_get_class_fetch_type ( class_name )		98085	0					
ANR	98090	IdentifierDeclType	uint32_t		98085	0					
ANR	98091	Identifier	fetch_type		98085	1					
ANR	98092	AssignmentExpression	fetch_type = zend_get_class_fetch_type ( class_name )		98085	2		=			
ANR	98093	Identifier	fetch_type		98085	0					
ANR	98094	CallExpression	zend_get_class_fetch_type ( class_name )		98085	1					
ANR	98095	Callee	zend_get_class_fetch_type		98085	0					
ANR	98096	Identifier	zend_get_class_fetch_type		98085	0					
ANR	98097	ArgumentList	class_name		98085	1					
ANR	98098	Argument	class_name		98085	0					
ANR	98099	Identifier	class_name		98085	0					
ANR	98100	IdentifierDeclStatement	zval * c ;	1405:1:43222:43229	98085	1	True				
ANR	98101	IdentifierDecl	* c		98085	0					
ANR	98102	IdentifierDeclType	zval *		98085	0					
ANR	98103	Identifier	c		98085	1					
ANR	98104	IfStatement	"if ( class_name_refers_to_active_ce ( class_name , fetch_type ) )"		98085	2					
ANR	98105	Condition	"class_name_refers_to_active_ce ( class_name , fetch_type )"	1407:5:43237:43290	98085	0	True				
ANR	98106	CallExpression	"class_name_refers_to_active_ce ( class_name , fetch_type )"		98085	0					
ANR	98107	Callee	class_name_refers_to_active_ce		98085	0					
ANR	98108	Identifier	class_name_refers_to_active_ce		98085	0					
ANR	98109	ArgumentList	class_name		98085	1					
ANR	98110	Argument	class_name		98085	0					
ANR	98111	Identifier	class_name		98085	0					
ANR	98112	Argument	fetch_type		98085	1					
ANR	98113	Identifier	fetch_type		98085	0					
ANR	98114	CompoundStatement		5:61:135:135	98085	1					
ANR	98115	ExpressionStatement	"c = zend_hash_find ( & CG ( active_class_entry ) -> constants_table , name )"	1408:2:43297:43363	98085	0	True				
ANR	98116	AssignmentExpression	"c = zend_hash_find ( & CG ( active_class_entry ) -> constants_table , name )"		98085	0		=			
ANR	98117	Identifier	c		98085	0					
ANR	98118	CallExpression	"zend_hash_find ( & CG ( active_class_entry ) -> constants_table , name )"		98085	1					
ANR	98119	Callee	zend_hash_find		98085	0					
ANR	98120	Identifier	zend_hash_find		98085	0					
ANR	98121	ArgumentList	& CG ( active_class_entry ) -> constants_table		98085	1					
ANR	98122	Argument	& CG ( active_class_entry ) -> constants_table		98085	0					
ANR	98123	UnaryOperationExpression	& CG ( active_class_entry ) -> constants_table		98085	0					
ANR	98124	UnaryOperator	&		98085	0					
ANR	98125	PtrMemberAccess	CG ( active_class_entry ) -> constants_table		98085	1					
ANR	98126	CallExpression	CG ( active_class_entry )		98085	0					
ANR	98127	Callee	CG		98085	0					
ANR	98128	Identifier	CG		98085	0					
ANR	98129	ArgumentList	active_class_entry		98085	1					
ANR	98130	Argument	active_class_entry		98085	0					
ANR	98131	Identifier	active_class_entry		98085	0					
ANR	98132	Identifier	constants_table		98085	1					
ANR	98133	Argument	name		98085	1					
ANR	98134	Identifier	name		98085	0					
ANR	98135	ElseStatement	else		98085	0					
ANR	98136	IfStatement	if ( fetch_type == ZEND_FETCH_CLASS_DEFAULT && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION ) )		98085	0					
ANR	98137	Condition	fetch_type == ZEND_FETCH_CLASS_DEFAULT && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION )	1409:12:43377:43481	98085	0	True				
ANR	98138	AndExpression	fetch_type == ZEND_FETCH_CLASS_DEFAULT && ! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION )		98085	0		&&			
ANR	98139	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_DEFAULT		98085	0		==			
ANR	98140	Identifier	fetch_type		98085	0					
ANR	98141	Identifier	ZEND_FETCH_CLASS_DEFAULT		98085	1					
ANR	98142	UnaryOperationExpression	! ( CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION )		98085	1					
ANR	98143	UnaryOperator	!		98085	0					
ANR	98144	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		98085	1		&			
ANR	98145	CallExpression	CG ( compiler_options )		98085	0					
ANR	98146	Callee	CG		98085	0					
ANR	98147	Identifier	CG		98085	0					
ANR	98148	ArgumentList	compiler_options		98085	1					
ANR	98149	Argument	compiler_options		98085	0					
ANR	98150	Identifier	compiler_options		98085	0					
ANR	98151	Identifier	ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		98085	1					
ANR	98152	CompoundStatement		8:2:330:435	98085	1					
ANR	98153	IdentifierDeclStatement	"zend_class_entry * ce = zend_hash_find_ptr_lc ( CG ( class_table ) , ZSTR_VAL ( class_name ) , ZSTR_LEN ( class_name ) ) ;"	1410:2:43488:43593	98085	0	True				
ANR	98154	IdentifierDecl	"* ce = zend_hash_find_ptr_lc ( CG ( class_table ) , ZSTR_VAL ( class_name ) , ZSTR_LEN ( class_name ) )"		98085	0					
ANR	98155	IdentifierDeclType	zend_class_entry *		98085	0					
ANR	98156	Identifier	ce		98085	1					
ANR	98157	AssignmentExpression	"* ce = zend_hash_find_ptr_lc ( CG ( class_table ) , ZSTR_VAL ( class_name ) , ZSTR_LEN ( class_name ) )"		98085	2		=			
ANR	98158	Identifier	ce		98085	0					
ANR	98159	CallExpression	"zend_hash_find_ptr_lc ( CG ( class_table ) , ZSTR_VAL ( class_name ) , ZSTR_LEN ( class_name ) )"		98085	1					
ANR	98160	Callee	zend_hash_find_ptr_lc		98085	0					
ANR	98161	Identifier	zend_hash_find_ptr_lc		98085	0					
ANR	98162	ArgumentList	CG ( class_table )		98085	1					
ANR	98163	Argument	CG ( class_table )		98085	0					
ANR	98164	CallExpression	CG ( class_table )		98085	0					
ANR	98165	Callee	CG		98085	0					
ANR	98166	Identifier	CG		98085	0					
ANR	98167	ArgumentList	class_table		98085	1					
ANR	98168	Argument	class_table		98085	0					
ANR	98169	Identifier	class_table		98085	0					
ANR	98170	Argument	ZSTR_VAL ( class_name )		98085	1					
ANR	98171	CallExpression	ZSTR_VAL ( class_name )		98085	0					
ANR	98172	Callee	ZSTR_VAL		98085	0					
ANR	98173	Identifier	ZSTR_VAL		98085	0					
ANR	98174	ArgumentList	class_name		98085	1					
ANR	98175	Argument	class_name		98085	0					
ANR	98176	Identifier	class_name		98085	0					
ANR	98177	Argument	ZSTR_LEN ( class_name )		98085	2					
ANR	98178	CallExpression	ZSTR_LEN ( class_name )		98085	0					
ANR	98179	Callee	ZSTR_LEN		98085	0					
ANR	98180	Identifier	ZSTR_LEN		98085	0					
ANR	98181	ArgumentList	class_name		98085	1					
ANR	98182	Argument	class_name		98085	0					
ANR	98183	Identifier	class_name		98085	0					
ANR	98184	IfStatement	if ( ce )		98085	1					
ANR	98185	Condition	ce	1411:6:43601:43602	98085	0	True				
ANR	98186	Identifier	ce		98085	0					
ANR	98187	CompoundStatement		9:10:447:447	98085	1					
ANR	98188	ExpressionStatement	"c = zend_hash_find ( & ce -> constants_table , name )"	1412:3:43610:43656	98085	0	True				
ANR	98189	AssignmentExpression	"c = zend_hash_find ( & ce -> constants_table , name )"		98085	0		=			
ANR	98190	Identifier	c		98085	0					
ANR	98191	CallExpression	"zend_hash_find ( & ce -> constants_table , name )"		98085	1					
ANR	98192	Callee	zend_hash_find		98085	0					
ANR	98193	Identifier	zend_hash_find		98085	0					
ANR	98194	ArgumentList	& ce -> constants_table		98085	1					
ANR	98195	Argument	& ce -> constants_table		98085	0					
ANR	98196	UnaryOperationExpression	& ce -> constants_table		98085	0					
ANR	98197	UnaryOperator	&		98085	0					
ANR	98198	PtrMemberAccess	ce -> constants_table		98085	1					
ANR	98199	Identifier	ce		98085	0					
ANR	98200	Identifier	constants_table		98085	1					
ANR	98201	Argument	name		98085	1					
ANR	98202	Identifier	name		98085	0					
ANR	98203	ElseStatement	else		98085	0					
ANR	98204	CompoundStatement		11:9:509:509	98085	0					
ANR	98205	ReturnStatement	return 0 ;	1414:3:43672:43680	98085	0	True				
ANR	98206	PrimaryExpression	0		98085	0					
ANR	98207	ElseStatement	else		98085	0					
ANR	98208	CompoundStatement		14:8:536:536	98085	0					
ANR	98209	ReturnStatement	return 0 ;	1417:2:43698:43706	98085	0	True				
ANR	98210	PrimaryExpression	0		98085	0					
ANR	98211	IfStatement	if ( CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION )		98085	3					
ANR	98212	Condition	CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION	1420:5:43717:43787	98085	0	True				
ANR	98213	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		98085	0		&			
ANR	98214	CallExpression	CG ( compiler_options )		98085	0					
ANR	98215	Callee	CG		98085	0					
ANR	98216	Identifier	CG		98085	0					
ANR	98217	ArgumentList	compiler_options		98085	1					
ANR	98218	Argument	compiler_options		98085	0					
ANR	98219	Identifier	compiler_options		98085	0					
ANR	98220	Identifier	ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		98085	1					
ANR	98221	CompoundStatement		18:78:632:632	98085	1					
ANR	98222	ReturnStatement	return 0 ;	1421:2:43794:43802	98085	0	True				
ANR	98223	PrimaryExpression	0		98085	0					
ANR	98224	IfStatement	if ( c && Z_TYPE_P ( c ) < IS_OBJECT )		98085	4					
ANR	98225	Condition	c && Z_TYPE_P ( c ) < IS_OBJECT	1425:5:43888:43915	98085	0	True				
ANR	98226	AndExpression	c && Z_TYPE_P ( c ) < IS_OBJECT		98085	0		&&			
ANR	98227	Identifier	c		98085	0					
ANR	98228	RelationalExpression	Z_TYPE_P ( c ) < IS_OBJECT		98085	1		<			
ANR	98229	CallExpression	Z_TYPE_P ( c )		98085	0					
ANR	98230	Callee	Z_TYPE_P		98085	0					
ANR	98231	Identifier	Z_TYPE_P		98085	0					
ANR	98232	ArgumentList	c		98085	1					
ANR	98233	Argument	c		98085	0					
ANR	98234	Identifier	c		98085	0					
ANR	98235	Identifier	IS_OBJECT		98085	1					
ANR	98236	CompoundStatement		23:35:760:760	98085	1					
ANR	98237	ExpressionStatement	"ZVAL_DUP ( zv , c )"	1426:2:43922:43937	98085	0	True				
ANR	98238	CallExpression	"ZVAL_DUP ( zv , c )"		98085	0					
ANR	98239	Callee	ZVAL_DUP		98085	0					
ANR	98240	Identifier	ZVAL_DUP		98085	0					
ANR	98241	ArgumentList	zv		98085	1					
ANR	98242	Argument	zv		98085	0					
ANR	98243	Identifier	zv		98085	0					
ANR	98244	Argument	c		98085	1					
ANR	98245	Identifier	c		98085	0					
ANR	98246	ReturnStatement	return 1 ;	1427:2:43941:43949	98085	1	True				
ANR	98247	PrimaryExpression	1		98085	0					
ANR	98248	ReturnStatement	return 0 ;	1430:1:43956:43964	98085	5	True				
ANR	98249	PrimaryExpression	0		98085	0					
ANR	98250	ReturnType	static zend_bool		98085	1					
ANR	98251	Identifier	zend_try_ct_eval_class_const		98085	2					
ANR	98252	ParameterList	"zval * zv , zend_string * class_name , zend_string * name"		98085	3					
ANR	98253	Parameter	zval * zv	1402:46:43093:43100	98085	0	True				
ANR	98254	ParameterType	zval *		98085	0					
ANR	98255	Identifier	zv		98085	1					
ANR	98256	Parameter	zend_string * class_name	1402:56:43103:43125	98085	1	True				
ANR	98257	ParameterType	zend_string *		98085	0					
ANR	98258	Identifier	class_name		98085	1					
ANR	98259	Parameter	zend_string * name	1402:81:43128:43144	98085	2	True				
ANR	98260	ParameterType	zend_string *		98085	0					
ANR	98261	Identifier	name		98085	1					
ANR	98262	CFGEntryNode	ENTRY		98085		True				
ANR	98263	CFGExitNode	EXIT		98085		True				
ANR	98264	Symbol	ZEND_FETCH_CLASS_DEFAULT		98085						
ANR	98265	Symbol	fetch_type		98085						
ANR	98266	Symbol	ce		98085						
ANR	98267	Symbol	c		98085						
ANR	98268	Symbol	CG		98085						
ANR	98269	Symbol	ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		98085						
ANR	98270	Symbol	active_class_entry		98085						
ANR	98271	Symbol	& CG ( active_class_entry ) -> constants_table		98085						
ANR	98272	Symbol	Z_TYPE_P		98085						
ANR	98273	Symbol	ZSTR_VAL		98085						
ANR	98274	Symbol	zend_hash_find		98085						
ANR	98275	Symbol	compiler_options		98085						
ANR	98276	Symbol	zend_hash_find_ptr_lc		98085						
ANR	98277	Symbol	& ce -> constants_table		98085						
ANR	98278	Symbol	name		98085						
ANR	98279	Symbol	ZSTR_LEN		98085						
ANR	98280	Symbol	class_name_refers_to_active_ce		98085						
ANR	98281	Symbol	zv		98085						
ANR	98282	Symbol	ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		98085						
ANR	98283	Symbol	class_table		98085						
ANR	98284	Symbol	IS_OBJECT		98085						
ANR	98285	Symbol	class_name		98085						
ANR	98286	Symbol	zend_get_class_fetch_type		98085						
ANR	98287	Function	zend_add_to_list	1434:0:43979:44255							
ANR	98288	FunctionDef	"zend_add_to_list (void * result , void * item)"		98287	0					
ANR	98289	CompoundStatement		1435:0:44044:44255	98287	0					
ANR	98290	IdentifierDeclStatement	void * * list = * ( void * * ) result ;	1436:1:44047:44076	98287	0	True				
ANR	98291	IdentifierDecl	* * list = * ( void * * ) result		98287	0					
ANR	98292	IdentifierDeclType	void * *		98287	0					
ANR	98293	Identifier	list		98287	1					
ANR	98294	AssignmentExpression	* * list = * ( void * * ) result		98287	2		=			
ANR	98295	Identifier	list		98287	0					
ANR	98296	UnaryOperationExpression	* ( void * * ) result		98287	1					
ANR	98297	UnaryOperator	*		98287	0					
ANR	98298	CastExpression	( void * * ) result		98287	1					
ANR	98299	CastTarget	void * *		98287	0					
ANR	98300	Identifier	result		98287	1					
ANR	98301	IdentifierDeclStatement	size_t n = 0 ;	1437:1:44079:44091	98287	1	True				
ANR	98302	IdentifierDecl	n = 0		98287	0					
ANR	98303	IdentifierDeclType	size_t		98287	0					
ANR	98304	Identifier	n		98287	1					
ANR	98305	AssignmentExpression	n = 0		98287	2		=			
ANR	98306	Identifier	n		98287	0					
ANR	98307	PrimaryExpression	0		98287	1					
ANR	98308	IfStatement	if ( list )		98287	2					
ANR	98309	Condition	list	1439:5:44099:44102	98287	0	True				
ANR	98310	Identifier	list		98287	0					
ANR	98311	CompoundStatement		5:11:60:60	98287	1					
ANR	98312	WhileStatement	while ( list [ n ] )		98287	0					
ANR	98313	Condition	list [ n ]	1440:9:44116:44122	98287	0	True				
ANR	98314	ArrayIndexing	list [ n ]		98287	0					
ANR	98315	Identifier	list		98287	0					
ANR	98316	Identifier	n		98287	1					
ANR	98317	CompoundStatement		6:18:80:80	98287	1					
ANR	98318	ExpressionStatement	n ++	1441:3:44130:44133	98287	0	True				
ANR	98319	PostIncDecOperationExpression	n ++		98287	0					
ANR	98320	Identifier	n		98287	0					
ANR	98321	IncDec	++		98287	1					
ANR	98322	ExpressionStatement	"list = erealloc ( list , sizeof ( void * ) * ( n + 2 ) )"	1445:1:44144:44188	98287	3	True				
ANR	98323	AssignmentExpression	"list = erealloc ( list , sizeof ( void * ) * ( n + 2 ) )"		98287	0		=			
ANR	98324	Identifier	list		98287	0					
ANR	98325	CallExpression	"erealloc ( list , sizeof ( void * ) * ( n + 2 ) )"		98287	1					
ANR	98326	Callee	erealloc		98287	0					
ANR	98327	Identifier	erealloc		98287	0					
ANR	98328	ArgumentList	list		98287	1					
ANR	98329	Argument	list		98287	0					
ANR	98330	Identifier	list		98287	0					
ANR	98331	Argument	sizeof ( void * ) * ( n + 2 )		98287	1					
ANR	98332	MultiplicativeExpression	sizeof ( void * ) * ( n + 2 )		98287	0		*			
ANR	98333	SizeofExpression	sizeof ( void * )		98287	0					
ANR	98334	Sizeof	sizeof		98287	0					
ANR	98335	SizeofOperand	void *		98287	1					
ANR	98336	AdditiveExpression	n + 2		98287	1		+			
ANR	98337	Identifier	n		98287	0					
ANR	98338	PrimaryExpression	2		98287	1					
ANR	98339	ExpressionStatement	list [ n ] = item	1447:1:44192:44208	98287	4	True				
ANR	98340	AssignmentExpression	list [ n ] = item		98287	0		=			
ANR	98341	ArrayIndexing	list [ n ]		98287	0					
ANR	98342	Identifier	list		98287	0					
ANR	98343	Identifier	n		98287	1					
ANR	98344	Identifier	item		98287	1					
ANR	98345	ExpressionStatement	list [ n + 1 ] = NULL	1448:1:44211:44227	98287	5	True				
ANR	98346	AssignmentExpression	list [ n + 1 ] = NULL		98287	0		=			
ANR	98347	ArrayIndexing	list [ n + 1 ]		98287	0					
ANR	98348	Identifier	list		98287	0					
ANR	98349	AdditiveExpression	n + 1		98287	1		+			
ANR	98350	Identifier	n		98287	0					
ANR	98351	PrimaryExpression	1		98287	1					
ANR	98352	Identifier	NULL		98287	1					
ANR	98353	ExpressionStatement	* ( void * * ) result = list	1450:1:44231:44253	98287	6	True				
ANR	98354	AssignmentExpression	* ( void * * ) result = list		98287	0		=			
ANR	98355	UnaryOperationExpression	* ( void * * ) result		98287	0					
ANR	98356	UnaryOperator	*		98287	0					
ANR	98357	CastExpression	( void * * ) result		98287	1					
ANR	98358	CastTarget	void * *		98287	0					
ANR	98359	Identifier	result		98287	1					
ANR	98360	Identifier	list		98287	1					
ANR	98361	ReturnType	static void		98287	1					
ANR	98362	Identifier	zend_add_to_list		98287	2					
ANR	98363	ParameterList	"void * result , void * item"		98287	3					
ANR	98364	Parameter	void * result	1434:29:44008:44019	98287	0	True				
ANR	98365	ParameterType	void *		98287	0					
ANR	98366	Identifier	result		98287	1					
ANR	98367	Parameter	void * item	1434:43:44022:44031	98287	1	True				
ANR	98368	ParameterType	void *		98287	0					
ANR	98369	Identifier	item		98287	1					
ANR	98370	CFGEntryNode	ENTRY		98287		True				
ANR	98371	CFGExitNode	EXIT		98287		True				
ANR	98372	Symbol	result		98287						
ANR	98373	Symbol	item		98287						
ANR	98374	Symbol	NULL		98287						
ANR	98375	Symbol	* result		98287						
ANR	98376	Symbol	* list		98287						
ANR	98377	Symbol	* n		98287						
ANR	98378	Symbol	* ( void * * ) result		98287						
ANR	98379	Symbol	list		98287						
ANR	98380	Symbol	erealloc		98287						
ANR	98381	Symbol	n		98287						
ANR	98382	Function	zend_do_extended_info	1454:0:44268:44537							
ANR	98383	FunctionDef	zend_do_extended_info ()		98382	0					
ANR	98384	CompoundStatement		1455:0:44311:44537	98382	0					
ANR	98385	IdentifierDeclStatement	zend_op * opline ;	1456:1:44314:44329	98382	0	True				
ANR	98386	IdentifierDecl	* opline		98382	0					
ANR	98387	IdentifierDeclType	zend_op *		98382	0					
ANR	98388	Identifier	opline		98382	1					
ANR	98389	IfStatement	if ( ! ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO ) )		98382	1					
ANR	98390	Condition	! ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO )	1458:5:44337:44388	98382	0	True				
ANR	98391	UnaryOperationExpression	! ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO )		98382	0					
ANR	98392	UnaryOperator	!		98382	0					
ANR	98393	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO		98382	1		&			
ANR	98394	CallExpression	CG ( compiler_options )		98382	0					
ANR	98395	Callee	CG		98382	0					
ANR	98396	Identifier	CG		98382	0					
ANR	98397	ArgumentList	compiler_options		98382	1					
ANR	98398	Argument	compiler_options		98382	0					
ANR	98399	Identifier	compiler_options		98382	0					
ANR	98400	Identifier	ZEND_COMPILE_EXTENDED_INFO		98382	1					
ANR	98401	CompoundStatement		4:59:79:79	98382	1					
ANR	98402	ReturnStatement	return ;	1459:2:44395:44401	98382	0	True				
ANR	98403	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	1462:1:44408:44449	98382	2	True				
ANR	98404	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		98382	0		=			
ANR	98405	Identifier	opline		98382	0					
ANR	98406	CallExpression	get_next_op ( CG ( active_op_array ) )		98382	1					
ANR	98407	Callee	get_next_op		98382	0					
ANR	98408	Identifier	get_next_op		98382	0					
ANR	98409	ArgumentList	CG ( active_op_array )		98382	1					
ANR	98410	Argument	CG ( active_op_array )		98382	0					
ANR	98411	CallExpression	CG ( active_op_array )		98382	0					
ANR	98412	Callee	CG		98382	0					
ANR	98413	Identifier	CG		98382	0					
ANR	98414	ArgumentList	active_op_array		98382	1					
ANR	98415	Argument	active_op_array		98382	0					
ANR	98416	Identifier	active_op_array		98382	0					
ANR	98417	ExpressionStatement	opline -> opcode = ZEND_EXT_STMT	1464:1:44453:44483	98382	3	True				
ANR	98418	AssignmentExpression	opline -> opcode = ZEND_EXT_STMT		98382	0		=			
ANR	98419	PtrMemberAccess	opline -> opcode		98382	0					
ANR	98420	Identifier	opline		98382	0					
ANR	98421	Identifier	opcode		98382	1					
ANR	98422	Identifier	ZEND_EXT_STMT		98382	1					
ANR	98423	ExpressionStatement	SET_UNUSED ( opline -> op1 )	1465:1:44486:44509	98382	4	True				
ANR	98424	CallExpression	SET_UNUSED ( opline -> op1 )		98382	0					
ANR	98425	Callee	SET_UNUSED		98382	0					
ANR	98426	Identifier	SET_UNUSED		98382	0					
ANR	98427	ArgumentList	opline -> op1		98382	1					
ANR	98428	Argument	opline -> op1		98382	0					
ANR	98429	PtrMemberAccess	opline -> op1		98382	0					
ANR	98430	Identifier	opline		98382	0					
ANR	98431	Identifier	op1		98382	1					
ANR	98432	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1466:1:44512:44535	98382	5	True				
ANR	98433	CallExpression	SET_UNUSED ( opline -> op2 )		98382	0					
ANR	98434	Callee	SET_UNUSED		98382	0					
ANR	98435	Identifier	SET_UNUSED		98382	0					
ANR	98436	ArgumentList	opline -> op2		98382	1					
ANR	98437	Argument	opline -> op2		98382	0					
ANR	98438	PtrMemberAccess	opline -> op2		98382	0					
ANR	98439	Identifier	opline		98382	0					
ANR	98440	Identifier	op2		98382	1					
ANR	98441	ReturnType	void		98382	1					
ANR	98442	Identifier	zend_do_extended_info		98382	2					
ANR	98443	ParameterList			98382	3					
ANR	98444	CFGEntryNode	ENTRY		98382		True				
ANR	98445	CFGExitNode	EXIT		98382		True				
ANR	98446	Symbol	opline -> op1		98382						
ANR	98447	Symbol	compiler_options		98382						
ANR	98448	Symbol	ZEND_EXT_STMT		98382						
ANR	98449	Symbol	opline -> op2		98382						
ANR	98450	Symbol	opline		98382						
ANR	98451	Symbol	get_next_op		98382						
ANR	98452	Symbol	CG		98382						
ANR	98453	Symbol	* opline		98382						
ANR	98454	Symbol	active_op_array		98382						
ANR	98455	Symbol	opline -> opcode		98382						
ANR	98456	Symbol	ZEND_COMPILE_EXTENDED_INFO		98382						
ANR	98457	Function	zend_do_extended_fcall_begin	1470:0:44550:44833							
ANR	98458	FunctionDef	zend_do_extended_fcall_begin ()		98457	0					
ANR	98459	CompoundStatement		1471:0:44600:44833	98457	0					
ANR	98460	IdentifierDeclStatement	zend_op * opline ;	1472:1:44603:44618	98457	0	True				
ANR	98461	IdentifierDecl	* opline		98457	0					
ANR	98462	IdentifierDeclType	zend_op *		98457	0					
ANR	98463	Identifier	opline		98457	1					
ANR	98464	IfStatement	if ( ! ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO ) )		98457	1					
ANR	98465	Condition	! ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO )	1474:5:44626:44677	98457	0	True				
ANR	98466	UnaryOperationExpression	! ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO )		98457	0					
ANR	98467	UnaryOperator	!		98457	0					
ANR	98468	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO		98457	1		&			
ANR	98469	CallExpression	CG ( compiler_options )		98457	0					
ANR	98470	Callee	CG		98457	0					
ANR	98471	Identifier	CG		98457	0					
ANR	98472	ArgumentList	compiler_options		98457	1					
ANR	98473	Argument	compiler_options		98457	0					
ANR	98474	Identifier	compiler_options		98457	0					
ANR	98475	Identifier	ZEND_COMPILE_EXTENDED_INFO		98457	1					
ANR	98476	CompoundStatement		4:59:79:79	98457	1					
ANR	98477	ReturnStatement	return ;	1475:2:44684:44690	98457	0	True				
ANR	98478	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	1478:1:44697:44738	98457	2	True				
ANR	98479	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		98457	0		=			
ANR	98480	Identifier	opline		98457	0					
ANR	98481	CallExpression	get_next_op ( CG ( active_op_array ) )		98457	1					
ANR	98482	Callee	get_next_op		98457	0					
ANR	98483	Identifier	get_next_op		98457	0					
ANR	98484	ArgumentList	CG ( active_op_array )		98457	1					
ANR	98485	Argument	CG ( active_op_array )		98457	0					
ANR	98486	CallExpression	CG ( active_op_array )		98457	0					
ANR	98487	Callee	CG		98457	0					
ANR	98488	Identifier	CG		98457	0					
ANR	98489	ArgumentList	active_op_array		98457	1					
ANR	98490	Argument	active_op_array		98457	0					
ANR	98491	Identifier	active_op_array		98457	0					
ANR	98492	ExpressionStatement	opline -> opcode = ZEND_EXT_FCALL_BEGIN	1480:1:44742:44779	98457	3	True				
ANR	98493	AssignmentExpression	opline -> opcode = ZEND_EXT_FCALL_BEGIN		98457	0		=			
ANR	98494	PtrMemberAccess	opline -> opcode		98457	0					
ANR	98495	Identifier	opline		98457	0					
ANR	98496	Identifier	opcode		98457	1					
ANR	98497	Identifier	ZEND_EXT_FCALL_BEGIN		98457	1					
ANR	98498	ExpressionStatement	SET_UNUSED ( opline -> op1 )	1481:1:44782:44805	98457	4	True				
ANR	98499	CallExpression	SET_UNUSED ( opline -> op1 )		98457	0					
ANR	98500	Callee	SET_UNUSED		98457	0					
ANR	98501	Identifier	SET_UNUSED		98457	0					
ANR	98502	ArgumentList	opline -> op1		98457	1					
ANR	98503	Argument	opline -> op1		98457	0					
ANR	98504	PtrMemberAccess	opline -> op1		98457	0					
ANR	98505	Identifier	opline		98457	0					
ANR	98506	Identifier	op1		98457	1					
ANR	98507	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1482:1:44808:44831	98457	5	True				
ANR	98508	CallExpression	SET_UNUSED ( opline -> op2 )		98457	0					
ANR	98509	Callee	SET_UNUSED		98457	0					
ANR	98510	Identifier	SET_UNUSED		98457	0					
ANR	98511	ArgumentList	opline -> op2		98457	1					
ANR	98512	Argument	opline -> op2		98457	0					
ANR	98513	PtrMemberAccess	opline -> op2		98457	0					
ANR	98514	Identifier	opline		98457	0					
ANR	98515	Identifier	op2		98457	1					
ANR	98516	ReturnType	void		98457	1					
ANR	98517	Identifier	zend_do_extended_fcall_begin		98457	2					
ANR	98518	ParameterList			98457	3					
ANR	98519	CFGEntryNode	ENTRY		98457		True				
ANR	98520	CFGExitNode	EXIT		98457		True				
ANR	98521	Symbol	opline -> op1		98457						
ANR	98522	Symbol	compiler_options		98457						
ANR	98523	Symbol	ZEND_EXT_FCALL_BEGIN		98457						
ANR	98524	Symbol	opline -> op2		98457						
ANR	98525	Symbol	opline		98457						
ANR	98526	Symbol	get_next_op		98457						
ANR	98527	Symbol	CG		98457						
ANR	98528	Symbol	* opline		98457						
ANR	98529	Symbol	active_op_array		98457						
ANR	98530	Symbol	opline -> opcode		98457						
ANR	98531	Symbol	ZEND_COMPILE_EXTENDED_INFO		98457						
ANR	98532	Function	zend_do_extended_fcall_end	1486:0:44846:45125							
ANR	98533	FunctionDef	zend_do_extended_fcall_end ()		98532	0					
ANR	98534	CompoundStatement		1487:0:44894:45125	98532	0					
ANR	98535	IdentifierDeclStatement	zend_op * opline ;	1488:1:44897:44912	98532	0	True				
ANR	98536	IdentifierDecl	* opline		98532	0					
ANR	98537	IdentifierDeclType	zend_op *		98532	0					
ANR	98538	Identifier	opline		98532	1					
ANR	98539	IfStatement	if ( ! ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO ) )		98532	1					
ANR	98540	Condition	! ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO )	1490:5:44920:44971	98532	0	True				
ANR	98541	UnaryOperationExpression	! ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO )		98532	0					
ANR	98542	UnaryOperator	!		98532	0					
ANR	98543	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO		98532	1		&			
ANR	98544	CallExpression	CG ( compiler_options )		98532	0					
ANR	98545	Callee	CG		98532	0					
ANR	98546	Identifier	CG		98532	0					
ANR	98547	ArgumentList	compiler_options		98532	1					
ANR	98548	Argument	compiler_options		98532	0					
ANR	98549	Identifier	compiler_options		98532	0					
ANR	98550	Identifier	ZEND_COMPILE_EXTENDED_INFO		98532	1					
ANR	98551	CompoundStatement		4:59:79:79	98532	1					
ANR	98552	ReturnStatement	return ;	1491:2:44978:44984	98532	0	True				
ANR	98553	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	1494:1:44991:45032	98532	2	True				
ANR	98554	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		98532	0		=			
ANR	98555	Identifier	opline		98532	0					
ANR	98556	CallExpression	get_next_op ( CG ( active_op_array ) )		98532	1					
ANR	98557	Callee	get_next_op		98532	0					
ANR	98558	Identifier	get_next_op		98532	0					
ANR	98559	ArgumentList	CG ( active_op_array )		98532	1					
ANR	98560	Argument	CG ( active_op_array )		98532	0					
ANR	98561	CallExpression	CG ( active_op_array )		98532	0					
ANR	98562	Callee	CG		98532	0					
ANR	98563	Identifier	CG		98532	0					
ANR	98564	ArgumentList	active_op_array		98532	1					
ANR	98565	Argument	active_op_array		98532	0					
ANR	98566	Identifier	active_op_array		98532	0					
ANR	98567	ExpressionStatement	opline -> opcode = ZEND_EXT_FCALL_END	1496:1:45036:45071	98532	3	True				
ANR	98568	AssignmentExpression	opline -> opcode = ZEND_EXT_FCALL_END		98532	0		=			
ANR	98569	PtrMemberAccess	opline -> opcode		98532	0					
ANR	98570	Identifier	opline		98532	0					
ANR	98571	Identifier	opcode		98532	1					
ANR	98572	Identifier	ZEND_EXT_FCALL_END		98532	1					
ANR	98573	ExpressionStatement	SET_UNUSED ( opline -> op1 )	1497:1:45074:45097	98532	4	True				
ANR	98574	CallExpression	SET_UNUSED ( opline -> op1 )		98532	0					
ANR	98575	Callee	SET_UNUSED		98532	0					
ANR	98576	Identifier	SET_UNUSED		98532	0					
ANR	98577	ArgumentList	opline -> op1		98532	1					
ANR	98578	Argument	opline -> op1		98532	0					
ANR	98579	PtrMemberAccess	opline -> op1		98532	0					
ANR	98580	Identifier	opline		98532	0					
ANR	98581	Identifier	op1		98532	1					
ANR	98582	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1498:1:45100:45123	98532	5	True				
ANR	98583	CallExpression	SET_UNUSED ( opline -> op2 )		98532	0					
ANR	98584	Callee	SET_UNUSED		98532	0					
ANR	98585	Identifier	SET_UNUSED		98532	0					
ANR	98586	ArgumentList	opline -> op2		98532	1					
ANR	98587	Argument	opline -> op2		98532	0					
ANR	98588	PtrMemberAccess	opline -> op2		98532	0					
ANR	98589	Identifier	opline		98532	0					
ANR	98590	Identifier	op2		98532	1					
ANR	98591	ReturnType	void		98532	1					
ANR	98592	Identifier	zend_do_extended_fcall_end		98532	2					
ANR	98593	ParameterList			98532	3					
ANR	98594	CFGEntryNode	ENTRY		98532		True				
ANR	98595	CFGExitNode	EXIT		98532		True				
ANR	98596	Symbol	opline -> op1		98532						
ANR	98597	Symbol	compiler_options		98532						
ANR	98598	Symbol	opline -> op2		98532						
ANR	98599	Symbol	opline		98532						
ANR	98600	Symbol	get_next_op		98532						
ANR	98601	Symbol	CG		98532						
ANR	98602	Symbol	* opline		98532						
ANR	98603	Symbol	active_op_array		98532						
ANR	98604	Symbol	opline -> opcode		98532						
ANR	98605	Symbol	ZEND_EXT_FCALL_END		98532						
ANR	98606	Symbol	ZEND_COMPILE_EXTENDED_INFO		98532						
ANR	98607	Function	zend_is_auto_global_str	1502:0:45138:45461							
ANR	98608	FunctionDef	"zend_is_auto_global_str (char * name , size_t len)"		98607	0					
ANR	98609	CompoundStatement		1502:68:45206:45461	98607	0					
ANR	98610	IdentifierDeclStatement	zend_auto_global * auto_global ;	1503:1:45209:45238	98607	0	True				
ANR	98611	IdentifierDecl	* auto_global		98607	0					
ANR	98612	IdentifierDeclType	zend_auto_global *		98607	0					
ANR	98613	Identifier	auto_global		98607	1					
ANR	98614	IfStatement	"if ( ( auto_global = zend_hash_str_find_ptr ( CG ( auto_globals ) , name , len ) ) != NULL )"		98607	1					
ANR	98615	Condition	"( auto_global = zend_hash_str_find_ptr ( CG ( auto_globals ) , name , len ) ) != NULL"	1505:5:45246:45320	98607	0	True				
ANR	98616	EqualityExpression	"( auto_global = zend_hash_str_find_ptr ( CG ( auto_globals ) , name , len ) ) != NULL"		98607	0		!=			
ANR	98617	AssignmentExpression	"auto_global = zend_hash_str_find_ptr ( CG ( auto_globals ) , name , len )"		98607	0		=			
ANR	98618	Identifier	auto_global		98607	0					
ANR	98619	CallExpression	"zend_hash_str_find_ptr ( CG ( auto_globals ) , name , len )"		98607	1					
ANR	98620	Callee	zend_hash_str_find_ptr		98607	0					
ANR	98621	Identifier	zend_hash_str_find_ptr		98607	0					
ANR	98622	ArgumentList	CG ( auto_globals )		98607	1					
ANR	98623	Argument	CG ( auto_globals )		98607	0					
ANR	98624	CallExpression	CG ( auto_globals )		98607	0					
ANR	98625	Callee	CG		98607	0					
ANR	98626	Identifier	CG		98607	0					
ANR	98627	ArgumentList	auto_globals		98607	1					
ANR	98628	Argument	auto_globals		98607	0					
ANR	98629	Identifier	auto_globals		98607	0					
ANR	98630	Argument	name		98607	1					
ANR	98631	Identifier	name		98607	0					
ANR	98632	Argument	len		98607	2					
ANR	98633	Identifier	len		98607	0					
ANR	98634	Identifier	NULL		98607	1					
ANR	98635	CompoundStatement		4:82:116:116	98607	1					
ANR	98636	IfStatement	if ( auto_global -> armed )		98607	0					
ANR	98637	Condition	auto_global -> armed	1506:6:45331:45348	98607	0	True				
ANR	98638	PtrMemberAccess	auto_global -> armed		98607	0					
ANR	98639	Identifier	auto_global		98607	0					
ANR	98640	Identifier	armed		98607	1					
ANR	98641	CompoundStatement		5:26:144:144	98607	1					
ANR	98642	ExpressionStatement	auto_global -> armed = auto_global -> auto_global_callback ( auto_global -> name )	1507:3:45356:45429	98607	0	True				
ANR	98643	AssignmentExpression	auto_global -> armed = auto_global -> auto_global_callback ( auto_global -> name )		98607	0		=			
ANR	98644	PtrMemberAccess	auto_global -> armed		98607	0					
ANR	98645	Identifier	auto_global		98607	0					
ANR	98646	Identifier	armed		98607	1					
ANR	98647	CallExpression	auto_global -> auto_global_callback ( auto_global -> name )		98607	1					
ANR	98648	Callee	auto_global -> auto_global_callback		98607	0					
ANR	98649	PtrMemberAccess	auto_global -> auto_global_callback		98607	0					
ANR	98650	Identifier	auto_global		98607	0					
ANR	98651	Identifier	auto_global_callback		98607	1					
ANR	98652	ArgumentList	auto_global -> name		98607	1					
ANR	98653	Argument	auto_global -> name		98607	0					
ANR	98654	PtrMemberAccess	auto_global -> name		98607	0					
ANR	98655	Identifier	auto_global		98607	0					
ANR	98656	Identifier	name		98607	1					
ANR	98657	ReturnStatement	return 1 ;	1509:2:45437:45445	98607	1	True				
ANR	98658	PrimaryExpression	1		98607	0					
ANR	98659	ReturnStatement	return 0 ;	1511:1:45451:45459	98607	2	True				
ANR	98660	PrimaryExpression	0		98607	0					
ANR	98661	ReturnType	zend_bool		98607	1					
ANR	98662	Identifier	zend_is_auto_global_str		98607	2					
ANR	98663	ParameterList	"char * name , size_t len"		98607	3					
ANR	98664	Parameter	char * name	1502:34:45172:45181	98607	0	True				
ANR	98665	ParameterType	char *		98607	0					
ANR	98666	Identifier	name		98607	1					
ANR	98667	Parameter	size_t len	1502:46:45184:45193	98607	1	True				
ANR	98668	ParameterType	size_t		98607	0					
ANR	98669	Identifier	len		98607	1					
ANR	98670	CFGEntryNode	ENTRY		98607		True				
ANR	98671	CFGExitNode	EXIT		98607		True				
ANR	98672	Symbol	auto_global -> auto_global_callback		98607						
ANR	98673	Symbol	NULL		98607						
ANR	98674	Symbol	len		98607						
ANR	98675	Symbol	CG		98607						
ANR	98676	Symbol	auto_global -> armed		98607						
ANR	98677	Symbol	* auto_global		98607						
ANR	98678	Symbol	auto_global -> name		98607						
ANR	98679	Symbol	auto_global		98607						
ANR	98680	Symbol	name		98607						
ANR	98681	Symbol	zend_hash_str_find_ptr		98607						
ANR	98682	Symbol	auto_globals		98607						
ANR	98683	Function	zend_is_auto_global	1515:0:45474:45779							
ANR	98684	FunctionDef	zend_is_auto_global (zend_string * name)		98683	0					
ANR	98685	CompoundStatement		1516:0:45533:45779	98683	0					
ANR	98686	IdentifierDeclStatement	zend_auto_global * auto_global ;	1517:1:45536:45565	98683	0	True				
ANR	98687	IdentifierDecl	* auto_global		98683	0					
ANR	98688	IdentifierDeclType	zend_auto_global *		98683	0					
ANR	98689	Identifier	auto_global		98683	1					
ANR	98690	IfStatement	"if ( ( auto_global = zend_hash_find_ptr ( CG ( auto_globals ) , name ) ) != NULL )"		98683	1					
ANR	98691	Condition	"( auto_global = zend_hash_find_ptr ( CG ( auto_globals ) , name ) ) != NULL"	1519:5:45573:45638	98683	0	True				
ANR	98692	EqualityExpression	"( auto_global = zend_hash_find_ptr ( CG ( auto_globals ) , name ) ) != NULL"		98683	0		!=			
ANR	98693	AssignmentExpression	"auto_global = zend_hash_find_ptr ( CG ( auto_globals ) , name )"		98683	0		=			
ANR	98694	Identifier	auto_global		98683	0					
ANR	98695	CallExpression	"zend_hash_find_ptr ( CG ( auto_globals ) , name )"		98683	1					
ANR	98696	Callee	zend_hash_find_ptr		98683	0					
ANR	98697	Identifier	zend_hash_find_ptr		98683	0					
ANR	98698	ArgumentList	CG ( auto_globals )		98683	1					
ANR	98699	Argument	CG ( auto_globals )		98683	0					
ANR	98700	CallExpression	CG ( auto_globals )		98683	0					
ANR	98701	Callee	CG		98683	0					
ANR	98702	Identifier	CG		98683	0					
ANR	98703	ArgumentList	auto_globals		98683	1					
ANR	98704	Argument	auto_globals		98683	0					
ANR	98705	Identifier	auto_globals		98683	0					
ANR	98706	Argument	name		98683	1					
ANR	98707	Identifier	name		98683	0					
ANR	98708	Identifier	NULL		98683	1					
ANR	98709	CompoundStatement		4:73:107:107	98683	1					
ANR	98710	IfStatement	if ( auto_global -> armed )		98683	0					
ANR	98711	Condition	auto_global -> armed	1520:6:45649:45666	98683	0	True				
ANR	98712	PtrMemberAccess	auto_global -> armed		98683	0					
ANR	98713	Identifier	auto_global		98683	0					
ANR	98714	Identifier	armed		98683	1					
ANR	98715	CompoundStatement		5:26:135:135	98683	1					
ANR	98716	ExpressionStatement	auto_global -> armed = auto_global -> auto_global_callback ( auto_global -> name )	1521:3:45674:45747	98683	0	True				
ANR	98717	AssignmentExpression	auto_global -> armed = auto_global -> auto_global_callback ( auto_global -> name )		98683	0		=			
ANR	98718	PtrMemberAccess	auto_global -> armed		98683	0					
ANR	98719	Identifier	auto_global		98683	0					
ANR	98720	Identifier	armed		98683	1					
ANR	98721	CallExpression	auto_global -> auto_global_callback ( auto_global -> name )		98683	1					
ANR	98722	Callee	auto_global -> auto_global_callback		98683	0					
ANR	98723	PtrMemberAccess	auto_global -> auto_global_callback		98683	0					
ANR	98724	Identifier	auto_global		98683	0					
ANR	98725	Identifier	auto_global_callback		98683	1					
ANR	98726	ArgumentList	auto_global -> name		98683	1					
ANR	98727	Argument	auto_global -> name		98683	0					
ANR	98728	PtrMemberAccess	auto_global -> name		98683	0					
ANR	98729	Identifier	auto_global		98683	0					
ANR	98730	Identifier	name		98683	1					
ANR	98731	ReturnStatement	return 1 ;	1523:2:45755:45763	98683	1	True				
ANR	98732	PrimaryExpression	1		98683	0					
ANR	98733	ReturnStatement	return 0 ;	1525:1:45769:45777	98683	2	True				
ANR	98734	PrimaryExpression	0		98683	0					
ANR	98735	ReturnType	zend_bool		98683	1					
ANR	98736	Identifier	zend_is_auto_global		98683	2					
ANR	98737	ParameterList	zend_string * name		98683	3					
ANR	98738	Parameter	zend_string * name	1515:30:45504:45520	98683	0	True				
ANR	98739	ParameterType	zend_string *		98683	0					
ANR	98740	Identifier	name		98683	1					
ANR	98741	CFGEntryNode	ENTRY		98683		True				
ANR	98742	CFGExitNode	EXIT		98683		True				
ANR	98743	Symbol	auto_global -> auto_global_callback		98683						
ANR	98744	Symbol	NULL		98683						
ANR	98745	Symbol	CG		98683						
ANR	98746	Symbol	auto_global -> armed		98683						
ANR	98747	Symbol	* auto_global		98683						
ANR	98748	Symbol	auto_global -> name		98683						
ANR	98749	Symbol	auto_global		98683						
ANR	98750	Symbol	name		98683						
ANR	98751	Symbol	zend_hash_find_ptr		98683						
ANR	98752	Symbol	auto_globals		98683						
ANR	98753	Function	zend_register_auto_global	1529:0:45792:46274							
ANR	98754	FunctionDef	"zend_register_auto_global (zend_string * name , zend_bool jit , zend_auto_global_callback auto_global_callback)"		98753	0					
ANR	98755	CompoundStatement		1530:0:45914:46274	98753	0					
ANR	98756	IdentifierDeclStatement	zend_auto_global auto_global ;	1531:1:45917:45945	98753	0	True				
ANR	98757	IdentifierDecl	auto_global		98753	0					
ANR	98758	IdentifierDeclType	zend_auto_global		98753	0					
ANR	98759	Identifier	auto_global		98753	1					
ANR	98760	IdentifierDeclStatement	int retval ;	1532:1:45948:45958	98753	1	True				
ANR	98761	IdentifierDecl	retval		98753	0					
ANR	98762	IdentifierDeclType	int		98753	0					
ANR	98763	Identifier	retval		98753	1					
ANR	98764	ExpressionStatement	auto_global . name = zend_new_interned_string ( name )	1534:1:45962:46011	98753	2	True				
ANR	98765	AssignmentExpression	auto_global . name = zend_new_interned_string ( name )		98753	0		=			
ANR	98766	MemberAccess	auto_global . name		98753	0					
ANR	98767	Identifier	auto_global		98753	0					
ANR	98768	Identifier	name		98753	1					
ANR	98769	CallExpression	zend_new_interned_string ( name )		98753	1					
ANR	98770	Callee	zend_new_interned_string		98753	0					
ANR	98771	Identifier	zend_new_interned_string		98753	0					
ANR	98772	ArgumentList	name		98753	1					
ANR	98773	Argument	name		98753	0					
ANR	98774	Identifier	name		98753	0					
ANR	98775	ExpressionStatement	auto_global . auto_global_callback = auto_global_callback	1535:1:46014:46069	98753	3	True				
ANR	98776	AssignmentExpression	auto_global . auto_global_callback = auto_global_callback		98753	0		=			
ANR	98777	MemberAccess	auto_global . auto_global_callback		98753	0					
ANR	98778	Identifier	auto_global		98753	0					
ANR	98779	Identifier	auto_global_callback		98753	1					
ANR	98780	Identifier	auto_global_callback		98753	1					
ANR	98781	ExpressionStatement	auto_global . jit = jit	1536:1:46072:46093	98753	4	True				
ANR	98782	AssignmentExpression	auto_global . jit = jit		98753	0		=			
ANR	98783	MemberAccess	auto_global . jit		98753	0					
ANR	98784	Identifier	auto_global		98753	0					
ANR	98785	Identifier	jit		98753	1					
ANR	98786	Identifier	jit		98753	1					
ANR	98787	ExpressionStatement	"retval = zend_hash_add_mem ( CG ( auto_globals ) , auto_global . name , & auto_global , sizeof ( zend_auto_global ) ) != NULL ? SUCCESS : FAILURE"	1538:1:46097:46227	98753	5	True				
ANR	98788	AssignmentExpression	"retval = zend_hash_add_mem ( CG ( auto_globals ) , auto_global . name , & auto_global , sizeof ( zend_auto_global ) ) != NULL ? SUCCESS : FAILURE"		98753	0		=			
ANR	98789	Identifier	retval		98753	0					
ANR	98790	ConditionalExpression	"zend_hash_add_mem ( CG ( auto_globals ) , auto_global . name , & auto_global , sizeof ( zend_auto_global ) ) != NULL ? SUCCESS : FAILURE"		98753	1					
ANR	98791	Condition	"zend_hash_add_mem ( CG ( auto_globals ) , auto_global . name , & auto_global , sizeof ( zend_auto_global ) ) != NULL"		98753	0					
ANR	98792	EqualityExpression	"zend_hash_add_mem ( CG ( auto_globals ) , auto_global . name , & auto_global , sizeof ( zend_auto_global ) ) != NULL"		98753	0		!=			
ANR	98793	CallExpression	"zend_hash_add_mem ( CG ( auto_globals ) , auto_global . name , & auto_global , sizeof ( zend_auto_global ) )"		98753	0					
ANR	98794	Callee	zend_hash_add_mem		98753	0					
ANR	98795	Identifier	zend_hash_add_mem		98753	0					
ANR	98796	ArgumentList	CG ( auto_globals )		98753	1					
ANR	98797	Argument	CG ( auto_globals )		98753	0					
ANR	98798	CallExpression	CG ( auto_globals )		98753	0					
ANR	98799	Callee	CG		98753	0					
ANR	98800	Identifier	CG		98753	0					
ANR	98801	ArgumentList	auto_globals		98753	1					
ANR	98802	Argument	auto_globals		98753	0					
ANR	98803	Identifier	auto_globals		98753	0					
ANR	98804	Argument	auto_global . name		98753	1					
ANR	98805	MemberAccess	auto_global . name		98753	0					
ANR	98806	Identifier	auto_global		98753	0					
ANR	98807	Identifier	name		98753	1					
ANR	98808	Argument	& auto_global		98753	2					
ANR	98809	UnaryOperationExpression	& auto_global		98753	0					
ANR	98810	UnaryOperator	&		98753	0					
ANR	98811	Identifier	auto_global		98753	1					
ANR	98812	Argument	sizeof ( zend_auto_global )		98753	3					
ANR	98813	SizeofExpression	sizeof ( zend_auto_global )		98753	0					
ANR	98814	Sizeof	sizeof		98753	0					
ANR	98815	SizeofOperand	zend_auto_global		98753	1					
ANR	98816	Identifier	NULL		98753	1					
ANR	98817	Identifier	SUCCESS		98753	1					
ANR	98818	Identifier	FAILURE		98753	2					
ANR	98819	ExpressionStatement	zend_string_release ( name )	1540:1:46231:46256	98753	6	True				
ANR	98820	CallExpression	zend_string_release ( name )		98753	0					
ANR	98821	Callee	zend_string_release		98753	0					
ANR	98822	Identifier	zend_string_release		98753	0					
ANR	98823	ArgumentList	name		98753	1					
ANR	98824	Argument	name		98753	0					
ANR	98825	Identifier	name		98753	0					
ANR	98826	ReturnStatement	return retval ;	1541:1:46259:46272	98753	7	True				
ANR	98827	Identifier	retval		98753	0					
ANR	98828	ReturnType	int		98753	1					
ANR	98829	Identifier	zend_register_auto_global		98753	2					
ANR	98830	ParameterList	"zend_string * name , zend_bool jit , zend_auto_global_callback auto_global_callback"		98753	3					
ANR	98831	Parameter	zend_string * name	1529:30:45822:45838	98753	0	True				
ANR	98832	ParameterType	zend_string *		98753	0					
ANR	98833	Identifier	name		98753	1					
ANR	98834	Parameter	zend_bool jit	1529:49:45841:45853	98753	1	True				
ANR	98835	ParameterType	zend_bool		98753	0					
ANR	98836	Identifier	jit		98753	1					
ANR	98837	Parameter	zend_auto_global_callback auto_global_callback	1529:64:45856:45901	98753	2	True				
ANR	98838	ParameterType	zend_auto_global_callback		98753	0					
ANR	98839	Identifier	auto_global_callback		98753	1					
ANR	98840	CFGEntryNode	ENTRY		98753		True				
ANR	98841	CFGExitNode	EXIT		98753		True				
ANR	98842	Symbol	zend_hash_add_mem		98753						
ANR	98843	Symbol	NULL		98753						
ANR	98844	Symbol	SUCCESS		98753						
ANR	98845	Symbol	& auto_global		98753						
ANR	98846	Symbol	CG		98753						
ANR	98847	Symbol	auto_global		98753						
ANR	98848	Symbol	auto_global . name		98753						
ANR	98849	Symbol	FAILURE		98753						
ANR	98850	Symbol	retval		98753						
ANR	98851	Symbol	auto_global . auto_global_callback		98753						
ANR	98852	Symbol	auto_globals		98753						
ANR	98853	Symbol	auto_global_callback		98753						
ANR	98854	Symbol	zend_new_interned_string		98753						
ANR	98855	Symbol	jit		98753						
ANR	98856	Symbol	auto_global . jit		98753						
ANR	98857	Symbol	name		98753						
ANR	98858	Function	zend_activate_auto_globals	1545:0:46287:46686							
ANR	98859	FunctionDef	zend_activate_auto_globals ()		98858	0					
ANR	98860	CompoundStatement		1546:0:46344:46686	98858	0					
ANR	98861	IdentifierDeclStatement	zend_auto_global * auto_global ;	1547:1:46347:46376	98858	0	True				
ANR	98862	IdentifierDecl	* auto_global		98858	0					
ANR	98863	IdentifierDeclType	zend_auto_global *		98858	0					
ANR	98864	Identifier	auto_global		98858	1					
ANR	98865	Statement	ZEND_HASH_FOREACH_PTR	1549:1:46380:46400	98858	1	True				
ANR	98866	Statement	(	1549:22:46401:46401	98858	2	True				
ANR	98867	Statement	CG	1549:23:46402:46403	98858	3	True				
ANR	98868	Statement	(	1549:25:46404:46404	98858	4	True				
ANR	98869	Statement	auto_globals	1549:26:46405:46416	98858	5	True				
ANR	98870	Statement	)	1549:38:46417:46417	98858	6	True				
ANR	98871	Statement	","	1549:39:46418:46418	98858	7	True				
ANR	98872	Statement	auto_global	1549:41:46420:46430	98858	8	True				
ANR	98873	Statement	)	1549:52:46431:46431	98858	9	True				
ANR	98874	CompoundStatement		4:54:88:88	98858	10					
ANR	98875	IfStatement	if ( auto_global -> jit )		98858	0					
ANR	98876	Condition	auto_global -> jit	1550:6:46441:46456	98858	0	True				
ANR	98877	PtrMemberAccess	auto_global -> jit		98858	0					
ANR	98878	Identifier	auto_global		98858	0					
ANR	98879	Identifier	jit		98858	1					
ANR	98880	CompoundStatement		5:24:114:114	98858	1					
ANR	98881	ExpressionStatement	auto_global -> armed = 1	1551:3:46464:46486	98858	0	True				
ANR	98882	AssignmentExpression	auto_global -> armed = 1		98858	0		=			
ANR	98883	PtrMemberAccess	auto_global -> armed		98858	0					
ANR	98884	Identifier	auto_global		98858	0					
ANR	98885	Identifier	armed		98858	1					
ANR	98886	PrimaryExpression	1		98858	1					
ANR	98887	ElseStatement	else		98858	0					
ANR	98888	IfStatement	if ( auto_global -> auto_global_callback )		98858	0					
ANR	98889	Condition	auto_global -> auto_global_callback	1552:13:46501:46533	98858	0	True				
ANR	98890	PtrMemberAccess	auto_global -> auto_global_callback		98858	0					
ANR	98891	Identifier	auto_global		98858	0					
ANR	98892	Identifier	auto_global_callback		98858	1					
ANR	98893	CompoundStatement		7:48:191:191	98858	1					
ANR	98894	ExpressionStatement	auto_global -> armed = auto_global -> auto_global_callback ( auto_global -> name )	1553:3:46541:46614	98858	0	True				
ANR	98895	AssignmentExpression	auto_global -> armed = auto_global -> auto_global_callback ( auto_global -> name )		98858	0		=			
ANR	98896	PtrMemberAccess	auto_global -> armed		98858	0					
ANR	98897	Identifier	auto_global		98858	0					
ANR	98898	Identifier	armed		98858	1					
ANR	98899	CallExpression	auto_global -> auto_global_callback ( auto_global -> name )		98858	1					
ANR	98900	Callee	auto_global -> auto_global_callback		98858	0					
ANR	98901	PtrMemberAccess	auto_global -> auto_global_callback		98858	0					
ANR	98902	Identifier	auto_global		98858	0					
ANR	98903	Identifier	auto_global_callback		98858	1					
ANR	98904	ArgumentList	auto_global -> name		98858	1					
ANR	98905	Argument	auto_global -> name		98858	0					
ANR	98906	PtrMemberAccess	auto_global -> name		98858	0					
ANR	98907	Identifier	auto_global		98858	0					
ANR	98908	Identifier	name		98858	1					
ANR	98909	ElseStatement	else		98858	0					
ANR	98910	CompoundStatement		9:9:280:280	98858	0					
ANR	98911	ExpressionStatement	auto_global -> armed = 0	1555:3:46630:46652	98858	0	True				
ANR	98912	AssignmentExpression	auto_global -> armed = 0		98858	0		=			
ANR	98913	PtrMemberAccess	auto_global -> armed		98858	0					
ANR	98914	Identifier	auto_global		98858	0					
ANR	98915	Identifier	armed		98858	1					
ANR	98916	PrimaryExpression	0		98858	1					
ANR	98917	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1557:3:46661:46684	98858	11	True				
ANR	98918	CallExpression	ZEND_HASH_FOREACH_END ( )		98858	0					
ANR	98919	Callee	ZEND_HASH_FOREACH_END		98858	0					
ANR	98920	Identifier	ZEND_HASH_FOREACH_END		98858	0					
ANR	98921	ArgumentList			98858	1					
ANR	98922	ReturnType	ZEND_API void		98858	1					
ANR	98923	Identifier	zend_activate_auto_globals		98858	2					
ANR	98924	ParameterList			98858	3					
ANR	98925	CFGEntryNode	ENTRY		98858		True				
ANR	98926	CFGExitNode	EXIT		98858		True				
ANR	98927	Symbol	auto_global -> auto_global_callback		98858						
ANR	98928	Symbol	* auto_global		98858						
ANR	98929	Symbol	auto_global -> armed		98858						
ANR	98930	Symbol	auto_global -> name		98858						
ANR	98931	Symbol	auto_global		98858						
ANR	98932	Symbol	auto_global -> jit		98858						
ANR	98933	Function	zendlex	1561:0:46699:47379							
ANR	98934	FunctionDef	zendlex (zend_parser_stack_elem * elem)		98933	0					
ANR	98935	CompoundStatement		1562:0:46751:47379	98933	0					
ANR	98936	IdentifierDeclStatement	zval zv ;	1563:1:46754:46761	98933	0	True				
ANR	98937	IdentifierDecl	zv		98933	0					
ANR	98938	IdentifierDeclType	zval		98933	0					
ANR	98939	Identifier	zv		98933	1					
ANR	98940	IdentifierDeclStatement	int retval ;	1564:1:46764:46774	98933	1	True				
ANR	98941	IdentifierDecl	retval		98933	0					
ANR	98942	IdentifierDeclType	int		98933	0					
ANR	98943	Identifier	retval		98933	1					
ANR	98944	IfStatement	if ( CG ( increment_lineno ) )		98933	2					
ANR	98945	Condition	CG ( increment_lineno )	1566:5:46782:46801	98933	0	True				
ANR	98946	CallExpression	CG ( increment_lineno )		98933	0					
ANR	98947	Callee	CG		98933	0					
ANR	98948	Identifier	CG		98933	0					
ANR	98949	ArgumentList	increment_lineno		98933	1					
ANR	98950	Argument	increment_lineno		98933	0					
ANR	98951	Identifier	increment_lineno		98933	0					
ANR	98952	CompoundStatement		5:27:52:52	98933	1					
ANR	98953	ExpressionStatement	CG ( zend_lineno ) ++	1567:2:46808:46825	98933	0	True				
ANR	98954	PostIncDecOperationExpression	CG ( zend_lineno ) ++		98933	0					
ANR	98955	CallExpression	CG ( zend_lineno )		98933	0					
ANR	98956	Callee	CG		98933	0					
ANR	98957	Identifier	CG		98933	0					
ANR	98958	ArgumentList	zend_lineno		98933	1					
ANR	98959	Argument	zend_lineno		98933	0					
ANR	98960	Identifier	zend_lineno		98933	0					
ANR	98961	IncDec	++		98933	1					
ANR	98962	ExpressionStatement	CG ( increment_lineno ) = 0	1568:2:46829:46853	98933	1	True				
ANR	98963	AssignmentExpression	CG ( increment_lineno ) = 0		98933	0		=			
ANR	98964	CallExpression	CG ( increment_lineno )		98933	0					
ANR	98965	Callee	CG		98933	0					
ANR	98966	Identifier	CG		98933	0					
ANR	98967	ArgumentList	increment_lineno		98933	1					
ANR	98968	Argument	increment_lineno		98933	0					
ANR	98969	Identifier	increment_lineno		98933	0					
ANR	98970	PrimaryExpression	0		98933	1					
ANR	98971	Label	again :	1571:0:46859:46864	98933	3	True				
ANR	98972	Identifier	again		98933	0					
ANR	98973	ExpressionStatement	ZVAL_UNDEF ( & zv )	1572:1:46867:46882	98933	4	True				
ANR	98974	CallExpression	ZVAL_UNDEF ( & zv )		98933	0					
ANR	98975	Callee	ZVAL_UNDEF		98933	0					
ANR	98976	Identifier	ZVAL_UNDEF		98933	0					
ANR	98977	ArgumentList	& zv		98933	1					
ANR	98978	Argument	& zv		98933	0					
ANR	98979	UnaryOperationExpression	& zv		98933	0					
ANR	98980	UnaryOperator	&		98933	0					
ANR	98981	Identifier	zv		98933	1					
ANR	98982	ExpressionStatement	retval = lex_scan ( & zv )	1573:1:46885:46907	98933	5	True				
ANR	98983	AssignmentExpression	retval = lex_scan ( & zv )		98933	0		=			
ANR	98984	Identifier	retval		98933	0					
ANR	98985	CallExpression	lex_scan ( & zv )		98933	1					
ANR	98986	Callee	lex_scan		98933	0					
ANR	98987	Identifier	lex_scan		98933	0					
ANR	98988	ArgumentList	& zv		98933	1					
ANR	98989	Argument	& zv		98933	0					
ANR	98990	UnaryOperationExpression	& zv		98933	0					
ANR	98991	UnaryOperator	&		98933	0					
ANR	98992	Identifier	zv		98933	1					
ANR	98993	IfStatement	if ( EG ( exception ) )		98933	6					
ANR	98994	Condition	EG ( exception )	1574:5:46914:46926	98933	0	True				
ANR	98995	CallExpression	EG ( exception )		98933	0					
ANR	98996	Callee	EG		98933	0					
ANR	98997	Identifier	EG		98933	0					
ANR	98998	ArgumentList	exception		98933	1					
ANR	98999	Argument	exception		98933	0					
ANR	99000	Identifier	exception		98933	0					
ANR	99001	CompoundStatement		13:20:177:177	98933	1					
ANR	99002	ReturnStatement	return T_ERROR ;	1575:2:46933:46947	98933	0	True				
ANR	99003	Identifier	T_ERROR		98933	0					
ANR	99004	SwitchStatement	switch ( retval )		98933	7					
ANR	99005	Condition	retval	1578:9:46962:46967	98933	0	True				
ANR	99006	Identifier	retval		98933	0					
ANR	99007	CompoundStatement		17:17:218:218	98933	1					
ANR	99008	Label	case T_COMMENT :	1579:2:46974:46988	98933	0	True				
ANR	99009	Identifier	T_COMMENT		98933	0					
ANR	99010	Label	case T_DOC_COMMENT :	1580:2:46992:47010	98933	1	True				
ANR	99011	Identifier	T_DOC_COMMENT		98933	0					
ANR	99012	Label	case T_OPEN_TAG :	1581:2:47014:47029	98933	2	True				
ANR	99013	Identifier	T_OPEN_TAG		98933	0					
ANR	99014	Label	case T_WHITESPACE :	1582:2:47033:47050	98933	3	True				
ANR	99015	Identifier	T_WHITESPACE		98933	0					
ANR	99016	GotoStatement	goto again ;	1583:3:47055:47065	98933	4	True				
ANR	99017	Identifier	again		98933	0					
ANR	99018	Label	case T_CLOSE_TAG :	1585:2:47070:47086	98933	5	True				
ANR	99019	Identifier	T_CLOSE_TAG		98933	0					
ANR	99020	IfStatement	if ( LANG_SCNG ( yy_text ) [ LANG_SCNG ( yy_leng ) - 1 ] != '>' )		98933	6					
ANR	99021	Condition	LANG_SCNG ( yy_text ) [ LANG_SCNG ( yy_leng ) - 1 ] != '>'	1586:7:47095:47141	98933	0	True				
ANR	99022	EqualityExpression	LANG_SCNG ( yy_text ) [ LANG_SCNG ( yy_leng ) - 1 ] != '>'		98933	0		!=			
ANR	99023	ArrayIndexing	LANG_SCNG ( yy_text ) [ LANG_SCNG ( yy_leng ) - 1 ]		98933	0					
ANR	99024	CallExpression	LANG_SCNG ( yy_text )		98933	0					
ANR	99025	Callee	LANG_SCNG		98933	0					
ANR	99026	Identifier	LANG_SCNG		98933	0					
ANR	99027	ArgumentList	yy_text		98933	1					
ANR	99028	Argument	yy_text		98933	0					
ANR	99029	Identifier	yy_text		98933	0					
ANR	99030	AdditiveExpression	LANG_SCNG ( yy_leng ) - 1		98933	1		-			
ANR	99031	CallExpression	LANG_SCNG ( yy_leng )		98933	0					
ANR	99032	Callee	LANG_SCNG		98933	0					
ANR	99033	Identifier	LANG_SCNG		98933	0					
ANR	99034	ArgumentList	yy_leng		98933	1					
ANR	99035	Argument	yy_leng		98933	0					
ANR	99036	Identifier	yy_leng		98933	0					
ANR	99037	PrimaryExpression	1		98933	1					
ANR	99038	PrimaryExpression	'>'		98933	1					
ANR	99039	CompoundStatement		25:56:392:392	98933	1					
ANR	99040	ExpressionStatement	CG ( increment_lineno ) = 1	1587:4:47150:47174	98933	0	True				
ANR	99041	AssignmentExpression	CG ( increment_lineno ) = 1		98933	0		=			
ANR	99042	CallExpression	CG ( increment_lineno )		98933	0					
ANR	99043	Callee	CG		98933	0					
ANR	99044	Identifier	CG		98933	0					
ANR	99045	ArgumentList	increment_lineno		98933	1					
ANR	99046	Argument	increment_lineno		98933	0					
ANR	99047	Identifier	increment_lineno		98933	0					
ANR	99048	PrimaryExpression	1		98933	1					
ANR	99049	ExpressionStatement	retval = ';'	1589:3:47184:47196	98933	7	True				
ANR	99050	AssignmentExpression	retval = ';'		98933	0		=			
ANR	99051	Identifier	retval		98933	0					
ANR	99052	PrimaryExpression	';'		98933	1					
ANR	99053	BreakStatement	break ;	1590:3:47218:47223	98933	8	True				
ANR	99054	Label	case T_OPEN_TAG_WITH_ECHO :	1591:2:47227:47252	98933	9	True				
ANR	99055	Identifier	T_OPEN_TAG_WITH_ECHO		98933	0					
ANR	99056	ExpressionStatement	retval = T_ECHO	1592:3:47257:47272	98933	10	True				
ANR	99057	AssignmentExpression	retval = T_ECHO		98933	0		=			
ANR	99058	Identifier	retval		98933	0					
ANR	99059	Identifier	T_ECHO		98933	1					
ANR	99060	BreakStatement	break ;	1593:3:47277:47282	98933	11	True				
ANR	99061	IfStatement	if ( Z_TYPE ( zv ) != IS_UNDEF )		98933	8					
ANR	99062	Condition	Z_TYPE ( zv ) != IS_UNDEF	1595:5:47292:47313	98933	0	True				
ANR	99063	EqualityExpression	Z_TYPE ( zv ) != IS_UNDEF		98933	0		!=			
ANR	99064	CallExpression	Z_TYPE ( zv )		98933	0					
ANR	99065	Callee	Z_TYPE		98933	0					
ANR	99066	Identifier	Z_TYPE		98933	0					
ANR	99067	ArgumentList	zv		98933	1					
ANR	99068	Argument	zv		98933	0					
ANR	99069	Identifier	zv		98933	0					
ANR	99070	Identifier	IS_UNDEF		98933	1					
ANR	99071	CompoundStatement		34:29:564:564	98933	1					
ANR	99072	ExpressionStatement	elem -> ast = zend_ast_create_zval ( & zv )	1596:2:47320:47357	98933	0	True				
ANR	99073	AssignmentExpression	elem -> ast = zend_ast_create_zval ( & zv )		98933	0		=			
ANR	99074	PtrMemberAccess	elem -> ast		98933	0					
ANR	99075	Identifier	elem		98933	0					
ANR	99076	Identifier	ast		98933	1					
ANR	99077	CallExpression	zend_ast_create_zval ( & zv )		98933	1					
ANR	99078	Callee	zend_ast_create_zval		98933	0					
ANR	99079	Identifier	zend_ast_create_zval		98933	0					
ANR	99080	ArgumentList	& zv		98933	1					
ANR	99081	Argument	& zv		98933	0					
ANR	99082	UnaryOperationExpression	& zv		98933	0					
ANR	99083	UnaryOperator	&		98933	0					
ANR	99084	Identifier	zv		98933	1					
ANR	99085	ReturnStatement	return retval ;	1599:1:47364:47377	98933	9	True				
ANR	99086	Identifier	retval		98933	0					
ANR	99087	ReturnType	int		98933	1					
ANR	99088	Identifier	zendlex		98933	2					
ANR	99089	ParameterList	zend_parser_stack_elem * elem		98933	3					
ANR	99090	Parameter	zend_parser_stack_elem * elem	1561:12:46711:46738	98933	0	True				
ANR	99091	ParameterType	zend_parser_stack_elem *		98933	0					
ANR	99092	Identifier	elem		98933	1					
ANR	99093	CFGEntryNode	ENTRY		98933		True				
ANR	99094	CFGExitNode	EXIT		98933		True				
ANR	99095	Symbol	elem		98933						
ANR	99096	Symbol	exception		98933						
ANR	99097	Symbol	EG		98933						
ANR	99098	Symbol	T_ECHO		98933						
ANR	99099	Symbol	CG		98933						
ANR	99100	Symbol	* LANG_SCNG		98933						
ANR	99101	Symbol	zend_ast_create_zval		98933						
ANR	99102	Symbol	elem -> ast		98933						
ANR	99103	Symbol	& zv		98933						
ANR	99104	Symbol	T_ERROR		98933						
ANR	99105	Symbol	yy_leng		98933						
ANR	99106	Symbol	Z_TYPE		98933						
ANR	99107	Symbol	retval		98933						
ANR	99108	Symbol	yy_text		98933						
ANR	99109	Symbol	increment_lineno		98933						
ANR	99110	Symbol	LANG_SCNG		98933						
ANR	99111	Symbol	lex_scan		98933						
ANR	99112	Symbol	zend_lineno		98933						
ANR	99113	Symbol	* elem		98933						
ANR	99114	Symbol	zv		98933						
ANR	99115	Symbol	IS_UNDEF		98933						
ANR	99116	Function	zend_initialize_class_data	1603:0:47392:49757							
ANR	99117	FunctionDef	"zend_initialize_class_data (zend_class_entry * ce , zend_bool nullify_handlers)"		99116	0					
ANR	99118	CompoundStatement		1604:0:47493:49757	99116	0					
ANR	99119	IdentifierDeclStatement	zend_bool persistent_hashes = ( ce -> type == ZEND_INTERNAL_CLASS ) ? 1 : 0 ;	1605:1:47496:47567	99116	0	True				
ANR	99120	IdentifierDecl	persistent_hashes = ( ce -> type == ZEND_INTERNAL_CLASS ) ? 1 : 0		99116	0					
ANR	99121	IdentifierDeclType	zend_bool		99116	0					
ANR	99122	Identifier	persistent_hashes		99116	1					
ANR	99123	AssignmentExpression	persistent_hashes = ( ce -> type == ZEND_INTERNAL_CLASS ) ? 1 : 0		99116	2		=			
ANR	99124	Identifier	persistent_hashes		99116	0					
ANR	99125	ConditionalExpression	( ce -> type == ZEND_INTERNAL_CLASS ) ? 1 : 0		99116	1					
ANR	99126	Condition	ce -> type == ZEND_INTERNAL_CLASS		99116	0					
ANR	99127	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		99116	0		==			
ANR	99128	PtrMemberAccess	ce -> type		99116	0					
ANR	99129	Identifier	ce		99116	0					
ANR	99130	Identifier	type		99116	1					
ANR	99131	Identifier	ZEND_INTERNAL_CLASS		99116	1					
ANR	99132	PrimaryExpression	1		99116	1					
ANR	99133	PrimaryExpression	0		99116	2					
ANR	99134	IdentifierDeclStatement	dtor_func_t zval_ptr_dtor_func = ( ( persistent_hashes ) ? ZVAL_INTERNAL_PTR_DTOR : ZVAL_PTR_DTOR ) ;	1606:1:47570:47665	99116	1	True				
ANR	99135	IdentifierDecl	zval_ptr_dtor_func = ( ( persistent_hashes ) ? ZVAL_INTERNAL_PTR_DTOR : ZVAL_PTR_DTOR )		99116	0					
ANR	99136	IdentifierDeclType	dtor_func_t		99116	0					
ANR	99137	Identifier	zval_ptr_dtor_func		99116	1					
ANR	99138	AssignmentExpression	zval_ptr_dtor_func = ( ( persistent_hashes ) ? ZVAL_INTERNAL_PTR_DTOR : ZVAL_PTR_DTOR )		99116	2		=			
ANR	99139	Identifier	zval_ptr_dtor_func		99116	0					
ANR	99140	ConditionalExpression	( persistent_hashes ) ? ZVAL_INTERNAL_PTR_DTOR : ZVAL_PTR_DTOR		99116	1					
ANR	99141	Condition	persistent_hashes		99116	0					
ANR	99142	Identifier	persistent_hashes		99116	0					
ANR	99143	Identifier	ZVAL_INTERNAL_PTR_DTOR		99116	1					
ANR	99144	Identifier	ZVAL_PTR_DTOR		99116	2					
ANR	99145	ExpressionStatement	ce -> refcount = 1	1608:1:47669:47685	99116	2	True				
ANR	99146	AssignmentExpression	ce -> refcount = 1		99116	0		=			
ANR	99147	PtrMemberAccess	ce -> refcount		99116	0					
ANR	99148	Identifier	ce		99116	0					
ANR	99149	Identifier	refcount		99116	1					
ANR	99150	PrimaryExpression	1		99116	1					
ANR	99151	ExpressionStatement	ce -> ce_flags = ZEND_ACC_CONSTANTS_UPDATED	1609:1:47688:47729	99116	3	True				
ANR	99152	AssignmentExpression	ce -> ce_flags = ZEND_ACC_CONSTANTS_UPDATED		99116	0		=			
ANR	99153	PtrMemberAccess	ce -> ce_flags		99116	0					
ANR	99154	Identifier	ce		99116	0					
ANR	99155	Identifier	ce_flags		99116	1					
ANR	99156	Identifier	ZEND_ACC_CONSTANTS_UPDATED		99116	1					
ANR	99157	IfStatement	if ( CG ( compiler_options ) & ZEND_COMPILE_GUARDS )		99116	4					
ANR	99158	Condition	CG ( compiler_options ) & ZEND_COMPILE_GUARDS	1611:5:47737:47778	99116	0	True				
ANR	99159	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_GUARDS		99116	0		&			
ANR	99160	CallExpression	CG ( compiler_options )		99116	0					
ANR	99161	Callee	CG		99116	0					
ANR	99162	Identifier	CG		99116	0					
ANR	99163	ArgumentList	compiler_options		99116	1					
ANR	99164	Argument	compiler_options		99116	0					
ANR	99165	Identifier	compiler_options		99116	0					
ANR	99166	Identifier	ZEND_COMPILE_GUARDS		99116	1					
ANR	99167	CompoundStatement		8:49:287:287	99116	1					
ANR	99168	ExpressionStatement	ce -> ce_flags |= ZEND_ACC_USE_GUARDS	1612:2:47785:47820	99116	0	True				
ANR	99169	AssignmentExpression	ce -> ce_flags |= ZEND_ACC_USE_GUARDS		99116	0		|=			
ANR	99170	PtrMemberAccess	ce -> ce_flags		99116	0					
ANR	99171	Identifier	ce		99116	0					
ANR	99172	Identifier	ce_flags		99116	1					
ANR	99173	Identifier	ZEND_ACC_USE_GUARDS		99116	1					
ANR	99174	ExpressionStatement	ce -> default_properties_table = NULL	1615:1:47827:47862	99116	5	True				
ANR	99175	AssignmentExpression	ce -> default_properties_table = NULL		99116	0		=			
ANR	99176	PtrMemberAccess	ce -> default_properties_table		99116	0					
ANR	99177	Identifier	ce		99116	0					
ANR	99178	Identifier	default_properties_table		99116	1					
ANR	99179	Identifier	NULL		99116	1					
ANR	99180	ExpressionStatement	ce -> default_static_members_table = NULL	1616:1:47865:47904	99116	6	True				
ANR	99181	AssignmentExpression	ce -> default_static_members_table = NULL		99116	0		=			
ANR	99182	PtrMemberAccess	ce -> default_static_members_table		99116	0					
ANR	99183	Identifier	ce		99116	0					
ANR	99184	Identifier	default_static_members_table		99116	1					
ANR	99185	Identifier	NULL		99116	1					
ANR	99186	ExpressionStatement	"zend_hash_init_ex ( & ce -> properties_info , 8 , NULL , ( persistent_hashes ? zend_destroy_property_info_internal : NULL ) , persistent_hashes , 0 )"	1617:1:47907:48043	99116	7	True				
ANR	99187	CallExpression	"zend_hash_init_ex ( & ce -> properties_info , 8 , NULL , ( persistent_hashes ? zend_destroy_property_info_internal : NULL ) , persistent_hashes , 0 )"		99116	0					
ANR	99188	Callee	zend_hash_init_ex		99116	0					
ANR	99189	Identifier	zend_hash_init_ex		99116	0					
ANR	99190	ArgumentList	& ce -> properties_info		99116	1					
ANR	99191	Argument	& ce -> properties_info		99116	0					
ANR	99192	UnaryOperationExpression	& ce -> properties_info		99116	0					
ANR	99193	UnaryOperator	&		99116	0					
ANR	99194	PtrMemberAccess	ce -> properties_info		99116	1					
ANR	99195	Identifier	ce		99116	0					
ANR	99196	Identifier	properties_info		99116	1					
ANR	99197	Argument	8		99116	1					
ANR	99198	PrimaryExpression	8		99116	0					
ANR	99199	Argument	NULL		99116	2					
ANR	99200	Identifier	NULL		99116	0					
ANR	99201	Argument	persistent_hashes ? zend_destroy_property_info_internal : NULL		99116	3					
ANR	99202	ConditionalExpression	persistent_hashes ? zend_destroy_property_info_internal : NULL		99116	0					
ANR	99203	Condition	persistent_hashes		99116	0					
ANR	99204	Identifier	persistent_hashes		99116	0					
ANR	99205	Identifier	zend_destroy_property_info_internal		99116	1					
ANR	99206	Identifier	NULL		99116	2					
ANR	99207	Argument	persistent_hashes		99116	4					
ANR	99208	Identifier	persistent_hashes		99116	0					
ANR	99209	Argument	0		99116	5					
ANR	99210	PrimaryExpression	0		99116	0					
ANR	99211	ExpressionStatement	"zend_hash_init_ex ( & ce -> constants_table , 8 , NULL , zval_ptr_dtor_func , persistent_hashes , 0 )"	1618:1:48046:48136	99116	8	True				
ANR	99212	CallExpression	"zend_hash_init_ex ( & ce -> constants_table , 8 , NULL , zval_ptr_dtor_func , persistent_hashes , 0 )"		99116	0					
ANR	99213	Callee	zend_hash_init_ex		99116	0					
ANR	99214	Identifier	zend_hash_init_ex		99116	0					
ANR	99215	ArgumentList	& ce -> constants_table		99116	1					
ANR	99216	Argument	& ce -> constants_table		99116	0					
ANR	99217	UnaryOperationExpression	& ce -> constants_table		99116	0					
ANR	99218	UnaryOperator	&		99116	0					
ANR	99219	PtrMemberAccess	ce -> constants_table		99116	1					
ANR	99220	Identifier	ce		99116	0					
ANR	99221	Identifier	constants_table		99116	1					
ANR	99222	Argument	8		99116	1					
ANR	99223	PrimaryExpression	8		99116	0					
ANR	99224	Argument	NULL		99116	2					
ANR	99225	Identifier	NULL		99116	0					
ANR	99226	Argument	zval_ptr_dtor_func		99116	3					
ANR	99227	Identifier	zval_ptr_dtor_func		99116	0					
ANR	99228	Argument	persistent_hashes		99116	4					
ANR	99229	Identifier	persistent_hashes		99116	0					
ANR	99230	Argument	0		99116	5					
ANR	99231	PrimaryExpression	0		99116	0					
ANR	99232	ExpressionStatement	"zend_hash_init_ex ( & ce -> function_table , 8 , NULL , ZEND_FUNCTION_DTOR , persistent_hashes , 0 )"	1619:1:48139:48228	99116	9	True				
ANR	99233	CallExpression	"zend_hash_init_ex ( & ce -> function_table , 8 , NULL , ZEND_FUNCTION_DTOR , persistent_hashes , 0 )"		99116	0					
ANR	99234	Callee	zend_hash_init_ex		99116	0					
ANR	99235	Identifier	zend_hash_init_ex		99116	0					
ANR	99236	ArgumentList	& ce -> function_table		99116	1					
ANR	99237	Argument	& ce -> function_table		99116	0					
ANR	99238	UnaryOperationExpression	& ce -> function_table		99116	0					
ANR	99239	UnaryOperator	&		99116	0					
ANR	99240	PtrMemberAccess	ce -> function_table		99116	1					
ANR	99241	Identifier	ce		99116	0					
ANR	99242	Identifier	function_table		99116	1					
ANR	99243	Argument	8		99116	1					
ANR	99244	PrimaryExpression	8		99116	0					
ANR	99245	Argument	NULL		99116	2					
ANR	99246	Identifier	NULL		99116	0					
ANR	99247	Argument	ZEND_FUNCTION_DTOR		99116	3					
ANR	99248	Identifier	ZEND_FUNCTION_DTOR		99116	0					
ANR	99249	Argument	persistent_hashes		99116	4					
ANR	99250	Identifier	persistent_hashes		99116	0					
ANR	99251	Argument	0		99116	5					
ANR	99252	PrimaryExpression	0		99116	0					
ANR	99253	IfStatement	if ( ce -> type == ZEND_INTERNAL_CLASS )		99116	10					
ANR	99254	Condition	ce -> type == ZEND_INTERNAL_CLASS	1621:5:48236:48266	99116	0	True				
ANR	99255	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		99116	0		==			
ANR	99256	PtrMemberAccess	ce -> type		99116	0					
ANR	99257	Identifier	ce		99116	0					
ANR	99258	Identifier	type		99116	1					
ANR	99259	Identifier	ZEND_INTERNAL_CLASS		99116	1					
ANR	99260	CompoundStatement		20:2:790:837	99116	1					
ANR	99261	IdentifierDeclStatement	int n = zend_hash_num_elements ( CG ( class_table ) ) ;	1623:2:48284:48331	99116	0	True				
ANR	99262	IdentifierDecl	n = zend_hash_num_elements ( CG ( class_table ) )		99116	0					
ANR	99263	IdentifierDeclType	int		99116	0					
ANR	99264	Identifier	n		99116	1					
ANR	99265	AssignmentExpression	n = zend_hash_num_elements ( CG ( class_table ) )		99116	2		=			
ANR	99266	Identifier	n		99116	0					
ANR	99267	CallExpression	zend_hash_num_elements ( CG ( class_table ) )		99116	1					
ANR	99268	Callee	zend_hash_num_elements		99116	0					
ANR	99269	Identifier	zend_hash_num_elements		99116	0					
ANR	99270	ArgumentList	CG ( class_table )		99116	1					
ANR	99271	Argument	CG ( class_table )		99116	0					
ANR	99272	CallExpression	CG ( class_table )		99116	0					
ANR	99273	Callee	CG		99116	0					
ANR	99274	Identifier	CG		99116	0					
ANR	99275	ArgumentList	class_table		99116	1					
ANR	99276	Argument	class_table		99116	0					
ANR	99277	Identifier	class_table		99116	0					
ANR	99278	IfStatement	if ( CG ( static_members_table ) && n >= CG ( last_static_member ) )		99116	1					
ANR	99279	Condition	CG ( static_members_table ) && n >= CG ( last_static_member )	1625:6:48340:48394	99116	0	True				
ANR	99280	AndExpression	CG ( static_members_table ) && n >= CG ( last_static_member )		99116	0		&&			
ANR	99281	CallExpression	CG ( static_members_table )		99116	0					
ANR	99282	Callee	CG		99116	0					
ANR	99283	Identifier	CG		99116	0					
ANR	99284	ArgumentList	static_members_table		99116	1					
ANR	99285	Argument	static_members_table		99116	0					
ANR	99286	Identifier	static_members_table		99116	0					
ANR	99287	RelationalExpression	n >= CG ( last_static_member )		99116	1		>=			
ANR	99288	Identifier	n		99116	0					
ANR	99289	CallExpression	CG ( last_static_member )		99116	1					
ANR	99290	Callee	CG		99116	0					
ANR	99291	Identifier	CG		99116	0					
ANR	99292	ArgumentList	last_static_member		99116	1					
ANR	99293	Argument	last_static_member		99116	0					
ANR	99294	Identifier	last_static_member		99116	0					
ANR	99295	CompoundStatement		22:63:903:903	99116	1					
ANR	99296	ExpressionStatement	CG ( last_static_member ) = n + 1	1627:3:48450:48478	99116	0	True				
ANR	99297	AssignmentExpression	CG ( last_static_member ) = n + 1		99116	0		=			
ANR	99298	CallExpression	CG ( last_static_member )		99116	0					
ANR	99299	Callee	CG		99116	0					
ANR	99300	Identifier	CG		99116	0					
ANR	99301	ArgumentList	last_static_member		99116	1					
ANR	99302	Argument	last_static_member		99116	0					
ANR	99303	Identifier	last_static_member		99116	0					
ANR	99304	AdditiveExpression	n + 1		99116	1		+			
ANR	99305	Identifier	n		99116	0					
ANR	99306	PrimaryExpression	1		99116	1					
ANR	99307	ExpressionStatement	"CG ( static_members_table ) = realloc ( CG ( static_members_table ) , ( n + 1 ) * sizeof ( zval * ) )"	1628:3:48483:48564	99116	1	True				
ANR	99308	AssignmentExpression	"CG ( static_members_table ) = realloc ( CG ( static_members_table ) , ( n + 1 ) * sizeof ( zval * ) )"		99116	0		=			
ANR	99309	CallExpression	CG ( static_members_table )		99116	0					
ANR	99310	Callee	CG		99116	0					
ANR	99311	Identifier	CG		99116	0					
ANR	99312	ArgumentList	static_members_table		99116	1					
ANR	99313	Argument	static_members_table		99116	0					
ANR	99314	Identifier	static_members_table		99116	0					
ANR	99315	CallExpression	"realloc ( CG ( static_members_table ) , ( n + 1 ) * sizeof ( zval * ) )"		99116	1					
ANR	99316	Callee	realloc		99116	0					
ANR	99317	Identifier	realloc		99116	0					
ANR	99318	ArgumentList	CG ( static_members_table )		99116	1					
ANR	99319	Argument	CG ( static_members_table )		99116	0					
ANR	99320	CallExpression	CG ( static_members_table )		99116	0					
ANR	99321	Callee	CG		99116	0					
ANR	99322	Identifier	CG		99116	0					
ANR	99323	ArgumentList	static_members_table		99116	1					
ANR	99324	Argument	static_members_table		99116	0					
ANR	99325	Identifier	static_members_table		99116	0					
ANR	99326	Argument	( n + 1 ) * sizeof ( zval * )		99116	1					
ANR	99327	MultiplicativeExpression	( n + 1 ) * sizeof ( zval * )		99116	0		*			
ANR	99328	AdditiveExpression	n + 1		99116	0		+			
ANR	99329	Identifier	n		99116	0					
ANR	99330	PrimaryExpression	1		99116	1					
ANR	99331	SizeofExpression	sizeof ( zval * )		99116	1					
ANR	99332	Sizeof	sizeof		99116	0					
ANR	99333	SizeofOperand	zval *		99116	1					
ANR	99334	ExpressionStatement	CG ( static_members_table ) [ n ] = NULL	1629:3:48569:48603	99116	2	True				
ANR	99335	AssignmentExpression	CG ( static_members_table ) [ n ] = NULL		99116	0		=			
ANR	99336	ArrayIndexing	CG ( static_members_table ) [ n ]		99116	0					
ANR	99337	CallExpression	CG ( static_members_table )		99116	0					
ANR	99338	Callee	CG		99116	0					
ANR	99339	Identifier	CG		99116	0					
ANR	99340	ArgumentList	static_members_table		99116	1					
ANR	99341	Argument	static_members_table		99116	0					
ANR	99342	Identifier	static_members_table		99116	0					
ANR	99343	Identifier	n		99116	1					
ANR	99344	Identifier	NULL		99116	1					
ANR	99345	ExpressionStatement	ce -> static_members_table = ( zval * ) ( zend_intptr_t ) n	1631:2:48611:48661	99116	2	True				
ANR	99346	AssignmentExpression	ce -> static_members_table = ( zval * ) ( zend_intptr_t ) n		99116	0		=			
ANR	99347	PtrMemberAccess	ce -> static_members_table		99116	0					
ANR	99348	Identifier	ce		99116	0					
ANR	99349	Identifier	static_members_table		99116	1					
ANR	99350	CastExpression	( zval * ) ( zend_intptr_t ) n		99116	1					
ANR	99351	CastTarget	zval *		99116	0					
ANR	99352	CastExpression	( zend_intptr_t ) n		99116	1					
ANR	99353	CastTarget	zend_intptr_t		99116	0					
ANR	99354	Identifier	n		99116	1					
ANR	99355	ElseStatement	else		99116	0					
ANR	99356	CompoundStatement		32:8:1225:1225	99116	0					
ANR	99357	ExpressionStatement	ce -> static_members_table = ce -> default_static_members_table	1636:2:48723:48782	99116	0	True				
ANR	99358	AssignmentExpression	ce -> static_members_table = ce -> default_static_members_table		99116	0		=			
ANR	99359	PtrMemberAccess	ce -> static_members_table		99116	0					
ANR	99360	Identifier	ce		99116	0					
ANR	99361	Identifier	static_members_table		99116	1					
ANR	99362	PtrMemberAccess	ce -> default_static_members_table		99116	1					
ANR	99363	Identifier	ce		99116	0					
ANR	99364	Identifier	default_static_members_table		99116	1					
ANR	99365	ExpressionStatement	ce -> info . user . doc_comment = NULL	1637:2:48786:48818	99116	1	True				
ANR	99366	AssignmentExpression	ce -> info . user . doc_comment = NULL		99116	0		=			
ANR	99367	MemberAccess	ce -> info . user . doc_comment		99116	0					
ANR	99368	MemberAccess	ce -> info . user		99116	0					
ANR	99369	PtrMemberAccess	ce -> info		99116	0					
ANR	99370	Identifier	ce		99116	0					
ANR	99371	Identifier	info		99116	1					
ANR	99372	Identifier	user		99116	1					
ANR	99373	Identifier	doc_comment		99116	1					
ANR	99374	Identifier	NULL		99116	1					
ANR	99375	ExpressionStatement	ce -> default_properties_count = 0	1640:1:48825:48857	99116	11	True				
ANR	99376	AssignmentExpression	ce -> default_properties_count = 0		99116	0		=			
ANR	99377	PtrMemberAccess	ce -> default_properties_count		99116	0					
ANR	99378	Identifier	ce		99116	0					
ANR	99379	Identifier	default_properties_count		99116	1					
ANR	99380	PrimaryExpression	0		99116	1					
ANR	99381	ExpressionStatement	ce -> default_static_members_count = 0	1641:1:48860:48896	99116	12	True				
ANR	99382	AssignmentExpression	ce -> default_static_members_count = 0		99116	0		=			
ANR	99383	PtrMemberAccess	ce -> default_static_members_count		99116	0					
ANR	99384	Identifier	ce		99116	0					
ANR	99385	Identifier	default_static_members_count		99116	1					
ANR	99386	PrimaryExpression	0		99116	1					
ANR	99387	IfStatement	if ( nullify_handlers )		99116	13					
ANR	99388	Condition	nullify_handlers	1643:5:48904:48919	99116	0	True				
ANR	99389	Identifier	nullify_handlers		99116	0					
ANR	99390	CompoundStatement		40:23:1428:1428	99116	1					
ANR	99391	ExpressionStatement	ce -> constructor = NULL	1644:2:48926:48948	99116	0	True				
ANR	99392	AssignmentExpression	ce -> constructor = NULL		99116	0		=			
ANR	99393	PtrMemberAccess	ce -> constructor		99116	0					
ANR	99394	Identifier	ce		99116	0					
ANR	99395	Identifier	constructor		99116	1					
ANR	99396	Identifier	NULL		99116	1					
ANR	99397	ExpressionStatement	ce -> destructor = NULL	1645:2:48952:48973	99116	1	True				
ANR	99398	AssignmentExpression	ce -> destructor = NULL		99116	0		=			
ANR	99399	PtrMemberAccess	ce -> destructor		99116	0					
ANR	99400	Identifier	ce		99116	0					
ANR	99401	Identifier	destructor		99116	1					
ANR	99402	Identifier	NULL		99116	1					
ANR	99403	ExpressionStatement	ce -> clone = NULL	1646:2:48977:48993	99116	2	True				
ANR	99404	AssignmentExpression	ce -> clone = NULL		99116	0		=			
ANR	99405	PtrMemberAccess	ce -> clone		99116	0					
ANR	99406	Identifier	ce		99116	0					
ANR	99407	Identifier	clone		99116	1					
ANR	99408	Identifier	NULL		99116	1					
ANR	99409	ExpressionStatement	ce -> __get = NULL	1647:2:48997:49013	99116	3	True				
ANR	99410	AssignmentExpression	ce -> __get = NULL		99116	0		=			
ANR	99411	PtrMemberAccess	ce -> __get		99116	0					
ANR	99412	Identifier	ce		99116	0					
ANR	99413	Identifier	__get		99116	1					
ANR	99414	Identifier	NULL		99116	1					
ANR	99415	ExpressionStatement	ce -> __set = NULL	1648:2:49017:49033	99116	4	True				
ANR	99416	AssignmentExpression	ce -> __set = NULL		99116	0		=			
ANR	99417	PtrMemberAccess	ce -> __set		99116	0					
ANR	99418	Identifier	ce		99116	0					
ANR	99419	Identifier	__set		99116	1					
ANR	99420	Identifier	NULL		99116	1					
ANR	99421	ExpressionStatement	ce -> __unset = NULL	1649:2:49037:49055	99116	5	True				
ANR	99422	AssignmentExpression	ce -> __unset = NULL		99116	0		=			
ANR	99423	PtrMemberAccess	ce -> __unset		99116	0					
ANR	99424	Identifier	ce		99116	0					
ANR	99425	Identifier	__unset		99116	1					
ANR	99426	Identifier	NULL		99116	1					
ANR	99427	ExpressionStatement	ce -> __isset = NULL	1650:2:49059:49077	99116	6	True				
ANR	99428	AssignmentExpression	ce -> __isset = NULL		99116	0		=			
ANR	99429	PtrMemberAccess	ce -> __isset		99116	0					
ANR	99430	Identifier	ce		99116	0					
ANR	99431	Identifier	__isset		99116	1					
ANR	99432	Identifier	NULL		99116	1					
ANR	99433	ExpressionStatement	ce -> __call = NULL	1651:2:49081:49098	99116	7	True				
ANR	99434	AssignmentExpression	ce -> __call = NULL		99116	0		=			
ANR	99435	PtrMemberAccess	ce -> __call		99116	0					
ANR	99436	Identifier	ce		99116	0					
ANR	99437	Identifier	__call		99116	1					
ANR	99438	Identifier	NULL		99116	1					
ANR	99439	ExpressionStatement	ce -> __callstatic = NULL	1652:2:49102:49125	99116	8	True				
ANR	99440	AssignmentExpression	ce -> __callstatic = NULL		99116	0		=			
ANR	99441	PtrMemberAccess	ce -> __callstatic		99116	0					
ANR	99442	Identifier	ce		99116	0					
ANR	99443	Identifier	__callstatic		99116	1					
ANR	99444	Identifier	NULL		99116	1					
ANR	99445	ExpressionStatement	ce -> __tostring = NULL	1653:2:49129:49150	99116	9	True				
ANR	99446	AssignmentExpression	ce -> __tostring = NULL		99116	0		=			
ANR	99447	PtrMemberAccess	ce -> __tostring		99116	0					
ANR	99448	Identifier	ce		99116	0					
ANR	99449	Identifier	__tostring		99116	1					
ANR	99450	Identifier	NULL		99116	1					
ANR	99451	ExpressionStatement	ce -> create_object = NULL	1654:2:49154:49178	99116	10	True				
ANR	99452	AssignmentExpression	ce -> create_object = NULL		99116	0		=			
ANR	99453	PtrMemberAccess	ce -> create_object		99116	0					
ANR	99454	Identifier	ce		99116	0					
ANR	99455	Identifier	create_object		99116	1					
ANR	99456	Identifier	NULL		99116	1					
ANR	99457	ExpressionStatement	ce -> get_iterator = NULL	1655:2:49182:49205	99116	11	True				
ANR	99458	AssignmentExpression	ce -> get_iterator = NULL		99116	0		=			
ANR	99459	PtrMemberAccess	ce -> get_iterator		99116	0					
ANR	99460	Identifier	ce		99116	0					
ANR	99461	Identifier	get_iterator		99116	1					
ANR	99462	Identifier	NULL		99116	1					
ANR	99463	ExpressionStatement	ce -> iterator_funcs . funcs = NULL	1656:2:49209:49240	99116	12	True				
ANR	99464	AssignmentExpression	ce -> iterator_funcs . funcs = NULL		99116	0		=			
ANR	99465	MemberAccess	ce -> iterator_funcs . funcs		99116	0					
ANR	99466	PtrMemberAccess	ce -> iterator_funcs		99116	0					
ANR	99467	Identifier	ce		99116	0					
ANR	99468	Identifier	iterator_funcs		99116	1					
ANR	99469	Identifier	funcs		99116	1					
ANR	99470	Identifier	NULL		99116	1					
ANR	99471	ExpressionStatement	ce -> interface_gets_implemented = NULL	1657:2:49244:49281	99116	13	True				
ANR	99472	AssignmentExpression	ce -> interface_gets_implemented = NULL		99116	0		=			
ANR	99473	PtrMemberAccess	ce -> interface_gets_implemented		99116	0					
ANR	99474	Identifier	ce		99116	0					
ANR	99475	Identifier	interface_gets_implemented		99116	1					
ANR	99476	Identifier	NULL		99116	1					
ANR	99477	ExpressionStatement	ce -> get_static_method = NULL	1658:2:49285:49313	99116	14	True				
ANR	99478	AssignmentExpression	ce -> get_static_method = NULL		99116	0		=			
ANR	99479	PtrMemberAccess	ce -> get_static_method		99116	0					
ANR	99480	Identifier	ce		99116	0					
ANR	99481	Identifier	get_static_method		99116	1					
ANR	99482	Identifier	NULL		99116	1					
ANR	99483	ExpressionStatement	ce -> parent = NULL	1659:2:49317:49334	99116	15	True				
ANR	99484	AssignmentExpression	ce -> parent = NULL		99116	0		=			
ANR	99485	PtrMemberAccess	ce -> parent		99116	0					
ANR	99486	Identifier	ce		99116	0					
ANR	99487	Identifier	parent		99116	1					
ANR	99488	Identifier	NULL		99116	1					
ANR	99489	ExpressionStatement	ce -> num_interfaces = 0	1660:2:49338:49360	99116	16	True				
ANR	99490	AssignmentExpression	ce -> num_interfaces = 0		99116	0		=			
ANR	99491	PtrMemberAccess	ce -> num_interfaces		99116	0					
ANR	99492	Identifier	ce		99116	0					
ANR	99493	Identifier	num_interfaces		99116	1					
ANR	99494	PrimaryExpression	0		99116	1					
ANR	99495	ExpressionStatement	ce -> interfaces = NULL	1661:2:49364:49385	99116	17	True				
ANR	99496	AssignmentExpression	ce -> interfaces = NULL		99116	0		=			
ANR	99497	PtrMemberAccess	ce -> interfaces		99116	0					
ANR	99498	Identifier	ce		99116	0					
ANR	99499	Identifier	interfaces		99116	1					
ANR	99500	Identifier	NULL		99116	1					
ANR	99501	ExpressionStatement	ce -> num_traits = 0	1662:2:49389:49407	99116	18	True				
ANR	99502	AssignmentExpression	ce -> num_traits = 0		99116	0		=			
ANR	99503	PtrMemberAccess	ce -> num_traits		99116	0					
ANR	99504	Identifier	ce		99116	0					
ANR	99505	Identifier	num_traits		99116	1					
ANR	99506	PrimaryExpression	0		99116	1					
ANR	99507	ExpressionStatement	ce -> traits = NULL	1663:2:49411:49428	99116	19	True				
ANR	99508	AssignmentExpression	ce -> traits = NULL		99116	0		=			
ANR	99509	PtrMemberAccess	ce -> traits		99116	0					
ANR	99510	Identifier	ce		99116	0					
ANR	99511	Identifier	traits		99116	1					
ANR	99512	Identifier	NULL		99116	1					
ANR	99513	ExpressionStatement	ce -> trait_aliases = NULL	1664:2:49432:49456	99116	20	True				
ANR	99514	AssignmentExpression	ce -> trait_aliases = NULL		99116	0		=			
ANR	99515	PtrMemberAccess	ce -> trait_aliases		99116	0					
ANR	99516	Identifier	ce		99116	0					
ANR	99517	Identifier	trait_aliases		99116	1					
ANR	99518	Identifier	NULL		99116	1					
ANR	99519	ExpressionStatement	ce -> trait_precedences = NULL	1665:2:49460:49488	99116	21	True				
ANR	99520	AssignmentExpression	ce -> trait_precedences = NULL		99116	0		=			
ANR	99521	PtrMemberAccess	ce -> trait_precedences		99116	0					
ANR	99522	Identifier	ce		99116	0					
ANR	99523	Identifier	trait_precedences		99116	1					
ANR	99524	Identifier	NULL		99116	1					
ANR	99525	ExpressionStatement	ce -> serialize = NULL	1666:2:49492:49512	99116	22	True				
ANR	99526	AssignmentExpression	ce -> serialize = NULL		99116	0		=			
ANR	99527	PtrMemberAccess	ce -> serialize		99116	0					
ANR	99528	Identifier	ce		99116	0					
ANR	99529	Identifier	serialize		99116	1					
ANR	99530	Identifier	NULL		99116	1					
ANR	99531	ExpressionStatement	ce -> unserialize = NULL	1667:2:49516:49538	99116	23	True				
ANR	99532	AssignmentExpression	ce -> unserialize = NULL		99116	0		=			
ANR	99533	PtrMemberAccess	ce -> unserialize		99116	0					
ANR	99534	Identifier	ce		99116	0					
ANR	99535	Identifier	unserialize		99116	1					
ANR	99536	Identifier	NULL		99116	1					
ANR	99537	ExpressionStatement	ce -> serialize_func = NULL	1668:2:49542:49567	99116	24	True				
ANR	99538	AssignmentExpression	ce -> serialize_func = NULL		99116	0		=			
ANR	99539	PtrMemberAccess	ce -> serialize_func		99116	0					
ANR	99540	Identifier	ce		99116	0					
ANR	99541	Identifier	serialize_func		99116	1					
ANR	99542	Identifier	NULL		99116	1					
ANR	99543	ExpressionStatement	ce -> unserialize_func = NULL	1669:2:49571:49598	99116	25	True				
ANR	99544	AssignmentExpression	ce -> unserialize_func = NULL		99116	0		=			
ANR	99545	PtrMemberAccess	ce -> unserialize_func		99116	0					
ANR	99546	Identifier	ce		99116	0					
ANR	99547	Identifier	unserialize_func		99116	1					
ANR	99548	Identifier	NULL		99116	1					
ANR	99549	ExpressionStatement	ce -> __debugInfo = NULL	1670:2:49602:49624	99116	26	True				
ANR	99550	AssignmentExpression	ce -> __debugInfo = NULL		99116	0		=			
ANR	99551	PtrMemberAccess	ce -> __debugInfo		99116	0					
ANR	99552	Identifier	ce		99116	0					
ANR	99553	Identifier	__debugInfo		99116	1					
ANR	99554	Identifier	NULL		99116	1					
ANR	99555	IfStatement	if ( ce -> type == ZEND_INTERNAL_CLASS )		99116	27					
ANR	99556	Condition	ce -> type == ZEND_INTERNAL_CLASS	1671:6:49632:49662	99116	0	True				
ANR	99557	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		99116	0		==			
ANR	99558	PtrMemberAccess	ce -> type		99116	0					
ANR	99559	Identifier	ce		99116	0					
ANR	99560	Identifier	type		99116	1					
ANR	99561	Identifier	ZEND_INTERNAL_CLASS		99116	1					
ANR	99562	CompoundStatement		68:39:2171:2171	99116	1					
ANR	99563	ExpressionStatement	ce -> info . internal . module = NULL	1672:3:49670:49701	99116	0	True				
ANR	99564	AssignmentExpression	ce -> info . internal . module = NULL		99116	0		=			
ANR	99565	MemberAccess	ce -> info . internal . module		99116	0					
ANR	99566	MemberAccess	ce -> info . internal		99116	0					
ANR	99567	PtrMemberAccess	ce -> info		99116	0					
ANR	99568	Identifier	ce		99116	0					
ANR	99569	Identifier	info		99116	1					
ANR	99570	Identifier	internal		99116	1					
ANR	99571	Identifier	module		99116	1					
ANR	99572	Identifier	NULL		99116	1					
ANR	99573	ExpressionStatement	ce -> info . internal . builtin_functions = NULL	1673:3:49706:49748	99116	1	True				
ANR	99574	AssignmentExpression	ce -> info . internal . builtin_functions = NULL		99116	0		=			
ANR	99575	MemberAccess	ce -> info . internal . builtin_functions		99116	0					
ANR	99576	MemberAccess	ce -> info . internal		99116	0					
ANR	99577	PtrMemberAccess	ce -> info		99116	0					
ANR	99578	Identifier	ce		99116	0					
ANR	99579	Identifier	info		99116	1					
ANR	99580	Identifier	internal		99116	1					
ANR	99581	Identifier	builtin_functions		99116	1					
ANR	99582	Identifier	NULL		99116	1					
ANR	99583	ReturnType	ZEND_API void		99116	1					
ANR	99584	Identifier	zend_initialize_class_data		99116	2					
ANR	99585	ParameterList	"zend_class_entry * ce , zend_bool nullify_handlers"		99116	3					
ANR	99586	Parameter	zend_class_entry * ce	1603:41:47433:47452	99116	0	True				
ANR	99587	ParameterType	zend_class_entry *		99116	0					
ANR	99588	Identifier	ce		99116	1					
ANR	99589	Parameter	zend_bool nullify_handlers	1603:63:47455:47480	99116	1	True				
ANR	99590	ParameterType	zend_bool		99116	0					
ANR	99591	Identifier	nullify_handlers		99116	1					
ANR	99592	CFGEntryNode	ENTRY		99116		True				
ANR	99593	CFGExitNode	EXIT		99116		True				
ANR	99594	Symbol	ce -> default_properties_count		99116						
ANR	99595	Symbol	ce -> __set		99116						
ANR	99596	Symbol	ZEND_ACC_USE_GUARDS		99116						
ANR	99597	Symbol	* CG		99116						
ANR	99598	Symbol	* ce		99116						
ANR	99599	Symbol	realloc		99116						
ANR	99600	Symbol	ce -> interface_gets_implemented		99116						
ANR	99601	Symbol	ce -> unserialize		99116						
ANR	99602	Symbol	ce -> static_members_table		99116						
ANR	99603	Symbol	ce -> __tostring		99116						
ANR	99604	Symbol	ce -> __get		99116						
ANR	99605	Symbol	ce -> __callstatic		99116						
ANR	99606	Symbol	ce -> info . internal		99116						
ANR	99607	Symbol	ZEND_INTERNAL_CLASS		99116						
ANR	99608	Symbol	ZEND_FUNCTION_DTOR		99116						
ANR	99609	Symbol	NULL		99116						
ANR	99610	Symbol	ce -> destructor		99116						
ANR	99611	Symbol	ce -> info . user		99116						
ANR	99612	Symbol	ce -> __isset		99116						
ANR	99613	Symbol	ce -> parent		99116						
ANR	99614	Symbol	ZEND_COMPILE_GUARDS		99116						
ANR	99615	Symbol	ce -> info . internal . module		99116						
ANR	99616	Symbol	ce -> default_properties_table		99116						
ANR	99617	Symbol	ce -> refcount		99116						
ANR	99618	Symbol	ce -> default_static_members_table		99116						
ANR	99619	Symbol	ce -> trait_precedences		99116						
ANR	99620	Symbol	ZVAL_PTR_DTOR		99116						
ANR	99621	Symbol	ce -> ce_flags		99116						
ANR	99622	Symbol	ce -> __debugInfo		99116						
ANR	99623	Symbol	& ce -> properties_info		99116						
ANR	99624	Symbol	ce -> __call		99116						
ANR	99625	Symbol	ce -> get_iterator		99116						
ANR	99626	Symbol	ce -> info		99116						
ANR	99627	Symbol	ce -> serialize_func		99116						
ANR	99628	Symbol	ce -> clone		99116						
ANR	99629	Symbol	ce -> get_static_method		99116						
ANR	99630	Symbol	ce -> type		99116						
ANR	99631	Symbol	ZEND_ACC_CONSTANTS_UPDATED		99116						
ANR	99632	Symbol	ce -> default_static_members_count		99116						
ANR	99633	Symbol	ZVAL_INTERNAL_PTR_DTOR		99116						
ANR	99634	Symbol	static_members_table		99116						
ANR	99635	Symbol	& ce -> function_table		99116						
ANR	99636	Symbol	zend_destroy_property_info_internal		99116						
ANR	99637	Symbol	zval_ptr_dtor_func		99116						
ANR	99638	Symbol	nullify_handlers		99116						
ANR	99639	Symbol	compiler_options		99116						
ANR	99640	Symbol	ce -> num_interfaces		99116						
ANR	99641	Symbol	persistent_hashes		99116						
ANR	99642	Symbol	class_table		99116						
ANR	99643	Symbol	ce		99116						
ANR	99644	Symbol	ce -> info . internal . builtin_functions		99116						
ANR	99645	Symbol	ce -> constructor		99116						
ANR	99646	Symbol	ce -> trait_aliases		99116						
ANR	99647	Symbol	CG		99116						
ANR	99648	Symbol	ce -> interfaces		99116						
ANR	99649	Symbol	zend_hash_num_elements		99116						
ANR	99650	Symbol	last_static_member		99116						
ANR	99651	Symbol	ce -> unserialize_func		99116						
ANR	99652	Symbol	ce -> num_traits		99116						
ANR	99653	Symbol	n		99116						
ANR	99654	Symbol	ce -> traits		99116						
ANR	99655	Symbol	& ce -> constants_table		99116						
ANR	99656	Symbol	ce -> info . user . doc_comment		99116						
ANR	99657	Symbol	ce -> __unset		99116						
ANR	99658	Symbol	ce -> iterator_funcs		99116						
ANR	99659	Symbol	ce -> serialize		99116						
ANR	99660	Symbol	* n		99116						
ANR	99661	Symbol	ce -> create_object		99116						
ANR	99662	Symbol	ce -> iterator_funcs . funcs		99116						
ANR	99663	Function	zend_get_compiled_variable_name	1679:0:49770:49925							
ANR	99664	FunctionDef	"zend_get_compiled_variable_name (const zend_op_array * op_array , uint32_t var)"		99663	0					
ANR	99665	CompoundStatement		1680:0:49879:49925	99663	0					
ANR	99666	ReturnStatement	return op_array -> vars [ EX_VAR_TO_NUM ( var ) ] ;	1681:1:49882:49923	99663	0	True				
ANR	99667	ArrayIndexing	op_array -> vars [ EX_VAR_TO_NUM ( var ) ]		99663	0					
ANR	99668	PtrMemberAccess	op_array -> vars		99663	0					
ANR	99669	Identifier	op_array		99663	0					
ANR	99670	Identifier	vars		99663	1					
ANR	99671	CallExpression	EX_VAR_TO_NUM ( var )		99663	1					
ANR	99672	Callee	EX_VAR_TO_NUM		99663	0					
ANR	99673	Identifier	EX_VAR_TO_NUM		99663	0					
ANR	99674	ArgumentList	var		99663	1					
ANR	99675	Argument	var		99663	0					
ANR	99676	Identifier	var		99663	0					
ANR	99677	ReturnType	ZEND_API zend_string *		99663	1					
ANR	99678	Identifier	zend_get_compiled_variable_name		99663	2					
ANR	99679	ParameterList	"const zend_op_array * op_array , uint32_t var"		99663	3					
ANR	99680	Parameter	const zend_op_array * op_array	1679:54:49824:49852	99663	0	True				
ANR	99681	ParameterType	const zend_op_array *		99663	0					
ANR	99682	Identifier	op_array		99663	1					
ANR	99683	Parameter	uint32_t var	1679:85:49855:49866	99663	1	True				
ANR	99684	ParameterType	uint32_t		99663	0					
ANR	99685	Identifier	var		99663	1					
ANR	99686	CFGEntryNode	ENTRY		99663		True				
ANR	99687	CFGExitNode	EXIT		99663		True				
ANR	99688	Symbol	* EX_VAR_TO_NUM		99663						
ANR	99689	Symbol	* op_array -> vars		99663						
ANR	99690	Symbol	op_array -> vars		99663						
ANR	99691	Symbol	var		99663						
ANR	99692	Symbol	* * op_array		99663						
ANR	99693	Symbol	op_array		99663						
ANR	99694	Symbol	* op_array		99663						
ANR	99695	Symbol	EX_VAR_TO_NUM		99663						
ANR	99696	Function	zend_ast_append_str	1685:0:49938:50542							
ANR	99697	FunctionDef	"zend_ast_append_str (zend_ast * left_ast , zend_ast * right_ast)"		99696	0					
ANR	99698	CompoundStatement		1686:0:50019:50542	99696	0					
ANR	99699	IdentifierDeclStatement	zval * left_zv = zend_ast_get_zval ( left_ast ) ;	1687:1:50022:50065	99696	0	True				
ANR	99700	IdentifierDecl	* left_zv = zend_ast_get_zval ( left_ast )		99696	0					
ANR	99701	IdentifierDeclType	zval *		99696	0					
ANR	99702	Identifier	left_zv		99696	1					
ANR	99703	AssignmentExpression	* left_zv = zend_ast_get_zval ( left_ast )		99696	2		=			
ANR	99704	Identifier	left_zv		99696	0					
ANR	99705	CallExpression	zend_ast_get_zval ( left_ast )		99696	1					
ANR	99706	Callee	zend_ast_get_zval		99696	0					
ANR	99707	Identifier	zend_ast_get_zval		99696	0					
ANR	99708	ArgumentList	left_ast		99696	1					
ANR	99709	Argument	left_ast		99696	0					
ANR	99710	Identifier	left_ast		99696	0					
ANR	99711	IdentifierDeclStatement	zend_string * left = Z_STR_P ( left_zv ) ;	1688:1:50068:50104	99696	1	True				
ANR	99712	IdentifierDecl	* left = Z_STR_P ( left_zv )		99696	0					
ANR	99713	IdentifierDeclType	zend_string *		99696	0					
ANR	99714	Identifier	left		99696	1					
ANR	99715	AssignmentExpression	* left = Z_STR_P ( left_zv )		99696	2		=			
ANR	99716	Identifier	left		99696	0					
ANR	99717	CallExpression	Z_STR_P ( left_zv )		99696	1					
ANR	99718	Callee	Z_STR_P		99696	0					
ANR	99719	Identifier	Z_STR_P		99696	0					
ANR	99720	ArgumentList	left_zv		99696	1					
ANR	99721	Argument	left_zv		99696	0					
ANR	99722	Identifier	left_zv		99696	0					
ANR	99723	IdentifierDeclStatement	zend_string * right = zend_ast_get_str ( right_ast ) ;	1689:1:50107:50155	99696	2	True				
ANR	99724	IdentifierDecl	* right = zend_ast_get_str ( right_ast )		99696	0					
ANR	99725	IdentifierDeclType	zend_string *		99696	0					
ANR	99726	Identifier	right		99696	1					
ANR	99727	AssignmentExpression	* right = zend_ast_get_str ( right_ast )		99696	2		=			
ANR	99728	Identifier	right		99696	0					
ANR	99729	CallExpression	zend_ast_get_str ( right_ast )		99696	1					
ANR	99730	Callee	zend_ast_get_str		99696	0					
ANR	99731	Identifier	zend_ast_get_str		99696	0					
ANR	99732	ArgumentList	right_ast		99696	1					
ANR	99733	Argument	right_ast		99696	0					
ANR	99734	Identifier	right_ast		99696	0					
ANR	99735	IdentifierDeclStatement	zend_string * result ;	1691:1:50159:50178	99696	3	True				
ANR	99736	IdentifierDecl	* result		99696	0					
ANR	99737	IdentifierDeclType	zend_string *		99696	0					
ANR	99738	Identifier	result		99696	1					
ANR	99739	IdentifierDeclStatement	size_t left_len = ZSTR_LEN ( left ) ;	1692:1:50181:50213	99696	4	True				
ANR	99740	IdentifierDecl	left_len = ZSTR_LEN ( left )		99696	0					
ANR	99741	IdentifierDeclType	size_t		99696	0					
ANR	99742	Identifier	left_len		99696	1					
ANR	99743	AssignmentExpression	left_len = ZSTR_LEN ( left )		99696	2		=			
ANR	99744	Identifier	left_len		99696	0					
ANR	99745	CallExpression	ZSTR_LEN ( left )		99696	1					
ANR	99746	Callee	ZSTR_LEN		99696	0					
ANR	99747	Identifier	ZSTR_LEN		99696	0					
ANR	99748	ArgumentList	left		99696	1					
ANR	99749	Argument	left		99696	0					
ANR	99750	Identifier	left		99696	0					
ANR	99751	IdentifierDeclStatement	size_t len = left_len + ZSTR_LEN ( right ) + 1 ;	1693:1:50216:50259	99696	5	True				
ANR	99752	IdentifierDecl	len = left_len + ZSTR_LEN ( right ) + 1		99696	0					
ANR	99753	IdentifierDeclType	size_t		99696	0					
ANR	99754	Identifier	len		99696	1					
ANR	99755	AssignmentExpression	len = left_len + ZSTR_LEN ( right ) + 1		99696	2		=			
ANR	99756	Identifier	len		99696	0					
ANR	99757	AdditiveExpression	left_len + ZSTR_LEN ( right ) + 1		99696	1		+			
ANR	99758	Identifier	left_len		99696	0					
ANR	99759	AdditiveExpression	ZSTR_LEN ( right ) + 1		99696	1		+			
ANR	99760	CallExpression	ZSTR_LEN ( right )		99696	0					
ANR	99761	Callee	ZSTR_LEN		99696	0					
ANR	99762	Identifier	ZSTR_LEN		99696	0					
ANR	99763	ArgumentList	right		99696	1					
ANR	99764	Argument	right		99696	0					
ANR	99765	Identifier	right		99696	0					
ANR	99766	PrimaryExpression	1		99696	1					
ANR	99767	ExpressionStatement	"result = zend_string_extend ( left , len , 0 )"	1695:1:50280:50321	99696	6	True				
ANR	99768	AssignmentExpression	"result = zend_string_extend ( left , len , 0 )"		99696	0		=			
ANR	99769	Identifier	result		99696	0					
ANR	99770	CallExpression	"zend_string_extend ( left , len , 0 )"		99696	1					
ANR	99771	Callee	zend_string_extend		99696	0					
ANR	99772	Identifier	zend_string_extend		99696	0					
ANR	99773	ArgumentList	left		99696	1					
ANR	99774	Argument	left		99696	0					
ANR	99775	Identifier	left		99696	0					
ANR	99776	Argument	len		99696	1					
ANR	99777	Identifier	len		99696	0					
ANR	99778	Argument	0		99696	2					
ANR	99779	PrimaryExpression	0		99696	0					
ANR	99780	ExpressionStatement	ZSTR_VAL ( result ) [ left_len ] = '\\\\'	1696:1:50324:50357	99696	7	True				
ANR	99781	AssignmentExpression	ZSTR_VAL ( result ) [ left_len ] = '\\\\'		99696	0		=			
ANR	99782	ArrayIndexing	ZSTR_VAL ( result ) [ left_len ]		99696	0					
ANR	99783	CallExpression	ZSTR_VAL ( result )		99696	0					
ANR	99784	Callee	ZSTR_VAL		99696	0					
ANR	99785	Identifier	ZSTR_VAL		99696	0					
ANR	99786	ArgumentList	result		99696	1					
ANR	99787	Argument	result		99696	0					
ANR	99788	Identifier	result		99696	0					
ANR	99789	Identifier	left_len		99696	1					
ANR	99790	PrimaryExpression	'\\\\'		99696	1					
ANR	99791	ExpressionStatement	"memcpy ( & ZSTR_VAL ( result ) [ left_len + 1 ] , ZSTR_VAL ( right ) , ZSTR_LEN ( right ) )"	1697:1:50360:50433	99696	8	True				
ANR	99792	CallExpression	"memcpy ( & ZSTR_VAL ( result ) [ left_len + 1 ] , ZSTR_VAL ( right ) , ZSTR_LEN ( right ) )"		99696	0					
ANR	99793	Callee	memcpy		99696	0					
ANR	99794	Identifier	memcpy		99696	0					
ANR	99795	ArgumentList	& ZSTR_VAL ( result ) [ left_len + 1 ]		99696	1					
ANR	99796	Argument	& ZSTR_VAL ( result ) [ left_len + 1 ]		99696	0					
ANR	99797	UnaryOperationExpression	& ZSTR_VAL ( result ) [ left_len + 1 ]		99696	0					
ANR	99798	UnaryOperator	&		99696	0					
ANR	99799	ArrayIndexing	ZSTR_VAL ( result ) [ left_len + 1 ]		99696	1					
ANR	99800	CallExpression	ZSTR_VAL ( result )		99696	0					
ANR	99801	Callee	ZSTR_VAL		99696	0					
ANR	99802	Identifier	ZSTR_VAL		99696	0					
ANR	99803	ArgumentList	result		99696	1					
ANR	99804	Argument	result		99696	0					
ANR	99805	Identifier	result		99696	0					
ANR	99806	AdditiveExpression	left_len + 1		99696	1		+			
ANR	99807	Identifier	left_len		99696	0					
ANR	99808	PrimaryExpression	1		99696	1					
ANR	99809	Argument	ZSTR_VAL ( right )		99696	1					
ANR	99810	CallExpression	ZSTR_VAL ( right )		99696	0					
ANR	99811	Callee	ZSTR_VAL		99696	0					
ANR	99812	Identifier	ZSTR_VAL		99696	0					
ANR	99813	ArgumentList	right		99696	1					
ANR	99814	Argument	right		99696	0					
ANR	99815	Identifier	right		99696	0					
ANR	99816	Argument	ZSTR_LEN ( right )		99696	2					
ANR	99817	CallExpression	ZSTR_LEN ( right )		99696	0					
ANR	99818	Callee	ZSTR_LEN		99696	0					
ANR	99819	Identifier	ZSTR_LEN		99696	0					
ANR	99820	ArgumentList	right		99696	1					
ANR	99821	Argument	right		99696	0					
ANR	99822	Identifier	right		99696	0					
ANR	99823	ExpressionStatement	ZSTR_VAL ( result ) [ len ] = '\\0'	1698:1:50436:50464	99696	9	True				
ANR	99824	AssignmentExpression	ZSTR_VAL ( result ) [ len ] = '\\0'		99696	0		=			
ANR	99825	ArrayIndexing	ZSTR_VAL ( result ) [ len ]		99696	0					
ANR	99826	CallExpression	ZSTR_VAL ( result )		99696	0					
ANR	99827	Callee	ZSTR_VAL		99696	0					
ANR	99828	Identifier	ZSTR_VAL		99696	0					
ANR	99829	ArgumentList	result		99696	1					
ANR	99830	Argument	result		99696	0					
ANR	99831	Identifier	result		99696	0					
ANR	99832	Identifier	len		99696	1					
ANR	99833	PrimaryExpression	'\\0'		99696	1					
ANR	99834	ExpressionStatement	zend_string_release ( right )	1699:1:50467:50493	99696	10	True				
ANR	99835	CallExpression	zend_string_release ( right )		99696	0					
ANR	99836	Callee	zend_string_release		99696	0					
ANR	99837	Identifier	zend_string_release		99696	0					
ANR	99838	ArgumentList	right		99696	1					
ANR	99839	Argument	right		99696	0					
ANR	99840	Identifier	right		99696	0					
ANR	99841	ExpressionStatement	"ZVAL_STR ( left_zv , result )"	1701:1:50497:50522	99696	11	True				
ANR	99842	CallExpression	"ZVAL_STR ( left_zv , result )"		99696	0					
ANR	99843	Callee	ZVAL_STR		99696	0					
ANR	99844	Identifier	ZVAL_STR		99696	0					
ANR	99845	ArgumentList	left_zv		99696	1					
ANR	99846	Argument	left_zv		99696	0					
ANR	99847	Identifier	left_zv		99696	0					
ANR	99848	Argument	result		99696	1					
ANR	99849	Identifier	result		99696	0					
ANR	99850	ReturnStatement	return left_ast ;	1702:1:50525:50540	99696	12	True				
ANR	99851	Identifier	left_ast		99696	0					
ANR	99852	ReturnType	zend_ast *		99696	1					
ANR	99853	Identifier	zend_ast_append_str		99696	2					
ANR	99854	ParameterList	"zend_ast * left_ast , zend_ast * right_ast"		99696	3					
ANR	99855	Parameter	zend_ast * left_ast	1685:30:49968:49985	99696	0	True				
ANR	99856	ParameterType	zend_ast *		99696	0					
ANR	99857	Identifier	left_ast		99696	1					
ANR	99858	Parameter	zend_ast * right_ast	1685:50:49988:50006	99696	1	True				
ANR	99859	ParameterType	zend_ast *		99696	0					
ANR	99860	Identifier	right_ast		99696	1					
ANR	99861	CFGEntryNode	ENTRY		99696		True				
ANR	99862	CFGExitNode	EXIT		99696		True				
ANR	99863	Symbol	right_ast		99696						
ANR	99864	Symbol	zend_string_extend		99696						
ANR	99865	Symbol	right		99696						
ANR	99866	Symbol	left_len		99696						
ANR	99867	Symbol	ZSTR_VAL		99696						
ANR	99868	Symbol	result		99696						
ANR	99869	Symbol	zend_ast_get_str		99696						
ANR	99870	Symbol	len		99696						
ANR	99871	Symbol	left		99696						
ANR	99872	Symbol	ZSTR_LEN		99696						
ANR	99873	Symbol	left_zv		99696						
ANR	99874	Symbol	left_ast		99696						
ANR	99875	Symbol	Z_STR_P		99696						
ANR	99876	Symbol	zend_ast_get_zval		99696						
ANR	99877	Symbol	* ZSTR_VAL		99696						
ANR	99878	Symbol	* left_len		99696						
ANR	99879	Symbol	* len		99696						
ANR	99880	Function	zend_verify_namespace	1706:0:50555:50746							
ANR	99881	FunctionDef	zend_verify_namespace ()		99880	0					
ANR	99882	CompoundStatement		1707:0:50598:50746	99880	0					
ANR	99883	IfStatement	if ( FC ( has_bracketed_namespaces ) && ! FC ( in_namespace ) )		99880	0					
ANR	99884	Condition	FC ( has_bracketed_namespaces ) && ! FC ( in_namespace )	1708:5:50605:50653	99880	0	True				
ANR	99885	AndExpression	FC ( has_bracketed_namespaces ) && ! FC ( in_namespace )		99880	0		&&			
ANR	99886	CallExpression	FC ( has_bracketed_namespaces )		99880	0					
ANR	99887	Callee	FC		99880	0					
ANR	99888	Identifier	FC		99880	0					
ANR	99889	ArgumentList	has_bracketed_namespaces		99880	1					
ANR	99890	Argument	has_bracketed_namespaces		99880	0					
ANR	99891	Identifier	has_bracketed_namespaces		99880	0					
ANR	99892	UnaryOperationExpression	! FC ( in_namespace )		99880	1					
ANR	99893	UnaryOperator	!		99880	0					
ANR	99894	CallExpression	FC ( in_namespace )		99880	1					
ANR	99895	Callee	FC		99880	0					
ANR	99896	Identifier	FC		99880	0					
ANR	99897	ArgumentList	in_namespace		99880	1					
ANR	99898	Argument	in_namespace		99880	0					
ANR	99899	Identifier	in_namespace		99880	0					
ANR	99900	CompoundStatement		2:56:57:57	99880	1					
ANR	99901	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""No code may exist outside of namespace {}"" )"	1709:2:50660:50741	99880	0	True				
ANR	99902	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""No code may exist outside of namespace {}"" )"		99880	0					
ANR	99903	Callee	zend_error_noreturn		99880	0					
ANR	99904	Identifier	zend_error_noreturn		99880	0					
ANR	99905	ArgumentList	E_COMPILE_ERROR		99880	1					
ANR	99906	Argument	E_COMPILE_ERROR		99880	0					
ANR	99907	Identifier	E_COMPILE_ERROR		99880	0					
ANR	99908	Argument	"""No code may exist outside of namespace {}"""		99880	1					
ANR	99909	PrimaryExpression	"""No code may exist outside of namespace {}"""		99880	0					
ANR	99910	ReturnType	void		99880	1					
ANR	99911	Identifier	zend_verify_namespace		99880	2					
ANR	99912	ParameterList			99880	3					
ANR	99913	CFGEntryNode	ENTRY		99880		True				
ANR	99914	CFGExitNode	EXIT		99880		True				
ANR	99915	Symbol	in_namespace		99880						
ANR	99916	Symbol	has_bracketed_namespaces		99880						
ANR	99917	Symbol	E_COMPILE_ERROR		99880						
ANR	99918	Symbol	FC		99880						
ANR	99919	Function	zend_dirname	1716:0:50826:52912							
ANR	99920	FunctionDef	"zend_dirname (char * path , size_t len)"		99919	0					
ANR	99921	CompoundStatement		1717:0:50879:52912	99919	0					
ANR	99922	Statement	register	1718:1:50882:50889	99919	0	True				
ANR	99923	IdentifierDeclStatement	char * end = path + len - 1 ;	1718:10:50891:50917	99919	1	True				
ANR	99924	IdentifierDecl	* end = path + len - 1		99919	0					
ANR	99925	IdentifierDeclType	char *		99919	0					
ANR	99926	Identifier	end		99919	1					
ANR	99927	AssignmentExpression	* end = path + len - 1		99919	2		=			
ANR	99928	Identifier	end		99919	0					
ANR	99929	AdditiveExpression	path + len - 1		99919	1		+			
ANR	99930	Identifier	path		99919	0					
ANR	99931	AdditiveExpression	len - 1		99919	1		-			
ANR	99932	Identifier	len		99919	0					
ANR	99933	PrimaryExpression	1		99919	1					
ANR	99934	IdentifierDeclStatement	unsigned int len_adjust = 0 ;	1719:1:50920:50947	99919	2	True				
ANR	99935	IdentifierDecl	len_adjust = 0		99919	0					
ANR	99936	IdentifierDeclType	unsigned int		99919	0					
ANR	99937	Identifier	len_adjust		99919	1					
ANR	99938	AssignmentExpression	len_adjust = 0		99919	2		=			
ANR	99939	Identifier	len_adjust		99919	0					
ANR	99940	PrimaryExpression	0		99919	1					
ANR	99941	IfStatement	if ( ( 2 <= len ) && isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] ) && ( ':' == path [ 1 ] ) )		99919	3					
ANR	99942	Condition	( 2 <= len ) && isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] ) && ( ':' == path [ 1 ] )	1725:5:51125:51198	99919	0	True				
ANR	99943	AndExpression	( 2 <= len ) && isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] ) && ( ':' == path [ 1 ] )		99919	0		&&			
ANR	99944	RelationalExpression	2 <= len		99919	0		<=			
ANR	99945	PrimaryExpression	2		99919	0					
ANR	99946	Identifier	len		99919	1					
ANR	99947	AndExpression	isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] ) && ( ':' == path [ 1 ] )		99919	1		&&			
ANR	99948	CallExpression	isalpha ( ( int ) ( ( unsigned char * ) path ) [ 0 ] )		99919	0					
ANR	99949	Callee	isalpha		99919	0					
ANR	99950	Identifier	isalpha		99919	0					
ANR	99951	ArgumentList	( int ) ( ( unsigned char * ) path ) [ 0 ]		99919	1					
ANR	99952	Argument	( int ) ( ( unsigned char * ) path ) [ 0 ]		99919	0					
ANR	99953	CastExpression	( int ) ( ( unsigned char * ) path ) [ 0 ]		99919	0					
ANR	99954	CastTarget	int		99919	0					
ANR	99955	ArrayIndexing	( ( unsigned char * ) path ) [ 0 ]		99919	1					
ANR	99956	CastExpression	( unsigned char * ) path		99919	0					
ANR	99957	CastTarget	unsigned char *		99919	0					
ANR	99958	Identifier	path		99919	1					
ANR	99959	PrimaryExpression	0		99919	1					
ANR	99960	EqualityExpression	':' == path [ 1 ]		99919	1		==			
ANR	99961	PrimaryExpression	':'		99919	0					
ANR	99962	ArrayIndexing	path [ 1 ]		99919	1					
ANR	99963	Identifier	path		99919	0					
ANR	99964	PrimaryExpression	1		99919	1					
ANR	99965	CompoundStatement		9:81:321:321	99919	1					
ANR	99966	ExpressionStatement	path += 2	1727:2:51267:51276	99919	0	True				
ANR	99967	AssignmentExpression	path += 2		99919	0		+=			
ANR	99968	Identifier	path		99919	0					
ANR	99969	PrimaryExpression	2		99919	1					
ANR	99970	ExpressionStatement	len_adjust += 2	1728:2:51280:51295	99919	1	True				
ANR	99971	AssignmentExpression	len_adjust += 2		99919	0		+=			
ANR	99972	Identifier	len_adjust		99919	0					
ANR	99973	PrimaryExpression	2		99919	1					
ANR	99974	IfStatement	if ( 2 == len )		99919	2					
ANR	99975	Condition	2 == len	1729:6:51303:51310	99919	0	True				
ANR	99976	EqualityExpression	2 == len		99919	0		==			
ANR	99977	PrimaryExpression	2		99919	0					
ANR	99978	Identifier	len		99919	1					
ANR	99979	CompoundStatement		13:16:433:433	99919	1					
ANR	99980	ReturnStatement	return len ;	1734:3:51478:51488	99919	0	True				
ANR	99981	Identifier	len		99919	0					
ANR	99982	IfStatement	if ( len == 0 )		99919	4					
ANR	99983	Condition	len == 0	1755:5:51976:51983	99919	0	True				
ANR	99984	EqualityExpression	len == 0		99919	0		==			
ANR	99985	Identifier	len		99919	0					
ANR	99986	PrimaryExpression	0		99919	1					
ANR	99987	CompoundStatement		39:15:1106:1106	99919	1					
ANR	99988	ReturnStatement	return 0 ;	1757:2:52027:52035	99919	0	True				
ANR	99989	PrimaryExpression	0		99919	0					
ANR	99990	WhileStatement	while ( end >= path && IS_SLASH_P ( end ) )		99919	5					
ANR	99991	Condition	end >= path && IS_SLASH_P ( end )	1761:8:52079:52108	99919	0	True				
ANR	99992	AndExpression	end >= path && IS_SLASH_P ( end )		99919	0		&&			
ANR	99993	RelationalExpression	end >= path		99919	0		>=			
ANR	99994	Identifier	end		99919	0					
ANR	99995	Identifier	path		99919	1					
ANR	99996	CallExpression	IS_SLASH_P ( end )		99919	1					
ANR	99997	Callee	IS_SLASH_P		99919	0					
ANR	99998	Identifier	IS_SLASH_P		99919	0					
ANR	99999	ArgumentList	end		99919	1					
ANR	100000	Argument	end		99919	0					
ANR	100001	Identifier	end		99919	0					
ANR	100002	CompoundStatement		45:40:1231:1231	99919	1					
ANR	100003	ExpressionStatement	end --	1762:2:52115:52120	99919	0	True				
ANR	100004	PostIncDecOperationExpression	end --		99919	0					
ANR	100005	Identifier	end		99919	0					
ANR	100006	IncDec	--		99919	1					
ANR	100007	IfStatement	if ( end < path )		99919	6					
ANR	100008	Condition	end < path	1764:5:52130:52139	99919	0	True				
ANR	100009	RelationalExpression	end < path		99919	0		<			
ANR	100010	Identifier	end		99919	0					
ANR	100011	Identifier	path		99919	1					
ANR	100012	CompoundStatement		48:17:1262:1262	99919	1					
ANR	100013	ExpressionStatement	path [ 0 ] = DEFAULT_SLASH	1766:2:52186:52209	99919	0	True				
ANR	100014	AssignmentExpression	path [ 0 ] = DEFAULT_SLASH		99919	0		=			
ANR	100015	ArrayIndexing	path [ 0 ]		99919	0					
ANR	100016	Identifier	path		99919	0					
ANR	100017	PrimaryExpression	0		99919	1					
ANR	100018	Identifier	DEFAULT_SLASH		99919	1					
ANR	100019	ExpressionStatement	path [ 1 ] = '\\0'	1767:2:52213:52227	99919	1	True				
ANR	100020	AssignmentExpression	path [ 1 ] = '\\0'		99919	0		=			
ANR	100021	ArrayIndexing	path [ 1 ]		99919	0					
ANR	100022	Identifier	path		99919	0					
ANR	100023	PrimaryExpression	1		99919	1					
ANR	100024	PrimaryExpression	'\\0'		99919	1					
ANR	100025	ReturnStatement	return 1 + len_adjust ;	1768:2:52231:52252	99919	2	True				
ANR	100026	AdditiveExpression	1 + len_adjust		99919	0		+			
ANR	100027	PrimaryExpression	1		99919	0					
ANR	100028	Identifier	len_adjust		99919	1					
ANR	100029	WhileStatement	while ( end >= path && ! IS_SLASH_P ( end ) )		99919	7					
ANR	100030	Condition	end >= path && ! IS_SLASH_P ( end )	1772:8:52288:52318	99919	0	True				
ANR	100031	AndExpression	end >= path && ! IS_SLASH_P ( end )		99919	0		&&			
ANR	100032	RelationalExpression	end >= path		99919	0		>=			
ANR	100033	Identifier	end		99919	0					
ANR	100034	Identifier	path		99919	1					
ANR	100035	UnaryOperationExpression	! IS_SLASH_P ( end )		99919	1					
ANR	100036	UnaryOperator	!		99919	0					
ANR	100037	CallExpression	IS_SLASH_P ( end )		99919	1					
ANR	100038	Callee	IS_SLASH_P		99919	0					
ANR	100039	Identifier	IS_SLASH_P		99919	0					
ANR	100040	ArgumentList	end		99919	1					
ANR	100041	Argument	end		99919	0					
ANR	100042	Identifier	end		99919	0					
ANR	100043	CompoundStatement		56:41:1441:1441	99919	1					
ANR	100044	ExpressionStatement	end --	1773:2:52325:52330	99919	0	True				
ANR	100045	PostIncDecOperationExpression	end --		99919	0					
ANR	100046	Identifier	end		99919	0					
ANR	100047	IncDec	--		99919	1					
ANR	100048	IfStatement	if ( end < path )		99919	8					
ANR	100049	Condition	end < path	1775:5:52340:52349	99919	0	True				
ANR	100050	RelationalExpression	end < path		99919	0		<			
ANR	100051	Identifier	end		99919	0					
ANR	100052	Identifier	path		99919	1					
ANR	100053	CompoundStatement		59:17:1472:1472	99919	1					
ANR	100054	IfStatement	if ( len_adjust == 0 )		99919	0					
ANR	100055	Condition	len_adjust == 0	1778:6:52420:52434	99919	0	True				
ANR	100056	EqualityExpression	len_adjust == 0		99919	0		==			
ANR	100057	Identifier	len_adjust		99919	0					
ANR	100058	PrimaryExpression	0		99919	1					
ANR	100059	CompoundStatement		62:23:1557:1557	99919	1					
ANR	100060	ExpressionStatement	path [ 0 ] = '.'	1779:3:52442:52455	99919	0	True				
ANR	100061	AssignmentExpression	path [ 0 ] = '.'		99919	0		=			
ANR	100062	ArrayIndexing	path [ 0 ]		99919	0					
ANR	100063	Identifier	path		99919	0					
ANR	100064	PrimaryExpression	0		99919	1					
ANR	100065	PrimaryExpression	'.'		99919	1					
ANR	100066	ExpressionStatement	path [ 1 ] = '\\0'	1780:3:52460:52474	99919	1	True				
ANR	100067	AssignmentExpression	path [ 1 ] = '\\0'		99919	0		=			
ANR	100068	ArrayIndexing	path [ 1 ]		99919	0					
ANR	100069	Identifier	path		99919	0					
ANR	100070	PrimaryExpression	1		99919	1					
ANR	100071	PrimaryExpression	'\\0'		99919	1					
ANR	100072	ReturnStatement	return 1 ;	1781:3:52479:52487	99919	2	True				
ANR	100073	PrimaryExpression	1		99919	0					
ANR	100074	ElseStatement	else		99919	0					
ANR	100075	CompoundStatement		66:9:1643:1643	99919	0					
ANR	100076	ExpressionStatement	path [ 0 ] = '\\0'	1783:3:52528:52542	99919	0	True				
ANR	100077	AssignmentExpression	path [ 0 ] = '\\0'		99919	0		=			
ANR	100078	ArrayIndexing	path [ 0 ]		99919	0					
ANR	100079	Identifier	path		99919	0					
ANR	100080	PrimaryExpression	0		99919	1					
ANR	100081	PrimaryExpression	'\\0'		99919	1					
ANR	100082	ReturnStatement	return len_adjust ;	1784:3:52547:52564	99919	1	True				
ANR	100083	Identifier	len_adjust		99919	0					
ANR	100084	WhileStatement	while ( end >= path && IS_SLASH_P ( end ) )		99919	9					
ANR	100085	Condition	end >= path && IS_SLASH_P ( end )	1794:8:52708:52737	99919	0	True				
ANR	100086	AndExpression	end >= path && IS_SLASH_P ( end )		99919	0		&&			
ANR	100087	RelationalExpression	end >= path		99919	0		>=			
ANR	100088	Identifier	end		99919	0					
ANR	100089	Identifier	path		99919	1					
ANR	100090	CallExpression	IS_SLASH_P ( end )		99919	1					
ANR	100091	Callee	IS_SLASH_P		99919	0					
ANR	100092	Identifier	IS_SLASH_P		99919	0					
ANR	100093	ArgumentList	end		99919	1					
ANR	100094	Argument	end		99919	0					
ANR	100095	Identifier	end		99919	0					
ANR	100096	CompoundStatement		78:40:1860:1860	99919	1					
ANR	100097	ExpressionStatement	end --	1795:2:52744:52749	99919	0	True				
ANR	100098	PostIncDecOperationExpression	end --		99919	0					
ANR	100099	Identifier	end		99919	0					
ANR	100100	IncDec	--		99919	1					
ANR	100101	IfStatement	if ( end < path )		99919	10					
ANR	100102	Condition	end < path	1797:5:52759:52768	99919	0	True				
ANR	100103	RelationalExpression	end < path		99919	0		<			
ANR	100104	Identifier	end		99919	0					
ANR	100105	Identifier	path		99919	1					
ANR	100106	CompoundStatement		81:17:1891:1891	99919	1					
ANR	100107	ExpressionStatement	path [ 0 ] = DEFAULT_SLASH	1798:2:52775:52798	99919	0	True				
ANR	100108	AssignmentExpression	path [ 0 ] = DEFAULT_SLASH		99919	0		=			
ANR	100109	ArrayIndexing	path [ 0 ]		99919	0					
ANR	100110	Identifier	path		99919	0					
ANR	100111	PrimaryExpression	0		99919	1					
ANR	100112	Identifier	DEFAULT_SLASH		99919	1					
ANR	100113	ExpressionStatement	path [ 1 ] = '\\0'	1799:2:52802:52816	99919	1	True				
ANR	100114	AssignmentExpression	path [ 1 ] = '\\0'		99919	0		=			
ANR	100115	ArrayIndexing	path [ 1 ]		99919	0					
ANR	100116	Identifier	path		99919	0					
ANR	100117	PrimaryExpression	1		99919	1					
ANR	100118	PrimaryExpression	'\\0'		99919	1					
ANR	100119	ReturnStatement	return 1 + len_adjust ;	1800:2:52820:52841	99919	2	True				
ANR	100120	AdditiveExpression	1 + len_adjust		99919	0		+			
ANR	100121	PrimaryExpression	1		99919	0					
ANR	100122	Identifier	len_adjust		99919	1					
ANR	100123	ExpressionStatement	* ( end + 1 ) = '\\0'	1802:1:52847:52862	99919	11	True				
ANR	100124	AssignmentExpression	* ( end + 1 ) = '\\0'		99919	0		=			
ANR	100125	UnaryOperationExpression	* ( end + 1 )		99919	0					
ANR	100126	UnaryOperator	*		99919	0					
ANR	100127	AdditiveExpression	end + 1		99919	1		+			
ANR	100128	Identifier	end		99919	0					
ANR	100129	PrimaryExpression	1		99919	1					
ANR	100130	PrimaryExpression	'\\0'		99919	1					
ANR	100131	ReturnStatement	return ( size_t ) ( end + 1 - path ) + len_adjust ;	1804:1:52866:52910	99919	12	True				
ANR	100132	AdditiveExpression	( size_t ) ( end + 1 - path ) + len_adjust		99919	0		+			
ANR	100133	CastExpression	( size_t ) ( end + 1 - path )		99919	0					
ANR	100134	CastTarget	size_t		99919	0					
ANR	100135	AdditiveExpression	end + 1 - path		99919	1		+			
ANR	100136	Identifier	end		99919	0					
ANR	100137	AdditiveExpression	1 - path		99919	1		-			
ANR	100138	PrimaryExpression	1		99919	0					
ANR	100139	Identifier	path		99919	1					
ANR	100140	Identifier	len_adjust		99919	1					
ANR	100141	ReturnType	ZEND_API size_t		99919	1					
ANR	100142	Identifier	zend_dirname		99919	2					
ANR	100143	ParameterList	"char * path , size_t len"		99919	3					
ANR	100144	Parameter	char * path	1716:29:50855:50864	99919	0	True				
ANR	100145	ParameterType	char *		99919	0					
ANR	100146	Identifier	path		99919	1					
ANR	100147	Parameter	size_t len	1716:41:50867:50876	99919	1	True				
ANR	100148	ParameterType	size_t		99919	0					
ANR	100149	Identifier	len		99919	1					
ANR	100150	CFGEntryNode	ENTRY		99919		True				
ANR	100151	CFGExitNode	EXIT		99919		True				
ANR	100152	Symbol	path		99919						
ANR	100153	Symbol	isalpha		99919						
ANR	100154	Symbol	DEFAULT_SLASH		99919						
ANR	100155	Symbol	len		99919						
ANR	100156	Symbol	* ( end + 1 )		99919						
ANR	100157	Symbol	IS_SLASH_P		99919						
ANR	100158	Symbol	* path		99919						
ANR	100159	Symbol	end		99919						
ANR	100160	Symbol	* end		99919						
ANR	100161	Symbol	len_adjust		99919						
ANR	100162	Function	zend_adjust_for_fetch_type	1808:0:52925:53445							
ANR	100163	FunctionDef	"zend_adjust_for_fetch_type (zend_op * opline , uint32_t type)"		100162	0					
ANR	100164	CompoundStatement		1809:0:53006:53445	100162	0					
ANR	100165	SwitchStatement	switch ( type & BP_VAR_MASK )		100162	0					
ANR	100166	Condition	type & BP_VAR_MASK	1810:9:53017:53034	100162	0	True				
ANR	100167	BitAndExpression	type & BP_VAR_MASK		100162	0		&			
ANR	100168	Identifier	type		100162	0					
ANR	100169	Identifier	BP_VAR_MASK		100162	1					
ANR	100170	CompoundStatement		2:29:30:30	100162	1					
ANR	100171	Label	case BP_VAR_R :	1811:2:53041:53054	100162	0	True				
ANR	100172	Identifier	BP_VAR_R		100162	0					
ANR	100173	ReturnStatement	return ;	1812:3:53059:53065	100162	1	True				
ANR	100174	Label	case BP_VAR_W :	1813:2:53069:53082	100162	2	True				
ANR	100175	Identifier	BP_VAR_W		100162	0					
ANR	100176	Label	case BP_VAR_REF :	1814:2:53086:53101	100162	3	True				
ANR	100177	Identifier	BP_VAR_REF		100162	0					
ANR	100178	ExpressionStatement	opline -> opcode += 3	1815:3:53106:53125	100162	4	True				
ANR	100179	AssignmentExpression	opline -> opcode += 3		100162	0		+=			
ANR	100180	PtrMemberAccess	opline -> opcode		100162	0					
ANR	100181	Identifier	opline		100162	0					
ANR	100182	Identifier	opcode		100162	1					
ANR	100183	PrimaryExpression	3		100162	1					
ANR	100184	ReturnStatement	return ;	1816:3:53130:53136	100162	5	True				
ANR	100185	Label	case BP_VAR_RW :	1817:2:53140:53154	100162	6	True				
ANR	100186	Identifier	BP_VAR_RW		100162	0					
ANR	100187	ExpressionStatement	opline -> opcode += 6	1818:3:53159:53178	100162	7	True				
ANR	100188	AssignmentExpression	opline -> opcode += 6		100162	0		+=			
ANR	100189	PtrMemberAccess	opline -> opcode		100162	0					
ANR	100190	Identifier	opline		100162	0					
ANR	100191	Identifier	opcode		100162	1					
ANR	100192	PrimaryExpression	6		100162	1					
ANR	100193	ReturnStatement	return ;	1819:3:53183:53189	100162	8	True				
ANR	100194	Label	case BP_VAR_IS :	1820:2:53193:53207	100162	9	True				
ANR	100195	Identifier	BP_VAR_IS		100162	0					
ANR	100196	ExpressionStatement	opline -> opcode += 9	1821:3:53212:53231	100162	10	True				
ANR	100197	AssignmentExpression	opline -> opcode += 9		100162	0		+=			
ANR	100198	PtrMemberAccess	opline -> opcode		100162	0					
ANR	100199	Identifier	opline		100162	0					
ANR	100200	Identifier	opcode		100162	1					
ANR	100201	PrimaryExpression	9		100162	1					
ANR	100202	ReturnStatement	return ;	1822:3:53236:53242	100162	11	True				
ANR	100203	Label	case BP_VAR_FUNC_ARG :	1823:2:53246:53266	100162	12	True				
ANR	100204	Identifier	BP_VAR_FUNC_ARG		100162	0					
ANR	100205	ExpressionStatement	opline -> opcode += 12	1824:3:53271:53291	100162	13	True				
ANR	100206	AssignmentExpression	opline -> opcode += 12		100162	0		+=			
ANR	100207	PtrMemberAccess	opline -> opcode		100162	0					
ANR	100208	Identifier	opline		100162	0					
ANR	100209	Identifier	opcode		100162	1					
ANR	100210	PrimaryExpression	12		100162	1					
ANR	100211	ExpressionStatement	opline -> extended_value |= type >> BP_VAR_SHIFT	1825:3:53296:53342	100162	14	True				
ANR	100212	AssignmentExpression	opline -> extended_value |= type >> BP_VAR_SHIFT		100162	0		|=			
ANR	100213	PtrMemberAccess	opline -> extended_value		100162	0					
ANR	100214	Identifier	opline		100162	0					
ANR	100215	Identifier	extended_value		100162	1					
ANR	100216	ShiftExpression	type >> BP_VAR_SHIFT		100162	1		>>			
ANR	100217	Identifier	type		100162	0					
ANR	100218	Identifier	BP_VAR_SHIFT		100162	1					
ANR	100219	ReturnStatement	return ;	1826:3:53347:53353	100162	15	True				
ANR	100220	Label	case BP_VAR_UNSET :	1827:2:53357:53374	100162	16	True				
ANR	100221	Identifier	BP_VAR_UNSET		100162	0					
ANR	100222	ExpressionStatement	opline -> opcode += 15	1828:3:53379:53399	100162	17	True				
ANR	100223	AssignmentExpression	opline -> opcode += 15		100162	0		+=			
ANR	100224	PtrMemberAccess	opline -> opcode		100162	0					
ANR	100225	Identifier	opline		100162	0					
ANR	100226	Identifier	opcode		100162	1					
ANR	100227	PrimaryExpression	15		100162	1					
ANR	100228	ReturnStatement	return ;	1829:3:53404:53410	100162	18	True				
ANR	100229	Statement	EMPTY_SWITCH_DEFAULT_CASE	1830:2:53414:53438	100162	19	True				
ANR	100230	Statement	(	1830:27:53439:53439	100162	20	True				
ANR	100231	Statement	)	1830:28:53440:53440	100162	21	True				
ANR	100232	ReturnType	static void		100162	1					
ANR	100233	Identifier	zend_adjust_for_fetch_type		100162	2					
ANR	100234	ParameterList	"zend_op * opline , uint32_t type"		100162	3					
ANR	100235	Parameter	zend_op * opline	1808:39:52964:52978	100162	0	True				
ANR	100236	ParameterType	zend_op *		100162	0					
ANR	100237	Identifier	opline		100162	1					
ANR	100238	Parameter	uint32_t type	1808:56:52981:52993	100162	1	True				
ANR	100239	ParameterType	uint32_t		100162	0					
ANR	100240	Identifier	type		100162	1					
ANR	100241	CFGEntryNode	ENTRY		100162		True				
ANR	100242	CFGExitNode	EXIT		100162		True				
ANR	100243	Symbol	BP_VAR_MASK		100162						
ANR	100244	Symbol	opline		100162						
ANR	100245	Symbol	* opline		100162						
ANR	100246	Symbol	BP_VAR_SHIFT		100162						
ANR	100247	Symbol	opline -> opcode		100162						
ANR	100248	Symbol	type		100162						
ANR	100249	Symbol	opline -> extended_value		100162						
ANR	100250	Function	zend_make_var_result	1835:0:53458:53675							
ANR	100251	FunctionDef	"zend_make_var_result (znode * result , zend_op * opline)"		100250	0					
ANR	100252	CompoundStatement		1836:0:53540:53675	100250	0					
ANR	100253	ExpressionStatement	opline -> result_type = IS_VAR	1837:1:53543:53571	100250	0	True				
ANR	100254	AssignmentExpression	opline -> result_type = IS_VAR		100250	0		=			
ANR	100255	PtrMemberAccess	opline -> result_type		100250	0					
ANR	100256	Identifier	opline		100250	0					
ANR	100257	Identifier	result_type		100250	1					
ANR	100258	Identifier	IS_VAR		100250	1					
ANR	100259	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	1838:1:53574:53638	100250	1	True				
ANR	100260	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		100250	0		=			
ANR	100261	MemberAccess	opline -> result . var		100250	0					
ANR	100262	PtrMemberAccess	opline -> result		100250	0					
ANR	100263	Identifier	opline		100250	0					
ANR	100264	Identifier	result		100250	1					
ANR	100265	Identifier	var		100250	1					
ANR	100266	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		100250	1					
ANR	100267	Callee	get_temporary_variable		100250	0					
ANR	100268	Identifier	get_temporary_variable		100250	0					
ANR	100269	ArgumentList	CG ( active_op_array )		100250	1					
ANR	100270	Argument	CG ( active_op_array )		100250	0					
ANR	100271	CallExpression	CG ( active_op_array )		100250	0					
ANR	100272	Callee	CG		100250	0					
ANR	100273	Identifier	CG		100250	0					
ANR	100274	ArgumentList	active_op_array		100250	1					
ANR	100275	Argument	active_op_array		100250	0					
ANR	100276	Identifier	active_op_array		100250	0					
ANR	100277	ExpressionStatement	"GET_NODE ( result , opline -> result )"	1839:1:53641:53673	100250	2	True				
ANR	100278	CallExpression	"GET_NODE ( result , opline -> result )"		100250	0					
ANR	100279	Callee	GET_NODE		100250	0					
ANR	100280	Identifier	GET_NODE		100250	0					
ANR	100281	ArgumentList	result		100250	1					
ANR	100282	Argument	result		100250	0					
ANR	100283	Identifier	result		100250	0					
ANR	100284	Argument	opline -> result		100250	1					
ANR	100285	PtrMemberAccess	opline -> result		100250	0					
ANR	100286	Identifier	opline		100250	0					
ANR	100287	Identifier	result		100250	1					
ANR	100288	ReturnType	static inline void		100250	1					
ANR	100289	Identifier	zend_make_var_result		100250	2					
ANR	100290	ParameterList	"znode * result , zend_op * opline"		100250	3					
ANR	100291	Parameter	znode * result	1835:40:53498:53510	100250	0	True				
ANR	100292	ParameterType	znode *		100250	0					
ANR	100293	Identifier	result		100250	1					
ANR	100294	Parameter	zend_op * opline	1835:55:53513:53527	100250	1	True				
ANR	100295	ParameterType	zend_op *		100250	0					
ANR	100296	Identifier	opline		100250	1					
ANR	100297	CFGEntryNode	ENTRY		100250		True				
ANR	100298	CFGExitNode	EXIT		100250		True				
ANR	100299	Symbol	result		100250						
ANR	100300	Symbol	opline -> result_type		100250						
ANR	100301	Symbol	opline		100250						
ANR	100302	Symbol	* opline		100250						
ANR	100303	Symbol	CG		100250						
ANR	100304	Symbol	active_op_array		100250						
ANR	100305	Symbol	get_temporary_variable		100250						
ANR	100306	Symbol	IS_VAR		100250						
ANR	100307	Symbol	opline -> result		100250						
ANR	100308	Symbol	opline -> result . var		100250						
ANR	100309	Function	zend_make_tmp_result	1843:0:53688:53909							
ANR	100310	FunctionDef	"zend_make_tmp_result (znode * result , zend_op * opline)"		100309	0					
ANR	100311	CompoundStatement		1844:0:53770:53909	100309	0					
ANR	100312	ExpressionStatement	opline -> result_type = IS_TMP_VAR	1845:1:53773:53805	100309	0	True				
ANR	100313	AssignmentExpression	opline -> result_type = IS_TMP_VAR		100309	0		=			
ANR	100314	PtrMemberAccess	opline -> result_type		100309	0					
ANR	100315	Identifier	opline		100309	0					
ANR	100316	Identifier	result_type		100309	1					
ANR	100317	Identifier	IS_TMP_VAR		100309	1					
ANR	100318	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	1846:1:53808:53872	100309	1	True				
ANR	100319	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		100309	0		=			
ANR	100320	MemberAccess	opline -> result . var		100309	0					
ANR	100321	PtrMemberAccess	opline -> result		100309	0					
ANR	100322	Identifier	opline		100309	0					
ANR	100323	Identifier	result		100309	1					
ANR	100324	Identifier	var		100309	1					
ANR	100325	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		100309	1					
ANR	100326	Callee	get_temporary_variable		100309	0					
ANR	100327	Identifier	get_temporary_variable		100309	0					
ANR	100328	ArgumentList	CG ( active_op_array )		100309	1					
ANR	100329	Argument	CG ( active_op_array )		100309	0					
ANR	100330	CallExpression	CG ( active_op_array )		100309	0					
ANR	100331	Callee	CG		100309	0					
ANR	100332	Identifier	CG		100309	0					
ANR	100333	ArgumentList	active_op_array		100309	1					
ANR	100334	Argument	active_op_array		100309	0					
ANR	100335	Identifier	active_op_array		100309	0					
ANR	100336	ExpressionStatement	"GET_NODE ( result , opline -> result )"	1847:1:53875:53907	100309	2	True				
ANR	100337	CallExpression	"GET_NODE ( result , opline -> result )"		100309	0					
ANR	100338	Callee	GET_NODE		100309	0					
ANR	100339	Identifier	GET_NODE		100309	0					
ANR	100340	ArgumentList	result		100309	1					
ANR	100341	Argument	result		100309	0					
ANR	100342	Identifier	result		100309	0					
ANR	100343	Argument	opline -> result		100309	1					
ANR	100344	PtrMemberAccess	opline -> result		100309	0					
ANR	100345	Identifier	opline		100309	0					
ANR	100346	Identifier	result		100309	1					
ANR	100347	ReturnType	static inline void		100309	1					
ANR	100348	Identifier	zend_make_tmp_result		100309	2					
ANR	100349	ParameterList	"znode * result , zend_op * opline"		100309	3					
ANR	100350	Parameter	znode * result	1843:40:53728:53740	100309	0	True				
ANR	100351	ParameterType	znode *		100309	0					
ANR	100352	Identifier	result		100309	1					
ANR	100353	Parameter	zend_op * opline	1843:55:53743:53757	100309	1	True				
ANR	100354	ParameterType	zend_op *		100309	0					
ANR	100355	Identifier	opline		100309	1					
ANR	100356	CFGEntryNode	ENTRY		100309		True				
ANR	100357	CFGExitNode	EXIT		100309		True				
ANR	100358	Symbol	result		100309						
ANR	100359	Symbol	opline -> result_type		100309						
ANR	100360	Symbol	opline		100309						
ANR	100361	Symbol	* opline		100309						
ANR	100362	Symbol	CG		100309						
ANR	100363	Symbol	active_op_array		100309						
ANR	100364	Symbol	get_temporary_variable		100309						
ANR	100365	Symbol	opline -> result		100309						
ANR	100366	Symbol	opline -> result . var		100309						
ANR	100367	Symbol	IS_TMP_VAR		100309						
ANR	100368	Function	zend_emit_op	1851:0:53922:54357							
ANR	100369	FunctionDef	"zend_emit_op (znode * result , zend_uchar opcode , znode * op1 , znode * op2)"		100368	0					
ANR	100370	CompoundStatement		1852:0:54019:54357	100368	0					
ANR	100371	IdentifierDeclStatement	zend_op * opline = get_next_op ( CG ( active_op_array ) ) ;	1853:1:54022:54072	100368	0	True				
ANR	100372	IdentifierDecl	* opline = get_next_op ( CG ( active_op_array ) )		100368	0					
ANR	100373	IdentifierDeclType	zend_op *		100368	0					
ANR	100374	Identifier	opline		100368	1					
ANR	100375	AssignmentExpression	* opline = get_next_op ( CG ( active_op_array ) )		100368	2		=			
ANR	100376	Identifier	opline		100368	0					
ANR	100377	CallExpression	get_next_op ( CG ( active_op_array ) )		100368	1					
ANR	100378	Callee	get_next_op		100368	0					
ANR	100379	Identifier	get_next_op		100368	0					
ANR	100380	ArgumentList	CG ( active_op_array )		100368	1					
ANR	100381	Argument	CG ( active_op_array )		100368	0					
ANR	100382	CallExpression	CG ( active_op_array )		100368	0					
ANR	100383	Callee	CG		100368	0					
ANR	100384	Identifier	CG		100368	0					
ANR	100385	ArgumentList	active_op_array		100368	1					
ANR	100386	Argument	active_op_array		100368	0					
ANR	100387	Identifier	active_op_array		100368	0					
ANR	100388	ExpressionStatement	opline -> opcode = opcode	1854:1:54075:54098	100368	1	True				
ANR	100389	AssignmentExpression	opline -> opcode = opcode		100368	0		=			
ANR	100390	PtrMemberAccess	opline -> opcode		100368	0					
ANR	100391	Identifier	opline		100368	0					
ANR	100392	Identifier	opcode		100368	1					
ANR	100393	Identifier	opcode		100368	1					
ANR	100394	IfStatement	if ( op1 == NULL )		100368	2					
ANR	100395	Condition	op1 == NULL	1856:5:54106:54116	100368	0	True				
ANR	100396	EqualityExpression	op1 == NULL		100368	0		==			
ANR	100397	Identifier	op1		100368	0					
ANR	100398	Identifier	NULL		100368	1					
ANR	100399	CompoundStatement		5:18:99:99	100368	1					
ANR	100400	ExpressionStatement	SET_UNUSED ( opline -> op1 )	1857:2:54123:54146	100368	0	True				
ANR	100401	CallExpression	SET_UNUSED ( opline -> op1 )		100368	0					
ANR	100402	Callee	SET_UNUSED		100368	0					
ANR	100403	Identifier	SET_UNUSED		100368	0					
ANR	100404	ArgumentList	opline -> op1		100368	1					
ANR	100405	Argument	opline -> op1		100368	0					
ANR	100406	PtrMemberAccess	opline -> op1		100368	0					
ANR	100407	Identifier	opline		100368	0					
ANR	100408	Identifier	op1		100368	1					
ANR	100409	ElseStatement	else		100368	0					
ANR	100410	CompoundStatement		7:8:136:136	100368	0					
ANR	100411	ExpressionStatement	"SET_NODE ( opline -> op1 , op1 )"	1859:2:54160:54186	100368	0	True				
ANR	100412	CallExpression	"SET_NODE ( opline -> op1 , op1 )"		100368	0					
ANR	100413	Callee	SET_NODE		100368	0					
ANR	100414	Identifier	SET_NODE		100368	0					
ANR	100415	ArgumentList	opline -> op1		100368	1					
ANR	100416	Argument	opline -> op1		100368	0					
ANR	100417	PtrMemberAccess	opline -> op1		100368	0					
ANR	100418	Identifier	opline		100368	0					
ANR	100419	Identifier	op1		100368	1					
ANR	100420	Argument	op1		100368	1					
ANR	100421	Identifier	op1		100368	0					
ANR	100422	IfStatement	if ( op2 == NULL )		100368	3					
ANR	100423	Condition	op2 == NULL	1862:5:54197:54207	100368	0	True				
ANR	100424	EqualityExpression	op2 == NULL		100368	0		==			
ANR	100425	Identifier	op2		100368	0					
ANR	100426	Identifier	NULL		100368	1					
ANR	100427	CompoundStatement		11:18:190:190	100368	1					
ANR	100428	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1863:2:54214:54237	100368	0	True				
ANR	100429	CallExpression	SET_UNUSED ( opline -> op2 )		100368	0					
ANR	100430	Callee	SET_UNUSED		100368	0					
ANR	100431	Identifier	SET_UNUSED		100368	0					
ANR	100432	ArgumentList	opline -> op2		100368	1					
ANR	100433	Argument	opline -> op2		100368	0					
ANR	100434	PtrMemberAccess	opline -> op2		100368	0					
ANR	100435	Identifier	opline		100368	0					
ANR	100436	Identifier	op2		100368	1					
ANR	100437	ElseStatement	else		100368	0					
ANR	100438	CompoundStatement		13:8:227:227	100368	0					
ANR	100439	ExpressionStatement	"SET_NODE ( opline -> op2 , op2 )"	1865:2:54251:54277	100368	0	True				
ANR	100440	CallExpression	"SET_NODE ( opline -> op2 , op2 )"		100368	0					
ANR	100441	Callee	SET_NODE		100368	0					
ANR	100442	Identifier	SET_NODE		100368	0					
ANR	100443	ArgumentList	opline -> op2		100368	1					
ANR	100444	Argument	opline -> op2		100368	0					
ANR	100445	PtrMemberAccess	opline -> op2		100368	0					
ANR	100446	Identifier	opline		100368	0					
ANR	100447	Identifier	op2		100368	1					
ANR	100448	Argument	op2		100368	1					
ANR	100449	Identifier	op2		100368	0					
ANR	100450	IfStatement	if ( result )		100368	4					
ANR	100451	Condition	result	1868:5:54288:54293	100368	0	True				
ANR	100452	Identifier	result		100368	0					
ANR	100453	CompoundStatement		17:13:276:276	100368	1					
ANR	100454	ExpressionStatement	"zend_make_var_result ( result , opline )"	1869:2:54300:54336	100368	0	True				
ANR	100455	CallExpression	"zend_make_var_result ( result , opline )"		100368	0					
ANR	100456	Callee	zend_make_var_result		100368	0					
ANR	100457	Identifier	zend_make_var_result		100368	0					
ANR	100458	ArgumentList	result		100368	1					
ANR	100459	Argument	result		100368	0					
ANR	100460	Identifier	result		100368	0					
ANR	100461	Argument	opline		100368	1					
ANR	100462	Identifier	opline		100368	0					
ANR	100463	ReturnStatement	return opline ;	1871:1:54342:54355	100368	5	True				
ANR	100464	Identifier	opline		100368	0					
ANR	100465	ReturnType	static zend_op *		100368	1					
ANR	100466	Identifier	zend_emit_op		100368	2					
ANR	100467	ParameterList	"znode * result , zend_uchar opcode , znode * op1 , znode * op2"		100368	3					
ANR	100468	Parameter	znode * result	1851:29:53951:53963	100368	0	True				
ANR	100469	ParameterType	znode *		100368	0					
ANR	100470	Identifier	result		100368	1					
ANR	100471	Parameter	zend_uchar opcode	1851:44:53966:53982	100368	1	True				
ANR	100472	ParameterType	zend_uchar		100368	0					
ANR	100473	Identifier	opcode		100368	1					
ANR	100474	Parameter	znode * op1	1851:63:53985:53994	100368	2	True				
ANR	100475	ParameterType	znode *		100368	0					
ANR	100476	Identifier	op1		100368	1					
ANR	100477	Parameter	znode * op2	1851:75:53997:54006	100368	3	True				
ANR	100478	ParameterType	znode *		100368	0					
ANR	100479	Identifier	op2		100368	1					
ANR	100480	CFGEntryNode	ENTRY		100368		True				
ANR	100481	CFGExitNode	EXIT		100368		True				
ANR	100482	Symbol	opline -> op1		100368						
ANR	100483	Symbol	opline -> op2		100368						
ANR	100484	Symbol	get_next_op		100368						
ANR	100485	Symbol	NULL		100368						
ANR	100486	Symbol	CG		100368						
ANR	100487	Symbol	active_op_array		100368						
ANR	100488	Symbol	opcode		100368						
ANR	100489	Symbol	result		100368						
ANR	100490	Symbol	op2		100368						
ANR	100491	Symbol	op1		100368						
ANR	100492	Symbol	opline		100368						
ANR	100493	Symbol	* opline		100368						
ANR	100494	Symbol	opline -> opcode		100368						
ANR	100495	Function	zend_emit_op_tmp	1875:0:54370:54810							
ANR	100496	FunctionDef	"zend_emit_op_tmp (znode * result , zend_uchar opcode , znode * op1 , znode * op2)"		100495	0					
ANR	100497	CompoundStatement		1876:0:54471:54810	100495	0					
ANR	100498	IdentifierDeclStatement	zend_op * opline = get_next_op ( CG ( active_op_array ) ) ;	1877:1:54474:54524	100495	0	True				
ANR	100499	IdentifierDecl	* opline = get_next_op ( CG ( active_op_array ) )		100495	0					
ANR	100500	IdentifierDeclType	zend_op *		100495	0					
ANR	100501	Identifier	opline		100495	1					
ANR	100502	AssignmentExpression	* opline = get_next_op ( CG ( active_op_array ) )		100495	2		=			
ANR	100503	Identifier	opline		100495	0					
ANR	100504	CallExpression	get_next_op ( CG ( active_op_array ) )		100495	1					
ANR	100505	Callee	get_next_op		100495	0					
ANR	100506	Identifier	get_next_op		100495	0					
ANR	100507	ArgumentList	CG ( active_op_array )		100495	1					
ANR	100508	Argument	CG ( active_op_array )		100495	0					
ANR	100509	CallExpression	CG ( active_op_array )		100495	0					
ANR	100510	Callee	CG		100495	0					
ANR	100511	Identifier	CG		100495	0					
ANR	100512	ArgumentList	active_op_array		100495	1					
ANR	100513	Argument	active_op_array		100495	0					
ANR	100514	Identifier	active_op_array		100495	0					
ANR	100515	ExpressionStatement	opline -> opcode = opcode	1878:1:54527:54550	100495	1	True				
ANR	100516	AssignmentExpression	opline -> opcode = opcode		100495	0		=			
ANR	100517	PtrMemberAccess	opline -> opcode		100495	0					
ANR	100518	Identifier	opline		100495	0					
ANR	100519	Identifier	opcode		100495	1					
ANR	100520	Identifier	opcode		100495	1					
ANR	100521	IfStatement	if ( op1 == NULL )		100495	2					
ANR	100522	Condition	op1 == NULL	1880:5:54558:54568	100495	0	True				
ANR	100523	EqualityExpression	op1 == NULL		100495	0		==			
ANR	100524	Identifier	op1		100495	0					
ANR	100525	Identifier	NULL		100495	1					
ANR	100526	CompoundStatement		5:18:99:99	100495	1					
ANR	100527	ExpressionStatement	SET_UNUSED ( opline -> op1 )	1881:2:54575:54598	100495	0	True				
ANR	100528	CallExpression	SET_UNUSED ( opline -> op1 )		100495	0					
ANR	100529	Callee	SET_UNUSED		100495	0					
ANR	100530	Identifier	SET_UNUSED		100495	0					
ANR	100531	ArgumentList	opline -> op1		100495	1					
ANR	100532	Argument	opline -> op1		100495	0					
ANR	100533	PtrMemberAccess	opline -> op1		100495	0					
ANR	100534	Identifier	opline		100495	0					
ANR	100535	Identifier	op1		100495	1					
ANR	100536	ElseStatement	else		100495	0					
ANR	100537	CompoundStatement		7:8:136:136	100495	0					
ANR	100538	ExpressionStatement	"SET_NODE ( opline -> op1 , op1 )"	1883:2:54612:54638	100495	0	True				
ANR	100539	CallExpression	"SET_NODE ( opline -> op1 , op1 )"		100495	0					
ANR	100540	Callee	SET_NODE		100495	0					
ANR	100541	Identifier	SET_NODE		100495	0					
ANR	100542	ArgumentList	opline -> op1		100495	1					
ANR	100543	Argument	opline -> op1		100495	0					
ANR	100544	PtrMemberAccess	opline -> op1		100495	0					
ANR	100545	Identifier	opline		100495	0					
ANR	100546	Identifier	op1		100495	1					
ANR	100547	Argument	op1		100495	1					
ANR	100548	Identifier	op1		100495	0					
ANR	100549	IfStatement	if ( op2 == NULL )		100495	3					
ANR	100550	Condition	op2 == NULL	1886:5:54649:54659	100495	0	True				
ANR	100551	EqualityExpression	op2 == NULL		100495	0		==			
ANR	100552	Identifier	op2		100495	0					
ANR	100553	Identifier	NULL		100495	1					
ANR	100554	CompoundStatement		11:18:190:190	100495	1					
ANR	100555	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1887:2:54666:54689	100495	0	True				
ANR	100556	CallExpression	SET_UNUSED ( opline -> op2 )		100495	0					
ANR	100557	Callee	SET_UNUSED		100495	0					
ANR	100558	Identifier	SET_UNUSED		100495	0					
ANR	100559	ArgumentList	opline -> op2		100495	1					
ANR	100560	Argument	opline -> op2		100495	0					
ANR	100561	PtrMemberAccess	opline -> op2		100495	0					
ANR	100562	Identifier	opline		100495	0					
ANR	100563	Identifier	op2		100495	1					
ANR	100564	ElseStatement	else		100495	0					
ANR	100565	CompoundStatement		13:8:227:227	100495	0					
ANR	100566	ExpressionStatement	"SET_NODE ( opline -> op2 , op2 )"	1889:2:54703:54729	100495	0	True				
ANR	100567	CallExpression	"SET_NODE ( opline -> op2 , op2 )"		100495	0					
ANR	100568	Callee	SET_NODE		100495	0					
ANR	100569	Identifier	SET_NODE		100495	0					
ANR	100570	ArgumentList	opline -> op2		100495	1					
ANR	100571	Argument	opline -> op2		100495	0					
ANR	100572	PtrMemberAccess	opline -> op2		100495	0					
ANR	100573	Identifier	opline		100495	0					
ANR	100574	Identifier	op2		100495	1					
ANR	100575	Argument	op2		100495	1					
ANR	100576	Identifier	op2		100495	0					
ANR	100577	IfStatement	if ( result )		100495	4					
ANR	100578	Condition	result	1892:5:54740:54745	100495	0	True				
ANR	100579	Identifier	result		100495	0					
ANR	100580	CompoundStatement		17:13:276:276	100495	1					
ANR	100581	ExpressionStatement	"zend_make_tmp_result ( result , opline )"	1893:2:54752:54788	100495	0	True				
ANR	100582	CallExpression	"zend_make_tmp_result ( result , opline )"		100495	0					
ANR	100583	Callee	zend_make_tmp_result		100495	0					
ANR	100584	Identifier	zend_make_tmp_result		100495	0					
ANR	100585	ArgumentList	result		100495	1					
ANR	100586	Argument	result		100495	0					
ANR	100587	Identifier	result		100495	0					
ANR	100588	Argument	opline		100495	1					
ANR	100589	Identifier	opline		100495	0					
ANR	100590	ReturnStatement	return opline ;	1896:1:54795:54808	100495	5	True				
ANR	100591	Identifier	opline		100495	0					
ANR	100592	ReturnType	static zend_op *		100495	1					
ANR	100593	Identifier	zend_emit_op_tmp		100495	2					
ANR	100594	ParameterList	"znode * result , zend_uchar opcode , znode * op1 , znode * op2"		100495	3					
ANR	100595	Parameter	znode * result	1875:33:54403:54415	100495	0	True				
ANR	100596	ParameterType	znode *		100495	0					
ANR	100597	Identifier	result		100495	1					
ANR	100598	Parameter	zend_uchar opcode	1875:48:54418:54434	100495	1	True				
ANR	100599	ParameterType	zend_uchar		100495	0					
ANR	100600	Identifier	opcode		100495	1					
ANR	100601	Parameter	znode * op1	1875:67:54437:54446	100495	2	True				
ANR	100602	ParameterType	znode *		100495	0					
ANR	100603	Identifier	op1		100495	1					
ANR	100604	Parameter	znode * op2	1875:79:54449:54458	100495	3	True				
ANR	100605	ParameterType	znode *		100495	0					
ANR	100606	Identifier	op2		100495	1					
ANR	100607	CFGEntryNode	ENTRY		100495		True				
ANR	100608	CFGExitNode	EXIT		100495		True				
ANR	100609	Symbol	opline -> op1		100495						
ANR	100610	Symbol	opline -> op2		100495						
ANR	100611	Symbol	get_next_op		100495						
ANR	100612	Symbol	NULL		100495						
ANR	100613	Symbol	CG		100495						
ANR	100614	Symbol	active_op_array		100495						
ANR	100615	Symbol	opcode		100495						
ANR	100616	Symbol	result		100495						
ANR	100617	Symbol	op2		100495						
ANR	100618	Symbol	op1		100495						
ANR	100619	Symbol	opline		100495						
ANR	100620	Symbol	* opline		100495						
ANR	100621	Symbol	opline -> opcode		100495						
ANR	100622	Function	zend_emit_tick	1900:0:54823:55280							
ANR	100623	FunctionDef	zend_emit_tick ()		100622	0					
ANR	100624	CompoundStatement		1901:0:54866:55280	100622	0					
ANR	100625	IdentifierDeclStatement	zend_op * opline ;	1902:1:54869:54884	100622	0	True				
ANR	100626	IdentifierDecl	* opline		100622	0					
ANR	100627	IdentifierDeclType	zend_op *		100622	0					
ANR	100628	Identifier	opline		100622	1					
ANR	100629	IfStatement	if ( CG ( active_op_array ) -> last && CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode == ZEND_TICKS )		100622	1					
ANR	100630	Condition	CG ( active_op_array ) -> last && CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode == ZEND_TICKS	1905:5:54976:55084	100622	0	True				
ANR	100631	AndExpression	CG ( active_op_array ) -> last && CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode == ZEND_TICKS		100622	0		&&			
ANR	100632	PtrMemberAccess	CG ( active_op_array ) -> last		100622	0					
ANR	100633	CallExpression	CG ( active_op_array )		100622	0					
ANR	100634	Callee	CG		100622	0					
ANR	100635	Identifier	CG		100622	0					
ANR	100636	ArgumentList	active_op_array		100622	1					
ANR	100637	Argument	active_op_array		100622	0					
ANR	100638	Identifier	active_op_array		100622	0					
ANR	100639	Identifier	last		100622	1					
ANR	100640	EqualityExpression	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode == ZEND_TICKS		100622	1		==			
ANR	100641	MemberAccess	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode		100622	0					
ANR	100642	ArrayIndexing	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ]		100622	0					
ANR	100643	PtrMemberAccess	CG ( active_op_array ) -> opcodes		100622	0					
ANR	100644	CallExpression	CG ( active_op_array )		100622	0					
ANR	100645	Callee	CG		100622	0					
ANR	100646	Identifier	CG		100622	0					
ANR	100647	ArgumentList	active_op_array		100622	1					
ANR	100648	Argument	active_op_array		100622	0					
ANR	100649	Identifier	active_op_array		100622	0					
ANR	100650	Identifier	opcodes		100622	1					
ANR	100651	AdditiveExpression	CG ( active_op_array ) -> last - 1		100622	1		-			
ANR	100652	PtrMemberAccess	CG ( active_op_array ) -> last		100622	0					
ANR	100653	CallExpression	CG ( active_op_array )		100622	0					
ANR	100654	Callee	CG		100622	0					
ANR	100655	Identifier	CG		100622	0					
ANR	100656	ArgumentList	active_op_array		100622	1					
ANR	100657	Argument	active_op_array		100622	0					
ANR	100658	Identifier	active_op_array		100622	0					
ANR	100659	Identifier	last		100622	1					
ANR	100660	PrimaryExpression	1		100622	1					
ANR	100661	Identifier	opcode		100622	1					
ANR	100662	Identifier	ZEND_TICKS		100622	1					
ANR	100663	CompoundStatement		5:116:220:220	100622	1					
ANR	100664	ReturnStatement	return ;	1906:2:55091:55097	100622	0	True				
ANR	100665	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	1909:1:55105:55146	100622	2	True				
ANR	100666	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		100622	0		=			
ANR	100667	Identifier	opline		100622	0					
ANR	100668	CallExpression	get_next_op ( CG ( active_op_array ) )		100622	1					
ANR	100669	Callee	get_next_op		100622	0					
ANR	100670	Identifier	get_next_op		100622	0					
ANR	100671	ArgumentList	CG ( active_op_array )		100622	1					
ANR	100672	Argument	CG ( active_op_array )		100622	0					
ANR	100673	CallExpression	CG ( active_op_array )		100622	0					
ANR	100674	Callee	CG		100622	0					
ANR	100675	Identifier	CG		100622	0					
ANR	100676	ArgumentList	active_op_array		100622	1					
ANR	100677	Argument	active_op_array		100622	0					
ANR	100678	Identifier	active_op_array		100622	0					
ANR	100679	ExpressionStatement	opline -> opcode = ZEND_TICKS	1911:1:55150:55177	100622	3	True				
ANR	100680	AssignmentExpression	opline -> opcode = ZEND_TICKS		100622	0		=			
ANR	100681	PtrMemberAccess	opline -> opcode		100622	0					
ANR	100682	Identifier	opline		100622	0					
ANR	100683	Identifier	opcode		100622	1					
ANR	100684	Identifier	ZEND_TICKS		100622	1					
ANR	100685	ExpressionStatement	SET_UNUSED ( opline -> op1 )	1912:1:55180:55203	100622	4	True				
ANR	100686	CallExpression	SET_UNUSED ( opline -> op1 )		100622	0					
ANR	100687	Callee	SET_UNUSED		100622	0					
ANR	100688	Identifier	SET_UNUSED		100622	0					
ANR	100689	ArgumentList	opline -> op1		100622	1					
ANR	100690	Argument	opline -> op1		100622	0					
ANR	100691	PtrMemberAccess	opline -> op1		100622	0					
ANR	100692	Identifier	opline		100622	0					
ANR	100693	Identifier	op1		100622	1					
ANR	100694	ExpressionStatement	SET_UNUSED ( opline -> op2 )	1913:1:55206:55229	100622	5	True				
ANR	100695	CallExpression	SET_UNUSED ( opline -> op2 )		100622	0					
ANR	100696	Callee	SET_UNUSED		100622	0					
ANR	100697	Identifier	SET_UNUSED		100622	0					
ANR	100698	ArgumentList	opline -> op2		100622	1					
ANR	100699	Argument	opline -> op2		100622	0					
ANR	100700	PtrMemberAccess	opline -> op2		100622	0					
ANR	100701	Identifier	opline		100622	0					
ANR	100702	Identifier	op2		100622	1					
ANR	100703	ExpressionStatement	opline -> extended_value = FC ( declarables ) . ticks	1914:1:55232:55278	100622	6	True				
ANR	100704	AssignmentExpression	opline -> extended_value = FC ( declarables ) . ticks		100622	0		=			
ANR	100705	PtrMemberAccess	opline -> extended_value		100622	0					
ANR	100706	Identifier	opline		100622	0					
ANR	100707	Identifier	extended_value		100622	1					
ANR	100708	MemberAccess	FC ( declarables ) . ticks		100622	1					
ANR	100709	CallExpression	FC ( declarables )		100622	0					
ANR	100710	Callee	FC		100622	0					
ANR	100711	Identifier	FC		100622	0					
ANR	100712	ArgumentList	declarables		100622	1					
ANR	100713	Argument	declarables		100622	0					
ANR	100714	Identifier	declarables		100622	0					
ANR	100715	Identifier	ticks		100622	1					
ANR	100716	ReturnType	static void		100622	1					
ANR	100717	Identifier	zend_emit_tick		100622	2					
ANR	100718	ParameterList			100622	3					
ANR	100719	CFGEntryNode	ENTRY		100622		True				
ANR	100720	CFGExitNode	EXIT		100622		True				
ANR	100721	Symbol	opline -> op1		100622						
ANR	100722	Symbol	CG ( active_op_array ) -> opcodes [ CG ( active_op_array ) -> last - 1 ] . opcode		100622						
ANR	100723	Symbol	opline -> op2		100622						
ANR	100724	Symbol	get_next_op		100622						
ANR	100725	Symbol	CG		100622						
ANR	100726	Symbol	* CG ( active_op_array ) -> last		100622						
ANR	100727	Symbol	active_op_array		100622						
ANR	100728	Symbol	* CG		100622						
ANR	100729	Symbol	CG ( active_op_array ) -> opcodes		100622						
ANR	100730	Symbol	opline -> extended_value		100622						
ANR	100731	Symbol	CG ( active_op_array ) -> last		100622						
ANR	100732	Symbol	declarables		100622						
ANR	100733	Symbol	* * CG		100622						
ANR	100734	Symbol	opline		100622						
ANR	100735	Symbol	* opline		100622						
ANR	100736	Symbol	opline -> opcode		100622						
ANR	100737	Symbol	ZEND_TICKS		100622						
ANR	100738	Symbol	FC		100622						
ANR	100739	Symbol	* CG ( active_op_array ) -> opcodes		100622						
ANR	100740	Symbol	FC ( declarables ) . ticks		100622						
ANR	100741	Function	zend_emit_op_data	1918:0:55293:55415							
ANR	100742	FunctionDef	zend_emit_op_data (znode * value)		100741	0					
ANR	100743	CompoundStatement		1919:0:55358:55415	100741	0					
ANR	100744	ReturnStatement	"return zend_emit_op ( NULL , ZEND_OP_DATA , value , NULL ) ;"	1920:1:55361:55413	100741	0	True				
ANR	100745	CallExpression	"zend_emit_op ( NULL , ZEND_OP_DATA , value , NULL )"		100741	0					
ANR	100746	Callee	zend_emit_op		100741	0					
ANR	100747	Identifier	zend_emit_op		100741	0					
ANR	100748	ArgumentList	NULL		100741	1					
ANR	100749	Argument	NULL		100741	0					
ANR	100750	Identifier	NULL		100741	0					
ANR	100751	Argument	ZEND_OP_DATA		100741	1					
ANR	100752	Identifier	ZEND_OP_DATA		100741	0					
ANR	100753	Argument	value		100741	2					
ANR	100754	Identifier	value		100741	0					
ANR	100755	Argument	NULL		100741	3					
ANR	100756	Identifier	NULL		100741	0					
ANR	100757	ReturnType	static inline zend_op *		100741	1					
ANR	100758	Identifier	zend_emit_op_data		100741	2					
ANR	100759	ParameterList	znode * value		100741	3					
ANR	100760	Parameter	znode * value	1918:41:55334:55345	100741	0	True				
ANR	100761	ParameterType	znode *		100741	0					
ANR	100762	Identifier	value		100741	1					
ANR	100763	CFGEntryNode	ENTRY		100741		True				
ANR	100764	CFGExitNode	EXIT		100741		True				
ANR	100765	Symbol	NULL		100741						
ANR	100766	Symbol	ZEND_OP_DATA		100741						
ANR	100767	Symbol	value		100741						
ANR	100768	Symbol	zend_emit_op		100741						
ANR	100769	Function	zend_emit_jump	1924:0:55428:55676							
ANR	100770	FunctionDef	zend_emit_jump (uint32_t opnum_target)		100769	0					
ANR	100771	CompoundStatement		1925:0:55499:55676	100769	0					
ANR	100772	IdentifierDeclStatement	uint32_t opnum = get_next_op_number ( CG ( active_op_array ) ) ;	1926:1:55502:55558	100769	0	True				
ANR	100773	IdentifierDecl	opnum = get_next_op_number ( CG ( active_op_array ) )		100769	0					
ANR	100774	IdentifierDeclType	uint32_t		100769	0					
ANR	100775	Identifier	opnum		100769	1					
ANR	100776	AssignmentExpression	opnum = get_next_op_number ( CG ( active_op_array ) )		100769	2		=			
ANR	100777	Identifier	opnum		100769	0					
ANR	100778	CallExpression	get_next_op_number ( CG ( active_op_array ) )		100769	1					
ANR	100779	Callee	get_next_op_number		100769	0					
ANR	100780	Identifier	get_next_op_number		100769	0					
ANR	100781	ArgumentList	CG ( active_op_array )		100769	1					
ANR	100782	Argument	CG ( active_op_array )		100769	0					
ANR	100783	CallExpression	CG ( active_op_array )		100769	0					
ANR	100784	Callee	CG		100769	0					
ANR	100785	Identifier	CG		100769	0					
ANR	100786	ArgumentList	active_op_array		100769	1					
ANR	100787	Argument	active_op_array		100769	0					
ANR	100788	Identifier	active_op_array		100769	0					
ANR	100789	IdentifierDeclStatement	"zend_op * opline = zend_emit_op ( NULL , ZEND_JMP , NULL , NULL ) ;"	1927:1:55561:55619	100769	1	True				
ANR	100790	IdentifierDecl	"* opline = zend_emit_op ( NULL , ZEND_JMP , NULL , NULL )"		100769	0					
ANR	100791	IdentifierDeclType	zend_op *		100769	0					
ANR	100792	Identifier	opline		100769	1					
ANR	100793	AssignmentExpression	"* opline = zend_emit_op ( NULL , ZEND_JMP , NULL , NULL )"		100769	2		=			
ANR	100794	Identifier	opline		100769	0					
ANR	100795	CallExpression	"zend_emit_op ( NULL , ZEND_JMP , NULL , NULL )"		100769	1					
ANR	100796	Callee	zend_emit_op		100769	0					
ANR	100797	Identifier	zend_emit_op		100769	0					
ANR	100798	ArgumentList	NULL		100769	1					
ANR	100799	Argument	NULL		100769	0					
ANR	100800	Identifier	NULL		100769	0					
ANR	100801	Argument	ZEND_JMP		100769	1					
ANR	100802	Identifier	ZEND_JMP		100769	0					
ANR	100803	Argument	NULL		100769	2					
ANR	100804	Identifier	NULL		100769	0					
ANR	100805	Argument	NULL		100769	3					
ANR	100806	Identifier	NULL		100769	0					
ANR	100807	ExpressionStatement	opline -> op1 . opline_num = opnum_target	1928:1:55622:55659	100769	2	True				
ANR	100808	AssignmentExpression	opline -> op1 . opline_num = opnum_target		100769	0		=			
ANR	100809	MemberAccess	opline -> op1 . opline_num		100769	0					
ANR	100810	PtrMemberAccess	opline -> op1		100769	0					
ANR	100811	Identifier	opline		100769	0					
ANR	100812	Identifier	op1		100769	1					
ANR	100813	Identifier	opline_num		100769	1					
ANR	100814	Identifier	opnum_target		100769	1					
ANR	100815	ReturnStatement	return opnum ;	1929:1:55662:55674	100769	3	True				
ANR	100816	Identifier	opnum		100769	0					
ANR	100817	ReturnType	static inline uint32_t		100769	1					
ANR	100818	Identifier	zend_emit_jump		100769	2					
ANR	100819	ParameterList	uint32_t opnum_target		100769	3					
ANR	100820	Parameter	uint32_t opnum_target	1924:38:55466:55486	100769	0	True				
ANR	100821	ParameterType	uint32_t		100769	0					
ANR	100822	Identifier	opnum_target		100769	1					
ANR	100823	CFGEntryNode	ENTRY		100769		True				
ANR	100824	CFGExitNode	EXIT		100769		True				
ANR	100825	Symbol	opline -> op1		100769						
ANR	100826	Symbol	opnum_target		100769						
ANR	100827	Symbol	NULL		100769						
ANR	100828	Symbol	opline		100769						
ANR	100829	Symbol	ZEND_JMP		100769						
ANR	100830	Symbol	CG		100769						
ANR	100831	Symbol	* opline		100769						
ANR	100832	Symbol	opnum		100769						
ANR	100833	Symbol	active_op_array		100769						
ANR	100834	Symbol	opline -> op1 . opline_num		100769						
ANR	100835	Symbol	get_next_op_number		100769						
ANR	100836	Symbol	zend_emit_op		100769						
ANR	100837	Function	zend_emit_cond_jump	1933:0:55689:55972							
ANR	100838	FunctionDef	"zend_emit_cond_jump (zend_uchar opcode , znode * cond , uint32_t opnum_target)"		100837	0					
ANR	100839	CompoundStatement		1934:0:55797:55972	100837	0					
ANR	100840	IdentifierDeclStatement	uint32_t opnum = get_next_op_number ( CG ( active_op_array ) ) ;	1935:1:55800:55856	100837	0	True				
ANR	100841	IdentifierDecl	opnum = get_next_op_number ( CG ( active_op_array ) )		100837	0					
ANR	100842	IdentifierDeclType	uint32_t		100837	0					
ANR	100843	Identifier	opnum		100837	1					
ANR	100844	AssignmentExpression	opnum = get_next_op_number ( CG ( active_op_array ) )		100837	2		=			
ANR	100845	Identifier	opnum		100837	0					
ANR	100846	CallExpression	get_next_op_number ( CG ( active_op_array ) )		100837	1					
ANR	100847	Callee	get_next_op_number		100837	0					
ANR	100848	Identifier	get_next_op_number		100837	0					
ANR	100849	ArgumentList	CG ( active_op_array )		100837	1					
ANR	100850	Argument	CG ( active_op_array )		100837	0					
ANR	100851	CallExpression	CG ( active_op_array )		100837	0					
ANR	100852	Callee	CG		100837	0					
ANR	100853	Identifier	CG		100837	0					
ANR	100854	ArgumentList	active_op_array		100837	1					
ANR	100855	Argument	active_op_array		100837	0					
ANR	100856	Identifier	active_op_array		100837	0					
ANR	100857	IdentifierDeclStatement	"zend_op * opline = zend_emit_op ( NULL , opcode , cond , NULL ) ;"	1936:1:55859:55915	100837	1	True				
ANR	100858	IdentifierDecl	"* opline = zend_emit_op ( NULL , opcode , cond , NULL )"		100837	0					
ANR	100859	IdentifierDeclType	zend_op *		100837	0					
ANR	100860	Identifier	opline		100837	1					
ANR	100861	AssignmentExpression	"* opline = zend_emit_op ( NULL , opcode , cond , NULL )"		100837	2		=			
ANR	100862	Identifier	opline		100837	0					
ANR	100863	CallExpression	"zend_emit_op ( NULL , opcode , cond , NULL )"		100837	1					
ANR	100864	Callee	zend_emit_op		100837	0					
ANR	100865	Identifier	zend_emit_op		100837	0					
ANR	100866	ArgumentList	NULL		100837	1					
ANR	100867	Argument	NULL		100837	0					
ANR	100868	Identifier	NULL		100837	0					
ANR	100869	Argument	opcode		100837	1					
ANR	100870	Identifier	opcode		100837	0					
ANR	100871	Argument	cond		100837	2					
ANR	100872	Identifier	cond		100837	0					
ANR	100873	Argument	NULL		100837	3					
ANR	100874	Identifier	NULL		100837	0					
ANR	100875	ExpressionStatement	opline -> op2 . opline_num = opnum_target	1937:1:55918:55955	100837	2	True				
ANR	100876	AssignmentExpression	opline -> op2 . opline_num = opnum_target		100837	0		=			
ANR	100877	MemberAccess	opline -> op2 . opline_num		100837	0					
ANR	100878	PtrMemberAccess	opline -> op2		100837	0					
ANR	100879	Identifier	opline		100837	0					
ANR	100880	Identifier	op2		100837	1					
ANR	100881	Identifier	opline_num		100837	1					
ANR	100882	Identifier	opnum_target		100837	1					
ANR	100883	ReturnStatement	return opnum ;	1938:1:55958:55970	100837	3	True				
ANR	100884	Identifier	opnum		100837	0					
ANR	100885	ReturnType	static inline uint32_t		100837	1					
ANR	100886	Identifier	zend_emit_cond_jump		100837	2					
ANR	100887	ParameterList	"zend_uchar opcode , znode * cond , uint32_t opnum_target"		100837	3					
ANR	100888	Parameter	zend_uchar opcode	1933:43:55732:55748	100837	0	True				
ANR	100889	ParameterType	zend_uchar		100837	0					
ANR	100890	Identifier	opcode		100837	1					
ANR	100891	Parameter	znode * cond	1933:62:55751:55761	100837	1	True				
ANR	100892	ParameterType	znode *		100837	0					
ANR	100893	Identifier	cond		100837	1					
ANR	100894	Parameter	uint32_t opnum_target	1933:75:55764:55784	100837	2	True				
ANR	100895	ParameterType	uint32_t		100837	0					
ANR	100896	Identifier	opnum_target		100837	1					
ANR	100897	CFGEntryNode	ENTRY		100837		True				
ANR	100898	CFGExitNode	EXIT		100837		True				
ANR	100899	Symbol	opline -> op2		100837						
ANR	100900	Symbol	opline -> op2 . opline_num		100837						
ANR	100901	Symbol	NULL		100837						
ANR	100902	Symbol	CG		100837						
ANR	100903	Symbol	active_op_array		100837						
ANR	100904	Symbol	opcode		100837						
ANR	100905	Symbol	cond		100837						
ANR	100906	Symbol	opnum_target		100837						
ANR	100907	Symbol	opline		100837						
ANR	100908	Symbol	* opline		100837						
ANR	100909	Symbol	opnum		100837						
ANR	100910	Symbol	get_next_op_number		100837						
ANR	100911	Symbol	zend_emit_op		100837						
ANR	100912	Function	zend_update_jump_target	1942:0:55985:56428							
ANR	100913	FunctionDef	"zend_update_jump_target (uint32_t opnum_jump , uint32_t opnum_target)"		100912	0					
ANR	100914	CompoundStatement		1943:0:56082:56428	100912	0					
ANR	100915	IdentifierDeclStatement	zend_op * opline = & CG ( active_op_array ) -> opcodes [ opnum_jump ] ;	1944:1:56085:56144	100912	0	True				
ANR	100916	IdentifierDecl	* opline = & CG ( active_op_array ) -> opcodes [ opnum_jump ]		100912	0					
ANR	100917	IdentifierDeclType	zend_op *		100912	0					
ANR	100918	Identifier	opline		100912	1					
ANR	100919	AssignmentExpression	* opline = & CG ( active_op_array ) -> opcodes [ opnum_jump ]		100912	2		=			
ANR	100920	Identifier	opline		100912	0					
ANR	100921	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ opnum_jump ]		100912	1					
ANR	100922	UnaryOperator	&		100912	0					
ANR	100923	ArrayIndexing	CG ( active_op_array ) -> opcodes [ opnum_jump ]		100912	1					
ANR	100924	PtrMemberAccess	CG ( active_op_array ) -> opcodes		100912	0					
ANR	100925	CallExpression	CG ( active_op_array )		100912	0					
ANR	100926	Callee	CG		100912	0					
ANR	100927	Identifier	CG		100912	0					
ANR	100928	ArgumentList	active_op_array		100912	1					
ANR	100929	Argument	active_op_array		100912	0					
ANR	100930	Identifier	active_op_array		100912	0					
ANR	100931	Identifier	opcodes		100912	1					
ANR	100932	Identifier	opnum_jump		100912	1					
ANR	100933	SwitchStatement	switch ( opline -> opcode )		100912	1					
ANR	100934	Condition	opline -> opcode	1945:9:56155:56168	100912	0	True				
ANR	100935	PtrMemberAccess	opline -> opcode		100912	0					
ANR	100936	Identifier	opline		100912	0					
ANR	100937	Identifier	opcode		100912	1					
ANR	100938	CompoundStatement		3:25:88:88	100912	1					
ANR	100939	Label	case ZEND_JMP :	1946:2:56175:56188	100912	0	True				
ANR	100940	Identifier	ZEND_JMP		100912	0					
ANR	100941	ExpressionStatement	opline -> op1 . opline_num = opnum_target	1947:3:56193:56230	100912	1	True				
ANR	100942	AssignmentExpression	opline -> op1 . opline_num = opnum_target		100912	0		=			
ANR	100943	MemberAccess	opline -> op1 . opline_num		100912	0					
ANR	100944	PtrMemberAccess	opline -> op1		100912	0					
ANR	100945	Identifier	opline		100912	0					
ANR	100946	Identifier	op1		100912	1					
ANR	100947	Identifier	opline_num		100912	1					
ANR	100948	Identifier	opnum_target		100912	1					
ANR	100949	BreakStatement	break ;	1948:3:56235:56240	100912	2	True				
ANR	100950	Label	case ZEND_JMPZ :	1949:2:56244:56258	100912	3	True				
ANR	100951	Identifier	ZEND_JMPZ		100912	0					
ANR	100952	Label	case ZEND_JMPNZ :	1950:2:56262:56277	100912	4	True				
ANR	100953	Identifier	ZEND_JMPNZ		100912	0					
ANR	100954	Label	case ZEND_JMPZ_EX :	1951:2:56281:56298	100912	5	True				
ANR	100955	Identifier	ZEND_JMPZ_EX		100912	0					
ANR	100956	Label	case ZEND_JMPNZ_EX :	1952:2:56302:56320	100912	6	True				
ANR	100957	Identifier	ZEND_JMPNZ_EX		100912	0					
ANR	100958	Label	case ZEND_JMP_SET :	1953:2:56324:56341	100912	7	True				
ANR	100959	Identifier	ZEND_JMP_SET		100912	0					
ANR	100960	ExpressionStatement	opline -> op2 . opline_num = opnum_target	1954:3:56346:56383	100912	8	True				
ANR	100961	AssignmentExpression	opline -> op2 . opline_num = opnum_target		100912	0		=			
ANR	100962	MemberAccess	opline -> op2 . opline_num		100912	0					
ANR	100963	PtrMemberAccess	opline -> op2		100912	0					
ANR	100964	Identifier	opline		100912	0					
ANR	100965	Identifier	op2		100912	1					
ANR	100966	Identifier	opline_num		100912	1					
ANR	100967	Identifier	opnum_target		100912	1					
ANR	100968	BreakStatement	break ;	1955:3:56388:56393	100912	9	True				
ANR	100969	Statement	EMPTY_SWITCH_DEFAULT_CASE	1956:2:56397:56421	100912	10	True				
ANR	100970	Statement	(	1956:27:56422:56422	100912	11	True				
ANR	100971	Statement	)	1956:28:56423:56423	100912	12	True				
ANR	100972	ReturnType	static inline void		100912	1					
ANR	100973	Identifier	zend_update_jump_target		100912	2					
ANR	100974	ParameterList	"uint32_t opnum_jump , uint32_t opnum_target"		100912	3					
ANR	100975	Parameter	uint32_t opnum_jump	1942:43:56028:56046	100912	0	True				
ANR	100976	ParameterType	uint32_t		100912	0					
ANR	100977	Identifier	opnum_jump		100912	1					
ANR	100978	Parameter	uint32_t opnum_target	1942:64:56049:56069	100912	1	True				
ANR	100979	ParameterType	uint32_t		100912	0					
ANR	100980	Identifier	opnum_target		100912	1					
ANR	100981	CFGEntryNode	ENTRY		100912		True				
ANR	100982	CFGExitNode	EXIT		100912		True				
ANR	100983	Symbol	opline -> op1		100912						
ANR	100984	Symbol	opline -> op2		100912						
ANR	100985	Symbol	opline -> op2 . opline_num		100912						
ANR	100986	Symbol	CG		100912						
ANR	100987	Symbol	active_op_array		100912						
ANR	100988	Symbol	opnum_jump		100912						
ANR	100989	Symbol	opline -> op1 . opline_num		100912						
ANR	100990	Symbol	* CG		100912						
ANR	100991	Symbol	CG ( active_op_array ) -> opcodes		100912						
ANR	100992	Symbol	opnum_target		100912						
ANR	100993	Symbol	opline		100912						
ANR	100994	Symbol	* opline		100912						
ANR	100995	Symbol	opline -> opcode		100912						
ANR	100996	Function	zend_update_jump_target_to_next	1961:0:56441:56604							
ANR	100997	FunctionDef	zend_update_jump_target_to_next (uint32_t opnum_jump)		100996	0					
ANR	100998	CompoundStatement		1962:0:56523:56604	100996	0					
ANR	100999	ExpressionStatement	"zend_update_jump_target ( opnum_jump , get_next_op_number ( CG ( active_op_array ) ) )"	1963:1:56526:56602	100996	0	True				
ANR	101000	CallExpression	"zend_update_jump_target ( opnum_jump , get_next_op_number ( CG ( active_op_array ) ) )"		100996	0					
ANR	101001	Callee	zend_update_jump_target		100996	0					
ANR	101002	Identifier	zend_update_jump_target		100996	0					
ANR	101003	ArgumentList	opnum_jump		100996	1					
ANR	101004	Argument	opnum_jump		100996	0					
ANR	101005	Identifier	opnum_jump		100996	0					
ANR	101006	Argument	get_next_op_number ( CG ( active_op_array ) )		100996	1					
ANR	101007	CallExpression	get_next_op_number ( CG ( active_op_array ) )		100996	0					
ANR	101008	Callee	get_next_op_number		100996	0					
ANR	101009	Identifier	get_next_op_number		100996	0					
ANR	101010	ArgumentList	CG ( active_op_array )		100996	1					
ANR	101011	Argument	CG ( active_op_array )		100996	0					
ANR	101012	CallExpression	CG ( active_op_array )		100996	0					
ANR	101013	Callee	CG		100996	0					
ANR	101014	Identifier	CG		100996	0					
ANR	101015	ArgumentList	active_op_array		100996	1					
ANR	101016	Argument	active_op_array		100996	0					
ANR	101017	Identifier	active_op_array		100996	0					
ANR	101018	ReturnType	static inline void		100996	1					
ANR	101019	Identifier	zend_update_jump_target_to_next		100996	2					
ANR	101020	ParameterList	uint32_t opnum_jump		100996	3					
ANR	101021	Parameter	uint32_t opnum_jump	1961:51:56492:56510	100996	0	True				
ANR	101022	ParameterType	uint32_t		100996	0					
ANR	101023	Identifier	opnum_jump		100996	1					
ANR	101024	CFGEntryNode	ENTRY		100996		True				
ANR	101025	CFGExitNode	EXIT		100996		True				
ANR	101026	Symbol	CG		100996						
ANR	101027	Symbol	active_op_array		100996						
ANR	101028	Symbol	opnum_jump		100996						
ANR	101029	Symbol	get_next_op_number		100996						
ANR	101030	Function	zend_delayed_emit_op	1967:0:56617:57171							
ANR	101031	FunctionDef	"zend_delayed_emit_op (znode * result , zend_uchar opcode , znode * op1 , znode * op2)"		101030	0					
ANR	101032	CompoundStatement		1968:0:56729:57171	101030	0					
ANR	101033	IdentifierDeclStatement	zend_op tmp_opline ;	1969:1:56732:56750	101030	0	True				
ANR	101034	IdentifierDecl	tmp_opline		101030	0					
ANR	101035	IdentifierDeclType	zend_op		101030	0					
ANR	101036	Identifier	tmp_opline		101030	1					
ANR	101037	ExpressionStatement	init_op ( & tmp_opline )	1970:1:56753:56773	101030	1	True				
ANR	101038	CallExpression	init_op ( & tmp_opline )		101030	0					
ANR	101039	Callee	init_op		101030	0					
ANR	101040	Identifier	init_op		101030	0					
ANR	101041	ArgumentList	& tmp_opline		101030	1					
ANR	101042	Argument	& tmp_opline		101030	0					
ANR	101043	UnaryOperationExpression	& tmp_opline		101030	0					
ANR	101044	UnaryOperator	&		101030	0					
ANR	101045	Identifier	tmp_opline		101030	1					
ANR	101046	ExpressionStatement	tmp_opline . opcode = opcode	1971:1:56776:56802	101030	2	True				
ANR	101047	AssignmentExpression	tmp_opline . opcode = opcode		101030	0		=			
ANR	101048	MemberAccess	tmp_opline . opcode		101030	0					
ANR	101049	Identifier	tmp_opline		101030	0					
ANR	101050	Identifier	opcode		101030	1					
ANR	101051	Identifier	opcode		101030	1					
ANR	101052	IfStatement	if ( op1 == NULL )		101030	3					
ANR	101053	Condition	op1 == NULL	1972:5:56809:56819	101030	0	True				
ANR	101054	EqualityExpression	op1 == NULL		101030	0		==			
ANR	101055	Identifier	op1		101030	0					
ANR	101056	Identifier	NULL		101030	1					
ANR	101057	CompoundStatement		5:18:92:92	101030	1					
ANR	101058	ExpressionStatement	SET_UNUSED ( tmp_opline . op1 )	1973:2:56826:56852	101030	0	True				
ANR	101059	CallExpression	SET_UNUSED ( tmp_opline . op1 )		101030	0					
ANR	101060	Callee	SET_UNUSED		101030	0					
ANR	101061	Identifier	SET_UNUSED		101030	0					
ANR	101062	ArgumentList	tmp_opline . op1		101030	1					
ANR	101063	Argument	tmp_opline . op1		101030	0					
ANR	101064	MemberAccess	tmp_opline . op1		101030	0					
ANR	101065	Identifier	tmp_opline		101030	0					
ANR	101066	Identifier	op1		101030	1					
ANR	101067	ElseStatement	else		101030	0					
ANR	101068	CompoundStatement		7:8:132:132	101030	0					
ANR	101069	ExpressionStatement	"SET_NODE ( tmp_opline . op1 , op1 )"	1975:2:56866:56895	101030	0	True				
ANR	101070	CallExpression	"SET_NODE ( tmp_opline . op1 , op1 )"		101030	0					
ANR	101071	Callee	SET_NODE		101030	0					
ANR	101072	Identifier	SET_NODE		101030	0					
ANR	101073	ArgumentList	tmp_opline . op1		101030	1					
ANR	101074	Argument	tmp_opline . op1		101030	0					
ANR	101075	MemberAccess	tmp_opline . op1		101030	0					
ANR	101076	Identifier	tmp_opline		101030	0					
ANR	101077	Identifier	op1		101030	1					
ANR	101078	Argument	op1		101030	1					
ANR	101079	Identifier	op1		101030	0					
ANR	101080	IfStatement	if ( op2 == NULL )		101030	4					
ANR	101081	Condition	op2 == NULL	1977:5:56905:56915	101030	0	True				
ANR	101082	EqualityExpression	op2 == NULL		101030	0		==			
ANR	101083	Identifier	op2		101030	0					
ANR	101084	Identifier	NULL		101030	1					
ANR	101085	CompoundStatement		10:18:188:188	101030	1					
ANR	101086	ExpressionStatement	SET_UNUSED ( tmp_opline . op2 )	1978:2:56922:56948	101030	0	True				
ANR	101087	CallExpression	SET_UNUSED ( tmp_opline . op2 )		101030	0					
ANR	101088	Callee	SET_UNUSED		101030	0					
ANR	101089	Identifier	SET_UNUSED		101030	0					
ANR	101090	ArgumentList	tmp_opline . op2		101030	1					
ANR	101091	Argument	tmp_opline . op2		101030	0					
ANR	101092	MemberAccess	tmp_opline . op2		101030	0					
ANR	101093	Identifier	tmp_opline		101030	0					
ANR	101094	Identifier	op2		101030	1					
ANR	101095	ElseStatement	else		101030	0					
ANR	101096	CompoundStatement		12:8:228:228	101030	0					
ANR	101097	ExpressionStatement	"SET_NODE ( tmp_opline . op2 , op2 )"	1980:2:56962:56991	101030	0	True				
ANR	101098	CallExpression	"SET_NODE ( tmp_opline . op2 , op2 )"		101030	0					
ANR	101099	Callee	SET_NODE		101030	0					
ANR	101100	Identifier	SET_NODE		101030	0					
ANR	101101	ArgumentList	tmp_opline . op2		101030	1					
ANR	101102	Argument	tmp_opline . op2		101030	0					
ANR	101103	MemberAccess	tmp_opline . op2		101030	0					
ANR	101104	Identifier	tmp_opline		101030	0					
ANR	101105	Identifier	op2		101030	1					
ANR	101106	Argument	op2		101030	1					
ANR	101107	Identifier	op2		101030	0					
ANR	101108	IfStatement	if ( result )		101030	5					
ANR	101109	Condition	result	1982:5:57001:57006	101030	0	True				
ANR	101110	Identifier	result		101030	0					
ANR	101111	CompoundStatement		15:13:279:279	101030	1					
ANR	101112	ExpressionStatement	"zend_make_var_result ( result , & tmp_opline )"	1983:2:57013:57054	101030	0	True				
ANR	101113	CallExpression	"zend_make_var_result ( result , & tmp_opline )"		101030	0					
ANR	101114	Callee	zend_make_var_result		101030	0					
ANR	101115	Identifier	zend_make_var_result		101030	0					
ANR	101116	ArgumentList	result		101030	1					
ANR	101117	Argument	result		101030	0					
ANR	101118	Identifier	result		101030	0					
ANR	101119	Argument	& tmp_opline		101030	1					
ANR	101120	UnaryOperationExpression	& tmp_opline		101030	0					
ANR	101121	UnaryOperator	&		101030	0					
ANR	101122	Identifier	tmp_opline		101030	1					
ANR	101123	ExpressionStatement	"zend_stack_push ( & CG ( delayed_oplines_stack ) , & tmp_opline )"	1986:1:57061:57117	101030	6	True				
ANR	101124	CallExpression	"zend_stack_push ( & CG ( delayed_oplines_stack ) , & tmp_opline )"		101030	0					
ANR	101125	Callee	zend_stack_push		101030	0					
ANR	101126	Identifier	zend_stack_push		101030	0					
ANR	101127	ArgumentList	& CG ( delayed_oplines_stack )		101030	1					
ANR	101128	Argument	& CG ( delayed_oplines_stack )		101030	0					
ANR	101129	UnaryOperationExpression	& CG ( delayed_oplines_stack )		101030	0					
ANR	101130	UnaryOperator	&		101030	0					
ANR	101131	CallExpression	CG ( delayed_oplines_stack )		101030	1					
ANR	101132	Callee	CG		101030	0					
ANR	101133	Identifier	CG		101030	0					
ANR	101134	ArgumentList	delayed_oplines_stack		101030	1					
ANR	101135	Argument	delayed_oplines_stack		101030	0					
ANR	101136	Identifier	delayed_oplines_stack		101030	0					
ANR	101137	Argument	& tmp_opline		101030	1					
ANR	101138	UnaryOperationExpression	& tmp_opline		101030	0					
ANR	101139	UnaryOperator	&		101030	0					
ANR	101140	Identifier	tmp_opline		101030	1					
ANR	101141	ReturnStatement	return zend_stack_top ( & CG ( delayed_oplines_stack ) ) ;	1987:1:57120:57169	101030	7	True				
ANR	101142	CallExpression	zend_stack_top ( & CG ( delayed_oplines_stack ) )		101030	0					
ANR	101143	Callee	zend_stack_top		101030	0					
ANR	101144	Identifier	zend_stack_top		101030	0					
ANR	101145	ArgumentList	& CG ( delayed_oplines_stack )		101030	1					
ANR	101146	Argument	& CG ( delayed_oplines_stack )		101030	0					
ANR	101147	UnaryOperationExpression	& CG ( delayed_oplines_stack )		101030	0					
ANR	101148	UnaryOperator	&		101030	0					
ANR	101149	CallExpression	CG ( delayed_oplines_stack )		101030	1					
ANR	101150	Callee	CG		101030	0					
ANR	101151	Identifier	CG		101030	0					
ANR	101152	ArgumentList	delayed_oplines_stack		101030	1					
ANR	101153	Argument	delayed_oplines_stack		101030	0					
ANR	101154	Identifier	delayed_oplines_stack		101030	0					
ANR	101155	ReturnType	static inline zend_op *		101030	1					
ANR	101156	Identifier	zend_delayed_emit_op		101030	2					
ANR	101157	ParameterList	"znode * result , zend_uchar opcode , znode * op1 , znode * op2"		101030	3					
ANR	101158	Parameter	znode * result	1967:44:56661:56673	101030	0	True				
ANR	101159	ParameterType	znode *		101030	0					
ANR	101160	Identifier	result		101030	1					
ANR	101161	Parameter	zend_uchar opcode	1967:59:56676:56692	101030	1	True				
ANR	101162	ParameterType	zend_uchar		101030	0					
ANR	101163	Identifier	opcode		101030	1					
ANR	101164	Parameter	znode * op1	1967:78:56695:56704	101030	2	True				
ANR	101165	ParameterType	znode *		101030	0					
ANR	101166	Identifier	op1		101030	1					
ANR	101167	Parameter	znode * op2	1967:90:56707:56716	101030	3	True				
ANR	101168	ParameterType	znode *		101030	0					
ANR	101169	Identifier	op2		101030	1					
ANR	101170	CFGEntryNode	ENTRY		101030		True				
ANR	101171	CFGExitNode	EXIT		101030		True				
ANR	101172	Symbol	NULL		101030						
ANR	101173	Symbol	tmp_opline . op1		101030						
ANR	101174	Symbol	tmp_opline . op2		101030						
ANR	101175	Symbol	opcode		101030						
ANR	101176	Symbol	& tmp_opline		101030						
ANR	101177	Symbol	& CG		101030						
ANR	101178	Symbol	result		101030						
ANR	101179	Symbol	op2		101030						
ANR	101180	Symbol	op1		101030						
ANR	101181	Symbol	zend_stack_top		101030						
ANR	101182	Symbol	tmp_opline		101030						
ANR	101183	Symbol	delayed_oplines_stack		101030						
ANR	101184	Symbol	tmp_opline . opcode		101030						
ANR	101185	Function	zend_delayed_compile_begin	1991:0:57184:57306							
ANR	101186	FunctionDef	zend_delayed_compile_begin ()		101185	0					
ANR	101187	CompoundStatement		1992:0:57250:57306	101185	0					
ANR	101188	ReturnStatement	return zend_stack_count ( & CG ( delayed_oplines_stack ) ) ;	1993:1:57253:57304	101185	0	True				
ANR	101189	CallExpression	zend_stack_count ( & CG ( delayed_oplines_stack ) )		101185	0					
ANR	101190	Callee	zend_stack_count		101185	0					
ANR	101191	Identifier	zend_stack_count		101185	0					
ANR	101192	ArgumentList	& CG ( delayed_oplines_stack )		101185	1					
ANR	101193	Argument	& CG ( delayed_oplines_stack )		101185	0					
ANR	101194	UnaryOperationExpression	& CG ( delayed_oplines_stack )		101185	0					
ANR	101195	UnaryOperator	&		101185	0					
ANR	101196	CallExpression	CG ( delayed_oplines_stack )		101185	1					
ANR	101197	Callee	CG		101185	0					
ANR	101198	Identifier	CG		101185	0					
ANR	101199	ArgumentList	delayed_oplines_stack		101185	1					
ANR	101200	Argument	delayed_oplines_stack		101185	0					
ANR	101201	Identifier	delayed_oplines_stack		101185	0					
ANR	101202	ReturnType	static inline uint32_t		101185	1					
ANR	101203	Identifier	zend_delayed_compile_begin		101185	2					
ANR	101204	ParameterList			101185	3					
ANR	101205	CFGEntryNode	ENTRY		101185		True				
ANR	101206	CFGExitNode	EXIT		101185		True				
ANR	101207	Symbol	delayed_oplines_stack		101185						
ANR	101208	Symbol	zend_stack_count		101185						
ANR	101209	Symbol	& CG		101185						
ANR	101210	Function	zend_delayed_compile_end	1997:0:57319:57757							
ANR	101211	FunctionDef	zend_delayed_compile_end (uint32_t offset)		101210	0					
ANR	101212	CompoundStatement		1998:0:57387:57757	101210	0					
ANR	101213	IdentifierDeclStatement	"zend_op * opline = NULL , * oplines = zend_stack_base ( & CG ( delayed_oplines_stack ) ) ;"	1999:1:57390:57468	101210	0	True				
ANR	101214	IdentifierDecl	* opline = NULL		101210	0					
ANR	101215	IdentifierDeclType	zend_op *		101210	0					
ANR	101216	Identifier	opline		101210	1					
ANR	101217	AssignmentExpression	* opline = NULL		101210	2		=			
ANR	101218	Identifier	NULL		101210	0					
ANR	101219	Identifier	NULL		101210	1					
ANR	101220	IdentifierDecl	* oplines = zend_stack_base ( & CG ( delayed_oplines_stack ) )		101210	1					
ANR	101221	IdentifierDeclType	zend_op *		101210	0					
ANR	101222	Identifier	oplines		101210	1					
ANR	101223	AssignmentExpression	* oplines = zend_stack_base ( & CG ( delayed_oplines_stack ) )		101210	2		=			
ANR	101224	Identifier	oplines		101210	0					
ANR	101225	CallExpression	zend_stack_base ( & CG ( delayed_oplines_stack ) )		101210	1					
ANR	101226	Callee	zend_stack_base		101210	0					
ANR	101227	Identifier	zend_stack_base		101210	0					
ANR	101228	ArgumentList	& CG ( delayed_oplines_stack )		101210	1					
ANR	101229	Argument	& CG ( delayed_oplines_stack )		101210	0					
ANR	101230	UnaryOperationExpression	& CG ( delayed_oplines_stack )		101210	0					
ANR	101231	UnaryOperator	&		101210	0					
ANR	101232	CallExpression	CG ( delayed_oplines_stack )		101210	1					
ANR	101233	Callee	CG		101210	0					
ANR	101234	Identifier	CG		101210	0					
ANR	101235	ArgumentList	delayed_oplines_stack		101210	1					
ANR	101236	Argument	delayed_oplines_stack		101210	0					
ANR	101237	Identifier	delayed_oplines_stack		101210	0					
ANR	101238	IdentifierDeclStatement	"uint32_t i , count = zend_stack_count ( & CG ( delayed_oplines_stack ) ) ;"	2000:1:57471:57535	101210	1	True				
ANR	101239	IdentifierDecl	i		101210	0					
ANR	101240	IdentifierDeclType	uint32_t		101210	0					
ANR	101241	Identifier	i		101210	1					
ANR	101242	IdentifierDecl	count = zend_stack_count ( & CG ( delayed_oplines_stack ) )		101210	1					
ANR	101243	IdentifierDeclType	uint32_t		101210	0					
ANR	101244	Identifier	count		101210	1					
ANR	101245	AssignmentExpression	count = zend_stack_count ( & CG ( delayed_oplines_stack ) )		101210	2		=			
ANR	101246	Identifier	count		101210	0					
ANR	101247	CallExpression	zend_stack_count ( & CG ( delayed_oplines_stack ) )		101210	1					
ANR	101248	Callee	zend_stack_count		101210	0					
ANR	101249	Identifier	zend_stack_count		101210	0					
ANR	101250	ArgumentList	& CG ( delayed_oplines_stack )		101210	1					
ANR	101251	Argument	& CG ( delayed_oplines_stack )		101210	0					
ANR	101252	UnaryOperationExpression	& CG ( delayed_oplines_stack )		101210	0					
ANR	101253	UnaryOperator	&		101210	0					
ANR	101254	CallExpression	CG ( delayed_oplines_stack )		101210	1					
ANR	101255	Callee	CG		101210	0					
ANR	101256	Identifier	CG		101210	0					
ANR	101257	ArgumentList	delayed_oplines_stack		101210	1					
ANR	101258	Argument	delayed_oplines_stack		101210	0					
ANR	101259	Identifier	delayed_oplines_stack		101210	0					
ANR	101260	ExpressionStatement	ZEND_ASSERT ( count > offset )	2002:1:57539:57566	101210	2	True				
ANR	101261	CallExpression	ZEND_ASSERT ( count > offset )		101210	0					
ANR	101262	Callee	ZEND_ASSERT		101210	0					
ANR	101263	Identifier	ZEND_ASSERT		101210	0					
ANR	101264	ArgumentList	count > offset		101210	1					
ANR	101265	Argument	count > offset		101210	0					
ANR	101266	RelationalExpression	count > offset		101210	0		>			
ANR	101267	Identifier	count		101210	0					
ANR	101268	Identifier	offset		101210	1					
ANR	101269	ForStatement	for ( i = offset ; i < count ; ++ i )		101210	3					
ANR	101270	ForInit	i = offset ;	2003:6:57574:57584	101210	0	True				
ANR	101271	AssignmentExpression	i = offset		101210	0		=			
ANR	101272	Identifier	i		101210	0					
ANR	101273	Identifier	offset		101210	1					
ANR	101274	Condition	i < count	2003:18:57586:57594	101210	1	True				
ANR	101275	RelationalExpression	i < count		101210	0		<			
ANR	101276	Identifier	i		101210	0					
ANR	101277	Identifier	count		101210	1					
ANR	101278	UnaryExpression	++ i	2003:29:57597:57599	101210	2	True				
ANR	101279	IncDec	++		101210	0					
ANR	101280	Identifier	i		101210	1					
ANR	101281	CompoundStatement		6:34:214:214	101210	3					
ANR	101282	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	2004:2:57606:57647	101210	0	True				
ANR	101283	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		101210	0		=			
ANR	101284	Identifier	opline		101210	0					
ANR	101285	CallExpression	get_next_op ( CG ( active_op_array ) )		101210	1					
ANR	101286	Callee	get_next_op		101210	0					
ANR	101287	Identifier	get_next_op		101210	0					
ANR	101288	ArgumentList	CG ( active_op_array )		101210	1					
ANR	101289	Argument	CG ( active_op_array )		101210	0					
ANR	101290	CallExpression	CG ( active_op_array )		101210	0					
ANR	101291	Callee	CG		101210	0					
ANR	101292	Identifier	CG		101210	0					
ANR	101293	ArgumentList	active_op_array		101210	1					
ANR	101294	Argument	active_op_array		101210	0					
ANR	101295	Identifier	active_op_array		101210	0					
ANR	101296	ExpressionStatement	"memcpy ( opline , & oplines [ i ] , sizeof ( zend_op ) )"	2005:2:57651:57695	101210	1	True				
ANR	101297	CallExpression	"memcpy ( opline , & oplines [ i ] , sizeof ( zend_op ) )"		101210	0					
ANR	101298	Callee	memcpy		101210	0					
ANR	101299	Identifier	memcpy		101210	0					
ANR	101300	ArgumentList	opline		101210	1					
ANR	101301	Argument	opline		101210	0					
ANR	101302	Identifier	opline		101210	0					
ANR	101303	Argument	& oplines [ i ]		101210	1					
ANR	101304	UnaryOperationExpression	& oplines [ i ]		101210	0					
ANR	101305	UnaryOperator	&		101210	0					
ANR	101306	ArrayIndexing	oplines [ i ]		101210	1					
ANR	101307	Identifier	oplines		101210	0					
ANR	101308	Identifier	i		101210	1					
ANR	101309	Argument	sizeof ( zend_op )		101210	2					
ANR	101310	SizeofExpression	sizeof ( zend_op )		101210	0					
ANR	101311	Sizeof	sizeof		101210	0					
ANR	101312	SizeofOperand	zend_op		101210	1					
ANR	101313	ExpressionStatement	CG ( delayed_oplines_stack ) . top = offset	2007:1:57701:57739	101210	4	True				
ANR	101314	AssignmentExpression	CG ( delayed_oplines_stack ) . top = offset		101210	0		=			
ANR	101315	MemberAccess	CG ( delayed_oplines_stack ) . top		101210	0					
ANR	101316	CallExpression	CG ( delayed_oplines_stack )		101210	0					
ANR	101317	Callee	CG		101210	0					
ANR	101318	Identifier	CG		101210	0					
ANR	101319	ArgumentList	delayed_oplines_stack		101210	1					
ANR	101320	Argument	delayed_oplines_stack		101210	0					
ANR	101321	Identifier	delayed_oplines_stack		101210	0					
ANR	101322	Identifier	top		101210	1					
ANR	101323	Identifier	offset		101210	1					
ANR	101324	ReturnStatement	return opline ;	2008:1:57742:57755	101210	5	True				
ANR	101325	Identifier	opline		101210	0					
ANR	101326	ReturnType	static zend_op *		101210	1					
ANR	101327	Identifier	zend_delayed_compile_end		101210	2					
ANR	101328	ParameterList	uint32_t offset		101210	3					
ANR	101329	Parameter	uint32_t offset	1997:41:57360:57374	101210	0	True				
ANR	101330	ParameterType	uint32_t		101210	0					
ANR	101331	Identifier	offset		101210	1					
ANR	101332	CFGEntryNode	ENTRY		101210		True				
ANR	101333	CFGExitNode	EXIT		101210		True				
ANR	101334	Symbol	NULL		101210						
ANR	101335	Symbol	get_next_op		101210						
ANR	101336	Symbol	offset		101210						
ANR	101337	Symbol	CG		101210						
ANR	101338	Symbol	active_op_array		101210						
ANR	101339	Symbol	count		101210						
ANR	101340	Symbol	i		101210						
ANR	101341	Symbol	CG ( delayed_oplines_stack ) . top		101210						
ANR	101342	Symbol	oplines		101210						
ANR	101343	Symbol	& CG		101210						
ANR	101344	Symbol	opline		101210						
ANR	101345	Symbol	delayed_oplines_stack		101210						
ANR	101346	Symbol	zend_stack_count		101210						
ANR	101347	Symbol	zend_stack_base		101210						
ANR	101348	Function	zend_emit_return_type_check	2012:0:57770:58352							
ANR	101349	FunctionDef	"zend_emit_return_type_check (znode * expr , zend_arg_info * return_info)"		101348	0					
ANR	101350	CompoundStatement		2013:0:57861:58352	101348	0					
ANR	101351	IfStatement	if ( return_info -> type_hint != IS_UNDEF )		101348	0					
ANR	101352	Condition	return_info -> type_hint != IS_UNDEF	2014:5:57868:57901	101348	0	True				
ANR	101353	EqualityExpression	return_info -> type_hint != IS_UNDEF		101348	0		!=			
ANR	101354	PtrMemberAccess	return_info -> type_hint		101348	0					
ANR	101355	Identifier	return_info		101348	0					
ANR	101356	Identifier	type_hint		101348	1					
ANR	101357	Identifier	IS_UNDEF		101348	1					
ANR	101358	CompoundStatement		3:2:46:119	101348	1					
ANR	101359	IdentifierDeclStatement	"zend_op * opline = zend_emit_op ( NULL , ZEND_VERIFY_RETURN_TYPE , expr , NULL ) ;"	2015:2:57908:57981	101348	0	True				
ANR	101360	IdentifierDecl	"* opline = zend_emit_op ( NULL , ZEND_VERIFY_RETURN_TYPE , expr , NULL )"		101348	0					
ANR	101361	IdentifierDeclType	zend_op *		101348	0					
ANR	101362	Identifier	opline		101348	1					
ANR	101363	AssignmentExpression	"* opline = zend_emit_op ( NULL , ZEND_VERIFY_RETURN_TYPE , expr , NULL )"		101348	2		=			
ANR	101364	Identifier	opline		101348	0					
ANR	101365	CallExpression	"zend_emit_op ( NULL , ZEND_VERIFY_RETURN_TYPE , expr , NULL )"		101348	1					
ANR	101366	Callee	zend_emit_op		101348	0					
ANR	101367	Identifier	zend_emit_op		101348	0					
ANR	101368	ArgumentList	NULL		101348	1					
ANR	101369	Argument	NULL		101348	0					
ANR	101370	Identifier	NULL		101348	0					
ANR	101371	Argument	ZEND_VERIFY_RETURN_TYPE		101348	1					
ANR	101372	Identifier	ZEND_VERIFY_RETURN_TYPE		101348	0					
ANR	101373	Argument	expr		101348	2					
ANR	101374	Identifier	expr		101348	0					
ANR	101375	Argument	NULL		101348	3					
ANR	101376	Identifier	NULL		101348	0					
ANR	101377	IfStatement	if ( expr && expr -> op_type == IS_CONST )		101348	1					
ANR	101378	Condition	expr && expr -> op_type == IS_CONST	2016:6:57989:58021	101348	0	True				
ANR	101379	AndExpression	expr && expr -> op_type == IS_CONST		101348	0		&&			
ANR	101380	Identifier	expr		101348	0					
ANR	101381	EqualityExpression	expr -> op_type == IS_CONST		101348	1		==			
ANR	101382	PtrMemberAccess	expr -> op_type		101348	0					
ANR	101383	Identifier	expr		101348	0					
ANR	101384	Identifier	op_type		101348	1					
ANR	101385	Identifier	IS_CONST		101348	1					
ANR	101386	CompoundStatement		4:41:162:162	101348	1					
ANR	101387	ExpressionStatement	opline -> result_type = expr -> op_type = IS_TMP_VAR	2017:3:58029:58077	101348	0	True				
ANR	101388	AssignmentExpression	opline -> result_type = expr -> op_type = IS_TMP_VAR		101348	0		=			
ANR	101389	PtrMemberAccess	opline -> result_type		101348	0					
ANR	101390	Identifier	opline		101348	0					
ANR	101391	Identifier	result_type		101348	1					
ANR	101392	AssignmentExpression	expr -> op_type = IS_TMP_VAR		101348	1		=			
ANR	101393	PtrMemberAccess	expr -> op_type		101348	0					
ANR	101394	Identifier	expr		101348	0					
ANR	101395	Identifier	op_type		101348	1					
ANR	101396	Identifier	IS_TMP_VAR		101348	1					
ANR	101397	ExpressionStatement	opline -> result . var = expr -> u . op . var = get_temporary_variable ( CG ( active_op_array ) )	2018:3:58082:58163	101348	1	True				
ANR	101398	AssignmentExpression	opline -> result . var = expr -> u . op . var = get_temporary_variable ( CG ( active_op_array ) )		101348	0		=			
ANR	101399	MemberAccess	opline -> result . var		101348	0					
ANR	101400	PtrMemberAccess	opline -> result		101348	0					
ANR	101401	Identifier	opline		101348	0					
ANR	101402	Identifier	result		101348	1					
ANR	101403	Identifier	var		101348	1					
ANR	101404	AssignmentExpression	expr -> u . op . var = get_temporary_variable ( CG ( active_op_array ) )		101348	1		=			
ANR	101405	MemberAccess	expr -> u . op . var		101348	0					
ANR	101406	MemberAccess	expr -> u . op		101348	0					
ANR	101407	PtrMemberAccess	expr -> u		101348	0					
ANR	101408	Identifier	expr		101348	0					
ANR	101409	Identifier	u		101348	1					
ANR	101410	Identifier	op		101348	1					
ANR	101411	Identifier	var		101348	1					
ANR	101412	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		101348	1					
ANR	101413	Callee	get_temporary_variable		101348	0					
ANR	101414	Identifier	get_temporary_variable		101348	0					
ANR	101415	ArgumentList	CG ( active_op_array )		101348	1					
ANR	101416	Argument	CG ( active_op_array )		101348	0					
ANR	101417	CallExpression	CG ( active_op_array )		101348	0					
ANR	101418	Callee	CG		101348	0					
ANR	101419	Identifier	CG		101348	0					
ANR	101420	ArgumentList	active_op_array		101348	1					
ANR	101421	Argument	active_op_array		101348	0					
ANR	101422	Identifier	active_op_array		101348	0					
ANR	101423	IfStatement	if ( return_info -> class_name )		101348	2					
ANR	101424	Condition	return_info -> class_name	2020:6:58175:58197	101348	0	True				
ANR	101425	PtrMemberAccess	return_info -> class_name		101348	0					
ANR	101426	Identifier	return_info		101348	0					
ANR	101427	Identifier	class_name		101348	1					
ANR	101428	CompoundStatement		8:31:338:338	101348	1					
ANR	101429	ExpressionStatement	opline -> op2 . num = CG ( active_op_array ) -> cache_size	2021:3:58205:58254	101348	0	True				
ANR	101430	AssignmentExpression	opline -> op2 . num = CG ( active_op_array ) -> cache_size		101348	0		=			
ANR	101431	MemberAccess	opline -> op2 . num		101348	0					
ANR	101432	PtrMemberAccess	opline -> op2		101348	0					
ANR	101433	Identifier	opline		101348	0					
ANR	101434	Identifier	op2		101348	1					
ANR	101435	Identifier	num		101348	1					
ANR	101436	PtrMemberAccess	CG ( active_op_array ) -> cache_size		101348	1					
ANR	101437	CallExpression	CG ( active_op_array )		101348	0					
ANR	101438	Callee	CG		101348	0					
ANR	101439	Identifier	CG		101348	0					
ANR	101440	ArgumentList	active_op_array		101348	1					
ANR	101441	Argument	active_op_array		101348	0					
ANR	101442	Identifier	active_op_array		101348	0					
ANR	101443	Identifier	cache_size		101348	1					
ANR	101444	ExpressionStatement	CG ( active_op_array ) -> cache_size += sizeof ( void * )	2022:3:58259:58307	101348	1	True				
ANR	101445	AssignmentExpression	CG ( active_op_array ) -> cache_size += sizeof ( void * )		101348	0		+=			
ANR	101446	PtrMemberAccess	CG ( active_op_array ) -> cache_size		101348	0					
ANR	101447	CallExpression	CG ( active_op_array )		101348	0					
ANR	101448	Callee	CG		101348	0					
ANR	101449	Identifier	CG		101348	0					
ANR	101450	ArgumentList	active_op_array		101348	1					
ANR	101451	Argument	active_op_array		101348	0					
ANR	101452	Identifier	active_op_array		101348	0					
ANR	101453	Identifier	cache_size		101348	1					
ANR	101454	SizeofExpression	sizeof ( void * )		101348	1					
ANR	101455	Sizeof	sizeof		101348	0					
ANR	101456	SizeofOperand	void *		101348	1					
ANR	101457	ElseStatement	else		101348	0					
ANR	101458	CompoundStatement		11:9:456:456	101348	0					
ANR	101459	ExpressionStatement	opline -> op2 . num = - 1	2024:3:58323:58343	101348	0	True				
ANR	101460	AssignmentExpression	opline -> op2 . num = - 1		101348	0		=			
ANR	101461	MemberAccess	opline -> op2 . num		101348	0					
ANR	101462	PtrMemberAccess	opline -> op2		101348	0					
ANR	101463	Identifier	opline		101348	0					
ANR	101464	Identifier	op2		101348	1					
ANR	101465	Identifier	num		101348	1					
ANR	101466	UnaryOperationExpression	- 1		101348	1					
ANR	101467	UnaryOperator	-		101348	0					
ANR	101468	PrimaryExpression	1		101348	1					
ANR	101469	ReturnType	static void		101348	1					
ANR	101470	Identifier	zend_emit_return_type_check		101348	2					
ANR	101471	ParameterList	"znode * expr , zend_arg_info * return_info"		101348	3					
ANR	101472	Parameter	znode * expr	2012:40:57810:57820	101348	0	True				
ANR	101473	ParameterType	znode *		101348	0					
ANR	101474	Identifier	expr		101348	1					
ANR	101475	Parameter	zend_arg_info * return_info	2012:53:57823:57848	101348	1	True				
ANR	101476	ParameterType	zend_arg_info *		101348	0					
ANR	101477	Identifier	return_info		101348	1					
ANR	101478	CFGEntryNode	ENTRY		101348		True				
ANR	101479	CFGExitNode	EXIT		101348		True				
ANR	101480	Symbol	ZEND_VERIFY_RETURN_TYPE		101348						
ANR	101481	Symbol	opline -> op2		101348						
ANR	101482	Symbol	expr -> u . op		101348						
ANR	101483	Symbol	return_info -> class_name		101348						
ANR	101484	Symbol	get_temporary_variable		101348						
ANR	101485	Symbol	* CG		101348						
ANR	101486	Symbol	opline -> result		101348						
ANR	101487	Symbol	opline		101348						
ANR	101488	Symbol	expr		101348						
ANR	101489	Symbol	return_info -> type_hint		101348						
ANR	101490	Symbol	IS_UNDEF		101348						
ANR	101491	Symbol	IS_TMP_VAR		101348						
ANR	101492	Symbol	opline -> result_type		101348						
ANR	101493	Symbol	opline -> op2 . num		101348						
ANR	101494	Symbol	IS_CONST		101348						
ANR	101495	Symbol	NULL		101348						
ANR	101496	Symbol	CG		101348						
ANR	101497	Symbol	expr -> op_type		101348						
ANR	101498	Symbol	active_op_array		101348						
ANR	101499	Symbol	* opline		101348						
ANR	101500	Symbol	* expr		101348						
ANR	101501	Symbol	expr -> u		101348						
ANR	101502	Symbol	CG ( active_op_array ) -> cache_size		101348						
ANR	101503	Symbol	return_info		101348						
ANR	101504	Symbol	expr -> u . op . var		101348						
ANR	101505	Symbol	opline -> result . var		101348						
ANR	101506	Symbol	* return_info		101348						
ANR	101507	Symbol	zend_emit_op		101348						
ANR	101508	Function	zend_emit_final_return	2030:0:58365:58916							
ANR	101509	FunctionDef	zend_emit_final_return (zval * zv)		101508	0					
ANR	101510	CompoundStatement		2031:0:58413:58916	101508	0					
ANR	101511	IdentifierDeclStatement	znode zn ;	2032:1:58416:58424	101508	0	True				
ANR	101512	IdentifierDecl	zn		101508	0					
ANR	101513	IdentifierDeclType	znode		101508	0					
ANR	101514	Identifier	zn		101508	1					
ANR	101515	IdentifierDeclStatement	zend_op * ret ;	2033:1:58427:58439	101508	1	True				
ANR	101516	IdentifierDecl	* ret		101508	0					
ANR	101517	IdentifierDeclType	zend_op *		101508	0					
ANR	101518	Identifier	ret		101508	1					
ANR	101519	IdentifierDeclStatement	zend_bool returns_reference = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0 ;	2034:1:58442:58536	101508	2	True				
ANR	101520	IdentifierDecl	returns_reference = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		101508	0					
ANR	101521	IdentifierDeclType	zend_bool		101508	0					
ANR	101522	Identifier	returns_reference		101508	1					
ANR	101523	AssignmentExpression	returns_reference = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		101508	2		=			
ANR	101524	Identifier	returns_reference		101508	0					
ANR	101525	EqualityExpression	( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		101508	1		!=			
ANR	101526	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE		101508	0		&			
ANR	101527	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		101508	0					
ANR	101528	CallExpression	CG ( active_op_array )		101508	0					
ANR	101529	Callee	CG		101508	0					
ANR	101530	Identifier	CG		101508	0					
ANR	101531	ArgumentList	active_op_array		101508	1					
ANR	101532	Argument	active_op_array		101508	0					
ANR	101533	Identifier	active_op_array		101508	0					
ANR	101534	Identifier	fn_flags		101508	1					
ANR	101535	Identifier	ZEND_ACC_RETURN_REFERENCE		101508	1					
ANR	101536	PrimaryExpression	0		101508	1					
ANR	101537	IfStatement	if ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE )		101508	3					
ANR	101538	Condition	CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE	2036:5:58544:58599	101508	0	True				
ANR	101539	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE		101508	0		&			
ANR	101540	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		101508	0					
ANR	101541	CallExpression	CG ( active_op_array )		101508	0					
ANR	101542	Callee	CG		101508	0					
ANR	101543	Identifier	CG		101508	0					
ANR	101544	ArgumentList	active_op_array		101508	1					
ANR	101545	Argument	active_op_array		101508	0					
ANR	101546	Identifier	active_op_array		101508	0					
ANR	101547	Identifier	fn_flags		101508	1					
ANR	101548	Identifier	ZEND_ACC_HAS_RETURN_TYPE		101508	1					
ANR	101549	CompoundStatement		6:63:188:188	101508	1					
ANR	101550	ExpressionStatement	"zend_emit_return_type_check ( NULL , CG ( active_op_array ) -> arg_info - 1 )"	2037:2:58606:58674	101508	0	True				
ANR	101551	CallExpression	"zend_emit_return_type_check ( NULL , CG ( active_op_array ) -> arg_info - 1 )"		101508	0					
ANR	101552	Callee	zend_emit_return_type_check		101508	0					
ANR	101553	Identifier	zend_emit_return_type_check		101508	0					
ANR	101554	ArgumentList	NULL		101508	1					
ANR	101555	Argument	NULL		101508	0					
ANR	101556	Identifier	NULL		101508	0					
ANR	101557	Argument	CG ( active_op_array ) -> arg_info - 1		101508	1					
ANR	101558	AdditiveExpression	CG ( active_op_array ) -> arg_info - 1		101508	0		-			
ANR	101559	PtrMemberAccess	CG ( active_op_array ) -> arg_info		101508	0					
ANR	101560	CallExpression	CG ( active_op_array )		101508	0					
ANR	101561	Callee	CG		101508	0					
ANR	101562	Identifier	CG		101508	0					
ANR	101563	ArgumentList	active_op_array		101508	1					
ANR	101564	Argument	active_op_array		101508	0					
ANR	101565	Identifier	active_op_array		101508	0					
ANR	101566	Identifier	arg_info		101508	1					
ANR	101567	PrimaryExpression	1		101508	1					
ANR	101568	ExpressionStatement	zn . op_type = IS_CONST	2040:1:58681:58702	101508	4	True				
ANR	101569	AssignmentExpression	zn . op_type = IS_CONST		101508	0		=			
ANR	101570	MemberAccess	zn . op_type		101508	0					
ANR	101571	Identifier	zn		101508	0					
ANR	101572	Identifier	op_type		101508	1					
ANR	101573	Identifier	IS_CONST		101508	1					
ANR	101574	IfStatement	if ( zv )		101508	5					
ANR	101575	Condition	zv	2041:5:58709:58710	101508	0	True				
ANR	101576	Identifier	zv		101508	0					
ANR	101577	CompoundStatement		11:9:299:299	101508	1					
ANR	101578	ExpressionStatement	"ZVAL_COPY_VALUE ( & zn . u . constant , zv )"	2042:2:58717:58752	101508	0	True				
ANR	101579	CallExpression	"ZVAL_COPY_VALUE ( & zn . u . constant , zv )"		101508	0					
ANR	101580	Callee	ZVAL_COPY_VALUE		101508	0					
ANR	101581	Identifier	ZVAL_COPY_VALUE		101508	0					
ANR	101582	ArgumentList	& zn . u . constant		101508	1					
ANR	101583	Argument	& zn . u . constant		101508	0					
ANR	101584	UnaryOperationExpression	& zn . u . constant		101508	0					
ANR	101585	UnaryOperator	&		101508	0					
ANR	101586	MemberAccess	zn . u . constant		101508	1					
ANR	101587	MemberAccess	zn . u		101508	0					
ANR	101588	Identifier	zn		101508	0					
ANR	101589	Identifier	u		101508	1					
ANR	101590	Identifier	constant		101508	1					
ANR	101591	Argument	zv		101508	1					
ANR	101592	Identifier	zv		101508	0					
ANR	101593	ElseStatement	else		101508	0					
ANR	101594	CompoundStatement		13:8:348:348	101508	0					
ANR	101595	ExpressionStatement	ZVAL_NULL ( & zn . u . constant )	2044:2:58766:58791	101508	0	True				
ANR	101596	CallExpression	ZVAL_NULL ( & zn . u . constant )		101508	0					
ANR	101597	Callee	ZVAL_NULL		101508	0					
ANR	101598	Identifier	ZVAL_NULL		101508	0					
ANR	101599	ArgumentList	& zn . u . constant		101508	1					
ANR	101600	Argument	& zn . u . constant		101508	0					
ANR	101601	UnaryOperationExpression	& zn . u . constant		101508	0					
ANR	101602	UnaryOperator	&		101508	0					
ANR	101603	MemberAccess	zn . u . constant		101508	1					
ANR	101604	MemberAccess	zn . u		101508	0					
ANR	101605	Identifier	zn		101508	0					
ANR	101606	Identifier	u		101508	1					
ANR	101607	Identifier	constant		101508	1					
ANR	101608	ExpressionStatement	"ret = zend_emit_op ( NULL , returns_reference ? ZEND_RETURN_BY_REF : ZEND_RETURN , & zn , NULL )"	2047:1:58798:58887	101508	6	True				
ANR	101609	AssignmentExpression	"ret = zend_emit_op ( NULL , returns_reference ? ZEND_RETURN_BY_REF : ZEND_RETURN , & zn , NULL )"		101508	0		=			
ANR	101610	Identifier	ret		101508	0					
ANR	101611	CallExpression	"zend_emit_op ( NULL , returns_reference ? ZEND_RETURN_BY_REF : ZEND_RETURN , & zn , NULL )"		101508	1					
ANR	101612	Callee	zend_emit_op		101508	0					
ANR	101613	Identifier	zend_emit_op		101508	0					
ANR	101614	ArgumentList	NULL		101508	1					
ANR	101615	Argument	NULL		101508	0					
ANR	101616	Identifier	NULL		101508	0					
ANR	101617	Argument	returns_reference ? ZEND_RETURN_BY_REF : ZEND_RETURN		101508	1					
ANR	101618	ConditionalExpression	returns_reference ? ZEND_RETURN_BY_REF : ZEND_RETURN		101508	0					
ANR	101619	Condition	returns_reference		101508	0					
ANR	101620	Identifier	returns_reference		101508	0					
ANR	101621	Identifier	ZEND_RETURN_BY_REF		101508	1					
ANR	101622	Identifier	ZEND_RETURN		101508	2					
ANR	101623	Argument	& zn		101508	2					
ANR	101624	UnaryOperationExpression	& zn		101508	0					
ANR	101625	UnaryOperator	&		101508	0					
ANR	101626	Identifier	zn		101508	1					
ANR	101627	Argument	NULL		101508	3					
ANR	101628	Identifier	NULL		101508	0					
ANR	101629	ExpressionStatement	ret -> extended_value = - 1	2048:1:58890:58914	101508	7	True				
ANR	101630	AssignmentExpression	ret -> extended_value = - 1		101508	0		=			
ANR	101631	PtrMemberAccess	ret -> extended_value		101508	0					
ANR	101632	Identifier	ret		101508	0					
ANR	101633	Identifier	extended_value		101508	1					
ANR	101634	UnaryOperationExpression	- 1		101508	1					
ANR	101635	UnaryOperator	-		101508	0					
ANR	101636	PrimaryExpression	1		101508	1					
ANR	101637	ReturnType	void		101508	1					
ANR	101638	Identifier	zend_emit_final_return		101508	2					
ANR	101639	ParameterList	zval * zv		101508	3					
ANR	101640	Parameter	zval * zv	2030:28:58393:58400	101508	0	True				
ANR	101641	ParameterType	zval *		101508	0					
ANR	101642	Identifier	zv		101508	1					
ANR	101643	CFGEntryNode	ENTRY		101508		True				
ANR	101644	CFGExitNode	EXIT		101508		True				
ANR	101645	Symbol	ret		101508						
ANR	101646	Symbol	IS_CONST		101508						
ANR	101647	Symbol	NULL		101508						
ANR	101648	Symbol	ZEND_RETURN		101508						
ANR	101649	Symbol	CG		101508						
ANR	101650	Symbol	active_op_array		101508						
ANR	101651	Symbol	ZEND_ACC_HAS_RETURN_TYPE		101508						
ANR	101652	Symbol	* CG		101508						
ANR	101653	Symbol	zn . op_type		101508						
ANR	101654	Symbol	* ret		101508						
ANR	101655	Symbol	returns_reference		101508						
ANR	101656	Symbol	CG ( active_op_array ) -> fn_flags		101508						
ANR	101657	Symbol	& zn . u		101508						
ANR	101658	Symbol	CG ( active_op_array ) -> arg_info		101508						
ANR	101659	Symbol	zn		101508						
ANR	101660	Symbol	ZEND_RETURN_BY_REF		101508						
ANR	101661	Symbol	ZEND_ACC_RETURN_REFERENCE		101508						
ANR	101662	Symbol	ret -> extended_value		101508						
ANR	101663	Symbol	& zn . u . constant		101508						
ANR	101664	Symbol	zn . u		101508						
ANR	101665	Symbol	zv		101508						
ANR	101666	Symbol	& zn		101508						
ANR	101667	Symbol	zend_emit_op		101508						
ANR	101668	Function	zend_is_variable	2052:0:58929:59238							
ANR	101669	FunctionDef	zend_is_variable (zend_ast * ast)		101668	0					
ANR	101670	CompoundStatement		2053:0:58995:59238	101668	0					
ANR	101671	ReturnStatement	return ast -> kind == ZEND_AST_VAR || ast -> kind == ZEND_AST_DIM || ast -> kind == ZEND_AST_PROP || ast -> kind == ZEND_AST_STATIC_PROP || ast -> kind == ZEND_AST_CALL || ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL ;	2054:1:58998:59236	101668	0	True				
ANR	101672	OrExpression	ast -> kind == ZEND_AST_VAR || ast -> kind == ZEND_AST_DIM || ast -> kind == ZEND_AST_PROP || ast -> kind == ZEND_AST_STATIC_PROP || ast -> kind == ZEND_AST_CALL || ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL		101668	0		||			
ANR	101673	EqualityExpression	ast -> kind == ZEND_AST_VAR		101668	0		==			
ANR	101674	PtrMemberAccess	ast -> kind		101668	0					
ANR	101675	Identifier	ast		101668	0					
ANR	101676	Identifier	kind		101668	1					
ANR	101677	Identifier	ZEND_AST_VAR		101668	1					
ANR	101678	OrExpression	ast -> kind == ZEND_AST_DIM || ast -> kind == ZEND_AST_PROP || ast -> kind == ZEND_AST_STATIC_PROP || ast -> kind == ZEND_AST_CALL || ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL		101668	1		||			
ANR	101679	EqualityExpression	ast -> kind == ZEND_AST_DIM		101668	0		==			
ANR	101680	PtrMemberAccess	ast -> kind		101668	0					
ANR	101681	Identifier	ast		101668	0					
ANR	101682	Identifier	kind		101668	1					
ANR	101683	Identifier	ZEND_AST_DIM		101668	1					
ANR	101684	OrExpression	ast -> kind == ZEND_AST_PROP || ast -> kind == ZEND_AST_STATIC_PROP || ast -> kind == ZEND_AST_CALL || ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL		101668	1		||			
ANR	101685	EqualityExpression	ast -> kind == ZEND_AST_PROP		101668	0		==			
ANR	101686	PtrMemberAccess	ast -> kind		101668	0					
ANR	101687	Identifier	ast		101668	0					
ANR	101688	Identifier	kind		101668	1					
ANR	101689	Identifier	ZEND_AST_PROP		101668	1					
ANR	101690	OrExpression	ast -> kind == ZEND_AST_STATIC_PROP || ast -> kind == ZEND_AST_CALL || ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL		101668	1		||			
ANR	101691	EqualityExpression	ast -> kind == ZEND_AST_STATIC_PROP		101668	0		==			
ANR	101692	PtrMemberAccess	ast -> kind		101668	0					
ANR	101693	Identifier	ast		101668	0					
ANR	101694	Identifier	kind		101668	1					
ANR	101695	Identifier	ZEND_AST_STATIC_PROP		101668	1					
ANR	101696	OrExpression	ast -> kind == ZEND_AST_CALL || ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL		101668	1		||			
ANR	101697	EqualityExpression	ast -> kind == ZEND_AST_CALL		101668	0		==			
ANR	101698	PtrMemberAccess	ast -> kind		101668	0					
ANR	101699	Identifier	ast		101668	0					
ANR	101700	Identifier	kind		101668	1					
ANR	101701	Identifier	ZEND_AST_CALL		101668	1					
ANR	101702	OrExpression	ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL		101668	1		||			
ANR	101703	EqualityExpression	ast -> kind == ZEND_AST_METHOD_CALL		101668	0		==			
ANR	101704	PtrMemberAccess	ast -> kind		101668	0					
ANR	101705	Identifier	ast		101668	0					
ANR	101706	Identifier	kind		101668	1					
ANR	101707	Identifier	ZEND_AST_METHOD_CALL		101668	1					
ANR	101708	EqualityExpression	ast -> kind == ZEND_AST_STATIC_CALL		101668	1		==			
ANR	101709	PtrMemberAccess	ast -> kind		101668	0					
ANR	101710	Identifier	ast		101668	0					
ANR	101711	Identifier	kind		101668	1					
ANR	101712	Identifier	ZEND_AST_STATIC_CALL		101668	1					
ANR	101713	ReturnType	static inline zend_bool		101668	1					
ANR	101714	Identifier	zend_is_variable		101668	2					
ANR	101715	ParameterList	zend_ast * ast		101668	3					
ANR	101716	Parameter	zend_ast * ast	2052:41:58970:58982	101668	0	True				
ANR	101717	ParameterType	zend_ast *		101668	0					
ANR	101718	Identifier	ast		101668	1					
ANR	101719	CFGEntryNode	ENTRY		101668		True				
ANR	101720	CFGExitNode	EXIT		101668		True				
ANR	101721	Symbol	ZEND_AST_STATIC_CALL		101668						
ANR	101722	Symbol	ast -> kind		101668						
ANR	101723	Symbol	ZEND_AST_STATIC_PROP		101668						
ANR	101724	Symbol	ast		101668						
ANR	101725	Symbol	ZEND_AST_CALL		101668						
ANR	101726	Symbol	* ast		101668						
ANR	101727	Symbol	ZEND_AST_DIM		101668						
ANR	101728	Symbol	ZEND_AST_VAR		101668						
ANR	101729	Symbol	ZEND_AST_METHOD_CALL		101668						
ANR	101730	Symbol	ZEND_AST_PROP		101668						
ANR	101731	Function	zend_is_call	2061:0:59251:59429							
ANR	101732	FunctionDef	zend_is_call (zend_ast * ast)		101731	0					
ANR	101733	CompoundStatement		2062:0:59313:59429	101731	0					
ANR	101734	ReturnStatement	return ast -> kind == ZEND_AST_CALL || ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL ;	2063:1:59316:59427	101731	0	True				
ANR	101735	OrExpression	ast -> kind == ZEND_AST_CALL || ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL		101731	0		||			
ANR	101736	EqualityExpression	ast -> kind == ZEND_AST_CALL		101731	0		==			
ANR	101737	PtrMemberAccess	ast -> kind		101731	0					
ANR	101738	Identifier	ast		101731	0					
ANR	101739	Identifier	kind		101731	1					
ANR	101740	Identifier	ZEND_AST_CALL		101731	1					
ANR	101741	OrExpression	ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL		101731	1		||			
ANR	101742	EqualityExpression	ast -> kind == ZEND_AST_METHOD_CALL		101731	0		==			
ANR	101743	PtrMemberAccess	ast -> kind		101731	0					
ANR	101744	Identifier	ast		101731	0					
ANR	101745	Identifier	kind		101731	1					
ANR	101746	Identifier	ZEND_AST_METHOD_CALL		101731	1					
ANR	101747	EqualityExpression	ast -> kind == ZEND_AST_STATIC_CALL		101731	1		==			
ANR	101748	PtrMemberAccess	ast -> kind		101731	0					
ANR	101749	Identifier	ast		101731	0					
ANR	101750	Identifier	kind		101731	1					
ANR	101751	Identifier	ZEND_AST_STATIC_CALL		101731	1					
ANR	101752	ReturnType	static inline zend_bool		101731	1					
ANR	101753	Identifier	zend_is_call		101731	2					
ANR	101754	ParameterList	zend_ast * ast		101731	3					
ANR	101755	Parameter	zend_ast * ast	2061:37:59288:59300	101731	0	True				
ANR	101756	ParameterType	zend_ast *		101731	0					
ANR	101757	Identifier	ast		101731	1					
ANR	101758	CFGEntryNode	ENTRY		101731		True				
ANR	101759	CFGExitNode	EXIT		101731		True				
ANR	101760	Symbol	ZEND_AST_STATIC_CALL		101731						
ANR	101761	Symbol	ast -> kind		101731						
ANR	101762	Symbol	ast		101731						
ANR	101763	Symbol	* ast		101731						
ANR	101764	Symbol	ZEND_AST_CALL		101731						
ANR	101765	Symbol	ZEND_AST_METHOD_CALL		101731						
ANR	101766	Function	zend_is_unticked_stmt	2069:0:59442:59735							
ANR	101767	FunctionDef	zend_is_unticked_stmt (zend_ast * ast)		101766	0					
ANR	101768	CompoundStatement		2070:0:59513:59735	101766	0					
ANR	101769	ReturnStatement	return ast -> kind == ZEND_AST_STMT_LIST || ast -> kind == ZEND_AST_LABEL || ast -> kind == ZEND_AST_PROP_DECL || ast -> kind == ZEND_AST_CLASS_CONST_DECL || ast -> kind == ZEND_AST_USE_TRAIT || ast -> kind == ZEND_AST_METHOD ;	2071:1:59516:59733	101766	0	True				
ANR	101770	OrExpression	ast -> kind == ZEND_AST_STMT_LIST || ast -> kind == ZEND_AST_LABEL || ast -> kind == ZEND_AST_PROP_DECL || ast -> kind == ZEND_AST_CLASS_CONST_DECL || ast -> kind == ZEND_AST_USE_TRAIT || ast -> kind == ZEND_AST_METHOD		101766	0		||			
ANR	101771	EqualityExpression	ast -> kind == ZEND_AST_STMT_LIST		101766	0		==			
ANR	101772	PtrMemberAccess	ast -> kind		101766	0					
ANR	101773	Identifier	ast		101766	0					
ANR	101774	Identifier	kind		101766	1					
ANR	101775	Identifier	ZEND_AST_STMT_LIST		101766	1					
ANR	101776	OrExpression	ast -> kind == ZEND_AST_LABEL || ast -> kind == ZEND_AST_PROP_DECL || ast -> kind == ZEND_AST_CLASS_CONST_DECL || ast -> kind == ZEND_AST_USE_TRAIT || ast -> kind == ZEND_AST_METHOD		101766	1		||			
ANR	101777	EqualityExpression	ast -> kind == ZEND_AST_LABEL		101766	0		==			
ANR	101778	PtrMemberAccess	ast -> kind		101766	0					
ANR	101779	Identifier	ast		101766	0					
ANR	101780	Identifier	kind		101766	1					
ANR	101781	Identifier	ZEND_AST_LABEL		101766	1					
ANR	101782	OrExpression	ast -> kind == ZEND_AST_PROP_DECL || ast -> kind == ZEND_AST_CLASS_CONST_DECL || ast -> kind == ZEND_AST_USE_TRAIT || ast -> kind == ZEND_AST_METHOD		101766	1		||			
ANR	101783	EqualityExpression	ast -> kind == ZEND_AST_PROP_DECL		101766	0		==			
ANR	101784	PtrMemberAccess	ast -> kind		101766	0					
ANR	101785	Identifier	ast		101766	0					
ANR	101786	Identifier	kind		101766	1					
ANR	101787	Identifier	ZEND_AST_PROP_DECL		101766	1					
ANR	101788	OrExpression	ast -> kind == ZEND_AST_CLASS_CONST_DECL || ast -> kind == ZEND_AST_USE_TRAIT || ast -> kind == ZEND_AST_METHOD		101766	1		||			
ANR	101789	EqualityExpression	ast -> kind == ZEND_AST_CLASS_CONST_DECL		101766	0		==			
ANR	101790	PtrMemberAccess	ast -> kind		101766	0					
ANR	101791	Identifier	ast		101766	0					
ANR	101792	Identifier	kind		101766	1					
ANR	101793	Identifier	ZEND_AST_CLASS_CONST_DECL		101766	1					
ANR	101794	OrExpression	ast -> kind == ZEND_AST_USE_TRAIT || ast -> kind == ZEND_AST_METHOD		101766	1		||			
ANR	101795	EqualityExpression	ast -> kind == ZEND_AST_USE_TRAIT		101766	0		==			
ANR	101796	PtrMemberAccess	ast -> kind		101766	0					
ANR	101797	Identifier	ast		101766	0					
ANR	101798	Identifier	kind		101766	1					
ANR	101799	Identifier	ZEND_AST_USE_TRAIT		101766	1					
ANR	101800	EqualityExpression	ast -> kind == ZEND_AST_METHOD		101766	1		==			
ANR	101801	PtrMemberAccess	ast -> kind		101766	0					
ANR	101802	Identifier	ast		101766	0					
ANR	101803	Identifier	kind		101766	1					
ANR	101804	Identifier	ZEND_AST_METHOD		101766	1					
ANR	101805	ReturnType	static inline zend_bool		101766	1					
ANR	101806	Identifier	zend_is_unticked_stmt		101766	2					
ANR	101807	ParameterList	zend_ast * ast		101766	3					
ANR	101808	Parameter	zend_ast * ast	2069:46:59488:59500	101766	0	True				
ANR	101809	ParameterType	zend_ast *		101766	0					
ANR	101810	Identifier	ast		101766	1					
ANR	101811	CFGEntryNode	ENTRY		101766		True				
ANR	101812	CFGExitNode	EXIT		101766		True				
ANR	101813	Symbol	ZEND_AST_STMT_LIST		101766						
ANR	101814	Symbol	ast -> kind		101766						
ANR	101815	Symbol	ast		101766						
ANR	101816	Symbol	* ast		101766						
ANR	101817	Symbol	ZEND_AST_USE_TRAIT		101766						
ANR	101818	Symbol	ZEND_AST_LABEL		101766						
ANR	101819	Symbol	ZEND_AST_METHOD		101766						
ANR	101820	Symbol	ZEND_AST_PROP_DECL		101766						
ANR	101821	Symbol	ZEND_AST_CLASS_CONST_DECL		101766						
ANR	101822	Function	zend_can_write_to_variable	2077:0:59748:59951							
ANR	101823	FunctionDef	zend_can_write_to_variable (zend_ast * ast)		101822	0					
ANR	101824	CompoundStatement		2078:0:59824:59951	101822	0					
ANR	101825	WhileStatement	while ( ast -> kind == ZEND_AST_DIM || ast -> kind == ZEND_AST_PROP )		101822	0					
ANR	101826	Condition	ast -> kind == ZEND_AST_DIM || ast -> kind == ZEND_AST_PROP	2079:8:59834:59888	101822	0	True				
ANR	101827	OrExpression	ast -> kind == ZEND_AST_DIM || ast -> kind == ZEND_AST_PROP		101822	0		||			
ANR	101828	EqualityExpression	ast -> kind == ZEND_AST_DIM		101822	0		==			
ANR	101829	PtrMemberAccess	ast -> kind		101822	0					
ANR	101830	Identifier	ast		101822	0					
ANR	101831	Identifier	kind		101822	1					
ANR	101832	Identifier	ZEND_AST_DIM		101822	1					
ANR	101833	EqualityExpression	ast -> kind == ZEND_AST_PROP		101822	1		==			
ANR	101834	PtrMemberAccess	ast -> kind		101822	0					
ANR	101835	Identifier	ast		101822	0					
ANR	101836	Identifier	kind		101822	1					
ANR	101837	Identifier	ZEND_AST_PROP		101822	1					
ANR	101838	CompoundStatement		2:65:66:66	101822	1					
ANR	101839	ExpressionStatement	ast = ast -> child [ 0 ]	2080:2:59895:59914	101822	0	True				
ANR	101840	AssignmentExpression	ast = ast -> child [ 0 ]		101822	0		=			
ANR	101841	Identifier	ast		101822	0					
ANR	101842	ArrayIndexing	ast -> child [ 0 ]		101822	1					
ANR	101843	PtrMemberAccess	ast -> child		101822	0					
ANR	101844	Identifier	ast		101822	0					
ANR	101845	Identifier	child		101822	1					
ANR	101846	PrimaryExpression	0		101822	1					
ANR	101847	ReturnStatement	return zend_is_variable ( ast ) ;	2083:1:59921:59949	101822	1	True				
ANR	101848	CallExpression	zend_is_variable ( ast )		101822	0					
ANR	101849	Callee	zend_is_variable		101822	0					
ANR	101850	Identifier	zend_is_variable		101822	0					
ANR	101851	ArgumentList	ast		101822	1					
ANR	101852	Argument	ast		101822	0					
ANR	101853	Identifier	ast		101822	0					
ANR	101854	ReturnType	static inline zend_bool		101822	1					
ANR	101855	Identifier	zend_can_write_to_variable		101822	2					
ANR	101856	ParameterList	zend_ast * ast		101822	3					
ANR	101857	Parameter	zend_ast * ast	2077:51:59799:59811	101822	0	True				
ANR	101858	ParameterType	zend_ast *		101822	0					
ANR	101859	Identifier	ast		101822	1					
ANR	101860	CFGEntryNode	ENTRY		101822		True				
ANR	101861	CFGExitNode	EXIT		101822		True				
ANR	101862	Symbol	ast -> kind		101822						
ANR	101863	Symbol	zend_is_variable		101822						
ANR	101864	Symbol	ast		101822						
ANR	101865	Symbol	* ast		101822						
ANR	101866	Symbol	ZEND_AST_DIM		101822						
ANR	101867	Symbol	* * ast		101822						
ANR	101868	Symbol	* ast -> child		101822						
ANR	101869	Symbol	ast -> child		101822						
ANR	101870	Symbol	ZEND_AST_PROP		101822						
ANR	101871	Function	zend_is_const_default_class_ref	2087:0:59964:60185							
ANR	101872	FunctionDef	zend_is_const_default_class_ref (zend_ast * name_ast)		101871	0					
ANR	101873	CompoundStatement		2088:0:60050:60185	101871	0					
ANR	101874	IfStatement	if ( name_ast -> kind != ZEND_AST_ZVAL )		101871	0					
ANR	101875	Condition	name_ast -> kind != ZEND_AST_ZVAL	2089:5:60057:60087	101871	0	True				
ANR	101876	EqualityExpression	name_ast -> kind != ZEND_AST_ZVAL		101871	0		!=			
ANR	101877	PtrMemberAccess	name_ast -> kind		101871	0					
ANR	101878	Identifier	name_ast		101871	0					
ANR	101879	Identifier	kind		101871	1					
ANR	101880	Identifier	ZEND_AST_ZVAL		101871	1					
ANR	101881	CompoundStatement		2:38:39:39	101871	1					
ANR	101882	ReturnStatement	return 0 ;	2090:2:60094:60102	101871	0	True				
ANR	101883	PrimaryExpression	0		101871	0					
ANR	101884	ReturnStatement	return ZEND_FETCH_CLASS_DEFAULT == zend_get_class_fetch_type_ast ( name_ast ) ;	2093:1:60109:60183	101871	1	True				
ANR	101885	EqualityExpression	ZEND_FETCH_CLASS_DEFAULT == zend_get_class_fetch_type_ast ( name_ast )		101871	0		==			
ANR	101886	Identifier	ZEND_FETCH_CLASS_DEFAULT		101871	0					
ANR	101887	CallExpression	zend_get_class_fetch_type_ast ( name_ast )		101871	1					
ANR	101888	Callee	zend_get_class_fetch_type_ast		101871	0					
ANR	101889	Identifier	zend_get_class_fetch_type_ast		101871	0					
ANR	101890	ArgumentList	name_ast		101871	1					
ANR	101891	Argument	name_ast		101871	0					
ANR	101892	Identifier	name_ast		101871	0					
ANR	101893	ReturnType	static inline zend_bool		101871	1					
ANR	101894	Identifier	zend_is_const_default_class_ref		101871	2					
ANR	101895	ParameterList	zend_ast * name_ast		101871	3					
ANR	101896	Parameter	zend_ast * name_ast	2087:56:60020:60037	101871	0	True				
ANR	101897	ParameterType	zend_ast *		101871	0					
ANR	101898	Identifier	name_ast		101871	1					
ANR	101899	CFGEntryNode	ENTRY		101871		True				
ANR	101900	CFGExitNode	EXIT		101871		True				
ANR	101901	Symbol	* name_ast		101871						
ANR	101902	Symbol	ZEND_FETCH_CLASS_DEFAULT		101871						
ANR	101903	Symbol	name_ast -> kind		101871						
ANR	101904	Symbol	name_ast		101871						
ANR	101905	Symbol	ZEND_AST_ZVAL		101871						
ANR	101906	Symbol	zend_get_class_fetch_type_ast		101871						
ANR	101907	Function	zend_handle_numeric_op	2097:0:60198:60506							
ANR	101908	FunctionDef	zend_handle_numeric_op (znode * node)		101907	0					
ANR	101909	CompoundStatement		2098:0:60263:60506	101907	0					
ANR	101910	IfStatement	if ( node -> op_type == IS_CONST && Z_TYPE ( node -> u . constant ) == IS_STRING )		101907	0					
ANR	101911	Condition	node -> op_type == IS_CONST && Z_TYPE ( node -> u . constant ) == IS_STRING	2099:5:60270:60335	101907	0	True				
ANR	101912	AndExpression	node -> op_type == IS_CONST && Z_TYPE ( node -> u . constant ) == IS_STRING		101907	0		&&			
ANR	101913	EqualityExpression	node -> op_type == IS_CONST		101907	0		==			
ANR	101914	PtrMemberAccess	node -> op_type		101907	0					
ANR	101915	Identifier	node		101907	0					
ANR	101916	Identifier	op_type		101907	1					
ANR	101917	Identifier	IS_CONST		101907	1					
ANR	101918	EqualityExpression	Z_TYPE ( node -> u . constant ) == IS_STRING		101907	1		==			
ANR	101919	CallExpression	Z_TYPE ( node -> u . constant )		101907	0					
ANR	101920	Callee	Z_TYPE		101907	0					
ANR	101921	Identifier	Z_TYPE		101907	0					
ANR	101922	ArgumentList	node -> u . constant		101907	1					
ANR	101923	Argument	node -> u . constant		101907	0					
ANR	101924	MemberAccess	node -> u . constant		101907	0					
ANR	101925	PtrMemberAccess	node -> u		101907	0					
ANR	101926	Identifier	node		101907	0					
ANR	101927	Identifier	u		101907	1					
ANR	101928	Identifier	constant		101907	1					
ANR	101929	Identifier	IS_STRING		101907	1					
ANR	101930	CompoundStatement		3:2:78:94	101907	1					
ANR	101931	IdentifierDeclStatement	zend_ulong index ;	2100:2:60342:60358	101907	0	True				
ANR	101932	IdentifierDecl	index		101907	0					
ANR	101933	IdentifierDeclType	zend_ulong		101907	0					
ANR	101934	Identifier	index		101907	1					
ANR	101935	IfStatement	"if ( ZEND_HANDLE_NUMERIC ( Z_STR ( node -> u . constant ) , index ) )"		101907	1					
ANR	101936	Condition	"ZEND_HANDLE_NUMERIC ( Z_STR ( node -> u . constant ) , index )"	2102:6:60367:60417	101907	0	True				
ANR	101937	CallExpression	"ZEND_HANDLE_NUMERIC ( Z_STR ( node -> u . constant ) , index )"		101907	0					
ANR	101938	Callee	ZEND_HANDLE_NUMERIC		101907	0					
ANR	101939	Identifier	ZEND_HANDLE_NUMERIC		101907	0					
ANR	101940	ArgumentList	Z_STR ( node -> u . constant )		101907	1					
ANR	101941	Argument	Z_STR ( node -> u . constant )		101907	0					
ANR	101942	CallExpression	Z_STR ( node -> u . constant )		101907	0					
ANR	101943	Callee	Z_STR		101907	0					
ANR	101944	Identifier	Z_STR		101907	0					
ANR	101945	ArgumentList	node -> u . constant		101907	1					
ANR	101946	Argument	node -> u . constant		101907	0					
ANR	101947	MemberAccess	node -> u . constant		101907	0					
ANR	101948	PtrMemberAccess	node -> u		101907	0					
ANR	101949	Identifier	node		101907	0					
ANR	101950	Identifier	u		101907	1					
ANR	101951	Identifier	constant		101907	1					
ANR	101952	Argument	index		101907	1					
ANR	101953	Identifier	index		101907	0					
ANR	101954	CompoundStatement		5:59:156:156	101907	1					
ANR	101955	ExpressionStatement	zval_ptr_dtor ( & node -> u . constant )	2103:3:60425:60457	101907	0	True				
ANR	101956	CallExpression	zval_ptr_dtor ( & node -> u . constant )		101907	0					
ANR	101957	Callee	zval_ptr_dtor		101907	0					
ANR	101958	Identifier	zval_ptr_dtor		101907	0					
ANR	101959	ArgumentList	& node -> u . constant		101907	1					
ANR	101960	Argument	& node -> u . constant		101907	0					
ANR	101961	UnaryOperationExpression	& node -> u . constant		101907	0					
ANR	101962	UnaryOperator	&		101907	0					
ANR	101963	MemberAccess	node -> u . constant		101907	1					
ANR	101964	PtrMemberAccess	node -> u		101907	0					
ANR	101965	Identifier	node		101907	0					
ANR	101966	Identifier	u		101907	1					
ANR	101967	Identifier	constant		101907	1					
ANR	101968	ExpressionStatement	"ZVAL_LONG ( & node -> u . constant , index )"	2104:3:60462:60497	101907	1	True				
ANR	101969	CallExpression	"ZVAL_LONG ( & node -> u . constant , index )"		101907	0					
ANR	101970	Callee	ZVAL_LONG		101907	0					
ANR	101971	Identifier	ZVAL_LONG		101907	0					
ANR	101972	ArgumentList	& node -> u . constant		101907	1					
ANR	101973	Argument	& node -> u . constant		101907	0					
ANR	101974	UnaryOperationExpression	& node -> u . constant		101907	0					
ANR	101975	UnaryOperator	&		101907	0					
ANR	101976	MemberAccess	node -> u . constant		101907	1					
ANR	101977	PtrMemberAccess	node -> u		101907	0					
ANR	101978	Identifier	node		101907	0					
ANR	101979	Identifier	u		101907	1					
ANR	101980	Identifier	constant		101907	1					
ANR	101981	Argument	index		101907	1					
ANR	101982	Identifier	index		101907	0					
ANR	101983	ReturnType	static inline void		101907	1					
ANR	101984	Identifier	zend_handle_numeric_op		101907	2					
ANR	101985	ParameterList	znode * node		101907	3					
ANR	101986	Parameter	znode * node	2097:42:60240:60250	101907	0	True				
ANR	101987	ParameterType	znode *		101907	0					
ANR	101988	Identifier	node		101907	1					
ANR	101989	CFGEntryNode	ENTRY		101907		True				
ANR	101990	CFGExitNode	EXIT		101907		True				
ANR	101991	Symbol	& node -> u		101907						
ANR	101992	Symbol	IS_CONST		101907						
ANR	101993	Symbol	Z_TYPE		101907						
ANR	101994	Symbol	index		101907						
ANR	101995	Symbol	Z_STR		101907						
ANR	101996	Symbol	node -> u . constant		101907						
ANR	101997	Symbol	node -> u		101907						
ANR	101998	Symbol	node		101907						
ANR	101999	Symbol	node -> op_type		101907						
ANR	102000	Symbol	* node		101907						
ANR	102001	Symbol	IS_STRING		101907						
ANR	102002	Symbol	& node -> u . constant		101907						
ANR	102003	Symbol	ZEND_HANDLE_NUMERIC		101907						
ANR	102004	Function	zend_set_class_name_op1	2110:0:60519:60841							
ANR	102005	FunctionDef	"zend_set_class_name_op1 (zend_op * opline , znode * class_node)"		102004	0					
ANR	102006	CompoundStatement		2111:0:60608:60841	102004	0					
ANR	102007	IfStatement	if ( class_node -> op_type == IS_CONST )		102004	0					
ANR	102008	Condition	class_node -> op_type == IS_CONST	2112:5:60615:60645	102004	0	True				
ANR	102009	EqualityExpression	class_node -> op_type == IS_CONST		102004	0		==			
ANR	102010	PtrMemberAccess	class_node -> op_type		102004	0					
ANR	102011	Identifier	class_node		102004	0					
ANR	102012	Identifier	op_type		102004	1					
ANR	102013	Identifier	IS_CONST		102004	1					
ANR	102014	CompoundStatement		2:38:39:39	102004	1					
ANR	102015	ExpressionStatement	opline -> op1_type = IS_CONST	2113:2:60652:60679	102004	0	True				
ANR	102016	AssignmentExpression	opline -> op1_type = IS_CONST		102004	0		=			
ANR	102017	PtrMemberAccess	opline -> op1_type		102004	0					
ANR	102018	Identifier	opline		102004	0					
ANR	102019	Identifier	op1_type		102004	1					
ANR	102020	Identifier	IS_CONST		102004	1					
ANR	102021	ExpressionStatement	"opline -> op1 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node -> u . constant ) )"	2114:2:60683:60789	102004	1	True				
ANR	102022	AssignmentExpression	"opline -> op1 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node -> u . constant ) )"		102004	0		=			
ANR	102023	MemberAccess	opline -> op1 . constant		102004	0					
ANR	102024	PtrMemberAccess	opline -> op1		102004	0					
ANR	102025	Identifier	opline		102004	0					
ANR	102026	Identifier	op1		102004	1					
ANR	102027	Identifier	constant		102004	1					
ANR	102028	CallExpression	"zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node -> u . constant ) )"		102004	1					
ANR	102029	Callee	zend_add_class_name_literal		102004	0					
ANR	102030	Identifier	zend_add_class_name_literal		102004	0					
ANR	102031	ArgumentList	CG ( active_op_array )		102004	1					
ANR	102032	Argument	CG ( active_op_array )		102004	0					
ANR	102033	CallExpression	CG ( active_op_array )		102004	0					
ANR	102034	Callee	CG		102004	0					
ANR	102035	Identifier	CG		102004	0					
ANR	102036	ArgumentList	active_op_array		102004	1					
ANR	102037	Argument	active_op_array		102004	0					
ANR	102038	Identifier	active_op_array		102004	0					
ANR	102039	Argument	Z_STR ( class_node -> u . constant )		102004	1					
ANR	102040	CallExpression	Z_STR ( class_node -> u . constant )		102004	0					
ANR	102041	Callee	Z_STR		102004	0					
ANR	102042	Identifier	Z_STR		102004	0					
ANR	102043	ArgumentList	class_node -> u . constant		102004	1					
ANR	102044	Argument	class_node -> u . constant		102004	0					
ANR	102045	MemberAccess	class_node -> u . constant		102004	0					
ANR	102046	PtrMemberAccess	class_node -> u		102004	0					
ANR	102047	Identifier	class_node		102004	0					
ANR	102048	Identifier	u		102004	1					
ANR	102049	Identifier	constant		102004	1					
ANR	102050	ElseStatement	else		102004	0					
ANR	102051	CompoundStatement		6:8:190:190	102004	0					
ANR	102052	ExpressionStatement	"SET_NODE ( opline -> op1 , class_node )"	2117:2:60803:60836	102004	0	True				
ANR	102053	CallExpression	"SET_NODE ( opline -> op1 , class_node )"		102004	0					
ANR	102054	Callee	SET_NODE		102004	0					
ANR	102055	Identifier	SET_NODE		102004	0					
ANR	102056	ArgumentList	opline -> op1		102004	1					
ANR	102057	Argument	opline -> op1		102004	0					
ANR	102058	PtrMemberAccess	opline -> op1		102004	0					
ANR	102059	Identifier	opline		102004	0					
ANR	102060	Identifier	op1		102004	1					
ANR	102061	Argument	class_node		102004	1					
ANR	102062	Identifier	class_node		102004	0					
ANR	102063	ReturnType	static inline void		102004	1					
ANR	102064	Identifier	zend_set_class_name_op1		102004	2					
ANR	102065	ParameterList	"zend_op * opline , znode * class_node"		102004	3					
ANR	102066	Parameter	zend_op * opline	2110:43:60562:60576	102004	0	True				
ANR	102067	ParameterType	zend_op *		102004	0					
ANR	102068	Identifier	opline		102004	1					
ANR	102069	Parameter	znode * class_node	2110:60:60579:60595	102004	1	True				
ANR	102070	ParameterType	znode *		102004	0					
ANR	102071	Identifier	class_node		102004	1					
ANR	102072	CFGEntryNode	ENTRY		102004		True				
ANR	102073	CFGExitNode	EXIT		102004		True				
ANR	102074	Symbol	opline -> op1		102004						
ANR	102075	Symbol	zend_add_class_name_literal		102004						
ANR	102076	Symbol	IS_CONST		102004						
ANR	102077	Symbol	CG		102004						
ANR	102078	Symbol	class_node		102004						
ANR	102079	Symbol	active_op_array		102004						
ANR	102080	Symbol	class_node -> op_type		102004						
ANR	102081	Symbol	Z_STR		102004						
ANR	102082	Symbol	opline -> op1_type		102004						
ANR	102083	Symbol	opline		102004						
ANR	102084	Symbol	* class_node		102004						
ANR	102085	Symbol	* opline		102004						
ANR	102086	Symbol	opline -> op1 . constant		102004						
ANR	102087	Symbol	class_node -> u . constant		102004						
ANR	102088	Symbol	class_node -> u		102004						
ANR	102089	Function	zend_compile_class_ref	2122:0:60854:62067							
ANR	102090	FunctionDef	"zend_compile_class_ref (znode * result , zend_ast * name_ast , int throw_exception)"		102089	0					
ANR	102091	CompoundStatement		2123:0:60959:62067	102089	0					
ANR	102092	IdentifierDeclStatement	zend_op * opline ;	2124:1:60962:60977	102089	0	True				
ANR	102093	IdentifierDecl	* opline		102089	0					
ANR	102094	IdentifierDeclType	zend_op *		102089	0					
ANR	102095	Identifier	opline		102089	1					
ANR	102096	IdentifierDeclStatement	znode name_node ;	2125:1:60980:60995	102089	1	True				
ANR	102097	IdentifierDecl	name_node		102089	0					
ANR	102098	IdentifierDeclType	znode		102089	0					
ANR	102099	Identifier	name_node		102089	1					
ANR	102100	ExpressionStatement	"zend_compile_expr ( & name_node , name_ast )"	2126:1:60998:61037	102089	2	True				
ANR	102101	CallExpression	"zend_compile_expr ( & name_node , name_ast )"		102089	0					
ANR	102102	Callee	zend_compile_expr		102089	0					
ANR	102103	Identifier	zend_compile_expr		102089	0					
ANR	102104	ArgumentList	& name_node		102089	1					
ANR	102105	Argument	& name_node		102089	0					
ANR	102106	UnaryOperationExpression	& name_node		102089	0					
ANR	102107	UnaryOperator	&		102089	0					
ANR	102108	Identifier	name_node		102089	1					
ANR	102109	Argument	name_ast		102089	1					
ANR	102110	Identifier	name_ast		102089	0					
ANR	102111	IfStatement	if ( name_node . op_type == IS_CONST )		102089	3					
ANR	102112	Condition	name_node . op_type == IS_CONST	2128:5:61045:61073	102089	0	True				
ANR	102113	EqualityExpression	name_node . op_type == IS_CONST		102089	0		==			
ANR	102114	MemberAccess	name_node . op_type		102089	0					
ANR	102115	Identifier	name_node		102089	0					
ANR	102116	Identifier	op_type		102089	1					
ANR	102117	Identifier	IS_CONST		102089	1					
ANR	102118	CompoundStatement		8:2:141:160	102089	1					
ANR	102119	IdentifierDeclStatement	zend_string * name ;	2129:2:61080:61097	102089	0	True				
ANR	102120	IdentifierDecl	* name		102089	0					
ANR	102121	IdentifierDeclType	zend_string *		102089	0					
ANR	102122	Identifier	name		102089	1					
ANR	102123	IdentifierDeclStatement	uint32_t fetch_type ;	2130:2:61101:61120	102089	1	True				
ANR	102124	IdentifierDecl	fetch_type		102089	0					
ANR	102125	IdentifierDeclType	uint32_t		102089	0					
ANR	102126	Identifier	fetch_type		102089	1					
ANR	102127	IfStatement	if ( Z_TYPE ( name_node . u . constant ) != IS_STRING )		102089	2					
ANR	102128	Condition	Z_TYPE ( name_node . u . constant ) != IS_STRING	2132:6:61129:61169	102089	0	True				
ANR	102129	EqualityExpression	Z_TYPE ( name_node . u . constant ) != IS_STRING		102089	0		!=			
ANR	102130	CallExpression	Z_TYPE ( name_node . u . constant )		102089	0					
ANR	102131	Callee	Z_TYPE		102089	0					
ANR	102132	Identifier	Z_TYPE		102089	0					
ANR	102133	ArgumentList	name_node . u . constant		102089	1					
ANR	102134	Argument	name_node . u . constant		102089	0					
ANR	102135	MemberAccess	name_node . u . constant		102089	0					
ANR	102136	MemberAccess	name_node . u		102089	0					
ANR	102137	Identifier	name_node		102089	0					
ANR	102138	Identifier	u		102089	1					
ANR	102139	Identifier	constant		102089	1					
ANR	102140	Identifier	IS_STRING		102089	1					
ANR	102141	CompoundStatement		10:49:212:212	102089	1					
ANR	102142	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Illegal class name"" )"	2133:3:61177:61235	102089	0	True				
ANR	102143	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Illegal class name"" )"		102089	0					
ANR	102144	Callee	zend_error_noreturn		102089	0					
ANR	102145	Identifier	zend_error_noreturn		102089	0					
ANR	102146	ArgumentList	E_COMPILE_ERROR		102089	1					
ANR	102147	Argument	E_COMPILE_ERROR		102089	0					
ANR	102148	Identifier	E_COMPILE_ERROR		102089	0					
ANR	102149	Argument	"""Illegal class name"""		102089	1					
ANR	102150	PrimaryExpression	"""Illegal class name"""		102089	0					
ANR	102151	ExpressionStatement	name = Z_STR ( name_node . u . constant )	2136:2:61244:61278	102089	3	True				
ANR	102152	AssignmentExpression	name = Z_STR ( name_node . u . constant )		102089	0		=			
ANR	102153	Identifier	name		102089	0					
ANR	102154	CallExpression	Z_STR ( name_node . u . constant )		102089	1					
ANR	102155	Callee	Z_STR		102089	0					
ANR	102156	Identifier	Z_STR		102089	0					
ANR	102157	ArgumentList	name_node . u . constant		102089	1					
ANR	102158	Argument	name_node . u . constant		102089	0					
ANR	102159	MemberAccess	name_node . u . constant		102089	0					
ANR	102160	MemberAccess	name_node . u		102089	0					
ANR	102161	Identifier	name_node		102089	0					
ANR	102162	Identifier	u		102089	1					
ANR	102163	Identifier	constant		102089	1					
ANR	102164	ExpressionStatement	fetch_type = zend_get_class_fetch_type ( name )	2137:2:61282:61326	102089	4	True				
ANR	102165	AssignmentExpression	fetch_type = zend_get_class_fetch_type ( name )		102089	0		=			
ANR	102166	Identifier	fetch_type		102089	0					
ANR	102167	CallExpression	zend_get_class_fetch_type ( name )		102089	1					
ANR	102168	Callee	zend_get_class_fetch_type		102089	0					
ANR	102169	Identifier	zend_get_class_fetch_type		102089	0					
ANR	102170	ArgumentList	name		102089	1					
ANR	102171	Argument	name		102089	0					
ANR	102172	Identifier	name		102089	0					
ANR	102173	ExpressionStatement	"opline = zend_emit_op ( result , ZEND_FETCH_CLASS , NULL , NULL )"	2139:2:61331:61390	102089	5	True				
ANR	102174	AssignmentExpression	"opline = zend_emit_op ( result , ZEND_FETCH_CLASS , NULL , NULL )"		102089	0		=			
ANR	102175	Identifier	opline		102089	0					
ANR	102176	CallExpression	"zend_emit_op ( result , ZEND_FETCH_CLASS , NULL , NULL )"		102089	1					
ANR	102177	Callee	zend_emit_op		102089	0					
ANR	102178	Identifier	zend_emit_op		102089	0					
ANR	102179	ArgumentList	result		102089	1					
ANR	102180	Argument	result		102089	0					
ANR	102181	Identifier	result		102089	0					
ANR	102182	Argument	ZEND_FETCH_CLASS		102089	1					
ANR	102183	Identifier	ZEND_FETCH_CLASS		102089	0					
ANR	102184	Argument	NULL		102089	2					
ANR	102185	Identifier	NULL		102089	0					
ANR	102186	Argument	NULL		102089	3					
ANR	102187	Identifier	NULL		102089	0					
ANR	102188	ExpressionStatement	opline -> extended_value = fetch_type | ( throw_exception ? ZEND_FETCH_CLASS_EXCEPTION : 0 )	2140:2:61394:61482	102089	6	True				
ANR	102189	AssignmentExpression	opline -> extended_value = fetch_type | ( throw_exception ? ZEND_FETCH_CLASS_EXCEPTION : 0 )		102089	0		=			
ANR	102190	PtrMemberAccess	opline -> extended_value		102089	0					
ANR	102191	Identifier	opline		102089	0					
ANR	102192	Identifier	extended_value		102089	1					
ANR	102193	InclusiveOrExpression	fetch_type | ( throw_exception ? ZEND_FETCH_CLASS_EXCEPTION : 0 )		102089	1		|			
ANR	102194	Identifier	fetch_type		102089	0					
ANR	102195	ConditionalExpression	throw_exception ? ZEND_FETCH_CLASS_EXCEPTION : 0		102089	1					
ANR	102196	Condition	throw_exception		102089	0					
ANR	102197	Identifier	throw_exception		102089	0					
ANR	102198	Identifier	ZEND_FETCH_CLASS_EXCEPTION		102089	1					
ANR	102199	PrimaryExpression	0		102089	2					
ANR	102200	IfStatement	if ( fetch_type == ZEND_FETCH_CLASS_DEFAULT )		102089	7					
ANR	102201	Condition	fetch_type == ZEND_FETCH_CLASS_DEFAULT	2142:6:61491:61528	102089	0	True				
ANR	102202	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_DEFAULT		102089	0		==			
ANR	102203	Identifier	fetch_type		102089	0					
ANR	102204	Identifier	ZEND_FETCH_CLASS_DEFAULT		102089	1					
ANR	102205	CompoundStatement		21:3:576:655	102089	1					
ANR	102206	IdentifierDeclStatement	uint32_t type = name_ast -> kind == ZEND_AST_ZVAL ? name_ast -> attr : ZEND_NAME_FQ ;	2143:3:61536:61615	102089	0	True				
ANR	102207	IdentifierDecl	type = name_ast -> kind == ZEND_AST_ZVAL ? name_ast -> attr : ZEND_NAME_FQ		102089	0					
ANR	102208	IdentifierDeclType	uint32_t		102089	0					
ANR	102209	Identifier	type		102089	1					
ANR	102210	AssignmentExpression	type = name_ast -> kind == ZEND_AST_ZVAL ? name_ast -> attr : ZEND_NAME_FQ		102089	2		=			
ANR	102211	Identifier	type		102089	0					
ANR	102212	ConditionalExpression	name_ast -> kind == ZEND_AST_ZVAL ? name_ast -> attr : ZEND_NAME_FQ		102089	1					
ANR	102213	Condition	name_ast -> kind == ZEND_AST_ZVAL		102089	0					
ANR	102214	EqualityExpression	name_ast -> kind == ZEND_AST_ZVAL		102089	0		==			
ANR	102215	PtrMemberAccess	name_ast -> kind		102089	0					
ANR	102216	Identifier	name_ast		102089	0					
ANR	102217	Identifier	kind		102089	1					
ANR	102218	Identifier	ZEND_AST_ZVAL		102089	1					
ANR	102219	PtrMemberAccess	name_ast -> attr		102089	1					
ANR	102220	Identifier	name_ast		102089	0					
ANR	102221	Identifier	attr		102089	1					
ANR	102222	Identifier	ZEND_NAME_FQ		102089	2					
ANR	102223	ExpressionStatement	opline -> op2_type = IS_CONST	2144:3:61620:61647	102089	1	True				
ANR	102224	AssignmentExpression	opline -> op2_type = IS_CONST		102089	0		=			
ANR	102225	PtrMemberAccess	opline -> op2_type		102089	0					
ANR	102226	Identifier	opline		102089	0					
ANR	102227	Identifier	op2_type		102089	1					
ANR	102228	Identifier	IS_CONST		102089	1					
ANR	102229	ExpressionStatement	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name ( name , type ) )"	2145:3:61652:61764	102089	2	True				
ANR	102230	AssignmentExpression	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name ( name , type ) )"		102089	0		=			
ANR	102231	MemberAccess	opline -> op2 . constant		102089	0					
ANR	102232	PtrMemberAccess	opline -> op2		102089	0					
ANR	102233	Identifier	opline		102089	0					
ANR	102234	Identifier	op2		102089	1					
ANR	102235	Identifier	constant		102089	1					
ANR	102236	CallExpression	"zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name ( name , type ) )"		102089	1					
ANR	102237	Callee	zend_add_class_name_literal		102089	0					
ANR	102238	Identifier	zend_add_class_name_literal		102089	0					
ANR	102239	ArgumentList	CG ( active_op_array )		102089	1					
ANR	102240	Argument	CG ( active_op_array )		102089	0					
ANR	102241	CallExpression	CG ( active_op_array )		102089	0					
ANR	102242	Callee	CG		102089	0					
ANR	102243	Identifier	CG		102089	0					
ANR	102244	ArgumentList	active_op_array		102089	1					
ANR	102245	Argument	active_op_array		102089	0					
ANR	102246	Identifier	active_op_array		102089	0					
ANR	102247	Argument	"zend_resolve_class_name ( name , type )"		102089	1					
ANR	102248	CallExpression	"zend_resolve_class_name ( name , type )"		102089	0					
ANR	102249	Callee	zend_resolve_class_name		102089	0					
ANR	102250	Identifier	zend_resolve_class_name		102089	0					
ANR	102251	ArgumentList	name		102089	1					
ANR	102252	Argument	name		102089	0					
ANR	102253	Identifier	name		102089	0					
ANR	102254	Argument	type		102089	1					
ANR	102255	Identifier	type		102089	0					
ANR	102256	ElseStatement	else		102089	0					
ANR	102257	CompoundStatement		25:9:815:815	102089	0					
ANR	102258	ExpressionStatement	zend_ensure_valid_class_fetch_type ( fetch_type )	2148:3:61780:61826	102089	0	True				
ANR	102259	CallExpression	zend_ensure_valid_class_fetch_type ( fetch_type )		102089	0					
ANR	102260	Callee	zend_ensure_valid_class_fetch_type		102089	0					
ANR	102261	Identifier	zend_ensure_valid_class_fetch_type		102089	0					
ANR	102262	ArgumentList	fetch_type		102089	1					
ANR	102263	Argument	fetch_type		102089	0					
ANR	102264	Identifier	fetch_type		102089	0					
ANR	102265	ExpressionStatement	zend_string_release ( name )	2151:2:61835:61860	102089	8	True				
ANR	102266	CallExpression	zend_string_release ( name )		102089	0					
ANR	102267	Callee	zend_string_release		102089	0					
ANR	102268	Identifier	zend_string_release		102089	0					
ANR	102269	ArgumentList	name		102089	1					
ANR	102270	Argument	name		102089	0					
ANR	102271	Identifier	name		102089	0					
ANR	102272	ElseStatement	else		102089	0					
ANR	102273	CompoundStatement		30:8:910:910	102089	0					
ANR	102274	ExpressionStatement	"opline = zend_emit_op ( result , ZEND_FETCH_CLASS , NULL , & name_node )"	2153:2:61874:61939	102089	0	True				
ANR	102275	AssignmentExpression	"opline = zend_emit_op ( result , ZEND_FETCH_CLASS , NULL , & name_node )"		102089	0		=			
ANR	102276	Identifier	opline		102089	0					
ANR	102277	CallExpression	"zend_emit_op ( result , ZEND_FETCH_CLASS , NULL , & name_node )"		102089	1					
ANR	102278	Callee	zend_emit_op		102089	0					
ANR	102279	Identifier	zend_emit_op		102089	0					
ANR	102280	ArgumentList	result		102089	1					
ANR	102281	Argument	result		102089	0					
ANR	102282	Identifier	result		102089	0					
ANR	102283	Argument	ZEND_FETCH_CLASS		102089	1					
ANR	102284	Identifier	ZEND_FETCH_CLASS		102089	0					
ANR	102285	Argument	NULL		102089	2					
ANR	102286	Identifier	NULL		102089	0					
ANR	102287	Argument	& name_node		102089	3					
ANR	102288	UnaryOperationExpression	& name_node		102089	0					
ANR	102289	UnaryOperator	&		102089	0					
ANR	102290	Identifier	name_node		102089	1					
ANR	102291	ExpressionStatement	opline -> extended_value = ZEND_FETCH_CLASS_DEFAULT | ( throw_exception ? ZEND_FETCH_CLASS_EXCEPTION : 0 )	2154:2:61943:62045	102089	1	True				
ANR	102292	AssignmentExpression	opline -> extended_value = ZEND_FETCH_CLASS_DEFAULT | ( throw_exception ? ZEND_FETCH_CLASS_EXCEPTION : 0 )		102089	0		=			
ANR	102293	PtrMemberAccess	opline -> extended_value		102089	0					
ANR	102294	Identifier	opline		102089	0					
ANR	102295	Identifier	extended_value		102089	1					
ANR	102296	InclusiveOrExpression	ZEND_FETCH_CLASS_DEFAULT | ( throw_exception ? ZEND_FETCH_CLASS_EXCEPTION : 0 )		102089	1		|			
ANR	102297	Identifier	ZEND_FETCH_CLASS_DEFAULT		102089	0					
ANR	102298	ConditionalExpression	throw_exception ? ZEND_FETCH_CLASS_EXCEPTION : 0		102089	1					
ANR	102299	Condition	throw_exception		102089	0					
ANR	102300	Identifier	throw_exception		102089	0					
ANR	102301	Identifier	ZEND_FETCH_CLASS_EXCEPTION		102089	1					
ANR	102302	PrimaryExpression	0		102089	2					
ANR	102303	ReturnStatement	return opline ;	2157:1:62052:62065	102089	4	True				
ANR	102304	Identifier	opline		102089	0					
ANR	102305	ReturnType	static zend_op *		102089	1					
ANR	102306	Identifier	zend_compile_class_ref		102089	2					
ANR	102307	ParameterList	"znode * result , zend_ast * name_ast , int throw_exception"		102089	3					
ANR	102308	Parameter	znode * result	2122:39:60893:60905	102089	0	True				
ANR	102309	ParameterType	znode *		102089	0					
ANR	102310	Identifier	result		102089	1					
ANR	102311	Parameter	zend_ast * name_ast	2122:54:60908:60925	102089	1	True				
ANR	102312	ParameterType	zend_ast *		102089	0					
ANR	102313	Identifier	name_ast		102089	1					
ANR	102314	Parameter	int throw_exception	2122:74:60928:60946	102089	2	True				
ANR	102315	ParameterType	int		102089	0					
ANR	102316	Identifier	throw_exception		102089	1					
ANR	102317	CFGEntryNode	ENTRY		102089		True				
ANR	102318	CFGExitNode	EXIT		102089		True				
ANR	102319	Symbol	ZEND_FETCH_CLASS_DEFAULT		102089						
ANR	102320	Symbol	zend_add_class_name_literal		102089						
ANR	102321	Symbol	opline -> op2		102089						
ANR	102322	Symbol	ZEND_NAME_FQ		102089						
ANR	102323	Symbol	E_COMPILE_ERROR		102089						
ANR	102324	Symbol	Z_TYPE		102089						
ANR	102325	Symbol	Z_STR		102089						
ANR	102326	Symbol	type		102089						
ANR	102327	Symbol	opline -> extended_value		102089						
ANR	102328	Symbol	name_ast -> attr		102089						
ANR	102329	Symbol	result		102089						
ANR	102330	Symbol	* name_ast		102089						
ANR	102331	Symbol	opline		102089						
ANR	102332	Symbol	zend_resolve_class_name		102089						
ANR	102333	Symbol	& name_node		102089						
ANR	102334	Symbol	ZEND_FETCH_CLASS_EXCEPTION		102089						
ANR	102335	Symbol	ZEND_AST_ZVAL		102089						
ANR	102336	Symbol	IS_STRING		102089						
ANR	102337	Symbol	zend_get_class_fetch_type		102089						
ANR	102338	Symbol	IS_CONST		102089						
ANR	102339	Symbol	fetch_type		102089						
ANR	102340	Symbol	NULL		102089						
ANR	102341	Symbol	CG		102089						
ANR	102342	Symbol	active_op_array		102089						
ANR	102343	Symbol	name_node . u		102089						
ANR	102344	Symbol	throw_exception		102089						
ANR	102345	Symbol	name_node . op_type		102089						
ANR	102346	Symbol	ZEND_FETCH_CLASS		102089						
ANR	102347	Symbol	* opline		102089						
ANR	102348	Symbol	name_ast -> kind		102089						
ANR	102349	Symbol	name_ast		102089						
ANR	102350	Symbol	name		102089						
ANR	102351	Symbol	opline -> op2 . constant		102089						
ANR	102352	Symbol	opline -> op2_type		102089						
ANR	102353	Symbol	name_node		102089						
ANR	102354	Symbol	name_node . u . constant		102089						
ANR	102355	Symbol	zend_emit_op		102089						
ANR	102356	Function	zend_try_compile_cv	2161:0:62080:62752							
ANR	102357	FunctionDef	"zend_try_compile_cv (znode * result , zend_ast * ast)"		102356	0					
ANR	102358	CompoundStatement		2162:0:62151:62752	102356	0					
ANR	102359	IdentifierDeclStatement	zend_ast * name_ast = ast -> child [ 0 ] ;	2163:1:62154:62188	102356	0	True				
ANR	102360	IdentifierDecl	* name_ast = ast -> child [ 0 ]		102356	0					
ANR	102361	IdentifierDeclType	zend_ast *		102356	0					
ANR	102362	Identifier	name_ast		102356	1					
ANR	102363	AssignmentExpression	* name_ast = ast -> child [ 0 ]		102356	2		=			
ANR	102364	Identifier	name_ast		102356	0					
ANR	102365	ArrayIndexing	ast -> child [ 0 ]		102356	1					
ANR	102366	PtrMemberAccess	ast -> child		102356	0					
ANR	102367	Identifier	ast		102356	0					
ANR	102368	Identifier	child		102356	1					
ANR	102369	PrimaryExpression	0		102356	1					
ANR	102370	IfStatement	if ( name_ast -> kind == ZEND_AST_ZVAL )		102356	1					
ANR	102371	Condition	name_ast -> kind == ZEND_AST_ZVAL	2164:5:62195:62225	102356	0	True				
ANR	102372	EqualityExpression	name_ast -> kind == ZEND_AST_ZVAL		102356	0		==			
ANR	102373	PtrMemberAccess	name_ast -> kind		102356	0					
ANR	102374	Identifier	name_ast		102356	0					
ANR	102375	Identifier	kind		102356	1					
ANR	102376	Identifier	ZEND_AST_ZVAL		102356	1					
ANR	102377	CompoundStatement		4:2:80:144	102356	1					
ANR	102378	IdentifierDeclStatement	zend_string * name = zval_get_string ( zend_ast_get_zval ( name_ast ) ) ;	2165:2:62232:62296	102356	0	True				
ANR	102379	IdentifierDecl	* name = zval_get_string ( zend_ast_get_zval ( name_ast ) )		102356	0					
ANR	102380	IdentifierDeclType	zend_string *		102356	0					
ANR	102381	Identifier	name		102356	1					
ANR	102382	AssignmentExpression	* name = zval_get_string ( zend_ast_get_zval ( name_ast ) )		102356	2		=			
ANR	102383	Identifier	name		102356	0					
ANR	102384	CallExpression	zval_get_string ( zend_ast_get_zval ( name_ast ) )		102356	1					
ANR	102385	Callee	zval_get_string		102356	0					
ANR	102386	Identifier	zval_get_string		102356	0					
ANR	102387	ArgumentList	zend_ast_get_zval ( name_ast )		102356	1					
ANR	102388	Argument	zend_ast_get_zval ( name_ast )		102356	0					
ANR	102389	CallExpression	zend_ast_get_zval ( name_ast )		102356	0					
ANR	102390	Callee	zend_ast_get_zval		102356	0					
ANR	102391	Identifier	zend_ast_get_zval		102356	0					
ANR	102392	ArgumentList	name_ast		102356	1					
ANR	102393	Argument	name_ast		102356	0					
ANR	102394	Identifier	name_ast		102356	0					
ANR	102395	IfStatement	if ( zend_is_auto_global ( name ) )		102356	1					
ANR	102396	Condition	zend_is_auto_global ( name )	2167:6:62305:62329	102356	0	True				
ANR	102397	CallExpression	zend_is_auto_global ( name )		102356	0					
ANR	102398	Callee	zend_is_auto_global		102356	0					
ANR	102399	Identifier	zend_is_auto_global		102356	0					
ANR	102400	ArgumentList	name		102356	1					
ANR	102401	Argument	name		102356	0					
ANR	102402	Identifier	name		102356	0					
ANR	102403	CompoundStatement		6:33:180:180	102356	1					
ANR	102404	ExpressionStatement	zend_string_release ( name )	2168:3:62337:62362	102356	0	True				
ANR	102405	CallExpression	zend_string_release ( name )		102356	0					
ANR	102406	Callee	zend_string_release		102356	0					
ANR	102407	Identifier	zend_string_release		102356	0					
ANR	102408	ArgumentList	name		102356	1					
ANR	102409	Argument	name		102356	0					
ANR	102410	Identifier	name		102356	0					
ANR	102411	ReturnStatement	return FAILURE ;	2169:3:62367:62381	102356	1	True				
ANR	102412	Identifier	FAILURE		102356	0					
ANR	102413	ExpressionStatement	result -> op_type = IS_CV	2172:2:62390:62413	102356	2	True				
ANR	102414	AssignmentExpression	result -> op_type = IS_CV		102356	0		=			
ANR	102415	PtrMemberAccess	result -> op_type		102356	0					
ANR	102416	Identifier	result		102356	0					
ANR	102417	Identifier	op_type		102356	1					
ANR	102418	Identifier	IS_CV		102356	1					
ANR	102419	ExpressionStatement	"result -> u . op . var = lookup_cv ( CG ( active_op_array ) , name )"	2173:2:62417:62472	102356	3	True				
ANR	102420	AssignmentExpression	"result -> u . op . var = lookup_cv ( CG ( active_op_array ) , name )"		102356	0		=			
ANR	102421	MemberAccess	result -> u . op . var		102356	0					
ANR	102422	MemberAccess	result -> u . op		102356	0					
ANR	102423	PtrMemberAccess	result -> u		102356	0					
ANR	102424	Identifier	result		102356	0					
ANR	102425	Identifier	u		102356	1					
ANR	102426	Identifier	op		102356	1					
ANR	102427	Identifier	var		102356	1					
ANR	102428	CallExpression	"lookup_cv ( CG ( active_op_array ) , name )"		102356	1					
ANR	102429	Callee	lookup_cv		102356	0					
ANR	102430	Identifier	lookup_cv		102356	0					
ANR	102431	ArgumentList	CG ( active_op_array )		102356	1					
ANR	102432	Argument	CG ( active_op_array )		102356	0					
ANR	102433	CallExpression	CG ( active_op_array )		102356	0					
ANR	102434	Callee	CG		102356	0					
ANR	102435	Identifier	CG		102356	0					
ANR	102436	ArgumentList	active_op_array		102356	1					
ANR	102437	Argument	active_op_array		102356	0					
ANR	102438	Identifier	active_op_array		102356	0					
ANR	102439	Argument	name		102356	1					
ANR	102440	Identifier	name		102356	0					
ANR	102441	ExpressionStatement	name = CG ( active_op_array ) -> vars [ EX_VAR_TO_NUM ( result -> u . op . var ) ]	2176:2:62538:62603	102356	4	True				
ANR	102442	AssignmentExpression	name = CG ( active_op_array ) -> vars [ EX_VAR_TO_NUM ( result -> u . op . var ) ]		102356	0		=			
ANR	102443	Identifier	name		102356	0					
ANR	102444	ArrayIndexing	CG ( active_op_array ) -> vars [ EX_VAR_TO_NUM ( result -> u . op . var ) ]		102356	1					
ANR	102445	PtrMemberAccess	CG ( active_op_array ) -> vars		102356	0					
ANR	102446	CallExpression	CG ( active_op_array )		102356	0					
ANR	102447	Callee	CG		102356	0					
ANR	102448	Identifier	CG		102356	0					
ANR	102449	ArgumentList	active_op_array		102356	1					
ANR	102450	Argument	active_op_array		102356	0					
ANR	102451	Identifier	active_op_array		102356	0					
ANR	102452	Identifier	vars		102356	1					
ANR	102453	CallExpression	EX_VAR_TO_NUM ( result -> u . op . var )		102356	1					
ANR	102454	Callee	EX_VAR_TO_NUM		102356	0					
ANR	102455	Identifier	EX_VAR_TO_NUM		102356	0					
ANR	102456	ArgumentList	result -> u . op . var		102356	1					
ANR	102457	Argument	result -> u . op . var		102356	0					
ANR	102458	MemberAccess	result -> u . op . var		102356	0					
ANR	102459	MemberAccess	result -> u . op		102356	0					
ANR	102460	PtrMemberAccess	result -> u		102356	0					
ANR	102461	Identifier	result		102356	0					
ANR	102462	Identifier	u		102356	1					
ANR	102463	Identifier	op		102356	1					
ANR	102464	Identifier	var		102356	1					
ANR	102465	IfStatement	"if ( zend_string_equals_literal ( name , ""this"" ) )"		102356	5					
ANR	102466	Condition	"zend_string_equals_literal ( name , ""this"" )"	2178:6:62612:62651	102356	0	True				
ANR	102467	CallExpression	"zend_string_equals_literal ( name , ""this"" )"		102356	0					
ANR	102468	Callee	zend_string_equals_literal		102356	0					
ANR	102469	Identifier	zend_string_equals_literal		102356	0					
ANR	102470	ArgumentList	name		102356	1					
ANR	102471	Argument	name		102356	0					
ANR	102472	Identifier	name		102356	0					
ANR	102473	Argument	"""this"""		102356	1					
ANR	102474	PrimaryExpression	"""this"""		102356	0					
ANR	102475	CompoundStatement		17:48:502:502	102356	1					
ANR	102476	ExpressionStatement	CG ( active_op_array ) -> this_var = result -> u . op . var	2179:3:62659:62707	102356	0	True				
ANR	102477	AssignmentExpression	CG ( active_op_array ) -> this_var = result -> u . op . var		102356	0		=			
ANR	102478	PtrMemberAccess	CG ( active_op_array ) -> this_var		102356	0					
ANR	102479	CallExpression	CG ( active_op_array )		102356	0					
ANR	102480	Callee	CG		102356	0					
ANR	102481	Identifier	CG		102356	0					
ANR	102482	ArgumentList	active_op_array		102356	1					
ANR	102483	Argument	active_op_array		102356	0					
ANR	102484	Identifier	active_op_array		102356	0					
ANR	102485	Identifier	this_var		102356	1					
ANR	102486	MemberAccess	result -> u . op . var		102356	1					
ANR	102487	MemberAccess	result -> u . op		102356	0					
ANR	102488	PtrMemberAccess	result -> u		102356	0					
ANR	102489	Identifier	result		102356	0					
ANR	102490	Identifier	u		102356	1					
ANR	102491	Identifier	op		102356	1					
ANR	102492	Identifier	var		102356	1					
ANR	102493	ReturnStatement	return SUCCESS ;	2181:2:62715:62729	102356	6	True				
ANR	102494	Identifier	SUCCESS		102356	0					
ANR	102495	ReturnStatement	return FAILURE ;	2184:1:62736:62750	102356	2	True				
ANR	102496	Identifier	FAILURE		102356	0					
ANR	102497	ReturnType	static int		102356	1					
ANR	102498	Identifier	zend_try_compile_cv		102356	2					
ANR	102499	ParameterList	"znode * result , zend_ast * ast"		102356	3					
ANR	102500	Parameter	znode * result	2161:31:62111:62123	102356	0	True				
ANR	102501	ParameterType	znode *		102356	0					
ANR	102502	Identifier	result		102356	1					
ANR	102503	Parameter	zend_ast * ast	2161:46:62126:62138	102356	1	True				
ANR	102504	ParameterType	zend_ast *		102356	0					
ANR	102505	Identifier	ast		102356	1					
ANR	102506	CFGEntryNode	ENTRY		102356		True				
ANR	102507	CFGExitNode	EXIT		102356		True				
ANR	102508	Symbol	* EX_VAR_TO_NUM		102356						
ANR	102509	Symbol	zend_string_equals_literal		102356						
ANR	102510	Symbol	ast		102356						
ANR	102511	Symbol	IS_CV		102356						
ANR	102512	Symbol	CG ( active_op_array ) -> vars		102356						
ANR	102513	Symbol	result -> u . op . var		102356						
ANR	102514	Symbol	lookup_cv		102356						
ANR	102515	Symbol	* CG		102356						
ANR	102516	Symbol	result -> u . op		102356						
ANR	102517	Symbol	result -> op_type		102356						
ANR	102518	Symbol	result -> u		102356						
ANR	102519	Symbol	result		102356						
ANR	102520	Symbol	* name_ast		102356						
ANR	102521	Symbol	* * CG		102356						
ANR	102522	Symbol	* ast		102356						
ANR	102523	Symbol	* result		102356						
ANR	102524	Symbol	* * ast		102356						
ANR	102525	Symbol	ZEND_AST_ZVAL		102356						
ANR	102526	Symbol	EX_VAR_TO_NUM		102356						
ANR	102527	Symbol	SUCCESS		102356						
ANR	102528	Symbol	CG		102356						
ANR	102529	Symbol	active_op_array		102356						
ANR	102530	Symbol	zend_is_auto_global		102356						
ANR	102531	Symbol	zval_get_string		102356						
ANR	102532	Symbol	FAILURE		102356						
ANR	102533	Symbol	CG ( active_op_array ) -> this_var		102356						
ANR	102534	Symbol	name_ast -> kind		102356						
ANR	102535	Symbol	name_ast		102356						
ANR	102536	Symbol	name		102356						
ANR	102537	Symbol	* ast -> child		102356						
ANR	102538	Symbol	ast -> child		102356						
ANR	102539	Symbol	zend_ast_get_zval		102356						
ANR	102540	Symbol	* CG ( active_op_array ) -> vars		102356						
ANR	102541	Function	zend_compile_simple_var_no_cv	2188:0:62765:63790							
ANR	102542	FunctionDef	"zend_compile_simple_var_no_cv (znode * result , zend_ast * ast , uint32_t type , int delayed)"		102541	0					
ANR	102543	CompoundStatement		2189:0:62879:63790	102541	0					
ANR	102544	IdentifierDeclStatement	zend_ast * name_ast = ast -> child [ 0 ] ;	2190:1:62882:62916	102541	0	True				
ANR	102545	IdentifierDecl	* name_ast = ast -> child [ 0 ]		102541	0					
ANR	102546	IdentifierDeclType	zend_ast *		102541	0					
ANR	102547	Identifier	name_ast		102541	1					
ANR	102548	AssignmentExpression	* name_ast = ast -> child [ 0 ]		102541	2		=			
ANR	102549	Identifier	name_ast		102541	0					
ANR	102550	ArrayIndexing	ast -> child [ 0 ]		102541	1					
ANR	102551	PtrMemberAccess	ast -> child		102541	0					
ANR	102552	Identifier	ast		102541	0					
ANR	102553	Identifier	child		102541	1					
ANR	102554	PrimaryExpression	0		102541	1					
ANR	102555	IdentifierDeclStatement	znode name_node ;	2191:1:62919:62934	102541	1	True				
ANR	102556	IdentifierDecl	name_node		102541	0					
ANR	102557	IdentifierDeclType	znode		102541	0					
ANR	102558	Identifier	name_node		102541	1					
ANR	102559	IdentifierDeclStatement	zend_op * opline ;	2192:1:62937:62952	102541	2	True				
ANR	102560	IdentifierDecl	* opline		102541	0					
ANR	102561	IdentifierDeclType	zend_op *		102541	0					
ANR	102562	Identifier	opline		102541	1					
ANR	102563	ExpressionStatement	"zend_compile_expr ( & name_node , name_ast )"	2194:1:62956:62995	102541	3	True				
ANR	102564	CallExpression	"zend_compile_expr ( & name_node , name_ast )"		102541	0					
ANR	102565	Callee	zend_compile_expr		102541	0					
ANR	102566	Identifier	zend_compile_expr		102541	0					
ANR	102567	ArgumentList	& name_node		102541	1					
ANR	102568	Argument	& name_node		102541	0					
ANR	102569	UnaryOperationExpression	& name_node		102541	0					
ANR	102570	UnaryOperator	&		102541	0					
ANR	102571	Identifier	name_node		102541	1					
ANR	102572	Argument	name_ast		102541	1					
ANR	102573	Identifier	name_ast		102541	0					
ANR	102574	IfStatement	if ( name_node . op_type == IS_CONST )		102541	4					
ANR	102575	Condition	name_node . op_type == IS_CONST	2195:5:63002:63030	102541	0	True				
ANR	102576	EqualityExpression	name_node . op_type == IS_CONST		102541	0		==			
ANR	102577	MemberAccess	name_node . op_type		102541	0					
ANR	102578	Identifier	name_node		102541	0					
ANR	102579	Identifier	op_type		102541	1					
ANR	102580	Identifier	IS_CONST		102541	1					
ANR	102581	CompoundStatement		7:36:153:153	102541	1					
ANR	102582	ExpressionStatement	convert_to_string ( & name_node . u . constant )	2196:2:63037:63077	102541	0	True				
ANR	102583	CallExpression	convert_to_string ( & name_node . u . constant )		102541	0					
ANR	102584	Callee	convert_to_string		102541	0					
ANR	102585	Identifier	convert_to_string		102541	0					
ANR	102586	ArgumentList	& name_node . u . constant		102541	1					
ANR	102587	Argument	& name_node . u . constant		102541	0					
ANR	102588	UnaryOperationExpression	& name_node . u . constant		102541	0					
ANR	102589	UnaryOperator	&		102541	0					
ANR	102590	MemberAccess	name_node . u . constant		102541	1					
ANR	102591	MemberAccess	name_node . u		102541	0					
ANR	102592	Identifier	name_node		102541	0					
ANR	102593	Identifier	u		102541	1					
ANR	102594	Identifier	constant		102541	1					
ANR	102595	IfStatement	if ( delayed )		102541	5					
ANR	102596	Condition	delayed	2199:5:63088:63094	102541	0	True				
ANR	102597	Identifier	delayed		102541	0					
ANR	102598	CompoundStatement		11:14:217:217	102541	1					
ANR	102599	ExpressionStatement	"opline = zend_delayed_emit_op ( result , ZEND_FETCH_R , & name_node , NULL )"	2200:2:63101:63170	102541	0	True				
ANR	102600	AssignmentExpression	"opline = zend_delayed_emit_op ( result , ZEND_FETCH_R , & name_node , NULL )"		102541	0		=			
ANR	102601	Identifier	opline		102541	0					
ANR	102602	CallExpression	"zend_delayed_emit_op ( result , ZEND_FETCH_R , & name_node , NULL )"		102541	1					
ANR	102603	Callee	zend_delayed_emit_op		102541	0					
ANR	102604	Identifier	zend_delayed_emit_op		102541	0					
ANR	102605	ArgumentList	result		102541	1					
ANR	102606	Argument	result		102541	0					
ANR	102607	Identifier	result		102541	0					
ANR	102608	Argument	ZEND_FETCH_R		102541	1					
ANR	102609	Identifier	ZEND_FETCH_R		102541	0					
ANR	102610	Argument	& name_node		102541	2					
ANR	102611	UnaryOperationExpression	& name_node		102541	0					
ANR	102612	UnaryOperator	&		102541	0					
ANR	102613	Identifier	name_node		102541	1					
ANR	102614	Argument	NULL		102541	3					
ANR	102615	Identifier	NULL		102541	0					
ANR	102616	ElseStatement	else		102541	0					
ANR	102617	CompoundStatement		13:8:300:300	102541	0					
ANR	102618	ExpressionStatement	"opline = zend_emit_op ( result , ZEND_FETCH_R , & name_node , NULL )"	2202:2:63184:63245	102541	0	True				
ANR	102619	AssignmentExpression	"opline = zend_emit_op ( result , ZEND_FETCH_R , & name_node , NULL )"		102541	0		=			
ANR	102620	Identifier	opline		102541	0					
ANR	102621	CallExpression	"zend_emit_op ( result , ZEND_FETCH_R , & name_node , NULL )"		102541	1					
ANR	102622	Callee	zend_emit_op		102541	0					
ANR	102623	Identifier	zend_emit_op		102541	0					
ANR	102624	ArgumentList	result		102541	1					
ANR	102625	Argument	result		102541	0					
ANR	102626	Identifier	result		102541	0					
ANR	102627	Argument	ZEND_FETCH_R		102541	1					
ANR	102628	Identifier	ZEND_FETCH_R		102541	0					
ANR	102629	Argument	& name_node		102541	2					
ANR	102630	UnaryOperationExpression	& name_node		102541	0					
ANR	102631	UnaryOperator	&		102541	0					
ANR	102632	Identifier	name_node		102541	1					
ANR	102633	Argument	NULL		102541	3					
ANR	102634	Identifier	NULL		102541	0					
ANR	102635	IfStatement	if ( name_node . op_type == IS_CONST && zend_is_auto_global ( Z_STR ( name_node . u . constant ) ) )		102541	6					
ANR	102636	Condition	name_node . op_type == IS_CONST && zend_is_auto_global ( Z_STR ( name_node . u . constant ) )	2205:5:63256:63342	102541	0	True				
ANR	102637	AndExpression	name_node . op_type == IS_CONST && zend_is_auto_global ( Z_STR ( name_node . u . constant ) )		102541	0		&&			
ANR	102638	EqualityExpression	name_node . op_type == IS_CONST		102541	0		==			
ANR	102639	MemberAccess	name_node . op_type		102541	0					
ANR	102640	Identifier	name_node		102541	0					
ANR	102641	Identifier	op_type		102541	1					
ANR	102642	Identifier	IS_CONST		102541	1					
ANR	102643	CallExpression	zend_is_auto_global ( Z_STR ( name_node . u . constant ) )		102541	1					
ANR	102644	Callee	zend_is_auto_global		102541	0					
ANR	102645	Identifier	zend_is_auto_global		102541	0					
ANR	102646	ArgumentList	Z_STR ( name_node . u . constant )		102541	1					
ANR	102647	Argument	Z_STR ( name_node . u . constant )		102541	0					
ANR	102648	CallExpression	Z_STR ( name_node . u . constant )		102541	0					
ANR	102649	Callee	Z_STR		102541	0					
ANR	102650	Identifier	Z_STR		102541	0					
ANR	102651	ArgumentList	name_node . u . constant		102541	1					
ANR	102652	Argument	name_node . u . constant		102541	0					
ANR	102653	MemberAccess	name_node . u . constant		102541	0					
ANR	102654	MemberAccess	name_node . u		102541	0					
ANR	102655	Identifier	name_node		102541	0					
ANR	102656	Identifier	u		102541	1					
ANR	102657	Identifier	constant		102541	1					
ANR	102658	CompoundStatement		18:55:465:465	102541	1					
ANR	102659	ExpressionStatement	opline -> extended_value = ZEND_FETCH_GLOBAL	2208:2:63350:63392	102541	0	True				
ANR	102660	AssignmentExpression	opline -> extended_value = ZEND_FETCH_GLOBAL		102541	0		=			
ANR	102661	PtrMemberAccess	opline -> extended_value		102541	0					
ANR	102662	Identifier	opline		102541	0					
ANR	102663	Identifier	extended_value		102541	1					
ANR	102664	Identifier	ZEND_FETCH_GLOBAL		102541	1					
ANR	102665	ElseStatement	else		102541	0					
ANR	102666	CompoundStatement		21:8:522:522	102541	0					
ANR	102667	ExpressionStatement	opline -> extended_value = ZEND_FETCH_LOCAL	2210:2:63406:63447	102541	0	True				
ANR	102668	AssignmentExpression	opline -> extended_value = ZEND_FETCH_LOCAL		102541	0		=			
ANR	102669	PtrMemberAccess	opline -> extended_value		102541	0					
ANR	102670	Identifier	opline		102541	0					
ANR	102671	Identifier	extended_value		102541	1					
ANR	102672	Identifier	ZEND_FETCH_LOCAL		102541	1					
ANR	102673	IfStatement	if ( ast -> kind != ZEND_AST_ZVAL && CG ( active_op_array ) -> scope && CG ( active_op_array ) -> this_var == ( uint32_t ) - 1 )		102541	1					
ANR	102674	Condition	ast -> kind != ZEND_AST_ZVAL && CG ( active_op_array ) -> scope && CG ( active_op_array ) -> this_var == ( uint32_t ) - 1	2212:6:63508:63615	102541	0	True				
ANR	102675	AndExpression	ast -> kind != ZEND_AST_ZVAL && CG ( active_op_array ) -> scope && CG ( active_op_array ) -> this_var == ( uint32_t ) - 1		102541	0		&&			
ANR	102676	EqualityExpression	ast -> kind != ZEND_AST_ZVAL		102541	0		!=			
ANR	102677	PtrMemberAccess	ast -> kind		102541	0					
ANR	102678	Identifier	ast		102541	0					
ANR	102679	Identifier	kind		102541	1					
ANR	102680	Identifier	ZEND_AST_ZVAL		102541	1					
ANR	102681	AndExpression	CG ( active_op_array ) -> scope && CG ( active_op_array ) -> this_var == ( uint32_t ) - 1		102541	1		&&			
ANR	102682	PtrMemberAccess	CG ( active_op_array ) -> scope		102541	0					
ANR	102683	CallExpression	CG ( active_op_array )		102541	0					
ANR	102684	Callee	CG		102541	0					
ANR	102685	Identifier	CG		102541	0					
ANR	102686	ArgumentList	active_op_array		102541	1					
ANR	102687	Argument	active_op_array		102541	0					
ANR	102688	Identifier	active_op_array		102541	0					
ANR	102689	Identifier	scope		102541	1					
ANR	102690	EqualityExpression	CG ( active_op_array ) -> this_var == ( uint32_t ) - 1		102541	1		==			
ANR	102691	PtrMemberAccess	CG ( active_op_array ) -> this_var		102541	0					
ANR	102692	CallExpression	CG ( active_op_array )		102541	0					
ANR	102693	Callee	CG		102541	0					
ANR	102694	Identifier	CG		102541	0					
ANR	102695	ArgumentList	active_op_array		102541	1					
ANR	102696	Argument	active_op_array		102541	0					
ANR	102697	Identifier	active_op_array		102541	0					
ANR	102698	Identifier	this_var		102541	1					
ANR	102699	CastExpression	( uint32_t ) - 1		102541	1					
ANR	102700	CastTarget	uint32_t		102541	0					
ANR	102701	UnaryOperationExpression	- 1		102541	1					
ANR	102702	UnaryOperator	-		102541	0					
ANR	102703	PrimaryExpression	1		102541	1					
ANR	102704	CompoundStatement		27:3:746:812	102541	1					
ANR	102705	IdentifierDeclStatement	"zend_string * key = zend_string_init ( ""this"" , sizeof ( ""this"" ) - 1 , 0 ) ;"	2215:3:63626:63692	102541	0	True				
ANR	102706	IdentifierDecl	"* key = zend_string_init ( ""this"" , sizeof ( ""this"" ) - 1 , 0 )"		102541	0					
ANR	102707	IdentifierDeclType	zend_string *		102541	0					
ANR	102708	Identifier	key		102541	1					
ANR	102709	AssignmentExpression	"* key = zend_string_init ( ""this"" , sizeof ( ""this"" ) - 1 , 0 )"		102541	2		=			
ANR	102710	Identifier	key		102541	0					
ANR	102711	CallExpression	"zend_string_init ( ""this"" , sizeof ( ""this"" ) - 1 , 0 )"		102541	1					
ANR	102712	Callee	zend_string_init		102541	0					
ANR	102713	Identifier	zend_string_init		102541	0					
ANR	102714	ArgumentList	"""this"""		102541	1					
ANR	102715	Argument	"""this"""		102541	0					
ANR	102716	PrimaryExpression	"""this"""		102541	0					
ANR	102717	Argument	"sizeof ( ""this"" ) - 1"		102541	1					
ANR	102718	AdditiveExpression	"sizeof ( ""this"" ) - 1"		102541	0		-			
ANR	102719	SizeofExpression	"sizeof ( ""this"" )"		102541	0					
ANR	102720	Sizeof	sizeof		102541	0					
ANR	102721	PrimaryExpression	"""this"""		102541	1					
ANR	102722	PrimaryExpression	1		102541	1					
ANR	102723	Argument	0		102541	2					
ANR	102724	PrimaryExpression	0		102541	0					
ANR	102725	ExpressionStatement	"CG ( active_op_array ) -> this_var = lookup_cv ( CG ( active_op_array ) , key )"	2216:3:63697:63764	102541	1	True				
ANR	102726	AssignmentExpression	"CG ( active_op_array ) -> this_var = lookup_cv ( CG ( active_op_array ) , key )"		102541	0		=			
ANR	102727	PtrMemberAccess	CG ( active_op_array ) -> this_var		102541	0					
ANR	102728	CallExpression	CG ( active_op_array )		102541	0					
ANR	102729	Callee	CG		102541	0					
ANR	102730	Identifier	CG		102541	0					
ANR	102731	ArgumentList	active_op_array		102541	1					
ANR	102732	Argument	active_op_array		102541	0					
ANR	102733	Identifier	active_op_array		102541	0					
ANR	102734	Identifier	this_var		102541	1					
ANR	102735	CallExpression	"lookup_cv ( CG ( active_op_array ) , key )"		102541	1					
ANR	102736	Callee	lookup_cv		102541	0					
ANR	102737	Identifier	lookup_cv		102541	0					
ANR	102738	ArgumentList	CG ( active_op_array )		102541	1					
ANR	102739	Argument	CG ( active_op_array )		102541	0					
ANR	102740	CallExpression	CG ( active_op_array )		102541	0					
ANR	102741	Callee	CG		102541	0					
ANR	102742	Identifier	CG		102541	0					
ANR	102743	ArgumentList	active_op_array		102541	1					
ANR	102744	Argument	active_op_array		102541	0					
ANR	102745	Identifier	active_op_array		102541	0					
ANR	102746	Argument	key		102541	1					
ANR	102747	Identifier	key		102541	0					
ANR	102748	ReturnStatement	return opline ;	2220:1:63775:63788	102541	7	True				
ANR	102749	Identifier	opline		102541	0					
ANR	102750	ReturnType	static zend_op *		102541	1					
ANR	102751	Identifier	zend_compile_simple_var_no_cv		102541	2					
ANR	102752	ParameterList	"znode * result , zend_ast * ast , uint32_t type , int delayed"		102541	3					
ANR	102753	Parameter	znode * result	2188:46:62811:62823	102541	0	True				
ANR	102754	ParameterType	znode *		102541	0					
ANR	102755	Identifier	result		102541	1					
ANR	102756	Parameter	zend_ast * ast	2188:61:62826:62838	102541	1	True				
ANR	102757	ParameterType	zend_ast *		102541	0					
ANR	102758	Identifier	ast		102541	1					
ANR	102759	Parameter	uint32_t type	2188:76:62841:62853	102541	2	True				
ANR	102760	ParameterType	uint32_t		102541	0					
ANR	102761	Identifier	type		102541	1					
ANR	102762	Parameter	int delayed	2188:91:62856:62866	102541	3	True				
ANR	102763	ParameterType	int		102541	0					
ANR	102764	Identifier	delayed		102541	1					
ANR	102765	CFGEntryNode	ENTRY		102541		True				
ANR	102766	CFGExitNode	EXIT		102541		True				
ANR	102767	Symbol	ast -> kind		102541						
ANR	102768	Symbol	ast		102541						
ANR	102769	Symbol	lookup_cv		102541						
ANR	102770	Symbol	* CG		102541						
ANR	102771	Symbol	delayed		102541						
ANR	102772	Symbol	type		102541						
ANR	102773	Symbol	Z_STR		102541						
ANR	102774	Symbol	opline -> extended_value		102541						
ANR	102775	Symbol	result		102541						
ANR	102776	Symbol	zend_string_init		102541						
ANR	102777	Symbol	zend_delayed_emit_op		102541						
ANR	102778	Symbol	* ast		102541						
ANR	102779	Symbol	opline		102541						
ANR	102780	Symbol	& name_node		102541						
ANR	102781	Symbol	* * ast		102541						
ANR	102782	Symbol	CG ( active_op_array ) -> scope		102541						
ANR	102783	Symbol	ZEND_AST_ZVAL		102541						
ANR	102784	Symbol	key		102541						
ANR	102785	Symbol	ZEND_FETCH_GLOBAL		102541						
ANR	102786	Symbol	& name_node . u		102541						
ANR	102787	Symbol	IS_CONST		102541						
ANR	102788	Symbol	NULL		102541						
ANR	102789	Symbol	CG		102541						
ANR	102790	Symbol	active_op_array		102541						
ANR	102791	Symbol	zend_is_auto_global		102541						
ANR	102792	Symbol	ZEND_FETCH_R		102541						
ANR	102793	Symbol	ZEND_FETCH_LOCAL		102541						
ANR	102794	Symbol	name_node . u		102541						
ANR	102795	Symbol	CG ( active_op_array ) -> this_var		102541						
ANR	102796	Symbol	name_node . op_type		102541						
ANR	102797	Symbol	* opline		102541						
ANR	102798	Symbol	name_ast		102541						
ANR	102799	Symbol	& name_node . u . constant		102541						
ANR	102800	Symbol	* ast -> child		102541						
ANR	102801	Symbol	ast -> child		102541						
ANR	102802	Symbol	name_node		102541						
ANR	102803	Symbol	name_node . u . constant		102541						
ANR	102804	Symbol	zend_emit_op		102541						
ANR	102805	Function	zend_compile_simple_var	2224:0:63803:64087							
ANR	102806	FunctionDef	"zend_compile_simple_var (znode * result , zend_ast * ast , uint32_t type , int delayed)"		102805	0					
ANR	102807	CompoundStatement		2225:0:63907:64087	102805	0					
ANR	102808	IfStatement	"if ( zend_try_compile_cv ( result , ast ) == FAILURE )"		102805	0					
ANR	102809	Condition	"zend_try_compile_cv ( result , ast ) == FAILURE"	2226:5:63914:63956	102805	0	True				
ANR	102810	EqualityExpression	"zend_try_compile_cv ( result , ast ) == FAILURE"		102805	0		==			
ANR	102811	CallExpression	"zend_try_compile_cv ( result , ast )"		102805	0					
ANR	102812	Callee	zend_try_compile_cv		102805	0					
ANR	102813	Identifier	zend_try_compile_cv		102805	0					
ANR	102814	ArgumentList	result		102805	1					
ANR	102815	Argument	result		102805	0					
ANR	102816	Identifier	result		102805	0					
ANR	102817	Argument	ast		102805	1					
ANR	102818	Identifier	ast		102805	0					
ANR	102819	Identifier	FAILURE		102805	1					
ANR	102820	CompoundStatement		3:2:55:130	102805	1					
ANR	102821	IdentifierDeclStatement	"zend_op * opline = zend_compile_simple_var_no_cv ( result , ast , type , delayed ) ;"	2227:2:63963:64038	102805	0	True				
ANR	102822	IdentifierDecl	"* opline = zend_compile_simple_var_no_cv ( result , ast , type , delayed )"		102805	0					
ANR	102823	IdentifierDeclType	zend_op *		102805	0					
ANR	102824	Identifier	opline		102805	1					
ANR	102825	AssignmentExpression	"* opline = zend_compile_simple_var_no_cv ( result , ast , type , delayed )"		102805	2		=			
ANR	102826	Identifier	opline		102805	0					
ANR	102827	CallExpression	"zend_compile_simple_var_no_cv ( result , ast , type , delayed )"		102805	1					
ANR	102828	Callee	zend_compile_simple_var_no_cv		102805	0					
ANR	102829	Identifier	zend_compile_simple_var_no_cv		102805	0					
ANR	102830	ArgumentList	result		102805	1					
ANR	102831	Argument	result		102805	0					
ANR	102832	Identifier	result		102805	0					
ANR	102833	Argument	ast		102805	1					
ANR	102834	Identifier	ast		102805	0					
ANR	102835	Argument	type		102805	2					
ANR	102836	Identifier	type		102805	0					
ANR	102837	Argument	delayed		102805	3					
ANR	102838	Identifier	delayed		102805	0					
ANR	102839	ExpressionStatement	"zend_adjust_for_fetch_type ( opline , type )"	2228:2:64042:64082	102805	1	True				
ANR	102840	CallExpression	"zend_adjust_for_fetch_type ( opline , type )"		102805	0					
ANR	102841	Callee	zend_adjust_for_fetch_type		102805	0					
ANR	102842	Identifier	zend_adjust_for_fetch_type		102805	0					
ANR	102843	ArgumentList	opline		102805	1					
ANR	102844	Argument	opline		102805	0					
ANR	102845	Identifier	opline		102805	0					
ANR	102846	Argument	type		102805	1					
ANR	102847	Identifier	type		102805	0					
ANR	102848	ReturnType	static void		102805	1					
ANR	102849	Identifier	zend_compile_simple_var		102805	2					
ANR	102850	ParameterList	"znode * result , zend_ast * ast , uint32_t type , int delayed"		102805	3					
ANR	102851	Parameter	znode * result	2224:36:63839:63851	102805	0	True				
ANR	102852	ParameterType	znode *		102805	0					
ANR	102853	Identifier	result		102805	1					
ANR	102854	Parameter	zend_ast * ast	2224:51:63854:63866	102805	1	True				
ANR	102855	ParameterType	zend_ast *		102805	0					
ANR	102856	Identifier	ast		102805	1					
ANR	102857	Parameter	uint32_t type	2224:66:63869:63881	102805	2	True				
ANR	102858	ParameterType	uint32_t		102805	0					
ANR	102859	Identifier	type		102805	1					
ANR	102860	Parameter	int delayed	2224:81:63884:63894	102805	3	True				
ANR	102861	ParameterType	int		102805	0					
ANR	102862	Identifier	delayed		102805	1					
ANR	102863	CFGEntryNode	ENTRY		102805		True				
ANR	102864	CFGExitNode	EXIT		102805		True				
ANR	102865	Symbol	result		102805						
ANR	102866	Symbol	ast		102805						
ANR	102867	Symbol	opline		102805						
ANR	102868	Symbol	delayed		102805						
ANR	102869	Symbol	type		102805						
ANR	102870	Symbol	FAILURE		102805						
ANR	102871	Symbol	zend_compile_simple_var_no_cv		102805						
ANR	102872	Symbol	zend_try_compile_cv		102805						
ANR	102873	Function	zend_separate_if_call_and_write	2233:0:64100:64559							
ANR	102874	FunctionDef	"zend_separate_if_call_and_write (znode * node , zend_ast * ast , uint32_t type)"		102873	0					
ANR	102875	CompoundStatement		2234:0:64197:64559	102873	0					
ANR	102876	IfStatement	if ( type != BP_VAR_R && type != BP_VAR_IS && zend_is_call ( ast ) )		102873	0					
ANR	102877	Condition	type != BP_VAR_R && type != BP_VAR_IS && zend_is_call ( ast )	2235:5:64204:64261	102873	0	True				
ANR	102878	AndExpression	type != BP_VAR_R && type != BP_VAR_IS && zend_is_call ( ast )		102873	0		&&			
ANR	102879	EqualityExpression	type != BP_VAR_R		102873	0		!=			
ANR	102880	Identifier	type		102873	0					
ANR	102881	Identifier	BP_VAR_R		102873	1					
ANR	102882	AndExpression	type != BP_VAR_IS && zend_is_call ( ast )		102873	1		&&			
ANR	102883	EqualityExpression	type != BP_VAR_IS		102873	0		!=			
ANR	102884	Identifier	type		102873	0					
ANR	102885	Identifier	BP_VAR_IS		102873	1					
ANR	102886	CallExpression	zend_is_call ( ast )		102873	1					
ANR	102887	Callee	zend_is_call		102873	0					
ANR	102888	Identifier	zend_is_call		102873	0					
ANR	102889	ArgumentList	ast		102873	1					
ANR	102890	Argument	ast		102873	0					
ANR	102891	Identifier	ast		102873	0					
ANR	102892	CompoundStatement		2:65:66:66	102873	1					
ANR	102893	IfStatement	if ( node -> op_type == IS_VAR )		102873	0					
ANR	102894	Condition	node -> op_type == IS_VAR	2236:6:64272:64294	102873	0	True				
ANR	102895	EqualityExpression	node -> op_type == IS_VAR		102873	0		==			
ANR	102896	PtrMemberAccess	node -> op_type		102873	0					
ANR	102897	Identifier	node		102873	0					
ANR	102898	Identifier	op_type		102873	1					
ANR	102899	Identifier	IS_VAR		102873	1					
ANR	102900	CompoundStatement		4:3:104:167	102873	1					
ANR	102901	IdentifierDeclStatement	"zend_op * opline = zend_emit_op ( NULL , ZEND_SEPARATE , node , NULL ) ;"	2237:3:64302:64365	102873	0	True				
ANR	102902	IdentifierDecl	"* opline = zend_emit_op ( NULL , ZEND_SEPARATE , node , NULL )"		102873	0					
ANR	102903	IdentifierDeclType	zend_op *		102873	0					
ANR	102904	Identifier	opline		102873	1					
ANR	102905	AssignmentExpression	"* opline = zend_emit_op ( NULL , ZEND_SEPARATE , node , NULL )"		102873	2		=			
ANR	102906	Identifier	opline		102873	0					
ANR	102907	CallExpression	"zend_emit_op ( NULL , ZEND_SEPARATE , node , NULL )"		102873	1					
ANR	102908	Callee	zend_emit_op		102873	0					
ANR	102909	Identifier	zend_emit_op		102873	0					
ANR	102910	ArgumentList	NULL		102873	1					
ANR	102911	Argument	NULL		102873	0					
ANR	102912	Identifier	NULL		102873	0					
ANR	102913	Argument	ZEND_SEPARATE		102873	1					
ANR	102914	Identifier	ZEND_SEPARATE		102873	0					
ANR	102915	Argument	node		102873	2					
ANR	102916	Identifier	node		102873	0					
ANR	102917	Argument	NULL		102873	3					
ANR	102918	Identifier	NULL		102873	0					
ANR	102919	ExpressionStatement	opline -> result_type = IS_VAR	2238:3:64370:64398	102873	1	True				
ANR	102920	AssignmentExpression	opline -> result_type = IS_VAR		102873	0		=			
ANR	102921	PtrMemberAccess	opline -> result_type		102873	0					
ANR	102922	Identifier	opline		102873	0					
ANR	102923	Identifier	result_type		102873	1					
ANR	102924	Identifier	IS_VAR		102873	1					
ANR	102925	ExpressionStatement	opline -> result . var = opline -> op1 . var	2239:3:64403:64439	102873	2	True				
ANR	102926	AssignmentExpression	opline -> result . var = opline -> op1 . var		102873	0		=			
ANR	102927	MemberAccess	opline -> result . var		102873	0					
ANR	102928	PtrMemberAccess	opline -> result		102873	0					
ANR	102929	Identifier	opline		102873	0					
ANR	102930	Identifier	result		102873	1					
ANR	102931	Identifier	var		102873	1					
ANR	102932	MemberAccess	opline -> op1 . var		102873	1					
ANR	102933	PtrMemberAccess	opline -> op1		102873	0					
ANR	102934	Identifier	opline		102873	0					
ANR	102935	Identifier	op1		102873	1					
ANR	102936	Identifier	var		102873	1					
ANR	102937	ElseStatement	else		102873	0					
ANR	102938	CompoundStatement		7:9:252:252	102873	0					
ANR	102939	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use result of built-in function in write context"" )"	2241:3:64455:64550	102873	0	True				
ANR	102940	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use result of built-in function in write context"" )"		102873	0					
ANR	102941	Callee	zend_error_noreturn		102873	0					
ANR	102942	Identifier	zend_error_noreturn		102873	0					
ANR	102943	ArgumentList	E_COMPILE_ERROR		102873	1					
ANR	102944	Argument	E_COMPILE_ERROR		102873	0					
ANR	102945	Identifier	E_COMPILE_ERROR		102873	0					
ANR	102946	Argument	"""Cannot use result of built-in function in write context"""		102873	1					
ANR	102947	PrimaryExpression	"""Cannot use result of built-in function in write context"""		102873	0					
ANR	102948	ReturnType	static void		102873	1					
ANR	102949	Identifier	zend_separate_if_call_and_write		102873	2					
ANR	102950	ParameterList	"znode * node , zend_ast * ast , uint32_t type"		102873	3					
ANR	102951	Parameter	znode * node	2233:44:64144:64154	102873	0	True				
ANR	102952	ParameterType	znode *		102873	0					
ANR	102953	Identifier	node		102873	1					
ANR	102954	Parameter	zend_ast * ast	2233:57:64157:64169	102873	1	True				
ANR	102955	ParameterType	zend_ast *		102873	0					
ANR	102956	Identifier	ast		102873	1					
ANR	102957	Parameter	uint32_t type	2233:72:64172:64184	102873	2	True				
ANR	102958	ParameterType	uint32_t		102873	0					
ANR	102959	Identifier	type		102873	1					
ANR	102960	CFGEntryNode	ENTRY		102873		True				
ANR	102961	CFGExitNode	EXIT		102873		True				
ANR	102962	Symbol	opline -> result_type		102873						
ANR	102963	Symbol	opline -> op1		102873						
ANR	102964	Symbol	ast		102873						
ANR	102965	Symbol	NULL		102873						
ANR	102966	Symbol	zend_is_call		102873						
ANR	102967	Symbol	E_COMPILE_ERROR		102873						
ANR	102968	Symbol	type		102873						
ANR	102969	Symbol	opline -> result		102873						
ANR	102970	Symbol	node		102873						
ANR	102971	Symbol	opline		102873						
ANR	102972	Symbol	ZEND_SEPARATE		102873						
ANR	102973	Symbol	* opline		102873						
ANR	102974	Symbol	node -> op_type		102873						
ANR	102975	Symbol	* node		102873						
ANR	102976	Symbol	opline -> op1 . var		102873						
ANR	102977	Symbol	BP_VAR_IS		102873						
ANR	102978	Symbol	IS_VAR		102873						
ANR	102979	Symbol	BP_VAR_R		102873						
ANR	102980	Symbol	opline -> result . var		102873						
ANR	102981	Symbol	zend_emit_op		102873						
ANR	102982	DeclStmt									
ANR	102983	Decl							void	"void ( znode * result , zend_ast * ast , uint32_t type )"	zend_delayed_compile_var
ANR	102984	DeclStmt									
ANR	102985	Decl							void	"void ( znode * result , zend_ast * ast )"	zend_compile_assign
ANR	102986	DeclStmt									
ANR	102987	Decl							void	"void ( znode * result , zend_ast * ast , znode * expr_node )"	zend_compile_list_assign
ANR	102988	Function	zend_emit_assign_znode	2251:0:64791:65198							
ANR	102989	FunctionDef	"zend_emit_assign_znode (zend_ast * var_ast , znode * value_node)"		102988	0					
ANR	102990	CompoundStatement		2252:0:64881:65198	102988	0					
ANR	102991	IdentifierDeclStatement	znode dummy_node ;	2253:1:64884:64900	102988	0	True				
ANR	102992	IdentifierDecl	dummy_node		102988	0					
ANR	102993	IdentifierDeclType	znode		102988	0					
ANR	102994	Identifier	dummy_node		102988	1					
ANR	102995	IfStatement	if ( var_ast -> kind == ZEND_AST_LIST )		102988	1					
ANR	102996	Condition	var_ast -> kind == ZEND_AST_LIST	2254:5:64907:64936	102988	0	True				
ANR	102997	EqualityExpression	var_ast -> kind == ZEND_AST_LIST		102988	0		==			
ANR	102998	PtrMemberAccess	var_ast -> kind		102988	0					
ANR	102999	Identifier	var_ast		102988	0					
ANR	103000	Identifier	kind		102988	1					
ANR	103001	Identifier	ZEND_AST_LIST		102988	1					
ANR	103002	CompoundStatement		3:37:57:57	102988	1					
ANR	103003	ExpressionStatement	"zend_compile_list_assign ( & dummy_node , var_ast , value_node )"	2255:2:64943:65001	102988	0	True				
ANR	103004	CallExpression	"zend_compile_list_assign ( & dummy_node , var_ast , value_node )"		102988	0					
ANR	103005	Callee	zend_compile_list_assign		102988	0					
ANR	103006	Identifier	zend_compile_list_assign		102988	0					
ANR	103007	ArgumentList	& dummy_node		102988	1					
ANR	103008	Argument	& dummy_node		102988	0					
ANR	103009	UnaryOperationExpression	& dummy_node		102988	0					
ANR	103010	UnaryOperator	&		102988	0					
ANR	103011	Identifier	dummy_node		102988	1					
ANR	103012	Argument	var_ast		102988	1					
ANR	103013	Identifier	var_ast		102988	0					
ANR	103014	Argument	value_node		102988	2					
ANR	103015	Identifier	value_node		102988	0					
ANR	103016	ElseStatement	else		102988	0					
ANR	103017	CompoundStatement		6:2:133:235	102988	0					
ANR	103018	IdentifierDeclStatement	"zend_ast * assign_ast = zend_ast_create ( ZEND_AST_ASSIGN , var_ast , zend_ast_create_znode ( value_node ) ) ;"	2257:2:65015:65117	102988	0	True				
ANR	103019	IdentifierDecl	"* assign_ast = zend_ast_create ( ZEND_AST_ASSIGN , var_ast , zend_ast_create_znode ( value_node ) )"		102988	0					
ANR	103020	IdentifierDeclType	zend_ast *		102988	0					
ANR	103021	Identifier	assign_ast		102988	1					
ANR	103022	AssignmentExpression	"* assign_ast = zend_ast_create ( ZEND_AST_ASSIGN , var_ast , zend_ast_create_znode ( value_node ) )"		102988	2		=			
ANR	103023	Identifier	assign_ast		102988	0					
ANR	103024	CallExpression	"zend_ast_create ( ZEND_AST_ASSIGN , var_ast , zend_ast_create_znode ( value_node ) )"		102988	1					
ANR	103025	Callee	zend_ast_create		102988	0					
ANR	103026	Identifier	zend_ast_create		102988	0					
ANR	103027	ArgumentList	ZEND_AST_ASSIGN		102988	1					
ANR	103028	Argument	ZEND_AST_ASSIGN		102988	0					
ANR	103029	Identifier	ZEND_AST_ASSIGN		102988	0					
ANR	103030	Argument	var_ast		102988	1					
ANR	103031	Identifier	var_ast		102988	0					
ANR	103032	Argument	zend_ast_create_znode ( value_node )		102988	2					
ANR	103033	CallExpression	zend_ast_create_znode ( value_node )		102988	0					
ANR	103034	Callee	zend_ast_create_znode		102988	0					
ANR	103035	Identifier	zend_ast_create_znode		102988	0					
ANR	103036	ArgumentList	value_node		102988	1					
ANR	103037	Argument	value_node		102988	0					
ANR	103038	Identifier	value_node		102988	0					
ANR	103039	ExpressionStatement	"zend_compile_assign ( & dummy_node , assign_ast )"	2259:2:65121:65165	102988	1	True				
ANR	103040	CallExpression	"zend_compile_assign ( & dummy_node , assign_ast )"		102988	0					
ANR	103041	Callee	zend_compile_assign		102988	0					
ANR	103042	Identifier	zend_compile_assign		102988	0					
ANR	103043	ArgumentList	& dummy_node		102988	1					
ANR	103044	Argument	& dummy_node		102988	0					
ANR	103045	UnaryOperationExpression	& dummy_node		102988	0					
ANR	103046	UnaryOperator	&		102988	0					
ANR	103047	Identifier	dummy_node		102988	1					
ANR	103048	Argument	assign_ast		102988	1					
ANR	103049	Identifier	assign_ast		102988	0					
ANR	103050	ExpressionStatement	zend_do_free ( & dummy_node )	2261:1:65171:65196	102988	2	True				
ANR	103051	CallExpression	zend_do_free ( & dummy_node )		102988	0					
ANR	103052	Callee	zend_do_free		102988	0					
ANR	103053	Identifier	zend_do_free		102988	0					
ANR	103054	ArgumentList	& dummy_node		102988	1					
ANR	103055	Argument	& dummy_node		102988	0					
ANR	103056	UnaryOperationExpression	& dummy_node		102988	0					
ANR	103057	UnaryOperator	&		102988	0					
ANR	103058	Identifier	dummy_node		102988	1					
ANR	103059	ReturnType	static inline void		102988	1					
ANR	103060	Identifier	zend_emit_assign_znode		102988	2					
ANR	103061	ParameterList	"zend_ast * var_ast , znode * value_node"		102988	3					
ANR	103062	Parameter	zend_ast * var_ast	2251:42:64833:64849	102988	0	True				
ANR	103063	ParameterType	zend_ast *		102988	0					
ANR	103064	Identifier	var_ast		102988	1					
ANR	103065	Parameter	znode * value_node	2251:61:64852:64868	102988	1	True				
ANR	103066	ParameterType	znode *		102988	0					
ANR	103067	Identifier	value_node		102988	1					
ANR	103068	CFGEntryNode	ENTRY		102988		True				
ANR	103069	CFGExitNode	EXIT		102988		True				
ANR	103070	Symbol	var_ast		102988						
ANR	103071	Symbol	zend_ast_create_znode		102988						
ANR	103072	Symbol	var_ast -> kind		102988						
ANR	103073	Symbol	ZEND_AST_LIST		102988						
ANR	103074	Symbol	assign_ast		102988						
ANR	103075	Symbol	zend_ast_create		102988						
ANR	103076	Symbol	value_node		102988						
ANR	103077	Symbol	& dummy_node		102988						
ANR	103078	Symbol	ZEND_AST_ASSIGN		102988						
ANR	103079	Symbol	* var_ast		102988						
ANR	103080	Symbol	dummy_node		102988						
ANR	103081	Function	zend_delayed_compile_dim	2265:0:65211:65977							
ANR	103082	FunctionDef	"zend_delayed_compile_dim (znode * result , zend_ast * ast , uint32_t type)"		103081	0					
ANR	103083	CompoundStatement		2266:0:65307:65977	103081	0					
ANR	103084	IdentifierDeclStatement	zend_ast * var_ast = ast -> child [ 0 ] ;	2267:1:65310:65343	103081	0	True				
ANR	103085	IdentifierDecl	* var_ast = ast -> child [ 0 ]		103081	0					
ANR	103086	IdentifierDeclType	zend_ast *		103081	0					
ANR	103087	Identifier	var_ast		103081	1					
ANR	103088	AssignmentExpression	* var_ast = ast -> child [ 0 ]		103081	2		=			
ANR	103089	Identifier	var_ast		103081	0					
ANR	103090	ArrayIndexing	ast -> child [ 0 ]		103081	1					
ANR	103091	PtrMemberAccess	ast -> child		103081	0					
ANR	103092	Identifier	ast		103081	0					
ANR	103093	Identifier	child		103081	1					
ANR	103094	PrimaryExpression	0		103081	1					
ANR	103095	IdentifierDeclStatement	zend_ast * dim_ast = ast -> child [ 1 ] ;	2268:1:65346:65379	103081	1	True				
ANR	103096	IdentifierDecl	* dim_ast = ast -> child [ 1 ]		103081	0					
ANR	103097	IdentifierDeclType	zend_ast *		103081	0					
ANR	103098	Identifier	dim_ast		103081	1					
ANR	103099	AssignmentExpression	* dim_ast = ast -> child [ 1 ]		103081	2		=			
ANR	103100	Identifier	dim_ast		103081	0					
ANR	103101	ArrayIndexing	ast -> child [ 1 ]		103081	1					
ANR	103102	PtrMemberAccess	ast -> child		103081	0					
ANR	103103	Identifier	ast		103081	0					
ANR	103104	Identifier	child		103081	1					
ANR	103105	PrimaryExpression	1		103081	1					
ANR	103106	IdentifierDeclStatement	"znode var_node , dim_node ;"	2270:1:65383:65407	103081	2	True				
ANR	103107	IdentifierDecl	var_node		103081	0					
ANR	103108	IdentifierDeclType	znode		103081	0					
ANR	103109	Identifier	var_node		103081	1					
ANR	103110	IdentifierDecl	dim_node		103081	1					
ANR	103111	IdentifierDeclType	znode		103081	0					
ANR	103112	Identifier	dim_node		103081	1					
ANR	103113	ExpressionStatement	"zend_delayed_compile_var ( & var_node , var_ast , type )"	2272:1:65411:65461	103081	3	True				
ANR	103114	CallExpression	"zend_delayed_compile_var ( & var_node , var_ast , type )"		103081	0					
ANR	103115	Callee	zend_delayed_compile_var		103081	0					
ANR	103116	Identifier	zend_delayed_compile_var		103081	0					
ANR	103117	ArgumentList	& var_node		103081	1					
ANR	103118	Argument	& var_node		103081	0					
ANR	103119	UnaryOperationExpression	& var_node		103081	0					
ANR	103120	UnaryOperator	&		103081	0					
ANR	103121	Identifier	var_node		103081	1					
ANR	103122	Argument	var_ast		103081	1					
ANR	103123	Identifier	var_ast		103081	0					
ANR	103124	Argument	type		103081	2					
ANR	103125	Identifier	type		103081	0					
ANR	103126	ExpressionStatement	"zend_separate_if_call_and_write ( & var_node , var_ast , type )"	2273:1:65464:65521	103081	4	True				
ANR	103127	CallExpression	"zend_separate_if_call_and_write ( & var_node , var_ast , type )"		103081	0					
ANR	103128	Callee	zend_separate_if_call_and_write		103081	0					
ANR	103129	Identifier	zend_separate_if_call_and_write		103081	0					
ANR	103130	ArgumentList	& var_node		103081	1					
ANR	103131	Argument	& var_node		103081	0					
ANR	103132	UnaryOperationExpression	& var_node		103081	0					
ANR	103133	UnaryOperator	&		103081	0					
ANR	103134	Identifier	var_node		103081	1					
ANR	103135	Argument	var_ast		103081	1					
ANR	103136	Identifier	var_ast		103081	0					
ANR	103137	Argument	type		103081	2					
ANR	103138	Identifier	type		103081	0					
ANR	103139	IfStatement	if ( dim_ast == NULL )		103081	5					
ANR	103140	Condition	dim_ast == NULL	2275:5:65529:65543	103081	0	True				
ANR	103141	EqualityExpression	dim_ast == NULL		103081	0		==			
ANR	103142	Identifier	dim_ast		103081	0					
ANR	103143	Identifier	NULL		103081	1					
ANR	103144	CompoundStatement		10:22:238:238	103081	1					
ANR	103145	IfStatement	if ( type == BP_VAR_R || type == BP_VAR_IS )		103081	0					
ANR	103146	Condition	type == BP_VAR_R || type == BP_VAR_IS	2276:6:65554:65590	103081	0	True				
ANR	103147	OrExpression	type == BP_VAR_R || type == BP_VAR_IS		103081	0		||			
ANR	103148	EqualityExpression	type == BP_VAR_R		103081	0		==			
ANR	103149	Identifier	type		103081	0					
ANR	103150	Identifier	BP_VAR_R		103081	1					
ANR	103151	EqualityExpression	type == BP_VAR_IS		103081	1		==			
ANR	103152	Identifier	type		103081	0					
ANR	103153	Identifier	BP_VAR_IS		103081	1					
ANR	103154	CompoundStatement		11:45:285:285	103081	1					
ANR	103155	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for reading"" )"	2277:3:65598:65663	103081	0	True				
ANR	103156	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for reading"" )"		103081	0					
ANR	103157	Callee	zend_error_noreturn		103081	0					
ANR	103158	Identifier	zend_error_noreturn		103081	0					
ANR	103159	ArgumentList	E_COMPILE_ERROR		103081	1					
ANR	103160	Argument	E_COMPILE_ERROR		103081	0					
ANR	103161	Identifier	E_COMPILE_ERROR		103081	0					
ANR	103162	Argument	"""Cannot use [] for reading"""		103081	1					
ANR	103163	PrimaryExpression	"""Cannot use [] for reading"""		103081	0					
ANR	103164	IfStatement	if ( type == BP_VAR_UNSET )		103081	1					
ANR	103165	Condition	type == BP_VAR_UNSET	2279:6:65675:65694	103081	0	True				
ANR	103166	EqualityExpression	type == BP_VAR_UNSET		103081	0		==			
ANR	103167	Identifier	type		103081	0					
ANR	103168	Identifier	BP_VAR_UNSET		103081	1					
ANR	103169	CompoundStatement		14:28:389:389	103081	1					
ANR	103170	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for unsetting"" )"	2280:3:65702:65769	103081	0	True				
ANR	103171	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for unsetting"" )"		103081	0					
ANR	103172	Callee	zend_error_noreturn		103081	0					
ANR	103173	Identifier	zend_error_noreturn		103081	0					
ANR	103174	ArgumentList	E_COMPILE_ERROR		103081	1					
ANR	103175	Argument	E_COMPILE_ERROR		103081	0					
ANR	103176	Identifier	E_COMPILE_ERROR		103081	0					
ANR	103177	Argument	"""Cannot use [] for unsetting"""		103081	1					
ANR	103178	PrimaryExpression	"""Cannot use [] for unsetting"""		103081	0					
ANR	103179	ExpressionStatement	dim_node . op_type = IS_UNUSED	2282:2:65777:65805	103081	2	True				
ANR	103180	AssignmentExpression	dim_node . op_type = IS_UNUSED		103081	0		=			
ANR	103181	MemberAccess	dim_node . op_type		103081	0					
ANR	103182	Identifier	dim_node		103081	0					
ANR	103183	Identifier	op_type		103081	1					
ANR	103184	Identifier	IS_UNUSED		103081	1					
ANR	103185	ElseStatement	else		103081	0					
ANR	103186	CompoundStatement		18:8:507:507	103081	0					
ANR	103187	ExpressionStatement	"zend_compile_expr ( & dim_node , dim_ast )"	2284:2:65819:65856	103081	0	True				
ANR	103188	CallExpression	"zend_compile_expr ( & dim_node , dim_ast )"		103081	0					
ANR	103189	Callee	zend_compile_expr		103081	0					
ANR	103190	Identifier	zend_compile_expr		103081	0					
ANR	103191	ArgumentList	& dim_node		103081	1					
ANR	103192	Argument	& dim_node		103081	0					
ANR	103193	UnaryOperationExpression	& dim_node		103081	0					
ANR	103194	UnaryOperator	&		103081	0					
ANR	103195	Identifier	dim_node		103081	1					
ANR	103196	Argument	dim_ast		103081	1					
ANR	103197	Identifier	dim_ast		103081	0					
ANR	103198	ExpressionStatement	zend_handle_numeric_op ( & dim_node )	2285:2:65860:65893	103081	1	True				
ANR	103199	CallExpression	zend_handle_numeric_op ( & dim_node )		103081	0					
ANR	103200	Callee	zend_handle_numeric_op		103081	0					
ANR	103201	Identifier	zend_handle_numeric_op		103081	0					
ANR	103202	ArgumentList	& dim_node		103081	1					
ANR	103203	Argument	& dim_node		103081	0					
ANR	103204	UnaryOperationExpression	& dim_node		103081	0					
ANR	103205	UnaryOperator	&		103081	0					
ANR	103206	Identifier	dim_node		103081	1					
ANR	103207	ReturnStatement	"return zend_delayed_emit_op ( result , ZEND_FETCH_DIM_R , & var_node , & dim_node ) ;"	2288:1:65900:65975	103081	6	True				
ANR	103208	CallExpression	"zend_delayed_emit_op ( result , ZEND_FETCH_DIM_R , & var_node , & dim_node )"		103081	0					
ANR	103209	Callee	zend_delayed_emit_op		103081	0					
ANR	103210	Identifier	zend_delayed_emit_op		103081	0					
ANR	103211	ArgumentList	result		103081	1					
ANR	103212	Argument	result		103081	0					
ANR	103213	Identifier	result		103081	0					
ANR	103214	Argument	ZEND_FETCH_DIM_R		103081	1					
ANR	103215	Identifier	ZEND_FETCH_DIM_R		103081	0					
ANR	103216	Argument	& var_node		103081	2					
ANR	103217	UnaryOperationExpression	& var_node		103081	0					
ANR	103218	UnaryOperator	&		103081	0					
ANR	103219	Identifier	var_node		103081	1					
ANR	103220	Argument	& dim_node		103081	3					
ANR	103221	UnaryOperationExpression	& dim_node		103081	0					
ANR	103222	UnaryOperator	&		103081	0					
ANR	103223	Identifier	dim_node		103081	1					
ANR	103224	ReturnType	static zend_op *		103081	1					
ANR	103225	Identifier	zend_delayed_compile_dim		103081	2					
ANR	103226	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		103081	3					
ANR	103227	Parameter	znode * result	2265:41:65252:65264	103081	0	True				
ANR	103228	ParameterType	znode *		103081	0					
ANR	103229	Identifier	result		103081	1					
ANR	103230	Parameter	zend_ast * ast	2265:56:65267:65279	103081	1	True				
ANR	103231	ParameterType	zend_ast *		103081	0					
ANR	103232	Identifier	ast		103081	1					
ANR	103233	Parameter	uint32_t type	2265:71:65282:65294	103081	2	True				
ANR	103234	ParameterType	uint32_t		103081	0					
ANR	103235	Identifier	type		103081	1					
ANR	103236	CFGEntryNode	ENTRY		103081		True				
ANR	103237	CFGExitNode	EXIT		103081		True				
ANR	103238	Symbol	ast		103081						
ANR	103239	Symbol	dim_ast		103081						
ANR	103240	Symbol	NULL		103081						
ANR	103241	Symbol	var_node		103081						
ANR	103242	Symbol	& var_node		103081						
ANR	103243	Symbol	E_COMPILE_ERROR		103081						
ANR	103244	Symbol	dim_node		103081						
ANR	103245	Symbol	type		103081						
ANR	103246	Symbol	result		103081						
ANR	103247	Symbol	dim_node . op_type		103081						
ANR	103248	Symbol	var_ast		103081						
ANR	103249	Symbol	zend_delayed_emit_op		103081						
ANR	103250	Symbol	* ast		103081						
ANR	103251	Symbol	& dim_node		103081						
ANR	103252	Symbol	* * ast		103081						
ANR	103253	Symbol	ZEND_FETCH_DIM_R		103081						
ANR	103254	Symbol	* ast -> child		103081						
ANR	103255	Symbol	ast -> child		103081						
ANR	103256	Symbol	BP_VAR_IS		103081						
ANR	103257	Symbol	BP_VAR_UNSET		103081						
ANR	103258	Symbol	BP_VAR_R		103081						
ANR	103259	Symbol	IS_UNUSED		103081						
ANR	103260	Function	zend_compile_dim_common	2292:0:65990:66231							
ANR	103261	FunctionDef	"zend_compile_dim_common (znode * result , zend_ast * ast , uint32_t type)"		103260	0					
ANR	103262	CompoundStatement		2293:0:66092:66231	103260	0					
ANR	103263	IdentifierDeclStatement	uint32_t offset = zend_delayed_compile_begin ( ) ;	2294:1:66095:66141	103260	0	True				
ANR	103264	IdentifierDecl	offset = zend_delayed_compile_begin ( )		103260	0					
ANR	103265	IdentifierDeclType	uint32_t		103260	0					
ANR	103266	Identifier	offset		103260	1					
ANR	103267	AssignmentExpression	offset = zend_delayed_compile_begin ( )		103260	2		=			
ANR	103268	Identifier	offset		103260	0					
ANR	103269	CallExpression	zend_delayed_compile_begin ( )		103260	1					
ANR	103270	Callee	zend_delayed_compile_begin		103260	0					
ANR	103271	Identifier	zend_delayed_compile_begin		103260	0					
ANR	103272	ArgumentList			103260	1					
ANR	103273	ExpressionStatement	"zend_delayed_compile_dim ( result , ast , type )"	2295:1:66144:66187	103260	1	True				
ANR	103274	CallExpression	"zend_delayed_compile_dim ( result , ast , type )"		103260	0					
ANR	103275	Callee	zend_delayed_compile_dim		103260	0					
ANR	103276	Identifier	zend_delayed_compile_dim		103260	0					
ANR	103277	ArgumentList	result		103260	1					
ANR	103278	Argument	result		103260	0					
ANR	103279	Identifier	result		103260	0					
ANR	103280	Argument	ast		103260	1					
ANR	103281	Identifier	ast		103260	0					
ANR	103282	Argument	type		103260	2					
ANR	103283	Identifier	type		103260	0					
ANR	103284	ReturnStatement	return zend_delayed_compile_end ( offset ) ;	2296:1:66190:66229	103260	2	True				
ANR	103285	CallExpression	zend_delayed_compile_end ( offset )		103260	0					
ANR	103286	Callee	zend_delayed_compile_end		103260	0					
ANR	103287	Identifier	zend_delayed_compile_end		103260	0					
ANR	103288	ArgumentList	offset		103260	1					
ANR	103289	Argument	offset		103260	0					
ANR	103290	Identifier	offset		103260	0					
ANR	103291	ReturnType	static inline zend_op *		103260	1					
ANR	103292	Identifier	zend_compile_dim_common		103260	2					
ANR	103293	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		103260	3					
ANR	103294	Parameter	znode * result	2292:47:66037:66049	103260	0	True				
ANR	103295	ParameterType	znode *		103260	0					
ANR	103296	Identifier	result		103260	1					
ANR	103297	Parameter	zend_ast * ast	2292:62:66052:66064	103260	1	True				
ANR	103298	ParameterType	zend_ast *		103260	0					
ANR	103299	Identifier	ast		103260	1					
ANR	103300	Parameter	uint32_t type	2292:77:66067:66079	103260	2	True				
ANR	103301	ParameterType	uint32_t		103260	0					
ANR	103302	Identifier	type		103260	1					
ANR	103303	CFGEntryNode	ENTRY		103260		True				
ANR	103304	CFGExitNode	EXIT		103260		True				
ANR	103305	Symbol	result		103260						
ANR	103306	Symbol	zend_delayed_compile_end		103260						
ANR	103307	Symbol	ast		103260						
ANR	103308	Symbol	zend_delayed_compile_begin		103260						
ANR	103309	Symbol	offset		103260						
ANR	103310	Symbol	type		103260						
ANR	103311	Function	zend_compile_dim	2300:0:66244:66429							
ANR	103312	FunctionDef	"zend_compile_dim (znode * result , zend_ast * ast , uint32_t type)"		103311	0					
ANR	103313	CompoundStatement		2301:0:66321:66429	103311	0					
ANR	103314	IdentifierDeclStatement	"zend_op * opline = zend_compile_dim_common ( result , ast , type ) ;"	2302:1:66324:66384	103311	0	True				
ANR	103315	IdentifierDecl	"* opline = zend_compile_dim_common ( result , ast , type )"		103311	0					
ANR	103316	IdentifierDeclType	zend_op *		103311	0					
ANR	103317	Identifier	opline		103311	1					
ANR	103318	AssignmentExpression	"* opline = zend_compile_dim_common ( result , ast , type )"		103311	2		=			
ANR	103319	Identifier	opline		103311	0					
ANR	103320	CallExpression	"zend_compile_dim_common ( result , ast , type )"		103311	1					
ANR	103321	Callee	zend_compile_dim_common		103311	0					
ANR	103322	Identifier	zend_compile_dim_common		103311	0					
ANR	103323	ArgumentList	result		103311	1					
ANR	103324	Argument	result		103311	0					
ANR	103325	Identifier	result		103311	0					
ANR	103326	Argument	ast		103311	1					
ANR	103327	Identifier	ast		103311	0					
ANR	103328	Argument	type		103311	2					
ANR	103329	Identifier	type		103311	0					
ANR	103330	ExpressionStatement	"zend_adjust_for_fetch_type ( opline , type )"	2303:1:66387:66427	103311	1	True				
ANR	103331	CallExpression	"zend_adjust_for_fetch_type ( opline , type )"		103311	0					
ANR	103332	Callee	zend_adjust_for_fetch_type		103311	0					
ANR	103333	Identifier	zend_adjust_for_fetch_type		103311	0					
ANR	103334	ArgumentList	opline		103311	1					
ANR	103335	Argument	opline		103311	0					
ANR	103336	Identifier	opline		103311	0					
ANR	103337	Argument	type		103311	1					
ANR	103338	Identifier	type		103311	0					
ANR	103339	ReturnType	void		103311	1					
ANR	103340	Identifier	zend_compile_dim		103311	2					
ANR	103341	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		103311	3					
ANR	103342	Parameter	znode * result	2300:22:66266:66278	103311	0	True				
ANR	103343	ParameterType	znode *		103311	0					
ANR	103344	Identifier	result		103311	1					
ANR	103345	Parameter	zend_ast * ast	2300:37:66281:66293	103311	1	True				
ANR	103346	ParameterType	zend_ast *		103311	0					
ANR	103347	Identifier	ast		103311	1					
ANR	103348	Parameter	uint32_t type	2300:52:66296:66308	103311	2	True				
ANR	103349	ParameterType	uint32_t		103311	0					
ANR	103350	Identifier	type		103311	1					
ANR	103351	CFGEntryNode	ENTRY		103311		True				
ANR	103352	CFGExitNode	EXIT		103311		True				
ANR	103353	Symbol	result		103311						
ANR	103354	Symbol	ast		103311						
ANR	103355	Symbol	opline		103311						
ANR	103356	Symbol	type		103311						
ANR	103357	Symbol	zend_compile_dim_common		103311						
ANR	103358	Function	is_this_fetch	2307:0:66442:66729							
ANR	103359	FunctionDef	is_this_fetch (zend_ast * ast)		103358	0					
ANR	103360	CompoundStatement		2308:0:66498:66729	103358	0					
ANR	103361	IfStatement	if ( ast -> kind == ZEND_AST_VAR && ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL )		103358	0					
ANR	103362	Condition	ast -> kind == ZEND_AST_VAR && ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL	2309:5:66505:66569	103358	0	True				
ANR	103363	AndExpression	ast -> kind == ZEND_AST_VAR && ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL		103358	0		&&			
ANR	103364	EqualityExpression	ast -> kind == ZEND_AST_VAR		103358	0		==			
ANR	103365	PtrMemberAccess	ast -> kind		103358	0					
ANR	103366	Identifier	ast		103358	0					
ANR	103367	Identifier	kind		103358	1					
ANR	103368	Identifier	ZEND_AST_VAR		103358	1					
ANR	103369	EqualityExpression	ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL		103358	1		==			
ANR	103370	PtrMemberAccess	ast -> child [ 0 ] -> kind		103358	0					
ANR	103371	ArrayIndexing	ast -> child [ 0 ]		103358	0					
ANR	103372	PtrMemberAccess	ast -> child		103358	0					
ANR	103373	Identifier	ast		103358	0					
ANR	103374	Identifier	child		103358	1					
ANR	103375	PrimaryExpression	0		103358	1					
ANR	103376	Identifier	kind		103358	1					
ANR	103377	Identifier	ZEND_AST_ZVAL		103358	1					
ANR	103378	CompoundStatement		3:2:77:122	103358	1					
ANR	103379	IdentifierDeclStatement	zval * name = zend_ast_get_zval ( ast -> child [ 0 ] ) ;	2310:2:66576:66621	103358	0	True				
ANR	103380	IdentifierDecl	* name = zend_ast_get_zval ( ast -> child [ 0 ] )		103358	0					
ANR	103381	IdentifierDeclType	zval *		103358	0					
ANR	103382	Identifier	name		103358	1					
ANR	103383	AssignmentExpression	* name = zend_ast_get_zval ( ast -> child [ 0 ] )		103358	2		=			
ANR	103384	Identifier	name		103358	0					
ANR	103385	CallExpression	zend_ast_get_zval ( ast -> child [ 0 ] )		103358	1					
ANR	103386	Callee	zend_ast_get_zval		103358	0					
ANR	103387	Identifier	zend_ast_get_zval		103358	0					
ANR	103388	ArgumentList	ast -> child [ 0 ]		103358	1					
ANR	103389	Argument	ast -> child [ 0 ]		103358	0					
ANR	103390	ArrayIndexing	ast -> child [ 0 ]		103358	0					
ANR	103391	PtrMemberAccess	ast -> child		103358	0					
ANR	103392	Identifier	ast		103358	0					
ANR	103393	Identifier	child		103358	1					
ANR	103394	PrimaryExpression	0		103358	1					
ANR	103395	ReturnStatement	"return Z_TYPE_P ( name ) == IS_STRING && zend_string_equals_literal ( Z_STR_P ( name ) , ""this"" ) ;"	2311:2:66625:66712	103358	1	True				
ANR	103396	AndExpression	"Z_TYPE_P ( name ) == IS_STRING && zend_string_equals_literal ( Z_STR_P ( name ) , ""this"" )"		103358	0		&&			
ANR	103397	EqualityExpression	Z_TYPE_P ( name ) == IS_STRING		103358	0		==			
ANR	103398	CallExpression	Z_TYPE_P ( name )		103358	0					
ANR	103399	Callee	Z_TYPE_P		103358	0					
ANR	103400	Identifier	Z_TYPE_P		103358	0					
ANR	103401	ArgumentList	name		103358	1					
ANR	103402	Argument	name		103358	0					
ANR	103403	Identifier	name		103358	0					
ANR	103404	Identifier	IS_STRING		103358	1					
ANR	103405	CallExpression	"zend_string_equals_literal ( Z_STR_P ( name ) , ""this"" )"		103358	1					
ANR	103406	Callee	zend_string_equals_literal		103358	0					
ANR	103407	Identifier	zend_string_equals_literal		103358	0					
ANR	103408	ArgumentList	Z_STR_P ( name )		103358	1					
ANR	103409	Argument	Z_STR_P ( name )		103358	0					
ANR	103410	CallExpression	Z_STR_P ( name )		103358	0					
ANR	103411	Callee	Z_STR_P		103358	0					
ANR	103412	Identifier	Z_STR_P		103358	0					
ANR	103413	ArgumentList	name		103358	1					
ANR	103414	Argument	name		103358	0					
ANR	103415	Identifier	name		103358	0					
ANR	103416	Argument	"""this"""		103358	1					
ANR	103417	PrimaryExpression	"""this"""		103358	0					
ANR	103418	ReturnStatement	return 0 ;	2314:1:66719:66727	103358	1	True				
ANR	103419	PrimaryExpression	0		103358	0					
ANR	103420	ReturnType	static zend_bool		103358	1					
ANR	103421	Identifier	is_this_fetch		103358	2					
ANR	103422	ParameterList	zend_ast * ast		103358	3					
ANR	103423	Parameter	zend_ast * ast	2307:31:66473:66485	103358	0	True				
ANR	103424	ParameterType	zend_ast *		103358	0					
ANR	103425	Identifier	ast		103358	1					
ANR	103426	CFGEntryNode	ENTRY		103358		True				
ANR	103427	CFGExitNode	EXIT		103358		True				
ANR	103428	Symbol	* * * ast		103358						
ANR	103429	Symbol	* * ast -> child		103358						
ANR	103430	Symbol	zend_string_equals_literal		103358						
ANR	103431	Symbol	ast -> kind		103358						
ANR	103432	Symbol	ast		103358						
ANR	103433	Symbol	ast -> child [ 0 ] -> kind		103358						
ANR	103434	Symbol	Z_TYPE_P		103358						
ANR	103435	Symbol	* ast		103358						
ANR	103436	Symbol	ZEND_AST_VAR		103358						
ANR	103437	Symbol	* * ast		103358						
ANR	103438	Symbol	ZEND_AST_ZVAL		103358						
ANR	103439	Symbol	name		103358						
ANR	103440	Symbol	* ast -> child		103358						
ANR	103441	Symbol	Z_STR_P		103358						
ANR	103442	Symbol	IS_STRING		103358						
ANR	103443	Symbol	ast -> child		103358						
ANR	103444	Symbol	zend_ast_get_zval		103358						
ANR	103445	Function	zend_delayed_compile_prop	2318:0:66742:67440							
ANR	103446	FunctionDef	"zend_delayed_compile_prop (znode * result , zend_ast * ast , uint32_t type)"		103445	0					
ANR	103447	CompoundStatement		2319:0:66839:67440	103445	0					
ANR	103448	IdentifierDeclStatement	zend_ast * obj_ast = ast -> child [ 0 ] ;	2320:1:66842:66875	103445	0	True				
ANR	103449	IdentifierDecl	* obj_ast = ast -> child [ 0 ]		103445	0					
ANR	103450	IdentifierDeclType	zend_ast *		103445	0					
ANR	103451	Identifier	obj_ast		103445	1					
ANR	103452	AssignmentExpression	* obj_ast = ast -> child [ 0 ]		103445	2		=			
ANR	103453	Identifier	obj_ast		103445	0					
ANR	103454	ArrayIndexing	ast -> child [ 0 ]		103445	1					
ANR	103455	PtrMemberAccess	ast -> child		103445	0					
ANR	103456	Identifier	ast		103445	0					
ANR	103457	Identifier	child		103445	1					
ANR	103458	PrimaryExpression	0		103445	1					
ANR	103459	IdentifierDeclStatement	zend_ast * prop_ast = ast -> child [ 1 ] ;	2321:1:66878:66912	103445	1	True				
ANR	103460	IdentifierDecl	* prop_ast = ast -> child [ 1 ]		103445	0					
ANR	103461	IdentifierDeclType	zend_ast *		103445	0					
ANR	103462	Identifier	prop_ast		103445	1					
ANR	103463	AssignmentExpression	* prop_ast = ast -> child [ 1 ]		103445	2		=			
ANR	103464	Identifier	prop_ast		103445	0					
ANR	103465	ArrayIndexing	ast -> child [ 1 ]		103445	1					
ANR	103466	PtrMemberAccess	ast -> child		103445	0					
ANR	103467	Identifier	ast		103445	0					
ANR	103468	Identifier	child		103445	1					
ANR	103469	PrimaryExpression	1		103445	1					
ANR	103470	IdentifierDeclStatement	"znode obj_node , prop_node ;"	2323:1:66916:66941	103445	2	True				
ANR	103471	IdentifierDecl	obj_node		103445	0					
ANR	103472	IdentifierDeclType	znode		103445	0					
ANR	103473	Identifier	obj_node		103445	1					
ANR	103474	IdentifierDecl	prop_node		103445	1					
ANR	103475	IdentifierDeclType	znode		103445	0					
ANR	103476	Identifier	prop_node		103445	1					
ANR	103477	IdentifierDeclStatement	zend_op * opline ;	2324:1:66944:66959	103445	3	True				
ANR	103478	IdentifierDecl	* opline		103445	0					
ANR	103479	IdentifierDeclType	zend_op *		103445	0					
ANR	103480	Identifier	opline		103445	1					
ANR	103481	IfStatement	if ( is_this_fetch ( obj_ast ) )		103445	4					
ANR	103482	Condition	is_this_fetch ( obj_ast )	2326:5:66967:66988	103445	0	True				
ANR	103483	CallExpression	is_this_fetch ( obj_ast )		103445	0					
ANR	103484	Callee	is_this_fetch		103445	0					
ANR	103485	Identifier	is_this_fetch		103445	0					
ANR	103486	ArgumentList	obj_ast		103445	1					
ANR	103487	Argument	obj_ast		103445	0					
ANR	103488	Identifier	obj_ast		103445	0					
ANR	103489	CompoundStatement		8:29:151:151	103445	1					
ANR	103490	ExpressionStatement	obj_node . op_type = IS_UNUSED	2327:2:66995:67023	103445	0	True				
ANR	103491	AssignmentExpression	obj_node . op_type = IS_UNUSED		103445	0		=			
ANR	103492	MemberAccess	obj_node . op_type		103445	0					
ANR	103493	Identifier	obj_node		103445	0					
ANR	103494	Identifier	op_type		103445	1					
ANR	103495	Identifier	IS_UNUSED		103445	1					
ANR	103496	ElseStatement	else		103445	0					
ANR	103497	CompoundStatement		10:8:193:193	103445	0					
ANR	103498	ExpressionStatement	"zend_delayed_compile_var ( & obj_node , obj_ast , type )"	2329:2:67037:67087	103445	0	True				
ANR	103499	CallExpression	"zend_delayed_compile_var ( & obj_node , obj_ast , type )"		103445	0					
ANR	103500	Callee	zend_delayed_compile_var		103445	0					
ANR	103501	Identifier	zend_delayed_compile_var		103445	0					
ANR	103502	ArgumentList	& obj_node		103445	1					
ANR	103503	Argument	& obj_node		103445	0					
ANR	103504	UnaryOperationExpression	& obj_node		103445	0					
ANR	103505	UnaryOperator	&		103445	0					
ANR	103506	Identifier	obj_node		103445	1					
ANR	103507	Argument	obj_ast		103445	1					
ANR	103508	Identifier	obj_ast		103445	0					
ANR	103509	Argument	type		103445	2					
ANR	103510	Identifier	type		103445	0					
ANR	103511	ExpressionStatement	"zend_separate_if_call_and_write ( & obj_node , obj_ast , type )"	2330:2:67091:67148	103445	1	True				
ANR	103512	CallExpression	"zend_separate_if_call_and_write ( & obj_node , obj_ast , type )"		103445	0					
ANR	103513	Callee	zend_separate_if_call_and_write		103445	0					
ANR	103514	Identifier	zend_separate_if_call_and_write		103445	0					
ANR	103515	ArgumentList	& obj_node		103445	1					
ANR	103516	Argument	& obj_node		103445	0					
ANR	103517	UnaryOperationExpression	& obj_node		103445	0					
ANR	103518	UnaryOperator	&		103445	0					
ANR	103519	Identifier	obj_node		103445	1					
ANR	103520	Argument	obj_ast		103445	1					
ANR	103521	Identifier	obj_ast		103445	0					
ANR	103522	Argument	type		103445	2					
ANR	103523	Identifier	type		103445	0					
ANR	103524	ExpressionStatement	"zend_compile_expr ( & prop_node , prop_ast )"	2332:1:67154:67193	103445	5	True				
ANR	103525	CallExpression	"zend_compile_expr ( & prop_node , prop_ast )"		103445	0					
ANR	103526	Callee	zend_compile_expr		103445	0					
ANR	103527	Identifier	zend_compile_expr		103445	0					
ANR	103528	ArgumentList	& prop_node		103445	1					
ANR	103529	Argument	& prop_node		103445	0					
ANR	103530	UnaryOperationExpression	& prop_node		103445	0					
ANR	103531	UnaryOperator	&		103445	0					
ANR	103532	Identifier	prop_node		103445	1					
ANR	103533	Argument	prop_ast		103445	1					
ANR	103534	Identifier	prop_ast		103445	0					
ANR	103535	ExpressionStatement	"opline = zend_delayed_emit_op ( result , ZEND_FETCH_OBJ_R , & obj_node , & prop_node )"	2334:1:67197:67275	103445	6	True				
ANR	103536	AssignmentExpression	"opline = zend_delayed_emit_op ( result , ZEND_FETCH_OBJ_R , & obj_node , & prop_node )"		103445	0		=			
ANR	103537	Identifier	opline		103445	0					
ANR	103538	CallExpression	"zend_delayed_emit_op ( result , ZEND_FETCH_OBJ_R , & obj_node , & prop_node )"		103445	1					
ANR	103539	Callee	zend_delayed_emit_op		103445	0					
ANR	103540	Identifier	zend_delayed_emit_op		103445	0					
ANR	103541	ArgumentList	result		103445	1					
ANR	103542	Argument	result		103445	0					
ANR	103543	Identifier	result		103445	0					
ANR	103544	Argument	ZEND_FETCH_OBJ_R		103445	1					
ANR	103545	Identifier	ZEND_FETCH_OBJ_R		103445	0					
ANR	103546	Argument	& obj_node		103445	2					
ANR	103547	UnaryOperationExpression	& obj_node		103445	0					
ANR	103548	UnaryOperator	&		103445	0					
ANR	103549	Identifier	obj_node		103445	1					
ANR	103550	Argument	& prop_node		103445	3					
ANR	103551	UnaryOperationExpression	& prop_node		103445	0					
ANR	103552	UnaryOperator	&		103445	0					
ANR	103553	Identifier	prop_node		103445	1					
ANR	103554	IfStatement	if ( opline -> op2_type == IS_CONST )		103445	7					
ANR	103555	Condition	opline -> op2_type == IS_CONST	2335:5:67282:67309	103445	0	True				
ANR	103556	EqualityExpression	opline -> op2_type == IS_CONST		103445	0		==			
ANR	103557	PtrMemberAccess	opline -> op2_type		103445	0					
ANR	103558	Identifier	opline		103445	0					
ANR	103559	Identifier	op2_type		103445	1					
ANR	103560	Identifier	IS_CONST		103445	1					
ANR	103561	CompoundStatement		17:35:472:472	103445	1					
ANR	103562	ExpressionStatement	convert_to_string ( CT_CONSTANT ( opline -> op2 ) )	2336:2:67316:67359	103445	0	True				
ANR	103563	CallExpression	convert_to_string ( CT_CONSTANT ( opline -> op2 ) )		103445	0					
ANR	103564	Callee	convert_to_string		103445	0					
ANR	103565	Identifier	convert_to_string		103445	0					
ANR	103566	ArgumentList	CT_CONSTANT ( opline -> op2 )		103445	1					
ANR	103567	Argument	CT_CONSTANT ( opline -> op2 )		103445	0					
ANR	103568	CallExpression	CT_CONSTANT ( opline -> op2 )		103445	0					
ANR	103569	Callee	CT_CONSTANT		103445	0					
ANR	103570	Identifier	CT_CONSTANT		103445	0					
ANR	103571	ArgumentList	opline -> op2		103445	1					
ANR	103572	Argument	opline -> op2		103445	0					
ANR	103573	PtrMemberAccess	opline -> op2		103445	0					
ANR	103574	Identifier	opline		103445	0					
ANR	103575	Identifier	op2		103445	1					
ANR	103576	ExpressionStatement	zend_alloc_polymorphic_cache_slot ( opline -> op2 . constant )	2337:2:67363:67418	103445	1	True				
ANR	103577	CallExpression	zend_alloc_polymorphic_cache_slot ( opline -> op2 . constant )		103445	0					
ANR	103578	Callee	zend_alloc_polymorphic_cache_slot		103445	0					
ANR	103579	Identifier	zend_alloc_polymorphic_cache_slot		103445	0					
ANR	103580	ArgumentList	opline -> op2 . constant		103445	1					
ANR	103581	Argument	opline -> op2 . constant		103445	0					
ANR	103582	MemberAccess	opline -> op2 . constant		103445	0					
ANR	103583	PtrMemberAccess	opline -> op2		103445	0					
ANR	103584	Identifier	opline		103445	0					
ANR	103585	Identifier	op2		103445	1					
ANR	103586	Identifier	constant		103445	1					
ANR	103587	ReturnStatement	return opline ;	2340:1:67425:67438	103445	8	True				
ANR	103588	Identifier	opline		103445	0					
ANR	103589	ReturnType	static zend_op *		103445	1					
ANR	103590	Identifier	zend_delayed_compile_prop		103445	2					
ANR	103591	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		103445	3					
ANR	103592	Parameter	znode * result	2318:42:66784:66796	103445	0	True				
ANR	103593	ParameterType	znode *		103445	0					
ANR	103594	Identifier	result		103445	1					
ANR	103595	Parameter	zend_ast * ast	2318:57:66799:66811	103445	1	True				
ANR	103596	ParameterType	zend_ast *		103445	0					
ANR	103597	Identifier	ast		103445	1					
ANR	103598	Parameter	uint32_t type	2318:72:66814:66826	103445	2	True				
ANR	103599	ParameterType	uint32_t		103445	0					
ANR	103600	Identifier	type		103445	1					
ANR	103601	CFGEntryNode	ENTRY		103445		True				
ANR	103602	CFGExitNode	EXIT		103445		True				
ANR	103603	Symbol	opline -> op2		103445						
ANR	103604	Symbol	ast		103445						
ANR	103605	Symbol	prop_node		103445						
ANR	103606	Symbol	obj_node . op_type		103445						
ANR	103607	Symbol	type		103445						
ANR	103608	Symbol	& obj_node		103445						
ANR	103609	Symbol	result		103445						
ANR	103610	Symbol	zend_delayed_emit_op		103445						
ANR	103611	Symbol	* ast		103445						
ANR	103612	Symbol	opline		103445						
ANR	103613	Symbol	CT_CONSTANT		103445						
ANR	103614	Symbol	* * ast		103445						
ANR	103615	Symbol	& prop_node		103445						
ANR	103616	Symbol	obj_node		103445						
ANR	103617	Symbol	is_this_fetch		103445						
ANR	103618	Symbol	ZEND_FETCH_OBJ_R		103445						
ANR	103619	Symbol	IS_CONST		103445						
ANR	103620	Symbol	obj_ast		103445						
ANR	103621	Symbol	prop_ast		103445						
ANR	103622	Symbol	* opline		103445						
ANR	103623	Symbol	opline -> op2 . constant		103445						
ANR	103624	Symbol	* ast -> child		103445						
ANR	103625	Symbol	opline -> op2_type		103445						
ANR	103626	Symbol	ast -> child		103445						
ANR	103627	Symbol	IS_UNUSED		103445						
ANR	103628	Function	zend_compile_prop_common	2344:0:67453:67689							
ANR	103629	FunctionDef	"zend_compile_prop_common (znode * result , zend_ast * ast , uint32_t type)"		103628	0					
ANR	103630	CompoundStatement		2345:0:67549:67689	103628	0					
ANR	103631	IdentifierDeclStatement	uint32_t offset = zend_delayed_compile_begin ( ) ;	2346:1:67552:67598	103628	0	True				
ANR	103632	IdentifierDecl	offset = zend_delayed_compile_begin ( )		103628	0					
ANR	103633	IdentifierDeclType	uint32_t		103628	0					
ANR	103634	Identifier	offset		103628	1					
ANR	103635	AssignmentExpression	offset = zend_delayed_compile_begin ( )		103628	2		=			
ANR	103636	Identifier	offset		103628	0					
ANR	103637	CallExpression	zend_delayed_compile_begin ( )		103628	1					
ANR	103638	Callee	zend_delayed_compile_begin		103628	0					
ANR	103639	Identifier	zend_delayed_compile_begin		103628	0					
ANR	103640	ArgumentList			103628	1					
ANR	103641	ExpressionStatement	"zend_delayed_compile_prop ( result , ast , type )"	2347:1:67601:67645	103628	1	True				
ANR	103642	CallExpression	"zend_delayed_compile_prop ( result , ast , type )"		103628	0					
ANR	103643	Callee	zend_delayed_compile_prop		103628	0					
ANR	103644	Identifier	zend_delayed_compile_prop		103628	0					
ANR	103645	ArgumentList	result		103628	1					
ANR	103646	Argument	result		103628	0					
ANR	103647	Identifier	result		103628	0					
ANR	103648	Argument	ast		103628	1					
ANR	103649	Identifier	ast		103628	0					
ANR	103650	Argument	type		103628	2					
ANR	103651	Identifier	type		103628	0					
ANR	103652	ReturnStatement	return zend_delayed_compile_end ( offset ) ;	2348:1:67648:67687	103628	2	True				
ANR	103653	CallExpression	zend_delayed_compile_end ( offset )		103628	0					
ANR	103654	Callee	zend_delayed_compile_end		103628	0					
ANR	103655	Identifier	zend_delayed_compile_end		103628	0					
ANR	103656	ArgumentList	offset		103628	1					
ANR	103657	Argument	offset		103628	0					
ANR	103658	Identifier	offset		103628	0					
ANR	103659	ReturnType	static zend_op *		103628	1					
ANR	103660	Identifier	zend_compile_prop_common		103628	2					
ANR	103661	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		103628	3					
ANR	103662	Parameter	znode * result	2344:41:67494:67506	103628	0	True				
ANR	103663	ParameterType	znode *		103628	0					
ANR	103664	Identifier	result		103628	1					
ANR	103665	Parameter	zend_ast * ast	2344:56:67509:67521	103628	1	True				
ANR	103666	ParameterType	zend_ast *		103628	0					
ANR	103667	Identifier	ast		103628	1					
ANR	103668	Parameter	uint32_t type	2344:71:67524:67536	103628	2	True				
ANR	103669	ParameterType	uint32_t		103628	0					
ANR	103670	Identifier	type		103628	1					
ANR	103671	CFGEntryNode	ENTRY		103628		True				
ANR	103672	CFGExitNode	EXIT		103628		True				
ANR	103673	Symbol	result		103628						
ANR	103674	Symbol	zend_delayed_compile_end		103628						
ANR	103675	Symbol	ast		103628						
ANR	103676	Symbol	zend_delayed_compile_begin		103628						
ANR	103677	Symbol	offset		103628						
ANR	103678	Symbol	type		103628						
ANR	103679	Function	zend_compile_prop	2352:0:67702:67889							
ANR	103680	FunctionDef	"zend_compile_prop (znode * result , zend_ast * ast , uint32_t type)"		103679	0					
ANR	103681	CompoundStatement		2353:0:67780:67889	103679	0					
ANR	103682	IdentifierDeclStatement	"zend_op * opline = zend_compile_prop_common ( result , ast , type ) ;"	2354:1:67783:67844	103679	0	True				
ANR	103683	IdentifierDecl	"* opline = zend_compile_prop_common ( result , ast , type )"		103679	0					
ANR	103684	IdentifierDeclType	zend_op *		103679	0					
ANR	103685	Identifier	opline		103679	1					
ANR	103686	AssignmentExpression	"* opline = zend_compile_prop_common ( result , ast , type )"		103679	2		=			
ANR	103687	Identifier	opline		103679	0					
ANR	103688	CallExpression	"zend_compile_prop_common ( result , ast , type )"		103679	1					
ANR	103689	Callee	zend_compile_prop_common		103679	0					
ANR	103690	Identifier	zend_compile_prop_common		103679	0					
ANR	103691	ArgumentList	result		103679	1					
ANR	103692	Argument	result		103679	0					
ANR	103693	Identifier	result		103679	0					
ANR	103694	Argument	ast		103679	1					
ANR	103695	Identifier	ast		103679	0					
ANR	103696	Argument	type		103679	2					
ANR	103697	Identifier	type		103679	0					
ANR	103698	ExpressionStatement	"zend_adjust_for_fetch_type ( opline , type )"	2355:1:67847:67887	103679	1	True				
ANR	103699	CallExpression	"zend_adjust_for_fetch_type ( opline , type )"		103679	0					
ANR	103700	Callee	zend_adjust_for_fetch_type		103679	0					
ANR	103701	Identifier	zend_adjust_for_fetch_type		103679	0					
ANR	103702	ArgumentList	opline		103679	1					
ANR	103703	Argument	opline		103679	0					
ANR	103704	Identifier	opline		103679	0					
ANR	103705	Argument	type		103679	1					
ANR	103706	Identifier	type		103679	0					
ANR	103707	ReturnType	void		103679	1					
ANR	103708	Identifier	zend_compile_prop		103679	2					
ANR	103709	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		103679	3					
ANR	103710	Parameter	znode * result	2352:23:67725:67737	103679	0	True				
ANR	103711	ParameterType	znode *		103679	0					
ANR	103712	Identifier	result		103679	1					
ANR	103713	Parameter	zend_ast * ast	2352:38:67740:67752	103679	1	True				
ANR	103714	ParameterType	zend_ast *		103679	0					
ANR	103715	Identifier	ast		103679	1					
ANR	103716	Parameter	uint32_t type	2352:53:67755:67767	103679	2	True				
ANR	103717	ParameterType	uint32_t		103679	0					
ANR	103718	Identifier	type		103679	1					
ANR	103719	CFGEntryNode	ENTRY		103679		True				
ANR	103720	CFGExitNode	EXIT		103679		True				
ANR	103721	Symbol	result		103679						
ANR	103722	Symbol	zend_compile_prop_common		103679						
ANR	103723	Symbol	ast		103679						
ANR	103724	Symbol	opline		103679						
ANR	103725	Symbol	type		103679						
ANR	103726	Function	zend_compile_static_prop_common	2359:0:67902:69021							
ANR	103727	FunctionDef	"zend_compile_static_prop_common (znode * result , zend_ast * ast , uint32_t type , int delayed)"		103726	0					
ANR	103728	CompoundStatement		2360:0:68011:69021	103726	0					
ANR	103729	IdentifierDeclStatement	zend_ast * class_ast = ast -> child [ 0 ] ;	2361:1:68014:68049	103726	0	True				
ANR	103730	IdentifierDecl	* class_ast = ast -> child [ 0 ]		103726	0					
ANR	103731	IdentifierDeclType	zend_ast *		103726	0					
ANR	103732	Identifier	class_ast		103726	1					
ANR	103733	AssignmentExpression	* class_ast = ast -> child [ 0 ]		103726	2		=			
ANR	103734	Identifier	class_ast		103726	0					
ANR	103735	ArrayIndexing	ast -> child [ 0 ]		103726	1					
ANR	103736	PtrMemberAccess	ast -> child		103726	0					
ANR	103737	Identifier	ast		103726	0					
ANR	103738	Identifier	child		103726	1					
ANR	103739	PrimaryExpression	0		103726	1					
ANR	103740	IdentifierDeclStatement	zend_ast * prop_ast = ast -> child [ 1 ] ;	2362:1:68052:68086	103726	1	True				
ANR	103741	IdentifierDecl	* prop_ast = ast -> child [ 1 ]		103726	0					
ANR	103742	IdentifierDeclType	zend_ast *		103726	0					
ANR	103743	Identifier	prop_ast		103726	1					
ANR	103744	AssignmentExpression	* prop_ast = ast -> child [ 1 ]		103726	2		=			
ANR	103745	Identifier	prop_ast		103726	0					
ANR	103746	ArrayIndexing	ast -> child [ 1 ]		103726	1					
ANR	103747	PtrMemberAccess	ast -> child		103726	0					
ANR	103748	Identifier	ast		103726	0					
ANR	103749	Identifier	child		103726	1					
ANR	103750	PrimaryExpression	1		103726	1					
ANR	103751	IdentifierDeclStatement	"znode class_node , prop_node ;"	2364:1:68090:68117	103726	2	True				
ANR	103752	IdentifierDecl	class_node		103726	0					
ANR	103753	IdentifierDeclType	znode		103726	0					
ANR	103754	Identifier	class_node		103726	1					
ANR	103755	IdentifierDecl	prop_node		103726	1					
ANR	103756	IdentifierDeclType	znode		103726	0					
ANR	103757	Identifier	prop_node		103726	1					
ANR	103758	IdentifierDeclStatement	zend_op * opline ;	2365:1:68120:68135	103726	3	True				
ANR	103759	IdentifierDecl	* opline		103726	0					
ANR	103760	IdentifierDeclType	zend_op *		103726	0					
ANR	103761	Identifier	opline		103726	1					
ANR	103762	IfStatement	if ( zend_is_const_default_class_ref ( class_ast ) )		103726	4					
ANR	103763	Condition	zend_is_const_default_class_ref ( class_ast )	2367:5:68143:68184	103726	0	True				
ANR	103764	CallExpression	zend_is_const_default_class_ref ( class_ast )		103726	0					
ANR	103765	Callee	zend_is_const_default_class_ref		103726	0					
ANR	103766	Identifier	zend_is_const_default_class_ref		103726	0					
ANR	103767	ArgumentList	class_ast		103726	1					
ANR	103768	Argument	class_ast		103726	0					
ANR	103769	Identifier	class_ast		103726	0					
ANR	103770	CompoundStatement		8:49:175:175	103726	1					
ANR	103771	ExpressionStatement	class_node . op_type = IS_CONST	2368:2:68191:68220	103726	0	True				
ANR	103772	AssignmentExpression	class_node . op_type = IS_CONST		103726	0		=			
ANR	103773	MemberAccess	class_node . op_type		103726	0					
ANR	103774	Identifier	class_node		103726	0					
ANR	103775	Identifier	op_type		103726	1					
ANR	103776	Identifier	IS_CONST		103726	1					
ANR	103777	ExpressionStatement	"ZVAL_STR ( & class_node . u . constant , zend_resolve_class_name_ast ( class_ast ) )"	2369:2:68224:68296	103726	1	True				
ANR	103778	CallExpression	"ZVAL_STR ( & class_node . u . constant , zend_resolve_class_name_ast ( class_ast ) )"		103726	0					
ANR	103779	Callee	ZVAL_STR		103726	0					
ANR	103780	Identifier	ZVAL_STR		103726	0					
ANR	103781	ArgumentList	& class_node . u . constant		103726	1					
ANR	103782	Argument	& class_node . u . constant		103726	0					
ANR	103783	UnaryOperationExpression	& class_node . u . constant		103726	0					
ANR	103784	UnaryOperator	&		103726	0					
ANR	103785	MemberAccess	class_node . u . constant		103726	1					
ANR	103786	MemberAccess	class_node . u		103726	0					
ANR	103787	Identifier	class_node		103726	0					
ANR	103788	Identifier	u		103726	1					
ANR	103789	Identifier	constant		103726	1					
ANR	103790	Argument	zend_resolve_class_name_ast ( class_ast )		103726	1					
ANR	103791	CallExpression	zend_resolve_class_name_ast ( class_ast )		103726	0					
ANR	103792	Callee	zend_resolve_class_name_ast		103726	0					
ANR	103793	Identifier	zend_resolve_class_name_ast		103726	0					
ANR	103794	ArgumentList	class_ast		103726	1					
ANR	103795	Argument	class_ast		103726	0					
ANR	103796	Identifier	class_ast		103726	0					
ANR	103797	ElseStatement	else		103726	0					
ANR	103798	CompoundStatement		11:8:294:294	103726	0					
ANR	103799	ExpressionStatement	"zend_compile_class_ref ( & class_node , class_ast , 1 )"	2371:2:68310:68359	103726	0	True				
ANR	103800	CallExpression	"zend_compile_class_ref ( & class_node , class_ast , 1 )"		103726	0					
ANR	103801	Callee	zend_compile_class_ref		103726	0					
ANR	103802	Identifier	zend_compile_class_ref		103726	0					
ANR	103803	ArgumentList	& class_node		103726	1					
ANR	103804	Argument	& class_node		103726	0					
ANR	103805	UnaryOperationExpression	& class_node		103726	0					
ANR	103806	UnaryOperator	&		103726	0					
ANR	103807	Identifier	class_node		103726	1					
ANR	103808	Argument	class_ast		103726	1					
ANR	103809	Identifier	class_ast		103726	0					
ANR	103810	Argument	1		103726	2					
ANR	103811	PrimaryExpression	1		103726	0					
ANR	103812	ExpressionStatement	"zend_compile_expr ( & prop_node , prop_ast )"	2374:1:68366:68405	103726	5	True				
ANR	103813	CallExpression	"zend_compile_expr ( & prop_node , prop_ast )"		103726	0					
ANR	103814	Callee	zend_compile_expr		103726	0					
ANR	103815	Identifier	zend_compile_expr		103726	0					
ANR	103816	ArgumentList	& prop_node		103726	1					
ANR	103817	Argument	& prop_node		103726	0					
ANR	103818	UnaryOperationExpression	& prop_node		103726	0					
ANR	103819	UnaryOperator	&		103726	0					
ANR	103820	Identifier	prop_node		103726	1					
ANR	103821	Argument	prop_ast		103726	1					
ANR	103822	Identifier	prop_ast		103726	0					
ANR	103823	IfStatement	if ( delayed )		103726	6					
ANR	103824	Condition	delayed	2376:5:68413:68419	103726	0	True				
ANR	103825	Identifier	delayed		103726	0					
ANR	103826	CompoundStatement		17:14:410:410	103726	1					
ANR	103827	ExpressionStatement	"opline = zend_delayed_emit_op ( result , ZEND_FETCH_R , & prop_node , NULL )"	2377:2:68426:68495	103726	0	True				
ANR	103828	AssignmentExpression	"opline = zend_delayed_emit_op ( result , ZEND_FETCH_R , & prop_node , NULL )"		103726	0		=			
ANR	103829	Identifier	opline		103726	0					
ANR	103830	CallExpression	"zend_delayed_emit_op ( result , ZEND_FETCH_R , & prop_node , NULL )"		103726	1					
ANR	103831	Callee	zend_delayed_emit_op		103726	0					
ANR	103832	Identifier	zend_delayed_emit_op		103726	0					
ANR	103833	ArgumentList	result		103726	1					
ANR	103834	Argument	result		103726	0					
ANR	103835	Identifier	result		103726	0					
ANR	103836	Argument	ZEND_FETCH_R		103726	1					
ANR	103837	Identifier	ZEND_FETCH_R		103726	0					
ANR	103838	Argument	& prop_node		103726	2					
ANR	103839	UnaryOperationExpression	& prop_node		103726	0					
ANR	103840	UnaryOperator	&		103726	0					
ANR	103841	Identifier	prop_node		103726	1					
ANR	103842	Argument	NULL		103726	3					
ANR	103843	Identifier	NULL		103726	0					
ANR	103844	ElseStatement	else		103726	0					
ANR	103845	CompoundStatement		19:8:493:493	103726	0					
ANR	103846	ExpressionStatement	"opline = zend_emit_op ( result , ZEND_FETCH_R , & prop_node , NULL )"	2379:2:68509:68570	103726	0	True				
ANR	103847	AssignmentExpression	"opline = zend_emit_op ( result , ZEND_FETCH_R , & prop_node , NULL )"		103726	0		=			
ANR	103848	Identifier	opline		103726	0					
ANR	103849	CallExpression	"zend_emit_op ( result , ZEND_FETCH_R , & prop_node , NULL )"		103726	1					
ANR	103850	Callee	zend_emit_op		103726	0					
ANR	103851	Identifier	zend_emit_op		103726	0					
ANR	103852	ArgumentList	result		103726	1					
ANR	103853	Argument	result		103726	0					
ANR	103854	Identifier	result		103726	0					
ANR	103855	Argument	ZEND_FETCH_R		103726	1					
ANR	103856	Identifier	ZEND_FETCH_R		103726	0					
ANR	103857	Argument	& prop_node		103726	2					
ANR	103858	UnaryOperationExpression	& prop_node		103726	0					
ANR	103859	UnaryOperator	&		103726	0					
ANR	103860	Identifier	prop_node		103726	1					
ANR	103861	Argument	NULL		103726	3					
ANR	103862	Identifier	NULL		103726	0					
ANR	103863	IfStatement	if ( opline -> op1_type == IS_CONST )		103726	7					
ANR	103864	Condition	opline -> op1_type == IS_CONST	2381:5:68580:68607	103726	0	True				
ANR	103865	EqualityExpression	opline -> op1_type == IS_CONST		103726	0		==			
ANR	103866	PtrMemberAccess	opline -> op1_type		103726	0					
ANR	103867	Identifier	opline		103726	0					
ANR	103868	Identifier	op1_type		103726	1					
ANR	103869	Identifier	IS_CONST		103726	1					
ANR	103870	CompoundStatement		22:35:598:598	103726	1					
ANR	103871	ExpressionStatement	convert_to_string ( CT_CONSTANT ( opline -> op1 ) )	2382:2:68614:68657	103726	0	True				
ANR	103872	CallExpression	convert_to_string ( CT_CONSTANT ( opline -> op1 ) )		103726	0					
ANR	103873	Callee	convert_to_string		103726	0					
ANR	103874	Identifier	convert_to_string		103726	0					
ANR	103875	ArgumentList	CT_CONSTANT ( opline -> op1 )		103726	1					
ANR	103876	Argument	CT_CONSTANT ( opline -> op1 )		103726	0					
ANR	103877	CallExpression	CT_CONSTANT ( opline -> op1 )		103726	0					
ANR	103878	Callee	CT_CONSTANT		103726	0					
ANR	103879	Identifier	CT_CONSTANT		103726	0					
ANR	103880	ArgumentList	opline -> op1		103726	1					
ANR	103881	Argument	opline -> op1		103726	0					
ANR	103882	PtrMemberAccess	opline -> op1		103726	0					
ANR	103883	Identifier	opline		103726	0					
ANR	103884	Identifier	op1		103726	1					
ANR	103885	ExpressionStatement	zend_alloc_polymorphic_cache_slot ( opline -> op1 . constant )	2383:2:68661:68716	103726	1	True				
ANR	103886	CallExpression	zend_alloc_polymorphic_cache_slot ( opline -> op1 . constant )		103726	0					
ANR	103887	Callee	zend_alloc_polymorphic_cache_slot		103726	0					
ANR	103888	Identifier	zend_alloc_polymorphic_cache_slot		103726	0					
ANR	103889	ArgumentList	opline -> op1 . constant		103726	1					
ANR	103890	Argument	opline -> op1 . constant		103726	0					
ANR	103891	MemberAccess	opline -> op1 . constant		103726	0					
ANR	103892	PtrMemberAccess	opline -> op1		103726	0					
ANR	103893	Identifier	opline		103726	0					
ANR	103894	Identifier	op1		103726	1					
ANR	103895	Identifier	constant		103726	1					
ANR	103896	IfStatement	if ( class_node . op_type == IS_CONST )		103726	8					
ANR	103897	Condition	class_node . op_type == IS_CONST	2385:5:68726:68755	103726	0	True				
ANR	103898	EqualityExpression	class_node . op_type == IS_CONST		103726	0		==			
ANR	103899	MemberAccess	class_node . op_type		103726	0					
ANR	103900	Identifier	class_node		103726	0					
ANR	103901	Identifier	op_type		103726	1					
ANR	103902	Identifier	IS_CONST		103726	1					
ANR	103903	CompoundStatement		26:37:746:746	103726	1					
ANR	103904	ExpressionStatement	opline -> op2_type = IS_CONST	2386:2:68762:68789	103726	0	True				
ANR	103905	AssignmentExpression	opline -> op2_type = IS_CONST		103726	0		=			
ANR	103906	PtrMemberAccess	opline -> op2_type		103726	0					
ANR	103907	Identifier	opline		103726	0					
ANR	103908	Identifier	op2_type		103726	1					
ANR	103909	Identifier	IS_CONST		103726	1					
ANR	103910	ExpressionStatement	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node . u . constant ) )"	2387:2:68793:68898	103726	1	True				
ANR	103911	AssignmentExpression	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node . u . constant ) )"		103726	0		=			
ANR	103912	MemberAccess	opline -> op2 . constant		103726	0					
ANR	103913	PtrMemberAccess	opline -> op2		103726	0					
ANR	103914	Identifier	opline		103726	0					
ANR	103915	Identifier	op2		103726	1					
ANR	103916	Identifier	constant		103726	1					
ANR	103917	CallExpression	"zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node . u . constant ) )"		103726	1					
ANR	103918	Callee	zend_add_class_name_literal		103726	0					
ANR	103919	Identifier	zend_add_class_name_literal		103726	0					
ANR	103920	ArgumentList	CG ( active_op_array )		103726	1					
ANR	103921	Argument	CG ( active_op_array )		103726	0					
ANR	103922	CallExpression	CG ( active_op_array )		103726	0					
ANR	103923	Callee	CG		103726	0					
ANR	103924	Identifier	CG		103726	0					
ANR	103925	ArgumentList	active_op_array		103726	1					
ANR	103926	Argument	active_op_array		103726	0					
ANR	103927	Identifier	active_op_array		103726	0					
ANR	103928	Argument	Z_STR ( class_node . u . constant )		103726	1					
ANR	103929	CallExpression	Z_STR ( class_node . u . constant )		103726	0					
ANR	103930	Callee	Z_STR		103726	0					
ANR	103931	Identifier	Z_STR		103726	0					
ANR	103932	ArgumentList	class_node . u . constant		103726	1					
ANR	103933	Argument	class_node . u . constant		103726	0					
ANR	103934	MemberAccess	class_node . u . constant		103726	0					
ANR	103935	MemberAccess	class_node . u		103726	0					
ANR	103936	Identifier	class_node		103726	0					
ANR	103937	Identifier	u		103726	1					
ANR	103938	Identifier	constant		103726	1					
ANR	103939	ElseStatement	else		103726	0					
ANR	103940	CompoundStatement		30:8:896:896	103726	0					
ANR	103941	ExpressionStatement	"SET_NODE ( opline -> op2 , & class_node )"	2390:2:68912:68946	103726	0	True				
ANR	103942	CallExpression	"SET_NODE ( opline -> op2 , & class_node )"		103726	0					
ANR	103943	Callee	SET_NODE		103726	0					
ANR	103944	Identifier	SET_NODE		103726	0					
ANR	103945	ArgumentList	opline -> op2		103726	1					
ANR	103946	Argument	opline -> op2		103726	0					
ANR	103947	PtrMemberAccess	opline -> op2		103726	0					
ANR	103948	Identifier	opline		103726	0					
ANR	103949	Identifier	op2		103726	1					
ANR	103950	Argument	& class_node		103726	1					
ANR	103951	UnaryOperationExpression	& class_node		103726	0					
ANR	103952	UnaryOperator	&		103726	0					
ANR	103953	Identifier	class_node		103726	1					
ANR	103954	ExpressionStatement	opline -> extended_value |= ZEND_FETCH_STATIC_MEMBER	2392:1:68952:69002	103726	9	True				
ANR	103955	AssignmentExpression	opline -> extended_value |= ZEND_FETCH_STATIC_MEMBER		103726	0		|=			
ANR	103956	PtrMemberAccess	opline -> extended_value		103726	0					
ANR	103957	Identifier	opline		103726	0					
ANR	103958	Identifier	extended_value		103726	1					
ANR	103959	Identifier	ZEND_FETCH_STATIC_MEMBER		103726	1					
ANR	103960	ReturnStatement	return opline ;	2394:1:69006:69019	103726	10	True				
ANR	103961	Identifier	opline		103726	0					
ANR	103962	ReturnType	zend_op *		103726	1					
ANR	103963	Identifier	zend_compile_static_prop_common		103726	2					
ANR	103964	ParameterList	"znode * result , zend_ast * ast , uint32_t type , int delayed"		103726	3					
ANR	103965	Parameter	znode * result	2359:41:67943:67955	103726	0	True				
ANR	103966	ParameterType	znode *		103726	0					
ANR	103967	Identifier	result		103726	1					
ANR	103968	Parameter	zend_ast * ast	2359:56:67958:67970	103726	1	True				
ANR	103969	ParameterType	zend_ast *		103726	0					
ANR	103970	Identifier	ast		103726	1					
ANR	103971	Parameter	uint32_t type	2359:71:67973:67985	103726	2	True				
ANR	103972	ParameterType	uint32_t		103726	0					
ANR	103973	Identifier	type		103726	1					
ANR	103974	Parameter	int delayed	2359:86:67988:67998	103726	3	True				
ANR	103975	ParameterType	int		103726	0					
ANR	103976	Identifier	delayed		103726	1					
ANR	103977	CFGEntryNode	ENTRY		103726		True				
ANR	103978	CFGExitNode	EXIT		103726		True				
ANR	103979	Symbol	zend_is_const_default_class_ref		103726						
ANR	103980	Symbol	opline -> op1		103726						
ANR	103981	Symbol	zend_add_class_name_literal		103726						
ANR	103982	Symbol	opline -> op2		103726						
ANR	103983	Symbol	ast		103726						
ANR	103984	Symbol	class_node . u . constant		103726						
ANR	103985	Symbol	class_node		103726						
ANR	103986	Symbol	& class_node		103726						
ANR	103987	Symbol	prop_node		103726						
ANR	103988	Symbol	delayed		103726						
ANR	103989	Symbol	class_ast		103726						
ANR	103990	Symbol	type		103726						
ANR	103991	Symbol	Z_STR		103726						
ANR	103992	Symbol	opline -> extended_value		103726						
ANR	103993	Symbol	result		103726						
ANR	103994	Symbol	class_node . op_type		103726						
ANR	103995	Symbol	& class_node . u . constant		103726						
ANR	103996	Symbol	zend_delayed_emit_op		103726						
ANR	103997	Symbol	* ast		103726						
ANR	103998	Symbol	opline		103726						
ANR	103999	Symbol	CT_CONSTANT		103726						
ANR	104000	Symbol	opline -> op1 . constant		103726						
ANR	104001	Symbol	* * ast		103726						
ANR	104002	Symbol	& prop_node		103726						
ANR	104003	Symbol	class_node . u		103726						
ANR	104004	Symbol	ZEND_FETCH_STATIC_MEMBER		103726						
ANR	104005	Symbol	& class_node . u		103726						
ANR	104006	Symbol	IS_CONST		103726						
ANR	104007	Symbol	NULL		103726						
ANR	104008	Symbol	CG		103726						
ANR	104009	Symbol	zend_resolve_class_name_ast		103726						
ANR	104010	Symbol	active_op_array		103726						
ANR	104011	Symbol	ZEND_FETCH_R		103726						
ANR	104012	Symbol	prop_ast		103726						
ANR	104013	Symbol	opline -> op1_type		103726						
ANR	104014	Symbol	* opline		103726						
ANR	104015	Symbol	opline -> op2 . constant		103726						
ANR	104016	Symbol	* ast -> child		103726						
ANR	104017	Symbol	opline -> op2_type		103726						
ANR	104018	Symbol	ast -> child		103726						
ANR	104019	Symbol	zend_emit_op		103726						
ANR	104020	Function	zend_compile_static_prop	2398:0:69034:69257							
ANR	104021	FunctionDef	"zend_compile_static_prop (znode * result , zend_ast * ast , uint32_t type , int delayed)"		104020	0					
ANR	104022	CompoundStatement		2399:0:69132:69257	104020	0					
ANR	104023	IdentifierDeclStatement	"zend_op * opline = zend_compile_static_prop_common ( result , ast , type , delayed ) ;"	2400:1:69135:69212	104020	0	True				
ANR	104024	IdentifierDecl	"* opline = zend_compile_static_prop_common ( result , ast , type , delayed )"		104020	0					
ANR	104025	IdentifierDeclType	zend_op *		104020	0					
ANR	104026	Identifier	opline		104020	1					
ANR	104027	AssignmentExpression	"* opline = zend_compile_static_prop_common ( result , ast , type , delayed )"		104020	2		=			
ANR	104028	Identifier	opline		104020	0					
ANR	104029	CallExpression	"zend_compile_static_prop_common ( result , ast , type , delayed )"		104020	1					
ANR	104030	Callee	zend_compile_static_prop_common		104020	0					
ANR	104031	Identifier	zend_compile_static_prop_common		104020	0					
ANR	104032	ArgumentList	result		104020	1					
ANR	104033	Argument	result		104020	0					
ANR	104034	Identifier	result		104020	0					
ANR	104035	Argument	ast		104020	1					
ANR	104036	Identifier	ast		104020	0					
ANR	104037	Argument	type		104020	2					
ANR	104038	Identifier	type		104020	0					
ANR	104039	Argument	delayed		104020	3					
ANR	104040	Identifier	delayed		104020	0					
ANR	104041	ExpressionStatement	"zend_adjust_for_fetch_type ( opline , type )"	2401:1:69215:69255	104020	1	True				
ANR	104042	CallExpression	"zend_adjust_for_fetch_type ( opline , type )"		104020	0					
ANR	104043	Callee	zend_adjust_for_fetch_type		104020	0					
ANR	104044	Identifier	zend_adjust_for_fetch_type		104020	0					
ANR	104045	ArgumentList	opline		104020	1					
ANR	104046	Argument	opline		104020	0					
ANR	104047	Identifier	opline		104020	0					
ANR	104048	Argument	type		104020	1					
ANR	104049	Identifier	type		104020	0					
ANR	104050	ReturnType	void		104020	1					
ANR	104051	Identifier	zend_compile_static_prop		104020	2					
ANR	104052	ParameterList	"znode * result , zend_ast * ast , uint32_t type , int delayed"		104020	3					
ANR	104053	Parameter	znode * result	2398:30:69064:69076	104020	0	True				
ANR	104054	ParameterType	znode *		104020	0					
ANR	104055	Identifier	result		104020	1					
ANR	104056	Parameter	zend_ast * ast	2398:45:69079:69091	104020	1	True				
ANR	104057	ParameterType	zend_ast *		104020	0					
ANR	104058	Identifier	ast		104020	1					
ANR	104059	Parameter	uint32_t type	2398:60:69094:69106	104020	2	True				
ANR	104060	ParameterType	uint32_t		104020	0					
ANR	104061	Identifier	type		104020	1					
ANR	104062	Parameter	int delayed	2398:75:69109:69119	104020	3	True				
ANR	104063	ParameterType	int		104020	0					
ANR	104064	Identifier	delayed		104020	1					
ANR	104065	CFGEntryNode	ENTRY		104020		True				
ANR	104066	CFGExitNode	EXIT		104020		True				
ANR	104067	Symbol	result		104020						
ANR	104068	Symbol	zend_compile_static_prop_common		104020						
ANR	104069	Symbol	ast		104020						
ANR	104070	Symbol	opline		104020						
ANR	104071	Symbol	delayed		104020						
ANR	104072	Symbol	type		104020						
ANR	104073	Function	zend_compile_list_assign	2405:0:69270:70015							
ANR	104074	FunctionDef	"zend_compile_list_assign (znode * result , zend_ast * ast , znode * expr_node)"		104073	0					
ANR	104075	CompoundStatement		2406:0:69365:70015	104073	0					
ANR	104076	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	2407:1:69368:69412	104073	0	True				
ANR	104077	IdentifierDecl	* list = zend_ast_get_list ( ast )		104073	0					
ANR	104078	IdentifierDeclType	zend_ast_list *		104073	0					
ANR	104079	Identifier	list		104073	1					
ANR	104080	AssignmentExpression	* list = zend_ast_get_list ( ast )		104073	2		=			
ANR	104081	Identifier	list		104073	0					
ANR	104082	CallExpression	zend_ast_get_list ( ast )		104073	1					
ANR	104083	Callee	zend_ast_get_list		104073	0					
ANR	104084	Identifier	zend_ast_get_list		104073	0					
ANR	104085	ArgumentList	ast		104073	1					
ANR	104086	Argument	ast		104073	0					
ANR	104087	Identifier	ast		104073	0					
ANR	104088	IdentifierDeclStatement	uint32_t i ;	2408:1:69415:69425	104073	1	True				
ANR	104089	IdentifierDecl	i		104073	0					
ANR	104090	IdentifierDeclType	uint32_t		104073	0					
ANR	104091	Identifier	i		104073	1					
ANR	104092	IdentifierDeclStatement	zend_bool has_elems = 0 ;	2409:1:69428:69451	104073	2	True				
ANR	104093	IdentifierDecl	has_elems = 0		104073	0					
ANR	104094	IdentifierDeclType	zend_bool		104073	0					
ANR	104095	Identifier	has_elems		104073	1					
ANR	104096	AssignmentExpression	has_elems = 0		104073	2		=			
ANR	104097	Identifier	has_elems		104073	0					
ANR	104098	PrimaryExpression	0		104073	1					
ANR	104099	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		104073	3					
ANR	104100	ForInit	i = 0 ;	2411:6:69460:69465	104073	0	True				
ANR	104101	AssignmentExpression	i = 0		104073	0		=			
ANR	104102	Identifier	i		104073	0					
ANR	104103	PrimaryExpression	0		104073	1					
ANR	104104	Condition	i < list -> children	2411:13:69467:69484	104073	1	True				
ANR	104105	RelationalExpression	i < list -> children		104073	0		<			
ANR	104106	Identifier	i		104073	0					
ANR	104107	PtrMemberAccess	list -> children		104073	1					
ANR	104108	Identifier	list		104073	0					
ANR	104109	Identifier	children		104073	1					
ANR	104110	UnaryExpression	++ i	2411:33:69487:69489	104073	2	True				
ANR	104111	IncDec	++		104073	0					
ANR	104112	Identifier	i		104073	1					
ANR	104113	CompoundStatement		8:2:168:196	104073	3					
ANR	104114	IdentifierDeclStatement	zend_ast * var_ast = list -> child [ i ] ;	2412:2:69496:69530	104073	0	True				
ANR	104115	IdentifierDecl	* var_ast = list -> child [ i ]		104073	0					
ANR	104116	IdentifierDeclType	zend_ast *		104073	0					
ANR	104117	Identifier	var_ast		104073	1					
ANR	104118	AssignmentExpression	* var_ast = list -> child [ i ]		104073	2		=			
ANR	104119	Identifier	var_ast		104073	0					
ANR	104120	ArrayIndexing	list -> child [ i ]		104073	1					
ANR	104121	PtrMemberAccess	list -> child		104073	0					
ANR	104122	Identifier	list		104073	0					
ANR	104123	Identifier	child		104073	1					
ANR	104124	Identifier	i		104073	1					
ANR	104125	IdentifierDeclStatement	"znode fetch_result , dim_node ;"	2413:2:69534:69562	104073	1	True				
ANR	104126	IdentifierDecl	fetch_result		104073	0					
ANR	104127	IdentifierDeclType	znode		104073	0					
ANR	104128	Identifier	fetch_result		104073	1					
ANR	104129	IdentifierDecl	dim_node		104073	1					
ANR	104130	IdentifierDeclType	znode		104073	0					
ANR	104131	Identifier	dim_node		104073	1					
ANR	104132	IfStatement	if ( var_ast == NULL )		104073	2					
ANR	104133	Condition	var_ast == NULL	2415:6:69571:69585	104073	0	True				
ANR	104134	EqualityExpression	var_ast == NULL		104073	0		==			
ANR	104135	Identifier	var_ast		104073	0					
ANR	104136	Identifier	NULL		104073	1					
ANR	104137	CompoundStatement		10:23:222:222	104073	1					
ANR	104138	ContinueStatement	continue ;	2416:3:69593:69601	104073	0	True				
ANR	104139	ExpressionStatement	has_elems = 1	2418:2:69609:69622	104073	3	True				
ANR	104140	AssignmentExpression	has_elems = 1		104073	0		=			
ANR	104141	Identifier	has_elems		104073	0					
ANR	104142	PrimaryExpression	1		104073	1					
ANR	104143	ExpressionStatement	dim_node . op_type = IS_CONST	2420:2:69627:69654	104073	4	True				
ANR	104144	AssignmentExpression	dim_node . op_type = IS_CONST		104073	0		=			
ANR	104145	MemberAccess	dim_node . op_type		104073	0					
ANR	104146	Identifier	dim_node		104073	0					
ANR	104147	Identifier	op_type		104073	1					
ANR	104148	Identifier	IS_CONST		104073	1					
ANR	104149	ExpressionStatement	"ZVAL_LONG ( & dim_node . u . constant , i )"	2421:2:69658:69692	104073	5	True				
ANR	104150	CallExpression	"ZVAL_LONG ( & dim_node . u . constant , i )"		104073	0					
ANR	104151	Callee	ZVAL_LONG		104073	0					
ANR	104152	Identifier	ZVAL_LONG		104073	0					
ANR	104153	ArgumentList	& dim_node . u . constant		104073	1					
ANR	104154	Argument	& dim_node . u . constant		104073	0					
ANR	104155	UnaryOperationExpression	& dim_node . u . constant		104073	0					
ANR	104156	UnaryOperator	&		104073	0					
ANR	104157	MemberAccess	dim_node . u . constant		104073	1					
ANR	104158	MemberAccess	dim_node . u		104073	0					
ANR	104159	Identifier	dim_node		104073	0					
ANR	104160	Identifier	u		104073	1					
ANR	104161	Identifier	constant		104073	1					
ANR	104162	Argument	i		104073	1					
ANR	104163	Identifier	i		104073	0					
ANR	104164	IfStatement	if ( expr_node -> op_type == IS_CONST )		104073	6					
ANR	104165	Condition	expr_node -> op_type == IS_CONST	2423:6:69701:69730	104073	0	True				
ANR	104166	EqualityExpression	expr_node -> op_type == IS_CONST		104073	0		==			
ANR	104167	PtrMemberAccess	expr_node -> op_type		104073	0					
ANR	104168	Identifier	expr_node		104073	0					
ANR	104169	Identifier	op_type		104073	1					
ANR	104170	Identifier	IS_CONST		104073	1					
ANR	104171	CompoundStatement		18:38:367:367	104073	1					
ANR	104172	ExpressionStatement	Z_TRY_ADDREF ( expr_node -> u . constant )	2424:3:69738:69773	104073	0	True				
ANR	104173	CallExpression	Z_TRY_ADDREF ( expr_node -> u . constant )		104073	0					
ANR	104174	Callee	Z_TRY_ADDREF		104073	0					
ANR	104175	Identifier	Z_TRY_ADDREF		104073	0					
ANR	104176	ArgumentList	expr_node -> u . constant		104073	1					
ANR	104177	Argument	expr_node -> u . constant		104073	0					
ANR	104178	MemberAccess	expr_node -> u . constant		104073	0					
ANR	104179	PtrMemberAccess	expr_node -> u		104073	0					
ANR	104180	Identifier	expr_node		104073	0					
ANR	104181	Identifier	u		104073	1					
ANR	104182	Identifier	constant		104073	1					
ANR	104183	ExpressionStatement	"zend_emit_op ( & fetch_result , ZEND_FETCH_LIST , expr_node , & dim_node )"	2427:2:69782:69848	104073	7	True				
ANR	104184	CallExpression	"zend_emit_op ( & fetch_result , ZEND_FETCH_LIST , expr_node , & dim_node )"		104073	0					
ANR	104185	Callee	zend_emit_op		104073	0					
ANR	104186	Identifier	zend_emit_op		104073	0					
ANR	104187	ArgumentList	& fetch_result		104073	1					
ANR	104188	Argument	& fetch_result		104073	0					
ANR	104189	UnaryOperationExpression	& fetch_result		104073	0					
ANR	104190	UnaryOperator	&		104073	0					
ANR	104191	Identifier	fetch_result		104073	1					
ANR	104192	Argument	ZEND_FETCH_LIST		104073	1					
ANR	104193	Identifier	ZEND_FETCH_LIST		104073	0					
ANR	104194	Argument	expr_node		104073	2					
ANR	104195	Identifier	expr_node		104073	0					
ANR	104196	Argument	& dim_node		104073	3					
ANR	104197	UnaryOperationExpression	& dim_node		104073	0					
ANR	104198	UnaryOperator	&		104073	0					
ANR	104199	Identifier	dim_node		104073	1					
ANR	104200	ExpressionStatement	"zend_emit_assign_znode ( var_ast , & fetch_result )"	2428:2:69852:69898	104073	8	True				
ANR	104201	CallExpression	"zend_emit_assign_znode ( var_ast , & fetch_result )"		104073	0					
ANR	104202	Callee	zend_emit_assign_znode		104073	0					
ANR	104203	Identifier	zend_emit_assign_znode		104073	0					
ANR	104204	ArgumentList	var_ast		104073	1					
ANR	104205	Argument	var_ast		104073	0					
ANR	104206	Identifier	var_ast		104073	0					
ANR	104207	Argument	& fetch_result		104073	1					
ANR	104208	UnaryOperationExpression	& fetch_result		104073	0					
ANR	104209	UnaryOperator	&		104073	0					
ANR	104210	Identifier	fetch_result		104073	1					
ANR	104211	IfStatement	if ( ! has_elems )		104073	4					
ANR	104212	Condition	! has_elems	2431:5:69909:69918	104073	0	True				
ANR	104213	UnaryOperationExpression	! has_elems		104073	0					
ANR	104214	UnaryOperator	!		104073	0					
ANR	104215	Identifier	has_elems		104073	1					
ANR	104216	CompoundStatement		26:17:555:555	104073	1					
ANR	104217	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use empty list"" )"	2432:2:69925:69986	104073	0	True				
ANR	104218	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use empty list"" )"		104073	0					
ANR	104219	Callee	zend_error_noreturn		104073	0					
ANR	104220	Identifier	zend_error_noreturn		104073	0					
ANR	104221	ArgumentList	E_COMPILE_ERROR		104073	1					
ANR	104222	Argument	E_COMPILE_ERROR		104073	0					
ANR	104223	Identifier	E_COMPILE_ERROR		104073	0					
ANR	104224	Argument	"""Cannot use empty list"""		104073	1					
ANR	104225	PrimaryExpression	"""Cannot use empty list"""		104073	0					
ANR	104226	ExpressionStatement	* result = * expr_node	2435:1:69993:70013	104073	5	True				
ANR	104227	AssignmentExpression	* result = * expr_node		104073	0		=			
ANR	104228	UnaryOperationExpression	* result		104073	0					
ANR	104229	UnaryOperator	*		104073	0					
ANR	104230	Identifier	result		104073	1					
ANR	104231	UnaryOperationExpression	* expr_node		104073	1					
ANR	104232	UnaryOperator	*		104073	0					
ANR	104233	Identifier	expr_node		104073	1					
ANR	104234	ReturnType	static void		104073	1					
ANR	104235	Identifier	zend_compile_list_assign		104073	2					
ANR	104236	ParameterList	"znode * result , zend_ast * ast , znode * expr_node"		104073	3					
ANR	104237	Parameter	znode * result	2405:37:69307:69319	104073	0	True				
ANR	104238	ParameterType	znode *		104073	0					
ANR	104239	Identifier	result		104073	1					
ANR	104240	Parameter	zend_ast * ast	2405:52:69322:69334	104073	1	True				
ANR	104241	ParameterType	zend_ast *		104073	0					
ANR	104242	Identifier	ast		104073	1					
ANR	104243	Parameter	znode * expr_node	2405:67:69337:69352	104073	2	True				
ANR	104244	ParameterType	znode *		104073	0					
ANR	104245	Identifier	expr_node		104073	1					
ANR	104246	CFGEntryNode	ENTRY		104073		True				
ANR	104247	CFGExitNode	EXIT		104073		True				
ANR	104248	Symbol	ast		104073						
ANR	104249	Symbol	E_COMPILE_ERROR		104073						
ANR	104250	Symbol	dim_node . u		104073						
ANR	104251	Symbol	ZEND_FETCH_LIST		104073						
ANR	104252	Symbol	dim_node		104073						
ANR	104253	Symbol	result		104073						
ANR	104254	Symbol	expr_node -> u . constant		104073						
ANR	104255	Symbol	* * list		104073						
ANR	104256	Symbol	& dim_node		104073						
ANR	104257	Symbol	* result		104073						
ANR	104258	Symbol	expr_node -> op_type		104073						
ANR	104259	Symbol	IS_CONST		104073						
ANR	104260	Symbol	NULL		104073						
ANR	104261	Symbol	list -> child		104073						
ANR	104262	Symbol	* expr_node		104073						
ANR	104263	Symbol	i		104073						
ANR	104264	Symbol	list		104073						
ANR	104265	Symbol	dim_node . op_type		104073						
ANR	104266	Symbol	expr_node		104073						
ANR	104267	Symbol	zend_ast_get_list		104073						
ANR	104268	Symbol	var_ast		104073						
ANR	104269	Symbol	* i		104073						
ANR	104270	Symbol	has_elems		104073						
ANR	104271	Symbol	* list		104073						
ANR	104272	Symbol	& dim_node . u		104073						
ANR	104273	Symbol	& fetch_result		104073						
ANR	104274	Symbol	* list -> child		104073						
ANR	104275	Symbol	fetch_result		104073						
ANR	104276	Symbol	& dim_node . u . constant		104073						
ANR	104277	Symbol	expr_node -> u		104073						
ANR	104278	Symbol	list -> children		104073						
ANR	104279	Function	zend_ensure_writable_variable	2439:0:70028:70405							
ANR	104280	FunctionDef	zend_ensure_writable_variable (const zend_ast * ast)		104279	0					
ANR	104281	CompoundStatement		2440:0:70101:70405	104279	0					
ANR	104282	IfStatement	if ( ast -> kind == ZEND_AST_CALL )		104279	0					
ANR	104283	Condition	ast -> kind == ZEND_AST_CALL	2441:5:70108:70133	104279	0	True				
ANR	104284	EqualityExpression	ast -> kind == ZEND_AST_CALL		104279	0		==			
ANR	104285	PtrMemberAccess	ast -> kind		104279	0					
ANR	104286	Identifier	ast		104279	0					
ANR	104287	Identifier	kind		104279	1					
ANR	104288	Identifier	ZEND_AST_CALL		104279	1					
ANR	104289	CompoundStatement		2:33:34:34	104279	1					
ANR	104290	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Can't use function return value in write context"" )"	2442:2:70140:70228	104279	0	True				
ANR	104291	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Can't use function return value in write context"" )"		104279	0					
ANR	104292	Callee	zend_error_noreturn		104279	0					
ANR	104293	Identifier	zend_error_noreturn		104279	0					
ANR	104294	ArgumentList	E_COMPILE_ERROR		104279	1					
ANR	104295	Argument	E_COMPILE_ERROR		104279	0					
ANR	104296	Identifier	E_COMPILE_ERROR		104279	0					
ANR	104297	Argument	"""Can't use function return value in write context"""		104279	1					
ANR	104298	PrimaryExpression	"""Can't use function return value in write context"""		104279	0					
ANR	104299	IfStatement	if ( ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL )		104279	1					
ANR	104300	Condition	ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL	2444:5:70238:70307	104279	0	True				
ANR	104301	OrExpression	ast -> kind == ZEND_AST_METHOD_CALL || ast -> kind == ZEND_AST_STATIC_CALL		104279	0		||			
ANR	104302	EqualityExpression	ast -> kind == ZEND_AST_METHOD_CALL		104279	0		==			
ANR	104303	PtrMemberAccess	ast -> kind		104279	0					
ANR	104304	Identifier	ast		104279	0					
ANR	104305	Identifier	kind		104279	1					
ANR	104306	Identifier	ZEND_AST_METHOD_CALL		104279	1					
ANR	104307	EqualityExpression	ast -> kind == ZEND_AST_STATIC_CALL		104279	1		==			
ANR	104308	PtrMemberAccess	ast -> kind		104279	0					
ANR	104309	Identifier	ast		104279	0					
ANR	104310	Identifier	kind		104279	1					
ANR	104311	Identifier	ZEND_AST_STATIC_CALL		104279	1					
ANR	104312	CompoundStatement		5:77:208:208	104279	1					
ANR	104313	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Can't use method return value in write context"" )"	2445:2:70314:70400	104279	0	True				
ANR	104314	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Can't use method return value in write context"" )"		104279	0					
ANR	104315	Callee	zend_error_noreturn		104279	0					
ANR	104316	Identifier	zend_error_noreturn		104279	0					
ANR	104317	ArgumentList	E_COMPILE_ERROR		104279	1					
ANR	104318	Argument	E_COMPILE_ERROR		104279	0					
ANR	104319	Identifier	E_COMPILE_ERROR		104279	0					
ANR	104320	Argument	"""Can't use method return value in write context"""		104279	1					
ANR	104321	PrimaryExpression	"""Can't use method return value in write context"""		104279	0					
ANR	104322	ReturnType	static void		104279	1					
ANR	104323	Identifier	zend_ensure_writable_variable		104279	2					
ANR	104324	ParameterList	const zend_ast * ast		104279	3					
ANR	104325	Parameter	const zend_ast * ast	2439:42:70070:70088	104279	0	True				
ANR	104326	ParameterType	const zend_ast *		104279	0					
ANR	104327	Identifier	ast		104279	1					
ANR	104328	CFGEntryNode	ENTRY		104279		True				
ANR	104329	CFGExitNode	EXIT		104279		True				
ANR	104330	Symbol	ZEND_AST_STATIC_CALL		104279						
ANR	104331	Symbol	ast -> kind		104279						
ANR	104332	Symbol	ast		104279						
ANR	104333	Symbol	ZEND_AST_CALL		104279						
ANR	104334	Symbol	* ast		104279						
ANR	104335	Symbol	E_COMPILE_ERROR		104279						
ANR	104336	Symbol	ZEND_AST_METHOD_CALL		104279						
ANR	104337	Function	zend_is_assign_to_self	2451:0:70451:71133							
ANR	104338	FunctionDef	"zend_is_assign_to_self (zend_ast * var_ast , zend_ast * expr_ast)"		104337	0					
ANR	104339	CompoundStatement		2452:0:70533:71133	104337	0					
ANR	104340	IfStatement	if ( expr_ast -> kind != ZEND_AST_VAR || expr_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL )		104337	0					
ANR	104341	Condition	expr_ast -> kind != ZEND_AST_VAR || expr_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL	2453:5:70540:70614	104337	0	True				
ANR	104342	OrExpression	expr_ast -> kind != ZEND_AST_VAR || expr_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		104337	0		||			
ANR	104343	EqualityExpression	expr_ast -> kind != ZEND_AST_VAR		104337	0		!=			
ANR	104344	PtrMemberAccess	expr_ast -> kind		104337	0					
ANR	104345	Identifier	expr_ast		104337	0					
ANR	104346	Identifier	kind		104337	1					
ANR	104347	Identifier	ZEND_AST_VAR		104337	1					
ANR	104348	EqualityExpression	expr_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		104337	1		!=			
ANR	104349	PtrMemberAccess	expr_ast -> child [ 0 ] -> kind		104337	0					
ANR	104350	ArrayIndexing	expr_ast -> child [ 0 ]		104337	0					
ANR	104351	PtrMemberAccess	expr_ast -> child		104337	0					
ANR	104352	Identifier	expr_ast		104337	0					
ANR	104353	Identifier	child		104337	1					
ANR	104354	PrimaryExpression	0		104337	1					
ANR	104355	Identifier	kind		104337	1					
ANR	104356	Identifier	ZEND_AST_ZVAL		104337	1					
ANR	104357	CompoundStatement		2:82:83:83	104337	1					
ANR	104358	ReturnStatement	return 0 ;	2454:2:70621:70629	104337	0	True				
ANR	104359	PrimaryExpression	0		104337	0					
ANR	104360	WhileStatement	while ( zend_is_variable ( var_ast ) && var_ast -> kind != ZEND_AST_VAR )		104337	1					
ANR	104361	Condition	zend_is_variable ( var_ast ) && var_ast -> kind != ZEND_AST_VAR	2457:8:70643:70700	104337	0	True				
ANR	104362	AndExpression	zend_is_variable ( var_ast ) && var_ast -> kind != ZEND_AST_VAR		104337	0		&&			
ANR	104363	CallExpression	zend_is_variable ( var_ast )		104337	0					
ANR	104364	Callee	zend_is_variable		104337	0					
ANR	104365	Identifier	zend_is_variable		104337	0					
ANR	104366	ArgumentList	var_ast		104337	1					
ANR	104367	Argument	var_ast		104337	0					
ANR	104368	Identifier	var_ast		104337	0					
ANR	104369	EqualityExpression	var_ast -> kind != ZEND_AST_VAR		104337	1		!=			
ANR	104370	PtrMemberAccess	var_ast -> kind		104337	0					
ANR	104371	Identifier	var_ast		104337	0					
ANR	104372	Identifier	kind		104337	1					
ANR	104373	Identifier	ZEND_AST_VAR		104337	1					
ANR	104374	CompoundStatement		6:68:169:169	104337	1					
ANR	104375	ExpressionStatement	var_ast = var_ast -> child [ 0 ]	2458:2:70707:70734	104337	0	True				
ANR	104376	AssignmentExpression	var_ast = var_ast -> child [ 0 ]		104337	0		=			
ANR	104377	Identifier	var_ast		104337	0					
ANR	104378	ArrayIndexing	var_ast -> child [ 0 ]		104337	1					
ANR	104379	PtrMemberAccess	var_ast -> child		104337	0					
ANR	104380	Identifier	var_ast		104337	0					
ANR	104381	Identifier	child		104337	1					
ANR	104382	PrimaryExpression	0		104337	1					
ANR	104383	IfStatement	if ( var_ast -> kind != ZEND_AST_VAR || var_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL )		104337	2					
ANR	104384	Condition	var_ast -> kind != ZEND_AST_VAR || var_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL	2461:5:70745:70817	104337	0	True				
ANR	104385	OrExpression	var_ast -> kind != ZEND_AST_VAR || var_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		104337	0		||			
ANR	104386	EqualityExpression	var_ast -> kind != ZEND_AST_VAR		104337	0		!=			
ANR	104387	PtrMemberAccess	var_ast -> kind		104337	0					
ANR	104388	Identifier	var_ast		104337	0					
ANR	104389	Identifier	kind		104337	1					
ANR	104390	Identifier	ZEND_AST_VAR		104337	1					
ANR	104391	EqualityExpression	var_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		104337	1		!=			
ANR	104392	PtrMemberAccess	var_ast -> child [ 0 ] -> kind		104337	0					
ANR	104393	ArrayIndexing	var_ast -> child [ 0 ]		104337	0					
ANR	104394	PtrMemberAccess	var_ast -> child		104337	0					
ANR	104395	Identifier	var_ast		104337	0					
ANR	104396	Identifier	child		104337	1					
ANR	104397	PrimaryExpression	0		104337	1					
ANR	104398	Identifier	kind		104337	1					
ANR	104399	Identifier	ZEND_AST_ZVAL		104337	1					
ANR	104400	CompoundStatement		10:80:286:286	104337	1					
ANR	104401	ReturnStatement	return 0 ;	2462:2:70824:70832	104337	0	True				
ANR	104402	PrimaryExpression	0		104337	0					
ANR	104403	CompoundStatement		17:2:466:517	104337	3					
ANR	104404	IdentifierDeclStatement	zend_string * name1 = zval_get_string ( zend_ast_get_zval ( var_ast -> child [ 0 ] ) ) ;	2466:2:70843:70917	104337	0	True				
ANR	104405	IdentifierDecl	* name1 = zval_get_string ( zend_ast_get_zval ( var_ast -> child [ 0 ] ) )		104337	0					
ANR	104406	IdentifierDeclType	zend_string *		104337	0					
ANR	104407	Identifier	name1		104337	1					
ANR	104408	AssignmentExpression	* name1 = zval_get_string ( zend_ast_get_zval ( var_ast -> child [ 0 ] ) )		104337	2		=			
ANR	104409	Identifier	name1		104337	0					
ANR	104410	CallExpression	zval_get_string ( zend_ast_get_zval ( var_ast -> child [ 0 ] ) )		104337	1					
ANR	104411	Callee	zval_get_string		104337	0					
ANR	104412	Identifier	zval_get_string		104337	0					
ANR	104413	ArgumentList	zend_ast_get_zval ( var_ast -> child [ 0 ] )		104337	1					
ANR	104414	Argument	zend_ast_get_zval ( var_ast -> child [ 0 ] )		104337	0					
ANR	104415	CallExpression	zend_ast_get_zval ( var_ast -> child [ 0 ] )		104337	0					
ANR	104416	Callee	zend_ast_get_zval		104337	0					
ANR	104417	Identifier	zend_ast_get_zval		104337	0					
ANR	104418	ArgumentList	var_ast -> child [ 0 ]		104337	1					
ANR	104419	Argument	var_ast -> child [ 0 ]		104337	0					
ANR	104420	ArrayIndexing	var_ast -> child [ 0 ]		104337	0					
ANR	104421	PtrMemberAccess	var_ast -> child		104337	0					
ANR	104422	Identifier	var_ast		104337	0					
ANR	104423	Identifier	child		104337	1					
ANR	104424	PrimaryExpression	0		104337	1					
ANR	104425	IdentifierDeclStatement	zend_string * name2 = zval_get_string ( zend_ast_get_zval ( expr_ast -> child [ 0 ] ) ) ;	2467:2:70921:70996	104337	1	True				
ANR	104426	IdentifierDecl	* name2 = zval_get_string ( zend_ast_get_zval ( expr_ast -> child [ 0 ] ) )		104337	0					
ANR	104427	IdentifierDeclType	zend_string *		104337	0					
ANR	104428	Identifier	name2		104337	1					
ANR	104429	AssignmentExpression	* name2 = zval_get_string ( zend_ast_get_zval ( expr_ast -> child [ 0 ] ) )		104337	2		=			
ANR	104430	Identifier	name2		104337	0					
ANR	104431	CallExpression	zval_get_string ( zend_ast_get_zval ( expr_ast -> child [ 0 ] ) )		104337	1					
ANR	104432	Callee	zval_get_string		104337	0					
ANR	104433	Identifier	zval_get_string		104337	0					
ANR	104434	ArgumentList	zend_ast_get_zval ( expr_ast -> child [ 0 ] )		104337	1					
ANR	104435	Argument	zend_ast_get_zval ( expr_ast -> child [ 0 ] )		104337	0					
ANR	104436	CallExpression	zend_ast_get_zval ( expr_ast -> child [ 0 ] )		104337	0					
ANR	104437	Callee	zend_ast_get_zval		104337	0					
ANR	104438	Identifier	zend_ast_get_zval		104337	0					
ANR	104439	ArgumentList	expr_ast -> child [ 0 ]		104337	1					
ANR	104440	Argument	expr_ast -> child [ 0 ]		104337	0					
ANR	104441	ArrayIndexing	expr_ast -> child [ 0 ]		104337	0					
ANR	104442	PtrMemberAccess	expr_ast -> child		104337	0					
ANR	104443	Identifier	expr_ast		104337	0					
ANR	104444	Identifier	child		104337	1					
ANR	104445	PrimaryExpression	0		104337	1					
ANR	104446	IdentifierDeclStatement	"zend_bool result = zend_string_equals ( name1 , name2 ) ;"	2468:2:71000:71051	104337	2	True				
ANR	104447	IdentifierDecl	"result = zend_string_equals ( name1 , name2 )"		104337	0					
ANR	104448	IdentifierDeclType	zend_bool		104337	0					
ANR	104449	Identifier	result		104337	1					
ANR	104450	AssignmentExpression	"result = zend_string_equals ( name1 , name2 )"		104337	2		=			
ANR	104451	Identifier	result		104337	0					
ANR	104452	CallExpression	"zend_string_equals ( name1 , name2 )"		104337	1					
ANR	104453	Callee	zend_string_equals		104337	0					
ANR	104454	Identifier	zend_string_equals		104337	0					
ANR	104455	ArgumentList	name1		104337	1					
ANR	104456	Argument	name1		104337	0					
ANR	104457	Identifier	name1		104337	0					
ANR	104458	Argument	name2		104337	1					
ANR	104459	Identifier	name2		104337	0					
ANR	104460	ExpressionStatement	zend_string_release ( name1 )	2469:2:71055:71081	104337	3	True				
ANR	104461	CallExpression	zend_string_release ( name1 )		104337	0					
ANR	104462	Callee	zend_string_release		104337	0					
ANR	104463	Identifier	zend_string_release		104337	0					
ANR	104464	ArgumentList	name1		104337	1					
ANR	104465	Argument	name1		104337	0					
ANR	104466	Identifier	name1		104337	0					
ANR	104467	ExpressionStatement	zend_string_release ( name2 )	2470:2:71085:71111	104337	4	True				
ANR	104468	CallExpression	zend_string_release ( name2 )		104337	0					
ANR	104469	Callee	zend_string_release		104337	0					
ANR	104470	Identifier	zend_string_release		104337	0					
ANR	104471	ArgumentList	name2		104337	1					
ANR	104472	Argument	name2		104337	0					
ANR	104473	Identifier	name2		104337	0					
ANR	104474	ReturnStatement	return result ;	2471:2:71115:71128	104337	5	True				
ANR	104475	Identifier	result		104337	0					
ANR	104476	ReturnType	zend_bool		104337	1					
ANR	104477	Identifier	zend_is_assign_to_self		104337	2					
ANR	104478	ParameterList	"zend_ast * var_ast , zend_ast * expr_ast"		104337	3					
ANR	104479	Parameter	zend_ast * var_ast	2451:33:70484:70500	104337	0	True				
ANR	104480	ParameterType	zend_ast *		104337	0					
ANR	104481	Identifier	var_ast		104337	1					
ANR	104482	Parameter	zend_ast * expr_ast	2451:52:70503:70520	104337	1	True				
ANR	104483	ParameterType	zend_ast *		104337	0					
ANR	104484	Identifier	expr_ast		104337	1					
ANR	104485	CFGEntryNode	ENTRY		104337		True				
ANR	104486	CFGExitNode	EXIT		104337		True				
ANR	104487	Symbol	expr_ast -> kind		104337						
ANR	104488	Symbol	* expr_ast		104337						
ANR	104489	Symbol	zend_string_equals		104337						
ANR	104490	Symbol	* var_ast		104337						
ANR	104491	Symbol	* * expr_ast		104337						
ANR	104492	Symbol	var_ast -> child [ 0 ] -> kind		104337						
ANR	104493	Symbol	result		104337						
ANR	104494	Symbol	var_ast -> kind		104337						
ANR	104495	Symbol	ZEND_AST_VAR		104337						
ANR	104496	Symbol	* * var_ast		104337						
ANR	104497	Symbol	ZEND_AST_ZVAL		104337						
ANR	104498	Symbol	* * * var_ast		104337						
ANR	104499	Symbol	var_ast -> child		104337						
ANR	104500	Symbol	expr_ast -> child [ 0 ] -> kind		104337						
ANR	104501	Symbol	zend_is_variable		104337						
ANR	104502	Symbol	expr_ast -> child		104337						
ANR	104503	Symbol	* * expr_ast -> child		104337						
ANR	104504	Symbol	zval_get_string		104337						
ANR	104505	Symbol	expr_ast		104337						
ANR	104506	Symbol	* * var_ast -> child		104337						
ANR	104507	Symbol	var_ast		104337						
ANR	104508	Symbol	* expr_ast -> child		104337						
ANR	104509	Symbol	* * * expr_ast		104337						
ANR	104510	Symbol	zend_ast_get_zval		104337						
ANR	104511	Symbol	name2		104337						
ANR	104512	Symbol	* var_ast -> child		104337						
ANR	104513	Symbol	name1		104337						
ANR	104514	Function	zend_list_has_assign_to	2477:0:71214:71931							
ANR	104515	FunctionDef	"zend_list_has_assign_to (zend_ast * list_ast , zend_string * name)"		104514	0					
ANR	104516	CompoundStatement		2478:0:71297:71931	104514	0					
ANR	104517	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( list_ast ) ;	2479:1:71300:71349	104514	0	True				
ANR	104518	IdentifierDecl	* list = zend_ast_get_list ( list_ast )		104514	0					
ANR	104519	IdentifierDeclType	zend_ast_list *		104514	0					
ANR	104520	Identifier	list		104514	1					
ANR	104521	AssignmentExpression	* list = zend_ast_get_list ( list_ast )		104514	2		=			
ANR	104522	Identifier	list		104514	0					
ANR	104523	CallExpression	zend_ast_get_list ( list_ast )		104514	1					
ANR	104524	Callee	zend_ast_get_list		104514	0					
ANR	104525	Identifier	zend_ast_get_list		104514	0					
ANR	104526	ArgumentList	list_ast		104514	1					
ANR	104527	Argument	list_ast		104514	0					
ANR	104528	Identifier	list_ast		104514	0					
ANR	104529	IdentifierDeclStatement	uint32_t i ;	2480:1:71352:71362	104514	1	True				
ANR	104530	IdentifierDecl	i		104514	0					
ANR	104531	IdentifierDeclType	uint32_t		104514	0					
ANR	104532	Identifier	i		104514	1					
ANR	104533	ForStatement	for ( i = 0 ; i < list -> children ; i ++ )		104514	2					
ANR	104534	ForInit	i = 0 ;	2481:6:71370:71375	104514	0	True				
ANR	104535	AssignmentExpression	i = 0		104514	0		=			
ANR	104536	Identifier	i		104514	0					
ANR	104537	PrimaryExpression	0		104514	1					
ANR	104538	Condition	i < list -> children	2481:13:71377:71394	104514	1	True				
ANR	104539	RelationalExpression	i < list -> children		104514	0		<			
ANR	104540	Identifier	i		104514	0					
ANR	104541	PtrMemberAccess	list -> children		104514	1					
ANR	104542	Identifier	list		104514	0					
ANR	104543	Identifier	children		104514	1					
ANR	104544	PostIncDecOperationExpression	i ++	2481:33:71397:71399	104514	2	True				
ANR	104545	Identifier	i		104514	0					
ANR	104546	IncDec	++		104514	1					
ANR	104547	CompoundStatement		5:2:108:142	104514	3					
ANR	104548	IdentifierDeclStatement	zend_ast * var_ast = list -> child [ i ] ;	2482:2:71406:71440	104514	0	True				
ANR	104549	IdentifierDecl	* var_ast = list -> child [ i ]		104514	0					
ANR	104550	IdentifierDeclType	zend_ast *		104514	0					
ANR	104551	Identifier	var_ast		104514	1					
ANR	104552	AssignmentExpression	* var_ast = list -> child [ i ]		104514	2		=			
ANR	104553	Identifier	var_ast		104514	0					
ANR	104554	ArrayIndexing	list -> child [ i ]		104514	1					
ANR	104555	PtrMemberAccess	list -> child		104514	0					
ANR	104556	Identifier	list		104514	0					
ANR	104557	Identifier	child		104514	1					
ANR	104558	Identifier	i		104514	1					
ANR	104559	IfStatement	if ( ! var_ast )		104514	1					
ANR	104560	Condition	! var_ast	2483:6:71448:71455	104514	0	True				
ANR	104561	UnaryOperationExpression	! var_ast		104514	0					
ANR	104562	UnaryOperator	!		104514	0					
ANR	104563	Identifier	var_ast		104514	1					
ANR	104564	CompoundStatement		6:16:160:160	104514	1					
ANR	104565	ContinueStatement	continue ;	2484:3:71463:71471	104514	0	True				
ANR	104566	IfStatement	"if ( var_ast -> kind == ZEND_AST_LIST && zend_list_has_assign_to ( var_ast , name ) )"		104514	2					
ANR	104567	Condition	"var_ast -> kind == ZEND_AST_LIST && zend_list_has_assign_to ( var_ast , name )"	2488:6:71525:71596	104514	0	True				
ANR	104568	AndExpression	"var_ast -> kind == ZEND_AST_LIST && zend_list_has_assign_to ( var_ast , name )"		104514	0		&&			
ANR	104569	EqualityExpression	var_ast -> kind == ZEND_AST_LIST		104514	0		==			
ANR	104570	PtrMemberAccess	var_ast -> kind		104514	0					
ANR	104571	Identifier	var_ast		104514	0					
ANR	104572	Identifier	kind		104514	1					
ANR	104573	Identifier	ZEND_AST_LIST		104514	1					
ANR	104574	CallExpression	"zend_list_has_assign_to ( var_ast , name )"		104514	1					
ANR	104575	Callee	zend_list_has_assign_to		104514	0					
ANR	104576	Identifier	zend_list_has_assign_to		104514	0					
ANR	104577	ArgumentList	var_ast		104514	1					
ANR	104578	Argument	var_ast		104514	0					
ANR	104579	Identifier	var_ast		104514	0					
ANR	104580	Argument	name		104514	1					
ANR	104581	Identifier	name		104514	0					
ANR	104582	CompoundStatement		11:80:301:301	104514	1					
ANR	104583	ReturnStatement	return 1 ;	2489:3:71604:71612	104514	0	True				
ANR	104584	PrimaryExpression	1		104514	0					
ANR	104585	IfStatement	if ( var_ast -> kind == ZEND_AST_VAR && var_ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL )		104514	3					
ANR	104586	Condition	var_ast -> kind == ZEND_AST_VAR && var_ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL	2492:6:71625:71697	104514	0	True				
ANR	104587	AndExpression	var_ast -> kind == ZEND_AST_VAR && var_ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL		104514	0		&&			
ANR	104588	EqualityExpression	var_ast -> kind == ZEND_AST_VAR		104514	0		==			
ANR	104589	PtrMemberAccess	var_ast -> kind		104514	0					
ANR	104590	Identifier	var_ast		104514	0					
ANR	104591	Identifier	kind		104514	1					
ANR	104592	Identifier	ZEND_AST_VAR		104514	1					
ANR	104593	EqualityExpression	var_ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL		104514	1		==			
ANR	104594	PtrMemberAccess	var_ast -> child [ 0 ] -> kind		104514	0					
ANR	104595	ArrayIndexing	var_ast -> child [ 0 ]		104514	0					
ANR	104596	PtrMemberAccess	var_ast -> child		104514	0					
ANR	104597	Identifier	var_ast		104514	0					
ANR	104598	Identifier	child		104514	1					
ANR	104599	PrimaryExpression	0		104514	1					
ANR	104600	Identifier	kind		104514	1					
ANR	104601	Identifier	ZEND_AST_ZVAL		104514	1					
ANR	104602	CompoundStatement		17:3:489:542	104514	1					
ANR	104603	IdentifierDeclStatement	zend_string * var_name = zval_get_string ( zend_ast_get_zval ( var_ast -> child [ 0 ] ) ) ;	2493:3:71705:71782	104514	0	True				
ANR	104604	IdentifierDecl	* var_name = zval_get_string ( zend_ast_get_zval ( var_ast -> child [ 0 ] ) )		104514	0					
ANR	104605	IdentifierDeclType	zend_string *		104514	0					
ANR	104606	Identifier	var_name		104514	1					
ANR	104607	AssignmentExpression	* var_name = zval_get_string ( zend_ast_get_zval ( var_ast -> child [ 0 ] ) )		104514	2		=			
ANR	104608	Identifier	var_name		104514	0					
ANR	104609	CallExpression	zval_get_string ( zend_ast_get_zval ( var_ast -> child [ 0 ] ) )		104514	1					
ANR	104610	Callee	zval_get_string		104514	0					
ANR	104611	Identifier	zval_get_string		104514	0					
ANR	104612	ArgumentList	zend_ast_get_zval ( var_ast -> child [ 0 ] )		104514	1					
ANR	104613	Argument	zend_ast_get_zval ( var_ast -> child [ 0 ] )		104514	0					
ANR	104614	CallExpression	zend_ast_get_zval ( var_ast -> child [ 0 ] )		104514	0					
ANR	104615	Callee	zend_ast_get_zval		104514	0					
ANR	104616	Identifier	zend_ast_get_zval		104514	0					
ANR	104617	ArgumentList	var_ast -> child [ 0 ]		104514	1					
ANR	104618	Argument	var_ast -> child [ 0 ]		104514	0					
ANR	104619	ArrayIndexing	var_ast -> child [ 0 ]		104514	0					
ANR	104620	PtrMemberAccess	var_ast -> child		104514	0					
ANR	104621	Identifier	var_ast		104514	0					
ANR	104622	Identifier	child		104514	1					
ANR	104623	PrimaryExpression	0		104514	1					
ANR	104624	IdentifierDeclStatement	"zend_bool result = zend_string_equals ( var_name , name ) ;"	2494:3:71787:71840	104514	1	True				
ANR	104625	IdentifierDecl	"result = zend_string_equals ( var_name , name )"		104514	0					
ANR	104626	IdentifierDeclType	zend_bool		104514	0					
ANR	104627	Identifier	result		104514	1					
ANR	104628	AssignmentExpression	"result = zend_string_equals ( var_name , name )"		104514	2		=			
ANR	104629	Identifier	result		104514	0					
ANR	104630	CallExpression	"zend_string_equals ( var_name , name )"		104514	1					
ANR	104631	Callee	zend_string_equals		104514	0					
ANR	104632	Identifier	zend_string_equals		104514	0					
ANR	104633	ArgumentList	var_name		104514	1					
ANR	104634	Argument	var_name		104514	0					
ANR	104635	Identifier	var_name		104514	0					
ANR	104636	Argument	name		104514	1					
ANR	104637	Identifier	name		104514	0					
ANR	104638	ExpressionStatement	zend_string_release ( var_name )	2495:3:71845:71874	104514	2	True				
ANR	104639	CallExpression	zend_string_release ( var_name )		104514	0					
ANR	104640	Callee	zend_string_release		104514	0					
ANR	104641	Identifier	zend_string_release		104514	0					
ANR	104642	ArgumentList	var_name		104514	1					
ANR	104643	Argument	var_name		104514	0					
ANR	104644	Identifier	var_name		104514	0					
ANR	104645	IfStatement	if ( result )		104514	3					
ANR	104646	Condition	result	2496:7:71883:71888	104514	0	True				
ANR	104647	Identifier	result		104514	0					
ANR	104648	CompoundStatement		19:15:593:593	104514	1					
ANR	104649	ReturnStatement	return 1 ;	2497:4:71897:71905	104514	0	True				
ANR	104650	PrimaryExpression	1		104514	0					
ANR	104651	ReturnStatement	return 0 ;	2502:1:71921:71929	104514	3	True				
ANR	104652	PrimaryExpression	0		104514	0					
ANR	104653	ReturnType	zend_bool		104514	1					
ANR	104654	Identifier	zend_list_has_assign_to		104514	2					
ANR	104655	ParameterList	"zend_ast * list_ast , zend_string * name"		104514	3					
ANR	104656	Parameter	zend_ast * list_ast	2477:34:71248:71265	104514	0	True				
ANR	104657	ParameterType	zend_ast *		104514	0					
ANR	104658	Identifier	list_ast		104514	1					
ANR	104659	Parameter	zend_string * name	2477:54:71268:71284	104514	1	True				
ANR	104660	ParameterType	zend_string *		104514	0					
ANR	104661	Identifier	name		104514	1					
ANR	104662	CFGEntryNode	ENTRY		104514		True				
ANR	104663	CFGExitNode	EXIT		104514		True				
ANR	104664	Symbol	zend_string_equals		104514						
ANR	104665	Symbol	* var_ast		104514						
ANR	104666	Symbol	var_ast -> child [ 0 ] -> kind		104514						
ANR	104667	Symbol	result		104514						
ANR	104668	Symbol	* * list		104514						
ANR	104669	Symbol	var_ast -> kind		104514						
ANR	104670	Symbol	* * var_ast		104514						
ANR	104671	Symbol	ZEND_AST_VAR		104514						
ANR	104672	Symbol	* * * var_ast		104514						
ANR	104673	Symbol	ZEND_AST_ZVAL		104514						
ANR	104674	Symbol	list_ast		104514						
ANR	104675	Symbol	var_ast -> child		104514						
ANR	104676	Symbol	var_name		104514						
ANR	104677	Symbol	list -> child		104514						
ANR	104678	Symbol	i		104514						
ANR	104679	Symbol	zval_get_string		104514						
ANR	104680	Symbol	list		104514						
ANR	104681	Symbol	* * var_ast -> child		104514						
ANR	104682	Symbol	zend_ast_get_list		104514						
ANR	104683	Symbol	var_ast		104514						
ANR	104684	Symbol	* i		104514						
ANR	104685	Symbol	* list		104514						
ANR	104686	Symbol	ZEND_AST_LIST		104514						
ANR	104687	Symbol	name		104514						
ANR	104688	Symbol	* list -> child		104514						
ANR	104689	Symbol	zend_ast_get_zval		104514						
ANR	104690	Symbol	zend_list_has_assign_to		104514						
ANR	104691	Symbol	* var_ast -> child		104514						
ANR	104692	Symbol	list -> children		104514						
ANR	104693	Function	zend_list_has_assign_to_self	2507:0:71994:72452							
ANR	104694	FunctionDef	"zend_list_has_assign_to_self (zend_ast * list_ast , zend_ast * expr_ast)"		104693	0					
ANR	104695	CompoundStatement		2508:0:72083:72452	104693	0					
ANR	104696	IfStatement	if ( expr_ast -> kind == ZEND_AST_VAR && expr_ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL )		104693	0					
ANR	104697	Condition	expr_ast -> kind == ZEND_AST_VAR && expr_ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL	2510:5:72173:72247	104693	0	True				
ANR	104698	AndExpression	expr_ast -> kind == ZEND_AST_VAR && expr_ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL		104693	0		&&			
ANR	104699	EqualityExpression	expr_ast -> kind == ZEND_AST_VAR		104693	0		==			
ANR	104700	PtrMemberAccess	expr_ast -> kind		104693	0					
ANR	104701	Identifier	expr_ast		104693	0					
ANR	104702	Identifier	kind		104693	1					
ANR	104703	Identifier	ZEND_AST_VAR		104693	1					
ANR	104704	EqualityExpression	expr_ast -> child [ 0 ] -> kind == ZEND_AST_ZVAL		104693	1		==			
ANR	104705	PtrMemberAccess	expr_ast -> child [ 0 ] -> kind		104693	0					
ANR	104706	ArrayIndexing	expr_ast -> child [ 0 ]		104693	0					
ANR	104707	PtrMemberAccess	expr_ast -> child		104693	0					
ANR	104708	Identifier	expr_ast		104693	0					
ANR	104709	Identifier	child		104693	1					
ANR	104710	PrimaryExpression	0		104693	1					
ANR	104711	Identifier	kind		104693	1					
ANR	104712	Identifier	ZEND_AST_ZVAL		104693	1					
ANR	104713	CompoundStatement		5:2:248:306	104693	1					
ANR	104714	IdentifierDeclStatement	zend_string * name = zval_get_string ( zend_ast_get_zval ( expr_ast -> child [ 0 ] ) ) ;	2511:2:72254:72328	104693	0	True				
ANR	104715	IdentifierDecl	* name = zval_get_string ( zend_ast_get_zval ( expr_ast -> child [ 0 ] ) )		104693	0					
ANR	104716	IdentifierDeclType	zend_string *		104693	0					
ANR	104717	Identifier	name		104693	1					
ANR	104718	AssignmentExpression	* name = zval_get_string ( zend_ast_get_zval ( expr_ast -> child [ 0 ] ) )		104693	2		=			
ANR	104719	Identifier	name		104693	0					
ANR	104720	CallExpression	zval_get_string ( zend_ast_get_zval ( expr_ast -> child [ 0 ] ) )		104693	1					
ANR	104721	Callee	zval_get_string		104693	0					
ANR	104722	Identifier	zval_get_string		104693	0					
ANR	104723	ArgumentList	zend_ast_get_zval ( expr_ast -> child [ 0 ] )		104693	1					
ANR	104724	Argument	zend_ast_get_zval ( expr_ast -> child [ 0 ] )		104693	0					
ANR	104725	CallExpression	zend_ast_get_zval ( expr_ast -> child [ 0 ] )		104693	0					
ANR	104726	Callee	zend_ast_get_zval		104693	0					
ANR	104727	Identifier	zend_ast_get_zval		104693	0					
ANR	104728	ArgumentList	expr_ast -> child [ 0 ]		104693	1					
ANR	104729	Argument	expr_ast -> child [ 0 ]		104693	0					
ANR	104730	ArrayIndexing	expr_ast -> child [ 0 ]		104693	0					
ANR	104731	PtrMemberAccess	expr_ast -> child		104693	0					
ANR	104732	Identifier	expr_ast		104693	0					
ANR	104733	Identifier	child		104693	1					
ANR	104734	PrimaryExpression	0		104693	1					
ANR	104735	IdentifierDeclStatement	"zend_bool result = zend_list_has_assign_to ( list_ast , name ) ;"	2512:2:72332:72390	104693	1	True				
ANR	104736	IdentifierDecl	"result = zend_list_has_assign_to ( list_ast , name )"		104693	0					
ANR	104737	IdentifierDeclType	zend_bool		104693	0					
ANR	104738	Identifier	result		104693	1					
ANR	104739	AssignmentExpression	"result = zend_list_has_assign_to ( list_ast , name )"		104693	2		=			
ANR	104740	Identifier	result		104693	0					
ANR	104741	CallExpression	"zend_list_has_assign_to ( list_ast , name )"		104693	1					
ANR	104742	Callee	zend_list_has_assign_to		104693	0					
ANR	104743	Identifier	zend_list_has_assign_to		104693	0					
ANR	104744	ArgumentList	list_ast		104693	1					
ANR	104745	Argument	list_ast		104693	0					
ANR	104746	Identifier	list_ast		104693	0					
ANR	104747	Argument	name		104693	1					
ANR	104748	Identifier	name		104693	0					
ANR	104749	ExpressionStatement	zend_string_release ( name )	2513:2:72394:72419	104693	2	True				
ANR	104750	CallExpression	zend_string_release ( name )		104693	0					
ANR	104751	Callee	zend_string_release		104693	0					
ANR	104752	Identifier	zend_string_release		104693	0					
ANR	104753	ArgumentList	name		104693	1					
ANR	104754	Argument	name		104693	0					
ANR	104755	Identifier	name		104693	0					
ANR	104756	ReturnStatement	return result ;	2514:2:72423:72436	104693	3	True				
ANR	104757	Identifier	result		104693	0					
ANR	104758	ReturnStatement	return 0 ;	2516:1:72442:72450	104693	1	True				
ANR	104759	PrimaryExpression	0		104693	0					
ANR	104760	ReturnType	zend_bool		104693	1					
ANR	104761	Identifier	zend_list_has_assign_to_self		104693	2					
ANR	104762	ParameterList	"zend_ast * list_ast , zend_ast * expr_ast"		104693	3					
ANR	104763	Parameter	zend_ast * list_ast	2507:39:72033:72050	104693	0	True				
ANR	104764	ParameterType	zend_ast *		104693	0					
ANR	104765	Identifier	list_ast		104693	1					
ANR	104766	Parameter	zend_ast * expr_ast	2507:59:72053:72070	104693	1	True				
ANR	104767	ParameterType	zend_ast *		104693	0					
ANR	104768	Identifier	expr_ast		104693	1					
ANR	104769	CFGEntryNode	ENTRY		104693		True				
ANR	104770	CFGExitNode	EXIT		104693		True				
ANR	104771	Symbol	* expr_ast		104693						
ANR	104772	Symbol	expr_ast -> child [ 0 ] -> kind		104693						
ANR	104773	Symbol	expr_ast -> kind		104693						
ANR	104774	Symbol	* * expr_ast -> child		104693						
ANR	104775	Symbol	expr_ast -> child		104693						
ANR	104776	Symbol	zval_get_string		104693						
ANR	104777	Symbol	expr_ast		104693						
ANR	104778	Symbol	* * expr_ast		104693						
ANR	104779	Symbol	result		104693						
ANR	104780	Symbol	* expr_ast -> child		104693						
ANR	104781	Symbol	* * * expr_ast		104693						
ANR	104782	Symbol	ZEND_AST_VAR		104693						
ANR	104783	Symbol	ZEND_AST_ZVAL		104693						
ANR	104784	Symbol	list_ast		104693						
ANR	104785	Symbol	name		104693						
ANR	104786	Symbol	zend_ast_get_zval		104693						
ANR	104787	Symbol	zend_list_has_assign_to		104693						
ANR	104788	Function	zend_compile_assign	2520:0:72465:74230							
ANR	104789	FunctionDef	"zend_compile_assign (znode * result , zend_ast * ast)"		104788	0					
ANR	104790	CompoundStatement		2521:0:72530:74230	104788	0					
ANR	104791	IdentifierDeclStatement	zend_ast * var_ast = ast -> child [ 0 ] ;	2522:1:72533:72566	104788	0	True				
ANR	104792	IdentifierDecl	* var_ast = ast -> child [ 0 ]		104788	0					
ANR	104793	IdentifierDeclType	zend_ast *		104788	0					
ANR	104794	Identifier	var_ast		104788	1					
ANR	104795	AssignmentExpression	* var_ast = ast -> child [ 0 ]		104788	2		=			
ANR	104796	Identifier	var_ast		104788	0					
ANR	104797	ArrayIndexing	ast -> child [ 0 ]		104788	1					
ANR	104798	PtrMemberAccess	ast -> child		104788	0					
ANR	104799	Identifier	ast		104788	0					
ANR	104800	Identifier	child		104788	1					
ANR	104801	PrimaryExpression	0		104788	1					
ANR	104802	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 1 ] ;	2523:1:72569:72603	104788	1	True				
ANR	104803	IdentifierDecl	* expr_ast = ast -> child [ 1 ]		104788	0					
ANR	104804	IdentifierDeclType	zend_ast *		104788	0					
ANR	104805	Identifier	expr_ast		104788	1					
ANR	104806	AssignmentExpression	* expr_ast = ast -> child [ 1 ]		104788	2		=			
ANR	104807	Identifier	expr_ast		104788	0					
ANR	104808	ArrayIndexing	ast -> child [ 1 ]		104788	1					
ANR	104809	PtrMemberAccess	ast -> child		104788	0					
ANR	104810	Identifier	ast		104788	0					
ANR	104811	Identifier	child		104788	1					
ANR	104812	PrimaryExpression	1		104788	1					
ANR	104813	IdentifierDeclStatement	"znode var_node , expr_node ;"	2525:1:72607:72632	104788	2	True				
ANR	104814	IdentifierDecl	var_node		104788	0					
ANR	104815	IdentifierDeclType	znode		104788	0					
ANR	104816	Identifier	var_node		104788	1					
ANR	104817	IdentifierDecl	expr_node		104788	1					
ANR	104818	IdentifierDeclType	znode		104788	0					
ANR	104819	Identifier	expr_node		104788	1					
ANR	104820	IdentifierDeclStatement	zend_op * opline ;	2526:1:72635:72650	104788	3	True				
ANR	104821	IdentifierDecl	* opline		104788	0					
ANR	104822	IdentifierDeclType	zend_op *		104788	0					
ANR	104823	Identifier	opline		104788	1					
ANR	104824	IdentifierDeclStatement	uint32_t offset ;	2527:1:72653:72668	104788	4	True				
ANR	104825	IdentifierDecl	offset		104788	0					
ANR	104826	IdentifierDeclType	uint32_t		104788	0					
ANR	104827	Identifier	offset		104788	1					
ANR	104828	IfStatement	if ( is_this_fetch ( var_ast ) )		104788	5					
ANR	104829	Condition	is_this_fetch ( var_ast )	2529:5:72676:72697	104788	0	True				
ANR	104830	CallExpression	is_this_fetch ( var_ast )		104788	0					
ANR	104831	Callee	is_this_fetch		104788	0					
ANR	104832	Identifier	is_this_fetch		104788	0					
ANR	104833	ArgumentList	var_ast		104788	1					
ANR	104834	Argument	var_ast		104788	0					
ANR	104835	Identifier	var_ast		104788	0					
ANR	104836	CompoundStatement		9:29:169:169	104788	1					
ANR	104837	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign $this"" )"	2530:2:72704:72766	104788	0	True				
ANR	104838	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign $this"" )"		104788	0					
ANR	104839	Callee	zend_error_noreturn		104788	0					
ANR	104840	Identifier	zend_error_noreturn		104788	0					
ANR	104841	ArgumentList	E_COMPILE_ERROR		104788	1					
ANR	104842	Argument	E_COMPILE_ERROR		104788	0					
ANR	104843	Identifier	E_COMPILE_ERROR		104788	0					
ANR	104844	Argument	"""Cannot re-assign $this"""		104788	1					
ANR	104845	PrimaryExpression	"""Cannot re-assign $this"""		104788	0					
ANR	104846	ExpressionStatement	zend_ensure_writable_variable ( var_ast )	2533:1:72773:72811	104788	6	True				
ANR	104847	CallExpression	zend_ensure_writable_variable ( var_ast )		104788	0					
ANR	104848	Callee	zend_ensure_writable_variable		104788	0					
ANR	104849	Identifier	zend_ensure_writable_variable		104788	0					
ANR	104850	ArgumentList	var_ast		104788	1					
ANR	104851	Argument	var_ast		104788	0					
ANR	104852	Identifier	var_ast		104788	0					
ANR	104853	SwitchStatement	switch ( var_ast -> kind )		104788	7					
ANR	104854	Condition	var_ast -> kind	2535:9:72823:72835	104788	0	True				
ANR	104855	PtrMemberAccess	var_ast -> kind		104788	0					
ANR	104856	Identifier	var_ast		104788	0					
ANR	104857	Identifier	kind		104788	1					
ANR	104858	CompoundStatement		15:24:307:307	104788	1					
ANR	104859	Label	case ZEND_AST_VAR :	2536:2:72842:72859	104788	0	True				
ANR	104860	Identifier	ZEND_AST_VAR		104788	0					
ANR	104861	Label	case ZEND_AST_STATIC_PROP :	2537:2:72863:72888	104788	1	True				
ANR	104862	Identifier	ZEND_AST_STATIC_PROP		104788	0					
ANR	104863	ExpressionStatement	"zend_compile_var ( & var_node , var_ast , BP_VAR_W )"	2538:3:72893:72939	104788	2	True				
ANR	104864	CallExpression	"zend_compile_var ( & var_node , var_ast , BP_VAR_W )"		104788	0					
ANR	104865	Callee	zend_compile_var		104788	0					
ANR	104866	Identifier	zend_compile_var		104788	0					
ANR	104867	ArgumentList	& var_node		104788	1					
ANR	104868	Argument	& var_node		104788	0					
ANR	104869	UnaryOperationExpression	& var_node		104788	0					
ANR	104870	UnaryOperator	&		104788	0					
ANR	104871	Identifier	var_node		104788	1					
ANR	104872	Argument	var_ast		104788	1					
ANR	104873	Identifier	var_ast		104788	0					
ANR	104874	Argument	BP_VAR_W		104788	2					
ANR	104875	Identifier	BP_VAR_W		104788	0					
ANR	104876	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	2539:3:72944:72983	104788	3	True				
ANR	104877	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		104788	0					
ANR	104878	Callee	zend_compile_expr		104788	0					
ANR	104879	Identifier	zend_compile_expr		104788	0					
ANR	104880	ArgumentList	& expr_node		104788	1					
ANR	104881	Argument	& expr_node		104788	0					
ANR	104882	UnaryOperationExpression	& expr_node		104788	0					
ANR	104883	UnaryOperator	&		104788	0					
ANR	104884	Identifier	expr_node		104788	1					
ANR	104885	Argument	expr_ast		104788	1					
ANR	104886	Identifier	expr_ast		104788	0					
ANR	104887	ExpressionStatement	"zend_emit_op ( result , ZEND_ASSIGN , & var_node , & expr_node )"	2540:3:72988:73044	104788	4	True				
ANR	104888	CallExpression	"zend_emit_op ( result , ZEND_ASSIGN , & var_node , & expr_node )"		104788	0					
ANR	104889	Callee	zend_emit_op		104788	0					
ANR	104890	Identifier	zend_emit_op		104788	0					
ANR	104891	ArgumentList	result		104788	1					
ANR	104892	Argument	result		104788	0					
ANR	104893	Identifier	result		104788	0					
ANR	104894	Argument	ZEND_ASSIGN		104788	1					
ANR	104895	Identifier	ZEND_ASSIGN		104788	0					
ANR	104896	Argument	& var_node		104788	2					
ANR	104897	UnaryOperationExpression	& var_node		104788	0					
ANR	104898	UnaryOperator	&		104788	0					
ANR	104899	Identifier	var_node		104788	1					
ANR	104900	Argument	& expr_node		104788	3					
ANR	104901	UnaryOperationExpression	& expr_node		104788	0					
ANR	104902	UnaryOperator	&		104788	0					
ANR	104903	Identifier	expr_node		104788	1					
ANR	104904	ReturnStatement	return ;	2541:3:73049:73055	104788	5	True				
ANR	104905	Label	case ZEND_AST_DIM :	2542:2:73059:73076	104788	6	True				
ANR	104906	Identifier	ZEND_AST_DIM		104788	0					
ANR	104907	ExpressionStatement	offset = zend_delayed_compile_begin ( )	2543:3:73081:73118	104788	7	True				
ANR	104908	AssignmentExpression	offset = zend_delayed_compile_begin ( )		104788	0		=			
ANR	104909	Identifier	offset		104788	0					
ANR	104910	CallExpression	zend_delayed_compile_begin ( )		104788	1					
ANR	104911	Callee	zend_delayed_compile_begin		104788	0					
ANR	104912	Identifier	zend_delayed_compile_begin		104788	0					
ANR	104913	ArgumentList			104788	1					
ANR	104914	ExpressionStatement	"zend_delayed_compile_dim ( result , var_ast , BP_VAR_W )"	2544:3:73123:73174	104788	8	True				
ANR	104915	CallExpression	"zend_delayed_compile_dim ( result , var_ast , BP_VAR_W )"		104788	0					
ANR	104916	Callee	zend_delayed_compile_dim		104788	0					
ANR	104917	Identifier	zend_delayed_compile_dim		104788	0					
ANR	104918	ArgumentList	result		104788	1					
ANR	104919	Argument	result		104788	0					
ANR	104920	Identifier	result		104788	0					
ANR	104921	Argument	var_ast		104788	1					
ANR	104922	Identifier	var_ast		104788	0					
ANR	104923	Argument	BP_VAR_W		104788	2					
ANR	104924	Identifier	BP_VAR_W		104788	0					
ANR	104925	IfStatement	"if ( zend_is_assign_to_self ( var_ast , expr_ast ) )"		104788	9					
ANR	104926	Condition	"zend_is_assign_to_self ( var_ast , expr_ast )"	2546:7:73184:73224	104788	0	True				
ANR	104927	CallExpression	"zend_is_assign_to_self ( var_ast , expr_ast )"		104788	0					
ANR	104928	Callee	zend_is_assign_to_self		104788	0					
ANR	104929	Identifier	zend_is_assign_to_self		104788	0					
ANR	104930	ArgumentList	var_ast		104788	1					
ANR	104931	Argument	var_ast		104788	0					
ANR	104932	Identifier	var_ast		104788	0					
ANR	104933	Argument	expr_ast		104788	1					
ANR	104934	Identifier	expr_ast		104788	0					
ANR	104935	CompoundStatement		26:50:696:696	104788	1					
ANR	104936	ExpressionStatement	"zend_compile_simple_var_no_cv ( & expr_node , expr_ast , BP_VAR_R , 0 )"	2548:4:73289:73353	104788	0	True				
ANR	104937	CallExpression	"zend_compile_simple_var_no_cv ( & expr_node , expr_ast , BP_VAR_R , 0 )"		104788	0					
ANR	104938	Callee	zend_compile_simple_var_no_cv		104788	0					
ANR	104939	Identifier	zend_compile_simple_var_no_cv		104788	0					
ANR	104940	ArgumentList	& expr_node		104788	1					
ANR	104941	Argument	& expr_node		104788	0					
ANR	104942	UnaryOperationExpression	& expr_node		104788	0					
ANR	104943	UnaryOperator	&		104788	0					
ANR	104944	Identifier	expr_node		104788	1					
ANR	104945	Argument	expr_ast		104788	1					
ANR	104946	Identifier	expr_ast		104788	0					
ANR	104947	Argument	BP_VAR_R		104788	2					
ANR	104948	Identifier	BP_VAR_R		104788	0					
ANR	104949	Argument	0		104788	3					
ANR	104950	PrimaryExpression	0		104788	0					
ANR	104951	ElseStatement	else		104788	0					
ANR	104952	CompoundStatement		29:10:834:834	104788	0					
ANR	104953	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	2550:4:73371:73410	104788	0	True				
ANR	104954	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		104788	0					
ANR	104955	Callee	zend_compile_expr		104788	0					
ANR	104956	Identifier	zend_compile_expr		104788	0					
ANR	104957	ArgumentList	& expr_node		104788	1					
ANR	104958	Argument	& expr_node		104788	0					
ANR	104959	UnaryOperationExpression	& expr_node		104788	0					
ANR	104960	UnaryOperator	&		104788	0					
ANR	104961	Identifier	expr_node		104788	1					
ANR	104962	Argument	expr_ast		104788	1					
ANR	104963	Identifier	expr_ast		104788	0					
ANR	104964	ExpressionStatement	opline = zend_delayed_compile_end ( offset )	2553:3:73421:73462	104788	10	True				
ANR	104965	AssignmentExpression	opline = zend_delayed_compile_end ( offset )		104788	0		=			
ANR	104966	Identifier	opline		104788	0					
ANR	104967	CallExpression	zend_delayed_compile_end ( offset )		104788	1					
ANR	104968	Callee	zend_delayed_compile_end		104788	0					
ANR	104969	Identifier	zend_delayed_compile_end		104788	0					
ANR	104970	ArgumentList	offset		104788	1					
ANR	104971	Argument	offset		104788	0					
ANR	104972	Identifier	offset		104788	0					
ANR	104973	ExpressionStatement	opline -> opcode = ZEND_ASSIGN_DIM	2554:3:73467:73499	104788	11	True				
ANR	104974	AssignmentExpression	opline -> opcode = ZEND_ASSIGN_DIM		104788	0		=			
ANR	104975	PtrMemberAccess	opline -> opcode		104788	0					
ANR	104976	Identifier	opline		104788	0					
ANR	104977	Identifier	opcode		104788	1					
ANR	104978	Identifier	ZEND_ASSIGN_DIM		104788	1					
ANR	104979	ExpressionStatement	opline = zend_emit_op_data ( & expr_node )	2556:3:73505:73543	104788	12	True				
ANR	104980	AssignmentExpression	opline = zend_emit_op_data ( & expr_node )		104788	0		=			
ANR	104981	Identifier	opline		104788	0					
ANR	104982	CallExpression	zend_emit_op_data ( & expr_node )		104788	1					
ANR	104983	Callee	zend_emit_op_data		104788	0					
ANR	104984	Identifier	zend_emit_op_data		104788	0					
ANR	104985	ArgumentList	& expr_node		104788	1					
ANR	104986	Argument	& expr_node		104788	0					
ANR	104987	UnaryOperationExpression	& expr_node		104788	0					
ANR	104988	UnaryOperator	&		104788	0					
ANR	104989	Identifier	expr_node		104788	1					
ANR	104990	ReturnStatement	return ;	2557:3:73548:73554	104788	13	True				
ANR	104991	Label	case ZEND_AST_PROP :	2558:2:73558:73576	104788	14	True				
ANR	104992	Identifier	ZEND_AST_PROP		104788	0					
ANR	104993	ExpressionStatement	offset = zend_delayed_compile_begin ( )	2559:3:73581:73618	104788	15	True				
ANR	104994	AssignmentExpression	offset = zend_delayed_compile_begin ( )		104788	0		=			
ANR	104995	Identifier	offset		104788	0					
ANR	104996	CallExpression	zend_delayed_compile_begin ( )		104788	1					
ANR	104997	Callee	zend_delayed_compile_begin		104788	0					
ANR	104998	Identifier	zend_delayed_compile_begin		104788	0					
ANR	104999	ArgumentList			104788	1					
ANR	105000	ExpressionStatement	"zend_delayed_compile_prop ( result , var_ast , BP_VAR_W )"	2560:3:73623:73675	104788	16	True				
ANR	105001	CallExpression	"zend_delayed_compile_prop ( result , var_ast , BP_VAR_W )"		104788	0					
ANR	105002	Callee	zend_delayed_compile_prop		104788	0					
ANR	105003	Identifier	zend_delayed_compile_prop		104788	0					
ANR	105004	ArgumentList	result		104788	1					
ANR	105005	Argument	result		104788	0					
ANR	105006	Identifier	result		104788	0					
ANR	105007	Argument	var_ast		104788	1					
ANR	105008	Identifier	var_ast		104788	0					
ANR	105009	Argument	BP_VAR_W		104788	2					
ANR	105010	Identifier	BP_VAR_W		104788	0					
ANR	105011	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	2561:3:73680:73719	104788	17	True				
ANR	105012	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		104788	0					
ANR	105013	Callee	zend_compile_expr		104788	0					
ANR	105014	Identifier	zend_compile_expr		104788	0					
ANR	105015	ArgumentList	& expr_node		104788	1					
ANR	105016	Argument	& expr_node		104788	0					
ANR	105017	UnaryOperationExpression	& expr_node		104788	0					
ANR	105018	UnaryOperator	&		104788	0					
ANR	105019	Identifier	expr_node		104788	1					
ANR	105020	Argument	expr_ast		104788	1					
ANR	105021	Identifier	expr_ast		104788	0					
ANR	105022	ExpressionStatement	opline = zend_delayed_compile_end ( offset )	2563:3:73725:73766	104788	18	True				
ANR	105023	AssignmentExpression	opline = zend_delayed_compile_end ( offset )		104788	0		=			
ANR	105024	Identifier	opline		104788	0					
ANR	105025	CallExpression	zend_delayed_compile_end ( offset )		104788	1					
ANR	105026	Callee	zend_delayed_compile_end		104788	0					
ANR	105027	Identifier	zend_delayed_compile_end		104788	0					
ANR	105028	ArgumentList	offset		104788	1					
ANR	105029	Argument	offset		104788	0					
ANR	105030	Identifier	offset		104788	0					
ANR	105031	ExpressionStatement	opline -> opcode = ZEND_ASSIGN_OBJ	2564:3:73771:73803	104788	19	True				
ANR	105032	AssignmentExpression	opline -> opcode = ZEND_ASSIGN_OBJ		104788	0		=			
ANR	105033	PtrMemberAccess	opline -> opcode		104788	0					
ANR	105034	Identifier	opline		104788	0					
ANR	105035	Identifier	opcode		104788	1					
ANR	105036	Identifier	ZEND_ASSIGN_OBJ		104788	1					
ANR	105037	ExpressionStatement	zend_emit_op_data ( & expr_node )	2566:3:73809:73838	104788	20	True				
ANR	105038	CallExpression	zend_emit_op_data ( & expr_node )		104788	0					
ANR	105039	Callee	zend_emit_op_data		104788	0					
ANR	105040	Identifier	zend_emit_op_data		104788	0					
ANR	105041	ArgumentList	& expr_node		104788	1					
ANR	105042	Argument	& expr_node		104788	0					
ANR	105043	UnaryOperationExpression	& expr_node		104788	0					
ANR	105044	UnaryOperator	&		104788	0					
ANR	105045	Identifier	expr_node		104788	1					
ANR	105046	ReturnStatement	return ;	2567:3:73843:73849	104788	21	True				
ANR	105047	Label	case ZEND_AST_LIST :	2568:2:73853:73871	104788	22	True				
ANR	105048	Identifier	ZEND_AST_LIST		104788	0					
ANR	105049	IfStatement	"if ( zend_list_has_assign_to_self ( var_ast , expr_ast ) )"		104788	23					
ANR	105050	Condition	"zend_list_has_assign_to_self ( var_ast , expr_ast )"	2569:7:73880:73926	104788	0	True				
ANR	105051	CallExpression	"zend_list_has_assign_to_self ( var_ast , expr_ast )"		104788	0					
ANR	105052	Callee	zend_list_has_assign_to_self		104788	0					
ANR	105053	Identifier	zend_list_has_assign_to_self		104788	0					
ANR	105054	ArgumentList	var_ast		104788	1					
ANR	105055	Argument	var_ast		104788	0					
ANR	105056	Identifier	var_ast		104788	0					
ANR	105057	Argument	expr_ast		104788	1					
ANR	105058	Identifier	expr_ast		104788	0					
ANR	105059	CompoundStatement		49:56:1398:1398	104788	1					
ANR	105060	ExpressionStatement	"zend_compile_simple_var_no_cv ( & expr_node , expr_ast , BP_VAR_R , 0 )"	2571:4:73998:74062	104788	0	True				
ANR	105061	CallExpression	"zend_compile_simple_var_no_cv ( & expr_node , expr_ast , BP_VAR_R , 0 )"		104788	0					
ANR	105062	Callee	zend_compile_simple_var_no_cv		104788	0					
ANR	105063	Identifier	zend_compile_simple_var_no_cv		104788	0					
ANR	105064	ArgumentList	& expr_node		104788	1					
ANR	105065	Argument	& expr_node		104788	0					
ANR	105066	UnaryOperationExpression	& expr_node		104788	0					
ANR	105067	UnaryOperator	&		104788	0					
ANR	105068	Identifier	expr_node		104788	1					
ANR	105069	Argument	expr_ast		104788	1					
ANR	105070	Identifier	expr_ast		104788	0					
ANR	105071	Argument	BP_VAR_R		104788	2					
ANR	105072	Identifier	BP_VAR_R		104788	0					
ANR	105073	Argument	0		104788	3					
ANR	105074	PrimaryExpression	0		104788	0					
ANR	105075	ElseStatement	else		104788	0					
ANR	105076	CompoundStatement		52:10:1543:1543	104788	0					
ANR	105077	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	2573:4:74080:74119	104788	0	True				
ANR	105078	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		104788	0					
ANR	105079	Callee	zend_compile_expr		104788	0					
ANR	105080	Identifier	zend_compile_expr		104788	0					
ANR	105081	ArgumentList	& expr_node		104788	1					
ANR	105082	Argument	& expr_node		104788	0					
ANR	105083	UnaryOperationExpression	& expr_node		104788	0					
ANR	105084	UnaryOperator	&		104788	0					
ANR	105085	Identifier	expr_node		104788	1					
ANR	105086	Argument	expr_ast		104788	1					
ANR	105087	Identifier	expr_ast		104788	0					
ANR	105088	ExpressionStatement	"zend_compile_list_assign ( result , var_ast , & expr_node )"	2576:3:74130:74183	104788	24	True				
ANR	105089	CallExpression	"zend_compile_list_assign ( result , var_ast , & expr_node )"		104788	0					
ANR	105090	Callee	zend_compile_list_assign		104788	0					
ANR	105091	Identifier	zend_compile_list_assign		104788	0					
ANR	105092	ArgumentList	result		104788	1					
ANR	105093	Argument	result		104788	0					
ANR	105094	Identifier	result		104788	0					
ANR	105095	Argument	var_ast		104788	1					
ANR	105096	Identifier	var_ast		104788	0					
ANR	105097	Argument	& expr_node		104788	2					
ANR	105098	UnaryOperationExpression	& expr_node		104788	0					
ANR	105099	UnaryOperator	&		104788	0					
ANR	105100	Identifier	expr_node		104788	1					
ANR	105101	ReturnStatement	return ;	2577:3:74188:74194	104788	25	True				
ANR	105102	ExpressionStatement	EMPTY_SWITCH_DEFAULT_CASE ( )	2578:2:74198:74225	104788	26	True				
ANR	105103	CallExpression	EMPTY_SWITCH_DEFAULT_CASE ( )		104788	0					
ANR	105104	Callee	EMPTY_SWITCH_DEFAULT_CASE		104788	0					
ANR	105105	Identifier	EMPTY_SWITCH_DEFAULT_CASE		104788	0					
ANR	105106	ArgumentList			104788	1					
ANR	105107	ReturnType	void		104788	1					
ANR	105108	Identifier	zend_compile_assign		104788	2					
ANR	105109	ParameterList	"znode * result , zend_ast * ast"		104788	3					
ANR	105110	Parameter	znode * result	2520:25:72490:72502	104788	0	True				
ANR	105111	ParameterType	znode *		104788	0					
ANR	105112	Identifier	result		104788	1					
ANR	105113	Parameter	zend_ast * ast	2520:40:72505:72517	104788	1	True				
ANR	105114	ParameterType	zend_ast *		104788	0					
ANR	105115	Identifier	ast		104788	1					
ANR	105116	CFGEntryNode	ENTRY		104788		True				
ANR	105117	CFGExitNode	EXIT		104788		True				
ANR	105118	Symbol	zend_delayed_compile_end		104788						
ANR	105119	Symbol	ast		104788						
ANR	105120	Symbol	E_COMPILE_ERROR		104788						
ANR	105121	Symbol	zend_is_assign_to_self		104788						
ANR	105122	Symbol	* var_ast		104788						
ANR	105123	Symbol	& expr_node		104788						
ANR	105124	Symbol	result		104788						
ANR	105125	Symbol	* ast		104788						
ANR	105126	Symbol	opline		104788						
ANR	105127	Symbol	zend_delayed_compile_begin		104788						
ANR	105128	Symbol	var_ast -> kind		104788						
ANR	105129	Symbol	* * ast		104788						
ANR	105130	Symbol	zend_list_has_assign_to_self		104788						
ANR	105131	Symbol	BP_VAR_W		104788						
ANR	105132	Symbol	BP_VAR_R		104788						
ANR	105133	Symbol	is_this_fetch		104788						
ANR	105134	Symbol	ZEND_ASSIGN		104788						
ANR	105135	Symbol	var_node		104788						
ANR	105136	Symbol	offset		104788						
ANR	105137	Symbol	& var_node		104788						
ANR	105138	Symbol	ZEND_ASSIGN_OBJ		104788						
ANR	105139	Symbol	expr_ast		104788						
ANR	105140	Symbol	expr_node		104788						
ANR	105141	Symbol	var_ast		104788						
ANR	105142	Symbol	* opline		104788						
ANR	105143	Symbol	ZEND_ASSIGN_DIM		104788						
ANR	105144	Symbol	opline -> opcode		104788						
ANR	105145	Symbol	zend_emit_op_data		104788						
ANR	105146	Symbol	* ast -> child		104788						
ANR	105147	Symbol	ast -> child		104788						
ANR	105148	Function	zend_compile_assign_ref	2583:0:74243:75100							
ANR	105149	FunctionDef	"zend_compile_assign_ref (znode * result , zend_ast * ast)"		105148	0					
ANR	105150	CompoundStatement		2584:0:74312:75100	105148	0					
ANR	105151	IdentifierDeclStatement	zend_ast * target_ast = ast -> child [ 0 ] ;	2585:1:74315:74351	105148	0	True				
ANR	105152	IdentifierDecl	* target_ast = ast -> child [ 0 ]		105148	0					
ANR	105153	IdentifierDeclType	zend_ast *		105148	0					
ANR	105154	Identifier	target_ast		105148	1					
ANR	105155	AssignmentExpression	* target_ast = ast -> child [ 0 ]		105148	2		=			
ANR	105156	Identifier	target_ast		105148	0					
ANR	105157	ArrayIndexing	ast -> child [ 0 ]		105148	1					
ANR	105158	PtrMemberAccess	ast -> child		105148	0					
ANR	105159	Identifier	ast		105148	0					
ANR	105160	Identifier	child		105148	1					
ANR	105161	PrimaryExpression	0		105148	1					
ANR	105162	IdentifierDeclStatement	zend_ast * source_ast = ast -> child [ 1 ] ;	2586:1:74354:74390	105148	1	True				
ANR	105163	IdentifierDecl	* source_ast = ast -> child [ 1 ]		105148	0					
ANR	105164	IdentifierDeclType	zend_ast *		105148	0					
ANR	105165	Identifier	source_ast		105148	1					
ANR	105166	AssignmentExpression	* source_ast = ast -> child [ 1 ]		105148	2		=			
ANR	105167	Identifier	source_ast		105148	0					
ANR	105168	ArrayIndexing	ast -> child [ 1 ]		105148	1					
ANR	105169	PtrMemberAccess	ast -> child		105148	0					
ANR	105170	Identifier	ast		105148	0					
ANR	105171	Identifier	child		105148	1					
ANR	105172	PrimaryExpression	1		105148	1					
ANR	105173	IdentifierDeclStatement	"znode target_node , source_node ;"	2588:1:74394:74424	105148	2	True				
ANR	105174	IdentifierDecl	target_node		105148	0					
ANR	105175	IdentifierDeclType	znode		105148	0					
ANR	105176	Identifier	target_node		105148	1					
ANR	105177	IdentifierDecl	source_node		105148	1					
ANR	105178	IdentifierDeclType	znode		105148	0					
ANR	105179	Identifier	source_node		105148	1					
ANR	105180	IdentifierDeclStatement	zend_op * opline ;	2589:1:74427:74442	105148	3	True				
ANR	105181	IdentifierDecl	* opline		105148	0					
ANR	105182	IdentifierDeclType	zend_op *		105148	0					
ANR	105183	Identifier	opline		105148	1					
ANR	105184	IfStatement	if ( is_this_fetch ( target_ast ) )		105148	4					
ANR	105185	Condition	is_this_fetch ( target_ast )	2591:5:74450:74474	105148	0	True				
ANR	105186	CallExpression	is_this_fetch ( target_ast )		105148	0					
ANR	105187	Callee	is_this_fetch		105148	0					
ANR	105188	Identifier	is_this_fetch		105148	0					
ANR	105189	ArgumentList	target_ast		105148	1					
ANR	105190	Argument	target_ast		105148	0					
ANR	105191	Identifier	target_ast		105148	0					
ANR	105192	CompoundStatement		8:32:164:164	105148	1					
ANR	105193	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign $this"" )"	2592:2:74481:74543	105148	0	True				
ANR	105194	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign $this"" )"		105148	0					
ANR	105195	Callee	zend_error_noreturn		105148	0					
ANR	105196	Identifier	zend_error_noreturn		105148	0					
ANR	105197	ArgumentList	E_COMPILE_ERROR		105148	1					
ANR	105198	Argument	E_COMPILE_ERROR		105148	0					
ANR	105199	Identifier	E_COMPILE_ERROR		105148	0					
ANR	105200	Argument	"""Cannot re-assign $this"""		105148	1					
ANR	105201	PrimaryExpression	"""Cannot re-assign $this"""		105148	0					
ANR	105202	ExpressionStatement	zend_ensure_writable_variable ( target_ast )	2594:1:74549:74590	105148	5	True				
ANR	105203	CallExpression	zend_ensure_writable_variable ( target_ast )		105148	0					
ANR	105204	Callee	zend_ensure_writable_variable		105148	0					
ANR	105205	Identifier	zend_ensure_writable_variable		105148	0					
ANR	105206	ArgumentList	target_ast		105148	1					
ANR	105207	Argument	target_ast		105148	0					
ANR	105208	Identifier	target_ast		105148	0					
ANR	105209	ExpressionStatement	"zend_compile_var ( & target_node , target_ast , BP_VAR_W )"	2596:1:74594:74646	105148	6	True				
ANR	105210	CallExpression	"zend_compile_var ( & target_node , target_ast , BP_VAR_W )"		105148	0					
ANR	105211	Callee	zend_compile_var		105148	0					
ANR	105212	Identifier	zend_compile_var		105148	0					
ANR	105213	ArgumentList	& target_node		105148	1					
ANR	105214	Argument	& target_node		105148	0					
ANR	105215	UnaryOperationExpression	& target_node		105148	0					
ANR	105216	UnaryOperator	&		105148	0					
ANR	105217	Identifier	target_node		105148	1					
ANR	105218	Argument	target_ast		105148	1					
ANR	105219	Identifier	target_ast		105148	0					
ANR	105220	Argument	BP_VAR_W		105148	2					
ANR	105221	Identifier	BP_VAR_W		105148	0					
ANR	105222	ExpressionStatement	"zend_compile_var ( & source_node , source_ast , BP_VAR_REF )"	2597:1:74649:74703	105148	7	True				
ANR	105223	CallExpression	"zend_compile_var ( & source_node , source_ast , BP_VAR_REF )"		105148	0					
ANR	105224	Callee	zend_compile_var		105148	0					
ANR	105225	Identifier	zend_compile_var		105148	0					
ANR	105226	ArgumentList	& source_node		105148	1					
ANR	105227	Argument	& source_node		105148	0					
ANR	105228	UnaryOperationExpression	& source_node		105148	0					
ANR	105229	UnaryOperator	&		105148	0					
ANR	105230	Identifier	source_node		105148	1					
ANR	105231	Argument	source_ast		105148	1					
ANR	105232	Identifier	source_ast		105148	0					
ANR	105233	Argument	BP_VAR_REF		105148	2					
ANR	105234	Identifier	BP_VAR_REF		105148	0					
ANR	105235	IfStatement	if ( source_node . op_type != IS_VAR && zend_is_call ( source_ast ) )		105148	8					
ANR	105236	Condition	source_node . op_type != IS_VAR && zend_is_call ( source_ast )	2599:5:74711:74767	105148	0	True				
ANR	105237	AndExpression	source_node . op_type != IS_VAR && zend_is_call ( source_ast )		105148	0		&&			
ANR	105238	EqualityExpression	source_node . op_type != IS_VAR		105148	0		!=			
ANR	105239	MemberAccess	source_node . op_type		105148	0					
ANR	105240	Identifier	source_node		105148	0					
ANR	105241	Identifier	op_type		105148	1					
ANR	105242	Identifier	IS_VAR		105148	1					
ANR	105243	CallExpression	zend_is_call ( source_ast )		105148	1					
ANR	105244	Callee	zend_is_call		105148	0					
ANR	105245	Identifier	zend_is_call		105148	0					
ANR	105246	ArgumentList	source_ast		105148	1					
ANR	105247	Argument	source_ast		105148	0					
ANR	105248	Identifier	source_ast		105148	0					
ANR	105249	CompoundStatement		16:64:457:457	105148	1					
ANR	105250	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use result of built-in function in write context"" )"	2600:2:74774:74869	105148	0	True				
ANR	105251	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use result of built-in function in write context"" )"		105148	0					
ANR	105252	Callee	zend_error_noreturn		105148	0					
ANR	105253	Identifier	zend_error_noreturn		105148	0					
ANR	105254	ArgumentList	E_COMPILE_ERROR		105148	1					
ANR	105255	Argument	E_COMPILE_ERROR		105148	0					
ANR	105256	Identifier	E_COMPILE_ERROR		105148	0					
ANR	105257	Argument	"""Cannot use result of built-in function in write context"""		105148	1					
ANR	105258	PrimaryExpression	"""Cannot use result of built-in function in write context"""		105148	0					
ANR	105259	ExpressionStatement	"opline = zend_emit_op ( result , ZEND_ASSIGN_REF , & target_node , & source_node )"	2603:1:74876:74950	105148	9	True				
ANR	105260	AssignmentExpression	"opline = zend_emit_op ( result , ZEND_ASSIGN_REF , & target_node , & source_node )"		105148	0		=			
ANR	105261	Identifier	opline		105148	0					
ANR	105262	CallExpression	"zend_emit_op ( result , ZEND_ASSIGN_REF , & target_node , & source_node )"		105148	1					
ANR	105263	Callee	zend_emit_op		105148	0					
ANR	105264	Identifier	zend_emit_op		105148	0					
ANR	105265	ArgumentList	result		105148	1					
ANR	105266	Argument	result		105148	0					
ANR	105267	Identifier	result		105148	0					
ANR	105268	Argument	ZEND_ASSIGN_REF		105148	1					
ANR	105269	Identifier	ZEND_ASSIGN_REF		105148	0					
ANR	105270	Argument	& target_node		105148	2					
ANR	105271	UnaryOperationExpression	& target_node		105148	0					
ANR	105272	UnaryOperator	&		105148	0					
ANR	105273	Identifier	target_node		105148	1					
ANR	105274	Argument	& source_node		105148	3					
ANR	105275	UnaryOperationExpression	& source_node		105148	0					
ANR	105276	UnaryOperator	&		105148	0					
ANR	105277	Identifier	source_node		105148	1					
ANR	105278	IfStatement	if ( ! result )		105148	10					
ANR	105279	Condition	! result	2604:5:74957:74963	105148	0	True				
ANR	105280	UnaryOperationExpression	! result		105148	0					
ANR	105281	UnaryOperator	!		105148	0					
ANR	105282	Identifier	result		105148	1					
ANR	105283	CompoundStatement		21:14:653:653	105148	1					
ANR	105284	ExpressionStatement	opline -> result_type |= EXT_TYPE_UNUSED	2605:2:74970:75008	105148	0	True				
ANR	105285	AssignmentExpression	opline -> result_type |= EXT_TYPE_UNUSED		105148	0		|=			
ANR	105286	PtrMemberAccess	opline -> result_type		105148	0					
ANR	105287	Identifier	opline		105148	0					
ANR	105288	Identifier	result_type		105148	1					
ANR	105289	Identifier	EXT_TYPE_UNUSED		105148	1					
ANR	105290	IfStatement	if ( zend_is_call ( source_ast ) )		105148	11					
ANR	105291	Condition	zend_is_call ( source_ast )	2608:5:75019:75042	105148	0	True				
ANR	105292	CallExpression	zend_is_call ( source_ast )		105148	0					
ANR	105293	Callee	zend_is_call		105148	0					
ANR	105294	Identifier	zend_is_call		105148	0					
ANR	105295	ArgumentList	source_ast		105148	1					
ANR	105296	Argument	source_ast		105148	0					
ANR	105297	Identifier	source_ast		105148	0					
ANR	105298	CompoundStatement		25:31:732:732	105148	1					
ANR	105299	ExpressionStatement	opline -> extended_value = ZEND_RETURNS_FUNCTION	2609:2:75049:75095	105148	0	True				
ANR	105300	AssignmentExpression	opline -> extended_value = ZEND_RETURNS_FUNCTION		105148	0		=			
ANR	105301	PtrMemberAccess	opline -> extended_value		105148	0					
ANR	105302	Identifier	opline		105148	0					
ANR	105303	Identifier	extended_value		105148	1					
ANR	105304	Identifier	ZEND_RETURNS_FUNCTION		105148	1					
ANR	105305	ReturnType	void		105148	1					
ANR	105306	Identifier	zend_compile_assign_ref		105148	2					
ANR	105307	ParameterList	"znode * result , zend_ast * ast"		105148	3					
ANR	105308	Parameter	znode * result	2583:29:74272:74284	105148	0	True				
ANR	105309	ParameterType	znode *		105148	0					
ANR	105310	Identifier	result		105148	1					
ANR	105311	Parameter	zend_ast * ast	2583:44:74287:74299	105148	1	True				
ANR	105312	ParameterType	zend_ast *		105148	0					
ANR	105313	Identifier	ast		105148	1					
ANR	105314	CFGEntryNode	ENTRY		105148		True				
ANR	105315	CFGExitNode	EXIT		105148		True				
ANR	105316	Symbol	ast		105148						
ANR	105317	Symbol	ZEND_ASSIGN_REF		105148						
ANR	105318	Symbol	E_COMPILE_ERROR		105148						
ANR	105319	Symbol	source_node . op_type		105148						
ANR	105320	Symbol	target_node		105148						
ANR	105321	Symbol	opline -> extended_value		105148						
ANR	105322	Symbol	result		105148						
ANR	105323	Symbol	target_ast		105148						
ANR	105324	Symbol	& target_node		105148						
ANR	105325	Symbol	* ast		105148						
ANR	105326	Symbol	opline		105148						
ANR	105327	Symbol	* * ast		105148						
ANR	105328	Symbol	source_node		105148						
ANR	105329	Symbol	BP_VAR_W		105148						
ANR	105330	Symbol	source_ast		105148						
ANR	105331	Symbol	EXT_TYPE_UNUSED		105148						
ANR	105332	Symbol	BP_VAR_REF		105148						
ANR	105333	Symbol	opline -> result_type		105148						
ANR	105334	Symbol	is_this_fetch		105148						
ANR	105335	Symbol	zend_is_call		105148						
ANR	105336	Symbol	ZEND_RETURNS_FUNCTION		105148						
ANR	105337	Symbol	* opline		105148						
ANR	105338	Symbol	& source_node		105148						
ANR	105339	Symbol	* ast -> child		105148						
ANR	105340	Symbol	ast -> child		105148						
ANR	105341	Symbol	IS_VAR		105148						
ANR	105342	Symbol	zend_emit_op		105148						
ANR	105343	Function	zend_emit_assign_ref_znode	2614:0:75113:75361							
ANR	105344	FunctionDef	"zend_emit_assign_ref_znode (zend_ast * var_ast , znode * value_node)"		105343	0					
ANR	105345	CompoundStatement		2615:0:75207:75361	105343	0					
ANR	105346	IdentifierDeclStatement	"zend_ast * assign_ast = zend_ast_create ( ZEND_AST_ASSIGN_REF , var_ast , zend_ast_create_znode ( value_node ) ) ;"	2616:1:75210:75315	105343	0	True				
ANR	105347	IdentifierDecl	"* assign_ast = zend_ast_create ( ZEND_AST_ASSIGN_REF , var_ast , zend_ast_create_znode ( value_node ) )"		105343	0					
ANR	105348	IdentifierDeclType	zend_ast *		105343	0					
ANR	105349	Identifier	assign_ast		105343	1					
ANR	105350	AssignmentExpression	"* assign_ast = zend_ast_create ( ZEND_AST_ASSIGN_REF , var_ast , zend_ast_create_znode ( value_node ) )"		105343	2		=			
ANR	105351	Identifier	assign_ast		105343	0					
ANR	105352	CallExpression	"zend_ast_create ( ZEND_AST_ASSIGN_REF , var_ast , zend_ast_create_znode ( value_node ) )"		105343	1					
ANR	105353	Callee	zend_ast_create		105343	0					
ANR	105354	Identifier	zend_ast_create		105343	0					
ANR	105355	ArgumentList	ZEND_AST_ASSIGN_REF		105343	1					
ANR	105356	Argument	ZEND_AST_ASSIGN_REF		105343	0					
ANR	105357	Identifier	ZEND_AST_ASSIGN_REF		105343	0					
ANR	105358	Argument	var_ast		105343	1					
ANR	105359	Identifier	var_ast		105343	0					
ANR	105360	Argument	zend_ast_create_znode ( value_node )		105343	2					
ANR	105361	CallExpression	zend_ast_create_znode ( value_node )		105343	0					
ANR	105362	Callee	zend_ast_create_znode		105343	0					
ANR	105363	Identifier	zend_ast_create_znode		105343	0					
ANR	105364	ArgumentList	value_node		105343	1					
ANR	105365	Argument	value_node		105343	0					
ANR	105366	Identifier	value_node		105343	0					
ANR	105367	ExpressionStatement	"zend_compile_assign_ref ( NULL , assign_ast )"	2618:1:75318:75359	105343	1	True				
ANR	105368	CallExpression	"zend_compile_assign_ref ( NULL , assign_ast )"		105343	0					
ANR	105369	Callee	zend_compile_assign_ref		105343	0					
ANR	105370	Identifier	zend_compile_assign_ref		105343	0					
ANR	105371	ArgumentList	NULL		105343	1					
ANR	105372	Argument	NULL		105343	0					
ANR	105373	Identifier	NULL		105343	0					
ANR	105374	Argument	assign_ast		105343	1					
ANR	105375	Identifier	assign_ast		105343	0					
ANR	105376	ReturnType	static inline void		105343	1					
ANR	105377	Identifier	zend_emit_assign_ref_znode		105343	2					
ANR	105378	ParameterList	"zend_ast * var_ast , znode * value_node"		105343	3					
ANR	105379	Parameter	zend_ast * var_ast	2614:46:75159:75175	105343	0	True				
ANR	105380	ParameterType	zend_ast *		105343	0					
ANR	105381	Identifier	var_ast		105343	1					
ANR	105382	Parameter	znode * value_node	2614:65:75178:75194	105343	1	True				
ANR	105383	ParameterType	znode *		105343	0					
ANR	105384	Identifier	value_node		105343	1					
ANR	105385	CFGEntryNode	ENTRY		105343		True				
ANR	105386	CFGExitNode	EXIT		105343		True				
ANR	105387	Symbol	var_ast		105343						
ANR	105388	Symbol	zend_ast_create_znode		105343						
ANR	105389	Symbol	NULL		105343						
ANR	105390	Symbol	assign_ast		105343						
ANR	105391	Symbol	zend_ast_create		105343						
ANR	105392	Symbol	value_node		105343						
ANR	105393	Symbol	ZEND_AST_ASSIGN_REF		105343						
ANR	105394	Function	zend_compile_compound_assign	2622:0:75374:76604							
ANR	105395	FunctionDef	"zend_compile_compound_assign (znode * result , zend_ast * ast)"		105394	0					
ANR	105396	CompoundStatement		2623:0:75448:76604	105394	0					
ANR	105397	IdentifierDeclStatement	zend_ast * var_ast = ast -> child [ 0 ] ;	2624:1:75451:75484	105394	0	True				
ANR	105398	IdentifierDecl	* var_ast = ast -> child [ 0 ]		105394	0					
ANR	105399	IdentifierDeclType	zend_ast *		105394	0					
ANR	105400	Identifier	var_ast		105394	1					
ANR	105401	AssignmentExpression	* var_ast = ast -> child [ 0 ]		105394	2		=			
ANR	105402	Identifier	var_ast		105394	0					
ANR	105403	ArrayIndexing	ast -> child [ 0 ]		105394	1					
ANR	105404	PtrMemberAccess	ast -> child		105394	0					
ANR	105405	Identifier	ast		105394	0					
ANR	105406	Identifier	child		105394	1					
ANR	105407	PrimaryExpression	0		105394	1					
ANR	105408	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 1 ] ;	2625:1:75487:75521	105394	1	True				
ANR	105409	IdentifierDecl	* expr_ast = ast -> child [ 1 ]		105394	0					
ANR	105410	IdentifierDeclType	zend_ast *		105394	0					
ANR	105411	Identifier	expr_ast		105394	1					
ANR	105412	AssignmentExpression	* expr_ast = ast -> child [ 1 ]		105394	2		=			
ANR	105413	Identifier	expr_ast		105394	0					
ANR	105414	ArrayIndexing	ast -> child [ 1 ]		105394	1					
ANR	105415	PtrMemberAccess	ast -> child		105394	0					
ANR	105416	Identifier	ast		105394	0					
ANR	105417	Identifier	child		105394	1					
ANR	105418	PrimaryExpression	1		105394	1					
ANR	105419	IdentifierDeclStatement	uint32_t opcode = ast -> attr ;	2626:1:75524:75551	105394	2	True				
ANR	105420	IdentifierDecl	opcode = ast -> attr		105394	0					
ANR	105421	IdentifierDeclType	uint32_t		105394	0					
ANR	105422	Identifier	opcode		105394	1					
ANR	105423	AssignmentExpression	opcode = ast -> attr		105394	2		=			
ANR	105424	Identifier	opcode		105394	0					
ANR	105425	PtrMemberAccess	ast -> attr		105394	1					
ANR	105426	Identifier	ast		105394	0					
ANR	105427	Identifier	attr		105394	1					
ANR	105428	IdentifierDeclStatement	"znode var_node , expr_node ;"	2628:1:75555:75580	105394	3	True				
ANR	105429	IdentifierDecl	var_node		105394	0					
ANR	105430	IdentifierDeclType	znode		105394	0					
ANR	105431	Identifier	var_node		105394	1					
ANR	105432	IdentifierDecl	expr_node		105394	1					
ANR	105433	IdentifierDeclType	znode		105394	0					
ANR	105434	Identifier	expr_node		105394	1					
ANR	105435	IdentifierDeclStatement	zend_op * opline ;	2629:1:75583:75598	105394	4	True				
ANR	105436	IdentifierDecl	* opline		105394	0					
ANR	105437	IdentifierDeclType	zend_op *		105394	0					
ANR	105438	Identifier	opline		105394	1					
ANR	105439	IdentifierDeclStatement	uint32_t offset ;	2630:1:75601:75616	105394	5	True				
ANR	105440	IdentifierDecl	offset		105394	0					
ANR	105441	IdentifierDeclType	uint32_t		105394	0					
ANR	105442	Identifier	offset		105394	1					
ANR	105443	ExpressionStatement	zend_ensure_writable_variable ( var_ast )	2632:1:75620:75658	105394	6	True				
ANR	105444	CallExpression	zend_ensure_writable_variable ( var_ast )		105394	0					
ANR	105445	Callee	zend_ensure_writable_variable		105394	0					
ANR	105446	Identifier	zend_ensure_writable_variable		105394	0					
ANR	105447	ArgumentList	var_ast		105394	1					
ANR	105448	Argument	var_ast		105394	0					
ANR	105449	Identifier	var_ast		105394	0					
ANR	105450	SwitchStatement	switch ( var_ast -> kind )		105394	7					
ANR	105451	Condition	var_ast -> kind	2634:9:75670:75682	105394	0	True				
ANR	105452	PtrMemberAccess	var_ast -> kind		105394	0					
ANR	105453	Identifier	var_ast		105394	0					
ANR	105454	Identifier	kind		105394	1					
ANR	105455	CompoundStatement		12:24:236:236	105394	1					
ANR	105456	Label	case ZEND_AST_VAR :	2635:2:75689:75706	105394	0	True				
ANR	105457	Identifier	ZEND_AST_VAR		105394	0					
ANR	105458	Label	case ZEND_AST_STATIC_PROP :	2636:2:75710:75735	105394	1	True				
ANR	105459	Identifier	ZEND_AST_STATIC_PROP		105394	0					
ANR	105460	ExpressionStatement	"zend_compile_var ( & var_node , var_ast , BP_VAR_RW )"	2637:3:75740:75787	105394	2	True				
ANR	105461	CallExpression	"zend_compile_var ( & var_node , var_ast , BP_VAR_RW )"		105394	0					
ANR	105462	Callee	zend_compile_var		105394	0					
ANR	105463	Identifier	zend_compile_var		105394	0					
ANR	105464	ArgumentList	& var_node		105394	1					
ANR	105465	Argument	& var_node		105394	0					
ANR	105466	UnaryOperationExpression	& var_node		105394	0					
ANR	105467	UnaryOperator	&		105394	0					
ANR	105468	Identifier	var_node		105394	1					
ANR	105469	Argument	var_ast		105394	1					
ANR	105470	Identifier	var_ast		105394	0					
ANR	105471	Argument	BP_VAR_RW		105394	2					
ANR	105472	Identifier	BP_VAR_RW		105394	0					
ANR	105473	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	2638:3:75792:75831	105394	3	True				
ANR	105474	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		105394	0					
ANR	105475	Callee	zend_compile_expr		105394	0					
ANR	105476	Identifier	zend_compile_expr		105394	0					
ANR	105477	ArgumentList	& expr_node		105394	1					
ANR	105478	Argument	& expr_node		105394	0					
ANR	105479	UnaryOperationExpression	& expr_node		105394	0					
ANR	105480	UnaryOperator	&		105394	0					
ANR	105481	Identifier	expr_node		105394	1					
ANR	105482	Argument	expr_ast		105394	1					
ANR	105483	Identifier	expr_ast		105394	0					
ANR	105484	ExpressionStatement	"zend_emit_op ( result , opcode , & var_node , & expr_node )"	2639:3:75836:75887	105394	4	True				
ANR	105485	CallExpression	"zend_emit_op ( result , opcode , & var_node , & expr_node )"		105394	0					
ANR	105486	Callee	zend_emit_op		105394	0					
ANR	105487	Identifier	zend_emit_op		105394	0					
ANR	105488	ArgumentList	result		105394	1					
ANR	105489	Argument	result		105394	0					
ANR	105490	Identifier	result		105394	0					
ANR	105491	Argument	opcode		105394	1					
ANR	105492	Identifier	opcode		105394	0					
ANR	105493	Argument	& var_node		105394	2					
ANR	105494	UnaryOperationExpression	& var_node		105394	0					
ANR	105495	UnaryOperator	&		105394	0					
ANR	105496	Identifier	var_node		105394	1					
ANR	105497	Argument	& expr_node		105394	3					
ANR	105498	UnaryOperationExpression	& expr_node		105394	0					
ANR	105499	UnaryOperator	&		105394	0					
ANR	105500	Identifier	expr_node		105394	1					
ANR	105501	ReturnStatement	return ;	2640:3:75892:75898	105394	5	True				
ANR	105502	Label	case ZEND_AST_DIM :	2641:2:75902:75919	105394	6	True				
ANR	105503	Identifier	ZEND_AST_DIM		105394	0					
ANR	105504	ExpressionStatement	offset = zend_delayed_compile_begin ( )	2642:3:75924:75961	105394	7	True				
ANR	105505	AssignmentExpression	offset = zend_delayed_compile_begin ( )		105394	0		=			
ANR	105506	Identifier	offset		105394	0					
ANR	105507	CallExpression	zend_delayed_compile_begin ( )		105394	1					
ANR	105508	Callee	zend_delayed_compile_begin		105394	0					
ANR	105509	Identifier	zend_delayed_compile_begin		105394	0					
ANR	105510	ArgumentList			105394	1					
ANR	105511	ExpressionStatement	"zend_delayed_compile_dim ( result , var_ast , BP_VAR_RW )"	2643:3:75966:76018	105394	8	True				
ANR	105512	CallExpression	"zend_delayed_compile_dim ( result , var_ast , BP_VAR_RW )"		105394	0					
ANR	105513	Callee	zend_delayed_compile_dim		105394	0					
ANR	105514	Identifier	zend_delayed_compile_dim		105394	0					
ANR	105515	ArgumentList	result		105394	1					
ANR	105516	Argument	result		105394	0					
ANR	105517	Identifier	result		105394	0					
ANR	105518	Argument	var_ast		105394	1					
ANR	105519	Identifier	var_ast		105394	0					
ANR	105520	Argument	BP_VAR_RW		105394	2					
ANR	105521	Identifier	BP_VAR_RW		105394	0					
ANR	105522	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	2644:3:76023:76062	105394	9	True				
ANR	105523	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		105394	0					
ANR	105524	Callee	zend_compile_expr		105394	0					
ANR	105525	Identifier	zend_compile_expr		105394	0					
ANR	105526	ArgumentList	& expr_node		105394	1					
ANR	105527	Argument	& expr_node		105394	0					
ANR	105528	UnaryOperationExpression	& expr_node		105394	0					
ANR	105529	UnaryOperator	&		105394	0					
ANR	105530	Identifier	expr_node		105394	1					
ANR	105531	Argument	expr_ast		105394	1					
ANR	105532	Identifier	expr_ast		105394	0					
ANR	105533	ExpressionStatement	opline = zend_delayed_compile_end ( offset )	2646:3:76068:76109	105394	10	True				
ANR	105534	AssignmentExpression	opline = zend_delayed_compile_end ( offset )		105394	0		=			
ANR	105535	Identifier	opline		105394	0					
ANR	105536	CallExpression	zend_delayed_compile_end ( offset )		105394	1					
ANR	105537	Callee	zend_delayed_compile_end		105394	0					
ANR	105538	Identifier	zend_delayed_compile_end		105394	0					
ANR	105539	ArgumentList	offset		105394	1					
ANR	105540	Argument	offset		105394	0					
ANR	105541	Identifier	offset		105394	0					
ANR	105542	ExpressionStatement	opline -> opcode = opcode	2647:3:76114:76137	105394	11	True				
ANR	105543	AssignmentExpression	opline -> opcode = opcode		105394	0		=			
ANR	105544	PtrMemberAccess	opline -> opcode		105394	0					
ANR	105545	Identifier	opline		105394	0					
ANR	105546	Identifier	opcode		105394	1					
ANR	105547	Identifier	opcode		105394	1					
ANR	105548	ExpressionStatement	opline -> extended_value = ZEND_ASSIGN_DIM	2648:3:76142:76182	105394	12	True				
ANR	105549	AssignmentExpression	opline -> extended_value = ZEND_ASSIGN_DIM		105394	0		=			
ANR	105550	PtrMemberAccess	opline -> extended_value		105394	0					
ANR	105551	Identifier	opline		105394	0					
ANR	105552	Identifier	extended_value		105394	1					
ANR	105553	Identifier	ZEND_ASSIGN_DIM		105394	1					
ANR	105554	ExpressionStatement	opline = zend_emit_op_data ( & expr_node )	2650:3:76188:76226	105394	13	True				
ANR	105555	AssignmentExpression	opline = zend_emit_op_data ( & expr_node )		105394	0		=			
ANR	105556	Identifier	opline		105394	0					
ANR	105557	CallExpression	zend_emit_op_data ( & expr_node )		105394	1					
ANR	105558	Callee	zend_emit_op_data		105394	0					
ANR	105559	Identifier	zend_emit_op_data		105394	0					
ANR	105560	ArgumentList	& expr_node		105394	1					
ANR	105561	Argument	& expr_node		105394	0					
ANR	105562	UnaryOperationExpression	& expr_node		105394	0					
ANR	105563	UnaryOperator	&		105394	0					
ANR	105564	Identifier	expr_node		105394	1					
ANR	105565	ReturnStatement	return ;	2651:3:76231:76237	105394	14	True				
ANR	105566	Label	case ZEND_AST_PROP :	2652:2:76241:76259	105394	15	True				
ANR	105567	Identifier	ZEND_AST_PROP		105394	0					
ANR	105568	ExpressionStatement	offset = zend_delayed_compile_begin ( )	2653:3:76264:76301	105394	16	True				
ANR	105569	AssignmentExpression	offset = zend_delayed_compile_begin ( )		105394	0		=			
ANR	105570	Identifier	offset		105394	0					
ANR	105571	CallExpression	zend_delayed_compile_begin ( )		105394	1					
ANR	105572	Callee	zend_delayed_compile_begin		105394	0					
ANR	105573	Identifier	zend_delayed_compile_begin		105394	0					
ANR	105574	ArgumentList			105394	1					
ANR	105575	ExpressionStatement	"zend_delayed_compile_prop ( result , var_ast , BP_VAR_RW )"	2654:3:76306:76359	105394	17	True				
ANR	105576	CallExpression	"zend_delayed_compile_prop ( result , var_ast , BP_VAR_RW )"		105394	0					
ANR	105577	Callee	zend_delayed_compile_prop		105394	0					
ANR	105578	Identifier	zend_delayed_compile_prop		105394	0					
ANR	105579	ArgumentList	result		105394	1					
ANR	105580	Argument	result		105394	0					
ANR	105581	Identifier	result		105394	0					
ANR	105582	Argument	var_ast		105394	1					
ANR	105583	Identifier	var_ast		105394	0					
ANR	105584	Argument	BP_VAR_RW		105394	2					
ANR	105585	Identifier	BP_VAR_RW		105394	0					
ANR	105586	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	2655:3:76364:76403	105394	18	True				
ANR	105587	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		105394	0					
ANR	105588	Callee	zend_compile_expr		105394	0					
ANR	105589	Identifier	zend_compile_expr		105394	0					
ANR	105590	ArgumentList	& expr_node		105394	1					
ANR	105591	Argument	& expr_node		105394	0					
ANR	105592	UnaryOperationExpression	& expr_node		105394	0					
ANR	105593	UnaryOperator	&		105394	0					
ANR	105594	Identifier	expr_node		105394	1					
ANR	105595	Argument	expr_ast		105394	1					
ANR	105596	Identifier	expr_ast		105394	0					
ANR	105597	ExpressionStatement	opline = zend_delayed_compile_end ( offset )	2657:3:76409:76450	105394	19	True				
ANR	105598	AssignmentExpression	opline = zend_delayed_compile_end ( offset )		105394	0		=			
ANR	105599	Identifier	opline		105394	0					
ANR	105600	CallExpression	zend_delayed_compile_end ( offset )		105394	1					
ANR	105601	Callee	zend_delayed_compile_end		105394	0					
ANR	105602	Identifier	zend_delayed_compile_end		105394	0					
ANR	105603	ArgumentList	offset		105394	1					
ANR	105604	Argument	offset		105394	0					
ANR	105605	Identifier	offset		105394	0					
ANR	105606	ExpressionStatement	opline -> opcode = opcode	2658:3:76455:76478	105394	20	True				
ANR	105607	AssignmentExpression	opline -> opcode = opcode		105394	0		=			
ANR	105608	PtrMemberAccess	opline -> opcode		105394	0					
ANR	105609	Identifier	opline		105394	0					
ANR	105610	Identifier	opcode		105394	1					
ANR	105611	Identifier	opcode		105394	1					
ANR	105612	ExpressionStatement	opline -> extended_value = ZEND_ASSIGN_OBJ	2659:3:76483:76523	105394	21	True				
ANR	105613	AssignmentExpression	opline -> extended_value = ZEND_ASSIGN_OBJ		105394	0		=			
ANR	105614	PtrMemberAccess	opline -> extended_value		105394	0					
ANR	105615	Identifier	opline		105394	0					
ANR	105616	Identifier	extended_value		105394	1					
ANR	105617	Identifier	ZEND_ASSIGN_OBJ		105394	1					
ANR	105618	ExpressionStatement	zend_emit_op_data ( & expr_node )	2661:3:76529:76558	105394	22	True				
ANR	105619	CallExpression	zend_emit_op_data ( & expr_node )		105394	0					
ANR	105620	Callee	zend_emit_op_data		105394	0					
ANR	105621	Identifier	zend_emit_op_data		105394	0					
ANR	105622	ArgumentList	& expr_node		105394	1					
ANR	105623	Argument	& expr_node		105394	0					
ANR	105624	UnaryOperationExpression	& expr_node		105394	0					
ANR	105625	UnaryOperator	&		105394	0					
ANR	105626	Identifier	expr_node		105394	1					
ANR	105627	ReturnStatement	return ;	2662:3:76563:76569	105394	23	True				
ANR	105628	Statement	EMPTY_SWITCH_DEFAULT_CASE	2663:2:76573:76597	105394	24	True				
ANR	105629	Statement	(	2663:27:76598:76598	105394	25	True				
ANR	105630	Statement	)	2663:28:76599:76599	105394	26	True				
ANR	105631	ReturnType	void		105394	1					
ANR	105632	Identifier	zend_compile_compound_assign		105394	2					
ANR	105633	ParameterList	"znode * result , zend_ast * ast"		105394	3					
ANR	105634	Parameter	znode * result	2622:34:75408:75420	105394	0	True				
ANR	105635	ParameterType	znode *		105394	0					
ANR	105636	Identifier	result		105394	1					
ANR	105637	Parameter	zend_ast * ast	2622:49:75423:75435	105394	1	True				
ANR	105638	ParameterType	zend_ast *		105394	0					
ANR	105639	Identifier	ast		105394	1					
ANR	105640	CFGEntryNode	ENTRY		105394		True				
ANR	105641	CFGExitNode	EXIT		105394		True				
ANR	105642	Symbol	zend_delayed_compile_end		105394						
ANR	105643	Symbol	ast		105394						
ANR	105644	Symbol	opcode		105394						
ANR	105645	Symbol	* var_ast		105394						
ANR	105646	Symbol	& expr_node		105394						
ANR	105647	Symbol	opline -> extended_value		105394						
ANR	105648	Symbol	result		105394						
ANR	105649	Symbol	* ast		105394						
ANR	105650	Symbol	opline		105394						
ANR	105651	Symbol	zend_delayed_compile_begin		105394						
ANR	105652	Symbol	var_ast -> kind		105394						
ANR	105653	Symbol	* * ast		105394						
ANR	105654	Symbol	BP_VAR_RW		105394						
ANR	105655	Symbol	ast -> attr		105394						
ANR	105656	Symbol	var_node		105394						
ANR	105657	Symbol	offset		105394						
ANR	105658	Symbol	& var_node		105394						
ANR	105659	Symbol	ZEND_ASSIGN_OBJ		105394						
ANR	105660	Symbol	expr_ast		105394						
ANR	105661	Symbol	expr_node		105394						
ANR	105662	Symbol	var_ast		105394						
ANR	105663	Symbol	* opline		105394						
ANR	105664	Symbol	ZEND_ASSIGN_DIM		105394						
ANR	105665	Symbol	opline -> opcode		105394						
ANR	105666	Symbol	zend_emit_op_data		105394						
ANR	105667	Symbol	* ast -> child		105394						
ANR	105668	Symbol	ast -> child		105394						
ANR	105669	Function	zend_compile_args	2668:0:76617:79680							
ANR	105670	FunctionDef	"zend_compile_args (zend_ast * ast , zend_function * fbc)"		105669	0					
ANR	105671	CompoundStatement		2669:0:76689:79680	105669	0					
ANR	105672	IdentifierDeclStatement	zend_ast_list * args = zend_ast_get_list ( ast ) ;	2671:1:76719:76763	105669	0	True				
ANR	105673	IdentifierDecl	* args = zend_ast_get_list ( ast )		105669	0					
ANR	105674	IdentifierDeclType	zend_ast_list *		105669	0					
ANR	105675	Identifier	args		105669	1					
ANR	105676	AssignmentExpression	* args = zend_ast_get_list ( ast )		105669	2		=			
ANR	105677	Identifier	args		105669	0					
ANR	105678	CallExpression	zend_ast_get_list ( ast )		105669	1					
ANR	105679	Callee	zend_ast_get_list		105669	0					
ANR	105680	Identifier	zend_ast_get_list		105669	0					
ANR	105681	ArgumentList	ast		105669	1					
ANR	105682	Argument	ast		105669	0					
ANR	105683	Identifier	ast		105669	0					
ANR	105684	IdentifierDeclStatement	uint32_t i ;	2672:1:76766:76776	105669	1	True				
ANR	105685	IdentifierDecl	i		105669	0					
ANR	105686	IdentifierDeclType	uint32_t		105669	0					
ANR	105687	Identifier	i		105669	1					
ANR	105688	IdentifierDeclStatement	zend_bool uses_arg_unpack = 0 ;	2673:1:76779:76808	105669	2	True				
ANR	105689	IdentifierDecl	uses_arg_unpack = 0		105669	0					
ANR	105690	IdentifierDeclType	zend_bool		105669	0					
ANR	105691	Identifier	uses_arg_unpack		105669	1					
ANR	105692	AssignmentExpression	uses_arg_unpack = 0		105669	2		=			
ANR	105693	Identifier	uses_arg_unpack		105669	0					
ANR	105694	PrimaryExpression	0		105669	1					
ANR	105695	IdentifierDeclStatement	uint32_t arg_count = 0 ;	2674:1:76811:76833	105669	3	True				
ANR	105696	IdentifierDecl	arg_count = 0		105669	0					
ANR	105697	IdentifierDeclType	uint32_t		105669	0					
ANR	105698	Identifier	arg_count		105669	1					
ANR	105699	AssignmentExpression	arg_count = 0		105669	2		=			
ANR	105700	Identifier	arg_count		105669	0					
ANR	105701	PrimaryExpression	0		105669	1					
ANR	105702	ForStatement	for ( i = 0 ; i < args -> children ; ++ i )		105669	4					
ANR	105703	ForInit	i = 0 ;	2676:6:76890:76895	105669	0	True				
ANR	105704	AssignmentExpression	i = 0		105669	0		=			
ANR	105705	Identifier	i		105669	0					
ANR	105706	PrimaryExpression	0		105669	1					
ANR	105707	Condition	i < args -> children	2676:13:76897:76914	105669	1	True				
ANR	105708	RelationalExpression	i < args -> children		105669	0		<			
ANR	105709	Identifier	i		105669	0					
ANR	105710	PtrMemberAccess	args -> children		105669	1					
ANR	105711	Identifier	args		105669	0					
ANR	105712	Identifier	children		105669	1					
ANR	105713	UnaryExpression	++ i	2676:33:76917:76919	105669	2	True				
ANR	105714	IncDec	++		105669	0					
ANR	105715	Identifier	i		105669	1					
ANR	105716	CompoundStatement		15:2:357:377	105669	3					
ANR	105717	IdentifierDeclStatement	zend_ast * arg = args -> child [ i ] ;	2677:2:76926:76956	105669	0	True				
ANR	105718	IdentifierDecl	* arg = args -> child [ i ]		105669	0					
ANR	105719	IdentifierDeclType	zend_ast *		105669	0					
ANR	105720	Identifier	arg		105669	1					
ANR	105721	AssignmentExpression	* arg = args -> child [ i ]		105669	2		=			
ANR	105722	Identifier	arg		105669	0					
ANR	105723	ArrayIndexing	args -> child [ i ]		105669	1					
ANR	105724	PtrMemberAccess	args -> child		105669	0					
ANR	105725	Identifier	args		105669	0					
ANR	105726	Identifier	child		105669	1					
ANR	105727	Identifier	i		105669	1					
ANR	105728	IdentifierDeclStatement	uint32_t arg_num = i + 1 ;	2678:2:76960:76984	105669	1	True				
ANR	105729	IdentifierDecl	arg_num = i + 1		105669	0					
ANR	105730	IdentifierDeclType	uint32_t		105669	0					
ANR	105731	Identifier	arg_num		105669	1					
ANR	105732	AssignmentExpression	arg_num = i + 1		105669	2		=			
ANR	105733	Identifier	arg_num		105669	0					
ANR	105734	AdditiveExpression	i + 1		105669	1		+			
ANR	105735	Identifier	i		105669	0					
ANR	105736	PrimaryExpression	1		105669	1					
ANR	105737	IdentifierDeclStatement	znode arg_node ;	2680:2:76989:77003	105669	2	True				
ANR	105738	IdentifierDecl	arg_node		105669	0					
ANR	105739	IdentifierDeclType	znode		105669	0					
ANR	105740	Identifier	arg_node		105669	1					
ANR	105741	IdentifierDeclStatement	zend_op * opline ;	2681:2:77007:77022	105669	3	True				
ANR	105742	IdentifierDecl	* opline		105669	0					
ANR	105743	IdentifierDeclType	zend_op *		105669	0					
ANR	105744	Identifier	opline		105669	1					
ANR	105745	IdentifierDeclStatement	zend_uchar opcode ;	2682:2:77026:77043	105669	4	True				
ANR	105746	IdentifierDecl	opcode		105669	0					
ANR	105747	IdentifierDeclType	zend_uchar		105669	0					
ANR	105748	Identifier	opcode		105669	1					
ANR	105749	IdentifierDeclStatement	zend_ulong flags = 0 ;	2683:2:77047:77067	105669	5	True				
ANR	105750	IdentifierDecl	flags = 0		105669	0					
ANR	105751	IdentifierDeclType	zend_ulong		105669	0					
ANR	105752	Identifier	flags		105669	1					
ANR	105753	AssignmentExpression	flags = 0		105669	2		=			
ANR	105754	Identifier	flags		105669	0					
ANR	105755	PrimaryExpression	0		105669	1					
ANR	105756	IfStatement	if ( arg -> kind == ZEND_AST_UNPACK )		105669	6					
ANR	105757	Condition	arg -> kind == ZEND_AST_UNPACK	2685:6:77076:77103	105669	0	True				
ANR	105758	EqualityExpression	arg -> kind == ZEND_AST_UNPACK		105669	0		==			
ANR	105759	PtrMemberAccess	arg -> kind		105669	0					
ANR	105760	Identifier	arg		105669	0					
ANR	105761	Identifier	kind		105669	1					
ANR	105762	Identifier	ZEND_AST_UNPACK		105669	1					
ANR	105763	CompoundStatement		17:36:416:416	105669	1					
ANR	105764	ExpressionStatement	uses_arg_unpack = 1	2686:3:77111:77130	105669	0	True				
ANR	105765	AssignmentExpression	uses_arg_unpack = 1		105669	0		=			
ANR	105766	Identifier	uses_arg_unpack		105669	0					
ANR	105767	PrimaryExpression	1		105669	1					
ANR	105768	ExpressionStatement	fbc = NULL	2687:3:77135:77145	105669	1	True				
ANR	105769	AssignmentExpression	fbc = NULL		105669	0		=			
ANR	105770	Identifier	fbc		105669	0					
ANR	105771	Identifier	NULL		105669	1					
ANR	105772	ExpressionStatement	"zend_compile_expr ( & arg_node , arg -> child [ 0 ] )"	2689:3:77151:77194	105669	2	True				
ANR	105773	CallExpression	"zend_compile_expr ( & arg_node , arg -> child [ 0 ] )"		105669	0					
ANR	105774	Callee	zend_compile_expr		105669	0					
ANR	105775	Identifier	zend_compile_expr		105669	0					
ANR	105776	ArgumentList	& arg_node		105669	1					
ANR	105777	Argument	& arg_node		105669	0					
ANR	105778	UnaryOperationExpression	& arg_node		105669	0					
ANR	105779	UnaryOperator	&		105669	0					
ANR	105780	Identifier	arg_node		105669	1					
ANR	105781	Argument	arg -> child [ 0 ]		105669	1					
ANR	105782	ArrayIndexing	arg -> child [ 0 ]		105669	0					
ANR	105783	PtrMemberAccess	arg -> child		105669	0					
ANR	105784	Identifier	arg		105669	0					
ANR	105785	Identifier	child		105669	1					
ANR	105786	PrimaryExpression	0		105669	1					
ANR	105787	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_SEND_UNPACK , & arg_node , NULL )"	2690:3:77199:77261	105669	3	True				
ANR	105788	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_SEND_UNPACK , & arg_node , NULL )"		105669	0		=			
ANR	105789	Identifier	opline		105669	0					
ANR	105790	CallExpression	"zend_emit_op ( NULL , ZEND_SEND_UNPACK , & arg_node , NULL )"		105669	1					
ANR	105791	Callee	zend_emit_op		105669	0					
ANR	105792	Identifier	zend_emit_op		105669	0					
ANR	105793	ArgumentList	NULL		105669	1					
ANR	105794	Argument	NULL		105669	0					
ANR	105795	Identifier	NULL		105669	0					
ANR	105796	Argument	ZEND_SEND_UNPACK		105669	1					
ANR	105797	Identifier	ZEND_SEND_UNPACK		105669	0					
ANR	105798	Argument	& arg_node		105669	2					
ANR	105799	UnaryOperationExpression	& arg_node		105669	0					
ANR	105800	UnaryOperator	&		105669	0					
ANR	105801	Identifier	arg_node		105669	1					
ANR	105802	Argument	NULL		105669	3					
ANR	105803	Identifier	NULL		105669	0					
ANR	105804	ExpressionStatement	opline -> op2 . num = arg_count	2691:3:77266:77293	105669	4	True				
ANR	105805	AssignmentExpression	opline -> op2 . num = arg_count		105669	0		=			
ANR	105806	MemberAccess	opline -> op2 . num		105669	0					
ANR	105807	PtrMemberAccess	opline -> op2		105669	0					
ANR	105808	Identifier	opline		105669	0					
ANR	105809	Identifier	op2		105669	1					
ANR	105810	Identifier	num		105669	1					
ANR	105811	Identifier	arg_count		105669	1					
ANR	105812	ExpressionStatement	"opline -> result . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_ARG ( NULL , arg_count )"	2692:3:77298:77374	105669	5	True				
ANR	105813	AssignmentExpression	"opline -> result . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_ARG ( NULL , arg_count )"		105669	0		=			
ANR	105814	MemberAccess	opline -> result . var		105669	0					
ANR	105815	PtrMemberAccess	opline -> result		105669	0					
ANR	105816	Identifier	opline		105669	0					
ANR	105817	Identifier	result		105669	1					
ANR	105818	Identifier	var		105669	1					
ANR	105819	CastExpression	"( uint32_t ) ( zend_intptr_t ) ZEND_CALL_ARG ( NULL , arg_count )"		105669	1					
ANR	105820	CastTarget	uint32_t		105669	0					
ANR	105821	CastExpression	"( zend_intptr_t ) ZEND_CALL_ARG ( NULL , arg_count )"		105669	1					
ANR	105822	CastTarget	zend_intptr_t		105669	0					
ANR	105823	CallExpression	"ZEND_CALL_ARG ( NULL , arg_count )"		105669	1					
ANR	105824	Callee	ZEND_CALL_ARG		105669	0					
ANR	105825	Identifier	ZEND_CALL_ARG		105669	0					
ANR	105826	ArgumentList	NULL		105669	1					
ANR	105827	Argument	NULL		105669	0					
ANR	105828	Identifier	NULL		105669	0					
ANR	105829	Argument	arg_count		105669	1					
ANR	105830	Identifier	arg_count		105669	0					
ANR	105831	ContinueStatement	continue ;	2693:3:77379:77387	105669	6	True				
ANR	105832	IfStatement	if ( uses_arg_unpack )		105669	7					
ANR	105833	Condition	uses_arg_unpack	2696:6:77400:77414	105669	0	True				
ANR	105834	Identifier	uses_arg_unpack		105669	0					
ANR	105835	CompoundStatement		28:23:727:727	105669	1					
ANR	105836	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use positional argument after argument unpacking"" )"	2697:3:77422:77521	105669	0	True				
ANR	105837	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use positional argument after argument unpacking"" )"		105669	0					
ANR	105838	Callee	zend_error_noreturn		105669	0					
ANR	105839	Identifier	zend_error_noreturn		105669	0					
ANR	105840	ArgumentList	E_COMPILE_ERROR		105669	1					
ANR	105841	Argument	E_COMPILE_ERROR		105669	0					
ANR	105842	Identifier	E_COMPILE_ERROR		105669	0					
ANR	105843	Argument	"""Cannot use positional argument after argument unpacking"""		105669	1					
ANR	105844	PrimaryExpression	"""Cannot use positional argument after argument unpacking"""		105669	0					
ANR	105845	ExpressionStatement	arg_count ++	2701:2:77530:77541	105669	8	True				
ANR	105846	PostIncDecOperationExpression	arg_count ++		105669	0					
ANR	105847	Identifier	arg_count		105669	0					
ANR	105848	IncDec	++		105669	1					
ANR	105849	IfStatement	if ( zend_is_variable ( arg ) )		105669	9					
ANR	105850	Condition	zend_is_variable ( arg )	2702:6:77549:77569	105669	0	True				
ANR	105851	CallExpression	zend_is_variable ( arg )		105669	0					
ANR	105852	Callee	zend_is_variable		105669	0					
ANR	105853	Identifier	zend_is_variable		105669	0					
ANR	105854	ArgumentList	arg		105669	1					
ANR	105855	Argument	arg		105669	0					
ANR	105856	Identifier	arg		105669	0					
ANR	105857	CompoundStatement		34:29:882:882	105669	1					
ANR	105858	IfStatement	if ( zend_is_call ( arg ) )		105669	0					
ANR	105859	Condition	zend_is_call ( arg )	2703:7:77581:77597	105669	0	True				
ANR	105860	CallExpression	zend_is_call ( arg )		105669	0					
ANR	105861	Callee	zend_is_call		105669	0					
ANR	105862	Identifier	zend_is_call		105669	0					
ANR	105863	ArgumentList	arg		105669	1					
ANR	105864	Argument	arg		105669	0					
ANR	105865	Identifier	arg		105669	0					
ANR	105866	CompoundStatement		35:26:910:910	105669	1					
ANR	105867	ExpressionStatement	"zend_compile_var ( & arg_node , arg , BP_VAR_R )"	2704:4:77606:77648	105669	0	True				
ANR	105868	CallExpression	"zend_compile_var ( & arg_node , arg , BP_VAR_R )"		105669	0					
ANR	105869	Callee	zend_compile_var		105669	0					
ANR	105870	Identifier	zend_compile_var		105669	0					
ANR	105871	ArgumentList	& arg_node		105669	1					
ANR	105872	Argument	& arg_node		105669	0					
ANR	105873	UnaryOperationExpression	& arg_node		105669	0					
ANR	105874	UnaryOperator	&		105669	0					
ANR	105875	Identifier	arg_node		105669	1					
ANR	105876	Argument	arg		105669	1					
ANR	105877	Identifier	arg		105669	0					
ANR	105878	Argument	BP_VAR_R		105669	2					
ANR	105879	Identifier	BP_VAR_R		105669	0					
ANR	105880	IfStatement	if ( arg_node . op_type & ( IS_CONST | IS_TMP_VAR ) )		105669	1					
ANR	105881	Condition	arg_node . op_type & ( IS_CONST | IS_TMP_VAR )	2705:8:77658:77697	105669	0	True				
ANR	105882	BitAndExpression	arg_node . op_type & ( IS_CONST | IS_TMP_VAR )		105669	0		&			
ANR	105883	MemberAccess	arg_node . op_type		105669	0					
ANR	105884	Identifier	arg_node		105669	0					
ANR	105885	Identifier	op_type		105669	1					
ANR	105886	InclusiveOrExpression	IS_CONST | IS_TMP_VAR		105669	1		|			
ANR	105887	Identifier	IS_CONST		105669	0					
ANR	105888	Identifier	IS_TMP_VAR		105669	1					
ANR	105889	CompoundStatement		37:50:1010:1010	105669	1					
ANR	105890	ExpressionStatement	opcode = ZEND_SEND_VAL	2707:5:77771:77793	105669	0	True				
ANR	105891	AssignmentExpression	opcode = ZEND_SEND_VAL		105669	0		=			
ANR	105892	Identifier	opcode		105669	0					
ANR	105893	Identifier	ZEND_SEND_VAL		105669	1					
ANR	105894	ElseStatement	else		105669	0					
ANR	105895	CompoundStatement		40:11:1116:1116	105669	0					
ANR	105896	ExpressionStatement	opcode = ZEND_SEND_VAR_NO_REF	2709:5:77813:77842	105669	0	True				
ANR	105897	AssignmentExpression	opcode = ZEND_SEND_VAR_NO_REF		105669	0		=			
ANR	105898	Identifier	opcode		105669	0					
ANR	105899	Identifier	ZEND_SEND_VAR_NO_REF		105669	1					
ANR	105900	ExpressionStatement	flags |= ZEND_ARG_SEND_FUNCTION	2710:5:77849:77880	105669	1	True				
ANR	105901	AssignmentExpression	flags |= ZEND_ARG_SEND_FUNCTION		105669	0		|=			
ANR	105902	Identifier	flags		105669	0					
ANR	105903	Identifier	ZEND_ARG_SEND_FUNCTION		105669	1					
ANR	105904	IfStatement	"if ( fbc && ARG_SHOULD_BE_SENT_BY_REF ( fbc , arg_num ) )"		105669	2					
ANR	105905	Condition	"fbc && ARG_SHOULD_BE_SENT_BY_REF ( fbc , arg_num )"	2711:9:77891:77936	105669	0	True				
ANR	105906	AndExpression	"fbc && ARG_SHOULD_BE_SENT_BY_REF ( fbc , arg_num )"		105669	0		&&			
ANR	105907	Identifier	fbc		105669	0					
ANR	105908	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fbc , arg_num )"		105669	1					
ANR	105909	Callee	ARG_SHOULD_BE_SENT_BY_REF		105669	0					
ANR	105910	Identifier	ARG_SHOULD_BE_SENT_BY_REF		105669	0					
ANR	105911	ArgumentList	fbc		105669	1					
ANR	105912	Argument	fbc		105669	0					
ANR	105913	Identifier	fbc		105669	0					
ANR	105914	Argument	arg_num		105669	1					
ANR	105915	Identifier	arg_num		105669	0					
ANR	105916	CompoundStatement		43:57:1249:1249	105669	1					
ANR	105917	ExpressionStatement	flags |= ZEND_ARG_SEND_BY_REF	2712:6:77947:77976	105669	0	True				
ANR	105918	AssignmentExpression	flags |= ZEND_ARG_SEND_BY_REF		105669	0		|=			
ANR	105919	Identifier	flags		105669	0					
ANR	105920	Identifier	ZEND_ARG_SEND_BY_REF		105669	1					
ANR	105921	IfStatement	"if ( ARG_MAY_BE_SENT_BY_REF ( fbc , arg_num ) )"		105669	1					
ANR	105922	Condition	"ARG_MAY_BE_SENT_BY_REF ( fbc , arg_num )"	2713:10:77988:78023	105669	0	True				
ANR	105923	CallExpression	"ARG_MAY_BE_SENT_BY_REF ( fbc , arg_num )"		105669	0					
ANR	105924	Callee	ARG_MAY_BE_SENT_BY_REF		105669	0					
ANR	105925	Identifier	ARG_MAY_BE_SENT_BY_REF		105669	0					
ANR	105926	ArgumentList	fbc		105669	1					
ANR	105927	Argument	fbc		105669	0					
ANR	105928	Identifier	fbc		105669	0					
ANR	105929	Argument	arg_num		105669	1					
ANR	105930	Identifier	arg_num		105669	0					
ANR	105931	CompoundStatement		45:48:1336:1336	105669	1					
ANR	105932	ExpressionStatement	flags |= ZEND_ARG_SEND_SILENT	2714:7:78035:78064	105669	0	True				
ANR	105933	AssignmentExpression	flags |= ZEND_ARG_SEND_SILENT		105669	0		|=			
ANR	105934	Identifier	flags		105669	0					
ANR	105935	Identifier	ZEND_ARG_SEND_SILENT		105669	1					
ANR	105936	ElseStatement	else		105669	0					
ANR	105937	IfStatement	if ( fbc )		105669	0					
ANR	105938	Condition	fbc	2718:14:78101:78103	105669	0	True				
ANR	105939	Identifier	fbc		105669	0					
ANR	105940	CompoundStatement		50:19:1416:1416	105669	1					
ANR	105941	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fbc , arg_num ) )"		105669	0					
ANR	105942	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fbc , arg_num )"	2719:8:78116:78154	105669	0	True				
ANR	105943	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fbc , arg_num )"		105669	0					
ANR	105944	Callee	ARG_SHOULD_BE_SENT_BY_REF		105669	0					
ANR	105945	Identifier	ARG_SHOULD_BE_SENT_BY_REF		105669	0					
ANR	105946	ArgumentList	fbc		105669	1					
ANR	105947	Argument	fbc		105669	0					
ANR	105948	Identifier	fbc		105669	0					
ANR	105949	Argument	arg_num		105669	1					
ANR	105950	Identifier	arg_num		105669	0					
ANR	105951	CompoundStatement		51:49:1467:1467	105669	1					
ANR	105952	ExpressionStatement	"zend_compile_var ( & arg_node , arg , BP_VAR_W )"	2720:5:78164:78206	105669	0	True				
ANR	105953	CallExpression	"zend_compile_var ( & arg_node , arg , BP_VAR_W )"		105669	0					
ANR	105954	Callee	zend_compile_var		105669	0					
ANR	105955	Identifier	zend_compile_var		105669	0					
ANR	105956	ArgumentList	& arg_node		105669	1					
ANR	105957	Argument	& arg_node		105669	0					
ANR	105958	UnaryOperationExpression	& arg_node		105669	0					
ANR	105959	UnaryOperator	&		105669	0					
ANR	105960	Identifier	arg_node		105669	1					
ANR	105961	Argument	arg		105669	1					
ANR	105962	Identifier	arg		105669	0					
ANR	105963	Argument	BP_VAR_W		105669	2					
ANR	105964	Identifier	BP_VAR_W		105669	0					
ANR	105965	ExpressionStatement	opcode = ZEND_SEND_REF	2721:5:78213:78235	105669	1	True				
ANR	105966	AssignmentExpression	opcode = ZEND_SEND_REF		105669	0		=			
ANR	105967	Identifier	opcode		105669	0					
ANR	105968	Identifier	ZEND_SEND_REF		105669	1					
ANR	105969	ElseStatement	else		105669	0					
ANR	105970	CompoundStatement		54:11:1558:1558	105669	0					
ANR	105971	ExpressionStatement	"zend_compile_var ( & arg_node , arg , BP_VAR_R )"	2723:5:78255:78297	105669	0	True				
ANR	105972	CallExpression	"zend_compile_var ( & arg_node , arg , BP_VAR_R )"		105669	0					
ANR	105973	Callee	zend_compile_var		105669	0					
ANR	105974	Identifier	zend_compile_var		105669	0					
ANR	105975	ArgumentList	& arg_node		105669	1					
ANR	105976	Argument	& arg_node		105669	0					
ANR	105977	UnaryOperationExpression	& arg_node		105669	0					
ANR	105978	UnaryOperator	&		105669	0					
ANR	105979	Identifier	arg_node		105669	1					
ANR	105980	Argument	arg		105669	1					
ANR	105981	Identifier	arg		105669	0					
ANR	105982	Argument	BP_VAR_R		105669	2					
ANR	105983	Identifier	BP_VAR_R		105669	0					
ANR	105984	ExpressionStatement	opcode = ZEND_SEND_VAR	2724:5:78304:78326	105669	1	True				
ANR	105985	AssignmentExpression	opcode = ZEND_SEND_VAR		105669	0		=			
ANR	105986	Identifier	opcode		105669	0					
ANR	105987	Identifier	ZEND_SEND_VAR		105669	1					
ANR	105988	ElseStatement	else		105669	0					
ANR	105989	CompoundStatement		58:10:1654:1654	105669	0					
ANR	105990	ExpressionStatement	"zend_compile_var ( & arg_node , arg , BP_VAR_FUNC_ARG | ( arg_num << BP_VAR_SHIFT ) )"	2727:4:78350:78432	105669	0	True				
ANR	105991	CallExpression	"zend_compile_var ( & arg_node , arg , BP_VAR_FUNC_ARG | ( arg_num << BP_VAR_SHIFT ) )"		105669	0					
ANR	105992	Callee	zend_compile_var		105669	0					
ANR	105993	Identifier	zend_compile_var		105669	0					
ANR	105994	ArgumentList	& arg_node		105669	1					
ANR	105995	Argument	& arg_node		105669	0					
ANR	105996	UnaryOperationExpression	& arg_node		105669	0					
ANR	105997	UnaryOperator	&		105669	0					
ANR	105998	Identifier	arg_node		105669	1					
ANR	105999	Argument	arg		105669	1					
ANR	106000	Identifier	arg		105669	0					
ANR	106001	Argument	BP_VAR_FUNC_ARG | ( arg_num << BP_VAR_SHIFT )		105669	2					
ANR	106002	InclusiveOrExpression	BP_VAR_FUNC_ARG | ( arg_num << BP_VAR_SHIFT )		105669	0		|			
ANR	106003	Identifier	BP_VAR_FUNC_ARG		105669	0					
ANR	106004	ShiftExpression	arg_num << BP_VAR_SHIFT		105669	1		<<			
ANR	106005	Identifier	arg_num		105669	0					
ANR	106006	Identifier	BP_VAR_SHIFT		105669	1					
ANR	106007	ExpressionStatement	opcode = ZEND_SEND_VAR_EX	2729:4:78438:78463	105669	1	True				
ANR	106008	AssignmentExpression	opcode = ZEND_SEND_VAR_EX		105669	0		=			
ANR	106009	Identifier	opcode		105669	0					
ANR	106010	Identifier	ZEND_SEND_VAR_EX		105669	1					
ANR	106011	ElseStatement	else		105669	0					
ANR	106012	CompoundStatement		63:9:1789:1789	105669	0					
ANR	106013	ExpressionStatement	"zend_compile_expr ( & arg_node , arg )"	2732:3:78484:78517	105669	0	True				
ANR	106014	CallExpression	"zend_compile_expr ( & arg_node , arg )"		105669	0					
ANR	106015	Callee	zend_compile_expr		105669	0					
ANR	106016	Identifier	zend_compile_expr		105669	0					
ANR	106017	ArgumentList	& arg_node		105669	1					
ANR	106018	Argument	& arg_node		105669	0					
ANR	106019	UnaryOperationExpression	& arg_node		105669	0					
ANR	106020	UnaryOperator	&		105669	0					
ANR	106021	Identifier	arg_node		105669	1					
ANR	106022	Argument	arg		105669	1					
ANR	106023	Identifier	arg		105669	0					
ANR	106024	ExpressionStatement	ZEND_ASSERT ( arg_node . op_type != IS_CV )	2733:3:78522:78560	105669	1	True				
ANR	106025	CallExpression	ZEND_ASSERT ( arg_node . op_type != IS_CV )		105669	0					
ANR	106026	Callee	ZEND_ASSERT		105669	0					
ANR	106027	Identifier	ZEND_ASSERT		105669	0					
ANR	106028	ArgumentList	arg_node . op_type != IS_CV		105669	1					
ANR	106029	Argument	arg_node . op_type != IS_CV		105669	0					
ANR	106030	EqualityExpression	arg_node . op_type != IS_CV		105669	0		!=			
ANR	106031	MemberAccess	arg_node . op_type		105669	0					
ANR	106032	Identifier	arg_node		105669	0					
ANR	106033	Identifier	op_type		105669	1					
ANR	106034	Identifier	IS_CV		105669	1					
ANR	106035	IfStatement	if ( arg_node . op_type == IS_VAR )		105669	2					
ANR	106036	Condition	arg_node . op_type == IS_VAR	2734:7:78569:78594	105669	0	True				
ANR	106037	EqualityExpression	arg_node . op_type == IS_VAR		105669	0		==			
ANR	106038	MemberAccess	arg_node . op_type		105669	0					
ANR	106039	Identifier	arg_node		105669	0					
ANR	106040	Identifier	op_type		105669	1					
ANR	106041	Identifier	IS_VAR		105669	1					
ANR	106042	CompoundStatement		66:35:1907:1907	105669	1					
ANR	106043	ExpressionStatement	opcode = ZEND_SEND_VAR_NO_REF	2735:4:78603:78632	105669	0	True				
ANR	106044	AssignmentExpression	opcode = ZEND_SEND_VAR_NO_REF		105669	0		=			
ANR	106045	Identifier	opcode		105669	0					
ANR	106046	Identifier	ZEND_SEND_VAR_NO_REF		105669	1					
ANR	106047	IfStatement	"if ( fbc && ARG_MUST_BE_SENT_BY_REF ( fbc , arg_num ) )"		105669	1					
ANR	106048	Condition	"fbc && ARG_MUST_BE_SENT_BY_REF ( fbc , arg_num )"	2736:8:78642:78685	105669	0	True				
ANR	106049	AndExpression	"fbc && ARG_MUST_BE_SENT_BY_REF ( fbc , arg_num )"		105669	0		&&			
ANR	106050	Identifier	fbc		105669	0					
ANR	106051	CallExpression	"ARG_MUST_BE_SENT_BY_REF ( fbc , arg_num )"		105669	1					
ANR	106052	Callee	ARG_MUST_BE_SENT_BY_REF		105669	0					
ANR	106053	Identifier	ARG_MUST_BE_SENT_BY_REF		105669	0					
ANR	106054	ArgumentList	fbc		105669	1					
ANR	106055	Argument	fbc		105669	0					
ANR	106056	Identifier	fbc		105669	0					
ANR	106057	Argument	arg_num		105669	1					
ANR	106058	Identifier	arg_num		105669	0					
ANR	106059	CompoundStatement		68:54:1998:1998	105669	1					
ANR	106060	ExpressionStatement	flags |= ZEND_ARG_SEND_BY_REF	2737:5:78695:78724	105669	0	True				
ANR	106061	AssignmentExpression	flags |= ZEND_ARG_SEND_BY_REF		105669	0		|=			
ANR	106062	Identifier	flags		105669	0					
ANR	106063	Identifier	ZEND_ARG_SEND_BY_REF		105669	1					
ANR	106064	ElseStatement	else		105669	0					
ANR	106065	CompoundStatement		71:10:2052:2052	105669	0					
ANR	106066	IfStatement	if ( fbc )		105669	0					
ANR	106067	Condition	fbc	2740:8:78752:78754	105669	0	True				
ANR	106068	Identifier	fbc		105669	0					
ANR	106069	CompoundStatement		72:13:2067:2067	105669	1					
ANR	106070	ExpressionStatement	opcode = ZEND_SEND_VAL	2741:5:78764:78786	105669	0	True				
ANR	106071	AssignmentExpression	opcode = ZEND_SEND_VAL		105669	0		=			
ANR	106072	Identifier	opcode		105669	0					
ANR	106073	Identifier	ZEND_SEND_VAL		105669	1					
ANR	106074	IfStatement	"if ( ARG_MUST_BE_SENT_BY_REF ( fbc , arg_num ) )"		105669	1					
ANR	106075	Condition	"ARG_MUST_BE_SENT_BY_REF ( fbc , arg_num )"	2742:9:78797:78833	105669	0	True				
ANR	106076	CallExpression	"ARG_MUST_BE_SENT_BY_REF ( fbc , arg_num )"		105669	0					
ANR	106077	Callee	ARG_MUST_BE_SENT_BY_REF		105669	0					
ANR	106078	Identifier	ARG_MUST_BE_SENT_BY_REF		105669	0					
ANR	106079	ArgumentList	fbc		105669	1					
ANR	106080	Argument	fbc		105669	0					
ANR	106081	Identifier	fbc		105669	0					
ANR	106082	Argument	arg_num		105669	1					
ANR	106083	Identifier	arg_num		105669	0					
ANR	106084	CompoundStatement		74:48:2146:2146	105669	1					
ANR	106085	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Only variables can be passed by reference"" )"	2743:6:78844:78925	105669	0	True				
ANR	106086	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Only variables can be passed by reference"" )"		105669	0					
ANR	106087	Callee	zend_error_noreturn		105669	0					
ANR	106088	Identifier	zend_error_noreturn		105669	0					
ANR	106089	ArgumentList	E_COMPILE_ERROR		105669	1					
ANR	106090	Argument	E_COMPILE_ERROR		105669	0					
ANR	106091	Identifier	E_COMPILE_ERROR		105669	0					
ANR	106092	Argument	"""Only variables can be passed by reference"""		105669	1					
ANR	106093	PrimaryExpression	"""Only variables can be passed by reference"""		105669	0					
ANR	106094	ElseStatement	else		105669	0					
ANR	106095	CompoundStatement		77:11:2255:2255	105669	0					
ANR	106096	ExpressionStatement	opcode = ZEND_SEND_VAL_EX	2746:5:78952:78977	105669	0	True				
ANR	106097	AssignmentExpression	opcode = ZEND_SEND_VAL_EX		105669	0		=			
ANR	106098	Identifier	opcode		105669	0					
ANR	106099	Identifier	ZEND_SEND_VAL_EX		105669	1					
ANR	106100	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	2751:2:78997:79038	105669	10	True				
ANR	106101	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		105669	0		=			
ANR	106102	Identifier	opline		105669	0					
ANR	106103	CallExpression	get_next_op ( CG ( active_op_array ) )		105669	1					
ANR	106104	Callee	get_next_op		105669	0					
ANR	106105	Identifier	get_next_op		105669	0					
ANR	106106	ArgumentList	CG ( active_op_array )		105669	1					
ANR	106107	Argument	CG ( active_op_array )		105669	0					
ANR	106108	CallExpression	CG ( active_op_array )		105669	0					
ANR	106109	Callee	CG		105669	0					
ANR	106110	Identifier	CG		105669	0					
ANR	106111	ArgumentList	active_op_array		105669	1					
ANR	106112	Argument	active_op_array		105669	0					
ANR	106113	Identifier	active_op_array		105669	0					
ANR	106114	ExpressionStatement	opline -> opcode = opcode	2752:2:79042:79065	105669	11	True				
ANR	106115	AssignmentExpression	opline -> opcode = opcode		105669	0		=			
ANR	106116	PtrMemberAccess	opline -> opcode		105669	0					
ANR	106117	Identifier	opline		105669	0					
ANR	106118	Identifier	opcode		105669	1					
ANR	106119	Identifier	opcode		105669	1					
ANR	106120	ExpressionStatement	"SET_NODE ( opline -> op1 , & arg_node )"	2753:2:79069:79101	105669	12	True				
ANR	106121	CallExpression	"SET_NODE ( opline -> op1 , & arg_node )"		105669	0					
ANR	106122	Callee	SET_NODE		105669	0					
ANR	106123	Identifier	SET_NODE		105669	0					
ANR	106124	ArgumentList	opline -> op1		105669	1					
ANR	106125	Argument	opline -> op1		105669	0					
ANR	106126	PtrMemberAccess	opline -> op1		105669	0					
ANR	106127	Identifier	opline		105669	0					
ANR	106128	Identifier	op1		105669	1					
ANR	106129	Argument	& arg_node		105669	1					
ANR	106130	UnaryOperationExpression	& arg_node		105669	0					
ANR	106131	UnaryOperator	&		105669	0					
ANR	106132	Identifier	arg_node		105669	1					
ANR	106133	ExpressionStatement	SET_UNUSED ( opline -> op2 )	2754:2:79105:79128	105669	13	True				
ANR	106134	CallExpression	SET_UNUSED ( opline -> op2 )		105669	0					
ANR	106135	Callee	SET_UNUSED		105669	0					
ANR	106136	Identifier	SET_UNUSED		105669	0					
ANR	106137	ArgumentList	opline -> op2		105669	1					
ANR	106138	Argument	opline -> op2		105669	0					
ANR	106139	PtrMemberAccess	opline -> op2		105669	0					
ANR	106140	Identifier	opline		105669	0					
ANR	106141	Identifier	op2		105669	1					
ANR	106142	ExpressionStatement	opline -> op2 . opline_num = arg_num	2755:2:79132:79164	105669	14	True				
ANR	106143	AssignmentExpression	opline -> op2 . opline_num = arg_num		105669	0		=			
ANR	106144	MemberAccess	opline -> op2 . opline_num		105669	0					
ANR	106145	PtrMemberAccess	opline -> op2		105669	0					
ANR	106146	Identifier	opline		105669	0					
ANR	106147	Identifier	op2		105669	1					
ANR	106148	Identifier	opline_num		105669	1					
ANR	106149	Identifier	arg_num		105669	1					
ANR	106150	ExpressionStatement	"opline -> result . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_ARG ( NULL , arg_num )"	2756:2:79168:79242	105669	15	True				
ANR	106151	AssignmentExpression	"opline -> result . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_ARG ( NULL , arg_num )"		105669	0		=			
ANR	106152	MemberAccess	opline -> result . var		105669	0					
ANR	106153	PtrMemberAccess	opline -> result		105669	0					
ANR	106154	Identifier	opline		105669	0					
ANR	106155	Identifier	result		105669	1					
ANR	106156	Identifier	var		105669	1					
ANR	106157	CastExpression	"( uint32_t ) ( zend_intptr_t ) ZEND_CALL_ARG ( NULL , arg_num )"		105669	1					
ANR	106158	CastTarget	uint32_t		105669	0					
ANR	106159	CastExpression	"( zend_intptr_t ) ZEND_CALL_ARG ( NULL , arg_num )"		105669	1					
ANR	106160	CastTarget	zend_intptr_t		105669	0					
ANR	106161	CallExpression	"ZEND_CALL_ARG ( NULL , arg_num )"		105669	1					
ANR	106162	Callee	ZEND_CALL_ARG		105669	0					
ANR	106163	Identifier	ZEND_CALL_ARG		105669	0					
ANR	106164	ArgumentList	NULL		105669	1					
ANR	106165	Argument	NULL		105669	0					
ANR	106166	Identifier	NULL		105669	0					
ANR	106167	Argument	arg_num		105669	1					
ANR	106168	Identifier	arg_num		105669	0					
ANR	106169	IfStatement	if ( opcode == ZEND_SEND_VAR_NO_REF )		105669	16					
ANR	106170	Condition	opcode == ZEND_SEND_VAR_NO_REF	2758:6:79251:79280	105669	0	True				
ANR	106171	EqualityExpression	opcode == ZEND_SEND_VAR_NO_REF		105669	0		==			
ANR	106172	Identifier	opcode		105669	0					
ANR	106173	Identifier	ZEND_SEND_VAR_NO_REF		105669	1					
ANR	106174	CompoundStatement		90:38:2593:2593	105669	1					
ANR	106175	IfStatement	if ( fbc )		105669	0					
ANR	106176	Condition	fbc	2759:7:79292:79294	105669	0	True				
ANR	106177	Identifier	fbc		105669	0					
ANR	106178	CompoundStatement		91:12:2607:2607	105669	1					
ANR	106179	ExpressionStatement	flags |= ZEND_ARG_COMPILE_TIME_BOUND	2760:4:79303:79339	105669	0	True				
ANR	106180	AssignmentExpression	flags |= ZEND_ARG_COMPILE_TIME_BOUND		105669	0		|=			
ANR	106181	Identifier	flags		105669	0					
ANR	106182	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		105669	1					
ANR	106183	IfStatement	if ( ( flags & ZEND_ARG_COMPILE_TIME_BOUND ) && ! ( flags & ZEND_ARG_SEND_BY_REF ) )		105669	1					
ANR	106184	Condition	( flags & ZEND_ARG_COMPILE_TIME_BOUND ) && ! ( flags & ZEND_ARG_SEND_BY_REF )	2762:7:79353:79424	105669	0	True				
ANR	106185	AndExpression	( flags & ZEND_ARG_COMPILE_TIME_BOUND ) && ! ( flags & ZEND_ARG_SEND_BY_REF )		105669	0		&&			
ANR	106186	BitAndExpression	flags & ZEND_ARG_COMPILE_TIME_BOUND		105669	0		&			
ANR	106187	Identifier	flags		105669	0					
ANR	106188	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		105669	1					
ANR	106189	UnaryOperationExpression	! ( flags & ZEND_ARG_SEND_BY_REF )		105669	1					
ANR	106190	UnaryOperator	!		105669	0					
ANR	106191	BitAndExpression	flags & ZEND_ARG_SEND_BY_REF		105669	1		&			
ANR	106192	Identifier	flags		105669	0					
ANR	106193	Identifier	ZEND_ARG_SEND_BY_REF		105669	1					
ANR	106194	CompoundStatement		94:81:2737:2737	105669	1					
ANR	106195	ExpressionStatement	opline -> opcode = ZEND_SEND_VAR	2763:4:79433:79463	105669	0	True				
ANR	106196	AssignmentExpression	opline -> opcode = ZEND_SEND_VAR		105669	0		=			
ANR	106197	PtrMemberAccess	opline -> opcode		105669	0					
ANR	106198	Identifier	opline		105669	0					
ANR	106199	Identifier	opcode		105669	1					
ANR	106200	Identifier	ZEND_SEND_VAR		105669	1					
ANR	106201	ExpressionStatement	opline -> extended_value = ZEND_ARG_COMPILE_TIME_BOUND	2764:4:79469:79521	105669	1	True				
ANR	106202	AssignmentExpression	opline -> extended_value = ZEND_ARG_COMPILE_TIME_BOUND		105669	0		=			
ANR	106203	PtrMemberAccess	opline -> extended_value		105669	0					
ANR	106204	Identifier	opline		105669	0					
ANR	106205	Identifier	extended_value		105669	1					
ANR	106206	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		105669	1					
ANR	106207	ElseStatement	else		105669	0					
ANR	106208	CompoundStatement		97:10:2843:2843	105669	0					
ANR	106209	ExpressionStatement	opline -> extended_value = flags	2766:4:79539:79569	105669	0	True				
ANR	106210	AssignmentExpression	opline -> extended_value = flags		105669	0		=			
ANR	106211	PtrMemberAccess	opline -> extended_value		105669	0					
ANR	106212	Identifier	opline		105669	0					
ANR	106213	Identifier	extended_value		105669	1					
ANR	106214	Identifier	flags		105669	1					
ANR	106215	ElseStatement	else		105669	0					
ANR	106216	IfStatement	if ( fbc )		105669	0					
ANR	106217	Condition	fbc	2768:13:79589:79591	105669	0	True				
ANR	106218	Identifier	fbc		105669	0					
ANR	106219	CompoundStatement		100:18:2904:2904	105669	1					
ANR	106220	ExpressionStatement	opline -> extended_value = ZEND_ARG_COMPILE_TIME_BOUND	2769:3:79599:79651	105669	0	True				
ANR	106221	AssignmentExpression	opline -> extended_value = ZEND_ARG_COMPILE_TIME_BOUND		105669	0		=			
ANR	106222	PtrMemberAccess	opline -> extended_value		105669	0					
ANR	106223	Identifier	opline		105669	0					
ANR	106224	Identifier	extended_value		105669	1					
ANR	106225	Identifier	ZEND_ARG_COMPILE_TIME_BOUND		105669	1					
ANR	106226	ReturnStatement	return arg_count ;	2773:1:79662:79678	105669	5	True				
ANR	106227	Identifier	arg_count		105669	0					
ANR	106228	ReturnType	uint32_t		105669	1					
ANR	106229	Identifier	zend_compile_args		105669	2					
ANR	106230	ParameterList	"zend_ast * ast , zend_function * fbc"		105669	3					
ANR	106231	Parameter	zend_ast * ast	2668:27:76644:76656	105669	0	True				
ANR	106232	ParameterType	zend_ast *		105669	0					
ANR	106233	Identifier	ast		105669	1					
ANR	106234	Parameter	zend_function * fbc	2668:42:76659:76676	105669	1	True				
ANR	106235	ParameterType	zend_function *		105669	0					
ANR	106236	Identifier	fbc		105669	1					
ANR	106237	CFGEntryNode	ENTRY		105669		True				
ANR	106238	CFGExitNode	EXIT		105669		True				
ANR	106239	Symbol	arg_num		105669						
ANR	106240	Symbol	ZEND_SEND_VAR_NO_REF		105669						
ANR	106241	Symbol	ZEND_SEND_REF		105669						
ANR	106242	Symbol	ast		105669						
ANR	106243	Symbol	IS_CV		105669						
ANR	106244	Symbol	ZEND_AST_UNPACK		105669						
ANR	106245	Symbol	E_COMPILE_ERROR		105669						
ANR	106246	Symbol	uses_arg_unpack		105669						
ANR	106247	Symbol	ARG_MAY_BE_SENT_BY_REF		105669						
ANR	106248	Symbol	opcode		105669						
ANR	106249	Symbol	opline -> result		105669						
ANR	106250	Symbol	opline -> extended_value		105669						
ANR	106251	Symbol	* args		105669						
ANR	106252	Symbol	opline		105669						
ANR	106253	Symbol	ZEND_ARG_SEND_FUNCTION		105669						
ANR	106254	Symbol	arg_node . op_type		105669						
ANR	106255	Symbol	ZEND_SEND_VAL_EX		105669						
ANR	106256	Symbol	BP_VAR_W		105669						
ANR	106257	Symbol	ZEND_ARG_SEND_SILENT		105669						
ANR	106258	Symbol	* * args		105669						
ANR	106259	Symbol	arg -> kind		105669						
ANR	106260	Symbol	BP_VAR_R		105669						
ANR	106261	Symbol	IS_TMP_VAR		105669						
ANR	106262	Symbol	arg -> child		105669						
ANR	106263	Symbol	IS_CONST		105669						
ANR	106264	Symbol	NULL		105669						
ANR	106265	Symbol	fbc		105669						
ANR	106266	Symbol	* * arg		105669						
ANR	106267	Symbol	ARG_MUST_BE_SENT_BY_REF		105669						
ANR	106268	Symbol	ZEND_SEND_VAL		105669						
ANR	106269	Symbol	ZEND_SEND_VAR		105669						
ANR	106270	Symbol	args -> child		105669						
ANR	106271	Symbol	* arg -> child		105669						
ANR	106272	Symbol	ZEND_ARG_SEND_BY_REF		105669						
ANR	106273	Symbol	IS_VAR		105669						
ANR	106274	Symbol	* arg		105669						
ANR	106275	Symbol	zend_emit_op		105669						
ANR	106276	Symbol	ARG_SHOULD_BE_SENT_BY_REF		105669						
ANR	106277	Symbol	opline -> op1		105669						
ANR	106278	Symbol	opline -> op2		105669						
ANR	106279	Symbol	arg_node		105669						
ANR	106280	Symbol	BP_VAR_SHIFT		105669						
ANR	106281	Symbol	* args -> child		105669						
ANR	106282	Symbol	ZEND_CALL_ARG		105669						
ANR	106283	Symbol	flags		105669						
ANR	106284	Symbol	arg		105669						
ANR	106285	Symbol	ZEND_SEND_VAR_EX		105669						
ANR	106286	Symbol	BP_VAR_FUNC_ARG		105669						
ANR	106287	Symbol	opline -> op2 . num		105669						
ANR	106288	Symbol	zend_is_variable		105669						
ANR	106289	Symbol	opline -> op2 . opline_num		105669						
ANR	106290	Symbol	get_next_op		105669						
ANR	106291	Symbol	zend_is_call		105669						
ANR	106292	Symbol	CG		105669						
ANR	106293	Symbol	active_op_array		105669						
ANR	106294	Symbol	i		105669						
ANR	106295	Symbol	ZEND_SEND_UNPACK		105669						
ANR	106296	Symbol	args		105669						
ANR	106297	Symbol	zend_ast_get_list		105669						
ANR	106298	Symbol	* i		105669						
ANR	106299	Symbol	* opline		105669						
ANR	106300	Symbol	opline -> opcode		105669						
ANR	106301	Symbol	args -> children		105669						
ANR	106302	Symbol	& arg_node		105669						
ANR	106303	Symbol	ZEND_ARG_COMPILE_TIME_BOUND		105669						
ANR	106304	Symbol	opline -> result . var		105669						
ANR	106305	Symbol	arg_count		105669						
ANR	106306	Function	zend_get_call_op	2777:0:79693:80446							
ANR	106307	FunctionDef	"zend_get_call_op (zend_uchar init_op , zend_function * fbc)"		106306	0					
ANR	106308	CompoundStatement		2778:0:79780:80446	106306	0					
ANR	106309	IfStatement	if ( fbc )		106306	0					
ANR	106310	Condition	fbc	2779:5:79787:79789	106306	0	True				
ANR	106311	Identifier	fbc		106306	0					
ANR	106312	CompoundStatement		2:10:11:11	106306	1					
ANR	106313	IfStatement	if ( fbc -> type == ZEND_INTERNAL_FUNCTION )		106306	0					
ANR	106314	Condition	fbc -> type == ZEND_INTERNAL_FUNCTION	2780:6:79800:79834	106306	0	True				
ANR	106315	EqualityExpression	fbc -> type == ZEND_INTERNAL_FUNCTION		106306	0		==			
ANR	106316	PtrMemberAccess	fbc -> type		106306	0					
ANR	106317	Identifier	fbc		106306	0					
ANR	106318	Identifier	type		106306	1					
ANR	106319	Identifier	ZEND_INTERNAL_FUNCTION		106306	1					
ANR	106320	CompoundStatement		3:43:56:56	106306	1					
ANR	106321	IfStatement	if ( ! zend_execute_internal && ! fbc -> common . scope && ! ( fbc -> common . fn_flags & ( ZEND_ACC_ABSTRACT | ZEND_ACC_DEPRECATED | ZEND_ACC_HAS_TYPE_HINTS | ZEND_ACC_RETURN_REFERENCE ) ) )		106306	0					
ANR	106322	Condition	! zend_execute_internal && ! fbc -> common . scope && ! ( fbc -> common . fn_flags & ( ZEND_ACC_ABSTRACT | ZEND_ACC_DEPRECATED | ZEND_ACC_HAS_TYPE_HINTS | ZEND_ACC_RETURN_REFERENCE ) )	2781:7:79846:80022	106306	0	True				
ANR	106323	AndExpression	! zend_execute_internal && ! fbc -> common . scope && ! ( fbc -> common . fn_flags & ( ZEND_ACC_ABSTRACT | ZEND_ACC_DEPRECATED | ZEND_ACC_HAS_TYPE_HINTS | ZEND_ACC_RETURN_REFERENCE ) )		106306	0		&&			
ANR	106324	UnaryOperationExpression	! zend_execute_internal		106306	0					
ANR	106325	UnaryOperator	!		106306	0					
ANR	106326	Identifier	zend_execute_internal		106306	1					
ANR	106327	AndExpression	! fbc -> common . scope && ! ( fbc -> common . fn_flags & ( ZEND_ACC_ABSTRACT | ZEND_ACC_DEPRECATED | ZEND_ACC_HAS_TYPE_HINTS | ZEND_ACC_RETURN_REFERENCE ) )		106306	1		&&			
ANR	106328	UnaryOperationExpression	! fbc -> common . scope		106306	0					
ANR	106329	UnaryOperator	!		106306	0					
ANR	106330	MemberAccess	fbc -> common . scope		106306	1					
ANR	106331	PtrMemberAccess	fbc -> common		106306	0					
ANR	106332	Identifier	fbc		106306	0					
ANR	106333	Identifier	common		106306	1					
ANR	106334	Identifier	scope		106306	1					
ANR	106335	UnaryOperationExpression	! ( fbc -> common . fn_flags & ( ZEND_ACC_ABSTRACT | ZEND_ACC_DEPRECATED | ZEND_ACC_HAS_TYPE_HINTS | ZEND_ACC_RETURN_REFERENCE ) )		106306	1					
ANR	106336	UnaryOperator	!		106306	0					
ANR	106337	BitAndExpression	fbc -> common . fn_flags & ( ZEND_ACC_ABSTRACT | ZEND_ACC_DEPRECATED | ZEND_ACC_HAS_TYPE_HINTS | ZEND_ACC_RETURN_REFERENCE )		106306	1		&			
ANR	106338	MemberAccess	fbc -> common . fn_flags		106306	0					
ANR	106339	PtrMemberAccess	fbc -> common		106306	0					
ANR	106340	Identifier	fbc		106306	0					
ANR	106341	Identifier	common		106306	1					
ANR	106342	Identifier	fn_flags		106306	1					
ANR	106343	InclusiveOrExpression	ZEND_ACC_ABSTRACT | ZEND_ACC_DEPRECATED | ZEND_ACC_HAS_TYPE_HINTS | ZEND_ACC_RETURN_REFERENCE		106306	1		|			
ANR	106344	Identifier	ZEND_ACC_ABSTRACT		106306	0					
ANR	106345	InclusiveOrExpression	ZEND_ACC_DEPRECATED | ZEND_ACC_HAS_TYPE_HINTS | ZEND_ACC_RETURN_REFERENCE		106306	1		|			
ANR	106346	Identifier	ZEND_ACC_DEPRECATED		106306	0					
ANR	106347	InclusiveOrExpression	ZEND_ACC_HAS_TYPE_HINTS | ZEND_ACC_RETURN_REFERENCE		106306	1		|			
ANR	106348	Identifier	ZEND_ACC_HAS_TYPE_HINTS		106306	0					
ANR	106349	Identifier	ZEND_ACC_RETURN_REFERENCE		106306	1					
ANR	106350	CompoundStatement		6:124:244:244	106306	1					
ANR	106351	ReturnStatement	return ZEND_DO_ICALL ;	2784:4:80031:80051	106306	0	True				
ANR	106352	Identifier	ZEND_DO_ICALL		106306	0					
ANR	106353	ElseStatement	else		106306	0					
ANR	106354	CompoundStatement		9:9:286:286	106306	0					
ANR	106355	IfStatement	if ( zend_execute_ex == execute_ex && ! ( fbc -> common . fn_flags & ZEND_ACC_GENERATOR ) )		106306	0					
ANR	106356	Condition	zend_execute_ex == execute_ex && ! ( fbc -> common . fn_flags & ZEND_ACC_GENERATOR )	2787:7:80076:80159	106306	0	True				
ANR	106357	AndExpression	zend_execute_ex == execute_ex && ! ( fbc -> common . fn_flags & ZEND_ACC_GENERATOR )		106306	0		&&			
ANR	106358	EqualityExpression	zend_execute_ex == execute_ex		106306	0		==			
ANR	106359	Identifier	zend_execute_ex		106306	0					
ANR	106360	Identifier	execute_ex		106306	1					
ANR	106361	UnaryOperationExpression	! ( fbc -> common . fn_flags & ZEND_ACC_GENERATOR )		106306	1					
ANR	106362	UnaryOperator	!		106306	0					
ANR	106363	BitAndExpression	fbc -> common . fn_flags & ZEND_ACC_GENERATOR		106306	1		&			
ANR	106364	MemberAccess	fbc -> common . fn_flags		106306	0					
ANR	106365	PtrMemberAccess	fbc -> common		106306	0					
ANR	106366	Identifier	fbc		106306	0					
ANR	106367	Identifier	common		106306	1					
ANR	106368	Identifier	fn_flags		106306	1					
ANR	106369	Identifier	ZEND_ACC_GENERATOR		106306	1					
ANR	106370	CompoundStatement		11:53:381:381	106306	1					
ANR	106371	ReturnStatement	return ZEND_DO_UCALL ;	2789:4:80168:80188	106306	0	True				
ANR	106372	Identifier	ZEND_DO_UCALL		106306	0					
ANR	106373	ElseStatement	else		106306	0					
ANR	106374	IfStatement	if ( zend_execute_ex == execute_ex && ! zend_execute_internal && ( init_op == ZEND_INIT_FCALL_BY_NAME || init_op == ZEND_INIT_NS_FCALL_BY_NAME ) )		106306	0					
ANR	106375	Condition	zend_execute_ex == execute_ex && ! zend_execute_internal && ( init_op == ZEND_INIT_FCALL_BY_NAME || init_op == ZEND_INIT_NS_FCALL_BY_NAME )	2792:12:80211:80383	106306	0	True				
ANR	106376	AndExpression	zend_execute_ex == execute_ex && ! zend_execute_internal && ( init_op == ZEND_INIT_FCALL_BY_NAME || init_op == ZEND_INIT_NS_FCALL_BY_NAME )		106306	0		&&			
ANR	106377	EqualityExpression	zend_execute_ex == execute_ex		106306	0		==			
ANR	106378	Identifier	zend_execute_ex		106306	0					
ANR	106379	Identifier	execute_ex		106306	1					
ANR	106380	AndExpression	! zend_execute_internal && ( init_op == ZEND_INIT_FCALL_BY_NAME || init_op == ZEND_INIT_NS_FCALL_BY_NAME )		106306	1		&&			
ANR	106381	UnaryOperationExpression	! zend_execute_internal		106306	0					
ANR	106382	UnaryOperator	!		106306	0					
ANR	106383	Identifier	zend_execute_internal		106306	1					
ANR	106384	OrExpression	init_op == ZEND_INIT_FCALL_BY_NAME || init_op == ZEND_INIT_NS_FCALL_BY_NAME		106306	1		||			
ANR	106385	EqualityExpression	init_op == ZEND_INIT_FCALL_BY_NAME		106306	0		==			
ANR	106386	Identifier	init_op		106306	0					
ANR	106387	Identifier	ZEND_INIT_FCALL_BY_NAME		106306	1					
ANR	106388	EqualityExpression	init_op == ZEND_INIT_NS_FCALL_BY_NAME		106306	1		==			
ANR	106389	Identifier	init_op		106306	0					
ANR	106390	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		106306	1					
ANR	106391	CompoundStatement		18:53:605:605	106306	1					
ANR	106392	ReturnStatement	return ZEND_DO_FCALL_BY_NAME ;	2796:2:80390:80418	106306	0	True				
ANR	106393	Identifier	ZEND_DO_FCALL_BY_NAME		106306	0					
ANR	106394	ReturnStatement	return ZEND_DO_FCALL ;	2798:1:80424:80444	106306	1	True				
ANR	106395	Identifier	ZEND_DO_FCALL		106306	0					
ANR	106396	ReturnType	ZEND_API zend_uchar		106306	1					
ANR	106397	Identifier	zend_get_call_op		106306	2					
ANR	106398	ParameterList	"zend_uchar init_op , zend_function * fbc"		106306	3					
ANR	106399	Parameter	zend_uchar init_op	2777:37:79730:79747	106306	0	True				
ANR	106400	ParameterType	zend_uchar		106306	0					
ANR	106401	Identifier	init_op		106306	1					
ANR	106402	Parameter	zend_function * fbc	2777:57:79750:79767	106306	1	True				
ANR	106403	ParameterType	zend_function *		106306	0					
ANR	106404	Identifier	fbc		106306	1					
ANR	106405	CFGEntryNode	ENTRY		106306		True				
ANR	106406	CFGExitNode	EXIT		106306		True				
ANR	106407	Symbol	ZEND_INIT_NS_FCALL_BY_NAME		106306						
ANR	106408	Symbol	ZEND_DO_FCALL_BY_NAME		106306						
ANR	106409	Symbol	fbc		106306						
ANR	106410	Symbol	fbc -> type		106306						
ANR	106411	Symbol	fbc -> common		106306						
ANR	106412	Symbol	* fbc		106306						
ANR	106413	Symbol	ZEND_ACC_HAS_TYPE_HINTS		106306						
ANR	106414	Symbol	ZEND_INTERNAL_FUNCTION		106306						
ANR	106415	Symbol	ZEND_DO_UCALL		106306						
ANR	106416	Symbol	init_op		106306						
ANR	106417	Symbol	ZEND_ACC_ABSTRACT		106306						
ANR	106418	Symbol	ZEND_ACC_DEPRECATED		106306						
ANR	106419	Symbol	ZEND_DO_FCALL		106306						
ANR	106420	Symbol	ZEND_DO_ICALL		106306						
ANR	106421	Symbol	ZEND_ACC_RETURN_REFERENCE		106306						
ANR	106422	Symbol	zend_execute_internal		106306						
ANR	106423	Symbol	execute_ex		106306						
ANR	106424	Symbol	zend_execute_ex		106306						
ANR	106425	Symbol	ZEND_ACC_GENERATOR		106306						
ANR	106426	Symbol	fbc -> common . fn_flags		106306						
ANR	106427	Symbol	fbc -> common . scope		106306						
ANR	106428	Symbol	ZEND_INIT_FCALL_BY_NAME		106306						
ANR	106429	Function	zend_compile_call_common	2802:0:80459:81177							
ANR	106430	FunctionDef	"zend_compile_call_common (znode * result , zend_ast * args_ast , zend_function * fbc)"		106429	0					
ANR	106431	CompoundStatement		2803:0:80554:81177	106429	0					
ANR	106432	IdentifierDeclStatement	zend_op * opline ;	2804:1:80557:80572	106429	0	True				
ANR	106433	IdentifierDecl	* opline		106429	0					
ANR	106434	IdentifierDeclType	zend_op *		106429	0					
ANR	106435	Identifier	opline		106429	1					
ANR	106436	IdentifierDeclStatement	uint32_t opnum_init = get_next_op_number ( CG ( active_op_array ) ) - 1 ;	2805:1:80575:80640	106429	1	True				
ANR	106437	IdentifierDecl	opnum_init = get_next_op_number ( CG ( active_op_array ) ) - 1		106429	0					
ANR	106438	IdentifierDeclType	uint32_t		106429	0					
ANR	106439	Identifier	opnum_init		106429	1					
ANR	106440	AssignmentExpression	opnum_init = get_next_op_number ( CG ( active_op_array ) ) - 1		106429	2		=			
ANR	106441	Identifier	opnum_init		106429	0					
ANR	106442	AdditiveExpression	get_next_op_number ( CG ( active_op_array ) ) - 1		106429	1		-			
ANR	106443	CallExpression	get_next_op_number ( CG ( active_op_array ) )		106429	0					
ANR	106444	Callee	get_next_op_number		106429	0					
ANR	106445	Identifier	get_next_op_number		106429	0					
ANR	106446	ArgumentList	CG ( active_op_array )		106429	1					
ANR	106447	Argument	CG ( active_op_array )		106429	0					
ANR	106448	CallExpression	CG ( active_op_array )		106429	0					
ANR	106449	Callee	CG		106429	0					
ANR	106450	Identifier	CG		106429	0					
ANR	106451	ArgumentList	active_op_array		106429	1					
ANR	106452	Argument	active_op_array		106429	0					
ANR	106453	Identifier	active_op_array		106429	0					
ANR	106454	PrimaryExpression	1		106429	1					
ANR	106455	IdentifierDeclStatement	uint32_t arg_count ;	2806:1:80643:80661	106429	2	True				
ANR	106456	IdentifierDecl	arg_count		106429	0					
ANR	106457	IdentifierDeclType	uint32_t		106429	0					
ANR	106458	Identifier	arg_count		106429	1					
ANR	106459	IdentifierDeclStatement	uint32_t call_flags ;	2807:1:80664:80683	106429	3	True				
ANR	106460	IdentifierDecl	call_flags		106429	0					
ANR	106461	IdentifierDeclType	uint32_t		106429	0					
ANR	106462	Identifier	call_flags		106429	1					
ANR	106463	ExpressionStatement	zend_do_extended_fcall_begin ( )	2809:1:80687:80717	106429	4	True				
ANR	106464	CallExpression	zend_do_extended_fcall_begin ( )		106429	0					
ANR	106465	Callee	zend_do_extended_fcall_begin		106429	0					
ANR	106466	Identifier	zend_do_extended_fcall_begin		106429	0					
ANR	106467	ArgumentList			106429	1					
ANR	106468	ExpressionStatement	"arg_count = zend_compile_args ( args_ast , fbc )"	2811:1:80721:80765	106429	5	True				
ANR	106469	AssignmentExpression	"arg_count = zend_compile_args ( args_ast , fbc )"		106429	0		=			
ANR	106470	Identifier	arg_count		106429	0					
ANR	106471	CallExpression	"zend_compile_args ( args_ast , fbc )"		106429	1					
ANR	106472	Callee	zend_compile_args		106429	0					
ANR	106473	Identifier	zend_compile_args		106429	0					
ANR	106474	ArgumentList	args_ast		106429	1					
ANR	106475	Argument	args_ast		106429	0					
ANR	106476	Identifier	args_ast		106429	0					
ANR	106477	Argument	fbc		106429	1					
ANR	106478	Identifier	fbc		106429	0					
ANR	106479	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ opnum_init ]	2813:1:80769:80819	106429	6	True				
ANR	106480	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ opnum_init ]		106429	0		=			
ANR	106481	Identifier	opline		106429	0					
ANR	106482	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ opnum_init ]		106429	1					
ANR	106483	UnaryOperator	&		106429	0					
ANR	106484	ArrayIndexing	CG ( active_op_array ) -> opcodes [ opnum_init ]		106429	1					
ANR	106485	PtrMemberAccess	CG ( active_op_array ) -> opcodes		106429	0					
ANR	106486	CallExpression	CG ( active_op_array )		106429	0					
ANR	106487	Callee	CG		106429	0					
ANR	106488	Identifier	CG		106429	0					
ANR	106489	ArgumentList	active_op_array		106429	1					
ANR	106490	Argument	active_op_array		106429	0					
ANR	106491	Identifier	active_op_array		106429	0					
ANR	106492	Identifier	opcodes		106429	1					
ANR	106493	Identifier	opnum_init		106429	1					
ANR	106494	ExpressionStatement	opline -> extended_value = arg_count	2814:1:80822:80856	106429	7	True				
ANR	106495	AssignmentExpression	opline -> extended_value = arg_count		106429	0		=			
ANR	106496	PtrMemberAccess	opline -> extended_value		106429	0					
ANR	106497	Identifier	opline		106429	0					
ANR	106498	Identifier	extended_value		106429	1					
ANR	106499	Identifier	arg_count		106429	1					
ANR	106500	IfStatement	if ( opline -> opcode == ZEND_INIT_FCALL )		106429	8					
ANR	106501	Condition	opline -> opcode == ZEND_INIT_FCALL	2816:5:80864:80896	106429	0	True				
ANR	106502	EqualityExpression	opline -> opcode == ZEND_INIT_FCALL		106429	0		==			
ANR	106503	PtrMemberAccess	opline -> opcode		106429	0					
ANR	106504	Identifier	opline		106429	0					
ANR	106505	Identifier	opcode		106429	1					
ANR	106506	Identifier	ZEND_INIT_FCALL		106429	1					
ANR	106507	CompoundStatement		14:40:344:344	106429	1					
ANR	106508	ExpressionStatement	"opline -> op1 . num = zend_vm_calc_used_stack ( arg_count , fbc )"	2817:2:80903:80960	106429	0	True				
ANR	106509	AssignmentExpression	"opline -> op1 . num = zend_vm_calc_used_stack ( arg_count , fbc )"		106429	0		=			
ANR	106510	MemberAccess	opline -> op1 . num		106429	0					
ANR	106511	PtrMemberAccess	opline -> op1		106429	0					
ANR	106512	Identifier	opline		106429	0					
ANR	106513	Identifier	op1		106429	1					
ANR	106514	Identifier	num		106429	1					
ANR	106515	CallExpression	"zend_vm_calc_used_stack ( arg_count , fbc )"		106429	1					
ANR	106516	Callee	zend_vm_calc_used_stack		106429	0					
ANR	106517	Identifier	zend_vm_calc_used_stack		106429	0					
ANR	106518	ArgumentList	arg_count		106429	1					
ANR	106519	Argument	arg_count		106429	0					
ANR	106520	Identifier	arg_count		106429	0					
ANR	106521	Argument	fbc		106429	1					
ANR	106522	Identifier	fbc		106429	0					
ANR	106523	ExpressionStatement	call_flags = ( opline -> opcode == ZEND_NEW ? ZEND_CALL_CTOR : 0 )	2820:1:80967:81029	106429	9	True				
ANR	106524	AssignmentExpression	call_flags = ( opline -> opcode == ZEND_NEW ? ZEND_CALL_CTOR : 0 )		106429	0		=			
ANR	106525	Identifier	call_flags		106429	0					
ANR	106526	ConditionalExpression	opline -> opcode == ZEND_NEW ? ZEND_CALL_CTOR : 0		106429	1					
ANR	106527	Condition	opline -> opcode == ZEND_NEW		106429	0					
ANR	106528	EqualityExpression	opline -> opcode == ZEND_NEW		106429	0		==			
ANR	106529	PtrMemberAccess	opline -> opcode		106429	0					
ANR	106530	Identifier	opline		106429	0					
ANR	106531	Identifier	opcode		106429	1					
ANR	106532	Identifier	ZEND_NEW		106429	1					
ANR	106533	Identifier	ZEND_CALL_CTOR		106429	1					
ANR	106534	PrimaryExpression	0		106429	2					
ANR	106535	ExpressionStatement	"opline = zend_emit_op ( result , zend_get_call_op ( opline -> opcode , fbc ) , NULL , NULL )"	2821:1:81032:81112	106429	10	True				
ANR	106536	AssignmentExpression	"opline = zend_emit_op ( result , zend_get_call_op ( opline -> opcode , fbc ) , NULL , NULL )"		106429	0		=			
ANR	106537	Identifier	opline		106429	0					
ANR	106538	CallExpression	"zend_emit_op ( result , zend_get_call_op ( opline -> opcode , fbc ) , NULL , NULL )"		106429	1					
ANR	106539	Callee	zend_emit_op		106429	0					
ANR	106540	Identifier	zend_emit_op		106429	0					
ANR	106541	ArgumentList	result		106429	1					
ANR	106542	Argument	result		106429	0					
ANR	106543	Identifier	result		106429	0					
ANR	106544	Argument	"zend_get_call_op ( opline -> opcode , fbc )"		106429	1					
ANR	106545	CallExpression	"zend_get_call_op ( opline -> opcode , fbc )"		106429	0					
ANR	106546	Callee	zend_get_call_op		106429	0					
ANR	106547	Identifier	zend_get_call_op		106429	0					
ANR	106548	ArgumentList	opline -> opcode		106429	1					
ANR	106549	Argument	opline -> opcode		106429	0					
ANR	106550	PtrMemberAccess	opline -> opcode		106429	0					
ANR	106551	Identifier	opline		106429	0					
ANR	106552	Identifier	opcode		106429	1					
ANR	106553	Argument	fbc		106429	1					
ANR	106554	Identifier	fbc		106429	0					
ANR	106555	Argument	NULL		106429	2					
ANR	106556	Identifier	NULL		106429	0					
ANR	106557	Argument	NULL		106429	3					
ANR	106558	Identifier	NULL		106429	0					
ANR	106559	ExpressionStatement	opline -> op1 . num = call_flags	2822:1:81115:81143	106429	11	True				
ANR	106560	AssignmentExpression	opline -> op1 . num = call_flags		106429	0		=			
ANR	106561	MemberAccess	opline -> op1 . num		106429	0					
ANR	106562	PtrMemberAccess	opline -> op1		106429	0					
ANR	106563	Identifier	opline		106429	0					
ANR	106564	Identifier	op1		106429	1					
ANR	106565	Identifier	num		106429	1					
ANR	106566	Identifier	call_flags		106429	1					
ANR	106567	ExpressionStatement	zend_do_extended_fcall_end ( )	2824:1:81147:81175	106429	12	True				
ANR	106568	CallExpression	zend_do_extended_fcall_end ( )		106429	0					
ANR	106569	Callee	zend_do_extended_fcall_end		106429	0					
ANR	106570	Identifier	zend_do_extended_fcall_end		106429	0					
ANR	106571	ArgumentList			106429	1					
ANR	106572	ReturnType	void		106429	1					
ANR	106573	Identifier	zend_compile_call_common		106429	2					
ANR	106574	ParameterList	"znode * result , zend_ast * args_ast , zend_function * fbc"		106429	3					
ANR	106575	Parameter	znode * result	2802:30:80489:80501	106429	0	True				
ANR	106576	ParameterType	znode *		106429	0					
ANR	106577	Identifier	result		106429	1					
ANR	106578	Parameter	zend_ast * args_ast	2802:45:80504:80521	106429	1	True				
ANR	106579	ParameterType	zend_ast *		106429	0					
ANR	106580	Identifier	args_ast		106429	1					
ANR	106581	Parameter	zend_function * fbc	2802:65:80524:80541	106429	2	True				
ANR	106582	ParameterType	zend_function *		106429	0					
ANR	106583	Identifier	fbc		106429	1					
ANR	106584	CFGEntryNode	ENTRY		106429		True				
ANR	106585	CFGExitNode	EXIT		106429		True				
ANR	106586	Symbol	opline -> op1		106429						
ANR	106587	Symbol	call_flags		106429						
ANR	106588	Symbol	* CG		106429						
ANR	106589	Symbol	CG ( active_op_array ) -> opcodes		106429						
ANR	106590	Symbol	opline -> extended_value		106429						
ANR	106591	Symbol	result		106429						
ANR	106592	Symbol	opline		106429						
ANR	106593	Symbol	ZEND_CALL_CTOR		106429						
ANR	106594	Symbol	ZEND_INIT_FCALL		106429						
ANR	106595	Symbol	zend_compile_args		106429						
ANR	106596	Symbol	ZEND_NEW		106429						
ANR	106597	Symbol	NULL		106429						
ANR	106598	Symbol	CG		106429						
ANR	106599	Symbol	zend_get_call_op		106429						
ANR	106600	Symbol	opnum_init		106429						
ANR	106601	Symbol	fbc		106429						
ANR	106602	Symbol	active_op_array		106429						
ANR	106603	Symbol	* opline		106429						
ANR	106604	Symbol	opline -> opcode		106429						
ANR	106605	Symbol	opline -> op1 . num		106429						
ANR	106606	Symbol	args_ast		106429						
ANR	106607	Symbol	get_next_op_number		106429						
ANR	106608	Symbol	zend_vm_calc_used_stack		106429						
ANR	106609	Symbol	arg_count		106429						
ANR	106610	Symbol	zend_emit_op		106429						
ANR	106611	Function	zend_compile_function_name	2828:0:81190:81564							
ANR	106612	FunctionDef	"zend_compile_function_name (znode * name_node , zend_ast * name_ast)"		106611	0					
ANR	106613	CompoundStatement		2829:0:81275:81564	106611	0					
ANR	106614	IdentifierDeclStatement	zend_string * orig_name = zend_ast_get_str ( name_ast ) ;	2830:1:81278:81329	106611	0	True				
ANR	106615	IdentifierDecl	* orig_name = zend_ast_get_str ( name_ast )		106611	0					
ANR	106616	IdentifierDeclType	zend_string *		106611	0					
ANR	106617	Identifier	orig_name		106611	1					
ANR	106618	AssignmentExpression	* orig_name = zend_ast_get_str ( name_ast )		106611	2		=			
ANR	106619	Identifier	orig_name		106611	0					
ANR	106620	CallExpression	zend_ast_get_str ( name_ast )		106611	1					
ANR	106621	Callee	zend_ast_get_str		106611	0					
ANR	106622	Identifier	zend_ast_get_str		106611	0					
ANR	106623	ArgumentList	name_ast		106611	1					
ANR	106624	Argument	name_ast		106611	0					
ANR	106625	Identifier	name_ast		106611	0					
ANR	106626	IdentifierDeclStatement	zend_bool is_fully_qualified ;	2831:1:81332:81360	106611	1	True				
ANR	106627	IdentifierDecl	is_fully_qualified		106611	0					
ANR	106628	IdentifierDeclType	zend_bool		106611	0					
ANR	106629	Identifier	is_fully_qualified		106611	1					
ANR	106630	ExpressionStatement	name_node -> op_type = IS_CONST	2833:1:81364:81393	106611	2	True				
ANR	106631	AssignmentExpression	name_node -> op_type = IS_CONST		106611	0		=			
ANR	106632	PtrMemberAccess	name_node -> op_type		106611	0					
ANR	106633	Identifier	name_node		106611	0					
ANR	106634	Identifier	op_type		106611	1					
ANR	106635	Identifier	IS_CONST		106611	1					
ANR	106636	ExpressionStatement	"ZVAL_STR ( & name_node -> u . constant , zend_resolve_function_name ( orig_name , name_ast -> attr , & is_fully_qualified ) )"	2834:1:81396:81507	106611	3	True				
ANR	106637	CallExpression	"ZVAL_STR ( & name_node -> u . constant , zend_resolve_function_name ( orig_name , name_ast -> attr , & is_fully_qualified ) )"		106611	0					
ANR	106638	Callee	ZVAL_STR		106611	0					
ANR	106639	Identifier	ZVAL_STR		106611	0					
ANR	106640	ArgumentList	& name_node -> u . constant		106611	1					
ANR	106641	Argument	& name_node -> u . constant		106611	0					
ANR	106642	UnaryOperationExpression	& name_node -> u . constant		106611	0					
ANR	106643	UnaryOperator	&		106611	0					
ANR	106644	MemberAccess	name_node -> u . constant		106611	1					
ANR	106645	PtrMemberAccess	name_node -> u		106611	0					
ANR	106646	Identifier	name_node		106611	0					
ANR	106647	Identifier	u		106611	1					
ANR	106648	Identifier	constant		106611	1					
ANR	106649	Argument	"zend_resolve_function_name ( orig_name , name_ast -> attr , & is_fully_qualified )"		106611	1					
ANR	106650	CallExpression	"zend_resolve_function_name ( orig_name , name_ast -> attr , & is_fully_qualified )"		106611	0					
ANR	106651	Callee	zend_resolve_function_name		106611	0					
ANR	106652	Identifier	zend_resolve_function_name		106611	0					
ANR	106653	ArgumentList	orig_name		106611	1					
ANR	106654	Argument	orig_name		106611	0					
ANR	106655	Identifier	orig_name		106611	0					
ANR	106656	Argument	name_ast -> attr		106611	1					
ANR	106657	PtrMemberAccess	name_ast -> attr		106611	0					
ANR	106658	Identifier	name_ast		106611	0					
ANR	106659	Identifier	attr		106611	1					
ANR	106660	Argument	& is_fully_qualified		106611	2					
ANR	106661	UnaryOperationExpression	& is_fully_qualified		106611	0					
ANR	106662	UnaryOperator	&		106611	0					
ANR	106663	Identifier	is_fully_qualified		106611	1					
ANR	106664	ReturnStatement	return ! is_fully_qualified && FC ( current_namespace ) ;	2837:1:81511:81562	106611	4	True				
ANR	106665	AndExpression	! is_fully_qualified && FC ( current_namespace )		106611	0		&&			
ANR	106666	UnaryOperationExpression	! is_fully_qualified		106611	0					
ANR	106667	UnaryOperator	!		106611	0					
ANR	106668	Identifier	is_fully_qualified		106611	1					
ANR	106669	CallExpression	FC ( current_namespace )		106611	1					
ANR	106670	Callee	FC		106611	0					
ANR	106671	Identifier	FC		106611	0					
ANR	106672	ArgumentList	current_namespace		106611	1					
ANR	106673	Argument	current_namespace		106611	0					
ANR	106674	Identifier	current_namespace		106611	0					
ANR	106675	ReturnType	zend_bool		106611	1					
ANR	106676	Identifier	zend_compile_function_name		106611	2					
ANR	106677	ParameterList	"znode * name_node , zend_ast * name_ast"		106611	3					
ANR	106678	Parameter	znode * name_node	2828:37:81227:81242	106611	0	True				
ANR	106679	ParameterType	znode *		106611	0					
ANR	106680	Identifier	name_node		106611	1					
ANR	106681	Parameter	zend_ast * name_ast	2828:55:81245:81262	106611	1	True				
ANR	106682	ParameterType	zend_ast *		106611	0					
ANR	106683	Identifier	name_ast		106611	1					
ANR	106684	CFGEntryNode	ENTRY		106611		True				
ANR	106685	CFGExitNode	EXIT		106611		True				
ANR	106686	Symbol	IS_CONST		106611						
ANR	106687	Symbol	& name_node -> u . constant		106611						
ANR	106688	Symbol	name_node -> u		106611						
ANR	106689	Symbol	is_fully_qualified		106611						
ANR	106690	Symbol	name_ast -> attr		106611						
ANR	106691	Symbol	* name_ast		106611						
ANR	106692	Symbol	zend_ast_get_str		106611						
ANR	106693	Symbol	current_namespace		106611						
ANR	106694	Symbol	zend_resolve_function_name		106611						
ANR	106695	Symbol	name_ast		106611						
ANR	106696	Symbol	orig_name		106611						
ANR	106697	Symbol	& name_node -> u		106611						
ANR	106698	Symbol	* name_node		106611						
ANR	106699	Symbol	name_node -> op_type		106611						
ANR	106700	Symbol	& is_fully_qualified		106611						
ANR	106701	Symbol	FC		106611						
ANR	106702	Symbol	name_node		106611						
ANR	106703	Function	zend_compile_ns_call	2841:0:81577:82030							
ANR	106704	FunctionDef	"zend_compile_ns_call (znode * result , znode * name_node , zend_ast * args_ast)"		106703	0					
ANR	106705	CompoundStatement		2842:0:81666:82030	106703	0					
ANR	106706	IdentifierDeclStatement	zend_op * opline = get_next_op ( CG ( active_op_array ) ) ;	2843:1:81669:81719	106703	0	True				
ANR	106707	IdentifierDecl	* opline = get_next_op ( CG ( active_op_array ) )		106703	0					
ANR	106708	IdentifierDeclType	zend_op *		106703	0					
ANR	106709	Identifier	opline		106703	1					
ANR	106710	AssignmentExpression	* opline = get_next_op ( CG ( active_op_array ) )		106703	2		=			
ANR	106711	Identifier	opline		106703	0					
ANR	106712	CallExpression	get_next_op ( CG ( active_op_array ) )		106703	1					
ANR	106713	Callee	get_next_op		106703	0					
ANR	106714	Identifier	get_next_op		106703	0					
ANR	106715	ArgumentList	CG ( active_op_array )		106703	1					
ANR	106716	Argument	CG ( active_op_array )		106703	0					
ANR	106717	CallExpression	CG ( active_op_array )		106703	0					
ANR	106718	Callee	CG		106703	0					
ANR	106719	Identifier	CG		106703	0					
ANR	106720	ArgumentList	active_op_array		106703	1					
ANR	106721	Argument	active_op_array		106703	0					
ANR	106722	Identifier	active_op_array		106703	0					
ANR	106723	ExpressionStatement	opline -> opcode = ZEND_INIT_NS_FCALL_BY_NAME	2844:1:81722:81765	106703	1	True				
ANR	106724	AssignmentExpression	opline -> opcode = ZEND_INIT_NS_FCALL_BY_NAME		106703	0		=			
ANR	106725	PtrMemberAccess	opline -> opcode		106703	0					
ANR	106726	Identifier	opline		106703	0					
ANR	106727	Identifier	opcode		106703	1					
ANR	106728	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		106703	1					
ANR	106729	ExpressionStatement	SET_UNUSED ( opline -> op1 )	2845:1:81768:81791	106703	2	True				
ANR	106730	CallExpression	SET_UNUSED ( opline -> op1 )		106703	0					
ANR	106731	Callee	SET_UNUSED		106703	0					
ANR	106732	Identifier	SET_UNUSED		106703	0					
ANR	106733	ArgumentList	opline -> op1		106703	1					
ANR	106734	Argument	opline -> op1		106703	0					
ANR	106735	PtrMemberAccess	opline -> op1		106703	0					
ANR	106736	Identifier	opline		106703	0					
ANR	106737	Identifier	op1		106703	1					
ANR	106738	ExpressionStatement	opline -> op2_type = IS_CONST	2846:1:81794:81821	106703	3	True				
ANR	106739	AssignmentExpression	opline -> op2_type = IS_CONST		106703	0		=			
ANR	106740	PtrMemberAccess	opline -> op2_type		106703	0					
ANR	106741	Identifier	opline		106703	0					
ANR	106742	Identifier	op2_type		106703	1					
ANR	106743	Identifier	IS_CONST		106703	1					
ANR	106744	ExpressionStatement	"opline -> op2 . constant = zend_add_ns_func_name_literal ( CG ( active_op_array ) , Z_STR ( name_node -> u . constant ) )"	2847:1:81824:81930	106703	4	True				
ANR	106745	AssignmentExpression	"opline -> op2 . constant = zend_add_ns_func_name_literal ( CG ( active_op_array ) , Z_STR ( name_node -> u . constant ) )"		106703	0		=			
ANR	106746	MemberAccess	opline -> op2 . constant		106703	0					
ANR	106747	PtrMemberAccess	opline -> op2		106703	0					
ANR	106748	Identifier	opline		106703	0					
ANR	106749	Identifier	op2		106703	1					
ANR	106750	Identifier	constant		106703	1					
ANR	106751	CallExpression	"zend_add_ns_func_name_literal ( CG ( active_op_array ) , Z_STR ( name_node -> u . constant ) )"		106703	1					
ANR	106752	Callee	zend_add_ns_func_name_literal		106703	0					
ANR	106753	Identifier	zend_add_ns_func_name_literal		106703	0					
ANR	106754	ArgumentList	CG ( active_op_array )		106703	1					
ANR	106755	Argument	CG ( active_op_array )		106703	0					
ANR	106756	CallExpression	CG ( active_op_array )		106703	0					
ANR	106757	Callee	CG		106703	0					
ANR	106758	Identifier	CG		106703	0					
ANR	106759	ArgumentList	active_op_array		106703	1					
ANR	106760	Argument	active_op_array		106703	0					
ANR	106761	Identifier	active_op_array		106703	0					
ANR	106762	Argument	Z_STR ( name_node -> u . constant )		106703	1					
ANR	106763	CallExpression	Z_STR ( name_node -> u . constant )		106703	0					
ANR	106764	Callee	Z_STR		106703	0					
ANR	106765	Identifier	Z_STR		106703	0					
ANR	106766	ArgumentList	name_node -> u . constant		106703	1					
ANR	106767	Argument	name_node -> u . constant		106703	0					
ANR	106768	MemberAccess	name_node -> u . constant		106703	0					
ANR	106769	PtrMemberAccess	name_node -> u		106703	0					
ANR	106770	Identifier	name_node		106703	0					
ANR	106771	Identifier	u		106703	1					
ANR	106772	Identifier	constant		106703	1					
ANR	106773	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	2849:1:81933:81976	106703	5	True				
ANR	106774	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		106703	0					
ANR	106775	Callee	zend_alloc_cache_slot		106703	0					
ANR	106776	Identifier	zend_alloc_cache_slot		106703	0					
ANR	106777	ArgumentList	opline -> op2 . constant		106703	1					
ANR	106778	Argument	opline -> op2 . constant		106703	0					
ANR	106779	MemberAccess	opline -> op2 . constant		106703	0					
ANR	106780	PtrMemberAccess	opline -> op2		106703	0					
ANR	106781	Identifier	opline		106703	0					
ANR	106782	Identifier	op2		106703	1					
ANR	106783	Identifier	constant		106703	1					
ANR	106784	ExpressionStatement	"zend_compile_call_common ( result , args_ast , NULL )"	2851:1:81980:82028	106703	6	True				
ANR	106785	CallExpression	"zend_compile_call_common ( result , args_ast , NULL )"		106703	0					
ANR	106786	Callee	zend_compile_call_common		106703	0					
ANR	106787	Identifier	zend_compile_call_common		106703	0					
ANR	106788	ArgumentList	result		106703	1					
ANR	106789	Argument	result		106703	0					
ANR	106790	Identifier	result		106703	0					
ANR	106791	Argument	args_ast		106703	1					
ANR	106792	Identifier	args_ast		106703	0					
ANR	106793	Argument	NULL		106703	2					
ANR	106794	Identifier	NULL		106703	0					
ANR	106795	ReturnType	void		106703	1					
ANR	106796	Identifier	zend_compile_ns_call		106703	2					
ANR	106797	ParameterList	"znode * result , znode * name_node , zend_ast * args_ast"		106703	3					
ANR	106798	Parameter	znode * result	2841:26:81603:81615	106703	0	True				
ANR	106799	ParameterType	znode *		106703	0					
ANR	106800	Identifier	result		106703	1					
ANR	106801	Parameter	znode * name_node	2841:41:81618:81633	106703	1	True				
ANR	106802	ParameterType	znode *		106703	0					
ANR	106803	Identifier	name_node		106703	1					
ANR	106804	Parameter	zend_ast * args_ast	2841:59:81636:81653	106703	2	True				
ANR	106805	ParameterType	zend_ast *		106703	0					
ANR	106806	Identifier	args_ast		106703	1					
ANR	106807	CFGEntryNode	ENTRY		106703		True				
ANR	106808	CFGExitNode	EXIT		106703		True				
ANR	106809	Symbol	opline -> op1		106703						
ANR	106810	Symbol	opline -> op2		106703						
ANR	106811	Symbol	IS_CONST		106703						
ANR	106812	Symbol	get_next_op		106703						
ANR	106813	Symbol	NULL		106703						
ANR	106814	Symbol	CG		106703						
ANR	106815	Symbol	ZEND_INIT_NS_FCALL_BY_NAME		106703						
ANR	106816	Symbol	active_op_array		106703						
ANR	106817	Symbol	Z_STR		106703						
ANR	106818	Symbol	name_node -> u		106703						
ANR	106819	Symbol	zend_add_ns_func_name_literal		106703						
ANR	106820	Symbol	result		106703						
ANR	106821	Symbol	opline		106703						
ANR	106822	Symbol	* opline		106703						
ANR	106823	Symbol	opline -> opcode		106703						
ANR	106824	Symbol	opline -> op2 . constant		106703						
ANR	106825	Symbol	opline -> op2_type		106703						
ANR	106826	Symbol	args_ast		106703						
ANR	106827	Symbol	* name_node		106703						
ANR	106828	Symbol	name_node -> u . constant		106703						
ANR	106829	Symbol	name_node		106703						
ANR	106830	Function	zend_compile_dynamic_call	2855:0:82043:83450							
ANR	106831	FunctionDef	"zend_compile_dynamic_call (znode * result , znode * name_node , zend_ast * args_ast)"		106830	0					
ANR	106832	CompoundStatement		2856:0:82137:83450	106830	0					
ANR	106833	IdentifierDeclStatement	zend_op * opline = get_next_op ( CG ( active_op_array ) ) ;	2857:1:82140:82190	106830	0	True				
ANR	106834	IdentifierDecl	* opline = get_next_op ( CG ( active_op_array ) )		106830	0					
ANR	106835	IdentifierDeclType	zend_op *		106830	0					
ANR	106836	Identifier	opline		106830	1					
ANR	106837	AssignmentExpression	* opline = get_next_op ( CG ( active_op_array ) )		106830	2		=			
ANR	106838	Identifier	opline		106830	0					
ANR	106839	CallExpression	get_next_op ( CG ( active_op_array ) )		106830	1					
ANR	106840	Callee	get_next_op		106830	0					
ANR	106841	Identifier	get_next_op		106830	0					
ANR	106842	ArgumentList	CG ( active_op_array )		106830	1					
ANR	106843	Argument	CG ( active_op_array )		106830	0					
ANR	106844	CallExpression	CG ( active_op_array )		106830	0					
ANR	106845	Callee	CG		106830	0					
ANR	106846	Identifier	CG		106830	0					
ANR	106847	ArgumentList	active_op_array		106830	1					
ANR	106848	Argument	active_op_array		106830	0					
ANR	106849	Identifier	active_op_array		106830	0					
ANR	106850	IfStatement	if ( name_node -> op_type == IS_CONST && Z_TYPE ( name_node -> u . constant ) == IS_STRING )		106830	1					
ANR	106851	Condition	name_node -> op_type == IS_CONST && Z_TYPE ( name_node -> u . constant ) == IS_STRING	2858:5:82197:82272	106830	0	True				
ANR	106852	AndExpression	name_node -> op_type == IS_CONST && Z_TYPE ( name_node -> u . constant ) == IS_STRING		106830	0		&&			
ANR	106853	EqualityExpression	name_node -> op_type == IS_CONST		106830	0		==			
ANR	106854	PtrMemberAccess	name_node -> op_type		106830	0					
ANR	106855	Identifier	name_node		106830	0					
ANR	106856	Identifier	op_type		106830	1					
ANR	106857	Identifier	IS_CONST		106830	1					
ANR	106858	EqualityExpression	Z_TYPE ( name_node -> u . constant ) == IS_STRING		106830	1		==			
ANR	106859	CallExpression	Z_TYPE ( name_node -> u . constant )		106830	0					
ANR	106860	Callee	Z_TYPE		106830	0					
ANR	106861	Identifier	Z_TYPE		106830	0					
ANR	106862	ArgumentList	name_node -> u . constant		106830	1					
ANR	106863	Argument	name_node -> u . constant		106830	0					
ANR	106864	MemberAccess	name_node -> u . constant		106830	0					
ANR	106865	PtrMemberAccess	name_node -> u		106830	0					
ANR	106866	Identifier	name_node		106830	0					
ANR	106867	Identifier	u		106830	1					
ANR	106868	Identifier	constant		106830	1					
ANR	106869	Identifier	IS_STRING		106830	1					
ANR	106870	CompoundStatement		5:2:162:209	106830	1					
ANR	106871	IdentifierDeclStatement	const char * colon ;	2859:2:82279:82296	106830	0	True				
ANR	106872	IdentifierDecl	* colon		106830	0					
ANR	106873	IdentifierDeclType	const char *		106830	0					
ANR	106874	Identifier	colon		106830	1					
ANR	106875	IdentifierDeclStatement	zend_string * str = Z_STR ( name_node -> u . constant ) ;	2860:2:82300:82347	106830	1	True				
ANR	106876	IdentifierDecl	* str = Z_STR ( name_node -> u . constant )		106830	0					
ANR	106877	IdentifierDeclType	zend_string *		106830	0					
ANR	106878	Identifier	str		106830	1					
ANR	106879	AssignmentExpression	* str = Z_STR ( name_node -> u . constant )		106830	2		=			
ANR	106880	Identifier	str		106830	0					
ANR	106881	CallExpression	Z_STR ( name_node -> u . constant )		106830	1					
ANR	106882	Callee	Z_STR		106830	0					
ANR	106883	Identifier	Z_STR		106830	0					
ANR	106884	ArgumentList	name_node -> u . constant		106830	1					
ANR	106885	Argument	name_node -> u . constant		106830	0					
ANR	106886	MemberAccess	name_node -> u . constant		106830	0					
ANR	106887	PtrMemberAccess	name_node -> u		106830	0					
ANR	106888	Identifier	name_node		106830	0					
ANR	106889	Identifier	u		106830	1					
ANR	106890	Identifier	constant		106830	1					
ANR	106891	IfStatement	"if ( ( colon = zend_memrchr ( ZSTR_VAL ( str ) , ':' , ZSTR_LEN ( str ) ) ) != NULL && colon > ZSTR_VAL ( str ) && * ( colon - 1 ) == ':' )"		106830	2					
ANR	106892	Condition	"( colon = zend_memrchr ( ZSTR_VAL ( str ) , ':' , ZSTR_LEN ( str ) ) ) != NULL && colon > ZSTR_VAL ( str ) && * ( colon - 1 ) == ':'"	2861:6:82355:82467	106830	0	True				
ANR	106893	AndExpression	"( colon = zend_memrchr ( ZSTR_VAL ( str ) , ':' , ZSTR_LEN ( str ) ) ) != NULL && colon > ZSTR_VAL ( str ) && * ( colon - 1 ) == ':'"		106830	0		&&			
ANR	106894	EqualityExpression	"( colon = zend_memrchr ( ZSTR_VAL ( str ) , ':' , ZSTR_LEN ( str ) ) ) != NULL"		106830	0		!=			
ANR	106895	AssignmentExpression	"colon = zend_memrchr ( ZSTR_VAL ( str ) , ':' , ZSTR_LEN ( str ) )"		106830	0		=			
ANR	106896	Identifier	colon		106830	0					
ANR	106897	CallExpression	"zend_memrchr ( ZSTR_VAL ( str ) , ':' , ZSTR_LEN ( str ) )"		106830	1					
ANR	106898	Callee	zend_memrchr		106830	0					
ANR	106899	Identifier	zend_memrchr		106830	0					
ANR	106900	ArgumentList	ZSTR_VAL ( str )		106830	1					
ANR	106901	Argument	ZSTR_VAL ( str )		106830	0					
ANR	106902	CallExpression	ZSTR_VAL ( str )		106830	0					
ANR	106903	Callee	ZSTR_VAL		106830	0					
ANR	106904	Identifier	ZSTR_VAL		106830	0					
ANR	106905	ArgumentList	str		106830	1					
ANR	106906	Argument	str		106830	0					
ANR	106907	Identifier	str		106830	0					
ANR	106908	Argument	':'		106830	1					
ANR	106909	PrimaryExpression	':'		106830	0					
ANR	106910	Argument	ZSTR_LEN ( str )		106830	2					
ANR	106911	CallExpression	ZSTR_LEN ( str )		106830	0					
ANR	106912	Callee	ZSTR_LEN		106830	0					
ANR	106913	Identifier	ZSTR_LEN		106830	0					
ANR	106914	ArgumentList	str		106830	1					
ANR	106915	Argument	str		106830	0					
ANR	106916	Identifier	str		106830	0					
ANR	106917	Identifier	NULL		106830	1					
ANR	106918	AndExpression	colon > ZSTR_VAL ( str ) && * ( colon - 1 ) == ':'		106830	1		&&			
ANR	106919	RelationalExpression	colon > ZSTR_VAL ( str )		106830	0		>			
ANR	106920	Identifier	colon		106830	0					
ANR	106921	CallExpression	ZSTR_VAL ( str )		106830	1					
ANR	106922	Callee	ZSTR_VAL		106830	0					
ANR	106923	Identifier	ZSTR_VAL		106830	0					
ANR	106924	ArgumentList	str		106830	1					
ANR	106925	Argument	str		106830	0					
ANR	106926	Identifier	str		106830	0					
ANR	106927	EqualityExpression	* ( colon - 1 ) == ':'		106830	1		==			
ANR	106928	UnaryOperationExpression	* ( colon - 1 )		106830	0					
ANR	106929	UnaryOperator	*		106830	0					
ANR	106930	AdditiveExpression	colon - 1		106830	1		-			
ANR	106931	Identifier	colon		106830	0					
ANR	106932	PrimaryExpression	1		106830	1					
ANR	106933	PrimaryExpression	':'		106830	1					
ANR	106934	CompoundStatement		8:3:424:521	106830	1					
ANR	106935	Statement	zend_string	2862:3:82475:82485	106830	0	True				
ANR	106936	Statement	*	2862:15:82487:82487	106830	1	True				
ANR	106937	Statement	class	2862:16:82488:82492	106830	2	True				
ANR	106938	Statement	=	2862:22:82494:82494	106830	3	True				
ANR	106939	ExpressionStatement	"zend_string_init ( ZSTR_VAL ( str ) , colon - ZSTR_VAL ( str ) - 1 , 0 )"	2862:24:82496:82557	106830	4	True				
ANR	106940	CallExpression	"zend_string_init ( ZSTR_VAL ( str ) , colon - ZSTR_VAL ( str ) - 1 , 0 )"		106830	0					
ANR	106941	Callee	zend_string_init		106830	0					
ANR	106942	Identifier	zend_string_init		106830	0					
ANR	106943	ArgumentList	ZSTR_VAL ( str )		106830	1					
ANR	106944	Argument	ZSTR_VAL ( str )		106830	0					
ANR	106945	CallExpression	ZSTR_VAL ( str )		106830	0					
ANR	106946	Callee	ZSTR_VAL		106830	0					
ANR	106947	Identifier	ZSTR_VAL		106830	0					
ANR	106948	ArgumentList	str		106830	1					
ANR	106949	Argument	str		106830	0					
ANR	106950	Identifier	str		106830	0					
ANR	106951	Argument	colon - ZSTR_VAL ( str ) - 1		106830	1					
ANR	106952	AdditiveExpression	colon - ZSTR_VAL ( str ) - 1		106830	0		-			
ANR	106953	Identifier	colon		106830	0					
ANR	106954	AdditiveExpression	ZSTR_VAL ( str ) - 1		106830	1		-			
ANR	106955	CallExpression	ZSTR_VAL ( str )		106830	0					
ANR	106956	Callee	ZSTR_VAL		106830	0					
ANR	106957	Identifier	ZSTR_VAL		106830	0					
ANR	106958	ArgumentList	str		106830	1					
ANR	106959	Argument	str		106830	0					
ANR	106960	Identifier	str		106830	0					
ANR	106961	PrimaryExpression	1		106830	1					
ANR	106962	Argument	0		106830	2					
ANR	106963	PrimaryExpression	0		106830	0					
ANR	106964	IdentifierDeclStatement	"zend_string * method = zend_string_init ( colon + 1 , ZSTR_LEN ( str ) - ( colon - ZSTR_VAL ( str ) ) - 1 , 0 ) ;"	2863:3:82562:82659	106830	5	True				
ANR	106965	IdentifierDecl	"* method = zend_string_init ( colon + 1 , ZSTR_LEN ( str ) - ( colon - ZSTR_VAL ( str ) ) - 1 , 0 )"		106830	0					
ANR	106966	IdentifierDeclType	zend_string *		106830	0					
ANR	106967	Identifier	method		106830	1					
ANR	106968	AssignmentExpression	"* method = zend_string_init ( colon + 1 , ZSTR_LEN ( str ) - ( colon - ZSTR_VAL ( str ) ) - 1 , 0 )"		106830	2		=			
ANR	106969	Identifier	method		106830	0					
ANR	106970	CallExpression	"zend_string_init ( colon + 1 , ZSTR_LEN ( str ) - ( colon - ZSTR_VAL ( str ) ) - 1 , 0 )"		106830	1					
ANR	106971	Callee	zend_string_init		106830	0					
ANR	106972	Identifier	zend_string_init		106830	0					
ANR	106973	ArgumentList	colon + 1		106830	1					
ANR	106974	Argument	colon + 1		106830	0					
ANR	106975	AdditiveExpression	colon + 1		106830	0		+			
ANR	106976	Identifier	colon		106830	0					
ANR	106977	PrimaryExpression	1		106830	1					
ANR	106978	Argument	ZSTR_LEN ( str ) - ( colon - ZSTR_VAL ( str ) ) - 1		106830	1					
ANR	106979	AdditiveExpression	ZSTR_LEN ( str ) - ( colon - ZSTR_VAL ( str ) ) - 1		106830	0		-			
ANR	106980	CallExpression	ZSTR_LEN ( str )		106830	0					
ANR	106981	Callee	ZSTR_LEN		106830	0					
ANR	106982	Identifier	ZSTR_LEN		106830	0					
ANR	106983	ArgumentList	str		106830	1					
ANR	106984	Argument	str		106830	0					
ANR	106985	Identifier	str		106830	0					
ANR	106986	AdditiveExpression	( colon - ZSTR_VAL ( str ) ) - 1		106830	1		-			
ANR	106987	AdditiveExpression	colon - ZSTR_VAL ( str )		106830	0		-			
ANR	106988	Identifier	colon		106830	0					
ANR	106989	CallExpression	ZSTR_VAL ( str )		106830	1					
ANR	106990	Callee	ZSTR_VAL		106830	0					
ANR	106991	Identifier	ZSTR_VAL		106830	0					
ANR	106992	ArgumentList	str		106830	1					
ANR	106993	Argument	str		106830	0					
ANR	106994	Identifier	str		106830	0					
ANR	106995	PrimaryExpression	1		106830	1					
ANR	106996	Argument	0		106830	2					
ANR	106997	PrimaryExpression	0		106830	0					
ANR	106998	ExpressionStatement	opline -> opcode = ZEND_INIT_STATIC_METHOD_CALL	2864:3:82664:82709	106830	6	True				
ANR	106999	AssignmentExpression	opline -> opcode = ZEND_INIT_STATIC_METHOD_CALL		106830	0		=			
ANR	107000	PtrMemberAccess	opline -> opcode		106830	0					
ANR	107001	Identifier	opline		106830	0					
ANR	107002	Identifier	opcode		106830	1					
ANR	107003	Identifier	ZEND_INIT_STATIC_METHOD_CALL		106830	1					
ANR	107004	ExpressionStatement	opline -> op1_type = IS_CONST	2865:3:82714:82741	106830	7	True				
ANR	107005	AssignmentExpression	opline -> op1_type = IS_CONST		106830	0		=			
ANR	107006	PtrMemberAccess	opline -> op1_type		106830	0					
ANR	107007	Identifier	opline		106830	0					
ANR	107008	Identifier	op1_type		106830	1					
ANR	107009	Identifier	IS_CONST		106830	1					
ANR	107010	Statement	opline	2866:3:82746:82751	106830	8	True				
ANR	107011	Statement	->	2866:9:82752:82753	106830	9	True				
ANR	107012	Statement	op1	2866:11:82754:82756	106830	10	True				
ANR	107013	Statement	.	2866:14:82757:82757	106830	11	True				
ANR	107014	Statement	constant	2866:15:82758:82765	106830	12	True				
ANR	107015	Statement	=	2866:24:82767:82767	106830	13	True				
ANR	107016	Statement	zend_add_class_name_literal	2866:26:82769:82795	106830	14	True				
ANR	107017	Statement	(	2866:53:82796:82796	106830	15	True				
ANR	107018	Statement	CG	2866:54:82797:82798	106830	16	True				
ANR	107019	Statement	(	2866:56:82799:82799	106830	17	True				
ANR	107020	Statement	active_op_array	2866:57:82800:82814	106830	18	True				
ANR	107021	Statement	)	2866:72:82815:82815	106830	19	True				
ANR	107022	Statement	","	2866:73:82816:82816	106830	20	True				
ANR	107023	Statement	class	2866:75:82818:82822	106830	21	True				
ANR	107024	Statement	)	2866:80:82823:82823	106830	22	True				
ANR	107025	ExpressionStatement		2866:81:82824:82824	106830	23	True				
ANR	107026	ExpressionStatement	opline -> op2_type = IS_CONST	2867:3:82829:82856	106830	24	True				
ANR	107027	AssignmentExpression	opline -> op2_type = IS_CONST		106830	0		=			
ANR	107028	PtrMemberAccess	opline -> op2_type		106830	0					
ANR	107029	Identifier	opline		106830	0					
ANR	107030	Identifier	op2_type		106830	1					
ANR	107031	Identifier	IS_CONST		106830	1					
ANR	107032	ExpressionStatement	"opline -> op2 . constant = zend_add_func_name_literal ( CG ( active_op_array ) , method )"	2868:3:82861:82939	106830	25	True				
ANR	107033	AssignmentExpression	"opline -> op2 . constant = zend_add_func_name_literal ( CG ( active_op_array ) , method )"		106830	0		=			
ANR	107034	MemberAccess	opline -> op2 . constant		106830	0					
ANR	107035	PtrMemberAccess	opline -> op2		106830	0					
ANR	107036	Identifier	opline		106830	0					
ANR	107037	Identifier	op2		106830	1					
ANR	107038	Identifier	constant		106830	1					
ANR	107039	CallExpression	"zend_add_func_name_literal ( CG ( active_op_array ) , method )"		106830	1					
ANR	107040	Callee	zend_add_func_name_literal		106830	0					
ANR	107041	Identifier	zend_add_func_name_literal		106830	0					
ANR	107042	ArgumentList	CG ( active_op_array )		106830	1					
ANR	107043	Argument	CG ( active_op_array )		106830	0					
ANR	107044	CallExpression	CG ( active_op_array )		106830	0					
ANR	107045	Callee	CG		106830	0					
ANR	107046	Identifier	CG		106830	0					
ANR	107047	ArgumentList	active_op_array		106830	1					
ANR	107048	Argument	active_op_array		106830	0					
ANR	107049	Identifier	active_op_array		106830	0					
ANR	107050	Argument	method		106830	1					
ANR	107051	Identifier	method		106830	0					
ANR	107052	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	2869:3:82944:82987	106830	26	True				
ANR	107053	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		106830	0					
ANR	107054	Callee	zend_alloc_cache_slot		106830	0					
ANR	107055	Identifier	zend_alloc_cache_slot		106830	0					
ANR	107056	ArgumentList	opline -> op2 . constant		106830	1					
ANR	107057	Argument	opline -> op2 . constant		106830	0					
ANR	107058	MemberAccess	opline -> op2 . constant		106830	0					
ANR	107059	PtrMemberAccess	opline -> op2		106830	0					
ANR	107060	Identifier	opline		106830	0					
ANR	107061	Identifier	op2		106830	1					
ANR	107062	Identifier	constant		106830	1					
ANR	107063	ExpressionStatement	zval_ptr_dtor ( & name_node -> u . constant )	2870:3:82992:83029	106830	27	True				
ANR	107064	CallExpression	zval_ptr_dtor ( & name_node -> u . constant )		106830	0					
ANR	107065	Callee	zval_ptr_dtor		106830	0					
ANR	107066	Identifier	zval_ptr_dtor		106830	0					
ANR	107067	ArgumentList	& name_node -> u . constant		106830	1					
ANR	107068	Argument	& name_node -> u . constant		106830	0					
ANR	107069	UnaryOperationExpression	& name_node -> u . constant		106830	0					
ANR	107070	UnaryOperator	&		106830	0					
ANR	107071	MemberAccess	name_node -> u . constant		106830	1					
ANR	107072	PtrMemberAccess	name_node -> u		106830	0					
ANR	107073	Identifier	name_node		106830	0					
ANR	107074	Identifier	u		106830	1					
ANR	107075	Identifier	constant		106830	1					
ANR	107076	ElseStatement	else		106830	0					
ANR	107077	CompoundStatement		16:9:902:902	106830	0					
ANR	107078	ExpressionStatement	opline -> opcode = ZEND_INIT_FCALL_BY_NAME	2872:3:83045:83085	106830	0	True				
ANR	107079	AssignmentExpression	opline -> opcode = ZEND_INIT_FCALL_BY_NAME		106830	0		=			
ANR	107080	PtrMemberAccess	opline -> opcode		106830	0					
ANR	107081	Identifier	opline		106830	0					
ANR	107082	Identifier	opcode		106830	1					
ANR	107083	Identifier	ZEND_INIT_FCALL_BY_NAME		106830	1					
ANR	107084	ExpressionStatement	SET_UNUSED ( opline -> op1 )	2873:3:83090:83113	106830	1	True				
ANR	107085	CallExpression	SET_UNUSED ( opline -> op1 )		106830	0					
ANR	107086	Callee	SET_UNUSED		106830	0					
ANR	107087	Identifier	SET_UNUSED		106830	0					
ANR	107088	ArgumentList	opline -> op1		106830	1					
ANR	107089	Argument	opline -> op1		106830	0					
ANR	107090	PtrMemberAccess	opline -> op1		106830	0					
ANR	107091	Identifier	opline		106830	0					
ANR	107092	Identifier	op1		106830	1					
ANR	107093	ExpressionStatement	opline -> op2_type = IS_CONST	2874:3:83118:83145	106830	2	True				
ANR	107094	AssignmentExpression	opline -> op2_type = IS_CONST		106830	0		=			
ANR	107095	PtrMemberAccess	opline -> op2_type		106830	0					
ANR	107096	Identifier	opline		106830	0					
ANR	107097	Identifier	op2_type		106830	1					
ANR	107098	Identifier	IS_CONST		106830	1					
ANR	107099	ExpressionStatement	"opline -> op2 . constant = zend_add_func_name_literal ( CG ( active_op_array ) , str )"	2875:3:83150:83225	106830	3	True				
ANR	107100	AssignmentExpression	"opline -> op2 . constant = zend_add_func_name_literal ( CG ( active_op_array ) , str )"		106830	0		=			
ANR	107101	MemberAccess	opline -> op2 . constant		106830	0					
ANR	107102	PtrMemberAccess	opline -> op2		106830	0					
ANR	107103	Identifier	opline		106830	0					
ANR	107104	Identifier	op2		106830	1					
ANR	107105	Identifier	constant		106830	1					
ANR	107106	CallExpression	"zend_add_func_name_literal ( CG ( active_op_array ) , str )"		106830	1					
ANR	107107	Callee	zend_add_func_name_literal		106830	0					
ANR	107108	Identifier	zend_add_func_name_literal		106830	0					
ANR	107109	ArgumentList	CG ( active_op_array )		106830	1					
ANR	107110	Argument	CG ( active_op_array )		106830	0					
ANR	107111	CallExpression	CG ( active_op_array )		106830	0					
ANR	107112	Callee	CG		106830	0					
ANR	107113	Identifier	CG		106830	0					
ANR	107114	ArgumentList	active_op_array		106830	1					
ANR	107115	Argument	active_op_array		106830	0					
ANR	107116	Identifier	active_op_array		106830	0					
ANR	107117	Argument	str		106830	1					
ANR	107118	Identifier	str		106830	0					
ANR	107119	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	2876:3:83230:83273	106830	4	True				
ANR	107120	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		106830	0					
ANR	107121	Callee	zend_alloc_cache_slot		106830	0					
ANR	107122	Identifier	zend_alloc_cache_slot		106830	0					
ANR	107123	ArgumentList	opline -> op2 . constant		106830	1					
ANR	107124	Argument	opline -> op2 . constant		106830	0					
ANR	107125	MemberAccess	opline -> op2 . constant		106830	0					
ANR	107126	PtrMemberAccess	opline -> op2		106830	0					
ANR	107127	Identifier	opline		106830	0					
ANR	107128	Identifier	op2		106830	1					
ANR	107129	Identifier	constant		106830	1					
ANR	107130	ElseStatement	else		106830	0					
ANR	107131	CompoundStatement		23:8:1149:1149	106830	0					
ANR	107132	ExpressionStatement	opline -> opcode = ZEND_INIT_DYNAMIC_CALL	2879:2:83291:83330	106830	0	True				
ANR	107133	AssignmentExpression	opline -> opcode = ZEND_INIT_DYNAMIC_CALL		106830	0		=			
ANR	107134	PtrMemberAccess	opline -> opcode		106830	0					
ANR	107135	Identifier	opline		106830	0					
ANR	107136	Identifier	opcode		106830	1					
ANR	107137	Identifier	ZEND_INIT_DYNAMIC_CALL		106830	1					
ANR	107138	ExpressionStatement	SET_UNUSED ( opline -> op1 )	2880:2:83334:83357	106830	1	True				
ANR	107139	CallExpression	SET_UNUSED ( opline -> op1 )		106830	0					
ANR	107140	Callee	SET_UNUSED		106830	0					
ANR	107141	Identifier	SET_UNUSED		106830	0					
ANR	107142	ArgumentList	opline -> op1		106830	1					
ANR	107143	Argument	opline -> op1		106830	0					
ANR	107144	PtrMemberAccess	opline -> op1		106830	0					
ANR	107145	Identifier	opline		106830	0					
ANR	107146	Identifier	op1		106830	1					
ANR	107147	ExpressionStatement	"SET_NODE ( opline -> op2 , name_node )"	2881:2:83361:83393	106830	2	True				
ANR	107148	CallExpression	"SET_NODE ( opline -> op2 , name_node )"		106830	0					
ANR	107149	Callee	SET_NODE		106830	0					
ANR	107150	Identifier	SET_NODE		106830	0					
ANR	107151	ArgumentList	opline -> op2		106830	1					
ANR	107152	Argument	opline -> op2		106830	0					
ANR	107153	PtrMemberAccess	opline -> op2		106830	0					
ANR	107154	Identifier	opline		106830	0					
ANR	107155	Identifier	op2		106830	1					
ANR	107156	Argument	name_node		106830	1					
ANR	107157	Identifier	name_node		106830	0					
ANR	107158	ExpressionStatement	"zend_compile_call_common ( result , args_ast , NULL )"	2884:1:83400:83448	106830	2	True				
ANR	107159	CallExpression	"zend_compile_call_common ( result , args_ast , NULL )"		106830	0					
ANR	107160	Callee	zend_compile_call_common		106830	0					
ANR	107161	Identifier	zend_compile_call_common		106830	0					
ANR	107162	ArgumentList	result		106830	1					
ANR	107163	Argument	result		106830	0					
ANR	107164	Identifier	result		106830	0					
ANR	107165	Argument	args_ast		106830	1					
ANR	107166	Identifier	args_ast		106830	0					
ANR	107167	Argument	NULL		106830	2					
ANR	107168	Identifier	NULL		106830	0					
ANR	107169	ReturnType	void		106830	1					
ANR	107170	Identifier	zend_compile_dynamic_call		106830	2					
ANR	107171	ParameterList	"znode * result , znode * name_node , zend_ast * args_ast"		106830	3					
ANR	107172	Parameter	znode * result	2855:31:82074:82086	106830	0	True				
ANR	107173	ParameterType	znode *		106830	0					
ANR	107174	Identifier	result		106830	1					
ANR	107175	Parameter	znode * name_node	2855:46:82089:82104	106830	1	True				
ANR	107176	ParameterType	znode *		106830	0					
ANR	107177	Identifier	name_node		106830	1					
ANR	107178	Parameter	zend_ast * args_ast	2855:64:82107:82124	106830	2	True				
ANR	107179	ParameterType	zend_ast *		106830	0					
ANR	107180	Identifier	args_ast		106830	1					
ANR	107181	CFGEntryNode	ENTRY		106830		True				
ANR	107182	CFGExitNode	EXIT		106830		True				
ANR	107183	Symbol	opline -> op1		106830						
ANR	107184	Symbol	opline -> op2		106830						
ANR	107185	Symbol	zend_add_func_name_literal		106830						
ANR	107186	Symbol	Z_TYPE		106830						
ANR	107187	Symbol	name_node -> u		106830						
ANR	107188	Symbol	Z_STR		106830						
ANR	107189	Symbol	result		106830						
ANR	107190	Symbol	zend_string_init		106830						
ANR	107191	Symbol	opline		106830						
ANR	107192	Symbol	* ( colon - 1 )		106830						
ANR	107193	Symbol	IS_STRING		106830						
ANR	107194	Symbol	zend_memrchr		106830						
ANR	107195	Symbol	IS_CONST		106830						
ANR	107196	Symbol	& name_node -> u . constant		106830						
ANR	107197	Symbol	ZEND_INIT_DYNAMIC_CALL		106830						
ANR	107198	Symbol	get_next_op		106830						
ANR	107199	Symbol	NULL		106830						
ANR	107200	Symbol	CG		106830						
ANR	107201	Symbol	method		106830						
ANR	107202	Symbol	active_op_array		106830						
ANR	107203	Symbol	* colon		106830						
ANR	107204	Symbol	opline -> op1_type		106830						
ANR	107205	Symbol	ZSTR_VAL		106830						
ANR	107206	Symbol	str		106830						
ANR	107207	Symbol	* opline		106830						
ANR	107208	Symbol	opline -> opcode		106830						
ANR	107209	Symbol	colon		106830						
ANR	107210	Symbol	ZSTR_LEN		106830						
ANR	107211	Symbol	opline -> op2 . constant		106830						
ANR	107212	Symbol	& name_node -> u		106830						
ANR	107213	Symbol	opline -> op2_type		106830						
ANR	107214	Symbol	args_ast		106830						
ANR	107215	Symbol	* name_node		106830						
ANR	107216	Symbol	name_node -> u . constant		106830						
ANR	107217	Symbol	name_node -> op_type		106830						
ANR	107218	Symbol	ZEND_INIT_STATIC_METHOD_CALL		106830						
ANR	107219	Symbol	name_node		106830						
ANR	107220	Symbol	ZEND_INIT_FCALL_BY_NAME		106830						
ANR	107221	Function	zend_args_contain_unpack	2888:0:83463:83671							
ANR	107222	FunctionDef	zend_args_contain_unpack (zend_ast_list * args)		107221	0					
ANR	107223	CompoundStatement		2889:0:83536:83671	107221	0					
ANR	107224	IdentifierDeclStatement	uint32_t i ;	2890:1:83539:83549	107221	0	True				
ANR	107225	IdentifierDecl	i		107221	0					
ANR	107226	IdentifierDeclType	uint32_t		107221	0					
ANR	107227	Identifier	i		107221	1					
ANR	107228	ForStatement	for ( i = 0 ; i < args -> children ; ++ i )		107221	1					
ANR	107229	ForInit	i = 0 ;	2891:6:83557:83562	107221	0	True				
ANR	107230	AssignmentExpression	i = 0		107221	0		=			
ANR	107231	Identifier	i		107221	0					
ANR	107232	PrimaryExpression	0		107221	1					
ANR	107233	Condition	i < args -> children	2891:13:83564:83581	107221	1	True				
ANR	107234	RelationalExpression	i < args -> children		107221	0		<			
ANR	107235	Identifier	i		107221	0					
ANR	107236	PtrMemberAccess	args -> children		107221	1					
ANR	107237	Identifier	args		107221	0					
ANR	107238	Identifier	children		107221	1					
ANR	107239	UnaryExpression	++ i	2891:33:83584:83586	107221	2	True				
ANR	107240	IncDec	++		107221	0					
ANR	107241	Identifier	i		107221	1					
ANR	107242	CompoundStatement		3:38:52:52	107221	3					
ANR	107243	IfStatement	if ( args -> child [ i ] -> kind == ZEND_AST_UNPACK )		107221	0					
ANR	107244	Condition	args -> child [ i ] -> kind == ZEND_AST_UNPACK	2892:6:83597:83635	107221	0	True				
ANR	107245	EqualityExpression	args -> child [ i ] -> kind == ZEND_AST_UNPACK		107221	0		==			
ANR	107246	PtrMemberAccess	args -> child [ i ] -> kind		107221	0					
ANR	107247	ArrayIndexing	args -> child [ i ]		107221	0					
ANR	107248	PtrMemberAccess	args -> child		107221	0					
ANR	107249	Identifier	args		107221	0					
ANR	107250	Identifier	child		107221	1					
ANR	107251	Identifier	i		107221	1					
ANR	107252	Identifier	kind		107221	1					
ANR	107253	Identifier	ZEND_AST_UNPACK		107221	1					
ANR	107254	CompoundStatement		4:47:101:101	107221	1					
ANR	107255	ReturnStatement	return 1 ;	2893:3:83643:83651	107221	0	True				
ANR	107256	PrimaryExpression	1		107221	0					
ANR	107257	ReturnStatement	return 0 ;	2896:1:83661:83669	107221	2	True				
ANR	107258	PrimaryExpression	0		107221	0					
ANR	107259	ReturnType	static zend_bool		107221	1					
ANR	107260	Identifier	zend_args_contain_unpack		107221	2					
ANR	107261	ParameterList	zend_ast_list * args		107221	3					
ANR	107262	Parameter	zend_ast_list * args	2888:42:83505:83523	107221	0	True				
ANR	107263	ParameterType	zend_ast_list *		107221	0					
ANR	107264	Identifier	args		107221	1					
ANR	107265	CFGEntryNode	ENTRY		107221		True				
ANR	107266	CFGExitNode	EXIT		107221		True				
ANR	107267	Symbol	* * i		107221						
ANR	107268	Symbol	ZEND_AST_UNPACK		107221						
ANR	107269	Symbol	* args -> child		107221						
ANR	107270	Symbol	i		107221						
ANR	107271	Symbol	* args		107221						
ANR	107272	Symbol	args		107221						
ANR	107273	Symbol	* * * args		107221						
ANR	107274	Symbol	args -> child [ i ] -> kind		107221						
ANR	107275	Symbol	* i		107221						
ANR	107276	Symbol	args -> child		107221						
ANR	107277	Symbol	args -> children		107221						
ANR	107278	Symbol	* * args		107221						
ANR	107279	Symbol	* * args -> child		107221						
ANR	107280	Function	zend_compile_func_strlen	2900:0:83684:84281							
ANR	107281	FunctionDef	"zend_compile_func_strlen (znode * result , zend_ast_list * args)"		107280	0					
ANR	107282	CompoundStatement		2901:0:83759:84281	107280	0					
ANR	107283	IdentifierDeclStatement	znode arg_node ;	2902:1:83762:83776	107280	0	True				
ANR	107284	IdentifierDecl	arg_node		107280	0					
ANR	107285	IdentifierDeclType	znode		107280	0					
ANR	107286	Identifier	arg_node		107280	1					
ANR	107287	IfStatement	if ( ( CG ( compiler_options ) & ZEND_COMPILE_NO_BUILTIN_STRLEN ) || args -> children != 1 || args -> child [ 0 ] -> kind == ZEND_AST_UNPACK )		107280	1					
ANR	107288	Condition	( CG ( compiler_options ) & ZEND_COMPILE_NO_BUILTIN_STRLEN ) || args -> children != 1 || args -> child [ 0 ] -> kind == ZEND_AST_UNPACK	2904:5:83784:83906	107280	0	True				
ANR	107289	OrExpression	( CG ( compiler_options ) & ZEND_COMPILE_NO_BUILTIN_STRLEN ) || args -> children != 1 || args -> child [ 0 ] -> kind == ZEND_AST_UNPACK		107280	0		||			
ANR	107290	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_NO_BUILTIN_STRLEN		107280	0		&			
ANR	107291	CallExpression	CG ( compiler_options )		107280	0					
ANR	107292	Callee	CG		107280	0					
ANR	107293	Identifier	CG		107280	0					
ANR	107294	ArgumentList	compiler_options		107280	1					
ANR	107295	Argument	compiler_options		107280	0					
ANR	107296	Identifier	compiler_options		107280	0					
ANR	107297	Identifier	ZEND_COMPILE_NO_BUILTIN_STRLEN		107280	1					
ANR	107298	OrExpression	args -> children != 1 || args -> child [ 0 ] -> kind == ZEND_AST_UNPACK		107280	1		||			
ANR	107299	EqualityExpression	args -> children != 1		107280	0		!=			
ANR	107300	PtrMemberAccess	args -> children		107280	0					
ANR	107301	Identifier	args		107280	0					
ANR	107302	Identifier	children		107280	1					
ANR	107303	PrimaryExpression	1		107280	1					
ANR	107304	EqualityExpression	args -> child [ 0 ] -> kind == ZEND_AST_UNPACK		107280	1		==			
ANR	107305	PtrMemberAccess	args -> child [ 0 ] -> kind		107280	0					
ANR	107306	ArrayIndexing	args -> child [ 0 ]		107280	0					
ANR	107307	PtrMemberAccess	args -> child		107280	0					
ANR	107308	Identifier	args		107280	0					
ANR	107309	Identifier	child		107280	1					
ANR	107310	PrimaryExpression	0		107280	1					
ANR	107311	Identifier	kind		107280	1					
ANR	107312	Identifier	ZEND_AST_UNPACK		107280	1					
ANR	107313	CompoundStatement		6:3:151:151	107280	1					
ANR	107314	ReturnStatement	return FAILURE ;	2907:2:83915:83929	107280	0	True				
ANR	107315	Identifier	FAILURE		107280	0					
ANR	107316	ExpressionStatement	"zend_compile_expr ( & arg_node , args -> child [ 0 ] )"	2910:1:83936:83980	107280	2	True				
ANR	107317	CallExpression	"zend_compile_expr ( & arg_node , args -> child [ 0 ] )"		107280	0					
ANR	107318	Callee	zend_compile_expr		107280	0					
ANR	107319	Identifier	zend_compile_expr		107280	0					
ANR	107320	ArgumentList	& arg_node		107280	1					
ANR	107321	Argument	& arg_node		107280	0					
ANR	107322	UnaryOperationExpression	& arg_node		107280	0					
ANR	107323	UnaryOperator	&		107280	0					
ANR	107324	Identifier	arg_node		107280	1					
ANR	107325	Argument	args -> child [ 0 ]		107280	1					
ANR	107326	ArrayIndexing	args -> child [ 0 ]		107280	0					
ANR	107327	PtrMemberAccess	args -> child		107280	0					
ANR	107328	Identifier	args		107280	0					
ANR	107329	Identifier	child		107280	1					
ANR	107330	PrimaryExpression	0		107280	1					
ANR	107331	IfStatement	if ( arg_node . op_type == IS_CONST && Z_TYPE ( arg_node . u . constant ) == IS_STRING )		107280	3					
ANR	107332	Condition	arg_node . op_type == IS_CONST && Z_TYPE ( arg_node . u . constant ) == IS_STRING	2911:5:83987:84058	107280	0	True				
ANR	107333	AndExpression	arg_node . op_type == IS_CONST && Z_TYPE ( arg_node . u . constant ) == IS_STRING		107280	0		&&			
ANR	107334	EqualityExpression	arg_node . op_type == IS_CONST		107280	0		==			
ANR	107335	MemberAccess	arg_node . op_type		107280	0					
ANR	107336	Identifier	arg_node		107280	0					
ANR	107337	Identifier	op_type		107280	1					
ANR	107338	Identifier	IS_CONST		107280	1					
ANR	107339	EqualityExpression	Z_TYPE ( arg_node . u . constant ) == IS_STRING		107280	1		==			
ANR	107340	CallExpression	Z_TYPE ( arg_node . u . constant )		107280	0					
ANR	107341	Callee	Z_TYPE		107280	0					
ANR	107342	Identifier	Z_TYPE		107280	0					
ANR	107343	ArgumentList	arg_node . u . constant		107280	1					
ANR	107344	Argument	arg_node . u . constant		107280	0					
ANR	107345	MemberAccess	arg_node . u . constant		107280	0					
ANR	107346	MemberAccess	arg_node . u		107280	0					
ANR	107347	Identifier	arg_node		107280	0					
ANR	107348	Identifier	u		107280	1					
ANR	107349	Identifier	constant		107280	1					
ANR	107350	Identifier	IS_STRING		107280	1					
ANR	107351	CompoundStatement		11:79:301:301	107280	1					
ANR	107352	ExpressionStatement	result -> op_type = IS_CONST	2912:2:84065:84091	107280	0	True				
ANR	107353	AssignmentExpression	result -> op_type = IS_CONST		107280	0		=			
ANR	107354	PtrMemberAccess	result -> op_type		107280	0					
ANR	107355	Identifier	result		107280	0					
ANR	107356	Identifier	op_type		107280	1					
ANR	107357	Identifier	IS_CONST		107280	1					
ANR	107358	ExpressionStatement	"ZVAL_LONG ( & result -> u . constant , Z_STRLEN ( arg_node . u . constant ) )"	2913:2:84095:84156	107280	1	True				
ANR	107359	CallExpression	"ZVAL_LONG ( & result -> u . constant , Z_STRLEN ( arg_node . u . constant ) )"		107280	0					
ANR	107360	Callee	ZVAL_LONG		107280	0					
ANR	107361	Identifier	ZVAL_LONG		107280	0					
ANR	107362	ArgumentList	& result -> u . constant		107280	1					
ANR	107363	Argument	& result -> u . constant		107280	0					
ANR	107364	UnaryOperationExpression	& result -> u . constant		107280	0					
ANR	107365	UnaryOperator	&		107280	0					
ANR	107366	MemberAccess	result -> u . constant		107280	1					
ANR	107367	PtrMemberAccess	result -> u		107280	0					
ANR	107368	Identifier	result		107280	0					
ANR	107369	Identifier	u		107280	1					
ANR	107370	Identifier	constant		107280	1					
ANR	107371	Argument	Z_STRLEN ( arg_node . u . constant )		107280	1					
ANR	107372	CallExpression	Z_STRLEN ( arg_node . u . constant )		107280	0					
ANR	107373	Callee	Z_STRLEN		107280	0					
ANR	107374	Identifier	Z_STRLEN		107280	0					
ANR	107375	ArgumentList	arg_node . u . constant		107280	1					
ANR	107376	Argument	arg_node . u . constant		107280	0					
ANR	107377	MemberAccess	arg_node . u . constant		107280	0					
ANR	107378	MemberAccess	arg_node . u		107280	0					
ANR	107379	Identifier	arg_node		107280	0					
ANR	107380	Identifier	u		107280	1					
ANR	107381	Identifier	constant		107280	1					
ANR	107382	ExpressionStatement	zval_dtor ( & arg_node . u . constant )	2914:2:84160:84191	107280	2	True				
ANR	107383	CallExpression	zval_dtor ( & arg_node . u . constant )		107280	0					
ANR	107384	Callee	zval_dtor		107280	0					
ANR	107385	Identifier	zval_dtor		107280	0					
ANR	107386	ArgumentList	& arg_node . u . constant		107280	1					
ANR	107387	Argument	& arg_node . u . constant		107280	0					
ANR	107388	UnaryOperationExpression	& arg_node . u . constant		107280	0					
ANR	107389	UnaryOperator	&		107280	0					
ANR	107390	MemberAccess	arg_node . u . constant		107280	1					
ANR	107391	MemberAccess	arg_node . u		107280	0					
ANR	107392	Identifier	arg_node		107280	0					
ANR	107393	Identifier	u		107280	1					
ANR	107394	Identifier	constant		107280	1					
ANR	107395	ElseStatement	else		107280	0					
ANR	107396	CompoundStatement		15:8:441:441	107280	0					
ANR	107397	ExpressionStatement	"zend_emit_op_tmp ( result , ZEND_STRLEN , & arg_node , NULL )"	2916:2:84205:84259	107280	0	True				
ANR	107398	CallExpression	"zend_emit_op_tmp ( result , ZEND_STRLEN , & arg_node , NULL )"		107280	0					
ANR	107399	Callee	zend_emit_op_tmp		107280	0					
ANR	107400	Identifier	zend_emit_op_tmp		107280	0					
ANR	107401	ArgumentList	result		107280	1					
ANR	107402	Argument	result		107280	0					
ANR	107403	Identifier	result		107280	0					
ANR	107404	Argument	ZEND_STRLEN		107280	1					
ANR	107405	Identifier	ZEND_STRLEN		107280	0					
ANR	107406	Argument	& arg_node		107280	2					
ANR	107407	UnaryOperationExpression	& arg_node		107280	0					
ANR	107408	UnaryOperator	&		107280	0					
ANR	107409	Identifier	arg_node		107280	1					
ANR	107410	Argument	NULL		107280	3					
ANR	107411	Identifier	NULL		107280	0					
ANR	107412	ReturnStatement	return SUCCESS ;	2918:1:84265:84279	107280	4	True				
ANR	107413	Identifier	SUCCESS		107280	0					
ANR	107414	ReturnType	int		107280	1					
ANR	107415	Identifier	zend_compile_func_strlen		107280	2					
ANR	107416	ParameterList	"znode * result , zend_ast_list * args"		107280	3					
ANR	107417	Parameter	znode * result	2900:29:83713:83725	107280	0	True				
ANR	107418	ParameterType	znode *		107280	0					
ANR	107419	Identifier	result		107280	1					
ANR	107420	Parameter	zend_ast_list * args	2900:44:83728:83746	107280	1	True				
ANR	107421	ParameterType	zend_ast_list *		107280	0					
ANR	107422	Identifier	args		107280	1					
ANR	107423	CFGEntryNode	ENTRY		107280		True				
ANR	107424	CFGExitNode	EXIT		107280		True				
ANR	107425	Symbol	arg_node		107280						
ANR	107426	Symbol	ZEND_AST_UNPACK		107280						
ANR	107427	Symbol	* args -> child		107280						
ANR	107428	Symbol	Z_TYPE		107280						
ANR	107429	Symbol	& arg_node . u . constant		107280						
ANR	107430	Symbol	Z_STRLEN		107280						
ANR	107431	Symbol	result -> op_type		107280						
ANR	107432	Symbol	result -> u		107280						
ANR	107433	Symbol	* args		107280						
ANR	107434	Symbol	result		107280						
ANR	107435	Symbol	* * * args		107280						
ANR	107436	Symbol	compiler_options		107280						
ANR	107437	Symbol	ZEND_COMPILE_NO_BUILTIN_STRLEN		107280						
ANR	107438	Symbol	* result		107280						
ANR	107439	Symbol	& arg_node . u		107280						
ANR	107440	Symbol	arg_node . op_type		107280						
ANR	107441	Symbol	ZEND_STRLEN		107280						
ANR	107442	Symbol	& result -> u . constant		107280						
ANR	107443	Symbol	IS_STRING		107280						
ANR	107444	Symbol	* * args		107280						
ANR	107445	Symbol	* * args -> child		107280						
ANR	107446	Symbol	arg_node . u		107280						
ANR	107447	Symbol	args -> child [ 0 ] -> kind		107280						
ANR	107448	Symbol	IS_CONST		107280						
ANR	107449	Symbol	NULL		107280						
ANR	107450	Symbol	SUCCESS		107280						
ANR	107451	Symbol	CG		107280						
ANR	107452	Symbol	& result -> u		107280						
ANR	107453	Symbol	FAILURE		107280						
ANR	107454	Symbol	arg_node . u . constant		107280						
ANR	107455	Symbol	args		107280						
ANR	107456	Symbol	args -> child		107280						
ANR	107457	Symbol	args -> children		107280						
ANR	107458	Symbol	& arg_node		107280						
ANR	107459	Function	zend_compile_func_typecheck	2922:0:84294:84684							
ANR	107460	FunctionDef	"zend_compile_func_typecheck (znode * result , zend_ast_list * args , uint32_t type)"		107459	0					
ANR	107461	CompoundStatement		2923:0:84387:84684	107459	0					
ANR	107462	IdentifierDeclStatement	znode arg_node ;	2924:1:84390:84404	107459	0	True				
ANR	107463	IdentifierDecl	arg_node		107459	0					
ANR	107464	IdentifierDeclType	znode		107459	0					
ANR	107465	Identifier	arg_node		107459	1					
ANR	107466	IdentifierDeclStatement	zend_op * opline ;	2925:1:84407:84422	107459	1	True				
ANR	107467	IdentifierDecl	* opline		107459	0					
ANR	107468	IdentifierDeclType	zend_op *		107459	0					
ANR	107469	Identifier	opline		107459	1					
ANR	107470	IfStatement	if ( args -> children != 1 || args -> child [ 0 ] -> kind == ZEND_AST_UNPACK )		107459	2					
ANR	107471	Condition	args -> children != 1 || args -> child [ 0 ] -> kind == ZEND_AST_UNPACK	2927:5:84430:84491	107459	0	True				
ANR	107472	OrExpression	args -> children != 1 || args -> child [ 0 ] -> kind == ZEND_AST_UNPACK		107459	0		||			
ANR	107473	EqualityExpression	args -> children != 1		107459	0		!=			
ANR	107474	PtrMemberAccess	args -> children		107459	0					
ANR	107475	Identifier	args		107459	0					
ANR	107476	Identifier	children		107459	1					
ANR	107477	PrimaryExpression	1		107459	1					
ANR	107478	EqualityExpression	args -> child [ 0 ] -> kind == ZEND_AST_UNPACK		107459	1		==			
ANR	107479	PtrMemberAccess	args -> child [ 0 ] -> kind		107459	0					
ANR	107480	ArrayIndexing	args -> child [ 0 ]		107459	0					
ANR	107481	PtrMemberAccess	args -> child		107459	0					
ANR	107482	Identifier	args		107459	0					
ANR	107483	Identifier	child		107459	1					
ANR	107484	PrimaryExpression	0		107459	1					
ANR	107485	Identifier	kind		107459	1					
ANR	107486	Identifier	ZEND_AST_UNPACK		107459	1					
ANR	107487	CompoundStatement		5:69:106:106	107459	1					
ANR	107488	ReturnStatement	return FAILURE ;	2928:2:84498:84512	107459	0	True				
ANR	107489	Identifier	FAILURE		107459	0					
ANR	107490	ExpressionStatement	"zend_compile_expr ( & arg_node , args -> child [ 0 ] )"	2931:1:84519:84563	107459	3	True				
ANR	107491	CallExpression	"zend_compile_expr ( & arg_node , args -> child [ 0 ] )"		107459	0					
ANR	107492	Callee	zend_compile_expr		107459	0					
ANR	107493	Identifier	zend_compile_expr		107459	0					
ANR	107494	ArgumentList	& arg_node		107459	1					
ANR	107495	Argument	& arg_node		107459	0					
ANR	107496	UnaryOperationExpression	& arg_node		107459	0					
ANR	107497	UnaryOperator	&		107459	0					
ANR	107498	Identifier	arg_node		107459	1					
ANR	107499	Argument	args -> child [ 0 ]		107459	1					
ANR	107500	ArrayIndexing	args -> child [ 0 ]		107459	0					
ANR	107501	PtrMemberAccess	args -> child		107459	0					
ANR	107502	Identifier	args		107459	0					
ANR	107503	Identifier	child		107459	1					
ANR	107504	PrimaryExpression	0		107459	1					
ANR	107505	ExpressionStatement	"opline = zend_emit_op_tmp ( result , ZEND_TYPE_CHECK , & arg_node , NULL )"	2932:1:84566:84633	107459	4	True				
ANR	107506	AssignmentExpression	"opline = zend_emit_op_tmp ( result , ZEND_TYPE_CHECK , & arg_node , NULL )"		107459	0		=			
ANR	107507	Identifier	opline		107459	0					
ANR	107508	CallExpression	"zend_emit_op_tmp ( result , ZEND_TYPE_CHECK , & arg_node , NULL )"		107459	1					
ANR	107509	Callee	zend_emit_op_tmp		107459	0					
ANR	107510	Identifier	zend_emit_op_tmp		107459	0					
ANR	107511	ArgumentList	result		107459	1					
ANR	107512	Argument	result		107459	0					
ANR	107513	Identifier	result		107459	0					
ANR	107514	Argument	ZEND_TYPE_CHECK		107459	1					
ANR	107515	Identifier	ZEND_TYPE_CHECK		107459	0					
ANR	107516	Argument	& arg_node		107459	2					
ANR	107517	UnaryOperationExpression	& arg_node		107459	0					
ANR	107518	UnaryOperator	&		107459	0					
ANR	107519	Identifier	arg_node		107459	1					
ANR	107520	Argument	NULL		107459	3					
ANR	107521	Identifier	NULL		107459	0					
ANR	107522	ExpressionStatement	opline -> extended_value = type	2933:1:84636:84665	107459	5	True				
ANR	107523	AssignmentExpression	opline -> extended_value = type		107459	0		=			
ANR	107524	PtrMemberAccess	opline -> extended_value		107459	0					
ANR	107525	Identifier	opline		107459	0					
ANR	107526	Identifier	extended_value		107459	1					
ANR	107527	Identifier	type		107459	1					
ANR	107528	ReturnStatement	return SUCCESS ;	2934:1:84668:84682	107459	6	True				
ANR	107529	Identifier	SUCCESS		107459	0					
ANR	107530	ReturnType	int		107459	1					
ANR	107531	Identifier	zend_compile_func_typecheck		107459	2					
ANR	107532	ParameterList	"znode * result , zend_ast_list * args , uint32_t type"		107459	3					
ANR	107533	Parameter	znode * result	2922:32:84326:84338	107459	0	True				
ANR	107534	ParameterType	znode *		107459	0					
ANR	107535	Identifier	result		107459	1					
ANR	107536	Parameter	zend_ast_list * args	2922:47:84341:84359	107459	1	True				
ANR	107537	ParameterType	zend_ast_list *		107459	0					
ANR	107538	Identifier	args		107459	1					
ANR	107539	Parameter	uint32_t type	2922:68:84362:84374	107459	2	True				
ANR	107540	ParameterType	uint32_t		107459	0					
ANR	107541	Identifier	type		107459	1					
ANR	107542	CFGEntryNode	ENTRY		107459		True				
ANR	107543	CFGExitNode	EXIT		107459		True				
ANR	107544	Symbol	args -> child [ 0 ] -> kind		107459						
ANR	107545	Symbol	zend_emit_op_tmp		107459						
ANR	107546	Symbol	arg_node		107459						
ANR	107547	Symbol	ZEND_TYPE_CHECK		107459						
ANR	107548	Symbol	NULL		107459						
ANR	107549	Symbol	SUCCESS		107459						
ANR	107550	Symbol	ZEND_AST_UNPACK		107459						
ANR	107551	Symbol	* args -> child		107459						
ANR	107552	Symbol	type		107459						
ANR	107553	Symbol	FAILURE		107459						
ANR	107554	Symbol	opline -> extended_value		107459						
ANR	107555	Symbol	* args		107459						
ANR	107556	Symbol	result		107459						
ANR	107557	Symbol	args		107459						
ANR	107558	Symbol	* * * args		107459						
ANR	107559	Symbol	opline		107459						
ANR	107560	Symbol	* opline		107459						
ANR	107561	Symbol	args -> child		107459						
ANR	107562	Symbol	args -> children		107459						
ANR	107563	Symbol	& arg_node		107459						
ANR	107564	Symbol	* * args		107459						
ANR	107565	Symbol	* * args -> child		107459						
ANR	107566	Function	zend_compile_func_defined	2938:0:84697:85510							
ANR	107567	FunctionDef	"zend_compile_func_defined (znode * result , zend_ast_list * args)"		107566	0					
ANR	107568	CompoundStatement		2939:0:84773:85510	107566	0					
ANR	107569	IdentifierDeclStatement	zend_string * name ;	2940:1:84776:84793	107566	0	True				
ANR	107570	IdentifierDecl	* name		107566	0					
ANR	107571	IdentifierDeclType	zend_string *		107566	0					
ANR	107572	Identifier	name		107566	1					
ANR	107573	IdentifierDeclStatement	zend_op * opline ;	2941:1:84796:84811	107566	1	True				
ANR	107574	IdentifierDecl	* opline		107566	0					
ANR	107575	IdentifierDeclType	zend_op *		107566	0					
ANR	107576	Identifier	opline		107566	1					
ANR	107577	IfStatement	if ( args -> children != 1 || args -> child [ 0 ] -> kind != ZEND_AST_ZVAL )		107566	2					
ANR	107578	Condition	args -> children != 1 || args -> child [ 0 ] -> kind != ZEND_AST_ZVAL	2943:5:84819:84878	107566	0	True				
ANR	107579	OrExpression	args -> children != 1 || args -> child [ 0 ] -> kind != ZEND_AST_ZVAL		107566	0		||			
ANR	107580	EqualityExpression	args -> children != 1		107566	0		!=			
ANR	107581	PtrMemberAccess	args -> children		107566	0					
ANR	107582	Identifier	args		107566	0					
ANR	107583	Identifier	children		107566	1					
ANR	107584	PrimaryExpression	1		107566	1					
ANR	107585	EqualityExpression	args -> child [ 0 ] -> kind != ZEND_AST_ZVAL		107566	1		!=			
ANR	107586	PtrMemberAccess	args -> child [ 0 ] -> kind		107566	0					
ANR	107587	ArrayIndexing	args -> child [ 0 ]		107566	0					
ANR	107588	PtrMemberAccess	args -> child		107566	0					
ANR	107589	Identifier	args		107566	0					
ANR	107590	Identifier	child		107566	1					
ANR	107591	PrimaryExpression	0		107566	1					
ANR	107592	Identifier	kind		107566	1					
ANR	107593	Identifier	ZEND_AST_ZVAL		107566	1					
ANR	107594	CompoundStatement		5:67:107:107	107566	1					
ANR	107595	ReturnStatement	return FAILURE ;	2944:2:84885:84899	107566	0	True				
ANR	107596	Identifier	FAILURE		107566	0					
ANR	107597	ExpressionStatement	name = zval_get_string ( zend_ast_get_zval ( args -> child [ 0 ] ) )	2947:1:84906:84963	107566	3	True				
ANR	107598	AssignmentExpression	name = zval_get_string ( zend_ast_get_zval ( args -> child [ 0 ] ) )		107566	0		=			
ANR	107599	Identifier	name		107566	0					
ANR	107600	CallExpression	zval_get_string ( zend_ast_get_zval ( args -> child [ 0 ] ) )		107566	1					
ANR	107601	Callee	zval_get_string		107566	0					
ANR	107602	Identifier	zval_get_string		107566	0					
ANR	107603	ArgumentList	zend_ast_get_zval ( args -> child [ 0 ] )		107566	1					
ANR	107604	Argument	zend_ast_get_zval ( args -> child [ 0 ] )		107566	0					
ANR	107605	CallExpression	zend_ast_get_zval ( args -> child [ 0 ] )		107566	0					
ANR	107606	Callee	zend_ast_get_zval		107566	0					
ANR	107607	Identifier	zend_ast_get_zval		107566	0					
ANR	107608	ArgumentList	args -> child [ 0 ]		107566	1					
ANR	107609	Argument	args -> child [ 0 ]		107566	0					
ANR	107610	ArrayIndexing	args -> child [ 0 ]		107566	0					
ANR	107611	PtrMemberAccess	args -> child		107566	0					
ANR	107612	Identifier	args		107566	0					
ANR	107613	Identifier	child		107566	1					
ANR	107614	PrimaryExpression	0		107566	1					
ANR	107615	IfStatement	"if ( zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) ) || zend_memrchr ( ZSTR_VAL ( name ) , ':' , ZSTR_LEN ( name ) ) )"		107566	4					
ANR	107616	Condition	"zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) ) || zend_memrchr ( ZSTR_VAL ( name ) , ':' , ZSTR_LEN ( name ) )"	2948:5:84970:85072	107566	0	True				
ANR	107617	OrExpression	"zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) ) || zend_memrchr ( ZSTR_VAL ( name ) , ':' , ZSTR_LEN ( name ) )"		107566	0		||			
ANR	107618	CallExpression	"zend_memrchr ( ZSTR_VAL ( name ) , '\\\\' , ZSTR_LEN ( name ) )"		107566	0					
ANR	107619	Callee	zend_memrchr		107566	0					
ANR	107620	Identifier	zend_memrchr		107566	0					
ANR	107621	ArgumentList	ZSTR_VAL ( name )		107566	1					
ANR	107622	Argument	ZSTR_VAL ( name )		107566	0					
ANR	107623	CallExpression	ZSTR_VAL ( name )		107566	0					
ANR	107624	Callee	ZSTR_VAL		107566	0					
ANR	107625	Identifier	ZSTR_VAL		107566	0					
ANR	107626	ArgumentList	name		107566	1					
ANR	107627	Argument	name		107566	0					
ANR	107628	Identifier	name		107566	0					
ANR	107629	Argument	'\\\\'		107566	1					
ANR	107630	PrimaryExpression	'\\\\'		107566	0					
ANR	107631	Argument	ZSTR_LEN ( name )		107566	2					
ANR	107632	CallExpression	ZSTR_LEN ( name )		107566	0					
ANR	107633	Callee	ZSTR_LEN		107566	0					
ANR	107634	Identifier	ZSTR_LEN		107566	0					
ANR	107635	ArgumentList	name		107566	1					
ANR	107636	Argument	name		107566	0					
ANR	107637	Identifier	name		107566	0					
ANR	107638	CallExpression	"zend_memrchr ( ZSTR_VAL ( name ) , ':' , ZSTR_LEN ( name ) )"		107566	1					
ANR	107639	Callee	zend_memrchr		107566	0					
ANR	107640	Identifier	zend_memrchr		107566	0					
ANR	107641	ArgumentList	ZSTR_VAL ( name )		107566	1					
ANR	107642	Argument	ZSTR_VAL ( name )		107566	0					
ANR	107643	CallExpression	ZSTR_VAL ( name )		107566	0					
ANR	107644	Callee	ZSTR_VAL		107566	0					
ANR	107645	Identifier	ZSTR_VAL		107566	0					
ANR	107646	ArgumentList	name		107566	1					
ANR	107647	Argument	name		107566	0					
ANR	107648	Identifier	name		107566	0					
ANR	107649	Argument	':'		107566	1					
ANR	107650	PrimaryExpression	':'		107566	0					
ANR	107651	Argument	ZSTR_LEN ( name )		107566	2					
ANR	107652	CallExpression	ZSTR_LEN ( name )		107566	0					
ANR	107653	Callee	ZSTR_LEN		107566	0					
ANR	107654	Identifier	ZSTR_LEN		107566	0					
ANR	107655	ArgumentList	name		107566	1					
ANR	107656	Argument	name		107566	0					
ANR	107657	Identifier	name		107566	0					
ANR	107658	CompoundStatement		10:110:301:301	107566	1					
ANR	107659	ExpressionStatement	zend_string_release ( name )	2949:2:85079:85104	107566	0	True				
ANR	107660	CallExpression	zend_string_release ( name )		107566	0					
ANR	107661	Callee	zend_string_release		107566	0					
ANR	107662	Identifier	zend_string_release		107566	0					
ANR	107663	ArgumentList	name		107566	1					
ANR	107664	Argument	name		107566	0					
ANR	107665	Identifier	name		107566	0					
ANR	107666	ReturnStatement	return FAILURE ;	2950:2:85108:85122	107566	1	True				
ANR	107667	Identifier	FAILURE		107566	0					
ANR	107668	ExpressionStatement	"opline = zend_emit_op_tmp ( result , ZEND_DEFINED , NULL , NULL )"	2953:1:85129:85188	107566	5	True				
ANR	107669	AssignmentExpression	"opline = zend_emit_op_tmp ( result , ZEND_DEFINED , NULL , NULL )"		107566	0		=			
ANR	107670	Identifier	opline		107566	0					
ANR	107671	CallExpression	"zend_emit_op_tmp ( result , ZEND_DEFINED , NULL , NULL )"		107566	1					
ANR	107672	Callee	zend_emit_op_tmp		107566	0					
ANR	107673	Identifier	zend_emit_op_tmp		107566	0					
ANR	107674	ArgumentList	result		107566	1					
ANR	107675	Argument	result		107566	0					
ANR	107676	Identifier	result		107566	0					
ANR	107677	Argument	ZEND_DEFINED		107566	1					
ANR	107678	Identifier	ZEND_DEFINED		107566	0					
ANR	107679	Argument	NULL		107566	2					
ANR	107680	Identifier	NULL		107566	0					
ANR	107681	Argument	NULL		107566	3					
ANR	107682	Identifier	NULL		107566	0					
ANR	107683	ExpressionStatement	opline -> op1_type = IS_CONST	2954:1:85191:85218	107566	6	True				
ANR	107684	AssignmentExpression	opline -> op1_type = IS_CONST		107566	0		=			
ANR	107685	PtrMemberAccess	opline -> op1_type		107566	0					
ANR	107686	Identifier	opline		107566	0					
ANR	107687	Identifier	op1_type		107566	1					
ANR	107688	Identifier	IS_CONST		107566	1					
ANR	107689	ExpressionStatement	"LITERAL_STR ( opline -> op1 , name )"	2955:1:85221:85251	107566	7	True				
ANR	107690	CallExpression	"LITERAL_STR ( opline -> op1 , name )"		107566	0					
ANR	107691	Callee	LITERAL_STR		107566	0					
ANR	107692	Identifier	LITERAL_STR		107566	0					
ANR	107693	ArgumentList	opline -> op1		107566	1					
ANR	107694	Argument	opline -> op1		107566	0					
ANR	107695	PtrMemberAccess	opline -> op1		107566	0					
ANR	107696	Identifier	opline		107566	0					
ANR	107697	Identifier	op1		107566	1					
ANR	107698	Argument	name		107566	1					
ANR	107699	Identifier	name		107566	0					
ANR	107700	ExpressionStatement	zend_alloc_cache_slot ( opline -> op1 . constant )	2956:1:85254:85297	107566	8	True				
ANR	107701	CallExpression	zend_alloc_cache_slot ( opline -> op1 . constant )		107566	0					
ANR	107702	Callee	zend_alloc_cache_slot		107566	0					
ANR	107703	Identifier	zend_alloc_cache_slot		107566	0					
ANR	107704	ArgumentList	opline -> op1 . constant		107566	1					
ANR	107705	Argument	opline -> op1 . constant		107566	0					
ANR	107706	MemberAccess	opline -> op1 . constant		107566	0					
ANR	107707	PtrMemberAccess	opline -> op1		107566	0					
ANR	107708	Identifier	opline		107566	0					
ANR	107709	Identifier	op1		107566	1					
ANR	107710	Identifier	constant		107566	1					
ANR	107711	CompoundStatement		23:2:594:641	107566	9					
ANR	107712	IdentifierDeclStatement	zval c ;	2960:2:85358:85364	107566	0	True				
ANR	107713	IdentifierDecl	c		107566	0					
ANR	107714	IdentifierDeclType	zval		107566	0					
ANR	107715	Identifier	c		107566	1					
ANR	107716	IdentifierDeclStatement	zend_string * lcname = zend_string_tolower ( name ) ;	2961:2:85368:85415	107566	1	True				
ANR	107717	IdentifierDecl	* lcname = zend_string_tolower ( name )		107566	0					
ANR	107718	IdentifierDeclType	zend_string *		107566	0					
ANR	107719	Identifier	lcname		107566	1					
ANR	107720	AssignmentExpression	* lcname = zend_string_tolower ( name )		107566	2		=			
ANR	107721	Identifier	lcname		107566	0					
ANR	107722	CallExpression	zend_string_tolower ( name )		107566	1					
ANR	107723	Callee	zend_string_tolower		107566	0					
ANR	107724	Identifier	zend_string_tolower		107566	0					
ANR	107725	ArgumentList	name		107566	1					
ANR	107726	Argument	name		107566	0					
ANR	107727	Identifier	name		107566	0					
ANR	107728	ExpressionStatement	"ZVAL_NEW_STR ( & c , lcname )"	2962:2:85419:85443	107566	2	True				
ANR	107729	CallExpression	"ZVAL_NEW_STR ( & c , lcname )"		107566	0					
ANR	107730	Callee	ZVAL_NEW_STR		107566	0					
ANR	107731	Identifier	ZVAL_NEW_STR		107566	0					
ANR	107732	ArgumentList	& c		107566	1					
ANR	107733	Argument	& c		107566	0					
ANR	107734	UnaryOperationExpression	& c		107566	0					
ANR	107735	UnaryOperator	&		107566	0					
ANR	107736	Identifier	c		107566	1					
ANR	107737	Argument	lcname		107566	1					
ANR	107738	Identifier	lcname		107566	0					
ANR	107739	ExpressionStatement	"zend_add_literal ( CG ( active_op_array ) , & c )"	2963:2:85447:85488	107566	3	True				
ANR	107740	CallExpression	"zend_add_literal ( CG ( active_op_array ) , & c )"		107566	0					
ANR	107741	Callee	zend_add_literal		107566	0					
ANR	107742	Identifier	zend_add_literal		107566	0					
ANR	107743	ArgumentList	CG ( active_op_array )		107566	1					
ANR	107744	Argument	CG ( active_op_array )		107566	0					
ANR	107745	CallExpression	CG ( active_op_array )		107566	0					
ANR	107746	Callee	CG		107566	0					
ANR	107747	Identifier	CG		107566	0					
ANR	107748	ArgumentList	active_op_array		107566	1					
ANR	107749	Argument	active_op_array		107566	0					
ANR	107750	Identifier	active_op_array		107566	0					
ANR	107751	Argument	& c		107566	1					
ANR	107752	UnaryOperationExpression	& c		107566	0					
ANR	107753	UnaryOperator	&		107566	0					
ANR	107754	Identifier	c		107566	1					
ANR	107755	ReturnStatement	return SUCCESS ;	2965:1:85494:85508	107566	10	True				
ANR	107756	Identifier	SUCCESS		107566	0					
ANR	107757	ReturnType	int		107566	1					
ANR	107758	Identifier	zend_compile_func_defined		107566	2					
ANR	107759	ParameterList	"znode * result , zend_ast_list * args"		107566	3					
ANR	107760	Parameter	znode * result	2938:30:84727:84739	107566	0	True				
ANR	107761	ParameterType	znode *		107566	0					
ANR	107762	Identifier	result		107566	1					
ANR	107763	Parameter	zend_ast_list * args	2938:45:84742:84760	107566	1	True				
ANR	107764	ParameterType	zend_ast_list *		107566	0					
ANR	107765	Identifier	args		107566	1					
ANR	107766	CFGEntryNode	ENTRY		107566		True				
ANR	107767	CFGExitNode	EXIT		107566		True				
ANR	107768	Symbol	opline -> op1		107566						
ANR	107769	Symbol	zend_emit_op_tmp		107566						
ANR	107770	Symbol	* args -> child		107566						
ANR	107771	Symbol	zend_string_tolower		107566						
ANR	107772	Symbol	* args		107566						
ANR	107773	Symbol	result		107566						
ANR	107774	Symbol	* * * args		107566						
ANR	107775	Symbol	opline		107566						
ANR	107776	Symbol	ZEND_DEFINED		107566						
ANR	107777	Symbol	opline -> op1 . constant		107566						
ANR	107778	Symbol	ZEND_AST_ZVAL		107566						
ANR	107779	Symbol	* * args		107566						
ANR	107780	Symbol	* * args -> child		107566						
ANR	107781	Symbol	args -> child [ 0 ] -> kind		107566						
ANR	107782	Symbol	zend_memrchr		107566						
ANR	107783	Symbol	IS_CONST		107566						
ANR	107784	Symbol	NULL		107566						
ANR	107785	Symbol	c		107566						
ANR	107786	Symbol	SUCCESS		107566						
ANR	107787	Symbol	CG		107566						
ANR	107788	Symbol	active_op_array		107566						
ANR	107789	Symbol	zval_get_string		107566						
ANR	107790	Symbol	& c		107566						
ANR	107791	Symbol	FAILURE		107566						
ANR	107792	Symbol	opline -> op1_type		107566						
ANR	107793	Symbol	ZSTR_VAL		107566						
ANR	107794	Symbol	args		107566						
ANR	107795	Symbol	lcname		107566						
ANR	107796	Symbol	* opline		107566						
ANR	107797	Symbol	args -> child		107566						
ANR	107798	Symbol	args -> children		107566						
ANR	107799	Symbol	name		107566						
ANR	107800	Symbol	ZSTR_LEN		107566						
ANR	107801	Symbol	zend_ast_get_zval		107566						
ANR	107802	Function	zend_try_compile_ct_bound_init_user_func	2969:0:85523:86503							
ANR	107803	FunctionDef	"zend_try_compile_ct_bound_init_user_func (zend_ast * name_ast , uint32_t num_args)"		107802	0					
ANR	107804	CompoundStatement		2970:0:85624:86503	107802	0					
ANR	107805	IdentifierDeclStatement	"zend_string * name , * lcname ;"	2971:1:85627:85653	107802	0	True				
ANR	107806	IdentifierDecl	* name		107802	0					
ANR	107807	IdentifierDeclType	zend_string *		107802	0					
ANR	107808	Identifier	name		107802	1					
ANR	107809	IdentifierDecl	* lcname		107802	1					
ANR	107810	IdentifierDeclType	zend_string *		107802	0					
ANR	107811	Identifier	lcname		107802	1					
ANR	107812	IdentifierDeclStatement	zend_function * fbc ;	2972:1:85656:85674	107802	1	True				
ANR	107813	IdentifierDecl	* fbc		107802	0					
ANR	107814	IdentifierDeclType	zend_function *		107802	0					
ANR	107815	Identifier	fbc		107802	1					
ANR	107816	IdentifierDeclStatement	zend_op * opline ;	2973:1:85677:85692	107802	2	True				
ANR	107817	IdentifierDecl	* opline		107802	0					
ANR	107818	IdentifierDeclType	zend_op *		107802	0					
ANR	107819	Identifier	opline		107802	1					
ANR	107820	IfStatement	if ( name_ast -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( name_ast ) ) != IS_STRING )		107802	3					
ANR	107821	Condition	name_ast -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( name_ast ) ) != IS_STRING	2975:5:85700:85784	107802	0	True				
ANR	107822	OrExpression	name_ast -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( name_ast ) ) != IS_STRING		107802	0		||			
ANR	107823	EqualityExpression	name_ast -> kind != ZEND_AST_ZVAL		107802	0		!=			
ANR	107824	PtrMemberAccess	name_ast -> kind		107802	0					
ANR	107825	Identifier	name_ast		107802	0					
ANR	107826	Identifier	kind		107802	1					
ANR	107827	Identifier	ZEND_AST_ZVAL		107802	1					
ANR	107828	EqualityExpression	Z_TYPE_P ( zend_ast_get_zval ( name_ast ) ) != IS_STRING		107802	1		!=			
ANR	107829	CallExpression	Z_TYPE_P ( zend_ast_get_zval ( name_ast ) )		107802	0					
ANR	107830	Callee	Z_TYPE_P		107802	0					
ANR	107831	Identifier	Z_TYPE_P		107802	0					
ANR	107832	ArgumentList	zend_ast_get_zval ( name_ast )		107802	1					
ANR	107833	Argument	zend_ast_get_zval ( name_ast )		107802	0					
ANR	107834	CallExpression	zend_ast_get_zval ( name_ast )		107802	0					
ANR	107835	Callee	zend_ast_get_zval		107802	0					
ANR	107836	Identifier	zend_ast_get_zval		107802	0					
ANR	107837	ArgumentList	name_ast		107802	1					
ANR	107838	Argument	name_ast		107802	0					
ANR	107839	Identifier	name_ast		107802	0					
ANR	107840	Identifier	IS_STRING		107802	1					
ANR	107841	CompoundStatement		6:92:162:162	107802	1					
ANR	107842	ReturnStatement	return FAILURE ;	2976:2:85791:85805	107802	0	True				
ANR	107843	Identifier	FAILURE		107802	0					
ANR	107844	ExpressionStatement	name = zend_ast_get_str ( name_ast )	2979:1:85812:85845	107802	4	True				
ANR	107845	AssignmentExpression	name = zend_ast_get_str ( name_ast )		107802	0		=			
ANR	107846	Identifier	name		107802	0					
ANR	107847	CallExpression	zend_ast_get_str ( name_ast )		107802	1					
ANR	107848	Callee	zend_ast_get_str		107802	0					
ANR	107849	Identifier	zend_ast_get_str		107802	0					
ANR	107850	ArgumentList	name_ast		107802	1					
ANR	107851	Argument	name_ast		107802	0					
ANR	107852	Identifier	name_ast		107802	0					
ANR	107853	ExpressionStatement	lcname = zend_string_tolower ( name )	2980:1:85848:85882	107802	5	True				
ANR	107854	AssignmentExpression	lcname = zend_string_tolower ( name )		107802	0		=			
ANR	107855	Identifier	lcname		107802	0					
ANR	107856	CallExpression	zend_string_tolower ( name )		107802	1					
ANR	107857	Callee	zend_string_tolower		107802	0					
ANR	107858	Identifier	zend_string_tolower		107802	0					
ANR	107859	ArgumentList	name		107802	1					
ANR	107860	Argument	name		107802	0					
ANR	107861	Identifier	name		107802	0					
ANR	107862	ExpressionStatement	"fbc = zend_hash_find_ptr ( CG ( function_table ) , lcname )"	2982:1:85886:85938	107802	6	True				
ANR	107863	AssignmentExpression	"fbc = zend_hash_find_ptr ( CG ( function_table ) , lcname )"		107802	0		=			
ANR	107864	Identifier	fbc		107802	0					
ANR	107865	CallExpression	"zend_hash_find_ptr ( CG ( function_table ) , lcname )"		107802	1					
ANR	107866	Callee	zend_hash_find_ptr		107802	0					
ANR	107867	Identifier	zend_hash_find_ptr		107802	0					
ANR	107868	ArgumentList	CG ( function_table )		107802	1					
ANR	107869	Argument	CG ( function_table )		107802	0					
ANR	107870	CallExpression	CG ( function_table )		107802	0					
ANR	107871	Callee	CG		107802	0					
ANR	107872	Identifier	CG		107802	0					
ANR	107873	ArgumentList	function_table		107802	1					
ANR	107874	Argument	function_table		107802	0					
ANR	107875	Identifier	function_table		107802	0					
ANR	107876	Argument	lcname		107802	1					
ANR	107877	Identifier	lcname		107802	0					
ANR	107878	IfStatement	if ( ! fbc || ( fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) ) || ( fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS ) ) )		107802	7					
ANR	107879	Condition	! fbc || ( fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) ) || ( fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS ) )	2983:5:85945:86160	107802	0	True				
ANR	107880	OrExpression	! fbc || ( fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) ) || ( fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS ) )		107802	0		||			
ANR	107881	UnaryOperationExpression	! fbc		107802	0					
ANR	107882	UnaryOperator	!		107802	0					
ANR	107883	Identifier	fbc		107802	1					
ANR	107884	OrExpression	( fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) ) || ( fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS ) )		107802	1		||			
ANR	107885	AndExpression	fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS )		107802	0		&&			
ANR	107886	EqualityExpression	fbc -> type == ZEND_INTERNAL_FUNCTION		107802	0		==			
ANR	107887	PtrMemberAccess	fbc -> type		107802	0					
ANR	107888	Identifier	fbc		107802	0					
ANR	107889	Identifier	type		107802	1					
ANR	107890	Identifier	ZEND_INTERNAL_FUNCTION		107802	1					
ANR	107891	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS		107802	1		&			
ANR	107892	CallExpression	CG ( compiler_options )		107802	0					
ANR	107893	Callee	CG		107802	0					
ANR	107894	Identifier	CG		107802	0					
ANR	107895	ArgumentList	compiler_options		107802	1					
ANR	107896	Argument	compiler_options		107802	0					
ANR	107897	Identifier	compiler_options		107802	0					
ANR	107898	Identifier	ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS		107802	1					
ANR	107899	AndExpression	fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS )		107802	1		&&			
ANR	107900	EqualityExpression	fbc -> type == ZEND_USER_FUNCTION		107802	0		==			
ANR	107901	PtrMemberAccess	fbc -> type		107802	0					
ANR	107902	Identifier	fbc		107802	0					
ANR	107903	Identifier	type		107802	1					
ANR	107904	Identifier	ZEND_USER_FUNCTION		107802	1					
ANR	107905	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS		107802	1		&			
ANR	107906	CallExpression	CG ( compiler_options )		107802	0					
ANR	107907	Callee	CG		107802	0					
ANR	107908	Identifier	CG		107802	0					
ANR	107909	ArgumentList	compiler_options		107802	1					
ANR	107910	Argument	compiler_options		107802	0					
ANR	107911	Identifier	compiler_options		107802	0					
ANR	107912	Identifier	ZEND_COMPILE_IGNORE_USER_FUNCTIONS		107802	1					
ANR	107913	CompoundStatement		17:3:540:540	107802	1					
ANR	107914	ExpressionStatement	zend_string_release ( lcname )	2987:2:86169:86196	107802	0	True				
ANR	107915	CallExpression	zend_string_release ( lcname )		107802	0					
ANR	107916	Callee	zend_string_release		107802	0					
ANR	107917	Identifier	zend_string_release		107802	0					
ANR	107918	ArgumentList	lcname		107802	1					
ANR	107919	Argument	lcname		107802	0					
ANR	107920	Identifier	lcname		107802	0					
ANR	107921	ReturnStatement	return FAILURE ;	2988:2:86200:86214	107802	1	True				
ANR	107922	Identifier	FAILURE		107802	0					
ANR	107923	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_INIT_FCALL , NULL , NULL )"	2991:1:86221:86277	107802	8	True				
ANR	107924	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_INIT_FCALL , NULL , NULL )"		107802	0		=			
ANR	107925	Identifier	opline		107802	0					
ANR	107926	CallExpression	"zend_emit_op ( NULL , ZEND_INIT_FCALL , NULL , NULL )"		107802	1					
ANR	107927	Callee	zend_emit_op		107802	0					
ANR	107928	Identifier	zend_emit_op		107802	0					
ANR	107929	ArgumentList	NULL		107802	1					
ANR	107930	Argument	NULL		107802	0					
ANR	107931	Identifier	NULL		107802	0					
ANR	107932	Argument	ZEND_INIT_FCALL		107802	1					
ANR	107933	Identifier	ZEND_INIT_FCALL		107802	0					
ANR	107934	Argument	NULL		107802	2					
ANR	107935	Identifier	NULL		107802	0					
ANR	107936	Argument	NULL		107802	3					
ANR	107937	Identifier	NULL		107802	0					
ANR	107938	ExpressionStatement	opline -> extended_value = num_args	2992:1:86280:86313	107802	9	True				
ANR	107939	AssignmentExpression	opline -> extended_value = num_args		107802	0		=			
ANR	107940	PtrMemberAccess	opline -> extended_value		107802	0					
ANR	107941	Identifier	opline		107802	0					
ANR	107942	Identifier	extended_value		107802	1					
ANR	107943	Identifier	num_args		107802	1					
ANR	107944	ExpressionStatement	"opline -> op1 . num = zend_vm_calc_used_stack ( num_args , fbc )"	2993:1:86316:86372	107802	10	True				
ANR	107945	AssignmentExpression	"opline -> op1 . num = zend_vm_calc_used_stack ( num_args , fbc )"		107802	0		=			
ANR	107946	MemberAccess	opline -> op1 . num		107802	0					
ANR	107947	PtrMemberAccess	opline -> op1		107802	0					
ANR	107948	Identifier	opline		107802	0					
ANR	107949	Identifier	op1		107802	1					
ANR	107950	Identifier	num		107802	1					
ANR	107951	CallExpression	"zend_vm_calc_used_stack ( num_args , fbc )"		107802	1					
ANR	107952	Callee	zend_vm_calc_used_stack		107802	0					
ANR	107953	Identifier	zend_vm_calc_used_stack		107802	0					
ANR	107954	ArgumentList	num_args		107802	1					
ANR	107955	Argument	num_args		107802	0					
ANR	107956	Identifier	num_args		107802	0					
ANR	107957	Argument	fbc		107802	1					
ANR	107958	Identifier	fbc		107802	0					
ANR	107959	ExpressionStatement	opline -> op2_type = IS_CONST	2994:1:86375:86402	107802	11	True				
ANR	107960	AssignmentExpression	opline -> op2_type = IS_CONST		107802	0		=			
ANR	107961	PtrMemberAccess	opline -> op2_type		107802	0					
ANR	107962	Identifier	opline		107802	0					
ANR	107963	Identifier	op2_type		107802	1					
ANR	107964	Identifier	IS_CONST		107802	1					
ANR	107965	ExpressionStatement	"LITERAL_STR ( opline -> op2 , lcname )"	2995:1:86405:86437	107802	12	True				
ANR	107966	CallExpression	"LITERAL_STR ( opline -> op2 , lcname )"		107802	0					
ANR	107967	Callee	LITERAL_STR		107802	0					
ANR	107968	Identifier	LITERAL_STR		107802	0					
ANR	107969	ArgumentList	opline -> op2		107802	1					
ANR	107970	Argument	opline -> op2		107802	0					
ANR	107971	PtrMemberAccess	opline -> op2		107802	0					
ANR	107972	Identifier	opline		107802	0					
ANR	107973	Identifier	op2		107802	1					
ANR	107974	Argument	lcname		107802	1					
ANR	107975	Identifier	lcname		107802	0					
ANR	107976	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	2996:1:86440:86483	107802	13	True				
ANR	107977	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		107802	0					
ANR	107978	Callee	zend_alloc_cache_slot		107802	0					
ANR	107979	Identifier	zend_alloc_cache_slot		107802	0					
ANR	107980	ArgumentList	opline -> op2 . constant		107802	1					
ANR	107981	Argument	opline -> op2 . constant		107802	0					
ANR	107982	MemberAccess	opline -> op2 . constant		107802	0					
ANR	107983	PtrMemberAccess	opline -> op2		107802	0					
ANR	107984	Identifier	opline		107802	0					
ANR	107985	Identifier	op2		107802	1					
ANR	107986	Identifier	constant		107802	1					
ANR	107987	ReturnStatement	return SUCCESS ;	2998:1:86487:86501	107802	14	True				
ANR	107988	Identifier	SUCCESS		107802	0					
ANR	107989	ReturnType	static int		107802	1					
ANR	107990	Identifier	zend_try_compile_ct_bound_init_user_func		107802	2					
ANR	107991	ParameterList	"zend_ast * name_ast , uint32_t num_args"		107802	3					
ANR	107992	Parameter	zend_ast * name_ast	2969:52:85575:85592	107802	0	True				
ANR	107993	ParameterType	zend_ast *		107802	0					
ANR	107994	Identifier	name_ast		107802	1					
ANR	107995	Parameter	uint32_t num_args	2969:72:85595:85611	107802	1	True				
ANR	107996	ParameterType	uint32_t		107802	0					
ANR	107997	Identifier	num_args		107802	1					
ANR	107998	CFGEntryNode	ENTRY		107802		True				
ANR	107999	CFGExitNode	EXIT		107802		True				
ANR	108000	Symbol	opline -> op1		107802						
ANR	108001	Symbol	opline -> op2		107802						
ANR	108002	Symbol	fbc -> type		107802						
ANR	108003	Symbol	zend_string_tolower		107802						
ANR	108004	Symbol	opline -> extended_value		107802						
ANR	108005	Symbol	* name_ast		107802						
ANR	108006	Symbol	ZEND_INTERNAL_FUNCTION		107802						
ANR	108007	Symbol	compiler_options		107802						
ANR	108008	Symbol	opline		107802						
ANR	108009	Symbol	zend_ast_get_str		107802						
ANR	108010	Symbol	ZEND_INIT_FCALL		107802						
ANR	108011	Symbol	num_args		107802						
ANR	108012	Symbol	ZEND_USER_FUNCTION		107802						
ANR	108013	Symbol	ZEND_AST_ZVAL		107802						
ANR	108014	Symbol	IS_STRING		107802						
ANR	108015	Symbol	zend_hash_find_ptr		107802						
ANR	108016	Symbol	IS_CONST		107802						
ANR	108017	Symbol	NULL		107802						
ANR	108018	Symbol	SUCCESS		107802						
ANR	108019	Symbol	CG		107802						
ANR	108020	Symbol	fbc		107802						
ANR	108021	Symbol	ZEND_COMPILE_IGNORE_USER_FUNCTIONS		107802						
ANR	108022	Symbol	Z_TYPE_P		107802						
ANR	108023	Symbol	FAILURE		107802						
ANR	108024	Symbol	* fbc		107802						
ANR	108025	Symbol	lcname		107802						
ANR	108026	Symbol	ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS		107802						
ANR	108027	Symbol	* opline		107802						
ANR	108028	Symbol	name_ast -> kind		107802						
ANR	108029	Symbol	name_ast		107802						
ANR	108030	Symbol	name		107802						
ANR	108031	Symbol	opline -> op2 . constant		107802						
ANR	108032	Symbol	opline -> op1 . num		107802						
ANR	108033	Symbol	opline -> op2_type		107802						
ANR	108034	Symbol	zend_ast_get_zval		107802						
ANR	108035	Symbol	function_table		107802						
ANR	108036	Symbol	zend_vm_calc_used_stack		107802						
ANR	108037	Symbol	zend_emit_op		107802						
ANR	108038	Function	zend_compile_init_user_func	3002:0:86516:87006							
ANR	108039	FunctionDef	"zend_compile_init_user_func (zend_ast * name_ast , uint32_t num_args , zend_string * orig_func_name)"		108038	0					
ANR	108040	CompoundStatement		3003:0:86634:87006	108038	0					
ANR	108041	IdentifierDeclStatement	zend_op * opline ;	3004:1:86637:86652	108038	0	True				
ANR	108042	IdentifierDecl	* opline		108038	0					
ANR	108043	IdentifierDeclType	zend_op *		108038	0					
ANR	108044	Identifier	opline		108038	1					
ANR	108045	IdentifierDeclStatement	znode name_node ;	3005:1:86655:86670	108038	1	True				
ANR	108046	IdentifierDecl	name_node		108038	0					
ANR	108047	IdentifierDeclType	znode		108038	0					
ANR	108048	Identifier	name_node		108038	1					
ANR	108049	IfStatement	"if ( zend_try_compile_ct_bound_init_user_func ( name_ast , num_args ) == SUCCESS )"		108038	2					
ANR	108050	Condition	"zend_try_compile_ct_bound_init_user_func ( name_ast , num_args ) == SUCCESS"	3007:5:86678:86748	108038	0	True				
ANR	108051	EqualityExpression	"zend_try_compile_ct_bound_init_user_func ( name_ast , num_args ) == SUCCESS"		108038	0		==			
ANR	108052	CallExpression	"zend_try_compile_ct_bound_init_user_func ( name_ast , num_args )"		108038	0					
ANR	108053	Callee	zend_try_compile_ct_bound_init_user_func		108038	0					
ANR	108054	Identifier	zend_try_compile_ct_bound_init_user_func		108038	0					
ANR	108055	ArgumentList	name_ast		108038	1					
ANR	108056	Argument	name_ast		108038	0					
ANR	108057	Identifier	name_ast		108038	0					
ANR	108058	Argument	num_args		108038	1					
ANR	108059	Identifier	num_args		108038	0					
ANR	108060	Identifier	SUCCESS		108038	1					
ANR	108061	CompoundStatement		5:78:116:116	108038	1					
ANR	108062	ReturnStatement	return ;	3008:2:86755:86761	108038	0	True				
ANR	108063	ExpressionStatement	"zend_compile_expr ( & name_node , name_ast )"	3011:1:86768:86807	108038	3	True				
ANR	108064	CallExpression	"zend_compile_expr ( & name_node , name_ast )"		108038	0					
ANR	108065	Callee	zend_compile_expr		108038	0					
ANR	108066	Identifier	zend_compile_expr		108038	0					
ANR	108067	ArgumentList	& name_node		108038	1					
ANR	108068	Argument	& name_node		108038	0					
ANR	108069	UnaryOperationExpression	& name_node		108038	0					
ANR	108070	UnaryOperator	&		108038	0					
ANR	108071	Identifier	name_node		108038	1					
ANR	108072	Argument	name_ast		108038	1					
ANR	108073	Identifier	name_ast		108038	0					
ANR	108074	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_INIT_USER_CALL , NULL , & name_node )"	3013:1:86811:86877	108038	4	True				
ANR	108075	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_INIT_USER_CALL , NULL , & name_node )"		108038	0		=			
ANR	108076	Identifier	opline		108038	0					
ANR	108077	CallExpression	"zend_emit_op ( NULL , ZEND_INIT_USER_CALL , NULL , & name_node )"		108038	1					
ANR	108078	Callee	zend_emit_op		108038	0					
ANR	108079	Identifier	zend_emit_op		108038	0					
ANR	108080	ArgumentList	NULL		108038	1					
ANR	108081	Argument	NULL		108038	0					
ANR	108082	Identifier	NULL		108038	0					
ANR	108083	Argument	ZEND_INIT_USER_CALL		108038	1					
ANR	108084	Identifier	ZEND_INIT_USER_CALL		108038	0					
ANR	108085	Argument	NULL		108038	2					
ANR	108086	Identifier	NULL		108038	0					
ANR	108087	Argument	& name_node		108038	3					
ANR	108088	UnaryOperationExpression	& name_node		108038	0					
ANR	108089	UnaryOperator	&		108038	0					
ANR	108090	Identifier	name_node		108038	1					
ANR	108091	ExpressionStatement	opline -> op1_type = IS_CONST	3014:1:86880:86907	108038	5	True				
ANR	108092	AssignmentExpression	opline -> op1_type = IS_CONST		108038	0		=			
ANR	108093	PtrMemberAccess	opline -> op1_type		108038	0					
ANR	108094	Identifier	opline		108038	0					
ANR	108095	Identifier	op1_type		108038	1					
ANR	108096	Identifier	IS_CONST		108038	1					
ANR	108097	ExpressionStatement	"LITERAL_STR ( opline -> op1 , zend_string_copy ( orig_func_name ) )"	3015:1:86910:86968	108038	6	True				
ANR	108098	CallExpression	"LITERAL_STR ( opline -> op1 , zend_string_copy ( orig_func_name ) )"		108038	0					
ANR	108099	Callee	LITERAL_STR		108038	0					
ANR	108100	Identifier	LITERAL_STR		108038	0					
ANR	108101	ArgumentList	opline -> op1		108038	1					
ANR	108102	Argument	opline -> op1		108038	0					
ANR	108103	PtrMemberAccess	opline -> op1		108038	0					
ANR	108104	Identifier	opline		108038	0					
ANR	108105	Identifier	op1		108038	1					
ANR	108106	Argument	zend_string_copy ( orig_func_name )		108038	1					
ANR	108107	CallExpression	zend_string_copy ( orig_func_name )		108038	0					
ANR	108108	Callee	zend_string_copy		108038	0					
ANR	108109	Identifier	zend_string_copy		108038	0					
ANR	108110	ArgumentList	orig_func_name		108038	1					
ANR	108111	Argument	orig_func_name		108038	0					
ANR	108112	Identifier	orig_func_name		108038	0					
ANR	108113	ExpressionStatement	opline -> extended_value = num_args	3016:1:86971:87004	108038	7	True				
ANR	108114	AssignmentExpression	opline -> extended_value = num_args		108038	0		=			
ANR	108115	PtrMemberAccess	opline -> extended_value		108038	0					
ANR	108116	Identifier	opline		108038	0					
ANR	108117	Identifier	extended_value		108038	1					
ANR	108118	Identifier	num_args		108038	1					
ANR	108119	ReturnType	static void		108038	1					
ANR	108120	Identifier	zend_compile_init_user_func		108038	2					
ANR	108121	ParameterList	"zend_ast * name_ast , uint32_t num_args , zend_string * orig_func_name"		108038	3					
ANR	108122	Parameter	zend_ast * name_ast	3002:40:86556:86573	108038	0	True				
ANR	108123	ParameterType	zend_ast *		108038	0					
ANR	108124	Identifier	name_ast		108038	1					
ANR	108125	Parameter	uint32_t num_args	3002:60:86576:86592	108038	1	True				
ANR	108126	ParameterType	uint32_t		108038	0					
ANR	108127	Identifier	num_args		108038	1					
ANR	108128	Parameter	zend_string * orig_func_name	3002:79:86595:86621	108038	2	True				
ANR	108129	ParameterType	zend_string *		108038	0					
ANR	108130	Identifier	orig_func_name		108038	1					
ANR	108131	CFGEntryNode	ENTRY		108038		True				
ANR	108132	CFGExitNode	EXIT		108038		True				
ANR	108133	Symbol	opline -> op1		108038						
ANR	108134	Symbol	IS_CONST		108038						
ANR	108135	Symbol	SUCCESS		108038						
ANR	108136	Symbol	NULL		108038						
ANR	108137	Symbol	zend_string_copy		108038						
ANR	108138	Symbol	opline -> op1_type		108038						
ANR	108139	Symbol	opline -> extended_value		108038						
ANR	108140	Symbol	zend_try_compile_ct_bound_init_user_func		108038						
ANR	108141	Symbol	ZEND_INIT_USER_CALL		108038						
ANR	108142	Symbol	opline		108038						
ANR	108143	Symbol	* opline		108038						
ANR	108144	Symbol	num_args		108038						
ANR	108145	Symbol	& name_node		108038						
ANR	108146	Symbol	orig_func_name		108038						
ANR	108147	Symbol	name_ast		108038						
ANR	108148	Symbol	name_node		108038						
ANR	108149	Symbol	zend_emit_op		108038						
ANR	108150	Function	zend_compile_func_cufa	3021:0:87053:87478							
ANR	108151	FunctionDef	"zend_compile_func_cufa (znode * result , zend_ast_list * args , zend_string * lcname)"		108150	0					
ANR	108152	CompoundStatement		3022:0:87147:87478	108150	0					
ANR	108153	IdentifierDeclStatement	znode arg_node ;	3023:1:87150:87164	108150	0	True				
ANR	108154	IdentifierDecl	arg_node		108150	0					
ANR	108155	IdentifierDeclType	znode		108150	0					
ANR	108156	Identifier	arg_node		108150	1					
ANR	108157	IfStatement	if ( args -> children != 2 || zend_args_contain_unpack ( args ) )		108150	1					
ANR	108158	Condition	args -> children != 2 || zend_args_contain_unpack ( args )	3025:5:87172:87224	108150	0	True				
ANR	108159	OrExpression	args -> children != 2 || zend_args_contain_unpack ( args )		108150	0		||			
ANR	108160	EqualityExpression	args -> children != 2		108150	0		!=			
ANR	108161	PtrMemberAccess	args -> children		108150	0					
ANR	108162	Identifier	args		108150	0					
ANR	108163	Identifier	children		108150	1					
ANR	108164	PrimaryExpression	2		108150	1					
ANR	108165	CallExpression	zend_args_contain_unpack ( args )		108150	1					
ANR	108166	Callee	zend_args_contain_unpack		108150	0					
ANR	108167	Identifier	zend_args_contain_unpack		108150	0					
ANR	108168	ArgumentList	args		108150	1					
ANR	108169	Argument	args		108150	0					
ANR	108170	Identifier	args		108150	0					
ANR	108171	CompoundStatement		4:60:79:79	108150	1					
ANR	108172	ReturnStatement	return FAILURE ;	3026:2:87231:87245	108150	0	True				
ANR	108173	Identifier	FAILURE		108150	0					
ANR	108174	ExpressionStatement	"zend_compile_init_user_func ( args -> child [ 0 ] , 0 , lcname )"	3029:1:87252:87306	108150	2	True				
ANR	108175	CallExpression	"zend_compile_init_user_func ( args -> child [ 0 ] , 0 , lcname )"		108150	0					
ANR	108176	Callee	zend_compile_init_user_func		108150	0					
ANR	108177	Identifier	zend_compile_init_user_func		108150	0					
ANR	108178	ArgumentList	args -> child [ 0 ]		108150	1					
ANR	108179	Argument	args -> child [ 0 ]		108150	0					
ANR	108180	ArrayIndexing	args -> child [ 0 ]		108150	0					
ANR	108181	PtrMemberAccess	args -> child		108150	0					
ANR	108182	Identifier	args		108150	0					
ANR	108183	Identifier	child		108150	1					
ANR	108184	PrimaryExpression	0		108150	1					
ANR	108185	Argument	0		108150	1					
ANR	108186	PrimaryExpression	0		108150	0					
ANR	108187	Argument	lcname		108150	2					
ANR	108188	Identifier	lcname		108150	0					
ANR	108189	ExpressionStatement	"zend_compile_expr ( & arg_node , args -> child [ 1 ] )"	3030:1:87309:87353	108150	3	True				
ANR	108190	CallExpression	"zend_compile_expr ( & arg_node , args -> child [ 1 ] )"		108150	0					
ANR	108191	Callee	zend_compile_expr		108150	0					
ANR	108192	Identifier	zend_compile_expr		108150	0					
ANR	108193	ArgumentList	& arg_node		108150	1					
ANR	108194	Argument	& arg_node		108150	0					
ANR	108195	UnaryOperationExpression	& arg_node		108150	0					
ANR	108196	UnaryOperator	&		108150	0					
ANR	108197	Identifier	arg_node		108150	1					
ANR	108198	Argument	args -> child [ 1 ]		108150	1					
ANR	108199	ArrayIndexing	args -> child [ 1 ]		108150	0					
ANR	108200	PtrMemberAccess	args -> child		108150	0					
ANR	108201	Identifier	args		108150	0					
ANR	108202	Identifier	child		108150	1					
ANR	108203	PrimaryExpression	1		108150	1					
ANR	108204	ExpressionStatement	"zend_emit_op ( NULL , ZEND_SEND_ARRAY , & arg_node , NULL )"	3031:1:87356:87408	108150	4	True				
ANR	108205	CallExpression	"zend_emit_op ( NULL , ZEND_SEND_ARRAY , & arg_node , NULL )"		108150	0					
ANR	108206	Callee	zend_emit_op		108150	0					
ANR	108207	Identifier	zend_emit_op		108150	0					
ANR	108208	ArgumentList	NULL		108150	1					
ANR	108209	Argument	NULL		108150	0					
ANR	108210	Identifier	NULL		108150	0					
ANR	108211	Argument	ZEND_SEND_ARRAY		108150	1					
ANR	108212	Identifier	ZEND_SEND_ARRAY		108150	0					
ANR	108213	Argument	& arg_node		108150	2					
ANR	108214	UnaryOperationExpression	& arg_node		108150	0					
ANR	108215	UnaryOperator	&		108150	0					
ANR	108216	Identifier	arg_node		108150	1					
ANR	108217	Argument	NULL		108150	3					
ANR	108218	Identifier	NULL		108150	0					
ANR	108219	ExpressionStatement	"zend_emit_op ( result , ZEND_DO_FCALL , NULL , NULL )"	3032:1:87411:87458	108150	5	True				
ANR	108220	CallExpression	"zend_emit_op ( result , ZEND_DO_FCALL , NULL , NULL )"		108150	0					
ANR	108221	Callee	zend_emit_op		108150	0					
ANR	108222	Identifier	zend_emit_op		108150	0					
ANR	108223	ArgumentList	result		108150	1					
ANR	108224	Argument	result		108150	0					
ANR	108225	Identifier	result		108150	0					
ANR	108226	Argument	ZEND_DO_FCALL		108150	1					
ANR	108227	Identifier	ZEND_DO_FCALL		108150	0					
ANR	108228	Argument	NULL		108150	2					
ANR	108229	Identifier	NULL		108150	0					
ANR	108230	Argument	NULL		108150	3					
ANR	108231	Identifier	NULL		108150	0					
ANR	108232	ReturnStatement	return SUCCESS ;	3034:1:87462:87476	108150	6	True				
ANR	108233	Identifier	SUCCESS		108150	0					
ANR	108234	ReturnType	int		108150	1					
ANR	108235	Identifier	zend_compile_func_cufa		108150	2					
ANR	108236	ParameterList	"znode * result , zend_ast_list * args , zend_string * lcname"		108150	3					
ANR	108237	Parameter	znode * result	3021:27:87080:87092	108150	0	True				
ANR	108238	ParameterType	znode *		108150	0					
ANR	108239	Identifier	result		108150	1					
ANR	108240	Parameter	zend_ast_list * args	3021:42:87095:87113	108150	1	True				
ANR	108241	ParameterType	zend_ast_list *		108150	0					
ANR	108242	Identifier	args		108150	1					
ANR	108243	Parameter	zend_string * lcname	3021:63:87116:87134	108150	2	True				
ANR	108244	ParameterType	zend_string *		108150	0					
ANR	108245	Identifier	lcname		108150	1					
ANR	108246	CFGEntryNode	ENTRY		108150		True				
ANR	108247	CFGExitNode	EXIT		108150		True				
ANR	108248	Symbol	ZEND_SEND_ARRAY		108150						
ANR	108249	Symbol	arg_node		108150						
ANR	108250	Symbol	NULL		108150						
ANR	108251	Symbol	SUCCESS		108150						
ANR	108252	Symbol	* args -> child		108150						
ANR	108253	Symbol	FAILURE		108150						
ANR	108254	Symbol	* args		108150						
ANR	108255	Symbol	result		108150						
ANR	108256	Symbol	args		108150						
ANR	108257	Symbol	zend_args_contain_unpack		108150						
ANR	108258	Symbol	lcname		108150						
ANR	108259	Symbol	ZEND_DO_FCALL		108150						
ANR	108260	Symbol	args -> child		108150						
ANR	108261	Symbol	args -> children		108150						
ANR	108262	Symbol	& arg_node		108150						
ANR	108263	Symbol	* * args		108150						
ANR	108264	Function	zend_compile_func_cuf	3039:0:87518:88542							
ANR	108265	FunctionDef	"zend_compile_func_cuf (znode * result , zend_ast_list * args , zend_string * lcname)"		108264	0					
ANR	108266	CompoundStatement		3040:0:87611:88542	108264	0					
ANR	108267	IdentifierDeclStatement	uint32_t i ;	3041:1:87614:87624	108264	0	True				
ANR	108268	IdentifierDecl	i		108264	0					
ANR	108269	IdentifierDeclType	uint32_t		108264	0					
ANR	108270	Identifier	i		108264	1					
ANR	108271	IfStatement	if ( args -> children < 1 || zend_args_contain_unpack ( args ) )		108264	1					
ANR	108272	Condition	args -> children < 1 || zend_args_contain_unpack ( args )	3043:5:87632:87683	108264	0	True				
ANR	108273	OrExpression	args -> children < 1 || zend_args_contain_unpack ( args )		108264	0		||			
ANR	108274	RelationalExpression	args -> children < 1		108264	0		<			
ANR	108275	PtrMemberAccess	args -> children		108264	0					
ANR	108276	Identifier	args		108264	0					
ANR	108277	Identifier	children		108264	1					
ANR	108278	PrimaryExpression	1		108264	1					
ANR	108279	CallExpression	zend_args_contain_unpack ( args )		108264	1					
ANR	108280	Callee	zend_args_contain_unpack		108264	0					
ANR	108281	Identifier	zend_args_contain_unpack		108264	0					
ANR	108282	ArgumentList	args		108264	1					
ANR	108283	Argument	args		108264	0					
ANR	108284	Identifier	args		108264	0					
ANR	108285	CompoundStatement		4:59:74:74	108264	1					
ANR	108286	ReturnStatement	return FAILURE ;	3044:2:87690:87704	108264	0	True				
ANR	108287	Identifier	FAILURE		108264	0					
ANR	108288	ExpressionStatement	"zend_compile_init_user_func ( args -> child [ 0 ] , args -> children - 1 , lcname )"	3047:1:87711:87782	108264	2	True				
ANR	108289	CallExpression	"zend_compile_init_user_func ( args -> child [ 0 ] , args -> children - 1 , lcname )"		108264	0					
ANR	108290	Callee	zend_compile_init_user_func		108264	0					
ANR	108291	Identifier	zend_compile_init_user_func		108264	0					
ANR	108292	ArgumentList	args -> child [ 0 ]		108264	1					
ANR	108293	Argument	args -> child [ 0 ]		108264	0					
ANR	108294	ArrayIndexing	args -> child [ 0 ]		108264	0					
ANR	108295	PtrMemberAccess	args -> child		108264	0					
ANR	108296	Identifier	args		108264	0					
ANR	108297	Identifier	child		108264	1					
ANR	108298	PrimaryExpression	0		108264	1					
ANR	108299	Argument	args -> children - 1		108264	1					
ANR	108300	AdditiveExpression	args -> children - 1		108264	0		-			
ANR	108301	PtrMemberAccess	args -> children		108264	0					
ANR	108302	Identifier	args		108264	0					
ANR	108303	Identifier	children		108264	1					
ANR	108304	PrimaryExpression	1		108264	1					
ANR	108305	Argument	lcname		108264	2					
ANR	108306	Identifier	lcname		108264	0					
ANR	108307	ForStatement	for ( i = 1 ; i < args -> children ; ++ i )		108264	3					
ANR	108308	ForInit	i = 1 ;	3048:6:87790:87795	108264	0	True				
ANR	108309	AssignmentExpression	i = 1		108264	0		=			
ANR	108310	Identifier	i		108264	0					
ANR	108311	PrimaryExpression	1		108264	1					
ANR	108312	Condition	i < args -> children	3048:13:87797:87814	108264	1	True				
ANR	108313	RelationalExpression	i < args -> children		108264	0		<			
ANR	108314	Identifier	i		108264	0					
ANR	108315	PtrMemberAccess	args -> children		108264	1					
ANR	108316	Identifier	args		108264	0					
ANR	108317	Identifier	children		108264	1					
ANR	108318	UnaryExpression	++ i	3048:33:87817:87819	108264	2	True				
ANR	108319	IncDec	++		108264	0					
ANR	108320	Identifier	i		108264	1					
ANR	108321	CompoundStatement		13:2:289:312	108264	3					
ANR	108322	IdentifierDeclStatement	zend_ast * arg_ast = args -> child [ i ] ;	3049:2:87826:87860	108264	0	True				
ANR	108323	IdentifierDecl	* arg_ast = args -> child [ i ]		108264	0					
ANR	108324	IdentifierDeclType	zend_ast *		108264	0					
ANR	108325	Identifier	arg_ast		108264	1					
ANR	108326	AssignmentExpression	* arg_ast = args -> child [ i ]		108264	2		=			
ANR	108327	Identifier	arg_ast		108264	0					
ANR	108328	ArrayIndexing	args -> child [ i ]		108264	1					
ANR	108329	PtrMemberAccess	args -> child		108264	0					
ANR	108330	Identifier	args		108264	0					
ANR	108331	Identifier	child		108264	1					
ANR	108332	Identifier	i		108264	1					
ANR	108333	IdentifierDeclStatement	znode arg_node ;	3050:2:87864:87878	108264	1	True				
ANR	108334	IdentifierDecl	arg_node		108264	0					
ANR	108335	IdentifierDeclType	znode		108264	0					
ANR	108336	Identifier	arg_node		108264	1					
ANR	108337	IdentifierDeclStatement	zend_op * opline ;	3051:2:87882:87897	108264	2	True				
ANR	108338	IdentifierDecl	* opline		108264	0					
ANR	108339	IdentifierDeclType	zend_op *		108264	0					
ANR	108340	Identifier	opline		108264	1					
ANR	108341	IdentifierDeclStatement	zend_bool send_user = 0 ;	3052:2:87901:87924	108264	3	True				
ANR	108342	IdentifierDecl	send_user = 0		108264	0					
ANR	108343	IdentifierDeclType	zend_bool		108264	0					
ANR	108344	Identifier	send_user		108264	1					
ANR	108345	AssignmentExpression	send_user = 0		108264	2		=			
ANR	108346	Identifier	send_user		108264	0					
ANR	108347	PrimaryExpression	0		108264	1					
ANR	108348	IfStatement	if ( zend_is_variable ( arg_ast ) && ! zend_is_call ( arg_ast ) )		108264	4					
ANR	108349	Condition	zend_is_variable ( arg_ast ) && ! zend_is_call ( arg_ast )	3054:6:87933:87983	108264	0	True				
ANR	108350	AndExpression	zend_is_variable ( arg_ast ) && ! zend_is_call ( arg_ast )		108264	0		&&			
ANR	108351	CallExpression	zend_is_variable ( arg_ast )		108264	0					
ANR	108352	Callee	zend_is_variable		108264	0					
ANR	108353	Identifier	zend_is_variable		108264	0					
ANR	108354	ArgumentList	arg_ast		108264	1					
ANR	108355	Argument	arg_ast		108264	0					
ANR	108356	Identifier	arg_ast		108264	0					
ANR	108357	UnaryOperationExpression	! zend_is_call ( arg_ast )		108264	1					
ANR	108358	UnaryOperator	!		108264	0					
ANR	108359	CallExpression	zend_is_call ( arg_ast )		108264	1					
ANR	108360	Callee	zend_is_call		108264	0					
ANR	108361	Identifier	zend_is_call		108264	0					
ANR	108362	ArgumentList	arg_ast		108264	1					
ANR	108363	Argument	arg_ast		108264	0					
ANR	108364	Identifier	arg_ast		108264	0					
ANR	108365	CompoundStatement		15:59:374:374	108264	1					
ANR	108366	ExpressionStatement	"zend_compile_var ( & arg_node , arg_ast , BP_VAR_FUNC_ARG | ( i << BP_VAR_SHIFT ) )"	3055:3:87991:88066	108264	0	True				
ANR	108367	CallExpression	"zend_compile_var ( & arg_node , arg_ast , BP_VAR_FUNC_ARG | ( i << BP_VAR_SHIFT ) )"		108264	0					
ANR	108368	Callee	zend_compile_var		108264	0					
ANR	108369	Identifier	zend_compile_var		108264	0					
ANR	108370	ArgumentList	& arg_node		108264	1					
ANR	108371	Argument	& arg_node		108264	0					
ANR	108372	UnaryOperationExpression	& arg_node		108264	0					
ANR	108373	UnaryOperator	&		108264	0					
ANR	108374	Identifier	arg_node		108264	1					
ANR	108375	Argument	arg_ast		108264	1					
ANR	108376	Identifier	arg_ast		108264	0					
ANR	108377	Argument	BP_VAR_FUNC_ARG | ( i << BP_VAR_SHIFT )		108264	2					
ANR	108378	InclusiveOrExpression	BP_VAR_FUNC_ARG | ( i << BP_VAR_SHIFT )		108264	0		|			
ANR	108379	Identifier	BP_VAR_FUNC_ARG		108264	0					
ANR	108380	ShiftExpression	i << BP_VAR_SHIFT		108264	1		<<			
ANR	108381	Identifier	i		108264	0					
ANR	108382	Identifier	BP_VAR_SHIFT		108264	1					
ANR	108383	ExpressionStatement	send_user = 1	3056:3:88071:88084	108264	1	True				
ANR	108384	AssignmentExpression	send_user = 1		108264	0		=			
ANR	108385	Identifier	send_user		108264	0					
ANR	108386	PrimaryExpression	1		108264	1					
ANR	108387	ElseStatement	else		108264	0					
ANR	108388	CompoundStatement		18:9:483:483	108264	0					
ANR	108389	ExpressionStatement	"zend_compile_expr ( & arg_node , arg_ast )"	3058:3:88100:88137	108264	0	True				
ANR	108390	CallExpression	"zend_compile_expr ( & arg_node , arg_ast )"		108264	0					
ANR	108391	Callee	zend_compile_expr		108264	0					
ANR	108392	Identifier	zend_compile_expr		108264	0					
ANR	108393	ArgumentList	& arg_node		108264	1					
ANR	108394	Argument	& arg_node		108264	0					
ANR	108395	UnaryOperationExpression	& arg_node		108264	0					
ANR	108396	UnaryOperator	&		108264	0					
ANR	108397	Identifier	arg_node		108264	1					
ANR	108398	Argument	arg_ast		108264	1					
ANR	108399	Identifier	arg_ast		108264	0					
ANR	108400	IfStatement	if ( arg_node . op_type & ( IS_VAR | IS_CV ) )		108264	1					
ANR	108401	Condition	arg_node . op_type & ( IS_VAR | IS_CV )	3059:7:88146:88178	108264	0	True				
ANR	108402	BitAndExpression	arg_node . op_type & ( IS_VAR | IS_CV )		108264	0		&			
ANR	108403	MemberAccess	arg_node . op_type		108264	0					
ANR	108404	Identifier	arg_node		108264	0					
ANR	108405	Identifier	op_type		108264	1					
ANR	108406	InclusiveOrExpression	IS_VAR | IS_CV		108264	1		|			
ANR	108407	Identifier	IS_VAR		108264	0					
ANR	108408	Identifier	IS_CV		108264	1					
ANR	108409	CompoundStatement		20:42:569:569	108264	1					
ANR	108410	ExpressionStatement	send_user = 1	3060:4:88187:88200	108264	0	True				
ANR	108411	AssignmentExpression	send_user = 1		108264	0		=			
ANR	108412	Identifier	send_user		108264	0					
ANR	108413	PrimaryExpression	1		108264	1					
ANR	108414	IfStatement	if ( send_user )		108264	5					
ANR	108415	Condition	send_user	3064:6:88218:88226	108264	0	True				
ANR	108416	Identifier	send_user		108264	0					
ANR	108417	CompoundStatement		25:17:617:617	108264	1					
ANR	108418	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_SEND_USER , & arg_node , NULL )"	3065:3:88234:88294	108264	0	True				
ANR	108419	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_SEND_USER , & arg_node , NULL )"		108264	0		=			
ANR	108420	Identifier	opline		108264	0					
ANR	108421	CallExpression	"zend_emit_op ( NULL , ZEND_SEND_USER , & arg_node , NULL )"		108264	1					
ANR	108422	Callee	zend_emit_op		108264	0					
ANR	108423	Identifier	zend_emit_op		108264	0					
ANR	108424	ArgumentList	NULL		108264	1					
ANR	108425	Argument	NULL		108264	0					
ANR	108426	Identifier	NULL		108264	0					
ANR	108427	Argument	ZEND_SEND_USER		108264	1					
ANR	108428	Identifier	ZEND_SEND_USER		108264	0					
ANR	108429	Argument	& arg_node		108264	2					
ANR	108430	UnaryOperationExpression	& arg_node		108264	0					
ANR	108431	UnaryOperator	&		108264	0					
ANR	108432	Identifier	arg_node		108264	1					
ANR	108433	Argument	NULL		108264	3					
ANR	108434	Identifier	NULL		108264	0					
ANR	108435	ElseStatement	else		108264	0					
ANR	108436	CompoundStatement		27:9:693:693	108264	0					
ANR	108437	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_SEND_VAL , & arg_node , NULL )"	3067:3:88310:88369	108264	0	True				
ANR	108438	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_SEND_VAL , & arg_node , NULL )"		108264	0		=			
ANR	108439	Identifier	opline		108264	0					
ANR	108440	CallExpression	"zend_emit_op ( NULL , ZEND_SEND_VAL , & arg_node , NULL )"		108264	1					
ANR	108441	Callee	zend_emit_op		108264	0					
ANR	108442	Identifier	zend_emit_op		108264	0					
ANR	108443	ArgumentList	NULL		108264	1					
ANR	108444	Argument	NULL		108264	0					
ANR	108445	Identifier	NULL		108264	0					
ANR	108446	Argument	ZEND_SEND_VAL		108264	1					
ANR	108447	Identifier	ZEND_SEND_VAL		108264	0					
ANR	108448	Argument	& arg_node		108264	2					
ANR	108449	UnaryOperationExpression	& arg_node		108264	0					
ANR	108450	UnaryOperator	&		108264	0					
ANR	108451	Identifier	arg_node		108264	1					
ANR	108452	Argument	NULL		108264	3					
ANR	108453	Identifier	NULL		108264	0					
ANR	108454	ExpressionStatement	opline -> op2 . num = i	3070:2:88378:88397	108264	6	True				
ANR	108455	AssignmentExpression	opline -> op2 . num = i		108264	0		=			
ANR	108456	MemberAccess	opline -> op2 . num		108264	0					
ANR	108457	PtrMemberAccess	opline -> op2		108264	0					
ANR	108458	Identifier	opline		108264	0					
ANR	108459	Identifier	op2		108264	1					
ANR	108460	Identifier	num		108264	1					
ANR	108461	Identifier	i		108264	1					
ANR	108462	ExpressionStatement	"opline -> result . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_ARG ( NULL , i )"	3071:2:88401:88469	108264	7	True				
ANR	108463	AssignmentExpression	"opline -> result . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_ARG ( NULL , i )"		108264	0		=			
ANR	108464	MemberAccess	opline -> result . var		108264	0					
ANR	108465	PtrMemberAccess	opline -> result		108264	0					
ANR	108466	Identifier	opline		108264	0					
ANR	108467	Identifier	result		108264	1					
ANR	108468	Identifier	var		108264	1					
ANR	108469	CastExpression	"( uint32_t ) ( zend_intptr_t ) ZEND_CALL_ARG ( NULL , i )"		108264	1					
ANR	108470	CastTarget	uint32_t		108264	0					
ANR	108471	CastExpression	"( zend_intptr_t ) ZEND_CALL_ARG ( NULL , i )"		108264	1					
ANR	108472	CastTarget	zend_intptr_t		108264	0					
ANR	108473	CallExpression	"ZEND_CALL_ARG ( NULL , i )"		108264	1					
ANR	108474	Callee	ZEND_CALL_ARG		108264	0					
ANR	108475	Identifier	ZEND_CALL_ARG		108264	0					
ANR	108476	ArgumentList	NULL		108264	1					
ANR	108477	Argument	NULL		108264	0					
ANR	108478	Identifier	NULL		108264	0					
ANR	108479	Argument	i		108264	1					
ANR	108480	Identifier	i		108264	0					
ANR	108481	ExpressionStatement	"zend_emit_op ( result , ZEND_DO_FCALL , NULL , NULL )"	3073:1:88475:88522	108264	4	True				
ANR	108482	CallExpression	"zend_emit_op ( result , ZEND_DO_FCALL , NULL , NULL )"		108264	0					
ANR	108483	Callee	zend_emit_op		108264	0					
ANR	108484	Identifier	zend_emit_op		108264	0					
ANR	108485	ArgumentList	result		108264	1					
ANR	108486	Argument	result		108264	0					
ANR	108487	Identifier	result		108264	0					
ANR	108488	Argument	ZEND_DO_FCALL		108264	1					
ANR	108489	Identifier	ZEND_DO_FCALL		108264	0					
ANR	108490	Argument	NULL		108264	2					
ANR	108491	Identifier	NULL		108264	0					
ANR	108492	Argument	NULL		108264	3					
ANR	108493	Identifier	NULL		108264	0					
ANR	108494	ReturnStatement	return SUCCESS ;	3075:1:88526:88540	108264	5	True				
ANR	108495	Identifier	SUCCESS		108264	0					
ANR	108496	ReturnType	int		108264	1					
ANR	108497	Identifier	zend_compile_func_cuf		108264	2					
ANR	108498	ParameterList	"znode * result , zend_ast_list * args , zend_string * lcname"		108264	3					
ANR	108499	Parameter	znode * result	3039:26:87544:87556	108264	0	True				
ANR	108500	ParameterType	znode *		108264	0					
ANR	108501	Identifier	result		108264	1					
ANR	108502	Parameter	zend_ast_list * args	3039:41:87559:87577	108264	1	True				
ANR	108503	ParameterType	zend_ast_list *		108264	0					
ANR	108504	Identifier	args		108264	1					
ANR	108505	Parameter	zend_string * lcname	3039:62:87580:87598	108264	2	True				
ANR	108506	ParameterType	zend_string *		108264	0					
ANR	108507	Identifier	lcname		108264	1					
ANR	108508	CFGEntryNode	ENTRY		108264		True				
ANR	108509	CFGExitNode	EXIT		108264		True				
ANR	108510	Symbol	opline -> op2		108264						
ANR	108511	Symbol	arg_node		108264						
ANR	108512	Symbol	IS_CV		108264						
ANR	108513	Symbol	arg_ast		108264						
ANR	108514	Symbol	BP_VAR_SHIFT		108264						
ANR	108515	Symbol	* args -> child		108264						
ANR	108516	Symbol	ZEND_CALL_ARG		108264						
ANR	108517	Symbol	opline -> result		108264						
ANR	108518	Symbol	* args		108264						
ANR	108519	Symbol	result		108264						
ANR	108520	Symbol	opline		108264						
ANR	108521	Symbol	arg_node . op_type		108264						
ANR	108522	Symbol	ZEND_SEND_USER		108264						
ANR	108523	Symbol	* * args		108264						
ANR	108524	Symbol	BP_VAR_FUNC_ARG		108264						
ANR	108525	Symbol	opline -> op2 . num		108264						
ANR	108526	Symbol	zend_is_variable		108264						
ANR	108527	Symbol	NULL		108264						
ANR	108528	Symbol	SUCCESS		108264						
ANR	108529	Symbol	zend_is_call		108264						
ANR	108530	Symbol	i		108264						
ANR	108531	Symbol	FAILURE		108264						
ANR	108532	Symbol	args		108264						
ANR	108533	Symbol	zend_args_contain_unpack		108264						
ANR	108534	Symbol	lcname		108264						
ANR	108535	Symbol	* i		108264						
ANR	108536	Symbol	ZEND_SEND_VAL		108264						
ANR	108537	Symbol	* opline		108264						
ANR	108538	Symbol	ZEND_DO_FCALL		108264						
ANR	108539	Symbol	args -> child		108264						
ANR	108540	Symbol	args -> children		108264						
ANR	108541	Symbol	send_user		108264						
ANR	108542	Symbol	& arg_node		108264						
ANR	108543	Symbol	IS_VAR		108264						
ANR	108544	Symbol	opline -> result . var		108264						
ANR	108545	Symbol	zend_emit_op		108264						
ANR	108546	Function	zend_compile_assert_side_effects	3079:0:88555:89074							
ANR	108547	FunctionDef	zend_compile_assert_side_effects (zend_ast * ast)		108546	0					
ANR	108548	CompoundStatement		3080:0:88625:89074	108546	0					
ANR	108549	IdentifierDeclStatement	int i ;	3081:1:88628:88633	108546	0	True				
ANR	108550	IdentifierDecl	i		108546	0					
ANR	108551	IdentifierDeclType	int		108546	0					
ANR	108552	Identifier	i		108546	1					
ANR	108553	IdentifierDeclStatement	int children = zend_ast_is_list ( ast ) ? zend_ast_get_list ( ast ) -> children : zend_ast_get_num_children ( ast ) ;	3082:1:88636:88740	108546	1	True				
ANR	108554	IdentifierDecl	children = zend_ast_is_list ( ast ) ? zend_ast_get_list ( ast ) -> children : zend_ast_get_num_children ( ast )		108546	0					
ANR	108555	IdentifierDeclType	int		108546	0					
ANR	108556	Identifier	children		108546	1					
ANR	108557	AssignmentExpression	children = zend_ast_is_list ( ast ) ? zend_ast_get_list ( ast ) -> children : zend_ast_get_num_children ( ast )		108546	2		=			
ANR	108558	Identifier	children		108546	0					
ANR	108559	ConditionalExpression	zend_ast_is_list ( ast ) ? zend_ast_get_list ( ast ) -> children : zend_ast_get_num_children ( ast )		108546	1					
ANR	108560	Condition	zend_ast_is_list ( ast )		108546	0					
ANR	108561	CallExpression	zend_ast_is_list ( ast )		108546	0					
ANR	108562	Callee	zend_ast_is_list		108546	0					
ANR	108563	Identifier	zend_ast_is_list		108546	0					
ANR	108564	ArgumentList	ast		108546	1					
ANR	108565	Argument	ast		108546	0					
ANR	108566	Identifier	ast		108546	0					
ANR	108567	PtrMemberAccess	zend_ast_get_list ( ast ) -> children		108546	1					
ANR	108568	CallExpression	zend_ast_get_list ( ast )		108546	0					
ANR	108569	Callee	zend_ast_get_list		108546	0					
ANR	108570	Identifier	zend_ast_get_list		108546	0					
ANR	108571	ArgumentList	ast		108546	1					
ANR	108572	Argument	ast		108546	0					
ANR	108573	Identifier	ast		108546	0					
ANR	108574	Identifier	children		108546	1					
ANR	108575	CallExpression	zend_ast_get_num_children ( ast )		108546	2					
ANR	108576	Callee	zend_ast_get_num_children		108546	0					
ANR	108577	Identifier	zend_ast_get_num_children		108546	0					
ANR	108578	ArgumentList	ast		108546	1					
ANR	108579	Argument	ast		108546	0					
ANR	108580	Identifier	ast		108546	0					
ANR	108581	ForStatement	for ( i = 0 ; i < children ; i ++ )		108546	2					
ANR	108582	ForInit	i = 0 ;	3084:6:88749:88754	108546	0	True				
ANR	108583	AssignmentExpression	i = 0		108546	0		=			
ANR	108584	Identifier	i		108546	0					
ANR	108585	PrimaryExpression	0		108546	1					
ANR	108586	Condition	i < children	3084:13:88756:88767	108546	1	True				
ANR	108587	RelationalExpression	i < children		108546	0		<			
ANR	108588	Identifier	i		108546	0					
ANR	108589	Identifier	children		108546	1					
ANR	108590	PostIncDecOperationExpression	i ++	3084:27:88770:88772	108546	2	True				
ANR	108591	Identifier	i		108546	0					
ANR	108592	IncDec	++		108546	1					
ANR	108593	CompoundStatement		6:2:153:242	108546	3					
ANR	108594	IdentifierDeclStatement	zend_ast * child = ( zend_ast_is_list ( ast ) ? zend_ast_get_list ( ast ) -> child : ast -> child ) [ i ] ;	3085:2:88779:88868	108546	0	True				
ANR	108595	IdentifierDecl	* child = ( zend_ast_is_list ( ast ) ? zend_ast_get_list ( ast ) -> child : ast -> child ) [ i ]		108546	0					
ANR	108596	IdentifierDeclType	zend_ast *		108546	0					
ANR	108597	Identifier	child		108546	1					
ANR	108598	AssignmentExpression	* child = ( zend_ast_is_list ( ast ) ? zend_ast_get_list ( ast ) -> child : ast -> child ) [ i ]		108546	2		=			
ANR	108599	Identifier	child		108546	0					
ANR	108600	ArrayIndexing	( zend_ast_is_list ( ast ) ? zend_ast_get_list ( ast ) -> child : ast -> child ) [ i ]		108546	1					
ANR	108601	ConditionalExpression	zend_ast_is_list ( ast ) ? zend_ast_get_list ( ast ) -> child : ast -> child		108546	0					
ANR	108602	Condition	zend_ast_is_list ( ast )		108546	0					
ANR	108603	CallExpression	zend_ast_is_list ( ast )		108546	0					
ANR	108604	Callee	zend_ast_is_list		108546	0					
ANR	108605	Identifier	zend_ast_is_list		108546	0					
ANR	108606	ArgumentList	ast		108546	1					
ANR	108607	Argument	ast		108546	0					
ANR	108608	Identifier	ast		108546	0					
ANR	108609	PtrMemberAccess	zend_ast_get_list ( ast ) -> child		108546	1					
ANR	108610	CallExpression	zend_ast_get_list ( ast )		108546	0					
ANR	108611	Callee	zend_ast_get_list		108546	0					
ANR	108612	Identifier	zend_ast_get_list		108546	0					
ANR	108613	ArgumentList	ast		108546	1					
ANR	108614	Argument	ast		108546	0					
ANR	108615	Identifier	ast		108546	0					
ANR	108616	Identifier	child		108546	1					
ANR	108617	PtrMemberAccess	ast -> child		108546	2					
ANR	108618	Identifier	ast		108546	0					
ANR	108619	Identifier	child		108546	1					
ANR	108620	Identifier	i		108546	1					
ANR	108621	IfStatement	if ( child )		108546	1					
ANR	108622	Condition	child	3086:6:88876:88880	108546	0	True				
ANR	108623	Identifier	child		108546	0					
ANR	108624	CompoundStatement		7:13:257:257	108546	1					
ANR	108625	IfStatement	if ( child -> kind == ZEND_AST_YIELD )		108546	0					
ANR	108626	Condition	child -> kind == ZEND_AST_YIELD	3087:7:88892:88920	108546	0	True				
ANR	108627	EqualityExpression	child -> kind == ZEND_AST_YIELD		108546	0		==			
ANR	108628	PtrMemberAccess	child -> kind		108546	0					
ANR	108629	Identifier	child		108546	0					
ANR	108630	Identifier	kind		108546	1					
ANR	108631	Identifier	ZEND_AST_YIELD		108546	1					
ANR	108632	CompoundStatement		8:38:297:297	108546	1					
ANR	108633	ExpressionStatement	zend_mark_function_as_generator ( )	3088:4:88929:88962	108546	0	True				
ANR	108634	CallExpression	zend_mark_function_as_generator ( )		108546	0					
ANR	108635	Callee	zend_mark_function_as_generator		108546	0					
ANR	108636	Identifier	zend_mark_function_as_generator		108546	0					
ANR	108637	ArgumentList			108546	1					
ANR	108638	ElseStatement	else		108546	0					
ANR	108639	IfStatement	if ( ast -> kind >= ZEND_AST_IS_LIST_SHIFT )		108546	0					
ANR	108640	Condition	ast -> kind >= ZEND_AST_IS_LIST_SHIFT	3089:14:88978:89012	108546	0	True				
ANR	108641	RelationalExpression	ast -> kind >= ZEND_AST_IS_LIST_SHIFT		108546	0		>=			
ANR	108642	PtrMemberAccess	ast -> kind		108546	0					
ANR	108643	Identifier	ast		108546	0					
ANR	108644	Identifier	kind		108546	1					
ANR	108645	Identifier	ZEND_AST_IS_LIST_SHIFT		108546	1					
ANR	108646	CompoundStatement		10:51:389:389	108546	1					
ANR	108647	ExpressionStatement	zend_compile_assert_side_effects ( child )	3090:4:89021:89060	108546	0	True				
ANR	108648	CallExpression	zend_compile_assert_side_effects ( child )		108546	0					
ANR	108649	Callee	zend_compile_assert_side_effects		108546	0					
ANR	108650	Identifier	zend_compile_assert_side_effects		108546	0					
ANR	108651	ArgumentList	child		108546	1					
ANR	108652	Argument	child		108546	0					
ANR	108653	Identifier	child		108546	0					
ANR	108654	ReturnType	static void		108546	1					
ANR	108655	Identifier	zend_compile_assert_side_effects		108546	2					
ANR	108656	ParameterList	zend_ast * ast		108546	3					
ANR	108657	Parameter	zend_ast * ast	3079:45:88600:88612	108546	0	True				
ANR	108658	ParameterType	zend_ast *		108546	0					
ANR	108659	Identifier	ast		108546	1					
ANR	108660	CFGEntryNode	ENTRY		108546		True				
ANR	108661	CFGExitNode	EXIT		108546		True				
ANR	108662	Symbol	* child		108546						
ANR	108663	Symbol	ast -> kind		108546						
ANR	108664	Symbol	ast		108546						
ANR	108665	Symbol	zend_ast_get_list ( ast ) -> children		108546						
ANR	108666	Symbol	* zend_ast_get_list ( ast ) -> child		108546						
ANR	108667	Symbol	* * zend_ast_get_list		108546						
ANR	108668	Symbol	child -> kind		108546						
ANR	108669	Symbol	i		108546						
ANR	108670	Symbol	zend_ast_get_list ( ast ) -> child		108546						
ANR	108671	Symbol	* zend_ast_get_list		108546						
ANR	108672	Symbol	ZEND_AST_YIELD		108546						
ANR	108673	Symbol	zend_ast_get_list		108546						
ANR	108674	Symbol	* i		108546						
ANR	108675	Symbol	* ast		108546						
ANR	108676	Symbol	zend_ast_is_list		108546						
ANR	108677	Symbol	children		108546						
ANR	108678	Symbol	* * ast		108546						
ANR	108679	Symbol	ZEND_AST_IS_LIST_SHIFT		108546						
ANR	108680	Symbol	* zend_ast_is_list		108546						
ANR	108681	Symbol	* ast -> child		108546						
ANR	108682	Symbol	ast -> child		108546						
ANR	108683	Symbol	zend_ast_get_num_children		108546						
ANR	108684	Symbol	child		108546						
ANR	108685	Function	zend_compile_assert	3097:0:89087:90509							
ANR	108686	FunctionDef	"zend_compile_assert (znode * result , zend_ast_list * args , zend_string * name , zend_function * fbc)"		108685	0					
ANR	108687	CompoundStatement		3098:0:89203:90509	108685	0					
ANR	108688	IfStatement	if ( EG ( assertions ) >= 0 )		108685	0					
ANR	108689	Condition	EG ( assertions ) >= 0	3099:5:89210:89228	108685	0	True				
ANR	108690	RelationalExpression	EG ( assertions ) >= 0		108685	0		>=			
ANR	108691	CallExpression	EG ( assertions )		108685	0					
ANR	108692	Callee	EG		108685	0					
ANR	108693	Identifier	EG		108685	0					
ANR	108694	ArgumentList	assertions		108685	1					
ANR	108695	Argument	assertions		108685	0					
ANR	108696	Identifier	assertions		108685	0					
ANR	108697	PrimaryExpression	0		108685	1					
ANR	108698	CompoundStatement		5:2:69:135	108685	1					
ANR	108699	IdentifierDeclStatement	znode name_node ;	3100:2:89235:89250	108685	0	True				
ANR	108700	IdentifierDecl	name_node		108685	0					
ANR	108701	IdentifierDeclType	znode		108685	0					
ANR	108702	Identifier	name_node		108685	1					
ANR	108703	IdentifierDeclStatement	zend_op * opline ;	3101:2:89254:89269	108685	1	True				
ANR	108704	IdentifierDecl	* opline		108685	0					
ANR	108705	IdentifierDeclType	zend_op *		108685	0					
ANR	108706	Identifier	opline		108685	1					
ANR	108707	IdentifierDeclStatement	uint32_t check_op_number = get_next_op_number ( CG ( active_op_array ) ) ;	3102:2:89273:89339	108685	2	True				
ANR	108708	IdentifierDecl	check_op_number = get_next_op_number ( CG ( active_op_array ) )		108685	0					
ANR	108709	IdentifierDeclType	uint32_t		108685	0					
ANR	108710	Identifier	check_op_number		108685	1					
ANR	108711	AssignmentExpression	check_op_number = get_next_op_number ( CG ( active_op_array ) )		108685	2		=			
ANR	108712	Identifier	check_op_number		108685	0					
ANR	108713	CallExpression	get_next_op_number ( CG ( active_op_array ) )		108685	1					
ANR	108714	Callee	get_next_op_number		108685	0					
ANR	108715	Identifier	get_next_op_number		108685	0					
ANR	108716	ArgumentList	CG ( active_op_array )		108685	1					
ANR	108717	Argument	CG ( active_op_array )		108685	0					
ANR	108718	CallExpression	CG ( active_op_array )		108685	0					
ANR	108719	Callee	CG		108685	0					
ANR	108720	Identifier	CG		108685	0					
ANR	108721	ArgumentList	active_op_array		108685	1					
ANR	108722	Argument	active_op_array		108685	0					
ANR	108723	Identifier	active_op_array		108685	0					
ANR	108724	ExpressionStatement	"zend_emit_op ( NULL , ZEND_ASSERT_CHECK , NULL , NULL )"	3104:2:89344:89393	108685	3	True				
ANR	108725	CallExpression	"zend_emit_op ( NULL , ZEND_ASSERT_CHECK , NULL , NULL )"		108685	0					
ANR	108726	Callee	zend_emit_op		108685	0					
ANR	108727	Identifier	zend_emit_op		108685	0					
ANR	108728	ArgumentList	NULL		108685	1					
ANR	108729	Argument	NULL		108685	0					
ANR	108730	Identifier	NULL		108685	0					
ANR	108731	Argument	ZEND_ASSERT_CHECK		108685	1					
ANR	108732	Identifier	ZEND_ASSERT_CHECK		108685	0					
ANR	108733	Argument	NULL		108685	2					
ANR	108734	Identifier	NULL		108685	0					
ANR	108735	Argument	NULL		108685	3					
ANR	108736	Identifier	NULL		108685	0					
ANR	108737	IfStatement	if ( fbc )		108685	4					
ANR	108738	Condition	fbc	3106:6:89402:89404	108685	0	True				
ANR	108739	Identifier	fbc		108685	0					
ANR	108740	CompoundStatement		9:11:203:203	108685	1					
ANR	108741	ExpressionStatement	name_node . op_type = IS_CONST	3107:3:89412:89440	108685	0	True				
ANR	108742	AssignmentExpression	name_node . op_type = IS_CONST		108685	0		=			
ANR	108743	MemberAccess	name_node . op_type		108685	0					
ANR	108744	Identifier	name_node		108685	0					
ANR	108745	Identifier	op_type		108685	1					
ANR	108746	Identifier	IS_CONST		108685	1					
ANR	108747	ExpressionStatement	"ZVAL_STR_COPY ( & name_node . u . constant , name )"	3108:3:89445:89487	108685	1	True				
ANR	108748	CallExpression	"ZVAL_STR_COPY ( & name_node . u . constant , name )"		108685	0					
ANR	108749	Callee	ZVAL_STR_COPY		108685	0					
ANR	108750	Identifier	ZVAL_STR_COPY		108685	0					
ANR	108751	ArgumentList	& name_node . u . constant		108685	1					
ANR	108752	Argument	& name_node . u . constant		108685	0					
ANR	108753	UnaryOperationExpression	& name_node . u . constant		108685	0					
ANR	108754	UnaryOperator	&		108685	0					
ANR	108755	MemberAccess	name_node . u . constant		108685	1					
ANR	108756	MemberAccess	name_node . u		108685	0					
ANR	108757	Identifier	name_node		108685	0					
ANR	108758	Identifier	u		108685	1					
ANR	108759	Identifier	constant		108685	1					
ANR	108760	Argument	name		108685	1					
ANR	108761	Identifier	name		108685	0					
ANR	108762	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_INIT_FCALL , NULL , & name_node )"	3110:3:89493:89555	108685	2	True				
ANR	108763	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_INIT_FCALL , NULL , & name_node )"		108685	0		=			
ANR	108764	Identifier	opline		108685	0					
ANR	108765	CallExpression	"zend_emit_op ( NULL , ZEND_INIT_FCALL , NULL , & name_node )"		108685	1					
ANR	108766	Callee	zend_emit_op		108685	0					
ANR	108767	Identifier	zend_emit_op		108685	0					
ANR	108768	ArgumentList	NULL		108685	1					
ANR	108769	Argument	NULL		108685	0					
ANR	108770	Identifier	NULL		108685	0					
ANR	108771	Argument	ZEND_INIT_FCALL		108685	1					
ANR	108772	Identifier	ZEND_INIT_FCALL		108685	0					
ANR	108773	Argument	NULL		108685	2					
ANR	108774	Identifier	NULL		108685	0					
ANR	108775	Argument	& name_node		108685	3					
ANR	108776	UnaryOperationExpression	& name_node		108685	0					
ANR	108777	UnaryOperator	&		108685	0					
ANR	108778	Identifier	name_node		108685	1					
ANR	108779	ElseStatement	else		108685	0					
ANR	108780	CompoundStatement		14:9:362:362	108685	0					
ANR	108781	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_INIT_NS_FCALL_BY_NAME , NULL , NULL )"	3112:3:89571:89638	108685	0	True				
ANR	108782	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_INIT_NS_FCALL_BY_NAME , NULL , NULL )"		108685	0		=			
ANR	108783	Identifier	opline		108685	0					
ANR	108784	CallExpression	"zend_emit_op ( NULL , ZEND_INIT_NS_FCALL_BY_NAME , NULL , NULL )"		108685	1					
ANR	108785	Callee	zend_emit_op		108685	0					
ANR	108786	Identifier	zend_emit_op		108685	0					
ANR	108787	ArgumentList	NULL		108685	1					
ANR	108788	Argument	NULL		108685	0					
ANR	108789	Identifier	NULL		108685	0					
ANR	108790	Argument	ZEND_INIT_NS_FCALL_BY_NAME		108685	1					
ANR	108791	Identifier	ZEND_INIT_NS_FCALL_BY_NAME		108685	0					
ANR	108792	Argument	NULL		108685	2					
ANR	108793	Identifier	NULL		108685	0					
ANR	108794	Argument	NULL		108685	3					
ANR	108795	Identifier	NULL		108685	0					
ANR	108796	ExpressionStatement	opline -> op2_type = IS_CONST	3113:3:89643:89670	108685	1	True				
ANR	108797	AssignmentExpression	opline -> op2_type = IS_CONST		108685	0		=			
ANR	108798	PtrMemberAccess	opline -> op2_type		108685	0					
ANR	108799	Identifier	opline		108685	0					
ANR	108800	Identifier	op2_type		108685	1					
ANR	108801	Identifier	IS_CONST		108685	1					
ANR	108802	ExpressionStatement	"opline -> op2 . constant = zend_add_ns_func_name_literal ( CG ( active_op_array ) , name )"	3114:3:89675:89759	108685	2	True				
ANR	108803	AssignmentExpression	"opline -> op2 . constant = zend_add_ns_func_name_literal ( CG ( active_op_array ) , name )"		108685	0		=			
ANR	108804	MemberAccess	opline -> op2 . constant		108685	0					
ANR	108805	PtrMemberAccess	opline -> op2		108685	0					
ANR	108806	Identifier	opline		108685	0					
ANR	108807	Identifier	op2		108685	1					
ANR	108808	Identifier	constant		108685	1					
ANR	108809	CallExpression	"zend_add_ns_func_name_literal ( CG ( active_op_array ) , name )"		108685	1					
ANR	108810	Callee	zend_add_ns_func_name_literal		108685	0					
ANR	108811	Identifier	zend_add_ns_func_name_literal		108685	0					
ANR	108812	ArgumentList	CG ( active_op_array )		108685	1					
ANR	108813	Argument	CG ( active_op_array )		108685	0					
ANR	108814	CallExpression	CG ( active_op_array )		108685	0					
ANR	108815	Callee	CG		108685	0					
ANR	108816	Identifier	CG		108685	0					
ANR	108817	ArgumentList	active_op_array		108685	1					
ANR	108818	Argument	active_op_array		108685	0					
ANR	108819	Identifier	active_op_array		108685	0					
ANR	108820	Argument	name		108685	1					
ANR	108821	Identifier	name		108685	0					
ANR	108822	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	3117:2:89767:89810	108685	5	True				
ANR	108823	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		108685	0					
ANR	108824	Callee	zend_alloc_cache_slot		108685	0					
ANR	108825	Identifier	zend_alloc_cache_slot		108685	0					
ANR	108826	ArgumentList	opline -> op2 . constant		108685	1					
ANR	108827	Argument	opline -> op2 . constant		108685	0					
ANR	108828	MemberAccess	opline -> op2 . constant		108685	0					
ANR	108829	PtrMemberAccess	opline -> op2		108685	0					
ANR	108830	Identifier	opline		108685	0					
ANR	108831	Identifier	op2		108685	1					
ANR	108832	Identifier	constant		108685	1					
ANR	108833	IfStatement	if ( args -> children == 1 && ( args -> child [ 0 ] -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( args -> child [ 0 ] ) ) != IS_STRING ) )		108685	6					
ANR	108834	Condition	args -> children == 1 && ( args -> child [ 0 ] -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( args -> child [ 0 ] ) ) != IS_STRING )	3119:6:89819:89953	108685	0	True				
ANR	108835	AndExpression	args -> children == 1 && ( args -> child [ 0 ] -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( args -> child [ 0 ] ) ) != IS_STRING )		108685	0		&&			
ANR	108836	EqualityExpression	args -> children == 1		108685	0		==			
ANR	108837	PtrMemberAccess	args -> children		108685	0					
ANR	108838	Identifier	args		108685	0					
ANR	108839	Identifier	children		108685	1					
ANR	108840	PrimaryExpression	1		108685	1					
ANR	108841	OrExpression	args -> child [ 0 ] -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( args -> child [ 0 ] ) ) != IS_STRING		108685	1		||			
ANR	108842	EqualityExpression	args -> child [ 0 ] -> kind != ZEND_AST_ZVAL		108685	0		!=			
ANR	108843	PtrMemberAccess	args -> child [ 0 ] -> kind		108685	0					
ANR	108844	ArrayIndexing	args -> child [ 0 ]		108685	0					
ANR	108845	PtrMemberAccess	args -> child		108685	0					
ANR	108846	Identifier	args		108685	0					
ANR	108847	Identifier	child		108685	1					
ANR	108848	PrimaryExpression	0		108685	1					
ANR	108849	Identifier	kind		108685	1					
ANR	108850	Identifier	ZEND_AST_ZVAL		108685	1					
ANR	108851	EqualityExpression	Z_TYPE_P ( zend_ast_get_zval ( args -> child [ 0 ] ) ) != IS_STRING		108685	1		!=			
ANR	108852	CallExpression	Z_TYPE_P ( zend_ast_get_zval ( args -> child [ 0 ] ) )		108685	0					
ANR	108853	Callee	Z_TYPE_P		108685	0					
ANR	108854	Identifier	Z_TYPE_P		108685	0					
ANR	108855	ArgumentList	zend_ast_get_zval ( args -> child [ 0 ] )		108685	1					
ANR	108856	Argument	zend_ast_get_zval ( args -> child [ 0 ] )		108685	0					
ANR	108857	CallExpression	zend_ast_get_zval ( args -> child [ 0 ] )		108685	0					
ANR	108858	Callee	zend_ast_get_zval		108685	0					
ANR	108859	Identifier	zend_ast_get_zval		108685	0					
ANR	108860	ArgumentList	args -> child [ 0 ]		108685	1					
ANR	108861	Argument	args -> child [ 0 ]		108685	0					
ANR	108862	ArrayIndexing	args -> child [ 0 ]		108685	0					
ANR	108863	PtrMemberAccess	args -> child		108685	0					
ANR	108864	Identifier	args		108685	0					
ANR	108865	Identifier	child		108685	1					
ANR	108866	PrimaryExpression	0		108685	1					
ANR	108867	Identifier	IS_STRING		108685	1					
ANR	108868	CompoundStatement		24:66:752:752	108685	1					
ANR	108869	ExpressionStatement	"zend_ast_list_add ( ( zend_ast * ) args , zend_ast_create_zval_from_str ( zend_ast_export ( ""assert("" , args -> child [ 0 ] , "")"" ) ) )"	3123:3:90014:90138	108685	0	True				
ANR	108870	CallExpression	"zend_ast_list_add ( ( zend_ast * ) args , zend_ast_create_zval_from_str ( zend_ast_export ( ""assert("" , args -> child [ 0 ] , "")"" ) ) )"		108685	0					
ANR	108871	Callee	zend_ast_list_add		108685	0					
ANR	108872	Identifier	zend_ast_list_add		108685	0					
ANR	108873	ArgumentList	( zend_ast * ) args		108685	1					
ANR	108874	Argument	( zend_ast * ) args		108685	0					
ANR	108875	CastExpression	( zend_ast * ) args		108685	0					
ANR	108876	CastTarget	zend_ast *		108685	0					
ANR	108877	Identifier	args		108685	1					
ANR	108878	Argument	"zend_ast_create_zval_from_str ( zend_ast_export ( ""assert("" , args -> child [ 0 ] , "")"" ) )"		108685	1					
ANR	108879	CallExpression	"zend_ast_create_zval_from_str ( zend_ast_export ( ""assert("" , args -> child [ 0 ] , "")"" ) )"		108685	0					
ANR	108880	Callee	zend_ast_create_zval_from_str		108685	0					
ANR	108881	Identifier	zend_ast_create_zval_from_str		108685	0					
ANR	108882	ArgumentList	"zend_ast_export ( ""assert("" , args -> child [ 0 ] , "")"" )"		108685	1					
ANR	108883	Argument	"zend_ast_export ( ""assert("" , args -> child [ 0 ] , "")"" )"		108685	0					
ANR	108884	CallExpression	"zend_ast_export ( ""assert("" , args -> child [ 0 ] , "")"" )"		108685	0					
ANR	108885	Callee	zend_ast_export		108685	0					
ANR	108886	Identifier	zend_ast_export		108685	0					
ANR	108887	ArgumentList	"""assert("""		108685	1					
ANR	108888	Argument	"""assert("""		108685	0					
ANR	108889	PrimaryExpression	"""assert("""		108685	0					
ANR	108890	Argument	args -> child [ 0 ]		108685	1					
ANR	108891	ArrayIndexing	args -> child [ 0 ]		108685	0					
ANR	108892	PtrMemberAccess	args -> child		108685	0					
ANR	108893	Identifier	args		108685	0					
ANR	108894	Identifier	child		108685	1					
ANR	108895	PrimaryExpression	0		108685	1					
ANR	108896	Argument	""")"""		108685	2					
ANR	108897	PrimaryExpression	""")"""		108685	0					
ANR	108898	ExpressionStatement	"zend_compile_call_common ( result , ( zend_ast * ) args , fbc )"	3128:2:90147:90201	108685	7	True				
ANR	108899	CallExpression	"zend_compile_call_common ( result , ( zend_ast * ) args , fbc )"		108685	0					
ANR	108900	Callee	zend_compile_call_common		108685	0					
ANR	108901	Identifier	zend_compile_call_common		108685	0					
ANR	108902	ArgumentList	result		108685	1					
ANR	108903	Argument	result		108685	0					
ANR	108904	Identifier	result		108685	0					
ANR	108905	Argument	( zend_ast * ) args		108685	1					
ANR	108906	CastExpression	( zend_ast * ) args		108685	0					
ANR	108907	CastTarget	zend_ast *		108685	0					
ANR	108908	Identifier	args		108685	1					
ANR	108909	Argument	fbc		108685	2					
ANR	108910	Identifier	fbc		108685	0					
ANR	108911	ExpressionStatement	CG ( active_op_array ) -> opcodes [ check_op_number ] . op2 . opline_num = get_next_op_number ( CG ( active_op_array ) )	3130:2:90206:90308	108685	8	True				
ANR	108912	AssignmentExpression	CG ( active_op_array ) -> opcodes [ check_op_number ] . op2 . opline_num = get_next_op_number ( CG ( active_op_array ) )		108685	0		=			
ANR	108913	MemberAccess	CG ( active_op_array ) -> opcodes [ check_op_number ] . op2 . opline_num		108685	0					
ANR	108914	MemberAccess	CG ( active_op_array ) -> opcodes [ check_op_number ] . op2		108685	0					
ANR	108915	ArrayIndexing	CG ( active_op_array ) -> opcodes [ check_op_number ]		108685	0					
ANR	108916	PtrMemberAccess	CG ( active_op_array ) -> opcodes		108685	0					
ANR	108917	CallExpression	CG ( active_op_array )		108685	0					
ANR	108918	Callee	CG		108685	0					
ANR	108919	Identifier	CG		108685	0					
ANR	108920	ArgumentList	active_op_array		108685	1					
ANR	108921	Argument	active_op_array		108685	0					
ANR	108922	Identifier	active_op_array		108685	0					
ANR	108923	Identifier	opcodes		108685	1					
ANR	108924	Identifier	check_op_number		108685	1					
ANR	108925	Identifier	op2		108685	1					
ANR	108926	Identifier	opline_num		108685	1					
ANR	108927	CallExpression	get_next_op_number ( CG ( active_op_array ) )		108685	1					
ANR	108928	Callee	get_next_op_number		108685	0					
ANR	108929	Identifier	get_next_op_number		108685	0					
ANR	108930	ArgumentList	CG ( active_op_array )		108685	1					
ANR	108931	Argument	CG ( active_op_array )		108685	0					
ANR	108932	CallExpression	CG ( active_op_array )		108685	0					
ANR	108933	Callee	CG		108685	0					
ANR	108934	Identifier	CG		108685	0					
ANR	108935	ArgumentList	active_op_array		108685	1					
ANR	108936	Argument	active_op_array		108685	0					
ANR	108937	Identifier	active_op_array		108685	0					
ANR	108938	ElseStatement	else		108685	0					
ANR	108939	CompoundStatement		34:8:1114:1114	108685	0					
ANR	108940	IfStatement	if ( ! fbc )		108685	0					
ANR	108941	Condition	! fbc	3132:6:90326:90329	108685	0	True				
ANR	108942	UnaryOperationExpression	! fbc		108685	0					
ANR	108943	UnaryOperator	!		108685	0					
ANR	108944	Identifier	fbc		108685	1					
ANR	108945	CompoundStatement		35:12:1128:1128	108685	1					
ANR	108946	ExpressionStatement	zend_string_release ( name )	3133:3:90337:90362	108685	0	True				
ANR	108947	CallExpression	zend_string_release ( name )		108685	0					
ANR	108948	Callee	zend_string_release		108685	0					
ANR	108949	Identifier	zend_string_release		108685	0					
ANR	108950	ArgumentList	name		108685	1					
ANR	108951	Argument	name		108685	0					
ANR	108952	Identifier	name		108685	0					
ANR	108953	ExpressionStatement	result -> op_type = IS_CONST	3135:2:90370:90396	108685	1	True				
ANR	108954	AssignmentExpression	result -> op_type = IS_CONST		108685	0		=			
ANR	108955	PtrMemberAccess	result -> op_type		108685	0					
ANR	108956	Identifier	result		108685	0					
ANR	108957	Identifier	op_type		108685	1					
ANR	108958	Identifier	IS_CONST		108685	1					
ANR	108959	ExpressionStatement	ZVAL_TRUE ( & result -> u . constant )	3136:2:90400:90430	108685	2	True				
ANR	108960	CallExpression	ZVAL_TRUE ( & result -> u . constant )		108685	0					
ANR	108961	Callee	ZVAL_TRUE		108685	0					
ANR	108962	Identifier	ZVAL_TRUE		108685	0					
ANR	108963	ArgumentList	& result -> u . constant		108685	1					
ANR	108964	Argument	& result -> u . constant		108685	0					
ANR	108965	UnaryOperationExpression	& result -> u . constant		108685	0					
ANR	108966	UnaryOperator	&		108685	0					
ANR	108967	MemberAccess	result -> u . constant		108685	1					
ANR	108968	PtrMemberAccess	result -> u		108685	0					
ANR	108969	Identifier	result		108685	0					
ANR	108970	Identifier	u		108685	1					
ANR	108971	Identifier	constant		108685	1					
ANR	108972	ExpressionStatement	zend_compile_assert_side_effects ( ( zend_ast * ) args )	3138:2:90435:90486	108685	3	True				
ANR	108973	CallExpression	zend_compile_assert_side_effects ( ( zend_ast * ) args )		108685	0					
ANR	108974	Callee	zend_compile_assert_side_effects		108685	0					
ANR	108975	Identifier	zend_compile_assert_side_effects		108685	0					
ANR	108976	ArgumentList	( zend_ast * ) args		108685	1					
ANR	108977	Argument	( zend_ast * ) args		108685	0					
ANR	108978	CastExpression	( zend_ast * ) args		108685	0					
ANR	108979	CastTarget	zend_ast *		108685	0					
ANR	108980	Identifier	args		108685	1					
ANR	108981	ReturnStatement	return SUCCESS ;	3141:1:90493:90507	108685	1	True				
ANR	108982	Identifier	SUCCESS		108685	0					
ANR	108983	ReturnType	static int		108685	1					
ANR	108984	Identifier	zend_compile_assert		108685	2					
ANR	108985	ParameterList	"znode * result , zend_ast_list * args , zend_string * name , zend_function * fbc"		108685	3					
ANR	108986	Parameter	znode * result	3097:31:89118:89130	108685	0	True				
ANR	108987	ParameterType	znode *		108685	0					
ANR	108988	Identifier	result		108685	1					
ANR	108989	Parameter	zend_ast_list * args	3097:46:89133:89151	108685	1	True				
ANR	108990	ParameterType	zend_ast_list *		108685	0					
ANR	108991	Identifier	args		108685	1					
ANR	108992	Parameter	zend_string * name	3097:67:89154:89170	108685	2	True				
ANR	108993	ParameterType	zend_string *		108685	0					
ANR	108994	Identifier	name		108685	1					
ANR	108995	Parameter	zend_function * fbc	3097:86:89173:89190	108685	3	True				
ANR	108996	ParameterType	zend_function *		108685	0					
ANR	108997	Identifier	fbc		108685	1					
ANR	108998	CFGEntryNode	ENTRY		108685		True				
ANR	108999	CFGExitNode	EXIT		108685		True				
ANR	109000	Symbol	ZEND_ASSERT_CHECK		108685						
ANR	109001	Symbol	* CG		108685						
ANR	109002	Symbol	CG ( active_op_array ) -> opcodes		108685						
ANR	109003	Symbol	result -> u		108685						
ANR	109004	Symbol	* args		108685						
ANR	109005	Symbol	* * * args		108685						
ANR	109006	Symbol	opline		108685						
ANR	109007	Symbol	ZEND_INIT_FCALL		108685						
ANR	109008	Symbol	& name_node		108685						
ANR	109009	Symbol	ZEND_AST_ZVAL		108685						
ANR	109010	Symbol	zend_ast_create_zval_from_str		108685						
ANR	109011	Symbol	assertions		108685						
ANR	109012	Symbol	IS_STRING		108685						
ANR	109013	Symbol	* * args		108685						
ANR	109014	Symbol	* CG ( active_op_array ) -> opcodes		108685						
ANR	109015	Symbol	args -> child [ 0 ] -> kind		108685						
ANR	109016	Symbol	EG		108685						
ANR	109017	Symbol	IS_CONST		108685						
ANR	109018	Symbol	NULL		108685						
ANR	109019	Symbol	ZEND_INIT_NS_FCALL_BY_NAME		108685						
ANR	109020	Symbol	fbc		108685						
ANR	109021	Symbol	name_node . u		108685						
ANR	109022	Symbol	args -> child		108685						
ANR	109023	Symbol	name		108685						
ANR	109024	Symbol	& name_node . u . constant		108685						
ANR	109025	Symbol	* check_op_number		108685						
ANR	109026	Symbol	zend_ast_export		108685						
ANR	109027	Symbol	zend_ast_get_zval		108685						
ANR	109028	Symbol	name_node		108685						
ANR	109029	Symbol	zend_emit_op		108685						
ANR	109030	Symbol	opline -> op2		108685						
ANR	109031	Symbol	* args -> child		108685						
ANR	109032	Symbol	CG ( active_op_array ) -> opcodes [ check_op_number ] . op2		108685						
ANR	109033	Symbol	result -> op_type		108685						
ANR	109034	Symbol	zend_add_ns_func_name_literal		108685						
ANR	109035	Symbol	result		108685						
ANR	109036	Symbol	* * CG		108685						
ANR	109037	Symbol	* result		108685						
ANR	109038	Symbol	check_op_number		108685						
ANR	109039	Symbol	& result -> u . constant		108685						
ANR	109040	Symbol	* * args -> child		108685						
ANR	109041	Symbol	CG ( active_op_array ) -> opcodes [ check_op_number ] . op2 . opline_num		108685						
ANR	109042	Symbol	& name_node . u		108685						
ANR	109043	Symbol	SUCCESS		108685						
ANR	109044	Symbol	CG		108685						
ANR	109045	Symbol	& result -> u		108685						
ANR	109046	Symbol	active_op_array		108685						
ANR	109047	Symbol	Z_TYPE_P		108685						
ANR	109048	Symbol	args		108685						
ANR	109049	Symbol	name_node . op_type		108685						
ANR	109050	Symbol	* opline		108685						
ANR	109051	Symbol	args -> children		108685						
ANR	109052	Symbol	opline -> op2 . constant		108685						
ANR	109053	Symbol	opline -> op2_type		108685						
ANR	109054	Symbol	get_next_op_number		108685						
ANR	109055	Function	zend_try_compile_special_func	3145:0:90522:92566							
ANR	109056	FunctionDef	"zend_try_compile_special_func (znode * result , zend_string * lcname , zend_ast_list * args , zend_function * fbc)"		109055	0					
ANR	109057	CompoundStatement		3146:0:90643:92566	109055	0					
ANR	109058	IfStatement	if ( fbc -> internal_function . handler == ZEND_FN ( display_disabled_function ) )		109055	0					
ANR	109059	Condition	fbc -> internal_function . handler == ZEND_FN ( display_disabled_function )	3147:5:90650:90717	109055	0	True				
ANR	109060	EqualityExpression	fbc -> internal_function . handler == ZEND_FN ( display_disabled_function )		109055	0		==			
ANR	109061	MemberAccess	fbc -> internal_function . handler		109055	0					
ANR	109062	PtrMemberAccess	fbc -> internal_function		109055	0					
ANR	109063	Identifier	fbc		109055	0					
ANR	109064	Identifier	internal_function		109055	1					
ANR	109065	Identifier	handler		109055	1					
ANR	109066	CallExpression	ZEND_FN ( display_disabled_function )		109055	1					
ANR	109067	Callee	ZEND_FN		109055	0					
ANR	109068	Identifier	ZEND_FN		109055	0					
ANR	109069	ArgumentList	display_disabled_function		109055	1					
ANR	109070	Argument	display_disabled_function		109055	0					
ANR	109071	Identifier	display_disabled_function		109055	0					
ANR	109072	CompoundStatement		2:75:76:76	109055	1					
ANR	109073	ReturnStatement	return FAILURE ;	3148:2:90724:90738	109055	0	True				
ANR	109074	Identifier	FAILURE		109055	0					
ANR	109075	IfStatement	"if ( zend_string_equals_literal ( lcname , ""strlen"" ) )"		109055	1					
ANR	109076	Condition	"zend_string_equals_literal ( lcname , ""strlen"" )"	3151:5:90749:90792	109055	0	True				
ANR	109077	CallExpression	"zend_string_equals_literal ( lcname , ""strlen"" )"		109055	0					
ANR	109078	Callee	zend_string_equals_literal		109055	0					
ANR	109079	Identifier	zend_string_equals_literal		109055	0					
ANR	109080	ArgumentList	lcname		109055	1					
ANR	109081	Argument	lcname		109055	0					
ANR	109082	Identifier	lcname		109055	0					
ANR	109083	Argument	"""strlen"""		109055	1					
ANR	109084	PrimaryExpression	"""strlen"""		109055	0					
ANR	109085	CompoundStatement		6:51:151:151	109055	1					
ANR	109086	ReturnStatement	"return zend_compile_func_strlen ( result , args ) ;"	3152:2:90799:90844	109055	0	True				
ANR	109087	CallExpression	"zend_compile_func_strlen ( result , args )"		109055	0					
ANR	109088	Callee	zend_compile_func_strlen		109055	0					
ANR	109089	Identifier	zend_compile_func_strlen		109055	0					
ANR	109090	ArgumentList	result		109055	1					
ANR	109091	Argument	result		109055	0					
ANR	109092	Identifier	result		109055	0					
ANR	109093	Argument	args		109055	1					
ANR	109094	Identifier	args		109055	0					
ANR	109095	ElseStatement	else		109055	0					
ANR	109096	IfStatement	"if ( zend_string_equals_literal ( lcname , ""is_null"" ) )"		109055	0					
ANR	109097	Condition	"zend_string_equals_literal ( lcname , ""is_null"" )"	3153:12:90858:90902	109055	0	True				
ANR	109098	CallExpression	"zend_string_equals_literal ( lcname , ""is_null"" )"		109055	0					
ANR	109099	Callee	zend_string_equals_literal		109055	0					
ANR	109100	Identifier	zend_string_equals_literal		109055	0					
ANR	109101	ArgumentList	lcname		109055	1					
ANR	109102	Argument	lcname		109055	0					
ANR	109103	Identifier	lcname		109055	0					
ANR	109104	Argument	"""is_null"""		109055	1					
ANR	109105	PrimaryExpression	"""is_null"""		109055	0					
ANR	109106	CompoundStatement		8:59:261:261	109055	1					
ANR	109107	ReturnStatement	"return zend_compile_func_typecheck ( result , args , IS_NULL ) ;"	3154:2:90909:90966	109055	0	True				
ANR	109108	CallExpression	"zend_compile_func_typecheck ( result , args , IS_NULL )"		109055	0					
ANR	109109	Callee	zend_compile_func_typecheck		109055	0					
ANR	109110	Identifier	zend_compile_func_typecheck		109055	0					
ANR	109111	ArgumentList	result		109055	1					
ANR	109112	Argument	result		109055	0					
ANR	109113	Identifier	result		109055	0					
ANR	109114	Argument	args		109055	1					
ANR	109115	Identifier	args		109055	0					
ANR	109116	Argument	IS_NULL		109055	2					
ANR	109117	Identifier	IS_NULL		109055	0					
ANR	109118	ElseStatement	else		109055	0					
ANR	109119	IfStatement	"if ( zend_string_equals_literal ( lcname , ""is_bool"" ) )"		109055	0					
ANR	109120	Condition	"zend_string_equals_literal ( lcname , ""is_bool"" )"	3155:12:90980:91024	109055	0	True				
ANR	109121	CallExpression	"zend_string_equals_literal ( lcname , ""is_bool"" )"		109055	0					
ANR	109122	Callee	zend_string_equals_literal		109055	0					
ANR	109123	Identifier	zend_string_equals_literal		109055	0					
ANR	109124	ArgumentList	lcname		109055	1					
ANR	109125	Argument	lcname		109055	0					
ANR	109126	Identifier	lcname		109055	0					
ANR	109127	Argument	"""is_bool"""		109055	1					
ANR	109128	PrimaryExpression	"""is_bool"""		109055	0					
ANR	109129	CompoundStatement		10:59:383:383	109055	1					
ANR	109130	ReturnStatement	"return zend_compile_func_typecheck ( result , args , _IS_BOOL ) ;"	3156:2:91031:91089	109055	0	True				
ANR	109131	CallExpression	"zend_compile_func_typecheck ( result , args , _IS_BOOL )"		109055	0					
ANR	109132	Callee	zend_compile_func_typecheck		109055	0					
ANR	109133	Identifier	zend_compile_func_typecheck		109055	0					
ANR	109134	ArgumentList	result		109055	1					
ANR	109135	Argument	result		109055	0					
ANR	109136	Identifier	result		109055	0					
ANR	109137	Argument	args		109055	1					
ANR	109138	Identifier	args		109055	0					
ANR	109139	Argument	_IS_BOOL		109055	2					
ANR	109140	Identifier	_IS_BOOL		109055	0					
ANR	109141	ElseStatement	else		109055	0					
ANR	109142	IfStatement	"if ( zend_string_equals_literal ( lcname , ""is_long"" ) || zend_string_equals_literal ( lcname , ""is_int"" ) || zend_string_equals_literal ( lcname , ""is_integer"" ) )"		109055	0					
ANR	109143	Condition	"zend_string_equals_literal ( lcname , ""is_long"" ) || zend_string_equals_literal ( lcname , ""is_int"" ) || zend_string_equals_literal ( lcname , ""is_integer"" )"	3157:12:91103:91251	109055	0	True				
ANR	109144	OrExpression	"zend_string_equals_literal ( lcname , ""is_long"" ) || zend_string_equals_literal ( lcname , ""is_int"" ) || zend_string_equals_literal ( lcname , ""is_integer"" )"		109055	0		||			
ANR	109145	CallExpression	"zend_string_equals_literal ( lcname , ""is_long"" )"		109055	0					
ANR	109146	Callee	zend_string_equals_literal		109055	0					
ANR	109147	Identifier	zend_string_equals_literal		109055	0					
ANR	109148	ArgumentList	lcname		109055	1					
ANR	109149	Argument	lcname		109055	0					
ANR	109150	Identifier	lcname		109055	0					
ANR	109151	Argument	"""is_long"""		109055	1					
ANR	109152	PrimaryExpression	"""is_long"""		109055	0					
ANR	109153	OrExpression	"zend_string_equals_literal ( lcname , ""is_int"" ) || zend_string_equals_literal ( lcname , ""is_integer"" )"		109055	1		||			
ANR	109154	CallExpression	"zend_string_equals_literal ( lcname , ""is_int"" )"		109055	0					
ANR	109155	Callee	zend_string_equals_literal		109055	0					
ANR	109156	Identifier	zend_string_equals_literal		109055	0					
ANR	109157	ArgumentList	lcname		109055	1					
ANR	109158	Argument	lcname		109055	0					
ANR	109159	Identifier	lcname		109055	0					
ANR	109160	Argument	"""is_int"""		109055	1					
ANR	109161	PrimaryExpression	"""is_int"""		109055	0					
ANR	109162	CallExpression	"zend_string_equals_literal ( lcname , ""is_integer"" )"		109055	1					
ANR	109163	Callee	zend_string_equals_literal		109055	0					
ANR	109164	Identifier	zend_string_equals_literal		109055	0					
ANR	109165	ArgumentList	lcname		109055	1					
ANR	109166	Argument	lcname		109055	0					
ANR	109167	Identifier	lcname		109055	0					
ANR	109168	Argument	"""is_integer"""		109055	1					
ANR	109169	PrimaryExpression	"""is_integer"""		109055	0					
ANR	109170	CompoundStatement		15:3:612:612	109055	1					
ANR	109171	ReturnStatement	"return zend_compile_func_typecheck ( result , args , IS_LONG ) ;"	3161:2:91260:91317	109055	0	True				
ANR	109172	CallExpression	"zend_compile_func_typecheck ( result , args , IS_LONG )"		109055	0					
ANR	109173	Callee	zend_compile_func_typecheck		109055	0					
ANR	109174	Identifier	zend_compile_func_typecheck		109055	0					
ANR	109175	ArgumentList	result		109055	1					
ANR	109176	Argument	result		109055	0					
ANR	109177	Identifier	result		109055	0					
ANR	109178	Argument	args		109055	1					
ANR	109179	Identifier	args		109055	0					
ANR	109180	Argument	IS_LONG		109055	2					
ANR	109181	Identifier	IS_LONG		109055	0					
ANR	109182	ElseStatement	else		109055	0					
ANR	109183	IfStatement	"if ( zend_string_equals_literal ( lcname , ""is_float"" ) || zend_string_equals_literal ( lcname , ""is_double"" ) || zend_string_equals_literal ( lcname , ""is_real"" ) )"		109055	0					
ANR	109184	Condition	"zend_string_equals_literal ( lcname , ""is_float"" ) || zend_string_equals_literal ( lcname , ""is_double"" ) || zend_string_equals_literal ( lcname , ""is_real"" )"	3162:12:91331:91480	109055	0	True				
ANR	109185	OrExpression	"zend_string_equals_literal ( lcname , ""is_float"" ) || zend_string_equals_literal ( lcname , ""is_double"" ) || zend_string_equals_literal ( lcname , ""is_real"" )"		109055	0		||			
ANR	109186	CallExpression	"zend_string_equals_literal ( lcname , ""is_float"" )"		109055	0					
ANR	109187	Callee	zend_string_equals_literal		109055	0					
ANR	109188	Identifier	zend_string_equals_literal		109055	0					
ANR	109189	ArgumentList	lcname		109055	1					
ANR	109190	Argument	lcname		109055	0					
ANR	109191	Identifier	lcname		109055	0					
ANR	109192	Argument	"""is_float"""		109055	1					
ANR	109193	PrimaryExpression	"""is_float"""		109055	0					
ANR	109194	OrExpression	"zend_string_equals_literal ( lcname , ""is_double"" ) || zend_string_equals_literal ( lcname , ""is_real"" )"		109055	1		||			
ANR	109195	CallExpression	"zend_string_equals_literal ( lcname , ""is_double"" )"		109055	0					
ANR	109196	Callee	zend_string_equals_literal		109055	0					
ANR	109197	Identifier	zend_string_equals_literal		109055	0					
ANR	109198	ArgumentList	lcname		109055	1					
ANR	109199	Argument	lcname		109055	0					
ANR	109200	Identifier	lcname		109055	0					
ANR	109201	Argument	"""is_double"""		109055	1					
ANR	109202	PrimaryExpression	"""is_double"""		109055	0					
ANR	109203	CallExpression	"zend_string_equals_literal ( lcname , ""is_real"" )"		109055	1					
ANR	109204	Callee	zend_string_equals_literal		109055	0					
ANR	109205	Identifier	zend_string_equals_literal		109055	0					
ANR	109206	ArgumentList	lcname		109055	1					
ANR	109207	Argument	lcname		109055	0					
ANR	109208	Identifier	lcname		109055	0					
ANR	109209	Argument	"""is_real"""		109055	1					
ANR	109210	PrimaryExpression	"""is_real"""		109055	0					
ANR	109211	CompoundStatement		20:3:841:841	109055	1					
ANR	109212	ReturnStatement	"return zend_compile_func_typecheck ( result , args , IS_DOUBLE ) ;"	3166:2:91489:91548	109055	0	True				
ANR	109213	CallExpression	"zend_compile_func_typecheck ( result , args , IS_DOUBLE )"		109055	0					
ANR	109214	Callee	zend_compile_func_typecheck		109055	0					
ANR	109215	Identifier	zend_compile_func_typecheck		109055	0					
ANR	109216	ArgumentList	result		109055	1					
ANR	109217	Argument	result		109055	0					
ANR	109218	Identifier	result		109055	0					
ANR	109219	Argument	args		109055	1					
ANR	109220	Identifier	args		109055	0					
ANR	109221	Argument	IS_DOUBLE		109055	2					
ANR	109222	Identifier	IS_DOUBLE		109055	0					
ANR	109223	ElseStatement	else		109055	0					
ANR	109224	IfStatement	"if ( zend_string_equals_literal ( lcname , ""is_string"" ) )"		109055	0					
ANR	109225	Condition	"zend_string_equals_literal ( lcname , ""is_string"" )"	3167:12:91562:91608	109055	0	True				
ANR	109226	CallExpression	"zend_string_equals_literal ( lcname , ""is_string"" )"		109055	0					
ANR	109227	Callee	zend_string_equals_literal		109055	0					
ANR	109228	Identifier	zend_string_equals_literal		109055	0					
ANR	109229	ArgumentList	lcname		109055	1					
ANR	109230	Argument	lcname		109055	0					
ANR	109231	Identifier	lcname		109055	0					
ANR	109232	Argument	"""is_string"""		109055	1					
ANR	109233	PrimaryExpression	"""is_string"""		109055	0					
ANR	109234	CompoundStatement		22:61:967:967	109055	1					
ANR	109235	ReturnStatement	"return zend_compile_func_typecheck ( result , args , IS_STRING ) ;"	3168:2:91615:91674	109055	0	True				
ANR	109236	CallExpression	"zend_compile_func_typecheck ( result , args , IS_STRING )"		109055	0					
ANR	109237	Callee	zend_compile_func_typecheck		109055	0					
ANR	109238	Identifier	zend_compile_func_typecheck		109055	0					
ANR	109239	ArgumentList	result		109055	1					
ANR	109240	Argument	result		109055	0					
ANR	109241	Identifier	result		109055	0					
ANR	109242	Argument	args		109055	1					
ANR	109243	Identifier	args		109055	0					
ANR	109244	Argument	IS_STRING		109055	2					
ANR	109245	Identifier	IS_STRING		109055	0					
ANR	109246	ElseStatement	else		109055	0					
ANR	109247	IfStatement	"if ( zend_string_equals_literal ( lcname , ""is_array"" ) )"		109055	0					
ANR	109248	Condition	"zend_string_equals_literal ( lcname , ""is_array"" )"	3169:12:91688:91733	109055	0	True				
ANR	109249	CallExpression	"zend_string_equals_literal ( lcname , ""is_array"" )"		109055	0					
ANR	109250	Callee	zend_string_equals_literal		109055	0					
ANR	109251	Identifier	zend_string_equals_literal		109055	0					
ANR	109252	ArgumentList	lcname		109055	1					
ANR	109253	Argument	lcname		109055	0					
ANR	109254	Identifier	lcname		109055	0					
ANR	109255	Argument	"""is_array"""		109055	1					
ANR	109256	PrimaryExpression	"""is_array"""		109055	0					
ANR	109257	CompoundStatement		24:60:1092:1092	109055	1					
ANR	109258	ReturnStatement	"return zend_compile_func_typecheck ( result , args , IS_ARRAY ) ;"	3170:2:91740:91798	109055	0	True				
ANR	109259	CallExpression	"zend_compile_func_typecheck ( result , args , IS_ARRAY )"		109055	0					
ANR	109260	Callee	zend_compile_func_typecheck		109055	0					
ANR	109261	Identifier	zend_compile_func_typecheck		109055	0					
ANR	109262	ArgumentList	result		109055	1					
ANR	109263	Argument	result		109055	0					
ANR	109264	Identifier	result		109055	0					
ANR	109265	Argument	args		109055	1					
ANR	109266	Identifier	args		109055	0					
ANR	109267	Argument	IS_ARRAY		109055	2					
ANR	109268	Identifier	IS_ARRAY		109055	0					
ANR	109269	ElseStatement	else		109055	0					
ANR	109270	IfStatement	"if ( zend_string_equals_literal ( lcname , ""is_object"" ) )"		109055	0					
ANR	109271	Condition	"zend_string_equals_literal ( lcname , ""is_object"" )"	3171:12:91812:91858	109055	0	True				
ANR	109272	CallExpression	"zend_string_equals_literal ( lcname , ""is_object"" )"		109055	0					
ANR	109273	Callee	zend_string_equals_literal		109055	0					
ANR	109274	Identifier	zend_string_equals_literal		109055	0					
ANR	109275	ArgumentList	lcname		109055	1					
ANR	109276	Argument	lcname		109055	0					
ANR	109277	Identifier	lcname		109055	0					
ANR	109278	Argument	"""is_object"""		109055	1					
ANR	109279	PrimaryExpression	"""is_object"""		109055	0					
ANR	109280	CompoundStatement		26:61:1217:1217	109055	1					
ANR	109281	ReturnStatement	"return zend_compile_func_typecheck ( result , args , IS_OBJECT ) ;"	3172:2:91865:91924	109055	0	True				
ANR	109282	CallExpression	"zend_compile_func_typecheck ( result , args , IS_OBJECT )"		109055	0					
ANR	109283	Callee	zend_compile_func_typecheck		109055	0					
ANR	109284	Identifier	zend_compile_func_typecheck		109055	0					
ANR	109285	ArgumentList	result		109055	1					
ANR	109286	Argument	result		109055	0					
ANR	109287	Identifier	result		109055	0					
ANR	109288	Argument	args		109055	1					
ANR	109289	Identifier	args		109055	0					
ANR	109290	Argument	IS_OBJECT		109055	2					
ANR	109291	Identifier	IS_OBJECT		109055	0					
ANR	109292	ElseStatement	else		109055	0					
ANR	109293	IfStatement	"if ( zend_string_equals_literal ( lcname , ""is_resource"" ) )"		109055	0					
ANR	109294	Condition	"zend_string_equals_literal ( lcname , ""is_resource"" )"	3173:12:91938:91986	109055	0	True				
ANR	109295	CallExpression	"zend_string_equals_literal ( lcname , ""is_resource"" )"		109055	0					
ANR	109296	Callee	zend_string_equals_literal		109055	0					
ANR	109297	Identifier	zend_string_equals_literal		109055	0					
ANR	109298	ArgumentList	lcname		109055	1					
ANR	109299	Argument	lcname		109055	0					
ANR	109300	Identifier	lcname		109055	0					
ANR	109301	Argument	"""is_resource"""		109055	1					
ANR	109302	PrimaryExpression	"""is_resource"""		109055	0					
ANR	109303	CompoundStatement		28:63:1345:1345	109055	1					
ANR	109304	ReturnStatement	"return zend_compile_func_typecheck ( result , args , IS_RESOURCE ) ;"	3174:2:91993:92054	109055	0	True				
ANR	109305	CallExpression	"zend_compile_func_typecheck ( result , args , IS_RESOURCE )"		109055	0					
ANR	109306	Callee	zend_compile_func_typecheck		109055	0					
ANR	109307	Identifier	zend_compile_func_typecheck		109055	0					
ANR	109308	ArgumentList	result		109055	1					
ANR	109309	Argument	result		109055	0					
ANR	109310	Identifier	result		109055	0					
ANR	109311	Argument	args		109055	1					
ANR	109312	Identifier	args		109055	0					
ANR	109313	Argument	IS_RESOURCE		109055	2					
ANR	109314	Identifier	IS_RESOURCE		109055	0					
ANR	109315	ElseStatement	else		109055	0					
ANR	109316	IfStatement	"if ( zend_string_equals_literal ( lcname , ""defined"" ) )"		109055	0					
ANR	109317	Condition	"zend_string_equals_literal ( lcname , ""defined"" )"	3175:12:92068:92112	109055	0	True				
ANR	109318	CallExpression	"zend_string_equals_literal ( lcname , ""defined"" )"		109055	0					
ANR	109319	Callee	zend_string_equals_literal		109055	0					
ANR	109320	Identifier	zend_string_equals_literal		109055	0					
ANR	109321	ArgumentList	lcname		109055	1					
ANR	109322	Argument	lcname		109055	0					
ANR	109323	Identifier	lcname		109055	0					
ANR	109324	Argument	"""defined"""		109055	1					
ANR	109325	PrimaryExpression	"""defined"""		109055	0					
ANR	109326	CompoundStatement		30:59:1471:1471	109055	1					
ANR	109327	ReturnStatement	"return zend_compile_func_defined ( result , args ) ;"	3176:2:92119:92165	109055	0	True				
ANR	109328	CallExpression	"zend_compile_func_defined ( result , args )"		109055	0					
ANR	109329	Callee	zend_compile_func_defined		109055	0					
ANR	109330	Identifier	zend_compile_func_defined		109055	0					
ANR	109331	ArgumentList	result		109055	1					
ANR	109332	Argument	result		109055	0					
ANR	109333	Identifier	result		109055	0					
ANR	109334	Argument	args		109055	1					
ANR	109335	Identifier	args		109055	0					
ANR	109336	ElseStatement	else		109055	0					
ANR	109337	IfStatement	"if ( zend_string_equals_literal ( lcname , ""call_user_func_array"" ) )"		109055	0					
ANR	109338	Condition	"zend_string_equals_literal ( lcname , ""call_user_func_array"" )"	3177:12:92179:92236	109055	0	True				
ANR	109339	CallExpression	"zend_string_equals_literal ( lcname , ""call_user_func_array"" )"		109055	0					
ANR	109340	Callee	zend_string_equals_literal		109055	0					
ANR	109341	Identifier	zend_string_equals_literal		109055	0					
ANR	109342	ArgumentList	lcname		109055	1					
ANR	109343	Argument	lcname		109055	0					
ANR	109344	Identifier	lcname		109055	0					
ANR	109345	Argument	"""call_user_func_array"""		109055	1					
ANR	109346	PrimaryExpression	"""call_user_func_array"""		109055	0					
ANR	109347	CompoundStatement		32:72:1595:1595	109055	1					
ANR	109348	ReturnStatement	"return zend_compile_func_cufa ( result , args , lcname ) ;"	3178:2:92243:92294	109055	0	True				
ANR	109349	CallExpression	"zend_compile_func_cufa ( result , args , lcname )"		109055	0					
ANR	109350	Callee	zend_compile_func_cufa		109055	0					
ANR	109351	Identifier	zend_compile_func_cufa		109055	0					
ANR	109352	ArgumentList	result		109055	1					
ANR	109353	Argument	result		109055	0					
ANR	109354	Identifier	result		109055	0					
ANR	109355	Argument	args		109055	1					
ANR	109356	Identifier	args		109055	0					
ANR	109357	Argument	lcname		109055	2					
ANR	109358	Identifier	lcname		109055	0					
ANR	109359	ElseStatement	else		109055	0					
ANR	109360	IfStatement	"if ( zend_string_equals_literal ( lcname , ""call_user_func"" ) )"		109055	0					
ANR	109361	Condition	"zend_string_equals_literal ( lcname , ""call_user_func"" )"	3179:12:92308:92359	109055	0	True				
ANR	109362	CallExpression	"zend_string_equals_literal ( lcname , ""call_user_func"" )"		109055	0					
ANR	109363	Callee	zend_string_equals_literal		109055	0					
ANR	109364	Identifier	zend_string_equals_literal		109055	0					
ANR	109365	ArgumentList	lcname		109055	1					
ANR	109366	Argument	lcname		109055	0					
ANR	109367	Identifier	lcname		109055	0					
ANR	109368	Argument	"""call_user_func"""		109055	1					
ANR	109369	PrimaryExpression	"""call_user_func"""		109055	0					
ANR	109370	CompoundStatement		34:66:1718:1718	109055	1					
ANR	109371	ReturnStatement	"return zend_compile_func_cuf ( result , args , lcname ) ;"	3180:2:92366:92416	109055	0	True				
ANR	109372	CallExpression	"zend_compile_func_cuf ( result , args , lcname )"		109055	0					
ANR	109373	Callee	zend_compile_func_cuf		109055	0					
ANR	109374	Identifier	zend_compile_func_cuf		109055	0					
ANR	109375	ArgumentList	result		109055	1					
ANR	109376	Argument	result		109055	0					
ANR	109377	Identifier	result		109055	0					
ANR	109378	Argument	args		109055	1					
ANR	109379	Identifier	args		109055	0					
ANR	109380	Argument	lcname		109055	2					
ANR	109381	Identifier	lcname		109055	0					
ANR	109382	ElseStatement	else		109055	0					
ANR	109383	IfStatement	"if ( zend_string_equals_literal ( lcname , ""assert"" ) )"		109055	0					
ANR	109384	Condition	"zend_string_equals_literal ( lcname , ""assert"" )"	3181:12:92430:92473	109055	0	True				
ANR	109385	CallExpression	"zend_string_equals_literal ( lcname , ""assert"" )"		109055	0					
ANR	109386	Callee	zend_string_equals_literal		109055	0					
ANR	109387	Identifier	zend_string_equals_literal		109055	0					
ANR	109388	ArgumentList	lcname		109055	1					
ANR	109389	Argument	lcname		109055	0					
ANR	109390	Identifier	lcname		109055	0					
ANR	109391	Argument	"""assert"""		109055	1					
ANR	109392	PrimaryExpression	"""assert"""		109055	0					
ANR	109393	CompoundStatement		36:58:1832:1832	109055	1					
ANR	109394	ReturnStatement	"return zend_compile_assert ( result , args , lcname , fbc ) ;"	3182:2:92480:92533	109055	0	True				
ANR	109395	CallExpression	"zend_compile_assert ( result , args , lcname , fbc )"		109055	0					
ANR	109396	Callee	zend_compile_assert		109055	0					
ANR	109397	Identifier	zend_compile_assert		109055	0					
ANR	109398	ArgumentList	result		109055	1					
ANR	109399	Argument	result		109055	0					
ANR	109400	Identifier	result		109055	0					
ANR	109401	Argument	args		109055	1					
ANR	109402	Identifier	args		109055	0					
ANR	109403	Argument	lcname		109055	2					
ANR	109404	Identifier	lcname		109055	0					
ANR	109405	Argument	fbc		109055	3					
ANR	109406	Identifier	fbc		109055	0					
ANR	109407	ElseStatement	else		109055	0					
ANR	109408	CompoundStatement		38:8:1899:1899	109055	0					
ANR	109409	ReturnStatement	return FAILURE ;	3184:2:92547:92561	109055	0	True				
ANR	109410	Identifier	FAILURE		109055	0					
ANR	109411	ReturnType	int		109055	1					
ANR	109412	Identifier	zend_try_compile_special_func		109055	2					
ANR	109413	ParameterList	"znode * result , zend_string * lcname , zend_ast_list * args , zend_function * fbc"		109055	3					
ANR	109414	Parameter	znode * result	3145:34:90556:90568	109055	0	True				
ANR	109415	ParameterType	znode *		109055	0					
ANR	109416	Identifier	result		109055	1					
ANR	109417	Parameter	zend_string * lcname	3145:49:90571:90589	109055	1	True				
ANR	109418	ParameterType	zend_string *		109055	0					
ANR	109419	Identifier	lcname		109055	1					
ANR	109420	Parameter	zend_ast_list * args	3145:70:90592:90610	109055	2	True				
ANR	109421	ParameterType	zend_ast_list *		109055	0					
ANR	109422	Identifier	args		109055	1					
ANR	109423	Parameter	zend_function * fbc	3145:91:90613:90630	109055	3	True				
ANR	109424	ParameterType	zend_function *		109055	0					
ANR	109425	Identifier	fbc		109055	1					
ANR	109426	CFGEntryNode	ENTRY		109055		True				
ANR	109427	CFGExitNode	EXIT		109055		True				
ANR	109428	Symbol	zend_string_equals_literal		109055						
ANR	109429	Symbol	fbc -> internal_function . handler		109055						
ANR	109430	Symbol	zend_compile_func_strlen		109055						
ANR	109431	Symbol	zend_compile_func_cufa		109055						
ANR	109432	Symbol	result		109055						
ANR	109433	Symbol	_IS_BOOL		109055						
ANR	109434	Symbol	IS_NULL		109055						
ANR	109435	Symbol	IS_ARRAY		109055						
ANR	109436	Symbol	IS_LONG		109055						
ANR	109437	Symbol	IS_STRING		109055						
ANR	109438	Symbol	fbc		109055						
ANR	109439	Symbol	zend_compile_func_cuf		109055						
ANR	109440	Symbol	display_disabled_function		109055						
ANR	109441	Symbol	FAILURE		109055						
ANR	109442	Symbol	zend_compile_func_defined		109055						
ANR	109443	Symbol	* fbc		109055						
ANR	109444	Symbol	args		109055						
ANR	109445	Symbol	zend_compile_assert		109055						
ANR	109446	Symbol	lcname		109055						
ANR	109447	Symbol	fbc -> internal_function		109055						
ANR	109448	Symbol	zend_compile_func_typecheck		109055						
ANR	109449	Symbol	IS_DOUBLE		109055						
ANR	109450	Symbol	ZEND_FN		109055						
ANR	109451	Symbol	IS_OBJECT		109055						
ANR	109452	Symbol	IS_RESOURCE		109055						
ANR	109453	Function	zend_compile_call	3189:0:92579:94345							
ANR	109454	FunctionDef	"zend_compile_call (znode * result , zend_ast * ast , uint32_t type)"		109453	0					
ANR	109455	CompoundStatement		3190:0:92657:94345	109453	0					
ANR	109456	IdentifierDeclStatement	zend_ast * name_ast = ast -> child [ 0 ] ;	3191:1:92660:92694	109453	0	True				
ANR	109457	IdentifierDecl	* name_ast = ast -> child [ 0 ]		109453	0					
ANR	109458	IdentifierDeclType	zend_ast *		109453	0					
ANR	109459	Identifier	name_ast		109453	1					
ANR	109460	AssignmentExpression	* name_ast = ast -> child [ 0 ]		109453	2		=			
ANR	109461	Identifier	name_ast		109453	0					
ANR	109462	ArrayIndexing	ast -> child [ 0 ]		109453	1					
ANR	109463	PtrMemberAccess	ast -> child		109453	0					
ANR	109464	Identifier	ast		109453	0					
ANR	109465	Identifier	child		109453	1					
ANR	109466	PrimaryExpression	0		109453	1					
ANR	109467	IdentifierDeclStatement	zend_ast * args_ast = ast -> child [ 1 ] ;	3192:1:92697:92731	109453	1	True				
ANR	109468	IdentifierDecl	* args_ast = ast -> child [ 1 ]		109453	0					
ANR	109469	IdentifierDeclType	zend_ast *		109453	0					
ANR	109470	Identifier	args_ast		109453	1					
ANR	109471	AssignmentExpression	* args_ast = ast -> child [ 1 ]		109453	2		=			
ANR	109472	Identifier	args_ast		109453	0					
ANR	109473	ArrayIndexing	ast -> child [ 1 ]		109453	1					
ANR	109474	PtrMemberAccess	ast -> child		109453	0					
ANR	109475	Identifier	ast		109453	0					
ANR	109476	Identifier	child		109453	1					
ANR	109477	PrimaryExpression	1		109453	1					
ANR	109478	IdentifierDeclStatement	znode name_node ;	3194:1:92735:92750	109453	2	True				
ANR	109479	IdentifierDecl	name_node		109453	0					
ANR	109480	IdentifierDeclType	znode		109453	0					
ANR	109481	Identifier	name_node		109453	1					
ANR	109482	IfStatement	if ( name_ast -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( name_ast ) ) != IS_STRING )		109453	3					
ANR	109483	Condition	name_ast -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( name_ast ) ) != IS_STRING	3196:5:92758:92842	109453	0	True				
ANR	109484	OrExpression	name_ast -> kind != ZEND_AST_ZVAL || Z_TYPE_P ( zend_ast_get_zval ( name_ast ) ) != IS_STRING		109453	0		||			
ANR	109485	EqualityExpression	name_ast -> kind != ZEND_AST_ZVAL		109453	0		!=			
ANR	109486	PtrMemberAccess	name_ast -> kind		109453	0					
ANR	109487	Identifier	name_ast		109453	0					
ANR	109488	Identifier	kind		109453	1					
ANR	109489	Identifier	ZEND_AST_ZVAL		109453	1					
ANR	109490	EqualityExpression	Z_TYPE_P ( zend_ast_get_zval ( name_ast ) ) != IS_STRING		109453	1		!=			
ANR	109491	CallExpression	Z_TYPE_P ( zend_ast_get_zval ( name_ast ) )		109453	0					
ANR	109492	Callee	Z_TYPE_P		109453	0					
ANR	109493	Identifier	Z_TYPE_P		109453	0					
ANR	109494	ArgumentList	zend_ast_get_zval ( name_ast )		109453	1					
ANR	109495	Argument	zend_ast_get_zval ( name_ast )		109453	0					
ANR	109496	CallExpression	zend_ast_get_zval ( name_ast )		109453	0					
ANR	109497	Callee	zend_ast_get_zval		109453	0					
ANR	109498	Identifier	zend_ast_get_zval		109453	0					
ANR	109499	ArgumentList	name_ast		109453	1					
ANR	109500	Argument	name_ast		109453	0					
ANR	109501	Identifier	name_ast		109453	0					
ANR	109502	Identifier	IS_STRING		109453	1					
ANR	109503	CompoundStatement		7:92:187:187	109453	1					
ANR	109504	ExpressionStatement	"zend_compile_expr ( & name_node , name_ast )"	3197:2:92849:92888	109453	0	True				
ANR	109505	CallExpression	"zend_compile_expr ( & name_node , name_ast )"		109453	0					
ANR	109506	Callee	zend_compile_expr		109453	0					
ANR	109507	Identifier	zend_compile_expr		109453	0					
ANR	109508	ArgumentList	& name_node		109453	1					
ANR	109509	Argument	& name_node		109453	0					
ANR	109510	UnaryOperationExpression	& name_node		109453	0					
ANR	109511	UnaryOperator	&		109453	0					
ANR	109512	Identifier	name_node		109453	1					
ANR	109513	Argument	name_ast		109453	1					
ANR	109514	Identifier	name_ast		109453	0					
ANR	109515	ExpressionStatement	"zend_compile_dynamic_call ( result , & name_node , args_ast )"	3198:2:92892:92947	109453	1	True				
ANR	109516	CallExpression	"zend_compile_dynamic_call ( result , & name_node , args_ast )"		109453	0					
ANR	109517	Callee	zend_compile_dynamic_call		109453	0					
ANR	109518	Identifier	zend_compile_dynamic_call		109453	0					
ANR	109519	ArgumentList	result		109453	1					
ANR	109520	Argument	result		109453	0					
ANR	109521	Identifier	result		109453	0					
ANR	109522	Argument	& name_node		109453	1					
ANR	109523	UnaryOperationExpression	& name_node		109453	0					
ANR	109524	UnaryOperator	&		109453	0					
ANR	109525	Identifier	name_node		109453	1					
ANR	109526	Argument	args_ast		109453	2					
ANR	109527	Identifier	args_ast		109453	0					
ANR	109528	ReturnStatement	return ;	3199:2:92951:92957	109453	2	True				
ANR	109529	CompoundStatement		14:2:310:389	109453	4					
ANR	109530	IdentifierDeclStatement	"zend_bool runtime_resolution = zend_compile_function_name ( & name_node , name_ast ) ;"	3203:2:92968:93047	109453	0	True				
ANR	109531	IdentifierDecl	"runtime_resolution = zend_compile_function_name ( & name_node , name_ast )"		109453	0					
ANR	109532	IdentifierDeclType	zend_bool		109453	0					
ANR	109533	Identifier	runtime_resolution		109453	1					
ANR	109534	AssignmentExpression	"runtime_resolution = zend_compile_function_name ( & name_node , name_ast )"		109453	2		=			
ANR	109535	Identifier	runtime_resolution		109453	0					
ANR	109536	CallExpression	"zend_compile_function_name ( & name_node , name_ast )"		109453	1					
ANR	109537	Callee	zend_compile_function_name		109453	0					
ANR	109538	Identifier	zend_compile_function_name		109453	0					
ANR	109539	ArgumentList	& name_node		109453	1					
ANR	109540	Argument	& name_node		109453	0					
ANR	109541	UnaryOperationExpression	& name_node		109453	0					
ANR	109542	UnaryOperator	&		109453	0					
ANR	109543	Identifier	name_node		109453	1					
ANR	109544	Argument	name_ast		109453	1					
ANR	109545	Identifier	name_ast		109453	0					
ANR	109546	IfStatement	if ( runtime_resolution )		109453	1					
ANR	109547	Condition	runtime_resolution	3204:6:93055:93072	109453	0	True				
ANR	109548	Identifier	runtime_resolution		109453	0					
ANR	109549	CompoundStatement		15:26:417:417	109453	1					
ANR	109550	IfStatement	"if ( zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""assert"" ) )"		109453	0					
ANR	109551	Condition	"zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""assert"" )"	3205:7:93084:93150	109453	0	True				
ANR	109552	CallExpression	"zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""assert"" )"		109453	0					
ANR	109553	Callee	zend_string_equals_literal_ci		109453	0					
ANR	109554	Identifier	zend_string_equals_literal_ci		109453	0					
ANR	109555	ArgumentList	zend_ast_get_str ( name_ast )		109453	1					
ANR	109556	Argument	zend_ast_get_str ( name_ast )		109453	0					
ANR	109557	CallExpression	zend_ast_get_str ( name_ast )		109453	0					
ANR	109558	Callee	zend_ast_get_str		109453	0					
ANR	109559	Identifier	zend_ast_get_str		109453	0					
ANR	109560	ArgumentList	name_ast		109453	1					
ANR	109561	Argument	name_ast		109453	0					
ANR	109562	Identifier	name_ast		109453	0					
ANR	109563	Argument	"""assert"""		109453	1					
ANR	109564	PrimaryExpression	"""assert"""		109453	0					
ANR	109565	CompoundStatement		16:76:495:495	109453	1					
ANR	109566	ExpressionStatement	"zend_compile_assert ( result , zend_ast_get_list ( args_ast ) , Z_STR ( name_node . u . constant ) , NULL )"	3206:4:93159:93250	109453	0	True				
ANR	109567	CallExpression	"zend_compile_assert ( result , zend_ast_get_list ( args_ast ) , Z_STR ( name_node . u . constant ) , NULL )"		109453	0					
ANR	109568	Callee	zend_compile_assert		109453	0					
ANR	109569	Identifier	zend_compile_assert		109453	0					
ANR	109570	ArgumentList	result		109453	1					
ANR	109571	Argument	result		109453	0					
ANR	109572	Identifier	result		109453	0					
ANR	109573	Argument	zend_ast_get_list ( args_ast )		109453	1					
ANR	109574	CallExpression	zend_ast_get_list ( args_ast )		109453	0					
ANR	109575	Callee	zend_ast_get_list		109453	0					
ANR	109576	Identifier	zend_ast_get_list		109453	0					
ANR	109577	ArgumentList	args_ast		109453	1					
ANR	109578	Argument	args_ast		109453	0					
ANR	109579	Identifier	args_ast		109453	0					
ANR	109580	Argument	Z_STR ( name_node . u . constant )		109453	2					
ANR	109581	CallExpression	Z_STR ( name_node . u . constant )		109453	0					
ANR	109582	Callee	Z_STR		109453	0					
ANR	109583	Identifier	Z_STR		109453	0					
ANR	109584	ArgumentList	name_node . u . constant		109453	1					
ANR	109585	Argument	name_node . u . constant		109453	0					
ANR	109586	MemberAccess	name_node . u . constant		109453	0					
ANR	109587	MemberAccess	name_node . u		109453	0					
ANR	109588	Identifier	name_node		109453	0					
ANR	109589	Identifier	u		109453	1					
ANR	109590	Identifier	constant		109453	1					
ANR	109591	Argument	NULL		109453	3					
ANR	109592	Identifier	NULL		109453	0					
ANR	109593	ElseStatement	else		109453	0					
ANR	109594	CompoundStatement		18:10:604:604	109453	0					
ANR	109595	ExpressionStatement	"zend_compile_ns_call ( result , & name_node , args_ast )"	3208:4:93268:93318	109453	0	True				
ANR	109596	CallExpression	"zend_compile_ns_call ( result , & name_node , args_ast )"		109453	0					
ANR	109597	Callee	zend_compile_ns_call		109453	0					
ANR	109598	Identifier	zend_compile_ns_call		109453	0					
ANR	109599	ArgumentList	result		109453	1					
ANR	109600	Argument	result		109453	0					
ANR	109601	Identifier	result		109453	0					
ANR	109602	Argument	& name_node		109453	1					
ANR	109603	UnaryOperationExpression	& name_node		109453	0					
ANR	109604	UnaryOperator	&		109453	0					
ANR	109605	Identifier	name_node		109453	1					
ANR	109606	Argument	args_ast		109453	2					
ANR	109607	Identifier	args_ast		109453	0					
ANR	109608	ReturnStatement	return ;	3210:3:93328:93334	109453	1	True				
ANR	109609	CompoundStatement		29:2:774:789	109453	5					
ANR	109610	IdentifierDeclStatement	zval * name = & name_node . u . constant ;	3215:2:93349:93383	109453	0	True				
ANR	109611	IdentifierDecl	* name = & name_node . u . constant		109453	0					
ANR	109612	IdentifierDeclType	zval *		109453	0					
ANR	109613	Identifier	name		109453	1					
ANR	109614	AssignmentExpression	* name = & name_node . u . constant		109453	2		=			
ANR	109615	Identifier	name		109453	0					
ANR	109616	UnaryOperationExpression	& name_node . u . constant		109453	1					
ANR	109617	UnaryOperator	&		109453	0					
ANR	109618	MemberAccess	name_node . u . constant		109453	1					
ANR	109619	MemberAccess	name_node . u		109453	0					
ANR	109620	Identifier	name_node		109453	0					
ANR	109621	Identifier	u		109453	1					
ANR	109622	Identifier	constant		109453	1					
ANR	109623	IdentifierDeclStatement	zend_string * lcname ;	3216:2:93387:93406	109453	1	True				
ANR	109624	IdentifierDecl	* lcname		109453	0					
ANR	109625	IdentifierDeclType	zend_string *		109453	0					
ANR	109626	Identifier	lcname		109453	1					
ANR	109627	IdentifierDeclStatement	zend_function * fbc ;	3217:2:93410:93428	109453	2	True				
ANR	109628	IdentifierDecl	* fbc		109453	0					
ANR	109629	IdentifierDeclType	zend_function *		109453	0					
ANR	109630	Identifier	fbc		109453	1					
ANR	109631	IdentifierDeclStatement	zend_op * opline ;	3218:2:93432:93447	109453	3	True				
ANR	109632	IdentifierDecl	* opline		109453	0					
ANR	109633	IdentifierDeclType	zend_op *		109453	0					
ANR	109634	Identifier	opline		109453	1					
ANR	109635	ExpressionStatement	lcname = zend_string_tolower ( Z_STR_P ( name ) )	3220:2:93452:93495	109453	4	True				
ANR	109636	AssignmentExpression	lcname = zend_string_tolower ( Z_STR_P ( name ) )		109453	0		=			
ANR	109637	Identifier	lcname		109453	0					
ANR	109638	CallExpression	zend_string_tolower ( Z_STR_P ( name ) )		109453	1					
ANR	109639	Callee	zend_string_tolower		109453	0					
ANR	109640	Identifier	zend_string_tolower		109453	0					
ANR	109641	ArgumentList	Z_STR_P ( name )		109453	1					
ANR	109642	Argument	Z_STR_P ( name )		109453	0					
ANR	109643	CallExpression	Z_STR_P ( name )		109453	0					
ANR	109644	Callee	Z_STR_P		109453	0					
ANR	109645	Identifier	Z_STR_P		109453	0					
ANR	109646	ArgumentList	name		109453	1					
ANR	109647	Argument	name		109453	0					
ANR	109648	Identifier	name		109453	0					
ANR	109649	ExpressionStatement	"fbc = zend_hash_find_ptr ( CG ( function_table ) , lcname )"	3222:2:93500:93552	109453	5	True				
ANR	109650	AssignmentExpression	"fbc = zend_hash_find_ptr ( CG ( function_table ) , lcname )"		109453	0		=			
ANR	109651	Identifier	fbc		109453	0					
ANR	109652	CallExpression	"zend_hash_find_ptr ( CG ( function_table ) , lcname )"		109453	1					
ANR	109653	Callee	zend_hash_find_ptr		109453	0					
ANR	109654	Identifier	zend_hash_find_ptr		109453	0					
ANR	109655	ArgumentList	CG ( function_table )		109453	1					
ANR	109656	Argument	CG ( function_table )		109453	0					
ANR	109657	CallExpression	CG ( function_table )		109453	0					
ANR	109658	Callee	CG		109453	0					
ANR	109659	Identifier	CG		109453	0					
ANR	109660	ArgumentList	function_table		109453	1					
ANR	109661	Argument	function_table		109453	0					
ANR	109662	Identifier	function_table		109453	0					
ANR	109663	Argument	lcname		109453	1					
ANR	109664	Identifier	lcname		109453	0					
ANR	109665	IfStatement	if ( ! fbc || ( fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) ) || ( fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS ) ) )		109453	6					
ANR	109666	Condition	! fbc || ( fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) ) || ( fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS ) )	3223:6:93560:93777	109453	0	True				
ANR	109667	OrExpression	! fbc || ( fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) ) || ( fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS ) )		109453	0		||			
ANR	109668	UnaryOperationExpression	! fbc		109453	0					
ANR	109669	UnaryOperator	!		109453	0					
ANR	109670	Identifier	fbc		109453	1					
ANR	109671	OrExpression	( fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS ) ) || ( fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS ) )		109453	1		||			
ANR	109672	AndExpression	fbc -> type == ZEND_INTERNAL_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS )		109453	0		&&			
ANR	109673	EqualityExpression	fbc -> type == ZEND_INTERNAL_FUNCTION		109453	0		==			
ANR	109674	PtrMemberAccess	fbc -> type		109453	0					
ANR	109675	Identifier	fbc		109453	0					
ANR	109676	Identifier	type		109453	1					
ANR	109677	Identifier	ZEND_INTERNAL_FUNCTION		109453	1					
ANR	109678	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS		109453	1		&			
ANR	109679	CallExpression	CG ( compiler_options )		109453	0					
ANR	109680	Callee	CG		109453	0					
ANR	109681	Identifier	CG		109453	0					
ANR	109682	ArgumentList	compiler_options		109453	1					
ANR	109683	Argument	compiler_options		109453	0					
ANR	109684	Identifier	compiler_options		109453	0					
ANR	109685	Identifier	ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS		109453	1					
ANR	109686	AndExpression	fbc -> type == ZEND_USER_FUNCTION && ( CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS )		109453	1		&&			
ANR	109687	EqualityExpression	fbc -> type == ZEND_USER_FUNCTION		109453	0		==			
ANR	109688	PtrMemberAccess	fbc -> type		109453	0					
ANR	109689	Identifier	fbc		109453	0					
ANR	109690	Identifier	type		109453	1					
ANR	109691	Identifier	ZEND_USER_FUNCTION		109453	1					
ANR	109692	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_IGNORE_USER_FUNCTIONS		109453	1		&			
ANR	109693	CallExpression	CG ( compiler_options )		109453	0					
ANR	109694	Callee	CG		109453	0					
ANR	109695	Identifier	CG		109453	0					
ANR	109696	ArgumentList	compiler_options		109453	1					
ANR	109697	Argument	compiler_options		109453	0					
ANR	109698	Identifier	compiler_options		109453	0					
ANR	109699	Identifier	ZEND_COMPILE_IGNORE_USER_FUNCTIONS		109453	1					
ANR	109700	CompoundStatement		37:4:1125:1125	109453	1					
ANR	109701	ExpressionStatement	zend_string_release ( lcname )	3227:3:93788:93815	109453	0	True				
ANR	109702	CallExpression	zend_string_release ( lcname )		109453	0					
ANR	109703	Callee	zend_string_release		109453	0					
ANR	109704	Identifier	zend_string_release		109453	0					
ANR	109705	ArgumentList	lcname		109453	1					
ANR	109706	Argument	lcname		109453	0					
ANR	109707	Identifier	lcname		109453	0					
ANR	109708	ExpressionStatement	"zend_compile_dynamic_call ( result , & name_node , args_ast )"	3228:3:93820:93875	109453	1	True				
ANR	109709	CallExpression	"zend_compile_dynamic_call ( result , & name_node , args_ast )"		109453	0					
ANR	109710	Callee	zend_compile_dynamic_call		109453	0					
ANR	109711	Identifier	zend_compile_dynamic_call		109453	0					
ANR	109712	ArgumentList	result		109453	1					
ANR	109713	Argument	result		109453	0					
ANR	109714	Identifier	result		109453	0					
ANR	109715	Argument	& name_node		109453	1					
ANR	109716	UnaryOperationExpression	& name_node		109453	0					
ANR	109717	UnaryOperator	&		109453	0					
ANR	109718	Identifier	name_node		109453	1					
ANR	109719	Argument	args_ast		109453	2					
ANR	109720	Identifier	args_ast		109453	0					
ANR	109721	ReturnStatement	return ;	3229:3:93880:93886	109453	2	True				
ANR	109722	IfStatement	"if ( zend_try_compile_special_func ( result , lcname , zend_ast_get_list ( args_ast ) , fbc ) == SUCCESS )"		109453	7					
ANR	109723	Condition	"zend_try_compile_special_func ( result , lcname , zend_ast_get_list ( args_ast ) , fbc ) == SUCCESS"	3232:6:93899:93992	109453	0	True				
ANR	109724	EqualityExpression	"zend_try_compile_special_func ( result , lcname , zend_ast_get_list ( args_ast ) , fbc ) == SUCCESS"		109453	0		==			
ANR	109725	CallExpression	"zend_try_compile_special_func ( result , lcname , zend_ast_get_list ( args_ast ) , fbc )"		109453	0					
ANR	109726	Callee	zend_try_compile_special_func		109453	0					
ANR	109727	Identifier	zend_try_compile_special_func		109453	0					
ANR	109728	ArgumentList	result		109453	1					
ANR	109729	Argument	result		109453	0					
ANR	109730	Identifier	result		109453	0					
ANR	109731	Argument	lcname		109453	1					
ANR	109732	Identifier	lcname		109453	0					
ANR	109733	Argument	zend_ast_get_list ( args_ast )		109453	2					
ANR	109734	CallExpression	zend_ast_get_list ( args_ast )		109453	0					
ANR	109735	Callee	zend_ast_get_list		109453	0					
ANR	109736	Identifier	zend_ast_get_list		109453	0					
ANR	109737	ArgumentList	args_ast		109453	1					
ANR	109738	Argument	args_ast		109453	0					
ANR	109739	Identifier	args_ast		109453	0					
ANR	109740	Argument	fbc		109453	3					
ANR	109741	Identifier	fbc		109453	0					
ANR	109742	Identifier	SUCCESS		109453	1					
ANR	109743	CompoundStatement		45:4:1340:1340	109453	1					
ANR	109744	ExpressionStatement	zend_string_release ( lcname )	3235:3:94003:94030	109453	0	True				
ANR	109745	CallExpression	zend_string_release ( lcname )		109453	0					
ANR	109746	Callee	zend_string_release		109453	0					
ANR	109747	Identifier	zend_string_release		109453	0					
ANR	109748	ArgumentList	lcname		109453	1					
ANR	109749	Argument	lcname		109453	0					
ANR	109750	Identifier	lcname		109453	0					
ANR	109751	ExpressionStatement	zval_ptr_dtor ( & name_node . u . constant )	3236:3:94035:94071	109453	1	True				
ANR	109752	CallExpression	zval_ptr_dtor ( & name_node . u . constant )		109453	0					
ANR	109753	Callee	zval_ptr_dtor		109453	0					
ANR	109754	Identifier	zval_ptr_dtor		109453	0					
ANR	109755	ArgumentList	& name_node . u . constant		109453	1					
ANR	109756	Argument	& name_node . u . constant		109453	0					
ANR	109757	UnaryOperationExpression	& name_node . u . constant		109453	0					
ANR	109758	UnaryOperator	&		109453	0					
ANR	109759	MemberAccess	name_node . u . constant		109453	1					
ANR	109760	MemberAccess	name_node . u		109453	0					
ANR	109761	Identifier	name_node		109453	0					
ANR	109762	Identifier	u		109453	1					
ANR	109763	Identifier	constant		109453	1					
ANR	109764	ReturnStatement	return ;	3237:3:94076:94082	109453	2	True				
ANR	109765	ExpressionStatement	zval_ptr_dtor ( & name_node . u . constant )	3240:2:94091:94127	109453	8	True				
ANR	109766	CallExpression	zval_ptr_dtor ( & name_node . u . constant )		109453	0					
ANR	109767	Callee	zval_ptr_dtor		109453	0					
ANR	109768	Identifier	zval_ptr_dtor		109453	0					
ANR	109769	ArgumentList	& name_node . u . constant		109453	1					
ANR	109770	Argument	& name_node . u . constant		109453	0					
ANR	109771	UnaryOperationExpression	& name_node . u . constant		109453	0					
ANR	109772	UnaryOperator	&		109453	0					
ANR	109773	MemberAccess	name_node . u . constant		109453	1					
ANR	109774	MemberAccess	name_node . u		109453	0					
ANR	109775	Identifier	name_node		109453	0					
ANR	109776	Identifier	u		109453	1					
ANR	109777	Identifier	constant		109453	1					
ANR	109778	ExpressionStatement	"ZVAL_NEW_STR ( & name_node . u . constant , lcname )"	3241:2:94131:94174	109453	9	True				
ANR	109779	CallExpression	"ZVAL_NEW_STR ( & name_node . u . constant , lcname )"		109453	0					
ANR	109780	Callee	ZVAL_NEW_STR		109453	0					
ANR	109781	Identifier	ZVAL_NEW_STR		109453	0					
ANR	109782	ArgumentList	& name_node . u . constant		109453	1					
ANR	109783	Argument	& name_node . u . constant		109453	0					
ANR	109784	UnaryOperationExpression	& name_node . u . constant		109453	0					
ANR	109785	UnaryOperator	&		109453	0					
ANR	109786	MemberAccess	name_node . u . constant		109453	1					
ANR	109787	MemberAccess	name_node . u		109453	0					
ANR	109788	Identifier	name_node		109453	0					
ANR	109789	Identifier	u		109453	1					
ANR	109790	Identifier	constant		109453	1					
ANR	109791	Argument	lcname		109453	1					
ANR	109792	Identifier	lcname		109453	0					
ANR	109793	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_INIT_FCALL , NULL , & name_node )"	3243:2:94179:94241	109453	10	True				
ANR	109794	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_INIT_FCALL , NULL , & name_node )"		109453	0		=			
ANR	109795	Identifier	opline		109453	0					
ANR	109796	CallExpression	"zend_emit_op ( NULL , ZEND_INIT_FCALL , NULL , & name_node )"		109453	1					
ANR	109797	Callee	zend_emit_op		109453	0					
ANR	109798	Identifier	zend_emit_op		109453	0					
ANR	109799	ArgumentList	NULL		109453	1					
ANR	109800	Argument	NULL		109453	0					
ANR	109801	Identifier	NULL		109453	0					
ANR	109802	Argument	ZEND_INIT_FCALL		109453	1					
ANR	109803	Identifier	ZEND_INIT_FCALL		109453	0					
ANR	109804	Argument	NULL		109453	2					
ANR	109805	Identifier	NULL		109453	0					
ANR	109806	Argument	& name_node		109453	3					
ANR	109807	UnaryOperationExpression	& name_node		109453	0					
ANR	109808	UnaryOperator	&		109453	0					
ANR	109809	Identifier	name_node		109453	1					
ANR	109810	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	3244:2:94245:94288	109453	11	True				
ANR	109811	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		109453	0					
ANR	109812	Callee	zend_alloc_cache_slot		109453	0					
ANR	109813	Identifier	zend_alloc_cache_slot		109453	0					
ANR	109814	ArgumentList	opline -> op2 . constant		109453	1					
ANR	109815	Argument	opline -> op2 . constant		109453	0					
ANR	109816	MemberAccess	opline -> op2 . constant		109453	0					
ANR	109817	PtrMemberAccess	opline -> op2		109453	0					
ANR	109818	Identifier	opline		109453	0					
ANR	109819	Identifier	op2		109453	1					
ANR	109820	Identifier	constant		109453	1					
ANR	109821	ExpressionStatement	"zend_compile_call_common ( result , args_ast , fbc )"	3246:2:94293:94340	109453	12	True				
ANR	109822	CallExpression	"zend_compile_call_common ( result , args_ast , fbc )"		109453	0					
ANR	109823	Callee	zend_compile_call_common		109453	0					
ANR	109824	Identifier	zend_compile_call_common		109453	0					
ANR	109825	ArgumentList	result		109453	1					
ANR	109826	Argument	result		109453	0					
ANR	109827	Identifier	result		109453	0					
ANR	109828	Argument	args_ast		109453	1					
ANR	109829	Identifier	args_ast		109453	0					
ANR	109830	Argument	fbc		109453	2					
ANR	109831	Identifier	fbc		109453	0					
ANR	109832	ReturnType	void		109453	1					
ANR	109833	Identifier	zend_compile_call		109453	2					
ANR	109834	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		109453	3					
ANR	109835	Parameter	znode * result	3189:23:92602:92614	109453	0	True				
ANR	109836	ParameterType	znode *		109453	0					
ANR	109837	Identifier	result		109453	1					
ANR	109838	Parameter	zend_ast * ast	3189:38:92617:92629	109453	1	True				
ANR	109839	ParameterType	zend_ast *		109453	0					
ANR	109840	Identifier	ast		109453	1					
ANR	109841	Parameter	uint32_t type	3189:53:92632:92644	109453	2	True				
ANR	109842	ParameterType	uint32_t		109453	0					
ANR	109843	Identifier	type		109453	1					
ANR	109844	CFGEntryNode	ENTRY		109453		True				
ANR	109845	CFGExitNode	EXIT		109453		True				
ANR	109846	Symbol	ast		109453						
ANR	109847	Symbol	type		109453						
ANR	109848	Symbol	Z_STR		109453						
ANR	109849	Symbol	zend_string_tolower		109453						
ANR	109850	Symbol	zend_try_compile_special_func		109453						
ANR	109851	Symbol	ZEND_INTERNAL_FUNCTION		109453						
ANR	109852	Symbol	opline		109453						
ANR	109853	Symbol	ZEND_INIT_FCALL		109453						
ANR	109854	Symbol	& name_node		109453						
ANR	109855	Symbol	ZEND_USER_FUNCTION		109453						
ANR	109856	Symbol	ZEND_AST_ZVAL		109453						
ANR	109857	Symbol	IS_STRING		109453						
ANR	109858	Symbol	zend_hash_find_ptr		109453						
ANR	109859	Symbol	zend_compile_function_name		109453						
ANR	109860	Symbol	NULL		109453						
ANR	109861	Symbol	fbc		109453						
ANR	109862	Symbol	name_node . u		109453						
ANR	109863	Symbol	zend_string_equals_literal_ci		109453						
ANR	109864	Symbol	name_ast -> kind		109453						
ANR	109865	Symbol	name		109453						
ANR	109866	Symbol	& name_node . u . constant		109453						
ANR	109867	Symbol	* ast -> child		109453						
ANR	109868	Symbol	Z_STR_P		109453						
ANR	109869	Symbol	ast -> child		109453						
ANR	109870	Symbol	args_ast		109453						
ANR	109871	Symbol	zend_ast_get_zval		109453						
ANR	109872	Symbol	function_table		109453						
ANR	109873	Symbol	name_node		109453						
ANR	109874	Symbol	name_node . u . constant		109453						
ANR	109875	Symbol	zend_emit_op		109453						
ANR	109876	Symbol	opline -> op2		109453						
ANR	109877	Symbol	fbc -> type		109453						
ANR	109878	Symbol	result		109453						
ANR	109879	Symbol	* name_ast		109453						
ANR	109880	Symbol	compiler_options		109453						
ANR	109881	Symbol	* ast		109453						
ANR	109882	Symbol	zend_ast_get_str		109453						
ANR	109883	Symbol	* * ast		109453						
ANR	109884	Symbol	& name_node . u		109453						
ANR	109885	Symbol	SUCCESS		109453						
ANR	109886	Symbol	CG		109453						
ANR	109887	Symbol	ZEND_COMPILE_IGNORE_USER_FUNCTIONS		109453						
ANR	109888	Symbol	Z_TYPE_P		109453						
ANR	109889	Symbol	* fbc		109453						
ANR	109890	Symbol	zend_ast_get_list		109453						
ANR	109891	Symbol	lcname		109453						
ANR	109892	Symbol	ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS		109453						
ANR	109893	Symbol	* opline		109453						
ANR	109894	Symbol	name_ast		109453						
ANR	109895	Symbol	opline -> op2 . constant		109453						
ANR	109896	Symbol	runtime_resolution		109453						
ANR	109897	Function	zend_compile_method_call	3251:0:94358:95315							
ANR	109898	FunctionDef	"zend_compile_method_call (znode * result , zend_ast * ast , uint32_t type)"		109897	0					
ANR	109899	CompoundStatement		3252:0:94443:95315	109897	0					
ANR	109900	IdentifierDeclStatement	zend_ast * obj_ast = ast -> child [ 0 ] ;	3253:1:94446:94479	109897	0	True				
ANR	109901	IdentifierDecl	* obj_ast = ast -> child [ 0 ]		109897	0					
ANR	109902	IdentifierDeclType	zend_ast *		109897	0					
ANR	109903	Identifier	obj_ast		109897	1					
ANR	109904	AssignmentExpression	* obj_ast = ast -> child [ 0 ]		109897	2		=			
ANR	109905	Identifier	obj_ast		109897	0					
ANR	109906	ArrayIndexing	ast -> child [ 0 ]		109897	1					
ANR	109907	PtrMemberAccess	ast -> child		109897	0					
ANR	109908	Identifier	ast		109897	0					
ANR	109909	Identifier	child		109897	1					
ANR	109910	PrimaryExpression	0		109897	1					
ANR	109911	IdentifierDeclStatement	zend_ast * method_ast = ast -> child [ 1 ] ;	3254:1:94482:94518	109897	1	True				
ANR	109912	IdentifierDecl	* method_ast = ast -> child [ 1 ]		109897	0					
ANR	109913	IdentifierDeclType	zend_ast *		109897	0					
ANR	109914	Identifier	method_ast		109897	1					
ANR	109915	AssignmentExpression	* method_ast = ast -> child [ 1 ]		109897	2		=			
ANR	109916	Identifier	method_ast		109897	0					
ANR	109917	ArrayIndexing	ast -> child [ 1 ]		109897	1					
ANR	109918	PtrMemberAccess	ast -> child		109897	0					
ANR	109919	Identifier	ast		109897	0					
ANR	109920	Identifier	child		109897	1					
ANR	109921	PrimaryExpression	1		109897	1					
ANR	109922	IdentifierDeclStatement	zend_ast * args_ast = ast -> child [ 2 ] ;	3255:1:94521:94555	109897	2	True				
ANR	109923	IdentifierDecl	* args_ast = ast -> child [ 2 ]		109897	0					
ANR	109924	IdentifierDeclType	zend_ast *		109897	0					
ANR	109925	Identifier	args_ast		109897	1					
ANR	109926	AssignmentExpression	* args_ast = ast -> child [ 2 ]		109897	2		=			
ANR	109927	Identifier	args_ast		109897	0					
ANR	109928	ArrayIndexing	ast -> child [ 2 ]		109897	1					
ANR	109929	PtrMemberAccess	ast -> child		109897	0					
ANR	109930	Identifier	ast		109897	0					
ANR	109931	Identifier	child		109897	1					
ANR	109932	PrimaryExpression	2		109897	1					
ANR	109933	IdentifierDeclStatement	"znode obj_node , method_node ;"	3257:1:94559:94586	109897	3	True				
ANR	109934	IdentifierDecl	obj_node		109897	0					
ANR	109935	IdentifierDeclType	znode		109897	0					
ANR	109936	Identifier	obj_node		109897	1					
ANR	109937	IdentifierDecl	method_node		109897	1					
ANR	109938	IdentifierDeclType	znode		109897	0					
ANR	109939	Identifier	method_node		109897	1					
ANR	109940	IdentifierDeclStatement	zend_op * opline ;	3258:1:94589:94604	109897	4	True				
ANR	109941	IdentifierDecl	* opline		109897	0					
ANR	109942	IdentifierDeclType	zend_op *		109897	0					
ANR	109943	Identifier	opline		109897	1					
ANR	109944	IfStatement	if ( is_this_fetch ( obj_ast ) )		109897	5					
ANR	109945	Condition	is_this_fetch ( obj_ast )	3260:5:94612:94633	109897	0	True				
ANR	109946	CallExpression	is_this_fetch ( obj_ast )		109897	0					
ANR	109947	Callee	is_this_fetch		109897	0					
ANR	109948	Identifier	is_this_fetch		109897	0					
ANR	109949	ArgumentList	obj_ast		109897	1					
ANR	109950	Argument	obj_ast		109897	0					
ANR	109951	Identifier	obj_ast		109897	0					
ANR	109952	CompoundStatement		9:29:192:192	109897	1					
ANR	109953	ExpressionStatement	obj_node . op_type = IS_UNUSED	3261:2:94640:94668	109897	0	True				
ANR	109954	AssignmentExpression	obj_node . op_type = IS_UNUSED		109897	0		=			
ANR	109955	MemberAccess	obj_node . op_type		109897	0					
ANR	109956	Identifier	obj_node		109897	0					
ANR	109957	Identifier	op_type		109897	1					
ANR	109958	Identifier	IS_UNUSED		109897	1					
ANR	109959	ElseStatement	else		109897	0					
ANR	109960	CompoundStatement		11:8:234:234	109897	0					
ANR	109961	ExpressionStatement	"zend_compile_expr ( & obj_node , obj_ast )"	3263:2:94682:94719	109897	0	True				
ANR	109962	CallExpression	"zend_compile_expr ( & obj_node , obj_ast )"		109897	0					
ANR	109963	Callee	zend_compile_expr		109897	0					
ANR	109964	Identifier	zend_compile_expr		109897	0					
ANR	109965	ArgumentList	& obj_node		109897	1					
ANR	109966	Argument	& obj_node		109897	0					
ANR	109967	UnaryOperationExpression	& obj_node		109897	0					
ANR	109968	UnaryOperator	&		109897	0					
ANR	109969	Identifier	obj_node		109897	1					
ANR	109970	Argument	obj_ast		109897	1					
ANR	109971	Identifier	obj_ast		109897	0					
ANR	109972	ExpressionStatement	"zend_compile_expr ( & method_node , method_ast )"	3266:1:94726:94769	109897	6	True				
ANR	109973	CallExpression	"zend_compile_expr ( & method_node , method_ast )"		109897	0					
ANR	109974	Callee	zend_compile_expr		109897	0					
ANR	109975	Identifier	zend_compile_expr		109897	0					
ANR	109976	ArgumentList	& method_node		109897	1					
ANR	109977	Argument	& method_node		109897	0					
ANR	109978	UnaryOperationExpression	& method_node		109897	0					
ANR	109979	UnaryOperator	&		109897	0					
ANR	109980	Identifier	method_node		109897	1					
ANR	109981	Argument	method_ast		109897	1					
ANR	109982	Identifier	method_ast		109897	0					
ANR	109983	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_INIT_METHOD_CALL , & obj_node , NULL )"	3267:1:94772:94839	109897	7	True				
ANR	109984	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_INIT_METHOD_CALL , & obj_node , NULL )"		109897	0		=			
ANR	109985	Identifier	opline		109897	0					
ANR	109986	CallExpression	"zend_emit_op ( NULL , ZEND_INIT_METHOD_CALL , & obj_node , NULL )"		109897	1					
ANR	109987	Callee	zend_emit_op		109897	0					
ANR	109988	Identifier	zend_emit_op		109897	0					
ANR	109989	ArgumentList	NULL		109897	1					
ANR	109990	Argument	NULL		109897	0					
ANR	109991	Identifier	NULL		109897	0					
ANR	109992	Argument	ZEND_INIT_METHOD_CALL		109897	1					
ANR	109993	Identifier	ZEND_INIT_METHOD_CALL		109897	0					
ANR	109994	Argument	& obj_node		109897	2					
ANR	109995	UnaryOperationExpression	& obj_node		109897	0					
ANR	109996	UnaryOperator	&		109897	0					
ANR	109997	Identifier	obj_node		109897	1					
ANR	109998	Argument	NULL		109897	3					
ANR	109999	Identifier	NULL		109897	0					
ANR	110000	IfStatement	if ( method_node . op_type == IS_CONST )		109897	8					
ANR	110001	Condition	method_node . op_type == IS_CONST	3269:5:94847:94877	109897	0	True				
ANR	110002	EqualityExpression	method_node . op_type == IS_CONST		109897	0		==			
ANR	110003	MemberAccess	method_node . op_type		109897	0					
ANR	110004	Identifier	method_node		109897	0					
ANR	110005	Identifier	op_type		109897	1					
ANR	110006	Identifier	IS_CONST		109897	1					
ANR	110007	CompoundStatement		18:38:436:436	109897	1					
ANR	110008	IfStatement	if ( Z_TYPE ( method_node . u . constant ) != IS_STRING )		109897	0					
ANR	110009	Condition	Z_TYPE ( method_node . u . constant ) != IS_STRING	3270:6:94888:94930	109897	0	True				
ANR	110010	EqualityExpression	Z_TYPE ( method_node . u . constant ) != IS_STRING		109897	0		!=			
ANR	110011	CallExpression	Z_TYPE ( method_node . u . constant )		109897	0					
ANR	110012	Callee	Z_TYPE		109897	0					
ANR	110013	Identifier	Z_TYPE		109897	0					
ANR	110014	ArgumentList	method_node . u . constant		109897	1					
ANR	110015	Argument	method_node . u . constant		109897	0					
ANR	110016	MemberAccess	method_node . u . constant		109897	0					
ANR	110017	MemberAccess	method_node . u		109897	0					
ANR	110018	Identifier	method_node		109897	0					
ANR	110019	Identifier	u		109897	1					
ANR	110020	Identifier	constant		109897	1					
ANR	110021	Identifier	IS_STRING		109897	1					
ANR	110022	CompoundStatement		19:51:489:489	109897	1					
ANR	110023	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Method name must be a string"" )"	3271:3:94938:95006	109897	0	True				
ANR	110024	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Method name must be a string"" )"		109897	0					
ANR	110025	Callee	zend_error_noreturn		109897	0					
ANR	110026	Identifier	zend_error_noreturn		109897	0					
ANR	110027	ArgumentList	E_COMPILE_ERROR		109897	1					
ANR	110028	Argument	E_COMPILE_ERROR		109897	0					
ANR	110029	Identifier	E_COMPILE_ERROR		109897	0					
ANR	110030	Argument	"""Method name must be a string"""		109897	1					
ANR	110031	PrimaryExpression	"""Method name must be a string"""		109897	0					
ANR	110032	ExpressionStatement	opline -> op2_type = IS_CONST	3274:2:95015:95042	109897	1	True				
ANR	110033	AssignmentExpression	opline -> op2_type = IS_CONST		109897	0		=			
ANR	110034	PtrMemberAccess	opline -> op2_type		109897	0					
ANR	110035	Identifier	opline		109897	0					
ANR	110036	Identifier	op2_type		109897	1					
ANR	110037	Identifier	IS_CONST		109897	1					
ANR	110038	ExpressionStatement	"opline -> op2 . constant = zend_add_func_name_literal ( CG ( active_op_array ) , Z_STR ( method_node . u . constant ) )"	3275:2:95046:95150	109897	2	True				
ANR	110039	AssignmentExpression	"opline -> op2 . constant = zend_add_func_name_literal ( CG ( active_op_array ) , Z_STR ( method_node . u . constant ) )"		109897	0		=			
ANR	110040	MemberAccess	opline -> op2 . constant		109897	0					
ANR	110041	PtrMemberAccess	opline -> op2		109897	0					
ANR	110042	Identifier	opline		109897	0					
ANR	110043	Identifier	op2		109897	1					
ANR	110044	Identifier	constant		109897	1					
ANR	110045	CallExpression	"zend_add_func_name_literal ( CG ( active_op_array ) , Z_STR ( method_node . u . constant ) )"		109897	1					
ANR	110046	Callee	zend_add_func_name_literal		109897	0					
ANR	110047	Identifier	zend_add_func_name_literal		109897	0					
ANR	110048	ArgumentList	CG ( active_op_array )		109897	1					
ANR	110049	Argument	CG ( active_op_array )		109897	0					
ANR	110050	CallExpression	CG ( active_op_array )		109897	0					
ANR	110051	Callee	CG		109897	0					
ANR	110052	Identifier	CG		109897	0					
ANR	110053	ArgumentList	active_op_array		109897	1					
ANR	110054	Argument	active_op_array		109897	0					
ANR	110055	Identifier	active_op_array		109897	0					
ANR	110056	Argument	Z_STR ( method_node . u . constant )		109897	1					
ANR	110057	CallExpression	Z_STR ( method_node . u . constant )		109897	0					
ANR	110058	Callee	Z_STR		109897	0					
ANR	110059	Identifier	Z_STR		109897	0					
ANR	110060	ArgumentList	method_node . u . constant		109897	1					
ANR	110061	Argument	method_node . u . constant		109897	0					
ANR	110062	MemberAccess	method_node . u . constant		109897	0					
ANR	110063	MemberAccess	method_node . u		109897	0					
ANR	110064	Identifier	method_node		109897	0					
ANR	110065	Identifier	u		109897	1					
ANR	110066	Identifier	constant		109897	1					
ANR	110067	ExpressionStatement	zend_alloc_polymorphic_cache_slot ( opline -> op2 . constant )	3277:2:95154:95209	109897	3	True				
ANR	110068	CallExpression	zend_alloc_polymorphic_cache_slot ( opline -> op2 . constant )		109897	0					
ANR	110069	Callee	zend_alloc_polymorphic_cache_slot		109897	0					
ANR	110070	Identifier	zend_alloc_polymorphic_cache_slot		109897	0					
ANR	110071	ArgumentList	opline -> op2 . constant		109897	1					
ANR	110072	Argument	opline -> op2 . constant		109897	0					
ANR	110073	MemberAccess	opline -> op2 . constant		109897	0					
ANR	110074	PtrMemberAccess	opline -> op2		109897	0					
ANR	110075	Identifier	opline		109897	0					
ANR	110076	Identifier	op2		109897	1					
ANR	110077	Identifier	constant		109897	1					
ANR	110078	ElseStatement	else		109897	0					
ANR	110079	CompoundStatement		27:8:775:775	109897	0					
ANR	110080	ExpressionStatement	"SET_NODE ( opline -> op2 , & method_node )"	3279:2:95223:95258	109897	0	True				
ANR	110081	CallExpression	"SET_NODE ( opline -> op2 , & method_node )"		109897	0					
ANR	110082	Callee	SET_NODE		109897	0					
ANR	110083	Identifier	SET_NODE		109897	0					
ANR	110084	ArgumentList	opline -> op2		109897	1					
ANR	110085	Argument	opline -> op2		109897	0					
ANR	110086	PtrMemberAccess	opline -> op2		109897	0					
ANR	110087	Identifier	opline		109897	0					
ANR	110088	Identifier	op2		109897	1					
ANR	110089	Argument	& method_node		109897	1					
ANR	110090	UnaryOperationExpression	& method_node		109897	0					
ANR	110091	UnaryOperator	&		109897	0					
ANR	110092	Identifier	method_node		109897	1					
ANR	110093	ExpressionStatement	"zend_compile_call_common ( result , args_ast , NULL )"	3282:1:95265:95313	109897	9	True				
ANR	110094	CallExpression	"zend_compile_call_common ( result , args_ast , NULL )"		109897	0					
ANR	110095	Callee	zend_compile_call_common		109897	0					
ANR	110096	Identifier	zend_compile_call_common		109897	0					
ANR	110097	ArgumentList	result		109897	1					
ANR	110098	Argument	result		109897	0					
ANR	110099	Identifier	result		109897	0					
ANR	110100	Argument	args_ast		109897	1					
ANR	110101	Identifier	args_ast		109897	0					
ANR	110102	Argument	NULL		109897	2					
ANR	110103	Identifier	NULL		109897	0					
ANR	110104	ReturnType	void		109897	1					
ANR	110105	Identifier	zend_compile_method_call		109897	2					
ANR	110106	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		109897	3					
ANR	110107	Parameter	znode * result	3251:30:94388:94400	109897	0	True				
ANR	110108	ParameterType	znode *		109897	0					
ANR	110109	Identifier	result		109897	1					
ANR	110110	Parameter	zend_ast * ast	3251:45:94403:94415	109897	1	True				
ANR	110111	ParameterType	zend_ast *		109897	0					
ANR	110112	Identifier	ast		109897	1					
ANR	110113	Parameter	uint32_t type	3251:60:94418:94430	109897	2	True				
ANR	110114	ParameterType	uint32_t		109897	0					
ANR	110115	Identifier	type		109897	1					
ANR	110116	CFGEntryNode	ENTRY		109897		True				
ANR	110117	CFGExitNode	EXIT		109897		True				
ANR	110118	Symbol	opline -> op2		109897						
ANR	110119	Symbol	& method_node		109897						
ANR	110120	Symbol	ast		109897						
ANR	110121	Symbol	zend_add_func_name_literal		109897						
ANR	110122	Symbol	E_COMPILE_ERROR		109897						
ANR	110123	Symbol	method_ast		109897						
ANR	110124	Symbol	obj_node . op_type		109897						
ANR	110125	Symbol	Z_TYPE		109897						
ANR	110126	Symbol	type		109897						
ANR	110127	Symbol	Z_STR		109897						
ANR	110128	Symbol	& obj_node		109897						
ANR	110129	Symbol	method_node . u		109897						
ANR	110130	Symbol	result		109897						
ANR	110131	Symbol	* ast		109897						
ANR	110132	Symbol	opline		109897						
ANR	110133	Symbol	* * ast		109897						
ANR	110134	Symbol	method_node . op_type		109897						
ANR	110135	Symbol	IS_STRING		109897						
ANR	110136	Symbol	method_node		109897						
ANR	110137	Symbol	obj_node		109897						
ANR	110138	Symbol	is_this_fetch		109897						
ANR	110139	Symbol	IS_CONST		109897						
ANR	110140	Symbol	method_node . u . constant		109897						
ANR	110141	Symbol	NULL		109897						
ANR	110142	Symbol	CG		109897						
ANR	110143	Symbol	active_op_array		109897						
ANR	110144	Symbol	ZEND_INIT_METHOD_CALL		109897						
ANR	110145	Symbol	obj_ast		109897						
ANR	110146	Symbol	* opline		109897						
ANR	110147	Symbol	opline -> op2 . constant		109897						
ANR	110148	Symbol	* ast -> child		109897						
ANR	110149	Symbol	opline -> op2_type		109897						
ANR	110150	Symbol	ast -> child		109897						
ANR	110151	Symbol	args_ast		109897						
ANR	110152	Symbol	IS_UNUSED		109897						
ANR	110153	Symbol	zend_emit_op		109897						
ANR	110154	Function	zend_is_constructor	3286:0:95328:95469							
ANR	110155	FunctionDef	zend_is_constructor (zend_string * name)		110154	0					
ANR	110156	CompoundStatement		3287:0:95394:95469	110154	0					
ANR	110157	ReturnStatement	"return zend_string_equals_literal_ci ( name , ZEND_CONSTRUCTOR_FUNC_NAME ) ;"	3288:1:95397:95467	110154	0	True				
ANR	110158	CallExpression	"zend_string_equals_literal_ci ( name , ZEND_CONSTRUCTOR_FUNC_NAME )"		110154	0					
ANR	110159	Callee	zend_string_equals_literal_ci		110154	0					
ANR	110160	Identifier	zend_string_equals_literal_ci		110154	0					
ANR	110161	ArgumentList	name		110154	1					
ANR	110162	Argument	name		110154	0					
ANR	110163	Identifier	name		110154	0					
ANR	110164	Argument	ZEND_CONSTRUCTOR_FUNC_NAME		110154	1					
ANR	110165	Identifier	ZEND_CONSTRUCTOR_FUNC_NAME		110154	0					
ANR	110166	ReturnType	static zend_bool		110154	1					
ANR	110167	Identifier	zend_is_constructor		110154	2					
ANR	110168	ParameterList	zend_string * name		110154	3					
ANR	110169	Parameter	zend_string * name	3286:37:95365:95381	110154	0	True				
ANR	110170	ParameterType	zend_string *		110154	0					
ANR	110171	Identifier	name		110154	1					
ANR	110172	CFGEntryNode	ENTRY		110154		True				
ANR	110173	CFGExitNode	EXIT		110154		True				
ANR	110174	Symbol	ZEND_CONSTRUCTOR_FUNC_NAME		110154						
ANR	110175	Symbol	name		110154						
ANR	110176	Symbol	zend_string_equals_literal_ci		110154						
ANR	110177	Function	zend_compile_static_call	3292:0:95482:97025							
ANR	110178	FunctionDef	"zend_compile_static_call (znode * result , zend_ast * ast , uint32_t type)"		110177	0					
ANR	110179	CompoundStatement		3293:0:95567:97025	110177	0					
ANR	110180	IdentifierDeclStatement	zend_ast * class_ast = ast -> child [ 0 ] ;	3294:1:95570:95605	110177	0	True				
ANR	110181	IdentifierDecl	* class_ast = ast -> child [ 0 ]		110177	0					
ANR	110182	IdentifierDeclType	zend_ast *		110177	0					
ANR	110183	Identifier	class_ast		110177	1					
ANR	110184	AssignmentExpression	* class_ast = ast -> child [ 0 ]		110177	2		=			
ANR	110185	Identifier	class_ast		110177	0					
ANR	110186	ArrayIndexing	ast -> child [ 0 ]		110177	1					
ANR	110187	PtrMemberAccess	ast -> child		110177	0					
ANR	110188	Identifier	ast		110177	0					
ANR	110189	Identifier	child		110177	1					
ANR	110190	PrimaryExpression	0		110177	1					
ANR	110191	IdentifierDeclStatement	zend_ast * method_ast = ast -> child [ 1 ] ;	3295:1:95608:95644	110177	1	True				
ANR	110192	IdentifierDecl	* method_ast = ast -> child [ 1 ]		110177	0					
ANR	110193	IdentifierDeclType	zend_ast *		110177	0					
ANR	110194	Identifier	method_ast		110177	1					
ANR	110195	AssignmentExpression	* method_ast = ast -> child [ 1 ]		110177	2		=			
ANR	110196	Identifier	method_ast		110177	0					
ANR	110197	ArrayIndexing	ast -> child [ 1 ]		110177	1					
ANR	110198	PtrMemberAccess	ast -> child		110177	0					
ANR	110199	Identifier	ast		110177	0					
ANR	110200	Identifier	child		110177	1					
ANR	110201	PrimaryExpression	1		110177	1					
ANR	110202	IdentifierDeclStatement	zend_ast * args_ast = ast -> child [ 2 ] ;	3296:1:95647:95681	110177	2	True				
ANR	110203	IdentifierDecl	* args_ast = ast -> child [ 2 ]		110177	0					
ANR	110204	IdentifierDeclType	zend_ast *		110177	0					
ANR	110205	Identifier	args_ast		110177	1					
ANR	110206	AssignmentExpression	* args_ast = ast -> child [ 2 ]		110177	2		=			
ANR	110207	Identifier	args_ast		110177	0					
ANR	110208	ArrayIndexing	ast -> child [ 2 ]		110177	1					
ANR	110209	PtrMemberAccess	ast -> child		110177	0					
ANR	110210	Identifier	ast		110177	0					
ANR	110211	Identifier	child		110177	1					
ANR	110212	PrimaryExpression	2		110177	1					
ANR	110213	IdentifierDeclStatement	"znode class_node , method_node ;"	3298:1:95685:95714	110177	3	True				
ANR	110214	IdentifierDecl	class_node		110177	0					
ANR	110215	IdentifierDeclType	znode		110177	0					
ANR	110216	Identifier	class_node		110177	1					
ANR	110217	IdentifierDecl	method_node		110177	1					
ANR	110218	IdentifierDeclType	znode		110177	0					
ANR	110219	Identifier	method_node		110177	1					
ANR	110220	IdentifierDeclStatement	zend_op * opline ;	3299:1:95717:95732	110177	4	True				
ANR	110221	IdentifierDecl	* opline		110177	0					
ANR	110222	IdentifierDeclType	zend_op *		110177	0					
ANR	110223	Identifier	opline		110177	1					
ANR	110224	IdentifierDeclStatement	zend_ulong extended_value = 0 ;	3300:1:95735:95764	110177	5	True				
ANR	110225	IdentifierDecl	extended_value = 0		110177	0					
ANR	110226	IdentifierDeclType	zend_ulong		110177	0					
ANR	110227	Identifier	extended_value		110177	1					
ANR	110228	AssignmentExpression	extended_value = 0		110177	2		=			
ANR	110229	Identifier	extended_value		110177	0					
ANR	110230	PrimaryExpression	0		110177	1					
ANR	110231	IfStatement	if ( zend_is_const_default_class_ref ( class_ast ) )		110177	6					
ANR	110232	Condition	zend_is_const_default_class_ref ( class_ast )	3302:5:95772:95813	110177	0	True				
ANR	110233	CallExpression	zend_is_const_default_class_ref ( class_ast )		110177	0					
ANR	110234	Callee	zend_is_const_default_class_ref		110177	0					
ANR	110235	Identifier	zend_is_const_default_class_ref		110177	0					
ANR	110236	ArgumentList	class_ast		110177	1					
ANR	110237	Argument	class_ast		110177	0					
ANR	110238	Identifier	class_ast		110177	0					
ANR	110239	CompoundStatement		10:49:248:248	110177	1					
ANR	110240	ExpressionStatement	class_node . op_type = IS_CONST	3303:2:95820:95849	110177	0	True				
ANR	110241	AssignmentExpression	class_node . op_type = IS_CONST		110177	0		=			
ANR	110242	MemberAccess	class_node . op_type		110177	0					
ANR	110243	Identifier	class_node		110177	0					
ANR	110244	Identifier	op_type		110177	1					
ANR	110245	Identifier	IS_CONST		110177	1					
ANR	110246	ExpressionStatement	"ZVAL_STR ( & class_node . u . constant , zend_resolve_class_name_ast ( class_ast ) )"	3304:2:95853:95925	110177	1	True				
ANR	110247	CallExpression	"ZVAL_STR ( & class_node . u . constant , zend_resolve_class_name_ast ( class_ast ) )"		110177	0					
ANR	110248	Callee	ZVAL_STR		110177	0					
ANR	110249	Identifier	ZVAL_STR		110177	0					
ANR	110250	ArgumentList	& class_node . u . constant		110177	1					
ANR	110251	Argument	& class_node . u . constant		110177	0					
ANR	110252	UnaryOperationExpression	& class_node . u . constant		110177	0					
ANR	110253	UnaryOperator	&		110177	0					
ANR	110254	MemberAccess	class_node . u . constant		110177	1					
ANR	110255	MemberAccess	class_node . u		110177	0					
ANR	110256	Identifier	class_node		110177	0					
ANR	110257	Identifier	u		110177	1					
ANR	110258	Identifier	constant		110177	1					
ANR	110259	Argument	zend_resolve_class_name_ast ( class_ast )		110177	1					
ANR	110260	CallExpression	zend_resolve_class_name_ast ( class_ast )		110177	0					
ANR	110261	Callee	zend_resolve_class_name_ast		110177	0					
ANR	110262	Identifier	zend_resolve_class_name_ast		110177	0					
ANR	110263	ArgumentList	class_ast		110177	1					
ANR	110264	Argument	class_ast		110177	0					
ANR	110265	Identifier	class_ast		110177	0					
ANR	110266	ElseStatement	else		110177	0					
ANR	110267	CompoundStatement		13:8:367:367	110177	0					
ANR	110268	ExpressionStatement	"opline = zend_compile_class_ref ( & class_node , class_ast , 1 )"	3306:2:95939:95997	110177	0	True				
ANR	110269	AssignmentExpression	"opline = zend_compile_class_ref ( & class_node , class_ast , 1 )"		110177	0		=			
ANR	110270	Identifier	opline		110177	0					
ANR	110271	CallExpression	"zend_compile_class_ref ( & class_node , class_ast , 1 )"		110177	1					
ANR	110272	Callee	zend_compile_class_ref		110177	0					
ANR	110273	Identifier	zend_compile_class_ref		110177	0					
ANR	110274	ArgumentList	& class_node		110177	1					
ANR	110275	Argument	& class_node		110177	0					
ANR	110276	UnaryOperationExpression	& class_node		110177	0					
ANR	110277	UnaryOperator	&		110177	0					
ANR	110278	Identifier	class_node		110177	1					
ANR	110279	Argument	class_ast		110177	1					
ANR	110280	Identifier	class_ast		110177	0					
ANR	110281	Argument	1		110177	2					
ANR	110282	PrimaryExpression	1		110177	0					
ANR	110283	ExpressionStatement	extended_value = opline -> extended_value	3307:2:96001:96040	110177	1	True				
ANR	110284	AssignmentExpression	extended_value = opline -> extended_value		110177	0		=			
ANR	110285	Identifier	extended_value		110177	0					
ANR	110286	PtrMemberAccess	opline -> extended_value		110177	1					
ANR	110287	Identifier	opline		110177	0					
ANR	110288	Identifier	extended_value		110177	1					
ANR	110289	ExpressionStatement	"zend_compile_expr ( & method_node , method_ast )"	3310:1:96047:96090	110177	7	True				
ANR	110290	CallExpression	"zend_compile_expr ( & method_node , method_ast )"		110177	0					
ANR	110291	Callee	zend_compile_expr		110177	0					
ANR	110292	Identifier	zend_compile_expr		110177	0					
ANR	110293	ArgumentList	& method_node		110177	1					
ANR	110294	Argument	& method_node		110177	0					
ANR	110295	UnaryOperationExpression	& method_node		110177	0					
ANR	110296	UnaryOperator	&		110177	0					
ANR	110297	Identifier	method_node		110177	1					
ANR	110298	Argument	method_ast		110177	1					
ANR	110299	Identifier	method_ast		110177	0					
ANR	110300	IfStatement	if ( method_node . op_type == IS_CONST )		110177	8					
ANR	110301	Condition	method_node . op_type == IS_CONST	3311:5:96097:96127	110177	0	True				
ANR	110302	EqualityExpression	method_node . op_type == IS_CONST		110177	0		==			
ANR	110303	MemberAccess	method_node . op_type		110177	0					
ANR	110304	Identifier	method_node		110177	0					
ANR	110305	Identifier	op_type		110177	1					
ANR	110306	Identifier	IS_CONST		110177	1					
ANR	110307	CompoundStatement		20:2:566:602	110177	1					
ANR	110308	IdentifierDeclStatement	zval * name = & method_node . u . constant ;	3312:2:96134:96170	110177	0	True				
ANR	110309	IdentifierDecl	* name = & method_node . u . constant		110177	0					
ANR	110310	IdentifierDeclType	zval *		110177	0					
ANR	110311	Identifier	name		110177	1					
ANR	110312	AssignmentExpression	* name = & method_node . u . constant		110177	2		=			
ANR	110313	Identifier	name		110177	0					
ANR	110314	UnaryOperationExpression	& method_node . u . constant		110177	1					
ANR	110315	UnaryOperator	&		110177	0					
ANR	110316	MemberAccess	method_node . u . constant		110177	1					
ANR	110317	MemberAccess	method_node . u		110177	0					
ANR	110318	Identifier	method_node		110177	0					
ANR	110319	Identifier	u		110177	1					
ANR	110320	Identifier	constant		110177	1					
ANR	110321	IfStatement	if ( Z_TYPE_P ( name ) != IS_STRING )		110177	1					
ANR	110322	Condition	Z_TYPE_P ( name ) != IS_STRING	3313:6:96178:96204	110177	0	True				
ANR	110323	EqualityExpression	Z_TYPE_P ( name ) != IS_STRING		110177	0		!=			
ANR	110324	CallExpression	Z_TYPE_P ( name )		110177	0					
ANR	110325	Callee	Z_TYPE_P		110177	0					
ANR	110326	Identifier	Z_TYPE_P		110177	0					
ANR	110327	ArgumentList	name		110177	1					
ANR	110328	Argument	name		110177	0					
ANR	110329	Identifier	name		110177	0					
ANR	110330	Identifier	IS_STRING		110177	1					
ANR	110331	CompoundStatement		21:35:639:639	110177	1					
ANR	110332	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Method name must be a string"" )"	3314:3:96212:96280	110177	0	True				
ANR	110333	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Method name must be a string"" )"		110177	0					
ANR	110334	Callee	zend_error_noreturn		110177	0					
ANR	110335	Identifier	zend_error_noreturn		110177	0					
ANR	110336	ArgumentList	E_COMPILE_ERROR		110177	1					
ANR	110337	Argument	E_COMPILE_ERROR		110177	0					
ANR	110338	Identifier	E_COMPILE_ERROR		110177	0					
ANR	110339	Argument	"""Method name must be a string"""		110177	1					
ANR	110340	PrimaryExpression	"""Method name must be a string"""		110177	0					
ANR	110341	IfStatement	if ( zend_is_constructor ( Z_STR_P ( name ) ) )		110177	2					
ANR	110342	Condition	zend_is_constructor ( Z_STR_P ( name ) )	3316:6:96292:96325	110177	0	True				
ANR	110343	CallExpression	zend_is_constructor ( Z_STR_P ( name ) )		110177	0					
ANR	110344	Callee	zend_is_constructor		110177	0					
ANR	110345	Identifier	zend_is_constructor		110177	0					
ANR	110346	ArgumentList	Z_STR_P ( name )		110177	1					
ANR	110347	Argument	Z_STR_P ( name )		110177	0					
ANR	110348	CallExpression	Z_STR_P ( name )		110177	0					
ANR	110349	Callee	Z_STR_P		110177	0					
ANR	110350	Identifier	Z_STR_P		110177	0					
ANR	110351	ArgumentList	name		110177	1					
ANR	110352	Argument	name		110177	0					
ANR	110353	Identifier	name		110177	0					
ANR	110354	CompoundStatement		24:42:760:760	110177	1					
ANR	110355	ExpressionStatement	zval_ptr_dtor ( name )	3317:3:96333:96352	110177	0	True				
ANR	110356	CallExpression	zval_ptr_dtor ( name )		110177	0					
ANR	110357	Callee	zval_ptr_dtor		110177	0					
ANR	110358	Identifier	zval_ptr_dtor		110177	0					
ANR	110359	ArgumentList	name		110177	1					
ANR	110360	Argument	name		110177	0					
ANR	110361	Identifier	name		110177	0					
ANR	110362	ExpressionStatement	method_node . op_type = IS_UNUSED	3318:3:96357:96388	110177	1	True				
ANR	110363	AssignmentExpression	method_node . op_type = IS_UNUSED		110177	0		=			
ANR	110364	MemberAccess	method_node . op_type		110177	0					
ANR	110365	Identifier	method_node		110177	0					
ANR	110366	Identifier	op_type		110177	1					
ANR	110367	Identifier	IS_UNUSED		110177	1					
ANR	110368	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	3322:1:96399:96440	110177	9	True				
ANR	110369	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		110177	0		=			
ANR	110370	Identifier	opline		110177	0					
ANR	110371	CallExpression	get_next_op ( CG ( active_op_array ) )		110177	1					
ANR	110372	Callee	get_next_op		110177	0					
ANR	110373	Identifier	get_next_op		110177	0					
ANR	110374	ArgumentList	CG ( active_op_array )		110177	1					
ANR	110375	Argument	CG ( active_op_array )		110177	0					
ANR	110376	CallExpression	CG ( active_op_array )		110177	0					
ANR	110377	Callee	CG		110177	0					
ANR	110378	Identifier	CG		110177	0					
ANR	110379	ArgumentList	active_op_array		110177	1					
ANR	110380	Argument	active_op_array		110177	0					
ANR	110381	Identifier	active_op_array		110177	0					
ANR	110382	ExpressionStatement	opline -> opcode = ZEND_INIT_STATIC_METHOD_CALL	3323:1:96443:96488	110177	10	True				
ANR	110383	AssignmentExpression	opline -> opcode = ZEND_INIT_STATIC_METHOD_CALL		110177	0		=			
ANR	110384	PtrMemberAccess	opline -> opcode		110177	0					
ANR	110385	Identifier	opline		110177	0					
ANR	110386	Identifier	opcode		110177	1					
ANR	110387	Identifier	ZEND_INIT_STATIC_METHOD_CALL		110177	1					
ANR	110388	ExpressionStatement	opline -> extended_value = extended_value	3324:1:96491:96530	110177	11	True				
ANR	110389	AssignmentExpression	opline -> extended_value = extended_value		110177	0		=			
ANR	110390	PtrMemberAccess	opline -> extended_value		110177	0					
ANR	110391	Identifier	opline		110177	0					
ANR	110392	Identifier	extended_value		110177	1					
ANR	110393	Identifier	extended_value		110177	1					
ANR	110394	ExpressionStatement	"zend_set_class_name_op1 ( opline , & class_node )"	3326:1:96534:96578	110177	12	True				
ANR	110395	CallExpression	"zend_set_class_name_op1 ( opline , & class_node )"		110177	0					
ANR	110396	Callee	zend_set_class_name_op1		110177	0					
ANR	110397	Identifier	zend_set_class_name_op1		110177	0					
ANR	110398	ArgumentList	opline		110177	1					
ANR	110399	Argument	opline		110177	0					
ANR	110400	Identifier	opline		110177	0					
ANR	110401	Argument	& class_node		110177	1					
ANR	110402	UnaryOperationExpression	& class_node		110177	0					
ANR	110403	UnaryOperator	&		110177	0					
ANR	110404	Identifier	class_node		110177	1					
ANR	110405	IfStatement	if ( method_node . op_type == IS_CONST )		110177	13					
ANR	110406	Condition	method_node . op_type == IS_CONST	3328:5:96586:96616	110177	0	True				
ANR	110407	EqualityExpression	method_node . op_type == IS_CONST		110177	0		==			
ANR	110408	MemberAccess	method_node . op_type		110177	0					
ANR	110409	Identifier	method_node		110177	0					
ANR	110410	Identifier	op_type		110177	1					
ANR	110411	Identifier	IS_CONST		110177	1					
ANR	110412	CompoundStatement		36:38:1051:1051	110177	1					
ANR	110413	ExpressionStatement	opline -> op2_type = IS_CONST	3329:2:96623:96650	110177	0	True				
ANR	110414	AssignmentExpression	opline -> op2_type = IS_CONST		110177	0		=			
ANR	110415	PtrMemberAccess	opline -> op2_type		110177	0					
ANR	110416	Identifier	opline		110177	0					
ANR	110417	Identifier	op2_type		110177	1					
ANR	110418	Identifier	IS_CONST		110177	1					
ANR	110419	ExpressionStatement	"opline -> op2 . constant = zend_add_func_name_literal ( CG ( active_op_array ) , Z_STR ( method_node . u . constant ) )"	3330:2:96654:96758	110177	1	True				
ANR	110420	AssignmentExpression	"opline -> op2 . constant = zend_add_func_name_literal ( CG ( active_op_array ) , Z_STR ( method_node . u . constant ) )"		110177	0		=			
ANR	110421	MemberAccess	opline -> op2 . constant		110177	0					
ANR	110422	PtrMemberAccess	opline -> op2		110177	0					
ANR	110423	Identifier	opline		110177	0					
ANR	110424	Identifier	op2		110177	1					
ANR	110425	Identifier	constant		110177	1					
ANR	110426	CallExpression	"zend_add_func_name_literal ( CG ( active_op_array ) , Z_STR ( method_node . u . constant ) )"		110177	1					
ANR	110427	Callee	zend_add_func_name_literal		110177	0					
ANR	110428	Identifier	zend_add_func_name_literal		110177	0					
ANR	110429	ArgumentList	CG ( active_op_array )		110177	1					
ANR	110430	Argument	CG ( active_op_array )		110177	0					
ANR	110431	CallExpression	CG ( active_op_array )		110177	0					
ANR	110432	Callee	CG		110177	0					
ANR	110433	Identifier	CG		110177	0					
ANR	110434	ArgumentList	active_op_array		110177	1					
ANR	110435	Argument	active_op_array		110177	0					
ANR	110436	Identifier	active_op_array		110177	0					
ANR	110437	Argument	Z_STR ( method_node . u . constant )		110177	1					
ANR	110438	CallExpression	Z_STR ( method_node . u . constant )		110177	0					
ANR	110439	Callee	Z_STR		110177	0					
ANR	110440	Identifier	Z_STR		110177	0					
ANR	110441	ArgumentList	method_node . u . constant		110177	1					
ANR	110442	Argument	method_node . u . constant		110177	0					
ANR	110443	MemberAccess	method_node . u . constant		110177	0					
ANR	110444	MemberAccess	method_node . u		110177	0					
ANR	110445	Identifier	method_node		110177	0					
ANR	110446	Identifier	u		110177	1					
ANR	110447	Identifier	constant		110177	1					
ANR	110448	IfStatement	if ( opline -> op1_type == IS_CONST )		110177	2					
ANR	110449	Condition	opline -> op1_type == IS_CONST	3332:6:96766:96793	110177	0	True				
ANR	110450	EqualityExpression	opline -> op1_type == IS_CONST		110177	0		==			
ANR	110451	PtrMemberAccess	opline -> op1_type		110177	0					
ANR	110452	Identifier	opline		110177	0					
ANR	110453	Identifier	op1_type		110177	1					
ANR	110454	Identifier	IS_CONST		110177	1					
ANR	110455	CompoundStatement		40:36:1228:1228	110177	1					
ANR	110456	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	3333:3:96801:96844	110177	0	True				
ANR	110457	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		110177	0					
ANR	110458	Callee	zend_alloc_cache_slot		110177	0					
ANR	110459	Identifier	zend_alloc_cache_slot		110177	0					
ANR	110460	ArgumentList	opline -> op2 . constant		110177	1					
ANR	110461	Argument	opline -> op2 . constant		110177	0					
ANR	110462	MemberAccess	opline -> op2 . constant		110177	0					
ANR	110463	PtrMemberAccess	opline -> op2		110177	0					
ANR	110464	Identifier	opline		110177	0					
ANR	110465	Identifier	op2		110177	1					
ANR	110466	Identifier	constant		110177	1					
ANR	110467	ElseStatement	else		110177	0					
ANR	110468	CompoundStatement		42:9:1287:1287	110177	0					
ANR	110469	ExpressionStatement	zend_alloc_polymorphic_cache_slot ( opline -> op2 . constant )	3335:3:96860:96915	110177	0	True				
ANR	110470	CallExpression	zend_alloc_polymorphic_cache_slot ( opline -> op2 . constant )		110177	0					
ANR	110471	Callee	zend_alloc_polymorphic_cache_slot		110177	0					
ANR	110472	Identifier	zend_alloc_polymorphic_cache_slot		110177	0					
ANR	110473	ArgumentList	opline -> op2 . constant		110177	1					
ANR	110474	Argument	opline -> op2 . constant		110177	0					
ANR	110475	MemberAccess	opline -> op2 . constant		110177	0					
ANR	110476	PtrMemberAccess	opline -> op2		110177	0					
ANR	110477	Identifier	opline		110177	0					
ANR	110478	Identifier	op2		110177	1					
ANR	110479	Identifier	constant		110177	1					
ANR	110480	ElseStatement	else		110177	0					
ANR	110481	CompoundStatement		45:8:1361:1361	110177	0					
ANR	110482	ExpressionStatement	"SET_NODE ( opline -> op2 , & method_node )"	3338:2:96933:96968	110177	0	True				
ANR	110483	CallExpression	"SET_NODE ( opline -> op2 , & method_node )"		110177	0					
ANR	110484	Callee	SET_NODE		110177	0					
ANR	110485	Identifier	SET_NODE		110177	0					
ANR	110486	ArgumentList	opline -> op2		110177	1					
ANR	110487	Argument	opline -> op2		110177	0					
ANR	110488	PtrMemberAccess	opline -> op2		110177	0					
ANR	110489	Identifier	opline		110177	0					
ANR	110490	Identifier	op2		110177	1					
ANR	110491	Argument	& method_node		110177	1					
ANR	110492	UnaryOperationExpression	& method_node		110177	0					
ANR	110493	UnaryOperator	&		110177	0					
ANR	110494	Identifier	method_node		110177	1					
ANR	110495	ExpressionStatement	"zend_compile_call_common ( result , args_ast , NULL )"	3341:1:96975:97023	110177	14	True				
ANR	110496	CallExpression	"zend_compile_call_common ( result , args_ast , NULL )"		110177	0					
ANR	110497	Callee	zend_compile_call_common		110177	0					
ANR	110498	Identifier	zend_compile_call_common		110177	0					
ANR	110499	ArgumentList	result		110177	1					
ANR	110500	Argument	result		110177	0					
ANR	110501	Identifier	result		110177	0					
ANR	110502	Argument	args_ast		110177	1					
ANR	110503	Identifier	args_ast		110177	0					
ANR	110504	Argument	NULL		110177	2					
ANR	110505	Identifier	NULL		110177	0					
ANR	110506	ReturnType	void		110177	1					
ANR	110507	Identifier	zend_compile_static_call		110177	2					
ANR	110508	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		110177	3					
ANR	110509	Parameter	znode * result	3292:30:95512:95524	110177	0	True				
ANR	110510	ParameterType	znode *		110177	0					
ANR	110511	Identifier	result		110177	1					
ANR	110512	Parameter	zend_ast * ast	3292:45:95527:95539	110177	1	True				
ANR	110513	ParameterType	zend_ast *		110177	0					
ANR	110514	Identifier	ast		110177	1					
ANR	110515	Parameter	uint32_t type	3292:60:95542:95554	110177	2	True				
ANR	110516	ParameterType	uint32_t		110177	0					
ANR	110517	Identifier	type		110177	1					
ANR	110518	CFGEntryNode	ENTRY		110177		True				
ANR	110519	CFGExitNode	EXIT		110177		True				
ANR	110520	Symbol	ast		110177						
ANR	110521	Symbol	zend_add_func_name_literal		110177						
ANR	110522	Symbol	& class_node		110177						
ANR	110523	Symbol	E_COMPILE_ERROR		110177						
ANR	110524	Symbol	& method_node . u		110177						
ANR	110525	Symbol	type		110177						
ANR	110526	Symbol	Z_STR		110177						
ANR	110527	Symbol	opline -> extended_value		110177						
ANR	110528	Symbol	method_node . u		110177						
ANR	110529	Symbol	opline		110177						
ANR	110530	Symbol	extended_value		110177						
ANR	110531	Symbol	IS_STRING		110177						
ANR	110532	Symbol	method_node		110177						
ANR	110533	Symbol	class_node . u		110177						
ANR	110534	Symbol	IS_CONST		110177						
ANR	110535	Symbol	NULL		110177						
ANR	110536	Symbol	opline -> op1_type		110177						
ANR	110537	Symbol	name		110177						
ANR	110538	Symbol	* ast -> child		110177						
ANR	110539	Symbol	Z_STR_P		110177						
ANR	110540	Symbol	ast -> child		110177						
ANR	110541	Symbol	args_ast		110177						
ANR	110542	Symbol	ZEND_INIT_STATIC_METHOD_CALL		110177						
ANR	110543	Symbol	zend_is_const_default_class_ref		110177						
ANR	110544	Symbol	opline -> op2		110177						
ANR	110545	Symbol	& method_node		110177						
ANR	110546	Symbol	class_node		110177						
ANR	110547	Symbol	method_ast		110177						
ANR	110548	Symbol	class_ast		110177						
ANR	110549	Symbol	result		110177						
ANR	110550	Symbol	class_node . op_type		110177						
ANR	110551	Symbol	& class_node . u . constant		110177						
ANR	110552	Symbol	* ast		110177						
ANR	110553	Symbol	* * ast		110177						
ANR	110554	Symbol	& method_node . u . constant		110177						
ANR	110555	Symbol	method_node . op_type		110177						
ANR	110556	Symbol	& class_node . u		110177						
ANR	110557	Symbol	method_node . u . constant		110177						
ANR	110558	Symbol	get_next_op		110177						
ANR	110559	Symbol	CG		110177						
ANR	110560	Symbol	zend_resolve_class_name_ast		110177						
ANR	110561	Symbol	active_op_array		110177						
ANR	110562	Symbol	Z_TYPE_P		110177						
ANR	110563	Symbol	zend_compile_class_ref		110177						
ANR	110564	Symbol	* opline		110177						
ANR	110565	Symbol	opline -> opcode		110177						
ANR	110566	Symbol	opline -> op2 . constant		110177						
ANR	110567	Symbol	zend_is_constructor		110177						
ANR	110568	Symbol	opline -> op2_type		110177						
ANR	110569	Symbol	IS_UNUSED		110177						
ANR	110570	DeclStmt									
ANR	110571	Decl							void	void ( zend_ast * ast )	zend_compile_class_decl
ANR	110572	Function	zend_compile_new	3347:0:97084:98574							
ANR	110573	FunctionDef	"zend_compile_new (znode * result , zend_ast * ast)"		110572	0					
ANR	110574	CompoundStatement		3348:0:97146:98574	110572	0					
ANR	110575	IdentifierDeclStatement	zend_ast * class_ast = ast -> child [ 0 ] ;	3349:1:97149:97184	110572	0	True				
ANR	110576	IdentifierDecl	* class_ast = ast -> child [ 0 ]		110572	0					
ANR	110577	IdentifierDeclType	zend_ast *		110572	0					
ANR	110578	Identifier	class_ast		110572	1					
ANR	110579	AssignmentExpression	* class_ast = ast -> child [ 0 ]		110572	2		=			
ANR	110580	Identifier	class_ast		110572	0					
ANR	110581	ArrayIndexing	ast -> child [ 0 ]		110572	1					
ANR	110582	PtrMemberAccess	ast -> child		110572	0					
ANR	110583	Identifier	ast		110572	0					
ANR	110584	Identifier	child		110572	1					
ANR	110585	PrimaryExpression	0		110572	1					
ANR	110586	IdentifierDeclStatement	zend_ast * args_ast = ast -> child [ 1 ] ;	3350:1:97187:97221	110572	1	True				
ANR	110587	IdentifierDecl	* args_ast = ast -> child [ 1 ]		110572	0					
ANR	110588	IdentifierDeclType	zend_ast *		110572	0					
ANR	110589	Identifier	args_ast		110572	1					
ANR	110590	AssignmentExpression	* args_ast = ast -> child [ 1 ]		110572	2		=			
ANR	110591	Identifier	args_ast		110572	0					
ANR	110592	ArrayIndexing	ast -> child [ 1 ]		110572	1					
ANR	110593	PtrMemberAccess	ast -> child		110572	0					
ANR	110594	Identifier	ast		110572	0					
ANR	110595	Identifier	child		110572	1					
ANR	110596	PrimaryExpression	1		110572	1					
ANR	110597	IdentifierDeclStatement	"znode class_node , ctor_result ;"	3352:1:97225:97254	110572	2	True				
ANR	110598	IdentifierDecl	class_node		110572	0					
ANR	110599	IdentifierDeclType	znode		110572	0					
ANR	110600	Identifier	class_node		110572	1					
ANR	110601	IdentifierDecl	ctor_result		110572	1					
ANR	110602	IdentifierDeclType	znode		110572	0					
ANR	110603	Identifier	ctor_result		110572	1					
ANR	110604	IdentifierDeclStatement	zend_op * opline ;	3353:1:97257:97272	110572	3	True				
ANR	110605	IdentifierDecl	* opline		110572	0					
ANR	110606	IdentifierDeclType	zend_op *		110572	0					
ANR	110607	Identifier	opline		110572	1					
ANR	110608	IdentifierDeclStatement	uint32_t opnum ;	3354:1:97275:97289	110572	4	True				
ANR	110609	IdentifierDecl	opnum		110572	0					
ANR	110610	IdentifierDeclType	uint32_t		110572	0					
ANR	110611	Identifier	opnum		110572	1					
ANR	110612	IfStatement	if ( zend_is_const_default_class_ref ( class_ast ) )		110572	5					
ANR	110613	Condition	zend_is_const_default_class_ref ( class_ast )	3356:5:97297:97338	110572	0	True				
ANR	110614	CallExpression	zend_is_const_default_class_ref ( class_ast )		110572	0					
ANR	110615	Callee	zend_is_const_default_class_ref		110572	0					
ANR	110616	Identifier	zend_is_const_default_class_ref		110572	0					
ANR	110617	ArgumentList	class_ast		110572	1					
ANR	110618	Argument	class_ast		110572	0					
ANR	110619	Identifier	class_ast		110572	0					
ANR	110620	CompoundStatement		9:49:194:194	110572	1					
ANR	110621	ExpressionStatement	class_node . op_type = IS_CONST	3357:2:97345:97374	110572	0	True				
ANR	110622	AssignmentExpression	class_node . op_type = IS_CONST		110572	0		=			
ANR	110623	MemberAccess	class_node . op_type		110572	0					
ANR	110624	Identifier	class_node		110572	0					
ANR	110625	Identifier	op_type		110572	1					
ANR	110626	Identifier	IS_CONST		110572	1					
ANR	110627	ExpressionStatement	"ZVAL_STR ( & class_node . u . constant , zend_resolve_class_name_ast ( class_ast ) )"	3358:2:97378:97450	110572	1	True				
ANR	110628	CallExpression	"ZVAL_STR ( & class_node . u . constant , zend_resolve_class_name_ast ( class_ast ) )"		110572	0					
ANR	110629	Callee	ZVAL_STR		110572	0					
ANR	110630	Identifier	ZVAL_STR		110572	0					
ANR	110631	ArgumentList	& class_node . u . constant		110572	1					
ANR	110632	Argument	& class_node . u . constant		110572	0					
ANR	110633	UnaryOperationExpression	& class_node . u . constant		110572	0					
ANR	110634	UnaryOperator	&		110572	0					
ANR	110635	MemberAccess	class_node . u . constant		110572	1					
ANR	110636	MemberAccess	class_node . u		110572	0					
ANR	110637	Identifier	class_node		110572	0					
ANR	110638	Identifier	u		110572	1					
ANR	110639	Identifier	constant		110572	1					
ANR	110640	Argument	zend_resolve_class_name_ast ( class_ast )		110572	1					
ANR	110641	CallExpression	zend_resolve_class_name_ast ( class_ast )		110572	0					
ANR	110642	Callee	zend_resolve_class_name_ast		110572	0					
ANR	110643	Identifier	zend_resolve_class_name_ast		110572	0					
ANR	110644	ArgumentList	class_ast		110572	1					
ANR	110645	Argument	class_ast		110572	0					
ANR	110646	Identifier	class_ast		110572	0					
ANR	110647	ElseStatement	else		110572	0					
ANR	110648	IfStatement	if ( class_ast -> kind == ZEND_AST_CLASS )		110572	0					
ANR	110649	Condition	class_ast -> kind == ZEND_AST_CLASS	3359:12:97464:97496	110572	0	True				
ANR	110650	EqualityExpression	class_ast -> kind == ZEND_AST_CLASS		110572	0		==			
ANR	110651	PtrMemberAccess	class_ast -> kind		110572	0					
ANR	110652	Identifier	class_ast		110572	0					
ANR	110653	Identifier	kind		110572	1					
ANR	110654	Identifier	ZEND_AST_CLASS		110572	1					
ANR	110655	CompoundStatement		13:2:356:416	110572	1					
ANR	110656	IdentifierDeclStatement	uint32_t dcl_opnum = get_next_op_number ( CG ( active_op_array ) ) ;	3360:2:97503:97563	110572	0	True				
ANR	110657	IdentifierDecl	dcl_opnum = get_next_op_number ( CG ( active_op_array ) )		110572	0					
ANR	110658	IdentifierDeclType	uint32_t		110572	0					
ANR	110659	Identifier	dcl_opnum		110572	1					
ANR	110660	AssignmentExpression	dcl_opnum = get_next_op_number ( CG ( active_op_array ) )		110572	2		=			
ANR	110661	Identifier	dcl_opnum		110572	0					
ANR	110662	CallExpression	get_next_op_number ( CG ( active_op_array ) )		110572	1					
ANR	110663	Callee	get_next_op_number		110572	0					
ANR	110664	Identifier	get_next_op_number		110572	0					
ANR	110665	ArgumentList	CG ( active_op_array )		110572	1					
ANR	110666	Argument	CG ( active_op_array )		110572	0					
ANR	110667	CallExpression	CG ( active_op_array )		110572	0					
ANR	110668	Callee	CG		110572	0					
ANR	110669	Identifier	CG		110572	0					
ANR	110670	ArgumentList	active_op_array		110572	1					
ANR	110671	Argument	active_op_array		110572	0					
ANR	110672	Identifier	active_op_array		110572	0					
ANR	110673	ExpressionStatement	zend_compile_class_decl ( class_ast )	3361:2:97567:97601	110572	1	True				
ANR	110674	CallExpression	zend_compile_class_decl ( class_ast )		110572	0					
ANR	110675	Callee	zend_compile_class_decl		110572	0					
ANR	110676	Identifier	zend_compile_class_decl		110572	0					
ANR	110677	ArgumentList	class_ast		110572	1					
ANR	110678	Argument	class_ast		110572	0					
ANR	110679	Identifier	class_ast		110572	0					
ANR	110680	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ dcl_opnum ]	3363:2:97646:97695	110572	2	True				
ANR	110681	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ dcl_opnum ]		110572	0		=			
ANR	110682	Identifier	opline		110572	0					
ANR	110683	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ dcl_opnum ]		110572	1					
ANR	110684	UnaryOperator	&		110572	0					
ANR	110685	ArrayIndexing	CG ( active_op_array ) -> opcodes [ dcl_opnum ]		110572	1					
ANR	110686	PtrMemberAccess	CG ( active_op_array ) -> opcodes		110572	0					
ANR	110687	CallExpression	CG ( active_op_array )		110572	0					
ANR	110688	Callee	CG		110572	0					
ANR	110689	Identifier	CG		110572	0					
ANR	110690	ArgumentList	active_op_array		110572	1					
ANR	110691	Argument	active_op_array		110572	0					
ANR	110692	Identifier	active_op_array		110572	0					
ANR	110693	Identifier	opcodes		110572	1					
ANR	110694	Identifier	dcl_opnum		110572	1					
ANR	110695	IfStatement	if ( opline -> opcode == ZEND_FETCH_CLASS )		110572	3					
ANR	110696	Condition	opline -> opcode == ZEND_FETCH_CLASS	3364:6:97703:97736	110572	0	True				
ANR	110697	EqualityExpression	opline -> opcode == ZEND_FETCH_CLASS		110572	0		==			
ANR	110698	PtrMemberAccess	opline -> opcode		110572	0					
ANR	110699	Identifier	opline		110572	0					
ANR	110700	Identifier	opcode		110572	1					
ANR	110701	Identifier	ZEND_FETCH_CLASS		110572	1					
ANR	110702	CompoundStatement		17:42:592:592	110572	1					
ANR	110703	ExpressionStatement	opline ++	3365:3:97744:97752	110572	0	True				
ANR	110704	PostIncDecOperationExpression	opline ++		110572	0					
ANR	110705	Identifier	opline		110572	0					
ANR	110706	IncDec	++		110572	1					
ANR	110707	ExpressionStatement	class_node . op_type = opline -> result_type	3367:2:97760:97800	110572	4	True				
ANR	110708	AssignmentExpression	class_node . op_type = opline -> result_type		110572	0		=			
ANR	110709	MemberAccess	class_node . op_type		110572	0					
ANR	110710	Identifier	class_node		110572	0					
ANR	110711	Identifier	op_type		110572	1					
ANR	110712	PtrMemberAccess	opline -> result_type		110572	1					
ANR	110713	Identifier	opline		110572	0					
ANR	110714	Identifier	result_type		110572	1					
ANR	110715	ExpressionStatement	class_node . u . op . var = opline -> result . var	3368:2:97804:97844	110572	5	True				
ANR	110716	AssignmentExpression	class_node . u . op . var = opline -> result . var		110572	0		=			
ANR	110717	MemberAccess	class_node . u . op . var		110572	0					
ANR	110718	MemberAccess	class_node . u . op		110572	0					
ANR	110719	MemberAccess	class_node . u		110572	0					
ANR	110720	Identifier	class_node		110572	0					
ANR	110721	Identifier	u		110572	1					
ANR	110722	Identifier	op		110572	1					
ANR	110723	Identifier	var		110572	1					
ANR	110724	MemberAccess	opline -> result . var		110572	1					
ANR	110725	PtrMemberAccess	opline -> result		110572	0					
ANR	110726	Identifier	opline		110572	0					
ANR	110727	Identifier	result		110572	1					
ANR	110728	Identifier	var		110572	1					
ANR	110729	ExpressionStatement	opline -> op1 . opline_num = get_next_op_number ( CG ( active_op_array ) )	3369:2:97848:97912	110572	6	True				
ANR	110730	AssignmentExpression	opline -> op1 . opline_num = get_next_op_number ( CG ( active_op_array ) )		110572	0		=			
ANR	110731	MemberAccess	opline -> op1 . opline_num		110572	0					
ANR	110732	PtrMemberAccess	opline -> op1		110572	0					
ANR	110733	Identifier	opline		110572	0					
ANR	110734	Identifier	op1		110572	1					
ANR	110735	Identifier	opline_num		110572	1					
ANR	110736	CallExpression	get_next_op_number ( CG ( active_op_array ) )		110572	1					
ANR	110737	Callee	get_next_op_number		110572	0					
ANR	110738	Identifier	get_next_op_number		110572	0					
ANR	110739	ArgumentList	CG ( active_op_array )		110572	1					
ANR	110740	Argument	CG ( active_op_array )		110572	0					
ANR	110741	CallExpression	CG ( active_op_array )		110572	0					
ANR	110742	Callee	CG		110572	0					
ANR	110743	Identifier	CG		110572	0					
ANR	110744	ArgumentList	active_op_array		110572	1					
ANR	110745	Argument	active_op_array		110572	0					
ANR	110746	Identifier	active_op_array		110572	0					
ANR	110747	ElseStatement	else		110572	0					
ANR	110748	CompoundStatement		23:8:775:775	110572	0					
ANR	110749	ExpressionStatement	"zend_compile_class_ref ( & class_node , class_ast , 1 )"	3371:2:97926:97975	110572	0	True				
ANR	110750	CallExpression	"zend_compile_class_ref ( & class_node , class_ast , 1 )"		110572	0					
ANR	110751	Callee	zend_compile_class_ref		110572	0					
ANR	110752	Identifier	zend_compile_class_ref		110572	0					
ANR	110753	ArgumentList	& class_node		110572	1					
ANR	110754	Argument	& class_node		110572	0					
ANR	110755	UnaryOperationExpression	& class_node		110572	0					
ANR	110756	UnaryOperator	&		110572	0					
ANR	110757	Identifier	class_node		110572	1					
ANR	110758	Argument	class_ast		110572	1					
ANR	110759	Identifier	class_ast		110572	0					
ANR	110760	Argument	1		110572	2					
ANR	110761	PrimaryExpression	1		110572	0					
ANR	110762	ExpressionStatement	opnum = get_next_op_number ( CG ( active_op_array ) )	3374:1:97982:98029	110572	6	True				
ANR	110763	AssignmentExpression	opnum = get_next_op_number ( CG ( active_op_array ) )		110572	0		=			
ANR	110764	Identifier	opnum		110572	0					
ANR	110765	CallExpression	get_next_op_number ( CG ( active_op_array ) )		110572	1					
ANR	110766	Callee	get_next_op_number		110572	0					
ANR	110767	Identifier	get_next_op_number		110572	0					
ANR	110768	ArgumentList	CG ( active_op_array )		110572	1					
ANR	110769	Argument	CG ( active_op_array )		110572	0					
ANR	110770	CallExpression	CG ( active_op_array )		110572	0					
ANR	110771	Callee	CG		110572	0					
ANR	110772	Identifier	CG		110572	0					
ANR	110773	ArgumentList	active_op_array		110572	1					
ANR	110774	Argument	active_op_array		110572	0					
ANR	110775	Identifier	active_op_array		110572	0					
ANR	110776	ExpressionStatement	"opline = zend_emit_op ( result , ZEND_NEW , NULL , NULL )"	3375:1:98032:98083	110572	7	True				
ANR	110777	AssignmentExpression	"opline = zend_emit_op ( result , ZEND_NEW , NULL , NULL )"		110572	0		=			
ANR	110778	Identifier	opline		110572	0					
ANR	110779	CallExpression	"zend_emit_op ( result , ZEND_NEW , NULL , NULL )"		110572	1					
ANR	110780	Callee	zend_emit_op		110572	0					
ANR	110781	Identifier	zend_emit_op		110572	0					
ANR	110782	ArgumentList	result		110572	1					
ANR	110783	Argument	result		110572	0					
ANR	110784	Identifier	result		110572	0					
ANR	110785	Argument	ZEND_NEW		110572	1					
ANR	110786	Identifier	ZEND_NEW		110572	0					
ANR	110787	Argument	NULL		110572	2					
ANR	110788	Identifier	NULL		110572	0					
ANR	110789	Argument	NULL		110572	3					
ANR	110790	Identifier	NULL		110572	0					
ANR	110791	IfStatement	if ( class_node . op_type == IS_CONST )		110572	8					
ANR	110792	Condition	class_node . op_type == IS_CONST	3377:5:98091:98120	110572	0	True				
ANR	110793	EqualityExpression	class_node . op_type == IS_CONST		110572	0		==			
ANR	110794	MemberAccess	class_node . op_type		110572	0					
ANR	110795	Identifier	class_node		110572	0					
ANR	110796	Identifier	op_type		110572	1					
ANR	110797	Identifier	IS_CONST		110572	1					
ANR	110798	CompoundStatement		30:37:976:976	110572	1					
ANR	110799	ExpressionStatement	opline -> op1_type = IS_CONST	3378:2:98127:98154	110572	0	True				
ANR	110800	AssignmentExpression	opline -> op1_type = IS_CONST		110572	0		=			
ANR	110801	PtrMemberAccess	opline -> op1_type		110572	0					
ANR	110802	Identifier	opline		110572	0					
ANR	110803	Identifier	op1_type		110572	1					
ANR	110804	Identifier	IS_CONST		110572	1					
ANR	110805	ExpressionStatement	"opline -> op1 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node . u . constant ) )"	3379:2:98158:98263	110572	1	True				
ANR	110806	AssignmentExpression	"opline -> op1 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node . u . constant ) )"		110572	0		=			
ANR	110807	MemberAccess	opline -> op1 . constant		110572	0					
ANR	110808	PtrMemberAccess	opline -> op1		110572	0					
ANR	110809	Identifier	opline		110572	0					
ANR	110810	Identifier	op1		110572	1					
ANR	110811	Identifier	constant		110572	1					
ANR	110812	CallExpression	"zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node . u . constant ) )"		110572	1					
ANR	110813	Callee	zend_add_class_name_literal		110572	0					
ANR	110814	Identifier	zend_add_class_name_literal		110572	0					
ANR	110815	ArgumentList	CG ( active_op_array )		110572	1					
ANR	110816	Argument	CG ( active_op_array )		110572	0					
ANR	110817	CallExpression	CG ( active_op_array )		110572	0					
ANR	110818	Callee	CG		110572	0					
ANR	110819	Identifier	CG		110572	0					
ANR	110820	ArgumentList	active_op_array		110572	1					
ANR	110821	Argument	active_op_array		110572	0					
ANR	110822	Identifier	active_op_array		110572	0					
ANR	110823	Argument	Z_STR ( class_node . u . constant )		110572	1					
ANR	110824	CallExpression	Z_STR ( class_node . u . constant )		110572	0					
ANR	110825	Callee	Z_STR		110572	0					
ANR	110826	Identifier	Z_STR		110572	0					
ANR	110827	ArgumentList	class_node . u . constant		110572	1					
ANR	110828	Argument	class_node . u . constant		110572	0					
ANR	110829	MemberAccess	class_node . u . constant		110572	0					
ANR	110830	MemberAccess	class_node . u		110572	0					
ANR	110831	Identifier	class_node		110572	0					
ANR	110832	Identifier	u		110572	1					
ANR	110833	Identifier	constant		110572	1					
ANR	110834	ElseStatement	else		110572	0					
ANR	110835	CompoundStatement		34:8:1126:1126	110572	0					
ANR	110836	ExpressionStatement	"SET_NODE ( opline -> op1 , & class_node )"	3382:2:98277:98311	110572	0	True				
ANR	110837	CallExpression	"SET_NODE ( opline -> op1 , & class_node )"		110572	0					
ANR	110838	Callee	SET_NODE		110572	0					
ANR	110839	Identifier	SET_NODE		110572	0					
ANR	110840	ArgumentList	opline -> op1		110572	1					
ANR	110841	Argument	opline -> op1		110572	0					
ANR	110842	PtrMemberAccess	opline -> op1		110572	0					
ANR	110843	Identifier	opline		110572	0					
ANR	110844	Identifier	op1		110572	1					
ANR	110845	Argument	& class_node		110572	1					
ANR	110846	UnaryOperationExpression	& class_node		110572	0					
ANR	110847	UnaryOperator	&		110572	0					
ANR	110848	Identifier	class_node		110572	1					
ANR	110849	ExpressionStatement	"zend_compile_call_common ( & ctor_result , args_ast , NULL )"	3385:1:98318:98372	110572	9	True				
ANR	110850	CallExpression	"zend_compile_call_common ( & ctor_result , args_ast , NULL )"		110572	0					
ANR	110851	Callee	zend_compile_call_common		110572	0					
ANR	110852	Identifier	zend_compile_call_common		110572	0					
ANR	110853	ArgumentList	& ctor_result		110572	1					
ANR	110854	Argument	& ctor_result		110572	0					
ANR	110855	UnaryOperationExpression	& ctor_result		110572	0					
ANR	110856	UnaryOperator	&		110572	0					
ANR	110857	Identifier	ctor_result		110572	1					
ANR	110858	Argument	args_ast		110572	1					
ANR	110859	Identifier	args_ast		110572	0					
ANR	110860	Argument	NULL		110572	2					
ANR	110861	Identifier	NULL		110572	0					
ANR	110862	ExpressionStatement	zend_do_free ( & ctor_result )	3386:1:98375:98401	110572	10	True				
ANR	110863	CallExpression	zend_do_free ( & ctor_result )		110572	0					
ANR	110864	Callee	zend_do_free		110572	0					
ANR	110865	Identifier	zend_do_free		110572	0					
ANR	110866	ArgumentList	& ctor_result		110572	1					
ANR	110867	Argument	& ctor_result		110572	0					
ANR	110868	UnaryOperationExpression	& ctor_result		110572	0					
ANR	110869	UnaryOperator	&		110572	0					
ANR	110870	Identifier	ctor_result		110572	1					
ANR	110871	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ opnum ]	3389:1:98460:98505	110572	11	True				
ANR	110872	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ opnum ]		110572	0		=			
ANR	110873	Identifier	opline		110572	0					
ANR	110874	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ opnum ]		110572	1					
ANR	110875	UnaryOperator	&		110572	0					
ANR	110876	ArrayIndexing	CG ( active_op_array ) -> opcodes [ opnum ]		110572	1					
ANR	110877	PtrMemberAccess	CG ( active_op_array ) -> opcodes		110572	0					
ANR	110878	CallExpression	CG ( active_op_array )		110572	0					
ANR	110879	Callee	CG		110572	0					
ANR	110880	Identifier	CG		110572	0					
ANR	110881	ArgumentList	active_op_array		110572	1					
ANR	110882	Argument	active_op_array		110572	0					
ANR	110883	Identifier	active_op_array		110572	0					
ANR	110884	Identifier	opcodes		110572	1					
ANR	110885	Identifier	opnum		110572	1					
ANR	110886	ExpressionStatement	opline -> op2 . opline_num = get_next_op_number ( CG ( active_op_array ) )	3390:1:98508:98572	110572	12	True				
ANR	110887	AssignmentExpression	opline -> op2 . opline_num = get_next_op_number ( CG ( active_op_array ) )		110572	0		=			
ANR	110888	MemberAccess	opline -> op2 . opline_num		110572	0					
ANR	110889	PtrMemberAccess	opline -> op2		110572	0					
ANR	110890	Identifier	opline		110572	0					
ANR	110891	Identifier	op2		110572	1					
ANR	110892	Identifier	opline_num		110572	1					
ANR	110893	CallExpression	get_next_op_number ( CG ( active_op_array ) )		110572	1					
ANR	110894	Callee	get_next_op_number		110572	0					
ANR	110895	Identifier	get_next_op_number		110572	0					
ANR	110896	ArgumentList	CG ( active_op_array )		110572	1					
ANR	110897	Argument	CG ( active_op_array )		110572	0					
ANR	110898	CallExpression	CG ( active_op_array )		110572	0					
ANR	110899	Callee	CG		110572	0					
ANR	110900	Identifier	CG		110572	0					
ANR	110901	ArgumentList	active_op_array		110572	1					
ANR	110902	Argument	active_op_array		110572	0					
ANR	110903	Identifier	active_op_array		110572	0					
ANR	110904	ReturnType	void		110572	1					
ANR	110905	Identifier	zend_compile_new		110572	2					
ANR	110906	ParameterList	"znode * result , zend_ast * ast"		110572	3					
ANR	110907	Parameter	znode * result	3347:22:97106:97118	110572	0	True				
ANR	110908	ParameterType	znode *		110572	0					
ANR	110909	Identifier	result		110572	1					
ANR	110910	Parameter	zend_ast * ast	3347:37:97121:97133	110572	1	True				
ANR	110911	ParameterType	zend_ast *		110572	0					
ANR	110912	Identifier	ast		110572	1					
ANR	110913	CFGEntryNode	ENTRY		110572		True				
ANR	110914	CFGExitNode	EXIT		110572		True				
ANR	110915	Symbol	ast		110572						
ANR	110916	Symbol	class_node . u . constant		110572						
ANR	110917	Symbol	& class_node		110572						
ANR	110918	Symbol	* CG		110572						
ANR	110919	Symbol	Z_STR		110572						
ANR	110920	Symbol	CG ( active_op_array ) -> opcodes		110572						
ANR	110921	Symbol	opline -> result		110572						
ANR	110922	Symbol	opline		110572						
ANR	110923	Symbol	class_node . u		110572						
ANR	110924	Symbol	& ctor_result		110572						
ANR	110925	Symbol	IS_CONST		110572						
ANR	110926	Symbol	NULL		110572						
ANR	110927	Symbol	class_node . u . op . var		110572						
ANR	110928	Symbol	opline -> op1_type		110572						
ANR	110929	Symbol	* ast -> child		110572						
ANR	110930	Symbol	ast -> child		110572						
ANR	110931	Symbol	args_ast		110572						
ANR	110932	Symbol	zend_emit_op		110572						
ANR	110933	Symbol	ctor_result		110572						
ANR	110934	Symbol	zend_is_const_default_class_ref		110572						
ANR	110935	Symbol	opline -> op1		110572						
ANR	110936	Symbol	zend_add_class_name_literal		110572						
ANR	110937	Symbol	opline -> op2		110572						
ANR	110938	Symbol	class_node		110572						
ANR	110939	Symbol	class_ast		110572						
ANR	110940	Symbol	dcl_opnum		110572						
ANR	110941	Symbol	result		110572						
ANR	110942	Symbol	class_node . op_type		110572						
ANR	110943	Symbol	& class_node . u . constant		110572						
ANR	110944	Symbol	* ast		110572						
ANR	110945	Symbol	opnum		110572						
ANR	110946	Symbol	opline -> op1 . constant		110572						
ANR	110947	Symbol	* * ast		110572						
ANR	110948	Symbol	ZEND_AST_CLASS		110572						
ANR	110949	Symbol	ZEND_NEW		110572						
ANR	110950	Symbol	opline -> result_type		110572						
ANR	110951	Symbol	& class_node . u		110572						
ANR	110952	Symbol	* class_ast		110572						
ANR	110953	Symbol	opline -> op2 . opline_num		110572						
ANR	110954	Symbol	CG		110572						
ANR	110955	Symbol	zend_resolve_class_name_ast		110572						
ANR	110956	Symbol	active_op_array		110572						
ANR	110957	Symbol	opline -> op1 . opline_num		110572						
ANR	110958	Symbol	class_ast -> kind		110572						
ANR	110959	Symbol	ZEND_FETCH_CLASS		110572						
ANR	110960	Symbol	* opline		110572						
ANR	110961	Symbol	opline -> opcode		110572						
ANR	110962	Symbol	class_node . u . op		110572						
ANR	110963	Symbol	get_next_op_number		110572						
ANR	110964	Symbol	opline -> result . var		110572						
ANR	110965	Function	zend_compile_clone	3394:0:98587:98800							
ANR	110966	FunctionDef	"zend_compile_clone (znode * result , zend_ast * ast)"		110965	0					
ANR	110967	CompoundStatement		3395:0:98651:98800	110965	0					
ANR	110968	IdentifierDeclStatement	zend_ast * obj_ast = ast -> child [ 0 ] ;	3396:1:98654:98687	110965	0	True				
ANR	110969	IdentifierDecl	* obj_ast = ast -> child [ 0 ]		110965	0					
ANR	110970	IdentifierDeclType	zend_ast *		110965	0					
ANR	110971	Identifier	obj_ast		110965	1					
ANR	110972	AssignmentExpression	* obj_ast = ast -> child [ 0 ]		110965	2		=			
ANR	110973	Identifier	obj_ast		110965	0					
ANR	110974	ArrayIndexing	ast -> child [ 0 ]		110965	1					
ANR	110975	PtrMemberAccess	ast -> child		110965	0					
ANR	110976	Identifier	ast		110965	0					
ANR	110977	Identifier	child		110965	1					
ANR	110978	PrimaryExpression	0		110965	1					
ANR	110979	IdentifierDeclStatement	znode obj_node ;	3398:1:98691:98705	110965	1	True				
ANR	110980	IdentifierDecl	obj_node		110965	0					
ANR	110981	IdentifierDeclType	znode		110965	0					
ANR	110982	Identifier	obj_node		110965	1					
ANR	110983	ExpressionStatement	"zend_compile_expr ( & obj_node , obj_ast )"	3399:1:98708:98745	110965	2	True				
ANR	110984	CallExpression	"zend_compile_expr ( & obj_node , obj_ast )"		110965	0					
ANR	110985	Callee	zend_compile_expr		110965	0					
ANR	110986	Identifier	zend_compile_expr		110965	0					
ANR	110987	ArgumentList	& obj_node		110965	1					
ANR	110988	Argument	& obj_node		110965	0					
ANR	110989	UnaryOperationExpression	& obj_node		110965	0					
ANR	110990	UnaryOperator	&		110965	0					
ANR	110991	Identifier	obj_node		110965	1					
ANR	110992	Argument	obj_ast		110965	1					
ANR	110993	Identifier	obj_ast		110965	0					
ANR	110994	ExpressionStatement	"zend_emit_op ( result , ZEND_CLONE , & obj_node , NULL )"	3401:1:98749:98798	110965	3	True				
ANR	110995	CallExpression	"zend_emit_op ( result , ZEND_CLONE , & obj_node , NULL )"		110965	0					
ANR	110996	Callee	zend_emit_op		110965	0					
ANR	110997	Identifier	zend_emit_op		110965	0					
ANR	110998	ArgumentList	result		110965	1					
ANR	110999	Argument	result		110965	0					
ANR	111000	Identifier	result		110965	0					
ANR	111001	Argument	ZEND_CLONE		110965	1					
ANR	111002	Identifier	ZEND_CLONE		110965	0					
ANR	111003	Argument	& obj_node		110965	2					
ANR	111004	UnaryOperationExpression	& obj_node		110965	0					
ANR	111005	UnaryOperator	&		110965	0					
ANR	111006	Identifier	obj_node		110965	1					
ANR	111007	Argument	NULL		110965	3					
ANR	111008	Identifier	NULL		110965	0					
ANR	111009	ReturnType	void		110965	1					
ANR	111010	Identifier	zend_compile_clone		110965	2					
ANR	111011	ParameterList	"znode * result , zend_ast * ast"		110965	3					
ANR	111012	Parameter	znode * result	3394:24:98611:98623	110965	0	True				
ANR	111013	ParameterType	znode *		110965	0					
ANR	111014	Identifier	result		110965	1					
ANR	111015	Parameter	zend_ast * ast	3394:39:98626:98638	110965	1	True				
ANR	111016	ParameterType	zend_ast *		110965	0					
ANR	111017	Identifier	ast		110965	1					
ANR	111018	CFGEntryNode	ENTRY		110965		True				
ANR	111019	CFGExitNode	EXIT		110965		True				
ANR	111020	Symbol	result		110965						
ANR	111021	Symbol	ast		110965						
ANR	111022	Symbol	* ast		110965						
ANR	111023	Symbol	NULL		110965						
ANR	111024	Symbol	* * ast		110965						
ANR	111025	Symbol	ZEND_CLONE		110965						
ANR	111026	Symbol	* ast -> child		110965						
ANR	111027	Symbol	obj_ast		110965						
ANR	111028	Symbol	ast -> child		110965						
ANR	111029	Symbol	& obj_node		110965						
ANR	111030	Symbol	obj_node		110965						
ANR	111031	Function	zend_compile_global_var	3405:0:98813:99491							
ANR	111032	FunctionDef	zend_compile_global_var (zend_ast * ast)		111031	0					
ANR	111033	CompoundStatement		3406:0:98867:99491	111031	0					
ANR	111034	IdentifierDeclStatement	zend_ast * var_ast = ast -> child [ 0 ] ;	3407:1:98870:98903	111031	0	True				
ANR	111035	IdentifierDecl	* var_ast = ast -> child [ 0 ]		111031	0					
ANR	111036	IdentifierDeclType	zend_ast *		111031	0					
ANR	111037	Identifier	var_ast		111031	1					
ANR	111038	AssignmentExpression	* var_ast = ast -> child [ 0 ]		111031	2		=			
ANR	111039	Identifier	var_ast		111031	0					
ANR	111040	ArrayIndexing	ast -> child [ 0 ]		111031	1					
ANR	111041	PtrMemberAccess	ast -> child		111031	0					
ANR	111042	Identifier	ast		111031	0					
ANR	111043	Identifier	child		111031	1					
ANR	111044	PrimaryExpression	0		111031	1					
ANR	111045	IdentifierDeclStatement	zend_ast * name_ast = var_ast -> child [ 0 ] ;	3408:1:98906:98944	111031	1	True				
ANR	111046	IdentifierDecl	* name_ast = var_ast -> child [ 0 ]		111031	0					
ANR	111047	IdentifierDeclType	zend_ast *		111031	0					
ANR	111048	Identifier	name_ast		111031	1					
ANR	111049	AssignmentExpression	* name_ast = var_ast -> child [ 0 ]		111031	2		=			
ANR	111050	Identifier	name_ast		111031	0					
ANR	111051	ArrayIndexing	var_ast -> child [ 0 ]		111031	1					
ANR	111052	PtrMemberAccess	var_ast -> child		111031	0					
ANR	111053	Identifier	var_ast		111031	0					
ANR	111054	Identifier	child		111031	1					
ANR	111055	PrimaryExpression	0		111031	1					
ANR	111056	IdentifierDeclStatement	"znode name_node , result ;"	3410:1:98948:98971	111031	2	True				
ANR	111057	IdentifierDecl	name_node		111031	0					
ANR	111058	IdentifierDeclType	znode		111031	0					
ANR	111059	Identifier	name_node		111031	1					
ANR	111060	IdentifierDecl	result		111031	1					
ANR	111061	IdentifierDeclType	znode		111031	0					
ANR	111062	Identifier	result		111031	1					
ANR	111063	ExpressionStatement	"zend_compile_expr ( & name_node , name_ast )"	3412:1:98975:99014	111031	3	True				
ANR	111064	CallExpression	"zend_compile_expr ( & name_node , name_ast )"		111031	0					
ANR	111065	Callee	zend_compile_expr		111031	0					
ANR	111066	Identifier	zend_compile_expr		111031	0					
ANR	111067	ArgumentList	& name_node		111031	1					
ANR	111068	Argument	& name_node		111031	0					
ANR	111069	UnaryOperationExpression	& name_node		111031	0					
ANR	111070	UnaryOperator	&		111031	0					
ANR	111071	Identifier	name_node		111031	1					
ANR	111072	Argument	name_ast		111031	1					
ANR	111073	Identifier	name_ast		111031	0					
ANR	111074	IfStatement	if ( name_node . op_type == IS_CONST )		111031	4					
ANR	111075	Condition	name_node . op_type == IS_CONST	3413:5:99021:99049	111031	0	True				
ANR	111076	EqualityExpression	name_node . op_type == IS_CONST		111031	0		==			
ANR	111077	MemberAccess	name_node . op_type		111031	0					
ANR	111078	Identifier	name_node		111031	0					
ANR	111079	Identifier	op_type		111031	1					
ANR	111080	Identifier	IS_CONST		111031	1					
ANR	111081	CompoundStatement		8:36:184:184	111031	1					
ANR	111082	ExpressionStatement	convert_to_string ( & name_node . u . constant )	3414:2:99056:99096	111031	0	True				
ANR	111083	CallExpression	convert_to_string ( & name_node . u . constant )		111031	0					
ANR	111084	Callee	convert_to_string		111031	0					
ANR	111085	Identifier	convert_to_string		111031	0					
ANR	111086	ArgumentList	& name_node . u . constant		111031	1					
ANR	111087	Argument	& name_node . u . constant		111031	0					
ANR	111088	UnaryOperationExpression	& name_node . u . constant		111031	0					
ANR	111089	UnaryOperator	&		111031	0					
ANR	111090	MemberAccess	name_node . u . constant		111031	1					
ANR	111091	MemberAccess	name_node . u		111031	0					
ANR	111092	Identifier	name_node		111031	0					
ANR	111093	Identifier	u		111031	1					
ANR	111094	Identifier	constant		111031	1					
ANR	111095	IfStatement	"if ( zend_try_compile_cv ( & result , var_ast ) == SUCCESS )"		111031	5					
ANR	111096	Condition	"zend_try_compile_cv ( & result , var_ast ) == SUCCESS"	3417:5:99107:99154	111031	0	True				
ANR	111097	EqualityExpression	"zend_try_compile_cv ( & result , var_ast ) == SUCCESS"		111031	0		==			
ANR	111098	CallExpression	"zend_try_compile_cv ( & result , var_ast )"		111031	0					
ANR	111099	Callee	zend_try_compile_cv		111031	0					
ANR	111100	Identifier	zend_try_compile_cv		111031	0					
ANR	111101	ArgumentList	& result		111031	1					
ANR	111102	Argument	& result		111031	0					
ANR	111103	UnaryOperationExpression	& result		111031	0					
ANR	111104	UnaryOperator	&		111031	0					
ANR	111105	Identifier	result		111031	1					
ANR	111106	Argument	var_ast		111031	1					
ANR	111107	Identifier	var_ast		111031	0					
ANR	111108	Identifier	SUCCESS		111031	1					
ANR	111109	CompoundStatement		13:2:293:368	111031	1					
ANR	111110	IdentifierDeclStatement	"zend_op * opline = zend_emit_op ( NULL , ZEND_BIND_GLOBAL , & result , & name_node ) ;"	3418:2:99161:99236	111031	0	True				
ANR	111111	IdentifierDecl	"* opline = zend_emit_op ( NULL , ZEND_BIND_GLOBAL , & result , & name_node )"		111031	0					
ANR	111112	IdentifierDeclType	zend_op *		111031	0					
ANR	111113	Identifier	opline		111031	1					
ANR	111114	AssignmentExpression	"* opline = zend_emit_op ( NULL , ZEND_BIND_GLOBAL , & result , & name_node )"		111031	2		=			
ANR	111115	Identifier	opline		111031	0					
ANR	111116	CallExpression	"zend_emit_op ( NULL , ZEND_BIND_GLOBAL , & result , & name_node )"		111031	1					
ANR	111117	Callee	zend_emit_op		111031	0					
ANR	111118	Identifier	zend_emit_op		111031	0					
ANR	111119	ArgumentList	NULL		111031	1					
ANR	111120	Argument	NULL		111031	0					
ANR	111121	Identifier	NULL		111031	0					
ANR	111122	Argument	ZEND_BIND_GLOBAL		111031	1					
ANR	111123	Identifier	ZEND_BIND_GLOBAL		111031	0					
ANR	111124	Argument	& result		111031	2					
ANR	111125	UnaryOperationExpression	& result		111031	0					
ANR	111126	UnaryOperator	&		111031	0					
ANR	111127	Identifier	result		111031	1					
ANR	111128	Argument	& name_node		111031	3					
ANR	111129	UnaryOperationExpression	& name_node		111031	0					
ANR	111130	UnaryOperator	&		111031	0					
ANR	111131	Identifier	name_node		111031	1					
ANR	111132	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	3419:2:99240:99283	111031	1	True				
ANR	111133	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		111031	0					
ANR	111134	Callee	zend_alloc_cache_slot		111031	0					
ANR	111135	Identifier	zend_alloc_cache_slot		111031	0					
ANR	111136	ArgumentList	opline -> op2 . constant		111031	1					
ANR	111137	Argument	opline -> op2 . constant		111031	0					
ANR	111138	MemberAccess	opline -> op2 . constant		111031	0					
ANR	111139	PtrMemberAccess	opline -> op2		111031	0					
ANR	111140	Identifier	opline		111031	0					
ANR	111141	Identifier	op2		111031	1					
ANR	111142	Identifier	constant		111031	1					
ANR	111143	ElseStatement	else		111031	0					
ANR	111144	CompoundStatement		15:8:425:425	111031	0					
ANR	111145	ExpressionStatement	"zend_emit_op ( & result , ZEND_FETCH_W , & name_node , NULL )"	3421:2:99297:99350	111031	0	True				
ANR	111146	CallExpression	"zend_emit_op ( & result , ZEND_FETCH_W , & name_node , NULL )"		111031	0					
ANR	111147	Callee	zend_emit_op		111031	0					
ANR	111148	Identifier	zend_emit_op		111031	0					
ANR	111149	ArgumentList	& result		111031	1					
ANR	111150	Argument	& result		111031	0					
ANR	111151	UnaryOperationExpression	& result		111031	0					
ANR	111152	UnaryOperator	&		111031	0					
ANR	111153	Identifier	result		111031	1					
ANR	111154	Argument	ZEND_FETCH_W		111031	1					
ANR	111155	Identifier	ZEND_FETCH_W		111031	0					
ANR	111156	Argument	& name_node		111031	2					
ANR	111157	UnaryOperationExpression	& name_node		111031	0					
ANR	111158	UnaryOperator	&		111031	0					
ANR	111159	Identifier	name_node		111031	1					
ANR	111160	Argument	NULL		111031	3					
ANR	111161	Identifier	NULL		111031	0					
ANR	111162	ExpressionStatement	"zend_emit_assign_ref_znode ( var_ast , & result )"	3426:2:99442:99486	111031	1	True				
ANR	111163	CallExpression	"zend_emit_assign_ref_znode ( var_ast , & result )"		111031	0					
ANR	111164	Callee	zend_emit_assign_ref_znode		111031	0					
ANR	111165	Identifier	zend_emit_assign_ref_znode		111031	0					
ANR	111166	ArgumentList	var_ast		111031	1					
ANR	111167	Argument	var_ast		111031	0					
ANR	111168	Identifier	var_ast		111031	0					
ANR	111169	Argument	& result		111031	1					
ANR	111170	UnaryOperationExpression	& result		111031	0					
ANR	111171	UnaryOperator	&		111031	0					
ANR	111172	Identifier	result		111031	1					
ANR	111173	ReturnType	void		111031	1					
ANR	111174	Identifier	zend_compile_global_var		111031	2					
ANR	111175	ParameterList	zend_ast * ast		111031	3					
ANR	111176	Parameter	zend_ast * ast	3405:29:98842:98854	111031	0	True				
ANR	111177	ParameterType	zend_ast *		111031	0					
ANR	111178	Identifier	ast		111031	1					
ANR	111179	CFGEntryNode	ENTRY		111031		True				
ANR	111180	CFGExitNode	EXIT		111031		True				
ANR	111181	Symbol	opline -> op2		111031						
ANR	111182	Symbol	ast		111031						
ANR	111183	Symbol	* var_ast		111031						
ANR	111184	Symbol	result		111031						
ANR	111185	Symbol	* ast		111031						
ANR	111186	Symbol	opline		111031						
ANR	111187	Symbol	* * var_ast		111031						
ANR	111188	Symbol	& name_node		111031						
ANR	111189	Symbol	* * ast		111031						
ANR	111190	Symbol	& result		111031						
ANR	111191	Symbol	var_ast -> child		111031						
ANR	111192	Symbol	& name_node . u		111031						
ANR	111193	Symbol	IS_CONST		111031						
ANR	111194	Symbol	SUCCESS		111031						
ANR	111195	Symbol	NULL		111031						
ANR	111196	Symbol	name_node . u		111031						
ANR	111197	Symbol	zend_try_compile_cv		111031						
ANR	111198	Symbol	ZEND_BIND_GLOBAL		111031						
ANR	111199	Symbol	var_ast		111031						
ANR	111200	Symbol	ZEND_FETCH_W		111031						
ANR	111201	Symbol	name_node . op_type		111031						
ANR	111202	Symbol	* opline		111031						
ANR	111203	Symbol	name_ast		111031						
ANR	111204	Symbol	& name_node . u . constant		111031						
ANR	111205	Symbol	opline -> op2 . constant		111031						
ANR	111206	Symbol	* ast -> child		111031						
ANR	111207	Symbol	ast -> child		111031						
ANR	111208	Symbol	* var_ast -> child		111031						
ANR	111209	Symbol	name_node		111031						
ANR	111210	Symbol	zend_emit_op		111031						
ANR	111211	Function	zend_compile_static_var_common	3431:0:99504:100783							
ANR	111212	FunctionDef	"zend_compile_static_var_common (zend_ast * var_ast , zval * value , zend_bool by_ref)"		111211	0					
ANR	111213	CompoundStatement		3432:0:99607:100783	111211	0					
ANR	111214	IdentifierDeclStatement	"znode var_node , result ;"	3433:1:99610:99632	111211	0	True				
ANR	111215	IdentifierDecl	var_node		111211	0					
ANR	111216	IdentifierDeclType	znode		111211	0					
ANR	111217	Identifier	var_node		111211	1					
ANR	111218	IdentifierDecl	result		111211	1					
ANR	111219	IdentifierDeclType	znode		111211	0					
ANR	111220	Identifier	result		111211	1					
ANR	111221	IdentifierDeclStatement	zend_op * opline ;	3434:1:99635:99650	111211	1	True				
ANR	111222	IdentifierDecl	* opline		111211	0					
ANR	111223	IdentifierDeclType	zend_op *		111211	0					
ANR	111224	Identifier	opline		111211	1					
ANR	111225	ExpressionStatement	"zend_compile_expr ( & var_node , var_ast )"	3436:1:99654:99691	111211	2	True				
ANR	111226	CallExpression	"zend_compile_expr ( & var_node , var_ast )"		111211	0					
ANR	111227	Callee	zend_compile_expr		111211	0					
ANR	111228	Identifier	zend_compile_expr		111211	0					
ANR	111229	ArgumentList	& var_node		111211	1					
ANR	111230	Argument	& var_node		111211	0					
ANR	111231	UnaryOperationExpression	& var_node		111211	0					
ANR	111232	UnaryOperator	&		111211	0					
ANR	111233	Identifier	var_node		111211	1					
ANR	111234	Argument	var_ast		111211	1					
ANR	111235	Identifier	var_ast		111211	0					
ANR	111236	IfStatement	if ( ! CG ( active_op_array ) -> static_variables )		111211	3					
ANR	111237	Condition	! CG ( active_op_array ) -> static_variables	3438:5:99699:99736	111211	0	True				
ANR	111238	UnaryOperationExpression	! CG ( active_op_array ) -> static_variables		111211	0					
ANR	111239	UnaryOperator	!		111211	0					
ANR	111240	PtrMemberAccess	CG ( active_op_array ) -> static_variables		111211	1					
ANR	111241	CallExpression	CG ( active_op_array )		111211	0					
ANR	111242	Callee	CG		111211	0					
ANR	111243	Identifier	CG		111211	0					
ANR	111244	ArgumentList	active_op_array		111211	1					
ANR	111245	Argument	active_op_array		111211	0					
ANR	111246	Identifier	active_op_array		111211	0					
ANR	111247	Identifier	static_variables		111211	1					
ANR	111248	CompoundStatement		7:45:131:131	111211	1					
ANR	111249	IfStatement	if ( CG ( active_op_array ) -> scope )		111211	0					
ANR	111250	Condition	CG ( active_op_array ) -> scope	3439:6:99747:99772	111211	0	True				
ANR	111251	PtrMemberAccess	CG ( active_op_array ) -> scope		111211	0					
ANR	111252	CallExpression	CG ( active_op_array )		111211	0					
ANR	111253	Callee	CG		111211	0					
ANR	111254	Identifier	CG		111211	0					
ANR	111255	ArgumentList	active_op_array		111211	1					
ANR	111256	Argument	active_op_array		111211	0					
ANR	111257	Identifier	active_op_array		111211	0					
ANR	111258	Identifier	scope		111211	1					
ANR	111259	CompoundStatement		8:34:167:167	111211	1					
ANR	111260	ExpressionStatement	CG ( active_op_array ) -> scope -> ce_flags |= ZEND_HAS_STATIC_IN_METHODS	3440:3:99780:99846	111211	0	True				
ANR	111261	AssignmentExpression	CG ( active_op_array ) -> scope -> ce_flags |= ZEND_HAS_STATIC_IN_METHODS		111211	0		|=			
ANR	111262	PtrMemberAccess	CG ( active_op_array ) -> scope -> ce_flags		111211	0					
ANR	111263	PtrMemberAccess	CG ( active_op_array ) -> scope		111211	0					
ANR	111264	CallExpression	CG ( active_op_array )		111211	0					
ANR	111265	Callee	CG		111211	0					
ANR	111266	Identifier	CG		111211	0					
ANR	111267	ArgumentList	active_op_array		111211	1					
ANR	111268	Argument	active_op_array		111211	0					
ANR	111269	Identifier	active_op_array		111211	0					
ANR	111270	Identifier	scope		111211	1					
ANR	111271	Identifier	ce_flags		111211	1					
ANR	111272	Identifier	ZEND_HAS_STATIC_IN_METHODS		111211	1					
ANR	111273	ExpressionStatement	ALLOC_HASHTABLE ( CG ( active_op_array ) -> static_variables )	3442:2:99854:99908	111211	1	True				
ANR	111274	CallExpression	ALLOC_HASHTABLE ( CG ( active_op_array ) -> static_variables )		111211	0					
ANR	111275	Callee	ALLOC_HASHTABLE		111211	0					
ANR	111276	Identifier	ALLOC_HASHTABLE		111211	0					
ANR	111277	ArgumentList	CG ( active_op_array ) -> static_variables		111211	1					
ANR	111278	Argument	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111279	PtrMemberAccess	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111280	CallExpression	CG ( active_op_array )		111211	0					
ANR	111281	Callee	CG		111211	0					
ANR	111282	Identifier	CG		111211	0					
ANR	111283	ArgumentList	active_op_array		111211	1					
ANR	111284	Argument	active_op_array		111211	0					
ANR	111285	Identifier	active_op_array		111211	0					
ANR	111286	Identifier	static_variables		111211	1					
ANR	111287	ExpressionStatement	"zend_hash_init ( CG ( active_op_array ) -> static_variables , 8 , NULL , ZVAL_PTR_DTOR , 0 )"	3443:2:99912:99992	111211	2	True				
ANR	111288	CallExpression	"zend_hash_init ( CG ( active_op_array ) -> static_variables , 8 , NULL , ZVAL_PTR_DTOR , 0 )"		111211	0					
ANR	111289	Callee	zend_hash_init		111211	0					
ANR	111290	Identifier	zend_hash_init		111211	0					
ANR	111291	ArgumentList	CG ( active_op_array ) -> static_variables		111211	1					
ANR	111292	Argument	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111293	PtrMemberAccess	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111294	CallExpression	CG ( active_op_array )		111211	0					
ANR	111295	Callee	CG		111211	0					
ANR	111296	Identifier	CG		111211	0					
ANR	111297	ArgumentList	active_op_array		111211	1					
ANR	111298	Argument	active_op_array		111211	0					
ANR	111299	Identifier	active_op_array		111211	0					
ANR	111300	Identifier	static_variables		111211	1					
ANR	111301	Argument	8		111211	1					
ANR	111302	PrimaryExpression	8		111211	0					
ANR	111303	Argument	NULL		111211	2					
ANR	111304	Identifier	NULL		111211	0					
ANR	111305	Argument	ZVAL_PTR_DTOR		111211	3					
ANR	111306	Identifier	ZVAL_PTR_DTOR		111211	0					
ANR	111307	Argument	0		111211	4					
ANR	111308	PrimaryExpression	0		111211	0					
ANR	111309	IfStatement	if ( GC_REFCOUNT ( CG ( active_op_array ) -> static_variables ) > 1 )		111211	4					
ANR	111310	Condition	GC_REFCOUNT ( CG ( active_op_array ) -> static_variables ) > 1	3446:5:100003:100056	111211	0	True				
ANR	111311	RelationalExpression	GC_REFCOUNT ( CG ( active_op_array ) -> static_variables ) > 1		111211	0		>			
ANR	111312	CallExpression	GC_REFCOUNT ( CG ( active_op_array ) -> static_variables )		111211	0					
ANR	111313	Callee	GC_REFCOUNT		111211	0					
ANR	111314	Identifier	GC_REFCOUNT		111211	0					
ANR	111315	ArgumentList	CG ( active_op_array ) -> static_variables		111211	1					
ANR	111316	Argument	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111317	PtrMemberAccess	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111318	CallExpression	CG ( active_op_array )		111211	0					
ANR	111319	Callee	CG		111211	0					
ANR	111320	Identifier	CG		111211	0					
ANR	111321	ArgumentList	active_op_array		111211	1					
ANR	111322	Argument	active_op_array		111211	0					
ANR	111323	Identifier	active_op_array		111211	0					
ANR	111324	Identifier	static_variables		111211	1					
ANR	111325	PrimaryExpression	1		111211	1					
ANR	111326	CompoundStatement		15:61:451:451	111211	1					
ANR	111327	IfStatement	if ( ! ( GC_FLAGS ( CG ( active_op_array ) -> static_variables ) & IS_ARRAY_IMMUTABLE ) )		111211	0					
ANR	111328	Condition	! ( GC_FLAGS ( CG ( active_op_array ) -> static_variables ) & IS_ARRAY_IMMUTABLE )	3447:6:100067:100137	111211	0	True				
ANR	111329	UnaryOperationExpression	! ( GC_FLAGS ( CG ( active_op_array ) -> static_variables ) & IS_ARRAY_IMMUTABLE )		111211	0					
ANR	111330	UnaryOperator	!		111211	0					
ANR	111331	BitAndExpression	GC_FLAGS ( CG ( active_op_array ) -> static_variables ) & IS_ARRAY_IMMUTABLE		111211	1		&			
ANR	111332	CallExpression	GC_FLAGS ( CG ( active_op_array ) -> static_variables )		111211	0					
ANR	111333	Callee	GC_FLAGS		111211	0					
ANR	111334	Identifier	GC_FLAGS		111211	0					
ANR	111335	ArgumentList	CG ( active_op_array ) -> static_variables		111211	1					
ANR	111336	Argument	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111337	PtrMemberAccess	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111338	CallExpression	CG ( active_op_array )		111211	0					
ANR	111339	Callee	CG		111211	0					
ANR	111340	Identifier	CG		111211	0					
ANR	111341	ArgumentList	active_op_array		111211	1					
ANR	111342	Argument	active_op_array		111211	0					
ANR	111343	Identifier	active_op_array		111211	0					
ANR	111344	Identifier	static_variables		111211	1					
ANR	111345	Identifier	IS_ARRAY_IMMUTABLE		111211	1					
ANR	111346	CompoundStatement		16:79:532:532	111211	1					
ANR	111347	ExpressionStatement	GC_REFCOUNT ( CG ( active_op_array ) -> static_variables ) --	3448:3:100145:100197	111211	0	True				
ANR	111348	PostIncDecOperationExpression	GC_REFCOUNT ( CG ( active_op_array ) -> static_variables ) --		111211	0					
ANR	111349	CallExpression	GC_REFCOUNT ( CG ( active_op_array ) -> static_variables )		111211	0					
ANR	111350	Callee	GC_REFCOUNT		111211	0					
ANR	111351	Identifier	GC_REFCOUNT		111211	0					
ANR	111352	ArgumentList	CG ( active_op_array ) -> static_variables		111211	1					
ANR	111353	Argument	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111354	PtrMemberAccess	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111355	CallExpression	CG ( active_op_array )		111211	0					
ANR	111356	Callee	CG		111211	0					
ANR	111357	Identifier	CG		111211	0					
ANR	111358	ArgumentList	active_op_array		111211	1					
ANR	111359	Argument	active_op_array		111211	0					
ANR	111360	Identifier	active_op_array		111211	0					
ANR	111361	Identifier	static_variables		111211	1					
ANR	111362	IncDec	--		111211	1					
ANR	111363	ExpressionStatement	CG ( active_op_array ) -> static_variables = zend_array_dup ( CG ( active_op_array ) -> static_variables )	3450:2:100205:100298	111211	1	True				
ANR	111364	AssignmentExpression	CG ( active_op_array ) -> static_variables = zend_array_dup ( CG ( active_op_array ) -> static_variables )		111211	0		=			
ANR	111365	PtrMemberAccess	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111366	CallExpression	CG ( active_op_array )		111211	0					
ANR	111367	Callee	CG		111211	0					
ANR	111368	Identifier	CG		111211	0					
ANR	111369	ArgumentList	active_op_array		111211	1					
ANR	111370	Argument	active_op_array		111211	0					
ANR	111371	Identifier	active_op_array		111211	0					
ANR	111372	Identifier	static_variables		111211	1					
ANR	111373	CallExpression	zend_array_dup ( CG ( active_op_array ) -> static_variables )		111211	1					
ANR	111374	Callee	zend_array_dup		111211	0					
ANR	111375	Identifier	zend_array_dup		111211	0					
ANR	111376	ArgumentList	CG ( active_op_array ) -> static_variables		111211	1					
ANR	111377	Argument	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111378	PtrMemberAccess	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111379	CallExpression	CG ( active_op_array )		111211	0					
ANR	111380	Callee	CG		111211	0					
ANR	111381	Identifier	CG		111211	0					
ANR	111382	ArgumentList	active_op_array		111211	1					
ANR	111383	Argument	active_op_array		111211	0					
ANR	111384	Identifier	active_op_array		111211	0					
ANR	111385	Identifier	static_variables		111211	1					
ANR	111386	ExpressionStatement	"zend_hash_update ( CG ( active_op_array ) -> static_variables , Z_STR ( var_node . u . constant ) , value )"	3452:1:100304:100394	111211	5	True				
ANR	111387	CallExpression	"zend_hash_update ( CG ( active_op_array ) -> static_variables , Z_STR ( var_node . u . constant ) , value )"		111211	0					
ANR	111388	Callee	zend_hash_update		111211	0					
ANR	111389	Identifier	zend_hash_update		111211	0					
ANR	111390	ArgumentList	CG ( active_op_array ) -> static_variables		111211	1					
ANR	111391	Argument	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111392	PtrMemberAccess	CG ( active_op_array ) -> static_variables		111211	0					
ANR	111393	CallExpression	CG ( active_op_array )		111211	0					
ANR	111394	Callee	CG		111211	0					
ANR	111395	Identifier	CG		111211	0					
ANR	111396	ArgumentList	active_op_array		111211	1					
ANR	111397	Argument	active_op_array		111211	0					
ANR	111398	Identifier	active_op_array		111211	0					
ANR	111399	Identifier	static_variables		111211	1					
ANR	111400	Argument	Z_STR ( var_node . u . constant )		111211	1					
ANR	111401	CallExpression	Z_STR ( var_node . u . constant )		111211	0					
ANR	111402	Callee	Z_STR		111211	0					
ANR	111403	Identifier	Z_STR		111211	0					
ANR	111404	ArgumentList	var_node . u . constant		111211	1					
ANR	111405	Argument	var_node . u . constant		111211	0					
ANR	111406	MemberAccess	var_node . u . constant		111211	0					
ANR	111407	MemberAccess	var_node . u		111211	0					
ANR	111408	Identifier	var_node		111211	0					
ANR	111409	Identifier	u		111211	1					
ANR	111410	Identifier	constant		111211	1					
ANR	111411	Argument	value		111211	2					
ANR	111412	Identifier	value		111211	0					
ANR	111413	ExpressionStatement	"opline = zend_emit_op ( & result , by_ref ? ZEND_FETCH_W : ZEND_FETCH_R , & var_node , NULL )"	3454:1:100398:100483	111211	6	True				
ANR	111414	AssignmentExpression	"opline = zend_emit_op ( & result , by_ref ? ZEND_FETCH_W : ZEND_FETCH_R , & var_node , NULL )"		111211	0		=			
ANR	111415	Identifier	opline		111211	0					
ANR	111416	CallExpression	"zend_emit_op ( & result , by_ref ? ZEND_FETCH_W : ZEND_FETCH_R , & var_node , NULL )"		111211	1					
ANR	111417	Callee	zend_emit_op		111211	0					
ANR	111418	Identifier	zend_emit_op		111211	0					
ANR	111419	ArgumentList	& result		111211	1					
ANR	111420	Argument	& result		111211	0					
ANR	111421	UnaryOperationExpression	& result		111211	0					
ANR	111422	UnaryOperator	&		111211	0					
ANR	111423	Identifier	result		111211	1					
ANR	111424	Argument	by_ref ? ZEND_FETCH_W : ZEND_FETCH_R		111211	1					
ANR	111425	ConditionalExpression	by_ref ? ZEND_FETCH_W : ZEND_FETCH_R		111211	0					
ANR	111426	Condition	by_ref		111211	0					
ANR	111427	Identifier	by_ref		111211	0					
ANR	111428	Identifier	ZEND_FETCH_W		111211	1					
ANR	111429	Identifier	ZEND_FETCH_R		111211	2					
ANR	111430	Argument	& var_node		111211	2					
ANR	111431	UnaryOperationExpression	& var_node		111211	0					
ANR	111432	UnaryOperator	&		111211	0					
ANR	111433	Identifier	var_node		111211	1					
ANR	111434	Argument	NULL		111211	3					
ANR	111435	Identifier	NULL		111211	0					
ANR	111436	ExpressionStatement	opline -> extended_value = ZEND_FETCH_STATIC	3455:1:100486:100528	111211	7	True				
ANR	111437	AssignmentExpression	opline -> extended_value = ZEND_FETCH_STATIC		111211	0		=			
ANR	111438	PtrMemberAccess	opline -> extended_value		111211	0					
ANR	111439	Identifier	opline		111211	0					
ANR	111440	Identifier	extended_value		111211	1					
ANR	111441	Identifier	ZEND_FETCH_STATIC		111211	1					
ANR	111442	IfStatement	if ( by_ref )		111211	8					
ANR	111443	Condition	by_ref	3457:5:100536:100541	111211	0	True				
ANR	111444	Identifier	by_ref		111211	0					
ANR	111445	CompoundStatement		27:2:940:1000	111211	1					
ANR	111446	IdentifierDeclStatement	"zend_ast * fetch_ast = zend_ast_create ( ZEND_AST_VAR , var_ast ) ;"	3458:2:100548:100608	111211	0	True				
ANR	111447	IdentifierDecl	"* fetch_ast = zend_ast_create ( ZEND_AST_VAR , var_ast )"		111211	0					
ANR	111448	IdentifierDeclType	zend_ast *		111211	0					
ANR	111449	Identifier	fetch_ast		111211	1					
ANR	111450	AssignmentExpression	"* fetch_ast = zend_ast_create ( ZEND_AST_VAR , var_ast )"		111211	2		=			
ANR	111451	Identifier	fetch_ast		111211	0					
ANR	111452	CallExpression	"zend_ast_create ( ZEND_AST_VAR , var_ast )"		111211	1					
ANR	111453	Callee	zend_ast_create		111211	0					
ANR	111454	Identifier	zend_ast_create		111211	0					
ANR	111455	ArgumentList	ZEND_AST_VAR		111211	1					
ANR	111456	Argument	ZEND_AST_VAR		111211	0					
ANR	111457	Identifier	ZEND_AST_VAR		111211	0					
ANR	111458	Argument	var_ast		111211	1					
ANR	111459	Identifier	var_ast		111211	0					
ANR	111460	ExpressionStatement	"zend_emit_assign_ref_znode ( fetch_ast , & result )"	3459:2:100612:100658	111211	1	True				
ANR	111461	CallExpression	"zend_emit_assign_ref_znode ( fetch_ast , & result )"		111211	0					
ANR	111462	Callee	zend_emit_assign_ref_znode		111211	0					
ANR	111463	Identifier	zend_emit_assign_ref_znode		111211	0					
ANR	111464	ArgumentList	fetch_ast		111211	1					
ANR	111465	Argument	fetch_ast		111211	0					
ANR	111466	Identifier	fetch_ast		111211	0					
ANR	111467	Argument	& result		111211	1					
ANR	111468	UnaryOperationExpression	& result		111211	0					
ANR	111469	UnaryOperator	&		111211	0					
ANR	111470	Identifier	result		111211	1					
ANR	111471	ElseStatement	else		111211	0					
ANR	111472	CompoundStatement		30:2:1064:1124	111211	0					
ANR	111473	IdentifierDeclStatement	"zend_ast * fetch_ast = zend_ast_create ( ZEND_AST_VAR , var_ast ) ;"	3461:2:100672:100732	111211	0	True				
ANR	111474	IdentifierDecl	"* fetch_ast = zend_ast_create ( ZEND_AST_VAR , var_ast )"		111211	0					
ANR	111475	IdentifierDeclType	zend_ast *		111211	0					
ANR	111476	Identifier	fetch_ast		111211	1					
ANR	111477	AssignmentExpression	"* fetch_ast = zend_ast_create ( ZEND_AST_VAR , var_ast )"		111211	2		=			
ANR	111478	Identifier	fetch_ast		111211	0					
ANR	111479	CallExpression	"zend_ast_create ( ZEND_AST_VAR , var_ast )"		111211	1					
ANR	111480	Callee	zend_ast_create		111211	0					
ANR	111481	Identifier	zend_ast_create		111211	0					
ANR	111482	ArgumentList	ZEND_AST_VAR		111211	1					
ANR	111483	Argument	ZEND_AST_VAR		111211	0					
ANR	111484	Identifier	ZEND_AST_VAR		111211	0					
ANR	111485	Argument	var_ast		111211	1					
ANR	111486	Identifier	var_ast		111211	0					
ANR	111487	ExpressionStatement	"zend_emit_assign_znode ( fetch_ast , & result )"	3462:2:100736:100778	111211	1	True				
ANR	111488	CallExpression	"zend_emit_assign_znode ( fetch_ast , & result )"		111211	0					
ANR	111489	Callee	zend_emit_assign_znode		111211	0					
ANR	111490	Identifier	zend_emit_assign_znode		111211	0					
ANR	111491	ArgumentList	fetch_ast		111211	1					
ANR	111492	Argument	fetch_ast		111211	0					
ANR	111493	Identifier	fetch_ast		111211	0					
ANR	111494	Argument	& result		111211	1					
ANR	111495	UnaryOperationExpression	& result		111211	0					
ANR	111496	UnaryOperator	&		111211	0					
ANR	111497	Identifier	result		111211	1					
ANR	111498	ReturnType	static void		111211	1					
ANR	111499	Identifier	zend_compile_static_var_common		111211	2					
ANR	111500	ParameterList	"zend_ast * var_ast , zval * value , zend_bool by_ref"		111211	3					
ANR	111501	Parameter	zend_ast * var_ast	3431:43:99547:99563	111211	0	True				
ANR	111502	ParameterType	zend_ast *		111211	0					
ANR	111503	Identifier	var_ast		111211	1					
ANR	111504	Parameter	zval * value	3431:62:99566:99576	111211	1	True				
ANR	111505	ParameterType	zval *		111211	0					
ANR	111506	Identifier	value		111211	1					
ANR	111507	Parameter	zend_bool by_ref	3431:75:99579:99594	111211	2	True				
ANR	111508	ParameterType	zend_bool		111211	0					
ANR	111509	Identifier	by_ref		111211	1					
ANR	111510	CFGEntryNode	ENTRY		111211		True				
ANR	111511	CFGExitNode	EXIT		111211		True				
ANR	111512	Symbol	var_node . u		111211						
ANR	111513	Symbol	* CG		111211						
ANR	111514	Symbol	GC_FLAGS		111211						
ANR	111515	Symbol	Z_STR		111211						
ANR	111516	Symbol	opline -> extended_value		111211						
ANR	111517	Symbol	result		111211						
ANR	111518	Symbol	* CG ( active_op_array ) -> scope		111211						
ANR	111519	Symbol	CG ( active_op_array ) -> scope -> ce_flags		111211						
ANR	111520	Symbol	* * CG		111211						
ANR	111521	Symbol	opline		111211						
ANR	111522	Symbol	ZEND_AST_VAR		111211						
ANR	111523	Symbol	CG ( active_op_array ) -> scope		111211						
ANR	111524	Symbol	& result		111211						
ANR	111525	Symbol	CG ( active_op_array ) -> static_variables		111211						
ANR	111526	Symbol	ZEND_FETCH_STATIC		111211						
ANR	111527	Symbol	value		111211						
ANR	111528	Symbol	GC_REFCOUNT		111211						
ANR	111529	Symbol	zend_array_dup		111211						
ANR	111530	Symbol	NULL		111211						
ANR	111531	Symbol	var_node		111211						
ANR	111532	Symbol	CG		111211						
ANR	111533	Symbol	& var_node		111211						
ANR	111534	Symbol	active_op_array		111211						
ANR	111535	Symbol	zend_ast_create		111211						
ANR	111536	Symbol	ZEND_FETCH_R		111211						
ANR	111537	Symbol	ZEND_HAS_STATIC_IN_METHODS		111211						
ANR	111538	Symbol	IS_ARRAY_IMMUTABLE		111211						
ANR	111539	Symbol	ZVAL_PTR_DTOR		111211						
ANR	111540	Symbol	var_node . u . constant		111211						
ANR	111541	Symbol	var_ast		111211						
ANR	111542	Symbol	ZEND_FETCH_W		111211						
ANR	111543	Symbol	* opline		111211						
ANR	111544	Symbol	by_ref		111211						
ANR	111545	Symbol	fetch_ast		111211						
ANR	111546	Symbol	zend_emit_op		111211						
ANR	111547	Function	zend_compile_static_var	3467:0:100796:101104							
ANR	111548	FunctionDef	zend_compile_static_var (zend_ast * ast)		111547	0					
ANR	111549	CompoundStatement		3468:0:100850:101104	111547	0					
ANR	111550	IdentifierDeclStatement	zend_ast * var_ast = ast -> child [ 0 ] ;	3469:1:100853:100886	111547	0	True				
ANR	111551	IdentifierDecl	* var_ast = ast -> child [ 0 ]		111547	0					
ANR	111552	IdentifierDeclType	zend_ast *		111547	0					
ANR	111553	Identifier	var_ast		111547	1					
ANR	111554	AssignmentExpression	* var_ast = ast -> child [ 0 ]		111547	2		=			
ANR	111555	Identifier	var_ast		111547	0					
ANR	111556	ArrayIndexing	ast -> child [ 0 ]		111547	1					
ANR	111557	PtrMemberAccess	ast -> child		111547	0					
ANR	111558	Identifier	ast		111547	0					
ANR	111559	Identifier	child		111547	1					
ANR	111560	PrimaryExpression	0		111547	1					
ANR	111561	IdentifierDeclStatement	zend_ast * value_ast = ast -> child [ 1 ] ;	3470:1:100889:100924	111547	1	True				
ANR	111562	IdentifierDecl	* value_ast = ast -> child [ 1 ]		111547	0					
ANR	111563	IdentifierDeclType	zend_ast *		111547	0					
ANR	111564	Identifier	value_ast		111547	1					
ANR	111565	AssignmentExpression	* value_ast = ast -> child [ 1 ]		111547	2		=			
ANR	111566	Identifier	value_ast		111547	0					
ANR	111567	ArrayIndexing	ast -> child [ 1 ]		111547	1					
ANR	111568	PtrMemberAccess	ast -> child		111547	0					
ANR	111569	Identifier	ast		111547	0					
ANR	111570	Identifier	child		111547	1					
ANR	111571	PrimaryExpression	1		111547	1					
ANR	111572	IdentifierDeclStatement	zval value_zv ;	3471:1:100927:100940	111547	2	True				
ANR	111573	IdentifierDecl	value_zv		111547	0					
ANR	111574	IdentifierDeclType	zval		111547	0					
ANR	111575	Identifier	value_zv		111547	1					
ANR	111576	IfStatement	if ( value_ast )		111547	3					
ANR	111577	Condition	value_ast	3473:5:100948:100956	111547	0	True				
ANR	111578	Identifier	value_ast		111547	0					
ANR	111579	CompoundStatement		6:16:108:108	111547	1					
ANR	111580	ExpressionStatement	"zend_const_expr_to_zval ( & value_zv , value_ast )"	3474:2:100963:101008	111547	0	True				
ANR	111581	CallExpression	"zend_const_expr_to_zval ( & value_zv , value_ast )"		111547	0					
ANR	111582	Callee	zend_const_expr_to_zval		111547	0					
ANR	111583	Identifier	zend_const_expr_to_zval		111547	0					
ANR	111584	ArgumentList	& value_zv		111547	1					
ANR	111585	Argument	& value_zv		111547	0					
ANR	111586	UnaryOperationExpression	& value_zv		111547	0					
ANR	111587	UnaryOperator	&		111547	0					
ANR	111588	Identifier	value_zv		111547	1					
ANR	111589	Argument	value_ast		111547	1					
ANR	111590	Identifier	value_ast		111547	0					
ANR	111591	ElseStatement	else		111547	0					
ANR	111592	CompoundStatement		8:8:167:167	111547	0					
ANR	111593	ExpressionStatement	ZVAL_NULL ( & value_zv )	3476:2:101022:101042	111547	0	True				
ANR	111594	CallExpression	ZVAL_NULL ( & value_zv )		111547	0					
ANR	111595	Callee	ZVAL_NULL		111547	0					
ANR	111596	Identifier	ZVAL_NULL		111547	0					
ANR	111597	ArgumentList	& value_zv		111547	1					
ANR	111598	Argument	& value_zv		111547	0					
ANR	111599	UnaryOperationExpression	& value_zv		111547	0					
ANR	111600	UnaryOperator	&		111547	0					
ANR	111601	Identifier	value_zv		111547	1					
ANR	111602	ExpressionStatement	"zend_compile_static_var_common ( var_ast , & value_zv , 1 )"	3479:1:101049:101102	111547	4	True				
ANR	111603	CallExpression	"zend_compile_static_var_common ( var_ast , & value_zv , 1 )"		111547	0					
ANR	111604	Callee	zend_compile_static_var_common		111547	0					
ANR	111605	Identifier	zend_compile_static_var_common		111547	0					
ANR	111606	ArgumentList	var_ast		111547	1					
ANR	111607	Argument	var_ast		111547	0					
ANR	111608	Identifier	var_ast		111547	0					
ANR	111609	Argument	& value_zv		111547	1					
ANR	111610	UnaryOperationExpression	& value_zv		111547	0					
ANR	111611	UnaryOperator	&		111547	0					
ANR	111612	Identifier	value_zv		111547	1					
ANR	111613	Argument	1		111547	2					
ANR	111614	PrimaryExpression	1		111547	0					
ANR	111615	ReturnType	void		111547	1					
ANR	111616	Identifier	zend_compile_static_var		111547	2					
ANR	111617	ParameterList	zend_ast * ast		111547	3					
ANR	111618	Parameter	zend_ast * ast	3467:29:100825:100837	111547	0	True				
ANR	111619	ParameterType	zend_ast *		111547	0					
ANR	111620	Identifier	ast		111547	1					
ANR	111621	CFGEntryNode	ENTRY		111547		True				
ANR	111622	CFGExitNode	EXIT		111547		True				
ANR	111623	Symbol	var_ast		111547						
ANR	111624	Symbol	ast		111547						
ANR	111625	Symbol	* ast		111547						
ANR	111626	Symbol	& value_zv		111547						
ANR	111627	Symbol	value_ast		111547						
ANR	111628	Symbol	* * ast		111547						
ANR	111629	Symbol	value_zv		111547						
ANR	111630	Symbol	* ast -> child		111547						
ANR	111631	Symbol	ast -> child		111547						
ANR	111632	Function	zend_compile_unset	3483:0:101117:102117							
ANR	111633	FunctionDef	zend_compile_unset (zend_ast * ast)		111632	0					
ANR	111634	CompoundStatement		3484:0:101166:102117	111632	0					
ANR	111635	IdentifierDeclStatement	zend_ast * var_ast = ast -> child [ 0 ] ;	3485:1:101169:101202	111632	0	True				
ANR	111636	IdentifierDecl	* var_ast = ast -> child [ 0 ]		111632	0					
ANR	111637	IdentifierDeclType	zend_ast *		111632	0					
ANR	111638	Identifier	var_ast		111632	1					
ANR	111639	AssignmentExpression	* var_ast = ast -> child [ 0 ]		111632	2		=			
ANR	111640	Identifier	var_ast		111632	0					
ANR	111641	ArrayIndexing	ast -> child [ 0 ]		111632	1					
ANR	111642	PtrMemberAccess	ast -> child		111632	0					
ANR	111643	Identifier	ast		111632	0					
ANR	111644	Identifier	child		111632	1					
ANR	111645	PrimaryExpression	0		111632	1					
ANR	111646	IdentifierDeclStatement	znode var_node ;	3486:1:101205:101219	111632	1	True				
ANR	111647	IdentifierDecl	var_node		111632	0					
ANR	111648	IdentifierDeclType	znode		111632	0					
ANR	111649	Identifier	var_node		111632	1					
ANR	111650	IdentifierDeclStatement	zend_op * opline ;	3487:1:101222:101237	111632	2	True				
ANR	111651	IdentifierDecl	* opline		111632	0					
ANR	111652	IdentifierDeclType	zend_op *		111632	0					
ANR	111653	Identifier	opline		111632	1					
ANR	111654	ExpressionStatement	zend_ensure_writable_variable ( var_ast )	3489:1:101241:101279	111632	3	True				
ANR	111655	CallExpression	zend_ensure_writable_variable ( var_ast )		111632	0					
ANR	111656	Callee	zend_ensure_writable_variable		111632	0					
ANR	111657	Identifier	zend_ensure_writable_variable		111632	0					
ANR	111658	ArgumentList	var_ast		111632	1					
ANR	111659	Argument	var_ast		111632	0					
ANR	111660	Identifier	var_ast		111632	0					
ANR	111661	SwitchStatement	switch ( var_ast -> kind )		111632	4					
ANR	111662	Condition	var_ast -> kind	3491:9:101291:101303	111632	0	True				
ANR	111663	PtrMemberAccess	var_ast -> kind		111632	0					
ANR	111664	Identifier	var_ast		111632	0					
ANR	111665	Identifier	kind		111632	1					
ANR	111666	CompoundStatement		8:24:139:139	111632	1					
ANR	111667	Label	case ZEND_AST_VAR :	3492:2:101310:101327	111632	0	True				
ANR	111668	Identifier	ZEND_AST_VAR		111632	0					
ANR	111669	IfStatement	"if ( zend_try_compile_cv ( & var_node , var_ast ) == SUCCESS )"		111632	1					
ANR	111670	Condition	"zend_try_compile_cv ( & var_node , var_ast ) == SUCCESS"	3493:7:101336:101385	111632	0	True				
ANR	111671	EqualityExpression	"zend_try_compile_cv ( & var_node , var_ast ) == SUCCESS"		111632	0		==			
ANR	111672	CallExpression	"zend_try_compile_cv ( & var_node , var_ast )"		111632	0					
ANR	111673	Callee	zend_try_compile_cv		111632	0					
ANR	111674	Identifier	zend_try_compile_cv		111632	0					
ANR	111675	ArgumentList	& var_node		111632	1					
ANR	111676	Argument	& var_node		111632	0					
ANR	111677	UnaryOperationExpression	& var_node		111632	0					
ANR	111678	UnaryOperator	&		111632	0					
ANR	111679	Identifier	var_node		111632	1					
ANR	111680	Argument	var_ast		111632	1					
ANR	111681	Identifier	var_ast		111632	0					
ANR	111682	Identifier	SUCCESS		111632	1					
ANR	111683	CompoundStatement		10:59:221:221	111632	1					
ANR	111684	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_UNSET_VAR , & var_node , NULL )"	3494:4:101394:101454	111632	0	True				
ANR	111685	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_UNSET_VAR , & var_node , NULL )"		111632	0		=			
ANR	111686	Identifier	opline		111632	0					
ANR	111687	CallExpression	"zend_emit_op ( NULL , ZEND_UNSET_VAR , & var_node , NULL )"		111632	1					
ANR	111688	Callee	zend_emit_op		111632	0					
ANR	111689	Identifier	zend_emit_op		111632	0					
ANR	111690	ArgumentList	NULL		111632	1					
ANR	111691	Argument	NULL		111632	0					
ANR	111692	Identifier	NULL		111632	0					
ANR	111693	Argument	ZEND_UNSET_VAR		111632	1					
ANR	111694	Identifier	ZEND_UNSET_VAR		111632	0					
ANR	111695	Argument	& var_node		111632	2					
ANR	111696	UnaryOperationExpression	& var_node		111632	0					
ANR	111697	UnaryOperator	&		111632	0					
ANR	111698	Identifier	var_node		111632	1					
ANR	111699	Argument	NULL		111632	3					
ANR	111700	Identifier	NULL		111632	0					
ANR	111701	ExpressionStatement	opline -> extended_value = ZEND_FETCH_LOCAL | ZEND_QUICK_SET	3495:4:101460:101518	111632	1	True				
ANR	111702	AssignmentExpression	opline -> extended_value = ZEND_FETCH_LOCAL | ZEND_QUICK_SET		111632	0		=			
ANR	111703	PtrMemberAccess	opline -> extended_value		111632	0					
ANR	111704	Identifier	opline		111632	0					
ANR	111705	Identifier	extended_value		111632	1					
ANR	111706	InclusiveOrExpression	ZEND_FETCH_LOCAL | ZEND_QUICK_SET		111632	1		|			
ANR	111707	Identifier	ZEND_FETCH_LOCAL		111632	0					
ANR	111708	Identifier	ZEND_QUICK_SET		111632	1					
ANR	111709	ElseStatement	else		111632	0					
ANR	111710	CompoundStatement		13:10:363:363	111632	0					
ANR	111711	ExpressionStatement	"opline = zend_compile_simple_var_no_cv ( NULL , var_ast , BP_VAR_UNSET , 0 )"	3497:4:101536:101606	111632	0	True				
ANR	111712	AssignmentExpression	"opline = zend_compile_simple_var_no_cv ( NULL , var_ast , BP_VAR_UNSET , 0 )"		111632	0		=			
ANR	111713	Identifier	opline		111632	0					
ANR	111714	CallExpression	"zend_compile_simple_var_no_cv ( NULL , var_ast , BP_VAR_UNSET , 0 )"		111632	1					
ANR	111715	Callee	zend_compile_simple_var_no_cv		111632	0					
ANR	111716	Identifier	zend_compile_simple_var_no_cv		111632	0					
ANR	111717	ArgumentList	NULL		111632	1					
ANR	111718	Argument	NULL		111632	0					
ANR	111719	Identifier	NULL		111632	0					
ANR	111720	Argument	var_ast		111632	1					
ANR	111721	Identifier	var_ast		111632	0					
ANR	111722	Argument	BP_VAR_UNSET		111632	2					
ANR	111723	Identifier	BP_VAR_UNSET		111632	0					
ANR	111724	Argument	0		111632	3					
ANR	111725	PrimaryExpression	0		111632	0					
ANR	111726	ExpressionStatement	opline -> opcode = ZEND_UNSET_VAR	3498:4:101612:101643	111632	1	True				
ANR	111727	AssignmentExpression	opline -> opcode = ZEND_UNSET_VAR		111632	0		=			
ANR	111728	PtrMemberAccess	opline -> opcode		111632	0					
ANR	111729	Identifier	opline		111632	0					
ANR	111730	Identifier	opcode		111632	1					
ANR	111731	Identifier	ZEND_UNSET_VAR		111632	1					
ANR	111732	ReturnStatement	return ;	3500:3:101653:101659	111632	2	True				
ANR	111733	Label	case ZEND_AST_DIM :	3501:2:101663:101680	111632	3	True				
ANR	111734	Identifier	ZEND_AST_DIM		111632	0					
ANR	111735	ExpressionStatement	"opline = zend_compile_dim_common ( NULL , var_ast , BP_VAR_UNSET )"	3502:3:101685:101746	111632	4	True				
ANR	111736	AssignmentExpression	"opline = zend_compile_dim_common ( NULL , var_ast , BP_VAR_UNSET )"		111632	0		=			
ANR	111737	Identifier	opline		111632	0					
ANR	111738	CallExpression	"zend_compile_dim_common ( NULL , var_ast , BP_VAR_UNSET )"		111632	1					
ANR	111739	Callee	zend_compile_dim_common		111632	0					
ANR	111740	Identifier	zend_compile_dim_common		111632	0					
ANR	111741	ArgumentList	NULL		111632	1					
ANR	111742	Argument	NULL		111632	0					
ANR	111743	Identifier	NULL		111632	0					
ANR	111744	Argument	var_ast		111632	1					
ANR	111745	Identifier	var_ast		111632	0					
ANR	111746	Argument	BP_VAR_UNSET		111632	2					
ANR	111747	Identifier	BP_VAR_UNSET		111632	0					
ANR	111748	ExpressionStatement	opline -> opcode = ZEND_UNSET_DIM	3503:3:101751:101782	111632	5	True				
ANR	111749	AssignmentExpression	opline -> opcode = ZEND_UNSET_DIM		111632	0		=			
ANR	111750	PtrMemberAccess	opline -> opcode		111632	0					
ANR	111751	Identifier	opline		111632	0					
ANR	111752	Identifier	opcode		111632	1					
ANR	111753	Identifier	ZEND_UNSET_DIM		111632	1					
ANR	111754	ReturnStatement	return ;	3504:3:101787:101793	111632	6	True				
ANR	111755	Label	case ZEND_AST_PROP :	3505:2:101797:101815	111632	7	True				
ANR	111756	Identifier	ZEND_AST_PROP		111632	0					
ANR	111757	ExpressionStatement	"opline = zend_compile_prop_common ( NULL , var_ast , BP_VAR_UNSET )"	3506:3:101820:101882	111632	8	True				
ANR	111758	AssignmentExpression	"opline = zend_compile_prop_common ( NULL , var_ast , BP_VAR_UNSET )"		111632	0		=			
ANR	111759	Identifier	opline		111632	0					
ANR	111760	CallExpression	"zend_compile_prop_common ( NULL , var_ast , BP_VAR_UNSET )"		111632	1					
ANR	111761	Callee	zend_compile_prop_common		111632	0					
ANR	111762	Identifier	zend_compile_prop_common		111632	0					
ANR	111763	ArgumentList	NULL		111632	1					
ANR	111764	Argument	NULL		111632	0					
ANR	111765	Identifier	NULL		111632	0					
ANR	111766	Argument	var_ast		111632	1					
ANR	111767	Identifier	var_ast		111632	0					
ANR	111768	Argument	BP_VAR_UNSET		111632	2					
ANR	111769	Identifier	BP_VAR_UNSET		111632	0					
ANR	111770	ExpressionStatement	opline -> opcode = ZEND_UNSET_OBJ	3507:3:101887:101918	111632	9	True				
ANR	111771	AssignmentExpression	opline -> opcode = ZEND_UNSET_OBJ		111632	0		=			
ANR	111772	PtrMemberAccess	opline -> opcode		111632	0					
ANR	111773	Identifier	opline		111632	0					
ANR	111774	Identifier	opcode		111632	1					
ANR	111775	Identifier	ZEND_UNSET_OBJ		111632	1					
ANR	111776	ReturnStatement	return ;	3508:3:101923:101929	111632	10	True				
ANR	111777	Label	case ZEND_AST_STATIC_PROP :	3509:2:101933:101958	111632	11	True				
ANR	111778	Identifier	ZEND_AST_STATIC_PROP		111632	0					
ANR	111779	ExpressionStatement	"opline = zend_compile_static_prop_common ( NULL , var_ast , BP_VAR_UNSET , 0 )"	3510:3:101963:102035	111632	12	True				
ANR	111780	AssignmentExpression	"opline = zend_compile_static_prop_common ( NULL , var_ast , BP_VAR_UNSET , 0 )"		111632	0		=			
ANR	111781	Identifier	opline		111632	0					
ANR	111782	CallExpression	"zend_compile_static_prop_common ( NULL , var_ast , BP_VAR_UNSET , 0 )"		111632	1					
ANR	111783	Callee	zend_compile_static_prop_common		111632	0					
ANR	111784	Identifier	zend_compile_static_prop_common		111632	0					
ANR	111785	ArgumentList	NULL		111632	1					
ANR	111786	Argument	NULL		111632	0					
ANR	111787	Identifier	NULL		111632	0					
ANR	111788	Argument	var_ast		111632	1					
ANR	111789	Identifier	var_ast		111632	0					
ANR	111790	Argument	BP_VAR_UNSET		111632	2					
ANR	111791	Identifier	BP_VAR_UNSET		111632	0					
ANR	111792	Argument	0		111632	3					
ANR	111793	PrimaryExpression	0		111632	0					
ANR	111794	ExpressionStatement	opline -> opcode = ZEND_UNSET_VAR	3511:3:102040:102071	111632	13	True				
ANR	111795	AssignmentExpression	opline -> opcode = ZEND_UNSET_VAR		111632	0		=			
ANR	111796	PtrMemberAccess	opline -> opcode		111632	0					
ANR	111797	Identifier	opline		111632	0					
ANR	111798	Identifier	opcode		111632	1					
ANR	111799	Identifier	ZEND_UNSET_VAR		111632	1					
ANR	111800	ReturnStatement	return ;	3512:3:102076:102082	111632	14	True				
ANR	111801	Statement	EMPTY_SWITCH_DEFAULT_CASE	3513:2:102086:102110	111632	15	True				
ANR	111802	Statement	(	3513:27:102111:102111	111632	16	True				
ANR	111803	Statement	)	3513:28:102112:102112	111632	17	True				
ANR	111804	ReturnType	void		111632	1					
ANR	111805	Identifier	zend_compile_unset		111632	2					
ANR	111806	ParameterList	zend_ast * ast		111632	3					
ANR	111807	Parameter	zend_ast * ast	3483:24:101141:101153	111632	0	True				
ANR	111808	ParameterType	zend_ast *		111632	0					
ANR	111809	Identifier	ast		111632	1					
ANR	111810	CFGEntryNode	ENTRY		111632		True				
ANR	111811	CFGExitNode	EXIT		111632		True				
ANR	111812	Symbol	ast		111632						
ANR	111813	Symbol	* var_ast		111632						
ANR	111814	Symbol	opline -> extended_value		111632						
ANR	111815	Symbol	zend_compile_simple_var_no_cv		111632						
ANR	111816	Symbol	* ast		111632						
ANR	111817	Symbol	opline		111632						
ANR	111818	Symbol	var_ast -> kind		111632						
ANR	111819	Symbol	* * ast		111632						
ANR	111820	Symbol	ZEND_UNSET_VAR		111632						
ANR	111821	Symbol	SUCCESS		111632						
ANR	111822	Symbol	NULL		111632						
ANR	111823	Symbol	var_node		111632						
ANR	111824	Symbol	& var_node		111632						
ANR	111825	Symbol	ZEND_FETCH_LOCAL		111632						
ANR	111826	Symbol	ZEND_QUICK_SET		111632						
ANR	111827	Symbol	zend_compile_dim_common		111632						
ANR	111828	Symbol	ZEND_UNSET_OBJ		111632						
ANR	111829	Symbol	zend_try_compile_cv		111632						
ANR	111830	Symbol	zend_compile_prop_common		111632						
ANR	111831	Symbol	zend_compile_static_prop_common		111632						
ANR	111832	Symbol	var_ast		111632						
ANR	111833	Symbol	* opline		111632						
ANR	111834	Symbol	opline -> opcode		111632						
ANR	111835	Symbol	* ast -> child		111632						
ANR	111836	Symbol	ZEND_UNSET_DIM		111632						
ANR	111837	Symbol	ast -> child		111632						
ANR	111838	Symbol	BP_VAR_UNSET		111632						
ANR	111839	Symbol	zend_emit_op		111632						
ANR	111840	Function	zend_handle_loops_and_finally_ex	3518:0:102130:103408							
ANR	111841	FunctionDef	zend_handle_loops_and_finally_ex (zend_long depth)		111840	0					
ANR	111842	CompoundStatement		3519:0:102201:103408	111840	0					
ANR	111843	IdentifierDeclStatement	zend_loop_var * base ;	3520:1:102204:102223	111840	0	True				
ANR	111844	IdentifierDecl	* base		111840	0					
ANR	111845	IdentifierDeclType	zend_loop_var *		111840	0					
ANR	111846	Identifier	base		111840	1					
ANR	111847	IdentifierDeclStatement	zend_loop_var * loop_var = zend_stack_top ( & CG ( loop_var_stack ) ) ;	3521:1:102226:102287	111840	1	True				
ANR	111848	IdentifierDecl	* loop_var = zend_stack_top ( & CG ( loop_var_stack ) )		111840	0					
ANR	111849	IdentifierDeclType	zend_loop_var *		111840	0					
ANR	111850	Identifier	loop_var		111840	1					
ANR	111851	AssignmentExpression	* loop_var = zend_stack_top ( & CG ( loop_var_stack ) )		111840	2		=			
ANR	111852	Identifier	loop_var		111840	0					
ANR	111853	CallExpression	zend_stack_top ( & CG ( loop_var_stack ) )		111840	1					
ANR	111854	Callee	zend_stack_top		111840	0					
ANR	111855	Identifier	zend_stack_top		111840	0					
ANR	111856	ArgumentList	& CG ( loop_var_stack )		111840	1					
ANR	111857	Argument	& CG ( loop_var_stack )		111840	0					
ANR	111858	UnaryOperationExpression	& CG ( loop_var_stack )		111840	0					
ANR	111859	UnaryOperator	&		111840	0					
ANR	111860	CallExpression	CG ( loop_var_stack )		111840	1					
ANR	111861	Callee	CG		111840	0					
ANR	111862	Identifier	CG		111840	0					
ANR	111863	ArgumentList	loop_var_stack		111840	1					
ANR	111864	Argument	loop_var_stack		111840	0					
ANR	111865	Identifier	loop_var_stack		111840	0					
ANR	111866	IfStatement	if ( ! loop_var )		111840	2					
ANR	111867	Condition	! loop_var	3523:5:102295:102303	111840	0	True				
ANR	111868	UnaryOperationExpression	! loop_var		111840	0					
ANR	111869	UnaryOperator	!		111840	0					
ANR	111870	Identifier	loop_var		111840	1					
ANR	111871	CompoundStatement		5:16:104:104	111840	1					
ANR	111872	ReturnStatement	return 1 ;	3524:2:102310:102318	111840	0	True				
ANR	111873	PrimaryExpression	1		111840	0					
ANR	111874	ExpressionStatement	base = zend_stack_base ( & CG ( loop_var_stack ) )	3526:1:102324:102367	111840	3	True				
ANR	111875	AssignmentExpression	base = zend_stack_base ( & CG ( loop_var_stack ) )		111840	0		=			
ANR	111876	Identifier	base		111840	0					
ANR	111877	CallExpression	zend_stack_base ( & CG ( loop_var_stack ) )		111840	1					
ANR	111878	Callee	zend_stack_base		111840	0					
ANR	111879	Identifier	zend_stack_base		111840	0					
ANR	111880	ArgumentList	& CG ( loop_var_stack )		111840	1					
ANR	111881	Argument	& CG ( loop_var_stack )		111840	0					
ANR	111882	UnaryOperationExpression	& CG ( loop_var_stack )		111840	0					
ANR	111883	UnaryOperator	&		111840	0					
ANR	111884	CallExpression	CG ( loop_var_stack )		111840	1					
ANR	111885	Callee	CG		111840	0					
ANR	111886	Identifier	CG		111840	0					
ANR	111887	ArgumentList	loop_var_stack		111840	1					
ANR	111888	Argument	loop_var_stack		111840	0					
ANR	111889	Identifier	loop_var_stack		111840	0					
ANR	111890	ForStatement	for ( ; loop_var >= base ; loop_var -- )		111840	4					
ANR	111891	Condition	loop_var >= base	3527:8:102377:102392	111840	0	True				
ANR	111892	RelationalExpression	loop_var >= base		111840	0		>=			
ANR	111893	Identifier	loop_var		111840	0					
ANR	111894	Identifier	base		111840	1					
ANR	111895	PostIncDecOperationExpression	loop_var --	3527:26:102395:102404	111840	1	True				
ANR	111896	Identifier	loop_var		111840	0					
ANR	111897	IncDec	--		111840	1					
ANR	111898	CompoundStatement		9:38:205:205	111840	2					
ANR	111899	IfStatement	if ( loop_var -> opcode == ZEND_FAST_CALL )		111840	0					
ANR	111900	Condition	loop_var -> opcode == ZEND_FAST_CALL	3528:6:102415:102448	111840	0	True				
ANR	111901	EqualityExpression	loop_var -> opcode == ZEND_FAST_CALL		111840	0		==			
ANR	111902	PtrMemberAccess	loop_var -> opcode		111840	0					
ANR	111903	Identifier	loop_var		111840	0					
ANR	111904	Identifier	opcode		111840	1					
ANR	111905	Identifier	ZEND_FAST_CALL		111840	1					
ANR	111906	CompoundStatement		11:3:254:304	111840	1					
ANR	111907	IdentifierDeclStatement	zend_op * opline = get_next_op ( CG ( active_op_array ) ) ;	3529:3:102456:102506	111840	0	True				
ANR	111908	IdentifierDecl	* opline = get_next_op ( CG ( active_op_array ) )		111840	0					
ANR	111909	IdentifierDeclType	zend_op *		111840	0					
ANR	111910	Identifier	opline		111840	1					
ANR	111911	AssignmentExpression	* opline = get_next_op ( CG ( active_op_array ) )		111840	2		=			
ANR	111912	Identifier	opline		111840	0					
ANR	111913	CallExpression	get_next_op ( CG ( active_op_array ) )		111840	1					
ANR	111914	Callee	get_next_op		111840	0					
ANR	111915	Identifier	get_next_op		111840	0					
ANR	111916	ArgumentList	CG ( active_op_array )		111840	1					
ANR	111917	Argument	CG ( active_op_array )		111840	0					
ANR	111918	CallExpression	CG ( active_op_array )		111840	0					
ANR	111919	Callee	CG		111840	0					
ANR	111920	Identifier	CG		111840	0					
ANR	111921	ArgumentList	active_op_array		111840	1					
ANR	111922	Argument	active_op_array		111840	0					
ANR	111923	Identifier	active_op_array		111840	0					
ANR	111924	ExpressionStatement	opline -> opcode = ZEND_FAST_CALL	3531:3:102512:102543	111840	1	True				
ANR	111925	AssignmentExpression	opline -> opcode = ZEND_FAST_CALL		111840	0		=			
ANR	111926	PtrMemberAccess	opline -> opcode		111840	0					
ANR	111927	Identifier	opline		111840	0					
ANR	111928	Identifier	opcode		111840	1					
ANR	111929	Identifier	ZEND_FAST_CALL		111840	1					
ANR	111930	ExpressionStatement	opline -> result_type = IS_TMP_VAR	3532:3:102548:102580	111840	2	True				
ANR	111931	AssignmentExpression	opline -> result_type = IS_TMP_VAR		111840	0		=			
ANR	111932	PtrMemberAccess	opline -> result_type		111840	0					
ANR	111933	Identifier	opline		111840	0					
ANR	111934	Identifier	result_type		111840	1					
ANR	111935	Identifier	IS_TMP_VAR		111840	1					
ANR	111936	ExpressionStatement	opline -> result . var = loop_var -> var_num	3533:3:102585:102623	111840	3	True				
ANR	111937	AssignmentExpression	opline -> result . var = loop_var -> var_num		111840	0		=			
ANR	111938	MemberAccess	opline -> result . var		111840	0					
ANR	111939	PtrMemberAccess	opline -> result		111840	0					
ANR	111940	Identifier	opline		111840	0					
ANR	111941	Identifier	result		111840	1					
ANR	111942	Identifier	var		111840	1					
ANR	111943	PtrMemberAccess	loop_var -> var_num		111840	1					
ANR	111944	Identifier	loop_var		111840	0					
ANR	111945	Identifier	var_num		111840	1					
ANR	111946	ExpressionStatement	SET_UNUSED ( opline -> op1 )	3534:3:102628:102651	111840	4	True				
ANR	111947	CallExpression	SET_UNUSED ( opline -> op1 )		111840	0					
ANR	111948	Callee	SET_UNUSED		111840	0					
ANR	111949	Identifier	SET_UNUSED		111840	0					
ANR	111950	ArgumentList	opline -> op1		111840	1					
ANR	111951	Argument	opline -> op1		111840	0					
ANR	111952	PtrMemberAccess	opline -> op1		111840	0					
ANR	111953	Identifier	opline		111840	0					
ANR	111954	Identifier	op1		111840	1					
ANR	111955	ExpressionStatement	SET_UNUSED ( opline -> op2 )	3535:3:102656:102679	111840	5	True				
ANR	111956	CallExpression	SET_UNUSED ( opline -> op2 )		111840	0					
ANR	111957	Callee	SET_UNUSED		111840	0					
ANR	111958	Identifier	SET_UNUSED		111840	0					
ANR	111959	ArgumentList	opline -> op2		111840	1					
ANR	111960	Argument	opline -> op2		111840	0					
ANR	111961	PtrMemberAccess	opline -> op2		111840	0					
ANR	111962	Identifier	opline		111840	0					
ANR	111963	Identifier	op2		111840	1					
ANR	111964	ExpressionStatement	opline -> op1 . num = loop_var -> u . try_catch_offset	3536:3:102684:102730	111840	6	True				
ANR	111965	AssignmentExpression	opline -> op1 . num = loop_var -> u . try_catch_offset		111840	0		=			
ANR	111966	MemberAccess	opline -> op1 . num		111840	0					
ANR	111967	PtrMemberAccess	opline -> op1		111840	0					
ANR	111968	Identifier	opline		111840	0					
ANR	111969	Identifier	op1		111840	1					
ANR	111970	Identifier	num		111840	1					
ANR	111971	MemberAccess	loop_var -> u . try_catch_offset		111840	1					
ANR	111972	PtrMemberAccess	loop_var -> u		111840	0					
ANR	111973	Identifier	loop_var		111840	0					
ANR	111974	Identifier	u		111840	1					
ANR	111975	Identifier	try_catch_offset		111840	1					
ANR	111976	ElseStatement	else		111840	0					
ANR	111977	IfStatement	if ( loop_var -> opcode == ZEND_RETURN )		111840	0					
ANR	111978	Condition	loop_var -> opcode == ZEND_RETURN	3537:13:102745:102775	111840	0	True				
ANR	111979	EqualityExpression	loop_var -> opcode == ZEND_RETURN		111840	0		==			
ANR	111980	PtrMemberAccess	loop_var -> opcode		111840	0					
ANR	111981	Identifier	loop_var		111840	0					
ANR	111982	Identifier	opcode		111840	1					
ANR	111983	Identifier	ZEND_RETURN		111840	1					
ANR	111984	CompoundStatement		19:46:576:576	111840	1					
ANR	111985	BreakStatement	break ;	3539:3:102808:102813	111840	0	True				
ANR	111986	ElseStatement	else		111840	0					
ANR	111987	IfStatement	if ( depth <= 1 )		111840	0					
ANR	111988	Condition	depth <= 1	3540:13:102828:102837	111840	0	True				
ANR	111989	RelationalExpression	depth <= 1		111840	0		<=			
ANR	111990	Identifier	depth		111840	0					
ANR	111991	PrimaryExpression	1		111840	1					
ANR	111992	CompoundStatement		22:25:638:638	111840	1					
ANR	111993	ReturnStatement	return 1 ;	3541:3:102845:102853	111840	0	True				
ANR	111994	PrimaryExpression	1		111840	0					
ANR	111995	ElseStatement	else		111840	0					
ANR	111996	IfStatement	if ( loop_var -> opcode == ZEND_NOP )		111840	0					
ANR	111997	Condition	loop_var -> opcode == ZEND_NOP	3542:13:102868:102895	111840	0	True				
ANR	111998	EqualityExpression	loop_var -> opcode == ZEND_NOP		111840	0		==			
ANR	111999	PtrMemberAccess	loop_var -> opcode		111840	0					
ANR	112000	Identifier	loop_var		111840	0					
ANR	112001	Identifier	opcode		111840	1					
ANR	112002	Identifier	ZEND_NOP		111840	1					
ANR	112003	CompoundStatement		24:43:696:696	111840	1					
ANR	112004	ExpressionStatement	depth --	3544:3:102948:102955	111840	0	True				
ANR	112005	PostIncDecOperationExpression	depth --		111840	0					
ANR	112006	Identifier	depth		111840	0					
ANR	112007	IncDec	--		111840	1					
ANR	112008	ElseStatement	else		111840	0					
ANR	112009	CompoundStatement		28:3:769:784	111840	0					
ANR	112010	IdentifierDeclStatement	zend_op * opline ;	3546:3:102971:102986	111840	0	True				
ANR	112011	IdentifierDecl	* opline		111840	0					
ANR	112012	IdentifierDeclType	zend_op *		111840	0					
ANR	112013	Identifier	opline		111840	1					
ANR	112014	ExpressionStatement	ZEND_ASSERT ( loop_var -> var_type == IS_VAR || loop_var -> var_type == IS_TMP_VAR )	3548:3:102992:103069	111840	1	True				
ANR	112015	CallExpression	ZEND_ASSERT ( loop_var -> var_type == IS_VAR || loop_var -> var_type == IS_TMP_VAR )		111840	0					
ANR	112016	Callee	ZEND_ASSERT		111840	0					
ANR	112017	Identifier	ZEND_ASSERT		111840	0					
ANR	112018	ArgumentList	loop_var -> var_type == IS_VAR || loop_var -> var_type == IS_TMP_VAR		111840	1					
ANR	112019	Argument	loop_var -> var_type == IS_VAR || loop_var -> var_type == IS_TMP_VAR		111840	0					
ANR	112020	OrExpression	loop_var -> var_type == IS_VAR || loop_var -> var_type == IS_TMP_VAR		111840	0		||			
ANR	112021	EqualityExpression	loop_var -> var_type == IS_VAR		111840	0		==			
ANR	112022	PtrMemberAccess	loop_var -> var_type		111840	0					
ANR	112023	Identifier	loop_var		111840	0					
ANR	112024	Identifier	var_type		111840	1					
ANR	112025	Identifier	IS_VAR		111840	1					
ANR	112026	EqualityExpression	loop_var -> var_type == IS_TMP_VAR		111840	1		==			
ANR	112027	PtrMemberAccess	loop_var -> var_type		111840	0					
ANR	112028	Identifier	loop_var		111840	0					
ANR	112029	Identifier	var_type		111840	1					
ANR	112030	Identifier	IS_TMP_VAR		111840	1					
ANR	112031	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	3549:3:103074:103115	111840	2	True				
ANR	112032	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		111840	0		=			
ANR	112033	Identifier	opline		111840	0					
ANR	112034	CallExpression	get_next_op ( CG ( active_op_array ) )		111840	1					
ANR	112035	Callee	get_next_op		111840	0					
ANR	112036	Identifier	get_next_op		111840	0					
ANR	112037	ArgumentList	CG ( active_op_array )		111840	1					
ANR	112038	Argument	CG ( active_op_array )		111840	0					
ANR	112039	CallExpression	CG ( active_op_array )		111840	0					
ANR	112040	Callee	CG		111840	0					
ANR	112041	Identifier	CG		111840	0					
ANR	112042	ArgumentList	active_op_array		111840	1					
ANR	112043	Argument	active_op_array		111840	0					
ANR	112044	Identifier	active_op_array		111840	0					
ANR	112045	ExpressionStatement	opline -> opcode = loop_var -> opcode	3550:3:103120:103153	111840	3	True				
ANR	112046	AssignmentExpression	opline -> opcode = loop_var -> opcode		111840	0		=			
ANR	112047	PtrMemberAccess	opline -> opcode		111840	0					
ANR	112048	Identifier	opline		111840	0					
ANR	112049	Identifier	opcode		111840	1					
ANR	112050	PtrMemberAccess	loop_var -> opcode		111840	1					
ANR	112051	Identifier	loop_var		111840	0					
ANR	112052	Identifier	opcode		111840	1					
ANR	112053	ExpressionStatement	opline -> op1_type = loop_var -> var_type	3551:3:103158:103195	111840	4	True				
ANR	112054	AssignmentExpression	opline -> op1_type = loop_var -> var_type		111840	0		=			
ANR	112055	PtrMemberAccess	opline -> op1_type		111840	0					
ANR	112056	Identifier	opline		111840	0					
ANR	112057	Identifier	op1_type		111840	1					
ANR	112058	PtrMemberAccess	loop_var -> var_type		111840	1					
ANR	112059	Identifier	loop_var		111840	0					
ANR	112060	Identifier	var_type		111840	1					
ANR	112061	ExpressionStatement	opline -> op1 . var = loop_var -> var_num	3552:3:103200:103235	111840	5	True				
ANR	112062	AssignmentExpression	opline -> op1 . var = loop_var -> var_num		111840	0		=			
ANR	112063	MemberAccess	opline -> op1 . var		111840	0					
ANR	112064	PtrMemberAccess	opline -> op1		111840	0					
ANR	112065	Identifier	opline		111840	0					
ANR	112066	Identifier	op1		111840	1					
ANR	112067	Identifier	var		111840	1					
ANR	112068	PtrMemberAccess	loop_var -> var_num		111840	1					
ANR	112069	Identifier	loop_var		111840	0					
ANR	112070	Identifier	var_num		111840	1					
ANR	112071	ExpressionStatement	SET_UNUSED ( opline -> op2 )	3553:3:103240:103263	111840	6	True				
ANR	112072	CallExpression	SET_UNUSED ( opline -> op2 )		111840	0					
ANR	112073	Callee	SET_UNUSED		111840	0					
ANR	112074	Identifier	SET_UNUSED		111840	0					
ANR	112075	ArgumentList	opline -> op2		111840	1					
ANR	112076	Argument	opline -> op2		111840	0					
ANR	112077	PtrMemberAccess	opline -> op2		111840	0					
ANR	112078	Identifier	opline		111840	0					
ANR	112079	Identifier	op2		111840	1					
ANR	112080	ExpressionStatement	opline -> op2 . num = loop_var -> u . brk_cont_offset	3554:3:103268:103313	111840	7	True				
ANR	112081	AssignmentExpression	opline -> op2 . num = loop_var -> u . brk_cont_offset		111840	0		=			
ANR	112082	MemberAccess	opline -> op2 . num		111840	0					
ANR	112083	PtrMemberAccess	opline -> op2		111840	0					
ANR	112084	Identifier	opline		111840	0					
ANR	112085	Identifier	op2		111840	1					
ANR	112086	Identifier	num		111840	1					
ANR	112087	MemberAccess	loop_var -> u . brk_cont_offset		111840	1					
ANR	112088	PtrMemberAccess	loop_var -> u		111840	0					
ANR	112089	Identifier	loop_var		111840	0					
ANR	112090	Identifier	u		111840	1					
ANR	112091	Identifier	brk_cont_offset		111840	1					
ANR	112092	ExpressionStatement	opline -> extended_value = ZEND_FREE_ON_RETURN	3555:3:103318:103362	111840	8	True				
ANR	112093	AssignmentExpression	opline -> extended_value = ZEND_FREE_ON_RETURN		111840	0		=			
ANR	112094	PtrMemberAccess	opline -> extended_value		111840	0					
ANR	112095	Identifier	opline		111840	0					
ANR	112096	Identifier	extended_value		111840	1					
ANR	112097	Identifier	ZEND_FREE_ON_RETURN		111840	1					
ANR	112098	ExpressionStatement	depth --	3556:3:103367:103374	111840	9	True				
ANR	112099	PostIncDecOperationExpression	depth --		111840	0					
ANR	112100	Identifier	depth		111840	0					
ANR	112101	IncDec	--		111840	1					
ANR	112102	ReturnStatement	return ( depth == 0 ) ;	3559:1:103387:103406	111840	5	True				
ANR	112103	EqualityExpression	depth == 0		111840	0		==			
ANR	112104	Identifier	depth		111840	0					
ANR	112105	PrimaryExpression	0		111840	1					
ANR	112106	ReturnType	static int		111840	1					
ANR	112107	Identifier	zend_handle_loops_and_finally_ex		111840	2					
ANR	112108	ParameterList	zend_long depth		111840	3					
ANR	112109	Parameter	zend_long depth	3518:44:102174:102188	111840	0	True				
ANR	112110	ParameterType	zend_long		111840	0					
ANR	112111	Identifier	depth		111840	1					
ANR	112112	CFGEntryNode	ENTRY		111840		True				
ANR	112113	CFGExitNode	EXIT		111840		True				
ANR	112114	Symbol	loop_var -> var_num		111840						
ANR	112115	Symbol	opline -> op1		111840						
ANR	112116	Symbol	opline -> op2		111840						
ANR	112117	Symbol	opline -> result		111840						
ANR	112118	Symbol	opline -> extended_value		111840						
ANR	112119	Symbol	& CG		111840						
ANR	112120	Symbol	ZEND_FREE_ON_RETURN		111840						
ANR	112121	Symbol	loop_var -> u . try_catch_offset		111840						
ANR	112122	Symbol	zend_stack_top		111840						
ANR	112123	Symbol	loop_var -> var_type		111840						
ANR	112124	Symbol	opline		111840						
ANR	112125	Symbol	loop_var_stack		111840						
ANR	112126	Symbol	loop_var -> opcode		111840						
ANR	112127	Symbol	opline -> op1 . var		111840						
ANR	112128	Symbol	loop_var		111840						
ANR	112129	Symbol	IS_TMP_VAR		111840						
ANR	112130	Symbol	ZEND_FAST_CALL		111840						
ANR	112131	Symbol	opline -> result_type		111840						
ANR	112132	Symbol	opline -> op2 . num		111840						
ANR	112133	Symbol	get_next_op		111840						
ANR	112134	Symbol	ZEND_RETURN		111840						
ANR	112135	Symbol	CG		111840						
ANR	112136	Symbol	active_op_array		111840						
ANR	112137	Symbol	* loop_var		111840						
ANR	112138	Symbol	ZEND_NOP		111840						
ANR	112139	Symbol	opline -> op1_type		111840						
ANR	112140	Symbol	loop_var -> u . brk_cont_offset		111840						
ANR	112141	Symbol	depth		111840						
ANR	112142	Symbol	* opline		111840						
ANR	112143	Symbol	opline -> opcode		111840						
ANR	112144	Symbol	opline -> op1 . num		111840						
ANR	112145	Symbol	zend_stack_base		111840						
ANR	112146	Symbol	IS_VAR		111840						
ANR	112147	Symbol	opline -> result . var		111840						
ANR	112148	Symbol	base		111840						
ANR	112149	Symbol	loop_var -> u		111840						
ANR	112150	Function	zend_handle_loops_and_finally	3563:0:103421:103565							
ANR	112151	FunctionDef	zend_handle_loops_and_finally ()		112150	0					
ANR	112152	CompoundStatement		3564:0:103478:103565	112150	0					
ANR	112153	ReturnStatement	return zend_handle_loops_and_finally_ex ( zend_stack_count ( & CG ( loop_var_stack ) ) + 1 ) ;	3565:1:103481:103563	112150	0	True				
ANR	112154	CallExpression	zend_handle_loops_and_finally_ex ( zend_stack_count ( & CG ( loop_var_stack ) ) + 1 )		112150	0					
ANR	112155	Callee	zend_handle_loops_and_finally_ex		112150	0					
ANR	112156	Identifier	zend_handle_loops_and_finally_ex		112150	0					
ANR	112157	ArgumentList	zend_stack_count ( & CG ( loop_var_stack ) ) + 1		112150	1					
ANR	112158	Argument	zend_stack_count ( & CG ( loop_var_stack ) ) + 1		112150	0					
ANR	112159	AdditiveExpression	zend_stack_count ( & CG ( loop_var_stack ) ) + 1		112150	0		+			
ANR	112160	CallExpression	zend_stack_count ( & CG ( loop_var_stack ) )		112150	0					
ANR	112161	Callee	zend_stack_count		112150	0					
ANR	112162	Identifier	zend_stack_count		112150	0					
ANR	112163	ArgumentList	& CG ( loop_var_stack )		112150	1					
ANR	112164	Argument	& CG ( loop_var_stack )		112150	0					
ANR	112165	UnaryOperationExpression	& CG ( loop_var_stack )		112150	0					
ANR	112166	UnaryOperator	&		112150	0					
ANR	112167	CallExpression	CG ( loop_var_stack )		112150	1					
ANR	112168	Callee	CG		112150	0					
ANR	112169	Identifier	CG		112150	0					
ANR	112170	ArgumentList	loop_var_stack		112150	1					
ANR	112171	Argument	loop_var_stack		112150	0					
ANR	112172	Identifier	loop_var_stack		112150	0					
ANR	112173	PrimaryExpression	1		112150	1					
ANR	112174	ReturnType	static int		112150	1					
ANR	112175	Identifier	zend_handle_loops_and_finally		112150	2					
ANR	112176	ParameterList			112150	3					
ANR	112177	CFGEntryNode	ENTRY		112150		True				
ANR	112178	CFGExitNode	EXIT		112150		True				
ANR	112179	Symbol	zend_handle_loops_and_finally_ex		112150						
ANR	112180	Symbol	loop_var_stack		112150						
ANR	112181	Symbol	zend_stack_count		112150						
ANR	112182	Symbol	& CG		112150						
ANR	112183	Function	zend_compile_return	3569:0:103578:104862							
ANR	112184	FunctionDef	zend_compile_return (zend_ast * ast)		112183	0					
ANR	112185	CompoundStatement		3570:0:103628:104862	112183	0					
ANR	112186	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	3571:1:103631:103665	112183	0	True				
ANR	112187	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		112183	0					
ANR	112188	IdentifierDeclType	zend_ast *		112183	0					
ANR	112189	Identifier	expr_ast		112183	1					
ANR	112190	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		112183	2		=			
ANR	112191	Identifier	expr_ast		112183	0					
ANR	112192	ArrayIndexing	ast -> child [ 0 ]		112183	1					
ANR	112193	PtrMemberAccess	ast -> child		112183	0					
ANR	112194	Identifier	ast		112183	0					
ANR	112195	Identifier	child		112183	1					
ANR	112196	PrimaryExpression	0		112183	1					
ANR	112197	IdentifierDeclStatement	zend_bool by_ref = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0 ;	3572:1:103668:103751	112183	1	True				
ANR	112198	IdentifierDecl	by_ref = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		112183	0					
ANR	112199	IdentifierDeclType	zend_bool		112183	0					
ANR	112200	Identifier	by_ref		112183	1					
ANR	112201	AssignmentExpression	by_ref = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		112183	2		=			
ANR	112202	Identifier	by_ref		112183	0					
ANR	112203	EqualityExpression	( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		112183	1		!=			
ANR	112204	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE		112183	0		&			
ANR	112205	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		112183	0					
ANR	112206	CallExpression	CG ( active_op_array )		112183	0					
ANR	112207	Callee	CG		112183	0					
ANR	112208	Identifier	CG		112183	0					
ANR	112209	ArgumentList	active_op_array		112183	1					
ANR	112210	Argument	active_op_array		112183	0					
ANR	112211	Identifier	active_op_array		112183	0					
ANR	112212	Identifier	fn_flags		112183	1					
ANR	112213	Identifier	ZEND_ACC_RETURN_REFERENCE		112183	1					
ANR	112214	PrimaryExpression	0		112183	1					
ANR	112215	IdentifierDeclStatement	znode expr_node ;	3574:1:103755:103770	112183	2	True				
ANR	112216	IdentifierDecl	expr_node		112183	0					
ANR	112217	IdentifierDeclType	znode		112183	0					
ANR	112218	Identifier	expr_node		112183	1					
ANR	112219	IdentifierDeclStatement	zend_op * opline ;	3575:1:103773:103788	112183	3	True				
ANR	112220	IdentifierDecl	* opline		112183	0					
ANR	112221	IdentifierDeclType	zend_op *		112183	0					
ANR	112222	Identifier	opline		112183	1					
ANR	112223	IfStatement	if ( ! expr_ast )		112183	4					
ANR	112224	Condition	! expr_ast	3577:5:103796:103804	112183	0	True				
ANR	112225	UnaryOperationExpression	! expr_ast		112183	0					
ANR	112226	UnaryOperator	!		112183	0					
ANR	112227	Identifier	expr_ast		112183	1					
ANR	112228	CompoundStatement		8:16:178:178	112183	1					
ANR	112229	ExpressionStatement	expr_node . op_type = IS_CONST	3578:2:103811:103839	112183	0	True				
ANR	112230	AssignmentExpression	expr_node . op_type = IS_CONST		112183	0		=			
ANR	112231	MemberAccess	expr_node . op_type		112183	0					
ANR	112232	Identifier	expr_node		112183	0					
ANR	112233	Identifier	op_type		112183	1					
ANR	112234	Identifier	IS_CONST		112183	1					
ANR	112235	ExpressionStatement	ZVAL_NULL ( & expr_node . u . constant )	3579:2:103843:103875	112183	1	True				
ANR	112236	CallExpression	ZVAL_NULL ( & expr_node . u . constant )		112183	0					
ANR	112237	Callee	ZVAL_NULL		112183	0					
ANR	112238	Identifier	ZVAL_NULL		112183	0					
ANR	112239	ArgumentList	& expr_node . u . constant		112183	1					
ANR	112240	Argument	& expr_node . u . constant		112183	0					
ANR	112241	UnaryOperationExpression	& expr_node . u . constant		112183	0					
ANR	112242	UnaryOperator	&		112183	0					
ANR	112243	MemberAccess	expr_node . u . constant		112183	1					
ANR	112244	MemberAccess	expr_node . u		112183	0					
ANR	112245	Identifier	expr_node		112183	0					
ANR	112246	Identifier	u		112183	1					
ANR	112247	Identifier	constant		112183	1					
ANR	112248	ElseStatement	else		112183	0					
ANR	112249	IfStatement	if ( by_ref && zend_is_variable ( expr_ast ) && ! zend_is_call ( expr_ast ) )		112183	0					
ANR	112250	Condition	by_ref && zend_is_variable ( expr_ast ) && ! zend_is_call ( expr_ast )	3580:12:103889:103951	112183	0	True				
ANR	112251	AndExpression	by_ref && zend_is_variable ( expr_ast ) && ! zend_is_call ( expr_ast )		112183	0		&&			
ANR	112252	Identifier	by_ref		112183	0					
ANR	112253	AndExpression	zend_is_variable ( expr_ast ) && ! zend_is_call ( expr_ast )		112183	1		&&			
ANR	112254	CallExpression	zend_is_variable ( expr_ast )		112183	0					
ANR	112255	Callee	zend_is_variable		112183	0					
ANR	112256	Identifier	zend_is_variable		112183	0					
ANR	112257	ArgumentList	expr_ast		112183	1					
ANR	112258	Argument	expr_ast		112183	0					
ANR	112259	Identifier	expr_ast		112183	0					
ANR	112260	UnaryOperationExpression	! zend_is_call ( expr_ast )		112183	1					
ANR	112261	UnaryOperator	!		112183	0					
ANR	112262	CallExpression	zend_is_call ( expr_ast )		112183	1					
ANR	112263	Callee	zend_is_call		112183	0					
ANR	112264	Identifier	zend_is_call		112183	0					
ANR	112265	ArgumentList	expr_ast		112183	1					
ANR	112266	Argument	expr_ast		112183	0					
ANR	112267	Identifier	expr_ast		112183	0					
ANR	112268	CompoundStatement		11:77:325:325	112183	1					
ANR	112269	ExpressionStatement	"zend_compile_var ( & expr_node , expr_ast , BP_VAR_REF )"	3581:2:103958:104008	112183	0	True				
ANR	112270	CallExpression	"zend_compile_var ( & expr_node , expr_ast , BP_VAR_REF )"		112183	0					
ANR	112271	Callee	zend_compile_var		112183	0					
ANR	112272	Identifier	zend_compile_var		112183	0					
ANR	112273	ArgumentList	& expr_node		112183	1					
ANR	112274	Argument	& expr_node		112183	0					
ANR	112275	UnaryOperationExpression	& expr_node		112183	0					
ANR	112276	UnaryOperator	&		112183	0					
ANR	112277	Identifier	expr_node		112183	1					
ANR	112278	Argument	expr_ast		112183	1					
ANR	112279	Identifier	expr_ast		112183	0					
ANR	112280	Argument	BP_VAR_REF		112183	2					
ANR	112281	Identifier	BP_VAR_REF		112183	0					
ANR	112282	ElseStatement	else		112183	0					
ANR	112283	CompoundStatement		13:8:389:389	112183	0					
ANR	112284	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	3583:2:104022:104061	112183	0	True				
ANR	112285	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		112183	0					
ANR	112286	Callee	zend_compile_expr		112183	0					
ANR	112287	Identifier	zend_compile_expr		112183	0					
ANR	112288	ArgumentList	& expr_node		112183	1					
ANR	112289	Argument	& expr_node		112183	0					
ANR	112290	UnaryOperationExpression	& expr_node		112183	0					
ANR	112291	UnaryOperator	&		112183	0					
ANR	112292	Identifier	expr_node		112183	1					
ANR	112293	Argument	expr_ast		112183	1					
ANR	112294	Identifier	expr_ast		112183	0					
ANR	112295	IfStatement	if ( CG ( context ) . in_finally )		112183	5					
ANR	112296	Condition	CG ( context ) . in_finally	3586:5:104072:104093	112183	0	True				
ANR	112297	MemberAccess	CG ( context ) . in_finally		112183	0					
ANR	112298	CallExpression	CG ( context )		112183	0					
ANR	112299	Callee	CG		112183	0					
ANR	112300	Identifier	CG		112183	0					
ANR	112301	ArgumentList	context		112183	1					
ANR	112302	Argument	context		112183	0					
ANR	112303	Identifier	context		112183	0					
ANR	112304	Identifier	in_finally		112183	1					
ANR	112305	CompoundStatement		17:29:467:467	112183	1					
ANR	112306	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_DISCARD_EXCEPTION , NULL , NULL )"	3587:2:104100:104163	112183	0	True				
ANR	112307	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_DISCARD_EXCEPTION , NULL , NULL )"		112183	0		=			
ANR	112308	Identifier	opline		112183	0					
ANR	112309	CallExpression	"zend_emit_op ( NULL , ZEND_DISCARD_EXCEPTION , NULL , NULL )"		112183	1					
ANR	112310	Callee	zend_emit_op		112183	0					
ANR	112311	Identifier	zend_emit_op		112183	0					
ANR	112312	ArgumentList	NULL		112183	1					
ANR	112313	Argument	NULL		112183	0					
ANR	112314	Identifier	NULL		112183	0					
ANR	112315	Argument	ZEND_DISCARD_EXCEPTION		112183	1					
ANR	112316	Identifier	ZEND_DISCARD_EXCEPTION		112183	0					
ANR	112317	Argument	NULL		112183	2					
ANR	112318	Identifier	NULL		112183	0					
ANR	112319	Argument	NULL		112183	3					
ANR	112320	Identifier	NULL		112183	0					
ANR	112321	ExpressionStatement	opline -> op1_type = IS_TMP_VAR	3588:2:104167:104196	112183	1	True				
ANR	112322	AssignmentExpression	opline -> op1_type = IS_TMP_VAR		112183	0		=			
ANR	112323	PtrMemberAccess	opline -> op1_type		112183	0					
ANR	112324	Identifier	opline		112183	0					
ANR	112325	Identifier	op1_type		112183	1					
ANR	112326	Identifier	IS_TMP_VAR		112183	1					
ANR	112327	ExpressionStatement	opline -> op1 . var = CG ( context ) . fast_call_var	3589:2:104200:104243	112183	2	True				
ANR	112328	AssignmentExpression	opline -> op1 . var = CG ( context ) . fast_call_var		112183	0		=			
ANR	112329	MemberAccess	opline -> op1 . var		112183	0					
ANR	112330	PtrMemberAccess	opline -> op1		112183	0					
ANR	112331	Identifier	opline		112183	0					
ANR	112332	Identifier	op1		112183	1					
ANR	112333	Identifier	var		112183	1					
ANR	112334	MemberAccess	CG ( context ) . fast_call_var		112183	1					
ANR	112335	CallExpression	CG ( context )		112183	0					
ANR	112336	Callee	CG		112183	0					
ANR	112337	Identifier	CG		112183	0					
ANR	112338	ArgumentList	context		112183	1					
ANR	112339	Argument	context		112183	0					
ANR	112340	Identifier	context		112183	0					
ANR	112341	Identifier	fast_call_var		112183	1					
ANR	112342	IfStatement	if ( ! ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_GENERATOR ) && CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE )		112183	6					
ANR	112343	Condition	! ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_GENERATOR ) && CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE	3593:5:104307:104419	112183	0	True				
ANR	112344	AndExpression	! ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_GENERATOR ) && CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE		112183	0		&&			
ANR	112345	UnaryOperationExpression	! ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_GENERATOR )		112183	0					
ANR	112346	UnaryOperator	!		112183	0					
ANR	112347	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_GENERATOR		112183	1		&			
ANR	112348	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		112183	0					
ANR	112349	CallExpression	CG ( active_op_array )		112183	0					
ANR	112350	Callee	CG		112183	0					
ANR	112351	Identifier	CG		112183	0					
ANR	112352	ArgumentList	active_op_array		112183	1					
ANR	112353	Argument	active_op_array		112183	0					
ANR	112354	Identifier	active_op_array		112183	0					
ANR	112355	Identifier	fn_flags		112183	1					
ANR	112356	Identifier	ZEND_ACC_GENERATOR		112183	1					
ANR	112357	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE		112183	1		&			
ANR	112358	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		112183	0					
ANR	112359	CallExpression	CG ( active_op_array )		112183	0					
ANR	112360	Callee	CG		112183	0					
ANR	112361	Identifier	CG		112183	0					
ANR	112362	ArgumentList	active_op_array		112183	1					
ANR	112363	Argument	active_op_array		112183	0					
ANR	112364	Identifier	active_op_array		112183	0					
ANR	112365	Identifier	fn_flags		112183	1					
ANR	112366	Identifier	ZEND_ACC_HAS_RETURN_TYPE		112183	1					
ANR	112367	CompoundStatement		24:120:793:793	112183	1					
ANR	112368	ExpressionStatement	"zend_emit_return_type_check ( expr_ast ? & expr_node : NULL , CG ( active_op_array ) -> arg_info - 1 )"	3594:2:104426:104518	112183	0	True				
ANR	112369	CallExpression	"zend_emit_return_type_check ( expr_ast ? & expr_node : NULL , CG ( active_op_array ) -> arg_info - 1 )"		112183	0					
ANR	112370	Callee	zend_emit_return_type_check		112183	0					
ANR	112371	Identifier	zend_emit_return_type_check		112183	0					
ANR	112372	ArgumentList	expr_ast ? & expr_node : NULL		112183	1					
ANR	112373	Argument	expr_ast ? & expr_node : NULL		112183	0					
ANR	112374	ConditionalExpression	expr_ast ? & expr_node : NULL		112183	0					
ANR	112375	Condition	expr_ast		112183	0					
ANR	112376	Identifier	expr_ast		112183	0					
ANR	112377	UnaryOperationExpression	& expr_node		112183	1					
ANR	112378	UnaryOperator	&		112183	0					
ANR	112379	Identifier	expr_node		112183	1					
ANR	112380	Identifier	NULL		112183	2					
ANR	112381	Argument	CG ( active_op_array ) -> arg_info - 1		112183	1					
ANR	112382	AdditiveExpression	CG ( active_op_array ) -> arg_info - 1		112183	0		-			
ANR	112383	PtrMemberAccess	CG ( active_op_array ) -> arg_info		112183	0					
ANR	112384	CallExpression	CG ( active_op_array )		112183	0					
ANR	112385	Callee	CG		112183	0					
ANR	112386	Identifier	CG		112183	0					
ANR	112387	ArgumentList	active_op_array		112183	1					
ANR	112388	Argument	active_op_array		112183	0					
ANR	112389	Identifier	active_op_array		112183	0					
ANR	112390	Identifier	arg_info		112183	1					
ANR	112391	PrimaryExpression	1		112183	1					
ANR	112392	ExpressionStatement	zend_handle_loops_and_finally ( )	3597:1:104525:104556	112183	7	True				
ANR	112393	CallExpression	zend_handle_loops_and_finally ( )		112183	0					
ANR	112394	Callee	zend_handle_loops_and_finally		112183	0					
ANR	112395	Identifier	zend_handle_loops_and_finally		112183	0					
ANR	112396	ArgumentList			112183	1					
ANR	112397	ExpressionStatement	"opline = zend_emit_op ( NULL , by_ref ? ZEND_RETURN_BY_REF : ZEND_RETURN , & expr_node , NULL )"	3599:1:104560:104650	112183	8	True				
ANR	112398	AssignmentExpression	"opline = zend_emit_op ( NULL , by_ref ? ZEND_RETURN_BY_REF : ZEND_RETURN , & expr_node , NULL )"		112183	0		=			
ANR	112399	Identifier	opline		112183	0					
ANR	112400	CallExpression	"zend_emit_op ( NULL , by_ref ? ZEND_RETURN_BY_REF : ZEND_RETURN , & expr_node , NULL )"		112183	1					
ANR	112401	Callee	zend_emit_op		112183	0					
ANR	112402	Identifier	zend_emit_op		112183	0					
ANR	112403	ArgumentList	NULL		112183	1					
ANR	112404	Argument	NULL		112183	0					
ANR	112405	Identifier	NULL		112183	0					
ANR	112406	Argument	by_ref ? ZEND_RETURN_BY_REF : ZEND_RETURN		112183	1					
ANR	112407	ConditionalExpression	by_ref ? ZEND_RETURN_BY_REF : ZEND_RETURN		112183	0					
ANR	112408	Condition	by_ref		112183	0					
ANR	112409	Identifier	by_ref		112183	0					
ANR	112410	Identifier	ZEND_RETURN_BY_REF		112183	1					
ANR	112411	Identifier	ZEND_RETURN		112183	2					
ANR	112412	Argument	& expr_node		112183	2					
ANR	112413	UnaryOperationExpression	& expr_node		112183	0					
ANR	112414	UnaryOperator	&		112183	0					
ANR	112415	Identifier	expr_node		112183	1					
ANR	112416	Argument	NULL		112183	3					
ANR	112417	Identifier	NULL		112183	0					
ANR	112418	IfStatement	if ( expr_ast )		112183	9					
ANR	112419	Condition	expr_ast	3602:5:104658:104665	112183	0	True				
ANR	112420	Identifier	expr_ast		112183	0					
ANR	112421	CompoundStatement		33:15:1039:1039	112183	1					
ANR	112422	IfStatement	if ( zend_is_call ( expr_ast ) )		112183	0					
ANR	112423	Condition	zend_is_call ( expr_ast )	3603:6:104676:104697	112183	0	True				
ANR	112424	CallExpression	zend_is_call ( expr_ast )		112183	0					
ANR	112425	Callee	zend_is_call		112183	0					
ANR	112426	Identifier	zend_is_call		112183	0					
ANR	112427	ArgumentList	expr_ast		112183	1					
ANR	112428	Argument	expr_ast		112183	0					
ANR	112429	Identifier	expr_ast		112183	0					
ANR	112430	CompoundStatement		34:30:1071:1071	112183	1					
ANR	112431	ExpressionStatement	opline -> extended_value = ZEND_RETURNS_FUNCTION	3604:3:104705:104751	112183	0	True				
ANR	112432	AssignmentExpression	opline -> extended_value = ZEND_RETURNS_FUNCTION		112183	0		=			
ANR	112433	PtrMemberAccess	opline -> extended_value		112183	0					
ANR	112434	Identifier	opline		112183	0					
ANR	112435	Identifier	extended_value		112183	1					
ANR	112436	Identifier	ZEND_RETURNS_FUNCTION		112183	1					
ANR	112437	ElseStatement	else		112183	0					
ANR	112438	IfStatement	if ( by_ref && ! zend_is_variable ( expr_ast ) )		112183	0					
ANR	112439	Condition	by_ref && ! zend_is_variable ( expr_ast )	3605:13:104766:104802	112183	0	True				
ANR	112440	AndExpression	by_ref && ! zend_is_variable ( expr_ast )		112183	0		&&			
ANR	112441	Identifier	by_ref		112183	0					
ANR	112442	UnaryOperationExpression	! zend_is_variable ( expr_ast )		112183	1					
ANR	112443	UnaryOperator	!		112183	0					
ANR	112444	CallExpression	zend_is_variable ( expr_ast )		112183	1					
ANR	112445	Callee	zend_is_variable		112183	0					
ANR	112446	Identifier	zend_is_variable		112183	0					
ANR	112447	ArgumentList	expr_ast		112183	1					
ANR	112448	Argument	expr_ast		112183	0					
ANR	112449	Identifier	expr_ast		112183	0					
ANR	112450	CompoundStatement		36:52:1176:1176	112183	1					
ANR	112451	ExpressionStatement	opline -> extended_value = ZEND_RETURNS_VALUE	3606:3:104810:104853	112183	0	True				
ANR	112452	AssignmentExpression	opline -> extended_value = ZEND_RETURNS_VALUE		112183	0		=			
ANR	112453	PtrMemberAccess	opline -> extended_value		112183	0					
ANR	112454	Identifier	opline		112183	0					
ANR	112455	Identifier	extended_value		112183	1					
ANR	112456	Identifier	ZEND_RETURNS_VALUE		112183	1					
ANR	112457	ReturnType	void		112183	1					
ANR	112458	Identifier	zend_compile_return		112183	2					
ANR	112459	ParameterList	zend_ast * ast		112183	3					
ANR	112460	Parameter	zend_ast * ast	3569:25:103603:103615	112183	0	True				
ANR	112461	ParameterType	zend_ast *		112183	0					
ANR	112462	Identifier	ast		112183	1					
ANR	112463	CFGEntryNode	ENTRY		112183		True				
ANR	112464	CFGExitNode	EXIT		112183		True				
ANR	112465	Symbol	opline -> op1		112183						
ANR	112466	Symbol	ast		112183						
ANR	112467	Symbol	* CG		112183						
ANR	112468	Symbol	& expr_node		112183						
ANR	112469	Symbol	CG ( context ) . fast_call_var		112183						
ANR	112470	Symbol	opline -> extended_value		112183						
ANR	112471	Symbol	* ast		112183						
ANR	112472	Symbol	opline		112183						
ANR	112473	Symbol	ZEND_RETURNS_VALUE		112183						
ANR	112474	Symbol	* * ast		112183						
ANR	112475	Symbol	ZEND_RETURN_BY_REF		112183						
ANR	112476	Symbol	context		112183						
ANR	112477	Symbol	expr_node . op_type		112183						
ANR	112478	Symbol	expr_node . u		112183						
ANR	112479	Symbol	opline -> op1 . var		112183						
ANR	112480	Symbol	ZEND_ACC_GENERATOR		112183						
ANR	112481	Symbol	BP_VAR_REF		112183						
ANR	112482	Symbol	IS_TMP_VAR		112183						
ANR	112483	Symbol	CG ( context ) . in_finally		112183						
ANR	112484	Symbol	IS_CONST		112183						
ANR	112485	Symbol	zend_is_variable		112183						
ANR	112486	Symbol	NULL		112183						
ANR	112487	Symbol	ZEND_RETURN		112183						
ANR	112488	Symbol	CG		112183						
ANR	112489	Symbol	zend_is_call		112183						
ANR	112490	Symbol	active_op_array		112183						
ANR	112491	Symbol	ZEND_ACC_HAS_RETURN_TYPE		112183						
ANR	112492	Symbol	expr_ast		112183						
ANR	112493	Symbol	& expr_node . u . constant		112183						
ANR	112494	Symbol	CG ( active_op_array ) -> fn_flags		112183						
ANR	112495	Symbol	opline -> op1_type		112183						
ANR	112496	Symbol	ZEND_RETURNS_FUNCTION		112183						
ANR	112497	Symbol	expr_node		112183						
ANR	112498	Symbol	CG ( active_op_array ) -> arg_info		112183						
ANR	112499	Symbol	& expr_node . u		112183						
ANR	112500	Symbol	* opline		112183						
ANR	112501	Symbol	ZEND_ACC_RETURN_REFERENCE		112183						
ANR	112502	Symbol	* ast -> child		112183						
ANR	112503	Symbol	by_ref		112183						
ANR	112504	Symbol	ast -> child		112183						
ANR	112505	Symbol	ZEND_DISCARD_EXCEPTION		112183						
ANR	112506	Symbol	zend_emit_op		112183						
ANR	112507	Function	zend_compile_echo	3612:0:104875:105130							
ANR	112508	FunctionDef	zend_compile_echo (zend_ast * ast)		112507	0					
ANR	112509	CompoundStatement		3613:0:104923:105130	112507	0					
ANR	112510	IdentifierDeclStatement	zend_op * opline ;	3614:1:104926:104941	112507	0	True				
ANR	112511	IdentifierDecl	* opline		112507	0					
ANR	112512	IdentifierDeclType	zend_op *		112507	0					
ANR	112513	Identifier	opline		112507	1					
ANR	112514	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	3615:1:104944:104978	112507	1	True				
ANR	112515	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		112507	0					
ANR	112516	IdentifierDeclType	zend_ast *		112507	0					
ANR	112517	Identifier	expr_ast		112507	1					
ANR	112518	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		112507	2		=			
ANR	112519	Identifier	expr_ast		112507	0					
ANR	112520	ArrayIndexing	ast -> child [ 0 ]		112507	1					
ANR	112521	PtrMemberAccess	ast -> child		112507	0					
ANR	112522	Identifier	ast		112507	0					
ANR	112523	Identifier	child		112507	1					
ANR	112524	PrimaryExpression	0		112507	1					
ANR	112525	IdentifierDeclStatement	znode expr_node ;	3617:1:104982:104997	112507	2	True				
ANR	112526	IdentifierDecl	expr_node		112507	0					
ANR	112527	IdentifierDeclType	znode		112507	0					
ANR	112528	Identifier	expr_node		112507	1					
ANR	112529	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	3618:1:105000:105039	112507	3	True				
ANR	112530	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		112507	0					
ANR	112531	Callee	zend_compile_expr		112507	0					
ANR	112532	Identifier	zend_compile_expr		112507	0					
ANR	112533	ArgumentList	& expr_node		112507	1					
ANR	112534	Argument	& expr_node		112507	0					
ANR	112535	UnaryOperationExpression	& expr_node		112507	0					
ANR	112536	UnaryOperator	&		112507	0					
ANR	112537	Identifier	expr_node		112507	1					
ANR	112538	Argument	expr_ast		112507	1					
ANR	112539	Identifier	expr_ast		112507	0					
ANR	112540	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_ECHO , & expr_node , NULL )"	3620:1:105043:105099	112507	4	True				
ANR	112541	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_ECHO , & expr_node , NULL )"		112507	0		=			
ANR	112542	Identifier	opline		112507	0					
ANR	112543	CallExpression	"zend_emit_op ( NULL , ZEND_ECHO , & expr_node , NULL )"		112507	1					
ANR	112544	Callee	zend_emit_op		112507	0					
ANR	112545	Identifier	zend_emit_op		112507	0					
ANR	112546	ArgumentList	NULL		112507	1					
ANR	112547	Argument	NULL		112507	0					
ANR	112548	Identifier	NULL		112507	0					
ANR	112549	Argument	ZEND_ECHO		112507	1					
ANR	112550	Identifier	ZEND_ECHO		112507	0					
ANR	112551	Argument	& expr_node		112507	2					
ANR	112552	UnaryOperationExpression	& expr_node		112507	0					
ANR	112553	UnaryOperator	&		112507	0					
ANR	112554	Identifier	expr_node		112507	1					
ANR	112555	Argument	NULL		112507	3					
ANR	112556	Identifier	NULL		112507	0					
ANR	112557	ExpressionStatement	opline -> extended_value = 0	3621:1:105102:105128	112507	5	True				
ANR	112558	AssignmentExpression	opline -> extended_value = 0		112507	0		=			
ANR	112559	PtrMemberAccess	opline -> extended_value		112507	0					
ANR	112560	Identifier	opline		112507	0					
ANR	112561	Identifier	extended_value		112507	1					
ANR	112562	PrimaryExpression	0		112507	1					
ANR	112563	ReturnType	void		112507	1					
ANR	112564	Identifier	zend_compile_echo		112507	2					
ANR	112565	ParameterList	zend_ast * ast		112507	3					
ANR	112566	Parameter	zend_ast * ast	3612:23:104898:104910	112507	0	True				
ANR	112567	ParameterType	zend_ast *		112507	0					
ANR	112568	Identifier	ast		112507	1					
ANR	112569	CFGEntryNode	ENTRY		112507		True				
ANR	112570	CFGExitNode	EXIT		112507		True				
ANR	112571	Symbol	ast		112507						
ANR	112572	Symbol	NULL		112507						
ANR	112573	Symbol	ZEND_ECHO		112507						
ANR	112574	Symbol	expr_ast		112507						
ANR	112575	Symbol	& expr_node		112507						
ANR	112576	Symbol	opline -> extended_value		112507						
ANR	112577	Symbol	expr_node		112507						
ANR	112578	Symbol	opline		112507						
ANR	112579	Symbol	* ast		112507						
ANR	112580	Symbol	* opline		112507						
ANR	112581	Symbol	* * ast		112507						
ANR	112582	Symbol	* ast -> child		112507						
ANR	112583	Symbol	ast -> child		112507						
ANR	112584	Symbol	zend_emit_op		112507						
ANR	112585	Function	zend_compile_throw	3625:0:105143:105344							
ANR	112586	FunctionDef	zend_compile_throw (zend_ast * ast)		112585	0					
ANR	112587	CompoundStatement		3626:0:105192:105344	112585	0					
ANR	112588	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	3627:1:105195:105229	112585	0	True				
ANR	112589	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		112585	0					
ANR	112590	IdentifierDeclType	zend_ast *		112585	0					
ANR	112591	Identifier	expr_ast		112585	1					
ANR	112592	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		112585	2		=			
ANR	112593	Identifier	expr_ast		112585	0					
ANR	112594	ArrayIndexing	ast -> child [ 0 ]		112585	1					
ANR	112595	PtrMemberAccess	ast -> child		112585	0					
ANR	112596	Identifier	ast		112585	0					
ANR	112597	Identifier	child		112585	1					
ANR	112598	PrimaryExpression	0		112585	1					
ANR	112599	IdentifierDeclStatement	znode expr_node ;	3629:1:105233:105248	112585	1	True				
ANR	112600	IdentifierDecl	expr_node		112585	0					
ANR	112601	IdentifierDeclType	znode		112585	0					
ANR	112602	Identifier	expr_node		112585	1					
ANR	112603	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	3630:1:105251:105290	112585	2	True				
ANR	112604	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		112585	0					
ANR	112605	Callee	zend_compile_expr		112585	0					
ANR	112606	Identifier	zend_compile_expr		112585	0					
ANR	112607	ArgumentList	& expr_node		112585	1					
ANR	112608	Argument	& expr_node		112585	0					
ANR	112609	UnaryOperationExpression	& expr_node		112585	0					
ANR	112610	UnaryOperator	&		112585	0					
ANR	112611	Identifier	expr_node		112585	1					
ANR	112612	Argument	expr_ast		112585	1					
ANR	112613	Identifier	expr_ast		112585	0					
ANR	112614	ExpressionStatement	"zend_emit_op ( NULL , ZEND_THROW , & expr_node , NULL )"	3632:1:105294:105342	112585	3	True				
ANR	112615	CallExpression	"zend_emit_op ( NULL , ZEND_THROW , & expr_node , NULL )"		112585	0					
ANR	112616	Callee	zend_emit_op		112585	0					
ANR	112617	Identifier	zend_emit_op		112585	0					
ANR	112618	ArgumentList	NULL		112585	1					
ANR	112619	Argument	NULL		112585	0					
ANR	112620	Identifier	NULL		112585	0					
ANR	112621	Argument	ZEND_THROW		112585	1					
ANR	112622	Identifier	ZEND_THROW		112585	0					
ANR	112623	Argument	& expr_node		112585	2					
ANR	112624	UnaryOperationExpression	& expr_node		112585	0					
ANR	112625	UnaryOperator	&		112585	0					
ANR	112626	Identifier	expr_node		112585	1					
ANR	112627	Argument	NULL		112585	3					
ANR	112628	Identifier	NULL		112585	0					
ANR	112629	ReturnType	void		112585	1					
ANR	112630	Identifier	zend_compile_throw		112585	2					
ANR	112631	ParameterList	zend_ast * ast		112585	3					
ANR	112632	Parameter	zend_ast * ast	3625:24:105167:105179	112585	0	True				
ANR	112633	ParameterType	zend_ast *		112585	0					
ANR	112634	Identifier	ast		112585	1					
ANR	112635	CFGEntryNode	ENTRY		112585		True				
ANR	112636	CFGExitNode	EXIT		112585		True				
ANR	112637	Symbol	expr_node		112585						
ANR	112638	Symbol	ast		112585						
ANR	112639	Symbol	* ast		112585						
ANR	112640	Symbol	NULL		112585						
ANR	112641	Symbol	* * ast		112585						
ANR	112642	Symbol	* ast -> child		112585						
ANR	112643	Symbol	expr_ast		112585						
ANR	112644	Symbol	ast -> child		112585						
ANR	112645	Symbol	& expr_node		112585						
ANR	112646	Symbol	ZEND_THROW		112585						
ANR	112647	Function	zend_compile_break_continue	3636:0:105357:106705							
ANR	112648	FunctionDef	zend_compile_break_continue (zend_ast * ast)		112647	0					
ANR	112649	CompoundStatement		3637:0:105415:106705	112647	0					
ANR	112650	IdentifierDeclStatement	zend_ast * depth_ast = ast -> child [ 0 ] ;	3638:1:105418:105453	112647	0	True				
ANR	112651	IdentifierDecl	* depth_ast = ast -> child [ 0 ]		112647	0					
ANR	112652	IdentifierDeclType	zend_ast *		112647	0					
ANR	112653	Identifier	depth_ast		112647	1					
ANR	112654	AssignmentExpression	* depth_ast = ast -> child [ 0 ]		112647	2		=			
ANR	112655	Identifier	depth_ast		112647	0					
ANR	112656	ArrayIndexing	ast -> child [ 0 ]		112647	1					
ANR	112657	PtrMemberAccess	ast -> child		112647	0					
ANR	112658	Identifier	ast		112647	0					
ANR	112659	Identifier	child		112647	1					
ANR	112660	PrimaryExpression	0		112647	1					
ANR	112661	IdentifierDeclStatement	zend_op * opline ;	3640:1:105457:105472	112647	1	True				
ANR	112662	IdentifierDecl	* opline		112647	0					
ANR	112663	IdentifierDeclType	zend_op *		112647	0					
ANR	112664	Identifier	opline		112647	1					
ANR	112665	IdentifierDeclStatement	int depth ;	3641:1:105475:105484	112647	2	True				
ANR	112666	IdentifierDecl	depth		112647	0					
ANR	112667	IdentifierDeclType	int		112647	0					
ANR	112668	Identifier	depth		112647	1					
ANR	112669	ExpressionStatement	ZEND_ASSERT ( ast -> kind == ZEND_AST_BREAK || ast -> kind == ZEND_AST_CONTINUE )	3643:1:105488:105562	112647	3	True				
ANR	112670	CallExpression	ZEND_ASSERT ( ast -> kind == ZEND_AST_BREAK || ast -> kind == ZEND_AST_CONTINUE )		112647	0					
ANR	112671	Callee	ZEND_ASSERT		112647	0					
ANR	112672	Identifier	ZEND_ASSERT		112647	0					
ANR	112673	ArgumentList	ast -> kind == ZEND_AST_BREAK || ast -> kind == ZEND_AST_CONTINUE		112647	1					
ANR	112674	Argument	ast -> kind == ZEND_AST_BREAK || ast -> kind == ZEND_AST_CONTINUE		112647	0					
ANR	112675	OrExpression	ast -> kind == ZEND_AST_BREAK || ast -> kind == ZEND_AST_CONTINUE		112647	0		||			
ANR	112676	EqualityExpression	ast -> kind == ZEND_AST_BREAK		112647	0		==			
ANR	112677	PtrMemberAccess	ast -> kind		112647	0					
ANR	112678	Identifier	ast		112647	0					
ANR	112679	Identifier	kind		112647	1					
ANR	112680	Identifier	ZEND_AST_BREAK		112647	1					
ANR	112681	EqualityExpression	ast -> kind == ZEND_AST_CONTINUE		112647	1		==			
ANR	112682	PtrMemberAccess	ast -> kind		112647	0					
ANR	112683	Identifier	ast		112647	0					
ANR	112684	Identifier	kind		112647	1					
ANR	112685	Identifier	ZEND_AST_CONTINUE		112647	1					
ANR	112686	IfStatement	if ( depth_ast )		112647	4					
ANR	112687	Condition	depth_ast	3645:5:105570:105578	112647	0	True				
ANR	112688	Identifier	depth_ast		112647	0					
ANR	112689	CompoundStatement		10:2:169:183	112647	1					
ANR	112690	IdentifierDeclStatement	zval * depth_zv ;	3646:2:105585:105599	112647	0	True				
ANR	112691	IdentifierDecl	* depth_zv		112647	0					
ANR	112692	IdentifierDeclType	zval *		112647	0					
ANR	112693	Identifier	depth_zv		112647	1					
ANR	112694	IfStatement	if ( depth_ast -> kind != ZEND_AST_ZVAL )		112647	1					
ANR	112695	Condition	depth_ast -> kind != ZEND_AST_ZVAL	3647:6:105607:105638	112647	0	True				
ANR	112696	EqualityExpression	depth_ast -> kind != ZEND_AST_ZVAL		112647	0		!=			
ANR	112697	PtrMemberAccess	depth_ast -> kind		112647	0					
ANR	112698	Identifier	depth_ast		112647	0					
ANR	112699	Identifier	kind		112647	1					
ANR	112700	Identifier	ZEND_AST_ZVAL		112647	1					
ANR	112701	CompoundStatement		11:40:225:225	112647	1					
ANR	112702	Statement	zend_error_noreturn	3648:3:105646:105664	112647	0	True				
ANR	112703	Statement	(	3648:22:105665:105665	112647	1	True				
ANR	112704	Statement	E_COMPILE_ERROR	3648:23:105666:105680	112647	2	True				
ANR	112705	Statement	","	3648:38:105681:105681	112647	3	True				
ANR	112706	Statement	"""'%s' operator with non-constant operand """	3648:40:105683:105724	112647	4	True				
ANR	112707	Statement	"""is no longer supported"""	3649:4:105730:105753	112647	5	True				
ANR	112708	Statement	","	3649:28:105754:105754	112647	6	True				
ANR	112709	Statement	ast	3649:30:105756:105758	112647	7	True				
ANR	112710	Statement	->	3649:33:105759:105760	112647	8	True				
ANR	112711	Statement	kind	3649:35:105761:105764	112647	9	True				
ANR	112712	Statement	==	3649:40:105766:105767	112647	10	True				
ANR	112713	Statement	ZEND_AST_BREAK	3649:43:105769:105782	112647	11	True				
ANR	112714	Statement	?	3649:58:105784:105784	112647	12	True				
ANR	112715	Statement	"""break"""	3649:60:105786:105792	112647	13	True				
ANR	112716	Statement	:	3649:68:105794:105794	112647	14	True				
ANR	112717	Statement	"""continue"""	3649:70:105796:105805	112647	15	True				
ANR	112718	Statement	)	3649:80:105806:105806	112647	16	True				
ANR	112719	ExpressionStatement		3649:81:105807:105807	112647	17	True				
ANR	112720	ExpressionStatement	depth_zv = zend_ast_get_zval ( depth_ast )	3652:2:105816:105855	112647	2	True				
ANR	112721	AssignmentExpression	depth_zv = zend_ast_get_zval ( depth_ast )		112647	0		=			
ANR	112722	Identifier	depth_zv		112647	0					
ANR	112723	CallExpression	zend_ast_get_zval ( depth_ast )		112647	1					
ANR	112724	Callee	zend_ast_get_zval		112647	0					
ANR	112725	Identifier	zend_ast_get_zval		112647	0					
ANR	112726	ArgumentList	depth_ast		112647	1					
ANR	112727	Argument	depth_ast		112647	0					
ANR	112728	Identifier	depth_ast		112647	0					
ANR	112729	IfStatement	if ( Z_TYPE_P ( depth_zv ) != IS_LONG || Z_LVAL_P ( depth_zv ) < 1 )		112647	3					
ANR	112730	Condition	Z_TYPE_P ( depth_zv ) != IS_LONG || Z_LVAL_P ( depth_zv ) < 1	3653:6:105863:105917	112647	0	True				
ANR	112731	OrExpression	Z_TYPE_P ( depth_zv ) != IS_LONG || Z_LVAL_P ( depth_zv ) < 1		112647	0		||			
ANR	112732	EqualityExpression	Z_TYPE_P ( depth_zv ) != IS_LONG		112647	0		!=			
ANR	112733	CallExpression	Z_TYPE_P ( depth_zv )		112647	0					
ANR	112734	Callee	Z_TYPE_P		112647	0					
ANR	112735	Identifier	Z_TYPE_P		112647	0					
ANR	112736	ArgumentList	depth_zv		112647	1					
ANR	112737	Argument	depth_zv		112647	0					
ANR	112738	Identifier	depth_zv		112647	0					
ANR	112739	Identifier	IS_LONG		112647	1					
ANR	112740	RelationalExpression	Z_LVAL_P ( depth_zv ) < 1		112647	1		<			
ANR	112741	CallExpression	Z_LVAL_P ( depth_zv )		112647	0					
ANR	112742	Callee	Z_LVAL_P		112647	0					
ANR	112743	Identifier	Z_LVAL_P		112647	0					
ANR	112744	ArgumentList	depth_zv		112647	1					
ANR	112745	Argument	depth_zv		112647	0					
ANR	112746	Identifier	depth_zv		112647	0					
ANR	112747	PrimaryExpression	1		112647	1					
ANR	112748	CompoundStatement		17:63:504:504	112647	1					
ANR	112749	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""'%s' operator accepts only positive numbers"" , ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"" )"	3654:3:105925:106064	112647	0	True				
ANR	112750	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""'%s' operator accepts only positive numbers"" , ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"" )"		112647	0					
ANR	112751	Callee	zend_error_noreturn		112647	0					
ANR	112752	Identifier	zend_error_noreturn		112647	0					
ANR	112753	ArgumentList	E_COMPILE_ERROR		112647	1					
ANR	112754	Argument	E_COMPILE_ERROR		112647	0					
ANR	112755	Identifier	E_COMPILE_ERROR		112647	0					
ANR	112756	Argument	"""'%s' operator accepts only positive numbers"""		112647	1					
ANR	112757	PrimaryExpression	"""'%s' operator accepts only positive numbers"""		112647	0					
ANR	112758	Argument	"ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"""		112647	2					
ANR	112759	ConditionalExpression	"ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"""		112647	0					
ANR	112760	Condition	ast -> kind == ZEND_AST_BREAK		112647	0					
ANR	112761	EqualityExpression	ast -> kind == ZEND_AST_BREAK		112647	0		==			
ANR	112762	PtrMemberAccess	ast -> kind		112647	0					
ANR	112763	Identifier	ast		112647	0					
ANR	112764	Identifier	kind		112647	1					
ANR	112765	Identifier	ZEND_AST_BREAK		112647	1					
ANR	112766	PrimaryExpression	"""break"""		112647	1					
ANR	112767	PrimaryExpression	"""continue"""		112647	2					
ANR	112768	ExpressionStatement	depth = Z_LVAL_P ( depth_zv )	3658:2:106073:106099	112647	4	True				
ANR	112769	AssignmentExpression	depth = Z_LVAL_P ( depth_zv )		112647	0		=			
ANR	112770	Identifier	depth		112647	0					
ANR	112771	CallExpression	Z_LVAL_P ( depth_zv )		112647	1					
ANR	112772	Callee	Z_LVAL_P		112647	0					
ANR	112773	Identifier	Z_LVAL_P		112647	0					
ANR	112774	ArgumentList	depth_zv		112647	1					
ANR	112775	Argument	depth_zv		112647	0					
ANR	112776	Identifier	depth_zv		112647	0					
ANR	112777	ElseStatement	else		112647	0					
ANR	112778	CompoundStatement		23:8:693:693	112647	0					
ANR	112779	ExpressionStatement	depth = 1	3660:2:106113:106122	112647	0	True				
ANR	112780	AssignmentExpression	depth = 1		112647	0		=			
ANR	112781	Identifier	depth		112647	0					
ANR	112782	PrimaryExpression	1		112647	1					
ANR	112783	IfStatement	if ( CG ( context ) . current_brk_cont == - 1 )		112647	5					
ANR	112784	Condition	CG ( context ) . current_brk_cont == - 1	3663:5:106133:106166	112647	0	True				
ANR	112785	EqualityExpression	CG ( context ) . current_brk_cont == - 1		112647	0		==			
ANR	112786	MemberAccess	CG ( context ) . current_brk_cont		112647	0					
ANR	112787	CallExpression	CG ( context )		112647	0					
ANR	112788	Callee	CG		112647	0					
ANR	112789	Identifier	CG		112647	0					
ANR	112790	ArgumentList	context		112647	1					
ANR	112791	Argument	context		112647	0					
ANR	112792	Identifier	context		112647	0					
ANR	112793	Identifier	current_brk_cont		112647	1					
ANR	112794	UnaryOperationExpression	- 1		112647	1					
ANR	112795	UnaryOperator	-		112647	0					
ANR	112796	PrimaryExpression	1		112647	1					
ANR	112797	CompoundStatement		27:41:753:753	112647	1					
ANR	112798	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""'%s' not in the 'loop' or 'switch' context"" , ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"" )"	3664:2:106173:106310	112647	0	True				
ANR	112799	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""'%s' not in the 'loop' or 'switch' context"" , ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"" )"		112647	0					
ANR	112800	Callee	zend_error_noreturn		112647	0					
ANR	112801	Identifier	zend_error_noreturn		112647	0					
ANR	112802	ArgumentList	E_COMPILE_ERROR		112647	1					
ANR	112803	Argument	E_COMPILE_ERROR		112647	0					
ANR	112804	Identifier	E_COMPILE_ERROR		112647	0					
ANR	112805	Argument	"""'%s' not in the 'loop' or 'switch' context"""		112647	1					
ANR	112806	PrimaryExpression	"""'%s' not in the 'loop' or 'switch' context"""		112647	0					
ANR	112807	Argument	"ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"""		112647	2					
ANR	112808	ConditionalExpression	"ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"""		112647	0					
ANR	112809	Condition	ast -> kind == ZEND_AST_BREAK		112647	0					
ANR	112810	EqualityExpression	ast -> kind == ZEND_AST_BREAK		112647	0		==			
ANR	112811	PtrMemberAccess	ast -> kind		112647	0					
ANR	112812	Identifier	ast		112647	0					
ANR	112813	Identifier	kind		112647	1					
ANR	112814	Identifier	ZEND_AST_BREAK		112647	1					
ANR	112815	PrimaryExpression	"""break"""		112647	1					
ANR	112816	PrimaryExpression	"""continue"""		112647	2					
ANR	112817	ElseStatement	else		112647	0					
ANR	112818	CompoundStatement		30:8:904:904	112647	0					
ANR	112819	IfStatement	if ( ! zend_handle_loops_and_finally_ex ( depth ) )		112647	0					
ANR	112820	Condition	! zend_handle_loops_and_finally_ex ( depth )	3667:6:106328:106367	112647	0	True				
ANR	112821	UnaryOperationExpression	! zend_handle_loops_and_finally_ex ( depth )		112647	0					
ANR	112822	UnaryOperator	!		112647	0					
ANR	112823	CallExpression	zend_handle_loops_and_finally_ex ( depth )		112647	1					
ANR	112824	Callee	zend_handle_loops_and_finally_ex		112647	0					
ANR	112825	Identifier	zend_handle_loops_and_finally_ex		112647	0					
ANR	112826	ArgumentList	depth		112647	1					
ANR	112827	Argument	depth		112647	0					
ANR	112828	Identifier	depth		112647	0					
ANR	112829	CompoundStatement		31:48:954:954	112647	1					
ANR	112830	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot '%s' %d level%s"" , ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"" , depth , depth == 1 ? """" : ""s"" )"	3668:3:106375:106527	112647	0	True				
ANR	112831	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot '%s' %d level%s"" , ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"" , depth , depth == 1 ? """" : ""s"" )"		112647	0					
ANR	112832	Callee	zend_error_noreturn		112647	0					
ANR	112833	Identifier	zend_error_noreturn		112647	0					
ANR	112834	ArgumentList	E_COMPILE_ERROR		112647	1					
ANR	112835	Argument	E_COMPILE_ERROR		112647	0					
ANR	112836	Identifier	E_COMPILE_ERROR		112647	0					
ANR	112837	Argument	"""Cannot '%s' %d level%s"""		112647	1					
ANR	112838	PrimaryExpression	"""Cannot '%s' %d level%s"""		112647	0					
ANR	112839	Argument	"ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"""		112647	2					
ANR	112840	ConditionalExpression	"ast -> kind == ZEND_AST_BREAK ? ""break"" : ""continue"""		112647	0					
ANR	112841	Condition	ast -> kind == ZEND_AST_BREAK		112647	0					
ANR	112842	EqualityExpression	ast -> kind == ZEND_AST_BREAK		112647	0		==			
ANR	112843	PtrMemberAccess	ast -> kind		112647	0					
ANR	112844	Identifier	ast		112647	0					
ANR	112845	Identifier	kind		112647	1					
ANR	112846	Identifier	ZEND_AST_BREAK		112647	1					
ANR	112847	PrimaryExpression	"""break"""		112647	1					
ANR	112848	PrimaryExpression	"""continue"""		112647	2					
ANR	112849	Argument	depth		112647	3					
ANR	112850	Identifier	depth		112647	0					
ANR	112851	Argument	"depth == 1 ? """" : ""s"""		112647	4					
ANR	112852	ConditionalExpression	"depth == 1 ? """" : ""s"""		112647	0					
ANR	112853	Condition	depth == 1		112647	0					
ANR	112854	EqualityExpression	depth == 1		112647	0		==			
ANR	112855	Identifier	depth		112647	0					
ANR	112856	PrimaryExpression	1		112647	1					
ANR	112857	PrimaryExpression	""""""		112647	1					
ANR	112858	PrimaryExpression	"""s"""		112647	2					
ANR	112859	ExpressionStatement	"opline = zend_emit_op ( NULL , ast -> kind == ZEND_AST_BREAK ? ZEND_BRK : ZEND_CONT , NULL , NULL )"	3673:1:106537:106628	112647	6	True				
ANR	112860	AssignmentExpression	"opline = zend_emit_op ( NULL , ast -> kind == ZEND_AST_BREAK ? ZEND_BRK : ZEND_CONT , NULL , NULL )"		112647	0		=			
ANR	112861	Identifier	opline		112647	0					
ANR	112862	CallExpression	"zend_emit_op ( NULL , ast -> kind == ZEND_AST_BREAK ? ZEND_BRK : ZEND_CONT , NULL , NULL )"		112647	1					
ANR	112863	Callee	zend_emit_op		112647	0					
ANR	112864	Identifier	zend_emit_op		112647	0					
ANR	112865	ArgumentList	NULL		112647	1					
ANR	112866	Argument	NULL		112647	0					
ANR	112867	Identifier	NULL		112647	0					
ANR	112868	Argument	ast -> kind == ZEND_AST_BREAK ? ZEND_BRK : ZEND_CONT		112647	1					
ANR	112869	ConditionalExpression	ast -> kind == ZEND_AST_BREAK ? ZEND_BRK : ZEND_CONT		112647	0					
ANR	112870	Condition	ast -> kind == ZEND_AST_BREAK		112647	0					
ANR	112871	EqualityExpression	ast -> kind == ZEND_AST_BREAK		112647	0		==			
ANR	112872	PtrMemberAccess	ast -> kind		112647	0					
ANR	112873	Identifier	ast		112647	0					
ANR	112874	Identifier	kind		112647	1					
ANR	112875	Identifier	ZEND_AST_BREAK		112647	1					
ANR	112876	Identifier	ZEND_BRK		112647	1					
ANR	112877	Identifier	ZEND_CONT		112647	2					
ANR	112878	Argument	NULL		112647	2					
ANR	112879	Identifier	NULL		112647	0					
ANR	112880	Argument	NULL		112647	3					
ANR	112881	Identifier	NULL		112647	0					
ANR	112882	ExpressionStatement	opline -> op1 . num = CG ( context ) . current_brk_cont	3674:1:106631:106677	112647	7	True				
ANR	112883	AssignmentExpression	opline -> op1 . num = CG ( context ) . current_brk_cont		112647	0		=			
ANR	112884	MemberAccess	opline -> op1 . num		112647	0					
ANR	112885	PtrMemberAccess	opline -> op1		112647	0					
ANR	112886	Identifier	opline		112647	0					
ANR	112887	Identifier	op1		112647	1					
ANR	112888	Identifier	num		112647	1					
ANR	112889	MemberAccess	CG ( context ) . current_brk_cont		112647	1					
ANR	112890	CallExpression	CG ( context )		112647	0					
ANR	112891	Callee	CG		112647	0					
ANR	112892	Identifier	CG		112647	0					
ANR	112893	ArgumentList	context		112647	1					
ANR	112894	Argument	context		112647	0					
ANR	112895	Identifier	context		112647	0					
ANR	112896	Identifier	current_brk_cont		112647	1					
ANR	112897	ExpressionStatement	opline -> op2 . num = depth	3675:1:106680:106703	112647	8	True				
ANR	112898	AssignmentExpression	opline -> op2 . num = depth		112647	0		=			
ANR	112899	MemberAccess	opline -> op2 . num		112647	0					
ANR	112900	PtrMemberAccess	opline -> op2		112647	0					
ANR	112901	Identifier	opline		112647	0					
ANR	112902	Identifier	op2		112647	1					
ANR	112903	Identifier	num		112647	1					
ANR	112904	Identifier	depth		112647	1					
ANR	112905	ReturnType	void		112647	1					
ANR	112906	Identifier	zend_compile_break_continue		112647	2					
ANR	112907	ParameterList	zend_ast * ast		112647	3					
ANR	112908	Parameter	zend_ast * ast	3636:33:105390:105402	112647	0	True				
ANR	112909	ParameterType	zend_ast *		112647	0					
ANR	112910	Identifier	ast		112647	1					
ANR	112911	CFGEntryNode	ENTRY		112647		True				
ANR	112912	CFGExitNode	EXIT		112647		True				
ANR	112913	Symbol	ZEND_AST_CONTINUE		112647						
ANR	112914	Symbol	opline -> op1		112647						
ANR	112915	Symbol	opline -> op2		112647						
ANR	112916	Symbol	ast -> kind		112647						
ANR	112917	Symbol	ast		112647						
ANR	112918	Symbol	depth_zv		112647						
ANR	112919	Symbol	* depth_ast		112647						
ANR	112920	Symbol	E_COMPILE_ERROR		112647						
ANR	112921	Symbol	zend_handle_loops_and_finally_ex		112647						
ANR	112922	Symbol	* ast		112647						
ANR	112923	Symbol	opline		112647						
ANR	112924	Symbol	* * ast		112647						
ANR	112925	Symbol	IS_LONG		112647						
ANR	112926	Symbol	ZEND_AST_ZVAL		112647						
ANR	112927	Symbol	ZEND_AST_BREAK		112647						
ANR	112928	Symbol	context		112647						
ANR	112929	Symbol	depth_ast -> kind		112647						
ANR	112930	Symbol	ZEND_CONT		112647						
ANR	112931	Symbol	CG ( context ) . current_brk_cont		112647						
ANR	112932	Symbol	ZEND_BRK		112647						
ANR	112933	Symbol	opline -> op2 . num		112647						
ANR	112934	Symbol	depth_ast		112647						
ANR	112935	Symbol	NULL		112647						
ANR	112936	Symbol	CG		112647						
ANR	112937	Symbol	Z_TYPE_P		112647						
ANR	112938	Symbol	Z_LVAL_P		112647						
ANR	112939	Symbol	depth		112647						
ANR	112940	Symbol	* opline		112647						
ANR	112941	Symbol	* ast -> child		112647						
ANR	112942	Symbol	opline -> op1 . num		112647						
ANR	112943	Symbol	ast -> child		112647						
ANR	112944	Symbol	zend_ast_get_zval		112647						
ANR	112945	Symbol	zend_emit_op		112647						
ANR	112946	Function	zend_resolve_goto_label	3679:0:106718:108434							
ANR	112947	FunctionDef	"zend_resolve_goto_label (zend_op_array * op_array , zend_op * opline)"		112946	0					
ANR	112948	CompoundStatement		3680:0:106799:108434	112946	0					
ANR	112949	IdentifierDeclStatement	zend_label * dest ;	3681:1:106802:106818	112946	0	True				
ANR	112950	IdentifierDecl	* dest		112946	0					
ANR	112951	IdentifierDeclType	zend_label *		112946	0					
ANR	112952	Identifier	dest		112946	1					
ANR	112953	IdentifierDeclStatement	"int current , remove_oplines = opline -> op1 . num ;"	3682:1:106821:106866	112946	1	True				
ANR	112954	IdentifierDecl	current		112946	0					
ANR	112955	IdentifierDeclType	int		112946	0					
ANR	112956	Identifier	current		112946	1					
ANR	112957	IdentifierDecl	remove_oplines = opline -> op1 . num		112946	1					
ANR	112958	IdentifierDeclType	int		112946	0					
ANR	112959	Identifier	remove_oplines		112946	1					
ANR	112960	AssignmentExpression	remove_oplines = opline -> op1 . num		112946	2		=			
ANR	112961	Identifier	remove_oplines		112946	0					
ANR	112962	MemberAccess	opline -> op1 . num		112946	1					
ANR	112963	PtrMemberAccess	opline -> op1		112946	0					
ANR	112964	Identifier	opline		112946	0					
ANR	112965	Identifier	op1		112946	1					
ANR	112966	Identifier	num		112946	1					
ANR	112967	IdentifierDeclStatement	zval * label ;	3683:1:106869:106880	112946	2	True				
ANR	112968	IdentifierDecl	* label		112946	0					
ANR	112969	IdentifierDeclType	zval *		112946	0					
ANR	112970	Identifier	label		112946	1					
ANR	112971	IdentifierDeclStatement	uint32_t opnum = opline - op_array -> opcodes ;	3684:1:106883:106926	112946	3	True				
ANR	112972	IdentifierDecl	opnum = opline - op_array -> opcodes		112946	0					
ANR	112973	IdentifierDeclType	uint32_t		112946	0					
ANR	112974	Identifier	opnum		112946	1					
ANR	112975	AssignmentExpression	opnum = opline - op_array -> opcodes		112946	2		=			
ANR	112976	Identifier	opnum		112946	0					
ANR	112977	AdditiveExpression	opline - op_array -> opcodes		112946	1		-			
ANR	112978	Identifier	opline		112946	0					
ANR	112979	PtrMemberAccess	op_array -> opcodes		112946	1					
ANR	112980	Identifier	op_array		112946	0					
ANR	112981	Identifier	opcodes		112946	1					
ANR	112982	ExpressionStatement	"label = CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"	3686:1:106930:106984	112946	4	True				
ANR	112983	AssignmentExpression	"label = CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"		112946	0		=			
ANR	112984	Identifier	label		112946	0					
ANR	112985	CallExpression	"CT_CONSTANT_EX ( op_array , opline -> op2 . constant )"		112946	1					
ANR	112986	Callee	CT_CONSTANT_EX		112946	0					
ANR	112987	Identifier	CT_CONSTANT_EX		112946	0					
ANR	112988	ArgumentList	op_array		112946	1					
ANR	112989	Argument	op_array		112946	0					
ANR	112990	Identifier	op_array		112946	0					
ANR	112991	Argument	opline -> op2 . constant		112946	1					
ANR	112992	MemberAccess	opline -> op2 . constant		112946	0					
ANR	112993	PtrMemberAccess	opline -> op2		112946	0					
ANR	112994	Identifier	opline		112946	0					
ANR	112995	Identifier	op2		112946	1					
ANR	112996	Identifier	constant		112946	1					
ANR	112997	IfStatement	"if ( CG ( context ) . labels == NULL || ( dest = zend_hash_find_ptr ( CG ( context ) . labels , Z_STR_P ( label ) ) ) == NULL )"		112946	5					
ANR	112998	Condition	"CG ( context ) . labels == NULL || ( dest = zend_hash_find_ptr ( CG ( context ) . labels , Z_STR_P ( label ) ) ) == NULL"	3687:5:106991:107096	112946	0	True				
ANR	112999	OrExpression	"CG ( context ) . labels == NULL || ( dest = zend_hash_find_ptr ( CG ( context ) . labels , Z_STR_P ( label ) ) ) == NULL"		112946	0		||			
ANR	113000	EqualityExpression	CG ( context ) . labels == NULL		112946	0		==			
ANR	113001	MemberAccess	CG ( context ) . labels		112946	0					
ANR	113002	CallExpression	CG ( context )		112946	0					
ANR	113003	Callee	CG		112946	0					
ANR	113004	Identifier	CG		112946	0					
ANR	113005	ArgumentList	context		112946	1					
ANR	113006	Argument	context		112946	0					
ANR	113007	Identifier	context		112946	0					
ANR	113008	Identifier	labels		112946	1					
ANR	113009	Identifier	NULL		112946	1					
ANR	113010	EqualityExpression	"( dest = zend_hash_find_ptr ( CG ( context ) . labels , Z_STR_P ( label ) ) ) == NULL"		112946	1		==			
ANR	113011	AssignmentExpression	"dest = zend_hash_find_ptr ( CG ( context ) . labels , Z_STR_P ( label ) )"		112946	0		=			
ANR	113012	Identifier	dest		112946	0					
ANR	113013	CallExpression	"zend_hash_find_ptr ( CG ( context ) . labels , Z_STR_P ( label ) )"		112946	1					
ANR	113014	Callee	zend_hash_find_ptr		112946	0					
ANR	113015	Identifier	zend_hash_find_ptr		112946	0					
ANR	113016	ArgumentList	CG ( context ) . labels		112946	1					
ANR	113017	Argument	CG ( context ) . labels		112946	0					
ANR	113018	MemberAccess	CG ( context ) . labels		112946	0					
ANR	113019	CallExpression	CG ( context )		112946	0					
ANR	113020	Callee	CG		112946	0					
ANR	113021	Identifier	CG		112946	0					
ANR	113022	ArgumentList	context		112946	1					
ANR	113023	Argument	context		112946	0					
ANR	113024	Identifier	context		112946	0					
ANR	113025	Identifier	labels		112946	1					
ANR	113026	Argument	Z_STR_P ( label )		112946	1					
ANR	113027	CallExpression	Z_STR_P ( label )		112946	0					
ANR	113028	Callee	Z_STR_P		112946	0					
ANR	113029	Identifier	Z_STR_P		112946	0					
ANR	113030	ArgumentList	label		112946	1					
ANR	113031	Argument	label		112946	0					
ANR	113032	Identifier	label		112946	0					
ANR	113033	Identifier	NULL		112946	1					
ANR	113034	CompoundStatement		10:3:301:301	112946	1					
ANR	113035	ExpressionStatement	CG ( in_compilation ) = 1	3690:2:107105:107127	112946	0	True				
ANR	113036	AssignmentExpression	CG ( in_compilation ) = 1		112946	0		=			
ANR	113037	CallExpression	CG ( in_compilation )		112946	0					
ANR	113038	Callee	CG		112946	0					
ANR	113039	Identifier	CG		112946	0					
ANR	113040	ArgumentList	in_compilation		112946	1					
ANR	113041	Argument	in_compilation		112946	0					
ANR	113042	Identifier	in_compilation		112946	0					
ANR	113043	PrimaryExpression	1		112946	1					
ANR	113044	ExpressionStatement	CG ( active_op_array ) = op_array	3691:2:107131:107161	112946	1	True				
ANR	113045	AssignmentExpression	CG ( active_op_array ) = op_array		112946	0		=			
ANR	113046	CallExpression	CG ( active_op_array )		112946	0					
ANR	113047	Callee	CG		112946	0					
ANR	113048	Identifier	CG		112946	0					
ANR	113049	ArgumentList	active_op_array		112946	1					
ANR	113050	Argument	active_op_array		112946	0					
ANR	113051	Identifier	active_op_array		112946	0					
ANR	113052	Identifier	op_array		112946	1					
ANR	113053	ExpressionStatement	CG ( zend_lineno ) = opline -> lineno	3692:2:107165:107197	112946	2	True				
ANR	113054	AssignmentExpression	CG ( zend_lineno ) = opline -> lineno		112946	0		=			
ANR	113055	CallExpression	CG ( zend_lineno )		112946	0					
ANR	113056	Callee	CG		112946	0					
ANR	113057	Identifier	CG		112946	0					
ANR	113058	ArgumentList	zend_lineno		112946	1					
ANR	113059	Argument	zend_lineno		112946	0					
ANR	113060	Identifier	zend_lineno		112946	0					
ANR	113061	PtrMemberAccess	opline -> lineno		112946	1					
ANR	113062	Identifier	opline		112946	0					
ANR	113063	Identifier	lineno		112946	1					
ANR	113064	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""'goto' to undefined label '%s'"" , Z_STRVAL_P ( label ) )"	3693:2:107201:107290	112946	3	True				
ANR	113065	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""'goto' to undefined label '%s'"" , Z_STRVAL_P ( label ) )"		112946	0					
ANR	113066	Callee	zend_error_noreturn		112946	0					
ANR	113067	Identifier	zend_error_noreturn		112946	0					
ANR	113068	ArgumentList	E_COMPILE_ERROR		112946	1					
ANR	113069	Argument	E_COMPILE_ERROR		112946	0					
ANR	113070	Identifier	E_COMPILE_ERROR		112946	0					
ANR	113071	Argument	"""'goto' to undefined label '%s'"""		112946	1					
ANR	113072	PrimaryExpression	"""'goto' to undefined label '%s'"""		112946	0					
ANR	113073	Argument	Z_STRVAL_P ( label )		112946	2					
ANR	113074	CallExpression	Z_STRVAL_P ( label )		112946	0					
ANR	113075	Callee	Z_STRVAL_P		112946	0					
ANR	113076	Identifier	Z_STRVAL_P		112946	0					
ANR	113077	ArgumentList	label		112946	1					
ANR	113078	Argument	label		112946	0					
ANR	113079	Identifier	label		112946	0					
ANR	113080	ExpressionStatement	zval_dtor ( label )	3696:1:107297:107313	112946	6	True				
ANR	113081	CallExpression	zval_dtor ( label )		112946	0					
ANR	113082	Callee	zval_dtor		112946	0					
ANR	113083	Identifier	zval_dtor		112946	0					
ANR	113084	ArgumentList	label		112946	1					
ANR	113085	Argument	label		112946	0					
ANR	113086	Identifier	label		112946	0					
ANR	113087	ExpressionStatement	ZVAL_NULL ( label )	3697:1:107316:107332	112946	7	True				
ANR	113088	CallExpression	ZVAL_NULL ( label )		112946	0					
ANR	113089	Callee	ZVAL_NULL		112946	0					
ANR	113090	Identifier	ZVAL_NULL		112946	0					
ANR	113091	ArgumentList	label		112946	1					
ANR	113092	Argument	label		112946	0					
ANR	113093	Identifier	label		112946	0					
ANR	113094	ExpressionStatement	current = opline -> extended_value	3699:1:107336:107368	112946	8	True				
ANR	113095	AssignmentExpression	current = opline -> extended_value		112946	0		=			
ANR	113096	Identifier	current		112946	0					
ANR	113097	PtrMemberAccess	opline -> extended_value		112946	1					
ANR	113098	Identifier	opline		112946	0					
ANR	113099	Identifier	extended_value		112946	1					
ANR	113100	ForStatement	for ( ; current != dest -> brk_cont ; current = op_array -> brk_cont_array [ current ] . parent )		112946	9					
ANR	113101	Condition	current != dest -> brk_cont	3700:8:107378:107402	112946	0	True				
ANR	113102	EqualityExpression	current != dest -> brk_cont		112946	0		!=			
ANR	113103	Identifier	current		112946	0					
ANR	113104	PtrMemberAccess	dest -> brk_cont		112946	1					
ANR	113105	Identifier	dest		112946	0					
ANR	113106	Identifier	brk_cont		112946	1					
ANR	113107	AssignmentExpression	current = op_array -> brk_cont_array [ current ] . parent	3700:35:107405:107454	112946	1	True	=			
ANR	113108	Identifier	current		112946	0					
ANR	113109	MemberAccess	op_array -> brk_cont_array [ current ] . parent		112946	1					
ANR	113110	ArrayIndexing	op_array -> brk_cont_array [ current ]		112946	0					
ANR	113111	PtrMemberAccess	op_array -> brk_cont_array		112946	0					
ANR	113112	Identifier	op_array		112946	0					
ANR	113113	Identifier	brk_cont_array		112946	1					
ANR	113114	Identifier	current		112946	1					
ANR	113115	Identifier	parent		112946	1					
ANR	113116	CompoundStatement		21:87:657:657	112946	2					
ANR	113117	IfStatement	if ( current == - 1 )		112946	0					
ANR	113118	Condition	current == - 1	3701:6:107465:107477	112946	0	True				
ANR	113119	EqualityExpression	current == - 1		112946	0		==			
ANR	113120	Identifier	current		112946	0					
ANR	113121	UnaryOperationExpression	- 1		112946	1					
ANR	113122	UnaryOperator	-		112946	0					
ANR	113123	PrimaryExpression	1		112946	1					
ANR	113124	CompoundStatement		22:21:680:680	112946	1					
ANR	113125	ExpressionStatement	CG ( in_compilation ) = 1	3702:3:107485:107507	112946	0	True				
ANR	113126	AssignmentExpression	CG ( in_compilation ) = 1		112946	0		=			
ANR	113127	CallExpression	CG ( in_compilation )		112946	0					
ANR	113128	Callee	CG		112946	0					
ANR	113129	Identifier	CG		112946	0					
ANR	113130	ArgumentList	in_compilation		112946	1					
ANR	113131	Argument	in_compilation		112946	0					
ANR	113132	Identifier	in_compilation		112946	0					
ANR	113133	PrimaryExpression	1		112946	1					
ANR	113134	ExpressionStatement	CG ( active_op_array ) = op_array	3703:3:107512:107542	112946	1	True				
ANR	113135	AssignmentExpression	CG ( active_op_array ) = op_array		112946	0		=			
ANR	113136	CallExpression	CG ( active_op_array )		112946	0					
ANR	113137	Callee	CG		112946	0					
ANR	113138	Identifier	CG		112946	0					
ANR	113139	ArgumentList	active_op_array		112946	1					
ANR	113140	Argument	active_op_array		112946	0					
ANR	113141	Identifier	active_op_array		112946	0					
ANR	113142	Identifier	op_array		112946	1					
ANR	113143	ExpressionStatement	CG ( zend_lineno ) = opline -> lineno	3704:3:107547:107579	112946	2	True				
ANR	113144	AssignmentExpression	CG ( zend_lineno ) = opline -> lineno		112946	0		=			
ANR	113145	CallExpression	CG ( zend_lineno )		112946	0					
ANR	113146	Callee	CG		112946	0					
ANR	113147	Identifier	CG		112946	0					
ANR	113148	ArgumentList	zend_lineno		112946	1					
ANR	113149	Argument	zend_lineno		112946	0					
ANR	113150	Identifier	zend_lineno		112946	0					
ANR	113151	PtrMemberAccess	opline -> lineno		112946	1					
ANR	113152	Identifier	opline		112946	0					
ANR	113153	Identifier	lineno		112946	1					
ANR	113154	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""'goto' into loop or switch statement is disallowed"" )"	3705:3:107584:107674	112946	3	True				
ANR	113155	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""'goto' into loop or switch statement is disallowed"" )"		112946	0					
ANR	113156	Callee	zend_error_noreturn		112946	0					
ANR	113157	Identifier	zend_error_noreturn		112946	0					
ANR	113158	ArgumentList	E_COMPILE_ERROR		112946	1					
ANR	113159	Argument	E_COMPILE_ERROR		112946	0					
ANR	113160	Identifier	E_COMPILE_ERROR		112946	0					
ANR	113161	Argument	"""'goto' into loop or switch statement is disallowed"""		112946	1					
ANR	113162	PrimaryExpression	"""'goto' into loop or switch statement is disallowed"""		112946	0					
ANR	113163	IfStatement	if ( op_array -> brk_cont_array [ current ] . start >= 0 )		112946	1					
ANR	113164	Condition	op_array -> brk_cont_array [ current ] . start >= 0	3707:6:107686:107729	112946	0	True				
ANR	113165	RelationalExpression	op_array -> brk_cont_array [ current ] . start >= 0		112946	0		>=			
ANR	113166	MemberAccess	op_array -> brk_cont_array [ current ] . start		112946	0					
ANR	113167	ArrayIndexing	op_array -> brk_cont_array [ current ]		112946	0					
ANR	113168	PtrMemberAccess	op_array -> brk_cont_array		112946	0					
ANR	113169	Identifier	op_array		112946	0					
ANR	113170	Identifier	brk_cont_array		112946	1					
ANR	113171	Identifier	current		112946	1					
ANR	113172	Identifier	start		112946	1					
ANR	113173	PrimaryExpression	0		112946	1					
ANR	113174	CompoundStatement		28:52:932:932	112946	1					
ANR	113175	ExpressionStatement	remove_oplines --	3708:3:107737:107753	112946	0	True				
ANR	113176	PostIncDecOperationExpression	remove_oplines --		112946	0					
ANR	113177	Identifier	remove_oplines		112946	0					
ANR	113178	IncDec	--		112946	1					
ANR	113179	ForStatement	for ( current = 0 ; current < op_array -> last_try_catch ; ++ current )		112946	10					
ANR	113180	ForInit	current = 0 ;	3712:6:107769:107780	112946	0	True				
ANR	113181	AssignmentExpression	current = 0		112946	0		=			
ANR	113182	Identifier	current		112946	0					
ANR	113183	PrimaryExpression	0		112946	1					
ANR	113184	Condition	current < op_array -> last_try_catch	3712:19:107782:107815	112946	1	True				
ANR	113185	RelationalExpression	current < op_array -> last_try_catch		112946	0		<			
ANR	113186	Identifier	current		112946	0					
ANR	113187	PtrMemberAccess	op_array -> last_try_catch		112946	1					
ANR	113188	Identifier	op_array		112946	0					
ANR	113189	Identifier	last_try_catch		112946	1					
ANR	113190	UnaryExpression	++ current	3712:55:107818:107826	112946	2	True				
ANR	113191	IncDec	++		112946	0					
ANR	113192	Identifier	current		112946	1					
ANR	113193	CompoundStatement		34:2:1033:1099	112946	3					
ANR	113194	IdentifierDeclStatement	zend_try_catch_element * elem = & op_array -> try_catch_array [ current ] ;	3713:2:107833:107899	112946	0	True				
ANR	113195	IdentifierDecl	* elem = & op_array -> try_catch_array [ current ]		112946	0					
ANR	113196	IdentifierDeclType	zend_try_catch_element *		112946	0					
ANR	113197	Identifier	elem		112946	1					
ANR	113198	AssignmentExpression	* elem = & op_array -> try_catch_array [ current ]		112946	2		=			
ANR	113199	Identifier	elem		112946	0					
ANR	113200	UnaryOperationExpression	& op_array -> try_catch_array [ current ]		112946	1					
ANR	113201	UnaryOperator	&		112946	0					
ANR	113202	ArrayIndexing	op_array -> try_catch_array [ current ]		112946	1					
ANR	113203	PtrMemberAccess	op_array -> try_catch_array		112946	0					
ANR	113204	Identifier	op_array		112946	0					
ANR	113205	Identifier	try_catch_array		112946	1					
ANR	113206	Identifier	current		112946	1					
ANR	113207	IfStatement	if ( elem -> try_op > opnum )		112946	1					
ANR	113208	Condition	elem -> try_op > opnum	3714:6:107907:107926	112946	0	True				
ANR	113209	RelationalExpression	elem -> try_op > opnum		112946	0		>			
ANR	113210	PtrMemberAccess	elem -> try_op		112946	0					
ANR	113211	Identifier	elem		112946	0					
ANR	113212	Identifier	try_op		112946	1					
ANR	113213	Identifier	opnum		112946	1					
ANR	113214	CompoundStatement		35:28:1129:1129	112946	1					
ANR	113215	BreakStatement	break ;	3715:3:107934:107939	112946	0	True				
ANR	113216	IfStatement	if ( elem -> finally_op && opnum < elem -> finally_op - 1 && ( dest -> opline_num > elem -> finally_end || dest -> opline_num < elem -> try_op ) )		112946	2					
ANR	113217	Condition	elem -> finally_op && opnum < elem -> finally_op - 1 && ( dest -> opline_num > elem -> finally_end || dest -> opline_num < elem -> try_op )	3717:6:107951:108078	112946	0	True				
ANR	113218	AndExpression	elem -> finally_op && opnum < elem -> finally_op - 1 && ( dest -> opline_num > elem -> finally_end || dest -> opline_num < elem -> try_op )		112946	0		&&			
ANR	113219	PtrMemberAccess	elem -> finally_op		112946	0					
ANR	113220	Identifier	elem		112946	0					
ANR	113221	Identifier	finally_op		112946	1					
ANR	113222	AndExpression	opnum < elem -> finally_op - 1 && ( dest -> opline_num > elem -> finally_end || dest -> opline_num < elem -> try_op )		112946	1		&&			
ANR	113223	RelationalExpression	opnum < elem -> finally_op - 1		112946	0		<			
ANR	113224	Identifier	opnum		112946	0					
ANR	113225	AdditiveExpression	elem -> finally_op - 1		112946	1		-			
ANR	113226	PtrMemberAccess	elem -> finally_op		112946	0					
ANR	113227	Identifier	elem		112946	0					
ANR	113228	Identifier	finally_op		112946	1					
ANR	113229	PrimaryExpression	1		112946	1					
ANR	113230	OrExpression	dest -> opline_num > elem -> finally_end || dest -> opline_num < elem -> try_op		112946	1		||			
ANR	113231	RelationalExpression	dest -> opline_num > elem -> finally_end		112946	0		>			
ANR	113232	PtrMemberAccess	dest -> opline_num		112946	0					
ANR	113233	Identifier	dest		112946	0					
ANR	113234	Identifier	opline_num		112946	1					
ANR	113235	PtrMemberAccess	elem -> finally_end		112946	1					
ANR	113236	Identifier	elem		112946	0					
ANR	113237	Identifier	finally_end		112946	1					
ANR	113238	RelationalExpression	dest -> opline_num < elem -> try_op		112946	1		<			
ANR	113239	PtrMemberAccess	dest -> opline_num		112946	0					
ANR	113240	Identifier	dest		112946	0					
ANR	113241	Identifier	opline_num		112946	1					
ANR	113242	PtrMemberAccess	elem -> try_op		112946	1					
ANR	113243	Identifier	elem		112946	0					
ANR	113244	Identifier	try_op		112946	1					
ANR	113245	CompoundStatement		40:4:1284:1284	112946	1					
ANR	113246	ExpressionStatement	remove_oplines --	3720:3:108089:108105	112946	0	True				
ANR	113247	PostIncDecOperationExpression	remove_oplines --		112946	0					
ANR	113248	Identifier	remove_oplines		112946	0					
ANR	113249	IncDec	--		112946	1					
ANR	113250	ExpressionStatement	opline -> opcode = ZEND_JMP	3724:1:108116:108141	112946	11	True				
ANR	113251	AssignmentExpression	opline -> opcode = ZEND_JMP		112946	0		=			
ANR	113252	PtrMemberAccess	opline -> opcode		112946	0					
ANR	113253	Identifier	opline		112946	0					
ANR	113254	Identifier	opcode		112946	1					
ANR	113255	Identifier	ZEND_JMP		112946	1					
ANR	113256	ExpressionStatement	opline -> op1 . opline_num = dest -> opline_num	3725:1:108144:108185	112946	12	True				
ANR	113257	AssignmentExpression	opline -> op1 . opline_num = dest -> opline_num		112946	0		=			
ANR	113258	MemberAccess	opline -> op1 . opline_num		112946	0					
ANR	113259	PtrMemberAccess	opline -> op1		112946	0					
ANR	113260	Identifier	opline		112946	0					
ANR	113261	Identifier	op1		112946	1					
ANR	113262	Identifier	opline_num		112946	1					
ANR	113263	PtrMemberAccess	dest -> opline_num		112946	1					
ANR	113264	Identifier	dest		112946	0					
ANR	113265	Identifier	opline_num		112946	1					
ANR	113266	ExpressionStatement	opline -> extended_value = 0	3726:1:108188:108214	112946	13	True				
ANR	113267	AssignmentExpression	opline -> extended_value = 0		112946	0		=			
ANR	113268	PtrMemberAccess	opline -> extended_value		112946	0					
ANR	113269	Identifier	opline		112946	0					
ANR	113270	Identifier	extended_value		112946	1					
ANR	113271	PrimaryExpression	0		112946	1					
ANR	113272	ExpressionStatement	SET_UNUSED ( opline -> op1 )	3727:1:108217:108240	112946	14	True				
ANR	113273	CallExpression	SET_UNUSED ( opline -> op1 )		112946	0					
ANR	113274	Callee	SET_UNUSED		112946	0					
ANR	113275	Identifier	SET_UNUSED		112946	0					
ANR	113276	ArgumentList	opline -> op1		112946	1					
ANR	113277	Argument	opline -> op1		112946	0					
ANR	113278	PtrMemberAccess	opline -> op1		112946	0					
ANR	113279	Identifier	opline		112946	0					
ANR	113280	Identifier	op1		112946	1					
ANR	113281	ExpressionStatement	SET_UNUSED ( opline -> op2 )	3728:1:108243:108266	112946	15	True				
ANR	113282	CallExpression	SET_UNUSED ( opline -> op2 )		112946	0					
ANR	113283	Callee	SET_UNUSED		112946	0					
ANR	113284	Identifier	SET_UNUSED		112946	0					
ANR	113285	ArgumentList	opline -> op2		112946	1					
ANR	113286	Argument	opline -> op2		112946	0					
ANR	113287	PtrMemberAccess	opline -> op2		112946	0					
ANR	113288	Identifier	opline		112946	0					
ANR	113289	Identifier	op2		112946	1					
ANR	113290	ExpressionStatement	SET_UNUSED ( opline -> result )	3729:1:108269:108295	112946	16	True				
ANR	113291	CallExpression	SET_UNUSED ( opline -> result )		112946	0					
ANR	113292	Callee	SET_UNUSED		112946	0					
ANR	113293	Identifier	SET_UNUSED		112946	0					
ANR	113294	ArgumentList	opline -> result		112946	1					
ANR	113295	Argument	opline -> result		112946	0					
ANR	113296	PtrMemberAccess	opline -> result		112946	0					
ANR	113297	Identifier	opline		112946	0					
ANR	113298	Identifier	result		112946	1					
ANR	113299	ExpressionStatement	ZEND_ASSERT ( remove_oplines >= 0 )	3731:1:108299:108331	112946	17	True				
ANR	113300	CallExpression	ZEND_ASSERT ( remove_oplines >= 0 )		112946	0					
ANR	113301	Callee	ZEND_ASSERT		112946	0					
ANR	113302	Identifier	ZEND_ASSERT		112946	0					
ANR	113303	ArgumentList	remove_oplines >= 0		112946	1					
ANR	113304	Argument	remove_oplines >= 0		112946	0					
ANR	113305	RelationalExpression	remove_oplines >= 0		112946	0		>=			
ANR	113306	Identifier	remove_oplines		112946	0					
ANR	113307	PrimaryExpression	0		112946	1					
ANR	113308	WhileStatement	while ( remove_oplines -- )		112946	18					
ANR	113309	Condition	remove_oplines --	3732:8:108341:108356	112946	0	True				
ANR	113310	PostIncDecOperationExpression	remove_oplines --		112946	0					
ANR	113311	Identifier	remove_oplines		112946	0					
ANR	113312	IncDec	--		112946	1					
ANR	113313	CompoundStatement		53:26:1559:1559	112946	1					
ANR	113314	ExpressionStatement	opline --	3733:2:108363:108371	112946	0	True				
ANR	113315	PostIncDecOperationExpression	opline --		112946	0					
ANR	113316	Identifier	opline		112946	0					
ANR	113317	IncDec	--		112946	1					
ANR	113318	ExpressionStatement	MAKE_NOP ( opline )	3734:2:108375:108391	112946	1	True				
ANR	113319	CallExpression	MAKE_NOP ( opline )		112946	0					
ANR	113320	Callee	MAKE_NOP		112946	0					
ANR	113321	Identifier	MAKE_NOP		112946	0					
ANR	113322	ArgumentList	opline		112946	1					
ANR	113323	Argument	opline		112946	0					
ANR	113324	Identifier	opline		112946	0					
ANR	113325	ExpressionStatement	ZEND_VM_SET_OPCODE_HANDLER ( opline )	3735:2:108395:108429	112946	2	True				
ANR	113326	CallExpression	ZEND_VM_SET_OPCODE_HANDLER ( opline )		112946	0					
ANR	113327	Callee	ZEND_VM_SET_OPCODE_HANDLER		112946	0					
ANR	113328	Identifier	ZEND_VM_SET_OPCODE_HANDLER		112946	0					
ANR	113329	ArgumentList	opline		112946	1					
ANR	113330	Argument	opline		112946	0					
ANR	113331	Identifier	opline		112946	0					
ANR	113332	ReturnType	void		112946	1					
ANR	113333	Identifier	zend_resolve_goto_label		112946	2					
ANR	113334	ParameterList	"zend_op_array * op_array , zend_op * opline"		112946	3					
ANR	113335	Parameter	zend_op_array * op_array	3679:29:106747:106769	112946	0	True				
ANR	113336	ParameterType	zend_op_array *		112946	0					
ANR	113337	Identifier	op_array		112946	1					
ANR	113338	Parameter	zend_op * opline	3679:54:106772:106786	112946	1	True				
ANR	113339	ParameterType	zend_op *		112946	0					
ANR	113340	Identifier	opline		112946	1					
ANR	113341	CFGEntryNode	ENTRY		112946		True				
ANR	113342	CFGExitNode	EXIT		112946		True				
ANR	113343	Symbol	opline -> op1		112946						
ANR	113344	Symbol	op_array -> brk_cont_array [ current ] . parent		112946						
ANR	113345	Symbol	opline -> op2		112946						
ANR	113346	Symbol	remove_oplines		112946						
ANR	113347	Symbol	* dest		112946						
ANR	113348	Symbol	E_COMPILE_ERROR		112946						
ANR	113349	Symbol	* current		112946						
ANR	113350	Symbol	dest		112946						
ANR	113351	Symbol	elem -> finally_op		112946						
ANR	113352	Symbol	in_compilation		112946						
ANR	113353	Symbol	opline -> extended_value		112946						
ANR	113354	Symbol	opline -> result		112946						
ANR	113355	Symbol	opline -> lineno		112946						
ANR	113356	Symbol	current		112946						
ANR	113357	Symbol	op_array -> brk_cont_array		112946						
ANR	113358	Symbol	opline		112946						
ANR	113359	Symbol	op_array -> opcodes		112946						
ANR	113360	Symbol	opnum		112946						
ANR	113361	Symbol	dest -> opline_num		112946						
ANR	113362	Symbol	elem -> try_op		112946						
ANR	113363	Symbol	context		112946						
ANR	113364	Symbol	zend_lineno		112946						
ANR	113365	Symbol	elem -> finally_end		112946						
ANR	113366	Symbol	op_array -> try_catch_array		112946						
ANR	113367	Symbol	* elem		112946						
ANR	113368	Symbol	CG ( context ) . labels		112946						
ANR	113369	Symbol	zend_hash_find_ptr		112946						
ANR	113370	Symbol	CT_CONSTANT_EX		112946						
ANR	113371	Symbol	elem		112946						
ANR	113372	Symbol	NULL		112946						
ANR	113373	Symbol	dest -> brk_cont		112946						
ANR	113374	Symbol	CG		112946						
ANR	113375	Symbol	* op_array -> brk_cont_array		112946						
ANR	113376	Symbol	active_op_array		112946						
ANR	113377	Symbol	opline -> op1 . opline_num		112946						
ANR	113378	Symbol	label		112946						
ANR	113379	Symbol	Z_STRVAL_P		112946						
ANR	113380	Symbol	* op_array		112946						
ANR	113381	Symbol	op_array -> last_try_catch		112946						
ANR	113382	Symbol	op_array -> brk_cont_array [ current ] . start		112946						
ANR	113383	Symbol	ZEND_JMP		112946						
ANR	113384	Symbol	* opline		112946						
ANR	113385	Symbol	opline -> opcode		112946						
ANR	113386	Symbol	opline -> op2 . constant		112946						
ANR	113387	Symbol	opline -> op1 . num		112946						
ANR	113388	Symbol	Z_STR_P		112946						
ANR	113389	Symbol	* * op_array		112946						
ANR	113390	Symbol	op_array		112946						
ANR	113391	Function	zend_compile_goto	3740:0:108447:108981							
ANR	113392	FunctionDef	zend_compile_goto (zend_ast * ast)		113391	0					
ANR	113393	CompoundStatement		3741:0:108495:108981	113391	0					
ANR	113394	IdentifierDeclStatement	zend_ast * label_ast = ast -> child [ 0 ] ;	3742:1:108498:108533	113391	0	True				
ANR	113395	IdentifierDecl	* label_ast = ast -> child [ 0 ]		113391	0					
ANR	113396	IdentifierDeclType	zend_ast *		113391	0					
ANR	113397	Identifier	label_ast		113391	1					
ANR	113398	AssignmentExpression	* label_ast = ast -> child [ 0 ]		113391	2		=			
ANR	113399	Identifier	label_ast		113391	0					
ANR	113400	ArrayIndexing	ast -> child [ 0 ]		113391	1					
ANR	113401	PtrMemberAccess	ast -> child		113391	0					
ANR	113402	Identifier	ast		113391	0					
ANR	113403	Identifier	child		113391	1					
ANR	113404	PrimaryExpression	0		113391	1					
ANR	113405	IdentifierDeclStatement	znode label_node ;	3743:1:108536:108552	113391	1	True				
ANR	113406	IdentifierDecl	label_node		113391	0					
ANR	113407	IdentifierDeclType	znode		113391	0					
ANR	113408	Identifier	label_node		113391	1					
ANR	113409	IdentifierDeclStatement	zend_op * opline ;	3744:1:108555:108570	113391	2	True				
ANR	113410	IdentifierDecl	* opline		113391	0					
ANR	113411	IdentifierDeclType	zend_op *		113391	0					
ANR	113412	Identifier	opline		113391	1					
ANR	113413	IdentifierDeclStatement	uint32_t opnum_start = get_next_op_number ( CG ( active_op_array ) ) ;	3745:1:108573:108635	113391	3	True				
ANR	113414	IdentifierDecl	opnum_start = get_next_op_number ( CG ( active_op_array ) )		113391	0					
ANR	113415	IdentifierDeclType	uint32_t		113391	0					
ANR	113416	Identifier	opnum_start		113391	1					
ANR	113417	AssignmentExpression	opnum_start = get_next_op_number ( CG ( active_op_array ) )		113391	2		=			
ANR	113418	Identifier	opnum_start		113391	0					
ANR	113419	CallExpression	get_next_op_number ( CG ( active_op_array ) )		113391	1					
ANR	113420	Callee	get_next_op_number		113391	0					
ANR	113421	Identifier	get_next_op_number		113391	0					
ANR	113422	ArgumentList	CG ( active_op_array )		113391	1					
ANR	113423	Argument	CG ( active_op_array )		113391	0					
ANR	113424	CallExpression	CG ( active_op_array )		113391	0					
ANR	113425	Callee	CG		113391	0					
ANR	113426	Identifier	CG		113391	0					
ANR	113427	ArgumentList	active_op_array		113391	1					
ANR	113428	Argument	active_op_array		113391	0					
ANR	113429	Identifier	active_op_array		113391	0					
ANR	113430	ExpressionStatement	"zend_compile_expr ( & label_node , label_ast )"	3747:1:108639:108680	113391	4	True				
ANR	113431	CallExpression	"zend_compile_expr ( & label_node , label_ast )"		113391	0					
ANR	113432	Callee	zend_compile_expr		113391	0					
ANR	113433	Identifier	zend_compile_expr		113391	0					
ANR	113434	ArgumentList	& label_node		113391	1					
ANR	113435	Argument	& label_node		113391	0					
ANR	113436	UnaryOperationExpression	& label_node		113391	0					
ANR	113437	UnaryOperator	&		113391	0					
ANR	113438	Identifier	label_node		113391	1					
ANR	113439	Argument	label_ast		113391	1					
ANR	113440	Identifier	label_ast		113391	0					
ANR	113441	ExpressionStatement	zend_handle_loops_and_finally ( )	3750:1:108754:108785	113391	5	True				
ANR	113442	CallExpression	zend_handle_loops_and_finally ( )		113391	0					
ANR	113443	Callee	zend_handle_loops_and_finally		113391	0					
ANR	113444	Identifier	zend_handle_loops_and_finally		113391	0					
ANR	113445	ArgumentList			113391	1					
ANR	113446	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_GOTO , NULL , & label_node )"	3751:1:108788:108845	113391	6	True				
ANR	113447	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_GOTO , NULL , & label_node )"		113391	0		=			
ANR	113448	Identifier	opline		113391	0					
ANR	113449	CallExpression	"zend_emit_op ( NULL , ZEND_GOTO , NULL , & label_node )"		113391	1					
ANR	113450	Callee	zend_emit_op		113391	0					
ANR	113451	Identifier	zend_emit_op		113391	0					
ANR	113452	ArgumentList	NULL		113391	1					
ANR	113453	Argument	NULL		113391	0					
ANR	113454	Identifier	NULL		113391	0					
ANR	113455	Argument	ZEND_GOTO		113391	1					
ANR	113456	Identifier	ZEND_GOTO		113391	0					
ANR	113457	Argument	NULL		113391	2					
ANR	113458	Identifier	NULL		113391	0					
ANR	113459	Argument	& label_node		113391	3					
ANR	113460	UnaryOperationExpression	& label_node		113391	0					
ANR	113461	UnaryOperator	&		113391	0					
ANR	113462	Identifier	label_node		113391	1					
ANR	113463	ExpressionStatement	opline -> op1 . num = get_next_op_number ( CG ( active_op_array ) ) - opnum_start - 1	3752:1:108848:108923	113391	7	True				
ANR	113464	AssignmentExpression	opline -> op1 . num = get_next_op_number ( CG ( active_op_array ) ) - opnum_start - 1		113391	0		=			
ANR	113465	MemberAccess	opline -> op1 . num		113391	0					
ANR	113466	PtrMemberAccess	opline -> op1		113391	0					
ANR	113467	Identifier	opline		113391	0					
ANR	113468	Identifier	op1		113391	1					
ANR	113469	Identifier	num		113391	1					
ANR	113470	AdditiveExpression	get_next_op_number ( CG ( active_op_array ) ) - opnum_start - 1		113391	1		-			
ANR	113471	CallExpression	get_next_op_number ( CG ( active_op_array ) )		113391	0					
ANR	113472	Callee	get_next_op_number		113391	0					
ANR	113473	Identifier	get_next_op_number		113391	0					
ANR	113474	ArgumentList	CG ( active_op_array )		113391	1					
ANR	113475	Argument	CG ( active_op_array )		113391	0					
ANR	113476	CallExpression	CG ( active_op_array )		113391	0					
ANR	113477	Callee	CG		113391	0					
ANR	113478	Identifier	CG		113391	0					
ANR	113479	ArgumentList	active_op_array		113391	1					
ANR	113480	Argument	active_op_array		113391	0					
ANR	113481	Identifier	active_op_array		113391	0					
ANR	113482	AdditiveExpression	opnum_start - 1		113391	1		-			
ANR	113483	Identifier	opnum_start		113391	0					
ANR	113484	PrimaryExpression	1		113391	1					
ANR	113485	ExpressionStatement	opline -> extended_value = CG ( context ) . current_brk_cont	3753:1:108926:108979	113391	8	True				
ANR	113486	AssignmentExpression	opline -> extended_value = CG ( context ) . current_brk_cont		113391	0		=			
ANR	113487	PtrMemberAccess	opline -> extended_value		113391	0					
ANR	113488	Identifier	opline		113391	0					
ANR	113489	Identifier	extended_value		113391	1					
ANR	113490	MemberAccess	CG ( context ) . current_brk_cont		113391	1					
ANR	113491	CallExpression	CG ( context )		113391	0					
ANR	113492	Callee	CG		113391	0					
ANR	113493	Identifier	CG		113391	0					
ANR	113494	ArgumentList	context		113391	1					
ANR	113495	Argument	context		113391	0					
ANR	113496	Identifier	context		113391	0					
ANR	113497	Identifier	current_brk_cont		113391	1					
ANR	113498	ReturnType	void		113391	1					
ANR	113499	Identifier	zend_compile_goto		113391	2					
ANR	113500	ParameterList	zend_ast * ast		113391	3					
ANR	113501	Parameter	zend_ast * ast	3740:23:108470:108482	113391	0	True				
ANR	113502	ParameterType	zend_ast *		113391	0					
ANR	113503	Identifier	ast		113391	1					
ANR	113504	CFGEntryNode	ENTRY		113391		True				
ANR	113505	CFGExitNode	EXIT		113391		True				
ANR	113506	Symbol	opline -> op1		113391						
ANR	113507	Symbol	label_node		113391						
ANR	113508	Symbol	opnum_start		113391						
ANR	113509	Symbol	ast		113391						
ANR	113510	Symbol	NULL		113391						
ANR	113511	Symbol	CG		113391						
ANR	113512	Symbol	active_op_array		113391						
ANR	113513	Symbol	& label_node		113391						
ANR	113514	Symbol	ZEND_GOTO		113391						
ANR	113515	Symbol	opline -> extended_value		113391						
ANR	113516	Symbol	* ast		113391						
ANR	113517	Symbol	opline		113391						
ANR	113518	Symbol	* opline		113391						
ANR	113519	Symbol	* * ast		113391						
ANR	113520	Symbol	context		113391						
ANR	113521	Symbol	* ast -> child		113391						
ANR	113522	Symbol	opline -> op1 . num		113391						
ANR	113523	Symbol	label_ast		113391						
ANR	113524	Symbol	ast -> child		113391						
ANR	113525	Symbol	get_next_op_number		113391						
ANR	113526	Symbol	zend_emit_op		113391						
ANR	113527	Symbol	CG ( context ) . current_brk_cont		113391						
ANR	113528	Function	zend_compile_label	3757:0:108994:109535							
ANR	113529	FunctionDef	zend_compile_label (zend_ast * ast)		113528	0					
ANR	113530	CompoundStatement		3758:0:109043:109535	113528	0					
ANR	113531	IdentifierDeclStatement	zend_string * label = zend_ast_get_str ( ast -> child [ 0 ] ) ;	3759:1:109046:109098	113528	0	True				
ANR	113532	IdentifierDecl	* label = zend_ast_get_str ( ast -> child [ 0 ] )		113528	0					
ANR	113533	IdentifierDeclType	zend_string *		113528	0					
ANR	113534	Identifier	label		113528	1					
ANR	113535	AssignmentExpression	* label = zend_ast_get_str ( ast -> child [ 0 ] )		113528	2		=			
ANR	113536	Identifier	label		113528	0					
ANR	113537	CallExpression	zend_ast_get_str ( ast -> child [ 0 ] )		113528	1					
ANR	113538	Callee	zend_ast_get_str		113528	0					
ANR	113539	Identifier	zend_ast_get_str		113528	0					
ANR	113540	ArgumentList	ast -> child [ 0 ]		113528	1					
ANR	113541	Argument	ast -> child [ 0 ]		113528	0					
ANR	113542	ArrayIndexing	ast -> child [ 0 ]		113528	0					
ANR	113543	PtrMemberAccess	ast -> child		113528	0					
ANR	113544	Identifier	ast		113528	0					
ANR	113545	Identifier	child		113528	1					
ANR	113546	PrimaryExpression	0		113528	1					
ANR	113547	IdentifierDeclStatement	zend_label dest ;	3760:1:109101:109116	113528	1	True				
ANR	113548	IdentifierDecl	dest		113528	0					
ANR	113549	IdentifierDeclType	zend_label		113528	0					
ANR	113550	Identifier	dest		113528	1					
ANR	113551	IfStatement	if ( ! CG ( context ) . labels )		113528	2					
ANR	113552	Condition	! CG ( context ) . labels	3762:5:109124:109142	113528	0	True				
ANR	113553	UnaryOperationExpression	! CG ( context ) . labels		113528	0					
ANR	113554	UnaryOperator	!		113528	0					
ANR	113555	MemberAccess	CG ( context ) . labels		113528	1					
ANR	113556	CallExpression	CG ( context )		113528	0					
ANR	113557	Callee	CG		113528	0					
ANR	113558	Identifier	CG		113528	0					
ANR	113559	ArgumentList	context		113528	1					
ANR	113560	Argument	context		113528	0					
ANR	113561	Identifier	context		113528	0					
ANR	113562	Identifier	labels		113528	1					
ANR	113563	CompoundStatement		5:26:101:101	113528	1					
ANR	113564	ExpressionStatement	ALLOC_HASHTABLE ( CG ( context ) . labels )	3763:2:109149:109184	113528	0	True				
ANR	113565	CallExpression	ALLOC_HASHTABLE ( CG ( context ) . labels )		113528	0					
ANR	113566	Callee	ALLOC_HASHTABLE		113528	0					
ANR	113567	Identifier	ALLOC_HASHTABLE		113528	0					
ANR	113568	ArgumentList	CG ( context ) . labels		113528	1					
ANR	113569	Argument	CG ( context ) . labels		113528	0					
ANR	113570	MemberAccess	CG ( context ) . labels		113528	0					
ANR	113571	CallExpression	CG ( context )		113528	0					
ANR	113572	Callee	CG		113528	0					
ANR	113573	Identifier	CG		113528	0					
ANR	113574	ArgumentList	context		113528	1					
ANR	113575	Argument	context		113528	0					
ANR	113576	Identifier	context		113528	0					
ANR	113577	Identifier	labels		113528	1					
ANR	113578	ExpressionStatement	"zend_hash_init ( CG ( context ) . labels , 8 , NULL , label_ptr_dtor , 0 )"	3764:2:109188:109250	113528	1	True				
ANR	113579	CallExpression	"zend_hash_init ( CG ( context ) . labels , 8 , NULL , label_ptr_dtor , 0 )"		113528	0					
ANR	113580	Callee	zend_hash_init		113528	0					
ANR	113581	Identifier	zend_hash_init		113528	0					
ANR	113582	ArgumentList	CG ( context ) . labels		113528	1					
ANR	113583	Argument	CG ( context ) . labels		113528	0					
ANR	113584	MemberAccess	CG ( context ) . labels		113528	0					
ANR	113585	CallExpression	CG ( context )		113528	0					
ANR	113586	Callee	CG		113528	0					
ANR	113587	Identifier	CG		113528	0					
ANR	113588	ArgumentList	context		113528	1					
ANR	113589	Argument	context		113528	0					
ANR	113590	Identifier	context		113528	0					
ANR	113591	Identifier	labels		113528	1					
ANR	113592	Argument	8		113528	1					
ANR	113593	PrimaryExpression	8		113528	0					
ANR	113594	Argument	NULL		113528	2					
ANR	113595	Identifier	NULL		113528	0					
ANR	113596	Argument	label_ptr_dtor		113528	3					
ANR	113597	Identifier	label_ptr_dtor		113528	0					
ANR	113598	Argument	0		113528	4					
ANR	113599	PrimaryExpression	0		113528	0					
ANR	113600	ExpressionStatement	dest . brk_cont = CG ( context ) . current_brk_cont	3767:1:109257:109301	113528	3	True				
ANR	113601	AssignmentExpression	dest . brk_cont = CG ( context ) . current_brk_cont		113528	0		=			
ANR	113602	MemberAccess	dest . brk_cont		113528	0					
ANR	113603	Identifier	dest		113528	0					
ANR	113604	Identifier	brk_cont		113528	1					
ANR	113605	MemberAccess	CG ( context ) . current_brk_cont		113528	1					
ANR	113606	CallExpression	CG ( context )		113528	0					
ANR	113607	Callee	CG		113528	0					
ANR	113608	Identifier	CG		113528	0					
ANR	113609	ArgumentList	context		113528	1					
ANR	113610	Argument	context		113528	0					
ANR	113611	Identifier	context		113528	0					
ANR	113612	Identifier	current_brk_cont		113528	1					
ANR	113613	ExpressionStatement	dest . opline_num = get_next_op_number ( CG ( active_op_array ) )	3768:1:109304:109361	113528	4	True				
ANR	113614	AssignmentExpression	dest . opline_num = get_next_op_number ( CG ( active_op_array ) )		113528	0		=			
ANR	113615	MemberAccess	dest . opline_num		113528	0					
ANR	113616	Identifier	dest		113528	0					
ANR	113617	Identifier	opline_num		113528	1					
ANR	113618	CallExpression	get_next_op_number ( CG ( active_op_array ) )		113528	1					
ANR	113619	Callee	get_next_op_number		113528	0					
ANR	113620	Identifier	get_next_op_number		113528	0					
ANR	113621	ArgumentList	CG ( active_op_array )		113528	1					
ANR	113622	Argument	CG ( active_op_array )		113528	0					
ANR	113623	CallExpression	CG ( active_op_array )		113528	0					
ANR	113624	Callee	CG		113528	0					
ANR	113625	Identifier	CG		113528	0					
ANR	113626	ArgumentList	active_op_array		113528	1					
ANR	113627	Argument	active_op_array		113528	0					
ANR	113628	Identifier	active_op_array		113528	0					
ANR	113629	IfStatement	"if ( ! zend_hash_add_mem ( CG ( context ) . labels , label , & dest , sizeof ( zend_label ) ) )"		113528	5					
ANR	113630	Condition	"! zend_hash_add_mem ( CG ( context ) . labels , label , & dest , sizeof ( zend_label ) )"	3770:5:109369:109440	113528	0	True				
ANR	113631	UnaryOperationExpression	"! zend_hash_add_mem ( CG ( context ) . labels , label , & dest , sizeof ( zend_label ) )"		113528	0					
ANR	113632	UnaryOperator	!		113528	0					
ANR	113633	CallExpression	"zend_hash_add_mem ( CG ( context ) . labels , label , & dest , sizeof ( zend_label ) )"		113528	1					
ANR	113634	Callee	zend_hash_add_mem		113528	0					
ANR	113635	Identifier	zend_hash_add_mem		113528	0					
ANR	113636	ArgumentList	CG ( context ) . labels		113528	1					
ANR	113637	Argument	CG ( context ) . labels		113528	0					
ANR	113638	MemberAccess	CG ( context ) . labels		113528	0					
ANR	113639	CallExpression	CG ( context )		113528	0					
ANR	113640	Callee	CG		113528	0					
ANR	113641	Identifier	CG		113528	0					
ANR	113642	ArgumentList	context		113528	1					
ANR	113643	Argument	context		113528	0					
ANR	113644	Identifier	context		113528	0					
ANR	113645	Identifier	labels		113528	1					
ANR	113646	Argument	label		113528	1					
ANR	113647	Identifier	label		113528	0					
ANR	113648	Argument	& dest		113528	2					
ANR	113649	UnaryOperationExpression	& dest		113528	0					
ANR	113650	UnaryOperator	&		113528	0					
ANR	113651	Identifier	dest		113528	1					
ANR	113652	Argument	sizeof ( zend_label )		113528	3					
ANR	113653	SizeofExpression	sizeof ( zend_label )		113528	0					
ANR	113654	Sizeof	sizeof		113528	0					
ANR	113655	SizeofOperand	zend_label		113528	1					
ANR	113656	CompoundStatement		13:79:399:399	113528	1					
ANR	113657	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Label '%s' already defined"" , ZSTR_VAL ( label ) )"	3771:2:109447:109530	113528	0	True				
ANR	113658	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Label '%s' already defined"" , ZSTR_VAL ( label ) )"		113528	0					
ANR	113659	Callee	zend_error_noreturn		113528	0					
ANR	113660	Identifier	zend_error_noreturn		113528	0					
ANR	113661	ArgumentList	E_COMPILE_ERROR		113528	1					
ANR	113662	Argument	E_COMPILE_ERROR		113528	0					
ANR	113663	Identifier	E_COMPILE_ERROR		113528	0					
ANR	113664	Argument	"""Label '%s' already defined"""		113528	1					
ANR	113665	PrimaryExpression	"""Label '%s' already defined"""		113528	0					
ANR	113666	Argument	ZSTR_VAL ( label )		113528	2					
ANR	113667	CallExpression	ZSTR_VAL ( label )		113528	0					
ANR	113668	Callee	ZSTR_VAL		113528	0					
ANR	113669	Identifier	ZSTR_VAL		113528	0					
ANR	113670	ArgumentList	label		113528	1					
ANR	113671	Argument	label		113528	0					
ANR	113672	Identifier	label		113528	0					
ANR	113673	ReturnType	void		113528	1					
ANR	113674	Identifier	zend_compile_label		113528	2					
ANR	113675	ParameterList	zend_ast * ast		113528	3					
ANR	113676	Parameter	zend_ast * ast	3757:24:109018:109030	113528	0	True				
ANR	113677	ParameterType	zend_ast *		113528	0					
ANR	113678	Identifier	ast		113528	1					
ANR	113679	CFGEntryNode	ENTRY		113528		True				
ANR	113680	CFGExitNode	EXIT		113528		True				
ANR	113681	Symbol	zend_hash_add_mem		113528						
ANR	113682	Symbol	ast		113528						
ANR	113683	Symbol	NULL		113528						
ANR	113684	Symbol	CG		113528						
ANR	113685	Symbol	dest . brk_cont		113528						
ANR	113686	Symbol	active_op_array		113528						
ANR	113687	Symbol	E_COMPILE_ERROR		113528						
ANR	113688	Symbol	label		113528						
ANR	113689	Symbol	dest		113528						
ANR	113690	Symbol	dest . opline_num		113528						
ANR	113691	Symbol	ZSTR_VAL		113528						
ANR	113692	Symbol	zend_ast_get_str		113528						
ANR	113693	Symbol	* ast		113528						
ANR	113694	Symbol	label_ptr_dtor		113528						
ANR	113695	Symbol	* * ast		113528						
ANR	113696	Symbol	& dest		113528						
ANR	113697	Symbol	context		113528						
ANR	113698	Symbol	* ast -> child		113528						
ANR	113699	Symbol	ast -> child		113528						
ANR	113700	Symbol	CG ( context ) . labels		113528						
ANR	113701	Symbol	get_next_op_number		113528						
ANR	113702	Symbol	CG ( context ) . current_brk_cont		113528						
ANR	113703	Function	zend_compile_while	3776:0:109548:110128							
ANR	113704	FunctionDef	zend_compile_while (zend_ast * ast)		113703	0					
ANR	113705	CompoundStatement		3777:0:109597:110128	113703	0					
ANR	113706	IdentifierDeclStatement	zend_ast * cond_ast = ast -> child [ 0 ] ;	3778:1:109600:109634	113703	0	True				
ANR	113707	IdentifierDecl	* cond_ast = ast -> child [ 0 ]		113703	0					
ANR	113708	IdentifierDeclType	zend_ast *		113703	0					
ANR	113709	Identifier	cond_ast		113703	1					
ANR	113710	AssignmentExpression	* cond_ast = ast -> child [ 0 ]		113703	2		=			
ANR	113711	Identifier	cond_ast		113703	0					
ANR	113712	ArrayIndexing	ast -> child [ 0 ]		113703	1					
ANR	113713	PtrMemberAccess	ast -> child		113703	0					
ANR	113714	Identifier	ast		113703	0					
ANR	113715	Identifier	child		113703	1					
ANR	113716	PrimaryExpression	0		113703	1					
ANR	113717	IdentifierDeclStatement	zend_ast * stmt_ast = ast -> child [ 1 ] ;	3779:1:109637:109671	113703	1	True				
ANR	113718	IdentifierDecl	* stmt_ast = ast -> child [ 1 ]		113703	0					
ANR	113719	IdentifierDeclType	zend_ast *		113703	0					
ANR	113720	Identifier	stmt_ast		113703	1					
ANR	113721	AssignmentExpression	* stmt_ast = ast -> child [ 1 ]		113703	2		=			
ANR	113722	Identifier	stmt_ast		113703	0					
ANR	113723	ArrayIndexing	ast -> child [ 1 ]		113703	1					
ANR	113724	PtrMemberAccess	ast -> child		113703	0					
ANR	113725	Identifier	ast		113703	0					
ANR	113726	Identifier	child		113703	1					
ANR	113727	PrimaryExpression	1		113703	1					
ANR	113728	IdentifierDeclStatement	znode cond_node ;	3780:1:109674:109689	113703	2	True				
ANR	113729	IdentifierDecl	cond_node		113703	0					
ANR	113730	IdentifierDeclType	znode		113703	0					
ANR	113731	Identifier	cond_node		113703	1					
ANR	113732	IdentifierDeclStatement	"uint32_t opnum_start , opnum_jmp , opnum_cond ;"	3781:1:109692:109735	113703	3	True				
ANR	113733	IdentifierDecl	opnum_start		113703	0					
ANR	113734	IdentifierDeclType	uint32_t		113703	0					
ANR	113735	Identifier	opnum_start		113703	1					
ANR	113736	IdentifierDecl	opnum_jmp		113703	1					
ANR	113737	IdentifierDeclType	uint32_t		113703	0					
ANR	113738	Identifier	opnum_jmp		113703	1					
ANR	113739	IdentifierDecl	opnum_cond		113703	2					
ANR	113740	IdentifierDeclType	uint32_t		113703	0					
ANR	113741	Identifier	opnum_cond		113703	1					
ANR	113742	ExpressionStatement	opnum_jmp = zend_emit_jump ( 0 )	3783:1:109739:109768	113703	4	True				
ANR	113743	AssignmentExpression	opnum_jmp = zend_emit_jump ( 0 )		113703	0		=			
ANR	113744	Identifier	opnum_jmp		113703	0					
ANR	113745	CallExpression	zend_emit_jump ( 0 )		113703	1					
ANR	113746	Callee	zend_emit_jump		113703	0					
ANR	113747	Identifier	zend_emit_jump		113703	0					
ANR	113748	ArgumentList	0		113703	1					
ANR	113749	Argument	0		113703	0					
ANR	113750	PrimaryExpression	0		113703	0					
ANR	113751	ExpressionStatement	"zend_begin_loop ( ZEND_NOP , NULL )"	3785:1:109772:109803	113703	5	True				
ANR	113752	CallExpression	"zend_begin_loop ( ZEND_NOP , NULL )"		113703	0					
ANR	113753	Callee	zend_begin_loop		113703	0					
ANR	113754	Identifier	zend_begin_loop		113703	0					
ANR	113755	ArgumentList	ZEND_NOP		113703	1					
ANR	113756	Argument	ZEND_NOP		113703	0					
ANR	113757	Identifier	ZEND_NOP		113703	0					
ANR	113758	Argument	NULL		113703	1					
ANR	113759	Identifier	NULL		113703	0					
ANR	113760	ExpressionStatement	opnum_start = get_next_op_number ( CG ( active_op_array ) )	3787:1:109807:109860	113703	6	True				
ANR	113761	AssignmentExpression	opnum_start = get_next_op_number ( CG ( active_op_array ) )		113703	0		=			
ANR	113762	Identifier	opnum_start		113703	0					
ANR	113763	CallExpression	get_next_op_number ( CG ( active_op_array ) )		113703	1					
ANR	113764	Callee	get_next_op_number		113703	0					
ANR	113765	Identifier	get_next_op_number		113703	0					
ANR	113766	ArgumentList	CG ( active_op_array )		113703	1					
ANR	113767	Argument	CG ( active_op_array )		113703	0					
ANR	113768	CallExpression	CG ( active_op_array )		113703	0					
ANR	113769	Callee	CG		113703	0					
ANR	113770	Identifier	CG		113703	0					
ANR	113771	ArgumentList	active_op_array		113703	1					
ANR	113772	Argument	active_op_array		113703	0					
ANR	113773	Identifier	active_op_array		113703	0					
ANR	113774	ExpressionStatement	zend_compile_stmt ( stmt_ast )	3788:1:109863:109890	113703	7	True				
ANR	113775	CallExpression	zend_compile_stmt ( stmt_ast )		113703	0					
ANR	113776	Callee	zend_compile_stmt		113703	0					
ANR	113777	Identifier	zend_compile_stmt		113703	0					
ANR	113778	ArgumentList	stmt_ast		113703	1					
ANR	113779	Argument	stmt_ast		113703	0					
ANR	113780	Identifier	stmt_ast		113703	0					
ANR	113781	ExpressionStatement	opnum_cond = get_next_op_number ( CG ( active_op_array ) )	3790:1:109894:109946	113703	8	True				
ANR	113782	AssignmentExpression	opnum_cond = get_next_op_number ( CG ( active_op_array ) )		113703	0		=			
ANR	113783	Identifier	opnum_cond		113703	0					
ANR	113784	CallExpression	get_next_op_number ( CG ( active_op_array ) )		113703	1					
ANR	113785	Callee	get_next_op_number		113703	0					
ANR	113786	Identifier	get_next_op_number		113703	0					
ANR	113787	ArgumentList	CG ( active_op_array )		113703	1					
ANR	113788	Argument	CG ( active_op_array )		113703	0					
ANR	113789	CallExpression	CG ( active_op_array )		113703	0					
ANR	113790	Callee	CG		113703	0					
ANR	113791	Identifier	CG		113703	0					
ANR	113792	ArgumentList	active_op_array		113703	1					
ANR	113793	Argument	active_op_array		113703	0					
ANR	113794	Identifier	active_op_array		113703	0					
ANR	113795	ExpressionStatement	"zend_update_jump_target ( opnum_jmp , opnum_cond )"	3791:1:109949:109995	113703	9	True				
ANR	113796	CallExpression	"zend_update_jump_target ( opnum_jmp , opnum_cond )"		113703	0					
ANR	113797	Callee	zend_update_jump_target		113703	0					
ANR	113798	Identifier	zend_update_jump_target		113703	0					
ANR	113799	ArgumentList	opnum_jmp		113703	1					
ANR	113800	Argument	opnum_jmp		113703	0					
ANR	113801	Identifier	opnum_jmp		113703	0					
ANR	113802	Argument	opnum_cond		113703	1					
ANR	113803	Identifier	opnum_cond		113703	0					
ANR	113804	ExpressionStatement	"zend_compile_expr ( & cond_node , cond_ast )"	3792:1:109998:110037	113703	10	True				
ANR	113805	CallExpression	"zend_compile_expr ( & cond_node , cond_ast )"		113703	0					
ANR	113806	Callee	zend_compile_expr		113703	0					
ANR	113807	Identifier	zend_compile_expr		113703	0					
ANR	113808	ArgumentList	& cond_node		113703	1					
ANR	113809	Argument	& cond_node		113703	0					
ANR	113810	UnaryOperationExpression	& cond_node		113703	0					
ANR	113811	UnaryOperator	&		113703	0					
ANR	113812	Identifier	cond_node		113703	1					
ANR	113813	Argument	cond_ast		113703	1					
ANR	113814	Identifier	cond_ast		113703	0					
ANR	113815	ExpressionStatement	"zend_emit_cond_jump ( ZEND_JMPNZ , & cond_node , opnum_start )"	3794:1:110041:110097	113703	11	True				
ANR	113816	CallExpression	"zend_emit_cond_jump ( ZEND_JMPNZ , & cond_node , opnum_start )"		113703	0					
ANR	113817	Callee	zend_emit_cond_jump		113703	0					
ANR	113818	Identifier	zend_emit_cond_jump		113703	0					
ANR	113819	ArgumentList	ZEND_JMPNZ		113703	1					
ANR	113820	Argument	ZEND_JMPNZ		113703	0					
ANR	113821	Identifier	ZEND_JMPNZ		113703	0					
ANR	113822	Argument	& cond_node		113703	1					
ANR	113823	UnaryOperationExpression	& cond_node		113703	0					
ANR	113824	UnaryOperator	&		113703	0					
ANR	113825	Identifier	cond_node		113703	1					
ANR	113826	Argument	opnum_start		113703	2					
ANR	113827	Identifier	opnum_start		113703	0					
ANR	113828	ExpressionStatement	zend_end_loop ( opnum_cond )	3796:1:110101:110126	113703	12	True				
ANR	113829	CallExpression	zend_end_loop ( opnum_cond )		113703	0					
ANR	113830	Callee	zend_end_loop		113703	0					
ANR	113831	Identifier	zend_end_loop		113703	0					
ANR	113832	ArgumentList	opnum_cond		113703	1					
ANR	113833	Argument	opnum_cond		113703	0					
ANR	113834	Identifier	opnum_cond		113703	0					
ANR	113835	ReturnType	void		113703	1					
ANR	113836	Identifier	zend_compile_while		113703	2					
ANR	113837	ParameterList	zend_ast * ast		113703	3					
ANR	113838	Parameter	zend_ast * ast	3776:24:109572:109584	113703	0	True				
ANR	113839	ParameterType	zend_ast *		113703	0					
ANR	113840	Identifier	ast		113703	1					
ANR	113841	CFGEntryNode	ENTRY		113703		True				
ANR	113842	CFGExitNode	EXIT		113703		True				
ANR	113843	Symbol	zend_emit_jump		113703						
ANR	113844	Symbol	ZEND_JMPNZ		113703						
ANR	113845	Symbol	stmt_ast		113703						
ANR	113846	Symbol	opnum_jmp		113703						
ANR	113847	Symbol	opnum_start		113703						
ANR	113848	Symbol	ast		113703						
ANR	113849	Symbol	NULL		113703						
ANR	113850	Symbol	CG		113703						
ANR	113851	Symbol	cond_node		113703						
ANR	113852	Symbol	active_op_array		113703						
ANR	113853	Symbol	ZEND_NOP		113703						
ANR	113854	Symbol	cond_ast		113703						
ANR	113855	Symbol	opnum_cond		113703						
ANR	113856	Symbol	* ast		113703						
ANR	113857	Symbol	* * ast		113703						
ANR	113858	Symbol	* ast -> child		113703						
ANR	113859	Symbol	ast -> child		113703						
ANR	113860	Symbol	get_next_op_number		113703						
ANR	113861	Symbol	& cond_node		113703						
ANR	113862	Function	zend_compile_do_while	3800:0:110141:110632							
ANR	113863	FunctionDef	zend_compile_do_while (zend_ast * ast)		113862	0					
ANR	113864	CompoundStatement		3801:0:110193:110632	113862	0					
ANR	113865	IdentifierDeclStatement	zend_ast * stmt_ast = ast -> child [ 0 ] ;	3802:1:110196:110230	113862	0	True				
ANR	113866	IdentifierDecl	* stmt_ast = ast -> child [ 0 ]		113862	0					
ANR	113867	IdentifierDeclType	zend_ast *		113862	0					
ANR	113868	Identifier	stmt_ast		113862	1					
ANR	113869	AssignmentExpression	* stmt_ast = ast -> child [ 0 ]		113862	2		=			
ANR	113870	Identifier	stmt_ast		113862	0					
ANR	113871	ArrayIndexing	ast -> child [ 0 ]		113862	1					
ANR	113872	PtrMemberAccess	ast -> child		113862	0					
ANR	113873	Identifier	ast		113862	0					
ANR	113874	Identifier	child		113862	1					
ANR	113875	PrimaryExpression	0		113862	1					
ANR	113876	IdentifierDeclStatement	zend_ast * cond_ast = ast -> child [ 1 ] ;	3803:1:110233:110267	113862	1	True				
ANR	113877	IdentifierDecl	* cond_ast = ast -> child [ 1 ]		113862	0					
ANR	113878	IdentifierDeclType	zend_ast *		113862	0					
ANR	113879	Identifier	cond_ast		113862	1					
ANR	113880	AssignmentExpression	* cond_ast = ast -> child [ 1 ]		113862	2		=			
ANR	113881	Identifier	cond_ast		113862	0					
ANR	113882	ArrayIndexing	ast -> child [ 1 ]		113862	1					
ANR	113883	PtrMemberAccess	ast -> child		113862	0					
ANR	113884	Identifier	ast		113862	0					
ANR	113885	Identifier	child		113862	1					
ANR	113886	PrimaryExpression	1		113862	1					
ANR	113887	IdentifierDeclStatement	znode cond_node ;	3805:1:110271:110286	113862	2	True				
ANR	113888	IdentifierDecl	cond_node		113862	0					
ANR	113889	IdentifierDeclType	znode		113862	0					
ANR	113890	Identifier	cond_node		113862	1					
ANR	113891	IdentifierDeclStatement	"uint32_t opnum_start , opnum_cond ;"	3806:1:110289:110321	113862	3	True				
ANR	113892	IdentifierDecl	opnum_start		113862	0					
ANR	113893	IdentifierDeclType	uint32_t		113862	0					
ANR	113894	Identifier	opnum_start		113862	1					
ANR	113895	IdentifierDecl	opnum_cond		113862	1					
ANR	113896	IdentifierDeclType	uint32_t		113862	0					
ANR	113897	Identifier	opnum_cond		113862	1					
ANR	113898	ExpressionStatement	"zend_begin_loop ( ZEND_NOP , NULL )"	3808:1:110325:110356	113862	4	True				
ANR	113899	CallExpression	"zend_begin_loop ( ZEND_NOP , NULL )"		113862	0					
ANR	113900	Callee	zend_begin_loop		113862	0					
ANR	113901	Identifier	zend_begin_loop		113862	0					
ANR	113902	ArgumentList	ZEND_NOP		113862	1					
ANR	113903	Argument	ZEND_NOP		113862	0					
ANR	113904	Identifier	ZEND_NOP		113862	0					
ANR	113905	Argument	NULL		113862	1					
ANR	113906	Identifier	NULL		113862	0					
ANR	113907	ExpressionStatement	opnum_start = get_next_op_number ( CG ( active_op_array ) )	3810:1:110360:110413	113862	5	True				
ANR	113908	AssignmentExpression	opnum_start = get_next_op_number ( CG ( active_op_array ) )		113862	0		=			
ANR	113909	Identifier	opnum_start		113862	0					
ANR	113910	CallExpression	get_next_op_number ( CG ( active_op_array ) )		113862	1					
ANR	113911	Callee	get_next_op_number		113862	0					
ANR	113912	Identifier	get_next_op_number		113862	0					
ANR	113913	ArgumentList	CG ( active_op_array )		113862	1					
ANR	113914	Argument	CG ( active_op_array )		113862	0					
ANR	113915	CallExpression	CG ( active_op_array )		113862	0					
ANR	113916	Callee	CG		113862	0					
ANR	113917	Identifier	CG		113862	0					
ANR	113918	ArgumentList	active_op_array		113862	1					
ANR	113919	Argument	active_op_array		113862	0					
ANR	113920	Identifier	active_op_array		113862	0					
ANR	113921	ExpressionStatement	zend_compile_stmt ( stmt_ast )	3811:1:110416:110443	113862	6	True				
ANR	113922	CallExpression	zend_compile_stmt ( stmt_ast )		113862	0					
ANR	113923	Callee	zend_compile_stmt		113862	0					
ANR	113924	Identifier	zend_compile_stmt		113862	0					
ANR	113925	ArgumentList	stmt_ast		113862	1					
ANR	113926	Argument	stmt_ast		113862	0					
ANR	113927	Identifier	stmt_ast		113862	0					
ANR	113928	ExpressionStatement	opnum_cond = get_next_op_number ( CG ( active_op_array ) )	3813:1:110447:110499	113862	7	True				
ANR	113929	AssignmentExpression	opnum_cond = get_next_op_number ( CG ( active_op_array ) )		113862	0		=			
ANR	113930	Identifier	opnum_cond		113862	0					
ANR	113931	CallExpression	get_next_op_number ( CG ( active_op_array ) )		113862	1					
ANR	113932	Callee	get_next_op_number		113862	0					
ANR	113933	Identifier	get_next_op_number		113862	0					
ANR	113934	ArgumentList	CG ( active_op_array )		113862	1					
ANR	113935	Argument	CG ( active_op_array )		113862	0					
ANR	113936	CallExpression	CG ( active_op_array )		113862	0					
ANR	113937	Callee	CG		113862	0					
ANR	113938	Identifier	CG		113862	0					
ANR	113939	ArgumentList	active_op_array		113862	1					
ANR	113940	Argument	active_op_array		113862	0					
ANR	113941	Identifier	active_op_array		113862	0					
ANR	113942	ExpressionStatement	"zend_compile_expr ( & cond_node , cond_ast )"	3814:1:110502:110541	113862	8	True				
ANR	113943	CallExpression	"zend_compile_expr ( & cond_node , cond_ast )"		113862	0					
ANR	113944	Callee	zend_compile_expr		113862	0					
ANR	113945	Identifier	zend_compile_expr		113862	0					
ANR	113946	ArgumentList	& cond_node		113862	1					
ANR	113947	Argument	& cond_node		113862	0					
ANR	113948	UnaryOperationExpression	& cond_node		113862	0					
ANR	113949	UnaryOperator	&		113862	0					
ANR	113950	Identifier	cond_node		113862	1					
ANR	113951	Argument	cond_ast		113862	1					
ANR	113952	Identifier	cond_ast		113862	0					
ANR	113953	ExpressionStatement	"zend_emit_cond_jump ( ZEND_JMPNZ , & cond_node , opnum_start )"	3816:1:110545:110601	113862	9	True				
ANR	113954	CallExpression	"zend_emit_cond_jump ( ZEND_JMPNZ , & cond_node , opnum_start )"		113862	0					
ANR	113955	Callee	zend_emit_cond_jump		113862	0					
ANR	113956	Identifier	zend_emit_cond_jump		113862	0					
ANR	113957	ArgumentList	ZEND_JMPNZ		113862	1					
ANR	113958	Argument	ZEND_JMPNZ		113862	0					
ANR	113959	Identifier	ZEND_JMPNZ		113862	0					
ANR	113960	Argument	& cond_node		113862	1					
ANR	113961	UnaryOperationExpression	& cond_node		113862	0					
ANR	113962	UnaryOperator	&		113862	0					
ANR	113963	Identifier	cond_node		113862	1					
ANR	113964	Argument	opnum_start		113862	2					
ANR	113965	Identifier	opnum_start		113862	0					
ANR	113966	ExpressionStatement	zend_end_loop ( opnum_cond )	3818:1:110605:110630	113862	10	True				
ANR	113967	CallExpression	zend_end_loop ( opnum_cond )		113862	0					
ANR	113968	Callee	zend_end_loop		113862	0					
ANR	113969	Identifier	zend_end_loop		113862	0					
ANR	113970	ArgumentList	opnum_cond		113862	1					
ANR	113971	Argument	opnum_cond		113862	0					
ANR	113972	Identifier	opnum_cond		113862	0					
ANR	113973	ReturnType	void		113862	1					
ANR	113974	Identifier	zend_compile_do_while		113862	2					
ANR	113975	ParameterList	zend_ast * ast		113862	3					
ANR	113976	Parameter	zend_ast * ast	3800:27:110168:110180	113862	0	True				
ANR	113977	ParameterType	zend_ast *		113862	0					
ANR	113978	Identifier	ast		113862	1					
ANR	113979	CFGEntryNode	ENTRY		113862		True				
ANR	113980	CFGExitNode	EXIT		113862		True				
ANR	113981	Symbol	ZEND_JMPNZ		113862						
ANR	113982	Symbol	stmt_ast		113862						
ANR	113983	Symbol	opnum_start		113862						
ANR	113984	Symbol	ast		113862						
ANR	113985	Symbol	NULL		113862						
ANR	113986	Symbol	CG		113862						
ANR	113987	Symbol	cond_node		113862						
ANR	113988	Symbol	active_op_array		113862						
ANR	113989	Symbol	ZEND_NOP		113862						
ANR	113990	Symbol	cond_ast		113862						
ANR	113991	Symbol	opnum_cond		113862						
ANR	113992	Symbol	* ast		113862						
ANR	113993	Symbol	* * ast		113862						
ANR	113994	Symbol	* ast -> child		113862						
ANR	113995	Symbol	ast -> child		113862						
ANR	113996	Symbol	get_next_op_number		113862						
ANR	113997	Symbol	& cond_node		113862						
ANR	113998	Function	zend_compile_expr_list	3822:0:110645:111019							
ANR	113999	FunctionDef	"zend_compile_expr_list (znode * result , zend_ast * ast)"		113998	0					
ANR	114000	CompoundStatement		3823:0:110713:111019	113998	0					
ANR	114001	IdentifierDeclStatement	zend_ast_list * list ;	3824:1:110716:110735	113998	0	True				
ANR	114002	IdentifierDecl	* list		113998	0					
ANR	114003	IdentifierDeclType	zend_ast_list *		113998	0					
ANR	114004	Identifier	list		113998	1					
ANR	114005	IdentifierDeclStatement	uint32_t i ;	3825:1:110738:110748	113998	1	True				
ANR	114006	IdentifierDecl	i		113998	0					
ANR	114007	IdentifierDeclType	uint32_t		113998	0					
ANR	114008	Identifier	i		113998	1					
ANR	114009	ExpressionStatement	result -> op_type = IS_CONST	3827:1:110752:110778	113998	2	True				
ANR	114010	AssignmentExpression	result -> op_type = IS_CONST		113998	0		=			
ANR	114011	PtrMemberAccess	result -> op_type		113998	0					
ANR	114012	Identifier	result		113998	0					
ANR	114013	Identifier	op_type		113998	1					
ANR	114014	Identifier	IS_CONST		113998	1					
ANR	114015	ExpressionStatement	ZVAL_TRUE ( & result -> u . constant )	3828:1:110781:110811	113998	3	True				
ANR	114016	CallExpression	ZVAL_TRUE ( & result -> u . constant )		113998	0					
ANR	114017	Callee	ZVAL_TRUE		113998	0					
ANR	114018	Identifier	ZVAL_TRUE		113998	0					
ANR	114019	ArgumentList	& result -> u . constant		113998	1					
ANR	114020	Argument	& result -> u . constant		113998	0					
ANR	114021	UnaryOperationExpression	& result -> u . constant		113998	0					
ANR	114022	UnaryOperator	&		113998	0					
ANR	114023	MemberAccess	result -> u . constant		113998	1					
ANR	114024	PtrMemberAccess	result -> u		113998	0					
ANR	114025	Identifier	result		113998	0					
ANR	114026	Identifier	u		113998	1					
ANR	114027	Identifier	constant		113998	1					
ANR	114028	IfStatement	if ( ! ast )		113998	4					
ANR	114029	Condition	! ast	3830:5:110819:110822	113998	0	True				
ANR	114030	UnaryOperationExpression	! ast		113998	0					
ANR	114031	UnaryOperator	!		113998	0					
ANR	114032	Identifier	ast		113998	1					
ANR	114033	CompoundStatement		8:11:111:111	113998	1					
ANR	114034	ReturnStatement	return ;	3831:2:110829:110835	113998	0	True				
ANR	114035	ExpressionStatement	list = zend_ast_get_list ( ast )	3834:1:110842:110871	113998	5	True				
ANR	114036	AssignmentExpression	list = zend_ast_get_list ( ast )		113998	0		=			
ANR	114037	Identifier	list		113998	0					
ANR	114038	CallExpression	zend_ast_get_list ( ast )		113998	1					
ANR	114039	Callee	zend_ast_get_list		113998	0					
ANR	114040	Identifier	zend_ast_get_list		113998	0					
ANR	114041	ArgumentList	ast		113998	1					
ANR	114042	Argument	ast		113998	0					
ANR	114043	Identifier	ast		113998	0					
ANR	114044	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		113998	6					
ANR	114045	ForInit	i = 0 ;	3835:6:110879:110884	113998	0	True				
ANR	114046	AssignmentExpression	i = 0		113998	0		=			
ANR	114047	Identifier	i		113998	0					
ANR	114048	PrimaryExpression	0		113998	1					
ANR	114049	Condition	i < list -> children	3835:13:110886:110903	113998	1	True				
ANR	114050	RelationalExpression	i < list -> children		113998	0		<			
ANR	114051	Identifier	i		113998	0					
ANR	114052	PtrMemberAccess	list -> children		113998	1					
ANR	114053	Identifier	list		113998	0					
ANR	114054	Identifier	children		113998	1					
ANR	114055	UnaryExpression	++ i	3835:33:110906:110908	113998	2	True				
ANR	114056	IncDec	++		113998	0					
ANR	114057	Identifier	i		113998	1					
ANR	114058	CompoundStatement		14:2:201:236	113998	3					
ANR	114059	IdentifierDeclStatement	zend_ast * expr_ast = list -> child [ i ] ;	3836:2:110915:110950	113998	0	True				
ANR	114060	IdentifierDecl	* expr_ast = list -> child [ i ]		113998	0					
ANR	114061	IdentifierDeclType	zend_ast *		113998	0					
ANR	114062	Identifier	expr_ast		113998	1					
ANR	114063	AssignmentExpression	* expr_ast = list -> child [ i ]		113998	2		=			
ANR	114064	Identifier	expr_ast		113998	0					
ANR	114065	ArrayIndexing	list -> child [ i ]		113998	1					
ANR	114066	PtrMemberAccess	list -> child		113998	0					
ANR	114067	Identifier	list		113998	0					
ANR	114068	Identifier	child		113998	1					
ANR	114069	Identifier	i		113998	1					
ANR	114070	ExpressionStatement	zend_do_free ( result )	3838:2:110955:110975	113998	1	True				
ANR	114071	CallExpression	zend_do_free ( result )		113998	0					
ANR	114072	Callee	zend_do_free		113998	0					
ANR	114073	Identifier	zend_do_free		113998	0					
ANR	114074	ArgumentList	result		113998	1					
ANR	114075	Argument	result		113998	0					
ANR	114076	Identifier	result		113998	0					
ANR	114077	ExpressionStatement	"zend_compile_expr ( result , expr_ast )"	3839:2:110979:111014	113998	2	True				
ANR	114078	CallExpression	"zend_compile_expr ( result , expr_ast )"		113998	0					
ANR	114079	Callee	zend_compile_expr		113998	0					
ANR	114080	Identifier	zend_compile_expr		113998	0					
ANR	114081	ArgumentList	result		113998	1					
ANR	114082	Argument	result		113998	0					
ANR	114083	Identifier	result		113998	0					
ANR	114084	Argument	expr_ast		113998	1					
ANR	114085	Identifier	expr_ast		113998	0					
ANR	114086	ReturnType	void		113998	1					
ANR	114087	Identifier	zend_compile_expr_list		113998	2					
ANR	114088	ParameterList	"znode * result , zend_ast * ast"		113998	3					
ANR	114089	Parameter	znode * result	3822:28:110673:110685	113998	0	True				
ANR	114090	ParameterType	znode *		113998	0					
ANR	114091	Identifier	result		113998	1					
ANR	114092	Parameter	zend_ast * ast	3822:43:110688:110700	113998	1	True				
ANR	114093	ParameterType	zend_ast *		113998	0					
ANR	114094	Identifier	ast		113998	1					
ANR	114095	CFGEntryNode	ENTRY		113998		True				
ANR	114096	CFGExitNode	EXIT		113998		True				
ANR	114097	Symbol	IS_CONST		113998						
ANR	114098	Symbol	ast		113998						
ANR	114099	Symbol	& result -> u		113998						
ANR	114100	Symbol	list -> child		113998						
ANR	114101	Symbol	i		113998						
ANR	114102	Symbol	list		113998						
ANR	114103	Symbol	result -> op_type		113998						
ANR	114104	Symbol	expr_ast		113998						
ANR	114105	Symbol	result -> u		113998						
ANR	114106	Symbol	result		113998						
ANR	114107	Symbol	zend_ast_get_list		113998						
ANR	114108	Symbol	* i		113998						
ANR	114109	Symbol	* * list		113998						
ANR	114110	Symbol	* result		113998						
ANR	114111	Symbol	* list		113998						
ANR	114112	Symbol	& result -> u . constant		113998						
ANR	114113	Symbol	* list -> child		113998						
ANR	114114	Symbol	list -> children		113998						
ANR	114115	Function	zend_compile_for	3844:0:111032:111841							
ANR	114116	FunctionDef	zend_compile_for (zend_ast * ast)		114115	0					
ANR	114117	CompoundStatement		3845:0:111079:111841	114115	0					
ANR	114118	IdentifierDeclStatement	zend_ast * init_ast = ast -> child [ 0 ] ;	3846:1:111082:111116	114115	0	True				
ANR	114119	IdentifierDecl	* init_ast = ast -> child [ 0 ]		114115	0					
ANR	114120	IdentifierDeclType	zend_ast *		114115	0					
ANR	114121	Identifier	init_ast		114115	1					
ANR	114122	AssignmentExpression	* init_ast = ast -> child [ 0 ]		114115	2		=			
ANR	114123	Identifier	init_ast		114115	0					
ANR	114124	ArrayIndexing	ast -> child [ 0 ]		114115	1					
ANR	114125	PtrMemberAccess	ast -> child		114115	0					
ANR	114126	Identifier	ast		114115	0					
ANR	114127	Identifier	child		114115	1					
ANR	114128	PrimaryExpression	0		114115	1					
ANR	114129	IdentifierDeclStatement	zend_ast * cond_ast = ast -> child [ 1 ] ;	3847:1:111119:111153	114115	1	True				
ANR	114130	IdentifierDecl	* cond_ast = ast -> child [ 1 ]		114115	0					
ANR	114131	IdentifierDeclType	zend_ast *		114115	0					
ANR	114132	Identifier	cond_ast		114115	1					
ANR	114133	AssignmentExpression	* cond_ast = ast -> child [ 1 ]		114115	2		=			
ANR	114134	Identifier	cond_ast		114115	0					
ANR	114135	ArrayIndexing	ast -> child [ 1 ]		114115	1					
ANR	114136	PtrMemberAccess	ast -> child		114115	0					
ANR	114137	Identifier	ast		114115	0					
ANR	114138	Identifier	child		114115	1					
ANR	114139	PrimaryExpression	1		114115	1					
ANR	114140	IdentifierDeclStatement	zend_ast * loop_ast = ast -> child [ 2 ] ;	3848:1:111156:111190	114115	2	True				
ANR	114141	IdentifierDecl	* loop_ast = ast -> child [ 2 ]		114115	0					
ANR	114142	IdentifierDeclType	zend_ast *		114115	0					
ANR	114143	Identifier	loop_ast		114115	1					
ANR	114144	AssignmentExpression	* loop_ast = ast -> child [ 2 ]		114115	2		=			
ANR	114145	Identifier	loop_ast		114115	0					
ANR	114146	ArrayIndexing	ast -> child [ 2 ]		114115	1					
ANR	114147	PtrMemberAccess	ast -> child		114115	0					
ANR	114148	Identifier	ast		114115	0					
ANR	114149	Identifier	child		114115	1					
ANR	114150	PrimaryExpression	2		114115	1					
ANR	114151	IdentifierDeclStatement	zend_ast * stmt_ast = ast -> child [ 3 ] ;	3849:1:111193:111227	114115	3	True				
ANR	114152	IdentifierDecl	* stmt_ast = ast -> child [ 3 ]		114115	0					
ANR	114153	IdentifierDeclType	zend_ast *		114115	0					
ANR	114154	Identifier	stmt_ast		114115	1					
ANR	114155	AssignmentExpression	* stmt_ast = ast -> child [ 3 ]		114115	2		=			
ANR	114156	Identifier	stmt_ast		114115	0					
ANR	114157	ArrayIndexing	ast -> child [ 3 ]		114115	1					
ANR	114158	PtrMemberAccess	ast -> child		114115	0					
ANR	114159	Identifier	ast		114115	0					
ANR	114160	Identifier	child		114115	1					
ANR	114161	PrimaryExpression	3		114115	1					
ANR	114162	IdentifierDeclStatement	znode result ;	3851:1:111231:111243	114115	4	True				
ANR	114163	IdentifierDecl	result		114115	0					
ANR	114164	IdentifierDeclType	znode		114115	0					
ANR	114165	Identifier	result		114115	1					
ANR	114166	IdentifierDeclStatement	"uint32_t opnum_start , opnum_jmp , opnum_loop ;"	3852:1:111246:111289	114115	5	True				
ANR	114167	IdentifierDecl	opnum_start		114115	0					
ANR	114168	IdentifierDeclType	uint32_t		114115	0					
ANR	114169	Identifier	opnum_start		114115	1					
ANR	114170	IdentifierDecl	opnum_jmp		114115	1					
ANR	114171	IdentifierDeclType	uint32_t		114115	0					
ANR	114172	Identifier	opnum_jmp		114115	1					
ANR	114173	IdentifierDecl	opnum_loop		114115	2					
ANR	114174	IdentifierDeclType	uint32_t		114115	0					
ANR	114175	Identifier	opnum_loop		114115	1					
ANR	114176	ExpressionStatement	"zend_compile_expr_list ( & result , init_ast )"	3854:1:111293:111334	114115	6	True				
ANR	114177	CallExpression	"zend_compile_expr_list ( & result , init_ast )"		114115	0					
ANR	114178	Callee	zend_compile_expr_list		114115	0					
ANR	114179	Identifier	zend_compile_expr_list		114115	0					
ANR	114180	ArgumentList	& result		114115	1					
ANR	114181	Argument	& result		114115	0					
ANR	114182	UnaryOperationExpression	& result		114115	0					
ANR	114183	UnaryOperator	&		114115	0					
ANR	114184	Identifier	result		114115	1					
ANR	114185	Argument	init_ast		114115	1					
ANR	114186	Identifier	init_ast		114115	0					
ANR	114187	ExpressionStatement	zend_do_free ( & result )	3855:1:111337:111358	114115	7	True				
ANR	114188	CallExpression	zend_do_free ( & result )		114115	0					
ANR	114189	Callee	zend_do_free		114115	0					
ANR	114190	Identifier	zend_do_free		114115	0					
ANR	114191	ArgumentList	& result		114115	1					
ANR	114192	Argument	& result		114115	0					
ANR	114193	UnaryOperationExpression	& result		114115	0					
ANR	114194	UnaryOperator	&		114115	0					
ANR	114195	Identifier	result		114115	1					
ANR	114196	ExpressionStatement	opnum_jmp = zend_emit_jump ( 0 )	3857:1:111362:111391	114115	8	True				
ANR	114197	AssignmentExpression	opnum_jmp = zend_emit_jump ( 0 )		114115	0		=			
ANR	114198	Identifier	opnum_jmp		114115	0					
ANR	114199	CallExpression	zend_emit_jump ( 0 )		114115	1					
ANR	114200	Callee	zend_emit_jump		114115	0					
ANR	114201	Identifier	zend_emit_jump		114115	0					
ANR	114202	ArgumentList	0		114115	1					
ANR	114203	Argument	0		114115	0					
ANR	114204	PrimaryExpression	0		114115	0					
ANR	114205	ExpressionStatement	"zend_begin_loop ( ZEND_NOP , NULL )"	3859:1:111395:111426	114115	9	True				
ANR	114206	CallExpression	"zend_begin_loop ( ZEND_NOP , NULL )"		114115	0					
ANR	114207	Callee	zend_begin_loop		114115	0					
ANR	114208	Identifier	zend_begin_loop		114115	0					
ANR	114209	ArgumentList	ZEND_NOP		114115	1					
ANR	114210	Argument	ZEND_NOP		114115	0					
ANR	114211	Identifier	ZEND_NOP		114115	0					
ANR	114212	Argument	NULL		114115	1					
ANR	114213	Identifier	NULL		114115	0					
ANR	114214	ExpressionStatement	opnum_start = get_next_op_number ( CG ( active_op_array ) )	3861:1:111430:111483	114115	10	True				
ANR	114215	AssignmentExpression	opnum_start = get_next_op_number ( CG ( active_op_array ) )		114115	0		=			
ANR	114216	Identifier	opnum_start		114115	0					
ANR	114217	CallExpression	get_next_op_number ( CG ( active_op_array ) )		114115	1					
ANR	114218	Callee	get_next_op_number		114115	0					
ANR	114219	Identifier	get_next_op_number		114115	0					
ANR	114220	ArgumentList	CG ( active_op_array )		114115	1					
ANR	114221	Argument	CG ( active_op_array )		114115	0					
ANR	114222	CallExpression	CG ( active_op_array )		114115	0					
ANR	114223	Callee	CG		114115	0					
ANR	114224	Identifier	CG		114115	0					
ANR	114225	ArgumentList	active_op_array		114115	1					
ANR	114226	Argument	active_op_array		114115	0					
ANR	114227	Identifier	active_op_array		114115	0					
ANR	114228	ExpressionStatement	zend_compile_stmt ( stmt_ast )	3862:1:111486:111513	114115	11	True				
ANR	114229	CallExpression	zend_compile_stmt ( stmt_ast )		114115	0					
ANR	114230	Callee	zend_compile_stmt		114115	0					
ANR	114231	Identifier	zend_compile_stmt		114115	0					
ANR	114232	ArgumentList	stmt_ast		114115	1					
ANR	114233	Argument	stmt_ast		114115	0					
ANR	114234	Identifier	stmt_ast		114115	0					
ANR	114235	ExpressionStatement	opnum_loop = get_next_op_number ( CG ( active_op_array ) )	3864:1:111517:111569	114115	12	True				
ANR	114236	AssignmentExpression	opnum_loop = get_next_op_number ( CG ( active_op_array ) )		114115	0		=			
ANR	114237	Identifier	opnum_loop		114115	0					
ANR	114238	CallExpression	get_next_op_number ( CG ( active_op_array ) )		114115	1					
ANR	114239	Callee	get_next_op_number		114115	0					
ANR	114240	Identifier	get_next_op_number		114115	0					
ANR	114241	ArgumentList	CG ( active_op_array )		114115	1					
ANR	114242	Argument	CG ( active_op_array )		114115	0					
ANR	114243	CallExpression	CG ( active_op_array )		114115	0					
ANR	114244	Callee	CG		114115	0					
ANR	114245	Identifier	CG		114115	0					
ANR	114246	ArgumentList	active_op_array		114115	1					
ANR	114247	Argument	active_op_array		114115	0					
ANR	114248	Identifier	active_op_array		114115	0					
ANR	114249	ExpressionStatement	"zend_compile_expr_list ( & result , loop_ast )"	3865:1:111572:111613	114115	13	True				
ANR	114250	CallExpression	"zend_compile_expr_list ( & result , loop_ast )"		114115	0					
ANR	114251	Callee	zend_compile_expr_list		114115	0					
ANR	114252	Identifier	zend_compile_expr_list		114115	0					
ANR	114253	ArgumentList	& result		114115	1					
ANR	114254	Argument	& result		114115	0					
ANR	114255	UnaryOperationExpression	& result		114115	0					
ANR	114256	UnaryOperator	&		114115	0					
ANR	114257	Identifier	result		114115	1					
ANR	114258	Argument	loop_ast		114115	1					
ANR	114259	Identifier	loop_ast		114115	0					
ANR	114260	ExpressionStatement	zend_do_free ( & result )	3866:1:111616:111637	114115	14	True				
ANR	114261	CallExpression	zend_do_free ( & result )		114115	0					
ANR	114262	Callee	zend_do_free		114115	0					
ANR	114263	Identifier	zend_do_free		114115	0					
ANR	114264	ArgumentList	& result		114115	1					
ANR	114265	Argument	& result		114115	0					
ANR	114266	UnaryOperationExpression	& result		114115	0					
ANR	114267	UnaryOperator	&		114115	0					
ANR	114268	Identifier	result		114115	1					
ANR	114269	ExpressionStatement	zend_update_jump_target_to_next ( opnum_jmp )	3868:1:111641:111683	114115	15	True				
ANR	114270	CallExpression	zend_update_jump_target_to_next ( opnum_jmp )		114115	0					
ANR	114271	Callee	zend_update_jump_target_to_next		114115	0					
ANR	114272	Identifier	zend_update_jump_target_to_next		114115	0					
ANR	114273	ArgumentList	opnum_jmp		114115	1					
ANR	114274	Argument	opnum_jmp		114115	0					
ANR	114275	Identifier	opnum_jmp		114115	0					
ANR	114276	ExpressionStatement	"zend_compile_expr_list ( & result , cond_ast )"	3869:1:111686:111727	114115	16	True				
ANR	114277	CallExpression	"zend_compile_expr_list ( & result , cond_ast )"		114115	0					
ANR	114278	Callee	zend_compile_expr_list		114115	0					
ANR	114279	Identifier	zend_compile_expr_list		114115	0					
ANR	114280	ArgumentList	& result		114115	1					
ANR	114281	Argument	& result		114115	0					
ANR	114282	UnaryOperationExpression	& result		114115	0					
ANR	114283	UnaryOperator	&		114115	0					
ANR	114284	Identifier	result		114115	1					
ANR	114285	Argument	cond_ast		114115	1					
ANR	114286	Identifier	cond_ast		114115	0					
ANR	114287	ExpressionStatement	zend_do_extended_info ( )	3870:1:111730:111753	114115	17	True				
ANR	114288	CallExpression	zend_do_extended_info ( )		114115	0					
ANR	114289	Callee	zend_do_extended_info		114115	0					
ANR	114290	Identifier	zend_do_extended_info		114115	0					
ANR	114291	ArgumentList			114115	1					
ANR	114292	ExpressionStatement	"zend_emit_cond_jump ( ZEND_JMPNZ , & result , opnum_start )"	3872:1:111757:111810	114115	18	True				
ANR	114293	CallExpression	"zend_emit_cond_jump ( ZEND_JMPNZ , & result , opnum_start )"		114115	0					
ANR	114294	Callee	zend_emit_cond_jump		114115	0					
ANR	114295	Identifier	zend_emit_cond_jump		114115	0					
ANR	114296	ArgumentList	ZEND_JMPNZ		114115	1					
ANR	114297	Argument	ZEND_JMPNZ		114115	0					
ANR	114298	Identifier	ZEND_JMPNZ		114115	0					
ANR	114299	Argument	& result		114115	1					
ANR	114300	UnaryOperationExpression	& result		114115	0					
ANR	114301	UnaryOperator	&		114115	0					
ANR	114302	Identifier	result		114115	1					
ANR	114303	Argument	opnum_start		114115	2					
ANR	114304	Identifier	opnum_start		114115	0					
ANR	114305	ExpressionStatement	zend_end_loop ( opnum_loop )	3874:1:111814:111839	114115	19	True				
ANR	114306	CallExpression	zend_end_loop ( opnum_loop )		114115	0					
ANR	114307	Callee	zend_end_loop		114115	0					
ANR	114308	Identifier	zend_end_loop		114115	0					
ANR	114309	ArgumentList	opnum_loop		114115	1					
ANR	114310	Argument	opnum_loop		114115	0					
ANR	114311	Identifier	opnum_loop		114115	0					
ANR	114312	ReturnType	void		114115	1					
ANR	114313	Identifier	zend_compile_for		114115	2					
ANR	114314	ParameterList	zend_ast * ast		114115	3					
ANR	114315	Parameter	zend_ast * ast	3844:22:111054:111066	114115	0	True				
ANR	114316	ParameterType	zend_ast *		114115	0					
ANR	114317	Identifier	ast		114115	1					
ANR	114318	CFGEntryNode	ENTRY		114115		True				
ANR	114319	CFGExitNode	EXIT		114115		True				
ANR	114320	Symbol	zend_emit_jump		114115						
ANR	114321	Symbol	ZEND_JMPNZ		114115						
ANR	114322	Symbol	stmt_ast		114115						
ANR	114323	Symbol	opnum_jmp		114115						
ANR	114324	Symbol	opnum_start		114115						
ANR	114325	Symbol	ast		114115						
ANR	114326	Symbol	NULL		114115						
ANR	114327	Symbol	CG		114115						
ANR	114328	Symbol	active_op_array		114115						
ANR	114329	Symbol	ZEND_NOP		114115						
ANR	114330	Symbol	opnum_loop		114115						
ANR	114331	Symbol	cond_ast		114115						
ANR	114332	Symbol	result		114115						
ANR	114333	Symbol	* ast		114115						
ANR	114334	Symbol	loop_ast		114115						
ANR	114335	Symbol	init_ast		114115						
ANR	114336	Symbol	* * ast		114115						
ANR	114337	Symbol	& result		114115						
ANR	114338	Symbol	* ast -> child		114115						
ANR	114339	Symbol	ast -> child		114115						
ANR	114340	Symbol	get_next_op_number		114115						
ANR	114341	Function	zend_compile_foreach	3878:0:111854:114209							
ANR	114342	FunctionDef	zend_compile_foreach (zend_ast * ast)		114341	0					
ANR	114343	CompoundStatement		3879:0:111905:114209	114341	0					
ANR	114344	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	3880:1:111908:111942	114341	0	True				
ANR	114345	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		114341	0					
ANR	114346	IdentifierDeclType	zend_ast *		114341	0					
ANR	114347	Identifier	expr_ast		114341	1					
ANR	114348	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		114341	2		=			
ANR	114349	Identifier	expr_ast		114341	0					
ANR	114350	ArrayIndexing	ast -> child [ 0 ]		114341	1					
ANR	114351	PtrMemberAccess	ast -> child		114341	0					
ANR	114352	Identifier	ast		114341	0					
ANR	114353	Identifier	child		114341	1					
ANR	114354	PrimaryExpression	0		114341	1					
ANR	114355	IdentifierDeclStatement	zend_ast * value_ast = ast -> child [ 1 ] ;	3881:1:111945:111980	114341	1	True				
ANR	114356	IdentifierDecl	* value_ast = ast -> child [ 1 ]		114341	0					
ANR	114357	IdentifierDeclType	zend_ast *		114341	0					
ANR	114358	Identifier	value_ast		114341	1					
ANR	114359	AssignmentExpression	* value_ast = ast -> child [ 1 ]		114341	2		=			
ANR	114360	Identifier	value_ast		114341	0					
ANR	114361	ArrayIndexing	ast -> child [ 1 ]		114341	1					
ANR	114362	PtrMemberAccess	ast -> child		114341	0					
ANR	114363	Identifier	ast		114341	0					
ANR	114364	Identifier	child		114341	1					
ANR	114365	PrimaryExpression	1		114341	1					
ANR	114366	IdentifierDeclStatement	zend_ast * key_ast = ast -> child [ 2 ] ;	3882:1:111983:112016	114341	2	True				
ANR	114367	IdentifierDecl	* key_ast = ast -> child [ 2 ]		114341	0					
ANR	114368	IdentifierDeclType	zend_ast *		114341	0					
ANR	114369	Identifier	key_ast		114341	1					
ANR	114370	AssignmentExpression	* key_ast = ast -> child [ 2 ]		114341	2		=			
ANR	114371	Identifier	key_ast		114341	0					
ANR	114372	ArrayIndexing	ast -> child [ 2 ]		114341	1					
ANR	114373	PtrMemberAccess	ast -> child		114341	0					
ANR	114374	Identifier	ast		114341	0					
ANR	114375	Identifier	child		114341	1					
ANR	114376	PrimaryExpression	2		114341	1					
ANR	114377	IdentifierDeclStatement	zend_ast * stmt_ast = ast -> child [ 3 ] ;	3883:1:112019:112053	114341	3	True				
ANR	114378	IdentifierDecl	* stmt_ast = ast -> child [ 3 ]		114341	0					
ANR	114379	IdentifierDeclType	zend_ast *		114341	0					
ANR	114380	Identifier	stmt_ast		114341	1					
ANR	114381	AssignmentExpression	* stmt_ast = ast -> child [ 3 ]		114341	2		=			
ANR	114382	Identifier	stmt_ast		114341	0					
ANR	114383	ArrayIndexing	ast -> child [ 3 ]		114341	1					
ANR	114384	PtrMemberAccess	ast -> child		114341	0					
ANR	114385	Identifier	ast		114341	0					
ANR	114386	Identifier	child		114341	1					
ANR	114387	PrimaryExpression	3		114341	1					
ANR	114388	IdentifierDeclStatement	zend_bool by_ref = value_ast -> kind == ZEND_AST_REF ;	3884:1:112056:112106	114341	4	True				
ANR	114389	IdentifierDecl	by_ref = value_ast -> kind == ZEND_AST_REF		114341	0					
ANR	114390	IdentifierDeclType	zend_bool		114341	0					
ANR	114391	Identifier	by_ref		114341	1					
ANR	114392	AssignmentExpression	by_ref = value_ast -> kind == ZEND_AST_REF		114341	2		=			
ANR	114393	Identifier	by_ref		114341	0					
ANR	114394	EqualityExpression	value_ast -> kind == ZEND_AST_REF		114341	1		==			
ANR	114395	PtrMemberAccess	value_ast -> kind		114341	0					
ANR	114396	Identifier	value_ast		114341	0					
ANR	114397	Identifier	kind		114341	1					
ANR	114398	Identifier	ZEND_AST_REF		114341	1					
ANR	114399	IdentifierDeclStatement	zend_bool is_variable = zend_is_variable ( expr_ast ) && ! zend_is_call ( expr_ast ) && zend_can_write_to_variable ( expr_ast ) ;	3885:1:112109:112228	114341	5	True				
ANR	114400	IdentifierDecl	is_variable = zend_is_variable ( expr_ast ) && ! zend_is_call ( expr_ast ) && zend_can_write_to_variable ( expr_ast )		114341	0					
ANR	114401	IdentifierDeclType	zend_bool		114341	0					
ANR	114402	Identifier	is_variable		114341	1					
ANR	114403	AssignmentExpression	is_variable = zend_is_variable ( expr_ast ) && ! zend_is_call ( expr_ast ) && zend_can_write_to_variable ( expr_ast )		114341	2		=			
ANR	114404	Identifier	is_variable		114341	0					
ANR	114405	AndExpression	zend_is_variable ( expr_ast ) && ! zend_is_call ( expr_ast ) && zend_can_write_to_variable ( expr_ast )		114341	1		&&			
ANR	114406	CallExpression	zend_is_variable ( expr_ast )		114341	0					
ANR	114407	Callee	zend_is_variable		114341	0					
ANR	114408	Identifier	zend_is_variable		114341	0					
ANR	114409	ArgumentList	expr_ast		114341	1					
ANR	114410	Argument	expr_ast		114341	0					
ANR	114411	Identifier	expr_ast		114341	0					
ANR	114412	AndExpression	! zend_is_call ( expr_ast ) && zend_can_write_to_variable ( expr_ast )		114341	1		&&			
ANR	114413	UnaryOperationExpression	! zend_is_call ( expr_ast )		114341	0					
ANR	114414	UnaryOperator	!		114341	0					
ANR	114415	CallExpression	zend_is_call ( expr_ast )		114341	1					
ANR	114416	Callee	zend_is_call		114341	0					
ANR	114417	Identifier	zend_is_call		114341	0					
ANR	114418	ArgumentList	expr_ast		114341	1					
ANR	114419	Argument	expr_ast		114341	0					
ANR	114420	Identifier	expr_ast		114341	0					
ANR	114421	CallExpression	zend_can_write_to_variable ( expr_ast )		114341	1					
ANR	114422	Callee	zend_can_write_to_variable		114341	0					
ANR	114423	Identifier	zend_can_write_to_variable		114341	0					
ANR	114424	ArgumentList	expr_ast		114341	1					
ANR	114425	Argument	expr_ast		114341	0					
ANR	114426	Identifier	expr_ast		114341	0					
ANR	114427	IdentifierDeclStatement	"znode expr_node , reset_node , value_node , key_node ;"	3888:1:112232:112281	114341	6	True				
ANR	114428	IdentifierDecl	expr_node		114341	0					
ANR	114429	IdentifierDeclType	znode		114341	0					
ANR	114430	Identifier	expr_node		114341	1					
ANR	114431	IdentifierDecl	reset_node		114341	1					
ANR	114432	IdentifierDeclType	znode		114341	0					
ANR	114433	Identifier	reset_node		114341	1					
ANR	114434	IdentifierDecl	value_node		114341	2					
ANR	114435	IdentifierDeclType	znode		114341	0					
ANR	114436	Identifier	value_node		114341	1					
ANR	114437	IdentifierDecl	key_node		114341	3					
ANR	114438	IdentifierDeclType	znode		114341	0					
ANR	114439	Identifier	key_node		114341	1					
ANR	114440	IdentifierDeclStatement	zend_op * opline ;	3889:1:112284:112299	114341	7	True				
ANR	114441	IdentifierDecl	* opline		114341	0					
ANR	114442	IdentifierDeclType	zend_op *		114341	0					
ANR	114443	Identifier	opline		114341	1					
ANR	114444	IdentifierDeclStatement	"uint32_t opnum_reset , opnum_fetch ;"	3890:1:112302:112335	114341	8	True				
ANR	114445	IdentifierDecl	opnum_reset		114341	0					
ANR	114446	IdentifierDeclType	uint32_t		114341	0					
ANR	114447	Identifier	opnum_reset		114341	1					
ANR	114448	IdentifierDecl	opnum_fetch		114341	1					
ANR	114449	IdentifierDeclType	uint32_t		114341	0					
ANR	114450	Identifier	opnum_fetch		114341	1					
ANR	114451	IfStatement	if ( key_ast )		114341	9					
ANR	114452	Condition	key_ast	3892:5:112343:112349	114341	0	True				
ANR	114453	Identifier	key_ast		114341	0					
ANR	114454	CompoundStatement		14:14:446:446	114341	1					
ANR	114455	IfStatement	if ( key_ast -> kind == ZEND_AST_REF )		114341	0					
ANR	114456	Condition	key_ast -> kind == ZEND_AST_REF	3893:6:112360:112388	114341	0	True				
ANR	114457	EqualityExpression	key_ast -> kind == ZEND_AST_REF		114341	0		==			
ANR	114458	PtrMemberAccess	key_ast -> kind		114341	0					
ANR	114459	Identifier	key_ast		114341	0					
ANR	114460	Identifier	kind		114341	1					
ANR	114461	Identifier	ZEND_AST_REF		114341	1					
ANR	114462	CompoundStatement		15:37:485:485	114341	1					
ANR	114463	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Key element cannot be a reference"" )"	3894:3:112396:112469	114341	0	True				
ANR	114464	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Key element cannot be a reference"" )"		114341	0					
ANR	114465	Callee	zend_error_noreturn		114341	0					
ANR	114466	Identifier	zend_error_noreturn		114341	0					
ANR	114467	ArgumentList	E_COMPILE_ERROR		114341	1					
ANR	114468	Argument	E_COMPILE_ERROR		114341	0					
ANR	114469	Identifier	E_COMPILE_ERROR		114341	0					
ANR	114470	Argument	"""Key element cannot be a reference"""		114341	1					
ANR	114471	PrimaryExpression	"""Key element cannot be a reference"""		114341	0					
ANR	114472	IfStatement	if ( key_ast -> kind == ZEND_AST_LIST )		114341	1					
ANR	114473	Condition	key_ast -> kind == ZEND_AST_LIST	3896:6:112481:112510	114341	0	True				
ANR	114474	EqualityExpression	key_ast -> kind == ZEND_AST_LIST		114341	0		==			
ANR	114475	PtrMemberAccess	key_ast -> kind		114341	0					
ANR	114476	Identifier	key_ast		114341	0					
ANR	114477	Identifier	kind		114341	1					
ANR	114478	Identifier	ZEND_AST_LIST		114341	1					
ANR	114479	CompoundStatement		18:38:607:607	114341	1					
ANR	114480	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use list as key element"" )"	3897:3:112518:112588	114341	0	True				
ANR	114481	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use list as key element"" )"		114341	0					
ANR	114482	Callee	zend_error_noreturn		114341	0					
ANR	114483	Identifier	zend_error_noreturn		114341	0					
ANR	114484	ArgumentList	E_COMPILE_ERROR		114341	1					
ANR	114485	Argument	E_COMPILE_ERROR		114341	0					
ANR	114486	Identifier	E_COMPILE_ERROR		114341	0					
ANR	114487	Argument	"""Cannot use list as key element"""		114341	1					
ANR	114488	PrimaryExpression	"""Cannot use list as key element"""		114341	0					
ANR	114489	IfStatement	if ( by_ref )		114341	10					
ANR	114490	Condition	by_ref	3901:5:112603:112608	114341	0	True				
ANR	114491	Identifier	by_ref		114341	0					
ANR	114492	CompoundStatement		23:13:705:705	114341	1					
ANR	114493	ExpressionStatement	value_ast = value_ast -> child [ 0 ]	3902:2:112615:112646	114341	0	True				
ANR	114494	AssignmentExpression	value_ast = value_ast -> child [ 0 ]		114341	0		=			
ANR	114495	Identifier	value_ast		114341	0					
ANR	114496	ArrayIndexing	value_ast -> child [ 0 ]		114341	1					
ANR	114497	PtrMemberAccess	value_ast -> child		114341	0					
ANR	114498	Identifier	value_ast		114341	0					
ANR	114499	Identifier	child		114341	1					
ANR	114500	PrimaryExpression	0		114341	1					
ANR	114501	IfStatement	if ( by_ref && is_variable )		114341	11					
ANR	114502	Condition	by_ref && is_variable	3905:5:112657:112677	114341	0	True				
ANR	114503	AndExpression	by_ref && is_variable		114341	0		&&			
ANR	114504	Identifier	by_ref		114341	0					
ANR	114505	Identifier	is_variable		114341	1					
ANR	114506	CompoundStatement		27:28:774:774	114341	1					
ANR	114507	ExpressionStatement	"zend_compile_var ( & expr_node , expr_ast , BP_VAR_W )"	3906:2:112684:112732	114341	0	True				
ANR	114508	CallExpression	"zend_compile_var ( & expr_node , expr_ast , BP_VAR_W )"		114341	0					
ANR	114509	Callee	zend_compile_var		114341	0					
ANR	114510	Identifier	zend_compile_var		114341	0					
ANR	114511	ArgumentList	& expr_node		114341	1					
ANR	114512	Argument	& expr_node		114341	0					
ANR	114513	UnaryOperationExpression	& expr_node		114341	0					
ANR	114514	UnaryOperator	&		114341	0					
ANR	114515	Identifier	expr_node		114341	1					
ANR	114516	Argument	expr_ast		114341	1					
ANR	114517	Identifier	expr_ast		114341	0					
ANR	114518	Argument	BP_VAR_W		114341	2					
ANR	114519	Identifier	BP_VAR_W		114341	0					
ANR	114520	ElseStatement	else		114341	0					
ANR	114521	CompoundStatement		29:8:836:836	114341	0					
ANR	114522	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	3908:2:112746:112785	114341	0	True				
ANR	114523	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		114341	0					
ANR	114524	Callee	zend_compile_expr		114341	0					
ANR	114525	Identifier	zend_compile_expr		114341	0					
ANR	114526	ArgumentList	& expr_node		114341	1					
ANR	114527	Argument	& expr_node		114341	0					
ANR	114528	UnaryOperationExpression	& expr_node		114341	0					
ANR	114529	UnaryOperator	&		114341	0					
ANR	114530	Identifier	expr_node		114341	1					
ANR	114531	Argument	expr_ast		114341	1					
ANR	114532	Identifier	expr_ast		114341	0					
ANR	114533	IfStatement	if ( by_ref )		114341	12					
ANR	114534	Condition	by_ref	3911:5:112796:112801	114341	0	True				
ANR	114535	Identifier	by_ref		114341	0					
ANR	114536	CompoundStatement		33:13:898:898	114341	1					
ANR	114537	ExpressionStatement	"zend_separate_if_call_and_write ( & expr_node , expr_ast , BP_VAR_W )"	3912:2:112808:112871	114341	0	True				
ANR	114538	CallExpression	"zend_separate_if_call_and_write ( & expr_node , expr_ast , BP_VAR_W )"		114341	0					
ANR	114539	Callee	zend_separate_if_call_and_write		114341	0					
ANR	114540	Identifier	zend_separate_if_call_and_write		114341	0					
ANR	114541	ArgumentList	& expr_node		114341	1					
ANR	114542	Argument	& expr_node		114341	0					
ANR	114543	UnaryOperationExpression	& expr_node		114341	0					
ANR	114544	UnaryOperator	&		114341	0					
ANR	114545	Identifier	expr_node		114341	1					
ANR	114546	Argument	expr_ast		114341	1					
ANR	114547	Identifier	expr_ast		114341	0					
ANR	114548	Argument	BP_VAR_W		114341	2					
ANR	114549	Identifier	BP_VAR_W		114341	0					
ANR	114550	ExpressionStatement	opnum_reset = get_next_op_number ( CG ( active_op_array ) )	3915:1:112878:112931	114341	13	True				
ANR	114551	AssignmentExpression	opnum_reset = get_next_op_number ( CG ( active_op_array ) )		114341	0		=			
ANR	114552	Identifier	opnum_reset		114341	0					
ANR	114553	CallExpression	get_next_op_number ( CG ( active_op_array ) )		114341	1					
ANR	114554	Callee	get_next_op_number		114341	0					
ANR	114555	Identifier	get_next_op_number		114341	0					
ANR	114556	ArgumentList	CG ( active_op_array )		114341	1					
ANR	114557	Argument	CG ( active_op_array )		114341	0					
ANR	114558	CallExpression	CG ( active_op_array )		114341	0					
ANR	114559	Callee	CG		114341	0					
ANR	114560	Identifier	CG		114341	0					
ANR	114561	ArgumentList	active_op_array		114341	1					
ANR	114562	Argument	active_op_array		114341	0					
ANR	114563	Identifier	active_op_array		114341	0					
ANR	114564	ExpressionStatement	"opline = zend_emit_op ( & reset_node , by_ref ? ZEND_FE_RESET_RW : ZEND_FE_RESET_R , & expr_node , NULL )"	3916:1:112934:113031	114341	14	True				
ANR	114565	AssignmentExpression	"opline = zend_emit_op ( & reset_node , by_ref ? ZEND_FE_RESET_RW : ZEND_FE_RESET_R , & expr_node , NULL )"		114341	0		=			
ANR	114566	Identifier	opline		114341	0					
ANR	114567	CallExpression	"zend_emit_op ( & reset_node , by_ref ? ZEND_FE_RESET_RW : ZEND_FE_RESET_R , & expr_node , NULL )"		114341	1					
ANR	114568	Callee	zend_emit_op		114341	0					
ANR	114569	Identifier	zend_emit_op		114341	0					
ANR	114570	ArgumentList	& reset_node		114341	1					
ANR	114571	Argument	& reset_node		114341	0					
ANR	114572	UnaryOperationExpression	& reset_node		114341	0					
ANR	114573	UnaryOperator	&		114341	0					
ANR	114574	Identifier	reset_node		114341	1					
ANR	114575	Argument	by_ref ? ZEND_FE_RESET_RW : ZEND_FE_RESET_R		114341	1					
ANR	114576	ConditionalExpression	by_ref ? ZEND_FE_RESET_RW : ZEND_FE_RESET_R		114341	0					
ANR	114577	Condition	by_ref		114341	0					
ANR	114578	Identifier	by_ref		114341	0					
ANR	114579	Identifier	ZEND_FE_RESET_RW		114341	1					
ANR	114580	Identifier	ZEND_FE_RESET_R		114341	2					
ANR	114581	Argument	& expr_node		114341	2					
ANR	114582	UnaryOperationExpression	& expr_node		114341	0					
ANR	114583	UnaryOperator	&		114341	0					
ANR	114584	Identifier	expr_node		114341	1					
ANR	114585	Argument	NULL		114341	3					
ANR	114586	Identifier	NULL		114341	0					
ANR	114587	ExpressionStatement	opnum_fetch = get_next_op_number ( CG ( active_op_array ) )	3918:1:113035:113088	114341	15	True				
ANR	114588	AssignmentExpression	opnum_fetch = get_next_op_number ( CG ( active_op_array ) )		114341	0		=			
ANR	114589	Identifier	opnum_fetch		114341	0					
ANR	114590	CallExpression	get_next_op_number ( CG ( active_op_array ) )		114341	1					
ANR	114591	Callee	get_next_op_number		114341	0					
ANR	114592	Identifier	get_next_op_number		114341	0					
ANR	114593	ArgumentList	CG ( active_op_array )		114341	1					
ANR	114594	Argument	CG ( active_op_array )		114341	0					
ANR	114595	CallExpression	CG ( active_op_array )		114341	0					
ANR	114596	Callee	CG		114341	0					
ANR	114597	Identifier	CG		114341	0					
ANR	114598	ArgumentList	active_op_array		114341	1					
ANR	114599	Argument	active_op_array		114341	0					
ANR	114600	Identifier	active_op_array		114341	0					
ANR	114601	ExpressionStatement	"opline = zend_emit_op ( NULL , by_ref ? ZEND_FE_FETCH_RW : ZEND_FE_FETCH_R , & reset_node , NULL )"	3919:1:113091:113182	114341	16	True				
ANR	114602	AssignmentExpression	"opline = zend_emit_op ( NULL , by_ref ? ZEND_FE_FETCH_RW : ZEND_FE_FETCH_R , & reset_node , NULL )"		114341	0		=			
ANR	114603	Identifier	opline		114341	0					
ANR	114604	CallExpression	"zend_emit_op ( NULL , by_ref ? ZEND_FE_FETCH_RW : ZEND_FE_FETCH_R , & reset_node , NULL )"		114341	1					
ANR	114605	Callee	zend_emit_op		114341	0					
ANR	114606	Identifier	zend_emit_op		114341	0					
ANR	114607	ArgumentList	NULL		114341	1					
ANR	114608	Argument	NULL		114341	0					
ANR	114609	Identifier	NULL		114341	0					
ANR	114610	Argument	by_ref ? ZEND_FE_FETCH_RW : ZEND_FE_FETCH_R		114341	1					
ANR	114611	ConditionalExpression	by_ref ? ZEND_FE_FETCH_RW : ZEND_FE_FETCH_R		114341	0					
ANR	114612	Condition	by_ref		114341	0					
ANR	114613	Identifier	by_ref		114341	0					
ANR	114614	Identifier	ZEND_FE_FETCH_RW		114341	1					
ANR	114615	Identifier	ZEND_FE_FETCH_R		114341	2					
ANR	114616	Argument	& reset_node		114341	2					
ANR	114617	UnaryOperationExpression	& reset_node		114341	0					
ANR	114618	UnaryOperator	&		114341	0					
ANR	114619	Identifier	reset_node		114341	1					
ANR	114620	Argument	NULL		114341	3					
ANR	114621	Identifier	NULL		114341	0					
ANR	114622	IfStatement	"if ( value_ast -> kind == ZEND_AST_VAR && zend_try_compile_cv ( & value_node , value_ast ) == SUCCESS )"		114341	17					
ANR	114623	Condition	"value_ast -> kind == ZEND_AST_VAR && zend_try_compile_cv ( & value_node , value_ast ) == SUCCESS"	3921:5:113190:113283	114341	0	True				
ANR	114624	AndExpression	"value_ast -> kind == ZEND_AST_VAR && zend_try_compile_cv ( & value_node , value_ast ) == SUCCESS"		114341	0		&&			
ANR	114625	EqualityExpression	value_ast -> kind == ZEND_AST_VAR		114341	0		==			
ANR	114626	PtrMemberAccess	value_ast -> kind		114341	0					
ANR	114627	Identifier	value_ast		114341	0					
ANR	114628	Identifier	kind		114341	1					
ANR	114629	Identifier	ZEND_AST_VAR		114341	1					
ANR	114630	EqualityExpression	"zend_try_compile_cv ( & value_node , value_ast ) == SUCCESS"		114341	1		==			
ANR	114631	CallExpression	"zend_try_compile_cv ( & value_node , value_ast )"		114341	0					
ANR	114632	Callee	zend_try_compile_cv		114341	0					
ANR	114633	Identifier	zend_try_compile_cv		114341	0					
ANR	114634	ArgumentList	& value_node		114341	1					
ANR	114635	Argument	& value_node		114341	0					
ANR	114636	UnaryOperationExpression	& value_node		114341	0					
ANR	114637	UnaryOperator	&		114341	0					
ANR	114638	Identifier	value_node		114341	1					
ANR	114639	Argument	value_ast		114341	1					
ANR	114640	Identifier	value_ast		114341	0					
ANR	114641	Identifier	SUCCESS		114341	1					
ANR	114642	CompoundStatement		44:61:1380:1380	114341	1					
ANR	114643	ExpressionStatement	"SET_NODE ( opline -> op2 , & value_node )"	3923:2:113290:113324	114341	0	True				
ANR	114644	CallExpression	"SET_NODE ( opline -> op2 , & value_node )"		114341	0					
ANR	114645	Callee	SET_NODE		114341	0					
ANR	114646	Identifier	SET_NODE		114341	0					
ANR	114647	ArgumentList	opline -> op2		114341	1					
ANR	114648	Argument	opline -> op2		114341	0					
ANR	114649	PtrMemberAccess	opline -> op2		114341	0					
ANR	114650	Identifier	opline		114341	0					
ANR	114651	Identifier	op2		114341	1					
ANR	114652	Argument	& value_node		114341	1					
ANR	114653	UnaryOperationExpression	& value_node		114341	0					
ANR	114654	UnaryOperator	&		114341	0					
ANR	114655	Identifier	value_node		114341	1					
ANR	114656	ElseStatement	else		114341	0					
ANR	114657	CompoundStatement		46:8:1428:1428	114341	0					
ANR	114658	ExpressionStatement	opline -> op2_type = IS_VAR	3925:2:113338:113363	114341	0	True				
ANR	114659	AssignmentExpression	opline -> op2_type = IS_VAR		114341	0		=			
ANR	114660	PtrMemberAccess	opline -> op2_type		114341	0					
ANR	114661	Identifier	opline		114341	0					
ANR	114662	Identifier	op2_type		114341	1					
ANR	114663	Identifier	IS_VAR		114341	1					
ANR	114664	ExpressionStatement	opline -> op2 . var = get_temporary_variable ( CG ( active_op_array ) )	3926:2:113367:113428	114341	1	True				
ANR	114665	AssignmentExpression	opline -> op2 . var = get_temporary_variable ( CG ( active_op_array ) )		114341	0		=			
ANR	114666	MemberAccess	opline -> op2 . var		114341	0					
ANR	114667	PtrMemberAccess	opline -> op2		114341	0					
ANR	114668	Identifier	opline		114341	0					
ANR	114669	Identifier	op2		114341	1					
ANR	114670	Identifier	var		114341	1					
ANR	114671	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		114341	1					
ANR	114672	Callee	get_temporary_variable		114341	0					
ANR	114673	Identifier	get_temporary_variable		114341	0					
ANR	114674	ArgumentList	CG ( active_op_array )		114341	1					
ANR	114675	Argument	CG ( active_op_array )		114341	0					
ANR	114676	CallExpression	CG ( active_op_array )		114341	0					
ANR	114677	Callee	CG		114341	0					
ANR	114678	Identifier	CG		114341	0					
ANR	114679	ArgumentList	active_op_array		114341	1					
ANR	114680	Argument	active_op_array		114341	0					
ANR	114681	Identifier	active_op_array		114341	0					
ANR	114682	ExpressionStatement	"GET_NODE ( & value_node , opline -> op2 )"	3927:2:113432:113466	114341	2	True				
ANR	114683	CallExpression	"GET_NODE ( & value_node , opline -> op2 )"		114341	0					
ANR	114684	Callee	GET_NODE		114341	0					
ANR	114685	Identifier	GET_NODE		114341	0					
ANR	114686	ArgumentList	& value_node		114341	1					
ANR	114687	Argument	& value_node		114341	0					
ANR	114688	UnaryOperationExpression	& value_node		114341	0					
ANR	114689	UnaryOperator	&		114341	0					
ANR	114690	Identifier	value_node		114341	1					
ANR	114691	Argument	opline -> op2		114341	1					
ANR	114692	PtrMemberAccess	opline -> op2		114341	0					
ANR	114693	Identifier	opline		114341	0					
ANR	114694	Identifier	op2		114341	1					
ANR	114695	IfStatement	if ( by_ref )		114341	3					
ANR	114696	Condition	by_ref	3928:6:113474:113479	114341	0	True				
ANR	114697	Identifier	by_ref		114341	0					
ANR	114698	CompoundStatement		50:14:1576:1576	114341	1					
ANR	114699	ExpressionStatement	"zend_emit_assign_ref_znode ( value_ast , & value_node )"	3929:3:113487:113537	114341	0	True				
ANR	114700	CallExpression	"zend_emit_assign_ref_znode ( value_ast , & value_node )"		114341	0					
ANR	114701	Callee	zend_emit_assign_ref_znode		114341	0					
ANR	114702	Identifier	zend_emit_assign_ref_znode		114341	0					
ANR	114703	ArgumentList	value_ast		114341	1					
ANR	114704	Argument	value_ast		114341	0					
ANR	114705	Identifier	value_ast		114341	0					
ANR	114706	Argument	& value_node		114341	1					
ANR	114707	UnaryOperationExpression	& value_node		114341	0					
ANR	114708	UnaryOperator	&		114341	0					
ANR	114709	Identifier	value_node		114341	1					
ANR	114710	ElseStatement	else		114341	0					
ANR	114711	CompoundStatement		52:9:1642:1642	114341	0					
ANR	114712	ExpressionStatement	"zend_emit_assign_znode ( value_ast , & value_node )"	3931:3:113553:113599	114341	0	True				
ANR	114713	CallExpression	"zend_emit_assign_znode ( value_ast , & value_node )"		114341	0					
ANR	114714	Callee	zend_emit_assign_znode		114341	0					
ANR	114715	Identifier	zend_emit_assign_znode		114341	0					
ANR	114716	ArgumentList	value_ast		114341	1					
ANR	114717	Argument	value_ast		114341	0					
ANR	114718	Identifier	value_ast		114341	0					
ANR	114719	Argument	& value_node		114341	1					
ANR	114720	UnaryOperationExpression	& value_node		114341	0					
ANR	114721	UnaryOperator	&		114341	0					
ANR	114722	Identifier	value_node		114341	1					
ANR	114723	IfStatement	if ( key_ast )		114341	18					
ANR	114724	Condition	key_ast	3935:5:113614:113620	114341	0	True				
ANR	114725	Identifier	key_ast		114341	0					
ANR	114726	CompoundStatement		57:14:1717:1717	114341	1					
ANR	114727	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ opnum_fetch ]	3936:2:113627:113678	114341	0	True				
ANR	114728	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ opnum_fetch ]		114341	0		=			
ANR	114729	Identifier	opline		114341	0					
ANR	114730	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ opnum_fetch ]		114341	1					
ANR	114731	UnaryOperator	&		114341	0					
ANR	114732	ArrayIndexing	CG ( active_op_array ) -> opcodes [ opnum_fetch ]		114341	1					
ANR	114733	PtrMemberAccess	CG ( active_op_array ) -> opcodes		114341	0					
ANR	114734	CallExpression	CG ( active_op_array )		114341	0					
ANR	114735	Callee	CG		114341	0					
ANR	114736	Identifier	CG		114341	0					
ANR	114737	ArgumentList	active_op_array		114341	1					
ANR	114738	Argument	active_op_array		114341	0					
ANR	114739	Identifier	active_op_array		114341	0					
ANR	114740	Identifier	opcodes		114341	1					
ANR	114741	Identifier	opnum_fetch		114341	1					
ANR	114742	ExpressionStatement	"zend_make_tmp_result ( & key_node , opline )"	3937:2:113682:113721	114341	1	True				
ANR	114743	CallExpression	"zend_make_tmp_result ( & key_node , opline )"		114341	0					
ANR	114744	Callee	zend_make_tmp_result		114341	0					
ANR	114745	Identifier	zend_make_tmp_result		114341	0					
ANR	114746	ArgumentList	& key_node		114341	1					
ANR	114747	Argument	& key_node		114341	0					
ANR	114748	UnaryOperationExpression	& key_node		114341	0					
ANR	114749	UnaryOperator	&		114341	0					
ANR	114750	Identifier	key_node		114341	1					
ANR	114751	Argument	opline		114341	1					
ANR	114752	Identifier	opline		114341	0					
ANR	114753	ExpressionStatement	"zend_emit_assign_znode ( key_ast , & key_node )"	3938:2:113725:113767	114341	2	True				
ANR	114754	CallExpression	"zend_emit_assign_znode ( key_ast , & key_node )"		114341	0					
ANR	114755	Callee	zend_emit_assign_znode		114341	0					
ANR	114756	Identifier	zend_emit_assign_znode		114341	0					
ANR	114757	ArgumentList	key_ast		114341	1					
ANR	114758	Argument	key_ast		114341	0					
ANR	114759	Identifier	key_ast		114341	0					
ANR	114760	Argument	& key_node		114341	1					
ANR	114761	UnaryOperationExpression	& key_node		114341	0					
ANR	114762	UnaryOperator	&		114341	0					
ANR	114763	Identifier	key_node		114341	1					
ANR	114764	ExpressionStatement	"zend_begin_loop ( ZEND_FE_FREE , & reset_node )"	3941:1:113774:113816	114341	19	True				
ANR	114765	CallExpression	"zend_begin_loop ( ZEND_FE_FREE , & reset_node )"		114341	0					
ANR	114766	Callee	zend_begin_loop		114341	0					
ANR	114767	Identifier	zend_begin_loop		114341	0					
ANR	114768	ArgumentList	ZEND_FE_FREE		114341	1					
ANR	114769	Argument	ZEND_FE_FREE		114341	0					
ANR	114770	Identifier	ZEND_FE_FREE		114341	0					
ANR	114771	Argument	& reset_node		114341	1					
ANR	114772	UnaryOperationExpression	& reset_node		114341	0					
ANR	114773	UnaryOperator	&		114341	0					
ANR	114774	Identifier	reset_node		114341	1					
ANR	114775	ExpressionStatement	zend_compile_stmt ( stmt_ast )	3943:1:113820:113847	114341	20	True				
ANR	114776	CallExpression	zend_compile_stmt ( stmt_ast )		114341	0					
ANR	114777	Callee	zend_compile_stmt		114341	0					
ANR	114778	Identifier	zend_compile_stmt		114341	0					
ANR	114779	ArgumentList	stmt_ast		114341	1					
ANR	114780	Argument	stmt_ast		114341	0					
ANR	114781	Identifier	stmt_ast		114341	0					
ANR	114782	ExpressionStatement	zend_emit_jump ( opnum_fetch )	3945:1:113851:113878	114341	21	True				
ANR	114783	CallExpression	zend_emit_jump ( opnum_fetch )		114341	0					
ANR	114784	Callee	zend_emit_jump		114341	0					
ANR	114785	Identifier	zend_emit_jump		114341	0					
ANR	114786	ArgumentList	opnum_fetch		114341	1					
ANR	114787	Argument	opnum_fetch		114341	0					
ANR	114788	Identifier	opnum_fetch		114341	0					
ANR	114789	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ opnum_reset ]	3947:1:113882:113933	114341	22	True				
ANR	114790	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ opnum_reset ]		114341	0		=			
ANR	114791	Identifier	opline		114341	0					
ANR	114792	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ opnum_reset ]		114341	1					
ANR	114793	UnaryOperator	&		114341	0					
ANR	114794	ArrayIndexing	CG ( active_op_array ) -> opcodes [ opnum_reset ]		114341	1					
ANR	114795	PtrMemberAccess	CG ( active_op_array ) -> opcodes		114341	0					
ANR	114796	CallExpression	CG ( active_op_array )		114341	0					
ANR	114797	Callee	CG		114341	0					
ANR	114798	Identifier	CG		114341	0					
ANR	114799	ArgumentList	active_op_array		114341	1					
ANR	114800	Argument	active_op_array		114341	0					
ANR	114801	Identifier	active_op_array		114341	0					
ANR	114802	Identifier	opcodes		114341	1					
ANR	114803	Identifier	opnum_reset		114341	1					
ANR	114804	ExpressionStatement	opline -> op2 . opline_num = get_next_op_number ( CG ( active_op_array ) )	3948:1:113936:114000	114341	23	True				
ANR	114805	AssignmentExpression	opline -> op2 . opline_num = get_next_op_number ( CG ( active_op_array ) )		114341	0		=			
ANR	114806	MemberAccess	opline -> op2 . opline_num		114341	0					
ANR	114807	PtrMemberAccess	opline -> op2		114341	0					
ANR	114808	Identifier	opline		114341	0					
ANR	114809	Identifier	op2		114341	1					
ANR	114810	Identifier	opline_num		114341	1					
ANR	114811	CallExpression	get_next_op_number ( CG ( active_op_array ) )		114341	1					
ANR	114812	Callee	get_next_op_number		114341	0					
ANR	114813	Identifier	get_next_op_number		114341	0					
ANR	114814	ArgumentList	CG ( active_op_array )		114341	1					
ANR	114815	Argument	CG ( active_op_array )		114341	0					
ANR	114816	CallExpression	CG ( active_op_array )		114341	0					
ANR	114817	Callee	CG		114341	0					
ANR	114818	Identifier	CG		114341	0					
ANR	114819	ArgumentList	active_op_array		114341	1					
ANR	114820	Argument	active_op_array		114341	0					
ANR	114821	Identifier	active_op_array		114341	0					
ANR	114822	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ opnum_fetch ]	3950:1:114004:114055	114341	24	True				
ANR	114823	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ opnum_fetch ]		114341	0		=			
ANR	114824	Identifier	opline		114341	0					
ANR	114825	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ opnum_fetch ]		114341	1					
ANR	114826	UnaryOperator	&		114341	0					
ANR	114827	ArrayIndexing	CG ( active_op_array ) -> opcodes [ opnum_fetch ]		114341	1					
ANR	114828	PtrMemberAccess	CG ( active_op_array ) -> opcodes		114341	0					
ANR	114829	CallExpression	CG ( active_op_array )		114341	0					
ANR	114830	Callee	CG		114341	0					
ANR	114831	Identifier	CG		114341	0					
ANR	114832	ArgumentList	active_op_array		114341	1					
ANR	114833	Argument	active_op_array		114341	0					
ANR	114834	Identifier	active_op_array		114341	0					
ANR	114835	Identifier	opcodes		114341	1					
ANR	114836	Identifier	opnum_fetch		114341	1					
ANR	114837	ExpressionStatement	opline -> extended_value = get_next_op_number ( CG ( active_op_array ) )	3951:1:114058:114122	114341	25	True				
ANR	114838	AssignmentExpression	opline -> extended_value = get_next_op_number ( CG ( active_op_array ) )		114341	0		=			
ANR	114839	PtrMemberAccess	opline -> extended_value		114341	0					
ANR	114840	Identifier	opline		114341	0					
ANR	114841	Identifier	extended_value		114341	1					
ANR	114842	CallExpression	get_next_op_number ( CG ( active_op_array ) )		114341	1					
ANR	114843	Callee	get_next_op_number		114341	0					
ANR	114844	Identifier	get_next_op_number		114341	0					
ANR	114845	ArgumentList	CG ( active_op_array )		114341	1					
ANR	114846	Argument	CG ( active_op_array )		114341	0					
ANR	114847	CallExpression	CG ( active_op_array )		114341	0					
ANR	114848	Callee	CG		114341	0					
ANR	114849	Identifier	CG		114341	0					
ANR	114850	ArgumentList	active_op_array		114341	1					
ANR	114851	Argument	active_op_array		114341	0					
ANR	114852	Identifier	active_op_array		114341	0					
ANR	114853	ExpressionStatement	zend_end_loop ( opnum_fetch )	3953:1:114126:114152	114341	26	True				
ANR	114854	CallExpression	zend_end_loop ( opnum_fetch )		114341	0					
ANR	114855	Callee	zend_end_loop		114341	0					
ANR	114856	Identifier	zend_end_loop		114341	0					
ANR	114857	ArgumentList	opnum_fetch		114341	1					
ANR	114858	Argument	opnum_fetch		114341	0					
ANR	114859	Identifier	opnum_fetch		114341	0					
ANR	114860	ExpressionStatement	"zend_emit_op ( NULL , ZEND_FE_FREE , & reset_node , NULL )"	3955:1:114156:114207	114341	27	True				
ANR	114861	CallExpression	"zend_emit_op ( NULL , ZEND_FE_FREE , & reset_node , NULL )"		114341	0					
ANR	114862	Callee	zend_emit_op		114341	0					
ANR	114863	Identifier	zend_emit_op		114341	0					
ANR	114864	ArgumentList	NULL		114341	1					
ANR	114865	Argument	NULL		114341	0					
ANR	114866	Identifier	NULL		114341	0					
ANR	114867	Argument	ZEND_FE_FREE		114341	1					
ANR	114868	Identifier	ZEND_FE_FREE		114341	0					
ANR	114869	Argument	& reset_node		114341	2					
ANR	114870	UnaryOperationExpression	& reset_node		114341	0					
ANR	114871	UnaryOperator	&		114341	0					
ANR	114872	Identifier	reset_node		114341	1					
ANR	114873	Argument	NULL		114341	3					
ANR	114874	Identifier	NULL		114341	0					
ANR	114875	ReturnType	void		114341	1					
ANR	114876	Identifier	zend_compile_foreach		114341	2					
ANR	114877	ParameterList	zend_ast * ast		114341	3					
ANR	114878	Parameter	zend_ast * ast	3878:26:111880:111892	114341	0	True				
ANR	114879	ParameterType	zend_ast *		114341	0					
ANR	114880	Identifier	ast		114341	1					
ANR	114881	CFGEntryNode	ENTRY		114341		True				
ANR	114882	CFGExitNode	EXIT		114341		True				
ANR	114883	Symbol	* * value_ast		114341						
ANR	114884	Symbol	ZEND_FE_RESET_RW		114341						
ANR	114885	Symbol	stmt_ast		114341						
ANR	114886	Symbol	opline -> op2 . var		114341						
ANR	114887	Symbol	ast		114341						
ANR	114888	Symbol	E_COMPILE_ERROR		114341						
ANR	114889	Symbol	get_temporary_variable		114341						
ANR	114890	Symbol	* CG		114341						
ANR	114891	Symbol	ZEND_FE_FREE		114341						
ANR	114892	Symbol	ZEND_FE_RESET_R		114341						
ANR	114893	Symbol	opnum_fetch		114341						
ANR	114894	Symbol	CG ( active_op_array ) -> opcodes		114341						
ANR	114895	Symbol	opline -> extended_value		114341						
ANR	114896	Symbol	value_ast -> kind		114341						
ANR	114897	Symbol	opline		114341						
ANR	114898	Symbol	zend_can_write_to_variable		114341						
ANR	114899	Symbol	ZEND_AST_VAR		114341						
ANR	114900	Symbol	BP_VAR_W		114341						
ANR	114901	Symbol	opnum_reset		114341						
ANR	114902	Symbol	NULL		114341						
ANR	114903	Symbol	ZEND_FE_FETCH_R		114341						
ANR	114904	Symbol	* value_ast		114341						
ANR	114905	Symbol	& reset_node		114341						
ANR	114906	Symbol	zend_try_compile_cv		114341						
ANR	114907	Symbol	expr_node		114341						
ANR	114908	Symbol	key_ast -> kind		114341						
ANR	114909	Symbol	ZEND_AST_LIST		114341						
ANR	114910	Symbol	key_node		114341						
ANR	114911	Symbol	* ast -> child		114341						
ANR	114912	Symbol	by_ref		114341						
ANR	114913	Symbol	ast -> child		114341						
ANR	114914	Symbol	IS_VAR		114341						
ANR	114915	Symbol	zend_emit_op		114341						
ANR	114916	Symbol	opline -> op2		114341						
ANR	114917	Symbol	is_variable		114341						
ANR	114918	Symbol	key_ast		114341						
ANR	114919	Symbol	& expr_node		114341						
ANR	114920	Symbol	& key_node		114341						
ANR	114921	Symbol	ZEND_FE_FETCH_RW		114341						
ANR	114922	Symbol	* value_ast -> child		114341						
ANR	114923	Symbol	* ast		114341						
ANR	114924	Symbol	value_ast		114341						
ANR	114925	Symbol	* * ast		114341						
ANR	114926	Symbol	value_node		114341						
ANR	114927	Symbol	value_ast -> child		114341						
ANR	114928	Symbol	ZEND_AST_REF		114341						
ANR	114929	Symbol	zend_is_variable		114341						
ANR	114930	Symbol	opline -> op2 . opline_num		114341						
ANR	114931	Symbol	reset_node		114341						
ANR	114932	Symbol	SUCCESS		114341						
ANR	114933	Symbol	zend_is_call		114341						
ANR	114934	Symbol	CG		114341						
ANR	114935	Symbol	* key_ast		114341						
ANR	114936	Symbol	active_op_array		114341						
ANR	114937	Symbol	expr_ast		114341						
ANR	114938	Symbol	* opline		114341						
ANR	114939	Symbol	& value_node		114341						
ANR	114940	Symbol	opline -> op2_type		114341						
ANR	114941	Symbol	get_next_op_number		114341						
ANR	114942	Function	zend_compile_if	3959:0:114222:115133							
ANR	114943	FunctionDef	zend_compile_if (zend_ast * ast)		114942	0					
ANR	114944	CompoundStatement		3960:0:114268:115133	114942	0					
ANR	114945	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	3961:1:114271:114315	114942	0	True				
ANR	114946	IdentifierDecl	* list = zend_ast_get_list ( ast )		114942	0					
ANR	114947	IdentifierDeclType	zend_ast_list *		114942	0					
ANR	114948	Identifier	list		114942	1					
ANR	114949	AssignmentExpression	* list = zend_ast_get_list ( ast )		114942	2		=			
ANR	114950	Identifier	list		114942	0					
ANR	114951	CallExpression	zend_ast_get_list ( ast )		114942	1					
ANR	114952	Callee	zend_ast_get_list		114942	0					
ANR	114953	Identifier	zend_ast_get_list		114942	0					
ANR	114954	ArgumentList	ast		114942	1					
ANR	114955	Argument	ast		114942	0					
ANR	114956	Identifier	ast		114942	0					
ANR	114957	IdentifierDeclStatement	uint32_t i ;	3962:1:114318:114328	114942	1	True				
ANR	114958	IdentifierDecl	i		114942	0					
ANR	114959	IdentifierDeclType	uint32_t		114942	0					
ANR	114960	Identifier	i		114942	1					
ANR	114961	IdentifierDeclStatement	uint32_t * jmp_opnums = NULL ;	3963:1:114331:114358	114942	2	True				
ANR	114962	IdentifierDecl	* jmp_opnums = NULL		114942	0					
ANR	114963	IdentifierDeclType	uint32_t *		114942	0					
ANR	114964	Identifier	jmp_opnums		114942	1					
ANR	114965	AssignmentExpression	* jmp_opnums = NULL		114942	2		=			
ANR	114966	Identifier	NULL		114942	0					
ANR	114967	Identifier	NULL		114942	1					
ANR	114968	IfStatement	if ( list -> children > 1 )		114942	3					
ANR	114969	Condition	list -> children > 1	3965:5:114366:114383	114942	0	True				
ANR	114970	RelationalExpression	list -> children > 1		114942	0		>			
ANR	114971	PtrMemberAccess	list -> children		114942	0					
ANR	114972	Identifier	list		114942	0					
ANR	114973	Identifier	children		114942	1					
ANR	114974	PrimaryExpression	1		114942	1					
ANR	114975	CompoundStatement		6:25:117:117	114942	1					
ANR	114976	ExpressionStatement	"jmp_opnums = safe_emalloc ( sizeof ( uint32_t ) , list -> children - 1 , 0 )"	3966:2:114390:114456	114942	0	True				
ANR	114977	AssignmentExpression	"jmp_opnums = safe_emalloc ( sizeof ( uint32_t ) , list -> children - 1 , 0 )"		114942	0		=			
ANR	114978	Identifier	jmp_opnums		114942	0					
ANR	114979	CallExpression	"safe_emalloc ( sizeof ( uint32_t ) , list -> children - 1 , 0 )"		114942	1					
ANR	114980	Callee	safe_emalloc		114942	0					
ANR	114981	Identifier	safe_emalloc		114942	0					
ANR	114982	ArgumentList	sizeof ( uint32_t )		114942	1					
ANR	114983	Argument	sizeof ( uint32_t )		114942	0					
ANR	114984	SizeofExpression	sizeof ( uint32_t )		114942	0					
ANR	114985	Sizeof	sizeof		114942	0					
ANR	114986	SizeofOperand	uint32_t		114942	1					
ANR	114987	Argument	list -> children - 1		114942	1					
ANR	114988	AdditiveExpression	list -> children - 1		114942	0		-			
ANR	114989	PtrMemberAccess	list -> children		114942	0					
ANR	114990	Identifier	list		114942	0					
ANR	114991	Identifier	children		114942	1					
ANR	114992	PrimaryExpression	1		114942	1					
ANR	114993	Argument	0		114942	2					
ANR	114994	PrimaryExpression	0		114942	0					
ANR	114995	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		114942	4					
ANR	114996	ForInit	i = 0 ;	3969:6:114468:114473	114942	0	True				
ANR	114997	AssignmentExpression	i = 0		114942	0		=			
ANR	114998	Identifier	i		114942	0					
ANR	114999	PrimaryExpression	0		114942	1					
ANR	115000	Condition	i < list -> children	3969:13:114475:114492	114942	1	True				
ANR	115001	RelationalExpression	i < list -> children		114942	0		<			
ANR	115002	Identifier	i		114942	0					
ANR	115003	PtrMemberAccess	list -> children		114942	1					
ANR	115004	Identifier	list		114942	0					
ANR	115005	Identifier	children		114942	1					
ANR	115006	UnaryExpression	++ i	3969:33:114495:114497	114942	2	True				
ANR	115007	IncDec	++		114942	0					
ANR	115008	Identifier	i		114942	1					
ANR	115009	CompoundStatement		16:2:380:399	114942	3					
ANR	115010	IdentifierDeclStatement	zend_ast * elem_ast = list -> child [ i ] ;	3970:2:114504:114539	114942	0	True				
ANR	115011	IdentifierDecl	* elem_ast = list -> child [ i ]		114942	0					
ANR	115012	IdentifierDeclType	zend_ast *		114942	0					
ANR	115013	Identifier	elem_ast		114942	1					
ANR	115014	AssignmentExpression	* elem_ast = list -> child [ i ]		114942	2		=			
ANR	115015	Identifier	elem_ast		114942	0					
ANR	115016	ArrayIndexing	list -> child [ i ]		114942	1					
ANR	115017	PtrMemberAccess	list -> child		114942	0					
ANR	115018	Identifier	list		114942	0					
ANR	115019	Identifier	child		114942	1					
ANR	115020	Identifier	i		114942	1					
ANR	115021	IdentifierDeclStatement	zend_ast * cond_ast = elem_ast -> child [ 0 ] ;	3971:2:114543:114582	114942	1	True				
ANR	115022	IdentifierDecl	* cond_ast = elem_ast -> child [ 0 ]		114942	0					
ANR	115023	IdentifierDeclType	zend_ast *		114942	0					
ANR	115024	Identifier	cond_ast		114942	1					
ANR	115025	AssignmentExpression	* cond_ast = elem_ast -> child [ 0 ]		114942	2		=			
ANR	115026	Identifier	cond_ast		114942	0					
ANR	115027	ArrayIndexing	elem_ast -> child [ 0 ]		114942	1					
ANR	115028	PtrMemberAccess	elem_ast -> child		114942	0					
ANR	115029	Identifier	elem_ast		114942	0					
ANR	115030	Identifier	child		114942	1					
ANR	115031	PrimaryExpression	0		114942	1					
ANR	115032	IdentifierDeclStatement	zend_ast * stmt_ast = elem_ast -> child [ 1 ] ;	3972:2:114586:114625	114942	2	True				
ANR	115033	IdentifierDecl	* stmt_ast = elem_ast -> child [ 1 ]		114942	0					
ANR	115034	IdentifierDeclType	zend_ast *		114942	0					
ANR	115035	Identifier	stmt_ast		114942	1					
ANR	115036	AssignmentExpression	* stmt_ast = elem_ast -> child [ 1 ]		114942	2		=			
ANR	115037	Identifier	stmt_ast		114942	0					
ANR	115038	ArrayIndexing	elem_ast -> child [ 1 ]		114942	1					
ANR	115039	PtrMemberAccess	elem_ast -> child		114942	0					
ANR	115040	Identifier	elem_ast		114942	0					
ANR	115041	Identifier	child		114942	1					
ANR	115042	PrimaryExpression	1		114942	1					
ANR	115043	IdentifierDeclStatement	znode cond_node ;	3974:2:114630:114645	114942	3	True				
ANR	115044	IdentifierDecl	cond_node		114942	0					
ANR	115045	IdentifierDeclType	znode		114942	0					
ANR	115046	Identifier	cond_node		114942	1					
ANR	115047	IdentifierDeclStatement	uint32_t opnum_jmpz ;	3975:2:114649:114668	114942	4	True				
ANR	115048	IdentifierDecl	opnum_jmpz		114942	0					
ANR	115049	IdentifierDeclType	uint32_t		114942	0					
ANR	115050	Identifier	opnum_jmpz		114942	1					
ANR	115051	IfStatement	if ( cond_ast )		114942	5					
ANR	115052	Condition	cond_ast	3976:6:114676:114683	114942	0	True				
ANR	115053	Identifier	cond_ast		114942	0					
ANR	115054	CompoundStatement		17:16:417:417	114942	1					
ANR	115055	ExpressionStatement	"zend_compile_expr ( & cond_node , cond_ast )"	3977:3:114691:114730	114942	0	True				
ANR	115056	CallExpression	"zend_compile_expr ( & cond_node , cond_ast )"		114942	0					
ANR	115057	Callee	zend_compile_expr		114942	0					
ANR	115058	Identifier	zend_compile_expr		114942	0					
ANR	115059	ArgumentList	& cond_node		114942	1					
ANR	115060	Argument	& cond_node		114942	0					
ANR	115061	UnaryOperationExpression	& cond_node		114942	0					
ANR	115062	UnaryOperator	&		114942	0					
ANR	115063	Identifier	cond_node		114942	1					
ANR	115064	Argument	cond_ast		114942	1					
ANR	115065	Identifier	cond_ast		114942	0					
ANR	115066	ExpressionStatement	"opnum_jmpz = zend_emit_cond_jump ( ZEND_JMPZ , & cond_node , 0 )"	3978:3:114735:114793	114942	1	True				
ANR	115067	AssignmentExpression	"opnum_jmpz = zend_emit_cond_jump ( ZEND_JMPZ , & cond_node , 0 )"		114942	0		=			
ANR	115068	Identifier	opnum_jmpz		114942	0					
ANR	115069	CallExpression	"zend_emit_cond_jump ( ZEND_JMPZ , & cond_node , 0 )"		114942	1					
ANR	115070	Callee	zend_emit_cond_jump		114942	0					
ANR	115071	Identifier	zend_emit_cond_jump		114942	0					
ANR	115072	ArgumentList	ZEND_JMPZ		114942	1					
ANR	115073	Argument	ZEND_JMPZ		114942	0					
ANR	115074	Identifier	ZEND_JMPZ		114942	0					
ANR	115075	Argument	& cond_node		114942	1					
ANR	115076	UnaryOperationExpression	& cond_node		114942	0					
ANR	115077	UnaryOperator	&		114942	0					
ANR	115078	Identifier	cond_node		114942	1					
ANR	115079	Argument	0		114942	2					
ANR	115080	PrimaryExpression	0		114942	0					
ANR	115081	ExpressionStatement	zend_compile_stmt ( stmt_ast )	3981:2:114802:114829	114942	6	True				
ANR	115082	CallExpression	zend_compile_stmt ( stmt_ast )		114942	0					
ANR	115083	Callee	zend_compile_stmt		114942	0					
ANR	115084	Identifier	zend_compile_stmt		114942	0					
ANR	115085	ArgumentList	stmt_ast		114942	1					
ANR	115086	Argument	stmt_ast		114942	0					
ANR	115087	Identifier	stmt_ast		114942	0					
ANR	115088	IfStatement	if ( i != list -> children - 1 )		114942	7					
ANR	115089	Condition	i != list -> children - 1	3983:6:114838:114860	114942	0	True				
ANR	115090	EqualityExpression	i != list -> children - 1		114942	0		!=			
ANR	115091	Identifier	i		114942	0					
ANR	115092	AdditiveExpression	list -> children - 1		114942	1		-			
ANR	115093	PtrMemberAccess	list -> children		114942	0					
ANR	115094	Identifier	list		114942	0					
ANR	115095	Identifier	children		114942	1					
ANR	115096	PrimaryExpression	1		114942	1					
ANR	115097	CompoundStatement		24:31:594:594	114942	1					
ANR	115098	ExpressionStatement	jmp_opnums [ i ] = zend_emit_jump ( 0 )	3984:3:114868:114901	114942	0	True				
ANR	115099	AssignmentExpression	jmp_opnums [ i ] = zend_emit_jump ( 0 )		114942	0		=			
ANR	115100	ArrayIndexing	jmp_opnums [ i ]		114942	0					
ANR	115101	Identifier	jmp_opnums		114942	0					
ANR	115102	Identifier	i		114942	1					
ANR	115103	CallExpression	zend_emit_jump ( 0 )		114942	1					
ANR	115104	Callee	zend_emit_jump		114942	0					
ANR	115105	Identifier	zend_emit_jump		114942	0					
ANR	115106	ArgumentList	0		114942	1					
ANR	115107	Argument	0		114942	0					
ANR	115108	PrimaryExpression	0		114942	0					
ANR	115109	IfStatement	if ( cond_ast )		114942	8					
ANR	115110	Condition	cond_ast	3987:6:114914:114921	114942	0	True				
ANR	115111	Identifier	cond_ast		114942	0					
ANR	115112	CompoundStatement		28:16:655:655	114942	1					
ANR	115113	ExpressionStatement	zend_update_jump_target_to_next ( opnum_jmpz )	3988:3:114929:114972	114942	0	True				
ANR	115114	CallExpression	zend_update_jump_target_to_next ( opnum_jmpz )		114942	0					
ANR	115115	Callee	zend_update_jump_target_to_next		114942	0					
ANR	115116	Identifier	zend_update_jump_target_to_next		114942	0					
ANR	115117	ArgumentList	opnum_jmpz		114942	1					
ANR	115118	Argument	opnum_jmpz		114942	0					
ANR	115119	Identifier	opnum_jmpz		114942	0					
ANR	115120	IfStatement	if ( list -> children > 1 )		114942	5					
ANR	115121	Condition	list -> children > 1	3992:5:114987:115004	114942	0	True				
ANR	115122	RelationalExpression	list -> children > 1		114942	0		>			
ANR	115123	PtrMemberAccess	list -> children		114942	0					
ANR	115124	Identifier	list		114942	0					
ANR	115125	Identifier	children		114942	1					
ANR	115126	PrimaryExpression	1		114942	1					
ANR	115127	CompoundStatement		33:25:738:738	114942	1					
ANR	115128	ForStatement	for ( i = 0 ; i < list -> children - 1 ; ++ i )		114942	0					
ANR	115129	ForInit	i = 0 ;	3993:7:115016:115021	114942	0	True				
ANR	115130	AssignmentExpression	i = 0		114942	0		=			
ANR	115131	Identifier	i		114942	0					
ANR	115132	PrimaryExpression	0		114942	1					
ANR	115133	Condition	i < list -> children - 1	3993:14:115023:115044	114942	1	True				
ANR	115134	RelationalExpression	i < list -> children - 1		114942	0		<			
ANR	115135	Identifier	i		114942	0					
ANR	115136	AdditiveExpression	list -> children - 1		114942	1		-			
ANR	115137	PtrMemberAccess	list -> children		114942	0					
ANR	115138	Identifier	list		114942	0					
ANR	115139	Identifier	children		114942	1					
ANR	115140	PrimaryExpression	1		114942	1					
ANR	115141	UnaryExpression	++ i	3993:38:115047:115049	114942	2	True				
ANR	115142	IncDec	++		114942	0					
ANR	115143	Identifier	i		114942	1					
ANR	115144	CompoundStatement		34:43:783:783	114942	3					
ANR	115145	ExpressionStatement	zend_update_jump_target_to_next ( jmp_opnums [ i ] )	3994:3:115057:115103	114942	0	True				
ANR	115146	CallExpression	zend_update_jump_target_to_next ( jmp_opnums [ i ] )		114942	0					
ANR	115147	Callee	zend_update_jump_target_to_next		114942	0					
ANR	115148	Identifier	zend_update_jump_target_to_next		114942	0					
ANR	115149	ArgumentList	jmp_opnums [ i ]		114942	1					
ANR	115150	Argument	jmp_opnums [ i ]		114942	0					
ANR	115151	ArrayIndexing	jmp_opnums [ i ]		114942	0					
ANR	115152	Identifier	jmp_opnums		114942	0					
ANR	115153	Identifier	i		114942	1					
ANR	115154	ExpressionStatement	efree ( jmp_opnums )	3996:2:115111:115128	114942	1	True				
ANR	115155	CallExpression	efree ( jmp_opnums )		114942	0					
ANR	115156	Callee	efree		114942	0					
ANR	115157	Identifier	efree		114942	0					
ANR	115158	ArgumentList	jmp_opnums		114942	1					
ANR	115159	Argument	jmp_opnums		114942	0					
ANR	115160	Identifier	jmp_opnums		114942	0					
ANR	115161	ReturnType	void		114942	1					
ANR	115162	Identifier	zend_compile_if		114942	2					
ANR	115163	ParameterList	zend_ast * ast		114942	3					
ANR	115164	Parameter	zend_ast * ast	3959:21:114243:114255	114942	0	True				
ANR	115165	ParameterType	zend_ast *		114942	0					
ANR	115166	Identifier	ast		114942	1					
ANR	115167	CFGEntryNode	ENTRY		114942		True				
ANR	115168	CFGExitNode	EXIT		114942		True				
ANR	115169	Symbol	zend_emit_jump		114942						
ANR	115170	Symbol	stmt_ast		114942						
ANR	115171	Symbol	ast		114942						
ANR	115172	Symbol	jmp_opnums		114942						
ANR	115173	Symbol	* elem_ast -> child		114942						
ANR	115174	Symbol	* elem_ast		114942						
ANR	115175	Symbol	* * list		114942						
ANR	115176	Symbol	zend_emit_cond_jump		114942						
ANR	115177	Symbol	elem_ast -> child		114942						
ANR	115178	Symbol	NULL		114942						
ANR	115179	Symbol	list -> child		114942						
ANR	115180	Symbol	cond_node		114942						
ANR	115181	Symbol	ZEND_JMPZ		114942						
ANR	115182	Symbol	opnum_jmpz		114942						
ANR	115183	Symbol	i		114942						
ANR	115184	Symbol	list		114942						
ANR	115185	Symbol	* * elem_ast		114942						
ANR	115186	Symbol	elem_ast		114942						
ANR	115187	Symbol	cond_ast		114942						
ANR	115188	Symbol	zend_ast_get_list		114942						
ANR	115189	Symbol	* i		114942						
ANR	115190	Symbol	* list		114942						
ANR	115191	Symbol	* jmp_opnums		114942						
ANR	115192	Symbol	* list -> child		114942						
ANR	115193	Symbol	safe_emalloc		114942						
ANR	115194	Symbol	list -> children		114942						
ANR	115195	Symbol	& cond_node		114942						
ANR	115196	Function	zend_compile_switch	4001:0:115146:117473							
ANR	115197	FunctionDef	zend_compile_switch (zend_ast * ast)		115196	0					
ANR	115198	CompoundStatement		4002:0:115196:117473	115196	0					
ANR	115199	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	4003:1:115199:115233	115196	0	True				
ANR	115200	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		115196	0					
ANR	115201	IdentifierDeclType	zend_ast *		115196	0					
ANR	115202	Identifier	expr_ast		115196	1					
ANR	115203	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		115196	2		=			
ANR	115204	Identifier	expr_ast		115196	0					
ANR	115205	ArrayIndexing	ast -> child [ 0 ]		115196	1					
ANR	115206	PtrMemberAccess	ast -> child		115196	0					
ANR	115207	Identifier	ast		115196	0					
ANR	115208	Identifier	child		115196	1					
ANR	115209	PrimaryExpression	0		115196	1					
ANR	115210	IdentifierDeclStatement	zend_ast_list * cases = zend_ast_get_list ( ast -> child [ 1 ] ) ;	4004:1:115236:115291	115196	1	True				
ANR	115211	IdentifierDecl	* cases = zend_ast_get_list ( ast -> child [ 1 ] )		115196	0					
ANR	115212	IdentifierDeclType	zend_ast_list *		115196	0					
ANR	115213	Identifier	cases		115196	1					
ANR	115214	AssignmentExpression	* cases = zend_ast_get_list ( ast -> child [ 1 ] )		115196	2		=			
ANR	115215	Identifier	cases		115196	0					
ANR	115216	CallExpression	zend_ast_get_list ( ast -> child [ 1 ] )		115196	1					
ANR	115217	Callee	zend_ast_get_list		115196	0					
ANR	115218	Identifier	zend_ast_get_list		115196	0					
ANR	115219	ArgumentList	ast -> child [ 1 ]		115196	1					
ANR	115220	Argument	ast -> child [ 1 ]		115196	0					
ANR	115221	ArrayIndexing	ast -> child [ 1 ]		115196	0					
ANR	115222	PtrMemberAccess	ast -> child		115196	0					
ANR	115223	Identifier	ast		115196	0					
ANR	115224	Identifier	child		115196	1					
ANR	115225	PrimaryExpression	1		115196	1					
ANR	115226	IdentifierDeclStatement	uint32_t i ;	4006:1:115295:115305	115196	2	True				
ANR	115227	IdentifierDecl	i		115196	0					
ANR	115228	IdentifierDeclType	uint32_t		115196	0					
ANR	115229	Identifier	i		115196	1					
ANR	115230	IdentifierDeclStatement	zend_bool has_default_case = 0 ;	4007:1:115308:115338	115196	3	True				
ANR	115231	IdentifierDecl	has_default_case = 0		115196	0					
ANR	115232	IdentifierDeclType	zend_bool		115196	0					
ANR	115233	Identifier	has_default_case		115196	1					
ANR	115234	AssignmentExpression	has_default_case = 0		115196	2		=			
ANR	115235	Identifier	has_default_case		115196	0					
ANR	115236	PrimaryExpression	0		115196	1					
ANR	115237	IdentifierDeclStatement	"znode expr_node , case_node ;"	4009:1:115342:115368	115196	4	True				
ANR	115238	IdentifierDecl	expr_node		115196	0					
ANR	115239	IdentifierDeclType	znode		115196	0					
ANR	115240	Identifier	expr_node		115196	1					
ANR	115241	IdentifierDecl	case_node		115196	1					
ANR	115242	IdentifierDeclType	znode		115196	0					
ANR	115243	Identifier	case_node		115196	1					
ANR	115244	IdentifierDeclStatement	zend_op * opline ;	4010:1:115371:115386	115196	5	True				
ANR	115245	IdentifierDecl	* opline		115196	0					
ANR	115246	IdentifierDeclType	zend_op *		115196	0					
ANR	115247	Identifier	opline		115196	1					
ANR	115248	IdentifierDeclStatement	"uint32_t * jmpnz_opnums = safe_emalloc ( sizeof ( uint32_t ) , cases -> children , 0 ) ;"	4011:1:115389:115464	115196	6	True				
ANR	115249	IdentifierDecl	"* jmpnz_opnums = safe_emalloc ( sizeof ( uint32_t ) , cases -> children , 0 )"		115196	0					
ANR	115250	IdentifierDeclType	uint32_t *		115196	0					
ANR	115251	Identifier	jmpnz_opnums		115196	1					
ANR	115252	AssignmentExpression	"* jmpnz_opnums = safe_emalloc ( sizeof ( uint32_t ) , cases -> children , 0 )"		115196	2		=			
ANR	115253	Identifier	jmpnz_opnums		115196	0					
ANR	115254	CallExpression	"safe_emalloc ( sizeof ( uint32_t ) , cases -> children , 0 )"		115196	1					
ANR	115255	Callee	safe_emalloc		115196	0					
ANR	115256	Identifier	safe_emalloc		115196	0					
ANR	115257	ArgumentList	sizeof ( uint32_t )		115196	1					
ANR	115258	Argument	sizeof ( uint32_t )		115196	0					
ANR	115259	SizeofExpression	sizeof ( uint32_t )		115196	0					
ANR	115260	Sizeof	sizeof		115196	0					
ANR	115261	SizeofOperand	uint32_t		115196	1					
ANR	115262	Argument	cases -> children		115196	1					
ANR	115263	PtrMemberAccess	cases -> children		115196	0					
ANR	115264	Identifier	cases		115196	0					
ANR	115265	Identifier	children		115196	1					
ANR	115266	Argument	0		115196	2					
ANR	115267	PrimaryExpression	0		115196	0					
ANR	115268	IdentifierDeclStatement	uint32_t opnum_default_jmp ;	4012:1:115467:115493	115196	7	True				
ANR	115269	IdentifierDecl	opnum_default_jmp		115196	0					
ANR	115270	IdentifierDeclType	uint32_t		115196	0					
ANR	115271	Identifier	opnum_default_jmp		115196	1					
ANR	115272	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	4014:1:115497:115536	115196	8	True				
ANR	115273	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		115196	0					
ANR	115274	Callee	zend_compile_expr		115196	0					
ANR	115275	Identifier	zend_compile_expr		115196	0					
ANR	115276	ArgumentList	& expr_node		115196	1					
ANR	115277	Argument	& expr_node		115196	0					
ANR	115278	UnaryOperationExpression	& expr_node		115196	0					
ANR	115279	UnaryOperator	&		115196	0					
ANR	115280	Identifier	expr_node		115196	1					
ANR	115281	Argument	expr_ast		115196	1					
ANR	115282	Identifier	expr_ast		115196	0					
ANR	115283	ExpressionStatement	"zend_begin_loop ( ZEND_FREE , & expr_node )"	4016:1:115540:115578	115196	9	True				
ANR	115284	CallExpression	"zend_begin_loop ( ZEND_FREE , & expr_node )"		115196	0					
ANR	115285	Callee	zend_begin_loop		115196	0					
ANR	115286	Identifier	zend_begin_loop		115196	0					
ANR	115287	ArgumentList	ZEND_FREE		115196	1					
ANR	115288	Argument	ZEND_FREE		115196	0					
ANR	115289	Identifier	ZEND_FREE		115196	0					
ANR	115290	Argument	& expr_node		115196	1					
ANR	115291	UnaryOperationExpression	& expr_node		115196	0					
ANR	115292	UnaryOperator	&		115196	0					
ANR	115293	Identifier	expr_node		115196	1					
ANR	115294	ExpressionStatement	case_node . op_type = IS_TMP_VAR	4018:1:115582:115612	115196	10	True				
ANR	115295	AssignmentExpression	case_node . op_type = IS_TMP_VAR		115196	0		=			
ANR	115296	MemberAccess	case_node . op_type		115196	0					
ANR	115297	Identifier	case_node		115196	0					
ANR	115298	Identifier	op_type		115196	1					
ANR	115299	Identifier	IS_TMP_VAR		115196	1					
ANR	115300	ExpressionStatement	case_node . u . op . var = get_temporary_variable ( CG ( active_op_array ) )	4019:1:115615:115679	115196	11	True				
ANR	115301	AssignmentExpression	case_node . u . op . var = get_temporary_variable ( CG ( active_op_array ) )		115196	0		=			
ANR	115302	MemberAccess	case_node . u . op . var		115196	0					
ANR	115303	MemberAccess	case_node . u . op		115196	0					
ANR	115304	MemberAccess	case_node . u		115196	0					
ANR	115305	Identifier	case_node		115196	0					
ANR	115306	Identifier	u		115196	1					
ANR	115307	Identifier	op		115196	1					
ANR	115308	Identifier	var		115196	1					
ANR	115309	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		115196	1					
ANR	115310	Callee	get_temporary_variable		115196	0					
ANR	115311	Identifier	get_temporary_variable		115196	0					
ANR	115312	ArgumentList	CG ( active_op_array )		115196	1					
ANR	115313	Argument	CG ( active_op_array )		115196	0					
ANR	115314	CallExpression	CG ( active_op_array )		115196	0					
ANR	115315	Callee	CG		115196	0					
ANR	115316	Identifier	CG		115196	0					
ANR	115317	ArgumentList	active_op_array		115196	1					
ANR	115318	Argument	active_op_array		115196	0					
ANR	115319	Identifier	active_op_array		115196	0					
ANR	115320	ForStatement	for ( i = 0 ; i < cases -> children ; ++ i )		115196	12					
ANR	115321	ForInit	i = 0 ;	4021:6:115688:115693	115196	0	True				
ANR	115322	AssignmentExpression	i = 0		115196	0		=			
ANR	115323	Identifier	i		115196	0					
ANR	115324	PrimaryExpression	0		115196	1					
ANR	115325	Condition	i < cases -> children	4021:13:115695:115713	115196	1	True				
ANR	115326	RelationalExpression	i < cases -> children		115196	0		<			
ANR	115327	Identifier	i		115196	0					
ANR	115328	PtrMemberAccess	cases -> children		115196	1					
ANR	115329	Identifier	cases		115196	0					
ANR	115330	Identifier	children		115196	1					
ANR	115331	UnaryExpression	++ i	4021:34:115716:115718	115196	2	True				
ANR	115332	IncDec	++		115196	0					
ANR	115333	Identifier	i		115196	1					
ANR	115334	CompoundStatement		23:2:611:626	115196	3					
ANR	115335	IdentifierDeclStatement	zend_ast * case_ast = cases -> child [ i ] ;	4022:2:115725:115761	115196	0	True				
ANR	115336	IdentifierDecl	* case_ast = cases -> child [ i ]		115196	0					
ANR	115337	IdentifierDeclType	zend_ast *		115196	0					
ANR	115338	Identifier	case_ast		115196	1					
ANR	115339	AssignmentExpression	* case_ast = cases -> child [ i ]		115196	2		=			
ANR	115340	Identifier	case_ast		115196	0					
ANR	115341	ArrayIndexing	cases -> child [ i ]		115196	1					
ANR	115342	PtrMemberAccess	cases -> child		115196	0					
ANR	115343	Identifier	cases		115196	0					
ANR	115344	Identifier	child		115196	1					
ANR	115345	Identifier	i		115196	1					
ANR	115346	IdentifierDeclStatement	zend_ast * cond_ast = case_ast -> child [ 0 ] ;	4023:2:115765:115804	115196	1	True				
ANR	115347	IdentifierDecl	* cond_ast = case_ast -> child [ 0 ]		115196	0					
ANR	115348	IdentifierDeclType	zend_ast *		115196	0					
ANR	115349	Identifier	cond_ast		115196	1					
ANR	115350	AssignmentExpression	* cond_ast = case_ast -> child [ 0 ]		115196	2		=			
ANR	115351	Identifier	cond_ast		115196	0					
ANR	115352	ArrayIndexing	case_ast -> child [ 0 ]		115196	1					
ANR	115353	PtrMemberAccess	case_ast -> child		115196	0					
ANR	115354	Identifier	case_ast		115196	0					
ANR	115355	Identifier	child		115196	1					
ANR	115356	PrimaryExpression	0		115196	1					
ANR	115357	IdentifierDeclStatement	znode cond_node ;	4024:2:115808:115823	115196	2	True				
ANR	115358	IdentifierDecl	cond_node		115196	0					
ANR	115359	IdentifierDeclType	znode		115196	0					
ANR	115360	Identifier	cond_node		115196	1					
ANR	115361	IfStatement	if ( ! cond_ast )		115196	3					
ANR	115362	Condition	! cond_ast	4026:6:115832:115840	115196	0	True				
ANR	115363	UnaryOperationExpression	! cond_ast		115196	0					
ANR	115364	UnaryOperator	!		115196	0					
ANR	115365	Identifier	cond_ast		115196	1					
ANR	115366	CompoundStatement		25:17:646:646	115196	1					
ANR	115367	IfStatement	if ( has_default_case )		115196	0					
ANR	115368	Condition	has_default_case	4027:7:115852:115867	115196	0	True				
ANR	115369	Identifier	has_default_case		115196	0					
ANR	115370	CompoundStatement		26:25:673:673	115196	1					
ANR	115371	ExpressionStatement	CG ( zend_lineno ) = case_ast -> lineno	4028:4:115876:115910	115196	0	True				
ANR	115372	AssignmentExpression	CG ( zend_lineno ) = case_ast -> lineno		115196	0		=			
ANR	115373	CallExpression	CG ( zend_lineno )		115196	0					
ANR	115374	Callee	CG		115196	0					
ANR	115375	Identifier	CG		115196	0					
ANR	115376	ArgumentList	zend_lineno		115196	1					
ANR	115377	Argument	zend_lineno		115196	0					
ANR	115378	Identifier	zend_lineno		115196	0					
ANR	115379	PtrMemberAccess	case_ast -> lineno		115196	1					
ANR	115380	Identifier	case_ast		115196	0					
ANR	115381	Identifier	lineno		115196	1					
ANR	115382	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Switch statements may only contain one default clause"" )"	4029:4:115916:116014	115196	1	True				
ANR	115383	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Switch statements may only contain one default clause"" )"		115196	0					
ANR	115384	Callee	zend_error_noreturn		115196	0					
ANR	115385	Identifier	zend_error_noreturn		115196	0					
ANR	115386	ArgumentList	E_COMPILE_ERROR		115196	1					
ANR	115387	Argument	E_COMPILE_ERROR		115196	0					
ANR	115388	Identifier	E_COMPILE_ERROR		115196	0					
ANR	115389	Argument	"""Switch statements may only contain one default clause"""		115196	1					
ANR	115390	PrimaryExpression	"""Switch statements may only contain one default clause"""		115196	0					
ANR	115391	ExpressionStatement	has_default_case = 1	4032:3:116024:116044	115196	1	True				
ANR	115392	AssignmentExpression	has_default_case = 1		115196	0		=			
ANR	115393	Identifier	has_default_case		115196	0					
ANR	115394	PrimaryExpression	1		115196	1					
ANR	115395	ContinueStatement	continue ;	4033:3:116049:116057	115196	2	True				
ANR	115396	ExpressionStatement	"zend_compile_expr ( & cond_node , cond_ast )"	4036:2:116066:116105	115196	4	True				
ANR	115397	CallExpression	"zend_compile_expr ( & cond_node , cond_ast )"		115196	0					
ANR	115398	Callee	zend_compile_expr		115196	0					
ANR	115399	Identifier	zend_compile_expr		115196	0					
ANR	115400	ArgumentList	& cond_node		115196	1					
ANR	115401	Argument	& cond_node		115196	0					
ANR	115402	UnaryOperationExpression	& cond_node		115196	0					
ANR	115403	UnaryOperator	&		115196	0					
ANR	115404	Identifier	cond_node		115196	1					
ANR	115405	Argument	cond_ast		115196	1					
ANR	115406	Identifier	cond_ast		115196	0					
ANR	115407	IfStatement	if ( expr_node . op_type == IS_CONST && Z_TYPE ( expr_node . u . constant ) == IS_FALSE )		115196	5					
ANR	115408	Condition	expr_node . op_type == IS_CONST && Z_TYPE ( expr_node . u . constant ) == IS_FALSE	4038:6:116114:116189	115196	0	True				
ANR	115409	AndExpression	expr_node . op_type == IS_CONST && Z_TYPE ( expr_node . u . constant ) == IS_FALSE		115196	0		&&			
ANR	115410	EqualityExpression	expr_node . op_type == IS_CONST		115196	0		==			
ANR	115411	MemberAccess	expr_node . op_type		115196	0					
ANR	115412	Identifier	expr_node		115196	0					
ANR	115413	Identifier	op_type		115196	1					
ANR	115414	Identifier	IS_CONST		115196	1					
ANR	115415	EqualityExpression	Z_TYPE ( expr_node . u . constant ) == IS_FALSE		115196	1		==			
ANR	115416	CallExpression	Z_TYPE ( expr_node . u . constant )		115196	0					
ANR	115417	Callee	Z_TYPE		115196	0					
ANR	115418	Identifier	Z_TYPE		115196	0					
ANR	115419	ArgumentList	expr_node . u . constant		115196	1					
ANR	115420	Argument	expr_node . u . constant		115196	0					
ANR	115421	MemberAccess	expr_node . u . constant		115196	0					
ANR	115422	MemberAccess	expr_node . u		115196	0					
ANR	115423	Identifier	expr_node		115196	0					
ANR	115424	Identifier	u		115196	1					
ANR	115425	Identifier	constant		115196	1					
ANR	115426	Identifier	IS_FALSE		115196	1					
ANR	115427	CompoundStatement		38:48:995:995	115196	1					
ANR	115428	ExpressionStatement	"jmpnz_opnums [ i ] = zend_emit_cond_jump ( ZEND_JMPZ , & cond_node , 0 )"	4040:3:116197:116260	115196	0	True				
ANR	115429	AssignmentExpression	"jmpnz_opnums [ i ] = zend_emit_cond_jump ( ZEND_JMPZ , & cond_node , 0 )"		115196	0		=			
ANR	115430	ArrayIndexing	jmpnz_opnums [ i ]		115196	0					
ANR	115431	Identifier	jmpnz_opnums		115196	0					
ANR	115432	Identifier	i		115196	1					
ANR	115433	CallExpression	"zend_emit_cond_jump ( ZEND_JMPZ , & cond_node , 0 )"		115196	1					
ANR	115434	Callee	zend_emit_cond_jump		115196	0					
ANR	115435	Identifier	zend_emit_cond_jump		115196	0					
ANR	115436	ArgumentList	ZEND_JMPZ		115196	1					
ANR	115437	Argument	ZEND_JMPZ		115196	0					
ANR	115438	Identifier	ZEND_JMPZ		115196	0					
ANR	115439	Argument	& cond_node		115196	1					
ANR	115440	UnaryOperationExpression	& cond_node		115196	0					
ANR	115441	UnaryOperator	&		115196	0					
ANR	115442	Identifier	cond_node		115196	1					
ANR	115443	Argument	0		115196	2					
ANR	115444	PrimaryExpression	0		115196	0					
ANR	115445	ElseStatement	else		115196	0					
ANR	115446	IfStatement	if ( expr_node . op_type == IS_CONST && Z_TYPE ( expr_node . u . constant ) == IS_TRUE )		115196	0					
ANR	115447	Condition	expr_node . op_type == IS_CONST && Z_TYPE ( expr_node . u . constant ) == IS_TRUE	4041:13:116275:116349	115196	0	True				
ANR	115448	AndExpression	expr_node . op_type == IS_CONST && Z_TYPE ( expr_node . u . constant ) == IS_TRUE		115196	0		&&			
ANR	115449	EqualityExpression	expr_node . op_type == IS_CONST		115196	0		==			
ANR	115450	MemberAccess	expr_node . op_type		115196	0					
ANR	115451	Identifier	expr_node		115196	0					
ANR	115452	Identifier	op_type		115196	1					
ANR	115453	Identifier	IS_CONST		115196	1					
ANR	115454	EqualityExpression	Z_TYPE ( expr_node . u . constant ) == IS_TRUE		115196	1		==			
ANR	115455	CallExpression	Z_TYPE ( expr_node . u . constant )		115196	0					
ANR	115456	Callee	Z_TYPE		115196	0					
ANR	115457	Identifier	Z_TYPE		115196	0					
ANR	115458	ArgumentList	expr_node . u . constant		115196	1					
ANR	115459	Argument	expr_node . u . constant		115196	0					
ANR	115460	MemberAccess	expr_node . u . constant		115196	0					
ANR	115461	MemberAccess	expr_node . u		115196	0					
ANR	115462	Identifier	expr_node		115196	0					
ANR	115463	Identifier	u		115196	1					
ANR	115464	Identifier	constant		115196	1					
ANR	115465	Identifier	IS_TRUE		115196	1					
ANR	115466	CompoundStatement		41:47:1155:1155	115196	1					
ANR	115467	ExpressionStatement	"jmpnz_opnums [ i ] = zend_emit_cond_jump ( ZEND_JMPNZ , & cond_node , 0 )"	4043:3:116357:116421	115196	0	True				
ANR	115468	AssignmentExpression	"jmpnz_opnums [ i ] = zend_emit_cond_jump ( ZEND_JMPNZ , & cond_node , 0 )"		115196	0		=			
ANR	115469	ArrayIndexing	jmpnz_opnums [ i ]		115196	0					
ANR	115470	Identifier	jmpnz_opnums		115196	0					
ANR	115471	Identifier	i		115196	1					
ANR	115472	CallExpression	"zend_emit_cond_jump ( ZEND_JMPNZ , & cond_node , 0 )"		115196	1					
ANR	115473	Callee	zend_emit_cond_jump		115196	0					
ANR	115474	Identifier	zend_emit_cond_jump		115196	0					
ANR	115475	ArgumentList	ZEND_JMPNZ		115196	1					
ANR	115476	Argument	ZEND_JMPNZ		115196	0					
ANR	115477	Identifier	ZEND_JMPNZ		115196	0					
ANR	115478	Argument	& cond_node		115196	1					
ANR	115479	UnaryOperationExpression	& cond_node		115196	0					
ANR	115480	UnaryOperator	&		115196	0					
ANR	115481	Identifier	cond_node		115196	1					
ANR	115482	Argument	0		115196	2					
ANR	115483	PrimaryExpression	0		115196	0					
ANR	115484	ElseStatement	else		115196	0					
ANR	115485	CompoundStatement		43:9:1235:1235	115196	0					
ANR	115486	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_CASE , & expr_node , & cond_node )"	4045:3:116443:116505	115196	0	True				
ANR	115487	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_CASE , & expr_node , & cond_node )"		115196	0		=			
ANR	115488	Identifier	opline		115196	0					
ANR	115489	CallExpression	"zend_emit_op ( NULL , ZEND_CASE , & expr_node , & cond_node )"		115196	1					
ANR	115490	Callee	zend_emit_op		115196	0					
ANR	115491	Identifier	zend_emit_op		115196	0					
ANR	115492	ArgumentList	NULL		115196	1					
ANR	115493	Argument	NULL		115196	0					
ANR	115494	Identifier	NULL		115196	0					
ANR	115495	Argument	ZEND_CASE		115196	1					
ANR	115496	Identifier	ZEND_CASE		115196	0					
ANR	115497	Argument	& expr_node		115196	2					
ANR	115498	UnaryOperationExpression	& expr_node		115196	0					
ANR	115499	UnaryOperator	&		115196	0					
ANR	115500	Identifier	expr_node		115196	1					
ANR	115501	Argument	& cond_node		115196	3					
ANR	115502	UnaryOperationExpression	& cond_node		115196	0					
ANR	115503	UnaryOperator	&		115196	0					
ANR	115504	Identifier	cond_node		115196	1					
ANR	115505	ExpressionStatement	"SET_NODE ( opline -> result , & case_node )"	4046:3:116510:116546	115196	1	True				
ANR	115506	CallExpression	"SET_NODE ( opline -> result , & case_node )"		115196	0					
ANR	115507	Callee	SET_NODE		115196	0					
ANR	115508	Identifier	SET_NODE		115196	0					
ANR	115509	ArgumentList	opline -> result		115196	1					
ANR	115510	Argument	opline -> result		115196	0					
ANR	115511	PtrMemberAccess	opline -> result		115196	0					
ANR	115512	Identifier	opline		115196	0					
ANR	115513	Identifier	result		115196	1					
ANR	115514	Argument	& case_node		115196	1					
ANR	115515	UnaryOperationExpression	& case_node		115196	0					
ANR	115516	UnaryOperator	&		115196	0					
ANR	115517	Identifier	case_node		115196	1					
ANR	115518	IfStatement	if ( opline -> op1_type == IS_CONST )		115196	2					
ANR	115519	Condition	opline -> op1_type == IS_CONST	4047:7:116555:116582	115196	0	True				
ANR	115520	EqualityExpression	opline -> op1_type == IS_CONST		115196	0		==			
ANR	115521	PtrMemberAccess	opline -> op1_type		115196	0					
ANR	115522	Identifier	opline		115196	0					
ANR	115523	Identifier	op1_type		115196	1					
ANR	115524	Identifier	IS_CONST		115196	1					
ANR	115525	CompoundStatement		46:37:1388:1388	115196	1					
ANR	115526	ExpressionStatement	zval_copy_ctor ( CT_CONSTANT ( opline -> op1 ) )	4048:4:116591:116631	115196	0	True				
ANR	115527	CallExpression	zval_copy_ctor ( CT_CONSTANT ( opline -> op1 ) )		115196	0					
ANR	115528	Callee	zval_copy_ctor		115196	0					
ANR	115529	Identifier	zval_copy_ctor		115196	0					
ANR	115530	ArgumentList	CT_CONSTANT ( opline -> op1 )		115196	1					
ANR	115531	Argument	CT_CONSTANT ( opline -> op1 )		115196	0					
ANR	115532	CallExpression	CT_CONSTANT ( opline -> op1 )		115196	0					
ANR	115533	Callee	CT_CONSTANT		115196	0					
ANR	115534	Identifier	CT_CONSTANT		115196	0					
ANR	115535	ArgumentList	opline -> op1		115196	1					
ANR	115536	Argument	opline -> op1		115196	0					
ANR	115537	PtrMemberAccess	opline -> op1		115196	0					
ANR	115538	Identifier	opline		115196	0					
ANR	115539	Identifier	op1		115196	1					
ANR	115540	ExpressionStatement	"jmpnz_opnums [ i ] = zend_emit_cond_jump ( ZEND_JMPNZ , & case_node , 0 )"	4051:3:116642:116706	115196	3	True				
ANR	115541	AssignmentExpression	"jmpnz_opnums [ i ] = zend_emit_cond_jump ( ZEND_JMPNZ , & case_node , 0 )"		115196	0		=			
ANR	115542	ArrayIndexing	jmpnz_opnums [ i ]		115196	0					
ANR	115543	Identifier	jmpnz_opnums		115196	0					
ANR	115544	Identifier	i		115196	1					
ANR	115545	CallExpression	"zend_emit_cond_jump ( ZEND_JMPNZ , & case_node , 0 )"		115196	1					
ANR	115546	Callee	zend_emit_cond_jump		115196	0					
ANR	115547	Identifier	zend_emit_cond_jump		115196	0					
ANR	115548	ArgumentList	ZEND_JMPNZ		115196	1					
ANR	115549	Argument	ZEND_JMPNZ		115196	0					
ANR	115550	Identifier	ZEND_JMPNZ		115196	0					
ANR	115551	Argument	& case_node		115196	1					
ANR	115552	UnaryOperationExpression	& case_node		115196	0					
ANR	115553	UnaryOperator	&		115196	0					
ANR	115554	Identifier	case_node		115196	1					
ANR	115555	Argument	0		115196	2					
ANR	115556	PrimaryExpression	0		115196	0					
ANR	115557	ExpressionStatement	opnum_default_jmp = zend_emit_jump ( 0 )	4055:1:116717:116754	115196	13	True				
ANR	115558	AssignmentExpression	opnum_default_jmp = zend_emit_jump ( 0 )		115196	0		=			
ANR	115559	Identifier	opnum_default_jmp		115196	0					
ANR	115560	CallExpression	zend_emit_jump ( 0 )		115196	1					
ANR	115561	Callee	zend_emit_jump		115196	0					
ANR	115562	Identifier	zend_emit_jump		115196	0					
ANR	115563	ArgumentList	0		115196	1					
ANR	115564	Argument	0		115196	0					
ANR	115565	PrimaryExpression	0		115196	0					
ANR	115566	ForStatement	for ( i = 0 ; i < cases -> children ; ++ i )		115196	14					
ANR	115567	ForInit	i = 0 ;	4057:6:116763:116768	115196	0	True				
ANR	115568	AssignmentExpression	i = 0		115196	0		=			
ANR	115569	Identifier	i		115196	0					
ANR	115570	PrimaryExpression	0		115196	1					
ANR	115571	Condition	i < cases -> children	4057:13:116770:116788	115196	1	True				
ANR	115572	RelationalExpression	i < cases -> children		115196	0		<			
ANR	115573	Identifier	i		115196	0					
ANR	115574	PtrMemberAccess	cases -> children		115196	1					
ANR	115575	Identifier	cases		115196	0					
ANR	115576	Identifier	children		115196	1					
ANR	115577	UnaryExpression	++ i	4057:34:116791:116793	115196	2	True				
ANR	115578	IncDec	++		115196	0					
ANR	115579	Identifier	i		115196	1					
ANR	115580	CompoundStatement		59:2:1686:1725	115196	3					
ANR	115581	IdentifierDeclStatement	zend_ast * case_ast = cases -> child [ i ] ;	4058:2:116800:116836	115196	0	True				
ANR	115582	IdentifierDecl	* case_ast = cases -> child [ i ]		115196	0					
ANR	115583	IdentifierDeclType	zend_ast *		115196	0					
ANR	115584	Identifier	case_ast		115196	1					
ANR	115585	AssignmentExpression	* case_ast = cases -> child [ i ]		115196	2		=			
ANR	115586	Identifier	case_ast		115196	0					
ANR	115587	ArrayIndexing	cases -> child [ i ]		115196	1					
ANR	115588	PtrMemberAccess	cases -> child		115196	0					
ANR	115589	Identifier	cases		115196	0					
ANR	115590	Identifier	child		115196	1					
ANR	115591	Identifier	i		115196	1					
ANR	115592	IdentifierDeclStatement	zend_ast * cond_ast = case_ast -> child [ 0 ] ;	4059:2:116840:116879	115196	1	True				
ANR	115593	IdentifierDecl	* cond_ast = case_ast -> child [ 0 ]		115196	0					
ANR	115594	IdentifierDeclType	zend_ast *		115196	0					
ANR	115595	Identifier	cond_ast		115196	1					
ANR	115596	AssignmentExpression	* cond_ast = case_ast -> child [ 0 ]		115196	2		=			
ANR	115597	Identifier	cond_ast		115196	0					
ANR	115598	ArrayIndexing	case_ast -> child [ 0 ]		115196	1					
ANR	115599	PtrMemberAccess	case_ast -> child		115196	0					
ANR	115600	Identifier	case_ast		115196	0					
ANR	115601	Identifier	child		115196	1					
ANR	115602	PrimaryExpression	0		115196	1					
ANR	115603	IdentifierDeclStatement	zend_ast * stmt_ast = case_ast -> child [ 1 ] ;	4060:2:116883:116922	115196	2	True				
ANR	115604	IdentifierDecl	* stmt_ast = case_ast -> child [ 1 ]		115196	0					
ANR	115605	IdentifierDeclType	zend_ast *		115196	0					
ANR	115606	Identifier	stmt_ast		115196	1					
ANR	115607	AssignmentExpression	* stmt_ast = case_ast -> child [ 1 ]		115196	2		=			
ANR	115608	Identifier	stmt_ast		115196	0					
ANR	115609	ArrayIndexing	case_ast -> child [ 1 ]		115196	1					
ANR	115610	PtrMemberAccess	case_ast -> child		115196	0					
ANR	115611	Identifier	case_ast		115196	0					
ANR	115612	Identifier	child		115196	1					
ANR	115613	PrimaryExpression	1		115196	1					
ANR	115614	IfStatement	if ( cond_ast )		115196	3					
ANR	115615	Condition	cond_ast	4062:6:116931:116938	115196	0	True				
ANR	115616	Identifier	cond_ast		115196	0					
ANR	115617	CompoundStatement		61:16:1744:1744	115196	1					
ANR	115618	ExpressionStatement	zend_update_jump_target_to_next ( jmpnz_opnums [ i ] )	4063:3:116946:116994	115196	0	True				
ANR	115619	CallExpression	zend_update_jump_target_to_next ( jmpnz_opnums [ i ] )		115196	0					
ANR	115620	Callee	zend_update_jump_target_to_next		115196	0					
ANR	115621	Identifier	zend_update_jump_target_to_next		115196	0					
ANR	115622	ArgumentList	jmpnz_opnums [ i ]		115196	1					
ANR	115623	Argument	jmpnz_opnums [ i ]		115196	0					
ANR	115624	ArrayIndexing	jmpnz_opnums [ i ]		115196	0					
ANR	115625	Identifier	jmpnz_opnums		115196	0					
ANR	115626	Identifier	i		115196	1					
ANR	115627	ElseStatement	else		115196	0					
ANR	115628	CompoundStatement		63:9:1808:1808	115196	0					
ANR	115629	ExpressionStatement	zend_update_jump_target_to_next ( opnum_default_jmp )	4065:3:117010:117060	115196	0	True				
ANR	115630	CallExpression	zend_update_jump_target_to_next ( opnum_default_jmp )		115196	0					
ANR	115631	Callee	zend_update_jump_target_to_next		115196	0					
ANR	115632	Identifier	zend_update_jump_target_to_next		115196	0					
ANR	115633	ArgumentList	opnum_default_jmp		115196	1					
ANR	115634	Argument	opnum_default_jmp		115196	0					
ANR	115635	Identifier	opnum_default_jmp		115196	0					
ANR	115636	ExpressionStatement	zend_compile_stmt ( stmt_ast )	4068:2:117069:117096	115196	4	True				
ANR	115637	CallExpression	zend_compile_stmt ( stmt_ast )		115196	0					
ANR	115638	Callee	zend_compile_stmt		115196	0					
ANR	115639	Identifier	zend_compile_stmt		115196	0					
ANR	115640	ArgumentList	stmt_ast		115196	1					
ANR	115641	Argument	stmt_ast		115196	0					
ANR	115642	Identifier	stmt_ast		115196	0					
ANR	115643	IfStatement	if ( ! has_default_case )		115196	15					
ANR	115644	Condition	! has_default_case	4071:5:117107:117123	115196	0	True				
ANR	115645	UnaryOperationExpression	! has_default_case		115196	0					
ANR	115646	UnaryOperator	!		115196	0					
ANR	115647	Identifier	has_default_case		115196	1					
ANR	115648	CompoundStatement		70:24:1929:1929	115196	1					
ANR	115649	ExpressionStatement	zend_update_jump_target_to_next ( opnum_default_jmp )	4072:2:117130:117180	115196	0	True				
ANR	115650	CallExpression	zend_update_jump_target_to_next ( opnum_default_jmp )		115196	0					
ANR	115651	Callee	zend_update_jump_target_to_next		115196	0					
ANR	115652	Identifier	zend_update_jump_target_to_next		115196	0					
ANR	115653	ArgumentList	opnum_default_jmp		115196	1					
ANR	115654	Argument	opnum_default_jmp		115196	0					
ANR	115655	Identifier	opnum_default_jmp		115196	0					
ANR	115656	ExpressionStatement	zend_end_loop ( get_next_op_number ( CG ( active_op_array ) ) )	4075:1:117187:117241	115196	16	True				
ANR	115657	CallExpression	zend_end_loop ( get_next_op_number ( CG ( active_op_array ) ) )		115196	0					
ANR	115658	Callee	zend_end_loop		115196	0					
ANR	115659	Identifier	zend_end_loop		115196	0					
ANR	115660	ArgumentList	get_next_op_number ( CG ( active_op_array ) )		115196	1					
ANR	115661	Argument	get_next_op_number ( CG ( active_op_array ) )		115196	0					
ANR	115662	CallExpression	get_next_op_number ( CG ( active_op_array ) )		115196	0					
ANR	115663	Callee	get_next_op_number		115196	0					
ANR	115664	Identifier	get_next_op_number		115196	0					
ANR	115665	ArgumentList	CG ( active_op_array )		115196	1					
ANR	115666	Argument	CG ( active_op_array )		115196	0					
ANR	115667	CallExpression	CG ( active_op_array )		115196	0					
ANR	115668	Callee	CG		115196	0					
ANR	115669	Identifier	CG		115196	0					
ANR	115670	ArgumentList	active_op_array		115196	1					
ANR	115671	Argument	active_op_array		115196	0					
ANR	115672	Identifier	active_op_array		115196	0					
ANR	115673	IfStatement	if ( expr_node . op_type == IS_VAR || expr_node . op_type == IS_TMP_VAR )		115196	17					
ANR	115674	Condition	expr_node . op_type == IS_VAR || expr_node . op_type == IS_TMP_VAR	4077:5:117249:117310	115196	0	True				
ANR	115675	OrExpression	expr_node . op_type == IS_VAR || expr_node . op_type == IS_TMP_VAR		115196	0		||			
ANR	115676	EqualityExpression	expr_node . op_type == IS_VAR		115196	0		==			
ANR	115677	MemberAccess	expr_node . op_type		115196	0					
ANR	115678	Identifier	expr_node		115196	0					
ANR	115679	Identifier	op_type		115196	1					
ANR	115680	Identifier	IS_VAR		115196	1					
ANR	115681	EqualityExpression	expr_node . op_type == IS_TMP_VAR		115196	1		==			
ANR	115682	MemberAccess	expr_node . op_type		115196	0					
ANR	115683	Identifier	expr_node		115196	0					
ANR	115684	Identifier	op_type		115196	1					
ANR	115685	Identifier	IS_TMP_VAR		115196	1					
ANR	115686	CompoundStatement		76:69:2116:2116	115196	1					
ANR	115687	ExpressionStatement	"zend_emit_op ( NULL , ZEND_FREE , & expr_node , NULL )"	4078:2:117317:117364	115196	0	True				
ANR	115688	CallExpression	"zend_emit_op ( NULL , ZEND_FREE , & expr_node , NULL )"		115196	0					
ANR	115689	Callee	zend_emit_op		115196	0					
ANR	115690	Identifier	zend_emit_op		115196	0					
ANR	115691	ArgumentList	NULL		115196	1					
ANR	115692	Argument	NULL		115196	0					
ANR	115693	Identifier	NULL		115196	0					
ANR	115694	Argument	ZEND_FREE		115196	1					
ANR	115695	Identifier	ZEND_FREE		115196	0					
ANR	115696	Argument	& expr_node		115196	2					
ANR	115697	UnaryOperationExpression	& expr_node		115196	0					
ANR	115698	UnaryOperator	&		115196	0					
ANR	115699	Identifier	expr_node		115196	1					
ANR	115700	Argument	NULL		115196	3					
ANR	115701	Identifier	NULL		115196	0					
ANR	115702	ElseStatement	else		115196	0					
ANR	115703	IfStatement	if ( expr_node . op_type == IS_CONST )		115196	0					
ANR	115704	Condition	expr_node . op_type == IS_CONST	4079:12:117378:117406	115196	0	True				
ANR	115705	EqualityExpression	expr_node . op_type == IS_CONST		115196	0		==			
ANR	115706	MemberAccess	expr_node . op_type		115196	0					
ANR	115707	Identifier	expr_node		115196	0					
ANR	115708	Identifier	op_type		115196	1					
ANR	115709	Identifier	IS_CONST		115196	1					
ANR	115710	CompoundStatement		78:43:2212:2212	115196	1					
ANR	115711	ExpressionStatement	zval_dtor ( & expr_node . u . constant )	4080:2:117413:117445	115196	0	True				
ANR	115712	CallExpression	zval_dtor ( & expr_node . u . constant )		115196	0					
ANR	115713	Callee	zval_dtor		115196	0					
ANR	115714	Identifier	zval_dtor		115196	0					
ANR	115715	ArgumentList	& expr_node . u . constant		115196	1					
ANR	115716	Argument	& expr_node . u . constant		115196	0					
ANR	115717	UnaryOperationExpression	& expr_node . u . constant		115196	0					
ANR	115718	UnaryOperator	&		115196	0					
ANR	115719	MemberAccess	expr_node . u . constant		115196	1					
ANR	115720	MemberAccess	expr_node . u		115196	0					
ANR	115721	Identifier	expr_node		115196	0					
ANR	115722	Identifier	u		115196	1					
ANR	115723	Identifier	constant		115196	1					
ANR	115724	ExpressionStatement	efree ( jmpnz_opnums )	4083:1:117452:117471	115196	18	True				
ANR	115725	CallExpression	efree ( jmpnz_opnums )		115196	0					
ANR	115726	Callee	efree		115196	0					
ANR	115727	Identifier	efree		115196	0					
ANR	115728	ArgumentList	jmpnz_opnums		115196	1					
ANR	115729	Argument	jmpnz_opnums		115196	0					
ANR	115730	Identifier	jmpnz_opnums		115196	0					
ANR	115731	ReturnType	void		115196	1					
ANR	115732	Identifier	zend_compile_switch		115196	2					
ANR	115733	ParameterList	zend_ast * ast		115196	3					
ANR	115734	Parameter	zend_ast * ast	4001:25:115171:115183	115196	0	True				
ANR	115735	ParameterType	zend_ast *		115196	0					
ANR	115736	Identifier	ast		115196	1					
ANR	115737	CFGEntryNode	ENTRY		115196		True				
ANR	115738	CFGExitNode	EXIT		115196		True				
ANR	115739	Symbol	zend_emit_jump		115196						
ANR	115740	Symbol	ZEND_FREE		115196						
ANR	115741	Symbol	ZEND_JMPNZ		115196						
ANR	115742	Symbol	stmt_ast		115196						
ANR	115743	Symbol	ast		115196						
ANR	115744	Symbol	case_node . u . op		115196						
ANR	115745	Symbol	case_node . op_type		115196						
ANR	115746	Symbol	E_COMPILE_ERROR		115196						
ANR	115747	Symbol	get_temporary_variable		115196						
ANR	115748	Symbol	case_node . u . op . var		115196						
ANR	115749	Symbol	Z_TYPE		115196						
ANR	115750	Symbol	jmpnz_opnums		115196						
ANR	115751	Symbol	opline -> result		115196						
ANR	115752	Symbol	* cases -> child		115196						
ANR	115753	Symbol	opline		115196						
ANR	115754	Symbol	CT_CONSTANT		115196						
ANR	115755	Symbol	opnum_default_jmp		115196						
ANR	115756	Symbol	zend_lineno		115196						
ANR	115757	Symbol	expr_node . u		115196						
ANR	115758	Symbol	case_ast -> lineno		115196						
ANR	115759	Symbol	IS_TMP_VAR		115196						
ANR	115760	Symbol	IS_CONST		115196						
ANR	115761	Symbol	NULL		115196						
ANR	115762	Symbol	ZEND_JMPZ		115196						
ANR	115763	Symbol	IS_TRUE		115196						
ANR	115764	Symbol	& case_node		115196						
ANR	115765	Symbol	opline -> op1_type		115196						
ANR	115766	Symbol	has_default_case		115196						
ANR	115767	Symbol	cond_ast		115196						
ANR	115768	Symbol	expr_node		115196						
ANR	115769	Symbol	& expr_node . u		115196						
ANR	115770	Symbol	* * cases		115196						
ANR	115771	Symbol	case_ast		115196						
ANR	115772	Symbol	* ast -> child		115196						
ANR	115773	Symbol	ast -> child		115196						
ANR	115774	Symbol	cases -> children		115196						
ANR	115775	Symbol	IS_VAR		115196						
ANR	115776	Symbol	cases -> child		115196						
ANR	115777	Symbol	& cond_node		115196						
ANR	115778	Symbol	zend_emit_op		115196						
ANR	115779	Symbol	* * case_ast		115196						
ANR	115780	Symbol	opline -> op1		115196						
ANR	115781	Symbol	ZEND_CASE		115196						
ANR	115782	Symbol	* case_ast -> child		115196						
ANR	115783	Symbol	case_node		115196						
ANR	115784	Symbol	* cases		115196						
ANR	115785	Symbol	& expr_node		115196						
ANR	115786	Symbol	* case_ast		115196						
ANR	115787	Symbol	* ast		115196						
ANR	115788	Symbol	* * ast		115196						
ANR	115789	Symbol	expr_node . op_type		115196						
ANR	115790	Symbol	zend_emit_cond_jump		115196						
ANR	115791	Symbol	IS_FALSE		115196						
ANR	115792	Symbol	cases		115196						
ANR	115793	Symbol	CG		115196						
ANR	115794	Symbol	active_op_array		115196						
ANR	115795	Symbol	cond_node		115196						
ANR	115796	Symbol	case_ast -> child		115196						
ANR	115797	Symbol	expr_node . u . constant		115196						
ANR	115798	Symbol	i		115196						
ANR	115799	Symbol	* jmpnz_opnums		115196						
ANR	115800	Symbol	expr_ast		115196						
ANR	115801	Symbol	& expr_node . u . constant		115196						
ANR	115802	Symbol	zend_ast_get_list		115196						
ANR	115803	Symbol	* i		115196						
ANR	115804	Symbol	* opline		115196						
ANR	115805	Symbol	case_node . u		115196						
ANR	115806	Symbol	safe_emalloc		115196						
ANR	115807	Symbol	get_next_op_number		115196						
ANR	115808	Function	zend_compile_try	4087:0:117486:121295							
ANR	115809	FunctionDef	zend_compile_try (zend_ast * ast)		115808	0					
ANR	115810	CompoundStatement		4088:0:117533:121295	115808	0					
ANR	115811	IdentifierDeclStatement	zend_ast * try_ast = ast -> child [ 0 ] ;	4089:1:117536:117569	115808	0	True				
ANR	115812	IdentifierDecl	* try_ast = ast -> child [ 0 ]		115808	0					
ANR	115813	IdentifierDeclType	zend_ast *		115808	0					
ANR	115814	Identifier	try_ast		115808	1					
ANR	115815	AssignmentExpression	* try_ast = ast -> child [ 0 ]		115808	2		=			
ANR	115816	Identifier	try_ast		115808	0					
ANR	115817	ArrayIndexing	ast -> child [ 0 ]		115808	1					
ANR	115818	PtrMemberAccess	ast -> child		115808	0					
ANR	115819	Identifier	ast		115808	0					
ANR	115820	Identifier	child		115808	1					
ANR	115821	PrimaryExpression	0		115808	1					
ANR	115822	IdentifierDeclStatement	zend_ast_list * catches = zend_ast_get_list ( ast -> child [ 1 ] ) ;	4090:1:117572:117629	115808	1	True				
ANR	115823	IdentifierDecl	* catches = zend_ast_get_list ( ast -> child [ 1 ] )		115808	0					
ANR	115824	IdentifierDeclType	zend_ast_list *		115808	0					
ANR	115825	Identifier	catches		115808	1					
ANR	115826	AssignmentExpression	* catches = zend_ast_get_list ( ast -> child [ 1 ] )		115808	2		=			
ANR	115827	Identifier	catches		115808	0					
ANR	115828	CallExpression	zend_ast_get_list ( ast -> child [ 1 ] )		115808	1					
ANR	115829	Callee	zend_ast_get_list		115808	0					
ANR	115830	Identifier	zend_ast_get_list		115808	0					
ANR	115831	ArgumentList	ast -> child [ 1 ]		115808	1					
ANR	115832	Argument	ast -> child [ 1 ]		115808	0					
ANR	115833	ArrayIndexing	ast -> child [ 1 ]		115808	0					
ANR	115834	PtrMemberAccess	ast -> child		115808	0					
ANR	115835	Identifier	ast		115808	0					
ANR	115836	Identifier	child		115808	1					
ANR	115837	PrimaryExpression	1		115808	1					
ANR	115838	IdentifierDeclStatement	zend_ast * finally_ast = ast -> child [ 2 ] ;	4091:1:117632:117669	115808	2	True				
ANR	115839	IdentifierDecl	* finally_ast = ast -> child [ 2 ]		115808	0					
ANR	115840	IdentifierDeclType	zend_ast *		115808	0					
ANR	115841	Identifier	finally_ast		115808	1					
ANR	115842	AssignmentExpression	* finally_ast = ast -> child [ 2 ]		115808	2		=			
ANR	115843	Identifier	finally_ast		115808	0					
ANR	115844	ArrayIndexing	ast -> child [ 2 ]		115808	1					
ANR	115845	PtrMemberAccess	ast -> child		115808	0					
ANR	115846	Identifier	ast		115808	0					
ANR	115847	Identifier	child		115808	1					
ANR	115848	PrimaryExpression	2		115808	1					
ANR	115849	IdentifierDeclStatement	uint32_t i ;	4093:1:117673:117683	115808	3	True				
ANR	115850	IdentifierDecl	i		115808	0					
ANR	115851	IdentifierDeclType	uint32_t		115808	0					
ANR	115852	Identifier	i		115808	1					
ANR	115853	IdentifierDeclStatement	zend_op * opline ;	4094:1:117686:117701	115808	4	True				
ANR	115854	IdentifierDecl	* opline		115808	0					
ANR	115855	IdentifierDeclType	zend_op *		115808	0					
ANR	115856	Identifier	opline		115808	1					
ANR	115857	IdentifierDeclStatement	uint32_t try_catch_offset ;	4095:1:117704:117729	115808	5	True				
ANR	115858	IdentifierDecl	try_catch_offset		115808	0					
ANR	115859	IdentifierDeclType	uint32_t		115808	0					
ANR	115860	Identifier	try_catch_offset		115808	1					
ANR	115861	IdentifierDeclStatement	"uint32_t * jmp_opnums = safe_emalloc ( sizeof ( uint32_t ) , catches -> children , 0 ) ;"	4096:1:117732:117807	115808	6	True				
ANR	115862	IdentifierDecl	"* jmp_opnums = safe_emalloc ( sizeof ( uint32_t ) , catches -> children , 0 )"		115808	0					
ANR	115863	IdentifierDeclType	uint32_t *		115808	0					
ANR	115864	Identifier	jmp_opnums		115808	1					
ANR	115865	AssignmentExpression	"* jmp_opnums = safe_emalloc ( sizeof ( uint32_t ) , catches -> children , 0 )"		115808	2		=			
ANR	115866	Identifier	jmp_opnums		115808	0					
ANR	115867	CallExpression	"safe_emalloc ( sizeof ( uint32_t ) , catches -> children , 0 )"		115808	1					
ANR	115868	Callee	safe_emalloc		115808	0					
ANR	115869	Identifier	safe_emalloc		115808	0					
ANR	115870	ArgumentList	sizeof ( uint32_t )		115808	1					
ANR	115871	Argument	sizeof ( uint32_t )		115808	0					
ANR	115872	SizeofExpression	sizeof ( uint32_t )		115808	0					
ANR	115873	Sizeof	sizeof		115808	0					
ANR	115874	SizeofOperand	uint32_t		115808	1					
ANR	115875	Argument	catches -> children		115808	1					
ANR	115876	PtrMemberAccess	catches -> children		115808	0					
ANR	115877	Identifier	catches		115808	0					
ANR	115878	Identifier	children		115808	1					
ANR	115879	Argument	0		115808	2					
ANR	115880	PrimaryExpression	0		115808	0					
ANR	115881	IfStatement	if ( catches -> children == 0 && ! finally_ast )		115808	7					
ANR	115882	Condition	catches -> children == 0 && ! finally_ast	4098:5:117815:117852	115808	0	True				
ANR	115883	AndExpression	catches -> children == 0 && ! finally_ast		115808	0		&&			
ANR	115884	EqualityExpression	catches -> children == 0		115808	0		==			
ANR	115885	PtrMemberAccess	catches -> children		115808	0					
ANR	115886	Identifier	catches		115808	0					
ANR	115887	Identifier	children		115808	1					
ANR	115888	PrimaryExpression	0		115808	1					
ANR	115889	UnaryOperationExpression	! finally_ast		115808	1					
ANR	115890	UnaryOperator	!		115808	0					
ANR	115891	Identifier	finally_ast		115808	1					
ANR	115892	CompoundStatement		11:45:321:321	115808	1					
ANR	115893	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use try without catch or finally"" )"	4099:2:117859:117938	115808	0	True				
ANR	115894	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use try without catch or finally"" )"		115808	0					
ANR	115895	Callee	zend_error_noreturn		115808	0					
ANR	115896	Identifier	zend_error_noreturn		115808	0					
ANR	115897	ArgumentList	E_COMPILE_ERROR		115808	1					
ANR	115898	Argument	E_COMPILE_ERROR		115808	0					
ANR	115899	Identifier	E_COMPILE_ERROR		115808	0					
ANR	115900	Argument	"""Cannot use try without catch or finally"""		115808	1					
ANR	115901	PrimaryExpression	"""Cannot use try without catch or finally"""		115808	0					
ANR	115902	IfStatement	if ( CG ( context ) . labels )		115808	8					
ANR	115903	Condition	CG ( context ) . labels	4103:5:118007:118024	115808	0	True				
ANR	115904	MemberAccess	CG ( context ) . labels		115808	0					
ANR	115905	CallExpression	CG ( context )		115808	0					
ANR	115906	Callee	CG		115808	0					
ANR	115907	Identifier	CG		115808	0					
ANR	115908	ArgumentList	context		115808	1					
ANR	115909	Argument	context		115808	0					
ANR	115910	Identifier	context		115808	0					
ANR	115911	Identifier	labels		115808	1					
ANR	115912	CompoundStatement		17:2:497:514	115808	1					
ANR	115913	IdentifierDeclStatement	zend_label * label ;	4104:2:118031:118048	115808	0	True				
ANR	115914	IdentifierDecl	* label		115808	0					
ANR	115915	IdentifierDeclType	zend_label *		115808	0					
ANR	115916	Identifier	label		115808	1					
ANR	115917	Statement	ZEND_HASH_REVERSE_FOREACH_PTR	4105:2:118052:118080	115808	1	True				
ANR	115918	Statement	(	4105:31:118081:118081	115808	2	True				
ANR	115919	Statement	CG	4105:32:118082:118083	115808	3	True				
ANR	115920	Statement	(	4105:34:118084:118084	115808	4	True				
ANR	115921	Statement	context	4105:35:118085:118091	115808	5	True				
ANR	115922	Statement	)	4105:42:118092:118092	115808	6	True				
ANR	115923	Statement	.	4105:43:118093:118093	115808	7	True				
ANR	115924	Statement	labels	4105:44:118094:118099	115808	8	True				
ANR	115925	Statement	","	4105:50:118100:118100	115808	9	True				
ANR	115926	Statement	label	4105:52:118102:118106	115808	10	True				
ANR	115927	Statement	)	4105:57:118107:118107	115808	11	True				
ANR	115928	CompoundStatement		18:59:575:575	115808	12					
ANR	115929	IfStatement	if ( label -> opline_num == get_next_op_number ( CG ( active_op_array ) ) )		115808	0					
ANR	115930	Condition	label -> opline_num == get_next_op_number ( CG ( active_op_array ) )	4106:7:118118:118177	115808	0	True				
ANR	115931	EqualityExpression	label -> opline_num == get_next_op_number ( CG ( active_op_array ) )		115808	0		==			
ANR	115932	PtrMemberAccess	label -> opline_num		115808	0					
ANR	115933	Identifier	label		115808	0					
ANR	115934	Identifier	opline_num		115808	1					
ANR	115935	CallExpression	get_next_op_number ( CG ( active_op_array ) )		115808	1					
ANR	115936	Callee	get_next_op_number		115808	0					
ANR	115937	Identifier	get_next_op_number		115808	0					
ANR	115938	ArgumentList	CG ( active_op_array )		115808	1					
ANR	115939	Argument	CG ( active_op_array )		115808	0					
ANR	115940	CallExpression	CG ( active_op_array )		115808	0					
ANR	115941	Callee	CG		115808	0					
ANR	115942	Identifier	CG		115808	0					
ANR	115943	ArgumentList	active_op_array		115808	1					
ANR	115944	Argument	active_op_array		115808	0					
ANR	115945	Identifier	active_op_array		115808	0					
ANR	115946	CompoundStatement		19:69:646:646	115808	1					
ANR	115947	ExpressionStatement	"zend_emit_op ( NULL , ZEND_NOP , NULL , NULL )"	4107:4:118186:118226	115808	0	True				
ANR	115948	CallExpression	"zend_emit_op ( NULL , ZEND_NOP , NULL , NULL )"		115808	0					
ANR	115949	Callee	zend_emit_op		115808	0					
ANR	115950	Identifier	zend_emit_op		115808	0					
ANR	115951	ArgumentList	NULL		115808	1					
ANR	115952	Argument	NULL		115808	0					
ANR	115953	Identifier	NULL		115808	0					
ANR	115954	Argument	ZEND_NOP		115808	1					
ANR	115955	Identifier	ZEND_NOP		115808	0					
ANR	115956	Argument	NULL		115808	2					
ANR	115957	Identifier	NULL		115808	0					
ANR	115958	Argument	NULL		115808	3					
ANR	115959	Identifier	NULL		115808	0					
ANR	115960	BreakStatement	break ;	4109:3:118236:118241	115808	1	True				
ANR	115961	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	4110:4:118247:118270	115808	13	True				
ANR	115962	CallExpression	ZEND_HASH_FOREACH_END ( )		115808	0					
ANR	115963	Callee	ZEND_HASH_FOREACH_END		115808	0					
ANR	115964	Identifier	ZEND_HASH_FOREACH_END		115808	0					
ANR	115965	ArgumentList			115808	1					
ANR	115966	ExpressionStatement	try_catch_offset = zend_add_try_element ( get_next_op_number ( CG ( active_op_array ) ) )	4113:1:118277:118357	115808	9	True				
ANR	115967	AssignmentExpression	try_catch_offset = zend_add_try_element ( get_next_op_number ( CG ( active_op_array ) ) )		115808	0		=			
ANR	115968	Identifier	try_catch_offset		115808	0					
ANR	115969	CallExpression	zend_add_try_element ( get_next_op_number ( CG ( active_op_array ) ) )		115808	1					
ANR	115970	Callee	zend_add_try_element		115808	0					
ANR	115971	Identifier	zend_add_try_element		115808	0					
ANR	115972	ArgumentList	get_next_op_number ( CG ( active_op_array ) )		115808	1					
ANR	115973	Argument	get_next_op_number ( CG ( active_op_array ) )		115808	0					
ANR	115974	CallExpression	get_next_op_number ( CG ( active_op_array ) )		115808	0					
ANR	115975	Callee	get_next_op_number		115808	0					
ANR	115976	Identifier	get_next_op_number		115808	0					
ANR	115977	ArgumentList	CG ( active_op_array )		115808	1					
ANR	115978	Argument	CG ( active_op_array )		115808	0					
ANR	115979	CallExpression	CG ( active_op_array )		115808	0					
ANR	115980	Callee	CG		115808	0					
ANR	115981	Identifier	CG		115808	0					
ANR	115982	ArgumentList	active_op_array		115808	1					
ANR	115983	Argument	active_op_array		115808	0					
ANR	115984	Identifier	active_op_array		115808	0					
ANR	115985	IfStatement	if ( finally_ast )		115808	10					
ANR	115986	Condition	finally_ast	4115:5:118365:118375	115808	0	True				
ANR	115987	Identifier	finally_ast		115808	0					
ANR	115988	CompoundStatement		29:2:848:871	115808	1					
ANR	115989	IdentifierDeclStatement	zend_loop_var fast_call ;	4116:2:118382:118405	115808	0	True				
ANR	115990	IdentifierDecl	fast_call		115808	0					
ANR	115991	IdentifierDeclType	zend_loop_var		115808	0					
ANR	115992	Identifier	fast_call		115808	1					
ANR	115993	IfStatement	if ( ! ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK ) )		115808	1					
ANR	115994	Condition	! ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK )	4117:6:118413:118473	115808	0	True				
ANR	115995	UnaryOperationExpression	! ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK )		115808	0					
ANR	115996	UnaryOperator	!		115808	0					
ANR	115997	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK		115808	1		&			
ANR	115998	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		115808	0					
ANR	115999	CallExpression	CG ( active_op_array )		115808	0					
ANR	116000	Callee	CG		115808	0					
ANR	116001	Identifier	CG		115808	0					
ANR	116002	ArgumentList	active_op_array		115808	1					
ANR	116003	Argument	active_op_array		115808	0					
ANR	116004	Identifier	active_op_array		115808	0					
ANR	116005	Identifier	fn_flags		115808	1					
ANR	116006	Identifier	ZEND_ACC_HAS_FINALLY_BLOCK		115808	1					
ANR	116007	CompoundStatement		30:69:942:942	115808	1					
ANR	116008	ExpressionStatement	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_HAS_FINALLY_BLOCK	4118:3:118481:118540	115808	0	True				
ANR	116009	AssignmentExpression	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_HAS_FINALLY_BLOCK		115808	0		|=			
ANR	116010	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		115808	0					
ANR	116011	CallExpression	CG ( active_op_array )		115808	0					
ANR	116012	Callee	CG		115808	0					
ANR	116013	Identifier	CG		115808	0					
ANR	116014	ArgumentList	active_op_array		115808	1					
ANR	116015	Argument	active_op_array		115808	0					
ANR	116016	Identifier	active_op_array		115808	0					
ANR	116017	Identifier	fn_flags		115808	1					
ANR	116018	Identifier	ZEND_ACC_HAS_FINALLY_BLOCK		115808	1					
ANR	116019	ExpressionStatement	CG ( context ) . fast_call_var = get_temporary_variable ( CG ( active_op_array ) )	4119:3:118545:118616	115808	1	True				
ANR	116020	AssignmentExpression	CG ( context ) . fast_call_var = get_temporary_variable ( CG ( active_op_array ) )		115808	0		=			
ANR	116021	MemberAccess	CG ( context ) . fast_call_var		115808	0					
ANR	116022	CallExpression	CG ( context )		115808	0					
ANR	116023	Callee	CG		115808	0					
ANR	116024	Identifier	CG		115808	0					
ANR	116025	ArgumentList	context		115808	1					
ANR	116026	Argument	context		115808	0					
ANR	116027	Identifier	context		115808	0					
ANR	116028	Identifier	fast_call_var		115808	1					
ANR	116029	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		115808	1					
ANR	116030	Callee	get_temporary_variable		115808	0					
ANR	116031	Identifier	get_temporary_variable		115808	0					
ANR	116032	ArgumentList	CG ( active_op_array )		115808	1					
ANR	116033	Argument	CG ( active_op_array )		115808	0					
ANR	116034	CallExpression	CG ( active_op_array )		115808	0					
ANR	116035	Callee	CG		115808	0					
ANR	116036	Identifier	CG		115808	0					
ANR	116037	ArgumentList	active_op_array		115808	1					
ANR	116038	Argument	active_op_array		115808	0					
ANR	116039	Identifier	active_op_array		115808	0					
ANR	116040	ExpressionStatement	fast_call . opcode = ZEND_FAST_CALL	4123:2:118664:118697	115808	2	True				
ANR	116041	AssignmentExpression	fast_call . opcode = ZEND_FAST_CALL		115808	0		=			
ANR	116042	MemberAccess	fast_call . opcode		115808	0					
ANR	116043	Identifier	fast_call		115808	0					
ANR	116044	Identifier	opcode		115808	1					
ANR	116045	Identifier	ZEND_FAST_CALL		115808	1					
ANR	116046	ExpressionStatement	fast_call . var_type = IS_TMP_VAR	4124:2:118701:118732	115808	3	True				
ANR	116047	AssignmentExpression	fast_call . var_type = IS_TMP_VAR		115808	0		=			
ANR	116048	MemberAccess	fast_call . var_type		115808	0					
ANR	116049	Identifier	fast_call		115808	0					
ANR	116050	Identifier	var_type		115808	1					
ANR	116051	Identifier	IS_TMP_VAR		115808	1					
ANR	116052	ExpressionStatement	fast_call . var_num = CG ( context ) . fast_call_var	4125:2:118736:118781	115808	4	True				
ANR	116053	AssignmentExpression	fast_call . var_num = CG ( context ) . fast_call_var		115808	0		=			
ANR	116054	MemberAccess	fast_call . var_num		115808	0					
ANR	116055	Identifier	fast_call		115808	0					
ANR	116056	Identifier	var_num		115808	1					
ANR	116057	MemberAccess	CG ( context ) . fast_call_var		115808	1					
ANR	116058	CallExpression	CG ( context )		115808	0					
ANR	116059	Callee	CG		115808	0					
ANR	116060	Identifier	CG		115808	0					
ANR	116061	ArgumentList	context		115808	1					
ANR	116062	Argument	context		115808	0					
ANR	116063	Identifier	context		115808	0					
ANR	116064	Identifier	fast_call_var		115808	1					
ANR	116065	ExpressionStatement	fast_call . u . try_catch_offset = try_catch_offset	4126:2:118785:118832	115808	5	True				
ANR	116066	AssignmentExpression	fast_call . u . try_catch_offset = try_catch_offset		115808	0		=			
ANR	116067	MemberAccess	fast_call . u . try_catch_offset		115808	0					
ANR	116068	MemberAccess	fast_call . u		115808	0					
ANR	116069	Identifier	fast_call		115808	0					
ANR	116070	Identifier	u		115808	1					
ANR	116071	Identifier	try_catch_offset		115808	1					
ANR	116072	Identifier	try_catch_offset		115808	1					
ANR	116073	ExpressionStatement	"zend_stack_push ( & CG ( loop_var_stack ) , & fast_call )"	4127:2:118836:118884	115808	6	True				
ANR	116074	CallExpression	"zend_stack_push ( & CG ( loop_var_stack ) , & fast_call )"		115808	0					
ANR	116075	Callee	zend_stack_push		115808	0					
ANR	116076	Identifier	zend_stack_push		115808	0					
ANR	116077	ArgumentList	& CG ( loop_var_stack )		115808	1					
ANR	116078	Argument	& CG ( loop_var_stack )		115808	0					
ANR	116079	UnaryOperationExpression	& CG ( loop_var_stack )		115808	0					
ANR	116080	UnaryOperator	&		115808	0					
ANR	116081	CallExpression	CG ( loop_var_stack )		115808	1					
ANR	116082	Callee	CG		115808	0					
ANR	116083	Identifier	CG		115808	0					
ANR	116084	ArgumentList	loop_var_stack		115808	1					
ANR	116085	Argument	loop_var_stack		115808	0					
ANR	116086	Identifier	loop_var_stack		115808	0					
ANR	116087	Argument	& fast_call		115808	1					
ANR	116088	UnaryOperationExpression	& fast_call		115808	0					
ANR	116089	UnaryOperator	&		115808	0					
ANR	116090	Identifier	fast_call		115808	1					
ANR	116091	ExpressionStatement	zend_compile_stmt ( try_ast )	4130:1:118891:118917	115808	11	True				
ANR	116092	CallExpression	zend_compile_stmt ( try_ast )		115808	0					
ANR	116093	Callee	zend_compile_stmt		115808	0					
ANR	116094	Identifier	zend_compile_stmt		115808	0					
ANR	116095	ArgumentList	try_ast		115808	1					
ANR	116096	Argument	try_ast		115808	0					
ANR	116097	Identifier	try_ast		115808	0					
ANR	116098	IfStatement	if ( catches -> children != 0 )		115808	12					
ANR	116099	Condition	catches -> children != 0	4132:5:118925:118946	115808	0	True				
ANR	116100	EqualityExpression	catches -> children != 0		115808	0		!=			
ANR	116101	PtrMemberAccess	catches -> children		115808	0					
ANR	116102	Identifier	catches		115808	0					
ANR	116103	Identifier	children		115808	1					
ANR	116104	PrimaryExpression	0		115808	1					
ANR	116105	CompoundStatement		45:29:1415:1415	115808	1					
ANR	116106	ExpressionStatement	jmp_opnums [ 0 ] = zend_emit_jump ( 0 )	4133:2:118953:118986	115808	0	True				
ANR	116107	AssignmentExpression	jmp_opnums [ 0 ] = zend_emit_jump ( 0 )		115808	0		=			
ANR	116108	ArrayIndexing	jmp_opnums [ 0 ]		115808	0					
ANR	116109	Identifier	jmp_opnums		115808	0					
ANR	116110	PrimaryExpression	0		115808	1					
ANR	116111	CallExpression	zend_emit_jump ( 0 )		115808	1					
ANR	116112	Callee	zend_emit_jump		115808	0					
ANR	116113	Identifier	zend_emit_jump		115808	0					
ANR	116114	ArgumentList	0		115808	1					
ANR	116115	Argument	0		115808	0					
ANR	116116	PrimaryExpression	0		115808	0					
ANR	116117	ForStatement	for ( i = 0 ; i < catches -> children ; ++ i )		115808	13					
ANR	116118	ForInit	i = 0 ;	4136:6:118998:119003	115808	0	True				
ANR	116119	AssignmentExpression	i = 0		115808	0		=			
ANR	116120	Identifier	i		115808	0					
ANR	116121	PrimaryExpression	0		115808	1					
ANR	116122	Condition	i < catches -> children	4136:13:119005:119025	115808	1	True				
ANR	116123	RelationalExpression	i < catches -> children		115808	0		<			
ANR	116124	Identifier	i		115808	0					
ANR	116125	PtrMemberAccess	catches -> children		115808	1					
ANR	116126	Identifier	catches		115808	0					
ANR	116127	Identifier	children		115808	1					
ANR	116128	UnaryExpression	++ i	4136:36:119028:119030	115808	2	True				
ANR	116129	IncDec	++		115808	0					
ANR	116130	Identifier	i		115808	1					
ANR	116131	CompoundStatement		57:2:1784:1804	115808	3					
ANR	116132	IdentifierDeclStatement	zend_ast * catch_ast = catches -> child [ i ] ;	4137:2:119037:119076	115808	0	True				
ANR	116133	IdentifierDecl	* catch_ast = catches -> child [ i ]		115808	0					
ANR	116134	IdentifierDeclType	zend_ast *		115808	0					
ANR	116135	Identifier	catch_ast		115808	1					
ANR	116136	AssignmentExpression	* catch_ast = catches -> child [ i ]		115808	2		=			
ANR	116137	Identifier	catch_ast		115808	0					
ANR	116138	ArrayIndexing	catches -> child [ i ]		115808	1					
ANR	116139	PtrMemberAccess	catches -> child		115808	0					
ANR	116140	Identifier	catches		115808	0					
ANR	116141	Identifier	child		115808	1					
ANR	116142	Identifier	i		115808	1					
ANR	116143	IdentifierDeclStatement	zend_ast * class_ast = catch_ast -> child [ 0 ] ;	4138:2:119080:119121	115808	1	True				
ANR	116144	IdentifierDecl	* class_ast = catch_ast -> child [ 0 ]		115808	0					
ANR	116145	IdentifierDeclType	zend_ast *		115808	0					
ANR	116146	Identifier	class_ast		115808	1					
ANR	116147	AssignmentExpression	* class_ast = catch_ast -> child [ 0 ]		115808	2		=			
ANR	116148	Identifier	class_ast		115808	0					
ANR	116149	ArrayIndexing	catch_ast -> child [ 0 ]		115808	1					
ANR	116150	PtrMemberAccess	catch_ast -> child		115808	0					
ANR	116151	Identifier	catch_ast		115808	0					
ANR	116152	Identifier	child		115808	1					
ANR	116153	PrimaryExpression	0		115808	1					
ANR	116154	IdentifierDeclStatement	zend_ast * var_ast = catch_ast -> child [ 1 ] ;	4139:2:119125:119164	115808	2	True				
ANR	116155	IdentifierDecl	* var_ast = catch_ast -> child [ 1 ]		115808	0					
ANR	116156	IdentifierDeclType	zend_ast *		115808	0					
ANR	116157	Identifier	var_ast		115808	1					
ANR	116158	AssignmentExpression	* var_ast = catch_ast -> child [ 1 ]		115808	2		=			
ANR	116159	Identifier	var_ast		115808	0					
ANR	116160	ArrayIndexing	catch_ast -> child [ 1 ]		115808	1					
ANR	116161	PtrMemberAccess	catch_ast -> child		115808	0					
ANR	116162	Identifier	catch_ast		115808	0					
ANR	116163	Identifier	child		115808	1					
ANR	116164	PrimaryExpression	1		115808	1					
ANR	116165	IdentifierDeclStatement	zend_ast * stmt_ast = catch_ast -> child [ 2 ] ;	4140:2:119168:119208	115808	3	True				
ANR	116166	IdentifierDecl	* stmt_ast = catch_ast -> child [ 2 ]		115808	0					
ANR	116167	IdentifierDeclType	zend_ast *		115808	0					
ANR	116168	Identifier	stmt_ast		115808	1					
ANR	116169	AssignmentExpression	* stmt_ast = catch_ast -> child [ 2 ]		115808	2		=			
ANR	116170	Identifier	stmt_ast		115808	0					
ANR	116171	ArrayIndexing	catch_ast -> child [ 2 ]		115808	1					
ANR	116172	PtrMemberAccess	catch_ast -> child		115808	0					
ANR	116173	Identifier	catch_ast		115808	0					
ANR	116174	Identifier	child		115808	1					
ANR	116175	PrimaryExpression	2		115808	1					
ANR	116176	IdentifierDeclStatement	zval * var_name = zend_ast_get_zval ( var_ast ) ;	4141:2:119212:119255	115808	4	True				
ANR	116177	IdentifierDecl	* var_name = zend_ast_get_zval ( var_ast )		115808	0					
ANR	116178	IdentifierDeclType	zval *		115808	0					
ANR	116179	Identifier	var_name		115808	1					
ANR	116180	AssignmentExpression	* var_name = zend_ast_get_zval ( var_ast )		115808	2		=			
ANR	116181	Identifier	var_name		115808	0					
ANR	116182	CallExpression	zend_ast_get_zval ( var_ast )		115808	1					
ANR	116183	Callee	zend_ast_get_zval		115808	0					
ANR	116184	Identifier	zend_ast_get_zval		115808	0					
ANR	116185	ArgumentList	var_ast		115808	1					
ANR	116186	Argument	var_ast		115808	0					
ANR	116187	Identifier	var_ast		115808	0					
ANR	116188	IdentifierDeclStatement	zend_bool is_last_catch = ( i + 1 == catches -> children ) ;	4142:2:119259:119313	115808	5	True				
ANR	116189	IdentifierDecl	is_last_catch = ( i + 1 == catches -> children )		115808	0					
ANR	116190	IdentifierDeclType	zend_bool		115808	0					
ANR	116191	Identifier	is_last_catch		115808	1					
ANR	116192	AssignmentExpression	is_last_catch = ( i + 1 == catches -> children )		115808	2		=			
ANR	116193	Identifier	is_last_catch		115808	0					
ANR	116194	EqualityExpression	i + 1 == catches -> children		115808	1		==			
ANR	116195	AdditiveExpression	i + 1		115808	0		+			
ANR	116196	Identifier	i		115808	0					
ANR	116197	PrimaryExpression	1		115808	1					
ANR	116198	PtrMemberAccess	catches -> children		115808	1					
ANR	116199	Identifier	catches		115808	0					
ANR	116200	Identifier	children		115808	1					
ANR	116201	IdentifierDeclStatement	uint32_t opnum_catch ;	4144:2:119318:119338	115808	6	True				
ANR	116202	IdentifierDecl	opnum_catch		115808	0					
ANR	116203	IdentifierDeclType	uint32_t		115808	0					
ANR	116204	Identifier	opnum_catch		115808	1					
ANR	116205	IfStatement	if ( ! zend_is_const_default_class_ref ( class_ast ) )		115808	7					
ANR	116206	Condition	! zend_is_const_default_class_ref ( class_ast )	4146:6:119347:119389	115808	0	True				
ANR	116207	UnaryOperationExpression	! zend_is_const_default_class_ref ( class_ast )		115808	0					
ANR	116208	UnaryOperator	!		115808	0					
ANR	116209	CallExpression	zend_is_const_default_class_ref ( class_ast )		115808	1					
ANR	116210	Callee	zend_is_const_default_class_ref		115808	0					
ANR	116211	Identifier	zend_is_const_default_class_ref		115808	0					
ANR	116212	ArgumentList	class_ast		115808	1					
ANR	116213	Argument	class_ast		115808	0					
ANR	116214	Identifier	class_ast		115808	0					
ANR	116215	CompoundStatement		59:51:1858:1858	115808	1					
ANR	116216	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Bad class name in the catch statement"" )"	4147:3:119397:119474	115808	0	True				
ANR	116217	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Bad class name in the catch statement"" )"		115808	0					
ANR	116218	Callee	zend_error_noreturn		115808	0					
ANR	116219	Identifier	zend_error_noreturn		115808	0					
ANR	116220	ArgumentList	E_COMPILE_ERROR		115808	1					
ANR	116221	Argument	E_COMPILE_ERROR		115808	0					
ANR	116222	Identifier	E_COMPILE_ERROR		115808	0					
ANR	116223	Argument	"""Bad class name in the catch statement"""		115808	1					
ANR	116224	PrimaryExpression	"""Bad class name in the catch statement"""		115808	0					
ANR	116225	ExpressionStatement	opnum_catch = get_next_op_number ( CG ( active_op_array ) )	4150:2:119483:119536	115808	8	True				
ANR	116226	AssignmentExpression	opnum_catch = get_next_op_number ( CG ( active_op_array ) )		115808	0		=			
ANR	116227	Identifier	opnum_catch		115808	0					
ANR	116228	CallExpression	get_next_op_number ( CG ( active_op_array ) )		115808	1					
ANR	116229	Callee	get_next_op_number		115808	0					
ANR	116230	Identifier	get_next_op_number		115808	0					
ANR	116231	ArgumentList	CG ( active_op_array )		115808	1					
ANR	116232	Argument	CG ( active_op_array )		115808	0					
ANR	116233	CallExpression	CG ( active_op_array )		115808	0					
ANR	116234	Callee	CG		115808	0					
ANR	116235	Identifier	CG		115808	0					
ANR	116236	ArgumentList	active_op_array		115808	1					
ANR	116237	Argument	active_op_array		115808	0					
ANR	116238	Identifier	active_op_array		115808	0					
ANR	116239	IfStatement	if ( i == 0 )		115808	9					
ANR	116240	Condition	i == 0	4151:6:119544:119549	115808	0	True				
ANR	116241	EqualityExpression	i == 0		115808	0		==			
ANR	116242	Identifier	i		115808	0					
ANR	116243	PrimaryExpression	0		115808	1					
ANR	116244	CompoundStatement		64:14:2018:2018	115808	1					
ANR	116245	ExpressionStatement	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . catch_op = opnum_catch	4152:3:119557:119634	115808	0	True				
ANR	116246	AssignmentExpression	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . catch_op = opnum_catch		115808	0		=			
ANR	116247	MemberAccess	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . catch_op		115808	0					
ANR	116248	ArrayIndexing	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ]		115808	0					
ANR	116249	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		115808	0					
ANR	116250	CallExpression	CG ( active_op_array )		115808	0					
ANR	116251	Callee	CG		115808	0					
ANR	116252	Identifier	CG		115808	0					
ANR	116253	ArgumentList	active_op_array		115808	1					
ANR	116254	Argument	active_op_array		115808	0					
ANR	116255	Identifier	active_op_array		115808	0					
ANR	116256	Identifier	try_catch_array		115808	1					
ANR	116257	Identifier	try_catch_offset		115808	1					
ANR	116258	Identifier	catch_op		115808	1					
ANR	116259	Identifier	opnum_catch		115808	1					
ANR	116260	ExpressionStatement	CG ( zend_lineno ) = catch_ast -> lineno	4155:2:119643:119678	115808	10	True				
ANR	116261	AssignmentExpression	CG ( zend_lineno ) = catch_ast -> lineno		115808	0		=			
ANR	116262	CallExpression	CG ( zend_lineno )		115808	0					
ANR	116263	Callee	CG		115808	0					
ANR	116264	Identifier	CG		115808	0					
ANR	116265	ArgumentList	zend_lineno		115808	1					
ANR	116266	Argument	zend_lineno		115808	0					
ANR	116267	Identifier	zend_lineno		115808	0					
ANR	116268	PtrMemberAccess	catch_ast -> lineno		115808	1					
ANR	116269	Identifier	catch_ast		115808	0					
ANR	116270	Identifier	lineno		115808	1					
ANR	116271	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	4157:2:119683:119724	115808	11	True				
ANR	116272	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		115808	0		=			
ANR	116273	Identifier	opline		115808	0					
ANR	116274	CallExpression	get_next_op ( CG ( active_op_array ) )		115808	1					
ANR	116275	Callee	get_next_op		115808	0					
ANR	116276	Identifier	get_next_op		115808	0					
ANR	116277	ArgumentList	CG ( active_op_array )		115808	1					
ANR	116278	Argument	CG ( active_op_array )		115808	0					
ANR	116279	CallExpression	CG ( active_op_array )		115808	0					
ANR	116280	Callee	CG		115808	0					
ANR	116281	Identifier	CG		115808	0					
ANR	116282	ArgumentList	active_op_array		115808	1					
ANR	116283	Argument	active_op_array		115808	0					
ANR	116284	Identifier	active_op_array		115808	0					
ANR	116285	ExpressionStatement	opline -> opcode = ZEND_CATCH	4158:2:119728:119755	115808	12	True				
ANR	116286	AssignmentExpression	opline -> opcode = ZEND_CATCH		115808	0		=			
ANR	116287	PtrMemberAccess	opline -> opcode		115808	0					
ANR	116288	Identifier	opline		115808	0					
ANR	116289	Identifier	opcode		115808	1					
ANR	116290	Identifier	ZEND_CATCH		115808	1					
ANR	116291	ExpressionStatement	opline -> op1_type = IS_CONST	4159:2:119759:119786	115808	13	True				
ANR	116292	AssignmentExpression	opline -> op1_type = IS_CONST		115808	0		=			
ANR	116293	PtrMemberAccess	opline -> op1_type		115808	0					
ANR	116294	Identifier	opline		115808	0					
ANR	116295	Identifier	op1_type		115808	1					
ANR	116296	Identifier	IS_CONST		115808	1					
ANR	116297	ExpressionStatement	"opline -> op1 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name_ast ( class_ast ) )"	4160:2:119790:119904	115808	14	True				
ANR	116298	AssignmentExpression	"opline -> op1 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name_ast ( class_ast ) )"		115808	0		=			
ANR	116299	MemberAccess	opline -> op1 . constant		115808	0					
ANR	116300	PtrMemberAccess	opline -> op1		115808	0					
ANR	116301	Identifier	opline		115808	0					
ANR	116302	Identifier	op1		115808	1					
ANR	116303	Identifier	constant		115808	1					
ANR	116304	CallExpression	"zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name_ast ( class_ast ) )"		115808	1					
ANR	116305	Callee	zend_add_class_name_literal		115808	0					
ANR	116306	Identifier	zend_add_class_name_literal		115808	0					
ANR	116307	ArgumentList	CG ( active_op_array )		115808	1					
ANR	116308	Argument	CG ( active_op_array )		115808	0					
ANR	116309	CallExpression	CG ( active_op_array )		115808	0					
ANR	116310	Callee	CG		115808	0					
ANR	116311	Identifier	CG		115808	0					
ANR	116312	ArgumentList	active_op_array		115808	1					
ANR	116313	Argument	active_op_array		115808	0					
ANR	116314	Identifier	active_op_array		115808	0					
ANR	116315	Argument	zend_resolve_class_name_ast ( class_ast )		115808	1					
ANR	116316	CallExpression	zend_resolve_class_name_ast ( class_ast )		115808	0					
ANR	116317	Callee	zend_resolve_class_name_ast		115808	0					
ANR	116318	Identifier	zend_resolve_class_name_ast		115808	0					
ANR	116319	ArgumentList	class_ast		115808	1					
ANR	116320	Argument	class_ast		115808	0					
ANR	116321	Identifier	class_ast		115808	0					
ANR	116322	ExpressionStatement	opline -> op2_type = IS_CV	4163:2:119909:119933	115808	15	True				
ANR	116323	AssignmentExpression	opline -> op2_type = IS_CV		115808	0		=			
ANR	116324	PtrMemberAccess	opline -> op2_type		115808	0					
ANR	116325	Identifier	opline		115808	0					
ANR	116326	Identifier	op2_type		115808	1					
ANR	116327	Identifier	IS_CV		115808	1					
ANR	116328	ExpressionStatement	"opline -> op2 . var = lookup_cv ( CG ( active_op_array ) , zend_string_copy ( Z_STR_P ( var_name ) ) )"	4164:2:119937:120022	115808	16	True				
ANR	116329	AssignmentExpression	"opline -> op2 . var = lookup_cv ( CG ( active_op_array ) , zend_string_copy ( Z_STR_P ( var_name ) ) )"		115808	0		=			
ANR	116330	MemberAccess	opline -> op2 . var		115808	0					
ANR	116331	PtrMemberAccess	opline -> op2		115808	0					
ANR	116332	Identifier	opline		115808	0					
ANR	116333	Identifier	op2		115808	1					
ANR	116334	Identifier	var		115808	1					
ANR	116335	CallExpression	"lookup_cv ( CG ( active_op_array ) , zend_string_copy ( Z_STR_P ( var_name ) ) )"		115808	1					
ANR	116336	Callee	lookup_cv		115808	0					
ANR	116337	Identifier	lookup_cv		115808	0					
ANR	116338	ArgumentList	CG ( active_op_array )		115808	1					
ANR	116339	Argument	CG ( active_op_array )		115808	0					
ANR	116340	CallExpression	CG ( active_op_array )		115808	0					
ANR	116341	Callee	CG		115808	0					
ANR	116342	Identifier	CG		115808	0					
ANR	116343	ArgumentList	active_op_array		115808	1					
ANR	116344	Argument	active_op_array		115808	0					
ANR	116345	Identifier	active_op_array		115808	0					
ANR	116346	Argument	zend_string_copy ( Z_STR_P ( var_name ) )		115808	1					
ANR	116347	CallExpression	zend_string_copy ( Z_STR_P ( var_name ) )		115808	0					
ANR	116348	Callee	zend_string_copy		115808	0					
ANR	116349	Identifier	zend_string_copy		115808	0					
ANR	116350	ArgumentList	Z_STR_P ( var_name )		115808	1					
ANR	116351	Argument	Z_STR_P ( var_name )		115808	0					
ANR	116352	CallExpression	Z_STR_P ( var_name )		115808	0					
ANR	116353	Callee	Z_STR_P		115808	0					
ANR	116354	Identifier	Z_STR_P		115808	0					
ANR	116355	ArgumentList	var_name		115808	1					
ANR	116356	Argument	var_name		115808	0					
ANR	116357	Identifier	var_name		115808	0					
ANR	116358	ExpressionStatement	opline -> result . num = is_last_catch	4165:2:120026:120060	115808	17	True				
ANR	116359	AssignmentExpression	opline -> result . num = is_last_catch		115808	0		=			
ANR	116360	MemberAccess	opline -> result . num		115808	0					
ANR	116361	PtrMemberAccess	opline -> result		115808	0					
ANR	116362	Identifier	opline		115808	0					
ANR	116363	Identifier	result		115808	1					
ANR	116364	Identifier	num		115808	1					
ANR	116365	Identifier	is_last_catch		115808	1					
ANR	116366	ExpressionStatement	zend_compile_stmt ( stmt_ast )	4167:2:120065:120092	115808	18	True				
ANR	116367	CallExpression	zend_compile_stmt ( stmt_ast )		115808	0					
ANR	116368	Callee	zend_compile_stmt		115808	0					
ANR	116369	Identifier	zend_compile_stmt		115808	0					
ANR	116370	ArgumentList	stmt_ast		115808	1					
ANR	116371	Argument	stmt_ast		115808	0					
ANR	116372	Identifier	stmt_ast		115808	0					
ANR	116373	IfStatement	if ( ! is_last_catch )		115808	19					
ANR	116374	Condition	! is_last_catch	4169:6:120101:120114	115808	0	True				
ANR	116375	UnaryOperationExpression	! is_last_catch		115808	0					
ANR	116376	UnaryOperator	!		115808	0					
ANR	116377	Identifier	is_last_catch		115808	1					
ANR	116378	CompoundStatement		82:22:2583:2583	115808	1					
ANR	116379	ExpressionStatement	jmp_opnums [ i + 1 ] = zend_emit_jump ( 0 )	4170:3:120122:120159	115808	0	True				
ANR	116380	AssignmentExpression	jmp_opnums [ i + 1 ] = zend_emit_jump ( 0 )		115808	0		=			
ANR	116381	ArrayIndexing	jmp_opnums [ i + 1 ]		115808	0					
ANR	116382	Identifier	jmp_opnums		115808	0					
ANR	116383	AdditiveExpression	i + 1		115808	1		+			
ANR	116384	Identifier	i		115808	0					
ANR	116385	PrimaryExpression	1		115808	1					
ANR	116386	CallExpression	zend_emit_jump ( 0 )		115808	1					
ANR	116387	Callee	zend_emit_jump		115808	0					
ANR	116388	Identifier	zend_emit_jump		115808	0					
ANR	116389	ArgumentList	0		115808	1					
ANR	116390	Argument	0		115808	0					
ANR	116391	PrimaryExpression	0		115808	0					
ANR	116392	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ opnum_catch ]	4173:2:120168:120219	115808	20	True				
ANR	116393	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ opnum_catch ]		115808	0		=			
ANR	116394	Identifier	opline		115808	0					
ANR	116395	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ opnum_catch ]		115808	1					
ANR	116396	UnaryOperator	&		115808	0					
ANR	116397	ArrayIndexing	CG ( active_op_array ) -> opcodes [ opnum_catch ]		115808	1					
ANR	116398	PtrMemberAccess	CG ( active_op_array ) -> opcodes		115808	0					
ANR	116399	CallExpression	CG ( active_op_array )		115808	0					
ANR	116400	Callee	CG		115808	0					
ANR	116401	Identifier	CG		115808	0					
ANR	116402	ArgumentList	active_op_array		115808	1					
ANR	116403	Argument	active_op_array		115808	0					
ANR	116404	Identifier	active_op_array		115808	0					
ANR	116405	Identifier	opcodes		115808	1					
ANR	116406	Identifier	opnum_catch		115808	1					
ANR	116407	ExpressionStatement	opline -> extended_value = get_next_op_number ( CG ( active_op_array ) )	4174:2:120223:120287	115808	21	True				
ANR	116408	AssignmentExpression	opline -> extended_value = get_next_op_number ( CG ( active_op_array ) )		115808	0		=			
ANR	116409	PtrMemberAccess	opline -> extended_value		115808	0					
ANR	116410	Identifier	opline		115808	0					
ANR	116411	Identifier	extended_value		115808	1					
ANR	116412	CallExpression	get_next_op_number ( CG ( active_op_array ) )		115808	1					
ANR	116413	Callee	get_next_op_number		115808	0					
ANR	116414	Identifier	get_next_op_number		115808	0					
ANR	116415	ArgumentList	CG ( active_op_array )		115808	1					
ANR	116416	Argument	CG ( active_op_array )		115808	0					
ANR	116417	CallExpression	CG ( active_op_array )		115808	0					
ANR	116418	Callee	CG		115808	0					
ANR	116419	Identifier	CG		115808	0					
ANR	116420	ArgumentList	active_op_array		115808	1					
ANR	116421	Argument	active_op_array		115808	0					
ANR	116422	Identifier	active_op_array		115808	0					
ANR	116423	ForStatement	for ( i = 0 ; i < catches -> children ; ++ i )		115808	14					
ANR	116424	ForInit	i = 0 ;	4177:6:120299:120304	115808	0	True				
ANR	116425	AssignmentExpression	i = 0		115808	0		=			
ANR	116426	Identifier	i		115808	0					
ANR	116427	PrimaryExpression	0		115808	1					
ANR	116428	Condition	i < catches -> children	4177:13:120306:120326	115808	1	True				
ANR	116429	RelationalExpression	i < catches -> children		115808	0		<			
ANR	116430	Identifier	i		115808	0					
ANR	116431	PtrMemberAccess	catches -> children		115808	1					
ANR	116432	Identifier	catches		115808	0					
ANR	116433	Identifier	children		115808	1					
ANR	116434	UnaryExpression	++ i	4177:36:120329:120331	115808	2	True				
ANR	116435	IncDec	++		115808	0					
ANR	116436	Identifier	i		115808	1					
ANR	116437	CompoundStatement		90:41:2800:2800	115808	3					
ANR	116438	ExpressionStatement	zend_update_jump_target_to_next ( jmp_opnums [ i ] )	4178:2:120338:120384	115808	0	True				
ANR	116439	CallExpression	zend_update_jump_target_to_next ( jmp_opnums [ i ] )		115808	0					
ANR	116440	Callee	zend_update_jump_target_to_next		115808	0					
ANR	116441	Identifier	zend_update_jump_target_to_next		115808	0					
ANR	116442	ArgumentList	jmp_opnums [ i ]		115808	1					
ANR	116443	Argument	jmp_opnums [ i ]		115808	0					
ANR	116444	ArrayIndexing	jmp_opnums [ i ]		115808	0					
ANR	116445	Identifier	jmp_opnums		115808	0					
ANR	116446	Identifier	i		115808	1					
ANR	116447	IfStatement	if ( finally_ast )		115808	15					
ANR	116448	Condition	finally_ast	4181:5:120395:120405	115808	0	True				
ANR	116449	Identifier	finally_ast		115808	0					
ANR	116450	CompoundStatement		95:2:2878:2942	115808	1					
ANR	116451	IdentifierDeclStatement	uint32_t opnum_jmp = get_next_op_number ( CG ( active_op_array ) ) + 1 ;	4182:2:120412:120476	115808	0	True				
ANR	116452	IdentifierDecl	opnum_jmp = get_next_op_number ( CG ( active_op_array ) ) + 1		115808	0					
ANR	116453	IdentifierDeclType	uint32_t		115808	0					
ANR	116454	Identifier	opnum_jmp		115808	1					
ANR	116455	AssignmentExpression	opnum_jmp = get_next_op_number ( CG ( active_op_array ) ) + 1		115808	2		=			
ANR	116456	Identifier	opnum_jmp		115808	0					
ANR	116457	AdditiveExpression	get_next_op_number ( CG ( active_op_array ) ) + 1		115808	1		+			
ANR	116458	CallExpression	get_next_op_number ( CG ( active_op_array ) )		115808	0					
ANR	116459	Callee	get_next_op_number		115808	0					
ANR	116460	Identifier	get_next_op_number		115808	0					
ANR	116461	ArgumentList	CG ( active_op_array )		115808	1					
ANR	116462	Argument	CG ( active_op_array )		115808	0					
ANR	116463	CallExpression	CG ( active_op_array )		115808	0					
ANR	116464	Callee	CG		115808	0					
ANR	116465	Identifier	CG		115808	0					
ANR	116466	ArgumentList	active_op_array		115808	1					
ANR	116467	Argument	active_op_array		115808	0					
ANR	116468	Identifier	active_op_array		115808	0					
ANR	116469	PrimaryExpression	1		115808	1					
ANR	116470	ExpressionStatement	zend_stack_del_top ( & CG ( loop_var_stack ) )	4185:2:120523:120562	115808	1	True				
ANR	116471	CallExpression	zend_stack_del_top ( & CG ( loop_var_stack ) )		115808	0					
ANR	116472	Callee	zend_stack_del_top		115808	0					
ANR	116473	Identifier	zend_stack_del_top		115808	0					
ANR	116474	ArgumentList	& CG ( loop_var_stack )		115808	1					
ANR	116475	Argument	& CG ( loop_var_stack )		115808	0					
ANR	116476	UnaryOperationExpression	& CG ( loop_var_stack )		115808	0					
ANR	116477	UnaryOperator	&		115808	0					
ANR	116478	CallExpression	CG ( loop_var_stack )		115808	1					
ANR	116479	Callee	CG		115808	0					
ANR	116480	Identifier	CG		115808	0					
ANR	116481	ArgumentList	loop_var_stack		115808	1					
ANR	116482	Argument	loop_var_stack		115808	0					
ANR	116483	Identifier	loop_var_stack		115808	0					
ANR	116484	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_FAST_CALL , NULL , NULL )"	4187:2:120567:120622	115808	2	True				
ANR	116485	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_FAST_CALL , NULL , NULL )"		115808	0		=			
ANR	116486	Identifier	opline		115808	0					
ANR	116487	CallExpression	"zend_emit_op ( NULL , ZEND_FAST_CALL , NULL , NULL )"		115808	1					
ANR	116488	Callee	zend_emit_op		115808	0					
ANR	116489	Identifier	zend_emit_op		115808	0					
ANR	116490	ArgumentList	NULL		115808	1					
ANR	116491	Argument	NULL		115808	0					
ANR	116492	Identifier	NULL		115808	0					
ANR	116493	Argument	ZEND_FAST_CALL		115808	1					
ANR	116494	Identifier	ZEND_FAST_CALL		115808	0					
ANR	116495	Argument	NULL		115808	2					
ANR	116496	Identifier	NULL		115808	0					
ANR	116497	Argument	NULL		115808	3					
ANR	116498	Identifier	NULL		115808	0					
ANR	116499	ExpressionStatement	opline -> op1 . num = try_catch_offset	4188:2:120626:120660	115808	3	True				
ANR	116500	AssignmentExpression	opline -> op1 . num = try_catch_offset		115808	0		=			
ANR	116501	MemberAccess	opline -> op1 . num		115808	0					
ANR	116502	PtrMemberAccess	opline -> op1		115808	0					
ANR	116503	Identifier	opline		115808	0					
ANR	116504	Identifier	op1		115808	1					
ANR	116505	Identifier	num		115808	1					
ANR	116506	Identifier	try_catch_offset		115808	1					
ANR	116507	ExpressionStatement	opline -> result_type = IS_TMP_VAR	4189:2:120664:120696	115808	4	True				
ANR	116508	AssignmentExpression	opline -> result_type = IS_TMP_VAR		115808	0		=			
ANR	116509	PtrMemberAccess	opline -> result_type		115808	0					
ANR	116510	Identifier	opline		115808	0					
ANR	116511	Identifier	result_type		115808	1					
ANR	116512	Identifier	IS_TMP_VAR		115808	1					
ANR	116513	ExpressionStatement	opline -> result . var = CG ( context ) . fast_call_var	4190:2:120700:120746	115808	5	True				
ANR	116514	AssignmentExpression	opline -> result . var = CG ( context ) . fast_call_var		115808	0		=			
ANR	116515	MemberAccess	opline -> result . var		115808	0					
ANR	116516	PtrMemberAccess	opline -> result		115808	0					
ANR	116517	Identifier	opline		115808	0					
ANR	116518	Identifier	result		115808	1					
ANR	116519	Identifier	var		115808	1					
ANR	116520	MemberAccess	CG ( context ) . fast_call_var		115808	1					
ANR	116521	CallExpression	CG ( context )		115808	0					
ANR	116522	Callee	CG		115808	0					
ANR	116523	Identifier	CG		115808	0					
ANR	116524	ArgumentList	context		115808	1					
ANR	116525	Argument	context		115808	0					
ANR	116526	Identifier	context		115808	0					
ANR	116527	Identifier	fast_call_var		115808	1					
ANR	116528	ExpressionStatement	"zend_emit_op ( NULL , ZEND_JMP , NULL , NULL )"	4192:2:120751:120791	115808	6	True				
ANR	116529	CallExpression	"zend_emit_op ( NULL , ZEND_JMP , NULL , NULL )"		115808	0					
ANR	116530	Callee	zend_emit_op		115808	0					
ANR	116531	Identifier	zend_emit_op		115808	0					
ANR	116532	ArgumentList	NULL		115808	1					
ANR	116533	Argument	NULL		115808	0					
ANR	116534	Identifier	NULL		115808	0					
ANR	116535	Argument	ZEND_JMP		115808	1					
ANR	116536	Identifier	ZEND_JMP		115808	0					
ANR	116537	Argument	NULL		115808	2					
ANR	116538	Identifier	NULL		115808	0					
ANR	116539	Argument	NULL		115808	3					
ANR	116540	Identifier	NULL		115808	0					
ANR	116541	ExpressionStatement	CG ( context ) . in_finally ++	4194:2:120796:120820	115808	7	True				
ANR	116542	PostIncDecOperationExpression	CG ( context ) . in_finally ++		115808	0					
ANR	116543	MemberAccess	CG ( context ) . in_finally		115808	0					
ANR	116544	CallExpression	CG ( context )		115808	0					
ANR	116545	Callee	CG		115808	0					
ANR	116546	Identifier	CG		115808	0					
ANR	116547	ArgumentList	context		115808	1					
ANR	116548	Argument	context		115808	0					
ANR	116549	Identifier	context		115808	0					
ANR	116550	Identifier	in_finally		115808	1					
ANR	116551	IncDec	++		115808	1					
ANR	116552	ExpressionStatement	zend_compile_stmt ( finally_ast )	4195:2:120824:120854	115808	8	True				
ANR	116553	CallExpression	zend_compile_stmt ( finally_ast )		115808	0					
ANR	116554	Callee	zend_compile_stmt		115808	0					
ANR	116555	Identifier	zend_compile_stmt		115808	0					
ANR	116556	ArgumentList	finally_ast		115808	1					
ANR	116557	Argument	finally_ast		115808	0					
ANR	116558	Identifier	finally_ast		115808	0					
ANR	116559	ExpressionStatement	CG ( context ) . in_finally --	4196:2:120858:120882	115808	9	True				
ANR	116560	PostIncDecOperationExpression	CG ( context ) . in_finally --		115808	0					
ANR	116561	MemberAccess	CG ( context ) . in_finally		115808	0					
ANR	116562	CallExpression	CG ( context )		115808	0					
ANR	116563	Callee	CG		115808	0					
ANR	116564	Identifier	CG		115808	0					
ANR	116565	ArgumentList	context		115808	1					
ANR	116566	Argument	context		115808	0					
ANR	116567	Identifier	context		115808	0					
ANR	116568	Identifier	in_finally		115808	1					
ANR	116569	IncDec	--		115808	1					
ANR	116570	ExpressionStatement	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_op = opnum_jmp + 1	4198:2:120887:120968	115808	10	True				
ANR	116571	AssignmentExpression	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_op = opnum_jmp + 1		115808	0		=			
ANR	116572	MemberAccess	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_op		115808	0					
ANR	116573	ArrayIndexing	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ]		115808	0					
ANR	116574	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		115808	0					
ANR	116575	CallExpression	CG ( active_op_array )		115808	0					
ANR	116576	Callee	CG		115808	0					
ANR	116577	Identifier	CG		115808	0					
ANR	116578	ArgumentList	active_op_array		115808	1					
ANR	116579	Argument	active_op_array		115808	0					
ANR	116580	Identifier	active_op_array		115808	0					
ANR	116581	Identifier	try_catch_array		115808	1					
ANR	116582	Identifier	try_catch_offset		115808	1					
ANR	116583	Identifier	finally_op		115808	1					
ANR	116584	AdditiveExpression	opnum_jmp + 1		115808	1		+			
ANR	116585	Identifier	opnum_jmp		115808	0					
ANR	116586	PrimaryExpression	1		115808	1					
ANR	116587	ExpressionStatement	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_end = get_next_op_number ( CG ( active_op_array ) )	4199:2:120972:121083	115808	11	True				
ANR	116588	AssignmentExpression	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_end = get_next_op_number ( CG ( active_op_array ) )		115808	0		=			
ANR	116589	MemberAccess	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_end		115808	0					
ANR	116590	ArrayIndexing	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ]		115808	0					
ANR	116591	PtrMemberAccess	CG ( active_op_array ) -> try_catch_array		115808	0					
ANR	116592	CallExpression	CG ( active_op_array )		115808	0					
ANR	116593	Callee	CG		115808	0					
ANR	116594	Identifier	CG		115808	0					
ANR	116595	ArgumentList	active_op_array		115808	1					
ANR	116596	Argument	active_op_array		115808	0					
ANR	116597	Identifier	active_op_array		115808	0					
ANR	116598	Identifier	try_catch_array		115808	1					
ANR	116599	Identifier	try_catch_offset		115808	1					
ANR	116600	Identifier	finally_end		115808	1					
ANR	116601	CallExpression	get_next_op_number ( CG ( active_op_array ) )		115808	1					
ANR	116602	Callee	get_next_op_number		115808	0					
ANR	116603	Identifier	get_next_op_number		115808	0					
ANR	116604	ArgumentList	CG ( active_op_array )		115808	1					
ANR	116605	Argument	CG ( active_op_array )		115808	0					
ANR	116606	CallExpression	CG ( active_op_array )		115808	0					
ANR	116607	Callee	CG		115808	0					
ANR	116608	Identifier	CG		115808	0					
ANR	116609	ArgumentList	active_op_array		115808	1					
ANR	116610	Argument	active_op_array		115808	0					
ANR	116611	Identifier	active_op_array		115808	0					
ANR	116612	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_FAST_RET , NULL , NULL )"	4202:2:121088:121142	115808	12	True				
ANR	116613	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_FAST_RET , NULL , NULL )"		115808	0		=			
ANR	116614	Identifier	opline		115808	0					
ANR	116615	CallExpression	"zend_emit_op ( NULL , ZEND_FAST_RET , NULL , NULL )"		115808	1					
ANR	116616	Callee	zend_emit_op		115808	0					
ANR	116617	Identifier	zend_emit_op		115808	0					
ANR	116618	ArgumentList	NULL		115808	1					
ANR	116619	Argument	NULL		115808	0					
ANR	116620	Identifier	NULL		115808	0					
ANR	116621	Argument	ZEND_FAST_RET		115808	1					
ANR	116622	Identifier	ZEND_FAST_RET		115808	0					
ANR	116623	Argument	NULL		115808	2					
ANR	116624	Identifier	NULL		115808	0					
ANR	116625	Argument	NULL		115808	3					
ANR	116626	Identifier	NULL		115808	0					
ANR	116627	ExpressionStatement	opline -> op1_type = IS_TMP_VAR	4203:2:121146:121175	115808	13	True				
ANR	116628	AssignmentExpression	opline -> op1_type = IS_TMP_VAR		115808	0		=			
ANR	116629	PtrMemberAccess	opline -> op1_type		115808	0					
ANR	116630	Identifier	opline		115808	0					
ANR	116631	Identifier	op1_type		115808	1					
ANR	116632	Identifier	IS_TMP_VAR		115808	1					
ANR	116633	ExpressionStatement	opline -> op1 . var = CG ( context ) . fast_call_var	4204:2:121179:121222	115808	14	True				
ANR	116634	AssignmentExpression	opline -> op1 . var = CG ( context ) . fast_call_var		115808	0		=			
ANR	116635	MemberAccess	opline -> op1 . var		115808	0					
ANR	116636	PtrMemberAccess	opline -> op1		115808	0					
ANR	116637	Identifier	opline		115808	0					
ANR	116638	Identifier	op1		115808	1					
ANR	116639	Identifier	var		115808	1					
ANR	116640	MemberAccess	CG ( context ) . fast_call_var		115808	1					
ANR	116641	CallExpression	CG ( context )		115808	0					
ANR	116642	Callee	CG		115808	0					
ANR	116643	Identifier	CG		115808	0					
ANR	116644	ArgumentList	context		115808	1					
ANR	116645	Argument	context		115808	0					
ANR	116646	Identifier	context		115808	0					
ANR	116647	Identifier	fast_call_var		115808	1					
ANR	116648	ExpressionStatement	zend_update_jump_target_to_next ( opnum_jmp )	4206:2:121227:121269	115808	15	True				
ANR	116649	CallExpression	zend_update_jump_target_to_next ( opnum_jmp )		115808	0					
ANR	116650	Callee	zend_update_jump_target_to_next		115808	0					
ANR	116651	Identifier	zend_update_jump_target_to_next		115808	0					
ANR	116652	ArgumentList	opnum_jmp		115808	1					
ANR	116653	Argument	opnum_jmp		115808	0					
ANR	116654	Identifier	opnum_jmp		115808	0					
ANR	116655	ExpressionStatement	efree ( jmp_opnums )	4209:1:121276:121293	115808	16	True				
ANR	116656	CallExpression	efree ( jmp_opnums )		115808	0					
ANR	116657	Callee	efree		115808	0					
ANR	116658	Identifier	efree		115808	0					
ANR	116659	ArgumentList	jmp_opnums		115808	1					
ANR	116660	Argument	jmp_opnums		115808	0					
ANR	116661	Identifier	jmp_opnums		115808	0					
ANR	116662	ReturnType	void		115808	1					
ANR	116663	Identifier	zend_compile_try		115808	2					
ANR	116664	ParameterList	zend_ast * ast		115808	3					
ANR	116665	Parameter	zend_ast * ast	4087:22:117508:117520	115808	0	True				
ANR	116666	ParameterType	zend_ast *		115808	0					
ANR	116667	Identifier	ast		115808	1					
ANR	116668	CFGEntryNode	ENTRY		115808		True				
ANR	116669	CFGExitNode	EXIT		115808		True				
ANR	116670	CFGErrorNode	ERROR		115808		True				
ANR	116671	Symbol	fast_call . var_type		115808						
ANR	116672	Symbol	* CG		115808						
ANR	116673	Symbol	get_temporary_variable		115808						
ANR	116674	Symbol	* * catches		115808						
ANR	116675	Symbol	catch_ast		115808						
ANR	116676	Symbol	ZEND_CATCH		115808						
ANR	116677	Symbol	* CG ( active_op_array ) -> try_catch_array		115808						
ANR	116678	Symbol	context		115808						
ANR	116679	Symbol	fast_call . u . try_catch_offset		115808						
ANR	116680	Symbol	catches -> children		115808						
ANR	116681	Symbol	IS_CONST		115808						
ANR	116682	Symbol	catch_ast -> child		115808						
ANR	116683	Symbol	* catch_ast		115808						
ANR	116684	Symbol	* catches		115808						
ANR	116685	Symbol	zend_add_try_element		115808						
ANR	116686	Symbol	* ast -> child		115808						
ANR	116687	Symbol	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_end		115808						
ANR	116688	Symbol	fast_call		115808						
ANR	116689	Symbol	zend_emit_op		115808						
ANR	116690	Symbol	zend_is_const_default_class_ref		115808						
ANR	116691	Symbol	zend_add_class_name_literal		115808						
ANR	116692	Symbol	* catch_ast -> child		115808						
ANR	116693	Symbol	jmp_opnums		115808						
ANR	116694	Symbol	class_ast		115808						
ANR	116695	Symbol	fast_call . u		115808						
ANR	116696	Symbol	try_ast		115808						
ANR	116697	Symbol	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . finally_op		115808						
ANR	116698	Symbol	loop_var_stack		115808						
ANR	116699	Symbol	opline -> op1 . constant		115808						
ANR	116700	Symbol	ZEND_ACC_HAS_FINALLY_BLOCK		115808						
ANR	116701	Symbol	CG ( active_op_array ) -> try_catch_array [ try_catch_offset ] . catch_op		115808						
ANR	116702	Symbol	opline -> op1 . var		115808						
ANR	116703	Symbol	var_name		115808						
ANR	116704	Symbol	ZEND_FAST_CALL		115808						
ANR	116705	Symbol	opnum_catch		115808						
ANR	116706	Symbol	get_next_op		115808						
ANR	116707	Symbol	CG		115808						
ANR	116708	Symbol	active_op_array		115808						
ANR	116709	Symbol	i		115808						
ANR	116710	Symbol	label -> opline_num		115808						
ANR	116711	Symbol	var_ast		115808						
ANR	116712	Symbol	ZEND_JMP		115808						
ANR	116713	Symbol	* opline		115808						
ANR	116714	Symbol	* try_catch_offset		115808						
ANR	116715	Symbol	opline -> op2_type		115808						
ANR	116716	Symbol	safe_emalloc		115808						
ANR	116717	Symbol	get_next_op_number		115808						
ANR	116718	Symbol	opline -> result . var		115808						
ANR	116719	Symbol	zend_emit_jump		115808						
ANR	116720	Symbol	ZEND_FAST_RET		115808						
ANR	116721	Symbol	stmt_ast		115808						
ANR	116722	Symbol	opline -> op2 . var		115808						
ANR	116723	Symbol	ast		115808						
ANR	116724	Symbol	IS_CV		115808						
ANR	116725	Symbol	E_COMPILE_ERROR		115808						
ANR	116726	Symbol	catches		115808						
ANR	116727	Symbol	CG ( context ) . fast_call_var		115808						
ANR	116728	Symbol	is_last_catch		115808						
ANR	116729	Symbol	CG ( active_op_array ) -> opcodes		115808						
ANR	116730	Symbol	opline -> result		115808						
ANR	116731	Symbol	opline -> extended_value		115808						
ANR	116732	Symbol	& CG		115808						
ANR	116733	Symbol	opline		115808						
ANR	116734	Symbol	& fast_call		115808						
ANR	116735	Symbol	zend_lineno		115808						
ANR	116736	Symbol	IS_TMP_VAR		115808						
ANR	116737	Symbol	opnum_jmp		115808						
ANR	116738	Symbol	NULL		115808						
ANR	116739	Symbol	zend_string_copy		115808						
ANR	116740	Symbol	ZEND_NOP		115808						
ANR	116741	Symbol	CG ( active_op_array ) -> fn_flags		115808						
ANR	116742	Symbol	opline -> op1_type		115808						
ANR	116743	Symbol	* jmp_opnums		115808						
ANR	116744	Symbol	catches -> child		115808						
ANR	116745	Symbol	opline -> op1 . num		115808						
ANR	116746	Symbol	Z_STR_P		115808						
ANR	116747	Symbol	ast -> child		115808						
ANR	116748	Symbol	zend_ast_get_zval		115808						
ANR	116749	Symbol	catch_ast -> lineno		115808						
ANR	116750	Symbol	opline -> op1		115808						
ANR	116751	Symbol	opline -> op2		115808						
ANR	116752	Symbol	lookup_cv		115808						
ANR	116753	Symbol	* * catch_ast		115808						
ANR	116754	Symbol	CG ( active_op_array ) -> try_catch_array		115808						
ANR	116755	Symbol	* * CG		115808						
ANR	116756	Symbol	* ast		115808						
ANR	116757	Symbol	* catches -> child		115808						
ANR	116758	Symbol	* * ast		115808						
ANR	116759	Symbol	CG ( context ) . labels		115808						
ANR	116760	Symbol	opline -> result . num		115808						
ANR	116761	Symbol	opline -> result_type		115808						
ANR	116762	Symbol	CG ( context ) . in_finally		115808						
ANR	116763	Symbol	fast_call . opcode		115808						
ANR	116764	Symbol	zend_resolve_class_name_ast		115808						
ANR	116765	Symbol	try_catch_offset		115808						
ANR	116766	Symbol	label		115808						
ANR	116767	Symbol	fast_call . var_num		115808						
ANR	116768	Symbol	zend_ast_get_list		115808						
ANR	116769	Symbol	* i		115808						
ANR	116770	Symbol	opline -> opcode		115808						
ANR	116771	Symbol	finally_ast		115808						
ANR	116772	Symbol	* label		115808						
ANR	116773	Function	zend_handle_encoding_declaration	4214:0:121375:122945							
ANR	116774	FunctionDef	zend_handle_encoding_declaration (zend_ast * ast)		116773	0					
ANR	116775	CompoundStatement		4215:0:121438:122945	116773	0					
ANR	116776	IdentifierDeclStatement	zend_ast_list * declares = zend_ast_get_list ( ast ) ;	4216:1:121441:121489	116773	0	True				
ANR	116777	IdentifierDecl	* declares = zend_ast_get_list ( ast )		116773	0					
ANR	116778	IdentifierDeclType	zend_ast_list *		116773	0					
ANR	116779	Identifier	declares		116773	1					
ANR	116780	AssignmentExpression	* declares = zend_ast_get_list ( ast )		116773	2		=			
ANR	116781	Identifier	declares		116773	0					
ANR	116782	CallExpression	zend_ast_get_list ( ast )		116773	1					
ANR	116783	Callee	zend_ast_get_list		116773	0					
ANR	116784	Identifier	zend_ast_get_list		116773	0					
ANR	116785	ArgumentList	ast		116773	1					
ANR	116786	Argument	ast		116773	0					
ANR	116787	Identifier	ast		116773	0					
ANR	116788	IdentifierDeclStatement	uint32_t i ;	4217:1:121492:121502	116773	1	True				
ANR	116789	IdentifierDecl	i		116773	0					
ANR	116790	IdentifierDeclType	uint32_t		116773	0					
ANR	116791	Identifier	i		116773	1					
ANR	116792	ForStatement	for ( i = 0 ; i < declares -> children ; ++ i )		116773	2					
ANR	116793	ForInit	i = 0 ;	4218:6:121510:121515	116773	0	True				
ANR	116794	AssignmentExpression	i = 0		116773	0		=			
ANR	116795	Identifier	i		116773	0					
ANR	116796	PrimaryExpression	0		116773	1					
ANR	116797	Condition	i < declares -> children	4218:13:121517:121538	116773	1	True				
ANR	116798	RelationalExpression	i < declares -> children		116773	0		<			
ANR	116799	Identifier	i		116773	0					
ANR	116800	PtrMemberAccess	declares -> children		116773	1					
ANR	116801	Identifier	declares		116773	0					
ANR	116802	Identifier	children		116773	1					
ANR	116803	UnaryExpression	++ i	4218:37:121541:121543	116773	2	True				
ANR	116804	IncDec	++		116773	0					
ANR	116805	Identifier	i		116773	1					
ANR	116806	CompoundStatement		8:2:250:296	116773	3					
ANR	116807	IdentifierDeclStatement	zend_ast * declare_ast = declares -> child [ i ] ;	4219:2:121550:121592	116773	0	True				
ANR	116808	IdentifierDecl	* declare_ast = declares -> child [ i ]		116773	0					
ANR	116809	IdentifierDeclType	zend_ast *		116773	0					
ANR	116810	Identifier	declare_ast		116773	1					
ANR	116811	AssignmentExpression	* declare_ast = declares -> child [ i ]		116773	2		=			
ANR	116812	Identifier	declare_ast		116773	0					
ANR	116813	ArrayIndexing	declares -> child [ i ]		116773	1					
ANR	116814	PtrMemberAccess	declares -> child		116773	0					
ANR	116815	Identifier	declares		116773	0					
ANR	116816	Identifier	child		116773	1					
ANR	116817	Identifier	i		116773	1					
ANR	116818	IdentifierDeclStatement	zend_ast * name_ast = declare_ast -> child [ 0 ] ;	4220:2:121596:121638	116773	1	True				
ANR	116819	IdentifierDecl	* name_ast = declare_ast -> child [ 0 ]		116773	0					
ANR	116820	IdentifierDeclType	zend_ast *		116773	0					
ANR	116821	Identifier	name_ast		116773	1					
ANR	116822	AssignmentExpression	* name_ast = declare_ast -> child [ 0 ]		116773	2		=			
ANR	116823	Identifier	name_ast		116773	0					
ANR	116824	ArrayIndexing	declare_ast -> child [ 0 ]		116773	1					
ANR	116825	PtrMemberAccess	declare_ast -> child		116773	0					
ANR	116826	Identifier	declare_ast		116773	0					
ANR	116827	Identifier	child		116773	1					
ANR	116828	PrimaryExpression	0		116773	1					
ANR	116829	IdentifierDeclStatement	zend_ast * value_ast = declare_ast -> child [ 1 ] ;	4221:2:121642:121685	116773	2	True				
ANR	116830	IdentifierDecl	* value_ast = declare_ast -> child [ 1 ]		116773	0					
ANR	116831	IdentifierDeclType	zend_ast *		116773	0					
ANR	116832	Identifier	value_ast		116773	1					
ANR	116833	AssignmentExpression	* value_ast = declare_ast -> child [ 1 ]		116773	2		=			
ANR	116834	Identifier	value_ast		116773	0					
ANR	116835	ArrayIndexing	declare_ast -> child [ 1 ]		116773	1					
ANR	116836	PtrMemberAccess	declare_ast -> child		116773	0					
ANR	116837	Identifier	declare_ast		116773	0					
ANR	116838	Identifier	child		116773	1					
ANR	116839	PrimaryExpression	1		116773	1					
ANR	116840	IdentifierDeclStatement	zend_string * name = zend_ast_get_str ( name_ast ) ;	4222:2:121689:121735	116773	3	True				
ANR	116841	IdentifierDecl	* name = zend_ast_get_str ( name_ast )		116773	0					
ANR	116842	IdentifierDeclType	zend_string *		116773	0					
ANR	116843	Identifier	name		116773	1					
ANR	116844	AssignmentExpression	* name = zend_ast_get_str ( name_ast )		116773	2		=			
ANR	116845	Identifier	name		116773	0					
ANR	116846	CallExpression	zend_ast_get_str ( name_ast )		116773	1					
ANR	116847	Callee	zend_ast_get_str		116773	0					
ANR	116848	Identifier	zend_ast_get_str		116773	0					
ANR	116849	ArgumentList	name_ast		116773	1					
ANR	116850	Argument	name_ast		116773	0					
ANR	116851	Identifier	name_ast		116773	0					
ANR	116852	IfStatement	"if ( zend_string_equals_literal_ci ( name , ""encoding"" ) )"		116773	4					
ANR	116853	Condition	"zend_string_equals_literal_ci ( name , ""encoding"" )"	4224:6:121744:121790	116773	0	True				
ANR	116854	CallExpression	"zend_string_equals_literal_ci ( name , ""encoding"" )"		116773	0					
ANR	116855	Callee	zend_string_equals_literal_ci		116773	0					
ANR	116856	Identifier	zend_string_equals_literal_ci		116773	0					
ANR	116857	ArgumentList	name		116773	1					
ANR	116858	Argument	name		116773	0					
ANR	116859	Identifier	name		116773	0					
ANR	116860	Argument	"""encoding"""		116773	1					
ANR	116861	PrimaryExpression	"""encoding"""		116773	0					
ANR	116862	CompoundStatement		10:55:354:354	116773	1					
ANR	116863	IfStatement	if ( value_ast -> kind != ZEND_AST_ZVAL )		116773	0					
ANR	116864	Condition	value_ast -> kind != ZEND_AST_ZVAL	4225:7:121802:121833	116773	0	True				
ANR	116865	EqualityExpression	value_ast -> kind != ZEND_AST_ZVAL		116773	0		!=			
ANR	116866	PtrMemberAccess	value_ast -> kind		116773	0					
ANR	116867	Identifier	value_ast		116773	0					
ANR	116868	Identifier	kind		116773	1					
ANR	116869	Identifier	ZEND_AST_ZVAL		116773	1					
ANR	116870	CompoundStatement		11:41:397:397	116773	1					
ANR	116871	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Encoding must be a literal"" )"	4226:4:121842:121908	116773	0	True				
ANR	116872	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Encoding must be a literal"" )"		116773	0					
ANR	116873	Callee	zend_error_noreturn		116773	0					
ANR	116874	Identifier	zend_error_noreturn		116773	0					
ANR	116875	ArgumentList	E_COMPILE_ERROR		116773	1					
ANR	116876	Argument	E_COMPILE_ERROR		116773	0					
ANR	116877	Identifier	E_COMPILE_ERROR		116773	0					
ANR	116878	Argument	"""Encoding must be a literal"""		116773	1					
ANR	116879	PrimaryExpression	"""Encoding must be a literal"""		116773	0					
ANR	116880	IfStatement	if ( CG ( multibyte ) )		116773	1					
ANR	116881	Condition	CG ( multibyte )	4229:7:121923:121935	116773	0	True				
ANR	116882	CallExpression	CG ( multibyte )		116773	0					
ANR	116883	Callee	CG		116773	0					
ANR	116884	Identifier	CG		116773	0					
ANR	116885	ArgumentList	multibyte		116773	1					
ANR	116886	Argument	multibyte		116773	0					
ANR	116887	Identifier	multibyte		116773	0					
ANR	116888	CompoundStatement		19:4:640:677	116773	1					
ANR	116889	IdentifierDeclStatement	zend_string * encoding_name = zval_get_string ( zend_ast_get_zval ( value_ast ) ) ;	4230:4:121944:122018	116773	0	True				
ANR	116890	IdentifierDecl	* encoding_name = zval_get_string ( zend_ast_get_zval ( value_ast ) )		116773	0					
ANR	116891	IdentifierDeclType	zend_string *		116773	0					
ANR	116892	Identifier	encoding_name		116773	1					
ANR	116893	AssignmentExpression	* encoding_name = zval_get_string ( zend_ast_get_zval ( value_ast ) )		116773	2		=			
ANR	116894	Identifier	encoding_name		116773	0					
ANR	116895	CallExpression	zval_get_string ( zend_ast_get_zval ( value_ast ) )		116773	1					
ANR	116896	Callee	zval_get_string		116773	0					
ANR	116897	Identifier	zval_get_string		116773	0					
ANR	116898	ArgumentList	zend_ast_get_zval ( value_ast )		116773	1					
ANR	116899	Argument	zend_ast_get_zval ( value_ast )		116773	0					
ANR	116900	CallExpression	zend_ast_get_zval ( value_ast )		116773	0					
ANR	116901	Callee	zend_ast_get_zval		116773	0					
ANR	116902	Identifier	zend_ast_get_zval		116773	0					
ANR	116903	ArgumentList	value_ast		116773	1					
ANR	116904	Argument	value_ast		116773	0					
ANR	116905	Identifier	value_ast		116773	0					
ANR	116906	IdentifierDeclStatement	"const zend_encoding * new_encoding , * old_encoding ;"	4232:4:122025:122073	116773	1	True				
ANR	116907	IdentifierDecl	* new_encoding		116773	0					
ANR	116908	IdentifierDeclType	const zend_encoding *		116773	0					
ANR	116909	Identifier	new_encoding		116773	1					
ANR	116910	IdentifierDecl	* old_encoding		116773	1					
ANR	116911	IdentifierDeclType	const zend_encoding *		116773	0					
ANR	116912	Identifier	old_encoding		116773	1					
ANR	116913	IdentifierDeclStatement	zend_encoding_filter old_input_filter ;	4233:4:122079:122116	116773	2	True				
ANR	116914	IdentifierDecl	old_input_filter		116773	0					
ANR	116915	IdentifierDeclType	zend_encoding_filter		116773	0					
ANR	116916	Identifier	old_input_filter		116773	1					
ANR	116917	ExpressionStatement	CG ( encoding_declared ) = 1	4235:4:122123:122148	116773	3	True				
ANR	116918	AssignmentExpression	CG ( encoding_declared ) = 1		116773	0		=			
ANR	116919	CallExpression	CG ( encoding_declared )		116773	0					
ANR	116920	Callee	CG		116773	0					
ANR	116921	Identifier	CG		116773	0					
ANR	116922	ArgumentList	encoding_declared		116773	1					
ANR	116923	Argument	encoding_declared		116773	0					
ANR	116924	Identifier	encoding_declared		116773	0					
ANR	116925	PrimaryExpression	1		116773	1					
ANR	116926	ExpressionStatement	new_encoding = zend_multibyte_fetch_encoding ( ZSTR_VAL ( encoding_name ) )	4237:4:122155:122224	116773	4	True				
ANR	116927	AssignmentExpression	new_encoding = zend_multibyte_fetch_encoding ( ZSTR_VAL ( encoding_name ) )		116773	0		=			
ANR	116928	Identifier	new_encoding		116773	0					
ANR	116929	CallExpression	zend_multibyte_fetch_encoding ( ZSTR_VAL ( encoding_name ) )		116773	1					
ANR	116930	Callee	zend_multibyte_fetch_encoding		116773	0					
ANR	116931	Identifier	zend_multibyte_fetch_encoding		116773	0					
ANR	116932	ArgumentList	ZSTR_VAL ( encoding_name )		116773	1					
ANR	116933	Argument	ZSTR_VAL ( encoding_name )		116773	0					
ANR	116934	CallExpression	ZSTR_VAL ( encoding_name )		116773	0					
ANR	116935	Callee	ZSTR_VAL		116773	0					
ANR	116936	Identifier	ZSTR_VAL		116773	0					
ANR	116937	ArgumentList	encoding_name		116773	1					
ANR	116938	Argument	encoding_name		116773	0					
ANR	116939	Identifier	encoding_name		116773	0					
ANR	116940	IfStatement	if ( ! new_encoding )		116773	5					
ANR	116941	Condition	! new_encoding	4238:8:122234:122246	116773	0	True				
ANR	116942	UnaryOperationExpression	! new_encoding		116773	0					
ANR	116943	UnaryOperator	!		116773	0					
ANR	116944	Identifier	new_encoding		116773	1					
ANR	116945	CompoundStatement		24:23:810:810	116773	1					
ANR	116946	ExpressionStatement	"zend_error ( E_COMPILE_WARNING , ""Unsupported encoding [%s]"" , ZSTR_VAL ( encoding_name ) )"	4239:5:122256:122339	116773	0	True				
ANR	116947	CallExpression	"zend_error ( E_COMPILE_WARNING , ""Unsupported encoding [%s]"" , ZSTR_VAL ( encoding_name ) )"		116773	0					
ANR	116948	Callee	zend_error		116773	0					
ANR	116949	Identifier	zend_error		116773	0					
ANR	116950	ArgumentList	E_COMPILE_WARNING		116773	1					
ANR	116951	Argument	E_COMPILE_WARNING		116773	0					
ANR	116952	Identifier	E_COMPILE_WARNING		116773	0					
ANR	116953	Argument	"""Unsupported encoding [%s]"""		116773	1					
ANR	116954	PrimaryExpression	"""Unsupported encoding [%s]"""		116773	0					
ANR	116955	Argument	ZSTR_VAL ( encoding_name )		116773	2					
ANR	116956	CallExpression	ZSTR_VAL ( encoding_name )		116773	0					
ANR	116957	Callee	ZSTR_VAL		116773	0					
ANR	116958	Identifier	ZSTR_VAL		116773	0					
ANR	116959	ArgumentList	encoding_name		116773	1					
ANR	116960	Argument	encoding_name		116773	0					
ANR	116961	Identifier	encoding_name		116773	0					
ANR	116962	ElseStatement	else		116773	0					
ANR	116963	CompoundStatement		26:11:913:913	116773	0					
ANR	116964	ExpressionStatement	old_input_filter = LANG_SCNG ( input_filter )	4241:5:122359:122401	116773	0	True				
ANR	116965	AssignmentExpression	old_input_filter = LANG_SCNG ( input_filter )		116773	0		=			
ANR	116966	Identifier	old_input_filter		116773	0					
ANR	116967	CallExpression	LANG_SCNG ( input_filter )		116773	1					
ANR	116968	Callee	LANG_SCNG		116773	0					
ANR	116969	Identifier	LANG_SCNG		116773	0					
ANR	116970	ArgumentList	input_filter		116773	1					
ANR	116971	Argument	input_filter		116773	0					
ANR	116972	Identifier	input_filter		116773	0					
ANR	116973	ExpressionStatement	old_encoding = LANG_SCNG ( script_encoding )	4242:5:122408:122449	116773	1	True				
ANR	116974	AssignmentExpression	old_encoding = LANG_SCNG ( script_encoding )		116773	0		=			
ANR	116975	Identifier	old_encoding		116773	0					
ANR	116976	CallExpression	LANG_SCNG ( script_encoding )		116773	1					
ANR	116977	Callee	LANG_SCNG		116773	0					
ANR	116978	Identifier	LANG_SCNG		116773	0					
ANR	116979	ArgumentList	script_encoding		116773	1					
ANR	116980	Argument	script_encoding		116773	0					
ANR	116981	Identifier	script_encoding		116773	0					
ANR	116982	ExpressionStatement	zend_multibyte_set_filter ( new_encoding )	4243:5:122456:122495	116773	2	True				
ANR	116983	CallExpression	zend_multibyte_set_filter ( new_encoding )		116773	0					
ANR	116984	Callee	zend_multibyte_set_filter		116773	0					
ANR	116985	Identifier	zend_multibyte_set_filter		116773	0					
ANR	116986	ArgumentList	new_encoding		116773	1					
ANR	116987	Argument	new_encoding		116773	0					
ANR	116988	Identifier	new_encoding		116773	0					
ANR	116989	IfStatement	if ( old_input_filter != LANG_SCNG ( input_filter ) || ( old_input_filter && new_encoding != old_encoding ) )		116773	3					
ANR	116990	Condition	old_input_filter != LANG_SCNG ( input_filter ) || ( old_input_filter && new_encoding != old_encoding )	4246:9:122558:122661	116773	0	True				
ANR	116991	OrExpression	old_input_filter != LANG_SCNG ( input_filter ) || ( old_input_filter && new_encoding != old_encoding )		116773	0		||			
ANR	116992	EqualityExpression	old_input_filter != LANG_SCNG ( input_filter )		116773	0		!=			
ANR	116993	Identifier	old_input_filter		116773	0					
ANR	116994	CallExpression	LANG_SCNG ( input_filter )		116773	1					
ANR	116995	Callee	LANG_SCNG		116773	0					
ANR	116996	Identifier	LANG_SCNG		116773	0					
ANR	116997	ArgumentList	input_filter		116773	1					
ANR	116998	Argument	input_filter		116773	0					
ANR	116999	Identifier	input_filter		116773	0					
ANR	117000	AndExpression	old_input_filter && new_encoding != old_encoding		116773	1		&&			
ANR	117001	Identifier	old_input_filter		116773	0					
ANR	117002	EqualityExpression	new_encoding != old_encoding		116773	1		!=			
ANR	117003	Identifier	new_encoding		116773	0					
ANR	117004	Identifier	old_encoding		116773	1					
ANR	117005	CompoundStatement		33:59:1225:1225	116773	1					
ANR	117006	ExpressionStatement	"zend_multibyte_yyinput_again ( old_input_filter , old_encoding )"	4248:6:122672:122732	116773	0	True				
ANR	117007	CallExpression	"zend_multibyte_yyinput_again ( old_input_filter , old_encoding )"		116773	0					
ANR	117008	Callee	zend_multibyte_yyinput_again		116773	0					
ANR	117009	Identifier	zend_multibyte_yyinput_again		116773	0					
ANR	117010	ArgumentList	old_input_filter		116773	1					
ANR	117011	Argument	old_input_filter		116773	0					
ANR	117012	Identifier	old_input_filter		116773	0					
ANR	117013	Argument	old_encoding		116773	1					
ANR	117014	Identifier	old_encoding		116773	0					
ANR	117015	ExpressionStatement	zend_string_release ( encoding_name )	4252:4:122752:122786	116773	6	True				
ANR	117016	CallExpression	zend_string_release ( encoding_name )		116773	0					
ANR	117017	Callee	zend_string_release		116773	0					
ANR	117018	Identifier	zend_string_release		116773	0					
ANR	117019	ArgumentList	encoding_name		116773	1					
ANR	117020	Argument	encoding_name		116773	0					
ANR	117021	Identifier	encoding_name		116773	0					
ANR	117022	ElseStatement	else		116773	0					
ANR	117023	CompoundStatement		39:10:1359:1359	116773	0					
ANR	117024	Statement	zend_error	4254:4:122804:122813	116773	0	True				
ANR	117025	Statement	(	4254:14:122814:122814	116773	1	True				
ANR	117026	Statement	E_COMPILE_WARNING	4254:15:122815:122831	116773	2	True				
ANR	117027	Statement	","	4254:32:122832:122832	116773	3	True				
ANR	117028	Statement	"""declare(encoding=...) ignored because """	4254:34:122834:122873	116773	4	True				
ANR	117029	Statement	"""Zend multibyte feature is turned off by settings"""	4255:5:122880:122929	116773	5	True				
ANR	117030	Statement	)	4255:55:122930:122930	116773	6	True				
ANR	117031	ExpressionStatement		4255:56:122931:122931	116773	7	True				
ANR	117032	ReturnType	void		116773	1					
ANR	117033	Identifier	zend_handle_encoding_declaration		116773	2					
ANR	117034	ParameterList	zend_ast * ast		116773	3					
ANR	117035	Parameter	zend_ast * ast	4214:38:121413:121425	116773	0	True				
ANR	117036	ParameterType	zend_ast *		116773	0					
ANR	117037	Identifier	ast		116773	1					
ANR	117038	CFGEntryNode	ENTRY		116773		True				
ANR	117039	CFGExitNode	EXIT		116773		True				
ANR	117040	Symbol	script_encoding		116773						
ANR	117041	Symbol	ast		116773						
ANR	117042	Symbol	* * declares		116773						
ANR	117043	Symbol	new_encoding		116773						
ANR	117044	Symbol	E_COMPILE_ERROR		116773						
ANR	117045	Symbol	input_filter		116773						
ANR	117046	Symbol	* declares		116773						
ANR	117047	Symbol	declares -> child		116773						
ANR	117048	Symbol	* declares -> child		116773						
ANR	117049	Symbol	* declare_ast		116773						
ANR	117050	Symbol	declares		116773						
ANR	117051	Symbol	* declare_ast -> child		116773						
ANR	117052	Symbol	zend_ast_get_str		116773						
ANR	117053	Symbol	value_ast -> kind		116773						
ANR	117054	Symbol	multibyte		116773						
ANR	117055	Symbol	value_ast		116773						
ANR	117056	Symbol	declare_ast -> child		116773						
ANR	117057	Symbol	LANG_SCNG		116773						
ANR	117058	Symbol	ZEND_AST_ZVAL		116773						
ANR	117059	Symbol	E_COMPILE_WARNING		116773						
ANR	117060	Symbol	CG		116773						
ANR	117061	Symbol	i		116773						
ANR	117062	Symbol	zval_get_string		116773						
ANR	117063	Symbol	* value_ast		116773						
ANR	117064	Symbol	declare_ast		116773						
ANR	117065	Symbol	zend_multibyte_fetch_encoding		116773						
ANR	117066	Symbol	zend_string_equals_literal_ci		116773						
ANR	117067	Symbol	ZSTR_VAL		116773						
ANR	117068	Symbol	zend_ast_get_list		116773						
ANR	117069	Symbol	encoding_name		116773						
ANR	117070	Symbol	declares -> children		116773						
ANR	117071	Symbol	* i		116773						
ANR	117072	Symbol	* * declare_ast		116773						
ANR	117073	Symbol	encoding_declared		116773						
ANR	117074	Symbol	name_ast		116773						
ANR	117075	Symbol	name		116773						
ANR	117076	Symbol	old_input_filter		116773						
ANR	117077	Symbol	zend_ast_get_zval		116773						
ANR	117078	Symbol	old_encoding		116773						
ANR	117079	Function	zend_declare_is_first_statement	4262:0:122958:123557							
ANR	117080	FunctionDef	zend_declare_is_first_statement (zend_ast * ast)		117079	0					
ANR	117081	CompoundStatement		4263:0:123026:123557	117079	0					
ANR	117082	IdentifierDeclStatement	uint32_t i = 0 ;	4264:1:123029:123043	117079	0	True				
ANR	117083	IdentifierDecl	i = 0		117079	0					
ANR	117084	IdentifierDeclType	uint32_t		117079	0					
ANR	117085	Identifier	i		117079	1					
ANR	117086	AssignmentExpression	i = 0		117079	2		=			
ANR	117087	Identifier	i		117079	0					
ANR	117088	PrimaryExpression	0		117079	1					
ANR	117089	IdentifierDeclStatement	zend_ast_list * file_ast = zend_ast_get_list ( CG ( ast ) ) ;	4265:1:123046:123098	117079	1	True				
ANR	117090	IdentifierDecl	* file_ast = zend_ast_get_list ( CG ( ast ) )		117079	0					
ANR	117091	IdentifierDeclType	zend_ast_list *		117079	0					
ANR	117092	Identifier	file_ast		117079	1					
ANR	117093	AssignmentExpression	* file_ast = zend_ast_get_list ( CG ( ast ) )		117079	2		=			
ANR	117094	Identifier	file_ast		117079	0					
ANR	117095	CallExpression	zend_ast_get_list ( CG ( ast ) )		117079	1					
ANR	117096	Callee	zend_ast_get_list		117079	0					
ANR	117097	Identifier	zend_ast_get_list		117079	0					
ANR	117098	ArgumentList	CG ( ast )		117079	1					
ANR	117099	Argument	CG ( ast )		117079	0					
ANR	117100	CallExpression	CG ( ast )		117079	0					
ANR	117101	Callee	CG		117079	0					
ANR	117102	Identifier	CG		117079	0					
ANR	117103	ArgumentList	ast		117079	1					
ANR	117104	Argument	ast		117079	0					
ANR	117105	Identifier	ast		117079	0					
ANR	117106	WhileStatement	while ( i < file_ast -> children )		117079	2					
ANR	117107	Condition	i < file_ast -> children	4268:8:123185:123206	117079	0	True				
ANR	117108	RelationalExpression	i < file_ast -> children		117079	0		<			
ANR	117109	Identifier	i		117079	0					
ANR	117110	PtrMemberAccess	file_ast -> children		117079	1					
ANR	117111	Identifier	file_ast		117079	0					
ANR	117112	Identifier	children		117079	1					
ANR	117113	CompoundStatement		6:32:182:182	117079	1					
ANR	117114	IfStatement	if ( file_ast -> child [ i ] == ast )		117079	0					
ANR	117115	Condition	file_ast -> child [ i ] == ast	4269:6:123217:123241	117079	0	True				
ANR	117116	EqualityExpression	file_ast -> child [ i ] == ast		117079	0		==			
ANR	117117	ArrayIndexing	file_ast -> child [ i ]		117079	0					
ANR	117118	PtrMemberAccess	file_ast -> child		117079	0					
ANR	117119	Identifier	file_ast		117079	0					
ANR	117120	Identifier	child		117079	1					
ANR	117121	Identifier	i		117079	1					
ANR	117122	Identifier	ast		117079	1					
ANR	117123	CompoundStatement		7:33:217:217	117079	1					
ANR	117124	ReturnStatement	return SUCCESS ;	4270:3:123249:123263	117079	0	True				
ANR	117125	Identifier	SUCCESS		117079	0					
ANR	117126	ElseStatement	else		117079	0					
ANR	117127	IfStatement	if ( file_ast -> child [ i ] == NULL )		117079	0					
ANR	117128	Condition	file_ast -> child [ i ] == NULL	4271:13:123278:123303	117079	0	True				
ANR	117129	EqualityExpression	file_ast -> child [ i ] == NULL		117079	0		==			
ANR	117130	ArrayIndexing	file_ast -> child [ i ]		117079	0					
ANR	117131	PtrMemberAccess	file_ast -> child		117079	0					
ANR	117132	Identifier	file_ast		117079	0					
ANR	117133	Identifier	child		117079	1					
ANR	117134	Identifier	i		117079	1					
ANR	117135	Identifier	NULL		117079	1					
ANR	117136	CompoundStatement		9:41:279:279	117079	1					
ANR	117137	ReturnStatement	return FAILURE ;	4273:3:123372:123386	117079	0	True				
ANR	117138	Identifier	FAILURE		117079	0					
ANR	117139	ElseStatement	else		117079	0					
ANR	117140	IfStatement	if ( file_ast -> child [ i ] -> kind != ZEND_AST_DECLARE )		117079	0					
ANR	117141	Condition	file_ast -> child [ i ] -> kind != ZEND_AST_DECLARE	4274:13:123401:123444	117079	0	True				
ANR	117142	EqualityExpression	file_ast -> child [ i ] -> kind != ZEND_AST_DECLARE		117079	0		!=			
ANR	117143	PtrMemberAccess	file_ast -> child [ i ] -> kind		117079	0					
ANR	117144	ArrayIndexing	file_ast -> child [ i ]		117079	0					
ANR	117145	PtrMemberAccess	file_ast -> child		117079	0					
ANR	117146	Identifier	file_ast		117079	0					
ANR	117147	Identifier	child		117079	1					
ANR	117148	Identifier	i		117079	1					
ANR	117149	Identifier	kind		117079	1					
ANR	117150	Identifier	ZEND_AST_DECLARE		117079	1					
ANR	117151	CompoundStatement		12:59:420:420	117079	1					
ANR	117152	ReturnStatement	return FAILURE ;	4276:3:123510:123524	117079	0	True				
ANR	117153	Identifier	FAILURE		117079	0					
ANR	117154	ExpressionStatement	i ++	4278:2:123532:123535	117079	1	True				
ANR	117155	PostIncDecOperationExpression	i ++		117079	0					
ANR	117156	Identifier	i		117079	0					
ANR	117157	IncDec	++		117079	1					
ANR	117158	ReturnStatement	return FAILURE ;	4280:1:123541:123555	117079	3	True				
ANR	117159	Identifier	FAILURE		117079	0					
ANR	117160	ReturnType	static int		117079	1					
ANR	117161	Identifier	zend_declare_is_first_statement		117079	2					
ANR	117162	ParameterList	zend_ast * ast		117079	3					
ANR	117163	Parameter	zend_ast * ast	4262:43:123001:123013	117079	0	True				
ANR	117164	ParameterType	zend_ast *		117079	0					
ANR	117165	Identifier	ast		117079	1					
ANR	117166	CFGEntryNode	ENTRY		117079		True				
ANR	117167	CFGExitNode	EXIT		117079		True				
ANR	117168	Symbol	* file_ast -> child		117079						
ANR	117169	Symbol	* * i		117079						
ANR	117170	Symbol	ast		117079						
ANR	117171	Symbol	SUCCESS		117079						
ANR	117172	Symbol	NULL		117079						
ANR	117173	Symbol	CG		117079						
ANR	117174	Symbol	file_ast -> child		117079						
ANR	117175	Symbol	* * * file_ast		117079						
ANR	117176	Symbol	* * file_ast		117079						
ANR	117177	Symbol	file_ast -> child [ i ] -> kind		117079						
ANR	117178	Symbol	i		117079						
ANR	117179	Symbol	FAILURE		117079						
ANR	117180	Symbol	* * file_ast -> child		117079						
ANR	117181	Symbol	file_ast -> children		117079						
ANR	117182	Symbol	zend_ast_get_list		117079						
ANR	117183	Symbol	file_ast		117079						
ANR	117184	Symbol	* file_ast		117079						
ANR	117185	Symbol	* i		117079						
ANR	117186	Symbol	ZEND_AST_DECLARE		117079						
ANR	117187	Function	zend_compile_declare	4284:0:123570:125427							
ANR	117188	FunctionDef	zend_compile_declare (zend_ast * ast)		117187	0					
ANR	117189	CompoundStatement		4285:0:123621:125427	117187	0					
ANR	117190	IdentifierDeclStatement	zend_ast_list * declares = zend_ast_get_list ( ast -> child [ 0 ] ) ;	4286:1:123624:123682	117187	0	True				
ANR	117191	IdentifierDecl	* declares = zend_ast_get_list ( ast -> child [ 0 ] )		117187	0					
ANR	117192	IdentifierDeclType	zend_ast_list *		117187	0					
ANR	117193	Identifier	declares		117187	1					
ANR	117194	AssignmentExpression	* declares = zend_ast_get_list ( ast -> child [ 0 ] )		117187	2		=			
ANR	117195	Identifier	declares		117187	0					
ANR	117196	CallExpression	zend_ast_get_list ( ast -> child [ 0 ] )		117187	1					
ANR	117197	Callee	zend_ast_get_list		117187	0					
ANR	117198	Identifier	zend_ast_get_list		117187	0					
ANR	117199	ArgumentList	ast -> child [ 0 ]		117187	1					
ANR	117200	Argument	ast -> child [ 0 ]		117187	0					
ANR	117201	ArrayIndexing	ast -> child [ 0 ]		117187	0					
ANR	117202	PtrMemberAccess	ast -> child		117187	0					
ANR	117203	Identifier	ast		117187	0					
ANR	117204	Identifier	child		117187	1					
ANR	117205	PrimaryExpression	0		117187	1					
ANR	117206	IdentifierDeclStatement	zend_ast * stmt_ast = ast -> child [ 1 ] ;	4287:1:123685:123719	117187	1	True				
ANR	117207	IdentifierDecl	* stmt_ast = ast -> child [ 1 ]		117187	0					
ANR	117208	IdentifierDeclType	zend_ast *		117187	0					
ANR	117209	Identifier	stmt_ast		117187	1					
ANR	117210	AssignmentExpression	* stmt_ast = ast -> child [ 1 ]		117187	2		=			
ANR	117211	Identifier	stmt_ast		117187	0					
ANR	117212	ArrayIndexing	ast -> child [ 1 ]		117187	1					
ANR	117213	PtrMemberAccess	ast -> child		117187	0					
ANR	117214	Identifier	ast		117187	0					
ANR	117215	Identifier	child		117187	1					
ANR	117216	PrimaryExpression	1		117187	1					
ANR	117217	IdentifierDeclStatement	zend_declarables orig_declarables = FC ( declarables ) ;	4288:1:123722:123773	117187	2	True				
ANR	117218	IdentifierDecl	orig_declarables = FC ( declarables )		117187	0					
ANR	117219	IdentifierDeclType	zend_declarables		117187	0					
ANR	117220	Identifier	orig_declarables		117187	1					
ANR	117221	AssignmentExpression	orig_declarables = FC ( declarables )		117187	2		=			
ANR	117222	Identifier	orig_declarables		117187	0					
ANR	117223	CallExpression	FC ( declarables )		117187	1					
ANR	117224	Callee	FC		117187	0					
ANR	117225	Identifier	FC		117187	0					
ANR	117226	ArgumentList	declarables		117187	1					
ANR	117227	Argument	declarables		117187	0					
ANR	117228	Identifier	declarables		117187	0					
ANR	117229	IdentifierDeclStatement	uint32_t i ;	4289:1:123776:123786	117187	3	True				
ANR	117230	IdentifierDecl	i		117187	0					
ANR	117231	IdentifierDeclType	uint32_t		117187	0					
ANR	117232	Identifier	i		117187	1					
ANR	117233	ForStatement	for ( i = 0 ; i < declares -> children ; ++ i )		117187	4					
ANR	117234	ForInit	i = 0 ;	4291:6:123795:123800	117187	0	True				
ANR	117235	AssignmentExpression	i = 0		117187	0		=			
ANR	117236	Identifier	i		117187	0					
ANR	117237	PrimaryExpression	0		117187	1					
ANR	117238	Condition	i < declares -> children	4291:13:123802:123823	117187	1	True				
ANR	117239	RelationalExpression	i < declares -> children		117187	0		<			
ANR	117240	Identifier	i		117187	0					
ANR	117241	PtrMemberAccess	declares -> children		117187	1					
ANR	117242	Identifier	declares		117187	0					
ANR	117243	Identifier	children		117187	1					
ANR	117244	UnaryExpression	++ i	4291:37:123826:123828	117187	2	True				
ANR	117245	IncDec	++		117187	0					
ANR	117246	Identifier	i		117187	1					
ANR	117247	CompoundStatement		12:2:353:399	117187	3					
ANR	117248	IdentifierDeclStatement	zend_ast * declare_ast = declares -> child [ i ] ;	4292:2:123835:123877	117187	0	True				
ANR	117249	IdentifierDecl	* declare_ast = declares -> child [ i ]		117187	0					
ANR	117250	IdentifierDeclType	zend_ast *		117187	0					
ANR	117251	Identifier	declare_ast		117187	1					
ANR	117252	AssignmentExpression	* declare_ast = declares -> child [ i ]		117187	2		=			
ANR	117253	Identifier	declare_ast		117187	0					
ANR	117254	ArrayIndexing	declares -> child [ i ]		117187	1					
ANR	117255	PtrMemberAccess	declares -> child		117187	0					
ANR	117256	Identifier	declares		117187	0					
ANR	117257	Identifier	child		117187	1					
ANR	117258	Identifier	i		117187	1					
ANR	117259	IdentifierDeclStatement	zend_ast * name_ast = declare_ast -> child [ 0 ] ;	4293:2:123881:123923	117187	1	True				
ANR	117260	IdentifierDecl	* name_ast = declare_ast -> child [ 0 ]		117187	0					
ANR	117261	IdentifierDeclType	zend_ast *		117187	0					
ANR	117262	Identifier	name_ast		117187	1					
ANR	117263	AssignmentExpression	* name_ast = declare_ast -> child [ 0 ]		117187	2		=			
ANR	117264	Identifier	name_ast		117187	0					
ANR	117265	ArrayIndexing	declare_ast -> child [ 0 ]		117187	1					
ANR	117266	PtrMemberAccess	declare_ast -> child		117187	0					
ANR	117267	Identifier	declare_ast		117187	0					
ANR	117268	Identifier	child		117187	1					
ANR	117269	PrimaryExpression	0		117187	1					
ANR	117270	IdentifierDeclStatement	zend_ast * value_ast = declare_ast -> child [ 1 ] ;	4294:2:123927:123970	117187	2	True				
ANR	117271	IdentifierDecl	* value_ast = declare_ast -> child [ 1 ]		117187	0					
ANR	117272	IdentifierDeclType	zend_ast *		117187	0					
ANR	117273	Identifier	value_ast		117187	1					
ANR	117274	AssignmentExpression	* value_ast = declare_ast -> child [ 1 ]		117187	2		=			
ANR	117275	Identifier	value_ast		117187	0					
ANR	117276	ArrayIndexing	declare_ast -> child [ 1 ]		117187	1					
ANR	117277	PtrMemberAccess	declare_ast -> child		117187	0					
ANR	117278	Identifier	declare_ast		117187	0					
ANR	117279	Identifier	child		117187	1					
ANR	117280	PrimaryExpression	1		117187	1					
ANR	117281	IdentifierDeclStatement	zend_string * name = zend_ast_get_str ( name_ast ) ;	4296:2:123975:124021	117187	3	True				
ANR	117282	IdentifierDecl	* name = zend_ast_get_str ( name_ast )		117187	0					
ANR	117283	IdentifierDeclType	zend_string *		117187	0					
ANR	117284	Identifier	name		117187	1					
ANR	117285	AssignmentExpression	* name = zend_ast_get_str ( name_ast )		117187	2		=			
ANR	117286	Identifier	name		117187	0					
ANR	117287	CallExpression	zend_ast_get_str ( name_ast )		117187	1					
ANR	117288	Callee	zend_ast_get_str		117187	0					
ANR	117289	Identifier	zend_ast_get_str		117187	0					
ANR	117290	ArgumentList	name_ast		117187	1					
ANR	117291	Argument	name_ast		117187	0					
ANR	117292	Identifier	name_ast		117187	0					
ANR	117293	IfStatement	"if ( zend_string_equals_literal_ci ( name , ""ticks"" ) )"		117187	4					
ANR	117294	Condition	"zend_string_equals_literal_ci ( name , ""ticks"" )"	4297:6:124029:124072	117187	0	True				
ANR	117295	CallExpression	"zend_string_equals_literal_ci ( name , ""ticks"" )"		117187	0					
ANR	117296	Callee	zend_string_equals_literal_ci		117187	0					
ANR	117297	Identifier	zend_string_equals_literal_ci		117187	0					
ANR	117298	ArgumentList	name		117187	1					
ANR	117299	Argument	name		117187	0					
ANR	117300	Identifier	name		117187	0					
ANR	117301	Argument	"""ticks"""		117187	1					
ANR	117302	PrimaryExpression	"""ticks"""		117187	0					
ANR	117303	CompoundStatement		14:3:458:471	117187	1					
ANR	117304	IdentifierDeclStatement	zval value_zv ;	4298:3:124080:124093	117187	0	True				
ANR	117305	IdentifierDecl	value_zv		117187	0					
ANR	117306	IdentifierDeclType	zval		117187	0					
ANR	117307	Identifier	value_zv		117187	1					
ANR	117308	ExpressionStatement	"zend_const_expr_to_zval ( & value_zv , value_ast )"	4299:3:124098:124143	117187	1	True				
ANR	117309	CallExpression	"zend_const_expr_to_zval ( & value_zv , value_ast )"		117187	0					
ANR	117310	Callee	zend_const_expr_to_zval		117187	0					
ANR	117311	Identifier	zend_const_expr_to_zval		117187	0					
ANR	117312	ArgumentList	& value_zv		117187	1					
ANR	117313	Argument	& value_zv		117187	0					
ANR	117314	UnaryOperationExpression	& value_zv		117187	0					
ANR	117315	UnaryOperator	&		117187	0					
ANR	117316	Identifier	value_zv		117187	1					
ANR	117317	Argument	value_ast		117187	1					
ANR	117318	Identifier	value_ast		117187	0					
ANR	117319	ExpressionStatement	FC ( declarables ) . ticks = zval_get_long ( & value_zv )	4300:3:124148:124196	117187	2	True				
ANR	117320	AssignmentExpression	FC ( declarables ) . ticks = zval_get_long ( & value_zv )		117187	0		=			
ANR	117321	MemberAccess	FC ( declarables ) . ticks		117187	0					
ANR	117322	CallExpression	FC ( declarables )		117187	0					
ANR	117323	Callee	FC		117187	0					
ANR	117324	Identifier	FC		117187	0					
ANR	117325	ArgumentList	declarables		117187	1					
ANR	117326	Argument	declarables		117187	0					
ANR	117327	Identifier	declarables		117187	0					
ANR	117328	Identifier	ticks		117187	1					
ANR	117329	CallExpression	zval_get_long ( & value_zv )		117187	1					
ANR	117330	Callee	zval_get_long		117187	0					
ANR	117331	Identifier	zval_get_long		117187	0					
ANR	117332	ArgumentList	& value_zv		117187	1					
ANR	117333	Argument	& value_zv		117187	0					
ANR	117334	UnaryOperationExpression	& value_zv		117187	0					
ANR	117335	UnaryOperator	&		117187	0					
ANR	117336	Identifier	value_zv		117187	1					
ANR	117337	ExpressionStatement	zval_dtor ( & value_zv )	4301:3:124201:124221	117187	3	True				
ANR	117338	CallExpression	zval_dtor ( & value_zv )		117187	0					
ANR	117339	Callee	zval_dtor		117187	0					
ANR	117340	Identifier	zval_dtor		117187	0					
ANR	117341	ArgumentList	& value_zv		117187	1					
ANR	117342	Argument	& value_zv		117187	0					
ANR	117343	UnaryOperationExpression	& value_zv		117187	0					
ANR	117344	UnaryOperator	&		117187	0					
ANR	117345	Identifier	value_zv		117187	1					
ANR	117346	ElseStatement	else		117187	0					
ANR	117347	IfStatement	"if ( zend_string_equals_literal_ci ( name , ""encoding"" ) )"		117187	0					
ANR	117348	Condition	"zend_string_equals_literal_ci ( name , ""encoding"" )"	4302:13:124236:124282	117187	0	True				
ANR	117349	CallExpression	"zend_string_equals_literal_ci ( name , ""encoding"" )"		117187	0					
ANR	117350	Callee	zend_string_equals_literal_ci		117187	0					
ANR	117351	Identifier	zend_string_equals_literal_ci		117187	0					
ANR	117352	ArgumentList	name		117187	1					
ANR	117353	Argument	name		117187	0					
ANR	117354	Identifier	name		117187	0					
ANR	117355	Argument	"""encoding"""		117187	1					
ANR	117356	PrimaryExpression	"""encoding"""		117187	0					
ANR	117357	CompoundStatement		18:62:663:663	117187	1					
ANR	117358	IfStatement	if ( FAILURE == zend_declare_is_first_statement ( ast ) )		117187	0					
ANR	117359	Condition	FAILURE == zend_declare_is_first_statement ( ast )	4304:7:124295:124341	117187	0	True				
ANR	117360	EqualityExpression	FAILURE == zend_declare_is_first_statement ( ast )		117187	0		==			
ANR	117361	Identifier	FAILURE		117187	0					
ANR	117362	CallExpression	zend_declare_is_first_statement ( ast )		117187	1					
ANR	117363	Callee	zend_declare_is_first_statement		117187	0					
ANR	117364	Identifier	zend_declare_is_first_statement		117187	0					
ANR	117365	ArgumentList	ast		117187	1					
ANR	117366	Argument	ast		117187	0					
ANR	117367	Identifier	ast		117187	0					
ANR	117368	CompoundStatement		20:56:722:722	117187	1					
ANR	117369	Statement	zend_error_noreturn	4305:4:124350:124368	117187	0	True				
ANR	117370	Statement	(	4305:23:124369:124369	117187	1	True				
ANR	117371	Statement	E_COMPILE_ERROR	4305:24:124370:124384	117187	2	True				
ANR	117372	Statement	","	4305:39:124385:124385	117187	3	True				
ANR	117373	Statement	"""Encoding declaration pragma must be """	4305:41:124387:124424	117187	4	True				
ANR	117374	Statement	"""the very first statement in the script"""	4306:5:124431:124470	117187	5	True				
ANR	117375	Statement	)	4306:45:124471:124471	117187	6	True				
ANR	117376	ExpressionStatement		4306:46:124472:124472	117187	7	True				
ANR	117377	ElseStatement	else		117187	0					
ANR	117378	IfStatement	"if ( zend_string_equals_literal_ci ( name , ""strict_types"" ) )"		117187	0					
ANR	117379	Condition	"zend_string_equals_literal_ci ( name , ""strict_types"" )"	4308:13:124492:124542	117187	0	True				
ANR	117380	CallExpression	"zend_string_equals_literal_ci ( name , ""strict_types"" )"		117187	0					
ANR	117381	Callee	zend_string_equals_literal_ci		117187	0					
ANR	117382	Identifier	zend_string_equals_literal_ci		117187	0					
ANR	117383	ArgumentList	name		117187	1					
ANR	117384	Argument	name		117187	0					
ANR	117385	Identifier	name		117187	0					
ANR	117386	Argument	"""strict_types"""		117187	1					
ANR	117387	PrimaryExpression	"""strict_types"""		117187	0					
ANR	117388	CompoundStatement		25:3:928:941	117187	1					
ANR	117389	IdentifierDeclStatement	zval value_zv ;	4309:3:124550:124563	117187	0	True				
ANR	117390	IdentifierDecl	value_zv		117187	0					
ANR	117391	IdentifierDeclType	zval		117187	0					
ANR	117392	Identifier	value_zv		117187	1					
ANR	117393	IfStatement	if ( FAILURE == zend_declare_is_first_statement ( ast ) )		117187	1					
ANR	117394	Condition	FAILURE == zend_declare_is_first_statement ( ast )	4311:7:124573:124619	117187	0	True				
ANR	117395	EqualityExpression	FAILURE == zend_declare_is_first_statement ( ast )		117187	0		==			
ANR	117396	Identifier	FAILURE		117187	0					
ANR	117397	CallExpression	zend_declare_is_first_statement ( ast )		117187	1					
ANR	117398	Callee	zend_declare_is_first_statement		117187	0					
ANR	117399	Identifier	zend_declare_is_first_statement		117187	0					
ANR	117400	ArgumentList	ast		117187	1					
ANR	117401	Argument	ast		117187	0					
ANR	117402	Identifier	ast		117187	0					
ANR	117403	CompoundStatement		27:56:1000:1000	117187	1					
ANR	117404	Statement	zend_error_noreturn	4312:4:124628:124646	117187	0	True				
ANR	117405	Statement	(	4312:23:124647:124647	117187	1	True				
ANR	117406	Statement	E_COMPILE_ERROR	4312:24:124648:124662	117187	2	True				
ANR	117407	Statement	","	4312:39:124663:124663	117187	3	True				
ANR	117408	Statement	"""strict_types declaration must be """	4312:41:124665:124699	117187	4	True				
ANR	117409	Statement	"""the very first statement in the script"""	4313:5:124706:124745	117187	5	True				
ANR	117410	Statement	)	4313:45:124746:124746	117187	6	True				
ANR	117411	ExpressionStatement		4313:46:124747:124747	117187	7	True				
ANR	117412	IfStatement	if ( ast -> child [ 1 ] != NULL )		117187	2					
ANR	117413	Condition	ast -> child [ 1 ] != NULL	4316:7:124762:124782	117187	0	True				
ANR	117414	EqualityExpression	ast -> child [ 1 ] != NULL		117187	0		!=			
ANR	117415	ArrayIndexing	ast -> child [ 1 ]		117187	0					
ANR	117416	PtrMemberAccess	ast -> child		117187	0					
ANR	117417	Identifier	ast		117187	0					
ANR	117418	Identifier	child		117187	1					
ANR	117419	PrimaryExpression	1		117187	1					
ANR	117420	Identifier	NULL		117187	1					
ANR	117421	CompoundStatement		32:30:1163:1163	117187	1					
ANR	117422	Statement	zend_error_noreturn	4317:4:124791:124809	117187	0	True				
ANR	117423	Statement	(	4317:23:124810:124810	117187	1	True				
ANR	117424	Statement	E_COMPILE_ERROR	4317:24:124811:124825	117187	2	True				
ANR	117425	Statement	","	4317:39:124826:124826	117187	3	True				
ANR	117426	Statement	"""strict_types declaration must not """	4317:41:124828:124863	117187	4	True				
ANR	117427	Statement	"""use block mode"""	4318:5:124870:124885	117187	5	True				
ANR	117428	Statement	)	4318:21:124886:124886	117187	6	True				
ANR	117429	ExpressionStatement		4318:22:124887:124887	117187	7	True				
ANR	117430	ExpressionStatement	"zend_const_expr_to_zval ( & value_zv , value_ast )"	4321:3:124898:124943	117187	3	True				
ANR	117431	CallExpression	"zend_const_expr_to_zval ( & value_zv , value_ast )"		117187	0					
ANR	117432	Callee	zend_const_expr_to_zval		117187	0					
ANR	117433	Identifier	zend_const_expr_to_zval		117187	0					
ANR	117434	ArgumentList	& value_zv		117187	1					
ANR	117435	Argument	& value_zv		117187	0					
ANR	117436	UnaryOperationExpression	& value_zv		117187	0					
ANR	117437	UnaryOperator	&		117187	0					
ANR	117438	Identifier	value_zv		117187	1					
ANR	117439	Argument	value_ast		117187	1					
ANR	117440	Identifier	value_ast		117187	0					
ANR	117441	IfStatement	if ( Z_TYPE ( value_zv ) != IS_LONG || ( Z_LVAL ( value_zv ) != 0 && Z_LVAL ( value_zv ) != 1 ) )		117187	4					
ANR	117442	Condition	Z_TYPE ( value_zv ) != IS_LONG || ( Z_LVAL ( value_zv ) != 0 && Z_LVAL ( value_zv ) != 1 )	4323:7:124953:125031	117187	0	True				
ANR	117443	OrExpression	Z_TYPE ( value_zv ) != IS_LONG || ( Z_LVAL ( value_zv ) != 0 && Z_LVAL ( value_zv ) != 1 )		117187	0		||			
ANR	117444	EqualityExpression	Z_TYPE ( value_zv ) != IS_LONG		117187	0		!=			
ANR	117445	CallExpression	Z_TYPE ( value_zv )		117187	0					
ANR	117446	Callee	Z_TYPE		117187	0					
ANR	117447	Identifier	Z_TYPE		117187	0					
ANR	117448	ArgumentList	value_zv		117187	1					
ANR	117449	Argument	value_zv		117187	0					
ANR	117450	Identifier	value_zv		117187	0					
ANR	117451	Identifier	IS_LONG		117187	1					
ANR	117452	AndExpression	Z_LVAL ( value_zv ) != 0 && Z_LVAL ( value_zv ) != 1		117187	1		&&			
ANR	117453	EqualityExpression	Z_LVAL ( value_zv ) != 0		117187	0		!=			
ANR	117454	CallExpression	Z_LVAL ( value_zv )		117187	0					
ANR	117455	Callee	Z_LVAL		117187	0					
ANR	117456	Identifier	Z_LVAL		117187	0					
ANR	117457	ArgumentList	value_zv		117187	1					
ANR	117458	Argument	value_zv		117187	0					
ANR	117459	Identifier	value_zv		117187	0					
ANR	117460	PrimaryExpression	0		117187	1					
ANR	117461	EqualityExpression	Z_LVAL ( value_zv ) != 1		117187	1		!=			
ANR	117462	CallExpression	Z_LVAL ( value_zv )		117187	0					
ANR	117463	Callee	Z_LVAL		117187	0					
ANR	117464	Identifier	Z_LVAL		117187	0					
ANR	117465	ArgumentList	value_zv		117187	1					
ANR	117466	Argument	value_zv		117187	0					
ANR	117467	Identifier	value_zv		117187	0					
ANR	117468	PrimaryExpression	1		117187	1					
ANR	117469	CompoundStatement		39:88:1412:1412	117187	1					
ANR	117470	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""strict_types declaration must have 0 or 1 as its value"" )"	4324:4:125040:125134	117187	0	True				
ANR	117471	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""strict_types declaration must have 0 or 1 as its value"" )"		117187	0					
ANR	117472	Callee	zend_error_noreturn		117187	0					
ANR	117473	Identifier	zend_error_noreturn		117187	0					
ANR	117474	ArgumentList	E_COMPILE_ERROR		117187	1					
ANR	117475	Argument	E_COMPILE_ERROR		117187	0					
ANR	117476	Identifier	E_COMPILE_ERROR		117187	0					
ANR	117477	Argument	"""strict_types declaration must have 0 or 1 as its value"""		117187	1					
ANR	117478	PrimaryExpression	"""strict_types declaration must have 0 or 1 as its value"""		117187	0					
ANR	117479	IfStatement	if ( Z_LVAL ( value_zv ) == 1 )		117187	5					
ANR	117480	Condition	Z_LVAL ( value_zv ) == 1	4327:7:125149:125169	117187	0	True				
ANR	117481	EqualityExpression	Z_LVAL ( value_zv ) == 1		117187	0		==			
ANR	117482	CallExpression	Z_LVAL ( value_zv )		117187	0					
ANR	117483	Callee	Z_LVAL		117187	0					
ANR	117484	Identifier	Z_LVAL		117187	0					
ANR	117485	ArgumentList	value_zv		117187	1					
ANR	117486	Argument	value_zv		117187	0					
ANR	117487	Identifier	value_zv		117187	0					
ANR	117488	PrimaryExpression	1		117187	1					
ANR	117489	CompoundStatement		43:30:1550:1550	117187	1					
ANR	117490	ExpressionStatement	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_STRICT_TYPES	4328:4:125178:125232	117187	0	True				
ANR	117491	AssignmentExpression	CG ( active_op_array ) -> fn_flags |= ZEND_ACC_STRICT_TYPES		117187	0		|=			
ANR	117492	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		117187	0					
ANR	117493	CallExpression	CG ( active_op_array )		117187	0					
ANR	117494	Callee	CG		117187	0					
ANR	117495	Identifier	CG		117187	0					
ANR	117496	ArgumentList	active_op_array		117187	1					
ANR	117497	Argument	active_op_array		117187	0					
ANR	117498	Identifier	active_op_array		117187	0					
ANR	117499	Identifier	fn_flags		117187	1					
ANR	117500	Identifier	ZEND_ACC_STRICT_TYPES		117187	1					
ANR	117501	ElseStatement	else		117187	0					
ANR	117502	CompoundStatement		47:9:1627:1627	117187	0					
ANR	117503	ExpressionStatement	"zend_error ( E_COMPILE_WARNING , ""Unsupported declare '%s'"" , ZSTR_VAL ( name ) )"	4332:3:125254:125327	117187	0	True				
ANR	117504	CallExpression	"zend_error ( E_COMPILE_WARNING , ""Unsupported declare '%s'"" , ZSTR_VAL ( name ) )"		117187	0					
ANR	117505	Callee	zend_error		117187	0					
ANR	117506	Identifier	zend_error		117187	0					
ANR	117507	ArgumentList	E_COMPILE_WARNING		117187	1					
ANR	117508	Argument	E_COMPILE_WARNING		117187	0					
ANR	117509	Identifier	E_COMPILE_WARNING		117187	0					
ANR	117510	Argument	"""Unsupported declare '%s'"""		117187	1					
ANR	117511	PrimaryExpression	"""Unsupported declare '%s'"""		117187	0					
ANR	117512	Argument	ZSTR_VAL ( name )		117187	2					
ANR	117513	CallExpression	ZSTR_VAL ( name )		117187	0					
ANR	117514	Callee	ZSTR_VAL		117187	0					
ANR	117515	Identifier	ZSTR_VAL		117187	0					
ANR	117516	ArgumentList	name		117187	1					
ANR	117517	Argument	name		117187	0					
ANR	117518	Identifier	name		117187	0					
ANR	117519	IfStatement	if ( stmt_ast )		117187	5					
ANR	117520	Condition	stmt_ast	4336:5:125342:125349	117187	0	True				
ANR	117521	Identifier	stmt_ast		117187	0					
ANR	117522	CompoundStatement		52:15:1730:1730	117187	1					
ANR	117523	ExpressionStatement	zend_compile_stmt ( stmt_ast )	4337:2:125356:125383	117187	0	True				
ANR	117524	CallExpression	zend_compile_stmt ( stmt_ast )		117187	0					
ANR	117525	Callee	zend_compile_stmt		117187	0					
ANR	117526	Identifier	zend_compile_stmt		117187	0					
ANR	117527	ArgumentList	stmt_ast		117187	1					
ANR	117528	Argument	stmt_ast		117187	0					
ANR	117529	Identifier	stmt_ast		117187	0					
ANR	117530	ExpressionStatement	FC ( declarables ) = orig_declarables	4339:2:125388:125422	117187	1	True				
ANR	117531	AssignmentExpression	FC ( declarables ) = orig_declarables		117187	0		=			
ANR	117532	CallExpression	FC ( declarables )		117187	0					
ANR	117533	Callee	FC		117187	0					
ANR	117534	Identifier	FC		117187	0					
ANR	117535	ArgumentList	declarables		117187	1					
ANR	117536	Argument	declarables		117187	0					
ANR	117537	Identifier	declarables		117187	0					
ANR	117538	Identifier	orig_declarables		117187	1					
ANR	117539	ReturnType	void		117187	1					
ANR	117540	Identifier	zend_compile_declare		117187	2					
ANR	117541	ParameterList	zend_ast * ast		117187	3					
ANR	117542	Parameter	zend_ast * ast	4284:26:123596:123608	117187	0	True				
ANR	117543	ParameterType	zend_ast *		117187	0					
ANR	117544	Identifier	ast		117187	1					
ANR	117545	CFGEntryNode	ENTRY		117187		True				
ANR	117546	CFGExitNode	EXIT		117187		True				
ANR	117547	Symbol	zend_declare_is_first_statement		117187						
ANR	117548	Symbol	stmt_ast		117187						
ANR	117549	Symbol	ast		117187						
ANR	117550	Symbol	* * declares		117187						
ANR	117551	Symbol	E_COMPILE_ERROR		117187						
ANR	117552	Symbol	Z_LVAL		117187						
ANR	117553	Symbol	Z_TYPE		117187						
ANR	117554	Symbol	* CG		117187						
ANR	117555	Symbol	* declares		117187						
ANR	117556	Symbol	declares -> child		117187						
ANR	117557	Symbol	* declares -> child		117187						
ANR	117558	Symbol	* declare_ast		117187						
ANR	117559	Symbol	declarables		117187						
ANR	117560	Symbol	declares		117187						
ANR	117561	Symbol	* ast		117187						
ANR	117562	Symbol	* declare_ast -> child		117187						
ANR	117563	Symbol	zend_ast_get_str		117187						
ANR	117564	Symbol	value_ast		117187						
ANR	117565	Symbol	* * ast		117187						
ANR	117566	Symbol	declare_ast -> child		117187						
ANR	117567	Symbol	IS_LONG		117187						
ANR	117568	Symbol	ZEND_ACC_STRICT_TYPES		117187						
ANR	117569	Symbol	E_COMPILE_WARNING		117187						
ANR	117570	Symbol	& value_zv		117187						
ANR	117571	Symbol	NULL		117187						
ANR	117572	Symbol	CG		117187						
ANR	117573	Symbol	active_op_array		117187						
ANR	117574	Symbol	i		117187						
ANR	117575	Symbol	declare_ast		117187						
ANR	117576	Symbol	FAILURE		117187						
ANR	117577	Symbol	CG ( active_op_array ) -> fn_flags		117187						
ANR	117578	Symbol	zend_string_equals_literal_ci		117187						
ANR	117579	Symbol	ZSTR_VAL		117187						
ANR	117580	Symbol	zend_ast_get_list		117187						
ANR	117581	Symbol	declares -> children		117187						
ANR	117582	Symbol	* i		117187						
ANR	117583	Symbol	* * declare_ast		117187						
ANR	117584	Symbol	name_ast		117187						
ANR	117585	Symbol	zval_get_long		117187						
ANR	117586	Symbol	name		117187						
ANR	117587	Symbol	value_zv		117187						
ANR	117588	Symbol	* ast -> child		117187						
ANR	117589	Symbol	ast -> child		117187						
ANR	117590	Symbol	FC		117187						
ANR	117591	Symbol	orig_declarables		117187						
ANR	117592	Symbol	FC ( declarables ) . ticks		117187						
ANR	117593	Function	zend_compile_stmt_list	4344:0:125440:125635							
ANR	117594	FunctionDef	zend_compile_stmt_list (zend_ast * ast)		117593	0					
ANR	117595	CompoundStatement		4345:0:125493:125635	117593	0					
ANR	117596	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	4346:1:125496:125540	117593	0	True				
ANR	117597	IdentifierDecl	* list = zend_ast_get_list ( ast )		117593	0					
ANR	117598	IdentifierDeclType	zend_ast_list *		117593	0					
ANR	117599	Identifier	list		117593	1					
ANR	117600	AssignmentExpression	* list = zend_ast_get_list ( ast )		117593	2		=			
ANR	117601	Identifier	list		117593	0					
ANR	117602	CallExpression	zend_ast_get_list ( ast )		117593	1					
ANR	117603	Callee	zend_ast_get_list		117593	0					
ANR	117604	Identifier	zend_ast_get_list		117593	0					
ANR	117605	ArgumentList	ast		117593	1					
ANR	117606	Argument	ast		117593	0					
ANR	117607	Identifier	ast		117593	0					
ANR	117608	IdentifierDeclStatement	uint32_t i ;	4347:1:125543:125553	117593	1	True				
ANR	117609	IdentifierDecl	i		117593	0					
ANR	117610	IdentifierDeclType	uint32_t		117593	0					
ANR	117611	Identifier	i		117593	1					
ANR	117612	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		117593	2					
ANR	117613	ForInit	i = 0 ;	4348:6:125561:125566	117593	0	True				
ANR	117614	AssignmentExpression	i = 0		117593	0		=			
ANR	117615	Identifier	i		117593	0					
ANR	117616	PrimaryExpression	0		117593	1					
ANR	117617	Condition	i < list -> children	4348:13:125568:125585	117593	1	True				
ANR	117618	RelationalExpression	i < list -> children		117593	0		<			
ANR	117619	Identifier	i		117593	0					
ANR	117620	PtrMemberAccess	list -> children		117593	1					
ANR	117621	Identifier	list		117593	0					
ANR	117622	Identifier	children		117593	1					
ANR	117623	UnaryExpression	++ i	4348:33:125588:125590	117593	2	True				
ANR	117624	IncDec	++		117593	0					
ANR	117625	Identifier	i		117593	1					
ANR	117626	CompoundStatement		4:38:99:99	117593	3					
ANR	117627	ExpressionStatement	zend_compile_stmt ( list -> child [ i ] )	4349:2:125597:125630	117593	0	True				
ANR	117628	CallExpression	zend_compile_stmt ( list -> child [ i ] )		117593	0					
ANR	117629	Callee	zend_compile_stmt		117593	0					
ANR	117630	Identifier	zend_compile_stmt		117593	0					
ANR	117631	ArgumentList	list -> child [ i ]		117593	1					
ANR	117632	Argument	list -> child [ i ]		117593	0					
ANR	117633	ArrayIndexing	list -> child [ i ]		117593	0					
ANR	117634	PtrMemberAccess	list -> child		117593	0					
ANR	117635	Identifier	list		117593	0					
ANR	117636	Identifier	child		117593	1					
ANR	117637	Identifier	i		117593	1					
ANR	117638	ReturnType	void		117593	1					
ANR	117639	Identifier	zend_compile_stmt_list		117593	2					
ANR	117640	ParameterList	zend_ast * ast		117593	3					
ANR	117641	Parameter	zend_ast * ast	4344:28:125468:125480	117593	0	True				
ANR	117642	ParameterType	zend_ast *		117593	0					
ANR	117643	Identifier	ast		117593	1					
ANR	117644	CFGEntryNode	ENTRY		117593		True				
ANR	117645	CFGExitNode	EXIT		117593		True				
ANR	117646	Symbol	zend_ast_get_list		117593						
ANR	117647	Symbol	ast		117593						
ANR	117648	Symbol	* i		117593						
ANR	117649	Symbol	* * list		117593						
ANR	117650	Symbol	list -> child		117593						
ANR	117651	Symbol	* list		117593						
ANR	117652	Symbol	i		117593						
ANR	117653	Symbol	* list -> child		117593						
ANR	117654	Symbol	list		117593						
ANR	117655	Symbol	list -> children		117593						
ANR	117656	Function	zend_set_function_arg_flags	4354:0:125648:126331							
ANR	117657	FunctionDef	zend_set_function_arg_flags (zend_function * func)		117656	0					
ANR	117658	CompoundStatement		4355:0:125721:126331	117656	0					
ANR	117659	IdentifierDeclStatement	"uint32_t i , n ;"	4356:1:125724:125737	117656	0	True				
ANR	117660	IdentifierDecl	i		117656	0					
ANR	117661	IdentifierDeclType	uint32_t		117656	0					
ANR	117662	Identifier	i		117656	1					
ANR	117663	IdentifierDecl	n		117656	1					
ANR	117664	IdentifierDeclType	uint32_t		117656	0					
ANR	117665	Identifier	n		117656	1					
ANR	117666	ExpressionStatement	func -> common . arg_flags [ 0 ] = 0	4358:1:125741:125770	117656	1	True				
ANR	117667	AssignmentExpression	func -> common . arg_flags [ 0 ] = 0		117656	0		=			
ANR	117668	ArrayIndexing	func -> common . arg_flags [ 0 ]		117656	0					
ANR	117669	MemberAccess	func -> common . arg_flags		117656	0					
ANR	117670	PtrMemberAccess	func -> common		117656	0					
ANR	117671	Identifier	func		117656	0					
ANR	117672	Identifier	common		117656	1					
ANR	117673	Identifier	arg_flags		117656	1					
ANR	117674	PrimaryExpression	0		117656	1					
ANR	117675	PrimaryExpression	0		117656	1					
ANR	117676	ExpressionStatement	func -> common . arg_flags [ 1 ] = 0	4359:1:125773:125802	117656	2	True				
ANR	117677	AssignmentExpression	func -> common . arg_flags [ 1 ] = 0		117656	0		=			
ANR	117678	ArrayIndexing	func -> common . arg_flags [ 1 ]		117656	0					
ANR	117679	MemberAccess	func -> common . arg_flags		117656	0					
ANR	117680	PtrMemberAccess	func -> common		117656	0					
ANR	117681	Identifier	func		117656	0					
ANR	117682	Identifier	common		117656	1					
ANR	117683	Identifier	arg_flags		117656	1					
ANR	117684	PrimaryExpression	1		117656	1					
ANR	117685	PrimaryExpression	0		117656	1					
ANR	117686	ExpressionStatement	func -> common . arg_flags [ 2 ] = 0	4360:1:125805:125834	117656	3	True				
ANR	117687	AssignmentExpression	func -> common . arg_flags [ 2 ] = 0		117656	0		=			
ANR	117688	ArrayIndexing	func -> common . arg_flags [ 2 ]		117656	0					
ANR	117689	MemberAccess	func -> common . arg_flags		117656	0					
ANR	117690	PtrMemberAccess	func -> common		117656	0					
ANR	117691	Identifier	func		117656	0					
ANR	117692	Identifier	common		117656	1					
ANR	117693	Identifier	arg_flags		117656	1					
ANR	117694	PrimaryExpression	2		117656	1					
ANR	117695	PrimaryExpression	0		117656	1					
ANR	117696	IfStatement	if ( func -> common . arg_info )		117656	4					
ANR	117697	Condition	func -> common . arg_info	4361:5:125841:125861	117656	0	True				
ANR	117698	MemberAccess	func -> common . arg_info		117656	0					
ANR	117699	PtrMemberAccess	func -> common		117656	0					
ANR	117700	Identifier	func		117656	0					
ANR	117701	Identifier	common		117656	1					
ANR	117702	Identifier	arg_info		117656	1					
ANR	117703	CompoundStatement		7:28:142:142	117656	1					
ANR	117704	ExpressionStatement	"n = MIN ( func -> common . num_args , MAX_ARG_FLAG_NUM )"	4362:2:125868:125916	117656	0	True				
ANR	117705	AssignmentExpression	"n = MIN ( func -> common . num_args , MAX_ARG_FLAG_NUM )"		117656	0		=			
ANR	117706	Identifier	n		117656	0					
ANR	117707	CallExpression	"MIN ( func -> common . num_args , MAX_ARG_FLAG_NUM )"		117656	1					
ANR	117708	Callee	MIN		117656	0					
ANR	117709	Identifier	MIN		117656	0					
ANR	117710	ArgumentList	func -> common . num_args		117656	1					
ANR	117711	Argument	func -> common . num_args		117656	0					
ANR	117712	MemberAccess	func -> common . num_args		117656	0					
ANR	117713	PtrMemberAccess	func -> common		117656	0					
ANR	117714	Identifier	func		117656	0					
ANR	117715	Identifier	common		117656	1					
ANR	117716	Identifier	num_args		117656	1					
ANR	117717	Argument	MAX_ARG_FLAG_NUM		117656	1					
ANR	117718	Identifier	MAX_ARG_FLAG_NUM		117656	0					
ANR	117719	ExpressionStatement	i = 0	4363:2:125920:125925	117656	1	True				
ANR	117720	AssignmentExpression	i = 0		117656	0		=			
ANR	117721	Identifier	i		117656	0					
ANR	117722	PrimaryExpression	0		117656	1					
ANR	117723	WhileStatement	while ( i < n )		117656	2					
ANR	117724	Condition	i < n	4364:9:125936:125940	117656	0	True				
ANR	117725	RelationalExpression	i < n		117656	0		<			
ANR	117726	Identifier	i		117656	0					
ANR	117727	Identifier	n		117656	1					
ANR	117728	CompoundStatement		10:16:221:221	117656	1					
ANR	117729	ExpressionStatement	"ZEND_SET_ARG_FLAG ( func , i + 1 , func -> common . arg_info [ i ] . pass_by_reference )"	4365:3:125948:126022	117656	0	True				
ANR	117730	CallExpression	"ZEND_SET_ARG_FLAG ( func , i + 1 , func -> common . arg_info [ i ] . pass_by_reference )"		117656	0					
ANR	117731	Callee	ZEND_SET_ARG_FLAG		117656	0					
ANR	117732	Identifier	ZEND_SET_ARG_FLAG		117656	0					
ANR	117733	ArgumentList	func		117656	1					
ANR	117734	Argument	func		117656	0					
ANR	117735	Identifier	func		117656	0					
ANR	117736	Argument	i + 1		117656	1					
ANR	117737	AdditiveExpression	i + 1		117656	0		+			
ANR	117738	Identifier	i		117656	0					
ANR	117739	PrimaryExpression	1		117656	1					
ANR	117740	Argument	func -> common . arg_info [ i ] . pass_by_reference		117656	2					
ANR	117741	MemberAccess	func -> common . arg_info [ i ] . pass_by_reference		117656	0					
ANR	117742	ArrayIndexing	func -> common . arg_info [ i ]		117656	0					
ANR	117743	MemberAccess	func -> common . arg_info		117656	0					
ANR	117744	PtrMemberAccess	func -> common		117656	0					
ANR	117745	Identifier	func		117656	0					
ANR	117746	Identifier	common		117656	1					
ANR	117747	Identifier	arg_info		117656	1					
ANR	117748	Identifier	i		117656	1					
ANR	117749	Identifier	pass_by_reference		117656	1					
ANR	117750	ExpressionStatement	i ++	4366:3:126027:126030	117656	1	True				
ANR	117751	PostIncDecOperationExpression	i ++		117656	0					
ANR	117752	Identifier	i		117656	0					
ANR	117753	IncDec	++		117656	1					
ANR	117754	IfStatement	if ( UNEXPECTED ( func -> common . fn_flags & ZEND_ACC_VARIADIC && func -> common . arg_info [ i ] . pass_by_reference ) )		117656	3					
ANR	117755	Condition	UNEXPECTED ( func -> common . fn_flags & ZEND_ACC_VARIADIC && func -> common . arg_info [ i ] . pass_by_reference )	4368:6:126042:126140	117656	0	True				
ANR	117756	CallExpression	UNEXPECTED ( func -> common . fn_flags & ZEND_ACC_VARIADIC && func -> common . arg_info [ i ] . pass_by_reference )		117656	0					
ANR	117757	Callee	UNEXPECTED		117656	0					
ANR	117758	Identifier	UNEXPECTED		117656	0					
ANR	117759	ArgumentList	func -> common . fn_flags & ZEND_ACC_VARIADIC && func -> common . arg_info [ i ] . pass_by_reference		117656	1					
ANR	117760	Argument	func -> common . fn_flags & ZEND_ACC_VARIADIC && func -> common . arg_info [ i ] . pass_by_reference		117656	0					
ANR	117761	AndExpression	func -> common . fn_flags & ZEND_ACC_VARIADIC && func -> common . arg_info [ i ] . pass_by_reference		117656	0		&&			
ANR	117762	BitAndExpression	func -> common . fn_flags & ZEND_ACC_VARIADIC		117656	0		&			
ANR	117763	MemberAccess	func -> common . fn_flags		117656	0					
ANR	117764	PtrMemberAccess	func -> common		117656	0					
ANR	117765	Identifier	func		117656	0					
ANR	117766	Identifier	common		117656	1					
ANR	117767	Identifier	fn_flags		117656	1					
ANR	117768	Identifier	ZEND_ACC_VARIADIC		117656	1					
ANR	117769	MemberAccess	func -> common . arg_info [ i ] . pass_by_reference		117656	1					
ANR	117770	ArrayIndexing	func -> common . arg_info [ i ]		117656	0					
ANR	117771	MemberAccess	func -> common . arg_info		117656	0					
ANR	117772	PtrMemberAccess	func -> common		117656	0					
ANR	117773	Identifier	func		117656	0					
ANR	117774	Identifier	common		117656	1					
ANR	117775	Identifier	arg_info		117656	1					
ANR	117776	Identifier	i		117656	1					
ANR	117777	Identifier	pass_by_reference		117656	1					
ANR	117778	CompoundStatement		15:3:426:497	117656	1					
ANR	117779	IdentifierDeclStatement	uint32_t pass_by_reference = func -> common . arg_info [ i ] . pass_by_reference ;	4369:3:126148:126219	117656	0	True				
ANR	117780	IdentifierDecl	pass_by_reference = func -> common . arg_info [ i ] . pass_by_reference		117656	0					
ANR	117781	IdentifierDeclType	uint32_t		117656	0					
ANR	117782	Identifier	pass_by_reference		117656	1					
ANR	117783	AssignmentExpression	pass_by_reference = func -> common . arg_info [ i ] . pass_by_reference		117656	2		=			
ANR	117784	Identifier	pass_by_reference		117656	0					
ANR	117785	MemberAccess	func -> common . arg_info [ i ] . pass_by_reference		117656	1					
ANR	117786	ArrayIndexing	func -> common . arg_info [ i ]		117656	0					
ANR	117787	MemberAccess	func -> common . arg_info		117656	0					
ANR	117788	PtrMemberAccess	func -> common		117656	0					
ANR	117789	Identifier	func		117656	0					
ANR	117790	Identifier	common		117656	1					
ANR	117791	Identifier	arg_info		117656	1					
ANR	117792	Identifier	i		117656	1					
ANR	117793	Identifier	pass_by_reference		117656	1					
ANR	117794	WhileStatement	while ( i < MAX_ARG_FLAG_NUM )		117656	1					
ANR	117795	Condition	i < MAX_ARG_FLAG_NUM	4370:10:126231:126250	117656	0	True				
ANR	117796	RelationalExpression	i < MAX_ARG_FLAG_NUM		117656	0		<			
ANR	117797	Identifier	i		117656	0					
ANR	117798	Identifier	MAX_ARG_FLAG_NUM		117656	1					
ANR	117799	CompoundStatement		16:32:531:531	117656	1					
ANR	117800	ExpressionStatement	"ZEND_SET_ARG_FLAG ( func , i + 1 , pass_by_reference )"	4371:4:126259:126308	117656	0	True				
ANR	117801	CallExpression	"ZEND_SET_ARG_FLAG ( func , i + 1 , pass_by_reference )"		117656	0					
ANR	117802	Callee	ZEND_SET_ARG_FLAG		117656	0					
ANR	117803	Identifier	ZEND_SET_ARG_FLAG		117656	0					
ANR	117804	ArgumentList	func		117656	1					
ANR	117805	Argument	func		117656	0					
ANR	117806	Identifier	func		117656	0					
ANR	117807	Argument	i + 1		117656	1					
ANR	117808	AdditiveExpression	i + 1		117656	0		+			
ANR	117809	Identifier	i		117656	0					
ANR	117810	PrimaryExpression	1		117656	1					
ANR	117811	Argument	pass_by_reference		117656	2					
ANR	117812	Identifier	pass_by_reference		117656	0					
ANR	117813	ExpressionStatement	i ++	4372:4:126314:126317	117656	1	True				
ANR	117814	PostIncDecOperationExpression	i ++		117656	0					
ANR	117815	Identifier	i		117656	0					
ANR	117816	IncDec	++		117656	1					
ANR	117817	ReturnType	ZEND_API void		117656	1					
ANR	117818	Identifier	zend_set_function_arg_flags		117656	2					
ANR	117819	ParameterList	zend_function * func		117656	3					
ANR	117820	Parameter	zend_function * func	4354:42:125690:125708	117656	0	True				
ANR	117821	ParameterType	zend_function *		117656	0					
ANR	117822	Identifier	func		117656	1					
ANR	117823	CFGEntryNode	ENTRY		117656		True				
ANR	117824	CFGExitNode	EXIT		117656		True				
ANR	117825	Symbol	func -> common . arg_flags		117656						
ANR	117826	Symbol	func -> common . arg_info [ i ] . pass_by_reference		117656						
ANR	117827	Symbol	func -> common . fn_flags		117656						
ANR	117828	Symbol	* func		117656						
ANR	117829	Symbol	* * func		117656						
ANR	117830	Symbol	* func -> common . arg_info		117656						
ANR	117831	Symbol	i		117656						
ANR	117832	Symbol	MAX_ARG_FLAG_NUM		117656						
ANR	117833	Symbol	pass_by_reference		117656						
ANR	117834	Symbol	n		117656						
ANR	117835	Symbol	func -> common . arg_info		117656						
ANR	117836	Symbol	UNEXPECTED		117656						
ANR	117837	Symbol	ZEND_ACC_VARIADIC		117656						
ANR	117838	Symbol	* func -> common		117656						
ANR	117839	Symbol	MIN		117656						
ANR	117840	Symbol	* i		117656						
ANR	117841	Symbol	func		117656						
ANR	117842	Symbol	func -> common		117656						
ANR	117843	Symbol	* func -> common . arg_flags		117656						
ANR	117844	Symbol	func -> common . num_args		117656						
ANR	117845	Function	zend_compile_typename	4379:0:126344:127275							
ANR	117846	FunctionDef	"zend_compile_typename (zend_ast * ast , zend_arg_info * arg_info)"		117845	0					
ANR	117847	CompoundStatement		4380:0:126428:127275	117845	0					
ANR	117848	IfStatement	if ( ast -> kind == ZEND_AST_TYPE )		117845	0					
ANR	117849	Condition	ast -> kind == ZEND_AST_TYPE	4381:5:126435:126460	117845	0	True				
ANR	117850	EqualityExpression	ast -> kind == ZEND_AST_TYPE		117845	0		==			
ANR	117851	PtrMemberAccess	ast -> kind		117845	0					
ANR	117852	Identifier	ast		117845	0					
ANR	117853	Identifier	kind		117845	1					
ANR	117854	Identifier	ZEND_AST_TYPE		117845	1					
ANR	117855	CompoundStatement		2:33:34:34	117845	1					
ANR	117856	ExpressionStatement	arg_info -> type_hint = ast -> attr	4382:2:126467:126498	117845	0	True				
ANR	117857	AssignmentExpression	arg_info -> type_hint = ast -> attr		117845	0		=			
ANR	117858	PtrMemberAccess	arg_info -> type_hint		117845	0					
ANR	117859	Identifier	arg_info		117845	0					
ANR	117860	Identifier	type_hint		117845	1					
ANR	117861	PtrMemberAccess	ast -> attr		117845	1					
ANR	117862	Identifier	ast		117845	0					
ANR	117863	Identifier	attr		117845	1					
ANR	117864	ElseStatement	else		117845	0					
ANR	117865	CompoundStatement		6:2:134:196	117845	0					
ANR	117866	IdentifierDeclStatement	zend_string * class_name = zend_ast_get_str ( ast ) ;	4384:2:126512:126559	117845	0	True				
ANR	117867	IdentifierDecl	* class_name = zend_ast_get_str ( ast )		117845	0					
ANR	117868	IdentifierDeclType	zend_string *		117845	0					
ANR	117869	Identifier	class_name		117845	1					
ANR	117870	AssignmentExpression	* class_name = zend_ast_get_str ( ast )		117845	2		=			
ANR	117871	Identifier	class_name		117845	0					
ANR	117872	CallExpression	zend_ast_get_str ( ast )		117845	1					
ANR	117873	Callee	zend_ast_get_str		117845	0					
ANR	117874	Identifier	zend_ast_get_str		117845	0					
ANR	117875	ArgumentList	ast		117845	1					
ANR	117876	Argument	ast		117845	0					
ANR	117877	Identifier	ast		117845	0					
ANR	117878	IdentifierDeclStatement	zend_uchar type = zend_lookup_builtin_type_by_name ( class_name ) ;	4385:2:126563:126625	117845	1	True				
ANR	117879	IdentifierDecl	type = zend_lookup_builtin_type_by_name ( class_name )		117845	0					
ANR	117880	IdentifierDeclType	zend_uchar		117845	0					
ANR	117881	Identifier	type		117845	1					
ANR	117882	AssignmentExpression	type = zend_lookup_builtin_type_by_name ( class_name )		117845	2		=			
ANR	117883	Identifier	type		117845	0					
ANR	117884	CallExpression	zend_lookup_builtin_type_by_name ( class_name )		117845	1					
ANR	117885	Callee	zend_lookup_builtin_type_by_name		117845	0					
ANR	117886	Identifier	zend_lookup_builtin_type_by_name		117845	0					
ANR	117887	ArgumentList	class_name		117845	1					
ANR	117888	Argument	class_name		117845	0					
ANR	117889	Identifier	class_name		117845	0					
ANR	117890	IfStatement	if ( type != 0 )		117845	2					
ANR	117891	Condition	type != 0	4387:6:126634:126642	117845	0	True				
ANR	117892	EqualityExpression	type != 0		117845	0		!=			
ANR	117893	Identifier	type		117845	0					
ANR	117894	PrimaryExpression	0		117845	1					
ANR	117895	CompoundStatement		8:17:216:216	117845	1					
ANR	117896	IfStatement	if ( ast -> attr != ZEND_NAME_NOT_FQ )		117845	0					
ANR	117897	Condition	ast -> attr != ZEND_NAME_NOT_FQ	4388:7:126654:126682	117845	0	True				
ANR	117898	EqualityExpression	ast -> attr != ZEND_NAME_NOT_FQ		117845	0		!=			
ANR	117899	PtrMemberAccess	ast -> attr		117845	0					
ANR	117900	Identifier	ast		117845	0					
ANR	117901	Identifier	attr		117845	1					
ANR	117902	Identifier	ZEND_NAME_NOT_FQ		117845	1					
ANR	117903	CompoundStatement		9:38:256:256	117845	1					
ANR	117904	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Scalar type declaration '%s' must be unqualified"" , ZSTR_VAL ( zend_string_tolower ( class_name ) ) )"	4389:4:126691:126832	117845	0	True				
ANR	117905	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Scalar type declaration '%s' must be unqualified"" , ZSTR_VAL ( zend_string_tolower ( class_name ) ) )"		117845	0					
ANR	117906	Callee	zend_error_noreturn		117845	0					
ANR	117907	Identifier	zend_error_noreturn		117845	0					
ANR	117908	ArgumentList	E_COMPILE_ERROR		117845	1					
ANR	117909	Argument	E_COMPILE_ERROR		117845	0					
ANR	117910	Identifier	E_COMPILE_ERROR		117845	0					
ANR	117911	Argument	"""Scalar type declaration '%s' must be unqualified"""		117845	1					
ANR	117912	PrimaryExpression	"""Scalar type declaration '%s' must be unqualified"""		117845	0					
ANR	117913	Argument	ZSTR_VAL ( zend_string_tolower ( class_name ) )		117845	2					
ANR	117914	CallExpression	ZSTR_VAL ( zend_string_tolower ( class_name ) )		117845	0					
ANR	117915	Callee	ZSTR_VAL		117845	0					
ANR	117916	Identifier	ZSTR_VAL		117845	0					
ANR	117917	ArgumentList	zend_string_tolower ( class_name )		117845	1					
ANR	117918	Argument	zend_string_tolower ( class_name )		117845	0					
ANR	117919	CallExpression	zend_string_tolower ( class_name )		117845	0					
ANR	117920	Callee	zend_string_tolower		117845	0					
ANR	117921	Identifier	zend_string_tolower		117845	0					
ANR	117922	ArgumentList	class_name		117845	1					
ANR	117923	Argument	class_name		117845	0					
ANR	117924	Identifier	class_name		117845	0					
ANR	117925	ExpressionStatement	arg_info -> type_hint = type	4393:3:126842:126868	117845	1	True				
ANR	117926	AssignmentExpression	arg_info -> type_hint = type		117845	0		=			
ANR	117927	PtrMemberAccess	arg_info -> type_hint		117845	0					
ANR	117928	Identifier	arg_info		117845	0					
ANR	117929	Identifier	type_hint		117845	1					
ANR	117930	Identifier	type		117845	1					
ANR	117931	ElseStatement	else		117845	0					
ANR	117932	CompoundStatement		16:3:455:511	117845	0					
ANR	117933	IdentifierDeclStatement	uint32_t fetch_type = zend_get_class_fetch_type_ast ( ast ) ;	4395:3:126884:126940	117845	0	True				
ANR	117934	IdentifierDecl	fetch_type = zend_get_class_fetch_type_ast ( ast )		117845	0					
ANR	117935	IdentifierDeclType	uint32_t		117845	0					
ANR	117936	Identifier	fetch_type		117845	1					
ANR	117937	AssignmentExpression	fetch_type = zend_get_class_fetch_type_ast ( ast )		117845	2		=			
ANR	117938	Identifier	fetch_type		117845	0					
ANR	117939	CallExpression	zend_get_class_fetch_type_ast ( ast )		117845	1					
ANR	117940	Callee	zend_get_class_fetch_type_ast		117845	0					
ANR	117941	Identifier	zend_get_class_fetch_type_ast		117845	0					
ANR	117942	ArgumentList	ast		117845	1					
ANR	117943	Argument	ast		117845	0					
ANR	117944	Identifier	ast		117845	0					
ANR	117945	IfStatement	if ( fetch_type == ZEND_FETCH_CLASS_DEFAULT )		117845	1					
ANR	117946	Condition	fetch_type == ZEND_FETCH_CLASS_DEFAULT	4396:7:126949:126986	117845	0	True				
ANR	117947	EqualityExpression	fetch_type == ZEND_FETCH_CLASS_DEFAULT		117845	0		==			
ANR	117948	Identifier	fetch_type		117845	0					
ANR	117949	Identifier	ZEND_FETCH_CLASS_DEFAULT		117845	1					
ANR	117950	CompoundStatement		17:47:560:560	117845	1					
ANR	117951	ExpressionStatement	class_name = zend_resolve_class_name_ast ( ast )	4397:4:126995:127040	117845	0	True				
ANR	117952	AssignmentExpression	class_name = zend_resolve_class_name_ast ( ast )		117845	0		=			
ANR	117953	Identifier	class_name		117845	0					
ANR	117954	CallExpression	zend_resolve_class_name_ast ( ast )		117845	1					
ANR	117955	Callee	zend_resolve_class_name_ast		117845	0					
ANR	117956	Identifier	zend_resolve_class_name_ast		117845	0					
ANR	117957	ArgumentList	ast		117845	1					
ANR	117958	Argument	ast		117845	0					
ANR	117959	Identifier	ast		117845	0					
ANR	117960	ExpressionStatement	zend_assert_valid_class_name ( class_name )	4398:4:127046:127086	117845	1	True				
ANR	117961	CallExpression	zend_assert_valid_class_name ( class_name )		117845	0					
ANR	117962	Callee	zend_assert_valid_class_name		117845	0					
ANR	117963	Identifier	zend_assert_valid_class_name		117845	0					
ANR	117964	ArgumentList	class_name		117845	1					
ANR	117965	Argument	class_name		117845	0					
ANR	117966	Identifier	class_name		117845	0					
ANR	117967	ElseStatement	else		117845	0					
ANR	117968	CompoundStatement		20:10:669:669	117845	0					
ANR	117969	ExpressionStatement	zend_ensure_valid_class_fetch_type ( fetch_type )	4400:4:127104:127150	117845	0	True				
ANR	117970	CallExpression	zend_ensure_valid_class_fetch_type ( fetch_type )		117845	0					
ANR	117971	Callee	zend_ensure_valid_class_fetch_type		117845	0					
ANR	117972	Identifier	zend_ensure_valid_class_fetch_type		117845	0					
ANR	117973	ArgumentList	fetch_type		117845	1					
ANR	117974	Argument	fetch_type		117845	0					
ANR	117975	Identifier	fetch_type		117845	0					
ANR	117976	ExpressionStatement	zend_string_addref ( class_name )	4401:4:127156:127186	117845	1	True				
ANR	117977	CallExpression	zend_string_addref ( class_name )		117845	0					
ANR	117978	Callee	zend_string_addref		117845	0					
ANR	117979	Identifier	zend_string_addref		117845	0					
ANR	117980	ArgumentList	class_name		117845	1					
ANR	117981	Argument	class_name		117845	0					
ANR	117982	Identifier	class_name		117845	0					
ANR	117983	ExpressionStatement	arg_info -> type_hint = IS_OBJECT	4404:3:127197:127228	117845	2	True				
ANR	117984	AssignmentExpression	arg_info -> type_hint = IS_OBJECT		117845	0		=			
ANR	117985	PtrMemberAccess	arg_info -> type_hint		117845	0					
ANR	117986	Identifier	arg_info		117845	0					
ANR	117987	Identifier	type_hint		117845	1					
ANR	117988	Identifier	IS_OBJECT		117845	1					
ANR	117989	ExpressionStatement	arg_info -> class_name = class_name	4405:3:127233:127266	117845	3	True				
ANR	117990	AssignmentExpression	arg_info -> class_name = class_name		117845	0		=			
ANR	117991	PtrMemberAccess	arg_info -> class_name		117845	0					
ANR	117992	Identifier	arg_info		117845	0					
ANR	117993	Identifier	class_name		117845	1					
ANR	117994	Identifier	class_name		117845	1					
ANR	117995	ReturnType	static void		117845	1					
ANR	117996	Identifier	zend_compile_typename		117845	2					
ANR	117997	ParameterList	"zend_ast * ast , zend_arg_info * arg_info"		117845	3					
ANR	117998	Parameter	zend_ast * ast	4379:34:126378:126390	117845	0	True				
ANR	117999	ParameterType	zend_ast *		117845	0					
ANR	118000	Identifier	ast		117845	1					
ANR	118001	Parameter	zend_arg_info * arg_info	4379:49:126393:126415	117845	1	True				
ANR	118002	ParameterType	zend_arg_info *		117845	0					
ANR	118003	Identifier	arg_info		117845	1					
ANR	118004	CFGEntryNode	ENTRY		117845		True				
ANR	118005	CFGExitNode	EXIT		117845		True				
ANR	118006	Symbol	ZEND_FETCH_CLASS_DEFAULT		117845						
ANR	118007	Symbol	ast -> attr		117845						
ANR	118008	Symbol	ast -> kind		117845						
ANR	118009	Symbol	fetch_type		117845						
ANR	118010	Symbol	ast		117845						
ANR	118011	Symbol	arg_info -> type_hint		117845						
ANR	118012	Symbol	zend_resolve_class_name_ast		117845						
ANR	118013	Symbol	ZEND_AST_TYPE		117845						
ANR	118014	Symbol	E_COMPILE_ERROR		117845						
ANR	118015	Symbol	type		117845						
ANR	118016	Symbol	zend_string_tolower		117845						
ANR	118017	Symbol	* arg_info		117845						
ANR	118018	Symbol	ZSTR_VAL		117845						
ANR	118019	Symbol	arg_info		117845						
ANR	118020	Symbol	* ast		117845						
ANR	118021	Symbol	zend_ast_get_str		117845						
ANR	118022	Symbol	ZEND_NAME_NOT_FQ		117845						
ANR	118023	Symbol	arg_info -> class_name		117845						
ANR	118024	Symbol	zend_lookup_builtin_type_by_name		117845						
ANR	118025	Symbol	IS_OBJECT		117845						
ANR	118026	Symbol	class_name		117845						
ANR	118027	Symbol	zend_get_class_fetch_type_ast		117845						
ANR	118028	Function	zend_compile_params	4411:0:127288:133654							
ANR	118029	FunctionDef	"zend_compile_params (zend_ast * ast , zend_ast * return_type_ast)"		118028	0					
ANR	118030	CompoundStatement		4412:0:127365:133654	118028	0					
ANR	118031	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	4413:1:127368:127412	118028	0	True				
ANR	118032	IdentifierDecl	* list = zend_ast_get_list ( ast )		118028	0					
ANR	118033	IdentifierDeclType	zend_ast_list *		118028	0					
ANR	118034	Identifier	list		118028	1					
ANR	118035	AssignmentExpression	* list = zend_ast_get_list ( ast )		118028	2		=			
ANR	118036	Identifier	list		118028	0					
ANR	118037	CallExpression	zend_ast_get_list ( ast )		118028	1					
ANR	118038	Callee	zend_ast_get_list		118028	0					
ANR	118039	Identifier	zend_ast_get_list		118028	0					
ANR	118040	ArgumentList	ast		118028	1					
ANR	118041	Argument	ast		118028	0					
ANR	118042	Identifier	ast		118028	0					
ANR	118043	IdentifierDeclStatement	uint32_t i ;	4414:1:127415:127425	118028	1	True				
ANR	118044	IdentifierDecl	i		118028	0					
ANR	118045	IdentifierDeclType	uint32_t		118028	0					
ANR	118046	Identifier	i		118028	1					
ANR	118047	IdentifierDeclStatement	zend_op_array * op_array = CG ( active_op_array ) ;	4415:1:127428:127473	118028	2	True				
ANR	118048	IdentifierDecl	* op_array = CG ( active_op_array )		118028	0					
ANR	118049	IdentifierDeclType	zend_op_array *		118028	0					
ANR	118050	Identifier	op_array		118028	1					
ANR	118051	AssignmentExpression	* op_array = CG ( active_op_array )		118028	2		=			
ANR	118052	Identifier	op_array		118028	0					
ANR	118053	CallExpression	CG ( active_op_array )		118028	1					
ANR	118054	Callee	CG		118028	0					
ANR	118055	Identifier	CG		118028	0					
ANR	118056	ArgumentList	active_op_array		118028	1					
ANR	118057	Argument	active_op_array		118028	0					
ANR	118058	Identifier	active_op_array		118028	0					
ANR	118059	IdentifierDeclStatement	zend_arg_info * arg_infos ;	4416:1:127476:127500	118028	3	True				
ANR	118060	IdentifierDecl	* arg_infos		118028	0					
ANR	118061	IdentifierDeclType	zend_arg_info *		118028	0					
ANR	118062	Identifier	arg_infos		118028	1					
ANR	118063	IfStatement	if ( return_type_ast )		118028	4					
ANR	118064	Condition	return_type_ast	4418:5:127509:127523	118028	0	True				
ANR	118065	Identifier	return_type_ast		118028	0					
ANR	118066	CompoundStatement		7:22:160:160	118028	1					
ANR	118067	ExpressionStatement	"arg_infos = safe_emalloc ( sizeof ( zend_arg_info ) , list -> children + 1 , 0 )"	4420:2:127589:127659	118028	0	True				
ANR	118068	AssignmentExpression	"arg_infos = safe_emalloc ( sizeof ( zend_arg_info ) , list -> children + 1 , 0 )"		118028	0		=			
ANR	118069	Identifier	arg_infos		118028	0					
ANR	118070	CallExpression	"safe_emalloc ( sizeof ( zend_arg_info ) , list -> children + 1 , 0 )"		118028	1					
ANR	118071	Callee	safe_emalloc		118028	0					
ANR	118072	Identifier	safe_emalloc		118028	0					
ANR	118073	ArgumentList	sizeof ( zend_arg_info )		118028	1					
ANR	118074	Argument	sizeof ( zend_arg_info )		118028	0					
ANR	118075	SizeofExpression	sizeof ( zend_arg_info )		118028	0					
ANR	118076	Sizeof	sizeof		118028	0					
ANR	118077	SizeofOperand	zend_arg_info		118028	1					
ANR	118078	Argument	list -> children + 1		118028	1					
ANR	118079	AdditiveExpression	list -> children + 1		118028	0		+			
ANR	118080	PtrMemberAccess	list -> children		118028	0					
ANR	118081	Identifier	list		118028	0					
ANR	118082	Identifier	children		118028	1					
ANR	118083	PrimaryExpression	1		118028	1					
ANR	118084	Argument	0		118028	2					
ANR	118085	PrimaryExpression	0		118028	0					
ANR	118086	ExpressionStatement	arg_infos -> name = NULL	4421:2:127663:127685	118028	1	True				
ANR	118087	AssignmentExpression	arg_infos -> name = NULL		118028	0		=			
ANR	118088	PtrMemberAccess	arg_infos -> name		118028	0					
ANR	118089	Identifier	arg_infos		118028	0					
ANR	118090	Identifier	name		118028	1					
ANR	118091	Identifier	NULL		118028	1					
ANR	118092	ExpressionStatement	arg_infos -> pass_by_reference = ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0	4422:2:127689:127773	118028	2	True				
ANR	118093	AssignmentExpression	arg_infos -> pass_by_reference = ( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		118028	0		=			
ANR	118094	PtrMemberAccess	arg_infos -> pass_by_reference		118028	0					
ANR	118095	Identifier	arg_infos		118028	0					
ANR	118096	Identifier	pass_by_reference		118028	1					
ANR	118097	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		118028	1		!=			
ANR	118098	BitAndExpression	op_array -> fn_flags & ZEND_ACC_RETURN_REFERENCE		118028	0		&			
ANR	118099	PtrMemberAccess	op_array -> fn_flags		118028	0					
ANR	118100	Identifier	op_array		118028	0					
ANR	118101	Identifier	fn_flags		118028	1					
ANR	118102	Identifier	ZEND_ACC_RETURN_REFERENCE		118028	1					
ANR	118103	PrimaryExpression	0		118028	1					
ANR	118104	ExpressionStatement	arg_infos -> is_variadic = 0	4423:2:127777:127803	118028	3	True				
ANR	118105	AssignmentExpression	arg_infos -> is_variadic = 0		118028	0		=			
ANR	118106	PtrMemberAccess	arg_infos -> is_variadic		118028	0					
ANR	118107	Identifier	arg_infos		118028	0					
ANR	118108	Identifier	is_variadic		118028	1					
ANR	118109	PrimaryExpression	0		118028	1					
ANR	118110	ExpressionStatement	arg_infos -> type_hint = 0	4424:2:127807:127831	118028	4	True				
ANR	118111	AssignmentExpression	arg_infos -> type_hint = 0		118028	0		=			
ANR	118112	PtrMemberAccess	arg_infos -> type_hint		118028	0					
ANR	118113	Identifier	arg_infos		118028	0					
ANR	118114	Identifier	type_hint		118028	1					
ANR	118115	PrimaryExpression	0		118028	1					
ANR	118116	ExpressionStatement	arg_infos -> allow_null = 0	4425:2:127835:127860	118028	5	True				
ANR	118117	AssignmentExpression	arg_infos -> allow_null = 0		118028	0		=			
ANR	118118	PtrMemberAccess	arg_infos -> allow_null		118028	0					
ANR	118119	Identifier	arg_infos		118028	0					
ANR	118120	Identifier	allow_null		118028	1					
ANR	118121	PrimaryExpression	0		118028	1					
ANR	118122	ExpressionStatement	arg_infos -> class_name = NULL	4426:2:127864:127892	118028	6	True				
ANR	118123	AssignmentExpression	arg_infos -> class_name = NULL		118028	0		=			
ANR	118124	PtrMemberAccess	arg_infos -> class_name		118028	0					
ANR	118125	Identifier	arg_infos		118028	0					
ANR	118126	Identifier	class_name		118028	1					
ANR	118127	Identifier	NULL		118028	1					
ANR	118128	ExpressionStatement	"zend_compile_typename ( return_type_ast , arg_infos )"	4428:2:127897:127946	118028	7	True				
ANR	118129	CallExpression	"zend_compile_typename ( return_type_ast , arg_infos )"		118028	0					
ANR	118130	Callee	zend_compile_typename		118028	0					
ANR	118131	Identifier	zend_compile_typename		118028	0					
ANR	118132	ArgumentList	return_type_ast		118028	1					
ANR	118133	Argument	return_type_ast		118028	0					
ANR	118134	Identifier	return_type_ast		118028	0					
ANR	118135	Argument	arg_infos		118028	1					
ANR	118136	Identifier	arg_infos		118028	0					
ANR	118137	ExpressionStatement	arg_infos ++	4430:2:127951:127962	118028	8	True				
ANR	118138	PostIncDecOperationExpression	arg_infos ++		118028	0					
ANR	118139	Identifier	arg_infos		118028	0					
ANR	118140	IncDec	++		118028	1					
ANR	118141	ExpressionStatement	op_array -> fn_flags |= ZEND_ACC_HAS_RETURN_TYPE	4431:2:127966:128012	118028	9	True				
ANR	118142	AssignmentExpression	op_array -> fn_flags |= ZEND_ACC_HAS_RETURN_TYPE		118028	0		|=			
ANR	118143	PtrMemberAccess	op_array -> fn_flags		118028	0					
ANR	118144	Identifier	op_array		118028	0					
ANR	118145	Identifier	fn_flags		118028	1					
ANR	118146	Identifier	ZEND_ACC_HAS_RETURN_TYPE		118028	1					
ANR	118147	ElseStatement	else		118028	0					
ANR	118148	CompoundStatement		21:8:656:656	118028	0					
ANR	118149	IfStatement	if ( list -> children == 0 )		118028	0					
ANR	118150	Condition	list -> children == 0	4433:6:128030:128048	118028	0	True				
ANR	118151	EqualityExpression	list -> children == 0		118028	0		==			
ANR	118152	PtrMemberAccess	list -> children		118028	0					
ANR	118153	Identifier	list		118028	0					
ANR	118154	Identifier	children		118028	1					
ANR	118155	PrimaryExpression	0		118028	1					
ANR	118156	CompoundStatement		22:27:685:685	118028	1					
ANR	118157	ReturnStatement	return ;	4434:3:128056:128062	118028	0	True				
ANR	118158	ExpressionStatement	"arg_infos = safe_emalloc ( sizeof ( zend_arg_info ) , list -> children , 0 )"	4436:2:128070:128136	118028	1	True				
ANR	118159	AssignmentExpression	"arg_infos = safe_emalloc ( sizeof ( zend_arg_info ) , list -> children , 0 )"		118028	0		=			
ANR	118160	Identifier	arg_infos		118028	0					
ANR	118161	CallExpression	"safe_emalloc ( sizeof ( zend_arg_info ) , list -> children , 0 )"		118028	1					
ANR	118162	Callee	safe_emalloc		118028	0					
ANR	118163	Identifier	safe_emalloc		118028	0					
ANR	118164	ArgumentList	sizeof ( zend_arg_info )		118028	1					
ANR	118165	Argument	sizeof ( zend_arg_info )		118028	0					
ANR	118166	SizeofExpression	sizeof ( zend_arg_info )		118028	0					
ANR	118167	Sizeof	sizeof		118028	0					
ANR	118168	SizeofOperand	zend_arg_info		118028	1					
ANR	118169	Argument	list -> children		118028	1					
ANR	118170	PtrMemberAccess	list -> children		118028	0					
ANR	118171	Identifier	list		118028	0					
ANR	118172	Identifier	children		118028	1					
ANR	118173	Argument	0		118028	2					
ANR	118174	PrimaryExpression	0		118028	0					
ANR	118175	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		118028	5					
ANR	118176	ForInit	i = 0 ;	4439:6:128148:128153	118028	0	True				
ANR	118177	AssignmentExpression	i = 0		118028	0		=			
ANR	118178	Identifier	i		118028	0					
ANR	118179	PrimaryExpression	0		118028	1					
ANR	118180	Condition	i < list -> children	4439:13:128155:128172	118028	1	True				
ANR	118181	RelationalExpression	i < list -> children		118028	0		<			
ANR	118182	Identifier	i		118028	0					
ANR	118183	PtrMemberAccess	list -> children		118028	1					
ANR	118184	Identifier	list		118028	0					
ANR	118185	Identifier	children		118028	1					
ANR	118186	UnaryExpression	++ i	4439:33:128175:128177	118028	2	True				
ANR	118187	IncDec	++		118028	0					
ANR	118188	Identifier	i		118028	1					
ANR	118189	CompoundStatement		40:2:1248:1271	118028	3					
ANR	118190	IdentifierDeclStatement	zend_ast * param_ast = list -> child [ i ] ;	4440:2:128184:128220	118028	0	True				
ANR	118191	IdentifierDecl	* param_ast = list -> child [ i ]		118028	0					
ANR	118192	IdentifierDeclType	zend_ast *		118028	0					
ANR	118193	Identifier	param_ast		118028	1					
ANR	118194	AssignmentExpression	* param_ast = list -> child [ i ]		118028	2		=			
ANR	118195	Identifier	param_ast		118028	0					
ANR	118196	ArrayIndexing	list -> child [ i ]		118028	1					
ANR	118197	PtrMemberAccess	list -> child		118028	0					
ANR	118198	Identifier	list		118028	0					
ANR	118199	Identifier	child		118028	1					
ANR	118200	Identifier	i		118028	1					
ANR	118201	IdentifierDeclStatement	zend_ast * type_ast = param_ast -> child [ 0 ] ;	4441:2:128224:128264	118028	1	True				
ANR	118202	IdentifierDecl	* type_ast = param_ast -> child [ 0 ]		118028	0					
ANR	118203	IdentifierDeclType	zend_ast *		118028	0					
ANR	118204	Identifier	type_ast		118028	1					
ANR	118205	AssignmentExpression	* type_ast = param_ast -> child [ 0 ]		118028	2		=			
ANR	118206	Identifier	type_ast		118028	0					
ANR	118207	ArrayIndexing	param_ast -> child [ 0 ]		118028	1					
ANR	118208	PtrMemberAccess	param_ast -> child		118028	0					
ANR	118209	Identifier	param_ast		118028	0					
ANR	118210	Identifier	child		118028	1					
ANR	118211	PrimaryExpression	0		118028	1					
ANR	118212	IdentifierDeclStatement	zend_ast * var_ast = param_ast -> child [ 1 ] ;	4442:2:128268:128307	118028	2	True				
ANR	118213	IdentifierDecl	* var_ast = param_ast -> child [ 1 ]		118028	0					
ANR	118214	IdentifierDeclType	zend_ast *		118028	0					
ANR	118215	Identifier	var_ast		118028	1					
ANR	118216	AssignmentExpression	* var_ast = param_ast -> child [ 1 ]		118028	2		=			
ANR	118217	Identifier	var_ast		118028	0					
ANR	118218	ArrayIndexing	param_ast -> child [ 1 ]		118028	1					
ANR	118219	PtrMemberAccess	param_ast -> child		118028	0					
ANR	118220	Identifier	param_ast		118028	0					
ANR	118221	Identifier	child		118028	1					
ANR	118222	PrimaryExpression	1		118028	1					
ANR	118223	IdentifierDeclStatement	zend_ast * default_ast = param_ast -> child [ 2 ] ;	4443:2:128311:128354	118028	3	True				
ANR	118224	IdentifierDecl	* default_ast = param_ast -> child [ 2 ]		118028	0					
ANR	118225	IdentifierDeclType	zend_ast *		118028	0					
ANR	118226	Identifier	default_ast		118028	1					
ANR	118227	AssignmentExpression	* default_ast = param_ast -> child [ 2 ]		118028	2		=			
ANR	118228	Identifier	default_ast		118028	0					
ANR	118229	ArrayIndexing	param_ast -> child [ 2 ]		118028	1					
ANR	118230	PtrMemberAccess	param_ast -> child		118028	0					
ANR	118231	Identifier	param_ast		118028	0					
ANR	118232	Identifier	child		118028	1					
ANR	118233	PrimaryExpression	2		118028	1					
ANR	118234	IdentifierDeclStatement	zend_string * name = zend_ast_get_str ( var_ast ) ;	4444:2:128358:128403	118028	4	True				
ANR	118235	IdentifierDecl	* name = zend_ast_get_str ( var_ast )		118028	0					
ANR	118236	IdentifierDeclType	zend_string *		118028	0					
ANR	118237	Identifier	name		118028	1					
ANR	118238	AssignmentExpression	* name = zend_ast_get_str ( var_ast )		118028	2		=			
ANR	118239	Identifier	name		118028	0					
ANR	118240	CallExpression	zend_ast_get_str ( var_ast )		118028	1					
ANR	118241	Callee	zend_ast_get_str		118028	0					
ANR	118242	Identifier	zend_ast_get_str		118028	0					
ANR	118243	ArgumentList	var_ast		118028	1					
ANR	118244	Argument	var_ast		118028	0					
ANR	118245	Identifier	var_ast		118028	0					
ANR	118246	IdentifierDeclStatement	zend_bool is_ref = ( param_ast -> attr & ZEND_PARAM_REF ) != 0 ;	4445:2:128407:128465	118028	5	True				
ANR	118247	IdentifierDecl	is_ref = ( param_ast -> attr & ZEND_PARAM_REF ) != 0		118028	0					
ANR	118248	IdentifierDeclType	zend_bool		118028	0					
ANR	118249	Identifier	is_ref		118028	1					
ANR	118250	AssignmentExpression	is_ref = ( param_ast -> attr & ZEND_PARAM_REF ) != 0		118028	2		=			
ANR	118251	Identifier	is_ref		118028	0					
ANR	118252	EqualityExpression	( param_ast -> attr & ZEND_PARAM_REF ) != 0		118028	1		!=			
ANR	118253	BitAndExpression	param_ast -> attr & ZEND_PARAM_REF		118028	0		&			
ANR	118254	PtrMemberAccess	param_ast -> attr		118028	0					
ANR	118255	Identifier	param_ast		118028	0					
ANR	118256	Identifier	attr		118028	1					
ANR	118257	Identifier	ZEND_PARAM_REF		118028	1					
ANR	118258	PrimaryExpression	0		118028	1					
ANR	118259	IdentifierDeclStatement	zend_bool is_variadic = ( param_ast -> attr & ZEND_PARAM_VARIADIC ) != 0 ;	4446:2:128469:128537	118028	6	True				
ANR	118260	IdentifierDecl	is_variadic = ( param_ast -> attr & ZEND_PARAM_VARIADIC ) != 0		118028	0					
ANR	118261	IdentifierDeclType	zend_bool		118028	0					
ANR	118262	Identifier	is_variadic		118028	1					
ANR	118263	AssignmentExpression	is_variadic = ( param_ast -> attr & ZEND_PARAM_VARIADIC ) != 0		118028	2		=			
ANR	118264	Identifier	is_variadic		118028	0					
ANR	118265	EqualityExpression	( param_ast -> attr & ZEND_PARAM_VARIADIC ) != 0		118028	1		!=			
ANR	118266	BitAndExpression	param_ast -> attr & ZEND_PARAM_VARIADIC		118028	0		&			
ANR	118267	PtrMemberAccess	param_ast -> attr		118028	0					
ANR	118268	Identifier	param_ast		118028	0					
ANR	118269	Identifier	attr		118028	1					
ANR	118270	Identifier	ZEND_PARAM_VARIADIC		118028	1					
ANR	118271	PrimaryExpression	0		118028	1					
ANR	118272	IdentifierDeclStatement	"znode var_node , default_node ;"	4448:2:128542:128570	118028	7	True				
ANR	118273	IdentifierDecl	var_node		118028	0					
ANR	118274	IdentifierDeclType	znode		118028	0					
ANR	118275	Identifier	var_node		118028	1					
ANR	118276	IdentifierDecl	default_node		118028	1					
ANR	118277	IdentifierDeclType	znode		118028	0					
ANR	118278	Identifier	default_node		118028	1					
ANR	118279	IdentifierDeclStatement	zend_uchar opcode ;	4449:2:128574:128591	118028	8	True				
ANR	118280	IdentifierDecl	opcode		118028	0					
ANR	118281	IdentifierDeclType	zend_uchar		118028	0					
ANR	118282	Identifier	opcode		118028	1					
ANR	118283	IdentifierDeclStatement	zend_op * opline ;	4450:2:128595:128610	118028	9	True				
ANR	118284	IdentifierDecl	* opline		118028	0					
ANR	118285	IdentifierDeclType	zend_op *		118028	0					
ANR	118286	Identifier	opline		118028	1					
ANR	118287	IdentifierDeclStatement	zend_arg_info * arg_info ;	4451:2:128614:128637	118028	10	True				
ANR	118288	IdentifierDecl	* arg_info		118028	0					
ANR	118289	IdentifierDeclType	zend_arg_info *		118028	0					
ANR	118290	Identifier	arg_info		118028	1					
ANR	118291	IfStatement	if ( zend_is_auto_global ( name ) )		118028	11					
ANR	118292	Condition	zend_is_auto_global ( name )	4453:6:128646:128670	118028	0	True				
ANR	118293	CallExpression	zend_is_auto_global ( name )		118028	0					
ANR	118294	Callee	zend_is_auto_global		118028	0					
ANR	118295	Identifier	zend_is_auto_global		118028	0					
ANR	118296	ArgumentList	name		118028	1					
ANR	118297	Argument	name		118028	0					
ANR	118298	Identifier	name		118028	0					
ANR	118299	CompoundStatement		42:33:1307:1307	118028	1					
ANR	118300	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign auto-global variable %s"" , ZSTR_VAL ( name ) )"	4454:3:128678:128778	118028	0	True				
ANR	118301	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign auto-global variable %s"" , ZSTR_VAL ( name ) )"		118028	0					
ANR	118302	Callee	zend_error_noreturn		118028	0					
ANR	118303	Identifier	zend_error_noreturn		118028	0					
ANR	118304	ArgumentList	E_COMPILE_ERROR		118028	1					
ANR	118305	Argument	E_COMPILE_ERROR		118028	0					
ANR	118306	Identifier	E_COMPILE_ERROR		118028	0					
ANR	118307	Argument	"""Cannot re-assign auto-global variable %s"""		118028	1					
ANR	118308	PrimaryExpression	"""Cannot re-assign auto-global variable %s"""		118028	0					
ANR	118309	Argument	ZSTR_VAL ( name )		118028	2					
ANR	118310	CallExpression	ZSTR_VAL ( name )		118028	0					
ANR	118311	Callee	ZSTR_VAL		118028	0					
ANR	118312	Identifier	ZSTR_VAL		118028	0					
ANR	118313	ArgumentList	name		118028	1					
ANR	118314	Argument	name		118028	0					
ANR	118315	Identifier	name		118028	0					
ANR	118316	ExpressionStatement	var_node . op_type = IS_CV	4458:2:128787:128811	118028	12	True				
ANR	118317	AssignmentExpression	var_node . op_type = IS_CV		118028	0		=			
ANR	118318	MemberAccess	var_node . op_type		118028	0					
ANR	118319	Identifier	var_node		118028	0					
ANR	118320	Identifier	op_type		118028	1					
ANR	118321	Identifier	IS_CV		118028	1					
ANR	118322	ExpressionStatement	"var_node . u . op . var = lookup_cv ( CG ( active_op_array ) , zend_string_copy ( name ) )"	4459:2:128815:128889	118028	13	True				
ANR	118323	AssignmentExpression	"var_node . u . op . var = lookup_cv ( CG ( active_op_array ) , zend_string_copy ( name ) )"		118028	0		=			
ANR	118324	MemberAccess	var_node . u . op . var		118028	0					
ANR	118325	MemberAccess	var_node . u . op		118028	0					
ANR	118326	MemberAccess	var_node . u		118028	0					
ANR	118327	Identifier	var_node		118028	0					
ANR	118328	Identifier	u		118028	1					
ANR	118329	Identifier	op		118028	1					
ANR	118330	Identifier	var		118028	1					
ANR	118331	CallExpression	"lookup_cv ( CG ( active_op_array ) , zend_string_copy ( name ) )"		118028	1					
ANR	118332	Callee	lookup_cv		118028	0					
ANR	118333	Identifier	lookup_cv		118028	0					
ANR	118334	ArgumentList	CG ( active_op_array )		118028	1					
ANR	118335	Argument	CG ( active_op_array )		118028	0					
ANR	118336	CallExpression	CG ( active_op_array )		118028	0					
ANR	118337	Callee	CG		118028	0					
ANR	118338	Identifier	CG		118028	0					
ANR	118339	ArgumentList	active_op_array		118028	1					
ANR	118340	Argument	active_op_array		118028	0					
ANR	118341	Identifier	active_op_array		118028	0					
ANR	118342	Argument	zend_string_copy ( name )		118028	1					
ANR	118343	CallExpression	zend_string_copy ( name )		118028	0					
ANR	118344	Callee	zend_string_copy		118028	0					
ANR	118345	Identifier	zend_string_copy		118028	0					
ANR	118346	ArgumentList	name		118028	1					
ANR	118347	Argument	name		118028	0					
ANR	118348	Identifier	name		118028	0					
ANR	118349	IfStatement	if ( EX_VAR_TO_NUM ( var_node . u . op . var ) != i )		118028	14					
ANR	118350	Condition	EX_VAR_TO_NUM ( var_node . u . op . var ) != i	4461:6:128898:128934	118028	0	True				
ANR	118351	EqualityExpression	EX_VAR_TO_NUM ( var_node . u . op . var ) != i		118028	0		!=			
ANR	118352	CallExpression	EX_VAR_TO_NUM ( var_node . u . op . var )		118028	0					
ANR	118353	Callee	EX_VAR_TO_NUM		118028	0					
ANR	118354	Identifier	EX_VAR_TO_NUM		118028	0					
ANR	118355	ArgumentList	var_node . u . op . var		118028	1					
ANR	118356	Argument	var_node . u . op . var		118028	0					
ANR	118357	MemberAccess	var_node . u . op . var		118028	0					
ANR	118358	MemberAccess	var_node . u . op		118028	0					
ANR	118359	MemberAccess	var_node . u		118028	0					
ANR	118360	Identifier	var_node		118028	0					
ANR	118361	Identifier	u		118028	1					
ANR	118362	Identifier	op		118028	1					
ANR	118363	Identifier	var		118028	1					
ANR	118364	Identifier	i		118028	1					
ANR	118365	CompoundStatement		50:45:1571:1571	118028	1					
ANR	118366	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Redefinition of parameter $%s"" , ZSTR_VAL ( name ) )"	4462:3:128942:129031	118028	0	True				
ANR	118367	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Redefinition of parameter $%s"" , ZSTR_VAL ( name ) )"		118028	0					
ANR	118368	Callee	zend_error_noreturn		118028	0					
ANR	118369	Identifier	zend_error_noreturn		118028	0					
ANR	118370	ArgumentList	E_COMPILE_ERROR		118028	1					
ANR	118371	Argument	E_COMPILE_ERROR		118028	0					
ANR	118372	Identifier	E_COMPILE_ERROR		118028	0					
ANR	118373	Argument	"""Redefinition of parameter $%s"""		118028	1					
ANR	118374	PrimaryExpression	"""Redefinition of parameter $%s"""		118028	0					
ANR	118375	Argument	ZSTR_VAL ( name )		118028	2					
ANR	118376	CallExpression	ZSTR_VAL ( name )		118028	0					
ANR	118377	Callee	ZSTR_VAL		118028	0					
ANR	118378	Identifier	ZSTR_VAL		118028	0					
ANR	118379	ArgumentList	name		118028	1					
ANR	118380	Argument	name		118028	0					
ANR	118381	Identifier	name		118028	0					
ANR	118382	ElseStatement	else		118028	0					
ANR	118383	IfStatement	"if ( zend_string_equals_literal ( name , ""this"" ) )"		118028	0					
ANR	118384	Condition	"zend_string_equals_literal ( name , ""this"" )"	4464:13:129046:129085	118028	0	True				
ANR	118385	CallExpression	"zend_string_equals_literal ( name , ""this"" )"		118028	0					
ANR	118386	Callee	zend_string_equals_literal		118028	0					
ANR	118387	Identifier	zend_string_equals_literal		118028	0					
ANR	118388	ArgumentList	name		118028	1					
ANR	118389	Argument	name		118028	0					
ANR	118390	Identifier	name		118028	0					
ANR	118391	Argument	"""this"""		118028	1					
ANR	118392	PrimaryExpression	"""this"""		118028	0					
ANR	118393	CompoundStatement		53:55:1722:1722	118028	1					
ANR	118394	IfStatement	if ( op_array -> scope && ( op_array -> fn_flags & ZEND_ACC_STATIC ) == 0 )		118028	0					
ANR	118395	Condition	op_array -> scope && ( op_array -> fn_flags & ZEND_ACC_STATIC ) == 0	4465:7:129097:129158	118028	0	True				
ANR	118396	AndExpression	op_array -> scope && ( op_array -> fn_flags & ZEND_ACC_STATIC ) == 0		118028	0		&&			
ANR	118397	PtrMemberAccess	op_array -> scope		118028	0					
ANR	118398	Identifier	op_array		118028	0					
ANR	118399	Identifier	scope		118028	1					
ANR	118400	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_STATIC ) == 0		118028	1		==			
ANR	118401	BitAndExpression	op_array -> fn_flags & ZEND_ACC_STATIC		118028	0		&			
ANR	118402	PtrMemberAccess	op_array -> fn_flags		118028	0					
ANR	118403	Identifier	op_array		118028	0					
ANR	118404	Identifier	fn_flags		118028	1					
ANR	118405	Identifier	ZEND_ACC_STATIC		118028	1					
ANR	118406	PrimaryExpression	0		118028	1					
ANR	118407	CompoundStatement		54:71:1795:1795	118028	1					
ANR	118408	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign $this"" )"	4466:4:129167:129229	118028	0	True				
ANR	118409	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot re-assign $this"" )"		118028	0					
ANR	118410	Callee	zend_error_noreturn		118028	0					
ANR	118411	Identifier	zend_error_noreturn		118028	0					
ANR	118412	ArgumentList	E_COMPILE_ERROR		118028	1					
ANR	118413	Argument	E_COMPILE_ERROR		118028	0					
ANR	118414	Identifier	E_COMPILE_ERROR		118028	0					
ANR	118415	Argument	"""Cannot re-assign $this"""		118028	1					
ANR	118416	PrimaryExpression	"""Cannot re-assign $this"""		118028	0					
ANR	118417	ExpressionStatement	op_array -> this_var = var_node . u . op . var	4468:3:129239:129277	118028	1	True				
ANR	118418	AssignmentExpression	op_array -> this_var = var_node . u . op . var		118028	0		=			
ANR	118419	PtrMemberAccess	op_array -> this_var		118028	0					
ANR	118420	Identifier	op_array		118028	0					
ANR	118421	Identifier	this_var		118028	1					
ANR	118422	MemberAccess	var_node . u . op . var		118028	1					
ANR	118423	MemberAccess	var_node . u . op		118028	0					
ANR	118424	MemberAccess	var_node . u		118028	0					
ANR	118425	Identifier	var_node		118028	0					
ANR	118426	Identifier	u		118028	1					
ANR	118427	Identifier	op		118028	1					
ANR	118428	Identifier	var		118028	1					
ANR	118429	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_VARIADIC )		118028	15					
ANR	118430	Condition	op_array -> fn_flags & ZEND_ACC_VARIADIC	4471:6:129290:129327	118028	0	True				
ANR	118431	BitAndExpression	op_array -> fn_flags & ZEND_ACC_VARIADIC		118028	0		&			
ANR	118432	PtrMemberAccess	op_array -> fn_flags		118028	0					
ANR	118433	Identifier	op_array		118028	0					
ANR	118434	Identifier	fn_flags		118028	1					
ANR	118435	Identifier	ZEND_ACC_VARIADIC		118028	1					
ANR	118436	CompoundStatement		60:46:1964:1964	118028	1					
ANR	118437	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Only the last parameter can be variadic"" )"	4472:3:129335:129414	118028	0	True				
ANR	118438	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Only the last parameter can be variadic"" )"		118028	0					
ANR	118439	Callee	zend_error_noreturn		118028	0					
ANR	118440	Identifier	zend_error_noreturn		118028	0					
ANR	118441	ArgumentList	E_COMPILE_ERROR		118028	1					
ANR	118442	Argument	E_COMPILE_ERROR		118028	0					
ANR	118443	Identifier	E_COMPILE_ERROR		118028	0					
ANR	118444	Argument	"""Only the last parameter can be variadic"""		118028	1					
ANR	118445	PrimaryExpression	"""Only the last parameter can be variadic"""		118028	0					
ANR	118446	IfStatement	if ( is_variadic )		118028	16					
ANR	118447	Condition	is_variadic	4475:6:129427:129437	118028	0	True				
ANR	118448	Identifier	is_variadic		118028	0					
ANR	118449	CompoundStatement		64:19:2074:2074	118028	1					
ANR	118450	ExpressionStatement	opcode = ZEND_RECV_VARIADIC	4476:3:129445:129472	118028	0	True				
ANR	118451	AssignmentExpression	opcode = ZEND_RECV_VARIADIC		118028	0		=			
ANR	118452	Identifier	opcode		118028	0					
ANR	118453	Identifier	ZEND_RECV_VARIADIC		118028	1					
ANR	118454	ExpressionStatement	default_node . op_type = IS_UNUSED	4477:3:129477:129509	118028	1	True				
ANR	118455	AssignmentExpression	default_node . op_type = IS_UNUSED		118028	0		=			
ANR	118456	MemberAccess	default_node . op_type		118028	0					
ANR	118457	Identifier	default_node		118028	0					
ANR	118458	Identifier	op_type		118028	1					
ANR	118459	Identifier	IS_UNUSED		118028	1					
ANR	118460	ExpressionStatement	op_array -> fn_flags |= ZEND_ACC_VARIADIC	4478:3:129514:129553	118028	2	True				
ANR	118461	AssignmentExpression	op_array -> fn_flags |= ZEND_ACC_VARIADIC		118028	0		|=			
ANR	118462	PtrMemberAccess	op_array -> fn_flags		118028	0					
ANR	118463	Identifier	op_array		118028	0					
ANR	118464	Identifier	fn_flags		118028	1					
ANR	118465	Identifier	ZEND_ACC_VARIADIC		118028	1					
ANR	118466	IfStatement	if ( default_ast )		118028	3					
ANR	118467	Condition	default_ast	4480:7:129563:129573	118028	0	True				
ANR	118468	Identifier	default_ast		118028	0					
ANR	118469	CompoundStatement		69:20:2210:2210	118028	1					
ANR	118470	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Variadic parameter cannot have a default value"" )"	4481:4:129582:129673	118028	0	True				
ANR	118471	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Variadic parameter cannot have a default value"" )"		118028	0					
ANR	118472	Callee	zend_error_noreturn		118028	0					
ANR	118473	Identifier	zend_error_noreturn		118028	0					
ANR	118474	ArgumentList	E_COMPILE_ERROR		118028	1					
ANR	118475	Argument	E_COMPILE_ERROR		118028	0					
ANR	118476	Identifier	E_COMPILE_ERROR		118028	0					
ANR	118477	Argument	"""Variadic parameter cannot have a default value"""		118028	1					
ANR	118478	PrimaryExpression	"""Variadic parameter cannot have a default value"""		118028	0					
ANR	118479	ElseStatement	else		118028	0					
ANR	118480	IfStatement	if ( default_ast )		118028	0					
ANR	118481	Condition	default_ast	4484:13:129693:129703	118028	0	True				
ANR	118482	Identifier	default_ast		118028	0					
ANR	118483	CompoundStatement		75:3:2508:2544	118028	1					
ANR	118484	IdentifierDeclStatement	uint32_t cops = CG ( compiler_options ) ;	4486:3:129874:129910	118028	0	True				
ANR	118485	IdentifierDecl	cops = CG ( compiler_options )		118028	0					
ANR	118486	IdentifierDeclType	uint32_t		118028	0					
ANR	118487	Identifier	cops		118028	1					
ANR	118488	AssignmentExpression	cops = CG ( compiler_options )		118028	2		=			
ANR	118489	Identifier	cops		118028	0					
ANR	118490	CallExpression	CG ( compiler_options )		118028	1					
ANR	118491	Callee	CG		118028	0					
ANR	118492	Identifier	CG		118028	0					
ANR	118493	ArgumentList	compiler_options		118028	1					
ANR	118494	Argument	compiler_options		118028	0					
ANR	118495	Identifier	compiler_options		118028	0					
ANR	118496	ExpressionStatement	CG ( compiler_options ) |= ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION | ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION	4487:3:129915:130027	118028	1	True				
ANR	118497	AssignmentExpression	CG ( compiler_options ) |= ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION | ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		118028	0		|=			
ANR	118498	CallExpression	CG ( compiler_options )		118028	0					
ANR	118499	Callee	CG		118028	0					
ANR	118500	Identifier	CG		118028	0					
ANR	118501	ArgumentList	compiler_options		118028	1					
ANR	118502	Argument	compiler_options		118028	0					
ANR	118503	Identifier	compiler_options		118028	0					
ANR	118504	InclusiveOrExpression	ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION | ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		118028	1		|			
ANR	118505	Identifier	ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		118028	0					
ANR	118506	Identifier	ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		118028	1					
ANR	118507	ExpressionStatement	opcode = ZEND_RECV_INIT	4488:3:130032:130055	118028	2	True				
ANR	118508	AssignmentExpression	opcode = ZEND_RECV_INIT		118028	0		=			
ANR	118509	Identifier	opcode		118028	0					
ANR	118510	Identifier	ZEND_RECV_INIT		118028	1					
ANR	118511	ExpressionStatement	default_node . op_type = IS_CONST	4489:3:130060:130091	118028	3	True				
ANR	118512	AssignmentExpression	default_node . op_type = IS_CONST		118028	0		=			
ANR	118513	MemberAccess	default_node . op_type		118028	0					
ANR	118514	Identifier	default_node		118028	0					
ANR	118515	Identifier	op_type		118028	1					
ANR	118516	Identifier	IS_CONST		118028	1					
ANR	118517	ExpressionStatement	"zend_const_expr_to_zval ( & default_node . u . constant , default_ast )"	4490:3:130096:130158	118028	4	True				
ANR	118518	CallExpression	"zend_const_expr_to_zval ( & default_node . u . constant , default_ast )"		118028	0					
ANR	118519	Callee	zend_const_expr_to_zval		118028	0					
ANR	118520	Identifier	zend_const_expr_to_zval		118028	0					
ANR	118521	ArgumentList	& default_node . u . constant		118028	1					
ANR	118522	Argument	& default_node . u . constant		118028	0					
ANR	118523	UnaryOperationExpression	& default_node . u . constant		118028	0					
ANR	118524	UnaryOperator	&		118028	0					
ANR	118525	MemberAccess	default_node . u . constant		118028	1					
ANR	118526	MemberAccess	default_node . u		118028	0					
ANR	118527	Identifier	default_node		118028	0					
ANR	118528	Identifier	u		118028	1					
ANR	118529	Identifier	constant		118028	1					
ANR	118530	Argument	default_ast		118028	1					
ANR	118531	Identifier	default_ast		118028	0					
ANR	118532	ExpressionStatement	CG ( compiler_options ) = cops	4491:3:130163:130190	118028	5	True				
ANR	118533	AssignmentExpression	CG ( compiler_options ) = cops		118028	0		=			
ANR	118534	CallExpression	CG ( compiler_options )		118028	0					
ANR	118535	Callee	CG		118028	0					
ANR	118536	Identifier	CG		118028	0					
ANR	118537	ArgumentList	compiler_options		118028	1					
ANR	118538	Argument	compiler_options		118028	0					
ANR	118539	Identifier	compiler_options		118028	0					
ANR	118540	Identifier	cops		118028	1					
ANR	118541	ElseStatement	else		118028	0					
ANR	118542	CompoundStatement		81:9:2835:2835	118028	0					
ANR	118543	ExpressionStatement	opcode = ZEND_RECV	4493:3:130206:130224	118028	0	True				
ANR	118544	AssignmentExpression	opcode = ZEND_RECV		118028	0		=			
ANR	118545	Identifier	opcode		118028	0					
ANR	118546	Identifier	ZEND_RECV		118028	1					
ANR	118547	ExpressionStatement	default_node . op_type = IS_UNUSED	4494:3:130229:130261	118028	1	True				
ANR	118548	AssignmentExpression	default_node . op_type = IS_UNUSED		118028	0		=			
ANR	118549	MemberAccess	default_node . op_type		118028	0					
ANR	118550	Identifier	default_node		118028	0					
ANR	118551	Identifier	op_type		118028	1					
ANR	118552	Identifier	IS_UNUSED		118028	1					
ANR	118553	ExpressionStatement	op_array -> required_num_args = i + 1	4495:3:130266:130301	118028	2	True				
ANR	118554	AssignmentExpression	op_array -> required_num_args = i + 1		118028	0		=			
ANR	118555	PtrMemberAccess	op_array -> required_num_args		118028	0					
ANR	118556	Identifier	op_array		118028	0					
ANR	118557	Identifier	required_num_args		118028	1					
ANR	118558	AdditiveExpression	i + 1		118028	1		+			
ANR	118559	Identifier	i		118028	0					
ANR	118560	PrimaryExpression	1		118028	1					
ANR	118561	ExpressionStatement	"opline = zend_emit_op ( NULL , opcode , NULL , & default_node )"	4498:2:130310:130366	118028	17	True				
ANR	118562	AssignmentExpression	"opline = zend_emit_op ( NULL , opcode , NULL , & default_node )"		118028	0		=			
ANR	118563	Identifier	opline		118028	0					
ANR	118564	CallExpression	"zend_emit_op ( NULL , opcode , NULL , & default_node )"		118028	1					
ANR	118565	Callee	zend_emit_op		118028	0					
ANR	118566	Identifier	zend_emit_op		118028	0					
ANR	118567	ArgumentList	NULL		118028	1					
ANR	118568	Argument	NULL		118028	0					
ANR	118569	Identifier	NULL		118028	0					
ANR	118570	Argument	opcode		118028	1					
ANR	118571	Identifier	opcode		118028	0					
ANR	118572	Argument	NULL		118028	2					
ANR	118573	Identifier	NULL		118028	0					
ANR	118574	Argument	& default_node		118028	3					
ANR	118575	UnaryOperationExpression	& default_node		118028	0					
ANR	118576	UnaryOperator	&		118028	0					
ANR	118577	Identifier	default_node		118028	1					
ANR	118578	ExpressionStatement	"SET_NODE ( opline -> result , & var_node )"	4499:2:130370:130405	118028	18	True				
ANR	118579	CallExpression	"SET_NODE ( opline -> result , & var_node )"		118028	0					
ANR	118580	Callee	SET_NODE		118028	0					
ANR	118581	Identifier	SET_NODE		118028	0					
ANR	118582	ArgumentList	opline -> result		118028	1					
ANR	118583	Argument	opline -> result		118028	0					
ANR	118584	PtrMemberAccess	opline -> result		118028	0					
ANR	118585	Identifier	opline		118028	0					
ANR	118586	Identifier	result		118028	1					
ANR	118587	Argument	& var_node		118028	1					
ANR	118588	UnaryOperationExpression	& var_node		118028	0					
ANR	118589	UnaryOperator	&		118028	0					
ANR	118590	Identifier	var_node		118028	1					
ANR	118591	ExpressionStatement	opline -> op1 . num = i + 1	4500:2:130409:130432	118028	19	True				
ANR	118592	AssignmentExpression	opline -> op1 . num = i + 1		118028	0		=			
ANR	118593	MemberAccess	opline -> op1 . num		118028	0					
ANR	118594	PtrMemberAccess	opline -> op1		118028	0					
ANR	118595	Identifier	opline		118028	0					
ANR	118596	Identifier	op1		118028	1					
ANR	118597	Identifier	num		118028	1					
ANR	118598	AdditiveExpression	i + 1		118028	1		+			
ANR	118599	Identifier	i		118028	0					
ANR	118600	PrimaryExpression	1		118028	1					
ANR	118601	ExpressionStatement	arg_info = & arg_infos [ i ]	4502:2:130437:130461	118028	20	True				
ANR	118602	AssignmentExpression	arg_info = & arg_infos [ i ]		118028	0		=			
ANR	118603	Identifier	arg_info		118028	0					
ANR	118604	UnaryOperationExpression	& arg_infos [ i ]		118028	1					
ANR	118605	UnaryOperator	&		118028	0					
ANR	118606	ArrayIndexing	arg_infos [ i ]		118028	1					
ANR	118607	Identifier	arg_infos		118028	0					
ANR	118608	Identifier	i		118028	1					
ANR	118609	ExpressionStatement	arg_info -> name = zend_string_copy ( name )	4503:2:130465:130504	118028	21	True				
ANR	118610	AssignmentExpression	arg_info -> name = zend_string_copy ( name )		118028	0		=			
ANR	118611	PtrMemberAccess	arg_info -> name		118028	0					
ANR	118612	Identifier	arg_info		118028	0					
ANR	118613	Identifier	name		118028	1					
ANR	118614	CallExpression	zend_string_copy ( name )		118028	1					
ANR	118615	Callee	zend_string_copy		118028	0					
ANR	118616	Identifier	zend_string_copy		118028	0					
ANR	118617	ArgumentList	name		118028	1					
ANR	118618	Argument	name		118028	0					
ANR	118619	Identifier	name		118028	0					
ANR	118620	ExpressionStatement	arg_info -> pass_by_reference = is_ref	4504:2:130508:130544	118028	22	True				
ANR	118621	AssignmentExpression	arg_info -> pass_by_reference = is_ref		118028	0		=			
ANR	118622	PtrMemberAccess	arg_info -> pass_by_reference		118028	0					
ANR	118623	Identifier	arg_info		118028	0					
ANR	118624	Identifier	pass_by_reference		118028	1					
ANR	118625	Identifier	is_ref		118028	1					
ANR	118626	ExpressionStatement	arg_info -> is_variadic = is_variadic	4505:2:130548:130583	118028	23	True				
ANR	118627	AssignmentExpression	arg_info -> is_variadic = is_variadic		118028	0		=			
ANR	118628	PtrMemberAccess	arg_info -> is_variadic		118028	0					
ANR	118629	Identifier	arg_info		118028	0					
ANR	118630	Identifier	is_variadic		118028	1					
ANR	118631	Identifier	is_variadic		118028	1					
ANR	118632	ExpressionStatement	arg_info -> type_hint = 0	4506:2:130587:130610	118028	24	True				
ANR	118633	AssignmentExpression	arg_info -> type_hint = 0		118028	0		=			
ANR	118634	PtrMemberAccess	arg_info -> type_hint		118028	0					
ANR	118635	Identifier	arg_info		118028	0					
ANR	118636	Identifier	type_hint		118028	1					
ANR	118637	PrimaryExpression	0		118028	1					
ANR	118638	ExpressionStatement	arg_info -> allow_null = 1	4507:2:130614:130638	118028	25	True				
ANR	118639	AssignmentExpression	arg_info -> allow_null = 1		118028	0		=			
ANR	118640	PtrMemberAccess	arg_info -> allow_null		118028	0					
ANR	118641	Identifier	arg_info		118028	0					
ANR	118642	Identifier	allow_null		118028	1					
ANR	118643	PrimaryExpression	1		118028	1					
ANR	118644	ExpressionStatement	arg_info -> class_name = NULL	4508:2:130642:130669	118028	26	True				
ANR	118645	AssignmentExpression	arg_info -> class_name = NULL		118028	0		=			
ANR	118646	PtrMemberAccess	arg_info -> class_name		118028	0					
ANR	118647	Identifier	arg_info		118028	0					
ANR	118648	Identifier	class_name		118028	1					
ANR	118649	Identifier	NULL		118028	1					
ANR	118650	IfStatement	if ( type_ast )		118028	27					
ANR	118651	Condition	type_ast	4510:6:130678:130685	118028	0	True				
ANR	118652	Identifier	type_ast		118028	0					
ANR	118653	CompoundStatement		100:3:3327:3544	118028	1					
ANR	118654	IdentifierDeclStatement	"zend_bool has_null_default = default_ast && ( Z_TYPE ( default_node . u . constant ) == IS_NULL || ( Z_TYPE ( default_node . u . constant ) == IS_CONSTANT && strcasecmp ( Z_STRVAL ( default_node . u . constant ) , ""NULL"" ) == 0 ) ) ;"	4511:3:130693:130910	118028	0	True				
ANR	118655	IdentifierDecl	"has_null_default = default_ast && ( Z_TYPE ( default_node . u . constant ) == IS_NULL || ( Z_TYPE ( default_node . u . constant ) == IS_CONSTANT && strcasecmp ( Z_STRVAL ( default_node . u . constant ) , ""NULL"" ) == 0 ) )"		118028	0					
ANR	118656	IdentifierDeclType	zend_bool		118028	0					
ANR	118657	Identifier	has_null_default		118028	1					
ANR	118658	AssignmentExpression	"has_null_default = default_ast && ( Z_TYPE ( default_node . u . constant ) == IS_NULL || ( Z_TYPE ( default_node . u . constant ) == IS_CONSTANT && strcasecmp ( Z_STRVAL ( default_node . u . constant ) , ""NULL"" ) == 0 ) )"		118028	2		=			
ANR	118659	Identifier	has_null_default		118028	0					
ANR	118660	AndExpression	"default_ast && ( Z_TYPE ( default_node . u . constant ) == IS_NULL || ( Z_TYPE ( default_node . u . constant ) == IS_CONSTANT && strcasecmp ( Z_STRVAL ( default_node . u . constant ) , ""NULL"" ) == 0 ) )"		118028	1		&&			
ANR	118661	Identifier	default_ast		118028	0					
ANR	118662	OrExpression	"Z_TYPE ( default_node . u . constant ) == IS_NULL || ( Z_TYPE ( default_node . u . constant ) == IS_CONSTANT && strcasecmp ( Z_STRVAL ( default_node . u . constant ) , ""NULL"" ) == 0 )"		118028	1		||			
ANR	118663	EqualityExpression	Z_TYPE ( default_node . u . constant ) == IS_NULL		118028	0		==			
ANR	118664	CallExpression	Z_TYPE ( default_node . u . constant )		118028	0					
ANR	118665	Callee	Z_TYPE		118028	0					
ANR	118666	Identifier	Z_TYPE		118028	0					
ANR	118667	ArgumentList	default_node . u . constant		118028	1					
ANR	118668	Argument	default_node . u . constant		118028	0					
ANR	118669	MemberAccess	default_node . u . constant		118028	0					
ANR	118670	MemberAccess	default_node . u		118028	0					
ANR	118671	Identifier	default_node		118028	0					
ANR	118672	Identifier	u		118028	1					
ANR	118673	Identifier	constant		118028	1					
ANR	118674	Identifier	IS_NULL		118028	1					
ANR	118675	AndExpression	"Z_TYPE ( default_node . u . constant ) == IS_CONSTANT && strcasecmp ( Z_STRVAL ( default_node . u . constant ) , ""NULL"" ) == 0"		118028	1		&&			
ANR	118676	EqualityExpression	Z_TYPE ( default_node . u . constant ) == IS_CONSTANT		118028	0		==			
ANR	118677	CallExpression	Z_TYPE ( default_node . u . constant )		118028	0					
ANR	118678	Callee	Z_TYPE		118028	0					
ANR	118679	Identifier	Z_TYPE		118028	0					
ANR	118680	ArgumentList	default_node . u . constant		118028	1					
ANR	118681	Argument	default_node . u . constant		118028	0					
ANR	118682	MemberAccess	default_node . u . constant		118028	0					
ANR	118683	MemberAccess	default_node . u		118028	0					
ANR	118684	Identifier	default_node		118028	0					
ANR	118685	Identifier	u		118028	1					
ANR	118686	Identifier	constant		118028	1					
ANR	118687	Identifier	IS_CONSTANT		118028	1					
ANR	118688	EqualityExpression	"strcasecmp ( Z_STRVAL ( default_node . u . constant ) , ""NULL"" ) == 0"		118028	1		==			
ANR	118689	CallExpression	"strcasecmp ( Z_STRVAL ( default_node . u . constant ) , ""NULL"" )"		118028	0					
ANR	118690	Callee	strcasecmp		118028	0					
ANR	118691	Identifier	strcasecmp		118028	0					
ANR	118692	ArgumentList	Z_STRVAL ( default_node . u . constant )		118028	1					
ANR	118693	Argument	Z_STRVAL ( default_node . u . constant )		118028	0					
ANR	118694	CallExpression	Z_STRVAL ( default_node . u . constant )		118028	0					
ANR	118695	Callee	Z_STRVAL		118028	0					
ANR	118696	Identifier	Z_STRVAL		118028	0					
ANR	118697	ArgumentList	default_node . u . constant		118028	1					
ANR	118698	Argument	default_node . u . constant		118028	0					
ANR	118699	MemberAccess	default_node . u . constant		118028	0					
ANR	118700	MemberAccess	default_node . u		118028	0					
ANR	118701	Identifier	default_node		118028	0					
ANR	118702	Identifier	u		118028	1					
ANR	118703	Identifier	constant		118028	1					
ANR	118704	Argument	"""NULL"""		118028	1					
ANR	118705	PrimaryExpression	"""NULL"""		118028	0					
ANR	118706	PrimaryExpression	0		118028	1					
ANR	118707	ExpressionStatement	op_array -> fn_flags |= ZEND_ACC_HAS_TYPE_HINTS	4516:3:130916:130961	118028	1	True				
ANR	118708	AssignmentExpression	op_array -> fn_flags |= ZEND_ACC_HAS_TYPE_HINTS		118028	0		|=			
ANR	118709	PtrMemberAccess	op_array -> fn_flags		118028	0					
ANR	118710	Identifier	op_array		118028	0					
ANR	118711	Identifier	fn_flags		118028	1					
ANR	118712	Identifier	ZEND_ACC_HAS_TYPE_HINTS		118028	1					
ANR	118713	ExpressionStatement	arg_info -> allow_null = has_null_default	4517:3:130966:131005	118028	2	True				
ANR	118714	AssignmentExpression	arg_info -> allow_null = has_null_default		118028	0		=			
ANR	118715	PtrMemberAccess	arg_info -> allow_null		118028	0					
ANR	118716	Identifier	arg_info		118028	0					
ANR	118717	Identifier	allow_null		118028	1					
ANR	118718	Identifier	has_null_default		118028	1					
ANR	118719	ExpressionStatement	"zend_compile_typename ( type_ast , arg_info )"	4519:3:131011:131052	118028	3	True				
ANR	118720	CallExpression	"zend_compile_typename ( type_ast , arg_info )"		118028	0					
ANR	118721	Callee	zend_compile_typename		118028	0					
ANR	118722	Identifier	zend_compile_typename		118028	0					
ANR	118723	ArgumentList	type_ast		118028	1					
ANR	118724	Argument	type_ast		118028	0					
ANR	118725	Identifier	type_ast		118028	0					
ANR	118726	Argument	arg_info		118028	1					
ANR	118727	Identifier	arg_info		118028	0					
ANR	118728	IfStatement	if ( type_ast -> kind == ZEND_AST_TYPE )		118028	4					
ANR	118729	Condition	type_ast -> kind == ZEND_AST_TYPE	4521:7:131062:131092	118028	0	True				
ANR	118730	EqualityExpression	type_ast -> kind == ZEND_AST_TYPE		118028	0		==			
ANR	118731	PtrMemberAccess	type_ast -> kind		118028	0					
ANR	118732	Identifier	type_ast		118028	0					
ANR	118733	Identifier	kind		118028	1					
ANR	118734	Identifier	ZEND_AST_TYPE		118028	1					
ANR	118735	CompoundStatement		110:40:3729:3729	118028	1					
ANR	118736	IfStatement	if ( arg_info -> type_hint == IS_ARRAY )		118028	0					
ANR	118737	Condition	arg_info -> type_hint == IS_ARRAY	4522:8:131105:131135	118028	0	True				
ANR	118738	EqualityExpression	arg_info -> type_hint == IS_ARRAY		118028	0		==			
ANR	118739	PtrMemberAccess	arg_info -> type_hint		118028	0					
ANR	118740	Identifier	arg_info		118028	0					
ANR	118741	Identifier	type_hint		118028	1					
ANR	118742	Identifier	IS_ARRAY		118028	1					
ANR	118743	CompoundStatement		111:41:3772:3772	118028	1					
ANR	118744	IfStatement	if ( default_ast && ! has_null_default && Z_TYPE ( default_node . u . constant ) != IS_ARRAY && ! Z_CONSTANT ( default_node . u . constant ) )		118028	0					
ANR	118745	Condition	default_ast && ! has_null_default && Z_TYPE ( default_node . u . constant ) != IS_ARRAY && ! Z_CONSTANT ( default_node . u . constant )	4523:9:131149:131279	118028	0	True				
ANR	118746	AndExpression	default_ast && ! has_null_default && Z_TYPE ( default_node . u . constant ) != IS_ARRAY && ! Z_CONSTANT ( default_node . u . constant )		118028	0		&&			
ANR	118747	Identifier	default_ast		118028	0					
ANR	118748	AndExpression	! has_null_default && Z_TYPE ( default_node . u . constant ) != IS_ARRAY && ! Z_CONSTANT ( default_node . u . constant )		118028	1		&&			
ANR	118749	UnaryOperationExpression	! has_null_default		118028	0					
ANR	118750	UnaryOperator	!		118028	0					
ANR	118751	Identifier	has_null_default		118028	1					
ANR	118752	AndExpression	Z_TYPE ( default_node . u . constant ) != IS_ARRAY && ! Z_CONSTANT ( default_node . u . constant )		118028	1		&&			
ANR	118753	EqualityExpression	Z_TYPE ( default_node . u . constant ) != IS_ARRAY		118028	0		!=			
ANR	118754	CallExpression	Z_TYPE ( default_node . u . constant )		118028	0					
ANR	118755	Callee	Z_TYPE		118028	0					
ANR	118756	Identifier	Z_TYPE		118028	0					
ANR	118757	ArgumentList	default_node . u . constant		118028	1					
ANR	118758	Argument	default_node . u . constant		118028	0					
ANR	118759	MemberAccess	default_node . u . constant		118028	0					
ANR	118760	MemberAccess	default_node . u		118028	0					
ANR	118761	Identifier	default_node		118028	0					
ANR	118762	Identifier	u		118028	1					
ANR	118763	Identifier	constant		118028	1					
ANR	118764	Identifier	IS_ARRAY		118028	1					
ANR	118765	UnaryOperationExpression	! Z_CONSTANT ( default_node . u . constant )		118028	1					
ANR	118766	UnaryOperator	!		118028	0					
ANR	118767	CallExpression	Z_CONSTANT ( default_node . u . constant )		118028	1					
ANR	118768	Callee	Z_CONSTANT		118028	0					
ANR	118769	Identifier	Z_CONSTANT		118028	0					
ANR	118770	ArgumentList	default_node . u . constant		118028	1					
ANR	118771	Argument	default_node . u . constant		118028	0					
ANR	118772	MemberAccess	default_node . u . constant		118028	0					
ANR	118773	MemberAccess	default_node . u		118028	0					
ANR	118774	Identifier	default_node		118028	0					
ANR	118775	Identifier	u		118028	1					
ANR	118776	Identifier	constant		118028	1					
ANR	118777	CompoundStatement		115:7:3922:3922	118028	1					
ANR	118778	Statement	zend_error_noreturn	4527:6:131296:131314	118028	0	True				
ANR	118779	Statement	(	4527:25:131315:131315	118028	1	True				
ANR	118780	Statement	E_COMPILE_ERROR	4527:26:131316:131330	118028	2	True				
ANR	118781	Statement	","	4527:41:131331:131331	118028	3	True				
ANR	118782	Statement	"""Default value for parameters """	4527:43:131333:131363	118028	4	True				
ANR	118783	Statement	"""with array type hint can only be an array or NULL"""	4528:7:131372:131422	118028	5	True				
ANR	118784	Statement	)	4528:58:131423:131423	118028	6	True				
ANR	118785	ExpressionStatement		4528:59:131424:131424	118028	7	True				
ANR	118786	ElseStatement	else		118028	0					
ANR	118787	IfStatement	if ( arg_info -> type_hint == IS_CALLABLE && default_ast )		118028	0					
ANR	118788	Condition	arg_info -> type_hint == IS_CALLABLE && default_ast	4530:15:131448:131496	118028	0	True				
ANR	118789	AndExpression	arg_info -> type_hint == IS_CALLABLE && default_ast		118028	0		&&			
ANR	118790	EqualityExpression	arg_info -> type_hint == IS_CALLABLE		118028	0		==			
ANR	118791	PtrMemberAccess	arg_info -> type_hint		118028	0					
ANR	118792	Identifier	arg_info		118028	0					
ANR	118793	Identifier	type_hint		118028	1					
ANR	118794	Identifier	IS_CALLABLE		118028	1					
ANR	118795	Identifier	default_ast		118028	1					
ANR	118796	CompoundStatement		119:66:4133:4133	118028	1					
ANR	118797	IfStatement	if ( ! has_null_default && ! Z_CONSTANT ( default_node . u . constant ) )		118028	0					
ANR	118798	Condition	! has_null_default && ! Z_CONSTANT ( default_node . u . constant )	4531:9:131510:131566	118028	0	True				
ANR	118799	AndExpression	! has_null_default && ! Z_CONSTANT ( default_node . u . constant )		118028	0		&&			
ANR	118800	UnaryOperationExpression	! has_null_default		118028	0					
ANR	118801	UnaryOperator	!		118028	0					
ANR	118802	Identifier	has_null_default		118028	1					
ANR	118803	UnaryOperationExpression	! Z_CONSTANT ( default_node . u . constant )		118028	1					
ANR	118804	UnaryOperator	!		118028	0					
ANR	118805	CallExpression	Z_CONSTANT ( default_node . u . constant )		118028	1					
ANR	118806	Callee	Z_CONSTANT		118028	0					
ANR	118807	Identifier	Z_CONSTANT		118028	0					
ANR	118808	ArgumentList	default_node . u . constant		118028	1					
ANR	118809	Argument	default_node . u . constant		118028	0					
ANR	118810	MemberAccess	default_node . u . constant		118028	0					
ANR	118811	MemberAccess	default_node . u		118028	0					
ANR	118812	Identifier	default_node		118028	0					
ANR	118813	Identifier	u		118028	1					
ANR	118814	Identifier	constant		118028	1					
ANR	118815	CompoundStatement		120:68:4203:4203	118028	1					
ANR	118816	Statement	zend_error_noreturn	4532:6:131577:131595	118028	0	True				
ANR	118817	Statement	(	4532:25:131596:131596	118028	1	True				
ANR	118818	Statement	E_COMPILE_ERROR	4532:26:131597:131611	118028	2	True				
ANR	118819	Statement	","	4532:41:131612:131612	118028	3	True				
ANR	118820	Statement	"""Default value for parameters """	4532:43:131614:131644	118028	4	True				
ANR	118821	Statement	"""with callable type hint can only be NULL"""	4533:7:131653:131694	118028	5	True				
ANR	118822	Statement	)	4533:49:131695:131695	118028	6	True				
ANR	118823	ExpressionStatement		4533:50:131696:131696	118028	7	True				
ANR	118824	ElseStatement	else		118028	0					
ANR	118825	CompoundStatement		125:10:4355:4355	118028	0					
ANR	118826	IfStatement	if ( default_ast && ! has_null_default && ! Z_CONSTANT ( default_node . u . constant ) )		118028	0					
ANR	118827	Condition	default_ast && ! has_null_default && ! Z_CONSTANT ( default_node . u . constant )	4537:8:131731:131802	118028	0	True				
ANR	118828	AndExpression	default_ast && ! has_null_default && ! Z_CONSTANT ( default_node . u . constant )		118028	0		&&			
ANR	118829	Identifier	default_ast		118028	0					
ANR	118830	AndExpression	! has_null_default && ! Z_CONSTANT ( default_node . u . constant )		118028	1		&&			
ANR	118831	UnaryOperationExpression	! has_null_default		118028	0					
ANR	118832	UnaryOperator	!		118028	0					
ANR	118833	Identifier	has_null_default		118028	1					
ANR	118834	UnaryOperationExpression	! Z_CONSTANT ( default_node . u . constant )		118028	1					
ANR	118835	UnaryOperator	!		118028	0					
ANR	118836	CallExpression	Z_CONSTANT ( default_node . u . constant )		118028	1					
ANR	118837	Callee	Z_CONSTANT		118028	0					
ANR	118838	Identifier	Z_CONSTANT		118028	0					
ANR	118839	ArgumentList	default_node . u . constant		118028	1					
ANR	118840	Argument	default_node . u . constant		118028	0					
ANR	118841	MemberAccess	default_node . u . constant		118028	0					
ANR	118842	MemberAccess	default_node . u		118028	0					
ANR	118843	Identifier	default_node		118028	0					
ANR	118844	Identifier	u		118028	1					
ANR	118845	Identifier	constant		118028	1					
ANR	118846	CompoundStatement		126:82:4439:4439	118028	1					
ANR	118847	IfStatement	if ( arg_info -> class_name )		118028	0					
ANR	118848	Condition	arg_info -> class_name	4538:9:131816:131835	118028	0	True				
ANR	118849	PtrMemberAccess	arg_info -> class_name		118028	0					
ANR	118850	Identifier	arg_info		118028	0					
ANR	118851	Identifier	class_name		118028	1					
ANR	118852	CompoundStatement		127:31:4472:4472	118028	1					
ANR	118853	Statement	zend_error_noreturn	4539:6:131846:131864	118028	0	True				
ANR	118854	Statement	(	4539:25:131865:131865	118028	1	True				
ANR	118855	Statement	E_COMPILE_ERROR	4539:26:131866:131880	118028	2	True				
ANR	118856	Statement	","	4539:41:131881:131881	118028	3	True				
ANR	118857	Statement	"""Default value for parameters """	4539:43:131883:131913	118028	4	True				
ANR	118858	Statement	"""with a class type hint can only be NULL"""	4540:7:131922:131962	118028	5	True				
ANR	118859	Statement	)	4540:48:131963:131963	118028	6	True				
ANR	118860	ExpressionStatement		4540:49:131964:131964	118028	7	True				
ANR	118861	ElseStatement	else		118028	0					
ANR	118862	SwitchStatement	switch ( arg_info -> type_hint )		118028	0					
ANR	118863	Condition	arg_info -> type_hint	4541:20:131986:132004	118028	0	True				
ANR	118864	PtrMemberAccess	arg_info -> type_hint		118028	0					
ANR	118865	Identifier	arg_info		118028	0					
ANR	118866	Identifier	type_hint		118028	1					
ANR	118867	CompoundStatement		130:41:4641:4641	118028	1					
ANR	118868	Label	case IS_DOUBLE :	4542:6:132015:132029	118028	0	True				
ANR	118869	Identifier	IS_DOUBLE		118028	0					
ANR	118870	IfStatement	if ( Z_TYPE ( default_node . u . constant ) != IS_DOUBLE && Z_TYPE ( default_node . u . constant ) != IS_LONG )		118028	1					
ANR	118871	Condition	Z_TYPE ( default_node . u . constant ) != IS_DOUBLE && Z_TYPE ( default_node . u . constant ) != IS_LONG	4543:11:132042:132131	118028	0	True				
ANR	118872	AndExpression	Z_TYPE ( default_node . u . constant ) != IS_DOUBLE && Z_TYPE ( default_node . u . constant ) != IS_LONG		118028	0		&&			
ANR	118873	EqualityExpression	Z_TYPE ( default_node . u . constant ) != IS_DOUBLE		118028	0		!=			
ANR	118874	CallExpression	Z_TYPE ( default_node . u . constant )		118028	0					
ANR	118875	Callee	Z_TYPE		118028	0					
ANR	118876	Identifier	Z_TYPE		118028	0					
ANR	118877	ArgumentList	default_node . u . constant		118028	1					
ANR	118878	Argument	default_node . u . constant		118028	0					
ANR	118879	MemberAccess	default_node . u . constant		118028	0					
ANR	118880	MemberAccess	default_node . u		118028	0					
ANR	118881	Identifier	default_node		118028	0					
ANR	118882	Identifier	u		118028	1					
ANR	118883	Identifier	constant		118028	1					
ANR	118884	Identifier	IS_DOUBLE		118028	1					
ANR	118885	EqualityExpression	Z_TYPE ( default_node . u . constant ) != IS_LONG		118028	1		!=			
ANR	118886	CallExpression	Z_TYPE ( default_node . u . constant )		118028	0					
ANR	118887	Callee	Z_TYPE		118028	0					
ANR	118888	Identifier	Z_TYPE		118028	0					
ANR	118889	ArgumentList	default_node . u . constant		118028	1					
ANR	118890	Argument	default_node . u . constant		118028	0					
ANR	118891	MemberAccess	default_node . u . constant		118028	0					
ANR	118892	MemberAccess	default_node . u		118028	0					
ANR	118893	Identifier	default_node		118028	0					
ANR	118894	Identifier	u		118028	1					
ANR	118895	Identifier	constant		118028	1					
ANR	118896	Identifier	IS_LONG		118028	1					
ANR	118897	CompoundStatement		132:103:4768:4768	118028	1					
ANR	118898	Statement	zend_error_noreturn	4544:8:132144:132162	118028	0	True				
ANR	118899	Statement	(	4544:27:132163:132163	118028	1	True				
ANR	118900	Statement	E_COMPILE_ERROR	4544:28:132164:132178	118028	2	True				
ANR	118901	Statement	","	4544:43:132179:132179	118028	3	True				
ANR	118902	Statement	"""Default value for parameters """	4544:45:132181:132211	118028	4	True				
ANR	118903	Statement	"""with a float type hint can only be float, integer, or NULL"""	4545:9:132222:132281	118028	5	True				
ANR	118904	Statement	)	4545:69:132282:132282	118028	6	True				
ANR	118905	ExpressionStatement		4545:70:132283:132283	118028	7	True				
ANR	118906	BreakStatement	break ;	4547:7:132301:132306	118028	2	True				
ANR	118907	Label	default :	4549:6:132322:132329	118028	3	True				
ANR	118908	Identifier	default		118028	0					
ANR	118909	IfStatement	"if ( ! ZEND_SAME_FAKE_TYPE ( arg_info -> type_hint , Z_TYPE ( default_node . u . constant ) ) )"		118028	4					
ANR	118910	Condition	"! ZEND_SAME_FAKE_TYPE ( arg_info -> type_hint , Z_TYPE ( default_node . u . constant ) )"	4550:11:132342:132415	118028	0	True				
ANR	118911	UnaryOperationExpression	"! ZEND_SAME_FAKE_TYPE ( arg_info -> type_hint , Z_TYPE ( default_node . u . constant ) )"		118028	0					
ANR	118912	UnaryOperator	!		118028	0					
ANR	118913	CallExpression	"ZEND_SAME_FAKE_TYPE ( arg_info -> type_hint , Z_TYPE ( default_node . u . constant ) )"		118028	1					
ANR	118914	Callee	ZEND_SAME_FAKE_TYPE		118028	0					
ANR	118915	Identifier	ZEND_SAME_FAKE_TYPE		118028	0					
ANR	118916	ArgumentList	arg_info -> type_hint		118028	1					
ANR	118917	Argument	arg_info -> type_hint		118028	0					
ANR	118918	PtrMemberAccess	arg_info -> type_hint		118028	0					
ANR	118919	Identifier	arg_info		118028	0					
ANR	118920	Identifier	type_hint		118028	1					
ANR	118921	Argument	Z_TYPE ( default_node . u . constant )		118028	1					
ANR	118922	CallExpression	Z_TYPE ( default_node . u . constant )		118028	0					
ANR	118923	Callee	Z_TYPE		118028	0					
ANR	118924	Identifier	Z_TYPE		118028	0					
ANR	118925	ArgumentList	default_node . u . constant		118028	1					
ANR	118926	Argument	default_node . u . constant		118028	0					
ANR	118927	MemberAccess	default_node . u . constant		118028	0					
ANR	118928	MemberAccess	default_node . u		118028	0					
ANR	118929	Identifier	default_node		118028	0					
ANR	118930	Identifier	u		118028	1					
ANR	118931	Identifier	constant		118028	1					
ANR	118932	CompoundStatement		139:87:5052:5052	118028	1					
ANR	118933	Statement	zend_error_noreturn	4551:8:132428:132446	118028	0	True				
ANR	118934	Statement	(	4551:27:132447:132447	118028	1	True				
ANR	118935	Statement	E_COMPILE_ERROR	4551:28:132448:132462	118028	2	True				
ANR	118936	Statement	","	4551:43:132463:132463	118028	3	True				
ANR	118937	Statement	"""Default value for parameters """	4551:45:132465:132495	118028	4	True				
ANR	118938	Statement	"""with a %s type hint can only be %s or NULL"""	4552:9:132506:132549	118028	5	True				
ANR	118939	Statement	","	4552:53:132550:132550	118028	6	True				
ANR	118940	Statement	zend_get_type_by_const	4553:9:132561:132582	118028	7	True				
ANR	118941	Statement	(	4553:31:132583:132583	118028	8	True				
ANR	118942	Statement	arg_info	4553:32:132584:132591	118028	9	True				
ANR	118943	Statement	->	4553:40:132592:132593	118028	10	True				
ANR	118944	Statement	type_hint	4553:42:132594:132602	118028	11	True				
ANR	118945	Statement	)	4553:51:132603:132603	118028	12	True				
ANR	118946	Statement	","	4553:52:132604:132604	118028	13	True				
ANR	118947	Statement	zend_get_type_by_const	4553:54:132606:132627	118028	14	True				
ANR	118948	Statement	(	4553:76:132628:132628	118028	15	True				
ANR	118949	Statement	arg_info	4553:77:132629:132636	118028	16	True				
ANR	118950	Statement	->	4553:85:132637:132638	118028	17	True				
ANR	118951	Statement	type_hint	4553:87:132639:132647	118028	18	True				
ANR	118952	Statement	)	4553:96:132648:132648	118028	19	True				
ANR	118953	Statement	)	4553:97:132649:132649	118028	20	True				
ANR	118954	ExpressionStatement		4553:98:132650:132650	118028	21	True				
ANR	118955	BreakStatement	break ;	4555:7:132668:132673	118028	5	True				
ANR	118956	IfStatement	if ( opline -> opcode == ZEND_RECV_INIT )		118028	5					
ANR	118957	Condition	opline -> opcode == ZEND_RECV_INIT	4561:7:132768:132799	118028	0	True				
ANR	118958	EqualityExpression	opline -> opcode == ZEND_RECV_INIT		118028	0		==			
ANR	118959	PtrMemberAccess	opline -> opcode		118028	0					
ANR	118960	Identifier	opline		118028	0					
ANR	118961	Identifier	opcode		118028	1					
ANR	118962	Identifier	ZEND_RECV_INIT		118028	1					
ANR	118963	CompoundStatement		150:41:5436:5436	118028	1					
ANR	118964	IfStatement	if ( arg_info -> class_name )		118028	0					
ANR	118965	Condition	arg_info -> class_name	4562:8:132812:132831	118028	0	True				
ANR	118966	PtrMemberAccess	arg_info -> class_name		118028	0					
ANR	118967	Identifier	arg_info		118028	0					
ANR	118968	Identifier	class_name		118028	1					
ANR	118969	CompoundStatement		151:30:5468:5468	118028	1					
ANR	118970	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	4563:5:132841:132884	118028	0	True				
ANR	118971	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		118028	0					
ANR	118972	Callee	zend_alloc_cache_slot		118028	0					
ANR	118973	Identifier	zend_alloc_cache_slot		118028	0					
ANR	118974	ArgumentList	opline -> op2 . constant		118028	1					
ANR	118975	Argument	opline -> op2 . constant		118028	0					
ANR	118976	MemberAccess	opline -> op2 . constant		118028	0					
ANR	118977	PtrMemberAccess	opline -> op2		118028	0					
ANR	118978	Identifier	opline		118028	0					
ANR	118979	Identifier	op2		118028	1					
ANR	118980	Identifier	constant		118028	1					
ANR	118981	ElseStatement	else		118028	0					
ANR	118982	CompoundStatement		153:11:5531:5531	118028	0					
ANR	118983	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] ) = - 1	4565:5:132904:132963	118028	0	True				
ANR	118984	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] ) = - 1		118028	0		=			
ANR	118985	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] )		118028	0					
ANR	118986	Callee	Z_CACHE_SLOT		118028	0					
ANR	118987	Identifier	Z_CACHE_SLOT		118028	0					
ANR	118988	ArgumentList	op_array -> literals [ opline -> op2 . constant ]		118028	1					
ANR	118989	Argument	op_array -> literals [ opline -> op2 . constant ]		118028	0					
ANR	118990	ArrayIndexing	op_array -> literals [ opline -> op2 . constant ]		118028	0					
ANR	118991	PtrMemberAccess	op_array -> literals		118028	0					
ANR	118992	Identifier	op_array		118028	0					
ANR	118993	Identifier	literals		118028	1					
ANR	118994	MemberAccess	opline -> op2 . constant		118028	1					
ANR	118995	PtrMemberAccess	opline -> op2		118028	0					
ANR	118996	Identifier	opline		118028	0					
ANR	118997	Identifier	op2		118028	1					
ANR	118998	Identifier	constant		118028	1					
ANR	118999	UnaryOperationExpression	- 1		118028	1					
ANR	119000	UnaryOperator	-		118028	0					
ANR	119001	PrimaryExpression	1		118028	1					
ANR	119002	ElseStatement	else		118028	0					
ANR	119003	CompoundStatement		156:10:5615:5615	118028	0					
ANR	119004	IfStatement	if ( arg_info -> class_name )		118028	0					
ANR	119005	Condition	arg_info -> class_name	4568:8:132991:133010	118028	0	True				
ANR	119006	PtrMemberAccess	arg_info -> class_name		118028	0					
ANR	119007	Identifier	arg_info		118028	0					
ANR	119008	Identifier	class_name		118028	1					
ANR	119009	CompoundStatement		157:30:5647:5647	118028	1					
ANR	119010	ExpressionStatement	opline -> op2 . num = op_array -> cache_size	4569:5:133020:133058	118028	0	True				
ANR	119011	AssignmentExpression	opline -> op2 . num = op_array -> cache_size		118028	0		=			
ANR	119012	MemberAccess	opline -> op2 . num		118028	0					
ANR	119013	PtrMemberAccess	opline -> op2		118028	0					
ANR	119014	Identifier	opline		118028	0					
ANR	119015	Identifier	op2		118028	1					
ANR	119016	Identifier	num		118028	1					
ANR	119017	PtrMemberAccess	op_array -> cache_size		118028	1					
ANR	119018	Identifier	op_array		118028	0					
ANR	119019	Identifier	cache_size		118028	1					
ANR	119020	ExpressionStatement	op_array -> cache_size += sizeof ( void * )	4570:5:133065:133102	118028	1	True				
ANR	119021	AssignmentExpression	op_array -> cache_size += sizeof ( void * )		118028	0		+=			
ANR	119022	PtrMemberAccess	op_array -> cache_size		118028	0					
ANR	119023	Identifier	op_array		118028	0					
ANR	119024	Identifier	cache_size		118028	1					
ANR	119025	SizeofExpression	sizeof ( void * )		118028	1					
ANR	119026	Sizeof	sizeof		118028	0					
ANR	119027	SizeofOperand	void *		118028	1					
ANR	119028	ElseStatement	else		118028	0					
ANR	119029	CompoundStatement		160:11:5749:5749	118028	0					
ANR	119030	ExpressionStatement	opline -> op2 . num = - 1	4572:5:133122:133142	118028	0	True				
ANR	119031	AssignmentExpression	opline -> op2 . num = - 1		118028	0		=			
ANR	119032	MemberAccess	opline -> op2 . num		118028	0					
ANR	119033	PtrMemberAccess	opline -> op2		118028	0					
ANR	119034	Identifier	opline		118028	0					
ANR	119035	Identifier	op2		118028	1					
ANR	119036	Identifier	num		118028	1					
ANR	119037	UnaryOperationExpression	- 1		118028	1					
ANR	119038	UnaryOperator	-		118028	0					
ANR	119039	PrimaryExpression	1		118028	1					
ANR	119040	ElseStatement	else		118028	0					
ANR	119041	CompoundStatement		164:9:5798:5798	118028	0					
ANR	119042	IfStatement	if ( opline -> opcode == ZEND_RECV_INIT )		118028	0					
ANR	119043	Condition	opline -> opcode == ZEND_RECV_INIT	4576:7:133173:133204	118028	0	True				
ANR	119044	EqualityExpression	opline -> opcode == ZEND_RECV_INIT		118028	0		==			
ANR	119045	PtrMemberAccess	opline -> opcode		118028	0					
ANR	119046	Identifier	opline		118028	0					
ANR	119047	Identifier	opcode		118028	1					
ANR	119048	Identifier	ZEND_RECV_INIT		118028	1					
ANR	119049	CompoundStatement		165:41:5841:5841	118028	1					
ANR	119050	ExpressionStatement	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] ) = - 1	4577:4:133213:133272	118028	0	True				
ANR	119051	AssignmentExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] ) = - 1		118028	0		=			
ANR	119052	CallExpression	Z_CACHE_SLOT ( op_array -> literals [ opline -> op2 . constant ] )		118028	0					
ANR	119053	Callee	Z_CACHE_SLOT		118028	0					
ANR	119054	Identifier	Z_CACHE_SLOT		118028	0					
ANR	119055	ArgumentList	op_array -> literals [ opline -> op2 . constant ]		118028	1					
ANR	119056	Argument	op_array -> literals [ opline -> op2 . constant ]		118028	0					
ANR	119057	ArrayIndexing	op_array -> literals [ opline -> op2 . constant ]		118028	0					
ANR	119058	PtrMemberAccess	op_array -> literals		118028	0					
ANR	119059	Identifier	op_array		118028	0					
ANR	119060	Identifier	literals		118028	1					
ANR	119061	MemberAccess	opline -> op2 . constant		118028	1					
ANR	119062	PtrMemberAccess	opline -> op2		118028	0					
ANR	119063	Identifier	opline		118028	0					
ANR	119064	Identifier	op2		118028	1					
ANR	119065	Identifier	constant		118028	1					
ANR	119066	UnaryOperationExpression	- 1		118028	1					
ANR	119067	UnaryOperator	-		118028	0					
ANR	119068	PrimaryExpression	1		118028	1					
ANR	119069	ElseStatement	else		118028	0					
ANR	119070	CompoundStatement		167:10:5918:5918	118028	0					
ANR	119071	ExpressionStatement	opline -> op2 . num = - 1	4579:4:133290:133310	118028	0	True				
ANR	119072	AssignmentExpression	opline -> op2 . num = - 1		118028	0		=			
ANR	119073	MemberAccess	opline -> op2 . num		118028	0					
ANR	119074	PtrMemberAccess	opline -> op2		118028	0					
ANR	119075	Identifier	opline		118028	0					
ANR	119076	Identifier	op2		118028	1					
ANR	119077	Identifier	num		118028	1					
ANR	119078	UnaryOperationExpression	- 1		118028	1					
ANR	119079	UnaryOperator	-		118028	0					
ANR	119080	PrimaryExpression	1		118028	1					
ANR	119081	ExpressionStatement	op_array -> num_args = list -> children	4585:1:133412:133447	118028	6	True				
ANR	119082	AssignmentExpression	op_array -> num_args = list -> children		118028	0		=			
ANR	119083	PtrMemberAccess	op_array -> num_args		118028	0					
ANR	119084	Identifier	op_array		118028	0					
ANR	119085	Identifier	num_args		118028	1					
ANR	119086	PtrMemberAccess	list -> children		118028	1					
ANR	119087	Identifier	list		118028	0					
ANR	119088	Identifier	children		118028	1					
ANR	119089	ExpressionStatement	op_array -> arg_info = arg_infos	4586:1:133450:133480	118028	7	True				
ANR	119090	AssignmentExpression	op_array -> arg_info = arg_infos		118028	0		=			
ANR	119091	PtrMemberAccess	op_array -> arg_info		118028	0					
ANR	119092	Identifier	op_array		118028	0					
ANR	119093	Identifier	arg_info		118028	1					
ANR	119094	Identifier	arg_infos		118028	1					
ANR	119095	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_VARIADIC )		118028	8					
ANR	119096	Condition	op_array -> fn_flags & ZEND_ACC_VARIADIC	4589:5:133529:133566	118028	0	True				
ANR	119097	BitAndExpression	op_array -> fn_flags & ZEND_ACC_VARIADIC		118028	0		&			
ANR	119098	PtrMemberAccess	op_array -> fn_flags		118028	0					
ANR	119099	Identifier	op_array		118028	0					
ANR	119100	Identifier	fn_flags		118028	1					
ANR	119101	Identifier	ZEND_ACC_VARIADIC		118028	1					
ANR	119102	CompoundStatement		178:45:6203:6203	118028	1					
ANR	119103	ExpressionStatement	op_array -> num_args --	4590:2:133573:133593	118028	0	True				
ANR	119104	PostIncDecOperationExpression	op_array -> num_args --		118028	0					
ANR	119105	PtrMemberAccess	op_array -> num_args		118028	0					
ANR	119106	Identifier	op_array		118028	0					
ANR	119107	Identifier	num_args		118028	1					
ANR	119108	IncDec	--		118028	1					
ANR	119109	ExpressionStatement	zend_set_function_arg_flags ( ( zend_function * ) op_array )	4592:1:133599:133652	118028	9	True				
ANR	119110	CallExpression	zend_set_function_arg_flags ( ( zend_function * ) op_array )		118028	0					
ANR	119111	Callee	zend_set_function_arg_flags		118028	0					
ANR	119112	Identifier	zend_set_function_arg_flags		118028	0					
ANR	119113	ArgumentList	( zend_function * ) op_array		118028	1					
ANR	119114	Argument	( zend_function * ) op_array		118028	0					
ANR	119115	CastExpression	( zend_function * ) op_array		118028	0					
ANR	119116	CastTarget	zend_function *		118028	0					
ANR	119117	Identifier	op_array		118028	1					
ANR	119118	ReturnType	void		118028	1					
ANR	119119	Identifier	zend_compile_params		118028	2					
ANR	119120	ParameterList	"zend_ast * ast , zend_ast * return_type_ast"		118028	3					
ANR	119121	Parameter	zend_ast * ast	4411:25:127313:127325	118028	0	True				
ANR	119122	ParameterType	zend_ast *		118028	0					
ANR	119123	Identifier	ast		118028	1					
ANR	119124	Parameter	zend_ast * return_type_ast	4411:40:127328:127352	118028	1	True				
ANR	119125	ParameterType	zend_ast *		118028	0					
ANR	119126	Identifier	return_type_ast		118028	1					
ANR	119127	CFGEntryNode	ENTRY		118028		True				
ANR	119128	CFGExitNode	EXIT		118028		True				
ANR	119129	Symbol	zend_string_equals_literal		118028						
ANR	119130	Symbol	ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION		118028						
ANR	119131	Symbol	Z_TYPE		118028						
ANR	119132	Symbol	ZEND_PARAM_REF		118028						
ANR	119133	Symbol	arg_info -> is_variadic		118028						
ANR	119134	Symbol	* opline -> op2		118028						
ANR	119135	Symbol	ZEND_RECV		118028						
ANR	119136	Symbol	default_node . u . constant		118028						
ANR	119137	Symbol	arg_info -> class_name		118028						
ANR	119138	Symbol	& default_node . u . constant		118028						
ANR	119139	Symbol	IS_CONSTANT		118028						
ANR	119140	Symbol	IS_CONST		118028						
ANR	119141	Symbol	arg_info -> pass_by_reference		118028						
ANR	119142	Symbol	* op_array		118028						
ANR	119143	Symbol	ZEND_RECV_VARIADIC		118028						
ANR	119144	Symbol	ZEND_ACC_VARIADIC		118028						
ANR	119145	Symbol	ZEND_SAME_FAKE_TYPE		118028						
ANR	119146	Symbol	arg_info -> name		118028						
ANR	119147	Symbol	var_node . u . op . var		118028						
ANR	119148	Symbol	default_node . op_type		118028						
ANR	119149	Symbol	* * op_array		118028						
ANR	119150	Symbol	list -> children		118028						
ANR	119151	Symbol	zend_emit_op		118028						
ANR	119152	Symbol	cops		118028						
ANR	119153	Symbol	* arg_infos		118028						
ANR	119154	Symbol	ZEND_AST_TYPE		118028						
ANR	119155	Symbol	type_ast		118028						
ANR	119156	Symbol	ZEND_RECV_INIT		118028						
ANR	119157	Symbol	is_ref		118028						
ANR	119158	Symbol	* param_ast -> child		118028						
ANR	119159	Symbol	IS_ARRAY		118028						
ANR	119160	Symbol	ZEND_PARAM_VARIADIC		118028						
ANR	119161	Symbol	arg_infos -> is_variadic		118028						
ANR	119162	Symbol	* * opline		118028						
ANR	119163	Symbol	* opline -> op2 . constant		118028						
ANR	119164	Symbol	EX_VAR_TO_NUM		118028						
ANR	119165	Symbol	CG		118028						
ANR	119166	Symbol	list -> child		118028						
ANR	119167	Symbol	active_op_array		118028						
ANR	119168	Symbol	zend_is_auto_global		118028						
ANR	119169	Symbol	return_type_ast		118028						
ANR	119170	Symbol	i		118028						
ANR	119171	Symbol	var_ast		118028						
ANR	119172	Symbol	& default_node		118028						
ANR	119173	Symbol	* opline		118028						
ANR	119174	Symbol	* list		118028						
ANR	119175	Symbol	* param_ast		118028						
ANR	119176	Symbol	opline -> op2 . constant		118028						
ANR	119177	Symbol	Z_CACHE_SLOT		118028						
ANR	119178	Symbol	default_node		118028						
ANR	119179	Symbol	* type_ast		118028						
ANR	119180	Symbol	safe_emalloc		118028						
ANR	119181	Symbol	default_ast		118028						
ANR	119182	Symbol	op_array		118028						
ANR	119183	Symbol	& default_node . u		118028						
ANR	119184	Symbol	ast		118028						
ANR	119185	Symbol	IS_CV		118028						
ANR	119186	Symbol	arg_info -> type_hint		118028						
ANR	119187	Symbol	* * param_ast		118028						
ANR	119188	Symbol	var_node . u		118028						
ANR	119189	Symbol	E_COMPILE_ERROR		118028						
ANR	119190	Symbol	opcode		118028						
ANR	119191	Symbol	opline -> result		118028						
ANR	119192	Symbol	* op_array -> literals		118028						
ANR	119193	Symbol	* arg_info		118028						
ANR	119194	Symbol	arg_infos -> pass_by_reference		118028						
ANR	119195	Symbol	op_array -> fn_flags		118028						
ANR	119196	Symbol	opline		118028						
ANR	119197	Symbol	op_array -> num_args		118028						
ANR	119198	Symbol	default_node . u		118028						
ANR	119199	Symbol	strcasecmp		118028						
ANR	119200	Symbol	is_variadic		118028						
ANR	119201	Symbol	NULL		118028						
ANR	119202	Symbol	op_array -> this_var		118028						
ANR	119203	Symbol	& var_node		118028						
ANR	119204	Symbol	arg_infos -> allow_null		118028						
ANR	119205	Symbol	param_ast		118028						
ANR	119206	Symbol	zend_string_copy		118028						
ANR	119207	Symbol	list		118028						
ANR	119208	Symbol	arg_infos		118028						
ANR	119209	Symbol	arg_info -> allow_null		118028						
ANR	119210	Symbol	op_array -> literals		118028						
ANR	119211	Symbol	name		118028						
ANR	119212	Symbol	* list -> child		118028						
ANR	119213	Symbol	opline -> op1 . num		118028						
ANR	119214	Symbol	op_array -> cache_size		118028						
ANR	119215	Symbol	param_ast -> attr		118028						
ANR	119216	Symbol	opline -> op1		118028						
ANR	119217	Symbol	opline -> op2		118028						
ANR	119218	Symbol	arg_infos -> name		118028						
ANR	119219	Symbol	lookup_cv		118028						
ANR	119220	Symbol	ZEND_ACC_HAS_TYPE_HINTS		118028						
ANR	119221	Symbol	compiler_options		118028						
ANR	119222	Symbol	* * list		118028						
ANR	119223	Symbol	zend_ast_get_str		118028						
ANR	119224	Symbol	op_array -> required_num_args		118028						
ANR	119225	Symbol	var_node . u . op		118028						
ANR	119226	Symbol	IS_NULL		118028						
ANR	119227	Symbol	IS_LONG		118028						
ANR	119228	Symbol	Z_STRVAL		118028						
ANR	119229	Symbol	ZEND_ACC_STATIC		118028						
ANR	119230	Symbol	var_node . op_type		118028						
ANR	119231	Symbol	ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION		118028						
ANR	119232	Symbol	IS_CALLABLE		118028						
ANR	119233	Symbol	opline -> op2 . num		118028						
ANR	119234	Symbol	var_node		118028						
ANR	119235	Symbol	ZEND_ACC_HAS_RETURN_TYPE		118028						
ANR	119236	Symbol	Z_CONSTANT		118028						
ANR	119237	Symbol	op_array -> scope		118028						
ANR	119238	Symbol	ZSTR_VAL		118028						
ANR	119239	Symbol	param_ast -> child		118028						
ANR	119240	Symbol	arg_info		118028						
ANR	119241	Symbol	has_null_default		118028						
ANR	119242	Symbol	zend_ast_get_list		118028						
ANR	119243	Symbol	arg_infos -> type_hint		118028						
ANR	119244	Symbol	arg_infos -> class_name		118028						
ANR	119245	Symbol	* i		118028						
ANR	119246	Symbol	opline -> opcode		118028						
ANR	119247	Symbol	ZEND_ACC_RETURN_REFERENCE		118028						
ANR	119248	Symbol	IS_DOUBLE		118028						
ANR	119249	Symbol	type_ast -> kind		118028						
ANR	119250	Symbol	op_array -> arg_info		118028						
ANR	119251	Symbol	IS_UNUSED		118028						
ANR	119252	Function	zend_compile_closure_uses	4596:0:133667:134239							
ANR	119253	FunctionDef	zend_compile_closure_uses (zend_ast * ast)		119252	0					
ANR	119254	CompoundStatement		4597:0:133723:134239	119252	0					
ANR	119255	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	4598:1:133726:133770	119252	0	True				
ANR	119256	IdentifierDecl	* list = zend_ast_get_list ( ast )		119252	0					
ANR	119257	IdentifierDeclType	zend_ast_list *		119252	0					
ANR	119258	Identifier	list		119252	1					
ANR	119259	AssignmentExpression	* list = zend_ast_get_list ( ast )		119252	2		=			
ANR	119260	Identifier	list		119252	0					
ANR	119261	CallExpression	zend_ast_get_list ( ast )		119252	1					
ANR	119262	Callee	zend_ast_get_list		119252	0					
ANR	119263	Identifier	zend_ast_get_list		119252	0					
ANR	119264	ArgumentList	ast		119252	1					
ANR	119265	Argument	ast		119252	0					
ANR	119266	Identifier	ast		119252	0					
ANR	119267	IdentifierDeclStatement	uint32_t i ;	4599:1:133773:133783	119252	1	True				
ANR	119268	IdentifierDecl	i		119252	0					
ANR	119269	IdentifierDeclType	uint32_t		119252	0					
ANR	119270	Identifier	i		119252	1					
ANR	119271	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		119252	2					
ANR	119272	ForInit	i = 0 ;	4601:6:133792:133797	119252	0	True				
ANR	119273	AssignmentExpression	i = 0		119252	0		=			
ANR	119274	Identifier	i		119252	0					
ANR	119275	PrimaryExpression	0		119252	1					
ANR	119276	Condition	i < list -> children	4601:13:133799:133816	119252	1	True				
ANR	119277	RelationalExpression	i < list -> children		119252	0		<			
ANR	119278	Identifier	i		119252	0					
ANR	119279	PtrMemberAccess	list -> children		119252	1					
ANR	119280	Identifier	list		119252	0					
ANR	119281	Identifier	children		119252	1					
ANR	119282	UnaryExpression	++ i	4601:33:133819:133821	119252	2	True				
ANR	119283	IncDec	++		119252	0					
ANR	119284	Identifier	i		119252	1					
ANR	119285	CompoundStatement		9:2:227:234	119252	3					
ANR	119286	IdentifierDeclStatement	zend_ast * var_ast = list -> child [ i ] ;	4602:2:133828:133862	119252	0	True				
ANR	119287	IdentifierDecl	* var_ast = list -> child [ i ]		119252	0					
ANR	119288	IdentifierDeclType	zend_ast *		119252	0					
ANR	119289	Identifier	var_ast		119252	1					
ANR	119290	AssignmentExpression	* var_ast = list -> child [ i ]		119252	2		=			
ANR	119291	Identifier	var_ast		119252	0					
ANR	119292	ArrayIndexing	list -> child [ i ]		119252	1					
ANR	119293	PtrMemberAccess	list -> child		119252	0					
ANR	119294	Identifier	list		119252	0					
ANR	119295	Identifier	child		119252	1					
ANR	119296	Identifier	i		119252	1					
ANR	119297	IdentifierDeclStatement	zend_string * name = zend_ast_get_str ( var_ast ) ;	4603:2:133866:133911	119252	1	True				
ANR	119298	IdentifierDecl	* name = zend_ast_get_str ( var_ast )		119252	0					
ANR	119299	IdentifierDeclType	zend_string *		119252	0					
ANR	119300	Identifier	name		119252	1					
ANR	119301	AssignmentExpression	* name = zend_ast_get_str ( var_ast )		119252	2		=			
ANR	119302	Identifier	name		119252	0					
ANR	119303	CallExpression	zend_ast_get_str ( var_ast )		119252	1					
ANR	119304	Callee	zend_ast_get_str		119252	0					
ANR	119305	Identifier	zend_ast_get_str		119252	0					
ANR	119306	ArgumentList	var_ast		119252	1					
ANR	119307	Argument	var_ast		119252	0					
ANR	119308	Identifier	var_ast		119252	0					
ANR	119309	IdentifierDeclStatement	zend_bool by_ref = var_ast -> attr ;	4604:2:133915:133947	119252	2	True				
ANR	119310	IdentifierDecl	by_ref = var_ast -> attr		119252	0					
ANR	119311	IdentifierDeclType	zend_bool		119252	0					
ANR	119312	Identifier	by_ref		119252	1					
ANR	119313	AssignmentExpression	by_ref = var_ast -> attr		119252	2		=			
ANR	119314	Identifier	by_ref		119252	0					
ANR	119315	PtrMemberAccess	var_ast -> attr		119252	1					
ANR	119316	Identifier	var_ast		119252	0					
ANR	119317	Identifier	attr		119252	1					
ANR	119318	IdentifierDeclStatement	zval zv ;	4605:2:133951:133958	119252	3	True				
ANR	119319	IdentifierDecl	zv		119252	0					
ANR	119320	IdentifierDeclType	zval		119252	0					
ANR	119321	Identifier	zv		119252	1					
ANR	119322	IfStatement	"if ( zend_string_equals_literal ( name , ""this"" ) )"		119252	4					
ANR	119323	Condition	"zend_string_equals_literal ( name , ""this"" )"	4607:6:133967:134006	119252	0	True				
ANR	119324	CallExpression	"zend_string_equals_literal ( name , ""this"" )"		119252	0					
ANR	119325	Callee	zend_string_equals_literal		119252	0					
ANR	119326	Identifier	zend_string_equals_literal		119252	0					
ANR	119327	ArgumentList	name		119252	1					
ANR	119328	Argument	name		119252	0					
ANR	119329	Identifier	name		119252	0					
ANR	119330	Argument	"""this"""		119252	1					
ANR	119331	PrimaryExpression	"""this"""		119252	0					
ANR	119332	CompoundStatement		11:48:285:285	119252	1					
ANR	119333	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use $this as lexical variable"" )"	4608:3:134014:134090	119252	0	True				
ANR	119334	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use $this as lexical variable"" )"		119252	0					
ANR	119335	Callee	zend_error_noreturn		119252	0					
ANR	119336	Identifier	zend_error_noreturn		119252	0					
ANR	119337	ArgumentList	E_COMPILE_ERROR		119252	1					
ANR	119338	Argument	E_COMPILE_ERROR		119252	0					
ANR	119339	Identifier	E_COMPILE_ERROR		119252	0					
ANR	119340	Argument	"""Cannot use $this as lexical variable"""		119252	1					
ANR	119341	PrimaryExpression	"""Cannot use $this as lexical variable"""		119252	0					
ANR	119342	ExpressionStatement	ZVAL_NULL ( & zv )	4611:2:134099:134113	119252	5	True				
ANR	119343	CallExpression	ZVAL_NULL ( & zv )		119252	0					
ANR	119344	Callee	ZVAL_NULL		119252	0					
ANR	119345	Identifier	ZVAL_NULL		119252	0					
ANR	119346	ArgumentList	& zv		119252	1					
ANR	119347	Argument	& zv		119252	0					
ANR	119348	UnaryOperationExpression	& zv		119252	0					
ANR	119349	UnaryOperator	&		119252	0					
ANR	119350	Identifier	zv		119252	1					
ANR	119351	ExpressionStatement	Z_CONST_FLAGS ( zv ) = by_ref ? IS_LEXICAL_REF : IS_LEXICAL_VAR	4612:2:134117:134177	119252	6	True				
ANR	119352	AssignmentExpression	Z_CONST_FLAGS ( zv ) = by_ref ? IS_LEXICAL_REF : IS_LEXICAL_VAR		119252	0		=			
ANR	119353	CallExpression	Z_CONST_FLAGS ( zv )		119252	0					
ANR	119354	Callee	Z_CONST_FLAGS		119252	0					
ANR	119355	Identifier	Z_CONST_FLAGS		119252	0					
ANR	119356	ArgumentList	zv		119252	1					
ANR	119357	Argument	zv		119252	0					
ANR	119358	Identifier	zv		119252	0					
ANR	119359	ConditionalExpression	by_ref ? IS_LEXICAL_REF : IS_LEXICAL_VAR		119252	1					
ANR	119360	Condition	by_ref		119252	0					
ANR	119361	Identifier	by_ref		119252	0					
ANR	119362	Identifier	IS_LEXICAL_REF		119252	1					
ANR	119363	Identifier	IS_LEXICAL_VAR		119252	2					
ANR	119364	ExpressionStatement	"zend_compile_static_var_common ( var_ast , & zv , by_ref )"	4614:2:134182:134234	119252	7	True				
ANR	119365	CallExpression	"zend_compile_static_var_common ( var_ast , & zv , by_ref )"		119252	0					
ANR	119366	Callee	zend_compile_static_var_common		119252	0					
ANR	119367	Identifier	zend_compile_static_var_common		119252	0					
ANR	119368	ArgumentList	var_ast		119252	1					
ANR	119369	Argument	var_ast		119252	0					
ANR	119370	Identifier	var_ast		119252	0					
ANR	119371	Argument	& zv		119252	1					
ANR	119372	UnaryOperationExpression	& zv		119252	0					
ANR	119373	UnaryOperator	&		119252	0					
ANR	119374	Identifier	zv		119252	1					
ANR	119375	Argument	by_ref		119252	2					
ANR	119376	Identifier	by_ref		119252	0					
ANR	119377	ReturnType	void		119252	1					
ANR	119378	Identifier	zend_compile_closure_uses		119252	2					
ANR	119379	ParameterList	zend_ast * ast		119252	3					
ANR	119380	Parameter	zend_ast * ast	4596:31:133698:133710	119252	0	True				
ANR	119381	ParameterType	zend_ast *		119252	0					
ANR	119382	Identifier	ast		119252	1					
ANR	119383	CFGEntryNode	ENTRY		119252		True				
ANR	119384	CFGExitNode	EXIT		119252		True				
ANR	119385	Symbol	zend_string_equals_literal		119252						
ANR	119386	Symbol	ast		119252						
ANR	119387	Symbol	list -> child		119252						
ANR	119388	Symbol	Z_CONST_FLAGS		119252						
ANR	119389	Symbol	E_COMPILE_ERROR		119252						
ANR	119390	Symbol	& zv		119252						
ANR	119391	Symbol	i		119252						
ANR	119392	Symbol	list		119252						
ANR	119393	Symbol	* var_ast		119252						
ANR	119394	Symbol	IS_LEXICAL_VAR		119252						
ANR	119395	Symbol	zend_ast_get_list		119252						
ANR	119396	Symbol	var_ast		119252						
ANR	119397	Symbol	* i		119252						
ANR	119398	Symbol	* * list		119252						
ANR	119399	Symbol	zend_ast_get_str		119252						
ANR	119400	Symbol	* list		119252						
ANR	119401	Symbol	name		119252						
ANR	119402	Symbol	IS_LEXICAL_REF		119252						
ANR	119403	Symbol	* list -> child		119252						
ANR	119404	Symbol	by_ref		119252						
ANR	119405	Symbol	zv		119252						
ANR	119406	Symbol	list -> children		119252						
ANR	119407	Symbol	var_ast -> attr		119252						
ANR	119408	Function	zend_begin_method_decl	4619:0:134252:141261							
ANR	119409	FunctionDef	"zend_begin_method_decl (zend_op_array * op_array , zend_string * name , zend_bool has_body)"		119408	0					
ANR	119410	CompoundStatement		4620:0:134354:141261	119408	0					
ANR	119411	IdentifierDeclStatement	zend_class_entry * ce = CG ( active_class_entry ) ;	4621:1:134357:134402	119408	0	True				
ANR	119412	IdentifierDecl	* ce = CG ( active_class_entry )		119408	0					
ANR	119413	IdentifierDeclType	zend_class_entry *		119408	0					
ANR	119414	Identifier	ce		119408	1					
ANR	119415	AssignmentExpression	* ce = CG ( active_class_entry )		119408	2		=			
ANR	119416	Identifier	ce		119408	0					
ANR	119417	CallExpression	CG ( active_class_entry )		119408	1					
ANR	119418	Callee	CG		119408	0					
ANR	119419	Identifier	CG		119408	0					
ANR	119420	ArgumentList	active_class_entry		119408	1					
ANR	119421	Argument	active_class_entry		119408	0					
ANR	119422	Identifier	active_class_entry		119408	0					
ANR	119423	IdentifierDeclStatement	zend_bool in_interface = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) != 0 ;	4622:1:134405:134470	119408	1	True				
ANR	119424	IdentifierDecl	in_interface = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) != 0		119408	0					
ANR	119425	IdentifierDeclType	zend_bool		119408	0					
ANR	119426	Identifier	in_interface		119408	1					
ANR	119427	AssignmentExpression	in_interface = ( ce -> ce_flags & ZEND_ACC_INTERFACE ) != 0		119408	2		=			
ANR	119428	Identifier	in_interface		119408	0					
ANR	119429	EqualityExpression	( ce -> ce_flags & ZEND_ACC_INTERFACE ) != 0		119408	1		!=			
ANR	119430	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		119408	0		&			
ANR	119431	PtrMemberAccess	ce -> ce_flags		119408	0					
ANR	119432	Identifier	ce		119408	0					
ANR	119433	Identifier	ce_flags		119408	1					
ANR	119434	Identifier	ZEND_ACC_INTERFACE		119408	1					
ANR	119435	PrimaryExpression	0		119408	1					
ANR	119436	IdentifierDeclStatement	zend_bool in_trait = ( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0 ;	4623:1:134473:134530	119408	2	True				
ANR	119437	IdentifierDecl	in_trait = ( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0		119408	0					
ANR	119438	IdentifierDeclType	zend_bool		119408	0					
ANR	119439	Identifier	in_trait		119408	1					
ANR	119440	AssignmentExpression	in_trait = ( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0		119408	2		=			
ANR	119441	Identifier	in_trait		119408	0					
ANR	119442	EqualityExpression	( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0		119408	1		!=			
ANR	119443	BitAndExpression	ce -> ce_flags & ZEND_ACC_TRAIT		119408	0		&			
ANR	119444	PtrMemberAccess	ce -> ce_flags		119408	0					
ANR	119445	Identifier	ce		119408	0					
ANR	119446	Identifier	ce_flags		119408	1					
ANR	119447	Identifier	ZEND_ACC_TRAIT		119408	1					
ANR	119448	PrimaryExpression	0		119408	1					
ANR	119449	IdentifierDeclStatement	zend_bool is_public = ( op_array -> fn_flags & ZEND_ACC_PUBLIC ) != 0 ;	4624:1:134533:134598	119408	3	True				
ANR	119450	IdentifierDecl	is_public = ( op_array -> fn_flags & ZEND_ACC_PUBLIC ) != 0		119408	0					
ANR	119451	IdentifierDeclType	zend_bool		119408	0					
ANR	119452	Identifier	is_public		119408	1					
ANR	119453	AssignmentExpression	is_public = ( op_array -> fn_flags & ZEND_ACC_PUBLIC ) != 0		119408	2		=			
ANR	119454	Identifier	is_public		119408	0					
ANR	119455	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_PUBLIC ) != 0		119408	1		!=			
ANR	119456	BitAndExpression	op_array -> fn_flags & ZEND_ACC_PUBLIC		119408	0		&			
ANR	119457	PtrMemberAccess	op_array -> fn_flags		119408	0					
ANR	119458	Identifier	op_array		119408	0					
ANR	119459	Identifier	fn_flags		119408	1					
ANR	119460	Identifier	ZEND_ACC_PUBLIC		119408	1					
ANR	119461	PrimaryExpression	0		119408	1					
ANR	119462	IdentifierDeclStatement	zend_bool is_static = ( op_array -> fn_flags & ZEND_ACC_STATIC ) != 0 ;	4625:1:134601:134666	119408	4	True				
ANR	119463	IdentifierDecl	is_static = ( op_array -> fn_flags & ZEND_ACC_STATIC ) != 0		119408	0					
ANR	119464	IdentifierDeclType	zend_bool		119408	0					
ANR	119465	Identifier	is_static		119408	1					
ANR	119466	AssignmentExpression	is_static = ( op_array -> fn_flags & ZEND_ACC_STATIC ) != 0		119408	2		=			
ANR	119467	Identifier	is_static		119408	0					
ANR	119468	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_STATIC ) != 0		119408	1		!=			
ANR	119469	BitAndExpression	op_array -> fn_flags & ZEND_ACC_STATIC		119408	0		&			
ANR	119470	PtrMemberAccess	op_array -> fn_flags		119408	0					
ANR	119471	Identifier	op_array		119408	0					
ANR	119472	Identifier	fn_flags		119408	1					
ANR	119473	Identifier	ZEND_ACC_STATIC		119408	1					
ANR	119474	PrimaryExpression	0		119408	1					
ANR	119475	IdentifierDeclStatement	zend_string * lcname ;	4627:1:134670:134689	119408	5	True				
ANR	119476	IdentifierDecl	* lcname		119408	0					
ANR	119477	IdentifierDeclType	zend_string *		119408	0					
ANR	119478	Identifier	lcname		119408	1					
ANR	119479	IfStatement	if ( in_interface )		119408	6					
ANR	119480	Condition	in_interface	4629:5:134697:134708	119408	0	True				
ANR	119481	Identifier	in_interface		119408	0					
ANR	119482	CompoundStatement		10:19:356:356	119408	1					
ANR	119483	IfStatement	if ( ( op_array -> fn_flags & ZEND_ACC_PPP_MASK ) != ZEND_ACC_PUBLIC )		119408	0					
ANR	119484	Condition	( op_array -> fn_flags & ZEND_ACC_PPP_MASK ) != ZEND_ACC_PUBLIC	4630:6:134719:134777	119408	0	True				
ANR	119485	EqualityExpression	( op_array -> fn_flags & ZEND_ACC_PPP_MASK ) != ZEND_ACC_PUBLIC		119408	0		!=			
ANR	119486	BitAndExpression	op_array -> fn_flags & ZEND_ACC_PPP_MASK		119408	0		&			
ANR	119487	PtrMemberAccess	op_array -> fn_flags		119408	0					
ANR	119488	Identifier	op_array		119408	0					
ANR	119489	Identifier	fn_flags		119408	1					
ANR	119490	Identifier	ZEND_ACC_PPP_MASK		119408	1					
ANR	119491	Identifier	ZEND_ACC_PUBLIC		119408	1					
ANR	119492	CompoundStatement		11:67:425:425	119408	1					
ANR	119493	Statement	zend_error_noreturn	4631:3:134785:134803	119408	0	True				
ANR	119494	Statement	(	4631:22:134804:134804	119408	1	True				
ANR	119495	Statement	E_COMPILE_ERROR	4631:23:134805:134819	119408	2	True				
ANR	119496	Statement	","	4631:38:134820:134820	119408	3	True				
ANR	119497	Statement	"""Access type for interface method """	4631:40:134822:134856	119408	4	True				
ANR	119498	Statement	"""%s::%s() must be omitted"""	4632:4:134862:134887	119408	5	True				
ANR	119499	Statement	","	4632:30:134888:134888	119408	6	True				
ANR	119500	Statement	ZSTR_VAL	4632:32:134890:134897	119408	7	True				
ANR	119501	Statement	(	4632:40:134898:134898	119408	8	True				
ANR	119502	Statement	ce	4632:41:134899:134900	119408	9	True				
ANR	119503	Statement	->	4632:43:134901:134902	119408	10	True				
ANR	119504	Statement	name	4632:45:134903:134906	119408	11	True				
ANR	119505	Statement	)	4632:49:134907:134907	119408	12	True				
ANR	119506	Statement	","	4632:50:134908:134908	119408	13	True				
ANR	119507	Statement	ZSTR_VAL	4632:52:134910:134917	119408	14	True				
ANR	119508	Statement	(	4632:60:134918:134918	119408	15	True				
ANR	119509	Statement	name	4632:61:134919:134922	119408	16	True				
ANR	119510	Statement	)	4632:65:134923:134923	119408	17	True				
ANR	119511	Statement	)	4632:66:134924:134924	119408	18	True				
ANR	119512	ExpressionStatement		4632:67:134925:134925	119408	19	True				
ANR	119513	ExpressionStatement	op_array -> fn_flags |= ZEND_ACC_ABSTRACT	4634:2:134933:134972	119408	1	True				
ANR	119514	AssignmentExpression	op_array -> fn_flags |= ZEND_ACC_ABSTRACT		119408	0		|=			
ANR	119515	PtrMemberAccess	op_array -> fn_flags		119408	0					
ANR	119516	Identifier	op_array		119408	0					
ANR	119517	Identifier	fn_flags		119408	1					
ANR	119518	Identifier	ZEND_ACC_ABSTRACT		119408	1					
ANR	119519	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_ABSTRACT )		119408	7					
ANR	119520	Condition	op_array -> fn_flags & ZEND_ACC_ABSTRACT	4637:5:134983:135020	119408	0	True				
ANR	119521	BitAndExpression	op_array -> fn_flags & ZEND_ACC_ABSTRACT		119408	0		&			
ANR	119522	PtrMemberAccess	op_array -> fn_flags		119408	0					
ANR	119523	Identifier	op_array		119408	0					
ANR	119524	Identifier	fn_flags		119408	1					
ANR	119525	Identifier	ZEND_ACC_ABSTRACT		119408	1					
ANR	119526	CompoundStatement		18:45:668:668	119408	1					
ANR	119527	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_PRIVATE )		119408	0					
ANR	119528	Condition	op_array -> fn_flags & ZEND_ACC_PRIVATE	4638:6:135031:135067	119408	0	True				
ANR	119529	BitAndExpression	op_array -> fn_flags & ZEND_ACC_PRIVATE		119408	0		&			
ANR	119530	PtrMemberAccess	op_array -> fn_flags		119408	0					
ANR	119531	Identifier	op_array		119408	0					
ANR	119532	Identifier	fn_flags		119408	1					
ANR	119533	Identifier	ZEND_ACC_PRIVATE		119408	1					
ANR	119534	CompoundStatement		19:45:715:715	119408	1					
ANR	119535	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s function %s::%s() cannot be declared private"" , in_interface ? ""Interface"" : ""Abstract"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"	4639:3:135075:135243	119408	0	True				
ANR	119536	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s function %s::%s() cannot be declared private"" , in_interface ? ""Interface"" : ""Abstract"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"		119408	0					
ANR	119537	Callee	zend_error_noreturn		119408	0					
ANR	119538	Identifier	zend_error_noreturn		119408	0					
ANR	119539	ArgumentList	E_COMPILE_ERROR		119408	1					
ANR	119540	Argument	E_COMPILE_ERROR		119408	0					
ANR	119541	Identifier	E_COMPILE_ERROR		119408	0					
ANR	119542	Argument	"""%s function %s::%s() cannot be declared private"""		119408	1					
ANR	119543	PrimaryExpression	"""%s function %s::%s() cannot be declared private"""		119408	0					
ANR	119544	Argument	"in_interface ? ""Interface"" : ""Abstract"""		119408	2					
ANR	119545	ConditionalExpression	"in_interface ? ""Interface"" : ""Abstract"""		119408	0					
ANR	119546	Condition	in_interface		119408	0					
ANR	119547	Identifier	in_interface		119408	0					
ANR	119548	PrimaryExpression	"""Interface"""		119408	1					
ANR	119549	PrimaryExpression	"""Abstract"""		119408	2					
ANR	119550	Argument	ZSTR_VAL ( ce -> name )		119408	3					
ANR	119551	CallExpression	ZSTR_VAL ( ce -> name )		119408	0					
ANR	119552	Callee	ZSTR_VAL		119408	0					
ANR	119553	Identifier	ZSTR_VAL		119408	0					
ANR	119554	ArgumentList	ce -> name		119408	1					
ANR	119555	Argument	ce -> name		119408	0					
ANR	119556	PtrMemberAccess	ce -> name		119408	0					
ANR	119557	Identifier	ce		119408	0					
ANR	119558	Identifier	name		119408	1					
ANR	119559	Argument	ZSTR_VAL ( name )		119408	4					
ANR	119560	CallExpression	ZSTR_VAL ( name )		119408	0					
ANR	119561	Callee	ZSTR_VAL		119408	0					
ANR	119562	Identifier	ZSTR_VAL		119408	0					
ANR	119563	ArgumentList	name		119408	1					
ANR	119564	Argument	name		119408	0					
ANR	119565	Identifier	name		119408	0					
ANR	119566	IfStatement	if ( has_body )		119408	1					
ANR	119567	Condition	has_body	4643:6:135256:135263	119408	0	True				
ANR	119568	Identifier	has_body		119408	0					
ANR	119569	CompoundStatement		24:16:911:911	119408	1					
ANR	119570	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s function %s::%s() cannot contain body"" , in_interface ? ""Interface"" : ""Abstract"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"	4644:3:135271:135432	119408	0	True				
ANR	119571	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s function %s::%s() cannot contain body"" , in_interface ? ""Interface"" : ""Abstract"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"		119408	0					
ANR	119572	Callee	zend_error_noreturn		119408	0					
ANR	119573	Identifier	zend_error_noreturn		119408	0					
ANR	119574	ArgumentList	E_COMPILE_ERROR		119408	1					
ANR	119575	Argument	E_COMPILE_ERROR		119408	0					
ANR	119576	Identifier	E_COMPILE_ERROR		119408	0					
ANR	119577	Argument	"""%s function %s::%s() cannot contain body"""		119408	1					
ANR	119578	PrimaryExpression	"""%s function %s::%s() cannot contain body"""		119408	0					
ANR	119579	Argument	"in_interface ? ""Interface"" : ""Abstract"""		119408	2					
ANR	119580	ConditionalExpression	"in_interface ? ""Interface"" : ""Abstract"""		119408	0					
ANR	119581	Condition	in_interface		119408	0					
ANR	119582	Identifier	in_interface		119408	0					
ANR	119583	PrimaryExpression	"""Interface"""		119408	1					
ANR	119584	PrimaryExpression	"""Abstract"""		119408	2					
ANR	119585	Argument	ZSTR_VAL ( ce -> name )		119408	3					
ANR	119586	CallExpression	ZSTR_VAL ( ce -> name )		119408	0					
ANR	119587	Callee	ZSTR_VAL		119408	0					
ANR	119588	Identifier	ZSTR_VAL		119408	0					
ANR	119589	ArgumentList	ce -> name		119408	1					
ANR	119590	Argument	ce -> name		119408	0					
ANR	119591	PtrMemberAccess	ce -> name		119408	0					
ANR	119592	Identifier	ce		119408	0					
ANR	119593	Identifier	name		119408	1					
ANR	119594	Argument	ZSTR_VAL ( name )		119408	4					
ANR	119595	CallExpression	ZSTR_VAL ( name )		119408	0					
ANR	119596	Callee	ZSTR_VAL		119408	0					
ANR	119597	Identifier	ZSTR_VAL		119408	0					
ANR	119598	ArgumentList	name		119408	1					
ANR	119599	Argument	name		119408	0					
ANR	119600	Identifier	name		119408	0					
ANR	119601	ExpressionStatement	ce -> ce_flags |= ZEND_ACC_IMPLICIT_ABSTRACT_CLASS	4648:2:135441:135489	119408	2	True				
ANR	119602	AssignmentExpression	ce -> ce_flags |= ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		119408	0		|=			
ANR	119603	PtrMemberAccess	ce -> ce_flags		119408	0					
ANR	119604	Identifier	ce		119408	0					
ANR	119605	Identifier	ce_flags		119408	1					
ANR	119606	Identifier	ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		119408	1					
ANR	119607	ElseStatement	else		119408	0					
ANR	119608	IfStatement	if ( ! has_body )		119408	0					
ANR	119609	Condition	! has_body	4649:12:135503:135511	119408	0	True				
ANR	119610	UnaryOperationExpression	! has_body		119408	0					
ANR	119611	UnaryOperator	!		119408	0					
ANR	119612	Identifier	has_body		119408	1					
ANR	119613	CompoundStatement		30:23:1159:1159	119408	1					
ANR	119614	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Non-abstract method %s::%s() must contain body"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"	4650:2:135518:135643	119408	0	True				
ANR	119615	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Non-abstract method %s::%s() must contain body"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"		119408	0					
ANR	119616	Callee	zend_error_noreturn		119408	0					
ANR	119617	Identifier	zend_error_noreturn		119408	0					
ANR	119618	ArgumentList	E_COMPILE_ERROR		119408	1					
ANR	119619	Argument	E_COMPILE_ERROR		119408	0					
ANR	119620	Identifier	E_COMPILE_ERROR		119408	0					
ANR	119621	Argument	"""Non-abstract method %s::%s() must contain body"""		119408	1					
ANR	119622	PrimaryExpression	"""Non-abstract method %s::%s() must contain body"""		119408	0					
ANR	119623	Argument	ZSTR_VAL ( ce -> name )		119408	2					
ANR	119624	CallExpression	ZSTR_VAL ( ce -> name )		119408	0					
ANR	119625	Callee	ZSTR_VAL		119408	0					
ANR	119626	Identifier	ZSTR_VAL		119408	0					
ANR	119627	ArgumentList	ce -> name		119408	1					
ANR	119628	Argument	ce -> name		119408	0					
ANR	119629	PtrMemberAccess	ce -> name		119408	0					
ANR	119630	Identifier	ce		119408	0					
ANR	119631	Identifier	name		119408	1					
ANR	119632	Argument	ZSTR_VAL ( name )		119408	3					
ANR	119633	CallExpression	ZSTR_VAL ( name )		119408	0					
ANR	119634	Callee	ZSTR_VAL		119408	0					
ANR	119635	Identifier	ZSTR_VAL		119408	0					
ANR	119636	ArgumentList	name		119408	1					
ANR	119637	Argument	name		119408	0					
ANR	119638	Identifier	name		119408	0					
ANR	119639	ExpressionStatement	op_array -> scope = ce	4654:1:135650:135670	119408	8	True				
ANR	119640	AssignmentExpression	op_array -> scope = ce		119408	0		=			
ANR	119641	PtrMemberAccess	op_array -> scope		119408	0					
ANR	119642	Identifier	op_array		119408	0					
ANR	119643	Identifier	scope		119408	1					
ANR	119644	Identifier	ce		119408	1					
ANR	119645	ExpressionStatement	op_array -> function_name = zend_string_copy ( name )	4655:1:135673:135721	119408	9	True				
ANR	119646	AssignmentExpression	op_array -> function_name = zend_string_copy ( name )		119408	0		=			
ANR	119647	PtrMemberAccess	op_array -> function_name		119408	0					
ANR	119648	Identifier	op_array		119408	0					
ANR	119649	Identifier	function_name		119408	1					
ANR	119650	CallExpression	zend_string_copy ( name )		119408	1					
ANR	119651	Callee	zend_string_copy		119408	0					
ANR	119652	Identifier	zend_string_copy		119408	0					
ANR	119653	ArgumentList	name		119408	1					
ANR	119654	Argument	name		119408	0					
ANR	119655	Identifier	name		119408	0					
ANR	119656	ExpressionStatement	lcname = zend_string_tolower ( name )	4657:1:135725:135759	119408	10	True				
ANR	119657	AssignmentExpression	lcname = zend_string_tolower ( name )		119408	0		=			
ANR	119658	Identifier	lcname		119408	0					
ANR	119659	CallExpression	zend_string_tolower ( name )		119408	1					
ANR	119660	Callee	zend_string_tolower		119408	0					
ANR	119661	Identifier	zend_string_tolower		119408	0					
ANR	119662	ArgumentList	name		119408	1					
ANR	119663	Argument	name		119408	0					
ANR	119664	Identifier	name		119408	0					
ANR	119665	ExpressionStatement	lcname = zend_new_interned_string ( lcname )	4658:1:135762:135803	119408	11	True				
ANR	119666	AssignmentExpression	lcname = zend_new_interned_string ( lcname )		119408	0		=			
ANR	119667	Identifier	lcname		119408	0					
ANR	119668	CallExpression	zend_new_interned_string ( lcname )		119408	1					
ANR	119669	Callee	zend_new_interned_string		119408	0					
ANR	119670	Identifier	zend_new_interned_string		119408	0					
ANR	119671	ArgumentList	lcname		119408	1					
ANR	119672	Argument	lcname		119408	0					
ANR	119673	Identifier	lcname		119408	0					
ANR	119674	IfStatement	"if ( zend_hash_add_ptr ( & ce -> function_table , lcname , op_array ) == NULL )"		119408	12					
ANR	119675	Condition	"zend_hash_add_ptr ( & ce -> function_table , lcname , op_array ) == NULL"	4660:5:135811:135874	119408	0	True				
ANR	119676	EqualityExpression	"zend_hash_add_ptr ( & ce -> function_table , lcname , op_array ) == NULL"		119408	0		==			
ANR	119677	CallExpression	"zend_hash_add_ptr ( & ce -> function_table , lcname , op_array )"		119408	0					
ANR	119678	Callee	zend_hash_add_ptr		119408	0					
ANR	119679	Identifier	zend_hash_add_ptr		119408	0					
ANR	119680	ArgumentList	& ce -> function_table		119408	1					
ANR	119681	Argument	& ce -> function_table		119408	0					
ANR	119682	UnaryOperationExpression	& ce -> function_table		119408	0					
ANR	119683	UnaryOperator	&		119408	0					
ANR	119684	PtrMemberAccess	ce -> function_table		119408	1					
ANR	119685	Identifier	ce		119408	0					
ANR	119686	Identifier	function_table		119408	1					
ANR	119687	Argument	lcname		119408	1					
ANR	119688	Identifier	lcname		119408	0					
ANR	119689	Argument	op_array		119408	2					
ANR	119690	Identifier	op_array		119408	0					
ANR	119691	Identifier	NULL		119408	1					
ANR	119692	CompoundStatement		41:71:1522:1522	119408	1					
ANR	119693	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare %s::%s()"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"	4661:2:135881:135985	119408	0	True				
ANR	119694	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare %s::%s()"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"		119408	0					
ANR	119695	Callee	zend_error_noreturn		119408	0					
ANR	119696	Identifier	zend_error_noreturn		119408	0					
ANR	119697	ArgumentList	E_COMPILE_ERROR		119408	1					
ANR	119698	Argument	E_COMPILE_ERROR		119408	0					
ANR	119699	Identifier	E_COMPILE_ERROR		119408	0					
ANR	119700	Argument	"""Cannot redeclare %s::%s()"""		119408	1					
ANR	119701	PrimaryExpression	"""Cannot redeclare %s::%s()"""		119408	0					
ANR	119702	Argument	ZSTR_VAL ( ce -> name )		119408	2					
ANR	119703	CallExpression	ZSTR_VAL ( ce -> name )		119408	0					
ANR	119704	Callee	ZSTR_VAL		119408	0					
ANR	119705	Identifier	ZSTR_VAL		119408	0					
ANR	119706	ArgumentList	ce -> name		119408	1					
ANR	119707	Argument	ce -> name		119408	0					
ANR	119708	PtrMemberAccess	ce -> name		119408	0					
ANR	119709	Identifier	ce		119408	0					
ANR	119710	Identifier	name		119408	1					
ANR	119711	Argument	ZSTR_VAL ( name )		119408	3					
ANR	119712	CallExpression	ZSTR_VAL ( name )		119408	0					
ANR	119713	Callee	ZSTR_VAL		119408	0					
ANR	119714	Identifier	ZSTR_VAL		119408	0					
ANR	119715	ArgumentList	name		119408	1					
ANR	119716	Argument	name		119408	0					
ANR	119717	Identifier	name		119408	0					
ANR	119718	IfStatement	if ( in_interface )		119408	13					
ANR	119719	Condition	in_interface	4665:5:135996:136007	119408	0	True				
ANR	119720	Identifier	in_interface		119408	0					
ANR	119721	CompoundStatement		46:19:1655:1655	119408	1					
ANR	119722	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_CALL_FUNC_NAME ) )"		119408	0					
ANR	119723	Condition	"zend_string_equals_literal ( lcname , ZEND_CALL_FUNC_NAME )"	4666:6:136018:136072	119408	0	True				
ANR	119724	CallExpression	"zend_string_equals_literal ( lcname , ZEND_CALL_FUNC_NAME )"		119408	0					
ANR	119725	Callee	zend_string_equals_literal		119408	0					
ANR	119726	Identifier	zend_string_equals_literal		119408	0					
ANR	119727	ArgumentList	lcname		119408	1					
ANR	119728	Argument	lcname		119408	0					
ANR	119729	Identifier	lcname		119408	0					
ANR	119730	Argument	ZEND_CALL_FUNC_NAME		119408	1					
ANR	119731	Identifier	ZEND_CALL_FUNC_NAME		119408	0					
ANR	119732	CompoundStatement		47:63:1720:1720	119408	1					
ANR	119733	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	119734	Condition	! is_public || is_static	4667:7:136084:136106	119408	0	True				
ANR	119735	OrExpression	! is_public || is_static		119408	0		||			
ANR	119736	UnaryOperationExpression	! is_public		119408	0					
ANR	119737	UnaryOperator	!		119408	0					
ANR	119738	Identifier	is_public		119408	1					
ANR	119739	Identifier	is_static		119408	1					
ANR	119740	CompoundStatement		48:32:1754:1754	119408	1					
ANR	119741	Statement	zend_error	4668:4:136115:136124	119408	0	True				
ANR	119742	Statement	(	4668:14:136125:136125	119408	1	True				
ANR	119743	Statement	E_WARNING	4668:15:136126:136134	119408	2	True				
ANR	119744	Statement	","	4668:24:136135:136135	119408	3	True				
ANR	119745	Statement	"""The magic method __call() must have """	4668:26:136137:136174	119408	4	True				
ANR	119746	Statement	"""public visibility and cannot be static"""	4669:5:136181:136220	119408	5	True				
ANR	119747	Statement	)	4669:45:136221:136221	119408	6	True				
ANR	119748	ExpressionStatement		4669:46:136222:136222	119408	7	True				
ANR	119749	ElseStatement	else		119408	0					
ANR	119750	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_CALLSTATIC_FUNC_NAME ) )"		119408	0					
ANR	119751	Condition	"zend_string_equals_literal ( lcname , ZEND_CALLSTATIC_FUNC_NAME )"	4671:13:136242:136302	119408	0	True				
ANR	119752	CallExpression	"zend_string_equals_literal ( lcname , ZEND_CALLSTATIC_FUNC_NAME )"		119408	0					
ANR	119753	Callee	zend_string_equals_literal		119408	0					
ANR	119754	Identifier	zend_string_equals_literal		119408	0					
ANR	119755	ArgumentList	lcname		119408	1					
ANR	119756	Argument	lcname		119408	0					
ANR	119757	Identifier	lcname		119408	0					
ANR	119758	Argument	ZEND_CALLSTATIC_FUNC_NAME		119408	1					
ANR	119759	Identifier	ZEND_CALLSTATIC_FUNC_NAME		119408	0					
ANR	119760	CompoundStatement		52:76:1950:1950	119408	1					
ANR	119761	IfStatement	if ( ! is_public || ! is_static )		119408	0					
ANR	119762	Condition	! is_public || ! is_static	4672:7:136314:136337	119408	0	True				
ANR	119763	OrExpression	! is_public || ! is_static		119408	0		||			
ANR	119764	UnaryOperationExpression	! is_public		119408	0					
ANR	119765	UnaryOperator	!		119408	0					
ANR	119766	Identifier	is_public		119408	1					
ANR	119767	UnaryOperationExpression	! is_static		119408	1					
ANR	119768	UnaryOperator	!		119408	0					
ANR	119769	Identifier	is_static		119408	1					
ANR	119770	CompoundStatement		53:33:1985:1985	119408	1					
ANR	119771	Statement	zend_error	4673:4:136346:136355	119408	0	True				
ANR	119772	Statement	(	4673:14:136356:136356	119408	1	True				
ANR	119773	Statement	E_WARNING	4673:15:136357:136365	119408	2	True				
ANR	119774	Statement	","	4673:24:136366:136366	119408	3	True				
ANR	119775	Statement	"""The magic method __callStatic() must have """	4673:26:136368:136411	119408	4	True				
ANR	119776	Statement	"""public visibility and be static"""	4674:5:136418:136450	119408	5	True				
ANR	119777	Statement	)	4674:38:136451:136451	119408	6	True				
ANR	119778	ExpressionStatement		4674:39:136452:136452	119408	7	True				
ANR	119779	ElseStatement	else		119408	0					
ANR	119780	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_GET_FUNC_NAME ) )"		119408	0					
ANR	119781	Condition	"zend_string_equals_literal ( lcname , ZEND_GET_FUNC_NAME )"	4676:13:136472:136525	119408	0	True				
ANR	119782	CallExpression	"zend_string_equals_literal ( lcname , ZEND_GET_FUNC_NAME )"		119408	0					
ANR	119783	Callee	zend_string_equals_literal		119408	0					
ANR	119784	Identifier	zend_string_equals_literal		119408	0					
ANR	119785	ArgumentList	lcname		119408	1					
ANR	119786	Argument	lcname		119408	0					
ANR	119787	Identifier	lcname		119408	0					
ANR	119788	Argument	ZEND_GET_FUNC_NAME		119408	1					
ANR	119789	Identifier	ZEND_GET_FUNC_NAME		119408	0					
ANR	119790	CompoundStatement		57:69:2173:2173	119408	1					
ANR	119791	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	119792	Condition	! is_public || is_static	4677:7:136537:136559	119408	0	True				
ANR	119793	OrExpression	! is_public || is_static		119408	0		||			
ANR	119794	UnaryOperationExpression	! is_public		119408	0					
ANR	119795	UnaryOperator	!		119408	0					
ANR	119796	Identifier	is_public		119408	1					
ANR	119797	Identifier	is_static		119408	1					
ANR	119798	CompoundStatement		58:32:2207:2207	119408	1					
ANR	119799	Statement	zend_error	4678:4:136568:136577	119408	0	True				
ANR	119800	Statement	(	4678:14:136578:136578	119408	1	True				
ANR	119801	Statement	E_WARNING	4678:15:136579:136587	119408	2	True				
ANR	119802	Statement	","	4678:24:136588:136588	119408	3	True				
ANR	119803	Statement	"""The magic method __get() must have """	4678:26:136590:136626	119408	4	True				
ANR	119804	Statement	"""public visibility and cannot be static"""	4679:5:136633:136672	119408	5	True				
ANR	119805	Statement	)	4679:45:136673:136673	119408	6	True				
ANR	119806	ExpressionStatement		4679:46:136674:136674	119408	7	True				
ANR	119807	ElseStatement	else		119408	0					
ANR	119808	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_SET_FUNC_NAME ) )"		119408	0					
ANR	119809	Condition	"zend_string_equals_literal ( lcname , ZEND_SET_FUNC_NAME )"	4681:13:136694:136747	119408	0	True				
ANR	119810	CallExpression	"zend_string_equals_literal ( lcname , ZEND_SET_FUNC_NAME )"		119408	0					
ANR	119811	Callee	zend_string_equals_literal		119408	0					
ANR	119812	Identifier	zend_string_equals_literal		119408	0					
ANR	119813	ArgumentList	lcname		119408	1					
ANR	119814	Argument	lcname		119408	0					
ANR	119815	Identifier	lcname		119408	0					
ANR	119816	Argument	ZEND_SET_FUNC_NAME		119408	1					
ANR	119817	Identifier	ZEND_SET_FUNC_NAME		119408	0					
ANR	119818	CompoundStatement		62:69:2395:2395	119408	1					
ANR	119819	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	119820	Condition	! is_public || is_static	4682:7:136759:136781	119408	0	True				
ANR	119821	OrExpression	! is_public || is_static		119408	0		||			
ANR	119822	UnaryOperationExpression	! is_public		119408	0					
ANR	119823	UnaryOperator	!		119408	0					
ANR	119824	Identifier	is_public		119408	1					
ANR	119825	Identifier	is_static		119408	1					
ANR	119826	CompoundStatement		63:32:2429:2429	119408	1					
ANR	119827	Statement	zend_error	4683:4:136790:136799	119408	0	True				
ANR	119828	Statement	(	4683:14:136800:136800	119408	1	True				
ANR	119829	Statement	E_WARNING	4683:15:136801:136809	119408	2	True				
ANR	119830	Statement	","	4683:24:136810:136810	119408	3	True				
ANR	119831	Statement	"""The magic method __set() must have """	4683:26:136812:136848	119408	4	True				
ANR	119832	Statement	"""public visibility and cannot be static"""	4684:5:136855:136894	119408	5	True				
ANR	119833	Statement	)	4684:45:136895:136895	119408	6	True				
ANR	119834	ExpressionStatement		4684:46:136896:136896	119408	7	True				
ANR	119835	ElseStatement	else		119408	0					
ANR	119836	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_UNSET_FUNC_NAME ) )"		119408	0					
ANR	119837	Condition	"zend_string_equals_literal ( lcname , ZEND_UNSET_FUNC_NAME )"	4686:13:136916:136971	119408	0	True				
ANR	119838	CallExpression	"zend_string_equals_literal ( lcname , ZEND_UNSET_FUNC_NAME )"		119408	0					
ANR	119839	Callee	zend_string_equals_literal		119408	0					
ANR	119840	Identifier	zend_string_equals_literal		119408	0					
ANR	119841	ArgumentList	lcname		119408	1					
ANR	119842	Argument	lcname		119408	0					
ANR	119843	Identifier	lcname		119408	0					
ANR	119844	Argument	ZEND_UNSET_FUNC_NAME		119408	1					
ANR	119845	Identifier	ZEND_UNSET_FUNC_NAME		119408	0					
ANR	119846	CompoundStatement		67:71:2619:2619	119408	1					
ANR	119847	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	119848	Condition	! is_public || is_static	4687:7:136983:137005	119408	0	True				
ANR	119849	OrExpression	! is_public || is_static		119408	0		||			
ANR	119850	UnaryOperationExpression	! is_public		119408	0					
ANR	119851	UnaryOperator	!		119408	0					
ANR	119852	Identifier	is_public		119408	1					
ANR	119853	Identifier	is_static		119408	1					
ANR	119854	CompoundStatement		68:32:2653:2653	119408	1					
ANR	119855	Statement	zend_error	4688:4:137014:137023	119408	0	True				
ANR	119856	Statement	(	4688:14:137024:137024	119408	1	True				
ANR	119857	Statement	E_WARNING	4688:15:137025:137033	119408	2	True				
ANR	119858	Statement	","	4688:24:137034:137034	119408	3	True				
ANR	119859	Statement	"""The magic method __unset() must have """	4688:26:137036:137074	119408	4	True				
ANR	119860	Statement	"""public visibility and cannot be static"""	4689:5:137081:137120	119408	5	True				
ANR	119861	Statement	)	4689:45:137121:137121	119408	6	True				
ANR	119862	ExpressionStatement		4689:46:137122:137122	119408	7	True				
ANR	119863	ElseStatement	else		119408	0					
ANR	119864	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_ISSET_FUNC_NAME ) )"		119408	0					
ANR	119865	Condition	"zend_string_equals_literal ( lcname , ZEND_ISSET_FUNC_NAME )"	4691:13:137142:137197	119408	0	True				
ANR	119866	CallExpression	"zend_string_equals_literal ( lcname , ZEND_ISSET_FUNC_NAME )"		119408	0					
ANR	119867	Callee	zend_string_equals_literal		119408	0					
ANR	119868	Identifier	zend_string_equals_literal		119408	0					
ANR	119869	ArgumentList	lcname		119408	1					
ANR	119870	Argument	lcname		119408	0					
ANR	119871	Identifier	lcname		119408	0					
ANR	119872	Argument	ZEND_ISSET_FUNC_NAME		119408	1					
ANR	119873	Identifier	ZEND_ISSET_FUNC_NAME		119408	0					
ANR	119874	CompoundStatement		72:71:2845:2845	119408	1					
ANR	119875	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	119876	Condition	! is_public || is_static	4692:7:137209:137231	119408	0	True				
ANR	119877	OrExpression	! is_public || is_static		119408	0		||			
ANR	119878	UnaryOperationExpression	! is_public		119408	0					
ANR	119879	UnaryOperator	!		119408	0					
ANR	119880	Identifier	is_public		119408	1					
ANR	119881	Identifier	is_static		119408	1					
ANR	119882	CompoundStatement		73:32:2879:2879	119408	1					
ANR	119883	Statement	zend_error	4693:4:137240:137249	119408	0	True				
ANR	119884	Statement	(	4693:14:137250:137250	119408	1	True				
ANR	119885	Statement	E_WARNING	4693:15:137251:137259	119408	2	True				
ANR	119886	Statement	","	4693:24:137260:137260	119408	3	True				
ANR	119887	Statement	"""The magic method __isset() must have """	4693:26:137262:137300	119408	4	True				
ANR	119888	Statement	"""public visibility and cannot be static"""	4694:5:137307:137346	119408	5	True				
ANR	119889	Statement	)	4694:45:137347:137347	119408	6	True				
ANR	119890	ExpressionStatement		4694:46:137348:137348	119408	7	True				
ANR	119891	ElseStatement	else		119408	0					
ANR	119892	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_TOSTRING_FUNC_NAME ) )"		119408	0					
ANR	119893	Condition	"zend_string_equals_literal ( lcname , ZEND_TOSTRING_FUNC_NAME )"	4696:13:137368:137426	119408	0	True				
ANR	119894	CallExpression	"zend_string_equals_literal ( lcname , ZEND_TOSTRING_FUNC_NAME )"		119408	0					
ANR	119895	Callee	zend_string_equals_literal		119408	0					
ANR	119896	Identifier	zend_string_equals_literal		119408	0					
ANR	119897	ArgumentList	lcname		119408	1					
ANR	119898	Argument	lcname		119408	0					
ANR	119899	Identifier	lcname		119408	0					
ANR	119900	Argument	ZEND_TOSTRING_FUNC_NAME		119408	1					
ANR	119901	Identifier	ZEND_TOSTRING_FUNC_NAME		119408	0					
ANR	119902	CompoundStatement		77:74:3074:3074	119408	1					
ANR	119903	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	119904	Condition	! is_public || is_static	4697:7:137438:137460	119408	0	True				
ANR	119905	OrExpression	! is_public || is_static		119408	0		||			
ANR	119906	UnaryOperationExpression	! is_public		119408	0					
ANR	119907	UnaryOperator	!		119408	0					
ANR	119908	Identifier	is_public		119408	1					
ANR	119909	Identifier	is_static		119408	1					
ANR	119910	CompoundStatement		78:32:3108:3108	119408	1					
ANR	119911	Statement	zend_error	4698:4:137469:137478	119408	0	True				
ANR	119912	Statement	(	4698:14:137479:137479	119408	1	True				
ANR	119913	Statement	E_WARNING	4698:15:137480:137488	119408	2	True				
ANR	119914	Statement	","	4698:24:137489:137489	119408	3	True				
ANR	119915	Statement	"""The magic method __toString() must have """	4698:26:137491:137532	119408	4	True				
ANR	119916	Statement	"""public visibility and cannot be static"""	4699:5:137539:137578	119408	5	True				
ANR	119917	Statement	)	4699:45:137579:137579	119408	6	True				
ANR	119918	ExpressionStatement		4699:46:137580:137580	119408	7	True				
ANR	119919	ElseStatement	else		119408	0					
ANR	119920	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_INVOKE_FUNC_NAME ) )"		119408	0					
ANR	119921	Condition	"zend_string_equals_literal ( lcname , ZEND_INVOKE_FUNC_NAME )"	4701:13:137600:137656	119408	0	True				
ANR	119922	CallExpression	"zend_string_equals_literal ( lcname , ZEND_INVOKE_FUNC_NAME )"		119408	0					
ANR	119923	Callee	zend_string_equals_literal		119408	0					
ANR	119924	Identifier	zend_string_equals_literal		119408	0					
ANR	119925	ArgumentList	lcname		119408	1					
ANR	119926	Argument	lcname		119408	0					
ANR	119927	Identifier	lcname		119408	0					
ANR	119928	Argument	ZEND_INVOKE_FUNC_NAME		119408	1					
ANR	119929	Identifier	ZEND_INVOKE_FUNC_NAME		119408	0					
ANR	119930	CompoundStatement		82:72:3304:3304	119408	1					
ANR	119931	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	119932	Condition	! is_public || is_static	4702:7:137668:137690	119408	0	True				
ANR	119933	OrExpression	! is_public || is_static		119408	0		||			
ANR	119934	UnaryOperationExpression	! is_public		119408	0					
ANR	119935	UnaryOperator	!		119408	0					
ANR	119936	Identifier	is_public		119408	1					
ANR	119937	Identifier	is_static		119408	1					
ANR	119938	CompoundStatement		83:32:3338:3338	119408	1					
ANR	119939	Statement	zend_error	4703:4:137699:137708	119408	0	True				
ANR	119940	Statement	(	4703:14:137709:137709	119408	1	True				
ANR	119941	Statement	E_WARNING	4703:15:137710:137718	119408	2	True				
ANR	119942	Statement	","	4703:24:137719:137719	119408	3	True				
ANR	119943	Statement	"""The magic method __invoke() must have """	4703:26:137721:137760	119408	4	True				
ANR	119944	Statement	"""public visibility and cannot be static"""	4704:5:137767:137806	119408	5	True				
ANR	119945	Statement	)	4704:45:137807:137807	119408	6	True				
ANR	119946	ExpressionStatement		4704:46:137808:137808	119408	7	True				
ANR	119947	ElseStatement	else		119408	0					
ANR	119948	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_DEBUGINFO_FUNC_NAME ) )"		119408	0					
ANR	119949	Condition	"zend_string_equals_literal ( lcname , ZEND_DEBUGINFO_FUNC_NAME )"	4706:13:137828:137887	119408	0	True				
ANR	119950	CallExpression	"zend_string_equals_literal ( lcname , ZEND_DEBUGINFO_FUNC_NAME )"		119408	0					
ANR	119951	Callee	zend_string_equals_literal		119408	0					
ANR	119952	Identifier	zend_string_equals_literal		119408	0					
ANR	119953	ArgumentList	lcname		119408	1					
ANR	119954	Argument	lcname		119408	0					
ANR	119955	Identifier	lcname		119408	0					
ANR	119956	Argument	ZEND_DEBUGINFO_FUNC_NAME		119408	1					
ANR	119957	Identifier	ZEND_DEBUGINFO_FUNC_NAME		119408	0					
ANR	119958	CompoundStatement		87:75:3535:3535	119408	1					
ANR	119959	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	119960	Condition	! is_public || is_static	4707:7:137899:137921	119408	0	True				
ANR	119961	OrExpression	! is_public || is_static		119408	0		||			
ANR	119962	UnaryOperationExpression	! is_public		119408	0					
ANR	119963	UnaryOperator	!		119408	0					
ANR	119964	Identifier	is_public		119408	1					
ANR	119965	Identifier	is_static		119408	1					
ANR	119966	CompoundStatement		88:32:3569:3569	119408	1					
ANR	119967	Statement	zend_error	4708:4:137930:137939	119408	0	True				
ANR	119968	Statement	(	4708:14:137940:137940	119408	1	True				
ANR	119969	Statement	E_WARNING	4708:15:137941:137949	119408	2	True				
ANR	119970	Statement	","	4708:24:137950:137950	119408	3	True				
ANR	119971	Statement	"""The magic method __debugInfo() must have """	4708:26:137952:137994	119408	4	True				
ANR	119972	Statement	"""public visibility and cannot be static"""	4709:5:138001:138040	119408	5	True				
ANR	119973	Statement	)	4709:45:138041:138041	119408	6	True				
ANR	119974	ExpressionStatement		4709:46:138042:138042	119408	7	True				
ANR	119975	ElseStatement	else		119408	0					
ANR	119976	CompoundStatement		93:8:3706:3706	119408	0					
ANR	119977	IfStatement	"if ( ! in_trait && zend_string_equals_ci ( lcname , ce -> name ) )"		119408	0					
ANR	119978	Condition	"! in_trait && zend_string_equals_ci ( lcname , ce -> name )"	4713:6:138069:138120	119408	0	True				
ANR	119979	AndExpression	"! in_trait && zend_string_equals_ci ( lcname , ce -> name )"		119408	0		&&			
ANR	119980	UnaryOperationExpression	! in_trait		119408	0					
ANR	119981	UnaryOperator	!		119408	0					
ANR	119982	Identifier	in_trait		119408	1					
ANR	119983	CallExpression	"zend_string_equals_ci ( lcname , ce -> name )"		119408	1					
ANR	119984	Callee	zend_string_equals_ci		119408	0					
ANR	119985	Identifier	zend_string_equals_ci		119408	0					
ANR	119986	ArgumentList	lcname		119408	1					
ANR	119987	Argument	lcname		119408	0					
ANR	119988	Identifier	lcname		119408	0					
ANR	119989	Argument	ce -> name		119408	1					
ANR	119990	PtrMemberAccess	ce -> name		119408	0					
ANR	119991	Identifier	ce		119408	0					
ANR	119992	Identifier	name		119408	1					
ANR	119993	CompoundStatement		94:60:3768:3768	119408	1					
ANR	119994	IfStatement	if ( ! ce -> constructor )		119408	0					
ANR	119995	Condition	! ce -> constructor	4714:7:138132:138147	119408	0	True				
ANR	119996	UnaryOperationExpression	! ce -> constructor		119408	0					
ANR	119997	UnaryOperator	!		119408	0					
ANR	119998	PtrMemberAccess	ce -> constructor		119408	1					
ANR	119999	Identifier	ce		119408	0					
ANR	120000	Identifier	constructor		119408	1					
ANR	120001	CompoundStatement		95:25:3795:3795	119408	1					
ANR	120002	ExpressionStatement	ce -> constructor = ( zend_function * ) op_array	4715:4:138156:138200	119408	0	True				
ANR	120003	AssignmentExpression	ce -> constructor = ( zend_function * ) op_array		119408	0		=			
ANR	120004	PtrMemberAccess	ce -> constructor		119408	0					
ANR	120005	Identifier	ce		119408	0					
ANR	120006	Identifier	constructor		119408	1					
ANR	120007	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120008	CastTarget	zend_function *		119408	0					
ANR	120009	Identifier	op_array		119408	1					
ANR	120010	ElseStatement	else		119408	0					
ANR	120011	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_CONSTRUCTOR_FUNC_NAME ) )"		119408	0					
ANR	120012	Condition	"zend_string_equals_literal ( lcname , ZEND_CONSTRUCTOR_FUNC_NAME )"	4717:13:138220:138281	119408	0	True				
ANR	120013	CallExpression	"zend_string_equals_literal ( lcname , ZEND_CONSTRUCTOR_FUNC_NAME )"		119408	0					
ANR	120014	Callee	zend_string_equals_literal		119408	0					
ANR	120015	Identifier	zend_string_equals_literal		119408	0					
ANR	120016	ArgumentList	lcname		119408	1					
ANR	120017	Argument	lcname		119408	0					
ANR	120018	Identifier	lcname		119408	0					
ANR	120019	Argument	ZEND_CONSTRUCTOR_FUNC_NAME		119408	1					
ANR	120020	Identifier	ZEND_CONSTRUCTOR_FUNC_NAME		119408	0					
ANR	120021	CompoundStatement		98:77:3929:3929	119408	1					
ANR	120022	ExpressionStatement	ce -> constructor = ( zend_function * ) op_array	4718:3:138289:138333	119408	0	True				
ANR	120023	AssignmentExpression	ce -> constructor = ( zend_function * ) op_array		119408	0		=			
ANR	120024	PtrMemberAccess	ce -> constructor		119408	0					
ANR	120025	Identifier	ce		119408	0					
ANR	120026	Identifier	constructor		119408	1					
ANR	120027	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120028	CastTarget	zend_function *		119408	0					
ANR	120029	Identifier	op_array		119408	1					
ANR	120030	ElseStatement	else		119408	0					
ANR	120031	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_DESTRUCTOR_FUNC_NAME ) )"		119408	0					
ANR	120032	Condition	"zend_string_equals_literal ( lcname , ZEND_DESTRUCTOR_FUNC_NAME )"	4719:13:138348:138408	119408	0	True				
ANR	120033	CallExpression	"zend_string_equals_literal ( lcname , ZEND_DESTRUCTOR_FUNC_NAME )"		119408	0					
ANR	120034	Callee	zend_string_equals_literal		119408	0					
ANR	120035	Identifier	zend_string_equals_literal		119408	0					
ANR	120036	ArgumentList	lcname		119408	1					
ANR	120037	Argument	lcname		119408	0					
ANR	120038	Identifier	lcname		119408	0					
ANR	120039	Argument	ZEND_DESTRUCTOR_FUNC_NAME		119408	1					
ANR	120040	Identifier	ZEND_DESTRUCTOR_FUNC_NAME		119408	0					
ANR	120041	CompoundStatement		100:76:4056:4056	119408	1					
ANR	120042	ExpressionStatement	ce -> destructor = ( zend_function * ) op_array	4720:3:138416:138459	119408	0	True				
ANR	120043	AssignmentExpression	ce -> destructor = ( zend_function * ) op_array		119408	0		=			
ANR	120044	PtrMemberAccess	ce -> destructor		119408	0					
ANR	120045	Identifier	ce		119408	0					
ANR	120046	Identifier	destructor		119408	1					
ANR	120047	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120048	CastTarget	zend_function *		119408	0					
ANR	120049	Identifier	op_array		119408	1					
ANR	120050	ElseStatement	else		119408	0					
ANR	120051	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_CLONE_FUNC_NAME ) )"		119408	0					
ANR	120052	Condition	"zend_string_equals_literal ( lcname , ZEND_CLONE_FUNC_NAME )"	4721:13:138474:138529	119408	0	True				
ANR	120053	CallExpression	"zend_string_equals_literal ( lcname , ZEND_CLONE_FUNC_NAME )"		119408	0					
ANR	120054	Callee	zend_string_equals_literal		119408	0					
ANR	120055	Identifier	zend_string_equals_literal		119408	0					
ANR	120056	ArgumentList	lcname		119408	1					
ANR	120057	Argument	lcname		119408	0					
ANR	120058	Identifier	lcname		119408	0					
ANR	120059	Argument	ZEND_CLONE_FUNC_NAME		119408	1					
ANR	120060	Identifier	ZEND_CLONE_FUNC_NAME		119408	0					
ANR	120061	CompoundStatement		102:71:4177:4177	119408	1					
ANR	120062	ExpressionStatement	ce -> clone = ( zend_function * ) op_array	4722:3:138537:138575	119408	0	True				
ANR	120063	AssignmentExpression	ce -> clone = ( zend_function * ) op_array		119408	0		=			
ANR	120064	PtrMemberAccess	ce -> clone		119408	0					
ANR	120065	Identifier	ce		119408	0					
ANR	120066	Identifier	clone		119408	1					
ANR	120067	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120068	CastTarget	zend_function *		119408	0					
ANR	120069	Identifier	op_array		119408	1					
ANR	120070	ElseStatement	else		119408	0					
ANR	120071	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_CALL_FUNC_NAME ) )"		119408	0					
ANR	120072	Condition	"zend_string_equals_literal ( lcname , ZEND_CALL_FUNC_NAME )"	4723:13:138590:138644	119408	0	True				
ANR	120073	CallExpression	"zend_string_equals_literal ( lcname , ZEND_CALL_FUNC_NAME )"		119408	0					
ANR	120074	Callee	zend_string_equals_literal		119408	0					
ANR	120075	Identifier	zend_string_equals_literal		119408	0					
ANR	120076	ArgumentList	lcname		119408	1					
ANR	120077	Argument	lcname		119408	0					
ANR	120078	Identifier	lcname		119408	0					
ANR	120079	Argument	ZEND_CALL_FUNC_NAME		119408	1					
ANR	120080	Identifier	ZEND_CALL_FUNC_NAME		119408	0					
ANR	120081	CompoundStatement		104:70:4292:4292	119408	1					
ANR	120082	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	120083	Condition	! is_public || is_static	4724:7:138656:138678	119408	0	True				
ANR	120084	OrExpression	! is_public || is_static		119408	0		||			
ANR	120085	UnaryOperationExpression	! is_public		119408	0					
ANR	120086	UnaryOperator	!		119408	0					
ANR	120087	Identifier	is_public		119408	1					
ANR	120088	Identifier	is_static		119408	1					
ANR	120089	CompoundStatement		105:32:4326:4326	119408	1					
ANR	120090	Statement	zend_error	4725:4:138687:138696	119408	0	True				
ANR	120091	Statement	(	4725:14:138697:138697	119408	1	True				
ANR	120092	Statement	E_WARNING	4725:15:138698:138706	119408	2	True				
ANR	120093	Statement	","	4725:24:138707:138707	119408	3	True				
ANR	120094	Statement	"""The magic method __call() must have """	4725:26:138709:138746	119408	4	True				
ANR	120095	Statement	"""public visibility and cannot be static"""	4726:5:138753:138792	119408	5	True				
ANR	120096	Statement	)	4726:45:138793:138793	119408	6	True				
ANR	120097	ExpressionStatement		4726:46:138794:138794	119408	7	True				
ANR	120098	ExpressionStatement	ce -> __call = ( zend_function * ) op_array	4728:3:138804:138843	119408	1	True				
ANR	120099	AssignmentExpression	ce -> __call = ( zend_function * ) op_array		119408	0		=			
ANR	120100	PtrMemberAccess	ce -> __call		119408	0					
ANR	120101	Identifier	ce		119408	0					
ANR	120102	Identifier	__call		119408	1					
ANR	120103	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120104	CastTarget	zend_function *		119408	0					
ANR	120105	Identifier	op_array		119408	1					
ANR	120106	ElseStatement	else		119408	0					
ANR	120107	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_CALLSTATIC_FUNC_NAME ) )"		119408	0					
ANR	120108	Condition	"zend_string_equals_literal ( lcname , ZEND_CALLSTATIC_FUNC_NAME )"	4729:13:138858:138918	119408	0	True				
ANR	120109	CallExpression	"zend_string_equals_literal ( lcname , ZEND_CALLSTATIC_FUNC_NAME )"		119408	0					
ANR	120110	Callee	zend_string_equals_literal		119408	0					
ANR	120111	Identifier	zend_string_equals_literal		119408	0					
ANR	120112	ArgumentList	lcname		119408	1					
ANR	120113	Argument	lcname		119408	0					
ANR	120114	Identifier	lcname		119408	0					
ANR	120115	Argument	ZEND_CALLSTATIC_FUNC_NAME		119408	1					
ANR	120116	Identifier	ZEND_CALLSTATIC_FUNC_NAME		119408	0					
ANR	120117	CompoundStatement		110:76:4566:4566	119408	1					
ANR	120118	IfStatement	if ( ! is_public || ! is_static )		119408	0					
ANR	120119	Condition	! is_public || ! is_static	4730:7:138930:138953	119408	0	True				
ANR	120120	OrExpression	! is_public || ! is_static		119408	0		||			
ANR	120121	UnaryOperationExpression	! is_public		119408	0					
ANR	120122	UnaryOperator	!		119408	0					
ANR	120123	Identifier	is_public		119408	1					
ANR	120124	UnaryOperationExpression	! is_static		119408	1					
ANR	120125	UnaryOperator	!		119408	0					
ANR	120126	Identifier	is_static		119408	1					
ANR	120127	CompoundStatement		111:33:4601:4601	119408	1					
ANR	120128	Statement	zend_error	4731:4:138962:138971	119408	0	True				
ANR	120129	Statement	(	4731:14:138972:138972	119408	1	True				
ANR	120130	Statement	E_WARNING	4731:15:138973:138981	119408	2	True				
ANR	120131	Statement	","	4731:24:138982:138982	119408	3	True				
ANR	120132	Statement	"""The magic method __callStatic() must have """	4731:26:138984:139027	119408	4	True				
ANR	120133	Statement	"""public visibility and be static"""	4732:5:139034:139066	119408	5	True				
ANR	120134	Statement	)	4732:38:139067:139067	119408	6	True				
ANR	120135	ExpressionStatement		4732:39:139068:139068	119408	7	True				
ANR	120136	ExpressionStatement	ce -> __callstatic = ( zend_function * ) op_array	4734:3:139078:139123	119408	1	True				
ANR	120137	AssignmentExpression	ce -> __callstatic = ( zend_function * ) op_array		119408	0		=			
ANR	120138	PtrMemberAccess	ce -> __callstatic		119408	0					
ANR	120139	Identifier	ce		119408	0					
ANR	120140	Identifier	__callstatic		119408	1					
ANR	120141	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120142	CastTarget	zend_function *		119408	0					
ANR	120143	Identifier	op_array		119408	1					
ANR	120144	ElseStatement	else		119408	0					
ANR	120145	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_GET_FUNC_NAME ) )"		119408	0					
ANR	120146	Condition	"zend_string_equals_literal ( lcname , ZEND_GET_FUNC_NAME )"	4735:13:139138:139191	119408	0	True				
ANR	120147	CallExpression	"zend_string_equals_literal ( lcname , ZEND_GET_FUNC_NAME )"		119408	0					
ANR	120148	Callee	zend_string_equals_literal		119408	0					
ANR	120149	Identifier	zend_string_equals_literal		119408	0					
ANR	120150	ArgumentList	lcname		119408	1					
ANR	120151	Argument	lcname		119408	0					
ANR	120152	Identifier	lcname		119408	0					
ANR	120153	Argument	ZEND_GET_FUNC_NAME		119408	1					
ANR	120154	Identifier	ZEND_GET_FUNC_NAME		119408	0					
ANR	120155	CompoundStatement		116:69:4839:4839	119408	1					
ANR	120156	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	120157	Condition	! is_public || is_static	4736:7:139203:139225	119408	0	True				
ANR	120158	OrExpression	! is_public || is_static		119408	0		||			
ANR	120159	UnaryOperationExpression	! is_public		119408	0					
ANR	120160	UnaryOperator	!		119408	0					
ANR	120161	Identifier	is_public		119408	1					
ANR	120162	Identifier	is_static		119408	1					
ANR	120163	CompoundStatement		117:32:4873:4873	119408	1					
ANR	120164	Statement	zend_error	4737:4:139234:139243	119408	0	True				
ANR	120165	Statement	(	4737:14:139244:139244	119408	1	True				
ANR	120166	Statement	E_WARNING	4737:15:139245:139253	119408	2	True				
ANR	120167	Statement	","	4737:24:139254:139254	119408	3	True				
ANR	120168	Statement	"""The magic method __get() must have """	4737:26:139256:139292	119408	4	True				
ANR	120169	Statement	"""public visibility and cannot be static"""	4738:5:139299:139338	119408	5	True				
ANR	120170	Statement	)	4738:45:139339:139339	119408	6	True				
ANR	120171	ExpressionStatement		4738:46:139340:139340	119408	7	True				
ANR	120172	ExpressionStatement	ce -> __get = ( zend_function * ) op_array	4740:3:139350:139388	119408	1	True				
ANR	120173	AssignmentExpression	ce -> __get = ( zend_function * ) op_array		119408	0		=			
ANR	120174	PtrMemberAccess	ce -> __get		119408	0					
ANR	120175	Identifier	ce		119408	0					
ANR	120176	Identifier	__get		119408	1					
ANR	120177	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120178	CastTarget	zend_function *		119408	0					
ANR	120179	Identifier	op_array		119408	1					
ANR	120180	ExpressionStatement	ce -> ce_flags |= ZEND_ACC_USE_GUARDS	4741:3:139393:139428	119408	2	True				
ANR	120181	AssignmentExpression	ce -> ce_flags |= ZEND_ACC_USE_GUARDS		119408	0		|=			
ANR	120182	PtrMemberAccess	ce -> ce_flags		119408	0					
ANR	120183	Identifier	ce		119408	0					
ANR	120184	Identifier	ce_flags		119408	1					
ANR	120185	Identifier	ZEND_ACC_USE_GUARDS		119408	1					
ANR	120186	ElseStatement	else		119408	0					
ANR	120187	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_SET_FUNC_NAME ) )"		119408	0					
ANR	120188	Condition	"zend_string_equals_literal ( lcname , ZEND_SET_FUNC_NAME )"	4742:13:139443:139496	119408	0	True				
ANR	120189	CallExpression	"zend_string_equals_literal ( lcname , ZEND_SET_FUNC_NAME )"		119408	0					
ANR	120190	Callee	zend_string_equals_literal		119408	0					
ANR	120191	Identifier	zend_string_equals_literal		119408	0					
ANR	120192	ArgumentList	lcname		119408	1					
ANR	120193	Argument	lcname		119408	0					
ANR	120194	Identifier	lcname		119408	0					
ANR	120195	Argument	ZEND_SET_FUNC_NAME		119408	1					
ANR	120196	Identifier	ZEND_SET_FUNC_NAME		119408	0					
ANR	120197	CompoundStatement		123:69:5144:5144	119408	1					
ANR	120198	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	120199	Condition	! is_public || is_static	4743:7:139508:139530	119408	0	True				
ANR	120200	OrExpression	! is_public || is_static		119408	0		||			
ANR	120201	UnaryOperationExpression	! is_public		119408	0					
ANR	120202	UnaryOperator	!		119408	0					
ANR	120203	Identifier	is_public		119408	1					
ANR	120204	Identifier	is_static		119408	1					
ANR	120205	CompoundStatement		124:32:5178:5178	119408	1					
ANR	120206	Statement	zend_error	4744:4:139539:139548	119408	0	True				
ANR	120207	Statement	(	4744:14:139549:139549	119408	1	True				
ANR	120208	Statement	E_WARNING	4744:15:139550:139558	119408	2	True				
ANR	120209	Statement	","	4744:24:139559:139559	119408	3	True				
ANR	120210	Statement	"""The magic method __set() must have """	4744:26:139561:139597	119408	4	True				
ANR	120211	Statement	"""public visibility and cannot be static"""	4745:5:139604:139643	119408	5	True				
ANR	120212	Statement	)	4745:45:139644:139644	119408	6	True				
ANR	120213	ExpressionStatement		4745:46:139645:139645	119408	7	True				
ANR	120214	ExpressionStatement	ce -> __set = ( zend_function * ) op_array	4747:3:139655:139693	119408	1	True				
ANR	120215	AssignmentExpression	ce -> __set = ( zend_function * ) op_array		119408	0		=			
ANR	120216	PtrMemberAccess	ce -> __set		119408	0					
ANR	120217	Identifier	ce		119408	0					
ANR	120218	Identifier	__set		119408	1					
ANR	120219	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120220	CastTarget	zend_function *		119408	0					
ANR	120221	Identifier	op_array		119408	1					
ANR	120222	ExpressionStatement	ce -> ce_flags |= ZEND_ACC_USE_GUARDS	4748:3:139698:139733	119408	2	True				
ANR	120223	AssignmentExpression	ce -> ce_flags |= ZEND_ACC_USE_GUARDS		119408	0		|=			
ANR	120224	PtrMemberAccess	ce -> ce_flags		119408	0					
ANR	120225	Identifier	ce		119408	0					
ANR	120226	Identifier	ce_flags		119408	1					
ANR	120227	Identifier	ZEND_ACC_USE_GUARDS		119408	1					
ANR	120228	ElseStatement	else		119408	0					
ANR	120229	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_UNSET_FUNC_NAME ) )"		119408	0					
ANR	120230	Condition	"zend_string_equals_literal ( lcname , ZEND_UNSET_FUNC_NAME )"	4749:13:139748:139803	119408	0	True				
ANR	120231	CallExpression	"zend_string_equals_literal ( lcname , ZEND_UNSET_FUNC_NAME )"		119408	0					
ANR	120232	Callee	zend_string_equals_literal		119408	0					
ANR	120233	Identifier	zend_string_equals_literal		119408	0					
ANR	120234	ArgumentList	lcname		119408	1					
ANR	120235	Argument	lcname		119408	0					
ANR	120236	Identifier	lcname		119408	0					
ANR	120237	Argument	ZEND_UNSET_FUNC_NAME		119408	1					
ANR	120238	Identifier	ZEND_UNSET_FUNC_NAME		119408	0					
ANR	120239	CompoundStatement		130:71:5451:5451	119408	1					
ANR	120240	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	120241	Condition	! is_public || is_static	4750:7:139815:139837	119408	0	True				
ANR	120242	OrExpression	! is_public || is_static		119408	0		||			
ANR	120243	UnaryOperationExpression	! is_public		119408	0					
ANR	120244	UnaryOperator	!		119408	0					
ANR	120245	Identifier	is_public		119408	1					
ANR	120246	Identifier	is_static		119408	1					
ANR	120247	CompoundStatement		131:32:5485:5485	119408	1					
ANR	120248	Statement	zend_error	4751:4:139846:139855	119408	0	True				
ANR	120249	Statement	(	4751:14:139856:139856	119408	1	True				
ANR	120250	Statement	E_WARNING	4751:15:139857:139865	119408	2	True				
ANR	120251	Statement	","	4751:24:139866:139866	119408	3	True				
ANR	120252	Statement	"""The magic method __unset() must have """	4751:26:139868:139906	119408	4	True				
ANR	120253	Statement	"""public visibility and cannot be static"""	4752:5:139913:139952	119408	5	True				
ANR	120254	Statement	)	4752:45:139953:139953	119408	6	True				
ANR	120255	ExpressionStatement		4752:46:139954:139954	119408	7	True				
ANR	120256	ExpressionStatement	ce -> __unset = ( zend_function * ) op_array	4754:3:139964:140004	119408	1	True				
ANR	120257	AssignmentExpression	ce -> __unset = ( zend_function * ) op_array		119408	0		=			
ANR	120258	PtrMemberAccess	ce -> __unset		119408	0					
ANR	120259	Identifier	ce		119408	0					
ANR	120260	Identifier	__unset		119408	1					
ANR	120261	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120262	CastTarget	zend_function *		119408	0					
ANR	120263	Identifier	op_array		119408	1					
ANR	120264	ExpressionStatement	ce -> ce_flags |= ZEND_ACC_USE_GUARDS	4755:3:140009:140044	119408	2	True				
ANR	120265	AssignmentExpression	ce -> ce_flags |= ZEND_ACC_USE_GUARDS		119408	0		|=			
ANR	120266	PtrMemberAccess	ce -> ce_flags		119408	0					
ANR	120267	Identifier	ce		119408	0					
ANR	120268	Identifier	ce_flags		119408	1					
ANR	120269	Identifier	ZEND_ACC_USE_GUARDS		119408	1					
ANR	120270	ElseStatement	else		119408	0					
ANR	120271	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_ISSET_FUNC_NAME ) )"		119408	0					
ANR	120272	Condition	"zend_string_equals_literal ( lcname , ZEND_ISSET_FUNC_NAME )"	4756:13:140059:140114	119408	0	True				
ANR	120273	CallExpression	"zend_string_equals_literal ( lcname , ZEND_ISSET_FUNC_NAME )"		119408	0					
ANR	120274	Callee	zend_string_equals_literal		119408	0					
ANR	120275	Identifier	zend_string_equals_literal		119408	0					
ANR	120276	ArgumentList	lcname		119408	1					
ANR	120277	Argument	lcname		119408	0					
ANR	120278	Identifier	lcname		119408	0					
ANR	120279	Argument	ZEND_ISSET_FUNC_NAME		119408	1					
ANR	120280	Identifier	ZEND_ISSET_FUNC_NAME		119408	0					
ANR	120281	CompoundStatement		137:71:5762:5762	119408	1					
ANR	120282	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	120283	Condition	! is_public || is_static	4757:7:140126:140148	119408	0	True				
ANR	120284	OrExpression	! is_public || is_static		119408	0		||			
ANR	120285	UnaryOperationExpression	! is_public		119408	0					
ANR	120286	UnaryOperator	!		119408	0					
ANR	120287	Identifier	is_public		119408	1					
ANR	120288	Identifier	is_static		119408	1					
ANR	120289	CompoundStatement		138:32:5796:5796	119408	1					
ANR	120290	Statement	zend_error	4758:4:140157:140166	119408	0	True				
ANR	120291	Statement	(	4758:14:140167:140167	119408	1	True				
ANR	120292	Statement	E_WARNING	4758:15:140168:140176	119408	2	True				
ANR	120293	Statement	","	4758:24:140177:140177	119408	3	True				
ANR	120294	Statement	"""The magic method __isset() must have """	4758:26:140179:140217	119408	4	True				
ANR	120295	Statement	"""public visibility and cannot be static"""	4759:5:140224:140263	119408	5	True				
ANR	120296	Statement	)	4759:45:140264:140264	119408	6	True				
ANR	120297	ExpressionStatement		4759:46:140265:140265	119408	7	True				
ANR	120298	ExpressionStatement	ce -> __isset = ( zend_function * ) op_array	4761:3:140275:140315	119408	1	True				
ANR	120299	AssignmentExpression	ce -> __isset = ( zend_function * ) op_array		119408	0		=			
ANR	120300	PtrMemberAccess	ce -> __isset		119408	0					
ANR	120301	Identifier	ce		119408	0					
ANR	120302	Identifier	__isset		119408	1					
ANR	120303	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120304	CastTarget	zend_function *		119408	0					
ANR	120305	Identifier	op_array		119408	1					
ANR	120306	ExpressionStatement	ce -> ce_flags |= ZEND_ACC_USE_GUARDS	4762:3:140320:140355	119408	2	True				
ANR	120307	AssignmentExpression	ce -> ce_flags |= ZEND_ACC_USE_GUARDS		119408	0		|=			
ANR	120308	PtrMemberAccess	ce -> ce_flags		119408	0					
ANR	120309	Identifier	ce		119408	0					
ANR	120310	Identifier	ce_flags		119408	1					
ANR	120311	Identifier	ZEND_ACC_USE_GUARDS		119408	1					
ANR	120312	ElseStatement	else		119408	0					
ANR	120313	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_TOSTRING_FUNC_NAME ) )"		119408	0					
ANR	120314	Condition	"zend_string_equals_literal ( lcname , ZEND_TOSTRING_FUNC_NAME )"	4763:13:140370:140428	119408	0	True				
ANR	120315	CallExpression	"zend_string_equals_literal ( lcname , ZEND_TOSTRING_FUNC_NAME )"		119408	0					
ANR	120316	Callee	zend_string_equals_literal		119408	0					
ANR	120317	Identifier	zend_string_equals_literal		119408	0					
ANR	120318	ArgumentList	lcname		119408	1					
ANR	120319	Argument	lcname		119408	0					
ANR	120320	Identifier	lcname		119408	0					
ANR	120321	Argument	ZEND_TOSTRING_FUNC_NAME		119408	1					
ANR	120322	Identifier	ZEND_TOSTRING_FUNC_NAME		119408	0					
ANR	120323	CompoundStatement		144:74:6076:6076	119408	1					
ANR	120324	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	120325	Condition	! is_public || is_static	4764:7:140440:140462	119408	0	True				
ANR	120326	OrExpression	! is_public || is_static		119408	0		||			
ANR	120327	UnaryOperationExpression	! is_public		119408	0					
ANR	120328	UnaryOperator	!		119408	0					
ANR	120329	Identifier	is_public		119408	1					
ANR	120330	Identifier	is_static		119408	1					
ANR	120331	CompoundStatement		145:32:6110:6110	119408	1					
ANR	120332	Statement	zend_error	4765:4:140471:140480	119408	0	True				
ANR	120333	Statement	(	4765:14:140481:140481	119408	1	True				
ANR	120334	Statement	E_WARNING	4765:15:140482:140490	119408	2	True				
ANR	120335	Statement	","	4765:24:140491:140491	119408	3	True				
ANR	120336	Statement	"""The magic method __toString() must have """	4765:26:140493:140534	119408	4	True				
ANR	120337	Statement	"""public visibility and cannot be static"""	4766:5:140541:140580	119408	5	True				
ANR	120338	Statement	)	4766:45:140581:140581	119408	6	True				
ANR	120339	ExpressionStatement		4766:46:140582:140582	119408	7	True				
ANR	120340	ExpressionStatement	ce -> __tostring = ( zend_function * ) op_array	4768:3:140592:140635	119408	1	True				
ANR	120341	AssignmentExpression	ce -> __tostring = ( zend_function * ) op_array		119408	0		=			
ANR	120342	PtrMemberAccess	ce -> __tostring		119408	0					
ANR	120343	Identifier	ce		119408	0					
ANR	120344	Identifier	__tostring		119408	1					
ANR	120345	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120346	CastTarget	zend_function *		119408	0					
ANR	120347	Identifier	op_array		119408	1					
ANR	120348	ElseStatement	else		119408	0					
ANR	120349	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_INVOKE_FUNC_NAME ) )"		119408	0					
ANR	120350	Condition	"zend_string_equals_literal ( lcname , ZEND_INVOKE_FUNC_NAME )"	4769:13:140650:140706	119408	0	True				
ANR	120351	CallExpression	"zend_string_equals_literal ( lcname , ZEND_INVOKE_FUNC_NAME )"		119408	0					
ANR	120352	Callee	zend_string_equals_literal		119408	0					
ANR	120353	Identifier	zend_string_equals_literal		119408	0					
ANR	120354	ArgumentList	lcname		119408	1					
ANR	120355	Argument	lcname		119408	0					
ANR	120356	Identifier	lcname		119408	0					
ANR	120357	Argument	ZEND_INVOKE_FUNC_NAME		119408	1					
ANR	120358	Identifier	ZEND_INVOKE_FUNC_NAME		119408	0					
ANR	120359	CompoundStatement		150:72:6354:6354	119408	1					
ANR	120360	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	120361	Condition	! is_public || is_static	4770:7:140718:140740	119408	0	True				
ANR	120362	OrExpression	! is_public || is_static		119408	0		||			
ANR	120363	UnaryOperationExpression	! is_public		119408	0					
ANR	120364	UnaryOperator	!		119408	0					
ANR	120365	Identifier	is_public		119408	1					
ANR	120366	Identifier	is_static		119408	1					
ANR	120367	CompoundStatement		151:32:6388:6388	119408	1					
ANR	120368	Statement	zend_error	4771:4:140749:140758	119408	0	True				
ANR	120369	Statement	(	4771:14:140759:140759	119408	1	True				
ANR	120370	Statement	E_WARNING	4771:15:140760:140768	119408	2	True				
ANR	120371	Statement	","	4771:24:140769:140769	119408	3	True				
ANR	120372	Statement	"""The magic method __invoke() must have """	4771:26:140771:140810	119408	4	True				
ANR	120373	Statement	"""public visibility and cannot be static"""	4772:5:140817:140856	119408	5	True				
ANR	120374	Statement	)	4772:45:140857:140857	119408	6	True				
ANR	120375	ExpressionStatement		4772:46:140858:140858	119408	7	True				
ANR	120376	ElseStatement	else		119408	0					
ANR	120377	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_DEBUGINFO_FUNC_NAME ) )"		119408	0					
ANR	120378	Condition	"zend_string_equals_literal ( lcname , ZEND_DEBUGINFO_FUNC_NAME )"	4774:13:140878:140937	119408	0	True				
ANR	120379	CallExpression	"zend_string_equals_literal ( lcname , ZEND_DEBUGINFO_FUNC_NAME )"		119408	0					
ANR	120380	Callee	zend_string_equals_literal		119408	0					
ANR	120381	Identifier	zend_string_equals_literal		119408	0					
ANR	120382	ArgumentList	lcname		119408	1					
ANR	120383	Argument	lcname		119408	0					
ANR	120384	Identifier	lcname		119408	0					
ANR	120385	Argument	ZEND_DEBUGINFO_FUNC_NAME		119408	1					
ANR	120386	Identifier	ZEND_DEBUGINFO_FUNC_NAME		119408	0					
ANR	120387	CompoundStatement		155:75:6585:6585	119408	1					
ANR	120388	IfStatement	if ( ! is_public || is_static )		119408	0					
ANR	120389	Condition	! is_public || is_static	4775:7:140949:140971	119408	0	True				
ANR	120390	OrExpression	! is_public || is_static		119408	0		||			
ANR	120391	UnaryOperationExpression	! is_public		119408	0					
ANR	120392	UnaryOperator	!		119408	0					
ANR	120393	Identifier	is_public		119408	1					
ANR	120394	Identifier	is_static		119408	1					
ANR	120395	CompoundStatement		156:32:6619:6619	119408	1					
ANR	120396	Statement	zend_error	4776:4:140980:140989	119408	0	True				
ANR	120397	Statement	(	4776:14:140990:140990	119408	1	True				
ANR	120398	Statement	E_WARNING	4776:15:140991:140999	119408	2	True				
ANR	120399	Statement	","	4776:24:141000:141000	119408	3	True				
ANR	120400	Statement	"""The magic method __debugInfo() must have """	4776:26:141002:141044	119408	4	True				
ANR	120401	Statement	"""public visibility and cannot be static"""	4777:5:141051:141090	119408	5	True				
ANR	120402	Statement	)	4777:45:141091:141091	119408	6	True				
ANR	120403	ExpressionStatement		4777:46:141092:141092	119408	7	True				
ANR	120404	ExpressionStatement	ce -> __debugInfo = ( zend_function * ) op_array	4779:3:141102:141146	119408	1	True				
ANR	120405	AssignmentExpression	ce -> __debugInfo = ( zend_function * ) op_array		119408	0		=			
ANR	120406	PtrMemberAccess	ce -> __debugInfo		119408	0					
ANR	120407	Identifier	ce		119408	0					
ANR	120408	Identifier	__debugInfo		119408	1					
ANR	120409	CastExpression	( zend_function * ) op_array		119408	1					
ANR	120410	CastTarget	zend_function *		119408	0					
ANR	120411	Identifier	op_array		119408	1					
ANR	120412	ElseStatement	else		119408	0					
ANR	120413	IfStatement	if ( ! is_static )		119408	0					
ANR	120414	Condition	! is_static	4780:13:141161:141170	119408	0	True				
ANR	120415	UnaryOperationExpression	! is_static		119408	0					
ANR	120416	UnaryOperator	!		119408	0					
ANR	120417	Identifier	is_static		119408	1					
ANR	120418	CompoundStatement		161:25:6818:6818	119408	1					
ANR	120419	ExpressionStatement	op_array -> fn_flags |= ZEND_ACC_ALLOW_STATIC	4781:3:141178:141221	119408	0	True				
ANR	120420	AssignmentExpression	op_array -> fn_flags |= ZEND_ACC_ALLOW_STATIC		119408	0		|=			
ANR	120421	PtrMemberAccess	op_array -> fn_flags		119408	0					
ANR	120422	Identifier	op_array		119408	0					
ANR	120423	Identifier	fn_flags		119408	1					
ANR	120424	Identifier	ZEND_ACC_ALLOW_STATIC		119408	1					
ANR	120425	ExpressionStatement	zend_string_release ( lcname )	4785:1:141232:141259	119408	14	True				
ANR	120426	CallExpression	zend_string_release ( lcname )		119408	0					
ANR	120427	Callee	zend_string_release		119408	0					
ANR	120428	Identifier	zend_string_release		119408	0					
ANR	120429	ArgumentList	lcname		119408	1					
ANR	120430	Argument	lcname		119408	0					
ANR	120431	Identifier	lcname		119408	0					
ANR	120432	ReturnType	void		119408	1					
ANR	120433	Identifier	zend_begin_method_decl		119408	2					
ANR	120434	ParameterList	"zend_op_array * op_array , zend_string * name , zend_bool has_body"		119408	3					
ANR	120435	Parameter	zend_op_array * op_array	4619:28:134280:134302	119408	0	True				
ANR	120436	ParameterType	zend_op_array *		119408	0					
ANR	120437	Identifier	op_array		119408	1					
ANR	120438	Parameter	zend_string * name	4619:53:134305:134321	119408	1	True				
ANR	120439	ParameterType	zend_string *		119408	0					
ANR	120440	Identifier	name		119408	1					
ANR	120441	Parameter	zend_bool has_body	4619:72:134324:134341	119408	2	True				
ANR	120442	ParameterType	zend_bool		119408	0					
ANR	120443	Identifier	has_body		119408	1					
ANR	120444	CFGEntryNode	ENTRY		119408		True				
ANR	120445	CFGExitNode	EXIT		119408		True				
ANR	120446	Symbol	zend_string_equals_literal		119408						
ANR	120447	Symbol	ce -> __set		119408						
ANR	120448	Symbol	ZEND_CALLSTATIC_FUNC_NAME		119408						
ANR	120449	Symbol	active_class_entry		119408						
ANR	120450	Symbol	E_COMPILE_ERROR		119408						
ANR	120451	Symbol	ZEND_CONSTRUCTOR_FUNC_NAME		119408						
ANR	120452	Symbol	ZEND_ACC_USE_GUARDS		119408						
ANR	120453	Symbol	in_trait		119408						
ANR	120454	Symbol	* ce		119408						
ANR	120455	Symbol	zend_string_tolower		119408						
ANR	120456	Symbol	ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		119408						
ANR	120457	Symbol	ce -> __tostring		119408						
ANR	120458	Symbol	op_array -> fn_flags		119408						
ANR	120459	Symbol	ZEND_CLONE_FUNC_NAME		119408						
ANR	120460	Symbol	ce -> __get		119408						
ANR	120461	Symbol	ZEND_ISSET_FUNC_NAME		119408						
ANR	120462	Symbol	ZEND_ACC_INTERFACE		119408						
ANR	120463	Symbol	ce -> name		119408						
ANR	120464	Symbol	ce -> __callstatic		119408						
ANR	120465	Symbol	NULL		119408						
ANR	120466	Symbol	ce -> destructor		119408						
ANR	120467	Symbol	ce -> __isset		119408						
ANR	120468	Symbol	zend_string_copy		119408						
ANR	120469	Symbol	* op_array		119408						
ANR	120470	Symbol	ZEND_ACC_TRAIT		119408						
ANR	120471	Symbol	ce -> ce_flags		119408						
ANR	120472	Symbol	ce -> __debugInfo		119408						
ANR	120473	Symbol	ce -> __call		119408						
ANR	120474	Symbol	name		119408						
ANR	120475	Symbol	ZEND_TOSTRING_FUNC_NAME		119408						
ANR	120476	Symbol	ZEND_DESTRUCTOR_FUNC_NAME		119408						
ANR	120477	Symbol	zend_hash_add_ptr		119408						
ANR	120478	Symbol	ce -> clone		119408						
ANR	120479	Symbol	ZEND_ACC_ALLOW_STATIC		119408						
ANR	120480	Symbol	ZEND_UNSET_FUNC_NAME		119408						
ANR	120481	Symbol	ZEND_INVOKE_FUNC_NAME		119408						
ANR	120482	Symbol	ZEND_ACC_PPP_MASK		119408						
ANR	120483	Symbol	zend_string_equals_ci		119408						
ANR	120484	Symbol	ZEND_ACC_PUBLIC		119408						
ANR	120485	Symbol	in_interface		119408						
ANR	120486	Symbol	& ce -> function_table		119408						
ANR	120487	Symbol	ZEND_GET_FUNC_NAME		119408						
ANR	120488	Symbol	ZEND_DEBUGINFO_FUNC_NAME		119408						
ANR	120489	Symbol	ZEND_CALL_FUNC_NAME		119408						
ANR	120490	Symbol	is_static		119408						
ANR	120491	Symbol	ZEND_ACC_STATIC		119408						
ANR	120492	Symbol	ZEND_SET_FUNC_NAME		119408						
ANR	120493	Symbol	ce		119408						
ANR	120494	Symbol	ce -> constructor		119408						
ANR	120495	Symbol	CG		119408						
ANR	120496	Symbol	op_array -> scope		119408						
ANR	120497	Symbol	ZEND_ACC_PRIVATE		119408						
ANR	120498	Symbol	ZSTR_VAL		119408						
ANR	120499	Symbol	op_array -> function_name		119408						
ANR	120500	Symbol	ZEND_ACC_ABSTRACT		119408						
ANR	120501	Symbol	ce -> __unset		119408						
ANR	120502	Symbol	lcname		119408						
ANR	120503	Symbol	zend_new_interned_string		119408						
ANR	120504	Symbol	is_public		119408						
ANR	120505	Symbol	has_body		119408						
ANR	120506	Symbol	op_array		119408						
ANR	120507	Function	zend_begin_func_decl	4789:0:141274:142675							
ANR	120508	FunctionDef	"zend_begin_func_decl (znode * result , zend_op_array * op_array , zend_ast_decl * decl)"		120507	0					
ANR	120509	CompoundStatement		4790:0:141378:142675	120507	0					
ANR	120510	IdentifierDeclStatement	zend_ast * params_ast = decl -> child [ 0 ] ;	4791:1:141381:141418	120507	0	True				
ANR	120511	IdentifierDecl	* params_ast = decl -> child [ 0 ]		120507	0					
ANR	120512	IdentifierDeclType	zend_ast *		120507	0					
ANR	120513	Identifier	params_ast		120507	1					
ANR	120514	AssignmentExpression	* params_ast = decl -> child [ 0 ]		120507	2		=			
ANR	120515	Identifier	params_ast		120507	0					
ANR	120516	ArrayIndexing	decl -> child [ 0 ]		120507	1					
ANR	120517	PtrMemberAccess	decl -> child		120507	0					
ANR	120518	Identifier	decl		120507	0					
ANR	120519	Identifier	child		120507	1					
ANR	120520	PrimaryExpression	0		120507	1					
ANR	120521	IdentifierDeclStatement	"zend_string * name = decl -> name , * lcname ;"	4792:1:141421:141460	120507	1	True				
ANR	120522	IdentifierDecl	* name = decl -> name		120507	0					
ANR	120523	IdentifierDeclType	zend_string *		120507	0					
ANR	120524	Identifier	name		120507	1					
ANR	120525	AssignmentExpression	* name = decl -> name		120507	2		=			
ANR	120526	Identifier	name		120507	0					
ANR	120527	PtrMemberAccess	decl -> name		120507	1					
ANR	120528	Identifier	decl		120507	0					
ANR	120529	Identifier	name		120507	1					
ANR	120530	IdentifierDecl	* lcname		120507	1					
ANR	120531	IdentifierDeclType	zend_string *		120507	0					
ANR	120532	Identifier	lcname		120507	1					
ANR	120533	IdentifierDeclStatement	zend_op * opline ;	4793:1:141463:141478	120507	2	True				
ANR	120534	IdentifierDecl	* opline		120507	0					
ANR	120535	IdentifierDeclType	zend_op *		120507	0					
ANR	120536	Identifier	opline		120507	1					
ANR	120537	ExpressionStatement	op_array -> function_name = name = zend_prefix_with_ns ( name )	4795:1:141482:141540	120507	3	True				
ANR	120538	AssignmentExpression	op_array -> function_name = name = zend_prefix_with_ns ( name )		120507	0		=			
ANR	120539	PtrMemberAccess	op_array -> function_name		120507	0					
ANR	120540	Identifier	op_array		120507	0					
ANR	120541	Identifier	function_name		120507	1					
ANR	120542	AssignmentExpression	name = zend_prefix_with_ns ( name )		120507	1		=			
ANR	120543	Identifier	name		120507	0					
ANR	120544	CallExpression	zend_prefix_with_ns ( name )		120507	1					
ANR	120545	Callee	zend_prefix_with_ns		120507	0					
ANR	120546	Identifier	zend_prefix_with_ns		120507	0					
ANR	120547	ArgumentList	name		120507	1					
ANR	120548	Argument	name		120507	0					
ANR	120549	Identifier	name		120507	0					
ANR	120550	ExpressionStatement	lcname = zend_string_tolower ( name )	4797:1:141544:141578	120507	4	True				
ANR	120551	AssignmentExpression	lcname = zend_string_tolower ( name )		120507	0		=			
ANR	120552	Identifier	lcname		120507	0					
ANR	120553	CallExpression	zend_string_tolower ( name )		120507	1					
ANR	120554	Callee	zend_string_tolower		120507	0					
ANR	120555	Identifier	zend_string_tolower		120507	0					
ANR	120556	ArgumentList	name		120507	1					
ANR	120557	Argument	name		120507	0					
ANR	120558	Identifier	name		120507	0					
ANR	120559	IfStatement	if ( FC ( imports_function ) )		120507	5					
ANR	120560	Condition	FC ( imports_function )	4799:5:141586:141605	120507	0	True				
ANR	120561	CallExpression	FC ( imports_function )		120507	0					
ANR	120562	Callee	FC		120507	0					
ANR	120563	Identifier	FC		120507	0					
ANR	120564	ArgumentList	imports_function		120507	1					
ANR	120565	Argument	imports_function		120507	0					
ANR	120566	Identifier	imports_function		120507	0					
ANR	120567	CompoundStatement		11:2:233:308	120507	1					
ANR	120568	IdentifierDeclStatement	"zend_string * import_name = zend_hash_find_ptr ( FC ( imports_function ) , lcname ) ;"	4800:2:141612:141687	120507	0	True				
ANR	120569	IdentifierDecl	"* import_name = zend_hash_find_ptr ( FC ( imports_function ) , lcname )"		120507	0					
ANR	120570	IdentifierDeclType	zend_string *		120507	0					
ANR	120571	Identifier	import_name		120507	1					
ANR	120572	AssignmentExpression	"* import_name = zend_hash_find_ptr ( FC ( imports_function ) , lcname )"		120507	2		=			
ANR	120573	Identifier	import_name		120507	0					
ANR	120574	CallExpression	"zend_hash_find_ptr ( FC ( imports_function ) , lcname )"		120507	1					
ANR	120575	Callee	zend_hash_find_ptr		120507	0					
ANR	120576	Identifier	zend_hash_find_ptr		120507	0					
ANR	120577	ArgumentList	FC ( imports_function )		120507	1					
ANR	120578	Argument	FC ( imports_function )		120507	0					
ANR	120579	CallExpression	FC ( imports_function )		120507	0					
ANR	120580	Callee	FC		120507	0					
ANR	120581	Identifier	FC		120507	0					
ANR	120582	ArgumentList	imports_function		120507	1					
ANR	120583	Argument	imports_function		120507	0					
ANR	120584	Identifier	imports_function		120507	0					
ANR	120585	Argument	lcname		120507	1					
ANR	120586	Identifier	lcname		120507	0					
ANR	120587	IfStatement	"if ( import_name && ! zend_string_equals_ci ( lcname , import_name ) )"		120507	1					
ANR	120588	Condition	"import_name && ! zend_string_equals_ci ( lcname , import_name )"	4801:6:141695:141752	120507	0	True				
ANR	120589	AndExpression	"import_name && ! zend_string_equals_ci ( lcname , import_name )"		120507	0		&&			
ANR	120590	Identifier	import_name		120507	0					
ANR	120591	UnaryOperationExpression	"! zend_string_equals_ci ( lcname , import_name )"		120507	1					
ANR	120592	UnaryOperator	!		120507	0					
ANR	120593	CallExpression	"zend_string_equals_ci ( lcname , import_name )"		120507	1					
ANR	120594	Callee	zend_string_equals_ci		120507	0					
ANR	120595	Identifier	zend_string_equals_ci		120507	0					
ANR	120596	ArgumentList	lcname		120507	1					
ANR	120597	Argument	lcname		120507	0					
ANR	120598	Identifier	lcname		120507	0					
ANR	120599	Argument	import_name		120507	1					
ANR	120600	Identifier	import_name		120507	0					
ANR	120601	CompoundStatement		12:66:376:376	120507	1					
ANR	120602	Statement	zend_error_noreturn	4802:3:141760:141778	120507	0	True				
ANR	120603	Statement	(	4802:22:141779:141779	120507	1	True				
ANR	120604	Statement	E_COMPILE_ERROR	4802:23:141780:141794	120507	2	True				
ANR	120605	Statement	","	4802:38:141795:141795	120507	3	True				
ANR	120606	Statement	"""Cannot declare function %s """	4802:40:141797:141825	120507	4	True				
ANR	120607	Statement	"""because the name is already in use"""	4803:4:141831:141866	120507	5	True				
ANR	120608	Statement	","	4803:40:141867:141867	120507	6	True				
ANR	120609	Statement	ZSTR_VAL	4803:42:141869:141876	120507	7	True				
ANR	120610	Statement	(	4803:50:141877:141877	120507	8	True				
ANR	120611	Statement	name	4803:51:141878:141881	120507	9	True				
ANR	120612	Statement	)	4803:55:141882:141882	120507	10	True				
ANR	120613	Statement	)	4803:56:141883:141883	120507	11	True				
ANR	120614	ExpressionStatement		4803:57:141884:141884	120507	12	True				
ANR	120615	IfStatement	"if ( zend_string_equals_literal ( lcname , ZEND_AUTOLOAD_FUNC_NAME ) && zend_ast_get_list ( params_ast ) -> children != 1 )"		120507	6					
ANR	120616	Condition	"zend_string_equals_literal ( lcname , ZEND_AUTOLOAD_FUNC_NAME ) && zend_ast_get_list ( params_ast ) -> children != 1"	4807:5:141899:142007	120507	0	True				
ANR	120617	AndExpression	"zend_string_equals_literal ( lcname , ZEND_AUTOLOAD_FUNC_NAME ) && zend_ast_get_list ( params_ast ) -> children != 1"		120507	0		&&			
ANR	120618	CallExpression	"zend_string_equals_literal ( lcname , ZEND_AUTOLOAD_FUNC_NAME )"		120507	0					
ANR	120619	Callee	zend_string_equals_literal		120507	0					
ANR	120620	Identifier	zend_string_equals_literal		120507	0					
ANR	120621	ArgumentList	lcname		120507	1					
ANR	120622	Argument	lcname		120507	0					
ANR	120623	Identifier	lcname		120507	0					
ANR	120624	Argument	ZEND_AUTOLOAD_FUNC_NAME		120507	1					
ANR	120625	Identifier	ZEND_AUTOLOAD_FUNC_NAME		120507	0					
ANR	120626	EqualityExpression	zend_ast_get_list ( params_ast ) -> children != 1		120507	1		!=			
ANR	120627	PtrMemberAccess	zend_ast_get_list ( params_ast ) -> children		120507	0					
ANR	120628	CallExpression	zend_ast_get_list ( params_ast )		120507	0					
ANR	120629	Callee	zend_ast_get_list		120507	0					
ANR	120630	Identifier	zend_ast_get_list		120507	0					
ANR	120631	ArgumentList	params_ast		120507	1					
ANR	120632	Argument	params_ast		120507	0					
ANR	120633	Identifier	params_ast		120507	0					
ANR	120634	Identifier	children		120507	1					
ANR	120635	PrimaryExpression	1		120507	1					
ANR	120636	CompoundStatement		20:3:633:633	120507	1					
ANR	120637	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s() must take exactly 1 argument"" , ZEND_AUTOLOAD_FUNC_NAME )"	4810:2:142016:142117	120507	0	True				
ANR	120638	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s() must take exactly 1 argument"" , ZEND_AUTOLOAD_FUNC_NAME )"		120507	0					
ANR	120639	Callee	zend_error_noreturn		120507	0					
ANR	120640	Identifier	zend_error_noreturn		120507	0					
ANR	120641	ArgumentList	E_COMPILE_ERROR		120507	1					
ANR	120642	Argument	E_COMPILE_ERROR		120507	0					
ANR	120643	Identifier	E_COMPILE_ERROR		120507	0					
ANR	120644	Argument	"""%s() must take exactly 1 argument"""		120507	1					
ANR	120645	PrimaryExpression	"""%s() must take exactly 1 argument"""		120507	0					
ANR	120646	Argument	ZEND_AUTOLOAD_FUNC_NAME		120507	2					
ANR	120647	Identifier	ZEND_AUTOLOAD_FUNC_NAME		120507	0					
ANR	120648	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_CLOSURE )		120507	7					
ANR	120649	Condition	op_array -> fn_flags & ZEND_ACC_CLOSURE	4814:5:142128:142164	120507	0	True				
ANR	120650	BitAndExpression	op_array -> fn_flags & ZEND_ACC_CLOSURE		120507	0		&			
ANR	120651	PtrMemberAccess	op_array -> fn_flags		120507	0					
ANR	120652	Identifier	op_array		120507	0					
ANR	120653	Identifier	fn_flags		120507	1					
ANR	120654	Identifier	ZEND_ACC_CLOSURE		120507	1					
ANR	120655	CompoundStatement		25:44:788:788	120507	1					
ANR	120656	ExpressionStatement	"opline = zend_emit_op_tmp ( result , ZEND_DECLARE_LAMBDA_FUNCTION , NULL , NULL )"	4815:2:142171:142246	120507	0	True				
ANR	120657	AssignmentExpression	"opline = zend_emit_op_tmp ( result , ZEND_DECLARE_LAMBDA_FUNCTION , NULL , NULL )"		120507	0		=			
ANR	120658	Identifier	opline		120507	0					
ANR	120659	CallExpression	"zend_emit_op_tmp ( result , ZEND_DECLARE_LAMBDA_FUNCTION , NULL , NULL )"		120507	1					
ANR	120660	Callee	zend_emit_op_tmp		120507	0					
ANR	120661	Identifier	zend_emit_op_tmp		120507	0					
ANR	120662	ArgumentList	result		120507	1					
ANR	120663	Argument	result		120507	0					
ANR	120664	Identifier	result		120507	0					
ANR	120665	Argument	ZEND_DECLARE_LAMBDA_FUNCTION		120507	1					
ANR	120666	Identifier	ZEND_DECLARE_LAMBDA_FUNCTION		120507	0					
ANR	120667	Argument	NULL		120507	2					
ANR	120668	Identifier	NULL		120507	0					
ANR	120669	Argument	NULL		120507	3					
ANR	120670	Identifier	NULL		120507	0					
ANR	120671	ElseStatement	else		120507	0					
ANR	120672	CompoundStatement		27:8:877:877	120507	0					
ANR	120673	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	4817:2:142260:142301	120507	0	True				
ANR	120674	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		120507	0		=			
ANR	120675	Identifier	opline		120507	0					
ANR	120676	CallExpression	get_next_op ( CG ( active_op_array ) )		120507	1					
ANR	120677	Callee	get_next_op		120507	0					
ANR	120678	Identifier	get_next_op		120507	0					
ANR	120679	ArgumentList	CG ( active_op_array )		120507	1					
ANR	120680	Argument	CG ( active_op_array )		120507	0					
ANR	120681	CallExpression	CG ( active_op_array )		120507	0					
ANR	120682	Callee	CG		120507	0					
ANR	120683	Identifier	CG		120507	0					
ANR	120684	ArgumentList	active_op_array		120507	1					
ANR	120685	Argument	active_op_array		120507	0					
ANR	120686	Identifier	active_op_array		120507	0					
ANR	120687	ExpressionStatement	opline -> opcode = ZEND_DECLARE_FUNCTION	4818:2:142305:142343	120507	1	True				
ANR	120688	AssignmentExpression	opline -> opcode = ZEND_DECLARE_FUNCTION		120507	0		=			
ANR	120689	PtrMemberAccess	opline -> opcode		120507	0					
ANR	120690	Identifier	opline		120507	0					
ANR	120691	Identifier	opcode		120507	1					
ANR	120692	Identifier	ZEND_DECLARE_FUNCTION		120507	1					
ANR	120693	ExpressionStatement	opline -> op2_type = IS_CONST	4819:2:142347:142374	120507	2	True				
ANR	120694	AssignmentExpression	opline -> op2_type = IS_CONST		120507	0		=			
ANR	120695	PtrMemberAccess	opline -> op2_type		120507	0					
ANR	120696	Identifier	opline		120507	0					
ANR	120697	Identifier	op2_type		120507	1					
ANR	120698	Identifier	IS_CONST		120507	1					
ANR	120699	ExpressionStatement	"LITERAL_STR ( opline -> op2 , zend_string_copy ( lcname ) )"	4820:2:142378:142428	120507	3	True				
ANR	120700	CallExpression	"LITERAL_STR ( opline -> op2 , zend_string_copy ( lcname ) )"		120507	0					
ANR	120701	Callee	LITERAL_STR		120507	0					
ANR	120702	Identifier	LITERAL_STR		120507	0					
ANR	120703	ArgumentList	opline -> op2		120507	1					
ANR	120704	Argument	opline -> op2		120507	0					
ANR	120705	PtrMemberAccess	opline -> op2		120507	0					
ANR	120706	Identifier	opline		120507	0					
ANR	120707	Identifier	op2		120507	1					
ANR	120708	Argument	zend_string_copy ( lcname )		120507	1					
ANR	120709	CallExpression	zend_string_copy ( lcname )		120507	0					
ANR	120710	Callee	zend_string_copy		120507	0					
ANR	120711	Identifier	zend_string_copy		120507	0					
ANR	120712	ArgumentList	lcname		120507	1					
ANR	120713	Argument	lcname		120507	0					
ANR	120714	Identifier	lcname		120507	0					
ANR	120715	CompoundStatement		35:2:1060:1135	120507	8					
ANR	120716	IdentifierDeclStatement	"zend_string * key = zend_build_runtime_definition_key ( lcname , decl -> lex_pos ) ;"	4824:2:142439:142514	120507	0	True				
ANR	120717	IdentifierDecl	"* key = zend_build_runtime_definition_key ( lcname , decl -> lex_pos )"		120507	0					
ANR	120718	IdentifierDeclType	zend_string *		120507	0					
ANR	120719	Identifier	key		120507	1					
ANR	120720	AssignmentExpression	"* key = zend_build_runtime_definition_key ( lcname , decl -> lex_pos )"		120507	2		=			
ANR	120721	Identifier	key		120507	0					
ANR	120722	CallExpression	"zend_build_runtime_definition_key ( lcname , decl -> lex_pos )"		120507	1					
ANR	120723	Callee	zend_build_runtime_definition_key		120507	0					
ANR	120724	Identifier	zend_build_runtime_definition_key		120507	0					
ANR	120725	ArgumentList	lcname		120507	1					
ANR	120726	Argument	lcname		120507	0					
ANR	120727	Identifier	lcname		120507	0					
ANR	120728	Argument	decl -> lex_pos		120507	1					
ANR	120729	PtrMemberAccess	decl -> lex_pos		120507	0					
ANR	120730	Identifier	decl		120507	0					
ANR	120731	Identifier	lex_pos		120507	1					
ANR	120732	ExpressionStatement	opline -> op1_type = IS_CONST	4826:2:142519:142546	120507	1	True				
ANR	120733	AssignmentExpression	opline -> op1_type = IS_CONST		120507	0		=			
ANR	120734	PtrMemberAccess	opline -> op1_type		120507	0					
ANR	120735	Identifier	opline		120507	0					
ANR	120736	Identifier	op1_type		120507	1					
ANR	120737	Identifier	IS_CONST		120507	1					
ANR	120738	ExpressionStatement	"LITERAL_STR ( opline -> op1 , key )"	4827:2:142550:142579	120507	2	True				
ANR	120739	CallExpression	"LITERAL_STR ( opline -> op1 , key )"		120507	0					
ANR	120740	Callee	LITERAL_STR		120507	0					
ANR	120741	Identifier	LITERAL_STR		120507	0					
ANR	120742	ArgumentList	opline -> op1		120507	1					
ANR	120743	Argument	opline -> op1		120507	0					
ANR	120744	PtrMemberAccess	opline -> op1		120507	0					
ANR	120745	Identifier	opline		120507	0					
ANR	120746	Identifier	op1		120507	1					
ANR	120747	Argument	key		120507	1					
ANR	120748	Identifier	key		120507	0					
ANR	120749	ExpressionStatement	"zend_hash_update_ptr ( CG ( function_table ) , key , op_array )"	4829:2:142584:142639	120507	3	True				
ANR	120750	CallExpression	"zend_hash_update_ptr ( CG ( function_table ) , key , op_array )"		120507	0					
ANR	120751	Callee	zend_hash_update_ptr		120507	0					
ANR	120752	Identifier	zend_hash_update_ptr		120507	0					
ANR	120753	ArgumentList	CG ( function_table )		120507	1					
ANR	120754	Argument	CG ( function_table )		120507	0					
ANR	120755	CallExpression	CG ( function_table )		120507	0					
ANR	120756	Callee	CG		120507	0					
ANR	120757	Identifier	CG		120507	0					
ANR	120758	ArgumentList	function_table		120507	1					
ANR	120759	Argument	function_table		120507	0					
ANR	120760	Identifier	function_table		120507	0					
ANR	120761	Argument	key		120507	1					
ANR	120762	Identifier	key		120507	0					
ANR	120763	Argument	op_array		120507	2					
ANR	120764	Identifier	op_array		120507	0					
ANR	120765	ExpressionStatement	zend_string_release ( lcname )	4832:1:142646:142673	120507	9	True				
ANR	120766	CallExpression	zend_string_release ( lcname )		120507	0					
ANR	120767	Callee	zend_string_release		120507	0					
ANR	120768	Identifier	zend_string_release		120507	0					
ANR	120769	ArgumentList	lcname		120507	1					
ANR	120770	Argument	lcname		120507	0					
ANR	120771	Identifier	lcname		120507	0					
ANR	120772	ReturnType	static void		120507	1					
ANR	120773	Identifier	zend_begin_func_decl		120507	2					
ANR	120774	ParameterList	"znode * result , zend_op_array * op_array , zend_ast_decl * decl"		120507	3					
ANR	120775	Parameter	znode * result	4789:33:141307:141319	120507	0	True				
ANR	120776	ParameterType	znode *		120507	0					
ANR	120777	Identifier	result		120507	1					
ANR	120778	Parameter	zend_op_array * op_array	4789:48:141322:141344	120507	1	True				
ANR	120779	ParameterType	zend_op_array *		120507	0					
ANR	120780	Identifier	op_array		120507	1					
ANR	120781	Parameter	zend_ast_decl * decl	4789:73:141347:141365	120507	2	True				
ANR	120782	ParameterType	zend_ast_decl *		120507	0					
ANR	120783	Identifier	decl		120507	1					
ANR	120784	CFGEntryNode	ENTRY		120507		True				
ANR	120785	CFGExitNode	EXIT		120507		True				
ANR	120786	Symbol	* * decl		120507						
ANR	120787	Symbol	opline -> op1		120507						
ANR	120788	Symbol	zend_string_equals_literal		120507						
ANR	120789	Symbol	zend_emit_op_tmp		120507						
ANR	120790	Symbol	opline -> op2		120507						
ANR	120791	Symbol	zend_build_runtime_definition_key		120507						
ANR	120792	Symbol	decl		120507						
ANR	120793	Symbol	zend_string_equals_ci		120507						
ANR	120794	Symbol	E_COMPILE_ERROR		120507						
ANR	120795	Symbol	zend_prefix_with_ns		120507						
ANR	120796	Symbol	zend_string_tolower		120507						
ANR	120797	Symbol	imports_function		120507						
ANR	120798	Symbol	result		120507						
ANR	120799	Symbol	opline		120507						
ANR	120800	Symbol	op_array -> fn_flags		120507						
ANR	120801	Symbol	params_ast		120507						
ANR	120802	Symbol	zend_hash_find_ptr		120507						
ANR	120803	Symbol	ZEND_AUTOLOAD_FUNC_NAME		120507						
ANR	120804	Symbol	key		120507						
ANR	120805	Symbol	decl -> name		120507						
ANR	120806	Symbol	IS_CONST		120507						
ANR	120807	Symbol	* decl -> child		120507						
ANR	120808	Symbol	NULL		120507						
ANR	120809	Symbol	get_next_op		120507						
ANR	120810	Symbol	CG		120507						
ANR	120811	Symbol	ZEND_DECLARE_FUNCTION		120507						
ANR	120812	Symbol	active_op_array		120507						
ANR	120813	Symbol	import_name		120507						
ANR	120814	Symbol	zend_string_copy		120507						
ANR	120815	Symbol	* zend_ast_get_list		120507						
ANR	120816	Symbol	* op_array		120507						
ANR	120817	Symbol	opline -> op1_type		120507						
ANR	120818	Symbol	op_array -> function_name		120507						
ANR	120819	Symbol	ZEND_DECLARE_LAMBDA_FUNCTION		120507						
ANR	120820	Symbol	zend_ast_get_list		120507						
ANR	120821	Symbol	ZEND_ACC_CLOSURE		120507						
ANR	120822	Symbol	lcname		120507						
ANR	120823	Symbol	* opline		120507						
ANR	120824	Symbol	decl -> child		120507						
ANR	120825	Symbol	opline -> opcode		120507						
ANR	120826	Symbol	decl -> lex_pos		120507						
ANR	120827	Symbol	name		120507						
ANR	120828	Symbol	opline -> op2_type		120507						
ANR	120829	Symbol	function_table		120507						
ANR	120830	Symbol	* decl		120507						
ANR	120831	Symbol	FC		120507						
ANR	120832	Symbol	op_array		120507						
ANR	120833	Symbol	zend_ast_get_list ( params_ast ) -> children		120507						
ANR	120834	Function	zend_compile_func_decl	4836:0:142688:144900							
ANR	120835	FunctionDef	"zend_compile_func_decl (znode * result , zend_ast * ast)"		120834	0					
ANR	120836	CompoundStatement		4837:0:142756:144900	120834	0					
ANR	120837	IdentifierDeclStatement	zend_ast_decl * decl = ( zend_ast_decl * ) ast ;	4838:1:142759:142802	120834	0	True				
ANR	120838	IdentifierDecl	* decl = ( zend_ast_decl * ) ast		120834	0					
ANR	120839	IdentifierDeclType	zend_ast_decl *		120834	0					
ANR	120840	Identifier	decl		120834	1					
ANR	120841	AssignmentExpression	* decl = ( zend_ast_decl * ) ast		120834	2		=			
ANR	120842	Identifier	decl		120834	0					
ANR	120843	CastExpression	( zend_ast_decl * ) ast		120834	1					
ANR	120844	CastTarget	zend_ast_decl *		120834	0					
ANR	120845	Identifier	ast		120834	1					
ANR	120846	IdentifierDeclStatement	zend_ast * params_ast = decl -> child [ 0 ] ;	4839:1:142805:142842	120834	1	True				
ANR	120847	IdentifierDecl	* params_ast = decl -> child [ 0 ]		120834	0					
ANR	120848	IdentifierDeclType	zend_ast *		120834	0					
ANR	120849	Identifier	params_ast		120834	1					
ANR	120850	AssignmentExpression	* params_ast = decl -> child [ 0 ]		120834	2		=			
ANR	120851	Identifier	params_ast		120834	0					
ANR	120852	ArrayIndexing	decl -> child [ 0 ]		120834	1					
ANR	120853	PtrMemberAccess	decl -> child		120834	0					
ANR	120854	Identifier	decl		120834	0					
ANR	120855	Identifier	child		120834	1					
ANR	120856	PrimaryExpression	0		120834	1					
ANR	120857	IdentifierDeclStatement	zend_ast * uses_ast = decl -> child [ 1 ] ;	4840:1:142845:142880	120834	2	True				
ANR	120858	IdentifierDecl	* uses_ast = decl -> child [ 1 ]		120834	0					
ANR	120859	IdentifierDeclType	zend_ast *		120834	0					
ANR	120860	Identifier	uses_ast		120834	1					
ANR	120861	AssignmentExpression	* uses_ast = decl -> child [ 1 ]		120834	2		=			
ANR	120862	Identifier	uses_ast		120834	0					
ANR	120863	ArrayIndexing	decl -> child [ 1 ]		120834	1					
ANR	120864	PtrMemberAccess	decl -> child		120834	0					
ANR	120865	Identifier	decl		120834	0					
ANR	120866	Identifier	child		120834	1					
ANR	120867	PrimaryExpression	1		120834	1					
ANR	120868	IdentifierDeclStatement	zend_ast * stmt_ast = decl -> child [ 2 ] ;	4841:1:142883:142918	120834	3	True				
ANR	120869	IdentifierDecl	* stmt_ast = decl -> child [ 2 ]		120834	0					
ANR	120870	IdentifierDeclType	zend_ast *		120834	0					
ANR	120871	Identifier	stmt_ast		120834	1					
ANR	120872	AssignmentExpression	* stmt_ast = decl -> child [ 2 ]		120834	2		=			
ANR	120873	Identifier	stmt_ast		120834	0					
ANR	120874	ArrayIndexing	decl -> child [ 2 ]		120834	1					
ANR	120875	PtrMemberAccess	decl -> child		120834	0					
ANR	120876	Identifier	decl		120834	0					
ANR	120877	Identifier	child		120834	1					
ANR	120878	PrimaryExpression	2		120834	1					
ANR	120879	IdentifierDeclStatement	zend_ast * return_type_ast = decl -> child [ 3 ] ;	4842:1:142921:142963	120834	4	True				
ANR	120880	IdentifierDecl	* return_type_ast = decl -> child [ 3 ]		120834	0					
ANR	120881	IdentifierDeclType	zend_ast *		120834	0					
ANR	120882	Identifier	return_type_ast		120834	1					
ANR	120883	AssignmentExpression	* return_type_ast = decl -> child [ 3 ]		120834	2		=			
ANR	120884	Identifier	return_type_ast		120834	0					
ANR	120885	ArrayIndexing	decl -> child [ 3 ]		120834	1					
ANR	120886	PtrMemberAccess	decl -> child		120834	0					
ANR	120887	Identifier	decl		120834	0					
ANR	120888	Identifier	child		120834	1					
ANR	120889	PrimaryExpression	3		120834	1					
ANR	120890	IdentifierDeclStatement	zend_bool is_method = decl -> kind == ZEND_AST_METHOD ;	4843:1:142966:143017	120834	5	True				
ANR	120891	IdentifierDecl	is_method = decl -> kind == ZEND_AST_METHOD		120834	0					
ANR	120892	IdentifierDeclType	zend_bool		120834	0					
ANR	120893	Identifier	is_method		120834	1					
ANR	120894	AssignmentExpression	is_method = decl -> kind == ZEND_AST_METHOD		120834	2		=			
ANR	120895	Identifier	is_method		120834	0					
ANR	120896	EqualityExpression	decl -> kind == ZEND_AST_METHOD		120834	1		==			
ANR	120897	PtrMemberAccess	decl -> kind		120834	0					
ANR	120898	Identifier	decl		120834	0					
ANR	120899	Identifier	kind		120834	1					
ANR	120900	Identifier	ZEND_AST_METHOD		120834	1					
ANR	120901	IdentifierDeclStatement	zend_op_array * orig_op_array = CG ( active_op_array ) ;	4845:1:143021:143071	120834	6	True				
ANR	120902	IdentifierDecl	* orig_op_array = CG ( active_op_array )		120834	0					
ANR	120903	IdentifierDeclType	zend_op_array *		120834	0					
ANR	120904	Identifier	orig_op_array		120834	1					
ANR	120905	AssignmentExpression	* orig_op_array = CG ( active_op_array )		120834	2		=			
ANR	120906	Identifier	orig_op_array		120834	0					
ANR	120907	CallExpression	CG ( active_op_array )		120834	1					
ANR	120908	Callee	CG		120834	0					
ANR	120909	Identifier	CG		120834	0					
ANR	120910	ArgumentList	active_op_array		120834	1					
ANR	120911	Argument	active_op_array		120834	0					
ANR	120912	Identifier	active_op_array		120834	0					
ANR	120913	IdentifierDeclStatement	"zend_op_array * op_array = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_op_array ) ) ;"	4846:1:143074:143151	120834	7	True				
ANR	120914	IdentifierDecl	"* op_array = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_op_array ) )"		120834	0					
ANR	120915	IdentifierDeclType	zend_op_array *		120834	0					
ANR	120916	Identifier	op_array		120834	1					
ANR	120917	AssignmentExpression	"* op_array = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_op_array ) )"		120834	2		=			
ANR	120918	Identifier	op_array		120834	0					
ANR	120919	CallExpression	"zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_op_array ) )"		120834	1					
ANR	120920	Callee	zend_arena_alloc		120834	0					
ANR	120921	Identifier	zend_arena_alloc		120834	0					
ANR	120922	ArgumentList	& CG ( arena )		120834	1					
ANR	120923	Argument	& CG ( arena )		120834	0					
ANR	120924	UnaryOperationExpression	& CG ( arena )		120834	0					
ANR	120925	UnaryOperator	&		120834	0					
ANR	120926	CallExpression	CG ( arena )		120834	1					
ANR	120927	Callee	CG		120834	0					
ANR	120928	Identifier	CG		120834	0					
ANR	120929	ArgumentList	arena		120834	1					
ANR	120930	Argument	arena		120834	0					
ANR	120931	Identifier	arena		120834	0					
ANR	120932	Argument	sizeof ( zend_op_array )		120834	1					
ANR	120933	SizeofExpression	sizeof ( zend_op_array )		120834	0					
ANR	120934	Sizeof	sizeof		120834	0					
ANR	120935	SizeofOperand	zend_op_array		120834	1					
ANR	120936	IdentifierDeclStatement	zend_oparray_context orig_oparray_context ;	4847:1:143154:143195	120834	8	True				
ANR	120937	IdentifierDecl	orig_oparray_context		120834	0					
ANR	120938	IdentifierDeclType	zend_oparray_context		120834	0					
ANR	120939	Identifier	orig_oparray_context		120834	1					
ANR	120940	ExpressionStatement	"init_op_array ( op_array , ZEND_USER_FUNCTION , INITIAL_OP_ARRAY_SIZE )"	4849:1:143199:143265	120834	9	True				
ANR	120941	CallExpression	"init_op_array ( op_array , ZEND_USER_FUNCTION , INITIAL_OP_ARRAY_SIZE )"		120834	0					
ANR	120942	Callee	init_op_array		120834	0					
ANR	120943	Identifier	init_op_array		120834	0					
ANR	120944	ArgumentList	op_array		120834	1					
ANR	120945	Argument	op_array		120834	0					
ANR	120946	Identifier	op_array		120834	0					
ANR	120947	Argument	ZEND_USER_FUNCTION		120834	1					
ANR	120948	Identifier	ZEND_USER_FUNCTION		120834	0					
ANR	120949	Argument	INITIAL_OP_ARRAY_SIZE		120834	2					
ANR	120950	Identifier	INITIAL_OP_ARRAY_SIZE		120834	0					
ANR	120951	ExpressionStatement	op_array -> fn_flags |= ( orig_op_array -> fn_flags & ZEND_ACC_STRICT_TYPES )	4851:1:143269:143340	120834	10	True				
ANR	120952	AssignmentExpression	op_array -> fn_flags |= ( orig_op_array -> fn_flags & ZEND_ACC_STRICT_TYPES )		120834	0		|=			
ANR	120953	PtrMemberAccess	op_array -> fn_flags		120834	0					
ANR	120954	Identifier	op_array		120834	0					
ANR	120955	Identifier	fn_flags		120834	1					
ANR	120956	BitAndExpression	orig_op_array -> fn_flags & ZEND_ACC_STRICT_TYPES		120834	1		&			
ANR	120957	PtrMemberAccess	orig_op_array -> fn_flags		120834	0					
ANR	120958	Identifier	orig_op_array		120834	0					
ANR	120959	Identifier	fn_flags		120834	1					
ANR	120960	Identifier	ZEND_ACC_STRICT_TYPES		120834	1					
ANR	120961	ExpressionStatement	op_array -> fn_flags |= decl -> flags	4852:1:143343:143376	120834	11	True				
ANR	120962	AssignmentExpression	op_array -> fn_flags |= decl -> flags		120834	0		|=			
ANR	120963	PtrMemberAccess	op_array -> fn_flags		120834	0					
ANR	120964	Identifier	op_array		120834	0					
ANR	120965	Identifier	fn_flags		120834	1					
ANR	120966	PtrMemberAccess	decl -> flags		120834	1					
ANR	120967	Identifier	decl		120834	0					
ANR	120968	Identifier	flags		120834	1					
ANR	120969	ExpressionStatement	op_array -> line_start = decl -> start_lineno	4853:1:143379:143420	120834	12	True				
ANR	120970	AssignmentExpression	op_array -> line_start = decl -> start_lineno		120834	0		=			
ANR	120971	PtrMemberAccess	op_array -> line_start		120834	0					
ANR	120972	Identifier	op_array		120834	0					
ANR	120973	Identifier	line_start		120834	1					
ANR	120974	PtrMemberAccess	decl -> start_lineno		120834	1					
ANR	120975	Identifier	decl		120834	0					
ANR	120976	Identifier	start_lineno		120834	1					
ANR	120977	ExpressionStatement	op_array -> line_end = decl -> end_lineno	4854:1:143423:143460	120834	13	True				
ANR	120978	AssignmentExpression	op_array -> line_end = decl -> end_lineno		120834	0		=			
ANR	120979	PtrMemberAccess	op_array -> line_end		120834	0					
ANR	120980	Identifier	op_array		120834	0					
ANR	120981	Identifier	line_end		120834	1					
ANR	120982	PtrMemberAccess	decl -> end_lineno		120834	1					
ANR	120983	Identifier	decl		120834	0					
ANR	120984	Identifier	end_lineno		120834	1					
ANR	120985	IfStatement	if ( decl -> doc_comment )		120834	14					
ANR	120986	Condition	decl -> doc_comment	4855:5:143467:143483	120834	0	True				
ANR	120987	PtrMemberAccess	decl -> doc_comment		120834	0					
ANR	120988	Identifier	decl		120834	0					
ANR	120989	Identifier	doc_comment		120834	1					
ANR	120990	CompoundStatement		19:24:729:729	120834	1					
ANR	120991	ExpressionStatement	op_array -> doc_comment = zend_string_copy ( decl -> doc_comment )	4856:2:143490:143549	120834	0	True				
ANR	120992	AssignmentExpression	op_array -> doc_comment = zend_string_copy ( decl -> doc_comment )		120834	0		=			
ANR	120993	PtrMemberAccess	op_array -> doc_comment		120834	0					
ANR	120994	Identifier	op_array		120834	0					
ANR	120995	Identifier	doc_comment		120834	1					
ANR	120996	CallExpression	zend_string_copy ( decl -> doc_comment )		120834	1					
ANR	120997	Callee	zend_string_copy		120834	0					
ANR	120998	Identifier	zend_string_copy		120834	0					
ANR	120999	ArgumentList	decl -> doc_comment		120834	1					
ANR	121000	Argument	decl -> doc_comment		120834	0					
ANR	121001	PtrMemberAccess	decl -> doc_comment		120834	0					
ANR	121002	Identifier	decl		120834	0					
ANR	121003	Identifier	doc_comment		120834	1					
ANR	121004	IfStatement	if ( decl -> kind == ZEND_AST_CLOSURE )		120834	15					
ANR	121005	Condition	decl -> kind == ZEND_AST_CLOSURE	4858:5:143559:143588	120834	0	True				
ANR	121006	EqualityExpression	decl -> kind == ZEND_AST_CLOSURE		120834	0		==			
ANR	121007	PtrMemberAccess	decl -> kind		120834	0					
ANR	121008	Identifier	decl		120834	0					
ANR	121009	Identifier	kind		120834	1					
ANR	121010	Identifier	ZEND_AST_CLOSURE		120834	1					
ANR	121011	CompoundStatement		22:37:834:834	120834	1					
ANR	121012	ExpressionStatement	op_array -> fn_flags |= ZEND_ACC_CLOSURE	4859:2:143595:143633	120834	0	True				
ANR	121013	AssignmentExpression	op_array -> fn_flags |= ZEND_ACC_CLOSURE		120834	0		|=			
ANR	121014	PtrMemberAccess	op_array -> fn_flags		120834	0					
ANR	121015	Identifier	op_array		120834	0					
ANR	121016	Identifier	fn_flags		120834	1					
ANR	121017	Identifier	ZEND_ACC_CLOSURE		120834	1					
ANR	121018	IfStatement	if ( is_method )		120834	16					
ANR	121019	Condition	is_method	4862:5:143644:143652	120834	0	True				
ANR	121020	Identifier	is_method		120834	0					
ANR	121021	CompoundStatement		27:2:902:939	120834	1					
ANR	121022	IdentifierDeclStatement	zend_bool has_body = stmt_ast != NULL ;	4863:2:143659:143696	120834	0	True				
ANR	121023	IdentifierDecl	has_body = stmt_ast != NULL		120834	0					
ANR	121024	IdentifierDeclType	zend_bool		120834	0					
ANR	121025	Identifier	has_body		120834	1					
ANR	121026	AssignmentExpression	has_body = stmt_ast != NULL		120834	2		=			
ANR	121027	Identifier	has_body		120834	0					
ANR	121028	EqualityExpression	stmt_ast != NULL		120834	1		!=			
ANR	121029	Identifier	stmt_ast		120834	0					
ANR	121030	Identifier	NULL		120834	1					
ANR	121031	ExpressionStatement	"zend_begin_method_decl ( op_array , decl -> name , has_body )"	4864:2:143700:143754	120834	1	True				
ANR	121032	CallExpression	"zend_begin_method_decl ( op_array , decl -> name , has_body )"		120834	0					
ANR	121033	Callee	zend_begin_method_decl		120834	0					
ANR	121034	Identifier	zend_begin_method_decl		120834	0					
ANR	121035	ArgumentList	op_array		120834	1					
ANR	121036	Argument	op_array		120834	0					
ANR	121037	Identifier	op_array		120834	0					
ANR	121038	Argument	decl -> name		120834	1					
ANR	121039	PtrMemberAccess	decl -> name		120834	0					
ANR	121040	Identifier	decl		120834	0					
ANR	121041	Identifier	name		120834	1					
ANR	121042	Argument	has_body		120834	2					
ANR	121043	Identifier	has_body		120834	0					
ANR	121044	ElseStatement	else		120834	0					
ANR	121045	CompoundStatement		29:8:1007:1007	120834	0					
ANR	121046	ExpressionStatement	"zend_begin_func_decl ( result , op_array , decl )"	4866:2:143768:143812	120834	0	True				
ANR	121047	CallExpression	"zend_begin_func_decl ( result , op_array , decl )"		120834	0					
ANR	121048	Callee	zend_begin_func_decl		120834	0					
ANR	121049	Identifier	zend_begin_func_decl		120834	0					
ANR	121050	ArgumentList	result		120834	1					
ANR	121051	Argument	result		120834	0					
ANR	121052	Identifier	result		120834	0					
ANR	121053	Argument	op_array		120834	1					
ANR	121054	Identifier	op_array		120834	0					
ANR	121055	Argument	decl		120834	2					
ANR	121056	Identifier	decl		120834	0					
ANR	121057	ExpressionStatement	CG ( active_op_array ) = op_array	4869:1:143819:143849	120834	17	True				
ANR	121058	AssignmentExpression	CG ( active_op_array ) = op_array		120834	0		=			
ANR	121059	CallExpression	CG ( active_op_array )		120834	0					
ANR	121060	Callee	CG		120834	0					
ANR	121061	Identifier	CG		120834	0					
ANR	121062	ArgumentList	active_op_array		120834	1					
ANR	121063	Argument	active_op_array		120834	0					
ANR	121064	Identifier	active_op_array		120834	0					
ANR	121065	Identifier	op_array		120834	1					
ANR	121066	ExpressionStatement	zend_oparray_context_begin ( & orig_oparray_context )	4871:1:143853:143902	120834	18	True				
ANR	121067	CallExpression	zend_oparray_context_begin ( & orig_oparray_context )		120834	0					
ANR	121068	Callee	zend_oparray_context_begin		120834	0					
ANR	121069	Identifier	zend_oparray_context_begin		120834	0					
ANR	121070	ArgumentList	& orig_oparray_context		120834	1					
ANR	121071	Argument	& orig_oparray_context		120834	0					
ANR	121072	UnaryOperationExpression	& orig_oparray_context		120834	0					
ANR	121073	UnaryOperator	&		120834	0					
ANR	121074	Identifier	orig_oparray_context		120834	1					
ANR	121075	IfStatement	if ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO )		120834	19					
ANR	121076	Condition	CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO	4873:5:143910:143958	120834	0	True				
ANR	121077	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO		120834	0		&			
ANR	121078	CallExpression	CG ( compiler_options )		120834	0					
ANR	121079	Callee	CG		120834	0					
ANR	121080	Identifier	CG		120834	0					
ANR	121081	ArgumentList	compiler_options		120834	1					
ANR	121082	Argument	compiler_options		120834	0					
ANR	121083	Identifier	compiler_options		120834	0					
ANR	121084	Identifier	ZEND_COMPILE_EXTENDED_INFO		120834	1					
ANR	121085	CompoundStatement		38:2:1208:1274	120834	1					
ANR	121086	IdentifierDeclStatement	"zend_op * opline_ext = zend_emit_op ( NULL , ZEND_EXT_NOP , NULL , NULL ) ;"	4874:2:143965:144031	120834	0	True				
ANR	121087	IdentifierDecl	"* opline_ext = zend_emit_op ( NULL , ZEND_EXT_NOP , NULL , NULL )"		120834	0					
ANR	121088	IdentifierDeclType	zend_op *		120834	0					
ANR	121089	Identifier	opline_ext		120834	1					
ANR	121090	AssignmentExpression	"* opline_ext = zend_emit_op ( NULL , ZEND_EXT_NOP , NULL , NULL )"		120834	2		=			
ANR	121091	Identifier	opline_ext		120834	0					
ANR	121092	CallExpression	"zend_emit_op ( NULL , ZEND_EXT_NOP , NULL , NULL )"		120834	1					
ANR	121093	Callee	zend_emit_op		120834	0					
ANR	121094	Identifier	zend_emit_op		120834	0					
ANR	121095	ArgumentList	NULL		120834	1					
ANR	121096	Argument	NULL		120834	0					
ANR	121097	Identifier	NULL		120834	0					
ANR	121098	Argument	ZEND_EXT_NOP		120834	1					
ANR	121099	Identifier	ZEND_EXT_NOP		120834	0					
ANR	121100	Argument	NULL		120834	2					
ANR	121101	Identifier	NULL		120834	0					
ANR	121102	Argument	NULL		120834	3					
ANR	121103	Identifier	NULL		120834	0					
ANR	121104	ExpressionStatement	opline_ext -> lineno = decl -> start_lineno	4875:2:144035:144074	120834	1	True				
ANR	121105	AssignmentExpression	opline_ext -> lineno = decl -> start_lineno		120834	0		=			
ANR	121106	PtrMemberAccess	opline_ext -> lineno		120834	0					
ANR	121107	Identifier	opline_ext		120834	0					
ANR	121108	Identifier	lineno		120834	1					
ANR	121109	PtrMemberAccess	decl -> start_lineno		120834	1					
ANR	121110	Identifier	decl		120834	0					
ANR	121111	Identifier	start_lineno		120834	1					
ANR	121112	CompoundStatement		44:2:1380:1403	120834	20					
ANR	121113	IdentifierDeclStatement	zend_loop_var dummy_var ;	4880:2:144137:144160	120834	0	True				
ANR	121114	IdentifierDecl	dummy_var		120834	0					
ANR	121115	IdentifierDeclType	zend_loop_var		120834	0					
ANR	121116	Identifier	dummy_var		120834	1					
ANR	121117	ExpressionStatement	dummy_var . opcode = ZEND_RETURN	4881:2:144164:144194	120834	1	True				
ANR	121118	AssignmentExpression	dummy_var . opcode = ZEND_RETURN		120834	0		=			
ANR	121119	MemberAccess	dummy_var . opcode		120834	0					
ANR	121120	Identifier	dummy_var		120834	0					
ANR	121121	Identifier	opcode		120834	1					
ANR	121122	Identifier	ZEND_RETURN		120834	1					
ANR	121123	ExpressionStatement	"zend_stack_push ( & CG ( loop_var_stack ) , ( void * ) & dummy_var )"	4883:2:144199:144256	120834	2	True				
ANR	121124	CallExpression	"zend_stack_push ( & CG ( loop_var_stack ) , ( void * ) & dummy_var )"		120834	0					
ANR	121125	Callee	zend_stack_push		120834	0					
ANR	121126	Identifier	zend_stack_push		120834	0					
ANR	121127	ArgumentList	& CG ( loop_var_stack )		120834	1					
ANR	121128	Argument	& CG ( loop_var_stack )		120834	0					
ANR	121129	UnaryOperationExpression	& CG ( loop_var_stack )		120834	0					
ANR	121130	UnaryOperator	&		120834	0					
ANR	121131	CallExpression	CG ( loop_var_stack )		120834	1					
ANR	121132	Callee	CG		120834	0					
ANR	121133	Identifier	CG		120834	0					
ANR	121134	ArgumentList	loop_var_stack		120834	1					
ANR	121135	Argument	loop_var_stack		120834	0					
ANR	121136	Identifier	loop_var_stack		120834	0					
ANR	121137	Argument	( void * ) & dummy_var		120834	1					
ANR	121138	CastExpression	( void * ) & dummy_var		120834	0					
ANR	121139	CastTarget	void *		120834	0					
ANR	121140	UnaryOperationExpression	& dummy_var		120834	1					
ANR	121141	UnaryOperator	&		120834	0					
ANR	121142	Identifier	dummy_var		120834	1					
ANR	121143	ExpressionStatement	"zend_compile_params ( params_ast , return_type_ast )"	4886:1:144263:144311	120834	21	True				
ANR	121144	CallExpression	"zend_compile_params ( params_ast , return_type_ast )"		120834	0					
ANR	121145	Callee	zend_compile_params		120834	0					
ANR	121146	Identifier	zend_compile_params		120834	0					
ANR	121147	ArgumentList	params_ast		120834	1					
ANR	121148	Argument	params_ast		120834	0					
ANR	121149	Identifier	params_ast		120834	0					
ANR	121150	Argument	return_type_ast		120834	1					
ANR	121151	Identifier	return_type_ast		120834	0					
ANR	121152	IfStatement	if ( uses_ast )		120834	22					
ANR	121153	Condition	uses_ast	4887:5:144318:144325	120834	0	True				
ANR	121154	Identifier	uses_ast		120834	0					
ANR	121155	CompoundStatement		51:15:1571:1571	120834	1					
ANR	121156	ExpressionStatement	zend_compile_closure_uses ( uses_ast )	4888:2:144332:144367	120834	0	True				
ANR	121157	CallExpression	zend_compile_closure_uses ( uses_ast )		120834	0					
ANR	121158	Callee	zend_compile_closure_uses		120834	0					
ANR	121159	Identifier	zend_compile_closure_uses		120834	0					
ANR	121160	ArgumentList	uses_ast		120834	1					
ANR	121161	Argument	uses_ast		120834	0					
ANR	121162	Identifier	uses_ast		120834	0					
ANR	121163	ExpressionStatement	zend_compile_stmt ( stmt_ast )	4890:1:144373:144400	120834	23	True				
ANR	121164	CallExpression	zend_compile_stmt ( stmt_ast )		120834	0					
ANR	121165	Callee	zend_compile_stmt		120834	0					
ANR	121166	Identifier	zend_compile_stmt		120834	0					
ANR	121167	ArgumentList	stmt_ast		120834	1					
ANR	121168	Argument	stmt_ast		120834	0					
ANR	121169	Identifier	stmt_ast		120834	0					
ANR	121170	IfStatement	if ( is_method )		120834	24					
ANR	121171	Condition	is_method	4892:5:144408:144416	120834	0	True				
ANR	121172	Identifier	is_method		120834	0					
ANR	121173	CompoundStatement		56:16:1662:1662	120834	1					
ANR	121174	ExpressionStatement	"zend_check_magic_method_implementation ( CG ( active_class_entry ) , ( zend_function * ) op_array , E_COMPILE_ERROR )"	4893:2:144423:144534	120834	0	True				
ANR	121175	CallExpression	"zend_check_magic_method_implementation ( CG ( active_class_entry ) , ( zend_function * ) op_array , E_COMPILE_ERROR )"		120834	0					
ANR	121176	Callee	zend_check_magic_method_implementation		120834	0					
ANR	121177	Identifier	zend_check_magic_method_implementation		120834	0					
ANR	121178	ArgumentList	CG ( active_class_entry )		120834	1					
ANR	121179	Argument	CG ( active_class_entry )		120834	0					
ANR	121180	CallExpression	CG ( active_class_entry )		120834	0					
ANR	121181	Callee	CG		120834	0					
ANR	121182	Identifier	CG		120834	0					
ANR	121183	ArgumentList	active_class_entry		120834	1					
ANR	121184	Argument	active_class_entry		120834	0					
ANR	121185	Identifier	active_class_entry		120834	0					
ANR	121186	Argument	( zend_function * ) op_array		120834	1					
ANR	121187	CastExpression	( zend_function * ) op_array		120834	0					
ANR	121188	CastTarget	zend_function *		120834	0					
ANR	121189	Identifier	op_array		120834	1					
ANR	121190	Argument	E_COMPILE_ERROR		120834	2					
ANR	121191	Identifier	E_COMPILE_ERROR		120834	0					
ANR	121192	ExpressionStatement	CG ( zend_lineno ) = decl -> end_lineno	4898:1:144596:144630	120834	25	True				
ANR	121193	AssignmentExpression	CG ( zend_lineno ) = decl -> end_lineno		120834	0		=			
ANR	121194	CallExpression	CG ( zend_lineno )		120834	0					
ANR	121195	Callee	CG		120834	0					
ANR	121196	Identifier	CG		120834	0					
ANR	121197	ArgumentList	zend_lineno		120834	1					
ANR	121198	Argument	zend_lineno		120834	0					
ANR	121199	Identifier	zend_lineno		120834	0					
ANR	121200	PtrMemberAccess	decl -> end_lineno		120834	1					
ANR	121201	Identifier	decl		120834	0					
ANR	121202	Identifier	end_lineno		120834	1					
ANR	121203	ExpressionStatement	zend_do_extended_info ( )	4900:1:144634:144657	120834	26	True				
ANR	121204	CallExpression	zend_do_extended_info ( )		120834	0					
ANR	121205	Callee	zend_do_extended_info		120834	0					
ANR	121206	Identifier	zend_do_extended_info		120834	0					
ANR	121207	ArgumentList			120834	1					
ANR	121208	ExpressionStatement	zend_emit_final_return ( NULL )	4901:1:144660:144688	120834	27	True				
ANR	121209	CallExpression	zend_emit_final_return ( NULL )		120834	0					
ANR	121210	Callee	zend_emit_final_return		120834	0					
ANR	121211	Identifier	zend_emit_final_return		120834	0					
ANR	121212	ArgumentList	NULL		120834	1					
ANR	121213	Argument	NULL		120834	0					
ANR	121214	Identifier	NULL		120834	0					
ANR	121215	ExpressionStatement	pass_two ( CG ( active_op_array ) )	4903:1:144692:144721	120834	28	True				
ANR	121216	CallExpression	pass_two ( CG ( active_op_array ) )		120834	0					
ANR	121217	Callee	pass_two		120834	0					
ANR	121218	Identifier	pass_two		120834	0					
ANR	121219	ArgumentList	CG ( active_op_array )		120834	1					
ANR	121220	Argument	CG ( active_op_array )		120834	0					
ANR	121221	CallExpression	CG ( active_op_array )		120834	0					
ANR	121222	Callee	CG		120834	0					
ANR	121223	Identifier	CG		120834	0					
ANR	121224	ArgumentList	active_op_array		120834	1					
ANR	121225	Argument	active_op_array		120834	0					
ANR	121226	Identifier	active_op_array		120834	0					
ANR	121227	ExpressionStatement	zend_oparray_context_end ( & orig_oparray_context )	4904:1:144724:144771	120834	29	True				
ANR	121228	CallExpression	zend_oparray_context_end ( & orig_oparray_context )		120834	0					
ANR	121229	Callee	zend_oparray_context_end		120834	0					
ANR	121230	Identifier	zend_oparray_context_end		120834	0					
ANR	121231	ArgumentList	& orig_oparray_context		120834	1					
ANR	121232	Argument	& orig_oparray_context		120834	0					
ANR	121233	UnaryOperationExpression	& orig_oparray_context		120834	0					
ANR	121234	UnaryOperator	&		120834	0					
ANR	121235	Identifier	orig_oparray_context		120834	1					
ANR	121236	ExpressionStatement	zend_stack_del_top ( & CG ( loop_var_stack ) )	4907:1:144820:144859	120834	30	True				
ANR	121237	CallExpression	zend_stack_del_top ( & CG ( loop_var_stack ) )		120834	0					
ANR	121238	Callee	zend_stack_del_top		120834	0					
ANR	121239	Identifier	zend_stack_del_top		120834	0					
ANR	121240	ArgumentList	& CG ( loop_var_stack )		120834	1					
ANR	121241	Argument	& CG ( loop_var_stack )		120834	0					
ANR	121242	UnaryOperationExpression	& CG ( loop_var_stack )		120834	0					
ANR	121243	UnaryOperator	&		120834	0					
ANR	121244	CallExpression	CG ( loop_var_stack )		120834	1					
ANR	121245	Callee	CG		120834	0					
ANR	121246	Identifier	CG		120834	0					
ANR	121247	ArgumentList	loop_var_stack		120834	1					
ANR	121248	Argument	loop_var_stack		120834	0					
ANR	121249	Identifier	loop_var_stack		120834	0					
ANR	121250	ExpressionStatement	CG ( active_op_array ) = orig_op_array	4909:1:144863:144898	120834	31	True				
ANR	121251	AssignmentExpression	CG ( active_op_array ) = orig_op_array		120834	0		=			
ANR	121252	CallExpression	CG ( active_op_array )		120834	0					
ANR	121253	Callee	CG		120834	0					
ANR	121254	Identifier	CG		120834	0					
ANR	121255	ArgumentList	active_op_array		120834	1					
ANR	121256	Argument	active_op_array		120834	0					
ANR	121257	Identifier	active_op_array		120834	0					
ANR	121258	Identifier	orig_op_array		120834	1					
ANR	121259	ReturnType	void		120834	1					
ANR	121260	Identifier	zend_compile_func_decl		120834	2					
ANR	121261	ParameterList	"znode * result , zend_ast * ast"		120834	3					
ANR	121262	Parameter	znode * result	4836:28:142716:142728	120834	0	True				
ANR	121263	ParameterType	znode *		120834	0					
ANR	121264	Identifier	result		120834	1					
ANR	121265	Parameter	zend_ast * ast	4836:43:142731:142743	120834	1	True				
ANR	121266	ParameterType	zend_ast *		120834	0					
ANR	121267	Identifier	ast		120834	1					
ANR	121268	CFGEntryNode	ENTRY		120834		True				
ANR	121269	CFGExitNode	EXIT		120834		True				
ANR	121270	Symbol	stmt_ast		120834						
ANR	121271	Symbol	op_array -> line_start		120834						
ANR	121272	Symbol	ast		120834						
ANR	121273	Symbol	decl		120834						
ANR	121274	Symbol	opline_ext -> lineno		120834						
ANR	121275	Symbol	E_COMPILE_ERROR		120834						
ANR	121276	Symbol	active_class_entry		120834						
ANR	121277	Symbol	arena		120834						
ANR	121278	Symbol	op_array -> line_end		120834						
ANR	121279	Symbol	INITIAL_OP_ARRAY_SIZE		120834						
ANR	121280	Symbol	& CG		120834						
ANR	121281	Symbol	decl -> flags		120834						
ANR	121282	Symbol	* opline_ext		120834						
ANR	121283	Symbol	opline_ext		120834						
ANR	121284	Symbol	dummy_var		120834						
ANR	121285	Symbol	op_array -> fn_flags		120834						
ANR	121286	Symbol	decl -> doc_comment		120834						
ANR	121287	Symbol	orig_op_array		120834						
ANR	121288	Symbol	ZEND_USER_FUNCTION		120834						
ANR	121289	Symbol	decl -> end_lineno		120834						
ANR	121290	Symbol	orig_oparray_context		120834						
ANR	121291	Symbol	ZEND_ACC_STRICT_TYPES		120834						
ANR	121292	Symbol	zend_lineno		120834						
ANR	121293	Symbol	* decl -> child		120834						
ANR	121294	Symbol	NULL		120834						
ANR	121295	Symbol	ZEND_RETURN		120834						
ANR	121296	Symbol	zend_arena_alloc		120834						
ANR	121297	Symbol	decl -> start_lineno		120834						
ANR	121298	Symbol	* orig_op_array		120834						
ANR	121299	Symbol	zend_string_copy		120834						
ANR	121300	Symbol	ZEND_COMPILE_EXTENDED_INFO		120834						
ANR	121301	Symbol	* op_array		120834						
ANR	121302	Symbol	ZEND_AST_CLOSURE		120834						
ANR	121303	Symbol	& dummy_var		120834						
ANR	121304	Symbol	uses_ast		120834						
ANR	121305	Symbol	zend_emit_op		120834						
ANR	121306	Symbol	* * decl		120834						
ANR	121307	Symbol	orig_op_array -> fn_flags		120834						
ANR	121308	Symbol	& orig_oparray_context		120834						
ANR	121309	Symbol	result		120834						
ANR	121310	Symbol	compiler_options		120834						
ANR	121311	Symbol	loop_var_stack		120834						
ANR	121312	Symbol	params_ast		120834						
ANR	121313	Symbol	ZEND_AST_METHOD		120834						
ANR	121314	Symbol	op_array -> doc_comment		120834						
ANR	121315	Symbol	decl -> name		120834						
ANR	121316	Symbol	CG		120834						
ANR	121317	Symbol	active_op_array		120834						
ANR	121318	Symbol	return_type_ast		120834						
ANR	121319	Symbol	decl -> kind		120834						
ANR	121320	Symbol	ZEND_EXT_NOP		120834						
ANR	121321	Symbol	ZEND_ACC_CLOSURE		120834						
ANR	121322	Symbol	decl -> child		120834						
ANR	121323	Symbol	dummy_var . opcode		120834						
ANR	121324	Symbol	is_method		120834						
ANR	121325	Symbol	has_body		120834						
ANR	121326	Symbol	* decl		120834						
ANR	121327	Symbol	op_array		120834						
ANR	121328	Function	zend_compile_prop_decl	4913:0:144913:146502							
ANR	121329	FunctionDef	zend_compile_prop_decl (zend_ast * ast)		121328	0					
ANR	121330	CompoundStatement		4914:0:144966:146502	121328	0					
ANR	121331	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	4915:1:144969:145013	121328	0	True				
ANR	121332	IdentifierDecl	* list = zend_ast_get_list ( ast )		121328	0					
ANR	121333	IdentifierDeclType	zend_ast_list *		121328	0					
ANR	121334	Identifier	list		121328	1					
ANR	121335	AssignmentExpression	* list = zend_ast_get_list ( ast )		121328	2		=			
ANR	121336	Identifier	list		121328	0					
ANR	121337	CallExpression	zend_ast_get_list ( ast )		121328	1					
ANR	121338	Callee	zend_ast_get_list		121328	0					
ANR	121339	Identifier	zend_ast_get_list		121328	0					
ANR	121340	ArgumentList	ast		121328	1					
ANR	121341	Argument	ast		121328	0					
ANR	121342	Identifier	ast		121328	0					
ANR	121343	IdentifierDeclStatement	uint32_t flags = list -> attr ;	4916:1:145016:145043	121328	1	True				
ANR	121344	IdentifierDecl	flags = list -> attr		121328	0					
ANR	121345	IdentifierDeclType	uint32_t		121328	0					
ANR	121346	Identifier	flags		121328	1					
ANR	121347	AssignmentExpression	flags = list -> attr		121328	2		=			
ANR	121348	Identifier	flags		121328	0					
ANR	121349	PtrMemberAccess	list -> attr		121328	1					
ANR	121350	Identifier	list		121328	0					
ANR	121351	Identifier	attr		121328	1					
ANR	121352	IdentifierDeclStatement	zend_class_entry * ce = CG ( active_class_entry ) ;	4917:1:145046:145091	121328	2	True				
ANR	121353	IdentifierDecl	* ce = CG ( active_class_entry )		121328	0					
ANR	121354	IdentifierDeclType	zend_class_entry *		121328	0					
ANR	121355	Identifier	ce		121328	1					
ANR	121356	AssignmentExpression	* ce = CG ( active_class_entry )		121328	2		=			
ANR	121357	Identifier	ce		121328	0					
ANR	121358	CallExpression	CG ( active_class_entry )		121328	1					
ANR	121359	Callee	CG		121328	0					
ANR	121360	Identifier	CG		121328	0					
ANR	121361	ArgumentList	active_class_entry		121328	1					
ANR	121362	Argument	active_class_entry		121328	0					
ANR	121363	Identifier	active_class_entry		121328	0					
ANR	121364	IdentifierDeclStatement	"uint32_t i , children = list -> children ;"	4918:1:145094:145131	121328	3	True				
ANR	121365	IdentifierDecl	i		121328	0					
ANR	121366	IdentifierDeclType	uint32_t		121328	0					
ANR	121367	Identifier	i		121328	1					
ANR	121368	IdentifierDecl	children = list -> children		121328	1					
ANR	121369	IdentifierDeclType	uint32_t		121328	0					
ANR	121370	Identifier	children		121328	1					
ANR	121371	AssignmentExpression	children = list -> children		121328	2		=			
ANR	121372	Identifier	children		121328	0					
ANR	121373	PtrMemberAccess	list -> children		121328	1					
ANR	121374	Identifier	list		121328	0					
ANR	121375	Identifier	children		121328	1					
ANR	121376	IfStatement	if ( ce -> ce_flags & ZEND_ACC_INTERFACE )		121328	4					
ANR	121377	Condition	ce -> ce_flags & ZEND_ACC_INTERFACE	4920:5:145139:145171	121328	0	True				
ANR	121378	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		121328	0		&			
ANR	121379	PtrMemberAccess	ce -> ce_flags		121328	0					
ANR	121380	Identifier	ce		121328	0					
ANR	121381	Identifier	ce_flags		121328	1					
ANR	121382	Identifier	ZEND_ACC_INTERFACE		121328	1					
ANR	121383	CompoundStatement		7:40:207:207	121328	1					
ANR	121384	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Interfaces may not include member variables"" )"	4921:2:145178:145261	121328	0	True				
ANR	121385	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Interfaces may not include member variables"" )"		121328	0					
ANR	121386	Callee	zend_error_noreturn		121328	0					
ANR	121387	Identifier	zend_error_noreturn		121328	0					
ANR	121388	ArgumentList	E_COMPILE_ERROR		121328	1					
ANR	121389	Argument	E_COMPILE_ERROR		121328	0					
ANR	121390	Identifier	E_COMPILE_ERROR		121328	0					
ANR	121391	Argument	"""Interfaces may not include member variables"""		121328	1					
ANR	121392	PrimaryExpression	"""Interfaces may not include member variables"""		121328	0					
ANR	121393	IfStatement	if ( flags & ZEND_ACC_ABSTRACT )		121328	5					
ANR	121394	Condition	flags & ZEND_ACC_ABSTRACT	4924:5:145272:145296	121328	0	True				
ANR	121395	BitAndExpression	flags & ZEND_ACC_ABSTRACT		121328	0		&			
ANR	121396	Identifier	flags		121328	0					
ANR	121397	Identifier	ZEND_ACC_ABSTRACT		121328	1					
ANR	121398	CompoundStatement		11:32:332:332	121328	1					
ANR	121399	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Properties cannot be declared abstract"" )"	4925:2:145303:145381	121328	0	True				
ANR	121400	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Properties cannot be declared abstract"" )"		121328	0					
ANR	121401	Callee	zend_error_noreturn		121328	0					
ANR	121402	Identifier	zend_error_noreturn		121328	0					
ANR	121403	ArgumentList	E_COMPILE_ERROR		121328	1					
ANR	121404	Argument	E_COMPILE_ERROR		121328	0					
ANR	121405	Identifier	E_COMPILE_ERROR		121328	0					
ANR	121406	Argument	"""Properties cannot be declared abstract"""		121328	1					
ANR	121407	PrimaryExpression	"""Properties cannot be declared abstract"""		121328	0					
ANR	121408	ForStatement	for ( i = 0 ; i < children ; ++ i )		121328	6					
ANR	121409	ForInit	i = 0 ;	4928:6:145393:145398	121328	0	True				
ANR	121410	AssignmentExpression	i = 0		121328	0		=			
ANR	121411	Identifier	i		121328	0					
ANR	121412	PrimaryExpression	0		121328	1					
ANR	121413	Condition	i < children	4928:13:145400:145411	121328	1	True				
ANR	121414	RelationalExpression	i < children		121328	0		<			
ANR	121415	Identifier	i		121328	0					
ANR	121416	Identifier	children		121328	1					
ANR	121417	UnaryExpression	++ i	4928:27:145414:145416	121328	2	True				
ANR	121418	IncDec	++		121328	0					
ANR	121419	Identifier	i		121328	1					
ANR	121420	CompoundStatement		22:2:717:730	121328	3					
ANR	121421	IdentifierDeclStatement	zend_ast * prop_ast = list -> child [ i ] ;	4929:2:145423:145458	121328	0	True				
ANR	121422	IdentifierDecl	* prop_ast = list -> child [ i ]		121328	0					
ANR	121423	IdentifierDeclType	zend_ast *		121328	0					
ANR	121424	Identifier	prop_ast		121328	1					
ANR	121425	AssignmentExpression	* prop_ast = list -> child [ i ]		121328	2		=			
ANR	121426	Identifier	prop_ast		121328	0					
ANR	121427	ArrayIndexing	list -> child [ i ]		121328	1					
ANR	121428	PtrMemberAccess	list -> child		121328	0					
ANR	121429	Identifier	list		121328	0					
ANR	121430	Identifier	child		121328	1					
ANR	121431	Identifier	i		121328	1					
ANR	121432	IdentifierDeclStatement	zend_ast * name_ast = prop_ast -> child [ 0 ] ;	4930:2:145462:145501	121328	1	True				
ANR	121433	IdentifierDecl	* name_ast = prop_ast -> child [ 0 ]		121328	0					
ANR	121434	IdentifierDeclType	zend_ast *		121328	0					
ANR	121435	Identifier	name_ast		121328	1					
ANR	121436	AssignmentExpression	* name_ast = prop_ast -> child [ 0 ]		121328	2		=			
ANR	121437	Identifier	name_ast		121328	0					
ANR	121438	ArrayIndexing	prop_ast -> child [ 0 ]		121328	1					
ANR	121439	PtrMemberAccess	prop_ast -> child		121328	0					
ANR	121440	Identifier	prop_ast		121328	0					
ANR	121441	Identifier	child		121328	1					
ANR	121442	PrimaryExpression	0		121328	1					
ANR	121443	IdentifierDeclStatement	zend_ast * value_ast = prop_ast -> child [ 1 ] ;	4931:2:145505:145545	121328	2	True				
ANR	121444	IdentifierDecl	* value_ast = prop_ast -> child [ 1 ]		121328	0					
ANR	121445	IdentifierDeclType	zend_ast *		121328	0					
ANR	121446	Identifier	value_ast		121328	1					
ANR	121447	AssignmentExpression	* value_ast = prop_ast -> child [ 1 ]		121328	2		=			
ANR	121448	Identifier	value_ast		121328	0					
ANR	121449	ArrayIndexing	prop_ast -> child [ 1 ]		121328	1					
ANR	121450	PtrMemberAccess	prop_ast -> child		121328	0					
ANR	121451	Identifier	prop_ast		121328	0					
ANR	121452	Identifier	child		121328	1					
ANR	121453	PrimaryExpression	1		121328	1					
ANR	121454	IdentifierDeclStatement	zend_ast * doc_comment_ast = prop_ast -> child [ 2 ] ;	4932:2:145549:145595	121328	3	True				
ANR	121455	IdentifierDecl	* doc_comment_ast = prop_ast -> child [ 2 ]		121328	0					
ANR	121456	IdentifierDeclType	zend_ast *		121328	0					
ANR	121457	Identifier	doc_comment_ast		121328	1					
ANR	121458	AssignmentExpression	* doc_comment_ast = prop_ast -> child [ 2 ]		121328	2		=			
ANR	121459	Identifier	doc_comment_ast		121328	0					
ANR	121460	ArrayIndexing	prop_ast -> child [ 2 ]		121328	1					
ANR	121461	PtrMemberAccess	prop_ast -> child		121328	0					
ANR	121462	Identifier	prop_ast		121328	0					
ANR	121463	Identifier	child		121328	1					
ANR	121464	PrimaryExpression	2		121328	1					
ANR	121465	IdentifierDeclStatement	zend_string * name = zend_ast_get_str ( name_ast ) ;	4933:2:145599:145645	121328	4	True				
ANR	121466	IdentifierDecl	* name = zend_ast_get_str ( name_ast )		121328	0					
ANR	121467	IdentifierDeclType	zend_string *		121328	0					
ANR	121468	Identifier	name		121328	1					
ANR	121469	AssignmentExpression	* name = zend_ast_get_str ( name_ast )		121328	2		=			
ANR	121470	Identifier	name		121328	0					
ANR	121471	CallExpression	zend_ast_get_str ( name_ast )		121328	1					
ANR	121472	Callee	zend_ast_get_str		121328	0					
ANR	121473	Identifier	zend_ast_get_str		121328	0					
ANR	121474	ArgumentList	name_ast		121328	1					
ANR	121475	Argument	name_ast		121328	0					
ANR	121476	Identifier	name_ast		121328	0					
ANR	121477	IdentifierDeclStatement	zend_string * doc_comment = NULL ;	4934:2:145649:145680	121328	5	True				
ANR	121478	IdentifierDecl	* doc_comment = NULL		121328	0					
ANR	121479	IdentifierDeclType	zend_string *		121328	0					
ANR	121480	Identifier	doc_comment		121328	1					
ANR	121481	AssignmentExpression	* doc_comment = NULL		121328	2		=			
ANR	121482	Identifier	NULL		121328	0					
ANR	121483	Identifier	NULL		121328	1					
ANR	121484	IdentifierDeclStatement	zval value_zv ;	4935:2:145684:145697	121328	6	True				
ANR	121485	IdentifierDecl	value_zv		121328	0					
ANR	121486	IdentifierDeclType	zval		121328	0					
ANR	121487	Identifier	value_zv		121328	1					
ANR	121488	IfStatement	if ( doc_comment_ast )		121328	7					
ANR	121489	Condition	doc_comment_ast	4938:6:145786:145800	121328	0	True				
ANR	121490	Identifier	doc_comment_ast		121328	0					
ANR	121491	CompoundStatement		25:23:836:836	121328	1					
ANR	121492	ExpressionStatement	doc_comment = zend_string_copy ( zend_ast_get_str ( doc_comment_ast ) )	4939:3:145808:145873	121328	0	True				
ANR	121493	AssignmentExpression	doc_comment = zend_string_copy ( zend_ast_get_str ( doc_comment_ast ) )		121328	0		=			
ANR	121494	Identifier	doc_comment		121328	0					
ANR	121495	CallExpression	zend_string_copy ( zend_ast_get_str ( doc_comment_ast ) )		121328	1					
ANR	121496	Callee	zend_string_copy		121328	0					
ANR	121497	Identifier	zend_string_copy		121328	0					
ANR	121498	ArgumentList	zend_ast_get_str ( doc_comment_ast )		121328	1					
ANR	121499	Argument	zend_ast_get_str ( doc_comment_ast )		121328	0					
ANR	121500	CallExpression	zend_ast_get_str ( doc_comment_ast )		121328	0					
ANR	121501	Callee	zend_ast_get_str		121328	0					
ANR	121502	Identifier	zend_ast_get_str		121328	0					
ANR	121503	ArgumentList	doc_comment_ast		121328	1					
ANR	121504	Argument	doc_comment_ast		121328	0					
ANR	121505	Identifier	doc_comment_ast		121328	0					
ANR	121506	IfStatement	if ( flags & ZEND_ACC_FINAL )		121328	8					
ANR	121507	Condition	flags & ZEND_ACC_FINAL	4942:6:145886:145907	121328	0	True				
ANR	121508	BitAndExpression	flags & ZEND_ACC_FINAL		121328	0		&			
ANR	121509	Identifier	flags		121328	0					
ANR	121510	Identifier	ZEND_ACC_FINAL		121328	1					
ANR	121511	CompoundStatement		29:30:943:943	121328	1					
ANR	121512	Statement	zend_error_noreturn	4943:3:145915:145933	121328	0	True				
ANR	121513	Statement	(	4943:22:145934:145934	121328	1	True				
ANR	121514	Statement	E_COMPILE_ERROR	4943:23:145935:145949	121328	2	True				
ANR	121515	Statement	","	4943:38:145950:145950	121328	3	True				
ANR	121516	Statement	"""Cannot declare property %s::$%s final, """	4943:40:145952:145992	121328	4	True				
ANR	121517	Statement	"""the final modifier is allowed only for methods and classes"""	4944:4:145998:146057	121328	5	True				
ANR	121518	Statement	","	4944:64:146058:146058	121328	6	True				
ANR	121519	Statement	ZSTR_VAL	4945:4:146064:146071	121328	7	True				
ANR	121520	Statement	(	4945:12:146072:146072	121328	8	True				
ANR	121521	Statement	ce	4945:13:146073:146074	121328	9	True				
ANR	121522	Statement	->	4945:15:146075:146076	121328	10	True				
ANR	121523	Statement	name	4945:17:146077:146080	121328	11	True				
ANR	121524	Statement	)	4945:21:146081:146081	121328	12	True				
ANR	121525	Statement	","	4945:22:146082:146082	121328	13	True				
ANR	121526	Statement	ZSTR_VAL	4945:24:146084:146091	121328	14	True				
ANR	121527	Statement	(	4945:32:146092:146092	121328	15	True				
ANR	121528	Statement	name	4945:33:146093:146096	121328	16	True				
ANR	121529	Statement	)	4945:37:146097:146097	121328	17	True				
ANR	121530	Statement	)	4945:38:146098:146098	121328	18	True				
ANR	121531	ExpressionStatement		4945:39:146099:146099	121328	19	True				
ANR	121532	IfStatement	"if ( zend_hash_exists ( & ce -> properties_info , name ) )"		121328	9					
ANR	121533	Condition	"zend_hash_exists ( & ce -> properties_info , name )"	4948:6:146112:146155	121328	0	True				
ANR	121534	CallExpression	"zend_hash_exists ( & ce -> properties_info , name )"		121328	0					
ANR	121535	Callee	zend_hash_exists		121328	0					
ANR	121536	Identifier	zend_hash_exists		121328	0					
ANR	121537	ArgumentList	& ce -> properties_info		121328	1					
ANR	121538	Argument	& ce -> properties_info		121328	0					
ANR	121539	UnaryOperationExpression	& ce -> properties_info		121328	0					
ANR	121540	UnaryOperator	&		121328	0					
ANR	121541	PtrMemberAccess	ce -> properties_info		121328	1					
ANR	121542	Identifier	ce		121328	0					
ANR	121543	Identifier	properties_info		121328	1					
ANR	121544	Argument	name		121328	1					
ANR	121545	Identifier	name		121328	0					
ANR	121546	CompoundStatement		35:52:1191:1191	121328	1					
ANR	121547	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare %s::$%s"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"	4949:3:146163:146267	121328	0	True				
ANR	121548	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare %s::$%s"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"		121328	0					
ANR	121549	Callee	zend_error_noreturn		121328	0					
ANR	121550	Identifier	zend_error_noreturn		121328	0					
ANR	121551	ArgumentList	E_COMPILE_ERROR		121328	1					
ANR	121552	Argument	E_COMPILE_ERROR		121328	0					
ANR	121553	Identifier	E_COMPILE_ERROR		121328	0					
ANR	121554	Argument	"""Cannot redeclare %s::$%s"""		121328	1					
ANR	121555	PrimaryExpression	"""Cannot redeclare %s::$%s"""		121328	0					
ANR	121556	Argument	ZSTR_VAL ( ce -> name )		121328	2					
ANR	121557	CallExpression	ZSTR_VAL ( ce -> name )		121328	0					
ANR	121558	Callee	ZSTR_VAL		121328	0					
ANR	121559	Identifier	ZSTR_VAL		121328	0					
ANR	121560	ArgumentList	ce -> name		121328	1					
ANR	121561	Argument	ce -> name		121328	0					
ANR	121562	PtrMemberAccess	ce -> name		121328	0					
ANR	121563	Identifier	ce		121328	0					
ANR	121564	Identifier	name		121328	1					
ANR	121565	Argument	ZSTR_VAL ( name )		121328	3					
ANR	121566	CallExpression	ZSTR_VAL ( name )		121328	0					
ANR	121567	Callee	ZSTR_VAL		121328	0					
ANR	121568	Identifier	ZSTR_VAL		121328	0					
ANR	121569	ArgumentList	name		121328	1					
ANR	121570	Argument	name		121328	0					
ANR	121571	Identifier	name		121328	0					
ANR	121572	IfStatement	if ( value_ast )		121328	10					
ANR	121573	Condition	value_ast	4953:6:146280:146288	121328	0	True				
ANR	121574	Identifier	value_ast		121328	0					
ANR	121575	CompoundStatement		40:17:1324:1324	121328	1					
ANR	121576	ExpressionStatement	"zend_const_expr_to_zval ( & value_zv , value_ast )"	4954:3:146296:146341	121328	0	True				
ANR	121577	CallExpression	"zend_const_expr_to_zval ( & value_zv , value_ast )"		121328	0					
ANR	121578	Callee	zend_const_expr_to_zval		121328	0					
ANR	121579	Identifier	zend_const_expr_to_zval		121328	0					
ANR	121580	ArgumentList	& value_zv		121328	1					
ANR	121581	Argument	& value_zv		121328	0					
ANR	121582	UnaryOperationExpression	& value_zv		121328	0					
ANR	121583	UnaryOperator	&		121328	0					
ANR	121584	Identifier	value_zv		121328	1					
ANR	121585	Argument	value_ast		121328	1					
ANR	121586	Identifier	value_ast		121328	0					
ANR	121587	ElseStatement	else		121328	0					
ANR	121588	CompoundStatement		42:9:1385:1385	121328	0					
ANR	121589	ExpressionStatement	ZVAL_NULL ( & value_zv )	4956:3:146357:146377	121328	0	True				
ANR	121590	CallExpression	ZVAL_NULL ( & value_zv )		121328	0					
ANR	121591	Callee	ZVAL_NULL		121328	0					
ANR	121592	Identifier	ZVAL_NULL		121328	0					
ANR	121593	ArgumentList	& value_zv		121328	1					
ANR	121594	Argument	& value_zv		121328	0					
ANR	121595	UnaryOperationExpression	& value_zv		121328	0					
ANR	121596	UnaryOperator	&		121328	0					
ANR	121597	Identifier	value_zv		121328	1					
ANR	121598	ExpressionStatement	name = zend_new_interned_string_safe ( name )	4959:2:146386:146428	121328	11	True				
ANR	121599	AssignmentExpression	name = zend_new_interned_string_safe ( name )		121328	0		=			
ANR	121600	Identifier	name		121328	0					
ANR	121601	CallExpression	zend_new_interned_string_safe ( name )		121328	1					
ANR	121602	Callee	zend_new_interned_string_safe		121328	0					
ANR	121603	Identifier	zend_new_interned_string_safe		121328	0					
ANR	121604	ArgumentList	name		121328	1					
ANR	121605	Argument	name		121328	0					
ANR	121606	Identifier	name		121328	0					
ANR	121607	ExpressionStatement	"zend_declare_property_ex ( ce , name , & value_zv , flags , doc_comment )"	4960:2:146432:146497	121328	12	True				
ANR	121608	CallExpression	"zend_declare_property_ex ( ce , name , & value_zv , flags , doc_comment )"		121328	0					
ANR	121609	Callee	zend_declare_property_ex		121328	0					
ANR	121610	Identifier	zend_declare_property_ex		121328	0					
ANR	121611	ArgumentList	ce		121328	1					
ANR	121612	Argument	ce		121328	0					
ANR	121613	Identifier	ce		121328	0					
ANR	121614	Argument	name		121328	1					
ANR	121615	Identifier	name		121328	0					
ANR	121616	Argument	& value_zv		121328	2					
ANR	121617	UnaryOperationExpression	& value_zv		121328	0					
ANR	121618	UnaryOperator	&		121328	0					
ANR	121619	Identifier	value_zv		121328	1					
ANR	121620	Argument	flags		121328	3					
ANR	121621	Identifier	flags		121328	0					
ANR	121622	Argument	doc_comment		121328	4					
ANR	121623	Identifier	doc_comment		121328	0					
ANR	121624	ReturnType	void		121328	1					
ANR	121625	Identifier	zend_compile_prop_decl		121328	2					
ANR	121626	ParameterList	zend_ast * ast		121328	3					
ANR	121627	Parameter	zend_ast * ast	4913:28:144941:144953	121328	0	True				
ANR	121628	ParameterType	zend_ast *		121328	0					
ANR	121629	Identifier	ast		121328	1					
ANR	121630	CFGEntryNode	ENTRY		121328		True				
ANR	121631	CFGExitNode	EXIT		121328		True				
ANR	121632	Symbol	doc_comment		121328						
ANR	121633	Symbol	ast		121328						
ANR	121634	Symbol	doc_comment_ast		121328						
ANR	121635	Symbol	active_class_entry		121328						
ANR	121636	Symbol	E_COMPILE_ERROR		121328						
ANR	121637	Symbol	flags		121328						
ANR	121638	Symbol	* prop_ast -> child		121328						
ANR	121639	Symbol	zend_hash_exists		121328						
ANR	121640	Symbol	* ce		121328						
ANR	121641	Symbol	ZEND_ACC_FINAL		121328						
ANR	121642	Symbol	* * list		121328						
ANR	121643	Symbol	zend_ast_get_str		121328						
ANR	121644	Symbol	children		121328						
ANR	121645	Symbol	value_ast		121328						
ANR	121646	Symbol	ZEND_ACC_INTERFACE		121328						
ANR	121647	Symbol	ce -> name		121328						
ANR	121648	Symbol	prop_ast -> child		121328						
ANR	121649	Symbol	ce		121328						
ANR	121650	Symbol	NULL		121328						
ANR	121651	Symbol	& value_zv		121328						
ANR	121652	Symbol	list -> attr		121328						
ANR	121653	Symbol	CG		121328						
ANR	121654	Symbol	list -> child		121328						
ANR	121655	Symbol	zend_new_interned_string_safe		121328						
ANR	121656	Symbol	i		121328						
ANR	121657	Symbol	zend_string_copy		121328						
ANR	121658	Symbol	list		121328						
ANR	121659	Symbol	prop_ast		121328						
ANR	121660	Symbol	ZSTR_VAL		121328						
ANR	121661	Symbol	ce -> ce_flags		121328						
ANR	121662	Symbol	ZEND_ACC_ABSTRACT		121328						
ANR	121663	Symbol	zend_ast_get_list		121328						
ANR	121664	Symbol	* * prop_ast		121328						
ANR	121665	Symbol	* i		121328						
ANR	121666	Symbol	* list		121328						
ANR	121667	Symbol	& ce -> properties_info		121328						
ANR	121668	Symbol	name_ast		121328						
ANR	121669	Symbol	name		121328						
ANR	121670	Symbol	value_zv		121328						
ANR	121671	Symbol	* prop_ast		121328						
ANR	121672	Symbol	* list -> child		121328						
ANR	121673	Symbol	list -> children		121328						
ANR	121674	Function	zend_compile_class_const_decl	4965:0:146515:147614							
ANR	121675	FunctionDef	zend_compile_class_const_decl (zend_ast * ast)		121674	0					
ANR	121676	CompoundStatement		4966:0:146575:147614	121674	0					
ANR	121677	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	4967:1:146578:146622	121674	0	True				
ANR	121678	IdentifierDecl	* list = zend_ast_get_list ( ast )		121674	0					
ANR	121679	IdentifierDeclType	zend_ast_list *		121674	0					
ANR	121680	Identifier	list		121674	1					
ANR	121681	AssignmentExpression	* list = zend_ast_get_list ( ast )		121674	2		=			
ANR	121682	Identifier	list		121674	0					
ANR	121683	CallExpression	zend_ast_get_list ( ast )		121674	1					
ANR	121684	Callee	zend_ast_get_list		121674	0					
ANR	121685	Identifier	zend_ast_get_list		121674	0					
ANR	121686	ArgumentList	ast		121674	1					
ANR	121687	Argument	ast		121674	0					
ANR	121688	Identifier	ast		121674	0					
ANR	121689	IdentifierDeclStatement	zend_class_entry * ce = CG ( active_class_entry ) ;	4968:1:146625:146670	121674	1	True				
ANR	121690	IdentifierDecl	* ce = CG ( active_class_entry )		121674	0					
ANR	121691	IdentifierDeclType	zend_class_entry *		121674	0					
ANR	121692	Identifier	ce		121674	1					
ANR	121693	AssignmentExpression	* ce = CG ( active_class_entry )		121674	2		=			
ANR	121694	Identifier	ce		121674	0					
ANR	121695	CallExpression	CG ( active_class_entry )		121674	1					
ANR	121696	Callee	CG		121674	0					
ANR	121697	Identifier	CG		121674	0					
ANR	121698	ArgumentList	active_class_entry		121674	1					
ANR	121699	Argument	active_class_entry		121674	0					
ANR	121700	Identifier	active_class_entry		121674	0					
ANR	121701	IdentifierDeclStatement	uint32_t i ;	4969:1:146673:146683	121674	2	True				
ANR	121702	IdentifierDecl	i		121674	0					
ANR	121703	IdentifierDeclType	uint32_t		121674	0					
ANR	121704	Identifier	i		121674	1					
ANR	121705	IfStatement	if ( ( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0 )		121674	3					
ANR	121706	Condition	( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0	4971:5:146691:146726	121674	0	True				
ANR	121707	EqualityExpression	( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0		121674	0		!=			
ANR	121708	BitAndExpression	ce -> ce_flags & ZEND_ACC_TRAIT		121674	0		&			
ANR	121709	PtrMemberAccess	ce -> ce_flags		121674	0					
ANR	121710	Identifier	ce		121674	0					
ANR	121711	Identifier	ce_flags		121674	1					
ANR	121712	Identifier	ZEND_ACC_TRAIT		121674	1					
ANR	121713	PrimaryExpression	0		121674	1					
ANR	121714	CompoundStatement		6:43:153:153	121674	1					
ANR	121715	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Traits cannot have constants"" )"	4972:2:146733:146801	121674	0	True				
ANR	121716	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Traits cannot have constants"" )"		121674	0					
ANR	121717	Callee	zend_error_noreturn		121674	0					
ANR	121718	Identifier	zend_error_noreturn		121674	0					
ANR	121719	ArgumentList	E_COMPILE_ERROR		121674	1					
ANR	121720	Argument	E_COMPILE_ERROR		121674	0					
ANR	121721	Identifier	E_COMPILE_ERROR		121674	0					
ANR	121722	Argument	"""Traits cannot have constants"""		121674	1					
ANR	121723	PrimaryExpression	"""Traits cannot have constants"""		121674	0					
ANR	121724	ReturnStatement	return ;	4973:2:146805:146811	121674	1	True				
ANR	121725	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		121674	4					
ANR	121726	ForInit	i = 0 ;	4976:6:146823:146828	121674	0	True				
ANR	121727	AssignmentExpression	i = 0		121674	0		=			
ANR	121728	Identifier	i		121674	0					
ANR	121729	PrimaryExpression	0		121674	1					
ANR	121730	Condition	i < list -> children	4976:13:146830:146847	121674	1	True				
ANR	121731	RelationalExpression	i < list -> children		121674	0		<			
ANR	121732	Identifier	i		121674	0					
ANR	121733	PtrMemberAccess	list -> children		121674	1					
ANR	121734	Identifier	list		121674	0					
ANR	121735	Identifier	children		121674	1					
ANR	121736	UnaryExpression	++ i	4976:33:146850:146852	121674	2	True				
ANR	121737	IncDec	++		121674	0					
ANR	121738	Identifier	i		121674	1					
ANR	121739	CompoundStatement		16:2:462:475	121674	3					
ANR	121740	IdentifierDeclStatement	zend_ast * const_ast = list -> child [ i ] ;	4977:2:146859:146895	121674	0	True				
ANR	121741	IdentifierDecl	* const_ast = list -> child [ i ]		121674	0					
ANR	121742	IdentifierDeclType	zend_ast *		121674	0					
ANR	121743	Identifier	const_ast		121674	1					
ANR	121744	AssignmentExpression	* const_ast = list -> child [ i ]		121674	2		=			
ANR	121745	Identifier	const_ast		121674	0					
ANR	121746	ArrayIndexing	list -> child [ i ]		121674	1					
ANR	121747	PtrMemberAccess	list -> child		121674	0					
ANR	121748	Identifier	list		121674	0					
ANR	121749	Identifier	child		121674	1					
ANR	121750	Identifier	i		121674	1					
ANR	121751	IdentifierDeclStatement	zend_ast * name_ast = const_ast -> child [ 0 ] ;	4978:2:146899:146939	121674	1	True				
ANR	121752	IdentifierDecl	* name_ast = const_ast -> child [ 0 ]		121674	0					
ANR	121753	IdentifierDeclType	zend_ast *		121674	0					
ANR	121754	Identifier	name_ast		121674	1					
ANR	121755	AssignmentExpression	* name_ast = const_ast -> child [ 0 ]		121674	2		=			
ANR	121756	Identifier	name_ast		121674	0					
ANR	121757	ArrayIndexing	const_ast -> child [ 0 ]		121674	1					
ANR	121758	PtrMemberAccess	const_ast -> child		121674	0					
ANR	121759	Identifier	const_ast		121674	0					
ANR	121760	Identifier	child		121674	1					
ANR	121761	PrimaryExpression	0		121674	1					
ANR	121762	IdentifierDeclStatement	zend_ast * value_ast = const_ast -> child [ 1 ] ;	4979:2:146943:146984	121674	2	True				
ANR	121763	IdentifierDecl	* value_ast = const_ast -> child [ 1 ]		121674	0					
ANR	121764	IdentifierDeclType	zend_ast *		121674	0					
ANR	121765	Identifier	value_ast		121674	1					
ANR	121766	AssignmentExpression	* value_ast = const_ast -> child [ 1 ]		121674	2		=			
ANR	121767	Identifier	value_ast		121674	0					
ANR	121768	ArrayIndexing	const_ast -> child [ 1 ]		121674	1					
ANR	121769	PtrMemberAccess	const_ast -> child		121674	0					
ANR	121770	Identifier	const_ast		121674	0					
ANR	121771	Identifier	child		121674	1					
ANR	121772	PrimaryExpression	1		121674	1					
ANR	121773	IdentifierDeclStatement	zend_string * name = zend_ast_get_str ( name_ast ) ;	4980:2:146988:147034	121674	3	True				
ANR	121774	IdentifierDecl	* name = zend_ast_get_str ( name_ast )		121674	0					
ANR	121775	IdentifierDeclType	zend_string *		121674	0					
ANR	121776	Identifier	name		121674	1					
ANR	121777	AssignmentExpression	* name = zend_ast_get_str ( name_ast )		121674	2		=			
ANR	121778	Identifier	name		121674	0					
ANR	121779	CallExpression	zend_ast_get_str ( name_ast )		121674	1					
ANR	121780	Callee	zend_ast_get_str		121674	0					
ANR	121781	Identifier	zend_ast_get_str		121674	0					
ANR	121782	ArgumentList	name_ast		121674	1					
ANR	121783	Argument	name_ast		121674	0					
ANR	121784	Identifier	name_ast		121674	0					
ANR	121785	IdentifierDeclStatement	zval value_zv ;	4981:2:147038:147051	121674	4	True				
ANR	121786	IdentifierDecl	value_zv		121674	0					
ANR	121787	IdentifierDeclType	zval		121674	0					
ANR	121788	Identifier	value_zv		121674	1					
ANR	121789	IfStatement	"if ( zend_string_equals_literal_ci ( name , ""class"" ) )"		121674	5					
ANR	121790	Condition	"zend_string_equals_literal_ci ( name , ""class"" )"	4983:6:147060:147103	121674	0	True				
ANR	121791	CallExpression	"zend_string_equals_literal_ci ( name , ""class"" )"		121674	0					
ANR	121792	Callee	zend_string_equals_literal_ci		121674	0					
ANR	121793	Identifier	zend_string_equals_literal_ci		121674	0					
ANR	121794	ArgumentList	name		121674	1					
ANR	121795	Argument	name		121674	0					
ANR	121796	Identifier	name		121674	0					
ANR	121797	Argument	"""class"""		121674	1					
ANR	121798	PrimaryExpression	"""class"""		121674	0					
ANR	121799	CompoundStatement		18:52:530:530	121674	1					
ANR	121800	ExpressionStatement	"zend_error ( E_COMPILE_ERROR , ""A class constant must not be called 'class'; it is reserved for class name fetching"" )"	4984:3:147111:147229	121674	0	True				
ANR	121801	CallExpression	"zend_error ( E_COMPILE_ERROR , ""A class constant must not be called 'class'; it is reserved for class name fetching"" )"		121674	0					
ANR	121802	Callee	zend_error		121674	0					
ANR	121803	Identifier	zend_error		121674	0					
ANR	121804	ArgumentList	E_COMPILE_ERROR		121674	1					
ANR	121805	Argument	E_COMPILE_ERROR		121674	0					
ANR	121806	Identifier	E_COMPILE_ERROR		121674	0					
ANR	121807	Argument	"""A class constant must not be called 'class'; it is reserved for class name fetching"""		121674	1					
ANR	121808	PrimaryExpression	"""A class constant must not be called 'class'; it is reserved for class name fetching"""		121674	0					
ANR	121809	ExpressionStatement	"zend_const_expr_to_zval ( & value_zv , value_ast )"	4988:2:147238:147283	121674	6	True				
ANR	121810	CallExpression	"zend_const_expr_to_zval ( & value_zv , value_ast )"		121674	0					
ANR	121811	Callee	zend_const_expr_to_zval		121674	0					
ANR	121812	Identifier	zend_const_expr_to_zval		121674	0					
ANR	121813	ArgumentList	& value_zv		121674	1					
ANR	121814	Argument	& value_zv		121674	0					
ANR	121815	UnaryOperationExpression	& value_zv		121674	0					
ANR	121816	UnaryOperator	&		121674	0					
ANR	121817	Identifier	value_zv		121674	1					
ANR	121818	Argument	value_ast		121674	1					
ANR	121819	Identifier	value_ast		121674	0					
ANR	121820	ExpressionStatement	name = zend_new_interned_string_safe ( name )	4990:2:147288:147330	121674	7	True				
ANR	121821	AssignmentExpression	name = zend_new_interned_string_safe ( name )		121674	0		=			
ANR	121822	Identifier	name		121674	0					
ANR	121823	CallExpression	zend_new_interned_string_safe ( name )		121674	1					
ANR	121824	Callee	zend_new_interned_string_safe		121674	0					
ANR	121825	Identifier	zend_new_interned_string_safe		121674	0					
ANR	121826	ArgumentList	name		121674	1					
ANR	121827	Argument	name		121674	0					
ANR	121828	Identifier	name		121674	0					
ANR	121829	IfStatement	"if ( zend_hash_add ( & ce -> constants_table , name , & value_zv ) == NULL )"		121674	8					
ANR	121830	Condition	"zend_hash_add ( & ce -> constants_table , name , & value_zv ) == NULL"	4991:6:147338:147397	121674	0	True				
ANR	121831	EqualityExpression	"zend_hash_add ( & ce -> constants_table , name , & value_zv ) == NULL"		121674	0		==			
ANR	121832	CallExpression	"zend_hash_add ( & ce -> constants_table , name , & value_zv )"		121674	0					
ANR	121833	Callee	zend_hash_add		121674	0					
ANR	121834	Identifier	zend_hash_add		121674	0					
ANR	121835	ArgumentList	& ce -> constants_table		121674	1					
ANR	121836	Argument	& ce -> constants_table		121674	0					
ANR	121837	UnaryOperationExpression	& ce -> constants_table		121674	0					
ANR	121838	UnaryOperator	&		121674	0					
ANR	121839	PtrMemberAccess	ce -> constants_table		121674	1					
ANR	121840	Identifier	ce		121674	0					
ANR	121841	Identifier	constants_table		121674	1					
ANR	121842	Argument	name		121674	1					
ANR	121843	Identifier	name		121674	0					
ANR	121844	Argument	& value_zv		121674	2					
ANR	121845	UnaryOperationExpression	& value_zv		121674	0					
ANR	121846	UnaryOperator	&		121674	0					
ANR	121847	Identifier	value_zv		121674	1					
ANR	121848	Identifier	NULL		121674	1					
ANR	121849	CompoundStatement		26:68:824:824	121674	1					
ANR	121850	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redefine class constant %s::%s"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"	4992:3:147405:147522	121674	0	True				
ANR	121851	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redefine class constant %s::%s"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( name ) )"		121674	0					
ANR	121852	Callee	zend_error_noreturn		121674	0					
ANR	121853	Identifier	zend_error_noreturn		121674	0					
ANR	121854	ArgumentList	E_COMPILE_ERROR		121674	1					
ANR	121855	Argument	E_COMPILE_ERROR		121674	0					
ANR	121856	Identifier	E_COMPILE_ERROR		121674	0					
ANR	121857	Argument	"""Cannot redefine class constant %s::%s"""		121674	1					
ANR	121858	PrimaryExpression	"""Cannot redefine class constant %s::%s"""		121674	0					
ANR	121859	Argument	ZSTR_VAL ( ce -> name )		121674	2					
ANR	121860	CallExpression	ZSTR_VAL ( ce -> name )		121674	0					
ANR	121861	Callee	ZSTR_VAL		121674	0					
ANR	121862	Identifier	ZSTR_VAL		121674	0					
ANR	121863	ArgumentList	ce -> name		121674	1					
ANR	121864	Argument	ce -> name		121674	0					
ANR	121865	PtrMemberAccess	ce -> name		121674	0					
ANR	121866	Identifier	ce		121674	0					
ANR	121867	Identifier	name		121674	1					
ANR	121868	Argument	ZSTR_VAL ( name )		121674	3					
ANR	121869	CallExpression	ZSTR_VAL ( name )		121674	0					
ANR	121870	Callee	ZSTR_VAL		121674	0					
ANR	121871	Identifier	ZSTR_VAL		121674	0					
ANR	121872	ArgumentList	name		121674	1					
ANR	121873	Argument	name		121674	0					
ANR	121874	Identifier	name		121674	0					
ANR	121875	IfStatement	if ( Z_CONSTANT ( value_zv ) )		121674	9					
ANR	121876	Condition	Z_CONSTANT ( value_zv )	4996:6:147535:147554	121674	0	True				
ANR	121877	CallExpression	Z_CONSTANT ( value_zv )		121674	0					
ANR	121878	Callee	Z_CONSTANT		121674	0					
ANR	121879	Identifier	Z_CONSTANT		121674	0					
ANR	121880	ArgumentList	value_zv		121674	1					
ANR	121881	Argument	value_zv		121674	0					
ANR	121882	Identifier	value_zv		121674	0					
ANR	121883	CompoundStatement		31:28:981:981	121674	1					
ANR	121884	ExpressionStatement	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED	4997:3:147562:147605	121674	0	True				
ANR	121885	AssignmentExpression	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED		121674	0		&=			
ANR	121886	PtrMemberAccess	ce -> ce_flags		121674	0					
ANR	121887	Identifier	ce		121674	0					
ANR	121888	Identifier	ce_flags		121674	1					
ANR	121889	Identifier	~ZEND_ACC_CONSTANTS_UPDATED		121674	1					
ANR	121890	ReturnType	void		121674	1					
ANR	121891	Identifier	zend_compile_class_const_decl		121674	2					
ANR	121892	ParameterList	zend_ast * ast		121674	3					
ANR	121893	Parameter	zend_ast * ast	4965:35:146550:146562	121674	0	True				
ANR	121894	ParameterType	zend_ast *		121674	0					
ANR	121895	Identifier	ast		121674	1					
ANR	121896	CFGEntryNode	ENTRY		121674		True				
ANR	121897	CFGExitNode	EXIT		121674		True				
ANR	121898	Symbol	* * const_ast		121674						
ANR	121899	Symbol	const_ast -> child		121674						
ANR	121900	Symbol	ast		121674						
ANR	121901	Symbol	active_class_entry		121674						
ANR	121902	Symbol	E_COMPILE_ERROR		121674						
ANR	121903	Symbol	* ce		121674						
ANR	121904	Symbol	* * list		121674						
ANR	121905	Symbol	zend_ast_get_str		121674						
ANR	121906	Symbol	value_ast		121674						
ANR	121907	Symbol	ce -> name		121674						
ANR	121908	Symbol	ce		121674						
ANR	121909	Symbol	* const_ast -> child		121674						
ANR	121910	Symbol	& value_zv		121674						
ANR	121911	Symbol	NULL		121674						
ANR	121912	Symbol	CG		121674						
ANR	121913	Symbol	list -> child		121674						
ANR	121914	Symbol	zend_new_interned_string_safe		121674						
ANR	121915	Symbol	i		121674						
ANR	121916	Symbol	list		121674						
ANR	121917	Symbol	Z_CONSTANT		121674						
ANR	121918	Symbol	ZEND_ACC_TRAIT		121674						
ANR	121919	Symbol	zend_string_equals_literal_ci		121674						
ANR	121920	Symbol	ZSTR_VAL		121674						
ANR	121921	Symbol	ce -> ce_flags		121674						
ANR	121922	Symbol	zend_ast_get_list		121674						
ANR	121923	Symbol	& ce -> constants_table		121674						
ANR	121924	Symbol	* i		121674						
ANR	121925	Symbol	* list		121674						
ANR	121926	Symbol	const_ast		121674						
ANR	121927	Symbol	zend_hash_add		121674						
ANR	121928	Symbol	* const_ast		121674						
ANR	121929	Symbol	name_ast		121674						
ANR	121930	Symbol	name		121674						
ANR	121931	Symbol	value_zv		121674						
ANR	121932	Symbol	* list -> child		121674						
ANR	121933	Symbol	list -> children		121674						
ANR	121934	Symbol	~ZEND_ACC_CONSTANTS_UPDATED		121674						
ANR	121935	Function	zend_compile_method_ref	5003:0:147627:148133							
ANR	121936	FunctionDef	zend_compile_method_ref (zend_ast * ast)		121935	0					
ANR	121937	CompoundStatement		5004:0:147712:148133	121935	0					
ANR	121938	IdentifierDeclStatement	zend_ast * class_ast = ast -> child [ 0 ] ;	5005:1:147715:147750	121935	0	True				
ANR	121939	IdentifierDecl	* class_ast = ast -> child [ 0 ]		121935	0					
ANR	121940	IdentifierDeclType	zend_ast *		121935	0					
ANR	121941	Identifier	class_ast		121935	1					
ANR	121942	AssignmentExpression	* class_ast = ast -> child [ 0 ]		121935	2		=			
ANR	121943	Identifier	class_ast		121935	0					
ANR	121944	ArrayIndexing	ast -> child [ 0 ]		121935	1					
ANR	121945	PtrMemberAccess	ast -> child		121935	0					
ANR	121946	Identifier	ast		121935	0					
ANR	121947	Identifier	child		121935	1					
ANR	121948	PrimaryExpression	0		121935	1					
ANR	121949	IdentifierDeclStatement	zend_ast * method_ast = ast -> child [ 1 ] ;	5006:1:147753:147789	121935	1	True				
ANR	121950	IdentifierDecl	* method_ast = ast -> child [ 1 ]		121935	0					
ANR	121951	IdentifierDeclType	zend_ast *		121935	0					
ANR	121952	Identifier	method_ast		121935	1					
ANR	121953	AssignmentExpression	* method_ast = ast -> child [ 1 ]		121935	2		=			
ANR	121954	Identifier	method_ast		121935	0					
ANR	121955	ArrayIndexing	ast -> child [ 1 ]		121935	1					
ANR	121956	PtrMemberAccess	ast -> child		121935	0					
ANR	121957	Identifier	ast		121935	0					
ANR	121958	Identifier	child		121935	1					
ANR	121959	PrimaryExpression	1		121935	1					
ANR	121960	IdentifierDeclStatement	zend_trait_method_reference * method_ref = emalloc ( sizeof ( zend_trait_method_reference ) ) ;	5008:1:147793:147879	121935	2	True				
ANR	121961	IdentifierDecl	* method_ref = emalloc ( sizeof ( zend_trait_method_reference ) )		121935	0					
ANR	121962	IdentifierDeclType	zend_trait_method_reference *		121935	0					
ANR	121963	Identifier	method_ref		121935	1					
ANR	121964	AssignmentExpression	* method_ref = emalloc ( sizeof ( zend_trait_method_reference ) )		121935	2		=			
ANR	121965	Identifier	method_ref		121935	0					
ANR	121966	CallExpression	emalloc ( sizeof ( zend_trait_method_reference ) )		121935	1					
ANR	121967	Callee	emalloc		121935	0					
ANR	121968	Identifier	emalloc		121935	0					
ANR	121969	ArgumentList	sizeof ( zend_trait_method_reference )		121935	1					
ANR	121970	Argument	sizeof ( zend_trait_method_reference )		121935	0					
ANR	121971	SizeofExpression	sizeof ( zend_trait_method_reference )		121935	0					
ANR	121972	Sizeof	sizeof		121935	0					
ANR	121973	SizeofOperand	zend_trait_method_reference		121935	1					
ANR	121974	ExpressionStatement	method_ref -> ce = NULL	5009:1:147882:147903	121935	3	True				
ANR	121975	AssignmentExpression	method_ref -> ce = NULL		121935	0		=			
ANR	121976	PtrMemberAccess	method_ref -> ce		121935	0					
ANR	121977	Identifier	method_ref		121935	0					
ANR	121978	Identifier	ce		121935	1					
ANR	121979	Identifier	NULL		121935	1					
ANR	121980	ExpressionStatement	method_ref -> method_name = zend_string_copy ( zend_ast_get_str ( method_ast ) )	5010:1:147906:147978	121935	4	True				
ANR	121981	AssignmentExpression	method_ref -> method_name = zend_string_copy ( zend_ast_get_str ( method_ast ) )		121935	0		=			
ANR	121982	PtrMemberAccess	method_ref -> method_name		121935	0					
ANR	121983	Identifier	method_ref		121935	0					
ANR	121984	Identifier	method_name		121935	1					
ANR	121985	CallExpression	zend_string_copy ( zend_ast_get_str ( method_ast ) )		121935	1					
ANR	121986	Callee	zend_string_copy		121935	0					
ANR	121987	Identifier	zend_string_copy		121935	0					
ANR	121988	ArgumentList	zend_ast_get_str ( method_ast )		121935	1					
ANR	121989	Argument	zend_ast_get_str ( method_ast )		121935	0					
ANR	121990	CallExpression	zend_ast_get_str ( method_ast )		121935	0					
ANR	121991	Callee	zend_ast_get_str		121935	0					
ANR	121992	Identifier	zend_ast_get_str		121935	0					
ANR	121993	ArgumentList	method_ast		121935	1					
ANR	121994	Argument	method_ast		121935	0					
ANR	121995	Identifier	method_ast		121935	0					
ANR	121996	IfStatement	if ( class_ast )		121935	5					
ANR	121997	Condition	class_ast	5012:5:147986:147994	121935	0	True				
ANR	121998	Identifier	class_ast		121935	0					
ANR	121999	CompoundStatement		9:16:284:284	121935	1					
ANR	122000	ExpressionStatement	method_ref -> class_name = zend_resolve_class_name_ast ( class_ast )	5013:2:148001:148064	121935	0	True				
ANR	122001	AssignmentExpression	method_ref -> class_name = zend_resolve_class_name_ast ( class_ast )		121935	0		=			
ANR	122002	PtrMemberAccess	method_ref -> class_name		121935	0					
ANR	122003	Identifier	method_ref		121935	0					
ANR	122004	Identifier	class_name		121935	1					
ANR	122005	CallExpression	zend_resolve_class_name_ast ( class_ast )		121935	1					
ANR	122006	Callee	zend_resolve_class_name_ast		121935	0					
ANR	122007	Identifier	zend_resolve_class_name_ast		121935	0					
ANR	122008	ArgumentList	class_ast		121935	1					
ANR	122009	Argument	class_ast		121935	0					
ANR	122010	Identifier	class_ast		121935	0					
ANR	122011	ElseStatement	else		121935	0					
ANR	122012	CompoundStatement		11:8:361:361	121935	0					
ANR	122013	ExpressionStatement	method_ref -> class_name = NULL	5015:2:148078:148107	121935	0	True				
ANR	122014	AssignmentExpression	method_ref -> class_name = NULL		121935	0		=			
ANR	122015	PtrMemberAccess	method_ref -> class_name		121935	0					
ANR	122016	Identifier	method_ref		121935	0					
ANR	122017	Identifier	class_name		121935	1					
ANR	122018	Identifier	NULL		121935	1					
ANR	122019	ReturnStatement	return method_ref ;	5018:1:148114:148131	121935	6	True				
ANR	122020	Identifier	method_ref		121935	0					
ANR	122021	ReturnType	static zend_trait_method_reference *		121935	1					
ANR	122022	Identifier	zend_compile_method_ref		121935	2					
ANR	122023	ParameterList	zend_ast * ast		121935	3					
ANR	122024	Parameter	zend_ast * ast	5003:60:147687:147699	121935	0	True				
ANR	122025	ParameterType	zend_ast *		121935	0					
ANR	122026	Identifier	ast		121935	1					
ANR	122027	CFGEntryNode	ENTRY		121935		True				
ANR	122028	CFGExitNode	EXIT		121935		True				
ANR	122029	Symbol	ast		121935						
ANR	122030	Symbol	* method_ref		121935						
ANR	122031	Symbol	NULL		121935						
ANR	122032	Symbol	zend_resolve_class_name_ast		121935						
ANR	122033	Symbol	method_ref -> ce		121935						
ANR	122034	Symbol	method_ast		121935						
ANR	122035	Symbol	method_ref -> class_name		121935						
ANR	122036	Symbol	class_ast		121935						
ANR	122037	Symbol	zend_string_copy		121935						
ANR	122038	Symbol	emalloc		121935						
ANR	122039	Symbol	* ast		121935						
ANR	122040	Symbol	zend_ast_get_str		121935						
ANR	122041	Symbol	method_ref -> method_name		121935						
ANR	122042	Symbol	* * ast		121935						
ANR	122043	Symbol	method_ref		121935						
ANR	122044	Symbol	* ast -> child		121935						
ANR	122045	Symbol	ast -> child		121935						
ANR	122046	Function	zend_compile_name_list	5022:0:148146:148543							
ANR	122047	FunctionDef	zend_compile_name_list (zend_ast * ast)		122046	0					
ANR	122048	CompoundStatement		5023:0:148215:148543	122046	0					
ANR	122049	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	5024:1:148218:148262	122046	0	True				
ANR	122050	IdentifierDecl	* list = zend_ast_get_list ( ast )		122046	0					
ANR	122051	IdentifierDeclType	zend_ast_list *		122046	0					
ANR	122052	Identifier	list		122046	1					
ANR	122053	AssignmentExpression	* list = zend_ast_get_list ( ast )		122046	2		=			
ANR	122054	Identifier	list		122046	0					
ANR	122055	CallExpression	zend_ast_get_list ( ast )		122046	1					
ANR	122056	Callee	zend_ast_get_list		122046	0					
ANR	122057	Identifier	zend_ast_get_list		122046	0					
ANR	122058	ArgumentList	ast		122046	1					
ANR	122059	Argument	ast		122046	0					
ANR	122060	Identifier	ast		122046	0					
ANR	122061	IdentifierDeclStatement	"zend_string * * names = safe_emalloc ( sizeof ( zend_string * ) , list -> children + 1 , 0 ) ;"	5025:1:148265:148345	122046	1	True				
ANR	122062	IdentifierDecl	"* * names = safe_emalloc ( sizeof ( zend_string * ) , list -> children + 1 , 0 )"		122046	0					
ANR	122063	IdentifierDeclType	zend_string * *		122046	0					
ANR	122064	Identifier	names		122046	1					
ANR	122065	AssignmentExpression	"* * names = safe_emalloc ( sizeof ( zend_string * ) , list -> children + 1 , 0 )"		122046	2		=			
ANR	122066	Identifier	names		122046	0					
ANR	122067	CallExpression	"safe_emalloc ( sizeof ( zend_string * ) , list -> children + 1 , 0 )"		122046	1					
ANR	122068	Callee	safe_emalloc		122046	0					
ANR	122069	Identifier	safe_emalloc		122046	0					
ANR	122070	ArgumentList	sizeof ( zend_string * )		122046	1					
ANR	122071	Argument	sizeof ( zend_string * )		122046	0					
ANR	122072	SizeofExpression	sizeof ( zend_string * )		122046	0					
ANR	122073	Sizeof	sizeof		122046	0					
ANR	122074	SizeofOperand	zend_string *		122046	1					
ANR	122075	Argument	list -> children + 1		122046	1					
ANR	122076	AdditiveExpression	list -> children + 1		122046	0		+			
ANR	122077	PtrMemberAccess	list -> children		122046	0					
ANR	122078	Identifier	list		122046	0					
ANR	122079	Identifier	children		122046	1					
ANR	122080	PrimaryExpression	1		122046	1					
ANR	122081	Argument	0		122046	2					
ANR	122082	PrimaryExpression	0		122046	0					
ANR	122083	IdentifierDeclStatement	uint32_t i ;	5026:1:148348:148358	122046	2	True				
ANR	122084	IdentifierDecl	i		122046	0					
ANR	122085	IdentifierDeclType	uint32_t		122046	0					
ANR	122086	Identifier	i		122046	1					
ANR	122087	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		122046	3					
ANR	122088	ForInit	i = 0 ;	5028:6:148367:148372	122046	0	True				
ANR	122089	AssignmentExpression	i = 0		122046	0		=			
ANR	122090	Identifier	i		122046	0					
ANR	122091	PrimaryExpression	0		122046	1					
ANR	122092	Condition	i < list -> children	5028:13:148374:148391	122046	1	True				
ANR	122093	RelationalExpression	i < list -> children		122046	0		<			
ANR	122094	Identifier	i		122046	0					
ANR	122095	PtrMemberAccess	list -> children		122046	1					
ANR	122096	Identifier	list		122046	0					
ANR	122097	Identifier	children		122046	1					
ANR	122098	UnaryExpression	++ i	5028:33:148394:148396	122046	2	True				
ANR	122099	IncDec	++		122046	0					
ANR	122100	Identifier	i		122046	1					
ANR	122101	CompoundStatement		7:2:187:222	122046	3					
ANR	122102	IdentifierDeclStatement	zend_ast * name_ast = list -> child [ i ] ;	5029:2:148403:148438	122046	0	True				
ANR	122103	IdentifierDecl	* name_ast = list -> child [ i ]		122046	0					
ANR	122104	IdentifierDeclType	zend_ast *		122046	0					
ANR	122105	Identifier	name_ast		122046	1					
ANR	122106	AssignmentExpression	* name_ast = list -> child [ i ]		122046	2		=			
ANR	122107	Identifier	name_ast		122046	0					
ANR	122108	ArrayIndexing	list -> child [ i ]		122046	1					
ANR	122109	PtrMemberAccess	list -> child		122046	0					
ANR	122110	Identifier	list		122046	0					
ANR	122111	Identifier	child		122046	1					
ANR	122112	Identifier	i		122046	1					
ANR	122113	ExpressionStatement	names [ i ] = zend_resolve_class_name_ast ( name_ast )	5030:2:148442:148490	122046	1	True				
ANR	122114	AssignmentExpression	names [ i ] = zend_resolve_class_name_ast ( name_ast )		122046	0		=			
ANR	122115	ArrayIndexing	names [ i ]		122046	0					
ANR	122116	Identifier	names		122046	0					
ANR	122117	Identifier	i		122046	1					
ANR	122118	CallExpression	zend_resolve_class_name_ast ( name_ast )		122046	1					
ANR	122119	Callee	zend_resolve_class_name_ast		122046	0					
ANR	122120	Identifier	zend_resolve_class_name_ast		122046	0					
ANR	122121	ArgumentList	name_ast		122046	1					
ANR	122122	Argument	name_ast		122046	0					
ANR	122123	Identifier	name_ast		122046	0					
ANR	122124	ExpressionStatement	names [ list -> children ] = NULL	5033:1:148497:148525	122046	4	True				
ANR	122125	AssignmentExpression	names [ list -> children ] = NULL		122046	0		=			
ANR	122126	ArrayIndexing	names [ list -> children ]		122046	0					
ANR	122127	Identifier	names		122046	0					
ANR	122128	PtrMemberAccess	list -> children		122046	1					
ANR	122129	Identifier	list		122046	0					
ANR	122130	Identifier	children		122046	1					
ANR	122131	Identifier	NULL		122046	1					
ANR	122132	ReturnStatement	return names ;	5035:1:148529:148541	122046	5	True				
ANR	122133	Identifier	names		122046	0					
ANR	122134	ReturnType	static zend_string * *		122046	1					
ANR	122135	Identifier	zend_compile_name_list		122046	2					
ANR	122136	ParameterList	zend_ast * ast		122046	3					
ANR	122137	Parameter	zend_ast * ast	5022:44:148190:148202	122046	0	True				
ANR	122138	ParameterType	zend_ast *		122046	0					
ANR	122139	Identifier	ast		122046	1					
ANR	122140	CFGEntryNode	ENTRY		122046		True				
ANR	122141	CFGExitNode	EXIT		122046		True				
ANR	122142	Symbol	ast		122046						
ANR	122143	Symbol	NULL		122046						
ANR	122144	Symbol	list -> child		122046						
ANR	122145	Symbol	zend_resolve_class_name_ast		122046						
ANR	122146	Symbol	i		122046						
ANR	122147	Symbol	list		122046						
ANR	122148	Symbol	* names		122046						
ANR	122149	Symbol	zend_ast_get_list		122046						
ANR	122150	Symbol	names		122046						
ANR	122151	Symbol	* i		122046						
ANR	122152	Symbol	* * list		122046						
ANR	122153	Symbol	* list		122046						
ANR	122154	Symbol	name_ast		122046						
ANR	122155	Symbol	* list -> child		122046						
ANR	122156	Symbol	safe_emalloc		122046						
ANR	122157	Symbol	list -> children		122046						
ANR	122158	Symbol	* list -> children		122046						
ANR	122159	Function	zend_compile_trait_precedence	5039:0:148556:149019							
ANR	122160	FunctionDef	zend_compile_trait_precedence (zend_ast * ast)		122159	0					
ANR	122161	CompoundStatement		5040:0:148623:149019	122159	0					
ANR	122162	IdentifierDeclStatement	zend_ast * method_ref_ast = ast -> child [ 0 ] ;	5041:1:148626:148666	122159	0	True				
ANR	122163	IdentifierDecl	* method_ref_ast = ast -> child [ 0 ]		122159	0					
ANR	122164	IdentifierDeclType	zend_ast *		122159	0					
ANR	122165	Identifier	method_ref_ast		122159	1					
ANR	122166	AssignmentExpression	* method_ref_ast = ast -> child [ 0 ]		122159	2		=			
ANR	122167	Identifier	method_ref_ast		122159	0					
ANR	122168	ArrayIndexing	ast -> child [ 0 ]		122159	1					
ANR	122169	PtrMemberAccess	ast -> child		122159	0					
ANR	122170	Identifier	ast		122159	0					
ANR	122171	Identifier	child		122159	1					
ANR	122172	PrimaryExpression	0		122159	1					
ANR	122173	IdentifierDeclStatement	zend_ast * insteadof_ast = ast -> child [ 1 ] ;	5042:1:148669:148708	122159	1	True				
ANR	122174	IdentifierDecl	* insteadof_ast = ast -> child [ 1 ]		122159	0					
ANR	122175	IdentifierDeclType	zend_ast *		122159	0					
ANR	122176	Identifier	insteadof_ast		122159	1					
ANR	122177	AssignmentExpression	* insteadof_ast = ast -> child [ 1 ]		122159	2		=			
ANR	122178	Identifier	insteadof_ast		122159	0					
ANR	122179	ArrayIndexing	ast -> child [ 1 ]		122159	1					
ANR	122180	PtrMemberAccess	ast -> child		122159	0					
ANR	122181	Identifier	ast		122159	0					
ANR	122182	Identifier	child		122159	1					
ANR	122183	PrimaryExpression	1		122159	1					
ANR	122184	IdentifierDeclStatement	zend_trait_precedence * precedence = emalloc ( sizeof ( zend_trait_precedence ) ) ;	5044:1:148712:148786	122159	2	True				
ANR	122185	IdentifierDecl	* precedence = emalloc ( sizeof ( zend_trait_precedence ) )		122159	0					
ANR	122186	IdentifierDeclType	zend_trait_precedence *		122159	0					
ANR	122187	Identifier	precedence		122159	1					
ANR	122188	AssignmentExpression	* precedence = emalloc ( sizeof ( zend_trait_precedence ) )		122159	2		=			
ANR	122189	Identifier	precedence		122159	0					
ANR	122190	CallExpression	emalloc ( sizeof ( zend_trait_precedence ) )		122159	1					
ANR	122191	Callee	emalloc		122159	0					
ANR	122192	Identifier	emalloc		122159	0					
ANR	122193	ArgumentList	sizeof ( zend_trait_precedence )		122159	1					
ANR	122194	Argument	sizeof ( zend_trait_precedence )		122159	0					
ANR	122195	SizeofExpression	sizeof ( zend_trait_precedence )		122159	0					
ANR	122196	Sizeof	sizeof		122159	0					
ANR	122197	SizeofOperand	zend_trait_precedence		122159	1					
ANR	122198	ExpressionStatement	precedence -> trait_method = zend_compile_method_ref ( method_ref_ast )	5045:1:148789:148855	122159	3	True				
ANR	122199	AssignmentExpression	precedence -> trait_method = zend_compile_method_ref ( method_ref_ast )		122159	0		=			
ANR	122200	PtrMemberAccess	precedence -> trait_method		122159	0					
ANR	122201	Identifier	precedence		122159	0					
ANR	122202	Identifier	trait_method		122159	1					
ANR	122203	CallExpression	zend_compile_method_ref ( method_ref_ast )		122159	1					
ANR	122204	Callee	zend_compile_method_ref		122159	0					
ANR	122205	Identifier	zend_compile_method_ref		122159	0					
ANR	122206	ArgumentList	method_ref_ast		122159	1					
ANR	122207	Argument	method_ref_ast		122159	0					
ANR	122208	Identifier	method_ref_ast		122159	0					
ANR	122209	ExpressionStatement	precedence -> exclude_from_classes = ( void * ) zend_compile_name_list ( insteadof_ast )	5046:1:148858:148941	122159	4	True				
ANR	122210	AssignmentExpression	precedence -> exclude_from_classes = ( void * ) zend_compile_name_list ( insteadof_ast )		122159	0		=			
ANR	122211	PtrMemberAccess	precedence -> exclude_from_classes		122159	0					
ANR	122212	Identifier	precedence		122159	0					
ANR	122213	Identifier	exclude_from_classes		122159	1					
ANR	122214	CastExpression	( void * ) zend_compile_name_list ( insteadof_ast )		122159	1					
ANR	122215	CastTarget	void *		122159	0					
ANR	122216	CallExpression	zend_compile_name_list ( insteadof_ast )		122159	1					
ANR	122217	Callee	zend_compile_name_list		122159	0					
ANR	122218	Identifier	zend_compile_name_list		122159	0					
ANR	122219	ArgumentList	insteadof_ast		122159	1					
ANR	122220	Argument	insteadof_ast		122159	0					
ANR	122221	Identifier	insteadof_ast		122159	0					
ANR	122222	ExpressionStatement	"zend_add_to_list ( & CG ( active_class_entry ) -> trait_precedences , precedence )"	5049:1:148945:149017	122159	5	True				
ANR	122223	CallExpression	"zend_add_to_list ( & CG ( active_class_entry ) -> trait_precedences , precedence )"		122159	0					
ANR	122224	Callee	zend_add_to_list		122159	0					
ANR	122225	Identifier	zend_add_to_list		122159	0					
ANR	122226	ArgumentList	& CG ( active_class_entry ) -> trait_precedences		122159	1					
ANR	122227	Argument	& CG ( active_class_entry ) -> trait_precedences		122159	0					
ANR	122228	UnaryOperationExpression	& CG ( active_class_entry ) -> trait_precedences		122159	0					
ANR	122229	UnaryOperator	&		122159	0					
ANR	122230	PtrMemberAccess	CG ( active_class_entry ) -> trait_precedences		122159	1					
ANR	122231	CallExpression	CG ( active_class_entry )		122159	0					
ANR	122232	Callee	CG		122159	0					
ANR	122233	Identifier	CG		122159	0					
ANR	122234	ArgumentList	active_class_entry		122159	1					
ANR	122235	Argument	active_class_entry		122159	0					
ANR	122236	Identifier	active_class_entry		122159	0					
ANR	122237	Identifier	trait_precedences		122159	1					
ANR	122238	Argument	precedence		122159	1					
ANR	122239	Identifier	precedence		122159	0					
ANR	122240	ReturnType	static void		122159	1					
ANR	122241	Identifier	zend_compile_trait_precedence		122159	2					
ANR	122242	ParameterList	zend_ast * ast		122159	3					
ANR	122243	Parameter	zend_ast * ast	5039:42:148598:148610	122159	0	True				
ANR	122244	ParameterType	zend_ast *		122159	0					
ANR	122245	Identifier	ast		122159	1					
ANR	122246	CFGEntryNode	ENTRY		122159		True				
ANR	122247	CFGExitNode	EXIT		122159		True				
ANR	122248	Symbol	* precedence		122159						
ANR	122249	Symbol	zend_compile_method_ref		122159						
ANR	122250	Symbol	ast		122159						
ANR	122251	Symbol	CG		122159						
ANR	122252	Symbol	& CG ( active_class_entry ) -> trait_precedences		122159						
ANR	122253	Symbol	active_class_entry		122159						
ANR	122254	Symbol	precedence -> trait_method		122159						
ANR	122255	Symbol	precedence -> exclude_from_classes		122159						
ANR	122256	Symbol	method_ref_ast		122159						
ANR	122257	Symbol	precedence		122159						
ANR	122258	Symbol	zend_compile_name_list		122159						
ANR	122259	Symbol	emalloc		122159						
ANR	122260	Symbol	* ast		122159						
ANR	122261	Symbol	* * ast		122159						
ANR	122262	Symbol	insteadof_ast		122159						
ANR	122263	Symbol	* ast -> child		122159						
ANR	122264	Symbol	ast -> child		122159						
ANR	122265	Function	zend_compile_trait_alias	5053:0:149032:149940							
ANR	122266	FunctionDef	zend_compile_trait_alias (zend_ast * ast)		122265	0					
ANR	122267	CompoundStatement		5054:0:149094:149940	122265	0					
ANR	122268	IdentifierDeclStatement	zend_ast * method_ref_ast = ast -> child [ 0 ] ;	5055:1:149097:149137	122265	0	True				
ANR	122269	IdentifierDecl	* method_ref_ast = ast -> child [ 0 ]		122265	0					
ANR	122270	IdentifierDeclType	zend_ast *		122265	0					
ANR	122271	Identifier	method_ref_ast		122265	1					
ANR	122272	AssignmentExpression	* method_ref_ast = ast -> child [ 0 ]		122265	2		=			
ANR	122273	Identifier	method_ref_ast		122265	0					
ANR	122274	ArrayIndexing	ast -> child [ 0 ]		122265	1					
ANR	122275	PtrMemberAccess	ast -> child		122265	0					
ANR	122276	Identifier	ast		122265	0					
ANR	122277	Identifier	child		122265	1					
ANR	122278	PrimaryExpression	0		122265	1					
ANR	122279	IdentifierDeclStatement	zend_ast * alias_ast = ast -> child [ 1 ] ;	5056:1:149140:149175	122265	1	True				
ANR	122280	IdentifierDecl	* alias_ast = ast -> child [ 1 ]		122265	0					
ANR	122281	IdentifierDeclType	zend_ast *		122265	0					
ANR	122282	Identifier	alias_ast		122265	1					
ANR	122283	AssignmentExpression	* alias_ast = ast -> child [ 1 ]		122265	2		=			
ANR	122284	Identifier	alias_ast		122265	0					
ANR	122285	ArrayIndexing	ast -> child [ 1 ]		122265	1					
ANR	122286	PtrMemberAccess	ast -> child		122265	0					
ANR	122287	Identifier	ast		122265	0					
ANR	122288	Identifier	child		122265	1					
ANR	122289	PrimaryExpression	1		122265	1					
ANR	122290	IdentifierDeclStatement	uint32_t modifiers = ast -> attr ;	5057:1:149178:149208	122265	2	True				
ANR	122291	IdentifierDecl	modifiers = ast -> attr		122265	0					
ANR	122292	IdentifierDeclType	uint32_t		122265	0					
ANR	122293	Identifier	modifiers		122265	1					
ANR	122294	AssignmentExpression	modifiers = ast -> attr		122265	2		=			
ANR	122295	Identifier	modifiers		122265	0					
ANR	122296	PtrMemberAccess	ast -> attr		122265	1					
ANR	122297	Identifier	ast		122265	0					
ANR	122298	Identifier	attr		122265	1					
ANR	122299	IdentifierDeclStatement	zend_trait_alias * alias ;	5059:1:149212:149235	122265	3	True				
ANR	122300	IdentifierDecl	* alias		122265	0					
ANR	122301	IdentifierDeclType	zend_trait_alias *		122265	0					
ANR	122302	Identifier	alias		122265	1					
ANR	122303	IfStatement	if ( modifiers == ZEND_ACC_STATIC )		122265	4					
ANR	122304	Condition	modifiers == ZEND_ACC_STATIC	5061:5:149243:149270	122265	0	True				
ANR	122305	EqualityExpression	modifiers == ZEND_ACC_STATIC		122265	0		==			
ANR	122306	Identifier	modifiers		122265	0					
ANR	122307	Identifier	ZEND_ACC_STATIC		122265	1					
ANR	122308	CompoundStatement		8:35:178:178	122265	1					
ANR	122309	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use 'static' as method modifier"" )"	5062:2:149277:149355	122265	0	True				
ANR	122310	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use 'static' as method modifier"" )"		122265	0					
ANR	122311	Callee	zend_error_noreturn		122265	0					
ANR	122312	Identifier	zend_error_noreturn		122265	0					
ANR	122313	ArgumentList	E_COMPILE_ERROR		122265	1					
ANR	122314	Argument	E_COMPILE_ERROR		122265	0					
ANR	122315	Identifier	E_COMPILE_ERROR		122265	0					
ANR	122316	Argument	"""Cannot use 'static' as method modifier"""		122265	1					
ANR	122317	PrimaryExpression	"""Cannot use 'static' as method modifier"""		122265	0					
ANR	122318	ElseStatement	else		122265	0					
ANR	122319	IfStatement	if ( modifiers == ZEND_ACC_ABSTRACT )		122265	0					
ANR	122320	Condition	modifiers == ZEND_ACC_ABSTRACT	5063:12:149369:149398	122265	0	True				
ANR	122321	EqualityExpression	modifiers == ZEND_ACC_ABSTRACT		122265	0		==			
ANR	122322	Identifier	modifiers		122265	0					
ANR	122323	Identifier	ZEND_ACC_ABSTRACT		122265	1					
ANR	122324	CompoundStatement		10:44:306:306	122265	1					
ANR	122325	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use 'abstract' as method modifier"" )"	5064:2:149405:149485	122265	0	True				
ANR	122326	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use 'abstract' as method modifier"" )"		122265	0					
ANR	122327	Callee	zend_error_noreturn		122265	0					
ANR	122328	Identifier	zend_error_noreturn		122265	0					
ANR	122329	ArgumentList	E_COMPILE_ERROR		122265	1					
ANR	122330	Argument	E_COMPILE_ERROR		122265	0					
ANR	122331	Identifier	E_COMPILE_ERROR		122265	0					
ANR	122332	Argument	"""Cannot use 'abstract' as method modifier"""		122265	1					
ANR	122333	PrimaryExpression	"""Cannot use 'abstract' as method modifier"""		122265	0					
ANR	122334	ElseStatement	else		122265	0					
ANR	122335	IfStatement	if ( modifiers == ZEND_ACC_FINAL )		122265	0					
ANR	122336	Condition	modifiers == ZEND_ACC_FINAL	5065:12:149499:149525	122265	0	True				
ANR	122337	EqualityExpression	modifiers == ZEND_ACC_FINAL		122265	0		==			
ANR	122338	Identifier	modifiers		122265	0					
ANR	122339	Identifier	ZEND_ACC_FINAL		122265	1					
ANR	122340	CompoundStatement		12:41:433:433	122265	1					
ANR	122341	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use 'final' as method modifier"" )"	5066:2:149532:149609	122265	0	True				
ANR	122342	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use 'final' as method modifier"" )"		122265	0					
ANR	122343	Callee	zend_error_noreturn		122265	0					
ANR	122344	Identifier	zend_error_noreturn		122265	0					
ANR	122345	ArgumentList	E_COMPILE_ERROR		122265	1					
ANR	122346	Argument	E_COMPILE_ERROR		122265	0					
ANR	122347	Identifier	E_COMPILE_ERROR		122265	0					
ANR	122348	Argument	"""Cannot use 'final' as method modifier"""		122265	1					
ANR	122349	PrimaryExpression	"""Cannot use 'final' as method modifier"""		122265	0					
ANR	122350	ExpressionStatement	alias = emalloc ( sizeof ( zend_trait_alias ) )	5069:1:149616:149657	122265	5	True				
ANR	122351	AssignmentExpression	alias = emalloc ( sizeof ( zend_trait_alias ) )		122265	0		=			
ANR	122352	Identifier	alias		122265	0					
ANR	122353	CallExpression	emalloc ( sizeof ( zend_trait_alias ) )		122265	1					
ANR	122354	Callee	emalloc		122265	0					
ANR	122355	Identifier	emalloc		122265	0					
ANR	122356	ArgumentList	sizeof ( zend_trait_alias )		122265	1					
ANR	122357	Argument	sizeof ( zend_trait_alias )		122265	0					
ANR	122358	SizeofExpression	sizeof ( zend_trait_alias )		122265	0					
ANR	122359	Sizeof	sizeof		122265	0					
ANR	122360	SizeofOperand	zend_trait_alias		122265	1					
ANR	122361	ExpressionStatement	alias -> trait_method = zend_compile_method_ref ( method_ref_ast )	5070:1:149660:149721	122265	6	True				
ANR	122362	AssignmentExpression	alias -> trait_method = zend_compile_method_ref ( method_ref_ast )		122265	0		=			
ANR	122363	PtrMemberAccess	alias -> trait_method		122265	0					
ANR	122364	Identifier	alias		122265	0					
ANR	122365	Identifier	trait_method		122265	1					
ANR	122366	CallExpression	zend_compile_method_ref ( method_ref_ast )		122265	1					
ANR	122367	Callee	zend_compile_method_ref		122265	0					
ANR	122368	Identifier	zend_compile_method_ref		122265	0					
ANR	122369	ArgumentList	method_ref_ast		122265	1					
ANR	122370	Argument	method_ref_ast		122265	0					
ANR	122371	Identifier	method_ref_ast		122265	0					
ANR	122372	ExpressionStatement	alias -> modifiers = modifiers	5071:1:149724:149752	122265	7	True				
ANR	122373	AssignmentExpression	alias -> modifiers = modifiers		122265	0		=			
ANR	122374	PtrMemberAccess	alias -> modifiers		122265	0					
ANR	122375	Identifier	alias		122265	0					
ANR	122376	Identifier	modifiers		122265	1					
ANR	122377	Identifier	modifiers		122265	1					
ANR	122378	IfStatement	if ( alias_ast )		122265	8					
ANR	122379	Condition	alias_ast	5073:5:149760:149768	122265	0	True				
ANR	122380	Identifier	alias_ast		122265	0					
ANR	122381	CompoundStatement		20:16:676:676	122265	1					
ANR	122382	ExpressionStatement	alias -> alias = zend_string_copy ( zend_ast_get_str ( alias_ast ) )	5074:2:149775:149835	122265	0	True				
ANR	122383	AssignmentExpression	alias -> alias = zend_string_copy ( zend_ast_get_str ( alias_ast ) )		122265	0		=			
ANR	122384	PtrMemberAccess	alias -> alias		122265	0					
ANR	122385	Identifier	alias		122265	0					
ANR	122386	Identifier	alias		122265	1					
ANR	122387	CallExpression	zend_string_copy ( zend_ast_get_str ( alias_ast ) )		122265	1					
ANR	122388	Callee	zend_string_copy		122265	0					
ANR	122389	Identifier	zend_string_copy		122265	0					
ANR	122390	ArgumentList	zend_ast_get_str ( alias_ast )		122265	1					
ANR	122391	Argument	zend_ast_get_str ( alias_ast )		122265	0					
ANR	122392	CallExpression	zend_ast_get_str ( alias_ast )		122265	0					
ANR	122393	Callee	zend_ast_get_str		122265	0					
ANR	122394	Identifier	zend_ast_get_str		122265	0					
ANR	122395	ArgumentList	alias_ast		122265	1					
ANR	122396	Argument	alias_ast		122265	0					
ANR	122397	Identifier	alias_ast		122265	0					
ANR	122398	ElseStatement	else		122265	0					
ANR	122399	CompoundStatement		22:8:750:750	122265	0					
ANR	122400	ExpressionStatement	alias -> alias = NULL	5076:2:149849:149868	122265	0	True				
ANR	122401	AssignmentExpression	alias -> alias = NULL		122265	0		=			
ANR	122402	PtrMemberAccess	alias -> alias		122265	0					
ANR	122403	Identifier	alias		122265	0					
ANR	122404	Identifier	alias		122265	1					
ANR	122405	Identifier	NULL		122265	1					
ANR	122406	ExpressionStatement	"zend_add_to_list ( & CG ( active_class_entry ) -> trait_aliases , alias )"	5079:1:149875:149938	122265	9	True				
ANR	122407	CallExpression	"zend_add_to_list ( & CG ( active_class_entry ) -> trait_aliases , alias )"		122265	0					
ANR	122408	Callee	zend_add_to_list		122265	0					
ANR	122409	Identifier	zend_add_to_list		122265	0					
ANR	122410	ArgumentList	& CG ( active_class_entry ) -> trait_aliases		122265	1					
ANR	122411	Argument	& CG ( active_class_entry ) -> trait_aliases		122265	0					
ANR	122412	UnaryOperationExpression	& CG ( active_class_entry ) -> trait_aliases		122265	0					
ANR	122413	UnaryOperator	&		122265	0					
ANR	122414	PtrMemberAccess	CG ( active_class_entry ) -> trait_aliases		122265	1					
ANR	122415	CallExpression	CG ( active_class_entry )		122265	0					
ANR	122416	Callee	CG		122265	0					
ANR	122417	Identifier	CG		122265	0					
ANR	122418	ArgumentList	active_class_entry		122265	1					
ANR	122419	Argument	active_class_entry		122265	0					
ANR	122420	Identifier	active_class_entry		122265	0					
ANR	122421	Identifier	trait_aliases		122265	1					
ANR	122422	Argument	alias		122265	1					
ANR	122423	Identifier	alias		122265	0					
ANR	122424	ReturnType	static void		122265	1					
ANR	122425	Identifier	zend_compile_trait_alias		122265	2					
ANR	122426	ParameterList	zend_ast * ast		122265	3					
ANR	122427	Parameter	zend_ast * ast	5053:37:149069:149081	122265	0	True				
ANR	122428	ParameterType	zend_ast *		122265	0					
ANR	122429	Identifier	ast		122265	1					
ANR	122430	CFGEntryNode	ENTRY		122265		True				
ANR	122431	CFGExitNode	EXIT		122265		True				
ANR	122432	Symbol	zend_compile_method_ref		122265						
ANR	122433	Symbol	ast		122265						
ANR	122434	Symbol	E_COMPILE_ERROR		122265						
ANR	122435	Symbol	active_class_entry		122265						
ANR	122436	Symbol	modifiers		122265						
ANR	122437	Symbol	ZEND_ACC_FINAL		122265						
ANR	122438	Symbol	emalloc		122265						
ANR	122439	Symbol	* ast		122265						
ANR	122440	Symbol	zend_ast_get_str		122265						
ANR	122441	Symbol	* * ast		122265						
ANR	122442	Symbol	alias		122265						
ANR	122443	Symbol	ZEND_ACC_STATIC		122265						
ANR	122444	Symbol	& CG ( active_class_entry ) -> trait_aliases		122265						
ANR	122445	Symbol	ast -> attr		122265						
ANR	122446	Symbol	alias -> trait_method		122265						
ANR	122447	Symbol	NULL		122265						
ANR	122448	Symbol	CG		122265						
ANR	122449	Symbol	zend_string_copy		122265						
ANR	122450	Symbol	method_ref_ast		122265						
ANR	122451	Symbol	alias -> alias		122265						
ANR	122452	Symbol	* alias		122265						
ANR	122453	Symbol	alias_ast		122265						
ANR	122454	Symbol	ZEND_ACC_ABSTRACT		122265						
ANR	122455	Symbol	alias -> modifiers		122265						
ANR	122456	Symbol	* ast -> child		122265						
ANR	122457	Symbol	ast -> child		122265						
ANR	122458	Function	zend_compile_use_trait	5083:0:149953:151531							
ANR	122459	FunctionDef	zend_compile_use_trait (zend_ast * ast)		122458	0					
ANR	122460	CompoundStatement		5084:0:150006:151531	122458	0					
ANR	122461	IdentifierDeclStatement	zend_ast_list * traits = zend_ast_get_list ( ast -> child [ 0 ] ) ;	5085:1:150009:150065	122458	0	True				
ANR	122462	IdentifierDecl	* traits = zend_ast_get_list ( ast -> child [ 0 ] )		122458	0					
ANR	122463	IdentifierDeclType	zend_ast_list *		122458	0					
ANR	122464	Identifier	traits		122458	1					
ANR	122465	AssignmentExpression	* traits = zend_ast_get_list ( ast -> child [ 0 ] )		122458	2		=			
ANR	122466	Identifier	traits		122458	0					
ANR	122467	CallExpression	zend_ast_get_list ( ast -> child [ 0 ] )		122458	1					
ANR	122468	Callee	zend_ast_get_list		122458	0					
ANR	122469	Identifier	zend_ast_get_list		122458	0					
ANR	122470	ArgumentList	ast -> child [ 0 ]		122458	1					
ANR	122471	Argument	ast -> child [ 0 ]		122458	0					
ANR	122472	ArrayIndexing	ast -> child [ 0 ]		122458	0					
ANR	122473	PtrMemberAccess	ast -> child		122458	0					
ANR	122474	Identifier	ast		122458	0					
ANR	122475	Identifier	child		122458	1					
ANR	122476	PrimaryExpression	0		122458	1					
ANR	122477	IdentifierDeclStatement	zend_ast_list * adaptations = ast -> child [ 1 ] ? zend_ast_get_list ( ast -> child [ 1 ] ) : NULL ;	5086:1:150068:150152	122458	1	True				
ANR	122478	IdentifierDecl	* adaptations = ast -> child [ 1 ] ? zend_ast_get_list ( ast -> child [ 1 ] ) : NULL		122458	0					
ANR	122479	IdentifierDeclType	zend_ast_list *		122458	0					
ANR	122480	Identifier	adaptations		122458	1					
ANR	122481	AssignmentExpression	* adaptations = ast -> child [ 1 ] ? zend_ast_get_list ( ast -> child [ 1 ] ) : NULL		122458	2		=			
ANR	122482	Identifier	adaptations		122458	0					
ANR	122483	ConditionalExpression	ast -> child [ 1 ] ? zend_ast_get_list ( ast -> child [ 1 ] ) : NULL		122458	1					
ANR	122484	Condition	ast -> child [ 1 ]		122458	0					
ANR	122485	ArrayIndexing	ast -> child [ 1 ]		122458	0					
ANR	122486	PtrMemberAccess	ast -> child		122458	0					
ANR	122487	Identifier	ast		122458	0					
ANR	122488	Identifier	child		122458	1					
ANR	122489	PrimaryExpression	1		122458	1					
ANR	122490	CallExpression	zend_ast_get_list ( ast -> child [ 1 ] )		122458	1					
ANR	122491	Callee	zend_ast_get_list		122458	0					
ANR	122492	Identifier	zend_ast_get_list		122458	0					
ANR	122493	ArgumentList	ast -> child [ 1 ]		122458	1					
ANR	122494	Argument	ast -> child [ 1 ]		122458	0					
ANR	122495	ArrayIndexing	ast -> child [ 1 ]		122458	0					
ANR	122496	PtrMemberAccess	ast -> child		122458	0					
ANR	122497	Identifier	ast		122458	0					
ANR	122498	Identifier	child		122458	1					
ANR	122499	PrimaryExpression	1		122458	1					
ANR	122500	Identifier	NULL		122458	2					
ANR	122501	IdentifierDeclStatement	zend_class_entry * ce = CG ( active_class_entry ) ;	5087:1:150155:150200	122458	2	True				
ANR	122502	IdentifierDecl	* ce = CG ( active_class_entry )		122458	0					
ANR	122503	IdentifierDeclType	zend_class_entry *		122458	0					
ANR	122504	Identifier	ce		122458	1					
ANR	122505	AssignmentExpression	* ce = CG ( active_class_entry )		122458	2		=			
ANR	122506	Identifier	ce		122458	0					
ANR	122507	CallExpression	CG ( active_class_entry )		122458	1					
ANR	122508	Callee	CG		122458	0					
ANR	122509	Identifier	CG		122458	0					
ANR	122510	ArgumentList	active_class_entry		122458	1					
ANR	122511	Argument	active_class_entry		122458	0					
ANR	122512	Identifier	active_class_entry		122458	0					
ANR	122513	IdentifierDeclStatement	zend_op * opline ;	5088:1:150203:150218	122458	3	True				
ANR	122514	IdentifierDecl	* opline		122458	0					
ANR	122515	IdentifierDeclType	zend_op *		122458	0					
ANR	122516	Identifier	opline		122458	1					
ANR	122517	IdentifierDeclStatement	uint32_t i ;	5089:1:150221:150231	122458	4	True				
ANR	122518	IdentifierDecl	i		122458	0					
ANR	122519	IdentifierDeclType	uint32_t		122458	0					
ANR	122520	Identifier	i		122458	1					
ANR	122521	ForStatement	for ( i = 0 ; i < traits -> children ; ++ i )		122458	5					
ANR	122522	ForInit	i = 0 ;	5091:6:150240:150245	122458	0	True				
ANR	122523	AssignmentExpression	i = 0		122458	0		=			
ANR	122524	Identifier	i		122458	0					
ANR	122525	PrimaryExpression	0		122458	1					
ANR	122526	Condition	i < traits -> children	5091:13:150247:150266	122458	1	True				
ANR	122527	RelationalExpression	i < traits -> children		122458	0		<			
ANR	122528	Identifier	i		122458	0					
ANR	122529	PtrMemberAccess	traits -> children		122458	1					
ANR	122530	Identifier	traits		122458	0					
ANR	122531	Identifier	children		122458	1					
ANR	122532	UnaryExpression	++ i	5091:35:150269:150271	122458	2	True				
ANR	122533	IncDec	++		122458	0					
ANR	122534	Identifier	i		122458	1					
ANR	122535	CompoundStatement		10:2:313:360	122458	3					
ANR	122536	IdentifierDeclStatement	zend_ast * trait_ast = traits -> child [ i ] ;	5092:2:150278:150316	122458	0	True				
ANR	122537	IdentifierDecl	* trait_ast = traits -> child [ i ]		122458	0					
ANR	122538	IdentifierDeclType	zend_ast *		122458	0					
ANR	122539	Identifier	trait_ast		122458	1					
ANR	122540	AssignmentExpression	* trait_ast = traits -> child [ i ]		122458	2		=			
ANR	122541	Identifier	trait_ast		122458	0					
ANR	122542	ArrayIndexing	traits -> child [ i ]		122458	1					
ANR	122543	PtrMemberAccess	traits -> child		122458	0					
ANR	122544	Identifier	traits		122458	0					
ANR	122545	Identifier	child		122458	1					
ANR	122546	Identifier	i		122458	1					
ANR	122547	IdentifierDeclStatement	zend_string * name = zend_ast_get_str ( trait_ast ) ;	5093:2:150320:150367	122458	1	True				
ANR	122548	IdentifierDecl	* name = zend_ast_get_str ( trait_ast )		122458	0					
ANR	122549	IdentifierDeclType	zend_string *		122458	0					
ANR	122550	Identifier	name		122458	1					
ANR	122551	AssignmentExpression	* name = zend_ast_get_str ( trait_ast )		122458	2		=			
ANR	122552	Identifier	name		122458	0					
ANR	122553	CallExpression	zend_ast_get_str ( trait_ast )		122458	1					
ANR	122554	Callee	zend_ast_get_str		122458	0					
ANR	122555	Identifier	zend_ast_get_str		122458	0					
ANR	122556	ArgumentList	trait_ast		122458	1					
ANR	122557	Argument	trait_ast		122458	0					
ANR	122558	Identifier	trait_ast		122458	0					
ANR	122559	IfStatement	if ( ce -> ce_flags & ZEND_ACC_INTERFACE )		122458	2					
ANR	122560	Condition	ce -> ce_flags & ZEND_ACC_INTERFACE	5095:6:150376:150408	122458	0	True				
ANR	122561	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		122458	0		&			
ANR	122562	PtrMemberAccess	ce -> ce_flags		122458	0					
ANR	122563	Identifier	ce		122458	0					
ANR	122564	Identifier	ce_flags		122458	1					
ANR	122565	Identifier	ZEND_ACC_INTERFACE		122458	1					
ANR	122566	CompoundStatement		12:41:404:404	122458	1					
ANR	122567	Statement	zend_error_noreturn	5096:3:150416:150434	122458	0	True				
ANR	122568	Statement	(	5096:22:150435:150435	122458	1	True				
ANR	122569	Statement	E_COMPILE_ERROR	5096:23:150436:150450	122458	2	True				
ANR	122570	Statement	","	5096:38:150451:150451	122458	3	True				
ANR	122571	Statement	"""Cannot use traits inside of interfaces. """	5096:40:150453:150494	122458	4	True				
ANR	122572	Statement	"""%s is used in %s"""	5097:4:150500:150517	122458	5	True				
ANR	122573	Statement	","	5097:22:150518:150518	122458	6	True				
ANR	122574	Statement	ZSTR_VAL	5097:24:150520:150527	122458	7	True				
ANR	122575	Statement	(	5097:32:150528:150528	122458	8	True				
ANR	122576	Statement	name	5097:33:150529:150532	122458	9	True				
ANR	122577	Statement	)	5097:37:150533:150533	122458	10	True				
ANR	122578	Statement	","	5097:38:150534:150534	122458	11	True				
ANR	122579	Statement	ZSTR_VAL	5097:40:150536:150543	122458	12	True				
ANR	122580	Statement	(	5097:48:150544:150544	122458	13	True				
ANR	122581	Statement	ce	5097:49:150545:150546	122458	14	True				
ANR	122582	Statement	->	5097:51:150547:150548	122458	15	True				
ANR	122583	Statement	name	5097:53:150549:150552	122458	16	True				
ANR	122584	Statement	)	5097:57:150553:150553	122458	17	True				
ANR	122585	Statement	)	5097:58:150554:150554	122458	18	True				
ANR	122586	ExpressionStatement		5097:59:150555:150555	122458	19	True				
ANR	122587	SwitchStatement	switch ( zend_get_class_fetch_type ( name ) )		122458	3					
ANR	122588	Condition	zend_get_class_fetch_type ( name )	5100:10:150572:150602	122458	0	True				
ANR	122589	CallExpression	zend_get_class_fetch_type ( name )		122458	0					
ANR	122590	Callee	zend_get_class_fetch_type		122458	0					
ANR	122591	Identifier	zend_get_class_fetch_type		122458	0					
ANR	122592	ArgumentList	name		122458	1					
ANR	122593	Argument	name		122458	0					
ANR	122594	Identifier	name		122458	0					
ANR	122595	CompoundStatement		17:43:598:598	122458	1					
ANR	122596	Label	case ZEND_FETCH_CLASS_SELF :	5101:3:150610:150636	122458	0	True				
ANR	122597	Identifier	ZEND_FETCH_CLASS_SELF		122458	0					
ANR	122598	Label	case ZEND_FETCH_CLASS_PARENT :	5102:3:150641:150669	122458	1	True				
ANR	122599	Identifier	ZEND_FETCH_CLASS_PARENT		122458	0					
ANR	122600	Label	case ZEND_FETCH_CLASS_STATIC :	5103:3:150674:150702	122458	2	True				
ANR	122601	Identifier	ZEND_FETCH_CLASS_STATIC		122458	0					
ANR	122602	Statement	zend_error_noreturn	5104:4:150708:150726	122458	3	True				
ANR	122603	Statement	(	5104:23:150727:150727	122458	4	True				
ANR	122604	Statement	E_COMPILE_ERROR	5104:24:150728:150742	122458	5	True				
ANR	122605	Statement	","	5104:39:150743:150743	122458	6	True				
ANR	122606	Statement	"""Cannot use '%s' as trait name """	5104:41:150745:150776	122458	7	True				
ANR	122607	Statement	"""as it is reserved"""	5105:5:150783:150801	122458	8	True				
ANR	122608	Statement	","	5105:24:150802:150802	122458	9	True				
ANR	122609	Statement	ZSTR_VAL	5105:26:150804:150811	122458	10	True				
ANR	122610	Statement	(	5105:34:150812:150812	122458	11	True				
ANR	122611	Statement	name	5105:35:150813:150816	122458	12	True				
ANR	122612	Statement	)	5105:39:150817:150817	122458	13	True				
ANR	122613	Statement	)	5105:40:150818:150818	122458	14	True				
ANR	122614	ExpressionStatement		5105:41:150819:150819	122458	15	True				
ANR	122615	BreakStatement	break ;	5106:4:150825:150830	122458	16	True				
ANR	122616	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	5109:2:150839:150880	122458	4	True				
ANR	122617	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		122458	0		=			
ANR	122618	Identifier	opline		122458	0					
ANR	122619	CallExpression	get_next_op ( CG ( active_op_array ) )		122458	1					
ANR	122620	Callee	get_next_op		122458	0					
ANR	122621	Identifier	get_next_op		122458	0					
ANR	122622	ArgumentList	CG ( active_op_array )		122458	1					
ANR	122623	Argument	CG ( active_op_array )		122458	0					
ANR	122624	CallExpression	CG ( active_op_array )		122458	0					
ANR	122625	Callee	CG		122458	0					
ANR	122626	Identifier	CG		122458	0					
ANR	122627	ArgumentList	active_op_array		122458	1					
ANR	122628	Argument	active_op_array		122458	0					
ANR	122629	Identifier	active_op_array		122458	0					
ANR	122630	ExpressionStatement	opline -> opcode = ZEND_ADD_TRAIT	5110:2:150884:150915	122458	5	True				
ANR	122631	AssignmentExpression	opline -> opcode = ZEND_ADD_TRAIT		122458	0		=			
ANR	122632	PtrMemberAccess	opline -> opcode		122458	0					
ANR	122633	Identifier	opline		122458	0					
ANR	122634	Identifier	opcode		122458	1					
ANR	122635	Identifier	ZEND_ADD_TRAIT		122458	1					
ANR	122636	ExpressionStatement	"SET_NODE ( opline -> op1 , & FC ( implementing_class ) )"	5111:2:150919:150965	122458	6	True				
ANR	122637	CallExpression	"SET_NODE ( opline -> op1 , & FC ( implementing_class ) )"		122458	0					
ANR	122638	Callee	SET_NODE		122458	0					
ANR	122639	Identifier	SET_NODE		122458	0					
ANR	122640	ArgumentList	opline -> op1		122458	1					
ANR	122641	Argument	opline -> op1		122458	0					
ANR	122642	PtrMemberAccess	opline -> op1		122458	0					
ANR	122643	Identifier	opline		122458	0					
ANR	122644	Identifier	op1		122458	1					
ANR	122645	Argument	& FC ( implementing_class )		122458	1					
ANR	122646	UnaryOperationExpression	& FC ( implementing_class )		122458	0					
ANR	122647	UnaryOperator	&		122458	0					
ANR	122648	CallExpression	FC ( implementing_class )		122458	1					
ANR	122649	Callee	FC		122458	0					
ANR	122650	Identifier	FC		122458	0					
ANR	122651	ArgumentList	implementing_class		122458	1					
ANR	122652	Argument	implementing_class		122458	0					
ANR	122653	Identifier	implementing_class		122458	0					
ANR	122654	ExpressionStatement	opline -> op2_type = IS_CONST	5112:2:150969:150996	122458	7	True				
ANR	122655	AssignmentExpression	opline -> op2_type = IS_CONST		122458	0		=			
ANR	122656	PtrMemberAccess	opline -> op2_type		122458	0					
ANR	122657	Identifier	opline		122458	0					
ANR	122658	Identifier	op2_type		122458	1					
ANR	122659	Identifier	IS_CONST		122458	1					
ANR	122660	ExpressionStatement	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name_ast ( trait_ast ) )"	5113:2:151000:151114	122458	8	True				
ANR	122661	AssignmentExpression	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name_ast ( trait_ast ) )"		122458	0		=			
ANR	122662	MemberAccess	opline -> op2 . constant		122458	0					
ANR	122663	PtrMemberAccess	opline -> op2		122458	0					
ANR	122664	Identifier	opline		122458	0					
ANR	122665	Identifier	op2		122458	1					
ANR	122666	Identifier	constant		122458	1					
ANR	122667	CallExpression	"zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name_ast ( trait_ast ) )"		122458	1					
ANR	122668	Callee	zend_add_class_name_literal		122458	0					
ANR	122669	Identifier	zend_add_class_name_literal		122458	0					
ANR	122670	ArgumentList	CG ( active_op_array )		122458	1					
ANR	122671	Argument	CG ( active_op_array )		122458	0					
ANR	122672	CallExpression	CG ( active_op_array )		122458	0					
ANR	122673	Callee	CG		122458	0					
ANR	122674	Identifier	CG		122458	0					
ANR	122675	ArgumentList	active_op_array		122458	1					
ANR	122676	Argument	active_op_array		122458	0					
ANR	122677	Identifier	active_op_array		122458	0					
ANR	122678	Argument	zend_resolve_class_name_ast ( trait_ast )		122458	1					
ANR	122679	CallExpression	zend_resolve_class_name_ast ( trait_ast )		122458	0					
ANR	122680	Callee	zend_resolve_class_name_ast		122458	0					
ANR	122681	Identifier	zend_resolve_class_name_ast		122458	0					
ANR	122682	ArgumentList	trait_ast		122458	1					
ANR	122683	Argument	trait_ast		122458	0					
ANR	122684	Identifier	trait_ast		122458	0					
ANR	122685	ExpressionStatement	ce -> num_traits ++	5116:2:151119:151135	122458	9	True				
ANR	122686	PostIncDecOperationExpression	ce -> num_traits ++		122458	0					
ANR	122687	PtrMemberAccess	ce -> num_traits		122458	0					
ANR	122688	Identifier	ce		122458	0					
ANR	122689	Identifier	num_traits		122458	1					
ANR	122690	IncDec	++		122458	1					
ANR	122691	IfStatement	if ( ! adaptations )		122458	6					
ANR	122692	Condition	! adaptations	5119:5:151146:151157	122458	0	True				
ANR	122693	UnaryOperationExpression	! adaptations		122458	0					
ANR	122694	UnaryOperator	!		122458	0					
ANR	122695	Identifier	adaptations		122458	1					
ANR	122696	CompoundStatement		36:19:1153:1153	122458	1					
ANR	122697	ReturnStatement	return ;	5120:2:151164:151170	122458	0	True				
ANR	122698	ForStatement	for ( i = 0 ; i < adaptations -> children ; ++ i )		122458	7					
ANR	122699	ForInit	i = 0 ;	5123:6:151182:151187	122458	0	True				
ANR	122700	AssignmentExpression	i = 0		122458	0		=			
ANR	122701	Identifier	i		122458	0					
ANR	122702	PrimaryExpression	0		122458	1					
ANR	122703	Condition	i < adaptations -> children	5123:13:151189:151213	122458	1	True				
ANR	122704	RelationalExpression	i < adaptations -> children		122458	0		<			
ANR	122705	Identifier	i		122458	0					
ANR	122706	PtrMemberAccess	adaptations -> children		122458	1					
ANR	122707	Identifier	adaptations		122458	0					
ANR	122708	Identifier	children		122458	1					
ANR	122709	UnaryExpression	++ i	5123:40:151216:151218	122458	2	True				
ANR	122710	IncDec	++		122458	0					
ANR	122711	Identifier	i		122458	1					
ANR	122712	CompoundStatement		41:2:1218:1266	122458	3					
ANR	122713	IdentifierDeclStatement	zend_ast * adaptation_ast = adaptations -> child [ i ] ;	5124:2:151225:151273	122458	0	True				
ANR	122714	IdentifierDecl	* adaptation_ast = adaptations -> child [ i ]		122458	0					
ANR	122715	IdentifierDeclType	zend_ast *		122458	0					
ANR	122716	Identifier	adaptation_ast		122458	1					
ANR	122717	AssignmentExpression	* adaptation_ast = adaptations -> child [ i ]		122458	2		=			
ANR	122718	Identifier	adaptation_ast		122458	0					
ANR	122719	ArrayIndexing	adaptations -> child [ i ]		122458	1					
ANR	122720	PtrMemberAccess	adaptations -> child		122458	0					
ANR	122721	Identifier	adaptations		122458	0					
ANR	122722	Identifier	child		122458	1					
ANR	122723	Identifier	i		122458	1					
ANR	122724	SwitchStatement	switch ( adaptation_ast -> kind )		122458	1					
ANR	122725	Condition	adaptation_ast -> kind	5125:10:151285:151304	122458	0	True				
ANR	122726	PtrMemberAccess	adaptation_ast -> kind		122458	0					
ANR	122727	Identifier	adaptation_ast		122458	0					
ANR	122728	Identifier	kind		122458	1					
ANR	122729	CompoundStatement		42:32:1300:1300	122458	1					
ANR	122730	Label	case ZEND_AST_TRAIT_PRECEDENCE :	5126:3:151312:151342	122458	0	True				
ANR	122731	Identifier	ZEND_AST_TRAIT_PRECEDENCE		122458	0					
ANR	122732	ExpressionStatement	zend_compile_trait_precedence ( adaptation_ast )	5127:4:151348:151393	122458	1	True				
ANR	122733	CallExpression	zend_compile_trait_precedence ( adaptation_ast )		122458	0					
ANR	122734	Callee	zend_compile_trait_precedence		122458	0					
ANR	122735	Identifier	zend_compile_trait_precedence		122458	0					
ANR	122736	ArgumentList	adaptation_ast		122458	1					
ANR	122737	Argument	adaptation_ast		122458	0					
ANR	122738	Identifier	adaptation_ast		122458	0					
ANR	122739	BreakStatement	break ;	5128:4:151399:151404	122458	2	True				
ANR	122740	Label	case ZEND_AST_TRAIT_ALIAS :	5129:3:151409:151434	122458	3	True				
ANR	122741	Identifier	ZEND_AST_TRAIT_ALIAS		122458	0					
ANR	122742	ExpressionStatement	zend_compile_trait_alias ( adaptation_ast )	5130:4:151440:151480	122458	4	True				
ANR	122743	CallExpression	zend_compile_trait_alias ( adaptation_ast )		122458	0					
ANR	122744	Callee	zend_compile_trait_alias		122458	0					
ANR	122745	Identifier	zend_compile_trait_alias		122458	0					
ANR	122746	ArgumentList	adaptation_ast		122458	1					
ANR	122747	Argument	adaptation_ast		122458	0					
ANR	122748	Identifier	adaptation_ast		122458	0					
ANR	122749	BreakStatement	break ;	5131:4:151486:151491	122458	5	True				
ANR	122750	Statement	EMPTY_SWITCH_DEFAULT_CASE	5132:3:151496:151520	122458	6	True				
ANR	122751	Statement	(	5132:28:151521:151521	122458	7	True				
ANR	122752	Statement	)	5132:29:151522:151522	122458	8	True				
ANR	122753	ReturnType	void		122458	1					
ANR	122754	Identifier	zend_compile_use_trait		122458	2					
ANR	122755	ParameterList	zend_ast * ast		122458	3					
ANR	122756	Parameter	zend_ast * ast	5083:28:149981:149993	122458	0	True				
ANR	122757	ParameterType	zend_ast *		122458	0					
ANR	122758	Identifier	ast		122458	1					
ANR	122759	CFGEntryNode	ENTRY		122458		True				
ANR	122760	CFGExitNode	EXIT		122458		True				
ANR	122761	Symbol	ast		122458						
ANR	122762	Symbol	active_class_entry		122458						
ANR	122763	Symbol	* ce		122458						
ANR	122764	Symbol	trait_ast		122458						
ANR	122765	Symbol	opline		122458						
ANR	122766	Symbol	adaptations -> child		122458						
ANR	122767	Symbol	traits -> children		122458						
ANR	122768	Symbol	ZEND_ACC_INTERFACE		122458						
ANR	122769	Symbol	adaptation_ast -> kind		122458						
ANR	122770	Symbol	* traits -> child		122458						
ANR	122771	Symbol	* adaptations		122458						
ANR	122772	Symbol	IS_CONST		122458						
ANR	122773	Symbol	NULL		122458						
ANR	122774	Symbol	* * traits		122458						
ANR	122775	Symbol	adaptations -> children		122458						
ANR	122776	Symbol	ce -> ce_flags		122458						
ANR	122777	Symbol	adaptation_ast		122458						
ANR	122778	Symbol	ZEND_ADD_TRAIT		122458						
ANR	122779	Symbol	implementing_class		122458						
ANR	122780	Symbol	name		122458						
ANR	122781	Symbol	* ast -> child		122458						
ANR	122782	Symbol	ast -> child		122458						
ANR	122783	Symbol	opline -> op1		122458						
ANR	122784	Symbol	zend_add_class_name_literal		122458						
ANR	122785	Symbol	opline -> op2		122458						
ANR	122786	Symbol	traits		122458						
ANR	122787	Symbol	* traits		122458						
ANR	122788	Symbol	* adaptation_ast		122458						
ANR	122789	Symbol	* ast		122458						
ANR	122790	Symbol	zend_ast_get_str		122458						
ANR	122791	Symbol	* * ast		122458						
ANR	122792	Symbol	zend_get_class_fetch_type		122458						
ANR	122793	Symbol	ce		122458						
ANR	122794	Symbol	get_next_op		122458						
ANR	122795	Symbol	CG		122458						
ANR	122796	Symbol	zend_resolve_class_name_ast		122458						
ANR	122797	Symbol	active_op_array		122458						
ANR	122798	Symbol	& FC		122458						
ANR	122799	Symbol	i		122458						
ANR	122800	Symbol	ce -> num_traits		122458						
ANR	122801	Symbol	* adaptations -> child		122458						
ANR	122802	Symbol	zend_ast_get_list		122458						
ANR	122803	Symbol	* i		122458						
ANR	122804	Symbol	* opline		122458						
ANR	122805	Symbol	adaptations		122458						
ANR	122806	Symbol	opline -> opcode		122458						
ANR	122807	Symbol	* * adaptations		122458						
ANR	122808	Symbol	opline -> op2 . constant		122458						
ANR	122809	Symbol	opline -> op2_type		122458						
ANR	122810	Symbol	traits -> child		122458						
ANR	122811	Function	zend_compile_implements	5138:0:151544:152271							
ANR	122812	FunctionDef	"zend_compile_implements (znode * class_node , zend_ast * ast)"		122811	0					
ANR	122813	CompoundStatement		5139:0:151617:152271	122811	0					
ANR	122814	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	5140:1:151620:151664	122811	0	True				
ANR	122815	IdentifierDecl	* list = zend_ast_get_list ( ast )		122811	0					
ANR	122816	IdentifierDeclType	zend_ast_list *		122811	0					
ANR	122817	Identifier	list		122811	1					
ANR	122818	AssignmentExpression	* list = zend_ast_get_list ( ast )		122811	2		=			
ANR	122819	Identifier	list		122811	0					
ANR	122820	CallExpression	zend_ast_get_list ( ast )		122811	1					
ANR	122821	Callee	zend_ast_get_list		122811	0					
ANR	122822	Identifier	zend_ast_get_list		122811	0					
ANR	122823	ArgumentList	ast		122811	1					
ANR	122824	Argument	ast		122811	0					
ANR	122825	Identifier	ast		122811	0					
ANR	122826	IdentifierDeclStatement	uint32_t i ;	5141:1:151667:151677	122811	1	True				
ANR	122827	IdentifierDecl	i		122811	0					
ANR	122828	IdentifierDeclType	uint32_t		122811	0					
ANR	122829	Identifier	i		122811	1					
ANR	122830	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		122811	2					
ANR	122831	ForInit	i = 0 ;	5142:6:151685:151690	122811	0	True				
ANR	122832	AssignmentExpression	i = 0		122811	0		=			
ANR	122833	Identifier	i		122811	0					
ANR	122834	PrimaryExpression	0		122811	1					
ANR	122835	Condition	i < list -> children	5142:13:151692:151709	122811	1	True				
ANR	122836	RelationalExpression	i < list -> children		122811	0		<			
ANR	122837	Identifier	i		122811	0					
ANR	122838	PtrMemberAccess	list -> children		122811	1					
ANR	122839	Identifier	list		122811	0					
ANR	122840	Identifier	children		122811	1					
ANR	122841	UnaryExpression	++ i	5142:33:151712:151714	122811	2	True				
ANR	122842	IncDec	++		122811	0					
ANR	122843	Identifier	i		122811	1					
ANR	122844	CompoundStatement		8:2:195:210	122811	3					
ANR	122845	IdentifierDeclStatement	zend_ast * class_ast = list -> child [ i ] ;	5143:2:151721:151757	122811	0	True				
ANR	122846	IdentifierDecl	* class_ast = list -> child [ i ]		122811	0					
ANR	122847	IdentifierDeclType	zend_ast *		122811	0					
ANR	122848	Identifier	class_ast		122811	1					
ANR	122849	AssignmentExpression	* class_ast = list -> child [ i ]		122811	2		=			
ANR	122850	Identifier	class_ast		122811	0					
ANR	122851	ArrayIndexing	list -> child [ i ]		122811	1					
ANR	122852	PtrMemberAccess	list -> child		122811	0					
ANR	122853	Identifier	list		122811	0					
ANR	122854	Identifier	child		122811	1					
ANR	122855	Identifier	i		122811	1					
ANR	122856	IdentifierDeclStatement	zend_string * name = zend_ast_get_str ( class_ast ) ;	5144:2:151761:151808	122811	1	True				
ANR	122857	IdentifierDecl	* name = zend_ast_get_str ( class_ast )		122811	0					
ANR	122858	IdentifierDeclType	zend_string *		122811	0					
ANR	122859	Identifier	name		122811	1					
ANR	122860	AssignmentExpression	* name = zend_ast_get_str ( class_ast )		122811	2		=			
ANR	122861	Identifier	name		122811	0					
ANR	122862	CallExpression	zend_ast_get_str ( class_ast )		122811	1					
ANR	122863	Callee	zend_ast_get_str		122811	0					
ANR	122864	Identifier	zend_ast_get_str		122811	0					
ANR	122865	ArgumentList	class_ast		122811	1					
ANR	122866	Argument	class_ast		122811	0					
ANR	122867	Identifier	class_ast		122811	0					
ANR	122868	IdentifierDeclStatement	zend_op * opline ;	5146:2:151813:151828	122811	2	True				
ANR	122869	IdentifierDecl	* opline		122811	0					
ANR	122870	IdentifierDeclType	zend_op *		122811	0					
ANR	122871	Identifier	opline		122811	1					
ANR	122872	IfStatement	if ( ! zend_is_const_default_class_ref ( class_ast ) )		122811	3					
ANR	122873	Condition	! zend_is_const_default_class_ref ( class_ast )	5148:6:151837:151879	122811	0	True				
ANR	122874	UnaryOperationExpression	! zend_is_const_default_class_ref ( class_ast )		122811	0					
ANR	122875	UnaryOperator	!		122811	0					
ANR	122876	CallExpression	zend_is_const_default_class_ref ( class_ast )		122811	1					
ANR	122877	Callee	zend_is_const_default_class_ref		122811	0					
ANR	122878	Identifier	zend_is_const_default_class_ref		122811	0					
ANR	122879	ArgumentList	class_ast		122811	1					
ANR	122880	Argument	class_ast		122811	0					
ANR	122881	Identifier	class_ast		122811	0					
ANR	122882	CompoundStatement		10:51:264:264	122811	1					
ANR	122883	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as interface name as it is reserved"" , ZSTR_VAL ( name ) )"	5149:3:151887:151998	122811	0	True				
ANR	122884	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as interface name as it is reserved"" , ZSTR_VAL ( name ) )"		122811	0					
ANR	122885	Callee	zend_error_noreturn		122811	0					
ANR	122886	Identifier	zend_error_noreturn		122811	0					
ANR	122887	ArgumentList	E_COMPILE_ERROR		122811	1					
ANR	122888	Argument	E_COMPILE_ERROR		122811	0					
ANR	122889	Identifier	E_COMPILE_ERROR		122811	0					
ANR	122890	Argument	"""Cannot use '%s' as interface name as it is reserved"""		122811	1					
ANR	122891	PrimaryExpression	"""Cannot use '%s' as interface name as it is reserved"""		122811	0					
ANR	122892	Argument	ZSTR_VAL ( name )		122811	2					
ANR	122893	CallExpression	ZSTR_VAL ( name )		122811	0					
ANR	122894	Callee	ZSTR_VAL		122811	0					
ANR	122895	Identifier	ZSTR_VAL		122811	0					
ANR	122896	ArgumentList	name		122811	1					
ANR	122897	Argument	name		122811	0					
ANR	122898	Identifier	name		122811	0					
ANR	122899	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_ADD_INTERFACE , class_node , NULL )"	5153:2:152007:152072	122811	4	True				
ANR	122900	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_ADD_INTERFACE , class_node , NULL )"		122811	0		=			
ANR	122901	Identifier	opline		122811	0					
ANR	122902	CallExpression	"zend_emit_op ( NULL , ZEND_ADD_INTERFACE , class_node , NULL )"		122811	1					
ANR	122903	Callee	zend_emit_op		122811	0					
ANR	122904	Identifier	zend_emit_op		122811	0					
ANR	122905	ArgumentList	NULL		122811	1					
ANR	122906	Argument	NULL		122811	0					
ANR	122907	Identifier	NULL		122811	0					
ANR	122908	Argument	ZEND_ADD_INTERFACE		122811	1					
ANR	122909	Identifier	ZEND_ADD_INTERFACE		122811	0					
ANR	122910	Argument	class_node		122811	2					
ANR	122911	Identifier	class_node		122811	0					
ANR	122912	Argument	NULL		122811	3					
ANR	122913	Identifier	NULL		122811	0					
ANR	122914	ExpressionStatement	opline -> op2_type = IS_CONST	5154:2:152076:152103	122811	5	True				
ANR	122915	AssignmentExpression	opline -> op2_type = IS_CONST		122811	0		=			
ANR	122916	PtrMemberAccess	opline -> op2_type		122811	0					
ANR	122917	Identifier	opline		122811	0					
ANR	122918	Identifier	op2_type		122811	1					
ANR	122919	Identifier	IS_CONST		122811	1					
ANR	122920	ExpressionStatement	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name_ast ( class_ast ) )"	5155:2:152107:152221	122811	6	True				
ANR	122921	AssignmentExpression	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name_ast ( class_ast ) )"		122811	0		=			
ANR	122922	MemberAccess	opline -> op2 . constant		122811	0					
ANR	122923	PtrMemberAccess	opline -> op2		122811	0					
ANR	122924	Identifier	opline		122811	0					
ANR	122925	Identifier	op2		122811	1					
ANR	122926	Identifier	constant		122811	1					
ANR	122927	CallExpression	"zend_add_class_name_literal ( CG ( active_op_array ) , zend_resolve_class_name_ast ( class_ast ) )"		122811	1					
ANR	122928	Callee	zend_add_class_name_literal		122811	0					
ANR	122929	Identifier	zend_add_class_name_literal		122811	0					
ANR	122930	ArgumentList	CG ( active_op_array )		122811	1					
ANR	122931	Argument	CG ( active_op_array )		122811	0					
ANR	122932	CallExpression	CG ( active_op_array )		122811	0					
ANR	122933	Callee	CG		122811	0					
ANR	122934	Identifier	CG		122811	0					
ANR	122935	ArgumentList	active_op_array		122811	1					
ANR	122936	Argument	active_op_array		122811	0					
ANR	122937	Identifier	active_op_array		122811	0					
ANR	122938	Argument	zend_resolve_class_name_ast ( class_ast )		122811	1					
ANR	122939	CallExpression	zend_resolve_class_name_ast ( class_ast )		122811	0					
ANR	122940	Callee	zend_resolve_class_name_ast		122811	0					
ANR	122941	Identifier	zend_resolve_class_name_ast		122811	0					
ANR	122942	ArgumentList	class_ast		122811	1					
ANR	122943	Argument	class_ast		122811	0					
ANR	122944	Identifier	class_ast		122811	0					
ANR	122945	ExpressionStatement	CG ( active_class_entry ) -> num_interfaces ++	5158:2:152226:152266	122811	7	True				
ANR	122946	PostIncDecOperationExpression	CG ( active_class_entry ) -> num_interfaces ++		122811	0					
ANR	122947	PtrMemberAccess	CG ( active_class_entry ) -> num_interfaces		122811	0					
ANR	122948	CallExpression	CG ( active_class_entry )		122811	0					
ANR	122949	Callee	CG		122811	0					
ANR	122950	Identifier	CG		122811	0					
ANR	122951	ArgumentList	active_class_entry		122811	1					
ANR	122952	Argument	active_class_entry		122811	0					
ANR	122953	Identifier	active_class_entry		122811	0					
ANR	122954	Identifier	num_interfaces		122811	1					
ANR	122955	IncDec	++		122811	1					
ANR	122956	ReturnType	void		122811	1					
ANR	122957	Identifier	zend_compile_implements		122811	2					
ANR	122958	ParameterList	"znode * class_node , zend_ast * ast"		122811	3					
ANR	122959	Parameter	znode * class_node	5138:29:151573:151589	122811	0	True				
ANR	122960	ParameterType	znode *		122811	0					
ANR	122961	Identifier	class_node		122811	1					
ANR	122962	Parameter	zend_ast * ast	5138:48:151592:151604	122811	1	True				
ANR	122963	ParameterType	zend_ast *		122811	0					
ANR	122964	Identifier	ast		122811	1					
ANR	122965	CFGEntryNode	ENTRY		122811		True				
ANR	122966	CFGExitNode	EXIT		122811		True				
ANR	122967	Symbol	zend_is_const_default_class_ref		122811						
ANR	122968	Symbol	zend_add_class_name_literal		122811						
ANR	122969	Symbol	opline -> op2		122811						
ANR	122970	Symbol	ast		122811						
ANR	122971	Symbol	class_node		122811						
ANR	122972	Symbol	E_COMPILE_ERROR		122811						
ANR	122973	Symbol	active_class_entry		122811						
ANR	122974	Symbol	* CG		122811						
ANR	122975	Symbol	class_ast		122811						
ANR	122976	Symbol	CG ( active_class_entry ) -> num_interfaces		122811						
ANR	122977	Symbol	* * list		122811						
ANR	122978	Symbol	zend_ast_get_str		122811						
ANR	122979	Symbol	opline		122811						
ANR	122980	Symbol	ZEND_ADD_INTERFACE		122811						
ANR	122981	Symbol	IS_CONST		122811						
ANR	122982	Symbol	NULL		122811						
ANR	122983	Symbol	list -> child		122811						
ANR	122984	Symbol	CG		122811						
ANR	122985	Symbol	zend_resolve_class_name_ast		122811						
ANR	122986	Symbol	active_op_array		122811						
ANR	122987	Symbol	i		122811						
ANR	122988	Symbol	list		122811						
ANR	122989	Symbol	ZSTR_VAL		122811						
ANR	122990	Symbol	zend_ast_get_list		122811						
ANR	122991	Symbol	* i		122811						
ANR	122992	Symbol	* opline		122811						
ANR	122993	Symbol	* list		122811						
ANR	122994	Symbol	name		122811						
ANR	122995	Symbol	opline -> op2 . constant		122811						
ANR	122996	Symbol	* list -> child		122811						
ANR	122997	Symbol	opline -> op2_type		122811						
ANR	122998	Symbol	list -> children		122811						
ANR	122999	Symbol	zend_emit_op		122811						
ANR	123000	Function	zend_generate_anon_class_name	5163:0:152284:152848							
ANR	123001	FunctionDef	zend_generate_anon_class_name (unsigned char * lex_pos)		123000	0					
ANR	123002	CompoundStatement		5164:0:152368:152848	123000	0					
ANR	123003	IdentifierDeclStatement	zend_string * result ;	5165:1:152371:152390	123000	0	True				
ANR	123004	IdentifierDecl	* result		123000	0					
ANR	123005	IdentifierDeclType	zend_string *		123000	0					
ANR	123006	Identifier	result		123000	1					
ANR	123007	IdentifierDeclStatement	char char_pos_buf [ 32 ] ;	5166:1:152393:152414	123000	1	True				
ANR	123008	IdentifierDecl	char_pos_buf [ 32 ]		123000	0					
ANR	123009	IdentifierDeclType	char [ 32 ]		123000	0					
ANR	123010	Identifier	char_pos_buf		123000	1					
ANR	123011	PrimaryExpression	32		123000	2					
ANR	123012	IdentifierDeclStatement	"size_t char_pos_len = zend_sprintf ( char_pos_buf , ""%p"" , lex_pos ) ;"	5167:1:152417:152480	123000	2	True				
ANR	123013	IdentifierDecl	"char_pos_len = zend_sprintf ( char_pos_buf , ""%p"" , lex_pos )"		123000	0					
ANR	123014	IdentifierDeclType	size_t		123000	0					
ANR	123015	Identifier	char_pos_len		123000	1					
ANR	123016	AssignmentExpression	"char_pos_len = zend_sprintf ( char_pos_buf , ""%p"" , lex_pos )"		123000	2		=			
ANR	123017	Identifier	char_pos_len		123000	0					
ANR	123018	CallExpression	"zend_sprintf ( char_pos_buf , ""%p"" , lex_pos )"		123000	1					
ANR	123019	Callee	zend_sprintf		123000	0					
ANR	123020	Identifier	zend_sprintf		123000	0					
ANR	123021	ArgumentList	char_pos_buf		123000	1					
ANR	123022	Argument	char_pos_buf		123000	0					
ANR	123023	Identifier	char_pos_buf		123000	0					
ANR	123024	Argument	"""%p"""		123000	1					
ANR	123025	PrimaryExpression	"""%p"""		123000	0					
ANR	123026	Argument	lex_pos		123000	2					
ANR	123027	Identifier	lex_pos		123000	0					
ANR	123028	IdentifierDeclStatement	zend_string * filename = CG ( active_op_array ) -> filename ;	5168:1:152483:152536	123000	3	True				
ANR	123029	IdentifierDecl	* filename = CG ( active_op_array ) -> filename		123000	0					
ANR	123030	IdentifierDeclType	zend_string *		123000	0					
ANR	123031	Identifier	filename		123000	1					
ANR	123032	AssignmentExpression	* filename = CG ( active_op_array ) -> filename		123000	2		=			
ANR	123033	Identifier	filename		123000	0					
ANR	123034	PtrMemberAccess	CG ( active_op_array ) -> filename		123000	1					
ANR	123035	CallExpression	CG ( active_op_array )		123000	0					
ANR	123036	Callee	CG		123000	0					
ANR	123037	Identifier	CG		123000	0					
ANR	123038	ArgumentList	active_op_array		123000	1					
ANR	123039	Argument	active_op_array		123000	0					
ANR	123040	Identifier	active_op_array		123000	0					
ANR	123041	Identifier	filename		123000	1					
ANR	123042	ExpressionStatement	"result = zend_string_alloc ( sizeof ( ""class@anonymous"" ) + ZSTR_LEN ( filename ) + char_pos_len , 0 )"	5171:1:152619:152711	123000	4	True				
ANR	123043	AssignmentExpression	"result = zend_string_alloc ( sizeof ( ""class@anonymous"" ) + ZSTR_LEN ( filename ) + char_pos_len , 0 )"		123000	0		=			
ANR	123044	Identifier	result		123000	0					
ANR	123045	CallExpression	"zend_string_alloc ( sizeof ( ""class@anonymous"" ) + ZSTR_LEN ( filename ) + char_pos_len , 0 )"		123000	1					
ANR	123046	Callee	zend_string_alloc		123000	0					
ANR	123047	Identifier	zend_string_alloc		123000	0					
ANR	123048	ArgumentList	"sizeof ( ""class@anonymous"" ) + ZSTR_LEN ( filename ) + char_pos_len"		123000	1					
ANR	123049	Argument	"sizeof ( ""class@anonymous"" ) + ZSTR_LEN ( filename ) + char_pos_len"		123000	0					
ANR	123050	AdditiveExpression	"sizeof ( ""class@anonymous"" ) + ZSTR_LEN ( filename ) + char_pos_len"		123000	0		+			
ANR	123051	SizeofExpression	"sizeof ( ""class@anonymous"" )"		123000	0					
ANR	123052	Sizeof	sizeof		123000	0					
ANR	123053	PrimaryExpression	"""class@anonymous"""		123000	1					
ANR	123054	AdditiveExpression	ZSTR_LEN ( filename ) + char_pos_len		123000	1		+			
ANR	123055	CallExpression	ZSTR_LEN ( filename )		123000	0					
ANR	123056	Callee	ZSTR_LEN		123000	0					
ANR	123057	Identifier	ZSTR_LEN		123000	0					
ANR	123058	ArgumentList	filename		123000	1					
ANR	123059	Argument	filename		123000	0					
ANR	123060	Identifier	filename		123000	0					
ANR	123061	Identifier	char_pos_len		123000	1					
ANR	123062	Argument	0		123000	1					
ANR	123063	PrimaryExpression	0		123000	0					
ANR	123064	ExpressionStatement	"sprintf ( ZSTR_VAL ( result ) , ""class@anonymous%c%s%s"" , '\\0' , ZSTR_VAL ( filename ) , char_pos_buf )"	5172:1:152714:152804	123000	5	True				
ANR	123065	CallExpression	"sprintf ( ZSTR_VAL ( result ) , ""class@anonymous%c%s%s"" , '\\0' , ZSTR_VAL ( filename ) , char_pos_buf )"		123000	0					
ANR	123066	Callee	sprintf		123000	0					
ANR	123067	Identifier	sprintf		123000	0					
ANR	123068	ArgumentList	ZSTR_VAL ( result )		123000	1					
ANR	123069	Argument	ZSTR_VAL ( result )		123000	0					
ANR	123070	CallExpression	ZSTR_VAL ( result )		123000	0					
ANR	123071	Callee	ZSTR_VAL		123000	0					
ANR	123072	Identifier	ZSTR_VAL		123000	0					
ANR	123073	ArgumentList	result		123000	1					
ANR	123074	Argument	result		123000	0					
ANR	123075	Identifier	result		123000	0					
ANR	123076	Argument	"""class@anonymous%c%s%s"""		123000	1					
ANR	123077	PrimaryExpression	"""class@anonymous%c%s%s"""		123000	0					
ANR	123078	Argument	'\\0'		123000	2					
ANR	123079	PrimaryExpression	'\\0'		123000	0					
ANR	123080	Argument	ZSTR_VAL ( filename )		123000	3					
ANR	123081	CallExpression	ZSTR_VAL ( filename )		123000	0					
ANR	123082	Callee	ZSTR_VAL		123000	0					
ANR	123083	Identifier	ZSTR_VAL		123000	0					
ANR	123084	ArgumentList	filename		123000	1					
ANR	123085	Argument	filename		123000	0					
ANR	123086	Identifier	filename		123000	0					
ANR	123087	Argument	char_pos_buf		123000	4					
ANR	123088	Identifier	char_pos_buf		123000	0					
ANR	123089	ReturnStatement	return zend_new_interned_string ( result ) ;	5173:1:152807:152846	123000	6	True				
ANR	123090	CallExpression	zend_new_interned_string ( result )		123000	0					
ANR	123091	Callee	zend_new_interned_string		123000	0					
ANR	123092	Identifier	zend_new_interned_string		123000	0					
ANR	123093	ArgumentList	result		123000	1					
ANR	123094	Argument	result		123000	0					
ANR	123095	Identifier	result		123000	0					
ANR	123096	ReturnType	static zend_string *		123000	1					
ANR	123097	Identifier	zend_generate_anon_class_name		123000	2					
ANR	123098	ParameterList	unsigned char * lex_pos		123000	3					
ANR	123099	Parameter	unsigned char * lex_pos	5163:50:152334:152355	123000	0	True				
ANR	123100	ParameterType	unsigned char *		123000	0					
ANR	123101	Identifier	lex_pos		123000	1					
ANR	123102	CFGEntryNode	ENTRY		123000		True				
ANR	123103	CFGExitNode	EXIT		123000		True				
ANR	123104	Symbol	char_pos_buf		123000						
ANR	123105	Symbol	zend_string_alloc		123000						
ANR	123106	Symbol	CG		123000						
ANR	123107	Symbol	active_op_array		123000						
ANR	123108	Symbol	* CG		123000						
ANR	123109	Symbol	zend_sprintf		123000						
ANR	123110	Symbol	ZSTR_VAL		123000						
ANR	123111	Symbol	result		123000						
ANR	123112	Symbol	filename		123000						
ANR	123113	Symbol	zend_new_interned_string		123000						
ANR	123114	Symbol	lex_pos		123000						
ANR	123115	Symbol	CG ( active_op_array ) -> filename		123000						
ANR	123116	Symbol	ZSTR_LEN		123000						
ANR	123117	Symbol	char_pos_len		123000						
ANR	123118	Function	zend_compile_class_decl	5177:0:152861:159241							
ANR	123119	FunctionDef	zend_compile_class_decl (zend_ast * ast)		123118	0					
ANR	123120	CompoundStatement		5178:0:152915:159241	123118	0					
ANR	123121	IdentifierDeclStatement	zend_ast_decl * decl = ( zend_ast_decl * ) ast ;	5179:1:152918:152961	123118	0	True				
ANR	123122	IdentifierDecl	* decl = ( zend_ast_decl * ) ast		123118	0					
ANR	123123	IdentifierDeclType	zend_ast_decl *		123118	0					
ANR	123124	Identifier	decl		123118	1					
ANR	123125	AssignmentExpression	* decl = ( zend_ast_decl * ) ast		123118	2		=			
ANR	123126	Identifier	decl		123118	0					
ANR	123127	CastExpression	( zend_ast_decl * ) ast		123118	1					
ANR	123128	CastTarget	zend_ast_decl *		123118	0					
ANR	123129	Identifier	ast		123118	1					
ANR	123130	IdentifierDeclStatement	zend_ast * extends_ast = decl -> child [ 0 ] ;	5180:1:152964:153002	123118	1	True				
ANR	123131	IdentifierDecl	* extends_ast = decl -> child [ 0 ]		123118	0					
ANR	123132	IdentifierDeclType	zend_ast *		123118	0					
ANR	123133	Identifier	extends_ast		123118	1					
ANR	123134	AssignmentExpression	* extends_ast = decl -> child [ 0 ]		123118	2		=			
ANR	123135	Identifier	extends_ast		123118	0					
ANR	123136	ArrayIndexing	decl -> child [ 0 ]		123118	1					
ANR	123137	PtrMemberAccess	decl -> child		123118	0					
ANR	123138	Identifier	decl		123118	0					
ANR	123139	Identifier	child		123118	1					
ANR	123140	PrimaryExpression	0		123118	1					
ANR	123141	IdentifierDeclStatement	zend_ast * implements_ast = decl -> child [ 1 ] ;	5181:1:153005:153046	123118	2	True				
ANR	123142	IdentifierDecl	* implements_ast = decl -> child [ 1 ]		123118	0					
ANR	123143	IdentifierDeclType	zend_ast *		123118	0					
ANR	123144	Identifier	implements_ast		123118	1					
ANR	123145	AssignmentExpression	* implements_ast = decl -> child [ 1 ]		123118	2		=			
ANR	123146	Identifier	implements_ast		123118	0					
ANR	123147	ArrayIndexing	decl -> child [ 1 ]		123118	1					
ANR	123148	PtrMemberAccess	decl -> child		123118	0					
ANR	123149	Identifier	decl		123118	0					
ANR	123150	Identifier	child		123118	1					
ANR	123151	PrimaryExpression	1		123118	1					
ANR	123152	IdentifierDeclStatement	zend_ast * stmt_ast = decl -> child [ 2 ] ;	5182:1:153049:153084	123118	3	True				
ANR	123153	IdentifierDecl	* stmt_ast = decl -> child [ 2 ]		123118	0					
ANR	123154	IdentifierDeclType	zend_ast *		123118	0					
ANR	123155	Identifier	stmt_ast		123118	1					
ANR	123156	AssignmentExpression	* stmt_ast = decl -> child [ 2 ]		123118	2		=			
ANR	123157	Identifier	stmt_ast		123118	0					
ANR	123158	ArrayIndexing	decl -> child [ 2 ]		123118	1					
ANR	123159	PtrMemberAccess	decl -> child		123118	0					
ANR	123160	Identifier	decl		123118	0					
ANR	123161	Identifier	child		123118	1					
ANR	123162	PrimaryExpression	2		123118	1					
ANR	123163	IdentifierDeclStatement	"zend_string * name , * lcname , * import_name = NULL ;"	5183:1:153087:153134	123118	4	True				
ANR	123164	IdentifierDecl	* name		123118	0					
ANR	123165	IdentifierDeclType	zend_string *		123118	0					
ANR	123166	Identifier	name		123118	1					
ANR	123167	IdentifierDecl	* lcname		123118	1					
ANR	123168	IdentifierDeclType	zend_string *		123118	0					
ANR	123169	Identifier	lcname		123118	1					
ANR	123170	IdentifierDecl	* import_name = NULL		123118	2					
ANR	123171	IdentifierDeclType	zend_string *		123118	0					
ANR	123172	Identifier	import_name		123118	1					
ANR	123173	AssignmentExpression	* import_name = NULL		123118	2		=			
ANR	123174	Identifier	NULL		123118	0					
ANR	123175	Identifier	NULL		123118	1					
ANR	123176	IdentifierDeclStatement	"zend_class_entry * ce = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_class_entry ) ) ;"	5184:1:153137:153214	123118	5	True				
ANR	123177	IdentifierDecl	"* ce = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_class_entry ) )"		123118	0					
ANR	123178	IdentifierDeclType	zend_class_entry *		123118	0					
ANR	123179	Identifier	ce		123118	1					
ANR	123180	AssignmentExpression	"* ce = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_class_entry ) )"		123118	2		=			
ANR	123181	Identifier	ce		123118	0					
ANR	123182	CallExpression	"zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_class_entry ) )"		123118	1					
ANR	123183	Callee	zend_arena_alloc		123118	0					
ANR	123184	Identifier	zend_arena_alloc		123118	0					
ANR	123185	ArgumentList	& CG ( arena )		123118	1					
ANR	123186	Argument	& CG ( arena )		123118	0					
ANR	123187	UnaryOperationExpression	& CG ( arena )		123118	0					
ANR	123188	UnaryOperator	&		123118	0					
ANR	123189	CallExpression	CG ( arena )		123118	1					
ANR	123190	Callee	CG		123118	0					
ANR	123191	Identifier	CG		123118	0					
ANR	123192	ArgumentList	arena		123118	1					
ANR	123193	Argument	arena		123118	0					
ANR	123194	Identifier	arena		123118	0					
ANR	123195	Argument	sizeof ( zend_class_entry )		123118	1					
ANR	123196	SizeofExpression	sizeof ( zend_class_entry )		123118	0					
ANR	123197	Sizeof	sizeof		123118	0					
ANR	123198	SizeofOperand	zend_class_entry		123118	1					
ANR	123199	IdentifierDeclStatement	zend_op * opline ;	5185:1:153217:153232	123118	6	True				
ANR	123200	IdentifierDecl	* opline		123118	0					
ANR	123201	IdentifierDeclType	zend_op *		123118	0					
ANR	123202	Identifier	opline		123118	1					
ANR	123203	IdentifierDeclStatement	"znode declare_node , extends_node ;"	5186:1:153235:153267	123118	7	True				
ANR	123204	IdentifierDecl	declare_node		123118	0					
ANR	123205	IdentifierDeclType	znode		123118	0					
ANR	123206	Identifier	declare_node		123118	1					
ANR	123207	IdentifierDecl	extends_node		123118	1					
ANR	123208	IdentifierDeclType	znode		123118	0					
ANR	123209	Identifier	extends_node		123118	1					
ANR	123210	IdentifierDeclStatement	zend_class_entry * original_ce = CG ( active_class_entry ) ;	5188:1:153271:153325	123118	8	True				
ANR	123211	IdentifierDecl	* original_ce = CG ( active_class_entry )		123118	0					
ANR	123212	IdentifierDeclType	zend_class_entry *		123118	0					
ANR	123213	Identifier	original_ce		123118	1					
ANR	123214	AssignmentExpression	* original_ce = CG ( active_class_entry )		123118	2		=			
ANR	123215	Identifier	original_ce		123118	0					
ANR	123216	CallExpression	CG ( active_class_entry )		123118	1					
ANR	123217	Callee	CG		123118	0					
ANR	123218	Identifier	CG		123118	0					
ANR	123219	ArgumentList	active_class_entry		123118	1					
ANR	123220	Argument	active_class_entry		123118	0					
ANR	123221	Identifier	active_class_entry		123118	0					
ANR	123222	IdentifierDeclStatement	znode original_implementing_class = FC ( implementing_class ) ;	5189:1:153328:153386	123118	9	True				
ANR	123223	IdentifierDecl	original_implementing_class = FC ( implementing_class )		123118	0					
ANR	123224	IdentifierDeclType	znode		123118	0					
ANR	123225	Identifier	original_implementing_class		123118	1					
ANR	123226	AssignmentExpression	original_implementing_class = FC ( implementing_class )		123118	2		=			
ANR	123227	Identifier	original_implementing_class		123118	0					
ANR	123228	CallExpression	FC ( implementing_class )		123118	1					
ANR	123229	Callee	FC		123118	0					
ANR	123230	Identifier	FC		123118	0					
ANR	123231	ArgumentList	implementing_class		123118	1					
ANR	123232	Argument	implementing_class		123118	0					
ANR	123233	Identifier	implementing_class		123118	0					
ANR	123234	IfStatement	if ( EXPECTED ( ( decl -> flags & ZEND_ACC_ANON_CLASS ) == 0 ) )		123118	10					
ANR	123235	Condition	EXPECTED ( ( decl -> flags & ZEND_ACC_ANON_CLASS ) == 0 )	5191:5:153394:153443	123118	0	True				
ANR	123236	CallExpression	EXPECTED ( ( decl -> flags & ZEND_ACC_ANON_CLASS ) == 0 )		123118	0					
ANR	123237	Callee	EXPECTED		123118	0					
ANR	123238	Identifier	EXPECTED		123118	0					
ANR	123239	ArgumentList	( decl -> flags & ZEND_ACC_ANON_CLASS ) == 0		123118	1					
ANR	123240	Argument	( decl -> flags & ZEND_ACC_ANON_CLASS ) == 0		123118	0					
ANR	123241	EqualityExpression	( decl -> flags & ZEND_ACC_ANON_CLASS ) == 0		123118	0		==			
ANR	123242	BitAndExpression	decl -> flags & ZEND_ACC_ANON_CLASS		123118	0		&			
ANR	123243	PtrMemberAccess	decl -> flags		123118	0					
ANR	123244	Identifier	decl		123118	0					
ANR	123245	Identifier	flags		123118	1					
ANR	123246	Identifier	ZEND_ACC_ANON_CLASS		123118	1					
ANR	123247	PrimaryExpression	0		123118	1					
ANR	123248	CompoundStatement		14:57:530:530	123118	1					
ANR	123249	IfStatement	if ( CG ( active_class_entry ) )		123118	0					
ANR	123250	Condition	CG ( active_class_entry )	5192:6:153454:153475	123118	0	True				
ANR	123251	CallExpression	CG ( active_class_entry )		123118	0					
ANR	123252	Callee	CG		123118	0					
ANR	123253	Identifier	CG		123118	0					
ANR	123254	ArgumentList	active_class_entry		123118	1					
ANR	123255	Argument	active_class_entry		123118	0					
ANR	123256	Identifier	active_class_entry		123118	0					
ANR	123257	CompoundStatement		15:30:562:562	123118	1					
ANR	123258	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Class declarations may not be nested"" )"	5193:3:153483:153559	123118	0	True				
ANR	123259	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Class declarations may not be nested"" )"		123118	0					
ANR	123260	Callee	zend_error_noreturn		123118	0					
ANR	123261	Identifier	zend_error_noreturn		123118	0					
ANR	123262	ArgumentList	E_COMPILE_ERROR		123118	1					
ANR	123263	Argument	E_COMPILE_ERROR		123118	0					
ANR	123264	Identifier	E_COMPILE_ERROR		123118	0					
ANR	123265	Argument	"""Class declarations may not be nested"""		123118	1					
ANR	123266	PrimaryExpression	"""Class declarations may not be nested"""		123118	0					
ANR	123267	ExpressionStatement	name = decl -> name	5195:2:153567:153584	123118	1	True				
ANR	123268	AssignmentExpression	name = decl -> name		123118	0		=			
ANR	123269	Identifier	name		123118	0					
ANR	123270	PtrMemberAccess	decl -> name		123118	1					
ANR	123271	Identifier	decl		123118	0					
ANR	123272	Identifier	name		123118	1					
ANR	123273	ExpressionStatement	zend_assert_valid_class_name ( name )	5196:2:153588:153622	123118	2	True				
ANR	123274	CallExpression	zend_assert_valid_class_name ( name )		123118	0					
ANR	123275	Callee	zend_assert_valid_class_name		123118	0					
ANR	123276	Identifier	zend_assert_valid_class_name		123118	0					
ANR	123277	ArgumentList	name		123118	1					
ANR	123278	Argument	name		123118	0					
ANR	123279	Identifier	name		123118	0					
ANR	123280	ExpressionStatement	lcname = zend_string_tolower ( name )	5197:2:153626:153660	123118	3	True				
ANR	123281	AssignmentExpression	lcname = zend_string_tolower ( name )		123118	0		=			
ANR	123282	Identifier	lcname		123118	0					
ANR	123283	CallExpression	zend_string_tolower ( name )		123118	1					
ANR	123284	Callee	zend_string_tolower		123118	0					
ANR	123285	Identifier	zend_string_tolower		123118	0					
ANR	123286	ArgumentList	name		123118	1					
ANR	123287	Argument	name		123118	0					
ANR	123288	Identifier	name		123118	0					
ANR	123289	IfStatement	if ( FC ( current_namespace ) )		123118	4					
ANR	123290	Condition	FC ( current_namespace )	5198:6:153668:153688	123118	0	True				
ANR	123291	CallExpression	FC ( current_namespace )		123118	0					
ANR	123292	Callee	FC		123118	0					
ANR	123293	Identifier	FC		123118	0					
ANR	123294	ArgumentList	current_namespace		123118	1					
ANR	123295	Argument	current_namespace		123118	0					
ANR	123296	Identifier	current_namespace		123118	0					
ANR	123297	CompoundStatement		21:29:775:775	123118	1					
ANR	123298	ExpressionStatement	name = zend_prefix_with_ns ( name )	5199:3:153696:153728	123118	0	True				
ANR	123299	AssignmentExpression	name = zend_prefix_with_ns ( name )		123118	0		=			
ANR	123300	Identifier	name		123118	0					
ANR	123301	CallExpression	zend_prefix_with_ns ( name )		123118	1					
ANR	123302	Callee	zend_prefix_with_ns		123118	0					
ANR	123303	Identifier	zend_prefix_with_ns		123118	0					
ANR	123304	ArgumentList	name		123118	1					
ANR	123305	Argument	name		123118	0					
ANR	123306	Identifier	name		123118	0					
ANR	123307	ExpressionStatement	zend_string_release ( lcname )	5201:3:153734:153761	123118	1	True				
ANR	123308	CallExpression	zend_string_release ( lcname )		123118	0					
ANR	123309	Callee	zend_string_release		123118	0					
ANR	123310	Identifier	zend_string_release		123118	0					
ANR	123311	ArgumentList	lcname		123118	1					
ANR	123312	Argument	lcname		123118	0					
ANR	123313	Identifier	lcname		123118	0					
ANR	123314	ExpressionStatement	lcname = zend_string_tolower ( name )	5202:3:153766:153800	123118	2	True				
ANR	123315	AssignmentExpression	lcname = zend_string_tolower ( name )		123118	0		=			
ANR	123316	Identifier	lcname		123118	0					
ANR	123317	CallExpression	zend_string_tolower ( name )		123118	1					
ANR	123318	Callee	zend_string_tolower		123118	0					
ANR	123319	Identifier	zend_string_tolower		123118	0					
ANR	123320	ArgumentList	name		123118	1					
ANR	123321	Argument	name		123118	0					
ANR	123322	Identifier	name		123118	0					
ANR	123323	ElseStatement	else		123118	0					
ANR	123324	CompoundStatement		26:9:895:895	123118	0					
ANR	123325	ExpressionStatement	zend_string_addref ( name )	5204:3:153816:153840	123118	0	True				
ANR	123326	CallExpression	zend_string_addref ( name )		123118	0					
ANR	123327	Callee	zend_string_addref		123118	0					
ANR	123328	Identifier	zend_string_addref		123118	0					
ANR	123329	ArgumentList	name		123118	1					
ANR	123330	Argument	name		123118	0					
ANR	123331	Identifier	name		123118	0					
ANR	123332	IfStatement	if ( FC ( imports ) )		123118	5					
ANR	123333	Condition	FC ( imports )	5207:6:153853:153863	123118	0	True				
ANR	123334	CallExpression	FC ( imports )		123118	0					
ANR	123335	Callee	FC		123118	0					
ANR	123336	Identifier	FC		123118	0					
ANR	123337	ArgumentList	imports		123118	1					
ANR	123338	Argument	imports		123118	0					
ANR	123339	Identifier	imports		123118	0					
ANR	123340	CompoundStatement		30:19:950:950	123118	1					
ANR	123341	ExpressionStatement	"import_name = zend_hash_find_ptr ( FC ( imports ) , lcname )"	5208:3:153871:153924	123118	0	True				
ANR	123342	AssignmentExpression	"import_name = zend_hash_find_ptr ( FC ( imports ) , lcname )"		123118	0		=			
ANR	123343	Identifier	import_name		123118	0					
ANR	123344	CallExpression	"zend_hash_find_ptr ( FC ( imports ) , lcname )"		123118	1					
ANR	123345	Callee	zend_hash_find_ptr		123118	0					
ANR	123346	Identifier	zend_hash_find_ptr		123118	0					
ANR	123347	ArgumentList	FC ( imports )		123118	1					
ANR	123348	Argument	FC ( imports )		123118	0					
ANR	123349	CallExpression	FC ( imports )		123118	0					
ANR	123350	Callee	FC		123118	0					
ANR	123351	Identifier	FC		123118	0					
ANR	123352	ArgumentList	imports		123118	1					
ANR	123353	Argument	imports		123118	0					
ANR	123354	Identifier	imports		123118	0					
ANR	123355	Argument	lcname		123118	1					
ANR	123356	Identifier	lcname		123118	0					
ANR	123357	IfStatement	"if ( import_name && ! zend_string_equals_ci ( lcname , import_name ) )"		123118	6					
ANR	123358	Condition	"import_name && ! zend_string_equals_ci ( lcname , import_name )"	5211:6:153937:153994	123118	0	True				
ANR	123359	AndExpression	"import_name && ! zend_string_equals_ci ( lcname , import_name )"		123118	0		&&			
ANR	123360	Identifier	import_name		123118	0					
ANR	123361	UnaryOperationExpression	"! zend_string_equals_ci ( lcname , import_name )"		123118	1					
ANR	123362	UnaryOperator	!		123118	0					
ANR	123363	CallExpression	"zend_string_equals_ci ( lcname , import_name )"		123118	1					
ANR	123364	Callee	zend_string_equals_ci		123118	0					
ANR	123365	Identifier	zend_string_equals_ci		123118	0					
ANR	123366	ArgumentList	lcname		123118	1					
ANR	123367	Argument	lcname		123118	0					
ANR	123368	Identifier	lcname		123118	0					
ANR	123369	Argument	import_name		123118	1					
ANR	123370	Identifier	import_name		123118	0					
ANR	123371	CompoundStatement		34:66:1081:1081	123118	1					
ANR	123372	Statement	zend_error_noreturn	5212:3:154002:154020	123118	0	True				
ANR	123373	Statement	(	5212:22:154021:154021	123118	1	True				
ANR	123374	Statement	E_COMPILE_ERROR	5212:23:154022:154036	123118	2	True				
ANR	123375	Statement	","	5212:38:154037:154037	123118	3	True				
ANR	123376	Statement	"""Cannot declare class %s """	5212:40:154039:154064	123118	4	True				
ANR	123377	Statement	"""because the name is already in use"""	5213:5:154071:154106	123118	5	True				
ANR	123378	Statement	","	5213:41:154107:154107	123118	6	True				
ANR	123379	Statement	ZSTR_VAL	5213:43:154109:154116	123118	7	True				
ANR	123380	Statement	(	5213:51:154117:154117	123118	8	True				
ANR	123381	Statement	name	5213:52:154118:154121	123118	9	True				
ANR	123382	Statement	)	5213:56:154122:154122	123118	10	True				
ANR	123383	Statement	)	5213:57:154123:154123	123118	11	True				
ANR	123384	ExpressionStatement		5213:58:154124:154124	123118	12	True				
ANR	123385	ExpressionStatement	name = zend_new_interned_string ( name )	5216:2:154133:154170	123118	7	True				
ANR	123386	AssignmentExpression	name = zend_new_interned_string ( name )		123118	0		=			
ANR	123387	Identifier	name		123118	0					
ANR	123388	CallExpression	zend_new_interned_string ( name )		123118	1					
ANR	123389	Callee	zend_new_interned_string		123118	0					
ANR	123390	Identifier	zend_new_interned_string		123118	0					
ANR	123391	ArgumentList	name		123118	1					
ANR	123392	Argument	name		123118	0					
ANR	123393	Identifier	name		123118	0					
ANR	123394	ElseStatement	else		123118	0					
ANR	123395	CompoundStatement		40:8:1264:1264	123118	0					
ANR	123396	ExpressionStatement	name = zend_generate_anon_class_name ( decl -> lex_pos )	5218:2:154184:154235	123118	0	True				
ANR	123397	AssignmentExpression	name = zend_generate_anon_class_name ( decl -> lex_pos )		123118	0		=			
ANR	123398	Identifier	name		123118	0					
ANR	123399	CallExpression	zend_generate_anon_class_name ( decl -> lex_pos )		123118	1					
ANR	123400	Callee	zend_generate_anon_class_name		123118	0					
ANR	123401	Identifier	zend_generate_anon_class_name		123118	0					
ANR	123402	ArgumentList	decl -> lex_pos		123118	1					
ANR	123403	Argument	decl -> lex_pos		123118	0					
ANR	123404	PtrMemberAccess	decl -> lex_pos		123118	0					
ANR	123405	Identifier	decl		123118	0					
ANR	123406	Identifier	lex_pos		123118	1					
ANR	123407	ExpressionStatement	lcname = zend_string_tolower ( name )	5219:2:154239:154273	123118	1	True				
ANR	123408	AssignmentExpression	lcname = zend_string_tolower ( name )		123118	0		=			
ANR	123409	Identifier	lcname		123118	0					
ANR	123410	CallExpression	zend_string_tolower ( name )		123118	1					
ANR	123411	Callee	zend_string_tolower		123118	0					
ANR	123412	Identifier	zend_string_tolower		123118	0					
ANR	123413	ArgumentList	name		123118	1					
ANR	123414	Argument	name		123118	0					
ANR	123415	Identifier	name		123118	0					
ANR	123416	ExpressionStatement	lcname = zend_new_interned_string ( lcname )	5221:1:154279:154320	123118	11	True				
ANR	123417	AssignmentExpression	lcname = zend_new_interned_string ( lcname )		123118	0		=			
ANR	123418	Identifier	lcname		123118	0					
ANR	123419	CallExpression	zend_new_interned_string ( lcname )		123118	1					
ANR	123420	Callee	zend_new_interned_string		123118	0					
ANR	123421	Identifier	zend_new_interned_string		123118	0					
ANR	123422	ArgumentList	lcname		123118	1					
ANR	123423	Argument	lcname		123118	0					
ANR	123424	Identifier	lcname		123118	0					
ANR	123425	ExpressionStatement	ce -> type = ZEND_USER_CLASS	5223:1:154324:154350	123118	12	True				
ANR	123426	AssignmentExpression	ce -> type = ZEND_USER_CLASS		123118	0		=			
ANR	123427	PtrMemberAccess	ce -> type		123118	0					
ANR	123428	Identifier	ce		123118	0					
ANR	123429	Identifier	type		123118	1					
ANR	123430	Identifier	ZEND_USER_CLASS		123118	1					
ANR	123431	ExpressionStatement	ce -> name = name	5224:1:154353:154368	123118	13	True				
ANR	123432	AssignmentExpression	ce -> name = name		123118	0		=			
ANR	123433	PtrMemberAccess	ce -> name		123118	0					
ANR	123434	Identifier	ce		123118	0					
ANR	123435	Identifier	name		123118	1					
ANR	123436	Identifier	name		123118	1					
ANR	123437	ExpressionStatement	"zend_initialize_class_data ( ce , 1 )"	5225:1:154371:154404	123118	14	True				
ANR	123438	CallExpression	"zend_initialize_class_data ( ce , 1 )"		123118	0					
ANR	123439	Callee	zend_initialize_class_data		123118	0					
ANR	123440	Identifier	zend_initialize_class_data		123118	0					
ANR	123441	ArgumentList	ce		123118	1					
ANR	123442	Argument	ce		123118	0					
ANR	123443	Identifier	ce		123118	0					
ANR	123444	Argument	1		123118	1					
ANR	123445	PrimaryExpression	1		123118	0					
ANR	123446	ExpressionStatement	ce -> ce_flags |= decl -> flags	5227:1:154408:154435	123118	15	True				
ANR	123447	AssignmentExpression	ce -> ce_flags |= decl -> flags		123118	0		|=			
ANR	123448	PtrMemberAccess	ce -> ce_flags		123118	0					
ANR	123449	Identifier	ce		123118	0					
ANR	123450	Identifier	ce_flags		123118	1					
ANR	123451	PtrMemberAccess	decl -> flags		123118	1					
ANR	123452	Identifier	decl		123118	0					
ANR	123453	Identifier	flags		123118	1					
ANR	123454	ExpressionStatement	ce -> info . user . filename = zend_get_compiled_filename ( )	5228:1:154438:154491	123118	16	True				
ANR	123455	AssignmentExpression	ce -> info . user . filename = zend_get_compiled_filename ( )		123118	0		=			
ANR	123456	MemberAccess	ce -> info . user . filename		123118	0					
ANR	123457	MemberAccess	ce -> info . user		123118	0					
ANR	123458	PtrMemberAccess	ce -> info		123118	0					
ANR	123459	Identifier	ce		123118	0					
ANR	123460	Identifier	info		123118	1					
ANR	123461	Identifier	user		123118	1					
ANR	123462	Identifier	filename		123118	1					
ANR	123463	CallExpression	zend_get_compiled_filename ( )		123118	1					
ANR	123464	Callee	zend_get_compiled_filename		123118	0					
ANR	123465	Identifier	zend_get_compiled_filename		123118	0					
ANR	123466	ArgumentList			123118	1					
ANR	123467	ExpressionStatement	ce -> info . user . line_start = decl -> start_lineno	5229:1:154494:154539	123118	17	True				
ANR	123468	AssignmentExpression	ce -> info . user . line_start = decl -> start_lineno		123118	0		=			
ANR	123469	MemberAccess	ce -> info . user . line_start		123118	0					
ANR	123470	MemberAccess	ce -> info . user		123118	0					
ANR	123471	PtrMemberAccess	ce -> info		123118	0					
ANR	123472	Identifier	ce		123118	0					
ANR	123473	Identifier	info		123118	1					
ANR	123474	Identifier	user		123118	1					
ANR	123475	Identifier	line_start		123118	1					
ANR	123476	PtrMemberAccess	decl -> start_lineno		123118	1					
ANR	123477	Identifier	decl		123118	0					
ANR	123478	Identifier	start_lineno		123118	1					
ANR	123479	ExpressionStatement	ce -> info . user . line_end = decl -> end_lineno	5230:1:154542:154583	123118	18	True				
ANR	123480	AssignmentExpression	ce -> info . user . line_end = decl -> end_lineno		123118	0		=			
ANR	123481	MemberAccess	ce -> info . user . line_end		123118	0					
ANR	123482	MemberAccess	ce -> info . user		123118	0					
ANR	123483	PtrMemberAccess	ce -> info		123118	0					
ANR	123484	Identifier	ce		123118	0					
ANR	123485	Identifier	info		123118	1					
ANR	123486	Identifier	user		123118	1					
ANR	123487	Identifier	line_end		123118	1					
ANR	123488	PtrMemberAccess	decl -> end_lineno		123118	1					
ANR	123489	Identifier	decl		123118	0					
ANR	123490	Identifier	end_lineno		123118	1					
ANR	123491	IfStatement	if ( decl -> doc_comment )		123118	19					
ANR	123492	Condition	decl -> doc_comment	5232:5:154591:154607	123118	0	True				
ANR	123493	PtrMemberAccess	decl -> doc_comment		123118	0					
ANR	123494	Identifier	decl		123118	0					
ANR	123495	Identifier	doc_comment		123118	1					
ANR	123496	CompoundStatement		55:24:1694:1694	123118	1					
ANR	123497	ExpressionStatement	ce -> info . user . doc_comment = zend_string_copy ( decl -> doc_comment )	5233:2:154614:154677	123118	0	True				
ANR	123498	AssignmentExpression	ce -> info . user . doc_comment = zend_string_copy ( decl -> doc_comment )		123118	0		=			
ANR	123499	MemberAccess	ce -> info . user . doc_comment		123118	0					
ANR	123500	MemberAccess	ce -> info . user		123118	0					
ANR	123501	PtrMemberAccess	ce -> info		123118	0					
ANR	123502	Identifier	ce		123118	0					
ANR	123503	Identifier	info		123118	1					
ANR	123504	Identifier	user		123118	1					
ANR	123505	Identifier	doc_comment		123118	1					
ANR	123506	CallExpression	zend_string_copy ( decl -> doc_comment )		123118	1					
ANR	123507	Callee	zend_string_copy		123118	0					
ANR	123508	Identifier	zend_string_copy		123118	0					
ANR	123509	ArgumentList	decl -> doc_comment		123118	1					
ANR	123510	Argument	decl -> doc_comment		123118	0					
ANR	123511	PtrMemberAccess	decl -> doc_comment		123118	0					
ANR	123512	Identifier	decl		123118	0					
ANR	123513	Identifier	doc_comment		123118	1					
ANR	123514	IfStatement	if ( UNEXPECTED ( ( decl -> flags & ZEND_ACC_ANON_CLASS ) ) )		123118	20					
ANR	123515	Condition	UNEXPECTED ( ( decl -> flags & ZEND_ACC_ANON_CLASS ) )	5236:5:154688:154734	123118	0	True				
ANR	123516	CallExpression	UNEXPECTED ( ( decl -> flags & ZEND_ACC_ANON_CLASS ) )		123118	0					
ANR	123517	Callee	UNEXPECTED		123118	0					
ANR	123518	Identifier	UNEXPECTED		123118	0					
ANR	123519	ArgumentList	decl -> flags & ZEND_ACC_ANON_CLASS		123118	1					
ANR	123520	Argument	decl -> flags & ZEND_ACC_ANON_CLASS		123118	0					
ANR	123521	BitAndExpression	decl -> flags & ZEND_ACC_ANON_CLASS		123118	0		&			
ANR	123522	PtrMemberAccess	decl -> flags		123118	0					
ANR	123523	Identifier	decl		123118	0					
ANR	123524	Identifier	flags		123118	1					
ANR	123525	Identifier	ZEND_ACC_ANON_CLASS		123118	1					
ANR	123526	CompoundStatement		59:54:1821:1821	123118	1					
ANR	123527	ExpressionStatement	ce -> serialize = zend_class_serialize_deny	5238:2:154802:154843	123118	0	True				
ANR	123528	AssignmentExpression	ce -> serialize = zend_class_serialize_deny		123118	0		=			
ANR	123529	PtrMemberAccess	ce -> serialize		123118	0					
ANR	123530	Identifier	ce		123118	0					
ANR	123531	Identifier	serialize		123118	1					
ANR	123532	Identifier	zend_class_serialize_deny		123118	1					
ANR	123533	ExpressionStatement	ce -> unserialize = zend_class_unserialize_deny	5239:2:154847:154892	123118	1	True				
ANR	123534	AssignmentExpression	ce -> unserialize = zend_class_unserialize_deny		123118	0		=			
ANR	123535	PtrMemberAccess	ce -> unserialize		123118	0					
ANR	123536	Identifier	ce		123118	0					
ANR	123537	Identifier	unserialize		123118	1					
ANR	123538	Identifier	zend_class_unserialize_deny		123118	1					
ANR	123539	IfStatement	if ( extends_ast )		123118	21					
ANR	123540	Condition	extends_ast	5242:5:154903:154913	123118	0	True				
ANR	123541	Identifier	extends_ast		123118	0					
ANR	123542	CompoundStatement		65:18:2000:2000	123118	1					
ANR	123543	IfStatement	if ( ! zend_is_const_default_class_ref ( extends_ast ) )		123118	0					
ANR	123544	Condition	! zend_is_const_default_class_ref ( extends_ast )	5243:6:154924:154968	123118	0	True				
ANR	123545	UnaryOperationExpression	! zend_is_const_default_class_ref ( extends_ast )		123118	0					
ANR	123546	UnaryOperator	!		123118	0					
ANR	123547	CallExpression	zend_is_const_default_class_ref ( extends_ast )		123118	1					
ANR	123548	Callee	zend_is_const_default_class_ref		123118	0					
ANR	123549	Identifier	zend_is_const_default_class_ref		123118	0					
ANR	123550	ArgumentList	extends_ast		123118	1					
ANR	123551	Argument	extends_ast		123118	0					
ANR	123552	Identifier	extends_ast		123118	0					
ANR	123553	CompoundStatement		67:3:2060:2117	123118	1					
ANR	123554	IdentifierDeclStatement	zend_string * extends_name = zend_ast_get_str ( extends_ast ) ;	5244:3:154976:155033	123118	0	True				
ANR	123555	IdentifierDecl	* extends_name = zend_ast_get_str ( extends_ast )		123118	0					
ANR	123556	IdentifierDeclType	zend_string *		123118	0					
ANR	123557	Identifier	extends_name		123118	1					
ANR	123558	AssignmentExpression	* extends_name = zend_ast_get_str ( extends_ast )		123118	2		=			
ANR	123559	Identifier	extends_name		123118	0					
ANR	123560	CallExpression	zend_ast_get_str ( extends_ast )		123118	1					
ANR	123561	Callee	zend_ast_get_str		123118	0					
ANR	123562	Identifier	zend_ast_get_str		123118	0					
ANR	123563	ArgumentList	extends_ast		123118	1					
ANR	123564	Argument	extends_ast		123118	0					
ANR	123565	Identifier	extends_ast		123118	0					
ANR	123566	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as class name as it is reserved"" , ZSTR_VAL ( extends_name ) )"	5245:3:155038:155153	123118	1	True				
ANR	123567	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as class name as it is reserved"" , ZSTR_VAL ( extends_name ) )"		123118	0					
ANR	123568	Callee	zend_error_noreturn		123118	0					
ANR	123569	Identifier	zend_error_noreturn		123118	0					
ANR	123570	ArgumentList	E_COMPILE_ERROR		123118	1					
ANR	123571	Argument	E_COMPILE_ERROR		123118	0					
ANR	123572	Identifier	E_COMPILE_ERROR		123118	0					
ANR	123573	Argument	"""Cannot use '%s' as class name as it is reserved"""		123118	1					
ANR	123574	PrimaryExpression	"""Cannot use '%s' as class name as it is reserved"""		123118	0					
ANR	123575	Argument	ZSTR_VAL ( extends_name )		123118	2					
ANR	123576	CallExpression	ZSTR_VAL ( extends_name )		123118	0					
ANR	123577	Callee	ZSTR_VAL		123118	0					
ANR	123578	Identifier	ZSTR_VAL		123118	0					
ANR	123579	ArgumentList	extends_name		123118	1					
ANR	123580	Argument	extends_name		123118	0					
ANR	123581	Identifier	extends_name		123118	0					
ANR	123582	ExpressionStatement	"zend_compile_class_ref ( & extends_node , extends_ast , 0 )"	5249:2:155162:155215	123118	1	True				
ANR	123583	CallExpression	"zend_compile_class_ref ( & extends_node , extends_ast , 0 )"		123118	0					
ANR	123584	Callee	zend_compile_class_ref		123118	0					
ANR	123585	Identifier	zend_compile_class_ref		123118	0					
ANR	123586	ArgumentList	& extends_node		123118	1					
ANR	123587	Argument	& extends_node		123118	0					
ANR	123588	UnaryOperationExpression	& extends_node		123118	0					
ANR	123589	UnaryOperator	&		123118	0					
ANR	123590	Identifier	extends_node		123118	1					
ANR	123591	Argument	extends_ast		123118	1					
ANR	123592	Identifier	extends_ast		123118	0					
ANR	123593	Argument	0		123118	2					
ANR	123594	PrimaryExpression	0		123118	0					
ANR	123595	ExpressionStatement	opline = get_next_op ( CG ( active_op_array ) )	5252:1:155222:155263	123118	22	True				
ANR	123596	AssignmentExpression	opline = get_next_op ( CG ( active_op_array ) )		123118	0		=			
ANR	123597	Identifier	opline		123118	0					
ANR	123598	CallExpression	get_next_op ( CG ( active_op_array ) )		123118	1					
ANR	123599	Callee	get_next_op		123118	0					
ANR	123600	Identifier	get_next_op		123118	0					
ANR	123601	ArgumentList	CG ( active_op_array )		123118	1					
ANR	123602	Argument	CG ( active_op_array )		123118	0					
ANR	123603	CallExpression	CG ( active_op_array )		123118	0					
ANR	123604	Callee	CG		123118	0					
ANR	123605	Identifier	CG		123118	0					
ANR	123606	ArgumentList	active_op_array		123118	1					
ANR	123607	Argument	active_op_array		123118	0					
ANR	123608	Identifier	active_op_array		123118	0					
ANR	123609	ExpressionStatement	"zend_make_var_result ( & declare_node , opline )"	5253:1:155266:155309	123118	23	True				
ANR	123610	CallExpression	"zend_make_var_result ( & declare_node , opline )"		123118	0					
ANR	123611	Callee	zend_make_var_result		123118	0					
ANR	123612	Identifier	zend_make_var_result		123118	0					
ANR	123613	ArgumentList	& declare_node		123118	1					
ANR	123614	Argument	& declare_node		123118	0					
ANR	123615	UnaryOperationExpression	& declare_node		123118	0					
ANR	123616	UnaryOperator	&		123118	0					
ANR	123617	Identifier	declare_node		123118	1					
ANR	123618	Argument	opline		123118	1					
ANR	123619	Identifier	opline		123118	0					
ANR	123620	ExpressionStatement	"GET_NODE ( & FC ( implementing_class ) , opline -> result )"	5256:1:155336:155385	123118	24	True				
ANR	123621	CallExpression	"GET_NODE ( & FC ( implementing_class ) , opline -> result )"		123118	0					
ANR	123622	Callee	GET_NODE		123118	0					
ANR	123623	Identifier	GET_NODE		123118	0					
ANR	123624	ArgumentList	& FC ( implementing_class )		123118	1					
ANR	123625	Argument	& FC ( implementing_class )		123118	0					
ANR	123626	UnaryOperationExpression	& FC ( implementing_class )		123118	0					
ANR	123627	UnaryOperator	&		123118	0					
ANR	123628	CallExpression	FC ( implementing_class )		123118	1					
ANR	123629	Callee	FC		123118	0					
ANR	123630	Identifier	FC		123118	0					
ANR	123631	ArgumentList	implementing_class		123118	1					
ANR	123632	Argument	implementing_class		123118	0					
ANR	123633	Identifier	implementing_class		123118	0					
ANR	123634	Argument	opline -> result		123118	1					
ANR	123635	PtrMemberAccess	opline -> result		123118	0					
ANR	123636	Identifier	opline		123118	0					
ANR	123637	Identifier	result		123118	1					
ANR	123638	ExpressionStatement	opline -> op2_type = IS_CONST	5258:1:155389:155416	123118	25	True				
ANR	123639	AssignmentExpression	opline -> op2_type = IS_CONST		123118	0		=			
ANR	123640	PtrMemberAccess	opline -> op2_type		123118	0					
ANR	123641	Identifier	opline		123118	0					
ANR	123642	Identifier	op2_type		123118	1					
ANR	123643	Identifier	IS_CONST		123118	1					
ANR	123644	ExpressionStatement	"LITERAL_STR ( opline -> op2 , lcname )"	5259:1:155419:155451	123118	26	True				
ANR	123645	CallExpression	"LITERAL_STR ( opline -> op2 , lcname )"		123118	0					
ANR	123646	Callee	LITERAL_STR		123118	0					
ANR	123647	Identifier	LITERAL_STR		123118	0					
ANR	123648	ArgumentList	opline -> op2		123118	1					
ANR	123649	Argument	opline -> op2		123118	0					
ANR	123650	PtrMemberAccess	opline -> op2		123118	0					
ANR	123651	Identifier	opline		123118	0					
ANR	123652	Identifier	op2		123118	1					
ANR	123653	Argument	lcname		123118	1					
ANR	123654	Identifier	lcname		123118	0					
ANR	123655	IfStatement	if ( decl -> flags & ZEND_ACC_ANON_CLASS )		123118	27					
ANR	123656	Condition	decl -> flags & ZEND_ACC_ANON_CLASS	5261:5:155459:155491	123118	0	True				
ANR	123657	BitAndExpression	decl -> flags & ZEND_ACC_ANON_CLASS		123118	0		&			
ANR	123658	PtrMemberAccess	decl -> flags		123118	0					
ANR	123659	Identifier	decl		123118	0					
ANR	123660	Identifier	flags		123118	1					
ANR	123661	Identifier	ZEND_ACC_ANON_CLASS		123118	1					
ANR	123662	CompoundStatement		84:40:2578:2578	123118	1					
ANR	123663	IfStatement	if ( extends_ast )		123118	0					
ANR	123664	Condition	extends_ast	5262:6:155502:155512	123118	0	True				
ANR	123665	Identifier	extends_ast		123118	0					
ANR	123666	CompoundStatement		85:19:2599:2599	123118	1					
ANR	123667	ExpressionStatement	opline -> opcode = ZEND_DECLARE_ANON_INHERITED_CLASS	5263:3:155520:155570	123118	0	True				
ANR	123668	AssignmentExpression	opline -> opcode = ZEND_DECLARE_ANON_INHERITED_CLASS		123118	0		=			
ANR	123669	PtrMemberAccess	opline -> opcode		123118	0					
ANR	123670	Identifier	opline		123118	0					
ANR	123671	Identifier	opcode		123118	1					
ANR	123672	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		123118	1					
ANR	123673	ExpressionStatement	opline -> extended_value = extends_node . u . op . var	5264:3:155575:155621	123118	1	True				
ANR	123674	AssignmentExpression	opline -> extended_value = extends_node . u . op . var		123118	0		=			
ANR	123675	PtrMemberAccess	opline -> extended_value		123118	0					
ANR	123676	Identifier	opline		123118	0					
ANR	123677	Identifier	extended_value		123118	1					
ANR	123678	MemberAccess	extends_node . u . op . var		123118	1					
ANR	123679	MemberAccess	extends_node . u . op		123118	0					
ANR	123680	MemberAccess	extends_node . u		123118	0					
ANR	123681	Identifier	extends_node		123118	0					
ANR	123682	Identifier	u		123118	1					
ANR	123683	Identifier	op		123118	1					
ANR	123684	Identifier	var		123118	1					
ANR	123685	ElseStatement	else		123118	0					
ANR	123686	CompoundStatement		88:9:2716:2716	123118	0					
ANR	123687	ExpressionStatement	opline -> opcode = ZEND_DECLARE_ANON_CLASS	5266:3:155637:155677	123118	0	True				
ANR	123688	AssignmentExpression	opline -> opcode = ZEND_DECLARE_ANON_CLASS		123118	0		=			
ANR	123689	PtrMemberAccess	opline -> opcode		123118	0					
ANR	123690	Identifier	opline		123118	0					
ANR	123691	Identifier	opcode		123118	1					
ANR	123692	Identifier	ZEND_DECLARE_ANON_CLASS		123118	1					
ANR	123693	ExpressionStatement	opline -> op1_type = IS_UNUSED	5269:2:155686:155714	123118	1	True				
ANR	123694	AssignmentExpression	opline -> op1_type = IS_UNUSED		123118	0		=			
ANR	123695	PtrMemberAccess	opline -> op1_type		123118	0					
ANR	123696	Identifier	opline		123118	0					
ANR	123697	Identifier	op1_type		123118	1					
ANR	123698	Identifier	IS_UNUSED		123118	1					
ANR	123699	ExpressionStatement	"zend_hash_update_ptr ( CG ( class_table ) , lcname , ce )"	5271:2:155719:155768	123118	2	True				
ANR	123700	CallExpression	"zend_hash_update_ptr ( CG ( class_table ) , lcname , ce )"		123118	0					
ANR	123701	Callee	zend_hash_update_ptr		123118	0					
ANR	123702	Identifier	zend_hash_update_ptr		123118	0					
ANR	123703	ArgumentList	CG ( class_table )		123118	1					
ANR	123704	Argument	CG ( class_table )		123118	0					
ANR	123705	CallExpression	CG ( class_table )		123118	0					
ANR	123706	Callee	CG		123118	0					
ANR	123707	Identifier	CG		123118	0					
ANR	123708	ArgumentList	class_table		123118	1					
ANR	123709	Argument	class_table		123118	0					
ANR	123710	Identifier	class_table		123118	0					
ANR	123711	Argument	lcname		123118	1					
ANR	123712	Identifier	lcname		123118	0					
ANR	123713	Argument	ce		123118	2					
ANR	123714	Identifier	ce		123118	0					
ANR	123715	ElseStatement	else		123118	0					
ANR	123716	CompoundStatement		96:2:2866:2882	123118	0					
ANR	123717	IdentifierDeclStatement	zend_string * key ;	5273:2:155782:155798	123118	0	True				
ANR	123718	IdentifierDecl	* key		123118	0					
ANR	123719	IdentifierDeclType	zend_string *		123118	0					
ANR	123720	Identifier	key		123118	1					
ANR	123721	IfStatement	if ( extends_ast )		123118	1					
ANR	123722	Condition	extends_ast	5275:6:155807:155817	123118	0	True				
ANR	123723	Identifier	extends_ast		123118	0					
ANR	123724	CompoundStatement		98:19:2904:2904	123118	1					
ANR	123725	ExpressionStatement	opline -> opcode = ZEND_DECLARE_INHERITED_CLASS	5276:3:155825:155870	123118	0	True				
ANR	123726	AssignmentExpression	opline -> opcode = ZEND_DECLARE_INHERITED_CLASS		123118	0		=			
ANR	123727	PtrMemberAccess	opline -> opcode		123118	0					
ANR	123728	Identifier	opline		123118	0					
ANR	123729	Identifier	opcode		123118	1					
ANR	123730	Identifier	ZEND_DECLARE_INHERITED_CLASS		123118	1					
ANR	123731	ExpressionStatement	opline -> extended_value = extends_node . u . op . var	5277:3:155875:155921	123118	1	True				
ANR	123732	AssignmentExpression	opline -> extended_value = extends_node . u . op . var		123118	0		=			
ANR	123733	PtrMemberAccess	opline -> extended_value		123118	0					
ANR	123734	Identifier	opline		123118	0					
ANR	123735	Identifier	extended_value		123118	1					
ANR	123736	MemberAccess	extends_node . u . op . var		123118	1					
ANR	123737	MemberAccess	extends_node . u . op		123118	0					
ANR	123738	MemberAccess	extends_node . u		123118	0					
ANR	123739	Identifier	extends_node		123118	0					
ANR	123740	Identifier	u		123118	1					
ANR	123741	Identifier	op		123118	1					
ANR	123742	Identifier	var		123118	1					
ANR	123743	ElseStatement	else		123118	0					
ANR	123744	CompoundStatement		101:9:3016:3016	123118	0					
ANR	123745	ExpressionStatement	opline -> opcode = ZEND_DECLARE_CLASS	5279:3:155937:155972	123118	0	True				
ANR	123746	AssignmentExpression	opline -> opcode = ZEND_DECLARE_CLASS		123118	0		=			
ANR	123747	PtrMemberAccess	opline -> opcode		123118	0					
ANR	123748	Identifier	opline		123118	0					
ANR	123749	Identifier	opcode		123118	1					
ANR	123750	Identifier	ZEND_DECLARE_CLASS		123118	1					
ANR	123751	ExpressionStatement	"key = zend_build_runtime_definition_key ( lcname , decl -> lex_pos )"	5282:2:155981:156043	123118	2	True				
ANR	123752	AssignmentExpression	"key = zend_build_runtime_definition_key ( lcname , decl -> lex_pos )"		123118	0		=			
ANR	123753	Identifier	key		123118	0					
ANR	123754	CallExpression	"zend_build_runtime_definition_key ( lcname , decl -> lex_pos )"		123118	1					
ANR	123755	Callee	zend_build_runtime_definition_key		123118	0					
ANR	123756	Identifier	zend_build_runtime_definition_key		123118	0					
ANR	123757	ArgumentList	lcname		123118	1					
ANR	123758	Argument	lcname		123118	0					
ANR	123759	Identifier	lcname		123118	0					
ANR	123760	Argument	decl -> lex_pos		123118	1					
ANR	123761	PtrMemberAccess	decl -> lex_pos		123118	0					
ANR	123762	Identifier	decl		123118	0					
ANR	123763	Identifier	lex_pos		123118	1					
ANR	123764	ExpressionStatement	opline -> op1_type = IS_CONST	5284:2:156048:156075	123118	3	True				
ANR	123765	AssignmentExpression	opline -> op1_type = IS_CONST		123118	0		=			
ANR	123766	PtrMemberAccess	opline -> op1_type		123118	0					
ANR	123767	Identifier	opline		123118	0					
ANR	123768	Identifier	op1_type		123118	1					
ANR	123769	Identifier	IS_CONST		123118	1					
ANR	123770	ExpressionStatement	"LITERAL_STR ( opline -> op1 , key )"	5285:2:156079:156108	123118	4	True				
ANR	123771	CallExpression	"LITERAL_STR ( opline -> op1 , key )"		123118	0					
ANR	123772	Callee	LITERAL_STR		123118	0					
ANR	123773	Identifier	LITERAL_STR		123118	0					
ANR	123774	ArgumentList	opline -> op1		123118	1					
ANR	123775	Argument	opline -> op1		123118	0					
ANR	123776	PtrMemberAccess	opline -> op1		123118	0					
ANR	123777	Identifier	opline		123118	0					
ANR	123778	Identifier	op1		123118	1					
ANR	123779	Argument	key		123118	1					
ANR	123780	Identifier	key		123118	0					
ANR	123781	ExpressionStatement	"zend_hash_update_ptr ( CG ( class_table ) , key , ce )"	5287:2:156113:156159	123118	5	True				
ANR	123782	CallExpression	"zend_hash_update_ptr ( CG ( class_table ) , key , ce )"		123118	0					
ANR	123783	Callee	zend_hash_update_ptr		123118	0					
ANR	123784	Identifier	zend_hash_update_ptr		123118	0					
ANR	123785	ArgumentList	CG ( class_table )		123118	1					
ANR	123786	Argument	CG ( class_table )		123118	0					
ANR	123787	CallExpression	CG ( class_table )		123118	0					
ANR	123788	Callee	CG		123118	0					
ANR	123789	Identifier	CG		123118	0					
ANR	123790	ArgumentList	class_table		123118	1					
ANR	123791	Argument	class_table		123118	0					
ANR	123792	Identifier	class_table		123118	0					
ANR	123793	Argument	key		123118	1					
ANR	123794	Identifier	key		123118	0					
ANR	123795	Argument	ce		123118	2					
ANR	123796	Identifier	ce		123118	0					
ANR	123797	ExpressionStatement	CG ( active_class_entry ) = ce	5290:1:156166:156193	123118	28	True				
ANR	123798	AssignmentExpression	CG ( active_class_entry ) = ce		123118	0		=			
ANR	123799	CallExpression	CG ( active_class_entry )		123118	0					
ANR	123800	Callee	CG		123118	0					
ANR	123801	Identifier	CG		123118	0					
ANR	123802	ArgumentList	active_class_entry		123118	1					
ANR	123803	Argument	active_class_entry		123118	0					
ANR	123804	Identifier	active_class_entry		123118	0					
ANR	123805	Identifier	ce		123118	1					
ANR	123806	IfStatement	if ( implements_ast )		123118	29					
ANR	123807	Condition	implements_ast	5292:5:156201:156214	123118	0	True				
ANR	123808	Identifier	implements_ast		123118	0					
ANR	123809	CompoundStatement		115:21:3301:3301	123118	1					
ANR	123810	ExpressionStatement	"zend_compile_implements ( & declare_node , implements_ast )"	5293:2:156221:156275	123118	0	True				
ANR	123811	CallExpression	"zend_compile_implements ( & declare_node , implements_ast )"		123118	0					
ANR	123812	Callee	zend_compile_implements		123118	0					
ANR	123813	Identifier	zend_compile_implements		123118	0					
ANR	123814	ArgumentList	& declare_node		123118	1					
ANR	123815	Argument	& declare_node		123118	0					
ANR	123816	UnaryOperationExpression	& declare_node		123118	0					
ANR	123817	UnaryOperator	&		123118	0					
ANR	123818	Identifier	declare_node		123118	1					
ANR	123819	Argument	implements_ast		123118	1					
ANR	123820	Identifier	implements_ast		123118	0					
ANR	123821	ExpressionStatement	zend_compile_stmt ( stmt_ast )	5296:1:156282:156309	123118	30	True				
ANR	123822	CallExpression	zend_compile_stmt ( stmt_ast )		123118	0					
ANR	123823	Callee	zend_compile_stmt		123118	0					
ANR	123824	Identifier	zend_compile_stmt		123118	0					
ANR	123825	ArgumentList	stmt_ast		123118	1					
ANR	123826	Argument	stmt_ast		123118	0					
ANR	123827	Identifier	stmt_ast		123118	0					
ANR	123828	ExpressionStatement	CG ( zend_lineno ) = ast -> lineno	5299:1:156362:156391	123118	31	True				
ANR	123829	AssignmentExpression	CG ( zend_lineno ) = ast -> lineno		123118	0		=			
ANR	123830	CallExpression	CG ( zend_lineno )		123118	0					
ANR	123831	Callee	CG		123118	0					
ANR	123832	Identifier	CG		123118	0					
ANR	123833	ArgumentList	zend_lineno		123118	1					
ANR	123834	Argument	zend_lineno		123118	0					
ANR	123835	Identifier	zend_lineno		123118	0					
ANR	123836	PtrMemberAccess	ast -> lineno		123118	1					
ANR	123837	Identifier	ast		123118	0					
ANR	123838	Identifier	lineno		123118	1					
ANR	123839	IfStatement	if ( ce -> num_traits == 0 )		123118	32					
ANR	123840	Condition	ce -> num_traits == 0	5301:5:156399:156417	123118	0	True				
ANR	123841	EqualityExpression	ce -> num_traits == 0		123118	0		==			
ANR	123842	PtrMemberAccess	ce -> num_traits		123118	0					
ANR	123843	Identifier	ce		123118	0					
ANR	123844	Identifier	num_traits		123118	1					
ANR	123845	PrimaryExpression	0		123118	1					
ANR	123846	CompoundStatement		124:26:3504:3504	123118	1					
ANR	123847	ExpressionStatement	zend_check_deprecated_constructor ( ce )	5303:2:156491:156528	123118	0	True				
ANR	123848	CallExpression	zend_check_deprecated_constructor ( ce )		123118	0					
ANR	123849	Callee	zend_check_deprecated_constructor		123118	0					
ANR	123850	Identifier	zend_check_deprecated_constructor		123118	0					
ANR	123851	ArgumentList	ce		123118	1					
ANR	123852	Argument	ce		123118	0					
ANR	123853	Identifier	ce		123118	0					
ANR	123854	IfStatement	if ( ce -> constructor )		123118	33					
ANR	123855	Condition	ce -> constructor	5306:5:156539:156553	123118	0	True				
ANR	123856	PtrMemberAccess	ce -> constructor		123118	0					
ANR	123857	Identifier	ce		123118	0					
ANR	123858	Identifier	constructor		123118	1					
ANR	123859	CompoundStatement		129:22:3640:3640	123118	1					
ANR	123860	ExpressionStatement	ce -> constructor -> common . fn_flags |= ZEND_ACC_CTOR	5307:2:156560:156609	123118	0	True				
ANR	123861	AssignmentExpression	ce -> constructor -> common . fn_flags |= ZEND_ACC_CTOR		123118	0		|=			
ANR	123862	MemberAccess	ce -> constructor -> common . fn_flags		123118	0					
ANR	123863	PtrMemberAccess	ce -> constructor -> common		123118	0					
ANR	123864	PtrMemberAccess	ce -> constructor		123118	0					
ANR	123865	Identifier	ce		123118	0					
ANR	123866	Identifier	constructor		123118	1					
ANR	123867	Identifier	common		123118	1					
ANR	123868	Identifier	fn_flags		123118	1					
ANR	123869	Identifier	ZEND_ACC_CTOR		123118	1					
ANR	123870	IfStatement	if ( ce -> constructor -> common . fn_flags & ZEND_ACC_STATIC )		123118	1					
ANR	123871	Condition	ce -> constructor -> common . fn_flags & ZEND_ACC_STATIC	5308:6:156617:156666	123118	0	True				
ANR	123872	BitAndExpression	ce -> constructor -> common . fn_flags & ZEND_ACC_STATIC		123118	0		&			
ANR	123873	MemberAccess	ce -> constructor -> common . fn_flags		123118	0					
ANR	123874	PtrMemberAccess	ce -> constructor -> common		123118	0					
ANR	123875	PtrMemberAccess	ce -> constructor		123118	0					
ANR	123876	Identifier	ce		123118	0					
ANR	123877	Identifier	constructor		123118	1					
ANR	123878	Identifier	common		123118	1					
ANR	123879	Identifier	fn_flags		123118	1					
ANR	123880	Identifier	ZEND_ACC_STATIC		123118	1					
ANR	123881	CompoundStatement		131:58:3753:3753	123118	1					
ANR	123882	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Constructor %s::%s() cannot be static"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> constructor -> common . function_name ) )"	5309:3:156674:156824	123118	0	True				
ANR	123883	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Constructor %s::%s() cannot be static"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> constructor -> common . function_name ) )"		123118	0					
ANR	123884	Callee	zend_error_noreturn		123118	0					
ANR	123885	Identifier	zend_error_noreturn		123118	0					
ANR	123886	ArgumentList	E_COMPILE_ERROR		123118	1					
ANR	123887	Argument	E_COMPILE_ERROR		123118	0					
ANR	123888	Identifier	E_COMPILE_ERROR		123118	0					
ANR	123889	Argument	"""Constructor %s::%s() cannot be static"""		123118	1					
ANR	123890	PrimaryExpression	"""Constructor %s::%s() cannot be static"""		123118	0					
ANR	123891	Argument	ZSTR_VAL ( ce -> name )		123118	2					
ANR	123892	CallExpression	ZSTR_VAL ( ce -> name )		123118	0					
ANR	123893	Callee	ZSTR_VAL		123118	0					
ANR	123894	Identifier	ZSTR_VAL		123118	0					
ANR	123895	ArgumentList	ce -> name		123118	1					
ANR	123896	Argument	ce -> name		123118	0					
ANR	123897	PtrMemberAccess	ce -> name		123118	0					
ANR	123898	Identifier	ce		123118	0					
ANR	123899	Identifier	name		123118	1					
ANR	123900	Argument	ZSTR_VAL ( ce -> constructor -> common . function_name )		123118	3					
ANR	123901	CallExpression	ZSTR_VAL ( ce -> constructor -> common . function_name )		123118	0					
ANR	123902	Callee	ZSTR_VAL		123118	0					
ANR	123903	Identifier	ZSTR_VAL		123118	0					
ANR	123904	ArgumentList	ce -> constructor -> common . function_name		123118	1					
ANR	123905	Argument	ce -> constructor -> common . function_name		123118	0					
ANR	123906	MemberAccess	ce -> constructor -> common . function_name		123118	0					
ANR	123907	PtrMemberAccess	ce -> constructor -> common		123118	0					
ANR	123908	PtrMemberAccess	ce -> constructor		123118	0					
ANR	123909	Identifier	ce		123118	0					
ANR	123910	Identifier	constructor		123118	1					
ANR	123911	Identifier	common		123118	1					
ANR	123912	Identifier	function_name		123118	1					
ANR	123913	IfStatement	if ( ce -> constructor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE )		123118	2					
ANR	123914	Condition	ce -> constructor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE	5312:6:156836:156894	123118	0	True				
ANR	123915	BitAndExpression	ce -> constructor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE		123118	0		&			
ANR	123916	MemberAccess	ce -> constructor -> common . fn_flags		123118	0					
ANR	123917	PtrMemberAccess	ce -> constructor -> common		123118	0					
ANR	123918	PtrMemberAccess	ce -> constructor		123118	0					
ANR	123919	Identifier	ce		123118	0					
ANR	123920	Identifier	constructor		123118	1					
ANR	123921	Identifier	common		123118	1					
ANR	123922	Identifier	fn_flags		123118	1					
ANR	123923	Identifier	ZEND_ACC_HAS_RETURN_TYPE		123118	1					
ANR	123924	CompoundStatement		135:67:3981:3981	123118	1					
ANR	123925	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Constructor %s::%s() cannot declare a return type"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> constructor -> common . function_name ) )"	5313:3:156902:157068	123118	0	True				
ANR	123926	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Constructor %s::%s() cannot declare a return type"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> constructor -> common . function_name ) )"		123118	0					
ANR	123927	Callee	zend_error_noreturn		123118	0					
ANR	123928	Identifier	zend_error_noreturn		123118	0					
ANR	123929	ArgumentList	E_COMPILE_ERROR		123118	1					
ANR	123930	Argument	E_COMPILE_ERROR		123118	0					
ANR	123931	Identifier	E_COMPILE_ERROR		123118	0					
ANR	123932	Argument	"""Constructor %s::%s() cannot declare a return type"""		123118	1					
ANR	123933	PrimaryExpression	"""Constructor %s::%s() cannot declare a return type"""		123118	0					
ANR	123934	Argument	ZSTR_VAL ( ce -> name )		123118	2					
ANR	123935	CallExpression	ZSTR_VAL ( ce -> name )		123118	0					
ANR	123936	Callee	ZSTR_VAL		123118	0					
ANR	123937	Identifier	ZSTR_VAL		123118	0					
ANR	123938	ArgumentList	ce -> name		123118	1					
ANR	123939	Argument	ce -> name		123118	0					
ANR	123940	PtrMemberAccess	ce -> name		123118	0					
ANR	123941	Identifier	ce		123118	0					
ANR	123942	Identifier	name		123118	1					
ANR	123943	Argument	ZSTR_VAL ( ce -> constructor -> common . function_name )		123118	3					
ANR	123944	CallExpression	ZSTR_VAL ( ce -> constructor -> common . function_name )		123118	0					
ANR	123945	Callee	ZSTR_VAL		123118	0					
ANR	123946	Identifier	ZSTR_VAL		123118	0					
ANR	123947	ArgumentList	ce -> constructor -> common . function_name		123118	1					
ANR	123948	Argument	ce -> constructor -> common . function_name		123118	0					
ANR	123949	MemberAccess	ce -> constructor -> common . function_name		123118	0					
ANR	123950	PtrMemberAccess	ce -> constructor -> common		123118	0					
ANR	123951	PtrMemberAccess	ce -> constructor		123118	0					
ANR	123952	Identifier	ce		123118	0					
ANR	123953	Identifier	constructor		123118	1					
ANR	123954	Identifier	common		123118	1					
ANR	123955	Identifier	function_name		123118	1					
ANR	123956	IfStatement	if ( ce -> destructor )		123118	34					
ANR	123957	Condition	ce -> destructor	5318:5:157082:157095	123118	0	True				
ANR	123958	PtrMemberAccess	ce -> destructor		123118	0					
ANR	123959	Identifier	ce		123118	0					
ANR	123960	Identifier	destructor		123118	1					
ANR	123961	CompoundStatement		141:21:4182:4182	123118	1					
ANR	123962	ExpressionStatement	ce -> destructor -> common . fn_flags |= ZEND_ACC_DTOR	5319:2:157102:157150	123118	0	True				
ANR	123963	AssignmentExpression	ce -> destructor -> common . fn_flags |= ZEND_ACC_DTOR		123118	0		|=			
ANR	123964	MemberAccess	ce -> destructor -> common . fn_flags		123118	0					
ANR	123965	PtrMemberAccess	ce -> destructor -> common		123118	0					
ANR	123966	PtrMemberAccess	ce -> destructor		123118	0					
ANR	123967	Identifier	ce		123118	0					
ANR	123968	Identifier	destructor		123118	1					
ANR	123969	Identifier	common		123118	1					
ANR	123970	Identifier	fn_flags		123118	1					
ANR	123971	Identifier	ZEND_ACC_DTOR		123118	1					
ANR	123972	IfStatement	if ( ce -> destructor -> common . fn_flags & ZEND_ACC_STATIC )		123118	1					
ANR	123973	Condition	ce -> destructor -> common . fn_flags & ZEND_ACC_STATIC	5320:6:157158:157206	123118	0	True				
ANR	123974	BitAndExpression	ce -> destructor -> common . fn_flags & ZEND_ACC_STATIC		123118	0		&			
ANR	123975	MemberAccess	ce -> destructor -> common . fn_flags		123118	0					
ANR	123976	PtrMemberAccess	ce -> destructor -> common		123118	0					
ANR	123977	PtrMemberAccess	ce -> destructor		123118	0					
ANR	123978	Identifier	ce		123118	0					
ANR	123979	Identifier	destructor		123118	1					
ANR	123980	Identifier	common		123118	1					
ANR	123981	Identifier	fn_flags		123118	1					
ANR	123982	Identifier	ZEND_ACC_STATIC		123118	1					
ANR	123983	CompoundStatement		143:57:4293:4293	123118	1					
ANR	123984	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Destructor %s::%s() cannot be static"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> destructor -> common . function_name ) )"	5321:3:157214:157362	123118	0	True				
ANR	123985	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Destructor %s::%s() cannot be static"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> destructor -> common . function_name ) )"		123118	0					
ANR	123986	Callee	zend_error_noreturn		123118	0					
ANR	123987	Identifier	zend_error_noreturn		123118	0					
ANR	123988	ArgumentList	E_COMPILE_ERROR		123118	1					
ANR	123989	Argument	E_COMPILE_ERROR		123118	0					
ANR	123990	Identifier	E_COMPILE_ERROR		123118	0					
ANR	123991	Argument	"""Destructor %s::%s() cannot be static"""		123118	1					
ANR	123992	PrimaryExpression	"""Destructor %s::%s() cannot be static"""		123118	0					
ANR	123993	Argument	ZSTR_VAL ( ce -> name )		123118	2					
ANR	123994	CallExpression	ZSTR_VAL ( ce -> name )		123118	0					
ANR	123995	Callee	ZSTR_VAL		123118	0					
ANR	123996	Identifier	ZSTR_VAL		123118	0					
ANR	123997	ArgumentList	ce -> name		123118	1					
ANR	123998	Argument	ce -> name		123118	0					
ANR	123999	PtrMemberAccess	ce -> name		123118	0					
ANR	124000	Identifier	ce		123118	0					
ANR	124001	Identifier	name		123118	1					
ANR	124002	Argument	ZSTR_VAL ( ce -> destructor -> common . function_name )		123118	3					
ANR	124003	CallExpression	ZSTR_VAL ( ce -> destructor -> common . function_name )		123118	0					
ANR	124004	Callee	ZSTR_VAL		123118	0					
ANR	124005	Identifier	ZSTR_VAL		123118	0					
ANR	124006	ArgumentList	ce -> destructor -> common . function_name		123118	1					
ANR	124007	Argument	ce -> destructor -> common . function_name		123118	0					
ANR	124008	MemberAccess	ce -> destructor -> common . function_name		123118	0					
ANR	124009	PtrMemberAccess	ce -> destructor -> common		123118	0					
ANR	124010	PtrMemberAccess	ce -> destructor		123118	0					
ANR	124011	Identifier	ce		123118	0					
ANR	124012	Identifier	destructor		123118	1					
ANR	124013	Identifier	common		123118	1					
ANR	124014	Identifier	function_name		123118	1					
ANR	124015	ElseStatement	else		123118	0					
ANR	124016	IfStatement	if ( ce -> destructor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE )		123118	0					
ANR	124017	Condition	ce -> destructor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE	5323:13:157377:157434	123118	0	True				
ANR	124018	BitAndExpression	ce -> destructor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE		123118	0		&			
ANR	124019	MemberAccess	ce -> destructor -> common . fn_flags		123118	0					
ANR	124020	PtrMemberAccess	ce -> destructor -> common		123118	0					
ANR	124021	PtrMemberAccess	ce -> destructor		123118	0					
ANR	124022	Identifier	ce		123118	0					
ANR	124023	Identifier	destructor		123118	1					
ANR	124024	Identifier	common		123118	1					
ANR	124025	Identifier	fn_flags		123118	1					
ANR	124026	Identifier	ZEND_ACC_HAS_RETURN_TYPE		123118	1					
ANR	124027	CompoundStatement		146:73:4521:4521	123118	1					
ANR	124028	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Destructor %s::%s() cannot declare a return type"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> destructor -> common . function_name ) )"	5324:3:157442:157606	123118	0	True				
ANR	124029	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Destructor %s::%s() cannot declare a return type"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> destructor -> common . function_name ) )"		123118	0					
ANR	124030	Callee	zend_error_noreturn		123118	0					
ANR	124031	Identifier	zend_error_noreturn		123118	0					
ANR	124032	ArgumentList	E_COMPILE_ERROR		123118	1					
ANR	124033	Argument	E_COMPILE_ERROR		123118	0					
ANR	124034	Identifier	E_COMPILE_ERROR		123118	0					
ANR	124035	Argument	"""Destructor %s::%s() cannot declare a return type"""		123118	1					
ANR	124036	PrimaryExpression	"""Destructor %s::%s() cannot declare a return type"""		123118	0					
ANR	124037	Argument	ZSTR_VAL ( ce -> name )		123118	2					
ANR	124038	CallExpression	ZSTR_VAL ( ce -> name )		123118	0					
ANR	124039	Callee	ZSTR_VAL		123118	0					
ANR	124040	Identifier	ZSTR_VAL		123118	0					
ANR	124041	ArgumentList	ce -> name		123118	1					
ANR	124042	Argument	ce -> name		123118	0					
ANR	124043	PtrMemberAccess	ce -> name		123118	0					
ANR	124044	Identifier	ce		123118	0					
ANR	124045	Identifier	name		123118	1					
ANR	124046	Argument	ZSTR_VAL ( ce -> destructor -> common . function_name )		123118	3					
ANR	124047	CallExpression	ZSTR_VAL ( ce -> destructor -> common . function_name )		123118	0					
ANR	124048	Callee	ZSTR_VAL		123118	0					
ANR	124049	Identifier	ZSTR_VAL		123118	0					
ANR	124050	ArgumentList	ce -> destructor -> common . function_name		123118	1					
ANR	124051	Argument	ce -> destructor -> common . function_name		123118	0					
ANR	124052	MemberAccess	ce -> destructor -> common . function_name		123118	0					
ANR	124053	PtrMemberAccess	ce -> destructor -> common		123118	0					
ANR	124054	PtrMemberAccess	ce -> destructor		123118	0					
ANR	124055	Identifier	ce		123118	0					
ANR	124056	Identifier	destructor		123118	1					
ANR	124057	Identifier	common		123118	1					
ANR	124058	Identifier	function_name		123118	1					
ANR	124059	IfStatement	if ( ce -> clone )		123118	35					
ANR	124060	Condition	ce -> clone	5329:5:157620:157628	123118	0	True				
ANR	124061	PtrMemberAccess	ce -> clone		123118	0					
ANR	124062	Identifier	ce		123118	0					
ANR	124063	Identifier	clone		123118	1					
ANR	124064	CompoundStatement		152:16:4715:4715	123118	1					
ANR	124065	ExpressionStatement	ce -> clone -> common . fn_flags |= ZEND_ACC_CLONE	5330:2:157635:157679	123118	0	True				
ANR	124066	AssignmentExpression	ce -> clone -> common . fn_flags |= ZEND_ACC_CLONE		123118	0		|=			
ANR	124067	MemberAccess	ce -> clone -> common . fn_flags		123118	0					
ANR	124068	PtrMemberAccess	ce -> clone -> common		123118	0					
ANR	124069	PtrMemberAccess	ce -> clone		123118	0					
ANR	124070	Identifier	ce		123118	0					
ANR	124071	Identifier	clone		123118	1					
ANR	124072	Identifier	common		123118	1					
ANR	124073	Identifier	fn_flags		123118	1					
ANR	124074	Identifier	ZEND_ACC_CLONE		123118	1					
ANR	124075	IfStatement	if ( ce -> clone -> common . fn_flags & ZEND_ACC_STATIC )		123118	1					
ANR	124076	Condition	ce -> clone -> common . fn_flags & ZEND_ACC_STATIC	5331:6:157687:157730	123118	0	True				
ANR	124077	BitAndExpression	ce -> clone -> common . fn_flags & ZEND_ACC_STATIC		123118	0		&			
ANR	124078	MemberAccess	ce -> clone -> common . fn_flags		123118	0					
ANR	124079	PtrMemberAccess	ce -> clone -> common		123118	0					
ANR	124080	PtrMemberAccess	ce -> clone		123118	0					
ANR	124081	Identifier	ce		123118	0					
ANR	124082	Identifier	clone		123118	1					
ANR	124083	Identifier	common		123118	1					
ANR	124084	Identifier	fn_flags		123118	1					
ANR	124085	Identifier	ZEND_ACC_STATIC		123118	1					
ANR	124086	CompoundStatement		154:52:4817:4817	123118	1					
ANR	124087	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Clone method %s::%s() cannot be static"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> clone -> common . function_name ) )"	5332:3:157738:157883	123118	0	True				
ANR	124088	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Clone method %s::%s() cannot be static"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> clone -> common . function_name ) )"		123118	0					
ANR	124089	Callee	zend_error_noreturn		123118	0					
ANR	124090	Identifier	zend_error_noreturn		123118	0					
ANR	124091	ArgumentList	E_COMPILE_ERROR		123118	1					
ANR	124092	Argument	E_COMPILE_ERROR		123118	0					
ANR	124093	Identifier	E_COMPILE_ERROR		123118	0					
ANR	124094	Argument	"""Clone method %s::%s() cannot be static"""		123118	1					
ANR	124095	PrimaryExpression	"""Clone method %s::%s() cannot be static"""		123118	0					
ANR	124096	Argument	ZSTR_VAL ( ce -> name )		123118	2					
ANR	124097	CallExpression	ZSTR_VAL ( ce -> name )		123118	0					
ANR	124098	Callee	ZSTR_VAL		123118	0					
ANR	124099	Identifier	ZSTR_VAL		123118	0					
ANR	124100	ArgumentList	ce -> name		123118	1					
ANR	124101	Argument	ce -> name		123118	0					
ANR	124102	PtrMemberAccess	ce -> name		123118	0					
ANR	124103	Identifier	ce		123118	0					
ANR	124104	Identifier	name		123118	1					
ANR	124105	Argument	ZSTR_VAL ( ce -> clone -> common . function_name )		123118	3					
ANR	124106	CallExpression	ZSTR_VAL ( ce -> clone -> common . function_name )		123118	0					
ANR	124107	Callee	ZSTR_VAL		123118	0					
ANR	124108	Identifier	ZSTR_VAL		123118	0					
ANR	124109	ArgumentList	ce -> clone -> common . function_name		123118	1					
ANR	124110	Argument	ce -> clone -> common . function_name		123118	0					
ANR	124111	MemberAccess	ce -> clone -> common . function_name		123118	0					
ANR	124112	PtrMemberAccess	ce -> clone -> common		123118	0					
ANR	124113	PtrMemberAccess	ce -> clone		123118	0					
ANR	124114	Identifier	ce		123118	0					
ANR	124115	Identifier	clone		123118	1					
ANR	124116	Identifier	common		123118	1					
ANR	124117	Identifier	function_name		123118	1					
ANR	124118	ElseStatement	else		123118	0					
ANR	124119	IfStatement	if ( ce -> clone -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE )		123118	0					
ANR	124120	Condition	ce -> clone -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE	5334:13:157898:157950	123118	0	True				
ANR	124121	BitAndExpression	ce -> clone -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE		123118	0		&			
ANR	124122	MemberAccess	ce -> clone -> common . fn_flags		123118	0					
ANR	124123	PtrMemberAccess	ce -> clone -> common		123118	0					
ANR	124124	PtrMemberAccess	ce -> clone		123118	0					
ANR	124125	Identifier	ce		123118	0					
ANR	124126	Identifier	clone		123118	1					
ANR	124127	Identifier	common		123118	1					
ANR	124128	Identifier	fn_flags		123118	1					
ANR	124129	Identifier	ZEND_ACC_HAS_RETURN_TYPE		123118	1					
ANR	124130	CompoundStatement		157:68:5037:5037	123118	1					
ANR	124131	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s::%s() cannot declare a return type"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> clone -> common . function_name ) )"	5335:3:157958:158106	123118	0	True				
ANR	124132	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""%s::%s() cannot declare a return type"" , ZSTR_VAL ( ce -> name ) , ZSTR_VAL ( ce -> clone -> common . function_name ) )"		123118	0					
ANR	124133	Callee	zend_error_noreturn		123118	0					
ANR	124134	Identifier	zend_error_noreturn		123118	0					
ANR	124135	ArgumentList	E_COMPILE_ERROR		123118	1					
ANR	124136	Argument	E_COMPILE_ERROR		123118	0					
ANR	124137	Identifier	E_COMPILE_ERROR		123118	0					
ANR	124138	Argument	"""%s::%s() cannot declare a return type"""		123118	1					
ANR	124139	PrimaryExpression	"""%s::%s() cannot declare a return type"""		123118	0					
ANR	124140	Argument	ZSTR_VAL ( ce -> name )		123118	2					
ANR	124141	CallExpression	ZSTR_VAL ( ce -> name )		123118	0					
ANR	124142	Callee	ZSTR_VAL		123118	0					
ANR	124143	Identifier	ZSTR_VAL		123118	0					
ANR	124144	ArgumentList	ce -> name		123118	1					
ANR	124145	Argument	ce -> name		123118	0					
ANR	124146	PtrMemberAccess	ce -> name		123118	0					
ANR	124147	Identifier	ce		123118	0					
ANR	124148	Identifier	name		123118	1					
ANR	124149	Argument	ZSTR_VAL ( ce -> clone -> common . function_name )		123118	3					
ANR	124150	CallExpression	ZSTR_VAL ( ce -> clone -> common . function_name )		123118	0					
ANR	124151	Callee	ZSTR_VAL		123118	0					
ANR	124152	Identifier	ZSTR_VAL		123118	0					
ANR	124153	ArgumentList	ce -> clone -> common . function_name		123118	1					
ANR	124154	Argument	ce -> clone -> common . function_name		123118	0					
ANR	124155	MemberAccess	ce -> clone -> common . function_name		123118	0					
ANR	124156	PtrMemberAccess	ce -> clone -> common		123118	0					
ANR	124157	PtrMemberAccess	ce -> clone		123118	0					
ANR	124158	Identifier	ce		123118	0					
ANR	124159	Identifier	clone		123118	1					
ANR	124160	Identifier	common		123118	1					
ANR	124161	Identifier	function_name		123118	1					
ANR	124162	IfStatement	if ( ce -> num_traits > 0 )		123118	36					
ANR	124163	Condition	ce -> num_traits > 0	5344:5:158290:158307	123118	0	True				
ANR	124164	RelationalExpression	ce -> num_traits > 0		123118	0		>			
ANR	124165	PtrMemberAccess	ce -> num_traits		123118	0					
ANR	124166	Identifier	ce		123118	0					
ANR	124167	Identifier	num_traits		123118	1					
ANR	124168	PrimaryExpression	0		123118	1					
ANR	124169	CompoundStatement		167:25:5394:5394	123118	1					
ANR	124170	ExpressionStatement	ce -> traits = NULL	5345:2:158314:158331	123118	0	True				
ANR	124171	AssignmentExpression	ce -> traits = NULL		123118	0		=			
ANR	124172	PtrMemberAccess	ce -> traits		123118	0					
ANR	124173	Identifier	ce		123118	0					
ANR	124174	Identifier	traits		123118	1					
ANR	124175	Identifier	NULL		123118	1					
ANR	124176	ExpressionStatement	ce -> num_traits = 0	5346:2:158335:158353	123118	1	True				
ANR	124177	AssignmentExpression	ce -> num_traits = 0		123118	0		=			
ANR	124178	PtrMemberAccess	ce -> num_traits		123118	0					
ANR	124179	Identifier	ce		123118	0					
ANR	124180	Identifier	num_traits		123118	1					
ANR	124181	PrimaryExpression	0		123118	1					
ANR	124182	ExpressionStatement	ce -> ce_flags |= ZEND_ACC_IMPLEMENT_TRAITS	5347:2:158357:158398	123118	2	True				
ANR	124183	AssignmentExpression	ce -> ce_flags |= ZEND_ACC_IMPLEMENT_TRAITS		123118	0		|=			
ANR	124184	PtrMemberAccess	ce -> ce_flags		123118	0					
ANR	124185	Identifier	ce		123118	0					
ANR	124186	Identifier	ce_flags		123118	1					
ANR	124187	Identifier	ZEND_ACC_IMPLEMENT_TRAITS		123118	1					
ANR	124188	ExpressionStatement	"zend_emit_op ( NULL , ZEND_BIND_TRAITS , & declare_node , NULL )"	5349:2:158403:158460	123118	3	True				
ANR	124189	CallExpression	"zend_emit_op ( NULL , ZEND_BIND_TRAITS , & declare_node , NULL )"		123118	0					
ANR	124190	Callee	zend_emit_op		123118	0					
ANR	124191	Identifier	zend_emit_op		123118	0					
ANR	124192	ArgumentList	NULL		123118	1					
ANR	124193	Argument	NULL		123118	0					
ANR	124194	Identifier	NULL		123118	0					
ANR	124195	Argument	ZEND_BIND_TRAITS		123118	1					
ANR	124196	Identifier	ZEND_BIND_TRAITS		123118	0					
ANR	124197	Argument	& declare_node		123118	2					
ANR	124198	UnaryOperationExpression	& declare_node		123118	0					
ANR	124199	UnaryOperator	&		123118	0					
ANR	124200	Identifier	declare_node		123118	1					
ANR	124201	Argument	NULL		123118	3					
ANR	124202	Identifier	NULL		123118	0					
ANR	124203	IfStatement	if ( ! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) ) && ( extends_ast || ce -> num_interfaces > 0 ) )		123118	37					
ANR	124204	Condition	! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) ) && ( extends_ast || ce -> num_interfaces > 0 )	5352:5:158471:158586	123118	0	True				
ANR	124205	AndExpression	! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) ) && ( extends_ast || ce -> num_interfaces > 0 )		123118	0		&&			
ANR	124206	UnaryOperationExpression	! ( ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_EXPLICIT_ABSTRACT_CLASS ) )		123118	0					
ANR	124207	UnaryOperator	!		123118	0					
ANR	124208	BitAndExpression	ce -> ce_flags & ( ZEND_ACC_INTERFACE | ZEND_ACC_EXPLICIT_ABSTRACT_CLASS )		123118	1		&			
ANR	124209	PtrMemberAccess	ce -> ce_flags		123118	0					
ANR	124210	Identifier	ce		123118	0					
ANR	124211	Identifier	ce_flags		123118	1					
ANR	124212	InclusiveOrExpression	ZEND_ACC_INTERFACE | ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		123118	1		|			
ANR	124213	Identifier	ZEND_ACC_INTERFACE		123118	0					
ANR	124214	Identifier	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		123118	1					
ANR	124215	OrExpression	extends_ast || ce -> num_interfaces > 0		123118	1		||			
ANR	124216	Identifier	extends_ast		123118	0					
ANR	124217	RelationalExpression	ce -> num_interfaces > 0		123118	1		>			
ANR	124218	PtrMemberAccess	ce -> num_interfaces		123118	0					
ANR	124219	Identifier	ce		123118	0					
ANR	124220	Identifier	num_interfaces		123118	1					
ANR	124221	PrimaryExpression	0		123118	1					
ANR	124222	CompoundStatement		177:3:5675:5675	123118	1					
ANR	124223	ExpressionStatement	zend_verify_abstract_class ( ce )	5355:2:158595:158625	123118	0	True				
ANR	124224	CallExpression	zend_verify_abstract_class ( ce )		123118	0					
ANR	124225	Callee	zend_verify_abstract_class		123118	0					
ANR	124226	Identifier	zend_verify_abstract_class		123118	0					
ANR	124227	ArgumentList	ce		123118	1					
ANR	124228	Argument	ce		123118	0					
ANR	124229	Identifier	ce		123118	0					
ANR	124230	IfStatement	if ( ce -> num_interfaces && ! ( ce -> ce_flags & ZEND_ACC_IMPLEMENT_TRAITS ) )		123118	1					
ANR	124231	Condition	ce -> num_interfaces && ! ( ce -> ce_flags & ZEND_ACC_IMPLEMENT_TRAITS )	5356:6:158633:158697	123118	0	True				
ANR	124232	AndExpression	ce -> num_interfaces && ! ( ce -> ce_flags & ZEND_ACC_IMPLEMENT_TRAITS )		123118	0		&&			
ANR	124233	PtrMemberAccess	ce -> num_interfaces		123118	0					
ANR	124234	Identifier	ce		123118	0					
ANR	124235	Identifier	num_interfaces		123118	1					
ANR	124236	UnaryOperationExpression	! ( ce -> ce_flags & ZEND_ACC_IMPLEMENT_TRAITS )		123118	1					
ANR	124237	UnaryOperator	!		123118	0					
ANR	124238	BitAndExpression	ce -> ce_flags & ZEND_ACC_IMPLEMENT_TRAITS		123118	1		&			
ANR	124239	PtrMemberAccess	ce -> ce_flags		123118	0					
ANR	124240	Identifier	ce		123118	0					
ANR	124241	Identifier	ce_flags		123118	1					
ANR	124242	Identifier	ZEND_ACC_IMPLEMENT_TRAITS		123118	1					
ANR	124243	CompoundStatement		179:73:5784:5784	123118	1					
ANR	124244	ExpressionStatement	"zend_emit_op ( NULL , ZEND_VERIFY_ABSTRACT_CLASS , & declare_node , NULL )"	5357:3:158705:158772	123118	0	True				
ANR	124245	CallExpression	"zend_emit_op ( NULL , ZEND_VERIFY_ABSTRACT_CLASS , & declare_node , NULL )"		123118	0					
ANR	124246	Callee	zend_emit_op		123118	0					
ANR	124247	Identifier	zend_emit_op		123118	0					
ANR	124248	ArgumentList	NULL		123118	1					
ANR	124249	Argument	NULL		123118	0					
ANR	124250	Identifier	NULL		123118	0					
ANR	124251	Argument	ZEND_VERIFY_ABSTRACT_CLASS		123118	1					
ANR	124252	Identifier	ZEND_VERIFY_ABSTRACT_CLASS		123118	0					
ANR	124253	Argument	& declare_node		123118	2					
ANR	124254	UnaryOperationExpression	& declare_node		123118	0					
ANR	124255	UnaryOperator	&		123118	0					
ANR	124256	Identifier	declare_node		123118	1					
ANR	124257	Argument	NULL		123118	3					
ANR	124258	Identifier	NULL		123118	0					
ANR	124259	IfStatement	if ( ce -> num_interfaces > 0 )		123118	38					
ANR	124260	Condition	ce -> num_interfaces > 0	5365:5:159017:159038	123118	0	True				
ANR	124261	RelationalExpression	ce -> num_interfaces > 0		123118	0		>			
ANR	124262	PtrMemberAccess	ce -> num_interfaces		123118	0					
ANR	124263	Identifier	ce		123118	0					
ANR	124264	Identifier	num_interfaces		123118	1					
ANR	124265	PrimaryExpression	0		123118	1					
ANR	124266	CompoundStatement		188:29:6125:6125	123118	1					
ANR	124267	ExpressionStatement	ce -> interfaces = NULL	5366:2:159045:159066	123118	0	True				
ANR	124268	AssignmentExpression	ce -> interfaces = NULL		123118	0		=			
ANR	124269	PtrMemberAccess	ce -> interfaces		123118	0					
ANR	124270	Identifier	ce		123118	0					
ANR	124271	Identifier	interfaces		123118	1					
ANR	124272	Identifier	NULL		123118	1					
ANR	124273	ExpressionStatement	ce -> num_interfaces = 0	5367:2:159070:159092	123118	1	True				
ANR	124274	AssignmentExpression	ce -> num_interfaces = 0		123118	0		=			
ANR	124275	PtrMemberAccess	ce -> num_interfaces		123118	0					
ANR	124276	Identifier	ce		123118	0					
ANR	124277	Identifier	num_interfaces		123118	1					
ANR	124278	PrimaryExpression	0		123118	1					
ANR	124279	ExpressionStatement	ce -> ce_flags |= ZEND_ACC_IMPLEMENT_INTERFACES	5368:2:159096:159141	123118	2	True				
ANR	124280	AssignmentExpression	ce -> ce_flags |= ZEND_ACC_IMPLEMENT_INTERFACES		123118	0		|=			
ANR	124281	PtrMemberAccess	ce -> ce_flags		123118	0					
ANR	124282	Identifier	ce		123118	0					
ANR	124283	Identifier	ce_flags		123118	1					
ANR	124284	Identifier	ZEND_ACC_IMPLEMENT_INTERFACES		123118	1					
ANR	124285	ExpressionStatement	FC ( implementing_class ) = original_implementing_class	5371:1:159148:159200	123118	39	True				
ANR	124286	AssignmentExpression	FC ( implementing_class ) = original_implementing_class		123118	0		=			
ANR	124287	CallExpression	FC ( implementing_class )		123118	0					
ANR	124288	Callee	FC		123118	0					
ANR	124289	Identifier	FC		123118	0					
ANR	124290	ArgumentList	implementing_class		123118	1					
ANR	124291	Argument	implementing_class		123118	0					
ANR	124292	Identifier	implementing_class		123118	0					
ANR	124293	Identifier	original_implementing_class		123118	1					
ANR	124294	ExpressionStatement	CG ( active_class_entry ) = original_ce	5372:1:159203:159239	123118	40	True				
ANR	124295	AssignmentExpression	CG ( active_class_entry ) = original_ce		123118	0		=			
ANR	124296	CallExpression	CG ( active_class_entry )		123118	0					
ANR	124297	Callee	CG		123118	0					
ANR	124298	Identifier	CG		123118	0					
ANR	124299	ArgumentList	active_class_entry		123118	1					
ANR	124300	Argument	active_class_entry		123118	0					
ANR	124301	Identifier	active_class_entry		123118	0					
ANR	124302	Identifier	original_ce		123118	1					
ANR	124303	ReturnType	void		123118	1					
ANR	124304	Identifier	zend_compile_class_decl		123118	2					
ANR	124305	ParameterList	zend_ast * ast		123118	3					
ANR	124306	Parameter	zend_ast * ast	5177:29:152890:152902	123118	0	True				
ANR	124307	ParameterType	zend_ast *		123118	0					
ANR	124308	Identifier	ast		123118	1					
ANR	124309	CFGEntryNode	ENTRY		123118		True				
ANR	124310	CFGExitNode	EXIT		123118		True				
ANR	124311	Symbol	extends_node		123118						
ANR	124312	Symbol	ast -> lineno		123118						
ANR	124313	Symbol	original_implementing_class		123118						
ANR	124314	Symbol	* ce -> constructor		123118						
ANR	124315	Symbol	* ce		123118						
ANR	124316	Symbol	ce -> info . user . line_start		123118						
ANR	124317	Symbol	decl -> flags		123118						
ANR	124318	Symbol	decl -> doc_comment		123118						
ANR	124319	Symbol	* ce -> destructor		123118						
ANR	124320	Symbol	ZEND_USER_CLASS		123118						
ANR	124321	Symbol	decl -> end_lineno		123118						
ANR	124322	Symbol	ce -> name		123118						
ANR	124323	Symbol	ZEND_ACC_INTERFACE		123118						
ANR	124324	Symbol	zend_class_unserialize_deny		123118						
ANR	124325	Symbol	ce -> constructor -> common . fn_flags		123118						
ANR	124326	Symbol	IS_CONST		123118						
ANR	124327	Symbol	ce -> destructor		123118						
ANR	124328	Symbol	decl -> start_lineno		123118						
ANR	124329	Symbol	ce -> ce_flags		123118						
ANR	124330	Symbol	zend_get_compiled_filename		123118						
ANR	124331	Symbol	declare_node		123118						
ANR	124332	Symbol	ZEND_ACC_CTOR		123118						
ANR	124333	Symbol	implements_ast		123118						
ANR	124334	Symbol	ce -> info		123118						
ANR	124335	Symbol	zend_is_const_default_class_ref		123118						
ANR	124336	Symbol	ce -> type		123118						
ANR	124337	Symbol	ce -> destructor -> common . fn_flags		123118						
ANR	124338	Symbol	ZEND_ACC_IMPLEMENT_TRAITS		123118						
ANR	124339	Symbol	ZEND_ACC_DTOR		123118						
ANR	124340	Symbol	zend_prefix_with_ns		123118						
ANR	124341	Symbol	ce -> constructor -> common		123118						
ANR	124342	Symbol	extends_ast		123118						
ANR	124343	Symbol	ZEND_DECLARE_ANON_CLASS		123118						
ANR	124344	Symbol	key		123118						
ANR	124345	Symbol	ce -> destructor -> common		123118						
ANR	124346	Symbol	ce -> info . user . filename		123118						
ANR	124347	Symbol	decl -> name		123118						
ANR	124348	Symbol	ce		123118						
ANR	124349	Symbol	ZEND_VERIFY_ABSTRACT_CLASS		123118						
ANR	124350	Symbol	get_next_op		123118						
ANR	124351	Symbol	ZEND_DECLARE_ANON_INHERITED_CLASS		123118						
ANR	124352	Symbol	ce -> constructor		123118						
ANR	124353	Symbol	CG		123118						
ANR	124354	Symbol	active_op_array		123118						
ANR	124355	Symbol	import_name		123118						
ANR	124356	Symbol	ce -> num_traits		123118						
ANR	124357	Symbol	ce -> info . user . doc_comment		123118						
ANR	124358	Symbol	* ce -> clone		123118						
ANR	124359	Symbol	lcname		123118						
ANR	124360	Symbol	* opline		123118						
ANR	124361	Symbol	current_namespace		123118						
ANR	124362	Symbol	ZEND_DECLARE_CLASS		123118						
ANR	124363	Symbol	decl -> child		123118						
ANR	124364	Symbol	ce -> serialize		123118						
ANR	124365	Symbol	opline -> op2_type		123118						
ANR	124366	Symbol	* decl		123118						
ANR	124367	Symbol	ce -> info . user . line_end		123118						
ANR	124368	Symbol	stmt_ast		123118						
ANR	124369	Symbol	zend_build_runtime_definition_key		123118						
ANR	124370	Symbol	ce -> constructor -> common . function_name		123118						
ANR	124371	Symbol	ast		123118						
ANR	124372	Symbol	decl		123118						
ANR	124373	Symbol	active_class_entry		123118						
ANR	124374	Symbol	E_COMPILE_ERROR		123118						
ANR	124375	Symbol	arena		123118						
ANR	124376	Symbol	ce -> unserialize		123118						
ANR	124377	Symbol	ZEND_ACC_ANON_CLASS		123118						
ANR	124378	Symbol	zend_string_tolower		123118						
ANR	124379	Symbol	opline -> result		123118						
ANR	124380	Symbol	opline -> extended_value		123118						
ANR	124381	Symbol	& CG		123118						
ANR	124382	Symbol	opline		123118						
ANR	124383	Symbol	extends_node . u . op . var		123118						
ANR	124384	Symbol	zend_lineno		123118						
ANR	124385	Symbol	& extends_node		123118						
ANR	124386	Symbol	extends_name		123118						
ANR	124387	Symbol	ce -> clone -> common . function_name		123118						
ANR	124388	Symbol	zend_hash_find_ptr		123118						
ANR	124389	Symbol	& declare_node		123118						
ANR	124390	Symbol	* decl -> child		123118						
ANR	124391	Symbol	NULL		123118						
ANR	124392	Symbol	imports		123118						
ANR	124393	Symbol	zend_arena_alloc		123118						
ANR	124394	Symbol	ce -> info . user		123118						
ANR	124395	Symbol	original_ce		123118						
ANR	124396	Symbol	ce -> clone -> common		123118						
ANR	124397	Symbol	zend_class_serialize_deny		123118						
ANR	124398	Symbol	ZEND_ACC_CLONE		123118						
ANR	124399	Symbol	zend_string_copy		123118						
ANR	124400	Symbol	opline -> op1_type		123118						
ANR	124401	Symbol	ZEND_ACC_IMPLEMENT_INTERFACES		123118						
ANR	124402	Symbol	implementing_class		123118						
ANR	124403	Symbol	decl -> lex_pos		123118						
ANR	124404	Symbol	extends_node . u		123118						
ANR	124405	Symbol	name		123118						
ANR	124406	Symbol	ce -> clone		123118						
ANR	124407	Symbol	FC		123118						
ANR	124408	Symbol	* * decl		123118						
ANR	124409	Symbol	opline -> op1		123118						
ANR	124410	Symbol	opline -> op2		123118						
ANR	124411	Symbol	zend_string_equals_ci		123118						
ANR	124412	Symbol	* * ce		123118						
ANR	124413	Symbol	UNEXPECTED		123118						
ANR	124414	Symbol	zend_ast_get_str		123118						
ANR	124415	Symbol	* ast		123118						
ANR	124416	Symbol	ce -> num_interfaces		123118						
ANR	124417	Symbol	ZEND_ACC_STATIC		123118						
ANR	124418	Symbol	class_table		123118						
ANR	124419	Symbol	ce -> interfaces		123118						
ANR	124420	Symbol	& FC		123118						
ANR	124421	Symbol	ZEND_ACC_HAS_RETURN_TYPE		123118						
ANR	124422	Symbol	ce -> clone -> common . fn_flags		123118						
ANR	124423	Symbol	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		123118						
ANR	124424	Symbol	zend_generate_anon_class_name		123118						
ANR	124425	Symbol	ZSTR_VAL		123118						
ANR	124426	Symbol	ce -> destructor -> common . function_name		123118						
ANR	124427	Symbol	ce -> traits		123118						
ANR	124428	Symbol	zend_new_interned_string		123118						
ANR	124429	Symbol	extends_node . u . op		123118						
ANR	124430	Symbol	opline -> opcode		123118						
ANR	124431	Symbol	ZEND_DECLARE_INHERITED_CLASS		123118						
ANR	124432	Symbol	ZEND_BIND_TRAITS		123118						
ANR	124433	Symbol	EXPECTED		123118						
ANR	124434	Symbol	IS_UNUSED		123118						
ANR	124435	Function	zend_get_import_ht	5376:0:159254:159950							
ANR	124436	FunctionDef	zend_get_import_ht (uint32_t type)		124435	0					
ANR	124437	CompoundStatement		5377:0:159316:159950	124435	0					
ANR	124438	SwitchStatement	switch ( type )		124435	0					
ANR	124439	Condition	type	5378:9:159327:159330	124435	0	True				
ANR	124440	Identifier	type		124435	0					
ANR	124441	CompoundStatement		2:15:16:16	124435	1					
ANR	124442	Label	case T_CLASS :	5379:2:159337:159349	124435	0	True				
ANR	124443	Identifier	T_CLASS		124435	0					
ANR	124444	IfStatement	if ( ! FC ( imports ) )		124435	1					
ANR	124445	Condition	! FC ( imports )	5380:7:159358:159369	124435	0	True				
ANR	124446	UnaryOperationExpression	! FC ( imports )		124435	0					
ANR	124447	UnaryOperator	!		124435	0					
ANR	124448	CallExpression	FC ( imports )		124435	1					
ANR	124449	Callee	FC		124435	0					
ANR	124450	Identifier	FC		124435	0					
ANR	124451	ArgumentList	imports		124435	1					
ANR	124452	Argument	imports		124435	0					
ANR	124453	Identifier	imports		124435	0					
ANR	124454	CompoundStatement		4:21:55:55	124435	1					
ANR	124455	ExpressionStatement	FC ( imports ) = emalloc ( sizeof ( HashTable ) )	5381:4:159378:159418	124435	0	True				
ANR	124456	AssignmentExpression	FC ( imports ) = emalloc ( sizeof ( HashTable ) )		124435	0		=			
ANR	124457	CallExpression	FC ( imports )		124435	0					
ANR	124458	Callee	FC		124435	0					
ANR	124459	Identifier	FC		124435	0					
ANR	124460	ArgumentList	imports		124435	1					
ANR	124461	Argument	imports		124435	0					
ANR	124462	Identifier	imports		124435	0					
ANR	124463	CallExpression	emalloc ( sizeof ( HashTable ) )		124435	1					
ANR	124464	Callee	emalloc		124435	0					
ANR	124465	Identifier	emalloc		124435	0					
ANR	124466	ArgumentList	sizeof ( HashTable )		124435	1					
ANR	124467	Argument	sizeof ( HashTable )		124435	0					
ANR	124468	SizeofExpression	sizeof ( HashTable )		124435	0					
ANR	124469	Sizeof	sizeof		124435	0					
ANR	124470	SizeofOperand	HashTable		124435	1					
ANR	124471	ExpressionStatement	"zend_hash_init ( FC ( imports ) , 8 , NULL , str_dtor , 0 )"	5382:4:159424:159473	124435	1	True				
ANR	124472	CallExpression	"zend_hash_init ( FC ( imports ) , 8 , NULL , str_dtor , 0 )"		124435	0					
ANR	124473	Callee	zend_hash_init		124435	0					
ANR	124474	Identifier	zend_hash_init		124435	0					
ANR	124475	ArgumentList	FC ( imports )		124435	1					
ANR	124476	Argument	FC ( imports )		124435	0					
ANR	124477	CallExpression	FC ( imports )		124435	0					
ANR	124478	Callee	FC		124435	0					
ANR	124479	Identifier	FC		124435	0					
ANR	124480	ArgumentList	imports		124435	1					
ANR	124481	Argument	imports		124435	0					
ANR	124482	Identifier	imports		124435	0					
ANR	124483	Argument	8		124435	1					
ANR	124484	PrimaryExpression	8		124435	0					
ANR	124485	Argument	NULL		124435	2					
ANR	124486	Identifier	NULL		124435	0					
ANR	124487	Argument	str_dtor		124435	3					
ANR	124488	Identifier	str_dtor		124435	0					
ANR	124489	Argument	0		124435	4					
ANR	124490	PrimaryExpression	0		124435	0					
ANR	124491	ReturnStatement	return FC ( imports ) ;	5384:3:159483:159501	124435	2	True				
ANR	124492	CallExpression	FC ( imports )		124435	0					
ANR	124493	Callee	FC		124435	0					
ANR	124494	Identifier	FC		124435	0					
ANR	124495	ArgumentList	imports		124435	1					
ANR	124496	Argument	imports		124435	0					
ANR	124497	Identifier	imports		124435	0					
ANR	124498	Label	case T_FUNCTION :	5385:2:159505:159520	124435	3	True				
ANR	124499	Identifier	T_FUNCTION		124435	0					
ANR	124500	IfStatement	if ( ! FC ( imports_function ) )		124435	4					
ANR	124501	Condition	! FC ( imports_function )	5386:7:159529:159549	124435	0	True				
ANR	124502	UnaryOperationExpression	! FC ( imports_function )		124435	0					
ANR	124503	UnaryOperator	!		124435	0					
ANR	124504	CallExpression	FC ( imports_function )		124435	1					
ANR	124505	Callee	FC		124435	0					
ANR	124506	Identifier	FC		124435	0					
ANR	124507	ArgumentList	imports_function		124435	1					
ANR	124508	Argument	imports_function		124435	0					
ANR	124509	Identifier	imports_function		124435	0					
ANR	124510	CompoundStatement		10:30:235:235	124435	1					
ANR	124511	ExpressionStatement	FC ( imports_function ) = emalloc ( sizeof ( HashTable ) )	5387:4:159558:159607	124435	0	True				
ANR	124512	AssignmentExpression	FC ( imports_function ) = emalloc ( sizeof ( HashTable ) )		124435	0		=			
ANR	124513	CallExpression	FC ( imports_function )		124435	0					
ANR	124514	Callee	FC		124435	0					
ANR	124515	Identifier	FC		124435	0					
ANR	124516	ArgumentList	imports_function		124435	1					
ANR	124517	Argument	imports_function		124435	0					
ANR	124518	Identifier	imports_function		124435	0					
ANR	124519	CallExpression	emalloc ( sizeof ( HashTable ) )		124435	1					
ANR	124520	Callee	emalloc		124435	0					
ANR	124521	Identifier	emalloc		124435	0					
ANR	124522	ArgumentList	sizeof ( HashTable )		124435	1					
ANR	124523	Argument	sizeof ( HashTable )		124435	0					
ANR	124524	SizeofExpression	sizeof ( HashTable )		124435	0					
ANR	124525	Sizeof	sizeof		124435	0					
ANR	124526	SizeofOperand	HashTable		124435	1					
ANR	124527	ExpressionStatement	"zend_hash_init ( FC ( imports_function ) , 8 , NULL , str_dtor , 0 )"	5388:4:159613:159671	124435	1	True				
ANR	124528	CallExpression	"zend_hash_init ( FC ( imports_function ) , 8 , NULL , str_dtor , 0 )"		124435	0					
ANR	124529	Callee	zend_hash_init		124435	0					
ANR	124530	Identifier	zend_hash_init		124435	0					
ANR	124531	ArgumentList	FC ( imports_function )		124435	1					
ANR	124532	Argument	FC ( imports_function )		124435	0					
ANR	124533	CallExpression	FC ( imports_function )		124435	0					
ANR	124534	Callee	FC		124435	0					
ANR	124535	Identifier	FC		124435	0					
ANR	124536	ArgumentList	imports_function		124435	1					
ANR	124537	Argument	imports_function		124435	0					
ANR	124538	Identifier	imports_function		124435	0					
ANR	124539	Argument	8		124435	1					
ANR	124540	PrimaryExpression	8		124435	0					
ANR	124541	Argument	NULL		124435	2					
ANR	124542	Identifier	NULL		124435	0					
ANR	124543	Argument	str_dtor		124435	3					
ANR	124544	Identifier	str_dtor		124435	0					
ANR	124545	Argument	0		124435	4					
ANR	124546	PrimaryExpression	0		124435	0					
ANR	124547	ReturnStatement	return FC ( imports_function ) ;	5390:3:159681:159708	124435	5	True				
ANR	124548	CallExpression	FC ( imports_function )		124435	0					
ANR	124549	Callee	FC		124435	0					
ANR	124550	Identifier	FC		124435	0					
ANR	124551	ArgumentList	imports_function		124435	1					
ANR	124552	Argument	imports_function		124435	0					
ANR	124553	Identifier	imports_function		124435	0					
ANR	124554	Label	case T_CONST :	5391:2:159712:159724	124435	6	True				
ANR	124555	Identifier	T_CONST		124435	0					
ANR	124556	IfStatement	if ( ! FC ( imports_const ) )		124435	7					
ANR	124557	Condition	! FC ( imports_const )	5392:7:159733:159750	124435	0	True				
ANR	124558	UnaryOperationExpression	! FC ( imports_const )		124435	0					
ANR	124559	UnaryOperator	!		124435	0					
ANR	124560	CallExpression	FC ( imports_const )		124435	1					
ANR	124561	Callee	FC		124435	0					
ANR	124562	Identifier	FC		124435	0					
ANR	124563	ArgumentList	imports_const		124435	1					
ANR	124564	Argument	imports_const		124435	0					
ANR	124565	Identifier	imports_const		124435	0					
ANR	124566	CompoundStatement		16:27:436:436	124435	1					
ANR	124567	ExpressionStatement	FC ( imports_const ) = emalloc ( sizeof ( HashTable ) )	5393:4:159759:159805	124435	0	True				
ANR	124568	AssignmentExpression	FC ( imports_const ) = emalloc ( sizeof ( HashTable ) )		124435	0		=			
ANR	124569	CallExpression	FC ( imports_const )		124435	0					
ANR	124570	Callee	FC		124435	0					
ANR	124571	Identifier	FC		124435	0					
ANR	124572	ArgumentList	imports_const		124435	1					
ANR	124573	Argument	imports_const		124435	0					
ANR	124574	Identifier	imports_const		124435	0					
ANR	124575	CallExpression	emalloc ( sizeof ( HashTable ) )		124435	1					
ANR	124576	Callee	emalloc		124435	0					
ANR	124577	Identifier	emalloc		124435	0					
ANR	124578	ArgumentList	sizeof ( HashTable )		124435	1					
ANR	124579	Argument	sizeof ( HashTable )		124435	0					
ANR	124580	SizeofExpression	sizeof ( HashTable )		124435	0					
ANR	124581	Sizeof	sizeof		124435	0					
ANR	124582	SizeofOperand	HashTable		124435	1					
ANR	124583	ExpressionStatement	"zend_hash_init ( FC ( imports_const ) , 8 , NULL , str_dtor , 0 )"	5394:4:159811:159866	124435	1	True				
ANR	124584	CallExpression	"zend_hash_init ( FC ( imports_const ) , 8 , NULL , str_dtor , 0 )"		124435	0					
ANR	124585	Callee	zend_hash_init		124435	0					
ANR	124586	Identifier	zend_hash_init		124435	0					
ANR	124587	ArgumentList	FC ( imports_const )		124435	1					
ANR	124588	Argument	FC ( imports_const )		124435	0					
ANR	124589	CallExpression	FC ( imports_const )		124435	0					
ANR	124590	Callee	FC		124435	0					
ANR	124591	Identifier	FC		124435	0					
ANR	124592	ArgumentList	imports_const		124435	1					
ANR	124593	Argument	imports_const		124435	0					
ANR	124594	Identifier	imports_const		124435	0					
ANR	124595	Argument	8		124435	1					
ANR	124596	PrimaryExpression	8		124435	0					
ANR	124597	Argument	NULL		124435	2					
ANR	124598	Identifier	NULL		124435	0					
ANR	124599	Argument	str_dtor		124435	3					
ANR	124600	Identifier	str_dtor		124435	0					
ANR	124601	Argument	0		124435	4					
ANR	124602	PrimaryExpression	0		124435	0					
ANR	124603	ReturnStatement	return FC ( imports_const ) ;	5396:3:159876:159900	124435	8	True				
ANR	124604	CallExpression	FC ( imports_const )		124435	0					
ANR	124605	Callee	FC		124435	0					
ANR	124606	Identifier	FC		124435	0					
ANR	124607	ArgumentList	imports_const		124435	1					
ANR	124608	Argument	imports_const		124435	0					
ANR	124609	Identifier	imports_const		124435	0					
ANR	124610	Statement	EMPTY_SWITCH_DEFAULT_CASE	5397:2:159904:159928	124435	9	True				
ANR	124611	Statement	(	5397:27:159929:159929	124435	10	True				
ANR	124612	Statement	)	5397:28:159930:159930	124435	11	True				
ANR	124613	ReturnStatement	return NULL ;	5400:1:159937:159948	124435	1	True				
ANR	124614	Identifier	NULL		124435	0					
ANR	124615	ReturnType	static HashTable *		124435	1					
ANR	124616	Identifier	zend_get_import_ht		124435	2					
ANR	124617	ParameterList	uint32_t type		124435	3					
ANR	124618	Parameter	uint32_t type	5376:37:159291:159303	124435	0	True				
ANR	124619	ParameterType	uint32_t		124435	0					
ANR	124620	Identifier	type		124435	1					
ANR	124621	CFGEntryNode	ENTRY		124435		True				
ANR	124622	CFGExitNode	EXIT		124435		True				
ANR	124623	Symbol	emalloc		124435						
ANR	124624	Symbol	imports		124435						
ANR	124625	Symbol	NULL		124435						
ANR	124626	Symbol	imports_const		124435						
ANR	124627	Symbol	type		124435						
ANR	124628	Symbol	FC		124435						
ANR	124629	Symbol	str_dtor		124435						
ANR	124630	Symbol	imports_function		124435						
ANR	124631	Function	zend_get_use_type_str	5404:0:159963:160204							
ANR	124632	FunctionDef	zend_get_use_type_str (uint32_t type)		124631	0					
ANR	124633	CompoundStatement		5405:0:160023:160204	124631	0					
ANR	124634	SwitchStatement	switch ( type )		124631	0					
ANR	124635	Condition	type	5406:9:160034:160037	124631	0	True				
ANR	124636	Identifier	type		124631	0					
ANR	124637	CompoundStatement		2:15:16:16	124631	1					
ANR	124638	Label	case T_CLASS :	5407:2:160044:160056	124631	0	True				
ANR	124639	Identifier	T_CLASS		124631	0					
ANR	124640	ReturnStatement	"return """" ;"	5408:3:160061:160070	124631	1	True				
ANR	124641	PrimaryExpression	""""""		124631	0					
ANR	124642	Label	case T_FUNCTION :	5409:2:160074:160089	124631	2	True				
ANR	124643	Identifier	T_FUNCTION		124631	0					
ANR	124644	ReturnStatement	"return "" function"" ;"	5410:3:160094:160112	124631	3	True				
ANR	124645	PrimaryExpression	""" function"""		124631	0					
ANR	124646	Label	case T_CONST :	5411:2:160116:160128	124631	4	True				
ANR	124647	Identifier	T_CONST		124631	0					
ANR	124648	ReturnStatement	"return "" const"" ;"	5412:3:160133:160148	124631	5	True				
ANR	124649	PrimaryExpression	""" const"""		124631	0					
ANR	124650	Statement	EMPTY_SWITCH_DEFAULT_CASE	5413:2:160152:160176	124631	6	True				
ANR	124651	Statement	(	5413:27:160177:160177	124631	7	True				
ANR	124652	Statement	)	5413:28:160178:160178	124631	8	True				
ANR	124653	ReturnStatement	"return "" unknown"" ;"	5416:1:160185:160202	124631	1	True				
ANR	124654	PrimaryExpression	""" unknown"""		124631	0					
ANR	124655	ReturnType	static char *		124631	1					
ANR	124656	Identifier	zend_get_use_type_str		124631	2					
ANR	124657	ParameterList	uint32_t type		124631	3					
ANR	124658	Parameter	uint32_t type	5404:35:159998:160010	124631	0	True				
ANR	124659	ParameterType	uint32_t		124631	0					
ANR	124660	Identifier	type		124631	1					
ANR	124661	CFGEntryNode	ENTRY		124631		True				
ANR	124662	CFGExitNode	EXIT		124631		True				
ANR	124663	Symbol	type		124631						
ANR	124664	Function	zend_check_already_in_use	5420:0:160217:160592							
ANR	124665	FunctionDef	"zend_check_already_in_use (uint32_t type , zend_string * old_name , zend_string * new_name , zend_string * check_name)"		124664	0					
ANR	124666	CompoundStatement		5421:0:160351:160592	124664	0					
ANR	124667	IfStatement	"if ( zend_string_equals_ci ( old_name , check_name ) )"		124664	0					
ANR	124668	Condition	"zend_string_equals_ci ( old_name , check_name )"	5422:5:160358:160400	124664	0	True				
ANR	124669	CallExpression	"zend_string_equals_ci ( old_name , check_name )"		124664	0					
ANR	124670	Callee	zend_string_equals_ci		124664	0					
ANR	124671	Identifier	zend_string_equals_ci		124664	0					
ANR	124672	ArgumentList	old_name		124664	1					
ANR	124673	Argument	old_name		124664	0					
ANR	124674	Identifier	old_name		124664	0					
ANR	124675	Argument	check_name		124664	1					
ANR	124676	Identifier	check_name		124664	0					
ANR	124677	CompoundStatement		2:50:51:51	124664	1					
ANR	124678	ReturnStatement	return ;	5423:2:160407:160413	124664	0	True				
ANR	124679	Statement	zend_error_noreturn	5426:1:160420:160438	124664	1	True				
ANR	124680	Statement	(	5426:20:160439:160439	124664	2	True				
ANR	124681	Statement	E_COMPILE_ERROR	5426:21:160440:160454	124664	3	True				
ANR	124682	Statement	","	5426:36:160455:160455	124664	4	True				
ANR	124683	Statement	"""Cannot use%s %s as %s because the name """	5426:38:160457:160497	124664	5	True				
ANR	124684	Statement	"""is already in use"""	5427:2:160501:160519	124664	6	True				
ANR	124685	Statement	","	5427:21:160520:160520	124664	7	True				
ANR	124686	Statement	zend_get_use_type_str	5427:23:160522:160542	124664	8	True				
ANR	124687	Statement	(	5427:44:160543:160543	124664	9	True				
ANR	124688	Statement	type	5427:45:160544:160547	124664	10	True				
ANR	124689	Statement	)	5427:49:160548:160548	124664	11	True				
ANR	124690	Statement	","	5427:50:160549:160549	124664	12	True				
ANR	124691	Statement	ZSTR_VAL	5427:52:160551:160558	124664	13	True				
ANR	124692	Statement	(	5427:60:160559:160559	124664	14	True				
ANR	124693	Statement	old_name	5427:61:160560:160567	124664	15	True				
ANR	124694	Statement	)	5427:69:160568:160568	124664	16	True				
ANR	124695	Statement	","	5427:70:160569:160569	124664	17	True				
ANR	124696	Statement	ZSTR_VAL	5427:72:160571:160578	124664	18	True				
ANR	124697	Statement	(	5427:80:160579:160579	124664	19	True				
ANR	124698	Statement	new_name	5427:81:160580:160587	124664	20	True				
ANR	124699	Statement	)	5427:89:160588:160588	124664	21	True				
ANR	124700	Statement	)	5427:90:160589:160589	124664	22	True				
ANR	124701	ExpressionStatement		5427:91:160590:160590	124664	23	True				
ANR	124702	ReturnType	static void		124664	1					
ANR	124703	Identifier	zend_check_already_in_use		124664	2					
ANR	124704	ParameterList	"uint32_t type , zend_string * old_name , zend_string * new_name , zend_string * check_name"		124664	3					
ANR	124705	Parameter	uint32_t type	5420:38:160255:160267	124664	0	True				
ANR	124706	ParameterType	uint32_t		124664	0					
ANR	124707	Identifier	type		124664	1					
ANR	124708	Parameter	zend_string * old_name	5420:53:160270:160290	124664	1	True				
ANR	124709	ParameterType	zend_string *		124664	0					
ANR	124710	Identifier	old_name		124664	1					
ANR	124711	Parameter	zend_string * new_name	5420:76:160293:160313	124664	2	True				
ANR	124712	ParameterType	zend_string *		124664	0					
ANR	124713	Identifier	new_name		124664	1					
ANR	124714	Parameter	zend_string * check_name	5420:99:160316:160338	124664	3	True				
ANR	124715	ParameterType	zend_string *		124664	0					
ANR	124716	Identifier	check_name		124664	1					
ANR	124717	CFGEntryNode	ENTRY		124664		True				
ANR	124718	CFGExitNode	EXIT		124664		True				
ANR	124719	Symbol	old_name		124664						
ANR	124720	Symbol	zend_string_equals_ci		124664						
ANR	124721	Symbol	check_name		124664						
ANR	124722	Symbol	type		124664						
ANR	124723	Symbol	new_name		124664						
ANR	124724	Function	zend_compile_use	5431:0:160605:164151							
ANR	124725	FunctionDef	zend_compile_use (zend_ast * ast)		124724	0					
ANR	124726	CompoundStatement		5432:0:160652:164151	124724	0					
ANR	124727	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	5433:1:160655:160699	124724	0	True				
ANR	124728	IdentifierDecl	* list = zend_ast_get_list ( ast )		124724	0					
ANR	124729	IdentifierDeclType	zend_ast_list *		124724	0					
ANR	124730	Identifier	list		124724	1					
ANR	124731	AssignmentExpression	* list = zend_ast_get_list ( ast )		124724	2		=			
ANR	124732	Identifier	list		124724	0					
ANR	124733	CallExpression	zend_ast_get_list ( ast )		124724	1					
ANR	124734	Callee	zend_ast_get_list		124724	0					
ANR	124735	Identifier	zend_ast_get_list		124724	0					
ANR	124736	ArgumentList	ast		124724	1					
ANR	124737	Argument	ast		124724	0					
ANR	124738	Identifier	ast		124724	0					
ANR	124739	IdentifierDeclStatement	uint32_t i ;	5434:1:160702:160712	124724	1	True				
ANR	124740	IdentifierDecl	i		124724	0					
ANR	124741	IdentifierDeclType	uint32_t		124724	0					
ANR	124742	Identifier	i		124724	1					
ANR	124743	IdentifierDeclStatement	zend_string * current_ns = FC ( current_namespace ) ;	5435:1:160715:160762	124724	2	True				
ANR	124744	IdentifierDecl	* current_ns = FC ( current_namespace )		124724	0					
ANR	124745	IdentifierDeclType	zend_string *		124724	0					
ANR	124746	Identifier	current_ns		124724	1					
ANR	124747	AssignmentExpression	* current_ns = FC ( current_namespace )		124724	2		=			
ANR	124748	Identifier	current_ns		124724	0					
ANR	124749	CallExpression	FC ( current_namespace )		124724	1					
ANR	124750	Callee	FC		124724	0					
ANR	124751	Identifier	FC		124724	0					
ANR	124752	ArgumentList	current_namespace		124724	1					
ANR	124753	Argument	current_namespace		124724	0					
ANR	124754	Identifier	current_namespace		124724	0					
ANR	124755	IdentifierDeclStatement	uint32_t type = ast -> attr ;	5436:1:160765:160790	124724	3	True				
ANR	124756	IdentifierDecl	type = ast -> attr		124724	0					
ANR	124757	IdentifierDeclType	uint32_t		124724	0					
ANR	124758	Identifier	type		124724	1					
ANR	124759	AssignmentExpression	type = ast -> attr		124724	2		=			
ANR	124760	Identifier	type		124724	0					
ANR	124761	PtrMemberAccess	ast -> attr		124724	1					
ANR	124762	Identifier	ast		124724	0					
ANR	124763	Identifier	attr		124724	1					
ANR	124764	IdentifierDeclStatement	HashTable * current_import = zend_get_import_ht ( type ) ;	5437:1:160793:160845	124724	4	True				
ANR	124765	IdentifierDecl	* current_import = zend_get_import_ht ( type )		124724	0					
ANR	124766	IdentifierDeclType	HashTable *		124724	0					
ANR	124767	Identifier	current_import		124724	1					
ANR	124768	AssignmentExpression	* current_import = zend_get_import_ht ( type )		124724	2		=			
ANR	124769	Identifier	current_import		124724	0					
ANR	124770	CallExpression	zend_get_import_ht ( type )		124724	1					
ANR	124771	Callee	zend_get_import_ht		124724	0					
ANR	124772	Identifier	zend_get_import_ht		124724	0					
ANR	124773	ArgumentList	type		124724	1					
ANR	124774	Argument	type		124724	0					
ANR	124775	Identifier	type		124724	0					
ANR	124776	IdentifierDeclStatement	zend_bool case_sensitive = type == T_CONST ;	5438:1:160848:160890	124724	5	True				
ANR	124777	IdentifierDecl	case_sensitive = type == T_CONST		124724	0					
ANR	124778	IdentifierDeclType	zend_bool		124724	0					
ANR	124779	Identifier	case_sensitive		124724	1					
ANR	124780	AssignmentExpression	case_sensitive = type == T_CONST		124724	2		=			
ANR	124781	Identifier	case_sensitive		124724	0					
ANR	124782	EqualityExpression	type == T_CONST		124724	1		==			
ANR	124783	Identifier	type		124724	0					
ANR	124784	Identifier	T_CONST		124724	1					
ANR	124785	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		124724	6					
ANR	124786	ForInit	i = 0 ;	5440:6:160899:160904	124724	0	True				
ANR	124787	AssignmentExpression	i = 0		124724	0		=			
ANR	124788	Identifier	i		124724	0					
ANR	124789	PrimaryExpression	0		124724	1					
ANR	124790	Condition	i < list -> children	5440:13:160906:160923	124724	1	True				
ANR	124791	RelationalExpression	i < list -> children		124724	0		<			
ANR	124792	Identifier	i		124724	0					
ANR	124793	PtrMemberAccess	list -> children		124724	1					
ANR	124794	Identifier	list		124724	0					
ANR	124795	Identifier	children		124724	1					
ANR	124796	UnaryExpression	++ i	5440:33:160926:160928	124724	2	True				
ANR	124797	IncDec	++		124724	0					
ANR	124798	Identifier	i		124724	1					
ANR	124799	CompoundStatement		14:2:470:505	124724	3					
ANR	124800	IdentifierDeclStatement	zend_ast * use_ast = list -> child [ i ] ;	5441:2:160935:160969	124724	0	True				
ANR	124801	IdentifierDecl	* use_ast = list -> child [ i ]		124724	0					
ANR	124802	IdentifierDeclType	zend_ast *		124724	0					
ANR	124803	Identifier	use_ast		124724	1					
ANR	124804	AssignmentExpression	* use_ast = list -> child [ i ]		124724	2		=			
ANR	124805	Identifier	use_ast		124724	0					
ANR	124806	ArrayIndexing	list -> child [ i ]		124724	1					
ANR	124807	PtrMemberAccess	list -> child		124724	0					
ANR	124808	Identifier	list		124724	0					
ANR	124809	Identifier	child		124724	1					
ANR	124810	Identifier	i		124724	1					
ANR	124811	IdentifierDeclStatement	zend_ast * old_name_ast = use_ast -> child [ 0 ] ;	5442:2:160973:161015	124724	1	True				
ANR	124812	IdentifierDecl	* old_name_ast = use_ast -> child [ 0 ]		124724	0					
ANR	124813	IdentifierDeclType	zend_ast *		124724	0					
ANR	124814	Identifier	old_name_ast		124724	1					
ANR	124815	AssignmentExpression	* old_name_ast = use_ast -> child [ 0 ]		124724	2		=			
ANR	124816	Identifier	old_name_ast		124724	0					
ANR	124817	ArrayIndexing	use_ast -> child [ 0 ]		124724	1					
ANR	124818	PtrMemberAccess	use_ast -> child		124724	0					
ANR	124819	Identifier	use_ast		124724	0					
ANR	124820	Identifier	child		124724	1					
ANR	124821	PrimaryExpression	0		124724	1					
ANR	124822	IdentifierDeclStatement	zend_ast * new_name_ast = use_ast -> child [ 1 ] ;	5443:2:161019:161061	124724	2	True				
ANR	124823	IdentifierDecl	* new_name_ast = use_ast -> child [ 1 ]		124724	0					
ANR	124824	IdentifierDeclType	zend_ast *		124724	0					
ANR	124825	Identifier	new_name_ast		124724	1					
ANR	124826	AssignmentExpression	* new_name_ast = use_ast -> child [ 1 ]		124724	2		=			
ANR	124827	Identifier	new_name_ast		124724	0					
ANR	124828	ArrayIndexing	use_ast -> child [ 1 ]		124724	1					
ANR	124829	PtrMemberAccess	use_ast -> child		124724	0					
ANR	124830	Identifier	use_ast		124724	0					
ANR	124831	Identifier	child		124724	1					
ANR	124832	PrimaryExpression	1		124724	1					
ANR	124833	IdentifierDeclStatement	zend_string * old_name = zend_ast_get_str ( old_name_ast ) ;	5444:2:161065:161119	124724	3	True				
ANR	124834	IdentifierDecl	* old_name = zend_ast_get_str ( old_name_ast )		124724	0					
ANR	124835	IdentifierDeclType	zend_string *		124724	0					
ANR	124836	Identifier	old_name		124724	1					
ANR	124837	AssignmentExpression	* old_name = zend_ast_get_str ( old_name_ast )		124724	2		=			
ANR	124838	Identifier	old_name		124724	0					
ANR	124839	CallExpression	zend_ast_get_str ( old_name_ast )		124724	1					
ANR	124840	Callee	zend_ast_get_str		124724	0					
ANR	124841	Identifier	zend_ast_get_str		124724	0					
ANR	124842	ArgumentList	old_name_ast		124724	1					
ANR	124843	Argument	old_name_ast		124724	0					
ANR	124844	Identifier	old_name_ast		124724	0					
ANR	124845	IdentifierDeclStatement	"zend_string * new_name , * lookup_name ;"	5445:2:161123:161158	124724	4	True				
ANR	124846	IdentifierDecl	* new_name		124724	0					
ANR	124847	IdentifierDeclType	zend_string *		124724	0					
ANR	124848	Identifier	new_name		124724	1					
ANR	124849	IdentifierDecl	* lookup_name		124724	1					
ANR	124850	IdentifierDeclType	zend_string *		124724	0					
ANR	124851	Identifier	lookup_name		124724	1					
ANR	124852	IfStatement	if ( new_name_ast )		124724	5					
ANR	124853	Condition	new_name_ast	5447:6:161167:161178	124724	0	True				
ANR	124854	Identifier	new_name_ast		124724	0					
ANR	124855	CompoundStatement		16:20:528:528	124724	1					
ANR	124856	ExpressionStatement	new_name = zend_string_copy ( zend_ast_get_str ( new_name_ast ) )	5448:3:161186:161245	124724	0	True				
ANR	124857	AssignmentExpression	new_name = zend_string_copy ( zend_ast_get_str ( new_name_ast ) )		124724	0		=			
ANR	124858	Identifier	new_name		124724	0					
ANR	124859	CallExpression	zend_string_copy ( zend_ast_get_str ( new_name_ast ) )		124724	1					
ANR	124860	Callee	zend_string_copy		124724	0					
ANR	124861	Identifier	zend_string_copy		124724	0					
ANR	124862	ArgumentList	zend_ast_get_str ( new_name_ast )		124724	1					
ANR	124863	Argument	zend_ast_get_str ( new_name_ast )		124724	0					
ANR	124864	CallExpression	zend_ast_get_str ( new_name_ast )		124724	0					
ANR	124865	Callee	zend_ast_get_str		124724	0					
ANR	124866	Identifier	zend_ast_get_str		124724	0					
ANR	124867	ArgumentList	new_name_ast		124724	1					
ANR	124868	Argument	new_name_ast		124724	0					
ANR	124869	Identifier	new_name_ast		124724	0					
ANR	124870	ElseStatement	else		124724	0					
ANR	124871	CompoundStatement		20:3:641:668	124724	0					
ANR	124872	IdentifierDeclStatement	const char * unqualified_name ;	5450:3:161261:161289	124724	0	True				
ANR	124873	IdentifierDecl	* unqualified_name		124724	0					
ANR	124874	IdentifierDeclType	const char *		124724	0					
ANR	124875	Identifier	unqualified_name		124724	1					
ANR	124876	IdentifierDeclStatement	size_t unqualified_name_len ;	5451:3:161294:161321	124724	1	True				
ANR	124877	IdentifierDecl	unqualified_name_len		124724	0					
ANR	124878	IdentifierDeclType	size_t		124724	0					
ANR	124879	Identifier	unqualified_name_len		124724	1					
ANR	124880	IfStatement	"if ( zend_get_unqualified_name ( old_name , & unqualified_name , & unqualified_name_len ) )"		124724	2					
ANR	124881	Condition	"zend_get_unqualified_name ( old_name , & unqualified_name , & unqualified_name_len )"	5452:7:161330:161406	124724	0	True				
ANR	124882	CallExpression	"zend_get_unqualified_name ( old_name , & unqualified_name , & unqualified_name_len )"		124724	0					
ANR	124883	Callee	zend_get_unqualified_name		124724	0					
ANR	124884	Identifier	zend_get_unqualified_name		124724	0					
ANR	124885	ArgumentList	old_name		124724	1					
ANR	124886	Argument	old_name		124724	0					
ANR	124887	Identifier	old_name		124724	0					
ANR	124888	Argument	& unqualified_name		124724	1					
ANR	124889	UnaryOperationExpression	& unqualified_name		124724	0					
ANR	124890	UnaryOperator	&		124724	0					
ANR	124891	Identifier	unqualified_name		124724	1					
ANR	124892	Argument	& unqualified_name_len		124724	2					
ANR	124893	UnaryOperationExpression	& unqualified_name_len		124724	0					
ANR	124894	UnaryOperator	&		124724	0					
ANR	124895	Identifier	unqualified_name_len		124724	1					
ANR	124896	CompoundStatement		21:86:756:756	124724	1					
ANR	124897	ExpressionStatement	"new_name = zend_string_init ( unqualified_name , unqualified_name_len , 0 )"	5454:4:161476:161546	124724	0	True				
ANR	124898	AssignmentExpression	"new_name = zend_string_init ( unqualified_name , unqualified_name_len , 0 )"		124724	0		=			
ANR	124899	Identifier	new_name		124724	0					
ANR	124900	CallExpression	"zend_string_init ( unqualified_name , unqualified_name_len , 0 )"		124724	1					
ANR	124901	Callee	zend_string_init		124724	0					
ANR	124902	Identifier	zend_string_init		124724	0					
ANR	124903	ArgumentList	unqualified_name		124724	1					
ANR	124904	Argument	unqualified_name		124724	0					
ANR	124905	Identifier	unqualified_name		124724	0					
ANR	124906	Argument	unqualified_name_len		124724	1					
ANR	124907	Identifier	unqualified_name_len		124724	0					
ANR	124908	Argument	0		124724	2					
ANR	124909	PrimaryExpression	0		124724	0					
ANR	124910	ElseStatement	else		124724	0					
ANR	124911	CompoundStatement		24:10:905:905	124724	0					
ANR	124912	ExpressionStatement	new_name = zend_string_copy ( old_name )	5456:4:161564:161601	124724	0	True				
ANR	124913	AssignmentExpression	new_name = zend_string_copy ( old_name )		124724	0		=			
ANR	124914	Identifier	new_name		124724	0					
ANR	124915	CallExpression	zend_string_copy ( old_name )		124724	1					
ANR	124916	Callee	zend_string_copy		124724	0					
ANR	124917	Identifier	zend_string_copy		124724	0					
ANR	124918	ArgumentList	old_name		124724	1					
ANR	124919	Argument	old_name		124724	0					
ANR	124920	Identifier	old_name		124724	0					
ANR	124921	IfStatement	if ( ! current_ns )		124724	1					
ANR	124922	Condition	! current_ns	5458:8:161612:161622	124724	0	True				
ANR	124923	UnaryOperationExpression	! current_ns		124724	0					
ANR	124924	UnaryOperator	!		124724	0					
ANR	124925	Identifier	current_ns		124724	1					
ANR	124926	CompoundStatement		27:21:972:972	124724	1					
ANR	124927	IfStatement	"if ( type == T_CLASS && zend_string_equals_literal ( new_name , ""strict"" ) )"		124724	0					
ANR	124928	Condition	"type == T_CLASS && zend_string_equals_literal ( new_name , ""strict"" )"	5459:9:161636:161700	124724	0	True				
ANR	124929	AndExpression	"type == T_CLASS && zend_string_equals_literal ( new_name , ""strict"" )"		124724	0		&&			
ANR	124930	EqualityExpression	type == T_CLASS		124724	0		==			
ANR	124931	Identifier	type		124724	0					
ANR	124932	Identifier	T_CLASS		124724	1					
ANR	124933	CallExpression	"zend_string_equals_literal ( new_name , ""strict"" )"		124724	1					
ANR	124934	Callee	zend_string_equals_literal		124724	0					
ANR	124935	Identifier	zend_string_equals_literal		124724	0					
ANR	124936	ArgumentList	new_name		124724	1					
ANR	124937	Argument	new_name		124724	0					
ANR	124938	Identifier	new_name		124724	0					
ANR	124939	Argument	"""strict"""		124724	1					
ANR	124940	PrimaryExpression	"""strict"""		124724	0					
ANR	124941	CompoundStatement		28:76:1050:1050	124724	1					
ANR	124942	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""You seem to be trying to use a different language..."" )"	5460:6:161711:161810	124724	0	True				
ANR	124943	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""You seem to be trying to use a different language..."" )"		124724	0					
ANR	124944	Callee	zend_error_noreturn		124724	0					
ANR	124945	Identifier	zend_error_noreturn		124724	0					
ANR	124946	ArgumentList	E_COMPILE_ERROR		124724	1					
ANR	124947	Argument	E_COMPILE_ERROR		124724	0					
ANR	124948	Identifier	E_COMPILE_ERROR		124724	0					
ANR	124949	Argument	"""You seem to be trying to use a different language..."""		124724	1					
ANR	124950	PrimaryExpression	"""You seem to be trying to use a different language..."""		124724	0					
ANR	124951	Statement	zend_error	5464:5:161825:161834	124724	1	True				
ANR	124952	Statement	(	5464:15:161835:161835	124724	2	True				
ANR	124953	Statement	E_WARNING	5464:16:161836:161844	124724	3	True				
ANR	124954	Statement	","	5464:25:161845:161845	124724	4	True				
ANR	124955	Statement	"""The use statement with non-compound name '%s' """	5464:27:161847:161894	124724	5	True				
ANR	124956	Statement	"""has no effect"""	5465:6:161902:161916	124724	6	True				
ANR	124957	Statement	","	5465:21:161917:161917	124724	7	True				
ANR	124958	Statement	ZSTR_VAL	5465:23:161919:161926	124724	8	True				
ANR	124959	Statement	(	5465:31:161927:161927	124724	9	True				
ANR	124960	Statement	new_name	5465:32:161928:161935	124724	10	True				
ANR	124961	Statement	)	5465:40:161936:161936	124724	11	True				
ANR	124962	Statement	)	5465:41:161937:161937	124724	12	True				
ANR	124963	ExpressionStatement		5465:42:161938:161938	124724	13	True				
ANR	124964	IfStatement	if ( case_sensitive )		124724	6					
ANR	124965	Condition	case_sensitive	5470:6:161962:161975	124724	0	True				
ANR	124966	Identifier	case_sensitive		124724	0					
ANR	124967	CompoundStatement		39:22:1325:1325	124724	1					
ANR	124968	ExpressionStatement	lookup_name = zend_string_copy ( new_name )	5471:3:161983:162023	124724	0	True				
ANR	124969	AssignmentExpression	lookup_name = zend_string_copy ( new_name )		124724	0		=			
ANR	124970	Identifier	lookup_name		124724	0					
ANR	124971	CallExpression	zend_string_copy ( new_name )		124724	1					
ANR	124972	Callee	zend_string_copy		124724	0					
ANR	124973	Identifier	zend_string_copy		124724	0					
ANR	124974	ArgumentList	new_name		124724	1					
ANR	124975	Argument	new_name		124724	0					
ANR	124976	Identifier	new_name		124724	0					
ANR	124977	ElseStatement	else		124724	0					
ANR	124978	CompoundStatement		41:9:1381:1381	124724	0					
ANR	124979	ExpressionStatement	lookup_name = zend_string_tolower ( new_name )	5473:3:162039:162082	124724	0	True				
ANR	124980	AssignmentExpression	lookup_name = zend_string_tolower ( new_name )		124724	0		=			
ANR	124981	Identifier	lookup_name		124724	0					
ANR	124982	CallExpression	zend_string_tolower ( new_name )		124724	1					
ANR	124983	Callee	zend_string_tolower		124724	0					
ANR	124984	Identifier	zend_string_tolower		124724	0					
ANR	124985	ArgumentList	new_name		124724	1					
ANR	124986	Argument	new_name		124724	0					
ANR	124987	Identifier	new_name		124724	0					
ANR	124988	IfStatement	if ( type == T_CLASS && zend_is_reserved_class_name ( new_name ) )		124724	7					
ANR	124989	Condition	type == T_CLASS && zend_is_reserved_class_name ( new_name )	5476:6:162095:162150	124724	0	True				
ANR	124990	AndExpression	type == T_CLASS && zend_is_reserved_class_name ( new_name )		124724	0		&&			
ANR	124991	EqualityExpression	type == T_CLASS		124724	0		==			
ANR	124992	Identifier	type		124724	0					
ANR	124993	Identifier	T_CLASS		124724	1					
ANR	124994	CallExpression	zend_is_reserved_class_name ( new_name )		124724	1					
ANR	124995	Callee	zend_is_reserved_class_name		124724	0					
ANR	124996	Identifier	zend_is_reserved_class_name		124724	0					
ANR	124997	ArgumentList	new_name		124724	1					
ANR	124998	Argument	new_name		124724	0					
ANR	124999	Identifier	new_name		124724	0					
ANR	125000	CompoundStatement		45:64:1500:1500	124724	1					
ANR	125001	Statement	zend_error_noreturn	5477:3:162158:162176	124724	0	True				
ANR	125002	Statement	(	5477:22:162177:162177	124724	1	True				
ANR	125003	Statement	E_COMPILE_ERROR	5477:23:162178:162192	124724	2	True				
ANR	125004	Statement	","	5477:38:162193:162193	124724	3	True				
ANR	125005	Statement	"""Cannot use %s as %s because '%s' """	5477:40:162195:162229	124724	4	True				
ANR	125006	Statement	"""is a special class name"""	5478:4:162235:162259	124724	5	True				
ANR	125007	Statement	","	5478:29:162260:162260	124724	6	True				
ANR	125008	Statement	ZSTR_VAL	5478:31:162262:162269	124724	7	True				
ANR	125009	Statement	(	5478:39:162270:162270	124724	8	True				
ANR	125010	Statement	old_name	5478:40:162271:162278	124724	9	True				
ANR	125011	Statement	)	5478:48:162279:162279	124724	10	True				
ANR	125012	Statement	","	5478:49:162280:162280	124724	11	True				
ANR	125013	Statement	ZSTR_VAL	5478:51:162282:162289	124724	12	True				
ANR	125014	Statement	(	5478:59:162290:162290	124724	13	True				
ANR	125015	Statement	new_name	5478:60:162291:162298	124724	14	True				
ANR	125016	Statement	)	5478:68:162299:162299	124724	15	True				
ANR	125017	Statement	","	5478:69:162300:162300	124724	16	True				
ANR	125018	Statement	ZSTR_VAL	5478:71:162302:162309	124724	17	True				
ANR	125019	Statement	(	5478:79:162310:162310	124724	18	True				
ANR	125020	Statement	new_name	5478:80:162311:162318	124724	19	True				
ANR	125021	Statement	)	5478:88:162319:162319	124724	20	True				
ANR	125022	Statement	)	5478:89:162320:162320	124724	21	True				
ANR	125023	ExpressionStatement		5478:90:162321:162321	124724	22	True				
ANR	125024	IfStatement	if ( current_ns )		124724	8					
ANR	125025	Condition	current_ns	5481:6:162334:162343	124724	0	True				
ANR	125026	Identifier	current_ns		124724	0					
ANR	125027	CompoundStatement		51:3:1698:1788	124724	1					
ANR	125028	IdentifierDeclStatement	"zend_string * ns_name = zend_string_alloc ( ZSTR_LEN ( current_ns ) + 1 + ZSTR_LEN ( new_name ) , 0 ) ;"	5482:3:162351:162441	124724	0	True				
ANR	125029	IdentifierDecl	"* ns_name = zend_string_alloc ( ZSTR_LEN ( current_ns ) + 1 + ZSTR_LEN ( new_name ) , 0 )"		124724	0					
ANR	125030	IdentifierDeclType	zend_string *		124724	0					
ANR	125031	Identifier	ns_name		124724	1					
ANR	125032	AssignmentExpression	"* ns_name = zend_string_alloc ( ZSTR_LEN ( current_ns ) + 1 + ZSTR_LEN ( new_name ) , 0 )"		124724	2		=			
ANR	125033	Identifier	ns_name		124724	0					
ANR	125034	CallExpression	"zend_string_alloc ( ZSTR_LEN ( current_ns ) + 1 + ZSTR_LEN ( new_name ) , 0 )"		124724	1					
ANR	125035	Callee	zend_string_alloc		124724	0					
ANR	125036	Identifier	zend_string_alloc		124724	0					
ANR	125037	ArgumentList	ZSTR_LEN ( current_ns ) + 1 + ZSTR_LEN ( new_name )		124724	1					
ANR	125038	Argument	ZSTR_LEN ( current_ns ) + 1 + ZSTR_LEN ( new_name )		124724	0					
ANR	125039	AdditiveExpression	ZSTR_LEN ( current_ns ) + 1 + ZSTR_LEN ( new_name )		124724	0		+			
ANR	125040	CallExpression	ZSTR_LEN ( current_ns )		124724	0					
ANR	125041	Callee	ZSTR_LEN		124724	0					
ANR	125042	Identifier	ZSTR_LEN		124724	0					
ANR	125043	ArgumentList	current_ns		124724	1					
ANR	125044	Argument	current_ns		124724	0					
ANR	125045	Identifier	current_ns		124724	0					
ANR	125046	AdditiveExpression	1 + ZSTR_LEN ( new_name )		124724	1		+			
ANR	125047	PrimaryExpression	1		124724	0					
ANR	125048	CallExpression	ZSTR_LEN ( new_name )		124724	1					
ANR	125049	Callee	ZSTR_LEN		124724	0					
ANR	125050	Identifier	ZSTR_LEN		124724	0					
ANR	125051	ArgumentList	new_name		124724	1					
ANR	125052	Argument	new_name		124724	0					
ANR	125053	Identifier	new_name		124724	0					
ANR	125054	Argument	0		124724	1					
ANR	125055	PrimaryExpression	0		124724	0					
ANR	125056	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( ns_name ) , ZSTR_VAL ( current_ns ) , ZSTR_LEN ( current_ns ) )"	5483:3:162446:162530	124724	1	True				
ANR	125057	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( ns_name ) , ZSTR_VAL ( current_ns ) , ZSTR_LEN ( current_ns ) )"		124724	0					
ANR	125058	Callee	zend_str_tolower_copy		124724	0					
ANR	125059	Identifier	zend_str_tolower_copy		124724	0					
ANR	125060	ArgumentList	ZSTR_VAL ( ns_name )		124724	1					
ANR	125061	Argument	ZSTR_VAL ( ns_name )		124724	0					
ANR	125062	CallExpression	ZSTR_VAL ( ns_name )		124724	0					
ANR	125063	Callee	ZSTR_VAL		124724	0					
ANR	125064	Identifier	ZSTR_VAL		124724	0					
ANR	125065	ArgumentList	ns_name		124724	1					
ANR	125066	Argument	ns_name		124724	0					
ANR	125067	Identifier	ns_name		124724	0					
ANR	125068	Argument	ZSTR_VAL ( current_ns )		124724	1					
ANR	125069	CallExpression	ZSTR_VAL ( current_ns )		124724	0					
ANR	125070	Callee	ZSTR_VAL		124724	0					
ANR	125071	Identifier	ZSTR_VAL		124724	0					
ANR	125072	ArgumentList	current_ns		124724	1					
ANR	125073	Argument	current_ns		124724	0					
ANR	125074	Identifier	current_ns		124724	0					
ANR	125075	Argument	ZSTR_LEN ( current_ns )		124724	2					
ANR	125076	CallExpression	ZSTR_LEN ( current_ns )		124724	0					
ANR	125077	Callee	ZSTR_LEN		124724	0					
ANR	125078	Identifier	ZSTR_LEN		124724	0					
ANR	125079	ArgumentList	current_ns		124724	1					
ANR	125080	Argument	current_ns		124724	0					
ANR	125081	Identifier	current_ns		124724	0					
ANR	125082	ExpressionStatement	ZSTR_VAL ( ns_name ) [ ZSTR_LEN ( current_ns ) ] = '\\\\'	5484:3:162535:162581	124724	2	True				
ANR	125083	AssignmentExpression	ZSTR_VAL ( ns_name ) [ ZSTR_LEN ( current_ns ) ] = '\\\\'		124724	0		=			
ANR	125084	ArrayIndexing	ZSTR_VAL ( ns_name ) [ ZSTR_LEN ( current_ns ) ]		124724	0					
ANR	125085	CallExpression	ZSTR_VAL ( ns_name )		124724	0					
ANR	125086	Callee	ZSTR_VAL		124724	0					
ANR	125087	Identifier	ZSTR_VAL		124724	0					
ANR	125088	ArgumentList	ns_name		124724	1					
ANR	125089	Argument	ns_name		124724	0					
ANR	125090	Identifier	ns_name		124724	0					
ANR	125091	CallExpression	ZSTR_LEN ( current_ns )		124724	1					
ANR	125092	Callee	ZSTR_LEN		124724	0					
ANR	125093	Identifier	ZSTR_LEN		124724	0					
ANR	125094	ArgumentList	current_ns		124724	1					
ANR	125095	Argument	current_ns		124724	0					
ANR	125096	Identifier	current_ns		124724	0					
ANR	125097	PrimaryExpression	'\\\\'		124724	1					
ANR	125098	ExpressionStatement	"memcpy ( ZSTR_VAL ( ns_name ) + ZSTR_LEN ( current_ns ) + 1 , ZSTR_VAL ( lookup_name ) , ZSTR_LEN ( lookup_name ) )"	5485:3:162586:162684	124724	3	True				
ANR	125099	CallExpression	"memcpy ( ZSTR_VAL ( ns_name ) + ZSTR_LEN ( current_ns ) + 1 , ZSTR_VAL ( lookup_name ) , ZSTR_LEN ( lookup_name ) )"		124724	0					
ANR	125100	Callee	memcpy		124724	0					
ANR	125101	Identifier	memcpy		124724	0					
ANR	125102	ArgumentList	ZSTR_VAL ( ns_name ) + ZSTR_LEN ( current_ns ) + 1		124724	1					
ANR	125103	Argument	ZSTR_VAL ( ns_name ) + ZSTR_LEN ( current_ns ) + 1		124724	0					
ANR	125104	AdditiveExpression	ZSTR_VAL ( ns_name ) + ZSTR_LEN ( current_ns ) + 1		124724	0		+			
ANR	125105	CallExpression	ZSTR_VAL ( ns_name )		124724	0					
ANR	125106	Callee	ZSTR_VAL		124724	0					
ANR	125107	Identifier	ZSTR_VAL		124724	0					
ANR	125108	ArgumentList	ns_name		124724	1					
ANR	125109	Argument	ns_name		124724	0					
ANR	125110	Identifier	ns_name		124724	0					
ANR	125111	AdditiveExpression	ZSTR_LEN ( current_ns ) + 1		124724	1		+			
ANR	125112	CallExpression	ZSTR_LEN ( current_ns )		124724	0					
ANR	125113	Callee	ZSTR_LEN		124724	0					
ANR	125114	Identifier	ZSTR_LEN		124724	0					
ANR	125115	ArgumentList	current_ns		124724	1					
ANR	125116	Argument	current_ns		124724	0					
ANR	125117	Identifier	current_ns		124724	0					
ANR	125118	PrimaryExpression	1		124724	1					
ANR	125119	Argument	ZSTR_VAL ( lookup_name )		124724	1					
ANR	125120	CallExpression	ZSTR_VAL ( lookup_name )		124724	0					
ANR	125121	Callee	ZSTR_VAL		124724	0					
ANR	125122	Identifier	ZSTR_VAL		124724	0					
ANR	125123	ArgumentList	lookup_name		124724	1					
ANR	125124	Argument	lookup_name		124724	0					
ANR	125125	Identifier	lookup_name		124724	0					
ANR	125126	Argument	ZSTR_LEN ( lookup_name )		124724	2					
ANR	125127	CallExpression	ZSTR_LEN ( lookup_name )		124724	0					
ANR	125128	Callee	ZSTR_LEN		124724	0					
ANR	125129	Identifier	ZSTR_LEN		124724	0					
ANR	125130	ArgumentList	lookup_name		124724	1					
ANR	125131	Argument	lookup_name		124724	0					
ANR	125132	Identifier	lookup_name		124724	0					
ANR	125133	IfStatement	"if ( zend_hash_exists ( CG ( class_table ) , ns_name ) )"		124724	4					
ANR	125134	Condition	"zend_hash_exists ( CG ( class_table ) , ns_name )"	5487:7:162694:162735	124724	0	True				
ANR	125135	CallExpression	"zend_hash_exists ( CG ( class_table ) , ns_name )"		124724	0					
ANR	125136	Callee	zend_hash_exists		124724	0					
ANR	125137	Identifier	zend_hash_exists		124724	0					
ANR	125138	ArgumentList	CG ( class_table )		124724	1					
ANR	125139	Argument	CG ( class_table )		124724	0					
ANR	125140	CallExpression	CG ( class_table )		124724	0					
ANR	125141	Callee	CG		124724	0					
ANR	125142	Identifier	CG		124724	0					
ANR	125143	ArgumentList	class_table		124724	1					
ANR	125144	Argument	class_table		124724	0					
ANR	125145	Identifier	class_table		124724	0					
ANR	125146	Argument	ns_name		124724	1					
ANR	125147	Identifier	ns_name		124724	0					
ANR	125148	CompoundStatement		56:51:2085:2085	124724	1					
ANR	125149	ExpressionStatement	"zend_check_already_in_use ( type , old_name , new_name , ns_name )"	5488:4:162744:162804	124724	0	True				
ANR	125150	CallExpression	"zend_check_already_in_use ( type , old_name , new_name , ns_name )"		124724	0					
ANR	125151	Callee	zend_check_already_in_use		124724	0					
ANR	125152	Identifier	zend_check_already_in_use		124724	0					
ANR	125153	ArgumentList	type		124724	1					
ANR	125154	Argument	type		124724	0					
ANR	125155	Identifier	type		124724	0					
ANR	125156	Argument	old_name		124724	1					
ANR	125157	Identifier	old_name		124724	0					
ANR	125158	Argument	new_name		124724	2					
ANR	125159	Identifier	new_name		124724	0					
ANR	125160	Argument	ns_name		124724	3					
ANR	125161	Identifier	ns_name		124724	0					
ANR	125162	ExpressionStatement	zend_string_free ( ns_name )	5491:3:162815:162840	124724	5	True				
ANR	125163	CallExpression	zend_string_free ( ns_name )		124724	0					
ANR	125164	Callee	zend_string_free		124724	0					
ANR	125165	Identifier	zend_string_free		124724	0					
ANR	125166	ArgumentList	ns_name		124724	1					
ANR	125167	Argument	ns_name		124724	0					
ANR	125168	Identifier	ns_name		124724	0					
ANR	125169	ElseStatement	else		124724	0					
ANR	125170	CompoundStatement		61:9:2198:2198	124724	0					
ANR	125171	SwitchStatement	switch ( type )		124724	0					
ANR	125172	Condition	type	5493:11:162864:162867	124724	0	True				
ANR	125173	Identifier	type		124724	0					
ANR	125174	CompoundStatement		62:17:2217:2217	124724	1					
ANR	125175	Label	case T_CLASS :	5494:4:162876:162888	124724	0	True				
ANR	125176	Identifier	T_CLASS		124724	0					
ANR	125177	CompoundStatement		65:5:2248:2319	124724	1					
ANR	125178	IdentifierDeclStatement	"zend_class_entry * ce = zend_hash_find_ptr ( CG ( class_table ) , lookup_name ) ;"	5496:5:162901:162972	124724	0	True				
ANR	125179	IdentifierDecl	"* ce = zend_hash_find_ptr ( CG ( class_table ) , lookup_name )"		124724	0					
ANR	125180	IdentifierDeclType	zend_class_entry *		124724	0					
ANR	125181	Identifier	ce		124724	1					
ANR	125182	AssignmentExpression	"* ce = zend_hash_find_ptr ( CG ( class_table ) , lookup_name )"		124724	2		=			
ANR	125183	Identifier	ce		124724	0					
ANR	125184	CallExpression	"zend_hash_find_ptr ( CG ( class_table ) , lookup_name )"		124724	1					
ANR	125185	Callee	zend_hash_find_ptr		124724	0					
ANR	125186	Identifier	zend_hash_find_ptr		124724	0					
ANR	125187	ArgumentList	CG ( class_table )		124724	1					
ANR	125188	Argument	CG ( class_table )		124724	0					
ANR	125189	CallExpression	CG ( class_table )		124724	0					
ANR	125190	Callee	CG		124724	0					
ANR	125191	Identifier	CG		124724	0					
ANR	125192	ArgumentList	class_table		124724	1					
ANR	125193	Argument	class_table		124724	0					
ANR	125194	Identifier	class_table		124724	0					
ANR	125195	Argument	lookup_name		124724	1					
ANR	125196	Identifier	lookup_name		124724	0					
ANR	125197	IfStatement	if ( ce && ce -> type == ZEND_USER_CLASS && ce -> info . user . filename == CG ( compiled_filename ) )		124724	1					
ANR	125198	Condition	ce && ce -> type == ZEND_USER_CLASS && ce -> info . user . filename == CG ( compiled_filename )	5497:9:162983:163072	124724	0	True				
ANR	125199	AndExpression	ce && ce -> type == ZEND_USER_CLASS && ce -> info . user . filename == CG ( compiled_filename )		124724	0		&&			
ANR	125200	Identifier	ce		124724	0					
ANR	125201	AndExpression	ce -> type == ZEND_USER_CLASS && ce -> info . user . filename == CG ( compiled_filename )		124724	1		&&			
ANR	125202	EqualityExpression	ce -> type == ZEND_USER_CLASS		124724	0		==			
ANR	125203	PtrMemberAccess	ce -> type		124724	0					
ANR	125204	Identifier	ce		124724	0					
ANR	125205	Identifier	type		124724	1					
ANR	125206	Identifier	ZEND_USER_CLASS		124724	1					
ANR	125207	EqualityExpression	ce -> info . user . filename == CG ( compiled_filename )		124724	1		==			
ANR	125208	MemberAccess	ce -> info . user . filename		124724	0					
ANR	125209	MemberAccess	ce -> info . user		124724	0					
ANR	125210	PtrMemberAccess	ce -> info		124724	0					
ANR	125211	Identifier	ce		124724	0					
ANR	125212	Identifier	info		124724	1					
ANR	125213	Identifier	user		124724	1					
ANR	125214	Identifier	filename		124724	1					
ANR	125215	CallExpression	CG ( compiled_filename )		124724	1					
ANR	125216	Callee	CG		124724	0					
ANR	125217	Identifier	CG		124724	0					
ANR	125218	ArgumentList	compiled_filename		124724	1					
ANR	125219	Argument	compiled_filename		124724	0					
ANR	125220	Identifier	compiled_filename		124724	0					
ANR	125221	CompoundStatement		68:7:2428:2428	124724	1					
ANR	125222	ExpressionStatement	"zend_check_already_in_use ( type , old_name , new_name , lookup_name )"	5500:6:163089:163153	124724	0	True				
ANR	125223	CallExpression	"zend_check_already_in_use ( type , old_name , new_name , lookup_name )"		124724	0					
ANR	125224	Callee	zend_check_already_in_use		124724	0					
ANR	125225	Identifier	zend_check_already_in_use		124724	0					
ANR	125226	ArgumentList	type		124724	1					
ANR	125227	Argument	type		124724	0					
ANR	125228	Identifier	type		124724	0					
ANR	125229	Argument	old_name		124724	1					
ANR	125230	Identifier	old_name		124724	0					
ANR	125231	Argument	new_name		124724	2					
ANR	125232	Identifier	new_name		124724	0					
ANR	125233	Argument	lookup_name		124724	3					
ANR	125234	Identifier	lookup_name		124724	0					
ANR	125235	BreakStatement	break ;	5502:5:163167:163172	124724	2	True				
ANR	125236	Label	case T_FUNCTION :	5504:4:163184:163199	124724	2	True				
ANR	125237	Identifier	T_FUNCTION		124724	0					
ANR	125238	CompoundStatement		75:5:2559:2630	124724	3					
ANR	125239	IdentifierDeclStatement	"zend_function * fn = zend_hash_find_ptr ( CG ( function_table ) , lookup_name ) ;"	5506:5:163212:163283	124724	0	True				
ANR	125240	IdentifierDecl	"* fn = zend_hash_find_ptr ( CG ( function_table ) , lookup_name )"		124724	0					
ANR	125241	IdentifierDeclType	zend_function *		124724	0					
ANR	125242	Identifier	fn		124724	1					
ANR	125243	AssignmentExpression	"* fn = zend_hash_find_ptr ( CG ( function_table ) , lookup_name )"		124724	2		=			
ANR	125244	Identifier	fn		124724	0					
ANR	125245	CallExpression	"zend_hash_find_ptr ( CG ( function_table ) , lookup_name )"		124724	1					
ANR	125246	Callee	zend_hash_find_ptr		124724	0					
ANR	125247	Identifier	zend_hash_find_ptr		124724	0					
ANR	125248	ArgumentList	CG ( function_table )		124724	1					
ANR	125249	Argument	CG ( function_table )		124724	0					
ANR	125250	CallExpression	CG ( function_table )		124724	0					
ANR	125251	Callee	CG		124724	0					
ANR	125252	Identifier	CG		124724	0					
ANR	125253	ArgumentList	function_table		124724	1					
ANR	125254	Argument	function_table		124724	0					
ANR	125255	Identifier	function_table		124724	0					
ANR	125256	Argument	lookup_name		124724	1					
ANR	125257	Identifier	lookup_name		124724	0					
ANR	125258	IfStatement	if ( fn && fn -> type == ZEND_USER_FUNCTION && fn -> op_array . filename == CG ( compiled_filename ) )		124724	1					
ANR	125259	Condition	fn && fn -> type == ZEND_USER_FUNCTION && fn -> op_array . filename == CG ( compiled_filename )	5507:9:163294:163385	124724	0	True				
ANR	125260	AndExpression	fn && fn -> type == ZEND_USER_FUNCTION && fn -> op_array . filename == CG ( compiled_filename )		124724	0		&&			
ANR	125261	Identifier	fn		124724	0					
ANR	125262	AndExpression	fn -> type == ZEND_USER_FUNCTION && fn -> op_array . filename == CG ( compiled_filename )		124724	1		&&			
ANR	125263	EqualityExpression	fn -> type == ZEND_USER_FUNCTION		124724	0		==			
ANR	125264	PtrMemberAccess	fn -> type		124724	0					
ANR	125265	Identifier	fn		124724	0					
ANR	125266	Identifier	type		124724	1					
ANR	125267	Identifier	ZEND_USER_FUNCTION		124724	1					
ANR	125268	EqualityExpression	fn -> op_array . filename == CG ( compiled_filename )		124724	1		==			
ANR	125269	MemberAccess	fn -> op_array . filename		124724	0					
ANR	125270	PtrMemberAccess	fn -> op_array		124724	0					
ANR	125271	Identifier	fn		124724	0					
ANR	125272	Identifier	op_array		124724	1					
ANR	125273	Identifier	filename		124724	1					
ANR	125274	CallExpression	CG ( compiled_filename )		124724	1					
ANR	125275	Callee	CG		124724	0					
ANR	125276	Identifier	CG		124724	0					
ANR	125277	ArgumentList	compiled_filename		124724	1					
ANR	125278	Argument	compiled_filename		124724	0					
ANR	125279	Identifier	compiled_filename		124724	0					
ANR	125280	CompoundStatement		78:7:2741:2741	124724	1					
ANR	125281	ExpressionStatement	"zend_check_already_in_use ( type , old_name , new_name , lookup_name )"	5510:6:163402:163466	124724	0	True				
ANR	125282	CallExpression	"zend_check_already_in_use ( type , old_name , new_name , lookup_name )"		124724	0					
ANR	125283	Callee	zend_check_already_in_use		124724	0					
ANR	125284	Identifier	zend_check_already_in_use		124724	0					
ANR	125285	ArgumentList	type		124724	1					
ANR	125286	Argument	type		124724	0					
ANR	125287	Identifier	type		124724	0					
ANR	125288	Argument	old_name		124724	1					
ANR	125289	Identifier	old_name		124724	0					
ANR	125290	Argument	new_name		124724	2					
ANR	125291	Identifier	new_name		124724	0					
ANR	125292	Argument	lookup_name		124724	3					
ANR	125293	Identifier	lookup_name		124724	0					
ANR	125294	BreakStatement	break ;	5512:5:163480:163485	124724	2	True				
ANR	125295	Label	case T_CONST :	5514:4:163497:163509	124724	4	True				
ANR	125296	Identifier	T_CONST		124724	0					
ANR	125297	CompoundStatement		85:5:2869:2946	124724	5					
ANR	125298	IdentifierDeclStatement	"zend_string * filename = zend_hash_find_ptr ( & CG ( const_filenames ) , lookup_name ) ;"	5516:5:163522:163599	124724	0	True				
ANR	125299	IdentifierDecl	"* filename = zend_hash_find_ptr ( & CG ( const_filenames ) , lookup_name )"		124724	0					
ANR	125300	IdentifierDeclType	zend_string *		124724	0					
ANR	125301	Identifier	filename		124724	1					
ANR	125302	AssignmentExpression	"* filename = zend_hash_find_ptr ( & CG ( const_filenames ) , lookup_name )"		124724	2		=			
ANR	125303	Identifier	filename		124724	0					
ANR	125304	CallExpression	"zend_hash_find_ptr ( & CG ( const_filenames ) , lookup_name )"		124724	1					
ANR	125305	Callee	zend_hash_find_ptr		124724	0					
ANR	125306	Identifier	zend_hash_find_ptr		124724	0					
ANR	125307	ArgumentList	& CG ( const_filenames )		124724	1					
ANR	125308	Argument	& CG ( const_filenames )		124724	0					
ANR	125309	UnaryOperationExpression	& CG ( const_filenames )		124724	0					
ANR	125310	UnaryOperator	&		124724	0					
ANR	125311	CallExpression	CG ( const_filenames )		124724	1					
ANR	125312	Callee	CG		124724	0					
ANR	125313	Identifier	CG		124724	0					
ANR	125314	ArgumentList	const_filenames		124724	1					
ANR	125315	Argument	const_filenames		124724	0					
ANR	125316	Identifier	const_filenames		124724	0					
ANR	125317	Argument	lookup_name		124724	1					
ANR	125318	Identifier	lookup_name		124724	0					
ANR	125319	IfStatement	if ( filename && filename == CG ( compiled_filename ) )		124724	1					
ANR	125320	Condition	filename && filename == CG ( compiled_filename )	5517:9:163610:163654	124724	0	True				
ANR	125321	AndExpression	filename && filename == CG ( compiled_filename )		124724	0		&&			
ANR	125322	Identifier	filename		124724	0					
ANR	125323	EqualityExpression	filename == CG ( compiled_filename )		124724	1		==			
ANR	125324	Identifier	filename		124724	0					
ANR	125325	CallExpression	CG ( compiled_filename )		124724	1					
ANR	125326	Callee	CG		124724	0					
ANR	125327	Identifier	CG		124724	0					
ANR	125328	ArgumentList	compiled_filename		124724	1					
ANR	125329	Argument	compiled_filename		124724	0					
ANR	125330	Identifier	compiled_filename		124724	0					
ANR	125331	CompoundStatement		86:56:3004:3004	124724	1					
ANR	125332	ExpressionStatement	"zend_check_already_in_use ( type , old_name , new_name , lookup_name )"	5518:6:163665:163729	124724	0	True				
ANR	125333	CallExpression	"zend_check_already_in_use ( type , old_name , new_name , lookup_name )"		124724	0					
ANR	125334	Callee	zend_check_already_in_use		124724	0					
ANR	125335	Identifier	zend_check_already_in_use		124724	0					
ANR	125336	ArgumentList	type		124724	1					
ANR	125337	Argument	type		124724	0					
ANR	125338	Identifier	type		124724	0					
ANR	125339	Argument	old_name		124724	1					
ANR	125340	Identifier	old_name		124724	0					
ANR	125341	Argument	new_name		124724	2					
ANR	125342	Identifier	new_name		124724	0					
ANR	125343	Argument	lookup_name		124724	3					
ANR	125344	Identifier	lookup_name		124724	0					
ANR	125345	BreakStatement	break ;	5520:5:163743:163748	124724	2	True				
ANR	125346	Statement	EMPTY_SWITCH_DEFAULT_CASE	5522:4:163760:163784	124724	6	True				
ANR	125347	Statement	(	5522:29:163785:163785	124724	7	True				
ANR	125348	Statement	)	5522:30:163786:163786	124724	8	True				
ANR	125349	ExpressionStatement	zend_string_addref ( old_name )	5526:2:163800:163828	124724	9	True				
ANR	125350	CallExpression	zend_string_addref ( old_name )		124724	0					
ANR	125351	Callee	zend_string_addref		124724	0					
ANR	125352	Identifier	zend_string_addref		124724	0					
ANR	125353	ArgumentList	old_name		124724	1					
ANR	125354	Argument	old_name		124724	0					
ANR	125355	Identifier	old_name		124724	0					
ANR	125356	IfStatement	"if ( ! zend_hash_add_ptr ( current_import , lookup_name , old_name ) )"		124724	10					
ANR	125357	Condition	"! zend_hash_add_ptr ( current_import , lookup_name , old_name )"	5527:6:163836:163892	124724	0	True				
ANR	125358	UnaryOperationExpression	"! zend_hash_add_ptr ( current_import , lookup_name , old_name )"		124724	0					
ANR	125359	UnaryOperator	!		124724	0					
ANR	125360	CallExpression	"zend_hash_add_ptr ( current_import , lookup_name , old_name )"		124724	1					
ANR	125361	Callee	zend_hash_add_ptr		124724	0					
ANR	125362	Identifier	zend_hash_add_ptr		124724	0					
ANR	125363	ArgumentList	current_import		124724	1					
ANR	125364	Argument	current_import		124724	0					
ANR	125365	Identifier	current_import		124724	0					
ANR	125366	Argument	lookup_name		124724	1					
ANR	125367	Identifier	lookup_name		124724	0					
ANR	125368	Argument	old_name		124724	2					
ANR	125369	Identifier	old_name		124724	0					
ANR	125370	CompoundStatement		96:65:3242:3242	124724	1					
ANR	125371	Statement	zend_error_noreturn	5528:3:163900:163918	124724	0	True				
ANR	125372	Statement	(	5528:22:163919:163919	124724	1	True				
ANR	125373	Statement	E_COMPILE_ERROR	5528:23:163920:163934	124724	2	True				
ANR	125374	Statement	","	5528:38:163935:163935	124724	3	True				
ANR	125375	Statement	"""Cannot use%s %s as %s because the name """	5528:40:163937:163977	124724	4	True				
ANR	125376	Statement	"""is already in use"""	5529:4:163983:164001	124724	5	True				
ANR	125377	Statement	","	5529:23:164002:164002	124724	6	True				
ANR	125378	Statement	zend_get_use_type_str	5529:25:164004:164024	124724	7	True				
ANR	125379	Statement	(	5529:46:164025:164025	124724	8	True				
ANR	125380	Statement	type	5529:47:164026:164029	124724	9	True				
ANR	125381	Statement	)	5529:51:164030:164030	124724	10	True				
ANR	125382	Statement	","	5529:52:164031:164031	124724	11	True				
ANR	125383	Statement	ZSTR_VAL	5529:54:164033:164040	124724	12	True				
ANR	125384	Statement	(	5529:62:164041:164041	124724	13	True				
ANR	125385	Statement	old_name	5529:63:164042:164049	124724	14	True				
ANR	125386	Statement	)	5529:71:164050:164050	124724	15	True				
ANR	125387	Statement	","	5529:72:164051:164051	124724	16	True				
ANR	125388	Statement	ZSTR_VAL	5529:74:164053:164060	124724	17	True				
ANR	125389	Statement	(	5529:82:164061:164061	124724	18	True				
ANR	125390	Statement	new_name	5529:83:164062:164069	124724	19	True				
ANR	125391	Statement	)	5529:91:164070:164070	124724	20	True				
ANR	125392	Statement	)	5529:92:164071:164071	124724	21	True				
ANR	125393	ExpressionStatement		5529:93:164072:164072	124724	22	True				
ANR	125394	ExpressionStatement	zend_string_release ( lookup_name )	5532:2:164081:164113	124724	11	True				
ANR	125395	CallExpression	zend_string_release ( lookup_name )		124724	0					
ANR	125396	Callee	zend_string_release		124724	0					
ANR	125397	Identifier	zend_string_release		124724	0					
ANR	125398	ArgumentList	lookup_name		124724	1					
ANR	125399	Argument	lookup_name		124724	0					
ANR	125400	Identifier	lookup_name		124724	0					
ANR	125401	ExpressionStatement	zend_string_release ( new_name )	5533:2:164117:164146	124724	12	True				
ANR	125402	CallExpression	zend_string_release ( new_name )		124724	0					
ANR	125403	Callee	zend_string_release		124724	0					
ANR	125404	Identifier	zend_string_release		124724	0					
ANR	125405	ArgumentList	new_name		124724	1					
ANR	125406	Argument	new_name		124724	0					
ANR	125407	Identifier	new_name		124724	0					
ANR	125408	ReturnType	void		124724	1					
ANR	125409	Identifier	zend_compile_use		124724	2					
ANR	125410	ParameterList	zend_ast * ast		124724	3					
ANR	125411	Parameter	zend_ast * ast	5431:22:160627:160639	124724	0	True				
ANR	125412	ParameterType	zend_ast *		124724	0					
ANR	125413	Identifier	ast		124724	1					
ANR	125414	CFGEntryNode	ENTRY		124724		True				
ANR	125415	CFGExitNode	EXIT		124724		True				
ANR	125416	Symbol	zend_string_equals_literal		124724						
ANR	125417	Symbol	ast		124724						
ANR	125418	Symbol	E_COMPILE_ERROR		124724						
ANR	125419	Symbol	zend_hash_exists		124724						
ANR	125420	Symbol	unqualified_name		124724						
ANR	125421	Symbol	* ce		124724						
ANR	125422	Symbol	type		124724						
ANR	125423	Symbol	zend_string_tolower		124724						
ANR	125424	Symbol	& CG		124724						
ANR	125425	Symbol	zend_string_init		124724						
ANR	125426	Symbol	zend_is_reserved_class_name		124724						
ANR	125427	Symbol	* ZSTR_LEN		124724						
ANR	125428	Symbol	ZEND_USER_CLASS		124724						
ANR	125429	Symbol	ZEND_USER_FUNCTION		124724						
ANR	125430	Symbol	* * use_ast		124724						
ANR	125431	Symbol	zend_hash_find_ptr		124724						
ANR	125432	Symbol	* ZSTR_VAL		124724						
ANR	125433	Symbol	& unqualified_name_len		124724						
ANR	125434	Symbol	zend_string_alloc		124724						
ANR	125435	Symbol	ce -> info . user		124724						
ANR	125436	Symbol	const_filenames		124724						
ANR	125437	Symbol	zend_string_copy		124724						
ANR	125438	Symbol	list		124724						
ANR	125439	Symbol	filename		124724						
ANR	125440	Symbol	case_sensitive		124724						
ANR	125441	Symbol	old_name_ast		124724						
ANR	125442	Symbol	* list -> child		124724						
ANR	125443	Symbol	ce -> info		124724						
ANR	125444	Symbol	zend_hash_add_ptr		124724						
ANR	125445	Symbol	function_table		124724						
ANR	125446	Symbol	FC		124724						
ANR	125447	Symbol	list -> children		124724						
ANR	125448	Symbol	ce -> type		124724						
ANR	125449	Symbol	* use_ast -> child		124724						
ANR	125450	Symbol	* use_ast		124724						
ANR	125451	Symbol	fn		124724						
ANR	125452	Symbol	use_ast -> child		124724						
ANR	125453	Symbol	* ast		124724						
ANR	125454	Symbol	* * list		124724						
ANR	125455	Symbol	zend_ast_get_str		124724						
ANR	125456	Symbol	lookup_name		124724						
ANR	125457	Symbol	T_CLASS		124724						
ANR	125458	Symbol	zend_get_unqualified_name		124724						
ANR	125459	Symbol	current_ns		124724						
ANR	125460	Symbol	class_table		124724						
ANR	125461	Symbol	ns_name		124724						
ANR	125462	Symbol	fn -> op_array		124724						
ANR	125463	Symbol	new_name_ast		124724						
ANR	125464	Symbol	new_name		124724						
ANR	125465	Symbol	unqualified_name_len		124724						
ANR	125466	Symbol	ce -> info . user . filename		124724						
ANR	125467	Symbol	fn -> op_array . filename		124724						
ANR	125468	Symbol	ast -> attr		124724						
ANR	125469	Symbol	ce		124724						
ANR	125470	Symbol	zend_get_import_ht		124724						
ANR	125471	Symbol	list -> child		124724						
ANR	125472	Symbol	CG		124724						
ANR	125473	Symbol	T_CONST		124724						
ANR	125474	Symbol	i		124724						
ANR	125475	Symbol	compiled_filename		124724						
ANR	125476	Symbol	* fn		124724						
ANR	125477	Symbol	& unqualified_name		124724						
ANR	125478	Symbol	ZSTR_VAL		124724						
ANR	125479	Symbol	zend_ast_get_list		124724						
ANR	125480	Symbol	* i		124724						
ANR	125481	Symbol	current_namespace		124724						
ANR	125482	Symbol	* list		124724						
ANR	125483	Symbol	old_name		124724						
ANR	125484	Symbol	use_ast		124724						
ANR	125485	Symbol	ZSTR_LEN		124724						
ANR	125486	Symbol	current_import		124724						
ANR	125487	Symbol	fn -> type		124724						
ANR	125488	Function	zend_compile_group_use	5538:0:164164:164848							
ANR	125489	FunctionDef	zend_compile_group_use (zend_ast * ast)		125488	0					
ANR	125490	CompoundStatement		5539:0:164217:164848	125488	0					
ANR	125491	IdentifierDeclStatement	uint32_t i ;	5540:1:164220:164230	125488	0	True				
ANR	125492	IdentifierDecl	i		125488	0					
ANR	125493	IdentifierDeclType	uint32_t		125488	0					
ANR	125494	Identifier	i		125488	1					
ANR	125495	IdentifierDeclStatement	zend_string * ns = zend_ast_get_str ( ast -> child [ 0 ] ) ;	5541:1:164233:164282	125488	1	True				
ANR	125496	IdentifierDecl	* ns = zend_ast_get_str ( ast -> child [ 0 ] )		125488	0					
ANR	125497	IdentifierDeclType	zend_string *		125488	0					
ANR	125498	Identifier	ns		125488	1					
ANR	125499	AssignmentExpression	* ns = zend_ast_get_str ( ast -> child [ 0 ] )		125488	2		=			
ANR	125500	Identifier	ns		125488	0					
ANR	125501	CallExpression	zend_ast_get_str ( ast -> child [ 0 ] )		125488	1					
ANR	125502	Callee	zend_ast_get_str		125488	0					
ANR	125503	Identifier	zend_ast_get_str		125488	0					
ANR	125504	ArgumentList	ast -> child [ 0 ]		125488	1					
ANR	125505	Argument	ast -> child [ 0 ]		125488	0					
ANR	125506	ArrayIndexing	ast -> child [ 0 ]		125488	0					
ANR	125507	PtrMemberAccess	ast -> child		125488	0					
ANR	125508	Identifier	ast		125488	0					
ANR	125509	Identifier	child		125488	1					
ANR	125510	PrimaryExpression	0		125488	1					
ANR	125511	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast -> child [ 1 ] ) ;	5542:1:164285:164339	125488	2	True				
ANR	125512	IdentifierDecl	* list = zend_ast_get_list ( ast -> child [ 1 ] )		125488	0					
ANR	125513	IdentifierDeclType	zend_ast_list *		125488	0					
ANR	125514	Identifier	list		125488	1					
ANR	125515	AssignmentExpression	* list = zend_ast_get_list ( ast -> child [ 1 ] )		125488	2		=			
ANR	125516	Identifier	list		125488	0					
ANR	125517	CallExpression	zend_ast_get_list ( ast -> child [ 1 ] )		125488	1					
ANR	125518	Callee	zend_ast_get_list		125488	0					
ANR	125519	Identifier	zend_ast_get_list		125488	0					
ANR	125520	ArgumentList	ast -> child [ 1 ]		125488	1					
ANR	125521	Argument	ast -> child [ 1 ]		125488	0					
ANR	125522	ArrayIndexing	ast -> child [ 1 ]		125488	0					
ANR	125523	PtrMemberAccess	ast -> child		125488	0					
ANR	125524	Identifier	ast		125488	0					
ANR	125525	Identifier	child		125488	1					
ANR	125526	PrimaryExpression	1		125488	1					
ANR	125527	ForStatement	for ( i = 0 ; i < list -> children ; i ++ )		125488	3					
ANR	125528	ForInit	i = 0 ;	5544:6:164348:164353	125488	0	True				
ANR	125529	AssignmentExpression	i = 0		125488	0		=			
ANR	125530	Identifier	i		125488	0					
ANR	125531	PrimaryExpression	0		125488	1					
ANR	125532	Condition	i < list -> children	5544:13:164355:164372	125488	1	True				
ANR	125533	RelationalExpression	i < list -> children		125488	0		<			
ANR	125534	Identifier	i		125488	0					
ANR	125535	PtrMemberAccess	list -> children		125488	1					
ANR	125536	Identifier	list		125488	0					
ANR	125537	Identifier	children		125488	1					
ANR	125538	PostIncDecOperationExpression	i ++	5544:33:164375:164377	125488	2	True				
ANR	125539	Identifier	i		125488	0					
ANR	125540	IncDec	++		125488	1					
ANR	125541	CompoundStatement		10:2:309:413	125488	3					
ANR	125542	IdentifierDeclStatement	"zend_ast * inline_use , * use = list -> child [ i ] ;"	5545:2:164384:164427	125488	0	True				
ANR	125543	IdentifierDecl	* inline_use		125488	0					
ANR	125544	IdentifierDeclType	zend_ast *		125488	0					
ANR	125545	Identifier	inline_use		125488	1					
ANR	125546	IdentifierDecl	* use = list -> child [ i ]		125488	1					
ANR	125547	IdentifierDeclType	zend_ast *		125488	0					
ANR	125548	Identifier	use		125488	1					
ANR	125549	AssignmentExpression	* use = list -> child [ i ]		125488	2		=			
ANR	125550	Identifier	use		125488	0					
ANR	125551	ArrayIndexing	list -> child [ i ]		125488	1					
ANR	125552	PtrMemberAccess	list -> child		125488	0					
ANR	125553	Identifier	list		125488	0					
ANR	125554	Identifier	child		125488	1					
ANR	125555	Identifier	i		125488	1					
ANR	125556	IdentifierDeclStatement	zval * name_zval = zend_ast_get_zval ( use -> child [ 0 ] ) ;	5546:2:164431:164481	125488	1	True				
ANR	125557	IdentifierDecl	* name_zval = zend_ast_get_zval ( use -> child [ 0 ] )		125488	0					
ANR	125558	IdentifierDeclType	zval *		125488	0					
ANR	125559	Identifier	name_zval		125488	1					
ANR	125560	AssignmentExpression	* name_zval = zend_ast_get_zval ( use -> child [ 0 ] )		125488	2		=			
ANR	125561	Identifier	name_zval		125488	0					
ANR	125562	CallExpression	zend_ast_get_zval ( use -> child [ 0 ] )		125488	1					
ANR	125563	Callee	zend_ast_get_zval		125488	0					
ANR	125564	Identifier	zend_ast_get_zval		125488	0					
ANR	125565	ArgumentList	use -> child [ 0 ]		125488	1					
ANR	125566	Argument	use -> child [ 0 ]		125488	0					
ANR	125567	ArrayIndexing	use -> child [ 0 ]		125488	0					
ANR	125568	PtrMemberAccess	use -> child		125488	0					
ANR	125569	Identifier	use		125488	0					
ANR	125570	Identifier	child		125488	1					
ANR	125571	PrimaryExpression	0		125488	1					
ANR	125572	IdentifierDeclStatement	zend_string * name = Z_STR_P ( name_zval ) ;	5547:2:164485:164523	125488	2	True				
ANR	125573	IdentifierDecl	* name = Z_STR_P ( name_zval )		125488	0					
ANR	125574	IdentifierDeclType	zend_string *		125488	0					
ANR	125575	Identifier	name		125488	1					
ANR	125576	AssignmentExpression	* name = Z_STR_P ( name_zval )		125488	2		=			
ANR	125577	Identifier	name		125488	0					
ANR	125578	CallExpression	Z_STR_P ( name_zval )		125488	1					
ANR	125579	Callee	Z_STR_P		125488	0					
ANR	125580	Identifier	Z_STR_P		125488	0					
ANR	125581	ArgumentList	name_zval		125488	1					
ANR	125582	Argument	name_zval		125488	0					
ANR	125583	Identifier	name_zval		125488	0					
ANR	125584	IdentifierDeclStatement	"zend_string * compound_ns = zend_concat_names ( ZSTR_VAL ( ns ) , ZSTR_LEN ( ns ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) ;"	5548:2:164527:164631	125488	3	True				
ANR	125585	IdentifierDecl	"* compound_ns = zend_concat_names ( ZSTR_VAL ( ns ) , ZSTR_LEN ( ns ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		125488	0					
ANR	125586	IdentifierDeclType	zend_string *		125488	0					
ANR	125587	Identifier	compound_ns		125488	1					
ANR	125588	AssignmentExpression	"* compound_ns = zend_concat_names ( ZSTR_VAL ( ns ) , ZSTR_LEN ( ns ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		125488	2		=			
ANR	125589	Identifier	compound_ns		125488	0					
ANR	125590	CallExpression	"zend_concat_names ( ZSTR_VAL ( ns ) , ZSTR_LEN ( ns ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		125488	1					
ANR	125591	Callee	zend_concat_names		125488	0					
ANR	125592	Identifier	zend_concat_names		125488	0					
ANR	125593	ArgumentList	ZSTR_VAL ( ns )		125488	1					
ANR	125594	Argument	ZSTR_VAL ( ns )		125488	0					
ANR	125595	CallExpression	ZSTR_VAL ( ns )		125488	0					
ANR	125596	Callee	ZSTR_VAL		125488	0					
ANR	125597	Identifier	ZSTR_VAL		125488	0					
ANR	125598	ArgumentList	ns		125488	1					
ANR	125599	Argument	ns		125488	0					
ANR	125600	Identifier	ns		125488	0					
ANR	125601	Argument	ZSTR_LEN ( ns )		125488	1					
ANR	125602	CallExpression	ZSTR_LEN ( ns )		125488	0					
ANR	125603	Callee	ZSTR_LEN		125488	0					
ANR	125604	Identifier	ZSTR_LEN		125488	0					
ANR	125605	ArgumentList	ns		125488	1					
ANR	125606	Argument	ns		125488	0					
ANR	125607	Identifier	ns		125488	0					
ANR	125608	Argument	ZSTR_VAL ( name )		125488	2					
ANR	125609	CallExpression	ZSTR_VAL ( name )		125488	0					
ANR	125610	Callee	ZSTR_VAL		125488	0					
ANR	125611	Identifier	ZSTR_VAL		125488	0					
ANR	125612	ArgumentList	name		125488	1					
ANR	125613	Argument	name		125488	0					
ANR	125614	Identifier	name		125488	0					
ANR	125615	Argument	ZSTR_LEN ( name )		125488	3					
ANR	125616	CallExpression	ZSTR_LEN ( name )		125488	0					
ANR	125617	Callee	ZSTR_LEN		125488	0					
ANR	125618	Identifier	ZSTR_LEN		125488	0					
ANR	125619	ArgumentList	name		125488	1					
ANR	125620	Argument	name		125488	0					
ANR	125621	Identifier	name		125488	0					
ANR	125622	ExpressionStatement	zend_string_release ( name )	5549:2:164635:164660	125488	4	True				
ANR	125623	CallExpression	zend_string_release ( name )		125488	0					
ANR	125624	Callee	zend_string_release		125488	0					
ANR	125625	Identifier	zend_string_release		125488	0					
ANR	125626	ArgumentList	name		125488	1					
ANR	125627	Argument	name		125488	0					
ANR	125628	Identifier	name		125488	0					
ANR	125629	ExpressionStatement	"ZVAL_STR ( name_zval , compound_ns )"	5550:2:164664:164696	125488	5	True				
ANR	125630	CallExpression	"ZVAL_STR ( name_zval , compound_ns )"		125488	0					
ANR	125631	Callee	ZVAL_STR		125488	0					
ANR	125632	Identifier	ZVAL_STR		125488	0					
ANR	125633	ArgumentList	name_zval		125488	1					
ANR	125634	Argument	name_zval		125488	0					
ANR	125635	Identifier	name_zval		125488	0					
ANR	125636	Argument	compound_ns		125488	1					
ANR	125637	Identifier	compound_ns		125488	0					
ANR	125638	ExpressionStatement	"inline_use = zend_ast_create_list ( 1 , ZEND_AST_USE , use )"	5551:2:164700:164755	125488	6	True				
ANR	125639	AssignmentExpression	"inline_use = zend_ast_create_list ( 1 , ZEND_AST_USE , use )"		125488	0		=			
ANR	125640	Identifier	inline_use		125488	0					
ANR	125641	CallExpression	"zend_ast_create_list ( 1 , ZEND_AST_USE , use )"		125488	1					
ANR	125642	Callee	zend_ast_create_list		125488	0					
ANR	125643	Identifier	zend_ast_create_list		125488	0					
ANR	125644	ArgumentList	1		125488	1					
ANR	125645	Argument	1		125488	0					
ANR	125646	PrimaryExpression	1		125488	0					
ANR	125647	Argument	ZEND_AST_USE		125488	1					
ANR	125648	Identifier	ZEND_AST_USE		125488	0					
ANR	125649	Argument	use		125488	2					
ANR	125650	Identifier	use		125488	0					
ANR	125651	ExpressionStatement	inline_use -> attr = ast -> attr ? ast -> attr : use -> attr	5552:2:164759:164811	125488	7	True				
ANR	125652	AssignmentExpression	inline_use -> attr = ast -> attr ? ast -> attr : use -> attr		125488	0		=			
ANR	125653	PtrMemberAccess	inline_use -> attr		125488	0					
ANR	125654	Identifier	inline_use		125488	0					
ANR	125655	Identifier	attr		125488	1					
ANR	125656	ConditionalExpression	ast -> attr ? ast -> attr : use -> attr		125488	1					
ANR	125657	Condition	ast -> attr		125488	0					
ANR	125658	PtrMemberAccess	ast -> attr		125488	0					
ANR	125659	Identifier	ast		125488	0					
ANR	125660	Identifier	attr		125488	1					
ANR	125661	PtrMemberAccess	ast -> attr		125488	1					
ANR	125662	Identifier	ast		125488	0					
ANR	125663	Identifier	attr		125488	1					
ANR	125664	PtrMemberAccess	use -> attr		125488	2					
ANR	125665	Identifier	use		125488	0					
ANR	125666	Identifier	attr		125488	1					
ANR	125667	ExpressionStatement	zend_compile_use ( inline_use )	5553:2:164815:164843	125488	8	True				
ANR	125668	CallExpression	zend_compile_use ( inline_use )		125488	0					
ANR	125669	Callee	zend_compile_use		125488	0					
ANR	125670	Identifier	zend_compile_use		125488	0					
ANR	125671	ArgumentList	inline_use		125488	1					
ANR	125672	Argument	inline_use		125488	0					
ANR	125673	Identifier	inline_use		125488	0					
ANR	125674	ReturnType	void		125488	1					
ANR	125675	Identifier	zend_compile_group_use		125488	2					
ANR	125676	ParameterList	zend_ast * ast		125488	3					
ANR	125677	Parameter	zend_ast * ast	5538:28:164192:164204	125488	0	True				
ANR	125678	ParameterType	zend_ast *		125488	0					
ANR	125679	Identifier	ast		125488	1					
ANR	125680	CFGEntryNode	ENTRY		125488		True				
ANR	125681	CFGExitNode	EXIT		125488		True				
ANR	125682	Symbol	ast		125488						
ANR	125683	Symbol	zend_ast_create_list		125488						
ANR	125684	Symbol	inline_use		125488						
ANR	125685	Symbol	ns		125488						
ANR	125686	Symbol	use		125488						
ANR	125687	Symbol	* use -> child		125488						
ANR	125688	Symbol	zend_concat_names		125488						
ANR	125689	Symbol	zend_ast_get_str		125488						
ANR	125690	Symbol	* ast		125488						
ANR	125691	Symbol	* * list		125488						
ANR	125692	Symbol	name_zval		125488						
ANR	125693	Symbol	* * ast		125488						
ANR	125694	Symbol	* * use		125488						
ANR	125695	Symbol	ast -> attr		125488						
ANR	125696	Symbol	list -> child		125488						
ANR	125697	Symbol	inline_use -> attr		125488						
ANR	125698	Symbol	i		125488						
ANR	125699	Symbol	list		125488						
ANR	125700	Symbol	use -> child		125488						
ANR	125701	Symbol	ZSTR_VAL		125488						
ANR	125702	Symbol	* use		125488						
ANR	125703	Symbol	zend_ast_get_list		125488						
ANR	125704	Symbol	* i		125488						
ANR	125705	Symbol	* list		125488						
ANR	125706	Symbol	ZEND_AST_USE		125488						
ANR	125707	Symbol	* inline_use		125488						
ANR	125708	Symbol	name		125488						
ANR	125709	Symbol	ZSTR_LEN		125488						
ANR	125710	Symbol	use -> attr		125488						
ANR	125711	Symbol	* ast -> child		125488						
ANR	125712	Symbol	* list -> child		125488						
ANR	125713	Symbol	Z_STR_P		125488						
ANR	125714	Symbol	ast -> child		125488						
ANR	125715	Symbol	zend_ast_get_zval		125488						
ANR	125716	Symbol	list -> children		125488						
ANR	125717	Symbol	compound_ns		125488						
ANR	125718	Function	zend_compile_const_decl	5559:0:164862:166125							
ANR	125719	FunctionDef	zend_compile_const_decl (zend_ast * ast)		125718	0					
ANR	125720	CompoundStatement		5560:0:164916:166125	125718	0					
ANR	125721	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	5561:1:164919:164963	125718	0	True				
ANR	125722	IdentifierDecl	* list = zend_ast_get_list ( ast )		125718	0					
ANR	125723	IdentifierDeclType	zend_ast_list *		125718	0					
ANR	125724	Identifier	list		125718	1					
ANR	125725	AssignmentExpression	* list = zend_ast_get_list ( ast )		125718	2		=			
ANR	125726	Identifier	list		125718	0					
ANR	125727	CallExpression	zend_ast_get_list ( ast )		125718	1					
ANR	125728	Callee	zend_ast_get_list		125718	0					
ANR	125729	Identifier	zend_ast_get_list		125718	0					
ANR	125730	ArgumentList	ast		125718	1					
ANR	125731	Argument	ast		125718	0					
ANR	125732	Identifier	ast		125718	0					
ANR	125733	IdentifierDeclStatement	uint32_t i ;	5562:1:164966:164976	125718	1	True				
ANR	125734	IdentifierDecl	i		125718	0					
ANR	125735	IdentifierDeclType	uint32_t		125718	0					
ANR	125736	Identifier	i		125718	1					
ANR	125737	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		125718	2					
ANR	125738	ForInit	i = 0 ;	5563:6:164984:164989	125718	0	True				
ANR	125739	AssignmentExpression	i = 0		125718	0		=			
ANR	125740	Identifier	i		125718	0					
ANR	125741	PrimaryExpression	0		125718	1					
ANR	125742	Condition	i < list -> children	5563:13:164991:165008	125718	1	True				
ANR	125743	RelationalExpression	i < list -> children		125718	0		<			
ANR	125744	Identifier	i		125718	0					
ANR	125745	PtrMemberAccess	list -> children		125718	1					
ANR	125746	Identifier	list		125718	0					
ANR	125747	Identifier	children		125718	1					
ANR	125748	UnaryExpression	++ i	5563:33:165011:165013	125718	2	True				
ANR	125749	IncDec	++		125718	0					
ANR	125750	Identifier	i		125718	1					
ANR	125751	CompoundStatement		12:2:342:381	125718	3					
ANR	125752	IdentifierDeclStatement	zend_ast * const_ast = list -> child [ i ] ;	5564:2:165020:165056	125718	0	True				
ANR	125753	IdentifierDecl	* const_ast = list -> child [ i ]		125718	0					
ANR	125754	IdentifierDeclType	zend_ast *		125718	0					
ANR	125755	Identifier	const_ast		125718	1					
ANR	125756	AssignmentExpression	* const_ast = list -> child [ i ]		125718	2		=			
ANR	125757	Identifier	const_ast		125718	0					
ANR	125758	ArrayIndexing	list -> child [ i ]		125718	1					
ANR	125759	PtrMemberAccess	list -> child		125718	0					
ANR	125760	Identifier	list		125718	0					
ANR	125761	Identifier	child		125718	1					
ANR	125762	Identifier	i		125718	1					
ANR	125763	IdentifierDeclStatement	zend_ast * name_ast = const_ast -> child [ 0 ] ;	5565:2:165060:165100	125718	1	True				
ANR	125764	IdentifierDecl	* name_ast = const_ast -> child [ 0 ]		125718	0					
ANR	125765	IdentifierDeclType	zend_ast *		125718	0					
ANR	125766	Identifier	name_ast		125718	1					
ANR	125767	AssignmentExpression	* name_ast = const_ast -> child [ 0 ]		125718	2		=			
ANR	125768	Identifier	name_ast		125718	0					
ANR	125769	ArrayIndexing	const_ast -> child [ 0 ]		125718	1					
ANR	125770	PtrMemberAccess	const_ast -> child		125718	0					
ANR	125771	Identifier	const_ast		125718	0					
ANR	125772	Identifier	child		125718	1					
ANR	125773	PrimaryExpression	0		125718	1					
ANR	125774	IdentifierDeclStatement	zend_ast * value_ast = const_ast -> child [ 1 ] ;	5566:2:165104:165145	125718	2	True				
ANR	125775	IdentifierDecl	* value_ast = const_ast -> child [ 1 ]		125718	0					
ANR	125776	IdentifierDeclType	zend_ast *		125718	0					
ANR	125777	Identifier	value_ast		125718	1					
ANR	125778	AssignmentExpression	* value_ast = const_ast -> child [ 1 ]		125718	2		=			
ANR	125779	Identifier	value_ast		125718	0					
ANR	125780	ArrayIndexing	const_ast -> child [ 1 ]		125718	1					
ANR	125781	PtrMemberAccess	const_ast -> child		125718	0					
ANR	125782	Identifier	const_ast		125718	0					
ANR	125783	Identifier	child		125718	1					
ANR	125784	PrimaryExpression	1		125718	1					
ANR	125785	IdentifierDeclStatement	zend_string * name = zend_ast_get_str ( name_ast ) ;	5567:2:165149:165195	125718	3	True				
ANR	125786	IdentifierDecl	* name = zend_ast_get_str ( name_ast )		125718	0					
ANR	125787	IdentifierDeclType	zend_string *		125718	0					
ANR	125788	Identifier	name		125718	1					
ANR	125789	AssignmentExpression	* name = zend_ast_get_str ( name_ast )		125718	2		=			
ANR	125790	Identifier	name		125718	0					
ANR	125791	CallExpression	zend_ast_get_str ( name_ast )		125718	1					
ANR	125792	Callee	zend_ast_get_str		125718	0					
ANR	125793	Identifier	zend_ast_get_str		125718	0					
ANR	125794	ArgumentList	name_ast		125718	1					
ANR	125795	Argument	name_ast		125718	0					
ANR	125796	Identifier	name_ast		125718	0					
ANR	125797	IdentifierDeclStatement	zend_string * import_name ;	5569:2:165200:165224	125718	4	True				
ANR	125798	IdentifierDecl	* import_name		125718	0					
ANR	125799	IdentifierDeclType	zend_string *		125718	0					
ANR	125800	Identifier	import_name		125718	1					
ANR	125801	IdentifierDeclStatement	"znode name_node , value_node ;"	5570:2:165228:165255	125718	5	True				
ANR	125802	IdentifierDecl	name_node		125718	0					
ANR	125803	IdentifierDeclType	znode		125718	0					
ANR	125804	Identifier	name_node		125718	1					
ANR	125805	IdentifierDecl	value_node		125718	1					
ANR	125806	IdentifierDeclType	znode		125718	0					
ANR	125807	Identifier	value_node		125718	1					
ANR	125808	IdentifierDeclStatement	zval * value_zv = & value_node . u . constant ;	5571:2:165259:165298	125718	6	True				
ANR	125809	IdentifierDecl	* value_zv = & value_node . u . constant		125718	0					
ANR	125810	IdentifierDeclType	zval *		125718	0					
ANR	125811	Identifier	value_zv		125718	1					
ANR	125812	AssignmentExpression	* value_zv = & value_node . u . constant		125718	2		=			
ANR	125813	Identifier	value_zv		125718	0					
ANR	125814	UnaryOperationExpression	& value_node . u . constant		125718	1					
ANR	125815	UnaryOperator	&		125718	0					
ANR	125816	MemberAccess	value_node . u . constant		125718	1					
ANR	125817	MemberAccess	value_node . u		125718	0					
ANR	125818	Identifier	value_node		125718	0					
ANR	125819	Identifier	u		125718	1					
ANR	125820	Identifier	constant		125718	1					
ANR	125821	ExpressionStatement	value_node . op_type = IS_CONST	5573:2:165303:165332	125718	7	True				
ANR	125822	AssignmentExpression	value_node . op_type = IS_CONST		125718	0		=			
ANR	125823	MemberAccess	value_node . op_type		125718	0					
ANR	125824	Identifier	value_node		125718	0					
ANR	125825	Identifier	op_type		125718	1					
ANR	125826	Identifier	IS_CONST		125718	1					
ANR	125827	ExpressionStatement	"zend_const_expr_to_zval ( value_zv , value_ast )"	5574:2:165336:165380	125718	8	True				
ANR	125828	CallExpression	"zend_const_expr_to_zval ( value_zv , value_ast )"		125718	0					
ANR	125829	Callee	zend_const_expr_to_zval		125718	0					
ANR	125830	Identifier	zend_const_expr_to_zval		125718	0					
ANR	125831	ArgumentList	value_zv		125718	1					
ANR	125832	Argument	value_zv		125718	0					
ANR	125833	Identifier	value_zv		125718	0					
ANR	125834	Argument	value_ast		125718	1					
ANR	125835	Identifier	value_ast		125718	0					
ANR	125836	IfStatement	"if ( zend_lookup_reserved_const ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) ) )"		125718	9					
ANR	125837	Condition	"zend_lookup_reserved_const ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"	5576:6:165389:165446	125718	0	True				
ANR	125838	CallExpression	"zend_lookup_reserved_const ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) )"		125718	0					
ANR	125839	Callee	zend_lookup_reserved_const		125718	0					
ANR	125840	Identifier	zend_lookup_reserved_const		125718	0					
ANR	125841	ArgumentList	ZSTR_VAL ( name )		125718	1					
ANR	125842	Argument	ZSTR_VAL ( name )		125718	0					
ANR	125843	CallExpression	ZSTR_VAL ( name )		125718	0					
ANR	125844	Callee	ZSTR_VAL		125718	0					
ANR	125845	Identifier	ZSTR_VAL		125718	0					
ANR	125846	ArgumentList	name		125718	1					
ANR	125847	Argument	name		125718	0					
ANR	125848	Identifier	name		125718	0					
ANR	125849	Argument	ZSTR_LEN ( name )		125718	1					
ANR	125850	CallExpression	ZSTR_LEN ( name )		125718	0					
ANR	125851	Callee	ZSTR_LEN		125718	0					
ANR	125852	Identifier	ZSTR_LEN		125718	0					
ANR	125853	ArgumentList	name		125718	1					
ANR	125854	Argument	name		125718	0					
ANR	125855	Identifier	name		125718	0					
ANR	125856	CompoundStatement		17:66:532:532	125718	1					
ANR	125857	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare constant '%s'"" , ZSTR_VAL ( name ) )"	5577:3:165454:165540	125718	0	True				
ANR	125858	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot redeclare constant '%s'"" , ZSTR_VAL ( name ) )"		125718	0					
ANR	125859	Callee	zend_error_noreturn		125718	0					
ANR	125860	Identifier	zend_error_noreturn		125718	0					
ANR	125861	ArgumentList	E_COMPILE_ERROR		125718	1					
ANR	125862	Argument	E_COMPILE_ERROR		125718	0					
ANR	125863	Identifier	E_COMPILE_ERROR		125718	0					
ANR	125864	Argument	"""Cannot redeclare constant '%s'"""		125718	1					
ANR	125865	PrimaryExpression	"""Cannot redeclare constant '%s'"""		125718	0					
ANR	125866	Argument	ZSTR_VAL ( name )		125718	2					
ANR	125867	CallExpression	ZSTR_VAL ( name )		125718	0					
ANR	125868	Callee	ZSTR_VAL		125718	0					
ANR	125869	Identifier	ZSTR_VAL		125718	0					
ANR	125870	ArgumentList	name		125718	1					
ANR	125871	Argument	name		125718	0					
ANR	125872	Identifier	name		125718	0					
ANR	125873	ExpressionStatement	name = zend_prefix_with_ns ( name )	5580:2:165549:165581	125718	10	True				
ANR	125874	AssignmentExpression	name = zend_prefix_with_ns ( name )		125718	0		=			
ANR	125875	Identifier	name		125718	0					
ANR	125876	CallExpression	zend_prefix_with_ns ( name )		125718	1					
ANR	125877	Callee	zend_prefix_with_ns		125718	0					
ANR	125878	Identifier	zend_prefix_with_ns		125718	0					
ANR	125879	ArgumentList	name		125718	1					
ANR	125880	Argument	name		125718	0					
ANR	125881	Identifier	name		125718	0					
ANR	125882	ExpressionStatement	name = zend_new_interned_string ( name )	5581:2:165585:165622	125718	11	True				
ANR	125883	AssignmentExpression	name = zend_new_interned_string ( name )		125718	0		=			
ANR	125884	Identifier	name		125718	0					
ANR	125885	CallExpression	zend_new_interned_string ( name )		125718	1					
ANR	125886	Callee	zend_new_interned_string		125718	0					
ANR	125887	Identifier	zend_new_interned_string		125718	0					
ANR	125888	ArgumentList	name		125718	1					
ANR	125889	Argument	name		125718	0					
ANR	125890	Identifier	name		125718	0					
ANR	125891	IfStatement	"if ( FC ( imports_const ) && ( import_name = zend_hash_find_ptr ( FC ( imports_const ) , name ) ) )"		125718	12					
ANR	125892	Condition	"FC ( imports_const ) && ( import_name = zend_hash_find_ptr ( FC ( imports_const ) , name ) )"	5583:6:165631:165713	125718	0	True				
ANR	125893	AndExpression	"FC ( imports_const ) && ( import_name = zend_hash_find_ptr ( FC ( imports_const ) , name ) )"		125718	0		&&			
ANR	125894	CallExpression	FC ( imports_const )		125718	0					
ANR	125895	Callee	FC		125718	0					
ANR	125896	Identifier	FC		125718	0					
ANR	125897	ArgumentList	imports_const		125718	1					
ANR	125898	Argument	imports_const		125718	0					
ANR	125899	Identifier	imports_const		125718	0					
ANR	125900	AssignmentExpression	"import_name = zend_hash_find_ptr ( FC ( imports_const ) , name )"		125718	1		=			
ANR	125901	Identifier	import_name		125718	0					
ANR	125902	CallExpression	"zend_hash_find_ptr ( FC ( imports_const ) , name )"		125718	1					
ANR	125903	Callee	zend_hash_find_ptr		125718	0					
ANR	125904	Identifier	zend_hash_find_ptr		125718	0					
ANR	125905	ArgumentList	FC ( imports_const )		125718	1					
ANR	125906	Argument	FC ( imports_const )		125718	0					
ANR	125907	CallExpression	FC ( imports_const )		125718	0					
ANR	125908	Callee	FC		125718	0					
ANR	125909	Identifier	FC		125718	0					
ANR	125910	ArgumentList	imports_const		125718	1					
ANR	125911	Argument	imports_const		125718	0					
ANR	125912	Identifier	imports_const		125718	0					
ANR	125913	Argument	name		125718	1					
ANR	125914	Identifier	name		125718	0					
ANR	125915	CompoundStatement		26:4:802:802	125718	1					
ANR	125916	IfStatement	"if ( ! zend_string_equals ( import_name , name ) )"		125718	0					
ANR	125917	Condition	"! zend_string_equals ( import_name , name )"	5586:7:165728:165765	125718	0	True				
ANR	125918	UnaryOperationExpression	"! zend_string_equals ( import_name , name )"		125718	0					
ANR	125919	UnaryOperator	!		125718	0					
ANR	125920	CallExpression	"zend_string_equals ( import_name , name )"		125718	1					
ANR	125921	Callee	zend_string_equals		125718	0					
ANR	125922	Identifier	zend_string_equals		125718	0					
ANR	125923	ArgumentList	import_name		125718	1					
ANR	125924	Argument	import_name		125718	0					
ANR	125925	Identifier	import_name		125718	0					
ANR	125926	Argument	name		125718	1					
ANR	125927	Identifier	name		125718	0					
ANR	125928	CompoundStatement		27:47:851:851	125718	1					
ANR	125929	Statement	zend_error_noreturn	5587:4:165774:165792	125718	0	True				
ANR	125930	Statement	(	5587:23:165793:165793	125718	1	True				
ANR	125931	Statement	E_COMPILE_ERROR	5587:24:165794:165808	125718	2	True				
ANR	125932	Statement	","	5587:39:165809:165809	125718	3	True				
ANR	125933	Statement	"""Cannot declare const %s because """	5587:41:165811:165844	125718	4	True				
ANR	125934	Statement	"""the name is already in use"""	5588:5:165851:165878	125718	5	True				
ANR	125935	Statement	","	5588:33:165879:165879	125718	6	True				
ANR	125936	Statement	ZSTR_VAL	5588:35:165881:165888	125718	7	True				
ANR	125937	Statement	(	5588:43:165889:165889	125718	8	True				
ANR	125938	Statement	name	5588:44:165890:165893	125718	9	True				
ANR	125939	Statement	)	5588:48:165894:165894	125718	10	True				
ANR	125940	Statement	)	5588:49:165895:165895	125718	11	True				
ANR	125941	ExpressionStatement		5588:50:165896:165896	125718	12	True				
ANR	125942	ExpressionStatement	name_node . op_type = IS_CONST	5592:2:165910:165938	125718	13	True				
ANR	125943	AssignmentExpression	name_node . op_type = IS_CONST		125718	0		=			
ANR	125944	MemberAccess	name_node . op_type		125718	0					
ANR	125945	Identifier	name_node		125718	0					
ANR	125946	Identifier	op_type		125718	1					
ANR	125947	Identifier	IS_CONST		125718	1					
ANR	125948	ExpressionStatement	"ZVAL_STR ( & name_node . u . constant , name )"	5593:2:165942:165979	125718	14	True				
ANR	125949	CallExpression	"ZVAL_STR ( & name_node . u . constant , name )"		125718	0					
ANR	125950	Callee	ZVAL_STR		125718	0					
ANR	125951	Identifier	ZVAL_STR		125718	0					
ANR	125952	ArgumentList	& name_node . u . constant		125718	1					
ANR	125953	Argument	& name_node . u . constant		125718	0					
ANR	125954	UnaryOperationExpression	& name_node . u . constant		125718	0					
ANR	125955	UnaryOperator	&		125718	0					
ANR	125956	MemberAccess	name_node . u . constant		125718	1					
ANR	125957	MemberAccess	name_node . u		125718	0					
ANR	125958	Identifier	name_node		125718	0					
ANR	125959	Identifier	u		125718	1					
ANR	125960	Identifier	constant		125718	1					
ANR	125961	Argument	name		125718	1					
ANR	125962	Identifier	name		125718	0					
ANR	125963	ExpressionStatement	"zend_emit_op ( NULL , ZEND_DECLARE_CONST , & name_node , & value_node )"	5595:2:165984:166047	125718	15	True				
ANR	125964	CallExpression	"zend_emit_op ( NULL , ZEND_DECLARE_CONST , & name_node , & value_node )"		125718	0					
ANR	125965	Callee	zend_emit_op		125718	0					
ANR	125966	Identifier	zend_emit_op		125718	0					
ANR	125967	ArgumentList	NULL		125718	1					
ANR	125968	Argument	NULL		125718	0					
ANR	125969	Identifier	NULL		125718	0					
ANR	125970	Argument	ZEND_DECLARE_CONST		125718	1					
ANR	125971	Identifier	ZEND_DECLARE_CONST		125718	0					
ANR	125972	Argument	& name_node		125718	2					
ANR	125973	UnaryOperationExpression	& name_node		125718	0					
ANR	125974	UnaryOperator	&		125718	0					
ANR	125975	Identifier	name_node		125718	1					
ANR	125976	Argument	& value_node		125718	3					
ANR	125977	UnaryOperationExpression	& value_node		125718	0					
ANR	125978	UnaryOperator	&		125718	0					
ANR	125979	Identifier	value_node		125718	1					
ANR	125980	ExpressionStatement	"zend_hash_add_ptr ( & CG ( const_filenames ) , name , CG ( compiled_filename ) )"	5597:2:166052:166120	125718	16	True				
ANR	125981	CallExpression	"zend_hash_add_ptr ( & CG ( const_filenames ) , name , CG ( compiled_filename ) )"		125718	0					
ANR	125982	Callee	zend_hash_add_ptr		125718	0					
ANR	125983	Identifier	zend_hash_add_ptr		125718	0					
ANR	125984	ArgumentList	& CG ( const_filenames )		125718	1					
ANR	125985	Argument	& CG ( const_filenames )		125718	0					
ANR	125986	UnaryOperationExpression	& CG ( const_filenames )		125718	0					
ANR	125987	UnaryOperator	&		125718	0					
ANR	125988	CallExpression	CG ( const_filenames )		125718	1					
ANR	125989	Callee	CG		125718	0					
ANR	125990	Identifier	CG		125718	0					
ANR	125991	ArgumentList	const_filenames		125718	1					
ANR	125992	Argument	const_filenames		125718	0					
ANR	125993	Identifier	const_filenames		125718	0					
ANR	125994	Argument	name		125718	1					
ANR	125995	Identifier	name		125718	0					
ANR	125996	Argument	CG ( compiled_filename )		125718	2					
ANR	125997	CallExpression	CG ( compiled_filename )		125718	0					
ANR	125998	Callee	CG		125718	0					
ANR	125999	Identifier	CG		125718	0					
ANR	126000	ArgumentList	compiled_filename		125718	1					
ANR	126001	Argument	compiled_filename		125718	0					
ANR	126002	Identifier	compiled_filename		125718	0					
ANR	126003	ReturnType	void		125718	1					
ANR	126004	Identifier	zend_compile_const_decl		125718	2					
ANR	126005	ParameterList	zend_ast * ast		125718	3					
ANR	126006	Parameter	zend_ast * ast	5559:29:164891:164903	125718	0	True				
ANR	126007	ParameterType	zend_ast *		125718	0					
ANR	126008	Identifier	ast		125718	1					
ANR	126009	CFGEntryNode	ENTRY		125718		True				
ANR	126010	CFGExitNode	EXIT		125718		True				
ANR	126011	Symbol	* * const_ast		125718						
ANR	126012	Symbol	ZEND_DECLARE_CONST		125718						
ANR	126013	Symbol	ast		125718						
ANR	126014	Symbol	E_COMPILE_ERROR		125718						
ANR	126015	Symbol	& value_node . u		125718						
ANR	126016	Symbol	& CG		125718						
ANR	126017	Symbol	& name_node		125718						
ANR	126018	Symbol	& value_node . u . constant		125718						
ANR	126019	Symbol	zend_hash_find_ptr		125718						
ANR	126020	Symbol	IS_CONST		125718						
ANR	126021	Symbol	NULL		125718						
ANR	126022	Symbol	const_filenames		125718						
ANR	126023	Symbol	name_node . u		125718						
ANR	126024	Symbol	imports_const		125718						
ANR	126025	Symbol	list		125718						
ANR	126026	Symbol	zend_lookup_reserved_const		125718						
ANR	126027	Symbol	* const_ast		125718						
ANR	126028	Symbol	name		125718						
ANR	126029	Symbol	value_zv		125718						
ANR	126030	Symbol	& name_node . u . constant		125718						
ANR	126031	Symbol	* list -> child		125718						
ANR	126032	Symbol	FC		125718						
ANR	126033	Symbol	list -> children		125718						
ANR	126034	Symbol	name_node		125718						
ANR	126035	Symbol	const_ast -> child		125718						
ANR	126036	Symbol	zend_string_equals		125718						
ANR	126037	Symbol	zend_prefix_with_ns		125718						
ANR	126038	Symbol	* * list		125718						
ANR	126039	Symbol	zend_ast_get_str		125718						
ANR	126040	Symbol	value_ast		125718						
ANR	126041	Symbol	value_node		125718						
ANR	126042	Symbol	value_node . op_type		125718						
ANR	126043	Symbol	& name_node . u		125718						
ANR	126044	Symbol	* const_ast -> child		125718						
ANR	126045	Symbol	list -> child		125718						
ANR	126046	Symbol	CG		125718						
ANR	126047	Symbol	i		125718						
ANR	126048	Symbol	import_name		125718						
ANR	126049	Symbol	compiled_filename		125718						
ANR	126050	Symbol	ZSTR_VAL		125718						
ANR	126051	Symbol	zend_ast_get_list		125718						
ANR	126052	Symbol	* i		125718						
ANR	126053	Symbol	zend_new_interned_string		125718						
ANR	126054	Symbol	name_node . op_type		125718						
ANR	126055	Symbol	* list		125718						
ANR	126056	Symbol	const_ast		125718						
ANR	126057	Symbol	& value_node		125718						
ANR	126058	Symbol	name_ast		125718						
ANR	126059	Symbol	ZSTR_LEN		125718						
ANR	126060	Symbol	value_node . u		125718						
ANR	126061	Function	zend_compile_namespace	5602:0:166137:168242							
ANR	126062	FunctionDef	zend_compile_namespace (zend_ast * ast)		126061	0					
ANR	126063	CompoundStatement		5603:0:166190:168242	126061	0					
ANR	126064	IdentifierDeclStatement	zend_ast * name_ast = ast -> child [ 0 ] ;	5604:1:166193:166227	126061	0	True				
ANR	126065	IdentifierDecl	* name_ast = ast -> child [ 0 ]		126061	0					
ANR	126066	IdentifierDeclType	zend_ast *		126061	0					
ANR	126067	Identifier	name_ast		126061	1					
ANR	126068	AssignmentExpression	* name_ast = ast -> child [ 0 ]		126061	2		=			
ANR	126069	Identifier	name_ast		126061	0					
ANR	126070	ArrayIndexing	ast -> child [ 0 ]		126061	1					
ANR	126071	PtrMemberAccess	ast -> child		126061	0					
ANR	126072	Identifier	ast		126061	0					
ANR	126073	Identifier	child		126061	1					
ANR	126074	PrimaryExpression	0		126061	1					
ANR	126075	IdentifierDeclStatement	zend_ast * stmt_ast = ast -> child [ 1 ] ;	5605:1:166230:166264	126061	1	True				
ANR	126076	IdentifierDecl	* stmt_ast = ast -> child [ 1 ]		126061	0					
ANR	126077	IdentifierDeclType	zend_ast *		126061	0					
ANR	126078	Identifier	stmt_ast		126061	1					
ANR	126079	AssignmentExpression	* stmt_ast = ast -> child [ 1 ]		126061	2		=			
ANR	126080	Identifier	stmt_ast		126061	0					
ANR	126081	ArrayIndexing	ast -> child [ 1 ]		126061	1					
ANR	126082	PtrMemberAccess	ast -> child		126061	0					
ANR	126083	Identifier	ast		126061	0					
ANR	126084	Identifier	child		126061	1					
ANR	126085	PrimaryExpression	1		126061	1					
ANR	126086	IdentifierDeclStatement	zend_string * name ;	5606:1:166267:166284	126061	2	True				
ANR	126087	IdentifierDecl	* name		126061	0					
ANR	126088	IdentifierDeclType	zend_string *		126061	0					
ANR	126089	Identifier	name		126061	1					
ANR	126090	IdentifierDeclStatement	zend_bool with_bracket = stmt_ast != NULL ;	5607:1:166287:166328	126061	3	True				
ANR	126091	IdentifierDecl	with_bracket = stmt_ast != NULL		126061	0					
ANR	126092	IdentifierDeclType	zend_bool		126061	0					
ANR	126093	Identifier	with_bracket		126061	1					
ANR	126094	AssignmentExpression	with_bracket = stmt_ast != NULL		126061	2		=			
ANR	126095	Identifier	with_bracket		126061	0					
ANR	126096	EqualityExpression	stmt_ast != NULL		126061	1		!=			
ANR	126097	Identifier	stmt_ast		126061	0					
ANR	126098	Identifier	NULL		126061	1					
ANR	126099	IfStatement	if ( ! FC ( has_bracketed_namespaces ) )		126061	4					
ANR	126100	Condition	! FC ( has_bracketed_namespaces )	5610:5:166396:166424	126061	0	True				
ANR	126101	UnaryOperationExpression	! FC ( has_bracketed_namespaces )		126061	0					
ANR	126102	UnaryOperator	!		126061	0					
ANR	126103	CallExpression	FC ( has_bracketed_namespaces )		126061	1					
ANR	126104	Callee	FC		126061	0					
ANR	126105	Identifier	FC		126061	0					
ANR	126106	ArgumentList	has_bracketed_namespaces		126061	1					
ANR	126107	Argument	has_bracketed_namespaces		126061	0					
ANR	126108	Identifier	has_bracketed_namespaces		126061	0					
ANR	126109	CompoundStatement		8:36:236:236	126061	1					
ANR	126110	IfStatement	if ( FC ( current_namespace ) )		126061	0					
ANR	126111	Condition	FC ( current_namespace )	5611:6:166435:166455	126061	0	True				
ANR	126112	CallExpression	FC ( current_namespace )		126061	0					
ANR	126113	Callee	FC		126061	0					
ANR	126114	Identifier	FC		126061	0					
ANR	126115	ArgumentList	current_namespace		126061	1					
ANR	126116	Argument	current_namespace		126061	0					
ANR	126117	Identifier	current_namespace		126061	0					
ANR	126118	CompoundStatement		9:29:267:267	126061	1					
ANR	126119	IfStatement	if ( with_bracket )		126061	0					
ANR	126120	Condition	with_bracket	5613:7:166525:166536	126061	0	True				
ANR	126121	Identifier	with_bracket		126061	0					
ANR	126122	CompoundStatement		11:21:348:348	126061	1					
ANR	126123	Statement	zend_error_noreturn	5614:4:166545:166563	126061	0	True				
ANR	126124	Statement	(	5614:23:166564:166564	126061	1	True				
ANR	126125	Statement	E_COMPILE_ERROR	5614:24:166565:166579	126061	2	True				
ANR	126126	Statement	","	5614:39:166580:166580	126061	3	True				
ANR	126127	Statement	"""Cannot mix bracketed namespace declarations """	5614:41:166582:166627	126061	4	True				
ANR	126128	Statement	"""with unbracketed namespace declarations"""	5615:5:166634:166674	126061	5	True				
ANR	126129	Statement	)	5615:46:166675:166675	126061	6	True				
ANR	126130	ExpressionStatement		5615:47:166676:166676	126061	7	True				
ANR	126131	ElseStatement	else		126061	0					
ANR	126132	CompoundStatement		16:8:504:504	126061	0					
ANR	126133	IfStatement	if ( ! with_bracket )		126061	0					
ANR	126134	Condition	! with_bracket	5620:6:166758:166770	126061	0	True				
ANR	126135	UnaryOperationExpression	! with_bracket		126061	0					
ANR	126136	UnaryOperator	!		126061	0					
ANR	126137	Identifier	with_bracket		126061	1					
ANR	126138	CompoundStatement		18:21:582:582	126061	1					
ANR	126139	Statement	zend_error_noreturn	5621:3:166778:166796	126061	0	True				
ANR	126140	Statement	(	5621:22:166797:166797	126061	1	True				
ANR	126141	Statement	E_COMPILE_ERROR	5621:23:166798:166812	126061	2	True				
ANR	126142	Statement	","	5621:38:166813:166813	126061	3	True				
ANR	126143	Statement	"""Cannot mix bracketed namespace declarations """	5621:40:166815:166860	126061	4	True				
ANR	126144	Statement	"""with unbracketed namespace declarations"""	5622:4:166866:166906	126061	5	True				
ANR	126145	Statement	)	5622:45:166907:166907	126061	6	True				
ANR	126146	ExpressionStatement		5622:46:166908:166908	126061	7	True				
ANR	126147	ElseStatement	else		126061	0					
ANR	126148	IfStatement	if ( FC ( current_namespace ) || FC ( in_namespace ) )		126061	0					
ANR	126149	Condition	FC ( current_namespace ) || FC ( in_namespace )	5623:13:166923:166963	126061	0	True				
ANR	126150	OrExpression	FC ( current_namespace ) || FC ( in_namespace )		126061	0		||			
ANR	126151	CallExpression	FC ( current_namespace )		126061	0					
ANR	126152	Callee	FC		126061	0					
ANR	126153	Identifier	FC		126061	0					
ANR	126154	ArgumentList	current_namespace		126061	1					
ANR	126155	Argument	current_namespace		126061	0					
ANR	126156	Identifier	current_namespace		126061	0					
ANR	126157	CallExpression	FC ( in_namespace )		126061	1					
ANR	126158	Callee	FC		126061	0					
ANR	126159	Identifier	FC		126061	0					
ANR	126160	ArgumentList	in_namespace		126061	1					
ANR	126161	Argument	in_namespace		126061	0					
ANR	126162	Identifier	in_namespace		126061	0					
ANR	126163	CompoundStatement		21:56:775:775	126061	1					
ANR	126164	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Namespace declarations cannot be nested"" )"	5624:3:166971:167050	126061	0	True				
ANR	126165	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Namespace declarations cannot be nested"" )"		126061	0					
ANR	126166	Callee	zend_error_noreturn		126061	0					
ANR	126167	Identifier	zend_error_noreturn		126061	0					
ANR	126168	ArgumentList	E_COMPILE_ERROR		126061	1					
ANR	126169	Argument	E_COMPILE_ERROR		126061	0					
ANR	126170	Identifier	E_COMPILE_ERROR		126061	0					
ANR	126171	Argument	"""Namespace declarations cannot be nested"""		126061	1					
ANR	126172	PrimaryExpression	"""Namespace declarations cannot be nested"""		126061	0					
ANR	126173	IfStatement	if ( ( ( ! with_bracket && ! FC ( current_namespace ) ) || ( with_bracket && ! FC ( has_bracketed_namespaces ) ) ) && CG ( active_op_array ) -> last > 0 )		126061	5					
ANR	126174	Condition	( ( ! with_bracket && ! FC ( current_namespace ) ) || ( with_bracket && ! FC ( has_bracketed_namespaces ) ) ) && CG ( active_op_array ) -> last > 0	5628:5:167065:167194	126061	0	True				
ANR	126175	AndExpression	( ( ! with_bracket && ! FC ( current_namespace ) ) || ( with_bracket && ! FC ( has_bracketed_namespaces ) ) ) && CG ( active_op_array ) -> last > 0		126061	0		&&			
ANR	126176	OrExpression	( ! with_bracket && ! FC ( current_namespace ) ) || ( with_bracket && ! FC ( has_bracketed_namespaces ) )		126061	0		||			
ANR	126177	AndExpression	! with_bracket && ! FC ( current_namespace )		126061	0		&&			
ANR	126178	UnaryOperationExpression	! with_bracket		126061	0					
ANR	126179	UnaryOperator	!		126061	0					
ANR	126180	Identifier	with_bracket		126061	1					
ANR	126181	UnaryOperationExpression	! FC ( current_namespace )		126061	1					
ANR	126182	UnaryOperator	!		126061	0					
ANR	126183	CallExpression	FC ( current_namespace )		126061	1					
ANR	126184	Callee	FC		126061	0					
ANR	126185	Identifier	FC		126061	0					
ANR	126186	ArgumentList	current_namespace		126061	1					
ANR	126187	Argument	current_namespace		126061	0					
ANR	126188	Identifier	current_namespace		126061	0					
ANR	126189	AndExpression	with_bracket && ! FC ( has_bracketed_namespaces )		126061	1		&&			
ANR	126190	Identifier	with_bracket		126061	0					
ANR	126191	UnaryOperationExpression	! FC ( has_bracketed_namespaces )		126061	1					
ANR	126192	UnaryOperator	!		126061	0					
ANR	126193	CallExpression	FC ( has_bracketed_namespaces )		126061	1					
ANR	126194	Callee	FC		126061	0					
ANR	126195	Identifier	FC		126061	0					
ANR	126196	ArgumentList	has_bracketed_namespaces		126061	1					
ANR	126197	Argument	has_bracketed_namespaces		126061	0					
ANR	126198	Identifier	has_bracketed_namespaces		126061	0					
ANR	126199	RelationalExpression	CG ( active_op_array ) -> last > 0		126061	1		>			
ANR	126200	PtrMemberAccess	CG ( active_op_array ) -> last		126061	0					
ANR	126201	CallExpression	CG ( active_op_array )		126061	0					
ANR	126202	Callee	CG		126061	0					
ANR	126203	Identifier	CG		126061	0					
ANR	126204	ArgumentList	active_op_array		126061	1					
ANR	126205	Argument	active_op_array		126061	0					
ANR	126206	Identifier	active_op_array		126061	0					
ANR	126207	Identifier	last		126061	1					
ANR	126208	PrimaryExpression	0		126061	1					
ANR	126209	CompoundStatement		30:2:1056:1096	126061	1					
ANR	126210	IdentifierDeclStatement	uint32_t num = CG ( active_op_array ) -> last ;	5632:2:167247:167287	126061	0	True				
ANR	126211	IdentifierDecl	num = CG ( active_op_array ) -> last		126061	0					
ANR	126212	IdentifierDeclType	uint32_t		126061	0					
ANR	126213	Identifier	num		126061	1					
ANR	126214	AssignmentExpression	num = CG ( active_op_array ) -> last		126061	2		=			
ANR	126215	Identifier	num		126061	0					
ANR	126216	PtrMemberAccess	CG ( active_op_array ) -> last		126061	1					
ANR	126217	CallExpression	CG ( active_op_array )		126061	0					
ANR	126218	Callee	CG		126061	0					
ANR	126219	Identifier	CG		126061	0					
ANR	126220	ArgumentList	active_op_array		126061	1					
ANR	126221	Argument	active_op_array		126061	0					
ANR	126222	Identifier	active_op_array		126061	0					
ANR	126223	Identifier	last		126061	1					
ANR	126224	WhileStatement	while ( num > 0 && ( CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT || CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS ) )		126061	1					
ANR	126225	Condition	num > 0 && ( CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT || CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS )	5633:9:167298:167448	126061	0	True				
ANR	126226	AndExpression	num > 0 && ( CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT || CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS )		126061	0		&&			
ANR	126227	RelationalExpression	num > 0		126061	0		>			
ANR	126228	Identifier	num		126061	0					
ANR	126229	PrimaryExpression	0		126061	1					
ANR	126230	OrExpression	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT || CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS		126061	1		||			
ANR	126231	EqualityExpression	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_EXT_STMT		126061	0		==			
ANR	126232	MemberAccess	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode		126061	0					
ANR	126233	ArrayIndexing	CG ( active_op_array ) -> opcodes [ num - 1 ]		126061	0					
ANR	126234	PtrMemberAccess	CG ( active_op_array ) -> opcodes		126061	0					
ANR	126235	CallExpression	CG ( active_op_array )		126061	0					
ANR	126236	Callee	CG		126061	0					
ANR	126237	Identifier	CG		126061	0					
ANR	126238	ArgumentList	active_op_array		126061	1					
ANR	126239	Argument	active_op_array		126061	0					
ANR	126240	Identifier	active_op_array		126061	0					
ANR	126241	Identifier	opcodes		126061	1					
ANR	126242	AdditiveExpression	num - 1		126061	1		-			
ANR	126243	Identifier	num		126061	0					
ANR	126244	PrimaryExpression	1		126061	1					
ANR	126245	Identifier	opcode		126061	1					
ANR	126246	Identifier	ZEND_EXT_STMT		126061	1					
ANR	126247	EqualityExpression	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode == ZEND_TICKS		126061	1		==			
ANR	126248	MemberAccess	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode		126061	0					
ANR	126249	ArrayIndexing	CG ( active_op_array ) -> opcodes [ num - 1 ]		126061	0					
ANR	126250	PtrMemberAccess	CG ( active_op_array ) -> opcodes		126061	0					
ANR	126251	CallExpression	CG ( active_op_array )		126061	0					
ANR	126252	Callee	CG		126061	0					
ANR	126253	Identifier	CG		126061	0					
ANR	126254	ArgumentList	active_op_array		126061	1					
ANR	126255	Argument	active_op_array		126061	0					
ANR	126256	Identifier	active_op_array		126061	0					
ANR	126257	Identifier	opcodes		126061	1					
ANR	126258	AdditiveExpression	num - 1		126061	1		-			
ANR	126259	Identifier	num		126061	0					
ANR	126260	PrimaryExpression	1		126061	1					
ANR	126261	Identifier	opcode		126061	1					
ANR	126262	Identifier	ZEND_TICKS		126061	1					
ANR	126263	CompoundStatement		33:69:1260:1260	126061	1					
ANR	126264	ExpressionStatement	-- num	5636:3:167456:167461	126061	0	True				
ANR	126265	UnaryExpression	-- num		126061	0					
ANR	126266	IncDec	--		126061	0					
ANR	126267	Identifier	num		126061	1					
ANR	126268	IfStatement	if ( num > 0 )		126061	2					
ANR	126269	Condition	num > 0	5638:6:167473:167479	126061	0	True				
ANR	126270	RelationalExpression	num > 0		126061	0		>			
ANR	126271	Identifier	num		126061	0					
ANR	126272	PrimaryExpression	0		126061	1					
ANR	126273	CompoundStatement		36:15:1291:1291	126061	1					
ANR	126274	Statement	zend_error_noreturn	5639:3:167487:167505	126061	0	True				
ANR	126275	Statement	(	5639:22:167506:167506	126061	1	True				
ANR	126276	Statement	E_COMPILE_ERROR	5639:23:167507:167521	126061	2	True				
ANR	126277	Statement	","	5639:38:167522:167522	126061	3	True				
ANR	126278	Statement	"""Namespace declaration statement has to be """	5639:40:167524:167567	126061	4	True				
ANR	126279	Statement	"""the very first statement or after any declare call in the script"""	5640:4:167573:167638	126061	5	True				
ANR	126280	Statement	)	5640:70:167639:167639	126061	6	True				
ANR	126281	ExpressionStatement		5640:71:167640:167640	126061	7	True				
ANR	126282	IfStatement	if ( FC ( current_namespace ) )		126061	6					
ANR	126283	Condition	FC ( current_namespace )	5644:5:167655:167675	126061	0	True				
ANR	126284	CallExpression	FC ( current_namespace )		126061	0					
ANR	126285	Callee	FC		126061	0					
ANR	126286	Identifier	FC		126061	0					
ANR	126287	ArgumentList	current_namespace		126061	1					
ANR	126288	Argument	current_namespace		126061	0					
ANR	126289	Identifier	current_namespace		126061	0					
ANR	126290	CompoundStatement		42:28:1487:1487	126061	1					
ANR	126291	ExpressionStatement	zend_string_release ( FC ( current_namespace ) )	5645:2:167682:167724	126061	0	True				
ANR	126292	CallExpression	zend_string_release ( FC ( current_namespace ) )		126061	0					
ANR	126293	Callee	zend_string_release		126061	0					
ANR	126294	Identifier	zend_string_release		126061	0					
ANR	126295	ArgumentList	FC ( current_namespace )		126061	1					
ANR	126296	Argument	FC ( current_namespace )		126061	0					
ANR	126297	CallExpression	FC ( current_namespace )		126061	0					
ANR	126298	Callee	FC		126061	0					
ANR	126299	Identifier	FC		126061	0					
ANR	126300	ArgumentList	current_namespace		126061	1					
ANR	126301	Argument	current_namespace		126061	0					
ANR	126302	Identifier	current_namespace		126061	0					
ANR	126303	IfStatement	if ( name_ast )		126061	7					
ANR	126304	Condition	name_ast	5648:5:167735:167742	126061	0	True				
ANR	126305	Identifier	name_ast		126061	0					
ANR	126306	CompoundStatement		46:15:1554:1554	126061	1					
ANR	126307	ExpressionStatement	name = zend_ast_get_str ( name_ast )	5649:2:167749:167782	126061	0	True				
ANR	126308	AssignmentExpression	name = zend_ast_get_str ( name_ast )		126061	0		=			
ANR	126309	Identifier	name		126061	0					
ANR	126310	CallExpression	zend_ast_get_str ( name_ast )		126061	1					
ANR	126311	Callee	zend_ast_get_str		126061	0					
ANR	126312	Identifier	zend_ast_get_str		126061	0					
ANR	126313	ArgumentList	name_ast		126061	1					
ANR	126314	Argument	name_ast		126061	0					
ANR	126315	Identifier	name_ast		126061	0					
ANR	126316	IfStatement	if ( ZEND_FETCH_CLASS_DEFAULT != zend_get_class_fetch_type ( name ) )		126061	1					
ANR	126317	Condition	ZEND_FETCH_CLASS_DEFAULT != zend_get_class_fetch_type ( name )	5651:6:167791:167849	126061	0	True				
ANR	126318	EqualityExpression	ZEND_FETCH_CLASS_DEFAULT != zend_get_class_fetch_type ( name )		126061	0		!=			
ANR	126319	Identifier	ZEND_FETCH_CLASS_DEFAULT		126061	0					
ANR	126320	CallExpression	zend_get_class_fetch_type ( name )		126061	1					
ANR	126321	Callee	zend_get_class_fetch_type		126061	0					
ANR	126322	Identifier	zend_get_class_fetch_type		126061	0					
ANR	126323	ArgumentList	name		126061	1					
ANR	126324	Argument	name		126061	0					
ANR	126325	Identifier	name		126061	0					
ANR	126326	CompoundStatement		49:67:1661:1661	126061	1					
ANR	126327	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as namespace name"" , ZSTR_VAL ( name ) )"	5652:3:167857:167946	126061	0	True				
ANR	126328	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use '%s' as namespace name"" , ZSTR_VAL ( name ) )"		126061	0					
ANR	126329	Callee	zend_error_noreturn		126061	0					
ANR	126330	Identifier	zend_error_noreturn		126061	0					
ANR	126331	ArgumentList	E_COMPILE_ERROR		126061	1					
ANR	126332	Argument	E_COMPILE_ERROR		126061	0					
ANR	126333	Identifier	E_COMPILE_ERROR		126061	0					
ANR	126334	Argument	"""Cannot use '%s' as namespace name"""		126061	1					
ANR	126335	PrimaryExpression	"""Cannot use '%s' as namespace name"""		126061	0					
ANR	126336	Argument	ZSTR_VAL ( name )		126061	2					
ANR	126337	CallExpression	ZSTR_VAL ( name )		126061	0					
ANR	126338	Callee	ZSTR_VAL		126061	0					
ANR	126339	Identifier	ZSTR_VAL		126061	0					
ANR	126340	ArgumentList	name		126061	1					
ANR	126341	Argument	name		126061	0					
ANR	126342	Identifier	name		126061	0					
ANR	126343	ExpressionStatement	FC ( current_namespace ) = zend_string_copy ( name )	5655:2:167955:168001	126061	2	True				
ANR	126344	AssignmentExpression	FC ( current_namespace ) = zend_string_copy ( name )		126061	0		=			
ANR	126345	CallExpression	FC ( current_namespace )		126061	0					
ANR	126346	Callee	FC		126061	0					
ANR	126347	Identifier	FC		126061	0					
ANR	126348	ArgumentList	current_namespace		126061	1					
ANR	126349	Argument	current_namespace		126061	0					
ANR	126350	Identifier	current_namespace		126061	0					
ANR	126351	CallExpression	zend_string_copy ( name )		126061	1					
ANR	126352	Callee	zend_string_copy		126061	0					
ANR	126353	Identifier	zend_string_copy		126061	0					
ANR	126354	ArgumentList	name		126061	1					
ANR	126355	Argument	name		126061	0					
ANR	126356	Identifier	name		126061	0					
ANR	126357	ElseStatement	else		126061	0					
ANR	126358	CompoundStatement		54:8:1820:1820	126061	0					
ANR	126359	ExpressionStatement	FC ( current_namespace ) = NULL	5657:2:168015:168043	126061	0	True				
ANR	126360	AssignmentExpression	FC ( current_namespace ) = NULL		126061	0		=			
ANR	126361	CallExpression	FC ( current_namespace )		126061	0					
ANR	126362	Callee	FC		126061	0					
ANR	126363	Identifier	FC		126061	0					
ANR	126364	ArgumentList	current_namespace		126061	1					
ANR	126365	Argument	current_namespace		126061	0					
ANR	126366	Identifier	current_namespace		126061	0					
ANR	126367	Identifier	NULL		126061	1					
ANR	126368	ExpressionStatement	zend_reset_import_tables ( )	5660:1:168050:168076	126061	8	True				
ANR	126369	CallExpression	zend_reset_import_tables ( )		126061	0					
ANR	126370	Callee	zend_reset_import_tables		126061	0					
ANR	126371	Identifier	zend_reset_import_tables		126061	0					
ANR	126372	ArgumentList			126061	1					
ANR	126373	ExpressionStatement	FC ( in_namespace ) = 1	5662:1:168080:168100	126061	9	True				
ANR	126374	AssignmentExpression	FC ( in_namespace ) = 1		126061	0		=			
ANR	126375	CallExpression	FC ( in_namespace )		126061	0					
ANR	126376	Callee	FC		126061	0					
ANR	126377	Identifier	FC		126061	0					
ANR	126378	ArgumentList	in_namespace		126061	1					
ANR	126379	Argument	in_namespace		126061	0					
ANR	126380	Identifier	in_namespace		126061	0					
ANR	126381	PrimaryExpression	1		126061	1					
ANR	126382	IfStatement	if ( with_bracket )		126061	10					
ANR	126383	Condition	with_bracket	5663:5:168107:168118	126061	0	True				
ANR	126384	Identifier	with_bracket		126061	0					
ANR	126385	CompoundStatement		61:19:1930:1930	126061	1					
ANR	126386	ExpressionStatement	FC ( has_bracketed_namespaces ) = 1	5664:2:168125:168157	126061	0	True				
ANR	126387	AssignmentExpression	FC ( has_bracketed_namespaces ) = 1		126061	0		=			
ANR	126388	CallExpression	FC ( has_bracketed_namespaces )		126061	0					
ANR	126389	Callee	FC		126061	0					
ANR	126390	Identifier	FC		126061	0					
ANR	126391	ArgumentList	has_bracketed_namespaces		126061	1					
ANR	126392	Argument	has_bracketed_namespaces		126061	0					
ANR	126393	Identifier	has_bracketed_namespaces		126061	0					
ANR	126394	PrimaryExpression	1		126061	1					
ANR	126395	IfStatement	if ( stmt_ast )		126061	11					
ANR	126396	Condition	stmt_ast	5667:5:168168:168175	126061	0	True				
ANR	126397	Identifier	stmt_ast		126061	0					
ANR	126398	CompoundStatement		65:15:1987:1987	126061	1					
ANR	126399	ExpressionStatement	zend_compile_top_stmt ( stmt_ast )	5668:2:168182:168213	126061	0	True				
ANR	126400	CallExpression	zend_compile_top_stmt ( stmt_ast )		126061	0					
ANR	126401	Callee	zend_compile_top_stmt		126061	0					
ANR	126402	Identifier	zend_compile_top_stmt		126061	0					
ANR	126403	ArgumentList	stmt_ast		126061	1					
ANR	126404	Argument	stmt_ast		126061	0					
ANR	126405	Identifier	stmt_ast		126061	0					
ANR	126406	ExpressionStatement	zend_end_namespace ( )	5669:2:168217:168237	126061	1	True				
ANR	126407	CallExpression	zend_end_namespace ( )		126061	0					
ANR	126408	Callee	zend_end_namespace		126061	0					
ANR	126409	Identifier	zend_end_namespace		126061	0					
ANR	126410	ArgumentList			126061	1					
ANR	126411	ReturnType	void		126061	1					
ANR	126412	Identifier	zend_compile_namespace		126061	2					
ANR	126413	ParameterList	zend_ast * ast		126061	3					
ANR	126414	Parameter	zend_ast * ast	5602:28:166165:166177	126061	0	True				
ANR	126415	ParameterType	zend_ast *		126061	0					
ANR	126416	Identifier	ast		126061	1					
ANR	126417	CFGEntryNode	ENTRY		126061		True				
ANR	126418	CFGExitNode	EXIT		126061		True				
ANR	126419	Symbol	ZEND_FETCH_CLASS_DEFAULT		126061						
ANR	126420	Symbol	stmt_ast		126061						
ANR	126421	Symbol	ast		126061						
ANR	126422	Symbol	in_namespace		126061						
ANR	126423	Symbol	E_COMPILE_ERROR		126061						
ANR	126424	Symbol	num		126061						
ANR	126425	Symbol	* CG		126061						
ANR	126426	Symbol	CG ( active_op_array ) -> opcodes [ num - 1 ] . opcode		126061						
ANR	126427	Symbol	CG ( active_op_array ) -> opcodes		126061						
ANR	126428	Symbol	CG ( active_op_array ) -> last		126061						
ANR	126429	Symbol	* * CG		126061						
ANR	126430	Symbol	* ast		126061						
ANR	126431	Symbol	zend_ast_get_str		126061						
ANR	126432	Symbol	* * ast		126061						
ANR	126433	Symbol	with_bracket		126061						
ANR	126434	Symbol	ZEND_TICKS		126061						
ANR	126435	Symbol	zend_get_class_fetch_type		126061						
ANR	126436	Symbol	* CG ( active_op_array ) -> opcodes		126061						
ANR	126437	Symbol	NULL		126061						
ANR	126438	Symbol	CG		126061						
ANR	126439	Symbol	active_op_array		126061						
ANR	126440	Symbol	has_bracketed_namespaces		126061						
ANR	126441	Symbol	zend_string_copy		126061						
ANR	126442	Symbol	ZSTR_VAL		126061						
ANR	126443	Symbol	* num		126061						
ANR	126444	Symbol	ZEND_EXT_STMT		126061						
ANR	126445	Symbol	current_namespace		126061						
ANR	126446	Symbol	name_ast		126061						
ANR	126447	Symbol	name		126061						
ANR	126448	Symbol	* ast -> child		126061						
ANR	126449	Symbol	ast -> child		126061						
ANR	126450	Symbol	FC		126061						
ANR	126451	Function	zend_compile_halt_compiler	5674:0:168255:168939							
ANR	126452	FunctionDef	zend_compile_halt_compiler (zend_ast * ast)		126451	0					
ANR	126453	CompoundStatement		5675:0:168312:168939	126451	0					
ANR	126454	IdentifierDeclStatement	zend_ast * offset_ast = ast -> child [ 0 ] ;	5676:1:168315:168351	126451	0	True				
ANR	126455	IdentifierDecl	* offset_ast = ast -> child [ 0 ]		126451	0					
ANR	126456	IdentifierDeclType	zend_ast *		126451	0					
ANR	126457	Identifier	offset_ast		126451	1					
ANR	126458	AssignmentExpression	* offset_ast = ast -> child [ 0 ]		126451	2		=			
ANR	126459	Identifier	offset_ast		126451	0					
ANR	126460	ArrayIndexing	ast -> child [ 0 ]		126451	1					
ANR	126461	PtrMemberAccess	ast -> child		126451	0					
ANR	126462	Identifier	ast		126451	0					
ANR	126463	Identifier	child		126451	1					
ANR	126464	PrimaryExpression	0		126451	1					
ANR	126465	IdentifierDeclStatement	zend_long offset = Z_LVAL_P ( zend_ast_get_zval ( offset_ast ) ) ;	5677:1:168354:168412	126451	1	True				
ANR	126466	IdentifierDecl	offset = Z_LVAL_P ( zend_ast_get_zval ( offset_ast ) )		126451	0					
ANR	126467	IdentifierDeclType	zend_long		126451	0					
ANR	126468	Identifier	offset		126451	1					
ANR	126469	AssignmentExpression	offset = Z_LVAL_P ( zend_ast_get_zval ( offset_ast ) )		126451	2		=			
ANR	126470	Identifier	offset		126451	0					
ANR	126471	CallExpression	Z_LVAL_P ( zend_ast_get_zval ( offset_ast ) )		126451	1					
ANR	126472	Callee	Z_LVAL_P		126451	0					
ANR	126473	Identifier	Z_LVAL_P		126451	0					
ANR	126474	ArgumentList	zend_ast_get_zval ( offset_ast )		126451	1					
ANR	126475	Argument	zend_ast_get_zval ( offset_ast )		126451	0					
ANR	126476	CallExpression	zend_ast_get_zval ( offset_ast )		126451	0					
ANR	126477	Callee	zend_ast_get_zval		126451	0					
ANR	126478	Identifier	zend_ast_get_zval		126451	0					
ANR	126479	ArgumentList	offset_ast		126451	1					
ANR	126480	Argument	offset_ast		126451	0					
ANR	126481	Identifier	offset_ast		126451	0					
ANR	126482	IdentifierDeclStatement	"zend_string * filename , * name ;"	5679:1:168416:168444	126451	2	True				
ANR	126483	IdentifierDecl	* filename		126451	0					
ANR	126484	IdentifierDeclType	zend_string *		126451	0					
ANR	126485	Identifier	filename		126451	1					
ANR	126486	IdentifierDecl	* name		126451	1					
ANR	126487	IdentifierDeclType	zend_string *		126451	0					
ANR	126488	Identifier	name		126451	1					
ANR	126489	IdentifierDeclStatement	"const char const_name [ ] = ""__COMPILER_HALT_OFFSET__"" ;"	5680:1:168447:168499	126451	3	True				
ANR	126490	IdentifierDecl	"const_name [ ] = ""__COMPILER_HALT_OFFSET__"""		126451	0					
ANR	126491	IdentifierDeclType	const char [ ]		126451	0					
ANR	126492	Identifier	const_name		126451	1					
ANR	126493	AssignmentExpression	"const_name [ ] = ""__COMPILER_HALT_OFFSET__"""		126451	2		=			
ANR	126494	Identifier	const_name		126451	0					
ANR	126495	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		126451	1					
ANR	126496	IfStatement	if ( FC ( has_bracketed_namespaces ) && FC ( in_namespace ) )		126451	4					
ANR	126497	Condition	FC ( has_bracketed_namespaces ) && FC ( in_namespace )	5682:5:168507:168554	126451	0	True				
ANR	126498	AndExpression	FC ( has_bracketed_namespaces ) && FC ( in_namespace )		126451	0		&&			
ANR	126499	CallExpression	FC ( has_bracketed_namespaces )		126451	0					
ANR	126500	Callee	FC		126451	0					
ANR	126501	Identifier	FC		126451	0					
ANR	126502	ArgumentList	has_bracketed_namespaces		126451	1					
ANR	126503	Argument	has_bracketed_namespaces		126451	0					
ANR	126504	Identifier	has_bracketed_namespaces		126451	0					
ANR	126505	CallExpression	FC ( in_namespace )		126451	1					
ANR	126506	Callee	FC		126451	0					
ANR	126507	Identifier	FC		126451	0					
ANR	126508	ArgumentList	in_namespace		126451	1					
ANR	126509	Argument	in_namespace		126451	0					
ANR	126510	Identifier	in_namespace		126451	0					
ANR	126511	CompoundStatement		8:55:244:244	126451	1					
ANR	126512	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""__HALT_COMPILER() can only be used from the outermost scope"" )"	5683:2:168561:168663	126451	0	True				
ANR	126513	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""__HALT_COMPILER() can only be used from the outermost scope"" )"		126451	0					
ANR	126514	Callee	zend_error_noreturn		126451	0					
ANR	126515	Identifier	zend_error_noreturn		126451	0					
ANR	126516	ArgumentList	E_COMPILE_ERROR		126451	1					
ANR	126517	Argument	E_COMPILE_ERROR		126451	0					
ANR	126518	Identifier	E_COMPILE_ERROR		126451	0					
ANR	126519	Argument	"""__HALT_COMPILER() can only be used from the outermost scope"""		126451	1					
ANR	126520	PrimaryExpression	"""__HALT_COMPILER() can only be used from the outermost scope"""		126451	0					
ANR	126521	ExpressionStatement	filename = zend_get_compiled_filename ( )	5687:1:168670:168709	126451	5	True				
ANR	126522	AssignmentExpression	filename = zend_get_compiled_filename ( )		126451	0		=			
ANR	126523	Identifier	filename		126451	0					
ANR	126524	CallExpression	zend_get_compiled_filename ( )		126451	1					
ANR	126525	Callee	zend_get_compiled_filename		126451	0					
ANR	126526	Identifier	zend_get_compiled_filename		126451	0					
ANR	126527	ArgumentList			126451	1					
ANR	126528	ExpressionStatement	"name = zend_mangle_property_name ( const_name , sizeof ( const_name ) - 1 , ZSTR_VAL ( filename ) , ZSTR_LEN ( filename ) , 0 )"	5688:1:168712:168825	126451	6	True				
ANR	126529	AssignmentExpression	"name = zend_mangle_property_name ( const_name , sizeof ( const_name ) - 1 , ZSTR_VAL ( filename ) , ZSTR_LEN ( filename ) , 0 )"		126451	0		=			
ANR	126530	Identifier	name		126451	0					
ANR	126531	CallExpression	"zend_mangle_property_name ( const_name , sizeof ( const_name ) - 1 , ZSTR_VAL ( filename ) , ZSTR_LEN ( filename ) , 0 )"		126451	1					
ANR	126532	Callee	zend_mangle_property_name		126451	0					
ANR	126533	Identifier	zend_mangle_property_name		126451	0					
ANR	126534	ArgumentList	const_name		126451	1					
ANR	126535	Argument	const_name		126451	0					
ANR	126536	Identifier	const_name		126451	0					
ANR	126537	Argument	sizeof ( const_name ) - 1		126451	1					
ANR	126538	AdditiveExpression	sizeof ( const_name ) - 1		126451	0		-			
ANR	126539	SizeofExpression	sizeof ( const_name )		126451	0					
ANR	126540	Sizeof	sizeof		126451	0					
ANR	126541	SizeofOperand	const_name		126451	1					
ANR	126542	PrimaryExpression	1		126451	1					
ANR	126543	Argument	ZSTR_VAL ( filename )		126451	2					
ANR	126544	CallExpression	ZSTR_VAL ( filename )		126451	0					
ANR	126545	Callee	ZSTR_VAL		126451	0					
ANR	126546	Identifier	ZSTR_VAL		126451	0					
ANR	126547	ArgumentList	filename		126451	1					
ANR	126548	Argument	filename		126451	0					
ANR	126549	Identifier	filename		126451	0					
ANR	126550	Argument	ZSTR_LEN ( filename )		126451	3					
ANR	126551	CallExpression	ZSTR_LEN ( filename )		126451	0					
ANR	126552	Callee	ZSTR_LEN		126451	0					
ANR	126553	Identifier	ZSTR_LEN		126451	0					
ANR	126554	ArgumentList	filename		126451	1					
ANR	126555	Argument	filename		126451	0					
ANR	126556	Identifier	filename		126451	0					
ANR	126557	Argument	0		126451	4					
ANR	126558	PrimaryExpression	0		126451	0					
ANR	126559	ExpressionStatement	"zend_register_long_constant ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , offset , CONST_CS , 0 )"	5691:1:168829:168909	126451	7	True				
ANR	126560	CallExpression	"zend_register_long_constant ( ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , offset , CONST_CS , 0 )"		126451	0					
ANR	126561	Callee	zend_register_long_constant		126451	0					
ANR	126562	Identifier	zend_register_long_constant		126451	0					
ANR	126563	ArgumentList	ZSTR_VAL ( name )		126451	1					
ANR	126564	Argument	ZSTR_VAL ( name )		126451	0					
ANR	126565	CallExpression	ZSTR_VAL ( name )		126451	0					
ANR	126566	Callee	ZSTR_VAL		126451	0					
ANR	126567	Identifier	ZSTR_VAL		126451	0					
ANR	126568	ArgumentList	name		126451	1					
ANR	126569	Argument	name		126451	0					
ANR	126570	Identifier	name		126451	0					
ANR	126571	Argument	ZSTR_LEN ( name )		126451	1					
ANR	126572	CallExpression	ZSTR_LEN ( name )		126451	0					
ANR	126573	Callee	ZSTR_LEN		126451	0					
ANR	126574	Identifier	ZSTR_LEN		126451	0					
ANR	126575	ArgumentList	name		126451	1					
ANR	126576	Argument	name		126451	0					
ANR	126577	Identifier	name		126451	0					
ANR	126578	Argument	offset		126451	2					
ANR	126579	Identifier	offset		126451	0					
ANR	126580	Argument	CONST_CS		126451	3					
ANR	126581	Identifier	CONST_CS		126451	0					
ANR	126582	Argument	0		126451	4					
ANR	126583	PrimaryExpression	0		126451	0					
ANR	126584	ExpressionStatement	zend_string_release ( name )	5692:1:168912:168937	126451	8	True				
ANR	126585	CallExpression	zend_string_release ( name )		126451	0					
ANR	126586	Callee	zend_string_release		126451	0					
ANR	126587	Identifier	zend_string_release		126451	0					
ANR	126588	ArgumentList	name		126451	1					
ANR	126589	Argument	name		126451	0					
ANR	126590	Identifier	name		126451	0					
ANR	126591	ReturnType	void		126451	1					
ANR	126592	Identifier	zend_compile_halt_compiler		126451	2					
ANR	126593	ParameterList	zend_ast * ast		126451	3					
ANR	126594	Parameter	zend_ast * ast	5674:32:168287:168299	126451	0	True				
ANR	126595	ParameterType	zend_ast *		126451	0					
ANR	126596	Identifier	ast		126451	1					
ANR	126597	CFGEntryNode	ENTRY		126451		True				
ANR	126598	CFGExitNode	EXIT		126451		True				
ANR	126599	Symbol	CONST_CS		126451						
ANR	126600	Symbol	ast		126451						
ANR	126601	Symbol	offset		126451						
ANR	126602	Symbol	in_namespace		126451						
ANR	126603	Symbol	const_name		126451						
ANR	126604	Symbol	has_bracketed_namespaces		126451						
ANR	126605	Symbol	E_COMPILE_ERROR		126451						
ANR	126606	Symbol	zend_mangle_property_name		126451						
ANR	126607	Symbol	Z_LVAL_P		126451						
ANR	126608	Symbol	ZSTR_VAL		126451						
ANR	126609	Symbol	zend_get_compiled_filename		126451						
ANR	126610	Symbol	* ast		126451						
ANR	126611	Symbol	filename		126451						
ANR	126612	Symbol	* * ast		126451						
ANR	126613	Symbol	name		126451						
ANR	126614	Symbol	ZSTR_LEN		126451						
ANR	126615	Symbol	* ast -> child		126451						
ANR	126616	Symbol	ast -> child		126451						
ANR	126617	Symbol	zend_ast_get_zval		126451						
ANR	126618	Symbol	FC		126451						
ANR	126619	Symbol	offset_ast		126451						
ANR	126620	Function	zend_try_ct_eval_magic_const	5696:0:168952:171183							
ANR	126621	FunctionDef	"zend_try_ct_eval_magic_const (zval * zv , zend_ast * ast)"		126620	0					
ANR	126622	CompoundStatement		5697:0:169033:171183	126620	0					
ANR	126623	IdentifierDeclStatement	zend_op_array * op_array = CG ( active_op_array ) ;	5698:1:169036:169081	126620	0	True				
ANR	126624	IdentifierDecl	* op_array = CG ( active_op_array )		126620	0					
ANR	126625	IdentifierDeclType	zend_op_array *		126620	0					
ANR	126626	Identifier	op_array		126620	1					
ANR	126627	AssignmentExpression	* op_array = CG ( active_op_array )		126620	2		=			
ANR	126628	Identifier	op_array		126620	0					
ANR	126629	CallExpression	CG ( active_op_array )		126620	1					
ANR	126630	Callee	CG		126620	0					
ANR	126631	Identifier	CG		126620	0					
ANR	126632	ArgumentList	active_op_array		126620	1					
ANR	126633	Argument	active_op_array		126620	0					
ANR	126634	Identifier	active_op_array		126620	0					
ANR	126635	IdentifierDeclStatement	zend_class_entry * ce = CG ( active_class_entry ) ;	5699:1:169084:169129	126620	1	True				
ANR	126636	IdentifierDecl	* ce = CG ( active_class_entry )		126620	0					
ANR	126637	IdentifierDeclType	zend_class_entry *		126620	0					
ANR	126638	Identifier	ce		126620	1					
ANR	126639	AssignmentExpression	* ce = CG ( active_class_entry )		126620	2		=			
ANR	126640	Identifier	ce		126620	0					
ANR	126641	CallExpression	CG ( active_class_entry )		126620	1					
ANR	126642	Callee	CG		126620	0					
ANR	126643	Identifier	CG		126620	0					
ANR	126644	ArgumentList	active_class_entry		126620	1					
ANR	126645	Argument	active_class_entry		126620	0					
ANR	126646	Identifier	active_class_entry		126620	0					
ANR	126647	SwitchStatement	switch ( ast -> attr )		126620	2					
ANR	126648	Condition	ast -> attr	5701:9:169141:169149	126620	0	True				
ANR	126649	PtrMemberAccess	ast -> attr		126620	0					
ANR	126650	Identifier	ast		126620	0					
ANR	126651	Identifier	attr		126620	1					
ANR	126652	CompoundStatement		5:20:118:118	126620	1					
ANR	126653	Label	case T_LINE :	5702:2:169156:169167	126620	0	True				
ANR	126654	Identifier	T_LINE		126620	0					
ANR	126655	ExpressionStatement	"ZVAL_LONG ( zv , ast -> lineno )"	5703:3:169172:169198	126620	1	True				
ANR	126656	CallExpression	"ZVAL_LONG ( zv , ast -> lineno )"		126620	0					
ANR	126657	Callee	ZVAL_LONG		126620	0					
ANR	126658	Identifier	ZVAL_LONG		126620	0					
ANR	126659	ArgumentList	zv		126620	1					
ANR	126660	Argument	zv		126620	0					
ANR	126661	Identifier	zv		126620	0					
ANR	126662	Argument	ast -> lineno		126620	1					
ANR	126663	PtrMemberAccess	ast -> lineno		126620	0					
ANR	126664	Identifier	ast		126620	0					
ANR	126665	Identifier	lineno		126620	1					
ANR	126666	BreakStatement	break ;	5704:3:169203:169208	126620	2	True				
ANR	126667	Label	case T_FILE :	5705:2:169212:169223	126620	3	True				
ANR	126668	Identifier	T_FILE		126620	0					
ANR	126669	ExpressionStatement	"ZVAL_STR_COPY ( zv , CG ( compiled_filename ) )"	5706:3:169228:169268	126620	4	True				
ANR	126670	CallExpression	"ZVAL_STR_COPY ( zv , CG ( compiled_filename ) )"		126620	0					
ANR	126671	Callee	ZVAL_STR_COPY		126620	0					
ANR	126672	Identifier	ZVAL_STR_COPY		126620	0					
ANR	126673	ArgumentList	zv		126620	1					
ANR	126674	Argument	zv		126620	0					
ANR	126675	Identifier	zv		126620	0					
ANR	126676	Argument	CG ( compiled_filename )		126620	1					
ANR	126677	CallExpression	CG ( compiled_filename )		126620	0					
ANR	126678	Callee	CG		126620	0					
ANR	126679	Identifier	CG		126620	0					
ANR	126680	ArgumentList	compiled_filename		126620	1					
ANR	126681	Argument	compiled_filename		126620	0					
ANR	126682	Identifier	compiled_filename		126620	0					
ANR	126683	BreakStatement	break ;	5707:3:169273:169278	126620	5	True				
ANR	126684	Label	case T_DIR :	5708:2:169282:169292	126620	6	True				
ANR	126685	Identifier	T_DIR		126620	0					
ANR	126686	CompoundStatement		15:3:317:399	126620	7					
ANR	126687	IdentifierDeclStatement	zend_string * filename = CG ( compiled_filename ) ;	5710:3:169301:169346	126620	0	True				
ANR	126688	IdentifierDecl	* filename = CG ( compiled_filename )		126620	0					
ANR	126689	IdentifierDeclType	zend_string *		126620	0					
ANR	126690	Identifier	filename		126620	1					
ANR	126691	AssignmentExpression	* filename = CG ( compiled_filename )		126620	2		=			
ANR	126692	Identifier	filename		126620	0					
ANR	126693	CallExpression	CG ( compiled_filename )		126620	1					
ANR	126694	Callee	CG		126620	0					
ANR	126695	Identifier	CG		126620	0					
ANR	126696	ArgumentList	compiled_filename		126620	1					
ANR	126697	Argument	compiled_filename		126620	0					
ANR	126698	Identifier	compiled_filename		126620	0					
ANR	126699	IdentifierDeclStatement	"zend_string * dirname = zend_string_init ( ZSTR_VAL ( filename ) , ZSTR_LEN ( filename ) , 0 ) ;"	5711:3:169351:169433	126620	1	True				
ANR	126700	IdentifierDecl	"* dirname = zend_string_init ( ZSTR_VAL ( filename ) , ZSTR_LEN ( filename ) , 0 )"		126620	0					
ANR	126701	IdentifierDeclType	zend_string *		126620	0					
ANR	126702	Identifier	dirname		126620	1					
ANR	126703	AssignmentExpression	"* dirname = zend_string_init ( ZSTR_VAL ( filename ) , ZSTR_LEN ( filename ) , 0 )"		126620	2		=			
ANR	126704	Identifier	dirname		126620	0					
ANR	126705	CallExpression	"zend_string_init ( ZSTR_VAL ( filename ) , ZSTR_LEN ( filename ) , 0 )"		126620	1					
ANR	126706	Callee	zend_string_init		126620	0					
ANR	126707	Identifier	zend_string_init		126620	0					
ANR	126708	ArgumentList	ZSTR_VAL ( filename )		126620	1					
ANR	126709	Argument	ZSTR_VAL ( filename )		126620	0					
ANR	126710	CallExpression	ZSTR_VAL ( filename )		126620	0					
ANR	126711	Callee	ZSTR_VAL		126620	0					
ANR	126712	Identifier	ZSTR_VAL		126620	0					
ANR	126713	ArgumentList	filename		126620	1					
ANR	126714	Argument	filename		126620	0					
ANR	126715	Identifier	filename		126620	0					
ANR	126716	Argument	ZSTR_LEN ( filename )		126620	1					
ANR	126717	CallExpression	ZSTR_LEN ( filename )		126620	0					
ANR	126718	Callee	ZSTR_LEN		126620	0					
ANR	126719	Identifier	ZSTR_LEN		126620	0					
ANR	126720	ArgumentList	filename		126620	1					
ANR	126721	Argument	filename		126620	0					
ANR	126722	Identifier	filename		126620	0					
ANR	126723	Argument	0		126620	2					
ANR	126724	PrimaryExpression	0		126620	0					
ANR	126725	ExpressionStatement	"zend_dirname ( ZSTR_VAL ( dirname ) , ZSTR_LEN ( dirname ) )"	5712:3:169438:169488	126620	2	True				
ANR	126726	CallExpression	"zend_dirname ( ZSTR_VAL ( dirname ) , ZSTR_LEN ( dirname ) )"		126620	0					
ANR	126727	Callee	zend_dirname		126620	0					
ANR	126728	Identifier	zend_dirname		126620	0					
ANR	126729	ArgumentList	ZSTR_VAL ( dirname )		126620	1					
ANR	126730	Argument	ZSTR_VAL ( dirname )		126620	0					
ANR	126731	CallExpression	ZSTR_VAL ( dirname )		126620	0					
ANR	126732	Callee	ZSTR_VAL		126620	0					
ANR	126733	Identifier	ZSTR_VAL		126620	0					
ANR	126734	ArgumentList	dirname		126620	1					
ANR	126735	Argument	dirname		126620	0					
ANR	126736	Identifier	dirname		126620	0					
ANR	126737	Argument	ZSTR_LEN ( dirname )		126620	1					
ANR	126738	CallExpression	ZSTR_LEN ( dirname )		126620	0					
ANR	126739	Callee	ZSTR_LEN		126620	0					
ANR	126740	Identifier	ZSTR_LEN		126620	0					
ANR	126741	ArgumentList	dirname		126620	1					
ANR	126742	Argument	dirname		126620	0					
ANR	126743	Identifier	dirname		126620	0					
ANR	126744	IfStatement	"if ( strcmp ( ZSTR_VAL ( dirname ) , ""."" ) == 0 )"		126620	3					
ANR	126745	Condition	"strcmp ( ZSTR_VAL ( dirname ) , ""."" ) == 0"	5714:7:169498:169532	126620	0	True				
ANR	126746	EqualityExpression	"strcmp ( ZSTR_VAL ( dirname ) , ""."" ) == 0"		126620	0		==			
ANR	126747	CallExpression	"strcmp ( ZSTR_VAL ( dirname ) , ""."" )"		126620	0					
ANR	126748	Callee	strcmp		126620	0					
ANR	126749	Identifier	strcmp		126620	0					
ANR	126750	ArgumentList	ZSTR_VAL ( dirname )		126620	1					
ANR	126751	Argument	ZSTR_VAL ( dirname )		126620	0					
ANR	126752	CallExpression	ZSTR_VAL ( dirname )		126620	0					
ANR	126753	Callee	ZSTR_VAL		126620	0					
ANR	126754	Identifier	ZSTR_VAL		126620	0					
ANR	126755	ArgumentList	dirname		126620	1					
ANR	126756	Argument	dirname		126620	0					
ANR	126757	Identifier	dirname		126620	0					
ANR	126758	Argument	"""."""		126620	1					
ANR	126759	PrimaryExpression	"""."""		126620	0					
ANR	126760	PrimaryExpression	0		126620	1					
ANR	126761	CompoundStatement		18:44:501:501	126620	1					
ANR	126762	ExpressionStatement	"dirname = zend_string_extend ( dirname , MAXPATHLEN , 0 )"	5715:4:169541:169593	126620	0	True				
ANR	126763	AssignmentExpression	"dirname = zend_string_extend ( dirname , MAXPATHLEN , 0 )"		126620	0		=			
ANR	126764	Identifier	dirname		126620	0					
ANR	126765	CallExpression	"zend_string_extend ( dirname , MAXPATHLEN , 0 )"		126620	1					
ANR	126766	Callee	zend_string_extend		126620	0					
ANR	126767	Identifier	zend_string_extend		126620	0					
ANR	126768	ArgumentList	dirname		126620	1					
ANR	126769	Argument	dirname		126620	0					
ANR	126770	Identifier	dirname		126620	0					
ANR	126771	Argument	MAXPATHLEN		126620	1					
ANR	126772	Identifier	MAXPATHLEN		126620	0					
ANR	126773	Argument	0		126620	2					
ANR	126774	PrimaryExpression	0		126620	0					
ANR	126775	ExpressionStatement	"ZEND_IGNORE_VALUE ( VCWD_GETCWD ( ZSTR_VAL ( dirname ) , MAXPATHLEN ) )"	5717:4:169615:169676	126620	1	True				
ANR	126776	CallExpression	"ZEND_IGNORE_VALUE ( VCWD_GETCWD ( ZSTR_VAL ( dirname ) , MAXPATHLEN ) )"		126620	0					
ANR	126777	Callee	ZEND_IGNORE_VALUE		126620	0					
ANR	126778	Identifier	ZEND_IGNORE_VALUE		126620	0					
ANR	126779	ArgumentList	"VCWD_GETCWD ( ZSTR_VAL ( dirname ) , MAXPATHLEN )"		126620	1					
ANR	126780	Argument	"VCWD_GETCWD ( ZSTR_VAL ( dirname ) , MAXPATHLEN )"		126620	0					
ANR	126781	CallExpression	"VCWD_GETCWD ( ZSTR_VAL ( dirname ) , MAXPATHLEN )"		126620	0					
ANR	126782	Callee	VCWD_GETCWD		126620	0					
ANR	126783	Identifier	VCWD_GETCWD		126620	0					
ANR	126784	ArgumentList	ZSTR_VAL ( dirname )		126620	1					
ANR	126785	Argument	ZSTR_VAL ( dirname )		126620	0					
ANR	126786	CallExpression	ZSTR_VAL ( dirname )		126620	0					
ANR	126787	Callee	ZSTR_VAL		126620	0					
ANR	126788	Identifier	ZSTR_VAL		126620	0					
ANR	126789	ArgumentList	dirname		126620	1					
ANR	126790	Argument	dirname		126620	0					
ANR	126791	Identifier	dirname		126620	0					
ANR	126792	Argument	MAXPATHLEN		126620	1					
ANR	126793	Identifier	MAXPATHLEN		126620	0					
ANR	126794	ExpressionStatement	ZSTR_LEN ( dirname ) = strlen ( ZSTR_VAL ( dirname ) )	5723:3:169765:169810	126620	4	True				
ANR	126795	AssignmentExpression	ZSTR_LEN ( dirname ) = strlen ( ZSTR_VAL ( dirname ) )		126620	0		=			
ANR	126796	CallExpression	ZSTR_LEN ( dirname )		126620	0					
ANR	126797	Callee	ZSTR_LEN		126620	0					
ANR	126798	Identifier	ZSTR_LEN		126620	0					
ANR	126799	ArgumentList	dirname		126620	1					
ANR	126800	Argument	dirname		126620	0					
ANR	126801	Identifier	dirname		126620	0					
ANR	126802	CallExpression	strlen ( ZSTR_VAL ( dirname ) )		126620	1					
ANR	126803	Callee	strlen		126620	0					
ANR	126804	Identifier	strlen		126620	0					
ANR	126805	ArgumentList	ZSTR_VAL ( dirname )		126620	1					
ANR	126806	Argument	ZSTR_VAL ( dirname )		126620	0					
ANR	126807	CallExpression	ZSTR_VAL ( dirname )		126620	0					
ANR	126808	Callee	ZSTR_VAL		126620	0					
ANR	126809	Identifier	ZSTR_VAL		126620	0					
ANR	126810	ArgumentList	dirname		126620	1					
ANR	126811	Argument	dirname		126620	0					
ANR	126812	Identifier	dirname		126620	0					
ANR	126813	ExpressionStatement	"ZVAL_STR ( zv , dirname )"	5724:3:169815:169836	126620	5	True				
ANR	126814	CallExpression	"ZVAL_STR ( zv , dirname )"		126620	0					
ANR	126815	Callee	ZVAL_STR		126620	0					
ANR	126816	Identifier	ZVAL_STR		126620	0					
ANR	126817	ArgumentList	zv		126620	1					
ANR	126818	Argument	zv		126620	0					
ANR	126819	Identifier	zv		126620	0					
ANR	126820	Argument	dirname		126620	1					
ANR	126821	Identifier	dirname		126620	0					
ANR	126822	BreakStatement	break ;	5725:3:169841:169846	126620	6	True				
ANR	126823	Label	case T_FUNC_C :	5727:2:169854:169867	126620	8	True				
ANR	126824	Identifier	T_FUNC_C		126620	0					
ANR	126825	IfStatement	if ( op_array && op_array -> function_name )		126620	9					
ANR	126826	Condition	op_array && op_array -> function_name	5728:7:169876:169910	126620	0	True				
ANR	126827	AndExpression	op_array && op_array -> function_name		126620	0		&&			
ANR	126828	Identifier	op_array		126620	0					
ANR	126829	PtrMemberAccess	op_array -> function_name		126620	1					
ANR	126830	Identifier	op_array		126620	0					
ANR	126831	Identifier	function_name		126620	1					
ANR	126832	CompoundStatement		32:44:879:879	126620	1					
ANR	126833	ExpressionStatement	"ZVAL_STR_COPY ( zv , op_array -> function_name )"	5729:4:169919:169961	126620	0	True				
ANR	126834	CallExpression	"ZVAL_STR_COPY ( zv , op_array -> function_name )"		126620	0					
ANR	126835	Callee	ZVAL_STR_COPY		126620	0					
ANR	126836	Identifier	ZVAL_STR_COPY		126620	0					
ANR	126837	ArgumentList	zv		126620	1					
ANR	126838	Argument	zv		126620	0					
ANR	126839	Identifier	zv		126620	0					
ANR	126840	Argument	op_array -> function_name		126620	1					
ANR	126841	PtrMemberAccess	op_array -> function_name		126620	0					
ANR	126842	Identifier	op_array		126620	0					
ANR	126843	Identifier	function_name		126620	1					
ANR	126844	ElseStatement	else		126620	0					
ANR	126845	CompoundStatement		34:10:939:939	126620	0					
ANR	126846	ExpressionStatement	ZVAL_EMPTY_STRING ( zv )	5731:4:169979:170000	126620	0	True				
ANR	126847	CallExpression	ZVAL_EMPTY_STRING ( zv )		126620	0					
ANR	126848	Callee	ZVAL_EMPTY_STRING		126620	0					
ANR	126849	Identifier	ZVAL_EMPTY_STRING		126620	0					
ANR	126850	ArgumentList	zv		126620	1					
ANR	126851	Argument	zv		126620	0					
ANR	126852	Identifier	zv		126620	0					
ANR	126853	BreakStatement	break ;	5733:3:170010:170015	126620	10	True				
ANR	126854	Label	case T_METHOD_C :	5734:2:170019:170034	126620	11	True				
ANR	126855	Identifier	T_METHOD_C		126620	0					
ANR	126856	IfStatement	if ( ( op_array && ! op_array -> scope && op_array -> function_name ) || ( op_array -> fn_flags & ZEND_ACC_CLOSURE ) )		126620	12					
ANR	126857	Condition	( op_array && ! op_array -> scope && op_array -> function_name ) || ( op_array -> fn_flags & ZEND_ACC_CLOSURE )	5735:7:170043:170142	126620	0	True				
ANR	126858	OrExpression	( op_array && ! op_array -> scope && op_array -> function_name ) || ( op_array -> fn_flags & ZEND_ACC_CLOSURE )		126620	0		||			
ANR	126859	AndExpression	op_array && ! op_array -> scope && op_array -> function_name		126620	0		&&			
ANR	126860	Identifier	op_array		126620	0					
ANR	126861	AndExpression	! op_array -> scope && op_array -> function_name		126620	1		&&			
ANR	126862	UnaryOperationExpression	! op_array -> scope		126620	0					
ANR	126863	UnaryOperator	!		126620	0					
ANR	126864	PtrMemberAccess	op_array -> scope		126620	1					
ANR	126865	Identifier	op_array		126620	0					
ANR	126866	Identifier	scope		126620	1					
ANR	126867	PtrMemberAccess	op_array -> function_name		126620	1					
ANR	126868	Identifier	op_array		126620	0					
ANR	126869	Identifier	function_name		126620	1					
ANR	126870	BitAndExpression	op_array -> fn_flags & ZEND_ACC_CLOSURE		126620	1		&			
ANR	126871	PtrMemberAccess	op_array -> fn_flags		126620	0					
ANR	126872	Identifier	op_array		126620	0					
ANR	126873	Identifier	fn_flags		126620	1					
ANR	126874	Identifier	ZEND_ACC_CLOSURE		126620	1					
ANR	126875	CompoundStatement		39:109:1111:1111	126620	1					
ANR	126876	ExpressionStatement	"ZVAL_STR_COPY ( zv , op_array -> function_name )"	5736:4:170151:170193	126620	0	True				
ANR	126877	CallExpression	"ZVAL_STR_COPY ( zv , op_array -> function_name )"		126620	0					
ANR	126878	Callee	ZVAL_STR_COPY		126620	0					
ANR	126879	Identifier	ZVAL_STR_COPY		126620	0					
ANR	126880	ArgumentList	zv		126620	1					
ANR	126881	Argument	zv		126620	0					
ANR	126882	Identifier	zv		126620	0					
ANR	126883	Argument	op_array -> function_name		126620	1					
ANR	126884	PtrMemberAccess	op_array -> function_name		126620	0					
ANR	126885	Identifier	op_array		126620	0					
ANR	126886	Identifier	function_name		126620	1					
ANR	126887	ElseStatement	else		126620	0					
ANR	126888	IfStatement	if ( ce )		126620	0					
ANR	126889	Condition	ce	5737:14:170209:170210	126620	0	True				
ANR	126890	Identifier	ce		126620	0					
ANR	126891	CompoundStatement		41:18:1179:1179	126620	1					
ANR	126892	IfStatement	if ( op_array && op_array -> function_name )		126620	0					
ANR	126893	Condition	op_array && op_array -> function_name	5738:8:170223:170257	126620	0	True				
ANR	126894	AndExpression	op_array && op_array -> function_name		126620	0		&&			
ANR	126895	Identifier	op_array		126620	0					
ANR	126896	PtrMemberAccess	op_array -> function_name		126620	1					
ANR	126897	Identifier	op_array		126620	0					
ANR	126898	Identifier	function_name		126620	1					
ANR	126899	CompoundStatement		42:45:1226:1226	126620	1					
ANR	126900	ExpressionStatement	"ZVAL_NEW_STR ( zv , zend_concat3 ( ZSTR_VAL ( ce -> name ) , ZSTR_LEN ( ce -> name ) , ""::"" , 2 , ZSTR_VAL ( op_array -> function_name ) , ZSTR_LEN ( op_array -> function_name ) ) )"	5739:5:170267:170422	126620	0	True				
ANR	126901	CallExpression	"ZVAL_NEW_STR ( zv , zend_concat3 ( ZSTR_VAL ( ce -> name ) , ZSTR_LEN ( ce -> name ) , ""::"" , 2 , ZSTR_VAL ( op_array -> function_name ) , ZSTR_LEN ( op_array -> function_name ) ) )"		126620	0					
ANR	126902	Callee	ZVAL_NEW_STR		126620	0					
ANR	126903	Identifier	ZVAL_NEW_STR		126620	0					
ANR	126904	ArgumentList	zv		126620	1					
ANR	126905	Argument	zv		126620	0					
ANR	126906	Identifier	zv		126620	0					
ANR	126907	Argument	"zend_concat3 ( ZSTR_VAL ( ce -> name ) , ZSTR_LEN ( ce -> name ) , ""::"" , 2 , ZSTR_VAL ( op_array -> function_name ) , ZSTR_LEN ( op_array -> function_name ) )"		126620	1					
ANR	126908	CallExpression	"zend_concat3 ( ZSTR_VAL ( ce -> name ) , ZSTR_LEN ( ce -> name ) , ""::"" , 2 , ZSTR_VAL ( op_array -> function_name ) , ZSTR_LEN ( op_array -> function_name ) )"		126620	0					
ANR	126909	Callee	zend_concat3		126620	0					
ANR	126910	Identifier	zend_concat3		126620	0					
ANR	126911	ArgumentList	ZSTR_VAL ( ce -> name )		126620	1					
ANR	126912	Argument	ZSTR_VAL ( ce -> name )		126620	0					
ANR	126913	CallExpression	ZSTR_VAL ( ce -> name )		126620	0					
ANR	126914	Callee	ZSTR_VAL		126620	0					
ANR	126915	Identifier	ZSTR_VAL		126620	0					
ANR	126916	ArgumentList	ce -> name		126620	1					
ANR	126917	Argument	ce -> name		126620	0					
ANR	126918	PtrMemberAccess	ce -> name		126620	0					
ANR	126919	Identifier	ce		126620	0					
ANR	126920	Identifier	name		126620	1					
ANR	126921	Argument	ZSTR_LEN ( ce -> name )		126620	1					
ANR	126922	CallExpression	ZSTR_LEN ( ce -> name )		126620	0					
ANR	126923	Callee	ZSTR_LEN		126620	0					
ANR	126924	Identifier	ZSTR_LEN		126620	0					
ANR	126925	ArgumentList	ce -> name		126620	1					
ANR	126926	Argument	ce -> name		126620	0					
ANR	126927	PtrMemberAccess	ce -> name		126620	0					
ANR	126928	Identifier	ce		126620	0					
ANR	126929	Identifier	name		126620	1					
ANR	126930	Argument	"""::"""		126620	2					
ANR	126931	PrimaryExpression	"""::"""		126620	0					
ANR	126932	Argument	2		126620	3					
ANR	126933	PrimaryExpression	2		126620	0					
ANR	126934	Argument	ZSTR_VAL ( op_array -> function_name )		126620	4					
ANR	126935	CallExpression	ZSTR_VAL ( op_array -> function_name )		126620	0					
ANR	126936	Callee	ZSTR_VAL		126620	0					
ANR	126937	Identifier	ZSTR_VAL		126620	0					
ANR	126938	ArgumentList	op_array -> function_name		126620	1					
ANR	126939	Argument	op_array -> function_name		126620	0					
ANR	126940	PtrMemberAccess	op_array -> function_name		126620	0					
ANR	126941	Identifier	op_array		126620	0					
ANR	126942	Identifier	function_name		126620	1					
ANR	126943	Argument	ZSTR_LEN ( op_array -> function_name )		126620	5					
ANR	126944	CallExpression	ZSTR_LEN ( op_array -> function_name )		126620	0					
ANR	126945	Callee	ZSTR_LEN		126620	0					
ANR	126946	Identifier	ZSTR_LEN		126620	0					
ANR	126947	ArgumentList	op_array -> function_name		126620	1					
ANR	126948	Argument	op_array -> function_name		126620	0					
ANR	126949	PtrMemberAccess	op_array -> function_name		126620	0					
ANR	126950	Identifier	op_array		126620	0					
ANR	126951	Identifier	function_name		126620	1					
ANR	126952	ElseStatement	else		126620	0					
ANR	126953	CompoundStatement		45:11:1401:1401	126620	0					
ANR	126954	ExpressionStatement	"ZVAL_STR_COPY ( zv , ce -> name )"	5742:5:170442:170469	126620	0	True				
ANR	126955	CallExpression	"ZVAL_STR_COPY ( zv , ce -> name )"		126620	0					
ANR	126956	Callee	ZVAL_STR_COPY		126620	0					
ANR	126957	Identifier	ZVAL_STR_COPY		126620	0					
ANR	126958	ArgumentList	zv		126620	1					
ANR	126959	Argument	zv		126620	0					
ANR	126960	Identifier	zv		126620	0					
ANR	126961	Argument	ce -> name		126620	1					
ANR	126962	PtrMemberAccess	ce -> name		126620	0					
ANR	126963	Identifier	ce		126620	0					
ANR	126964	Identifier	name		126620	1					
ANR	126965	ElseStatement	else		126620	0					
ANR	126966	IfStatement	if ( op_array && op_array -> function_name )		126620	0					
ANR	126967	Condition	op_array && op_array -> function_name	5744:14:170491:170525	126620	0	True				
ANR	126968	AndExpression	op_array && op_array -> function_name		126620	0		&&			
ANR	126969	Identifier	op_array		126620	0					
ANR	126970	PtrMemberAccess	op_array -> function_name		126620	1					
ANR	126971	Identifier	op_array		126620	0					
ANR	126972	Identifier	function_name		126620	1					
ANR	126973	CompoundStatement		48:51:1494:1494	126620	1					
ANR	126974	ExpressionStatement	"ZVAL_STR_COPY ( zv , op_array -> function_name )"	5745:4:170534:170576	126620	0	True				
ANR	126975	CallExpression	"ZVAL_STR_COPY ( zv , op_array -> function_name )"		126620	0					
ANR	126976	Callee	ZVAL_STR_COPY		126620	0					
ANR	126977	Identifier	ZVAL_STR_COPY		126620	0					
ANR	126978	ArgumentList	zv		126620	1					
ANR	126979	Argument	zv		126620	0					
ANR	126980	Identifier	zv		126620	0					
ANR	126981	Argument	op_array -> function_name		126620	1					
ANR	126982	PtrMemberAccess	op_array -> function_name		126620	0					
ANR	126983	Identifier	op_array		126620	0					
ANR	126984	Identifier	function_name		126620	1					
ANR	126985	ElseStatement	else		126620	0					
ANR	126986	CompoundStatement		50:10:1554:1554	126620	0					
ANR	126987	ExpressionStatement	ZVAL_EMPTY_STRING ( zv )	5747:4:170594:170615	126620	0	True				
ANR	126988	CallExpression	ZVAL_EMPTY_STRING ( zv )		126620	0					
ANR	126989	Callee	ZVAL_EMPTY_STRING		126620	0					
ANR	126990	Identifier	ZVAL_EMPTY_STRING		126620	0					
ANR	126991	ArgumentList	zv		126620	1					
ANR	126992	Argument	zv		126620	0					
ANR	126993	Identifier	zv		126620	0					
ANR	126994	BreakStatement	break ;	5749:3:170625:170630	126620	13	True				
ANR	126995	Label	case T_CLASS_C :	5750:2:170634:170648	126620	14	True				
ANR	126996	Identifier	T_CLASS_C		126620	0					
ANR	126997	IfStatement	if ( ce )		126620	15					
ANR	126998	Condition	ce	5751:7:170657:170658	126620	0	True				
ANR	126999	Identifier	ce		126620	0					
ANR	127000	CompoundStatement		55:11:1627:1627	126620	1					
ANR	127001	IfStatement	if ( ( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0 )		126620	0					
ANR	127002	Condition	( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0	5752:8:170671:170706	126620	0	True				
ANR	127003	EqualityExpression	( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0		126620	0		!=			
ANR	127004	BitAndExpression	ce -> ce_flags & ZEND_ACC_TRAIT		126620	0		&			
ANR	127005	PtrMemberAccess	ce -> ce_flags		126620	0					
ANR	127006	Identifier	ce		126620	0					
ANR	127007	Identifier	ce_flags		126620	1					
ANR	127008	Identifier	ZEND_ACC_TRAIT		126620	1					
ANR	127009	PrimaryExpression	0		126620	1					
ANR	127010	CompoundStatement		56:46:1675:1675	126620	1					
ANR	127011	ReturnStatement	return 0 ;	5753:5:170716:170724	126620	0	True				
ANR	127012	PrimaryExpression	0		126620	0					
ANR	127013	ElseStatement	else		126620	0					
ANR	127014	CompoundStatement		58:11:1703:1703	126620	0					
ANR	127015	ExpressionStatement	"ZVAL_STR_COPY ( zv , ce -> name )"	5755:5:170744:170771	126620	0	True				
ANR	127016	CallExpression	"ZVAL_STR_COPY ( zv , ce -> name )"		126620	0					
ANR	127017	Callee	ZVAL_STR_COPY		126620	0					
ANR	127018	Identifier	ZVAL_STR_COPY		126620	0					
ANR	127019	ArgumentList	zv		126620	1					
ANR	127020	Argument	zv		126620	0					
ANR	127021	Identifier	zv		126620	0					
ANR	127022	Argument	ce -> name		126620	1					
ANR	127023	PtrMemberAccess	ce -> name		126620	0					
ANR	127024	Identifier	ce		126620	0					
ANR	127025	Identifier	name		126620	1					
ANR	127026	ElseStatement	else		126620	0					
ANR	127027	CompoundStatement		61:10:1755:1755	126620	0					
ANR	127028	ExpressionStatement	ZVAL_EMPTY_STRING ( zv )	5758:4:170795:170816	126620	0	True				
ANR	127029	CallExpression	ZVAL_EMPTY_STRING ( zv )		126620	0					
ANR	127030	Callee	ZVAL_EMPTY_STRING		126620	0					
ANR	127031	Identifier	ZVAL_EMPTY_STRING		126620	0					
ANR	127032	ArgumentList	zv		126620	1					
ANR	127033	Argument	zv		126620	0					
ANR	127034	Identifier	zv		126620	0					
ANR	127035	BreakStatement	break ;	5760:3:170826:170831	126620	16	True				
ANR	127036	Label	case T_TRAIT_C :	5761:2:170835:170849	126620	17	True				
ANR	127037	Identifier	T_TRAIT_C		126620	0					
ANR	127038	IfStatement	if ( ce && ( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0 )		126620	18					
ANR	127039	Condition	ce && ( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0	5762:7:170858:170899	126620	0	True				
ANR	127040	AndExpression	ce && ( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0		126620	0		&&			
ANR	127041	Identifier	ce		126620	0					
ANR	127042	EqualityExpression	( ce -> ce_flags & ZEND_ACC_TRAIT ) != 0		126620	1		!=			
ANR	127043	BitAndExpression	ce -> ce_flags & ZEND_ACC_TRAIT		126620	0		&			
ANR	127044	PtrMemberAccess	ce -> ce_flags		126620	0					
ANR	127045	Identifier	ce		126620	0					
ANR	127046	Identifier	ce_flags		126620	1					
ANR	127047	Identifier	ZEND_ACC_TRAIT		126620	1					
ANR	127048	PrimaryExpression	0		126620	1					
ANR	127049	CompoundStatement		66:51:1868:1868	126620	1					
ANR	127050	ExpressionStatement	"ZVAL_STR_COPY ( zv , ce -> name )"	5763:4:170908:170935	126620	0	True				
ANR	127051	CallExpression	"ZVAL_STR_COPY ( zv , ce -> name )"		126620	0					
ANR	127052	Callee	ZVAL_STR_COPY		126620	0					
ANR	127053	Identifier	ZVAL_STR_COPY		126620	0					
ANR	127054	ArgumentList	zv		126620	1					
ANR	127055	Argument	zv		126620	0					
ANR	127056	Identifier	zv		126620	0					
ANR	127057	Argument	ce -> name		126620	1					
ANR	127058	PtrMemberAccess	ce -> name		126620	0					
ANR	127059	Identifier	ce		126620	0					
ANR	127060	Identifier	name		126620	1					
ANR	127061	ElseStatement	else		126620	0					
ANR	127062	CompoundStatement		68:10:1913:1913	126620	0					
ANR	127063	ExpressionStatement	ZVAL_EMPTY_STRING ( zv )	5765:4:170953:170974	126620	0	True				
ANR	127064	CallExpression	ZVAL_EMPTY_STRING ( zv )		126620	0					
ANR	127065	Callee	ZVAL_EMPTY_STRING		126620	0					
ANR	127066	Identifier	ZVAL_EMPTY_STRING		126620	0					
ANR	127067	ArgumentList	zv		126620	1					
ANR	127068	Argument	zv		126620	0					
ANR	127069	Identifier	zv		126620	0					
ANR	127070	BreakStatement	break ;	5767:3:170984:170989	126620	19	True				
ANR	127071	Label	case T_NS_C :	5768:2:170993:171004	126620	20	True				
ANR	127072	Identifier	T_NS_C		126620	0					
ANR	127073	IfStatement	if ( FC ( current_namespace ) )		126620	21					
ANR	127074	Condition	FC ( current_namespace )	5769:7:171013:171033	126620	0	True				
ANR	127075	CallExpression	FC ( current_namespace )		126620	0					
ANR	127076	Callee	FC		126620	0					
ANR	127077	Identifier	FC		126620	0					
ANR	127078	ArgumentList	current_namespace		126620	1					
ANR	127079	Argument	current_namespace		126620	0					
ANR	127080	Identifier	current_namespace		126620	0					
ANR	127081	CompoundStatement		73:30:2002:2002	126620	1					
ANR	127082	ExpressionStatement	"ZVAL_STR_COPY ( zv , FC ( current_namespace ) )"	5770:4:171042:171082	126620	0	True				
ANR	127083	CallExpression	"ZVAL_STR_COPY ( zv , FC ( current_namespace ) )"		126620	0					
ANR	127084	Callee	ZVAL_STR_COPY		126620	0					
ANR	127085	Identifier	ZVAL_STR_COPY		126620	0					
ANR	127086	ArgumentList	zv		126620	1					
ANR	127087	Argument	zv		126620	0					
ANR	127088	Identifier	zv		126620	0					
ANR	127089	Argument	FC ( current_namespace )		126620	1					
ANR	127090	CallExpression	FC ( current_namespace )		126620	0					
ANR	127091	Callee	FC		126620	0					
ANR	127092	Identifier	FC		126620	0					
ANR	127093	ArgumentList	current_namespace		126620	1					
ANR	127094	Argument	current_namespace		126620	0					
ANR	127095	Identifier	current_namespace		126620	0					
ANR	127096	ElseStatement	else		126620	0					
ANR	127097	CompoundStatement		75:10:2060:2060	126620	0					
ANR	127098	ExpressionStatement	ZVAL_EMPTY_STRING ( zv )	5772:4:171100:171121	126620	0	True				
ANR	127099	CallExpression	ZVAL_EMPTY_STRING ( zv )		126620	0					
ANR	127100	Callee	ZVAL_EMPTY_STRING		126620	0					
ANR	127101	Identifier	ZVAL_EMPTY_STRING		126620	0					
ANR	127102	ArgumentList	zv		126620	1					
ANR	127103	Argument	zv		126620	0					
ANR	127104	Identifier	zv		126620	0					
ANR	127105	BreakStatement	break ;	5774:3:171131:171136	126620	22	True				
ANR	127106	Statement	EMPTY_SWITCH_DEFAULT_CASE	5775:2:171140:171164	126620	23	True				
ANR	127107	Statement	(	5775:27:171165:171165	126620	24	True				
ANR	127108	Statement	)	5775:28:171166:171166	126620	25	True				
ANR	127109	ReturnStatement	return 1 ;	5778:1:171173:171181	126620	3	True				
ANR	127110	PrimaryExpression	1		126620	0					
ANR	127111	ReturnType	static zend_bool		126620	1					
ANR	127112	Identifier	zend_try_ct_eval_magic_const		126620	2					
ANR	127113	ParameterList	"zval * zv , zend_ast * ast"		126620	3					
ANR	127114	Parameter	zval * zv	5696:46:168998:169005	126620	0	True				
ANR	127115	ParameterType	zval *		126620	0					
ANR	127116	Identifier	zv		126620	1					
ANR	127117	Parameter	zend_ast * ast	5696:56:169008:169020	126620	1	True				
ANR	127118	ParameterType	zend_ast *		126620	0					
ANR	127119	Identifier	ast		126620	1					
ANR	127120	CFGEntryNode	ENTRY		126620		True				
ANR	127121	CFGExitNode	EXIT		126620		True				
ANR	127122	Symbol	zend_string_extend		126620						
ANR	127123	Symbol	ast		126620						
ANR	127124	Symbol	ast -> lineno		126620						
ANR	127125	Symbol	active_class_entry		126620						
ANR	127126	Symbol	* ce		126620						
ANR	127127	Symbol	dirname		126620						
ANR	127128	Symbol	zend_string_init		126620						
ANR	127129	Symbol	MAXPATHLEN		126620						
ANR	127130	Symbol	strlen		126620						
ANR	127131	Symbol	* ast		126620						
ANR	127132	Symbol	op_array -> fn_flags		126620						
ANR	127133	Symbol	VCWD_GETCWD		126620						
ANR	127134	Symbol	ce -> name		126620						
ANR	127135	Symbol	strcmp		126620						
ANR	127136	Symbol	ast -> attr		126620						
ANR	127137	Symbol	ce		126620						
ANR	127138	Symbol	CG		126620						
ANR	127139	Symbol	active_op_array		126620						
ANR	127140	Symbol	compiled_filename		126620						
ANR	127141	Symbol	zend_concat3		126620						
ANR	127142	Symbol	* op_array		126620						
ANR	127143	Symbol	op_array -> scope		126620						
ANR	127144	Symbol	ZSTR_VAL		126620						
ANR	127145	Symbol	op_array -> function_name		126620						
ANR	127146	Symbol	ZEND_ACC_TRAIT		126620						
ANR	127147	Symbol	ce -> ce_flags		126620						
ANR	127148	Symbol	ZEND_ACC_CLOSURE		126620						
ANR	127149	Symbol	filename		126620						
ANR	127150	Symbol	current_namespace		126620						
ANR	127151	Symbol	ZSTR_LEN		126620						
ANR	127152	Symbol	zv		126620						
ANR	127153	Symbol	FC		126620						
ANR	127154	Symbol	op_array		126620						
ANR	127155	Function	zend_try_ct_eval_binary_op	5782:0:171196:171644							
ANR	127156	FunctionDef	"zend_try_ct_eval_binary_op (zval * result , uint32_t opcode , zval * op1 , zval * op2)"		127155	0					
ANR	127157	CompoundStatement		5783:0:171310:171644	127155	0					
ANR	127158	IdentifierDeclStatement	binary_op_type fn = get_binary_op ( opcode ) ;	5784:1:171313:171354	127155	0	True				
ANR	127159	IdentifierDecl	fn = get_binary_op ( opcode )		127155	0					
ANR	127160	IdentifierDeclType	binary_op_type		127155	0					
ANR	127161	Identifier	fn		127155	1					
ANR	127162	AssignmentExpression	fn = get_binary_op ( opcode )		127155	2		=			
ANR	127163	Identifier	fn		127155	0					
ANR	127164	CallExpression	get_binary_op ( opcode )		127155	1					
ANR	127165	Callee	get_binary_op		127155	0					
ANR	127166	Identifier	get_binary_op		127155	0					
ANR	127167	ArgumentList	opcode		127155	1					
ANR	127168	Argument	opcode		127155	0					
ANR	127169	Identifier	opcode		127155	0					
ANR	127170	IfStatement	if ( ( opcode == ZEND_DIV || opcode == ZEND_MOD ) && zval_get_long ( op2 ) == 0 )		127155	1					
ANR	127171	Condition	( opcode == ZEND_DIV || opcode == ZEND_MOD ) && zval_get_long ( op2 ) == 0	5787:5:171417:171490	127155	0	True				
ANR	127172	AndExpression	( opcode == ZEND_DIV || opcode == ZEND_MOD ) && zval_get_long ( op2 ) == 0		127155	0		&&			
ANR	127173	OrExpression	opcode == ZEND_DIV || opcode == ZEND_MOD		127155	0		||			
ANR	127174	EqualityExpression	opcode == ZEND_DIV		127155	0		==			
ANR	127175	Identifier	opcode		127155	0					
ANR	127176	Identifier	ZEND_DIV		127155	1					
ANR	127177	EqualityExpression	opcode == ZEND_MOD		127155	1		==			
ANR	127178	Identifier	opcode		127155	0					
ANR	127179	Identifier	ZEND_MOD		127155	1					
ANR	127180	EqualityExpression	zval_get_long ( op2 ) == 0		127155	1		==			
ANR	127181	CallExpression	zval_get_long ( op2 )		127155	0					
ANR	127182	Callee	zval_get_long		127155	0					
ANR	127183	Identifier	zval_get_long		127155	0					
ANR	127184	ArgumentList	op2		127155	1					
ANR	127185	Argument	op2		127155	0					
ANR	127186	Identifier	op2		127155	0					
ANR	127187	PrimaryExpression	0		127155	1					
ANR	127188	CompoundStatement		6:30:182:182	127155	1					
ANR	127189	ReturnStatement	return 0 ;	5789:2:171497:171505	127155	0	True				
ANR	127190	PrimaryExpression	0		127155	0					
ANR	127191	ElseStatement	else		127155	0					
ANR	127192	IfStatement	if ( ( opcode == ZEND_SL || opcode == ZEND_SR ) && zval_get_long ( op2 ) < 0 )		127155	0					
ANR	127193	Condition	( opcode == ZEND_SL || opcode == ZEND_SR ) && zval_get_long ( op2 ) < 0	5790:12:171519:171589	127155	0	True				
ANR	127194	AndExpression	( opcode == ZEND_SL || opcode == ZEND_SR ) && zval_get_long ( op2 ) < 0		127155	0		&&			
ANR	127195	OrExpression	opcode == ZEND_SL || opcode == ZEND_SR		127155	0		||			
ANR	127196	EqualityExpression	opcode == ZEND_SL		127155	0		==			
ANR	127197	Identifier	opcode		127155	0					
ANR	127198	Identifier	ZEND_SL		127155	1					
ANR	127199	EqualityExpression	opcode == ZEND_SR		127155	1		==			
ANR	127200	Identifier	opcode		127155	0					
ANR	127201	Identifier	ZEND_SR		127155	1					
ANR	127202	RelationalExpression	zval_get_long ( op2 ) < 0		127155	1		<			
ANR	127203	CallExpression	zval_get_long ( op2 )		127155	0					
ANR	127204	Callee	zval_get_long		127155	0					
ANR	127205	Identifier	zval_get_long		127155	0					
ANR	127206	ArgumentList	op2		127155	1					
ANR	127207	Argument	op2		127155	0					
ANR	127208	Identifier	op2		127155	0					
ANR	127209	PrimaryExpression	0		127155	1					
ANR	127210	CompoundStatement		9:29:281:281	127155	1					
ANR	127211	ReturnStatement	return 0 ;	5792:2:171596:171604	127155	0	True				
ANR	127212	PrimaryExpression	0		127155	0					
ANR	127213	ExpressionStatement	"fn ( result , op1 , op2 )"	5795:1:171611:171631	127155	2	True				
ANR	127214	CallExpression	"fn ( result , op1 , op2 )"		127155	0					
ANR	127215	Callee	fn		127155	0					
ANR	127216	Identifier	fn		127155	0					
ANR	127217	ArgumentList	result		127155	1					
ANR	127218	Argument	result		127155	0					
ANR	127219	Identifier	result		127155	0					
ANR	127220	Argument	op1		127155	1					
ANR	127221	Identifier	op1		127155	0					
ANR	127222	Argument	op2		127155	2					
ANR	127223	Identifier	op2		127155	0					
ANR	127224	ReturnStatement	return 1 ;	5796:1:171634:171642	127155	3	True				
ANR	127225	PrimaryExpression	1		127155	0					
ANR	127226	ReturnType	static inline zend_bool		127155	1					
ANR	127227	Identifier	zend_try_ct_eval_binary_op		127155	2					
ANR	127228	ParameterList	"zval * result , uint32_t opcode , zval * op1 , zval * op2"		127155	3					
ANR	127229	Parameter	zval * result	5782:51:171247:171258	127155	0	True				
ANR	127230	ParameterType	zval *		127155	0					
ANR	127231	Identifier	result		127155	1					
ANR	127232	Parameter	uint32_t opcode	5782:65:171261:171275	127155	1	True				
ANR	127233	ParameterType	uint32_t		127155	0					
ANR	127234	Identifier	opcode		127155	1					
ANR	127235	Parameter	zval * op1	5782:82:171278:171286	127155	2	True				
ANR	127236	ParameterType	zval *		127155	0					
ANR	127237	Identifier	op1		127155	1					
ANR	127238	Parameter	zval * op2	5782:93:171289:171297	127155	3	True				
ANR	127239	ParameterType	zval *		127155	0					
ANR	127240	Identifier	op2		127155	1					
ANR	127241	CFGEntryNode	ENTRY		127155		True				
ANR	127242	CFGExitNode	EXIT		127155		True				
ANR	127243	Symbol	result		127155						
ANR	127244	Symbol	op2		127155						
ANR	127245	Symbol	op1		127155						
ANR	127246	Symbol	get_binary_op		127155						
ANR	127247	Symbol	zval_get_long		127155						
ANR	127248	Symbol	ZEND_SR		127155						
ANR	127249	Symbol	fn		127155						
ANR	127250	Symbol	ZEND_MOD		127155						
ANR	127251	Symbol	opcode		127155						
ANR	127252	Symbol	ZEND_SL		127155						
ANR	127253	Symbol	ZEND_DIV		127155						
ANR	127254	Function	zend_ct_eval_unary_op	5800:0:171657:171810							
ANR	127255	FunctionDef	"zend_ct_eval_unary_op (zval * result , uint32_t opcode , zval * op)"		127254	0					
ANR	127256	CompoundStatement		5801:0:171749:171810	127254	0					
ANR	127257	IdentifierDeclStatement	unary_op_type fn = get_unary_op ( opcode ) ;	5802:1:171752:171791	127254	0	True				
ANR	127258	IdentifierDecl	fn = get_unary_op ( opcode )		127254	0					
ANR	127259	IdentifierDeclType	unary_op_type		127254	0					
ANR	127260	Identifier	fn		127254	1					
ANR	127261	AssignmentExpression	fn = get_unary_op ( opcode )		127254	2		=			
ANR	127262	Identifier	fn		127254	0					
ANR	127263	CallExpression	get_unary_op ( opcode )		127254	1					
ANR	127264	Callee	get_unary_op		127254	0					
ANR	127265	Identifier	get_unary_op		127254	0					
ANR	127266	ArgumentList	opcode		127254	1					
ANR	127267	Argument	opcode		127254	0					
ANR	127268	Identifier	opcode		127254	0					
ANR	127269	ExpressionStatement	"fn ( result , op )"	5803:1:171794:171808	127254	1	True				
ANR	127270	CallExpression	"fn ( result , op )"		127254	0					
ANR	127271	Callee	fn		127254	0					
ANR	127272	Identifier	fn		127254	0					
ANR	127273	ArgumentList	result		127254	1					
ANR	127274	Argument	result		127254	0					
ANR	127275	Identifier	result		127254	0					
ANR	127276	Argument	op		127254	1					
ANR	127277	Identifier	op		127254	0					
ANR	127278	ReturnType	static inline void		127254	1					
ANR	127279	Identifier	zend_ct_eval_unary_op		127254	2					
ANR	127280	ParameterList	"zval * result , uint32_t opcode , zval * op"		127254	3					
ANR	127281	Parameter	zval * result	5800:41:171698:171709	127254	0	True				
ANR	127282	ParameterType	zval *		127254	0					
ANR	127283	Identifier	result		127254	1					
ANR	127284	Parameter	uint32_t opcode	5800:55:171712:171726	127254	1	True				
ANR	127285	ParameterType	uint32_t		127254	0					
ANR	127286	Identifier	opcode		127254	1					
ANR	127287	Parameter	zval * op	5800:72:171729:171736	127254	2	True				
ANR	127288	ParameterType	zval *		127254	0					
ANR	127289	Identifier	op		127254	1					
ANR	127290	CFGEntryNode	ENTRY		127254		True				
ANR	127291	CFGExitNode	EXIT		127254		True				
ANR	127292	Symbol	result		127254						
ANR	127293	Symbol	op		127254						
ANR	127294	Symbol	get_unary_op		127254						
ANR	127295	Symbol	fn		127254						
ANR	127296	Symbol	opcode		127254						
ANR	127297	Function	zend_ct_eval_unary_pm	5807:0:171823:172061							
ANR	127298	FunctionDef	"zend_ct_eval_unary_pm (zval * result , zend_ast_kind kind , zval * op)"		127297	0					
ANR	127299	CompoundStatement		5808:0:171918:172061	127297	0					
ANR	127300	IdentifierDeclStatement	binary_op_type fn = kind == ZEND_AST_UNARY_PLUS ? add_function : sub_function ;	5809:1:171921:172000	127297	0	True				
ANR	127301	IdentifierDecl	fn = kind == ZEND_AST_UNARY_PLUS ? add_function : sub_function		127297	0					
ANR	127302	IdentifierDeclType	binary_op_type		127297	0					
ANR	127303	Identifier	fn		127297	1					
ANR	127304	AssignmentExpression	fn = kind == ZEND_AST_UNARY_PLUS ? add_function : sub_function		127297	2		=			
ANR	127305	Identifier	fn		127297	0					
ANR	127306	ConditionalExpression	kind == ZEND_AST_UNARY_PLUS ? add_function : sub_function		127297	1					
ANR	127307	Condition	kind == ZEND_AST_UNARY_PLUS		127297	0					
ANR	127308	EqualityExpression	kind == ZEND_AST_UNARY_PLUS		127297	0		==			
ANR	127309	Identifier	kind		127297	0					
ANR	127310	Identifier	ZEND_AST_UNARY_PLUS		127297	1					
ANR	127311	Identifier	add_function		127297	1					
ANR	127312	Identifier	sub_function		127297	2					
ANR	127313	IdentifierDeclStatement	zval left ;	5812:1:172004:172013	127297	1	True				
ANR	127314	IdentifierDecl	left		127297	0					
ANR	127315	IdentifierDeclType	zval		127297	0					
ANR	127316	Identifier	left		127297	1					
ANR	127317	ExpressionStatement	"ZVAL_LONG ( & left , 0 )"	5813:1:172016:172035	127297	2	True				
ANR	127318	CallExpression	"ZVAL_LONG ( & left , 0 )"		127297	0					
ANR	127319	Callee	ZVAL_LONG		127297	0					
ANR	127320	Identifier	ZVAL_LONG		127297	0					
ANR	127321	ArgumentList	& left		127297	1					
ANR	127322	Argument	& left		127297	0					
ANR	127323	UnaryOperationExpression	& left		127297	0					
ANR	127324	UnaryOperator	&		127297	0					
ANR	127325	Identifier	left		127297	1					
ANR	127326	Argument	0		127297	1					
ANR	127327	PrimaryExpression	0		127297	0					
ANR	127328	ExpressionStatement	"fn ( result , & left , op )"	5814:1:172038:172059	127297	3	True				
ANR	127329	CallExpression	"fn ( result , & left , op )"		127297	0					
ANR	127330	Callee	fn		127297	0					
ANR	127331	Identifier	fn		127297	0					
ANR	127332	ArgumentList	result		127297	1					
ANR	127333	Argument	result		127297	0					
ANR	127334	Identifier	result		127297	0					
ANR	127335	Argument	& left		127297	1					
ANR	127336	UnaryOperationExpression	& left		127297	0					
ANR	127337	UnaryOperator	&		127297	0					
ANR	127338	Identifier	left		127297	1					
ANR	127339	Argument	op		127297	2					
ANR	127340	Identifier	op		127297	0					
ANR	127341	ReturnType	static inline void		127297	1					
ANR	127342	Identifier	zend_ct_eval_unary_pm		127297	2					
ANR	127343	ParameterList	"zval * result , zend_ast_kind kind , zval * op"		127297	3					
ANR	127344	Parameter	zval * result	5807:41:171864:171875	127297	0	True				
ANR	127345	ParameterType	zval *		127297	0					
ANR	127346	Identifier	result		127297	1					
ANR	127347	Parameter	zend_ast_kind kind	5807:55:171878:171895	127297	1	True				
ANR	127348	ParameterType	zend_ast_kind		127297	0					
ANR	127349	Identifier	kind		127297	1					
ANR	127350	Parameter	zval * op	5807:75:171898:171905	127297	2	True				
ANR	127351	ParameterType	zval *		127297	0					
ANR	127352	Identifier	op		127297	1					
ANR	127353	CFGEntryNode	ENTRY		127297		True				
ANR	127354	CFGExitNode	EXIT		127297		True				
ANR	127355	Symbol	result		127297						
ANR	127356	Symbol	op		127297						
ANR	127357	Symbol	sub_function		127297						
ANR	127358	Symbol	ZEND_AST_UNARY_PLUS		127297						
ANR	127359	Symbol	left		127297						
ANR	127360	Symbol	kind		127297						
ANR	127361	Symbol	fn		127297						
ANR	127362	Symbol	add_function		127297						
ANR	127363	Symbol	& left		127297						
ANR	127364	Function	zend_ct_eval_greater	5818:0:172074:172307							
ANR	127365	FunctionDef	"zend_ct_eval_greater (zval * result , zend_ast_kind kind , zval * op1 , zval * op2)"		127364	0					
ANR	127366	CompoundStatement		5819:0:172180:172307	127364	0					
ANR	127367	IdentifierDeclStatement	binary_op_type fn = kind == ZEND_AST_GREATER ? is_smaller_function : is_smaller_or_equal_function ;	5820:1:172183:172282	127364	0	True				
ANR	127368	IdentifierDecl	fn = kind == ZEND_AST_GREATER ? is_smaller_function : is_smaller_or_equal_function		127364	0					
ANR	127369	IdentifierDeclType	binary_op_type		127364	0					
ANR	127370	Identifier	fn		127364	1					
ANR	127371	AssignmentExpression	fn = kind == ZEND_AST_GREATER ? is_smaller_function : is_smaller_or_equal_function		127364	2		=			
ANR	127372	Identifier	fn		127364	0					
ANR	127373	ConditionalExpression	kind == ZEND_AST_GREATER ? is_smaller_function : is_smaller_or_equal_function		127364	1					
ANR	127374	Condition	kind == ZEND_AST_GREATER		127364	0					
ANR	127375	EqualityExpression	kind == ZEND_AST_GREATER		127364	0		==			
ANR	127376	Identifier	kind		127364	0					
ANR	127377	Identifier	ZEND_AST_GREATER		127364	1					
ANR	127378	Identifier	is_smaller_function		127364	1					
ANR	127379	Identifier	is_smaller_or_equal_function		127364	2					
ANR	127380	ExpressionStatement	"fn ( result , op2 , op1 )"	5822:1:172285:172305	127364	1	True				
ANR	127381	CallExpression	"fn ( result , op2 , op1 )"		127364	0					
ANR	127382	Callee	fn		127364	0					
ANR	127383	Identifier	fn		127364	0					
ANR	127384	ArgumentList	result		127364	1					
ANR	127385	Argument	result		127364	0					
ANR	127386	Identifier	result		127364	0					
ANR	127387	Argument	op2		127364	1					
ANR	127388	Identifier	op2		127364	0					
ANR	127389	Argument	op1		127364	2					
ANR	127390	Identifier	op1		127364	0					
ANR	127391	ReturnType	static inline void		127364	1					
ANR	127392	Identifier	zend_ct_eval_greater		127364	2					
ANR	127393	ParameterList	"zval * result , zend_ast_kind kind , zval * op1 , zval * op2"		127364	3					
ANR	127394	Parameter	zval * result	5818:40:172114:172125	127364	0	True				
ANR	127395	ParameterType	zval *		127364	0					
ANR	127396	Identifier	result		127364	1					
ANR	127397	Parameter	zend_ast_kind kind	5818:54:172128:172145	127364	1	True				
ANR	127398	ParameterType	zend_ast_kind		127364	0					
ANR	127399	Identifier	kind		127364	1					
ANR	127400	Parameter	zval * op1	5818:74:172148:172156	127364	2	True				
ANR	127401	ParameterType	zval *		127364	0					
ANR	127402	Identifier	op1		127364	1					
ANR	127403	Parameter	zval * op2	5818:85:172159:172167	127364	3	True				
ANR	127404	ParameterType	zval *		127364	0					
ANR	127405	Identifier	op2		127364	1					
ANR	127406	CFGEntryNode	ENTRY		127364		True				
ANR	127407	CFGExitNode	EXIT		127364		True				
ANR	127408	Symbol	result		127364						
ANR	127409	Symbol	op2		127364						
ANR	127410	Symbol	op1		127364						
ANR	127411	Symbol	is_smaller_function		127364						
ANR	127412	Symbol	kind		127364						
ANR	127413	Symbol	is_smaller_or_equal_function		127364						
ANR	127414	Symbol	fn		127364						
ANR	127415	Symbol	ZEND_AST_GREATER		127364						
ANR	127416	Function	zend_try_ct_eval_array	5826:0:172320:174149							
ANR	127417	FunctionDef	"zend_try_ct_eval_array (zval * result , zend_ast * ast)"		127416	0					
ANR	127418	CompoundStatement		5827:0:172399:174149	127416	0					
ANR	127419	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	5828:1:172402:172446	127416	0	True				
ANR	127420	IdentifierDecl	* list = zend_ast_get_list ( ast )		127416	0					
ANR	127421	IdentifierDeclType	zend_ast_list *		127416	0					
ANR	127422	Identifier	list		127416	1					
ANR	127423	AssignmentExpression	* list = zend_ast_get_list ( ast )		127416	2		=			
ANR	127424	Identifier	list		127416	0					
ANR	127425	CallExpression	zend_ast_get_list ( ast )		127416	1					
ANR	127426	Callee	zend_ast_get_list		127416	0					
ANR	127427	Identifier	zend_ast_get_list		127416	0					
ANR	127428	ArgumentList	ast		127416	1					
ANR	127429	Argument	ast		127416	0					
ANR	127430	Identifier	ast		127416	0					
ANR	127431	IdentifierDeclStatement	uint32_t i ;	5829:1:172449:172459	127416	1	True				
ANR	127432	IdentifierDecl	i		127416	0					
ANR	127433	IdentifierDeclType	uint32_t		127416	0					
ANR	127434	Identifier	i		127416	1					
ANR	127435	IdentifierDeclStatement	zend_bool is_constant = 1 ;	5830:1:172462:172487	127416	2	True				
ANR	127436	IdentifierDecl	is_constant = 1		127416	0					
ANR	127437	IdentifierDeclType	zend_bool		127416	0					
ANR	127438	Identifier	is_constant		127416	1					
ANR	127439	AssignmentExpression	is_constant = 1		127416	2		=			
ANR	127440	Identifier	is_constant		127416	0					
ANR	127441	PrimaryExpression	1		127416	1					
ANR	127442	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		127416	3					
ANR	127443	ForInit	i = 0 ;	5833:6:172563:172568	127416	0	True				
ANR	127444	AssignmentExpression	i = 0		127416	0		=			
ANR	127445	Identifier	i		127416	0					
ANR	127446	PrimaryExpression	0		127416	1					
ANR	127447	Condition	i < list -> children	5833:13:172570:172587	127416	1	True				
ANR	127448	RelationalExpression	i < list -> children		127416	0		<			
ANR	127449	Identifier	i		127416	0					
ANR	127450	PtrMemberAccess	list -> children		127416	1					
ANR	127451	Identifier	list		127416	0					
ANR	127452	Identifier	children		127416	1					
ANR	127453	UnaryExpression	++ i	5833:33:172590:172592	127416	2	True				
ANR	127454	IncDec	++		127416	0					
ANR	127455	Identifier	i		127416	1					
ANR	127456	CompoundStatement		9:2:238:271	127416	3					
ANR	127457	IdentifierDeclStatement	zend_ast * elem_ast = list -> child [ i ] ;	5834:2:172599:172634	127416	0	True				
ANR	127458	IdentifierDecl	* elem_ast = list -> child [ i ]		127416	0					
ANR	127459	IdentifierDeclType	zend_ast *		127416	0					
ANR	127460	Identifier	elem_ast		127416	1					
ANR	127461	AssignmentExpression	* elem_ast = list -> child [ i ]		127416	2		=			
ANR	127462	Identifier	elem_ast		127416	0					
ANR	127463	ArrayIndexing	list -> child [ i ]		127416	1					
ANR	127464	PtrMemberAccess	list -> child		127416	0					
ANR	127465	Identifier	list		127416	0					
ANR	127466	Identifier	child		127416	1					
ANR	127467	Identifier	i		127416	1					
ANR	127468	IdentifierDeclStatement	zend_bool by_ref = elem_ast -> attr ;	5835:2:172638:172671	127416	1	True				
ANR	127469	IdentifierDecl	by_ref = elem_ast -> attr		127416	0					
ANR	127470	IdentifierDeclType	zend_bool		127416	0					
ANR	127471	Identifier	by_ref		127416	1					
ANR	127472	AssignmentExpression	by_ref = elem_ast -> attr		127416	2		=			
ANR	127473	Identifier	by_ref		127416	0					
ANR	127474	PtrMemberAccess	elem_ast -> attr		127416	1					
ANR	127475	Identifier	elem_ast		127416	0					
ANR	127476	Identifier	attr		127416	1					
ANR	127477	ExpressionStatement	zend_eval_const_expr ( & elem_ast -> child [ 0 ] )	5836:2:172675:172716	127416	2	True				
ANR	127478	CallExpression	zend_eval_const_expr ( & elem_ast -> child [ 0 ] )		127416	0					
ANR	127479	Callee	zend_eval_const_expr		127416	0					
ANR	127480	Identifier	zend_eval_const_expr		127416	0					
ANR	127481	ArgumentList	& elem_ast -> child [ 0 ]		127416	1					
ANR	127482	Argument	& elem_ast -> child [ 0 ]		127416	0					
ANR	127483	UnaryOperationExpression	& elem_ast -> child [ 0 ]		127416	0					
ANR	127484	UnaryOperator	&		127416	0					
ANR	127485	ArrayIndexing	elem_ast -> child [ 0 ]		127416	1					
ANR	127486	PtrMemberAccess	elem_ast -> child		127416	0					
ANR	127487	Identifier	elem_ast		127416	0					
ANR	127488	Identifier	child		127416	1					
ANR	127489	PrimaryExpression	0		127416	1					
ANR	127490	ExpressionStatement	zend_eval_const_expr ( & elem_ast -> child [ 1 ] )	5837:2:172720:172761	127416	3	True				
ANR	127491	CallExpression	zend_eval_const_expr ( & elem_ast -> child [ 1 ] )		127416	0					
ANR	127492	Callee	zend_eval_const_expr		127416	0					
ANR	127493	Identifier	zend_eval_const_expr		127416	0					
ANR	127494	ArgumentList	& elem_ast -> child [ 1 ]		127416	1					
ANR	127495	Argument	& elem_ast -> child [ 1 ]		127416	0					
ANR	127496	UnaryOperationExpression	& elem_ast -> child [ 1 ]		127416	0					
ANR	127497	UnaryOperator	&		127416	0					
ANR	127498	ArrayIndexing	elem_ast -> child [ 1 ]		127416	1					
ANR	127499	PtrMemberAccess	elem_ast -> child		127416	0					
ANR	127500	Identifier	elem_ast		127416	0					
ANR	127501	Identifier	child		127416	1					
ANR	127502	PrimaryExpression	1		127416	1					
ANR	127503	IfStatement	if ( by_ref || elem_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ( elem_ast -> child [ 1 ] && elem_ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL ) )		127416	4					
ANR	127504	Condition	by_ref || elem_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ( elem_ast -> child [ 1 ] && elem_ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL )	5839:6:172770:172892	127416	0	True				
ANR	127505	OrExpression	by_ref || elem_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ( elem_ast -> child [ 1 ] && elem_ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL )		127416	0		||			
ANR	127506	Identifier	by_ref		127416	0					
ANR	127507	OrExpression	elem_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ( elem_ast -> child [ 1 ] && elem_ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL )		127416	1		||			
ANR	127508	EqualityExpression	elem_ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		127416	0		!=			
ANR	127509	PtrMemberAccess	elem_ast -> child [ 0 ] -> kind		127416	0					
ANR	127510	ArrayIndexing	elem_ast -> child [ 0 ]		127416	0					
ANR	127511	PtrMemberAccess	elem_ast -> child		127416	0					
ANR	127512	Identifier	elem_ast		127416	0					
ANR	127513	Identifier	child		127416	1					
ANR	127514	PrimaryExpression	0		127416	1					
ANR	127515	Identifier	kind		127416	1					
ANR	127516	Identifier	ZEND_AST_ZVAL		127416	1					
ANR	127517	AndExpression	elem_ast -> child [ 1 ] && elem_ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		127416	1		&&			
ANR	127518	ArrayIndexing	elem_ast -> child [ 1 ]		127416	0					
ANR	127519	PtrMemberAccess	elem_ast -> child		127416	0					
ANR	127520	Identifier	elem_ast		127416	0					
ANR	127521	Identifier	child		127416	1					
ANR	127522	PrimaryExpression	1		127416	1					
ANR	127523	EqualityExpression	elem_ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		127416	1		!=			
ANR	127524	PtrMemberAccess	elem_ast -> child [ 1 ] -> kind		127416	0					
ANR	127525	ArrayIndexing	elem_ast -> child [ 1 ]		127416	0					
ANR	127526	PtrMemberAccess	elem_ast -> child		127416	0					
ANR	127527	Identifier	elem_ast		127416	0					
ANR	127528	Identifier	child		127416	1					
ANR	127529	PrimaryExpression	1		127416	1					
ANR	127530	Identifier	kind		127416	1					
ANR	127531	Identifier	ZEND_AST_ZVAL		127416	1					
ANR	127532	CompoundStatement		15:4:498:498	127416	1					
ANR	127533	ExpressionStatement	is_constant = 0	5842:3:172903:172918	127416	0	True				
ANR	127534	AssignmentExpression	is_constant = 0		127416	0		=			
ANR	127535	Identifier	is_constant		127416	0					
ANR	127536	PrimaryExpression	0		127416	1					
ANR	127537	IfStatement	if ( ! is_constant )		127416	4					
ANR	127538	Condition	! is_constant	5846:5:172933:172944	127416	0	True				
ANR	127539	UnaryOperationExpression	! is_constant		127416	0					
ANR	127540	UnaryOperator	!		127416	0					
ANR	127541	Identifier	is_constant		127416	1					
ANR	127542	CompoundStatement		20:19:547:547	127416	1					
ANR	127543	ReturnStatement	return 0 ;	5847:2:172951:172959	127416	0	True				
ANR	127544	PrimaryExpression	0		127416	0					
ANR	127545	ExpressionStatement	"array_init_size ( result , list -> children )"	5850:1:172966:173005	127416	5	True				
ANR	127546	CallExpression	"array_init_size ( result , list -> children )"		127416	0					
ANR	127547	Callee	array_init_size		127416	0					
ANR	127548	Identifier	array_init_size		127416	0					
ANR	127549	ArgumentList	result		127416	1					
ANR	127550	Argument	result		127416	0					
ANR	127551	Identifier	result		127416	0					
ANR	127552	Argument	list -> children		127416	1					
ANR	127553	PtrMemberAccess	list -> children		127416	0					
ANR	127554	Identifier	list		127416	0					
ANR	127555	Identifier	children		127416	1					
ANR	127556	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		127416	6					
ANR	127557	ForInit	i = 0 ;	5851:6:173013:173018	127416	0	True				
ANR	127558	AssignmentExpression	i = 0		127416	0		=			
ANR	127559	Identifier	i		127416	0					
ANR	127560	PrimaryExpression	0		127416	1					
ANR	127561	Condition	i < list -> children	5851:13:173020:173037	127416	1	True				
ANR	127562	RelationalExpression	i < list -> children		127416	0		<			
ANR	127563	Identifier	i		127416	0					
ANR	127564	PtrMemberAccess	list -> children		127416	1					
ANR	127565	Identifier	list		127416	0					
ANR	127566	Identifier	children		127416	1					
ANR	127567	UnaryExpression	++ i	5851:33:173040:173042	127416	2	True				
ANR	127568	IncDec	++		127416	0					
ANR	127569	Identifier	i		127416	1					
ANR	127570	CompoundStatement		30:2:775:817	127416	3					
ANR	127571	IdentifierDeclStatement	zend_ast * elem_ast = list -> child [ i ] ;	5852:2:173049:173084	127416	0	True				
ANR	127572	IdentifierDecl	* elem_ast = list -> child [ i ]		127416	0					
ANR	127573	IdentifierDeclType	zend_ast *		127416	0					
ANR	127574	Identifier	elem_ast		127416	1					
ANR	127575	AssignmentExpression	* elem_ast = list -> child [ i ]		127416	2		=			
ANR	127576	Identifier	elem_ast		127416	0					
ANR	127577	ArrayIndexing	list -> child [ i ]		127416	1					
ANR	127578	PtrMemberAccess	list -> child		127416	0					
ANR	127579	Identifier	list		127416	0					
ANR	127580	Identifier	child		127416	1					
ANR	127581	Identifier	i		127416	1					
ANR	127582	IdentifierDeclStatement	zend_ast * value_ast = elem_ast -> child [ 0 ] ;	5853:2:173088:173128	127416	1	True				
ANR	127583	IdentifierDecl	* value_ast = elem_ast -> child [ 0 ]		127416	0					
ANR	127584	IdentifierDeclType	zend_ast *		127416	0					
ANR	127585	Identifier	value_ast		127416	1					
ANR	127586	AssignmentExpression	* value_ast = elem_ast -> child [ 0 ]		127416	2		=			
ANR	127587	Identifier	value_ast		127416	0					
ANR	127588	ArrayIndexing	elem_ast -> child [ 0 ]		127416	1					
ANR	127589	PtrMemberAccess	elem_ast -> child		127416	0					
ANR	127590	Identifier	elem_ast		127416	0					
ANR	127591	Identifier	child		127416	1					
ANR	127592	PrimaryExpression	0		127416	1					
ANR	127593	IdentifierDeclStatement	zend_ast * key_ast = elem_ast -> child [ 1 ] ;	5854:2:173132:173170	127416	2	True				
ANR	127594	IdentifierDecl	* key_ast = elem_ast -> child [ 1 ]		127416	0					
ANR	127595	IdentifierDeclType	zend_ast *		127416	0					
ANR	127596	Identifier	key_ast		127416	1					
ANR	127597	AssignmentExpression	* key_ast = elem_ast -> child [ 1 ]		127416	2		=			
ANR	127598	Identifier	key_ast		127416	0					
ANR	127599	ArrayIndexing	elem_ast -> child [ 1 ]		127416	1					
ANR	127600	PtrMemberAccess	elem_ast -> child		127416	0					
ANR	127601	Identifier	elem_ast		127416	0					
ANR	127602	Identifier	child		127416	1					
ANR	127603	PrimaryExpression	1		127416	1					
ANR	127604	IdentifierDeclStatement	zval * value = zend_ast_get_zval ( value_ast ) ;	5856:2:173175:173217	127416	3	True				
ANR	127605	IdentifierDecl	* value = zend_ast_get_zval ( value_ast )		127416	0					
ANR	127606	IdentifierDeclType	zval *		127416	0					
ANR	127607	Identifier	value		127416	1					
ANR	127608	AssignmentExpression	* value = zend_ast_get_zval ( value_ast )		127416	2		=			
ANR	127609	Identifier	value		127416	0					
ANR	127610	CallExpression	zend_ast_get_zval ( value_ast )		127416	1					
ANR	127611	Callee	zend_ast_get_zval		127416	0					
ANR	127612	Identifier	zend_ast_get_zval		127416	0					
ANR	127613	ArgumentList	value_ast		127416	1					
ANR	127614	Argument	value_ast		127416	0					
ANR	127615	Identifier	value_ast		127416	0					
ANR	127616	IfStatement	if ( Z_REFCOUNTED_P ( value ) )		127416	4					
ANR	127617	Condition	Z_REFCOUNTED_P ( value )	5857:6:173225:173245	127416	0	True				
ANR	127618	CallExpression	Z_REFCOUNTED_P ( value )		127416	0					
ANR	127619	Callee	Z_REFCOUNTED_P		127416	0					
ANR	127620	Identifier	Z_REFCOUNTED_P		127416	0					
ANR	127621	ArgumentList	value		127416	1					
ANR	127622	Argument	value		127416	0					
ANR	127623	Identifier	value		127416	0					
ANR	127624	ExpressionStatement	Z_ADDREF_P ( value )	5857:29:173248:173265	127416	1	True				
ANR	127625	CallExpression	Z_ADDREF_P ( value )		127416	0					
ANR	127626	Callee	Z_ADDREF_P		127416	0					
ANR	127627	Identifier	Z_ADDREF_P		127416	0					
ANR	127628	ArgumentList	value		127416	1					
ANR	127629	Argument	value		127416	0					
ANR	127630	Identifier	value		127416	0					
ANR	127631	IfStatement	if ( key_ast )		127416	5					
ANR	127632	Condition	key_ast	5859:6:173274:173280	127416	0	True				
ANR	127633	Identifier	key_ast		127416	0					
ANR	127634	CompoundStatement		34:3:888:926	127416	1					
ANR	127635	IdentifierDeclStatement	zval * key = zend_ast_get_zval ( key_ast ) ;	5860:3:173288:173326	127416	0	True				
ANR	127636	IdentifierDecl	* key = zend_ast_get_zval ( key_ast )		127416	0					
ANR	127637	IdentifierDeclType	zval *		127416	0					
ANR	127638	Identifier	key		127416	1					
ANR	127639	AssignmentExpression	* key = zend_ast_get_zval ( key_ast )		127416	2		=			
ANR	127640	Identifier	key		127416	0					
ANR	127641	CallExpression	zend_ast_get_zval ( key_ast )		127416	1					
ANR	127642	Callee	zend_ast_get_zval		127416	0					
ANR	127643	Identifier	zend_ast_get_zval		127416	0					
ANR	127644	ArgumentList	key_ast		127416	1					
ANR	127645	Argument	key_ast		127416	0					
ANR	127646	Identifier	key_ast		127416	0					
ANR	127647	SwitchStatement	switch ( Z_TYPE_P ( key ) )		127416	1					
ANR	127648	Condition	Z_TYPE_P ( key )	5861:11:173339:173351	127416	0	True				
ANR	127649	CallExpression	Z_TYPE_P ( key )		127416	0					
ANR	127650	Callee	Z_TYPE_P		127416	0					
ANR	127651	Identifier	Z_TYPE_P		127416	0					
ANR	127652	ArgumentList	key		127416	1					
ANR	127653	Argument	key		127416	0					
ANR	127654	Identifier	key		127416	0					
ANR	127655	CompoundStatement		35:26:954:954	127416	1					
ANR	127656	Label	case IS_LONG :	5862:4:173360:173372	127416	0	True				
ANR	127657	Identifier	IS_LONG		127416	0					
ANR	127658	ExpressionStatement	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , Z_LVAL_P ( key ) , value )"	5863:5:173379:173443	127416	1	True				
ANR	127659	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , Z_LVAL_P ( key ) , value )"		127416	0					
ANR	127660	Callee	zend_hash_index_update		127416	0					
ANR	127661	Identifier	zend_hash_index_update		127416	0					
ANR	127662	ArgumentList	Z_ARRVAL_P ( result )		127416	1					
ANR	127663	Argument	Z_ARRVAL_P ( result )		127416	0					
ANR	127664	CallExpression	Z_ARRVAL_P ( result )		127416	0					
ANR	127665	Callee	Z_ARRVAL_P		127416	0					
ANR	127666	Identifier	Z_ARRVAL_P		127416	0					
ANR	127667	ArgumentList	result		127416	1					
ANR	127668	Argument	result		127416	0					
ANR	127669	Identifier	result		127416	0					
ANR	127670	Argument	Z_LVAL_P ( key )		127416	1					
ANR	127671	CallExpression	Z_LVAL_P ( key )		127416	0					
ANR	127672	Callee	Z_LVAL_P		127416	0					
ANR	127673	Identifier	Z_LVAL_P		127416	0					
ANR	127674	ArgumentList	key		127416	1					
ANR	127675	Argument	key		127416	0					
ANR	127676	Identifier	key		127416	0					
ANR	127677	Argument	value		127416	2					
ANR	127678	Identifier	value		127416	0					
ANR	127679	BreakStatement	break ;	5864:5:173450:173455	127416	2	True				
ANR	127680	Label	case IS_STRING :	5865:4:173461:173475	127416	3	True				
ANR	127681	Identifier	IS_STRING		127416	0					
ANR	127682	ExpressionStatement	"zend_symtable_update ( Z_ARRVAL_P ( result ) , Z_STR_P ( key ) , value )"	5866:5:173482:173543	127416	4	True				
ANR	127683	CallExpression	"zend_symtable_update ( Z_ARRVAL_P ( result ) , Z_STR_P ( key ) , value )"		127416	0					
ANR	127684	Callee	zend_symtable_update		127416	0					
ANR	127685	Identifier	zend_symtable_update		127416	0					
ANR	127686	ArgumentList	Z_ARRVAL_P ( result )		127416	1					
ANR	127687	Argument	Z_ARRVAL_P ( result )		127416	0					
ANR	127688	CallExpression	Z_ARRVAL_P ( result )		127416	0					
ANR	127689	Callee	Z_ARRVAL_P		127416	0					
ANR	127690	Identifier	Z_ARRVAL_P		127416	0					
ANR	127691	ArgumentList	result		127416	1					
ANR	127692	Argument	result		127416	0					
ANR	127693	Identifier	result		127416	0					
ANR	127694	Argument	Z_STR_P ( key )		127416	1					
ANR	127695	CallExpression	Z_STR_P ( key )		127416	0					
ANR	127696	Callee	Z_STR_P		127416	0					
ANR	127697	Identifier	Z_STR_P		127416	0					
ANR	127698	ArgumentList	key		127416	1					
ANR	127699	Argument	key		127416	0					
ANR	127700	Identifier	key		127416	0					
ANR	127701	Argument	value		127416	2					
ANR	127702	Identifier	value		127416	0					
ANR	127703	BreakStatement	break ;	5867:5:173550:173555	127416	5	True				
ANR	127704	Label	case IS_DOUBLE :	5868:4:173561:173575	127416	6	True				
ANR	127705	Identifier	IS_DOUBLE		127416	0					
ANR	127706	ExpressionStatement	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , zend_dval_to_lval ( Z_DVAL_P ( key ) ) , value )"	5869:5:173582:173671	127416	7	True				
ANR	127707	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , zend_dval_to_lval ( Z_DVAL_P ( key ) ) , value )"		127416	0					
ANR	127708	Callee	zend_hash_index_update		127416	0					
ANR	127709	Identifier	zend_hash_index_update		127416	0					
ANR	127710	ArgumentList	Z_ARRVAL_P ( result )		127416	1					
ANR	127711	Argument	Z_ARRVAL_P ( result )		127416	0					
ANR	127712	CallExpression	Z_ARRVAL_P ( result )		127416	0					
ANR	127713	Callee	Z_ARRVAL_P		127416	0					
ANR	127714	Identifier	Z_ARRVAL_P		127416	0					
ANR	127715	ArgumentList	result		127416	1					
ANR	127716	Argument	result		127416	0					
ANR	127717	Identifier	result		127416	0					
ANR	127718	Argument	zend_dval_to_lval ( Z_DVAL_P ( key ) )		127416	1					
ANR	127719	CallExpression	zend_dval_to_lval ( Z_DVAL_P ( key ) )		127416	0					
ANR	127720	Callee	zend_dval_to_lval		127416	0					
ANR	127721	Identifier	zend_dval_to_lval		127416	0					
ANR	127722	ArgumentList	Z_DVAL_P ( key )		127416	1					
ANR	127723	Argument	Z_DVAL_P ( key )		127416	0					
ANR	127724	CallExpression	Z_DVAL_P ( key )		127416	0					
ANR	127725	Callee	Z_DVAL_P		127416	0					
ANR	127726	Identifier	Z_DVAL_P		127416	0					
ANR	127727	ArgumentList	key		127416	1					
ANR	127728	Argument	key		127416	0					
ANR	127729	Identifier	key		127416	0					
ANR	127730	Argument	value		127416	2					
ANR	127731	Identifier	value		127416	0					
ANR	127732	BreakStatement	break ;	5871:5:173678:173683	127416	8	True				
ANR	127733	Label	case IS_FALSE :	5872:4:173689:173702	127416	9	True				
ANR	127734	Identifier	IS_FALSE		127416	0					
ANR	127735	ExpressionStatement	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , 0 , value )"	5873:5:173709:173761	127416	10	True				
ANR	127736	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , 0 , value )"		127416	0					
ANR	127737	Callee	zend_hash_index_update		127416	0					
ANR	127738	Identifier	zend_hash_index_update		127416	0					
ANR	127739	ArgumentList	Z_ARRVAL_P ( result )		127416	1					
ANR	127740	Argument	Z_ARRVAL_P ( result )		127416	0					
ANR	127741	CallExpression	Z_ARRVAL_P ( result )		127416	0					
ANR	127742	Callee	Z_ARRVAL_P		127416	0					
ANR	127743	Identifier	Z_ARRVAL_P		127416	0					
ANR	127744	ArgumentList	result		127416	1					
ANR	127745	Argument	result		127416	0					
ANR	127746	Identifier	result		127416	0					
ANR	127747	Argument	0		127416	1					
ANR	127748	PrimaryExpression	0		127416	0					
ANR	127749	Argument	value		127416	2					
ANR	127750	Identifier	value		127416	0					
ANR	127751	BreakStatement	break ;	5874:5:173768:173773	127416	11	True				
ANR	127752	Label	case IS_TRUE :	5875:4:173779:173791	127416	12	True				
ANR	127753	Identifier	IS_TRUE		127416	0					
ANR	127754	ExpressionStatement	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , 1 , value )"	5876:5:173798:173850	127416	13	True				
ANR	127755	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( result ) , 1 , value )"		127416	0					
ANR	127756	Callee	zend_hash_index_update		127416	0					
ANR	127757	Identifier	zend_hash_index_update		127416	0					
ANR	127758	ArgumentList	Z_ARRVAL_P ( result )		127416	1					
ANR	127759	Argument	Z_ARRVAL_P ( result )		127416	0					
ANR	127760	CallExpression	Z_ARRVAL_P ( result )		127416	0					
ANR	127761	Callee	Z_ARRVAL_P		127416	0					
ANR	127762	Identifier	Z_ARRVAL_P		127416	0					
ANR	127763	ArgumentList	result		127416	1					
ANR	127764	Argument	result		127416	0					
ANR	127765	Identifier	result		127416	0					
ANR	127766	Argument	1		127416	1					
ANR	127767	PrimaryExpression	1		127416	0					
ANR	127768	Argument	value		127416	2					
ANR	127769	Identifier	value		127416	0					
ANR	127770	BreakStatement	break ;	5877:5:173857:173862	127416	14	True				
ANR	127771	Label	case IS_NULL :	5878:4:173868:173880	127416	15	True				
ANR	127772	Identifier	IS_NULL		127416	0					
ANR	127773	ExpressionStatement	"zend_hash_update ( Z_ARRVAL_P ( result ) , ZSTR_EMPTY_ALLOC ( ) , value )"	5879:5:173887:173950	127416	16	True				
ANR	127774	CallExpression	"zend_hash_update ( Z_ARRVAL_P ( result ) , ZSTR_EMPTY_ALLOC ( ) , value )"		127416	0					
ANR	127775	Callee	zend_hash_update		127416	0					
ANR	127776	Identifier	zend_hash_update		127416	0					
ANR	127777	ArgumentList	Z_ARRVAL_P ( result )		127416	1					
ANR	127778	Argument	Z_ARRVAL_P ( result )		127416	0					
ANR	127779	CallExpression	Z_ARRVAL_P ( result )		127416	0					
ANR	127780	Callee	Z_ARRVAL_P		127416	0					
ANR	127781	Identifier	Z_ARRVAL_P		127416	0					
ANR	127782	ArgumentList	result		127416	1					
ANR	127783	Argument	result		127416	0					
ANR	127784	Identifier	result		127416	0					
ANR	127785	Argument	ZSTR_EMPTY_ALLOC ( )		127416	1					
ANR	127786	CallExpression	ZSTR_EMPTY_ALLOC ( )		127416	0					
ANR	127787	Callee	ZSTR_EMPTY_ALLOC		127416	0					
ANR	127788	Identifier	ZSTR_EMPTY_ALLOC		127416	0					
ANR	127789	ArgumentList			127416	1					
ANR	127790	Argument	value		127416	2					
ANR	127791	Identifier	value		127416	0					
ANR	127792	BreakStatement	break ;	5880:5:173957:173962	127416	17	True				
ANR	127793	Label	default :	5881:4:173968:173975	127416	18	True				
ANR	127794	Identifier	default		127416	0					
ANR	127795	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Illegal offset type"" )"	5882:5:173982:174041	127416	19	True				
ANR	127796	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Illegal offset type"" )"		127416	0					
ANR	127797	Callee	zend_error_noreturn		127416	0					
ANR	127798	Identifier	zend_error_noreturn		127416	0					
ANR	127799	ArgumentList	E_COMPILE_ERROR		127416	1					
ANR	127800	Argument	E_COMPILE_ERROR		127416	0					
ANR	127801	Identifier	E_COMPILE_ERROR		127416	0					
ANR	127802	Argument	"""Illegal offset type"""		127416	1					
ANR	127803	PrimaryExpression	"""Illegal offset type"""		127416	0					
ANR	127804	BreakStatement	break ;	5883:5:174048:174053	127416	20	True				
ANR	127805	ElseStatement	else		127416	0					
ANR	127806	CompoundStatement		59:9:1669:1669	127416	0					
ANR	127807	ExpressionStatement	"zend_hash_next_index_insert ( Z_ARRVAL_P ( result ) , value )"	5886:3:174074:174128	127416	0	True				
ANR	127808	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( result ) , value )"		127416	0					
ANR	127809	Callee	zend_hash_next_index_insert		127416	0					
ANR	127810	Identifier	zend_hash_next_index_insert		127416	0					
ANR	127811	ArgumentList	Z_ARRVAL_P ( result )		127416	1					
ANR	127812	Argument	Z_ARRVAL_P ( result )		127416	0					
ANR	127813	CallExpression	Z_ARRVAL_P ( result )		127416	0					
ANR	127814	Callee	Z_ARRVAL_P		127416	0					
ANR	127815	Identifier	Z_ARRVAL_P		127416	0					
ANR	127816	ArgumentList	result		127416	1					
ANR	127817	Argument	result		127416	0					
ANR	127818	Identifier	result		127416	0					
ANR	127819	Argument	value		127416	1					
ANR	127820	Identifier	value		127416	0					
ANR	127821	ReturnStatement	return 1 ;	5890:1:174139:174147	127416	7	True				
ANR	127822	PrimaryExpression	1		127416	0					
ANR	127823	ReturnType	static zend_bool		127416	1					
ANR	127824	Identifier	zend_try_ct_eval_array		127416	2					
ANR	127825	ParameterList	"zval * result , zend_ast * ast"		127416	3					
ANR	127826	Parameter	zval * result	5826:40:172360:172371	127416	0	True				
ANR	127827	ParameterType	zval *		127416	0					
ANR	127828	Identifier	result		127416	1					
ANR	127829	Parameter	zend_ast * ast	5826:54:172374:172386	127416	1	True				
ANR	127830	ParameterType	zend_ast *		127416	0					
ANR	127831	Identifier	ast		127416	1					
ANR	127832	CFGEntryNode	ENTRY		127416		True				
ANR	127833	CFGExitNode	EXIT		127416		True				
ANR	127834	Symbol	is_constant		127416						
ANR	127835	Symbol	ast		127416						
ANR	127836	Symbol	E_COMPILE_ERROR		127416						
ANR	127837	Symbol	key_ast		127416						
ANR	127838	Symbol	elem_ast -> child [ 1 ] -> kind		127416						
ANR	127839	Symbol	ZSTR_EMPTY_ALLOC		127416						
ANR	127840	Symbol	result		127416						
ANR	127841	Symbol	* elem_ast		127416						
ANR	127842	Symbol	* elem_ast -> child		127416						
ANR	127843	Symbol	zend_dval_to_lval		127416						
ANR	127844	Symbol	* * list		127416						
ANR	127845	Symbol	value_ast		127416						
ANR	127846	Symbol	ZEND_AST_ZVAL		127416						
ANR	127847	Symbol	Z_ARRVAL_P		127416						
ANR	127848	Symbol	value		127416						
ANR	127849	Symbol	key		127416						
ANR	127850	Symbol	elem_ast -> child		127416						
ANR	127851	Symbol	elem_ast -> child [ 0 ] -> kind		127416						
ANR	127852	Symbol	* * * elem_ast		127416						
ANR	127853	Symbol	list -> child		127416						
ANR	127854	Symbol	elem_ast -> attr		127416						
ANR	127855	Symbol	* * elem_ast -> child		127416						
ANR	127856	Symbol	i		127416						
ANR	127857	Symbol	list		127416						
ANR	127858	Symbol	Z_TYPE_P		127416						
ANR	127859	Symbol	* * elem_ast		127416						
ANR	127860	Symbol	Z_DVAL_P		127416						
ANR	127861	Symbol	elem_ast		127416						
ANR	127862	Symbol	Z_LVAL_P		127416						
ANR	127863	Symbol	zend_ast_get_list		127416						
ANR	127864	Symbol	* i		127416						
ANR	127865	Symbol	* list		127416						
ANR	127866	Symbol	* list -> child		127416						
ANR	127867	Symbol	by_ref		127416						
ANR	127868	Symbol	Z_REFCOUNTED_P		127416						
ANR	127869	Symbol	Z_STR_P		127416						
ANR	127870	Symbol	zend_ast_get_zval		127416						
ANR	127871	Symbol	list -> children		127416						
ANR	127872	Function	zend_compile_binary_op	5894:0:174162:176098							
ANR	127873	FunctionDef	"zend_compile_binary_op (znode * result , zend_ast * ast)"		127872	0					
ANR	127874	CompoundStatement		5895:0:174230:176098	127872	0					
ANR	127875	IdentifierDeclStatement	zend_ast * left_ast = ast -> child [ 0 ] ;	5896:1:174233:174267	127872	0	True				
ANR	127876	IdentifierDecl	* left_ast = ast -> child [ 0 ]		127872	0					
ANR	127877	IdentifierDeclType	zend_ast *		127872	0					
ANR	127878	Identifier	left_ast		127872	1					
ANR	127879	AssignmentExpression	* left_ast = ast -> child [ 0 ]		127872	2		=			
ANR	127880	Identifier	left_ast		127872	0					
ANR	127881	ArrayIndexing	ast -> child [ 0 ]		127872	1					
ANR	127882	PtrMemberAccess	ast -> child		127872	0					
ANR	127883	Identifier	ast		127872	0					
ANR	127884	Identifier	child		127872	1					
ANR	127885	PrimaryExpression	0		127872	1					
ANR	127886	IdentifierDeclStatement	zend_ast * right_ast = ast -> child [ 1 ] ;	5897:1:174270:174305	127872	1	True				
ANR	127887	IdentifierDecl	* right_ast = ast -> child [ 1 ]		127872	0					
ANR	127888	IdentifierDeclType	zend_ast *		127872	0					
ANR	127889	Identifier	right_ast		127872	1					
ANR	127890	AssignmentExpression	* right_ast = ast -> child [ 1 ]		127872	2		=			
ANR	127891	Identifier	right_ast		127872	0					
ANR	127892	ArrayIndexing	ast -> child [ 1 ]		127872	1					
ANR	127893	PtrMemberAccess	ast -> child		127872	0					
ANR	127894	Identifier	ast		127872	0					
ANR	127895	Identifier	child		127872	1					
ANR	127896	PrimaryExpression	1		127872	1					
ANR	127897	IdentifierDeclStatement	uint32_t opcode = ast -> attr ;	5898:1:174308:174335	127872	2	True				
ANR	127898	IdentifierDecl	opcode = ast -> attr		127872	0					
ANR	127899	IdentifierDeclType	uint32_t		127872	0					
ANR	127900	Identifier	opcode		127872	1					
ANR	127901	AssignmentExpression	opcode = ast -> attr		127872	2		=			
ANR	127902	Identifier	opcode		127872	0					
ANR	127903	PtrMemberAccess	ast -> attr		127872	1					
ANR	127904	Identifier	ast		127872	0					
ANR	127905	Identifier	attr		127872	1					
ANR	127906	IdentifierDeclStatement	"znode left_node , right_node ;"	5900:1:174339:174366	127872	3	True				
ANR	127907	IdentifierDecl	left_node		127872	0					
ANR	127908	IdentifierDeclType	znode		127872	0					
ANR	127909	Identifier	left_node		127872	1					
ANR	127910	IdentifierDecl	right_node		127872	1					
ANR	127911	IdentifierDeclType	znode		127872	0					
ANR	127912	Identifier	right_node		127872	1					
ANR	127913	ExpressionStatement	"zend_compile_expr ( & left_node , left_ast )"	5901:1:174369:174408	127872	4	True				
ANR	127914	CallExpression	"zend_compile_expr ( & left_node , left_ast )"		127872	0					
ANR	127915	Callee	zend_compile_expr		127872	0					
ANR	127916	Identifier	zend_compile_expr		127872	0					
ANR	127917	ArgumentList	& left_node		127872	1					
ANR	127918	Argument	& left_node		127872	0					
ANR	127919	UnaryOperationExpression	& left_node		127872	0					
ANR	127920	UnaryOperator	&		127872	0					
ANR	127921	Identifier	left_node		127872	1					
ANR	127922	Argument	left_ast		127872	1					
ANR	127923	Identifier	left_ast		127872	0					
ANR	127924	ExpressionStatement	"zend_compile_expr ( & right_node , right_ast )"	5902:1:174411:174452	127872	5	True				
ANR	127925	CallExpression	"zend_compile_expr ( & right_node , right_ast )"		127872	0					
ANR	127926	Callee	zend_compile_expr		127872	0					
ANR	127927	Identifier	zend_compile_expr		127872	0					
ANR	127928	ArgumentList	& right_node		127872	1					
ANR	127929	Argument	& right_node		127872	0					
ANR	127930	UnaryOperationExpression	& right_node		127872	0					
ANR	127931	UnaryOperator	&		127872	0					
ANR	127932	Identifier	right_node		127872	1					
ANR	127933	Argument	right_ast		127872	1					
ANR	127934	Identifier	right_ast		127872	0					
ANR	127935	IfStatement	if ( left_node . op_type == IS_CONST && right_node . op_type == IS_CONST )		127872	6					
ANR	127936	Condition	left_node . op_type == IS_CONST && right_node . op_type == IS_CONST	5904:5:174460:174522	127872	0	True				
ANR	127937	AndExpression	left_node . op_type == IS_CONST && right_node . op_type == IS_CONST		127872	0		&&			
ANR	127938	EqualityExpression	left_node . op_type == IS_CONST		127872	0		==			
ANR	127939	MemberAccess	left_node . op_type		127872	0					
ANR	127940	Identifier	left_node		127872	0					
ANR	127941	Identifier	op_type		127872	1					
ANR	127942	Identifier	IS_CONST		127872	1					
ANR	127943	EqualityExpression	right_node . op_type == IS_CONST		127872	1		==			
ANR	127944	MemberAccess	right_node . op_type		127872	0					
ANR	127945	Identifier	right_node		127872	0					
ANR	127946	Identifier	op_type		127872	1					
ANR	127947	Identifier	IS_CONST		127872	1					
ANR	127948	CompoundStatement		10:70:294:294	127872	1					
ANR	127949	IfStatement	"if ( zend_try_ct_eval_binary_op ( & result -> u . constant , opcode , & left_node . u . constant , & right_node . u . constant ) )"		127872	0					
ANR	127950	Condition	"zend_try_ct_eval_binary_op ( & result -> u . constant , opcode , & left_node . u . constant , & right_node . u . constant )"	5905:6:174533:174638	127872	0	True				
ANR	127951	CallExpression	"zend_try_ct_eval_binary_op ( & result -> u . constant , opcode , & left_node . u . constant , & right_node . u . constant )"		127872	0					
ANR	127952	Callee	zend_try_ct_eval_binary_op		127872	0					
ANR	127953	Identifier	zend_try_ct_eval_binary_op		127872	0					
ANR	127954	ArgumentList	& result -> u . constant		127872	1					
ANR	127955	Argument	& result -> u . constant		127872	0					
ANR	127956	UnaryOperationExpression	& result -> u . constant		127872	0					
ANR	127957	UnaryOperator	&		127872	0					
ANR	127958	MemberAccess	result -> u . constant		127872	1					
ANR	127959	PtrMemberAccess	result -> u		127872	0					
ANR	127960	Identifier	result		127872	0					
ANR	127961	Identifier	u		127872	1					
ANR	127962	Identifier	constant		127872	1					
ANR	127963	Argument	opcode		127872	1					
ANR	127964	Identifier	opcode		127872	0					
ANR	127965	Argument	& left_node . u . constant		127872	2					
ANR	127966	UnaryOperationExpression	& left_node . u . constant		127872	0					
ANR	127967	UnaryOperator	&		127872	0					
ANR	127968	MemberAccess	left_node . u . constant		127872	1					
ANR	127969	MemberAccess	left_node . u		127872	0					
ANR	127970	Identifier	left_node		127872	0					
ANR	127971	Identifier	u		127872	1					
ANR	127972	Identifier	constant		127872	1					
ANR	127973	Argument	& right_node . u . constant		127872	3					
ANR	127974	UnaryOperationExpression	& right_node . u . constant		127872	0					
ANR	127975	UnaryOperator	&		127872	0					
ANR	127976	MemberAccess	right_node . u . constant		127872	1					
ANR	127977	MemberAccess	right_node . u		127872	0					
ANR	127978	Identifier	right_node		127872	0					
ANR	127979	Identifier	u		127872	1					
ANR	127980	Identifier	constant		127872	1					
ANR	127981	CompoundStatement		13:4:413:413	127872	1					
ANR	127982	ExpressionStatement	result -> op_type = IS_CONST	5908:3:174649:174675	127872	0	True				
ANR	127983	AssignmentExpression	result -> op_type = IS_CONST		127872	0		=			
ANR	127984	PtrMemberAccess	result -> op_type		127872	0					
ANR	127985	Identifier	result		127872	0					
ANR	127986	Identifier	op_type		127872	1					
ANR	127987	Identifier	IS_CONST		127872	1					
ANR	127988	ExpressionStatement	zval_ptr_dtor ( & left_node . u . constant )	5909:3:174680:174716	127872	1	True				
ANR	127989	CallExpression	zval_ptr_dtor ( & left_node . u . constant )		127872	0					
ANR	127990	Callee	zval_ptr_dtor		127872	0					
ANR	127991	Identifier	zval_ptr_dtor		127872	0					
ANR	127992	ArgumentList	& left_node . u . constant		127872	1					
ANR	127993	Argument	& left_node . u . constant		127872	0					
ANR	127994	UnaryOperationExpression	& left_node . u . constant		127872	0					
ANR	127995	UnaryOperator	&		127872	0					
ANR	127996	MemberAccess	left_node . u . constant		127872	1					
ANR	127997	MemberAccess	left_node . u		127872	0					
ANR	127998	Identifier	left_node		127872	0					
ANR	127999	Identifier	u		127872	1					
ANR	128000	Identifier	constant		127872	1					
ANR	128001	ExpressionStatement	zval_ptr_dtor ( & right_node . u . constant )	5910:3:174721:174758	127872	2	True				
ANR	128002	CallExpression	zval_ptr_dtor ( & right_node . u . constant )		127872	0					
ANR	128003	Callee	zval_ptr_dtor		127872	0					
ANR	128004	Identifier	zval_ptr_dtor		127872	0					
ANR	128005	ArgumentList	& right_node . u . constant		127872	1					
ANR	128006	Argument	& right_node . u . constant		127872	0					
ANR	128007	UnaryOperationExpression	& right_node . u . constant		127872	0					
ANR	128008	UnaryOperator	&		127872	0					
ANR	128009	MemberAccess	right_node . u . constant		127872	1					
ANR	128010	MemberAccess	right_node . u		127872	0					
ANR	128011	Identifier	right_node		127872	0					
ANR	128012	Identifier	u		127872	1					
ANR	128013	Identifier	constant		127872	1					
ANR	128014	ReturnStatement	return ;	5911:3:174763:174769	127872	3	True				
ANR	128015	DoStatement	do		127872	7					
ANR	128016	CompoundStatement		21:4:552:552	127872	0					
ANR	128017	IfStatement	if ( opcode == ZEND_IS_EQUAL || opcode == ZEND_IS_NOT_EQUAL )		127872	0					
ANR	128018	Condition	opcode == ZEND_IS_EQUAL || opcode == ZEND_IS_NOT_EQUAL	5916:6:174791:174844	127872	0	True				
ANR	128019	OrExpression	opcode == ZEND_IS_EQUAL || opcode == ZEND_IS_NOT_EQUAL		127872	0		||			
ANR	128020	EqualityExpression	opcode == ZEND_IS_EQUAL		127872	0		==			
ANR	128021	Identifier	opcode		127872	0					
ANR	128022	Identifier	ZEND_IS_EQUAL		127872	1					
ANR	128023	EqualityExpression	opcode == ZEND_IS_NOT_EQUAL		127872	1		==			
ANR	128024	Identifier	opcode		127872	0					
ANR	128025	Identifier	ZEND_IS_NOT_EQUAL		127872	1					
ANR	128026	CompoundStatement		22:62:616:616	127872	1					
ANR	128027	IfStatement	if ( left_node . op_type == IS_CONST )		127872	0					
ANR	128028	Condition	left_node . op_type == IS_CONST	5917:7:174856:174884	127872	0	True				
ANR	128029	EqualityExpression	left_node . op_type == IS_CONST		127872	0		==			
ANR	128030	MemberAccess	left_node . op_type		127872	0					
ANR	128031	Identifier	left_node		127872	0					
ANR	128032	Identifier	op_type		127872	1					
ANR	128033	Identifier	IS_CONST		127872	1					
ANR	128034	CompoundStatement		23:38:656:656	127872	1					
ANR	128035	IfStatement	if ( Z_TYPE ( left_node . u . constant ) == IS_FALSE )		127872	0					
ANR	128036	Condition	Z_TYPE ( left_node . u . constant ) == IS_FALSE	5918:8:174897:174936	127872	0	True				
ANR	128037	EqualityExpression	Z_TYPE ( left_node . u . constant ) == IS_FALSE		127872	0		==			
ANR	128038	CallExpression	Z_TYPE ( left_node . u . constant )		127872	0					
ANR	128039	Callee	Z_TYPE		127872	0					
ANR	128040	Identifier	Z_TYPE		127872	0					
ANR	128041	ArgumentList	left_node . u . constant		127872	1					
ANR	128042	Argument	left_node . u . constant		127872	0					
ANR	128043	MemberAccess	left_node . u . constant		127872	0					
ANR	128044	MemberAccess	left_node . u		127872	0					
ANR	128045	Identifier	left_node		127872	0					
ANR	128046	Identifier	u		127872	1					
ANR	128047	Identifier	constant		127872	1					
ANR	128048	Identifier	IS_FALSE		127872	1					
ANR	128049	CompoundStatement		24:50:708:708	127872	1					
ANR	128050	ExpressionStatement	opcode = ( opcode == ZEND_IS_NOT_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT	5919:5:174946:175012	127872	0	True				
ANR	128051	AssignmentExpression	opcode = ( opcode == ZEND_IS_NOT_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT		127872	0		=			
ANR	128052	Identifier	opcode		127872	0					
ANR	128053	ConditionalExpression	( opcode == ZEND_IS_NOT_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT		127872	1					
ANR	128054	Condition	opcode == ZEND_IS_NOT_EQUAL		127872	0					
ANR	128055	EqualityExpression	opcode == ZEND_IS_NOT_EQUAL		127872	0		==			
ANR	128056	Identifier	opcode		127872	0					
ANR	128057	Identifier	ZEND_IS_NOT_EQUAL		127872	1					
ANR	128058	Identifier	ZEND_BOOL		127872	1					
ANR	128059	Identifier	ZEND_BOOL_NOT		127872	2					
ANR	128060	ExpressionStatement	"zend_emit_op_tmp ( result , opcode , & right_node , NULL )"	5920:5:175019:175070	127872	1	True				
ANR	128061	CallExpression	"zend_emit_op_tmp ( result , opcode , & right_node , NULL )"		127872	0					
ANR	128062	Callee	zend_emit_op_tmp		127872	0					
ANR	128063	Identifier	zend_emit_op_tmp		127872	0					
ANR	128064	ArgumentList	result		127872	1					
ANR	128065	Argument	result		127872	0					
ANR	128066	Identifier	result		127872	0					
ANR	128067	Argument	opcode		127872	1					
ANR	128068	Identifier	opcode		127872	0					
ANR	128069	Argument	& right_node		127872	2					
ANR	128070	UnaryOperationExpression	& right_node		127872	0					
ANR	128071	UnaryOperator	&		127872	0					
ANR	128072	Identifier	right_node		127872	1					
ANR	128073	Argument	NULL		127872	3					
ANR	128074	Identifier	NULL		127872	0					
ANR	128075	BreakStatement	break ;	5921:5:175077:175082	127872	2	True				
ANR	128076	ElseStatement	else		127872	0					
ANR	128077	IfStatement	if ( Z_TYPE ( left_node . u . constant ) == IS_TRUE )		127872	0					
ANR	128078	Condition	Z_TYPE ( left_node . u . constant ) == IS_TRUE	5922:15:175099:175137	127872	0	True				
ANR	128079	EqualityExpression	Z_TYPE ( left_node . u . constant ) == IS_TRUE		127872	0		==			
ANR	128080	CallExpression	Z_TYPE ( left_node . u . constant )		127872	0					
ANR	128081	Callee	Z_TYPE		127872	0					
ANR	128082	Identifier	Z_TYPE		127872	0					
ANR	128083	ArgumentList	left_node . u . constant		127872	1					
ANR	128084	Argument	left_node . u . constant		127872	0					
ANR	128085	MemberAccess	left_node . u . constant		127872	0					
ANR	128086	MemberAccess	left_node . u		127872	0					
ANR	128087	Identifier	left_node		127872	0					
ANR	128088	Identifier	u		127872	1					
ANR	128089	Identifier	constant		127872	1					
ANR	128090	Identifier	IS_TRUE		127872	1					
ANR	128091	CompoundStatement		28:56:909:909	127872	1					
ANR	128092	ExpressionStatement	opcode = ( opcode == ZEND_IS_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT	5923:5:175147:175209	127872	0	True				
ANR	128093	AssignmentExpression	opcode = ( opcode == ZEND_IS_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT		127872	0		=			
ANR	128094	Identifier	opcode		127872	0					
ANR	128095	ConditionalExpression	( opcode == ZEND_IS_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT		127872	1					
ANR	128096	Condition	opcode == ZEND_IS_EQUAL		127872	0					
ANR	128097	EqualityExpression	opcode == ZEND_IS_EQUAL		127872	0		==			
ANR	128098	Identifier	opcode		127872	0					
ANR	128099	Identifier	ZEND_IS_EQUAL		127872	1					
ANR	128100	Identifier	ZEND_BOOL		127872	1					
ANR	128101	Identifier	ZEND_BOOL_NOT		127872	2					
ANR	128102	ExpressionStatement	"zend_emit_op_tmp ( result , opcode , & right_node , NULL )"	5924:5:175216:175267	127872	1	True				
ANR	128103	CallExpression	"zend_emit_op_tmp ( result , opcode , & right_node , NULL )"		127872	0					
ANR	128104	Callee	zend_emit_op_tmp		127872	0					
ANR	128105	Identifier	zend_emit_op_tmp		127872	0					
ANR	128106	ArgumentList	result		127872	1					
ANR	128107	Argument	result		127872	0					
ANR	128108	Identifier	result		127872	0					
ANR	128109	Argument	opcode		127872	1					
ANR	128110	Identifier	opcode		127872	0					
ANR	128111	Argument	& right_node		127872	2					
ANR	128112	UnaryOperationExpression	& right_node		127872	0					
ANR	128113	UnaryOperator	&		127872	0					
ANR	128114	Identifier	right_node		127872	1					
ANR	128115	Argument	NULL		127872	3					
ANR	128116	Identifier	NULL		127872	0					
ANR	128117	BreakStatement	break ;	5925:5:175274:175279	127872	2	True				
ANR	128118	ElseStatement	else		127872	0					
ANR	128119	IfStatement	if ( right_node . op_type == IS_CONST )		127872	0					
ANR	128120	Condition	right_node . op_type == IS_CONST	5927:14:175301:175330	127872	0	True				
ANR	128121	EqualityExpression	right_node . op_type == IS_CONST		127872	0		==			
ANR	128122	MemberAccess	right_node . op_type		127872	0					
ANR	128123	Identifier	right_node		127872	0					
ANR	128124	Identifier	op_type		127872	1					
ANR	128125	Identifier	IS_CONST		127872	1					
ANR	128126	CompoundStatement		33:46:1102:1102	127872	1					
ANR	128127	IfStatement	if ( Z_TYPE ( right_node . u . constant ) == IS_FALSE )		127872	0					
ANR	128128	Condition	Z_TYPE ( right_node . u . constant ) == IS_FALSE	5928:8:175343:175383	127872	0	True				
ANR	128129	EqualityExpression	Z_TYPE ( right_node . u . constant ) == IS_FALSE		127872	0		==			
ANR	128130	CallExpression	Z_TYPE ( right_node . u . constant )		127872	0					
ANR	128131	Callee	Z_TYPE		127872	0					
ANR	128132	Identifier	Z_TYPE		127872	0					
ANR	128133	ArgumentList	right_node . u . constant		127872	1					
ANR	128134	Argument	right_node . u . constant		127872	0					
ANR	128135	MemberAccess	right_node . u . constant		127872	0					
ANR	128136	MemberAccess	right_node . u		127872	0					
ANR	128137	Identifier	right_node		127872	0					
ANR	128138	Identifier	u		127872	1					
ANR	128139	Identifier	constant		127872	1					
ANR	128140	Identifier	IS_FALSE		127872	1					
ANR	128141	CompoundStatement		34:51:1155:1155	127872	1					
ANR	128142	ExpressionStatement	opcode = ( opcode == ZEND_IS_NOT_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT	5929:5:175393:175459	127872	0	True				
ANR	128143	AssignmentExpression	opcode = ( opcode == ZEND_IS_NOT_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT		127872	0		=			
ANR	128144	Identifier	opcode		127872	0					
ANR	128145	ConditionalExpression	( opcode == ZEND_IS_NOT_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT		127872	1					
ANR	128146	Condition	opcode == ZEND_IS_NOT_EQUAL		127872	0					
ANR	128147	EqualityExpression	opcode == ZEND_IS_NOT_EQUAL		127872	0		==			
ANR	128148	Identifier	opcode		127872	0					
ANR	128149	Identifier	ZEND_IS_NOT_EQUAL		127872	1					
ANR	128150	Identifier	ZEND_BOOL		127872	1					
ANR	128151	Identifier	ZEND_BOOL_NOT		127872	2					
ANR	128152	ExpressionStatement	"zend_emit_op_tmp ( result , opcode , & left_node , NULL )"	5930:5:175466:175516	127872	1	True				
ANR	128153	CallExpression	"zend_emit_op_tmp ( result , opcode , & left_node , NULL )"		127872	0					
ANR	128154	Callee	zend_emit_op_tmp		127872	0					
ANR	128155	Identifier	zend_emit_op_tmp		127872	0					
ANR	128156	ArgumentList	result		127872	1					
ANR	128157	Argument	result		127872	0					
ANR	128158	Identifier	result		127872	0					
ANR	128159	Argument	opcode		127872	1					
ANR	128160	Identifier	opcode		127872	0					
ANR	128161	Argument	& left_node		127872	2					
ANR	128162	UnaryOperationExpression	& left_node		127872	0					
ANR	128163	UnaryOperator	&		127872	0					
ANR	128164	Identifier	left_node		127872	1					
ANR	128165	Argument	NULL		127872	3					
ANR	128166	Identifier	NULL		127872	0					
ANR	128167	BreakStatement	break ;	5931:5:175523:175528	127872	2	True				
ANR	128168	ElseStatement	else		127872	0					
ANR	128169	IfStatement	if ( Z_TYPE ( right_node . u . constant ) == IS_TRUE )		127872	0					
ANR	128170	Condition	Z_TYPE ( right_node . u . constant ) == IS_TRUE	5932:15:175545:175584	127872	0	True				
ANR	128171	EqualityExpression	Z_TYPE ( right_node . u . constant ) == IS_TRUE		127872	0		==			
ANR	128172	CallExpression	Z_TYPE ( right_node . u . constant )		127872	0					
ANR	128173	Callee	Z_TYPE		127872	0					
ANR	128174	Identifier	Z_TYPE		127872	0					
ANR	128175	ArgumentList	right_node . u . constant		127872	1					
ANR	128176	Argument	right_node . u . constant		127872	0					
ANR	128177	MemberAccess	right_node . u . constant		127872	0					
ANR	128178	MemberAccess	right_node . u		127872	0					
ANR	128179	Identifier	right_node		127872	0					
ANR	128180	Identifier	u		127872	1					
ANR	128181	Identifier	constant		127872	1					
ANR	128182	Identifier	IS_TRUE		127872	1					
ANR	128183	CompoundStatement		38:57:1356:1356	127872	1					
ANR	128184	ExpressionStatement	opcode = ( opcode == ZEND_IS_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT	5933:5:175594:175656	127872	0	True				
ANR	128185	AssignmentExpression	opcode = ( opcode == ZEND_IS_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT		127872	0		=			
ANR	128186	Identifier	opcode		127872	0					
ANR	128187	ConditionalExpression	( opcode == ZEND_IS_EQUAL ) ? ZEND_BOOL : ZEND_BOOL_NOT		127872	1					
ANR	128188	Condition	opcode == ZEND_IS_EQUAL		127872	0					
ANR	128189	EqualityExpression	opcode == ZEND_IS_EQUAL		127872	0		==			
ANR	128190	Identifier	opcode		127872	0					
ANR	128191	Identifier	ZEND_IS_EQUAL		127872	1					
ANR	128192	Identifier	ZEND_BOOL		127872	1					
ANR	128193	Identifier	ZEND_BOOL_NOT		127872	2					
ANR	128194	ExpressionStatement	"zend_emit_op_tmp ( result , opcode , & left_node , NULL )"	5934:5:175663:175713	127872	1	True				
ANR	128195	CallExpression	"zend_emit_op_tmp ( result , opcode , & left_node , NULL )"		127872	0					
ANR	128196	Callee	zend_emit_op_tmp		127872	0					
ANR	128197	Identifier	zend_emit_op_tmp		127872	0					
ANR	128198	ArgumentList	result		127872	1					
ANR	128199	Argument	result		127872	0					
ANR	128200	Identifier	result		127872	0					
ANR	128201	Argument	opcode		127872	1					
ANR	128202	Identifier	opcode		127872	0					
ANR	128203	Argument	& left_node		127872	2					
ANR	128204	UnaryOperationExpression	& left_node		127872	0					
ANR	128205	UnaryOperator	&		127872	0					
ANR	128206	Identifier	left_node		127872	1					
ANR	128207	Argument	NULL		127872	3					
ANR	128208	Identifier	NULL		127872	0					
ANR	128209	BreakStatement	break ;	5935:5:175720:175725	127872	2	True				
ANR	128210	IfStatement	if ( opcode == ZEND_CONCAT )		127872	1					
ANR	128211	Condition	opcode == ZEND_CONCAT	5939:6:175748:175768	127872	0	True				
ANR	128212	EqualityExpression	opcode == ZEND_CONCAT		127872	0		==			
ANR	128213	Identifier	opcode		127872	0					
ANR	128214	Identifier	ZEND_CONCAT		127872	1					
ANR	128215	CompoundStatement		45:29:1540:1540	127872	1					
ANR	128216	IfStatement	if ( left_node . op_type == IS_CONST )		127872	0					
ANR	128217	Condition	left_node . op_type == IS_CONST	5941:7:175842:175870	127872	0	True				
ANR	128218	EqualityExpression	left_node . op_type == IS_CONST		127872	0		==			
ANR	128219	MemberAccess	left_node . op_type		127872	0					
ANR	128220	Identifier	left_node		127872	0					
ANR	128221	Identifier	op_type		127872	1					
ANR	128222	Identifier	IS_CONST		127872	1					
ANR	128223	CompoundStatement		47:38:1642:1642	127872	1					
ANR	128224	ExpressionStatement	convert_to_string ( & left_node . u . constant )	5942:4:175879:175919	127872	0	True				
ANR	128225	CallExpression	convert_to_string ( & left_node . u . constant )		127872	0					
ANR	128226	Callee	convert_to_string		127872	0					
ANR	128227	Identifier	convert_to_string		127872	0					
ANR	128228	ArgumentList	& left_node . u . constant		127872	1					
ANR	128229	Argument	& left_node . u . constant		127872	0					
ANR	128230	UnaryOperationExpression	& left_node . u . constant		127872	0					
ANR	128231	UnaryOperator	&		127872	0					
ANR	128232	MemberAccess	left_node . u . constant		127872	1					
ANR	128233	MemberAccess	left_node . u		127872	0					
ANR	128234	Identifier	left_node		127872	0					
ANR	128235	Identifier	u		127872	1					
ANR	128236	Identifier	constant		127872	1					
ANR	128237	IfStatement	if ( right_node . op_type == IS_CONST )		127872	1					
ANR	128238	Condition	right_node . op_type == IS_CONST	5944:7:175933:175962	127872	0	True				
ANR	128239	EqualityExpression	right_node . op_type == IS_CONST		127872	0		==			
ANR	128240	MemberAccess	right_node . op_type		127872	0					
ANR	128241	Identifier	right_node		127872	0					
ANR	128242	Identifier	op_type		127872	1					
ANR	128243	Identifier	IS_CONST		127872	1					
ANR	128244	CompoundStatement		50:39:1734:1734	127872	1					
ANR	128245	ExpressionStatement	convert_to_string ( & right_node . u . constant )	5945:4:175971:176012	127872	0	True				
ANR	128246	CallExpression	convert_to_string ( & right_node . u . constant )		127872	0					
ANR	128247	Callee	convert_to_string		127872	0					
ANR	128248	Identifier	convert_to_string		127872	0					
ANR	128249	ArgumentList	& right_node . u . constant		127872	1					
ANR	128250	Argument	& right_node . u . constant		127872	0					
ANR	128251	UnaryOperationExpression	& right_node . u . constant		127872	0					
ANR	128252	UnaryOperator	&		127872	0					
ANR	128253	MemberAccess	right_node . u . constant		127872	1					
ANR	128254	MemberAccess	right_node . u		127872	0					
ANR	128255	Identifier	right_node		127872	0					
ANR	128256	Identifier	u		127872	1					
ANR	128257	Identifier	constant		127872	1					
ANR	128258	ExpressionStatement	"zend_emit_op_tmp ( result , opcode , & left_node , & right_node )"	5948:2:176025:176082	127872	2	True				
ANR	128259	CallExpression	"zend_emit_op_tmp ( result , opcode , & left_node , & right_node )"		127872	0					
ANR	128260	Callee	zend_emit_op_tmp		127872	0					
ANR	128261	Identifier	zend_emit_op_tmp		127872	0					
ANR	128262	ArgumentList	result		127872	1					
ANR	128263	Argument	result		127872	0					
ANR	128264	Identifier	result		127872	0					
ANR	128265	Argument	opcode		127872	1					
ANR	128266	Identifier	opcode		127872	0					
ANR	128267	Argument	& left_node		127872	2					
ANR	128268	UnaryOperationExpression	& left_node		127872	0					
ANR	128269	UnaryOperator	&		127872	0					
ANR	128270	Identifier	left_node		127872	1					
ANR	128271	Argument	& right_node		127872	3					
ANR	128272	UnaryOperationExpression	& right_node		127872	0					
ANR	128273	UnaryOperator	&		127872	0					
ANR	128274	Identifier	right_node		127872	1					
ANR	128275	Condition	0	5949:10:176094:176094	127872	1	True				
ANR	128276	PrimaryExpression	0		127872	0					
ANR	128277	ReturnType	void		127872	1					
ANR	128278	Identifier	zend_compile_binary_op		127872	2					
ANR	128279	ParameterList	"znode * result , zend_ast * ast"		127872	3					
ANR	128280	Parameter	znode * result	5894:28:174190:174202	127872	0	True				
ANR	128281	ParameterType	znode *		127872	0					
ANR	128282	Identifier	result		127872	1					
ANR	128283	Parameter	zend_ast * ast	5894:43:174205:174217	127872	1	True				
ANR	128284	ParameterType	zend_ast *		127872	0					
ANR	128285	Identifier	ast		127872	1					
ANR	128286	CFGEntryNode	ENTRY		127872		True				
ANR	128287	CFGExitNode	EXIT		127872		True				
ANR	128288	Symbol	right_node . u		127872						
ANR	128289	Symbol	ZEND_BOOL		127872						
ANR	128290	Symbol	right_node		127872						
ANR	128291	Symbol	ast		127872						
ANR	128292	Symbol	& right_node		127872						
ANR	128293	Symbol	Z_TYPE		127872						
ANR	128294	Symbol	opcode		127872						
ANR	128295	Symbol	result -> op_type		127872						
ANR	128296	Symbol	result -> u		127872						
ANR	128297	Symbol	right_node . u . constant		127872						
ANR	128298	Symbol	result		127872						
ANR	128299	Symbol	& left_node . u . constant		127872						
ANR	128300	Symbol	* ast		127872						
ANR	128301	Symbol	* result		127872						
ANR	128302	Symbol	* * ast		127872						
ANR	128303	Symbol	zend_try_ct_eval_binary_op		127872						
ANR	128304	Symbol	& result -> u . constant		127872						
ANR	128305	Symbol	left_node . u		127872						
ANR	128306	Symbol	& right_node . u		127872						
ANR	128307	Symbol	IS_FALSE		127872						
ANR	128308	Symbol	right_node . op_type		127872						
ANR	128309	Symbol	& right_node . u . constant		127872						
ANR	128310	Symbol	ast -> attr		127872						
ANR	128311	Symbol	left_node . op_type		127872						
ANR	128312	Symbol	right_ast		127872						
ANR	128313	Symbol	IS_CONST		127872						
ANR	128314	Symbol	NULL		127872						
ANR	128315	Symbol	& result -> u		127872						
ANR	128316	Symbol	& left_node . u		127872						
ANR	128317	Symbol	IS_TRUE		127872						
ANR	128318	Symbol	left_node		127872						
ANR	128319	Symbol	ZEND_IS_EQUAL		127872						
ANR	128320	Symbol	left_node . u . constant		127872						
ANR	128321	Symbol	ZEND_CONCAT		127872						
ANR	128322	Symbol	& left_node		127872						
ANR	128323	Symbol	ZEND_BOOL_NOT		127872						
ANR	128324	Symbol	* ast -> child		127872						
ANR	128325	Symbol	left_ast		127872						
ANR	128326	Symbol	ast -> child		127872						
ANR	128327	Symbol	ZEND_IS_NOT_EQUAL		127872						
ANR	128328	Function	zend_compile_greater	5955:0:176228:177009							
ANR	128329	FunctionDef	"zend_compile_greater (znode * result , zend_ast * ast)"		128328	0					
ANR	128330	CompoundStatement		5956:0:176294:177009	128328	0					
ANR	128331	IdentifierDeclStatement	zend_ast * left_ast = ast -> child [ 0 ] ;	5957:1:176297:176331	128328	0	True				
ANR	128332	IdentifierDecl	* left_ast = ast -> child [ 0 ]		128328	0					
ANR	128333	IdentifierDeclType	zend_ast *		128328	0					
ANR	128334	Identifier	left_ast		128328	1					
ANR	128335	AssignmentExpression	* left_ast = ast -> child [ 0 ]		128328	2		=			
ANR	128336	Identifier	left_ast		128328	0					
ANR	128337	ArrayIndexing	ast -> child [ 0 ]		128328	1					
ANR	128338	PtrMemberAccess	ast -> child		128328	0					
ANR	128339	Identifier	ast		128328	0					
ANR	128340	Identifier	child		128328	1					
ANR	128341	PrimaryExpression	0		128328	1					
ANR	128342	IdentifierDeclStatement	zend_ast * right_ast = ast -> child [ 1 ] ;	5958:1:176334:176369	128328	1	True				
ANR	128343	IdentifierDecl	* right_ast = ast -> child [ 1 ]		128328	0					
ANR	128344	IdentifierDeclType	zend_ast *		128328	0					
ANR	128345	Identifier	right_ast		128328	1					
ANR	128346	AssignmentExpression	* right_ast = ast -> child [ 1 ]		128328	2		=			
ANR	128347	Identifier	right_ast		128328	0					
ANR	128348	ArrayIndexing	ast -> child [ 1 ]		128328	1					
ANR	128349	PtrMemberAccess	ast -> child		128328	0					
ANR	128350	Identifier	ast		128328	0					
ANR	128351	Identifier	child		128328	1					
ANR	128352	PrimaryExpression	1		128328	1					
ANR	128353	IdentifierDeclStatement	"znode left_node , right_node ;"	5959:1:176372:176399	128328	2	True				
ANR	128354	IdentifierDecl	left_node		128328	0					
ANR	128355	IdentifierDeclType	znode		128328	0					
ANR	128356	Identifier	left_node		128328	1					
ANR	128357	IdentifierDecl	right_node		128328	1					
ANR	128358	IdentifierDeclType	znode		128328	0					
ANR	128359	Identifier	right_node		128328	1					
ANR	128360	ExpressionStatement	ZEND_ASSERT ( ast -> kind == ZEND_AST_GREATER || ast -> kind == ZEND_AST_GREATER_EQUAL )	5961:1:176403:176484	128328	3	True				
ANR	128361	CallExpression	ZEND_ASSERT ( ast -> kind == ZEND_AST_GREATER || ast -> kind == ZEND_AST_GREATER_EQUAL )		128328	0					
ANR	128362	Callee	ZEND_ASSERT		128328	0					
ANR	128363	Identifier	ZEND_ASSERT		128328	0					
ANR	128364	ArgumentList	ast -> kind == ZEND_AST_GREATER || ast -> kind == ZEND_AST_GREATER_EQUAL		128328	1					
ANR	128365	Argument	ast -> kind == ZEND_AST_GREATER || ast -> kind == ZEND_AST_GREATER_EQUAL		128328	0					
ANR	128366	OrExpression	ast -> kind == ZEND_AST_GREATER || ast -> kind == ZEND_AST_GREATER_EQUAL		128328	0		||			
ANR	128367	EqualityExpression	ast -> kind == ZEND_AST_GREATER		128328	0		==			
ANR	128368	PtrMemberAccess	ast -> kind		128328	0					
ANR	128369	Identifier	ast		128328	0					
ANR	128370	Identifier	kind		128328	1					
ANR	128371	Identifier	ZEND_AST_GREATER		128328	1					
ANR	128372	EqualityExpression	ast -> kind == ZEND_AST_GREATER_EQUAL		128328	1		==			
ANR	128373	PtrMemberAccess	ast -> kind		128328	0					
ANR	128374	Identifier	ast		128328	0					
ANR	128375	Identifier	kind		128328	1					
ANR	128376	Identifier	ZEND_AST_GREATER_EQUAL		128328	1					
ANR	128377	ExpressionStatement	"zend_compile_expr ( & left_node , left_ast )"	5963:1:176488:176527	128328	4	True				
ANR	128378	CallExpression	"zend_compile_expr ( & left_node , left_ast )"		128328	0					
ANR	128379	Callee	zend_compile_expr		128328	0					
ANR	128380	Identifier	zend_compile_expr		128328	0					
ANR	128381	ArgumentList	& left_node		128328	1					
ANR	128382	Argument	& left_node		128328	0					
ANR	128383	UnaryOperationExpression	& left_node		128328	0					
ANR	128384	UnaryOperator	&		128328	0					
ANR	128385	Identifier	left_node		128328	1					
ANR	128386	Argument	left_ast		128328	1					
ANR	128387	Identifier	left_ast		128328	0					
ANR	128388	ExpressionStatement	"zend_compile_expr ( & right_node , right_ast )"	5964:1:176530:176571	128328	5	True				
ANR	128389	CallExpression	"zend_compile_expr ( & right_node , right_ast )"		128328	0					
ANR	128390	Callee	zend_compile_expr		128328	0					
ANR	128391	Identifier	zend_compile_expr		128328	0					
ANR	128392	ArgumentList	& right_node		128328	1					
ANR	128393	Argument	& right_node		128328	0					
ANR	128394	UnaryOperationExpression	& right_node		128328	0					
ANR	128395	UnaryOperator	&		128328	0					
ANR	128396	Identifier	right_node		128328	1					
ANR	128397	Argument	right_ast		128328	1					
ANR	128398	Identifier	right_ast		128328	0					
ANR	128399	IfStatement	if ( left_node . op_type == IS_CONST && right_node . op_type == IS_CONST )		128328	6					
ANR	128400	Condition	left_node . op_type == IS_CONST && right_node . op_type == IS_CONST	5966:5:176579:176641	128328	0	True				
ANR	128401	AndExpression	left_node . op_type == IS_CONST && right_node . op_type == IS_CONST		128328	0		&&			
ANR	128402	EqualityExpression	left_node . op_type == IS_CONST		128328	0		==			
ANR	128403	MemberAccess	left_node . op_type		128328	0					
ANR	128404	Identifier	left_node		128328	0					
ANR	128405	Identifier	op_type		128328	1					
ANR	128406	Identifier	IS_CONST		128328	1					
ANR	128407	EqualityExpression	right_node . op_type == IS_CONST		128328	1		==			
ANR	128408	MemberAccess	right_node . op_type		128328	0					
ANR	128409	Identifier	right_node		128328	0					
ANR	128410	Identifier	op_type		128328	1					
ANR	128411	Identifier	IS_CONST		128328	1					
ANR	128412	CompoundStatement		11:70:349:349	128328	1					
ANR	128413	ExpressionStatement	result -> op_type = IS_CONST	5967:2:176648:176674	128328	0	True				
ANR	128414	AssignmentExpression	result -> op_type = IS_CONST		128328	0		=			
ANR	128415	PtrMemberAccess	result -> op_type		128328	0					
ANR	128416	Identifier	result		128328	0					
ANR	128417	Identifier	op_type		128328	1					
ANR	128418	Identifier	IS_CONST		128328	1					
ANR	128419	ExpressionStatement	"zend_ct_eval_greater ( & result -> u . constant , ast -> kind , & left_node . u . constant , & right_node . u . constant )"	5968:2:176678:176780	128328	1	True				
ANR	128420	CallExpression	"zend_ct_eval_greater ( & result -> u . constant , ast -> kind , & left_node . u . constant , & right_node . u . constant )"		128328	0					
ANR	128421	Callee	zend_ct_eval_greater		128328	0					
ANR	128422	Identifier	zend_ct_eval_greater		128328	0					
ANR	128423	ArgumentList	& result -> u . constant		128328	1					
ANR	128424	Argument	& result -> u . constant		128328	0					
ANR	128425	UnaryOperationExpression	& result -> u . constant		128328	0					
ANR	128426	UnaryOperator	&		128328	0					
ANR	128427	MemberAccess	result -> u . constant		128328	1					
ANR	128428	PtrMemberAccess	result -> u		128328	0					
ANR	128429	Identifier	result		128328	0					
ANR	128430	Identifier	u		128328	1					
ANR	128431	Identifier	constant		128328	1					
ANR	128432	Argument	ast -> kind		128328	1					
ANR	128433	PtrMemberAccess	ast -> kind		128328	0					
ANR	128434	Identifier	ast		128328	0					
ANR	128435	Identifier	kind		128328	1					
ANR	128436	Argument	& left_node . u . constant		128328	2					
ANR	128437	UnaryOperationExpression	& left_node . u . constant		128328	0					
ANR	128438	UnaryOperator	&		128328	0					
ANR	128439	MemberAccess	left_node . u . constant		128328	1					
ANR	128440	MemberAccess	left_node . u		128328	0					
ANR	128441	Identifier	left_node		128328	0					
ANR	128442	Identifier	u		128328	1					
ANR	128443	Identifier	constant		128328	1					
ANR	128444	Argument	& right_node . u . constant		128328	3					
ANR	128445	UnaryOperationExpression	& right_node . u . constant		128328	0					
ANR	128446	UnaryOperator	&		128328	0					
ANR	128447	MemberAccess	right_node . u . constant		128328	1					
ANR	128448	MemberAccess	right_node . u		128328	0					
ANR	128449	Identifier	right_node		128328	0					
ANR	128450	Identifier	u		128328	1					
ANR	128451	Identifier	constant		128328	1					
ANR	128452	ExpressionStatement	zval_ptr_dtor ( & left_node . u . constant )	5970:2:176784:176820	128328	2	True				
ANR	128453	CallExpression	zval_ptr_dtor ( & left_node . u . constant )		128328	0					
ANR	128454	Callee	zval_ptr_dtor		128328	0					
ANR	128455	Identifier	zval_ptr_dtor		128328	0					
ANR	128456	ArgumentList	& left_node . u . constant		128328	1					
ANR	128457	Argument	& left_node . u . constant		128328	0					
ANR	128458	UnaryOperationExpression	& left_node . u . constant		128328	0					
ANR	128459	UnaryOperator	&		128328	0					
ANR	128460	MemberAccess	left_node . u . constant		128328	1					
ANR	128461	MemberAccess	left_node . u		128328	0					
ANR	128462	Identifier	left_node		128328	0					
ANR	128463	Identifier	u		128328	1					
ANR	128464	Identifier	constant		128328	1					
ANR	128465	ExpressionStatement	zval_ptr_dtor ( & right_node . u . constant )	5971:2:176824:176861	128328	3	True				
ANR	128466	CallExpression	zval_ptr_dtor ( & right_node . u . constant )		128328	0					
ANR	128467	Callee	zval_ptr_dtor		128328	0					
ANR	128468	Identifier	zval_ptr_dtor		128328	0					
ANR	128469	ArgumentList	& right_node . u . constant		128328	1					
ANR	128470	Argument	& right_node . u . constant		128328	0					
ANR	128471	UnaryOperationExpression	& right_node . u . constant		128328	0					
ANR	128472	UnaryOperator	&		128328	0					
ANR	128473	MemberAccess	right_node . u . constant		128328	1					
ANR	128474	MemberAccess	right_node . u		128328	0					
ANR	128475	Identifier	right_node		128328	0					
ANR	128476	Identifier	u		128328	1					
ANR	128477	Identifier	constant		128328	1					
ANR	128478	ReturnStatement	return ;	5972:2:176865:176871	128328	4	True				
ANR	128479	ExpressionStatement	"zend_emit_op_tmp ( result , ast -> kind == ZEND_AST_GREATER ? ZEND_IS_SMALLER : ZEND_IS_SMALLER_OR_EQUAL , & right_node , & left_node )"	5975:1:176878:177007	128328	7	True				
ANR	128480	CallExpression	"zend_emit_op_tmp ( result , ast -> kind == ZEND_AST_GREATER ? ZEND_IS_SMALLER : ZEND_IS_SMALLER_OR_EQUAL , & right_node , & left_node )"		128328	0					
ANR	128481	Callee	zend_emit_op_tmp		128328	0					
ANR	128482	Identifier	zend_emit_op_tmp		128328	0					
ANR	128483	ArgumentList	result		128328	1					
ANR	128484	Argument	result		128328	0					
ANR	128485	Identifier	result		128328	0					
ANR	128486	Argument	ast -> kind == ZEND_AST_GREATER ? ZEND_IS_SMALLER : ZEND_IS_SMALLER_OR_EQUAL		128328	1					
ANR	128487	ConditionalExpression	ast -> kind == ZEND_AST_GREATER ? ZEND_IS_SMALLER : ZEND_IS_SMALLER_OR_EQUAL		128328	0					
ANR	128488	Condition	ast -> kind == ZEND_AST_GREATER		128328	0					
ANR	128489	EqualityExpression	ast -> kind == ZEND_AST_GREATER		128328	0		==			
ANR	128490	PtrMemberAccess	ast -> kind		128328	0					
ANR	128491	Identifier	ast		128328	0					
ANR	128492	Identifier	kind		128328	1					
ANR	128493	Identifier	ZEND_AST_GREATER		128328	1					
ANR	128494	Identifier	ZEND_IS_SMALLER		128328	1					
ANR	128495	Identifier	ZEND_IS_SMALLER_OR_EQUAL		128328	2					
ANR	128496	Argument	& right_node		128328	2					
ANR	128497	UnaryOperationExpression	& right_node		128328	0					
ANR	128498	UnaryOperator	&		128328	0					
ANR	128499	Identifier	right_node		128328	1					
ANR	128500	Argument	& left_node		128328	3					
ANR	128501	UnaryOperationExpression	& left_node		128328	0					
ANR	128502	UnaryOperator	&		128328	0					
ANR	128503	Identifier	left_node		128328	1					
ANR	128504	ReturnType	void		128328	1					
ANR	128505	Identifier	zend_compile_greater		128328	2					
ANR	128506	ParameterList	"znode * result , zend_ast * ast"		128328	3					
ANR	128507	Parameter	znode * result	5955:26:176254:176266	128328	0	True				
ANR	128508	ParameterType	znode *		128328	0					
ANR	128509	Identifier	result		128328	1					
ANR	128510	Parameter	zend_ast * ast	5955:41:176269:176281	128328	1	True				
ANR	128511	ParameterType	zend_ast *		128328	0					
ANR	128512	Identifier	ast		128328	1					
ANR	128513	CFGEntryNode	ENTRY		128328		True				
ANR	128514	CFGExitNode	EXIT		128328		True				
ANR	128515	Symbol	right_node . u		128328						
ANR	128516	Symbol	right_node		128328						
ANR	128517	Symbol	ast -> kind		128328						
ANR	128518	Symbol	ast		128328						
ANR	128519	Symbol	& right_node		128328						
ANR	128520	Symbol	ZEND_IS_SMALLER_OR_EQUAL		128328						
ANR	128521	Symbol	ZEND_IS_SMALLER		128328						
ANR	128522	Symbol	result -> op_type		128328						
ANR	128523	Symbol	result -> u		128328						
ANR	128524	Symbol	ZEND_AST_GREATER		128328						
ANR	128525	Symbol	result		128328						
ANR	128526	Symbol	ZEND_AST_GREATER_EQUAL		128328						
ANR	128527	Symbol	& left_node . u . constant		128328						
ANR	128528	Symbol	* ast		128328						
ANR	128529	Symbol	* result		128328						
ANR	128530	Symbol	* * ast		128328						
ANR	128531	Symbol	& result -> u . constant		128328						
ANR	128532	Symbol	left_node . u		128328						
ANR	128533	Symbol	& right_node . u		128328						
ANR	128534	Symbol	right_node . op_type		128328						
ANR	128535	Symbol	& right_node . u . constant		128328						
ANR	128536	Symbol	left_node . op_type		128328						
ANR	128537	Symbol	right_ast		128328						
ANR	128538	Symbol	IS_CONST		128328						
ANR	128539	Symbol	& result -> u		128328						
ANR	128540	Symbol	& left_node . u		128328						
ANR	128541	Symbol	left_node		128328						
ANR	128542	Symbol	& left_node		128328						
ANR	128543	Symbol	* ast -> child		128328						
ANR	128544	Symbol	left_ast		128328						
ANR	128545	Symbol	ast -> child		128328						
ANR	128546	Function	zend_compile_unary_op	5981:0:177022:177475							
ANR	128547	FunctionDef	"zend_compile_unary_op (znode * result , zend_ast * ast)"		128546	0					
ANR	128548	CompoundStatement		5982:0:177089:177475	128546	0					
ANR	128549	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	5983:1:177092:177126	128546	0	True				
ANR	128550	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		128546	0					
ANR	128551	IdentifierDeclType	zend_ast *		128546	0					
ANR	128552	Identifier	expr_ast		128546	1					
ANR	128553	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		128546	2		=			
ANR	128554	Identifier	expr_ast		128546	0					
ANR	128555	ArrayIndexing	ast -> child [ 0 ]		128546	1					
ANR	128556	PtrMemberAccess	ast -> child		128546	0					
ANR	128557	Identifier	ast		128546	0					
ANR	128558	Identifier	child		128546	1					
ANR	128559	PrimaryExpression	0		128546	1					
ANR	128560	IdentifierDeclStatement	uint32_t opcode = ast -> attr ;	5984:1:177129:177156	128546	1	True				
ANR	128561	IdentifierDecl	opcode = ast -> attr		128546	0					
ANR	128562	IdentifierDeclType	uint32_t		128546	0					
ANR	128563	Identifier	opcode		128546	1					
ANR	128564	AssignmentExpression	opcode = ast -> attr		128546	2		=			
ANR	128565	Identifier	opcode		128546	0					
ANR	128566	PtrMemberAccess	ast -> attr		128546	1					
ANR	128567	Identifier	ast		128546	0					
ANR	128568	Identifier	attr		128546	1					
ANR	128569	IdentifierDeclStatement	znode expr_node ;	5986:1:177160:177175	128546	2	True				
ANR	128570	IdentifierDecl	expr_node		128546	0					
ANR	128571	IdentifierDeclType	znode		128546	0					
ANR	128572	Identifier	expr_node		128546	1					
ANR	128573	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	5987:1:177178:177217	128546	3	True				
ANR	128574	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		128546	0					
ANR	128575	Callee	zend_compile_expr		128546	0					
ANR	128576	Identifier	zend_compile_expr		128546	0					
ANR	128577	ArgumentList	& expr_node		128546	1					
ANR	128578	Argument	& expr_node		128546	0					
ANR	128579	UnaryOperationExpression	& expr_node		128546	0					
ANR	128580	UnaryOperator	&		128546	0					
ANR	128581	Identifier	expr_node		128546	1					
ANR	128582	Argument	expr_ast		128546	1					
ANR	128583	Identifier	expr_ast		128546	0					
ANR	128584	IfStatement	if ( expr_node . op_type == IS_CONST )		128546	4					
ANR	128585	Condition	expr_node . op_type == IS_CONST	5989:5:177225:177253	128546	0	True				
ANR	128586	EqualityExpression	expr_node . op_type == IS_CONST		128546	0		==			
ANR	128587	MemberAccess	expr_node . op_type		128546	0					
ANR	128588	Identifier	expr_node		128546	0					
ANR	128589	Identifier	op_type		128546	1					
ANR	128590	Identifier	IS_CONST		128546	1					
ANR	128591	CompoundStatement		8:36:166:166	128546	1					
ANR	128592	ExpressionStatement	result -> op_type = IS_CONST	5990:2:177260:177286	128546	0	True				
ANR	128593	AssignmentExpression	result -> op_type = IS_CONST		128546	0		=			
ANR	128594	PtrMemberAccess	result -> op_type		128546	0					
ANR	128595	Identifier	result		128546	0					
ANR	128596	Identifier	op_type		128546	1					
ANR	128597	Identifier	IS_CONST		128546	1					
ANR	128598	ExpressionStatement	"zend_ct_eval_unary_op ( & result -> u . constant , opcode , & expr_node . u . constant )"	5991:2:177290:177366	128546	1	True				
ANR	128599	CallExpression	"zend_ct_eval_unary_op ( & result -> u . constant , opcode , & expr_node . u . constant )"		128546	0					
ANR	128600	Callee	zend_ct_eval_unary_op		128546	0					
ANR	128601	Identifier	zend_ct_eval_unary_op		128546	0					
ANR	128602	ArgumentList	& result -> u . constant		128546	1					
ANR	128603	Argument	& result -> u . constant		128546	0					
ANR	128604	UnaryOperationExpression	& result -> u . constant		128546	0					
ANR	128605	UnaryOperator	&		128546	0					
ANR	128606	MemberAccess	result -> u . constant		128546	1					
ANR	128607	PtrMemberAccess	result -> u		128546	0					
ANR	128608	Identifier	result		128546	0					
ANR	128609	Identifier	u		128546	1					
ANR	128610	Identifier	constant		128546	1					
ANR	128611	Argument	opcode		128546	1					
ANR	128612	Identifier	opcode		128546	0					
ANR	128613	Argument	& expr_node . u . constant		128546	2					
ANR	128614	UnaryOperationExpression	& expr_node . u . constant		128546	0					
ANR	128615	UnaryOperator	&		128546	0					
ANR	128616	MemberAccess	expr_node . u . constant		128546	1					
ANR	128617	MemberAccess	expr_node . u		128546	0					
ANR	128618	Identifier	expr_node		128546	0					
ANR	128619	Identifier	u		128546	1					
ANR	128620	Identifier	constant		128546	1					
ANR	128621	ExpressionStatement	zval_ptr_dtor ( & expr_node . u . constant )	5993:2:177370:177406	128546	2	True				
ANR	128622	CallExpression	zval_ptr_dtor ( & expr_node . u . constant )		128546	0					
ANR	128623	Callee	zval_ptr_dtor		128546	0					
ANR	128624	Identifier	zval_ptr_dtor		128546	0					
ANR	128625	ArgumentList	& expr_node . u . constant		128546	1					
ANR	128626	Argument	& expr_node . u . constant		128546	0					
ANR	128627	UnaryOperationExpression	& expr_node . u . constant		128546	0					
ANR	128628	UnaryOperator	&		128546	0					
ANR	128629	MemberAccess	expr_node . u . constant		128546	1					
ANR	128630	MemberAccess	expr_node . u		128546	0					
ANR	128631	Identifier	expr_node		128546	0					
ANR	128632	Identifier	u		128546	1					
ANR	128633	Identifier	constant		128546	1					
ANR	128634	ReturnStatement	return ;	5994:2:177410:177416	128546	3	True				
ANR	128635	ExpressionStatement	"zend_emit_op_tmp ( result , opcode , & expr_node , NULL )"	5997:1:177423:177473	128546	5	True				
ANR	128636	CallExpression	"zend_emit_op_tmp ( result , opcode , & expr_node , NULL )"		128546	0					
ANR	128637	Callee	zend_emit_op_tmp		128546	0					
ANR	128638	Identifier	zend_emit_op_tmp		128546	0					
ANR	128639	ArgumentList	result		128546	1					
ANR	128640	Argument	result		128546	0					
ANR	128641	Identifier	result		128546	0					
ANR	128642	Argument	opcode		128546	1					
ANR	128643	Identifier	opcode		128546	0					
ANR	128644	Argument	& expr_node		128546	2					
ANR	128645	UnaryOperationExpression	& expr_node		128546	0					
ANR	128646	UnaryOperator	&		128546	0					
ANR	128647	Identifier	expr_node		128546	1					
ANR	128648	Argument	NULL		128546	3					
ANR	128649	Identifier	NULL		128546	0					
ANR	128650	ReturnType	void		128546	1					
ANR	128651	Identifier	zend_compile_unary_op		128546	2					
ANR	128652	ParameterList	"znode * result , zend_ast * ast"		128546	3					
ANR	128653	Parameter	znode * result	5981:27:177049:177061	128546	0	True				
ANR	128654	ParameterType	znode *		128546	0					
ANR	128655	Identifier	result		128546	1					
ANR	128656	Parameter	zend_ast * ast	5981:42:177064:177076	128546	1	True				
ANR	128657	ParameterType	zend_ast *		128546	0					
ANR	128658	Identifier	ast		128546	1					
ANR	128659	CFGEntryNode	ENTRY		128546		True				
ANR	128660	CFGExitNode	EXIT		128546		True				
ANR	128661	Symbol	ast -> attr		128546						
ANR	128662	Symbol	IS_CONST		128546						
ANR	128663	Symbol	ast		128546						
ANR	128664	Symbol	NULL		128546						
ANR	128665	Symbol	& result -> u		128546						
ANR	128666	Symbol	expr_ast		128546						
ANR	128667	Symbol	opcode		128546						
ANR	128668	Symbol	& expr_node		128546						
ANR	128669	Symbol	result -> op_type		128546						
ANR	128670	Symbol	& expr_node . u . constant		128546						
ANR	128671	Symbol	result -> u		128546						
ANR	128672	Symbol	result		128546						
ANR	128673	Symbol	expr_node		128546						
ANR	128674	Symbol	* ast		128546						
ANR	128675	Symbol	& expr_node . u		128546						
ANR	128676	Symbol	* result		128546						
ANR	128677	Symbol	* * ast		128546						
ANR	128678	Symbol	expr_node . op_type		128546						
ANR	128679	Symbol	& result -> u . constant		128546						
ANR	128680	Symbol	expr_node . u		128546						
ANR	128681	Symbol	* ast -> child		128546						
ANR	128682	Symbol	ast -> child		128546						
ANR	128683	Function	zend_compile_unary_pm	6001:0:177488:178134							
ANR	128684	FunctionDef	"zend_compile_unary_pm (znode * result , zend_ast * ast)"		128683	0					
ANR	128685	CompoundStatement		6002:0:177555:178134	128683	0					
ANR	128686	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	6003:1:177558:177592	128683	0	True				
ANR	128687	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		128683	0					
ANR	128688	IdentifierDeclType	zend_ast *		128683	0					
ANR	128689	Identifier	expr_ast		128683	1					
ANR	128690	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		128683	2		=			
ANR	128691	Identifier	expr_ast		128683	0					
ANR	128692	ArrayIndexing	ast -> child [ 0 ]		128683	1					
ANR	128693	PtrMemberAccess	ast -> child		128683	0					
ANR	128694	Identifier	ast		128683	0					
ANR	128695	Identifier	child		128683	1					
ANR	128696	PrimaryExpression	0		128683	1					
ANR	128697	IdentifierDeclStatement	"znode zero_node , expr_node ;"	6004:1:177595:177621	128683	1	True				
ANR	128698	IdentifierDecl	zero_node		128683	0					
ANR	128699	IdentifierDeclType	znode		128683	0					
ANR	128700	Identifier	zero_node		128683	1					
ANR	128701	IdentifierDecl	expr_node		128683	1					
ANR	128702	IdentifierDeclType	znode		128683	0					
ANR	128703	Identifier	expr_node		128683	1					
ANR	128704	ExpressionStatement	ZEND_ASSERT ( ast -> kind == ZEND_AST_UNARY_PLUS || ast -> kind == ZEND_AST_UNARY_MINUS )	6006:1:177625:177707	128683	2	True				
ANR	128705	CallExpression	ZEND_ASSERT ( ast -> kind == ZEND_AST_UNARY_PLUS || ast -> kind == ZEND_AST_UNARY_MINUS )		128683	0					
ANR	128706	Callee	ZEND_ASSERT		128683	0					
ANR	128707	Identifier	ZEND_ASSERT		128683	0					
ANR	128708	ArgumentList	ast -> kind == ZEND_AST_UNARY_PLUS || ast -> kind == ZEND_AST_UNARY_MINUS		128683	1					
ANR	128709	Argument	ast -> kind == ZEND_AST_UNARY_PLUS || ast -> kind == ZEND_AST_UNARY_MINUS		128683	0					
ANR	128710	OrExpression	ast -> kind == ZEND_AST_UNARY_PLUS || ast -> kind == ZEND_AST_UNARY_MINUS		128683	0		||			
ANR	128711	EqualityExpression	ast -> kind == ZEND_AST_UNARY_PLUS		128683	0		==			
ANR	128712	PtrMemberAccess	ast -> kind		128683	0					
ANR	128713	Identifier	ast		128683	0					
ANR	128714	Identifier	kind		128683	1					
ANR	128715	Identifier	ZEND_AST_UNARY_PLUS		128683	1					
ANR	128716	EqualityExpression	ast -> kind == ZEND_AST_UNARY_MINUS		128683	1		==			
ANR	128717	PtrMemberAccess	ast -> kind		128683	0					
ANR	128718	Identifier	ast		128683	0					
ANR	128719	Identifier	kind		128683	1					
ANR	128720	Identifier	ZEND_AST_UNARY_MINUS		128683	1					
ANR	128721	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	6008:1:177711:177750	128683	3	True				
ANR	128722	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		128683	0					
ANR	128723	Callee	zend_compile_expr		128683	0					
ANR	128724	Identifier	zend_compile_expr		128683	0					
ANR	128725	ArgumentList	& expr_node		128683	1					
ANR	128726	Argument	& expr_node		128683	0					
ANR	128727	UnaryOperationExpression	& expr_node		128683	0					
ANR	128728	UnaryOperator	&		128683	0					
ANR	128729	Identifier	expr_node		128683	1					
ANR	128730	Argument	expr_ast		128683	1					
ANR	128731	Identifier	expr_ast		128683	0					
ANR	128732	IfStatement	if ( expr_node . op_type == IS_CONST )		128683	4					
ANR	128733	Condition	expr_node . op_type == IS_CONST	6010:5:177758:177786	128683	0	True				
ANR	128734	EqualityExpression	expr_node . op_type == IS_CONST		128683	0		==			
ANR	128735	MemberAccess	expr_node . op_type		128683	0					
ANR	128736	Identifier	expr_node		128683	0					
ANR	128737	Identifier	op_type		128683	1					
ANR	128738	Identifier	IS_CONST		128683	1					
ANR	128739	CompoundStatement		9:36:233:233	128683	1					
ANR	128740	ExpressionStatement	result -> op_type = IS_CONST	6011:2:177793:177819	128683	0	True				
ANR	128741	AssignmentExpression	result -> op_type = IS_CONST		128683	0		=			
ANR	128742	PtrMemberAccess	result -> op_type		128683	0					
ANR	128743	Identifier	result		128683	0					
ANR	128744	Identifier	op_type		128683	1					
ANR	128745	Identifier	IS_CONST		128683	1					
ANR	128746	ExpressionStatement	"zend_ct_eval_unary_pm ( & result -> u . constant , ast -> kind , & expr_node . u . constant )"	6012:2:177823:177899	128683	1	True				
ANR	128747	CallExpression	"zend_ct_eval_unary_pm ( & result -> u . constant , ast -> kind , & expr_node . u . constant )"		128683	0					
ANR	128748	Callee	zend_ct_eval_unary_pm		128683	0					
ANR	128749	Identifier	zend_ct_eval_unary_pm		128683	0					
ANR	128750	ArgumentList	& result -> u . constant		128683	1					
ANR	128751	Argument	& result -> u . constant		128683	0					
ANR	128752	UnaryOperationExpression	& result -> u . constant		128683	0					
ANR	128753	UnaryOperator	&		128683	0					
ANR	128754	MemberAccess	result -> u . constant		128683	1					
ANR	128755	PtrMemberAccess	result -> u		128683	0					
ANR	128756	Identifier	result		128683	0					
ANR	128757	Identifier	u		128683	1					
ANR	128758	Identifier	constant		128683	1					
ANR	128759	Argument	ast -> kind		128683	1					
ANR	128760	PtrMemberAccess	ast -> kind		128683	0					
ANR	128761	Identifier	ast		128683	0					
ANR	128762	Identifier	kind		128683	1					
ANR	128763	Argument	& expr_node . u . constant		128683	2					
ANR	128764	UnaryOperationExpression	& expr_node . u . constant		128683	0					
ANR	128765	UnaryOperator	&		128683	0					
ANR	128766	MemberAccess	expr_node . u . constant		128683	1					
ANR	128767	MemberAccess	expr_node . u		128683	0					
ANR	128768	Identifier	expr_node		128683	0					
ANR	128769	Identifier	u		128683	1					
ANR	128770	Identifier	constant		128683	1					
ANR	128771	ExpressionStatement	zval_ptr_dtor ( & expr_node . u . constant )	6013:2:177903:177939	128683	2	True				
ANR	128772	CallExpression	zval_ptr_dtor ( & expr_node . u . constant )		128683	0					
ANR	128773	Callee	zval_ptr_dtor		128683	0					
ANR	128774	Identifier	zval_ptr_dtor		128683	0					
ANR	128775	ArgumentList	& expr_node . u . constant		128683	1					
ANR	128776	Argument	& expr_node . u . constant		128683	0					
ANR	128777	UnaryOperationExpression	& expr_node . u . constant		128683	0					
ANR	128778	UnaryOperator	&		128683	0					
ANR	128779	MemberAccess	expr_node . u . constant		128683	1					
ANR	128780	MemberAccess	expr_node . u		128683	0					
ANR	128781	Identifier	expr_node		128683	0					
ANR	128782	Identifier	u		128683	1					
ANR	128783	Identifier	constant		128683	1					
ANR	128784	ReturnStatement	return ;	6014:2:177943:177949	128683	3	True				
ANR	128785	ExpressionStatement	zero_node . op_type = IS_CONST	6017:1:177956:177984	128683	5	True				
ANR	128786	AssignmentExpression	zero_node . op_type = IS_CONST		128683	0		=			
ANR	128787	MemberAccess	zero_node . op_type		128683	0					
ANR	128788	Identifier	zero_node		128683	0					
ANR	128789	Identifier	op_type		128683	1					
ANR	128790	Identifier	IS_CONST		128683	1					
ANR	128791	ExpressionStatement	"ZVAL_LONG ( & zero_node . u . constant , 0 )"	6018:1:177987:178022	128683	6	True				
ANR	128792	CallExpression	"ZVAL_LONG ( & zero_node . u . constant , 0 )"		128683	0					
ANR	128793	Callee	ZVAL_LONG		128683	0					
ANR	128794	Identifier	ZVAL_LONG		128683	0					
ANR	128795	ArgumentList	& zero_node . u . constant		128683	1					
ANR	128796	Argument	& zero_node . u . constant		128683	0					
ANR	128797	UnaryOperationExpression	& zero_node . u . constant		128683	0					
ANR	128798	UnaryOperator	&		128683	0					
ANR	128799	MemberAccess	zero_node . u . constant		128683	1					
ANR	128800	MemberAccess	zero_node . u		128683	0					
ANR	128801	Identifier	zero_node		128683	0					
ANR	128802	Identifier	u		128683	1					
ANR	128803	Identifier	constant		128683	1					
ANR	128804	Argument	0		128683	1					
ANR	128805	PrimaryExpression	0		128683	0					
ANR	128806	ExpressionStatement	"zend_emit_op_tmp ( result , ast -> kind == ZEND_AST_UNARY_PLUS ? ZEND_ADD : ZEND_SUB , & zero_node , & expr_node )"	6020:1:178026:178132	128683	7	True				
ANR	128807	CallExpression	"zend_emit_op_tmp ( result , ast -> kind == ZEND_AST_UNARY_PLUS ? ZEND_ADD : ZEND_SUB , & zero_node , & expr_node )"		128683	0					
ANR	128808	Callee	zend_emit_op_tmp		128683	0					
ANR	128809	Identifier	zend_emit_op_tmp		128683	0					
ANR	128810	ArgumentList	result		128683	1					
ANR	128811	Argument	result		128683	0					
ANR	128812	Identifier	result		128683	0					
ANR	128813	Argument	ast -> kind == ZEND_AST_UNARY_PLUS ? ZEND_ADD : ZEND_SUB		128683	1					
ANR	128814	ConditionalExpression	ast -> kind == ZEND_AST_UNARY_PLUS ? ZEND_ADD : ZEND_SUB		128683	0					
ANR	128815	Condition	ast -> kind == ZEND_AST_UNARY_PLUS		128683	0					
ANR	128816	EqualityExpression	ast -> kind == ZEND_AST_UNARY_PLUS		128683	0		==			
ANR	128817	PtrMemberAccess	ast -> kind		128683	0					
ANR	128818	Identifier	ast		128683	0					
ANR	128819	Identifier	kind		128683	1					
ANR	128820	Identifier	ZEND_AST_UNARY_PLUS		128683	1					
ANR	128821	Identifier	ZEND_ADD		128683	1					
ANR	128822	Identifier	ZEND_SUB		128683	2					
ANR	128823	Argument	& zero_node		128683	2					
ANR	128824	UnaryOperationExpression	& zero_node		128683	0					
ANR	128825	UnaryOperator	&		128683	0					
ANR	128826	Identifier	zero_node		128683	1					
ANR	128827	Argument	& expr_node		128683	3					
ANR	128828	UnaryOperationExpression	& expr_node		128683	0					
ANR	128829	UnaryOperator	&		128683	0					
ANR	128830	Identifier	expr_node		128683	1					
ANR	128831	ReturnType	void		128683	1					
ANR	128832	Identifier	zend_compile_unary_pm		128683	2					
ANR	128833	ParameterList	"znode * result , zend_ast * ast"		128683	3					
ANR	128834	Parameter	znode * result	6001:27:177515:177527	128683	0	True				
ANR	128835	ParameterType	znode *		128683	0					
ANR	128836	Identifier	result		128683	1					
ANR	128837	Parameter	zend_ast * ast	6001:42:177530:177542	128683	1	True				
ANR	128838	ParameterType	zend_ast *		128683	0					
ANR	128839	Identifier	ast		128683	1					
ANR	128840	CFGEntryNode	ENTRY		128683		True				
ANR	128841	CFGExitNode	EXIT		128683		True				
ANR	128842	Symbol	ZEND_AST_UNARY_MINUS		128683						
ANR	128843	Symbol	ast -> kind		128683						
ANR	128844	Symbol	ast		128683						
ANR	128845	Symbol	& expr_node		128683						
ANR	128846	Symbol	result -> op_type		128683						
ANR	128847	Symbol	result -> u		128683						
ANR	128848	Symbol	& zero_node		128683						
ANR	128849	Symbol	result		128683						
ANR	128850	Symbol	* ast		128683						
ANR	128851	Symbol	* result		128683						
ANR	128852	Symbol	* * ast		128683						
ANR	128853	Symbol	expr_node . op_type		128683						
ANR	128854	Symbol	expr_node . u		128683						
ANR	128855	Symbol	& result -> u . constant		128683						
ANR	128856	Symbol	& zero_node . u		128683						
ANR	128857	Symbol	ZEND_ADD		128683						
ANR	128858	Symbol	IS_CONST		128683						
ANR	128859	Symbol	& result -> u		128683						
ANR	128860	Symbol	ZEND_AST_UNARY_PLUS		128683						
ANR	128861	Symbol	zero_node . u		128683						
ANR	128862	Symbol	zero_node		128683						
ANR	128863	Symbol	& zero_node . u . constant		128683						
ANR	128864	Symbol	expr_ast		128683						
ANR	128865	Symbol	& expr_node . u . constant		128683						
ANR	128866	Symbol	zero_node . op_type		128683						
ANR	128867	Symbol	expr_node		128683						
ANR	128868	Symbol	& expr_node . u		128683						
ANR	128869	Symbol	* ast -> child		128683						
ANR	128870	Symbol	ast -> child		128683						
ANR	128871	Symbol	ZEND_SUB		128683						
ANR	128872	Function	zend_compile_short_circuiting	6025:0:178147:179793							
ANR	128873	FunctionDef	"zend_compile_short_circuiting (znode * result , zend_ast * ast)"		128872	0					
ANR	128874	CompoundStatement		6026:0:178222:179793	128872	0					
ANR	128875	IdentifierDeclStatement	zend_ast * left_ast = ast -> child [ 0 ] ;	6027:1:178225:178259	128872	0	True				
ANR	128876	IdentifierDecl	* left_ast = ast -> child [ 0 ]		128872	0					
ANR	128877	IdentifierDeclType	zend_ast *		128872	0					
ANR	128878	Identifier	left_ast		128872	1					
ANR	128879	AssignmentExpression	* left_ast = ast -> child [ 0 ]		128872	2		=			
ANR	128880	Identifier	left_ast		128872	0					
ANR	128881	ArrayIndexing	ast -> child [ 0 ]		128872	1					
ANR	128882	PtrMemberAccess	ast -> child		128872	0					
ANR	128883	Identifier	ast		128872	0					
ANR	128884	Identifier	child		128872	1					
ANR	128885	PrimaryExpression	0		128872	1					
ANR	128886	IdentifierDeclStatement	zend_ast * right_ast = ast -> child [ 1 ] ;	6028:1:178262:178297	128872	1	True				
ANR	128887	IdentifierDecl	* right_ast = ast -> child [ 1 ]		128872	0					
ANR	128888	IdentifierDeclType	zend_ast *		128872	0					
ANR	128889	Identifier	right_ast		128872	1					
ANR	128890	AssignmentExpression	* right_ast = ast -> child [ 1 ]		128872	2		=			
ANR	128891	Identifier	right_ast		128872	0					
ANR	128892	ArrayIndexing	ast -> child [ 1 ]		128872	1					
ANR	128893	PtrMemberAccess	ast -> child		128872	0					
ANR	128894	Identifier	ast		128872	0					
ANR	128895	Identifier	child		128872	1					
ANR	128896	PrimaryExpression	1		128872	1					
ANR	128897	IdentifierDeclStatement	"znode left_node , right_node ;"	6030:1:178301:178328	128872	2	True				
ANR	128898	IdentifierDecl	left_node		128872	0					
ANR	128899	IdentifierDeclType	znode		128872	0					
ANR	128900	Identifier	left_node		128872	1					
ANR	128901	IdentifierDecl	right_node		128872	1					
ANR	128902	IdentifierDeclType	znode		128872	0					
ANR	128903	Identifier	right_node		128872	1					
ANR	128904	IdentifierDeclStatement	"zend_op * opline_jmpz , * opline_bool ;"	6031:1:178331:178365	128872	3	True				
ANR	128905	IdentifierDecl	* opline_jmpz		128872	0					
ANR	128906	IdentifierDeclType	zend_op *		128872	0					
ANR	128907	Identifier	opline_jmpz		128872	1					
ANR	128908	IdentifierDecl	* opline_bool		128872	1					
ANR	128909	IdentifierDeclType	zend_op *		128872	0					
ANR	128910	Identifier	opline_bool		128872	1					
ANR	128911	IdentifierDeclStatement	uint32_t opnum_jmpz ;	6032:1:178368:178387	128872	4	True				
ANR	128912	IdentifierDecl	opnum_jmpz		128872	0					
ANR	128913	IdentifierDeclType	uint32_t		128872	0					
ANR	128914	Identifier	opnum_jmpz		128872	1					
ANR	128915	ExpressionStatement	ZEND_ASSERT ( ast -> kind == ZEND_AST_AND || ast -> kind == ZEND_AST_OR )	6034:1:178391:178457	128872	5	True				
ANR	128916	CallExpression	ZEND_ASSERT ( ast -> kind == ZEND_AST_AND || ast -> kind == ZEND_AST_OR )		128872	0					
ANR	128917	Callee	ZEND_ASSERT		128872	0					
ANR	128918	Identifier	ZEND_ASSERT		128872	0					
ANR	128919	ArgumentList	ast -> kind == ZEND_AST_AND || ast -> kind == ZEND_AST_OR		128872	1					
ANR	128920	Argument	ast -> kind == ZEND_AST_AND || ast -> kind == ZEND_AST_OR		128872	0					
ANR	128921	OrExpression	ast -> kind == ZEND_AST_AND || ast -> kind == ZEND_AST_OR		128872	0		||			
ANR	128922	EqualityExpression	ast -> kind == ZEND_AST_AND		128872	0		==			
ANR	128923	PtrMemberAccess	ast -> kind		128872	0					
ANR	128924	Identifier	ast		128872	0					
ANR	128925	Identifier	kind		128872	1					
ANR	128926	Identifier	ZEND_AST_AND		128872	1					
ANR	128927	EqualityExpression	ast -> kind == ZEND_AST_OR		128872	1		==			
ANR	128928	PtrMemberAccess	ast -> kind		128872	0					
ANR	128929	Identifier	ast		128872	0					
ANR	128930	Identifier	kind		128872	1					
ANR	128931	Identifier	ZEND_AST_OR		128872	1					
ANR	128932	ExpressionStatement	"zend_compile_expr ( & left_node , left_ast )"	6036:1:178461:178500	128872	6	True				
ANR	128933	CallExpression	"zend_compile_expr ( & left_node , left_ast )"		128872	0					
ANR	128934	Callee	zend_compile_expr		128872	0					
ANR	128935	Identifier	zend_compile_expr		128872	0					
ANR	128936	ArgumentList	& left_node		128872	1					
ANR	128937	Argument	& left_node		128872	0					
ANR	128938	UnaryOperationExpression	& left_node		128872	0					
ANR	128939	UnaryOperator	&		128872	0					
ANR	128940	Identifier	left_node		128872	1					
ANR	128941	Argument	left_ast		128872	1					
ANR	128942	Identifier	left_ast		128872	0					
ANR	128943	IfStatement	if ( left_node . op_type == IS_CONST )		128872	7					
ANR	128944	Condition	left_node . op_type == IS_CONST	6038:5:178508:178536	128872	0	True				
ANR	128945	EqualityExpression	left_node . op_type == IS_CONST		128872	0		==			
ANR	128946	MemberAccess	left_node . op_type		128872	0					
ANR	128947	Identifier	left_node		128872	0					
ANR	128948	Identifier	op_type		128872	1					
ANR	128949	Identifier	IS_CONST		128872	1					
ANR	128950	CompoundStatement		13:36:316:316	128872	1					
ANR	128951	IfStatement	if ( ( ast -> kind == ZEND_AST_AND && ! zend_is_true ( & left_node . u . constant ) ) || ( ast -> kind == ZEND_AST_OR && zend_is_true ( & left_node . u . constant ) ) )		128872	0					
ANR	128952	Condition	( ast -> kind == ZEND_AST_AND && ! zend_is_true ( & left_node . u . constant ) ) || ( ast -> kind == ZEND_AST_OR && zend_is_true ( & left_node . u . constant ) )	6039:6:178547:178685	128872	0	True				
ANR	128953	OrExpression	( ast -> kind == ZEND_AST_AND && ! zend_is_true ( & left_node . u . constant ) ) || ( ast -> kind == ZEND_AST_OR && zend_is_true ( & left_node . u . constant ) )		128872	0		||			
ANR	128954	AndExpression	ast -> kind == ZEND_AST_AND && ! zend_is_true ( & left_node . u . constant )		128872	0		&&			
ANR	128955	EqualityExpression	ast -> kind == ZEND_AST_AND		128872	0		==			
ANR	128956	PtrMemberAccess	ast -> kind		128872	0					
ANR	128957	Identifier	ast		128872	0					
ANR	128958	Identifier	kind		128872	1					
ANR	128959	Identifier	ZEND_AST_AND		128872	1					
ANR	128960	UnaryOperationExpression	! zend_is_true ( & left_node . u . constant )		128872	1					
ANR	128961	UnaryOperator	!		128872	0					
ANR	128962	CallExpression	zend_is_true ( & left_node . u . constant )		128872	1					
ANR	128963	Callee	zend_is_true		128872	0					
ANR	128964	Identifier	zend_is_true		128872	0					
ANR	128965	ArgumentList	& left_node . u . constant		128872	1					
ANR	128966	Argument	& left_node . u . constant		128872	0					
ANR	128967	UnaryOperationExpression	& left_node . u . constant		128872	0					
ANR	128968	UnaryOperator	&		128872	0					
ANR	128969	MemberAccess	left_node . u . constant		128872	1					
ANR	128970	MemberAccess	left_node . u		128872	0					
ANR	128971	Identifier	left_node		128872	0					
ANR	128972	Identifier	u		128872	1					
ANR	128973	Identifier	constant		128872	1					
ANR	128974	AndExpression	ast -> kind == ZEND_AST_OR && zend_is_true ( & left_node . u . constant )		128872	1		&&			
ANR	128975	EqualityExpression	ast -> kind == ZEND_AST_OR		128872	0		==			
ANR	128976	PtrMemberAccess	ast -> kind		128872	0					
ANR	128977	Identifier	ast		128872	0					
ANR	128978	Identifier	kind		128872	1					
ANR	128979	Identifier	ZEND_AST_OR		128872	1					
ANR	128980	CallExpression	zend_is_true ( & left_node . u . constant )		128872	1					
ANR	128981	Callee	zend_is_true		128872	0					
ANR	128982	Identifier	zend_is_true		128872	0					
ANR	128983	ArgumentList	& left_node . u . constant		128872	1					
ANR	128984	Argument	& left_node . u . constant		128872	0					
ANR	128985	UnaryOperationExpression	& left_node . u . constant		128872	0					
ANR	128986	UnaryOperator	&		128872	0					
ANR	128987	MemberAccess	left_node . u . constant		128872	1					
ANR	128988	MemberAccess	left_node . u		128872	0					
ANR	128989	Identifier	left_node		128872	0					
ANR	128990	Identifier	u		128872	1					
ANR	128991	Identifier	constant		128872	1					
ANR	128992	CompoundStatement		15:73:465:465	128872	1					
ANR	128993	ExpressionStatement	result -> op_type = IS_CONST	6041:3:178693:178719	128872	0	True				
ANR	128994	AssignmentExpression	result -> op_type = IS_CONST		128872	0		=			
ANR	128995	PtrMemberAccess	result -> op_type		128872	0					
ANR	128996	Identifier	result		128872	0					
ANR	128997	Identifier	op_type		128872	1					
ANR	128998	Identifier	IS_CONST		128872	1					
ANR	128999	ExpressionStatement	"ZVAL_BOOL ( & result -> u . constant , zend_is_true ( & left_node . u . constant ) )"	6042:3:178724:178791	128872	1	True				
ANR	129000	CallExpression	"ZVAL_BOOL ( & result -> u . constant , zend_is_true ( & left_node . u . constant ) )"		128872	0					
ANR	129001	Callee	ZVAL_BOOL		128872	0					
ANR	129002	Identifier	ZVAL_BOOL		128872	0					
ANR	129003	ArgumentList	& result -> u . constant		128872	1					
ANR	129004	Argument	& result -> u . constant		128872	0					
ANR	129005	UnaryOperationExpression	& result -> u . constant		128872	0					
ANR	129006	UnaryOperator	&		128872	0					
ANR	129007	MemberAccess	result -> u . constant		128872	1					
ANR	129008	PtrMemberAccess	result -> u		128872	0					
ANR	129009	Identifier	result		128872	0					
ANR	129010	Identifier	u		128872	1					
ANR	129011	Identifier	constant		128872	1					
ANR	129012	Argument	zend_is_true ( & left_node . u . constant )		128872	1					
ANR	129013	CallExpression	zend_is_true ( & left_node . u . constant )		128872	0					
ANR	129014	Callee	zend_is_true		128872	0					
ANR	129015	Identifier	zend_is_true		128872	0					
ANR	129016	ArgumentList	& left_node . u . constant		128872	1					
ANR	129017	Argument	& left_node . u . constant		128872	0					
ANR	129018	UnaryOperationExpression	& left_node . u . constant		128872	0					
ANR	129019	UnaryOperator	&		128872	0					
ANR	129020	MemberAccess	left_node . u . constant		128872	1					
ANR	129021	MemberAccess	left_node . u		128872	0					
ANR	129022	Identifier	left_node		128872	0					
ANR	129023	Identifier	u		128872	1					
ANR	129024	Identifier	constant		128872	1					
ANR	129025	ElseStatement	else		128872	0					
ANR	129026	CompoundStatement		18:9:579:579	128872	0					
ANR	129027	ExpressionStatement	"zend_compile_expr ( & right_node , right_ast )"	6044:3:178807:178848	128872	0	True				
ANR	129028	CallExpression	"zend_compile_expr ( & right_node , right_ast )"		128872	0					
ANR	129029	Callee	zend_compile_expr		128872	0					
ANR	129030	Identifier	zend_compile_expr		128872	0					
ANR	129031	ArgumentList	& right_node		128872	1					
ANR	129032	Argument	& right_node		128872	0					
ANR	129033	UnaryOperationExpression	& right_node		128872	0					
ANR	129034	UnaryOperator	&		128872	0					
ANR	129035	Identifier	right_node		128872	1					
ANR	129036	Argument	right_ast		128872	1					
ANR	129037	Identifier	right_ast		128872	0					
ANR	129038	IfStatement	if ( right_node . op_type == IS_CONST )		128872	1					
ANR	129039	Condition	right_node . op_type == IS_CONST	6046:7:178858:178887	128872	0	True				
ANR	129040	EqualityExpression	right_node . op_type == IS_CONST		128872	0		==			
ANR	129041	MemberAccess	right_node . op_type		128872	0					
ANR	129042	Identifier	right_node		128872	0					
ANR	129043	Identifier	op_type		128872	1					
ANR	129044	Identifier	IS_CONST		128872	1					
ANR	129045	CompoundStatement		21:39:667:667	128872	1					
ANR	129046	ExpressionStatement	result -> op_type = IS_CONST	6047:4:178896:178922	128872	0	True				
ANR	129047	AssignmentExpression	result -> op_type = IS_CONST		128872	0		=			
ANR	129048	PtrMemberAccess	result -> op_type		128872	0					
ANR	129049	Identifier	result		128872	0					
ANR	129050	Identifier	op_type		128872	1					
ANR	129051	Identifier	IS_CONST		128872	1					
ANR	129052	ExpressionStatement	"ZVAL_BOOL ( & result -> u . constant , zend_is_true ( & right_node . u . constant ) )"	6048:4:178928:178996	128872	1	True				
ANR	129053	CallExpression	"ZVAL_BOOL ( & result -> u . constant , zend_is_true ( & right_node . u . constant ) )"		128872	0					
ANR	129054	Callee	ZVAL_BOOL		128872	0					
ANR	129055	Identifier	ZVAL_BOOL		128872	0					
ANR	129056	ArgumentList	& result -> u . constant		128872	1					
ANR	129057	Argument	& result -> u . constant		128872	0					
ANR	129058	UnaryOperationExpression	& result -> u . constant		128872	0					
ANR	129059	UnaryOperator	&		128872	0					
ANR	129060	MemberAccess	result -> u . constant		128872	1					
ANR	129061	PtrMemberAccess	result -> u		128872	0					
ANR	129062	Identifier	result		128872	0					
ANR	129063	Identifier	u		128872	1					
ANR	129064	Identifier	constant		128872	1					
ANR	129065	Argument	zend_is_true ( & right_node . u . constant )		128872	1					
ANR	129066	CallExpression	zend_is_true ( & right_node . u . constant )		128872	0					
ANR	129067	Callee	zend_is_true		128872	0					
ANR	129068	Identifier	zend_is_true		128872	0					
ANR	129069	ArgumentList	& right_node . u . constant		128872	1					
ANR	129070	Argument	& right_node . u . constant		128872	0					
ANR	129071	UnaryOperationExpression	& right_node . u . constant		128872	0					
ANR	129072	UnaryOperator	&		128872	0					
ANR	129073	MemberAccess	right_node . u . constant		128872	1					
ANR	129074	MemberAccess	right_node . u		128872	0					
ANR	129075	Identifier	right_node		128872	0					
ANR	129076	Identifier	u		128872	1					
ANR	129077	Identifier	constant		128872	1					
ANR	129078	ExpressionStatement	zval_ptr_dtor ( & right_node . u . constant )	6050:4:179003:179040	128872	2	True				
ANR	129079	CallExpression	zval_ptr_dtor ( & right_node . u . constant )		128872	0					
ANR	129080	Callee	zval_ptr_dtor		128872	0					
ANR	129081	Identifier	zval_ptr_dtor		128872	0					
ANR	129082	ArgumentList	& right_node . u . constant		128872	1					
ANR	129083	Argument	& right_node . u . constant		128872	0					
ANR	129084	UnaryOperationExpression	& right_node . u . constant		128872	0					
ANR	129085	UnaryOperator	&		128872	0					
ANR	129086	MemberAccess	right_node . u . constant		128872	1					
ANR	129087	MemberAccess	right_node . u		128872	0					
ANR	129088	Identifier	right_node		128872	0					
ANR	129089	Identifier	u		128872	1					
ANR	129090	Identifier	constant		128872	1					
ANR	129091	ElseStatement	else		128872	0					
ANR	129092	CompoundStatement		26:10:829:829	128872	0					
ANR	129093	ExpressionStatement	"zend_emit_op ( result , ZEND_BOOL , & right_node , NULL )"	6052:4:179058:179108	128872	0	True				
ANR	129094	CallExpression	"zend_emit_op ( result , ZEND_BOOL , & right_node , NULL )"		128872	0					
ANR	129095	Callee	zend_emit_op		128872	0					
ANR	129096	Identifier	zend_emit_op		128872	0					
ANR	129097	ArgumentList	result		128872	1					
ANR	129098	Argument	result		128872	0					
ANR	129099	Identifier	result		128872	0					
ANR	129100	Argument	ZEND_BOOL		128872	1					
ANR	129101	Identifier	ZEND_BOOL		128872	0					
ANR	129102	Argument	& right_node		128872	2					
ANR	129103	UnaryOperationExpression	& right_node		128872	0					
ANR	129104	UnaryOperator	&		128872	0					
ANR	129105	Identifier	right_node		128872	1					
ANR	129106	Argument	NULL		128872	3					
ANR	129107	Identifier	NULL		128872	0					
ANR	129108	ExpressionStatement	zval_ptr_dtor ( & left_node . u . constant )	6056:2:179122:179158	128872	1	True				
ANR	129109	CallExpression	zval_ptr_dtor ( & left_node . u . constant )		128872	0					
ANR	129110	Callee	zval_ptr_dtor		128872	0					
ANR	129111	Identifier	zval_ptr_dtor		128872	0					
ANR	129112	ArgumentList	& left_node . u . constant		128872	1					
ANR	129113	Argument	& left_node . u . constant		128872	0					
ANR	129114	UnaryOperationExpression	& left_node . u . constant		128872	0					
ANR	129115	UnaryOperator	&		128872	0					
ANR	129116	MemberAccess	left_node . u . constant		128872	1					
ANR	129117	MemberAccess	left_node . u		128872	0					
ANR	129118	Identifier	left_node		128872	0					
ANR	129119	Identifier	u		128872	1					
ANR	129120	Identifier	constant		128872	1					
ANR	129121	ReturnStatement	return ;	6057:2:179162:179168	128872	2	True				
ANR	129122	ExpressionStatement	opnum_jmpz = get_next_op_number ( CG ( active_op_array ) )	6060:1:179175:179227	128872	8	True				
ANR	129123	AssignmentExpression	opnum_jmpz = get_next_op_number ( CG ( active_op_array ) )		128872	0		=			
ANR	129124	Identifier	opnum_jmpz		128872	0					
ANR	129125	CallExpression	get_next_op_number ( CG ( active_op_array ) )		128872	1					
ANR	129126	Callee	get_next_op_number		128872	0					
ANR	129127	Identifier	get_next_op_number		128872	0					
ANR	129128	ArgumentList	CG ( active_op_array )		128872	1					
ANR	129129	Argument	CG ( active_op_array )		128872	0					
ANR	129130	CallExpression	CG ( active_op_array )		128872	0					
ANR	129131	Callee	CG		128872	0					
ANR	129132	Identifier	CG		128872	0					
ANR	129133	ArgumentList	active_op_array		128872	1					
ANR	129134	Argument	active_op_array		128872	0					
ANR	129135	Identifier	active_op_array		128872	0					
ANR	129136	ExpressionStatement	"opline_jmpz = zend_emit_op ( NULL , ast -> kind == ZEND_AST_AND ? ZEND_JMPZ_EX : ZEND_JMPNZ_EX , & left_node , NULL )"	6061:1:179230:179340	128872	9	True				
ANR	129137	AssignmentExpression	"opline_jmpz = zend_emit_op ( NULL , ast -> kind == ZEND_AST_AND ? ZEND_JMPZ_EX : ZEND_JMPNZ_EX , & left_node , NULL )"		128872	0		=			
ANR	129138	Identifier	opline_jmpz		128872	0					
ANR	129139	CallExpression	"zend_emit_op ( NULL , ast -> kind == ZEND_AST_AND ? ZEND_JMPZ_EX : ZEND_JMPNZ_EX , & left_node , NULL )"		128872	1					
ANR	129140	Callee	zend_emit_op		128872	0					
ANR	129141	Identifier	zend_emit_op		128872	0					
ANR	129142	ArgumentList	NULL		128872	1					
ANR	129143	Argument	NULL		128872	0					
ANR	129144	Identifier	NULL		128872	0					
ANR	129145	Argument	ast -> kind == ZEND_AST_AND ? ZEND_JMPZ_EX : ZEND_JMPNZ_EX		128872	1					
ANR	129146	ConditionalExpression	ast -> kind == ZEND_AST_AND ? ZEND_JMPZ_EX : ZEND_JMPNZ_EX		128872	0					
ANR	129147	Condition	ast -> kind == ZEND_AST_AND		128872	0					
ANR	129148	EqualityExpression	ast -> kind == ZEND_AST_AND		128872	0		==			
ANR	129149	PtrMemberAccess	ast -> kind		128872	0					
ANR	129150	Identifier	ast		128872	0					
ANR	129151	Identifier	kind		128872	1					
ANR	129152	Identifier	ZEND_AST_AND		128872	1					
ANR	129153	Identifier	ZEND_JMPZ_EX		128872	1					
ANR	129154	Identifier	ZEND_JMPNZ_EX		128872	2					
ANR	129155	Argument	& left_node		128872	2					
ANR	129156	UnaryOperationExpression	& left_node		128872	0					
ANR	129157	UnaryOperator	&		128872	0					
ANR	129158	Identifier	left_node		128872	1					
ANR	129159	Argument	NULL		128872	3					
ANR	129160	Identifier	NULL		128872	0					
ANR	129161	IfStatement	if ( left_node . op_type == IS_TMP_VAR )		128872	10					
ANR	129162	Condition	left_node . op_type == IS_TMP_VAR	6064:5:179348:179378	128872	0	True				
ANR	129163	EqualityExpression	left_node . op_type == IS_TMP_VAR		128872	0		==			
ANR	129164	MemberAccess	left_node . op_type		128872	0					
ANR	129165	Identifier	left_node		128872	0					
ANR	129166	Identifier	op_type		128872	1					
ANR	129167	Identifier	IS_TMP_VAR		128872	1					
ANR	129168	CompoundStatement		39:38:1158:1158	128872	1					
ANR	129169	ExpressionStatement	"SET_NODE ( opline_jmpz -> result , & left_node )"	6065:2:179385:179426	128872	0	True				
ANR	129170	CallExpression	"SET_NODE ( opline_jmpz -> result , & left_node )"		128872	0					
ANR	129171	Callee	SET_NODE		128872	0					
ANR	129172	Identifier	SET_NODE		128872	0					
ANR	129173	ArgumentList	opline_jmpz -> result		128872	1					
ANR	129174	Argument	opline_jmpz -> result		128872	0					
ANR	129175	PtrMemberAccess	opline_jmpz -> result		128872	0					
ANR	129176	Identifier	opline_jmpz		128872	0					
ANR	129177	Identifier	result		128872	1					
ANR	129178	Argument	& left_node		128872	1					
ANR	129179	UnaryOperationExpression	& left_node		128872	0					
ANR	129180	UnaryOperator	&		128872	0					
ANR	129181	Identifier	left_node		128872	1					
ANR	129182	ElseStatement	else		128872	0					
ANR	129183	CompoundStatement		41:8:1213:1213	128872	0					
ANR	129184	ExpressionStatement	opline_jmpz -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6067:2:179440:179509	128872	0	True				
ANR	129185	AssignmentExpression	opline_jmpz -> result . var = get_temporary_variable ( CG ( active_op_array ) )		128872	0		=			
ANR	129186	MemberAccess	opline_jmpz -> result . var		128872	0					
ANR	129187	PtrMemberAccess	opline_jmpz -> result		128872	0					
ANR	129188	Identifier	opline_jmpz		128872	0					
ANR	129189	Identifier	result		128872	1					
ANR	129190	Identifier	var		128872	1					
ANR	129191	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		128872	1					
ANR	129192	Callee	get_temporary_variable		128872	0					
ANR	129193	Identifier	get_temporary_variable		128872	0					
ANR	129194	ArgumentList	CG ( active_op_array )		128872	1					
ANR	129195	Argument	CG ( active_op_array )		128872	0					
ANR	129196	CallExpression	CG ( active_op_array )		128872	0					
ANR	129197	Callee	CG		128872	0					
ANR	129198	Identifier	CG		128872	0					
ANR	129199	ArgumentList	active_op_array		128872	1					
ANR	129200	Argument	active_op_array		128872	0					
ANR	129201	Identifier	active_op_array		128872	0					
ANR	129202	ExpressionStatement	opline_jmpz -> result_type = IS_TMP_VAR	6068:2:179513:179550	128872	1	True				
ANR	129203	AssignmentExpression	opline_jmpz -> result_type = IS_TMP_VAR		128872	0		=			
ANR	129204	PtrMemberAccess	opline_jmpz -> result_type		128872	0					
ANR	129205	Identifier	opline_jmpz		128872	0					
ANR	129206	Identifier	result_type		128872	1					
ANR	129207	Identifier	IS_TMP_VAR		128872	1					
ANR	129208	ExpressionStatement	"GET_NODE ( result , opline_jmpz -> result )"	6071:1:179557:179594	128872	11	True				
ANR	129209	CallExpression	"GET_NODE ( result , opline_jmpz -> result )"		128872	0					
ANR	129210	Callee	GET_NODE		128872	0					
ANR	129211	Identifier	GET_NODE		128872	0					
ANR	129212	ArgumentList	result		128872	1					
ANR	129213	Argument	result		128872	0					
ANR	129214	Identifier	result		128872	0					
ANR	129215	Argument	opline_jmpz -> result		128872	1					
ANR	129216	PtrMemberAccess	opline_jmpz -> result		128872	0					
ANR	129217	Identifier	opline_jmpz		128872	0					
ANR	129218	Identifier	result		128872	1					
ANR	129219	ExpressionStatement	"zend_compile_expr ( & right_node , right_ast )"	6072:1:179597:179638	128872	12	True				
ANR	129220	CallExpression	"zend_compile_expr ( & right_node , right_ast )"		128872	0					
ANR	129221	Callee	zend_compile_expr		128872	0					
ANR	129222	Identifier	zend_compile_expr		128872	0					
ANR	129223	ArgumentList	& right_node		128872	1					
ANR	129224	Argument	& right_node		128872	0					
ANR	129225	UnaryOperationExpression	& right_node		128872	0					
ANR	129226	UnaryOperator	&		128872	0					
ANR	129227	Identifier	right_node		128872	1					
ANR	129228	Argument	right_ast		128872	1					
ANR	129229	Identifier	right_ast		128872	0					
ANR	129230	ExpressionStatement	"opline_bool = zend_emit_op ( NULL , ZEND_BOOL , & right_node , NULL )"	6074:1:179642:179704	128872	13	True				
ANR	129231	AssignmentExpression	"opline_bool = zend_emit_op ( NULL , ZEND_BOOL , & right_node , NULL )"		128872	0		=			
ANR	129232	Identifier	opline_bool		128872	0					
ANR	129233	CallExpression	"zend_emit_op ( NULL , ZEND_BOOL , & right_node , NULL )"		128872	1					
ANR	129234	Callee	zend_emit_op		128872	0					
ANR	129235	Identifier	zend_emit_op		128872	0					
ANR	129236	ArgumentList	NULL		128872	1					
ANR	129237	Argument	NULL		128872	0					
ANR	129238	Identifier	NULL		128872	0					
ANR	129239	Argument	ZEND_BOOL		128872	1					
ANR	129240	Identifier	ZEND_BOOL		128872	0					
ANR	129241	Argument	& right_node		128872	2					
ANR	129242	UnaryOperationExpression	& right_node		128872	0					
ANR	129243	UnaryOperator	&		128872	0					
ANR	129244	Identifier	right_node		128872	1					
ANR	129245	Argument	NULL		128872	3					
ANR	129246	Identifier	NULL		128872	0					
ANR	129247	ExpressionStatement	"SET_NODE ( opline_bool -> result , result )"	6075:1:179707:179744	128872	14	True				
ANR	129248	CallExpression	"SET_NODE ( opline_bool -> result , result )"		128872	0					
ANR	129249	Callee	SET_NODE		128872	0					
ANR	129250	Identifier	SET_NODE		128872	0					
ANR	129251	ArgumentList	opline_bool -> result		128872	1					
ANR	129252	Argument	opline_bool -> result		128872	0					
ANR	129253	PtrMemberAccess	opline_bool -> result		128872	0					
ANR	129254	Identifier	opline_bool		128872	0					
ANR	129255	Identifier	result		128872	1					
ANR	129256	Argument	result		128872	1					
ANR	129257	Identifier	result		128872	0					
ANR	129258	ExpressionStatement	zend_update_jump_target_to_next ( opnum_jmpz )	6077:1:179748:179791	128872	15	True				
ANR	129259	CallExpression	zend_update_jump_target_to_next ( opnum_jmpz )		128872	0					
ANR	129260	Callee	zend_update_jump_target_to_next		128872	0					
ANR	129261	Identifier	zend_update_jump_target_to_next		128872	0					
ANR	129262	ArgumentList	opnum_jmpz		128872	1					
ANR	129263	Argument	opnum_jmpz		128872	0					
ANR	129264	Identifier	opnum_jmpz		128872	0					
ANR	129265	ReturnType	void		128872	1					
ANR	129266	Identifier	zend_compile_short_circuiting		128872	2					
ANR	129267	ParameterList	"znode * result , zend_ast * ast"		128872	3					
ANR	129268	Parameter	znode * result	6025:35:178182:178194	128872	0	True				
ANR	129269	ParameterType	znode *		128872	0					
ANR	129270	Identifier	result		128872	1					
ANR	129271	Parameter	zend_ast * ast	6025:50:178197:178209	128872	1	True				
ANR	129272	ParameterType	zend_ast *		128872	0					
ANR	129273	Identifier	ast		128872	1					
ANR	129274	CFGEntryNode	ENTRY		128872		True				
ANR	129275	CFGExitNode	EXIT		128872		True				
ANR	129276	Symbol	ZEND_BOOL		128872						
ANR	129277	Symbol	right_node		128872						
ANR	129278	Symbol	ast -> kind		128872						
ANR	129279	Symbol	ast		128872						
ANR	129280	Symbol	get_temporary_variable		128872						
ANR	129281	Symbol	result -> u		128872						
ANR	129282	Symbol	opline_jmpz		128872						
ANR	129283	Symbol	& left_node . u . constant		128872						
ANR	129284	Symbol	left_node . u		128872						
ANR	129285	Symbol	& right_node . u		128872						
ANR	129286	Symbol	IS_TMP_VAR		128872						
ANR	129287	Symbol	right_node . op_type		128872						
ANR	129288	Symbol	opline_bool		128872						
ANR	129289	Symbol	right_ast		128872						
ANR	129290	Symbol	IS_CONST		128872						
ANR	129291	Symbol	NULL		128872						
ANR	129292	Symbol	ZEND_AST_AND		128872						
ANR	129293	Symbol	opline_jmpz -> result_type		128872						
ANR	129294	Symbol	opnum_jmpz		128872						
ANR	129295	Symbol	* opline_jmpz		128872						
ANR	129296	Symbol	& left_node		128872						
ANR	129297	Symbol	opline_jmpz -> result		128872						
ANR	129298	Symbol	* ast -> child		128872						
ANR	129299	Symbol	opline_bool -> result		128872						
ANR	129300	Symbol	left_ast		128872						
ANR	129301	Symbol	ast -> child		128872						
ANR	129302	Symbol	zend_is_true		128872						
ANR	129303	Symbol	ZEND_JMPZ_EX		128872						
ANR	129304	Symbol	zend_emit_op		128872						
ANR	129305	Symbol	right_node . u		128872						
ANR	129306	Symbol	ZEND_JMPNZ_EX		128872						
ANR	129307	Symbol	& right_node		128872						
ANR	129308	Symbol	result -> op_type		128872						
ANR	129309	Symbol	ZEND_AST_OR		128872						
ANR	129310	Symbol	result		128872						
ANR	129311	Symbol	* ast		128872						
ANR	129312	Symbol	* result		128872						
ANR	129313	Symbol	* * ast		128872						
ANR	129314	Symbol	& result -> u . constant		128872						
ANR	129315	Symbol	& right_node . u . constant		128872						
ANR	129316	Symbol	left_node . op_type		128872						
ANR	129317	Symbol	& result -> u		128872						
ANR	129318	Symbol	CG		128872						
ANR	129319	Symbol	active_op_array		128872						
ANR	129320	Symbol	& left_node . u		128872						
ANR	129321	Symbol	left_node		128872						
ANR	129322	Symbol	opline_jmpz -> result . var		128872						
ANR	129323	Symbol	* opline_bool		128872						
ANR	129324	Symbol	get_next_op_number		128872						
ANR	129325	Function	zend_compile_post_incdec	6081:0:179806:180473							
ANR	129326	FunctionDef	"zend_compile_post_incdec (znode * result , zend_ast * ast)"		129325	0					
ANR	129327	CompoundStatement		6082:0:179876:180473	129325	0					
ANR	129328	IdentifierDeclStatement	zend_ast * var_ast = ast -> child [ 0 ] ;	6083:1:179879:179912	129325	0	True				
ANR	129329	IdentifierDecl	* var_ast = ast -> child [ 0 ]		129325	0					
ANR	129330	IdentifierDeclType	zend_ast *		129325	0					
ANR	129331	Identifier	var_ast		129325	1					
ANR	129332	AssignmentExpression	* var_ast = ast -> child [ 0 ]		129325	2		=			
ANR	129333	Identifier	var_ast		129325	0					
ANR	129334	ArrayIndexing	ast -> child [ 0 ]		129325	1					
ANR	129335	PtrMemberAccess	ast -> child		129325	0					
ANR	129336	Identifier	ast		129325	0					
ANR	129337	Identifier	child		129325	1					
ANR	129338	PrimaryExpression	0		129325	1					
ANR	129339	ExpressionStatement	ZEND_ASSERT ( ast -> kind == ZEND_AST_POST_INC || ast -> kind == ZEND_AST_POST_DEC )	6084:1:179915:179992	129325	1	True				
ANR	129340	CallExpression	ZEND_ASSERT ( ast -> kind == ZEND_AST_POST_INC || ast -> kind == ZEND_AST_POST_DEC )		129325	0					
ANR	129341	Callee	ZEND_ASSERT		129325	0					
ANR	129342	Identifier	ZEND_ASSERT		129325	0					
ANR	129343	ArgumentList	ast -> kind == ZEND_AST_POST_INC || ast -> kind == ZEND_AST_POST_DEC		129325	1					
ANR	129344	Argument	ast -> kind == ZEND_AST_POST_INC || ast -> kind == ZEND_AST_POST_DEC		129325	0					
ANR	129345	OrExpression	ast -> kind == ZEND_AST_POST_INC || ast -> kind == ZEND_AST_POST_DEC		129325	0		||			
ANR	129346	EqualityExpression	ast -> kind == ZEND_AST_POST_INC		129325	0		==			
ANR	129347	PtrMemberAccess	ast -> kind		129325	0					
ANR	129348	Identifier	ast		129325	0					
ANR	129349	Identifier	kind		129325	1					
ANR	129350	Identifier	ZEND_AST_POST_INC		129325	1					
ANR	129351	EqualityExpression	ast -> kind == ZEND_AST_POST_DEC		129325	1		==			
ANR	129352	PtrMemberAccess	ast -> kind		129325	0					
ANR	129353	Identifier	ast		129325	0					
ANR	129354	Identifier	kind		129325	1					
ANR	129355	Identifier	ZEND_AST_POST_DEC		129325	1					
ANR	129356	ExpressionStatement	zend_ensure_writable_variable ( var_ast )	6086:1:179996:180034	129325	2	True				
ANR	129357	CallExpression	zend_ensure_writable_variable ( var_ast )		129325	0					
ANR	129358	Callee	zend_ensure_writable_variable		129325	0					
ANR	129359	Identifier	zend_ensure_writable_variable		129325	0					
ANR	129360	ArgumentList	var_ast		129325	1					
ANR	129361	Argument	var_ast		129325	0					
ANR	129362	Identifier	var_ast		129325	0					
ANR	129363	IfStatement	if ( var_ast -> kind == ZEND_AST_PROP )		129325	3					
ANR	129364	Condition	var_ast -> kind == ZEND_AST_PROP	6088:5:180042:180071	129325	0	True				
ANR	129365	EqualityExpression	var_ast -> kind == ZEND_AST_PROP		129325	0		==			
ANR	129366	PtrMemberAccess	var_ast -> kind		129325	0					
ANR	129367	Identifier	var_ast		129325	0					
ANR	129368	Identifier	kind		129325	1					
ANR	129369	Identifier	ZEND_AST_PROP		129325	1					
ANR	129370	CompoundStatement		8:2:201:269	129325	1					
ANR	129371	IdentifierDeclStatement	"zend_op * opline = zend_compile_prop_common ( NULL , var_ast , BP_VAR_RW ) ;"	6089:2:180078:180146	129325	0	True				
ANR	129372	IdentifierDecl	"* opline = zend_compile_prop_common ( NULL , var_ast , BP_VAR_RW )"		129325	0					
ANR	129373	IdentifierDeclType	zend_op *		129325	0					
ANR	129374	Identifier	opline		129325	1					
ANR	129375	AssignmentExpression	"* opline = zend_compile_prop_common ( NULL , var_ast , BP_VAR_RW )"		129325	2		=			
ANR	129376	Identifier	opline		129325	0					
ANR	129377	CallExpression	"zend_compile_prop_common ( NULL , var_ast , BP_VAR_RW )"		129325	1					
ANR	129378	Callee	zend_compile_prop_common		129325	0					
ANR	129379	Identifier	zend_compile_prop_common		129325	0					
ANR	129380	ArgumentList	NULL		129325	1					
ANR	129381	Argument	NULL		129325	0					
ANR	129382	Identifier	NULL		129325	0					
ANR	129383	Argument	var_ast		129325	1					
ANR	129384	Identifier	var_ast		129325	0					
ANR	129385	Argument	BP_VAR_RW		129325	2					
ANR	129386	Identifier	BP_VAR_RW		129325	0					
ANR	129387	ExpressionStatement	opline -> opcode = ast -> kind == ZEND_AST_POST_INC ? ZEND_POST_INC_OBJ : ZEND_POST_DEC_OBJ	6090:2:180150:180237	129325	1	True				
ANR	129388	AssignmentExpression	opline -> opcode = ast -> kind == ZEND_AST_POST_INC ? ZEND_POST_INC_OBJ : ZEND_POST_DEC_OBJ		129325	0		=			
ANR	129389	PtrMemberAccess	opline -> opcode		129325	0					
ANR	129390	Identifier	opline		129325	0					
ANR	129391	Identifier	opcode		129325	1					
ANR	129392	ConditionalExpression	ast -> kind == ZEND_AST_POST_INC ? ZEND_POST_INC_OBJ : ZEND_POST_DEC_OBJ		129325	1					
ANR	129393	Condition	ast -> kind == ZEND_AST_POST_INC		129325	0					
ANR	129394	EqualityExpression	ast -> kind == ZEND_AST_POST_INC		129325	0		==			
ANR	129395	PtrMemberAccess	ast -> kind		129325	0					
ANR	129396	Identifier	ast		129325	0					
ANR	129397	Identifier	kind		129325	1					
ANR	129398	Identifier	ZEND_AST_POST_INC		129325	1					
ANR	129399	Identifier	ZEND_POST_INC_OBJ		129325	1					
ANR	129400	Identifier	ZEND_POST_DEC_OBJ		129325	2					
ANR	129401	ExpressionStatement	"zend_make_tmp_result ( result , opline )"	6091:2:180241:180277	129325	2	True				
ANR	129402	CallExpression	"zend_make_tmp_result ( result , opline )"		129325	0					
ANR	129403	Callee	zend_make_tmp_result		129325	0					
ANR	129404	Identifier	zend_make_tmp_result		129325	0					
ANR	129405	ArgumentList	result		129325	1					
ANR	129406	Argument	result		129325	0					
ANR	129407	Identifier	result		129325	0					
ANR	129408	Argument	opline		129325	1					
ANR	129409	Identifier	opline		129325	0					
ANR	129410	ElseStatement	else		129325	0					
ANR	129411	CompoundStatement		12:2:414:428	129325	0					
ANR	129412	IdentifierDeclStatement	znode var_node ;	6093:2:180291:180305	129325	0	True				
ANR	129413	IdentifierDecl	var_node		129325	0					
ANR	129414	IdentifierDeclType	znode		129325	0					
ANR	129415	Identifier	var_node		129325	1					
ANR	129416	ExpressionStatement	"zend_compile_var ( & var_node , var_ast , BP_VAR_RW )"	6094:2:180309:180356	129325	1	True				
ANR	129417	CallExpression	"zend_compile_var ( & var_node , var_ast , BP_VAR_RW )"		129325	0					
ANR	129418	Callee	zend_compile_var		129325	0					
ANR	129419	Identifier	zend_compile_var		129325	0					
ANR	129420	ArgumentList	& var_node		129325	1					
ANR	129421	Argument	& var_node		129325	0					
ANR	129422	UnaryOperationExpression	& var_node		129325	0					
ANR	129423	UnaryOperator	&		129325	0					
ANR	129424	Identifier	var_node		129325	1					
ANR	129425	Argument	var_ast		129325	1					
ANR	129426	Identifier	var_ast		129325	0					
ANR	129427	Argument	BP_VAR_RW		129325	2					
ANR	129428	Identifier	BP_VAR_RW		129325	0					
ANR	129429	ExpressionStatement	"zend_emit_op_tmp ( result , ast -> kind == ZEND_AST_POST_INC ? ZEND_POST_INC : ZEND_POST_DEC , & var_node , NULL )"	6095:2:180360:180468	129325	2	True				
ANR	129430	CallExpression	"zend_emit_op_tmp ( result , ast -> kind == ZEND_AST_POST_INC ? ZEND_POST_INC : ZEND_POST_DEC , & var_node , NULL )"		129325	0					
ANR	129431	Callee	zend_emit_op_tmp		129325	0					
ANR	129432	Identifier	zend_emit_op_tmp		129325	0					
ANR	129433	ArgumentList	result		129325	1					
ANR	129434	Argument	result		129325	0					
ANR	129435	Identifier	result		129325	0					
ANR	129436	Argument	ast -> kind == ZEND_AST_POST_INC ? ZEND_POST_INC : ZEND_POST_DEC		129325	1					
ANR	129437	ConditionalExpression	ast -> kind == ZEND_AST_POST_INC ? ZEND_POST_INC : ZEND_POST_DEC		129325	0					
ANR	129438	Condition	ast -> kind == ZEND_AST_POST_INC		129325	0					
ANR	129439	EqualityExpression	ast -> kind == ZEND_AST_POST_INC		129325	0		==			
ANR	129440	PtrMemberAccess	ast -> kind		129325	0					
ANR	129441	Identifier	ast		129325	0					
ANR	129442	Identifier	kind		129325	1					
ANR	129443	Identifier	ZEND_AST_POST_INC		129325	1					
ANR	129444	Identifier	ZEND_POST_INC		129325	1					
ANR	129445	Identifier	ZEND_POST_DEC		129325	2					
ANR	129446	Argument	& var_node		129325	2					
ANR	129447	UnaryOperationExpression	& var_node		129325	0					
ANR	129448	UnaryOperator	&		129325	0					
ANR	129449	Identifier	var_node		129325	1					
ANR	129450	Argument	NULL		129325	3					
ANR	129451	Identifier	NULL		129325	0					
ANR	129452	ReturnType	void		129325	1					
ANR	129453	Identifier	zend_compile_post_incdec		129325	2					
ANR	129454	ParameterList	"znode * result , zend_ast * ast"		129325	3					
ANR	129455	Parameter	znode * result	6081:30:179836:179848	129325	0	True				
ANR	129456	ParameterType	znode *		129325	0					
ANR	129457	Identifier	result		129325	1					
ANR	129458	Parameter	zend_ast * ast	6081:45:179851:179863	129325	1	True				
ANR	129459	ParameterType	zend_ast *		129325	0					
ANR	129460	Identifier	ast		129325	1					
ANR	129461	CFGEntryNode	ENTRY		129325		True				
ANR	129462	CFGExitNode	EXIT		129325		True				
ANR	129463	Symbol	ZEND_POST_DEC		129325						
ANR	129464	Symbol	ast -> kind		129325						
ANR	129465	Symbol	ast		129325						
ANR	129466	Symbol	* var_ast		129325						
ANR	129467	Symbol	result		129325						
ANR	129468	Symbol	* ast		129325						
ANR	129469	Symbol	opline		129325						
ANR	129470	Symbol	var_ast -> kind		129325						
ANR	129471	Symbol	* * ast		129325						
ANR	129472	Symbol	ZEND_AST_POST_DEC		129325						
ANR	129473	Symbol	ZEND_POST_INC		129325						
ANR	129474	Symbol	BP_VAR_RW		129325						
ANR	129475	Symbol	ZEND_POST_DEC_OBJ		129325						
ANR	129476	Symbol	ZEND_POST_INC_OBJ		129325						
ANR	129477	Symbol	NULL		129325						
ANR	129478	Symbol	var_node		129325						
ANR	129479	Symbol	& var_node		129325						
ANR	129480	Symbol	ZEND_AST_PROP		129325						
ANR	129481	Symbol	zend_compile_prop_common		129325						
ANR	129482	Symbol	var_ast		129325						
ANR	129483	Symbol	* opline		129325						
ANR	129484	Symbol	opline -> opcode		129325						
ANR	129485	Symbol	ZEND_AST_POST_INC		129325						
ANR	129486	Symbol	* ast -> child		129325						
ANR	129487	Symbol	ast -> child		129325						
ANR	129488	Function	zend_compile_pre_incdec	6101:0:180486:181102							
ANR	129489	FunctionDef	"zend_compile_pre_incdec (znode * result , zend_ast * ast)"		129488	0					
ANR	129490	CompoundStatement		6102:0:180555:181102	129488	0					
ANR	129491	IdentifierDeclStatement	zend_ast * var_ast = ast -> child [ 0 ] ;	6103:1:180558:180591	129488	0	True				
ANR	129492	IdentifierDecl	* var_ast = ast -> child [ 0 ]		129488	0					
ANR	129493	IdentifierDeclType	zend_ast *		129488	0					
ANR	129494	Identifier	var_ast		129488	1					
ANR	129495	AssignmentExpression	* var_ast = ast -> child [ 0 ]		129488	2		=			
ANR	129496	Identifier	var_ast		129488	0					
ANR	129497	ArrayIndexing	ast -> child [ 0 ]		129488	1					
ANR	129498	PtrMemberAccess	ast -> child		129488	0					
ANR	129499	Identifier	ast		129488	0					
ANR	129500	Identifier	child		129488	1					
ANR	129501	PrimaryExpression	0		129488	1					
ANR	129502	ExpressionStatement	ZEND_ASSERT ( ast -> kind == ZEND_AST_PRE_INC || ast -> kind == ZEND_AST_PRE_DEC )	6104:1:180594:180669	129488	1	True				
ANR	129503	CallExpression	ZEND_ASSERT ( ast -> kind == ZEND_AST_PRE_INC || ast -> kind == ZEND_AST_PRE_DEC )		129488	0					
ANR	129504	Callee	ZEND_ASSERT		129488	0					
ANR	129505	Identifier	ZEND_ASSERT		129488	0					
ANR	129506	ArgumentList	ast -> kind == ZEND_AST_PRE_INC || ast -> kind == ZEND_AST_PRE_DEC		129488	1					
ANR	129507	Argument	ast -> kind == ZEND_AST_PRE_INC || ast -> kind == ZEND_AST_PRE_DEC		129488	0					
ANR	129508	OrExpression	ast -> kind == ZEND_AST_PRE_INC || ast -> kind == ZEND_AST_PRE_DEC		129488	0		||			
ANR	129509	EqualityExpression	ast -> kind == ZEND_AST_PRE_INC		129488	0		==			
ANR	129510	PtrMemberAccess	ast -> kind		129488	0					
ANR	129511	Identifier	ast		129488	0					
ANR	129512	Identifier	kind		129488	1					
ANR	129513	Identifier	ZEND_AST_PRE_INC		129488	1					
ANR	129514	EqualityExpression	ast -> kind == ZEND_AST_PRE_DEC		129488	1		==			
ANR	129515	PtrMemberAccess	ast -> kind		129488	0					
ANR	129516	Identifier	ast		129488	0					
ANR	129517	Identifier	kind		129488	1					
ANR	129518	Identifier	ZEND_AST_PRE_DEC		129488	1					
ANR	129519	ExpressionStatement	zend_ensure_writable_variable ( var_ast )	6106:1:180673:180711	129488	2	True				
ANR	129520	CallExpression	zend_ensure_writable_variable ( var_ast )		129488	0					
ANR	129521	Callee	zend_ensure_writable_variable		129488	0					
ANR	129522	Identifier	zend_ensure_writable_variable		129488	0					
ANR	129523	ArgumentList	var_ast		129488	1					
ANR	129524	Argument	var_ast		129488	0					
ANR	129525	Identifier	var_ast		129488	0					
ANR	129526	IfStatement	if ( var_ast -> kind == ZEND_AST_PROP )		129488	3					
ANR	129527	Condition	var_ast -> kind == ZEND_AST_PROP	6108:5:180719:180748	129488	0	True				
ANR	129528	EqualityExpression	var_ast -> kind == ZEND_AST_PROP		129488	0		==			
ANR	129529	PtrMemberAccess	var_ast -> kind		129488	0					
ANR	129530	Identifier	var_ast		129488	0					
ANR	129531	Identifier	kind		129488	1					
ANR	129532	Identifier	ZEND_AST_PROP		129488	1					
ANR	129533	CompoundStatement		8:2:199:269	129488	1					
ANR	129534	IdentifierDeclStatement	"zend_op * opline = zend_compile_prop_common ( result , var_ast , BP_VAR_RW ) ;"	6109:2:180755:180825	129488	0	True				
ANR	129535	IdentifierDecl	"* opline = zend_compile_prop_common ( result , var_ast , BP_VAR_RW )"		129488	0					
ANR	129536	IdentifierDeclType	zend_op *		129488	0					
ANR	129537	Identifier	opline		129488	1					
ANR	129538	AssignmentExpression	"* opline = zend_compile_prop_common ( result , var_ast , BP_VAR_RW )"		129488	2		=			
ANR	129539	Identifier	opline		129488	0					
ANR	129540	CallExpression	"zend_compile_prop_common ( result , var_ast , BP_VAR_RW )"		129488	1					
ANR	129541	Callee	zend_compile_prop_common		129488	0					
ANR	129542	Identifier	zend_compile_prop_common		129488	0					
ANR	129543	ArgumentList	result		129488	1					
ANR	129544	Argument	result		129488	0					
ANR	129545	Identifier	result		129488	0					
ANR	129546	Argument	var_ast		129488	1					
ANR	129547	Identifier	var_ast		129488	0					
ANR	129548	Argument	BP_VAR_RW		129488	2					
ANR	129549	Identifier	BP_VAR_RW		129488	0					
ANR	129550	ExpressionStatement	opline -> opcode = ast -> kind == ZEND_AST_PRE_INC ? ZEND_PRE_INC_OBJ : ZEND_PRE_DEC_OBJ	6110:2:180829:180913	129488	1	True				
ANR	129551	AssignmentExpression	opline -> opcode = ast -> kind == ZEND_AST_PRE_INC ? ZEND_PRE_INC_OBJ : ZEND_PRE_DEC_OBJ		129488	0		=			
ANR	129552	PtrMemberAccess	opline -> opcode		129488	0					
ANR	129553	Identifier	opline		129488	0					
ANR	129554	Identifier	opcode		129488	1					
ANR	129555	ConditionalExpression	ast -> kind == ZEND_AST_PRE_INC ? ZEND_PRE_INC_OBJ : ZEND_PRE_DEC_OBJ		129488	1					
ANR	129556	Condition	ast -> kind == ZEND_AST_PRE_INC		129488	0					
ANR	129557	EqualityExpression	ast -> kind == ZEND_AST_PRE_INC		129488	0		==			
ANR	129558	PtrMemberAccess	ast -> kind		129488	0					
ANR	129559	Identifier	ast		129488	0					
ANR	129560	Identifier	kind		129488	1					
ANR	129561	Identifier	ZEND_AST_PRE_INC		129488	1					
ANR	129562	Identifier	ZEND_PRE_INC_OBJ		129488	1					
ANR	129563	Identifier	ZEND_PRE_DEC_OBJ		129488	2					
ANR	129564	ElseStatement	else		129488	0					
ANR	129565	CompoundStatement		11:2:371:385	129488	0					
ANR	129566	IdentifierDeclStatement	znode var_node ;	6112:2:180927:180941	129488	0	True				
ANR	129567	IdentifierDecl	var_node		129488	0					
ANR	129568	IdentifierDeclType	znode		129488	0					
ANR	129569	Identifier	var_node		129488	1					
ANR	129570	ExpressionStatement	"zend_compile_var ( & var_node , var_ast , BP_VAR_RW )"	6113:2:180945:180992	129488	1	True				
ANR	129571	CallExpression	"zend_compile_var ( & var_node , var_ast , BP_VAR_RW )"		129488	0					
ANR	129572	Callee	zend_compile_var		129488	0					
ANR	129573	Identifier	zend_compile_var		129488	0					
ANR	129574	ArgumentList	& var_node		129488	1					
ANR	129575	Argument	& var_node		129488	0					
ANR	129576	UnaryOperationExpression	& var_node		129488	0					
ANR	129577	UnaryOperator	&		129488	0					
ANR	129578	Identifier	var_node		129488	1					
ANR	129579	Argument	var_ast		129488	1					
ANR	129580	Identifier	var_ast		129488	0					
ANR	129581	Argument	BP_VAR_RW		129488	2					
ANR	129582	Identifier	BP_VAR_RW		129488	0					
ANR	129583	ExpressionStatement	"zend_emit_op ( result , ast -> kind == ZEND_AST_PRE_INC ? ZEND_PRE_INC : ZEND_PRE_DEC , & var_node , NULL )"	6114:2:180996:181097	129488	2	True				
ANR	129584	CallExpression	"zend_emit_op ( result , ast -> kind == ZEND_AST_PRE_INC ? ZEND_PRE_INC : ZEND_PRE_DEC , & var_node , NULL )"		129488	0					
ANR	129585	Callee	zend_emit_op		129488	0					
ANR	129586	Identifier	zend_emit_op		129488	0					
ANR	129587	ArgumentList	result		129488	1					
ANR	129588	Argument	result		129488	0					
ANR	129589	Identifier	result		129488	0					
ANR	129590	Argument	ast -> kind == ZEND_AST_PRE_INC ? ZEND_PRE_INC : ZEND_PRE_DEC		129488	1					
ANR	129591	ConditionalExpression	ast -> kind == ZEND_AST_PRE_INC ? ZEND_PRE_INC : ZEND_PRE_DEC		129488	0					
ANR	129592	Condition	ast -> kind == ZEND_AST_PRE_INC		129488	0					
ANR	129593	EqualityExpression	ast -> kind == ZEND_AST_PRE_INC		129488	0		==			
ANR	129594	PtrMemberAccess	ast -> kind		129488	0					
ANR	129595	Identifier	ast		129488	0					
ANR	129596	Identifier	kind		129488	1					
ANR	129597	Identifier	ZEND_AST_PRE_INC		129488	1					
ANR	129598	Identifier	ZEND_PRE_INC		129488	1					
ANR	129599	Identifier	ZEND_PRE_DEC		129488	2					
ANR	129600	Argument	& var_node		129488	2					
ANR	129601	UnaryOperationExpression	& var_node		129488	0					
ANR	129602	UnaryOperator	&		129488	0					
ANR	129603	Identifier	var_node		129488	1					
ANR	129604	Argument	NULL		129488	3					
ANR	129605	Identifier	NULL		129488	0					
ANR	129606	ReturnType	void		129488	1					
ANR	129607	Identifier	zend_compile_pre_incdec		129488	2					
ANR	129608	ParameterList	"znode * result , zend_ast * ast"		129488	3					
ANR	129609	Parameter	znode * result	6101:29:180515:180527	129488	0	True				
ANR	129610	ParameterType	znode *		129488	0					
ANR	129611	Identifier	result		129488	1					
ANR	129612	Parameter	zend_ast * ast	6101:44:180530:180542	129488	1	True				
ANR	129613	ParameterType	zend_ast *		129488	0					
ANR	129614	Identifier	ast		129488	1					
ANR	129615	CFGEntryNode	ENTRY		129488		True				
ANR	129616	CFGExitNode	EXIT		129488		True				
ANR	129617	Symbol	ast -> kind		129488						
ANR	129618	Symbol	ast		129488						
ANR	129619	Symbol	ZEND_PRE_DEC		129488						
ANR	129620	Symbol	* var_ast		129488						
ANR	129621	Symbol	result		129488						
ANR	129622	Symbol	* ast		129488						
ANR	129623	Symbol	opline		129488						
ANR	129624	Symbol	var_ast -> kind		129488						
ANR	129625	Symbol	* * ast		129488						
ANR	129626	Symbol	ZEND_PRE_DEC_OBJ		129488						
ANR	129627	Symbol	ZEND_AST_PRE_DEC		129488						
ANR	129628	Symbol	BP_VAR_RW		129488						
ANR	129629	Symbol	NULL		129488						
ANR	129630	Symbol	var_node		129488						
ANR	129631	Symbol	& var_node		129488						
ANR	129632	Symbol	ZEND_PRE_INC_OBJ		129488						
ANR	129633	Symbol	ZEND_PRE_INC		129488						
ANR	129634	Symbol	ZEND_AST_PROP		129488						
ANR	129635	Symbol	ZEND_AST_PRE_INC		129488						
ANR	129636	Symbol	zend_compile_prop_common		129488						
ANR	129637	Symbol	var_ast		129488						
ANR	129638	Symbol	* opline		129488						
ANR	129639	Symbol	opline -> opcode		129488						
ANR	129640	Symbol	* ast -> child		129488						
ANR	129641	Symbol	ast -> child		129488						
ANR	129642	Function	zend_compile_cast	6120:0:181115:181399							
ANR	129643	FunctionDef	"zend_compile_cast (znode * result , zend_ast * ast)"		129642	0					
ANR	129644	CompoundStatement		6121:0:181178:181399	129642	0					
ANR	129645	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	6122:1:181181:181215	129642	0	True				
ANR	129646	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		129642	0					
ANR	129647	IdentifierDeclType	zend_ast *		129642	0					
ANR	129648	Identifier	expr_ast		129642	1					
ANR	129649	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		129642	2		=			
ANR	129650	Identifier	expr_ast		129642	0					
ANR	129651	ArrayIndexing	ast -> child [ 0 ]		129642	1					
ANR	129652	PtrMemberAccess	ast -> child		129642	0					
ANR	129653	Identifier	ast		129642	0					
ANR	129654	Identifier	child		129642	1					
ANR	129655	PrimaryExpression	0		129642	1					
ANR	129656	IdentifierDeclStatement	znode expr_node ;	6123:1:181218:181233	129642	1	True				
ANR	129657	IdentifierDecl	expr_node		129642	0					
ANR	129658	IdentifierDeclType	znode		129642	0					
ANR	129659	Identifier	expr_node		129642	1					
ANR	129660	IdentifierDeclStatement	zend_op * opline ;	6124:1:181236:181251	129642	2	True				
ANR	129661	IdentifierDecl	* opline		129642	0					
ANR	129662	IdentifierDeclType	zend_op *		129642	0					
ANR	129663	Identifier	opline		129642	1					
ANR	129664	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	6126:1:181255:181294	129642	3	True				
ANR	129665	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		129642	0					
ANR	129666	Callee	zend_compile_expr		129642	0					
ANR	129667	Identifier	zend_compile_expr		129642	0					
ANR	129668	ArgumentList	& expr_node		129642	1					
ANR	129669	Argument	& expr_node		129642	0					
ANR	129670	UnaryOperationExpression	& expr_node		129642	0					
ANR	129671	UnaryOperator	&		129642	0					
ANR	129672	Identifier	expr_node		129642	1					
ANR	129673	Argument	expr_ast		129642	1					
ANR	129674	Identifier	expr_ast		129642	0					
ANR	129675	ExpressionStatement	"opline = zend_emit_op_tmp ( result , ZEND_CAST , & expr_node , NULL )"	6128:1:181298:181360	129642	4	True				
ANR	129676	AssignmentExpression	"opline = zend_emit_op_tmp ( result , ZEND_CAST , & expr_node , NULL )"		129642	0		=			
ANR	129677	Identifier	opline		129642	0					
ANR	129678	CallExpression	"zend_emit_op_tmp ( result , ZEND_CAST , & expr_node , NULL )"		129642	1					
ANR	129679	Callee	zend_emit_op_tmp		129642	0					
ANR	129680	Identifier	zend_emit_op_tmp		129642	0					
ANR	129681	ArgumentList	result		129642	1					
ANR	129682	Argument	result		129642	0					
ANR	129683	Identifier	result		129642	0					
ANR	129684	Argument	ZEND_CAST		129642	1					
ANR	129685	Identifier	ZEND_CAST		129642	0					
ANR	129686	Argument	& expr_node		129642	2					
ANR	129687	UnaryOperationExpression	& expr_node		129642	0					
ANR	129688	UnaryOperator	&		129642	0					
ANR	129689	Identifier	expr_node		129642	1					
ANR	129690	Argument	NULL		129642	3					
ANR	129691	Identifier	NULL		129642	0					
ANR	129692	ExpressionStatement	opline -> extended_value = ast -> attr	6129:1:181363:181397	129642	5	True				
ANR	129693	AssignmentExpression	opline -> extended_value = ast -> attr		129642	0		=			
ANR	129694	PtrMemberAccess	opline -> extended_value		129642	0					
ANR	129695	Identifier	opline		129642	0					
ANR	129696	Identifier	extended_value		129642	1					
ANR	129697	PtrMemberAccess	ast -> attr		129642	1					
ANR	129698	Identifier	ast		129642	0					
ANR	129699	Identifier	attr		129642	1					
ANR	129700	ReturnType	void		129642	1					
ANR	129701	Identifier	zend_compile_cast		129642	2					
ANR	129702	ParameterList	"znode * result , zend_ast * ast"		129642	3					
ANR	129703	Parameter	znode * result	6120:23:181138:181150	129642	0	True				
ANR	129704	ParameterType	znode *		129642	0					
ANR	129705	Identifier	result		129642	1					
ANR	129706	Parameter	zend_ast * ast	6120:38:181153:181165	129642	1	True				
ANR	129707	ParameterType	zend_ast *		129642	0					
ANR	129708	Identifier	ast		129642	1					
ANR	129709	CFGEntryNode	ENTRY		129642		True				
ANR	129710	CFGExitNode	EXIT		129642		True				
ANR	129711	Symbol	zend_emit_op_tmp		129642						
ANR	129712	Symbol	ast -> attr		129642						
ANR	129713	Symbol	ast		129642						
ANR	129714	Symbol	NULL		129642						
ANR	129715	Symbol	expr_ast		129642						
ANR	129716	Symbol	& expr_node		129642						
ANR	129717	Symbol	opline -> extended_value		129642						
ANR	129718	Symbol	result		129642						
ANR	129719	Symbol	expr_node		129642						
ANR	129720	Symbol	* ast		129642						
ANR	129721	Symbol	opline		129642						
ANR	129722	Symbol	ZEND_CAST		129642						
ANR	129723	Symbol	* opline		129642						
ANR	129724	Symbol	* * ast		129642						
ANR	129725	Symbol	* ast -> child		129642						
ANR	129726	Symbol	ast -> child		129642						
ANR	129727	Function	zend_compile_shorthand_conditional	6133:0:181412:182079							
ANR	129728	FunctionDef	"zend_compile_shorthand_conditional (znode * result , zend_ast * ast)"		129727	0					
ANR	129729	CompoundStatement		6134:0:181499:182079	129727	0					
ANR	129730	IdentifierDeclStatement	zend_ast * cond_ast = ast -> child [ 0 ] ;	6135:1:181502:181536	129727	0	True				
ANR	129731	IdentifierDecl	* cond_ast = ast -> child [ 0 ]		129727	0					
ANR	129732	IdentifierDeclType	zend_ast *		129727	0					
ANR	129733	Identifier	cond_ast		129727	1					
ANR	129734	AssignmentExpression	* cond_ast = ast -> child [ 0 ]		129727	2		=			
ANR	129735	Identifier	cond_ast		129727	0					
ANR	129736	ArrayIndexing	ast -> child [ 0 ]		129727	1					
ANR	129737	PtrMemberAccess	ast -> child		129727	0					
ANR	129738	Identifier	ast		129727	0					
ANR	129739	Identifier	child		129727	1					
ANR	129740	PrimaryExpression	0		129727	1					
ANR	129741	IdentifierDeclStatement	zend_ast * false_ast = ast -> child [ 2 ] ;	6136:1:181539:181574	129727	1	True				
ANR	129742	IdentifierDecl	* false_ast = ast -> child [ 2 ]		129727	0					
ANR	129743	IdentifierDeclType	zend_ast *		129727	0					
ANR	129744	Identifier	false_ast		129727	1					
ANR	129745	AssignmentExpression	* false_ast = ast -> child [ 2 ]		129727	2		=			
ANR	129746	Identifier	false_ast		129727	0					
ANR	129747	ArrayIndexing	ast -> child [ 2 ]		129727	1					
ANR	129748	PtrMemberAccess	ast -> child		129727	0					
ANR	129749	Identifier	ast		129727	0					
ANR	129750	Identifier	child		129727	1					
ANR	129751	PrimaryExpression	2		129727	1					
ANR	129752	IdentifierDeclStatement	"znode cond_node , false_node ;"	6138:1:181578:181605	129727	2	True				
ANR	129753	IdentifierDecl	cond_node		129727	0					
ANR	129754	IdentifierDeclType	znode		129727	0					
ANR	129755	Identifier	cond_node		129727	1					
ANR	129756	IdentifierDecl	false_node		129727	1					
ANR	129757	IdentifierDeclType	znode		129727	0					
ANR	129758	Identifier	false_node		129727	1					
ANR	129759	IdentifierDeclStatement	zend_op * opline_qm_assign ;	6139:1:181608:181633	129727	3	True				
ANR	129760	IdentifierDecl	* opline_qm_assign		129727	0					
ANR	129761	IdentifierDeclType	zend_op *		129727	0					
ANR	129762	Identifier	opline_qm_assign		129727	1					
ANR	129763	IdentifierDeclStatement	uint32_t opnum_jmp_set ;	6140:1:181636:181658	129727	4	True				
ANR	129764	IdentifierDecl	opnum_jmp_set		129727	0					
ANR	129765	IdentifierDeclType	uint32_t		129727	0					
ANR	129766	Identifier	opnum_jmp_set		129727	1					
ANR	129767	ExpressionStatement	ZEND_ASSERT ( ast -> child [ 1 ] == NULL )	6142:1:181662:181696	129727	5	True				
ANR	129768	CallExpression	ZEND_ASSERT ( ast -> child [ 1 ] == NULL )		129727	0					
ANR	129769	Callee	ZEND_ASSERT		129727	0					
ANR	129770	Identifier	ZEND_ASSERT		129727	0					
ANR	129771	ArgumentList	ast -> child [ 1 ] == NULL		129727	1					
ANR	129772	Argument	ast -> child [ 1 ] == NULL		129727	0					
ANR	129773	EqualityExpression	ast -> child [ 1 ] == NULL		129727	0		==			
ANR	129774	ArrayIndexing	ast -> child [ 1 ]		129727	0					
ANR	129775	PtrMemberAccess	ast -> child		129727	0					
ANR	129776	Identifier	ast		129727	0					
ANR	129777	Identifier	child		129727	1					
ANR	129778	PrimaryExpression	1		129727	1					
ANR	129779	Identifier	NULL		129727	1					
ANR	129780	ExpressionStatement	"zend_compile_expr ( & cond_node , cond_ast )"	6144:1:181700:181739	129727	6	True				
ANR	129781	CallExpression	"zend_compile_expr ( & cond_node , cond_ast )"		129727	0					
ANR	129782	Callee	zend_compile_expr		129727	0					
ANR	129783	Identifier	zend_compile_expr		129727	0					
ANR	129784	ArgumentList	& cond_node		129727	1					
ANR	129785	Argument	& cond_node		129727	0					
ANR	129786	UnaryOperationExpression	& cond_node		129727	0					
ANR	129787	UnaryOperator	&		129727	0					
ANR	129788	Identifier	cond_node		129727	1					
ANR	129789	Argument	cond_ast		129727	1					
ANR	129790	Identifier	cond_ast		129727	0					
ANR	129791	ExpressionStatement	opnum_jmp_set = get_next_op_number ( CG ( active_op_array ) )	6146:1:181743:181798	129727	7	True				
ANR	129792	AssignmentExpression	opnum_jmp_set = get_next_op_number ( CG ( active_op_array ) )		129727	0		=			
ANR	129793	Identifier	opnum_jmp_set		129727	0					
ANR	129794	CallExpression	get_next_op_number ( CG ( active_op_array ) )		129727	1					
ANR	129795	Callee	get_next_op_number		129727	0					
ANR	129796	Identifier	get_next_op_number		129727	0					
ANR	129797	ArgumentList	CG ( active_op_array )		129727	1					
ANR	129798	Argument	CG ( active_op_array )		129727	0					
ANR	129799	CallExpression	CG ( active_op_array )		129727	0					
ANR	129800	Callee	CG		129727	0					
ANR	129801	Identifier	CG		129727	0					
ANR	129802	ArgumentList	active_op_array		129727	1					
ANR	129803	Argument	active_op_array		129727	0					
ANR	129804	Identifier	active_op_array		129727	0					
ANR	129805	ExpressionStatement	"zend_emit_op_tmp ( result , ZEND_JMP_SET , & cond_node , NULL )"	6147:1:181801:181857	129727	8	True				
ANR	129806	CallExpression	"zend_emit_op_tmp ( result , ZEND_JMP_SET , & cond_node , NULL )"		129727	0					
ANR	129807	Callee	zend_emit_op_tmp		129727	0					
ANR	129808	Identifier	zend_emit_op_tmp		129727	0					
ANR	129809	ArgumentList	result		129727	1					
ANR	129810	Argument	result		129727	0					
ANR	129811	Identifier	result		129727	0					
ANR	129812	Argument	ZEND_JMP_SET		129727	1					
ANR	129813	Identifier	ZEND_JMP_SET		129727	0					
ANR	129814	Argument	& cond_node		129727	2					
ANR	129815	UnaryOperationExpression	& cond_node		129727	0					
ANR	129816	UnaryOperator	&		129727	0					
ANR	129817	Identifier	cond_node		129727	1					
ANR	129818	Argument	NULL		129727	3					
ANR	129819	Identifier	NULL		129727	0					
ANR	129820	ExpressionStatement	"zend_compile_expr ( & false_node , false_ast )"	6149:1:181861:181902	129727	9	True				
ANR	129821	CallExpression	"zend_compile_expr ( & false_node , false_ast )"		129727	0					
ANR	129822	Callee	zend_compile_expr		129727	0					
ANR	129823	Identifier	zend_compile_expr		129727	0					
ANR	129824	ArgumentList	& false_node		129727	1					
ANR	129825	Argument	& false_node		129727	0					
ANR	129826	UnaryOperationExpression	& false_node		129727	0					
ANR	129827	UnaryOperator	&		129727	0					
ANR	129828	Identifier	false_node		129727	1					
ANR	129829	Argument	false_ast		129727	1					
ANR	129830	Identifier	false_ast		129727	0					
ANR	129831	ExpressionStatement	"opline_qm_assign = zend_emit_op_tmp ( NULL , ZEND_QM_ASSIGN , & false_node , NULL )"	6151:1:181906:181982	129727	10	True				
ANR	129832	AssignmentExpression	"opline_qm_assign = zend_emit_op_tmp ( NULL , ZEND_QM_ASSIGN , & false_node , NULL )"		129727	0		=			
ANR	129833	Identifier	opline_qm_assign		129727	0					
ANR	129834	CallExpression	"zend_emit_op_tmp ( NULL , ZEND_QM_ASSIGN , & false_node , NULL )"		129727	1					
ANR	129835	Callee	zend_emit_op_tmp		129727	0					
ANR	129836	Identifier	zend_emit_op_tmp		129727	0					
ANR	129837	ArgumentList	NULL		129727	1					
ANR	129838	Argument	NULL		129727	0					
ANR	129839	Identifier	NULL		129727	0					
ANR	129840	Argument	ZEND_QM_ASSIGN		129727	1					
ANR	129841	Identifier	ZEND_QM_ASSIGN		129727	0					
ANR	129842	Argument	& false_node		129727	2					
ANR	129843	UnaryOperationExpression	& false_node		129727	0					
ANR	129844	UnaryOperator	&		129727	0					
ANR	129845	Identifier	false_node		129727	1					
ANR	129846	Argument	NULL		129727	3					
ANR	129847	Identifier	NULL		129727	0					
ANR	129848	ExpressionStatement	"SET_NODE ( opline_qm_assign -> result , result )"	6152:1:181985:182027	129727	11	True				
ANR	129849	CallExpression	"SET_NODE ( opline_qm_assign -> result , result )"		129727	0					
ANR	129850	Callee	SET_NODE		129727	0					
ANR	129851	Identifier	SET_NODE		129727	0					
ANR	129852	ArgumentList	opline_qm_assign -> result		129727	1					
ANR	129853	Argument	opline_qm_assign -> result		129727	0					
ANR	129854	PtrMemberAccess	opline_qm_assign -> result		129727	0					
ANR	129855	Identifier	opline_qm_assign		129727	0					
ANR	129856	Identifier	result		129727	1					
ANR	129857	Argument	result		129727	1					
ANR	129858	Identifier	result		129727	0					
ANR	129859	ExpressionStatement	zend_update_jump_target_to_next ( opnum_jmp_set )	6154:1:182031:182077	129727	12	True				
ANR	129860	CallExpression	zend_update_jump_target_to_next ( opnum_jmp_set )		129727	0					
ANR	129861	Callee	zend_update_jump_target_to_next		129727	0					
ANR	129862	Identifier	zend_update_jump_target_to_next		129727	0					
ANR	129863	ArgumentList	opnum_jmp_set		129727	1					
ANR	129864	Argument	opnum_jmp_set		129727	0					
ANR	129865	Identifier	opnum_jmp_set		129727	0					
ANR	129866	ReturnType	static void		129727	1					
ANR	129867	Identifier	zend_compile_shorthand_conditional		129727	2					
ANR	129868	ParameterList	"znode * result , zend_ast * ast"		129727	3					
ANR	129869	Parameter	znode * result	6133:47:181459:181471	129727	0	True				
ANR	129870	ParameterType	znode *		129727	0					
ANR	129871	Identifier	result		129727	1					
ANR	129872	Parameter	zend_ast * ast	6133:62:181474:181486	129727	1	True				
ANR	129873	ParameterType	zend_ast *		129727	0					
ANR	129874	Identifier	ast		129727	1					
ANR	129875	CFGEntryNode	ENTRY		129727		True				
ANR	129876	CFGExitNode	EXIT		129727		True				
ANR	129877	Symbol	& false_node		129727						
ANR	129878	Symbol	zend_emit_op_tmp		129727						
ANR	129879	Symbol	ast		129727						
ANR	129880	Symbol	NULL		129727						
ANR	129881	Symbol	* opline_qm_assign		129727						
ANR	129882	Symbol	CG		129727						
ANR	129883	Symbol	cond_node		129727						
ANR	129884	Symbol	active_op_array		129727						
ANR	129885	Symbol	ZEND_JMP_SET		129727						
ANR	129886	Symbol	opline_qm_assign -> result		129727						
ANR	129887	Symbol	opnum_jmp_set		129727						
ANR	129888	Symbol	ZEND_QM_ASSIGN		129727						
ANR	129889	Symbol	cond_ast		129727						
ANR	129890	Symbol	result		129727						
ANR	129891	Symbol	* ast		129727						
ANR	129892	Symbol	* * ast		129727						
ANR	129893	Symbol	false_ast		129727						
ANR	129894	Symbol	* ast -> child		129727						
ANR	129895	Symbol	false_node		129727						
ANR	129896	Symbol	opline_qm_assign		129727						
ANR	129897	Symbol	ast -> child		129727						
ANR	129898	Symbol	get_next_op_number		129727						
ANR	129899	Symbol	& cond_node		129727						
ANR	129900	Function	zend_compile_conditional	6158:0:182092:182967							
ANR	129901	FunctionDef	"zend_compile_conditional (znode * result , zend_ast * ast)"		129900	0					
ANR	129902	CompoundStatement		6159:0:182162:182967	129900	0					
ANR	129903	IdentifierDeclStatement	zend_ast * cond_ast = ast -> child [ 0 ] ;	6160:1:182165:182199	129900	0	True				
ANR	129904	IdentifierDecl	* cond_ast = ast -> child [ 0 ]		129900	0					
ANR	129905	IdentifierDeclType	zend_ast *		129900	0					
ANR	129906	Identifier	cond_ast		129900	1					
ANR	129907	AssignmentExpression	* cond_ast = ast -> child [ 0 ]		129900	2		=			
ANR	129908	Identifier	cond_ast		129900	0					
ANR	129909	ArrayIndexing	ast -> child [ 0 ]		129900	1					
ANR	129910	PtrMemberAccess	ast -> child		129900	0					
ANR	129911	Identifier	ast		129900	0					
ANR	129912	Identifier	child		129900	1					
ANR	129913	PrimaryExpression	0		129900	1					
ANR	129914	IdentifierDeclStatement	zend_ast * true_ast = ast -> child [ 1 ] ;	6161:1:182202:182236	129900	1	True				
ANR	129915	IdentifierDecl	* true_ast = ast -> child [ 1 ]		129900	0					
ANR	129916	IdentifierDeclType	zend_ast *		129900	0					
ANR	129917	Identifier	true_ast		129900	1					
ANR	129918	AssignmentExpression	* true_ast = ast -> child [ 1 ]		129900	2		=			
ANR	129919	Identifier	true_ast		129900	0					
ANR	129920	ArrayIndexing	ast -> child [ 1 ]		129900	1					
ANR	129921	PtrMemberAccess	ast -> child		129900	0					
ANR	129922	Identifier	ast		129900	0					
ANR	129923	Identifier	child		129900	1					
ANR	129924	PrimaryExpression	1		129900	1					
ANR	129925	IdentifierDeclStatement	zend_ast * false_ast = ast -> child [ 2 ] ;	6162:1:182239:182274	129900	2	True				
ANR	129926	IdentifierDecl	* false_ast = ast -> child [ 2 ]		129900	0					
ANR	129927	IdentifierDeclType	zend_ast *		129900	0					
ANR	129928	Identifier	false_ast		129900	1					
ANR	129929	AssignmentExpression	* false_ast = ast -> child [ 2 ]		129900	2		=			
ANR	129930	Identifier	false_ast		129900	0					
ANR	129931	ArrayIndexing	ast -> child [ 2 ]		129900	1					
ANR	129932	PtrMemberAccess	ast -> child		129900	0					
ANR	129933	Identifier	ast		129900	0					
ANR	129934	Identifier	child		129900	1					
ANR	129935	PrimaryExpression	2		129900	1					
ANR	129936	IdentifierDeclStatement	"znode cond_node , true_node , false_node ;"	6164:1:182278:182316	129900	3	True				
ANR	129937	IdentifierDecl	cond_node		129900	0					
ANR	129938	IdentifierDeclType	znode		129900	0					
ANR	129939	Identifier	cond_node		129900	1					
ANR	129940	IdentifierDecl	true_node		129900	1					
ANR	129941	IdentifierDeclType	znode		129900	0					
ANR	129942	Identifier	true_node		129900	1					
ANR	129943	IdentifierDecl	false_node		129900	2					
ANR	129944	IdentifierDeclType	znode		129900	0					
ANR	129945	Identifier	false_node		129900	1					
ANR	129946	IdentifierDeclStatement	zend_op * opline_qm_assign2 ;	6165:1:182319:182345	129900	4	True				
ANR	129947	IdentifierDecl	* opline_qm_assign2		129900	0					
ANR	129948	IdentifierDeclType	zend_op *		129900	0					
ANR	129949	Identifier	opline_qm_assign2		129900	1					
ANR	129950	IdentifierDeclStatement	"uint32_t opnum_jmpz , opnum_jmp ;"	6166:1:182348:182378	129900	5	True				
ANR	129951	IdentifierDecl	opnum_jmpz		129900	0					
ANR	129952	IdentifierDeclType	uint32_t		129900	0					
ANR	129953	Identifier	opnum_jmpz		129900	1					
ANR	129954	IdentifierDecl	opnum_jmp		129900	1					
ANR	129955	IdentifierDeclType	uint32_t		129900	0					
ANR	129956	Identifier	opnum_jmp		129900	1					
ANR	129957	IfStatement	if ( ! true_ast )		129900	6					
ANR	129958	Condition	! true_ast	6168:5:182386:182394	129900	0	True				
ANR	129959	UnaryOperationExpression	! true_ast		129900	0					
ANR	129960	UnaryOperator	!		129900	0					
ANR	129961	Identifier	true_ast		129900	1					
ANR	129962	CompoundStatement		10:16:234:234	129900	1					
ANR	129963	ExpressionStatement	"zend_compile_shorthand_conditional ( result , ast )"	6169:2:182401:182448	129900	0	True				
ANR	129964	CallExpression	"zend_compile_shorthand_conditional ( result , ast )"		129900	0					
ANR	129965	Callee	zend_compile_shorthand_conditional		129900	0					
ANR	129966	Identifier	zend_compile_shorthand_conditional		129900	0					
ANR	129967	ArgumentList	result		129900	1					
ANR	129968	Argument	result		129900	0					
ANR	129969	Identifier	result		129900	0					
ANR	129970	Argument	ast		129900	1					
ANR	129971	Identifier	ast		129900	0					
ANR	129972	ReturnStatement	return ;	6170:2:182452:182458	129900	1	True				
ANR	129973	ExpressionStatement	"zend_compile_expr ( & cond_node , cond_ast )"	6173:1:182465:182504	129900	7	True				
ANR	129974	CallExpression	"zend_compile_expr ( & cond_node , cond_ast )"		129900	0					
ANR	129975	Callee	zend_compile_expr		129900	0					
ANR	129976	Identifier	zend_compile_expr		129900	0					
ANR	129977	ArgumentList	& cond_node		129900	1					
ANR	129978	Argument	& cond_node		129900	0					
ANR	129979	UnaryOperationExpression	& cond_node		129900	0					
ANR	129980	UnaryOperator	&		129900	0					
ANR	129981	Identifier	cond_node		129900	1					
ANR	129982	Argument	cond_ast		129900	1					
ANR	129983	Identifier	cond_ast		129900	0					
ANR	129984	ExpressionStatement	"opnum_jmpz = zend_emit_cond_jump ( ZEND_JMPZ , & cond_node , 0 )"	6175:1:182508:182566	129900	8	True				
ANR	129985	AssignmentExpression	"opnum_jmpz = zend_emit_cond_jump ( ZEND_JMPZ , & cond_node , 0 )"		129900	0		=			
ANR	129986	Identifier	opnum_jmpz		129900	0					
ANR	129987	CallExpression	"zend_emit_cond_jump ( ZEND_JMPZ , & cond_node , 0 )"		129900	1					
ANR	129988	Callee	zend_emit_cond_jump		129900	0					
ANR	129989	Identifier	zend_emit_cond_jump		129900	0					
ANR	129990	ArgumentList	ZEND_JMPZ		129900	1					
ANR	129991	Argument	ZEND_JMPZ		129900	0					
ANR	129992	Identifier	ZEND_JMPZ		129900	0					
ANR	129993	Argument	& cond_node		129900	1					
ANR	129994	UnaryOperationExpression	& cond_node		129900	0					
ANR	129995	UnaryOperator	&		129900	0					
ANR	129996	Identifier	cond_node		129900	1					
ANR	129997	Argument	0		129900	2					
ANR	129998	PrimaryExpression	0		129900	0					
ANR	129999	ExpressionStatement	"zend_compile_expr ( & true_node , true_ast )"	6177:1:182570:182609	129900	9	True				
ANR	130000	CallExpression	"zend_compile_expr ( & true_node , true_ast )"		129900	0					
ANR	130001	Callee	zend_compile_expr		129900	0					
ANR	130002	Identifier	zend_compile_expr		129900	0					
ANR	130003	ArgumentList	& true_node		129900	1					
ANR	130004	Argument	& true_node		129900	0					
ANR	130005	UnaryOperationExpression	& true_node		129900	0					
ANR	130006	UnaryOperator	&		129900	0					
ANR	130007	Identifier	true_node		129900	1					
ANR	130008	Argument	true_ast		129900	1					
ANR	130009	Identifier	true_ast		129900	0					
ANR	130010	ExpressionStatement	"zend_emit_op_tmp ( result , ZEND_QM_ASSIGN , & true_node , NULL )"	6179:1:182613:182671	129900	10	True				
ANR	130011	CallExpression	"zend_emit_op_tmp ( result , ZEND_QM_ASSIGN , & true_node , NULL )"		129900	0					
ANR	130012	Callee	zend_emit_op_tmp		129900	0					
ANR	130013	Identifier	zend_emit_op_tmp		129900	0					
ANR	130014	ArgumentList	result		129900	1					
ANR	130015	Argument	result		129900	0					
ANR	130016	Identifier	result		129900	0					
ANR	130017	Argument	ZEND_QM_ASSIGN		129900	1					
ANR	130018	Identifier	ZEND_QM_ASSIGN		129900	0					
ANR	130019	Argument	& true_node		129900	2					
ANR	130020	UnaryOperationExpression	& true_node		129900	0					
ANR	130021	UnaryOperator	&		129900	0					
ANR	130022	Identifier	true_node		129900	1					
ANR	130023	Argument	NULL		129900	3					
ANR	130024	Identifier	NULL		129900	0					
ANR	130025	ExpressionStatement	opnum_jmp = zend_emit_jump ( 0 )	6181:1:182675:182704	129900	11	True				
ANR	130026	AssignmentExpression	opnum_jmp = zend_emit_jump ( 0 )		129900	0		=			
ANR	130027	Identifier	opnum_jmp		129900	0					
ANR	130028	CallExpression	zend_emit_jump ( 0 )		129900	1					
ANR	130029	Callee	zend_emit_jump		129900	0					
ANR	130030	Identifier	zend_emit_jump		129900	0					
ANR	130031	ArgumentList	0		129900	1					
ANR	130032	Argument	0		129900	0					
ANR	130033	PrimaryExpression	0		129900	0					
ANR	130034	ExpressionStatement	zend_update_jump_target_to_next ( opnum_jmpz )	6183:1:182708:182751	129900	12	True				
ANR	130035	CallExpression	zend_update_jump_target_to_next ( opnum_jmpz )		129900	0					
ANR	130036	Callee	zend_update_jump_target_to_next		129900	0					
ANR	130037	Identifier	zend_update_jump_target_to_next		129900	0					
ANR	130038	ArgumentList	opnum_jmpz		129900	1					
ANR	130039	Argument	opnum_jmpz		129900	0					
ANR	130040	Identifier	opnum_jmpz		129900	0					
ANR	130041	ExpressionStatement	"zend_compile_expr ( & false_node , false_ast )"	6185:1:182755:182796	129900	13	True				
ANR	130042	CallExpression	"zend_compile_expr ( & false_node , false_ast )"		129900	0					
ANR	130043	Callee	zend_compile_expr		129900	0					
ANR	130044	Identifier	zend_compile_expr		129900	0					
ANR	130045	ArgumentList	& false_node		129900	1					
ANR	130046	Argument	& false_node		129900	0					
ANR	130047	UnaryOperationExpression	& false_node		129900	0					
ANR	130048	UnaryOperator	&		129900	0					
ANR	130049	Identifier	false_node		129900	1					
ANR	130050	Argument	false_ast		129900	1					
ANR	130051	Identifier	false_ast		129900	0					
ANR	130052	ExpressionStatement	"opline_qm_assign2 = zend_emit_op ( NULL , ZEND_QM_ASSIGN , & false_node , NULL )"	6187:1:182800:182873	129900	14	True				
ANR	130053	AssignmentExpression	"opline_qm_assign2 = zend_emit_op ( NULL , ZEND_QM_ASSIGN , & false_node , NULL )"		129900	0		=			
ANR	130054	Identifier	opline_qm_assign2		129900	0					
ANR	130055	CallExpression	"zend_emit_op ( NULL , ZEND_QM_ASSIGN , & false_node , NULL )"		129900	1					
ANR	130056	Callee	zend_emit_op		129900	0					
ANR	130057	Identifier	zend_emit_op		129900	0					
ANR	130058	ArgumentList	NULL		129900	1					
ANR	130059	Argument	NULL		129900	0					
ANR	130060	Identifier	NULL		129900	0					
ANR	130061	Argument	ZEND_QM_ASSIGN		129900	1					
ANR	130062	Identifier	ZEND_QM_ASSIGN		129900	0					
ANR	130063	Argument	& false_node		129900	2					
ANR	130064	UnaryOperationExpression	& false_node		129900	0					
ANR	130065	UnaryOperator	&		129900	0					
ANR	130066	Identifier	false_node		129900	1					
ANR	130067	Argument	NULL		129900	3					
ANR	130068	Identifier	NULL		129900	0					
ANR	130069	ExpressionStatement	"SET_NODE ( opline_qm_assign2 -> result , result )"	6188:1:182876:182919	129900	15	True				
ANR	130070	CallExpression	"SET_NODE ( opline_qm_assign2 -> result , result )"		129900	0					
ANR	130071	Callee	SET_NODE		129900	0					
ANR	130072	Identifier	SET_NODE		129900	0					
ANR	130073	ArgumentList	opline_qm_assign2 -> result		129900	1					
ANR	130074	Argument	opline_qm_assign2 -> result		129900	0					
ANR	130075	PtrMemberAccess	opline_qm_assign2 -> result		129900	0					
ANR	130076	Identifier	opline_qm_assign2		129900	0					
ANR	130077	Identifier	result		129900	1					
ANR	130078	Argument	result		129900	1					
ANR	130079	Identifier	result		129900	0					
ANR	130080	ExpressionStatement	zend_update_jump_target_to_next ( opnum_jmp )	6190:1:182923:182965	129900	16	True				
ANR	130081	CallExpression	zend_update_jump_target_to_next ( opnum_jmp )		129900	0					
ANR	130082	Callee	zend_update_jump_target_to_next		129900	0					
ANR	130083	Identifier	zend_update_jump_target_to_next		129900	0					
ANR	130084	ArgumentList	opnum_jmp		129900	1					
ANR	130085	Argument	opnum_jmp		129900	0					
ANR	130086	Identifier	opnum_jmp		129900	0					
ANR	130087	ReturnType	void		129900	1					
ANR	130088	Identifier	zend_compile_conditional		129900	2					
ANR	130089	ParameterList	"znode * result , zend_ast * ast"		129900	3					
ANR	130090	Parameter	znode * result	6158:30:182122:182134	129900	0	True				
ANR	130091	ParameterType	znode *		129900	0					
ANR	130092	Identifier	result		129900	1					
ANR	130093	Parameter	zend_ast * ast	6158:45:182137:182149	129900	1	True				
ANR	130094	ParameterType	zend_ast *		129900	0					
ANR	130095	Identifier	ast		129900	1					
ANR	130096	CFGEntryNode	ENTRY		129900		True				
ANR	130097	CFGExitNode	EXIT		129900		True				
ANR	130098	Symbol	zend_emit_jump		129900						
ANR	130099	Symbol	& false_node		129900						
ANR	130100	Symbol	ast		129900						
ANR	130101	Symbol	ZEND_QM_ASSIGN		129900						
ANR	130102	Symbol	result		129900						
ANR	130103	Symbol	* ast		129900						
ANR	130104	Symbol	* * ast		129900						
ANR	130105	Symbol	false_ast		129900						
ANR	130106	Symbol	true_node		129900						
ANR	130107	Symbol	zend_emit_cond_jump		129900						
ANR	130108	Symbol	opline_qm_assign2 -> result		129900						
ANR	130109	Symbol	true_ast		129900						
ANR	130110	Symbol	opnum_jmp		129900						
ANR	130111	Symbol	NULL		129900						
ANR	130112	Symbol	cond_node		129900						
ANR	130113	Symbol	ZEND_JMPZ		129900						
ANR	130114	Symbol	opnum_jmpz		129900						
ANR	130115	Symbol	cond_ast		129900						
ANR	130116	Symbol	& true_node		129900						
ANR	130117	Symbol	opline_qm_assign2		129900						
ANR	130118	Symbol	* ast -> child		129900						
ANR	130119	Symbol	false_node		129900						
ANR	130120	Symbol	* opline_qm_assign2		129900						
ANR	130121	Symbol	ast -> child		129900						
ANR	130122	Symbol	& cond_node		129900						
ANR	130123	Symbol	zend_emit_op		129900						
ANR	130124	Function	zend_compile_coalesce	6194:0:182980:183630							
ANR	130125	FunctionDef	"zend_compile_coalesce (znode * result , zend_ast * ast)"		130124	0					
ANR	130126	CompoundStatement		6195:0:183047:183630	130124	0					
ANR	130127	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	6196:1:183050:183084	130124	0	True				
ANR	130128	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		130124	0					
ANR	130129	IdentifierDeclType	zend_ast *		130124	0					
ANR	130130	Identifier	expr_ast		130124	1					
ANR	130131	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		130124	2		=			
ANR	130132	Identifier	expr_ast		130124	0					
ANR	130133	ArrayIndexing	ast -> child [ 0 ]		130124	1					
ANR	130134	PtrMemberAccess	ast -> child		130124	0					
ANR	130135	Identifier	ast		130124	0					
ANR	130136	Identifier	child		130124	1					
ANR	130137	PrimaryExpression	0		130124	1					
ANR	130138	IdentifierDeclStatement	zend_ast * default_ast = ast -> child [ 1 ] ;	6197:1:183087:183124	130124	1	True				
ANR	130139	IdentifierDecl	* default_ast = ast -> child [ 1 ]		130124	0					
ANR	130140	IdentifierDeclType	zend_ast *		130124	0					
ANR	130141	Identifier	default_ast		130124	1					
ANR	130142	AssignmentExpression	* default_ast = ast -> child [ 1 ]		130124	2		=			
ANR	130143	Identifier	default_ast		130124	0					
ANR	130144	ArrayIndexing	ast -> child [ 1 ]		130124	1					
ANR	130145	PtrMemberAccess	ast -> child		130124	0					
ANR	130146	Identifier	ast		130124	0					
ANR	130147	Identifier	child		130124	1					
ANR	130148	PrimaryExpression	1		130124	1					
ANR	130149	IdentifierDeclStatement	"znode expr_node , default_node ;"	6199:1:183128:183157	130124	2	True				
ANR	130150	IdentifierDecl	expr_node		130124	0					
ANR	130151	IdentifierDeclType	znode		130124	0					
ANR	130152	Identifier	expr_node		130124	1					
ANR	130153	IdentifierDecl	default_node		130124	1					
ANR	130154	IdentifierDeclType	znode		130124	0					
ANR	130155	Identifier	default_node		130124	1					
ANR	130156	IdentifierDeclStatement	zend_op * opline ;	6200:1:183160:183175	130124	3	True				
ANR	130157	IdentifierDecl	* opline		130124	0					
ANR	130158	IdentifierDeclType	zend_op *		130124	0					
ANR	130159	Identifier	opline		130124	1					
ANR	130160	IdentifierDeclStatement	uint32_t opnum ;	6201:1:183178:183192	130124	4	True				
ANR	130161	IdentifierDecl	opnum		130124	0					
ANR	130162	IdentifierDeclType	uint32_t		130124	0					
ANR	130163	Identifier	opnum		130124	1					
ANR	130164	ExpressionStatement	"zend_compile_var ( & expr_node , expr_ast , BP_VAR_IS )"	6203:1:183196:183245	130124	5	True				
ANR	130165	CallExpression	"zend_compile_var ( & expr_node , expr_ast , BP_VAR_IS )"		130124	0					
ANR	130166	Callee	zend_compile_var		130124	0					
ANR	130167	Identifier	zend_compile_var		130124	0					
ANR	130168	ArgumentList	& expr_node		130124	1					
ANR	130169	Argument	& expr_node		130124	0					
ANR	130170	UnaryOperationExpression	& expr_node		130124	0					
ANR	130171	UnaryOperator	&		130124	0					
ANR	130172	Identifier	expr_node		130124	1					
ANR	130173	Argument	expr_ast		130124	1					
ANR	130174	Identifier	expr_ast		130124	0					
ANR	130175	Argument	BP_VAR_IS		130124	2					
ANR	130176	Identifier	BP_VAR_IS		130124	0					
ANR	130177	ExpressionStatement	opnum = get_next_op_number ( CG ( active_op_array ) )	6205:1:183249:183296	130124	6	True				
ANR	130178	AssignmentExpression	opnum = get_next_op_number ( CG ( active_op_array ) )		130124	0		=			
ANR	130179	Identifier	opnum		130124	0					
ANR	130180	CallExpression	get_next_op_number ( CG ( active_op_array ) )		130124	1					
ANR	130181	Callee	get_next_op_number		130124	0					
ANR	130182	Identifier	get_next_op_number		130124	0					
ANR	130183	ArgumentList	CG ( active_op_array )		130124	1					
ANR	130184	Argument	CG ( active_op_array )		130124	0					
ANR	130185	CallExpression	CG ( active_op_array )		130124	0					
ANR	130186	Callee	CG		130124	0					
ANR	130187	Identifier	CG		130124	0					
ANR	130188	ArgumentList	active_op_array		130124	1					
ANR	130189	Argument	active_op_array		130124	0					
ANR	130190	Identifier	active_op_array		130124	0					
ANR	130191	ExpressionStatement	"zend_emit_op_tmp ( result , ZEND_COALESCE , & expr_node , NULL )"	6206:1:183299:183356	130124	7	True				
ANR	130192	CallExpression	"zend_emit_op_tmp ( result , ZEND_COALESCE , & expr_node , NULL )"		130124	0					
ANR	130193	Callee	zend_emit_op_tmp		130124	0					
ANR	130194	Identifier	zend_emit_op_tmp		130124	0					
ANR	130195	ArgumentList	result		130124	1					
ANR	130196	Argument	result		130124	0					
ANR	130197	Identifier	result		130124	0					
ANR	130198	Argument	ZEND_COALESCE		130124	1					
ANR	130199	Identifier	ZEND_COALESCE		130124	0					
ANR	130200	Argument	& expr_node		130124	2					
ANR	130201	UnaryOperationExpression	& expr_node		130124	0					
ANR	130202	UnaryOperator	&		130124	0					
ANR	130203	Identifier	expr_node		130124	1					
ANR	130204	Argument	NULL		130124	3					
ANR	130205	Identifier	NULL		130124	0					
ANR	130206	ExpressionStatement	"zend_compile_expr ( & default_node , default_ast )"	6208:1:183360:183405	130124	8	True				
ANR	130207	CallExpression	"zend_compile_expr ( & default_node , default_ast )"		130124	0					
ANR	130208	Callee	zend_compile_expr		130124	0					
ANR	130209	Identifier	zend_compile_expr		130124	0					
ANR	130210	ArgumentList	& default_node		130124	1					
ANR	130211	Argument	& default_node		130124	0					
ANR	130212	UnaryOperationExpression	& default_node		130124	0					
ANR	130213	UnaryOperator	&		130124	0					
ANR	130214	Identifier	default_node		130124	1					
ANR	130215	Argument	default_ast		130124	1					
ANR	130216	Identifier	default_ast		130124	0					
ANR	130217	ExpressionStatement	"opline = zend_emit_op_tmp ( NULL , ZEND_QM_ASSIGN , & default_node , NULL )"	6210:1:183409:183477	130124	9	True				
ANR	130218	AssignmentExpression	"opline = zend_emit_op_tmp ( NULL , ZEND_QM_ASSIGN , & default_node , NULL )"		130124	0		=			
ANR	130219	Identifier	opline		130124	0					
ANR	130220	CallExpression	"zend_emit_op_tmp ( NULL , ZEND_QM_ASSIGN , & default_node , NULL )"		130124	1					
ANR	130221	Callee	zend_emit_op_tmp		130124	0					
ANR	130222	Identifier	zend_emit_op_tmp		130124	0					
ANR	130223	ArgumentList	NULL		130124	1					
ANR	130224	Argument	NULL		130124	0					
ANR	130225	Identifier	NULL		130124	0					
ANR	130226	Argument	ZEND_QM_ASSIGN		130124	1					
ANR	130227	Identifier	ZEND_QM_ASSIGN		130124	0					
ANR	130228	Argument	& default_node		130124	2					
ANR	130229	UnaryOperationExpression	& default_node		130124	0					
ANR	130230	UnaryOperator	&		130124	0					
ANR	130231	Identifier	default_node		130124	1					
ANR	130232	Argument	NULL		130124	3					
ANR	130233	Identifier	NULL		130124	0					
ANR	130234	ExpressionStatement	"SET_NODE ( opline -> result , result )"	6211:1:183480:183512	130124	10	True				
ANR	130235	CallExpression	"SET_NODE ( opline -> result , result )"		130124	0					
ANR	130236	Callee	SET_NODE		130124	0					
ANR	130237	Identifier	SET_NODE		130124	0					
ANR	130238	ArgumentList	opline -> result		130124	1					
ANR	130239	Argument	opline -> result		130124	0					
ANR	130240	PtrMemberAccess	opline -> result		130124	0					
ANR	130241	Identifier	opline		130124	0					
ANR	130242	Identifier	result		130124	1					
ANR	130243	Argument	result		130124	1					
ANR	130244	Identifier	result		130124	0					
ANR	130245	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ opnum ]	6213:1:183516:183561	130124	11	True				
ANR	130246	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ opnum ]		130124	0		=			
ANR	130247	Identifier	opline		130124	0					
ANR	130248	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ opnum ]		130124	1					
ANR	130249	UnaryOperator	&		130124	0					
ANR	130250	ArrayIndexing	CG ( active_op_array ) -> opcodes [ opnum ]		130124	1					
ANR	130251	PtrMemberAccess	CG ( active_op_array ) -> opcodes		130124	0					
ANR	130252	CallExpression	CG ( active_op_array )		130124	0					
ANR	130253	Callee	CG		130124	0					
ANR	130254	Identifier	CG		130124	0					
ANR	130255	ArgumentList	active_op_array		130124	1					
ANR	130256	Argument	active_op_array		130124	0					
ANR	130257	Identifier	active_op_array		130124	0					
ANR	130258	Identifier	opcodes		130124	1					
ANR	130259	Identifier	opnum		130124	1					
ANR	130260	ExpressionStatement	opline -> op2 . opline_num = get_next_op_number ( CG ( active_op_array ) )	6214:1:183564:183628	130124	12	True				
ANR	130261	AssignmentExpression	opline -> op2 . opline_num = get_next_op_number ( CG ( active_op_array ) )		130124	0		=			
ANR	130262	MemberAccess	opline -> op2 . opline_num		130124	0					
ANR	130263	PtrMemberAccess	opline -> op2		130124	0					
ANR	130264	Identifier	opline		130124	0					
ANR	130265	Identifier	op2		130124	1					
ANR	130266	Identifier	opline_num		130124	1					
ANR	130267	CallExpression	get_next_op_number ( CG ( active_op_array ) )		130124	1					
ANR	130268	Callee	get_next_op_number		130124	0					
ANR	130269	Identifier	get_next_op_number		130124	0					
ANR	130270	ArgumentList	CG ( active_op_array )		130124	1					
ANR	130271	Argument	CG ( active_op_array )		130124	0					
ANR	130272	CallExpression	CG ( active_op_array )		130124	0					
ANR	130273	Callee	CG		130124	0					
ANR	130274	Identifier	CG		130124	0					
ANR	130275	ArgumentList	active_op_array		130124	1					
ANR	130276	Argument	active_op_array		130124	0					
ANR	130277	Identifier	active_op_array		130124	0					
ANR	130278	ReturnType	void		130124	1					
ANR	130279	Identifier	zend_compile_coalesce		130124	2					
ANR	130280	ParameterList	"znode * result , zend_ast * ast"		130124	3					
ANR	130281	Parameter	znode * result	6194:27:183007:183019	130124	0	True				
ANR	130282	ParameterType	znode *		130124	0					
ANR	130283	Identifier	result		130124	1					
ANR	130284	Parameter	zend_ast * ast	6194:42:183022:183034	130124	1	True				
ANR	130285	ParameterType	zend_ast *		130124	0					
ANR	130286	Identifier	ast		130124	1					
ANR	130287	CFGEntryNode	ENTRY		130124		True				
ANR	130288	CFGExitNode	EXIT		130124		True				
ANR	130289	Symbol	zend_emit_op_tmp		130124						
ANR	130290	Symbol	opline -> op2		130124						
ANR	130291	Symbol	ast		130124						
ANR	130292	Symbol	* CG		130124						
ANR	130293	Symbol	ZEND_QM_ASSIGN		130124						
ANR	130294	Symbol	& expr_node		130124						
ANR	130295	Symbol	CG ( active_op_array ) -> opcodes		130124						
ANR	130296	Symbol	opline -> result		130124						
ANR	130297	Symbol	result		130124						
ANR	130298	Symbol	* ast		130124						
ANR	130299	Symbol	opline		130124						
ANR	130300	Symbol	opnum		130124						
ANR	130301	Symbol	* * ast		130124						
ANR	130302	Symbol	BP_VAR_IS		130124						
ANR	130303	Symbol	opline -> op2 . opline_num		130124						
ANR	130304	Symbol	NULL		130124						
ANR	130305	Symbol	CG		130124						
ANR	130306	Symbol	active_op_array		130124						
ANR	130307	Symbol	expr_ast		130124						
ANR	130308	Symbol	expr_node		130124						
ANR	130309	Symbol	& default_node		130124						
ANR	130310	Symbol	* opline		130124						
ANR	130311	Symbol	ZEND_COALESCE		130124						
ANR	130312	Symbol	* ast -> child		130124						
ANR	130313	Symbol	default_node		130124						
ANR	130314	Symbol	ast -> child		130124						
ANR	130315	Symbol	default_ast		130124						
ANR	130316	Symbol	get_next_op_number		130124						
ANR	130317	Function	zend_compile_print	6218:0:183643:183980							
ANR	130318	FunctionDef	"zend_compile_print (znode * result , zend_ast * ast)"		130317	0					
ANR	130319	CompoundStatement		6219:0:183707:183980	130317	0					
ANR	130320	IdentifierDeclStatement	zend_op * opline ;	6220:1:183710:183725	130317	0	True				
ANR	130321	IdentifierDecl	* opline		130317	0					
ANR	130322	IdentifierDeclType	zend_op *		130317	0					
ANR	130323	Identifier	opline		130317	1					
ANR	130324	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	6221:1:183728:183762	130317	1	True				
ANR	130325	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		130317	0					
ANR	130326	IdentifierDeclType	zend_ast *		130317	0					
ANR	130327	Identifier	expr_ast		130317	1					
ANR	130328	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		130317	2		=			
ANR	130329	Identifier	expr_ast		130317	0					
ANR	130330	ArrayIndexing	ast -> child [ 0 ]		130317	1					
ANR	130331	PtrMemberAccess	ast -> child		130317	0					
ANR	130332	Identifier	ast		130317	0					
ANR	130333	Identifier	child		130317	1					
ANR	130334	PrimaryExpression	0		130317	1					
ANR	130335	IdentifierDeclStatement	znode expr_node ;	6223:1:183766:183781	130317	2	True				
ANR	130336	IdentifierDecl	expr_node		130317	0					
ANR	130337	IdentifierDeclType	znode		130317	0					
ANR	130338	Identifier	expr_node		130317	1					
ANR	130339	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	6224:1:183784:183823	130317	3	True				
ANR	130340	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		130317	0					
ANR	130341	Callee	zend_compile_expr		130317	0					
ANR	130342	Identifier	zend_compile_expr		130317	0					
ANR	130343	ArgumentList	& expr_node		130317	1					
ANR	130344	Argument	& expr_node		130317	0					
ANR	130345	UnaryOperationExpression	& expr_node		130317	0					
ANR	130346	UnaryOperator	&		130317	0					
ANR	130347	Identifier	expr_node		130317	1					
ANR	130348	Argument	expr_ast		130317	1					
ANR	130349	Identifier	expr_ast		130317	0					
ANR	130350	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_ECHO , & expr_node , NULL )"	6226:1:183827:183883	130317	4	True				
ANR	130351	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_ECHO , & expr_node , NULL )"		130317	0		=			
ANR	130352	Identifier	opline		130317	0					
ANR	130353	CallExpression	"zend_emit_op ( NULL , ZEND_ECHO , & expr_node , NULL )"		130317	1					
ANR	130354	Callee	zend_emit_op		130317	0					
ANR	130355	Identifier	zend_emit_op		130317	0					
ANR	130356	ArgumentList	NULL		130317	1					
ANR	130357	Argument	NULL		130317	0					
ANR	130358	Identifier	NULL		130317	0					
ANR	130359	Argument	ZEND_ECHO		130317	1					
ANR	130360	Identifier	ZEND_ECHO		130317	0					
ANR	130361	Argument	& expr_node		130317	2					
ANR	130362	UnaryOperationExpression	& expr_node		130317	0					
ANR	130363	UnaryOperator	&		130317	0					
ANR	130364	Identifier	expr_node		130317	1					
ANR	130365	Argument	NULL		130317	3					
ANR	130366	Identifier	NULL		130317	0					
ANR	130367	ExpressionStatement	opline -> extended_value = 1	6227:1:183886:183912	130317	5	True				
ANR	130368	AssignmentExpression	opline -> extended_value = 1		130317	0		=			
ANR	130369	PtrMemberAccess	opline -> extended_value		130317	0					
ANR	130370	Identifier	opline		130317	0					
ANR	130371	Identifier	extended_value		130317	1					
ANR	130372	PrimaryExpression	1		130317	1					
ANR	130373	ExpressionStatement	result -> op_type = IS_CONST	6229:1:183916:183942	130317	6	True				
ANR	130374	AssignmentExpression	result -> op_type = IS_CONST		130317	0		=			
ANR	130375	PtrMemberAccess	result -> op_type		130317	0					
ANR	130376	Identifier	result		130317	0					
ANR	130377	Identifier	op_type		130317	1					
ANR	130378	Identifier	IS_CONST		130317	1					
ANR	130379	ExpressionStatement	"ZVAL_LONG ( & result -> u . constant , 1 )"	6230:1:183945:183978	130317	7	True				
ANR	130380	CallExpression	"ZVAL_LONG ( & result -> u . constant , 1 )"		130317	0					
ANR	130381	Callee	ZVAL_LONG		130317	0					
ANR	130382	Identifier	ZVAL_LONG		130317	0					
ANR	130383	ArgumentList	& result -> u . constant		130317	1					
ANR	130384	Argument	& result -> u . constant		130317	0					
ANR	130385	UnaryOperationExpression	& result -> u . constant		130317	0					
ANR	130386	UnaryOperator	&		130317	0					
ANR	130387	MemberAccess	result -> u . constant		130317	1					
ANR	130388	PtrMemberAccess	result -> u		130317	0					
ANR	130389	Identifier	result		130317	0					
ANR	130390	Identifier	u		130317	1					
ANR	130391	Identifier	constant		130317	1					
ANR	130392	Argument	1		130317	1					
ANR	130393	PrimaryExpression	1		130317	0					
ANR	130394	ReturnType	void		130317	1					
ANR	130395	Identifier	zend_compile_print		130317	2					
ANR	130396	ParameterList	"znode * result , zend_ast * ast"		130317	3					
ANR	130397	Parameter	znode * result	6218:24:183667:183679	130317	0	True				
ANR	130398	ParameterType	znode *		130317	0					
ANR	130399	Identifier	result		130317	1					
ANR	130400	Parameter	zend_ast * ast	6218:39:183682:183694	130317	1	True				
ANR	130401	ParameterType	zend_ast *		130317	0					
ANR	130402	Identifier	ast		130317	1					
ANR	130403	CFGEntryNode	ENTRY		130317		True				
ANR	130404	CFGExitNode	EXIT		130317		True				
ANR	130405	Symbol	IS_CONST		130317						
ANR	130406	Symbol	ast		130317						
ANR	130407	Symbol	NULL		130317						
ANR	130408	Symbol	& result -> u		130317						
ANR	130409	Symbol	ZEND_ECHO		130317						
ANR	130410	Symbol	expr_ast		130317						
ANR	130411	Symbol	& expr_node		130317						
ANR	130412	Symbol	result -> op_type		130317						
ANR	130413	Symbol	result -> u		130317						
ANR	130414	Symbol	opline -> extended_value		130317						
ANR	130415	Symbol	result		130317						
ANR	130416	Symbol	expr_node		130317						
ANR	130417	Symbol	opline		130317						
ANR	130418	Symbol	* ast		130317						
ANR	130419	Symbol	* opline		130317						
ANR	130420	Symbol	* result		130317						
ANR	130421	Symbol	* * ast		130317						
ANR	130422	Symbol	& result -> u . constant		130317						
ANR	130423	Symbol	* ast -> child		130317						
ANR	130424	Symbol	ast -> child		130317						
ANR	130425	Symbol	zend_emit_op		130317						
ANR	130426	Function	zend_compile_exit	6234:0:183993:184350							
ANR	130427	FunctionDef	"zend_compile_exit (znode * result , zend_ast * ast)"		130426	0					
ANR	130428	CompoundStatement		6235:0:184056:184350	130426	0					
ANR	130429	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	6236:1:184059:184093	130426	0	True				
ANR	130430	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		130426	0					
ANR	130431	IdentifierDeclType	zend_ast *		130426	0					
ANR	130432	Identifier	expr_ast		130426	1					
ANR	130433	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		130426	2		=			
ANR	130434	Identifier	expr_ast		130426	0					
ANR	130435	ArrayIndexing	ast -> child [ 0 ]		130426	1					
ANR	130436	PtrMemberAccess	ast -> child		130426	0					
ANR	130437	Identifier	ast		130426	0					
ANR	130438	Identifier	child		130426	1					
ANR	130439	PrimaryExpression	0		130426	1					
ANR	130440	IfStatement	if ( expr_ast )		130426	1					
ANR	130441	Condition	expr_ast	6238:5:184101:184108	130426	0	True				
ANR	130442	Identifier	expr_ast		130426	0					
ANR	130443	CompoundStatement		5:2:58:73	130426	1					
ANR	130444	IdentifierDeclStatement	znode expr_node ;	6239:2:184115:184130	130426	0	True				
ANR	130445	IdentifierDecl	expr_node		130426	0					
ANR	130446	IdentifierDeclType	znode		130426	0					
ANR	130447	Identifier	expr_node		130426	1					
ANR	130448	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	6240:2:184134:184173	130426	1	True				
ANR	130449	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		130426	0					
ANR	130450	Callee	zend_compile_expr		130426	0					
ANR	130451	Identifier	zend_compile_expr		130426	0					
ANR	130452	ArgumentList	& expr_node		130426	1					
ANR	130453	Argument	& expr_node		130426	0					
ANR	130454	UnaryOperationExpression	& expr_node		130426	0					
ANR	130455	UnaryOperator	&		130426	0					
ANR	130456	Identifier	expr_node		130426	1					
ANR	130457	Argument	expr_ast		130426	1					
ANR	130458	Identifier	expr_ast		130426	0					
ANR	130459	ExpressionStatement	"zend_emit_op ( NULL , ZEND_EXIT , & expr_node , NULL )"	6241:2:184177:184224	130426	2	True				
ANR	130460	CallExpression	"zend_emit_op ( NULL , ZEND_EXIT , & expr_node , NULL )"		130426	0					
ANR	130461	Callee	zend_emit_op		130426	0					
ANR	130462	Identifier	zend_emit_op		130426	0					
ANR	130463	ArgumentList	NULL		130426	1					
ANR	130464	Argument	NULL		130426	0					
ANR	130465	Identifier	NULL		130426	0					
ANR	130466	Argument	ZEND_EXIT		130426	1					
ANR	130467	Identifier	ZEND_EXIT		130426	0					
ANR	130468	Argument	& expr_node		130426	2					
ANR	130469	UnaryOperationExpression	& expr_node		130426	0					
ANR	130470	UnaryOperator	&		130426	0					
ANR	130471	Identifier	expr_node		130426	1					
ANR	130472	Argument	NULL		130426	3					
ANR	130473	Identifier	NULL		130426	0					
ANR	130474	ElseStatement	else		130426	0					
ANR	130475	CompoundStatement		8:8:177:177	130426	0					
ANR	130476	ExpressionStatement	"zend_emit_op ( NULL , ZEND_EXIT , NULL , NULL )"	6243:2:184238:184279	130426	0	True				
ANR	130477	CallExpression	"zend_emit_op ( NULL , ZEND_EXIT , NULL , NULL )"		130426	0					
ANR	130478	Callee	zend_emit_op		130426	0					
ANR	130479	Identifier	zend_emit_op		130426	0					
ANR	130480	ArgumentList	NULL		130426	1					
ANR	130481	Argument	NULL		130426	0					
ANR	130482	Identifier	NULL		130426	0					
ANR	130483	Argument	ZEND_EXIT		130426	1					
ANR	130484	Identifier	ZEND_EXIT		130426	0					
ANR	130485	Argument	NULL		130426	2					
ANR	130486	Identifier	NULL		130426	0					
ANR	130487	Argument	NULL		130426	3					
ANR	130488	Identifier	NULL		130426	0					
ANR	130489	ExpressionStatement	result -> op_type = IS_CONST	6246:1:184286:184312	130426	2	True				
ANR	130490	AssignmentExpression	result -> op_type = IS_CONST		130426	0		=			
ANR	130491	PtrMemberAccess	result -> op_type		130426	0					
ANR	130492	Identifier	result		130426	0					
ANR	130493	Identifier	op_type		130426	1					
ANR	130494	Identifier	IS_CONST		130426	1					
ANR	130495	ExpressionStatement	"ZVAL_BOOL ( & result -> u . constant , 1 )"	6247:1:184315:184348	130426	3	True				
ANR	130496	CallExpression	"ZVAL_BOOL ( & result -> u . constant , 1 )"		130426	0					
ANR	130497	Callee	ZVAL_BOOL		130426	0					
ANR	130498	Identifier	ZVAL_BOOL		130426	0					
ANR	130499	ArgumentList	& result -> u . constant		130426	1					
ANR	130500	Argument	& result -> u . constant		130426	0					
ANR	130501	UnaryOperationExpression	& result -> u . constant		130426	0					
ANR	130502	UnaryOperator	&		130426	0					
ANR	130503	MemberAccess	result -> u . constant		130426	1					
ANR	130504	PtrMemberAccess	result -> u		130426	0					
ANR	130505	Identifier	result		130426	0					
ANR	130506	Identifier	u		130426	1					
ANR	130507	Identifier	constant		130426	1					
ANR	130508	Argument	1		130426	1					
ANR	130509	PrimaryExpression	1		130426	0					
ANR	130510	ReturnType	void		130426	1					
ANR	130511	Identifier	zend_compile_exit		130426	2					
ANR	130512	ParameterList	"znode * result , zend_ast * ast"		130426	3					
ANR	130513	Parameter	znode * result	6234:23:184016:184028	130426	0	True				
ANR	130514	ParameterType	znode *		130426	0					
ANR	130515	Identifier	result		130426	1					
ANR	130516	Parameter	zend_ast * ast	6234:38:184031:184043	130426	1	True				
ANR	130517	ParameterType	zend_ast *		130426	0					
ANR	130518	Identifier	ast		130426	1					
ANR	130519	CFGEntryNode	ENTRY		130426		True				
ANR	130520	CFGExitNode	EXIT		130426		True				
ANR	130521	Symbol	IS_CONST		130426						
ANR	130522	Symbol	ast		130426						
ANR	130523	Symbol	NULL		130426						
ANR	130524	Symbol	& result -> u		130426						
ANR	130525	Symbol	expr_ast		130426						
ANR	130526	Symbol	& expr_node		130426						
ANR	130527	Symbol	result -> op_type		130426						
ANR	130528	Symbol	result -> u		130426						
ANR	130529	Symbol	result		130426						
ANR	130530	Symbol	expr_node		130426						
ANR	130531	Symbol	* ast		130426						
ANR	130532	Symbol	* result		130426						
ANR	130533	Symbol	* * ast		130426						
ANR	130534	Symbol	ZEND_EXIT		130426						
ANR	130535	Symbol	& result -> u . constant		130426						
ANR	130536	Symbol	* ast -> child		130426						
ANR	130537	Symbol	ast -> child		130426						
ANR	130538	Function	zend_compile_yield	6251:0:184363:185271							
ANR	130539	FunctionDef	"zend_compile_yield (znode * result , zend_ast * ast)"		130538	0					
ANR	130540	CompoundStatement		6252:0:184427:185271	130538	0					
ANR	130541	IdentifierDeclStatement	zend_ast * value_ast = ast -> child [ 0 ] ;	6253:1:184430:184465	130538	0	True				
ANR	130542	IdentifierDecl	* value_ast = ast -> child [ 0 ]		130538	0					
ANR	130543	IdentifierDeclType	zend_ast *		130538	0					
ANR	130544	Identifier	value_ast		130538	1					
ANR	130545	AssignmentExpression	* value_ast = ast -> child [ 0 ]		130538	2		=			
ANR	130546	Identifier	value_ast		130538	0					
ANR	130547	ArrayIndexing	ast -> child [ 0 ]		130538	1					
ANR	130548	PtrMemberAccess	ast -> child		130538	0					
ANR	130549	Identifier	ast		130538	0					
ANR	130550	Identifier	child		130538	1					
ANR	130551	PrimaryExpression	0		130538	1					
ANR	130552	IdentifierDeclStatement	zend_ast * key_ast = ast -> child [ 1 ] ;	6254:1:184468:184501	130538	1	True				
ANR	130553	IdentifierDecl	* key_ast = ast -> child [ 1 ]		130538	0					
ANR	130554	IdentifierDeclType	zend_ast *		130538	0					
ANR	130555	Identifier	key_ast		130538	1					
ANR	130556	AssignmentExpression	* key_ast = ast -> child [ 1 ]		130538	2		=			
ANR	130557	Identifier	key_ast		130538	0					
ANR	130558	ArrayIndexing	ast -> child [ 1 ]		130538	1					
ANR	130559	PtrMemberAccess	ast -> child		130538	0					
ANR	130560	Identifier	ast		130538	0					
ANR	130561	Identifier	child		130538	1					
ANR	130562	PrimaryExpression	1		130538	1					
ANR	130563	IdentifierDeclStatement	"znode value_node , key_node ;"	6256:1:184505:184531	130538	2	True				
ANR	130564	IdentifierDecl	value_node		130538	0					
ANR	130565	IdentifierDeclType	znode		130538	0					
ANR	130566	Identifier	value_node		130538	1					
ANR	130567	IdentifierDecl	key_node		130538	1					
ANR	130568	IdentifierDeclType	znode		130538	0					
ANR	130569	Identifier	key_node		130538	1					
ANR	130570	IdentifierDeclStatement	"znode * value_node_ptr = NULL , * key_node_ptr = NULL ;"	6257:1:184534:184584	130538	3	True				
ANR	130571	IdentifierDecl	* value_node_ptr = NULL		130538	0					
ANR	130572	IdentifierDeclType	znode *		130538	0					
ANR	130573	Identifier	value_node_ptr		130538	1					
ANR	130574	AssignmentExpression	* value_node_ptr = NULL		130538	2		=			
ANR	130575	Identifier	NULL		130538	0					
ANR	130576	Identifier	NULL		130538	1					
ANR	130577	IdentifierDecl	* key_node_ptr = NULL		130538	1					
ANR	130578	IdentifierDeclType	znode *		130538	0					
ANR	130579	Identifier	key_node_ptr		130538	1					
ANR	130580	AssignmentExpression	* key_node_ptr = NULL		130538	2		=			
ANR	130581	Identifier	NULL		130538	0					
ANR	130582	Identifier	NULL		130538	1					
ANR	130583	IdentifierDeclStatement	zend_op * opline ;	6258:1:184587:184602	130538	4	True				
ANR	130584	IdentifierDecl	* opline		130538	0					
ANR	130585	IdentifierDeclType	zend_op *		130538	0					
ANR	130586	Identifier	opline		130538	1					
ANR	130587	IdentifierDeclStatement	zend_bool returns_by_ref = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0 ;	6259:1:184605:184696	130538	5	True				
ANR	130588	IdentifierDecl	returns_by_ref = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		130538	0					
ANR	130589	IdentifierDeclType	zend_bool		130538	0					
ANR	130590	Identifier	returns_by_ref		130538	1					
ANR	130591	AssignmentExpression	returns_by_ref = ( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		130538	2		=			
ANR	130592	Identifier	returns_by_ref		130538	0					
ANR	130593	EqualityExpression	( CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE ) != 0		130538	1		!=			
ANR	130594	BitAndExpression	CG ( active_op_array ) -> fn_flags & ZEND_ACC_RETURN_REFERENCE		130538	0		&			
ANR	130595	PtrMemberAccess	CG ( active_op_array ) -> fn_flags		130538	0					
ANR	130596	CallExpression	CG ( active_op_array )		130538	0					
ANR	130597	Callee	CG		130538	0					
ANR	130598	Identifier	CG		130538	0					
ANR	130599	ArgumentList	active_op_array		130538	1					
ANR	130600	Argument	active_op_array		130538	0					
ANR	130601	Identifier	active_op_array		130538	0					
ANR	130602	Identifier	fn_flags		130538	1					
ANR	130603	Identifier	ZEND_ACC_RETURN_REFERENCE		130538	1					
ANR	130604	PrimaryExpression	0		130538	1					
ANR	130605	ExpressionStatement	zend_mark_function_as_generator ( )	6261:1:184700:184733	130538	6	True				
ANR	130606	CallExpression	zend_mark_function_as_generator ( )		130538	0					
ANR	130607	Callee	zend_mark_function_as_generator		130538	0					
ANR	130608	Identifier	zend_mark_function_as_generator		130538	0					
ANR	130609	ArgumentList			130538	1					
ANR	130610	IfStatement	if ( key_ast )		130538	7					
ANR	130611	Condition	key_ast	6263:5:184741:184747	130538	0	True				
ANR	130612	Identifier	key_ast		130538	0					
ANR	130613	CompoundStatement		12:14:322:322	130538	1					
ANR	130614	ExpressionStatement	"zend_compile_expr ( & key_node , key_ast )"	6264:2:184754:184791	130538	0	True				
ANR	130615	CallExpression	"zend_compile_expr ( & key_node , key_ast )"		130538	0					
ANR	130616	Callee	zend_compile_expr		130538	0					
ANR	130617	Identifier	zend_compile_expr		130538	0					
ANR	130618	ArgumentList	& key_node		130538	1					
ANR	130619	Argument	& key_node		130538	0					
ANR	130620	UnaryOperationExpression	& key_node		130538	0					
ANR	130621	UnaryOperator	&		130538	0					
ANR	130622	Identifier	key_node		130538	1					
ANR	130623	Argument	key_ast		130538	1					
ANR	130624	Identifier	key_ast		130538	0					
ANR	130625	ExpressionStatement	key_node_ptr = & key_node	6265:2:184795:184819	130538	1	True				
ANR	130626	AssignmentExpression	key_node_ptr = & key_node		130538	0		=			
ANR	130627	Identifier	key_node_ptr		130538	0					
ANR	130628	UnaryOperationExpression	& key_node		130538	1					
ANR	130629	UnaryOperator	&		130538	0					
ANR	130630	Identifier	key_node		130538	1					
ANR	130631	IfStatement	if ( value_ast )		130538	8					
ANR	130632	Condition	value_ast	6268:5:184830:184838	130538	0	True				
ANR	130633	Identifier	value_ast		130538	0					
ANR	130634	CompoundStatement		17:16:413:413	130538	1					
ANR	130635	IfStatement	if ( returns_by_ref && zend_is_variable ( value_ast ) && ! zend_is_call ( value_ast ) )		130538	0					
ANR	130636	Condition	returns_by_ref && zend_is_variable ( value_ast ) && ! zend_is_call ( value_ast )	6269:6:184849:184921	130538	0	True				
ANR	130637	AndExpression	returns_by_ref && zend_is_variable ( value_ast ) && ! zend_is_call ( value_ast )		130538	0		&&			
ANR	130638	Identifier	returns_by_ref		130538	0					
ANR	130639	AndExpression	zend_is_variable ( value_ast ) && ! zend_is_call ( value_ast )		130538	1		&&			
ANR	130640	CallExpression	zend_is_variable ( value_ast )		130538	0					
ANR	130641	Callee	zend_is_variable		130538	0					
ANR	130642	Identifier	zend_is_variable		130538	0					
ANR	130643	ArgumentList	value_ast		130538	1					
ANR	130644	Argument	value_ast		130538	0					
ANR	130645	Identifier	value_ast		130538	0					
ANR	130646	UnaryOperationExpression	! zend_is_call ( value_ast )		130538	1					
ANR	130647	UnaryOperator	!		130538	0					
ANR	130648	CallExpression	zend_is_call ( value_ast )		130538	1					
ANR	130649	Callee	zend_is_call		130538	0					
ANR	130650	Identifier	zend_is_call		130538	0					
ANR	130651	ArgumentList	value_ast		130538	1					
ANR	130652	Argument	value_ast		130538	0					
ANR	130653	Identifier	value_ast		130538	0					
ANR	130654	CompoundStatement		18:81:496:496	130538	1					
ANR	130655	ExpressionStatement	"zend_compile_var ( & value_node , value_ast , BP_VAR_REF )"	6270:3:184929:184981	130538	0	True				
ANR	130656	CallExpression	"zend_compile_var ( & value_node , value_ast , BP_VAR_REF )"		130538	0					
ANR	130657	Callee	zend_compile_var		130538	0					
ANR	130658	Identifier	zend_compile_var		130538	0					
ANR	130659	ArgumentList	& value_node		130538	1					
ANR	130660	Argument	& value_node		130538	0					
ANR	130661	UnaryOperationExpression	& value_node		130538	0					
ANR	130662	UnaryOperator	&		130538	0					
ANR	130663	Identifier	value_node		130538	1					
ANR	130664	Argument	value_ast		130538	1					
ANR	130665	Identifier	value_ast		130538	0					
ANR	130666	Argument	BP_VAR_REF		130538	2					
ANR	130667	Identifier	BP_VAR_REF		130538	0					
ANR	130668	ElseStatement	else		130538	0					
ANR	130669	CompoundStatement		20:9:564:564	130538	0					
ANR	130670	ExpressionStatement	"zend_compile_expr ( & value_node , value_ast )"	6272:3:184997:185038	130538	0	True				
ANR	130671	CallExpression	"zend_compile_expr ( & value_node , value_ast )"		130538	0					
ANR	130672	Callee	zend_compile_expr		130538	0					
ANR	130673	Identifier	zend_compile_expr		130538	0					
ANR	130674	ArgumentList	& value_node		130538	1					
ANR	130675	Argument	& value_node		130538	0					
ANR	130676	UnaryOperationExpression	& value_node		130538	0					
ANR	130677	UnaryOperator	&		130538	0					
ANR	130678	Identifier	value_node		130538	1					
ANR	130679	Argument	value_ast		130538	1					
ANR	130680	Identifier	value_ast		130538	0					
ANR	130681	ExpressionStatement	value_node_ptr = & value_node	6274:2:185046:185074	130538	1	True				
ANR	130682	AssignmentExpression	value_node_ptr = & value_node		130538	0		=			
ANR	130683	Identifier	value_node_ptr		130538	0					
ANR	130684	UnaryOperationExpression	& value_node		130538	1					
ANR	130685	UnaryOperator	&		130538	0					
ANR	130686	Identifier	value_node		130538	1					
ANR	130687	ExpressionStatement	"opline = zend_emit_op ( result , ZEND_YIELD , value_node_ptr , key_node_ptr )"	6277:1:185081:185152	130538	9	True				
ANR	130688	AssignmentExpression	"opline = zend_emit_op ( result , ZEND_YIELD , value_node_ptr , key_node_ptr )"		130538	0		=			
ANR	130689	Identifier	opline		130538	0					
ANR	130690	CallExpression	"zend_emit_op ( result , ZEND_YIELD , value_node_ptr , key_node_ptr )"		130538	1					
ANR	130691	Callee	zend_emit_op		130538	0					
ANR	130692	Identifier	zend_emit_op		130538	0					
ANR	130693	ArgumentList	result		130538	1					
ANR	130694	Argument	result		130538	0					
ANR	130695	Identifier	result		130538	0					
ANR	130696	Argument	ZEND_YIELD		130538	1					
ANR	130697	Identifier	ZEND_YIELD		130538	0					
ANR	130698	Argument	value_node_ptr		130538	2					
ANR	130699	Identifier	value_node_ptr		130538	0					
ANR	130700	Argument	key_node_ptr		130538	3					
ANR	130701	Identifier	key_node_ptr		130538	0					
ANR	130702	IfStatement	if ( value_ast && returns_by_ref && zend_is_call ( value_ast ) )		130538	10					
ANR	130703	Condition	value_ast && returns_by_ref && zend_is_call ( value_ast )	6279:5:185160:185213	130538	0	True				
ANR	130704	AndExpression	value_ast && returns_by_ref && zend_is_call ( value_ast )		130538	0		&&			
ANR	130705	Identifier	value_ast		130538	0					
ANR	130706	AndExpression	returns_by_ref && zend_is_call ( value_ast )		130538	1		&&			
ANR	130707	Identifier	returns_by_ref		130538	0					
ANR	130708	CallExpression	zend_is_call ( value_ast )		130538	1					
ANR	130709	Callee	zend_is_call		130538	0					
ANR	130710	Identifier	zend_is_call		130538	0					
ANR	130711	ArgumentList	value_ast		130538	1					
ANR	130712	Argument	value_ast		130538	0					
ANR	130713	Identifier	value_ast		130538	0					
ANR	130714	CompoundStatement		28:61:788:788	130538	1					
ANR	130715	ExpressionStatement	opline -> extended_value = ZEND_RETURNS_FUNCTION	6280:2:185220:185266	130538	0	True				
ANR	130716	AssignmentExpression	opline -> extended_value = ZEND_RETURNS_FUNCTION		130538	0		=			
ANR	130717	PtrMemberAccess	opline -> extended_value		130538	0					
ANR	130718	Identifier	opline		130538	0					
ANR	130719	Identifier	extended_value		130538	1					
ANR	130720	Identifier	ZEND_RETURNS_FUNCTION		130538	1					
ANR	130721	ReturnType	void		130538	1					
ANR	130722	Identifier	zend_compile_yield		130538	2					
ANR	130723	ParameterList	"znode * result , zend_ast * ast"		130538	3					
ANR	130724	Parameter	znode * result	6251:24:184387:184399	130538	0	True				
ANR	130725	ParameterType	znode *		130538	0					
ANR	130726	Identifier	result		130538	1					
ANR	130727	Parameter	zend_ast * ast	6251:39:184402:184414	130538	1	True				
ANR	130728	ParameterType	zend_ast *		130538	0					
ANR	130729	Identifier	ast		130538	1					
ANR	130730	CFGEntryNode	ENTRY		130538		True				
ANR	130731	CFGExitNode	EXIT		130538		True				
ANR	130732	Symbol	ast		130538						
ANR	130733	Symbol	key_ast		130538						
ANR	130734	Symbol	* CG		130538						
ANR	130735	Symbol	& key_node		130538						
ANR	130736	Symbol	opline -> extended_value		130538						
ANR	130737	Symbol	result		130538						
ANR	130738	Symbol	* ast		130538						
ANR	130739	Symbol	value_node_ptr		130538						
ANR	130740	Symbol	opline		130538						
ANR	130741	Symbol	value_ast		130538						
ANR	130742	Symbol	* * ast		130538						
ANR	130743	Symbol	value_node		130538						
ANR	130744	Symbol	returns_by_ref		130538						
ANR	130745	Symbol	key_node_ptr		130538						
ANR	130746	Symbol	BP_VAR_REF		130538						
ANR	130747	Symbol	zend_is_variable		130538						
ANR	130748	Symbol	NULL		130538						
ANR	130749	Symbol	CG		130538						
ANR	130750	Symbol	zend_is_call		130538						
ANR	130751	Symbol	ZEND_YIELD		130538						
ANR	130752	Symbol	active_op_array		130538						
ANR	130753	Symbol	CG ( active_op_array ) -> fn_flags		130538						
ANR	130754	Symbol	ZEND_RETURNS_FUNCTION		130538						
ANR	130755	Symbol	* opline		130538						
ANR	130756	Symbol	& value_node		130538						
ANR	130757	Symbol	ZEND_ACC_RETURN_REFERENCE		130538						
ANR	130758	Symbol	key_node		130538						
ANR	130759	Symbol	* ast -> child		130538						
ANR	130760	Symbol	ast -> child		130538						
ANR	130761	Symbol	zend_emit_op		130538						
ANR	130762	Function	zend_compile_yield_from	6285:0:185284:185552							
ANR	130763	FunctionDef	"zend_compile_yield_from (znode * result , zend_ast * ast)"		130762	0					
ANR	130764	CompoundStatement		6286:0:185353:185552	130762	0					
ANR	130765	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	6287:1:185356:185390	130762	0	True				
ANR	130766	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		130762	0					
ANR	130767	IdentifierDeclType	zend_ast *		130762	0					
ANR	130768	Identifier	expr_ast		130762	1					
ANR	130769	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		130762	2		=			
ANR	130770	Identifier	expr_ast		130762	0					
ANR	130771	ArrayIndexing	ast -> child [ 0 ]		130762	1					
ANR	130772	PtrMemberAccess	ast -> child		130762	0					
ANR	130773	Identifier	ast		130762	0					
ANR	130774	Identifier	child		130762	1					
ANR	130775	PrimaryExpression	0		130762	1					
ANR	130776	IdentifierDeclStatement	znode expr_node ;	6288:1:185393:185408	130762	1	True				
ANR	130777	IdentifierDecl	expr_node		130762	0					
ANR	130778	IdentifierDeclType	znode		130762	0					
ANR	130779	Identifier	expr_node		130762	1					
ANR	130780	ExpressionStatement	zend_mark_function_as_generator ( )	6290:1:185412:185445	130762	2	True				
ANR	130781	CallExpression	zend_mark_function_as_generator ( )		130762	0					
ANR	130782	Callee	zend_mark_function_as_generator		130762	0					
ANR	130783	Identifier	zend_mark_function_as_generator		130762	0					
ANR	130784	ArgumentList			130762	1					
ANR	130785	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	6292:1:185449:185488	130762	3	True				
ANR	130786	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		130762	0					
ANR	130787	Callee	zend_compile_expr		130762	0					
ANR	130788	Identifier	zend_compile_expr		130762	0					
ANR	130789	ArgumentList	& expr_node		130762	1					
ANR	130790	Argument	& expr_node		130762	0					
ANR	130791	UnaryOperationExpression	& expr_node		130762	0					
ANR	130792	UnaryOperator	&		130762	0					
ANR	130793	Identifier	expr_node		130762	1					
ANR	130794	Argument	expr_ast		130762	1					
ANR	130795	Identifier	expr_ast		130762	0					
ANR	130796	ExpressionStatement	"zend_emit_op_tmp ( result , ZEND_YIELD_FROM , & expr_node , NULL )"	6293:1:185491:185550	130762	4	True				
ANR	130797	CallExpression	"zend_emit_op_tmp ( result , ZEND_YIELD_FROM , & expr_node , NULL )"		130762	0					
ANR	130798	Callee	zend_emit_op_tmp		130762	0					
ANR	130799	Identifier	zend_emit_op_tmp		130762	0					
ANR	130800	ArgumentList	result		130762	1					
ANR	130801	Argument	result		130762	0					
ANR	130802	Identifier	result		130762	0					
ANR	130803	Argument	ZEND_YIELD_FROM		130762	1					
ANR	130804	Identifier	ZEND_YIELD_FROM		130762	0					
ANR	130805	Argument	& expr_node		130762	2					
ANR	130806	UnaryOperationExpression	& expr_node		130762	0					
ANR	130807	UnaryOperator	&		130762	0					
ANR	130808	Identifier	expr_node		130762	1					
ANR	130809	Argument	NULL		130762	3					
ANR	130810	Identifier	NULL		130762	0					
ANR	130811	ReturnType	void		130762	1					
ANR	130812	Identifier	zend_compile_yield_from		130762	2					
ANR	130813	ParameterList	"znode * result , zend_ast * ast"		130762	3					
ANR	130814	Parameter	znode * result	6285:29:185313:185325	130762	0	True				
ANR	130815	ParameterType	znode *		130762	0					
ANR	130816	Identifier	result		130762	1					
ANR	130817	Parameter	zend_ast * ast	6285:44:185328:185340	130762	1	True				
ANR	130818	ParameterType	zend_ast *		130762	0					
ANR	130819	Identifier	ast		130762	1					
ANR	130820	CFGEntryNode	ENTRY		130762		True				
ANR	130821	CFGExitNode	EXIT		130762		True				
ANR	130822	Symbol	result		130762						
ANR	130823	Symbol	expr_node		130762						
ANR	130824	Symbol	ast		130762						
ANR	130825	Symbol	* ast		130762						
ANR	130826	Symbol	NULL		130762						
ANR	130827	Symbol	* * ast		130762						
ANR	130828	Symbol	* ast -> child		130762						
ANR	130829	Symbol	ZEND_YIELD_FROM		130762						
ANR	130830	Symbol	expr_ast		130762						
ANR	130831	Symbol	ast -> child		130762						
ANR	130832	Symbol	& expr_node		130762						
ANR	130833	Function	zend_compile_instanceof	6297:0:185565:186535							
ANR	130834	FunctionDef	"zend_compile_instanceof (znode * result , zend_ast * ast)"		130833	0					
ANR	130835	CompoundStatement		6298:0:185634:186535	130833	0					
ANR	130836	IdentifierDeclStatement	zend_ast * obj_ast = ast -> child [ 0 ] ;	6299:1:185637:185670	130833	0	True				
ANR	130837	IdentifierDecl	* obj_ast = ast -> child [ 0 ]		130833	0					
ANR	130838	IdentifierDeclType	zend_ast *		130833	0					
ANR	130839	Identifier	obj_ast		130833	1					
ANR	130840	AssignmentExpression	* obj_ast = ast -> child [ 0 ]		130833	2		=			
ANR	130841	Identifier	obj_ast		130833	0					
ANR	130842	ArrayIndexing	ast -> child [ 0 ]		130833	1					
ANR	130843	PtrMemberAccess	ast -> child		130833	0					
ANR	130844	Identifier	ast		130833	0					
ANR	130845	Identifier	child		130833	1					
ANR	130846	PrimaryExpression	0		130833	1					
ANR	130847	IdentifierDeclStatement	zend_ast * class_ast = ast -> child [ 1 ] ;	6300:1:185673:185708	130833	1	True				
ANR	130848	IdentifierDecl	* class_ast = ast -> child [ 1 ]		130833	0					
ANR	130849	IdentifierDeclType	zend_ast *		130833	0					
ANR	130850	Identifier	class_ast		130833	1					
ANR	130851	AssignmentExpression	* class_ast = ast -> child [ 1 ]		130833	2		=			
ANR	130852	Identifier	class_ast		130833	0					
ANR	130853	ArrayIndexing	ast -> child [ 1 ]		130833	1					
ANR	130854	PtrMemberAccess	ast -> child		130833	0					
ANR	130855	Identifier	ast		130833	0					
ANR	130856	Identifier	child		130833	1					
ANR	130857	PrimaryExpression	1		130833	1					
ANR	130858	IdentifierDeclStatement	"znode obj_node , class_node ;"	6302:1:185712:185738	130833	2	True				
ANR	130859	IdentifierDecl	obj_node		130833	0					
ANR	130860	IdentifierDeclType	znode		130833	0					
ANR	130861	Identifier	obj_node		130833	1					
ANR	130862	IdentifierDecl	class_node		130833	1					
ANR	130863	IdentifierDeclType	znode		130833	0					
ANR	130864	Identifier	class_node		130833	1					
ANR	130865	IdentifierDeclStatement	zend_op * opline ;	6303:1:185741:185756	130833	3	True				
ANR	130866	IdentifierDecl	* opline		130833	0					
ANR	130867	IdentifierDeclType	zend_op *		130833	0					
ANR	130868	Identifier	opline		130833	1					
ANR	130869	ExpressionStatement	"zend_compile_expr ( & obj_node , obj_ast )"	6305:1:185760:185797	130833	4	True				
ANR	130870	CallExpression	"zend_compile_expr ( & obj_node , obj_ast )"		130833	0					
ANR	130871	Callee	zend_compile_expr		130833	0					
ANR	130872	Identifier	zend_compile_expr		130833	0					
ANR	130873	ArgumentList	& obj_node		130833	1					
ANR	130874	Argument	& obj_node		130833	0					
ANR	130875	UnaryOperationExpression	& obj_node		130833	0					
ANR	130876	UnaryOperator	&		130833	0					
ANR	130877	Identifier	obj_node		130833	1					
ANR	130878	Argument	obj_ast		130833	1					
ANR	130879	Identifier	obj_ast		130833	0					
ANR	130880	IfStatement	if ( obj_node . op_type == IS_CONST )		130833	5					
ANR	130881	Condition	obj_node . op_type == IS_CONST	6306:5:185804:185831	130833	0	True				
ANR	130882	EqualityExpression	obj_node . op_type == IS_CONST		130833	0		==			
ANR	130883	MemberAccess	obj_node . op_type		130833	0					
ANR	130884	Identifier	obj_node		130833	0					
ANR	130885	Identifier	op_type		130833	1					
ANR	130886	Identifier	IS_CONST		130833	1					
ANR	130887	CompoundStatement		9:35:199:199	130833	1					
ANR	130888	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""instanceof expects an object instance, constant given"" )"	6307:2:185838:185934	130833	0	True				
ANR	130889	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""instanceof expects an object instance, constant given"" )"		130833	0					
ANR	130890	Callee	zend_error_noreturn		130833	0					
ANR	130891	Identifier	zend_error_noreturn		130833	0					
ANR	130892	ArgumentList	E_COMPILE_ERROR		130833	1					
ANR	130893	Argument	E_COMPILE_ERROR		130833	0					
ANR	130894	Identifier	E_COMPILE_ERROR		130833	0					
ANR	130895	Argument	"""instanceof expects an object instance, constant given"""		130833	1					
ANR	130896	PrimaryExpression	"""instanceof expects an object instance, constant given"""		130833	0					
ANR	130897	IfStatement	if ( zend_is_const_default_class_ref ( class_ast ) )		130833	6					
ANR	130898	Condition	zend_is_const_default_class_ref ( class_ast )	6311:5:185945:185986	130833	0	True				
ANR	130899	CallExpression	zend_is_const_default_class_ref ( class_ast )		130833	0					
ANR	130900	Callee	zend_is_const_default_class_ref		130833	0					
ANR	130901	Identifier	zend_is_const_default_class_ref		130833	0					
ANR	130902	ArgumentList	class_ast		130833	1					
ANR	130903	Argument	class_ast		130833	0					
ANR	130904	Identifier	class_ast		130833	0					
ANR	130905	CompoundStatement		14:49:354:354	130833	1					
ANR	130906	ExpressionStatement	class_node . op_type = IS_CONST	6312:2:185993:186022	130833	0	True				
ANR	130907	AssignmentExpression	class_node . op_type = IS_CONST		130833	0		=			
ANR	130908	MemberAccess	class_node . op_type		130833	0					
ANR	130909	Identifier	class_node		130833	0					
ANR	130910	Identifier	op_type		130833	1					
ANR	130911	Identifier	IS_CONST		130833	1					
ANR	130912	ExpressionStatement	"ZVAL_STR ( & class_node . u . constant , zend_resolve_class_name_ast ( class_ast ) )"	6313:2:186026:186098	130833	1	True				
ANR	130913	CallExpression	"ZVAL_STR ( & class_node . u . constant , zend_resolve_class_name_ast ( class_ast ) )"		130833	0					
ANR	130914	Callee	ZVAL_STR		130833	0					
ANR	130915	Identifier	ZVAL_STR		130833	0					
ANR	130916	ArgumentList	& class_node . u . constant		130833	1					
ANR	130917	Argument	& class_node . u . constant		130833	0					
ANR	130918	UnaryOperationExpression	& class_node . u . constant		130833	0					
ANR	130919	UnaryOperator	&		130833	0					
ANR	130920	MemberAccess	class_node . u . constant		130833	1					
ANR	130921	MemberAccess	class_node . u		130833	0					
ANR	130922	Identifier	class_node		130833	0					
ANR	130923	Identifier	u		130833	1					
ANR	130924	Identifier	constant		130833	1					
ANR	130925	Argument	zend_resolve_class_name_ast ( class_ast )		130833	1					
ANR	130926	CallExpression	zend_resolve_class_name_ast ( class_ast )		130833	0					
ANR	130927	Callee	zend_resolve_class_name_ast		130833	0					
ANR	130928	Identifier	zend_resolve_class_name_ast		130833	0					
ANR	130929	ArgumentList	class_ast		130833	1					
ANR	130930	Argument	class_ast		130833	0					
ANR	130931	Identifier	class_ast		130833	0					
ANR	130932	ElseStatement	else		130833	0					
ANR	130933	CompoundStatement		17:8:473:473	130833	0					
ANR	130934	ExpressionStatement	"opline = zend_compile_class_ref ( & class_node , class_ast , 0 )"	6315:2:186112:186170	130833	0	True				
ANR	130935	AssignmentExpression	"opline = zend_compile_class_ref ( & class_node , class_ast , 0 )"		130833	0		=			
ANR	130936	Identifier	opline		130833	0					
ANR	130937	CallExpression	"zend_compile_class_ref ( & class_node , class_ast , 0 )"		130833	1					
ANR	130938	Callee	zend_compile_class_ref		130833	0					
ANR	130939	Identifier	zend_compile_class_ref		130833	0					
ANR	130940	ArgumentList	& class_node		130833	1					
ANR	130941	Argument	& class_node		130833	0					
ANR	130942	UnaryOperationExpression	& class_node		130833	0					
ANR	130943	UnaryOperator	&		130833	0					
ANR	130944	Identifier	class_node		130833	1					
ANR	130945	Argument	class_ast		130833	1					
ANR	130946	Identifier	class_ast		130833	0					
ANR	130947	Argument	0		130833	2					
ANR	130948	PrimaryExpression	0		130833	0					
ANR	130949	ExpressionStatement	opline -> extended_value |= ZEND_FETCH_CLASS_NO_AUTOLOAD	6316:2:186174:186228	130833	1	True				
ANR	130950	AssignmentExpression	opline -> extended_value |= ZEND_FETCH_CLASS_NO_AUTOLOAD		130833	0		|=			
ANR	130951	PtrMemberAccess	opline -> extended_value		130833	0					
ANR	130952	Identifier	opline		130833	0					
ANR	130953	Identifier	extended_value		130833	1					
ANR	130954	Identifier	ZEND_FETCH_CLASS_NO_AUTOLOAD		130833	1					
ANR	130955	ExpressionStatement	"opline = zend_emit_op_tmp ( result , ZEND_INSTANCEOF , & obj_node , NULL )"	6319:1:186235:186302	130833	7	True				
ANR	130956	AssignmentExpression	"opline = zend_emit_op_tmp ( result , ZEND_INSTANCEOF , & obj_node , NULL )"		130833	0		=			
ANR	130957	Identifier	opline		130833	0					
ANR	130958	CallExpression	"zend_emit_op_tmp ( result , ZEND_INSTANCEOF , & obj_node , NULL )"		130833	1					
ANR	130959	Callee	zend_emit_op_tmp		130833	0					
ANR	130960	Identifier	zend_emit_op_tmp		130833	0					
ANR	130961	ArgumentList	result		130833	1					
ANR	130962	Argument	result		130833	0					
ANR	130963	Identifier	result		130833	0					
ANR	130964	Argument	ZEND_INSTANCEOF		130833	1					
ANR	130965	Identifier	ZEND_INSTANCEOF		130833	0					
ANR	130966	Argument	& obj_node		130833	2					
ANR	130967	UnaryOperationExpression	& obj_node		130833	0					
ANR	130968	UnaryOperator	&		130833	0					
ANR	130969	Identifier	obj_node		130833	1					
ANR	130970	Argument	NULL		130833	3					
ANR	130971	Identifier	NULL		130833	0					
ANR	130972	IfStatement	if ( class_node . op_type == IS_CONST )		130833	8					
ANR	130973	Condition	class_node . op_type == IS_CONST	6321:5:186310:186339	130833	0	True				
ANR	130974	EqualityExpression	class_node . op_type == IS_CONST		130833	0		==			
ANR	130975	MemberAccess	class_node . op_type		130833	0					
ANR	130976	Identifier	class_node		130833	0					
ANR	130977	Identifier	op_type		130833	1					
ANR	130978	Identifier	IS_CONST		130833	1					
ANR	130979	CompoundStatement		24:37:707:707	130833	1					
ANR	130980	ExpressionStatement	opline -> op2_type = IS_CONST	6322:2:186346:186373	130833	0	True				
ANR	130981	AssignmentExpression	opline -> op2_type = IS_CONST		130833	0		=			
ANR	130982	PtrMemberAccess	opline -> op2_type		130833	0					
ANR	130983	Identifier	opline		130833	0					
ANR	130984	Identifier	op2_type		130833	1					
ANR	130985	Identifier	IS_CONST		130833	1					
ANR	130986	ExpressionStatement	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node . u . constant ) )"	6323:2:186377:186482	130833	1	True				
ANR	130987	AssignmentExpression	"opline -> op2 . constant = zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node . u . constant ) )"		130833	0		=			
ANR	130988	MemberAccess	opline -> op2 . constant		130833	0					
ANR	130989	PtrMemberAccess	opline -> op2		130833	0					
ANR	130990	Identifier	opline		130833	0					
ANR	130991	Identifier	op2		130833	1					
ANR	130992	Identifier	constant		130833	1					
ANR	130993	CallExpression	"zend_add_class_name_literal ( CG ( active_op_array ) , Z_STR ( class_node . u . constant ) )"		130833	1					
ANR	130994	Callee	zend_add_class_name_literal		130833	0					
ANR	130995	Identifier	zend_add_class_name_literal		130833	0					
ANR	130996	ArgumentList	CG ( active_op_array )		130833	1					
ANR	130997	Argument	CG ( active_op_array )		130833	0					
ANR	130998	CallExpression	CG ( active_op_array )		130833	0					
ANR	130999	Callee	CG		130833	0					
ANR	131000	Identifier	CG		130833	0					
ANR	131001	ArgumentList	active_op_array		130833	1					
ANR	131002	Argument	active_op_array		130833	0					
ANR	131003	Identifier	active_op_array		130833	0					
ANR	131004	Argument	Z_STR ( class_node . u . constant )		130833	1					
ANR	131005	CallExpression	Z_STR ( class_node . u . constant )		130833	0					
ANR	131006	Callee	Z_STR		130833	0					
ANR	131007	Identifier	Z_STR		130833	0					
ANR	131008	ArgumentList	class_node . u . constant		130833	1					
ANR	131009	Argument	class_node . u . constant		130833	0					
ANR	131010	MemberAccess	class_node . u . constant		130833	0					
ANR	131011	MemberAccess	class_node . u		130833	0					
ANR	131012	Identifier	class_node		130833	0					
ANR	131013	Identifier	u		130833	1					
ANR	131014	Identifier	constant		130833	1					
ANR	131015	ElseStatement	else		130833	0					
ANR	131016	CompoundStatement		28:8:857:857	130833	0					
ANR	131017	ExpressionStatement	"SET_NODE ( opline -> op2 , & class_node )"	6326:2:186496:186530	130833	0	True				
ANR	131018	CallExpression	"SET_NODE ( opline -> op2 , & class_node )"		130833	0					
ANR	131019	Callee	SET_NODE		130833	0					
ANR	131020	Identifier	SET_NODE		130833	0					
ANR	131021	ArgumentList	opline -> op2		130833	1					
ANR	131022	Argument	opline -> op2		130833	0					
ANR	131023	PtrMemberAccess	opline -> op2		130833	0					
ANR	131024	Identifier	opline		130833	0					
ANR	131025	Identifier	op2		130833	1					
ANR	131026	Argument	& class_node		130833	1					
ANR	131027	UnaryOperationExpression	& class_node		130833	0					
ANR	131028	UnaryOperator	&		130833	0					
ANR	131029	Identifier	class_node		130833	1					
ANR	131030	ReturnType	void		130833	1					
ANR	131031	Identifier	zend_compile_instanceof		130833	2					
ANR	131032	ParameterList	"znode * result , zend_ast * ast"		130833	3					
ANR	131033	Parameter	znode * result	6297:29:185594:185606	130833	0	True				
ANR	131034	ParameterType	znode *		130833	0					
ANR	131035	Identifier	result		130833	1					
ANR	131036	Parameter	zend_ast * ast	6297:44:185609:185621	130833	1	True				
ANR	131037	ParameterType	zend_ast *		130833	0					
ANR	131038	Identifier	ast		130833	1					
ANR	131039	CFGEntryNode	ENTRY		130833		True				
ANR	131040	CFGExitNode	EXIT		130833		True				
ANR	131041	Symbol	zend_is_const_default_class_ref		130833						
ANR	131042	Symbol	zend_add_class_name_literal		130833						
ANR	131043	Symbol	zend_emit_op_tmp		130833						
ANR	131044	Symbol	opline -> op2		130833						
ANR	131045	Symbol	ast		130833						
ANR	131046	Symbol	class_node . u . constant		130833						
ANR	131047	Symbol	class_node		130833						
ANR	131048	Symbol	E_COMPILE_ERROR		130833						
ANR	131049	Symbol	& class_node		130833						
ANR	131050	Symbol	obj_node . op_type		130833						
ANR	131051	Symbol	ZEND_FETCH_CLASS_NO_AUTOLOAD		130833						
ANR	131052	Symbol	class_ast		130833						
ANR	131053	Symbol	Z_STR		130833						
ANR	131054	Symbol	& obj_node		130833						
ANR	131055	Symbol	opline -> extended_value		130833						
ANR	131056	Symbol	result		130833						
ANR	131057	Symbol	class_node . op_type		130833						
ANR	131058	Symbol	& class_node . u . constant		130833						
ANR	131059	Symbol	* ast		130833						
ANR	131060	Symbol	opline		130833						
ANR	131061	Symbol	* * ast		130833						
ANR	131062	Symbol	ZEND_INSTANCEOF		130833						
ANR	131063	Symbol	class_node . u		130833						
ANR	131064	Symbol	obj_node		130833						
ANR	131065	Symbol	& class_node . u		130833						
ANR	131066	Symbol	IS_CONST		130833						
ANR	131067	Symbol	NULL		130833						
ANR	131068	Symbol	CG		130833						
ANR	131069	Symbol	zend_resolve_class_name_ast		130833						
ANR	131070	Symbol	active_op_array		130833						
ANR	131071	Symbol	obj_ast		130833						
ANR	131072	Symbol	zend_compile_class_ref		130833						
ANR	131073	Symbol	* opline		130833						
ANR	131074	Symbol	opline -> op2 . constant		130833						
ANR	131075	Symbol	* ast -> child		130833						
ANR	131076	Symbol	opline -> op2_type		130833						
ANR	131077	Symbol	ast -> child		130833						
ANR	131078	Function	zend_compile_include_or_eval	6331:0:186548:186915							
ANR	131079	FunctionDef	"zend_compile_include_or_eval (znode * result , zend_ast * ast)"		131078	0					
ANR	131080	CompoundStatement		6332:0:186622:186915	131078	0					
ANR	131081	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	6333:1:186625:186659	131078	0	True				
ANR	131082	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		131078	0					
ANR	131083	IdentifierDeclType	zend_ast *		131078	0					
ANR	131084	Identifier	expr_ast		131078	1					
ANR	131085	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		131078	2		=			
ANR	131086	Identifier	expr_ast		131078	0					
ANR	131087	ArrayIndexing	ast -> child [ 0 ]		131078	1					
ANR	131088	PtrMemberAccess	ast -> child		131078	0					
ANR	131089	Identifier	ast		131078	0					
ANR	131090	Identifier	child		131078	1					
ANR	131091	PrimaryExpression	0		131078	1					
ANR	131092	IdentifierDeclStatement	znode expr_node ;	6334:1:186662:186677	131078	1	True				
ANR	131093	IdentifierDecl	expr_node		131078	0					
ANR	131094	IdentifierDeclType	znode		131078	0					
ANR	131095	Identifier	expr_node		131078	1					
ANR	131096	IdentifierDeclStatement	zend_op * opline ;	6335:1:186680:186695	131078	2	True				
ANR	131097	IdentifierDecl	* opline		131078	0					
ANR	131098	IdentifierDeclType	zend_op *		131078	0					
ANR	131099	Identifier	opline		131078	1					
ANR	131100	ExpressionStatement	zend_do_extended_fcall_begin ( )	6337:1:186699:186729	131078	3	True				
ANR	131101	CallExpression	zend_do_extended_fcall_begin ( )		131078	0					
ANR	131102	Callee	zend_do_extended_fcall_begin		131078	0					
ANR	131103	Identifier	zend_do_extended_fcall_begin		131078	0					
ANR	131104	ArgumentList			131078	1					
ANR	131105	ExpressionStatement	"zend_compile_expr ( & expr_node , expr_ast )"	6338:1:186732:186771	131078	4	True				
ANR	131106	CallExpression	"zend_compile_expr ( & expr_node , expr_ast )"		131078	0					
ANR	131107	Callee	zend_compile_expr		131078	0					
ANR	131108	Identifier	zend_compile_expr		131078	0					
ANR	131109	ArgumentList	& expr_node		131078	1					
ANR	131110	Argument	& expr_node		131078	0					
ANR	131111	UnaryOperationExpression	& expr_node		131078	0					
ANR	131112	UnaryOperator	&		131078	0					
ANR	131113	Identifier	expr_node		131078	1					
ANR	131114	Argument	expr_ast		131078	1					
ANR	131115	Identifier	expr_ast		131078	0					
ANR	131116	ExpressionStatement	"opline = zend_emit_op ( result , ZEND_INCLUDE_OR_EVAL , & expr_node , NULL )"	6340:1:186775:186844	131078	5	True				
ANR	131117	AssignmentExpression	"opline = zend_emit_op ( result , ZEND_INCLUDE_OR_EVAL , & expr_node , NULL )"		131078	0		=			
ANR	131118	Identifier	opline		131078	0					
ANR	131119	CallExpression	"zend_emit_op ( result , ZEND_INCLUDE_OR_EVAL , & expr_node , NULL )"		131078	1					
ANR	131120	Callee	zend_emit_op		131078	0					
ANR	131121	Identifier	zend_emit_op		131078	0					
ANR	131122	ArgumentList	result		131078	1					
ANR	131123	Argument	result		131078	0					
ANR	131124	Identifier	result		131078	0					
ANR	131125	Argument	ZEND_INCLUDE_OR_EVAL		131078	1					
ANR	131126	Identifier	ZEND_INCLUDE_OR_EVAL		131078	0					
ANR	131127	Argument	& expr_node		131078	2					
ANR	131128	UnaryOperationExpression	& expr_node		131078	0					
ANR	131129	UnaryOperator	&		131078	0					
ANR	131130	Identifier	expr_node		131078	1					
ANR	131131	Argument	NULL		131078	3					
ANR	131132	Identifier	NULL		131078	0					
ANR	131133	ExpressionStatement	opline -> extended_value = ast -> attr	6341:1:186847:186881	131078	6	True				
ANR	131134	AssignmentExpression	opline -> extended_value = ast -> attr		131078	0		=			
ANR	131135	PtrMemberAccess	opline -> extended_value		131078	0					
ANR	131136	Identifier	opline		131078	0					
ANR	131137	Identifier	extended_value		131078	1					
ANR	131138	PtrMemberAccess	ast -> attr		131078	1					
ANR	131139	Identifier	ast		131078	0					
ANR	131140	Identifier	attr		131078	1					
ANR	131141	ExpressionStatement	zend_do_extended_fcall_end ( )	6343:1:186885:186913	131078	7	True				
ANR	131142	CallExpression	zend_do_extended_fcall_end ( )		131078	0					
ANR	131143	Callee	zend_do_extended_fcall_end		131078	0					
ANR	131144	Identifier	zend_do_extended_fcall_end		131078	0					
ANR	131145	ArgumentList			131078	1					
ANR	131146	ReturnType	void		131078	1					
ANR	131147	Identifier	zend_compile_include_or_eval		131078	2					
ANR	131148	ParameterList	"znode * result , zend_ast * ast"		131078	3					
ANR	131149	Parameter	znode * result	6331:34:186582:186594	131078	0	True				
ANR	131150	ParameterType	znode *		131078	0					
ANR	131151	Identifier	result		131078	1					
ANR	131152	Parameter	zend_ast * ast	6331:49:186597:186609	131078	1	True				
ANR	131153	ParameterType	zend_ast *		131078	0					
ANR	131154	Identifier	ast		131078	1					
ANR	131155	CFGEntryNode	ENTRY		131078		True				
ANR	131156	CFGExitNode	EXIT		131078		True				
ANR	131157	Symbol	ast -> attr		131078						
ANR	131158	Symbol	ast		131078						
ANR	131159	Symbol	NULL		131078						
ANR	131160	Symbol	expr_ast		131078						
ANR	131161	Symbol	& expr_node		131078						
ANR	131162	Symbol	opline -> extended_value		131078						
ANR	131163	Symbol	result		131078						
ANR	131164	Symbol	expr_node		131078						
ANR	131165	Symbol	* ast		131078						
ANR	131166	Symbol	opline		131078						
ANR	131167	Symbol	* opline		131078						
ANR	131168	Symbol	* * ast		131078						
ANR	131169	Symbol	* ast -> child		131078						
ANR	131170	Symbol	ZEND_INCLUDE_OR_EVAL		131078						
ANR	131171	Symbol	ast -> child		131078						
ANR	131172	Symbol	zend_emit_op		131078						
ANR	131173	Function	zend_compile_isset_or_empty	6347:0:186928:188626							
ANR	131174	FunctionDef	"zend_compile_isset_or_empty (znode * result , zend_ast * ast)"		131173	0					
ANR	131175	CompoundStatement		6348:0:187001:188626	131173	0					
ANR	131176	IdentifierDeclStatement	zend_ast * var_ast = ast -> child [ 0 ] ;	6349:1:187004:187037	131173	0	True				
ANR	131177	IdentifierDecl	* var_ast = ast -> child [ 0 ]		131173	0					
ANR	131178	IdentifierDeclType	zend_ast *		131173	0					
ANR	131179	Identifier	var_ast		131173	1					
ANR	131180	AssignmentExpression	* var_ast = ast -> child [ 0 ]		131173	2		=			
ANR	131181	Identifier	var_ast		131173	0					
ANR	131182	ArrayIndexing	ast -> child [ 0 ]		131173	1					
ANR	131183	PtrMemberAccess	ast -> child		131173	0					
ANR	131184	Identifier	ast		131173	0					
ANR	131185	Identifier	child		131173	1					
ANR	131186	PrimaryExpression	0		131173	1					
ANR	131187	IdentifierDeclStatement	znode var_node ;	6351:1:187041:187055	131173	1	True				
ANR	131188	IdentifierDecl	var_node		131173	0					
ANR	131189	IdentifierDeclType	znode		131173	0					
ANR	131190	Identifier	var_node		131173	1					
ANR	131191	IdentifierDeclStatement	zend_op * opline = NULL ;	6352:1:187058:187080	131173	2	True				
ANR	131192	IdentifierDecl	* opline = NULL		131173	0					
ANR	131193	IdentifierDeclType	zend_op *		131173	0					
ANR	131194	Identifier	opline		131173	1					
ANR	131195	AssignmentExpression	* opline = NULL		131173	2		=			
ANR	131196	Identifier	NULL		131173	0					
ANR	131197	Identifier	NULL		131173	1					
ANR	131198	ExpressionStatement	ZEND_ASSERT ( ast -> kind == ZEND_AST_ISSET || ast -> kind == ZEND_AST_EMPTY )	6354:1:187084:187155	131173	3	True				
ANR	131199	CallExpression	ZEND_ASSERT ( ast -> kind == ZEND_AST_ISSET || ast -> kind == ZEND_AST_EMPTY )		131173	0					
ANR	131200	Callee	ZEND_ASSERT		131173	0					
ANR	131201	Identifier	ZEND_ASSERT		131173	0					
ANR	131202	ArgumentList	ast -> kind == ZEND_AST_ISSET || ast -> kind == ZEND_AST_EMPTY		131173	1					
ANR	131203	Argument	ast -> kind == ZEND_AST_ISSET || ast -> kind == ZEND_AST_EMPTY		131173	0					
ANR	131204	OrExpression	ast -> kind == ZEND_AST_ISSET || ast -> kind == ZEND_AST_EMPTY		131173	0		||			
ANR	131205	EqualityExpression	ast -> kind == ZEND_AST_ISSET		131173	0		==			
ANR	131206	PtrMemberAccess	ast -> kind		131173	0					
ANR	131207	Identifier	ast		131173	0					
ANR	131208	Identifier	kind		131173	1					
ANR	131209	Identifier	ZEND_AST_ISSET		131173	1					
ANR	131210	EqualityExpression	ast -> kind == ZEND_AST_EMPTY		131173	1		==			
ANR	131211	PtrMemberAccess	ast -> kind		131173	0					
ANR	131212	Identifier	ast		131173	0					
ANR	131213	Identifier	kind		131173	1					
ANR	131214	Identifier	ZEND_AST_EMPTY		131173	1					
ANR	131215	IfStatement	if ( ! zend_is_variable ( var_ast ) || zend_is_call ( var_ast ) )		131173	4					
ANR	131216	Condition	! zend_is_variable ( var_ast ) || zend_is_call ( var_ast )	6356:5:187163:187213	131173	0	True				
ANR	131217	OrExpression	! zend_is_variable ( var_ast ) || zend_is_call ( var_ast )		131173	0		||			
ANR	131218	UnaryOperationExpression	! zend_is_variable ( var_ast )		131173	0					
ANR	131219	UnaryOperator	!		131173	0					
ANR	131220	CallExpression	zend_is_variable ( var_ast )		131173	1					
ANR	131221	Callee	zend_is_variable		131173	0					
ANR	131222	Identifier	zend_is_variable		131173	0					
ANR	131223	ArgumentList	var_ast		131173	1					
ANR	131224	Argument	var_ast		131173	0					
ANR	131225	Identifier	var_ast		131173	0					
ANR	131226	CallExpression	zend_is_call ( var_ast )		131173	1					
ANR	131227	Callee	zend_is_call		131173	0					
ANR	131228	Identifier	zend_is_call		131173	0					
ANR	131229	ArgumentList	var_ast		131173	1					
ANR	131230	Argument	var_ast		131173	0					
ANR	131231	Identifier	var_ast		131173	0					
ANR	131232	CompoundStatement		9:58:214:214	131173	1					
ANR	131233	IfStatement	if ( ast -> kind == ZEND_AST_EMPTY )		131173	0					
ANR	131234	Condition	ast -> kind == ZEND_AST_EMPTY	6357:6:187224:187250	131173	0	True				
ANR	131235	EqualityExpression	ast -> kind == ZEND_AST_EMPTY		131173	0		==			
ANR	131236	PtrMemberAccess	ast -> kind		131173	0					
ANR	131237	Identifier	ast		131173	0					
ANR	131238	Identifier	kind		131173	1					
ANR	131239	Identifier	ZEND_AST_EMPTY		131173	1					
ANR	131240	CompoundStatement		12:3:305:386	131173	1					
ANR	131241	IdentifierDeclStatement	"zend_ast * not_ast = zend_ast_create_ex ( ZEND_AST_UNARY_OP , ZEND_BOOL_NOT , var_ast ) ;"	6359:3:187307:187388	131173	0	True				
ANR	131242	IdentifierDecl	"* not_ast = zend_ast_create_ex ( ZEND_AST_UNARY_OP , ZEND_BOOL_NOT , var_ast )"		131173	0					
ANR	131243	IdentifierDeclType	zend_ast *		131173	0					
ANR	131244	Identifier	not_ast		131173	1					
ANR	131245	AssignmentExpression	"* not_ast = zend_ast_create_ex ( ZEND_AST_UNARY_OP , ZEND_BOOL_NOT , var_ast )"		131173	2		=			
ANR	131246	Identifier	not_ast		131173	0					
ANR	131247	CallExpression	"zend_ast_create_ex ( ZEND_AST_UNARY_OP , ZEND_BOOL_NOT , var_ast )"		131173	1					
ANR	131248	Callee	zend_ast_create_ex		131173	0					
ANR	131249	Identifier	zend_ast_create_ex		131173	0					
ANR	131250	ArgumentList	ZEND_AST_UNARY_OP		131173	1					
ANR	131251	Argument	ZEND_AST_UNARY_OP		131173	0					
ANR	131252	Identifier	ZEND_AST_UNARY_OP		131173	0					
ANR	131253	Argument	ZEND_BOOL_NOT		131173	1					
ANR	131254	Identifier	ZEND_BOOL_NOT		131173	0					
ANR	131255	Argument	var_ast		131173	2					
ANR	131256	Identifier	var_ast		131173	0					
ANR	131257	ExpressionStatement	"zend_compile_expr ( result , not_ast )"	6360:3:187393:187427	131173	1	True				
ANR	131258	CallExpression	"zend_compile_expr ( result , not_ast )"		131173	0					
ANR	131259	Callee	zend_compile_expr		131173	0					
ANR	131260	Identifier	zend_compile_expr		131173	0					
ANR	131261	ArgumentList	result		131173	1					
ANR	131262	Argument	result		131173	0					
ANR	131263	Identifier	result		131173	0					
ANR	131264	Argument	not_ast		131173	1					
ANR	131265	Identifier	not_ast		131173	0					
ANR	131266	ReturnStatement	return ;	6361:3:187432:187438	131173	2	True				
ANR	131267	ElseStatement	else		131173	0					
ANR	131268	CompoundStatement		15:9:447:447	131173	0					
ANR	131269	Statement	zend_error_noreturn	6363:3:187454:187472	131173	0	True				
ANR	131270	Statement	(	6363:22:187473:187473	131173	1	True				
ANR	131271	Statement	E_COMPILE_ERROR	6363:23:187474:187488	131173	2	True				
ANR	131272	Statement	","	6363:38:187489:187489	131173	3	True				
ANR	131273	Statement	"""Cannot use isset() on the result of an expression """	6364:4:187495:187546	131173	4	True				
ANR	131274	Statement	"""(you can use \\""null !== expression\\"" instead)"""	6365:4:187552:187598	131173	5	True				
ANR	131275	Statement	)	6365:51:187599:187599	131173	6	True				
ANR	131276	ExpressionStatement		6365:52:187600:187600	131173	7	True				
ANR	131277	SwitchStatement	switch ( var_ast -> kind )		131173	5					
ANR	131278	Condition	var_ast -> kind	6369:9:187619:187631	131173	0	True				
ANR	131279	PtrMemberAccess	var_ast -> kind		131173	0					
ANR	131280	Identifier	var_ast		131173	0					
ANR	131281	Identifier	kind		131173	1					
ANR	131282	CompoundStatement		22:24:632:632	131173	1					
ANR	131283	Label	case ZEND_AST_VAR :	6370:2:187638:187655	131173	0	True				
ANR	131284	Identifier	ZEND_AST_VAR		131173	0					
ANR	131285	IfStatement	"if ( zend_try_compile_cv ( & var_node , var_ast ) == SUCCESS )"		131173	1					
ANR	131286	Condition	"zend_try_compile_cv ( & var_node , var_ast ) == SUCCESS"	6371:7:187664:187713	131173	0	True				
ANR	131287	EqualityExpression	"zend_try_compile_cv ( & var_node , var_ast ) == SUCCESS"		131173	0		==			
ANR	131288	CallExpression	"zend_try_compile_cv ( & var_node , var_ast )"		131173	0					
ANR	131289	Callee	zend_try_compile_cv		131173	0					
ANR	131290	Identifier	zend_try_compile_cv		131173	0					
ANR	131291	ArgumentList	& var_node		131173	1					
ANR	131292	Argument	& var_node		131173	0					
ANR	131293	UnaryOperationExpression	& var_node		131173	0					
ANR	131294	UnaryOperator	&		131173	0					
ANR	131295	Identifier	var_node		131173	1					
ANR	131296	Argument	var_ast		131173	1					
ANR	131297	Identifier	var_ast		131173	0					
ANR	131298	Identifier	SUCCESS		131173	1					
ANR	131299	CompoundStatement		24:59:714:714	131173	1					
ANR	131300	ExpressionStatement	"opline = zend_emit_op ( result , ZEND_ISSET_ISEMPTY_VAR , & var_node , NULL )"	6372:4:187722:187792	131173	0	True				
ANR	131301	AssignmentExpression	"opline = zend_emit_op ( result , ZEND_ISSET_ISEMPTY_VAR , & var_node , NULL )"		131173	0		=			
ANR	131302	Identifier	opline		131173	0					
ANR	131303	CallExpression	"zend_emit_op ( result , ZEND_ISSET_ISEMPTY_VAR , & var_node , NULL )"		131173	1					
ANR	131304	Callee	zend_emit_op		131173	0					
ANR	131305	Identifier	zend_emit_op		131173	0					
ANR	131306	ArgumentList	result		131173	1					
ANR	131307	Argument	result		131173	0					
ANR	131308	Identifier	result		131173	0					
ANR	131309	Argument	ZEND_ISSET_ISEMPTY_VAR		131173	1					
ANR	131310	Identifier	ZEND_ISSET_ISEMPTY_VAR		131173	0					
ANR	131311	Argument	& var_node		131173	2					
ANR	131312	UnaryOperationExpression	& var_node		131173	0					
ANR	131313	UnaryOperator	&		131173	0					
ANR	131314	Identifier	var_node		131173	1					
ANR	131315	Argument	NULL		131173	3					
ANR	131316	Identifier	NULL		131173	0					
ANR	131317	ExpressionStatement	opline -> extended_value = ZEND_FETCH_LOCAL | ZEND_QUICK_SET	6373:4:187798:187856	131173	1	True				
ANR	131318	AssignmentExpression	opline -> extended_value = ZEND_FETCH_LOCAL | ZEND_QUICK_SET		131173	0		=			
ANR	131319	PtrMemberAccess	opline -> extended_value		131173	0					
ANR	131320	Identifier	opline		131173	0					
ANR	131321	Identifier	extended_value		131173	1					
ANR	131322	InclusiveOrExpression	ZEND_FETCH_LOCAL | ZEND_QUICK_SET		131173	1		|			
ANR	131323	Identifier	ZEND_FETCH_LOCAL		131173	0					
ANR	131324	Identifier	ZEND_QUICK_SET		131173	1					
ANR	131325	ElseStatement	else		131173	0					
ANR	131326	CompoundStatement		27:10:866:866	131173	0					
ANR	131327	ExpressionStatement	"opline = zend_compile_simple_var_no_cv ( result , var_ast , BP_VAR_IS , 0 )"	6375:4:187874:187943	131173	0	True				
ANR	131328	AssignmentExpression	"opline = zend_compile_simple_var_no_cv ( result , var_ast , BP_VAR_IS , 0 )"		131173	0		=			
ANR	131329	Identifier	opline		131173	0					
ANR	131330	CallExpression	"zend_compile_simple_var_no_cv ( result , var_ast , BP_VAR_IS , 0 )"		131173	1					
ANR	131331	Callee	zend_compile_simple_var_no_cv		131173	0					
ANR	131332	Identifier	zend_compile_simple_var_no_cv		131173	0					
ANR	131333	ArgumentList	result		131173	1					
ANR	131334	Argument	result		131173	0					
ANR	131335	Identifier	result		131173	0					
ANR	131336	Argument	var_ast		131173	1					
ANR	131337	Identifier	var_ast		131173	0					
ANR	131338	Argument	BP_VAR_IS		131173	2					
ANR	131339	Identifier	BP_VAR_IS		131173	0					
ANR	131340	Argument	0		131173	3					
ANR	131341	PrimaryExpression	0		131173	0					
ANR	131342	ExpressionStatement	opline -> opcode = ZEND_ISSET_ISEMPTY_VAR	6376:4:187949:187988	131173	1	True				
ANR	131343	AssignmentExpression	opline -> opcode = ZEND_ISSET_ISEMPTY_VAR		131173	0		=			
ANR	131344	PtrMemberAccess	opline -> opcode		131173	0					
ANR	131345	Identifier	opline		131173	0					
ANR	131346	Identifier	opcode		131173	1					
ANR	131347	Identifier	ZEND_ISSET_ISEMPTY_VAR		131173	1					
ANR	131348	BreakStatement	break ;	6378:3:187998:188003	131173	2	True				
ANR	131349	Label	case ZEND_AST_DIM :	6379:2:188007:188024	131173	3	True				
ANR	131350	Identifier	ZEND_AST_DIM		131173	0					
ANR	131351	ExpressionStatement	"opline = zend_compile_dim_common ( result , var_ast , BP_VAR_IS )"	6380:3:188029:188089	131173	4	True				
ANR	131352	AssignmentExpression	"opline = zend_compile_dim_common ( result , var_ast , BP_VAR_IS )"		131173	0		=			
ANR	131353	Identifier	opline		131173	0					
ANR	131354	CallExpression	"zend_compile_dim_common ( result , var_ast , BP_VAR_IS )"		131173	1					
ANR	131355	Callee	zend_compile_dim_common		131173	0					
ANR	131356	Identifier	zend_compile_dim_common		131173	0					
ANR	131357	ArgumentList	result		131173	1					
ANR	131358	Argument	result		131173	0					
ANR	131359	Identifier	result		131173	0					
ANR	131360	Argument	var_ast		131173	1					
ANR	131361	Identifier	var_ast		131173	0					
ANR	131362	Argument	BP_VAR_IS		131173	2					
ANR	131363	Identifier	BP_VAR_IS		131173	0					
ANR	131364	ExpressionStatement	opline -> opcode = ZEND_ISSET_ISEMPTY_DIM_OBJ	6381:3:188094:188137	131173	5	True				
ANR	131365	AssignmentExpression	opline -> opcode = ZEND_ISSET_ISEMPTY_DIM_OBJ		131173	0		=			
ANR	131366	PtrMemberAccess	opline -> opcode		131173	0					
ANR	131367	Identifier	opline		131173	0					
ANR	131368	Identifier	opcode		131173	1					
ANR	131369	Identifier	ZEND_ISSET_ISEMPTY_DIM_OBJ		131173	1					
ANR	131370	BreakStatement	break ;	6382:3:188142:188147	131173	6	True				
ANR	131371	Label	case ZEND_AST_PROP :	6383:2:188151:188169	131173	7	True				
ANR	131372	Identifier	ZEND_AST_PROP		131173	0					
ANR	131373	ExpressionStatement	"opline = zend_compile_prop_common ( result , var_ast , BP_VAR_IS )"	6384:3:188174:188235	131173	8	True				
ANR	131374	AssignmentExpression	"opline = zend_compile_prop_common ( result , var_ast , BP_VAR_IS )"		131173	0		=			
ANR	131375	Identifier	opline		131173	0					
ANR	131376	CallExpression	"zend_compile_prop_common ( result , var_ast , BP_VAR_IS )"		131173	1					
ANR	131377	Callee	zend_compile_prop_common		131173	0					
ANR	131378	Identifier	zend_compile_prop_common		131173	0					
ANR	131379	ArgumentList	result		131173	1					
ANR	131380	Argument	result		131173	0					
ANR	131381	Identifier	result		131173	0					
ANR	131382	Argument	var_ast		131173	1					
ANR	131383	Identifier	var_ast		131173	0					
ANR	131384	Argument	BP_VAR_IS		131173	2					
ANR	131385	Identifier	BP_VAR_IS		131173	0					
ANR	131386	ExpressionStatement	opline -> opcode = ZEND_ISSET_ISEMPTY_PROP_OBJ	6385:3:188240:188284	131173	9	True				
ANR	131387	AssignmentExpression	opline -> opcode = ZEND_ISSET_ISEMPTY_PROP_OBJ		131173	0		=			
ANR	131388	PtrMemberAccess	opline -> opcode		131173	0					
ANR	131389	Identifier	opline		131173	0					
ANR	131390	Identifier	opcode		131173	1					
ANR	131391	Identifier	ZEND_ISSET_ISEMPTY_PROP_OBJ		131173	1					
ANR	131392	BreakStatement	break ;	6386:3:188289:188294	131173	10	True				
ANR	131393	Label	case ZEND_AST_STATIC_PROP :	6387:2:188298:188323	131173	11	True				
ANR	131394	Identifier	ZEND_AST_STATIC_PROP		131173	0					
ANR	131395	ExpressionStatement	"opline = zend_compile_static_prop_common ( result , var_ast , BP_VAR_IS , 0 )"	6388:3:188328:188399	131173	12	True				
ANR	131396	AssignmentExpression	"opline = zend_compile_static_prop_common ( result , var_ast , BP_VAR_IS , 0 )"		131173	0		=			
ANR	131397	Identifier	opline		131173	0					
ANR	131398	CallExpression	"zend_compile_static_prop_common ( result , var_ast , BP_VAR_IS , 0 )"		131173	1					
ANR	131399	Callee	zend_compile_static_prop_common		131173	0					
ANR	131400	Identifier	zend_compile_static_prop_common		131173	0					
ANR	131401	ArgumentList	result		131173	1					
ANR	131402	Argument	result		131173	0					
ANR	131403	Identifier	result		131173	0					
ANR	131404	Argument	var_ast		131173	1					
ANR	131405	Identifier	var_ast		131173	0					
ANR	131406	Argument	BP_VAR_IS		131173	2					
ANR	131407	Identifier	BP_VAR_IS		131173	0					
ANR	131408	Argument	0		131173	3					
ANR	131409	PrimaryExpression	0		131173	0					
ANR	131410	ExpressionStatement	opline -> opcode = ZEND_ISSET_ISEMPTY_VAR	6389:3:188404:188443	131173	13	True				
ANR	131411	AssignmentExpression	opline -> opcode = ZEND_ISSET_ISEMPTY_VAR		131173	0		=			
ANR	131412	PtrMemberAccess	opline -> opcode		131173	0					
ANR	131413	Identifier	opline		131173	0					
ANR	131414	Identifier	opcode		131173	1					
ANR	131415	Identifier	ZEND_ISSET_ISEMPTY_VAR		131173	1					
ANR	131416	BreakStatement	break ;	6390:3:188448:188453	131173	14	True				
ANR	131417	Statement	EMPTY_SWITCH_DEFAULT_CASE	6391:2:188457:188481	131173	15	True				
ANR	131418	Statement	(	6391:27:188482:188482	131173	16	True				
ANR	131419	Statement	)	6391:28:188483:188483	131173	17	True				
ANR	131420	ExpressionStatement	result -> op_type = opline -> result_type = IS_TMP_VAR	6394:1:188490:188540	131173	6	True				
ANR	131421	AssignmentExpression	result -> op_type = opline -> result_type = IS_TMP_VAR		131173	0		=			
ANR	131422	PtrMemberAccess	result -> op_type		131173	0					
ANR	131423	Identifier	result		131173	0					
ANR	131424	Identifier	op_type		131173	1					
ANR	131425	AssignmentExpression	opline -> result_type = IS_TMP_VAR		131173	1		=			
ANR	131426	PtrMemberAccess	opline -> result_type		131173	0					
ANR	131427	Identifier	opline		131173	0					
ANR	131428	Identifier	result_type		131173	1					
ANR	131429	Identifier	IS_TMP_VAR		131173	1					
ANR	131430	ExpressionStatement	opline -> extended_value |= ast -> kind == ZEND_AST_ISSET ? ZEND_ISSET : ZEND_ISEMPTY	6395:1:188543:188624	131173	7	True				
ANR	131431	AssignmentExpression	opline -> extended_value |= ast -> kind == ZEND_AST_ISSET ? ZEND_ISSET : ZEND_ISEMPTY		131173	0		|=			
ANR	131432	PtrMemberAccess	opline -> extended_value		131173	0					
ANR	131433	Identifier	opline		131173	0					
ANR	131434	Identifier	extended_value		131173	1					
ANR	131435	ConditionalExpression	ast -> kind == ZEND_AST_ISSET ? ZEND_ISSET : ZEND_ISEMPTY		131173	1					
ANR	131436	Condition	ast -> kind == ZEND_AST_ISSET		131173	0					
ANR	131437	EqualityExpression	ast -> kind == ZEND_AST_ISSET		131173	0		==			
ANR	131438	PtrMemberAccess	ast -> kind		131173	0					
ANR	131439	Identifier	ast		131173	0					
ANR	131440	Identifier	kind		131173	1					
ANR	131441	Identifier	ZEND_AST_ISSET		131173	1					
ANR	131442	Identifier	ZEND_ISSET		131173	1					
ANR	131443	Identifier	ZEND_ISEMPTY		131173	2					
ANR	131444	ReturnType	void		131173	1					
ANR	131445	Identifier	zend_compile_isset_or_empty		131173	2					
ANR	131446	ParameterList	"znode * result , zend_ast * ast"		131173	3					
ANR	131447	Parameter	znode * result	6347:33:186961:186973	131173	0	True				
ANR	131448	ParameterType	znode *		131173	0					
ANR	131449	Identifier	result		131173	1					
ANR	131450	Parameter	zend_ast * ast	6347:48:186976:186988	131173	1	True				
ANR	131451	ParameterType	zend_ast *		131173	0					
ANR	131452	Identifier	ast		131173	1					
ANR	131453	CFGEntryNode	ENTRY		131173		True				
ANR	131454	CFGExitNode	EXIT		131173		True				
ANR	131455	Symbol	zend_ast_create_ex		131173						
ANR	131456	Symbol	ZEND_AST_UNARY_OP		131173						
ANR	131457	Symbol	ZEND_ISSET_ISEMPTY_DIM_OBJ		131173						
ANR	131458	Symbol	ZEND_AST_ISSET		131173						
ANR	131459	Symbol	ast -> kind		131173						
ANR	131460	Symbol	ast		131173						
ANR	131461	Symbol	ZEND_ISEMPTY		131173						
ANR	131462	Symbol	* var_ast		131173						
ANR	131463	Symbol	result -> op_type		131173						
ANR	131464	Symbol	opline -> extended_value		131173						
ANR	131465	Symbol	zend_compile_simple_var_no_cv		131173						
ANR	131466	Symbol	result		131173						
ANR	131467	Symbol	* ast		131173						
ANR	131468	Symbol	opline		131173						
ANR	131469	Symbol	var_ast -> kind		131173						
ANR	131470	Symbol	* result		131173						
ANR	131471	Symbol	* * ast		131173						
ANR	131472	Symbol	ZEND_AST_EMPTY		131173						
ANR	131473	Symbol	ZEND_ISSET_ISEMPTY_PROP_OBJ		131173						
ANR	131474	Symbol	ZEND_ISSET_ISEMPTY_VAR		131173						
ANR	131475	Symbol	BP_VAR_IS		131173						
ANR	131476	Symbol	IS_TMP_VAR		131173						
ANR	131477	Symbol	opline -> result_type		131173						
ANR	131478	Symbol	zend_is_variable		131173						
ANR	131479	Symbol	NULL		131173						
ANR	131480	Symbol	SUCCESS		131173						
ANR	131481	Symbol	var_node		131173						
ANR	131482	Symbol	zend_is_call		131173						
ANR	131483	Symbol	& var_node		131173						
ANR	131484	Symbol	ZEND_FETCH_LOCAL		131173						
ANR	131485	Symbol	ZEND_QUICK_SET		131173						
ANR	131486	Symbol	zend_compile_dim_common		131173						
ANR	131487	Symbol	zend_try_compile_cv		131173						
ANR	131488	Symbol	not_ast		131173						
ANR	131489	Symbol	zend_compile_prop_common		131173						
ANR	131490	Symbol	zend_compile_static_prop_common		131173						
ANR	131491	Symbol	var_ast		131173						
ANR	131492	Symbol	* opline		131173						
ANR	131493	Symbol	ZEND_ISSET		131173						
ANR	131494	Symbol	opline -> opcode		131173						
ANR	131495	Symbol	ZEND_BOOL_NOT		131173						
ANR	131496	Symbol	* ast -> child		131173						
ANR	131497	Symbol	ast -> child		131173						
ANR	131498	Symbol	zend_emit_op		131173						
ANR	131499	Function	zend_compile_silence	6399:0:188639:189702							
ANR	131500	FunctionDef	"zend_compile_silence (znode * result , zend_ast * ast)"		131499	0					
ANR	131501	CompoundStatement		6400:0:188705:189702	131499	0					
ANR	131502	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	6401:1:188708:188742	131499	0	True				
ANR	131503	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		131499	0					
ANR	131504	IdentifierDeclType	zend_ast *		131499	0					
ANR	131505	Identifier	expr_ast		131499	1					
ANR	131506	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		131499	2		=			
ANR	131507	Identifier	expr_ast		131499	0					
ANR	131508	ArrayIndexing	ast -> child [ 0 ]		131499	1					
ANR	131509	PtrMemberAccess	ast -> child		131499	0					
ANR	131510	Identifier	ast		131499	0					
ANR	131511	Identifier	child		131499	1					
ANR	131512	PrimaryExpression	0		131499	1					
ANR	131513	IdentifierDeclStatement	znode silence_node ;	6402:1:188745:188763	131499	1	True				
ANR	131514	IdentifierDecl	silence_node		131499	0					
ANR	131515	IdentifierDeclType	znode		131499	0					
ANR	131516	Identifier	silence_node		131499	1					
ANR	131517	IdentifierDeclStatement	"uint32_t begin_opline_num , end_opline_num ;"	6403:1:188766:188807	131499	2	True				
ANR	131518	IdentifierDecl	begin_opline_num		131499	0					
ANR	131519	IdentifierDeclType	uint32_t		131499	0					
ANR	131520	Identifier	begin_opline_num		131499	1					
ANR	131521	IdentifierDecl	end_opline_num		131499	1					
ANR	131522	IdentifierDeclType	uint32_t		131499	0					
ANR	131523	Identifier	end_opline_num		131499	1					
ANR	131524	IdentifierDeclStatement	zend_brk_cont_element * brk_cont_element ;	6404:1:188810:188849	131499	3	True				
ANR	131525	IdentifierDecl	* brk_cont_element		131499	0					
ANR	131526	IdentifierDeclType	zend_brk_cont_element *		131499	0					
ANR	131527	Identifier	brk_cont_element		131499	1					
ANR	131528	ExpressionStatement	begin_opline_num = get_next_op_number ( CG ( active_op_array ) )	6406:1:188853:188911	131499	4	True				
ANR	131529	AssignmentExpression	begin_opline_num = get_next_op_number ( CG ( active_op_array ) )		131499	0		=			
ANR	131530	Identifier	begin_opline_num		131499	0					
ANR	131531	CallExpression	get_next_op_number ( CG ( active_op_array ) )		131499	1					
ANR	131532	Callee	get_next_op_number		131499	0					
ANR	131533	Identifier	get_next_op_number		131499	0					
ANR	131534	ArgumentList	CG ( active_op_array )		131499	1					
ANR	131535	Argument	CG ( active_op_array )		131499	0					
ANR	131536	CallExpression	CG ( active_op_array )		131499	0					
ANR	131537	Callee	CG		131499	0					
ANR	131538	Identifier	CG		131499	0					
ANR	131539	ArgumentList	active_op_array		131499	1					
ANR	131540	Argument	active_op_array		131499	0					
ANR	131541	Identifier	active_op_array		131499	0					
ANR	131542	ExpressionStatement	"zend_emit_op_tmp ( & silence_node , ZEND_BEGIN_SILENCE , NULL , NULL )"	6407:1:188914:188977	131499	5	True				
ANR	131543	CallExpression	"zend_emit_op_tmp ( & silence_node , ZEND_BEGIN_SILENCE , NULL , NULL )"		131499	0					
ANR	131544	Callee	zend_emit_op_tmp		131499	0					
ANR	131545	Identifier	zend_emit_op_tmp		131499	0					
ANR	131546	ArgumentList	& silence_node		131499	1					
ANR	131547	Argument	& silence_node		131499	0					
ANR	131548	UnaryOperationExpression	& silence_node		131499	0					
ANR	131549	UnaryOperator	&		131499	0					
ANR	131550	Identifier	silence_node		131499	1					
ANR	131551	Argument	ZEND_BEGIN_SILENCE		131499	1					
ANR	131552	Identifier	ZEND_BEGIN_SILENCE		131499	0					
ANR	131553	Argument	NULL		131499	2					
ANR	131554	Identifier	NULL		131499	0					
ANR	131555	Argument	NULL		131499	3					
ANR	131556	Identifier	NULL		131499	0					
ANR	131557	IfStatement	if ( expr_ast -> kind == ZEND_AST_VAR )		131499	6					
ANR	131558	Condition	expr_ast -> kind == ZEND_AST_VAR	6409:5:188985:189014	131499	0	True				
ANR	131559	EqualityExpression	expr_ast -> kind == ZEND_AST_VAR		131499	0		==			
ANR	131560	PtrMemberAccess	expr_ast -> kind		131499	0					
ANR	131561	Identifier	expr_ast		131499	0					
ANR	131562	Identifier	kind		131499	1					
ANR	131563	Identifier	ZEND_AST_VAR		131499	1					
ANR	131564	CompoundStatement		10:37:311:311	131499	1					
ANR	131565	ExpressionStatement	"zend_compile_simple_var_no_cv ( result , expr_ast , BP_VAR_R , 0 )"	6412:2:189148:189209	131499	0	True				
ANR	131566	CallExpression	"zend_compile_simple_var_no_cv ( result , expr_ast , BP_VAR_R , 0 )"		131499	0					
ANR	131567	Callee	zend_compile_simple_var_no_cv		131499	0					
ANR	131568	Identifier	zend_compile_simple_var_no_cv		131499	0					
ANR	131569	ArgumentList	result		131499	1					
ANR	131570	Argument	result		131499	0					
ANR	131571	Identifier	result		131499	0					
ANR	131572	Argument	expr_ast		131499	1					
ANR	131573	Identifier	expr_ast		131499	0					
ANR	131574	Argument	BP_VAR_R		131499	2					
ANR	131575	Identifier	BP_VAR_R		131499	0					
ANR	131576	Argument	0		131499	3					
ANR	131577	PrimaryExpression	0		131499	0					
ANR	131578	ElseStatement	else		131499	0					
ANR	131579	CompoundStatement		14:8:513:513	131499	0					
ANR	131580	ExpressionStatement	"zend_compile_expr ( result , expr_ast )"	6414:2:189223:189258	131499	0	True				
ANR	131581	CallExpression	"zend_compile_expr ( result , expr_ast )"		131499	0					
ANR	131582	Callee	zend_compile_expr		131499	0					
ANR	131583	Identifier	zend_compile_expr		131499	0					
ANR	131584	ArgumentList	result		131499	1					
ANR	131585	Argument	result		131499	0					
ANR	131586	Identifier	result		131499	0					
ANR	131587	Argument	expr_ast		131499	1					
ANR	131588	Identifier	expr_ast		131499	0					
ANR	131589	ExpressionStatement	end_opline_num = get_next_op_number ( CG ( active_op_array ) )	6417:1:189265:189321	131499	7	True				
ANR	131590	AssignmentExpression	end_opline_num = get_next_op_number ( CG ( active_op_array ) )		131499	0		=			
ANR	131591	Identifier	end_opline_num		131499	0					
ANR	131592	CallExpression	get_next_op_number ( CG ( active_op_array ) )		131499	1					
ANR	131593	Callee	get_next_op_number		131499	0					
ANR	131594	Identifier	get_next_op_number		131499	0					
ANR	131595	ArgumentList	CG ( active_op_array )		131499	1					
ANR	131596	Argument	CG ( active_op_array )		131499	0					
ANR	131597	CallExpression	CG ( active_op_array )		131499	0					
ANR	131598	Callee	CG		131499	0					
ANR	131599	Identifier	CG		131499	0					
ANR	131600	ArgumentList	active_op_array		131499	1					
ANR	131601	Argument	active_op_array		131499	0					
ANR	131602	Identifier	active_op_array		131499	0					
ANR	131603	ExpressionStatement	"zend_emit_op ( NULL , ZEND_END_SILENCE , & silence_node , NULL )"	6418:1:189324:189381	131499	8	True				
ANR	131604	CallExpression	"zend_emit_op ( NULL , ZEND_END_SILENCE , & silence_node , NULL )"		131499	0					
ANR	131605	Callee	zend_emit_op		131499	0					
ANR	131606	Identifier	zend_emit_op		131499	0					
ANR	131607	ArgumentList	NULL		131499	1					
ANR	131608	Argument	NULL		131499	0					
ANR	131609	Identifier	NULL		131499	0					
ANR	131610	Argument	ZEND_END_SILENCE		131499	1					
ANR	131611	Identifier	ZEND_END_SILENCE		131499	0					
ANR	131612	Argument	& silence_node		131499	2					
ANR	131613	UnaryOperationExpression	& silence_node		131499	0					
ANR	131614	UnaryOperator	&		131499	0					
ANR	131615	Identifier	silence_node		131499	1					
ANR	131616	Argument	NULL		131499	3					
ANR	131617	Identifier	NULL		131499	0					
ANR	131618	ExpressionStatement	brk_cont_element = get_next_brk_cont_element ( CG ( active_op_array ) )	6422:1:189492:189557	131499	9	True				
ANR	131619	AssignmentExpression	brk_cont_element = get_next_brk_cont_element ( CG ( active_op_array ) )		131499	0		=			
ANR	131620	Identifier	brk_cont_element		131499	0					
ANR	131621	CallExpression	get_next_brk_cont_element ( CG ( active_op_array ) )		131499	1					
ANR	131622	Callee	get_next_brk_cont_element		131499	0					
ANR	131623	Identifier	get_next_brk_cont_element		131499	0					
ANR	131624	ArgumentList	CG ( active_op_array )		131499	1					
ANR	131625	Argument	CG ( active_op_array )		131499	0					
ANR	131626	CallExpression	CG ( active_op_array )		131499	0					
ANR	131627	Callee	CG		131499	0					
ANR	131628	Identifier	CG		131499	0					
ANR	131629	ArgumentList	active_op_array		131499	1					
ANR	131630	Argument	active_op_array		131499	0					
ANR	131631	Identifier	active_op_array		131499	0					
ANR	131632	ExpressionStatement	brk_cont_element -> start = begin_opline_num	6423:1:189560:189602	131499	10	True				
ANR	131633	AssignmentExpression	brk_cont_element -> start = begin_opline_num		131499	0		=			
ANR	131634	PtrMemberAccess	brk_cont_element -> start		131499	0					
ANR	131635	Identifier	brk_cont_element		131499	0					
ANR	131636	Identifier	start		131499	1					
ANR	131637	Identifier	begin_opline_num		131499	1					
ANR	131638	ExpressionStatement	brk_cont_element -> cont = brk_cont_element -> brk = end_opline_num	6424:1:189605:189668	131499	11	True				
ANR	131639	AssignmentExpression	brk_cont_element -> cont = brk_cont_element -> brk = end_opline_num		131499	0		=			
ANR	131640	PtrMemberAccess	brk_cont_element -> cont		131499	0					
ANR	131641	Identifier	brk_cont_element		131499	0					
ANR	131642	Identifier	cont		131499	1					
ANR	131643	AssignmentExpression	brk_cont_element -> brk = end_opline_num		131499	1		=			
ANR	131644	PtrMemberAccess	brk_cont_element -> brk		131499	0					
ANR	131645	Identifier	brk_cont_element		131499	0					
ANR	131646	Identifier	brk		131499	1					
ANR	131647	Identifier	end_opline_num		131499	1					
ANR	131648	ExpressionStatement	brk_cont_element -> parent = - 1	6425:1:189671:189700	131499	12	True				
ANR	131649	AssignmentExpression	brk_cont_element -> parent = - 1		131499	0		=			
ANR	131650	PtrMemberAccess	brk_cont_element -> parent		131499	0					
ANR	131651	Identifier	brk_cont_element		131499	0					
ANR	131652	Identifier	parent		131499	1					
ANR	131653	UnaryOperationExpression	- 1		131499	1					
ANR	131654	UnaryOperator	-		131499	0					
ANR	131655	PrimaryExpression	1		131499	1					
ANR	131656	ReturnType	void		131499	1					
ANR	131657	Identifier	zend_compile_silence		131499	2					
ANR	131658	ParameterList	"znode * result , zend_ast * ast"		131499	3					
ANR	131659	Parameter	znode * result	6399:26:188665:188677	131499	0	True				
ANR	131660	ParameterType	znode *		131499	0					
ANR	131661	Identifier	result		131499	1					
ANR	131662	Parameter	zend_ast * ast	6399:41:188680:188692	131499	1	True				
ANR	131663	ParameterType	zend_ast *		131499	0					
ANR	131664	Identifier	ast		131499	1					
ANR	131665	CFGEntryNode	ENTRY		131499		True				
ANR	131666	CFGExitNode	EXIT		131499		True				
ANR	131667	Symbol	expr_ast -> kind		131499						
ANR	131668	Symbol	* expr_ast		131499						
ANR	131669	Symbol	brk_cont_element -> cont		131499						
ANR	131670	Symbol	ast		131499						
ANR	131671	Symbol	silence_node		131499						
ANR	131672	Symbol	begin_opline_num		131499						
ANR	131673	Symbol	get_next_brk_cont_element		131499						
ANR	131674	Symbol	result		131499						
ANR	131675	Symbol	* ast		131499						
ANR	131676	Symbol	ZEND_AST_VAR		131499						
ANR	131677	Symbol	* * ast		131499						
ANR	131678	Symbol	BP_VAR_R		131499						
ANR	131679	Symbol	ZEND_END_SILENCE		131499						
ANR	131680	Symbol	* brk_cont_element		131499						
ANR	131681	Symbol	NULL		131499						
ANR	131682	Symbol	CG		131499						
ANR	131683	Symbol	active_op_array		131499						
ANR	131684	Symbol	expr_ast		131499						
ANR	131685	Symbol	brk_cont_element		131499						
ANR	131686	Symbol	brk_cont_element -> start		131499						
ANR	131687	Symbol	& silence_node		131499						
ANR	131688	Symbol	end_opline_num		131499						
ANR	131689	Symbol	brk_cont_element -> parent		131499						
ANR	131690	Symbol	brk_cont_element -> brk		131499						
ANR	131691	Symbol	* ast -> child		131499						
ANR	131692	Symbol	ast -> child		131499						
ANR	131693	Symbol	get_next_op_number		131499						
ANR	131694	Symbol	ZEND_BEGIN_SILENCE		131499						
ANR	131695	Function	zend_compile_shell_exec	6429:0:189715:190161							
ANR	131696	FunctionDef	"zend_compile_shell_exec (znode * result , zend_ast * ast)"		131695	0					
ANR	131697	CompoundStatement		6430:0:189784:190161	131695	0					
ANR	131698	IdentifierDeclStatement	zend_ast * expr_ast = ast -> child [ 0 ] ;	6431:1:189787:189821	131695	0	True				
ANR	131699	IdentifierDecl	* expr_ast = ast -> child [ 0 ]		131695	0					
ANR	131700	IdentifierDeclType	zend_ast *		131695	0					
ANR	131701	Identifier	expr_ast		131695	1					
ANR	131702	AssignmentExpression	* expr_ast = ast -> child [ 0 ]		131695	2		=			
ANR	131703	Identifier	expr_ast		131695	0					
ANR	131704	ArrayIndexing	ast -> child [ 0 ]		131695	1					
ANR	131705	PtrMemberAccess	ast -> child		131695	0					
ANR	131706	Identifier	ast		131695	0					
ANR	131707	Identifier	child		131695	1					
ANR	131708	PrimaryExpression	0		131695	1					
ANR	131709	IdentifierDeclStatement	zval fn_name ;	6433:1:189825:189837	131695	1	True				
ANR	131710	IdentifierDecl	fn_name		131695	0					
ANR	131711	IdentifierDeclType	zval		131695	0					
ANR	131712	Identifier	fn_name		131695	1					
ANR	131713	IdentifierDeclStatement	"zend_ast * name_ast , * args_ast , * call_ast ;"	6434:1:189840:189880	131695	2	True				
ANR	131714	IdentifierDecl	* name_ast		131695	0					
ANR	131715	IdentifierDeclType	zend_ast *		131695	0					
ANR	131716	Identifier	name_ast		131695	1					
ANR	131717	IdentifierDecl	* args_ast		131695	1					
ANR	131718	IdentifierDeclType	zend_ast *		131695	0					
ANR	131719	Identifier	args_ast		131695	1					
ANR	131720	IdentifierDecl	* call_ast		131695	2					
ANR	131721	IdentifierDeclType	zend_ast *		131695	0					
ANR	131722	Identifier	call_ast		131695	1					
ANR	131723	ExpressionStatement	"ZVAL_STRING ( & fn_name , ""shell_exec"" )"	6436:1:189884:189919	131695	3	True				
ANR	131724	CallExpression	"ZVAL_STRING ( & fn_name , ""shell_exec"" )"		131695	0					
ANR	131725	Callee	ZVAL_STRING		131695	0					
ANR	131726	Identifier	ZVAL_STRING		131695	0					
ANR	131727	ArgumentList	& fn_name		131695	1					
ANR	131728	Argument	& fn_name		131695	0					
ANR	131729	UnaryOperationExpression	& fn_name		131695	0					
ANR	131730	UnaryOperator	&		131695	0					
ANR	131731	Identifier	fn_name		131695	1					
ANR	131732	Argument	"""shell_exec"""		131695	1					
ANR	131733	PrimaryExpression	"""shell_exec"""		131695	0					
ANR	131734	ExpressionStatement	name_ast = zend_ast_create_zval ( & fn_name )	6437:1:189922:189963	131695	4	True				
ANR	131735	AssignmentExpression	name_ast = zend_ast_create_zval ( & fn_name )		131695	0		=			
ANR	131736	Identifier	name_ast		131695	0					
ANR	131737	CallExpression	zend_ast_create_zval ( & fn_name )		131695	1					
ANR	131738	Callee	zend_ast_create_zval		131695	0					
ANR	131739	Identifier	zend_ast_create_zval		131695	0					
ANR	131740	ArgumentList	& fn_name		131695	1					
ANR	131741	Argument	& fn_name		131695	0					
ANR	131742	UnaryOperationExpression	& fn_name		131695	0					
ANR	131743	UnaryOperator	&		131695	0					
ANR	131744	Identifier	fn_name		131695	1					
ANR	131745	ExpressionStatement	"args_ast = zend_ast_create_list ( 1 , ZEND_AST_ARG_LIST , expr_ast )"	6438:1:189966:190029	131695	5	True				
ANR	131746	AssignmentExpression	"args_ast = zend_ast_create_list ( 1 , ZEND_AST_ARG_LIST , expr_ast )"		131695	0		=			
ANR	131747	Identifier	args_ast		131695	0					
ANR	131748	CallExpression	"zend_ast_create_list ( 1 , ZEND_AST_ARG_LIST , expr_ast )"		131695	1					
ANR	131749	Callee	zend_ast_create_list		131695	0					
ANR	131750	Identifier	zend_ast_create_list		131695	0					
ANR	131751	ArgumentList	1		131695	1					
ANR	131752	Argument	1		131695	0					
ANR	131753	PrimaryExpression	1		131695	0					
ANR	131754	Argument	ZEND_AST_ARG_LIST		131695	1					
ANR	131755	Identifier	ZEND_AST_ARG_LIST		131695	0					
ANR	131756	Argument	expr_ast		131695	2					
ANR	131757	Identifier	expr_ast		131695	0					
ANR	131758	ExpressionStatement	"call_ast = zend_ast_create ( ZEND_AST_CALL , name_ast , args_ast )"	6439:1:190032:190093	131695	6	True				
ANR	131759	AssignmentExpression	"call_ast = zend_ast_create ( ZEND_AST_CALL , name_ast , args_ast )"		131695	0		=			
ANR	131760	Identifier	call_ast		131695	0					
ANR	131761	CallExpression	"zend_ast_create ( ZEND_AST_CALL , name_ast , args_ast )"		131695	1					
ANR	131762	Callee	zend_ast_create		131695	0					
ANR	131763	Identifier	zend_ast_create		131695	0					
ANR	131764	ArgumentList	ZEND_AST_CALL		131695	1					
ANR	131765	Argument	ZEND_AST_CALL		131695	0					
ANR	131766	Identifier	ZEND_AST_CALL		131695	0					
ANR	131767	Argument	name_ast		131695	1					
ANR	131768	Identifier	name_ast		131695	0					
ANR	131769	Argument	args_ast		131695	2					
ANR	131770	Identifier	args_ast		131695	0					
ANR	131771	ExpressionStatement	"zend_compile_expr ( result , call_ast )"	6441:1:190097:190132	131695	7	True				
ANR	131772	CallExpression	"zend_compile_expr ( result , call_ast )"		131695	0					
ANR	131773	Callee	zend_compile_expr		131695	0					
ANR	131774	Identifier	zend_compile_expr		131695	0					
ANR	131775	ArgumentList	result		131695	1					
ANR	131776	Argument	result		131695	0					
ANR	131777	Identifier	result		131695	0					
ANR	131778	Argument	call_ast		131695	1					
ANR	131779	Identifier	call_ast		131695	0					
ANR	131780	ExpressionStatement	zval_ptr_dtor ( & fn_name )	6443:1:190136:190159	131695	8	True				
ANR	131781	CallExpression	zval_ptr_dtor ( & fn_name )		131695	0					
ANR	131782	Callee	zval_ptr_dtor		131695	0					
ANR	131783	Identifier	zval_ptr_dtor		131695	0					
ANR	131784	ArgumentList	& fn_name		131695	1					
ANR	131785	Argument	& fn_name		131695	0					
ANR	131786	UnaryOperationExpression	& fn_name		131695	0					
ANR	131787	UnaryOperator	&		131695	0					
ANR	131788	Identifier	fn_name		131695	1					
ANR	131789	ReturnType	void		131695	1					
ANR	131790	Identifier	zend_compile_shell_exec		131695	2					
ANR	131791	ParameterList	"znode * result , zend_ast * ast"		131695	3					
ANR	131792	Parameter	znode * result	6429:29:189744:189756	131695	0	True				
ANR	131793	ParameterType	znode *		131695	0					
ANR	131794	Identifier	result		131695	1					
ANR	131795	Parameter	zend_ast * ast	6429:44:189759:189771	131695	1	True				
ANR	131796	ParameterType	zend_ast *		131695	0					
ANR	131797	Identifier	ast		131695	1					
ANR	131798	CFGEntryNode	ENTRY		131695		True				
ANR	131799	CFGExitNode	EXIT		131695		True				
ANR	131800	Symbol	ast		131695						
ANR	131801	Symbol	zend_ast_create_list		131695						
ANR	131802	Symbol	& fn_name		131695						
ANR	131803	Symbol	zend_ast_create_zval		131695						
ANR	131804	Symbol	zend_ast_create		131695						
ANR	131805	Symbol	expr_ast		131695						
ANR	131806	Symbol	result		131695						
ANR	131807	Symbol	* ast		131695						
ANR	131808	Symbol	ZEND_AST_CALL		131695						
ANR	131809	Symbol	* * ast		131695						
ANR	131810	Symbol	name_ast		131695						
ANR	131811	Symbol	* ast -> child		131695						
ANR	131812	Symbol	call_ast		131695						
ANR	131813	Symbol	ast -> child		131695						
ANR	131814	Symbol	fn_name		131695						
ANR	131815	Symbol	args_ast		131695						
ANR	131816	Symbol	ZEND_AST_ARG_LIST		131695						
ANR	131817	Function	zend_compile_array	6447:0:190174:191880							
ANR	131818	FunctionDef	"zend_compile_array (znode * result , zend_ast * ast)"		131817	0					
ANR	131819	CompoundStatement		6448:0:190238:191880	131817	0					
ANR	131820	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	6449:1:190241:190285	131817	0	True				
ANR	131821	IdentifierDecl	* list = zend_ast_get_list ( ast )		131817	0					
ANR	131822	IdentifierDeclType	zend_ast_list *		131817	0					
ANR	131823	Identifier	list		131817	1					
ANR	131824	AssignmentExpression	* list = zend_ast_get_list ( ast )		131817	2		=			
ANR	131825	Identifier	list		131817	0					
ANR	131826	CallExpression	zend_ast_get_list ( ast )		131817	1					
ANR	131827	Callee	zend_ast_get_list		131817	0					
ANR	131828	Identifier	zend_ast_get_list		131817	0					
ANR	131829	ArgumentList	ast		131817	1					
ANR	131830	Argument	ast		131817	0					
ANR	131831	Identifier	ast		131817	0					
ANR	131832	IdentifierDeclStatement	zend_op * opline ;	6450:1:190288:190303	131817	1	True				
ANR	131833	IdentifierDecl	* opline		131817	0					
ANR	131834	IdentifierDeclType	zend_op *		131817	0					
ANR	131835	Identifier	opline		131817	1					
ANR	131836	IdentifierDeclStatement	"uint32_t i , opnum_init = - 1 ;"	6451:1:190306:190333	131817	2	True				
ANR	131837	IdentifierDecl	i		131817	0					
ANR	131838	IdentifierDeclType	uint32_t		131817	0					
ANR	131839	Identifier	i		131817	1					
ANR	131840	IdentifierDecl	opnum_init = - 1		131817	1					
ANR	131841	IdentifierDeclType	uint32_t		131817	0					
ANR	131842	Identifier	opnum_init		131817	1					
ANR	131843	AssignmentExpression	opnum_init = - 1		131817	2		=			
ANR	131844	Identifier	opnum_init		131817	0					
ANR	131845	UnaryOperationExpression	- 1		131817	1					
ANR	131846	UnaryOperator	-		131817	0					
ANR	131847	PrimaryExpression	1		131817	1					
ANR	131848	IdentifierDeclStatement	zend_bool packed = 1 ;	6452:1:190336:190356	131817	3	True				
ANR	131849	IdentifierDecl	packed = 1		131817	0					
ANR	131850	IdentifierDeclType	zend_bool		131817	0					
ANR	131851	Identifier	packed		131817	1					
ANR	131852	AssignmentExpression	packed = 1		131817	2		=			
ANR	131853	Identifier	packed		131817	0					
ANR	131854	PrimaryExpression	1		131817	1					
ANR	131855	IfStatement	"if ( zend_try_ct_eval_array ( & result -> u . constant , ast ) )"		131817	4					
ANR	131856	Condition	"zend_try_ct_eval_array ( & result -> u . constant , ast )"	6454:5:190364:190411	131817	0	True				
ANR	131857	CallExpression	"zend_try_ct_eval_array ( & result -> u . constant , ast )"		131817	0					
ANR	131858	Callee	zend_try_ct_eval_array		131817	0					
ANR	131859	Identifier	zend_try_ct_eval_array		131817	0					
ANR	131860	ArgumentList	& result -> u . constant		131817	1					
ANR	131861	Argument	& result -> u . constant		131817	0					
ANR	131862	UnaryOperationExpression	& result -> u . constant		131817	0					
ANR	131863	UnaryOperator	&		131817	0					
ANR	131864	MemberAccess	result -> u . constant		131817	1					
ANR	131865	PtrMemberAccess	result -> u		131817	0					
ANR	131866	Identifier	result		131817	0					
ANR	131867	Identifier	u		131817	1					
ANR	131868	Identifier	constant		131817	1					
ANR	131869	Argument	ast		131817	1					
ANR	131870	Identifier	ast		131817	0					
ANR	131871	CompoundStatement		7:55:175:175	131817	1					
ANR	131872	ExpressionStatement	result -> op_type = IS_CONST	6455:2:190418:190444	131817	0	True				
ANR	131873	AssignmentExpression	result -> op_type = IS_CONST		131817	0		=			
ANR	131874	PtrMemberAccess	result -> op_type		131817	0					
ANR	131875	Identifier	result		131817	0					
ANR	131876	Identifier	op_type		131817	1					
ANR	131877	Identifier	IS_CONST		131817	1					
ANR	131878	ReturnStatement	return ;	6456:2:190448:190454	131817	1	True				
ANR	131879	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		131817	5					
ANR	131880	ForInit	i = 0 ;	6459:6:190466:190471	131817	0	True				
ANR	131881	AssignmentExpression	i = 0		131817	0		=			
ANR	131882	Identifier	i		131817	0					
ANR	131883	PrimaryExpression	0		131817	1					
ANR	131884	Condition	i < list -> children	6459:13:190473:190490	131817	1	True				
ANR	131885	RelationalExpression	i < list -> children		131817	0		<			
ANR	131886	Identifier	i		131817	0					
ANR	131887	PtrMemberAccess	list -> children		131817	1					
ANR	131888	Identifier	list		131817	0					
ANR	131889	Identifier	children		131817	1					
ANR	131890	UnaryExpression	++ i	6459:33:190493:190495	131817	2	True				
ANR	131891	IncDec	++		131817	0					
ANR	131892	Identifier	i		131817	1					
ANR	131893	CompoundStatement		18:2:426:474	131817	3					
ANR	131894	IdentifierDeclStatement	zend_ast * elem_ast = list -> child [ i ] ;	6460:2:190502:190537	131817	0	True				
ANR	131895	IdentifierDecl	* elem_ast = list -> child [ i ]		131817	0					
ANR	131896	IdentifierDeclType	zend_ast *		131817	0					
ANR	131897	Identifier	elem_ast		131817	1					
ANR	131898	AssignmentExpression	* elem_ast = list -> child [ i ]		131817	2		=			
ANR	131899	Identifier	elem_ast		131817	0					
ANR	131900	ArrayIndexing	list -> child [ i ]		131817	1					
ANR	131901	PtrMemberAccess	list -> child		131817	0					
ANR	131902	Identifier	list		131817	0					
ANR	131903	Identifier	child		131817	1					
ANR	131904	Identifier	i		131817	1					
ANR	131905	IdentifierDeclStatement	zend_ast * value_ast = elem_ast -> child [ 0 ] ;	6461:2:190541:190581	131817	1	True				
ANR	131906	IdentifierDecl	* value_ast = elem_ast -> child [ 0 ]		131817	0					
ANR	131907	IdentifierDeclType	zend_ast *		131817	0					
ANR	131908	Identifier	value_ast		131817	1					
ANR	131909	AssignmentExpression	* value_ast = elem_ast -> child [ 0 ]		131817	2		=			
ANR	131910	Identifier	value_ast		131817	0					
ANR	131911	ArrayIndexing	elem_ast -> child [ 0 ]		131817	1					
ANR	131912	PtrMemberAccess	elem_ast -> child		131817	0					
ANR	131913	Identifier	elem_ast		131817	0					
ANR	131914	Identifier	child		131817	1					
ANR	131915	PrimaryExpression	0		131817	1					
ANR	131916	IdentifierDeclStatement	zend_ast * key_ast = elem_ast -> child [ 1 ] ;	6462:2:190585:190623	131817	2	True				
ANR	131917	IdentifierDecl	* key_ast = elem_ast -> child [ 1 ]		131817	0					
ANR	131918	IdentifierDeclType	zend_ast *		131817	0					
ANR	131919	Identifier	key_ast		131817	1					
ANR	131920	AssignmentExpression	* key_ast = elem_ast -> child [ 1 ]		131817	2		=			
ANR	131921	Identifier	key_ast		131817	0					
ANR	131922	ArrayIndexing	elem_ast -> child [ 1 ]		131817	1					
ANR	131923	PtrMemberAccess	elem_ast -> child		131817	0					
ANR	131924	Identifier	elem_ast		131817	0					
ANR	131925	Identifier	child		131817	1					
ANR	131926	PrimaryExpression	1		131817	1					
ANR	131927	IdentifierDeclStatement	zend_bool by_ref = elem_ast -> attr ;	6463:2:190627:190660	131817	3	True				
ANR	131928	IdentifierDecl	by_ref = elem_ast -> attr		131817	0					
ANR	131929	IdentifierDeclType	zend_bool		131817	0					
ANR	131930	Identifier	by_ref		131817	1					
ANR	131931	AssignmentExpression	by_ref = elem_ast -> attr		131817	2		=			
ANR	131932	Identifier	by_ref		131817	0					
ANR	131933	PtrMemberAccess	elem_ast -> attr		131817	1					
ANR	131934	Identifier	elem_ast		131817	0					
ANR	131935	Identifier	attr		131817	1					
ANR	131936	IdentifierDeclStatement	"znode value_node , key_node , * key_node_ptr = NULL ;"	6465:2:190665:190713	131817	4	True				
ANR	131937	IdentifierDecl	value_node		131817	0					
ANR	131938	IdentifierDeclType	znode		131817	0					
ANR	131939	Identifier	value_node		131817	1					
ANR	131940	IdentifierDecl	key_node		131817	1					
ANR	131941	IdentifierDeclType	znode		131817	0					
ANR	131942	Identifier	key_node		131817	1					
ANR	131943	IdentifierDecl	* key_node_ptr = NULL		131817	2					
ANR	131944	IdentifierDeclType	znode *		131817	0					
ANR	131945	Identifier	key_node_ptr		131817	1					
ANR	131946	AssignmentExpression	* key_node_ptr = NULL		131817	2		=			
ANR	131947	Identifier	NULL		131817	0					
ANR	131948	Identifier	NULL		131817	1					
ANR	131949	IfStatement	if ( key_ast )		131817	5					
ANR	131950	Condition	key_ast	6467:6:190722:190728	131817	0	True				
ANR	131951	Identifier	key_ast		131817	0					
ANR	131952	CompoundStatement		20:15:492:492	131817	1					
ANR	131953	ExpressionStatement	"zend_compile_expr ( & key_node , key_ast )"	6468:3:190736:190773	131817	0	True				
ANR	131954	CallExpression	"zend_compile_expr ( & key_node , key_ast )"		131817	0					
ANR	131955	Callee	zend_compile_expr		131817	0					
ANR	131956	Identifier	zend_compile_expr		131817	0					
ANR	131957	ArgumentList	& key_node		131817	1					
ANR	131958	Argument	& key_node		131817	0					
ANR	131959	UnaryOperationExpression	& key_node		131817	0					
ANR	131960	UnaryOperator	&		131817	0					
ANR	131961	Identifier	key_node		131817	1					
ANR	131962	Argument	key_ast		131817	1					
ANR	131963	Identifier	key_ast		131817	0					
ANR	131964	ExpressionStatement	zend_handle_numeric_op ( & key_node )	6469:3:190778:190811	131817	1	True				
ANR	131965	CallExpression	zend_handle_numeric_op ( & key_node )		131817	0					
ANR	131966	Callee	zend_handle_numeric_op		131817	0					
ANR	131967	Identifier	zend_handle_numeric_op		131817	0					
ANR	131968	ArgumentList	& key_node		131817	1					
ANR	131969	Argument	& key_node		131817	0					
ANR	131970	UnaryOperationExpression	& key_node		131817	0					
ANR	131971	UnaryOperator	&		131817	0					
ANR	131972	Identifier	key_node		131817	1					
ANR	131973	ExpressionStatement	key_node_ptr = & key_node	6470:3:190816:190840	131817	2	True				
ANR	131974	AssignmentExpression	key_node_ptr = & key_node		131817	0		=			
ANR	131975	Identifier	key_node_ptr		131817	0					
ANR	131976	UnaryOperationExpression	& key_node		131817	1					
ANR	131977	UnaryOperator	&		131817	0					
ANR	131978	Identifier	key_node		131817	1					
ANR	131979	IfStatement	if ( by_ref )		131817	6					
ANR	131980	Condition	by_ref	6473:6:190853:190858	131817	0	True				
ANR	131981	Identifier	by_ref		131817	0					
ANR	131982	CompoundStatement		26:14:622:622	131817	1					
ANR	131983	ExpressionStatement	zend_ensure_writable_variable ( value_ast )	6474:3:190866:190906	131817	0	True				
ANR	131984	CallExpression	zend_ensure_writable_variable ( value_ast )		131817	0					
ANR	131985	Callee	zend_ensure_writable_variable		131817	0					
ANR	131986	Identifier	zend_ensure_writable_variable		131817	0					
ANR	131987	ArgumentList	value_ast		131817	1					
ANR	131988	Argument	value_ast		131817	0					
ANR	131989	Identifier	value_ast		131817	0					
ANR	131990	ExpressionStatement	"zend_compile_var ( & value_node , value_ast , BP_VAR_W )"	6475:3:190911:190961	131817	1	True				
ANR	131991	CallExpression	"zend_compile_var ( & value_node , value_ast , BP_VAR_W )"		131817	0					
ANR	131992	Callee	zend_compile_var		131817	0					
ANR	131993	Identifier	zend_compile_var		131817	0					
ANR	131994	ArgumentList	& value_node		131817	1					
ANR	131995	Argument	& value_node		131817	0					
ANR	131996	UnaryOperationExpression	& value_node		131817	0					
ANR	131997	UnaryOperator	&		131817	0					
ANR	131998	Identifier	value_node		131817	1					
ANR	131999	Argument	value_ast		131817	1					
ANR	132000	Identifier	value_ast		131817	0					
ANR	132001	Argument	BP_VAR_W		131817	2					
ANR	132002	Identifier	BP_VAR_W		131817	0					
ANR	132003	ElseStatement	else		131817	0					
ANR	132004	CompoundStatement		29:9:733:733	131817	0					
ANR	132005	ExpressionStatement	"zend_compile_expr ( & value_node , value_ast )"	6477:3:190977:191018	131817	0	True				
ANR	132006	CallExpression	"zend_compile_expr ( & value_node , value_ast )"		131817	0					
ANR	132007	Callee	zend_compile_expr		131817	0					
ANR	132008	Identifier	zend_compile_expr		131817	0					
ANR	132009	ArgumentList	& value_node		131817	1					
ANR	132010	Argument	& value_node		131817	0					
ANR	132011	UnaryOperationExpression	& value_node		131817	0					
ANR	132012	UnaryOperator	&		131817	0					
ANR	132013	Identifier	value_node		131817	1					
ANR	132014	Argument	value_ast		131817	1					
ANR	132015	Identifier	value_ast		131817	0					
ANR	132016	IfStatement	if ( i == 0 )		131817	7					
ANR	132017	Condition	i == 0	6480:6:191031:191036	131817	0	True				
ANR	132018	EqualityExpression	i == 0		131817	0		==			
ANR	132019	Identifier	i		131817	0					
ANR	132020	PrimaryExpression	0		131817	1					
ANR	132021	CompoundStatement		33:14:800:800	131817	1					
ANR	132022	ExpressionStatement	opnum_init = get_next_op_number ( CG ( active_op_array ) )	6481:3:191044:191096	131817	0	True				
ANR	132023	AssignmentExpression	opnum_init = get_next_op_number ( CG ( active_op_array ) )		131817	0		=			
ANR	132024	Identifier	opnum_init		131817	0					
ANR	132025	CallExpression	get_next_op_number ( CG ( active_op_array ) )		131817	1					
ANR	132026	Callee	get_next_op_number		131817	0					
ANR	132027	Identifier	get_next_op_number		131817	0					
ANR	132028	ArgumentList	CG ( active_op_array )		131817	1					
ANR	132029	Argument	CG ( active_op_array )		131817	0					
ANR	132030	CallExpression	CG ( active_op_array )		131817	0					
ANR	132031	Callee	CG		131817	0					
ANR	132032	Identifier	CG		131817	0					
ANR	132033	ArgumentList	active_op_array		131817	1					
ANR	132034	Argument	active_op_array		131817	0					
ANR	132035	Identifier	active_op_array		131817	0					
ANR	132036	ExpressionStatement	"opline = zend_emit_op_tmp ( result , ZEND_INIT_ARRAY , & value_node , key_node_ptr )"	6482:3:191101:191178	131817	1	True				
ANR	132037	AssignmentExpression	"opline = zend_emit_op_tmp ( result , ZEND_INIT_ARRAY , & value_node , key_node_ptr )"		131817	0		=			
ANR	132038	Identifier	opline		131817	0					
ANR	132039	CallExpression	"zend_emit_op_tmp ( result , ZEND_INIT_ARRAY , & value_node , key_node_ptr )"		131817	1					
ANR	132040	Callee	zend_emit_op_tmp		131817	0					
ANR	132041	Identifier	zend_emit_op_tmp		131817	0					
ANR	132042	ArgumentList	result		131817	1					
ANR	132043	Argument	result		131817	0					
ANR	132044	Identifier	result		131817	0					
ANR	132045	Argument	ZEND_INIT_ARRAY		131817	1					
ANR	132046	Identifier	ZEND_INIT_ARRAY		131817	0					
ANR	132047	Argument	& value_node		131817	2					
ANR	132048	UnaryOperationExpression	& value_node		131817	0					
ANR	132049	UnaryOperator	&		131817	0					
ANR	132050	Identifier	value_node		131817	1					
ANR	132051	Argument	key_node_ptr		131817	3					
ANR	132052	Identifier	key_node_ptr		131817	0					
ANR	132053	ExpressionStatement	opline -> extended_value = list -> children << ZEND_ARRAY_SIZE_SHIFT	6483:3:191183:191247	131817	2	True				
ANR	132054	AssignmentExpression	opline -> extended_value = list -> children << ZEND_ARRAY_SIZE_SHIFT		131817	0		=			
ANR	132055	PtrMemberAccess	opline -> extended_value		131817	0					
ANR	132056	Identifier	opline		131817	0					
ANR	132057	Identifier	extended_value		131817	1					
ANR	132058	ShiftExpression	list -> children << ZEND_ARRAY_SIZE_SHIFT		131817	1		<<			
ANR	132059	PtrMemberAccess	list -> children		131817	0					
ANR	132060	Identifier	list		131817	0					
ANR	132061	Identifier	children		131817	1					
ANR	132062	Identifier	ZEND_ARRAY_SIZE_SHIFT		131817	1					
ANR	132063	ElseStatement	else		131817	0					
ANR	132064	CompoundStatement		37:9:1019:1019	131817	0					
ANR	132065	ExpressionStatement	"opline = zend_emit_op ( NULL , ZEND_ADD_ARRAY_ELEMENT , & value_node , key_node_ptr )"	6485:3:191263:191345	131817	0	True				
ANR	132066	AssignmentExpression	"opline = zend_emit_op ( NULL , ZEND_ADD_ARRAY_ELEMENT , & value_node , key_node_ptr )"		131817	0		=			
ANR	132067	Identifier	opline		131817	0					
ANR	132068	CallExpression	"zend_emit_op ( NULL , ZEND_ADD_ARRAY_ELEMENT , & value_node , key_node_ptr )"		131817	1					
ANR	132069	Callee	zend_emit_op		131817	0					
ANR	132070	Identifier	zend_emit_op		131817	0					
ANR	132071	ArgumentList	NULL		131817	1					
ANR	132072	Argument	NULL		131817	0					
ANR	132073	Identifier	NULL		131817	0					
ANR	132074	Argument	ZEND_ADD_ARRAY_ELEMENT		131817	1					
ANR	132075	Identifier	ZEND_ADD_ARRAY_ELEMENT		131817	0					
ANR	132076	Argument	& value_node		131817	2					
ANR	132077	UnaryOperationExpression	& value_node		131817	0					
ANR	132078	UnaryOperator	&		131817	0					
ANR	132079	Identifier	value_node		131817	1					
ANR	132080	Argument	key_node_ptr		131817	3					
ANR	132081	Identifier	key_node_ptr		131817	0					
ANR	132082	ExpressionStatement	"SET_NODE ( opline -> result , result )"	6487:3:191350:191382	131817	1	True				
ANR	132083	CallExpression	"SET_NODE ( opline -> result , result )"		131817	0					
ANR	132084	Callee	SET_NODE		131817	0					
ANR	132085	Identifier	SET_NODE		131817	0					
ANR	132086	ArgumentList	opline -> result		131817	1					
ANR	132087	Argument	opline -> result		131817	0					
ANR	132088	PtrMemberAccess	opline -> result		131817	0					
ANR	132089	Identifier	opline		131817	0					
ANR	132090	Identifier	result		131817	1					
ANR	132091	Argument	result		131817	1					
ANR	132092	Identifier	result		131817	0					
ANR	132093	ExpressionStatement	opline -> extended_value |= by_ref	6489:2:191390:191422	131817	8	True				
ANR	132094	AssignmentExpression	opline -> extended_value |= by_ref		131817	0		|=			
ANR	132095	PtrMemberAccess	opline -> extended_value		131817	0					
ANR	132096	Identifier	opline		131817	0					
ANR	132097	Identifier	extended_value		131817	1					
ANR	132098	Identifier	by_ref		131817	1					
ANR	132099	IfStatement	if ( key_ast && key_node . op_type == IS_CONST && Z_TYPE ( key_node . u . constant ) == IS_STRING )		131817	9					
ANR	132100	Condition	key_ast && key_node . op_type == IS_CONST && Z_TYPE ( key_node . u . constant ) == IS_STRING	6491:6:191431:191513	131817	0	True				
ANR	132101	AndExpression	key_ast && key_node . op_type == IS_CONST && Z_TYPE ( key_node . u . constant ) == IS_STRING		131817	0		&&			
ANR	132102	Identifier	key_ast		131817	0					
ANR	132103	AndExpression	key_node . op_type == IS_CONST && Z_TYPE ( key_node . u . constant ) == IS_STRING		131817	1		&&			
ANR	132104	EqualityExpression	key_node . op_type == IS_CONST		131817	0		==			
ANR	132105	MemberAccess	key_node . op_type		131817	0					
ANR	132106	Identifier	key_node		131817	0					
ANR	132107	Identifier	op_type		131817	1					
ANR	132108	Identifier	IS_CONST		131817	1					
ANR	132109	EqualityExpression	Z_TYPE ( key_node . u . constant ) == IS_STRING		131817	1		==			
ANR	132110	CallExpression	Z_TYPE ( key_node . u . constant )		131817	0					
ANR	132111	Callee	Z_TYPE		131817	0					
ANR	132112	Identifier	Z_TYPE		131817	0					
ANR	132113	ArgumentList	key_node . u . constant		131817	1					
ANR	132114	Argument	key_node . u . constant		131817	0					
ANR	132115	MemberAccess	key_node . u . constant		131817	0					
ANR	132116	MemberAccess	key_node . u		131817	0					
ANR	132117	Identifier	key_node		131817	0					
ANR	132118	Identifier	u		131817	1					
ANR	132119	Identifier	constant		131817	1					
ANR	132120	Identifier	IS_STRING		131817	1					
ANR	132121	CompoundStatement		44:91:1277:1277	131817	1					
ANR	132122	ExpressionStatement	packed = 0	6492:3:191521:191531	131817	0	True				
ANR	132123	AssignmentExpression	packed = 0		131817	0		=			
ANR	132124	Identifier	packed		131817	0					
ANR	132125	PrimaryExpression	0		131817	1					
ANR	132126	IfStatement	if ( ! list -> children )		131817	6					
ANR	132127	Condition	! list -> children	6497:5:191572:191586	131817	0	True				
ANR	132128	UnaryOperationExpression	! list -> children		131817	0					
ANR	132129	UnaryOperator	!		131817	0					
ANR	132130	PtrMemberAccess	list -> children		131817	1					
ANR	132131	Identifier	list		131817	0					
ANR	132132	Identifier	children		131817	1					
ANR	132133	CompoundStatement		50:22:1350:1350	131817	1					
ANR	132134	ExpressionStatement	"zend_emit_op_tmp ( result , ZEND_INIT_ARRAY , NULL , NULL )"	6498:2:191593:191646	131817	0	True				
ANR	132135	CallExpression	"zend_emit_op_tmp ( result , ZEND_INIT_ARRAY , NULL , NULL )"		131817	0					
ANR	132136	Callee	zend_emit_op_tmp		131817	0					
ANR	132137	Identifier	zend_emit_op_tmp		131817	0					
ANR	132138	ArgumentList	result		131817	1					
ANR	132139	Argument	result		131817	0					
ANR	132140	Identifier	result		131817	0					
ANR	132141	Argument	ZEND_INIT_ARRAY		131817	1					
ANR	132142	Identifier	ZEND_INIT_ARRAY		131817	0					
ANR	132143	Argument	NULL		131817	2					
ANR	132144	Identifier	NULL		131817	0					
ANR	132145	Argument	NULL		131817	3					
ANR	132146	Identifier	NULL		131817	0					
ANR	132147	IfStatement	if ( ! packed )		131817	7					
ANR	132148	Condition	! packed	6502:5:191728:191734	131817	0	True				
ANR	132149	UnaryOperationExpression	! packed		131817	0					
ANR	132150	UnaryOperator	!		131817	0					
ANR	132151	Identifier	packed		131817	1					
ANR	132152	CompoundStatement		55:14:1498:1498	131817	1					
ANR	132153	ExpressionStatement	ZEND_ASSERT ( opnum_init != - 1 )	6503:2:191741:191770	131817	0	True				
ANR	132154	CallExpression	ZEND_ASSERT ( opnum_init != - 1 )		131817	0					
ANR	132155	Callee	ZEND_ASSERT		131817	0					
ANR	132156	Identifier	ZEND_ASSERT		131817	0					
ANR	132157	ArgumentList	opnum_init != - 1		131817	1					
ANR	132158	Argument	opnum_init != - 1		131817	0					
ANR	132159	EqualityExpression	opnum_init != - 1		131817	0		!=			
ANR	132160	Identifier	opnum_init		131817	0					
ANR	132161	UnaryOperationExpression	- 1		131817	1					
ANR	132162	UnaryOperator	-		131817	0					
ANR	132163	PrimaryExpression	1		131817	1					
ANR	132164	ExpressionStatement	opline = & CG ( active_op_array ) -> opcodes [ opnum_init ]	6504:2:191774:191824	131817	1	True				
ANR	132165	AssignmentExpression	opline = & CG ( active_op_array ) -> opcodes [ opnum_init ]		131817	0		=			
ANR	132166	Identifier	opline		131817	0					
ANR	132167	UnaryOperationExpression	& CG ( active_op_array ) -> opcodes [ opnum_init ]		131817	1					
ANR	132168	UnaryOperator	&		131817	0					
ANR	132169	ArrayIndexing	CG ( active_op_array ) -> opcodes [ opnum_init ]		131817	1					
ANR	132170	PtrMemberAccess	CG ( active_op_array ) -> opcodes		131817	0					
ANR	132171	CallExpression	CG ( active_op_array )		131817	0					
ANR	132172	Callee	CG		131817	0					
ANR	132173	Identifier	CG		131817	0					
ANR	132174	ArgumentList	active_op_array		131817	1					
ANR	132175	Argument	active_op_array		131817	0					
ANR	132176	Identifier	active_op_array		131817	0					
ANR	132177	Identifier	opcodes		131817	1					
ANR	132178	Identifier	opnum_init		131817	1					
ANR	132179	ExpressionStatement	opline -> extended_value |= ZEND_ARRAY_NOT_PACKED	6505:2:191828:191875	131817	2	True				
ANR	132180	AssignmentExpression	opline -> extended_value |= ZEND_ARRAY_NOT_PACKED		131817	0		|=			
ANR	132181	PtrMemberAccess	opline -> extended_value		131817	0					
ANR	132182	Identifier	opline		131817	0					
ANR	132183	Identifier	extended_value		131817	1					
ANR	132184	Identifier	ZEND_ARRAY_NOT_PACKED		131817	1					
ANR	132185	ReturnType	void		131817	1					
ANR	132186	Identifier	zend_compile_array		131817	2					
ANR	132187	ParameterList	"znode * result , zend_ast * ast"		131817	3					
ANR	132188	Parameter	znode * result	6447:24:190198:190210	131817	0	True				
ANR	132189	ParameterType	znode *		131817	0					
ANR	132190	Identifier	result		131817	1					
ANR	132191	Parameter	zend_ast * ast	6447:39:190213:190225	131817	1	True				
ANR	132192	ParameterType	zend_ast *		131817	0					
ANR	132193	Identifier	ast		131817	1					
ANR	132194	CFGEntryNode	ENTRY		131817		True				
ANR	132195	CFGExitNode	EXIT		131817		True				
ANR	132196	Symbol	ast		131817						
ANR	132197	Symbol	Z_TYPE		131817						
ANR	132198	Symbol	* CG		131817						
ANR	132199	Symbol	zend_try_ct_eval_array		131817						
ANR	132200	Symbol	result -> u		131817						
ANR	132201	Symbol	CG ( active_op_array ) -> opcodes		131817						
ANR	132202	Symbol	opline -> extended_value		131817						
ANR	132203	Symbol	opline -> result		131817						
ANR	132204	Symbol	* elem_ast		131817						
ANR	132205	Symbol	opline		131817						
ANR	132206	Symbol	BP_VAR_W		131817						
ANR	132207	Symbol	IS_STRING		131817						
ANR	132208	Symbol	key_node . u . constant		131817						
ANR	132209	Symbol	key_node_ptr		131817						
ANR	132210	Symbol	IS_CONST		131817						
ANR	132211	Symbol	NULL		131817						
ANR	132212	Symbol	opnum_init		131817						
ANR	132213	Symbol	key_node . u		131817						
ANR	132214	Symbol	list		131817						
ANR	132215	Symbol	elem_ast		131817						
ANR	132216	Symbol	key_node . op_type		131817						
ANR	132217	Symbol	key_node		131817						
ANR	132218	Symbol	* list -> child		131817						
ANR	132219	Symbol	by_ref		131817						
ANR	132220	Symbol	list -> children		131817						
ANR	132221	Symbol	zend_emit_op		131817						
ANR	132222	Symbol	zend_emit_op_tmp		131817						
ANR	132223	Symbol	key_ast		131817						
ANR	132224	Symbol	ZEND_ARRAY_NOT_PACKED		131817						
ANR	132225	Symbol	result -> op_type		131817						
ANR	132226	Symbol	& key_node		131817						
ANR	132227	Symbol	result		131817						
ANR	132228	Symbol	* elem_ast -> child		131817						
ANR	132229	Symbol	* * list		131817						
ANR	132230	Symbol	* result		131817						
ANR	132231	Symbol	value_ast		131817						
ANR	132232	Symbol	value_node		131817						
ANR	132233	Symbol	& result -> u . constant		131817						
ANR	132234	Symbol	packed		131817						
ANR	132235	Symbol	elem_ast -> child		131817						
ANR	132236	Symbol	ZEND_INIT_ARRAY		131817						
ANR	132237	Symbol	& result -> u		131817						
ANR	132238	Symbol	list -> child		131817						
ANR	132239	Symbol	CG		131817						
ANR	132240	Symbol	elem_ast -> attr		131817						
ANR	132241	Symbol	active_op_array		131817						
ANR	132242	Symbol	i		131817						
ANR	132243	Symbol	* * elem_ast		131817						
ANR	132244	Symbol	zend_ast_get_list		131817						
ANR	132245	Symbol	* i		131817						
ANR	132246	Symbol	* opline		131817						
ANR	132247	Symbol	* list		131817						
ANR	132248	Symbol	& value_node		131817						
ANR	132249	Symbol	ZEND_ADD_ARRAY_ELEMENT		131817						
ANR	132250	Symbol	ZEND_ARRAY_SIZE_SHIFT		131817						
ANR	132251	Symbol	get_next_op_number		131817						
ANR	132252	Function	zend_compile_const	6510:0:191893:193581							
ANR	132253	FunctionDef	"zend_compile_const (znode * result , zend_ast * ast)"		132252	0					
ANR	132254	CompoundStatement		6511:0:191957:193581	132252	0					
ANR	132255	IdentifierDeclStatement	zend_ast * name_ast = ast -> child [ 0 ] ;	6512:1:191960:191994	132252	0	True				
ANR	132256	IdentifierDecl	* name_ast = ast -> child [ 0 ]		132252	0					
ANR	132257	IdentifierDeclType	zend_ast *		132252	0					
ANR	132258	Identifier	name_ast		132252	1					
ANR	132259	AssignmentExpression	* name_ast = ast -> child [ 0 ]		132252	2		=			
ANR	132260	Identifier	name_ast		132252	0					
ANR	132261	ArrayIndexing	ast -> child [ 0 ]		132252	1					
ANR	132262	PtrMemberAccess	ast -> child		132252	0					
ANR	132263	Identifier	ast		132252	0					
ANR	132264	Identifier	child		132252	1					
ANR	132265	PrimaryExpression	0		132252	1					
ANR	132266	IdentifierDeclStatement	zend_op * opline ;	6514:1:191998:192013	132252	1	True				
ANR	132267	IdentifierDecl	* opline		132252	0					
ANR	132268	IdentifierDeclType	zend_op *		132252	0					
ANR	132269	Identifier	opline		132252	1					
ANR	132270	IdentifierDeclStatement	zend_bool is_fully_qualified ;	6516:1:192017:192045	132252	2	True				
ANR	132271	IdentifierDecl	is_fully_qualified		132252	0					
ANR	132272	IdentifierDeclType	zend_bool		132252	0					
ANR	132273	Identifier	is_fully_qualified		132252	1					
ANR	132274	IdentifierDeclStatement	zend_string * orig_name = zend_ast_get_str ( name_ast ) ;	6517:1:192048:192099	132252	3	True				
ANR	132275	IdentifierDecl	* orig_name = zend_ast_get_str ( name_ast )		132252	0					
ANR	132276	IdentifierDeclType	zend_string *		132252	0					
ANR	132277	Identifier	orig_name		132252	1					
ANR	132278	AssignmentExpression	* orig_name = zend_ast_get_str ( name_ast )		132252	2		=			
ANR	132279	Identifier	orig_name		132252	0					
ANR	132280	CallExpression	zend_ast_get_str ( name_ast )		132252	1					
ANR	132281	Callee	zend_ast_get_str		132252	0					
ANR	132282	Identifier	zend_ast_get_str		132252	0					
ANR	132283	ArgumentList	name_ast		132252	1					
ANR	132284	Argument	name_ast		132252	0					
ANR	132285	Identifier	name_ast		132252	0					
ANR	132286	IdentifierDeclStatement	"zend_string * resolved_name = zend_resolve_const_name ( orig_name , name_ast -> attr , & is_fully_qualified ) ;"	6518:1:192102:192202	132252	4	True				
ANR	132287	IdentifierDecl	"* resolved_name = zend_resolve_const_name ( orig_name , name_ast -> attr , & is_fully_qualified )"		132252	0					
ANR	132288	IdentifierDeclType	zend_string *		132252	0					
ANR	132289	Identifier	resolved_name		132252	1					
ANR	132290	AssignmentExpression	"* resolved_name = zend_resolve_const_name ( orig_name , name_ast -> attr , & is_fully_qualified )"		132252	2		=			
ANR	132291	Identifier	resolved_name		132252	0					
ANR	132292	CallExpression	"zend_resolve_const_name ( orig_name , name_ast -> attr , & is_fully_qualified )"		132252	1					
ANR	132293	Callee	zend_resolve_const_name		132252	0					
ANR	132294	Identifier	zend_resolve_const_name		132252	0					
ANR	132295	ArgumentList	orig_name		132252	1					
ANR	132296	Argument	orig_name		132252	0					
ANR	132297	Identifier	orig_name		132252	0					
ANR	132298	Argument	name_ast -> attr		132252	1					
ANR	132299	PtrMemberAccess	name_ast -> attr		132252	0					
ANR	132300	Identifier	name_ast		132252	0					
ANR	132301	Identifier	attr		132252	1					
ANR	132302	Argument	& is_fully_qualified		132252	2					
ANR	132303	UnaryOperationExpression	& is_fully_qualified		132252	0					
ANR	132304	UnaryOperator	&		132252	0					
ANR	132305	Identifier	is_fully_qualified		132252	1					
ANR	132306	IfStatement	"if ( zend_string_equals_literal ( resolved_name , ""__COMPILER_HALT_OFFSET__"" ) || ( name_ast -> attr != ZEND_NAME_RELATIVE && zend_string_equals_literal ( orig_name , ""__COMPILER_HALT_OFFSET__"" ) ) )"		132252	5					
ANR	132307	Condition	"zend_string_equals_literal ( resolved_name , ""__COMPILER_HALT_OFFSET__"" ) || ( name_ast -> attr != ZEND_NAME_RELATIVE && zend_string_equals_literal ( orig_name , ""__COMPILER_HALT_OFFSET__"" ) )"	6520:5:192210:192389	132252	0	True				
ANR	132308	OrExpression	"zend_string_equals_literal ( resolved_name , ""__COMPILER_HALT_OFFSET__"" ) || ( name_ast -> attr != ZEND_NAME_RELATIVE && zend_string_equals_literal ( orig_name , ""__COMPILER_HALT_OFFSET__"" ) )"		132252	0		||			
ANR	132309	CallExpression	"zend_string_equals_literal ( resolved_name , ""__COMPILER_HALT_OFFSET__"" )"		132252	0					
ANR	132310	Callee	zend_string_equals_literal		132252	0					
ANR	132311	Identifier	zend_string_equals_literal		132252	0					
ANR	132312	ArgumentList	resolved_name		132252	1					
ANR	132313	Argument	resolved_name		132252	0					
ANR	132314	Identifier	resolved_name		132252	0					
ANR	132315	Argument	"""__COMPILER_HALT_OFFSET__"""		132252	1					
ANR	132316	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		132252	0					
ANR	132317	AndExpression	"name_ast -> attr != ZEND_NAME_RELATIVE && zend_string_equals_literal ( orig_name , ""__COMPILER_HALT_OFFSET__"" )"		132252	1		&&			
ANR	132318	EqualityExpression	name_ast -> attr != ZEND_NAME_RELATIVE		132252	0		!=			
ANR	132319	PtrMemberAccess	name_ast -> attr		132252	0					
ANR	132320	Identifier	name_ast		132252	0					
ANR	132321	Identifier	attr		132252	1					
ANR	132322	Identifier	ZEND_NAME_RELATIVE		132252	1					
ANR	132323	CallExpression	"zend_string_equals_literal ( orig_name , ""__COMPILER_HALT_OFFSET__"" )"		132252	1					
ANR	132324	Callee	zend_string_equals_literal		132252	0					
ANR	132325	Identifier	zend_string_equals_literal		132252	0					
ANR	132326	ArgumentList	orig_name		132252	1					
ANR	132327	Argument	orig_name		132252	0					
ANR	132328	Identifier	orig_name		132252	0					
ANR	132329	Argument	"""__COMPILER_HALT_OFFSET__"""		132252	1					
ANR	132330	PrimaryExpression	"""__COMPILER_HALT_OFFSET__"""		132252	0					
ANR	132331	CompoundStatement		11:2:438:462	132252	1					
ANR	132332	IdentifierDeclStatement	zend_ast * last = CG ( ast ) ;	6521:2:192396:192420	132252	0	True				
ANR	132333	IdentifierDecl	* last = CG ( ast )		132252	0					
ANR	132334	IdentifierDeclType	zend_ast *		132252	0					
ANR	132335	Identifier	last		132252	1					
ANR	132336	AssignmentExpression	* last = CG ( ast )		132252	2		=			
ANR	132337	Identifier	last		132252	0					
ANR	132338	CallExpression	CG ( ast )		132252	1					
ANR	132339	Callee	CG		132252	0					
ANR	132340	Identifier	CG		132252	0					
ANR	132341	ArgumentList	ast		132252	1					
ANR	132342	Argument	ast		132252	0					
ANR	132343	Identifier	ast		132252	0					
ANR	132344	WhileStatement	while ( last -> kind == ZEND_AST_STMT_LIST )		132252	1					
ANR	132345	Condition	last -> kind == ZEND_AST_STMT_LIST	6523:9:192432:192463	132252	0	True				
ANR	132346	EqualityExpression	last -> kind == ZEND_AST_STMT_LIST		132252	0		==			
ANR	132347	PtrMemberAccess	last -> kind		132252	0					
ANR	132348	Identifier	last		132252	0					
ANR	132349	Identifier	kind		132252	1					
ANR	132350	Identifier	ZEND_AST_STMT_LIST		132252	1					
ANR	132351	CompoundStatement		14:3:513:558	132252	1					
ANR	132352	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( last ) ;	6524:3:192471:192516	132252	0	True				
ANR	132353	IdentifierDecl	* list = zend_ast_get_list ( last )		132252	0					
ANR	132354	IdentifierDeclType	zend_ast_list *		132252	0					
ANR	132355	Identifier	list		132252	1					
ANR	132356	AssignmentExpression	* list = zend_ast_get_list ( last )		132252	2		=			
ANR	132357	Identifier	list		132252	0					
ANR	132358	CallExpression	zend_ast_get_list ( last )		132252	1					
ANR	132359	Callee	zend_ast_get_list		132252	0					
ANR	132360	Identifier	zend_ast_get_list		132252	0					
ANR	132361	ArgumentList	last		132252	1					
ANR	132362	Argument	last		132252	0					
ANR	132363	Identifier	last		132252	0					
ANR	132364	ExpressionStatement	last = list -> child [ list -> children - 1 ]	6525:3:192521:192557	132252	1	True				
ANR	132365	AssignmentExpression	last = list -> child [ list -> children - 1 ]		132252	0		=			
ANR	132366	Identifier	last		132252	0					
ANR	132367	ArrayIndexing	list -> child [ list -> children - 1 ]		132252	1					
ANR	132368	PtrMemberAccess	list -> child		132252	0					
ANR	132369	Identifier	list		132252	0					
ANR	132370	Identifier	child		132252	1					
ANR	132371	AdditiveExpression	list -> children - 1		132252	1		-			
ANR	132372	PtrMemberAccess	list -> children		132252	0					
ANR	132373	Identifier	list		132252	0					
ANR	132374	Identifier	children		132252	1					
ANR	132375	PrimaryExpression	1		132252	1					
ANR	132376	IfStatement	if ( last -> kind == ZEND_AST_HALT_COMPILER )		132252	2					
ANR	132377	Condition	last -> kind == ZEND_AST_HALT_COMPILER	6527:6:192569:192604	132252	0	True				
ANR	132378	EqualityExpression	last -> kind == ZEND_AST_HALT_COMPILER		132252	0		==			
ANR	132379	PtrMemberAccess	last -> kind		132252	0					
ANR	132380	Identifier	last		132252	0					
ANR	132381	Identifier	kind		132252	1					
ANR	132382	Identifier	ZEND_AST_HALT_COMPILER		132252	1					
ANR	132383	CompoundStatement		17:44:649:649	132252	1					
ANR	132384	ExpressionStatement	result -> op_type = IS_CONST	6528:3:192612:192638	132252	0	True				
ANR	132385	AssignmentExpression	result -> op_type = IS_CONST		132252	0		=			
ANR	132386	PtrMemberAccess	result -> op_type		132252	0					
ANR	132387	Identifier	result		132252	0					
ANR	132388	Identifier	op_type		132252	1					
ANR	132389	Identifier	IS_CONST		132252	1					
ANR	132390	ExpressionStatement	"ZVAL_LONG ( & result -> u . constant , Z_LVAL_P ( zend_ast_get_zval ( last -> child [ 0 ] ) ) )"	6529:3:192643:192718	132252	1	True				
ANR	132391	CallExpression	"ZVAL_LONG ( & result -> u . constant , Z_LVAL_P ( zend_ast_get_zval ( last -> child [ 0 ] ) ) )"		132252	0					
ANR	132392	Callee	ZVAL_LONG		132252	0					
ANR	132393	Identifier	ZVAL_LONG		132252	0					
ANR	132394	ArgumentList	& result -> u . constant		132252	1					
ANR	132395	Argument	& result -> u . constant		132252	0					
ANR	132396	UnaryOperationExpression	& result -> u . constant		132252	0					
ANR	132397	UnaryOperator	&		132252	0					
ANR	132398	MemberAccess	result -> u . constant		132252	1					
ANR	132399	PtrMemberAccess	result -> u		132252	0					
ANR	132400	Identifier	result		132252	0					
ANR	132401	Identifier	u		132252	1					
ANR	132402	Identifier	constant		132252	1					
ANR	132403	Argument	Z_LVAL_P ( zend_ast_get_zval ( last -> child [ 0 ] ) )		132252	1					
ANR	132404	CallExpression	Z_LVAL_P ( zend_ast_get_zval ( last -> child [ 0 ] ) )		132252	0					
ANR	132405	Callee	Z_LVAL_P		132252	0					
ANR	132406	Identifier	Z_LVAL_P		132252	0					
ANR	132407	ArgumentList	zend_ast_get_zval ( last -> child [ 0 ] )		132252	1					
ANR	132408	Argument	zend_ast_get_zval ( last -> child [ 0 ] )		132252	0					
ANR	132409	CallExpression	zend_ast_get_zval ( last -> child [ 0 ] )		132252	0					
ANR	132410	Callee	zend_ast_get_zval		132252	0					
ANR	132411	Identifier	zend_ast_get_zval		132252	0					
ANR	132412	ArgumentList	last -> child [ 0 ]		132252	1					
ANR	132413	Argument	last -> child [ 0 ]		132252	0					
ANR	132414	ArrayIndexing	last -> child [ 0 ]		132252	0					
ANR	132415	PtrMemberAccess	last -> child		132252	0					
ANR	132416	Identifier	last		132252	0					
ANR	132417	Identifier	child		132252	1					
ANR	132418	PrimaryExpression	0		132252	1					
ANR	132419	ExpressionStatement	zend_string_release ( resolved_name )	6530:3:192723:192757	132252	2	True				
ANR	132420	CallExpression	zend_string_release ( resolved_name )		132252	0					
ANR	132421	Callee	zend_string_release		132252	0					
ANR	132422	Identifier	zend_string_release		132252	0					
ANR	132423	ArgumentList	resolved_name		132252	1					
ANR	132424	Argument	resolved_name		132252	0					
ANR	132425	Identifier	resolved_name		132252	0					
ANR	132426	ReturnStatement	return ;	6531:3:192762:192768	132252	3	True				
ANR	132427	IfStatement	"if ( zend_try_ct_eval_const ( & result -> u . constant , resolved_name , is_fully_qualified ) )"		132252	6					
ANR	132428	Condition	"zend_try_ct_eval_const ( & result -> u . constant , resolved_name , is_fully_qualified )"	6535:5:192783:192860	132252	0	True				
ANR	132429	CallExpression	"zend_try_ct_eval_const ( & result -> u . constant , resolved_name , is_fully_qualified )"		132252	0					
ANR	132430	Callee	zend_try_ct_eval_const		132252	0					
ANR	132431	Identifier	zend_try_ct_eval_const		132252	0					
ANR	132432	ArgumentList	& result -> u . constant		132252	1					
ANR	132433	Argument	& result -> u . constant		132252	0					
ANR	132434	UnaryOperationExpression	& result -> u . constant		132252	0					
ANR	132435	UnaryOperator	&		132252	0					
ANR	132436	MemberAccess	result -> u . constant		132252	1					
ANR	132437	PtrMemberAccess	result -> u		132252	0					
ANR	132438	Identifier	result		132252	0					
ANR	132439	Identifier	u		132252	1					
ANR	132440	Identifier	constant		132252	1					
ANR	132441	Argument	resolved_name		132252	1					
ANR	132442	Identifier	resolved_name		132252	0					
ANR	132443	Argument	is_fully_qualified		132252	2					
ANR	132444	Identifier	is_fully_qualified		132252	0					
ANR	132445	CompoundStatement		25:85:905:905	132252	1					
ANR	132446	ExpressionStatement	result -> op_type = IS_CONST	6536:2:192867:192893	132252	0	True				
ANR	132447	AssignmentExpression	result -> op_type = IS_CONST		132252	0		=			
ANR	132448	PtrMemberAccess	result -> op_type		132252	0					
ANR	132449	Identifier	result		132252	0					
ANR	132450	Identifier	op_type		132252	1					
ANR	132451	Identifier	IS_CONST		132252	1					
ANR	132452	ExpressionStatement	zend_string_release ( resolved_name )	6537:2:192897:192931	132252	1	True				
ANR	132453	CallExpression	zend_string_release ( resolved_name )		132252	0					
ANR	132454	Callee	zend_string_release		132252	0					
ANR	132455	Identifier	zend_string_release		132252	0					
ANR	132456	ArgumentList	resolved_name		132252	1					
ANR	132457	Argument	resolved_name		132252	0					
ANR	132458	Identifier	resolved_name		132252	0					
ANR	132459	ReturnStatement	return ;	6538:2:192935:192941	132252	2	True				
ANR	132460	ExpressionStatement	"opline = zend_emit_op_tmp ( result , ZEND_FETCH_CONSTANT , NULL , NULL )"	6541:1:192948:193014	132252	7	True				
ANR	132461	AssignmentExpression	"opline = zend_emit_op_tmp ( result , ZEND_FETCH_CONSTANT , NULL , NULL )"		132252	0		=			
ANR	132462	Identifier	opline		132252	0					
ANR	132463	CallExpression	"zend_emit_op_tmp ( result , ZEND_FETCH_CONSTANT , NULL , NULL )"		132252	1					
ANR	132464	Callee	zend_emit_op_tmp		132252	0					
ANR	132465	Identifier	zend_emit_op_tmp		132252	0					
ANR	132466	ArgumentList	result		132252	1					
ANR	132467	Argument	result		132252	0					
ANR	132468	Identifier	result		132252	0					
ANR	132469	Argument	ZEND_FETCH_CONSTANT		132252	1					
ANR	132470	Identifier	ZEND_FETCH_CONSTANT		132252	0					
ANR	132471	Argument	NULL		132252	2					
ANR	132472	Identifier	NULL		132252	0					
ANR	132473	Argument	NULL		132252	3					
ANR	132474	Identifier	NULL		132252	0					
ANR	132475	ExpressionStatement	opline -> op2_type = IS_CONST	6542:1:193017:193044	132252	8	True				
ANR	132476	AssignmentExpression	opline -> op2_type = IS_CONST		132252	0		=			
ANR	132477	PtrMemberAccess	opline -> op2_type		132252	0					
ANR	132478	Identifier	opline		132252	0					
ANR	132479	Identifier	op2_type		132252	1					
ANR	132480	Identifier	IS_CONST		132252	1					
ANR	132481	IfStatement	if ( is_fully_qualified )		132252	9					
ANR	132482	Condition	is_fully_qualified	6544:5:193052:193069	132252	0	True				
ANR	132483	Identifier	is_fully_qualified		132252	0					
ANR	132484	CompoundStatement		34:25:1114:1114	132252	1					
ANR	132485	ExpressionStatement	"opline -> op2 . constant = zend_add_const_name_literal ( CG ( active_op_array ) , resolved_name , 0 )"	6545:2:193076:193169	132252	0	True				
ANR	132486	AssignmentExpression	"opline -> op2 . constant = zend_add_const_name_literal ( CG ( active_op_array ) , resolved_name , 0 )"		132252	0		=			
ANR	132487	MemberAccess	opline -> op2 . constant		132252	0					
ANR	132488	PtrMemberAccess	opline -> op2		132252	0					
ANR	132489	Identifier	opline		132252	0					
ANR	132490	Identifier	op2		132252	1					
ANR	132491	Identifier	constant		132252	1					
ANR	132492	CallExpression	"zend_add_const_name_literal ( CG ( active_op_array ) , resolved_name , 0 )"		132252	1					
ANR	132493	Callee	zend_add_const_name_literal		132252	0					
ANR	132494	Identifier	zend_add_const_name_literal		132252	0					
ANR	132495	ArgumentList	CG ( active_op_array )		132252	1					
ANR	132496	Argument	CG ( active_op_array )		132252	0					
ANR	132497	CallExpression	CG ( active_op_array )		132252	0					
ANR	132498	Callee	CG		132252	0					
ANR	132499	Identifier	CG		132252	0					
ANR	132500	ArgumentList	active_op_array		132252	1					
ANR	132501	Argument	active_op_array		132252	0					
ANR	132502	Identifier	active_op_array		132252	0					
ANR	132503	Argument	resolved_name		132252	1					
ANR	132504	Identifier	resolved_name		132252	0					
ANR	132505	Argument	0		132252	2					
ANR	132506	PrimaryExpression	0		132252	0					
ANR	132507	ElseStatement	else		132252	0					
ANR	132508	CompoundStatement		37:8:1221:1221	132252	0					
ANR	132509	ExpressionStatement	opline -> extended_value = IS_CONSTANT_UNQUALIFIED	6548:2:193183:193231	132252	0	True				
ANR	132510	AssignmentExpression	opline -> extended_value = IS_CONSTANT_UNQUALIFIED		132252	0		=			
ANR	132511	PtrMemberAccess	opline -> extended_value		132252	0					
ANR	132512	Identifier	opline		132252	0					
ANR	132513	Identifier	extended_value		132252	1					
ANR	132514	Identifier	IS_CONSTANT_UNQUALIFIED		132252	1					
ANR	132515	IfStatement	if ( FC ( current_namespace ) )		132252	1					
ANR	132516	Condition	FC ( current_namespace )	6549:6:193239:193259	132252	0	True				
ANR	132517	CallExpression	FC ( current_namespace )		132252	0					
ANR	132518	Callee	FC		132252	0					
ANR	132519	Identifier	FC		132252	0					
ANR	132520	ArgumentList	current_namespace		132252	1					
ANR	132521	Argument	current_namespace		132252	0					
ANR	132522	Identifier	current_namespace		132252	0					
ANR	132523	CompoundStatement		39:29:1304:1304	132252	1					
ANR	132524	ExpressionStatement	opline -> extended_value |= IS_CONSTANT_IN_NAMESPACE	6550:3:193267:193317	132252	0	True				
ANR	132525	AssignmentExpression	opline -> extended_value |= IS_CONSTANT_IN_NAMESPACE		132252	0		|=			
ANR	132526	PtrMemberAccess	opline -> extended_value		132252	0					
ANR	132527	Identifier	opline		132252	0					
ANR	132528	Identifier	extended_value		132252	1					
ANR	132529	Identifier	IS_CONSTANT_IN_NAMESPACE		132252	1					
ANR	132530	ExpressionStatement	"opline -> op2 . constant = zend_add_const_name_literal ( CG ( active_op_array ) , resolved_name , 1 )"	6551:3:193322:193416	132252	1	True				
ANR	132531	AssignmentExpression	"opline -> op2 . constant = zend_add_const_name_literal ( CG ( active_op_array ) , resolved_name , 1 )"		132252	0		=			
ANR	132532	MemberAccess	opline -> op2 . constant		132252	0					
ANR	132533	PtrMemberAccess	opline -> op2		132252	0					
ANR	132534	Identifier	opline		132252	0					
ANR	132535	Identifier	op2		132252	1					
ANR	132536	Identifier	constant		132252	1					
ANR	132537	CallExpression	"zend_add_const_name_literal ( CG ( active_op_array ) , resolved_name , 1 )"		132252	1					
ANR	132538	Callee	zend_add_const_name_literal		132252	0					
ANR	132539	Identifier	zend_add_const_name_literal		132252	0					
ANR	132540	ArgumentList	CG ( active_op_array )		132252	1					
ANR	132541	Argument	CG ( active_op_array )		132252	0					
ANR	132542	CallExpression	CG ( active_op_array )		132252	0					
ANR	132543	Callee	CG		132252	0					
ANR	132544	Identifier	CG		132252	0					
ANR	132545	ArgumentList	active_op_array		132252	1					
ANR	132546	Argument	active_op_array		132252	0					
ANR	132547	Identifier	active_op_array		132252	0					
ANR	132548	Argument	resolved_name		132252	1					
ANR	132549	Identifier	resolved_name		132252	0					
ANR	132550	Argument	1		132252	2					
ANR	132551	PrimaryExpression	1		132252	0					
ANR	132552	ElseStatement	else		132252	0					
ANR	132553	CompoundStatement		43:9:1469:1469	132252	0					
ANR	132554	ExpressionStatement	"opline -> op2 . constant = zend_add_const_name_literal ( CG ( active_op_array ) , resolved_name , 0 )"	6554:3:193432:193526	132252	0	True				
ANR	132555	AssignmentExpression	"opline -> op2 . constant = zend_add_const_name_literal ( CG ( active_op_array ) , resolved_name , 0 )"		132252	0		=			
ANR	132556	MemberAccess	opline -> op2 . constant		132252	0					
ANR	132557	PtrMemberAccess	opline -> op2		132252	0					
ANR	132558	Identifier	opline		132252	0					
ANR	132559	Identifier	op2		132252	1					
ANR	132560	Identifier	constant		132252	1					
ANR	132561	CallExpression	"zend_add_const_name_literal ( CG ( active_op_array ) , resolved_name , 0 )"		132252	1					
ANR	132562	Callee	zend_add_const_name_literal		132252	0					
ANR	132563	Identifier	zend_add_const_name_literal		132252	0					
ANR	132564	ArgumentList	CG ( active_op_array )		132252	1					
ANR	132565	Argument	CG ( active_op_array )		132252	0					
ANR	132566	CallExpression	CG ( active_op_array )		132252	0					
ANR	132567	Callee	CG		132252	0					
ANR	132568	Identifier	CG		132252	0					
ANR	132569	ArgumentList	active_op_array		132252	1					
ANR	132570	Argument	active_op_array		132252	0					
ANR	132571	Identifier	active_op_array		132252	0					
ANR	132572	Argument	resolved_name		132252	1					
ANR	132573	Identifier	resolved_name		132252	0					
ANR	132574	Argument	0		132252	2					
ANR	132575	PrimaryExpression	0		132252	0					
ANR	132576	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	6558:1:193536:193579	132252	10	True				
ANR	132577	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		132252	0					
ANR	132578	Callee	zend_alloc_cache_slot		132252	0					
ANR	132579	Identifier	zend_alloc_cache_slot		132252	0					
ANR	132580	ArgumentList	opline -> op2 . constant		132252	1					
ANR	132581	Argument	opline -> op2 . constant		132252	0					
ANR	132582	MemberAccess	opline -> op2 . constant		132252	0					
ANR	132583	PtrMemberAccess	opline -> op2		132252	0					
ANR	132584	Identifier	opline		132252	0					
ANR	132585	Identifier	op2		132252	1					
ANR	132586	Identifier	constant		132252	1					
ANR	132587	ReturnType	void		132252	1					
ANR	132588	Identifier	zend_compile_const		132252	2					
ANR	132589	ParameterList	"znode * result , zend_ast * ast"		132252	3					
ANR	132590	Parameter	znode * result	6510:24:191917:191929	132252	0	True				
ANR	132591	ParameterType	znode *		132252	0					
ANR	132592	Identifier	result		132252	1					
ANR	132593	Parameter	zend_ast * ast	6510:39:191932:191944	132252	1	True				
ANR	132594	ParameterType	zend_ast *		132252	0					
ANR	132595	Identifier	ast		132252	1					
ANR	132596	CFGEntryNode	ENTRY		132252		True				
ANR	132597	CFGExitNode	EXIT		132252		True				
ANR	132598	Symbol	zend_string_equals_literal		132252						
ANR	132599	Symbol	ast		132252						
ANR	132600	Symbol	last -> child		132252						
ANR	132601	Symbol	result -> u		132252						
ANR	132602	Symbol	opline -> extended_value		132252						
ANR	132603	Symbol	opline		132252						
ANR	132604	Symbol	IS_CONSTANT_UNQUALIFIED		132252						
ANR	132605	Symbol	ZEND_FETCH_CONSTANT		132252						
ANR	132606	Symbol	& is_fully_qualified		132252						
ANR	132607	Symbol	* list -> children		132252						
ANR	132608	Symbol	IS_CONST		132252						
ANR	132609	Symbol	NULL		132252						
ANR	132610	Symbol	last		132252						
ANR	132611	Symbol	IS_CONSTANT_IN_NAMESPACE		132252						
ANR	132612	Symbol	list		132252						
ANR	132613	Symbol	ZEND_AST_STMT_LIST		132252						
ANR	132614	Symbol	zend_add_const_name_literal		132252						
ANR	132615	Symbol	* last -> child		132252						
ANR	132616	Symbol	zend_resolve_const_name		132252						
ANR	132617	Symbol	* ast -> child		132252						
ANR	132618	Symbol	* list -> child		132252						
ANR	132619	Symbol	ast -> child		132252						
ANR	132620	Symbol	zend_ast_get_zval		132252						
ANR	132621	Symbol	FC		132252						
ANR	132622	Symbol	list -> children		132252						
ANR	132623	Symbol	zend_emit_op_tmp		132252						
ANR	132624	Symbol	opline -> op2		132252						
ANR	132625	Symbol	result -> op_type		132252						
ANR	132626	Symbol	name_ast -> attr		132252						
ANR	132627	Symbol	ZEND_AST_HALT_COMPILER		132252						
ANR	132628	Symbol	result		132252						
ANR	132629	Symbol	* name_ast		132252						
ANR	132630	Symbol	* ast		132252						
ANR	132631	Symbol	zend_ast_get_str		132252						
ANR	132632	Symbol	* * list		132252						
ANR	132633	Symbol	* result		132252						
ANR	132634	Symbol	* * ast		132252						
ANR	132635	Symbol	ZEND_NAME_RELATIVE		132252						
ANR	132636	Symbol	orig_name		132252						
ANR	132637	Symbol	& result -> u . constant		132252						
ANR	132638	Symbol	* * last		132252						
ANR	132639	Symbol	last -> kind		132252						
ANR	132640	Symbol	CG		132252						
ANR	132641	Symbol	list -> child		132252						
ANR	132642	Symbol	& result -> u		132252						
ANR	132643	Symbol	active_op_array		132252						
ANR	132644	Symbol	resolved_name		132252						
ANR	132645	Symbol	is_fully_qualified		132252						
ANR	132646	Symbol	* last		132252						
ANR	132647	Symbol	Z_LVAL_P		132252						
ANR	132648	Symbol	zend_try_ct_eval_const		132252						
ANR	132649	Symbol	zend_ast_get_list		132252						
ANR	132650	Symbol	* opline		132252						
ANR	132651	Symbol	* list		132252						
ANR	132652	Symbol	current_namespace		132252						
ANR	132653	Symbol	name_ast		132252						
ANR	132654	Symbol	opline -> op2 . constant		132252						
ANR	132655	Symbol	opline -> op2_type		132252						
ANR	132656	Function	zend_compile_class_const	6562:0:193594:195434							
ANR	132657	FunctionDef	"zend_compile_class_const (znode * result , zend_ast * ast)"		132656	0					
ANR	132658	CompoundStatement		6563:0:193664:195434	132656	0					
ANR	132659	IdentifierDeclStatement	zend_ast * class_ast = ast -> child [ 0 ] ;	6564:1:193667:193702	132656	0	True				
ANR	132660	IdentifierDecl	* class_ast = ast -> child [ 0 ]		132656	0					
ANR	132661	IdentifierDeclType	zend_ast *		132656	0					
ANR	132662	Identifier	class_ast		132656	1					
ANR	132663	AssignmentExpression	* class_ast = ast -> child [ 0 ]		132656	2		=			
ANR	132664	Identifier	class_ast		132656	0					
ANR	132665	ArrayIndexing	ast -> child [ 0 ]		132656	1					
ANR	132666	PtrMemberAccess	ast -> child		132656	0					
ANR	132667	Identifier	ast		132656	0					
ANR	132668	Identifier	child		132656	1					
ANR	132669	PrimaryExpression	0		132656	1					
ANR	132670	IdentifierDeclStatement	zend_ast * const_ast = ast -> child [ 1 ] ;	6565:1:193705:193740	132656	1	True				
ANR	132671	IdentifierDecl	* const_ast = ast -> child [ 1 ]		132656	0					
ANR	132672	IdentifierDeclType	zend_ast *		132656	0					
ANR	132673	Identifier	const_ast		132656	1					
ANR	132674	AssignmentExpression	* const_ast = ast -> child [ 1 ]		132656	2		=			
ANR	132675	Identifier	const_ast		132656	0					
ANR	132676	ArrayIndexing	ast -> child [ 1 ]		132656	1					
ANR	132677	PtrMemberAccess	ast -> child		132656	0					
ANR	132678	Identifier	ast		132656	0					
ANR	132679	Identifier	child		132656	1					
ANR	132680	PrimaryExpression	1		132656	1					
ANR	132681	IdentifierDeclStatement	"znode class_node , const_node ;"	6567:1:193744:193772	132656	2	True				
ANR	132682	IdentifierDecl	class_node		132656	0					
ANR	132683	IdentifierDeclType	znode		132656	0					
ANR	132684	Identifier	class_node		132656	1					
ANR	132685	IdentifierDecl	const_node		132656	1					
ANR	132686	IdentifierDeclType	znode		132656	0					
ANR	132687	Identifier	const_node		132656	1					
ANR	132688	IdentifierDeclStatement	zend_op * opline ;	6568:1:193775:193790	132656	3	True				
ANR	132689	IdentifierDecl	* opline		132656	0					
ANR	132690	IdentifierDeclType	zend_op *		132656	0					
ANR	132691	Identifier	opline		132656	1					
ANR	132692	IdentifierDeclStatement	zend_string * resolved_name ;	6569:1:193793:193819	132656	4	True				
ANR	132693	IdentifierDecl	* resolved_name		132656	0					
ANR	132694	IdentifierDeclType	zend_string *		132656	0					
ANR	132695	Identifier	resolved_name		132656	1					
ANR	132696	IfStatement	"if ( zend_try_compile_const_expr_resolve_class_name ( & result -> u . constant , class_ast , const_ast , 0 ) )"		132656	5					
ANR	132697	Condition	"zend_try_compile_const_expr_resolve_class_name ( & result -> u . constant , class_ast , const_ast , 0 )"	6571:5:193827:193918	132656	0	True				
ANR	132698	CallExpression	"zend_try_compile_const_expr_resolve_class_name ( & result -> u . constant , class_ast , const_ast , 0 )"		132656	0					
ANR	132699	Callee	zend_try_compile_const_expr_resolve_class_name		132656	0					
ANR	132700	Identifier	zend_try_compile_const_expr_resolve_class_name		132656	0					
ANR	132701	ArgumentList	& result -> u . constant		132656	1					
ANR	132702	Argument	& result -> u . constant		132656	0					
ANR	132703	UnaryOperationExpression	& result -> u . constant		132656	0					
ANR	132704	UnaryOperator	&		132656	0					
ANR	132705	MemberAccess	result -> u . constant		132656	1					
ANR	132706	PtrMemberAccess	result -> u		132656	0					
ANR	132707	Identifier	result		132656	0					
ANR	132708	Identifier	u		132656	1					
ANR	132709	Identifier	constant		132656	1					
ANR	132710	Argument	class_ast		132656	1					
ANR	132711	Identifier	class_ast		132656	0					
ANR	132712	Argument	const_ast		132656	2					
ANR	132713	Identifier	const_ast		132656	0					
ANR	132714	Argument	0		132656	3					
ANR	132715	PrimaryExpression	0		132656	0					
ANR	132716	CompoundStatement		9:99:256:256	132656	1					
ANR	132717	IfStatement	if ( Z_TYPE ( result -> u . constant ) == IS_NULL )		132656	0					
ANR	132718	Condition	Z_TYPE ( result -> u . constant ) == IS_NULL	6572:6:193929:193965	132656	0	True				
ANR	132719	EqualityExpression	Z_TYPE ( result -> u . constant ) == IS_NULL		132656	0		==			
ANR	132720	CallExpression	Z_TYPE ( result -> u . constant )		132656	0					
ANR	132721	Callee	Z_TYPE		132656	0					
ANR	132722	Identifier	Z_TYPE		132656	0					
ANR	132723	ArgumentList	result -> u . constant		132656	1					
ANR	132724	Argument	result -> u . constant		132656	0					
ANR	132725	MemberAccess	result -> u . constant		132656	0					
ANR	132726	PtrMemberAccess	result -> u		132656	0					
ANR	132727	Identifier	result		132656	0					
ANR	132728	Identifier	u		132656	1					
ANR	132729	Identifier	constant		132656	1					
ANR	132730	Identifier	IS_NULL		132656	1					
ANR	132731	CompoundStatement		11:3:308:385	132656	1					
ANR	132732	IdentifierDeclStatement	"zend_op * opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL ) ;"	6573:3:193973:194050	132656	0	True				
ANR	132733	IdentifierDecl	"* opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		132656	0					
ANR	132734	IdentifierDeclType	zend_op *		132656	0					
ANR	132735	Identifier	opline		132656	1					
ANR	132736	AssignmentExpression	"* opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		132656	2		=			
ANR	132737	Identifier	opline		132656	0					
ANR	132738	CallExpression	"zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		132656	1					
ANR	132739	Callee	zend_emit_op_tmp		132656	0					
ANR	132740	Identifier	zend_emit_op_tmp		132656	0					
ANR	132741	ArgumentList	result		132656	1					
ANR	132742	Argument	result		132656	0					
ANR	132743	Identifier	result		132656	0					
ANR	132744	Argument	ZEND_FETCH_CLASS_NAME		132656	1					
ANR	132745	Identifier	ZEND_FETCH_CLASS_NAME		132656	0					
ANR	132746	Argument	NULL		132656	2					
ANR	132747	Identifier	NULL		132656	0					
ANR	132748	Argument	NULL		132656	3					
ANR	132749	Identifier	NULL		132656	0					
ANR	132750	ExpressionStatement	opline -> extended_value = zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) )	6574:3:194055:194134	132656	1	True				
ANR	132751	AssignmentExpression	opline -> extended_value = zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) )		132656	0		=			
ANR	132752	PtrMemberAccess	opline -> extended_value		132656	0					
ANR	132753	Identifier	opline		132656	0					
ANR	132754	Identifier	extended_value		132656	1					
ANR	132755	CallExpression	zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) )		132656	1					
ANR	132756	Callee	zend_get_class_fetch_type		132656	0					
ANR	132757	Identifier	zend_get_class_fetch_type		132656	0					
ANR	132758	ArgumentList	zend_ast_get_str ( class_ast )		132656	1					
ANR	132759	Argument	zend_ast_get_str ( class_ast )		132656	0					
ANR	132760	CallExpression	zend_ast_get_str ( class_ast )		132656	0					
ANR	132761	Callee	zend_ast_get_str		132656	0					
ANR	132762	Identifier	zend_ast_get_str		132656	0					
ANR	132763	ArgumentList	class_ast		132656	1					
ANR	132764	Argument	class_ast		132656	0					
ANR	132765	Identifier	class_ast		132656	0					
ANR	132766	ElseStatement	else		132656	0					
ANR	132767	CompoundStatement		13:9:480:480	132656	0					
ANR	132768	ExpressionStatement	result -> op_type = IS_CONST	6576:3:194150:194176	132656	0	True				
ANR	132769	AssignmentExpression	result -> op_type = IS_CONST		132656	0		=			
ANR	132770	PtrMemberAccess	result -> op_type		132656	0					
ANR	132771	Identifier	result		132656	0					
ANR	132772	Identifier	op_type		132656	1					
ANR	132773	Identifier	IS_CONST		132656	1					
ANR	132774	ReturnStatement	return ;	6578:2:194184:194190	132656	1	True				
ANR	132775	ExpressionStatement	zend_eval_const_expr ( & class_ast )	6581:1:194197:194229	132656	6	True				
ANR	132776	CallExpression	zend_eval_const_expr ( & class_ast )		132656	0					
ANR	132777	Callee	zend_eval_const_expr		132656	0					
ANR	132778	Identifier	zend_eval_const_expr		132656	0					
ANR	132779	ArgumentList	& class_ast		132656	1					
ANR	132780	Argument	& class_ast		132656	0					
ANR	132781	UnaryOperationExpression	& class_ast		132656	0					
ANR	132782	UnaryOperator	&		132656	0					
ANR	132783	Identifier	class_ast		132656	1					
ANR	132784	ExpressionStatement	zend_eval_const_expr ( & const_ast )	6582:1:194232:194264	132656	7	True				
ANR	132785	CallExpression	zend_eval_const_expr ( & const_ast )		132656	0					
ANR	132786	Callee	zend_eval_const_expr		132656	0					
ANR	132787	Identifier	zend_eval_const_expr		132656	0					
ANR	132788	ArgumentList	& const_ast		132656	1					
ANR	132789	Argument	& const_ast		132656	0					
ANR	132790	UnaryOperationExpression	& const_ast		132656	0					
ANR	132791	UnaryOperator	&		132656	0					
ANR	132792	Identifier	const_ast		132656	1					
ANR	132793	IfStatement	if ( class_ast -> kind == ZEND_AST_ZVAL )		132656	8					
ANR	132794	Condition	class_ast -> kind == ZEND_AST_ZVAL	6584:5:194272:194303	132656	0	True				
ANR	132795	EqualityExpression	class_ast -> kind == ZEND_AST_ZVAL		132656	0		==			
ANR	132796	PtrMemberAccess	class_ast -> kind		132656	0					
ANR	132797	Identifier	class_ast		132656	0					
ANR	132798	Identifier	kind		132656	1					
ANR	132799	Identifier	ZEND_AST_ZVAL		132656	1					
ANR	132800	CompoundStatement		22:39:641:641	132656	1					
ANR	132801	ExpressionStatement	resolved_name = zend_resolve_class_name_ast ( class_ast )	6585:2:194310:194364	132656	0	True				
ANR	132802	AssignmentExpression	resolved_name = zend_resolve_class_name_ast ( class_ast )		132656	0		=			
ANR	132803	Identifier	resolved_name		132656	0					
ANR	132804	CallExpression	zend_resolve_class_name_ast ( class_ast )		132656	1					
ANR	132805	Callee	zend_resolve_class_name_ast		132656	0					
ANR	132806	Identifier	zend_resolve_class_name_ast		132656	0					
ANR	132807	ArgumentList	class_ast		132656	1					
ANR	132808	Argument	class_ast		132656	0					
ANR	132809	Identifier	class_ast		132656	0					
ANR	132810	IfStatement	"if ( const_ast -> kind == ZEND_AST_ZVAL && zend_try_ct_eval_class_const ( & result -> u . constant , resolved_name , zend_ast_get_str ( const_ast ) ) )"		132656	1					
ANR	132811	Condition	"const_ast -> kind == ZEND_AST_ZVAL && zend_try_ct_eval_class_const ( & result -> u . constant , resolved_name , zend_ast_get_str ( const_ast ) )"	6586:6:194372:194500	132656	0	True				
ANR	132812	AndExpression	"const_ast -> kind == ZEND_AST_ZVAL && zend_try_ct_eval_class_const ( & result -> u . constant , resolved_name , zend_ast_get_str ( const_ast ) )"		132656	0		&&			
ANR	132813	EqualityExpression	const_ast -> kind == ZEND_AST_ZVAL		132656	0		==			
ANR	132814	PtrMemberAccess	const_ast -> kind		132656	0					
ANR	132815	Identifier	const_ast		132656	0					
ANR	132816	Identifier	kind		132656	1					
ANR	132817	Identifier	ZEND_AST_ZVAL		132656	1					
ANR	132818	CallExpression	"zend_try_ct_eval_class_const ( & result -> u . constant , resolved_name , zend_ast_get_str ( const_ast ) )"		132656	1					
ANR	132819	Callee	zend_try_ct_eval_class_const		132656	0					
ANR	132820	Identifier	zend_try_ct_eval_class_const		132656	0					
ANR	132821	ArgumentList	& result -> u . constant		132656	1					
ANR	132822	Argument	& result -> u . constant		132656	0					
ANR	132823	UnaryOperationExpression	& result -> u . constant		132656	0					
ANR	132824	UnaryOperator	&		132656	0					
ANR	132825	MemberAccess	result -> u . constant		132656	1					
ANR	132826	PtrMemberAccess	result -> u		132656	0					
ANR	132827	Identifier	result		132656	0					
ANR	132828	Identifier	u		132656	1					
ANR	132829	Identifier	constant		132656	1					
ANR	132830	Argument	resolved_name		132656	1					
ANR	132831	Identifier	resolved_name		132656	0					
ANR	132832	Argument	zend_ast_get_str ( const_ast )		132656	2					
ANR	132833	CallExpression	zend_ast_get_str ( const_ast )		132656	0					
ANR	132834	Callee	zend_ast_get_str		132656	0					
ANR	132835	Identifier	zend_ast_get_str		132656	0					
ANR	132836	ArgumentList	const_ast		132656	1					
ANR	132837	Argument	const_ast		132656	0					
ANR	132838	Identifier	const_ast		132656	0					
ANR	132839	CompoundStatement		24:137:838:838	132656	1					
ANR	132840	ExpressionStatement	result -> op_type = IS_CONST	6587:3:194508:194534	132656	0	True				
ANR	132841	AssignmentExpression	result -> op_type = IS_CONST		132656	0		=			
ANR	132842	PtrMemberAccess	result -> op_type		132656	0					
ANR	132843	Identifier	result		132656	0					
ANR	132844	Identifier	op_type		132656	1					
ANR	132845	Identifier	IS_CONST		132656	1					
ANR	132846	ExpressionStatement	zend_string_release ( resolved_name )	6588:3:194539:194573	132656	1	True				
ANR	132847	CallExpression	zend_string_release ( resolved_name )		132656	0					
ANR	132848	Callee	zend_string_release		132656	0					
ANR	132849	Identifier	zend_string_release		132656	0					
ANR	132850	ArgumentList	resolved_name		132656	1					
ANR	132851	Argument	resolved_name		132656	0					
ANR	132852	Identifier	resolved_name		132656	0					
ANR	132853	ReturnStatement	return ;	6589:3:194578:194584	132656	2	True				
ANR	132854	IfStatement	"if ( const_ast -> kind == ZEND_AST_ZVAL && zend_string_equals_literal_ci ( zend_ast_get_str ( const_ast ) , ""class"" ) )"		132656	9					
ANR	132855	Condition	"const_ast -> kind == ZEND_AST_ZVAL && zend_string_equals_literal_ci ( zend_ast_get_str ( const_ast ) , ""class"" )"	6592:5:194598:194700	132656	0	True				
ANR	132856	AndExpression	"const_ast -> kind == ZEND_AST_ZVAL && zend_string_equals_literal_ci ( zend_ast_get_str ( const_ast ) , ""class"" )"		132656	0		&&			
ANR	132857	EqualityExpression	const_ast -> kind == ZEND_AST_ZVAL		132656	0		==			
ANR	132858	PtrMemberAccess	const_ast -> kind		132656	0					
ANR	132859	Identifier	const_ast		132656	0					
ANR	132860	Identifier	kind		132656	1					
ANR	132861	Identifier	ZEND_AST_ZVAL		132656	1					
ANR	132862	CallExpression	"zend_string_equals_literal_ci ( zend_ast_get_str ( const_ast ) , ""class"" )"		132656	1					
ANR	132863	Callee	zend_string_equals_literal_ci		132656	0					
ANR	132864	Identifier	zend_string_equals_literal_ci		132656	0					
ANR	132865	ArgumentList	zend_ast_get_str ( const_ast )		132656	1					
ANR	132866	Argument	zend_ast_get_str ( const_ast )		132656	0					
ANR	132867	CallExpression	zend_ast_get_str ( const_ast )		132656	0					
ANR	132868	Callee	zend_ast_get_str		132656	0					
ANR	132869	Identifier	zend_ast_get_str		132656	0					
ANR	132870	ArgumentList	const_ast		132656	1					
ANR	132871	Argument	const_ast		132656	0					
ANR	132872	Identifier	const_ast		132656	0					
ANR	132873	Argument	"""class"""		132656	1					
ANR	132874	PrimaryExpression	"""class"""		132656	0					
ANR	132875	CompoundStatement		30:110:1038:1038	132656	1					
ANR	132876	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Dynamic class names are not allowed in compile-time ::class fetch"" )"	6593:2:194707:194815	132656	0	True				
ANR	132877	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Dynamic class names are not allowed in compile-time ::class fetch"" )"		132656	0					
ANR	132878	Callee	zend_error_noreturn		132656	0					
ANR	132879	Identifier	zend_error_noreturn		132656	0					
ANR	132880	ArgumentList	E_COMPILE_ERROR		132656	1					
ANR	132881	Argument	E_COMPILE_ERROR		132656	0					
ANR	132882	Identifier	E_COMPILE_ERROR		132656	0					
ANR	132883	Argument	"""Dynamic class names are not allowed in compile-time ::class fetch"""		132656	1					
ANR	132884	PrimaryExpression	"""Dynamic class names are not allowed in compile-time ::class fetch"""		132656	0					
ANR	132885	IfStatement	if ( zend_is_const_default_class_ref ( class_ast ) )		132656	10					
ANR	132886	Condition	zend_is_const_default_class_ref ( class_ast )	6597:5:194826:194867	132656	0	True				
ANR	132887	CallExpression	zend_is_const_default_class_ref ( class_ast )		132656	0					
ANR	132888	Callee	zend_is_const_default_class_ref		132656	0					
ANR	132889	Identifier	zend_is_const_default_class_ref		132656	0					
ANR	132890	ArgumentList	class_ast		132656	1					
ANR	132891	Argument	class_ast		132656	0					
ANR	132892	Identifier	class_ast		132656	0					
ANR	132893	CompoundStatement		35:49:1205:1205	132656	1					
ANR	132894	ExpressionStatement	class_node . op_type = IS_CONST	6598:2:194874:194903	132656	0	True				
ANR	132895	AssignmentExpression	class_node . op_type = IS_CONST		132656	0		=			
ANR	132896	MemberAccess	class_node . op_type		132656	0					
ANR	132897	Identifier	class_node		132656	0					
ANR	132898	Identifier	op_type		132656	1					
ANR	132899	Identifier	IS_CONST		132656	1					
ANR	132900	ExpressionStatement	"ZVAL_STR ( & class_node . u . constant , resolved_name )"	6599:2:194907:194954	132656	1	True				
ANR	132901	CallExpression	"ZVAL_STR ( & class_node . u . constant , resolved_name )"		132656	0					
ANR	132902	Callee	ZVAL_STR		132656	0					
ANR	132903	Identifier	ZVAL_STR		132656	0					
ANR	132904	ArgumentList	& class_node . u . constant		132656	1					
ANR	132905	Argument	& class_node . u . constant		132656	0					
ANR	132906	UnaryOperationExpression	& class_node . u . constant		132656	0					
ANR	132907	UnaryOperator	&		132656	0					
ANR	132908	MemberAccess	class_node . u . constant		132656	1					
ANR	132909	MemberAccess	class_node . u		132656	0					
ANR	132910	Identifier	class_node		132656	0					
ANR	132911	Identifier	u		132656	1					
ANR	132912	Identifier	constant		132656	1					
ANR	132913	Argument	resolved_name		132656	1					
ANR	132914	Identifier	resolved_name		132656	0					
ANR	132915	ElseStatement	else		132656	0					
ANR	132916	CompoundStatement		38:8:1299:1299	132656	0					
ANR	132917	IfStatement	if ( class_ast -> kind == ZEND_AST_ZVAL )		132656	0					
ANR	132918	Condition	class_ast -> kind == ZEND_AST_ZVAL	6601:6:194972:195003	132656	0	True				
ANR	132919	EqualityExpression	class_ast -> kind == ZEND_AST_ZVAL		132656	0		==			
ANR	132920	PtrMemberAccess	class_ast -> kind		132656	0					
ANR	132921	Identifier	class_ast		132656	0					
ANR	132922	Identifier	kind		132656	1					
ANR	132923	Identifier	ZEND_AST_ZVAL		132656	1					
ANR	132924	CompoundStatement		39:40:1341:1341	132656	1					
ANR	132925	ExpressionStatement	zend_string_release ( resolved_name )	6602:3:195011:195045	132656	0	True				
ANR	132926	CallExpression	zend_string_release ( resolved_name )		132656	0					
ANR	132927	Callee	zend_string_release		132656	0					
ANR	132928	Identifier	zend_string_release		132656	0					
ANR	132929	ArgumentList	resolved_name		132656	1					
ANR	132930	Argument	resolved_name		132656	0					
ANR	132931	Identifier	resolved_name		132656	0					
ANR	132932	ExpressionStatement	"zend_compile_class_ref ( & class_node , class_ast , 1 )"	6604:2:195053:195102	132656	1	True				
ANR	132933	CallExpression	"zend_compile_class_ref ( & class_node , class_ast , 1 )"		132656	0					
ANR	132934	Callee	zend_compile_class_ref		132656	0					
ANR	132935	Identifier	zend_compile_class_ref		132656	0					
ANR	132936	ArgumentList	& class_node		132656	1					
ANR	132937	Argument	& class_node		132656	0					
ANR	132938	UnaryOperationExpression	& class_node		132656	0					
ANR	132939	UnaryOperator	&		132656	0					
ANR	132940	Identifier	class_node		132656	1					
ANR	132941	Argument	class_ast		132656	1					
ANR	132942	Identifier	class_ast		132656	0					
ANR	132943	Argument	1		132656	2					
ANR	132944	PrimaryExpression	1		132656	0					
ANR	132945	ExpressionStatement	"zend_compile_expr ( & const_node , const_ast )"	6607:1:195109:195150	132656	11	True				
ANR	132946	CallExpression	"zend_compile_expr ( & const_node , const_ast )"		132656	0					
ANR	132947	Callee	zend_compile_expr		132656	0					
ANR	132948	Identifier	zend_compile_expr		132656	0					
ANR	132949	ArgumentList	& const_node		132656	1					
ANR	132950	Argument	& const_node		132656	0					
ANR	132951	UnaryOperationExpression	& const_node		132656	0					
ANR	132952	UnaryOperator	&		132656	0					
ANR	132953	Identifier	const_node		132656	1					
ANR	132954	Argument	const_ast		132656	1					
ANR	132955	Identifier	const_ast		132656	0					
ANR	132956	ExpressionStatement	"opline = zend_emit_op_tmp ( result , ZEND_FETCH_CONSTANT , NULL , & const_node )"	6609:1:195154:195227	132656	12	True				
ANR	132957	AssignmentExpression	"opline = zend_emit_op_tmp ( result , ZEND_FETCH_CONSTANT , NULL , & const_node )"		132656	0		=			
ANR	132958	Identifier	opline		132656	0					
ANR	132959	CallExpression	"zend_emit_op_tmp ( result , ZEND_FETCH_CONSTANT , NULL , & const_node )"		132656	1					
ANR	132960	Callee	zend_emit_op_tmp		132656	0					
ANR	132961	Identifier	zend_emit_op_tmp		132656	0					
ANR	132962	ArgumentList	result		132656	1					
ANR	132963	Argument	result		132656	0					
ANR	132964	Identifier	result		132656	0					
ANR	132965	Argument	ZEND_FETCH_CONSTANT		132656	1					
ANR	132966	Identifier	ZEND_FETCH_CONSTANT		132656	0					
ANR	132967	Argument	NULL		132656	2					
ANR	132968	Identifier	NULL		132656	0					
ANR	132969	Argument	& const_node		132656	3					
ANR	132970	UnaryOperationExpression	& const_node		132656	0					
ANR	132971	UnaryOperator	&		132656	0					
ANR	132972	Identifier	const_node		132656	1					
ANR	132973	ExpressionStatement	"zend_set_class_name_op1 ( opline , & class_node )"	6611:1:195231:195275	132656	13	True				
ANR	132974	CallExpression	"zend_set_class_name_op1 ( opline , & class_node )"		132656	0					
ANR	132975	Callee	zend_set_class_name_op1		132656	0					
ANR	132976	Identifier	zend_set_class_name_op1		132656	0					
ANR	132977	ArgumentList	opline		132656	1					
ANR	132978	Argument	opline		132656	0					
ANR	132979	Identifier	opline		132656	0					
ANR	132980	Argument	& class_node		132656	1					
ANR	132981	UnaryOperationExpression	& class_node		132656	0					
ANR	132982	UnaryOperator	&		132656	0					
ANR	132983	Identifier	class_node		132656	1					
ANR	132984	IfStatement	if ( opline -> op1_type == IS_CONST )		132656	14					
ANR	132985	Condition	opline -> op1_type == IS_CONST	6613:5:195283:195310	132656	0	True				
ANR	132986	EqualityExpression	opline -> op1_type == IS_CONST		132656	0		==			
ANR	132987	PtrMemberAccess	opline -> op1_type		132656	0					
ANR	132988	Identifier	opline		132656	0					
ANR	132989	Identifier	op1_type		132656	1					
ANR	132990	Identifier	IS_CONST		132656	1					
ANR	132991	CompoundStatement		51:35:1648:1648	132656	1					
ANR	132992	ExpressionStatement	zend_alloc_cache_slot ( opline -> op2 . constant )	6614:2:195317:195360	132656	0	True				
ANR	132993	CallExpression	zend_alloc_cache_slot ( opline -> op2 . constant )		132656	0					
ANR	132994	Callee	zend_alloc_cache_slot		132656	0					
ANR	132995	Identifier	zend_alloc_cache_slot		132656	0					
ANR	132996	ArgumentList	opline -> op2 . constant		132656	1					
ANR	132997	Argument	opline -> op2 . constant		132656	0					
ANR	132998	MemberAccess	opline -> op2 . constant		132656	0					
ANR	132999	PtrMemberAccess	opline -> op2		132656	0					
ANR	133000	Identifier	opline		132656	0					
ANR	133001	Identifier	op2		132656	1					
ANR	133002	Identifier	constant		132656	1					
ANR	133003	ElseStatement	else		132656	0					
ANR	133004	CompoundStatement		53:8:1705:1705	132656	0					
ANR	133005	ExpressionStatement	zend_alloc_polymorphic_cache_slot ( opline -> op2 . constant )	6616:2:195374:195429	132656	0	True				
ANR	133006	CallExpression	zend_alloc_polymorphic_cache_slot ( opline -> op2 . constant )		132656	0					
ANR	133007	Callee	zend_alloc_polymorphic_cache_slot		132656	0					
ANR	133008	Identifier	zend_alloc_polymorphic_cache_slot		132656	0					
ANR	133009	ArgumentList	opline -> op2 . constant		132656	1					
ANR	133010	Argument	opline -> op2 . constant		132656	0					
ANR	133011	MemberAccess	opline -> op2 . constant		132656	0					
ANR	133012	PtrMemberAccess	opline -> op2		132656	0					
ANR	133013	Identifier	opline		132656	0					
ANR	133014	Identifier	op2		132656	1					
ANR	133015	Identifier	constant		132656	1					
ANR	133016	ReturnType	void		132656	1					
ANR	133017	Identifier	zend_compile_class_const		132656	2					
ANR	133018	ParameterList	"znode * result , zend_ast * ast"		132656	3					
ANR	133019	Parameter	znode * result	6562:30:193624:193636	132656	0	True				
ANR	133020	ParameterType	znode *		132656	0					
ANR	133021	Identifier	result		132656	1					
ANR	133022	Parameter	zend_ast * ast	6562:45:193639:193651	132656	1	True				
ANR	133023	ParameterType	zend_ast *		132656	0					
ANR	133024	Identifier	ast		132656	1					
ANR	133025	CFGEntryNode	ENTRY		132656		True				
ANR	133026	CFGExitNode	EXIT		132656		True				
ANR	133027	Symbol	ast		132656						
ANR	133028	Symbol	const_ast -> kind		132656						
ANR	133029	Symbol	E_COMPILE_ERROR		132656						
ANR	133030	Symbol	& class_node		132656						
ANR	133031	Symbol	Z_TYPE		132656						
ANR	133032	Symbol	result -> u		132656						
ANR	133033	Symbol	opline -> extended_value		132656						
ANR	133034	Symbol	& const_node		132656						
ANR	133035	Symbol	opline		132656						
ANR	133036	Symbol	ZEND_AST_ZVAL		132656						
ANR	133037	Symbol	ZEND_FETCH_CONSTANT		132656						
ANR	133038	Symbol	class_node . u		132656						
ANR	133039	Symbol	IS_CONST		132656						
ANR	133040	Symbol	NULL		132656						
ANR	133041	Symbol	zend_try_compile_const_expr_resolve_class_name		132656						
ANR	133042	Symbol	opline -> op1_type		132656						
ANR	133043	Symbol	zend_string_equals_literal_ci		132656						
ANR	133044	Symbol	* const_ast		132656						
ANR	133045	Symbol	* ast -> child		132656						
ANR	133046	Symbol	ast -> child		132656						
ANR	133047	Symbol	zend_is_const_default_class_ref		132656						
ANR	133048	Symbol	zend_emit_op_tmp		132656						
ANR	133049	Symbol	opline -> op2		132656						
ANR	133050	Symbol	class_node		132656						
ANR	133051	Symbol	class_ast		132656						
ANR	133052	Symbol	result -> op_type		132656						
ANR	133053	Symbol	result		132656						
ANR	133054	Symbol	& class_ast		132656						
ANR	133055	Symbol	zend_try_ct_eval_class_const		132656						
ANR	133056	Symbol	class_node . op_type		132656						
ANR	133057	Symbol	& class_node . u . constant		132656						
ANR	133058	Symbol	* ast		132656						
ANR	133059	Symbol	zend_ast_get_str		132656						
ANR	133060	Symbol	IS_NULL		132656						
ANR	133061	Symbol	* result		132656						
ANR	133062	Symbol	ZEND_FETCH_CLASS_NAME		132656						
ANR	133063	Symbol	* * ast		132656						
ANR	133064	Symbol	& const_ast		132656						
ANR	133065	Symbol	& result -> u . constant		132656						
ANR	133066	Symbol	zend_get_class_fetch_type		132656						
ANR	133067	Symbol	* class_ast		132656						
ANR	133068	Symbol	& class_node . u		132656						
ANR	133069	Symbol	result -> u . constant		132656						
ANR	133070	Symbol	& result -> u		132656						
ANR	133071	Symbol	zend_resolve_class_name_ast		132656						
ANR	133072	Symbol	resolved_name		132656						
ANR	133073	Symbol	class_ast -> kind		132656						
ANR	133074	Symbol	* opline		132656						
ANR	133075	Symbol	const_ast		132656						
ANR	133076	Symbol	opline -> op2 . constant		132656						
ANR	133077	Symbol	const_node		132656						
ANR	133078	Function	zend_compile_resolve_class_name	6621:0:195447:196443							
ANR	133079	FunctionDef	"zend_compile_resolve_class_name (znode * result , zend_ast * ast)"		133078	0					
ANR	133080	CompoundStatement		6622:0:195524:196443	133078	0					
ANR	133081	IdentifierDeclStatement	zend_ast * name_ast = ast -> child [ 0 ] ;	6623:1:195527:195561	133078	0	True				
ANR	133082	IdentifierDecl	* name_ast = ast -> child [ 0 ]		133078	0					
ANR	133083	IdentifierDeclType	zend_ast *		133078	0					
ANR	133084	Identifier	name_ast		133078	1					
ANR	133085	AssignmentExpression	* name_ast = ast -> child [ 0 ]		133078	2		=			
ANR	133086	Identifier	name_ast		133078	0					
ANR	133087	ArrayIndexing	ast -> child [ 0 ]		133078	1					
ANR	133088	PtrMemberAccess	ast -> child		133078	0					
ANR	133089	Identifier	ast		133078	0					
ANR	133090	Identifier	child		133078	1					
ANR	133091	PrimaryExpression	0		133078	1					
ANR	133092	IdentifierDeclStatement	uint32_t fetch_type = zend_get_class_fetch_type ( zend_ast_get_str ( name_ast ) ) ;	6624:1:195564:195639	133078	1	True				
ANR	133093	IdentifierDecl	fetch_type = zend_get_class_fetch_type ( zend_ast_get_str ( name_ast ) )		133078	0					
ANR	133094	IdentifierDeclType	uint32_t		133078	0					
ANR	133095	Identifier	fetch_type		133078	1					
ANR	133096	AssignmentExpression	fetch_type = zend_get_class_fetch_type ( zend_ast_get_str ( name_ast ) )		133078	2		=			
ANR	133097	Identifier	fetch_type		133078	0					
ANR	133098	CallExpression	zend_get_class_fetch_type ( zend_ast_get_str ( name_ast ) )		133078	1					
ANR	133099	Callee	zend_get_class_fetch_type		133078	0					
ANR	133100	Identifier	zend_get_class_fetch_type		133078	0					
ANR	133101	ArgumentList	zend_ast_get_str ( name_ast )		133078	1					
ANR	133102	Argument	zend_ast_get_str ( name_ast )		133078	0					
ANR	133103	CallExpression	zend_ast_get_str ( name_ast )		133078	0					
ANR	133104	Callee	zend_ast_get_str		133078	0					
ANR	133105	Identifier	zend_ast_get_str		133078	0					
ANR	133106	ArgumentList	name_ast		133078	1					
ANR	133107	Argument	name_ast		133078	0					
ANR	133108	Identifier	name_ast		133078	0					
ANR	133109	ExpressionStatement	zend_ensure_valid_class_fetch_type ( fetch_type )	6625:1:195642:195688	133078	2	True				
ANR	133110	CallExpression	zend_ensure_valid_class_fetch_type ( fetch_type )		133078	0					
ANR	133111	Callee	zend_ensure_valid_class_fetch_type		133078	0					
ANR	133112	Identifier	zend_ensure_valid_class_fetch_type		133078	0					
ANR	133113	ArgumentList	fetch_type		133078	1					
ANR	133114	Argument	fetch_type		133078	0					
ANR	133115	Identifier	fetch_type		133078	0					
ANR	133116	SwitchStatement	switch ( fetch_type )		133078	3					
ANR	133117	Condition	fetch_type	6627:9:195700:195709	133078	0	True				
ANR	133118	Identifier	fetch_type		133078	0					
ANR	133119	CompoundStatement		6:21:187:187	133078	1					
ANR	133120	Label	case ZEND_FETCH_CLASS_SELF :	6628:2:195716:195742	133078	0	True				
ANR	133121	Identifier	ZEND_FETCH_CLASS_SELF		133078	0					
ANR	133122	IfStatement	if ( CG ( active_class_entry ) && zend_is_scope_known ( ) )		133078	1					
ANR	133123	Condition	CG ( active_class_entry ) && zend_is_scope_known ( )	6629:7:195751:195797	133078	0	True				
ANR	133124	AndExpression	CG ( active_class_entry ) && zend_is_scope_known ( )		133078	0		&&			
ANR	133125	CallExpression	CG ( active_class_entry )		133078	0					
ANR	133126	Callee	CG		133078	0					
ANR	133127	Identifier	CG		133078	0					
ANR	133128	ArgumentList	active_class_entry		133078	1					
ANR	133129	Argument	active_class_entry		133078	0					
ANR	133130	Identifier	active_class_entry		133078	0					
ANR	133131	CallExpression	zend_is_scope_known ( )		133078	1					
ANR	133132	Callee	zend_is_scope_known		133078	0					
ANR	133133	Identifier	zend_is_scope_known		133078	0					
ANR	133134	ArgumentList			133078	1					
ANR	133135	CompoundStatement		8:56:275:275	133078	1					
ANR	133136	ExpressionStatement	result -> op_type = IS_CONST	6630:4:195806:195832	133078	0	True				
ANR	133137	AssignmentExpression	result -> op_type = IS_CONST		133078	0		=			
ANR	133138	PtrMemberAccess	result -> op_type		133078	0					
ANR	133139	Identifier	result		133078	0					
ANR	133140	Identifier	op_type		133078	1					
ANR	133141	Identifier	IS_CONST		133078	1					
ANR	133142	ExpressionStatement	"ZVAL_STR_COPY ( & result -> u . constant , CG ( active_class_entry ) -> name )"	6631:4:195838:195902	133078	1	True				
ANR	133143	CallExpression	"ZVAL_STR_COPY ( & result -> u . constant , CG ( active_class_entry ) -> name )"		133078	0					
ANR	133144	Callee	ZVAL_STR_COPY		133078	0					
ANR	133145	Identifier	ZVAL_STR_COPY		133078	0					
ANR	133146	ArgumentList	& result -> u . constant		133078	1					
ANR	133147	Argument	& result -> u . constant		133078	0					
ANR	133148	UnaryOperationExpression	& result -> u . constant		133078	0					
ANR	133149	UnaryOperator	&		133078	0					
ANR	133150	MemberAccess	result -> u . constant		133078	1					
ANR	133151	PtrMemberAccess	result -> u		133078	0					
ANR	133152	Identifier	result		133078	0					
ANR	133153	Identifier	u		133078	1					
ANR	133154	Identifier	constant		133078	1					
ANR	133155	Argument	CG ( active_class_entry ) -> name		133078	1					
ANR	133156	PtrMemberAccess	CG ( active_class_entry ) -> name		133078	0					
ANR	133157	CallExpression	CG ( active_class_entry )		133078	0					
ANR	133158	Callee	CG		133078	0					
ANR	133159	Identifier	CG		133078	0					
ANR	133160	ArgumentList	active_class_entry		133078	1					
ANR	133161	Argument	active_class_entry		133078	0					
ANR	133162	Identifier	active_class_entry		133078	0					
ANR	133163	Identifier	name		133078	1					
ANR	133164	ElseStatement	else		133078	0					
ANR	133165	CompoundStatement		12:4:395:472	133078	0					
ANR	133166	IdentifierDeclStatement	"zend_op * opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL ) ;"	6633:4:195920:195997	133078	0	True				
ANR	133167	IdentifierDecl	"* opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		133078	0					
ANR	133168	IdentifierDeclType	zend_op *		133078	0					
ANR	133169	Identifier	opline		133078	1					
ANR	133170	AssignmentExpression	"* opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		133078	2		=			
ANR	133171	Identifier	opline		133078	0					
ANR	133172	CallExpression	"zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		133078	1					
ANR	133173	Callee	zend_emit_op_tmp		133078	0					
ANR	133174	Identifier	zend_emit_op_tmp		133078	0					
ANR	133175	ArgumentList	result		133078	1					
ANR	133176	Argument	result		133078	0					
ANR	133177	Identifier	result		133078	0					
ANR	133178	Argument	ZEND_FETCH_CLASS_NAME		133078	1					
ANR	133179	Identifier	ZEND_FETCH_CLASS_NAME		133078	0					
ANR	133180	Argument	NULL		133078	2					
ANR	133181	Identifier	NULL		133078	0					
ANR	133182	Argument	NULL		133078	3					
ANR	133183	Identifier	NULL		133078	0					
ANR	133184	ExpressionStatement	opline -> extended_value = fetch_type	6634:4:196003:196038	133078	1	True				
ANR	133185	AssignmentExpression	opline -> extended_value = fetch_type		133078	0		=			
ANR	133186	PtrMemberAccess	opline -> extended_value		133078	0					
ANR	133187	Identifier	opline		133078	0					
ANR	133188	Identifier	extended_value		133078	1					
ANR	133189	Identifier	fetch_type		133078	1					
ANR	133190	BreakStatement	break ;	6636:3:196048:196053	133078	2	True				
ANR	133191	Label	case ZEND_FETCH_CLASS_STATIC :	6637:2:196057:196085	133078	3	True				
ANR	133192	Identifier	ZEND_FETCH_CLASS_STATIC		133078	0					
ANR	133193	Label	case ZEND_FETCH_CLASS_PARENT :	6638:2:196089:196117	133078	4	True				
ANR	133194	Identifier	ZEND_FETCH_CLASS_PARENT		133078	0					
ANR	133195	CompoundStatement		19:4:603:680	133078	5					
ANR	133196	IdentifierDeclStatement	"zend_op * opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL ) ;"	6640:4:196128:196205	133078	0	True				
ANR	133197	IdentifierDecl	"* opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		133078	0					
ANR	133198	IdentifierDeclType	zend_op *		133078	0					
ANR	133199	Identifier	opline		133078	1					
ANR	133200	AssignmentExpression	"* opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		133078	2		=			
ANR	133201	Identifier	opline		133078	0					
ANR	133202	CallExpression	"zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		133078	1					
ANR	133203	Callee	zend_emit_op_tmp		133078	0					
ANR	133204	Identifier	zend_emit_op_tmp		133078	0					
ANR	133205	ArgumentList	result		133078	1					
ANR	133206	Argument	result		133078	0					
ANR	133207	Identifier	result		133078	0					
ANR	133208	Argument	ZEND_FETCH_CLASS_NAME		133078	1					
ANR	133209	Identifier	ZEND_FETCH_CLASS_NAME		133078	0					
ANR	133210	Argument	NULL		133078	2					
ANR	133211	Identifier	NULL		133078	0					
ANR	133212	Argument	NULL		133078	3					
ANR	133213	Identifier	NULL		133078	0					
ANR	133214	ExpressionStatement	opline -> extended_value = fetch_type	6641:4:196211:196246	133078	1	True				
ANR	133215	AssignmentExpression	opline -> extended_value = fetch_type		133078	0		=			
ANR	133216	PtrMemberAccess	opline -> extended_value		133078	0					
ANR	133217	Identifier	opline		133078	0					
ANR	133218	Identifier	extended_value		133078	1					
ANR	133219	Identifier	fetch_type		133078	1					
ANR	133220	BreakStatement	break ;	6643:3:196256:196261	133078	6	True				
ANR	133221	Label	case ZEND_FETCH_CLASS_DEFAULT :	6644:2:196265:196294	133078	7	True				
ANR	133222	Identifier	ZEND_FETCH_CLASS_DEFAULT		133078	0					
ANR	133223	ExpressionStatement	result -> op_type = IS_CONST	6645:3:196299:196325	133078	8	True				
ANR	133224	AssignmentExpression	result -> op_type = IS_CONST		133078	0		=			
ANR	133225	PtrMemberAccess	result -> op_type		133078	0					
ANR	133226	Identifier	result		133078	0					
ANR	133227	Identifier	op_type		133078	1					
ANR	133228	Identifier	IS_CONST		133078	1					
ANR	133229	ExpressionStatement	"ZVAL_STR ( & result -> u . constant , zend_resolve_class_name_ast ( name_ast ) )"	6646:3:196330:196398	133078	9	True				
ANR	133230	CallExpression	"ZVAL_STR ( & result -> u . constant , zend_resolve_class_name_ast ( name_ast ) )"		133078	0					
ANR	133231	Callee	ZVAL_STR		133078	0					
ANR	133232	Identifier	ZVAL_STR		133078	0					
ANR	133233	ArgumentList	& result -> u . constant		133078	1					
ANR	133234	Argument	& result -> u . constant		133078	0					
ANR	133235	UnaryOperationExpression	& result -> u . constant		133078	0					
ANR	133236	UnaryOperator	&		133078	0					
ANR	133237	MemberAccess	result -> u . constant		133078	1					
ANR	133238	PtrMemberAccess	result -> u		133078	0					
ANR	133239	Identifier	result		133078	0					
ANR	133240	Identifier	u		133078	1					
ANR	133241	Identifier	constant		133078	1					
ANR	133242	Argument	zend_resolve_class_name_ast ( name_ast )		133078	1					
ANR	133243	CallExpression	zend_resolve_class_name_ast ( name_ast )		133078	0					
ANR	133244	Callee	zend_resolve_class_name_ast		133078	0					
ANR	133245	Identifier	zend_resolve_class_name_ast		133078	0					
ANR	133246	ArgumentList	name_ast		133078	1					
ANR	133247	Argument	name_ast		133078	0					
ANR	133248	Identifier	name_ast		133078	0					
ANR	133249	BreakStatement	break ;	6647:3:196403:196408	133078	10	True				
ANR	133250	Statement	EMPTY_SWITCH_DEFAULT_CASE	6648:2:196412:196436	133078	11	True				
ANR	133251	Statement	(	6648:27:196437:196437	133078	12	True				
ANR	133252	Statement	)	6648:28:196438:196438	133078	13	True				
ANR	133253	ReturnType	void		133078	1					
ANR	133254	Identifier	zend_compile_resolve_class_name		133078	2					
ANR	133255	ParameterList	"znode * result , zend_ast * ast"		133078	3					
ANR	133256	Parameter	znode * result	6621:37:195484:195496	133078	0	True				
ANR	133257	ParameterType	znode *		133078	0					
ANR	133258	Identifier	result		133078	1					
ANR	133259	Parameter	zend_ast * ast	6621:52:195499:195511	133078	1	True				
ANR	133260	ParameterType	zend_ast *		133078	0					
ANR	133261	Identifier	ast		133078	1					
ANR	133262	CFGEntryNode	ENTRY		133078		True				
ANR	133263	CFGExitNode	EXIT		133078		True				
ANR	133264	Symbol	zend_emit_op_tmp		133078						
ANR	133265	Symbol	ast		133078						
ANR	133266	Symbol	active_class_entry		133078						
ANR	133267	Symbol	* CG		133078						
ANR	133268	Symbol	result -> op_type		133078						
ANR	133269	Symbol	result -> u		133078						
ANR	133270	Symbol	opline -> extended_value		133078						
ANR	133271	Symbol	result		133078						
ANR	133272	Symbol	* ast		133078						
ANR	133273	Symbol	zend_ast_get_str		133078						
ANR	133274	Symbol	opline		133078						
ANR	133275	Symbol	* result		133078						
ANR	133276	Symbol	ZEND_FETCH_CLASS_NAME		133078						
ANR	133277	Symbol	* * ast		133078						
ANR	133278	Symbol	& result -> u . constant		133078						
ANR	133279	Symbol	zend_get_class_fetch_type		133078						
ANR	133280	Symbol	zend_is_scope_known		133078						
ANR	133281	Symbol	fetch_type		133078						
ANR	133282	Symbol	IS_CONST		133078						
ANR	133283	Symbol	NULL		133078						
ANR	133284	Symbol	CG		133078						
ANR	133285	Symbol	& result -> u		133078						
ANR	133286	Symbol	zend_resolve_class_name_ast		133078						
ANR	133287	Symbol	* opline		133078						
ANR	133288	Symbol	name_ast		133078						
ANR	133289	Symbol	* ast -> child		133078						
ANR	133290	Symbol	CG ( active_class_entry ) -> name		133078						
ANR	133291	Symbol	ast -> child		133078						
ANR	133292	Function	zend_compile_rope_add	6653:0:196456:196940							
ANR	133293	FunctionDef	"zend_compile_rope_add (znode * result , uint32_t num , znode * elem_node)"		133292	0					
ANR	133294	CompoundStatement		6654:0:196551:196940	133292	0					
ANR	133295	IdentifierDeclStatement	zend_op * opline = get_next_op ( CG ( active_op_array ) ) ;	6655:1:196554:196604	133292	0	True				
ANR	133296	IdentifierDecl	* opline = get_next_op ( CG ( active_op_array ) )		133292	0					
ANR	133297	IdentifierDeclType	zend_op *		133292	0					
ANR	133298	Identifier	opline		133292	1					
ANR	133299	AssignmentExpression	* opline = get_next_op ( CG ( active_op_array ) )		133292	2		=			
ANR	133300	Identifier	opline		133292	0					
ANR	133301	CallExpression	get_next_op ( CG ( active_op_array ) )		133292	1					
ANR	133302	Callee	get_next_op		133292	0					
ANR	133303	Identifier	get_next_op		133292	0					
ANR	133304	ArgumentList	CG ( active_op_array )		133292	1					
ANR	133305	Argument	CG ( active_op_array )		133292	0					
ANR	133306	CallExpression	CG ( active_op_array )		133292	0					
ANR	133307	Callee	CG		133292	0					
ANR	133308	Identifier	CG		133292	0					
ANR	133309	ArgumentList	active_op_array		133292	1					
ANR	133310	Argument	active_op_array		133292	0					
ANR	133311	Identifier	active_op_array		133292	0					
ANR	133312	IfStatement	if ( num == 0 )		133292	1					
ANR	133313	Condition	num == 0	6657:5:196612:196619	133292	0	True				
ANR	133314	EqualityExpression	num == 0		133292	0		==			
ANR	133315	Identifier	num		133292	0					
ANR	133316	PrimaryExpression	0		133292	1					
ANR	133317	CompoundStatement		4:15:70:70	133292	1					
ANR	133318	ExpressionStatement	result -> op_type = IS_TMP_VAR	6658:2:196626:196654	133292	0	True				
ANR	133319	AssignmentExpression	result -> op_type = IS_TMP_VAR		133292	0		=			
ANR	133320	PtrMemberAccess	result -> op_type		133292	0					
ANR	133321	Identifier	result		133292	0					
ANR	133322	Identifier	op_type		133292	1					
ANR	133323	Identifier	IS_TMP_VAR		133292	1					
ANR	133324	ExpressionStatement	result -> u . op . var = - 1	6659:2:196658:196679	133292	1	True				
ANR	133325	AssignmentExpression	result -> u . op . var = - 1		133292	0		=			
ANR	133326	MemberAccess	result -> u . op . var		133292	0					
ANR	133327	MemberAccess	result -> u . op		133292	0					
ANR	133328	PtrMemberAccess	result -> u		133292	0					
ANR	133329	Identifier	result		133292	0					
ANR	133330	Identifier	u		133292	1					
ANR	133331	Identifier	op		133292	1					
ANR	133332	Identifier	var		133292	1					
ANR	133333	UnaryOperationExpression	- 1		133292	1					
ANR	133334	UnaryOperator	-		133292	0					
ANR	133335	PrimaryExpression	1		133292	1					
ANR	133336	ExpressionStatement	opline -> opcode = ZEND_ROPE_INIT	6660:2:196683:196714	133292	2	True				
ANR	133337	AssignmentExpression	opline -> opcode = ZEND_ROPE_INIT		133292	0		=			
ANR	133338	PtrMemberAccess	opline -> opcode		133292	0					
ANR	133339	Identifier	opline		133292	0					
ANR	133340	Identifier	opcode		133292	1					
ANR	133341	Identifier	ZEND_ROPE_INIT		133292	1					
ANR	133342	ExpressionStatement	SET_UNUSED ( opline -> op1 )	6661:2:196718:196741	133292	3	True				
ANR	133343	CallExpression	SET_UNUSED ( opline -> op1 )		133292	0					
ANR	133344	Callee	SET_UNUSED		133292	0					
ANR	133345	Identifier	SET_UNUSED		133292	0					
ANR	133346	ArgumentList	opline -> op1		133292	1					
ANR	133347	Argument	opline -> op1		133292	0					
ANR	133348	PtrMemberAccess	opline -> op1		133292	0					
ANR	133349	Identifier	opline		133292	0					
ANR	133350	Identifier	op1		133292	1					
ANR	133351	ElseStatement	else		133292	0					
ANR	133352	CompoundStatement		9:8:199:199	133292	0					
ANR	133353	ExpressionStatement	opline -> opcode = ZEND_ROPE_ADD	6663:2:196755:196785	133292	0	True				
ANR	133354	AssignmentExpression	opline -> opcode = ZEND_ROPE_ADD		133292	0		=			
ANR	133355	PtrMemberAccess	opline -> opcode		133292	0					
ANR	133356	Identifier	opline		133292	0					
ANR	133357	Identifier	opcode		133292	1					
ANR	133358	Identifier	ZEND_ROPE_ADD		133292	1					
ANR	133359	ExpressionStatement	"SET_NODE ( opline -> op1 , result )"	6664:2:196789:196818	133292	1	True				
ANR	133360	CallExpression	"SET_NODE ( opline -> op1 , result )"		133292	0					
ANR	133361	Callee	SET_NODE		133292	0					
ANR	133362	Identifier	SET_NODE		133292	0					
ANR	133363	ArgumentList	opline -> op1		133292	1					
ANR	133364	Argument	opline -> op1		133292	0					
ANR	133365	PtrMemberAccess	opline -> op1		133292	0					
ANR	133366	Identifier	opline		133292	0					
ANR	133367	Identifier	op1		133292	1					
ANR	133368	Argument	result		133292	1					
ANR	133369	Identifier	result		133292	0					
ANR	133370	ExpressionStatement	"SET_NODE ( opline -> op2 , elem_node )"	6666:1:196824:196856	133292	2	True				
ANR	133371	CallExpression	"SET_NODE ( opline -> op2 , elem_node )"		133292	0					
ANR	133372	Callee	SET_NODE		133292	0					
ANR	133373	Identifier	SET_NODE		133292	0					
ANR	133374	ArgumentList	opline -> op2		133292	1					
ANR	133375	Argument	opline -> op2		133292	0					
ANR	133376	PtrMemberAccess	opline -> op2		133292	0					
ANR	133377	Identifier	opline		133292	0					
ANR	133378	Identifier	op2		133292	1					
ANR	133379	Argument	elem_node		133292	1					
ANR	133380	Identifier	elem_node		133292	0					
ANR	133381	ExpressionStatement	"SET_NODE ( opline -> result , result )"	6667:1:196859:196891	133292	3	True				
ANR	133382	CallExpression	"SET_NODE ( opline -> result , result )"		133292	0					
ANR	133383	Callee	SET_NODE		133292	0					
ANR	133384	Identifier	SET_NODE		133292	0					
ANR	133385	ArgumentList	opline -> result		133292	1					
ANR	133386	Argument	opline -> result		133292	0					
ANR	133387	PtrMemberAccess	opline -> result		133292	0					
ANR	133388	Identifier	opline		133292	0					
ANR	133389	Identifier	result		133292	1					
ANR	133390	Argument	result		133292	1					
ANR	133391	Identifier	result		133292	0					
ANR	133392	ExpressionStatement	opline -> extended_value = num	6668:1:196894:196922	133292	4	True				
ANR	133393	AssignmentExpression	opline -> extended_value = num		133292	0		=			
ANR	133394	PtrMemberAccess	opline -> extended_value		133292	0					
ANR	133395	Identifier	opline		133292	0					
ANR	133396	Identifier	extended_value		133292	1					
ANR	133397	Identifier	num		133292	1					
ANR	133398	ReturnStatement	return opline ;	6669:1:196925:196938	133292	5	True				
ANR	133399	Identifier	opline		133292	0					
ANR	133400	ReturnType	static zend_op *		133292	1					
ANR	133401	Identifier	zend_compile_rope_add		133292	2					
ANR	133402	ParameterList	"znode * result , uint32_t num , znode * elem_node"		133292	3					
ANR	133403	Parameter	znode * result	6653:38:196494:196506	133292	0	True				
ANR	133404	ParameterType	znode *		133292	0					
ANR	133405	Identifier	result		133292	1					
ANR	133406	Parameter	uint32_t num	6653:53:196509:196520	133292	1	True				
ANR	133407	ParameterType	uint32_t		133292	0					
ANR	133408	Identifier	num		133292	1					
ANR	133409	Parameter	znode * elem_node	6653:67:196523:196538	133292	2	True				
ANR	133410	ParameterType	znode *		133292	0					
ANR	133411	Identifier	elem_node		133292	1					
ANR	133412	CFGEntryNode	ENTRY		133292		True				
ANR	133413	CFGExitNode	EXIT		133292		True				
ANR	133414	Symbol	opline -> op1		133292						
ANR	133415	Symbol	opline -> op2		133292						
ANR	133416	Symbol	ZEND_ROPE_ADD		133292						
ANR	133417	Symbol	get_next_op		133292						
ANR	133418	Symbol	CG		133292						
ANR	133419	Symbol	active_op_array		133292						
ANR	133420	Symbol	num		133292						
ANR	133421	Symbol	result -> u . op . var		133292						
ANR	133422	Symbol	result -> u . op		133292						
ANR	133423	Symbol	result -> op_type		133292						
ANR	133424	Symbol	result -> u		133292						
ANR	133425	Symbol	opline -> result		133292						
ANR	133426	Symbol	opline -> extended_value		133292						
ANR	133427	Symbol	result		133292						
ANR	133428	Symbol	elem_node		133292						
ANR	133429	Symbol	opline		133292						
ANR	133430	Symbol	* opline		133292						
ANR	133431	Symbol	* result		133292						
ANR	133432	Symbol	opline -> opcode		133292						
ANR	133433	Symbol	IS_TMP_VAR		133292						
ANR	133434	Symbol	ZEND_ROPE_INIT		133292						
ANR	133435	Function	zend_compile_encaps_list	6673:0:196953:200503							
ANR	133436	FunctionDef	"zend_compile_encaps_list (znode * result , zend_ast * ast)"		133435	0					
ANR	133437	CompoundStatement		6674:0:197030:200503	133435	0					
ANR	133438	IdentifierDeclStatement	"uint32_t i , j ;"	6675:1:197033:197046	133435	0	True				
ANR	133439	IdentifierDecl	i		133435	0					
ANR	133440	IdentifierDeclType	uint32_t		133435	0					
ANR	133441	Identifier	i		133435	1					
ANR	133442	IdentifierDecl	j		133435	1					
ANR	133443	IdentifierDeclType	uint32_t		133435	0					
ANR	133444	Identifier	j		133435	1					
ANR	133445	IdentifierDeclStatement	uint32_t rope_init_lineno = - 1 ;	6676:1:197049:197079	133435	1	True				
ANR	133446	IdentifierDecl	rope_init_lineno = - 1		133435	0					
ANR	133447	IdentifierDeclType	uint32_t		133435	0					
ANR	133448	Identifier	rope_init_lineno		133435	1					
ANR	133449	AssignmentExpression	rope_init_lineno = - 1		133435	2		=			
ANR	133450	Identifier	rope_init_lineno		133435	0					
ANR	133451	UnaryOperationExpression	- 1		133435	1					
ANR	133452	UnaryOperator	-		133435	0					
ANR	133453	PrimaryExpression	1		133435	1					
ANR	133454	IdentifierDeclStatement	"zend_op * opline = NULL , * init_opline ;"	6677:1:197082:197118	133435	2	True				
ANR	133455	IdentifierDecl	* opline = NULL		133435	0					
ANR	133456	IdentifierDeclType	zend_op *		133435	0					
ANR	133457	Identifier	opline		133435	1					
ANR	133458	AssignmentExpression	* opline = NULL		133435	2		=			
ANR	133459	Identifier	NULL		133435	0					
ANR	133460	Identifier	NULL		133435	1					
ANR	133461	IdentifierDecl	* init_opline		133435	1					
ANR	133462	IdentifierDeclType	zend_op *		133435	0					
ANR	133463	Identifier	init_opline		133435	1					
ANR	133464	IdentifierDeclStatement	"znode elem_node , last_const_node ;"	6678:1:197121:197153	133435	3	True				
ANR	133465	IdentifierDecl	elem_node		133435	0					
ANR	133466	IdentifierDeclType	znode		133435	0					
ANR	133467	Identifier	elem_node		133435	1					
ANR	133468	IdentifierDecl	last_const_node		133435	1					
ANR	133469	IdentifierDeclType	znode		133435	0					
ANR	133470	Identifier	last_const_node		133435	1					
ANR	133471	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	6679:1:197156:197200	133435	4	True				
ANR	133472	IdentifierDecl	* list = zend_ast_get_list ( ast )		133435	0					
ANR	133473	IdentifierDeclType	zend_ast_list *		133435	0					
ANR	133474	Identifier	list		133435	1					
ANR	133475	AssignmentExpression	* list = zend_ast_get_list ( ast )		133435	2		=			
ANR	133476	Identifier	list		133435	0					
ANR	133477	CallExpression	zend_ast_get_list ( ast )		133435	1					
ANR	133478	Callee	zend_ast_get_list		133435	0					
ANR	133479	Identifier	zend_ast_get_list		133435	0					
ANR	133480	ArgumentList	ast		133435	1					
ANR	133481	Argument	ast		133435	0					
ANR	133482	Identifier	ast		133435	0					
ANR	133483	ExpressionStatement	ZEND_ASSERT ( list -> children > 0 )	6681:1:197204:197235	133435	5	True				
ANR	133484	CallExpression	ZEND_ASSERT ( list -> children > 0 )		133435	0					
ANR	133485	Callee	ZEND_ASSERT		133435	0					
ANR	133486	Identifier	ZEND_ASSERT		133435	0					
ANR	133487	ArgumentList	list -> children > 0		133435	1					
ANR	133488	Argument	list -> children > 0		133435	0					
ANR	133489	RelationalExpression	list -> children > 0		133435	0		>			
ANR	133490	PtrMemberAccess	list -> children		133435	0					
ANR	133491	Identifier	list		133435	0					
ANR	133492	Identifier	children		133435	1					
ANR	133493	PrimaryExpression	0		133435	1					
ANR	133494	ExpressionStatement	j = 0	6683:1:197239:197244	133435	6	True				
ANR	133495	AssignmentExpression	j = 0		133435	0		=			
ANR	133496	Identifier	j		133435	0					
ANR	133497	PrimaryExpression	0		133435	1					
ANR	133498	ExpressionStatement	last_const_node . op_type = IS_UNUSED	6684:1:197247:197282	133435	7	True				
ANR	133499	AssignmentExpression	last_const_node . op_type = IS_UNUSED		133435	0		=			
ANR	133500	MemberAccess	last_const_node . op_type		133435	0					
ANR	133501	Identifier	last_const_node		133435	0					
ANR	133502	Identifier	op_type		133435	1					
ANR	133503	Identifier	IS_UNUSED		133435	1					
ANR	133504	ForStatement	for ( i = 0 ; i < list -> children ; i ++ )		133435	8					
ANR	133505	ForInit	i = 0 ;	6685:6:197290:197295	133435	0	True				
ANR	133506	AssignmentExpression	i = 0		133435	0		=			
ANR	133507	Identifier	i		133435	0					
ANR	133508	PrimaryExpression	0		133435	1					
ANR	133509	Condition	i < list -> children	6685:13:197297:197314	133435	1	True				
ANR	133510	RelationalExpression	i < list -> children		133435	0		<			
ANR	133511	Identifier	i		133435	0					
ANR	133512	PtrMemberAccess	list -> children		133435	1					
ANR	133513	Identifier	list		133435	0					
ANR	133514	Identifier	children		133435	1					
ANR	133515	PostIncDecOperationExpression	i ++	6685:33:197317:197319	133435	2	True				
ANR	133516	Identifier	i		133435	0					
ANR	133517	IncDec	++		133435	1					
ANR	133518	CompoundStatement		12:38:291:291	133435	3					
ANR	133519	ExpressionStatement	"zend_compile_expr ( & elem_node , list -> child [ i ] )"	6686:2:197326:197371	133435	0	True				
ANR	133520	CallExpression	"zend_compile_expr ( & elem_node , list -> child [ i ] )"		133435	0					
ANR	133521	Callee	zend_compile_expr		133435	0					
ANR	133522	Identifier	zend_compile_expr		133435	0					
ANR	133523	ArgumentList	& elem_node		133435	1					
ANR	133524	Argument	& elem_node		133435	0					
ANR	133525	UnaryOperationExpression	& elem_node		133435	0					
ANR	133526	UnaryOperator	&		133435	0					
ANR	133527	Identifier	elem_node		133435	1					
ANR	133528	Argument	list -> child [ i ]		133435	1					
ANR	133529	ArrayIndexing	list -> child [ i ]		133435	0					
ANR	133530	PtrMemberAccess	list -> child		133435	0					
ANR	133531	Identifier	list		133435	0					
ANR	133532	Identifier	child		133435	1					
ANR	133533	Identifier	i		133435	1					
ANR	133534	IfStatement	if ( elem_node . op_type == IS_CONST )		133435	1					
ANR	133535	Condition	elem_node . op_type == IS_CONST	6688:6:197380:197408	133435	0	True				
ANR	133536	EqualityExpression	elem_node . op_type == IS_CONST		133435	0		==			
ANR	133537	MemberAccess	elem_node . op_type		133435	0					
ANR	133538	Identifier	elem_node		133435	0					
ANR	133539	Identifier	op_type		133435	1					
ANR	133540	Identifier	IS_CONST		133435	1					
ANR	133541	CompoundStatement		15:37:380:380	133435	1					
ANR	133542	ExpressionStatement	convert_to_string ( & elem_node . u . constant )	6689:3:197416:197456	133435	0	True				
ANR	133543	CallExpression	convert_to_string ( & elem_node . u . constant )		133435	0					
ANR	133544	Callee	convert_to_string		133435	0					
ANR	133545	Identifier	convert_to_string		133435	0					
ANR	133546	ArgumentList	& elem_node . u . constant		133435	1					
ANR	133547	Argument	& elem_node . u . constant		133435	0					
ANR	133548	UnaryOperationExpression	& elem_node . u . constant		133435	0					
ANR	133549	UnaryOperator	&		133435	0					
ANR	133550	MemberAccess	elem_node . u . constant		133435	1					
ANR	133551	MemberAccess	elem_node . u		133435	0					
ANR	133552	Identifier	elem_node		133435	0					
ANR	133553	Identifier	u		133435	1					
ANR	133554	Identifier	constant		133435	1					
ANR	133555	IfStatement	if ( Z_STRLEN ( elem_node . u . constant ) == 0 )		133435	1					
ANR	133556	Condition	Z_STRLEN ( elem_node . u . constant ) == 0	6691:7:197466:197500	133435	0	True				
ANR	133557	EqualityExpression	Z_STRLEN ( elem_node . u . constant ) == 0		133435	0		==			
ANR	133558	CallExpression	Z_STRLEN ( elem_node . u . constant )		133435	0					
ANR	133559	Callee	Z_STRLEN		133435	0					
ANR	133560	Identifier	Z_STRLEN		133435	0					
ANR	133561	ArgumentList	elem_node . u . constant		133435	1					
ANR	133562	Argument	elem_node . u . constant		133435	0					
ANR	133563	MemberAccess	elem_node . u . constant		133435	0					
ANR	133564	MemberAccess	elem_node . u		133435	0					
ANR	133565	Identifier	elem_node		133435	0					
ANR	133566	Identifier	u		133435	1					
ANR	133567	Identifier	constant		133435	1					
ANR	133568	PrimaryExpression	0		133435	1					
ANR	133569	CompoundStatement		18:44:472:472	133435	1					
ANR	133570	ExpressionStatement	zval_ptr_dtor ( & elem_node . u . constant )	6692:4:197509:197545	133435	0	True				
ANR	133571	CallExpression	zval_ptr_dtor ( & elem_node . u . constant )		133435	0					
ANR	133572	Callee	zval_ptr_dtor		133435	0					
ANR	133573	Identifier	zval_ptr_dtor		133435	0					
ANR	133574	ArgumentList	& elem_node . u . constant		133435	1					
ANR	133575	Argument	& elem_node . u . constant		133435	0					
ANR	133576	UnaryOperationExpression	& elem_node . u . constant		133435	0					
ANR	133577	UnaryOperator	&		133435	0					
ANR	133578	MemberAccess	elem_node . u . constant		133435	1					
ANR	133579	MemberAccess	elem_node . u		133435	0					
ANR	133580	Identifier	elem_node		133435	0					
ANR	133581	Identifier	u		133435	1					
ANR	133582	Identifier	constant		133435	1					
ANR	133583	ElseStatement	else		133435	0					
ANR	133584	IfStatement	if ( last_const_node . op_type == IS_CONST )		133435	0					
ANR	133585	Condition	last_const_node . op_type == IS_CONST	6693:14:197561:197595	133435	0	True				
ANR	133586	EqualityExpression	last_const_node . op_type == IS_CONST		133435	0		==			
ANR	133587	MemberAccess	last_const_node . op_type		133435	0					
ANR	133588	Identifier	last_const_node		133435	0					
ANR	133589	Identifier	op_type		133435	1					
ANR	133590	Identifier	IS_CONST		133435	1					
ANR	133591	CompoundStatement		20:51:567:567	133435	1					
ANR	133592	ExpressionStatement	"concat_function ( & last_const_node . u . constant , & last_const_node . u . constant , & elem_node . u . constant )"	6694:4:197604:197700	133435	0	True				
ANR	133593	CallExpression	"concat_function ( & last_const_node . u . constant , & last_const_node . u . constant , & elem_node . u . constant )"		133435	0					
ANR	133594	Callee	concat_function		133435	0					
ANR	133595	Identifier	concat_function		133435	0					
ANR	133596	ArgumentList	& last_const_node . u . constant		133435	1					
ANR	133597	Argument	& last_const_node . u . constant		133435	0					
ANR	133598	UnaryOperationExpression	& last_const_node . u . constant		133435	0					
ANR	133599	UnaryOperator	&		133435	0					
ANR	133600	MemberAccess	last_const_node . u . constant		133435	1					
ANR	133601	MemberAccess	last_const_node . u		133435	0					
ANR	133602	Identifier	last_const_node		133435	0					
ANR	133603	Identifier	u		133435	1					
ANR	133604	Identifier	constant		133435	1					
ANR	133605	Argument	& last_const_node . u . constant		133435	1					
ANR	133606	UnaryOperationExpression	& last_const_node . u . constant		133435	0					
ANR	133607	UnaryOperator	&		133435	0					
ANR	133608	MemberAccess	last_const_node . u . constant		133435	1					
ANR	133609	MemberAccess	last_const_node . u		133435	0					
ANR	133610	Identifier	last_const_node		133435	0					
ANR	133611	Identifier	u		133435	1					
ANR	133612	Identifier	constant		133435	1					
ANR	133613	Argument	& elem_node . u . constant		133435	2					
ANR	133614	UnaryOperationExpression	& elem_node . u . constant		133435	0					
ANR	133615	UnaryOperator	&		133435	0					
ANR	133616	MemberAccess	elem_node . u . constant		133435	1					
ANR	133617	MemberAccess	elem_node . u		133435	0					
ANR	133618	Identifier	elem_node		133435	0					
ANR	133619	Identifier	u		133435	1					
ANR	133620	Identifier	constant		133435	1					
ANR	133621	ExpressionStatement	zval_ptr_dtor ( & elem_node . u . constant )	6695:4:197706:197742	133435	1	True				
ANR	133622	CallExpression	zval_ptr_dtor ( & elem_node . u . constant )		133435	0					
ANR	133623	Callee	zval_ptr_dtor		133435	0					
ANR	133624	Identifier	zval_ptr_dtor		133435	0					
ANR	133625	ArgumentList	& elem_node . u . constant		133435	1					
ANR	133626	Argument	& elem_node . u . constant		133435	0					
ANR	133627	UnaryOperationExpression	& elem_node . u . constant		133435	0					
ANR	133628	UnaryOperator	&		133435	0					
ANR	133629	MemberAccess	elem_node . u . constant		133435	1					
ANR	133630	MemberAccess	elem_node . u		133435	0					
ANR	133631	Identifier	elem_node		133435	0					
ANR	133632	Identifier	u		133435	1					
ANR	133633	Identifier	constant		133435	1					
ANR	133634	ElseStatement	else		133435	0					
ANR	133635	CompoundStatement		23:10:723:723	133435	0					
ANR	133636	ExpressionStatement	last_const_node . op_type = IS_CONST	6697:4:197760:197794	133435	0	True				
ANR	133637	AssignmentExpression	last_const_node . op_type = IS_CONST		133435	0		=			
ANR	133638	MemberAccess	last_const_node . op_type		133435	0					
ANR	133639	Identifier	last_const_node		133435	0					
ANR	133640	Identifier	op_type		133435	1					
ANR	133641	Identifier	IS_CONST		133435	1					
ANR	133642	ExpressionStatement	"ZVAL_COPY_VALUE ( & last_const_node . u . constant , & elem_node . u . constant )"	6698:4:197800:197867	133435	1	True				
ANR	133643	CallExpression	"ZVAL_COPY_VALUE ( & last_const_node . u . constant , & elem_node . u . constant )"		133435	0					
ANR	133644	Callee	ZVAL_COPY_VALUE		133435	0					
ANR	133645	Identifier	ZVAL_COPY_VALUE		133435	0					
ANR	133646	ArgumentList	& last_const_node . u . constant		133435	1					
ANR	133647	Argument	& last_const_node . u . constant		133435	0					
ANR	133648	UnaryOperationExpression	& last_const_node . u . constant		133435	0					
ANR	133649	UnaryOperator	&		133435	0					
ANR	133650	MemberAccess	last_const_node . u . constant		133435	1					
ANR	133651	MemberAccess	last_const_node . u		133435	0					
ANR	133652	Identifier	last_const_node		133435	0					
ANR	133653	Identifier	u		133435	1					
ANR	133654	Identifier	constant		133435	1					
ANR	133655	Argument	& elem_node . u . constant		133435	1					
ANR	133656	UnaryOperationExpression	& elem_node . u . constant		133435	0					
ANR	133657	UnaryOperator	&		133435	0					
ANR	133658	MemberAccess	elem_node . u . constant		133435	1					
ANR	133659	MemberAccess	elem_node . u		133435	0					
ANR	133660	Identifier	elem_node		133435	0					
ANR	133661	Identifier	u		133435	1					
ANR	133662	Identifier	constant		133435	1					
ANR	133663	ContinueStatement	continue ;	6700:3:197877:197885	133435	2	True				
ANR	133664	ElseStatement	else		133435	0					
ANR	133665	CompoundStatement		28:9:865:865	133435	0					
ANR	133666	IfStatement	if ( j == 0 )		133435	0					
ANR	133667	Condition	j == 0	6702:7:197905:197910	133435	0	True				
ANR	133668	EqualityExpression	j == 0		133435	0		==			
ANR	133669	Identifier	j		133435	0					
ANR	133670	PrimaryExpression	0		133435	1					
ANR	133671	CompoundStatement		29:15:882:882	133435	1					
ANR	133672	ExpressionStatement	rope_init_lineno = get_next_op_number ( CG ( active_op_array ) )	6703:4:197919:197977	133435	0	True				
ANR	133673	AssignmentExpression	rope_init_lineno = get_next_op_number ( CG ( active_op_array ) )		133435	0		=			
ANR	133674	Identifier	rope_init_lineno		133435	0					
ANR	133675	CallExpression	get_next_op_number ( CG ( active_op_array ) )		133435	1					
ANR	133676	Callee	get_next_op_number		133435	0					
ANR	133677	Identifier	get_next_op_number		133435	0					
ANR	133678	ArgumentList	CG ( active_op_array )		133435	1					
ANR	133679	Argument	CG ( active_op_array )		133435	0					
ANR	133680	CallExpression	CG ( active_op_array )		133435	0					
ANR	133681	Callee	CG		133435	0					
ANR	133682	Identifier	CG		133435	0					
ANR	133683	ArgumentList	active_op_array		133435	1					
ANR	133684	Argument	active_op_array		133435	0					
ANR	133685	Identifier	active_op_array		133435	0					
ANR	133686	IfStatement	if ( last_const_node . op_type == IS_CONST )		133435	1					
ANR	133687	Condition	last_const_node . op_type == IS_CONST	6705:7:197991:198025	133435	0	True				
ANR	133688	EqualityExpression	last_const_node . op_type == IS_CONST		133435	0		==			
ANR	133689	MemberAccess	last_const_node . op_type		133435	0					
ANR	133690	Identifier	last_const_node		133435	0					
ANR	133691	Identifier	op_type		133435	1					
ANR	133692	Identifier	IS_CONST		133435	1					
ANR	133693	CompoundStatement		32:44:997:997	133435	1					
ANR	133694	ExpressionStatement	"zend_compile_rope_add ( result , j ++ , & last_const_node )"	6706:4:198034:198086	133435	0	True				
ANR	133695	CallExpression	"zend_compile_rope_add ( result , j ++ , & last_const_node )"		133435	0					
ANR	133696	Callee	zend_compile_rope_add		133435	0					
ANR	133697	Identifier	zend_compile_rope_add		133435	0					
ANR	133698	ArgumentList	result		133435	1					
ANR	133699	Argument	result		133435	0					
ANR	133700	Identifier	result		133435	0					
ANR	133701	Argument	j ++		133435	1					
ANR	133702	PostIncDecOperationExpression	j ++		133435	0					
ANR	133703	Identifier	j		133435	0					
ANR	133704	IncDec	++		133435	1					
ANR	133705	Argument	& last_const_node		133435	2					
ANR	133706	UnaryOperationExpression	& last_const_node		133435	0					
ANR	133707	UnaryOperator	&		133435	0					
ANR	133708	Identifier	last_const_node		133435	1					
ANR	133709	ExpressionStatement	last_const_node . op_type = IS_UNUSED	6707:4:198092:198127	133435	1	True				
ANR	133710	AssignmentExpression	last_const_node . op_type = IS_UNUSED		133435	0		=			
ANR	133711	MemberAccess	last_const_node . op_type		133435	0					
ANR	133712	Identifier	last_const_node		133435	0					
ANR	133713	Identifier	op_type		133435	1					
ANR	133714	Identifier	IS_UNUSED		133435	1					
ANR	133715	ExpressionStatement	"opline = zend_compile_rope_add ( result , j ++ , & elem_node )"	6709:3:198137:198192	133435	2	True				
ANR	133716	AssignmentExpression	"opline = zend_compile_rope_add ( result , j ++ , & elem_node )"		133435	0		=			
ANR	133717	Identifier	opline		133435	0					
ANR	133718	CallExpression	"zend_compile_rope_add ( result , j ++ , & elem_node )"		133435	1					
ANR	133719	Callee	zend_compile_rope_add		133435	0					
ANR	133720	Identifier	zend_compile_rope_add		133435	0					
ANR	133721	ArgumentList	result		133435	1					
ANR	133722	Argument	result		133435	0					
ANR	133723	Identifier	result		133435	0					
ANR	133724	Argument	j ++		133435	1					
ANR	133725	PostIncDecOperationExpression	j ++		133435	0					
ANR	133726	Identifier	j		133435	0					
ANR	133727	IncDec	++		133435	1					
ANR	133728	Argument	& elem_node		133435	2					
ANR	133729	UnaryOperationExpression	& elem_node		133435	0					
ANR	133730	UnaryOperator	&		133435	0					
ANR	133731	Identifier	elem_node		133435	1					
ANR	133732	IfStatement	if ( j == 0 )		133435	9					
ANR	133733	Condition	j == 0	6713:5:198207:198212	133435	0	True				
ANR	133734	EqualityExpression	j == 0		133435	0		==			
ANR	133735	Identifier	j		133435	0					
ANR	133736	PrimaryExpression	0		133435	1					
ANR	133737	CompoundStatement		40:13:1184:1184	133435	1					
ANR	133738	ExpressionStatement	result -> op_type = IS_CONST	6714:2:198219:198245	133435	0	True				
ANR	133739	AssignmentExpression	result -> op_type = IS_CONST		133435	0		=			
ANR	133740	PtrMemberAccess	result -> op_type		133435	0					
ANR	133741	Identifier	result		133435	0					
ANR	133742	Identifier	op_type		133435	1					
ANR	133743	Identifier	IS_CONST		133435	1					
ANR	133744	IfStatement	if ( last_const_node . op_type == IS_CONST )		133435	1					
ANR	133745	Condition	last_const_node . op_type == IS_CONST	6715:6:198253:198287	133435	0	True				
ANR	133746	EqualityExpression	last_const_node . op_type == IS_CONST		133435	0		==			
ANR	133747	MemberAccess	last_const_node . op_type		133435	0					
ANR	133748	Identifier	last_const_node		133435	0					
ANR	133749	Identifier	op_type		133435	1					
ANR	133750	Identifier	IS_CONST		133435	1					
ANR	133751	CompoundStatement		42:43:1259:1259	133435	1					
ANR	133752	ExpressionStatement	"ZVAL_COPY_VALUE ( & result -> u . constant , & last_const_node . u . constant )"	6716:3:198295:198360	133435	0	True				
ANR	133753	CallExpression	"ZVAL_COPY_VALUE ( & result -> u . constant , & last_const_node . u . constant )"		133435	0					
ANR	133754	Callee	ZVAL_COPY_VALUE		133435	0					
ANR	133755	Identifier	ZVAL_COPY_VALUE		133435	0					
ANR	133756	ArgumentList	& result -> u . constant		133435	1					
ANR	133757	Argument	& result -> u . constant		133435	0					
ANR	133758	UnaryOperationExpression	& result -> u . constant		133435	0					
ANR	133759	UnaryOperator	&		133435	0					
ANR	133760	MemberAccess	result -> u . constant		133435	1					
ANR	133761	PtrMemberAccess	result -> u		133435	0					
ANR	133762	Identifier	result		133435	0					
ANR	133763	Identifier	u		133435	1					
ANR	133764	Identifier	constant		133435	1					
ANR	133765	Argument	& last_const_node . u . constant		133435	1					
ANR	133766	UnaryOperationExpression	& last_const_node . u . constant		133435	0					
ANR	133767	UnaryOperator	&		133435	0					
ANR	133768	MemberAccess	last_const_node . u . constant		133435	1					
ANR	133769	MemberAccess	last_const_node . u		133435	0					
ANR	133770	Identifier	last_const_node		133435	0					
ANR	133771	Identifier	u		133435	1					
ANR	133772	Identifier	constant		133435	1					
ANR	133773	ElseStatement	else		133435	0					
ANR	133774	CompoundStatement		44:9:1340:1340	133435	0					
ANR	133775	ExpressionStatement	ZVAL_EMPTY_STRING ( & result -> u . constant )	6718:3:198376:198414	133435	0	True				
ANR	133776	CallExpression	ZVAL_EMPTY_STRING ( & result -> u . constant )		133435	0					
ANR	133777	Callee	ZVAL_EMPTY_STRING		133435	0					
ANR	133778	Identifier	ZVAL_EMPTY_STRING		133435	0					
ANR	133779	ArgumentList	& result -> u . constant		133435	1					
ANR	133780	Argument	& result -> u . constant		133435	0					
ANR	133781	UnaryOperationExpression	& result -> u . constant		133435	0					
ANR	133782	UnaryOperator	&		133435	0					
ANR	133783	MemberAccess	result -> u . constant		133435	1					
ANR	133784	PtrMemberAccess	result -> u		133435	0					
ANR	133785	Identifier	result		133435	0					
ANR	133786	Identifier	u		133435	1					
ANR	133787	Identifier	constant		133435	1					
ANR	133788	ReturnStatement	return ;	6721:2:198444:198450	133435	2	True				
ANR	133789	ElseStatement	else		133435	0					
ANR	133790	IfStatement	if ( last_const_node . op_type == IS_CONST )		133435	0					
ANR	133791	Condition	last_const_node . op_type == IS_CONST	6722:12:198464:198498	133435	0	True				
ANR	133792	EqualityExpression	last_const_node . op_type == IS_CONST		133435	0		==			
ANR	133793	MemberAccess	last_const_node . op_type		133435	0					
ANR	133794	Identifier	last_const_node		133435	0					
ANR	133795	Identifier	op_type		133435	1					
ANR	133796	Identifier	IS_CONST		133435	1					
ANR	133797	CompoundStatement		49:49:1470:1470	133435	1					
ANR	133798	ExpressionStatement	"opline = zend_compile_rope_add ( result , j ++ , & last_const_node )"	6723:2:198505:198566	133435	0	True				
ANR	133799	AssignmentExpression	"opline = zend_compile_rope_add ( result , j ++ , & last_const_node )"		133435	0		=			
ANR	133800	Identifier	opline		133435	0					
ANR	133801	CallExpression	"zend_compile_rope_add ( result , j ++ , & last_const_node )"		133435	1					
ANR	133802	Callee	zend_compile_rope_add		133435	0					
ANR	133803	Identifier	zend_compile_rope_add		133435	0					
ANR	133804	ArgumentList	result		133435	1					
ANR	133805	Argument	result		133435	0					
ANR	133806	Identifier	result		133435	0					
ANR	133807	Argument	j ++		133435	1					
ANR	133808	PostIncDecOperationExpression	j ++		133435	0					
ANR	133809	Identifier	j		133435	0					
ANR	133810	IncDec	++		133435	1					
ANR	133811	Argument	& last_const_node		133435	2					
ANR	133812	UnaryOperationExpression	& last_const_node		133435	0					
ANR	133813	UnaryOperator	&		133435	0					
ANR	133814	Identifier	last_const_node		133435	1					
ANR	133815	ExpressionStatement	init_opline = CG ( active_op_array ) -> opcodes + rope_init_lineno	6725:1:198572:198633	133435	10	True				
ANR	133816	AssignmentExpression	init_opline = CG ( active_op_array ) -> opcodes + rope_init_lineno		133435	0		=			
ANR	133817	Identifier	init_opline		133435	0					
ANR	133818	AdditiveExpression	CG ( active_op_array ) -> opcodes + rope_init_lineno		133435	1		+			
ANR	133819	PtrMemberAccess	CG ( active_op_array ) -> opcodes		133435	0					
ANR	133820	CallExpression	CG ( active_op_array )		133435	0					
ANR	133821	Callee	CG		133435	0					
ANR	133822	Identifier	CG		133435	0					
ANR	133823	ArgumentList	active_op_array		133435	1					
ANR	133824	Argument	active_op_array		133435	0					
ANR	133825	Identifier	active_op_array		133435	0					
ANR	133826	Identifier	opcodes		133435	1					
ANR	133827	Identifier	rope_init_lineno		133435	1					
ANR	133828	IfStatement	if ( j == 1 )		133435	11					
ANR	133829	Condition	j == 1	6726:5:198640:198645	133435	0	True				
ANR	133830	EqualityExpression	j == 1		133435	0		==			
ANR	133831	Identifier	j		133435	0					
ANR	133832	PrimaryExpression	1		133435	1					
ANR	133833	CompoundStatement		53:13:1617:1617	133435	1					
ANR	133834	IfStatement	if ( opline -> op2_type == IS_CONST )		133435	0					
ANR	133835	Condition	opline -> op2_type == IS_CONST	6727:6:198656:198683	133435	0	True				
ANR	133836	EqualityExpression	opline -> op2_type == IS_CONST		133435	0		==			
ANR	133837	PtrMemberAccess	opline -> op2_type		133435	0					
ANR	133838	Identifier	opline		133435	0					
ANR	133839	Identifier	op2_type		133435	1					
ANR	133840	Identifier	IS_CONST		133435	1					
ANR	133841	CompoundStatement		54:36:1655:1655	133435	1					
ANR	133842	ExpressionStatement	"GET_NODE ( result , opline -> op2 )"	6728:3:198691:198720	133435	0	True				
ANR	133843	CallExpression	"GET_NODE ( result , opline -> op2 )"		133435	0					
ANR	133844	Callee	GET_NODE		133435	0					
ANR	133845	Identifier	GET_NODE		133435	0					
ANR	133846	ArgumentList	result		133435	1					
ANR	133847	Argument	result		133435	0					
ANR	133848	Identifier	result		133435	0					
ANR	133849	Argument	opline -> op2		133435	1					
ANR	133850	PtrMemberAccess	opline -> op2		133435	0					
ANR	133851	Identifier	opline		133435	0					
ANR	133852	Identifier	op2		133435	1					
ANR	133853	ExpressionStatement	MAKE_NOP ( opline )	6729:3:198725:198741	133435	1	True				
ANR	133854	CallExpression	MAKE_NOP ( opline )		133435	0					
ANR	133855	Callee	MAKE_NOP		133435	0					
ANR	133856	Identifier	MAKE_NOP		133435	0					
ANR	133857	ArgumentList	opline		133435	1					
ANR	133858	Argument	opline		133435	0					
ANR	133859	Identifier	opline		133435	0					
ANR	133860	ElseStatement	else		133435	0					
ANR	133861	CompoundStatement		57:9:1721:1721	133435	0					
ANR	133862	ExpressionStatement	opline -> opcode = ZEND_CAST	6731:3:198757:198783	133435	0	True				
ANR	133863	AssignmentExpression	opline -> opcode = ZEND_CAST		133435	0		=			
ANR	133864	PtrMemberAccess	opline -> opcode		133435	0					
ANR	133865	Identifier	opline		133435	0					
ANR	133866	Identifier	opcode		133435	1					
ANR	133867	Identifier	ZEND_CAST		133435	1					
ANR	133868	ExpressionStatement	opline -> extended_value = IS_STRING	6732:3:198788:198822	133435	1	True				
ANR	133869	AssignmentExpression	opline -> extended_value = IS_STRING		133435	0		=			
ANR	133870	PtrMemberAccess	opline -> extended_value		133435	0					
ANR	133871	Identifier	opline		133435	0					
ANR	133872	Identifier	extended_value		133435	1					
ANR	133873	Identifier	IS_STRING		133435	1					
ANR	133874	ExpressionStatement	opline -> op1_type = opline -> op2_type	6733:3:198827:198862	133435	2	True				
ANR	133875	AssignmentExpression	opline -> op1_type = opline -> op2_type		133435	0		=			
ANR	133876	PtrMemberAccess	opline -> op1_type		133435	0					
ANR	133877	Identifier	opline		133435	0					
ANR	133878	Identifier	op1_type		133435	1					
ANR	133879	PtrMemberAccess	opline -> op2_type		133435	1					
ANR	133880	Identifier	opline		133435	0					
ANR	133881	Identifier	op2_type		133435	1					
ANR	133882	ExpressionStatement	opline -> op1 = opline -> op2	6734:3:198867:198892	133435	3	True				
ANR	133883	AssignmentExpression	opline -> op1 = opline -> op2		133435	0		=			
ANR	133884	PtrMemberAccess	opline -> op1		133435	0					
ANR	133885	Identifier	opline		133435	0					
ANR	133886	Identifier	op1		133435	1					
ANR	133887	PtrMemberAccess	opline -> op2		133435	1					
ANR	133888	Identifier	opline		133435	0					
ANR	133889	Identifier	op2		133435	1					
ANR	133890	ExpressionStatement	opline -> result_type = IS_TMP_VAR	6735:3:198897:198929	133435	4	True				
ANR	133891	AssignmentExpression	opline -> result_type = IS_TMP_VAR		133435	0		=			
ANR	133892	PtrMemberAccess	opline -> result_type		133435	0					
ANR	133893	Identifier	opline		133435	0					
ANR	133894	Identifier	result_type		133435	1					
ANR	133895	Identifier	IS_TMP_VAR		133435	1					
ANR	133896	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6736:3:198934:198998	133435	5	True				
ANR	133897	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		133435	0		=			
ANR	133898	MemberAccess	opline -> result . var		133435	0					
ANR	133899	PtrMemberAccess	opline -> result		133435	0					
ANR	133900	Identifier	opline		133435	0					
ANR	133901	Identifier	result		133435	1					
ANR	133902	Identifier	var		133435	1					
ANR	133903	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		133435	1					
ANR	133904	Callee	get_temporary_variable		133435	0					
ANR	133905	Identifier	get_temporary_variable		133435	0					
ANR	133906	ArgumentList	CG ( active_op_array )		133435	1					
ANR	133907	Argument	CG ( active_op_array )		133435	0					
ANR	133908	CallExpression	CG ( active_op_array )		133435	0					
ANR	133909	Callee	CG		133435	0					
ANR	133910	Identifier	CG		133435	0					
ANR	133911	ArgumentList	active_op_array		133435	1					
ANR	133912	Argument	active_op_array		133435	0					
ANR	133913	Identifier	active_op_array		133435	0					
ANR	133914	ExpressionStatement	SET_UNUSED ( opline -> op2 )	6737:3:199003:199026	133435	6	True				
ANR	133915	CallExpression	SET_UNUSED ( opline -> op2 )		133435	0					
ANR	133916	Callee	SET_UNUSED		133435	0					
ANR	133917	Identifier	SET_UNUSED		133435	0					
ANR	133918	ArgumentList	opline -> op2		133435	1					
ANR	133919	Argument	opline -> op2		133435	0					
ANR	133920	PtrMemberAccess	opline -> op2		133435	0					
ANR	133921	Identifier	opline		133435	0					
ANR	133922	Identifier	op2		133435	1					
ANR	133923	ExpressionStatement	"GET_NODE ( result , opline -> result )"	6738:3:199031:199063	133435	7	True				
ANR	133924	CallExpression	"GET_NODE ( result , opline -> result )"		133435	0					
ANR	133925	Callee	GET_NODE		133435	0					
ANR	133926	Identifier	GET_NODE		133435	0					
ANR	133927	ArgumentList	result		133435	1					
ANR	133928	Argument	result		133435	0					
ANR	133929	Identifier	result		133435	0					
ANR	133930	Argument	opline -> result		133435	1					
ANR	133931	PtrMemberAccess	opline -> result		133435	0					
ANR	133932	Identifier	opline		133435	0					
ANR	133933	Identifier	result		133435	1					
ANR	133934	ElseStatement	else		133435	0					
ANR	133935	IfStatement	if ( j == 2 )		133435	0					
ANR	133936	Condition	j == 2	6740:12:199081:199086	133435	0	True				
ANR	133937	EqualityExpression	j == 2		133435	0		==			
ANR	133938	Identifier	j		133435	0					
ANR	133939	PrimaryExpression	2		133435	1					
ANR	133940	CompoundStatement		67:20:2058:2058	133435	1					
ANR	133941	ExpressionStatement	opline -> opcode = ZEND_FAST_CONCAT	6741:2:199093:199126	133435	0	True				
ANR	133942	AssignmentExpression	opline -> opcode = ZEND_FAST_CONCAT		133435	0		=			
ANR	133943	PtrMemberAccess	opline -> opcode		133435	0					
ANR	133944	Identifier	opline		133435	0					
ANR	133945	Identifier	opcode		133435	1					
ANR	133946	Identifier	ZEND_FAST_CONCAT		133435	1					
ANR	133947	ExpressionStatement	opline -> extended_value = 0	6742:2:199130:199156	133435	1	True				
ANR	133948	AssignmentExpression	opline -> extended_value = 0		133435	0		=			
ANR	133949	PtrMemberAccess	opline -> extended_value		133435	0					
ANR	133950	Identifier	opline		133435	0					
ANR	133951	Identifier	extended_value		133435	1					
ANR	133952	PrimaryExpression	0		133435	1					
ANR	133953	ExpressionStatement	opline -> op1_type = init_opline -> op2_type	6743:2:199160:199200	133435	2	True				
ANR	133954	AssignmentExpression	opline -> op1_type = init_opline -> op2_type		133435	0		=			
ANR	133955	PtrMemberAccess	opline -> op1_type		133435	0					
ANR	133956	Identifier	opline		133435	0					
ANR	133957	Identifier	op1_type		133435	1					
ANR	133958	PtrMemberAccess	init_opline -> op2_type		133435	1					
ANR	133959	Identifier	init_opline		133435	0					
ANR	133960	Identifier	op2_type		133435	1					
ANR	133961	ExpressionStatement	opline -> op1 = init_opline -> op2	6744:2:199204:199234	133435	3	True				
ANR	133962	AssignmentExpression	opline -> op1 = init_opline -> op2		133435	0		=			
ANR	133963	PtrMemberAccess	opline -> op1		133435	0					
ANR	133964	Identifier	opline		133435	0					
ANR	133965	Identifier	op1		133435	1					
ANR	133966	PtrMemberAccess	init_opline -> op2		133435	1					
ANR	133967	Identifier	init_opline		133435	0					
ANR	133968	Identifier	op2		133435	1					
ANR	133969	ExpressionStatement	opline -> result_type = IS_TMP_VAR	6745:2:199238:199270	133435	4	True				
ANR	133970	AssignmentExpression	opline -> result_type = IS_TMP_VAR		133435	0		=			
ANR	133971	PtrMemberAccess	opline -> result_type		133435	0					
ANR	133972	Identifier	opline		133435	0					
ANR	133973	Identifier	result_type		133435	1					
ANR	133974	Identifier	IS_TMP_VAR		133435	1					
ANR	133975	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6746:2:199274:199338	133435	5	True				
ANR	133976	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		133435	0		=			
ANR	133977	MemberAccess	opline -> result . var		133435	0					
ANR	133978	PtrMemberAccess	opline -> result		133435	0					
ANR	133979	Identifier	opline		133435	0					
ANR	133980	Identifier	result		133435	1					
ANR	133981	Identifier	var		133435	1					
ANR	133982	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		133435	1					
ANR	133983	Callee	get_temporary_variable		133435	0					
ANR	133984	Identifier	get_temporary_variable		133435	0					
ANR	133985	ArgumentList	CG ( active_op_array )		133435	1					
ANR	133986	Argument	CG ( active_op_array )		133435	0					
ANR	133987	CallExpression	CG ( active_op_array )		133435	0					
ANR	133988	Callee	CG		133435	0					
ANR	133989	Identifier	CG		133435	0					
ANR	133990	ArgumentList	active_op_array		133435	1					
ANR	133991	Argument	active_op_array		133435	0					
ANR	133992	Identifier	active_op_array		133435	0					
ANR	133993	ExpressionStatement	MAKE_NOP ( init_opline )	6747:2:199342:199363	133435	6	True				
ANR	133994	CallExpression	MAKE_NOP ( init_opline )		133435	0					
ANR	133995	Callee	MAKE_NOP		133435	0					
ANR	133996	Identifier	MAKE_NOP		133435	0					
ANR	133997	ArgumentList	init_opline		133435	1					
ANR	133998	Argument	init_opline		133435	0					
ANR	133999	Identifier	init_opline		133435	0					
ANR	134000	ExpressionStatement	"GET_NODE ( result , opline -> result )"	6748:2:199367:199399	133435	7	True				
ANR	134001	CallExpression	"GET_NODE ( result , opline -> result )"		133435	0					
ANR	134002	Callee	GET_NODE		133435	0					
ANR	134003	Identifier	GET_NODE		133435	0					
ANR	134004	ArgumentList	result		133435	1					
ANR	134005	Argument	result		133435	0					
ANR	134006	Identifier	result		133435	0					
ANR	134007	Argument	opline -> result		133435	1					
ANR	134008	PtrMemberAccess	opline -> result		133435	0					
ANR	134009	Identifier	opline		133435	0					
ANR	134010	Identifier	result		133435	1					
ANR	134011	ElseStatement	else		133435	0					
ANR	134012	CompoundStatement		78:2:2398:2474	133435	0					
ANR	134013	IdentifierDeclStatement	uint32_t var ;	6750:2:199413:199425	133435	0	True				
ANR	134014	IdentifierDecl	var		133435	0					
ANR	134015	IdentifierDeclType	uint32_t		133435	0					
ANR	134016	Identifier	var		133435	1					
ANR	134017	IdentifierDeclStatement	zend_brk_cont_element * info = get_next_brk_cont_element ( CG ( active_op_array ) ) ;	6751:2:199429:199505	133435	1	True				
ANR	134018	IdentifierDecl	* info = get_next_brk_cont_element ( CG ( active_op_array ) )		133435	0					
ANR	134019	IdentifierDeclType	zend_brk_cont_element *		133435	0					
ANR	134020	Identifier	info		133435	1					
ANR	134021	AssignmentExpression	* info = get_next_brk_cont_element ( CG ( active_op_array ) )		133435	2		=			
ANR	134022	Identifier	info		133435	0					
ANR	134023	CallExpression	get_next_brk_cont_element ( CG ( active_op_array ) )		133435	1					
ANR	134024	Callee	get_next_brk_cont_element		133435	0					
ANR	134025	Identifier	get_next_brk_cont_element		133435	0					
ANR	134026	ArgumentList	CG ( active_op_array )		133435	1					
ANR	134027	Argument	CG ( active_op_array )		133435	0					
ANR	134028	CallExpression	CG ( active_op_array )		133435	0					
ANR	134029	Callee	CG		133435	0					
ANR	134030	Identifier	CG		133435	0					
ANR	134031	ArgumentList	active_op_array		133435	1					
ANR	134032	Argument	active_op_array		133435	0					
ANR	134033	Identifier	active_op_array		133435	0					
ANR	134034	ExpressionStatement	info -> start = rope_init_lineno	6752:2:199509:199539	133435	2	True				
ANR	134035	AssignmentExpression	info -> start = rope_init_lineno		133435	0		=			
ANR	134036	PtrMemberAccess	info -> start		133435	0					
ANR	134037	Identifier	info		133435	0					
ANR	134038	Identifier	start		133435	1					
ANR	134039	Identifier	rope_init_lineno		133435	1					
ANR	134040	ExpressionStatement	info -> parent = CG ( context ) . current_brk_cont	6753:2:199543:199586	133435	3	True				
ANR	134041	AssignmentExpression	info -> parent = CG ( context ) . current_brk_cont		133435	0		=			
ANR	134042	PtrMemberAccess	info -> parent		133435	0					
ANR	134043	Identifier	info		133435	0					
ANR	134044	Identifier	parent		133435	1					
ANR	134045	MemberAccess	CG ( context ) . current_brk_cont		133435	1					
ANR	134046	CallExpression	CG ( context )		133435	0					
ANR	134047	Callee	CG		133435	0					
ANR	134048	Identifier	CG		133435	0					
ANR	134049	ArgumentList	context		133435	1					
ANR	134050	Argument	context		133435	0					
ANR	134051	Identifier	context		133435	0					
ANR	134052	Identifier	current_brk_cont		133435	1					
ANR	134053	ExpressionStatement	info -> cont = info -> brk = opline - CG ( active_op_array ) -> opcodes	6754:2:199590:199652	133435	4	True				
ANR	134054	AssignmentExpression	info -> cont = info -> brk = opline - CG ( active_op_array ) -> opcodes		133435	0		=			
ANR	134055	PtrMemberAccess	info -> cont		133435	0					
ANR	134056	Identifier	info		133435	0					
ANR	134057	Identifier	cont		133435	1					
ANR	134058	AssignmentExpression	info -> brk = opline - CG ( active_op_array ) -> opcodes		133435	1		=			
ANR	134059	PtrMemberAccess	info -> brk		133435	0					
ANR	134060	Identifier	info		133435	0					
ANR	134061	Identifier	brk		133435	1					
ANR	134062	AdditiveExpression	opline - CG ( active_op_array ) -> opcodes		133435	1		-			
ANR	134063	Identifier	opline		133435	0					
ANR	134064	PtrMemberAccess	CG ( active_op_array ) -> opcodes		133435	1					
ANR	134065	CallExpression	CG ( active_op_array )		133435	0					
ANR	134066	Callee	CG		133435	0					
ANR	134067	Identifier	CG		133435	0					
ANR	134068	ArgumentList	active_op_array		133435	1					
ANR	134069	Argument	active_op_array		133435	0					
ANR	134070	Identifier	active_op_array		133435	0					
ANR	134071	Identifier	opcodes		133435	1					
ANR	134072	ExpressionStatement	init_opline -> extended_value = j	6756:2:199657:199688	133435	5	True				
ANR	134073	AssignmentExpression	init_opline -> extended_value = j		133435	0		=			
ANR	134074	PtrMemberAccess	init_opline -> extended_value		133435	0					
ANR	134075	Identifier	init_opline		133435	0					
ANR	134076	Identifier	extended_value		133435	1					
ANR	134077	Identifier	j		133435	1					
ANR	134078	ExpressionStatement	opline -> opcode = ZEND_ROPE_END	6757:2:199692:199722	133435	6	True				
ANR	134079	AssignmentExpression	opline -> opcode = ZEND_ROPE_END		133435	0		=			
ANR	134080	PtrMemberAccess	opline -> opcode		133435	0					
ANR	134081	Identifier	opline		133435	0					
ANR	134082	Identifier	opcode		133435	1					
ANR	134083	Identifier	ZEND_ROPE_END		133435	1					
ANR	134084	ExpressionStatement	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )	6758:2:199726:199790	133435	7	True				
ANR	134085	AssignmentExpression	opline -> result . var = get_temporary_variable ( CG ( active_op_array ) )		133435	0		=			
ANR	134086	MemberAccess	opline -> result . var		133435	0					
ANR	134087	PtrMemberAccess	opline -> result		133435	0					
ANR	134088	Identifier	opline		133435	0					
ANR	134089	Identifier	result		133435	1					
ANR	134090	Identifier	var		133435	1					
ANR	134091	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		133435	1					
ANR	134092	Callee	get_temporary_variable		133435	0					
ANR	134093	Identifier	get_temporary_variable		133435	0					
ANR	134094	ArgumentList	CG ( active_op_array )		133435	1					
ANR	134095	Argument	CG ( active_op_array )		133435	0					
ANR	134096	CallExpression	CG ( active_op_array )		133435	0					
ANR	134097	Callee	CG		133435	0					
ANR	134098	Identifier	CG		133435	0					
ANR	134099	ArgumentList	active_op_array		133435	1					
ANR	134100	Argument	active_op_array		133435	0					
ANR	134101	Identifier	active_op_array		133435	0					
ANR	134102	ExpressionStatement	var = opline -> op1 . var = get_temporary_variable ( CG ( active_op_array ) )	6759:2:199794:199861	133435	8	True				
ANR	134103	AssignmentExpression	var = opline -> op1 . var = get_temporary_variable ( CG ( active_op_array ) )		133435	0		=			
ANR	134104	Identifier	var		133435	0					
ANR	134105	AssignmentExpression	opline -> op1 . var = get_temporary_variable ( CG ( active_op_array ) )		133435	1		=			
ANR	134106	MemberAccess	opline -> op1 . var		133435	0					
ANR	134107	PtrMemberAccess	opline -> op1		133435	0					
ANR	134108	Identifier	opline		133435	0					
ANR	134109	Identifier	op1		133435	1					
ANR	134110	Identifier	var		133435	1					
ANR	134111	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		133435	1					
ANR	134112	Callee	get_temporary_variable		133435	0					
ANR	134113	Identifier	get_temporary_variable		133435	0					
ANR	134114	ArgumentList	CG ( active_op_array )		133435	1					
ANR	134115	Argument	CG ( active_op_array )		133435	0					
ANR	134116	CallExpression	CG ( active_op_array )		133435	0					
ANR	134117	Callee	CG		133435	0					
ANR	134118	Identifier	CG		133435	0					
ANR	134119	ArgumentList	active_op_array		133435	1					
ANR	134120	Argument	active_op_array		133435	0					
ANR	134121	Identifier	active_op_array		133435	0					
ANR	134122	ExpressionStatement	"GET_NODE ( result , opline -> result )"	6760:2:199865:199897	133435	9	True				
ANR	134123	CallExpression	"GET_NODE ( result , opline -> result )"		133435	0					
ANR	134124	Callee	GET_NODE		133435	0					
ANR	134125	Identifier	GET_NODE		133435	0					
ANR	134126	ArgumentList	result		133435	1					
ANR	134127	Argument	result		133435	0					
ANR	134128	Identifier	result		133435	0					
ANR	134129	Argument	opline -> result		133435	1					
ANR	134130	PtrMemberAccess	opline -> result		133435	0					
ANR	134131	Identifier	opline		133435	0					
ANR	134132	Identifier	result		133435	1					
ANR	134133	ExpressionStatement	i = ( ( j * sizeof ( zend_string * ) ) + ( sizeof ( zval ) - 1 ) ) / sizeof ( zval )	6763:2:199972:200040	133435	10	True				
ANR	134134	AssignmentExpression	i = ( ( j * sizeof ( zend_string * ) ) + ( sizeof ( zval ) - 1 ) ) / sizeof ( zval )		133435	0		=			
ANR	134135	Identifier	i		133435	0					
ANR	134136	MultiplicativeExpression	( ( j * sizeof ( zend_string * ) ) + ( sizeof ( zval ) - 1 ) ) / sizeof ( zval )		133435	1		/			
ANR	134137	AdditiveExpression	( j * sizeof ( zend_string * ) ) + ( sizeof ( zval ) - 1 )		133435	0		+			
ANR	134138	MultiplicativeExpression	j * sizeof ( zend_string * )		133435	0		*			
ANR	134139	Identifier	j		133435	0					
ANR	134140	SizeofExpression	sizeof ( zend_string * )		133435	1					
ANR	134141	Sizeof	sizeof		133435	0					
ANR	134142	SizeofOperand	zend_string *		133435	1					
ANR	134143	AdditiveExpression	sizeof ( zval ) - 1		133435	1		-			
ANR	134144	SizeofExpression	sizeof ( zval )		133435	0					
ANR	134145	Sizeof	sizeof		133435	0					
ANR	134146	SizeofOperand	zval		133435	1					
ANR	134147	PrimaryExpression	1		133435	1					
ANR	134148	SizeofExpression	sizeof ( zval )		133435	1					
ANR	134149	Sizeof	sizeof		133435	0					
ANR	134150	SizeofOperand	zval		133435	1					
ANR	134151	WhileStatement	while ( i > 1 )		133435	11					
ANR	134152	Condition	i > 1	6764:9:200051:200055	133435	0	True				
ANR	134153	RelationalExpression	i > 1		133435	0		>			
ANR	134154	Identifier	i		133435	0					
ANR	134155	PrimaryExpression	1		133435	1					
ANR	134156	CompoundStatement		91:16:3027:3027	133435	1					
ANR	134157	ExpressionStatement	get_temporary_variable ( CG ( active_op_array ) )	6765:3:200063:200106	133435	0	True				
ANR	134158	CallExpression	get_temporary_variable ( CG ( active_op_array ) )		133435	0					
ANR	134159	Callee	get_temporary_variable		133435	0					
ANR	134160	Identifier	get_temporary_variable		133435	0					
ANR	134161	ArgumentList	CG ( active_op_array )		133435	1					
ANR	134162	Argument	CG ( active_op_array )		133435	0					
ANR	134163	CallExpression	CG ( active_op_array )		133435	0					
ANR	134164	Callee	CG		133435	0					
ANR	134165	Identifier	CG		133435	0					
ANR	134166	ArgumentList	active_op_array		133435	1					
ANR	134167	Argument	active_op_array		133435	0					
ANR	134168	Identifier	active_op_array		133435	0					
ANR	134169	ExpressionStatement	i --	6766:3:200111:200114	133435	1	True				
ANR	134170	PostIncDecOperationExpression	i --		133435	0					
ANR	134171	Identifier	i		133435	0					
ANR	134172	IncDec	--		133435	1					
ANR	134173	WhileStatement	while ( opline != init_opline )		133435	12					
ANR	134174	Condition	opline != init_opline	6769:9:200197:200217	133435	0	True				
ANR	134175	EqualityExpression	opline != init_opline		133435	0		!=			
ANR	134176	Identifier	opline		133435	0					
ANR	134177	Identifier	init_opline		133435	1					
ANR	134178	CompoundStatement		96:32:3189:3189	133435	1					
ANR	134179	ExpressionStatement	opline --	6770:3:200225:200233	133435	0	True				
ANR	134180	PostIncDecOperationExpression	opline --		133435	0					
ANR	134181	Identifier	opline		133435	0					
ANR	134182	IncDec	--		133435	1					
ANR	134183	IfStatement	if ( opline -> opcode == ZEND_ROPE_ADD && opline -> result . var == - 1 )		133435	1					
ANR	134184	Condition	opline -> opcode == ZEND_ROPE_ADD && opline -> result . var == - 1	6771:7:200242:200307	133435	0	True				
ANR	134185	AndExpression	opline -> opcode == ZEND_ROPE_ADD && opline -> result . var == - 1		133435	0		&&			
ANR	134186	EqualityExpression	opline -> opcode == ZEND_ROPE_ADD		133435	0		==			
ANR	134187	PtrMemberAccess	opline -> opcode		133435	0					
ANR	134188	Identifier	opline		133435	0					
ANR	134189	Identifier	opcode		133435	1					
ANR	134190	Identifier	ZEND_ROPE_ADD		133435	1					
ANR	134191	EqualityExpression	opline -> result . var == - 1		133435	1		==			
ANR	134192	MemberAccess	opline -> result . var		133435	0					
ANR	134193	PtrMemberAccess	opline -> result		133435	0					
ANR	134194	Identifier	opline		133435	0					
ANR	134195	Identifier	result		133435	1					
ANR	134196	Identifier	var		133435	1					
ANR	134197	UnaryOperationExpression	- 1		133435	1					
ANR	134198	UnaryOperator	-		133435	0					
ANR	134199	PrimaryExpression	1		133435	1					
ANR	134200	CompoundStatement		99:33:3279:3279	133435	1					
ANR	134201	ExpressionStatement	opline -> op1 . var = var	6773:4:200316:200337	133435	0	True				
ANR	134202	AssignmentExpression	opline -> op1 . var = var		133435	0		=			
ANR	134203	MemberAccess	opline -> op1 . var		133435	0					
ANR	134204	PtrMemberAccess	opline -> op1		133435	0					
ANR	134205	Identifier	opline		133435	0					
ANR	134206	Identifier	op1		133435	1					
ANR	134207	Identifier	var		133435	1					
ANR	134208	Identifier	var		133435	1					
ANR	134209	ExpressionStatement	opline -> result . var = var	6774:4:200343:200367	133435	1	True				
ANR	134210	AssignmentExpression	opline -> result . var = var		133435	0		=			
ANR	134211	MemberAccess	opline -> result . var		133435	0					
ANR	134212	PtrMemberAccess	opline -> result		133435	0					
ANR	134213	Identifier	opline		133435	0					
ANR	134214	Identifier	result		133435	1					
ANR	134215	Identifier	var		133435	1					
ANR	134216	Identifier	var		133435	1					
ANR	134217	ElseStatement	else		133435	0					
ANR	134218	IfStatement	if ( opline -> opcode == ZEND_ROPE_INIT && opline -> result . var == - 1 )		133435	0					
ANR	134219	Condition	opline -> opcode == ZEND_ROPE_INIT && opline -> result . var == - 1	6775:14:200383:200456	133435	0	True				
ANR	134220	AndExpression	opline -> opcode == ZEND_ROPE_INIT && opline -> result . var == - 1		133435	0		&&			
ANR	134221	EqualityExpression	opline -> opcode == ZEND_ROPE_INIT		133435	0		==			
ANR	134222	PtrMemberAccess	opline -> opcode		133435	0					
ANR	134223	Identifier	opline		133435	0					
ANR	134224	Identifier	opcode		133435	1					
ANR	134225	Identifier	ZEND_ROPE_INIT		133435	1					
ANR	134226	EqualityExpression	opline -> result . var == - 1		133435	1		==			
ANR	134227	MemberAccess	opline -> result . var		133435	0					
ANR	134228	PtrMemberAccess	opline -> result		133435	0					
ANR	134229	Identifier	opline		133435	0					
ANR	134230	Identifier	result		133435	1					
ANR	134231	Identifier	var		133435	1					
ANR	134232	UnaryOperationExpression	- 1		133435	1					
ANR	134233	UnaryOperator	-		133435	0					
ANR	134234	PrimaryExpression	1		133435	1					
ANR	134235	CompoundStatement		103:40:3428:3428	133435	1					
ANR	134236	ExpressionStatement	opline -> result . var = var	6777:4:200465:200489	133435	0	True				
ANR	134237	AssignmentExpression	opline -> result . var = var		133435	0		=			
ANR	134238	MemberAccess	opline -> result . var		133435	0					
ANR	134239	PtrMemberAccess	opline -> result		133435	0					
ANR	134240	Identifier	opline		133435	0					
ANR	134241	Identifier	result		133435	1					
ANR	134242	Identifier	var		133435	1					
ANR	134243	Identifier	var		133435	1					
ANR	134244	ReturnType	static void		133435	1					
ANR	134245	Identifier	zend_compile_encaps_list		133435	2					
ANR	134246	ParameterList	"znode * result , zend_ast * ast"		133435	3					
ANR	134247	Parameter	znode * result	6673:37:196990:197002	133435	0	True				
ANR	134248	ParameterType	znode *		133435	0					
ANR	134249	Identifier	result		133435	1					
ANR	134250	Parameter	zend_ast * ast	6673:52:197005:197017	133435	1	True				
ANR	134251	ParameterType	zend_ast *		133435	0					
ANR	134252	Identifier	ast		133435	1					
ANR	134253	CFGEntryNode	ENTRY		133435		True				
ANR	134254	CFGExitNode	EXIT		133435		True				
ANR	134255	Symbol	ast		133435						
ANR	134256	Symbol	& last_const_node . u		133435						
ANR	134257	Symbol	ZEND_FAST_CONCAT		133435						
ANR	134258	Symbol	& elem_node . u . constant		133435						
ANR	134259	Symbol	* CG		133435						
ANR	134260	Symbol	get_temporary_variable		133435						
ANR	134261	Symbol	init_opline -> op2_type		133435						
ANR	134262	Symbol	result -> u		133435						
ANR	134263	Symbol	CG ( active_op_array ) -> opcodes		133435						
ANR	134264	Symbol	opline -> extended_value		133435						
ANR	134265	Symbol	opline -> result		133435						
ANR	134266	Symbol	* init_opline		133435						
ANR	134267	Symbol	opline		133435						
ANR	134268	Symbol	info -> brk		133435						
ANR	134269	Symbol	context		133435						
ANR	134270	Symbol	IS_STRING		133435						
ANR	134271	Symbol	rope_init_lineno		133435						
ANR	134272	Symbol	& last_const_node . u . constant		133435						
ANR	134273	Symbol	IS_TMP_VAR		133435						
ANR	134274	Symbol	info		133435						
ANR	134275	Symbol	CG ( context ) . current_brk_cont		133435						
ANR	134276	Symbol	IS_CONST		133435						
ANR	134277	Symbol	ZEND_ROPE_ADD		133435						
ANR	134278	Symbol	NULL		133435						
ANR	134279	Symbol	info -> cont		133435						
ANR	134280	Symbol	init_opline -> extended_value		133435						
ANR	134281	Symbol	var		133435						
ANR	134282	Symbol	list		133435						
ANR	134283	Symbol	last_const_node . u		133435						
ANR	134284	Symbol	opline -> op1_type		133435						
ANR	134285	Symbol	& elem_node . u		133435						
ANR	134286	Symbol	* list -> child		133435						
ANR	134287	Symbol	list -> children		133435						
ANR	134288	Symbol	opline -> op1		133435						
ANR	134289	Symbol	opline -> op2		133435						
ANR	134290	Symbol	init_opline		133435						
ANR	134291	Symbol	& last_const_node		133435						
ANR	134292	Symbol	Z_STRLEN		133435						
ANR	134293	Symbol	result -> op_type		133435						
ANR	134294	Symbol	zend_compile_rope_add		133435						
ANR	134295	Symbol	get_next_brk_cont_element		133435						
ANR	134296	Symbol	result		133435						
ANR	134297	Symbol	last_const_node		133435						
ANR	134298	Symbol	* * list		133435						
ANR	134299	Symbol	ZEND_CAST		133435						
ANR	134300	Symbol	* result		133435						
ANR	134301	Symbol	& result -> u . constant		133435						
ANR	134302	Symbol	& elem_node		133435						
ANR	134303	Symbol	opline -> op1 . var		133435						
ANR	134304	Symbol	opline -> result_type		133435						
ANR	134305	Symbol	info -> parent		133435						
ANR	134306	Symbol	list -> child		133435						
ANR	134307	Symbol	CG		133435						
ANR	134308	Symbol	& result -> u		133435						
ANR	134309	Symbol	active_op_array		133435						
ANR	134310	Symbol	i		133435						
ANR	134311	Symbol	j		133435						
ANR	134312	Symbol	elem_node		133435						
ANR	134313	Symbol	elem_node . u . constant		133435						
ANR	134314	Symbol	info -> start		133435						
ANR	134315	Symbol	zend_ast_get_list		133435						
ANR	134316	Symbol	* i		133435						
ANR	134317	Symbol	init_opline -> op2		133435						
ANR	134318	Symbol	* opline		133435						
ANR	134319	Symbol	* list		133435						
ANR	134320	Symbol	elem_node . u		133435						
ANR	134321	Symbol	opline -> opcode		133435						
ANR	134322	Symbol	elem_node . op_type		133435						
ANR	134323	Symbol	opline -> op2_type		133435						
ANR	134324	Symbol	* info		133435						
ANR	134325	Symbol	ZEND_ROPE_END		133435						
ANR	134326	Symbol	get_next_op_number		133435						
ANR	134327	Symbol	last_const_node . op_type		133435						
ANR	134328	Symbol	opline -> result . var		133435						
ANR	134329	Symbol	IS_UNUSED		133435						
ANR	134330	Symbol	ZEND_ROPE_INIT		133435						
ANR	134331	Function	zend_compile_magic_const	6784:0:200516:200985							
ANR	134332	FunctionDef	"zend_compile_magic_const (znode * result , zend_ast * ast)"		134331	0					
ANR	134333	CompoundStatement		6785:0:200586:200985	134331	0					
ANR	134334	IdentifierDeclStatement	zend_op * opline ;	6786:1:200589:200604	134331	0	True				
ANR	134335	IdentifierDecl	* opline		134331	0					
ANR	134336	IdentifierDeclType	zend_op *		134331	0					
ANR	134337	Identifier	opline		134331	1					
ANR	134338	IfStatement	"if ( zend_try_ct_eval_magic_const ( & result -> u . constant , ast ) )"		134331	1					
ANR	134339	Condition	"zend_try_ct_eval_magic_const ( & result -> u . constant , ast )"	6788:5:200612:200665	134331	0	True				
ANR	134340	CallExpression	"zend_try_ct_eval_magic_const ( & result -> u . constant , ast )"		134331	0					
ANR	134341	Callee	zend_try_ct_eval_magic_const		134331	0					
ANR	134342	Identifier	zend_try_ct_eval_magic_const		134331	0					
ANR	134343	ArgumentList	& result -> u . constant		134331	1					
ANR	134344	Argument	& result -> u . constant		134331	0					
ANR	134345	UnaryOperationExpression	& result -> u . constant		134331	0					
ANR	134346	UnaryOperator	&		134331	0					
ANR	134347	MemberAccess	result -> u . constant		134331	1					
ANR	134348	PtrMemberAccess	result -> u		134331	0					
ANR	134349	Identifier	result		134331	0					
ANR	134350	Identifier	u		134331	1					
ANR	134351	Identifier	constant		134331	1					
ANR	134352	Argument	ast		134331	1					
ANR	134353	Identifier	ast		134331	0					
ANR	134354	CompoundStatement		4:61:81:81	134331	1					
ANR	134355	ExpressionStatement	result -> op_type = IS_CONST	6789:2:200672:200698	134331	0	True				
ANR	134356	AssignmentExpression	result -> op_type = IS_CONST		134331	0		=			
ANR	134357	PtrMemberAccess	result -> op_type		134331	0					
ANR	134358	Identifier	result		134331	0					
ANR	134359	Identifier	op_type		134331	1					
ANR	134360	Identifier	IS_CONST		134331	1					
ANR	134361	ReturnStatement	return ;	6790:2:200702:200708	134331	1	True				
ANR	134362	ExpressionStatement	ZEND_ASSERT ( ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0 )	6793:1:200715:200862	134331	2	True				
ANR	134363	CallExpression	ZEND_ASSERT ( ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0 )		134331	0					
ANR	134364	Callee	ZEND_ASSERT		134331	0					
ANR	134365	Identifier	ZEND_ASSERT		134331	0					
ANR	134366	ArgumentList	ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		134331	1					
ANR	134367	Argument	ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		134331	0					
ANR	134368	AndExpression	ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		134331	0		&&			
ANR	134369	EqualityExpression	ast -> attr == T_CLASS_C		134331	0		==			
ANR	134370	PtrMemberAccess	ast -> attr		134331	0					
ANR	134371	Identifier	ast		134331	0					
ANR	134372	Identifier	attr		134331	1					
ANR	134373	Identifier	T_CLASS_C		134331	1					
ANR	134374	AndExpression	CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		134331	1		&&			
ANR	134375	CallExpression	CG ( active_class_entry )		134331	0					
ANR	134376	Callee	CG		134331	0					
ANR	134377	Identifier	CG		134331	0					
ANR	134378	ArgumentList	active_class_entry		134331	1					
ANR	134379	Argument	active_class_entry		134331	0					
ANR	134380	Identifier	active_class_entry		134331	0					
ANR	134381	EqualityExpression	( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		134331	1		!=			
ANR	134382	BitAndExpression	CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT		134331	0		&			
ANR	134383	PtrMemberAccess	CG ( active_class_entry ) -> ce_flags		134331	0					
ANR	134384	CallExpression	CG ( active_class_entry )		134331	0					
ANR	134385	Callee	CG		134331	0					
ANR	134386	Identifier	CG		134331	0					
ANR	134387	ArgumentList	active_class_entry		134331	1					
ANR	134388	Argument	active_class_entry		134331	0					
ANR	134389	Identifier	active_class_entry		134331	0					
ANR	134390	Identifier	ce_flags		134331	1					
ANR	134391	Identifier	ZEND_ACC_TRAIT		134331	1					
ANR	134392	PrimaryExpression	0		134331	1					
ANR	134393	ExpressionStatement	"opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"	6797:1:200866:200934	134331	3	True				
ANR	134394	AssignmentExpression	"opline = zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		134331	0		=			
ANR	134395	Identifier	opline		134331	0					
ANR	134396	CallExpression	"zend_emit_op_tmp ( result , ZEND_FETCH_CLASS_NAME , NULL , NULL )"		134331	1					
ANR	134397	Callee	zend_emit_op_tmp		134331	0					
ANR	134398	Identifier	zend_emit_op_tmp		134331	0					
ANR	134399	ArgumentList	result		134331	1					
ANR	134400	Argument	result		134331	0					
ANR	134401	Identifier	result		134331	0					
ANR	134402	Argument	ZEND_FETCH_CLASS_NAME		134331	1					
ANR	134403	Identifier	ZEND_FETCH_CLASS_NAME		134331	0					
ANR	134404	Argument	NULL		134331	2					
ANR	134405	Identifier	NULL		134331	0					
ANR	134406	Argument	NULL		134331	3					
ANR	134407	Identifier	NULL		134331	0					
ANR	134408	ExpressionStatement	opline -> extended_value = ZEND_FETCH_CLASS_SELF	6798:1:200937:200983	134331	4	True				
ANR	134409	AssignmentExpression	opline -> extended_value = ZEND_FETCH_CLASS_SELF		134331	0		=			
ANR	134410	PtrMemberAccess	opline -> extended_value		134331	0					
ANR	134411	Identifier	opline		134331	0					
ANR	134412	Identifier	extended_value		134331	1					
ANR	134413	Identifier	ZEND_FETCH_CLASS_SELF		134331	1					
ANR	134414	ReturnType	void		134331	1					
ANR	134415	Identifier	zend_compile_magic_const		134331	2					
ANR	134416	ParameterList	"znode * result , zend_ast * ast"		134331	3					
ANR	134417	Parameter	znode * result	6784:30:200546:200558	134331	0	True				
ANR	134418	ParameterType	znode *		134331	0					
ANR	134419	Identifier	result		134331	1					
ANR	134420	Parameter	zend_ast * ast	6784:45:200561:200573	134331	1	True				
ANR	134421	ParameterType	zend_ast *		134331	0					
ANR	134422	Identifier	ast		134331	1					
ANR	134423	CFGEntryNode	ENTRY		134331		True				
ANR	134424	CFGExitNode	EXIT		134331		True				
ANR	134425	Symbol	T_CLASS_C		134331						
ANR	134426	Symbol	ast -> attr		134331						
ANR	134427	Symbol	zend_emit_op_tmp		134331						
ANR	134428	Symbol	IS_CONST		134331						
ANR	134429	Symbol	ast		134331						
ANR	134430	Symbol	NULL		134331						
ANR	134431	Symbol	& result -> u		134331						
ANR	134432	Symbol	CG		134331						
ANR	134433	Symbol	active_class_entry		134331						
ANR	134434	Symbol	* CG		134331						
ANR	134435	Symbol	result -> op_type		134331						
ANR	134436	Symbol	result -> u		134331						
ANR	134437	Symbol	opline -> extended_value		134331						
ANR	134438	Symbol	ZEND_ACC_TRAIT		134331						
ANR	134439	Symbol	result		134331						
ANR	134440	Symbol	opline		134331						
ANR	134441	Symbol	* ast		134331						
ANR	134442	Symbol	* opline		134331						
ANR	134443	Symbol	* result		134331						
ANR	134444	Symbol	ZEND_FETCH_CLASS_NAME		134331						
ANR	134445	Symbol	ZEND_FETCH_CLASS_SELF		134331						
ANR	134446	Symbol	& result -> u . constant		134331						
ANR	134447	Symbol	CG ( active_class_entry ) -> ce_flags		134331						
ANR	134448	Symbol	zend_try_ct_eval_magic_const		134331						
ANR	134449	Function	zend_is_allowed_in_const_expr	6802:0:200998:201551							
ANR	134450	FunctionDef	zend_is_allowed_in_const_expr (zend_ast_kind kind)		134449	0					
ANR	134451	CompoundStatement		6803:0:201068:201551	134449	0					
ANR	134452	ReturnStatement	return kind == ZEND_AST_ZVAL || kind == ZEND_AST_BINARY_OP || kind == ZEND_AST_GREATER || kind == ZEND_AST_GREATER_EQUAL || kind == ZEND_AST_AND || kind == ZEND_AST_OR || kind == ZEND_AST_UNARY_OP || kind == ZEND_AST_UNARY_PLUS || kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST ;	6804:1:201071:201549	134449	0	True				
ANR	134453	OrExpression	kind == ZEND_AST_ZVAL || kind == ZEND_AST_BINARY_OP || kind == ZEND_AST_GREATER || kind == ZEND_AST_GREATER_EQUAL || kind == ZEND_AST_AND || kind == ZEND_AST_OR || kind == ZEND_AST_UNARY_OP || kind == ZEND_AST_UNARY_PLUS || kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	0		||			
ANR	134454	EqualityExpression	kind == ZEND_AST_ZVAL		134449	0		==			
ANR	134455	Identifier	kind		134449	0					
ANR	134456	Identifier	ZEND_AST_ZVAL		134449	1					
ANR	134457	OrExpression	kind == ZEND_AST_BINARY_OP || kind == ZEND_AST_GREATER || kind == ZEND_AST_GREATER_EQUAL || kind == ZEND_AST_AND || kind == ZEND_AST_OR || kind == ZEND_AST_UNARY_OP || kind == ZEND_AST_UNARY_PLUS || kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134458	EqualityExpression	kind == ZEND_AST_BINARY_OP		134449	0		==			
ANR	134459	Identifier	kind		134449	0					
ANR	134460	Identifier	ZEND_AST_BINARY_OP		134449	1					
ANR	134461	OrExpression	kind == ZEND_AST_GREATER || kind == ZEND_AST_GREATER_EQUAL || kind == ZEND_AST_AND || kind == ZEND_AST_OR || kind == ZEND_AST_UNARY_OP || kind == ZEND_AST_UNARY_PLUS || kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134462	EqualityExpression	kind == ZEND_AST_GREATER		134449	0		==			
ANR	134463	Identifier	kind		134449	0					
ANR	134464	Identifier	ZEND_AST_GREATER		134449	1					
ANR	134465	OrExpression	kind == ZEND_AST_GREATER_EQUAL || kind == ZEND_AST_AND || kind == ZEND_AST_OR || kind == ZEND_AST_UNARY_OP || kind == ZEND_AST_UNARY_PLUS || kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134466	EqualityExpression	kind == ZEND_AST_GREATER_EQUAL		134449	0		==			
ANR	134467	Identifier	kind		134449	0					
ANR	134468	Identifier	ZEND_AST_GREATER_EQUAL		134449	1					
ANR	134469	OrExpression	kind == ZEND_AST_AND || kind == ZEND_AST_OR || kind == ZEND_AST_UNARY_OP || kind == ZEND_AST_UNARY_PLUS || kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134470	EqualityExpression	kind == ZEND_AST_AND		134449	0		==			
ANR	134471	Identifier	kind		134449	0					
ANR	134472	Identifier	ZEND_AST_AND		134449	1					
ANR	134473	OrExpression	kind == ZEND_AST_OR || kind == ZEND_AST_UNARY_OP || kind == ZEND_AST_UNARY_PLUS || kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134474	EqualityExpression	kind == ZEND_AST_OR		134449	0		==			
ANR	134475	Identifier	kind		134449	0					
ANR	134476	Identifier	ZEND_AST_OR		134449	1					
ANR	134477	OrExpression	kind == ZEND_AST_UNARY_OP || kind == ZEND_AST_UNARY_PLUS || kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134478	EqualityExpression	kind == ZEND_AST_UNARY_OP		134449	0		==			
ANR	134479	Identifier	kind		134449	0					
ANR	134480	Identifier	ZEND_AST_UNARY_OP		134449	1					
ANR	134481	OrExpression	kind == ZEND_AST_UNARY_PLUS || kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134482	EqualityExpression	kind == ZEND_AST_UNARY_PLUS		134449	0		==			
ANR	134483	Identifier	kind		134449	0					
ANR	134484	Identifier	ZEND_AST_UNARY_PLUS		134449	1					
ANR	134485	OrExpression	kind == ZEND_AST_UNARY_MINUS || kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134486	EqualityExpression	kind == ZEND_AST_UNARY_MINUS		134449	0		==			
ANR	134487	Identifier	kind		134449	0					
ANR	134488	Identifier	ZEND_AST_UNARY_MINUS		134449	1					
ANR	134489	OrExpression	kind == ZEND_AST_CONDITIONAL || kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134490	EqualityExpression	kind == ZEND_AST_CONDITIONAL		134449	0		==			
ANR	134491	Identifier	kind		134449	0					
ANR	134492	Identifier	ZEND_AST_CONDITIONAL		134449	1					
ANR	134493	OrExpression	kind == ZEND_AST_DIM || kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134494	EqualityExpression	kind == ZEND_AST_DIM		134449	0		==			
ANR	134495	Identifier	kind		134449	0					
ANR	134496	Identifier	ZEND_AST_DIM		134449	1					
ANR	134497	OrExpression	kind == ZEND_AST_ARRAY || kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134498	EqualityExpression	kind == ZEND_AST_ARRAY		134449	0		==			
ANR	134499	Identifier	kind		134449	0					
ANR	134500	Identifier	ZEND_AST_ARRAY		134449	1					
ANR	134501	OrExpression	kind == ZEND_AST_ARRAY_ELEM || kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134502	EqualityExpression	kind == ZEND_AST_ARRAY_ELEM		134449	0		==			
ANR	134503	Identifier	kind		134449	0					
ANR	134504	Identifier	ZEND_AST_ARRAY_ELEM		134449	1					
ANR	134505	OrExpression	kind == ZEND_AST_CONST || kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134506	EqualityExpression	kind == ZEND_AST_CONST		134449	0		==			
ANR	134507	Identifier	kind		134449	0					
ANR	134508	Identifier	ZEND_AST_CONST		134449	1					
ANR	134509	OrExpression	kind == ZEND_AST_CLASS_CONST || kind == ZEND_AST_MAGIC_CONST		134449	1		||			
ANR	134510	EqualityExpression	kind == ZEND_AST_CLASS_CONST		134449	0		==			
ANR	134511	Identifier	kind		134449	0					
ANR	134512	Identifier	ZEND_AST_CLASS_CONST		134449	1					
ANR	134513	EqualityExpression	kind == ZEND_AST_MAGIC_CONST		134449	1		==			
ANR	134514	Identifier	kind		134449	0					
ANR	134515	Identifier	ZEND_AST_MAGIC_CONST		134449	1					
ANR	134516	ReturnType	zend_bool		134449	1					
ANR	134517	Identifier	zend_is_allowed_in_const_expr		134449	2					
ANR	134518	ParameterList	zend_ast_kind kind		134449	3					
ANR	134519	Parameter	zend_ast_kind kind	6802:40:201038:201055	134449	0	True				
ANR	134520	ParameterType	zend_ast_kind		134449	0					
ANR	134521	Identifier	kind		134449	1					
ANR	134522	CFGEntryNode	ENTRY		134449		True				
ANR	134523	CFGExitNode	EXIT		134449		True				
ANR	134524	Symbol	ZEND_AST_CONST		134449						
ANR	134525	Symbol	ZEND_AST_UNARY_OP		134449						
ANR	134526	Symbol	ZEND_AST_UNARY_MINUS		134449						
ANR	134527	Symbol	ZEND_AST_AND		134449						
ANR	134528	Symbol	ZEND_AST_UNARY_PLUS		134449						
ANR	134529	Symbol	kind		134449						
ANR	134530	Symbol	ZEND_AST_CONDITIONAL		134449						
ANR	134531	Symbol	ZEND_AST_ARRAY_ELEM		134449						
ANR	134532	Symbol	ZEND_AST_GREATER		134449						
ANR	134533	Symbol	ZEND_AST_OR		134449						
ANR	134534	Symbol	ZEND_AST_CLASS_CONST		134449						
ANR	134535	Symbol	ZEND_AST_ARRAY		134449						
ANR	134536	Symbol	ZEND_AST_GREATER_EQUAL		134449						
ANR	134537	Symbol	ZEND_AST_DIM		134449						
ANR	134538	Symbol	ZEND_AST_MAGIC_CONST		134449						
ANR	134539	Symbol	ZEND_AST_ZVAL		134449						
ANR	134540	Symbol	ZEND_AST_BINARY_OP		134449						
ANR	134541	Function	zend_compile_const_expr_class_const	6816:0:201564:202878							
ANR	134542	FunctionDef	zend_compile_const_expr_class_const (zend_ast * * ast_ptr)		134541	0					
ANR	134543	CompoundStatement		6817:0:201635:202878	134541	0					
ANR	134544	IdentifierDeclStatement	zend_ast * ast = * ast_ptr ;	6818:1:201638:201662	134541	0	True				
ANR	134545	IdentifierDecl	* ast = * ast_ptr		134541	0					
ANR	134546	IdentifierDeclType	zend_ast *		134541	0					
ANR	134547	Identifier	ast		134541	1					
ANR	134548	AssignmentExpression	* ast = * ast_ptr		134541	2		=			
ANR	134549	Identifier	ast		134541	0					
ANR	134550	UnaryOperationExpression	* ast_ptr		134541	1					
ANR	134551	UnaryOperator	*		134541	0					
ANR	134552	Identifier	ast_ptr		134541	1					
ANR	134553	IdentifierDeclStatement	zend_ast * class_ast = ast -> child [ 0 ] ;	6819:1:201665:201700	134541	1	True				
ANR	134554	IdentifierDecl	* class_ast = ast -> child [ 0 ]		134541	0					
ANR	134555	IdentifierDeclType	zend_ast *		134541	0					
ANR	134556	Identifier	class_ast		134541	1					
ANR	134557	AssignmentExpression	* class_ast = ast -> child [ 0 ]		134541	2		=			
ANR	134558	Identifier	class_ast		134541	0					
ANR	134559	ArrayIndexing	ast -> child [ 0 ]		134541	1					
ANR	134560	PtrMemberAccess	ast -> child		134541	0					
ANR	134561	Identifier	ast		134541	0					
ANR	134562	Identifier	child		134541	1					
ANR	134563	PrimaryExpression	0		134541	1					
ANR	134564	IdentifierDeclStatement	zend_ast * const_ast = ast -> child [ 1 ] ;	6820:1:201703:201738	134541	2	True				
ANR	134565	IdentifierDecl	* const_ast = ast -> child [ 1 ]		134541	0					
ANR	134566	IdentifierDeclType	zend_ast *		134541	0					
ANR	134567	Identifier	const_ast		134541	1					
ANR	134568	AssignmentExpression	* const_ast = ast -> child [ 1 ]		134541	2		=			
ANR	134569	Identifier	const_ast		134541	0					
ANR	134570	ArrayIndexing	ast -> child [ 1 ]		134541	1					
ANR	134571	PtrMemberAccess	ast -> child		134541	0					
ANR	134572	Identifier	ast		134541	0					
ANR	134573	Identifier	child		134541	1					
ANR	134574	PrimaryExpression	1		134541	1					
ANR	134575	IdentifierDeclStatement	zend_string * class_name ;	6821:1:201741:201764	134541	3	True				
ANR	134576	IdentifierDecl	* class_name		134541	0					
ANR	134577	IdentifierDeclType	zend_string *		134541	0					
ANR	134578	Identifier	class_name		134541	1					
ANR	134579	IdentifierDeclStatement	zend_string * const_name = zend_ast_get_str ( const_ast ) ;	6822:1:201767:201820	134541	4	True				
ANR	134580	IdentifierDecl	* const_name = zend_ast_get_str ( const_ast )		134541	0					
ANR	134581	IdentifierDeclType	zend_string *		134541	0					
ANR	134582	Identifier	const_name		134541	1					
ANR	134583	AssignmentExpression	* const_name = zend_ast_get_str ( const_ast )		134541	2		=			
ANR	134584	Identifier	const_name		134541	0					
ANR	134585	CallExpression	zend_ast_get_str ( const_ast )		134541	1					
ANR	134586	Callee	zend_ast_get_str		134541	0					
ANR	134587	Identifier	zend_ast_get_str		134541	0					
ANR	134588	ArgumentList	const_ast		134541	1					
ANR	134589	Argument	const_ast		134541	0					
ANR	134590	Identifier	const_ast		134541	0					
ANR	134591	IdentifierDeclStatement	zval result ;	6823:1:201823:201834	134541	5	True				
ANR	134592	IdentifierDecl	result		134541	0					
ANR	134593	IdentifierDeclType	zval		134541	0					
ANR	134594	Identifier	result		134541	1					
ANR	134595	IdentifierDeclStatement	int fetch_type ;	6824:1:201837:201851	134541	6	True				
ANR	134596	IdentifierDecl	fetch_type		134541	0					
ANR	134597	IdentifierDeclType	int		134541	0					
ANR	134598	Identifier	fetch_type		134541	1					
ANR	134599	IfStatement	if ( class_ast -> kind != ZEND_AST_ZVAL )		134541	7					
ANR	134600	Condition	class_ast -> kind != ZEND_AST_ZVAL	6826:5:201859:201890	134541	0	True				
ANR	134601	EqualityExpression	class_ast -> kind != ZEND_AST_ZVAL		134541	0		!=			
ANR	134602	PtrMemberAccess	class_ast -> kind		134541	0					
ANR	134603	Identifier	class_ast		134541	0					
ANR	134604	Identifier	kind		134541	1					
ANR	134605	Identifier	ZEND_AST_ZVAL		134541	1					
ANR	134606	CompoundStatement		10:39:257:257	134541	1					
ANR	134607	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Dynamic class names are not allowed in compile-time class constant references"" )"	6827:2:201897:202017	134541	0	True				
ANR	134608	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Dynamic class names are not allowed in compile-time class constant references"" )"		134541	0					
ANR	134609	Callee	zend_error_noreturn		134541	0					
ANR	134610	Identifier	zend_error_noreturn		134541	0					
ANR	134611	ArgumentList	E_COMPILE_ERROR		134541	1					
ANR	134612	Argument	E_COMPILE_ERROR		134541	0					
ANR	134613	Identifier	E_COMPILE_ERROR		134541	0					
ANR	134614	Argument	"""Dynamic class names are not allowed in compile-time class constant references"""		134541	1					
ANR	134615	PrimaryExpression	"""Dynamic class names are not allowed in compile-time class constant references"""		134541	0					
ANR	134616	IfStatement	"if ( zend_try_compile_const_expr_resolve_class_name ( & result , class_ast , const_ast , 1 ) )"		134541	8					
ANR	134617	Condition	"zend_try_compile_const_expr_resolve_class_name ( & result , class_ast , const_ast , 1 )"	6831:5:202028:202107	134541	0	True				
ANR	134618	CallExpression	"zend_try_compile_const_expr_resolve_class_name ( & result , class_ast , const_ast , 1 )"		134541	0					
ANR	134619	Callee	zend_try_compile_const_expr_resolve_class_name		134541	0					
ANR	134620	Identifier	zend_try_compile_const_expr_resolve_class_name		134541	0					
ANR	134621	ArgumentList	& result		134541	1					
ANR	134622	Argument	& result		134541	0					
ANR	134623	UnaryOperationExpression	& result		134541	0					
ANR	134624	UnaryOperator	&		134541	0					
ANR	134625	Identifier	result		134541	1					
ANR	134626	Argument	class_ast		134541	1					
ANR	134627	Identifier	class_ast		134541	0					
ANR	134628	Argument	const_ast		134541	2					
ANR	134629	Identifier	const_ast		134541	0					
ANR	134630	Argument	1		134541	3					
ANR	134631	PrimaryExpression	1		134541	0					
ANR	134632	CompoundStatement		15:87:474:474	134541	1					
ANR	134633	ExpressionStatement	* ast_ptr = zend_ast_create_zval ( & result )	6832:2:202114:202154	134541	0	True				
ANR	134634	AssignmentExpression	* ast_ptr = zend_ast_create_zval ( & result )		134541	0		=			
ANR	134635	UnaryOperationExpression	* ast_ptr		134541	0					
ANR	134636	UnaryOperator	*		134541	0					
ANR	134637	Identifier	ast_ptr		134541	1					
ANR	134638	CallExpression	zend_ast_create_zval ( & result )		134541	1					
ANR	134639	Callee	zend_ast_create_zval		134541	0					
ANR	134640	Identifier	zend_ast_create_zval		134541	0					
ANR	134641	ArgumentList	& result		134541	1					
ANR	134642	Argument	& result		134541	0					
ANR	134643	UnaryOperationExpression	& result		134541	0					
ANR	134644	UnaryOperator	&		134541	0					
ANR	134645	Identifier	result		134541	1					
ANR	134646	ReturnStatement	return ;	6833:2:202158:202164	134541	1	True				
ANR	134647	ExpressionStatement	class_name = zend_ast_get_str ( class_ast )	6836:1:202171:202211	134541	9	True				
ANR	134648	AssignmentExpression	class_name = zend_ast_get_str ( class_ast )		134541	0		=			
ANR	134649	Identifier	class_name		134541	0					
ANR	134650	CallExpression	zend_ast_get_str ( class_ast )		134541	1					
ANR	134651	Callee	zend_ast_get_str		134541	0					
ANR	134652	Identifier	zend_ast_get_str		134541	0					
ANR	134653	ArgumentList	class_ast		134541	1					
ANR	134654	Argument	class_ast		134541	0					
ANR	134655	Identifier	class_ast		134541	0					
ANR	134656	ExpressionStatement	fetch_type = zend_get_class_fetch_type ( class_name )	6837:1:202214:202264	134541	10	True				
ANR	134657	AssignmentExpression	fetch_type = zend_get_class_fetch_type ( class_name )		134541	0		=			
ANR	134658	Identifier	fetch_type		134541	0					
ANR	134659	CallExpression	zend_get_class_fetch_type ( class_name )		134541	1					
ANR	134660	Callee	zend_get_class_fetch_type		134541	0					
ANR	134661	Identifier	zend_get_class_fetch_type		134541	0					
ANR	134662	ArgumentList	class_name		134541	1					
ANR	134663	Argument	class_name		134541	0					
ANR	134664	Identifier	class_name		134541	0					
ANR	134665	IfStatement	if ( ZEND_FETCH_CLASS_STATIC == fetch_type )		134541	11					
ANR	134666	Condition	ZEND_FETCH_CLASS_STATIC == fetch_type	6839:5:202272:202308	134541	0	True				
ANR	134667	EqualityExpression	ZEND_FETCH_CLASS_STATIC == fetch_type		134541	0		==			
ANR	134668	Identifier	ZEND_FETCH_CLASS_STATIC		134541	0					
ANR	134669	Identifier	fetch_type		134541	1					
ANR	134670	CompoundStatement		23:44:675:675	134541	1					
ANR	134671	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""\\""static::\\"" is not allowed in compile-time constants"" )"	6840:2:202315:202411	134541	0	True				
ANR	134672	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""\\""static::\\"" is not allowed in compile-time constants"" )"		134541	0					
ANR	134673	Callee	zend_error_noreturn		134541	0					
ANR	134674	Identifier	zend_error_noreturn		134541	0					
ANR	134675	ArgumentList	E_COMPILE_ERROR		134541	1					
ANR	134676	Argument	E_COMPILE_ERROR		134541	0					
ANR	134677	Identifier	E_COMPILE_ERROR		134541	0					
ANR	134678	Argument	"""\\""static::\\"" is not allowed in compile-time constants"""		134541	1					
ANR	134679	PrimaryExpression	"""\\""static::\\"" is not allowed in compile-time constants"""		134541	0					
ANR	134680	IfStatement	if ( ZEND_FETCH_CLASS_DEFAULT == fetch_type )		134541	12					
ANR	134681	Condition	ZEND_FETCH_CLASS_DEFAULT == fetch_type	6844:5:202422:202459	134541	0	True				
ANR	134682	EqualityExpression	ZEND_FETCH_CLASS_DEFAULT == fetch_type		134541	0		==			
ANR	134683	Identifier	ZEND_FETCH_CLASS_DEFAULT		134541	0					
ANR	134684	Identifier	fetch_type		134541	1					
ANR	134685	CompoundStatement		28:45:826:826	134541	1					
ANR	134686	ExpressionStatement	class_name = zend_resolve_class_name_ast ( class_ast )	6845:2:202466:202517	134541	0	True				
ANR	134687	AssignmentExpression	class_name = zend_resolve_class_name_ast ( class_ast )		134541	0		=			
ANR	134688	Identifier	class_name		134541	0					
ANR	134689	CallExpression	zend_resolve_class_name_ast ( class_ast )		134541	1					
ANR	134690	Callee	zend_resolve_class_name_ast		134541	0					
ANR	134691	Identifier	zend_resolve_class_name_ast		134541	0					
ANR	134692	ArgumentList	class_ast		134541	1					
ANR	134693	Argument	class_ast		134541	0					
ANR	134694	Identifier	class_ast		134541	0					
ANR	134695	ElseStatement	else		134541	0					
ANR	134696	CompoundStatement		30:8:891:891	134541	0					
ANR	134697	ExpressionStatement	zend_string_addref ( class_name )	6847:2:202531:202561	134541	0	True				
ANR	134698	CallExpression	zend_string_addref ( class_name )		134541	0					
ANR	134699	Callee	zend_string_addref		134541	0					
ANR	134700	Identifier	zend_string_addref		134541	0					
ANR	134701	ArgumentList	class_name		134541	1					
ANR	134702	Argument	class_name		134541	0					
ANR	134703	Identifier	class_name		134541	0					
ANR	134704	ExpressionStatement	"Z_STR ( result ) = zend_concat3 ( ZSTR_VAL ( class_name ) , ZSTR_LEN ( class_name ) , ""::"" , 2 , ZSTR_VAL ( const_name ) , ZSTR_LEN ( const_name ) )"	6850:1:202568:202696	134541	13	True				
ANR	134705	AssignmentExpression	"Z_STR ( result ) = zend_concat3 ( ZSTR_VAL ( class_name ) , ZSTR_LEN ( class_name ) , ""::"" , 2 , ZSTR_VAL ( const_name ) , ZSTR_LEN ( const_name ) )"		134541	0		=			
ANR	134706	CallExpression	Z_STR ( result )		134541	0					
ANR	134707	Callee	Z_STR		134541	0					
ANR	134708	Identifier	Z_STR		134541	0					
ANR	134709	ArgumentList	result		134541	1					
ANR	134710	Argument	result		134541	0					
ANR	134711	Identifier	result		134541	0					
ANR	134712	CallExpression	"zend_concat3 ( ZSTR_VAL ( class_name ) , ZSTR_LEN ( class_name ) , ""::"" , 2 , ZSTR_VAL ( const_name ) , ZSTR_LEN ( const_name ) )"		134541	1					
ANR	134713	Callee	zend_concat3		134541	0					
ANR	134714	Identifier	zend_concat3		134541	0					
ANR	134715	ArgumentList	ZSTR_VAL ( class_name )		134541	1					
ANR	134716	Argument	ZSTR_VAL ( class_name )		134541	0					
ANR	134717	CallExpression	ZSTR_VAL ( class_name )		134541	0					
ANR	134718	Callee	ZSTR_VAL		134541	0					
ANR	134719	Identifier	ZSTR_VAL		134541	0					
ANR	134720	ArgumentList	class_name		134541	1					
ANR	134721	Argument	class_name		134541	0					
ANR	134722	Identifier	class_name		134541	0					
ANR	134723	Argument	ZSTR_LEN ( class_name )		134541	1					
ANR	134724	CallExpression	ZSTR_LEN ( class_name )		134541	0					
ANR	134725	Callee	ZSTR_LEN		134541	0					
ANR	134726	Identifier	ZSTR_LEN		134541	0					
ANR	134727	ArgumentList	class_name		134541	1					
ANR	134728	Argument	class_name		134541	0					
ANR	134729	Identifier	class_name		134541	0					
ANR	134730	Argument	"""::"""		134541	2					
ANR	134731	PrimaryExpression	"""::"""		134541	0					
ANR	134732	Argument	2		134541	3					
ANR	134733	PrimaryExpression	2		134541	0					
ANR	134734	Argument	ZSTR_VAL ( const_name )		134541	4					
ANR	134735	CallExpression	ZSTR_VAL ( const_name )		134541	0					
ANR	134736	Callee	ZSTR_VAL		134541	0					
ANR	134737	Identifier	ZSTR_VAL		134541	0					
ANR	134738	ArgumentList	const_name		134541	1					
ANR	134739	Argument	const_name		134541	0					
ANR	134740	Identifier	const_name		134541	0					
ANR	134741	Argument	ZSTR_LEN ( const_name )		134541	5					
ANR	134742	CallExpression	ZSTR_LEN ( const_name )		134541	0					
ANR	134743	Callee	ZSTR_LEN		134541	0					
ANR	134744	Identifier	ZSTR_LEN		134541	0					
ANR	134745	ArgumentList	const_name		134541	1					
ANR	134746	Argument	const_name		134541	0					
ANR	134747	Identifier	const_name		134541	0					
ANR	134748	ExpressionStatement	Z_TYPE_INFO ( result ) = IS_CONSTANT_EX	6853:1:202700:202736	134541	14	True				
ANR	134749	AssignmentExpression	Z_TYPE_INFO ( result ) = IS_CONSTANT_EX		134541	0		=			
ANR	134750	CallExpression	Z_TYPE_INFO ( result )		134541	0					
ANR	134751	Callee	Z_TYPE_INFO		134541	0					
ANR	134752	Identifier	Z_TYPE_INFO		134541	0					
ANR	134753	ArgumentList	result		134541	1					
ANR	134754	Argument	result		134541	0					
ANR	134755	Identifier	result		134541	0					
ANR	134756	Identifier	IS_CONSTANT_EX		134541	1					
ANR	134757	ExpressionStatement	Z_CONST_FLAGS ( result ) = fetch_type	6854:1:202739:202773	134541	15	True				
ANR	134758	AssignmentExpression	Z_CONST_FLAGS ( result ) = fetch_type		134541	0		=			
ANR	134759	CallExpression	Z_CONST_FLAGS ( result )		134541	0					
ANR	134760	Callee	Z_CONST_FLAGS		134541	0					
ANR	134761	Identifier	Z_CONST_FLAGS		134541	0					
ANR	134762	ArgumentList	result		134541	1					
ANR	134763	Argument	result		134541	0					
ANR	134764	Identifier	result		134541	0					
ANR	134765	Identifier	fetch_type		134541	1					
ANR	134766	ExpressionStatement	zend_ast_destroy ( ast )	6856:1:202777:202798	134541	16	True				
ANR	134767	CallExpression	zend_ast_destroy ( ast )		134541	0					
ANR	134768	Callee	zend_ast_destroy		134541	0					
ANR	134769	Identifier	zend_ast_destroy		134541	0					
ANR	134770	ArgumentList	ast		134541	1					
ANR	134771	Argument	ast		134541	0					
ANR	134772	Identifier	ast		134541	0					
ANR	134773	ExpressionStatement	zend_string_release ( class_name )	6857:1:202801:202832	134541	17	True				
ANR	134774	CallExpression	zend_string_release ( class_name )		134541	0					
ANR	134775	Callee	zend_string_release		134541	0					
ANR	134776	Identifier	zend_string_release		134541	0					
ANR	134777	ArgumentList	class_name		134541	1					
ANR	134778	Argument	class_name		134541	0					
ANR	134779	Identifier	class_name		134541	0					
ANR	134780	ExpressionStatement	* ast_ptr = zend_ast_create_zval ( & result )	6859:1:202836:202876	134541	18	True				
ANR	134781	AssignmentExpression	* ast_ptr = zend_ast_create_zval ( & result )		134541	0		=			
ANR	134782	UnaryOperationExpression	* ast_ptr		134541	0					
ANR	134783	UnaryOperator	*		134541	0					
ANR	134784	Identifier	ast_ptr		134541	1					
ANR	134785	CallExpression	zend_ast_create_zval ( & result )		134541	1					
ANR	134786	Callee	zend_ast_create_zval		134541	0					
ANR	134787	Identifier	zend_ast_create_zval		134541	0					
ANR	134788	ArgumentList	& result		134541	1					
ANR	134789	Argument	& result		134541	0					
ANR	134790	UnaryOperationExpression	& result		134541	0					
ANR	134791	UnaryOperator	&		134541	0					
ANR	134792	Identifier	result		134541	1					
ANR	134793	ReturnType	void		134541	1					
ANR	134794	Identifier	zend_compile_const_expr_class_const		134541	2					
ANR	134795	ParameterList	zend_ast * * ast_ptr		134541	3					
ANR	134796	Parameter	zend_ast * * ast_ptr	6816:41:201605:201622	134541	0	True				
ANR	134797	ParameterType	zend_ast * *		134541	0					
ANR	134798	Identifier	ast_ptr		134541	1					
ANR	134799	CFGEntryNode	ENTRY		134541		True				
ANR	134800	CFGExitNode	EXIT		134541		True				
ANR	134801	Symbol	ZEND_FETCH_CLASS_DEFAULT		134541						
ANR	134802	Symbol	ast		134541						
ANR	134803	Symbol	zend_ast_create_zval		134541						
ANR	134804	Symbol	Z_CONST_FLAGS		134541						
ANR	134805	Symbol	const_name		134541						
ANR	134806	Symbol	E_COMPILE_ERROR		134541						
ANR	134807	Symbol	class_ast		134541						
ANR	134808	Symbol	Z_STR		134541						
ANR	134809	Symbol	result		134541						
ANR	134810	Symbol	* ast_ptr		134541						
ANR	134811	Symbol	* ast		134541						
ANR	134812	Symbol	zend_ast_get_str		134541						
ANR	134813	Symbol	* * ast		134541						
ANR	134814	Symbol	& result		134541						
ANR	134815	Symbol	ZEND_FETCH_CLASS_STATIC		134541						
ANR	134816	Symbol	ZEND_AST_ZVAL		134541						
ANR	134817	Symbol	Z_TYPE_INFO		134541						
ANR	134818	Symbol	class_name		134541						
ANR	134819	Symbol	zend_get_class_fetch_type		134541						
ANR	134820	Symbol	* class_ast		134541						
ANR	134821	Symbol	fetch_type		134541						
ANR	134822	Symbol	zend_resolve_class_name_ast		134541						
ANR	134823	Symbol	zend_try_compile_const_expr_resolve_class_name		134541						
ANR	134824	Symbol	zend_concat3		134541						
ANR	134825	Symbol	ZSTR_VAL		134541						
ANR	134826	Symbol	class_ast -> kind		134541						
ANR	134827	Symbol	const_ast		134541						
ANR	134828	Symbol	IS_CONSTANT_EX		134541						
ANR	134829	Symbol	ast_ptr		134541						
ANR	134830	Symbol	ZSTR_LEN		134541						
ANR	134831	Symbol	* ast -> child		134541						
ANR	134832	Symbol	ast -> child		134541						
ANR	134833	Function	zend_compile_const_expr_const	6863:0:202891:203661							
ANR	134834	FunctionDef	zend_compile_const_expr_const (zend_ast * * ast_ptr)		134833	0					
ANR	134835	CompoundStatement		6864:0:202956:203661	134833	0					
ANR	134836	IdentifierDeclStatement	zend_ast * ast = * ast_ptr ;	6865:1:202959:202983	134833	0	True				
ANR	134837	IdentifierDecl	* ast = * ast_ptr		134833	0					
ANR	134838	IdentifierDeclType	zend_ast *		134833	0					
ANR	134839	Identifier	ast		134833	1					
ANR	134840	AssignmentExpression	* ast = * ast_ptr		134833	2		=			
ANR	134841	Identifier	ast		134833	0					
ANR	134842	UnaryOperationExpression	* ast_ptr		134833	1					
ANR	134843	UnaryOperator	*		134833	0					
ANR	134844	Identifier	ast_ptr		134833	1					
ANR	134845	IdentifierDeclStatement	zend_ast * name_ast = ast -> child [ 0 ] ;	6866:1:202986:203020	134833	1	True				
ANR	134846	IdentifierDecl	* name_ast = ast -> child [ 0 ]		134833	0					
ANR	134847	IdentifierDeclType	zend_ast *		134833	0					
ANR	134848	Identifier	name_ast		134833	1					
ANR	134849	AssignmentExpression	* name_ast = ast -> child [ 0 ]		134833	2		=			
ANR	134850	Identifier	name_ast		134833	0					
ANR	134851	ArrayIndexing	ast -> child [ 0 ]		134833	1					
ANR	134852	PtrMemberAccess	ast -> child		134833	0					
ANR	134853	Identifier	ast		134833	0					
ANR	134854	Identifier	child		134833	1					
ANR	134855	PrimaryExpression	0		134833	1					
ANR	134856	IdentifierDeclStatement	zend_string * orig_name = zend_ast_get_str ( name_ast ) ;	6867:1:203023:203074	134833	2	True				
ANR	134857	IdentifierDecl	* orig_name = zend_ast_get_str ( name_ast )		134833	0					
ANR	134858	IdentifierDeclType	zend_string *		134833	0					
ANR	134859	Identifier	orig_name		134833	1					
ANR	134860	AssignmentExpression	* orig_name = zend_ast_get_str ( name_ast )		134833	2		=			
ANR	134861	Identifier	orig_name		134833	0					
ANR	134862	CallExpression	zend_ast_get_str ( name_ast )		134833	1					
ANR	134863	Callee	zend_ast_get_str		134833	0					
ANR	134864	Identifier	zend_ast_get_str		134833	0					
ANR	134865	ArgumentList	name_ast		134833	1					
ANR	134866	Argument	name_ast		134833	0					
ANR	134867	Identifier	name_ast		134833	0					
ANR	134868	IdentifierDeclStatement	zend_bool is_fully_qualified ;	6868:1:203077:203105	134833	3	True				
ANR	134869	IdentifierDecl	is_fully_qualified		134833	0					
ANR	134870	IdentifierDeclType	zend_bool		134833	0					
ANR	134871	Identifier	is_fully_qualified		134833	1					
ANR	134872	IdentifierDeclStatement	"zval result , resolved_name ;"	6870:1:203109:203135	134833	4	True				
ANR	134873	IdentifierDecl	result		134833	0					
ANR	134874	IdentifierDeclType	zval		134833	0					
ANR	134875	Identifier	result		134833	1					
ANR	134876	IdentifierDecl	resolved_name		134833	1					
ANR	134877	IdentifierDeclType	zval		134833	0					
ANR	134878	Identifier	resolved_name		134833	1					
ANR	134879	ExpressionStatement	"ZVAL_STR ( & resolved_name , zend_resolve_const_name ( orig_name , name_ast -> attr , & is_fully_qualified ) )"	6871:1:203138:203238	134833	5	True				
ANR	134880	CallExpression	"ZVAL_STR ( & resolved_name , zend_resolve_const_name ( orig_name , name_ast -> attr , & is_fully_qualified ) )"		134833	0					
ANR	134881	Callee	ZVAL_STR		134833	0					
ANR	134882	Identifier	ZVAL_STR		134833	0					
ANR	134883	ArgumentList	& resolved_name		134833	1					
ANR	134884	Argument	& resolved_name		134833	0					
ANR	134885	UnaryOperationExpression	& resolved_name		134833	0					
ANR	134886	UnaryOperator	&		134833	0					
ANR	134887	Identifier	resolved_name		134833	1					
ANR	134888	Argument	"zend_resolve_const_name ( orig_name , name_ast -> attr , & is_fully_qualified )"		134833	1					
ANR	134889	CallExpression	"zend_resolve_const_name ( orig_name , name_ast -> attr , & is_fully_qualified )"		134833	0					
ANR	134890	Callee	zend_resolve_const_name		134833	0					
ANR	134891	Identifier	zend_resolve_const_name		134833	0					
ANR	134892	ArgumentList	orig_name		134833	1					
ANR	134893	Argument	orig_name		134833	0					
ANR	134894	Identifier	orig_name		134833	0					
ANR	134895	Argument	name_ast -> attr		134833	1					
ANR	134896	PtrMemberAccess	name_ast -> attr		134833	0					
ANR	134897	Identifier	name_ast		134833	0					
ANR	134898	Identifier	attr		134833	1					
ANR	134899	Argument	& is_fully_qualified		134833	2					
ANR	134900	UnaryOperationExpression	& is_fully_qualified		134833	0					
ANR	134901	UnaryOperator	&		134833	0					
ANR	134902	Identifier	is_fully_qualified		134833	1					
ANR	134903	IfStatement	"if ( zend_try_ct_eval_const ( & result , Z_STR ( resolved_name ) , is_fully_qualified ) )"		134833	6					
ANR	134904	Condition	"zend_try_ct_eval_const ( & result , Z_STR ( resolved_name ) , is_fully_qualified )"	6874:5:203246:203318	134833	0	True				
ANR	134905	CallExpression	"zend_try_ct_eval_const ( & result , Z_STR ( resolved_name ) , is_fully_qualified )"		134833	0					
ANR	134906	Callee	zend_try_ct_eval_const		134833	0					
ANR	134907	Identifier	zend_try_ct_eval_const		134833	0					
ANR	134908	ArgumentList	& result		134833	1					
ANR	134909	Argument	& result		134833	0					
ANR	134910	UnaryOperationExpression	& result		134833	0					
ANR	134911	UnaryOperator	&		134833	0					
ANR	134912	Identifier	result		134833	1					
ANR	134913	Argument	Z_STR ( resolved_name )		134833	1					
ANR	134914	CallExpression	Z_STR ( resolved_name )		134833	0					
ANR	134915	Callee	Z_STR		134833	0					
ANR	134916	Identifier	Z_STR		134833	0					
ANR	134917	ArgumentList	resolved_name		134833	1					
ANR	134918	Argument	resolved_name		134833	0					
ANR	134919	Identifier	resolved_name		134833	0					
ANR	134920	Argument	is_fully_qualified		134833	2					
ANR	134921	Identifier	is_fully_qualified		134833	0					
ANR	134922	CompoundStatement		11:80:364:364	134833	1					
ANR	134923	ExpressionStatement	zend_string_release ( Z_STR ( resolved_name ) )	6875:2:203325:203366	134833	0	True				
ANR	134924	CallExpression	zend_string_release ( Z_STR ( resolved_name ) )		134833	0					
ANR	134925	Callee	zend_string_release		134833	0					
ANR	134926	Identifier	zend_string_release		134833	0					
ANR	134927	ArgumentList	Z_STR ( resolved_name )		134833	1					
ANR	134928	Argument	Z_STR ( resolved_name )		134833	0					
ANR	134929	CallExpression	Z_STR ( resolved_name )		134833	0					
ANR	134930	Callee	Z_STR		134833	0					
ANR	134931	Identifier	Z_STR		134833	0					
ANR	134932	ArgumentList	resolved_name		134833	1					
ANR	134933	Argument	resolved_name		134833	0					
ANR	134934	Identifier	resolved_name		134833	0					
ANR	134935	ExpressionStatement	zend_ast_destroy ( ast )	6876:2:203370:203391	134833	1	True				
ANR	134936	CallExpression	zend_ast_destroy ( ast )		134833	0					
ANR	134937	Callee	zend_ast_destroy		134833	0					
ANR	134938	Identifier	zend_ast_destroy		134833	0					
ANR	134939	ArgumentList	ast		134833	1					
ANR	134940	Argument	ast		134833	0					
ANR	134941	Identifier	ast		134833	0					
ANR	134942	ExpressionStatement	* ast_ptr = zend_ast_create_zval ( & result )	6877:2:203395:203435	134833	2	True				
ANR	134943	AssignmentExpression	* ast_ptr = zend_ast_create_zval ( & result )		134833	0		=			
ANR	134944	UnaryOperationExpression	* ast_ptr		134833	0					
ANR	134945	UnaryOperator	*		134833	0					
ANR	134946	Identifier	ast_ptr		134833	1					
ANR	134947	CallExpression	zend_ast_create_zval ( & result )		134833	1					
ANR	134948	Callee	zend_ast_create_zval		134833	0					
ANR	134949	Identifier	zend_ast_create_zval		134833	0					
ANR	134950	ArgumentList	& result		134833	1					
ANR	134951	Argument	& result		134833	0					
ANR	134952	UnaryOperationExpression	& result		134833	0					
ANR	134953	UnaryOperator	&		134833	0					
ANR	134954	Identifier	result		134833	1					
ANR	134955	ReturnStatement	return ;	6878:2:203439:203445	134833	3	True				
ANR	134956	ExpressionStatement	Z_TYPE_INFO ( resolved_name ) = IS_CONSTANT_EX	6881:1:203452:203495	134833	7	True				
ANR	134957	AssignmentExpression	Z_TYPE_INFO ( resolved_name ) = IS_CONSTANT_EX		134833	0		=			
ANR	134958	CallExpression	Z_TYPE_INFO ( resolved_name )		134833	0					
ANR	134959	Callee	Z_TYPE_INFO		134833	0					
ANR	134960	Identifier	Z_TYPE_INFO		134833	0					
ANR	134961	ArgumentList	resolved_name		134833	1					
ANR	134962	Argument	resolved_name		134833	0					
ANR	134963	Identifier	resolved_name		134833	0					
ANR	134964	Identifier	IS_CONSTANT_EX		134833	1					
ANR	134965	IfStatement	if ( ! is_fully_qualified )		134833	8					
ANR	134966	Condition	! is_fully_qualified	6882:5:203502:203520	134833	0	True				
ANR	134967	UnaryOperationExpression	! is_fully_qualified		134833	0					
ANR	134968	UnaryOperator	!		134833	0					
ANR	134969	Identifier	is_fully_qualified		134833	1					
ANR	134970	CompoundStatement		19:26:566:566	134833	1					
ANR	134971	ExpressionStatement	Z_CONST_FLAGS ( resolved_name ) = IS_CONSTANT_UNQUALIFIED	6883:2:203527:203581	134833	0	True				
ANR	134972	AssignmentExpression	Z_CONST_FLAGS ( resolved_name ) = IS_CONSTANT_UNQUALIFIED		134833	0		=			
ANR	134973	CallExpression	Z_CONST_FLAGS ( resolved_name )		134833	0					
ANR	134974	Callee	Z_CONST_FLAGS		134833	0					
ANR	134975	Identifier	Z_CONST_FLAGS		134833	0					
ANR	134976	ArgumentList	resolved_name		134833	1					
ANR	134977	Argument	resolved_name		134833	0					
ANR	134978	Identifier	resolved_name		134833	0					
ANR	134979	Identifier	IS_CONSTANT_UNQUALIFIED		134833	1					
ANR	134980	ExpressionStatement	zend_ast_destroy ( ast )	6886:1:203588:203609	134833	9	True				
ANR	134981	CallExpression	zend_ast_destroy ( ast )		134833	0					
ANR	134982	Callee	zend_ast_destroy		134833	0					
ANR	134983	Identifier	zend_ast_destroy		134833	0					
ANR	134984	ArgumentList	ast		134833	1					
ANR	134985	Argument	ast		134833	0					
ANR	134986	Identifier	ast		134833	0					
ANR	134987	ExpressionStatement	* ast_ptr = zend_ast_create_zval ( & resolved_name )	6887:1:203612:203659	134833	10	True				
ANR	134988	AssignmentExpression	* ast_ptr = zend_ast_create_zval ( & resolved_name )		134833	0		=			
ANR	134989	UnaryOperationExpression	* ast_ptr		134833	0					
ANR	134990	UnaryOperator	*		134833	0					
ANR	134991	Identifier	ast_ptr		134833	1					
ANR	134992	CallExpression	zend_ast_create_zval ( & resolved_name )		134833	1					
ANR	134993	Callee	zend_ast_create_zval		134833	0					
ANR	134994	Identifier	zend_ast_create_zval		134833	0					
ANR	134995	ArgumentList	& resolved_name		134833	1					
ANR	134996	Argument	& resolved_name		134833	0					
ANR	134997	UnaryOperationExpression	& resolved_name		134833	0					
ANR	134998	UnaryOperator	&		134833	0					
ANR	134999	Identifier	resolved_name		134833	1					
ANR	135000	ReturnType	void		134833	1					
ANR	135001	Identifier	zend_compile_const_expr_const		134833	2					
ANR	135002	ParameterList	zend_ast * * ast_ptr		134833	3					
ANR	135003	Parameter	zend_ast * * ast_ptr	6863:35:202926:202943	134833	0	True				
ANR	135004	ParameterType	zend_ast * *		134833	0					
ANR	135005	Identifier	ast_ptr		134833	1					
ANR	135006	CFGEntryNode	ENTRY		134833		True				
ANR	135007	CFGExitNode	EXIT		134833		True				
ANR	135008	Symbol	ast		134833						
ANR	135009	Symbol	zend_ast_create_zval		134833						
ANR	135010	Symbol	Z_CONST_FLAGS		134833						
ANR	135011	Symbol	Z_STR		134833						
ANR	135012	Symbol	name_ast -> attr		134833						
ANR	135013	Symbol	result		134833						
ANR	135014	Symbol	* name_ast		134833						
ANR	135015	Symbol	* ast_ptr		134833						
ANR	135016	Symbol	* ast		134833						
ANR	135017	Symbol	zend_ast_get_str		134833						
ANR	135018	Symbol	IS_CONSTANT_UNQUALIFIED		134833						
ANR	135019	Symbol	* * ast		134833						
ANR	135020	Symbol	& result		134833						
ANR	135021	Symbol	orig_name		134833						
ANR	135022	Symbol	& resolved_name		134833						
ANR	135023	Symbol	Z_TYPE_INFO		134833						
ANR	135024	Symbol	& is_fully_qualified		134833						
ANR	135025	Symbol	resolved_name		134833						
ANR	135026	Symbol	is_fully_qualified		134833						
ANR	135027	Symbol	zend_try_ct_eval_const		134833						
ANR	135028	Symbol	IS_CONSTANT_EX		134833						
ANR	135029	Symbol	name_ast		134833						
ANR	135030	Symbol	ast_ptr		134833						
ANR	135031	Symbol	zend_resolve_const_name		134833						
ANR	135032	Symbol	* ast -> child		134833						
ANR	135033	Symbol	ast -> child		134833						
ANR	135034	Function	zend_compile_const_expr_magic_const	6891:0:203674:204241							
ANR	135035	FunctionDef	zend_compile_const_expr_magic_const (zend_ast * * ast_ptr)		135034	0					
ANR	135036	CompoundStatement		6892:0:203745:204241	135034	0					
ANR	135037	IdentifierDeclStatement	zend_ast * ast = * ast_ptr ;	6893:1:203748:203772	135034	0	True				
ANR	135038	IdentifierDecl	* ast = * ast_ptr		135034	0					
ANR	135039	IdentifierDeclType	zend_ast *		135034	0					
ANR	135040	Identifier	ast		135034	1					
ANR	135041	AssignmentExpression	* ast = * ast_ptr		135034	2		=			
ANR	135042	Identifier	ast		135034	0					
ANR	135043	UnaryOperationExpression	* ast_ptr		135034	1					
ANR	135044	UnaryOperator	*		135034	0					
ANR	135045	Identifier	ast_ptr		135034	1					
ANR	135046	ExpressionStatement	ZEND_ASSERT ( ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0 )	6896:1:203832:203979	135034	1	True				
ANR	135047	CallExpression	ZEND_ASSERT ( ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0 )		135034	0					
ANR	135048	Callee	ZEND_ASSERT		135034	0					
ANR	135049	Identifier	ZEND_ASSERT		135034	0					
ANR	135050	ArgumentList	ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		135034	1					
ANR	135051	Argument	ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		135034	0					
ANR	135052	AndExpression	ast -> attr == T_CLASS_C && CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		135034	0		&&			
ANR	135053	EqualityExpression	ast -> attr == T_CLASS_C		135034	0		==			
ANR	135054	PtrMemberAccess	ast -> attr		135034	0					
ANR	135055	Identifier	ast		135034	0					
ANR	135056	Identifier	attr		135034	1					
ANR	135057	Identifier	T_CLASS_C		135034	1					
ANR	135058	AndExpression	CG ( active_class_entry ) && ( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		135034	1		&&			
ANR	135059	CallExpression	CG ( active_class_entry )		135034	0					
ANR	135060	Callee	CG		135034	0					
ANR	135061	Identifier	CG		135034	0					
ANR	135062	ArgumentList	active_class_entry		135034	1					
ANR	135063	Argument	active_class_entry		135034	0					
ANR	135064	Identifier	active_class_entry		135034	0					
ANR	135065	EqualityExpression	( CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT ) != 0		135034	1		!=			
ANR	135066	BitAndExpression	CG ( active_class_entry ) -> ce_flags & ZEND_ACC_TRAIT		135034	0		&			
ANR	135067	PtrMemberAccess	CG ( active_class_entry ) -> ce_flags		135034	0					
ANR	135068	CallExpression	CG ( active_class_entry )		135034	0					
ANR	135069	Callee	CG		135034	0					
ANR	135070	Identifier	CG		135034	0					
ANR	135071	ArgumentList	active_class_entry		135034	1					
ANR	135072	Argument	active_class_entry		135034	0					
ANR	135073	Identifier	active_class_entry		135034	0					
ANR	135074	Identifier	ce_flags		135034	1					
ANR	135075	Identifier	ZEND_ACC_TRAIT		135034	1					
ANR	135076	PrimaryExpression	0		135034	1					
ANR	135077	CompoundStatement		10:2:241:254	135034	2					
ANR	135078	IdentifierDeclStatement	zval const_zv ;	6901:2:203987:204000	135034	0	True				
ANR	135079	IdentifierDecl	const_zv		135034	0					
ANR	135080	IdentifierDeclType	zval		135034	0					
ANR	135081	Identifier	const_zv		135034	1					
ANR	135082	ExpressionStatement	"Z_STR ( const_zv ) = zend_string_init ( ""__CLASS__"" , sizeof ( ""__CLASS__"" ) - 1 , 0 )"	6902:2:204004:204077	135034	1	True				
ANR	135083	AssignmentExpression	"Z_STR ( const_zv ) = zend_string_init ( ""__CLASS__"" , sizeof ( ""__CLASS__"" ) - 1 , 0 )"		135034	0		=			
ANR	135084	CallExpression	Z_STR ( const_zv )		135034	0					
ANR	135085	Callee	Z_STR		135034	0					
ANR	135086	Identifier	Z_STR		135034	0					
ANR	135087	ArgumentList	const_zv		135034	1					
ANR	135088	Argument	const_zv		135034	0					
ANR	135089	Identifier	const_zv		135034	0					
ANR	135090	CallExpression	"zend_string_init ( ""__CLASS__"" , sizeof ( ""__CLASS__"" ) - 1 , 0 )"		135034	1					
ANR	135091	Callee	zend_string_init		135034	0					
ANR	135092	Identifier	zend_string_init		135034	0					
ANR	135093	ArgumentList	"""__CLASS__"""		135034	1					
ANR	135094	Argument	"""__CLASS__"""		135034	0					
ANR	135095	PrimaryExpression	"""__CLASS__"""		135034	0					
ANR	135096	Argument	"sizeof ( ""__CLASS__"" ) - 1"		135034	1					
ANR	135097	AdditiveExpression	"sizeof ( ""__CLASS__"" ) - 1"		135034	0		-			
ANR	135098	SizeofExpression	"sizeof ( ""__CLASS__"" )"		135034	0					
ANR	135099	Sizeof	sizeof		135034	0					
ANR	135100	PrimaryExpression	"""__CLASS__"""		135034	1					
ANR	135101	PrimaryExpression	1		135034	1					
ANR	135102	Argument	0		135034	2					
ANR	135103	PrimaryExpression	0		135034	0					
ANR	135104	ExpressionStatement	Z_TYPE_INFO ( const_zv ) = IS_CONSTANT_EX | ( IS_CONSTANT_CLASS << Z_CONST_FLAGS_SHIFT )	6903:2:204081:204164	135034	2	True				
ANR	135105	AssignmentExpression	Z_TYPE_INFO ( const_zv ) = IS_CONSTANT_EX | ( IS_CONSTANT_CLASS << Z_CONST_FLAGS_SHIFT )		135034	0		=			
ANR	135106	CallExpression	Z_TYPE_INFO ( const_zv )		135034	0					
ANR	135107	Callee	Z_TYPE_INFO		135034	0					
ANR	135108	Identifier	Z_TYPE_INFO		135034	0					
ANR	135109	ArgumentList	const_zv		135034	1					
ANR	135110	Argument	const_zv		135034	0					
ANR	135111	Identifier	const_zv		135034	0					
ANR	135112	InclusiveOrExpression	IS_CONSTANT_EX | ( IS_CONSTANT_CLASS << Z_CONST_FLAGS_SHIFT )		135034	1		|			
ANR	135113	Identifier	IS_CONSTANT_EX		135034	0					
ANR	135114	ShiftExpression	IS_CONSTANT_CLASS << Z_CONST_FLAGS_SHIFT		135034	1		<<			
ANR	135115	Identifier	IS_CONSTANT_CLASS		135034	0					
ANR	135116	Identifier	Z_CONST_FLAGS_SHIFT		135034	1					
ANR	135117	ExpressionStatement	zend_ast_destroy ( ast )	6905:2:204169:204190	135034	3	True				
ANR	135118	CallExpression	zend_ast_destroy ( ast )		135034	0					
ANR	135119	Callee	zend_ast_destroy		135034	0					
ANR	135120	Identifier	zend_ast_destroy		135034	0					
ANR	135121	ArgumentList	ast		135034	1					
ANR	135122	Argument	ast		135034	0					
ANR	135123	Identifier	ast		135034	0					
ANR	135124	ExpressionStatement	* ast_ptr = zend_ast_create_zval ( & const_zv )	6906:2:204194:204236	135034	4	True				
ANR	135125	AssignmentExpression	* ast_ptr = zend_ast_create_zval ( & const_zv )		135034	0		=			
ANR	135126	UnaryOperationExpression	* ast_ptr		135034	0					
ANR	135127	UnaryOperator	*		135034	0					
ANR	135128	Identifier	ast_ptr		135034	1					
ANR	135129	CallExpression	zend_ast_create_zval ( & const_zv )		135034	1					
ANR	135130	Callee	zend_ast_create_zval		135034	0					
ANR	135131	Identifier	zend_ast_create_zval		135034	0					
ANR	135132	ArgumentList	& const_zv		135034	1					
ANR	135133	Argument	& const_zv		135034	0					
ANR	135134	UnaryOperationExpression	& const_zv		135034	0					
ANR	135135	UnaryOperator	&		135034	0					
ANR	135136	Identifier	const_zv		135034	1					
ANR	135137	ReturnType	void		135034	1					
ANR	135138	Identifier	zend_compile_const_expr_magic_const		135034	2					
ANR	135139	ParameterList	zend_ast * * ast_ptr		135034	3					
ANR	135140	Parameter	zend_ast * * ast_ptr	6891:41:203715:203732	135034	0	True				
ANR	135141	ParameterType	zend_ast * *		135034	0					
ANR	135142	Identifier	ast_ptr		135034	1					
ANR	135143	CFGEntryNode	ENTRY		135034		True				
ANR	135144	CFGExitNode	EXIT		135034		True				
ANR	135145	Symbol	ast -> attr		135034						
ANR	135146	Symbol	T_CLASS_C		135034						
ANR	135147	Symbol	ast		135034						
ANR	135148	Symbol	CG		135034						
ANR	135149	Symbol	zend_ast_create_zval		135034						
ANR	135150	Symbol	active_class_entry		135034						
ANR	135151	Symbol	Z_CONST_FLAGS_SHIFT		135034						
ANR	135152	Symbol	* CG		135034						
ANR	135153	Symbol	IS_CONSTANT_CLASS		135034						
ANR	135154	Symbol	Z_STR		135034						
ANR	135155	Symbol	& const_zv		135034						
ANR	135156	Symbol	ZEND_ACC_TRAIT		135034						
ANR	135157	Symbol	zend_string_init		135034						
ANR	135158	Symbol	* ast_ptr		135034						
ANR	135159	Symbol	* ast		135034						
ANR	135160	Symbol	IS_CONSTANT_EX		135034						
ANR	135161	Symbol	ast_ptr		135034						
ANR	135162	Symbol	CG ( active_class_entry ) -> ce_flags		135034						
ANR	135163	Symbol	Z_TYPE_INFO		135034						
ANR	135164	Symbol	const_zv		135034						
ANR	135165	Function	zend_compile_const_expr	6911:0:204254:204898							
ANR	135166	FunctionDef	zend_compile_const_expr (zend_ast * * ast_ptr)		135165	0					
ANR	135167	CompoundStatement		6912:0:204313:204898	135165	0					
ANR	135168	IdentifierDeclStatement	zend_ast * ast = * ast_ptr ;	6913:1:204316:204340	135165	0	True				
ANR	135169	IdentifierDecl	* ast = * ast_ptr		135165	0					
ANR	135170	IdentifierDeclType	zend_ast *		135165	0					
ANR	135171	Identifier	ast		135165	1					
ANR	135172	AssignmentExpression	* ast = * ast_ptr		135165	2		=			
ANR	135173	Identifier	ast		135165	0					
ANR	135174	UnaryOperationExpression	* ast_ptr		135165	1					
ANR	135175	UnaryOperator	*		135165	0					
ANR	135176	Identifier	ast_ptr		135165	1					
ANR	135177	IfStatement	if ( ast == NULL || ast -> kind == ZEND_AST_ZVAL )		135165	1					
ANR	135178	Condition	ast == NULL || ast -> kind == ZEND_AST_ZVAL	6914:5:204347:204387	135165	0	True				
ANR	135179	OrExpression	ast == NULL || ast -> kind == ZEND_AST_ZVAL		135165	0		||			
ANR	135180	EqualityExpression	ast == NULL		135165	0		==			
ANR	135181	Identifier	ast		135165	0					
ANR	135182	Identifier	NULL		135165	1					
ANR	135183	EqualityExpression	ast -> kind == ZEND_AST_ZVAL		135165	1		==			
ANR	135184	PtrMemberAccess	ast -> kind		135165	0					
ANR	135185	Identifier	ast		135165	0					
ANR	135186	Identifier	kind		135165	1					
ANR	135187	Identifier	ZEND_AST_ZVAL		135165	1					
ANR	135188	CompoundStatement		3:48:76:76	135165	1					
ANR	135189	ReturnStatement	return ;	6915:2:204394:204400	135165	0	True				
ANR	135190	IfStatement	if ( ! zend_is_allowed_in_const_expr ( ast -> kind ) )		135165	2					
ANR	135191	Condition	! zend_is_allowed_in_const_expr ( ast -> kind )	6918:5:204411:204451	135165	0	True				
ANR	135192	UnaryOperationExpression	! zend_is_allowed_in_const_expr ( ast -> kind )		135165	0					
ANR	135193	UnaryOperator	!		135165	0					
ANR	135194	CallExpression	zend_is_allowed_in_const_expr ( ast -> kind )		135165	1					
ANR	135195	Callee	zend_is_allowed_in_const_expr		135165	0					
ANR	135196	Identifier	zend_is_allowed_in_const_expr		135165	0					
ANR	135197	ArgumentList	ast -> kind		135165	1					
ANR	135198	Argument	ast -> kind		135165	0					
ANR	135199	PtrMemberAccess	ast -> kind		135165	0					
ANR	135200	Identifier	ast		135165	0					
ANR	135201	Identifier	kind		135165	1					
ANR	135202	CompoundStatement		7:48:140:140	135165	1					
ANR	135203	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Constant expression contains invalid operations"" )"	6919:2:204458:204545	135165	0	True				
ANR	135204	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Constant expression contains invalid operations"" )"		135165	0					
ANR	135205	Callee	zend_error_noreturn		135165	0					
ANR	135206	Identifier	zend_error_noreturn		135165	0					
ANR	135207	ArgumentList	E_COMPILE_ERROR		135165	1					
ANR	135208	Argument	E_COMPILE_ERROR		135165	0					
ANR	135209	Identifier	E_COMPILE_ERROR		135165	0					
ANR	135210	Argument	"""Constant expression contains invalid operations"""		135165	1					
ANR	135211	PrimaryExpression	"""Constant expression contains invalid operations"""		135165	0					
ANR	135212	SwitchStatement	switch ( ast -> kind )		135165	3					
ANR	135213	Condition	ast -> kind	6922:9:204560:204568	135165	0	True				
ANR	135214	PtrMemberAccess	ast -> kind		135165	0					
ANR	135215	Identifier	ast		135165	0					
ANR	135216	Identifier	kind		135165	1					
ANR	135217	CompoundStatement		11:20:257:257	135165	1					
ANR	135218	Label	case ZEND_AST_CLASS_CONST :	6923:2:204575:204600	135165	0	True				
ANR	135219	Identifier	ZEND_AST_CLASS_CONST		135165	0					
ANR	135220	ExpressionStatement	zend_compile_const_expr_class_const ( ast_ptr )	6924:3:204605:204649	135165	1	True				
ANR	135221	CallExpression	zend_compile_const_expr_class_const ( ast_ptr )		135165	0					
ANR	135222	Callee	zend_compile_const_expr_class_const		135165	0					
ANR	135223	Identifier	zend_compile_const_expr_class_const		135165	0					
ANR	135224	ArgumentList	ast_ptr		135165	1					
ANR	135225	Argument	ast_ptr		135165	0					
ANR	135226	Identifier	ast_ptr		135165	0					
ANR	135227	BreakStatement	break ;	6925:3:204654:204659	135165	2	True				
ANR	135228	Label	case ZEND_AST_CONST :	6926:2:204663:204682	135165	3	True				
ANR	135229	Identifier	ZEND_AST_CONST		135165	0					
ANR	135230	ExpressionStatement	zend_compile_const_expr_const ( ast_ptr )	6927:3:204687:204725	135165	4	True				
ANR	135231	CallExpression	zend_compile_const_expr_const ( ast_ptr )		135165	0					
ANR	135232	Callee	zend_compile_const_expr_const		135165	0					
ANR	135233	Identifier	zend_compile_const_expr_const		135165	0					
ANR	135234	ArgumentList	ast_ptr		135165	1					
ANR	135235	Argument	ast_ptr		135165	0					
ANR	135236	Identifier	ast_ptr		135165	0					
ANR	135237	BreakStatement	break ;	6928:3:204730:204735	135165	5	True				
ANR	135238	Label	case ZEND_AST_MAGIC_CONST :	6929:2:204739:204764	135165	6	True				
ANR	135239	Identifier	ZEND_AST_MAGIC_CONST		135165	0					
ANR	135240	ExpressionStatement	zend_compile_const_expr_magic_const ( ast_ptr )	6930:3:204769:204813	135165	7	True				
ANR	135241	CallExpression	zend_compile_const_expr_magic_const ( ast_ptr )		135165	0					
ANR	135242	Callee	zend_compile_const_expr_magic_const		135165	0					
ANR	135243	Identifier	zend_compile_const_expr_magic_const		135165	0					
ANR	135244	ArgumentList	ast_ptr		135165	1					
ANR	135245	Argument	ast_ptr		135165	0					
ANR	135246	Identifier	ast_ptr		135165	0					
ANR	135247	BreakStatement	break ;	6931:3:204818:204823	135165	8	True				
ANR	135248	Label	default :	6932:2:204827:204834	135165	9	True				
ANR	135249	Identifier	default		135165	0					
ANR	135250	ExpressionStatement	"zend_ast_apply ( ast , zend_compile_const_expr )"	6933:3:204839:204883	135165	10	True				
ANR	135251	CallExpression	"zend_ast_apply ( ast , zend_compile_const_expr )"		135165	0					
ANR	135252	Callee	zend_ast_apply		135165	0					
ANR	135253	Identifier	zend_ast_apply		135165	0					
ANR	135254	ArgumentList	ast		135165	1					
ANR	135255	Argument	ast		135165	0					
ANR	135256	Identifier	ast		135165	0					
ANR	135257	Argument	zend_compile_const_expr		135165	1					
ANR	135258	Identifier	zend_compile_const_expr		135165	0					
ANR	135259	BreakStatement	break ;	6934:3:204888:204893	135165	11	True				
ANR	135260	ReturnType	void		135165	1					
ANR	135261	Identifier	zend_compile_const_expr		135165	2					
ANR	135262	ParameterList	zend_ast * * ast_ptr		135165	3					
ANR	135263	Parameter	zend_ast * * ast_ptr	6911:29:204283:204300	135165	0	True				
ANR	135264	ParameterType	zend_ast * *		135165	0					
ANR	135265	Identifier	ast_ptr		135165	1					
ANR	135266	CFGEntryNode	ENTRY		135165		True				
ANR	135267	CFGExitNode	EXIT		135165		True				
ANR	135268	Symbol	* ast_ptr		135165						
ANR	135269	Symbol	ast -> kind		135165						
ANR	135270	Symbol	ast		135165						
ANR	135271	Symbol	* ast		135165						
ANR	135272	Symbol	NULL		135165						
ANR	135273	Symbol	zend_is_allowed_in_const_expr		135165						
ANR	135274	Symbol	zend_compile_const_expr		135165						
ANR	135275	Symbol	ZEND_AST_ZVAL		135165						
ANR	135276	Symbol	E_COMPILE_ERROR		135165						
ANR	135277	Symbol	ast_ptr		135165						
ANR	135278	Function	zend_const_expr_to_zval	6939:0:204911:205394							
ANR	135279	FunctionDef	"zend_const_expr_to_zval (zval * result , zend_ast * ast)"		135278	0					
ANR	135280	CompoundStatement		6940:0:204979:205394	135278	0					
ANR	135281	IdentifierDeclStatement	zend_ast * orig_ast = ast ;	6941:1:204982:205006	135278	0	True				
ANR	135282	IdentifierDecl	* orig_ast = ast		135278	0					
ANR	135283	IdentifierDeclType	zend_ast *		135278	0					
ANR	135284	Identifier	orig_ast		135278	1					
ANR	135285	AssignmentExpression	* orig_ast = ast		135278	2		=			
ANR	135286	Identifier	ast		135278	0					
ANR	135287	Identifier	ast		135278	1					
ANR	135288	ExpressionStatement	zend_eval_const_expr ( & ast )	6942:1:205009:205035	135278	1	True				
ANR	135289	CallExpression	zend_eval_const_expr ( & ast )		135278	0					
ANR	135290	Callee	zend_eval_const_expr		135278	0					
ANR	135291	Identifier	zend_eval_const_expr		135278	0					
ANR	135292	ArgumentList	& ast		135278	1					
ANR	135293	Argument	& ast		135278	0					
ANR	135294	UnaryOperationExpression	& ast		135278	0					
ANR	135295	UnaryOperator	&		135278	0					
ANR	135296	Identifier	ast		135278	1					
ANR	135297	ExpressionStatement	zend_compile_const_expr ( & ast )	6943:1:205038:205067	135278	2	True				
ANR	135298	CallExpression	zend_compile_const_expr ( & ast )		135278	0					
ANR	135299	Callee	zend_compile_const_expr		135278	0					
ANR	135300	Identifier	zend_compile_const_expr		135278	0					
ANR	135301	ArgumentList	& ast		135278	1					
ANR	135302	Argument	& ast		135278	0					
ANR	135303	UnaryOperationExpression	& ast		135278	0					
ANR	135304	UnaryOperator	&		135278	0					
ANR	135305	Identifier	ast		135278	1					
ANR	135306	IfStatement	if ( ast -> kind == ZEND_AST_ZVAL )		135278	3					
ANR	135307	Condition	ast -> kind == ZEND_AST_ZVAL	6944:5:205074:205099	135278	0	True				
ANR	135308	EqualityExpression	ast -> kind == ZEND_AST_ZVAL		135278	0		==			
ANR	135309	PtrMemberAccess	ast -> kind		135278	0					
ANR	135310	Identifier	ast		135278	0					
ANR	135311	Identifier	kind		135278	1					
ANR	135312	Identifier	ZEND_AST_ZVAL		135278	1					
ANR	135313	CompoundStatement		5:33:122:122	135278	1					
ANR	135314	ExpressionStatement	"ZVAL_COPY_VALUE ( result , zend_ast_get_zval ( ast ) )"	6945:2:205106:205153	135278	0	True				
ANR	135315	CallExpression	"ZVAL_COPY_VALUE ( result , zend_ast_get_zval ( ast ) )"		135278	0					
ANR	135316	Callee	ZVAL_COPY_VALUE		135278	0					
ANR	135317	Identifier	ZVAL_COPY_VALUE		135278	0					
ANR	135318	ArgumentList	result		135278	1					
ANR	135319	Argument	result		135278	0					
ANR	135320	Identifier	result		135278	0					
ANR	135321	Argument	zend_ast_get_zval ( ast )		135278	1					
ANR	135322	CallExpression	zend_ast_get_zval ( ast )		135278	0					
ANR	135323	Callee	zend_ast_get_zval		135278	0					
ANR	135324	Identifier	zend_ast_get_zval		135278	0					
ANR	135325	ArgumentList	ast		135278	1					
ANR	135326	Argument	ast		135278	0					
ANR	135327	Identifier	ast		135278	0					
ANR	135328	ExpressionStatement	orig_ast -> kind = 0	6950:2:205317:205335	135278	1	True				
ANR	135329	AssignmentExpression	orig_ast -> kind = 0		135278	0		=			
ANR	135330	PtrMemberAccess	orig_ast -> kind		135278	0					
ANR	135331	Identifier	orig_ast		135278	0					
ANR	135332	Identifier	kind		135278	1					
ANR	135333	PrimaryExpression	0		135278	1					
ANR	135334	ElseStatement	else		135278	0					
ANR	135335	CompoundStatement		12:8:365:365	135278	0					
ANR	135336	ExpressionStatement	"ZVAL_NEW_AST ( result , zend_ast_copy ( ast ) )"	6952:2:205349:205389	135278	0	True				
ANR	135337	CallExpression	"ZVAL_NEW_AST ( result , zend_ast_copy ( ast ) )"		135278	0					
ANR	135338	Callee	ZVAL_NEW_AST		135278	0					
ANR	135339	Identifier	ZVAL_NEW_AST		135278	0					
ANR	135340	ArgumentList	result		135278	1					
ANR	135341	Argument	result		135278	0					
ANR	135342	Identifier	result		135278	0					
ANR	135343	Argument	zend_ast_copy ( ast )		135278	1					
ANR	135344	CallExpression	zend_ast_copy ( ast )		135278	0					
ANR	135345	Callee	zend_ast_copy		135278	0					
ANR	135346	Identifier	zend_ast_copy		135278	0					
ANR	135347	ArgumentList	ast		135278	1					
ANR	135348	Argument	ast		135278	0					
ANR	135349	Identifier	ast		135278	0					
ANR	135350	ReturnType	void		135278	1					
ANR	135351	Identifier	zend_const_expr_to_zval		135278	2					
ANR	135352	ParameterList	"zval * result , zend_ast * ast"		135278	3					
ANR	135353	Parameter	zval * result	6939:29:204940:204951	135278	0	True				
ANR	135354	ParameterType	zval *		135278	0					
ANR	135355	Identifier	result		135278	1					
ANR	135356	Parameter	zend_ast * ast	6939:43:204954:204966	135278	1	True				
ANR	135357	ParameterType	zend_ast *		135278	0					
ANR	135358	Identifier	ast		135278	1					
ANR	135359	CFGEntryNode	ENTRY		135278		True				
ANR	135360	CFGExitNode	EXIT		135278		True				
ANR	135361	Symbol	result		135278						
ANR	135362	Symbol	orig_ast -> kind		135278						
ANR	135363	Symbol	ast -> kind		135278						
ANR	135364	Symbol	* orig_ast		135278						
ANR	135365	Symbol	ast		135278						
ANR	135366	Symbol	* ast		135278						
ANR	135367	Symbol	ZEND_AST_ZVAL		135278						
ANR	135368	Symbol	orig_ast		135278						
ANR	135369	Symbol	zend_ast_copy		135278						
ANR	135370	Symbol	zend_ast_get_zval		135278						
ANR	135371	Symbol	& ast		135278						
ANR	135372	Function	zend_compile_top_stmt	6958:0:205458:206035							
ANR	135373	FunctionDef	zend_compile_top_stmt (zend_ast * ast)		135372	0					
ANR	135374	CompoundStatement		6959:0:205510:206035	135372	0					
ANR	135375	IfStatement	if ( ! ast )		135372	0					
ANR	135376	Condition	! ast	6960:5:205517:205520	135372	0	True				
ANR	135377	UnaryOperationExpression	! ast		135372	0					
ANR	135378	UnaryOperator	!		135372	0					
ANR	135379	Identifier	ast		135372	1					
ANR	135380	CompoundStatement		2:11:12:12	135372	1					
ANR	135381	ReturnStatement	return ;	6961:2:205527:205533	135372	0	True				
ANR	135382	IfStatement	if ( ast -> kind == ZEND_AST_STMT_LIST )		135372	1					
ANR	135383	Condition	ast -> kind == ZEND_AST_STMT_LIST	6964:5:205544:205574	135372	0	True				
ANR	135384	EqualityExpression	ast -> kind == ZEND_AST_STMT_LIST		135372	0		==			
ANR	135385	PtrMemberAccess	ast -> kind		135372	0					
ANR	135386	Identifier	ast		135372	0					
ANR	135387	Identifier	kind		135372	1					
ANR	135388	Identifier	ZEND_AST_STMT_LIST		135372	1					
ANR	135389	CompoundStatement		8:2:118:128	135372	1					
ANR	135390	IdentifierDeclStatement	zend_ast_list * list = zend_ast_get_list ( ast ) ;	6965:2:205581:205625	135372	0	True				
ANR	135391	IdentifierDecl	* list = zend_ast_get_list ( ast )		135372	0					
ANR	135392	IdentifierDeclType	zend_ast_list *		135372	0					
ANR	135393	Identifier	list		135372	1					
ANR	135394	AssignmentExpression	* list = zend_ast_get_list ( ast )		135372	2		=			
ANR	135395	Identifier	list		135372	0					
ANR	135396	CallExpression	zend_ast_get_list ( ast )		135372	1					
ANR	135397	Callee	zend_ast_get_list		135372	0					
ANR	135398	Identifier	zend_ast_get_list		135372	0					
ANR	135399	ArgumentList	ast		135372	1					
ANR	135400	Argument	ast		135372	0					
ANR	135401	Identifier	ast		135372	0					
ANR	135402	IdentifierDeclStatement	uint32_t i ;	6966:2:205629:205639	135372	1	True				
ANR	135403	IdentifierDecl	i		135372	0					
ANR	135404	IdentifierDeclType	uint32_t		135372	0					
ANR	135405	Identifier	i		135372	1					
ANR	135406	ForStatement	for ( i = 0 ; i < list -> children ; ++ i )		135372	2					
ANR	135407	ForInit	i = 0 ;	6967:7:205648:205653	135372	0	True				
ANR	135408	AssignmentExpression	i = 0		135372	0		=			
ANR	135409	Identifier	i		135372	0					
ANR	135410	PrimaryExpression	0		135372	1					
ANR	135411	Condition	i < list -> children	6967:14:205655:205672	135372	1	True				
ANR	135412	RelationalExpression	i < list -> children		135372	0		<			
ANR	135413	Identifier	i		135372	0					
ANR	135414	PtrMemberAccess	list -> children		135372	1					
ANR	135415	Identifier	list		135372	0					
ANR	135416	Identifier	children		135372	1					
ANR	135417	UnaryExpression	++ i	6967:34:205675:205677	135372	2	True				
ANR	135418	IncDec	++		135372	0					
ANR	135419	Identifier	i		135372	1					
ANR	135420	CompoundStatement		9:39:169:169	135372	3					
ANR	135421	ExpressionStatement	zend_compile_top_stmt ( list -> child [ i ] )	6968:3:205685:205722	135372	0	True				
ANR	135422	CallExpression	zend_compile_top_stmt ( list -> child [ i ] )		135372	0					
ANR	135423	Callee	zend_compile_top_stmt		135372	0					
ANR	135424	Identifier	zend_compile_top_stmt		135372	0					
ANR	135425	ArgumentList	list -> child [ i ]		135372	1					
ANR	135426	Argument	list -> child [ i ]		135372	0					
ANR	135427	ArrayIndexing	list -> child [ i ]		135372	0					
ANR	135428	PtrMemberAccess	list -> child		135372	0					
ANR	135429	Identifier	list		135372	0					
ANR	135430	Identifier	child		135372	1					
ANR	135431	Identifier	i		135372	1					
ANR	135432	ReturnStatement	return ;	6970:2:205730:205736	135372	3	True				
ANR	135433	ExpressionStatement	zend_compile_stmt ( ast )	6973:1:205743:205765	135372	2	True				
ANR	135434	CallExpression	zend_compile_stmt ( ast )		135372	0					
ANR	135435	Callee	zend_compile_stmt		135372	0					
ANR	135436	Identifier	zend_compile_stmt		135372	0					
ANR	135437	ArgumentList	ast		135372	1					
ANR	135438	Argument	ast		135372	0					
ANR	135439	Identifier	ast		135372	0					
ANR	135440	IfStatement	if ( ast -> kind != ZEND_AST_NAMESPACE && ast -> kind != ZEND_AST_HALT_COMPILER )		135372	3					
ANR	135441	Condition	ast -> kind != ZEND_AST_NAMESPACE && ast -> kind != ZEND_AST_HALT_COMPILER	6975:5:205773:205842	135372	0	True				
ANR	135442	AndExpression	ast -> kind != ZEND_AST_NAMESPACE && ast -> kind != ZEND_AST_HALT_COMPILER		135372	0		&&			
ANR	135443	EqualityExpression	ast -> kind != ZEND_AST_NAMESPACE		135372	0		!=			
ANR	135444	PtrMemberAccess	ast -> kind		135372	0					
ANR	135445	Identifier	ast		135372	0					
ANR	135446	Identifier	kind		135372	1					
ANR	135447	Identifier	ZEND_AST_NAMESPACE		135372	1					
ANR	135448	EqualityExpression	ast -> kind != ZEND_AST_HALT_COMPILER		135372	1		!=			
ANR	135449	PtrMemberAccess	ast -> kind		135372	0					
ANR	135450	Identifier	ast		135372	0					
ANR	135451	Identifier	kind		135372	1					
ANR	135452	Identifier	ZEND_AST_HALT_COMPILER		135372	1					
ANR	135453	CompoundStatement		17:77:334:334	135372	1					
ANR	135454	ExpressionStatement	zend_verify_namespace ( )	6976:2:205849:205872	135372	0	True				
ANR	135455	CallExpression	zend_verify_namespace ( )		135372	0					
ANR	135456	Callee	zend_verify_namespace		135372	0					
ANR	135457	Identifier	zend_verify_namespace		135372	0					
ANR	135458	ArgumentList			135372	1					
ANR	135459	IfStatement	if ( ast -> kind == ZEND_AST_FUNC_DECL || ast -> kind == ZEND_AST_CLASS )		135372	4					
ANR	135460	Condition	ast -> kind == ZEND_AST_FUNC_DECL || ast -> kind == ZEND_AST_CLASS	6978:5:205882:205943	135372	0	True				
ANR	135461	OrExpression	ast -> kind == ZEND_AST_FUNC_DECL || ast -> kind == ZEND_AST_CLASS		135372	0		||			
ANR	135462	EqualityExpression	ast -> kind == ZEND_AST_FUNC_DECL		135372	0		==			
ANR	135463	PtrMemberAccess	ast -> kind		135372	0					
ANR	135464	Identifier	ast		135372	0					
ANR	135465	Identifier	kind		135372	1					
ANR	135466	Identifier	ZEND_AST_FUNC_DECL		135372	1					
ANR	135467	EqualityExpression	ast -> kind == ZEND_AST_CLASS		135372	1		==			
ANR	135468	PtrMemberAccess	ast -> kind		135372	0					
ANR	135469	Identifier	ast		135372	0					
ANR	135470	Identifier	kind		135372	1					
ANR	135471	Identifier	ZEND_AST_CLASS		135372	1					
ANR	135472	CompoundStatement		20:69:435:435	135372	1					
ANR	135473	ExpressionStatement	CG ( zend_lineno ) = ( ( zend_ast_decl * ) ast ) -> end_lineno	6979:2:205950:206003	135372	0	True				
ANR	135474	AssignmentExpression	CG ( zend_lineno ) = ( ( zend_ast_decl * ) ast ) -> end_lineno		135372	0		=			
ANR	135475	CallExpression	CG ( zend_lineno )		135372	0					
ANR	135476	Callee	CG		135372	0					
ANR	135477	Identifier	CG		135372	0					
ANR	135478	ArgumentList	zend_lineno		135372	1					
ANR	135479	Argument	zend_lineno		135372	0					
ANR	135480	Identifier	zend_lineno		135372	0					
ANR	135481	PtrMemberAccess	( ( zend_ast_decl * ) ast ) -> end_lineno		135372	1					
ANR	135482	CastExpression	( zend_ast_decl * ) ast		135372	0					
ANR	135483	CastTarget	zend_ast_decl *		135372	0					
ANR	135484	Identifier	ast		135372	1					
ANR	135485	Identifier	end_lineno		135372	1					
ANR	135486	ExpressionStatement	zend_do_early_binding ( )	6980:2:206007:206030	135372	1	True				
ANR	135487	CallExpression	zend_do_early_binding ( )		135372	0					
ANR	135488	Callee	zend_do_early_binding		135372	0					
ANR	135489	Identifier	zend_do_early_binding		135372	0					
ANR	135490	ArgumentList			135372	1					
ANR	135491	ReturnType	void		135372	1					
ANR	135492	Identifier	zend_compile_top_stmt		135372	2					
ANR	135493	ParameterList	zend_ast * ast		135372	3					
ANR	135494	Parameter	zend_ast * ast	6958:27:205485:205497	135372	0	True				
ANR	135495	ParameterType	zend_ast *		135372	0					
ANR	135496	Identifier	ast		135372	1					
ANR	135497	CFGEntryNode	ENTRY		135372		True				
ANR	135498	CFGExitNode	EXIT		135372		True				
ANR	135499	Symbol	ast -> kind		135372						
ANR	135500	Symbol	ast		135372						
ANR	135501	Symbol	list -> child		135372						
ANR	135502	Symbol	CG		135372						
ANR	135503	Symbol	i		135372						
ANR	135504	Symbol	( ( zend_ast_decl * ) ast ) -> end_lineno		135372						
ANR	135505	Symbol	list		135372						
ANR	135506	Symbol	ZEND_AST_HALT_COMPILER		135372						
ANR	135507	Symbol	ZEND_AST_STMT_LIST		135372						
ANR	135508	Symbol	zend_ast_get_list		135372						
ANR	135509	Symbol	* ast		135372						
ANR	135510	Symbol	* i		135372						
ANR	135511	Symbol	* * list		135372						
ANR	135512	Symbol	* list		135372						
ANR	135513	Symbol	ZEND_AST_FUNC_DECL		135372						
ANR	135514	Symbol	zend_lineno		135372						
ANR	135515	Symbol	* list -> child		135372						
ANR	135516	Symbol	ZEND_AST_CLASS		135372						
ANR	135517	Symbol	list -> children		135372						
ANR	135518	Symbol	ZEND_AST_NAMESPACE		135372						
ANR	135519	Function	zend_compile_stmt	6985:0:206048:208370							
ANR	135520	FunctionDef	zend_compile_stmt (zend_ast * ast)		135519	0					
ANR	135521	CompoundStatement		6986:0:206096:208370	135519	0					
ANR	135522	IfStatement	if ( ! ast )		135519	0					
ANR	135523	Condition	! ast	6987:5:206103:206106	135519	0	True				
ANR	135524	UnaryOperationExpression	! ast		135519	0					
ANR	135525	UnaryOperator	!		135519	0					
ANR	135526	Identifier	ast		135519	1					
ANR	135527	CompoundStatement		2:11:12:12	135519	1					
ANR	135528	ReturnStatement	return ;	6988:2:206113:206119	135519	0	True				
ANR	135529	ExpressionStatement	CG ( zend_lineno ) = ast -> lineno	6991:1:206126:206155	135519	1	True				
ANR	135530	AssignmentExpression	CG ( zend_lineno ) = ast -> lineno		135519	0		=			
ANR	135531	CallExpression	CG ( zend_lineno )		135519	0					
ANR	135532	Callee	CG		135519	0					
ANR	135533	Identifier	CG		135519	0					
ANR	135534	ArgumentList	zend_lineno		135519	1					
ANR	135535	Argument	zend_lineno		135519	0					
ANR	135536	Identifier	zend_lineno		135519	0					
ANR	135537	PtrMemberAccess	ast -> lineno		135519	1					
ANR	135538	Identifier	ast		135519	0					
ANR	135539	Identifier	lineno		135519	1					
ANR	135540	IfStatement	if ( ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO ) && ! zend_is_unticked_stmt ( ast ) )		135519	2					
ANR	135541	Condition	( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO ) && ! zend_is_unticked_stmt ( ast )	6993:5:206163:206244	135519	0	True				
ANR	135542	AndExpression	( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO ) && ! zend_is_unticked_stmt ( ast )		135519	0		&&			
ANR	135543	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO		135519	0		&			
ANR	135544	CallExpression	CG ( compiler_options )		135519	0					
ANR	135545	Callee	CG		135519	0					
ANR	135546	Identifier	CG		135519	0					
ANR	135547	ArgumentList	compiler_options		135519	1					
ANR	135548	Argument	compiler_options		135519	0					
ANR	135549	Identifier	compiler_options		135519	0					
ANR	135550	Identifier	ZEND_COMPILE_EXTENDED_INFO		135519	1					
ANR	135551	UnaryOperationExpression	! zend_is_unticked_stmt ( ast )		135519	1					
ANR	135552	UnaryOperator	!		135519	0					
ANR	135553	CallExpression	zend_is_unticked_stmt ( ast )		135519	1					
ANR	135554	Callee	zend_is_unticked_stmt		135519	0					
ANR	135555	Identifier	zend_is_unticked_stmt		135519	0					
ANR	135556	ArgumentList	ast		135519	1					
ANR	135557	Argument	ast		135519	0					
ANR	135558	Identifier	ast		135519	0					
ANR	135559	CompoundStatement		8:89:150:150	135519	1					
ANR	135560	ExpressionStatement	zend_do_extended_info ( )	6994:2:206251:206274	135519	0	True				
ANR	135561	CallExpression	zend_do_extended_info ( )		135519	0					
ANR	135562	Callee	zend_do_extended_info		135519	0					
ANR	135563	Identifier	zend_do_extended_info		135519	0					
ANR	135564	ArgumentList			135519	1					
ANR	135565	SwitchStatement	switch ( ast -> kind )		135519	3					
ANR	135566	Condition	ast -> kind	6997:9:206289:206297	135519	0	True				
ANR	135567	PtrMemberAccess	ast -> kind		135519	0					
ANR	135568	Identifier	ast		135519	0					
ANR	135569	Identifier	kind		135519	1					
ANR	135570	CompoundStatement		12:20:203:203	135519	1					
ANR	135571	Label	case ZEND_AST_STMT_LIST :	6998:2:206304:206327	135519	0	True				
ANR	135572	Identifier	ZEND_AST_STMT_LIST		135519	0					
ANR	135573	ExpressionStatement	zend_compile_stmt_list ( ast )	6999:3:206332:206359	135519	1	True				
ANR	135574	CallExpression	zend_compile_stmt_list ( ast )		135519	0					
ANR	135575	Callee	zend_compile_stmt_list		135519	0					
ANR	135576	Identifier	zend_compile_stmt_list		135519	0					
ANR	135577	ArgumentList	ast		135519	1					
ANR	135578	Argument	ast		135519	0					
ANR	135579	Identifier	ast		135519	0					
ANR	135580	BreakStatement	break ;	7000:3:206364:206369	135519	2	True				
ANR	135581	Label	case ZEND_AST_GLOBAL :	7001:2:206373:206393	135519	3	True				
ANR	135582	Identifier	ZEND_AST_GLOBAL		135519	0					
ANR	135583	ExpressionStatement	zend_compile_global_var ( ast )	7002:3:206398:206426	135519	4	True				
ANR	135584	CallExpression	zend_compile_global_var ( ast )		135519	0					
ANR	135585	Callee	zend_compile_global_var		135519	0					
ANR	135586	Identifier	zend_compile_global_var		135519	0					
ANR	135587	ArgumentList	ast		135519	1					
ANR	135588	Argument	ast		135519	0					
ANR	135589	Identifier	ast		135519	0					
ANR	135590	BreakStatement	break ;	7003:3:206431:206436	135519	5	True				
ANR	135591	Label	case ZEND_AST_STATIC :	7004:2:206440:206460	135519	6	True				
ANR	135592	Identifier	ZEND_AST_STATIC		135519	0					
ANR	135593	ExpressionStatement	zend_compile_static_var ( ast )	7005:3:206465:206493	135519	7	True				
ANR	135594	CallExpression	zend_compile_static_var ( ast )		135519	0					
ANR	135595	Callee	zend_compile_static_var		135519	0					
ANR	135596	Identifier	zend_compile_static_var		135519	0					
ANR	135597	ArgumentList	ast		135519	1					
ANR	135598	Argument	ast		135519	0					
ANR	135599	Identifier	ast		135519	0					
ANR	135600	BreakStatement	break ;	7006:3:206498:206503	135519	8	True				
ANR	135601	Label	case ZEND_AST_UNSET :	7007:2:206507:206526	135519	9	True				
ANR	135602	Identifier	ZEND_AST_UNSET		135519	0					
ANR	135603	ExpressionStatement	zend_compile_unset ( ast )	7008:3:206531:206554	135519	10	True				
ANR	135604	CallExpression	zend_compile_unset ( ast )		135519	0					
ANR	135605	Callee	zend_compile_unset		135519	0					
ANR	135606	Identifier	zend_compile_unset		135519	0					
ANR	135607	ArgumentList	ast		135519	1					
ANR	135608	Argument	ast		135519	0					
ANR	135609	Identifier	ast		135519	0					
ANR	135610	BreakStatement	break ;	7009:3:206559:206564	135519	11	True				
ANR	135611	Label	case ZEND_AST_RETURN :	7010:2:206568:206588	135519	12	True				
ANR	135612	Identifier	ZEND_AST_RETURN		135519	0					
ANR	135613	ExpressionStatement	zend_compile_return ( ast )	7011:3:206593:206617	135519	13	True				
ANR	135614	CallExpression	zend_compile_return ( ast )		135519	0					
ANR	135615	Callee	zend_compile_return		135519	0					
ANR	135616	Identifier	zend_compile_return		135519	0					
ANR	135617	ArgumentList	ast		135519	1					
ANR	135618	Argument	ast		135519	0					
ANR	135619	Identifier	ast		135519	0					
ANR	135620	BreakStatement	break ;	7012:3:206622:206627	135519	14	True				
ANR	135621	Label	case ZEND_AST_ECHO :	7013:2:206631:206649	135519	15	True				
ANR	135622	Identifier	ZEND_AST_ECHO		135519	0					
ANR	135623	ExpressionStatement	zend_compile_echo ( ast )	7014:3:206654:206676	135519	16	True				
ANR	135624	CallExpression	zend_compile_echo ( ast )		135519	0					
ANR	135625	Callee	zend_compile_echo		135519	0					
ANR	135626	Identifier	zend_compile_echo		135519	0					
ANR	135627	ArgumentList	ast		135519	1					
ANR	135628	Argument	ast		135519	0					
ANR	135629	Identifier	ast		135519	0					
ANR	135630	BreakStatement	break ;	7015:3:206681:206686	135519	17	True				
ANR	135631	Label	case ZEND_AST_THROW :	7016:2:206690:206709	135519	18	True				
ANR	135632	Identifier	ZEND_AST_THROW		135519	0					
ANR	135633	ExpressionStatement	zend_compile_throw ( ast )	7017:3:206714:206737	135519	19	True				
ANR	135634	CallExpression	zend_compile_throw ( ast )		135519	0					
ANR	135635	Callee	zend_compile_throw		135519	0					
ANR	135636	Identifier	zend_compile_throw		135519	0					
ANR	135637	ArgumentList	ast		135519	1					
ANR	135638	Argument	ast		135519	0					
ANR	135639	Identifier	ast		135519	0					
ANR	135640	BreakStatement	break ;	7018:3:206742:206747	135519	20	True				
ANR	135641	Label	case ZEND_AST_BREAK :	7019:2:206751:206770	135519	21	True				
ANR	135642	Identifier	ZEND_AST_BREAK		135519	0					
ANR	135643	Label	case ZEND_AST_CONTINUE :	7020:2:206774:206796	135519	22	True				
ANR	135644	Identifier	ZEND_AST_CONTINUE		135519	0					
ANR	135645	ExpressionStatement	zend_compile_break_continue ( ast )	7021:3:206801:206833	135519	23	True				
ANR	135646	CallExpression	zend_compile_break_continue ( ast )		135519	0					
ANR	135647	Callee	zend_compile_break_continue		135519	0					
ANR	135648	Identifier	zend_compile_break_continue		135519	0					
ANR	135649	ArgumentList	ast		135519	1					
ANR	135650	Argument	ast		135519	0					
ANR	135651	Identifier	ast		135519	0					
ANR	135652	BreakStatement	break ;	7022:3:206838:206843	135519	24	True				
ANR	135653	Label	case ZEND_AST_GOTO :	7023:2:206847:206865	135519	25	True				
ANR	135654	Identifier	ZEND_AST_GOTO		135519	0					
ANR	135655	ExpressionStatement	zend_compile_goto ( ast )	7024:3:206870:206892	135519	26	True				
ANR	135656	CallExpression	zend_compile_goto ( ast )		135519	0					
ANR	135657	Callee	zend_compile_goto		135519	0					
ANR	135658	Identifier	zend_compile_goto		135519	0					
ANR	135659	ArgumentList	ast		135519	1					
ANR	135660	Argument	ast		135519	0					
ANR	135661	Identifier	ast		135519	0					
ANR	135662	BreakStatement	break ;	7025:3:206897:206902	135519	27	True				
ANR	135663	Label	case ZEND_AST_LABEL :	7026:2:206906:206925	135519	28	True				
ANR	135664	Identifier	ZEND_AST_LABEL		135519	0					
ANR	135665	ExpressionStatement	zend_compile_label ( ast )	7027:3:206930:206953	135519	29	True				
ANR	135666	CallExpression	zend_compile_label ( ast )		135519	0					
ANR	135667	Callee	zend_compile_label		135519	0					
ANR	135668	Identifier	zend_compile_label		135519	0					
ANR	135669	ArgumentList	ast		135519	1					
ANR	135670	Argument	ast		135519	0					
ANR	135671	Identifier	ast		135519	0					
ANR	135672	BreakStatement	break ;	7028:3:206958:206963	135519	30	True				
ANR	135673	Label	case ZEND_AST_WHILE :	7029:2:206967:206986	135519	31	True				
ANR	135674	Identifier	ZEND_AST_WHILE		135519	0					
ANR	135675	ExpressionStatement	zend_compile_while ( ast )	7030:3:206991:207014	135519	32	True				
ANR	135676	CallExpression	zend_compile_while ( ast )		135519	0					
ANR	135677	Callee	zend_compile_while		135519	0					
ANR	135678	Identifier	zend_compile_while		135519	0					
ANR	135679	ArgumentList	ast		135519	1					
ANR	135680	Argument	ast		135519	0					
ANR	135681	Identifier	ast		135519	0					
ANR	135682	BreakStatement	break ;	7031:3:207019:207024	135519	33	True				
ANR	135683	Label	case ZEND_AST_DO_WHILE :	7032:2:207028:207050	135519	34	True				
ANR	135684	Identifier	ZEND_AST_DO_WHILE		135519	0					
ANR	135685	ExpressionStatement	zend_compile_do_while ( ast )	7033:3:207055:207081	135519	35	True				
ANR	135686	CallExpression	zend_compile_do_while ( ast )		135519	0					
ANR	135687	Callee	zend_compile_do_while		135519	0					
ANR	135688	Identifier	zend_compile_do_while		135519	0					
ANR	135689	ArgumentList	ast		135519	1					
ANR	135690	Argument	ast		135519	0					
ANR	135691	Identifier	ast		135519	0					
ANR	135692	BreakStatement	break ;	7034:3:207086:207091	135519	36	True				
ANR	135693	Label	case ZEND_AST_FOR :	7035:2:207095:207112	135519	37	True				
ANR	135694	Identifier	ZEND_AST_FOR		135519	0					
ANR	135695	ExpressionStatement	zend_compile_for ( ast )	7036:3:207117:207138	135519	38	True				
ANR	135696	CallExpression	zend_compile_for ( ast )		135519	0					
ANR	135697	Callee	zend_compile_for		135519	0					
ANR	135698	Identifier	zend_compile_for		135519	0					
ANR	135699	ArgumentList	ast		135519	1					
ANR	135700	Argument	ast		135519	0					
ANR	135701	Identifier	ast		135519	0					
ANR	135702	BreakStatement	break ;	7037:3:207143:207148	135519	39	True				
ANR	135703	Label	case ZEND_AST_FOREACH :	7038:2:207152:207173	135519	40	True				
ANR	135704	Identifier	ZEND_AST_FOREACH		135519	0					
ANR	135705	ExpressionStatement	zend_compile_foreach ( ast )	7039:3:207178:207203	135519	41	True				
ANR	135706	CallExpression	zend_compile_foreach ( ast )		135519	0					
ANR	135707	Callee	zend_compile_foreach		135519	0					
ANR	135708	Identifier	zend_compile_foreach		135519	0					
ANR	135709	ArgumentList	ast		135519	1					
ANR	135710	Argument	ast		135519	0					
ANR	135711	Identifier	ast		135519	0					
ANR	135712	BreakStatement	break ;	7040:3:207208:207213	135519	42	True				
ANR	135713	Label	case ZEND_AST_IF :	7041:2:207217:207233	135519	43	True				
ANR	135714	Identifier	ZEND_AST_IF		135519	0					
ANR	135715	ExpressionStatement	zend_compile_if ( ast )	7042:3:207238:207258	135519	44	True				
ANR	135716	CallExpression	zend_compile_if ( ast )		135519	0					
ANR	135717	Callee	zend_compile_if		135519	0					
ANR	135718	Identifier	zend_compile_if		135519	0					
ANR	135719	ArgumentList	ast		135519	1					
ANR	135720	Argument	ast		135519	0					
ANR	135721	Identifier	ast		135519	0					
ANR	135722	BreakStatement	break ;	7043:3:207263:207268	135519	45	True				
ANR	135723	Label	case ZEND_AST_SWITCH :	7044:2:207272:207292	135519	46	True				
ANR	135724	Identifier	ZEND_AST_SWITCH		135519	0					
ANR	135725	ExpressionStatement	zend_compile_switch ( ast )	7045:3:207297:207321	135519	47	True				
ANR	135726	CallExpression	zend_compile_switch ( ast )		135519	0					
ANR	135727	Callee	zend_compile_switch		135519	0					
ANR	135728	Identifier	zend_compile_switch		135519	0					
ANR	135729	ArgumentList	ast		135519	1					
ANR	135730	Argument	ast		135519	0					
ANR	135731	Identifier	ast		135519	0					
ANR	135732	BreakStatement	break ;	7046:3:207326:207331	135519	48	True				
ANR	135733	Label	case ZEND_AST_TRY :	7047:2:207335:207352	135519	49	True				
ANR	135734	Identifier	ZEND_AST_TRY		135519	0					
ANR	135735	ExpressionStatement	zend_compile_try ( ast )	7048:3:207357:207378	135519	50	True				
ANR	135736	CallExpression	zend_compile_try ( ast )		135519	0					
ANR	135737	Callee	zend_compile_try		135519	0					
ANR	135738	Identifier	zend_compile_try		135519	0					
ANR	135739	ArgumentList	ast		135519	1					
ANR	135740	Argument	ast		135519	0					
ANR	135741	Identifier	ast		135519	0					
ANR	135742	BreakStatement	break ;	7049:3:207383:207388	135519	51	True				
ANR	135743	Label	case ZEND_AST_DECLARE :	7050:2:207392:207413	135519	52	True				
ANR	135744	Identifier	ZEND_AST_DECLARE		135519	0					
ANR	135745	ExpressionStatement	zend_compile_declare ( ast )	7051:3:207418:207443	135519	53	True				
ANR	135746	CallExpression	zend_compile_declare ( ast )		135519	0					
ANR	135747	Callee	zend_compile_declare		135519	0					
ANR	135748	Identifier	zend_compile_declare		135519	0					
ANR	135749	ArgumentList	ast		135519	1					
ANR	135750	Argument	ast		135519	0					
ANR	135751	Identifier	ast		135519	0					
ANR	135752	BreakStatement	break ;	7052:3:207448:207453	135519	54	True				
ANR	135753	Label	case ZEND_AST_FUNC_DECL :	7053:2:207457:207480	135519	55	True				
ANR	135754	Identifier	ZEND_AST_FUNC_DECL		135519	0					
ANR	135755	Label	case ZEND_AST_METHOD :	7054:2:207484:207504	135519	56	True				
ANR	135756	Identifier	ZEND_AST_METHOD		135519	0					
ANR	135757	ExpressionStatement	"zend_compile_func_decl ( NULL , ast )"	7055:3:207509:207542	135519	57	True				
ANR	135758	CallExpression	"zend_compile_func_decl ( NULL , ast )"		135519	0					
ANR	135759	Callee	zend_compile_func_decl		135519	0					
ANR	135760	Identifier	zend_compile_func_decl		135519	0					
ANR	135761	ArgumentList	NULL		135519	1					
ANR	135762	Argument	NULL		135519	0					
ANR	135763	Identifier	NULL		135519	0					
ANR	135764	Argument	ast		135519	1					
ANR	135765	Identifier	ast		135519	0					
ANR	135766	BreakStatement	break ;	7056:3:207547:207552	135519	58	True				
ANR	135767	Label	case ZEND_AST_PROP_DECL :	7057:2:207556:207579	135519	59	True				
ANR	135768	Identifier	ZEND_AST_PROP_DECL		135519	0					
ANR	135769	ExpressionStatement	zend_compile_prop_decl ( ast )	7058:3:207584:207611	135519	60	True				
ANR	135770	CallExpression	zend_compile_prop_decl ( ast )		135519	0					
ANR	135771	Callee	zend_compile_prop_decl		135519	0					
ANR	135772	Identifier	zend_compile_prop_decl		135519	0					
ANR	135773	ArgumentList	ast		135519	1					
ANR	135774	Argument	ast		135519	0					
ANR	135775	Identifier	ast		135519	0					
ANR	135776	BreakStatement	break ;	7059:3:207616:207621	135519	61	True				
ANR	135777	Label	case ZEND_AST_CLASS_CONST_DECL :	7060:2:207625:207655	135519	62	True				
ANR	135778	Identifier	ZEND_AST_CLASS_CONST_DECL		135519	0					
ANR	135779	ExpressionStatement	zend_compile_class_const_decl ( ast )	7061:3:207660:207694	135519	63	True				
ANR	135780	CallExpression	zend_compile_class_const_decl ( ast )		135519	0					
ANR	135781	Callee	zend_compile_class_const_decl		135519	0					
ANR	135782	Identifier	zend_compile_class_const_decl		135519	0					
ANR	135783	ArgumentList	ast		135519	1					
ANR	135784	Argument	ast		135519	0					
ANR	135785	Identifier	ast		135519	0					
ANR	135786	BreakStatement	break ;	7062:3:207699:207704	135519	64	True				
ANR	135787	Label	case ZEND_AST_USE_TRAIT :	7063:2:207708:207731	135519	65	True				
ANR	135788	Identifier	ZEND_AST_USE_TRAIT		135519	0					
ANR	135789	ExpressionStatement	zend_compile_use_trait ( ast )	7064:3:207736:207763	135519	66	True				
ANR	135790	CallExpression	zend_compile_use_trait ( ast )		135519	0					
ANR	135791	Callee	zend_compile_use_trait		135519	0					
ANR	135792	Identifier	zend_compile_use_trait		135519	0					
ANR	135793	ArgumentList	ast		135519	1					
ANR	135794	Argument	ast		135519	0					
ANR	135795	Identifier	ast		135519	0					
ANR	135796	BreakStatement	break ;	7065:3:207768:207773	135519	67	True				
ANR	135797	Label	case ZEND_AST_CLASS :	7066:2:207777:207796	135519	68	True				
ANR	135798	Identifier	ZEND_AST_CLASS		135519	0					
ANR	135799	ExpressionStatement	zend_compile_class_decl ( ast )	7067:3:207801:207829	135519	69	True				
ANR	135800	CallExpression	zend_compile_class_decl ( ast )		135519	0					
ANR	135801	Callee	zend_compile_class_decl		135519	0					
ANR	135802	Identifier	zend_compile_class_decl		135519	0					
ANR	135803	ArgumentList	ast		135519	1					
ANR	135804	Argument	ast		135519	0					
ANR	135805	Identifier	ast		135519	0					
ANR	135806	BreakStatement	break ;	7068:3:207834:207839	135519	70	True				
ANR	135807	Label	case ZEND_AST_GROUP_USE :	7069:2:207843:207866	135519	71	True				
ANR	135808	Identifier	ZEND_AST_GROUP_USE		135519	0					
ANR	135809	ExpressionStatement	zend_compile_group_use ( ast )	7070:3:207871:207898	135519	72	True				
ANR	135810	CallExpression	zend_compile_group_use ( ast )		135519	0					
ANR	135811	Callee	zend_compile_group_use		135519	0					
ANR	135812	Identifier	zend_compile_group_use		135519	0					
ANR	135813	ArgumentList	ast		135519	1					
ANR	135814	Argument	ast		135519	0					
ANR	135815	Identifier	ast		135519	0					
ANR	135816	BreakStatement	break ;	7071:3:207903:207908	135519	73	True				
ANR	135817	Label	case ZEND_AST_USE :	7072:2:207912:207929	135519	74	True				
ANR	135818	Identifier	ZEND_AST_USE		135519	0					
ANR	135819	ExpressionStatement	zend_compile_use ( ast )	7073:3:207934:207955	135519	75	True				
ANR	135820	CallExpression	zend_compile_use ( ast )		135519	0					
ANR	135821	Callee	zend_compile_use		135519	0					
ANR	135822	Identifier	zend_compile_use		135519	0					
ANR	135823	ArgumentList	ast		135519	1					
ANR	135824	Argument	ast		135519	0					
ANR	135825	Identifier	ast		135519	0					
ANR	135826	BreakStatement	break ;	7074:3:207960:207965	135519	76	True				
ANR	135827	Label	case ZEND_AST_CONST_DECL :	7075:2:207969:207993	135519	77	True				
ANR	135828	Identifier	ZEND_AST_CONST_DECL		135519	0					
ANR	135829	ExpressionStatement	zend_compile_const_decl ( ast )	7076:3:207998:208026	135519	78	True				
ANR	135830	CallExpression	zend_compile_const_decl ( ast )		135519	0					
ANR	135831	Callee	zend_compile_const_decl		135519	0					
ANR	135832	Identifier	zend_compile_const_decl		135519	0					
ANR	135833	ArgumentList	ast		135519	1					
ANR	135834	Argument	ast		135519	0					
ANR	135835	Identifier	ast		135519	0					
ANR	135836	BreakStatement	break ;	7077:3:208031:208036	135519	79	True				
ANR	135837	Label	case ZEND_AST_NAMESPACE :	7078:2:208040:208063	135519	80	True				
ANR	135838	Identifier	ZEND_AST_NAMESPACE		135519	0					
ANR	135839	ExpressionStatement	zend_compile_namespace ( ast )	7079:3:208068:208095	135519	81	True				
ANR	135840	CallExpression	zend_compile_namespace ( ast )		135519	0					
ANR	135841	Callee	zend_compile_namespace		135519	0					
ANR	135842	Identifier	zend_compile_namespace		135519	0					
ANR	135843	ArgumentList	ast		135519	1					
ANR	135844	Argument	ast		135519	0					
ANR	135845	Identifier	ast		135519	0					
ANR	135846	BreakStatement	break ;	7080:3:208100:208105	135519	82	True				
ANR	135847	Label	case ZEND_AST_HALT_COMPILER :	7081:2:208109:208136	135519	83	True				
ANR	135848	Identifier	ZEND_AST_HALT_COMPILER		135519	0					
ANR	135849	ExpressionStatement	zend_compile_halt_compiler ( ast )	7082:3:208141:208172	135519	84	True				
ANR	135850	CallExpression	zend_compile_halt_compiler ( ast )		135519	0					
ANR	135851	Callee	zend_compile_halt_compiler		135519	0					
ANR	135852	Identifier	zend_compile_halt_compiler		135519	0					
ANR	135853	ArgumentList	ast		135519	1					
ANR	135854	Argument	ast		135519	0					
ANR	135855	Identifier	ast		135519	0					
ANR	135856	BreakStatement	break ;	7083:3:208177:208182	135519	85	True				
ANR	135857	Label	default :	7084:2:208186:208193	135519	86	True				
ANR	135858	Identifier	default		135519	0					
ANR	135859	CompoundStatement		101:3:2105:2117	135519	87					
ANR	135860	IdentifierDeclStatement	znode result ;	7086:3:208202:208214	135519	0	True				
ANR	135861	IdentifierDecl	result		135519	0					
ANR	135862	IdentifierDeclType	znode		135519	0					
ANR	135863	Identifier	result		135519	1					
ANR	135864	ExpressionStatement	"zend_compile_expr ( & result , ast )"	7087:3:208219:208250	135519	1	True				
ANR	135865	CallExpression	"zend_compile_expr ( & result , ast )"		135519	0					
ANR	135866	Callee	zend_compile_expr		135519	0					
ANR	135867	Identifier	zend_compile_expr		135519	0					
ANR	135868	ArgumentList	& result		135519	1					
ANR	135869	Argument	& result		135519	0					
ANR	135870	UnaryOperationExpression	& result		135519	0					
ANR	135871	UnaryOperator	&		135519	0					
ANR	135872	Identifier	result		135519	1					
ANR	135873	Argument	ast		135519	1					
ANR	135874	Identifier	ast		135519	0					
ANR	135875	ExpressionStatement	zend_do_free ( & result )	7088:3:208255:208276	135519	2	True				
ANR	135876	CallExpression	zend_do_free ( & result )		135519	0					
ANR	135877	Callee	zend_do_free		135519	0					
ANR	135878	Identifier	zend_do_free		135519	0					
ANR	135879	ArgumentList	& result		135519	1					
ANR	135880	Argument	& result		135519	0					
ANR	135881	UnaryOperationExpression	& result		135519	0					
ANR	135882	UnaryOperator	&		135519	0					
ANR	135883	Identifier	result		135519	1					
ANR	135884	IfStatement	if ( FC ( declarables ) . ticks && ! zend_is_unticked_stmt ( ast ) )		135519	4					
ANR	135885	Condition	FC ( declarables ) . ticks && ! zend_is_unticked_stmt ( ast )	7092:5:208291:208342	135519	0	True				
ANR	135886	AndExpression	FC ( declarables ) . ticks && ! zend_is_unticked_stmt ( ast )		135519	0		&&			
ANR	135887	MemberAccess	FC ( declarables ) . ticks		135519	0					
ANR	135888	CallExpression	FC ( declarables )		135519	0					
ANR	135889	Callee	FC		135519	0					
ANR	135890	Identifier	FC		135519	0					
ANR	135891	ArgumentList	declarables		135519	1					
ANR	135892	Argument	declarables		135519	0					
ANR	135893	Identifier	declarables		135519	0					
ANR	135894	Identifier	ticks		135519	1					
ANR	135895	UnaryOperationExpression	! zend_is_unticked_stmt ( ast )		135519	1					
ANR	135896	UnaryOperator	!		135519	0					
ANR	135897	CallExpression	zend_is_unticked_stmt ( ast )		135519	1					
ANR	135898	Callee	zend_is_unticked_stmt		135519	0					
ANR	135899	Identifier	zend_is_unticked_stmt		135519	0					
ANR	135900	ArgumentList	ast		135519	1					
ANR	135901	Argument	ast		135519	0					
ANR	135902	Identifier	ast		135519	0					
ANR	135903	CompoundStatement		107:59:2248:2248	135519	1					
ANR	135904	ExpressionStatement	zend_emit_tick ( )	7093:2:208349:208365	135519	0	True				
ANR	135905	CallExpression	zend_emit_tick ( )		135519	0					
ANR	135906	Callee	zend_emit_tick		135519	0					
ANR	135907	Identifier	zend_emit_tick		135519	0					
ANR	135908	ArgumentList			135519	1					
ANR	135909	ReturnType	void		135519	1					
ANR	135910	Identifier	zend_compile_stmt		135519	2					
ANR	135911	ParameterList	zend_ast * ast		135519	3					
ANR	135912	Parameter	zend_ast * ast	6985:23:206071:206083	135519	0	True				
ANR	135913	ParameterType	zend_ast *		135519	0					
ANR	135914	Identifier	ast		135519	1					
ANR	135915	CFGEntryNode	ENTRY		135519		True				
ANR	135916	CFGExitNode	EXIT		135519		True				
ANR	135917	Symbol	ast -> kind		135519						
ANR	135918	Symbol	ast		135519						
ANR	135919	Symbol	NULL		135519						
ANR	135920	Symbol	CG		135519						
ANR	135921	Symbol	ast -> lineno		135519						
ANR	135922	Symbol	ZEND_COMPILE_EXTENDED_INFO		135519						
ANR	135923	Symbol	result		135519						
ANR	135924	Symbol	compiler_options		135519						
ANR	135925	Symbol	declarables		135519						
ANR	135926	Symbol	* ast		135519						
ANR	135927	Symbol	& result		135519						
ANR	135928	Symbol	zend_is_unticked_stmt		135519						
ANR	135929	Symbol	zend_lineno		135519						
ANR	135930	Symbol	FC		135519						
ANR	135931	Symbol	FC ( declarables ) . ticks		135519						
ANR	135932	Function	zend_compile_expr	7098:0:208383:211477							
ANR	135933	FunctionDef	"zend_compile_expr (znode * result , zend_ast * ast)"		135932	0					
ANR	135934	CompoundStatement		7099:0:208446:211477	135932	0					
ANR	135935	ExpressionStatement	CG ( zend_lineno ) = zend_ast_get_lineno ( ast )	7101:1:208487:208529	135932	0	True				
ANR	135936	AssignmentExpression	CG ( zend_lineno ) = zend_ast_get_lineno ( ast )		135932	0		=			
ANR	135937	CallExpression	CG ( zend_lineno )		135932	0					
ANR	135938	Callee	CG		135932	0					
ANR	135939	Identifier	CG		135932	0					
ANR	135940	ArgumentList	zend_lineno		135932	1					
ANR	135941	Argument	zend_lineno		135932	0					
ANR	135942	Identifier	zend_lineno		135932	0					
ANR	135943	CallExpression	zend_ast_get_lineno ( ast )		135932	1					
ANR	135944	Callee	zend_ast_get_lineno		135932	0					
ANR	135945	Identifier	zend_ast_get_lineno		135932	0					
ANR	135946	ArgumentList	ast		135932	1					
ANR	135947	Argument	ast		135932	0					
ANR	135948	Identifier	ast		135932	0					
ANR	135949	SwitchStatement	switch ( ast -> kind )		135932	1					
ANR	135950	Condition	ast -> kind	7103:9:208541:208549	135932	0	True				
ANR	135951	PtrMemberAccess	ast -> kind		135932	0					
ANR	135952	Identifier	ast		135932	0					
ANR	135953	Identifier	kind		135932	1					
ANR	135954	CompoundStatement		5:20:105:105	135932	1					
ANR	135955	Label	case ZEND_AST_ZVAL :	7104:2:208556:208574	135932	0	True				
ANR	135956	Identifier	ZEND_AST_ZVAL		135932	0					
ANR	135957	ExpressionStatement	"ZVAL_COPY ( & result -> u . constant , zend_ast_get_zval ( ast ) )"	7105:3:208579:208633	135932	1	True				
ANR	135958	CallExpression	"ZVAL_COPY ( & result -> u . constant , zend_ast_get_zval ( ast ) )"		135932	0					
ANR	135959	Callee	ZVAL_COPY		135932	0					
ANR	135960	Identifier	ZVAL_COPY		135932	0					
ANR	135961	ArgumentList	& result -> u . constant		135932	1					
ANR	135962	Argument	& result -> u . constant		135932	0					
ANR	135963	UnaryOperationExpression	& result -> u . constant		135932	0					
ANR	135964	UnaryOperator	&		135932	0					
ANR	135965	MemberAccess	result -> u . constant		135932	1					
ANR	135966	PtrMemberAccess	result -> u		135932	0					
ANR	135967	Identifier	result		135932	0					
ANR	135968	Identifier	u		135932	1					
ANR	135969	Identifier	constant		135932	1					
ANR	135970	Argument	zend_ast_get_zval ( ast )		135932	1					
ANR	135971	CallExpression	zend_ast_get_zval ( ast )		135932	0					
ANR	135972	Callee	zend_ast_get_zval		135932	0					
ANR	135973	Identifier	zend_ast_get_zval		135932	0					
ANR	135974	ArgumentList	ast		135932	1					
ANR	135975	Argument	ast		135932	0					
ANR	135976	Identifier	ast		135932	0					
ANR	135977	ExpressionStatement	result -> op_type = IS_CONST	7106:3:208638:208664	135932	2	True				
ANR	135978	AssignmentExpression	result -> op_type = IS_CONST		135932	0		=			
ANR	135979	PtrMemberAccess	result -> op_type		135932	0					
ANR	135980	Identifier	result		135932	0					
ANR	135981	Identifier	op_type		135932	1					
ANR	135982	Identifier	IS_CONST		135932	1					
ANR	135983	ReturnStatement	return ;	7107:3:208669:208675	135932	3	True				
ANR	135984	Label	case ZEND_AST_ZNODE :	7108:2:208679:208698	135932	4	True				
ANR	135985	Identifier	ZEND_AST_ZNODE		135932	0					
ANR	135986	ExpressionStatement	* result = * zend_ast_get_znode ( ast )	7109:3:208703:208737	135932	5	True				
ANR	135987	AssignmentExpression	* result = * zend_ast_get_znode ( ast )		135932	0		=			
ANR	135988	UnaryOperationExpression	* result		135932	0					
ANR	135989	UnaryOperator	*		135932	0					
ANR	135990	Identifier	result		135932	1					
ANR	135991	UnaryOperationExpression	* zend_ast_get_znode ( ast )		135932	1					
ANR	135992	UnaryOperator	*		135932	0					
ANR	135993	CallExpression	zend_ast_get_znode ( ast )		135932	1					
ANR	135994	Callee	zend_ast_get_znode		135932	0					
ANR	135995	Identifier	zend_ast_get_znode		135932	0					
ANR	135996	ArgumentList	ast		135932	1					
ANR	135997	Argument	ast		135932	0					
ANR	135998	Identifier	ast		135932	0					
ANR	135999	ReturnStatement	return ;	7110:3:208742:208748	135932	6	True				
ANR	136000	Label	case ZEND_AST_VAR :	7111:2:208752:208769	135932	7	True				
ANR	136001	Identifier	ZEND_AST_VAR		135932	0					
ANR	136002	Label	case ZEND_AST_DIM :	7112:2:208773:208790	135932	8	True				
ANR	136003	Identifier	ZEND_AST_DIM		135932	0					
ANR	136004	Label	case ZEND_AST_PROP :	7113:2:208794:208812	135932	9	True				
ANR	136005	Identifier	ZEND_AST_PROP		135932	0					
ANR	136006	Label	case ZEND_AST_STATIC_PROP :	7114:2:208816:208841	135932	10	True				
ANR	136007	Identifier	ZEND_AST_STATIC_PROP		135932	0					
ANR	136008	Label	case ZEND_AST_CALL :	7115:2:208845:208863	135932	11	True				
ANR	136009	Identifier	ZEND_AST_CALL		135932	0					
ANR	136010	Label	case ZEND_AST_METHOD_CALL :	7116:2:208867:208892	135932	12	True				
ANR	136011	Identifier	ZEND_AST_METHOD_CALL		135932	0					
ANR	136012	Label	case ZEND_AST_STATIC_CALL :	7117:2:208896:208921	135932	13	True				
ANR	136013	Identifier	ZEND_AST_STATIC_CALL		135932	0					
ANR	136014	ExpressionStatement	"zend_compile_var ( result , ast , BP_VAR_R )"	7118:3:208926:208965	135932	14	True				
ANR	136015	CallExpression	"zend_compile_var ( result , ast , BP_VAR_R )"		135932	0					
ANR	136016	Callee	zend_compile_var		135932	0					
ANR	136017	Identifier	zend_compile_var		135932	0					
ANR	136018	ArgumentList	result		135932	1					
ANR	136019	Argument	result		135932	0					
ANR	136020	Identifier	result		135932	0					
ANR	136021	Argument	ast		135932	1					
ANR	136022	Identifier	ast		135932	0					
ANR	136023	Argument	BP_VAR_R		135932	2					
ANR	136024	Identifier	BP_VAR_R		135932	0					
ANR	136025	ReturnStatement	return ;	7119:3:208970:208976	135932	15	True				
ANR	136026	Label	case ZEND_AST_ASSIGN :	7120:2:208980:209000	135932	16	True				
ANR	136027	Identifier	ZEND_AST_ASSIGN		135932	0					
ANR	136028	ExpressionStatement	"zend_compile_assign ( result , ast )"	7121:3:209005:209037	135932	17	True				
ANR	136029	CallExpression	"zend_compile_assign ( result , ast )"		135932	0					
ANR	136030	Callee	zend_compile_assign		135932	0					
ANR	136031	Identifier	zend_compile_assign		135932	0					
ANR	136032	ArgumentList	result		135932	1					
ANR	136033	Argument	result		135932	0					
ANR	136034	Identifier	result		135932	0					
ANR	136035	Argument	ast		135932	1					
ANR	136036	Identifier	ast		135932	0					
ANR	136037	ReturnStatement	return ;	7122:3:209042:209048	135932	18	True				
ANR	136038	Label	case ZEND_AST_ASSIGN_REF :	7123:2:209052:209076	135932	19	True				
ANR	136039	Identifier	ZEND_AST_ASSIGN_REF		135932	0					
ANR	136040	ExpressionStatement	"zend_compile_assign_ref ( result , ast )"	7124:3:209081:209117	135932	20	True				
ANR	136041	CallExpression	"zend_compile_assign_ref ( result , ast )"		135932	0					
ANR	136042	Callee	zend_compile_assign_ref		135932	0					
ANR	136043	Identifier	zend_compile_assign_ref		135932	0					
ANR	136044	ArgumentList	result		135932	1					
ANR	136045	Argument	result		135932	0					
ANR	136046	Identifier	result		135932	0					
ANR	136047	Argument	ast		135932	1					
ANR	136048	Identifier	ast		135932	0					
ANR	136049	ReturnStatement	return ;	7125:3:209122:209128	135932	21	True				
ANR	136050	Label	case ZEND_AST_NEW :	7126:2:209132:209149	135932	22	True				
ANR	136051	Identifier	ZEND_AST_NEW		135932	0					
ANR	136052	ExpressionStatement	"zend_compile_new ( result , ast )"	7127:3:209154:209183	135932	23	True				
ANR	136053	CallExpression	"zend_compile_new ( result , ast )"		135932	0					
ANR	136054	Callee	zend_compile_new		135932	0					
ANR	136055	Identifier	zend_compile_new		135932	0					
ANR	136056	ArgumentList	result		135932	1					
ANR	136057	Argument	result		135932	0					
ANR	136058	Identifier	result		135932	0					
ANR	136059	Argument	ast		135932	1					
ANR	136060	Identifier	ast		135932	0					
ANR	136061	ReturnStatement	return ;	7128:3:209188:209194	135932	24	True				
ANR	136062	Label	case ZEND_AST_CLONE :	7129:2:209198:209217	135932	25	True				
ANR	136063	Identifier	ZEND_AST_CLONE		135932	0					
ANR	136064	ExpressionStatement	"zend_compile_clone ( result , ast )"	7130:3:209222:209253	135932	26	True				
ANR	136065	CallExpression	"zend_compile_clone ( result , ast )"		135932	0					
ANR	136066	Callee	zend_compile_clone		135932	0					
ANR	136067	Identifier	zend_compile_clone		135932	0					
ANR	136068	ArgumentList	result		135932	1					
ANR	136069	Argument	result		135932	0					
ANR	136070	Identifier	result		135932	0					
ANR	136071	Argument	ast		135932	1					
ANR	136072	Identifier	ast		135932	0					
ANR	136073	ReturnStatement	return ;	7131:3:209258:209264	135932	27	True				
ANR	136074	Label	case ZEND_AST_ASSIGN_OP :	7132:2:209268:209291	135932	28	True				
ANR	136075	Identifier	ZEND_AST_ASSIGN_OP		135932	0					
ANR	136076	ExpressionStatement	"zend_compile_compound_assign ( result , ast )"	7133:3:209296:209337	135932	29	True				
ANR	136077	CallExpression	"zend_compile_compound_assign ( result , ast )"		135932	0					
ANR	136078	Callee	zend_compile_compound_assign		135932	0					
ANR	136079	Identifier	zend_compile_compound_assign		135932	0					
ANR	136080	ArgumentList	result		135932	1					
ANR	136081	Argument	result		135932	0					
ANR	136082	Identifier	result		135932	0					
ANR	136083	Argument	ast		135932	1					
ANR	136084	Identifier	ast		135932	0					
ANR	136085	ReturnStatement	return ;	7134:3:209342:209348	135932	30	True				
ANR	136086	Label	case ZEND_AST_BINARY_OP :	7135:2:209352:209375	135932	31	True				
ANR	136087	Identifier	ZEND_AST_BINARY_OP		135932	0					
ANR	136088	ExpressionStatement	"zend_compile_binary_op ( result , ast )"	7136:3:209380:209415	135932	32	True				
ANR	136089	CallExpression	"zend_compile_binary_op ( result , ast )"		135932	0					
ANR	136090	Callee	zend_compile_binary_op		135932	0					
ANR	136091	Identifier	zend_compile_binary_op		135932	0					
ANR	136092	ArgumentList	result		135932	1					
ANR	136093	Argument	result		135932	0					
ANR	136094	Identifier	result		135932	0					
ANR	136095	Argument	ast		135932	1					
ANR	136096	Identifier	ast		135932	0					
ANR	136097	ReturnStatement	return ;	7137:3:209420:209426	135932	33	True				
ANR	136098	Label	case ZEND_AST_GREATER :	7138:2:209430:209451	135932	34	True				
ANR	136099	Identifier	ZEND_AST_GREATER		135932	0					
ANR	136100	Label	case ZEND_AST_GREATER_EQUAL :	7139:2:209455:209482	135932	35	True				
ANR	136101	Identifier	ZEND_AST_GREATER_EQUAL		135932	0					
ANR	136102	ExpressionStatement	"zend_compile_greater ( result , ast )"	7140:3:209487:209520	135932	36	True				
ANR	136103	CallExpression	"zend_compile_greater ( result , ast )"		135932	0					
ANR	136104	Callee	zend_compile_greater		135932	0					
ANR	136105	Identifier	zend_compile_greater		135932	0					
ANR	136106	ArgumentList	result		135932	1					
ANR	136107	Argument	result		135932	0					
ANR	136108	Identifier	result		135932	0					
ANR	136109	Argument	ast		135932	1					
ANR	136110	Identifier	ast		135932	0					
ANR	136111	ReturnStatement	return ;	7141:3:209525:209531	135932	37	True				
ANR	136112	Label	case ZEND_AST_UNARY_OP :	7142:2:209535:209557	135932	38	True				
ANR	136113	Identifier	ZEND_AST_UNARY_OP		135932	0					
ANR	136114	ExpressionStatement	"zend_compile_unary_op ( result , ast )"	7143:3:209562:209596	135932	39	True				
ANR	136115	CallExpression	"zend_compile_unary_op ( result , ast )"		135932	0					
ANR	136116	Callee	zend_compile_unary_op		135932	0					
ANR	136117	Identifier	zend_compile_unary_op		135932	0					
ANR	136118	ArgumentList	result		135932	1					
ANR	136119	Argument	result		135932	0					
ANR	136120	Identifier	result		135932	0					
ANR	136121	Argument	ast		135932	1					
ANR	136122	Identifier	ast		135932	0					
ANR	136123	ReturnStatement	return ;	7144:3:209601:209607	135932	40	True				
ANR	136124	Label	case ZEND_AST_UNARY_PLUS :	7145:2:209611:209635	135932	41	True				
ANR	136125	Identifier	ZEND_AST_UNARY_PLUS		135932	0					
ANR	136126	Label	case ZEND_AST_UNARY_MINUS :	7146:2:209639:209664	135932	42	True				
ANR	136127	Identifier	ZEND_AST_UNARY_MINUS		135932	0					
ANR	136128	ExpressionStatement	"zend_compile_unary_pm ( result , ast )"	7147:3:209669:209703	135932	43	True				
ANR	136129	CallExpression	"zend_compile_unary_pm ( result , ast )"		135932	0					
ANR	136130	Callee	zend_compile_unary_pm		135932	0					
ANR	136131	Identifier	zend_compile_unary_pm		135932	0					
ANR	136132	ArgumentList	result		135932	1					
ANR	136133	Argument	result		135932	0					
ANR	136134	Identifier	result		135932	0					
ANR	136135	Argument	ast		135932	1					
ANR	136136	Identifier	ast		135932	0					
ANR	136137	ReturnStatement	return ;	7148:3:209708:209714	135932	44	True				
ANR	136138	Label	case ZEND_AST_AND :	7149:2:209718:209735	135932	45	True				
ANR	136139	Identifier	ZEND_AST_AND		135932	0					
ANR	136140	Label	case ZEND_AST_OR :	7150:2:209739:209755	135932	46	True				
ANR	136141	Identifier	ZEND_AST_OR		135932	0					
ANR	136142	ExpressionStatement	"zend_compile_short_circuiting ( result , ast )"	7151:3:209760:209802	135932	47	True				
ANR	136143	CallExpression	"zend_compile_short_circuiting ( result , ast )"		135932	0					
ANR	136144	Callee	zend_compile_short_circuiting		135932	0					
ANR	136145	Identifier	zend_compile_short_circuiting		135932	0					
ANR	136146	ArgumentList	result		135932	1					
ANR	136147	Argument	result		135932	0					
ANR	136148	Identifier	result		135932	0					
ANR	136149	Argument	ast		135932	1					
ANR	136150	Identifier	ast		135932	0					
ANR	136151	ReturnStatement	return ;	7152:3:209807:209813	135932	48	True				
ANR	136152	Label	case ZEND_AST_POST_INC :	7153:2:209817:209839	135932	49	True				
ANR	136153	Identifier	ZEND_AST_POST_INC		135932	0					
ANR	136154	Label	case ZEND_AST_POST_DEC :	7154:2:209843:209865	135932	50	True				
ANR	136155	Identifier	ZEND_AST_POST_DEC		135932	0					
ANR	136156	ExpressionStatement	"zend_compile_post_incdec ( result , ast )"	7155:3:209870:209907	135932	51	True				
ANR	136157	CallExpression	"zend_compile_post_incdec ( result , ast )"		135932	0					
ANR	136158	Callee	zend_compile_post_incdec		135932	0					
ANR	136159	Identifier	zend_compile_post_incdec		135932	0					
ANR	136160	ArgumentList	result		135932	1					
ANR	136161	Argument	result		135932	0					
ANR	136162	Identifier	result		135932	0					
ANR	136163	Argument	ast		135932	1					
ANR	136164	Identifier	ast		135932	0					
ANR	136165	ReturnStatement	return ;	7156:3:209912:209918	135932	52	True				
ANR	136166	Label	case ZEND_AST_PRE_INC :	7157:2:209922:209943	135932	53	True				
ANR	136167	Identifier	ZEND_AST_PRE_INC		135932	0					
ANR	136168	Label	case ZEND_AST_PRE_DEC :	7158:2:209947:209968	135932	54	True				
ANR	136169	Identifier	ZEND_AST_PRE_DEC		135932	0					
ANR	136170	ExpressionStatement	"zend_compile_pre_incdec ( result , ast )"	7159:3:209973:210009	135932	55	True				
ANR	136171	CallExpression	"zend_compile_pre_incdec ( result , ast )"		135932	0					
ANR	136172	Callee	zend_compile_pre_incdec		135932	0					
ANR	136173	Identifier	zend_compile_pre_incdec		135932	0					
ANR	136174	ArgumentList	result		135932	1					
ANR	136175	Argument	result		135932	0					
ANR	136176	Identifier	result		135932	0					
ANR	136177	Argument	ast		135932	1					
ANR	136178	Identifier	ast		135932	0					
ANR	136179	ReturnStatement	return ;	7160:3:210014:210020	135932	56	True				
ANR	136180	Label	case ZEND_AST_CAST :	7161:2:210024:210042	135932	57	True				
ANR	136181	Identifier	ZEND_AST_CAST		135932	0					
ANR	136182	ExpressionStatement	"zend_compile_cast ( result , ast )"	7162:3:210047:210077	135932	58	True				
ANR	136183	CallExpression	"zend_compile_cast ( result , ast )"		135932	0					
ANR	136184	Callee	zend_compile_cast		135932	0					
ANR	136185	Identifier	zend_compile_cast		135932	0					
ANR	136186	ArgumentList	result		135932	1					
ANR	136187	Argument	result		135932	0					
ANR	136188	Identifier	result		135932	0					
ANR	136189	Argument	ast		135932	1					
ANR	136190	Identifier	ast		135932	0					
ANR	136191	ReturnStatement	return ;	7163:3:210082:210088	135932	59	True				
ANR	136192	Label	case ZEND_AST_CONDITIONAL :	7164:2:210092:210117	135932	60	True				
ANR	136193	Identifier	ZEND_AST_CONDITIONAL		135932	0					
ANR	136194	ExpressionStatement	"zend_compile_conditional ( result , ast )"	7165:3:210122:210159	135932	61	True				
ANR	136195	CallExpression	"zend_compile_conditional ( result , ast )"		135932	0					
ANR	136196	Callee	zend_compile_conditional		135932	0					
ANR	136197	Identifier	zend_compile_conditional		135932	0					
ANR	136198	ArgumentList	result		135932	1					
ANR	136199	Argument	result		135932	0					
ANR	136200	Identifier	result		135932	0					
ANR	136201	Argument	ast		135932	1					
ANR	136202	Identifier	ast		135932	0					
ANR	136203	ReturnStatement	return ;	7166:3:210164:210170	135932	62	True				
ANR	136204	Label	case ZEND_AST_COALESCE :	7167:2:210174:210196	135932	63	True				
ANR	136205	Identifier	ZEND_AST_COALESCE		135932	0					
ANR	136206	ExpressionStatement	"zend_compile_coalesce ( result , ast )"	7168:3:210201:210235	135932	64	True				
ANR	136207	CallExpression	"zend_compile_coalesce ( result , ast )"		135932	0					
ANR	136208	Callee	zend_compile_coalesce		135932	0					
ANR	136209	Identifier	zend_compile_coalesce		135932	0					
ANR	136210	ArgumentList	result		135932	1					
ANR	136211	Argument	result		135932	0					
ANR	136212	Identifier	result		135932	0					
ANR	136213	Argument	ast		135932	1					
ANR	136214	Identifier	ast		135932	0					
ANR	136215	ReturnStatement	return ;	7169:3:210240:210246	135932	65	True				
ANR	136216	Label	case ZEND_AST_PRINT :	7170:2:210250:210269	135932	66	True				
ANR	136217	Identifier	ZEND_AST_PRINT		135932	0					
ANR	136218	ExpressionStatement	"zend_compile_print ( result , ast )"	7171:3:210274:210305	135932	67	True				
ANR	136219	CallExpression	"zend_compile_print ( result , ast )"		135932	0					
ANR	136220	Callee	zend_compile_print		135932	0					
ANR	136221	Identifier	zend_compile_print		135932	0					
ANR	136222	ArgumentList	result		135932	1					
ANR	136223	Argument	result		135932	0					
ANR	136224	Identifier	result		135932	0					
ANR	136225	Argument	ast		135932	1					
ANR	136226	Identifier	ast		135932	0					
ANR	136227	ReturnStatement	return ;	7172:3:210310:210316	135932	68	True				
ANR	136228	Label	case ZEND_AST_EXIT :	7173:2:210320:210338	135932	69	True				
ANR	136229	Identifier	ZEND_AST_EXIT		135932	0					
ANR	136230	ExpressionStatement	"zend_compile_exit ( result , ast )"	7174:3:210343:210373	135932	70	True				
ANR	136231	CallExpression	"zend_compile_exit ( result , ast )"		135932	0					
ANR	136232	Callee	zend_compile_exit		135932	0					
ANR	136233	Identifier	zend_compile_exit		135932	0					
ANR	136234	ArgumentList	result		135932	1					
ANR	136235	Argument	result		135932	0					
ANR	136236	Identifier	result		135932	0					
ANR	136237	Argument	ast		135932	1					
ANR	136238	Identifier	ast		135932	0					
ANR	136239	ReturnStatement	return ;	7175:3:210378:210384	135932	71	True				
ANR	136240	Label	case ZEND_AST_YIELD :	7176:2:210388:210407	135932	72	True				
ANR	136241	Identifier	ZEND_AST_YIELD		135932	0					
ANR	136242	ExpressionStatement	"zend_compile_yield ( result , ast )"	7177:3:210412:210443	135932	73	True				
ANR	136243	CallExpression	"zend_compile_yield ( result , ast )"		135932	0					
ANR	136244	Callee	zend_compile_yield		135932	0					
ANR	136245	Identifier	zend_compile_yield		135932	0					
ANR	136246	ArgumentList	result		135932	1					
ANR	136247	Argument	result		135932	0					
ANR	136248	Identifier	result		135932	0					
ANR	136249	Argument	ast		135932	1					
ANR	136250	Identifier	ast		135932	0					
ANR	136251	ReturnStatement	return ;	7178:3:210448:210454	135932	74	True				
ANR	136252	Label	case ZEND_AST_YIELD_FROM :	7179:2:210458:210482	135932	75	True				
ANR	136253	Identifier	ZEND_AST_YIELD_FROM		135932	0					
ANR	136254	ExpressionStatement	"zend_compile_yield_from ( result , ast )"	7180:3:210487:210523	135932	76	True				
ANR	136255	CallExpression	"zend_compile_yield_from ( result , ast )"		135932	0					
ANR	136256	Callee	zend_compile_yield_from		135932	0					
ANR	136257	Identifier	zend_compile_yield_from		135932	0					
ANR	136258	ArgumentList	result		135932	1					
ANR	136259	Argument	result		135932	0					
ANR	136260	Identifier	result		135932	0					
ANR	136261	Argument	ast		135932	1					
ANR	136262	Identifier	ast		135932	0					
ANR	136263	ReturnStatement	return ;	7181:3:210528:210534	135932	77	True				
ANR	136264	Label	case ZEND_AST_INSTANCEOF :	7182:2:210538:210562	135932	78	True				
ANR	136265	Identifier	ZEND_AST_INSTANCEOF		135932	0					
ANR	136266	ExpressionStatement	"zend_compile_instanceof ( result , ast )"	7183:3:210567:210603	135932	79	True				
ANR	136267	CallExpression	"zend_compile_instanceof ( result , ast )"		135932	0					
ANR	136268	Callee	zend_compile_instanceof		135932	0					
ANR	136269	Identifier	zend_compile_instanceof		135932	0					
ANR	136270	ArgumentList	result		135932	1					
ANR	136271	Argument	result		135932	0					
ANR	136272	Identifier	result		135932	0					
ANR	136273	Argument	ast		135932	1					
ANR	136274	Identifier	ast		135932	0					
ANR	136275	ReturnStatement	return ;	7184:3:210608:210614	135932	80	True				
ANR	136276	Label	case ZEND_AST_INCLUDE_OR_EVAL :	7185:2:210618:210647	135932	81	True				
ANR	136277	Identifier	ZEND_AST_INCLUDE_OR_EVAL		135932	0					
ANR	136278	ExpressionStatement	"zend_compile_include_or_eval ( result , ast )"	7186:3:210652:210693	135932	82	True				
ANR	136279	CallExpression	"zend_compile_include_or_eval ( result , ast )"		135932	0					
ANR	136280	Callee	zend_compile_include_or_eval		135932	0					
ANR	136281	Identifier	zend_compile_include_or_eval		135932	0					
ANR	136282	ArgumentList	result		135932	1					
ANR	136283	Argument	result		135932	0					
ANR	136284	Identifier	result		135932	0					
ANR	136285	Argument	ast		135932	1					
ANR	136286	Identifier	ast		135932	0					
ANR	136287	ReturnStatement	return ;	7187:3:210698:210704	135932	83	True				
ANR	136288	Label	case ZEND_AST_ISSET :	7188:2:210708:210727	135932	84	True				
ANR	136289	Identifier	ZEND_AST_ISSET		135932	0					
ANR	136290	Label	case ZEND_AST_EMPTY :	7189:2:210731:210750	135932	85	True				
ANR	136291	Identifier	ZEND_AST_EMPTY		135932	0					
ANR	136292	ExpressionStatement	"zend_compile_isset_or_empty ( result , ast )"	7190:3:210755:210795	135932	86	True				
ANR	136293	CallExpression	"zend_compile_isset_or_empty ( result , ast )"		135932	0					
ANR	136294	Callee	zend_compile_isset_or_empty		135932	0					
ANR	136295	Identifier	zend_compile_isset_or_empty		135932	0					
ANR	136296	ArgumentList	result		135932	1					
ANR	136297	Argument	result		135932	0					
ANR	136298	Identifier	result		135932	0					
ANR	136299	Argument	ast		135932	1					
ANR	136300	Identifier	ast		135932	0					
ANR	136301	ReturnStatement	return ;	7191:3:210800:210806	135932	87	True				
ANR	136302	Label	case ZEND_AST_SILENCE :	7192:2:210810:210831	135932	88	True				
ANR	136303	Identifier	ZEND_AST_SILENCE		135932	0					
ANR	136304	ExpressionStatement	"zend_compile_silence ( result , ast )"	7193:3:210836:210869	135932	89	True				
ANR	136305	CallExpression	"zend_compile_silence ( result , ast )"		135932	0					
ANR	136306	Callee	zend_compile_silence		135932	0					
ANR	136307	Identifier	zend_compile_silence		135932	0					
ANR	136308	ArgumentList	result		135932	1					
ANR	136309	Argument	result		135932	0					
ANR	136310	Identifier	result		135932	0					
ANR	136311	Argument	ast		135932	1					
ANR	136312	Identifier	ast		135932	0					
ANR	136313	ReturnStatement	return ;	7194:3:210874:210880	135932	90	True				
ANR	136314	Label	case ZEND_AST_SHELL_EXEC :	7195:2:210884:210908	135932	91	True				
ANR	136315	Identifier	ZEND_AST_SHELL_EXEC		135932	0					
ANR	136316	ExpressionStatement	"zend_compile_shell_exec ( result , ast )"	7196:3:210913:210949	135932	92	True				
ANR	136317	CallExpression	"zend_compile_shell_exec ( result , ast )"		135932	0					
ANR	136318	Callee	zend_compile_shell_exec		135932	0					
ANR	136319	Identifier	zend_compile_shell_exec		135932	0					
ANR	136320	ArgumentList	result		135932	1					
ANR	136321	Argument	result		135932	0					
ANR	136322	Identifier	result		135932	0					
ANR	136323	Argument	ast		135932	1					
ANR	136324	Identifier	ast		135932	0					
ANR	136325	ReturnStatement	return ;	7197:3:210954:210960	135932	93	True				
ANR	136326	Label	case ZEND_AST_ARRAY :	7198:2:210964:210983	135932	94	True				
ANR	136327	Identifier	ZEND_AST_ARRAY		135932	0					
ANR	136328	ExpressionStatement	"zend_compile_array ( result , ast )"	7199:3:210988:211019	135932	95	True				
ANR	136329	CallExpression	"zend_compile_array ( result , ast )"		135932	0					
ANR	136330	Callee	zend_compile_array		135932	0					
ANR	136331	Identifier	zend_compile_array		135932	0					
ANR	136332	ArgumentList	result		135932	1					
ANR	136333	Argument	result		135932	0					
ANR	136334	Identifier	result		135932	0					
ANR	136335	Argument	ast		135932	1					
ANR	136336	Identifier	ast		135932	0					
ANR	136337	ReturnStatement	return ;	7200:3:211024:211030	135932	96	True				
ANR	136338	Label	case ZEND_AST_CONST :	7201:2:211034:211053	135932	97	True				
ANR	136339	Identifier	ZEND_AST_CONST		135932	0					
ANR	136340	ExpressionStatement	"zend_compile_const ( result , ast )"	7202:3:211058:211089	135932	98	True				
ANR	136341	CallExpression	"zend_compile_const ( result , ast )"		135932	0					
ANR	136342	Callee	zend_compile_const		135932	0					
ANR	136343	Identifier	zend_compile_const		135932	0					
ANR	136344	ArgumentList	result		135932	1					
ANR	136345	Argument	result		135932	0					
ANR	136346	Identifier	result		135932	0					
ANR	136347	Argument	ast		135932	1					
ANR	136348	Identifier	ast		135932	0					
ANR	136349	ReturnStatement	return ;	7203:3:211094:211100	135932	99	True				
ANR	136350	Label	case ZEND_AST_CLASS_CONST :	7204:2:211104:211129	135932	100	True				
ANR	136351	Identifier	ZEND_AST_CLASS_CONST		135932	0					
ANR	136352	ExpressionStatement	"zend_compile_class_const ( result , ast )"	7205:3:211134:211171	135932	101	True				
ANR	136353	CallExpression	"zend_compile_class_const ( result , ast )"		135932	0					
ANR	136354	Callee	zend_compile_class_const		135932	0					
ANR	136355	Identifier	zend_compile_class_const		135932	0					
ANR	136356	ArgumentList	result		135932	1					
ANR	136357	Argument	result		135932	0					
ANR	136358	Identifier	result		135932	0					
ANR	136359	Argument	ast		135932	1					
ANR	136360	Identifier	ast		135932	0					
ANR	136361	ReturnStatement	return ;	7206:3:211176:211182	135932	102	True				
ANR	136362	Label	case ZEND_AST_ENCAPS_LIST :	7207:2:211186:211211	135932	103	True				
ANR	136363	Identifier	ZEND_AST_ENCAPS_LIST		135932	0					
ANR	136364	ExpressionStatement	"zend_compile_encaps_list ( result , ast )"	7208:3:211216:211253	135932	104	True				
ANR	136365	CallExpression	"zend_compile_encaps_list ( result , ast )"		135932	0					
ANR	136366	Callee	zend_compile_encaps_list		135932	0					
ANR	136367	Identifier	zend_compile_encaps_list		135932	0					
ANR	136368	ArgumentList	result		135932	1					
ANR	136369	Argument	result		135932	0					
ANR	136370	Identifier	result		135932	0					
ANR	136371	Argument	ast		135932	1					
ANR	136372	Identifier	ast		135932	0					
ANR	136373	ReturnStatement	return ;	7209:3:211258:211264	135932	105	True				
ANR	136374	Label	case ZEND_AST_MAGIC_CONST :	7210:2:211268:211293	135932	106	True				
ANR	136375	Identifier	ZEND_AST_MAGIC_CONST		135932	0					
ANR	136376	ExpressionStatement	"zend_compile_magic_const ( result , ast )"	7211:3:211298:211335	135932	107	True				
ANR	136377	CallExpression	"zend_compile_magic_const ( result , ast )"		135932	0					
ANR	136378	Callee	zend_compile_magic_const		135932	0					
ANR	136379	Identifier	zend_compile_magic_const		135932	0					
ANR	136380	ArgumentList	result		135932	1					
ANR	136381	Argument	result		135932	0					
ANR	136382	Identifier	result		135932	0					
ANR	136383	Argument	ast		135932	1					
ANR	136384	Identifier	ast		135932	0					
ANR	136385	ReturnStatement	return ;	7212:3:211340:211346	135932	108	True				
ANR	136386	Label	case ZEND_AST_CLOSURE :	7213:2:211350:211371	135932	109	True				
ANR	136387	Identifier	ZEND_AST_CLOSURE		135932	0					
ANR	136388	ExpressionStatement	"zend_compile_func_decl ( result , ast )"	7214:3:211376:211411	135932	110	True				
ANR	136389	CallExpression	"zend_compile_func_decl ( result , ast )"		135932	0					
ANR	136390	Callee	zend_compile_func_decl		135932	0					
ANR	136391	Identifier	zend_compile_func_decl		135932	0					
ANR	136392	ArgumentList	result		135932	1					
ANR	136393	Argument	result		135932	0					
ANR	136394	Identifier	result		135932	0					
ANR	136395	Argument	ast		135932	1					
ANR	136396	Identifier	ast		135932	0					
ANR	136397	ReturnStatement	return ;	7215:3:211416:211422	135932	111	True				
ANR	136398	Label	default :	7216:2:211426:211433	135932	112	True				
ANR	136399	Identifier	default		135932	0					
ANR	136400	ExpressionStatement	ZEND_ASSERT ( 0 )	7217:3:211438:211472	135932	113	True				
ANR	136401	CallExpression	ZEND_ASSERT ( 0 )		135932	0					
ANR	136402	Callee	ZEND_ASSERT		135932	0					
ANR	136403	Identifier	ZEND_ASSERT		135932	0					
ANR	136404	ArgumentList	0		135932	1					
ANR	136405	Argument	0		135932	0					
ANR	136406	PrimaryExpression	0		135932	0					
ANR	136407	ReturnType	void		135932	1					
ANR	136408	Identifier	zend_compile_expr		135932	2					
ANR	136409	ParameterList	"znode * result , zend_ast * ast"		135932	3					
ANR	136410	Parameter	znode * result	7098:23:208406:208418	135932	0	True				
ANR	136411	ParameterType	znode *		135932	0					
ANR	136412	Identifier	result		135932	1					
ANR	136413	Parameter	zend_ast * ast	7098:38:208421:208433	135932	1	True				
ANR	136414	ParameterType	zend_ast *		135932	0					
ANR	136415	Identifier	ast		135932	1					
ANR	136416	CFGEntryNode	ENTRY		135932		True				
ANR	136417	CFGExitNode	EXIT		135932		True				
ANR	136418	Symbol	ast -> kind		135932						
ANR	136419	Symbol	IS_CONST		135932						
ANR	136420	Symbol	ast		135932						
ANR	136421	Symbol	CG		135932						
ANR	136422	Symbol	& result -> u		135932						
ANR	136423	Symbol	zend_ast_get_lineno		135932						
ANR	136424	Symbol	result -> op_type		135932						
ANR	136425	Symbol	* zend_ast_get_znode		135932						
ANR	136426	Symbol	result -> u		135932						
ANR	136427	Symbol	result		135932						
ANR	136428	Symbol	zend_ast_get_znode		135932						
ANR	136429	Symbol	* ast		135932						
ANR	136430	Symbol	* result		135932						
ANR	136431	Symbol	zend_lineno		135932						
ANR	136432	Symbol	& result -> u . constant		135932						
ANR	136433	Symbol	zend_ast_get_zval		135932						
ANR	136434	Symbol	* zend_ast_get_znode ( ast )		135932						
ANR	136435	Symbol	BP_VAR_R		135932						
ANR	136436	Function	zend_compile_var	7222:0:211490:212500							
ANR	136437	FunctionDef	"zend_compile_var (znode * result , zend_ast * ast , uint32_t type)"		136436	0					
ANR	136438	CompoundStatement		7223:0:211567:212500	136436	0					
ANR	136439	SwitchStatement	switch ( ast -> kind )		136436	0					
ANR	136440	Condition	ast -> kind	7224:9:211578:211586	136436	0	True				
ANR	136441	PtrMemberAccess	ast -> kind		136436	0					
ANR	136442	Identifier	ast		136436	0					
ANR	136443	Identifier	kind		136436	1					
ANR	136444	CompoundStatement		2:20:21:21	136436	1					
ANR	136445	Label	case ZEND_AST_VAR :	7225:2:211593:211610	136436	0	True				
ANR	136446	Identifier	ZEND_AST_VAR		136436	0					
ANR	136447	ExpressionStatement	"zend_compile_simple_var ( result , ast , type , 0 )"	7226:3:211615:211660	136436	1	True				
ANR	136448	CallExpression	"zend_compile_simple_var ( result , ast , type , 0 )"		136436	0					
ANR	136449	Callee	zend_compile_simple_var		136436	0					
ANR	136450	Identifier	zend_compile_simple_var		136436	0					
ANR	136451	ArgumentList	result		136436	1					
ANR	136452	Argument	result		136436	0					
ANR	136453	Identifier	result		136436	0					
ANR	136454	Argument	ast		136436	1					
ANR	136455	Identifier	ast		136436	0					
ANR	136456	Argument	type		136436	2					
ANR	136457	Identifier	type		136436	0					
ANR	136458	Argument	0		136436	3					
ANR	136459	PrimaryExpression	0		136436	0					
ANR	136460	ReturnStatement	return ;	7227:3:211665:211671	136436	2	True				
ANR	136461	Label	case ZEND_AST_DIM :	7228:2:211675:211692	136436	3	True				
ANR	136462	Identifier	ZEND_AST_DIM		136436	0					
ANR	136463	ExpressionStatement	"zend_compile_dim ( result , ast , type )"	7229:3:211697:211732	136436	4	True				
ANR	136464	CallExpression	"zend_compile_dim ( result , ast , type )"		136436	0					
ANR	136465	Callee	zend_compile_dim		136436	0					
ANR	136466	Identifier	zend_compile_dim		136436	0					
ANR	136467	ArgumentList	result		136436	1					
ANR	136468	Argument	result		136436	0					
ANR	136469	Identifier	result		136436	0					
ANR	136470	Argument	ast		136436	1					
ANR	136471	Identifier	ast		136436	0					
ANR	136472	Argument	type		136436	2					
ANR	136473	Identifier	type		136436	0					
ANR	136474	ReturnStatement	return ;	7230:3:211737:211743	136436	5	True				
ANR	136475	Label	case ZEND_AST_PROP :	7231:2:211747:211765	136436	6	True				
ANR	136476	Identifier	ZEND_AST_PROP		136436	0					
ANR	136477	ExpressionStatement	"zend_compile_prop ( result , ast , type )"	7232:3:211770:211806	136436	7	True				
ANR	136478	CallExpression	"zend_compile_prop ( result , ast , type )"		136436	0					
ANR	136479	Callee	zend_compile_prop		136436	0					
ANR	136480	Identifier	zend_compile_prop		136436	0					
ANR	136481	ArgumentList	result		136436	1					
ANR	136482	Argument	result		136436	0					
ANR	136483	Identifier	result		136436	0					
ANR	136484	Argument	ast		136436	1					
ANR	136485	Identifier	ast		136436	0					
ANR	136486	Argument	type		136436	2					
ANR	136487	Identifier	type		136436	0					
ANR	136488	ReturnStatement	return ;	7233:3:211811:211817	136436	8	True				
ANR	136489	Label	case ZEND_AST_STATIC_PROP :	7234:2:211821:211846	136436	9	True				
ANR	136490	Identifier	ZEND_AST_STATIC_PROP		136436	0					
ANR	136491	ExpressionStatement	"zend_compile_static_prop ( result , ast , type , 0 )"	7235:3:211851:211897	136436	10	True				
ANR	136492	CallExpression	"zend_compile_static_prop ( result , ast , type , 0 )"		136436	0					
ANR	136493	Callee	zend_compile_static_prop		136436	0					
ANR	136494	Identifier	zend_compile_static_prop		136436	0					
ANR	136495	ArgumentList	result		136436	1					
ANR	136496	Argument	result		136436	0					
ANR	136497	Identifier	result		136436	0					
ANR	136498	Argument	ast		136436	1					
ANR	136499	Identifier	ast		136436	0					
ANR	136500	Argument	type		136436	2					
ANR	136501	Identifier	type		136436	0					
ANR	136502	Argument	0		136436	3					
ANR	136503	PrimaryExpression	0		136436	0					
ANR	136504	ReturnStatement	return ;	7236:3:211902:211908	136436	11	True				
ANR	136505	Label	case ZEND_AST_CALL :	7237:2:211912:211930	136436	12	True				
ANR	136506	Identifier	ZEND_AST_CALL		136436	0					
ANR	136507	ExpressionStatement	"zend_compile_call ( result , ast , type )"	7238:3:211935:211971	136436	13	True				
ANR	136508	CallExpression	"zend_compile_call ( result , ast , type )"		136436	0					
ANR	136509	Callee	zend_compile_call		136436	0					
ANR	136510	Identifier	zend_compile_call		136436	0					
ANR	136511	ArgumentList	result		136436	1					
ANR	136512	Argument	result		136436	0					
ANR	136513	Identifier	result		136436	0					
ANR	136514	Argument	ast		136436	1					
ANR	136515	Identifier	ast		136436	0					
ANR	136516	Argument	type		136436	2					
ANR	136517	Identifier	type		136436	0					
ANR	136518	ReturnStatement	return ;	7239:3:211976:211982	136436	14	True				
ANR	136519	Label	case ZEND_AST_METHOD_CALL :	7240:2:211986:212011	136436	15	True				
ANR	136520	Identifier	ZEND_AST_METHOD_CALL		136436	0					
ANR	136521	ExpressionStatement	"zend_compile_method_call ( result , ast , type )"	7241:3:212016:212059	136436	16	True				
ANR	136522	CallExpression	"zend_compile_method_call ( result , ast , type )"		136436	0					
ANR	136523	Callee	zend_compile_method_call		136436	0					
ANR	136524	Identifier	zend_compile_method_call		136436	0					
ANR	136525	ArgumentList	result		136436	1					
ANR	136526	Argument	result		136436	0					
ANR	136527	Identifier	result		136436	0					
ANR	136528	Argument	ast		136436	1					
ANR	136529	Identifier	ast		136436	0					
ANR	136530	Argument	type		136436	2					
ANR	136531	Identifier	type		136436	0					
ANR	136532	ReturnStatement	return ;	7242:3:212064:212070	136436	17	True				
ANR	136533	Label	case ZEND_AST_STATIC_CALL :	7243:2:212074:212099	136436	18	True				
ANR	136534	Identifier	ZEND_AST_STATIC_CALL		136436	0					
ANR	136535	ExpressionStatement	"zend_compile_static_call ( result , ast , type )"	7244:3:212104:212147	136436	19	True				
ANR	136536	CallExpression	"zend_compile_static_call ( result , ast , type )"		136436	0					
ANR	136537	Callee	zend_compile_static_call		136436	0					
ANR	136538	Identifier	zend_compile_static_call		136436	0					
ANR	136539	ArgumentList	result		136436	1					
ANR	136540	Argument	result		136436	0					
ANR	136541	Identifier	result		136436	0					
ANR	136542	Argument	ast		136436	1					
ANR	136543	Identifier	ast		136436	0					
ANR	136544	Argument	type		136436	2					
ANR	136545	Identifier	type		136436	0					
ANR	136546	ReturnStatement	return ;	7245:3:212152:212158	136436	20	True				
ANR	136547	Label	case ZEND_AST_ZNODE :	7246:2:212162:212181	136436	21	True				
ANR	136548	Identifier	ZEND_AST_ZNODE		136436	0					
ANR	136549	ExpressionStatement	* result = * zend_ast_get_znode ( ast )	7247:3:212186:212220	136436	22	True				
ANR	136550	AssignmentExpression	* result = * zend_ast_get_znode ( ast )		136436	0		=			
ANR	136551	UnaryOperationExpression	* result		136436	0					
ANR	136552	UnaryOperator	*		136436	0					
ANR	136553	Identifier	result		136436	1					
ANR	136554	UnaryOperationExpression	* zend_ast_get_znode ( ast )		136436	1					
ANR	136555	UnaryOperator	*		136436	0					
ANR	136556	CallExpression	zend_ast_get_znode ( ast )		136436	1					
ANR	136557	Callee	zend_ast_get_znode		136436	0					
ANR	136558	Identifier	zend_ast_get_znode		136436	0					
ANR	136559	ArgumentList	ast		136436	1					
ANR	136560	Argument	ast		136436	0					
ANR	136561	Identifier	ast		136436	0					
ANR	136562	ReturnStatement	return ;	7248:3:212225:212231	136436	23	True				
ANR	136563	Label	default :	7249:2:212235:212242	136436	24	True				
ANR	136564	Identifier	default		136436	0					
ANR	136565	IfStatement	if ( type == BP_VAR_W || type == BP_VAR_REF || type == BP_VAR_RW || type == BP_VAR_UNSET )		136436	25					
ANR	136566	Condition	type == BP_VAR_W || type == BP_VAR_REF || type == BP_VAR_RW || type == BP_VAR_UNSET	7250:7:212251:212337	136436	0	True				
ANR	136567	OrExpression	type == BP_VAR_W || type == BP_VAR_REF || type == BP_VAR_RW || type == BP_VAR_UNSET		136436	0		||			
ANR	136568	EqualityExpression	type == BP_VAR_W		136436	0		==			
ANR	136569	Identifier	type		136436	0					
ANR	136570	Identifier	BP_VAR_W		136436	1					
ANR	136571	OrExpression	type == BP_VAR_REF || type == BP_VAR_RW || type == BP_VAR_UNSET		136436	1		||			
ANR	136572	EqualityExpression	type == BP_VAR_REF		136436	0		==			
ANR	136573	Identifier	type		136436	0					
ANR	136574	Identifier	BP_VAR_REF		136436	1					
ANR	136575	OrExpression	type == BP_VAR_RW || type == BP_VAR_UNSET		136436	1		||			
ANR	136576	EqualityExpression	type == BP_VAR_RW		136436	0		==			
ANR	136577	Identifier	type		136436	0					
ANR	136578	Identifier	BP_VAR_RW		136436	1					
ANR	136579	EqualityExpression	type == BP_VAR_UNSET		136436	1		==			
ANR	136580	Identifier	type		136436	0					
ANR	136581	Identifier	BP_VAR_UNSET		136436	1					
ANR	136582	CompoundStatement		30:5:776:776	136436	1					
ANR	136583	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use temporary expression in write context"" )"	7253:4:212350:212443	136436	0	True				
ANR	136584	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use temporary expression in write context"" )"		136436	0					
ANR	136585	Callee	zend_error_noreturn		136436	0					
ANR	136586	Identifier	zend_error_noreturn		136436	0					
ANR	136587	ArgumentList	E_COMPILE_ERROR		136436	1					
ANR	136588	Argument	E_COMPILE_ERROR		136436	0					
ANR	136589	Identifier	E_COMPILE_ERROR		136436	0					
ANR	136590	Argument	"""Cannot use temporary expression in write context"""		136436	1					
ANR	136591	PrimaryExpression	"""Cannot use temporary expression in write context"""		136436	0					
ANR	136592	ExpressionStatement	"zend_compile_expr ( result , ast )"	7257:3:212454:212484	136436	26	True				
ANR	136593	CallExpression	"zend_compile_expr ( result , ast )"		136436	0					
ANR	136594	Callee	zend_compile_expr		136436	0					
ANR	136595	Identifier	zend_compile_expr		136436	0					
ANR	136596	ArgumentList	result		136436	1					
ANR	136597	Argument	result		136436	0					
ANR	136598	Identifier	result		136436	0					
ANR	136599	Argument	ast		136436	1					
ANR	136600	Identifier	ast		136436	0					
ANR	136601	ReturnStatement	return ;	7258:3:212489:212495	136436	27	True				
ANR	136602	ReturnType	void		136436	1					
ANR	136603	Identifier	zend_compile_var		136436	2					
ANR	136604	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		136436	3					
ANR	136605	Parameter	znode * result	7222:22:211512:211524	136436	0	True				
ANR	136606	ParameterType	znode *		136436	0					
ANR	136607	Identifier	result		136436	1					
ANR	136608	Parameter	zend_ast * ast	7222:37:211527:211539	136436	1	True				
ANR	136609	ParameterType	zend_ast *		136436	0					
ANR	136610	Identifier	ast		136436	1					
ANR	136611	Parameter	uint32_t type	7222:52:211542:211554	136436	2	True				
ANR	136612	ParameterType	uint32_t		136436	0					
ANR	136613	Identifier	type		136436	1					
ANR	136614	CFGEntryNode	ENTRY		136436		True				
ANR	136615	CFGExitNode	EXIT		136436		True				
ANR	136616	Symbol	BP_VAR_RW		136436						
ANR	136617	Symbol	ast -> kind		136436						
ANR	136618	Symbol	ast		136436						
ANR	136619	Symbol	E_COMPILE_ERROR		136436						
ANR	136620	Symbol	type		136436						
ANR	136621	Symbol	* zend_ast_get_znode		136436						
ANR	136622	Symbol	result		136436						
ANR	136623	Symbol	zend_ast_get_znode		136436						
ANR	136624	Symbol	* ast		136436						
ANR	136625	Symbol	* result		136436						
ANR	136626	Symbol	BP_VAR_W		136436						
ANR	136627	Symbol	* zend_ast_get_znode ( ast )		136436						
ANR	136628	Symbol	BP_VAR_UNSET		136436						
ANR	136629	Symbol	BP_VAR_REF		136436						
ANR	136630	Function	zend_delayed_compile_var	7263:0:212513:213148							
ANR	136631	FunctionDef	"zend_delayed_compile_var (znode * result , zend_ast * ast , uint32_t type)"		136630	0					
ANR	136632	CompoundStatement		7264:0:212598:213148	136630	0					
ANR	136633	IdentifierDeclStatement	zend_op * opline ;	7265:1:212601:212616	136630	0	True				
ANR	136634	IdentifierDecl	* opline		136630	0					
ANR	136635	IdentifierDeclType	zend_op *		136630	0					
ANR	136636	Identifier	opline		136630	1					
ANR	136637	SwitchStatement	switch ( ast -> kind )		136630	1					
ANR	136638	Condition	ast -> kind	7266:9:212627:212635	136630	0	True				
ANR	136639	PtrMemberAccess	ast -> kind		136630	0					
ANR	136640	Identifier	ast		136630	0					
ANR	136641	Identifier	kind		136630	1					
ANR	136642	CompoundStatement		3:20:39:39	136630	1					
ANR	136643	Label	case ZEND_AST_VAR :	7267:2:212642:212659	136630	0	True				
ANR	136644	Identifier	ZEND_AST_VAR		136630	0					
ANR	136645	ExpressionStatement	"zend_compile_simple_var ( result , ast , type , 1 )"	7268:3:212664:212709	136630	1	True				
ANR	136646	CallExpression	"zend_compile_simple_var ( result , ast , type , 1 )"		136630	0					
ANR	136647	Callee	zend_compile_simple_var		136630	0					
ANR	136648	Identifier	zend_compile_simple_var		136630	0					
ANR	136649	ArgumentList	result		136630	1					
ANR	136650	Argument	result		136630	0					
ANR	136651	Identifier	result		136630	0					
ANR	136652	Argument	ast		136630	1					
ANR	136653	Identifier	ast		136630	0					
ANR	136654	Argument	type		136630	2					
ANR	136655	Identifier	type		136630	0					
ANR	136656	Argument	1		136630	3					
ANR	136657	PrimaryExpression	1		136630	0					
ANR	136658	ReturnStatement	return ;	7269:3:212714:212720	136630	2	True				
ANR	136659	Label	case ZEND_AST_DIM :	7270:2:212724:212741	136630	3	True				
ANR	136660	Identifier	ZEND_AST_DIM		136630	0					
ANR	136661	ExpressionStatement	"opline = zend_delayed_compile_dim ( result , ast , type )"	7271:3:212746:212798	136630	4	True				
ANR	136662	AssignmentExpression	"opline = zend_delayed_compile_dim ( result , ast , type )"		136630	0		=			
ANR	136663	Identifier	opline		136630	0					
ANR	136664	CallExpression	"zend_delayed_compile_dim ( result , ast , type )"		136630	1					
ANR	136665	Callee	zend_delayed_compile_dim		136630	0					
ANR	136666	Identifier	zend_delayed_compile_dim		136630	0					
ANR	136667	ArgumentList	result		136630	1					
ANR	136668	Argument	result		136630	0					
ANR	136669	Identifier	result		136630	0					
ANR	136670	Argument	ast		136630	1					
ANR	136671	Identifier	ast		136630	0					
ANR	136672	Argument	type		136630	2					
ANR	136673	Identifier	type		136630	0					
ANR	136674	ExpressionStatement	"zend_adjust_for_fetch_type ( opline , type )"	7272:3:212803:212843	136630	5	True				
ANR	136675	CallExpression	"zend_adjust_for_fetch_type ( opline , type )"		136630	0					
ANR	136676	Callee	zend_adjust_for_fetch_type		136630	0					
ANR	136677	Identifier	zend_adjust_for_fetch_type		136630	0					
ANR	136678	ArgumentList	opline		136630	1					
ANR	136679	Argument	opline		136630	0					
ANR	136680	Identifier	opline		136630	0					
ANR	136681	Argument	type		136630	1					
ANR	136682	Identifier	type		136630	0					
ANR	136683	ReturnStatement	return ;	7273:3:212848:212854	136630	6	True				
ANR	136684	Label	case ZEND_AST_PROP :	7274:2:212858:212876	136630	7	True				
ANR	136685	Identifier	ZEND_AST_PROP		136630	0					
ANR	136686	ExpressionStatement	"opline = zend_delayed_compile_prop ( result , ast , type )"	7275:3:212881:212934	136630	8	True				
ANR	136687	AssignmentExpression	"opline = zend_delayed_compile_prop ( result , ast , type )"		136630	0		=			
ANR	136688	Identifier	opline		136630	0					
ANR	136689	CallExpression	"zend_delayed_compile_prop ( result , ast , type )"		136630	1					
ANR	136690	Callee	zend_delayed_compile_prop		136630	0					
ANR	136691	Identifier	zend_delayed_compile_prop		136630	0					
ANR	136692	ArgumentList	result		136630	1					
ANR	136693	Argument	result		136630	0					
ANR	136694	Identifier	result		136630	0					
ANR	136695	Argument	ast		136630	1					
ANR	136696	Identifier	ast		136630	0					
ANR	136697	Argument	type		136630	2					
ANR	136698	Identifier	type		136630	0					
ANR	136699	ExpressionStatement	"zend_adjust_for_fetch_type ( opline , type )"	7276:3:212939:212979	136630	9	True				
ANR	136700	CallExpression	"zend_adjust_for_fetch_type ( opline , type )"		136630	0					
ANR	136701	Callee	zend_adjust_for_fetch_type		136630	0					
ANR	136702	Identifier	zend_adjust_for_fetch_type		136630	0					
ANR	136703	ArgumentList	opline		136630	1					
ANR	136704	Argument	opline		136630	0					
ANR	136705	Identifier	opline		136630	0					
ANR	136706	Argument	type		136630	1					
ANR	136707	Identifier	type		136630	0					
ANR	136708	ReturnStatement	return ;	7277:3:212984:212990	136630	10	True				
ANR	136709	Label	case ZEND_AST_STATIC_PROP :	7278:2:212994:213019	136630	11	True				
ANR	136710	Identifier	ZEND_AST_STATIC_PROP		136630	0					
ANR	136711	ExpressionStatement	"zend_compile_static_prop ( result , ast , type , 1 )"	7279:3:213024:213070	136630	12	True				
ANR	136712	CallExpression	"zend_compile_static_prop ( result , ast , type , 1 )"		136630	0					
ANR	136713	Callee	zend_compile_static_prop		136630	0					
ANR	136714	Identifier	zend_compile_static_prop		136630	0					
ANR	136715	ArgumentList	result		136630	1					
ANR	136716	Argument	result		136630	0					
ANR	136717	Identifier	result		136630	0					
ANR	136718	Argument	ast		136630	1					
ANR	136719	Identifier	ast		136630	0					
ANR	136720	Argument	type		136630	2					
ANR	136721	Identifier	type		136630	0					
ANR	136722	Argument	1		136630	3					
ANR	136723	PrimaryExpression	1		136630	0					
ANR	136724	ReturnStatement	return ;	7280:3:213075:213081	136630	13	True				
ANR	136725	Label	default :	7281:2:213085:213092	136630	14	True				
ANR	136726	Identifier	default		136630	0					
ANR	136727	ExpressionStatement	"zend_compile_var ( result , ast , type )"	7282:3:213097:213132	136630	15	True				
ANR	136728	CallExpression	"zend_compile_var ( result , ast , type )"		136630	0					
ANR	136729	Callee	zend_compile_var		136630	0					
ANR	136730	Identifier	zend_compile_var		136630	0					
ANR	136731	ArgumentList	result		136630	1					
ANR	136732	Argument	result		136630	0					
ANR	136733	Identifier	result		136630	0					
ANR	136734	Argument	ast		136630	1					
ANR	136735	Identifier	ast		136630	0					
ANR	136736	Argument	type		136630	2					
ANR	136737	Identifier	type		136630	0					
ANR	136738	ReturnStatement	return ;	7283:3:213137:213143	136630	16	True				
ANR	136739	ReturnType	void		136630	1					
ANR	136740	Identifier	zend_delayed_compile_var		136630	2					
ANR	136741	ParameterList	"znode * result , zend_ast * ast , uint32_t type"		136630	3					
ANR	136742	Parameter	znode * result	7263:30:212543:212555	136630	0	True				
ANR	136743	ParameterType	znode *		136630	0					
ANR	136744	Identifier	result		136630	1					
ANR	136745	Parameter	zend_ast * ast	7263:45:212558:212570	136630	1	True				
ANR	136746	ParameterType	zend_ast *		136630	0					
ANR	136747	Identifier	ast		136630	1					
ANR	136748	Parameter	uint32_t type	7263:60:212573:212585	136630	2	True				
ANR	136749	ParameterType	uint32_t		136630	0					
ANR	136750	Identifier	type		136630	1					
ANR	136751	CFGEntryNode	ENTRY		136630		True				
ANR	136752	CFGExitNode	EXIT		136630		True				
ANR	136753	Symbol	result		136630						
ANR	136754	Symbol	ast -> kind		136630						
ANR	136755	Symbol	ast		136630						
ANR	136756	Symbol	opline		136630						
ANR	136757	Symbol	* ast		136630						
ANR	136758	Symbol	zend_delayed_compile_dim		136630						
ANR	136759	Symbol	type		136630						
ANR	136760	Symbol	zend_delayed_compile_prop		136630						
ANR	136761	Function	zend_eval_const_expr	7288:0:213161:219531							
ANR	136762	FunctionDef	zend_eval_const_expr (zend_ast * * ast_ptr)		136761	0					
ANR	136763	CompoundStatement		7289:0:213217:219531	136761	0					
ANR	136764	IdentifierDeclStatement	zend_ast * ast = * ast_ptr ;	7290:1:213220:213244	136761	0	True				
ANR	136765	IdentifierDecl	* ast = * ast_ptr		136761	0					
ANR	136766	IdentifierDeclType	zend_ast *		136761	0					
ANR	136767	Identifier	ast		136761	1					
ANR	136768	AssignmentExpression	* ast = * ast_ptr		136761	2		=			
ANR	136769	Identifier	ast		136761	0					
ANR	136770	UnaryOperationExpression	* ast_ptr		136761	1					
ANR	136771	UnaryOperator	*		136761	0					
ANR	136772	Identifier	ast_ptr		136761	1					
ANR	136773	IdentifierDeclStatement	zval result ;	7291:1:213247:213258	136761	1	True				
ANR	136774	IdentifierDecl	result		136761	0					
ANR	136775	IdentifierDeclType	zval		136761	0					
ANR	136776	Identifier	result		136761	1					
ANR	136777	IfStatement	if ( ! ast )		136761	2					
ANR	136778	Condition	! ast	7293:5:213266:213269	136761	0	True				
ANR	136779	UnaryOperationExpression	! ast		136761	0					
ANR	136780	UnaryOperator	!		136761	0					
ANR	136781	Identifier	ast		136761	1					
ANR	136782	CompoundStatement		5:11:54:54	136761	1					
ANR	136783	ReturnStatement	return ;	7294:2:213276:213282	136761	0	True				
ANR	136784	SwitchStatement	switch ( ast -> kind )		136761	3					
ANR	136785	Condition	ast -> kind	7297:9:213297:213305	136761	0	True				
ANR	136786	PtrMemberAccess	ast -> kind		136761	0					
ANR	136787	Identifier	ast		136761	0					
ANR	136788	Identifier	kind		136761	1					
ANR	136789	CompoundStatement		9:20:90:90	136761	1					
ANR	136790	Label	case ZEND_AST_BINARY_OP :	7298:2:213312:213335	136761	0	True				
ANR	136791	Identifier	ZEND_AST_BINARY_OP		136761	0					
ANR	136792	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 0 ] )	7299:3:213340:213376	136761	1	True				
ANR	136793	CallExpression	zend_eval_const_expr ( & ast -> child [ 0 ] )		136761	0					
ANR	136794	Callee	zend_eval_const_expr		136761	0					
ANR	136795	Identifier	zend_eval_const_expr		136761	0					
ANR	136796	ArgumentList	& ast -> child [ 0 ]		136761	1					
ANR	136797	Argument	& ast -> child [ 0 ]		136761	0					
ANR	136798	UnaryOperationExpression	& ast -> child [ 0 ]		136761	0					
ANR	136799	UnaryOperator	&		136761	0					
ANR	136800	ArrayIndexing	ast -> child [ 0 ]		136761	1					
ANR	136801	PtrMemberAccess	ast -> child		136761	0					
ANR	136802	Identifier	ast		136761	0					
ANR	136803	Identifier	child		136761	1					
ANR	136804	PrimaryExpression	0		136761	1					
ANR	136805	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 1 ] )	7300:3:213381:213417	136761	2	True				
ANR	136806	CallExpression	zend_eval_const_expr ( & ast -> child [ 1 ] )		136761	0					
ANR	136807	Callee	zend_eval_const_expr		136761	0					
ANR	136808	Identifier	zend_eval_const_expr		136761	0					
ANR	136809	ArgumentList	& ast -> child [ 1 ]		136761	1					
ANR	136810	Argument	& ast -> child [ 1 ]		136761	0					
ANR	136811	UnaryOperationExpression	& ast -> child [ 1 ]		136761	0					
ANR	136812	UnaryOperator	&		136761	0					
ANR	136813	ArrayIndexing	ast -> child [ 1 ]		136761	1					
ANR	136814	PtrMemberAccess	ast -> child		136761	0					
ANR	136815	Identifier	ast		136761	0					
ANR	136816	Identifier	child		136761	1					
ANR	136817	PrimaryExpression	1		136761	1					
ANR	136818	IfStatement	if ( ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL )		136761	3					
ANR	136819	Condition	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL	7301:7:213426:213501	136761	0	True				
ANR	136820	OrExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		136761	0		||			
ANR	136821	EqualityExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		136761	0		!=			
ANR	136822	PtrMemberAccess	ast -> child [ 0 ] -> kind		136761	0					
ANR	136823	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	136824	PtrMemberAccess	ast -> child		136761	0					
ANR	136825	Identifier	ast		136761	0					
ANR	136826	Identifier	child		136761	1					
ANR	136827	PrimaryExpression	0		136761	1					
ANR	136828	Identifier	kind		136761	1					
ANR	136829	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	136830	EqualityExpression	ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		136761	1		!=			
ANR	136831	PtrMemberAccess	ast -> child [ 1 ] -> kind		136761	0					
ANR	136832	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	136833	PtrMemberAccess	ast -> child		136761	0					
ANR	136834	Identifier	ast		136761	0					
ANR	136835	Identifier	child		136761	1					
ANR	136836	PrimaryExpression	1		136761	1					
ANR	136837	Identifier	kind		136761	1					
ANR	136838	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	136839	CompoundStatement		13:85:286:286	136761	1					
ANR	136840	ReturnStatement	return ;	7302:4:213510:213516	136761	0	True				
ANR	136841	IfStatement	"if ( ! zend_try_ct_eval_binary_op ( & result , ast -> attr , zend_ast_get_zval ( ast -> child [ 0 ] ) , zend_ast_get_zval ( ast -> child [ 1 ] ) ) )"		136761	4					
ANR	136842	Condition	"! zend_try_ct_eval_binary_op ( & result , ast -> attr , zend_ast_get_zval ( ast -> child [ 0 ] ) , zend_ast_get_zval ( ast -> child [ 1 ] ) )"	7305:7:213531:213650	136761	0	True				
ANR	136843	UnaryOperationExpression	"! zend_try_ct_eval_binary_op ( & result , ast -> attr , zend_ast_get_zval ( ast -> child [ 0 ] ) , zend_ast_get_zval ( ast -> child [ 1 ] ) )"		136761	0					
ANR	136844	UnaryOperator	!		136761	0					
ANR	136845	CallExpression	"zend_try_ct_eval_binary_op ( & result , ast -> attr , zend_ast_get_zval ( ast -> child [ 0 ] ) , zend_ast_get_zval ( ast -> child [ 1 ] ) )"		136761	1					
ANR	136846	Callee	zend_try_ct_eval_binary_op		136761	0					
ANR	136847	Identifier	zend_try_ct_eval_binary_op		136761	0					
ANR	136848	ArgumentList	& result		136761	1					
ANR	136849	Argument	& result		136761	0					
ANR	136850	UnaryOperationExpression	& result		136761	0					
ANR	136851	UnaryOperator	&		136761	0					
ANR	136852	Identifier	result		136761	1					
ANR	136853	Argument	ast -> attr		136761	1					
ANR	136854	PtrMemberAccess	ast -> attr		136761	0					
ANR	136855	Identifier	ast		136761	0					
ANR	136856	Identifier	attr		136761	1					
ANR	136857	Argument	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	2					
ANR	136858	CallExpression	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	136859	Callee	zend_ast_get_zval		136761	0					
ANR	136860	Identifier	zend_ast_get_zval		136761	0					
ANR	136861	ArgumentList	ast -> child [ 0 ]		136761	1					
ANR	136862	Argument	ast -> child [ 0 ]		136761	0					
ANR	136863	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	136864	PtrMemberAccess	ast -> child		136761	0					
ANR	136865	Identifier	ast		136761	0					
ANR	136866	Identifier	child		136761	1					
ANR	136867	PrimaryExpression	0		136761	1					
ANR	136868	Argument	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	3					
ANR	136869	CallExpression	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	0					
ANR	136870	Callee	zend_ast_get_zval		136761	0					
ANR	136871	Identifier	zend_ast_get_zval		136761	0					
ANR	136872	ArgumentList	ast -> child [ 1 ]		136761	1					
ANR	136873	Argument	ast -> child [ 1 ]		136761	0					
ANR	136874	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	136875	PtrMemberAccess	ast -> child		136761	0					
ANR	136876	Identifier	ast		136761	0					
ANR	136877	Identifier	child		136761	1					
ANR	136878	PrimaryExpression	1		136761	1					
ANR	136879	CompoundStatement		19:5:439:439	136761	1					
ANR	136880	ReturnStatement	return ;	7308:4:213663:213669	136761	0	True				
ANR	136881	BreakStatement	break ;	7310:3:213679:213684	136761	5	True				
ANR	136882	Label	case ZEND_AST_GREATER :	7311:2:213688:213709	136761	6	True				
ANR	136883	Identifier	ZEND_AST_GREATER		136761	0					
ANR	136884	Label	case ZEND_AST_GREATER_EQUAL :	7312:2:213713:213740	136761	7	True				
ANR	136885	Identifier	ZEND_AST_GREATER_EQUAL		136761	0					
ANR	136886	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 0 ] )	7313:3:213745:213781	136761	8	True				
ANR	136887	CallExpression	zend_eval_const_expr ( & ast -> child [ 0 ] )		136761	0					
ANR	136888	Callee	zend_eval_const_expr		136761	0					
ANR	136889	Identifier	zend_eval_const_expr		136761	0					
ANR	136890	ArgumentList	& ast -> child [ 0 ]		136761	1					
ANR	136891	Argument	& ast -> child [ 0 ]		136761	0					
ANR	136892	UnaryOperationExpression	& ast -> child [ 0 ]		136761	0					
ANR	136893	UnaryOperator	&		136761	0					
ANR	136894	ArrayIndexing	ast -> child [ 0 ]		136761	1					
ANR	136895	PtrMemberAccess	ast -> child		136761	0					
ANR	136896	Identifier	ast		136761	0					
ANR	136897	Identifier	child		136761	1					
ANR	136898	PrimaryExpression	0		136761	1					
ANR	136899	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 1 ] )	7314:3:213786:213822	136761	9	True				
ANR	136900	CallExpression	zend_eval_const_expr ( & ast -> child [ 1 ] )		136761	0					
ANR	136901	Callee	zend_eval_const_expr		136761	0					
ANR	136902	Identifier	zend_eval_const_expr		136761	0					
ANR	136903	ArgumentList	& ast -> child [ 1 ]		136761	1					
ANR	136904	Argument	& ast -> child [ 1 ]		136761	0					
ANR	136905	UnaryOperationExpression	& ast -> child [ 1 ]		136761	0					
ANR	136906	UnaryOperator	&		136761	0					
ANR	136907	ArrayIndexing	ast -> child [ 1 ]		136761	1					
ANR	136908	PtrMemberAccess	ast -> child		136761	0					
ANR	136909	Identifier	ast		136761	0					
ANR	136910	Identifier	child		136761	1					
ANR	136911	PrimaryExpression	1		136761	1					
ANR	136912	IfStatement	if ( ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL )		136761	10					
ANR	136913	Condition	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL	7315:7:213831:213906	136761	0	True				
ANR	136914	OrExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		136761	0		||			
ANR	136915	EqualityExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		136761	0		!=			
ANR	136916	PtrMemberAccess	ast -> child [ 0 ] -> kind		136761	0					
ANR	136917	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	136918	PtrMemberAccess	ast -> child		136761	0					
ANR	136919	Identifier	ast		136761	0					
ANR	136920	Identifier	child		136761	1					
ANR	136921	PrimaryExpression	0		136761	1					
ANR	136922	Identifier	kind		136761	1					
ANR	136923	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	136924	EqualityExpression	ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		136761	1		!=			
ANR	136925	PtrMemberAccess	ast -> child [ 1 ] -> kind		136761	0					
ANR	136926	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	136927	PtrMemberAccess	ast -> child		136761	0					
ANR	136928	Identifier	ast		136761	0					
ANR	136929	Identifier	child		136761	1					
ANR	136930	PrimaryExpression	1		136761	1					
ANR	136931	Identifier	kind		136761	1					
ANR	136932	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	136933	CompoundStatement		27:85:691:691	136761	1					
ANR	136934	ReturnStatement	return ;	7316:4:213915:213921	136761	0	True				
ANR	136935	ExpressionStatement	"zend_ct_eval_greater ( & result , ast -> kind , zend_ast_get_zval ( ast -> child [ 0 ] ) , zend_ast_get_zval ( ast -> child [ 1 ] ) )"	7319:3:213932:214044	136761	11	True				
ANR	136936	CallExpression	"zend_ct_eval_greater ( & result , ast -> kind , zend_ast_get_zval ( ast -> child [ 0 ] ) , zend_ast_get_zval ( ast -> child [ 1 ] ) )"		136761	0					
ANR	136937	Callee	zend_ct_eval_greater		136761	0					
ANR	136938	Identifier	zend_ct_eval_greater		136761	0					
ANR	136939	ArgumentList	& result		136761	1					
ANR	136940	Argument	& result		136761	0					
ANR	136941	UnaryOperationExpression	& result		136761	0					
ANR	136942	UnaryOperator	&		136761	0					
ANR	136943	Identifier	result		136761	1					
ANR	136944	Argument	ast -> kind		136761	1					
ANR	136945	PtrMemberAccess	ast -> kind		136761	0					
ANR	136946	Identifier	ast		136761	0					
ANR	136947	Identifier	kind		136761	1					
ANR	136948	Argument	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	2					
ANR	136949	CallExpression	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	136950	Callee	zend_ast_get_zval		136761	0					
ANR	136951	Identifier	zend_ast_get_zval		136761	0					
ANR	136952	ArgumentList	ast -> child [ 0 ]		136761	1					
ANR	136953	Argument	ast -> child [ 0 ]		136761	0					
ANR	136954	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	136955	PtrMemberAccess	ast -> child		136761	0					
ANR	136956	Identifier	ast		136761	0					
ANR	136957	Identifier	child		136761	1					
ANR	136958	PrimaryExpression	0		136761	1					
ANR	136959	Argument	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	3					
ANR	136960	CallExpression	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	0					
ANR	136961	Callee	zend_ast_get_zval		136761	0					
ANR	136962	Identifier	zend_ast_get_zval		136761	0					
ANR	136963	ArgumentList	ast -> child [ 1 ]		136761	1					
ANR	136964	Argument	ast -> child [ 1 ]		136761	0					
ANR	136965	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	136966	PtrMemberAccess	ast -> child		136761	0					
ANR	136967	Identifier	ast		136761	0					
ANR	136968	Identifier	child		136761	1					
ANR	136969	PrimaryExpression	1		136761	1					
ANR	136970	BreakStatement	break ;	7321:3:214049:214054	136761	12	True				
ANR	136971	Label	case ZEND_AST_AND :	7322:2:214058:214075	136761	13	True				
ANR	136972	Identifier	ZEND_AST_AND		136761	0					
ANR	136973	Label	case ZEND_AST_OR :	7323:2:214079:214095	136761	14	True				
ANR	136974	Identifier	ZEND_AST_OR		136761	0					
ANR	136975	CompoundStatement		37:3:886:891	136761	15					
ANR	136976	IdentifierDeclStatement	int i ;	7325:3:214104:214109	136761	0	True				
ANR	136977	IdentifierDecl	i		136761	0					
ANR	136978	IdentifierDeclType	int		136761	0					
ANR	136979	Identifier	i		136761	1					
ANR	136980	ForStatement	for ( i = 0 ; i <= 1 ; i ++ )		136761	1					
ANR	136981	ForInit	i = 0 ;	7326:8:214119:214124	136761	0	True				
ANR	136982	AssignmentExpression	i = 0		136761	0		=			
ANR	136983	Identifier	i		136761	0					
ANR	136984	PrimaryExpression	0		136761	1					
ANR	136985	Condition	i <= 1	7326:15:214126:214131	136761	1	True				
ANR	136986	RelationalExpression	i <= 1		136761	0		<=			
ANR	136987	Identifier	i		136761	0					
ANR	136988	PrimaryExpression	1		136761	1					
ANR	136989	PostIncDecOperationExpression	i ++	7326:23:214134:214136	136761	2	True				
ANR	136990	Identifier	i		136761	0					
ANR	136991	IncDec	++		136761	1					
ANR	136992	CompoundStatement		38:28:921:921	136761	3					
ANR	136993	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ i ] )	7327:4:214145:214181	136761	0	True				
ANR	136994	CallExpression	zend_eval_const_expr ( & ast -> child [ i ] )		136761	0					
ANR	136995	Callee	zend_eval_const_expr		136761	0					
ANR	136996	Identifier	zend_eval_const_expr		136761	0					
ANR	136997	ArgumentList	& ast -> child [ i ]		136761	1					
ANR	136998	Argument	& ast -> child [ i ]		136761	0					
ANR	136999	UnaryOperationExpression	& ast -> child [ i ]		136761	0					
ANR	137000	UnaryOperator	&		136761	0					
ANR	137001	ArrayIndexing	ast -> child [ i ]		136761	1					
ANR	137002	PtrMemberAccess	ast -> child		136761	0					
ANR	137003	Identifier	ast		136761	0					
ANR	137004	Identifier	child		136761	1					
ANR	137005	Identifier	i		136761	1					
ANR	137006	IfStatement	if ( ast -> child [ i ] -> kind == ZEND_AST_ZVAL )		136761	1					
ANR	137007	Condition	ast -> child [ i ] -> kind == ZEND_AST_ZVAL	7328:8:214191:214226	136761	0	True				
ANR	137008	EqualityExpression	ast -> child [ i ] -> kind == ZEND_AST_ZVAL		136761	0		==			
ANR	137009	PtrMemberAccess	ast -> child [ i ] -> kind		136761	0					
ANR	137010	ArrayIndexing	ast -> child [ i ]		136761	0					
ANR	137011	PtrMemberAccess	ast -> child		136761	0					
ANR	137012	Identifier	ast		136761	0					
ANR	137013	Identifier	child		136761	1					
ANR	137014	Identifier	i		136761	1					
ANR	137015	Identifier	kind		136761	1					
ANR	137016	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	137017	CompoundStatement		40:46:1011:1011	136761	1					
ANR	137018	IfStatement	if ( zend_is_true ( zend_ast_get_zval ( ast -> child [ i ] ) ) == ( ast -> kind == ZEND_AST_OR ) )		136761	0					
ANR	137019	Condition	zend_is_true ( zend_ast_get_zval ( ast -> child [ i ] ) ) == ( ast -> kind == ZEND_AST_OR )	7329:9:214240:214315	136761	0	True				
ANR	137020	EqualityExpression	zend_is_true ( zend_ast_get_zval ( ast -> child [ i ] ) ) == ( ast -> kind == ZEND_AST_OR )		136761	0		==			
ANR	137021	CallExpression	zend_is_true ( zend_ast_get_zval ( ast -> child [ i ] ) )		136761	0					
ANR	137022	Callee	zend_is_true		136761	0					
ANR	137023	Identifier	zend_is_true		136761	0					
ANR	137024	ArgumentList	zend_ast_get_zval ( ast -> child [ i ] )		136761	1					
ANR	137025	Argument	zend_ast_get_zval ( ast -> child [ i ] )		136761	0					
ANR	137026	CallExpression	zend_ast_get_zval ( ast -> child [ i ] )		136761	0					
ANR	137027	Callee	zend_ast_get_zval		136761	0					
ANR	137028	Identifier	zend_ast_get_zval		136761	0					
ANR	137029	ArgumentList	ast -> child [ i ]		136761	1					
ANR	137030	Argument	ast -> child [ i ]		136761	0					
ANR	137031	ArrayIndexing	ast -> child [ i ]		136761	0					
ANR	137032	PtrMemberAccess	ast -> child		136761	0					
ANR	137033	Identifier	ast		136761	0					
ANR	137034	Identifier	child		136761	1					
ANR	137035	Identifier	i		136761	1					
ANR	137036	EqualityExpression	ast -> kind == ZEND_AST_OR		136761	1		==			
ANR	137037	PtrMemberAccess	ast -> kind		136761	0					
ANR	137038	Identifier	ast		136761	0					
ANR	137039	Identifier	kind		136761	1					
ANR	137040	Identifier	ZEND_AST_OR		136761	1					
ANR	137041	CompoundStatement		41:87:1100:1100	136761	1					
ANR	137042	ExpressionStatement	"ZVAL_BOOL ( & result , ast -> kind == ZEND_AST_OR )"	7330:6:214326:214370	136761	0	True				
ANR	137043	CallExpression	"ZVAL_BOOL ( & result , ast -> kind == ZEND_AST_OR )"		136761	0					
ANR	137044	Callee	ZVAL_BOOL		136761	0					
ANR	137045	Identifier	ZVAL_BOOL		136761	0					
ANR	137046	ArgumentList	& result		136761	1					
ANR	137047	Argument	& result		136761	0					
ANR	137048	UnaryOperationExpression	& result		136761	0					
ANR	137049	UnaryOperator	&		136761	0					
ANR	137050	Identifier	result		136761	1					
ANR	137051	Argument	ast -> kind == ZEND_AST_OR		136761	1					
ANR	137052	EqualityExpression	ast -> kind == ZEND_AST_OR		136761	0		==			
ANR	137053	PtrMemberAccess	ast -> kind		136761	0					
ANR	137054	Identifier	ast		136761	0					
ANR	137055	Identifier	kind		136761	1					
ANR	137056	Identifier	ZEND_AST_OR		136761	1					
ANR	137057	ReturnStatement	return ;	7331:6:214378:214384	136761	1	True				
ANR	137058	IfStatement	if ( ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL )		136761	2					
ANR	137059	Condition	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL	7336:7:214412:214487	136761	0	True				
ANR	137060	OrExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		136761	0		||			
ANR	137061	EqualityExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		136761	0		!=			
ANR	137062	PtrMemberAccess	ast -> child [ 0 ] -> kind		136761	0					
ANR	137063	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137064	PtrMemberAccess	ast -> child		136761	0					
ANR	137065	Identifier	ast		136761	0					
ANR	137066	Identifier	child		136761	1					
ANR	137067	PrimaryExpression	0		136761	1					
ANR	137068	Identifier	kind		136761	1					
ANR	137069	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	137070	EqualityExpression	ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		136761	1		!=			
ANR	137071	PtrMemberAccess	ast -> child [ 1 ] -> kind		136761	0					
ANR	137072	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	137073	PtrMemberAccess	ast -> child		136761	0					
ANR	137074	Identifier	ast		136761	0					
ANR	137075	Identifier	child		136761	1					
ANR	137076	PrimaryExpression	1		136761	1					
ANR	137077	Identifier	kind		136761	1					
ANR	137078	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	137079	CompoundStatement		48:85:1272:1272	136761	1					
ANR	137080	ReturnStatement	return ;	7337:4:214496:214502	136761	0	True				
ANR	137081	IfStatement	if ( ast -> kind == ZEND_AST_OR )		136761	3					
ANR	137082	Condition	ast -> kind == ZEND_AST_OR	7340:7:214517:214540	136761	0	True				
ANR	137083	EqualityExpression	ast -> kind == ZEND_AST_OR		136761	0		==			
ANR	137084	PtrMemberAccess	ast -> kind		136761	0					
ANR	137085	Identifier	ast		136761	0					
ANR	137086	Identifier	kind		136761	1					
ANR	137087	Identifier	ZEND_AST_OR		136761	1					
ANR	137088	CompoundStatement		52:33:1325:1325	136761	1					
ANR	137089	ExpressionStatement	"ZVAL_BOOL ( & result , zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) || zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) ) )"	7341:4:214549:214665	136761	0	True				
ANR	137090	CallExpression	"ZVAL_BOOL ( & result , zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) || zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) ) )"		136761	0					
ANR	137091	Callee	ZVAL_BOOL		136761	0					
ANR	137092	Identifier	ZVAL_BOOL		136761	0					
ANR	137093	ArgumentList	& result		136761	1					
ANR	137094	Argument	& result		136761	0					
ANR	137095	UnaryOperationExpression	& result		136761	0					
ANR	137096	UnaryOperator	&		136761	0					
ANR	137097	Identifier	result		136761	1					
ANR	137098	Argument	zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) || zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) )		136761	1					
ANR	137099	OrExpression	zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) || zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) )		136761	0		||			
ANR	137100	CallExpression	zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) )		136761	0					
ANR	137101	Callee	zend_is_true		136761	0					
ANR	137102	Identifier	zend_is_true		136761	0					
ANR	137103	ArgumentList	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	1					
ANR	137104	Argument	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	137105	CallExpression	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	137106	Callee	zend_ast_get_zval		136761	0					
ANR	137107	Identifier	zend_ast_get_zval		136761	0					
ANR	137108	ArgumentList	ast -> child [ 0 ]		136761	1					
ANR	137109	Argument	ast -> child [ 0 ]		136761	0					
ANR	137110	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137111	PtrMemberAccess	ast -> child		136761	0					
ANR	137112	Identifier	ast		136761	0					
ANR	137113	Identifier	child		136761	1					
ANR	137114	PrimaryExpression	0		136761	1					
ANR	137115	CallExpression	zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) )		136761	1					
ANR	137116	Callee	zend_is_true		136761	0					
ANR	137117	Identifier	zend_is_true		136761	0					
ANR	137118	ArgumentList	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	1					
ANR	137119	Argument	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	0					
ANR	137120	CallExpression	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	0					
ANR	137121	Callee	zend_ast_get_zval		136761	0					
ANR	137122	Identifier	zend_ast_get_zval		136761	0					
ANR	137123	ArgumentList	ast -> child [ 1 ]		136761	1					
ANR	137124	Argument	ast -> child [ 1 ]		136761	0					
ANR	137125	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	137126	PtrMemberAccess	ast -> child		136761	0					
ANR	137127	Identifier	ast		136761	0					
ANR	137128	Identifier	child		136761	1					
ANR	137129	PrimaryExpression	1		136761	1					
ANR	137130	ElseStatement	else		136761	0					
ANR	137131	CompoundStatement		54:10:1459:1459	136761	0					
ANR	137132	ExpressionStatement	"ZVAL_BOOL ( & result , zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) && zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) ) )"	7343:4:214683:214799	136761	0	True				
ANR	137133	CallExpression	"ZVAL_BOOL ( & result , zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) && zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) ) )"		136761	0					
ANR	137134	Callee	ZVAL_BOOL		136761	0					
ANR	137135	Identifier	ZVAL_BOOL		136761	0					
ANR	137136	ArgumentList	& result		136761	1					
ANR	137137	Argument	& result		136761	0					
ANR	137138	UnaryOperationExpression	& result		136761	0					
ANR	137139	UnaryOperator	&		136761	0					
ANR	137140	Identifier	result		136761	1					
ANR	137141	Argument	zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) && zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) )		136761	1					
ANR	137142	AndExpression	zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) && zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) )		136761	0		&&			
ANR	137143	CallExpression	zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) )		136761	0					
ANR	137144	Callee	zend_is_true		136761	0					
ANR	137145	Identifier	zend_is_true		136761	0					
ANR	137146	ArgumentList	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	1					
ANR	137147	Argument	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	137148	CallExpression	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	137149	Callee	zend_ast_get_zval		136761	0					
ANR	137150	Identifier	zend_ast_get_zval		136761	0					
ANR	137151	ArgumentList	ast -> child [ 0 ]		136761	1					
ANR	137152	Argument	ast -> child [ 0 ]		136761	0					
ANR	137153	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137154	PtrMemberAccess	ast -> child		136761	0					
ANR	137155	Identifier	ast		136761	0					
ANR	137156	Identifier	child		136761	1					
ANR	137157	PrimaryExpression	0		136761	1					
ANR	137158	CallExpression	zend_is_true ( zend_ast_get_zval ( ast -> child [ 1 ] ) )		136761	1					
ANR	137159	Callee	zend_is_true		136761	0					
ANR	137160	Identifier	zend_is_true		136761	0					
ANR	137161	ArgumentList	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	1					
ANR	137162	Argument	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	0					
ANR	137163	CallExpression	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	0					
ANR	137164	Callee	zend_ast_get_zval		136761	0					
ANR	137165	Identifier	zend_ast_get_zval		136761	0					
ANR	137166	ArgumentList	ast -> child [ 1 ]		136761	1					
ANR	137167	Argument	ast -> child [ 1 ]		136761	0					
ANR	137168	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	137169	PtrMemberAccess	ast -> child		136761	0					
ANR	137170	Identifier	ast		136761	0					
ANR	137171	Identifier	child		136761	1					
ANR	137172	PrimaryExpression	1		136761	1					
ANR	137173	BreakStatement	break ;	7345:3:214809:214814	136761	4	True				
ANR	137174	Label	case ZEND_AST_UNARY_OP :	7347:2:214822:214844	136761	16	True				
ANR	137175	Identifier	ZEND_AST_UNARY_OP		136761	0					
ANR	137176	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 0 ] )	7348:3:214849:214885	136761	17	True				
ANR	137177	CallExpression	zend_eval_const_expr ( & ast -> child [ 0 ] )		136761	0					
ANR	137178	Callee	zend_eval_const_expr		136761	0					
ANR	137179	Identifier	zend_eval_const_expr		136761	0					
ANR	137180	ArgumentList	& ast -> child [ 0 ]		136761	1					
ANR	137181	Argument	& ast -> child [ 0 ]		136761	0					
ANR	137182	UnaryOperationExpression	& ast -> child [ 0 ]		136761	0					
ANR	137183	UnaryOperator	&		136761	0					
ANR	137184	ArrayIndexing	ast -> child [ 0 ]		136761	1					
ANR	137185	PtrMemberAccess	ast -> child		136761	0					
ANR	137186	Identifier	ast		136761	0					
ANR	137187	Identifier	child		136761	1					
ANR	137188	PrimaryExpression	0		136761	1					
ANR	137189	IfStatement	if ( ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL )		136761	18					
ANR	137190	Condition	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL	7349:7:214894:214929	136761	0	True				
ANR	137191	EqualityExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		136761	0		!=			
ANR	137192	PtrMemberAccess	ast -> child [ 0 ] -> kind		136761	0					
ANR	137193	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137194	PtrMemberAccess	ast -> child		136761	0					
ANR	137195	Identifier	ast		136761	0					
ANR	137196	Identifier	child		136761	1					
ANR	137197	PrimaryExpression	0		136761	1					
ANR	137198	Identifier	kind		136761	1					
ANR	137199	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	137200	CompoundStatement		61:45:1714:1714	136761	1					
ANR	137201	ReturnStatement	return ;	7350:4:214938:214944	136761	0	True				
ANR	137202	ExpressionStatement	"zend_ct_eval_unary_op ( & result , ast -> attr , zend_ast_get_zval ( ast -> child [ 0 ] ) )"	7353:3:214955:215030	136761	19	True				
ANR	137203	CallExpression	"zend_ct_eval_unary_op ( & result , ast -> attr , zend_ast_get_zval ( ast -> child [ 0 ] ) )"		136761	0					
ANR	137204	Callee	zend_ct_eval_unary_op		136761	0					
ANR	137205	Identifier	zend_ct_eval_unary_op		136761	0					
ANR	137206	ArgumentList	& result		136761	1					
ANR	137207	Argument	& result		136761	0					
ANR	137208	UnaryOperationExpression	& result		136761	0					
ANR	137209	UnaryOperator	&		136761	0					
ANR	137210	Identifier	result		136761	1					
ANR	137211	Argument	ast -> attr		136761	1					
ANR	137212	PtrMemberAccess	ast -> attr		136761	0					
ANR	137213	Identifier	ast		136761	0					
ANR	137214	Identifier	attr		136761	1					
ANR	137215	Argument	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	2					
ANR	137216	CallExpression	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	137217	Callee	zend_ast_get_zval		136761	0					
ANR	137218	Identifier	zend_ast_get_zval		136761	0					
ANR	137219	ArgumentList	ast -> child [ 0 ]		136761	1					
ANR	137220	Argument	ast -> child [ 0 ]		136761	0					
ANR	137221	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137222	PtrMemberAccess	ast -> child		136761	0					
ANR	137223	Identifier	ast		136761	0					
ANR	137224	Identifier	child		136761	1					
ANR	137225	PrimaryExpression	0		136761	1					
ANR	137226	BreakStatement	break ;	7354:3:215035:215040	136761	20	True				
ANR	137227	Label	case ZEND_AST_UNARY_PLUS :	7355:2:215044:215068	136761	21	True				
ANR	137228	Identifier	ZEND_AST_UNARY_PLUS		136761	0					
ANR	137229	Label	case ZEND_AST_UNARY_MINUS :	7356:2:215072:215097	136761	22	True				
ANR	137230	Identifier	ZEND_AST_UNARY_MINUS		136761	0					
ANR	137231	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 0 ] )	7357:3:215102:215138	136761	23	True				
ANR	137232	CallExpression	zend_eval_const_expr ( & ast -> child [ 0 ] )		136761	0					
ANR	137233	Callee	zend_eval_const_expr		136761	0					
ANR	137234	Identifier	zend_eval_const_expr		136761	0					
ANR	137235	ArgumentList	& ast -> child [ 0 ]		136761	1					
ANR	137236	Argument	& ast -> child [ 0 ]		136761	0					
ANR	137237	UnaryOperationExpression	& ast -> child [ 0 ]		136761	0					
ANR	137238	UnaryOperator	&		136761	0					
ANR	137239	ArrayIndexing	ast -> child [ 0 ]		136761	1					
ANR	137240	PtrMemberAccess	ast -> child		136761	0					
ANR	137241	Identifier	ast		136761	0					
ANR	137242	Identifier	child		136761	1					
ANR	137243	PrimaryExpression	0		136761	1					
ANR	137244	IfStatement	if ( ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL )		136761	24					
ANR	137245	Condition	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL	7358:7:215147:215182	136761	0	True				
ANR	137246	EqualityExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		136761	0		!=			
ANR	137247	PtrMemberAccess	ast -> child [ 0 ] -> kind		136761	0					
ANR	137248	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137249	PtrMemberAccess	ast -> child		136761	0					
ANR	137250	Identifier	ast		136761	0					
ANR	137251	Identifier	child		136761	1					
ANR	137252	PrimaryExpression	0		136761	1					
ANR	137253	Identifier	kind		136761	1					
ANR	137254	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	137255	CompoundStatement		70:45:1967:1967	136761	1					
ANR	137256	ReturnStatement	return ;	7359:4:215191:215197	136761	0	True				
ANR	137257	ExpressionStatement	"zend_ct_eval_unary_pm ( & result , ast -> kind , zend_ast_get_zval ( ast -> child [ 0 ] ) )"	7362:3:215208:215283	136761	25	True				
ANR	137258	CallExpression	"zend_ct_eval_unary_pm ( & result , ast -> kind , zend_ast_get_zval ( ast -> child [ 0 ] ) )"		136761	0					
ANR	137259	Callee	zend_ct_eval_unary_pm		136761	0					
ANR	137260	Identifier	zend_ct_eval_unary_pm		136761	0					
ANR	137261	ArgumentList	& result		136761	1					
ANR	137262	Argument	& result		136761	0					
ANR	137263	UnaryOperationExpression	& result		136761	0					
ANR	137264	UnaryOperator	&		136761	0					
ANR	137265	Identifier	result		136761	1					
ANR	137266	Argument	ast -> kind		136761	1					
ANR	137267	PtrMemberAccess	ast -> kind		136761	0					
ANR	137268	Identifier	ast		136761	0					
ANR	137269	Identifier	kind		136761	1					
ANR	137270	Argument	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	2					
ANR	137271	CallExpression	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	137272	Callee	zend_ast_get_zval		136761	0					
ANR	137273	Identifier	zend_ast_get_zval		136761	0					
ANR	137274	ArgumentList	ast -> child [ 0 ]		136761	1					
ANR	137275	Argument	ast -> child [ 0 ]		136761	0					
ANR	137276	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137277	PtrMemberAccess	ast -> child		136761	0					
ANR	137278	Identifier	ast		136761	0					
ANR	137279	Identifier	child		136761	1					
ANR	137280	PrimaryExpression	0		136761	1					
ANR	137281	BreakStatement	break ;	7363:3:215288:215293	136761	26	True				
ANR	137282	Label	case ZEND_AST_CONDITIONAL :	7364:2:215297:215322	136761	27	True				
ANR	137283	Identifier	ZEND_AST_CONDITIONAL		136761	0					
ANR	137284	CompoundStatement		78:3:2113:2141	136761	28					
ANR	137285	IdentifierDeclStatement	"zend_ast * * child , * child_ast ;"	7366:3:215331:215359	136761	0	True				
ANR	137286	IdentifierDecl	* * child		136761	0					
ANR	137287	IdentifierDeclType	zend_ast * *		136761	0					
ANR	137288	Identifier	child		136761	1					
ANR	137289	IdentifierDecl	* child_ast		136761	1					
ANR	137290	IdentifierDeclType	zend_ast *		136761	0					
ANR	137291	Identifier	child_ast		136761	1					
ANR	137292	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 0 ] )	7367:3:215364:215400	136761	1	True				
ANR	137293	CallExpression	zend_eval_const_expr ( & ast -> child [ 0 ] )		136761	0					
ANR	137294	Callee	zend_eval_const_expr		136761	0					
ANR	137295	Identifier	zend_eval_const_expr		136761	0					
ANR	137296	ArgumentList	& ast -> child [ 0 ]		136761	1					
ANR	137297	Argument	& ast -> child [ 0 ]		136761	0					
ANR	137298	UnaryOperationExpression	& ast -> child [ 0 ]		136761	0					
ANR	137299	UnaryOperator	&		136761	0					
ANR	137300	ArrayIndexing	ast -> child [ 0 ]		136761	1					
ANR	137301	PtrMemberAccess	ast -> child		136761	0					
ANR	137302	Identifier	ast		136761	0					
ANR	137303	Identifier	child		136761	1					
ANR	137304	PrimaryExpression	0		136761	1					
ANR	137305	IfStatement	if ( ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL )		136761	2					
ANR	137306	Condition	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL	7368:7:215409:215444	136761	0	True				
ANR	137307	EqualityExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		136761	0		!=			
ANR	137308	PtrMemberAccess	ast -> child [ 0 ] -> kind		136761	0					
ANR	137309	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137310	PtrMemberAccess	ast -> child		136761	0					
ANR	137311	Identifier	ast		136761	0					
ANR	137312	Identifier	child		136761	1					
ANR	137313	PrimaryExpression	0		136761	1					
ANR	137314	Identifier	kind		136761	1					
ANR	137315	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	137316	CompoundStatement		80:45:2229:2229	136761	1					
ANR	137317	IfStatement	if ( ast -> child [ 1 ] )		136761	0					
ANR	137318	Condition	ast -> child [ 1 ]	7370:8:215526:215538	136761	0	True				
ANR	137319	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	137320	PtrMemberAccess	ast -> child		136761	0					
ANR	137321	Identifier	ast		136761	0					
ANR	137322	Identifier	child		136761	1					
ANR	137323	PrimaryExpression	1		136761	1					
ANR	137324	CompoundStatement		82:23:2323:2323	136761	1					
ANR	137325	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 1 ] )	7371:5:215548:215584	136761	0	True				
ANR	137326	CallExpression	zend_eval_const_expr ( & ast -> child [ 1 ] )		136761	0					
ANR	137327	Callee	zend_eval_const_expr		136761	0					
ANR	137328	Identifier	zend_eval_const_expr		136761	0					
ANR	137329	ArgumentList	& ast -> child [ 1 ]		136761	1					
ANR	137330	Argument	& ast -> child [ 1 ]		136761	0					
ANR	137331	UnaryOperationExpression	& ast -> child [ 1 ]		136761	0					
ANR	137332	UnaryOperator	&		136761	0					
ANR	137333	ArrayIndexing	ast -> child [ 1 ]		136761	1					
ANR	137334	PtrMemberAccess	ast -> child		136761	0					
ANR	137335	Identifier	ast		136761	0					
ANR	137336	Identifier	child		136761	1					
ANR	137337	PrimaryExpression	1		136761	1					
ANR	137338	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 2 ] )	7373:4:215596:215632	136761	1	True				
ANR	137339	CallExpression	zend_eval_const_expr ( & ast -> child [ 2 ] )		136761	0					
ANR	137340	Callee	zend_eval_const_expr		136761	0					
ANR	137341	Identifier	zend_eval_const_expr		136761	0					
ANR	137342	ArgumentList	& ast -> child [ 2 ]		136761	1					
ANR	137343	Argument	& ast -> child [ 2 ]		136761	0					
ANR	137344	UnaryOperationExpression	& ast -> child [ 2 ]		136761	0					
ANR	137345	UnaryOperator	&		136761	0					
ANR	137346	ArrayIndexing	ast -> child [ 2 ]		136761	1					
ANR	137347	PtrMemberAccess	ast -> child		136761	0					
ANR	137348	Identifier	ast		136761	0					
ANR	137349	Identifier	child		136761	1					
ANR	137350	PrimaryExpression	2		136761	1					
ANR	137351	ReturnStatement	return ;	7374:4:215638:215644	136761	2	True				
ANR	137352	ExpressionStatement	child = & ast -> child [ 2 - zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) ]	7377:3:215655:215726	136761	3	True				
ANR	137353	AssignmentExpression	child = & ast -> child [ 2 - zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) ]		136761	0		=			
ANR	137354	Identifier	child		136761	0					
ANR	137355	UnaryOperationExpression	& ast -> child [ 2 - zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) ]		136761	1					
ANR	137356	UnaryOperator	&		136761	0					
ANR	137357	ArrayIndexing	ast -> child [ 2 - zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) ) ]		136761	1					
ANR	137358	PtrMemberAccess	ast -> child		136761	0					
ANR	137359	Identifier	ast		136761	0					
ANR	137360	Identifier	child		136761	1					
ANR	137361	AdditiveExpression	2 - zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) )		136761	1		-			
ANR	137362	PrimaryExpression	2		136761	0					
ANR	137363	CallExpression	zend_is_true ( zend_ast_get_zval ( ast -> child [ 0 ] ) )		136761	1					
ANR	137364	Callee	zend_is_true		136761	0					
ANR	137365	Identifier	zend_is_true		136761	0					
ANR	137366	ArgumentList	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	1					
ANR	137367	Argument	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	137368	CallExpression	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0					
ANR	137369	Callee	zend_ast_get_zval		136761	0					
ANR	137370	Identifier	zend_ast_get_zval		136761	0					
ANR	137371	ArgumentList	ast -> child [ 0 ]		136761	1					
ANR	137372	Argument	ast -> child [ 0 ]		136761	0					
ANR	137373	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137374	PtrMemberAccess	ast -> child		136761	0					
ANR	137375	Identifier	ast		136761	0					
ANR	137376	Identifier	child		136761	1					
ANR	137377	PrimaryExpression	0		136761	1					
ANR	137378	IfStatement	if ( * child == NULL )		136761	4					
ANR	137379	Condition	* child == NULL	7378:7:215735:215748	136761	0	True				
ANR	137380	EqualityExpression	* child == NULL		136761	0		==			
ANR	137381	UnaryOperationExpression	* child		136761	0					
ANR	137382	UnaryOperator	*		136761	0					
ANR	137383	Identifier	child		136761	1					
ANR	137384	Identifier	NULL		136761	1					
ANR	137385	CompoundStatement		90:23:2533:2533	136761	1					
ANR	137386	ExpressionStatement	child --	7379:4:215757:215764	136761	0	True				
ANR	137387	PostIncDecOperationExpression	child --		136761	0					
ANR	137388	Identifier	child		136761	0					
ANR	137389	IncDec	--		136761	1					
ANR	137390	ExpressionStatement	child_ast = * child	7381:3:215774:215792	136761	5	True				
ANR	137391	AssignmentExpression	child_ast = * child		136761	0		=			
ANR	137392	Identifier	child_ast		136761	0					
ANR	137393	UnaryOperationExpression	* child		136761	1					
ANR	137394	UnaryOperator	*		136761	0					
ANR	137395	Identifier	child		136761	1					
ANR	137396	ExpressionStatement	* child = NULL	7382:3:215797:215810	136761	6	True				
ANR	137397	AssignmentExpression	* child = NULL		136761	0		=			
ANR	137398	UnaryOperationExpression	* child		136761	0					
ANR	137399	UnaryOperator	*		136761	0					
ANR	137400	Identifier	child		136761	1					
ANR	137401	Identifier	NULL		136761	1					
ANR	137402	ExpressionStatement	zend_ast_destroy ( ast )	7383:3:215815:215836	136761	7	True				
ANR	137403	CallExpression	zend_ast_destroy ( ast )		136761	0					
ANR	137404	Callee	zend_ast_destroy		136761	0					
ANR	137405	Identifier	zend_ast_destroy		136761	0					
ANR	137406	ArgumentList	ast		136761	1					
ANR	137407	Argument	ast		136761	0					
ANR	137408	Identifier	ast		136761	0					
ANR	137409	ExpressionStatement	* ast_ptr = child_ast	7384:3:215841:215861	136761	8	True				
ANR	137410	AssignmentExpression	* ast_ptr = child_ast		136761	0		=			
ANR	137411	UnaryOperationExpression	* ast_ptr		136761	0					
ANR	137412	UnaryOperator	*		136761	0					
ANR	137413	Identifier	ast_ptr		136761	1					
ANR	137414	Identifier	child_ast		136761	1					
ANR	137415	ExpressionStatement	zend_eval_const_expr ( ast_ptr )	7385:3:215866:215895	136761	9	True				
ANR	137416	CallExpression	zend_eval_const_expr ( ast_ptr )		136761	0					
ANR	137417	Callee	zend_eval_const_expr		136761	0					
ANR	137418	Identifier	zend_eval_const_expr		136761	0					
ANR	137419	ArgumentList	ast_ptr		136761	1					
ANR	137420	Argument	ast_ptr		136761	0					
ANR	137421	Identifier	ast_ptr		136761	0					
ANR	137422	ReturnStatement	return ;	7386:3:215900:215906	136761	10	True				
ANR	137423	Label	case ZEND_AST_DIM :	7388:2:215914:215931	136761	29	True				
ANR	137424	Identifier	ZEND_AST_DIM		136761	0					
ANR	137425	CompoundStatement		103:3:2785:2806	136761	30					
ANR	137426	IdentifierDeclStatement	"zval * container , * dim ;"	7391:3:216003:216024	136761	0	True				
ANR	137427	IdentifierDecl	* container		136761	0					
ANR	137428	IdentifierDeclType	zval *		136761	0					
ANR	137429	Identifier	container		136761	1					
ANR	137430	IdentifierDecl	* dim		136761	1					
ANR	137431	IdentifierDeclType	zval *		136761	0					
ANR	137432	Identifier	dim		136761	1					
ANR	137433	IfStatement	if ( ast -> child [ 1 ] == NULL )		136761	1					
ANR	137434	Condition	ast -> child [ 1 ] == NULL	7393:7:216034:216054	136761	0	True				
ANR	137435	EqualityExpression	ast -> child [ 1 ] == NULL		136761	0		==			
ANR	137436	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	137437	PtrMemberAccess	ast -> child		136761	0					
ANR	137438	Identifier	ast		136761	0					
ANR	137439	Identifier	child		136761	1					
ANR	137440	PrimaryExpression	1		136761	1					
ANR	137441	Identifier	NULL		136761	1					
ANR	137442	CompoundStatement		105:30:2839:2839	136761	1					
ANR	137443	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for reading"" )"	7394:4:216063:216128	136761	0	True				
ANR	137444	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Cannot use [] for reading"" )"		136761	0					
ANR	137445	Callee	zend_error_noreturn		136761	0					
ANR	137446	Identifier	zend_error_noreturn		136761	0					
ANR	137447	ArgumentList	E_COMPILE_ERROR		136761	1					
ANR	137448	Argument	E_COMPILE_ERROR		136761	0					
ANR	137449	Identifier	E_COMPILE_ERROR		136761	0					
ANR	137450	Argument	"""Cannot use [] for reading"""		136761	1					
ANR	137451	PrimaryExpression	"""Cannot use [] for reading"""		136761	0					
ANR	137452	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 0 ] )	7397:3:216139:216175	136761	2	True				
ANR	137453	CallExpression	zend_eval_const_expr ( & ast -> child [ 0 ] )		136761	0					
ANR	137454	Callee	zend_eval_const_expr		136761	0					
ANR	137455	Identifier	zend_eval_const_expr		136761	0					
ANR	137456	ArgumentList	& ast -> child [ 0 ]		136761	1					
ANR	137457	Argument	& ast -> child [ 0 ]		136761	0					
ANR	137458	UnaryOperationExpression	& ast -> child [ 0 ]		136761	0					
ANR	137459	UnaryOperator	&		136761	0					
ANR	137460	ArrayIndexing	ast -> child [ 0 ]		136761	1					
ANR	137461	PtrMemberAccess	ast -> child		136761	0					
ANR	137462	Identifier	ast		136761	0					
ANR	137463	Identifier	child		136761	1					
ANR	137464	PrimaryExpression	0		136761	1					
ANR	137465	ExpressionStatement	zend_eval_const_expr ( & ast -> child [ 1 ] )	7398:3:216180:216216	136761	3	True				
ANR	137466	CallExpression	zend_eval_const_expr ( & ast -> child [ 1 ] )		136761	0					
ANR	137467	Callee	zend_eval_const_expr		136761	0					
ANR	137468	Identifier	zend_eval_const_expr		136761	0					
ANR	137469	ArgumentList	& ast -> child [ 1 ]		136761	1					
ANR	137470	Argument	& ast -> child [ 1 ]		136761	0					
ANR	137471	UnaryOperationExpression	& ast -> child [ 1 ]		136761	0					
ANR	137472	UnaryOperator	&		136761	0					
ANR	137473	ArrayIndexing	ast -> child [ 1 ]		136761	1					
ANR	137474	PtrMemberAccess	ast -> child		136761	0					
ANR	137475	Identifier	ast		136761	0					
ANR	137476	Identifier	child		136761	1					
ANR	137477	PrimaryExpression	1		136761	1					
ANR	137478	IfStatement	if ( ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL )		136761	4					
ANR	137479	Condition	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL	7399:7:216225:216300	136761	0	True				
ANR	137480	OrExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL || ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		136761	0		||			
ANR	137481	EqualityExpression	ast -> child [ 0 ] -> kind != ZEND_AST_ZVAL		136761	0		!=			
ANR	137482	PtrMemberAccess	ast -> child [ 0 ] -> kind		136761	0					
ANR	137483	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137484	PtrMemberAccess	ast -> child		136761	0					
ANR	137485	Identifier	ast		136761	0					
ANR	137486	Identifier	child		136761	1					
ANR	137487	PrimaryExpression	0		136761	1					
ANR	137488	Identifier	kind		136761	1					
ANR	137489	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	137490	EqualityExpression	ast -> child [ 1 ] -> kind != ZEND_AST_ZVAL		136761	1		!=			
ANR	137491	PtrMemberAccess	ast -> child [ 1 ] -> kind		136761	0					
ANR	137492	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	137493	PtrMemberAccess	ast -> child		136761	0					
ANR	137494	Identifier	ast		136761	0					
ANR	137495	Identifier	child		136761	1					
ANR	137496	PrimaryExpression	1		136761	1					
ANR	137497	Identifier	kind		136761	1					
ANR	137498	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	137499	CompoundStatement		111:85:3085:3085	136761	1					
ANR	137500	ReturnStatement	return ;	7400:4:216309:216315	136761	0	True				
ANR	137501	ExpressionStatement	container = zend_ast_get_zval ( ast -> child [ 0 ] )	7403:3:216326:216370	136761	5	True				
ANR	137502	AssignmentExpression	container = zend_ast_get_zval ( ast -> child [ 0 ] )		136761	0		=			
ANR	137503	Identifier	container		136761	0					
ANR	137504	CallExpression	zend_ast_get_zval ( ast -> child [ 0 ] )		136761	1					
ANR	137505	Callee	zend_ast_get_zval		136761	0					
ANR	137506	Identifier	zend_ast_get_zval		136761	0					
ANR	137507	ArgumentList	ast -> child [ 0 ]		136761	1					
ANR	137508	Argument	ast -> child [ 0 ]		136761	0					
ANR	137509	ArrayIndexing	ast -> child [ 0 ]		136761	0					
ANR	137510	PtrMemberAccess	ast -> child		136761	0					
ANR	137511	Identifier	ast		136761	0					
ANR	137512	Identifier	child		136761	1					
ANR	137513	PrimaryExpression	0		136761	1					
ANR	137514	ExpressionStatement	dim = zend_ast_get_zval ( ast -> child [ 1 ] )	7404:3:216375:216413	136761	6	True				
ANR	137515	AssignmentExpression	dim = zend_ast_get_zval ( ast -> child [ 1 ] )		136761	0		=			
ANR	137516	Identifier	dim		136761	0					
ANR	137517	CallExpression	zend_ast_get_zval ( ast -> child [ 1 ] )		136761	1					
ANR	137518	Callee	zend_ast_get_zval		136761	0					
ANR	137519	Identifier	zend_ast_get_zval		136761	0					
ANR	137520	ArgumentList	ast -> child [ 1 ]		136761	1					
ANR	137521	Argument	ast -> child [ 1 ]		136761	0					
ANR	137522	ArrayIndexing	ast -> child [ 1 ]		136761	0					
ANR	137523	PtrMemberAccess	ast -> child		136761	0					
ANR	137524	Identifier	ast		136761	0					
ANR	137525	Identifier	child		136761	1					
ANR	137526	PrimaryExpression	1		136761	1					
ANR	137527	IfStatement	if ( Z_TYPE_P ( container ) == IS_ARRAY )		136761	7					
ANR	137528	Condition	Z_TYPE_P ( container ) == IS_ARRAY	7406:7:216423:216453	136761	0	True				
ANR	137529	EqualityExpression	Z_TYPE_P ( container ) == IS_ARRAY		136761	0		==			
ANR	137530	CallExpression	Z_TYPE_P ( container )		136761	0					
ANR	137531	Callee	Z_TYPE_P		136761	0					
ANR	137532	Identifier	Z_TYPE_P		136761	0					
ANR	137533	ArgumentList	container		136761	1					
ANR	137534	Argument	container		136761	0					
ANR	137535	Identifier	container		136761	0					
ANR	137536	Identifier	IS_ARRAY		136761	1					
ANR	137537	CompoundStatement		119:4:3244:3252	136761	1					
ANR	137538	IdentifierDeclStatement	zval * el ;	7407:4:216462:216470	136761	0	True				
ANR	137539	IdentifierDecl	* el		136761	0					
ANR	137540	IdentifierDeclType	zval *		136761	0					
ANR	137541	Identifier	el		136761	1					
ANR	137542	IfStatement	if ( Z_TYPE_P ( dim ) == IS_LONG )		136761	1					
ANR	137543	Condition	Z_TYPE_P ( dim ) == IS_LONG	7408:8:216480:216503	136761	0	True				
ANR	137544	EqualityExpression	Z_TYPE_P ( dim ) == IS_LONG		136761	0		==			
ANR	137545	CallExpression	Z_TYPE_P ( dim )		136761	0					
ANR	137546	Callee	Z_TYPE_P		136761	0					
ANR	137547	Identifier	Z_TYPE_P		136761	0					
ANR	137548	ArgumentList	dim		136761	1					
ANR	137549	Argument	dim		136761	0					
ANR	137550	Identifier	dim		136761	0					
ANR	137551	Identifier	IS_LONG		136761	1					
ANR	137552	CompoundStatement		120:34:3288:3288	136761	1					
ANR	137553	ExpressionStatement	"el = zend_hash_index_find ( Z_ARR_P ( container ) , Z_LVAL_P ( dim ) )"	7409:5:216513:216573	136761	0	True				
ANR	137554	AssignmentExpression	"el = zend_hash_index_find ( Z_ARR_P ( container ) , Z_LVAL_P ( dim ) )"		136761	0		=			
ANR	137555	Identifier	el		136761	0					
ANR	137556	CallExpression	"zend_hash_index_find ( Z_ARR_P ( container ) , Z_LVAL_P ( dim ) )"		136761	1					
ANR	137557	Callee	zend_hash_index_find		136761	0					
ANR	137558	Identifier	zend_hash_index_find		136761	0					
ANR	137559	ArgumentList	Z_ARR_P ( container )		136761	1					
ANR	137560	Argument	Z_ARR_P ( container )		136761	0					
ANR	137561	CallExpression	Z_ARR_P ( container )		136761	0					
ANR	137562	Callee	Z_ARR_P		136761	0					
ANR	137563	Identifier	Z_ARR_P		136761	0					
ANR	137564	ArgumentList	container		136761	1					
ANR	137565	Argument	container		136761	0					
ANR	137566	Identifier	container		136761	0					
ANR	137567	Argument	Z_LVAL_P ( dim )		136761	1					
ANR	137568	CallExpression	Z_LVAL_P ( dim )		136761	0					
ANR	137569	Callee	Z_LVAL_P		136761	0					
ANR	137570	Identifier	Z_LVAL_P		136761	0					
ANR	137571	ArgumentList	dim		136761	1					
ANR	137572	Argument	dim		136761	0					
ANR	137573	Identifier	dim		136761	0					
ANR	137574	IfStatement	if ( el )		136761	1					
ANR	137575	Condition	el	7410:9:216584:216585	136761	0	True				
ANR	137576	Identifier	el		136761	0					
ANR	137577	CompoundStatement		122:13:3370:3370	136761	1					
ANR	137578	ExpressionStatement	"ZVAL_COPY ( & result , el )"	7411:6:216596:216618	136761	0	True				
ANR	137579	CallExpression	"ZVAL_COPY ( & result , el )"		136761	0					
ANR	137580	Callee	ZVAL_COPY		136761	0					
ANR	137581	Identifier	ZVAL_COPY		136761	0					
ANR	137582	ArgumentList	& result		136761	1					
ANR	137583	Argument	& result		136761	0					
ANR	137584	UnaryOperationExpression	& result		136761	0					
ANR	137585	UnaryOperator	&		136761	0					
ANR	137586	Identifier	result		136761	1					
ANR	137587	Argument	el		136761	1					
ANR	137588	Identifier	el		136761	0					
ANR	137589	ElseStatement	else		136761	0					
ANR	137590	CompoundStatement		124:12:3414:3414	136761	0					
ANR	137591	ReturnStatement	return ;	7413:6:216640:216646	136761	0	True				
ANR	137592	ElseStatement	else		136761	0					
ANR	137593	IfStatement	if ( Z_TYPE_P ( dim ) == IS_STRING )		136761	0					
ANR	137594	Condition	Z_TYPE_P ( dim ) == IS_STRING	7415:15:216670:216695	136761	0	True				
ANR	137595	EqualityExpression	Z_TYPE_P ( dim ) == IS_STRING		136761	0		==			
ANR	137596	CallExpression	Z_TYPE_P ( dim )		136761	0					
ANR	137597	Callee	Z_TYPE_P		136761	0					
ANR	137598	Identifier	Z_TYPE_P		136761	0					
ANR	137599	ArgumentList	dim		136761	1					
ANR	137600	Argument	dim		136761	0					
ANR	137601	Identifier	dim		136761	0					
ANR	137602	Identifier	IS_STRING		136761	1					
ANR	137603	CompoundStatement		127:43:3480:3480	136761	1					
ANR	137604	ExpressionStatement	"el = zend_symtable_find ( Z_ARR_P ( container ) , Z_STR_P ( dim ) )"	7416:5:216705:216762	136761	0	True				
ANR	137605	AssignmentExpression	"el = zend_symtable_find ( Z_ARR_P ( container ) , Z_STR_P ( dim ) )"		136761	0		=			
ANR	137606	Identifier	el		136761	0					
ANR	137607	CallExpression	"zend_symtable_find ( Z_ARR_P ( container ) , Z_STR_P ( dim ) )"		136761	1					
ANR	137608	Callee	zend_symtable_find		136761	0					
ANR	137609	Identifier	zend_symtable_find		136761	0					
ANR	137610	ArgumentList	Z_ARR_P ( container )		136761	1					
ANR	137611	Argument	Z_ARR_P ( container )		136761	0					
ANR	137612	CallExpression	Z_ARR_P ( container )		136761	0					
ANR	137613	Callee	Z_ARR_P		136761	0					
ANR	137614	Identifier	Z_ARR_P		136761	0					
ANR	137615	ArgumentList	container		136761	1					
ANR	137616	Argument	container		136761	0					
ANR	137617	Identifier	container		136761	0					
ANR	137618	Argument	Z_STR_P ( dim )		136761	1					
ANR	137619	CallExpression	Z_STR_P ( dim )		136761	0					
ANR	137620	Callee	Z_STR_P		136761	0					
ANR	137621	Identifier	Z_STR_P		136761	0					
ANR	137622	ArgumentList	dim		136761	1					
ANR	137623	Argument	dim		136761	0					
ANR	137624	Identifier	dim		136761	0					
ANR	137625	IfStatement	if ( el )		136761	1					
ANR	137626	Condition	el	7417:9:216773:216774	136761	0	True				
ANR	137627	Identifier	el		136761	0					
ANR	137628	CompoundStatement		129:13:3559:3559	136761	1					
ANR	137629	ExpressionStatement	"ZVAL_COPY ( & result , el )"	7418:6:216785:216807	136761	0	True				
ANR	137630	CallExpression	"ZVAL_COPY ( & result , el )"		136761	0					
ANR	137631	Callee	ZVAL_COPY		136761	0					
ANR	137632	Identifier	ZVAL_COPY		136761	0					
ANR	137633	ArgumentList	& result		136761	1					
ANR	137634	Argument	& result		136761	0					
ANR	137635	UnaryOperationExpression	& result		136761	0					
ANR	137636	UnaryOperator	&		136761	0					
ANR	137637	Identifier	result		136761	1					
ANR	137638	Argument	el		136761	1					
ANR	137639	Identifier	el		136761	0					
ANR	137640	ElseStatement	else		136761	0					
ANR	137641	CompoundStatement		131:12:3603:3603	136761	0					
ANR	137642	ReturnStatement	return ;	7420:6:216829:216835	136761	0	True				
ANR	137643	ElseStatement	else		136761	0					
ANR	137644	CompoundStatement		134:11:3637:3637	136761	0					
ANR	137645	ReturnStatement	return ;	7423:5:216862:216868	136761	0	True				
ANR	137646	ElseStatement	else		136761	0					
ANR	137647	IfStatement	if ( Z_TYPE_P ( container ) == IS_STRING )		136761	0					
ANR	137648	Condition	Z_TYPE_P ( container ) == IS_STRING	7425:14:216925:216956	136761	0	True				
ANR	137649	EqualityExpression	Z_TYPE_P ( container ) == IS_STRING		136761	0		==			
ANR	137650	CallExpression	Z_TYPE_P ( container )		136761	0					
ANR	137651	Callee	Z_TYPE_P		136761	0					
ANR	137652	Identifier	Z_TYPE_P		136761	0					
ANR	137653	ArgumentList	container		136761	1					
ANR	137654	Argument	container		136761	0					
ANR	137655	Identifier	container		136761	0					
ANR	137656	Identifier	IS_STRING		136761	1					
ANR	137657	CompoundStatement		139:4:3769:3781	136761	1					
ANR	137658	IdentifierDeclStatement	zend_long offset ;	7426:4:216965:216981	136761	0	True				
ANR	137659	IdentifierDecl	offset		136761	0					
ANR	137660	IdentifierDeclType	zend_long		136761	0					
ANR	137661	Identifier	offset		136761	1					
ANR	137662	IdentifierDeclStatement	zend_uchar c ;	7427:4:216987:216999	136761	1	True				
ANR	137663	IdentifierDecl	c		136761	0					
ANR	137664	IdentifierDeclType	zend_uchar		136761	0					
ANR	137665	Identifier	c		136761	1					
ANR	137666	IfStatement	if ( Z_TYPE_P ( dim ) == IS_LONG )		136761	2					
ANR	137667	Condition	Z_TYPE_P ( dim ) == IS_LONG	7428:8:217009:217032	136761	0	True				
ANR	137668	EqualityExpression	Z_TYPE_P ( dim ) == IS_LONG		136761	0		==			
ANR	137669	CallExpression	Z_TYPE_P ( dim )		136761	0					
ANR	137670	Callee	Z_TYPE_P		136761	0					
ANR	137671	Identifier	Z_TYPE_P		136761	0					
ANR	137672	ArgumentList	dim		136761	1					
ANR	137673	Argument	dim		136761	0					
ANR	137674	Identifier	dim		136761	0					
ANR	137675	Identifier	IS_LONG		136761	1					
ANR	137676	CompoundStatement		140:34:3817:3817	136761	1					
ANR	137677	ExpressionStatement	offset = Z_LVAL_P ( dim )	7429:5:217042:217064	136761	0	True				
ANR	137678	AssignmentExpression	offset = Z_LVAL_P ( dim )		136761	0		=			
ANR	137679	Identifier	offset		136761	0					
ANR	137680	CallExpression	Z_LVAL_P ( dim )		136761	1					
ANR	137681	Callee	Z_LVAL_P		136761	0					
ANR	137682	Identifier	Z_LVAL_P		136761	0					
ANR	137683	ArgumentList	dim		136761	1					
ANR	137684	Argument	dim		136761	0					
ANR	137685	Identifier	dim		136761	0					
ANR	137686	ElseStatement	else		136761	0					
ANR	137687	IfStatement	"if ( Z_TYPE_P ( dim ) != IS_STRING || is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , & offset , NULL , 1 ) != IS_LONG )"		136761	0					
ANR	137688	Condition	"Z_TYPE_P ( dim ) != IS_STRING || is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , & offset , NULL , 1 ) != IS_LONG"	7430:15:217081:217190	136761	0	True				
ANR	137689	OrExpression	"Z_TYPE_P ( dim ) != IS_STRING || is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , & offset , NULL , 1 ) != IS_LONG"		136761	0		||			
ANR	137690	EqualityExpression	Z_TYPE_P ( dim ) != IS_STRING		136761	0		!=			
ANR	137691	CallExpression	Z_TYPE_P ( dim )		136761	0					
ANR	137692	Callee	Z_TYPE_P		136761	0					
ANR	137693	Identifier	Z_TYPE_P		136761	0					
ANR	137694	ArgumentList	dim		136761	1					
ANR	137695	Argument	dim		136761	0					
ANR	137696	Identifier	dim		136761	0					
ANR	137697	Identifier	IS_STRING		136761	1					
ANR	137698	EqualityExpression	"is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , & offset , NULL , 1 ) != IS_LONG"		136761	1		!=			
ANR	137699	CallExpression	"is_numeric_string ( Z_STRVAL_P ( dim ) , Z_STRLEN_P ( dim ) , & offset , NULL , 1 )"		136761	0					
ANR	137700	Callee	is_numeric_string		136761	0					
ANR	137701	Identifier	is_numeric_string		136761	0					
ANR	137702	ArgumentList	Z_STRVAL_P ( dim )		136761	1					
ANR	137703	Argument	Z_STRVAL_P ( dim )		136761	0					
ANR	137704	CallExpression	Z_STRVAL_P ( dim )		136761	0					
ANR	137705	Callee	Z_STRVAL_P		136761	0					
ANR	137706	Identifier	Z_STRVAL_P		136761	0					
ANR	137707	ArgumentList	dim		136761	1					
ANR	137708	Argument	dim		136761	0					
ANR	137709	Identifier	dim		136761	0					
ANR	137710	Argument	Z_STRLEN_P ( dim )		136761	1					
ANR	137711	CallExpression	Z_STRLEN_P ( dim )		136761	0					
ANR	137712	Callee	Z_STRLEN_P		136761	0					
ANR	137713	Identifier	Z_STRLEN_P		136761	0					
ANR	137714	ArgumentList	dim		136761	1					
ANR	137715	Argument	dim		136761	0					
ANR	137716	Identifier	dim		136761	0					
ANR	137717	Argument	& offset		136761	2					
ANR	137718	UnaryOperationExpression	& offset		136761	0					
ANR	137719	UnaryOperator	&		136761	0					
ANR	137720	Identifier	offset		136761	1					
ANR	137721	Argument	NULL		136761	3					
ANR	137722	Identifier	NULL		136761	0					
ANR	137723	Argument	1		136761	4					
ANR	137724	PrimaryExpression	1		136761	0					
ANR	137725	Identifier	IS_LONG		136761	1					
ANR	137726	CompoundStatement		142:127:3975:3975	136761	1					
ANR	137727	ReturnStatement	return ;	7431:5:217200:217206	136761	0	True				
ANR	137728	IfStatement	if ( offset < 0 || ( size_t ) offset >= Z_STRLEN_P ( container ) )		136761	3					
ANR	137729	Condition	offset < 0 || ( size_t ) offset >= Z_STRLEN_P ( container )	7433:8:217222:217274	136761	0	True				
ANR	137730	OrExpression	offset < 0 || ( size_t ) offset >= Z_STRLEN_P ( container )		136761	0		||			
ANR	137731	RelationalExpression	offset < 0		136761	0		<			
ANR	137732	Identifier	offset		136761	0					
ANR	137733	PrimaryExpression	0		136761	1					
ANR	137734	RelationalExpression	( size_t ) offset >= Z_STRLEN_P ( container )		136761	1		>=			
ANR	137735	CastExpression	( size_t ) offset		136761	0					
ANR	137736	CastTarget	size_t		136761	0					
ANR	137737	Identifier	offset		136761	1					
ANR	137738	CallExpression	Z_STRLEN_P ( container )		136761	1					
ANR	137739	Callee	Z_STRLEN_P		136761	0					
ANR	137740	Identifier	Z_STRLEN_P		136761	0					
ANR	137741	ArgumentList	container		136761	1					
ANR	137742	Argument	container		136761	0					
ANR	137743	Identifier	container		136761	0					
ANR	137744	CompoundStatement		145:63:4059:4059	136761	1					
ANR	137745	ReturnStatement	return ;	7434:5:217284:217290	136761	0	True				
ANR	137746	ExpressionStatement	c = ( zend_uchar ) Z_STRVAL_P ( container ) [ offset ]	7436:4:217302:217348	136761	4	True				
ANR	137747	AssignmentExpression	c = ( zend_uchar ) Z_STRVAL_P ( container ) [ offset ]		136761	0		=			
ANR	137748	Identifier	c		136761	0					
ANR	137749	CastExpression	( zend_uchar ) Z_STRVAL_P ( container ) [ offset ]		136761	1					
ANR	137750	CastTarget	zend_uchar		136761	0					
ANR	137751	ArrayIndexing	Z_STRVAL_P ( container ) [ offset ]		136761	1					
ANR	137752	CallExpression	Z_STRVAL_P ( container )		136761	0					
ANR	137753	Callee	Z_STRVAL_P		136761	0					
ANR	137754	Identifier	Z_STRVAL_P		136761	0					
ANR	137755	ArgumentList	container		136761	1					
ANR	137756	Argument	container		136761	0					
ANR	137757	Identifier	container		136761	0					
ANR	137758	Identifier	offset		136761	1					
ANR	137759	IfStatement	if ( CG ( one_char_string ) [ c ] )		136761	5					
ANR	137760	Condition	CG ( one_char_string ) [ c ]	7437:8:217358:217379	136761	0	True				
ANR	137761	ArrayIndexing	CG ( one_char_string ) [ c ]		136761	0					
ANR	137762	CallExpression	CG ( one_char_string )		136761	0					
ANR	137763	Callee	CG		136761	0					
ANR	137764	Identifier	CG		136761	0					
ANR	137765	ArgumentList	one_char_string		136761	1					
ANR	137766	Argument	one_char_string		136761	0					
ANR	137767	Identifier	one_char_string		136761	0					
ANR	137768	Identifier	c		136761	1					
ANR	137769	CompoundStatement		149:32:4164:4164	136761	1					
ANR	137770	ExpressionStatement	"ZVAL_INTERNED_STR ( & result , CG ( one_char_string ) [ c ] )"	7438:5:217389:217439	136761	0	True				
ANR	137771	CallExpression	"ZVAL_INTERNED_STR ( & result , CG ( one_char_string ) [ c ] )"		136761	0					
ANR	137772	Callee	ZVAL_INTERNED_STR		136761	0					
ANR	137773	Identifier	ZVAL_INTERNED_STR		136761	0					
ANR	137774	ArgumentList	& result		136761	1					
ANR	137775	Argument	& result		136761	0					
ANR	137776	UnaryOperationExpression	& result		136761	0					
ANR	137777	UnaryOperator	&		136761	0					
ANR	137778	Identifier	result		136761	1					
ANR	137779	Argument	CG ( one_char_string ) [ c ]		136761	1					
ANR	137780	ArrayIndexing	CG ( one_char_string ) [ c ]		136761	0					
ANR	137781	CallExpression	CG ( one_char_string )		136761	0					
ANR	137782	Callee	CG		136761	0					
ANR	137783	Identifier	CG		136761	0					
ANR	137784	ArgumentList	one_char_string		136761	1					
ANR	137785	Argument	one_char_string		136761	0					
ANR	137786	Identifier	one_char_string		136761	0					
ANR	137787	Identifier	c		136761	1					
ANR	137788	ElseStatement	else		136761	0					
ANR	137789	CompoundStatement		151:11:4234:4234	136761	0					
ANR	137790	ExpressionStatement	"ZVAL_NEW_STR ( & result , zend_string_init ( ( char * ) & c , 1 , 0 ) )"	7440:5:217459:217517	136761	0	True				
ANR	137791	CallExpression	"ZVAL_NEW_STR ( & result , zend_string_init ( ( char * ) & c , 1 , 0 ) )"		136761	0					
ANR	137792	Callee	ZVAL_NEW_STR		136761	0					
ANR	137793	Identifier	ZVAL_NEW_STR		136761	0					
ANR	137794	ArgumentList	& result		136761	1					
ANR	137795	Argument	& result		136761	0					
ANR	137796	UnaryOperationExpression	& result		136761	0					
ANR	137797	UnaryOperator	&		136761	0					
ANR	137798	Identifier	result		136761	1					
ANR	137799	Argument	"zend_string_init ( ( char * ) & c , 1 , 0 )"		136761	1					
ANR	137800	CallExpression	"zend_string_init ( ( char * ) & c , 1 , 0 )"		136761	0					
ANR	137801	Callee	zend_string_init		136761	0					
ANR	137802	Identifier	zend_string_init		136761	0					
ANR	137803	ArgumentList	( char * ) & c		136761	1					
ANR	137804	Argument	( char * ) & c		136761	0					
ANR	137805	CastExpression	( char * ) & c		136761	0					
ANR	137806	CastTarget	char *		136761	0					
ANR	137807	UnaryOperationExpression	& c		136761	1					
ANR	137808	UnaryOperator	&		136761	0					
ANR	137809	Identifier	c		136761	1					
ANR	137810	Argument	1		136761	1					
ANR	137811	PrimaryExpression	1		136761	0					
ANR	137812	Argument	0		136761	2					
ANR	137813	PrimaryExpression	0		136761	0					
ANR	137814	ElseStatement	else		136761	0					
ANR	137815	IfStatement	if ( Z_TYPE_P ( container ) <= IS_FALSE )		136761	0					
ANR	137816	Condition	Z_TYPE_P ( container ) <= IS_FALSE	7442:14:217539:217569	136761	0	True				
ANR	137817	RelationalExpression	Z_TYPE_P ( container ) <= IS_FALSE		136761	0		<=			
ANR	137818	CallExpression	Z_TYPE_P ( container )		136761	0					
ANR	137819	Callee	Z_TYPE_P		136761	0					
ANR	137820	Identifier	Z_TYPE_P		136761	0					
ANR	137821	ArgumentList	container		136761	1					
ANR	137822	Argument	container		136761	0					
ANR	137823	Identifier	container		136761	0					
ANR	137824	Identifier	IS_FALSE		136761	1					
ANR	137825	CompoundStatement		154:47:4354:4354	136761	1					
ANR	137826	ExpressionStatement	ZVAL_NULL ( & result )	7443:4:217578:217596	136761	0	True				
ANR	137827	CallExpression	ZVAL_NULL ( & result )		136761	0					
ANR	137828	Callee	ZVAL_NULL		136761	0					
ANR	137829	Identifier	ZVAL_NULL		136761	0					
ANR	137830	ArgumentList	& result		136761	1					
ANR	137831	Argument	& result		136761	0					
ANR	137832	UnaryOperationExpression	& result		136761	0					
ANR	137833	UnaryOperator	&		136761	0					
ANR	137834	Identifier	result		136761	1					
ANR	137835	ElseStatement	else		136761	0					
ANR	137836	CompoundStatement		156:10:4390:4390	136761	0					
ANR	137837	ReturnStatement	return ;	7445:4:217614:217620	136761	0	True				
ANR	137838	BreakStatement	break ;	7447:3:217630:217635	136761	8	True				
ANR	137839	Label	case ZEND_AST_ARRAY :	7449:2:217643:217662	136761	31	True				
ANR	137840	Identifier	ZEND_AST_ARRAY		136761	0					
ANR	137841	IfStatement	"if ( ! zend_try_ct_eval_array ( & result , ast ) )"		136761	32					
ANR	137842	Condition	"! zend_try_ct_eval_array ( & result , ast )"	7450:7:217671:217707	136761	0	True				
ANR	137843	UnaryOperationExpression	"! zend_try_ct_eval_array ( & result , ast )"		136761	0					
ANR	137844	UnaryOperator	!		136761	0					
ANR	137845	CallExpression	"zend_try_ct_eval_array ( & result , ast )"		136761	1					
ANR	137846	Callee	zend_try_ct_eval_array		136761	0					
ANR	137847	Identifier	zend_try_ct_eval_array		136761	0					
ANR	137848	ArgumentList	& result		136761	1					
ANR	137849	Argument	& result		136761	0					
ANR	137850	UnaryOperationExpression	& result		136761	0					
ANR	137851	UnaryOperator	&		136761	0					
ANR	137852	Identifier	result		136761	1					
ANR	137853	Argument	ast		136761	1					
ANR	137854	Identifier	ast		136761	0					
ANR	137855	CompoundStatement		162:46:4492:4492	136761	1					
ANR	137856	ReturnStatement	return ;	7451:4:217716:217722	136761	0	True				
ANR	137857	BreakStatement	break ;	7453:3:217732:217737	136761	33	True				
ANR	137858	Label	case ZEND_AST_MAGIC_CONST :	7454:2:217741:217766	136761	34	True				
ANR	137859	Identifier	ZEND_AST_MAGIC_CONST		136761	0					
ANR	137860	IfStatement	"if ( ! zend_try_ct_eval_magic_const ( & result , ast ) )"		136761	35					
ANR	137861	Condition	"! zend_try_ct_eval_magic_const ( & result , ast )"	7455:7:217775:217817	136761	0	True				
ANR	137862	UnaryOperationExpression	"! zend_try_ct_eval_magic_const ( & result , ast )"		136761	0					
ANR	137863	UnaryOperator	!		136761	0					
ANR	137864	CallExpression	"zend_try_ct_eval_magic_const ( & result , ast )"		136761	1					
ANR	137865	Callee	zend_try_ct_eval_magic_const		136761	0					
ANR	137866	Identifier	zend_try_ct_eval_magic_const		136761	0					
ANR	137867	ArgumentList	& result		136761	1					
ANR	137868	Argument	& result		136761	0					
ANR	137869	UnaryOperationExpression	& result		136761	0					
ANR	137870	UnaryOperator	&		136761	0					
ANR	137871	Identifier	result		136761	1					
ANR	137872	Argument	ast		136761	1					
ANR	137873	Identifier	ast		136761	0					
ANR	137874	CompoundStatement		167:52:4602:4602	136761	1					
ANR	137875	ReturnStatement	return ;	7456:4:217826:217832	136761	0	True				
ANR	137876	BreakStatement	break ;	7458:3:217842:217847	136761	36	True				
ANR	137877	Label	case ZEND_AST_CONST :	7459:2:217851:217870	136761	37	True				
ANR	137878	Identifier	ZEND_AST_CONST		136761	0					
ANR	137879	CompoundStatement		175:3:4733:4855	136761	38					
ANR	137880	IdentifierDeclStatement	zend_ast * name_ast = ast -> child [ 0 ] ;	7461:3:217879:217913	136761	0	True				
ANR	137881	IdentifierDecl	* name_ast = ast -> child [ 0 ]		136761	0					
ANR	137882	IdentifierDeclType	zend_ast *		136761	0					
ANR	137883	Identifier	name_ast		136761	1					
ANR	137884	AssignmentExpression	* name_ast = ast -> child [ 0 ]		136761	2		=			
ANR	137885	Identifier	name_ast		136761	0					
ANR	137886	ArrayIndexing	ast -> child [ 0 ]		136761	1					
ANR	137887	PtrMemberAccess	ast -> child		136761	0					
ANR	137888	Identifier	ast		136761	0					
ANR	137889	Identifier	child		136761	1					
ANR	137890	PrimaryExpression	0		136761	1					
ANR	137891	IdentifierDeclStatement	zend_bool is_fully_qualified ;	7462:3:217918:217946	136761	1	True				
ANR	137892	IdentifierDecl	is_fully_qualified		136761	0					
ANR	137893	IdentifierDeclType	zend_bool		136761	0					
ANR	137894	Identifier	is_fully_qualified		136761	1					
ANR	137895	IdentifierDeclStatement	"zend_string * resolved_name = zend_resolve_const_name ( zend_ast_get_str ( name_ast ) , name_ast -> attr , & is_fully_qualified ) ;"	7463:3:217951:218073	136761	2	True				
ANR	137896	IdentifierDecl	"* resolved_name = zend_resolve_const_name ( zend_ast_get_str ( name_ast ) , name_ast -> attr , & is_fully_qualified )"		136761	0					
ANR	137897	IdentifierDeclType	zend_string *		136761	0					
ANR	137898	Identifier	resolved_name		136761	1					
ANR	137899	AssignmentExpression	"* resolved_name = zend_resolve_const_name ( zend_ast_get_str ( name_ast ) , name_ast -> attr , & is_fully_qualified )"		136761	2		=			
ANR	137900	Identifier	resolved_name		136761	0					
ANR	137901	CallExpression	"zend_resolve_const_name ( zend_ast_get_str ( name_ast ) , name_ast -> attr , & is_fully_qualified )"		136761	1					
ANR	137902	Callee	zend_resolve_const_name		136761	0					
ANR	137903	Identifier	zend_resolve_const_name		136761	0					
ANR	137904	ArgumentList	zend_ast_get_str ( name_ast )		136761	1					
ANR	137905	Argument	zend_ast_get_str ( name_ast )		136761	0					
ANR	137906	CallExpression	zend_ast_get_str ( name_ast )		136761	0					
ANR	137907	Callee	zend_ast_get_str		136761	0					
ANR	137908	Identifier	zend_ast_get_str		136761	0					
ANR	137909	ArgumentList	name_ast		136761	1					
ANR	137910	Argument	name_ast		136761	0					
ANR	137911	Identifier	name_ast		136761	0					
ANR	137912	Argument	name_ast -> attr		136761	1					
ANR	137913	PtrMemberAccess	name_ast -> attr		136761	0					
ANR	137914	Identifier	name_ast		136761	0					
ANR	137915	Identifier	attr		136761	1					
ANR	137916	Argument	& is_fully_qualified		136761	2					
ANR	137917	UnaryOperationExpression	& is_fully_qualified		136761	0					
ANR	137918	UnaryOperator	&		136761	0					
ANR	137919	Identifier	is_fully_qualified		136761	1					
ANR	137920	IfStatement	"if ( ! zend_try_ct_eval_const ( & result , resolved_name , is_fully_qualified ) )"		136761	3					
ANR	137921	Condition	"! zend_try_ct_eval_const ( & result , resolved_name , is_fully_qualified )"	7466:7:218083:218149	136761	0	True				
ANR	137922	UnaryOperationExpression	"! zend_try_ct_eval_const ( & result , resolved_name , is_fully_qualified )"		136761	0					
ANR	137923	UnaryOperator	!		136761	0					
ANR	137924	CallExpression	"zend_try_ct_eval_const ( & result , resolved_name , is_fully_qualified )"		136761	1					
ANR	137925	Callee	zend_try_ct_eval_const		136761	0					
ANR	137926	Identifier	zend_try_ct_eval_const		136761	0					
ANR	137927	ArgumentList	& result		136761	1					
ANR	137928	Argument	& result		136761	0					
ANR	137929	UnaryOperationExpression	& result		136761	0					
ANR	137930	UnaryOperator	&		136761	0					
ANR	137931	Identifier	result		136761	1					
ANR	137932	Argument	resolved_name		136761	1					
ANR	137933	Identifier	resolved_name		136761	0					
ANR	137934	Argument	is_fully_qualified		136761	2					
ANR	137935	Identifier	is_fully_qualified		136761	0					
ANR	137936	CompoundStatement		178:76:4934:4934	136761	1					
ANR	137937	ExpressionStatement	zend_string_release ( resolved_name )	7467:4:218158:218192	136761	0	True				
ANR	137938	CallExpression	zend_string_release ( resolved_name )		136761	0					
ANR	137939	Callee	zend_string_release		136761	0					
ANR	137940	Identifier	zend_string_release		136761	0					
ANR	137941	ArgumentList	resolved_name		136761	1					
ANR	137942	Argument	resolved_name		136761	0					
ANR	137943	Identifier	resolved_name		136761	0					
ANR	137944	ReturnStatement	return ;	7468:4:218198:218204	136761	1	True				
ANR	137945	ExpressionStatement	zend_string_release ( resolved_name )	7471:3:218215:218249	136761	4	True				
ANR	137946	CallExpression	zend_string_release ( resolved_name )		136761	0					
ANR	137947	Callee	zend_string_release		136761	0					
ANR	137948	Identifier	zend_string_release		136761	0					
ANR	137949	ArgumentList	resolved_name		136761	1					
ANR	137950	Argument	resolved_name		136761	0					
ANR	137951	Identifier	resolved_name		136761	0					
ANR	137952	BreakStatement	break ;	7472:3:218254:218259	136761	5	True				
ANR	137953	Label	case ZEND_AST_CLASS_CONST :	7474:2:218267:218292	136761	39	True				
ANR	137954	Identifier	ZEND_AST_CLASS_CONST		136761	0					
ANR	137955	CompoundStatement		190:3:5162:5188	136761	40					
ANR	137956	IdentifierDeclStatement	zend_ast * class_ast = ast -> child [ 0 ] ;	7476:3:218301:218336	136761	0	True				
ANR	137957	IdentifierDecl	* class_ast = ast -> child [ 0 ]		136761	0					
ANR	137958	IdentifierDeclType	zend_ast *		136761	0					
ANR	137959	Identifier	class_ast		136761	1					
ANR	137960	AssignmentExpression	* class_ast = ast -> child [ 0 ]		136761	2		=			
ANR	137961	Identifier	class_ast		136761	0					
ANR	137962	ArrayIndexing	ast -> child [ 0 ]		136761	1					
ANR	137963	PtrMemberAccess	ast -> child		136761	0					
ANR	137964	Identifier	ast		136761	0					
ANR	137965	Identifier	child		136761	1					
ANR	137966	PrimaryExpression	0		136761	1					
ANR	137967	IdentifierDeclStatement	zend_ast * name_ast = ast -> child [ 1 ] ;	7477:3:218341:218375	136761	1	True				
ANR	137968	IdentifierDecl	* name_ast = ast -> child [ 1 ]		136761	0					
ANR	137969	IdentifierDeclType	zend_ast *		136761	0					
ANR	137970	Identifier	name_ast		136761	1					
ANR	137971	AssignmentExpression	* name_ast = ast -> child [ 1 ]		136761	2		=			
ANR	137972	Identifier	name_ast		136761	0					
ANR	137973	ArrayIndexing	ast -> child [ 1 ]		136761	1					
ANR	137974	PtrMemberAccess	ast -> child		136761	0					
ANR	137975	Identifier	ast		136761	0					
ANR	137976	Identifier	child		136761	1					
ANR	137977	PrimaryExpression	1		136761	1					
ANR	137978	IdentifierDeclStatement	zend_string * resolved_name ;	7478:3:218380:218406	136761	2	True				
ANR	137979	IdentifierDecl	* resolved_name		136761	0					
ANR	137980	IdentifierDeclType	zend_string *		136761	0					
ANR	137981	Identifier	resolved_name		136761	1					
ANR	137982	IfStatement	"if ( zend_try_compile_const_expr_resolve_class_name ( & result , class_ast , name_ast , 0 ) )"		136761	3					
ANR	137983	Condition	"zend_try_compile_const_expr_resolve_class_name ( & result , class_ast , name_ast , 0 )"	7480:7:218416:218494	136761	0	True				
ANR	137984	CallExpression	"zend_try_compile_const_expr_resolve_class_name ( & result , class_ast , name_ast , 0 )"		136761	0					
ANR	137985	Callee	zend_try_compile_const_expr_resolve_class_name		136761	0					
ANR	137986	Identifier	zend_try_compile_const_expr_resolve_class_name		136761	0					
ANR	137987	ArgumentList	& result		136761	1					
ANR	137988	Argument	& result		136761	0					
ANR	137989	UnaryOperationExpression	& result		136761	0					
ANR	137990	UnaryOperator	&		136761	0					
ANR	137991	Identifier	result		136761	1					
ANR	137992	Argument	class_ast		136761	1					
ANR	137993	Identifier	class_ast		136761	0					
ANR	137994	Argument	name_ast		136761	2					
ANR	137995	Identifier	name_ast		136761	0					
ANR	137996	Argument	0		136761	3					
ANR	137997	PrimaryExpression	0		136761	0					
ANR	137998	CompoundStatement		192:88:5279:5279	136761	1					
ANR	137999	IfStatement	if ( Z_TYPE ( result ) == IS_NULL )		136761	0					
ANR	138000	Condition	Z_TYPE ( result ) == IS_NULL	7481:8:218507:218531	136761	0	True				
ANR	138001	EqualityExpression	Z_TYPE ( result ) == IS_NULL		136761	0		==			
ANR	138002	CallExpression	Z_TYPE ( result )		136761	0					
ANR	138003	Callee	Z_TYPE		136761	0					
ANR	138004	Identifier	Z_TYPE		136761	0					
ANR	138005	ArgumentList	result		136761	1					
ANR	138006	Argument	result		136761	0					
ANR	138007	Identifier	result		136761	0					
ANR	138008	Identifier	IS_NULL		136761	1					
ANR	138009	CompoundStatement		193:35:5316:5316	136761	1					
ANR	138010	IfStatement	if ( zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) ) == ZEND_FETCH_CLASS_SELF )		136761	0					
ANR	138011	Condition	zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) ) == ZEND_FETCH_CLASS_SELF	7482:9:218545:218623	136761	0	True				
ANR	138012	EqualityExpression	zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) ) == ZEND_FETCH_CLASS_SELF		136761	0		==			
ANR	138013	CallExpression	zend_get_class_fetch_type ( zend_ast_get_str ( class_ast ) )		136761	0					
ANR	138014	Callee	zend_get_class_fetch_type		136761	0					
ANR	138015	Identifier	zend_get_class_fetch_type		136761	0					
ANR	138016	ArgumentList	zend_ast_get_str ( class_ast )		136761	1					
ANR	138017	Argument	zend_ast_get_str ( class_ast )		136761	0					
ANR	138018	CallExpression	zend_ast_get_str ( class_ast )		136761	0					
ANR	138019	Callee	zend_ast_get_str		136761	0					
ANR	138020	Identifier	zend_ast_get_str		136761	0					
ANR	138021	ArgumentList	class_ast		136761	1					
ANR	138022	Argument	class_ast		136761	0					
ANR	138023	Identifier	class_ast		136761	0					
ANR	138024	Identifier	ZEND_FETCH_CLASS_SELF		136761	1					
ANR	138025	CompoundStatement		194:90:5408:5408	136761	1					
ANR	138026	ExpressionStatement	zend_ast_destroy ( ast )	7483:6:218634:218655	136761	0	True				
ANR	138027	CallExpression	zend_ast_destroy ( ast )		136761	0					
ANR	138028	Callee	zend_ast_destroy		136761	0					
ANR	138029	Identifier	zend_ast_destroy		136761	0					
ANR	138030	ArgumentList	ast		136761	1					
ANR	138031	Argument	ast		136761	0					
ANR	138032	Identifier	ast		136761	0					
ANR	138033	ExpressionStatement	"* ast_ptr = zend_ast_create_ex ( ZEND_AST_MAGIC_CONST , T_CLASS_C )"	7484:6:218663:218725	136761	1	True				
ANR	138034	AssignmentExpression	"* ast_ptr = zend_ast_create_ex ( ZEND_AST_MAGIC_CONST , T_CLASS_C )"		136761	0		=			
ANR	138035	UnaryOperationExpression	* ast_ptr		136761	0					
ANR	138036	UnaryOperator	*		136761	0					
ANR	138037	Identifier	ast_ptr		136761	1					
ANR	138038	CallExpression	"zend_ast_create_ex ( ZEND_AST_MAGIC_CONST , T_CLASS_C )"		136761	1					
ANR	138039	Callee	zend_ast_create_ex		136761	0					
ANR	138040	Identifier	zend_ast_create_ex		136761	0					
ANR	138041	ArgumentList	ZEND_AST_MAGIC_CONST		136761	1					
ANR	138042	Argument	ZEND_AST_MAGIC_CONST		136761	0					
ANR	138043	Identifier	ZEND_AST_MAGIC_CONST		136761	0					
ANR	138044	Argument	T_CLASS_C		136761	1					
ANR	138045	Identifier	T_CLASS_C		136761	0					
ANR	138046	ReturnStatement	return ;	7486:5:218739:218745	136761	1	True				
ANR	138047	BreakStatement	break ;	7488:4:218757:218762	136761	1	True				
ANR	138048	ExpressionStatement	zend_eval_const_expr ( & class_ast )	7491:3:218773:218805	136761	4	True				
ANR	138049	CallExpression	zend_eval_const_expr ( & class_ast )		136761	0					
ANR	138050	Callee	zend_eval_const_expr		136761	0					
ANR	138051	Identifier	zend_eval_const_expr		136761	0					
ANR	138052	ArgumentList	& class_ast		136761	1					
ANR	138053	Argument	& class_ast		136761	0					
ANR	138054	UnaryOperationExpression	& class_ast		136761	0					
ANR	138055	UnaryOperator	&		136761	0					
ANR	138056	Identifier	class_ast		136761	1					
ANR	138057	ExpressionStatement	zend_eval_const_expr ( & name_ast )	7492:3:218810:218841	136761	5	True				
ANR	138058	CallExpression	zend_eval_const_expr ( & name_ast )		136761	0					
ANR	138059	Callee	zend_eval_const_expr		136761	0					
ANR	138060	Identifier	zend_eval_const_expr		136761	0					
ANR	138061	ArgumentList	& name_ast		136761	1					
ANR	138062	Argument	& name_ast		136761	0					
ANR	138063	UnaryOperationExpression	& name_ast		136761	0					
ANR	138064	UnaryOperator	&		136761	0					
ANR	138065	Identifier	name_ast		136761	1					
ANR	138066	IfStatement	"if ( name_ast -> kind == ZEND_AST_ZVAL && zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""class"" ) )"		136761	6					
ANR	138067	Condition	"name_ast -> kind == ZEND_AST_ZVAL && zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""class"" )"	7494:7:218851:218951	136761	0	True				
ANR	138068	AndExpression	"name_ast -> kind == ZEND_AST_ZVAL && zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""class"" )"		136761	0		&&			
ANR	138069	EqualityExpression	name_ast -> kind == ZEND_AST_ZVAL		136761	0		==			
ANR	138070	PtrMemberAccess	name_ast -> kind		136761	0					
ANR	138071	Identifier	name_ast		136761	0					
ANR	138072	Identifier	kind		136761	1					
ANR	138073	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	138074	CallExpression	"zend_string_equals_literal_ci ( zend_ast_get_str ( name_ast ) , ""class"" )"		136761	1					
ANR	138075	Callee	zend_string_equals_literal_ci		136761	0					
ANR	138076	Identifier	zend_string_equals_literal_ci		136761	0					
ANR	138077	ArgumentList	zend_ast_get_str ( name_ast )		136761	1					
ANR	138078	Argument	zend_ast_get_str ( name_ast )		136761	0					
ANR	138079	CallExpression	zend_ast_get_str ( name_ast )		136761	0					
ANR	138080	Callee	zend_ast_get_str		136761	0					
ANR	138081	Identifier	zend_ast_get_str		136761	0					
ANR	138082	ArgumentList	name_ast		136761	1					
ANR	138083	Argument	name_ast		136761	0					
ANR	138084	Identifier	name_ast		136761	0					
ANR	138085	Argument	"""class"""		136761	1					
ANR	138086	PrimaryExpression	"""class"""		136761	0					
ANR	138087	CompoundStatement		206:110:5736:5736	136761	1					
ANR	138088	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""Dynamic class names are not allowed in compile-time ::class fetch"" )"	7495:4:218960:219070	136761	0	True				
ANR	138089	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""Dynamic class names are not allowed in compile-time ::class fetch"" )"		136761	0					
ANR	138090	Callee	zend_error_noreturn		136761	0					
ANR	138091	Identifier	zend_error_noreturn		136761	0					
ANR	138092	ArgumentList	E_COMPILE_ERROR		136761	1					
ANR	138093	Argument	E_COMPILE_ERROR		136761	0					
ANR	138094	Identifier	E_COMPILE_ERROR		136761	0					
ANR	138095	Argument	"""Dynamic class names are not allowed in compile-time ::class fetch"""		136761	1					
ANR	138096	PrimaryExpression	"""Dynamic class names are not allowed in compile-time ::class fetch"""		136761	0					
ANR	138097	IfStatement	if ( class_ast -> kind != ZEND_AST_ZVAL || name_ast -> kind != ZEND_AST_ZVAL )		136761	7					
ANR	138098	Condition	class_ast -> kind != ZEND_AST_ZVAL || name_ast -> kind != ZEND_AST_ZVAL	7499:7:219085:219151	136761	0	True				
ANR	138099	OrExpression	class_ast -> kind != ZEND_AST_ZVAL || name_ast -> kind != ZEND_AST_ZVAL		136761	0		||			
ANR	138100	EqualityExpression	class_ast -> kind != ZEND_AST_ZVAL		136761	0		!=			
ANR	138101	PtrMemberAccess	class_ast -> kind		136761	0					
ANR	138102	Identifier	class_ast		136761	0					
ANR	138103	Identifier	kind		136761	1					
ANR	138104	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	138105	EqualityExpression	name_ast -> kind != ZEND_AST_ZVAL		136761	1		!=			
ANR	138106	PtrMemberAccess	name_ast -> kind		136761	0					
ANR	138107	Identifier	name_ast		136761	0					
ANR	138108	Identifier	kind		136761	1					
ANR	138109	Identifier	ZEND_AST_ZVAL		136761	1					
ANR	138110	CompoundStatement		211:76:5936:5936	136761	1					
ANR	138111	ReturnStatement	return ;	7500:4:219160:219166	136761	0	True				
ANR	138112	ExpressionStatement	resolved_name = zend_resolve_class_name_ast ( class_ast )	7503:3:219177:219231	136761	8	True				
ANR	138113	AssignmentExpression	resolved_name = zend_resolve_class_name_ast ( class_ast )		136761	0		=			
ANR	138114	Identifier	resolved_name		136761	0					
ANR	138115	CallExpression	zend_resolve_class_name_ast ( class_ast )		136761	1					
ANR	138116	Callee	zend_resolve_class_name_ast		136761	0					
ANR	138117	Identifier	zend_resolve_class_name_ast		136761	0					
ANR	138118	ArgumentList	class_ast		136761	1					
ANR	138119	Argument	class_ast		136761	0					
ANR	138120	Identifier	class_ast		136761	0					
ANR	138121	IfStatement	"if ( ! zend_try_ct_eval_class_const ( & result , resolved_name , zend_ast_get_str ( name_ast ) ) )"		136761	9					
ANR	138122	Condition	"! zend_try_ct_eval_class_const ( & result , resolved_name , zend_ast_get_str ( name_ast ) )"	7505:7:219241:219321	136761	0	True				
ANR	138123	UnaryOperationExpression	"! zend_try_ct_eval_class_const ( & result , resolved_name , zend_ast_get_str ( name_ast ) )"		136761	0					
ANR	138124	UnaryOperator	!		136761	0					
ANR	138125	CallExpression	"zend_try_ct_eval_class_const ( & result , resolved_name , zend_ast_get_str ( name_ast ) )"		136761	1					
ANR	138126	Callee	zend_try_ct_eval_class_const		136761	0					
ANR	138127	Identifier	zend_try_ct_eval_class_const		136761	0					
ANR	138128	ArgumentList	& result		136761	1					
ANR	138129	Argument	& result		136761	0					
ANR	138130	UnaryOperationExpression	& result		136761	0					
ANR	138131	UnaryOperator	&		136761	0					
ANR	138132	Identifier	result		136761	1					
ANR	138133	Argument	resolved_name		136761	1					
ANR	138134	Identifier	resolved_name		136761	0					
ANR	138135	Argument	zend_ast_get_str ( name_ast )		136761	2					
ANR	138136	CallExpression	zend_ast_get_str ( name_ast )		136761	0					
ANR	138137	Callee	zend_ast_get_str		136761	0					
ANR	138138	Identifier	zend_ast_get_str		136761	0					
ANR	138139	ArgumentList	name_ast		136761	1					
ANR	138140	Argument	name_ast		136761	0					
ANR	138141	Identifier	name_ast		136761	0					
ANR	138142	CompoundStatement		217:90:6106:6106	136761	1					
ANR	138143	ExpressionStatement	zend_string_release ( resolved_name )	7506:4:219330:219364	136761	0	True				
ANR	138144	CallExpression	zend_string_release ( resolved_name )		136761	0					
ANR	138145	Callee	zend_string_release		136761	0					
ANR	138146	Identifier	zend_string_release		136761	0					
ANR	138147	ArgumentList	resolved_name		136761	1					
ANR	138148	Argument	resolved_name		136761	0					
ANR	138149	Identifier	resolved_name		136761	0					
ANR	138150	ReturnStatement	return ;	7507:4:219370:219376	136761	1	True				
ANR	138151	ExpressionStatement	zend_string_release ( resolved_name )	7510:3:219387:219421	136761	10	True				
ANR	138152	CallExpression	zend_string_release ( resolved_name )		136761	0					
ANR	138153	Callee	zend_string_release		136761	0					
ANR	138154	Identifier	zend_string_release		136761	0					
ANR	138155	ArgumentList	resolved_name		136761	1					
ANR	138156	Argument	resolved_name		136761	0					
ANR	138157	Identifier	resolved_name		136761	0					
ANR	138158	BreakStatement	break ;	7511:3:219426:219431	136761	11	True				
ANR	138159	Label	default :	7514:2:219440:219447	136761	41	True				
ANR	138160	Identifier	default		136761	0					
ANR	138161	ReturnStatement	return ;	7515:3:219452:219458	136761	42	True				
ANR	138162	ExpressionStatement	zend_ast_destroy ( ast )	7518:1:219465:219486	136761	4	True				
ANR	138163	CallExpression	zend_ast_destroy ( ast )		136761	0					
ANR	138164	Callee	zend_ast_destroy		136761	0					
ANR	138165	Identifier	zend_ast_destroy		136761	0					
ANR	138166	ArgumentList	ast		136761	1					
ANR	138167	Argument	ast		136761	0					
ANR	138168	Identifier	ast		136761	0					
ANR	138169	ExpressionStatement	* ast_ptr = zend_ast_create_zval ( & result )	7519:1:219489:219529	136761	5	True				
ANR	138170	AssignmentExpression	* ast_ptr = zend_ast_create_zval ( & result )		136761	0		=			
ANR	138171	UnaryOperationExpression	* ast_ptr		136761	0					
ANR	138172	UnaryOperator	*		136761	0					
ANR	138173	Identifier	ast_ptr		136761	1					
ANR	138174	CallExpression	zend_ast_create_zval ( & result )		136761	1					
ANR	138175	Callee	zend_ast_create_zval		136761	0					
ANR	138176	Identifier	zend_ast_create_zval		136761	0					
ANR	138177	ArgumentList	& result		136761	1					
ANR	138178	Argument	& result		136761	0					
ANR	138179	UnaryOperationExpression	& result		136761	0					
ANR	138180	UnaryOperator	&		136761	0					
ANR	138181	Identifier	result		136761	1					
ANR	138182	ReturnType	void		136761	1					
ANR	138183	Identifier	zend_eval_const_expr		136761	2					
ANR	138184	ParameterList	zend_ast * * ast_ptr		136761	3					
ANR	138185	Parameter	zend_ast * * ast_ptr	7288:26:213187:213204	136761	0	True				
ANR	138186	ParameterType	zend_ast * *		136761	0					
ANR	138187	Identifier	ast_ptr		136761	1					
ANR	138188	CFGEntryNode	ENTRY		136761		True				
ANR	138189	CFGExitNode	EXIT		136761		True				
ANR	138190	Symbol	* * * ast		136761						
ANR	138191	Symbol	container		136761						
ANR	138192	Symbol	T_CLASS_C		136761						
ANR	138193	Symbol	zend_ast_create_ex		136761						
ANR	138194	Symbol	ast -> kind		136761						
ANR	138195	Symbol	ast		136761						
ANR	138196	Symbol	child_ast		136761						
ANR	138197	Symbol	E_COMPILE_ERROR		136761						
ANR	138198	Symbol	ast -> child [ i ] -> kind		136761						
ANR	138199	Symbol	dim		136761						
ANR	138200	Symbol	* CG		136761						
ANR	138201	Symbol	Z_TYPE		136761						
ANR	138202	Symbol	zend_try_ct_eval_array		136761						
ANR	138203	Symbol	ast -> child [ 0 ] -> kind		136761						
ANR	138204	Symbol	one_char_string		136761						
ANR	138205	Symbol	zend_string_init		136761						
ANR	138206	Symbol	ZEND_FETCH_CLASS_SELF		136761						
ANR	138207	Symbol	ZEND_AST_ZVAL		136761						
ANR	138208	Symbol	zend_try_ct_eval_binary_op		136761						
ANR	138209	Symbol	IS_STRING		136761						
ANR	138210	Symbol	& is_fully_qualified		136761						
ANR	138211	Symbol	* * ast -> child		136761						
ANR	138212	Symbol	zend_hash_index_find		136761						
ANR	138213	Symbol	* * i		136761						
ANR	138214	Symbol	* child		136761						
ANR	138215	Symbol	NULL		136761						
ANR	138216	Symbol	offset		136761						
ANR	138217	Symbol	& offset		136761						
ANR	138218	Symbol	& name_ast		136761						
ANR	138219	Symbol	el		136761						
ANR	138220	Symbol	ast -> child [ 1 ] -> kind		136761						
ANR	138221	Symbol	zend_try_compile_const_expr_resolve_class_name		136761						
ANR	138222	Symbol	zend_string_equals_literal_ci		136761						
ANR	138223	Symbol	name_ast -> kind		136761						
ANR	138224	Symbol	ast_ptr		136761						
ANR	138225	Symbol	* offset		136761						
ANR	138226	Symbol	zend_resolve_const_name		136761						
ANR	138227	Symbol	* ast -> child		136761						
ANR	138228	Symbol	Z_STR_P		136761						
ANR	138229	Symbol	ast -> child		136761						
ANR	138230	Symbol	zend_ast_get_zval		136761						
ANR	138231	Symbol	zend_is_true		136761						
ANR	138232	Symbol	zend_try_ct_eval_magic_const		136761						
ANR	138233	Symbol	child		136761						
ANR	138234	Symbol	zend_ast_create_zval		136761						
ANR	138235	Symbol	zend_symtable_find		136761						
ANR	138236	Symbol	class_ast		136761						
ANR	138237	Symbol	ZEND_AST_OR		136761						
ANR	138238	Symbol	name_ast -> attr		136761						
ANR	138239	Symbol	result		136761						
ANR	138240	Symbol	* name_ast		136761						
ANR	138241	Symbol	& class_ast		136761						
ANR	138242	Symbol	zend_try_ct_eval_class_const		136761						
ANR	138243	Symbol	* ast_ptr		136761						
ANR	138244	Symbol	* ast		136761						
ANR	138245	Symbol	zend_ast_get_str		136761						
ANR	138246	Symbol	IS_NULL		136761						
ANR	138247	Symbol	IS_ARRAY		136761						
ANR	138248	Symbol	* * ast		136761						
ANR	138249	Symbol	& result		136761						
ANR	138250	Symbol	IS_LONG		136761						
ANR	138251	Symbol	Z_STRLEN_P		136761						
ANR	138252	Symbol	* Z_STRVAL_P		136761						
ANR	138253	Symbol	IS_FALSE		136761						
ANR	138254	Symbol	zend_get_class_fetch_type		136761						
ANR	138255	Symbol	ast -> attr		136761						
ANR	138256	Symbol	* class_ast		136761						
ANR	138257	Symbol	c		136761						
ANR	138258	Symbol	CG		136761						
ANR	138259	Symbol	zend_resolve_class_name_ast		136761						
ANR	138260	Symbol	resolved_name		136761						
ANR	138261	Symbol	i		136761						
ANR	138262	Symbol	& c		136761						
ANR	138263	Symbol	Z_ARR_P		136761						
ANR	138264	Symbol	Z_TYPE_P		136761						
ANR	138265	Symbol	Z_STRVAL_P		136761						
ANR	138266	Symbol	* c		136761						
ANR	138267	Symbol	is_fully_qualified		136761						
ANR	138268	Symbol	Z_LVAL_P		136761						
ANR	138269	Symbol	zend_try_ct_eval_const		136761						
ANR	138270	Symbol	class_ast -> kind		136761						
ANR	138271	Symbol	* i		136761						
ANR	138272	Symbol	is_numeric_string		136761						
ANR	138273	Symbol	ZEND_AST_MAGIC_CONST		136761						
ANR	138274	Symbol	name_ast		136761						
