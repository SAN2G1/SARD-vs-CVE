command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3030071	File	data/converged/CVE-2015-8617_php-src/main_snprintf.c								
ANR	3030072	Function	__cvt	71:0:2677:3851							
ANR	3030073	FunctionDef	"__cvt (double value , int ndigit , int * decpt , int * sign , int fmode , int pad)"		3030072	0					
ANR	3030074	CompoundStatement		72:0:2776:3851	3030072	0					
ANR	3030075	Statement	register	73:1:2779:2786	3030072	0	True				
ANR	3030076	IdentifierDeclStatement	char * s = NULL ;	73:10:2788:2802	3030072	1	True				
ANR	3030077	IdentifierDecl	* s = NULL		3030072	0					
ANR	3030078	IdentifierDeclType	char *		3030072	0					
ANR	3030079	Identifier	s		3030072	1					
ANR	3030080	AssignmentExpression	* s = NULL		3030072	2		=			
ANR	3030081	Identifier	NULL		3030072	0					
ANR	3030082	Identifier	NULL		3030072	1					
ANR	3030083	IdentifierDeclStatement	"char * p , * rve , c ;"	74:1:2805:2821	3030072	2	True				
ANR	3030084	IdentifierDecl	* p		3030072	0					
ANR	3030085	IdentifierDeclType	char *		3030072	0					
ANR	3030086	Identifier	p		3030072	1					
ANR	3030087	IdentifierDecl	* rve		3030072	1					
ANR	3030088	IdentifierDeclType	char *		3030072	0					
ANR	3030089	Identifier	rve		3030072	1					
ANR	3030090	IdentifierDecl	c		3030072	2					
ANR	3030091	IdentifierDeclType	char		3030072	0					
ANR	3030092	Identifier	c		3030072	1					
ANR	3030093	IdentifierDeclStatement	size_t siz ;	75:1:2824:2834	3030072	3	True				
ANR	3030094	IdentifierDecl	siz		3030072	0					
ANR	3030095	IdentifierDeclType	size_t		3030072	0					
ANR	3030096	Identifier	siz		3030072	1					
ANR	3030097	IfStatement	if ( ndigit < 0 )		3030072	4					
ANR	3030098	Condition	ndigit < 0	77:5:2842:2851	3030072	0	True				
ANR	3030099	RelationalExpression	ndigit < 0		3030072	0		<			
ANR	3030100	Identifier	ndigit		3030072	0					
ANR	3030101	PrimaryExpression	0		3030072	1					
ANR	3030102	CompoundStatement		6:17:77:77	3030072	1					
ANR	3030103	ExpressionStatement	siz = - ndigit + 1	78:2:2858:2875	3030072	0	True				
ANR	3030104	AssignmentExpression	siz = - ndigit + 1		3030072	0		=			
ANR	3030105	Identifier	siz		3030072	0					
ANR	3030106	AdditiveExpression	- ndigit + 1		3030072	1		+			
ANR	3030107	UnaryOperationExpression	- ndigit		3030072	0					
ANR	3030108	UnaryOperator	-		3030072	0					
ANR	3030109	Identifier	ndigit		3030072	1					
ANR	3030110	PrimaryExpression	1		3030072	1					
ANR	3030111	ElseStatement	else		3030072	0					
ANR	3030112	CompoundStatement		8:8:108:108	3030072	0					
ANR	3030113	ExpressionStatement	siz = ndigit + 1	80:2:2889:2905	3030072	0	True				
ANR	3030114	AssignmentExpression	siz = ndigit + 1		3030072	0		=			
ANR	3030115	Identifier	siz		3030072	0					
ANR	3030116	AdditiveExpression	ndigit + 1		3030072	1		+			
ANR	3030117	Identifier	ndigit		3030072	0					
ANR	3030118	PrimaryExpression	1		3030072	1					
ANR	3030119	IfStatement	if ( value == 0.0 )		3030072	5					
ANR	3030120	Condition	value == 0.0	84:5:2981:2992	3030072	0	True				
ANR	3030121	EqualityExpression	value == 0.0		3030072	0		==			
ANR	3030122	Identifier	value		3030072	0					
ANR	3030123	PrimaryExpression	0.0		3030072	1					
ANR	3030124	CompoundStatement		13:19:218:218	3030072	1					
ANR	3030125	ExpressionStatement	* decpt = 1 - fmode	85:2:2999:3017	3030072	0	True				
ANR	3030126	AssignmentExpression	* decpt = 1 - fmode		3030072	0		=			
ANR	3030127	UnaryOperationExpression	* decpt		3030072	0					
ANR	3030128	UnaryOperator	*		3030072	0					
ANR	3030129	Identifier	decpt		3030072	1					
ANR	3030130	AdditiveExpression	1 - fmode		3030072	1		-			
ANR	3030131	PrimaryExpression	1		3030072	0					
ANR	3030132	Identifier	fmode		3030072	1					
ANR	3030133	ExpressionStatement	* sign = 0	86:2:3048:3057	3030072	1	True				
ANR	3030134	AssignmentExpression	* sign = 0		3030072	0		=			
ANR	3030135	UnaryOperationExpression	* sign		3030072	0					
ANR	3030136	UnaryOperator	*		3030072	0					
ANR	3030137	Identifier	sign		3030072	1					
ANR	3030138	PrimaryExpression	0		3030072	1					
ANR	3030139	IfStatement	if ( ( rve = s = ( char * ) malloc ( ndigit ? siz : 2 ) ) == NULL )		3030072	2					
ANR	3030140	Condition	( rve = s = ( char * ) malloc ( ndigit ? siz : 2 ) ) == NULL	87:6:3065:3112	3030072	0	True				
ANR	3030141	EqualityExpression	( rve = s = ( char * ) malloc ( ndigit ? siz : 2 ) ) == NULL		3030072	0		==			
ANR	3030142	AssignmentExpression	rve = s = ( char * ) malloc ( ndigit ? siz : 2 )		3030072	0		=			
ANR	3030143	Identifier	rve		3030072	0					
ANR	3030144	AssignmentExpression	s = ( char * ) malloc ( ndigit ? siz : 2 )		3030072	1		=			
ANR	3030145	Identifier	s		3030072	0					
ANR	3030146	CastExpression	( char * ) malloc ( ndigit ? siz : 2 )		3030072	1					
ANR	3030147	CastTarget	char *		3030072	0					
ANR	3030148	CallExpression	malloc ( ndigit ? siz : 2 )		3030072	1					
ANR	3030149	Callee	malloc		3030072	0					
ANR	3030150	Identifier	malloc		3030072	0					
ANR	3030151	ArgumentList	ndigit ? siz : 2		3030072	1					
ANR	3030152	Argument	ndigit ? siz : 2		3030072	0					
ANR	3030153	ConditionalExpression	ndigit ? siz : 2		3030072	0					
ANR	3030154	Condition	ndigit		3030072	0					
ANR	3030155	Identifier	ndigit		3030072	0					
ANR	3030156	Identifier	siz		3030072	1					
ANR	3030157	PrimaryExpression	2		3030072	2					
ANR	3030158	Identifier	NULL		3030072	1					
ANR	3030159	CompoundStatement		16:56:338:338	3030072	1					
ANR	3030160	ReturnStatement	return ( NULL ) ;	88:3:3120:3132	3030072	0	True				
ANR	3030161	Identifier	NULL		3030072	0					
ANR	3030162	ExpressionStatement	* rve ++ = '0'	90:2:3140:3152	3030072	3	True				
ANR	3030163	AssignmentExpression	* rve ++ = '0'		3030072	0		=			
ANR	3030164	UnaryOperationExpression	* rve ++		3030072	0					
ANR	3030165	UnaryOperator	*		3030072	0					
ANR	3030166	PostIncDecOperationExpression	rve ++		3030072	1					
ANR	3030167	Identifier	rve		3030072	0					
ANR	3030168	IncDec	++		3030072	1					
ANR	3030169	PrimaryExpression	'0'		3030072	1					
ANR	3030170	ExpressionStatement	* rve = '\\0'	91:2:3156:3167	3030072	4	True				
ANR	3030171	AssignmentExpression	* rve = '\\0'		3030072	0		=			
ANR	3030172	UnaryOperationExpression	* rve		3030072	0					
ANR	3030173	UnaryOperator	*		3030072	0					
ANR	3030174	Identifier	rve		3030072	1					
ANR	3030175	PrimaryExpression	'\\0'		3030072	1					
ANR	3030176	IfStatement	if ( ! ndigit )		3030072	5					
ANR	3030177	Condition	! ndigit	92:6:3175:3181	3030072	0	True				
ANR	3030178	UnaryOperationExpression	! ndigit		3030072	0					
ANR	3030179	UnaryOperator	!		3030072	0					
ANR	3030180	Identifier	ndigit		3030072	1					
ANR	3030181	CompoundStatement		21:15:407:407	3030072	1					
ANR	3030182	ReturnStatement	return ( s ) ;	93:3:3189:3198	3030072	0	True				
ANR	3030183	Identifier	s		3030072	0					
ANR	3030184	ElseStatement	else		3030072	0					
ANR	3030185	CompoundStatement		24:8:435:435	3030072	0					
ANR	3030186	ExpressionStatement	"p = zend_dtoa ( value , fmode + 2 , ndigit , decpt , sign , & rve )"	96:2:3216:3274	3030072	0	True				
ANR	3030187	AssignmentExpression	"p = zend_dtoa ( value , fmode + 2 , ndigit , decpt , sign , & rve )"		3030072	0		=			
ANR	3030188	Identifier	p		3030072	0					
ANR	3030189	CallExpression	"zend_dtoa ( value , fmode + 2 , ndigit , decpt , sign , & rve )"		3030072	1					
ANR	3030190	Callee	zend_dtoa		3030072	0					
ANR	3030191	Identifier	zend_dtoa		3030072	0					
ANR	3030192	ArgumentList	value		3030072	1					
ANR	3030193	Argument	value		3030072	0					
ANR	3030194	Identifier	value		3030072	0					
ANR	3030195	Argument	fmode + 2		3030072	1					
ANR	3030196	AdditiveExpression	fmode + 2		3030072	0		+			
ANR	3030197	Identifier	fmode		3030072	0					
ANR	3030198	PrimaryExpression	2		3030072	1					
ANR	3030199	Argument	ndigit		3030072	2					
ANR	3030200	Identifier	ndigit		3030072	0					
ANR	3030201	Argument	decpt		3030072	3					
ANR	3030202	Identifier	decpt		3030072	0					
ANR	3030203	Argument	sign		3030072	4					
ANR	3030204	Identifier	sign		3030072	0					
ANR	3030205	Argument	& rve		3030072	5					
ANR	3030206	UnaryOperationExpression	& rve		3030072	0					
ANR	3030207	UnaryOperator	&		3030072	0					
ANR	3030208	Identifier	rve		3030072	1					
ANR	3030209	IfStatement	if ( * decpt == 9999 )		3030072	1					
ANR	3030210	Condition	* decpt == 9999	97:6:3282:3295	3030072	0	True				
ANR	3030211	EqualityExpression	* decpt == 9999		3030072	0		==			
ANR	3030212	UnaryOperationExpression	* decpt		3030072	0					
ANR	3030213	UnaryOperator	*		3030072	0					
ANR	3030214	Identifier	decpt		3030072	1					
ANR	3030215	PrimaryExpression	9999		3030072	1					
ANR	3030216	CompoundStatement		26:22:521:521	3030072	1					
ANR	3030217	ExpressionStatement	* decpt = 0	99:3:3363:3373	3030072	0	True				
ANR	3030218	AssignmentExpression	* decpt = 0		3030072	0		=			
ANR	3030219	UnaryOperationExpression	* decpt		3030072	0					
ANR	3030220	UnaryOperator	*		3030072	0					
ANR	3030221	Identifier	decpt		3030072	1					
ANR	3030222	PrimaryExpression	0		3030072	1					
ANR	3030223	ExpressionStatement	c = * p	100:3:3378:3384	3030072	1	True				
ANR	3030224	AssignmentExpression	c = * p		3030072	0		=			
ANR	3030225	Identifier	c		3030072	0					
ANR	3030226	UnaryOperationExpression	* p		3030072	1					
ANR	3030227	UnaryOperator	*		3030072	0					
ANR	3030228	Identifier	p		3030072	1					
ANR	3030229	ExpressionStatement	zend_freedtoa ( p )	101:3:3389:3405	3030072	2	True				
ANR	3030230	CallExpression	zend_freedtoa ( p )		3030072	0					
ANR	3030231	Callee	zend_freedtoa		3030072	0					
ANR	3030232	Identifier	zend_freedtoa		3030072	0					
ANR	3030233	ArgumentList	p		3030072	1					
ANR	3030234	Argument	p		3030072	0					
ANR	3030235	Identifier	p		3030072	0					
ANR	3030236	ReturnStatement	"return strdup ( ( c == 'I' ? ""INF"" : ""NAN"" ) ) ;"	102:3:3410:3451	3030072	3	True				
ANR	3030237	CallExpression	"strdup ( ( c == 'I' ? ""INF"" : ""NAN"" ) )"		3030072	0					
ANR	3030238	Callee	strdup		3030072	0					
ANR	3030239	Identifier	strdup		3030072	0					
ANR	3030240	ArgumentList	"c == 'I' ? ""INF"" : ""NAN"""		3030072	1					
ANR	3030241	Argument	"c == 'I' ? ""INF"" : ""NAN"""		3030072	0					
ANR	3030242	ConditionalExpression	"c == 'I' ? ""INF"" : ""NAN"""		3030072	0					
ANR	3030243	Condition	c == 'I'		3030072	0					
ANR	3030244	EqualityExpression	c == 'I'		3030072	0		==			
ANR	3030245	Identifier	c		3030072	0					
ANR	3030246	PrimaryExpression	'I'		3030072	1					
ANR	3030247	PrimaryExpression	"""INF"""		3030072	1					
ANR	3030248	PrimaryExpression	"""NAN"""		3030072	2					
ANR	3030249	IfStatement	if ( pad && fmode )		3030072	2					
ANR	3030250	Condition	pad && fmode	105:6:3524:3535	3030072	0	True				
ANR	3030251	AndExpression	pad && fmode		3030072	0		&&			
ANR	3030252	Identifier	pad		3030072	0					
ANR	3030253	Identifier	fmode		3030072	1					
ANR	3030254	CompoundStatement		34:20:761:761	3030072	1					
ANR	3030255	ExpressionStatement	siz += * decpt	106:3:3543:3556	3030072	0	True				
ANR	3030256	AssignmentExpression	siz += * decpt		3030072	0		+=			
ANR	3030257	Identifier	siz		3030072	0					
ANR	3030258	UnaryOperationExpression	* decpt		3030072	1					
ANR	3030259	UnaryOperator	*		3030072	0					
ANR	3030260	Identifier	decpt		3030072	1					
ANR	3030261	IfStatement	if ( ( s = ( char * ) malloc ( siz + 1 ) ) == NULL )		3030072	3					
ANR	3030262	Condition	( s = ( char * ) malloc ( siz + 1 ) ) == NULL	108:6:3568:3602	3030072	0	True				
ANR	3030263	EqualityExpression	( s = ( char * ) malloc ( siz + 1 ) ) == NULL		3030072	0		==			
ANR	3030264	AssignmentExpression	s = ( char * ) malloc ( siz + 1 )		3030072	0		=			
ANR	3030265	Identifier	s		3030072	0					
ANR	3030266	CastExpression	( char * ) malloc ( siz + 1 )		3030072	1					
ANR	3030267	CastTarget	char *		3030072	0					
ANR	3030268	CallExpression	malloc ( siz + 1 )		3030072	1					
ANR	3030269	Callee	malloc		3030072	0					
ANR	3030270	Identifier	malloc		3030072	0					
ANR	3030271	ArgumentList	siz + 1		3030072	1					
ANR	3030272	Argument	siz + 1		3030072	0					
ANR	3030273	AdditiveExpression	siz + 1		3030072	0		+			
ANR	3030274	Identifier	siz		3030072	0					
ANR	3030275	PrimaryExpression	1		3030072	1					
ANR	3030276	Identifier	NULL		3030072	1					
ANR	3030277	CompoundStatement		37:43:828:828	3030072	1					
ANR	3030278	ExpressionStatement	zend_freedtoa ( p )	109:3:3610:3626	3030072	0	True				
ANR	3030279	CallExpression	zend_freedtoa ( p )		3030072	0					
ANR	3030280	Callee	zend_freedtoa		3030072	0					
ANR	3030281	Identifier	zend_freedtoa		3030072	0					
ANR	3030282	ArgumentList	p		3030072	1					
ANR	3030283	Argument	p		3030072	0					
ANR	3030284	Identifier	p		3030072	0					
ANR	3030285	ReturnStatement	return ( NULL ) ;	110:3:3631:3643	3030072	1	True				
ANR	3030286	Identifier	NULL		3030072	0					
ANR	3030287	ExpressionStatement	"( void ) strlcpy ( s , p , siz )"	112:2:3651:3676	3030072	4	True				
ANR	3030288	CastExpression	"( void ) strlcpy ( s , p , siz )"		3030072	0					
ANR	3030289	CastTarget	void		3030072	0					
ANR	3030290	CallExpression	"strlcpy ( s , p , siz )"		3030072	1					
ANR	3030291	Callee	strlcpy		3030072	0					
ANR	3030292	Identifier	strlcpy		3030072	0					
ANR	3030293	ArgumentList	s		3030072	1					
ANR	3030294	Argument	s		3030072	0					
ANR	3030295	Identifier	s		3030072	0					
ANR	3030296	Argument	p		3030072	1					
ANR	3030297	Identifier	p		3030072	0					
ANR	3030298	Argument	siz		3030072	2					
ANR	3030299	Identifier	siz		3030072	0					
ANR	3030300	ExpressionStatement	rve = s + ( rve - p )	113:2:3680:3699	3030072	5	True				
ANR	3030301	AssignmentExpression	rve = s + ( rve - p )		3030072	0		=			
ANR	3030302	Identifier	rve		3030072	0					
ANR	3030303	AdditiveExpression	s + ( rve - p )		3030072	1		+			
ANR	3030304	Identifier	s		3030072	0					
ANR	3030305	AdditiveExpression	rve - p		3030072	1		-			
ANR	3030306	Identifier	rve		3030072	0					
ANR	3030307	Identifier	p		3030072	1					
ANR	3030308	ExpressionStatement	zend_freedtoa ( p )	114:2:3703:3719	3030072	6	True				
ANR	3030309	CallExpression	zend_freedtoa ( p )		3030072	0					
ANR	3030310	Callee	zend_freedtoa		3030072	0					
ANR	3030311	Identifier	zend_freedtoa		3030072	0					
ANR	3030312	ArgumentList	p		3030072	1					
ANR	3030313	Argument	p		3030072	0					
ANR	3030314	Identifier	p		3030072	0					
ANR	3030315	IfStatement	if ( pad )		3030072	6					
ANR	3030316	Condition	pad	118:5:3756:3758	3030072	0	True				
ANR	3030317	Identifier	pad		3030072	0					
ANR	3030318	CompoundStatement		47:10:984:984	3030072	1					
ANR	3030319	ExpressionStatement	siz -= rve - s	119:2:3765:3779	3030072	0	True				
ANR	3030320	AssignmentExpression	siz -= rve - s		3030072	0		-=			
ANR	3030321	Identifier	siz		3030072	0					
ANR	3030322	AdditiveExpression	rve - s		3030072	1		-			
ANR	3030323	Identifier	rve		3030072	0					
ANR	3030324	Identifier	s		3030072	1					
ANR	3030325	WhileStatement	while ( -- siz )		3030072	1					
ANR	3030326	Condition	-- siz	120:9:3790:3794	3030072	0	True				
ANR	3030327	UnaryExpression	-- siz		3030072	0					
ANR	3030328	IncDec	--		3030072	0					
ANR	3030329	Identifier	siz		3030072	1					
ANR	3030330	CompoundStatement		49:16:1020:1020	3030072	1					
ANR	3030331	ExpressionStatement	* rve ++ = '0'	121:3:3802:3814	3030072	0	True				
ANR	3030332	AssignmentExpression	* rve ++ = '0'		3030072	0		=			
ANR	3030333	UnaryOperationExpression	* rve ++		3030072	0					
ANR	3030334	UnaryOperator	*		3030072	0					
ANR	3030335	PostIncDecOperationExpression	rve ++		3030072	1					
ANR	3030336	Identifier	rve		3030072	0					
ANR	3030337	IncDec	++		3030072	1					
ANR	3030338	PrimaryExpression	'0'		3030072	1					
ANR	3030339	ExpressionStatement	* rve = '\\0'	123:2:3822:3833	3030072	2	True				
ANR	3030340	AssignmentExpression	* rve = '\\0'		3030072	0		=			
ANR	3030341	UnaryOperationExpression	* rve		3030072	0					
ANR	3030342	UnaryOperator	*		3030072	0					
ANR	3030343	Identifier	rve		3030072	1					
ANR	3030344	PrimaryExpression	'\\0'		3030072	1					
ANR	3030345	ReturnStatement	return ( s ) ;	126:1:3840:3849	3030072	7	True				
ANR	3030346	Identifier	s		3030072	0					
ANR	3030347	ReturnType	static char *		3030072	1					
ANR	3030348	Identifier	__cvt		3030072	2					
ANR	3030349	ParameterList	"double value , int ndigit , int * decpt , int * sign , int fmode , int pad"		3030072	3					
ANR	3030350	Parameter	double value	71:20:2697:2708	3030072	0	True				
ANR	3030351	ParameterType	double		3030072	0					
ANR	3030352	Identifier	value		3030072	1					
ANR	3030353	Parameter	int ndigit	71:34:2711:2720	3030072	1	True				
ANR	3030354	ParameterType	int		3030072	0					
ANR	3030355	Identifier	ndigit		3030072	1					
ANR	3030356	Parameter	int * decpt	71:46:2723:2732	3030072	2	True				
ANR	3030357	ParameterType	int *		3030072	0					
ANR	3030358	Identifier	decpt		3030072	1					
ANR	3030359	Parameter	int * sign	71:58:2735:2743	3030072	3	True				
ANR	3030360	ParameterType	int *		3030072	0					
ANR	3030361	Identifier	sign		3030072	1					
ANR	3030362	Parameter	int fmode	71:69:2746:2754	3030072	4	True				
ANR	3030363	ParameterType	int		3030072	0					
ANR	3030364	Identifier	fmode		3030072	1					
ANR	3030365	Parameter	int pad	71:80:2757:2763	3030072	5	True				
ANR	3030366	ParameterType	int		3030072	0					
ANR	3030367	Identifier	pad		3030072	1					
ANR	3030368	CFGEntryNode	ENTRY		3030072		True				
ANR	3030369	CFGExitNode	EXIT		3030072		True				
ANR	3030370	Symbol	rve		3030072						
ANR	3030371	Symbol	& rve		3030072						
ANR	3030372	Symbol	* decpt		3030072						
ANR	3030373	Symbol	malloc		3030072						
ANR	3030374	Symbol	NULL		3030072						
ANR	3030375	Symbol	c		3030072						
ANR	3030376	Symbol	siz		3030072						
ANR	3030377	Symbol	sign		3030072						
ANR	3030378	Symbol	* rve		3030072						
ANR	3030379	Symbol	zend_dtoa		3030072						
ANR	3030380	Symbol	p		3030072						
ANR	3030381	Symbol	pad		3030072						
ANR	3030382	Symbol	s		3030072						
ANR	3030383	Symbol	decpt		3030072						
ANR	3030384	Symbol	* sign		3030072						
ANR	3030385	Symbol	ndigit		3030072						
ANR	3030386	Symbol	fmode		3030072						
ANR	3030387	Symbol	* p		3030072						
ANR	3030388	Symbol	* rve ++		3030072						
ANR	3030389	Symbol	strdup		3030072						
ANR	3030390	Symbol	value		3030072						
ANR	3030391	Function	php_ecvt	130:0:3864:4004							
ANR	3030392	FunctionDef	"php_ecvt (double value , int ndigit , int * decpt , int * sign)"		3030391	0					
ANR	3030393	CompoundStatement		131:0:3952:4004	3030391	0					
ANR	3030394	ReturnStatement	"return ( __cvt ( value , ndigit , decpt , sign , 0 , 1 ) ) ;"	132:1:3955:4002	3030391	0	True				
ANR	3030395	CallExpression	"__cvt ( value , ndigit , decpt , sign , 0 , 1 )"		3030391	0					
ANR	3030396	Callee	__cvt		3030391	0					
ANR	3030397	Identifier	__cvt		3030391	0					
ANR	3030398	ArgumentList	value		3030391	1					
ANR	3030399	Argument	value		3030391	0					
ANR	3030400	Identifier	value		3030391	0					
ANR	3030401	Argument	ndigit		3030391	1					
ANR	3030402	Identifier	ndigit		3030391	0					
ANR	3030403	Argument	decpt		3030391	2					
ANR	3030404	Identifier	decpt		3030391	0					
ANR	3030405	Argument	sign		3030391	3					
ANR	3030406	Identifier	sign		3030391	0					
ANR	3030407	Argument	0		3030391	4					
ANR	3030408	PrimaryExpression	0		3030391	0					
ANR	3030409	Argument	1		3030391	5					
ANR	3030410	PrimaryExpression	1		3030391	0					
ANR	3030411	ReturnType	static inline char *		3030391	1					
ANR	3030412	Identifier	php_ecvt		3030391	2					
ANR	3030413	ParameterList	"double value , int ndigit , int * decpt , int * sign"		3030391	3					
ANR	3030414	Parameter	double value	130:29:3893:3904	3030391	0	True				
ANR	3030415	ParameterType	double		3030391	0					
ANR	3030416	Identifier	value		3030391	1					
ANR	3030417	Parameter	int ndigit	130:43:3907:3916	3030391	1	True				
ANR	3030418	ParameterType	int		3030391	0					
ANR	3030419	Identifier	ndigit		3030391	1					
ANR	3030420	Parameter	int * decpt	130:55:3919:3928	3030391	2	True				
ANR	3030421	ParameterType	int *		3030391	0					
ANR	3030422	Identifier	decpt		3030391	1					
ANR	3030423	Parameter	int * sign	130:67:3931:3939	3030391	3	True				
ANR	3030424	ParameterType	int *		3030391	0					
ANR	3030425	Identifier	sign		3030391	1					
ANR	3030426	CFGEntryNode	ENTRY		3030391		True				
ANR	3030427	CFGExitNode	EXIT		3030391		True				
ANR	3030428	Symbol	decpt		3030391						
ANR	3030429	Symbol	__cvt		3030391						
ANR	3030430	Symbol	ndigit		3030391						
ANR	3030431	Symbol	sign		3030391						
ANR	3030432	Symbol	value		3030391						
ANR	3030433	Function	php_fcvt	136:0:4017:4160							
ANR	3030434	FunctionDef	"php_fcvt (double value , int ndigit , int * decpt , int * sign)"		3030433	0					
ANR	3030435	CompoundStatement		137:0:4105:4160	3030433	0					
ANR	3030436	ReturnStatement	"return ( __cvt ( value , ndigit , decpt , sign , 1 , 1 ) ) ;"	138:4:4111:4158	3030433	0	True				
ANR	3030437	CallExpression	"__cvt ( value , ndigit , decpt , sign , 1 , 1 )"		3030433	0					
ANR	3030438	Callee	__cvt		3030433	0					
ANR	3030439	Identifier	__cvt		3030433	0					
ANR	3030440	ArgumentList	value		3030433	1					
ANR	3030441	Argument	value		3030433	0					
ANR	3030442	Identifier	value		3030433	0					
ANR	3030443	Argument	ndigit		3030433	1					
ANR	3030444	Identifier	ndigit		3030433	0					
ANR	3030445	Argument	decpt		3030433	2					
ANR	3030446	Identifier	decpt		3030433	0					
ANR	3030447	Argument	sign		3030433	3					
ANR	3030448	Identifier	sign		3030433	0					
ANR	3030449	Argument	1		3030433	4					
ANR	3030450	PrimaryExpression	1		3030433	0					
ANR	3030451	Argument	1		3030433	5					
ANR	3030452	PrimaryExpression	1		3030433	0					
ANR	3030453	ReturnType	static inline char *		3030433	1					
ANR	3030454	Identifier	php_fcvt		3030433	2					
ANR	3030455	ParameterList	"double value , int ndigit , int * decpt , int * sign"		3030433	3					
ANR	3030456	Parameter	double value	136:29:4046:4057	3030433	0	True				
ANR	3030457	ParameterType	double		3030433	0					
ANR	3030458	Identifier	value		3030433	1					
ANR	3030459	Parameter	int ndigit	136:43:4060:4069	3030433	1	True				
ANR	3030460	ParameterType	int		3030433	0					
ANR	3030461	Identifier	ndigit		3030433	1					
ANR	3030462	Parameter	int * decpt	136:55:4072:4081	3030433	2	True				
ANR	3030463	ParameterType	int *		3030433	0					
ANR	3030464	Identifier	decpt		3030433	1					
ANR	3030465	Parameter	int * sign	136:67:4084:4092	3030433	3	True				
ANR	3030466	ParameterType	int *		3030433	0					
ANR	3030467	Identifier	sign		3030433	1					
ANR	3030468	CFGEntryNode	ENTRY		3030433		True				
ANR	3030469	CFGExitNode	EXIT		3030433		True				
ANR	3030470	Symbol	decpt		3030433						
ANR	3030471	Symbol	__cvt		3030433						
ANR	3030472	Symbol	ndigit		3030433						
ANR	3030473	Symbol	sign		3030433						
ANR	3030474	Symbol	value		3030433						
ANR	3030475	Function	php_gcvt	142:0:4173:6154							
ANR	3030476	FunctionDef	"php_gcvt (double value , int ndigit , char dec_point , char exponent , char * buf)"		3030475	0					
ANR	3030477	CompoundStatement		143:0:4273:6154	3030475	0					
ANR	3030478	IdentifierDeclStatement	"char * digits , * dst , * src ;"	144:1:4276:4300	3030475	0	True				
ANR	3030479	IdentifierDecl	* digits		3030475	0					
ANR	3030480	IdentifierDeclType	char *		3030475	0					
ANR	3030481	Identifier	digits		3030475	1					
ANR	3030482	IdentifierDecl	* dst		3030475	1					
ANR	3030483	IdentifierDeclType	char *		3030475	0					
ANR	3030484	Identifier	dst		3030475	1					
ANR	3030485	IdentifierDecl	* src		3030475	2					
ANR	3030486	IdentifierDeclType	char *		3030475	0					
ANR	3030487	Identifier	src		3030475	1					
ANR	3030488	IdentifierDeclStatement	"int i , decpt , sign ;"	145:1:4303:4321	3030475	1	True				
ANR	3030489	IdentifierDecl	i		3030475	0					
ANR	3030490	IdentifierDeclType	int		3030475	0					
ANR	3030491	Identifier	i		3030475	1					
ANR	3030492	IdentifierDecl	decpt		3030475	1					
ANR	3030493	IdentifierDeclType	int		3030475	0					
ANR	3030494	Identifier	decpt		3030475	1					
ANR	3030495	IdentifierDecl	sign		3030475	2					
ANR	3030496	IdentifierDeclType	int		3030475	0					
ANR	3030497	Identifier	sign		3030475	1					
ANR	3030498	ExpressionStatement	"digits = zend_dtoa ( value , 2 , ndigit , & decpt , & sign , NULL )"	147:1:4325:4382	3030475	2	True				
ANR	3030499	AssignmentExpression	"digits = zend_dtoa ( value , 2 , ndigit , & decpt , & sign , NULL )"		3030475	0		=			
ANR	3030500	Identifier	digits		3030475	0					
ANR	3030501	CallExpression	"zend_dtoa ( value , 2 , ndigit , & decpt , & sign , NULL )"		3030475	1					
ANR	3030502	Callee	zend_dtoa		3030475	0					
ANR	3030503	Identifier	zend_dtoa		3030475	0					
ANR	3030504	ArgumentList	value		3030475	1					
ANR	3030505	Argument	value		3030475	0					
ANR	3030506	Identifier	value		3030475	0					
ANR	3030507	Argument	2		3030475	1					
ANR	3030508	PrimaryExpression	2		3030475	0					
ANR	3030509	Argument	ndigit		3030475	2					
ANR	3030510	Identifier	ndigit		3030475	0					
ANR	3030511	Argument	& decpt		3030475	3					
ANR	3030512	UnaryOperationExpression	& decpt		3030475	0					
ANR	3030513	UnaryOperator	&		3030475	0					
ANR	3030514	Identifier	decpt		3030475	1					
ANR	3030515	Argument	& sign		3030475	4					
ANR	3030516	UnaryOperationExpression	& sign		3030475	0					
ANR	3030517	UnaryOperator	&		3030475	0					
ANR	3030518	Identifier	sign		3030475	1					
ANR	3030519	Argument	NULL		3030475	5					
ANR	3030520	Identifier	NULL		3030475	0					
ANR	3030521	IfStatement	if ( decpt == 9999 )		3030475	3					
ANR	3030522	Condition	decpt == 9999	148:5:4389:4401	3030475	0	True				
ANR	3030523	EqualityExpression	decpt == 9999		3030475	0		==			
ANR	3030524	Identifier	decpt		3030475	0					
ANR	3030525	PrimaryExpression	9999		3030475	1					
ANR	3030526	CompoundStatement		6:20:130:130	3030475	1					
ANR	3030527	ExpressionStatement	"snprintf ( buf , ndigit + 1 , ""%s%s"" , ( sign && * digits == 'I' ) ? ""-"" : """" , * digits == 'I' ? ""INF"" : ""NAN"" )"	153:2:4525:4627	3030475	0	True				
ANR	3030528	CallExpression	"snprintf ( buf , ndigit + 1 , ""%s%s"" , ( sign && * digits == 'I' ) ? ""-"" : """" , * digits == 'I' ? ""INF"" : ""NAN"" )"		3030475	0					
ANR	3030529	Callee	snprintf		3030475	0					
ANR	3030530	Identifier	snprintf		3030475	0					
ANR	3030531	ArgumentList	buf		3030475	1					
ANR	3030532	Argument	buf		3030475	0					
ANR	3030533	Identifier	buf		3030475	0					
ANR	3030534	Argument	ndigit + 1		3030475	1					
ANR	3030535	AdditiveExpression	ndigit + 1		3030475	0		+			
ANR	3030536	Identifier	ndigit		3030475	0					
ANR	3030537	PrimaryExpression	1		3030475	1					
ANR	3030538	Argument	"""%s%s"""		3030475	2					
ANR	3030539	PrimaryExpression	"""%s%s"""		3030475	0					
ANR	3030540	Argument	"( sign && * digits == 'I' ) ? ""-"" : """""		3030475	3					
ANR	3030541	ConditionalExpression	"( sign && * digits == 'I' ) ? ""-"" : """""		3030475	0					
ANR	3030542	Condition	sign && * digits == 'I'		3030475	0					
ANR	3030543	AndExpression	sign && * digits == 'I'		3030475	0		&&			
ANR	3030544	Identifier	sign		3030475	0					
ANR	3030545	EqualityExpression	* digits == 'I'		3030475	1		==			
ANR	3030546	UnaryOperationExpression	* digits		3030475	0					
ANR	3030547	UnaryOperator	*		3030475	0					
ANR	3030548	Identifier	digits		3030475	1					
ANR	3030549	PrimaryExpression	'I'		3030475	1					
ANR	3030550	PrimaryExpression	"""-"""		3030475	1					
ANR	3030551	PrimaryExpression	""""""		3030475	2					
ANR	3030552	Argument	"* digits == 'I' ? ""INF"" : ""NAN"""		3030475	4					
ANR	3030553	ConditionalExpression	"* digits == 'I' ? ""INF"" : ""NAN"""		3030475	0					
ANR	3030554	Condition	* digits == 'I'		3030475	0					
ANR	3030555	EqualityExpression	* digits == 'I'		3030475	0		==			
ANR	3030556	UnaryOperationExpression	* digits		3030475	0					
ANR	3030557	UnaryOperator	*		3030475	0					
ANR	3030558	Identifier	digits		3030475	1					
ANR	3030559	PrimaryExpression	'I'		3030475	1					
ANR	3030560	PrimaryExpression	"""INF"""		3030475	1					
ANR	3030561	PrimaryExpression	"""NAN"""		3030475	2					
ANR	3030562	ExpressionStatement	zend_freedtoa ( digits )	154:2:4631:4652	3030475	1	True				
ANR	3030563	CallExpression	zend_freedtoa ( digits )		3030475	0					
ANR	3030564	Callee	zend_freedtoa		3030475	0					
ANR	3030565	Identifier	zend_freedtoa		3030475	0					
ANR	3030566	ArgumentList	digits		3030475	1					
ANR	3030567	Argument	digits		3030475	0					
ANR	3030568	Identifier	digits		3030475	0					
ANR	3030569	ReturnStatement	return ( buf ) ;	155:2:4656:4668	3030475	2	True				
ANR	3030570	Identifier	buf		3030475	0					
ANR	3030571	ExpressionStatement	dst = buf	158:1:4675:4684	3030475	4	True				
ANR	3030572	AssignmentExpression	dst = buf		3030475	0		=			
ANR	3030573	Identifier	dst		3030475	0					
ANR	3030574	Identifier	buf		3030475	1					
ANR	3030575	IfStatement	if ( sign )		3030475	5					
ANR	3030576	Condition	sign	159:5:4691:4694	3030475	0	True				
ANR	3030577	Identifier	sign		3030475	0					
ANR	3030578	CompoundStatement		17:11:423:423	3030475	1					
ANR	3030579	ExpressionStatement	* dst ++ = '-'	160:2:4701:4713	3030475	0	True				
ANR	3030580	AssignmentExpression	* dst ++ = '-'		3030475	0		=			
ANR	3030581	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030582	UnaryOperator	*		3030475	0					
ANR	3030583	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030584	Identifier	dst		3030475	0					
ANR	3030585	IncDec	++		3030475	1					
ANR	3030586	PrimaryExpression	'-'		3030475	1					
ANR	3030587	IfStatement	if ( ( decpt >= 0 && decpt > ndigit ) || decpt < - 3 )		3030475	6					
ANR	3030588	Condition	( decpt >= 0 && decpt > ndigit ) || decpt < - 3	163:5:4724:4767	3030475	0	True				
ANR	3030589	OrExpression	( decpt >= 0 && decpt > ndigit ) || decpt < - 3		3030475	0		||			
ANR	3030590	AndExpression	decpt >= 0 && decpt > ndigit		3030475	0		&&			
ANR	3030591	RelationalExpression	decpt >= 0		3030475	0		>=			
ANR	3030592	Identifier	decpt		3030475	0					
ANR	3030593	PrimaryExpression	0		3030475	1					
ANR	3030594	RelationalExpression	decpt > ndigit		3030475	1		>			
ANR	3030595	Identifier	decpt		3030475	0					
ANR	3030596	Identifier	ndigit		3030475	1					
ANR	3030597	RelationalExpression	decpt < - 3		3030475	1		<			
ANR	3030598	Identifier	decpt		3030475	0					
ANR	3030599	UnaryOperationExpression	- 3		3030475	1					
ANR	3030600	UnaryOperator	-		3030475	0					
ANR	3030601	PrimaryExpression	3		3030475	1					
ANR	3030602	CompoundStatement		21:51:496:496	3030475	1					
ANR	3030603	IfStatement	if ( -- decpt < 0 )		3030475	0					
ANR	3030604	Condition	-- decpt < 0	165:6:4841:4851	3030475	0	True				
ANR	3030605	RelationalExpression	-- decpt < 0		3030475	0		<			
ANR	3030606	UnaryExpression	-- decpt		3030475	0					
ANR	3030607	IncDec	--		3030475	0					
ANR	3030608	Identifier	decpt		3030475	1					
ANR	3030609	PrimaryExpression	0		3030475	1					
ANR	3030610	CompoundStatement		23:19:580:580	3030475	1					
ANR	3030611	ExpressionStatement	sign = 1	166:3:4859:4867	3030475	0	True				
ANR	3030612	AssignmentExpression	sign = 1		3030475	0		=			
ANR	3030613	Identifier	sign		3030475	0					
ANR	3030614	PrimaryExpression	1		3030475	1					
ANR	3030615	ExpressionStatement	decpt = - decpt	167:3:4872:4886	3030475	1	True				
ANR	3030616	AssignmentExpression	decpt = - decpt		3030475	0		=			
ANR	3030617	Identifier	decpt		3030475	0					
ANR	3030618	UnaryOperationExpression	- decpt		3030475	1					
ANR	3030619	UnaryOperator	-		3030475	0					
ANR	3030620	Identifier	decpt		3030475	1					
ANR	3030621	ElseStatement	else		3030475	0					
ANR	3030622	CompoundStatement		26:9:623:623	3030475	0					
ANR	3030623	ExpressionStatement	sign = 0	169:3:4902:4910	3030475	0	True				
ANR	3030624	AssignmentExpression	sign = 0		3030475	0		=			
ANR	3030625	Identifier	sign		3030475	0					
ANR	3030626	PrimaryExpression	0		3030475	1					
ANR	3030627	ExpressionStatement	src = digits	171:2:4918:4930	3030475	1	True				
ANR	3030628	AssignmentExpression	src = digits		3030475	0		=			
ANR	3030629	Identifier	src		3030475	0					
ANR	3030630	Identifier	digits		3030475	1					
ANR	3030631	ExpressionStatement	* dst ++ = * src ++	172:2:4934:4949	3030475	2	True				
ANR	3030632	AssignmentExpression	* dst ++ = * src ++		3030475	0		=			
ANR	3030633	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030634	UnaryOperator	*		3030475	0					
ANR	3030635	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030636	Identifier	dst		3030475	0					
ANR	3030637	IncDec	++		3030475	1					
ANR	3030638	UnaryOperationExpression	* src ++		3030475	1					
ANR	3030639	UnaryOperator	*		3030475	0					
ANR	3030640	PostIncDecOperationExpression	src ++		3030475	1					
ANR	3030641	Identifier	src		3030475	0					
ANR	3030642	IncDec	++		3030475	1					
ANR	3030643	ExpressionStatement	* dst ++ = dec_point	173:2:4953:4971	3030475	3	True				
ANR	3030644	AssignmentExpression	* dst ++ = dec_point		3030475	0		=			
ANR	3030645	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030646	UnaryOperator	*		3030475	0					
ANR	3030647	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030648	Identifier	dst		3030475	0					
ANR	3030649	IncDec	++		3030475	1					
ANR	3030650	Identifier	dec_point		3030475	1					
ANR	3030651	IfStatement	if ( * src == '\\0' )		3030475	4					
ANR	3030652	Condition	* src == '\\0'	174:6:4979:4990	3030475	0	True				
ANR	3030653	EqualityExpression	* src == '\\0'		3030475	0		==			
ANR	3030654	UnaryOperationExpression	* src		3030475	0					
ANR	3030655	UnaryOperator	*		3030475	0					
ANR	3030656	Identifier	src		3030475	1					
ANR	3030657	PrimaryExpression	'\\0'		3030475	1					
ANR	3030658	CompoundStatement		32:20:719:719	3030475	1					
ANR	3030659	ExpressionStatement	* dst ++ = '0'	175:3:4998:5010	3030475	0	True				
ANR	3030660	AssignmentExpression	* dst ++ = '0'		3030475	0		=			
ANR	3030661	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030662	UnaryOperator	*		3030475	0					
ANR	3030663	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030664	Identifier	dst		3030475	0					
ANR	3030665	IncDec	++		3030475	1					
ANR	3030666	PrimaryExpression	'0'		3030475	1					
ANR	3030667	ElseStatement	else		3030475	0					
ANR	3030668	CompoundStatement		34:9:747:747	3030475	0					
ANR	3030669	DoStatement	do		3030475	0					
ANR	3030670	CompoundStatement		35:6:755:755	3030475	0					
ANR	3030671	ExpressionStatement	* dst ++ = * src ++	178:4:5035:5050	3030475	0	True				
ANR	3030672	AssignmentExpression	* dst ++ = * src ++		3030475	0		=			
ANR	3030673	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030674	UnaryOperator	*		3030475	0					
ANR	3030675	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030676	Identifier	dst		3030475	0					
ANR	3030677	IncDec	++		3030475	1					
ANR	3030678	UnaryOperationExpression	* src ++		3030475	1					
ANR	3030679	UnaryOperator	*		3030475	0					
ANR	3030680	PostIncDecOperationExpression	src ++		3030475	1					
ANR	3030681	Identifier	src		3030475	0					
ANR	3030682	IncDec	++		3030475	1					
ANR	3030683	Condition	* src != '\\0'	179:12:5064:5075	3030475	1	True				
ANR	3030684	EqualityExpression	* src != '\\0'		3030475	0		!=			
ANR	3030685	UnaryOperationExpression	* src		3030475	0					
ANR	3030686	UnaryOperator	*		3030475	0					
ANR	3030687	Identifier	src		3030475	1					
ANR	3030688	PrimaryExpression	'\\0'		3030475	1					
ANR	3030689	ExpressionStatement	* dst ++ = exponent	181:2:5085:5102	3030475	5	True				
ANR	3030690	AssignmentExpression	* dst ++ = exponent		3030475	0		=			
ANR	3030691	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030692	UnaryOperator	*		3030475	0					
ANR	3030693	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030694	Identifier	dst		3030475	0					
ANR	3030695	IncDec	++		3030475	1					
ANR	3030696	Identifier	exponent		3030475	1					
ANR	3030697	IfStatement	if ( sign )		3030475	6					
ANR	3030698	Condition	sign	182:6:5110:5113	3030475	0	True				
ANR	3030699	Identifier	sign		3030475	0					
ANR	3030700	CompoundStatement		40:12:842:842	3030475	1					
ANR	3030701	ExpressionStatement	* dst ++ = '-'	183:3:5121:5133	3030475	0	True				
ANR	3030702	AssignmentExpression	* dst ++ = '-'		3030475	0		=			
ANR	3030703	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030704	UnaryOperator	*		3030475	0					
ANR	3030705	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030706	Identifier	dst		3030475	0					
ANR	3030707	IncDec	++		3030475	1					
ANR	3030708	PrimaryExpression	'-'		3030475	1					
ANR	3030709	ElseStatement	else		3030475	0					
ANR	3030710	CompoundStatement		42:9:870:870	3030475	0					
ANR	3030711	ExpressionStatement	* dst ++ = '+'	185:3:5149:5161	3030475	0	True				
ANR	3030712	AssignmentExpression	* dst ++ = '+'		3030475	0		=			
ANR	3030713	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030714	UnaryOperator	*		3030475	0					
ANR	3030715	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030716	Identifier	dst		3030475	0					
ANR	3030717	IncDec	++		3030475	1					
ANR	3030718	PrimaryExpression	'+'		3030475	1					
ANR	3030719	IfStatement	if ( decpt < 10 )		3030475	7					
ANR	3030720	Condition	decpt < 10	187:6:5173:5182	3030475	0	True				
ANR	3030721	RelationalExpression	decpt < 10		3030475	0		<			
ANR	3030722	Identifier	decpt		3030475	0					
ANR	3030723	PrimaryExpression	10		3030475	1					
ANR	3030724	CompoundStatement		45:18:911:911	3030475	1					
ANR	3030725	ExpressionStatement	* dst ++ = '0' + decpt	188:3:5190:5210	3030475	0	True				
ANR	3030726	AssignmentExpression	* dst ++ = '0' + decpt		3030475	0		=			
ANR	3030727	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030728	UnaryOperator	*		3030475	0					
ANR	3030729	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030730	Identifier	dst		3030475	0					
ANR	3030731	IncDec	++		3030475	1					
ANR	3030732	AdditiveExpression	'0' + decpt		3030475	1		+			
ANR	3030733	PrimaryExpression	'0'		3030475	0					
ANR	3030734	Identifier	decpt		3030475	1					
ANR	3030735	ExpressionStatement	* dst = '\\0'	189:3:5215:5226	3030475	1	True				
ANR	3030736	AssignmentExpression	* dst = '\\0'		3030475	0		=			
ANR	3030737	UnaryOperationExpression	* dst		3030475	0					
ANR	3030738	UnaryOperator	*		3030475	0					
ANR	3030739	Identifier	dst		3030475	1					
ANR	3030740	PrimaryExpression	'\\0'		3030475	1					
ANR	3030741	ElseStatement	else		3030475	0					
ANR	3030742	CompoundStatement		48:9:963:963	3030475	0					
ANR	3030743	ForStatement	"for ( sign = decpt , i = 0 ; ( sign /= 10 ) != 0 ; i ++ )"		3030475	0					
ANR	3030744	ForInit	"sign = decpt , i = 0 ;"	192:8:5271:5290	3030475	0	True				
ANR	3030745	Expression	"sign = decpt , i = 0"		3030475	0					
ANR	3030746	AssignmentExpression	sign = decpt		3030475	0		=			
ANR	3030747	Identifier	sign		3030475	0					
ANR	3030748	Identifier	decpt		3030475	1					
ANR	3030749	AssignmentExpression	i = 0		3030475	1		=			
ANR	3030750	Identifier	i		3030475	0					
ANR	3030751	PrimaryExpression	0		3030475	1					
ANR	3030752	Condition	( sign /= 10 ) != 0	192:29:5292:5308	3030475	1	True				
ANR	3030753	EqualityExpression	( sign /= 10 ) != 0		3030475	0		!=			
ANR	3030754	AssignmentExpression	sign /= 10		3030475	0		/=			
ANR	3030755	Identifier	sign		3030475	0					
ANR	3030756	PrimaryExpression	10		3030475	1					
ANR	3030757	PrimaryExpression	0		3030475	1					
ANR	3030758	PostIncDecOperationExpression	i ++	192:48:5311:5313	3030475	2	True				
ANR	3030759	Identifier	i		3030475	0					
ANR	3030760	IncDec	++		3030475	1					
ANR	3030761	ContinueStatement	continue ;	193:4:5320:5328	3030475	3	True				
ANR	3030762	ExpressionStatement	dst [ i + 1 ] = '\\0'	194:3:5333:5350	3030475	1	True				
ANR	3030763	AssignmentExpression	dst [ i + 1 ] = '\\0'		3030475	0		=			
ANR	3030764	ArrayIndexing	dst [ i + 1 ]		3030475	0					
ANR	3030765	Identifier	dst		3030475	0					
ANR	3030766	AdditiveExpression	i + 1		3030475	1		+			
ANR	3030767	Identifier	i		3030475	0					
ANR	3030768	PrimaryExpression	1		3030475	1					
ANR	3030769	PrimaryExpression	'\\0'		3030475	1					
ANR	3030770	WhileStatement	while ( decpt != 0 )		3030475	2					
ANR	3030771	Condition	decpt != 0	195:10:5362:5371	3030475	0	True				
ANR	3030772	EqualityExpression	decpt != 0		3030475	0		!=			
ANR	3030773	Identifier	decpt		3030475	0					
ANR	3030774	PrimaryExpression	0		3030475	1					
ANR	3030775	CompoundStatement		53:22:1100:1100	3030475	1					
ANR	3030776	ExpressionStatement	dst [ i -- ] = '0' + decpt % 10	196:4:5380:5407	3030475	0	True				
ANR	3030777	AssignmentExpression	dst [ i -- ] = '0' + decpt % 10		3030475	0		=			
ANR	3030778	ArrayIndexing	dst [ i -- ]		3030475	0					
ANR	3030779	Identifier	dst		3030475	0					
ANR	3030780	PostIncDecOperationExpression	i --		3030475	1					
ANR	3030781	Identifier	i		3030475	0					
ANR	3030782	IncDec	--		3030475	1					
ANR	3030783	AdditiveExpression	'0' + decpt % 10		3030475	1		+			
ANR	3030784	PrimaryExpression	'0'		3030475	0					
ANR	3030785	MultiplicativeExpression	decpt % 10		3030475	1		%			
ANR	3030786	Identifier	decpt		3030475	0					
ANR	3030787	PrimaryExpression	10		3030475	1					
ANR	3030788	ExpressionStatement	decpt /= 10	197:4:5413:5424	3030475	1	True				
ANR	3030789	AssignmentExpression	decpt /= 10		3030475	0		/=			
ANR	3030790	Identifier	decpt		3030475	0					
ANR	3030791	PrimaryExpression	10		3030475	1					
ANR	3030792	ElseStatement	else		3030475	0					
ANR	3030793	IfStatement	if ( decpt < 0 )		3030475	0					
ANR	3030794	Condition	decpt < 0	200:12:5447:5455	3030475	0	True				
ANR	3030795	RelationalExpression	decpt < 0		3030475	0		<			
ANR	3030796	Identifier	decpt		3030475	0					
ANR	3030797	PrimaryExpression	0		3030475	1					
ANR	3030798	CompoundStatement		58:23:1184:1184	3030475	1					
ANR	3030799	ExpressionStatement	* dst ++ = '0'	202:2:5489:5501	3030475	0	True				
ANR	3030800	AssignmentExpression	* dst ++ = '0'		3030475	0		=			
ANR	3030801	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030802	UnaryOperator	*		3030475	0					
ANR	3030803	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030804	Identifier	dst		3030475	0					
ANR	3030805	IncDec	++		3030475	1					
ANR	3030806	PrimaryExpression	'0'		3030475	1					
ANR	3030807	ExpressionStatement	* dst ++ = dec_point	203:2:5539:5557	3030475	1	True				
ANR	3030808	AssignmentExpression	* dst ++ = dec_point		3030475	0		=			
ANR	3030809	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030810	UnaryOperator	*		3030475	0					
ANR	3030811	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030812	Identifier	dst		3030475	0					
ANR	3030813	IncDec	++		3030475	1					
ANR	3030814	Identifier	dec_point		3030475	1					
ANR	3030815	DoStatement	do		3030475	2					
ANR	3030816	CompoundStatement		62:5:1290:1290	3030475	0					
ANR	3030817	ExpressionStatement	* dst ++ = '0'	205:3:5569:5581	3030475	0	True				
ANR	3030818	AssignmentExpression	* dst ++ = '0'		3030475	0		=			
ANR	3030819	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030820	UnaryOperator	*		3030475	0					
ANR	3030821	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030822	Identifier	dst		3030475	0					
ANR	3030823	IncDec	++		3030475	1					
ANR	3030824	PrimaryExpression	'0'		3030475	1					
ANR	3030825	Condition	++ decpt < 0	206:11:5594:5604	3030475	1	True				
ANR	3030826	RelationalExpression	++ decpt < 0		3030475	0		<			
ANR	3030827	UnaryExpression	++ decpt		3030475	0					
ANR	3030828	IncDec	++		3030475	0					
ANR	3030829	Identifier	decpt		3030475	1					
ANR	3030830	PrimaryExpression	0		3030475	1					
ANR	3030831	ExpressionStatement	src = digits	207:2:5610:5622	3030475	3	True				
ANR	3030832	AssignmentExpression	src = digits		3030475	0		=			
ANR	3030833	Identifier	src		3030475	0					
ANR	3030834	Identifier	digits		3030475	1					
ANR	3030835	WhileStatement	while ( * src != '\\0' )		3030475	4					
ANR	3030836	Condition	* src != '\\0'	208:9:5633:5644	3030475	0	True				
ANR	3030837	EqualityExpression	* src != '\\0'		3030475	0		!=			
ANR	3030838	UnaryOperationExpression	* src		3030475	0					
ANR	3030839	UnaryOperator	*		3030475	0					
ANR	3030840	Identifier	src		3030475	1					
ANR	3030841	PrimaryExpression	'\\0'		3030475	1					
ANR	3030842	CompoundStatement		66:23:1373:1373	3030475	1					
ANR	3030843	ExpressionStatement	* dst ++ = * src ++	209:3:5652:5667	3030475	0	True				
ANR	3030844	AssignmentExpression	* dst ++ = * src ++		3030475	0		=			
ANR	3030845	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030846	UnaryOperator	*		3030475	0					
ANR	3030847	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030848	Identifier	dst		3030475	0					
ANR	3030849	IncDec	++		3030475	1					
ANR	3030850	UnaryOperationExpression	* src ++		3030475	1					
ANR	3030851	UnaryOperator	*		3030475	0					
ANR	3030852	PostIncDecOperationExpression	src ++		3030475	1					
ANR	3030853	Identifier	src		3030475	0					
ANR	3030854	IncDec	++		3030475	1					
ANR	3030855	ExpressionStatement	* dst = '\\0'	211:2:5675:5686	3030475	5	True				
ANR	3030856	AssignmentExpression	* dst = '\\0'		3030475	0		=			
ANR	3030857	UnaryOperationExpression	* dst		3030475	0					
ANR	3030858	UnaryOperator	*		3030475	0					
ANR	3030859	Identifier	dst		3030475	1					
ANR	3030860	PrimaryExpression	'\\0'		3030475	1					
ANR	3030861	ElseStatement	else		3030475	0					
ANR	3030862	CompoundStatement		70:8:1422:1422	3030475	0					
ANR	3030863	ForStatement	"for ( i = 0 , src = digits ; i < decpt ; i ++ )"		3030475	0					
ANR	3030864	ForInit	"i = 0 , src = digits ;"	214:7:5729:5748	3030475	0	True				
ANR	3030865	Expression	"i = 0 , src = digits"		3030475	0					
ANR	3030866	AssignmentExpression	i = 0		3030475	0		=			
ANR	3030867	Identifier	i		3030475	0					
ANR	3030868	PrimaryExpression	0		3030475	1					
ANR	3030869	AssignmentExpression	src = digits		3030475	1		=			
ANR	3030870	Identifier	src		3030475	0					
ANR	3030871	Identifier	digits		3030475	1					
ANR	3030872	Condition	i < decpt	214:28:5750:5758	3030475	1	True				
ANR	3030873	RelationalExpression	i < decpt		3030475	0		<			
ANR	3030874	Identifier	i		3030475	0					
ANR	3030875	Identifier	decpt		3030475	1					
ANR	3030876	PostIncDecOperationExpression	i ++	214:39:5761:5763	3030475	2	True				
ANR	3030877	Identifier	i		3030475	0					
ANR	3030878	IncDec	++		3030475	1					
ANR	3030879	CompoundStatement		72:44:1492:1492	3030475	3					
ANR	3030880	IfStatement	if ( * src != '\\0' )		3030475	0					
ANR	3030881	Condition	* src != '\\0'	215:7:5775:5786	3030475	0	True				
ANR	3030882	EqualityExpression	* src != '\\0'		3030475	0		!=			
ANR	3030883	UnaryOperationExpression	* src		3030475	0					
ANR	3030884	UnaryOperator	*		3030475	0					
ANR	3030885	Identifier	src		3030475	1					
ANR	3030886	PrimaryExpression	'\\0'		3030475	1					
ANR	3030887	CompoundStatement		73:21:1515:1515	3030475	1					
ANR	3030888	ExpressionStatement	* dst ++ = * src ++	216:4:5795:5810	3030475	0	True				
ANR	3030889	AssignmentExpression	* dst ++ = * src ++		3030475	0		=			
ANR	3030890	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030891	UnaryOperator	*		3030475	0					
ANR	3030892	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030893	Identifier	dst		3030475	0					
ANR	3030894	IncDec	++		3030475	1					
ANR	3030895	UnaryOperationExpression	* src ++		3030475	1					
ANR	3030896	UnaryOperator	*		3030475	0					
ANR	3030897	PostIncDecOperationExpression	src ++		3030475	1					
ANR	3030898	Identifier	src		3030475	0					
ANR	3030899	IncDec	++		3030475	1					
ANR	3030900	ElseStatement	else		3030475	0					
ANR	3030901	CompoundStatement		75:10:1548:1548	3030475	0					
ANR	3030902	ExpressionStatement	* dst ++ = '0'	218:4:5828:5840	3030475	0	True				
ANR	3030903	AssignmentExpression	* dst ++ = '0'		3030475	0		=			
ANR	3030904	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030905	UnaryOperator	*		3030475	0					
ANR	3030906	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030907	Identifier	dst		3030475	0					
ANR	3030908	IncDec	++		3030475	1					
ANR	3030909	PrimaryExpression	'0'		3030475	1					
ANR	3030910	IfStatement	if ( * src != '\\0' )		3030475	1					
ANR	3030911	Condition	* src != '\\0'	221:6:5857:5868	3030475	0	True				
ANR	3030912	EqualityExpression	* src != '\\0'		3030475	0		!=			
ANR	3030913	UnaryOperationExpression	* src		3030475	0					
ANR	3030914	UnaryOperator	*		3030475	0					
ANR	3030915	Identifier	src		3030475	1					
ANR	3030916	PrimaryExpression	'\\0'		3030475	1					
ANR	3030917	CompoundStatement		79:20:1597:1597	3030475	1					
ANR	3030918	IfStatement	if ( src == digits )		3030475	0					
ANR	3030919	Condition	src == digits	222:7:5880:5892	3030475	0	True				
ANR	3030920	EqualityExpression	src == digits		3030475	0		==			
ANR	3030921	Identifier	src		3030475	0					
ANR	3030922	Identifier	digits		3030475	1					
ANR	3030923	CompoundStatement		80:22:1621:1621	3030475	1					
ANR	3030924	ExpressionStatement	* dst ++ = '0'	223:4:5901:5913	3030475	0	True				
ANR	3030925	AssignmentExpression	* dst ++ = '0'		3030475	0		=			
ANR	3030926	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030927	UnaryOperator	*		3030475	0					
ANR	3030928	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030929	Identifier	dst		3030475	0					
ANR	3030930	IncDec	++		3030475	1					
ANR	3030931	PrimaryExpression	'0'		3030475	1					
ANR	3030932	ExpressionStatement	* dst ++ = dec_point	225:3:5957:5975	3030475	1	True				
ANR	3030933	AssignmentExpression	* dst ++ = dec_point		3030475	0		=			
ANR	3030934	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030935	UnaryOperator	*		3030475	0					
ANR	3030936	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030937	Identifier	dst		3030475	0					
ANR	3030938	IncDec	++		3030475	1					
ANR	3030939	Identifier	dec_point		3030475	1					
ANR	3030940	ForStatement	for ( i = decpt ; digits [ i ] != '\\0' ; i ++ )		3030475	2					
ANR	3030941	ForInit	i = decpt ;	226:8:5985:5994	3030475	0	True				
ANR	3030942	AssignmentExpression	i = decpt		3030475	0		=			
ANR	3030943	Identifier	i		3030475	0					
ANR	3030944	Identifier	decpt		3030475	1					
ANR	3030945	Condition	digits [ i ] != '\\0'	226:19:5996:6012	3030475	1	True				
ANR	3030946	EqualityExpression	digits [ i ] != '\\0'		3030475	0		!=			
ANR	3030947	ArrayIndexing	digits [ i ]		3030475	0					
ANR	3030948	Identifier	digits		3030475	0					
ANR	3030949	Identifier	i		3030475	1					
ANR	3030950	PrimaryExpression	'\\0'		3030475	1					
ANR	3030951	PostIncDecOperationExpression	i ++	226:38:6015:6017	3030475	2	True				
ANR	3030952	Identifier	i		3030475	0					
ANR	3030953	IncDec	++		3030475	1					
ANR	3030954	CompoundStatement		84:43:1746:1746	3030475	3					
ANR	3030955	ExpressionStatement	* dst ++ = digits [ i ]	227:16:6038:6056	3030475	0	True				
ANR	3030956	AssignmentExpression	* dst ++ = digits [ i ]		3030475	0		=			
ANR	3030957	UnaryOperationExpression	* dst ++		3030475	0					
ANR	3030958	UnaryOperator	*		3030475	0					
ANR	3030959	PostIncDecOperationExpression	dst ++		3030475	1					
ANR	3030960	Identifier	dst		3030475	0					
ANR	3030961	IncDec	++		3030475	1					
ANR	3030962	ArrayIndexing	digits [ i ]		3030475	1					
ANR	3030963	Identifier	digits		3030475	0					
ANR	3030964	Identifier	i		3030475	1					
ANR	3030965	ExpressionStatement	* dst = '\\0'	230:8:6090:6101	3030475	2	True				
ANR	3030966	AssignmentExpression	* dst = '\\0'		3030475	0		=			
ANR	3030967	UnaryOperationExpression	* dst		3030475	0					
ANR	3030968	UnaryOperator	*		3030475	0					
ANR	3030969	Identifier	dst		3030475	1					
ANR	3030970	PrimaryExpression	'\\0'		3030475	1					
ANR	3030971	ExpressionStatement	zend_freedtoa ( digits )	232:4:6113:6134	3030475	7	True				
ANR	3030972	CallExpression	zend_freedtoa ( digits )		3030475	0					
ANR	3030973	Callee	zend_freedtoa		3030475	0					
ANR	3030974	Identifier	zend_freedtoa		3030475	0					
ANR	3030975	ArgumentList	digits		3030475	1					
ANR	3030976	Argument	digits		3030475	0					
ANR	3030977	Identifier	digits		3030475	0					
ANR	3030978	ReturnStatement	return ( buf ) ;	233:4:6140:6152	3030475	8	True				
ANR	3030979	Identifier	buf		3030475	0					
ANR	3030980	ReturnType	PHPAPI char *		3030475	1					
ANR	3030981	Identifier	php_gcvt		3030475	2					
ANR	3030982	ParameterList	"double value , int ndigit , char dec_point , char exponent , char * buf"		3030475	3					
ANR	3030983	Parameter	double value	142:22:4195:4206	3030475	0	True				
ANR	3030984	ParameterType	double		3030475	0					
ANR	3030985	Identifier	value		3030475	1					
ANR	3030986	Parameter	int ndigit	142:36:4209:4218	3030475	1	True				
ANR	3030987	ParameterType	int		3030475	0					
ANR	3030988	Identifier	ndigit		3030475	1					
ANR	3030989	Parameter	char dec_point	142:48:4221:4234	3030475	2	True				
ANR	3030990	ParameterType	char		3030475	0					
ANR	3030991	Identifier	dec_point		3030475	1					
ANR	3030992	Parameter	char exponent	142:64:4237:4249	3030475	3	True				
ANR	3030993	ParameterType	char		3030475	0					
ANR	3030994	Identifier	exponent		3030475	1					
ANR	3030995	Parameter	char * buf	142:79:4252:4260	3030475	4	True				
ANR	3030996	ParameterType	char *		3030475	0					
ANR	3030997	Identifier	buf		3030475	1					
ANR	3030998	CFGEntryNode	ENTRY		3030475		True				
ANR	3030999	CFGExitNode	EXIT		3030475		True				
ANR	3031000	Symbol	NULL		3030475						
ANR	3031001	Symbol	dst		3030475						
ANR	3031002	Symbol	src		3030475						
ANR	3031003	Symbol	dec_point		3030475						
ANR	3031004	Symbol	& sign		3030475						
ANR	3031005	Symbol	sign		3030475						
ANR	3031006	Symbol	i		3030475						
ANR	3031007	Symbol	* digits		3030475						
ANR	3031008	Symbol	* src		3030475						
ANR	3031009	Symbol	zend_dtoa		3030475						
ANR	3031010	Symbol	* dst		3030475						
ANR	3031011	Symbol	buf		3030475						
ANR	3031012	Symbol	* i		3030475						
ANR	3031013	Symbol	& decpt		3030475						
ANR	3031014	Symbol	decpt		3030475						
ANR	3031015	Symbol	* dst ++		3030475						
ANR	3031016	Symbol	ndigit		3030475						
ANR	3031017	Symbol	* src ++		3030475						
ANR	3031018	Symbol	digits		3030475						
ANR	3031019	Symbol	value		3030475						
ANR	3031020	Symbol	exponent		3030475						
ANR	3031021	Function	ap_php_conv_10	319:0:9709:10797							
ANR	3031022	FunctionDef	"ap_php_conv_10 (register wide_int num , register bool_int is_unsigned , register bool_int * is_negative , char * buf_end , register size_t * len)"		3031021	0					
ANR	3031023	CompoundStatement		321:0:9866:10797	3031021	0					
ANR	3031024	Statement	register	322:1:9869:9876	3031021	0	True				
ANR	3031025	IdentifierDeclStatement	char * p = buf_end ;	322:10:9878:9895	3031021	1	True				
ANR	3031026	IdentifierDecl	* p = buf_end		3031021	0					
ANR	3031027	IdentifierDeclType	char *		3031021	0					
ANR	3031028	Identifier	p		3031021	1					
ANR	3031029	AssignmentExpression	* p = buf_end		3031021	2		=			
ANR	3031030	Identifier	buf_end		3031021	0					
ANR	3031031	Identifier	buf_end		3031021	1					
ANR	3031032	Statement	register	323:1:9898:9905	3031021	2	True				
ANR	3031033	IdentifierDeclStatement	u_wide_int magnitude ;	323:10:9907:9927	3031021	3	True				
ANR	3031034	IdentifierDecl	magnitude		3031021	0					
ANR	3031035	IdentifierDeclType	u_wide_int		3031021	0					
ANR	3031036	Identifier	magnitude		3031021	1					
ANR	3031037	IfStatement	if ( is_unsigned )		3031021	4					
ANR	3031038	Condition	is_unsigned	325:5:9935:9945	3031021	0	True				
ANR	3031039	Identifier	is_unsigned		3031021	0					
ANR	3031040	CompoundStatement		5:18:81:81	3031021	1					
ANR	3031041	ExpressionStatement	magnitude = ( u_wide_int ) num	326:2:9952:9980	3031021	0	True				
ANR	3031042	AssignmentExpression	magnitude = ( u_wide_int ) num		3031021	0		=			
ANR	3031043	Identifier	magnitude		3031021	0					
ANR	3031044	CastExpression	( u_wide_int ) num		3031021	1					
ANR	3031045	CastTarget	u_wide_int		3031021	0					
ANR	3031046	Identifier	num		3031021	1					
ANR	3031047	ExpressionStatement	* is_negative = FALSE	327:2:9984:10004	3031021	1	True				
ANR	3031048	AssignmentExpression	* is_negative = FALSE		3031021	0		=			
ANR	3031049	UnaryOperationExpression	* is_negative		3031021	0					
ANR	3031050	UnaryOperator	*		3031021	0					
ANR	3031051	Identifier	is_negative		3031021	1					
ANR	3031052	Identifier	FALSE		3031021	1					
ANR	3031053	ElseStatement	else		3031021	0					
ANR	3031054	CompoundStatement		8:8:147:147	3031021	0					
ANR	3031055	ExpressionStatement	* is_negative = ( num < 0 )	329:2:10018:10042	3031021	0	True				
ANR	3031056	AssignmentExpression	* is_negative = ( num < 0 )		3031021	0		=			
ANR	3031057	UnaryOperationExpression	* is_negative		3031021	0					
ANR	3031058	UnaryOperator	*		3031021	0					
ANR	3031059	Identifier	is_negative		3031021	1					
ANR	3031060	RelationalExpression	num < 0		3031021	1		<			
ANR	3031061	Identifier	num		3031021	0					
ANR	3031062	PrimaryExpression	0		3031021	1					
ANR	3031063	IfStatement	if ( * is_negative )		3031021	1					
ANR	3031064	Condition	* is_negative	340:6:10392:10403	3031021	0	True				
ANR	3031065	UnaryOperationExpression	* is_negative		3031021	0					
ANR	3031066	UnaryOperator	*		3031021	0					
ANR	3031067	Identifier	is_negative		3031021	1					
ANR	3031068	CompoundStatement		21:3:544:564	3031021	1					
ANR	3031069	IdentifierDeclStatement	wide_int t = num + 1 ;	341:3:10411:10431	3031021	0	True				
ANR	3031070	IdentifierDecl	t = num + 1		3031021	0					
ANR	3031071	IdentifierDeclType	wide_int		3031021	0					
ANR	3031072	Identifier	t		3031021	1					
ANR	3031073	AssignmentExpression	t = num + 1		3031021	2		=			
ANR	3031074	Identifier	t		3031021	0					
ANR	3031075	AdditiveExpression	num + 1		3031021	1		+			
ANR	3031076	Identifier	num		3031021	0					
ANR	3031077	PrimaryExpression	1		3031021	1					
ANR	3031078	ExpressionStatement	magnitude = ( ( u_wide_int ) - t ) + 1	342:3:10436:10470	3031021	1	True				
ANR	3031079	AssignmentExpression	magnitude = ( ( u_wide_int ) - t ) + 1		3031021	0		=			
ANR	3031080	Identifier	magnitude		3031021	0					
ANR	3031081	AdditiveExpression	( ( u_wide_int ) - t ) + 1		3031021	1		+			
ANR	3031082	CastExpression	( u_wide_int ) - t		3031021	0					
ANR	3031083	CastTarget	u_wide_int		3031021	0					
ANR	3031084	UnaryOperationExpression	- t		3031021	1					
ANR	3031085	UnaryOperator	-		3031021	0					
ANR	3031086	Identifier	t		3031021	1					
ANR	3031087	PrimaryExpression	1		3031021	1					
ANR	3031088	ElseStatement	else		3031021	0					
ANR	3031089	CompoundStatement		23:9:614:614	3031021	0					
ANR	3031090	ExpressionStatement	magnitude = ( u_wide_int ) num	344:3:10486:10514	3031021	0	True				
ANR	3031091	AssignmentExpression	magnitude = ( u_wide_int ) num		3031021	0		=			
ANR	3031092	Identifier	magnitude		3031021	0					
ANR	3031093	CastExpression	( u_wide_int ) num		3031021	1					
ANR	3031094	CastTarget	u_wide_int		3031021	0					
ANR	3031095	Identifier	num		3031021	1					
ANR	3031096	DoStatement	do		3031021	5					
ANR	3031097	CompoundStatement		32:11:744:785	3031021	0					
ANR	3031098	Statement	register	352:2:10602:10609	3031021	0	True				
ANR	3031099	IdentifierDeclStatement	u_wide_int new_magnitude = magnitude / 10 ;	352:11:10611:10652	3031021	1	True				
ANR	3031100	IdentifierDecl	new_magnitude = magnitude / 10		3031021	0					
ANR	3031101	IdentifierDeclType	u_wide_int		3031021	0					
ANR	3031102	Identifier	new_magnitude		3031021	1					
ANR	3031103	AssignmentExpression	new_magnitude = magnitude / 10		3031021	2		=			
ANR	3031104	Identifier	new_magnitude		3031021	0					
ANR	3031105	MultiplicativeExpression	magnitude / 10		3031021	1		/			
ANR	3031106	Identifier	magnitude		3031021	0					
ANR	3031107	PrimaryExpression	10		3031021	1					
ANR	3031108	ExpressionStatement	* -- p = ( char ) ( magnitude - new_magnitude * 10 + '0' )	354:2:10657:10708	3031021	2	True				
ANR	3031109	AssignmentExpression	* -- p = ( char ) ( magnitude - new_magnitude * 10 + '0' )		3031021	0		=			
ANR	3031110	UnaryOperationExpression	* -- p		3031021	0					
ANR	3031111	UnaryOperator	*		3031021	0					
ANR	3031112	UnaryExpression	-- p		3031021	1					
ANR	3031113	IncDec	--		3031021	0					
ANR	3031114	Identifier	p		3031021	1					
ANR	3031115	CastExpression	( char ) ( magnitude - new_magnitude * 10 + '0' )		3031021	1					
ANR	3031116	CastTarget	char		3031021	0					
ANR	3031117	AdditiveExpression	magnitude - new_magnitude * 10 + '0'		3031021	1		-			
ANR	3031118	Identifier	magnitude		3031021	0					
ANR	3031119	AdditiveExpression	new_magnitude * 10 + '0'		3031021	1		+			
ANR	3031120	MultiplicativeExpression	new_magnitude * 10		3031021	0		*			
ANR	3031121	Identifier	new_magnitude		3031021	0					
ANR	3031122	PrimaryExpression	10		3031021	1					
ANR	3031123	PrimaryExpression	'0'		3031021	1					
ANR	3031124	ExpressionStatement	magnitude = new_magnitude	355:2:10712:10737	3031021	3	True				
ANR	3031125	AssignmentExpression	magnitude = new_magnitude		3031021	0		=			
ANR	3031126	Identifier	magnitude		3031021	0					
ANR	3031127	Identifier	new_magnitude		3031021	1					
ANR	3031128	Condition	magnitude	357:8:10750:10758	3031021	1	True				
ANR	3031129	Identifier	magnitude		3031021	0					
ANR	3031130	ExpressionStatement	* len = buf_end - p	359:1:10764:10782	3031021	6	True				
ANR	3031131	AssignmentExpression	* len = buf_end - p		3031021	0		=			
ANR	3031132	UnaryOperationExpression	* len		3031021	0					
ANR	3031133	UnaryOperator	*		3031021	0					
ANR	3031134	Identifier	len		3031021	1					
ANR	3031135	AdditiveExpression	buf_end - p		3031021	1		-			
ANR	3031136	Identifier	buf_end		3031021	0					
ANR	3031137	Identifier	p		3031021	1					
ANR	3031138	ReturnStatement	return ( p ) ;	360:1:10785:10795	3031021	7	True				
ANR	3031139	Identifier	p		3031021	0					
ANR	3031140	ReturnType	PHPAPI char *		3031021	1					
ANR	3031141	Identifier	ap_php_conv_10		3031021	2					
ANR	3031142	ParameterList	"register wide_int num , register bool_int is_unsigned , register bool_int * is_negative , char * buf_end , register size_t * len"		3031021	3					
ANR	3031143	Parameter	register wide_int num	319:29:9738:9758	3031021	0	True				
ANR	3031144	ParameterType	register wide_int		3031021	0					
ANR	3031145	Identifier	num		3031021	1					
ANR	3031146	Parameter	register bool_int is_unsigned	319:52:9761:9789	3031021	1	True				
ANR	3031147	ParameterType	register bool_int		3031021	0					
ANR	3031148	Identifier	is_unsigned		3031021	1					
ANR	3031149	Parameter	register bool_int * is_negative	320:4:9796:9826	3031021	2	True				
ANR	3031150	ParameterType	register bool_int *		3031021	0					
ANR	3031151	Identifier	is_negative		3031021	1					
ANR	3031152	Parameter	char * buf_end	320:37:9829:9841	3031021	3	True				
ANR	3031153	ParameterType	char *		3031021	0					
ANR	3031154	Identifier	buf_end		3031021	1					
ANR	3031155	Parameter	register size_t * len	320:52:9844:9863	3031021	4	True				
ANR	3031156	ParameterType	register size_t *		3031021	0					
ANR	3031157	Identifier	len		3031021	1					
ANR	3031158	CFGEntryNode	ENTRY		3031021		True				
ANR	3031159	CFGExitNode	EXIT		3031021		True				
ANR	3031160	Symbol	* -- p		3031021						
ANR	3031161	Symbol	num		3031021						
ANR	3031162	Symbol	new_magnitude		3031021						
ANR	3031163	Symbol	p		3031021						
ANR	3031164	Symbol	len		3031021						
ANR	3031165	Symbol	t		3031021						
ANR	3031166	Symbol	is_unsigned		3031021						
ANR	3031167	Symbol	magnitude		3031021						
ANR	3031168	Symbol	FALSE		3031021						
ANR	3031169	Symbol	* p		3031021						
ANR	3031170	Symbol	buf_end		3031021						
ANR	3031171	Symbol	is_negative		3031021						
ANR	3031172	Symbol	* is_negative		3031021						
ANR	3031173	Symbol	* len		3031021						
ANR	3031174	Function	php_conv_fp	377:0:11225:13197							
ANR	3031175	FunctionDef	"php_conv_fp (register char format , register double num , boolean_e add_dp , int precision , char dec_point , bool_int * is_negative , char * buf , size_t * len)"		3031174	0					
ANR	3031176	CompoundStatement		379:0:11394:13197	3031174	0					
ANR	3031177	Statement	register	380:1:11397:11404	3031174	0	True				
ANR	3031178	IdentifierDeclStatement	char * s = buf ;	380:10:11406:11419	3031174	1	True				
ANR	3031179	IdentifierDecl	* s = buf		3031174	0					
ANR	3031180	IdentifierDeclType	char *		3031174	0					
ANR	3031181	Identifier	s		3031174	1					
ANR	3031182	AssignmentExpression	* s = buf		3031174	2		=			
ANR	3031183	Identifier	buf		3031174	0					
ANR	3031184	Identifier	buf		3031174	1					
ANR	3031185	Statement	register	381:1:11422:11429	3031174	2	True				
ANR	3031186	IdentifierDeclStatement	"char * p , * p_orig ;"	381:10:11431:11447	3031174	3	True				
ANR	3031187	IdentifierDecl	* p		3031174	0					
ANR	3031188	IdentifierDeclType	char *		3031174	0					
ANR	3031189	Identifier	p		3031174	1					
ANR	3031190	IdentifierDecl	* p_orig		3031174	1					
ANR	3031191	IdentifierDeclType	char *		3031174	0					
ANR	3031192	Identifier	p_orig		3031174	1					
ANR	3031193	IdentifierDeclStatement	int decimal_point ;	382:1:11450:11467	3031174	4	True				
ANR	3031194	IdentifierDecl	decimal_point		3031174	0					
ANR	3031195	IdentifierDeclType	int		3031174	0					
ANR	3031196	Identifier	decimal_point		3031174	1					
ANR	3031197	IfStatement	if ( precision >= NDIG - 1 )		3031174	5					
ANR	3031198	Condition	precision >= NDIG - 1	384:5:11475:11495	3031174	0	True				
ANR	3031199	RelationalExpression	precision >= NDIG - 1		3031174	0		>=			
ANR	3031200	Identifier	precision		3031174	0					
ANR	3031201	AdditiveExpression	NDIG - 1		3031174	1		-			
ANR	3031202	Identifier	NDIG		3031174	0					
ANR	3031203	PrimaryExpression	1		3031174	1					
ANR	3031204	CompoundStatement		6:28:103:103	3031174	1					
ANR	3031205	ExpressionStatement	precision = NDIG - 2	385:2:11502:11522	3031174	0	True				
ANR	3031206	AssignmentExpression	precision = NDIG - 2		3031174	0		=			
ANR	3031207	Identifier	precision		3031174	0					
ANR	3031208	AdditiveExpression	NDIG - 2		3031174	1		-			
ANR	3031209	Identifier	NDIG		3031174	0					
ANR	3031210	PrimaryExpression	2		3031174	1					
ANR	3031211	IfStatement	if ( format == 'F' )		3031174	6					
ANR	3031212	Condition	format == 'F'	388:5:11533:11545	3031174	0	True				
ANR	3031213	EqualityExpression	format == 'F'		3031174	0		==			
ANR	3031214	Identifier	format		3031174	0					
ANR	3031215	PrimaryExpression	'F'		3031174	1					
ANR	3031216	CompoundStatement		10:20:153:153	3031174	1					
ANR	3031217	ExpressionStatement	"p_orig = p = php_fcvt ( num , precision , & decimal_point , is_negative )"	389:2:11552:11618	3031174	0	True				
ANR	3031218	AssignmentExpression	"p_orig = p = php_fcvt ( num , precision , & decimal_point , is_negative )"		3031174	0		=			
ANR	3031219	Identifier	p_orig		3031174	0					
ANR	3031220	AssignmentExpression	"p = php_fcvt ( num , precision , & decimal_point , is_negative )"		3031174	1		=			
ANR	3031221	Identifier	p		3031174	0					
ANR	3031222	CallExpression	"php_fcvt ( num , precision , & decimal_point , is_negative )"		3031174	1					
ANR	3031223	Callee	php_fcvt		3031174	0					
ANR	3031224	Identifier	php_fcvt		3031174	0					
ANR	3031225	ArgumentList	num		3031174	1					
ANR	3031226	Argument	num		3031174	0					
ANR	3031227	Identifier	num		3031174	0					
ANR	3031228	Argument	precision		3031174	1					
ANR	3031229	Identifier	precision		3031174	0					
ANR	3031230	Argument	& decimal_point		3031174	2					
ANR	3031231	UnaryOperationExpression	& decimal_point		3031174	0					
ANR	3031232	UnaryOperator	&		3031174	0					
ANR	3031233	Identifier	decimal_point		3031174	1					
ANR	3031234	Argument	is_negative		3031174	3					
ANR	3031235	Identifier	is_negative		3031174	0					
ANR	3031236	ElseStatement	else		3031174	0					
ANR	3031237	CompoundStatement		12:8:233:233	3031174	0					
ANR	3031238	ExpressionStatement	"p_orig = p = php_ecvt ( num , precision + 1 , & decimal_point , is_negative )"	391:2:11664:11734	3031174	0	True				
ANR	3031239	AssignmentExpression	"p_orig = p = php_ecvt ( num , precision + 1 , & decimal_point , is_negative )"		3031174	0		=			
ANR	3031240	Identifier	p_orig		3031174	0					
ANR	3031241	AssignmentExpression	"p = php_ecvt ( num , precision + 1 , & decimal_point , is_negative )"		3031174	1		=			
ANR	3031242	Identifier	p		3031174	0					
ANR	3031243	CallExpression	"php_ecvt ( num , precision + 1 , & decimal_point , is_negative )"		3031174	1					
ANR	3031244	Callee	php_ecvt		3031174	0					
ANR	3031245	Identifier	php_ecvt		3031174	0					
ANR	3031246	ArgumentList	num		3031174	1					
ANR	3031247	Argument	num		3031174	0					
ANR	3031248	Identifier	num		3031174	0					
ANR	3031249	Argument	precision + 1		3031174	1					
ANR	3031250	AdditiveExpression	precision + 1		3031174	0		+			
ANR	3031251	Identifier	precision		3031174	0					
ANR	3031252	PrimaryExpression	1		3031174	1					
ANR	3031253	Argument	& decimal_point		3031174	2					
ANR	3031254	UnaryOperationExpression	& decimal_point		3031174	0					
ANR	3031255	UnaryOperator	&		3031174	0					
ANR	3031256	Identifier	decimal_point		3031174	1					
ANR	3031257	Argument	is_negative		3031174	3					
ANR	3031258	Identifier	is_negative		3031174	0					
ANR	3031259	IfStatement	if ( isalpha ( ( int ) * p ) )		3031174	7					
ANR	3031260	Condition	isalpha ( ( int ) * p )	397:5:11785:11800	3031174	0	True				
ANR	3031261	CallExpression	isalpha ( ( int ) * p )		3031174	0					
ANR	3031262	Callee	isalpha		3031174	0					
ANR	3031263	Identifier	isalpha		3031174	0					
ANR	3031264	ArgumentList	( int ) * p		3031174	1					
ANR	3031265	Argument	( int ) * p		3031174	0					
ANR	3031266	CastExpression	( int ) * p		3031174	0					
ANR	3031267	CastTarget	int		3031174	0					
ANR	3031268	UnaryOperationExpression	* p		3031174	1					
ANR	3031269	UnaryOperator	*		3031174	0					
ANR	3031270	Identifier	p		3031174	1					
ANR	3031271	CompoundStatement		19:23:408:408	3031174	1					
ANR	3031272	ExpressionStatement	* len = strlen ( p )	398:2:11807:11823	3031174	0	True				
ANR	3031273	AssignmentExpression	* len = strlen ( p )		3031174	0		=			
ANR	3031274	UnaryOperationExpression	* len		3031174	0					
ANR	3031275	UnaryOperator	*		3031174	0					
ANR	3031276	Identifier	len		3031174	1					
ANR	3031277	CallExpression	strlen ( p )		3031174	1					
ANR	3031278	Callee	strlen		3031174	0					
ANR	3031279	Identifier	strlen		3031174	0					
ANR	3031280	ArgumentList	p		3031174	1					
ANR	3031281	Argument	p		3031174	0					
ANR	3031282	Identifier	p		3031174	0					
ANR	3031283	ExpressionStatement	"memcpy ( buf , p , * len + 1 )"	399:2:11827:11851	3031174	1	True				
ANR	3031284	CallExpression	"memcpy ( buf , p , * len + 1 )"		3031174	0					
ANR	3031285	Callee	memcpy		3031174	0					
ANR	3031286	Identifier	memcpy		3031174	0					
ANR	3031287	ArgumentList	buf		3031174	1					
ANR	3031288	Argument	buf		3031174	0					
ANR	3031289	Identifier	buf		3031174	0					
ANR	3031290	Argument	p		3031174	1					
ANR	3031291	Identifier	p		3031174	0					
ANR	3031292	Argument	* len + 1		3031174	2					
ANR	3031293	AdditiveExpression	* len + 1		3031174	0		+			
ANR	3031294	UnaryOperationExpression	* len		3031174	0					
ANR	3031295	UnaryOperator	*		3031174	0					
ANR	3031296	Identifier	len		3031174	1					
ANR	3031297	PrimaryExpression	1		3031174	1					
ANR	3031298	ExpressionStatement	* is_negative = FALSE	400:2:11855:11875	3031174	2	True				
ANR	3031299	AssignmentExpression	* is_negative = FALSE		3031174	0		=			
ANR	3031300	UnaryOperationExpression	* is_negative		3031174	0					
ANR	3031301	UnaryOperator	*		3031174	0					
ANR	3031302	Identifier	is_negative		3031174	1					
ANR	3031303	Identifier	FALSE		3031174	1					
ANR	3031304	ExpressionStatement	free ( p_orig )	401:2:11879:11891	3031174	3	True				
ANR	3031305	CallExpression	free ( p_orig )		3031174	0					
ANR	3031306	Callee	free		3031174	0					
ANR	3031307	Identifier	free		3031174	0					
ANR	3031308	ArgumentList	p_orig		3031174	1					
ANR	3031309	Argument	p_orig		3031174	0					
ANR	3031310	Identifier	p_orig		3031174	0					
ANR	3031311	ReturnStatement	return ( buf ) ;	402:2:11895:11907	3031174	4	True				
ANR	3031312	Identifier	buf		3031174	0					
ANR	3031313	IfStatement	if ( format == 'F' )		3031174	8					
ANR	3031314	Condition	format == 'F'	404:5:11917:11929	3031174	0	True				
ANR	3031315	EqualityExpression	format == 'F'		3031174	0		==			
ANR	3031316	Identifier	format		3031174	0					
ANR	3031317	PrimaryExpression	'F'		3031174	1					
ANR	3031318	CompoundStatement		26:20:537:537	3031174	1					
ANR	3031319	IfStatement	if ( decimal_point <= 0 )		3031174	0					
ANR	3031320	Condition	decimal_point <= 0	405:6:11940:11957	3031174	0	True				
ANR	3031321	RelationalExpression	decimal_point <= 0		3031174	0		<=			
ANR	3031322	Identifier	decimal_point		3031174	0					
ANR	3031323	PrimaryExpression	0		3031174	1					
ANR	3031324	CompoundStatement		27:26:565:565	3031174	1					
ANR	3031325	IfStatement	if ( num != 0 || precision > 0 )		3031174	0					
ANR	3031326	Condition	num != 0 || precision > 0	406:7:11969:11993	3031174	0	True				
ANR	3031327	OrExpression	num != 0 || precision > 0		3031174	0		||			
ANR	3031328	EqualityExpression	num != 0		3031174	0		!=			
ANR	3031329	Identifier	num		3031174	0					
ANR	3031330	PrimaryExpression	0		3031174	1					
ANR	3031331	RelationalExpression	precision > 0		3031174	1		>			
ANR	3031332	Identifier	precision		3031174	0					
ANR	3031333	PrimaryExpression	0		3031174	1					
ANR	3031334	CompoundStatement		28:34:601:601	3031174	1					
ANR	3031335	ExpressionStatement	* s ++ = '0'	407:4:12002:12012	3031174	0	True				
ANR	3031336	AssignmentExpression	* s ++ = '0'		3031174	0		=			
ANR	3031337	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031338	UnaryOperator	*		3031174	0					
ANR	3031339	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031340	Identifier	s		3031174	0					
ANR	3031341	IncDec	++		3031174	1					
ANR	3031342	PrimaryExpression	'0'		3031174	1					
ANR	3031343	IfStatement	if ( precision > 0 )		3031174	1					
ANR	3031344	Condition	precision > 0	408:8:12022:12034	3031174	0	True				
ANR	3031345	RelationalExpression	precision > 0		3031174	0		>			
ANR	3031346	Identifier	precision		3031174	0					
ANR	3031347	PrimaryExpression	0		3031174	1					
ANR	3031348	CompoundStatement		30:23:642:642	3031174	1					
ANR	3031349	ExpressionStatement	* s ++ = dec_point	409:5:12044:12060	3031174	0	True				
ANR	3031350	AssignmentExpression	* s ++ = dec_point		3031174	0		=			
ANR	3031351	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031352	UnaryOperator	*		3031174	0					
ANR	3031353	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031354	Identifier	s		3031174	0					
ANR	3031355	IncDec	++		3031174	1					
ANR	3031356	Identifier	dec_point		3031174	1					
ANR	3031357	WhileStatement	while ( decimal_point ++ < 0 )		3031174	1					
ANR	3031358	Condition	decimal_point ++ < 0	410:12:12074:12092	3031174	0	True				
ANR	3031359	RelationalExpression	decimal_point ++ < 0		3031174	0		<			
ANR	3031360	PostIncDecOperationExpression	decimal_point ++		3031174	0					
ANR	3031361	Identifier	decimal_point		3031174	0					
ANR	3031362	IncDec	++		3031174	1					
ANR	3031363	PrimaryExpression	0		3031174	1					
ANR	3031364	CompoundStatement		32:33:700:700	3031174	1					
ANR	3031365	ExpressionStatement	* s ++ = '0'	411:6:12103:12113	3031174	0	True				
ANR	3031366	AssignmentExpression	* s ++ = '0'		3031174	0		=			
ANR	3031367	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031368	UnaryOperator	*		3031174	0					
ANR	3031369	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031370	Identifier	s		3031174	0					
ANR	3031371	IncDec	++		3031174	1					
ANR	3031372	PrimaryExpression	'0'		3031174	1					
ANR	3031373	ElseStatement	else		3031174	0					
ANR	3031374	IfStatement	if ( add_dp )		3031174	0					
ANR	3031375	Condition	add_dp	413:15:12137:12142	3031174	0	True				
ANR	3031376	Identifier	add_dp		3031174	0					
ANR	3031377	CompoundStatement		35:23:750:750	3031174	1					
ANR	3031378	ExpressionStatement	* s ++ = dec_point	414:5:12152:12168	3031174	0	True				
ANR	3031379	AssignmentExpression	* s ++ = dec_point		3031174	0		=			
ANR	3031380	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031381	UnaryOperator	*		3031174	0					
ANR	3031382	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031383	Identifier	s		3031174	0					
ANR	3031384	IncDec	++		3031174	1					
ANR	3031385	Identifier	dec_point		3031174	1					
ANR	3031386	ElseStatement	else		3031174	0					
ANR	3031387	CompoundStatement		40:3:800:863	3031174	0					
ANR	3031388	IdentifierDeclStatement	int addz = decimal_point >= NDIG ? decimal_point - NDIG + 1 : 0 ;	418:3:12195:12258	3031174	0	True				
ANR	3031389	IdentifierDecl	addz = decimal_point >= NDIG ? decimal_point - NDIG + 1 : 0		3031174	0					
ANR	3031390	IdentifierDeclType	int		3031174	0					
ANR	3031391	Identifier	addz		3031174	1					
ANR	3031392	AssignmentExpression	addz = decimal_point >= NDIG ? decimal_point - NDIG + 1 : 0		3031174	2		=			
ANR	3031393	Identifier	addz		3031174	0					
ANR	3031394	ConditionalExpression	decimal_point >= NDIG ? decimal_point - NDIG + 1 : 0		3031174	1					
ANR	3031395	Condition	decimal_point >= NDIG		3031174	0					
ANR	3031396	RelationalExpression	decimal_point >= NDIG		3031174	0		>=			
ANR	3031397	Identifier	decimal_point		3031174	0					
ANR	3031398	Identifier	NDIG		3031174	1					
ANR	3031399	AdditiveExpression	decimal_point - NDIG + 1		3031174	1		-			
ANR	3031400	Identifier	decimal_point		3031174	0					
ANR	3031401	AdditiveExpression	NDIG + 1		3031174	1		+			
ANR	3031402	Identifier	NDIG		3031174	0					
ANR	3031403	PrimaryExpression	1		3031174	1					
ANR	3031404	PrimaryExpression	0		3031174	2					
ANR	3031405	ExpressionStatement	decimal_point -= addz	419:3:12263:12284	3031174	1	True				
ANR	3031406	AssignmentExpression	decimal_point -= addz		3031174	0		-=			
ANR	3031407	Identifier	decimal_point		3031174	0					
ANR	3031408	Identifier	addz		3031174	1					
ANR	3031409	WhileStatement	while ( decimal_point -- > 0 )		3031174	2					
ANR	3031410	Condition	decimal_point -- > 0	420:10:12296:12314	3031174	0	True				
ANR	3031411	RelationalExpression	decimal_point -- > 0		3031174	0		>			
ANR	3031412	PostIncDecOperationExpression	decimal_point --		3031174	0					
ANR	3031413	Identifier	decimal_point		3031174	0					
ANR	3031414	IncDec	--		3031174	1					
ANR	3031415	PrimaryExpression	0		3031174	1					
ANR	3031416	CompoundStatement		42:31:922:922	3031174	1					
ANR	3031417	ExpressionStatement	* s ++ = * p ++	421:4:12323:12334	3031174	0	True				
ANR	3031418	AssignmentExpression	* s ++ = * p ++		3031174	0		=			
ANR	3031419	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031420	UnaryOperator	*		3031174	0					
ANR	3031421	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031422	Identifier	s		3031174	0					
ANR	3031423	IncDec	++		3031174	1					
ANR	3031424	UnaryOperationExpression	* p ++		3031174	1					
ANR	3031425	UnaryOperator	*		3031174	0					
ANR	3031426	PostIncDecOperationExpression	p ++		3031174	1					
ANR	3031427	Identifier	p		3031174	0					
ANR	3031428	IncDec	++		3031174	1					
ANR	3031429	WhileStatement	while ( addz -- > 0 )		3031174	3					
ANR	3031430	Condition	addz -- > 0	423:10:12351:12360	3031174	0	True				
ANR	3031431	RelationalExpression	addz -- > 0		3031174	0		>			
ANR	3031432	PostIncDecOperationExpression	addz --		3031174	0					
ANR	3031433	Identifier	addz		3031174	0					
ANR	3031434	IncDec	--		3031174	1					
ANR	3031435	PrimaryExpression	0		3031174	1					
ANR	3031436	CompoundStatement		45:22:968:968	3031174	1					
ANR	3031437	ExpressionStatement	* s ++ = '0'	424:4:12369:12379	3031174	0	True				
ANR	3031438	AssignmentExpression	* s ++ = '0'		3031174	0		=			
ANR	3031439	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031440	UnaryOperator	*		3031174	0					
ANR	3031441	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031442	Identifier	s		3031174	0					
ANR	3031443	IncDec	++		3031174	1					
ANR	3031444	PrimaryExpression	'0'		3031174	1					
ANR	3031445	IfStatement	if ( precision > 0 || add_dp )		3031174	4					
ANR	3031446	Condition	precision > 0 || add_dp	426:7:12393:12415	3031174	0	True				
ANR	3031447	OrExpression	precision > 0 || add_dp		3031174	0		||			
ANR	3031448	RelationalExpression	precision > 0		3031174	0		>			
ANR	3031449	Identifier	precision		3031174	0					
ANR	3031450	PrimaryExpression	0		3031174	1					
ANR	3031451	Identifier	add_dp		3031174	1					
ANR	3031452	CompoundStatement		48:32:1023:1023	3031174	1					
ANR	3031453	ExpressionStatement	* s ++ = dec_point	427:4:12424:12440	3031174	0	True				
ANR	3031454	AssignmentExpression	* s ++ = dec_point		3031174	0		=			
ANR	3031455	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031456	UnaryOperator	*		3031174	0					
ANR	3031457	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031458	Identifier	s		3031174	0					
ANR	3031459	IncDec	++		3031174	1					
ANR	3031460	Identifier	dec_point		3031174	1					
ANR	3031461	ElseStatement	else		3031174	0					
ANR	3031462	CompoundStatement		52:8:1064:1064	3031174	0					
ANR	3031463	ExpressionStatement	* s ++ = * p ++	431:2:12463:12474	3031174	0	True				
ANR	3031464	AssignmentExpression	* s ++ = * p ++		3031174	0		=			
ANR	3031465	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031466	UnaryOperator	*		3031174	0					
ANR	3031467	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031468	Identifier	s		3031174	0					
ANR	3031469	IncDec	++		3031174	1					
ANR	3031470	UnaryOperationExpression	* p ++		3031174	1					
ANR	3031471	UnaryOperator	*		3031174	0					
ANR	3031472	PostIncDecOperationExpression	p ++		3031174	1					
ANR	3031473	Identifier	p		3031174	0					
ANR	3031474	IncDec	++		3031174	1					
ANR	3031475	IfStatement	if ( precision > 0 || add_dp )		3031174	1					
ANR	3031476	Condition	precision > 0 || add_dp	432:6:12482:12504	3031174	0	True				
ANR	3031477	OrExpression	precision > 0 || add_dp		3031174	0		||			
ANR	3031478	RelationalExpression	precision > 0		3031174	0		>			
ANR	3031479	Identifier	precision		3031174	0					
ANR	3031480	PrimaryExpression	0		3031174	1					
ANR	3031481	Identifier	add_dp		3031174	1					
ANR	3031482	CompoundStatement		54:31:1112:1112	3031174	1					
ANR	3031483	ExpressionStatement	* s ++ = '.'	433:3:12512:12522	3031174	0	True				
ANR	3031484	AssignmentExpression	* s ++ = '.'		3031174	0		=			
ANR	3031485	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031486	UnaryOperator	*		3031174	0					
ANR	3031487	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031488	Identifier	s		3031174	0					
ANR	3031489	IncDec	++		3031174	1					
ANR	3031490	PrimaryExpression	'.'		3031174	1					
ANR	3031491	WhileStatement	while ( * p )		3031174	9					
ANR	3031492	Condition	* p	440:8:12595:12596	3031174	0	True				
ANR	3031493	UnaryOperationExpression	* p		3031174	0					
ANR	3031494	UnaryOperator	*		3031174	0					
ANR	3031495	Identifier	p		3031174	1					
ANR	3031496	CompoundStatement		62:12:1204:1204	3031174	1					
ANR	3031497	ExpressionStatement	* s ++ = * p ++	441:2:12603:12614	3031174	0	True				
ANR	3031498	AssignmentExpression	* s ++ = * p ++		3031174	0		=			
ANR	3031499	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031500	UnaryOperator	*		3031174	0					
ANR	3031501	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031502	Identifier	s		3031174	0					
ANR	3031503	IncDec	++		3031174	1					
ANR	3031504	UnaryOperationExpression	* p ++		3031174	1					
ANR	3031505	UnaryOperator	*		3031174	0					
ANR	3031506	PostIncDecOperationExpression	p ++		3031174	1					
ANR	3031507	Identifier	p		3031174	0					
ANR	3031508	IncDec	++		3031174	1					
ANR	3031509	IfStatement	if ( format != 'F' )		3031174	10					
ANR	3031510	Condition	format != 'F'	444:5:12625:12637	3031174	0	True				
ANR	3031511	EqualityExpression	format != 'F'		3031174	0		!=			
ANR	3031512	Identifier	format		3031174	0					
ANR	3031513	PrimaryExpression	'F'		3031174	1					
ANR	3031514	CompoundStatement		69:2:1326:1355	3031174	1					
ANR	3031515	IdentifierDeclStatement	char temp [ EXPONENT_LENGTH ] ;	445:2:12644:12670	3031174	0	True				
ANR	3031516	IdentifierDecl	temp [ EXPONENT_LENGTH ]		3031174	0					
ANR	3031517	IdentifierDeclType	char [ EXPONENT_LENGTH ]		3031174	0					
ANR	3031518	Identifier	temp		3031174	1					
ANR	3031519	Identifier	EXPONENT_LENGTH		3031174	2					
ANR	3031520	IdentifierDeclStatement	size_t t_len ;	446:2:12705:12717	3031174	1	True				
ANR	3031521	IdentifierDecl	t_len		3031174	0					
ANR	3031522	IdentifierDeclType	size_t		3031174	0					
ANR	3031523	Identifier	t_len		3031174	1					
ANR	3031524	IdentifierDeclStatement	bool_int exponent_is_negative ;	447:2:12721:12750	3031174	2	True				
ANR	3031525	IdentifierDecl	exponent_is_negative		3031174	0					
ANR	3031526	IdentifierDeclType	bool_int		3031174	0					
ANR	3031527	Identifier	exponent_is_negative		3031174	1					
ANR	3031528	ExpressionStatement	* s ++ = format	449:2:12755:12768	3031174	3	True				
ANR	3031529	AssignmentExpression	* s ++ = format		3031174	0		=			
ANR	3031530	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031531	UnaryOperator	*		3031174	0					
ANR	3031532	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031533	Identifier	s		3031174	0					
ANR	3031534	IncDec	++		3031174	1					
ANR	3031535	Identifier	format		3031174	1					
ANR	3031536	ExpressionStatement	decimal_point --	450:2:12794:12809	3031174	4	True				
ANR	3031537	PostIncDecOperationExpression	decimal_point --		3031174	0					
ANR	3031538	Identifier	decimal_point		3031174	0					
ANR	3031539	IncDec	--		3031174	1					
ANR	3031540	IfStatement	if ( decimal_point != 0 )		3031174	5					
ANR	3031541	Condition	decimal_point != 0	451:6:12817:12834	3031174	0	True				
ANR	3031542	EqualityExpression	decimal_point != 0		3031174	0		!=			
ANR	3031543	Identifier	decimal_point		3031174	0					
ANR	3031544	PrimaryExpression	0		3031174	1					
ANR	3031545	CompoundStatement		73:26:1442:1442	3031174	1					
ANR	3031546	ExpressionStatement	"p = ap_php_conv_10 ( ( wide_int ) decimal_point , FALSE , & exponent_is_negative , & temp [ EXPONENT_LENGTH ] , & t_len )"	452:3:12842:12948	3031174	0	True				
ANR	3031547	AssignmentExpression	"p = ap_php_conv_10 ( ( wide_int ) decimal_point , FALSE , & exponent_is_negative , & temp [ EXPONENT_LENGTH ] , & t_len )"		3031174	0		=			
ANR	3031548	Identifier	p		3031174	0					
ANR	3031549	CallExpression	"ap_php_conv_10 ( ( wide_int ) decimal_point , FALSE , & exponent_is_negative , & temp [ EXPONENT_LENGTH ] , & t_len )"		3031174	1					
ANR	3031550	Callee	ap_php_conv_10		3031174	0					
ANR	3031551	Identifier	ap_php_conv_10		3031174	0					
ANR	3031552	ArgumentList	( wide_int ) decimal_point		3031174	1					
ANR	3031553	Argument	( wide_int ) decimal_point		3031174	0					
ANR	3031554	CastExpression	( wide_int ) decimal_point		3031174	0					
ANR	3031555	CastTarget	wide_int		3031174	0					
ANR	3031556	Identifier	decimal_point		3031174	1					
ANR	3031557	Argument	FALSE		3031174	1					
ANR	3031558	Identifier	FALSE		3031174	0					
ANR	3031559	Argument	& exponent_is_negative		3031174	2					
ANR	3031560	UnaryOperationExpression	& exponent_is_negative		3031174	0					
ANR	3031561	UnaryOperator	&		3031174	0					
ANR	3031562	Identifier	exponent_is_negative		3031174	1					
ANR	3031563	Argument	& temp [ EXPONENT_LENGTH ]		3031174	3					
ANR	3031564	UnaryOperationExpression	& temp [ EXPONENT_LENGTH ]		3031174	0					
ANR	3031565	UnaryOperator	&		3031174	0					
ANR	3031566	ArrayIndexing	temp [ EXPONENT_LENGTH ]		3031174	1					
ANR	3031567	Identifier	temp		3031174	0					
ANR	3031568	Identifier	EXPONENT_LENGTH		3031174	1					
ANR	3031569	Argument	& t_len		3031174	4					
ANR	3031570	UnaryOperationExpression	& t_len		3031174	0					
ANR	3031571	UnaryOperator	&		3031174	0					
ANR	3031572	Identifier	t_len		3031174	1					
ANR	3031573	ExpressionStatement	* s ++ = exponent_is_negative ? '-' : '+'	453:3:12953:12992	3031174	1	True				
ANR	3031574	AssignmentExpression	* s ++ = exponent_is_negative ? '-' : '+'		3031174	0		=			
ANR	3031575	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031576	UnaryOperator	*		3031174	0					
ANR	3031577	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031578	Identifier	s		3031174	0					
ANR	3031579	IncDec	++		3031174	1					
ANR	3031580	ConditionalExpression	exponent_is_negative ? '-' : '+'		3031174	1					
ANR	3031581	Condition	exponent_is_negative		3031174	0					
ANR	3031582	Identifier	exponent_is_negative		3031174	0					
ANR	3031583	PrimaryExpression	'-'		3031174	1					
ANR	3031584	PrimaryExpression	'+'		3031174	2					
ANR	3031585	WhileStatement	while ( t_len -- )		3031174	2					
ANR	3031586	Condition	t_len --	458:10:13069:13075	3031174	0	True				
ANR	3031587	PostIncDecOperationExpression	t_len --		3031174	0					
ANR	3031588	Identifier	t_len		3031174	0					
ANR	3031589	IncDec	--		3031174	1					
ANR	3031590	CompoundStatement		80:19:1683:1683	3031174	1					
ANR	3031591	ExpressionStatement	* s ++ = * p ++	459:4:13084:13095	3031174	0	True				
ANR	3031592	AssignmentExpression	* s ++ = * p ++		3031174	0		=			
ANR	3031593	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031594	UnaryOperator	*		3031174	0					
ANR	3031595	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031596	Identifier	s		3031174	0					
ANR	3031597	IncDec	++		3031174	1					
ANR	3031598	UnaryOperationExpression	* p ++		3031174	1					
ANR	3031599	UnaryOperator	*		3031174	0					
ANR	3031600	PostIncDecOperationExpression	p ++		3031174	1					
ANR	3031601	Identifier	p		3031174	0					
ANR	3031602	IncDec	++		3031174	1					
ANR	3031603	ElseStatement	else		3031174	0					
ANR	3031604	CompoundStatement		83:9:1716:1716	3031174	0					
ANR	3031605	ExpressionStatement	* s ++ = '+'	462:3:13116:13126	3031174	0	True				
ANR	3031606	AssignmentExpression	* s ++ = '+'		3031174	0		=			
ANR	3031607	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031608	UnaryOperator	*		3031174	0					
ANR	3031609	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031610	Identifier	s		3031174	0					
ANR	3031611	IncDec	++		3031174	1					
ANR	3031612	PrimaryExpression	'+'		3031174	1					
ANR	3031613	ExpressionStatement	* s ++ = '0'	463:3:13131:13141	3031174	1	True				
ANR	3031614	AssignmentExpression	* s ++ = '0'		3031174	0		=			
ANR	3031615	UnaryOperationExpression	* s ++		3031174	0					
ANR	3031616	UnaryOperator	*		3031174	0					
ANR	3031617	PostIncDecOperationExpression	s ++		3031174	1					
ANR	3031618	Identifier	s		3031174	0					
ANR	3031619	IncDec	++		3031174	1					
ANR	3031620	PrimaryExpression	'0'		3031174	1					
ANR	3031621	ExpressionStatement	* len = s - buf	466:1:13151:13165	3031174	11	True				
ANR	3031622	AssignmentExpression	* len = s - buf		3031174	0		=			
ANR	3031623	UnaryOperationExpression	* len		3031174	0					
ANR	3031624	UnaryOperator	*		3031174	0					
ANR	3031625	Identifier	len		3031174	1					
ANR	3031626	AdditiveExpression	s - buf		3031174	1		-			
ANR	3031627	Identifier	s		3031174	0					
ANR	3031628	Identifier	buf		3031174	1					
ANR	3031629	ExpressionStatement	free ( p_orig )	467:1:13168:13180	3031174	12	True				
ANR	3031630	CallExpression	free ( p_orig )		3031174	0					
ANR	3031631	Callee	free		3031174	0					
ANR	3031632	Identifier	free		3031174	0					
ANR	3031633	ArgumentList	p_orig		3031174	1					
ANR	3031634	Argument	p_orig		3031174	0					
ANR	3031635	Identifier	p_orig		3031174	0					
ANR	3031636	ReturnStatement	return ( buf ) ;	468:1:13183:13195	3031174	13	True				
ANR	3031637	Identifier	buf		3031174	0					
ANR	3031638	ReturnType	PHPAPI char *		3031174	1					
ANR	3031639	Identifier	php_conv_fp		3031174	2					
ANR	3031640	ParameterList	"register char format , register double num , boolean_e add_dp , int precision , char dec_point , bool_int * is_negative , char * buf , size_t * len"		3031174	3					
ANR	3031641	Parameter	register char format	377:26:11251:11270	3031174	0	True				
ANR	3031642	ParameterType	register char		3031174	0					
ANR	3031643	Identifier	format		3031174	1					
ANR	3031644	Parameter	register double num	377:48:11273:11291	3031174	1	True				
ANR	3031645	ParameterType	register double		3031174	0					
ANR	3031646	Identifier	num		3031174	1					
ANR	3031647	Parameter	boolean_e add_dp	378:3:11297:11312	3031174	2	True				
ANR	3031648	ParameterType	boolean_e		3031174	0					
ANR	3031649	Identifier	add_dp		3031174	1					
ANR	3031650	Parameter	int precision	378:21:11315:11327	3031174	3	True				
ANR	3031651	ParameterType	int		3031174	0					
ANR	3031652	Identifier	precision		3031174	1					
ANR	3031653	Parameter	char dec_point	378:36:11330:11343	3031174	4	True				
ANR	3031654	ParameterType	char		3031174	0					
ANR	3031655	Identifier	dec_point		3031174	1					
ANR	3031656	Parameter	bool_int * is_negative	378:52:11346:11367	3031174	5	True				
ANR	3031657	ParameterType	bool_int *		3031174	0					
ANR	3031658	Identifier	is_negative		3031174	1					
ANR	3031659	Parameter	char * buf	378:76:11370:11378	3031174	6	True				
ANR	3031660	ParameterType	char *		3031174	0					
ANR	3031661	Identifier	buf		3031174	1					
ANR	3031662	Parameter	size_t * len	378:87:11381:11391	3031174	7	True				
ANR	3031663	ParameterType	size_t *		3031174	0					
ANR	3031664	Identifier	len		3031174	1					
ANR	3031665	CFGEntryNode	ENTRY		3031174		True				
ANR	3031666	CFGExitNode	EXIT		3031174		True				
ANR	3031667	Symbol	* s ++		3031174						
ANR	3031668	Symbol	isalpha		3031174						
ANR	3031669	Symbol	& exponent_is_negative		3031174						
ANR	3031670	Symbol	decimal_point		3031174						
ANR	3031671	Symbol	t_len		3031174						
ANR	3031672	Symbol	exponent_is_negative		3031174						
ANR	3031673	Symbol	dec_point		3031174						
ANR	3031674	Symbol	num		3031174						
ANR	3031675	Symbol	precision		3031174						
ANR	3031676	Symbol	& t_len		3031174						
ANR	3031677	Symbol	strlen		3031174						
ANR	3031678	Symbol	len		3031174						
ANR	3031679	Symbol	addz		3031174						
ANR	3031680	Symbol	php_ecvt		3031174						
ANR	3031681	Symbol	ap_php_conv_10		3031174						
ANR	3031682	Symbol	& decimal_point		3031174						
ANR	3031683	Symbol	EXPONENT_LENGTH		3031174						
ANR	3031684	Symbol	add_dp		3031174						
ANR	3031685	Symbol	temp		3031174						
ANR	3031686	Symbol	* p ++		3031174						
ANR	3031687	Symbol	format		3031174						
ANR	3031688	Symbol	p		3031174						
ANR	3031689	Symbol	NDIG		3031174						
ANR	3031690	Symbol	buf		3031174						
ANR	3031691	Symbol	s		3031174						
ANR	3031692	Symbol	php_fcvt		3031174						
ANR	3031693	Symbol	* p		3031174						
ANR	3031694	Symbol	FALSE		3031174						
ANR	3031695	Symbol	is_negative		3031174						
ANR	3031696	Symbol	p_orig		3031174						
ANR	3031697	Symbol	* len		3031174						
ANR	3031698	Symbol	* is_negative		3031174						
ANR	3031699	Function	ap_php_conv_p2	482:0:13632:14109							
ANR	3031700	FunctionDef	"ap_php_conv_p2 (register u_wide_int num , register int nbits , char format , char * buf_end , register size_t * len)"		3031699	0					
ANR	3031701	CompoundStatement		483:0:13766:14109	3031699	0					
ANR	3031702	Statement	register	484:1:13769:13776	3031699	0	True				
ANR	3031703	IdentifierDeclStatement	int mask = ( 1 << nbits ) - 1 ;	484:10:13778:13805	3031699	1	True				
ANR	3031704	IdentifierDecl	mask = ( 1 << nbits ) - 1		3031699	0					
ANR	3031705	IdentifierDeclType	int		3031699	0					
ANR	3031706	Identifier	mask		3031699	1					
ANR	3031707	AssignmentExpression	mask = ( 1 << nbits ) - 1		3031699	2		=			
ANR	3031708	Identifier	mask		3031699	0					
ANR	3031709	AdditiveExpression	( 1 << nbits ) - 1		3031699	1		-			
ANR	3031710	ShiftExpression	1 << nbits		3031699	0		<<			
ANR	3031711	PrimaryExpression	1		3031699	0					
ANR	3031712	Identifier	nbits		3031699	1					
ANR	3031713	PrimaryExpression	1		3031699	1					
ANR	3031714	Statement	register	485:1:13808:13815	3031699	2	True				
ANR	3031715	IdentifierDeclStatement	char * p = buf_end ;	485:10:13817:13834	3031699	3	True				
ANR	3031716	IdentifierDecl	* p = buf_end		3031699	0					
ANR	3031717	IdentifierDeclType	char *		3031699	0					
ANR	3031718	Identifier	p		3031699	1					
ANR	3031719	AssignmentExpression	* p = buf_end		3031699	2		=			
ANR	3031720	Identifier	buf_end		3031699	0					
ANR	3031721	Identifier	buf_end		3031699	1					
ANR	3031722	Statement	static	486:1:13837:13842	3031699	4	True				
ANR	3031723	IdentifierDeclStatement	"char low_digits [ ] = ""0123456789abcdef"" ;"	486:8:13844:13882	3031699	5	True				
ANR	3031724	IdentifierDecl	"low_digits [ ] = ""0123456789abcdef"""		3031699	0					
ANR	3031725	IdentifierDeclType	char [ ]		3031699	0					
ANR	3031726	Identifier	low_digits		3031699	1					
ANR	3031727	AssignmentExpression	"low_digits [ ] = ""0123456789abcdef"""		3031699	2		=			
ANR	3031728	Identifier	low_digits		3031699	0					
ANR	3031729	PrimaryExpression	"""0123456789abcdef"""		3031699	1					
ANR	3031730	Statement	static	487:1:13885:13890	3031699	6	True				
ANR	3031731	IdentifierDeclStatement	"char upper_digits [ ] = ""0123456789ABCDEF"" ;"	487:8:13892:13932	3031699	7	True				
ANR	3031732	IdentifierDecl	"upper_digits [ ] = ""0123456789ABCDEF"""		3031699	0					
ANR	3031733	IdentifierDeclType	char [ ]		3031699	0					
ANR	3031734	Identifier	upper_digits		3031699	1					
ANR	3031735	AssignmentExpression	"upper_digits [ ] = ""0123456789ABCDEF"""		3031699	2		=			
ANR	3031736	Identifier	upper_digits		3031699	0					
ANR	3031737	PrimaryExpression	"""0123456789ABCDEF"""		3031699	1					
ANR	3031738	Statement	register	488:1:13935:13942	3031699	8	True				
ANR	3031739	IdentifierDeclStatement	char * digits = ( format == 'X' ) ? upper_digits : low_digits ;	488:10:13944:14002	3031699	9	True				
ANR	3031740	IdentifierDecl	* digits = ( format == 'X' ) ? upper_digits : low_digits		3031699	0					
ANR	3031741	IdentifierDeclType	char *		3031699	0					
ANR	3031742	Identifier	digits		3031699	1					
ANR	3031743	AssignmentExpression	* digits = ( format == 'X' ) ? upper_digits : low_digits		3031699	2		=			
ANR	3031744	Identifier	digits		3031699	0					
ANR	3031745	ConditionalExpression	( format == 'X' ) ? upper_digits : low_digits		3031699	1					
ANR	3031746	Condition	format == 'X'		3031699	0					
ANR	3031747	EqualityExpression	format == 'X'		3031699	0		==			
ANR	3031748	Identifier	format		3031699	0					
ANR	3031749	PrimaryExpression	'X'		3031699	1					
ANR	3031750	Identifier	upper_digits		3031699	1					
ANR	3031751	Identifier	low_digits		3031699	2					
ANR	3031752	DoStatement	do		3031699	10					
ANR	3031753	CompoundStatement		8:4:242:242	3031699	0					
ANR	3031754	ExpressionStatement	* -- p = digits [ num & mask ]	491:2:14013:14038	3031699	0	True				
ANR	3031755	AssignmentExpression	* -- p = digits [ num & mask ]		3031699	0		=			
ANR	3031756	UnaryOperationExpression	* -- p		3031699	0					
ANR	3031757	UnaryOperator	*		3031699	0					
ANR	3031758	UnaryExpression	-- p		3031699	1					
ANR	3031759	IncDec	--		3031699	0					
ANR	3031760	Identifier	p		3031699	1					
ANR	3031761	ArrayIndexing	digits [ num & mask ]		3031699	1					
ANR	3031762	Identifier	digits		3031699	0					
ANR	3031763	BitAndExpression	num & mask		3031699	1		&			
ANR	3031764	Identifier	num		3031699	0					
ANR	3031765	Identifier	mask		3031699	1					
ANR	3031766	ExpressionStatement	num >>= nbits	492:2:14042:14055	3031699	1	True				
ANR	3031767	AssignmentExpression	num >>= nbits		3031699	0		>>=			
ANR	3031768	Identifier	num		3031699	0					
ANR	3031769	Identifier	nbits		3031699	1					
ANR	3031770	Condition	num	494:8:14068:14070	3031699	1	True				
ANR	3031771	Identifier	num		3031699	0					
ANR	3031772	ExpressionStatement	* len = buf_end - p	496:1:14076:14094	3031699	11	True				
ANR	3031773	AssignmentExpression	* len = buf_end - p		3031699	0		=			
ANR	3031774	UnaryOperationExpression	* len		3031699	0					
ANR	3031775	UnaryOperator	*		3031699	0					
ANR	3031776	Identifier	len		3031699	1					
ANR	3031777	AdditiveExpression	buf_end - p		3031699	1		-			
ANR	3031778	Identifier	buf_end		3031699	0					
ANR	3031779	Identifier	p		3031699	1					
ANR	3031780	ReturnStatement	return ( p ) ;	497:1:14097:14107	3031699	12	True				
ANR	3031781	Identifier	p		3031699	0					
ANR	3031782	ReturnType	PHPAPI char *		3031699	1					
ANR	3031783	Identifier	ap_php_conv_p2		3031699	2					
ANR	3031784	ParameterList	"register u_wide_int num , register int nbits , char format , char * buf_end , register size_t * len"		3031699	3					
ANR	3031785	Parameter	register u_wide_int num	482:29:13661:13683	3031699	0	True				
ANR	3031786	ParameterType	register u_wide_int		3031699	0					
ANR	3031787	Identifier	num		3031699	1					
ANR	3031788	Parameter	register int nbits	482:54:13686:13703	3031699	1	True				
ANR	3031789	ParameterType	register int		3031699	0					
ANR	3031790	Identifier	nbits		3031699	1					
ANR	3031791	Parameter	char format	482:74:13706:13716	3031699	2	True				
ANR	3031792	ParameterType	char		3031699	0					
ANR	3031793	Identifier	format		3031699	1					
ANR	3031794	Parameter	char * buf_end	482:87:13719:13731	3031699	3	True				
ANR	3031795	ParameterType	char *		3031699	0					
ANR	3031796	Identifier	buf_end		3031699	1					
ANR	3031797	Parameter	register size_t * len	482:102:13734:13753	3031699	4	True				
ANR	3031798	ParameterType	register size_t *		3031699	0					
ANR	3031799	Identifier	len		3031699	1					
ANR	3031800	CFGEntryNode	ENTRY		3031699		True				
ANR	3031801	CFGExitNode	EXIT		3031699		True				
ANR	3031802	Symbol	* mask		3031699						
ANR	3031803	Symbol	* -- p		3031699						
ANR	3031804	Symbol	num		3031699						
ANR	3031805	Symbol	nbits		3031699						
ANR	3031806	Symbol	format		3031699						
ANR	3031807	Symbol	* digits		3031699						
ANR	3031808	Symbol	p		3031699						
ANR	3031809	Symbol	* num		3031699						
ANR	3031810	Symbol	low_digits		3031699						
ANR	3031811	Symbol	upper_digits		3031699						
ANR	3031812	Symbol	len		3031699						
ANR	3031813	Symbol	digits		3031699						
ANR	3031814	Symbol	* p		3031699						
ANR	3031815	Symbol	buf_end		3031699						
ANR	3031816	Symbol	mask		3031699						
ANR	3031817	Symbol	* len		3031699						
ANR	3031818	ClassDef	buf_area	515:0:14435:14529							
ANR	3031819	DeclStmt									
ANR	3031820	Decl							char	char *	buf_end
ANR	3031821	DeclStmt									
ANR	3031822	Decl							char	char *	nextb
ANR	3031823	DeclStmt									
ANR	3031824	Decl							struct buf_area	struct buf_area	buffy
ANR	3031825	Function	format_converter	587:0:16195:30142							
ANR	3031826	FunctionDef	"format_converter (register buffy * odp , const char * fmt , va_list ap)"		3031825	0					
ANR	3031827	CompoundStatement		588:0:16284:30142	3031825	0					
ANR	3031828	IdentifierDeclStatement	char * sp ;	589:1:16287:16295	3031825	0	True				
ANR	3031829	IdentifierDecl	* sp		3031825	0					
ANR	3031830	IdentifierDeclType	char *		3031825	0					
ANR	3031831	Identifier	sp		3031825	1					
ANR	3031832	IdentifierDeclStatement	char * bep ;	590:1:16298:16307	3031825	1	True				
ANR	3031833	IdentifierDecl	* bep		3031825	0					
ANR	3031834	IdentifierDeclType	char *		3031825	0					
ANR	3031835	Identifier	bep		3031825	1					
ANR	3031836	IdentifierDeclStatement	int cc = 0 ;	591:1:16310:16320	3031825	2	True				
ANR	3031837	IdentifierDecl	cc = 0		3031825	0					
ANR	3031838	IdentifierDeclType	int		3031825	0					
ANR	3031839	Identifier	cc		3031825	1					
ANR	3031840	AssignmentExpression	cc = 0		3031825	2		=			
ANR	3031841	Identifier	cc		3031825	0					
ANR	3031842	PrimaryExpression	0		3031825	1					
ANR	3031843	IdentifierDeclStatement	size_t i ;	592:1:16323:16331	3031825	3	True				
ANR	3031844	IdentifierDecl	i		3031825	0					
ANR	3031845	IdentifierDeclType	size_t		3031825	0					
ANR	3031846	Identifier	i		3031825	1					
ANR	3031847	IdentifierDeclStatement	char * s = NULL ;	594:1:16335:16349	3031825	4	True				
ANR	3031848	IdentifierDecl	* s = NULL		3031825	0					
ANR	3031849	IdentifierDeclType	char *		3031825	0					
ANR	3031850	Identifier	s		3031825	1					
ANR	3031851	AssignmentExpression	* s = NULL		3031825	2		=			
ANR	3031852	Identifier	NULL		3031825	0					
ANR	3031853	Identifier	NULL		3031825	1					
ANR	3031854	IdentifierDeclStatement	size_t s_len ;	595:1:16352:16364	3031825	5	True				
ANR	3031855	IdentifierDecl	s_len		3031825	0					
ANR	3031856	IdentifierDeclType	size_t		3031825	0					
ANR	3031857	Identifier	s_len		3031825	1					
ANR	3031858	IdentifierDeclStatement	int free_zcopy ;	596:1:16367:16381	3031825	6	True				
ANR	3031859	IdentifierDecl	free_zcopy		3031825	0					
ANR	3031860	IdentifierDeclType	int		3031825	0					
ANR	3031861	Identifier	free_zcopy		3031825	1					
ANR	3031862	IdentifierDeclStatement	"zval * zvp , zcopy ;"	597:1:16384:16400	3031825	7	True				
ANR	3031863	IdentifierDecl	* zvp		3031825	0					
ANR	3031864	IdentifierDeclType	zval *		3031825	0					
ANR	3031865	Identifier	zvp		3031825	1					
ANR	3031866	IdentifierDecl	zcopy		3031825	1					
ANR	3031867	IdentifierDeclType	zval		3031825	0					
ANR	3031868	Identifier	zcopy		3031825	1					
ANR	3031869	IdentifierDeclStatement	int min_width = 0 ;	599:1:16404:16421	3031825	8	True				
ANR	3031870	IdentifierDecl	min_width = 0		3031825	0					
ANR	3031871	IdentifierDeclType	int		3031825	0					
ANR	3031872	Identifier	min_width		3031825	1					
ANR	3031873	AssignmentExpression	min_width = 0		3031825	2		=			
ANR	3031874	Identifier	min_width		3031825	0					
ANR	3031875	PrimaryExpression	0		3031825	1					
ANR	3031876	IdentifierDeclStatement	int precision = 0 ;	600:1:16424:16441	3031825	9	True				
ANR	3031877	IdentifierDecl	precision = 0		3031825	0					
ANR	3031878	IdentifierDeclType	int		3031825	0					
ANR	3031879	Identifier	precision		3031825	1					
ANR	3031880	AssignmentExpression	precision = 0		3031825	2		=			
ANR	3031881	Identifier	precision		3031825	0					
ANR	3031882	PrimaryExpression	0		3031825	1					
ANR	3031883	ClassDefStatement	"enum { LEFT , RIGHT } adjust ;"	601:1:16444:16474	3031825	10	True				
ANR	3031884	IdentifierDecl	adjust		3031825	0					
ANR	3031885	IdentifierDeclType			3031825	0					
ANR	3031886	Identifier	adjust		3031825	1					
ANR	3031887	IdentifierDeclStatement	char pad_char ;	604:1:16477:16490	3031825	11	True				
ANR	3031888	IdentifierDecl	pad_char		3031825	0					
ANR	3031889	IdentifierDeclType	char		3031825	0					
ANR	3031890	Identifier	pad_char		3031825	1					
ANR	3031891	IdentifierDeclStatement	char prefix_char ;	605:1:16493:16509	3031825	12	True				
ANR	3031892	IdentifierDecl	prefix_char		3031825	0					
ANR	3031893	IdentifierDeclType	char		3031825	0					
ANR	3031894	Identifier	prefix_char		3031825	1					
ANR	3031895	IdentifierDeclStatement	double fp_num ;	607:1:16513:16526	3031825	13	True				
ANR	3031896	IdentifierDecl	fp_num		3031825	0					
ANR	3031897	IdentifierDeclType	double		3031825	0					
ANR	3031898	Identifier	fp_num		3031825	1					
ANR	3031899	IdentifierDeclStatement	wide_int i_num = ( wide_int ) 0 ;	608:1:16529:16558	3031825	14	True				
ANR	3031900	IdentifierDecl	i_num = ( wide_int ) 0		3031825	0					
ANR	3031901	IdentifierDeclType	wide_int		3031825	0					
ANR	3031902	Identifier	i_num		3031825	1					
ANR	3031903	AssignmentExpression	i_num = ( wide_int ) 0		3031825	2		=			
ANR	3031904	Identifier	i_num		3031825	0					
ANR	3031905	CastExpression	( wide_int ) 0		3031825	1					
ANR	3031906	CastTarget	wide_int		3031825	0					
ANR	3031907	PrimaryExpression	0		3031825	1					
ANR	3031908	IdentifierDeclStatement	u_wide_int ui_num ;	609:1:16561:16578	3031825	15	True				
ANR	3031909	IdentifierDecl	ui_num		3031825	0					
ANR	3031910	IdentifierDeclType	u_wide_int		3031825	0					
ANR	3031911	Identifier	ui_num		3031825	1					
ANR	3031912	IdentifierDeclStatement	char num_buf [ NUM_BUF_SIZE ] ;	611:1:16582:16608	3031825	16	True				
ANR	3031913	IdentifierDecl	num_buf [ NUM_BUF_SIZE ]		3031825	0					
ANR	3031914	IdentifierDeclType	char [ NUM_BUF_SIZE ]		3031825	0					
ANR	3031915	Identifier	num_buf		3031825	1					
ANR	3031916	Identifier	NUM_BUF_SIZE		3031825	2					
ANR	3031917	IdentifierDeclStatement	char char_buf [ 2 ] ;	612:1:16611:16627	3031825	17	True				
ANR	3031918	IdentifierDecl	char_buf [ 2 ]		3031825	0					
ANR	3031919	IdentifierDeclType	char [ 2 ]		3031825	0					
ANR	3031920	Identifier	char_buf		3031825	1					
ANR	3031921	PrimaryExpression	2		3031825	2					
ANR	3031922	IdentifierDeclStatement	struct lconv lconv ;	616:1:16702:16720	3031825	18	True				
ANR	3031923	IdentifierDecl	lconv		3031825	0					
ANR	3031924	IdentifierDeclType	struct lconv		3031825	0					
ANR	3031925	Identifier	lconv		3031825	1					
ANR	3031926	IdentifierDeclStatement	length_modifier_e modifier ;	625:1:16801:16827	3031825	19	True				
ANR	3031927	IdentifierDecl	modifier		3031825	0					
ANR	3031928	IdentifierDeclType	length_modifier_e		3031825	0					
ANR	3031929	Identifier	modifier		3031825	1					
ANR	3031930	IdentifierDeclStatement	boolean_e alternate_form ;	626:1:16830:16854	3031825	20	True				
ANR	3031931	IdentifierDecl	alternate_form		3031825	0					
ANR	3031932	IdentifierDeclType	boolean_e		3031825	0					
ANR	3031933	Identifier	alternate_form		3031825	1					
ANR	3031934	IdentifierDeclStatement	boolean_e print_sign ;	627:1:16857:16877	3031825	21	True				
ANR	3031935	IdentifierDecl	print_sign		3031825	0					
ANR	3031936	IdentifierDeclType	boolean_e		3031825	0					
ANR	3031937	Identifier	print_sign		3031825	1					
ANR	3031938	IdentifierDeclStatement	boolean_e print_blank ;	628:1:16880:16901	3031825	22	True				
ANR	3031939	IdentifierDecl	print_blank		3031825	0					
ANR	3031940	IdentifierDeclType	boolean_e		3031825	0					
ANR	3031941	Identifier	print_blank		3031825	1					
ANR	3031942	IdentifierDeclStatement	boolean_e adjust_precision ;	629:1:16904:16930	3031825	23	True				
ANR	3031943	IdentifierDecl	adjust_precision		3031825	0					
ANR	3031944	IdentifierDeclType	boolean_e		3031825	0					
ANR	3031945	Identifier	adjust_precision		3031825	1					
ANR	3031946	IdentifierDeclStatement	boolean_e adjust_width ;	630:1:16933:16955	3031825	24	True				
ANR	3031947	IdentifierDecl	adjust_width		3031825	0					
ANR	3031948	IdentifierDeclType	boolean_e		3031825	0					
ANR	3031949	Identifier	adjust_width		3031825	1					
ANR	3031950	IdentifierDeclStatement	bool_int is_negative ;	631:1:16958:16978	3031825	25	True				
ANR	3031951	IdentifierDecl	is_negative		3031825	0					
ANR	3031952	IdentifierDeclType	bool_int		3031825	0					
ANR	3031953	Identifier	is_negative		3031825	1					
ANR	3031954	ExpressionStatement	sp = odp -> nextb	633:1:16982:16997	3031825	26	True				
ANR	3031955	AssignmentExpression	sp = odp -> nextb		3031825	0		=			
ANR	3031956	Identifier	sp		3031825	0					
ANR	3031957	PtrMemberAccess	odp -> nextb		3031825	1					
ANR	3031958	Identifier	odp		3031825	0					
ANR	3031959	Identifier	nextb		3031825	1					
ANR	3031960	ExpressionStatement	bep = odp -> buf_end	634:1:17000:17018	3031825	27	True				
ANR	3031961	AssignmentExpression	bep = odp -> buf_end		3031825	0		=			
ANR	3031962	Identifier	bep		3031825	0					
ANR	3031963	PtrMemberAccess	odp -> buf_end		3031825	1					
ANR	3031964	Identifier	odp		3031825	0					
ANR	3031965	Identifier	buf_end		3031825	1					
ANR	3031966	WhileStatement	while ( * fmt )		3031825	28					
ANR	3031967	Condition	* fmt	636:8:17029:17032	3031825	0	True				
ANR	3031968	UnaryOperationExpression	* fmt		3031825	0					
ANR	3031969	UnaryOperator	*		3031825	0					
ANR	3031970	Identifier	fmt		3031825	1					
ANR	3031971	CompoundStatement		49:14:750:750	3031825	1					
ANR	3031972	IfStatement	if ( * fmt != '%' )		3031825	0					
ANR	3031973	Condition	* fmt != '%'	637:6:17043:17053	3031825	0	True				
ANR	3031974	EqualityExpression	* fmt != '%'		3031825	0		!=			
ANR	3031975	UnaryOperationExpression	* fmt		3031825	0					
ANR	3031976	UnaryOperator	*		3031825	0					
ANR	3031977	Identifier	fmt		3031825	1					
ANR	3031978	PrimaryExpression	'%'		3031825	1					
ANR	3031979	CompoundStatement		50:19:771:771	3031825	1					
ANR	3031980	ExpressionStatement	"INS_CHAR ( * fmt , sp , bep , cc )"	638:3:17061:17088	3031825	0	True				
ANR	3031981	CallExpression	"INS_CHAR ( * fmt , sp , bep , cc )"		3031825	0					
ANR	3031982	Callee	INS_CHAR		3031825	0					
ANR	3031983	Identifier	INS_CHAR		3031825	0					
ANR	3031984	ArgumentList	* fmt		3031825	1					
ANR	3031985	Argument	* fmt		3031825	0					
ANR	3031986	UnaryOperationExpression	* fmt		3031825	0					
ANR	3031987	UnaryOperator	*		3031825	0					
ANR	3031988	Identifier	fmt		3031825	1					
ANR	3031989	Argument	sp		3031825	1					
ANR	3031990	Identifier	sp		3031825	0					
ANR	3031991	Argument	bep		3031825	2					
ANR	3031992	Identifier	bep		3031825	0					
ANR	3031993	Argument	cc		3031825	3					
ANR	3031994	Identifier	cc		3031825	0					
ANR	3031995	ElseStatement	else		3031825	0					
ANR	3031996	CompoundStatement		52:9:814:814	3031825	0					
ANR	3031997	ExpressionStatement	adjust = RIGHT	643:3:17149:17163	3031825	0	True				
ANR	3031998	AssignmentExpression	adjust = RIGHT		3031825	0		=			
ANR	3031999	Identifier	adjust		3031825	0					
ANR	3032000	Identifier	RIGHT		3031825	1					
ANR	3032001	ExpressionStatement	alternate_form = print_sign = print_blank = NO	644:3:17168:17214	3031825	1	True				
ANR	3032002	AssignmentExpression	alternate_form = print_sign = print_blank = NO		3031825	0		=			
ANR	3032003	Identifier	alternate_form		3031825	0					
ANR	3032004	AssignmentExpression	print_sign = print_blank = NO		3031825	1		=			
ANR	3032005	Identifier	print_sign		3031825	0					
ANR	3032006	AssignmentExpression	print_blank = NO		3031825	1		=			
ANR	3032007	Identifier	print_blank		3031825	0					
ANR	3032008	Identifier	NO		3031825	1					
ANR	3032009	ExpressionStatement	pad_char = ' '	645:3:17219:17233	3031825	2	True				
ANR	3032010	AssignmentExpression	pad_char = ' '		3031825	0		=			
ANR	3032011	Identifier	pad_char		3031825	0					
ANR	3032012	PrimaryExpression	' '		3031825	1					
ANR	3032013	ExpressionStatement	prefix_char = NUL	646:3:17238:17255	3031825	3	True				
ANR	3032014	AssignmentExpression	prefix_char = NUL		3031825	0		=			
ANR	3032015	Identifier	prefix_char		3031825	0					
ANR	3032016	Identifier	NUL		3031825	1					
ANR	3032017	ExpressionStatement	free_zcopy = 0	647:3:17260:17274	3031825	4	True				
ANR	3032018	AssignmentExpression	free_zcopy = 0		3031825	0		=			
ANR	3032019	Identifier	free_zcopy		3031825	0					
ANR	3032020	PrimaryExpression	0		3031825	1					
ANR	3032021	ExpressionStatement	fmt ++	649:3:17280:17285	3031825	5	True				
ANR	3032022	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032023	Identifier	fmt		3031825	0					
ANR	3032024	IncDec	++		3031825	1					
ANR	3032025	IfStatement	if ( isascii ( ( int ) * fmt ) && ! islower ( ( int ) * fmt ) )		3031825	6					
ANR	3032026	Condition	isascii ( ( int ) * fmt ) && ! islower ( ( int ) * fmt )	654:7:17366:17406	3031825	0	True				
ANR	3032027	AndExpression	isascii ( ( int ) * fmt ) && ! islower ( ( int ) * fmt )		3031825	0		&&			
ANR	3032028	CallExpression	isascii ( ( int ) * fmt )		3031825	0					
ANR	3032029	Callee	isascii		3031825	0					
ANR	3032030	Identifier	isascii		3031825	0					
ANR	3032031	ArgumentList	( int ) * fmt		3031825	1					
ANR	3032032	Argument	( int ) * fmt		3031825	0					
ANR	3032033	CastExpression	( int ) * fmt		3031825	0					
ANR	3032034	CastTarget	int		3031825	0					
ANR	3032035	UnaryOperationExpression	* fmt		3031825	1					
ANR	3032036	UnaryOperator	*		3031825	0					
ANR	3032037	Identifier	fmt		3031825	1					
ANR	3032038	UnaryOperationExpression	! islower ( ( int ) * fmt )		3031825	1					
ANR	3032039	UnaryOperator	!		3031825	0					
ANR	3032040	CallExpression	islower ( ( int ) * fmt )		3031825	1					
ANR	3032041	Callee	islower		3031825	0					
ANR	3032042	Identifier	islower		3031825	0					
ANR	3032043	ArgumentList	( int ) * fmt		3031825	1					
ANR	3032044	Argument	( int ) * fmt		3031825	0					
ANR	3032045	CastExpression	( int ) * fmt		3031825	0					
ANR	3032046	CastTarget	int		3031825	0					
ANR	3032047	UnaryOperationExpression	* fmt		3031825	1					
ANR	3032048	UnaryOperator	*		3031825	0					
ANR	3032049	Identifier	fmt		3031825	1					
ANR	3032050	CompoundStatement		67:50:1124:1124	3031825	1					
ANR	3032051	ForStatement	for ( ; ; fmt ++ )		3031825	0					
ANR	3032052	PostIncDecOperationExpression	fmt ++	658:12:17477:17481	3031825	0	True				
ANR	3032053	Identifier	fmt		3031825	0					
ANR	3032054	IncDec	++		3031825	1					
ANR	3032055	CompoundStatement		71:19:1199:1199	3031825	1					
ANR	3032056	IfStatement	if ( * fmt == '-' )		3031825	0					
ANR	3032057	Condition	* fmt == '-'	659:9:17495:17505	3031825	0	True				
ANR	3032058	EqualityExpression	* fmt == '-'		3031825	0		==			
ANR	3032059	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032060	UnaryOperator	*		3031825	0					
ANR	3032061	Identifier	fmt		3031825	1					
ANR	3032062	PrimaryExpression	'-'		3031825	1					
ANR	3032063	ExpressionStatement	adjust = LEFT	660:6:17514:17527	3031825	1	True				
ANR	3032064	AssignmentExpression	adjust = LEFT		3031825	0		=			
ANR	3032065	Identifier	adjust		3031825	0					
ANR	3032066	Identifier	LEFT		3031825	1					
ANR	3032067	ElseStatement	else		3031825	0					
ANR	3032068	IfStatement	if ( * fmt == '+' )		3031825	0					
ANR	3032069	Condition	* fmt == '+'	661:14:17543:17553	3031825	0	True				
ANR	3032070	EqualityExpression	* fmt == '+'		3031825	0		==			
ANR	3032071	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032072	UnaryOperator	*		3031825	0					
ANR	3032073	Identifier	fmt		3031825	1					
ANR	3032074	PrimaryExpression	'+'		3031825	1					
ANR	3032075	ExpressionStatement	print_sign = YES	662:6:17562:17578	3031825	1	True				
ANR	3032076	AssignmentExpression	print_sign = YES		3031825	0		=			
ANR	3032077	Identifier	print_sign		3031825	0					
ANR	3032078	Identifier	YES		3031825	1					
ANR	3032079	ElseStatement	else		3031825	0					
ANR	3032080	IfStatement	if ( * fmt == '#' )		3031825	0					
ANR	3032081	Condition	* fmt == '#'	663:14:17594:17604	3031825	0	True				
ANR	3032082	EqualityExpression	* fmt == '#'		3031825	0		==			
ANR	3032083	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032084	UnaryOperator	*		3031825	0					
ANR	3032085	Identifier	fmt		3031825	1					
ANR	3032086	PrimaryExpression	'#'		3031825	1					
ANR	3032087	ExpressionStatement	alternate_form = YES	664:6:17613:17633	3031825	1	True				
ANR	3032088	AssignmentExpression	alternate_form = YES		3031825	0		=			
ANR	3032089	Identifier	alternate_form		3031825	0					
ANR	3032090	Identifier	YES		3031825	1					
ANR	3032091	ElseStatement	else		3031825	0					
ANR	3032092	IfStatement	if ( * fmt == ' ' )		3031825	0					
ANR	3032093	Condition	* fmt == ' '	665:14:17649:17659	3031825	0	True				
ANR	3032094	EqualityExpression	* fmt == ' '		3031825	0		==			
ANR	3032095	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032096	UnaryOperator	*		3031825	0					
ANR	3032097	Identifier	fmt		3031825	1					
ANR	3032098	PrimaryExpression	' '		3031825	1					
ANR	3032099	ExpressionStatement	print_blank = YES	666:6:17668:17685	3031825	1	True				
ANR	3032100	AssignmentExpression	print_blank = YES		3031825	0		=			
ANR	3032101	Identifier	print_blank		3031825	0					
ANR	3032102	Identifier	YES		3031825	1					
ANR	3032103	ElseStatement	else		3031825	0					
ANR	3032104	IfStatement	if ( * fmt == '0' )		3031825	0					
ANR	3032105	Condition	* fmt == '0'	667:14:17701:17711	3031825	0	True				
ANR	3032106	EqualityExpression	* fmt == '0'		3031825	0		==			
ANR	3032107	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032108	UnaryOperator	*		3031825	0					
ANR	3032109	Identifier	fmt		3031825	1					
ANR	3032110	PrimaryExpression	'0'		3031825	1					
ANR	3032111	ExpressionStatement	pad_char = '0'	668:6:17720:17734	3031825	1	True				
ANR	3032112	AssignmentExpression	pad_char = '0'		3031825	0		=			
ANR	3032113	Identifier	pad_char		3031825	0					
ANR	3032114	PrimaryExpression	'0'		3031825	1					
ANR	3032115	ElseStatement	else		3031825	0					
ANR	3032116	BreakStatement	break ;	670:6:17752:17757	3031825	0	True				
ANR	3032117	IfStatement	if ( isdigit ( ( int ) * fmt ) )		3031825	1					
ANR	3032118	Condition	isdigit ( ( int ) * fmt )	676:8:17827:17844	3031825	0	True				
ANR	3032119	CallExpression	isdigit ( ( int ) * fmt )		3031825	0					
ANR	3032120	Callee	isdigit		3031825	0					
ANR	3032121	Identifier	isdigit		3031825	0					
ANR	3032122	ArgumentList	( int ) * fmt		3031825	1					
ANR	3032123	Argument	( int ) * fmt		3031825	0					
ANR	3032124	CastExpression	( int ) * fmt		3031825	0					
ANR	3032125	CastTarget	int		3031825	0					
ANR	3032126	UnaryOperationExpression	* fmt		3031825	1					
ANR	3032127	UnaryOperator	*		3031825	0					
ANR	3032128	Identifier	fmt		3031825	1					
ANR	3032129	CompoundStatement		89:28:1562:1562	3031825	1					
ANR	3032130	ExpressionStatement	"STR_TO_DEC ( fmt , min_width )"	677:5:17854:17880	3031825	0	True				
ANR	3032131	CallExpression	"STR_TO_DEC ( fmt , min_width )"		3031825	0					
ANR	3032132	Callee	STR_TO_DEC		3031825	0					
ANR	3032133	Identifier	STR_TO_DEC		3031825	0					
ANR	3032134	ArgumentList	fmt		3031825	1					
ANR	3032135	Argument	fmt		3031825	0					
ANR	3032136	Identifier	fmt		3031825	0					
ANR	3032137	Argument	min_width		3031825	1					
ANR	3032138	Identifier	min_width		3031825	0					
ANR	3032139	ExpressionStatement	adjust_width = YES	678:5:17887:17905	3031825	1	True				
ANR	3032140	AssignmentExpression	adjust_width = YES		3031825	0		=			
ANR	3032141	Identifier	adjust_width		3031825	0					
ANR	3032142	Identifier	YES		3031825	1					
ANR	3032143	ElseStatement	else		3031825	0					
ANR	3032144	IfStatement	if ( * fmt == '*' )		3031825	0					
ANR	3032145	Condition	* fmt == '*'	679:15:17922:17932	3031825	0	True				
ANR	3032146	EqualityExpression	* fmt == '*'		3031825	0		==			
ANR	3032147	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032148	UnaryOperator	*		3031825	0					
ANR	3032149	Identifier	fmt		3031825	1					
ANR	3032150	PrimaryExpression	'*'		3031825	1					
ANR	3032151	CompoundStatement		92:28:1650:1650	3031825	1					
ANR	3032152	ExpressionStatement	"min_width = va_arg ( ap , int )"	680:5:17942:17969	3031825	0	True				
ANR	3032153	AssignmentExpression	"min_width = va_arg ( ap , int )"		3031825	0		=			
ANR	3032154	Identifier	min_width		3031825	0					
ANR	3032155	CallExpression	"va_arg ( ap , int )"		3031825	1					
ANR	3032156	Callee	va_arg		3031825	0					
ANR	3032157	Identifier	va_arg		3031825	0					
ANR	3032158	ArgumentList	ap		3031825	1					
ANR	3032159	Argument	ap		3031825	0					
ANR	3032160	Identifier	ap		3031825	0					
ANR	3032161	Argument	int		3031825	1					
ANR	3032162	Identifier	int		3031825	0					
ANR	3032163	ExpressionStatement	fmt ++	681:5:17976:17981	3031825	1	True				
ANR	3032164	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032165	Identifier	fmt		3031825	0					
ANR	3032166	IncDec	++		3031825	1					
ANR	3032167	ExpressionStatement	adjust_width = YES	682:5:17988:18006	3031825	2	True				
ANR	3032168	AssignmentExpression	adjust_width = YES		3031825	0		=			
ANR	3032169	Identifier	adjust_width		3031825	0					
ANR	3032170	Identifier	YES		3031825	1					
ANR	3032171	IfStatement	if ( min_width < 0 )		3031825	3					
ANR	3032172	Condition	min_width < 0	683:9:18017:18029	3031825	0	True				
ANR	3032173	RelationalExpression	min_width < 0		3031825	0		<			
ANR	3032174	Identifier	min_width		3031825	0					
ANR	3032175	PrimaryExpression	0		3031825	1					
ANR	3032176	CompoundStatement		96:24:1747:1747	3031825	1					
ANR	3032177	ExpressionStatement	adjust = LEFT	684:6:18040:18053	3031825	0	True				
ANR	3032178	AssignmentExpression	adjust = LEFT		3031825	0		=			
ANR	3032179	Identifier	adjust		3031825	0					
ANR	3032180	Identifier	LEFT		3031825	1					
ANR	3032181	ExpressionStatement	min_width = - min_width	685:6:18061:18083	3031825	1	True				
ANR	3032182	AssignmentExpression	min_width = - min_width		3031825	0		=			
ANR	3032183	Identifier	min_width		3031825	0					
ANR	3032184	UnaryOperationExpression	- min_width		3031825	1					
ANR	3032185	UnaryOperator	-		3031825	0					
ANR	3032186	Identifier	min_width		3031825	1					
ANR	3032187	ElseStatement	else		3031825	0					
ANR	3032188	ExpressionStatement	adjust_width = NO	688:5:18108:18125	3031825	0	True				
ANR	3032189	AssignmentExpression	adjust_width = NO		3031825	0		=			
ANR	3032190	Identifier	adjust_width		3031825	0					
ANR	3032191	Identifier	NO		3031825	1					
ANR	3032192	IfStatement	if ( * fmt == '.' )		3031825	2					
ANR	3032193	Condition	* fmt == '.'	693:8:18193:18203	3031825	0	True				
ANR	3032194	EqualityExpression	* fmt == '.'		3031825	0		==			
ANR	3032195	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032196	UnaryOperator	*		3031825	0					
ANR	3032197	Identifier	fmt		3031825	1					
ANR	3032198	PrimaryExpression	'.'		3031825	1					
ANR	3032199	CompoundStatement		106:21:1921:1921	3031825	1					
ANR	3032200	ExpressionStatement	adjust_precision = YES	694:5:18213:18235	3031825	0	True				
ANR	3032201	AssignmentExpression	adjust_precision = YES		3031825	0		=			
ANR	3032202	Identifier	adjust_precision		3031825	0					
ANR	3032203	Identifier	YES		3031825	1					
ANR	3032204	ExpressionStatement	fmt ++	695:5:18242:18247	3031825	1	True				
ANR	3032205	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032206	Identifier	fmt		3031825	0					
ANR	3032207	IncDec	++		3031825	1					
ANR	3032208	IfStatement	if ( isdigit ( ( int ) * fmt ) )		3031825	2					
ANR	3032209	Condition	isdigit ( ( int ) * fmt )	696:9:18258:18275	3031825	0	True				
ANR	3032210	CallExpression	isdigit ( ( int ) * fmt )		3031825	0					
ANR	3032211	Callee	isdigit		3031825	0					
ANR	3032212	Identifier	isdigit		3031825	0					
ANR	3032213	ArgumentList	( int ) * fmt		3031825	1					
ANR	3032214	Argument	( int ) * fmt		3031825	0					
ANR	3032215	CastExpression	( int ) * fmt		3031825	0					
ANR	3032216	CastTarget	int		3031825	0					
ANR	3032217	UnaryOperationExpression	* fmt		3031825	1					
ANR	3032218	UnaryOperator	*		3031825	0					
ANR	3032219	Identifier	fmt		3031825	1					
ANR	3032220	CompoundStatement		109:29:1993:1993	3031825	1					
ANR	3032221	ExpressionStatement	"STR_TO_DEC ( fmt , precision )"	697:6:18286:18312	3031825	0	True				
ANR	3032222	CallExpression	"STR_TO_DEC ( fmt , precision )"		3031825	0					
ANR	3032223	Callee	STR_TO_DEC		3031825	0					
ANR	3032224	Identifier	STR_TO_DEC		3031825	0					
ANR	3032225	ArgumentList	fmt		3031825	1					
ANR	3032226	Argument	fmt		3031825	0					
ANR	3032227	Identifier	fmt		3031825	0					
ANR	3032228	Argument	precision		3031825	1					
ANR	3032229	Identifier	precision		3031825	0					
ANR	3032230	ElseStatement	else		3031825	0					
ANR	3032231	IfStatement	if ( * fmt == '*' )		3031825	0					
ANR	3032232	Condition	* fmt == '*'	698:16:18330:18340	3031825	0	True				
ANR	3032233	EqualityExpression	* fmt == '*'		3031825	0		==			
ANR	3032234	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032235	UnaryOperator	*		3031825	0					
ANR	3032236	Identifier	fmt		3031825	1					
ANR	3032237	PrimaryExpression	'*'		3031825	1					
ANR	3032238	CompoundStatement		111:29:2058:2058	3031825	1					
ANR	3032239	ExpressionStatement	"precision = va_arg ( ap , int )"	699:6:18351:18378	3031825	0	True				
ANR	3032240	AssignmentExpression	"precision = va_arg ( ap , int )"		3031825	0		=			
ANR	3032241	Identifier	precision		3031825	0					
ANR	3032242	CallExpression	"va_arg ( ap , int )"		3031825	1					
ANR	3032243	Callee	va_arg		3031825	0					
ANR	3032244	Identifier	va_arg		3031825	0					
ANR	3032245	ArgumentList	ap		3031825	1					
ANR	3032246	Argument	ap		3031825	0					
ANR	3032247	Identifier	ap		3031825	0					
ANR	3032248	Argument	int		3031825	1					
ANR	3032249	Identifier	int		3031825	0					
ANR	3032250	ExpressionStatement	fmt ++	700:6:18386:18391	3031825	1	True				
ANR	3032251	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032252	Identifier	fmt		3031825	0					
ANR	3032253	IncDec	++		3031825	1					
ANR	3032254	IfStatement	if ( precision < 0 )		3031825	2					
ANR	3032255	Condition	precision < 0	701:10:18403:18415	3031825	0	True				
ANR	3032256	RelationalExpression	precision < 0		3031825	0		<			
ANR	3032257	Identifier	precision		3031825	0					
ANR	3032258	PrimaryExpression	0		3031825	1					
ANR	3032259	ExpressionStatement	precision = 0	702:7:18425:18438	3031825	1	True				
ANR	3032260	AssignmentExpression	precision = 0		3031825	0		=			
ANR	3032261	Identifier	precision		3031825	0					
ANR	3032262	PrimaryExpression	0		3031825	1					
ANR	3032263	ElseStatement	else		3031825	0					
ANR	3032264	ExpressionStatement	precision = 0	704:6:18458:18471	3031825	0	True				
ANR	3032265	AssignmentExpression	precision = 0		3031825	0		=			
ANR	3032266	Identifier	precision		3031825	0					
ANR	3032267	PrimaryExpression	0		3031825	1					
ANR	3032268	IfStatement	if ( precision > FORMAT_CONV_MAX_PRECISION )		3031825	3					
ANR	3032269	Condition	precision > FORMAT_CONV_MAX_PRECISION	706:9:18483:18519	3031825	0	True				
ANR	3032270	RelationalExpression	precision > FORMAT_CONV_MAX_PRECISION		3031825	0		>			
ANR	3032271	Identifier	precision		3031825	0					
ANR	3032272	Identifier	FORMAT_CONV_MAX_PRECISION		3031825	1					
ANR	3032273	CompoundStatement		119:48:2237:2237	3031825	1					
ANR	3032274	ExpressionStatement	precision = FORMAT_CONV_MAX_PRECISION	707:6:18530:18567	3031825	0	True				
ANR	3032275	AssignmentExpression	precision = FORMAT_CONV_MAX_PRECISION		3031825	0		=			
ANR	3032276	Identifier	precision		3031825	0					
ANR	3032277	Identifier	FORMAT_CONV_MAX_PRECISION		3031825	1					
ANR	3032278	ElseStatement	else		3031825	0					
ANR	3032279	ExpressionStatement	adjust_precision = NO	710:5:18592:18613	3031825	0	True				
ANR	3032280	AssignmentExpression	adjust_precision = NO		3031825	0		=			
ANR	3032281	Identifier	adjust_precision		3031825	0					
ANR	3032282	Identifier	NO		3031825	1					
ANR	3032283	ElseStatement	else		3031825	0					
ANR	3032284	ExpressionStatement	adjust_precision = adjust_width = NO	712:4:18629:18665	3031825	0	True				
ANR	3032285	AssignmentExpression	adjust_precision = adjust_width = NO		3031825	0		=			
ANR	3032286	Identifier	adjust_precision		3031825	0					
ANR	3032287	AssignmentExpression	adjust_width = NO		3031825	1		=			
ANR	3032288	Identifier	adjust_width		3031825	0					
ANR	3032289	Identifier	NO		3031825	1					
ANR	3032290	SwitchStatement	switch ( * fmt )		3031825	7					
ANR	3032291	Condition	* fmt	717:11:18713:18716	3031825	0	True				
ANR	3032292	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032293	UnaryOperator	*		3031825	0					
ANR	3032294	Identifier	fmt		3031825	1					
ANR	3032295	CompoundStatement		130:17:2434:2434	3031825	1					
ANR	3032296	Label	case 'L' :	718:4:18725:18733	3031825	0	True				
ANR	3032297	ExpressionStatement	fmt ++	719:5:18740:18745	3031825	1	True				
ANR	3032298	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032299	Identifier	fmt		3031825	0					
ANR	3032300	IncDec	++		3031825	1					
ANR	3032301	ExpressionStatement	modifier = LM_LONG_DOUBLE	720:5:18752:18777	3031825	2	True				
ANR	3032302	AssignmentExpression	modifier = LM_LONG_DOUBLE		3031825	0		=			
ANR	3032303	Identifier	modifier		3031825	0					
ANR	3032304	Identifier	LM_LONG_DOUBLE		3031825	1					
ANR	3032305	BreakStatement	break ;	721:5:18784:18789	3031825	3	True				
ANR	3032306	Label	case 'I' :	722:4:18795:18803	3031825	4	True				
ANR	3032307	ExpressionStatement	fmt ++	723:5:18810:18815	3031825	5	True				
ANR	3032308	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032309	Identifier	fmt		3031825	0					
ANR	3032310	IncDec	++		3031825	1					
ANR	3032311	IfStatement	if ( * fmt == '6' && * ( fmt + 1 ) == '4' )		3031825	6					
ANR	3032312	Condition	* fmt == '6' && * ( fmt + 1 ) == '4'	725:9:18847:18876	3031825	0	True				
ANR	3032313	AndExpression	* fmt == '6' && * ( fmt + 1 ) == '4'		3031825	0		&&			
ANR	3032314	EqualityExpression	* fmt == '6'		3031825	0		==			
ANR	3032315	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032316	UnaryOperator	*		3031825	0					
ANR	3032317	Identifier	fmt		3031825	1					
ANR	3032318	PrimaryExpression	'6'		3031825	1					
ANR	3032319	EqualityExpression	* ( fmt + 1 ) == '4'		3031825	1		==			
ANR	3032320	UnaryOperationExpression	* ( fmt + 1 )		3031825	0					
ANR	3032321	UnaryOperator	*		3031825	0					
ANR	3032322	AdditiveExpression	fmt + 1		3031825	1		+			
ANR	3032323	Identifier	fmt		3031825	0					
ANR	3032324	PrimaryExpression	1		3031825	1					
ANR	3032325	PrimaryExpression	'4'		3031825	1					
ANR	3032326	CompoundStatement		138:41:2594:2594	3031825	1					
ANR	3032327	ExpressionStatement	fmt += 2	726:6:18887:18895	3031825	0	True				
ANR	3032328	AssignmentExpression	fmt += 2		3031825	0		+=			
ANR	3032329	Identifier	fmt		3031825	0					
ANR	3032330	PrimaryExpression	2		3031825	1					
ANR	3032331	ExpressionStatement	modifier = LM_LONG_LONG	727:6:18903:18926	3031825	1	True				
ANR	3032332	AssignmentExpression	modifier = LM_LONG_LONG		3031825	0		=			
ANR	3032333	Identifier	modifier		3031825	0					
ANR	3032334	Identifier	LM_LONG_LONG		3031825	1					
ANR	3032335	ElseStatement	else		3031825	0					
ANR	3032336	IfStatement	if ( * fmt == '3' && * ( fmt + 1 ) == '2' )		3031825	0					
ANR	3032337	Condition	* fmt == '3' && * ( fmt + 1 ) == '2'	730:10:18957:18986	3031825	0	True				
ANR	3032338	AndExpression	* fmt == '3' && * ( fmt + 1 ) == '2'		3031825	0		&&			
ANR	3032339	EqualityExpression	* fmt == '3'		3031825	0		==			
ANR	3032340	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032341	UnaryOperator	*		3031825	0					
ANR	3032342	Identifier	fmt		3031825	1					
ANR	3032343	PrimaryExpression	'3'		3031825	1					
ANR	3032344	EqualityExpression	* ( fmt + 1 ) == '2'		3031825	1		==			
ANR	3032345	UnaryOperationExpression	* ( fmt + 1 )		3031825	0					
ANR	3032346	UnaryOperator	*		3031825	0					
ANR	3032347	AdditiveExpression	fmt + 1		3031825	1		+			
ANR	3032348	Identifier	fmt		3031825	0					
ANR	3032349	PrimaryExpression	1		3031825	1					
ANR	3032350	PrimaryExpression	'2'		3031825	1					
ANR	3032351	CompoundStatement		143:42:2704:2704	3031825	1					
ANR	3032352	ExpressionStatement	fmt += 2	731:7:18998:19006	3031825	0	True				
ANR	3032353	AssignmentExpression	fmt += 2		3031825	0		+=			
ANR	3032354	Identifier	fmt		3031825	0					
ANR	3032355	PrimaryExpression	2		3031825	1					
ANR	3032356	ExpressionStatement	modifier = LM_LONG	732:7:19015:19033	3031825	1	True				
ANR	3032357	AssignmentExpression	modifier = LM_LONG		3031825	0		=			
ANR	3032358	Identifier	modifier		3031825	0					
ANR	3032359	Identifier	LM_LONG		3031825	1					
ANR	3032360	ElseStatement	else		3031825	0					
ANR	3032361	CompoundStatement		146:13:2763:2763	3031825	0					
ANR	3032362	ExpressionStatement	modifier = LM_LONG_LONG	735:7:19071:19094	3031825	0	True				
ANR	3032363	AssignmentExpression	modifier = LM_LONG_LONG		3031825	0		=			
ANR	3032364	Identifier	modifier		3031825	0					
ANR	3032365	Identifier	LM_LONG_LONG		3031825	1					
ANR	3032366	BreakStatement	break ;	740:5:19149:19154	3031825	7	True				
ANR	3032367	Label	case 'l' :	741:4:19160:19168	3031825	8	True				
ANR	3032368	ExpressionStatement	fmt ++	742:5:19175:19180	3031825	9	True				
ANR	3032369	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032370	Identifier	fmt		3031825	0					
ANR	3032371	IncDec	++		3031825	1					
ANR	3032372	IfStatement	if ( * fmt == 'l' )		3031825	10					
ANR	3032373	Condition	* fmt == 'l'	744:9:19212:19222	3031825	0	True				
ANR	3032374	EqualityExpression	* fmt == 'l'		3031825	0		==			
ANR	3032375	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032376	UnaryOperator	*		3031825	0					
ANR	3032377	Identifier	fmt		3031825	1					
ANR	3032378	PrimaryExpression	'l'		3031825	1					
ANR	3032379	CompoundStatement		157:22:2940:2940	3031825	1					
ANR	3032380	ExpressionStatement	fmt ++	745:6:19233:19238	3031825	0	True				
ANR	3032381	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032382	Identifier	fmt		3031825	0					
ANR	3032383	IncDec	++		3031825	1					
ANR	3032384	ExpressionStatement	modifier = LM_LONG_LONG	746:6:19246:19269	3031825	1	True				
ANR	3032385	AssignmentExpression	modifier = LM_LONG_LONG		3031825	0		=			
ANR	3032386	Identifier	modifier		3031825	0					
ANR	3032387	Identifier	LM_LONG_LONG		3031825	1					
ANR	3032388	ElseStatement	else		3031825	0					
ANR	3032389	ExpressionStatement	modifier = LM_LONG	749:6:19296:19314	3031825	0	True				
ANR	3032390	AssignmentExpression	modifier = LM_LONG		3031825	0		=			
ANR	3032391	Identifier	modifier		3031825	0					
ANR	3032392	Identifier	LM_LONG		3031825	1					
ANR	3032393	BreakStatement	break ;	750:5:19321:19326	3031825	11	True				
ANR	3032394	Label	case 'z' :	751:4:19332:19340	3031825	12	True				
ANR	3032395	ExpressionStatement	fmt ++	752:5:19347:19352	3031825	13	True				
ANR	3032396	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032397	Identifier	fmt		3031825	0					
ANR	3032398	IncDec	++		3031825	1					
ANR	3032399	ExpressionStatement	modifier = LM_SIZE_T	753:5:19359:19379	3031825	14	True				
ANR	3032400	AssignmentExpression	modifier = LM_SIZE_T		3031825	0		=			
ANR	3032401	Identifier	modifier		3031825	0					
ANR	3032402	Identifier	LM_SIZE_T		3031825	1					
ANR	3032403	BreakStatement	break ;	754:5:19386:19391	3031825	15	True				
ANR	3032404	Label	case 'j' :	755:4:19397:19405	3031825	16	True				
ANR	3032405	ExpressionStatement	fmt ++	756:5:19412:19417	3031825	17	True				
ANR	3032406	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032407	Identifier	fmt		3031825	0					
ANR	3032408	IncDec	++		3031825	1					
ANR	3032409	ExpressionStatement	modifier = LM_INTMAX_T	758:5:19444:19466	3031825	18	True				
ANR	3032410	AssignmentExpression	modifier = LM_INTMAX_T		3031825	0		=			
ANR	3032411	Identifier	modifier		3031825	0					
ANR	3032412	Identifier	LM_INTMAX_T		3031825	1					
ANR	3032413	BreakStatement	break ;	762:5:19513:19518	3031825	19	True				
ANR	3032414	Label	case 't' :	763:4:19524:19532	3031825	20	True				
ANR	3032415	ExpressionStatement	fmt ++	764:5:19539:19544	3031825	21	True				
ANR	3032416	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032417	Identifier	fmt		3031825	0					
ANR	3032418	IncDec	++		3031825	1					
ANR	3032419	ExpressionStatement	modifier = LM_PTRDIFF_T	766:5:19572:19595	3031825	22	True				
ANR	3032420	AssignmentExpression	modifier = LM_PTRDIFF_T		3031825	0		=			
ANR	3032421	Identifier	modifier		3031825	0					
ANR	3032422	Identifier	LM_PTRDIFF_T		3031825	1					
ANR	3032423	BreakStatement	break ;	770:5:19642:19647	3031825	23	True				
ANR	3032424	Label	case 'p' :	771:4:19653:19661	3031825	24	True				
ANR	3032425	ExpressionStatement	fmt ++	772:5:19668:19673	3031825	25	True				
ANR	3032426	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032427	Identifier	fmt		3031825	0					
ANR	3032428	IncDec	++		3031825	1					
ANR	3032429	ExpressionStatement	modifier = LM_PHP_INT_T	773:5:19680:19703	3031825	26	True				
ANR	3032430	AssignmentExpression	modifier = LM_PHP_INT_T		3031825	0		=			
ANR	3032431	Identifier	modifier		3031825	0					
ANR	3032432	Identifier	LM_PHP_INT_T		3031825	1					
ANR	3032433	BreakStatement	break ;	774:5:19710:19715	3031825	27	True				
ANR	3032434	Label	case 'h' :	775:4:19721:19729	3031825	28	True				
ANR	3032435	ExpressionStatement	fmt ++	776:5:19736:19741	3031825	29	True				
ANR	3032436	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032437	Identifier	fmt		3031825	0					
ANR	3032438	IncDec	++		3031825	1					
ANR	3032439	IfStatement	if ( * fmt == 'h' )		3031825	30					
ANR	3032440	Condition	* fmt == 'h'	777:9:19752:19762	3031825	0	True				
ANR	3032441	EqualityExpression	* fmt == 'h'		3031825	0		==			
ANR	3032442	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032443	UnaryOperator	*		3031825	0					
ANR	3032444	Identifier	fmt		3031825	1					
ANR	3032445	PrimaryExpression	'h'		3031825	1					
ANR	3032446	CompoundStatement		190:22:3480:3480	3031825	1					
ANR	3032447	ExpressionStatement	fmt ++	778:6:19773:19778	3031825	0	True				
ANR	3032448	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3032449	Identifier	fmt		3031825	0					
ANR	3032450	IncDec	++		3031825	1					
ANR	3032451	Label	default :	781:4:19841:19848	3031825	31	True				
ANR	3032452	Identifier	default		3031825	0					
ANR	3032453	ExpressionStatement	modifier = LM_STD	782:5:19855:19872	3031825	32	True				
ANR	3032454	AssignmentExpression	modifier = LM_STD		3031825	0		=			
ANR	3032455	Identifier	modifier		3031825	0					
ANR	3032456	Identifier	LM_STD		3031825	1					
ANR	3032457	BreakStatement	break ;	783:5:19879:19884	3031825	33	True				
ANR	3032458	SwitchStatement	switch ( * fmt )		3031825	8					
ANR	3032459	Condition	* fmt	797:11:20350:20353	3031825	0	True				
ANR	3032460	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032461	UnaryOperator	*		3031825	0					
ANR	3032462	Identifier	fmt		3031825	1					
ANR	3032463	CompoundStatement		210:17:4071:4071	3031825	1					
ANR	3032464	Label	case 'Z' :	798:4:20362:20370	3031825	0	True				
ANR	3032465	CompoundStatement		211:14:4087:4087	3031825	1					
ANR	3032466	Statement	zvp	799:16:20390:20392	3031825	0	True				
ANR	3032467	Statement	=	799:20:20394:20394	3031825	1	True				
ANR	3032468	Statement	(	799:22:20396:20396	3031825	2	True				
ANR	3032469	Statement	zval	799:23:20397:20400	3031825	3	True				
ANR	3032470	Statement	*	799:27:20401:20401	3031825	4	True				
ANR	3032471	Statement	)	799:28:20402:20402	3031825	5	True				
ANR	3032472	Statement	va_arg	799:30:20404:20409	3031825	6	True				
ANR	3032473	Statement	(	799:36:20410:20410	3031825	7	True				
ANR	3032474	Statement	ap	799:37:20411:20412	3031825	8	True				
ANR	3032475	Statement	","	799:39:20413:20413	3031825	9	True				
ANR	3032476	Statement	zval	799:41:20415:20418	3031825	10	True				
ANR	3032477	Statement	*	799:45:20419:20419	3031825	11	True				
ANR	3032478	Statement	)	799:46:20420:20420	3031825	12	True				
ANR	3032479	ExpressionStatement		799:47:20421:20421	3031825	13	True				
ANR	3032480	ExpressionStatement	"free_zcopy = zend_make_printable_zval ( zvp , & zcopy )"	800:5:20428:20478	3031825	14	True				
ANR	3032481	AssignmentExpression	"free_zcopy = zend_make_printable_zval ( zvp , & zcopy )"		3031825	0		=			
ANR	3032482	Identifier	free_zcopy		3031825	0					
ANR	3032483	CallExpression	"zend_make_printable_zval ( zvp , & zcopy )"		3031825	1					
ANR	3032484	Callee	zend_make_printable_zval		3031825	0					
ANR	3032485	Identifier	zend_make_printable_zval		3031825	0					
ANR	3032486	ArgumentList	zvp		3031825	1					
ANR	3032487	Argument	zvp		3031825	0					
ANR	3032488	Identifier	zvp		3031825	0					
ANR	3032489	Argument	& zcopy		3031825	1					
ANR	3032490	UnaryOperationExpression	& zcopy		3031825	0					
ANR	3032491	UnaryOperator	&		3031825	0					
ANR	3032492	Identifier	zcopy		3031825	1					
ANR	3032493	IfStatement	if ( free_zcopy )		3031825	15					
ANR	3032494	Condition	free_zcopy	801:9:20489:20498	3031825	0	True				
ANR	3032495	Identifier	free_zcopy		3031825	0					
ANR	3032496	CompoundStatement		214:21:4216:4216	3031825	1					
ANR	3032497	ExpressionStatement	zvp = & zcopy	802:6:20509:20521	3031825	0	True				
ANR	3032498	AssignmentExpression	zvp = & zcopy		3031825	0		=			
ANR	3032499	Identifier	zvp		3031825	0					
ANR	3032500	UnaryOperationExpression	& zcopy		3031825	1					
ANR	3032501	UnaryOperator	&		3031825	0					
ANR	3032502	Identifier	zcopy		3031825	1					
ANR	3032503	ExpressionStatement	s_len = Z_STRLEN_P ( zvp )	804:5:20535:20558	3031825	16	True				
ANR	3032504	AssignmentExpression	s_len = Z_STRLEN_P ( zvp )		3031825	0		=			
ANR	3032505	Identifier	s_len		3031825	0					
ANR	3032506	CallExpression	Z_STRLEN_P ( zvp )		3031825	1					
ANR	3032507	Callee	Z_STRLEN_P		3031825	0					
ANR	3032508	Identifier	Z_STRLEN_P		3031825	0					
ANR	3032509	ArgumentList	zvp		3031825	1					
ANR	3032510	Argument	zvp		3031825	0					
ANR	3032511	Identifier	zvp		3031825	0					
ANR	3032512	ExpressionStatement	s = Z_STRVAL_P ( zvp )	805:5:20565:20584	3031825	17	True				
ANR	3032513	AssignmentExpression	s = Z_STRVAL_P ( zvp )		3031825	0		=			
ANR	3032514	Identifier	s		3031825	0					
ANR	3032515	CallExpression	Z_STRVAL_P ( zvp )		3031825	1					
ANR	3032516	Callee	Z_STRVAL_P		3031825	0					
ANR	3032517	Identifier	Z_STRVAL_P		3031825	0					
ANR	3032518	ArgumentList	zvp		3031825	1					
ANR	3032519	Argument	zvp		3031825	0					
ANR	3032520	Identifier	zvp		3031825	0					
ANR	3032521	IfStatement	if ( adjust_precision && precision < s_len )		3031825	18					
ANR	3032522	Condition	adjust_precision && precision < s_len	806:9:20595:20631	3031825	0	True				
ANR	3032523	AndExpression	adjust_precision && precision < s_len		3031825	0		&&			
ANR	3032524	Identifier	adjust_precision		3031825	0					
ANR	3032525	RelationalExpression	precision < s_len		3031825	1		<			
ANR	3032526	Identifier	precision		3031825	0					
ANR	3032527	Identifier	s_len		3031825	1					
ANR	3032528	CompoundStatement		219:48:4349:4349	3031825	1					
ANR	3032529	ExpressionStatement	s_len = precision	807:6:20642:20659	3031825	0	True				
ANR	3032530	AssignmentExpression	s_len = precision		3031825	0		=			
ANR	3032531	Identifier	s_len		3031825	0					
ANR	3032532	Identifier	precision		3031825	1					
ANR	3032533	BreakStatement	break ;	809:5:20673:20678	3031825	19	True				
ANR	3032534	Label	case 'u' :	811:4:20690:20698	3031825	2	True				
ANR	3032535	SwitchStatement	switch ( modifier )		3031825	3					
ANR	3032536	Condition	modifier	812:12:20712:20719	3031825	0	True				
ANR	3032537	Identifier	modifier		3031825	0					
ANR	3032538	CompoundStatement		225:22:4437:4437	3031825	1					
ANR	3032539	Label	default :	813:6:20730:20737	3031825	0	True				
ANR	3032540	Identifier	default		3031825	0					
ANR	3032541	Statement	i_num	814:7:20746:20750	3031825	1	True				
ANR	3032542	Statement	=	814:13:20752:20752	3031825	2	True				
ANR	3032543	Statement	(	814:15:20754:20754	3031825	3	True				
ANR	3032544	Statement	wide_int	814:16:20755:20762	3031825	4	True				
ANR	3032545	Statement	)	814:24:20763:20763	3031825	5	True				
ANR	3032546	Statement	va_arg	814:26:20765:20770	3031825	6	True				
ANR	3032547	Statement	(	814:32:20771:20771	3031825	7	True				
ANR	3032548	Statement	ap	814:33:20772:20773	3031825	8	True				
ANR	3032549	Statement	","	814:35:20774:20774	3031825	9	True				
ANR	3032550	Statement	unsigned	814:37:20776:20783	3031825	10	True				
ANR	3032551	Statement	int	814:46:20785:20787	3031825	11	True				
ANR	3032552	Statement	)	814:49:20788:20788	3031825	12	True				
ANR	3032553	ExpressionStatement		814:50:20789:20789	3031825	13	True				
ANR	3032554	BreakStatement	break ;	815:7:20798:20803	3031825	14	True				
ANR	3032555	Label	case LM_LONG_DOUBLE :	816:6:20811:20830	3031825	15	True				
ANR	3032556	Identifier	LM_LONG_DOUBLE		3031825	0					
ANR	3032557	GotoStatement	goto fmt_error ;	817:7:20839:20853	3031825	16	True				
ANR	3032558	Identifier	fmt_error		3031825	0					
ANR	3032559	Label	case LM_LONG :	818:6:20861:20873	3031825	17	True				
ANR	3032560	Identifier	LM_LONG		3031825	0					
ANR	3032561	Statement	i_num	819:7:20882:20886	3031825	18	True				
ANR	3032562	Statement	=	819:13:20888:20888	3031825	19	True				
ANR	3032563	Statement	(	819:15:20890:20890	3031825	20	True				
ANR	3032564	Statement	wide_int	819:16:20891:20898	3031825	21	True				
ANR	3032565	Statement	)	819:24:20899:20899	3031825	22	True				
ANR	3032566	Statement	va_arg	819:26:20901:20906	3031825	23	True				
ANR	3032567	Statement	(	819:32:20907:20907	3031825	24	True				
ANR	3032568	Statement	ap	819:33:20908:20909	3031825	25	True				
ANR	3032569	Statement	","	819:35:20910:20910	3031825	26	True				
ANR	3032570	Statement	unsigned	819:37:20912:20919	3031825	27	True				
ANR	3032571	Statement	long	819:46:20921:20924	3031825	28	True				
ANR	3032572	Statement	int	819:51:20926:20928	3031825	29	True				
ANR	3032573	Statement	)	819:54:20929:20929	3031825	30	True				
ANR	3032574	ExpressionStatement		819:55:20930:20930	3031825	31	True				
ANR	3032575	BreakStatement	break ;	820:7:20939:20944	3031825	32	True				
ANR	3032576	Label	case LM_SIZE_T :	821:6:20952:20966	3031825	33	True				
ANR	3032577	Identifier	LM_SIZE_T		3031825	0					
ANR	3032578	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , size_t )"	822:7:20975:21012	3031825	34	True				
ANR	3032579	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , size_t )"		3031825	0		=			
ANR	3032580	Identifier	i_num		3031825	0					
ANR	3032581	CastExpression	"( wide_int ) va_arg ( ap , size_t )"		3031825	1					
ANR	3032582	CastTarget	wide_int		3031825	0					
ANR	3032583	CallExpression	"va_arg ( ap , size_t )"		3031825	1					
ANR	3032584	Callee	va_arg		3031825	0					
ANR	3032585	Identifier	va_arg		3031825	0					
ANR	3032586	ArgumentList	ap		3031825	1					
ANR	3032587	Argument	ap		3031825	0					
ANR	3032588	Identifier	ap		3031825	0					
ANR	3032589	Argument	size_t		3031825	1					
ANR	3032590	Identifier	size_t		3031825	0					
ANR	3032591	BreakStatement	break ;	823:7:21021:21026	3031825	35	True				
ANR	3032592	Label	case LM_LONG_LONG :	825:6:21055:21072	3031825	36	True				
ANR	3032593	Identifier	LM_LONG_LONG		3031825	0					
ANR	3032594	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , u_wide_int )"	826:7:21081:21122	3031825	37	True				
ANR	3032595	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , u_wide_int )"		3031825	0		=			
ANR	3032596	Identifier	i_num		3031825	0					
ANR	3032597	CastExpression	"( wide_int ) va_arg ( ap , u_wide_int )"		3031825	1					
ANR	3032598	CastTarget	wide_int		3031825	0					
ANR	3032599	CallExpression	"va_arg ( ap , u_wide_int )"		3031825	1					
ANR	3032600	Callee	va_arg		3031825	0					
ANR	3032601	Identifier	va_arg		3031825	0					
ANR	3032602	ArgumentList	ap		3031825	1					
ANR	3032603	Argument	ap		3031825	0					
ANR	3032604	Identifier	ap		3031825	0					
ANR	3032605	Argument	u_wide_int		3031825	1					
ANR	3032606	Identifier	u_wide_int		3031825	0					
ANR	3032607	BreakStatement	break ;	827:7:21131:21136	3031825	38	True				
ANR	3032608	Label	case LM_INTMAX_T :	830:6:21171:21187	3031825	39	True				
ANR	3032609	Identifier	LM_INTMAX_T		3031825	0					
ANR	3032610	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , uintmax_t )"	831:7:21196:21236	3031825	40	True				
ANR	3032611	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , uintmax_t )"		3031825	0		=			
ANR	3032612	Identifier	i_num		3031825	0					
ANR	3032613	CastExpression	"( wide_int ) va_arg ( ap , uintmax_t )"		3031825	1					
ANR	3032614	CastTarget	wide_int		3031825	0					
ANR	3032615	CallExpression	"va_arg ( ap , uintmax_t )"		3031825	1					
ANR	3032616	Callee	va_arg		3031825	0					
ANR	3032617	Identifier	va_arg		3031825	0					
ANR	3032618	ArgumentList	ap		3031825	1					
ANR	3032619	Argument	ap		3031825	0					
ANR	3032620	Identifier	ap		3031825	0					
ANR	3032621	Argument	uintmax_t		3031825	1					
ANR	3032622	Identifier	uintmax_t		3031825	0					
ANR	3032623	BreakStatement	break ;	832:7:21245:21250	3031825	41	True				
ANR	3032624	Label	case LM_PTRDIFF_T :	835:6:21286:21303	3031825	42	True				
ANR	3032625	Identifier	LM_PTRDIFF_T		3031825	0					
ANR	3032626	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , ptrdiff_t )"	836:7:21312:21352	3031825	43	True				
ANR	3032627	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , ptrdiff_t )"		3031825	0		=			
ANR	3032628	Identifier	i_num		3031825	0					
ANR	3032629	CastExpression	"( wide_int ) va_arg ( ap , ptrdiff_t )"		3031825	1					
ANR	3032630	CastTarget	wide_int		3031825	0					
ANR	3032631	CallExpression	"va_arg ( ap , ptrdiff_t )"		3031825	1					
ANR	3032632	Callee	va_arg		3031825	0					
ANR	3032633	Identifier	va_arg		3031825	0					
ANR	3032634	ArgumentList	ap		3031825	1					
ANR	3032635	Argument	ap		3031825	0					
ANR	3032636	Identifier	ap		3031825	0					
ANR	3032637	Argument	ptrdiff_t		3031825	1					
ANR	3032638	Identifier	ptrdiff_t		3031825	0					
ANR	3032639	BreakStatement	break ;	837:7:21361:21366	3031825	44	True				
ANR	3032640	Label	case LM_PHP_INT_T :	839:6:21381:21398	3031825	45	True				
ANR	3032641	Identifier	LM_PHP_INT_T		3031825	0					
ANR	3032642	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , zend_ulong )"	840:7:21407:21448	3031825	46	True				
ANR	3032643	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , zend_ulong )"		3031825	0		=			
ANR	3032644	Identifier	i_num		3031825	0					
ANR	3032645	CastExpression	"( wide_int ) va_arg ( ap , zend_ulong )"		3031825	1					
ANR	3032646	CastTarget	wide_int		3031825	0					
ANR	3032647	CallExpression	"va_arg ( ap , zend_ulong )"		3031825	1					
ANR	3032648	Callee	va_arg		3031825	0					
ANR	3032649	Identifier	va_arg		3031825	0					
ANR	3032650	ArgumentList	ap		3031825	1					
ANR	3032651	Argument	ap		3031825	0					
ANR	3032652	Identifier	ap		3031825	0					
ANR	3032653	Argument	zend_ulong		3031825	1					
ANR	3032654	Identifier	zend_ulong		3031825	0					
ANR	3032655	BreakStatement	break ;	841:7:21457:21462	3031825	47	True				
ANR	3032656	Label	case 'd' :	847:4:21580:21588	3031825	4	True				
ANR	3032657	Label	case 'i' :	848:4:21594:21602	3031825	5	True				
ANR	3032658	IfStatement	if ( ( * fmt ) != 'u' )		3031825	6					
ANR	3032659	Condition	( * fmt ) != 'u'	852:9:21673:21685	3031825	0	True				
ANR	3032660	EqualityExpression	( * fmt ) != 'u'		3031825	0		!=			
ANR	3032661	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032662	UnaryOperator	*		3031825	0					
ANR	3032663	Identifier	fmt		3031825	1					
ANR	3032664	PrimaryExpression	'u'		3031825	1					
ANR	3032665	CompoundStatement		265:24:5403:5403	3031825	1					
ANR	3032666	SwitchStatement	switch ( modifier )		3031825	0					
ANR	3032667	Condition	modifier	853:13:21703:21710	3031825	0	True				
ANR	3032668	Identifier	modifier		3031825	0					
ANR	3032669	CompoundStatement		266:23:5428:5428	3031825	1					
ANR	3032670	Label	default :	854:7:21722:21729	3031825	0	True				
ANR	3032671	Identifier	default		3031825	0					
ANR	3032672	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , int )"	855:8:21739:21773	3031825	1	True				
ANR	3032673	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , int )"		3031825	0		=			
ANR	3032674	Identifier	i_num		3031825	0					
ANR	3032675	CastExpression	"( wide_int ) va_arg ( ap , int )"		3031825	1					
ANR	3032676	CastTarget	wide_int		3031825	0					
ANR	3032677	CallExpression	"va_arg ( ap , int )"		3031825	1					
ANR	3032678	Callee	va_arg		3031825	0					
ANR	3032679	Identifier	va_arg		3031825	0					
ANR	3032680	ArgumentList	ap		3031825	1					
ANR	3032681	Argument	ap		3031825	0					
ANR	3032682	Identifier	ap		3031825	0					
ANR	3032683	Argument	int		3031825	1					
ANR	3032684	Identifier	int		3031825	0					
ANR	3032685	BreakStatement	break ;	856:8:21783:21788	3031825	2	True				
ANR	3032686	Label	case LM_LONG_DOUBLE :	857:7:21797:21816	3031825	3	True				
ANR	3032687	Identifier	LM_LONG_DOUBLE		3031825	0					
ANR	3032688	GotoStatement	goto fmt_error ;	858:8:21826:21840	3031825	4	True				
ANR	3032689	Identifier	fmt_error		3031825	0					
ANR	3032690	Label	case LM_LONG :	859:7:21849:21861	3031825	5	True				
ANR	3032691	Identifier	LM_LONG		3031825	0					
ANR	3032692	Statement	i_num	860:8:21871:21875	3031825	6	True				
ANR	3032693	Statement	=	860:14:21877:21877	3031825	7	True				
ANR	3032694	Statement	(	860:16:21879:21879	3031825	8	True				
ANR	3032695	Statement	wide_int	860:17:21880:21887	3031825	9	True				
ANR	3032696	Statement	)	860:25:21888:21888	3031825	10	True				
ANR	3032697	Statement	va_arg	860:27:21890:21895	3031825	11	True				
ANR	3032698	Statement	(	860:33:21896:21896	3031825	12	True				
ANR	3032699	Statement	ap	860:34:21897:21898	3031825	13	True				
ANR	3032700	Statement	","	860:36:21899:21899	3031825	14	True				
ANR	3032701	Statement	long	860:38:21901:21904	3031825	15	True				
ANR	3032702	Statement	int	860:43:21906:21908	3031825	16	True				
ANR	3032703	Statement	)	860:46:21909:21909	3031825	17	True				
ANR	3032704	ExpressionStatement		860:47:21910:21910	3031825	18	True				
ANR	3032705	BreakStatement	break ;	861:8:21920:21925	3031825	19	True				
ANR	3032706	Label	case LM_SIZE_T :	862:7:21934:21948	3031825	20	True				
ANR	3032707	Identifier	LM_SIZE_T		3031825	0					
ANR	3032708	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , ssize_t )"	864:8:21977:22015	3031825	21	True				
ANR	3032709	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , ssize_t )"		3031825	0		=			
ANR	3032710	Identifier	i_num		3031825	0					
ANR	3032711	CastExpression	"( wide_int ) va_arg ( ap , ssize_t )"		3031825	1					
ANR	3032712	CastTarget	wide_int		3031825	0					
ANR	3032713	CallExpression	"va_arg ( ap , ssize_t )"		3031825	1					
ANR	3032714	Callee	va_arg		3031825	0					
ANR	3032715	Identifier	va_arg		3031825	0					
ANR	3032716	ArgumentList	ap		3031825	1					
ANR	3032717	Argument	ap		3031825	0					
ANR	3032718	Identifier	ap		3031825	0					
ANR	3032719	Argument	ssize_t		3031825	1					
ANR	3032720	Identifier	ssize_t		3031825	0					
ANR	3032721	BreakStatement	break ;	868:8:22085:22090	3031825	22	True				
ANR	3032722	Label	case LM_LONG_LONG :	870:7:22120:22137	3031825	23	True				
ANR	3032723	Identifier	LM_LONG_LONG		3031825	0					
ANR	3032724	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , wide_int )"	871:8:22147:22186	3031825	24	True				
ANR	3032725	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , wide_int )"		3031825	0		=			
ANR	3032726	Identifier	i_num		3031825	0					
ANR	3032727	CastExpression	"( wide_int ) va_arg ( ap , wide_int )"		3031825	1					
ANR	3032728	CastTarget	wide_int		3031825	0					
ANR	3032729	CallExpression	"va_arg ( ap , wide_int )"		3031825	1					
ANR	3032730	Callee	va_arg		3031825	0					
ANR	3032731	Identifier	va_arg		3031825	0					
ANR	3032732	ArgumentList	ap		3031825	1					
ANR	3032733	Argument	ap		3031825	0					
ANR	3032734	Identifier	ap		3031825	0					
ANR	3032735	Argument	wide_int		3031825	1					
ANR	3032736	Identifier	wide_int		3031825	0					
ANR	3032737	BreakStatement	break ;	872:8:22196:22201	3031825	25	True				
ANR	3032738	Label	case LM_INTMAX_T :	875:7:22237:22253	3031825	26	True				
ANR	3032739	Identifier	LM_INTMAX_T		3031825	0					
ANR	3032740	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , intmax_t )"	876:8:22263:22302	3031825	27	True				
ANR	3032741	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , intmax_t )"		3031825	0		=			
ANR	3032742	Identifier	i_num		3031825	0					
ANR	3032743	CastExpression	"( wide_int ) va_arg ( ap , intmax_t )"		3031825	1					
ANR	3032744	CastTarget	wide_int		3031825	0					
ANR	3032745	CallExpression	"va_arg ( ap , intmax_t )"		3031825	1					
ANR	3032746	Callee	va_arg		3031825	0					
ANR	3032747	Identifier	va_arg		3031825	0					
ANR	3032748	ArgumentList	ap		3031825	1					
ANR	3032749	Argument	ap		3031825	0					
ANR	3032750	Identifier	ap		3031825	0					
ANR	3032751	Argument	intmax_t		3031825	1					
ANR	3032752	Identifier	intmax_t		3031825	0					
ANR	3032753	BreakStatement	break ;	877:8:22312:22317	3031825	28	True				
ANR	3032754	Label	case LM_PTRDIFF_T :	880:7:22354:22371	3031825	29	True				
ANR	3032755	Identifier	LM_PTRDIFF_T		3031825	0					
ANR	3032756	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , ptrdiff_t )"	881:8:22381:22421	3031825	30	True				
ANR	3032757	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , ptrdiff_t )"		3031825	0		=			
ANR	3032758	Identifier	i_num		3031825	0					
ANR	3032759	CastExpression	"( wide_int ) va_arg ( ap , ptrdiff_t )"		3031825	1					
ANR	3032760	CastTarget	wide_int		3031825	0					
ANR	3032761	CallExpression	"va_arg ( ap , ptrdiff_t )"		3031825	1					
ANR	3032762	Callee	va_arg		3031825	0					
ANR	3032763	Identifier	va_arg		3031825	0					
ANR	3032764	ArgumentList	ap		3031825	1					
ANR	3032765	Argument	ap		3031825	0					
ANR	3032766	Identifier	ap		3031825	0					
ANR	3032767	Argument	ptrdiff_t		3031825	1					
ANR	3032768	Identifier	ptrdiff_t		3031825	0					
ANR	3032769	BreakStatement	break ;	882:8:22431:22436	3031825	31	True				
ANR	3032770	Label	case LM_PHP_INT_T :	884:7:22452:22469	3031825	32	True				
ANR	3032771	Identifier	LM_PHP_INT_T		3031825	0					
ANR	3032772	ExpressionStatement	"i_num = ( wide_int ) va_arg ( ap , zend_long )"	885:8:22479:22519	3031825	33	True				
ANR	3032773	AssignmentExpression	"i_num = ( wide_int ) va_arg ( ap , zend_long )"		3031825	0		=			
ANR	3032774	Identifier	i_num		3031825	0					
ANR	3032775	CastExpression	"( wide_int ) va_arg ( ap , zend_long )"		3031825	1					
ANR	3032776	CastTarget	wide_int		3031825	0					
ANR	3032777	CallExpression	"va_arg ( ap , zend_long )"		3031825	1					
ANR	3032778	Callee	va_arg		3031825	0					
ANR	3032779	Identifier	va_arg		3031825	0					
ANR	3032780	ArgumentList	ap		3031825	1					
ANR	3032781	Argument	ap		3031825	0					
ANR	3032782	Identifier	ap		3031825	0					
ANR	3032783	Argument	zend_long		3031825	1					
ANR	3032784	Identifier	zend_long		3031825	0					
ANR	3032785	BreakStatement	break ;	886:8:22529:22534	3031825	34	True				
ANR	3032786	ExpressionStatement	"s = ap_php_conv_10 ( i_num , ( * fmt ) == 'u' , & is_negative , & num_buf [ NUM_BUF_SIZE ] , & s_len )"	889:5:22556:22650	3031825	7	True				
ANR	3032787	AssignmentExpression	"s = ap_php_conv_10 ( i_num , ( * fmt ) == 'u' , & is_negative , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3031825	0		=			
ANR	3032788	Identifier	s		3031825	0					
ANR	3032789	CallExpression	"ap_php_conv_10 ( i_num , ( * fmt ) == 'u' , & is_negative , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3031825	1					
ANR	3032790	Callee	ap_php_conv_10		3031825	0					
ANR	3032791	Identifier	ap_php_conv_10		3031825	0					
ANR	3032792	ArgumentList	i_num		3031825	1					
ANR	3032793	Argument	i_num		3031825	0					
ANR	3032794	Identifier	i_num		3031825	0					
ANR	3032795	Argument	( * fmt ) == 'u'		3031825	1					
ANR	3032796	EqualityExpression	( * fmt ) == 'u'		3031825	0		==			
ANR	3032797	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032798	UnaryOperator	*		3031825	0					
ANR	3032799	Identifier	fmt		3031825	1					
ANR	3032800	PrimaryExpression	'u'		3031825	1					
ANR	3032801	Argument	& is_negative		3031825	2					
ANR	3032802	UnaryOperationExpression	& is_negative		3031825	0					
ANR	3032803	UnaryOperator	&		3031825	0					
ANR	3032804	Identifier	is_negative		3031825	1					
ANR	3032805	Argument	& num_buf [ NUM_BUF_SIZE ]		3031825	3					
ANR	3032806	UnaryOperationExpression	& num_buf [ NUM_BUF_SIZE ]		3031825	0					
ANR	3032807	UnaryOperator	&		3031825	0					
ANR	3032808	ArrayIndexing	num_buf [ NUM_BUF_SIZE ]		3031825	1					
ANR	3032809	Identifier	num_buf		3031825	0					
ANR	3032810	Identifier	NUM_BUF_SIZE		3031825	1					
ANR	3032811	Argument	& s_len		3031825	4					
ANR	3032812	UnaryOperationExpression	& s_len		3031825	0					
ANR	3032813	UnaryOperator	&		3031825	0					
ANR	3032814	Identifier	s_len		3031825	1					
ANR	3032815	ExpressionStatement	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"	891:5:22657:22709	3031825	8	True				
ANR	3032816	CallExpression	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"		3031825	0					
ANR	3032817	Callee	FIX_PRECISION		3031825	0					
ANR	3032818	Identifier	FIX_PRECISION		3031825	0					
ANR	3032819	ArgumentList	adjust_precision		3031825	1					
ANR	3032820	Argument	adjust_precision		3031825	0					
ANR	3032821	Identifier	adjust_precision		3031825	0					
ANR	3032822	Argument	precision		3031825	1					
ANR	3032823	Identifier	precision		3031825	0					
ANR	3032824	Argument	s		3031825	2					
ANR	3032825	Identifier	s		3031825	0					
ANR	3032826	Argument	s_len		3031825	3					
ANR	3032827	Identifier	s_len		3031825	0					
ANR	3032828	IfStatement	if ( * fmt != 'u' )		3031825	9					
ANR	3032829	Condition	* fmt != 'u'	893:9:22721:22731	3031825	0	True				
ANR	3032830	EqualityExpression	* fmt != 'u'		3031825	0		!=			
ANR	3032831	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032832	UnaryOperator	*		3031825	0					
ANR	3032833	Identifier	fmt		3031825	1					
ANR	3032834	PrimaryExpression	'u'		3031825	1					
ANR	3032835	CompoundStatement		306:22:6449:6449	3031825	1					
ANR	3032836	IfStatement	if ( is_negative )		3031825	0					
ANR	3032837	Condition	is_negative	894:10:22746:22756	3031825	0	True				
ANR	3032838	Identifier	is_negative		3031825	0					
ANR	3032839	CompoundStatement		307:23:6474:6474	3031825	1					
ANR	3032840	ExpressionStatement	prefix_char = '-'	895:7:22768:22785	3031825	0	True				
ANR	3032841	AssignmentExpression	prefix_char = '-'		3031825	0		=			
ANR	3032842	Identifier	prefix_char		3031825	0					
ANR	3032843	PrimaryExpression	'-'		3031825	1					
ANR	3032844	ElseStatement	else		3031825	0					
ANR	3032845	IfStatement	if ( print_sign )		3031825	0					
ANR	3032846	Condition	print_sign	896:17:22804:22813	3031825	0	True				
ANR	3032847	Identifier	print_sign		3031825	0					
ANR	3032848	CompoundStatement		309:29:6531:6531	3031825	1					
ANR	3032849	ExpressionStatement	prefix_char = '+'	897:7:22825:22842	3031825	0	True				
ANR	3032850	AssignmentExpression	prefix_char = '+'		3031825	0		=			
ANR	3032851	Identifier	prefix_char		3031825	0					
ANR	3032852	PrimaryExpression	'+'		3031825	1					
ANR	3032853	ElseStatement	else		3031825	0					
ANR	3032854	IfStatement	if ( print_blank )		3031825	0					
ANR	3032855	Condition	print_blank	898:17:22861:22871	3031825	0	True				
ANR	3032856	Identifier	print_blank		3031825	0					
ANR	3032857	CompoundStatement		311:30:6589:6589	3031825	1					
ANR	3032858	ExpressionStatement	prefix_char = ' '	899:7:22883:22900	3031825	0	True				
ANR	3032859	AssignmentExpression	prefix_char = ' '		3031825	0		=			
ANR	3032860	Identifier	prefix_char		3031825	0					
ANR	3032861	PrimaryExpression	' '		3031825	1					
ANR	3032862	BreakStatement	break ;	902:5:22922:22927	3031825	10	True				
ANR	3032863	Label	case 'o' :	905:4:22935:22943	3031825	11	True				
ANR	3032864	SwitchStatement	switch ( modifier )		3031825	12					
ANR	3032865	Condition	modifier	906:12:22957:22964	3031825	0	True				
ANR	3032866	Identifier	modifier		3031825	0					
ANR	3032867	CompoundStatement		319:22:6682:6682	3031825	1					
ANR	3032868	Label	default :	907:6:22975:22982	3031825	0	True				
ANR	3032869	Identifier	default		3031825	0					
ANR	3032870	Statement	ui_num	908:7:22991:22996	3031825	1	True				
ANR	3032871	Statement	=	908:14:22998:22998	3031825	2	True				
ANR	3032872	Statement	(	908:16:23000:23000	3031825	3	True				
ANR	3032873	Statement	u_wide_int	908:17:23001:23010	3031825	4	True				
ANR	3032874	Statement	)	908:27:23011:23011	3031825	5	True				
ANR	3032875	Statement	va_arg	908:29:23013:23018	3031825	6	True				
ANR	3032876	Statement	(	908:35:23019:23019	3031825	7	True				
ANR	3032877	Statement	ap	908:36:23020:23021	3031825	8	True				
ANR	3032878	Statement	","	908:38:23022:23022	3031825	9	True				
ANR	3032879	Statement	unsigned	908:40:23024:23031	3031825	10	True				
ANR	3032880	Statement	int	908:49:23033:23035	3031825	11	True				
ANR	3032881	Statement	)	908:52:23036:23036	3031825	12	True				
ANR	3032882	ExpressionStatement		908:53:23037:23037	3031825	13	True				
ANR	3032883	BreakStatement	break ;	909:7:23046:23051	3031825	14	True				
ANR	3032884	Label	case LM_LONG_DOUBLE :	910:6:23059:23078	3031825	15	True				
ANR	3032885	Identifier	LM_LONG_DOUBLE		3031825	0					
ANR	3032886	GotoStatement	goto fmt_error ;	911:7:23087:23101	3031825	16	True				
ANR	3032887	Identifier	fmt_error		3031825	0					
ANR	3032888	Label	case LM_LONG :	912:6:23109:23121	3031825	17	True				
ANR	3032889	Identifier	LM_LONG		3031825	0					
ANR	3032890	Statement	ui_num	913:7:23130:23135	3031825	18	True				
ANR	3032891	Statement	=	913:14:23137:23137	3031825	19	True				
ANR	3032892	Statement	(	913:16:23139:23139	3031825	20	True				
ANR	3032893	Statement	u_wide_int	913:17:23140:23149	3031825	21	True				
ANR	3032894	Statement	)	913:27:23150:23150	3031825	22	True				
ANR	3032895	Statement	va_arg	913:29:23152:23157	3031825	23	True				
ANR	3032896	Statement	(	913:35:23158:23158	3031825	24	True				
ANR	3032897	Statement	ap	913:36:23159:23160	3031825	25	True				
ANR	3032898	Statement	","	913:38:23161:23161	3031825	26	True				
ANR	3032899	Statement	unsigned	913:40:23163:23170	3031825	27	True				
ANR	3032900	Statement	long	913:49:23172:23175	3031825	28	True				
ANR	3032901	Statement	int	913:54:23177:23179	3031825	29	True				
ANR	3032902	Statement	)	913:57:23180:23180	3031825	30	True				
ANR	3032903	ExpressionStatement		913:58:23181:23181	3031825	31	True				
ANR	3032904	BreakStatement	break ;	914:7:23190:23195	3031825	32	True				
ANR	3032905	Label	case LM_SIZE_T :	915:6:23203:23217	3031825	33	True				
ANR	3032906	Identifier	LM_SIZE_T		3031825	0					
ANR	3032907	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , size_t )"	916:7:23226:23266	3031825	34	True				
ANR	3032908	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , size_t )"		3031825	0		=			
ANR	3032909	Identifier	ui_num		3031825	0					
ANR	3032910	CastExpression	"( u_wide_int ) va_arg ( ap , size_t )"		3031825	1					
ANR	3032911	CastTarget	u_wide_int		3031825	0					
ANR	3032912	CallExpression	"va_arg ( ap , size_t )"		3031825	1					
ANR	3032913	Callee	va_arg		3031825	0					
ANR	3032914	Identifier	va_arg		3031825	0					
ANR	3032915	ArgumentList	ap		3031825	1					
ANR	3032916	Argument	ap		3031825	0					
ANR	3032917	Identifier	ap		3031825	0					
ANR	3032918	Argument	size_t		3031825	1					
ANR	3032919	Identifier	size_t		3031825	0					
ANR	3032920	BreakStatement	break ;	917:7:23275:23280	3031825	35	True				
ANR	3032921	Label	case LM_LONG_LONG :	919:6:23309:23326	3031825	36	True				
ANR	3032922	Identifier	LM_LONG_LONG		3031825	0					
ANR	3032923	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , u_wide_int )"	920:7:23335:23379	3031825	37	True				
ANR	3032924	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , u_wide_int )"		3031825	0		=			
ANR	3032925	Identifier	ui_num		3031825	0					
ANR	3032926	CastExpression	"( u_wide_int ) va_arg ( ap , u_wide_int )"		3031825	1					
ANR	3032927	CastTarget	u_wide_int		3031825	0					
ANR	3032928	CallExpression	"va_arg ( ap , u_wide_int )"		3031825	1					
ANR	3032929	Callee	va_arg		3031825	0					
ANR	3032930	Identifier	va_arg		3031825	0					
ANR	3032931	ArgumentList	ap		3031825	1					
ANR	3032932	Argument	ap		3031825	0					
ANR	3032933	Identifier	ap		3031825	0					
ANR	3032934	Argument	u_wide_int		3031825	1					
ANR	3032935	Identifier	u_wide_int		3031825	0					
ANR	3032936	BreakStatement	break ;	921:7:23388:23393	3031825	38	True				
ANR	3032937	Label	case LM_INTMAX_T :	924:6:23428:23444	3031825	39	True				
ANR	3032938	Identifier	LM_INTMAX_T		3031825	0					
ANR	3032939	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , uintmax_t )"	925:7:23453:23496	3031825	40	True				
ANR	3032940	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , uintmax_t )"		3031825	0		=			
ANR	3032941	Identifier	ui_num		3031825	0					
ANR	3032942	CastExpression	"( u_wide_int ) va_arg ( ap , uintmax_t )"		3031825	1					
ANR	3032943	CastTarget	u_wide_int		3031825	0					
ANR	3032944	CallExpression	"va_arg ( ap , uintmax_t )"		3031825	1					
ANR	3032945	Callee	va_arg		3031825	0					
ANR	3032946	Identifier	va_arg		3031825	0					
ANR	3032947	ArgumentList	ap		3031825	1					
ANR	3032948	Argument	ap		3031825	0					
ANR	3032949	Identifier	ap		3031825	0					
ANR	3032950	Argument	uintmax_t		3031825	1					
ANR	3032951	Identifier	uintmax_t		3031825	0					
ANR	3032952	BreakStatement	break ;	926:7:23505:23510	3031825	41	True				
ANR	3032953	Label	case LM_PTRDIFF_T :	929:6:23546:23563	3031825	42	True				
ANR	3032954	Identifier	LM_PTRDIFF_T		3031825	0					
ANR	3032955	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , ptrdiff_t )"	930:7:23572:23615	3031825	43	True				
ANR	3032956	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , ptrdiff_t )"		3031825	0		=			
ANR	3032957	Identifier	ui_num		3031825	0					
ANR	3032958	CastExpression	"( u_wide_int ) va_arg ( ap , ptrdiff_t )"		3031825	1					
ANR	3032959	CastTarget	u_wide_int		3031825	0					
ANR	3032960	CallExpression	"va_arg ( ap , ptrdiff_t )"		3031825	1					
ANR	3032961	Callee	va_arg		3031825	0					
ANR	3032962	Identifier	va_arg		3031825	0					
ANR	3032963	ArgumentList	ap		3031825	1					
ANR	3032964	Argument	ap		3031825	0					
ANR	3032965	Identifier	ap		3031825	0					
ANR	3032966	Argument	ptrdiff_t		3031825	1					
ANR	3032967	Identifier	ptrdiff_t		3031825	0					
ANR	3032968	BreakStatement	break ;	931:7:23624:23629	3031825	44	True				
ANR	3032969	Label	case LM_PHP_INT_T :	933:6:23644:23661	3031825	45	True				
ANR	3032970	Identifier	LM_PHP_INT_T		3031825	0					
ANR	3032971	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , zend_ulong )"	934:7:23670:23714	3031825	46	True				
ANR	3032972	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , zend_ulong )"		3031825	0		=			
ANR	3032973	Identifier	ui_num		3031825	0					
ANR	3032974	CastExpression	"( u_wide_int ) va_arg ( ap , zend_ulong )"		3031825	1					
ANR	3032975	CastTarget	u_wide_int		3031825	0					
ANR	3032976	CallExpression	"va_arg ( ap , zend_ulong )"		3031825	1					
ANR	3032977	Callee	va_arg		3031825	0					
ANR	3032978	Identifier	va_arg		3031825	0					
ANR	3032979	ArgumentList	ap		3031825	1					
ANR	3032980	Argument	ap		3031825	0					
ANR	3032981	Identifier	ap		3031825	0					
ANR	3032982	Argument	zend_ulong		3031825	1					
ANR	3032983	Identifier	zend_ulong		3031825	0					
ANR	3032984	BreakStatement	break ;	935:7:23723:23728	3031825	47	True				
ANR	3032985	ExpressionStatement	"s = ap_php_conv_p2 ( ui_num , 3 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"	937:5:23742:23809	3031825	13	True				
ANR	3032986	AssignmentExpression	"s = ap_php_conv_p2 ( ui_num , 3 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3031825	0		=			
ANR	3032987	Identifier	s		3031825	0					
ANR	3032988	CallExpression	"ap_php_conv_p2 ( ui_num , 3 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3031825	1					
ANR	3032989	Callee	ap_php_conv_p2		3031825	0					
ANR	3032990	Identifier	ap_php_conv_p2		3031825	0					
ANR	3032991	ArgumentList	ui_num		3031825	1					
ANR	3032992	Argument	ui_num		3031825	0					
ANR	3032993	Identifier	ui_num		3031825	0					
ANR	3032994	Argument	3		3031825	1					
ANR	3032995	PrimaryExpression	3		3031825	0					
ANR	3032996	Argument	* fmt		3031825	2					
ANR	3032997	UnaryOperationExpression	* fmt		3031825	0					
ANR	3032998	UnaryOperator	*		3031825	0					
ANR	3032999	Identifier	fmt		3031825	1					
ANR	3033000	Argument	& num_buf [ NUM_BUF_SIZE ]		3031825	3					
ANR	3033001	UnaryOperationExpression	& num_buf [ NUM_BUF_SIZE ]		3031825	0					
ANR	3033002	UnaryOperator	&		3031825	0					
ANR	3033003	ArrayIndexing	num_buf [ NUM_BUF_SIZE ]		3031825	1					
ANR	3033004	Identifier	num_buf		3031825	0					
ANR	3033005	Identifier	NUM_BUF_SIZE		3031825	1					
ANR	3033006	Argument	& s_len		3031825	4					
ANR	3033007	UnaryOperationExpression	& s_len		3031825	0					
ANR	3033008	UnaryOperator	&		3031825	0					
ANR	3033009	Identifier	s_len		3031825	1					
ANR	3033010	ExpressionStatement	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"	938:5:23816:23868	3031825	14	True				
ANR	3033011	CallExpression	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"		3031825	0					
ANR	3033012	Callee	FIX_PRECISION		3031825	0					
ANR	3033013	Identifier	FIX_PRECISION		3031825	0					
ANR	3033014	ArgumentList	adjust_precision		3031825	1					
ANR	3033015	Argument	adjust_precision		3031825	0					
ANR	3033016	Identifier	adjust_precision		3031825	0					
ANR	3033017	Argument	precision		3031825	1					
ANR	3033018	Identifier	precision		3031825	0					
ANR	3033019	Argument	s		3031825	2					
ANR	3033020	Identifier	s		3031825	0					
ANR	3033021	Argument	s_len		3031825	3					
ANR	3033022	Identifier	s_len		3031825	0					
ANR	3033023	IfStatement	if ( alternate_form && * s != '0' )		3031825	15					
ANR	3033024	Condition	alternate_form && * s != '0'	939:9:23879:23905	3031825	0	True				
ANR	3033025	AndExpression	alternate_form && * s != '0'		3031825	0		&&			
ANR	3033026	Identifier	alternate_form		3031825	0					
ANR	3033027	EqualityExpression	* s != '0'		3031825	1		!=			
ANR	3033028	UnaryOperationExpression	* s		3031825	0					
ANR	3033029	UnaryOperator	*		3031825	0					
ANR	3033030	Identifier	s		3031825	1					
ANR	3033031	PrimaryExpression	'0'		3031825	1					
ANR	3033032	CompoundStatement		352:38:7623:7623	3031825	1					
ANR	3033033	ExpressionStatement	* -- s = '0'	940:6:23916:23926	3031825	0	True				
ANR	3033034	AssignmentExpression	* -- s = '0'		3031825	0		=			
ANR	3033035	UnaryOperationExpression	* -- s		3031825	0					
ANR	3033036	UnaryOperator	*		3031825	0					
ANR	3033037	UnaryExpression	-- s		3031825	1					
ANR	3033038	IncDec	--		3031825	0					
ANR	3033039	Identifier	s		3031825	1					
ANR	3033040	PrimaryExpression	'0'		3031825	1					
ANR	3033041	ExpressionStatement	s_len ++	941:6:23934:23941	3031825	1	True				
ANR	3033042	PostIncDecOperationExpression	s_len ++		3031825	0					
ANR	3033043	Identifier	s_len		3031825	0					
ANR	3033044	IncDec	++		3031825	1					
ANR	3033045	BreakStatement	break ;	943:5:23955:23960	3031825	16	True				
ANR	3033046	Label	case 'x' :	946:4:23968:23976	3031825	17	True				
ANR	3033047	Label	case 'X' :	947:4:23982:23990	3031825	18	True				
ANR	3033048	SwitchStatement	switch ( modifier )		3031825	19					
ANR	3033049	Condition	modifier	948:12:24004:24011	3031825	0	True				
ANR	3033050	Identifier	modifier		3031825	0					
ANR	3033051	CompoundStatement		361:22:7729:7729	3031825	1					
ANR	3033052	Label	default :	949:6:24022:24029	3031825	0	True				
ANR	3033053	Identifier	default		3031825	0					
ANR	3033054	Statement	ui_num	950:7:24038:24043	3031825	1	True				
ANR	3033055	Statement	=	950:14:24045:24045	3031825	2	True				
ANR	3033056	Statement	(	950:16:24047:24047	3031825	3	True				
ANR	3033057	Statement	u_wide_int	950:17:24048:24057	3031825	4	True				
ANR	3033058	Statement	)	950:27:24058:24058	3031825	5	True				
ANR	3033059	Statement	va_arg	950:29:24060:24065	3031825	6	True				
ANR	3033060	Statement	(	950:35:24066:24066	3031825	7	True				
ANR	3033061	Statement	ap	950:36:24067:24068	3031825	8	True				
ANR	3033062	Statement	","	950:38:24069:24069	3031825	9	True				
ANR	3033063	Statement	unsigned	950:40:24071:24078	3031825	10	True				
ANR	3033064	Statement	int	950:49:24080:24082	3031825	11	True				
ANR	3033065	Statement	)	950:52:24083:24083	3031825	12	True				
ANR	3033066	ExpressionStatement		950:53:24084:24084	3031825	13	True				
ANR	3033067	BreakStatement	break ;	951:7:24093:24098	3031825	14	True				
ANR	3033068	Label	case LM_LONG_DOUBLE :	952:6:24106:24125	3031825	15	True				
ANR	3033069	Identifier	LM_LONG_DOUBLE		3031825	0					
ANR	3033070	GotoStatement	goto fmt_error ;	953:7:24134:24148	3031825	16	True				
ANR	3033071	Identifier	fmt_error		3031825	0					
ANR	3033072	Label	case LM_LONG :	954:6:24156:24168	3031825	17	True				
ANR	3033073	Identifier	LM_LONG		3031825	0					
ANR	3033074	Statement	ui_num	955:7:24177:24182	3031825	18	True				
ANR	3033075	Statement	=	955:14:24184:24184	3031825	19	True				
ANR	3033076	Statement	(	955:16:24186:24186	3031825	20	True				
ANR	3033077	Statement	u_wide_int	955:17:24187:24196	3031825	21	True				
ANR	3033078	Statement	)	955:27:24197:24197	3031825	22	True				
ANR	3033079	Statement	va_arg	955:29:24199:24204	3031825	23	True				
ANR	3033080	Statement	(	955:35:24205:24205	3031825	24	True				
ANR	3033081	Statement	ap	955:36:24206:24207	3031825	25	True				
ANR	3033082	Statement	","	955:38:24208:24208	3031825	26	True				
ANR	3033083	Statement	unsigned	955:40:24210:24217	3031825	27	True				
ANR	3033084	Statement	long	955:49:24219:24222	3031825	28	True				
ANR	3033085	Statement	int	955:54:24224:24226	3031825	29	True				
ANR	3033086	Statement	)	955:57:24227:24227	3031825	30	True				
ANR	3033087	ExpressionStatement		955:58:24228:24228	3031825	31	True				
ANR	3033088	BreakStatement	break ;	956:7:24237:24242	3031825	32	True				
ANR	3033089	Label	case LM_SIZE_T :	957:6:24250:24264	3031825	33	True				
ANR	3033090	Identifier	LM_SIZE_T		3031825	0					
ANR	3033091	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , size_t )"	958:7:24273:24313	3031825	34	True				
ANR	3033092	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , size_t )"		3031825	0		=			
ANR	3033093	Identifier	ui_num		3031825	0					
ANR	3033094	CastExpression	"( u_wide_int ) va_arg ( ap , size_t )"		3031825	1					
ANR	3033095	CastTarget	u_wide_int		3031825	0					
ANR	3033096	CallExpression	"va_arg ( ap , size_t )"		3031825	1					
ANR	3033097	Callee	va_arg		3031825	0					
ANR	3033098	Identifier	va_arg		3031825	0					
ANR	3033099	ArgumentList	ap		3031825	1					
ANR	3033100	Argument	ap		3031825	0					
ANR	3033101	Identifier	ap		3031825	0					
ANR	3033102	Argument	size_t		3031825	1					
ANR	3033103	Identifier	size_t		3031825	0					
ANR	3033104	BreakStatement	break ;	959:7:24322:24327	3031825	35	True				
ANR	3033105	Label	case LM_LONG_LONG :	961:6:24356:24373	3031825	36	True				
ANR	3033106	Identifier	LM_LONG_LONG		3031825	0					
ANR	3033107	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , u_wide_int )"	962:7:24382:24426	3031825	37	True				
ANR	3033108	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , u_wide_int )"		3031825	0		=			
ANR	3033109	Identifier	ui_num		3031825	0					
ANR	3033110	CastExpression	"( u_wide_int ) va_arg ( ap , u_wide_int )"		3031825	1					
ANR	3033111	CastTarget	u_wide_int		3031825	0					
ANR	3033112	CallExpression	"va_arg ( ap , u_wide_int )"		3031825	1					
ANR	3033113	Callee	va_arg		3031825	0					
ANR	3033114	Identifier	va_arg		3031825	0					
ANR	3033115	ArgumentList	ap		3031825	1					
ANR	3033116	Argument	ap		3031825	0					
ANR	3033117	Identifier	ap		3031825	0					
ANR	3033118	Argument	u_wide_int		3031825	1					
ANR	3033119	Identifier	u_wide_int		3031825	0					
ANR	3033120	BreakStatement	break ;	963:7:24435:24440	3031825	38	True				
ANR	3033121	Label	case LM_INTMAX_T :	966:6:24475:24491	3031825	39	True				
ANR	3033122	Identifier	LM_INTMAX_T		3031825	0					
ANR	3033123	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , uintmax_t )"	967:7:24500:24543	3031825	40	True				
ANR	3033124	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , uintmax_t )"		3031825	0		=			
ANR	3033125	Identifier	ui_num		3031825	0					
ANR	3033126	CastExpression	"( u_wide_int ) va_arg ( ap , uintmax_t )"		3031825	1					
ANR	3033127	CastTarget	u_wide_int		3031825	0					
ANR	3033128	CallExpression	"va_arg ( ap , uintmax_t )"		3031825	1					
ANR	3033129	Callee	va_arg		3031825	0					
ANR	3033130	Identifier	va_arg		3031825	0					
ANR	3033131	ArgumentList	ap		3031825	1					
ANR	3033132	Argument	ap		3031825	0					
ANR	3033133	Identifier	ap		3031825	0					
ANR	3033134	Argument	uintmax_t		3031825	1					
ANR	3033135	Identifier	uintmax_t		3031825	0					
ANR	3033136	BreakStatement	break ;	968:7:24552:24557	3031825	41	True				
ANR	3033137	Label	case LM_PTRDIFF_T :	971:6:24593:24610	3031825	42	True				
ANR	3033138	Identifier	LM_PTRDIFF_T		3031825	0					
ANR	3033139	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , ptrdiff_t )"	972:7:24619:24662	3031825	43	True				
ANR	3033140	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , ptrdiff_t )"		3031825	0		=			
ANR	3033141	Identifier	ui_num		3031825	0					
ANR	3033142	CastExpression	"( u_wide_int ) va_arg ( ap , ptrdiff_t )"		3031825	1					
ANR	3033143	CastTarget	u_wide_int		3031825	0					
ANR	3033144	CallExpression	"va_arg ( ap , ptrdiff_t )"		3031825	1					
ANR	3033145	Callee	va_arg		3031825	0					
ANR	3033146	Identifier	va_arg		3031825	0					
ANR	3033147	ArgumentList	ap		3031825	1					
ANR	3033148	Argument	ap		3031825	0					
ANR	3033149	Identifier	ap		3031825	0					
ANR	3033150	Argument	ptrdiff_t		3031825	1					
ANR	3033151	Identifier	ptrdiff_t		3031825	0					
ANR	3033152	BreakStatement	break ;	973:7:24671:24676	3031825	44	True				
ANR	3033153	Label	case LM_PHP_INT_T :	975:6:24691:24708	3031825	45	True				
ANR	3033154	Identifier	LM_PHP_INT_T		3031825	0					
ANR	3033155	ExpressionStatement	"ui_num = ( u_wide_int ) va_arg ( ap , zend_ulong )"	976:7:24717:24761	3031825	46	True				
ANR	3033156	AssignmentExpression	"ui_num = ( u_wide_int ) va_arg ( ap , zend_ulong )"		3031825	0		=			
ANR	3033157	Identifier	ui_num		3031825	0					
ANR	3033158	CastExpression	"( u_wide_int ) va_arg ( ap , zend_ulong )"		3031825	1					
ANR	3033159	CastTarget	u_wide_int		3031825	0					
ANR	3033160	CallExpression	"va_arg ( ap , zend_ulong )"		3031825	1					
ANR	3033161	Callee	va_arg		3031825	0					
ANR	3033162	Identifier	va_arg		3031825	0					
ANR	3033163	ArgumentList	ap		3031825	1					
ANR	3033164	Argument	ap		3031825	0					
ANR	3033165	Identifier	ap		3031825	0					
ANR	3033166	Argument	zend_ulong		3031825	1					
ANR	3033167	Identifier	zend_ulong		3031825	0					
ANR	3033168	BreakStatement	break ;	977:7:24770:24775	3031825	47	True				
ANR	3033169	ExpressionStatement	"s = ap_php_conv_p2 ( ui_num , 4 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"	979:5:24789:24856	3031825	20	True				
ANR	3033170	AssignmentExpression	"s = ap_php_conv_p2 ( ui_num , 4 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3031825	0		=			
ANR	3033171	Identifier	s		3031825	0					
ANR	3033172	CallExpression	"ap_php_conv_p2 ( ui_num , 4 , * fmt , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3031825	1					
ANR	3033173	Callee	ap_php_conv_p2		3031825	0					
ANR	3033174	Identifier	ap_php_conv_p2		3031825	0					
ANR	3033175	ArgumentList	ui_num		3031825	1					
ANR	3033176	Argument	ui_num		3031825	0					
ANR	3033177	Identifier	ui_num		3031825	0					
ANR	3033178	Argument	4		3031825	1					
ANR	3033179	PrimaryExpression	4		3031825	0					
ANR	3033180	Argument	* fmt		3031825	2					
ANR	3033181	UnaryOperationExpression	* fmt		3031825	0					
ANR	3033182	UnaryOperator	*		3031825	0					
ANR	3033183	Identifier	fmt		3031825	1					
ANR	3033184	Argument	& num_buf [ NUM_BUF_SIZE ]		3031825	3					
ANR	3033185	UnaryOperationExpression	& num_buf [ NUM_BUF_SIZE ]		3031825	0					
ANR	3033186	UnaryOperator	&		3031825	0					
ANR	3033187	ArrayIndexing	num_buf [ NUM_BUF_SIZE ]		3031825	1					
ANR	3033188	Identifier	num_buf		3031825	0					
ANR	3033189	Identifier	NUM_BUF_SIZE		3031825	1					
ANR	3033190	Argument	& s_len		3031825	4					
ANR	3033191	UnaryOperationExpression	& s_len		3031825	0					
ANR	3033192	UnaryOperator	&		3031825	0					
ANR	3033193	Identifier	s_len		3031825	1					
ANR	3033194	ExpressionStatement	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"	980:5:24863:24915	3031825	21	True				
ANR	3033195	CallExpression	"FIX_PRECISION ( adjust_precision , precision , s , s_len )"		3031825	0					
ANR	3033196	Callee	FIX_PRECISION		3031825	0					
ANR	3033197	Identifier	FIX_PRECISION		3031825	0					
ANR	3033198	ArgumentList	adjust_precision		3031825	1					
ANR	3033199	Argument	adjust_precision		3031825	0					
ANR	3033200	Identifier	adjust_precision		3031825	0					
ANR	3033201	Argument	precision		3031825	1					
ANR	3033202	Identifier	precision		3031825	0					
ANR	3033203	Argument	s		3031825	2					
ANR	3033204	Identifier	s		3031825	0					
ANR	3033205	Argument	s_len		3031825	3					
ANR	3033206	Identifier	s_len		3031825	0					
ANR	3033207	IfStatement	if ( alternate_form && i_num != 0 )		3031825	22					
ANR	3033208	Condition	alternate_form && i_num != 0	981:9:24926:24953	3031825	0	True				
ANR	3033209	AndExpression	alternate_form && i_num != 0		3031825	0		&&			
ANR	3033210	Identifier	alternate_form		3031825	0					
ANR	3033211	EqualityExpression	i_num != 0		3031825	1		!=			
ANR	3033212	Identifier	i_num		3031825	0					
ANR	3033213	PrimaryExpression	0		3031825	1					
ANR	3033214	CompoundStatement		394:39:8671:8671	3031825	1					
ANR	3033215	ExpressionStatement	* -- s = * fmt	982:6:24964:24975	3031825	0	True				
ANR	3033216	AssignmentExpression	* -- s = * fmt		3031825	0		=			
ANR	3033217	UnaryOperationExpression	* -- s		3031825	0					
ANR	3033218	UnaryOperator	*		3031825	0					
ANR	3033219	UnaryExpression	-- s		3031825	1					
ANR	3033220	IncDec	--		3031825	0					
ANR	3033221	Identifier	s		3031825	1					
ANR	3033222	UnaryOperationExpression	* fmt		3031825	1					
ANR	3033223	UnaryOperator	*		3031825	0					
ANR	3033224	Identifier	fmt		3031825	1					
ANR	3033225	ExpressionStatement	* -- s = '0'	983:6:25000:25010	3031825	1	True				
ANR	3033226	AssignmentExpression	* -- s = '0'		3031825	0		=			
ANR	3033227	UnaryOperationExpression	* -- s		3031825	0					
ANR	3033228	UnaryOperator	*		3031825	0					
ANR	3033229	UnaryExpression	-- s		3031825	1					
ANR	3033230	IncDec	--		3031825	0					
ANR	3033231	Identifier	s		3031825	1					
ANR	3033232	PrimaryExpression	'0'		3031825	1					
ANR	3033233	ExpressionStatement	s_len += 2	984:6:25018:25028	3031825	2	True				
ANR	3033234	AssignmentExpression	s_len += 2		3031825	0		+=			
ANR	3033235	Identifier	s_len		3031825	0					
ANR	3033236	PrimaryExpression	2		3031825	1					
ANR	3033237	BreakStatement	break ;	986:5:25042:25047	3031825	23	True				
ANR	3033238	Label	case 's' :	989:4:25055:25063	3031825	24	True				
ANR	3033239	Label	case 'v' :	990:4:25069:25077	3031825	25	True				
ANR	3033240	Statement	s	991:5:25084:25084	3031825	26	True				
ANR	3033241	Statement	=	991:7:25086:25086	3031825	27	True				
ANR	3033242	Statement	va_arg	991:9:25088:25093	3031825	28	True				
ANR	3033243	Statement	(	991:15:25094:25094	3031825	29	True				
ANR	3033244	Statement	ap	991:16:25095:25096	3031825	30	True				
ANR	3033245	Statement	","	991:18:25097:25097	3031825	31	True				
ANR	3033246	Statement	char	991:20:25099:25102	3031825	32	True				
ANR	3033247	Statement	*	991:25:25104:25104	3031825	33	True				
ANR	3033248	Statement	)	991:26:25105:25105	3031825	34	True				
ANR	3033249	ExpressionStatement		991:27:25106:25106	3031825	35	True				
ANR	3033250	IfStatement	if ( s != NULL )		3031825	36					
ANR	3033251	Condition	s != NULL	992:9:25117:25125	3031825	0	True				
ANR	3033252	EqualityExpression	s != NULL		3031825	0		!=			
ANR	3033253	Identifier	s		3031825	0					
ANR	3033254	Identifier	NULL		3031825	1					
ANR	3033255	CompoundStatement		405:20:8843:8843	3031825	1					
ANR	3033256	ExpressionStatement	s_len = strlen ( s )	993:6:25136:25153	3031825	0	True				
ANR	3033257	AssignmentExpression	s_len = strlen ( s )		3031825	0		=			
ANR	3033258	Identifier	s_len		3031825	0					
ANR	3033259	CallExpression	strlen ( s )		3031825	1					
ANR	3033260	Callee	strlen		3031825	0					
ANR	3033261	Identifier	strlen		3031825	0					
ANR	3033262	ArgumentList	s		3031825	1					
ANR	3033263	Argument	s		3031825	0					
ANR	3033264	Identifier	s		3031825	0					
ANR	3033265	IfStatement	if ( adjust_precision && precision < s_len )		3031825	1					
ANR	3033266	Condition	adjust_precision && precision < s_len	994:10:25165:25201	3031825	0	True				
ANR	3033267	AndExpression	adjust_precision && precision < s_len		3031825	0		&&			
ANR	3033268	Identifier	adjust_precision		3031825	0					
ANR	3033269	RelationalExpression	precision < s_len		3031825	1		<			
ANR	3033270	Identifier	precision		3031825	0					
ANR	3033271	Identifier	s_len		3031825	1					
ANR	3033272	CompoundStatement		407:49:8919:8919	3031825	1					
ANR	3033273	ExpressionStatement	s_len = precision	995:7:25213:25230	3031825	0	True				
ANR	3033274	AssignmentExpression	s_len = precision		3031825	0		=			
ANR	3033275	Identifier	s_len		3031825	0					
ANR	3033276	Identifier	precision		3031825	1					
ANR	3033277	ElseStatement	else		3031825	0					
ANR	3033278	CompoundStatement		410:12:8967:8967	3031825	0					
ANR	3033279	ExpressionStatement	s = S_NULL	998:6:25260:25270	3031825	0	True				
ANR	3033280	AssignmentExpression	s = S_NULL		3031825	0		=			
ANR	3033281	Identifier	s		3031825	0					
ANR	3033282	Identifier	S_NULL		3031825	1					
ANR	3033283	ExpressionStatement	s_len = S_NULL_LEN	999:6:25278:25296	3031825	1	True				
ANR	3033284	AssignmentExpression	s_len = S_NULL_LEN		3031825	0		=			
ANR	3033285	Identifier	s_len		3031825	0					
ANR	3033286	Identifier	S_NULL_LEN		3031825	1					
ANR	3033287	ExpressionStatement	pad_char = ' '	1001:5:25310:25324	3031825	37	True				
ANR	3033288	AssignmentExpression	pad_char = ' '		3031825	0		=			
ANR	3033289	Identifier	pad_char		3031825	0					
ANR	3033290	PrimaryExpression	' '		3031825	1					
ANR	3033291	BreakStatement	break ;	1002:5:25331:25336	3031825	38	True				
ANR	3033292	Label	case 'f' :	1005:4:25344:25352	3031825	39	True				
ANR	3033293	Label	case 'F' :	1006:4:25358:25366	3031825	40	True				
ANR	3033294	Label	case 'e' :	1007:4:25372:25380	3031825	41	True				
ANR	3033295	Label	case 'E' :	1008:4:25386:25394	3031825	42	True				
ANR	3033296	SwitchStatement	switch ( modifier )		3031825	43					
ANR	3033297	Condition	modifier	1009:12:25408:25415	3031825	0	True				
ANR	3033298	Identifier	modifier		3031825	0					
ANR	3033299	CompoundStatement		422:22:9133:9133	3031825	1					
ANR	3033300	Label	case LM_LONG_DOUBLE :	1010:6:25426:25445	3031825	0	True				
ANR	3033301	Identifier	LM_LONG_DOUBLE		3031825	0					
ANR	3033302	Statement	fp_num	1011:7:25454:25459	3031825	1	True				
ANR	3033303	Statement	=	1011:14:25461:25461	3031825	2	True				
ANR	3033304	Statement	(	1011:16:25463:25463	3031825	3	True				
ANR	3033305	Statement	double	1011:17:25464:25469	3031825	4	True				
ANR	3033306	Statement	)	1011:23:25470:25470	3031825	5	True				
ANR	3033307	Statement	va_arg	1011:25:25472:25477	3031825	6	True				
ANR	3033308	Statement	(	1011:31:25478:25478	3031825	7	True				
ANR	3033309	Statement	ap	1011:32:25479:25480	3031825	8	True				
ANR	3033310	Statement	","	1011:34:25481:25481	3031825	9	True				
ANR	3033311	Statement	long	1011:36:25483:25486	3031825	10	True				
ANR	3033312	Statement	double	1011:41:25488:25493	3031825	11	True				
ANR	3033313	Statement	)	1011:47:25494:25494	3031825	12	True				
ANR	3033314	ExpressionStatement		1011:48:25495:25495	3031825	13	True				
ANR	3033315	BreakStatement	break ;	1012:7:25504:25509	3031825	14	True				
ANR	3033316	Label	case LM_STD :	1013:6:25517:25528	3031825	15	True				
ANR	3033317	Identifier	LM_STD		3031825	0					
ANR	3033318	ExpressionStatement	"fp_num = va_arg ( ap , double )"	1014:7:25537:25564	3031825	16	True				
ANR	3033319	AssignmentExpression	"fp_num = va_arg ( ap , double )"		3031825	0		=			
ANR	3033320	Identifier	fp_num		3031825	0					
ANR	3033321	CallExpression	"va_arg ( ap , double )"		3031825	1					
ANR	3033322	Callee	va_arg		3031825	0					
ANR	3033323	Identifier	va_arg		3031825	0					
ANR	3033324	ArgumentList	ap		3031825	1					
ANR	3033325	Argument	ap		3031825	0					
ANR	3033326	Identifier	ap		3031825	0					
ANR	3033327	Argument	double		3031825	1					
ANR	3033328	Identifier	double		3031825	0					
ANR	3033329	BreakStatement	break ;	1015:7:25573:25578	3031825	17	True				
ANR	3033330	Label	default :	1016:6:25586:25593	3031825	18	True				
ANR	3033331	Identifier	default		3031825	0					
ANR	3033332	GotoStatement	goto fmt_error ;	1017:7:25602:25616	3031825	19	True				
ANR	3033333	Identifier	fmt_error		3031825	0					
ANR	3033334	IfStatement	if ( zend_isnan ( fp_num ) )		3031825	44					
ANR	3033335	Condition	zend_isnan ( fp_num )	1020:9:25635:25652	3031825	0	True				
ANR	3033336	CallExpression	zend_isnan ( fp_num )		3031825	0					
ANR	3033337	Callee	zend_isnan		3031825	0					
ANR	3033338	Identifier	zend_isnan		3031825	0					
ANR	3033339	ArgumentList	fp_num		3031825	1					
ANR	3033340	Argument	fp_num		3031825	0					
ANR	3033341	Identifier	fp_num		3031825	0					
ANR	3033342	CompoundStatement		433:29:9370:9370	3031825	1					
ANR	3033343	ExpressionStatement	"s = ""NAN"""	1021:6:25663:25672	3031825	0	True				
ANR	3033344	AssignmentExpression	"s = ""NAN"""		3031825	0		=			
ANR	3033345	Identifier	s		3031825	0					
ANR	3033346	PrimaryExpression	"""NAN"""		3031825	1					
ANR	3033347	ExpressionStatement	s_len = 3	1022:6:25680:25689	3031825	1	True				
ANR	3033348	AssignmentExpression	s_len = 3		3031825	0		=			
ANR	3033349	Identifier	s_len		3031825	0					
ANR	3033350	PrimaryExpression	3		3031825	1					
ANR	3033351	ElseStatement	else		3031825	0					
ANR	3033352	IfStatement	if ( zend_isinf ( fp_num ) )		3031825	0					
ANR	3033353	Condition	zend_isinf ( fp_num )	1023:16:25707:25724	3031825	0	True				
ANR	3033354	CallExpression	zend_isinf ( fp_num )		3031825	0					
ANR	3033355	Callee	zend_isinf		3031825	0					
ANR	3033356	Identifier	zend_isinf		3031825	0					
ANR	3033357	ArgumentList	fp_num		3031825	1					
ANR	3033358	Argument	fp_num		3031825	0					
ANR	3033359	Identifier	fp_num		3031825	0					
ANR	3033360	CompoundStatement		436:36:9442:9442	3031825	1					
ANR	3033361	ExpressionStatement	"s = ""INF"""	1024:6:25735:25744	3031825	0	True				
ANR	3033362	AssignmentExpression	"s = ""INF"""		3031825	0		=			
ANR	3033363	Identifier	s		3031825	0					
ANR	3033364	PrimaryExpression	"""INF"""		3031825	1					
ANR	3033365	ExpressionStatement	s_len = 3	1025:6:25752:25761	3031825	1	True				
ANR	3033366	AssignmentExpression	s_len = 3		3031825	0		=			
ANR	3033367	Identifier	s_len		3031825	0					
ANR	3033368	PrimaryExpression	3		3031825	1					
ANR	3033369	ElseStatement	else		3031825	0					
ANR	3033370	CompoundStatement		439:12:9490:9490	3031825	0					
ANR	3033371	ExpressionStatement	localeconv_r ( & lconv )	1029:6:25815:25835	3031825	0	True				
ANR	3033372	CallExpression	localeconv_r ( & lconv )		3031825	0					
ANR	3033373	Callee	localeconv_r		3031825	0					
ANR	3033374	Identifier	localeconv_r		3031825	0					
ANR	3033375	ArgumentList	& lconv		3031825	1					
ANR	3033376	Argument	& lconv		3031825	0					
ANR	3033377	UnaryOperationExpression	& lconv		3031825	0					
ANR	3033378	UnaryOperator	&		3031825	0					
ANR	3033379	Identifier	lconv		3031825	1					
ANR	3033380	ExpressionStatement	"s = php_conv_fp ( ( * fmt == 'f' ) ? 'F' : * fmt , fp_num , alternate_form , ( adjust_precision == NO ) ? FLOAT_DIGITS : precision , ( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.' , & is_negative , & num_buf [ 1 ] , & s_len )"	1036:6:25920:26133	3031825	1	True				
ANR	3033381	AssignmentExpression	"s = php_conv_fp ( ( * fmt == 'f' ) ? 'F' : * fmt , fp_num , alternate_form , ( adjust_precision == NO ) ? FLOAT_DIGITS : precision , ( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.' , & is_negative , & num_buf [ 1 ] , & s_len )"		3031825	0		=			
ANR	3033382	Identifier	s		3031825	0					
ANR	3033383	CallExpression	"php_conv_fp ( ( * fmt == 'f' ) ? 'F' : * fmt , fp_num , alternate_form , ( adjust_precision == NO ) ? FLOAT_DIGITS : precision , ( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.' , & is_negative , & num_buf [ 1 ] , & s_len )"		3031825	1					
ANR	3033384	Callee	php_conv_fp		3031825	0					
ANR	3033385	Identifier	php_conv_fp		3031825	0					
ANR	3033386	ArgumentList	( * fmt == 'f' ) ? 'F' : * fmt		3031825	1					
ANR	3033387	Argument	( * fmt == 'f' ) ? 'F' : * fmt		3031825	0					
ANR	3033388	ConditionalExpression	( * fmt == 'f' ) ? 'F' : * fmt		3031825	0					
ANR	3033389	Condition	* fmt == 'f'		3031825	0					
ANR	3033390	EqualityExpression	* fmt == 'f'		3031825	0		==			
ANR	3033391	UnaryOperationExpression	* fmt		3031825	0					
ANR	3033392	UnaryOperator	*		3031825	0					
ANR	3033393	Identifier	fmt		3031825	1					
ANR	3033394	PrimaryExpression	'f'		3031825	1					
ANR	3033395	PrimaryExpression	'F'		3031825	1					
ANR	3033396	UnaryOperationExpression	* fmt		3031825	2					
ANR	3033397	UnaryOperator	*		3031825	0					
ANR	3033398	Identifier	fmt		3031825	1					
ANR	3033399	Argument	fp_num		3031825	1					
ANR	3033400	Identifier	fp_num		3031825	0					
ANR	3033401	Argument	alternate_form		3031825	2					
ANR	3033402	Identifier	alternate_form		3031825	0					
ANR	3033403	Argument	( adjust_precision == NO ) ? FLOAT_DIGITS : precision		3031825	3					
ANR	3033404	ConditionalExpression	( adjust_precision == NO ) ? FLOAT_DIGITS : precision		3031825	0					
ANR	3033405	Condition	adjust_precision == NO		3031825	0					
ANR	3033406	EqualityExpression	adjust_precision == NO		3031825	0		==			
ANR	3033407	Identifier	adjust_precision		3031825	0					
ANR	3033408	Identifier	NO		3031825	1					
ANR	3033409	Identifier	FLOAT_DIGITS		3031825	1					
ANR	3033410	Identifier	precision		3031825	2					
ANR	3033411	Argument	( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.'		3031825	4					
ANR	3033412	ConditionalExpression	( * fmt == 'f' ) ? LCONV_DECIMAL_POINT : '.'		3031825	0					
ANR	3033413	Condition	* fmt == 'f'		3031825	0					
ANR	3033414	EqualityExpression	* fmt == 'f'		3031825	0		==			
ANR	3033415	UnaryOperationExpression	* fmt		3031825	0					
ANR	3033416	UnaryOperator	*		3031825	0					
ANR	3033417	Identifier	fmt		3031825	1					
ANR	3033418	PrimaryExpression	'f'		3031825	1					
ANR	3033419	Identifier	LCONV_DECIMAL_POINT		3031825	1					
ANR	3033420	PrimaryExpression	'.'		3031825	2					
ANR	3033421	Argument	& is_negative		3031825	5					
ANR	3033422	UnaryOperationExpression	& is_negative		3031825	0					
ANR	3033423	UnaryOperator	&		3031825	0					
ANR	3033424	Identifier	is_negative		3031825	1					
ANR	3033425	Argument	& num_buf [ 1 ]		3031825	6					
ANR	3033426	UnaryOperationExpression	& num_buf [ 1 ]		3031825	0					
ANR	3033427	UnaryOperator	&		3031825	0					
ANR	3033428	ArrayIndexing	num_buf [ 1 ]		3031825	1					
ANR	3033429	Identifier	num_buf		3031825	0					
ANR	3033430	PrimaryExpression	1		3031825	1					
ANR	3033431	Argument	& s_len		3031825	7					
ANR	3033432	UnaryOperationExpression	& s_len		3031825	0					
ANR	3033433	UnaryOperator	&		3031825	0					
ANR	3033434	Identifier	s_len		3031825	1					
ANR	3033435	IfStatement	if ( is_negative )		3031825	2					
ANR	3033436	Condition	is_negative	1040:10:26145:26155	3031825	0	True				
ANR	3033437	Identifier	is_negative		3031825	0					
ANR	3033438	ExpressionStatement	prefix_char = '-'	1041:7:26165:26182	3031825	1	True				
ANR	3033439	AssignmentExpression	prefix_char = '-'		3031825	0		=			
ANR	3033440	Identifier	prefix_char		3031825	0					
ANR	3033441	PrimaryExpression	'-'		3031825	1					
ANR	3033442	ElseStatement	else		3031825	0					
ANR	3033443	IfStatement	if ( print_sign )		3031825	0					
ANR	3033444	Condition	print_sign	1042:15:26199:26208	3031825	0	True				
ANR	3033445	Identifier	print_sign		3031825	0					
ANR	3033446	ExpressionStatement	prefix_char = '+'	1043:7:26218:26235	3031825	1	True				
ANR	3033447	AssignmentExpression	prefix_char = '+'		3031825	0		=			
ANR	3033448	Identifier	prefix_char		3031825	0					
ANR	3033449	PrimaryExpression	'+'		3031825	1					
ANR	3033450	ElseStatement	else		3031825	0					
ANR	3033451	IfStatement	if ( print_blank )		3031825	0					
ANR	3033452	Condition	print_blank	1044:15:26252:26262	3031825	0	True				
ANR	3033453	Identifier	print_blank		3031825	0					
ANR	3033454	ExpressionStatement	prefix_char = ' '	1045:7:26272:26289	3031825	1	True				
ANR	3033455	AssignmentExpression	prefix_char = ' '		3031825	0		=			
ANR	3033456	Identifier	prefix_char		3031825	0					
ANR	3033457	PrimaryExpression	' '		3031825	1					
ANR	3033458	BreakStatement	break ;	1047:5:26303:26308	3031825	45	True				
ANR	3033459	Label	case 'g' :	1050:4:26316:26324	3031825	46	True				
ANR	3033460	Label	case 'k' :	1051:4:26330:26338	3031825	47	True				
ANR	3033461	Label	case 'G' :	1052:4:26344:26352	3031825	48	True				
ANR	3033462	Label	case 'H' :	1053:4:26358:26366	3031825	49	True				
ANR	3033463	SwitchStatement	switch ( modifier )		3031825	50					
ANR	3033464	Condition	modifier	1054:12:26380:26387	3031825	0	True				
ANR	3033465	Identifier	modifier		3031825	0					
ANR	3033466	CompoundStatement		467:22:10105:10105	3031825	1					
ANR	3033467	Label	case LM_LONG_DOUBLE :	1055:6:26398:26417	3031825	0	True				
ANR	3033468	Identifier	LM_LONG_DOUBLE		3031825	0					
ANR	3033469	Statement	fp_num	1056:7:26426:26431	3031825	1	True				
ANR	3033470	Statement	=	1056:14:26433:26433	3031825	2	True				
ANR	3033471	Statement	(	1056:16:26435:26435	3031825	3	True				
ANR	3033472	Statement	double	1056:17:26436:26441	3031825	4	True				
ANR	3033473	Statement	)	1056:23:26442:26442	3031825	5	True				
ANR	3033474	Statement	va_arg	1056:25:26444:26449	3031825	6	True				
ANR	3033475	Statement	(	1056:31:26450:26450	3031825	7	True				
ANR	3033476	Statement	ap	1056:32:26451:26452	3031825	8	True				
ANR	3033477	Statement	","	1056:34:26453:26453	3031825	9	True				
ANR	3033478	Statement	long	1056:36:26455:26458	3031825	10	True				
ANR	3033479	Statement	double	1056:41:26460:26465	3031825	11	True				
ANR	3033480	Statement	)	1056:47:26466:26466	3031825	12	True				
ANR	3033481	ExpressionStatement		1056:48:26467:26467	3031825	13	True				
ANR	3033482	BreakStatement	break ;	1057:7:26476:26481	3031825	14	True				
ANR	3033483	Label	case LM_STD :	1058:6:26489:26500	3031825	15	True				
ANR	3033484	Identifier	LM_STD		3031825	0					
ANR	3033485	ExpressionStatement	"fp_num = va_arg ( ap , double )"	1059:7:26509:26536	3031825	16	True				
ANR	3033486	AssignmentExpression	"fp_num = va_arg ( ap , double )"		3031825	0		=			
ANR	3033487	Identifier	fp_num		3031825	0					
ANR	3033488	CallExpression	"va_arg ( ap , double )"		3031825	1					
ANR	3033489	Callee	va_arg		3031825	0					
ANR	3033490	Identifier	va_arg		3031825	0					
ANR	3033491	ArgumentList	ap		3031825	1					
ANR	3033492	Argument	ap		3031825	0					
ANR	3033493	Identifier	ap		3031825	0					
ANR	3033494	Argument	double		3031825	1					
ANR	3033495	Identifier	double		3031825	0					
ANR	3033496	BreakStatement	break ;	1060:7:26545:26550	3031825	17	True				
ANR	3033497	Label	default :	1061:6:26558:26565	3031825	18	True				
ANR	3033498	Identifier	default		3031825	0					
ANR	3033499	GotoStatement	goto fmt_error ;	1062:7:26574:26588	3031825	19	True				
ANR	3033500	Identifier	fmt_error		3031825	0					
ANR	3033501	IfStatement	if ( zend_isnan ( fp_num ) )		3031825	51					
ANR	3033502	Condition	zend_isnan ( fp_num )	1065:9:26607:26624	3031825	0	True				
ANR	3033503	CallExpression	zend_isnan ( fp_num )		3031825	0					
ANR	3033504	Callee	zend_isnan		3031825	0					
ANR	3033505	Identifier	zend_isnan		3031825	0					
ANR	3033506	ArgumentList	fp_num		3031825	1					
ANR	3033507	Argument	fp_num		3031825	0					
ANR	3033508	Identifier	fp_num		3031825	0					
ANR	3033509	CompoundStatement		478:29:10342:10342	3031825	1					
ANR	3033510	ExpressionStatement	"s = ""NAN"""	1066:6:26635:26644	3031825	0	True				
ANR	3033511	AssignmentExpression	"s = ""NAN"""		3031825	0		=			
ANR	3033512	Identifier	s		3031825	0					
ANR	3033513	PrimaryExpression	"""NAN"""		3031825	1					
ANR	3033514	ExpressionStatement	s_len = 3	1067:6:26652:26661	3031825	1	True				
ANR	3033515	AssignmentExpression	s_len = 3		3031825	0		=			
ANR	3033516	Identifier	s_len		3031825	0					
ANR	3033517	PrimaryExpression	3		3031825	1					
ANR	3033518	BreakStatement	break ;	1068:6:26669:26674	3031825	2	True				
ANR	3033519	ElseStatement	else		3031825	0					
ANR	3033520	IfStatement	if ( zend_isinf ( fp_num ) )		3031825	0					
ANR	3033521	Condition	zend_isinf ( fp_num )	1069:16:26692:26709	3031825	0	True				
ANR	3033522	CallExpression	zend_isinf ( fp_num )		3031825	0					
ANR	3033523	Callee	zend_isinf		3031825	0					
ANR	3033524	Identifier	zend_isinf		3031825	0					
ANR	3033525	ArgumentList	fp_num		3031825	1					
ANR	3033526	Argument	fp_num		3031825	0					
ANR	3033527	Identifier	fp_num		3031825	0					
ANR	3033528	CompoundStatement		482:36:10427:10427	3031825	1					
ANR	3033529	IfStatement	if ( fp_num > 0 )		3031825	0					
ANR	3033530	Condition	fp_num > 0	1070:10:26724:26733	3031825	0	True				
ANR	3033531	RelationalExpression	fp_num > 0		3031825	0		>			
ANR	3033532	Identifier	fp_num		3031825	0					
ANR	3033533	PrimaryExpression	0		3031825	1					
ANR	3033534	CompoundStatement		483:22:10451:10451	3031825	1					
ANR	3033535	ExpressionStatement	"s = ""INF"""	1071:7:26745:26754	3031825	0	True				
ANR	3033536	AssignmentExpression	"s = ""INF"""		3031825	0		=			
ANR	3033537	Identifier	s		3031825	0					
ANR	3033538	PrimaryExpression	"""INF"""		3031825	1					
ANR	3033539	ExpressionStatement	s_len = 3	1072:7:26763:26772	3031825	1	True				
ANR	3033540	AssignmentExpression	s_len = 3		3031825	0		=			
ANR	3033541	Identifier	s_len		3031825	0					
ANR	3033542	PrimaryExpression	3		3031825	1					
ANR	3033543	ElseStatement	else		3031825	0					
ANR	3033544	CompoundStatement		486:13:10502:10502	3031825	0					
ANR	3033545	ExpressionStatement	"s = ""-INF"""	1074:7:26796:26806	3031825	0	True				
ANR	3033546	AssignmentExpression	"s = ""-INF"""		3031825	0		=			
ANR	3033547	Identifier	s		3031825	0					
ANR	3033548	PrimaryExpression	"""-INF"""		3031825	1					
ANR	3033549	ExpressionStatement	s_len = 4	1075:7:26815:26824	3031825	1	True				
ANR	3033550	AssignmentExpression	s_len = 4		3031825	0		=			
ANR	3033551	Identifier	s_len		3031825	0					
ANR	3033552	PrimaryExpression	4		3031825	1					
ANR	3033553	BreakStatement	break ;	1077:6:26840:26845	3031825	1	True				
ANR	3033554	IfStatement	if ( adjust_precision == NO )		3031825	52					
ANR	3033555	Condition	adjust_precision == NO	1080:9:26864:26885	3031825	0	True				
ANR	3033556	EqualityExpression	adjust_precision == NO		3031825	0		==			
ANR	3033557	Identifier	adjust_precision		3031825	0					
ANR	3033558	Identifier	NO		3031825	1					
ANR	3033559	CompoundStatement		493:33:10603:10603	3031825	1					
ANR	3033560	ExpressionStatement	precision = FLOAT_DIGITS	1081:6:26896:26920	3031825	0	True				
ANR	3033561	AssignmentExpression	precision = FLOAT_DIGITS		3031825	0		=			
ANR	3033562	Identifier	precision		3031825	0					
ANR	3033563	Identifier	FLOAT_DIGITS		3031825	1					
ANR	3033564	ElseStatement	else		3031825	0					
ANR	3033565	IfStatement	if ( precision == 0 )		3031825	0					
ANR	3033566	Condition	precision == 0	1082:16:26938:26951	3031825	0	True				
ANR	3033567	EqualityExpression	precision == 0		3031825	0		==			
ANR	3033568	Identifier	precision		3031825	0					
ANR	3033569	PrimaryExpression	0		3031825	1					
ANR	3033570	CompoundStatement		495:32:10669:10669	3031825	1					
ANR	3033571	ExpressionStatement	precision = 1	1083:6:26962:26975	3031825	0	True				
ANR	3033572	AssignmentExpression	precision = 1		3031825	0		=			
ANR	3033573	Identifier	precision		3031825	0					
ANR	3033574	PrimaryExpression	1		3031825	1					
ANR	3033575	ExpressionStatement	localeconv_r ( & lconv )	1090:5:27104:27124	3031825	53	True				
ANR	3033576	CallExpression	localeconv_r ( & lconv )		3031825	0					
ANR	3033577	Callee	localeconv_r		3031825	0					
ANR	3033578	Identifier	localeconv_r		3031825	0					
ANR	3033579	ArgumentList	& lconv		3031825	1					
ANR	3033580	Argument	& lconv		3031825	0					
ANR	3033581	UnaryOperationExpression	& lconv		3031825	0					
ANR	3033582	UnaryOperator	&		3031825	0					
ANR	3033583	Identifier	lconv		3031825	1					
ANR	3033584	ExpressionStatement	"s = php_gcvt ( fp_num , precision , ( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT , ( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e' , & num_buf [ 1 ] )"	1097:5:27205:27343	3031825	54	True				
ANR	3033585	AssignmentExpression	"s = php_gcvt ( fp_num , precision , ( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT , ( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e' , & num_buf [ 1 ] )"		3031825	0		=			
ANR	3033586	Identifier	s		3031825	0					
ANR	3033587	CallExpression	"php_gcvt ( fp_num , precision , ( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT , ( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e' , & num_buf [ 1 ] )"		3031825	1					
ANR	3033588	Callee	php_gcvt		3031825	0					
ANR	3033589	Identifier	php_gcvt		3031825	0					
ANR	3033590	ArgumentList	fp_num		3031825	1					
ANR	3033591	Argument	fp_num		3031825	0					
ANR	3033592	Identifier	fp_num		3031825	0					
ANR	3033593	Argument	precision		3031825	1					
ANR	3033594	Identifier	precision		3031825	0					
ANR	3033595	Argument	( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT		3031825	2					
ANR	3033596	ConditionalExpression	( * fmt == 'H' || * fmt == 'k' ) ? '.' : LCONV_DECIMAL_POINT		3031825	0					
ANR	3033597	Condition	* fmt == 'H' || * fmt == 'k'		3031825	0					
ANR	3033598	OrExpression	* fmt == 'H' || * fmt == 'k'		3031825	0		||			
ANR	3033599	EqualityExpression	* fmt == 'H'		3031825	0		==			
ANR	3033600	UnaryOperationExpression	* fmt		3031825	0					
ANR	3033601	UnaryOperator	*		3031825	0					
ANR	3033602	Identifier	fmt		3031825	1					
ANR	3033603	PrimaryExpression	'H'		3031825	1					
ANR	3033604	EqualityExpression	* fmt == 'k'		3031825	1		==			
ANR	3033605	UnaryOperationExpression	* fmt		3031825	0					
ANR	3033606	UnaryOperator	*		3031825	0					
ANR	3033607	Identifier	fmt		3031825	1					
ANR	3033608	PrimaryExpression	'k'		3031825	1					
ANR	3033609	PrimaryExpression	'.'		3031825	1					
ANR	3033610	Identifier	LCONV_DECIMAL_POINT		3031825	2					
ANR	3033611	Argument	( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e'		3031825	3					
ANR	3033612	ConditionalExpression	( * fmt == 'G' || * fmt == 'H' ) ? 'E' : 'e'		3031825	0					
ANR	3033613	Condition	* fmt == 'G' || * fmt == 'H'		3031825	0					
ANR	3033614	OrExpression	* fmt == 'G' || * fmt == 'H'		3031825	0		||			
ANR	3033615	EqualityExpression	* fmt == 'G'		3031825	0		==			
ANR	3033616	UnaryOperationExpression	* fmt		3031825	0					
ANR	3033617	UnaryOperator	*		3031825	0					
ANR	3033618	Identifier	fmt		3031825	1					
ANR	3033619	PrimaryExpression	'G'		3031825	1					
ANR	3033620	EqualityExpression	* fmt == 'H'		3031825	1		==			
ANR	3033621	UnaryOperationExpression	* fmt		3031825	0					
ANR	3033622	UnaryOperator	*		3031825	0					
ANR	3033623	Identifier	fmt		3031825	1					
ANR	3033624	PrimaryExpression	'H'		3031825	1					
ANR	3033625	PrimaryExpression	'E'		3031825	1					
ANR	3033626	PrimaryExpression	'e'		3031825	2					
ANR	3033627	Argument	& num_buf [ 1 ]		3031825	4					
ANR	3033628	UnaryOperationExpression	& num_buf [ 1 ]		3031825	0					
ANR	3033629	UnaryOperator	&		3031825	0					
ANR	3033630	ArrayIndexing	num_buf [ 1 ]		3031825	1					
ANR	3033631	Identifier	num_buf		3031825	0					
ANR	3033632	PrimaryExpression	1		3031825	1					
ANR	3033633	IfStatement	if ( * s == '-' )		3031825	55					
ANR	3033634	Condition	* s == '-'	1098:9:27354:27362	3031825	0	True				
ANR	3033635	EqualityExpression	* s == '-'		3031825	0		==			
ANR	3033636	UnaryOperationExpression	* s		3031825	0					
ANR	3033637	UnaryOperator	*		3031825	0					
ANR	3033638	Identifier	s		3031825	1					
ANR	3033639	PrimaryExpression	'-'		3031825	1					
ANR	3033640	CompoundStatement		511:20:11080:11080	3031825	1					
ANR	3033641	ExpressionStatement	prefix_char = * s ++	1099:6:27373:27391	3031825	0	True				
ANR	3033642	AssignmentExpression	prefix_char = * s ++		3031825	0		=			
ANR	3033643	Identifier	prefix_char		3031825	0					
ANR	3033644	UnaryOperationExpression	* s ++		3031825	1					
ANR	3033645	UnaryOperator	*		3031825	0					
ANR	3033646	PostIncDecOperationExpression	s ++		3031825	1					
ANR	3033647	Identifier	s		3031825	0					
ANR	3033648	IncDec	++		3031825	1					
ANR	3033649	ElseStatement	else		3031825	0					
ANR	3033650	IfStatement	if ( print_sign )		3031825	0					
ANR	3033651	Condition	print_sign	1100:16:27409:27418	3031825	0	True				
ANR	3033652	Identifier	print_sign		3031825	0					
ANR	3033653	CompoundStatement		513:28:11136:11136	3031825	1					
ANR	3033654	ExpressionStatement	prefix_char = '+'	1101:6:27429:27446	3031825	0	True				
ANR	3033655	AssignmentExpression	prefix_char = '+'		3031825	0		=			
ANR	3033656	Identifier	prefix_char		3031825	0					
ANR	3033657	PrimaryExpression	'+'		3031825	1					
ANR	3033658	ElseStatement	else		3031825	0					
ANR	3033659	IfStatement	if ( print_blank )		3031825	0					
ANR	3033660	Condition	print_blank	1102:16:27464:27474	3031825	0	True				
ANR	3033661	Identifier	print_blank		3031825	0					
ANR	3033662	CompoundStatement		515:29:11192:11192	3031825	1					
ANR	3033663	ExpressionStatement	prefix_char = ' '	1103:6:27485:27502	3031825	0	True				
ANR	3033664	AssignmentExpression	prefix_char = ' '		3031825	0		=			
ANR	3033665	Identifier	prefix_char		3031825	0					
ANR	3033666	PrimaryExpression	' '		3031825	1					
ANR	3033667	ExpressionStatement	s_len = strlen ( s )	1106:5:27517:27534	3031825	56	True				
ANR	3033668	AssignmentExpression	s_len = strlen ( s )		3031825	0		=			
ANR	3033669	Identifier	s_len		3031825	0					
ANR	3033670	CallExpression	strlen ( s )		3031825	1					
ANR	3033671	Callee	strlen		3031825	0					
ANR	3033672	Identifier	strlen		3031825	0					
ANR	3033673	ArgumentList	s		3031825	1					
ANR	3033674	Argument	s		3031825	0					
ANR	3033675	Identifier	s		3031825	0					
ANR	3033676	IfStatement	"if ( alternate_form && ( strchr ( s , '.' ) ) == NULL )"		3031825	57					
ANR	3033677	Condition	"alternate_form && ( strchr ( s , '.' ) ) == NULL"	1108:9:27546:27587	3031825	0	True				
ANR	3033678	AndExpression	"alternate_form && ( strchr ( s , '.' ) ) == NULL"		3031825	0		&&			
ANR	3033679	Identifier	alternate_form		3031825	0					
ANR	3033680	EqualityExpression	"( strchr ( s , '.' ) ) == NULL"		3031825	1		==			
ANR	3033681	CallExpression	"strchr ( s , '.' )"		3031825	0					
ANR	3033682	Callee	strchr		3031825	0					
ANR	3033683	Identifier	strchr		3031825	0					
ANR	3033684	ArgumentList	s		3031825	1					
ANR	3033685	Argument	s		3031825	0					
ANR	3033686	Identifier	s		3031825	0					
ANR	3033687	Argument	'.'		3031825	1					
ANR	3033688	PrimaryExpression	'.'		3031825	0					
ANR	3033689	Identifier	NULL		3031825	1					
ANR	3033690	CompoundStatement		521:53:11305:11305	3031825	1					
ANR	3033691	ExpressionStatement	s [ s_len ++ ] = '.'	1109:6:27598:27614	3031825	0	True				
ANR	3033692	AssignmentExpression	s [ s_len ++ ] = '.'		3031825	0		=			
ANR	3033693	ArrayIndexing	s [ s_len ++ ]		3031825	0					
ANR	3033694	Identifier	s		3031825	0					
ANR	3033695	PostIncDecOperationExpression	s_len ++		3031825	1					
ANR	3033696	Identifier	s_len		3031825	0					
ANR	3033697	IncDec	++		3031825	1					
ANR	3033698	PrimaryExpression	'.'		3031825	1					
ANR	3033699	BreakStatement	break ;	1111:5:27628:27633	3031825	58	True				
ANR	3033700	Label	case 'c' :	1114:4:27641:27649	3031825	59	True				
ANR	3033701	ExpressionStatement	"char_buf [ 0 ] = ( char ) ( va_arg ( ap , int ) )"	1115:5:27656:27694	3031825	60	True				
ANR	3033702	AssignmentExpression	"char_buf [ 0 ] = ( char ) ( va_arg ( ap , int ) )"		3031825	0		=			
ANR	3033703	ArrayIndexing	char_buf [ 0 ]		3031825	0					
ANR	3033704	Identifier	char_buf		3031825	0					
ANR	3033705	PrimaryExpression	0		3031825	1					
ANR	3033706	CastExpression	"( char ) ( va_arg ( ap , int ) )"		3031825	1					
ANR	3033707	CastTarget	char		3031825	0					
ANR	3033708	CallExpression	"va_arg ( ap , int )"		3031825	1					
ANR	3033709	Callee	va_arg		3031825	0					
ANR	3033710	Identifier	va_arg		3031825	0					
ANR	3033711	ArgumentList	ap		3031825	1					
ANR	3033712	Argument	ap		3031825	0					
ANR	3033713	Identifier	ap		3031825	0					
ANR	3033714	Argument	int		3031825	1					
ANR	3033715	Identifier	int		3031825	0					
ANR	3033716	ExpressionStatement	s = & char_buf [ 0 ]	1116:5:27701:27717	3031825	61	True				
ANR	3033717	AssignmentExpression	s = & char_buf [ 0 ]		3031825	0		=			
ANR	3033718	Identifier	s		3031825	0					
ANR	3033719	UnaryOperationExpression	& char_buf [ 0 ]		3031825	1					
ANR	3033720	UnaryOperator	&		3031825	0					
ANR	3033721	ArrayIndexing	char_buf [ 0 ]		3031825	1					
ANR	3033722	Identifier	char_buf		3031825	0					
ANR	3033723	PrimaryExpression	0		3031825	1					
ANR	3033724	ExpressionStatement	s_len = 1	1117:5:27724:27733	3031825	62	True				
ANR	3033725	AssignmentExpression	s_len = 1		3031825	0		=			
ANR	3033726	Identifier	s_len		3031825	0					
ANR	3033727	PrimaryExpression	1		3031825	1					
ANR	3033728	ExpressionStatement	pad_char = ' '	1118:5:27740:27754	3031825	63	True				
ANR	3033729	AssignmentExpression	pad_char = ' '		3031825	0		=			
ANR	3033730	Identifier	pad_char		3031825	0					
ANR	3033731	PrimaryExpression	' '		3031825	1					
ANR	3033732	BreakStatement	break ;	1119:5:27761:27766	3031825	64	True				
ANR	3033733	Label	case '%' :	1122:4:27774:27782	3031825	65	True				
ANR	3033734	ExpressionStatement	char_buf [ 0 ] = '%'	1123:5:27789:27806	3031825	66	True				
ANR	3033735	AssignmentExpression	char_buf [ 0 ] = '%'		3031825	0		=			
ANR	3033736	ArrayIndexing	char_buf [ 0 ]		3031825	0					
ANR	3033737	Identifier	char_buf		3031825	0					
ANR	3033738	PrimaryExpression	0		3031825	1					
ANR	3033739	PrimaryExpression	'%'		3031825	1					
ANR	3033740	ExpressionStatement	s = & char_buf [ 0 ]	1124:5:27813:27829	3031825	67	True				
ANR	3033741	AssignmentExpression	s = & char_buf [ 0 ]		3031825	0		=			
ANR	3033742	Identifier	s		3031825	0					
ANR	3033743	UnaryOperationExpression	& char_buf [ 0 ]		3031825	1					
ANR	3033744	UnaryOperator	&		3031825	0					
ANR	3033745	ArrayIndexing	char_buf [ 0 ]		3031825	1					
ANR	3033746	Identifier	char_buf		3031825	0					
ANR	3033747	PrimaryExpression	0		3031825	1					
ANR	3033748	ExpressionStatement	s_len = 1	1125:5:27836:27845	3031825	68	True				
ANR	3033749	AssignmentExpression	s_len = 1		3031825	0		=			
ANR	3033750	Identifier	s_len		3031825	0					
ANR	3033751	PrimaryExpression	1		3031825	1					
ANR	3033752	ExpressionStatement	pad_char = ' '	1126:5:27852:27866	3031825	69	True				
ANR	3033753	AssignmentExpression	pad_char = ' '		3031825	0		=			
ANR	3033754	Identifier	pad_char		3031825	0					
ANR	3033755	PrimaryExpression	' '		3031825	1					
ANR	3033756	BreakStatement	break ;	1127:5:27873:27878	3031825	70	True				
ANR	3033757	Label	case 'n' :	1130:4:27886:27894	3031825	71	True				
ANR	3033758	Statement	*	1131:5:27901:27901	3031825	72	True				
ANR	3033759	Statement	(	1131:6:27902:27902	3031825	73	True				
ANR	3033760	Statement	va_arg	1131:7:27903:27908	3031825	74	True				
ANR	3033761	Statement	(	1131:13:27909:27909	3031825	75	True				
ANR	3033762	Statement	ap	1131:14:27910:27911	3031825	76	True				
ANR	3033763	Statement	","	1131:16:27912:27912	3031825	77	True				
ANR	3033764	Statement	int	1131:18:27914:27916	3031825	78	True				
ANR	3033765	Statement	*	1131:22:27918:27918	3031825	79	True				
ANR	3033766	Statement	)	1131:23:27919:27919	3031825	80	True				
ANR	3033767	Statement	)	1131:24:27920:27920	3031825	81	True				
ANR	3033768	Statement	=	1131:26:27922:27922	3031825	82	True				
ANR	3033769	ExpressionStatement	cc	1131:28:27924:27926	3031825	83	True				
ANR	3033770	Identifier	cc		3031825	0					
ANR	3033771	GotoStatement	goto skip_output ;	1132:5:27933:27949	3031825	84	True				
ANR	3033772	Identifier	skip_output		3031825	0					
ANR	3033773	Label	case 'p' :	1142:4:28322:28330	3031825	85	True				
ANR	3033774	IfStatement	if ( sizeof ( char * ) <= sizeof ( u_wide_int ) )		3031825	86					
ANR	3033775	Condition	sizeof ( char * ) <= sizeof ( u_wide_int )	1143:9:28341:28376	3031825	0	True				
ANR	3033776	RelationalExpression	sizeof ( char * ) <= sizeof ( u_wide_int )		3031825	0		<=			
ANR	3033777	SizeofExpression	sizeof ( char * )		3031825	0					
ANR	3033778	Sizeof	sizeof		3031825	0					
ANR	3033779	SizeofOperand	char *		3031825	1					
ANR	3033780	SizeofExpression	sizeof ( u_wide_int )		3031825	1					
ANR	3033781	Sizeof	sizeof		3031825	0					
ANR	3033782	SizeofOperand	u_wide_int		3031825	1					
ANR	3033783	CompoundStatement		556:47:12094:12094	3031825	1					
ANR	3033784	Statement	ui_num	1144:6:28387:28392	3031825	0	True				
ANR	3033785	Statement	=	1144:13:28394:28394	3031825	1	True				
ANR	3033786	Statement	(	1144:15:28396:28396	3031825	2	True				
ANR	3033787	Statement	u_wide_int	1144:16:28397:28406	3031825	3	True				
ANR	3033788	Statement	)	1144:26:28407:28407	3031825	4	True				
ANR	3033789	Statement	(	1144:27:28408:28408	3031825	5	True				
ANR	3033790	Statement	(	1144:28:28409:28409	3031825	6	True				
ANR	3033791	Statement	size_t	1144:29:28410:28415	3031825	7	True				
ANR	3033792	Statement	)	1144:35:28416:28416	3031825	8	True				
ANR	3033793	Statement	va_arg	1144:37:28418:28423	3031825	9	True				
ANR	3033794	Statement	(	1144:43:28424:28424	3031825	10	True				
ANR	3033795	Statement	ap	1144:44:28425:28426	3031825	11	True				
ANR	3033796	Statement	","	1144:46:28427:28427	3031825	12	True				
ANR	3033797	Statement	char	1144:48:28429:28432	3031825	13	True				
ANR	3033798	Statement	*	1144:53:28434:28434	3031825	14	True				
ANR	3033799	Statement	)	1144:54:28435:28435	3031825	15	True				
ANR	3033800	Statement	)	1144:55:28436:28436	3031825	16	True				
ANR	3033801	ExpressionStatement		1144:56:28437:28437	3031825	17	True				
ANR	3033802	ExpressionStatement	"s = ap_php_conv_p2 ( ui_num , 4 , 'x' , & num_buf [ NUM_BUF_SIZE ] , & s_len )"	1145:6:28445:28519	3031825	18	True				
ANR	3033803	AssignmentExpression	"s = ap_php_conv_p2 ( ui_num , 4 , 'x' , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3031825	0		=			
ANR	3033804	Identifier	s		3031825	0					
ANR	3033805	CallExpression	"ap_php_conv_p2 ( ui_num , 4 , 'x' , & num_buf [ NUM_BUF_SIZE ] , & s_len )"		3031825	1					
ANR	3033806	Callee	ap_php_conv_p2		3031825	0					
ANR	3033807	Identifier	ap_php_conv_p2		3031825	0					
ANR	3033808	ArgumentList	ui_num		3031825	1					
ANR	3033809	Argument	ui_num		3031825	0					
ANR	3033810	Identifier	ui_num		3031825	0					
ANR	3033811	Argument	4		3031825	1					
ANR	3033812	PrimaryExpression	4		3031825	0					
ANR	3033813	Argument	'x'		3031825	2					
ANR	3033814	PrimaryExpression	'x'		3031825	0					
ANR	3033815	Argument	& num_buf [ NUM_BUF_SIZE ]		3031825	3					
ANR	3033816	UnaryOperationExpression	& num_buf [ NUM_BUF_SIZE ]		3031825	0					
ANR	3033817	UnaryOperator	&		3031825	0					
ANR	3033818	ArrayIndexing	num_buf [ NUM_BUF_SIZE ]		3031825	1					
ANR	3033819	Identifier	num_buf		3031825	0					
ANR	3033820	Identifier	NUM_BUF_SIZE		3031825	1					
ANR	3033821	Argument	& s_len		3031825	4					
ANR	3033822	UnaryOperationExpression	& s_len		3031825	0					
ANR	3033823	UnaryOperator	&		3031825	0					
ANR	3033824	Identifier	s_len		3031825	1					
ANR	3033825	IfStatement	if ( ui_num != 0 )		3031825	19					
ANR	3033826	Condition	ui_num != 0	1147:10:28531:28541	3031825	0	True				
ANR	3033827	EqualityExpression	ui_num != 0		3031825	0		!=			
ANR	3033828	Identifier	ui_num		3031825	0					
ANR	3033829	PrimaryExpression	0		3031825	1					
ANR	3033830	CompoundStatement		560:23:12259:12259	3031825	1					
ANR	3033831	ExpressionStatement	* -- s = 'x'	1148:7:28553:28563	3031825	0	True				
ANR	3033832	AssignmentExpression	* -- s = 'x'		3031825	0		=			
ANR	3033833	UnaryOperationExpression	* -- s		3031825	0					
ANR	3033834	UnaryOperator	*		3031825	0					
ANR	3033835	UnaryExpression	-- s		3031825	1					
ANR	3033836	IncDec	--		3031825	0					
ANR	3033837	Identifier	s		3031825	1					
ANR	3033838	PrimaryExpression	'x'		3031825	1					
ANR	3033839	ExpressionStatement	* -- s = '0'	1149:7:28572:28582	3031825	1	True				
ANR	3033840	AssignmentExpression	* -- s = '0'		3031825	0		=			
ANR	3033841	UnaryOperationExpression	* -- s		3031825	0					
ANR	3033842	UnaryOperator	*		3031825	0					
ANR	3033843	UnaryExpression	-- s		3031825	1					
ANR	3033844	IncDec	--		3031825	0					
ANR	3033845	Identifier	s		3031825	1					
ANR	3033846	PrimaryExpression	'0'		3031825	1					
ANR	3033847	ExpressionStatement	s_len += 2	1150:7:28591:28601	3031825	2	True				
ANR	3033848	AssignmentExpression	s_len += 2		3031825	0		+=			
ANR	3033849	Identifier	s_len		3031825	0					
ANR	3033850	PrimaryExpression	2		3031825	1					
ANR	3033851	ElseStatement	else		3031825	0					
ANR	3033852	CompoundStatement		565:12:12338:12338	3031825	0					
ANR	3033853	ExpressionStatement	"s = ""%p"""	1153:6:28631:28639	3031825	0	True				
ANR	3033854	AssignmentExpression	"s = ""%p"""		3031825	0		=			
ANR	3033855	Identifier	s		3031825	0					
ANR	3033856	PrimaryExpression	"""%p"""		3031825	1					
ANR	3033857	ExpressionStatement	s_len = 2	1154:6:28647:28656	3031825	1	True				
ANR	3033858	AssignmentExpression	s_len = 2		3031825	0		=			
ANR	3033859	Identifier	s_len		3031825	0					
ANR	3033860	PrimaryExpression	2		3031825	1					
ANR	3033861	ExpressionStatement	pad_char = ' '	1156:5:28670:28684	3031825	87	True				
ANR	3033862	AssignmentExpression	pad_char = ' '		3031825	0		=			
ANR	3033863	Identifier	pad_char		3031825	0					
ANR	3033864	PrimaryExpression	' '		3031825	1					
ANR	3033865	BreakStatement	break ;	1157:5:28691:28696	3031825	88	True				
ANR	3033866	Label	case NUL :	1160:4:28704:28712	3031825	89	True				
ANR	3033867	Identifier	NUL		3031825	0					
ANR	3033868	ContinueStatement	continue ;	1165:5:28813:28821	3031825	90	True				
ANR	3033869	Label	fmt_error :	1168:0:28825:28834	3031825	91	True				
ANR	3033870	Identifier	fmt_error		3031825	0					
ANR	3033871	ExpressionStatement	"php_error ( E_ERROR , ""Illegal length modifier specified '%c' in s[np]printf call"" , * fmt )"	1169:4:28840:28926	3031825	92	True				
ANR	3033872	CallExpression	"php_error ( E_ERROR , ""Illegal length modifier specified '%c' in s[np]printf call"" , * fmt )"		3031825	0					
ANR	3033873	Callee	php_error		3031825	0					
ANR	3033874	Identifier	php_error		3031825	0					
ANR	3033875	ArgumentList	E_ERROR		3031825	1					
ANR	3033876	Argument	E_ERROR		3031825	0					
ANR	3033877	Identifier	E_ERROR		3031825	0					
ANR	3033878	Argument	"""Illegal length modifier specified '%c' in s[np]printf call"""		3031825	1					
ANR	3033879	PrimaryExpression	"""Illegal length modifier specified '%c' in s[np]printf call"""		3031825	0					
ANR	3033880	Argument	* fmt		3031825	2					
ANR	3033881	UnaryOperationExpression	* fmt		3031825	0					
ANR	3033882	UnaryOperator	*		3031825	0					
ANR	3033883	Identifier	fmt		3031825	1					
ANR	3033884	Label	default :	1180:4:29379:29386	3031825	93	True				
ANR	3033885	Identifier	default		3031825	0					
ANR	3033886	ExpressionStatement	char_buf [ 0 ] = '%'	1181:5:29393:29410	3031825	94	True				
ANR	3033887	AssignmentExpression	char_buf [ 0 ] = '%'		3031825	0		=			
ANR	3033888	ArrayIndexing	char_buf [ 0 ]		3031825	0					
ANR	3033889	Identifier	char_buf		3031825	0					
ANR	3033890	PrimaryExpression	0		3031825	1					
ANR	3033891	PrimaryExpression	'%'		3031825	1					
ANR	3033892	ExpressionStatement	char_buf [ 1 ] = * fmt	1182:5:29417:29435	3031825	95	True				
ANR	3033893	AssignmentExpression	char_buf [ 1 ] = * fmt		3031825	0		=			
ANR	3033894	ArrayIndexing	char_buf [ 1 ]		3031825	0					
ANR	3033895	Identifier	char_buf		3031825	0					
ANR	3033896	PrimaryExpression	1		3031825	1					
ANR	3033897	UnaryOperationExpression	* fmt		3031825	1					
ANR	3033898	UnaryOperator	*		3031825	0					
ANR	3033899	Identifier	fmt		3031825	1					
ANR	3033900	ExpressionStatement	s = char_buf	1183:5:29442:29454	3031825	96	True				
ANR	3033901	AssignmentExpression	s = char_buf		3031825	0		=			
ANR	3033902	Identifier	s		3031825	0					
ANR	3033903	Identifier	char_buf		3031825	1					
ANR	3033904	ExpressionStatement	s_len = 2	1184:5:29461:29470	3031825	97	True				
ANR	3033905	AssignmentExpression	s_len = 2		3031825	0		=			
ANR	3033906	Identifier	s_len		3031825	0					
ANR	3033907	PrimaryExpression	2		3031825	1					
ANR	3033908	ExpressionStatement	pad_char = ' '	1185:5:29477:29491	3031825	98	True				
ANR	3033909	AssignmentExpression	pad_char = ' '		3031825	0		=			
ANR	3033910	Identifier	pad_char		3031825	0					
ANR	3033911	PrimaryExpression	' '		3031825	1					
ANR	3033912	BreakStatement	break ;	1186:5:29498:29503	3031825	99	True				
ANR	3033913	IfStatement	if ( prefix_char != NUL )		3031825	9					
ANR	3033914	Condition	prefix_char != NUL	1189:7:29518:29535	3031825	0	True				
ANR	3033915	EqualityExpression	prefix_char != NUL		3031825	0		!=			
ANR	3033916	Identifier	prefix_char		3031825	0					
ANR	3033917	Identifier	NUL		3031825	1					
ANR	3033918	CompoundStatement		602:27:13253:13253	3031825	1					
ANR	3033919	ExpressionStatement	* -- s = prefix_char	1190:4:29544:29562	3031825	0	True				
ANR	3033920	AssignmentExpression	* -- s = prefix_char		3031825	0		=			
ANR	3033921	UnaryOperationExpression	* -- s		3031825	0					
ANR	3033922	UnaryOperator	*		3031825	0					
ANR	3033923	UnaryExpression	-- s		3031825	1					
ANR	3033924	IncDec	--		3031825	0					
ANR	3033925	Identifier	s		3031825	1					
ANR	3033926	Identifier	prefix_char		3031825	1					
ANR	3033927	ExpressionStatement	s_len ++	1191:4:29568:29575	3031825	1	True				
ANR	3033928	PostIncDecOperationExpression	s_len ++		3031825	0					
ANR	3033929	Identifier	s_len		3031825	0					
ANR	3033930	IncDec	++		3031825	1					
ANR	3033931	IfStatement	if ( adjust_width && adjust == RIGHT && min_width > s_len )		3031825	10					
ANR	3033932	Condition	adjust_width && adjust == RIGHT && min_width > s_len	1193:7:29589:29640	3031825	0	True				
ANR	3033933	AndExpression	adjust_width && adjust == RIGHT && min_width > s_len		3031825	0		&&			
ANR	3033934	Identifier	adjust_width		3031825	0					
ANR	3033935	AndExpression	adjust == RIGHT && min_width > s_len		3031825	1		&&			
ANR	3033936	EqualityExpression	adjust == RIGHT		3031825	0		==			
ANR	3033937	Identifier	adjust		3031825	0					
ANR	3033938	Identifier	RIGHT		3031825	1					
ANR	3033939	RelationalExpression	min_width > s_len		3031825	1		>			
ANR	3033940	Identifier	min_width		3031825	0					
ANR	3033941	Identifier	s_len		3031825	1					
ANR	3033942	CompoundStatement		606:61:13358:13358	3031825	1					
ANR	3033943	IfStatement	if ( pad_char == '0' && prefix_char != NUL )		3031825	0					
ANR	3033944	Condition	pad_char == '0' && prefix_char != NUL	1194:8:29653:29689	3031825	0	True				
ANR	3033945	AndExpression	pad_char == '0' && prefix_char != NUL		3031825	0		&&			
ANR	3033946	EqualityExpression	pad_char == '0'		3031825	0		==			
ANR	3033947	Identifier	pad_char		3031825	0					
ANR	3033948	PrimaryExpression	'0'		3031825	1					
ANR	3033949	EqualityExpression	prefix_char != NUL		3031825	1		!=			
ANR	3033950	Identifier	prefix_char		3031825	0					
ANR	3033951	Identifier	NUL		3031825	1					
ANR	3033952	CompoundStatement		607:47:13407:13407	3031825	1					
ANR	3033953	Statement	INS_CHAR	1195:5:29699:29706	3031825	0	True				
ANR	3033954	Statement	(	1195:13:29707:29707	3031825	1	True				
ANR	3033955	Statement	*	1195:14:29708:29708	3031825	2	True				
ANR	3033956	Statement	s	1195:15:29709:29709	3031825	3	True				
ANR	3033957	Statement	","	1195:16:29710:29710	3031825	4	True				
ANR	3033958	Statement	sp	1195:18:29712:29713	3031825	5	True				
ANR	3033959	Statement	","	1195:20:29714:29714	3031825	6	True				
ANR	3033960	Statement	bep	1195:22:29716:29718	3031825	7	True				
ANR	3033961	Statement	","	1195:25:29719:29719	3031825	8	True				
ANR	3033962	Statement	cc	1195:27:29721:29722	3031825	9	True				
ANR	3033963	Statement	)	1195:29:29723:29723	3031825	10	True				
ANR	3033964	ExpressionStatement	s ++	1196:6:29731:29734	3031825	11	True				
ANR	3033965	PostIncDecOperationExpression	s ++		3031825	0					
ANR	3033966	Identifier	s		3031825	0					
ANR	3033967	IncDec	++		3031825	1					
ANR	3033968	ExpressionStatement	s_len --	1197:5:29741:29748	3031825	12	True				
ANR	3033969	PostIncDecOperationExpression	s_len --		3031825	0					
ANR	3033970	Identifier	s_len		3031825	0					
ANR	3033971	IncDec	--		3031825	1					
ANR	3033972	ExpressionStatement	min_width --	1198:5:29755:29766	3031825	13	True				
ANR	3033973	PostIncDecOperationExpression	min_width --		3031825	0					
ANR	3033974	Identifier	min_width		3031825	0					
ANR	3033975	IncDec	--		3031825	1					
ANR	3033976	ExpressionStatement	"PAD ( min_width , s_len , pad_char )"	1200:4:29778:29809	3031825	1	True				
ANR	3033977	CallExpression	"PAD ( min_width , s_len , pad_char )"		3031825	0					
ANR	3033978	Callee	PAD		3031825	0					
ANR	3033979	Identifier	PAD		3031825	0					
ANR	3033980	ArgumentList	min_width		3031825	1					
ANR	3033981	Argument	min_width		3031825	0					
ANR	3033982	Identifier	min_width		3031825	0					
ANR	3033983	Argument	s_len		3031825	1					
ANR	3033984	Identifier	s_len		3031825	0					
ANR	3033985	Argument	pad_char		3031825	2					
ANR	3033986	Identifier	pad_char		3031825	0					
ANR	3033987	ForStatement	for ( i = s_len ; i != 0 ; i -- )		3031825	11					
ANR	3033988	ForInit	i = s_len ;	1205:8:29863:29872	3031825	0	True				
ANR	3033989	AssignmentExpression	i = s_len		3031825	0		=			
ANR	3033990	Identifier	i		3031825	0					
ANR	3033991	Identifier	s_len		3031825	1					
ANR	3033992	Condition	i != 0	1205:19:29874:29879	3031825	1	True				
ANR	3033993	EqualityExpression	i != 0		3031825	0		!=			
ANR	3033994	Identifier	i		3031825	0					
ANR	3033995	PrimaryExpression	0		3031825	1					
ANR	3033996	PostIncDecOperationExpression	i --	1205:27:29882:29884	3031825	2	True				
ANR	3033997	Identifier	i		3031825	0					
ANR	3033998	IncDec	--		3031825	1					
ANR	3033999	CompoundStatement		618:32:13602:13602	3031825	3					
ANR	3034000	ExpressionStatement	"INS_CHAR ( * s , sp , bep , cc )"	1206:4:29893:29918	3031825	0	True				
ANR	3034001	CallExpression	"INS_CHAR ( * s , sp , bep , cc )"		3031825	0					
ANR	3034002	Callee	INS_CHAR		3031825	0					
ANR	3034003	Identifier	INS_CHAR		3031825	0					
ANR	3034004	ArgumentList	* s		3031825	1					
ANR	3034005	Argument	* s		3031825	0					
ANR	3034006	UnaryOperationExpression	* s		3031825	0					
ANR	3034007	UnaryOperator	*		3031825	0					
ANR	3034008	Identifier	s		3031825	1					
ANR	3034009	Argument	sp		3031825	1					
ANR	3034010	Identifier	sp		3031825	0					
ANR	3034011	Argument	bep		3031825	2					
ANR	3034012	Identifier	bep		3031825	0					
ANR	3034013	Argument	cc		3031825	3					
ANR	3034014	Identifier	cc		3031825	0					
ANR	3034015	ExpressionStatement	s ++	1207:4:29924:29927	3031825	1	True				
ANR	3034016	PostIncDecOperationExpression	s ++		3031825	0					
ANR	3034017	Identifier	s		3031825	0					
ANR	3034018	IncDec	++		3031825	1					
ANR	3034019	IfStatement	if ( adjust_width && adjust == LEFT && min_width > s_len )		3031825	12					
ANR	3034020	Condition	adjust_width && adjust == LEFT && min_width > s_len	1210:7:29942:29992	3031825	0	True				
ANR	3034021	AndExpression	adjust_width && adjust == LEFT && min_width > s_len		3031825	0		&&			
ANR	3034022	Identifier	adjust_width		3031825	0					
ANR	3034023	AndExpression	adjust == LEFT && min_width > s_len		3031825	1		&&			
ANR	3034024	EqualityExpression	adjust == LEFT		3031825	0		==			
ANR	3034025	Identifier	adjust		3031825	0					
ANR	3034026	Identifier	LEFT		3031825	1					
ANR	3034027	RelationalExpression	min_width > s_len		3031825	1		>			
ANR	3034028	Identifier	min_width		3031825	0					
ANR	3034029	Identifier	s_len		3031825	1					
ANR	3034030	ExpressionStatement	"PAD ( min_width , s_len , pad_char )"	1211:4:29999:30030	3031825	1	True				
ANR	3034031	CallExpression	"PAD ( min_width , s_len , pad_char )"		3031825	0					
ANR	3034032	Callee	PAD		3031825	0					
ANR	3034033	Identifier	PAD		3031825	0					
ANR	3034034	ArgumentList	min_width		3031825	1					
ANR	3034035	Argument	min_width		3031825	0					
ANR	3034036	Identifier	min_width		3031825	0					
ANR	3034037	Argument	s_len		3031825	1					
ANR	3034038	Identifier	s_len		3031825	0					
ANR	3034039	Argument	pad_char		3031825	2					
ANR	3034040	Identifier	pad_char		3031825	0					
ANR	3034041	IfStatement	if ( free_zcopy )		3031825	13					
ANR	3034042	Condition	free_zcopy	1212:7:30039:30048	3031825	0	True				
ANR	3034043	Identifier	free_zcopy		3031825	0					
ANR	3034044	CompoundStatement		625:19:13766:13766	3031825	1					
ANR	3034045	ExpressionStatement	zval_dtor ( & zcopy )	1213:4:30057:30074	3031825	0	True				
ANR	3034046	CallExpression	zval_dtor ( & zcopy )		3031825	0					
ANR	3034047	Callee	zval_dtor		3031825	0					
ANR	3034048	Identifier	zval_dtor		3031825	0					
ANR	3034049	ArgumentList	& zcopy		3031825	1					
ANR	3034050	Argument	& zcopy		3031825	0					
ANR	3034051	UnaryOperationExpression	& zcopy		3031825	0					
ANR	3034052	UnaryOperator	&		3031825	0					
ANR	3034053	Identifier	zcopy		3031825	1					
ANR	3034054	Label	skip_output :	1216:0:30085:30096	3031825	1	True				
ANR	3034055	Identifier	skip_output		3031825	0					
ANR	3034056	ExpressionStatement	fmt ++	1217:2:30100:30105	3031825	2	True				
ANR	3034057	PostIncDecOperationExpression	fmt ++		3031825	0					
ANR	3034058	Identifier	fmt		3031825	0					
ANR	3034059	IncDec	++		3031825	1					
ANR	3034060	ExpressionStatement	odp -> nextb = sp	1219:1:30111:30126	3031825	29	True				
ANR	3034061	AssignmentExpression	odp -> nextb = sp		3031825	0		=			
ANR	3034062	PtrMemberAccess	odp -> nextb		3031825	0					
ANR	3034063	Identifier	odp		3031825	0					
ANR	3034064	Identifier	nextb		3031825	1					
ANR	3034065	Identifier	sp		3031825	1					
ANR	3034066	ReturnStatement	return ( cc ) ;	1220:1:30129:30140	3031825	30	True				
ANR	3034067	Identifier	cc		3031825	0					
ANR	3034068	ReturnType	static int		3031825	1					
ANR	3034069	Identifier	format_converter		3031825	2					
ANR	3034070	ParameterList	"register buffy * odp , const char * fmt , va_list ap"		3031825	3					
ANR	3034071	Parameter	register buffy * odp	587:28:16223:16242	3031825	0	True				
ANR	3034072	ParameterType	register buffy *		3031825	0					
ANR	3034073	Identifier	odp		3031825	1					
ANR	3034074	Parameter	const char * fmt	587:50:16245:16259	3031825	1	True				
ANR	3034075	ParameterType	const char *		3031825	0					
ANR	3034076	Identifier	fmt		3031825	1					
ANR	3034077	Parameter	va_list ap	587:67:16262:16271	3031825	2	True				
ANR	3034078	ParameterType	va_list		3031825	0					
ANR	3034079	Identifier	ap		3031825	1					
ANR	3034080	CFGEntryNode	ENTRY		3031825		True				
ANR	3034081	CFGExitNode	EXIT		3031825		True				
ANR	3034082	InfiniteForNode	true		3031825		True				
ANR	3034083	Symbol	lconv		3031825						
ANR	3034084	Symbol	LCONV_DECIMAL_POINT		3031825						
ANR	3034085	Symbol	& s_len		3031825						
ANR	3034086	Symbol	precision		3031825						
ANR	3034087	Symbol	modifier		3031825						
ANR	3034088	Symbol	strchr		3031825						
ANR	3034089	Symbol	zcopy		3031825						
ANR	3034090	Symbol	size_t		3031825						
ANR	3034091	Symbol	fmt		3031825						
ANR	3034092	Symbol	bep		3031825						
ANR	3034093	Symbol	& is_negative		3031825						
ANR	3034094	Symbol	uintmax_t		3031825						
ANR	3034095	Symbol	strlen		3031825						
ANR	3034096	Symbol	zend_isinf		3031825						
ANR	3034097	Symbol	adjust_precision		3031825						
ANR	3034098	Symbol	php_gcvt		3031825						
ANR	3034099	Symbol	isdigit		3031825						
ANR	3034100	Symbol	va_arg		3031825						
ANR	3034101	Symbol	char_buf		3031825						
ANR	3034102	Symbol	intmax_t		3031825						
ANR	3034103	Symbol	NULL		3031825						
ANR	3034104	Symbol	zend_ulong		3031825						
ANR	3034105	Symbol	LEFT		3031825						
ANR	3034106	Symbol	* odp		3031825						
ANR	3034107	Symbol	double		3031825						
ANR	3034108	Symbol	zend_long		3031825						
ANR	3034109	Symbol	* -- s		3031825						
ANR	3034110	Symbol	ap		3031825						
ANR	3034111	Symbol	ptrdiff_t		3031825						
ANR	3034112	Symbol	ap_php_conv_p2		3031825						
ANR	3034113	Symbol	zvp		3031825						
ANR	3034114	Symbol	LM_LONG_DOUBLE		3031825						
ANR	3034115	Symbol	free_zcopy		3031825						
ANR	3034116	Symbol	adjust		3031825						
ANR	3034117	Symbol	odp		3031825						
ANR	3034118	Symbol	is_negative		3031825						
ANR	3034119	Symbol	adjust_width		3031825						
ANR	3034120	Symbol	ui_num		3031825						
ANR	3034121	Symbol	* s ++		3031825						
ANR	3034122	Symbol	NO		3031825						
ANR	3034123	Symbol	ssize_t		3031825						
ANR	3034124	Symbol	i_num		3031825						
ANR	3034125	Symbol	islower		3031825						
ANR	3034126	Symbol	YES		3031825						
ANR	3034127	Symbol	s_len		3031825						
ANR	3034128	Symbol	* fmt		3031825						
ANR	3034129	Symbol	LM_PHP_INT_T		3031825						
ANR	3034130	Symbol	print_sign		3031825						
ANR	3034131	Symbol	zend_make_printable_zval		3031825						
ANR	3034132	Symbol	FLOAT_DIGITS		3031825						
ANR	3034133	Symbol	& lconv		3031825						
ANR	3034134	Symbol	pad_char		3031825						
ANR	3034135	Symbol	LM_PTRDIFF_T		3031825						
ANR	3034136	Symbol	ap_php_conv_10		3031825						
ANR	3034137	Symbol	LM_SIZE_T		3031825						
ANR	3034138	Symbol	LM_INTMAX_T		3031825						
ANR	3034139	Symbol	& zcopy		3031825						
ANR	3034140	Symbol	odp -> nextb		3031825						
ANR	3034141	Symbol	RIGHT		3031825						
ANR	3034142	Symbol	FORMAT_CONV_MAX_PRECISION		3031825						
ANR	3034143	Symbol	* ( fmt + 1 )		3031825						
ANR	3034144	Symbol	zend_isnan		3031825						
ANR	3034145	Symbol	Z_STRLEN_P		3031825						
ANR	3034146	Symbol	LM_STD		3031825						
ANR	3034147	Symbol	sp		3031825						
ANR	3034148	Symbol	print_blank		3031825						
ANR	3034149	Symbol	min_width		3031825						
ANR	3034150	Symbol	isascii		3031825						
ANR	3034151	Symbol	cc		3031825						
ANR	3034152	Symbol	LM_LONG_LONG		3031825						
ANR	3034153	Symbol	NUL		3031825						
ANR	3034154	Symbol	S_NULL_LEN		3031825						
ANR	3034155	Symbol	alternate_form		3031825						
ANR	3034156	Symbol	LM_LONG		3031825						
ANR	3034157	Symbol	i		3031825						
ANR	3034158	Symbol	Z_STRVAL_P		3031825						
ANR	3034159	Symbol	int		3031825						
ANR	3034160	Symbol	* char_buf		3031825						
ANR	3034161	Symbol	S_NULL		3031825						
ANR	3034162	Symbol	php_conv_fp		3031825						
ANR	3034163	Symbol	s		3031825						
ANR	3034164	Symbol	E_ERROR		3031825						
ANR	3034165	Symbol	prefix_char		3031825						
ANR	3034166	Symbol	fp_num		3031825						
ANR	3034167	Symbol	odp -> buf_end		3031825						
ANR	3034168	Symbol	wide_int		3031825						
ANR	3034169	Symbol	NUM_BUF_SIZE		3031825						
ANR	3034170	Symbol	num_buf		3031825						
ANR	3034171	Symbol	u_wide_int		3031825						
ANR	3034172	Symbol	* s		3031825						
ANR	3034173	Function	strx_printv	1227:0:30214:30782							
ANR	3034174	FunctionDef	"strx_printv (int * ccp , char * buf , size_t len , const char * format , va_list ap)"		3034173	0					
ANR	3034175	CompoundStatement		1228:0:30313:30782	3034173	0					
ANR	3034176	IdentifierDeclStatement	buffy od ;	1229:1:30316:30324	3034173	0	True				
ANR	3034177	IdentifierDecl	od		3034173	0					
ANR	3034178	IdentifierDeclType	buffy		3034173	0					
ANR	3034179	Identifier	od		3034173	1					
ANR	3034180	IdentifierDeclStatement	int cc ;	1230:1:30327:30333	3034173	1	True				
ANR	3034181	IdentifierDecl	cc		3034173	0					
ANR	3034182	IdentifierDeclType	int		3034173	0					
ANR	3034183	Identifier	cc		3034173	1					
ANR	3034184	IfStatement	if ( len == 0 )		3034173	2					
ANR	3034185	Condition	len == 0	1237:5:30484:30491	3034173	0	True				
ANR	3034186	EqualityExpression	len == 0		3034173	0		==			
ANR	3034187	Identifier	len		3034173	0					
ANR	3034188	PrimaryExpression	0		3034173	1					
ANR	3034189	CompoundStatement		10:15:180:180	3034173	1					
ANR	3034190	ExpressionStatement	od . buf_end = ( char * ) ~0	1238:2:30498:30522	3034173	0	True				
ANR	3034191	AssignmentExpression	od . buf_end = ( char * ) ~0		3034173	0		=			
ANR	3034192	MemberAccess	od . buf_end		3034173	0					
ANR	3034193	Identifier	od		3034173	0					
ANR	3034194	Identifier	buf_end		3034173	1					
ANR	3034195	CastExpression	( char * ) ~0		3034173	1					
ANR	3034196	CastTarget	char *		3034173	0					
ANR	3034197	Identifier	~0		3034173	1					
ANR	3034198	ExpressionStatement	od . nextb = ( char * ) ~0	1239:2:30526:30550	3034173	1	True				
ANR	3034199	AssignmentExpression	od . nextb = ( char * ) ~0		3034173	0		=			
ANR	3034200	MemberAccess	od . nextb		3034173	0					
ANR	3034201	Identifier	od		3034173	0					
ANR	3034202	Identifier	nextb		3034173	1					
ANR	3034203	CastExpression	( char * ) ~0		3034173	1					
ANR	3034204	CastTarget	char *		3034173	0					
ANR	3034205	Identifier	~0		3034173	1					
ANR	3034206	ElseStatement	else		3034173	0					
ANR	3034207	CompoundStatement		13:8:246:246	3034173	0					
ANR	3034208	ExpressionStatement	od . buf_end = & buf [ len - 1 ]	1241:2:30564:30588	3034173	0	True				
ANR	3034209	AssignmentExpression	od . buf_end = & buf [ len - 1 ]		3034173	0		=			
ANR	3034210	MemberAccess	od . buf_end		3034173	0					
ANR	3034211	Identifier	od		3034173	0					
ANR	3034212	Identifier	buf_end		3034173	1					
ANR	3034213	UnaryOperationExpression	& buf [ len - 1 ]		3034173	1					
ANR	3034214	UnaryOperator	&		3034173	0					
ANR	3034215	ArrayIndexing	buf [ len - 1 ]		3034173	1					
ANR	3034216	Identifier	buf		3034173	0					
ANR	3034217	AdditiveExpression	len - 1		3034173	1		-			
ANR	3034218	Identifier	len		3034173	0					
ANR	3034219	PrimaryExpression	1		3034173	1					
ANR	3034220	ExpressionStatement	od . nextb = buf	1242:2:30592:30608	3034173	1	True				
ANR	3034221	AssignmentExpression	od . nextb = buf		3034173	0		=			
ANR	3034222	MemberAccess	od . nextb		3034173	0					
ANR	3034223	Identifier	od		3034173	0					
ANR	3034224	Identifier	nextb		3034173	1					
ANR	3034225	Identifier	buf		3034173	1					
ANR	3034226	ExpressionStatement	"cc = format_converter ( & od , format , ap )"	1248:1:30646:30684	3034173	3	True				
ANR	3034227	AssignmentExpression	"cc = format_converter ( & od , format , ap )"		3034173	0		=			
ANR	3034228	Identifier	cc		3034173	0					
ANR	3034229	CallExpression	"format_converter ( & od , format , ap )"		3034173	1					
ANR	3034230	Callee	format_converter		3034173	0					
ANR	3034231	Identifier	format_converter		3034173	0					
ANR	3034232	ArgumentList	& od		3034173	1					
ANR	3034233	Argument	& od		3034173	0					
ANR	3034234	UnaryOperationExpression	& od		3034173	0					
ANR	3034235	UnaryOperator	&		3034173	0					
ANR	3034236	Identifier	od		3034173	1					
ANR	3034237	Argument	format		3034173	1					
ANR	3034238	Identifier	format		3034173	0					
ANR	3034239	Argument	ap		3034173	2					
ANR	3034240	Identifier	ap		3034173	0					
ANR	3034241	IfStatement	if ( len != 0 && od . nextb <= od . buf_end )		3034173	4					
ANR	3034242	Condition	len != 0 && od . nextb <= od . buf_end	1249:5:30691:30724	3034173	0	True				
ANR	3034243	AndExpression	len != 0 && od . nextb <= od . buf_end		3034173	0		&&			
ANR	3034244	EqualityExpression	len != 0		3034173	0		!=			
ANR	3034245	Identifier	len		3034173	0					
ANR	3034246	PrimaryExpression	0		3034173	1					
ANR	3034247	RelationalExpression	od . nextb <= od . buf_end		3034173	1		<=			
ANR	3034248	MemberAccess	od . nextb		3034173	0					
ANR	3034249	Identifier	od		3034173	0					
ANR	3034250	Identifier	nextb		3034173	1					
ANR	3034251	MemberAccess	od . buf_end		3034173	1					
ANR	3034252	Identifier	od		3034173	0					
ANR	3034253	Identifier	buf_end		3034173	1					
ANR	3034254	CompoundStatement		22:41:413:413	3034173	1					
ANR	3034255	ExpressionStatement	* ( od . nextb ) = '\\0'	1250:2:30731:30749	3034173	0	True				
ANR	3034256	AssignmentExpression	* ( od . nextb ) = '\\0'		3034173	0		=			
ANR	3034257	UnaryOperationExpression	* ( od . nextb )		3034173	0					
ANR	3034258	UnaryOperator	*		3034173	0					
ANR	3034259	MemberAccess	od . nextb		3034173	1					
ANR	3034260	Identifier	od		3034173	0					
ANR	3034261	Identifier	nextb		3034173	1					
ANR	3034262	PrimaryExpression	'\\0'		3034173	1					
ANR	3034263	IfStatement	if ( ccp )		3034173	5					
ANR	3034264	Condition	ccp	1252:5:30759:30761	3034173	0	True				
ANR	3034265	Identifier	ccp		3034173	0					
ANR	3034266	CompoundStatement		25:10:450:450	3034173	1					
ANR	3034267	ExpressionStatement	* ccp = cc	1253:2:30768:30777	3034173	0	True				
ANR	3034268	AssignmentExpression	* ccp = cc		3034173	0		=			
ANR	3034269	UnaryOperationExpression	* ccp		3034173	0					
ANR	3034270	UnaryOperator	*		3034173	0					
ANR	3034271	Identifier	ccp		3034173	1					
ANR	3034272	Identifier	cc		3034173	1					
ANR	3034273	ReturnType	static void		3034173	1					
ANR	3034274	Identifier	strx_printv		3034173	2					
ANR	3034275	ParameterList	"int * ccp , char * buf , size_t len , const char * format , va_list ap"		3034173	3					
ANR	3034276	Parameter	int * ccp	1227:24:30238:30245	3034173	0	True				
ANR	3034277	ParameterType	int *		3034173	0					
ANR	3034278	Identifier	ccp		3034173	1					
ANR	3034279	Parameter	char * buf	1227:34:30248:30256	3034173	1	True				
ANR	3034280	ParameterType	char *		3034173	0					
ANR	3034281	Identifier	buf		3034173	1					
ANR	3034282	Parameter	size_t len	1227:45:30259:30268	3034173	2	True				
ANR	3034283	ParameterType	size_t		3034173	0					
ANR	3034284	Identifier	len		3034173	1					
ANR	3034285	Parameter	const char * format	1227:57:30271:30288	3034173	3	True				
ANR	3034286	ParameterType	const char *		3034173	0					
ANR	3034287	Identifier	format		3034173	1					
ANR	3034288	Parameter	va_list ap	1227:77:30291:30300	3034173	4	True				
ANR	3034289	ParameterType	va_list		3034173	0					
ANR	3034290	Identifier	ap		3034173	1					
ANR	3034291	CFGEntryNode	ENTRY		3034173		True				
ANR	3034292	CFGExitNode	EXIT		3034173		True				
ANR	3034293	Symbol	cc		3034173						
ANR	3034294	Symbol	od . nextb		3034173						
ANR	3034295	Symbol	* od . nextb		3034173						
ANR	3034296	Symbol	* ccp		3034173						
ANR	3034297	Symbol	format		3034173						
ANR	3034298	Symbol	ap		3034173						
ANR	3034299	Symbol	format_converter		3034173						
ANR	3034300	Symbol	ccp		3034173						
ANR	3034301	Symbol	* ( od . nextb )		3034173						
ANR	3034302	Symbol	buf		3034173						
ANR	3034303	Symbol	~0		3034173						
ANR	3034304	Symbol	len		3034173						
ANR	3034305	Symbol	od		3034173						
ANR	3034306	Symbol	* od		3034173						
ANR	3034307	Symbol	od . buf_end		3034173						
ANR	3034308	Symbol	& od		3034173						
ANR	3034309	Function	ap_php_slprintf	1258:0:30795:31052							
ANR	3034310	FunctionDef	"ap_php_slprintf (char * buf , size_t len , const char * format)"		3034309	0					
ANR	3034311	CompoundStatement		1259:0:30879:31052	3034309	0					
ANR	3034312	IdentifierDeclStatement	int cc ;	1260:1:30882:30888	3034309	0	True				
ANR	3034313	IdentifierDecl	cc		3034309	0					
ANR	3034314	IdentifierDeclType	int		3034309	0					
ANR	3034315	Identifier	cc		3034309	1					
ANR	3034316	IdentifierDeclStatement	va_list ap ;	1261:1:30891:30901	3034309	1	True				
ANR	3034317	IdentifierDecl	ap		3034309	0					
ANR	3034318	IdentifierDeclType	va_list		3034309	0					
ANR	3034319	Identifier	ap		3034309	1					
ANR	3034320	ExpressionStatement	"va_start ( ap , format )"	1263:1:30905:30925	3034309	2	True				
ANR	3034321	CallExpression	"va_start ( ap , format )"		3034309	0					
ANR	3034322	Callee	va_start		3034309	0					
ANR	3034323	Identifier	va_start		3034309	0					
ANR	3034324	ArgumentList	ap		3034309	1					
ANR	3034325	Argument	ap		3034309	0					
ANR	3034326	Identifier	ap		3034309	0					
ANR	3034327	Argument	format		3034309	1					
ANR	3034328	Identifier	format		3034309	0					
ANR	3034329	ExpressionStatement	"strx_printv ( & cc , buf , len , format , ap )"	1264:1:30928:30966	3034309	3	True				
ANR	3034330	CallExpression	"strx_printv ( & cc , buf , len , format , ap )"		3034309	0					
ANR	3034331	Callee	strx_printv		3034309	0					
ANR	3034332	Identifier	strx_printv		3034309	0					
ANR	3034333	ArgumentList	& cc		3034309	1					
ANR	3034334	Argument	& cc		3034309	0					
ANR	3034335	UnaryOperationExpression	& cc		3034309	0					
ANR	3034336	UnaryOperator	&		3034309	0					
ANR	3034337	Identifier	cc		3034309	1					
ANR	3034338	Argument	buf		3034309	1					
ANR	3034339	Identifier	buf		3034309	0					
ANR	3034340	Argument	len		3034309	2					
ANR	3034341	Identifier	len		3034309	0					
ANR	3034342	Argument	format		3034309	3					
ANR	3034343	Identifier	format		3034309	0					
ANR	3034344	Argument	ap		3034309	4					
ANR	3034345	Identifier	ap		3034309	0					
ANR	3034346	ExpressionStatement	va_end ( ap )	1265:1:30969:30979	3034309	4	True				
ANR	3034347	CallExpression	va_end ( ap )		3034309	0					
ANR	3034348	Callee	va_end		3034309	0					
ANR	3034349	Identifier	va_end		3034309	0					
ANR	3034350	ArgumentList	ap		3034309	1					
ANR	3034351	Argument	ap		3034309	0					
ANR	3034352	Identifier	ap		3034309	0					
ANR	3034353	IfStatement	if ( cc >= len )		3034309	5					
ANR	3034354	Condition	cc >= len	1266:5:30986:30994	3034309	0	True				
ANR	3034355	RelationalExpression	cc >= len		3034309	0		>=			
ANR	3034356	Identifier	cc		3034309	0					
ANR	3034357	Identifier	len		3034309	1					
ANR	3034358	CompoundStatement		8:16:117:117	3034309	1					
ANR	3034359	ExpressionStatement	cc = ( int ) len - 1	1267:2:31001:31017	3034309	0	True				
ANR	3034360	AssignmentExpression	cc = ( int ) len - 1		3034309	0		=			
ANR	3034361	Identifier	cc		3034309	0					
ANR	3034362	AdditiveExpression	( int ) len - 1		3034309	1		-			
ANR	3034363	CastExpression	( int ) len		3034309	0					
ANR	3034364	CastTarget	int		3034309	0					
ANR	3034365	Identifier	len		3034309	1					
ANR	3034366	PrimaryExpression	1		3034309	1					
ANR	3034367	ExpressionStatement	buf [ cc ] = '\\0'	1268:2:31021:31035	3034309	1	True				
ANR	3034368	AssignmentExpression	buf [ cc ] = '\\0'		3034309	0		=			
ANR	3034369	ArrayIndexing	buf [ cc ]		3034309	0					
ANR	3034370	Identifier	buf		3034309	0					
ANR	3034371	Identifier	cc		3034309	1					
ANR	3034372	PrimaryExpression	'\\0'		3034309	1					
ANR	3034373	ReturnStatement	return cc ;	1270:1:31041:31050	3034309	6	True				
ANR	3034374	Identifier	cc		3034309	0					
ANR	3034375	ReturnType	PHPAPI int		3034309	1					
ANR	3034376	Identifier	ap_php_slprintf		3034309	2					
ANR	3034377	ParameterList	"char * buf , size_t len , const char * format"		3034309	3					
ANR	3034378	Parameter	char * buf	1258:27:30822:30830	3034309	0	True				
ANR	3034379	ParameterType	char *		3034309	0					
ANR	3034380	Identifier	buf		3034309	1					
ANR	3034381	Parameter	size_t len	1258:38:30833:30842	3034309	1	True				
ANR	3034382	ParameterType	size_t		3034309	0					
ANR	3034383	Identifier	len		3034309	1					
ANR	3034384	Parameter	const char * format	1258:50:30845:30862	3034309	2	True				
ANR	3034385	ParameterType	const char *		3034309	0					
ANR	3034386	Identifier	format		3034309	1					
ANR	3034387	CFGEntryNode	ENTRY		3034309		True				
ANR	3034388	CFGExitNode	EXIT		3034309		True				
ANR	3034389	Symbol	cc		3034309						
ANR	3034390	Symbol	buf		3034309						
ANR	3034391	Symbol	* buf		3034309						
ANR	3034392	Symbol	len		3034309						
ANR	3034393	Symbol	* cc		3034309						
ANR	3034394	Symbol	format		3034309						
ANR	3034395	Symbol	& cc		3034309						
ANR	3034396	Symbol	ap		3034309						
ANR	3034397	Function	ap_php_vslprintf	1274:0:31065:31282							
ANR	3034398	FunctionDef	"ap_php_vslprintf (char * buf , size_t len , const char * format , va_list ap)"		3034397	0					
ANR	3034399	CompoundStatement		1275:0:31158:31282	3034397	0					
ANR	3034400	IdentifierDeclStatement	int cc ;	1276:1:31161:31167	3034397	0	True				
ANR	3034401	IdentifierDecl	cc		3034397	0					
ANR	3034402	IdentifierDeclType	int		3034397	0					
ANR	3034403	Identifier	cc		3034397	1					
ANR	3034404	ExpressionStatement	"strx_printv ( & cc , buf , len , format , ap )"	1278:1:31171:31209	3034397	1	True				
ANR	3034405	CallExpression	"strx_printv ( & cc , buf , len , format , ap )"		3034397	0					
ANR	3034406	Callee	strx_printv		3034397	0					
ANR	3034407	Identifier	strx_printv		3034397	0					
ANR	3034408	ArgumentList	& cc		3034397	1					
ANR	3034409	Argument	& cc		3034397	0					
ANR	3034410	UnaryOperationExpression	& cc		3034397	0					
ANR	3034411	UnaryOperator	&		3034397	0					
ANR	3034412	Identifier	cc		3034397	1					
ANR	3034413	Argument	buf		3034397	1					
ANR	3034414	Identifier	buf		3034397	0					
ANR	3034415	Argument	len		3034397	2					
ANR	3034416	Identifier	len		3034397	0					
ANR	3034417	Argument	format		3034397	3					
ANR	3034418	Identifier	format		3034397	0					
ANR	3034419	Argument	ap		3034397	4					
ANR	3034420	Identifier	ap		3034397	0					
ANR	3034421	IfStatement	if ( cc >= len )		3034397	2					
ANR	3034422	Condition	cc >= len	1279:5:31216:31224	3034397	0	True				
ANR	3034423	RelationalExpression	cc >= len		3034397	0		>=			
ANR	3034424	Identifier	cc		3034397	0					
ANR	3034425	Identifier	len		3034397	1					
ANR	3034426	CompoundStatement		5:16:68:68	3034397	1					
ANR	3034427	ExpressionStatement	cc = ( int ) len - 1	1280:2:31231:31247	3034397	0	True				
ANR	3034428	AssignmentExpression	cc = ( int ) len - 1		3034397	0		=			
ANR	3034429	Identifier	cc		3034397	0					
ANR	3034430	AdditiveExpression	( int ) len - 1		3034397	1		-			
ANR	3034431	CastExpression	( int ) len		3034397	0					
ANR	3034432	CastTarget	int		3034397	0					
ANR	3034433	Identifier	len		3034397	1					
ANR	3034434	PrimaryExpression	1		3034397	1					
ANR	3034435	ExpressionStatement	buf [ cc ] = '\\0'	1281:2:31251:31265	3034397	1	True				
ANR	3034436	AssignmentExpression	buf [ cc ] = '\\0'		3034397	0		=			
ANR	3034437	ArrayIndexing	buf [ cc ]		3034397	0					
ANR	3034438	Identifier	buf		3034397	0					
ANR	3034439	Identifier	cc		3034397	1					
ANR	3034440	PrimaryExpression	'\\0'		3034397	1					
ANR	3034441	ReturnStatement	return cc ;	1283:1:31271:31280	3034397	3	True				
ANR	3034442	Identifier	cc		3034397	0					
ANR	3034443	ReturnType	PHPAPI int		3034397	1					
ANR	3034444	Identifier	ap_php_vslprintf		3034397	2					
ANR	3034445	ParameterList	"char * buf , size_t len , const char * format , va_list ap"		3034397	3					
ANR	3034446	Parameter	char * buf	1274:28:31093:31101	3034397	0	True				
ANR	3034447	ParameterType	char *		3034397	0					
ANR	3034448	Identifier	buf		3034397	1					
ANR	3034449	Parameter	size_t len	1274:39:31104:31113	3034397	1	True				
ANR	3034450	ParameterType	size_t		3034397	0					
ANR	3034451	Identifier	len		3034397	1					
ANR	3034452	Parameter	const char * format	1274:51:31116:31133	3034397	2	True				
ANR	3034453	ParameterType	const char *		3034397	0					
ANR	3034454	Identifier	format		3034397	1					
ANR	3034455	Parameter	va_list ap	1274:71:31136:31145	3034397	3	True				
ANR	3034456	ParameterType	va_list		3034397	0					
ANR	3034457	Identifier	ap		3034397	1					
ANR	3034458	CFGEntryNode	ENTRY		3034397		True				
ANR	3034459	CFGExitNode	EXIT		3034397		True				
ANR	3034460	Symbol	cc		3034397						
ANR	3034461	Symbol	buf		3034397						
ANR	3034462	Symbol	* buf		3034397						
ANR	3034463	Symbol	len		3034397						
ANR	3034464	Symbol	* cc		3034397						
ANR	3034465	Symbol	format		3034397						
ANR	3034466	Symbol	& cc		3034397						
ANR	3034467	Symbol	ap		3034397						
ANR	3034468	Function	ap_php_snprintf	1287:0:31295:31495							
ANR	3034469	FunctionDef	"ap_php_snprintf (char * buf , size_t len , const char * format)"		3034468	0					
ANR	3034470	CompoundStatement		1288:0:31379:31495	3034468	0					
ANR	3034471	IdentifierDeclStatement	int cc ;	1289:1:31382:31388	3034468	0	True				
ANR	3034472	IdentifierDecl	cc		3034468	0					
ANR	3034473	IdentifierDeclType	int		3034468	0					
ANR	3034474	Identifier	cc		3034468	1					
ANR	3034475	IdentifierDeclStatement	va_list ap ;	1290:1:31391:31401	3034468	1	True				
ANR	3034476	IdentifierDecl	ap		3034468	0					
ANR	3034477	IdentifierDeclType	va_list		3034468	0					
ANR	3034478	Identifier	ap		3034468	1					
ANR	3034479	ExpressionStatement	"va_start ( ap , format )"	1292:1:31405:31425	3034468	2	True				
ANR	3034480	CallExpression	"va_start ( ap , format )"		3034468	0					
ANR	3034481	Callee	va_start		3034468	0					
ANR	3034482	Identifier	va_start		3034468	0					
ANR	3034483	ArgumentList	ap		3034468	1					
ANR	3034484	Argument	ap		3034468	0					
ANR	3034485	Identifier	ap		3034468	0					
ANR	3034486	Argument	format		3034468	1					
ANR	3034487	Identifier	format		3034468	0					
ANR	3034488	ExpressionStatement	"strx_printv ( & cc , buf , len , format , ap )"	1293:1:31428:31466	3034468	3	True				
ANR	3034489	CallExpression	"strx_printv ( & cc , buf , len , format , ap )"		3034468	0					
ANR	3034490	Callee	strx_printv		3034468	0					
ANR	3034491	Identifier	strx_printv		3034468	0					
ANR	3034492	ArgumentList	& cc		3034468	1					
ANR	3034493	Argument	& cc		3034468	0					
ANR	3034494	UnaryOperationExpression	& cc		3034468	0					
ANR	3034495	UnaryOperator	&		3034468	0					
ANR	3034496	Identifier	cc		3034468	1					
ANR	3034497	Argument	buf		3034468	1					
ANR	3034498	Identifier	buf		3034468	0					
ANR	3034499	Argument	len		3034468	2					
ANR	3034500	Identifier	len		3034468	0					
ANR	3034501	Argument	format		3034468	3					
ANR	3034502	Identifier	format		3034468	0					
ANR	3034503	Argument	ap		3034468	4					
ANR	3034504	Identifier	ap		3034468	0					
ANR	3034505	ExpressionStatement	va_end ( ap )	1294:1:31469:31479	3034468	4	True				
ANR	3034506	CallExpression	va_end ( ap )		3034468	0					
ANR	3034507	Callee	va_end		3034468	0					
ANR	3034508	Identifier	va_end		3034468	0					
ANR	3034509	ArgumentList	ap		3034468	1					
ANR	3034510	Argument	ap		3034468	0					
ANR	3034511	Identifier	ap		3034468	0					
ANR	3034512	ReturnStatement	return ( cc ) ;	1295:1:31482:31493	3034468	5	True				
ANR	3034513	Identifier	cc		3034468	0					
ANR	3034514	ReturnType	PHPAPI int		3034468	1					
ANR	3034515	Identifier	ap_php_snprintf		3034468	2					
ANR	3034516	ParameterList	"char * buf , size_t len , const char * format"		3034468	3					
ANR	3034517	Parameter	char * buf	1287:27:31322:31330	3034468	0	True				
ANR	3034518	ParameterType	char *		3034468	0					
ANR	3034519	Identifier	buf		3034468	1					
ANR	3034520	Parameter	size_t len	1287:38:31333:31342	3034468	1	True				
ANR	3034521	ParameterType	size_t		3034468	0					
ANR	3034522	Identifier	len		3034468	1					
ANR	3034523	Parameter	const char * format	1287:50:31345:31362	3034468	2	True				
ANR	3034524	ParameterType	const char *		3034468	0					
ANR	3034525	Identifier	format		3034468	1					
ANR	3034526	CFGEntryNode	ENTRY		3034468		True				
ANR	3034527	CFGExitNode	EXIT		3034468		True				
ANR	3034528	Symbol	cc		3034468						
ANR	3034529	Symbol	buf		3034468						
ANR	3034530	Symbol	len		3034468						
ANR	3034531	Symbol	format		3034468						
ANR	3034532	Symbol	& cc		3034468						
ANR	3034533	Symbol	ap		3034468						
ANR	3034534	Function	ap_php_vsnprintf	1299:0:31508:31668							
ANR	3034535	FunctionDef	"ap_php_vsnprintf (char * buf , size_t len , const char * format , va_list ap)"		3034534	0					
ANR	3034536	CompoundStatement		1300:0:31601:31668	3034534	0					
ANR	3034537	IdentifierDeclStatement	int cc ;	1301:1:31604:31610	3034534	0	True				
ANR	3034538	IdentifierDecl	cc		3034534	0					
ANR	3034539	IdentifierDeclType	int		3034534	0					
ANR	3034540	Identifier	cc		3034534	1					
ANR	3034541	ExpressionStatement	"strx_printv ( & cc , buf , len , format , ap )"	1303:1:31614:31652	3034534	1	True				
ANR	3034542	CallExpression	"strx_printv ( & cc , buf , len , format , ap )"		3034534	0					
ANR	3034543	Callee	strx_printv		3034534	0					
ANR	3034544	Identifier	strx_printv		3034534	0					
ANR	3034545	ArgumentList	& cc		3034534	1					
ANR	3034546	Argument	& cc		3034534	0					
ANR	3034547	UnaryOperationExpression	& cc		3034534	0					
ANR	3034548	UnaryOperator	&		3034534	0					
ANR	3034549	Identifier	cc		3034534	1					
ANR	3034550	Argument	buf		3034534	1					
ANR	3034551	Identifier	buf		3034534	0					
ANR	3034552	Argument	len		3034534	2					
ANR	3034553	Identifier	len		3034534	0					
ANR	3034554	Argument	format		3034534	3					
ANR	3034555	Identifier	format		3034534	0					
ANR	3034556	Argument	ap		3034534	4					
ANR	3034557	Identifier	ap		3034534	0					
ANR	3034558	ReturnStatement	return ( cc ) ;	1304:1:31655:31666	3034534	2	True				
ANR	3034559	Identifier	cc		3034534	0					
ANR	3034560	ReturnType	PHPAPI int		3034534	1					
ANR	3034561	Identifier	ap_php_vsnprintf		3034534	2					
ANR	3034562	ParameterList	"char * buf , size_t len , const char * format , va_list ap"		3034534	3					
ANR	3034563	Parameter	char * buf	1299:28:31536:31544	3034534	0	True				
ANR	3034564	ParameterType	char *		3034534	0					
ANR	3034565	Identifier	buf		3034534	1					
ANR	3034566	Parameter	size_t len	1299:39:31547:31556	3034534	1	True				
ANR	3034567	ParameterType	size_t		3034534	0					
ANR	3034568	Identifier	len		3034534	1					
ANR	3034569	Parameter	const char * format	1299:51:31559:31576	3034534	2	True				
ANR	3034570	ParameterType	const char *		3034534	0					
ANR	3034571	Identifier	format		3034534	1					
ANR	3034572	Parameter	va_list ap	1299:71:31579:31588	3034534	3	True				
ANR	3034573	ParameterType	va_list		3034534	0					
ANR	3034574	Identifier	ap		3034534	1					
ANR	3034575	CFGEntryNode	ENTRY		3034534		True				
ANR	3034576	CFGExitNode	EXIT		3034534		True				
ANR	3034577	Symbol	cc		3034534						
ANR	3034578	Symbol	buf		3034534						
ANR	3034579	Symbol	len		3034534						
ANR	3034580	Symbol	format		3034534						
ANR	3034581	Symbol	& cc		3034534						
ANR	3034582	Symbol	ap		3034534						
ANR	3034583	Function	ap_php_vasprintf	1308:0:31681:32057							
ANR	3034584	FunctionDef	"ap_php_vasprintf (char * * buf , const char * format , va_list ap)"		3034583	0					
ANR	3034585	CompoundStatement		1309:0:31763:32057	3034583	0					
ANR	3034586	IdentifierDeclStatement	va_list ap2 ;	1310:1:31766:31777	3034583	0	True				
ANR	3034587	IdentifierDecl	ap2		3034583	0					
ANR	3034588	IdentifierDeclType	va_list		3034583	0					
ANR	3034589	Identifier	ap2		3034583	1					
ANR	3034590	IdentifierDeclStatement	int cc ;	1311:1:31780:31786	3034583	1	True				
ANR	3034591	IdentifierDecl	cc		3034583	0					
ANR	3034592	IdentifierDeclType	int		3034583	0					
ANR	3034593	Identifier	cc		3034583	1					
ANR	3034594	ExpressionStatement	"va_copy ( ap2 , ap )"	1313:1:31790:31806	3034583	2	True				
ANR	3034595	CallExpression	"va_copy ( ap2 , ap )"		3034583	0					
ANR	3034596	Callee	va_copy		3034583	0					
ANR	3034597	Identifier	va_copy		3034583	0					
ANR	3034598	ArgumentList	ap2		3034583	1					
ANR	3034599	Argument	ap2		3034583	0					
ANR	3034600	Identifier	ap2		3034583	0					
ANR	3034601	Argument	ap		3034583	1					
ANR	3034602	Identifier	ap		3034583	0					
ANR	3034603	ExpressionStatement	"cc = ap_php_vsnprintf ( NULL , 0 , format , ap2 )"	1314:1:31809:31852	3034583	3	True				
ANR	3034604	AssignmentExpression	"cc = ap_php_vsnprintf ( NULL , 0 , format , ap2 )"		3034583	0		=			
ANR	3034605	Identifier	cc		3034583	0					
ANR	3034606	CallExpression	"ap_php_vsnprintf ( NULL , 0 , format , ap2 )"		3034583	1					
ANR	3034607	Callee	ap_php_vsnprintf		3034583	0					
ANR	3034608	Identifier	ap_php_vsnprintf		3034583	0					
ANR	3034609	ArgumentList	NULL		3034583	1					
ANR	3034610	Argument	NULL		3034583	0					
ANR	3034611	Identifier	NULL		3034583	0					
ANR	3034612	Argument	0		3034583	1					
ANR	3034613	PrimaryExpression	0		3034583	0					
ANR	3034614	Argument	format		3034583	2					
ANR	3034615	Identifier	format		3034583	0					
ANR	3034616	Argument	ap2		3034583	3					
ANR	3034617	Identifier	ap2		3034583	0					
ANR	3034618	ExpressionStatement	va_end ( ap2 )	1315:1:31855:31866	3034583	4	True				
ANR	3034619	CallExpression	va_end ( ap2 )		3034583	0					
ANR	3034620	Callee	va_end		3034583	0					
ANR	3034621	Identifier	va_end		3034583	0					
ANR	3034622	ArgumentList	ap2		3034583	1					
ANR	3034623	Argument	ap2		3034583	0					
ANR	3034624	Identifier	ap2		3034583	0					
ANR	3034625	ExpressionStatement	* buf = NULL	1317:1:31870:31881	3034583	5	True				
ANR	3034626	AssignmentExpression	* buf = NULL		3034583	0		=			
ANR	3034627	UnaryOperationExpression	* buf		3034583	0					
ANR	3034628	UnaryOperator	*		3034583	0					
ANR	3034629	Identifier	buf		3034583	1					
ANR	3034630	Identifier	NULL		3034583	1					
ANR	3034631	IfStatement	if ( cc >= 0 )		3034583	6					
ANR	3034632	Condition	cc >= 0	1319:5:31889:31895	3034583	0	True				
ANR	3034633	RelationalExpression	cc >= 0		3034583	0		>=			
ANR	3034634	Identifier	cc		3034583	0					
ANR	3034635	PrimaryExpression	0		3034583	1					
ANR	3034636	CompoundStatement		11:14:134:134	3034583	1					
ANR	3034637	IfStatement	if ( ( * buf = malloc ( ++ cc ) ) != NULL )		3034583	0					
ANR	3034638	Condition	( * buf = malloc ( ++ cc ) ) != NULL	1320:6:31906:31934	3034583	0	True				
ANR	3034639	EqualityExpression	( * buf = malloc ( ++ cc ) ) != NULL		3034583	0		!=			
ANR	3034640	AssignmentExpression	* buf = malloc ( ++ cc )		3034583	0		=			
ANR	3034641	UnaryOperationExpression	* buf		3034583	0					
ANR	3034642	UnaryOperator	*		3034583	0					
ANR	3034643	Identifier	buf		3034583	1					
ANR	3034644	CallExpression	malloc ( ++ cc )		3034583	1					
ANR	3034645	Callee	malloc		3034583	0					
ANR	3034646	Identifier	malloc		3034583	0					
ANR	3034647	ArgumentList	++ cc		3034583	1					
ANR	3034648	Argument	++ cc		3034583	0					
ANR	3034649	UnaryExpression	++ cc		3034583	0					
ANR	3034650	IncDec	++		3034583	0					
ANR	3034651	Identifier	cc		3034583	1					
ANR	3034652	Identifier	NULL		3034583	1					
ANR	3034653	CompoundStatement		12:37:173:173	3034583	1					
ANR	3034654	IfStatement	"if ( ( cc = ap_php_vsnprintf ( * buf , cc , format , ap ) ) < 0 )"		3034583	0					
ANR	3034655	Condition	"( cc = ap_php_vsnprintf ( * buf , cc , format , ap ) ) < 0"	1321:7:31946:31994	3034583	0	True				
ANR	3034656	RelationalExpression	"( cc = ap_php_vsnprintf ( * buf , cc , format , ap ) ) < 0"		3034583	0		<			
ANR	3034657	AssignmentExpression	"cc = ap_php_vsnprintf ( * buf , cc , format , ap )"		3034583	0		=			
ANR	3034658	Identifier	cc		3034583	0					
ANR	3034659	CallExpression	"ap_php_vsnprintf ( * buf , cc , format , ap )"		3034583	1					
ANR	3034660	Callee	ap_php_vsnprintf		3034583	0					
ANR	3034661	Identifier	ap_php_vsnprintf		3034583	0					
ANR	3034662	ArgumentList	* buf		3034583	1					
ANR	3034663	Argument	* buf		3034583	0					
ANR	3034664	UnaryOperationExpression	* buf		3034583	0					
ANR	3034665	UnaryOperator	*		3034583	0					
ANR	3034666	Identifier	buf		3034583	1					
ANR	3034667	Argument	cc		3034583	1					
ANR	3034668	Identifier	cc		3034583	0					
ANR	3034669	Argument	format		3034583	2					
ANR	3034670	Identifier	format		3034583	0					
ANR	3034671	Argument	ap		3034583	3					
ANR	3034672	Identifier	ap		3034583	0					
ANR	3034673	PrimaryExpression	0		3034583	1					
ANR	3034674	CompoundStatement		13:58:233:233	3034583	1					
ANR	3034675	ExpressionStatement	free ( * buf )	1322:4:32003:32013	3034583	0	True				
ANR	3034676	CallExpression	free ( * buf )		3034583	0					
ANR	3034677	Callee	free		3034583	0					
ANR	3034678	Identifier	free		3034583	0					
ANR	3034679	ArgumentList	* buf		3034583	1					
ANR	3034680	Argument	* buf		3034583	0					
ANR	3034681	UnaryOperationExpression	* buf		3034583	0					
ANR	3034682	UnaryOperator	*		3034583	0					
ANR	3034683	Identifier	buf		3034583	1					
ANR	3034684	ExpressionStatement	* buf = NULL	1323:4:32019:32030	3034583	1	True				
ANR	3034685	AssignmentExpression	* buf = NULL		3034583	0		=			
ANR	3034686	UnaryOperationExpression	* buf		3034583	0					
ANR	3034687	UnaryOperator	*		3034583	0					
ANR	3034688	Identifier	buf		3034583	1					
ANR	3034689	Identifier	NULL		3034583	1					
ANR	3034690	ReturnStatement	return cc ;	1328:1:32046:32055	3034583	7	True				
ANR	3034691	Identifier	cc		3034583	0					
ANR	3034692	ReturnType	PHPAPI int		3034583	1					
ANR	3034693	Identifier	ap_php_vasprintf		3034583	2					
ANR	3034694	ParameterList	"char * * buf , const char * format , va_list ap"		3034583	3					
ANR	3034695	Parameter	char * * buf	1308:28:31709:31718	3034583	0	True				
ANR	3034696	ParameterType	char * *		3034583	0					
ANR	3034697	Identifier	buf		3034583	1					
ANR	3034698	Parameter	const char * format	1308:40:31721:31738	3034583	1	True				
ANR	3034699	ParameterType	const char *		3034583	0					
ANR	3034700	Identifier	format		3034583	1					
ANR	3034701	Parameter	va_list ap	1308:60:31741:31750	3034583	2	True				
ANR	3034702	ParameterType	va_list		3034583	0					
ANR	3034703	Identifier	ap		3034583	1					
ANR	3034704	CFGEntryNode	ENTRY		3034583		True				
ANR	3034705	CFGExitNode	EXIT		3034583		True				
ANR	3034706	Symbol	cc		3034583						
ANR	3034707	Symbol	malloc		3034583						
ANR	3034708	Symbol	buf		3034583						
ANR	3034709	Symbol	ap2		3034583						
ANR	3034710	Symbol	* buf		3034583						
ANR	3034711	Symbol	NULL		3034583						
ANR	3034712	Symbol	ap_php_vsnprintf		3034583						
ANR	3034713	Symbol	format		3034583						
ANR	3034714	Symbol	ap		3034583						
ANR	3034715	Function	ap_php_asprintf	1332:0:32070:32251							
ANR	3034716	FunctionDef	"ap_php_asprintf (char * * buf , const char * format)"		3034715	0					
ANR	3034717	CompoundStatement		1333:0:32144:32251	3034715	0					
ANR	3034718	IdentifierDeclStatement	int cc ;	1334:1:32147:32153	3034715	0	True				
ANR	3034719	IdentifierDecl	cc		3034715	0					
ANR	3034720	IdentifierDeclType	int		3034715	0					
ANR	3034721	Identifier	cc		3034715	1					
ANR	3034722	IdentifierDeclStatement	va_list ap ;	1335:1:32156:32166	3034715	1	True				
ANR	3034723	IdentifierDecl	ap		3034715	0					
ANR	3034724	IdentifierDeclType	va_list		3034715	0					
ANR	3034725	Identifier	ap		3034715	1					
ANR	3034726	ExpressionStatement	"va_start ( ap , format )"	1337:1:32170:32190	3034715	2	True				
ANR	3034727	CallExpression	"va_start ( ap , format )"		3034715	0					
ANR	3034728	Callee	va_start		3034715	0					
ANR	3034729	Identifier	va_start		3034715	0					
ANR	3034730	ArgumentList	ap		3034715	1					
ANR	3034731	Argument	ap		3034715	0					
ANR	3034732	Identifier	ap		3034715	0					
ANR	3034733	Argument	format		3034715	1					
ANR	3034734	Identifier	format		3034715	0					
ANR	3034735	ExpressionStatement	"cc = vasprintf ( buf , format , ap )"	1338:1:32193:32224	3034715	3	True				
ANR	3034736	AssignmentExpression	"cc = vasprintf ( buf , format , ap )"		3034715	0		=			
ANR	3034737	Identifier	cc		3034715	0					
ANR	3034738	CallExpression	"vasprintf ( buf , format , ap )"		3034715	1					
ANR	3034739	Callee	vasprintf		3034715	0					
ANR	3034740	Identifier	vasprintf		3034715	0					
ANR	3034741	ArgumentList	buf		3034715	1					
ANR	3034742	Argument	buf		3034715	0					
ANR	3034743	Identifier	buf		3034715	0					
ANR	3034744	Argument	format		3034715	1					
ANR	3034745	Identifier	format		3034715	0					
ANR	3034746	Argument	ap		3034715	2					
ANR	3034747	Identifier	ap		3034715	0					
ANR	3034748	ExpressionStatement	va_end ( ap )	1339:1:32227:32237	3034715	4	True				
ANR	3034749	CallExpression	va_end ( ap )		3034715	0					
ANR	3034750	Callee	va_end		3034715	0					
ANR	3034751	Identifier	va_end		3034715	0					
ANR	3034752	ArgumentList	ap		3034715	1					
ANR	3034753	Argument	ap		3034715	0					
ANR	3034754	Identifier	ap		3034715	0					
ANR	3034755	ReturnStatement	return cc ;	1340:1:32240:32249	3034715	5	True				
ANR	3034756	Identifier	cc		3034715	0					
ANR	3034757	ReturnType	PHPAPI int		3034715	1					
ANR	3034758	Identifier	ap_php_asprintf		3034715	2					
ANR	3034759	ParameterList	"char * * buf , const char * format"		3034715	3					
ANR	3034760	Parameter	char * * buf	1332:27:32097:32106	3034715	0	True				
ANR	3034761	ParameterType	char * *		3034715	0					
ANR	3034762	Identifier	buf		3034715	1					
ANR	3034763	Parameter	const char * format	1332:39:32109:32126	3034715	1	True				
ANR	3034764	ParameterType	const char *		3034715	0					
ANR	3034765	Identifier	format		3034715	1					
ANR	3034766	CFGEntryNode	ENTRY		3034715		True				
ANR	3034767	CFGExitNode	EXIT		3034715		True				
ANR	3034768	Symbol	cc		3034715						
ANR	3034769	Symbol	vasprintf		3034715						
ANR	3034770	Symbol	buf		3034715						
ANR	3034771	Symbol	format		3034715						
ANR	3034772	Symbol	ap		3034715						
