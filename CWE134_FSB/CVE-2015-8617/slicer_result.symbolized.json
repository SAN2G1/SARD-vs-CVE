[{"FileName": "zend_execute_API_before.c", "Caller": "zend_handle_sigsegv", "Source": false, "Sink": false, "idx": 0, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "signal", "line": 60, "label": -3, "slices": ["\tif (original_sigsegv_handler == zend_handle_sigsegv) {\n", "\t\tsignal(SIGSEGV, original_sigsegv_handler);\n"], "tokenized": "if (Var1 ==  Var2){\nsignal(Var3,Var1); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_handle_sigsegv", "Source": false, "Sink": false, "idx": 1, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "signal", "line": 62, "label": -3, "slices": ["\tif (original_sigsegv_handler == zend_handle_sigsegv) {\n", "else\n", "\t\tsignal(SIGSEGV, SIG_DFL);\n"], "tokenized": "if (Var1 ==  Var2){\nelse \nsignal(Var3,Var4); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_handle_sigsegv", "Source": false, "Sink": false, "idx": 2, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 66, "label": -3, "slices": ["\t\tfprintf(stderr, \"SIGSEGV caught on opcode %d on opline %d of %s() at %s:%d\\n\\n\",\n\t\t\t\tactive_opline->opcode,\n\t\t\t\tactive_opline-EG(active_op_array)->opcodes,\n\t\t\t\tget_active_function_name(),\n\t\t\t\tzend_get_executed_filename(),\n\t\t\t\tzend_get_executed_lineno());\n"], "tokenized": "fprintf(Var1,STRING,\nVar2->memberVar1,\nVar2-FUNC1(Var3)->memberVar1,\nFUNC2(),\nFUNC3(),\nFUNC4()); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "init_executor", "Source": false, "Sink": false, "idx": 3, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "signal", "line": 136, "label": -3, "slices": ["\toriginal_sigsegv_handler = signal(SIGSEGV, zend_handle_sigsegv);\n"], "tokenized": "Var1=signal(Var2,Var3); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "init_executor", "Source": false, "Sink": false, "idx": 4, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memset", "line": 184, "label": -3, "slices": ["\tEG(ht_iterators_used) = 0;\n", "\tEG(ht_iterators) = EG(ht_iterators_slots);\n", "\tmemset(EG(ht_iterators), 0, sizeof(EG(ht_iterators_slots)));\n"], "tokenized": "FUNC1(Var1)=0; \nFUNC1(Var2)=FUNC1(Var3); \nmemset(FUNC1(Var2),0,sizeof (FUNC1(Var3))); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "shutdown_executor", "Source": false, "Sink": false, "idx": 5, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "signal", "line": 383, "label": -3, "slices": ["\tsignal(SIGSEGV, original_sigsegv_handler);\n"], "tokenized": "signal(Var1,Var2); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zval_update_constant_ex", "Source": false, "Sink": false, "idx": 6, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memmove", "line": 594, "label": -3, "slices": ["ZEND_API int zval_update_constant_ex(zval *p, zend_bool inline_change, zend_class_entry *scope) /* {{{ */\n", "\tzval *const_value;\n", "\tchar *colon;\n", "\tif (IS_CONSTANT_VISITED(p)) {\n", "\t\tzend_throw_error(NULL, \"Cannot declare self-referencing constant '%s'\", Z_STRVAL_P(p));\n", "else\n", "\t} else if (Z_TYPE_P(p) == IS_CONSTANT) {\n", "\t\tSEPARATE_ZVAL_NOREF(p);\n", "\t\tMARK_CONSTANT_VISITED(p);\n", "\t\tif (Z_CONST_FLAGS_P(p) & IS_CONSTANT_CLASS) {\n", "\t\t\tif (inline_change) {\n", "\t\t\t\tzend_string_release(Z_STR_P(p));\n", "\t\t\tif (EG(scope) && EG(scope)->name) {\n", "\t\t\t\tZVAL_STR_COPY(p, EG(scope)->name);\n", "else\n", "\t\t\t\tZVAL_EMPTY_STRING(p);\n", "else\n", "\t\t} else if (UNEXPECTED((const_value = zend_get_constant_ex(Z_STR_P(p), scope, Z_CONST_FLAGS_P(p))) == NULL)) {\n", "\t\t\tchar *actual = Z_STRVAL_P(p);\n", "\t\t\tif (UNEXPECTED(EG(exception))) {\n", "\t\t\t\tRESET_CONSTANT_VISITED(p);\n", "else\n", "\t\t\t} else if ((colon = (char*)zend_memrchr(Z_STRVAL_P(p), ':', Z_STRLEN_P(p)))) {\n", "\t\t\t\tzend_throw_error(NULL, \"Undefined class constant '%s'\", Z_STRVAL_P(p));\n", "\t\t\t\tRESET_CONSTANT_VISITED(p);\n", "else\n", "\t\t\t\tzend_string *save = Z_STR_P(p);\n", "\t\t\t\tchar *slash;\n", "\t\t\t\tsize_t actual_len = Z_STRLEN_P(p);\n", "\t\t\t\tif ((Z_CONST_FLAGS_P(p) & IS_CONSTANT_UNQUALIFIED) && (slash = (char *)zend_memrchr(actual, '\\\\', actual_len))) {\n", "\t\t\t\t\tactual_len -= (actual - Z_STRVAL_P(p));\n", "\t\t\t\t\tif (inline_change) {\n", "\t\t\t\t\t\tzend_string *s = zend_string_init(actual, actual_len, 0);\n", "\t\t\t\t\t\tZ_STR_P(p) = s;\n", "\t\t\t\t\t\tZ_TYPE_FLAGS_P(p) = IS_TYPE_REFCOUNTED | IS_TYPE_COPYABLE;\n", "\t\t\t\tif (actual[0] == '\\\\') {\n", "\t\t\t\t\tif (inline_change) {\n", "\t\t\t\t\t\tmemmove(Z_STRVAL_P(p), Z_STRVAL_P(p)+1, Z_STRLEN_P(p));\n", "\t\t\t\t\t\t--Z_STRLEN_P(p);\n", "\t\t\t\tif ((Z_CONST_FLAGS_P(p) & IS_CONSTANT_UNQUALIFIED) == 0) {\n", "\t\t\t\t\tRESET_CONSTANT_VISITED(p);\n", "\t\t\t\t\tif (!inline_change) {\n", "\t\t\t\t\t\tZVAL_STRINGL(p, actual, actual_len);\n", "else\n", "\t\t\t\t\t\tZ_TYPE_INFO_P(p) = Z_REFCOUNTED_P(p) ?\n", "else\n", "\t\t\tif (inline_change) {\n", "\t\t\t\tzend_string_release(Z_STR_P(p));\n", "\t\t\tZVAL_COPY_VALUE(p, const_value);\n", "\t\t\tif (Z_OPT_CONSTANT_P(p)) {\n", "\t\t\t\tif (UNEXPECTED(zval_update_constant_ex(p, 1, NULL) != SUCCESS)) {\n", "\t\t\t\t\tRESET_CONSTANT_VISITED(p);\n", "\t\t\tzval_opt_copy_ctor(p);\n", "else\n", "\t} else if (Z_TYPE_P(p) == IS_CONSTANT_AST) {\n", "\t\tif (UNEXPECTED(zend_ast_evaluate(&tmp, Z_ASTVAL_P(p), scope) != SUCCESS)) {\n", "\t\tif (inline_change) {\n", "\t\t\tzval_ptr_dtor(p);\n", "\t\tZVAL_COPY_VALUE(p, &tmp);\n"], "tokenized": "Var1 int FUNC1(STRUCT1 *Var2,STRUCT2  Var3,STRUCT3 *Var4)/*{{{*/\nSTRUCT1 *Var5; \nchar *Var6; \nif (FUNC2(Var2)){\nFUNC3(NULL ,STRING,FUNC4(Var2)); \nelse \n}else if (FUNC5(Var2) ==  Var7){\nFUNC6(Var2); \nFUNC7(Var2); \nif (FUNC8(Var2)&Var8){\nif (Var3){\nFUNC9(FUNC10(Var2)); \nif (FUNC11(Var4)&&FUNC11(Var4)->memberVar1){\nFUNC12(Var2,FUNC11(Var4)->memberVar1); \nelse \nFUNC13(Var2); \nelse \n}else if (FUNC14((Var5=FUNC15(FUNC10(Var2),Var4,FUNC8(Var2))) == NULL )){\nchar *Var9=FUNC4(Var2); \nif (FUNC14(FUNC11(Var10))){\nFUNC16(Var2); \nelse \n}else if ((Var6=(char *) FUNC17(FUNC4(Var2),,FUNC18(Var2)))){\nFUNC3(NULL ,STRING,FUNC4(Var2)); \nFUNC16(Var2); \nelse \nSTRUCT4 *Var11=FUNC10(Var2); \nchar *Var12; \nsize_t  Var13=FUNC18(Var2); \nif ((FUNC8(Var2)&Var14)&&(Var12=(char *) FUNC17(Var9,,Var13))){\nVar13 FUNC19(Var9-FUNC4(Var2)); \nif (Var3){\nSTRUCT4 *Var15=FUNC20(Var9,Var13,0); \nFUNC10(Var2)=Var15; \nFUNC21(Var2)=Var16|Var17; \nif (Var9[0]== ){\nif (Var3){\nmemmove(FUNC4(Var2),FUNC4(Var2)+1,FUNC18(Var2)); \nSTRUCT5 FUNC18(Var2); \nif ((FUNC8(Var2)&Var14) == 0){\nFUNC16(Var2); \nif (!Var3){\nFUNC22(Var2,Var9,Var13); \nelse \nFUNC23(Var2)=FUNC24(Var2)\nelse \nif (Var3){\nFUNC9(FUNC10(Var2)); \nFUNC25(Var2,Var5); \nif (FUNC26(Var2)){\nif (FUNC14(FUNC1(Var2,1,NULL ) !=  Var18)){\nFUNC16(Var2); \nFUNC27(Var2); \nelse \n}else if (FUNC5(Var2) ==  Var19){\nif (FUNC14(FUNC28(&Var20,FUNC29(Var2),Var4) !=  Var18)){\nif (Var3){\nFUNC30(Var2); \nFUNC25(Var2,&Var20); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_call_function", "Source": false, "Sink": false, "idx": 7, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memset", "line": 718, "label": -3, "slices": ["\tif (!EG(active)) {\n", "\tif (EG(exception)) {\n", "\tif (!EG(current_execute_data)) {\n", "\t\tmemset(&dummy_execute_data, 0, sizeof(zend_execute_data));\n"], "tokenized": "if (!FUNC1(Var1)){\nif (FUNC1(Var2)){\nif (!FUNC1(Var3)){\nmemset(&Var4,0,sizeof (Var5)); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_lookup_class_ex", "Source": false, "Sink": false, "idx": 8, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strspn", "line": 992, "label": -3, "slices": ["ZEND_API zend_class_entry *zend_lookup_class_ex(zend_string *name, const zval *key, int use_autoload) /* {{{ */\n", "\tzend_class_entry *ce = NULL;\n", "\tzval args[1];\n", "\tzend_string *lc_name;\n", "\tif (key) {\n", "else\n", "\t\tif (name == NULL || !ZSTR_LEN(name)) {\n", "\t\tif (ZSTR_VAL(name)[0] == '\\\\') {\n", "\t\t\tlc_name = zend_string_alloc(ZSTR_LEN(name) - 1, 0);\n", "\t\t\tzend_str_tolower_copy(ZSTR_VAL(lc_name), ZSTR_VAL(name) + 1, ZSTR_LEN(name) - 1);\n", "else\n", "\t\t\tlc_name = zend_string_tolower(name);\n", "\tif (ce) {\n", "\tif (!use_autoload || zend_is_compiling()) {\n", "\tif (!EG(autoload_func)) {\n", "\t\tzend_function *func = zend_hash_str_find_ptr(EG(function_table), ZEND_AUTOLOAD_FUNC_NAME, sizeof(ZEND_AUTOLOAD_FUNC_NAME) - 1);\n", "\t\tif (func) {\n", "\tif (strspn(ZSTR_VAL(name), \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\") != ZSTR_LEN(name)) {\n", "\tif (zend_hash_add_empty_element(EG(in_autoload), lc_name) == NULL) {\n", "\tif (ZSTR_VAL(name)[0] == '\\\\') {\n", "\t\tZVAL_STRINGL(&args[0], ZSTR_VAL(name) + 1, ZSTR_LEN(name) - 1);\n", "else\n", "\t\tZVAL_STR_COPY(&args[0], name);\n"], "tokenized": "STRUCT1 STRUCT2 *FUNC1(STRUCT3 *Var1,const STRUCT4 *Var2,int  Var3)/*{{{*/\nSTRUCT2 *Var4=NULL ; \nSTRUCT4  Var5[1]; \nSTRUCT3 *Var6; \nif (Var2){\nelse \nif (Var1 == NULL ||!FUNC2(Var1)){\nif (FUNC3(Var1)[0]== ){\nVar6=FUNC4(FUNC2(Var1)-1,0); \nFUNC5(FUNC3(Var6),FUNC3(Var1)+1,FUNC2(Var1)-1); \nelse \nVar6=FUNC6(Var1); \nif (Var4){\nif (!Var3||FUNC7()){\nif (!FUNC8(Var7)){\nSTRUCT5 *Var8=FUNC9(FUNC8(Var9),Var10,sizeof (Var10)-1); \nif (Var8){\nif (strspn(FUNC3(Var1),STRING) != FUNC2(Var1)){\nif (FUNC10(FUNC8(Var11),Var6) == NULL ){\nif (FUNC3(Var1)[0]== ){\nFUNC11(&Var5[0],FUNC3(Var1)+1,FUNC2(Var1)-1); \nelse \nFUNC12(&Var5[0],Var1); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_eval_stringl", "Source": false, "Sink": false, "idx": 9, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memcpy", "line": 1103, "label": -3, "slices": ["\tzval pv;\n", "\tif (retval_ptr) {\n", "\t\tmemcpy(Z_STRVAL(pv), \"return \", sizeof(\"return \") - 1);\n", "\t\tmemcpy(Z_STRVAL(pv) + sizeof(\"return \") - 1, str, str_len);\n", "\t\tZ_STRVAL(pv)[Z_STRLEN(pv) - 1] = ';';\n", "\t\tZ_STRVAL(pv)[Z_STRLEN(pv)] = '\\0';\n"], "tokenized": "STRUCT1  Var1; \nif (Var2){\nmemcpy(FUNC1(Var1),STRING,sizeof (STRING)-1); \nmemcpy(FUNC1(Var1)+sizeof (STRING)-1,Var3,Var4); \nFUNC1(Var1)[FUNC2(Var1)-1]=; ; \nFUNC1(Var1)[FUNC2(Var1)]=0; \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_eval_stringl", "Source": false, "Sink": false, "idx": 10, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memcpy", "line": 1104, "label": -3, "slices": ["ZEND_API int zend_eval_stringl(char *str, size_t str_len, zval *retval_ptr, char *string_name) /* {{{ */\n", "\tzval pv;\n", "\tif (retval_ptr) {\n", "\t\tZVAL_NEW_STR(&pv, zend_string_alloc(str_len + sizeof(\"return ;\")-1, 1));\n", "\t\tmemcpy(Z_STRVAL(pv), \"return \", sizeof(\"return \") - 1);\n", "\t\tmemcpy(Z_STRVAL(pv) + sizeof(\"return \") - 1, str, str_len);\n", "\t\tZ_STRVAL(pv)[Z_STRLEN(pv) - 1] = ';';\n", "\t\tZ_STRVAL(pv)[Z_STRLEN(pv)] = '\\0';\n", "else\n", "\t\tZVAL_STRINGL(&pv, str, str_len);\n"], "tokenized": "Var1 int FUNC1(char *Var2,size_t  Var3,STRUCT1 *Var4,char *Var5)/*{{{*/\nSTRUCT1  Var6; \nif (Var4){\nFUNC2(&Var6,FUNC3(Var3+sizeof (STRING)-1,1)); \nmemcpy(FUNC4(Var6),STRING,sizeof (STRING)-1); \nmemcpy(FUNC4(Var6)+sizeof (STRING)-1,Var2,Var3); \nFUNC4(Var6)[FUNC5(Var6)-1]=; ; \nFUNC4(Var6)[FUNC5(Var6)]=0; \nelse \nFUNC6(&Var6,Var2,Var3); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_eval_string", "Source": false, "Sink": false, "idx": 11, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strlen", "line": 1158, "label": -3, "slices": ["ZEND_API int zend_eval_string(char *str, zval *retval_ptr, char *string_name) /* {{{ */\n", "\treturn zend_eval_stringl(str, strlen(str), retval_ptr, string_name);\n"], "tokenized": "Var1 int FUNC1(char *Var2,STRUCT1 *Var3,char *Var4)/*{{{*/\nreturn FUNC2(Var2,strlen(Var2),Var3,Var4); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_eval_string_ex", "Source": false, "Sink": false, "idx": 12, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strlen", "line": 1177, "label": -3, "slices": ["ZEND_API int zend_eval_string_ex(char *str, zval *retval_ptr, char *string_name, int handle_exceptions) /* {{{ */\n", "\treturn zend_eval_stringl_ex(str, strlen(str), retval_ptr, string_name, handle_exceptions);\n"], "tokenized": "Var1 int FUNC1(char *Var2,STRUCT1 *Var3,char *Var4,int  Var5)/*{{{*/\nreturn FUNC2(Var2,strlen(Var2),Var3,Var4,Var5); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_verify_abstract_class", "Source": false, "Sink": false, "idx": 13, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memset", "line": 1439, "label": -3, "slices": ["\tif ((ce->ce_flags & ZEND_ACC_IMPLICIT_ABSTRACT_CLASS) && !(ce->ce_flags & (ZEND_ACC_TRAIT | ZEND_ACC_EXPLICIT_ABSTRACT_CLASS))) {\n", "\t\tmemset(&ai, 0, sizeof(ai));\n"], "tokenized": "if ((Var1->memberVar1&Var2)&&!(Var1->memberVar1&(Var3|Var4))){\nmemset(&Var5,0,sizeof (Var5)); \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_set_local_var", "Source": false, "Sink": false, "idx": 14, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memcmp", "line": 1590, "label": -3, "slices": ["ZEND_API int zend_set_local_var(zend_string *name, zval *value, int force) /* {{{ */\n", "\tzend_execute_data *execute_data = EG(current_execute_data);\n", "\twhile (execute_data && (!execute_data->func || !ZEND_USER_CODE(execute_data->func->common.type))) {\n", "\t\texecute_data = execute_data->prev_execute_data;\n", "\tif (execute_data) {\n", "\t\tif (!execute_data->symbol_table) {\n", "\t\t\tzend_ulong h = zend_string_hash_val(name);\n", "\t\t\tzend_op_array *op_array = &execute_data->func->op_array;\n", "\t\t\tif (EXPECTED(op_array->last_var)) {\n", "\t\t\t\tzend_string **str = op_array->vars;\n", "\t\t\t\tzend_string **end = str + op_array->last_var;\n", "\t\t\t\t\tif (ZSTR_H(*str) == h &&\n\t\t\t\t\t    ZSTR_LEN(*str) == ZSTR_LEN(name) &&\n\t\t\t\t\t    memcmp(ZSTR_VAL(*str), ZSTR_VAL(name), ZSTR_LEN(name)) == 0) {\n", "\t\t\t\t\t\tzval *var = EX_VAR_NUM(str - op_array->vars);\n", "\t\t\t\t\tstr++;\n", "\t\t\t\t} while (str != end);\n", "\t\t\tif (force) {\n", "\t\t\t\tzend_array *symbol_table = zend_rebuild_symbol_table();\n", "\t\t\t\tif (symbol_table) {\n", "\t\t\t\t\treturn zend_hash_update(symbol_table, name, value) ? SUCCESS : FAILURE;;\n", "else\n", "\t\t\treturn (zend_hash_update_ind(execute_data->symbol_table, name, value) != NULL) ? SUCCESS : FAILURE;\n"], "tokenized": "Var1 int FUNC1(STRUCT1 *Var2,STRUCT2 *Var3,int  Var4)/*{{{*/\nSTRUCT3 *Var5=FUNC2(Var6); \nwhile (Var5&&(!Var5->memberVar1||!FUNC3(Var5->memberVar1->memberVar1.memberVar1))){\nVar5=Var5->memberVar2; \nif (Var5){\nif (!Var5->memberVar3){\nSTRUCT4  Var7=FUNC4(Var2); \nSTRUCT5 *Var8=&Var5->memberVar1->memberVar2; \nif (FUNC5(memberVar2->memberVar1)){\nSTRUCT1 **Var9=memberVar2->memberVar2; \nSTRUCT1 **Var10=Var9+memberVar2->memberVar1; \nif (FUNC6(*Var9) ==  Var7&&\nFUNC7(*Var9) == FUNC7(Var2)&&\nmemcmp(FUNC8(*Var9),FUNC8(Var2),FUNC7(Var2)) == 0){\nSTRUCT2 *Var11=FUNC9(Var9-memberVar2->memberVar2); \nVar9  Var12; \n}while (Var9 !=  Var10); \nif (Var4){\nSTRUCT6 *memberVar3=FUNC10(); \nif (memberVar3){\nreturn FUNC11(memberVar3,Var2,Var3) STRUCT7  Var13; ; \nelse \nreturn (FUNC12(Var5->memberVar3,Var2,Var3) != NULL ) STRUCT7  Var13; \n"}, {"FileName": "zend_execute_API_before.c", "Caller": "zend_set_local_var_str", "Source": false, "Sink": false, "idx": 15, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memcmp", "line": 1631, "label": -3, "slices": ["ZEND_API int zend_set_local_var_str(const char *name, size_t len, zval *value, int force) /* {{{ */\n", "\tzend_execute_data *execute_data = EG(current_execute_data);\n", "\twhile (execute_data && (!execute_data->func || !ZEND_USER_CODE(execute_data->func->common.type))) {\n", "\t\texecute_data = execute_data->prev_execute_data;\n", "\tif (execute_data) {\n", "\t\tif (!execute_data->symbol_table) {\n", "\t\t\tzend_ulong h = zend_hash_func(name, len);\n", "\t\t\tzend_op_array *op_array = &execute_data->func->op_array;\n", "\t\t\tif (EXPECTED(op_array->last_var)) {\n", "\t\t\t\tzend_string **str = op_array->vars;\n", "\t\t\t\tzend_string **end = str + op_array->last_var;\n", "\t\t\t\t\tif (ZSTR_H(*str) == h &&\n\t\t\t\t\t    ZSTR_LEN(*str) == len &&\n\t\t\t\t\t    memcmp(ZSTR_VAL(*str), name, len) == 0) {\n", "\t\t\t\t\t\tzval *var = EX_VAR_NUM(str - op_array->vars);\n", "\t\t\t\t\tstr++;\n", "\t\t\t\t} while (str != end);\n", "\t\t\tif (force) {\n", "\t\t\t\tzend_array *symbol_table = zend_rebuild_symbol_table();\n", "\t\t\t\tif (symbol_table) {\n", "\t\t\t\t\treturn zend_hash_str_update(symbol_table, name, len, value) ? SUCCESS : FAILURE;;\n", "else\n", "\t\t\treturn (zend_hash_str_update_ind(execute_data->symbol_table, name, len, value) != NULL) ? SUCCESS : FAILURE;\n"], "tokenized": "Var1 int FUNC1(const char *Var2,size_t  Var3,STRUCT1 *Var4,int  Var5)/*{{{*/\nSTRUCT2 *Var6=FUNC2(Var7); \nwhile (Var6&&(!Var6->memberVar1||!FUNC3(Var6->memberVar1->memberVar1.memberVar1))){\nVar6=Var6->memberVar2; \nif (Var6){\nif (!Var6->memberVar3){\nSTRUCT3  Var8=FUNC4(Var2,Var3); \nSTRUCT4 *Var9=&Var6->memberVar1->memberVar2; \nif (FUNC5(memberVar2->memberVar1)){\nSTRUCT5 **Var10=memberVar2->memberVar2; \nSTRUCT5 **Var11=Var10+memberVar2->memberVar1; \nif (FUNC6(*Var10) ==  Var8&&\nFUNC7(*Var10) ==  Var3&&\nmemcmp(FUNC8(*Var10),Var2,Var3) == 0){\nSTRUCT1 *Var12=FUNC9(Var10-memberVar2->memberVar2); \nVar10  Var13; \n}while (Var10 !=  Var11); \nif (Var5){\nSTRUCT6 *memberVar3=FUNC10(); \nif (memberVar3){\nreturn FUNC11(memberVar3,Var2,Var3,Var4) STRUCT7  Var14; ; \nelse \nreturn (FUNC12(Var6->memberVar3,Var2,Var3,Var4) != NULL ) STRUCT7  Var14; \n"}]