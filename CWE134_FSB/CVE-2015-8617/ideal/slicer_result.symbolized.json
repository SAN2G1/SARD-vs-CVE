[{"FileName": "manager.c", "Caller": "add_server", "Source": false, "Sink": true, "idx": 0, "CWE-ID": "CWE-78", "category": "CallExpression", "criterion": "system", "line": 42, "label": -3, "slices": ["int main(int argc, char **argv)\n", "{\n", "    int sfd;\n", "    if (ip_addr.host == NULL || ip_addr.port == NULL) {\n", "        struct sockaddr_un svaddr;\n", "        sfd = socket(AF_UNIX, SOCK_DGRAM, 0);\n", "        if (sfd == -1) {\n", "        setnonblocking(sfd);\n", "        if (bind(sfd, (struct sockaddr *)&svaddr, sizeof(struct sockaddr_un)) == -1) {\n", "    } \n", "    manager.fd = sfd;\n", "    ev_io_init(&manager.io, manager_recv_cb, manager.fd, EV_READ);\n", "}\n", "static void manager_recv_cb(EV_P_ ev_io *w, int revents)\n", "{\n", "    struct manager_ctx *manager = (struct manager_ctx *)w;\n", "    r   = recvfrom(manager->fd, buf, BUF_SIZE, 0, (struct sockaddr *)&claddr, &len);\n", "    if (r == -1) {\n", "    if (r > BUF_SIZE / 2) {\n", "    char *action = get_action(buf, r);\n", "    if (action == NULL) {\n", "    if (strcmp(action, \"add\") == 0) {\n", "        struct server *server = get_server(buf, r);\n", "        if (server == NULL || server->port[0] == 0 || server->password[0] == 0) {\n", "        int ret = add_server(manager, server);\n", "}\n", "static int add_server(struct manager_ctx *manager, struct server *server)\n", "{\n", "    int ret = check_port(manager, server);\n", "    cork_hash_table_put(server_table, (void *)server->port, (void *)server, &new, NULL, NULL);\n", "    char *cmd = construct_command_line(manager, server);\n", "    construct_command_line(struct manager_ctx *manager, struct server *server){\n", "        static char cmd[BUF_SIZE];\n", "        char *method = manager->method;\n", "        int i;\n", "        build_config(working_dir, server);\n", "        if (server->method) method = server->method;\n", "        memset(cmd, 0, BUF_SIZE);\n", "        snprintf(cmd, BUF_SIZE,\n", "                \"%s -m %s --manager-address %s -f %s/.shadowsocks_%s.pid -c %s/.shadowsocks_%s.conf\",\n", "                executable, method, manager->manager_address,\n", "                working_dir, server->port, working_dir, server->port);\n", "        return cmd;\n", "    }\n", "    if (system(cmd) == -1) {\n", "}\n"], "tokenized": "int main(int  Var1,char **Var2)\n{\nint  Var3; \nif (Var4.memberVar1 == NULL ||Var4.memberVar2 == NULL ){\nstruct  STRUCT1  Var5; \nVar3=socket(Var6,Var7,0); \nif (Var3 == -1){\nFUNC1(Var3); \nif (FUNC2(Var3,(struct STRUCT2 *)&Var5,sizeof (struct  STRUCT1)) == -1){\n}\nVar8.memberVar1=Var3; \nFUNC3(&Var8.memberVar2,Var9,Var8.memberVar1,Var10); \n}\nstatic void Var9(STRUCT3 STRUCT4 *Var11,int  Var12)\n{\nstruct STRUCT5 *Var8=(struct STRUCT5 *) Var11; \nVar13=recvfrom(Var8->memberVar1,Var14,Var15,0,(struct STRUCT2 *)&Var16,&Var17); \nif (Var13 == -1){\nif (Var13>Var15/2){\nchar *Var18=FUNC4(Var14,Var13); \nif (Var18 == NULL ){\nif (strcmp(Var18,STRING) == 0){\nstruct STRUCT6 *STRUCT6=FUNC5(Var14,Var13); \nif (STRUCT6 == NULL ||STRUCT6->memberVar1[0]== 0||STRUCT6->memberVar2[0]== 0){\nint  Var19=FUNC6(Var8,STRUCT6); \n}\nstatic int FUNC6(struct STRUCT5 *Var8,struct STRUCT6 *STRUCT6)\n{\nint  Var19=FUNC7(Var8,STRUCT6); \nFUNC8(Var20,(void *) STRUCT6->memberVar1,(void *) STRUCT6,&new ,NULL ,NULL ); \nchar *Var21=FUNC9(Var8,STRUCT6); \nFUNC9(struct STRUCT5 *Var8,struct STRUCT6 *STRUCT6){\nstatic char  Var21[Var15]; \nchar *Var22=Var8->memberVar3; \nint  Var23; \nFUNC10(Var24,STRUCT6); \nif (STRUCT6->memberVar3) memberVar3=STRUCT6->memberVar3; \nmemset(Var21,0,Var15); \nsnprintf(Var21,Var15,\nSTRING,\nVar25,memberVar3,Var8->memberVar4,\nVar24,STRUCT6->memberVar1,Var24,STRUCT6->memberVar1); \nreturn  Var21; \n}\nif (system(Var21) == -1){\n}\n"}]